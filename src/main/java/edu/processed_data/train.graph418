class C{  public BusinessObjectDataEntity createBusinessObjectDataEntity(BusinessObjectFormatEntity businessObjectFormatEntity,String businessObjectDataPartitionValue,Integer businessObjectDataVersion,Boolean businessObjectDataLatestVersion,String businessObjectDataStatusCode){  BusinessObjectDataStatusEntity businessObjectDataStatusEntity=businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(businessObjectDataStatusCode);  if (businessObjectDataStatusEntity == null) {    businessObjectDataStatusEntity=businessObjectDataStatusDaoTestHelper.createBusinessObjectDataStatusEntity(businessObjectDataStatusCode);  }  return createBusinessObjectDataEntity(businessObjectFormatEntity,businessObjectDataPartitionValue,AbstractDaoTest.NO_SUBPARTITION_VALUES,businessObjectDataVersion,businessObjectDataLatestVersion,businessObjectDataStatusEntity);}  }
class C{  public Status createStatus(){  StatusImpl status=new StatusImpl();  return status;}  }
class C{  public CFunctionNodeMenu(final CGraphModel model,final NaviNode node,final double y){  final INaviFunctionNode functionNode=(INaviFunctionNode)node.getRawNode();  final int line=node.positionToRow(y);  add(new CChangeFunctionNameAction(model.getParent(),functionNode.getFunction().getModule().getContent().getViewContainer().getView(functionNode.getFunction())));  CMenuBuilder.addCommentMenu(this,model,node.getRawNode());  CMenuBuilder.addSelectionMenus(this,model.getGraph(),node);  if (functionNode.getFunction().getBasicBlockCount() != 0) {    add(new JMenuItem(CActionProxy.proxy(new COpenFunctionAction(model.getParent(),model.getViewContainer(),functionNode.getFunction()))));    add(new JMenuItem(CActionProxy.proxy(new CFunctionNodeInlineAction(model.getParent(),model.getGraph(),functionNode))));    addSeparator();  }  CMenuBuilder.addTaggingMenu(this,model,node);  final JMenu clipMenu=new JMenu("Clipboard");  clipMenu.add(CActionProxy.proxy(new CCopyLineAction(node,line)));  clipMenu.add(CActionProxy.proxy(new CCopyNodeAction(node)));  add(clipMenu);  final IDebugger debugger=CGraphDebugger.getDebugger(model.getDebuggerProvider(),functionNode);  if (debugger == null) {    return;  }  addSeparator();  final JMenu functionMenu=new JMenu("Function" + " " + functionNode.getFunction().getName());  final UnrelocatedAddress address=new UnrelocatedAddress(functionNode.getFunction().getAddress());  final INaviModule module=functionNode.getFunction().getModule();  functionMenu.add(CActionProxy.proxy(new CActionToggleBreakpoint(debugger.getBreakpointManager(),module,address)));  final BreakpointAddress relocatedAddress=new BreakpointAddress(module,address);  if (debugger.getBreakpointManager().hasBreakpoint(BreakpointType.REGULAR,relocatedAddress)) {    functionMenu.add(CActionProxy.proxy(new CActionToggleBreakpointStatus(debugger.getBreakpointManager(),module,address)));  }  add(functionMenu);}  }
class C{  public Layer childAt(int index){  return children.get(index);}  }
class C{  public boolean hasLrParam(){  return uriParms.getNameValue("lr") != null;}  }
class C{  public QueueMaxException(Throwable cause){  super(cause);}  }
class C{  @Override public ExampleSet performPrediction(ExampleSet exampleSet,Attribute predictedLabelAttribute) throws OperatorException {  Attribute label=getLabel();  for (  Example example : exampleSet) {    example.setValue(predictedLabelAttribute,value);    if (label.isNominal()) {      for (int i=0; i < confidences.length; i++) {        example.setConfidence(predictedLabelAttribute.getMapping().mapIndex(i),confidences[i]);      }    }  }  return exampleSet;}  }
class C{  private Response parseContent() throws IOException {  HttpEntity entity=response.getEntity();  ByteArrayPool mPool=new ByteArrayPool(4096);  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    this.contentBytes=bytes.toByteArray();  } catch (  IllegalStateException e) {    e.printStackTrace();  }catch (  IOException e) {    e.printStackTrace();  } finally {    try {      entity.consumeContent();    } catch (    IOException e) {    }    mPool.returnBuf(buffer);    try {      bytes.close();    } catch (    IOException e) {      e.printStackTrace();    }  }  if (this.charset == null || this.contentBytes == null) {    throw new IOException();  }  try {    this.contentString=new String(this.contentBytes,this.charset);  } catch (  UnsupportedEncodingException e) {    e.printStackTrace();  }catch (  NullPointerException e) {    e.printStackTrace();  }  return this;}  }
class C{  public void consume(){  consumed=true;}  }
class C{  public int computeAreaB(int A,int B,int C,int D,int E,int F,int G,int H){  int left=Math.max(A,E), right=Math.max(Math.min(C,G),left);  int bottom=Math.max(B,F), top=Math.max(Math.min(D,H),bottom);  return (C - A) * (D - B) - (right - left) * (top - bottom) + (G - E) * (H - F);}  }
class C{  @Override public boolean isEmpty(){  return 0 == size();}  }
class C{  Query makeWithin(Rectangle bbox){  Query qMinY=this.makeNumericRangeQuery(field_minY,bbox.getMinY(),null,true,false);  Query qMaxY=this.makeNumericRangeQuery(field_maxY,null,bbox.getMaxY(),false,true);  Query yConditions=this.makeQuery(BooleanClause.Occur.MUST,qMinY,qMaxY);  Query xConditions;  if (ctx.isGeo() && bbox.getMinX() == -180.0 && bbox.getMaxX() == 180.0) {    return yConditions;  } else   if (!bbox.getCrossesDateLine()) {    Query qMinX=this.makeNumericRangeQuery(field_minX,bbox.getMinX(),null,true,false);    Query qMaxX=this.makeNumericRangeQuery(field_maxX,null,bbox.getMaxX(),false,true);    Query qMinMax=this.makeQuery(BooleanClause.Occur.MUST,qMinX,qMaxX);    double edge=0;    if (bbox.getMinX() == -180.0)     edge=180; else     if (bbox.getMaxX() == 180.0)     edge=-180;    if (edge != 0 && ctx.isGeo()) {      Query edgeQ=makeQuery(BooleanClause.Occur.MUST,makeNumberTermQuery(field_minX,edge),makeNumberTermQuery(field_maxX,edge));      qMinMax=makeQuery(BooleanClause.Occur.SHOULD,qMinMax,edgeQ);    }    xConditions=this.makeXDL(false,qMinMax);  } else {    Query qMinXLeft=this.makeNumericRangeQuery(field_minX,bbox.getMinX(),null,true,false);    Query qMaxXLeft=this.makeNumericRangeQuery(field_maxX,null,180.0,false,true);    Query qLeft=this.makeQuery(BooleanClause.Occur.MUST,qMinXLeft,qMaxXLeft);    Query qMinXRight=this.makeNumericRangeQuery(field_minX,-180.0,null,true,false);    Query qMaxXRight=this.makeNumericRangeQuery(field_maxX,null,bbox.getMaxX(),false,true);    Query qRight=this.makeQuery(BooleanClause.Occur.MUST,qMinXRight,qMaxXRight);    Query qLeftRight=this.makeQuery(BooleanClause.Occur.SHOULD,qLeft,qRight);    Query qNonXDL=this.makeXDL(false,qLeftRight);    Query qXDLLeft=this.makeNumericRangeQuery(field_minX,bbox.getMinX(),null,true,false);    Query qXDLRight=this.makeNumericRangeQuery(field_maxX,null,bbox.getMaxX(),false,true);    Query qXDLLeftRight=this.makeQuery(BooleanClause.Occur.MUST,qXDLLeft,qXDLRight);    Query qXDL=this.makeXDL(true,qXDLLeftRight);    xConditions=this.makeQuery(BooleanClause.Occur.SHOULD,qNonXDL,qXDL);  }  return this.makeQuery(BooleanClause.Occur.MUST,xConditions,yConditions);}  }
class C{  private OIDCResponse buildOpenIdConnectResponse(final AuthorizationRequest authRequest,final ClientDetailsEntity client){  final OIDCResponse response=new OIDCResponse();  response.setAuthorizationRequest(authRequest);  response.setClient(client);  response.setRedirectUri(authRequest.getRedirectUri());  log.debug("Built initial response for client {} and redirect uri {}",client,authRequest.getRedirectUri());  final Set<SystemScope> scopes=scopeService.fromStrings(authRequest.getScope());  log.debug("System scopes retrieved based on the authorization request scope {} are {}",authRequest.getScope(),scopes);  final Set<SystemScope> sortedScopes=getSystemScopes(scopes);  response.setScopes(sortedScopes);  log.debug("Response will contain the following scopes",sortedScopes);  final Map<String,Map<String,String>> claimsForScopes=getUserInfoClaimsForScopes(sortedScopes);  response.setClaims(claimsForScopes);  log.debug("Response will contain the following claims for scopes",claimsForScopes.keySet());  final Integer count=statsService.getCountForClientId(client.getId());  response.setCount(count);  if (client.getContacts() != null) {    response.setContacts(client.getContacts());  }  final Date lastWeek=new Date(System.currentTimeMillis() - (60 * 60 * 24* 7* 1000));  response.setGras(count > 1 && client.getCreatedAt() != null && client.getCreatedAt().before(lastWeek));  return response;}  }
class C{  private static void convertActivityToTranslucentAfterL(Activity activity){  try {    Method getActivityOptions=Activity.class.getDeclaredMethod("getActivityOptions");    getActivityOptions.setAccessible(true);    Object options=getActivityOptions.invoke(activity);    Class<?>[] classes=Activity.class.getDeclaredClasses();    Class<?> translucentConversionListenerClazz=null;    for (    Class clazz : classes) {      if (clazz.getSimpleName().contains("TranslucentConversionListener")) {        translucentConversionListenerClazz=clazz;      }    }    Method convertToTranslucent=Activity.class.getDeclaredMethod("convertToTranslucent",translucentConversionListenerClazz,ActivityOptions.class);    convertToTranslucent.setAccessible(true);    convertToTranslucent.invoke(activity,null,options);  } catch (  Throwable t) {  }}  }
class C{  public void actionPerformed(ActionEvent event){  TestInputPanel panel=TestInputPanel.createTestInputPanel(networkPanel,networkPanel.getSelectedModelNeurons());  networkPanel.displayPanel(panel,"Test Input Panel");}  }
class C{  protected DefaultWorkingSetImpl(final String id,final WorkingSetManager manager){  super(id,manager);}  }
class C{  public static <T>JavaslangValueSubscriber<T> subscriber(){  return new JavaslangValueSubscriber<T>();}  }
class C{  public static void attributeNames(SimpleMethod method,Element element,String... validAttributeNames) throws ValidationException {  Set<String> validNames=new HashSet<String>();  for (  String name : validAttributeNames) {    validNames.add(name);  }  NamedNodeMap nnm=element.getAttributes();  for (int i=0; i < nnm.getLength(); i++) {    String attributeName=nnm.item(i).getNodeName();    if (!validNames.contains(attributeName)) {      handleError("Attribute name \"" + attributeName + "\" is not valid.",method,element);    }  }}  }
class C{  protected void assertFuncEquals(final String... inputs) throws Exception {  SolrQueryRequest req=req();  try {    assertFuncEquals(req,inputs);  }  finally {    req.close();  }}  }
class C{  protected void notifyDisconnect(){  for (  ISharedObjectListener listener : listeners) {    listener.onSharedObjectDisconnect(this);  }}  }
class C{  public double transform(double value){  return value;}  }
class C{  public CursorFetcher clear(){  mProjections=null;  mSelection=null;  mSelectionArgs=null;  mOrderBy=null;  return this;}  }
class C{  private void updateAction(){  boolean atLeastOneSourceSelected=(networkPanel.getSourceModelNeurons().size() > 0);  boolean atLeastOneTargetSelected=(networkPanel.getSelectedModelElements().size() > 0);  if (atLeastOneSourceSelected && atLeastOneTargetSelected) {    setEnabled(true);  } else {    setEnabled(false);  }}  }
class C{  private static int excludeNomediaFiles(String[] fullPathNames){  int itemsLeft=0;  if (fullPathNames != null) {    for (int i=0; i < fullPathNames.length; i++) {      String fullPathName=fullPathNames[i];      if (fullPathName != null) {        if (!isImage(fullPathName,false) || isNoMedia(fullPathName,22)) {          fullPathNames[i]=null;        } else {          itemsLeft++;        }      }    }  }  return itemsLeft;}  }
class C{  public boolean hasNext(){  return hasNext;}  }
class C{  public View createView(String name,@NonNull Context context,@NonNull AttributeSet attrs){  ViewInterceptor interceptor=mViewInterceptors.get(name);  return interceptor != null ? interceptor.createView(name,context,attrs) : null;}  }
class C{  public static boolean visitSuperclasses(ITypeBinding type,TypeBindingVisitor visitor){  while ((type=type.getSuperclass()) != null) {    if (!visitor.visit(type)) {      return false;    }  }  return true;}  }
class C{  public static Test suite(){  return (new TestSuite(JstlIntegrationITCase.class));}  }
class C{  public void close(int timeout){  if (refenceCount.decrementAndGet() <= 0) {    if (timeout == 0) {      client.close();    } else {      client.close(timeout);    }    client=replaceWithLazyClient();  }}  }
class C{  public ClassNotFoundException(java.lang.String s){}  }
class C{  @Override public void write(final int b) throws IOException {  if (hasBeenClosed) {    throw new IOException("The stream has been closed.");  }  if (b == 0) {    return;  }  if (b == '\r' || b == '\n') {    flush();    return;  }  if (count == bufLength) {    final int newBufLength=bufLength + DEFAULT_BUFFER_LENGTH;    final byte[] newBuf=new byte[newBufLength];    System.arraycopy(buf,0,newBuf,0,bufLength);    buf=newBuf;    bufLength=newBufLength;  }  buf[count]=(byte)b;  count++;}  }
class C{  public void ensureCapacity(int minCapacity){  if (table.length < minCapacity) {    int newCapacity=nextPrime(minCapacity);    rehash(newCapacity);  }}  }
class C{  @Inline @Entrypoint public static void offsetFieldWrite(Object ref,Offset value,Offset offset,int locationMetadata){  if (NEEDS_OFFSET_GC_WRITE_BARRIER) {    ObjectReference src=ObjectReference.fromObject(ref);    Selected.Mutator.get().offsetWrite(src,src.toAddress().plus(offset),value,offset.toWord(),Word.fromIntZeroExtend(locationMetadata),INSTANCE_FIELD);  } else   if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  private void addEvenlySpacedPoints(int numX,int numY,int spacing,GeomVectorField field){  for (int x=0; x < numX; x++) {    for (int y=0; y < numY; y++) {      field.addGeometry(new MasonGeometry(createPoint(x * spacing,y * spacing)));    }  }}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void refreshAtpTab(){  boolean showDetail=checkShowDetail.isSelected();  Vector<Vector<Object>> data=new Vector<Vector<Object>>();  int M_Warehouse_ID=0;  if (m_ATP_M_Warehouse_ID > 0) {    M_Warehouse_ID=m_ATP_M_Warehouse_ID;  } else   M_Warehouse_ID=m_M_Warehouse_ID;  if (M_Warehouse_ID == 0) {  } else {    String sql;    if (!showDetail)     sql="(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, 0 as ID, null as Date," + " sum(s.QtyOnHand) as AvailQty, null as DeltaQty, sum(s.QtyOrdered) as QtyOrdered, sum(s.QtyReserved) as QtyReserved," + " null as sumPASI,"+ " 0 as ASI,"+ " null as BP_Name, null as DocumentNo, 10 as SeqNo"; else     sql="(SELECT s.M_Product_ID, w.Name as warehouse, l.value as locator, s.M_AttributeSetInstance_ID as ID, now() as Date," + " s.QtyOnHand as AvailQty, null as DeltaQty, s.QtyOrdered as QtyOrdered, s.QtyReserved as QtyReserved," + " CASE WHEN s.PASI  = '' THEN '{' || COALESCE(s.M_AttributeSetInstance_ID,0) || '}' ELSE s.PASI END as sumPASI,"+ " COALESCE(M_AttributeSetInstance_ID,0) as ASI,"+ " null as BP_Name, null as DocumentNo,  10 as SeqNo";    sql+=" FROM (SELECT M_Product_ID, M_Locator_ID, QtyOnHand, QtyReserved, QtyOrdered," + " COALESCE(productAttribute(M_AttributeSetInstance_ID)::varchar, '') as PASI," + " COALESCE(M_AttributeSetInstance_ID,0) as M_AttributeSetInstance_ID FROM M_Storage) s "+ " INNER JOIN M_Locator l ON (s.M_Locator_ID=l.M_Locator_ID)"+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID)"+ " AND s.M_Product_ID="+ m_M_Product_ID;    if (M_Warehouse_ID != 0)     sql+=" AND l.M_Warehouse_ID=" + M_Warehouse_ID;    if (!showDetail) {      sql+=" GROUP BY s.M_Product_ID, w.Name, l.value, s.M_Locator_ID, sumPASI, ASI, BP_Name, DocumentNo, SeqNo ";    } else     ;    sql+=" UNION ALL ";    sql+="SELECT ol.M_Product_ID, w.Name as warehouse, null as locator, ol.M_AttributeSetInstance_ID as ID, o.DatePromised as date," + " null as AvailQty," + " CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE -ol.QtyReserved END as DeltaQty,"+ " CASE WHEN dt.DocBaseType = 'POO' THEN ol.QtyOrdered ELSE null END as QtyOrdered,"+ " CASE WHEN dt.DocBaseType = 'POO' THEN 0 ELSE 0 END as QtyReserved,"+ " productAttribute(ol.M_AttributeSetInstance_ID) as sumPASI,"+ " ol.M_AttributeSetInstance_ID as ASI,"+ " bp.Name as BP_Name, dt.PrintName || ' ' || o.DocumentNo As DocumentNo, 20 as SeqNo "+ "FROM C_Order o"+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "+ "WHERE ol.QtyReserved<>0 AND o.DocStatus in ('IP','CO')"+ " AND ol.M_Product_ID="+ m_M_Product_ID;    if (M_Warehouse_ID != 0)     sql+=" AND w.M_Warehouse_ID=" + M_Warehouse_ID;    sql+=" UNION ALL ";    sql+="SELECT ol.M_Product_ID, wf.Name as warehouse, lf.value as locator, ol.M_AttributeSetInstance_ID as ID, ol.DatePromised as date," + " null as AvailQty," + " -ol.QtyOrdered+ol.QtyInTransit+ol.QtyDelivered as DeltaQty,"+ " null as QtyOrdered,"+ " null  as QtyReserved,"+ " productAttribute(ol.M_AttributeSetInstance_ID) as sumPASI,"+ " ol.M_AttributeSetInstance_ID as ASI,"+ " bp.Name as BP_Name, dt.PrintName || ' ' || o.DocumentNo As DocumentNo, 20 as SeqNo "+ "FROM DD_Order o"+ " INNER JOIN DD_OrderLine ol ON (o.DD_Order_ID=ol.DD_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Locator l ON (l.M_Locator_ID = ol.M_LocatorTo_ID)"+ " INNER JOIN M_Locator lf on (lf.M_Locator_ID = ol.M_Locator_ID)"+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN M_Warehouse wf ON (lf.M_Warehouse_ID=wf.M_Warehouse_ID)"+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID = bp.C_BPartner_ID) "+ "WHERE ol.QtyReserved<>0 AND o.DocStatus in ('IP','CO') AND o.IsDelivered = 'N'"+ " AND ol.M_Product_ID="+ m_M_Product_ID;    if (M_Warehouse_ID != 0)     sql+=" AND wf.M_Warehouse_ID=" + M_Warehouse_ID;    sql+=" UNION ALL ";    sql+="SELECT ol.M_Product_ID, w.Name as warehouse, l.value as locator, ol.M_AttributeSetInstance_ID as ID, ol.DatePromised as date," + " null as AvailQty," + " ol.QtyOrdered-ol.QtyDelivered as DeltaQty,"+ " null as QtyOrdered,"+ " null  as QtyReserved,"+ " productAttribute(ol.M_AttributeSetInstance_ID) as sumPASI,"+ " ol.M_AttributeSetInstance_ID as ASI,"+ " bp.Name as BP_Name, dt.PrintName || ' ' || o.DocumentNo As DocumentNo, 20 as SeqNo "+ "FROM DD_Order o"+ " INNER JOIN DD_OrderLine ol ON (o.DD_Order_ID=ol.DD_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Locator l ON (l.M_Locator_ID = ol.M_LocatorTo_ID)"+ " INNER JOIN M_Locator lf on (lf.M_Locator_ID = ol.M_Locator_ID)"+ " INNER JOIN M_Warehouse w ON (l.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN M_Warehouse wf ON (lf.M_Warehouse_ID=wf.M_Warehouse_ID)"+ " INNER JOIN C_BPartner bp  ON (wf.AD_Org_ID=bp.AD_OrgBP_ID) "+ "WHERE ol.QtyOrdered - ol.Qtydelivered > 0 AND o.DocStatus in ('IP','CO') AND o.IsDelivered='N'"+ " AND ol.M_Product_ID="+ m_M_Product_ID;    if (M_Warehouse_ID != 0)     sql+=" AND w.M_Warehouse_ID=" + M_Warehouse_ID;    sql+=" ORDER BY M_Product_ID, SeqNo, ID, date, locator)";    double qty=0;    PreparedStatement pstmt=null;    ResultSet rs=null;    try {      int index=1;      pstmt=DB.prepareStatement(sql,null);      rs=pstmt.executeQuery();      while (rs.next()) {        IDColumn mpid=new IDColumn(rs.getInt(1));        Vector<Object> line=new Vector<Object>(9);        line.add(mpid);        line.add(rs.getString(2));        line.add(rs.getString(3));        line.add(rs.getTimestamp(5));        double deltaQty=rs.getDouble(7);        qty+=+rs.getDouble(6) + deltaQty;        line.add(new Double(qty) - rs.getDouble(9));        line.add(new Double(rs.getDouble(6)));        line.add(new Double(rs.getDouble(7)));        line.add(rs.getString(12));        line.add(new Double(rs.getDouble(8)));        line.add(new Double(rs.getDouble(9)));        line.add(rs.getString(10));        line.add(rs.getString(13));        data.add(line);      }    } catch (    SQLException e) {      log.log(Level.SEVERE,sql,e);    } finally {      DB.close(rs,pstmt);      rs=null;      pstmt=null;    }  }  for (int i=0; i < m_layoutATP.length; i++) {    m_tableAtp.addColumn(m_layoutATP[i].getColHeader());  }  m_modelAtp=new ListModelTable(data);  m_tableAtp.setModel(m_modelAtp);  for (int i=0; i < m_layoutATP.length; i++) {    m_tableAtp.setColumnClass(i,m_layoutATP[i].getColClass(),m_layoutATP[i].isReadOnly(),m_layoutATP[i].getColHeader());    if (m_layoutATP[i].isColorColumn()) {      m_tableAtp.setColorColumn(i);    }  }  m_tableAtp.autoSize();  m_tableAtp.repaint();}  }
class C{  public User(int userId,String userName,Gender gender){  super();  this.userId=userId;  this.userName=userName;  this.gender=gender;}  }
class C{  protected int bytesPerAtom(){  return (2);}  }
class C{  public String[] highlight(String field,Query query,TopDocs topDocs) throws IOException {  return highlight(field,query,topDocs,1);}  }
class C{  protected byte readByteProtected(DataInputStream istream) throws java.io.IOException {  byte[] rcvBuffer=new byte[1];  while (true) {    int nchars;    nchars=istream.read(rcvBuffer,0,1);    if (nchars > 0) {      return rcvBuffer[0];    }  }}  }
class C{  @Override public void run(){  try {    this.mHttpFrameParser=new HttpFrame();    final HttpStates httpStates=this.mHttpFrameParser.parseHttp(mInputStream);    mClientListener.onHttpFrameReceived(this.mHttpFrameParser,httpStates,this);    closeSocket();  } catch (  InterruptedException e) {  }catch (  IOException e) {  }}  }
class C{  public void addFirstChildCondition(){  _specificityC++;  addCondition(Condition.createFirstChildCondition());}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent e){  if ("Mode".equals(e.getPropertyName()) && getProgrammer().equals(e.getSource())) {    if (isSelected()) {      setGuiFromProgrammer();    }  }}  }
class C{  public Matrix3 multiplyByMatrix(double m11,double m12,double m13,double m21,double m22,double m23,double m31,double m32,double m33){  double[] m=this.m;  double mr1, mr2, mr3;  mr1=m[0];  mr2=m[1];  mr3=m[2];  m[0]=(mr1 * m11) + (mr2 * m21) + (mr3 * m31);  m[1]=(mr1 * m12) + (mr2 * m22) + (mr3 * m32);  m[2]=(mr1 * m13) + (mr2 * m23) + (mr3 * m33);  mr1=m[3];  mr2=m[4];  mr3=m[5];  m[3]=(mr1 * m11) + (mr2 * m21) + (mr3 * m31);  m[4]=(mr1 * m12) + (mr2 * m22) + (mr3 * m32);  m[5]=(mr1 * m13) + (mr2 * m23) + (mr3 * m33);  mr1=m[6];  mr2=m[7];  mr3=m[8];  m[6]=(mr1 * m11) + (mr2 * m21) + (mr3 * m31);  m[7]=(mr1 * m12) + (mr2 * m22) + (mr3 * m32);  m[8]=(mr1 * m13) + (mr2 * m23) + (mr3 * m33);  return this;}  }
class C{  @Override public XMLEvent nextEvent() throws XMLStreamException {  log.log(Level.FINE,"nextEvent()");  currentEvent=nextEvent;  if (currentEvent.getEventType() != XMLStreamConstants.END_DOCUMENT) {    nextEvent=constructEvent(stream.next(),stream);  } else {    nextEvent=null;  }  log.log(Level.FINE,"nextEvent(): {0}",currentEvent);  return currentEvent;}  }
class C{  private void injectViews(Context context){  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);  View view=inflater.inflate(R.layout.view_bar_chart_progress,this);  mBinding=DataBindingUtil.inflate(inflater,R.layout.view_bar_chart_progress,this,true);  mCheckMark=mBinding.barChartCheckMark;  mBarView=mBinding.barview;  loadStyledAttributes(mAttributes,mChartProgressAttr);}  }
class C{  private boolean isRunning(){  return thread != null;}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitParameter(name,access);}  }
class C{  public void writeFile(final String name,final String mimeType,final File file) throws java.io.IOException {  if (file == null) {    throw new IllegalArgumentException("File cannot be null.");  }  if (!file.exists()) {    throw new IllegalArgumentException("File does not exist.");  }  if (file.isDirectory()) {    throw new IllegalArgumentException("File cannot be a directory.");  }  writeFile(name,mimeType,file.getCanonicalPath(),new FileInputStream(file));}  }
class C{  protected IdentityEscapeSequenceImpl(){  super();}  }
class C{  protected void exportPoints(){  if (labs == null)   return;  BasicLocation oj;  double lt;  double ln;  double z;  int n=labs.size();  System.out.println("#type 0");  for (int i=0; i < n; i++) {    oj=(BasicLocation)labs.getOMGraphicAt(i);    if (oj == null)     continue;    E00Data data=(E00Data)getAttribute(OMGraphic.APP_OBJECT);    if (data == null)     continue;    lt=Math.toRadians(oj.lat);    ln=Math.toRadians(oj.lon);    z=data.valeur * 0.304;    System.out.println("c " + ln + " "+ lt+ " "+ z);  }}  }
class C{  public static void deleteoptimizerFile(){  try {    getOptimizeFile().delete();  } catch (  Exception e) {  }}  }
class C{  private void cleanupService(){  if (mService != null) {    try {      mContext.unbindService(this);    } catch (    IllegalArgumentException e) {      Log.e(TAG,"Unable to unbind from licensing service (already unbound)");    }    mService=null;  }}  }
class C{  public static Mode[] readVorbisModes(ParsableByteArray headerData,int channels) throws ParserException {  verifyVorbisHeaderCapturePattern(0x05,headerData,false);  int numberOfBooks=headerData.readUnsignedByte() + 1;  VorbisBitArray bitArray=new VorbisBitArray(headerData.data);  bitArray.skipBits(headerData.getPosition() * 8);  for (int i=0; i < numberOfBooks; i++) {    readBook(bitArray);  }  int timeCount=bitArray.readBits(6) + 1;  for (int i=0; i < timeCount; i++) {    if (bitArray.readBits(16) != 0x00) {      throw new ParserException("placeholder of time domain transforms not zeroed out");    }  }  readFloors(bitArray);  readResidues(bitArray);  readMappings(channels,bitArray);  Mode[] modes=readModes(bitArray);  if (!bitArray.readBit()) {    throw new ParserException("framing bit after modes not set as expected");  }  return modes;}  }
class C{  public final T blockFirstMillis(long timeout){  BlockingFirstSubscriber<T> subscriber=new BlockingFirstSubscriber<>();  subscribe(subscriber);  return subscriber.blockingGet(timeout,TimeUnit.MILLISECONDS);}  }
class C{  protected void contributeLocators(final Map<String,UriLocator> map){}  }
class C{  public void addLocalTempTableIndex(Index index){  if (localTempTableIndexes == null) {    localTempTableIndexes=database.newStringMap();  }  if (localTempTableIndexes.get(index.getName()) != null) {    throw DbException.get(ErrorCode.INDEX_ALREADY_EXISTS_1,index.getSQL());  }  localTempTableIndexes.put(index.getName(),index);}  }
class C{  public final boolean canSetBoolean(String field){  return m_table.canSetBoolean(field);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"GREEN_STAT\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"STATENTITY\" TEXT,"+ "\"STATKIND\" TEXT);");}  }
class C{  public void reset(){  numRecords=0;  vpX=0;  vpY=0;  vpW=1000;  vpH=1000;  numObjects=0;  records=new Vector(20,20);  objectVector=new Vector();}  }
class C{  public void diff_cleanupSemanticLossless(LinkedList<Diff> diffs){  String equality1, edit, equality2;  String commonString;  int commonOffset;  int score, bestScore;  String bestEquality1, bestEdit, bestEquality2;  ListIterator<Diff> pointer=diffs.listIterator();  Diff prevDiff=pointer.hasNext() ? pointer.next() : null;  Diff thisDiff=pointer.hasNext() ? pointer.next() : null;  Diff nextDiff=pointer.hasNext() ? pointer.next() : null;  while (nextDiff != null) {    if (prevDiff.operation == Operation.EQUAL && nextDiff.operation == Operation.EQUAL) {      equality1=prevDiff.text;      edit=thisDiff.text;      equality2=nextDiff.text;      commonOffset=diff_commonSuffix(equality1,edit);      if (commonOffset != 0) {        commonString=edit.substring(edit.length() - commonOffset);        equality1=equality1.substring(0,equality1.length() - commonOffset);        edit=commonString + edit.substring(0,edit.length() - commonOffset);        equality2=commonString + equality2;      }      bestEquality1=equality1;      bestEdit=edit;      bestEquality2=equality2;      bestScore=diff_cleanupSemanticScore(equality1,edit) + diff_cleanupSemanticScore(edit,equality2);      while (edit.length() != 0 && equality2.length() != 0 && edit.charAt(0) == equality2.charAt(0)) {        equality1+=edit.charAt(0);        edit=edit.substring(1) + equality2.charAt(0);        equality2=equality2.substring(1);        score=diff_cleanupSemanticScore(equality1,edit) + diff_cleanupSemanticScore(edit,equality2);        if (score >= bestScore) {          bestScore=score;          bestEquality1=equality1;          bestEdit=edit;          bestEquality2=equality2;        }      }      if (!prevDiff.text.equals(bestEquality1)) {        if (bestEquality1.length() != 0) {          prevDiff.text=bestEquality1;        } else {          pointer.previous();          pointer.previous();          pointer.previous();          pointer.remove();          pointer.next();          pointer.next();        }        thisDiff.text=bestEdit;        if (bestEquality2.length() != 0) {          nextDiff.text=bestEquality2;        } else {          pointer.remove();          nextDiff=thisDiff;          thisDiff=prevDiff;        }      }    }    prevDiff=thisDiff;    thisDiff=nextDiff;    nextDiff=pointer.hasNext() ? pointer.next() : null;  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/release/undo") public FileShareRestRep undoReleaseFileSystemInternal(@PathParam("id") URI id) throws InternalException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  FileShare fs=_fileService.queryResource(id);  checkFileShareInternal(fs);  URI releasedProject=fs.getOriginalProject();  if (releasedProject == null) {    throw APIException.forbidden.onlyPreviouslyReleasedFileSystemsCanBeUndone();  }  Project project=_permissionsHelper.getObjectById(releasedProject,Project.class);  ArgValidator.checkEntity(project,releasedProject,false);  ArgValidator.checkFieldNotNull(project.getTenantOrg(),"tenantOrg");  ArgValidator.checkFieldNotNull(project.getTenantOrg().getURI(),"tenantOrg");  fs.setTenant(new NamedURI(project.getTenantOrg().getURI(),fs.getLabel()));  fs.setProject(new NamedURI(releasedProject,fs.getLabel()));  fs.setOriginalProject(null);  fs.clearInternalFlags(INTERNAL_FILESHARE_FLAGS);  _dbClient.updateAndReindexObject(fs);  auditOp(OperationTypeEnum.UNDO_RELEASE_FILE_SYSTEM,true,null,fs.getId().toString(),project.getId().toString());  return map(fs);}  }
class C{  public TObjectPrototype createTObjectPrototype(){  TObjectPrototypeImpl tObjectPrototype=new TObjectPrototypeImpl();  return tObjectPrototype;}  }
class C{  public static InstructionFragment newInstance(Recipe recipe,int sectionNumber){  InstructionFragment fragment=new InstructionFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  @SuppressWarnings("unchecked") public Response onCommand(POP3Session session,Request request){  POP3Response response=null;  String parameters=request.getArgument();  if (session.getHandlerState() == POP3Session.TRANSACTION) {    int num=0;    try {      num=Integer.parseInt(parameters.trim());    } catch (    Exception e) {      return SYNTAX_ERROR;    }    try {      MessageMetaData data=MessageMetaDataUtils.getMetaData(session,num);      if (data == null) {        StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");        response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());        return response;      }      List<String> deletedUidList=(List<String>)session.getAttachment(POP3Session.DELETED_UID_LIST,State.Transaction);      String uid=data.getUid();      if (deletedUidList.contains(uid) == false) {        InputStream content=session.getUserMailbox().getMessage(uid);        if (content != null) {          InputStream in=new CRLFTerminatedInputStream(new ExtraDotInputStream(content));          response=new POP3StreamResponse(POP3Response.OK_RESPONSE,"Message follows",in);          return response;        } else {          StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") does not exist.");          response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());        }      } else {        StringBuilder responseBuffer=new StringBuilder(64).append("Message (").append(num).append(") already deleted.");        response=new POP3Response(POP3Response.ERR_RESPONSE,responseBuffer.toString());      }    } catch (    IOException ioe) {      return ERROR_MESSAGE_RETRIEVE;    }  } else {    return POP3Response.ERR;  }  return response;}  }
class C{  @Override public void onOpenDocument(final PdfWriter writer,final Document document){  try {    bf=BaseFont.createFont(BaseFont.HELVETICA,BaseFont.CP1252,BaseFont.NOT_EMBEDDED);    cb=writer.getDirectContent();    template=cb.createTemplate(50,50);  } catch (  final DocumentException de) {    throw new IllegalStateException(de);  }catch (  final IOException ioe) {    throw new IllegalStateException(ioe);  }}  }
class C{  CommandLine(){}  }
class C{  private void parseKills(Element killNode){  NodeList nl=killNode.getChildNodes();  for (int i=0; i < nl.getLength(); i++) {    Node currNode=nl.item(i);    if (currNode.getParentNode() != killNode) {      continue;    }    int nodeType=currNode.getNodeType();    if (nodeType == Node.ELEMENT_NODE) {      String nodeName=currNode.getNodeName();      if (nodeName.equalsIgnoreCase(KILL)) {        String killed=((Element)currNode).getAttribute(KILLED);        String killer=((Element)currNode).getAttribute(KILLER);        if (null != killed && null != killer && !killed.isEmpty() && !killer.isEmpty()) {          kills.put(killed,killer);        }      }    } else {      continue;    }  }}  }
class C{  static void appendTime(StringBuilder buff,long nanos,boolean alwaysAddMillis){  if (nanos < 0) {    buff.append('-');    nanos=-nanos;  }  long ms=nanos / 1000000;  nanos-=ms * 1000000;  long s=ms / 1000;  ms-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  StringUtils.appendZeroPadded(buff,2,h);  buff.append(':');  StringUtils.appendZeroPadded(buff,2,m);  buff.append(':');  StringUtils.appendZeroPadded(buff,2,s);  if (alwaysAddMillis || ms > 0 || nanos > 0) {    buff.append('.');    int start=buff.length();    StringUtils.appendZeroPadded(buff,3,ms);    if (nanos > 0) {      StringUtils.appendZeroPadded(buff,6,nanos);    }    for (int i=buff.length() - 1; i > start; i--) {      if (buff.charAt(i) != '0') {        break;      }      buff.deleteCharAt(i);    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return INT_SET_LIST;case 2:  return MAP_INT_STRSET;case 3:return MAP_INT_STRSET_LIST;default :return null;}}  }
class C{  public boolean isReadable(){  return false;}  }
class C{  public GridGenerator(double height,double skew){  max=height;  this.skew=skew;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodehaschildnodes.class,args);}  }
class C{  public static String ofParameters(CtClass[] paramTypes){  return ofMethod(null,paramTypes);}  }
class C{  public Geronimo2xStandaloneLocalConfigurationCapability(){  this.propertySupportMap.remove(GeronimoPropertySet.GERONIMO_SERVLET_CONTAINER_ID);  this.propertySupportMap.put(DatasourcePropertySet.DATASOURCE,Boolean.TRUE);  this.propertySupportMap.put(DatasourcePropertySet.TRANSACTION_SUPPORT,Boolean.TRUE);}  }
class C{  private static CharInfo mutableCopyOf(CharInfo charInfo){  CharInfo copy=new CharInfo();  int max=charInfo.array_of_bits.length;  System.arraycopy(charInfo.array_of_bits,0,copy.array_of_bits,0,max);  copy.firstWordNotUsed=charInfo.firstWordNotUsed;  max=charInfo.shouldMapAttrChar_ASCII.length;  System.arraycopy(charInfo.shouldMapAttrChar_ASCII,0,copy.shouldMapAttrChar_ASCII,0,max);  max=charInfo.shouldMapTextChar_ASCII.length;  System.arraycopy(charInfo.shouldMapTextChar_ASCII,0,copy.shouldMapTextChar_ASCII,0,max);  copy.m_charToString=(HashMap)charInfo.m_charToString.clone();  copy.onlyQuotAmpLtGt=charInfo.onlyQuotAmpLtGt;  return copy;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public boolean isFlavorTextType(){  return (DataTransferer.isFlavorCharsetTextType(this) || DataTransferer.isFlavorNoncharsetTextType(this));}  }
class C{  @Override public void updateStatus(JobContext jobContext) throws Exception {  DbClient dbClient=jobContext.getDbClient();  try {    if (_status == JobStatus.IN_PROGRESS) {      return;    }    String opId=getTaskCompleter().getOpId();    StringBuilder logMsgBuilder=new StringBuilder(String.format("Updating status of job %s to %s",opId,_status.name()));    VNXeApiClient vnxeApiClient=getVNXeClient(jobContext);    StorageSystem storageObj=dbClient.queryObject(StorageSystem.class,getStorageSystemUri());    URI fsId=getTaskCompleter().getId();    FileShare fsObj=dbClient.queryObject(FileShare.class,fsId);    if (_status == JobStatus.SUCCESS || _status == JobStatus.FAILED) {      if (fsObj != null) {        VNXeJob.updateStoragePoolCapacity(dbClient,vnxeApiClient,fsObj.getPool(),null);      }    }    if (_status == JobStatus.SUCCESS && fsObj != null) {      if (isForceDelete) {        updateSnapshots(dbClient,fsObj);      }      fsObj.setInactive(true);      dbClient.persistObject(fsObj);      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s succeeded to delete file system: %s",opId,fsId.toString()));    } else     if (_status == JobStatus.FAILED && fsObj != null) {      logMsgBuilder.append("\n");      logMsgBuilder.append(String.format("Task %s failed to delete file system: %s",opId,fsId.toString()));      fsObj.setInactive(false);      dbClient.persistObject(fsObj);    } else {      logMsgBuilder.append(String.format("The file system: %s is not found anymore",fsId));    }    _logger.info(logMsgBuilder.toString());    FileDeviceController.recordFileDeviceOperation(dbClient,OperationTypeEnum.DELETE_FILE_SYSTEM,_isSuccess,"","",fsObj,storageObj);  } catch (  Exception e) {    _logger.error("Caught an exception while trying to updateStatus for VNXeDeleteFileSystemJob",e);    setErrorStatus("Encountered an internal error during file system delete job status processing : " + e.getMessage());  } finally {    super.updateStatus(jobContext);  }}  }
class C{  public static boolean writeFile(String filePath,List<String> contentList){  return writeFile(filePath,contentList,false);}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.THIS_TYPE_REF;}  }
class C{  protected void sequence_CastExpression(ISerializationContext context,CastExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.CAST_EXPRESSION__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.CAST_EXPRESSION__EXPRESSION));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.CAST_EXPRESSION__TARGET_TYPE_REF) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.CAST_EXPRESSION__TARGET_TYPE_REF));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getCastExpressionAccess().getCastExpressionExpressionAction_1_0_0_0(),semanticObject.getExpression());  feeder.accept(grammarAccess.getCastExpressionAccess().getTargetTypeRefTypeRefForCastParserRuleCall_1_1_0(),semanticObject.getTargetTypeRef());  feeder.finish();}  }
class C{  public final boolean isWide(){  return wide;}  }
class C{  @Ignore @Test public void testSameParallelGatewaySenderIdAcrossDifferentPartitionedRegion() throws Exception {  try {    Integer lnPort=(Integer)vm0.invoke(null);    createCacheInVMs(lnPort,vm1);    vm1.invoke(null);    vm1.invoke(null);    vm1.invoke(null);    vm1.invoke(null);  } catch (  Exception e) {    if (!(e.getCause() instanceof IllegalStateException) || !(e.getCause().getMessage().contains("cannot have the same parallel gateway sender id"))) {      Assert.fail("Expected IllegalStateException",e);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:23.772 -0400",hash_original_method="5049EBEAA2F4DC69419DE079E9EA2F0C",hash_generated_method="D02592BF8EAC32EFB60770A3A5B9D213") private void onDeviceFound(String address,String[] properties){  if (properties == null) {    Log.e(TAG,"ERROR: Remote device properties are null");    return;  }  addDevice(address,properties);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private void mark(){  theLastColumn=theCurrentColumn;  theLastLine=theCurrentLine;}  }
class C{  public static float svgOtherLengthToObjectBoundingBox(String s,String attr,Context ctx){  return svgLengthToObjectBoundingBox(s,attr,OTHER_LENGTH,ctx);}  }
class C{  public static Intent createTakeVideoIntent(Activity ctx,Uri savingUri,int durationInSeconds){  if (savingUri == null) {    throw new NullPointerException("Uri cannot be null");  }  final List<Intent> cameraIntents=new ArrayList<Intent>();  final Intent captureIntent=new Intent(MediaStore.ACTION_VIDEO_CAPTURE);  final PackageManager packageManager=ctx.getPackageManager();  final List<ResolveInfo> listCam=packageManager.queryIntentActivities(captureIntent,0);  for (  ResolveInfo res : listCam) {    final String packageName=res.activityInfo.packageName;    final Intent intent=new Intent(captureIntent);    intent.setComponent(new ComponentName(res.activityInfo.packageName,res.activityInfo.name));    intent.setPackage(packageName);    intent.putExtra(MediaStore.EXTRA_OUTPUT,savingUri);    intent.putExtra(MediaStore.EXTRA_DURATION_LIMIT,durationInSeconds);    cameraIntents.add(intent);  }  final Intent galleryIntent=new Intent();  galleryIntent.setType("video/*");  galleryIntent.setAction(Intent.ACTION_GET_CONTENT);  final Intent chooserIntent=Intent.createChooser(galleryIntent,"Select Source");  chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS,cameraIntents.toArray(new Parcelable[]{}));  return chooserIntent;}  }
class C{  public final void listChannels(){  this.listChannels(null);}  }
class C{  public static double[][][] jPMF(Instances D,int j,int k,int l){  double JOINT[][][]=new double[D.attribute(j).numValues()][D.attribute(k).numValues()][D.attribute(l).numValues()];  int N=D.numInstances();  for (int i=0; i < N; i++) {    int v_j=(int)Math.round(D.instance(i).value(j));    int v_k=(int)Math.round(D.instance(i).value(k));    int v_l=(int)Math.round(D.instance(i).value(l));    JOINT[v_j][v_k][v_l]+=(1.0 / (double)N);  }  return JOINT;}  }
class C{  public int length(){  return mLength;}  }
class C{  private void writeMethodFieldInitializers(IndentingWriter p) throws IOException {  for (int i=0; i < methodFieldNames.length; i++) {    p.p(methodFieldNames[i] + " = ");    RemoteClass.Method method=remoteMethods[i];    MethodDoc methodDoc=method.methodDoc();    String methodName=methodDoc.name();    Type paramTypes[]=method.parameterTypes();    p.p(methodDoc.containingClass().qualifiedName() + ".class.getMethod(\"" + methodName+ "\", new java.lang.Class[] {");    for (int j=0; j < paramTypes.length; j++) {      if (j > 0)       p.p(", ");      p.p(paramTypes[j].toString() + ".class");    }    p.pln("});");  }}  }
class C{  public void onAnimationCancel(Animator animation){}  }
class C{  public void removeTable(int idx){  tables.remove(idx);}  }
class C{  public void importPreferences(byte[] data,SharedPreferences preferences) throws IOException {  ByteArrayInputStream bufStream=new ByteArrayInputStream(data);  DataInputStream reader=new DataInputStream(bufStream);  importPreferences(reader,preferences);}  }
class C{  public Observable(){  obs=new Vector<>();}  }
class C{  public void paintComponent(Graphics g,boolean buffer){synchronized (Display2D.this.simulation.state.schedule) {    if (movieMaker != null)     insideDisplay.paintToMovie(g); else     paint(g,buffer,true);  }}  }
class C{  void onStopTrackingTouch(){  mIsDragging=false;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;default :return null;}}  }
class C{  public static DataDisplayTable listCmaps(Font font){  String[] header={"Platform ID","Encoding ID","Format"};  Align[] displayAlignment={Align.Right,Align.Right,Align.Right};  DataDisplayTable table=new DataDisplayTable(Arrays.asList(header));  table.setAlignment(Arrays.asList(displayAlignment));  CMapTable cmapTable=FontUtils.getCMapTable(font);  for (  CMap cmap : cmapTable) {    String[] data={String.format("%d",cmap.platformId()),String.format("%d",cmap.encodingId()),String.format("%d",cmap.format())};    table.add(Arrays.asList(data));  }  return table;}  }
class C{  public void currentTime(long time){  _log.debug("currentTime: " + new Date(time));}  }
class C{  public static boolean invokeGetter(Object obj,String methodName,boolean defaultValue){  try {    Method method=obj.getClass().getMethod(methodName,new Class[0]);    Object result=method.invoke(obj,new Object[0]);    return ((Boolean)result).booleanValue();  } catch (  NoSuchMethodException e) {    return defaultValue;  }catch (  IllegalAccessException e) {    return defaultValue;  }catch (  InvocationTargetException e) {    return defaultValue;  }}  }
class C{  public static List<Long> thresholdTest(GeoTimeSerie gts,double threshold,boolean abs) throws WarpScriptException {  doubleCheck(gts);  List<Long> anomalous_ticks=new ArrayList<Long>();  for (int i=0; i < gts.values; i++) {    double temp=gts.doubleValues[i];    if (abs) {      temp=Math.abs(temp);    }    if (temp >= threshold) {      anomalous_ticks.add(gts.ticks[i]);    }  }  return anomalous_ticks;}  }
class C{  IfdData(int ifdId){  mIfdId=ifdId;}  }
class C{  public static boolean isEmpty(CharSequence string){  return ((string == null) || (string.length() == 0));}  }
class C{  public void updateMatrices(IntBuffer viewport,FloatBuffer modelview,FloatBuffer projection,double widthScale,double heightScale){  this.viewport=viewport;  this.modelview=modelview;  this.projection=projection;  this.widthScale=widthScale;  this.heightScale=heightScale;  float fov=(float)Math.toDegrees(Math.atan(1.0D / this.projection.get(5)) * 2.0D);  this.fovY=fov;  this.displayWidth=this.viewport.get(2);  this.displayHeight=this.viewport.get(3);  this.fovX=(float)Math.toDegrees(2.0D * Math.atan((this.displayWidth / this.displayHeight) * Math.tan(Math.toRadians(this.fovY) / 2.0D)));  Vector3D lv=new Vector3D(this.modelview.get(0),this.modelview.get(1),this.modelview.get(2));  Vector3D uv=new Vector3D(this.modelview.get(4),this.modelview.get(5),this.modelview.get(6));  Vector3D fv=new Vector3D(this.modelview.get(8),this.modelview.get(9),this.modelview.get(10));  Vector3D nuv=new Vector3D(0,1.0D,0);  Vector3D nlv=new Vector3D(1.0D,0,0);  double yaw=Math.toDegrees(Math.atan2(nlv.cross(lv).length(),nlv.dot(lv))) + 180.0D;  if (fv.x < 0.0D) {    yaw=360.0D - yaw;  }  double pitch=0.0D;  if ((-fv.y > 0.0D && yaw >= 90.0D && yaw < 270.0D) || (fv.y > 0.0D && !(yaw >= 90.0D && yaw < 270.0D))) {    pitch=Math.toDegrees(Math.atan2(nuv.cross(uv).length(),nuv.dot(uv)));  } else {    pitch=-Math.toDegrees(Math.atan2(nuv.cross(uv).length(),nuv.dot(uv)));  }  this.lookVec=this.getRotationVector(yaw,pitch);  Matrix4f modelviewMatrix=new Matrix4f();  modelviewMatrix.load(this.modelview.asReadOnlyBuffer());  modelviewMatrix.invert();  this.frustumPos=new Vector3D(modelviewMatrix.m30,modelviewMatrix.m31,modelviewMatrix.m32);  this.frustum=this.getFrustum(this.frustumPos.x,this.frustumPos.y,this.frustumPos.z,yaw,pitch,fov,1.0F,displayWidth / displayHeight);  this.invFrustum=this.getFrustum(this.frustumPos.x,this.frustumPos.y,this.frustumPos.z,yaw - 180,-pitch,fov,1.0F,displayWidth / displayHeight);  this.viewVec=this.getRotationVector(yaw,pitch).normalized();  this.bra=Math.toDegrees(Math.acos((displayHeight * heightScale) / Math.sqrt(displayWidth * widthScale * displayWidth* widthScale + displayHeight * heightScale * displayHeight* heightScale)));  this.bla=360 - this.bra;  this.tra=this.bla - 180;  this.tla=this.bra + 180;  this.rb=new Line(this.displayWidth * this.widthScale,0,0,0,1,0);  this.tb=new Line(0,0,0,1,0,0);  this.lb=new Line(0,0,0,0,1,0);  this.bb=new Line(0,this.displayHeight * this.heightScale,0,1,0,0);}  }
class C{  public FrequencyRegex(){  super(FREQ_REGEX,false,1.0);}  }
class C{  public static BaseStorageEntity parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  BaseStorageEntity object=new BaseStorageEntity();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"BaseStorageEntity".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (BaseStorageEntity)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://data.vasa.vim.vmware.com/xsd","uniqueIdentifier").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if (!"true".equals(nillableValue) && !"1".equals(nillableValue)) {        java.lang.String content=reader.getElementText();        object.setUniqueIdentifier(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      } else {        reader.getElementText();      }      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @PUT @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response updatePassword(@Context HttpServletRequest httpRequest,@Context HttpServletResponse servletResponse,PasswordUpdateParam passwordUpdate,@DefaultValue("true") @QueryParam("logout_user") boolean logout){  checkPasswordParameter(httpRequest,passwordUpdate,true);  String username=_sc.getUserPrincipal().getName();  String clientIP=_invLoginManager.getClientIP(httpRequest);  _logger.info("update Password for user {}",username);  setUserPassword(username,passwordUpdate.getPassword(),passwordUpdate.getEncPassword(),false);  auditPassword(OperationTypeEnum.CHANGE_LOCAL_AUTHUSER_PASSWORD,AuditLogManager.AUDITLOG_SUCCESS,null,username);  _invLoginManager.removeInvalidRecord(clientIP);  if (logout && !internalLogoutClient.logoutUser(null,_req)) {    _logger.error("Password changed but unable to logout user active sessions.");  }  return Response.ok("Password Changed for " + _sc.getUserPrincipal().getName() + "\n").build();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:24.663 -0500",hash_original_method="A9B8238B616BE351FF7BBE6405761278",hash_generated_method="F945D9E311BDCA10D30B0106282427DE") public Rect createFromParcel(Parcel in){  Rect r=new Rect();  r.readFromParcel(in);  return r;}  }
class C{  public JSONObject(JSONTokener x) throws JSONException {  this(true);  char c;  String key;  if (x.nextClean() != '{') {    throw x.syntaxError("A JSONObject text must begin with '{'");  }  for (; ; ) {    c=x.nextClean();switch (c) {case 0:      throw x.syntaxError("A JSONObject text must end with '}'");case '}':    return;default :  x.back();key=x.nextValue().toString();}c=x.nextClean();if (c != ':') {throw x.syntaxError("Expected a ':' after a key");}this.putOnce(key,x.nextValue());switch (x.nextClean()) {case ';':case ',':if (x.nextClean() == '}') {return;}x.back();break;case '}':return;default :throw x.syntaxError("Expected a ',' or '}'");}}}  }
class C{  protected void listenToLayers(Layer[] newLayers){  if (SwingUtilities.isEventDispatchThread()) {    listenToLayersFromEDT(newLayers);  } else {    SwingUtilities.invokeLater(new MyWorker(newLayers));  }}  }
class C{  protected void registerPages(){}  }
class C{  private void forwardToPwdPage(String userId,HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String actualPwdPage=getActualLoginPage(request,pwdPage,null);  forward(actualPwdPage,request,response);  return;}  }
class C{  public static boolean hasRemoveStreamForAggregations(ExprNode child,StreamTypeService streamTypeService,boolean unidirectionalJoin){  boolean[] isIStreamOnly=streamTypeService.getIStreamOnly();  boolean isAllIStream=true;  boolean isAllIRStream=true;  for (  boolean anIsIStreamOnly : isIStreamOnly) {    if (!anIsIStreamOnly) {      isAllIStream=false;    } else {      isAllIRStream=false;    }  }  boolean hasDataWindows=true;  if (isAllIStream) {    hasDataWindows=false;  } else   if (!isAllIRStream) {    if (streamTypeService.getEventTypes().length > 1) {      if (unidirectionalJoin) {        return false;      }    } else {      hasDataWindows=false;      ExprNodeIdentifierCollectVisitor visitor=new ExprNodeIdentifierCollectVisitor();      child.accept(visitor);      for (      ExprIdentNode node : visitor.getExprProperties()) {        if (!isIStreamOnly[node.getStreamId()]) {          hasDataWindows=true;          break;        }      }    }  }  return hasDataWindows;}  }
class C{  @Override protected EClass eStaticClass(){  return MappingPackage.Literals.ENTITY_MAPPING_MODEL;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'GroupFile' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'PARENT_ID' INTEGER,"+ "'NAME' TEXT,"+ "'CREATE_DATE' INTEGER);");}  }
class C{  public GoogleBaseService(String applicationName){  super(GOOGLE_BASE_SERVICE,applicationName);  this.application=applicationName;  addExtensions();}  }
class C{  private boolean ruleR8(Node a,Node c,Graph graph){  List<Node> intoCArrows=graph.getNodesInTo(c,Endpoint.ARROW);  for (  Node b : intoCArrows) {    if (!graph.isAdjacentTo(a,b))     continue;    if (!graph.isAdjacentTo(b,c))     continue;    if (!(graph.getEndpoint(b,a) == Endpoint.TAIL))     continue;    if (!(graph.getEndpoint(c,b) == Endpoint.TAIL))     continue;    if (graph.getEndpoint(a,b) == Endpoint.TAIL)     continue;    logger.log("impliedOrientations",SearchLogUtils.edgeOrientedMsg("R8",graph.getEdge(c,a)));    graph.setEndpoint(c,a,Endpoint.TAIL);    changeFlag=true;    return true;  }  return false;}  }
class C{  public void init() throws ServletException {}  }
class C{  public void prepend(NSString s){  prepend(s.getContent());}  }
class C{  public SignalBarrier(){  _owner=null;}  }
class C{  public StringMatcher.Position find(String text,int start,int end){  if (text == null) {    throw new IllegalArgumentException();  }  int tlen=text.length();  if (start < 0) {    start=0;  }  if (end > tlen) {    end=tlen;  }  if (end < 0 || start >= end) {    return null;  }  if (this.fLength == 0) {    return new Position(start,start);  }  if (this.fIgnoreWildCards) {    int x=posIn(text,start,end);    if (x < 0) {      return null;    }    return new Position(x,x + this.fLength);  }  int segCount=this.fSegments.length;  if (segCount == 0) {    return new Position(start,end);  }  int curPos=start;  int matchStart=-1;  int i;  for (i=0; i < segCount && curPos < end; ++i) {    String current=this.fSegments[i];    int nextMatch=regExpPosIn(text,curPos,end,current);    if (nextMatch < 0) {      return null;    }    if (i == 0) {      matchStart=nextMatch;    }    curPos=nextMatch + current.length();  }  if (i < segCount) {    return null;  }  return new Position(matchStart,curPos);}  }
class C{  public int current(){  return pos;}  }
class C{  MeteringQueryResults(StatMarshaller marshaller,PrintWriter out){  _out=out;  _marshaller=marshaller;}  }
class C{  public void clear(){  bindings.clear();}  }
class C{  public boolean isDone(){  return (index > 1);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.897 -0400",hash_original_method="76FEA3BC51FC08A39946D800AEA6E194",hash_generated_method="8BE7AECBAD931DC21189BF552D24BF5F") public boolean hasBOM(ByteOrderMark bom) throws IOException {  if (!boms.contains(bom)) {    throw new IllegalArgumentException("Stream not configure to detect " + bom);  }  return byteOrderMark != null && getBOM().equals(bom);}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=(SlidingMenu)LayoutInflater.from(mActivity).inflate(R.layout.slidingmenumain,null);}  }
class C{  public Mac createLocalHmac() throws ServiceResultException {  return createHmac(getLocalSigningKey());}  }
class C{  public static Map<String,String> readHashMapStringAndString(Parcel in){  if (in == null) {    return null;  }  int size=in.readInt();  if (size == -1) {    return null;  }  Map<String,String> map=new HashMap<String,String>();  for (int i=0; i < size; i++) {    String key=in.readString();    map.put(key,in.readString());  }  return map;}  }
class C{  public boolean checkArgs(ResolvedJavaMethod method,ValueNode... args){  Signature signature=method.getSignature();  boolean isStatic=method.isStatic();  if (signature.getParameterCount(!isStatic) != args.length) {    throw new AssertionError(graph + ": wrong number of arguments to " + method);  }  int argIndex=0;  if (!isStatic) {    ResolvedJavaType expectedType=method.getDeclaringClass();    JavaKind expected=wordTypes == null ? expectedType.getJavaKind() : wordTypes.asKind(expectedType);    JavaKind actual=args[argIndex++].stamp().getStackKind();    assert expected == actual : graph + ": wrong kind of value for receiver argument of call to " + method+ " ["+ actual+ " != "+ expected+ "]";  }  for (int i=0; i != signature.getParameterCount(false); i++) {    JavaType expectedType=signature.getParameterType(i,method.getDeclaringClass());    JavaKind expected=wordTypes == null ? expectedType.getJavaKind().getStackKind() : wordTypes.asKind(expectedType).getStackKind();    JavaKind actual=args[argIndex++].stamp().getStackKind();    if (expected != actual) {      throw new AssertionError(graph + ": wrong kind of value for argument " + i+ " of call to "+ method+ " ["+ actual+ " != "+ expected+ "]");    }  }  return true;}  }
class C{  public boolean save(){  boolean any=false;synchronized (PROPS) {    for (    SettingsGroup group : PROPS) {      any|=group.save();    }  }  if (any) {    fireSettingsHandlerEvent(EventType.SAVE,null);  }  return any;}  }
class C{  protected void dockSouth(DockWrapper wrapper,int idx){  dock(south,wrapper,idx);}  }
class C{  public void paintRadioButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void openSideMenu(){  ((SideMenuBar)getMenuBar()).openMenu(null);}  }
class C{  public static HashMap<LabelSet,Integer> loadMap(String filename) throws Exception {  return (HashMap<LabelSet,Integer>)MLUtils.loadObject(filename);}  }
class C{  public static void covarianceMatrix(Vec mean,DataSet dataSet,Matrix covariance){  double sumOfWeights=0.0, sumOfSquaredWeights=0.0;  for (int i=0; i < dataSet.getSampleSize(); i++) {    DataPoint dp=dataSet.getDataPoint(i);    sumOfWeights+=dp.getWeight();    sumOfSquaredWeights+=Math.pow(dp.getWeight(),2);  }  covarianceMatrix(mean,dataSet,covariance,sumOfWeights,sumOfSquaredWeights);}  }
class C{  public String globalInfo(){  return "Writes to a destination that is in libsvm format.\n\n" + "For more information about libsvm see:\n\n" + "http://www.csie.ntu.edu.tw/~cjlin/libsvm/";}  }
class C{  public synchronized void resetBuffer(){  reset();}  }
class C{  public static ConfigManager instance(){  return instance;}  }
class C{  public boolean isEnabled(){  return enabled;}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.Instructors);  InstructorSearchForm instructorSearchForm=(InstructorSearchForm)form;  ActionMessages errors=new ActionMessages();  String op=instructorSearchForm.getOp();  String deptId=(String)request.getAttribute("deptId");  if (deptId != null) {    instructorSearchForm.setDeptUniqueId(deptId);  }  if (sessionContext.getAttribute(SessionAttribute.DepartmentId) != null && (sessionContext.getAttribute(SessionAttribute.DepartmentId).equals(instructorSearchForm.getDeptUniqueId()) || instructorSearchForm.getDeptUniqueId().equalsIgnoreCase(""))) {    instructorSearchForm.setDeptUniqueId(sessionContext.getAttribute(SessionAttribute.DepartmentId).toString());  }  if (!instructorSearchForm.getDeptUniqueId().equalsIgnoreCase("")) {    sessionContext.setAttribute(SessionAttribute.DepartmentId,instructorSearchForm.getDeptUniqueId());  }  if (request.getAttribute(Department.DEPT_ATTR_NAME) != null) {    request.setAttribute(Department.DEPT_ATTR_NAME,request.getAttribute(Department.DEPT_ATTR_NAME));  } else {    setupManagerDepartments(request);  }  errors=instructorSearchForm.validate(mapping,request);  if (errors.size() > 0) {    saveErrors(request,errors);    return mapping.findForward("showInstructorSearch");  }  WebTable.setOrder(sessionContext,"instructorList.ord",request.getParameter("order"),2);  InstructorListBuilder ilb=new InstructorListBuilder();  String backId=("PreferenceGroup".equals(request.getParameter("backType")) ? request.getParameter("backId") : null);  String tblData=ilb.htmlTableForInstructor(sessionContext,instructorSearchForm.getDeptUniqueId(),WebTable.getOrder(sessionContext,"instructorList.ord"),backId);  if (tblData == null || tblData.trim().isEmpty()) {    errors.add("searchResult",new ActionMessage("errors.generic",MSG.errorNoInstructorsFoundInSearch()));    saveErrors(request,errors);  } else {    if (MSG.actionExportPdf().equals(op)) {      PdfWebTable table=ilb.pdfTableForInstructor(sessionContext,instructorSearchForm.getDeptUniqueId());      if (table != null) {        ExportUtils.exportPDF(table,WebTable.getOrder(sessionContext,"instructorList.ord"),response,"instructors");        return null;      }    }  }  if (deptId != null) {    Department d=(new DepartmentDAO()).get(Long.valueOf(deptId));    if (d != null) {      BackTracker.markForBack(request,"instructorList.do?deptId=" + d.getUniqueId(),MSG.backInstructors(d.getDeptCode() + " - " + d.getName()),true,true);    }  } else   if (sessionContext.getAttribute(SessionAttribute.DepartmentId) != null) {    Department d=(new DepartmentDAO()).get(Long.valueOf(sessionContext.getAttribute(SessionAttribute.DepartmentId).toString()));    if (d != null) {      BackTracker.markForBack(request,"instructorList.do?deptId=" + d.getUniqueId(),MSG.backInstructors(d.getDeptCode() + " - " + d.getName()),true,true);    }  } else {    BackTracker.markForBack(request,"instructorList.do",MSG.backInstructors2(),true,true);  }  request.setAttribute("instructorList",tblData);  saveErrors(request,errors);  return mapping.findForward("showInstructorList");}  }
class C{  public final boolean isInstance(Object obj){  return javaClass.isInstance(obj);}  }
class C{  private static void populateMainMimeTypeMapping(){  MAINMIMETYPE_TO_ICON_MAPPING.put("audio",R.drawable.file_sound);  MAINMIMETYPE_TO_ICON_MAPPING.put("database",R.drawable.file);  MAINMIMETYPE_TO_ICON_MAPPING.put("httpd",R.drawable.file_zip);  MAINMIMETYPE_TO_ICON_MAPPING.put("image",R.drawable.file_image);  MAINMIMETYPE_TO_ICON_MAPPING.put("text",R.drawable.file_text);  MAINMIMETYPE_TO_ICON_MAPPING.put("video",R.drawable.file_movie);  MAINMIMETYPE_TO_ICON_MAPPING.put("web",R.drawable.file_code);}  }
class C{  public boolean isCheckPrivateSharedAssociations(){  return _checkPrivateSharedAssociations;}  }
class C{  private IgfsMessage processStreamControlRequest(IgfsClientSession ses,IgfsIpcCommand cmd,IgfsMessage msg,DataInput in) throws IgniteCheckedException, IOException {  IgfsStreamControlRequest req=(IgfsStreamControlRequest)msg;  Long rsrcId=req.streamId();  IgfsControlResponse resp=new IgfsControlResponse();switch (cmd) {case CLOSE:{      Closeable res=resource(ses,rsrcId);      if (log.isDebugEnabled())       log.debug("Requested to close resource [igfsName=" + igfs.name() + ", rsrcId="+ rsrcId+ ", res="+ res+ ']');      if (res == null)       throw new IgniteCheckedException("Resource to close not found: " + rsrcId);      try {        res.close();      } catch (      IOException e) {        IgfsOutOfSpaceException space=X.cause(e,IgfsOutOfSpaceException.class);        if (space != null)         throw space;        throw e;      }      boolean success=ses.unregisterResource(rsrcId,res);      assert success : "Failed to unregister resource [igfsName=" + igfs.name() + ", rsrcId="+ rsrcId+ ", res="+ res+ ']';      if (log.isDebugEnabled())       log.debug("Closed IGFS stream [igfsName=" + igfs.name() + ", streamId="+ rsrcId+ ", ses="+ ses+ ']');      resp.response(true);      break;    }case READ_BLOCK:{    long pos=req.position();    int size=req.length();    IgfsInputStreamImpl igfsIn=(IgfsInputStreamImpl)resource(ses,rsrcId);    if (igfsIn == null)     throw new IgniteCheckedException("Input stream not found (already closed?): " + rsrcId);    byte[][] chunks=igfsIn.readChunks(pos,size);    resp.response(chunks);    int len=0;    if (chunks.length > 0)     len+=chunks[0].length;    if (chunks.length > 1)     len+=chunks[chunks.length - 1].length;    if (chunks.length > 2)     len+=chunks[1].length * (chunks.length - 2);    resp.length(len);    break;  }case WRITE_BLOCK:{  IgfsOutputStream out=(IgfsOutputStream)resource(ses,rsrcId);  if (out == null)   throw new IgniteCheckedException("Output stream not found (already closed?): " + rsrcId);  int writeLen=req.length();  try {    out.transferFrom(in,writeLen);    if (errWrite)     throw new IOException("Failed to write data to server (test).");    return null;  } catch (  IOException e) {    resp.error(rsrcId,e.getMessage());    break;  }}default :assert false;break;}return resp;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public HmRsStatus(final int val){  this(Matchers.equalTo(val));}  }
class C{  private void heapifyUp(int twopos,double cur,long val){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    double par=twoheap[parent];    if (cur <= par) {      break;    }    twoheap[twopos]=par;    twovals[twopos]=twovals[parent];    twopos=parent;  }  twoheap[twopos]=cur;  twovals[twopos]=val;}  }
class C{  public void addTo(Object obj) throws MultipleSoloMapComponentException {  mapHandler.add(obj);}  }
class C{  private void nameBasedStuff(String cmd,String name){  Collection<String> list=new ArrayList<>();  list.add(name);  streamStuff(cmd,list);}  }
class C{  private static boolean eq(Object x,Object y){  return x == y || x.equals(y);}  }
class C{  public void route(org.w3c.dom.Node document) throws EPException {  if (document == null) {    log.error(".sendEvent Null object supplied");    return;  }  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".sendEvent Processing DOM node event " + document);  }  EventBean eventBean=unisolatedServices.getEventAdapterService().adapterForDOM(document);  threadWorkQueue.addBack(eventBean);}  }
class C{  public final void error(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_ERROR)) {    log(SimpleLog.LOG_LEVEL_ERROR,message,null);  }}  }
class C{  @DSComment("Character encoder/decoder") @DSSafe(DSCat.UTIL_FUNCTION) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:01.593 -0500",hash_original_method="8994A4AB686221398F6DD6413AEB03CF",hash_generated_method="F1C666256FC275EB16EDAF06C5753736") public void throwException() throws BufferUnderflowException, BufferOverflowException, UnmappableCharacterException, MalformedInputException, CharacterCodingException {switch (this.type) {case TYPE_UNDERFLOW:    throw new BufferUnderflowException();case TYPE_OVERFLOW:  throw new BufferOverflowException();case TYPE_UNMAPPABLE_CHAR:throw new UnmappableCharacterException(this.length);case TYPE_MALFORMED_INPUT:throw new MalformedInputException(this.length);default :throw new CharacterCodingException();}}  }
class C{  public VisualAccumulator(int tri,double max){  StdDraw.setXscale(0,tri);  StdDraw.setYscale(0,max);  StdDraw.setPenRadius(.005);}  }
class C{  @Override public void onCheckedChanged(CompoundButton switchView,boolean isChecked){  if (!isResumed()) {    return;  }  if (isChecked) {    ((FileActivity)getActivity()).getFileOperationsHelper().requestPasswordForShareViaLink(mFile,false);  } else {    ((FileActivity)getActivity()).getFileOperationsHelper().setPasswordToShareViaLink(mFile,"");  }  switchView.setOnCheckedChangeListener(null);  switchView.toggle();  switchView.setOnCheckedChangeListener(mOnPasswordInteractionListener);}  }
class C{  public void initializeShardTable(Database database,int channels) throws SQLException, ReplicatorException {  if (logger.isDebugEnabled())   logger.debug("Initializing channel table");  if (database.findTungstenTable(channelTable.getSchema(),channelTable.getName()) == null) {    database.createTable(this.channelTable,false,tableType);  }  int maxChannel=this.listMaxChannel(database);  if (maxChannel < channels) {    if (logger.isDebugEnabled())     logger.info("Validated channel assignments");  } else {    String msg=String.format("Shard channel assignments are inconsistent with channel configuration: channels=%d max channel id allowed=%d max id assigned=%d",channels,channels - 1,maxChannel);    logger.error("Replication configuration error: table trep_shard_channel has value(s) that exceed available channels");    logger.info("This may be due to resetting the number of channels after an unclean replicator shutdown");    throw new ReplicatorException(msg);  }}  }
class C{  @Override public void readFromNBT(NBTTagCompound tag){  super.readFromNBT(tag);  NBTTagCompound data=tag.getCompoundTag("IC2BasicSink");  energyStored=data.getDouble("energy");}  }
class C{  public NumberLiteral newNumberLiteral(String literal){  if (literal == null) {    throw new IllegalArgumentException();  }  NumberLiteral result=new NumberLiteral(this);  result.setToken(literal);  return result;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public MultiInformationCalculatorDiscrete(int base,int numVars){  super(base);  this.numVars=numVars;  jointStates=MathsUtils.power(base,numVars);  jointCount=new int[jointStates];  marginalCounts=new int[numVars][base];}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  public static java.util.List<LatLon> rotateSector(Globe globe,Sector sector,Angle rotation){  if (globe == null) {    String message=Logging.getMessage("nullValue.GlobeIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (rotation == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  LatLon[] corners=sector.getCorners();  java.util.List<LatLon> transformedCorners=new ArrayList<LatLon>(corners.length);  Vec4[] verts=sector.computeCornerPoints(globe,1);  Vec4 normalVec=verts[2].subtract3(verts[0]).cross3(verts[3].subtract3(verts[1])).normalize3();  Matrix rotationMatrix=Matrix.fromAxisAngle(rotation,normalVec);  Vec4 centerPoint=sector.computeCenterPoint(globe,1);  for (  Vec4 point : verts) {    point=point.subtract3(centerPoint).transformBy3(rotationMatrix).add3(centerPoint);    LatLon ll=globe.computePositionFromPoint(point);    transformedCorners.add(ll);  }  return transformedCorners;}  }
class C{  private void onIdea(String idea){  this.idea=idea;}  }
class C{  public void testBottomUpSemanticsExplainHint03() throws Exception {  final ASTContainer container=new TestHelper("explainHints-bottomup03","explainHints-bottomup03.rq","explainHints.trig","explainHints-bottomup12345.srx").runTest();  assertCarriesExactlyOneExplainHintOfType(container.getOptimizedAST(),BottomUpSemanticsExplainHint.class);}  }
class C{  public static void updatePlayerRPObject(final RPObject object){  final String[] slotsNormal={"bag","rhand","lhand","head","armor","legs","feet","finger","cloak","bank","bank_ados","zaras_chest_ados","bank_fado","bank_nalwor","spells","keyring","trade"};  final String[] slotsSpecial={"!quests","!kills","!buddy","!ignore","!visited","skills","!tutorial"};  if (!object.has("base_hp")) {    object.put("base_hp","100");    object.put("hp","100");  }  final Outfit tempOutfit=new Outfit();  if (!object.has("outfit")) {    object.put("outfit",tempOutfit.getCode());  }  for (  final String slotName : slotsNormal) {    if (!object.hasSlot(slotName)) {      object.addSlot(new PlayerSlot(slotName));    }  }  for (  final String slotName : slotsSpecial) {    if (!object.hasSlot(slotName)) {      object.addSlot(new KeyedSlot(slotName));    }    final RPSlot slot=object.getSlot(slotName);    if (slot.size() == 0) {      final RPObject singleObject=new RPObject();      slot.add(singleObject);    }  }  if (!object.has("atk_xp")) {    object.put("atk_xp","0");    object.put("def_xp","0");    if (Testing.COMBAT) {      object.put("ratk_xp","0");    }  }  if (object.has("devel")) {    object.remove("devel");  }  if (!object.has("release")) {    object.put("release","0.00");    object.put("atk","10");    object.put("def","10");    if (Testing.COMBAT) {      object.put("ratk","10");    }  }  if (!object.has("age")) {    object.put("age","0");  }  if (!object.has("karma")) {    object.put("karma",10);  }  if (!object.has("mana")) {    object.put("mana",0);  }  if (!object.has("base_mana")) {    object.put("base_mana",0);  }  if (object.has("!skills")) {    object.remove("!skills");  }  if (!object.has("height")) {    object.put("height",2);  }  if (!object.has("width")) {    object.put("width",1);  }  transformKillSlot(object);  if (object.getInt("hp") <= 0) {    logger.warn("Setting hp to 1 for player " + object);    object.put("hp",1);  }  if (object.hasSlot("!buddy")) {    for (    RPObject buddy : object.getSlot("!buddy")) {      for (      final String buddyname : buddy) {        if (buddyname.startsWith("_")) {          boolean online=false;          if (buddy.get(buddyname).equals("1")) {            online=true;          }          object.put("buddies",buddyname.substring(1),online);        }      }      buddy.remove("_db_id");    }    object.removeSlot("!buddy");  }  object.remove("buddies","db_id");  if (object.hasSlot("!features")) {    if (KeyedSlotUtil.getKeyedSlot(object,"!features","keyring") != null) {      object.put("features","keyring","");    }    object.removeSlot("!features");  }  if (KeyedSlotUtil.getKeyedSlot(object,"!quests","learn_karma") != null) {    object.put("features","karma_indicator","");  }  if (object.has("age")) {    if (!object.has("release") || (object.get("release").compareTo("0.88") <= 0)) {      object.put("age",object.getInt("age") * 180 / 200);    }  }  if (object.has("outfit_org") && !object.has("outfit_expire_age")) {    object.put("outfit_expire_age",0);  }}  }
class C{  @Override public void deliver(WriteStream os,OutHttp2 outHttp) throws IOException {  outHttp.writeReset(_streamId,_errorCode);}  }
class C{  public void prepare(){  id=StringUtils.trimToNull(req.getParameter("id"));}  }
class C{  public boolean process(Repository repository,ExprEvaluatorContext exprEvaluatorContext){  boolean hasOneResultRow=false;  Iterator<Cursor> it=repository.getCursors(fromStream);  for (; it.hasNext(); ) {    Cursor cursor=it.next();    EventBean lookupEvent=cursor.getTheEvent();    int streamCount=0;    while (streamCount < requiredSubStreams.length) {      Set<EventBean> lookupResult=lookupStrategies[streamCount].lookup(lookupEvent,cursor,exprEvaluatorContext);      if (lookupResult == null || lookupResult.isEmpty()) {        break;      }      resultPerStream[streamCount]=lookupResult;      streamCount++;    }    if (streamCount < requiredSubStreams.length) {      continue;    } else {      for (int i=0; i < requiredSubStreams.length; i++) {        hasOneResultRow=true;        repository.addResult(cursor,resultPerStream[i],requiredSubStreams[i]);      }    }    for (int i=0; i < optionalSubStreams.length; i++) {      Set<EventBean> lookupResult=lookupStrategies[streamCount].lookup(lookupEvent,cursor,exprEvaluatorContext);      if (lookupResult != null) {        hasOneResultRow=true;        repository.addResult(cursor,lookupResult,optionalSubStreams[i]);      }      streamCount++;    }  }  return hasOneResultRow;}  }
class C{  public static boolean hasExplicitSuperBound(final AnnotatedTypeMirror wildcard){  final Type.WildcardType wildcardType=(Type.WildcardType)wildcard.getUnderlyingType();  return wildcardType.isSuperBound() && !((WildcardType)wildcard.getUnderlyingType()).isUnbound();}  }
class C{  public static boolean isNCName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NCNAME) != 0;}  }
class C{  protected boolean writeEnvironmentReport(Hashtable h){  if (null == h) {    logMsg("# ERROR: writeEnvironmentReport called with null Hashtable");    return false;  }  boolean errors=false;  logMsg("#---- BEGIN writeEnvironmentReport($Revision: 468646 $): Useful stuff found: ----");  for (Enumeration keys=h.keys(); keys.hasMoreElements(); ) {    Object key=keys.nextElement();    String keyStr=(String)key;    try {      if (keyStr.startsWith(FOUNDCLASSES)) {        Vector v=(Vector)h.get(keyStr);        errors|=logFoundJars(v,keyStr);      } else {        if (keyStr.startsWith(ERROR)) {          errors=true;        }        logMsg(keyStr + "=" + h.get(keyStr));      }    } catch (    Exception e) {      logMsg("Reading-" + key + "= threw: "+ e.toString());    }  }  logMsg("#----- END writeEnvironmentReport: Useful properties found: -----");  return errors;}  }
class C{  private boolean fpConditionOK(ConditionOperand c){switch (c.value) {case ConditionOperand.CMPL_EQUAL:    return false;case ConditionOperand.CMPL_NOT_EQUAL:  return false;case ConditionOperand.CMPG_LESS:return false;case ConditionOperand.CMPG_GREATER_EQUAL:return false;case ConditionOperand.CMPG_LESS_EQUAL:return false;case ConditionOperand.CMPG_GREATER:return false;case ConditionOperand.CMPL_GREATER:return true;case ConditionOperand.CMPL_LESS_EQUAL:return true;case ConditionOperand.CMPL_GREATER_EQUAL:return true;case ConditionOperand.CMPL_LESS:return true;default :OptimizingCompilerException.UNREACHABLE();return false;}}  }
class C{  public static int binarySearch(long[] a,long key){  int low=0;  int high=a.length - 1;  while (low <= high) {    int mid=(low + high) >> 1;    long midVal=a[mid];    if (midVal < key)     low=mid + 1; else     if (midVal > key)     high=mid - 1; else     return mid;  }  return -(low + 1);}  }
class C{  @After public void afterTest(){  ServerConfDatabaseCtx.get().commitTransaction();}  }
class C{  public BinarySearchTreeIterator(TreeNode root){  stack=new ArrayDeque<>();  pushAll(root);}  }
class C{  public static String serializeWIF(PrivateKey key){  return ByteUtils.toBase58(bytesWIF(key));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public TokenizedReader makeReader(){  return new TokenizedReader(colSep,quoteChars,comment);}  }
class C{  protected boolean handlesExperiment(Experiment exp){  boolean result;  Evaluator evaluator;  result=(exp instanceof DefaultExperiment);  result=result && (exp.getDatasetProvider() instanceof LocalDatasetProvider);  result=result && ((exp.getEvaluator() instanceof RepeatedRuns) || (exp.getEvaluator() instanceof CrossValidation) || (exp.getEvaluator() instanceof PercentageSplit));  if (result && (exp.getEvaluator() instanceof RepeatedRuns)) {    evaluator=((RepeatedRuns)exp.getEvaluator()).getEvaluator();    result=result && ((evaluator instanceof CrossValidation) || evaluator instanceof PercentageSplit);  }  return result;}  }
class C{  public void addLayoutComponent(String place,Component component){  boolean isValid=true;  if (place != null) {    if (place.equals(JSplitPane.DIVIDER)) {      components[2]=component;      sizes[2]=getSizeForPrimaryAxis(component.getPreferredSize());    } else     if (place.equals(JSplitPane.LEFT) || place.equals(JSplitPane.TOP)) {      components[0]=component;      sizes[0]=0;    } else     if (place.equals(JSplitPane.RIGHT) || place.equals(JSplitPane.BOTTOM)) {      components[1]=component;      sizes[1]=0;    } else     if (!place.equals(BasicSplitPaneUI.NON_CONTINUOUS_DIVIDER))     isValid=false;  } else {    isValid=false;  }  if (!isValid)   throw new IllegalArgumentException("cannot add to layout: " + "unknown constraint: " + place);  doReset=true;}  }
class C{  public void postProcessLocation(boolean root){  sortLocation();  double birth_location_x=0;  double birth_location_y=0;  double birth_location_z=0;  if (official_name.equals("P0") || official_name.equals("P1'") || official_name.equals("P2'")|| official_name.equals("AB")|| official_name.equals("P3'")|| official_name.equals("P4'")|| official_name.equals("Z3")|| official_name.equals("Z2")) {    if (official_name.equals("P0")) {      birth_location_x=30;      birth_location_y=17.95;      birth_location_z=13.6;    } else     if (official_name.equals("P1'")) {      birth_location_x=45;      birth_location_y=17.95;      birth_location_z=13.6;    } else     if (official_name.equals("P2'")) {      birth_location_x=54;      birth_location_y=31.3;      birth_location_z=14.4;    } else     if (official_name.equals("AB")) {      birth_location_x=22.05;      birth_location_y=17.95;      birth_location_z=13.6;    } else     if (official_name.equals("P3'")) {      birth_location_x=55;      birth_location_y=25;      birth_location_z=9.6;    } else     if (official_name.equals("P4'")) {      birth_location_x=53.5;      birth_location_y=26;      birth_location_z=6.5;    } else     if (official_name.equals("Z3")) {      birth_location_x=53;      birth_location_y=23;      birth_location_z=6.5;    } else     if (official_name.equals("Z2")) {      birth_location_x=53;      birth_location_y=29;      birth_location_z=6.5;    } else {      birth_location_x=0;      birth_location_y=0;      birth_location_z=0;    }    pushLocation(birth_location_x,birth_location_y,birth_location_z,birthday + (death_day - birthday) / 3);    sortLocation();  } else   if (root) {    System.out.println("Whoa! " + official_name + "is root, but has no location!");    birth_location_x=0;    birth_location_y=0;    birth_location_z=0;  }  if (root || parent == null) {  } else   if (location_size != 0 && parent.location_size != 0) {    birth_location_x=parent.location_x[parent.location_size - 1];    birth_location_y=parent.location_y[parent.location_size - 1];    birth_location_z=parent.location_z[parent.location_size - 1];  } else   if (location_size != 0) {    birth_location_x=location_x[0];    birth_location_y=location_y[0];    birth_location_z=location_z[0];  } else {    birth_location_x=parent.location_x[parent.location_size - 1];    birth_location_y=parent.location_y[parent.location_size - 1];    birth_location_z=parent.location_z[parent.location_size - 1];    if (lineage_name.equals("")) {      System.out.println("Whoa! " + official_name + "has no lineage name!");      lineage_name=official_name;      char sc=lineage_name.charAt(lineage_name.length() - 1);      if (sc == 'd') {        split_radius_distance[1]=parent.split_radius_distance[1] / 2;        birth_location_y-=split_radius_distance[1];      } else       if (sc == 'v') {        split_radius_distance[1]=parent.split_radius_distance[1] / 2;        birth_location_y+=split_radius_distance[1];      } else       if (sc == 'a') {        split_radius_distance[0]=parent.split_radius_distance[0] / 2;        birth_location_x-=split_radius_distance[0];      } else       if (sc == 'p') {        split_radius_distance[0]=parent.split_radius_distance[0] / 2;        birth_location_x+=split_radius_distance[0];      } else       if (sc == 'l') {        split_radius_distance[2]=parent.split_radius_distance[2] / 2;        birth_location_z-=split_radius_distance[2];      } else       if (sc == 'r') {        split_radius_distance[2]=parent.split_radius_distance[2] / 2;        birth_location_z+=split_radius_distance[2];      } else       System.out.println("Whoa! Lineage name with no split characteristics: " + lineage_name + " ("+ official_name+ ")");    } else {      char sc=lineage_name.charAt(lineage_name.length() - 1);      if (sc == 'd') {        split_radius_distance[1]=parent.split_radius_distance[1] / 2;        birth_location_y-=split_radius_distance[1];      } else       if (sc == 'v') {        split_radius_distance[1]=parent.split_radius_distance[1] / 2;        birth_location_y+=split_radius_distance[1];      } else       if (sc == 'a') {        split_radius_distance[0]=parent.split_radius_distance[0] / 2;        birth_location_x-=split_radius_distance[0];      } else       if (sc == 'p') {        split_radius_distance[0]=parent.split_radius_distance[0] / 2;        birth_location_x+=split_radius_distance[0];      } else       if (sc == 'l') {        split_radius_distance[2]=parent.split_radius_distance[2] / 2;        birth_location_z-=split_radius_distance[2];      } else       if (sc == 'r') {        split_radius_distance[2]=parent.split_radius_distance[2] / 2;        birth_location_z+=split_radius_distance[2];      } else       System.out.println("Whoa! Lineage name with no split characteristics: " + lineage_name + " ("+ official_name+ ")");    }  }  pushLocation(birth_location_x,birth_location_y,birth_location_z,birthday);  sortLocation();  for (int z=0; z < num_children; z++)   daughters[z].postProcessLocation(false);}  }
class C{  public int size(){  return symbols.size();}  }
class C{  public Oid(byte[] data) throws GSSException {  try {    DerValue derVal=new DerValue(data);    derEncoding=derVal.toByteArray();    oid=derVal.getOID();  } catch (  IOException e) {    throw new GSSException(GSSException.FAILURE,"Improperly formatted ASN.1 DER encoding for Oid");  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  XPathContext context=transformer.getXPathContext();  if (transformer.currentFuncResultSeen()) {    throw new TransformerException("An EXSLT function cannot set more than one result!");  }  int sourceNode=context.getCurrentNode();  XObject var=getValue(transformer,sourceNode);  transformer.popCurrentFuncResult();  transformer.pushCurrentFuncResult(var);}  }
class C{  public boolean isSubsequence(String s,String t){  if (s.length() == 0) {    return true;  }  int indexS=0;  for (int i=0; i < t.length(); i++) {    if (t.charAt(i) == s.charAt(indexS)) {      indexS++;      if (indexS == s.length()) {        return true;      }    }  }  return false;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  @IntRange(from=MIN_GROUP_ID,to=MAX_GROUP_ID) public static long extractExpandableGroupIdPart(long composedId){  if ((composedId == RecyclerView.NO_ID) || !isExpandableGroup(composedId)) {    return RecyclerView.NO_ID;  }  return (composedId << (64 - BIT_WIDTH_GROUP_ID - BIT_OFFSET_GROUP_ID)) >> (64 - BIT_WIDTH_GROUP_ID);}  }
class C{  public void testBug3697() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3697");    this.stmt.executeUpdate("CREATE TABLE testBug3697 (field1 VARCHAR(255))");    StringBuilder updateBuf=new StringBuilder("INSERT INTO testBug3697 VALUES ('");    for (int i=0; i < 512; i++) {      updateBuf.append("A");    }    updateBuf.append("')");    try {      this.stmt.executeUpdate(updateBuf.toString());    } catch (    DataTruncation dtEx) {    }    SQLWarning warningChain=this.stmt.getWarnings();    System.out.println(warningChain);  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug3697");  }}  }
class C{  public int readUnsignedByte(){  int result=shiftIntoInt(data,position,1);  position+=1;  return result;}  }
class C{  public UpdateRequest upsert(Map source){  safeUpsertRequest().source(source);  return this;}  }
class C{  private void addVoidEffect(){  if (effects.isEmpty()) {    addEffect(new Effect(),new FixedParameter(1));    return;  }  double fixedMass=0;  for (  Effect e : effects.keySet()) {    if (e.length() == 0) {      return;    }    Parameter param=effects.get(e);    if (param instanceof FixedParameter) {      fixedMass+=((FixedParameter)param).getValue();    }  }  if (fixedMass > 0.99) {    return;  } else   if (fixedMass > 0.0) {    addEffect(new Effect(),new FixedParameter(1 - fixedMass));  } else {    MathExpression[] params=effects.values().stream().map(null).toArray(null);    MathExpression one=new MathExpression("1");    MathExpression negation=one.combine('-',params);    addEffect(new Effect(),new ComplexParameter(negation));  }}  }
class C{  public Builder acceptLanguage(AcceptLanguage acceptLanguage){  this.acceptLanguage=acceptLanguage;  return this;}  }
class C{  private void loadChat(String userId,String chatName,String image,String tagName,String contactNumber,String price,String title,String message,String date){  final String chatId=Utils.generateChatId(userId,AppConstants.UserInfo.INSTANCE.getId());  if (getActivity() != null) {    final Intent chatScreenActivity=new Intent(getActivity(),ChatScreenActivity.class);    chatScreenActivity.putExtra(AppConstants.Keys.USER_ID,userId);    chatScreenActivity.putExtra(AppConstants.Keys.CHAT_ID,chatId);    chatScreenActivity.putExtra(AppConstants.Keys.CHAT_TITLE,chatName);    chatScreenActivity.putExtra(AppConstants.Keys.PROFILE_IMAGE,image);    chatScreenActivity.putExtra(AppConstants.Keys.SERVICE_ID,mCardId);    chatScreenActivity.putExtra(AppConstants.Keys.FROM_WALL,true);    chatScreenActivity.putExtra(AppConstants.Keys.MESSAGE,message);    chatScreenActivity.putExtra(AppConstants.Keys.DATE_TIME,date);    chatScreenActivity.putExtra(AppConstants.Keys.TAG_NAME,tagName);    chatScreenActivity.putExtra(AppConstants.Keys.CONTACT_NUMBER,contactNumber);    chatScreenActivity.putExtra(AppConstants.Keys.SERVICE_PRICE,price);    chatScreenActivity.putExtra(AppConstants.Keys.TITLE,title);    chatScreenActivity.putExtra(AppConstants.Keys.MY_ID,AppConstants.UserInfo.INSTANCE.getId());    startActivity(chatScreenActivity);  }}  }
class C{  private String readInputUntil(char symbol){  StringBuilder strBuf=new StringBuilder();  while (!accept(symbol)) {    strBuf.append((char)data[index]);    skip();  }  return strBuf.toString();}  }
class C{  public void addInterface(String name){  cachedInterfaces=null;  int info=constPool.addClassInfo(name);  if (interfaces == null) {    interfaces=new int[1];    interfaces[0]=info;  } else {    int n=interfaces.length;    int[] newarray=new int[n + 1];    System.arraycopy(interfaces,0,newarray,0,n);    newarray[n]=info;    interfaces=newarray;  }}  }
class C{  private void newUnitReceived(String uri,File file,long tstamp,ClassLoader ldr,Collection<Class<? extends ComputeTask<?,?>>> clss,@Nullable String md5){  assert uri != null;  assert file != null;  assert tstamp > 0;  tstamp=Math.min(tstamp,U.currentTimeMillis());  GridUriDeploymentUnitDescriptor desc=new GridUriDeploymentUnitDescriptor(uri,file,tstamp,ldr,md5);  newUnitReceived(desc,clss != null && !clss.isEmpty() ? new ArrayList<Class<?>>(clss) : null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public OneWayPortalDestination(){  put("hidden","");  setResistance(0);}  }
class C{  private static boolean isAcronym(char[] array){  if (array.length < 2) {    return false;  }  if (!isUpperCase(array[0])) {    return false;  }  return isUpperCase(array[1]);}  }
class C{  @Override public void tickState(RobotState state){  try {    JavaScript.eval("t_$.tick('" + state.state.toLowerCase() + "')");  } catch (  ScriptException e) {  }}  }
class C{  public Class<? extends IEObjectHoverProvider> bindIEObjectHoverProvider(){  return N4JSHoverProvider.class;}  }
class C{  public void listLogicalSwitchPorts(FutureCallback<LogicalPortListResult> responseCallback) throws IOException {  getAsync(LOGICAL_PORTS_BASE_PATH,HttpStatus.SC_OK,new TypeReference<LogicalPortListResult>(){  },responseCallback);}  }
class C{  private VirtualNAS createVirtualNas(final StorageSystem system,final IsilonAccessZone isiAccessZone){  VirtualNAS vNas=new VirtualNAS();  vNas.setStorageDeviceURI(system.getId());  vNas.setNasName(isiAccessZone.getName());  vNas.setNativeId(isiAccessZone.getId());  vNas.setBaseDirPath(isiAccessZone.getPath());  vNas.setNasState(VirtualNasState.LOADED.toString());  vNas.setId(URIUtil.createId(VirtualNAS.class));  String nasNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,isiAccessZone.getZone_id().toString(),NativeGUIDGenerator.VIRTUAL_NAS);  vNas.setNativeGuid(nasNativeGuid);  StringMap dbMetrics=vNas.getMetrics();  _log.info("new Virtual NAS created with guid {} ",vNas.getNativeGuid());  if (dbMetrics == null) {    dbMetrics=new StringMap();  }  setMaxDbMetricsAz(system,dbMetrics);  vNas.setMetrics(dbMetrics);  return vNas;}  }
class C{  public String toString(){  return ("RFC822Name: " + name);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:01.050 -0500",hash_original_method="DD530C3FC2E9C76342F91D9F2F4B8C8E",hash_generated_method="D620273F7B152F7D8EE0967C6F534CE4") public From(To to){  super(NAME);  address=to.address;  parameters=to.parameters;}  }
class C{  @Override public void onOutputUpdated(String noteId,String paragraphId,String output){  Message msg=new Message(OP.PARAGRAPH_UPDATE_OUTPUT).put("noteId",noteId).put("paragraphId",paragraphId).put("data",output);  broadcast(noteId,msg);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public boolean greaterThanOrEqualTo(final LinkedIntegerMap<T> map){  for (  final T key : map.keySet()) {    if (!(this.getInt(key) >= map.getInt(key))) {      return false;    }  }  return true;}  }
class C{  public void testTxReplicatedPessimisticSerializable() throws Exception {  checkTx(REPLICATED,PESSIMISTIC,SERIALIZABLE);}  }
class C{  public static long encodeZigZag64(final long n){  return (n << 1) ^ (n >> 63);}  }
class C{  public void dontSaveDebugInfo(){  saveDebugInfo=false;}  }
class C{  public Pattern indexUrlMustNotMatchPattern(){  if (this.indexurlmustnotmatch == null) {    final String r=get(CrawlAttribute.INDEXING_URL_MUSTNOTMATCH.key);    try {      this.indexurlmustnotmatch=(r == null || r.equals(CrawlProfile.MATCH_NEVER_STRING)) ? CrawlProfile.MATCH_NEVER_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.indexurlmustnotmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.indexurlmustnotmatch;}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof DivNode || child instanceof ParagraphNode || child instanceof TCYNode|| child instanceof LinkNode|| child instanceof SpanNode|| child instanceof BRNode|| child instanceof TabNode|| child instanceof ImgNode|| child instanceof CDATANode) {    if (child instanceof LinkNode && (((LinkNode)child).href == null)) {      throw new FXGException(getStartLine(),getStartColumn(),"MissingHref");    }    if (content == null)     content=new ArrayList<TextNode>();    content.add((TextNode)child);  } else {    super.addChild(child);    return;  }  if (child instanceof AbstractRichTextNode)   ((AbstractRichTextNode)child).setParent(this);}  }
class C{  public ImportIdentitiesWoPINDialog(PanboxClient client){  super(client.getMainWindow());  this.client=client;  initComponents();  trustExporterVerifications.setVisible(false);  importContactsTable.getSelectionModel().addListSelectionListener(contactSelectionListener);}  }
class C{  public long sizeInBytes() throws IOException {  if (sizeInBytes == -1) {    long sum=0;    for (    final String fileName : files()) {      sum+=info.dir.fileLength(fileName);    }    sizeInBytes=sum;  }  return sizeInBytes;}  }
class C{  public MySQLEnvironment() throws GuacamoleException {  super();  Boolean disallowSimultaneous=getProperty(MySQLGuacamoleProperties.MYSQL_DISALLOW_SIMULTANEOUS_CONNECTIONS);  Boolean disallowDuplicate=getProperty(MySQLGuacamoleProperties.MYSQL_DISALLOW_DUPLICATE_CONNECTIONS);  if (disallowSimultaneous != null) {    if (disallowSimultaneous) {      DEFAULT_MAX_CONNECTIONS=1;      DEFAULT_MAX_GROUP_CONNECTIONS=0;    } else {      DEFAULT_MAX_CONNECTIONS=0;      DEFAULT_MAX_GROUP_CONNECTIONS=0;    }    logger.warn("The \"{}\" property is deprecated. Use \"{}\" and \"{}\" instead.",MySQLGuacamoleProperties.MYSQL_DISALLOW_SIMULTANEOUS_CONNECTIONS.getName(),MySQLGuacamoleProperties.MYSQL_DEFAULT_MAX_CONNECTIONS.getName(),MySQLGuacamoleProperties.MYSQL_DEFAULT_MAX_GROUP_CONNECTIONS.getName());    logger.info("To achieve the same result of setting \"{}\" to \"{}\", set \"{}\" to \"{}\" and \"{}\" to \"{}\".",MySQLGuacamoleProperties.MYSQL_DISALLOW_SIMULTANEOUS_CONNECTIONS.getName(),disallowSimultaneous,MySQLGuacamoleProperties.MYSQL_DEFAULT_MAX_CONNECTIONS.getName(),DEFAULT_MAX_CONNECTIONS,MySQLGuacamoleProperties.MYSQL_DEFAULT_MAX_GROUP_CONNECTIONS.getName(),DEFAULT_MAX_GROUP_CONNECTIONS);  }  if (disallowDuplicate != null) {    if (disallowDuplicate) {      DEFAULT_MAX_CONNECTIONS_PER_USER=1;      DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER=1;    } else {      DEFAULT_MAX_CONNECTIONS_PER_USER=0;      DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER=0;    }    logger.warn("The \"{}\" property is deprecated. Use \"{}\" and \"{}\" instead.",MySQLGuacamoleProperties.MYSQL_DISALLOW_DUPLICATE_CONNECTIONS.getName(),MySQLGuacamoleProperties.MYSQL_DEFAULT_MAX_CONNECTIONS_PER_USER.getName(),MySQLGuacamoleProperties.MYSQL_DEFAULT_MAX_GROUP_CONNECTIONS.getName());    logger.info("To achieve the same result of setting \"{}\" to \"{}\", set \"{}\" to \"{}\" and \"{}\" to \"{}\".",MySQLGuacamoleProperties.MYSQL_DISALLOW_DUPLICATE_CONNECTIONS.getName(),disallowDuplicate,MySQLGuacamoleProperties.MYSQL_DEFAULT_MAX_CONNECTIONS_PER_USER.getName(),DEFAULT_MAX_CONNECTIONS_PER_USER,MySQLGuacamoleProperties.MYSQL_DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER.getName(),DEFAULT_MAX_GROUP_CONNECTIONS_PER_USER);  }}  }
class C{  public static void createJavaProject(SWTWorkbenchBot bot,String projectName){  bot.perspectiveById("org.eclipse.jdt.ui.JavaPerspective").activate();  bot.menu("File").menu("New").menu("Project...").click();  SWTBotTree projectSelectionTree=bot.tree();  SWTBotTreeItem projectSelectionGoogleTreeItem=SwtBotTreeActions.getUniqueTreeItem(bot,projectSelectionTree,"Java","Java Project");  SwtBotTreeActions.selectTreeItem(bot,projectSelectionGoogleTreeItem,"Java Project");  bot.button("Next >").click();  bot.textWithLabel("Project name:").setText(projectName);  SwtBotUtils.clickButtonAndWaitForWindowChange(bot,bot.button("Finish"));}  }
class C{  public InflaterInputStream(InputStream in,Inflater inf,int size){  super(in);  if (in == null || inf == null) {    throw new NullPointerException();  } else   if (size <= 0) {    throw new IllegalArgumentException("buffer size <= 0");  }  this.inf=inf;  buf=new byte[size];}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.REACTION_EFFECT__ACTIONS:    return actions != null && !actions.isEmpty();}return super.eIsSet(featureID);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Deprecated public boolean isExceptionSummaryEnabled(){  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public final void add(int bagIndex,double[] counts){  double sum=Utils.sum(counts);  for (int i=0; i < counts.length; i++) {    m_perClassPerBag[bagIndex][i]+=counts[i];  }  m_perBag[bagIndex]=m_perBag[bagIndex] + sum;  for (int i=0; i < counts.length; i++) {    m_perClass[i]=m_perClass[i] + counts[i];  }  totaL=totaL + sum;}  }
class C{  public static void matchStorageSystemPoolsToVPools(URI storageSystemURI,DbClient dbClient,CoordinatorClient coordinator,StringBuffer errorMessage){  URIQueryResultList storagePoolURIs=new URIQueryResultList();  dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceStoragePoolConstraint(storageSystemURI),storagePoolURIs);  List<StoragePool> storagePools=new ArrayList<StoragePool>();  while (storagePoolURIs.iterator().hasNext()) {    URI storagePoolURI=storagePoolURIs.iterator().next();    StoragePool storagePool=dbClient.queryObject(StoragePool.class,storagePoolURI);    if (storagePool != null && !storagePool.getInactive()) {      storagePools.add(storagePool);    }  }  ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVirtualPool(storagePools,dbClient,coordinator,errorMessage);}  }
class C{  public void addGenericType(String genericName,String type){  m_genericTypes.put(genericName,type);}  }
class C{  protected void assertFuncEquals(final String... inputs) throws Exception {  SolrQueryRequest req=req();  try {    assertFuncEquals(req,inputs);  }  finally {    req.close();  }}  }
class C{  public static int methodModifiers(){  return PUBLIC | PROTECTED | PRIVATE| ABSTRACT| STATIC| FINAL| SYNCHRONIZED| NATIVE| STRICT;}  }
class C{  @Override public Class<?> loadClass(String name) throws ClassNotFoundException {  String simulation="assets/toast/patches/" + name.replace(".","/") + ".sim";  String patch="assets/toast/patches/" + name.replace(".","/") + ".pat";  InputStream stream=null;  if (this.getResource(simulation) != null)   stream=this.getResourceAsStream(simulation);  if (this.getResource(patch) != null)   stream=this.getResourceAsStream(patch);  if (stream != null) {    try {      byte[] buf=new byte[50000];      int len=stream.read(buf);      Method m=ClassLoader.class.getDeclaredMethod("defineClass",String.class,byte[].class,int.class,int.class);      m.setAccessible(true);      m.invoke(getParent(),name,buf,0,len);    } catch (    Exception e) {      ToastBootstrap.toastLogger.error("Could not load Patch: " + name);      ToastBootstrap.toastLogger.exception(e);    }  }  return super.loadClass(name);}  }
class C{  protected ShaderVar addUniform(IGlobalShaderVar var,String suffix){  return addUniform(var.getVarString() + suffix,var.getDataType());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void clear(){  xpathStr=null;  xpath=null;  context=null;}  }
class C{  public boolean isIgnoringEvents(){  return distracted.isIgnoringEvents();}  }
class C{  @NotNull public static String capitalize(@NotNull String s){  return s.isEmpty() ? s : (toUpperCase(s.charAt(0)) + s.substring(1));}  }
class C{  private RefactoringHistoryService(){}  }
class C{  public Quaternionf rotationTo(Vector3fc fromDir,Vector3fc toDir){  return rotationTo(fromDir.x(),fromDir.y(),fromDir.z(),toDir.x(),toDir.y(),toDir.z());}  }
class C{  public DateHistogramBuilder extendedBounds(DateTime min,DateTime max){  extendedBoundsMin=min;  extendedBoundsMax=max;  return this;}  }
class C{  private View makeAndAddView(int position,int y,boolean flowDown,boolean selected){  View child;  onChildCreated(position,flowDown);  if (!mDataChanged) {    child=mRecycleBin.getActiveView(position);    if (child != null) {      setupChild(child,position,y,flowDown,selected,true);      return child;    }  }  child=obtainView(position,mIsScrap);  setupChild(child,position,y,flowDown,selected,mIsScrap[0]);  return child;}  }
class C{  public SnmpCounter(int v) throws IllegalArgumentException {  super(v);}  }
class C{  public void update(DataSource ds){synchronized (this) {    sequence.next();    this.setName(ds.getName());    this.setVendor(ds.getVendor());    this.setDataServiceName(ds.getDataServiceName());    this.setDriver(ds.getDriver());    this.setUrl(ds.getUrl());    this.setRole(ds.getRole());    this.setMasterConnectUri(ds.getMasterConnectUri());    this.setPrecedence(ds.getPrecedence());    this.setIsAvailable(ds.getIsAvailable());    this.setState(ds.getState());    this.setLastError(ds.getLastError());    this.setLastShunReason(ds.getLastShunReason());    this.setAppliedLatency(ds.getAppliedLatency());    this.setRelativeLatency(ds.getRelativeLatency());    this.setUpdateTimestamp(ds.getUpdateTimestamp());    this.setLastError(ds.getLastError());    this.setVipAddress(ds.getVipAddress());    this.setVipInterface(ds.getVipInterface());    this.setVipIsBound(ds.getVipIsBound());    this.setLastUpdateToNow();    this.notifyAll();  }}  }
class C{  public boolean addAll(RoleList roleList) throws IndexOutOfBoundsException {  if (roleList == null) {    return true;  }  return (super.addAll(roleList));}  }
class C{  public ConfigurationException(){}  }
class C{  @Override public void run(){  amIActive=true;  boolean image1Bool=false;  boolean image2Bool=false;  double constant1=0;  double constant2=0;  if (args.length < 3) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader1=args[0];  File file=new File(inputHeader1);  image1Bool=file.exists();  if (image1Bool) {    constant1=-1;  } else {    constant1=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String inputHeader2=args[1];  file=new File(inputHeader2);  image2Bool=file.exists();  if (image2Bool) {    constant2=-1;  } else {    constant2=Double.parseDouble(file.getName().replace(".dep",""));  }  file=null;  String outputHeader=args[2];  if ((inputHeader1 == null) || (inputHeader2 == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1, z2;    int progress, oldProgress=-1;    double[] data1;    double[] data2;    if (image1Bool && image2Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData1=inputFile1.getNoDataValue();      double noData2=inputFile2.getNoDataValue();      if ((inputFile2.getNumberRows() != rows) || (inputFile2.getNumberColumns() != cols)) {        showFeedback("The input images must have the same dimensions and coordinates. Operation cancelled.");        return;      }      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData1);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          z2=data2[col];          if ((z1 != noData1) && (z2 != noData2)) {            if (z1 < z2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          } else {            outputFile.setValue(row,col,noData1);          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      inputFile2.close();      outputFile.close();    } else     if (image1Bool) {      WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader1,"r");      int rows=inputFile1.getNumberRows();      int cols=inputFile1.getNumberColumns();      double noData=inputFile1.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader1,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data1=inputFile1.getRowValues(row);        for (col=0; col < cols; col++) {          z1=data1[col];          if (z1 != noData) {            if (z1 < constant2) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile1.close();      outputFile.close();    } else     if (image2Bool) {      WhiteboxRaster inputFile2=new WhiteboxRaster(inputHeader2,"r");      int rows=inputFile2.getNumberRows();      int cols=inputFile2.getNumberColumns();      double noData=inputFile2.getNoDataValue();      WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader2,WhiteboxRaster.DataType.INTEGER,noData);      outputFile.setPreferredPalette("black_white.pal");      for (row=0; row < rows; row++) {        data2=inputFile2.getRowValues(row);        for (col=0; col < cols; col++) {          z2=data2[col];          if (z2 != noData) {            if (z2 < constant1) {              outputFile.setValue(row,col,1);            } else {              outputFile.setValue(row,col,0);            }          }        }        progress=(int)(100f * row / (rows - 1));        if (progress != oldProgress) {          oldProgress=progress;          updateProgress((int)progress);          if (cancelOp) {            cancelOperation();            return;          }        }      }      outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      outputFile.addMetadataEntry("Created on " + new Date());      inputFile2.close();      outputFile.close();    } else {      showFeedback("At least one of the inputs must be a raster image.");    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void displayApng(String uri,ImageView imageView,ApngConfig config,ApngListener apngListener){  super.displayImage(uri,imageView,new ApngImageLoadingListener(context,Uri.parse(uri),getAutoPlayHandler(config,apngListener)));}  }
class C{  public <T>void addRequest(Request<T> request){  getRequestQueue().add(request);}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key) throws SecurityException, SignatureException, InvalidKeyException {  try {    return generateX509Certificate(key,"BC",null);  } catch (  NoSuchProviderException e) {    throw new SecurityException("BC provider not installed!");  }}  }
class C{  public static List<ByteTreeItem> allNodes(VisualNode network){  if (!network.isNetwork()) {    return new ArrayList<>();  }  return network.getChildren().stream().map(null).collect(Collectors.toList());}  }
class C{  public static <T extends Comparable<? super T>>ArrayList<T> sortThis(ArrayList<T> list){  return ArrayListIterate.sortThis(list,Comparators.naturalOrder());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:15.189 -0400",hash_original_method="7269E5EC16B8883F661BF745CCC5E6A6",hash_generated_method="7C73EA5F97430D41993A3887856C70A2") private Node addWaiter(Node mode){  Node node=new Node(Thread.currentThread(),mode);  Node pred=tail;  if (pred != null) {    node.prev=pred;    if (compareAndSetTail(pred,node)) {      pred.next=node;      return node;    }  }  enq(node);  return node;}  }
class C{  public void addMapConfiguration(String mapeventTypeName,ConfigurationEventTypeMap config){  mapTypeConfigurations.put(mapeventTypeName,config);}  }
class C{  public static void unset(String option){  if (table == null)   return;  table.remove(option.toLowerCase());}  }
class C{  protected void attachManagedResource(ManagedResource res,String path,Router router){  router.attach(path,res.getServerResourceClass());  log.info("Attached managed resource at path: {}",path);  if (ManagedResource.ChildResourceSupport.class.isAssignableFrom(res.getClass())) {    router.attach(path + "/{child}",res.getServerResourceClass());  }}  }
class C{  public static byte[] uintTo4Bytes(int value){  return new byte[]{uintToByte(value & 0xff),uintToByte(value >> 8),uintToByte(value >> 16),uintToByte(value >> 24)};}  }
class C{  public static String base32Encode(byte[] data){  Base32 encoder=new Base32();  return new String(encoder.encode(data)).replace("\r\n","");}  }
class C{  public DesktopProperty(String key,Object fallback){  this.key=key;  this.fallback=fallback;  flushUnreferencedProperties();}  }
class C{  public long remove(K key){  long prev=0;  int index=index(key);  if (index >= 0) {    prev=_values[index];    removeAt(index);  }  return prev;}  }
class C{  public UserFeed retrievePageOfUsers(String startUsername) throws AppsForYourDomainException, ServiceException, IOException {  LOGGER.log(Level.INFO,"Retrieving one page of users" + (startUsername != null ? " starting at " + startUsername : "") + ".");  URL retrieveUrl=new URL(domainUrlBase + "user/" + SERVICE_VERSION+ "/");  AppsForYourDomainQuery query=new AppsForYourDomainQuery(retrieveUrl);  query.setStartUsername(startUsername);  return userService.query(query,UserFeed.class);}  }
class C{  private void checkViews(SchemaObject sourceTable,SchemaObject newTable){  String sourceTableName=sourceTable.getName();  String newTableName=newTable.getName();  Database db=sourceTable.getDatabase();  String temp=db.getTempTableName(sourceTableName,session);  db.renameSchemaObject(session,sourceTable,temp);  try {    db.renameSchemaObject(session,newTable,sourceTableName);    checkViewsAreValid(sourceTable);  }  finally {    try {      db.renameSchemaObject(session,newTable,newTableName);    }  finally {      db.renameSchemaObject(session,sourceTable,sourceTableName);    }  }}  }
class C{  private boolean checkApkVersion(String networkVersion){  UpgradeInfoApk networkApkInfo=new UpgradeInfoApk(networkVersion);  if (!networkApkInfo.isLegal()) {    return false;  }  long networkApkVersionValue=networkApkInfo.getVersionValue();  String localVersion=mApplication.getVersionName();  UpgradeInfoApk localApkInfo=new UpgradeInfoApk(localVersion);  long localApkVersionValue;  if (localApkInfo.isLegal()) {    localApkVersionValue=localApkInfo.getVersionValue();  } else {    localApkVersionValue=0;  }  log.info("network apk version value = " + networkApkVersionValue);  log.info("local apk version value = " + localApkVersionValue);  return (localApkVersionValue < networkApkVersionValue);}  }
class C{  @Override public GenericData clone(){  try {    @SuppressWarnings("unchecked") GenericData result=(GenericData)super.clone();    Data.deepCopy(this,result);    result.unknownFields=Data.clone(unknownFields);    return result;  } catch (  CloneNotSupportedException e) {    throw new IllegalStateException(e);  }}  }
class C{  public TimeValue totalTime(){  return new TimeValue(totalTimeInMillis);}  }
class C{  private boolean isSubtypeOf(TypeRef left,TypeRef right,Variance variance){  final Pair<String,Pair<TypeRef,TypeRef>> key=Pair.of(RuleEnvironmentExtensions.GUARD_REDUCER_IS_SUBTYPE_OF,Pair.of(left,right));  if (G.get(key) != null) {    return true;  }  final RuleEnvironment G2=RuleEnvironmentExtensions.wrap(G);  G2.add(key,Boolean.TRUE);switch (variance) {case CO:    return ts.subtypeSucceeded(G2,left,right);case CONTRA:  return ts.subtypeSucceeded(G2,right,left);case INV:return ts.equaltypeSucceeded(G2,left,right);}throw new IllegalStateException("unreachable");}  }
class C{  public SparseSelect(final long[] bits,final long length){  this(LongArrayBitVector.wrap(bits,length));}  }
class C{  public void testCompareToPosPos1(){  byte aBytes[]={12,56,100,-2,-76,89,45,91,3,-15,35,26,3,91};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  assertEquals(1,aNumber.compareTo(bNumber));}  }
class C{  public void initOptions(){}  }
class C{  public Matrix4f assumePerspective(){  this._properties(PROPERTY_PERSPECTIVE);  return this;}  }
class C{  public static void delete(@As(",") String[] ids){  delete(uris(ids));}  }
class C{  public static IndexType createUnique(boolean hash){  IndexType type=new IndexType();  type.unique=true;  type.hash=hash;  return type;}  }
class C{  public void endPrefixMapping(String prefix) throws org.xml.sax.SAXException {}  }
class C{  public void initForClient(){  if (typeFactory != null) {    throw new IllegalStateException("Type factory instance already exists. This is not expected for the client!");  }  if (url == null) {    throw new IllegalStateException("Property 'url' is not set. This is not expected for the client!");  }  LOG.debug("Initializing client's HitroUI framework");  initForClientImpl(url,resolverFactory);}  }
class C{  @Override protected void emit_aload_resolved_getfield(int index,FieldReference fieldRef){  try {    Offset offset=localOffset(index);    TypeReference fieldType=fieldRef.getFieldContentsType();    RVMField field=fieldRef.peekResolvedField();    Offset fieldOffset=field.getOffset();    if (field.isReferenceType()) {      if (NEEDS_OBJECT_GETFIELD_BARRIER && !field.isUntraced()) {        emit_regular_aload(index);        Barriers.compileGetfieldBarrierImm(asm,fieldOffset,fieldRef.getId());      } else {        stackMoveHelper(S0,offset);        asm.emitPUSH_RegDisp(S0,fieldOffset);      }    } else     if (fieldType.isBooleanType()) {      stackMoveHelper(S0,offset);      asm.emitMOVZX_Reg_RegDisp_Byte(T0,S0,fieldOffset);      asm.emitPUSH_Reg(T0);    } else     if (fieldType.isByteType()) {      stackMoveHelper(S0,offset);      asm.emitMOVSX_Reg_RegDisp_Byte(T0,S0,fieldOffset);      asm.emitPUSH_Reg(T0);    } else     if (fieldType.isShortType()) {      stackMoveHelper(S0,offset);      asm.emitMOVSX_Reg_RegDisp_Word(T0,S0,fieldOffset);      asm.emitPUSH_Reg(T0);    } else     if (fieldType.isCharType()) {      stackMoveHelper(S0,offset);      asm.emitMOVZX_Reg_RegDisp_Word(T0,S0,fieldOffset);      asm.emitPUSH_Reg(T0);    } else     if (fieldType.isIntType() || fieldType.isFloatType() || (VM.BuildFor32Addr && fieldType.isWordType())) {      stackMoveHelper(S0,offset);      if (VM.BuildFor32Addr) {        asm.emitPUSH_RegDisp(S0,fieldOffset);      } else {        asm.emitMOV_Reg_RegDisp(T0,S0,fieldOffset);        asm.emitPUSH_Reg(T0);      }    } else {      if (VM.VerifyAssertions) {        VM._assert(fieldType.isLongType() || fieldType.isDoubleType() || (VM.BuildFor64Addr && fieldType.isWordType()));      }      stackMoveHelper(S0,offset);      if (VM.BuildFor32Addr && field.isVolatile()) {        adjustStack(-2 * WORDSIZE,true);        if (SSE2_BASE) {          asm.emitMOVQ_Reg_RegDisp(XMM0,S0,fieldOffset);          asm.emitMOVQ_RegInd_Reg(SP,XMM0);        } else {          asm.emitFLD_Reg_RegDisp_Quad(FP0,S0,fieldOffset);          asm.emitFSTP_RegInd_Reg_Quad(SP,FP0);        }      } else       if (VM.BuildFor32Addr && !field.isVolatile()) {        asm.emitPUSH_RegDisp(S0,fieldOffset.plus(ONE_SLOT));        asm.emitPUSH_RegDisp(S0,fieldOffset);      } else {        if (!fieldType.isWordType()) {          adjustStack(-WORDSIZE,true);        }        asm.emitPUSH_RegDisp(S0,fieldOffset);      }    }  } catch (  UnreachableBytecodeException e) {    asm.emitINT_Imm(TRAP_UNREACHABLE_BYTECODE + RVM_TRAP_BASE);  }}  }
class C{  @Override public String toString(){  return "(" + x + ", "+ y+ ")";}  }
class C{  @Override public void trainOnInstance(Instance inst){  int classIndex=(int)inst.classValue();  Double weight=this.classInstances.get(classIndex);  if (weight == null)   weight=0.;  this.classInstances.put(classIndex,weight + inst.weight());  Double classPrototype=this.classPrototypes.get(classIndex);  if (classPrototype == null)   classPrototype=1.;  for (int attributePosition=0; attributePosition < inst.numAttributes(); attributePosition++) {    int attributeID=inst.index(attributePosition);    if (attributeID == inst.classIndex())     continue;    GaussianNumericAttributeClassObserver obs=this.attributeObservers.get(attributeID);    if (obs == null) {      obs=new GaussianNumericAttributeClassObserver();      this.attributeObservers.put(attributeID,obs);    }    GaussianEstimator obs_estimator=obs.getEstimator(classIndex);    if (obs_estimator != null) {      double probDens_zero_current=obs_estimator.probabilityDensity(0);      classPrototype-=probDens_zero_current;    }    obs.observeAttributeClass(inst.valueSparse(attributePosition),(int)inst.classValue(),inst.weight());    obs_estimator=obs.getEstimator(classIndex);    double probDens_zero_updated=obs_estimator.probabilityDensity(0);    classPrototype+=probDens_zero_updated;  }  this.classPrototypes.put(classIndex,classPrototype);  this.instancesSeen++;}  }
class C{  public boolean isIndependent(Node xVar,Node yVar,List<Node> zList){  if (zList == null) {    throw new NullPointerException();  }  for (  Node node : zList) {    if (node == null) {      throw new NullPointerException();    }  }  TetradVector v1, v2;  try {    List<Node> regressors=new ArrayList<>();    regressors.add(dataSet.getVariable(yVar.getName()));    for (    Node zVar : zList) {      regressors.add(dataSet.getVariable(zVar.getName()));    }    RegressionDataset regression=new RegressionDataset(dataSet);    RegressionResult result=regression.regress(xVar,regressors);    v1=result.getResiduals();    v2=regression.getResidualsWithoutFirstRegressor();  } catch (  Exception e) {    throw e;  }  List<Double> d1=new ArrayList<>();  for (int i=0; i < v1.size(); i++)   d1.add(v1.get(i));  List<Double> d2=new ArrayList<>();  double[] f2=new double[v2.size()];  for (int i=0; i < v2.size(); i++) {    d2.add(v2.get(i));    f2[i]=v2.get(i);  }  double sd=StatUtils.sd(f2);  RealDistribution c2=new NormalDistribution(0,sd);  GeneralAndersonDarlingTest test=new GeneralAndersonDarlingTest(d1,c2);  double aSquaredStar=test.getASquaredStar();  System.out.println("A squared star = " + aSquaredStar + " p = "+ test.getP());  double p=test.getP();  double aa2=1 - tanh(aSquaredStar);  boolean independent=p > alpha;  this.pvalue=aa2;  if (verbose) {    if (independent) {      TetradLogger.getInstance().log("independencies",SearchLogUtils.independenceFactMsg(xVar,yVar,zList,0.));    } else {      TetradLogger.getInstance().log("dependencies",SearchLogUtils.dependenceFactMsg(xVar,yVar,zList,0.));    }  }  return independent;}  }
class C{  public synchronized boolean startReindexer(String name,boolean force) throws ReindexerAlreadyRunningException {  OnlineReindexer<?,?,?> reindexer=reindexers.get(name);  validateReindexerNotRunning(reindexer);  if (force || !isCurrentIndexVersionLatest(name,reindexer)) {    reindexer.start();    return true;  }  return false;}  }
class C{  public boolean popChildFragmentManagerBackstack(){  if (getChildFragmentManager().getBackStackEntryCount() > 0) {    displayImageListFragment(mImageListRetainedState);    return true;  }  return false;}  }
class C{  public SigmoidKernel(double alpha,double C){  this.alpha=alpha;  this.c=C;}  }
class C{  public static void printState(TLCState currentState,int num){  MP.printState(EC.TLC_STATE_PRINT1,new String[]{String.valueOf(num),currentState.toString()},currentState,num);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CurrentProjectChangedEvent(Project project){  this.project=project;}  }
class C{  public void printAll(){  for (  Map.Entry<String,Object> entry : mValues.entrySet()) {    Object value=entry.getValue();    String toPrint=value.toString();    if (value.getClass().isArray()) {      if (value instanceof boolean[])       toPrint=Arrays.toString((boolean[])value); else       if (value instanceof int[])       toPrint=Arrays.toString((int[])value); else       if (value instanceof long[])       toPrint=Arrays.toString((long[])value); else       if (value instanceof float[])       toPrint=Arrays.toString((float[])value); else       if (value instanceof double[])       toPrint=Arrays.toString((double[])value); else       if (value instanceof String[])       toPrint=Arrays.toString((String[])value); else       if (value instanceof short[])       toPrint=Arrays.toString((short[])value); else       if (value instanceof byte[])       toPrint=Arrays.toString((byte[])value); else       if (value instanceof char[])       toPrint=Arrays.toString((char[])value);    }    Log.d(TAG,"key = " + entry.getKey() + ", value = "+ toPrint);  }}  }
class C{  public static void wtf(String tag,String msg,Throwable tr){  println(ASSERT,tag,msg,tr);}  }
class C{  public void attrAdded(Attr node,String newv){  if (!changing && baseVal != null) {    baseVal.invalidate();  }  fireBaseAttributeListeners();  if (!hasAnimVal) {    fireAnimatedAttributeListeners();  }}  }
class C{  public String asString(){  String result=html;  List<Extractor> extractors=extractorsMap.get(DEFAULT_FIELD);  if (extractors == null) {    if (htmlList != null) {      result=asMapList().toString();    } else {      result=asMap().toString();    }  } else {    for (    Extractor extractor : extractors) {      result=extractor.extract(result);    }    result=filterBefore(result);    result=filter(DEFAULT_FIELD,result);    result=filterAfter(result);  }  return result;}  }
class C{  final public void enable_tracing(){}  }
class C{  public void testSequenceCommand() throws Throwable {  ServerStateMachineContext context=mock(ServerStateMachineContext.class);  ServerSessionContext session=new ServerSessionContext(10,UUID.randomUUID(),mock(Log.class),context,1000);  assertEquals(session.getRequestSequence(),0);  AtomicBoolean complete=new AtomicBoolean();  session.registerRequest(2,null);  assertFalse(complete.get());  session.setRequestSequence(1);  assertTrue(complete.get());}  }
class C{  public static void cancel(Object tag){  ANRequestQueue.getInstance().cancelRequestWithGivenTag(tag,false);}  }
class C{  public void fullFrame(int offsetDelta,int[] localTags,int[] localData,int[] stackTags,int[] stackData){  numOfEntries++;  output.write(255);  write16(offsetDelta);  int n=localTags.length;  write16(n);  for (int i=0; i < n; i++)   writeTypeInfo(localTags[i],localData[i]);  n=stackTags.length;  write16(n);  for (int i=0; i < n; i++)   writeTypeInfo(stackTags[i],stackData[i]);}  }
class C{  public void testImportInnerClass() throws Exception {  runPythonTest(new SkeletonTestTask("dotNet/expected.skeleton.Deep.py","SingleNameSpace.Some.Deep","inner_class.py",null));}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{alertId}/notifications") @Description("Deletes all notifications for the given alert ID. Associated triggers are not deleted from the alert.") public Response deleteAllNotificationsByAlertId(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert != null) {    validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));    alert.setNotifications(new ArrayList<Notification>(0));    alert.setModifiedBy(getRemoteUser(req));    alertService.updateAlert(alert);    return Response.status(Status.OK).build();  }  throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);}  }
class C{  public final boolean removeIP(String ip){  String ipx=Domains.chopZoneID(this.dna.get(Seed.IP));  Set<String> ip6s=getIPv6Entries();  if (ip6s == null || ip6s.size() == 0) {    if (ipx != null && !ipx.isEmpty() && ipx.equals(ip)) {      this.dna.put(Seed.IP,"");      return true;    }    return false;  }  if (ip6s != null && ip6s.contains(ip)) {    ip6s.remove(ip);    this.dna.put(Seed.IP6,MapTools.set2string(ip6s,"|",false));    return true;  }  if (ipx != null && !ipx.isEmpty() && ipx.equals(ip)) {    ipx=ip6s.iterator().next();    this.dna.put(Seed.IP,Domains.chopZoneID(ipx));    ip6s.remove(ipx);    this.dna.put(Seed.IP6,MapTools.set2string(ip6s,"|",false));    return true;  }  return false;}  }
class C{  public void timingEvent(float fraction){  long currentTime=System.nanoTime() / 1000000;  long elapsedTime=currentTime - startTime;  float realFraction=(float)elapsedTime / DURATION;  System.out.println(realFraction + "\t" + fraction);}  }
class C{  public MalformedCookieException(String message){  super(message);}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  private void onBindViewHolder(TagItemConstantViewHolder holder,int position){  final TagItem tagItem=tagItemList.get(position);  holder.getTextViewKey().setText(ParserManager.parseTagName(tagItem.getKey()));  holder.getTextViewValue().setText(tagItem.getValue());}  }
class C{  public boolean isSetString_thing(){  return this.string_thing != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:36.161 -0500",hash_original_method="6B12CEFAA1DE3FB86CA989F7EF7D159A",hash_generated_method="6FE183EFECC3E132BBD8E2651D9788EC") public void close(){  releaseReference();}  }
class C{  private void doClients() throws Exception {  String curArg=null;  boolean json=false;  while (argvIterator.hasNext()) {    curArg=argvIterator.next();    if ("-json".equals(curArg))     json=true;  }  if (json)   println("["); else   println("Processing clients command...");  OpenReplicatorManagerMBean mbean=getOpenReplicator();  List<Map<String,String>> clients=mbean.getClients();  if (clients != null) {    int propIdx=0;    for (    Map<String,String> client : clients) {      if (json) {        if (propIdx > 0)         println(",");        printPropertiesJSON(client,propIdx);      } else {        println(String.format("%s:%s",client.get(ProtocolParams.RMI_HOST),client.get(ProtocolParams.RMI_PORT)));      }      propIdx++;    }  } else   fatal("No clients found. Maybe unsupported Replicator plugin?",null);  if (json)   println("\n]"); else   println("Finished clients command...");}  }
class C{  @NotNull @ObjectiveCName("requestGetOAuthParamsCommand") public Command<AuthState> requestGetOAuthParams(){  return modules.getAuthModule().requestGetOAuth2Params();}  }
class C{  public boolean isAlteration(){  return isAlteration;}  }
class C{  @Override public final R visitExecutable(AnnotatedExecutableType type,P p){  defaultAction(type,p);  return super.visitExecutable(type,p);}  }
class C{  public AuthorityKeyIdentifier(byte[] keyIdentifier,GeneralNames name,BigInteger serialNumber){  this.keyidentifier=new DEROctetString(keyIdentifier);  this.certissuer=GeneralNames.getInstance(name.toASN1Primitive());  this.certserno=new ASN1Integer(serialNumber);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addCovering(MapTile me){  covering.add(me);  setVisible(true);}  }
class C{  private double pseudoRandom(final long seed,int input){  final long mult=0x5DEECE66DL;  final long add=0xBL;  final long mask=(1L << 48) - 1;  final long i1=(input ^ seed ^ mult) & mask;  final long i2=(input ^ (seed >>> 16) ^ mult) & mask;  final long l1=(i1 * mult + add) & mask;  final long l2=(i2 * mult + add) & mask;  final int r1=(int)(l1 >>> 22);  final int r2=(int)(l2 >>> 21);  double random=((((long)r1) << 27) + r2) / (double)(1L << 53);  return random;}  }
class C{  protected void reverseAuthorizations(final String orderNum){  if (getPaymentGateway().getPaymentGatewayFeatures().isSupportReverseAuthorization()) {    final List<CustomerOrderPayment> paymentsToRevAuth=determineOpenAuthorisations(orderNum,null);    for (    CustomerOrderPayment customerOrderPayment : paymentsToRevAuth) {      Payment payment=new PaymentImpl();      BeanUtils.copyProperties(customerOrderPayment,payment);      String paymentResult=null;      try {        payment=getPaymentGateway().reverseAuthorization(payment);        paymentResult=payment.getPaymentProcessorResult();      } catch (      Throwable th) {        paymentResult=Payment.PAYMENT_STATUS_FAILED;        payment.setPaymentProcessorResult(Payment.PAYMENT_STATUS_FAILED);        payment.setPaymentProcessorBatchSettlement(false);        payment.setTransactionOperationResultMessage(th.getMessage());      } finally {        final CustomerOrderPayment authReversedOrderPayment=new CustomerOrderPaymentEntity();        BeanUtils.copyProperties(payment,authReversedOrderPayment);        authReversedOrderPayment.setPaymentProcessorResult(paymentResult);        authReversedOrderPayment.setShopCode(customerOrderPayment.getShopCode());        customerOrderPaymentService.create(authReversedOrderPayment);      }    }  }}  }
class C{  public void putUserInformation(String message,String status){  createUserIfNull();  userEntity.setProperty("jobStatus",status);  userEntity.setProperty("message",message);  service.put(userEntity);}  }
class C{  @Inline private void internalMarkObject(ObjectReference object,boolean nurseryObject){  Address cell=VM.objectModel.objectStartRef(object);  Address node=Treadmill.midPayloadToNode(cell);  treadmill.copy(node,nurseryObject);}  }
class C{  public void validateVarEntryId(SnmpOid rowOid,long var,Object data) throws SnmpStatusException {  node.validateVarId(var,data);}  }
class C{  public BasicRecyclerAdapter(JsonArray jsonArray){  jarr=jsonArray;}  }
class C{  public static int ENOPKG(){  return 65;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case EipPackage.SERVICE_INVOCATION__CONTEXT:    return CONTEXT_EDEFAULT == null ? context != null : !CONTEXT_EDEFAULT.equals(context);case EipPackage.SERVICE_INVOCATION__OPERATION_NAME:  return OPERATION_NAME_EDEFAULT == null ? operationName != null : !OPERATION_NAME_EDEFAULT.equals(operationName);case EipPackage.SERVICE_INVOCATION__SERVICE_REF:return serviceRef != null;}return super.eIsSet(featureID);}  }
class C{  private void cancelExistingAnimation(final int hashCode){  Animator animator=mAnimators.get(hashCode);  if (animator != null)   animator.end();}  }
class C{  public void deleteAttributes(){  ListSelectorDialog dialog;  ArffSortedTableModel model;  Object[] atts;  int[] indices;  int i;  JList list;  int result;  list=new JList(getAttributes());  dialog=new ListSelectorDialog(null,list);  result=dialog.showDialog();  if (result != ListSelectorDialog.APPROVE_OPTION) {    return;  }  atts=list.getSelectedValues();  if (ComponentHelper.showMessageBox(getParent(),"Confirm...","Do you really want to delete these " + atts.length + " attributes?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE) != JOptionPane.YES_OPTION) {    return;  }  model=(ArffSortedTableModel)m_TableArff.getModel();  indices=new int[atts.length];  for (i=0; i < atts.length; i++) {    indices[i]=model.getAttributeColumn(atts[i].toString());  }  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  model.deleteAttributes(indices);  setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));}  }
class C{  private void assembleElements(Model model,Order order) throws Exception {  for (  String value : order.elements()) {    Expression path=builder.build(value);    if (path.isAttribute()) {      throw new PathException("Ordered element '%s' references an attribute in %s",path,detail);    }    registerElements(model,path);  }}  }
class C{  public void completeTx(SendRequest req,boolean sign) throws InsufficientMoneyException {  lock.lock();  try {    checkArgument(!req.completed,"Given SendRequest has already been completed.");    BigInteger value=BigInteger.ZERO;    for (    TransactionOutput output : req.tx.getOutputs()) {      value=value.add(output.getValue());    }    BigInteger totalOutput=value;    log.info("Completing send tx with {} outputs totalling {} satoshis (not including fees)",req.tx.getOutputs().size(),value);    BigInteger totalInput=BigInteger.ZERO;    for (    TransactionInput input : req.tx.getInputs())     if (input.getConnectedOutput() != null)     totalInput=totalInput.add(input.getConnectedOutput().getValue()); else     log.warn("SendRequest transaction already has inputs but we don't know how much they are worth - they will be added to fee.");    value=value.subtract(totalInput);    List<TransactionInput> originalInputs=new ArrayList<TransactionInput>(req.tx.getInputs());    boolean needAtLeastReferenceFee=false;    if (req.ensureMinRequiredFee && !req.emptyWallet) {      for (      TransactionOutput output : req.tx.getOutputs())       if (output.getValue().compareTo(Utils.CENT) < 0) {        if (output.getValue().compareTo(output.getMinNonDustValue()) < 0)         throw new IllegalArgumentException("Tried to send dust with ensureMinRequiredFee set - no way to complete this");        needAtLeastReferenceFee=true;        break;      }    }    LinkedList<TransactionOutput> candidates=calculateAllSpendCandidates(true);    CoinSelection bestCoinSelection;    TransactionOutput bestChangeOutput=null;    if (!req.emptyWallet) {      FeeCalculation feeCalculation;      feeCalculation=new FeeCalculation(req,value,originalInputs,needAtLeastReferenceFee,candidates);      bestCoinSelection=feeCalculation.bestCoinSelection;      bestChangeOutput=feeCalculation.bestChangeOutput;    } else {      checkState(req.tx.getOutputs().size() == 1,"Empty wallet TX must have a single output only.");      CoinSelector selector=req.coinSelector == null ? coinSelector : req.coinSelector;      bestCoinSelection=selector.select(NetworkParameters.MAX_MONEY,candidates);      req.tx.getOutput(0).setValue(bestCoinSelection.valueGathered);      totalOutput=bestCoinSelection.valueGathered;    }    for (    TransactionOutput output : bestCoinSelection.gathered)     req.tx.addInput(output);    if (req.ensureMinRequiredFee && req.emptyWallet) {      final BigInteger baseFee=req.fee == null ? BigInteger.ZERO : req.fee;      final BigInteger feePerKb=req.feePerKb == null ? BigInteger.ZERO : req.feePerKb;      Transaction tx=req.tx;      if (!adjustOutputDownwardsForFee(tx,bestCoinSelection,baseFee,feePerKb))       throw new InsufficientMoneyException.CouldNotAdjustDownwards();    }    totalInput=totalInput.add(bestCoinSelection.valueGathered);    if (bestChangeOutput != null) {      req.tx.addOutput(bestChangeOutput);      totalOutput=totalOutput.add(bestChangeOutput.getValue());      log.info("  with {} coins change",bitcoinValueToFriendlyString(bestChangeOutput.getValue()));    }    final BigInteger calculatedFee=totalInput.subtract(totalOutput);    if (calculatedFee.compareTo(BigInteger.ZERO) > 0) {      log.info("  with a fee of {}",bitcoinValueToFriendlyString(calculatedFee));    }    if (sign) {      sign(req);    }    int size=req.tx.bitcoinSerialize().length;    if (size > Transaction.MAX_STANDARD_TX_SIZE) {      throw new IllegalArgumentException(String.format("Transaction could not be created without exceeding max size: %d vs %d",size,Transaction.MAX_STANDARD_TX_SIZE));    }    req.tx.getConfidence().setSource(TransactionConfidence.Source.SELF);    req.tx.setUpdateTime(new Date());    req.tx.setPurpose(Transaction.Purpose.USER_PAYMENT);    req.completed=true;    req.fee=calculatedFee;    log.info("  completed: {}",req.tx);  }  finally {    lock.unlock();  }}  }
class C{  public void testRecognizeBlockedUDP() throws Exception {  StunDiscoveryReport expectedReturn=new StunDiscoveryReport();  expectedReturn.setNatType(StunDiscoveryReport.UDP_BLOCKING_FIREWALL);  expectedReturn.setPublicAddress(null);  StunDiscoveryReport actualReturn=stunAddressDiscoverer.determineAddress();  assertEquals("The StunAddressDiscoverer failed for a " + "no-udp environment.",expectedReturn,actualReturn);}  }
class C{  @VisibleForTesting protected static State buildPatch(TaskState.TaskStage patchStage,@Nullable TaskState.SubStage patchSubStage,@Nullable Throwable t){  State patchState=new State();  patchState.taskState=new TaskState();  patchState.taskState.stage=patchStage;  patchState.taskState.subStage=patchSubStage;  if (null != t) {    patchState.taskState.failure=Utils.toServiceErrorResponse(t);  }  return patchState;}  }
class C{  public Rational(Rational r){  mNumerator=r.mNumerator;  mDenominator=r.mDenominator;}  }
class C{  @Override public void createControl(final Composite parent){  final Composite container=new Composite(parent,SWT.NULL);  final FormLayout formLayout=new FormLayout();  formLayout.marginHeight=FormHelper.MarginHeight();  formLayout.marginWidth=FormHelper.MarginWidth();  formLayout.spacing=FormHelper.Spacing();  container.setLayout(formLayout);  setControl(container);  final Label specifyTheVersionLabel=new Label(container,SWT.WRAP);  final FormData specifyTheVersionLabelData=new FormData();  specifyTheVersionLabelData.top=new FormAttachment(0,0);  specifyTheVersionLabelData.left=new FormAttachment(0,0);  specifyTheVersionLabel.setLayoutData(specifyTheVersionLabelData);  specifyTheVersionLabel.setText(Messages.getString("SelectMergeVersionWizardPage.ExplainMergeProcess"));  ControlSize.setCharWidthHint(specifyTheVersionLabel,MergeWizard.TEXT_CHARACTER_WIDTH);  version=new VersionPickerControl(container,SWT.NONE);  version.setRepository(((MergeWizard)getWizard()).getRepository());  version.setText(Messages.getString("SelectMergeVersionWizardPage.VersionTypeLabelText"));  final FormData versionData=new FormData();  versionData.top=new FormAttachment(specifyTheVersionLabel,FormHelper.ControlSpacing(),SWT.BOTTOM);  versionData.left=new FormAttachment(0,0);  versionData.right=new FormAttachment(100,0);  version.setLayoutData(versionData);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long x=getLong(stack);  return (x == 0) ? "" : Sage.tfjShort(x);}  }
class C{  public int editableProperties(){  return m_NumEditable;}  }
class C{  public synchronized void doHandshake(final NextFilter nextFilter){  LOGGER.debug(" doHandshake()");  writeRequest(nextFilter,request,((Integer)getSession().getAttribute(HANDSHAKE_STEP)).intValue());}  }
class C{  private static void hideTrayIcon(){  NotifyUserProxy.instance().hideTrayIcon();}  }
class C{  public AutoMixBucket restoreBucketFromId(final String id){  SharedPreferences prefs=getPrefs();  return new AutoMixBucket(prefs.getString(PREF_PREFIX_NAME + id,null),prefs.getString(PREF_PREFIX_STYLES + id,"").split(","),prefs.getString(PREF_PREFIX_MOODS + id,"").split(","),prefs.getBoolean(PREF_PREFIX_TASTE + id,false),prefs.getFloat(PREF_PREFIX_ADVENTUROUS + id,-1),prefs.getString(PREF_PREFIX_SONG_TYPES + id,"").split(","),prefs.getFloat(PREF_PREFIX_SPEECHINESS + id,-1),prefs.getFloat(PREF_PREFIX_ENERGY + id,-1),prefs.getFloat(PREF_PREFIX_FAMILIAR + id,-1),id);}  }
class C{  public static float convertPixelToDp(Context context,float px){  Resources resources=context.getResources();  DisplayMetrics metrics=resources.getDisplayMetrics();  return px / (metrics.densityDpi / 160f);}  }
class C{  public static byte[] decode(String data) throws CoderException {  byte[] array=new byte[data.length() * 3 / 4];  char[] block=new char[4];  int length=0;  data=data.trim();  final int len=data.length();  if (len == 0)   return new byte[0];  if (len % 4 != 0 || len < 4)   throw new CoderException("can't decode the the base64 input string" + printString(data) + ", because the input string has an invalid length");  for (int position=0; position < len; ) {    int p;    for (p=0; p < 4 && position < data.length(); position++) {      char c=data.charAt(position);      if (!Character.isWhitespace(c)) {        block[p]=c;        p++;      }    }    if (p == 0)     break;    int l=decodeGroup(block,array,length);    length+=l;    if (l < 3)     break;  }  return Arrays.copyOf(array,length);}  }
class C{  public T withIconTintingEnabled(boolean iconTintingEnabled){  this.iconTinted=iconTintingEnabled;  return (T)this;}  }
class C{  static SlideMode mapIntToValue(final int modeInt){  for (  SlideMode value : SlideMode.values()) {    if (modeInt == value.getIntValue()) {      return value;    }  }  return getDefault();}  }
class C{  private static boolean isYesterday(long date){  final Calendar currentDate=Calendar.getInstance();  currentDate.setTimeInMillis(date);  final Calendar yesterdayDate=Calendar.getInstance();  yesterdayDate.add(Calendar.DATE,-1);  return yesterdayDate.get(Calendar.YEAR) == currentDate.get(Calendar.YEAR) && yesterdayDate.get(Calendar.DAY_OF_YEAR) == currentDate.get(Calendar.DAY_OF_YEAR);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.720 -0500",hash_original_method="09C25F5735AB0754281F1FBF0B28F30D",hash_generated_method="09C25F5735AB0754281F1FBF0B28F30D") HttpsConnection(Context context,HttpHost host,HttpHost proxy,RequestFeeder requestFeeder){  super(context,host,requestFeeder);  mProxyHost=proxy;}  }
class C{  public org.yakindu.base.types.Type basicGetType(){  return type;}  }
class C{  protected SuperInterfacesIterable(TClass root,boolean ignoreSuperClassInterfaces){  this.root=root;  this.ignoreSuperClassInterfaces=ignoreSuperClassInterfaces;}  }
class C{  @Override public void processTuple(HashMap<String,T> tuple){  tableToDocument.clear();  BasicDBObject doc=null;  for (  Map.Entry<String,T> entry : tuple.entrySet()) {    String prop=entry.getKey();    String table=propTableMap.get(prop);    String column=propColumnMap.get(prop);    if ((doc=tableToDocument.get(table)) == null) {      doc=new BasicDBObject();      doc.put(column,entry.getValue());    } else {      doc.put(column,entry.getValue());    }    tableToDocument.put(table,doc);  }  processTupleCommon();}  }
class C{  public ExtractorWrapper(RawExtractor extractor){  this.extractor=extractor;  this.autoFilters.add(new EventMetadataFilter());  this.autoFilters.add(new HeartbeatFilter());  this.autoFilters.add(new ConsistencyCheckFilter());}  }
class C{  protected boolean isDebugEnabled(){  return trace.isDebugEnabled();}  }
class C{  public HistoryData clone(){  HistoryData result=new HistoryData();  result.DataValues=DataValues == null ? null : DataValues.clone();  return result;}  }
class C{  @Nullable @Override protected PlatformFutureUtils.Writer futureWriter(int opId){switch (opId) {case OP_WAIT_FOR_LOCAL:    return eventResWriter;case OP_REMOTE_QUERY:  return eventColResWriter;}return null;}  }
class C{  Operand popFloat(){  Operand r=pop();  if (VM.VerifyAssertions)   opt_assert(r.isFloat());  return r;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static public void print(Pageable pageable,String printerName,String jobName,int copies,boolean withDialog){  if (pageable == null)   return;  String name="Adempiere_";  if (jobName != null)   name+=jobName;  PrinterJob job=CPrinter.getPrinterJob(printerName);  job.setJobName(name);  job.setPageable(pageable);  HashPrintRequestAttributeSet prats=new HashPrintRequestAttributeSet();  prats.add(new Copies(copies));  if (pageable.getPageFormat(0).getOrientation() == PageFormat.PORTRAIT)   prats.add(OrientationRequested.PORTRAIT); else   prats.add(OrientationRequested.LANDSCAPE);  prats.add(new JobName(name,Language.getLoginLanguage().getLocale()));  prats.add(getJobPriority(pageable.getNumberOfPages(),copies,withDialog));  print(job,prats,withDialog,false);}  }
class C{  public static void register(){  XTIFFDescriptor odesc=new XTIFFDescriptor();  register(odesc);}  }
class C{  public PropertyTable showButtons(){  showButtons=true;  return rebuild();}  }
class C{  protected boolean useScroll(final Player player){  player.sendPrivateText("What a strange scroll! You can't make heads or tails of it.");  return false;}  }
class C{  public void testRewritePrefix() throws IOException {  Automaton pfx=Automata.makeString("do");  Automaton prefixAutomaton=Operations.concatenate(pfx,Automata.makeAnyString());  AutomatonQuery aq=new AutomatonQuery(newTerm("bogus"),prefixAutomaton);  assertEquals(3,automatonQueryNrHits(aq));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MCR");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  private static synchronized String nextThreadName(){  return ("RunQueueThread-" + tcount++);}  }
class C{  public Move makeMove(int startSquare,int endSquare) throws IllegalArgumentException {  Move move=null;  Move[] legals=getLegalMoves().asArray();  for (int i=0; move == null && i < legals.length; i++) {    Move candidate=legals[i];    if (candidate.getFrom() == startSquare && candidate.getTo() == endSquare) {      move=candidate;    }  }  if (move == null) {    throw new IllegalArgumentException("Invalid move: " + getSan(startSquare) + " "+ getSan(endSquare)+ " \n"+ toString());  } else {    forceMove(move);  }  return move;}  }
class C{  @Override public void rotate(float angle){  rotateImpl(angle,0,0,1);}  }
class C{  public boolean iAmTheOnlyOne(JmDNSImpl jmDNSImpl){  return false;}  }
class C{  public void writeTo(File file) throws IOException {  tree.writeTo(file);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4mfPackage.PROJECT_DEPENDENCY__VERSION_CONSTRAINT:    return versionConstraint != null;case N4mfPackage.PROJECT_DEPENDENCY__DECLARED_SCOPE:  return declaredScope != DECLARED_SCOPE_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public List<DetailsTable> createDetailComposites(DefaultData defaultData,RepositoryDefinition repositoryDefinition,Composite parent,FormToolkit toolkit){  DefaultData secondary=null;  if (defaultData instanceof InvocationSequenceData) {    InvocationSequenceData invocationSequenceData=(InvocationSequenceData)defaultData;    if (null != invocationSequenceData.getTimerData()) {      secondary=invocationSequenceData.getTimerData();    }    if (null != invocationSequenceData.getSqlStatementData()) {      secondary=invocationSequenceData.getSqlStatementData();    }    if (CollectionUtils.isNotEmpty(invocationSequenceData.getExceptionSensorDataObjects())) {      secondary=invocationSequenceData.getExceptionSensorDataObjects().get(0);    }    if (null != invocationSequenceData.getLoggingData()) {      secondary=invocationSequenceData.getLoggingData();    }  }  List<DetailsTable> result=new ArrayList<>();  for (  IDetailsGenerator generator : generators) {    if (generator.canGenerateFor(defaultData)) {      result.add(generator.generate(defaultData,repositoryDefinition,parent,toolkit));    } else     if ((null != secondary) && generator.canGenerateFor(secondary)) {      result.add(generator.generate(secondary,repositoryDefinition,parent,toolkit));    }  }  return result;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public void addToTags(String newTag){  if (StringUtils.isBlank(newTag)) {    return;  }  for (  String tag : tags) {    if (tag.equals(newTag)) {      return;    }  }  tags.add(newTag);  firePropertyChange(TAG,null,newTag);  firePropertyChange(TAGS_AS_STRING,null,newTag);}  }
class C{  private void checkDividerNoHasChildren(int divId) throws Exception {  FolderTokenDividers divs=null;  FolderTokenDocuments docs=null;  FolderTokenFdrLinks links=null;  int i;  boolean alsoRemoveChildren=false;  divs=getDividerChildren(divId,alsoRemoveChildren);  if (divs.count() > 0) {    throw new IeciTdException(FolderBaseError.EC_DIVIDER_HAS_CHILDREN,FolderBaseError.EM_DIVIDER_HAS_CHILDREN);  }  docs=getDocumentChildren(divId,alsoRemoveChildren);  if (docs.count() > 0) {    throw new IeciTdException(FolderBaseError.EC_DIVIDER_HAS_CHILDREN,FolderBaseError.EM_DIVIDER_HAS_CHILDREN);  }  links=getFolderLinkChildren(divId,alsoRemoveChildren);  if (links.count() > 0) {    throw new IeciTdException(FolderBaseError.EC_DIVIDER_HAS_CHILDREN,FolderBaseError.EM_DIVIDER_HAS_CHILDREN);  }}  }
class C{  public StandardFooter(final String id){  super(id);}  }
class C{  protected void doGatherTest(final EdgesEnum gatherEdges,final Set<? extends Statement> expected,final Value startingVertex) throws Exception {  final IGASEngine gasEngine=getGraphFixture().newGASEngine(1);  try {    final IGraphAccessor graphAccessor=getGraphFixture().newGraphAccessor(null);    final IGASContext<Set<Statement>,Set<Statement>,Set<Statement>> gasContext=gasEngine.newGASContext(graphAccessor,new MockGASProgram(gatherEdges));    final IGASState<Set<Statement>,Set<Statement>,Set<Statement>> gasState=gasContext.getGASState();    gasState.setFrontier(gasContext,startingVertex);    gasContext.doRound(new GASStats());    final Set<Statement> actual=gasState.getState(startingVertex);    assertSameEdges(expected,actual);  }  finally {    gasEngine.shutdownNow();  }}  }
class C{  public void removeAdapter(int index){  LocalAdapter localAdapter=mAdapters.get(index);  localAdapter.mAdapter.unregisterAdapterDataObserver(localAdapter.adapterDataObserver);  mAdapters.remove(localAdapter);}  }
class C{  public Boolean isEnabled(){  return enabled;}  }
class C{  public String seedTipText(){  return "Set the seed for use in cross validation.";}  }
class C{  @VisibleForTesting public void cleanAllMiniDumps(){  cleanOutAllNonFreshMinidumpFiles();  for (  File f : getAllMinidumpFiles()) {    deleteFile(f);  }}  }
class C{  public void testGetConnectionIdValue(){  int expectedReturn=0x5555;  this.connectionIdAttribute.setConnectionIdValue(MsgFixture.CONNECTION_ID);  int actualReturn=this.connectionIdAttribute.getConnectionIdValue();  assertEquals("ConnectionId is not properly calculated",expectedReturn,actualReturn);  expectedReturn=0x2222;  this.connectionIdAttribute.setConnectionIdValue(MsgFixture.CONNECTION_ID_2);  actualReturn=this.connectionIdAttribute.getConnectionIdValue();  assertEquals("ConnectionId is not properly calculated",expectedReturn,actualReturn);}  }
class C{  public static void encodeDimension(double value,byte bytes[],int offset){  NumericUtils.intToSortableBytes(Geo3DUtil.encodeValue(value),bytes,offset);}  }
class C{  public static String A_noun(final String noun){  return makeUpperCaseWord(a_noun(noun));}  }
class C{  public TomcatServiceBuilder baseDir(String baseDir){  return baseDir(Paths.get(requireNonNull(baseDir,"baseDir")));}  }
class C{  public ScannerException(String context,Mark contextMark,String problem,Mark problemMark,String note){  super(context,contextMark,problem,problemMark,note);}  }
class C{  public RawData(byte[] data,InetAddress address,int port){  this(data,address,port,null,false);}  }
class C{  protected static FontUIResource _getWindowTitleFont(){  if (windowFont == null) {    try {      windowFont=new FontUIResource(Font.getFont("swing.plaf.metal.windowFont",new Font(FONT_DEFAULT,Font.BOLD,FONT_SIZE + 2)));    } catch (    Exception e) {      windowFont=new FontUIResource(FONT_DEFAULT,Font.BOLD,FONT_SIZE + 2);    }  }  return windowFont;}  }
class C{  public synchronized String toString(){  return this.getClass().toString() + " [" + seqno+ "]";}  }
class C{  public TreeCellRenderer createDefaultCellRenderer(){  return new MotifTreeCellRenderer();}  }
class C{  public DefaultWriteFuture(IoSession session){  super(session);}  }
class C{  public KDCReq(DerValue der,int req_type) throws Asn1Exception, IOException, KrbException {  init(der,req_type);}  }
class C{  public void removeChangeListener(ChangeListener l){  listenerList.remove(ChangeListener.class,l);}  }
class C{  public static boolean makeDirs(String filePath){  String folderName=getFolderName(filePath);  if (StringUtils.isEmpty(folderName)) {    return false;  }  File folder=new File(folderName);  return (folder.exists() && folder.isDirectory()) ? true : folder.mkdirs();}  }
class C{  public void clearStorage(){  this.storageMap.clear();}  }
class C{  @SuppressWarnings("unused") public static <InputT,RestrictionT>void invokeSplitRestriction(InputT element,RestrictionT restriction,DoFn.OutputReceiver<RestrictionT> receiver){  receiver.output(restriction);}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public int[] recurse(OrangeEcho echo,int[] message,int level) throws RemoteException {  try {    String threadName=Thread.currentThread().getName();    logger.log(Level.FINEST,threadName + ": " + toString()+ ".recurse(message["+ message.length+ "], "+ level+ "): BEGIN");    int[] response;    if (level > 0)     response=echo.recurse(this,message,level); else {      for (int i=0; i < message.length; ++i)       message[i]=~message[i];      response=message;    }    logger.log(Level.FINEST,threadName + ": " + toString()+ ".recurse(message["+ message.length+ "], "+ level+ "): END");    return response;  } catch (  RuntimeException e) {    logger.log(Level.SEVERE,toString() + ".recurse():",e);    throw e;  }}  }
class C{  public HyperGraphPeer(Json configuration){  this.configuration=configuration;}  }
class C{  public boolean isCellularDataServiceSupported(){  return ((RadioInfo.getSupportedWAFs() & (RadioInfo.WAF_3GPP | RadioInfo.WAF_CDMA | RadioInfo.WAF_IDEN)) > 0);}  }
class C{  private LayoutWaiter(final ZyGraph graph){  m_graph=graph;}  }
class C{  private static BitMatrix bitMatrixFrombitArray(byte[][] input,int margin){  BitMatrix output=new BitMatrix(input[0].length + 2 * margin,input.length + 2 * margin);  output.clear();  for (int y=0, yOutput=output.getHeight() - margin - 1; y < input.length; y++, yOutput--) {    for (int x=0; x < input[0].length; x++) {      if (input[y][x] == 1) {        output.set(x + margin,yOutput);      }    }  }  return output;}  }
class C{  public OMGraphic createGraphic(int renderType,int lineType){  OMGraphic g=null;switch (renderType) {case (OMGraphic.RENDERTYPE_LATLON):    g=new OMPoly(new double[0],OMGraphic.RADIANS,lineType);  break;case (OMGraphic.RENDERTYPE_OFFSET):g=new OMPoly(90f,-180f,new int[0],OMPoly.COORDMODE_ORIGIN);break;default :g=new OMPoly(new int[0]);}((OMPoly)g).setDoShapes(true);return g;}  }
class C{  public boolean isRegEx(){  return m_isRegEx;}  }
class C{  public static DecomposableMatchBuilder1<Long,Long> caseLong(MatchesAny<Long> l){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(any());  return new DecomposableMatchBuilder1<>(matchers,0,new PrimitiveFieldExtractor<>(Long.class));}  }
class C{  public void downloadConfig(String configName,Path downloadPath) throws IOException {  connect();  zkStateReader.getConfigManager().downloadConfigDir(configName,downloadPath);}  }
class C{  static boolean isTrueToplevelWindow(long window){  if (XToolkit.windowToXWindow(window) instanceof XEmbeddedFramePeer) {    return false;  }  return isToplevelWindow(window);}  }
class C{  public Word loadWord(Offset offset){  return new Word(loadArchitecturalWord(offset));}  }
class C{  @Override public void run(){  amIActive=true;  String ouptutFile=null;  String shapefileName=null;  int i=0;  int row, col, rows, cols;  InputStream inStream=null;  OutputStream outStream=null;  int progress=0;  Geometry[] JTSGeometries;  WKTWriter wktWriter=new WKTWriter();  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String inputFilesString=args[0];  if (inputFilesString.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  String[] imageFiles=inputFilesString.split(";");  int numFiles=imageFiles.length;  try {    for (i=0; i < numFiles; i++) {      if (numFiles > 1) {        progress=(int)(100f * i / (numFiles - 1));        updateProgress("Loop " + (i + 1) + " of "+ numFiles+ ":",progress);      }      shapefileName=imageFiles[i];      if (!((new File(shapefileName)).exists())) {        showFeedback("Vector file does not exist.");        break;      }      ShapeFile shapefile=new ShapeFile(shapefileName);      ouptutFile=shapefileName.replace(".shp",".wkt");      (new File(ouptutFile)).delete();      fw=new FileWriter(ouptutFile,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=0;      int n=0;      int onePercentOfRecs=shapefile.getNumberOfRecords() / 100;      for (      ShapeFileRecord record : shapefile.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {          JTSGeometries=record.getGeometry().getJTSGeometries();          for (int a=0; a < JTSGeometries.length; a++) {            str1=wktWriter.write(JTSGeometries[a]);            out.println(str1);          }        }        if (cancelOp) {          cancelOperation();          return;        }        n++;        if (n == onePercentOfRecs) {          n=0;          progress++;          updateProgress("Exporting shapefile data:",progress);        }      }      showFeedback("Operation complete!");    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile;  double x, y, x1, x2, y1, y2;  int progress;  int oldProgress;  int i, n;  double[][] vertices=null;  int numPolys=0;  ShapeType shapeType;  int[] parts={0};  double psi=0;  Object[] rowData;  double DegreeToRad=Math.PI / 180;  double[] axes=new double[2];  double newXAxis=0;  double newYAxis=0;  double longAxis;  double shortAxis;  final double rightAngle=Math.toRadians(90);  double midX, midY;  double[] newBoundingBox=new double[4];  double slope;  double boxCentreX, boxCentreY;  double elongation;  double elongationThreshold=0.25;  double dist;  boolean outputChainVector=false;  PointsList points=new PointsList();  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  String outputFile=args[1];  neighbourhoodRadius=Double.parseDouble(args[2]);  int minChainLength=Integer.parseInt(args[3]);  String outputChainVectorFile=args[4];  if (!outputChainVectorFile.toLowerCase().contains("not specified")) {    outputChainVector=true;  }  if ((inputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    shapeType=input.getShapeType();    numPolys=input.getNumberOfRecords();    if (shapeType.getBaseType() != ShapeType.POLYGON) {      showFeedback("This tool only works with shapefiles of a polygon base shape type.");      return;    }    pointLocations=new double[numPolys * 2][2];    pointAttributes=new int[numPolys * 2][4];    int[][] polyAttributes=new int[numPolys][3];    DBFField[] fields=new DBFField[2];    fields[0]=new DBFField();    fields[0].setName("PARENT_ID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    fields[1]=new DBFField();    fields[1].setName("GROUP_ID");    fields[1].setDataType(DBFField.DBFDataType.NUMERIC);    fields[1].setFieldLength(10);    fields[1].setDecimalCount(0);    ShapeFile output=new ShapeFile(outputFile,shapeType,fields);    output.setProjectionStringFromOtherShapefile(input);    ShapeFile chainVector=new ShapeFile();    if (outputChainVector) {      fields=new DBFField[1];      fields[0]=new DBFField();      fields[0].setName("GROUP_ID");      fields[0].setDataType(DBFField.DBFDataType.NUMERIC);      fields[0].setFieldLength(10);      fields[0].setDecimalCount(0);      chainVector=new ShapeFile(outputChainVectorFile,ShapeType.POLYLINE,fields);    }    pointsTree=new KdTree.SqrEuclid(2,new Integer(numPolys * 2));    int recordNum;    oldProgress=-1;    for (    ShapeFileRecord record : input.records) {      recordNum=record.getRecordNumber();      vertices=record.getGeometry().getPoints();      int numVertices=vertices.length;      double east=Double.NEGATIVE_INFINITY;      double west=Double.POSITIVE_INFINITY;      double north=Double.NEGATIVE_INFINITY;      double south=Double.POSITIVE_INFINITY;      for (i=0; i < numVertices; i++) {        if (vertices[i][0] > east) {          east=vertices[i][0];        }        if (vertices[i][0] < west) {          west=vertices[i][0];        }        if (vertices[i][1] > north) {          north=vertices[i][1];        }        if (vertices[i][1] < south) {          south=vertices[i][1];        }      }      midX=west + (east - west) / 2.0;      midY=south + (north - south) / 2.0;      double[][] verticesRotated=new double[numVertices][2];      int[] keyPoints=new int[4];      axes[0]=9999999;      axes[1]=9999999;      slope=0;      boxCentreX=0;      boxCentreY=0;      for (int m=0; m <= 180; m++) {        psi=-m * 0.5 * DegreeToRad;        for (n=0; n < numVertices; n++) {          x=vertices[n][0] - midX;          y=vertices[n][1] - midY;          verticesRotated[n][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));          verticesRotated[n][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));        }        int[] currentKeyPoints=new int[4];        newBoundingBox[0]=Double.MAX_VALUE;        newBoundingBox[1]=Double.MIN_VALUE;        newBoundingBox[2]=Double.MAX_VALUE;        newBoundingBox[3]=Double.MIN_VALUE;        for (n=0; n < numVertices; n++) {          x=verticesRotated[n][0];          y=verticesRotated[n][1];          if (x < newBoundingBox[0]) {            newBoundingBox[0]=x;            currentKeyPoints[0]=n;          }          if (x > newBoundingBox[1]) {            newBoundingBox[1]=x;            currentKeyPoints[1]=n;          }          if (y < newBoundingBox[2]) {            newBoundingBox[2]=y;            currentKeyPoints[2]=n;          }          if (y > newBoundingBox[3]) {            newBoundingBox[3]=y;            currentKeyPoints[3]=n;          }        }        newXAxis=newBoundingBox[1] - newBoundingBox[0];        newYAxis=newBoundingBox[3] - newBoundingBox[2];        if ((newXAxis * newYAxis) < (axes[0] * axes[1])) {          axes[0]=newXAxis;          axes[1]=newYAxis;          if (axes[0] > axes[1]) {            slope=-psi;          } else {            slope=-(rightAngle + psi);          }          x=newBoundingBox[0] + newXAxis / 2;          y=newBoundingBox[2] + newYAxis / 2;          boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));          boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));          keyPoints=currentKeyPoints.clone();        }      }      longAxis=Math.max(axes[0],axes[1]);      shortAxis=Math.min(axes[0],axes[1]);      elongation=1 - shortAxis / longAxis;      slope=AxialData.rationalizeAxialAngle(slope);      x1=boxCentreX + longAxis / 2.0 * Math.cos(slope);      y1=boxCentreY + longAxis / 2.0 * Math.sin(slope);      x2=boxCentreX - longAxis / 2.0 * Math.cos(slope);      y2=boxCentreY - longAxis / 2.0 * Math.sin(slope);      int keyPoint1=-1;      int keyPoint2=-1;      double minDist=shortAxis * shortAxis * 1.05;      for (i=0; i < 4; i++) {        x=vertices[keyPoints[i]][0];        y=vertices[keyPoints[i]][1];        dist=(x - x1) * (x - x1) + (y - y1) * (y - y1);        if (dist < minDist) {          keyPoint1=keyPoints[i];          minDist=dist;        }      }      minDist=shortAxis * shortAxis * 1.05;      for (i=0; i < 4; i++) {        x=vertices[keyPoints[i]][0];        y=vertices[keyPoints[i]][1];        dist=(x - x2) * (x - x2) + (y - y2) * (y - y2);        if (dist < minDist) {          keyPoint2=keyPoints[i];          minDist=dist;        }      }      if (elongation > elongationThreshold) {        i=(recordNum - 1) * 2;        x=vertices[keyPoint1][0];        y=vertices[keyPoint1][1];        pointsTree.addPoint(new double[]{y,x},new Integer(i));        pointLocations[i][0]=x;        pointLocations[i][1]=y;        pointAttributes[i][0]=recordNum;        pointAttributes[i][1]=1;        x=vertices[keyPoint2][0];        y=vertices[keyPoint2][1];        pointsTree.addPoint(new double[]{y,x},new Integer(i + 1));        pointLocations[i + 1][0]=x;        pointLocations[i + 1][1]=y;        pointAttributes[i + 1][0]=recordNum;        pointAttributes[i + 1][1]=2;      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((recordNum * 100.0) / numPolys);      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    oldProgress=-1;    for (i=0; i < (numPolys * 2); i++) {      if (pointAttributes[i][0] > 0) {        int neighbourID=findConnectedNeighbour(i);        if (neighbourID >= 0 && findConnectedNeighbour(neighbourID) == i) {          pointAttributes[i][2]=pointAttributes[neighbourID][0];          pointAttributes[neighbourID][2]=pointAttributes[i][0];          pointAttributes[i][3]=neighbourID;          pointAttributes[neighbourID][3]=i;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((i * 100.0) / (numPolys * 2));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    List<Integer> chainPolys=new ArrayList<Integer>();    List<Integer> chainKeyPoints=new ArrayList<Integer>();    oldProgress=-1;    int currentGroupID=1;    int activeNode=0, lastNode=0;    int currentPoly=0;    for (i=0; i < numPolys; i++) {      if (polyAttributes[i][0] == 0) {        int linkedEndNodes=0;        if (pointAttributes[i * 2][2] > 0) {          linkedEndNodes++;          activeNode=i * 2;          lastNode=i * 2 + 1;        }        if (pointAttributes[i * 2 + 1][2] > 0) {          linkedEndNodes++;          activeNode=i * 2 + 1;          lastNode=i * 2;        }        if (linkedEndNodes == 1) {          polyAttributes[i][0]=currentGroupID;          boolean flag=true;          currentPoly=i;          chainPolys.clear();          chainPolys.add(currentPoly);          chainKeyPoints.clear();          points.clear();          points.addMPoint(pointLocations[lastNode][0],pointLocations[lastNode][1]);          points.addMPoint(pointLocations[activeNode][0],pointLocations[activeNode][1]);          do {            polyAttributes[currentPoly][0]=currentGroupID;            if (pointAttributes[activeNode][0] == pointAttributes[lastNode][0]) {              if (pointAttributes[activeNode][2] > 0) {                currentPoly=pointAttributes[activeNode][2] - 1;                lastNode=activeNode;                activeNode=pointAttributes[activeNode][3];                chainPolys.add(currentPoly);              } else {                if (chainPolys.size() >= minChainLength) {                  for (                  int c : chainPolys) {                    rowData=new Object[2];                    rowData[0]=new Double(c + 1);                    rowData[1]=new Double(currentGroupID);                    output.addRecord(input.getRecord(c).getGeometry(),rowData);                  }                  chainPolys.clear();                  if (outputChainVector) {                    rowData=new Object[1];                    rowData[0]=new Double(currentGroupID);                    chainVector.addRecord(new PolyLine(parts,points.getPointsArray()),rowData);                  }                  currentGroupID++;                }                flag=false;              }            } else {              if (pointAttributes[activeNode][1] == 1) {                lastNode=activeNode;                activeNode++;              } else {                lastNode=activeNode;                activeNode--;              }              points.addMPoint(pointLocations[lastNode][0],pointLocations[lastNode][1]);              points.addMPoint(pointLocations[activeNode][0],pointLocations[activeNode][1]);            }          } while (flag);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)((i * 100.0) / (numPolys));      if (progress > oldProgress) {        updateProgress(progress);        oldProgress=progress;      }    }    output.write();    if (outputChainVector) {      chainVector.write();    }    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean duplicate(boolean _boolean){  return _boolean;}  }
class C{  public TLongDoubleHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void dispose(){  selectedChild=null;  super.dispose();}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitEnumMemberValue(this);}  }
class C{  public ImageOptions(@WorldWind.ImageConfig int imageConfig){  this.imageConfig=imageConfig;}  }
class C{  public static void main(final String[] args){  System.out.println(Runtime.getRuntime().maxMemory());}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,CharSequence value){  if (extras == null) {    extras=new Bundle();  }  extras.putCharSequence(name,value);  return this;}  }
class C{  public legend removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  protected static int storeDoubleAsF26Dot6(final double a){  return (int)((a * 64) + 0.5);}  }
class C{  public boolean isSetHello(){  return this.hello != null;}  }
class C{  public CompositeMatch(){}  }
class C{  public void recycle(View convertView,int position){  touchListener.reloadChoiceStateInView(convertView.findViewById(swipeFrontView),position);  touchListener.reloadSwipeStateInView(convertView.findViewById(swipeFrontView),position);  for (int j=0; j < ((ViewGroup)convertView).getChildCount(); ++j) {    View nextChild=((ViewGroup)convertView).getChildAt(j);    nextChild.setPressed(false);  }}  }
class C{  private synchronized void updateThreshold(CounterMonitorObservedObject o){  if (((Number)o.getDerivedGauge()).longValue() >= o.getThreshold().longValue()) {    if (offset.longValue() > 0L) {      long threshold_value=o.getThreshold().longValue();      while (((Number)o.getDerivedGauge()).longValue() >= threshold_value) {        threshold_value+=offset.longValue();      }switch (o.getType()) {case INTEGER:        o.setThreshold(Integer.valueOf((int)threshold_value));      break;case BYTE:    o.setThreshold(Byte.valueOf((byte)threshold_value));  break;case SHORT:o.setThreshold(Short.valueOf((short)threshold_value));break;case LONG:o.setThreshold(Long.valueOf(threshold_value));break;default :MONITOR_LOGGER.logp(Level.FINEST,CounterMonitor.class.getName(),"updateThreshold","the threshold type is invalid");break;}if (!differenceMode) {if (modulus.longValue() > 0L) {if (o.getThreshold().longValue() > modulus.longValue()) {o.setModulusExceeded(true);o.setDerivedGaugeExceeded((Number)o.getDerivedGauge());}}}o.setEventAlreadyNotified(false);} else {o.setModulusExceeded(true);o.setDerivedGaugeExceeded((Number)o.getDerivedGauge());}}}  }
class C{  public void addExperiment(final String expName,final String definition,final int segments){  verifyChangesAllowed();  final ExperimentConfig expDef=allExpDefs.get(definition);  checkArgument(expDef != null,"reference to undefined experiment %s",definition);  final Collection<Integer> usedSegments=allocateSegments(segments,expName);  final String expSalt=format("%s.%s",StringUtils.defaultString(salt,this.name),expName);  final Experiment exp=new Experiment(expName,expSalt,expDef,usedSegments);  final Experiment existingExp=activeExperiments.put(expName,exp);  checkArgument(existingExp == null,"duplicate experiment name %s",expName);  for (  Integer segment : usedSegments) {    allocationMap[segment]=exp;  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4mfPackage.Literals.INIT_MODULES;}  }
class C{  private int binarySearch(List<SparseItemset> candidates,SparseItemset scratch,int begin,int end){  --end;  while (begin < end) {    final int mid=(begin + end) >>> 1;    SparseItemset midVal=candidates.get(mid);    int cmp=midVal.compareTo(scratch);    if (cmp < 0) {      begin=mid + 1;    } else     if (cmp > 0) {      end=mid - 1;    } else {      return mid;    }  }  return -(begin + 1);}  }
class C{  public void updateViewEntity(ViewEntity viewEntity,boolean commit){  SolrInputDocument doc=new SolrInputDocument();  doc.setField(ID,viewEntity.getUrlPath());  doc.setField(TYPE,TYPE_PARTITION);  doc.addField(STATUS,viewEntity.getStatus());  doc.addField(TRANSFORMATIONTIMESTAMP,viewEntity.getTransformationEnd() / 1000);  doc.addField(TABLE_NAME,viewEntity.getTable().getTableName());  doc.addField(DATABASE_NAME,viewEntity.getTable().getDatabaseName());  doc.addField(CREATED_AT,viewEntity.getTable().getCreatedAt());  if (viewEntity.getParameters() != null) {    if (viewEntity.getParameters().size() > 0) {      doc.addField(PARAMETERSTRING,viewEntity.getParameterString());    }    for (    ParameterValueEntity param : viewEntity.getParameters()) {      doc.addField(param.getKey() + "_s",param.getValue());    }  }  addDocument(doc);  if (commit) {    commit();  }}  }
class C{  void reSizeToFitOnScreen(){  Dimension dim=getMaximumSize();  int width=this.getPreferredSize().width;  int height=this.getPreferredSize().height;  log.trace("reSizeToFitOnScreen of \"{}\" starts with maximum size ",getTitle(),dim);  log.trace("reSizeToFitOnScreen starts with preferred height {} width {}",height,width);  log.trace("reSizeToFitOnScreen starts with location {},{}",getX(),getY());  if ((width + this.getX()) >= dim.getWidth()) {    int offsetX=(width + this.getX()) - (int)dim.getWidth();    log.trace("reSizeToFitScreen moves \"{}\" left {} pixels",getTitle(),offsetX);    int positionX=this.getX() - offsetX;    if (positionX < 0) {      log.trace("reSizeToFitScreen sets \"{}\" X to zero",getTitle());      positionX=0;    }    this.setLocation(positionX,this.getY());    if ((width + this.getX()) >= dim.getWidth()) {      width=width - (int)((width + this.getX()) - dim.getWidth());      log.trace("reSizeToFitScreen sets \"{}\" width to {}",getTitle(),width);    }  }  if ((height + this.getY()) >= dim.getHeight()) {    int offsetY=(height + this.getY()) - (int)dim.getHeight();    log.trace("reSizeToFitScreen moves \"{}\" up {} pixels",getTitle(),offsetY);    int positionY=this.getY() - offsetY;    if (positionY < 0) {      log.trace("reSizeToFitScreen sets \"{}\" Y to zero",getTitle());      positionY=0;    }    this.setLocation(this.getX(),positionY);    if ((height + this.getY()) >= dim.getHeight()) {      height=height - (int)((height + this.getY()) - dim.getHeight());      log.trace("reSizeToFitScreen sets \"{}\" height to {}",getTitle(),height);    }  }  this.setSize(width,height);  log.debug("reSizeToFitOnScreen sets height {} width {}",height,width);}  }
class C{  private XYDataset createDataset1(){  XYSeries series1=new XYSeries("Series 1");  series1.add(10.0,12353.3);  series1.add(20.0,13734.4);  series1.add(30.0,14525.3);  series1.add(40.0,13984.3);  series1.add(50.0,12999.4);  series1.add(60.0,14274.3);  series1.add(70.0,15943.5);  series1.add(80.0,14845.3);  series1.add(90.0,14645.4);  series1.add(100.0,16234.6);  series1.add(110.0,17232.3);  series1.add(120.0,14232.2);  series1.add(130.0,13102.2);  series1.add(140.0,14230.2);  series1.add(150.0,11235.2);  XYSeries series2=new XYSeries("Series 2");  series2.add(10.0,15000.3);  series2.add(20.0,11000.4);  series2.add(30.0,17000.3);  series2.add(40.0,15000.3);  series2.add(50.0,14000.4);  series2.add(60.0,12000.3);  series2.add(70.0,11000.5);  series2.add(80.0,12000.3);  series2.add(90.0,13000.4);  series2.add(100.0,12000.6);  series2.add(110.0,13000.3);  series2.add(120.0,17000.2);  series2.add(130.0,18000.2);  series2.add(140.0,16000.2);  series2.add(150.0,17000.2);  XYSeriesCollection collection=new XYSeriesCollection();  collection.addSeries(series1);  collection.addSeries(series2);  return collection;}  }
class C{  public void error(String message,Object... args){  org.eclipse.che.ide.util.loging.Log.info(TourExtension.class,message);}  }
class C{  private ArrayList<Cluster> defineClustersGRID(Random random) throws Exception {  ArrayList<Cluster> clusters=new ArrayList<Cluster>(m_NumClusters);  double diffInstNum=m_MaxInstNum - m_MinInstNum;  double minInstNum=m_MinInstNum;  double diffRadius=m_MaxRadius - m_MinRadius;  Cluster cluster;  double gs=Math.pow(m_NumClusters,1.0 / getNumAttributes());  if (gs - (((int)gs)) > 0.0) {    m_GridSize=(int)(gs + 1.0);  } else {    m_GridSize=(int)gs;  }  m_GridWidth=((m_MaxRadius + m_MinRadius) / 2) * m_DistMult;  GridVector gv=new GridVector(getNumAttributes(),m_GridSize);  for (int i=0; i < m_NumClusters; i++) {    int instNum=(int)(random.nextDouble() * diffInstNum + minInstNum);    double radius=(random.nextDouble() * diffRadius) + m_MinRadius;    cluster=new Cluster(instNum,radius,gv.getGridVector(),m_GridWidth);    clusters.add(cluster);    gv.addOne();  }  return clusters;}  }
class C{  public static final CButton createPAttributeButton(boolean withText){  if (withText)   return createPAttributeButton(Msg.getMsg(Env.getCtx(),A_PATTRIBUTE));  return createPAttributeButton(null);}  }
class C{  protected void addIntersectingObjects(DrawContext dc,SurfaceObjectTile parent,SurfaceObjectTile tile){  if (!parent.hasObjects())   return;  if (!tile.getSector().intersects(parent.getObjectSector()))   return;  if (tile.getSector().contains(parent.getObjectSector())) {    tile.addAllSurfaceObjects(parent.getObjectList(),parent.getObjectSector());  } else {    for (    SurfaceRenderable so : parent.getObjectList()) {      List<Sector> sectors=so.getSectors(dc);      if (sectors == null)       continue;      for (      Sector s : sectors) {        if (tile.getSector().intersects(s)) {          tile.addSurfaceObject(so,s);          break;        }      }    }  }}  }
class C{  protected void startDocumentInternal() throws org.xml.sax.SAXException {  if (m_tracer != null)   this.fireStartDoc();}  }
class C{  public RepairRule(final String name,final GameData data){  super(name,data);}  }
class C{  public ApplicationResourceBundle(String baseName,Map<String,String> displayNames,Map<String,String> descriptions){  if (baseName == null) {    throw new IllegalArgumentException();  }  this.baseName=baseName;  this.displayNames=displayNames;  this.descriptions=descriptions;  this.resources=new HashMap<>(4,1.0f);}  }
class C{  public void load(Element element,Object o){  Editor ed=(Editor)o;  ReporterIcon l=new ReporterIcon(ed);  loadTextInfo(l,element);  l.setReporter(jmri.InstanceManager.getDefault(jmri.ReporterManager.class).getReporter(element.getAttribute("reporter").getValue()));  l.setSize(l.getPreferredSize().width,l.getPreferredSize().height);  ed.putItem(l);  loadCommonAttributes(l,Editor.REPORTERS,element);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypeRefsPackage.DEFERRED_TYPE_REF___GET_TYPE_REF_AS_STRING:    return getTypeRefAsString();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public Dimension preferredLayoutSize(Container target){  return layoutSize(target,true);}  }
class C{  public int numLabels(){  if (lbStr2Int == null) {    return 0;  } else {    return lbStr2Int.size();  }}  }
class C{  public ByteBuffer put(byte[] src,int off,int len){  int length=src.length;  if (off < 0 || len < 0 || off + len > length) {    throw new IndexOutOfBoundsException();  }  if (len > remaining()) {    throw new BufferOverflowException();  }  for (int i=0; i < len; i++) {    byteArray.set(i + position,src[off + i]);  }  position+=len;  return this;}  }
class C{  public static <K,V>CaseInsensitiveMap<V> caseInsensitiveMap(){  return new CaseInsensitiveMap<V>();}  }
class C{  public Filter(String name,String regEx,int fr,boolean gf,boolean exf,boolean enabled){  setName(name);  setFilterExpression(regEx);  setGeneralFilter(gf);  setExclusionFilter(exf);  setFilterRule(fr);  setEnabled(enabled);}  }
class C{  @Override public void addChildAt(CSSNodeDEPRECATED child,int i){  super.addChildAt(child,i);  Point modalSize=ModalHostHelper.getModalHostSize(getThemedContext());  child.setStyleWidth(modalSize.x);  child.setStyleHeight(modalSize.y);}  }
class C{  public synchronized static void free(FastStringBuffer sb){  sb.setLength(0);  m_stringBufPool.freeInstance(sb);}  }
class C{  public CResultsPanel(final ZyGraph graph,final CSpecialInstructionsModel model){  super(new BorderLayout());  m_table=new CResultsTable(graph,model);  add(new JScrollPane(m_table));}  }
class C{  private CBreakpointRemoveFunctions(){}  }
class C{  private void sendNotification(String group,String host,String plugin,String value,String field,MuninPlugin.AlertState alertLevel){  int notificationId=getUniqueNotificationId();  Intent intent=new Intent(this,Activity_Main.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Intent ignoreIntent=new Intent(this,Activity_IgnoreNotification.class);  ignoreIntent.putExtra(Activity_IgnoreNotification.EXTRA_NOTIFICATION_ID,notificationId);  ignoreIntent.putExtra(Activity_IgnoreNotification.EXTRA_GROUP,group);  ignoreIntent.putExtra(Activity_IgnoreNotification.EXTRA_HOST,host);  ignoreIntent.putExtra(Activity_IgnoreNotification.EXTRA_PLUGIN,plugin);  ignoreIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent ignorePendingIntent=PendingIntent.getActivity(this,1,ignoreIntent,PendingIntent.FLAG_ONE_SHOT);  String title=field != null ? plugin + "." + field+ " = "+ value : plugin;  String text=group + " - " + host;  int iLargeIcon=alertLevel == MuninPlugin.AlertState.CRITICAL ? R.drawable.ic_action_alert_critical : R.drawable.ic_action_alert_warning;  Bitmap largeIcon=BitmapFactory.decodeResource(getResources(),iLargeIcon);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.ic_alert_box_white).setLargeIcon(largeIcon).setContentTitle(title).setContentText(text).setPriority(alertLevel == MuninPlugin.AlertState.CRITICAL ? NotificationCompat.PRIORITY_HIGH : NotificationCompat.PRIORITY_DEFAULT).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent).addAction(R.drawable.ic_bookmark_remove_grey600,getString(R.string.ignore),ignorePendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(notificationId,notificationBuilder.build());}  }
class C{  public SslRMIClientSocketFactory(){}  }
class C{  private void isReversedTransaction(String clientId,String transactionId){  final Boolean isReversed=ClientHelper.getClientTransactions(this.requestSpec,this.responseSpec,clientId.toString(),transactionId);  Assert.assertTrue(isReversed);}  }
class C{  public boolean[][] moralize(BayesNet bayesNet){  int nNodes=bayesNet.getNrOfNodes();  boolean[][] bAdjacencyMatrix=new boolean[nNodes][nNodes];  for (int iNode=0; iNode < nNodes; iNode++) {    ParentSet parents=bayesNet.getParentSets()[iNode];    moralizeNode(parents,iNode,bAdjacencyMatrix);  }  return bAdjacencyMatrix;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  PlotRenderingInfo clone=(PlotRenderingInfo)super.clone();  if (this.plotArea != null) {    clone.plotArea=(Rectangle2D)this.plotArea.clone();  }  if (this.dataArea != null) {    clone.dataArea=(Rectangle2D)this.dataArea.clone();  }  clone.subplotInfo=new java.util.ArrayList(this.subplotInfo.size());  for (int i=0; i < this.subplotInfo.size(); i++) {    PlotRenderingInfo info=(PlotRenderingInfo)this.subplotInfo.get(i);    clone.subplotInfo.add(info.clone());  }  return clone;}  }
class C{  public ins addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public RelativeDateFormat(long baseMillis){  super();  this.baseMillis=baseMillis;  this.showZeroDays=false;  this.showZeroHours=true;  this.positivePrefix="";  this.dayFormatter=NumberFormat.getNumberInstance();  this.daySuffix="d";  this.hourFormatter=NumberFormat.getNumberInstance();  this.hourSuffix="h";  this.minuteFormatter=NumberFormat.getNumberInstance();  this.minuteSuffix="m";  this.secondFormatter=NumberFormat.getNumberInstance();  this.secondFormatter.setMaximumFractionDigits(3);  this.secondFormatter.setMinimumFractionDigits(3);  this.secondSuffix="s";  this.calendar=new GregorianCalendar();  this.numberFormat=new DecimalFormat("0");}  }
class C{  public boolean isInvoiceDisabled(){  return (isPersistedType(PaymentInfoType.INVOICE) && isInvoiceAvailable()) ? true : false;}  }
class C{  public Builder addTokenFilter(String name,Map<String,String> params) throws IOException {  Objects.requireNonNull(name,"TokenFilter name may not be null");  tokenFilters.add(applyResourceLoader(TokenFilterFactory.forName(name,applyDefaultParams(params))));  componentsAdded=true;  return this;}  }
class C{  public NativeStore(){  super();  setSupportedIsolationLevels(IsolationLevels.NONE,IsolationLevels.READ_COMMITTED,IsolationLevels.SNAPSHOT_READ,IsolationLevels.SNAPSHOT,IsolationLevels.SERIALIZABLE);  setDefaultIsolationLevel(IsolationLevels.SNAPSHOT_READ);}  }
class C{  @Override protected void translateCore(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  String typeValue="";  if (instruction.getMnemonic().endsWith(".W")) {    typeValue=instruction.getMnemonic().length() == 9 ? instruction.getMnemonic().substring(5,7) : instruction.getMnemonic().substring(3,5);  } else {    typeValue=instruction.getMnemonic().length() == 7 ? instruction.getMnemonic().substring(5) : instruction.getMnemonic().substring(3);  }  IOperandTreeNode registerOperand1;  String wBit="1";  if (instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().size() == 1) {    wBit="2";    registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0).getChildren().get(0);  } else {    registerOperand1=instruction.getOperands().get(0).getRootNode().getChildren().get(0);  }  final IOperandTreeNode rootNodeOfRegisterList=instruction.getOperands().get(1).getRootNode().getChildren().get(0);  final String registerNodeValue=(registerOperand1.getValue());  final int registerListLength=rootNodeOfRegisterList.getChildren().size();  final OperandSize bt=OperandSize.BYTE;  final OperandSize dw=OperandSize.DWORD;  final String tmpValue=environment.getNextVariableString();  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  final String addressPair=AddressingModeFourGenerator.generate(baseOffset,environment,instruction,instructions,typeValue,registerNodeValue,wBit,rootNodeOfRegisterList);  final String tmpAddress=addressPair;  baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  for (int i=0; i < registerListLength; i++) {    if ((rootNodeOfRegisterList.getChildren().get(i).getValue()).equalsIgnoreCase("PC")) {      instructions.add(ReilHelpers.createLdm(baseOffset++,dw,tmpAddress,dw,tmpValue));      instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpValue,dw,String.valueOf(0xFFFFFFFEL),dw,("PC")));      instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpValue,bt,String.valueOf(1),bt,"T"));    } else {      instructions.add(ReilHelpers.createLdm(baseOffset++,dw,tmpAddress,dw,(rootNodeOfRegisterList.getChildren().get(i).getValue())));    }    instructions.add(ReilHelpers.createAdd(baseOffset++,dw,tmpAddress,bt,String.valueOf(4L),dw,tmpAddress));  }}  }
class C{  protected VBox(){}  }
class C{  public void clear(){  this.state=State.EMPTY;  this.d=null;  this.l=null;  this.l1=null;}  }
class C{  public String readProcessStat(int pid){  RandomAccessFile reader=null;  String line=null;  try {    reader=new RandomAccessFile("/proc/" + pid + "/stat","r");    line=reader.readLine();  } catch (  IOException ex) {    ex.printStackTrace();  } finally {  }  return line;}  }
class C{  public void startDTD(String name,String publicId,String systemId) throws SAXException {  m_handler.startDTD(name,publicId,systemId);}  }
class C{  @Override public boolean retainAll(Collection<?> c){  throw new UnsupportedOperationException();}  }
class C{  public boolean isValid(){  return face() < NUM_FACES && ((lowestOnBit() & (0x1555555555555555L)) != 0);}  }
class C{  private long overflowFree(long delay){  Delayed head=(Delayed)super.getQueue().peek();  if (head != null) {    long headDelay=head.getDelay(NANOSECONDS);    if (headDelay < 0 && (delay - headDelay < 0))     delay=Long.MAX_VALUE + headDelay;  }  return delay;}  }
class C{  public <T>IndexTable(List<T> list,Comparator<T> comparator){  index=new IntList(list.size());  ListUtils.addRange(index,0,list.size(),1);  sort(list,comparator);}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SeaGlassTreeUI();}  }
class C{  protected boolean retriveAndProcessIndicationAttributeValues(String freeCapacityAttribute,String poolNameAttribute,String totalCapacityAttribute,String subscribedCapacityAttribute){  UpdtableStoragePoolModel spModel=new UpdtableStoragePoolModel();  if (freeCapacityAttribute != null) {    spModel.setFreeCapacity(getValueFromIndication(freeCapacityAttribute));  }  if (poolNameAttribute != null) {    spModel.setPoolName(getValueFromIndication(poolNameAttribute));  }  if (subscribedCapacityAttribute != null) {    spModel.setSubscribedCapacity(getValueFromIndication(subscribedCapacityAttribute));  }  if (totalCapacityAttribute != null) {    spModel.setTotalCapacity(getValueFromIndication(totalCapacityAttribute));  }  return updateStoragePoolObject(spModel);}  }
class C{  public GsonBuilder excludeFieldsWithModifiers(int... modifiers){  excluder=excluder.withModifiers(modifiers);  return this;}  }
class C{  public StemmedString(String orig,String stemmed){  strOrig=orig;  strStemmed=stemmed;}  }
class C{  public float valueSparseFloat(int indexOfIndex) throws Exception {  return Float.parseFloat(actualValue(indexOfIndex));}  }
class C{  void internIfAppropriate(Constant cst){  if (cst instanceof CstString) {    stringIds.intern((CstString)cst);  } else   if (cst instanceof CstType) {    typeIds.intern((CstType)cst);  } else   if (cst instanceof CstBaseMethodRef) {    methodIds.intern((CstBaseMethodRef)cst);  } else   if (cst instanceof CstFieldRef) {    fieldIds.intern((CstFieldRef)cst);  } else   if (cst instanceof CstEnumRef) {    fieldIds.intern(((CstEnumRef)cst).getFieldRef());  } else   if (cst == null) {    throw new NullPointerException("cst == null");  }}  }
class C{  public void begin(int timeout) throws NotSupportedException, SystemException {  CompositeTransaction ct=null;  ResumePreviousTransactionSubTxAwareParticipant resumeParticipant=null;  ct=compositeTransactionManager.getCompositeTransaction();  if (ct != null && ct.getProperty(JTA_PROPERTY_NAME) == null) {    LOGGER.logWarning("JTA: temporarily suspending incompatible transaction: " + ct.getTid() + " (will be resumed after JTA transaction ends)");    ct=compositeTransactionManager.suspend();    resumeParticipant=new ResumePreviousTransactionSubTxAwareParticipant(ct);  }  try {    ct=compositeTransactionManager.createCompositeTransaction(((long)timeout) * 1000);    if (resumeParticipant != null)     ct.addSubTxAwareParticipant(resumeParticipant);    if (ct.isRoot() && getDefaultSerial())     ct.setSerial();    ct.setProperty(JTA_PROPERTY_NAME,"true");  } catch (  SysException se) {    String msg="Error in begin()";    LOGGER.logError(msg,se);    throw new ExtendedSystemException(msg,se);  }  recreateCompositeTransactionAsJtaTransaction(ct);}  }
class C{  protected boolean isMouseOverHeader(final int x,final int y){  final Point pt=Display.getDefault().map(null,DynamicTable.this,new Point(x,y));  final Rectangle clientArea=getClientArea();  return (clientArea.y <= pt.y) && (pt.y < (clientArea.y + getHeaderHeight()));}  }
class C{  void save(){  this.counterSave=this.counter.clone();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-17 15:08:59.228 -0400",hash_original_method="DFC901DE62C4EA9C58F2B11CF295DE5A",hash_generated_method="BD1BFEC1E57D0BC882F071C7491A18CC") @Override public void stopPlaying(){  if (mController != null) {    mController.stopPlaying();  }  mCallbacks.onStop();  pushControllerState();  reportPlayingChanged();}  }
class C{  public void testDoubleMissingFunction() throws Exception {  checkSortMissingFunction("doubledv","-1.3","4.2");}  }
class C{  public void addLOSEvent(MouseEvent event){  graphics.clear();  LOSedge=TerrainLayer.numPixelsBetween(LOScenterP.x,LOScenterP.y,event.getX(),event.getY()) * 2 + 1;  LOScirc.setWidth(LOSedge);  LOScirc.setHeight(LOSedge);  LOScirc.generate(proj);  graphics.add(LOScirc);}  }
class C{  public static void main(String[] ops){  try {    new Attribute("length");    Attribute weight=new Attribute("weight");    Attribute date=new Attribute("date","yyyy-MM-dd HH:mm:ss");    System.out.println(date);    double dd=date.parseDate("2001-04-04 14:13:55");    System.out.println("Test date = " + dd);    System.out.println(date.formatDate(dd));    dd=new Date().getTime();    System.out.println("Date now = " + dd);    System.out.println(date.formatDate(dd));    List<String> my_nominal_values=new ArrayList<String>(3);    my_nominal_values.add("first");    my_nominal_values.add("second");    my_nominal_values.add("third");    Attribute position=new Attribute("position",my_nominal_values);    System.out.println("Name of \"position\": " + position.name());    Enumeration<Object> attValues=position.enumerateValues();    while (attValues.hasMoreElements()) {      String string=(String)attValues.nextElement();      System.out.println("Value of \"position\": " + string);    }    Attribute copy=(Attribute)position.copy();    System.out.println("Copy is the same as original: " + copy.equals(position));    System.out.println("Index of attribute \"weight\" (should be -1): " + weight.index());    System.out.println("Index of value \"first\" of \"position\" (should be 0): " + position.indexOfValue("first"));    System.out.println("\"position\" is numeric: " + position.isNumeric());    System.out.println("\"position\" is nominal: " + position.isNominal());    System.out.println("\"position\" is string: " + position.isString());    System.out.println("Name of \"position\": " + position.name());    System.out.println("Number of values for \"position\": " + position.numValues());    for (int i=0; i < position.numValues(); i++) {      System.out.println("Value " + i + ": "+ position.value(i));    }    System.out.println(position);switch (position.type()) {case Attribute.NUMERIC:      System.out.println("\"position\" is numeric");    break;case Attribute.NOMINAL:  System.out.println("\"position\" is nominal");break;case Attribute.STRING:System.out.println("\"position\" is string");break;case Attribute.DATE:System.out.println("\"position\" is date");break;case Attribute.RELATIONAL:System.out.println("\"position\" is relation-valued");break;default :System.out.println("\"position\" has unknown type");}ArrayList<Attribute> atts=new ArrayList<Attribute>(1);atts.add(position);Instances relation=new Instances("Test",atts,0);Attribute relationValuedAtt=new Attribute("test",relation);System.out.println(relationValuedAtt);} catch (Exception e) {e.printStackTrace();}}  }
class C{  private static List<SupportedLanguage> findAll(DataService ds){  Query query=ds.createNamedQuery("SupportedLanguage.findAll");  List<SupportedLanguage> result=ParameterizedTypes.list(query.getResultList(),SupportedLanguage.class);  return result;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void addToWindowManager(CFrame frame){  JFrame top=Env.getWindow(0);  if (top instanceof AMenu) {    ((AMenu)top).getWindowManager().add(frame);  }}  }
class C{  public void update(){  while (edgeSource.hasNext()) {    Edge e=(Edge)edgeSource.next();    if (set.contains(e.getSrc()))     addMethod(e.getTgt());  }  while (unprocessedMethods.hasNext()) {    MethodOrMethodContext m=(MethodOrMethodContext)unprocessedMethods.next();    Iterator<Edge> targets=cg.edgesOutOf(m);    if (filter != null)     targets=filter.wrap(targets);    addMethods(new Targets(targets));  }}  }
class C{  public JSONObject putOpt(String key,Object value) throws JSONException {  if (key != null && value != null) {    this.put(key,value);  }  return this;}  }
class C{  private void processOKTag(String identifier){  doTestEnded(identifier,true);}  }
class C{  public boolean shouldBeConflated(){  return isUpdate();}  }
class C{  private void sortRepositories(){  Collections.sort(repositories,repositoryComparator);}  }
class C{  public boolean hasDeleted(){  return hasExtension(Deleted.class);}  }
class C{  public XMLTokener(String s){  super(s);}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public void testNotations(){  assertNotNull("This implementation does not parse notations",png);}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("Facet counting example:");  System.out.println("-----------------------");  FacetResult result=new ExpressionAggregationFacetsExample().runSearch();  System.out.println(result);}  }
class C{  public static String checkNotEmpty(String string,Object errorMessage){  if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && TextUtils.isEmpty(string)) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }  return string;}  }
class C{  public AuthenticationException(String hostname,String message){  this(hostname,message,null);}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple7<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7));}  }
class C{  @Override public String toString(){  return moduleName;}  }
class C{  public Class<?> type(){  if (isClass) {    return (Class<?>)object;  } else {    return object.getClass();  }}  }
class C{  protected void generatePseudoDropMoves(PriorityMoveList moves){  if (getDropCount(getColorToMove(),PAWN) > 0) {    long emptyBB=getEmptyBB() & NOT_RANK1 & NOT_RANK8;    while (emptyBB != 0) {      int toSquare=bitscanForward(emptyBB);      addMove(new Move(toSquare,PAWN,getColorToMove()),moves);      emptyBB=bitscanClear(emptyBB);    }  }  if (getDropCount(getColorToMove(),KNIGHT) > 0) {    long emptyBB=getEmptyBB();    while (emptyBB != 0) {      int toSquare=bitscanForward(emptyBB);      addMove(new Move(toSquare,KNIGHT,getColorToMove()),moves);      emptyBB=bitscanClear(emptyBB);    }  }  if (getDropCount(getColorToMove(),BISHOP) > 0) {    long emptyBB=getEmptyBB();    while (emptyBB != 0) {      int toSquare=bitscanForward(emptyBB);      addMove(new Move(toSquare,BISHOP,getColorToMove()),moves);      emptyBB=bitscanClear(emptyBB);    }  }  if (getDropCount(getColorToMove(),ROOK) > 0) {    long emptyBB=getEmptyBB();    while (emptyBB != 0) {      int toSquare=bitscanForward(emptyBB);      addMove(new Move(toSquare,ROOK,getColorToMove()),moves);      emptyBB=bitscanClear(emptyBB);    }  }  if (getDropCount(getColorToMove(),QUEEN) > 0) {    long emptyBB=getEmptyBB();    while (emptyBB != 0) {      int toSquare=bitscanForward(emptyBB);      addMove(new Move(toSquare,QUEEN,getColorToMove()),moves);      emptyBB=bitscanClear(emptyBB);    }  }}  }
class C{  public boolean showChat(){  return chatFlags == CHAT_ENABLED;}  }
class C{  public static void addFocusDebugListeners(org.eclipse.swt.widgets.Composite control,Container topLevelComponent){  control.addFocusListener(_SWTFocusListener);  control.addListener(SWT.Activate,_SWTActivationListener);  control.addListener(SWT.Deactivate,_SWTActivationListener);  if (topLevelComponent instanceof Window)   ((Window)topLevelComponent).addWindowFocusListener(_AWTWindowFocusListener);  addFocusListenerToTree(topLevelComponent);}  }
class C{  public static void fixResponseHeader(ResponseHeader rh){  String[] stringTable=rh.getStringTable();  if (stringTable == null)   return;  DiagnosticInfo di=rh.getServiceDiagnostics();  if (di == null)   return;  _fixDI(di,stringTable);}  }
class C{  protected void readZ(ByteBuffer buffer){  this.zRange=ShapefileUtils.readDoubleArray(buffer,2);  this.zValues=ShapefileUtils.readDoubleArray(buffer,this.getNumberOfPoints());}  }
class C{  public void skip(int bytes) throws BufferOverflowException {  if (bytes > remaining())   throw new BufferOverflowException();  while (bytes > 0) {    ByteBuffer bb=getReadChunk();    int n=Math.min(bb.remaining(),bytes);    bb.position(bb.position() + n);    bytes-=n;  }}  }
class C{  public void prune(double alpha) throws Exception {  Vector<LMTNode> nodeList;  CompareNode comparator=new CompareNode();  treeErrors();  calculateAlphas();  nodeList=getNodes();  boolean prune=(nodeList.size() > 0);  while (prune) {    LMTNode nodeToPrune=Collections.min(nodeList,comparator);    if (nodeToPrune.m_alpha > alpha) {      break;    }    nodeToPrune.m_isLeaf=true;    nodeToPrune.m_sons=null;    treeErrors();    calculateAlphas();    nodeList=getNodes();    prune=(nodeList.size() > 0);  }  for (  Object node : getNodes()) {    LMTNode lnode=(LMTNode)node;    if (!lnode.m_isLeaf) {      m_regressions=null;    }  }}  }
class C{  private void updatePathEffect(){  mPathEffectForBorderStyle=mBorderStyle != null ? mBorderStyle.getPathEffect(getFullBorderWidth()) : null;  mPaint.setPathEffect(mPathEffectForBorderStyle);}  }
class C{  public SelectFileParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_SELECT_FILE_SUCC);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void remove(){  removeAndKeepConnections(null);}  }
class C{  public void formatTo(Formatter formatter,int flags,int width,int precision){  formatNodeTo(formatter,0,root);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  public ExtentTest pass(String details){  log(Status.PASS,details);  return this;}  }
class C{  public static boolean backwardsValueConflictsWithSource(FlowValue backwardsFlowValue,SourceSinkInfo source,TypeQualifierValue typeQualifierValue,boolean isIdentity){  When sourceWhen=source.getWhen();  if (typeQualifierValue.isStrictQualifier() && !isIdentity) {    return (backwardsFlowValue == ALWAYS && sourceWhen != When.ALWAYS) || (backwardsFlowValue == NEVER && sourceWhen != When.NEVER);  } else {    return (backwardsFlowValue == ALWAYS && (sourceWhen == When.NEVER || sourceWhen == When.MAYBE)) || (backwardsFlowValue == NEVER && (sourceWhen == When.ALWAYS || sourceWhen == When.MAYBE));  }}  }
class C{  public Hour(int hour,Day day){  ParamChecks.nullNotPermitted(day,"day");  this.hour=(byte)hour;  this.day=day;  peg(Calendar.getInstance());}  }
class C{  public area addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public ValueRange(){  range=new HashMap<String,Set<Value>>();}  }
class C{  private void onCompleteDrawRipple(){  mHandler.removeMessages(MSG_DRAW_COMPLETE);  if (mTimer != null) {    if (mTask != null) {      mTask.cancel();    }    mTimer.cancel();  }  mRippleRadius=0;}  }
class C{  public static Disjunction or(){  return new Disjunction();}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) @Test public void testNodeProcessing() throws Exception {  FilterKeysHashMap<String,Number> oper=new FilterKeysHashMap<String,Number>();  CollectorTestSink sortSink=new CollectorTestSink();  oper.filter.setSink(sortSink);  oper.setKey("b");  oper.clearKeys();  String[] keys=new String[3];  keys[0]="e";  keys[1]="f";  keys[2]="blah";  oper.setKey("a");  oper.setKeys(keys);  oper.beginWindow(0);  HashMap<String,HashMap<String,Number>> inputA=new HashMap<String,HashMap<String,Number>>();  HashMap<String,Number> input=new HashMap<String,Number>();  HashMap<String,Number> input2=new HashMap<String,Number>();  input.put("a",2);  input.put("b",5);  input.put("c",7);  input.put("d",42);  input.put("e",200);  input.put("f",2);  inputA.put("A",input);  oper.data.process(inputA);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",204,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  inputA.clear();  input.put("a",5);  inputA.put("A",input);  oper.data.process(inputA);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",5,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  inputA.clear();  input.put("a",2);  input.put("b",33);  input.put("f",2);  inputA.put("A",input);  oper.data.process(inputA);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",4,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  inputA.clear();  input.put("b",6);  input.put("a",2);  input.put("j",6);  input.put("e",2);  input.put("dd",6);  input.put("blah",2);  input.put("another",6);  input.put("notmakingit",2);  inputA.put("A",input);  oper.data.process(inputA);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",6,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  inputA.clear();  input.put("c",9);  oper.setInverse(true);  inputA.put("A",input);  oper.data.process(inputA);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",9,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  input.clear();  input2.clear();  inputA.clear();  input.put("e",2);  input.put("c",9);  input2.put("a",5);  input2.put("p",8);  oper.setInverse(false);  inputA.put("A",input);  inputA.put("B",input2);  oper.data.process(inputA);  Assert.assertEquals("number emitted tuples",1,sortSink.collectedTuples.size());  Assert.assertEquals("Total filtered value is ",7,getTotal(sortSink.collectedTuples.get(0)));  sortSink.clear();  oper.endWindow();}  }
class C{  public void startAutoScroll(){  sendScrollMessage(interval);}  }
class C{  public double reweightExamples(ExampleSet exampleSet) throws OperatorException {  double reweightRightPred, reweightWrongPred;  final double err=this.getErrorRate();  if (err == 0 || err == 1) {    reweightRightPred=1;    reweightWrongPred=1;  } else {    reweightRightPred=Math.sqrt(err / (1.0d - err));    reweightWrongPred=1.0d / reweightRightPred;  }  double totalWeight=0;  Iterator<Example> reader=exampleSet.iterator();  Attribute weightAttribute=exampleSet.getAttributes().getWeight();  while (reader.hasNext()) {    Example example=reader.next();    int label=(int)example.getLabel();    int predicted=(int)example.getPredictedLabel();    double newWeight=example.getValue(weightAttribute) * ((label == predicted) ? reweightRightPred : reweightWrongPred);    example.setValue(weightAttribute,newWeight);    totalWeight+=newWeight;  }  return totalWeight;}  }
class C{  public JimpleBody newBody(SootMethod m){  return new JimpleBody(m);}  }
class C{  public static List<String> convertToCsvLines(Map<Tuple<Integer,Integer>,String> keyTable,char separator){  int maxCol=0;  Map<Integer,Map<Integer,String>> lin_colVal=new TreeMap<>();  for (  Map.Entry<Tuple<Integer,Integer>,String> entry : keyTable.entrySet()) {    Map<Integer,String> line=MapUtils.getMap(entry.getKey().getFirst(),lin_colVal);    line.put(entry.getKey().getSecond(),entry.getValue());    if (entry.getKey().getSecond() > maxCol) {      maxCol=entry.getKey().getSecond();    }  }  Map<Integer,String> csvLines=new TreeMap<>();  for (  Map.Entry<Integer,Map<Integer,String>> entry : lin_colVal.entrySet()) {    String line="";    Map<Integer,String> cols=entry.getValue();    for (int i=1; i <= maxCol; i++) {      String value=(cols.get(i) == null ? "" : cols.get(i));      line+=value + separator;    }    csvLines.put(entry.getKey(),line.substring(0,line.length() - 1));  }  return new LinkedList<>(csvLines.values());}  }
class C{  public UnknownServiceException(){}  }
class C{  public TransactionID sendRequest(Request request,TransportAddress sendTo,TransportAddress sendThrough,ResponseCollector collector,TransactionID transactionID,int originalWaitInterval,int maxWaitInterval,int maxRetransmissions) throws IllegalArgumentException, IOException {  StunClientTransaction clientTransaction=new StunClientTransaction(this,request,sendTo,sendThrough,collector,transactionID);  if (originalWaitInterval > 0)   clientTransaction.originalWaitInterval=originalWaitInterval;  if (maxWaitInterval > 0)   clientTransaction.maxWaitInterval=maxWaitInterval;  if (maxRetransmissions >= 0)   clientTransaction.maxRetransmissions=maxRetransmissions;  clientTransactions.put(clientTransaction.getTransactionID(),clientTransaction);  clientTransaction.sendRequest();  return clientTransaction.getTransactionID();}  }
class C{  public Settings cloneSettings(Settings settings){  Settings clone=new Settings();  copySettings(clone,settings);  return clone;}  }
class C{  public DefinitionGenerator(Log log,Swagger swagger,Set<String> exampleClassNames,Set<Class<?>> modelClasses,XsdParser xsdParser) throws MojoExecutionException {  this.log=log;  this.swagger=swagger;  this.exampleClassNames=exampleClassNames;  this.modelClasses=modelClasses;  this.xsdParser=xsdParser;  generateDefinitions();}  }
class C{  public void addCheckcast(String classname){  addOpcode(CHECKCAST);  addIndex(constPool.addClassInfo(classname));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public T caseAutoTransitionBlock_(AutoTransitionBlock_ object){  return null;}  }
class C{  @Override public V remove(Object key){  key=convertKey(key);  final int hashCode=hash(key);  final int index=hashIndex(hashCode,data.length);  HashEntry<K,V> entry=data[index];  HashEntry<K,V> previous=null;  while (entry != null) {    if (entry.hashCode == hashCode && isEqualKey(key,entry.key)) {      final V oldValue=entry.getValue();      removeMapping(entry,index,previous);      return oldValue;    }    previous=entry;    entry=entry.next;  }  return null;}  }
class C{  public Polynomial(Polynomial B){  order=B.order;  a=new double[order + 1];  System.arraycopy(B.a,0,a,0,a.length);}  }
class C{  protected Statement parseDeclaration(long p,int mod,Expression type) throws SyntaxError, IOException {  int i=argIndex;  if (token == IDENT) {    addArgument(new VarDeclarationStatement(pos,parseExpression()));    while (token == COMMA) {      scan();      addArgument(new VarDeclarationStatement(pos,parseExpression()));    }  }  return new DeclarationStatement(p,mod,type,statArgs(i));}  }
class C{  public T caseAnonymous_genExpr_1_(Anonymous_genExpr_1_ object){  return null;}  }
class C{  public List<String> removeInvalidParentheses2(String s){  List<String> res=new ArrayList<>();  remove(s,res,0,0,new char[]{'(',')'});  return res;}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3});}  }
class C{  public static <S extends Control,V>StyleableObjectProperty<V> createProperty(SkinPropertyBasedCssMetaData<S,V> metaData,SkinBase<S> skin){  return new SimpleStyleableObjectProperty<V>(metaData,skin,metaData.getPropertyName(),metaData.getInitialValue(skin.getSkinnable()));}  }
class C{  public FLVReader(File f,boolean generateMetadata) throws IOException {  if (null == f) {    log.warn("Reader was passed a null file");    log.debug("{}",org.apache.commons.lang.builder.ToStringBuilder.reflectionToString(this));  }  this.file=f;  this.fis=new FileInputStream(f);  this.generateMetadata=generateMetadata;  channel=fis.getChannel();  channelSize=channel.size();  in=null;  fillBuffer();  postInitialize();}  }
class C{  public ClusterUpdateSettingsRequest transientSettings(Settings settings){  this.transientSettings=settings;  return this;}  }
class C{  private void handleInterruption(){}  }
class C{  public void stop(){  server.stop(0);}  }
class C{  public static <S extends HasBodyKeyPressHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    BodyKeyPressEvent event=new BodyKeyPressEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public JScrollPane(Component view){  this(view,VERTICAL_SCROLLBAR_AS_NEEDED,HORIZONTAL_SCROLLBAR_AS_NEEDED);}  }
class C{  public void addActionListener(ActionListener newListener){  m_listeners.add(newListener);}  }
class C{  public static OMPoint read(DataInputStream dis,LinkProperties propertiesBuffer) throws IOException {  OMPoint point=null;  int x1, y1, radius;  float lt, ln;  int renderType=dis.readByte();switch (renderType) {case RENDERTYPE_LATLON:    lt=dis.readFloat();  ln=dis.readFloat();radius=dis.readInt();point=new OMPoint(lt,ln,radius);break;case RENDERTYPE_XY:x1=dis.readInt();y1=dis.readInt();radius=dis.readInt();point=new OMPoint(x1,y1,radius);break;case RENDERTYPE_OFFSET:lt=dis.readFloat();ln=dis.readFloat();x1=dis.readInt();y1=dis.readInt();radius=dis.readInt();point=new OMPoint(lt,ln,x1,y1,radius);break;default :}if (point != null) {propertiesBuffer=LinkProperties.loadPropertiesIntoOMGraphic(dis,point,propertiesBuffer);if (propertiesBuffer != null) {point.setOval(PropUtils.booleanFromProperties(propertiesBuffer,LPC_POINT_OVAL,OMPoint.DEFAULT_ISOVAL));}}return point;}  }
class C{  private void cleanUpDatabaseResources(Database conn,Statement st,ResultSet rs){  if (rs != null) {    try {      rs.close();    } catch (    SQLException ignore) {    }  }  if (st != null) {    try {      st.close();    } catch (    SQLException ignore) {    }  }  if (conn != null)   conn.close();}  }
class C{  public boolean toggleNeverTranslateLanguageState(boolean value){  if (mOptions[ALWAYS_LANGUAGE] && value) {    return false;  }  return toggleState(NEVER_LANGUAGE,value);}  }
class C{  private synchronized void resetChildLogTargets(final boolean recursive){  if (null == m_children) {    return;  }  for (int i=0; i < m_children.length; i++) {    m_children[i].resetLogTargets(recursive);  }}  }
class C{  public static void assertExists(File... files) throws FileNotFoundException {  for (  File file : files) {    if (!file.exists()) {      throw new FileNotFoundException(file.getAbsolutePath());    }  }}  }
class C{  public boolean isUnknown(){  return true;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.floor(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.fine("");  HttpSession sess=request.getSession();  WWindowStatus ws=WWindowStatus.get(request);  if (ws == null) {    MobileUtil.createTimeoutPage(request,response,this,null);    return;  }  int C_Location_ID=MobileUtil.getParameterAsInt(request,P_C_LOCATION_ID);  String targetBase="opener.WWindow." + WWindow.FORM_NAME + ".C_Location_ID";  MLocation location=new MLocation(ws.ctx,C_Location_ID,null);  log.fine("doPost updating C_Location_ID=" + C_Location_ID + " - "+ targetBase);  location.setAddress1(MobileUtil.getParameter(request,P_ADDRESS1));  location.setAddress2(MobileUtil.getParameter(request,P_ADDRESS2));  location.setAddress3(MobileUtil.getParameter(request,P_ADDRESS3));  location.setAddress4(MobileUtil.getParameter(request,P_ADDRESS4));  location.setCity(MobileUtil.getParameter(request,P_CITY));  location.setPostal(MobileUtil.getParameter(request,P_POSTAL));  location.setC_Country_ID(MobileUtil.getParameterAsInt(request,P_C_COUNTRY_ID));  location.setC_Region_ID(MobileUtil.getParameterAsInt(request,P_C_REGION_ID));  System.out.println("location =========== " + location);  MobileDoc doc=MobileDoc.createPopup("WLocation");  location.saveEx();  C_Location_ID=location.getC_Location_ID();  if (C_Location_ID == 0)   doc.getBody().addElement(new p(new b("ERROR - Location=0")));  doc.getBody().addElement(new p().addElement(location.toString()));  script script=new script(new StringBuffer().append(targetBase).append("D.value='").append(C_Location_ID).append("';").append(targetBase).append("F.value='").append(location.toString()).append("';closePopup();").toString());  doc.getBody().addElement(script);  log.fine("script=" + script.toString());  form myForm=null;  myForm=new form();  table table=new table();  table.setID("WLocation");  button button=new button();  button.addElement("ok");  StringBuffer script2=new StringBuffer();  String targetBase2="opener.document.WForm.C_Location_ID";  script2.append(targetBase2).append("D.value='").append(C_Location_ID).append("';").append(targetBase2).append("F.value='").append(location.toString()).append("';submit();window.close();");  button.setOnClick(script2.toString());  table.addElement(button);  myForm.addElement(table);  doc.getBody().addElement(myForm);  MobileUtil.createResponse(request,response,this,null,doc,true);}  }
class C{  public static <T>Single.Transformer<T,T> subscribeOnComputationThreadTransformerSingle(){  return null;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  Node<E> first(){  restartFromHead:   for (; ; ) {    for (Node<E> h=head, p=h, q; ; ) {      boolean hasItem=(p.item != null);      if (hasItem || (q=p.next) == null) {        updateHead(h,p);        return hasItem ? p : null;      } else       if (p == q)       continue restartFromHead; else       p=q;    }  }}  }
class C{  protected boolean handleCommand(String moveStr){  if (moveStr.equals("new")) {    moveList=new ArrayList<Move>();    uiInfoList=new ArrayList<UndoInfo>();    drawOfferList=new ArrayList<Boolean>();    currentMove=0;    pendingDrawOffer=false;    drawState=GameState.ALIVE;    resignState=GameState.ALIVE;    try {      pos=TextIO.readFEN(TextIO.startPosFEN);    } catch (    ChessParseError ex) {      throw new RuntimeException();    }    whitePlayer.clearTT();    blackPlayer.clearTT();    activateHumanPlayer();    return true;  } else   if (moveStr.equals("undo")) {    if (currentMove > 0) {      pos.unMakeMove(moveList.get(currentMove - 1),uiInfoList.get(currentMove - 1));      currentMove--;      pendingDrawOffer=false;      drawState=GameState.ALIVE;      resignState=GameState.ALIVE;      return handleCommand("swap");    } else {      System.out.println("Nothing to undo");    }    return true;  } else   if (moveStr.equals("redo")) {    if (currentMove < moveList.size()) {      pos.makeMove(moveList.get(currentMove),uiInfoList.get(currentMove));      currentMove++;      pendingDrawOffer=false;      return handleCommand("swap");    } else {      System.out.println("Nothing to redo");    }    return true;  } else   if (moveStr.equals("swap") || moveStr.equals("go")) {    Player tmp=whitePlayer;    whitePlayer=blackPlayer;    blackPlayer=tmp;    return true;  } else   if (moveStr.equals("list")) {    listMoves();    return true;  } else   if (moveStr.startsWith("setpos ")) {    String fen=moveStr.substring(moveStr.indexOf(" ") + 1);    Position newPos=null;    try {      newPos=TextIO.readFEN(fen);    } catch (    ChessParseError ex) {      System.out.printf("Invalid FEN: %s (%s)%n",fen,ex.getMessage());    }    if (newPos != null) {      handleCommand("new");      pos=newPos;      activateHumanPlayer();    }    return true;  } else   if (moveStr.equals("getpos")) {    String fen=TextIO.toFEN(pos);    System.out.println(fen);    return true;  } else   if (moveStr.startsWith("draw ")) {    if (getGameState() == GameState.ALIVE) {      String drawCmd=moveStr.substring(moveStr.indexOf(" ") + 1);      return handleDrawCmd(drawCmd);    } else {      return true;    }  } else   if (moveStr.equals("resign")) {    if (getGameState() == GameState.ALIVE) {      resignState=pos.whiteMove ? GameState.RESIGN_WHITE : GameState.RESIGN_BLACK;      return true;    } else {      return true;    }  } else   if (moveStr.startsWith("book")) {    String bookCmd=moveStr.substring(moveStr.indexOf(" ") + 1);    return handleBookCmd(bookCmd);  } else   if (moveStr.startsWith("time")) {    try {      String timeStr=moveStr.substring(moveStr.indexOf(" ") + 1);      int timeLimit=Integer.parseInt(timeStr);      whitePlayer.timeLimit(timeLimit,timeLimit,false);      blackPlayer.timeLimit(timeLimit,timeLimit,false);      return true;    } catch (    NumberFormatException nfe) {      System.out.printf("Number format exception: %s\n",nfe.getMessage());      return false;    }  } else   if (moveStr.startsWith("perft ")) {    try {      String depthStr=moveStr.substring(moveStr.indexOf(" ") + 1);      int depth=Integer.parseInt(depthStr);      MoveGen moveGen=new MoveGen();      long t0=System.currentTimeMillis();      long nodes=perfT(moveGen,pos,depth);      long t1=System.currentTimeMillis();      System.out.printf("perft(%d) = %d, t=%.3fs\n",depth,nodes,(t1 - t0) * 1e-3);    } catch (    NumberFormatException nfe) {      System.out.printf("Number format exception: %s\n",nfe.getMessage());      return false;    }    return true;  } else {    return false;  }}  }
class C{  public final static MP4Atom createAtom(MP4DataStream bitstream) throws IOException {  String uuid=null;  long size=bitstream.readBytes(4);  if (size == 0) {    throw new IOException("Invalid size");  }  int type=(int)bitstream.readBytes(4);  long readed=8;  if (type == 1970628964) {    uuid=bitstream.readString(16);    readed+=16;  }  if (size == 1) {    size=bitstream.readBytes(8);    readed+=8;  }  MP4Atom atom=new MP4Atom(size,type,uuid,readed);switch (type) {case 1835297121:case 1684631142:case 1836019574:case 1835626086:case 1937007212:case 1953653099:    readed=atom.create_composite_atom(bitstream);  break;case 1836069985:readed=atom.create_audio_sample_entry_atom(bitstream);break;case 1668232756:readed=atom.create_chunk_large_offset_atom(bitstream);break;case 1937007471:readed=atom.create_chunk_offset_atom(bitstream);break;case 1751411826:readed=atom.create_handler_atom(bitstream);break;case 1835296868:readed=atom.create_media_header_atom(bitstream);break;case 1836476516:readed=atom.create_movie_header_atom(bitstream);break;case 1937011556:readed=atom.create_sample_description_atom(bitstream);break;case 1937011578:readed=atom.create_sample_size_atom(bitstream);break;case 1937013298:readed=atom.create_compact_sample_size_atom(bitstream);break;case 1937011555:readed=atom.create_sample_to_chunk_atom(bitstream);break;case 1937011571:readed=atom.create_sync_sample_atom(bitstream);break;case 1937011827:readed=atom.create_time_to_sample_atom(bitstream);break;case 1936549988:readed=atom.create_sound_media_header_atom(bitstream);break;case 1953196132:readed=atom.create_track_header_atom(bitstream);break;case 1986881636:readed=atom.create_video_media_header_atom(bitstream);break;case 1836070006:readed=atom.create_visual_sample_entry_atom(bitstream);break;case 1635148593:readed=atom.create_video_sample_entry_atom(bitstream);break;case 1702061171:readed=atom.create_esd_atom(bitstream);break;case 1635148611:readed=atom.create_avc_config_atom(bitstream);break;case 1885434736:readed=atom.create_pasp_atom(bitstream);break;case 1668576371:readed=atom.create_composition_time_to_sample_atom(bitstream);break;}log.trace("Atom: type = {} size = {}",intToType(type),size);bitstream.skipBytes(size - readed);return atom;}  }
class C{  protected void applyCustomTextColorAttribute(int color){  setIndicatorTextColor(color);}  }
class C{  byte[] engineDigest(){  return engineDigest(buffer,buffered);}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  public static Record createRecord(String name,String host,int port,String root,JsonObject metadata){  Record ret=io.vertx.servicediscovery.types.HttpEndpoint.createRecord(name,host,port,root,metadata);  return ret;}  }
class C{  protected void processChange(Database currentModel,Database desiredModel,AddForeignKeyChange change,StringBuilder ddl){  writeExternalForeignKeyCreateStmt(desiredModel,change.getChangedTable(),change.getNewForeignKey(),ddl);  change.apply(currentModel,delimitedIdentifierModeOn);}  }
class C{  public void inc(int value){  units.inc();  volume.inc(value);}  }
class C{  @SuppressWarnings("unchecked") public ConcurrentARC(final int cacheSize,final int partitions){  int m=1;  while (m < partitions)   m=m * 2;  int partitionSize=cacheSize / m;  if (partitionSize < 4)   partitionSize=4;  this.arc=(ARC<K,V>[])Array.newInstance(HashARC.class,m);  for (int i=0; i < this.arc.length; i++)   this.arc[i]=new HashARC<K,V>(partitionSize);  m-=1;  this.mask=m;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=null;  String outputFile=null;  int v;  int a;  int i;  double sigmaX;  double sigmaY;  double N;  double sigmaXY;  double sigmaXsqr;  double sigmaYsqr;  double mean;  double meanY;  double radians2Deg=180 / Math.PI;  double slope;  double slopeInDegrees;  double slopeM1;  double slopeM2;  double slopeRMA;  double slopeDegM1;  double slopeDegM2;  double slopeDegRMA;  int progress;  int oldProgress=-1;  double midX=0;  double midY=0;  double maxLineLength=100;  double lineLength;  double Sxx, Syy, Sxy;  double centroidX;  double centroidY;  double deltaX, deltaY;  int[] parts={0};  int[] partStart={0};  boolean[] partHoleData={false};  double x, y;  int pointSt, pointEnd;  boolean useElongationRatio=true;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFile=args[0];  outputFile=args[1];  maxLineLength=Double.parseDouble(args[2]);  useElongationRatio=Boolean.parseBoolean(args[3]);  if ((inputFile == null) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ShapeFile input=new ShapeFile(inputFile);    double numberOfRecords=input.getNumberOfRecords();    if (input.getShapeType().getBaseType() != ShapeType.POLYGON) {      showFeedback("This function can only be applied to polygon type shapefiles.");      return;    }    DBFField fields[]=new DBFField[3];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    if (!useElongationRatio) {      fields[1]=new DBFField();      fields[1].setName("LINEARITY");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("ORIENT");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(10);      fields[2].setDecimalCount(3);    } else {      fields[1]=new DBFField();      fields[1].setName("ELONGATION");      fields[1].setDataType(DBFField.DBFDataType.NUMERIC);      fields[1].setFieldLength(10);      fields[1].setDecimalCount(3);      fields[2]=new DBFField();      fields[2].setName("ELONG_DIR");      fields[2].setDataType(DBFField.DBFDataType.NUMERIC);      fields[2].setFieldLength(10);      fields[2].setDecimalCount(3);    }    ShapeFile output=new ShapeFile(outputFile,ShapeType.POLYLINE,fields);    ShapeType inputType=input.getShapeType();    double[][] vertices=null;    double[] regressionData;    double rSquare;    if (!useElongationRatio) {      for (      ShapeFileRecord record : input.records) {        if (record.getShapeType() != ShapeType.NULLSHAPE) {switch (inputType) {case POLYGON:            whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());          vertices=recPolygon.getPoints();        partStart=recPolygon.getParts();      partHoleData=recPolygon.getPartHoleData();    midX=recPolygon.getXMin() + (recPolygon.getXMax() - recPolygon.getXMin()) / 2;  midY=recPolygon.getYMin() + (recPolygon.getYMax() - recPolygon.getYMin()) / 2;break;case POLYGONZ:PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();partStart=recPolygonZ.getParts();partHoleData=recPolygonZ.getPartHoleData();midX=recPolygonZ.getXMin() + (recPolygonZ.getXMax() - recPolygonZ.getXMin()) / 2;midY=recPolygonZ.getYMin() + (recPolygonZ.getYMax() - recPolygonZ.getYMin()) / 2;break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();partStart=recPolygonM.getParts();partHoleData=recPolygonM.getPartHoleData();midX=recPolygonM.getXMin() + (recPolygonM.getXMax() - recPolygonM.getXMin()) / 2;midY=recPolygonM.getYMin() + (recPolygonM.getYMax() - recPolygonM.getYMin()) / 2;break;}int numParts=partStart.length;for (int p=0; p < numParts; p++) {if (!partHoleData[p]) {regressionData=new double[5];rSquare=0;slope=0;slopeInDegrees=0;slopeDegM1=0;slopeDegM2=0;slopeDegRMA=0;slopeM1=0;slopeM2=0;slopeRMA=0;pointSt=partStart[p];if (p < numParts - 1) {pointEnd=partStart[p + 1];} else {pointEnd=vertices.length;}N=pointEnd - pointSt;for (v=pointSt; v < pointEnd; v++) {x=vertices[v][0] - midX;y=vertices[v][1] - midY;regressionData[0]+=x;regressionData[1]+=y;regressionData[2]+=x * y;regressionData[3]+=x * x;regressionData[4]+=y * y;}sigmaX=regressionData[0];mean=sigmaX / N;sigmaY=regressionData[1];meanY=sigmaY / N;sigmaXY=regressionData[2];sigmaXsqr=regressionData[3];sigmaYsqr=regressionData[4];if ((sigmaXsqr - mean * sigmaX) > 0) {slopeM1=(sigmaXY - mean * sigmaY) / (sigmaXsqr - mean * sigmaX);slopeDegM1=(Math.atan(slopeM1) * radians2Deg);if (slopeDegM1 < 0) {slopeDegM1=90 + -1 * slopeDegM1;} else {slopeDegM1=90 - slopeDegM1;}}Sxx=(sigmaXsqr / N - mean * mean);Syy=(sigmaYsqr / N - (sigmaY / N) * (sigmaY / N));Sxy=(sigmaXY / N - (sigmaX * sigmaY) / (N * N));if (Math.sqrt(Sxx * Syy) != 0) {rSquare=((Sxy / Math.sqrt(Sxx * Syy)) * (Sxy / Math.sqrt(Sxx * Syy)));}slopeRMA=Math.sqrt(Syy / Sxx);if ((sigmaXY - mean * sigmaY) / (sigmaXsqr - mean * sigmaX) < 0) {slopeRMA=-slopeRMA;}slopeDegRMA=(Math.atan(slopeRMA) * radians2Deg);if (slopeDegRMA < 0) {slopeDegRMA=90 + -1 * slopeDegRMA;} else {slopeDegRMA=90 - slopeDegRMA;}if ((sigmaYsqr - meanY * sigmaY) > 0) {slopeM2=(sigmaXY - meanY * sigmaX) / (sigmaYsqr - meanY * sigmaY);slopeM2=1 / slopeM2;slopeDegM2=(Math.atan(slopeM2) * radians2Deg);if (slopeDegM2 < 0) {slopeDegM2=90 + -1 * slopeDegM2;} else {slopeDegM2=90 - slopeDegM2;}}if (slopeDegM2 < 6 || slopeDegM2 > 174) {slope=slopeM2;slopeInDegrees=slopeDegM2;} else if (slopeDegM1 > 84 && slopeDegM1 < 96) {slope=slopeM1;slopeInDegrees=slopeDegM1;} else {slope=slopeRMA;slopeInDegrees=slopeDegRMA;}centroidX=mean + midX;centroidY=meanY + midY;lineLength=maxLineLength * rSquare;double[][] points=new double[2][2];if (slopeInDegrees > 0) {deltaX=Math.cos(slope) * lineLength;deltaY=Math.sin(slope) * lineLength;points[0][0]=centroidX - deltaX / 2.0;points[0][1]=centroidY - deltaY / 2.0;points[1][0]=centroidX + deltaX / 2.0;points[1][1]=centroidY + deltaY / 2.0;} else {points[0][0]=centroidX - lineLength / 2.0;points[0][1]=centroidY;points[1][0]=centroidX + lineLength / 2.0;points[1][1]=centroidY;}PolyLine poly=new PolyLine(parts,points);Object[] rowData=new Object[3];rowData[0]=new Double(record.getRecordNumber());rowData[1]=new Double(rSquare);rowData[2]=new Double(slopeInDegrees);output.addRecord(poly,rowData);}}if (cancelOp) {cancelOperation();return;}progress=(int)(record.getRecordNumber() / numberOfRecords * 100);if (progress > oldProgress) {updateProgress(progress);}oldProgress=progress;}}} else {double[][] verticesRotated=null;double[] newBoundingBox=new double[4];double psi=0;double DegreeToRad=Math.PI / 180;double[] axes=new double[2];double newXAxis=0;double newYAxis=0;double longAxis;double shortAxis;double elongation=0;double bearing=0;final double rightAngle=Math.toRadians(90);double boxCentreX=0;double boxCentreY=0;slope=0;for (ShapeFileRecord record : input.records) {switch (inputType) {case POLYGON:whitebox.geospatialfiles.shapefile.Polygon recPolygon=(whitebox.geospatialfiles.shapefile.Polygon)(record.getGeometry());vertices=recPolygon.getPoints();midX=recPolygon.getXMin() + (recPolygon.getXMax() - recPolygon.getXMin()) / 2;midY=recPolygon.getYMin() + (recPolygon.getYMax() - recPolygon.getYMin()) / 2;break;case POLYGONZ:PolygonZ recPolygonZ=(PolygonZ)(record.getGeometry());vertices=recPolygonZ.getPoints();midX=recPolygonZ.getXMin() + (recPolygonZ.getXMax() - recPolygonZ.getXMin()) / 2;midY=recPolygonZ.getYMin() + (recPolygonZ.getYMax() - recPolygonZ.getYMin()) / 2;break;case POLYGONM:PolygonM recPolygonM=(PolygonM)(record.getGeometry());vertices=recPolygonM.getPoints();midX=recPolygonM.getXMin() + (recPolygonM.getXMax() - recPolygonM.getXMin()) / 2;midY=recPolygonM.getYMin() + (recPolygonM.getYMax() - recPolygonM.getYMin()) / 2;break;}int numVertices=vertices.length;verticesRotated=new double[numVertices][2];axes[0]=9999999;axes[1]=9999999;double sumX=0;double sumY=0;N=0;boolean calculatedCentroid=false;for (int m=0; m <= 180; m++) {psi=-m * 0.5 * DegreeToRad;for (int n=0; n < numVertices; n++) {x=vertices[n][0] - midX;y=vertices[n][1] - midY;if (!calculatedCentroid) {sumX+=x;sumY+=y;N++;}verticesRotated[n][0]=(x * Math.cos(psi)) - (y * Math.sin(psi));verticesRotated[n][1]=(x * Math.sin(psi)) + (y * Math.cos(psi));}newBoundingBox[0]=Double.MAX_VALUE;newBoundingBox[1]=Double.MIN_VALUE;newBoundingBox[2]=Double.MAX_VALUE;newBoundingBox[3]=Double.MIN_VALUE;for (int n=0; n < numVertices; n++) {x=verticesRotated[n][0];y=verticesRotated[n][1];if (x < newBoundingBox[0]) {newBoundingBox[0]=x;}if (x > newBoundingBox[1]) {newBoundingBox[1]=x;}if (y < newBoundingBox[2]) {newBoundingBox[2]=y;}if (y > newBoundingBox[3]) {newBoundingBox[3]=y;}}newXAxis=newBoundingBox[1] - newBoundingBox[0] + 1;newYAxis=newBoundingBox[3] - newBoundingBox[2] + 1;if ((axes[0] * axes[1]) > (newXAxis * newYAxis)) {axes[0]=newXAxis;axes[1]=newYAxis;if (axes[0] > axes[1]) {slope=-psi;} else {slope=-(rightAngle + psi);}x=newBoundingBox[0] + newXAxis / 2;y=newBoundingBox[2] + newYAxis / 2;boxCentreX=midX + (x * Math.cos(-psi)) - (y * Math.sin(-psi));boxCentreY=midY + (x * Math.sin(-psi)) + (y * Math.cos(-psi));}}longAxis=Math.max(axes[0],axes[1]);shortAxis=Math.min(axes[0],axes[1]);elongation=1 - shortAxis / longAxis;centroidX=(sumX / N) + midX;centroidY=(sumY / N) + midY;lineLength=maxLineLength * elongation;double[][] points=new double[2][2];deltaX=Math.cos(slope) * lineLength;deltaY=Math.sin(slope) * lineLength;points[0][0]=boxCentreX - deltaX / 2.0;points[0][1]=boxCentreY - deltaY / 2.0;points[1][0]=boxCentreX + deltaX / 2.0;points[1][1]=boxCentreY + deltaY / 2.0;PolyLine poly=new PolyLine(parts,points);Object[] rowData=new Object[3];rowData[0]=new Double(record.getRecordNumber());rowData[1]=new Double(elongation);bearing=90 - Math.toDegrees(slope);rowData[2]=new Double(bearing);output.addRecord(poly,rowData);if (cancelOp) {cancelOperation();return;}progress=(int)(record.getRecordNumber() / numberOfRecords * 100);if (progress > oldProgress) {updateProgress(progress);}oldProgress=progress;}}output.write();returnData(outputFile);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  void moveBy(float dx,float dy){  Rect invalRect=new Rect(mDrawRect);  mCropRect.offset(dx,dy);  mCropRect.offset(Math.max(0,mImageRect.left - mCropRect.left),Math.max(0,mImageRect.top - mCropRect.top));  mCropRect.offset(Math.min(0,mImageRect.right - mCropRect.right),Math.min(0,mImageRect.bottom - mCropRect.bottom));  mDrawRect=computeLayout();  invalRect.union(mDrawRect);  invalRect.inset(-10,-10);  mContext.invalidate();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case RECEIVERS:    return isSetReceivers();case SENDER:  return isSetSender();case SUBJECT:return isSetSubject();case MESSAGE_TYPE:return isSetMessageType();case EXTEND_ATTRS:return isSetExtendAttrs();case ATTACHMENTS:return isSetAttachments();case PARAMS:return isSetParams();default :;}throw new IllegalStateException();}  }
class C{  public ThumbNailBuilder(int width,int height){  init(width,height,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ExpConstant(Type units){  super(units);}  }
class C{  @Override public synchronized void parse(InputStream in,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (in == null) {    throw new IllegalArgumentException("Input stream can not be 'null'");  }  try {    parse(new InputStreamReader(new BOMInputStream(in,false),Charset.forName("UTF-8")),baseURI);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public static float[] RGBtoHSL(Color color){  return RGBtoHSL(color.getRed(),color.getGreen(),color.getBlue(),null);}  }
class C{  public ImmutableTypeToInstanceMap<B> build(){  return new ImmutableTypeToInstanceMap<B>(mapBuilder.build());}  }
class C{  public EffectWeightedRandomList concat(@Nonnull EffectWeightedRandomList other){  effects.addAll(other.effects);  return this;}  }
class C{  public void add(int index,Script obj){  assert false : "CodeFragmentList.add(index, ...) without line ref";}  }
class C{  void parseAttributeSpecificationList(Element elem) throws IOException {  while (true) {    skipSpace();switch (ch) {case '/':case '>':case '<':case -1:      return;case '-':    if ((ch=readCh()) == '-') {      ch=readCh();      parseComment();      strpos=0;    } else {      error("invalid.tagchar","-",elem.getName());      ch=readCh();    }  continue;}AttributeList att;String attname;String attvalue;if (parseIdentifier(true)) {attname=getString(0);skipSpace();if (ch == '=') {  ch=readCh();  skipSpace();  att=elem.getAttribute(attname);  attvalue=parseAttributeValue((att != null) && (att.type != CDATA) && (att.type != NOTATION)&& (att.type != NAME));} else {  attvalue=attname;  att=elem.getAttributeByValue(attvalue);  if (att == null) {    att=elem.getAttribute(attname);    if (att != null) {      attvalue=att.getValue();    } else {      attvalue=null;    }  }}} else if (!strict && ch == ',') {ch=readCh();continue;} else if (!strict && ch == '"') {ch=readCh();skipSpace();if (parseIdentifier(true)) {  attname=getString(0);  if (ch == '"') {    ch=readCh();  }  skipSpace();  if (ch == '=') {    ch=readCh();    skipSpace();    att=elem.getAttribute(attname);    attvalue=parseAttributeValue((att != null) && (att.type != CDATA) && (att.type != NOTATION));  } else {    attvalue=attname;    att=elem.getAttributeByValue(attvalue);    if (att == null) {      att=elem.getAttribute(attname);      if (att != null) {        attvalue=att.getValue();      }    }  }} else {  char str[]={(char)ch};  error("invalid.tagchar",new String(str),elem.getName());  ch=readCh();  continue;}} else if (!strict && (attributes.isEmpty()) && (ch == '=')) {ch=readCh();skipSpace();attname=elem.getName();att=elem.getAttribute(attname);attvalue=parseAttributeValue((att != null) && (att.type != CDATA) && (att.type != NOTATION));} else if (!strict && (ch == '=')) {ch=readCh();skipSpace();attvalue=parseAttributeValue(true);error("attvalerr");return;} else {char str[]={(char)ch};error("invalid.tagchar",new String(str),elem.getName());if (!strict) {  ch=readCh();  continue;} else {  return;}}if (att != null) {attname=att.getName();} else {error("invalid.tagatt",attname,elem.getName());}if (attributes.isDefined(attname)) {error("multi.tagatt",attname,elem.getName());}if (attvalue == null) {attvalue=((att != null) && (att.value != null)) ? att.value : HTML.NULL_ATTRIBUTE_VALUE;} else if ((att != null) && (att.values != null) && !att.values.contains(attvalue)) {error("invalid.tagattval",attname,elem.getName());}HTML.Attribute attkey=HTML.getAttributeKey(attname);if (attkey == null) {attributes.addAttribute(attname,attvalue);} else {attributes.addAttribute(attkey,attvalue);}}}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("svlighttestdata.zip"),"svlight.txt");}  }
class C{  public void onReqRealTimeBars(Contract contract,boolean mktData) throws BrokerModelException {  try {    if (m_client.isConnected()) {      if (this.isRealtimeBarsRunning(contract)) {        throw new BrokerModelException(contract.getId(),3030,"RealtimeBars request is already in progress for: " + contract.getSymbol() + " Please wait or cancel.");      }      m_realTimeBarsRequests.put(contract.getId(),contract);      Vector<TagValue> realTimeBarOptions=new Vector<>();      m_client.reqRealTimeBars(contract.getId(),TWSBrokerModel.getIBContract(contract),5,backfillWhatToShow,(backfillUseRTH > 0),realTimeBarOptions);      if (mktData) {        onReqMarketData(contract,genericTicklist,false);      }    } else {      throw new BrokerModelException(contract.getId(),3040,"Not conected to TWS historical data cannot be retrieved");    }  } catch (  Exception ex) {    throw new BrokerModelException(contract.getId(),3050,"Error broker data Symbol: " + contract.getSymbol() + " Msg: "+ ex.getMessage());  }}  }
class C{  public XMLBuilder addText(java.io.Reader reader) throws java.io.IOException {switch (state) {case STATE_ELEM_OPENED:    writer.write('>');case STATE_TEXT_ADDED:case STATE_NOTHING:  break;default :break;}writer.write("<![CDATA[");char[] writeBuffer=new char[8192];for (int br=reader.read(writeBuffer); br != -1; br=reader.read(writeBuffer)) {writer.write(new String(writeBuffer,0,br));}writer.write("]]>");state=STATE_TEXT_ADDED;return this;}  }
class C{  public static String encrypt(String text) throws GeneralSecurityException {  return new String(encrypt(text.getBytes()));}  }
class C{  public void applyBlock(int x,int y,int z,BaseBlock block){}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  SVGOMToBeImplementedElement ae=(SVGOMToBeImplementedElement)n;  ae.localName=localName;  return n;}  }
class C{  public void clear(){  int h=head;  int t=tail;  if (h != t) {    head=tail=0;    int i=h;    int mask=elements.length - 1;    do {      elements[i]=null;      i=(i + 1) & mask;    } while (i != t);  }}  }
class C{  private boolean streamMatchesAttributes(GuildEntity guild,Stream stream){  if (stream == null)   return false;  boolean hasGame=false;  for (  GameEntity game : guild.getGames()) {    if (game.getName().equals("") && guild.getGames().size() == 1) {      hasGame=true;      break;    }    if (game.getPlatform().getPlatformId() == platform.getPlatformId() && game.getName().equalsIgnoreCase(stream.getChannel().getGame())) {      hasGame=true;      break;    }  }  if (!hasGame)   return false;  boolean hasTag=guild.getTags().isEmpty();  List<String> split=new ArrayList<>();  if (null != stream.getChannel().getStatus()) {    String status=stream.getChannel().getStatus().toLowerCase();    while (status.contains(" ")) {      split.add(status);      status=status.substring(status.indexOf(" ") + 1);    }    split.add(status);  }  for (  TagEntity tag : guild.getTags()) {    for (    String word : split) {      if (word.startsWith(tag.getName().toLowerCase())) {        hasTag=true;        break;      }    }    if (hasTag)     break;  }  if (!hasTag)   return false;  return true;}  }
class C{  public GeographicalDistance(){  super();}  }
class C{  public static long freeSpace(){  try {    final StatFs stat=new StatFs(hidden);    final long bytesAvailable=(long)stat.getBlockSize() * (long)stat.getBlockCount();    final long megAvailable=bytesAvailable / 1048576;    if (Cfg.DEBUG) {    }    return bytesAvailable;  } catch (  Exception ex) {    if (Cfg.EXCEPTION) {      if (Cfg.DEBUG) {        Check.log(TAG + " (freeSpace) ERROR: " + ex);      }    }    return 0;  }}  }
class C{  public void historicalDataComplete(final Tradestrategy tradestrategy){  try {    if (!m_brokerModel.isBrokerDataOnly()) {      if (tradestrategy.getTrade()) {        if (tradestrategy.isThereOpenTradePosition()) {          int result=JOptionPane.showConfirmDialog(this.getFrame(),"Position is open for: " + tradestrategy.getContract().getSymbol() + " do you want to run the Strategy ?","Information",JOptionPane.YES_NO_OPTION);          if (result == JOptionPane.YES_OPTION) {            if (tradestrategy.getStrategy().hasStrategyManager()) {              createStrategy(tradestrategy.getStrategy().getStrategyManager().getClassName(),tradestrategy);            } else {              createStrategy(tradestrategy.getStrategy().getClassName(),tradestrategy);            }          } else {            int result1=JOptionPane.showConfirmDialog(this.getFrame(),"Position is open for: " + tradestrategy.getContract().getSymbol() + " do you want to delete all Orders?","Information",JOptionPane.YES_NO_OPTION);            if (result1 == JOptionPane.YES_OPTION) {              m_tradePersistentModel.removeTradestrategyTradeOrders(tradestrategy);            }          }        } else {          createStrategy(tradestrategy.getStrategy().getClassName(),tradestrategy);        }      }    }  } catch (  Exception ex) {    this.setErrorMessage("Could not start strategy: " + tradestrategy.getStrategy().getName() + " for Symbol: "+ tradestrategy.getContract().getSymbol(),ex.getMessage(),ex);  }}  }
class C{  @DSSafe(DSCat.GUI) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:43.551 -0500",hash_original_method="EAACB5866396964CA4004FBBF9350F29",hash_generated_method="85C49A64CA88551D9AB324C5AED2C0C3") public void notifyVerticalEdgeReached(int startY,int finalY,int overY){  mScrollerY.notifyEdgeReached(startY,finalY,overY);}  }
class C{  public static double parseDouble(CharSequence csq) throws NumberFormatException {  Cursor cursor=new Cursor();  double result=parseDouble(csq,cursor);  if (!cursor.atEnd(csq))   throw new IllegalArgumentException("Extraneous characters \"" + cursor.tail(csq) + "\"");  return result;}  }
class C{  private ForeignKey findCorrespondingForeignKey(Table table,ForeignKey fk){  for (int fkIdx=0; fkIdx < table.getForeignKeyCount(); fkIdx++) {    ForeignKey curFk=table.getForeignKey(fkIdx);    if ((caseSensitive && fk.equals(curFk)) || (!caseSensitive && fk.equalsIgnoreCase(curFk))) {      return curFk;    }  }  return null;}  }
class C{  public Rational multiply(Rational secondRational){  BigInteger n=r[0].multiply(secondRational.getNumerator());  BigInteger d=r[1].multiply(secondRational.getDenominator());  return new Rational(n,d);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public boolean isGetAllContactsFast(){  return Display.getInstance().isGetAllContactsFast();}  }
class C{  public void remove(int offset,int length){  if (offset < 0 || offset >= _pos) {    throw new ArrayIndexOutOfBoundsException(offset);  }  if (offset == 0) {    System.arraycopy(_data,length,_data,0,_pos - length);  } else   if (_pos - length == offset) {  } else {    System.arraycopy(_data,offset + length,_data,offset,_pos - (offset + length));  }  _pos-=length;}  }
class C{  public void uploadFile(String uploadKey){synchronized (mPendingUploads) {    mCurrentUpload=mPendingUploads.get(uploadKey);  }  if (mCurrentUpload != null) {    if (AccountUtils.exists(mCurrentUpload.getAccount(),getApplicationContext())) {      Log_OC.d(TAG,"Account " + mCurrentUpload.getAccount().name + " exists");      notifyUploadStart(mCurrentUpload);      RemoteOperationResult uploadResult=null, grantResult;      try {        if (mUploadClient == null || !mLastAccount.equals(mCurrentUpload.getAccount())) {          mLastAccount=mCurrentUpload.getAccount();          mStorageManager=new FileDataStorageManager(mLastAccount,getContentResolver());          OwnCloudAccount ocAccount=new OwnCloudAccount(mLastAccount,this);          mUploadClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,this);        }        String remoteParentPath=new File(mCurrentUpload.getRemotePath()).getParent();        remoteParentPath=remoteParentPath.endsWith(OCFile.PATH_SEPARATOR) ? remoteParentPath : remoteParentPath + OCFile.PATH_SEPARATOR;        grantResult=grantFolderExistence(remoteParentPath);        if (grantResult.isSuccess()) {          OCFile parent=mStorageManager.getFileByPath(remoteParentPath);          mCurrentUpload.getFile().setParentId(parent.getFileId());          uploadResult=mCurrentUpload.execute(mUploadClient);          if (uploadResult.isSuccess()) {            saveUploadedFile();          }        } else {          uploadResult=grantResult;        }      } catch (      AccountsException|IOException e) {        Log_OC.e(TAG,"Error while trying to get autorization for " + mLastAccount.name,e);        uploadResult=new RemoteOperationResult(e);      } finally {synchronized (mPendingUploads) {          mPendingUploads.remove(uploadKey);          Log_OC.i(TAG,"Remove CurrentUploadItem from pending upload Item Map.");        }        if (uploadResult != null && uploadResult.isException()) {          mUploadClient=null;        }      }      notifyUploadResult(uploadResult,mCurrentUpload);      sendFinalBroadcast(mCurrentUpload,uploadResult);    } else {      Log_OC.d(TAG,"Account " + mCurrentUpload.getAccount().toString() + " doesn't exist");      cancelUploadForAccount(mCurrentUpload.getAccount().name);    }  }}  }
class C{  public void testDynamicRepeatedMessageNull() throws Exception {  Descriptors.Descriptor descriptor=TestRequired.getDescriptor();  DynamicMessage result=DynamicMessage.newBuilder(TestAllTypes.getDescriptor()).mergeFrom(DynamicMessage.newBuilder(MERGE_SOURCE).build()).build();  assertTrue(result.getField(result.getDescriptorForType().findFieldByName("repeated_foreign_message")) instanceof List<?>);  assertEquals(result.getRepeatedFieldCount(result.getDescriptorForType().findFieldByName("repeated_foreign_message")),0);}  }
class C{  public static int ENOCSI(){  return 50;}  }
class C{  private static boolean isController(Resource resource){  final Boolean b1=resource.getHandlerClasses().stream().map(null).reduce(Boolean.FALSE,null);  final Boolean b2=resource.getHandlerInstances().stream().map(null).reduce(Boolean.FALSE,null);  return b1 || b2;}  }
class C{  public void init(String logFile) throws Exception {  FileTarget target=new FileTarget(new File(logFile),false,new VelocityFormatter("%{time} %{message}\\n%{throwable}"));  logger=Hierarchy.getDefaultHierarchy().getLoggerFor(rsvc.toString());  logger.setPriority(Priority.DEBUG);  logger.setLogTargets(new LogTarget[]{target});}  }
class C{  public static int generate(int hash,final byte[] buffer,final int offset,final int length){  return (int)Murmur64.generate(hash,buffer,offset,length);}  }
class C{  protected static void createEmptyFile(Path path) throws IOException {  FSDataOutputStream out=sFileSystem.create(path);  out.close();}  }
class C{  public boolean isCanReport(){  Object oo=get_Value(COLUMNNAME_IsCanReport);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @SuppressWarnings("rawtypes") public List<Object> buildCommandLineParts(CWLJob job,File workingDir,FilePathMapper filePathMapper) throws BindingException {  logger.info("Building command line parts...");  CWLCommandLineTool commandLineTool=(CWLCommandLineTool)job.getApp();  List<CWLInputPort> inputPorts=commandLineTool.getInputs();  List<Object> result=new LinkedList<>();  try {    List<Object> baseCmds=commandLineTool.getBaseCmd(job);    result.addAll(baseCmds);    List<CWLCommandLinePart> commandLineParts=new LinkedList<>();    if (commandLineTool.hasArguments()) {      for (int i=0; i < commandLineTool.getArguments().size(); i++) {        int position=0;        Object argBinding=commandLineTool.getArguments().get(i);        if (isShellQuote(argBinding)) {          position=getShellQuotePosition(argBinding);          argBinding=getShellQuoteValue(argBinding);        }        if (argBinding instanceof String) {          Object arg=CWLExpressionResolver.resolve(argBinding,job,null);          CWLCommandLinePart commandLinePart=new CWLCommandLinePart.Builder(position,false).part(arg).keyValue("").build();          commandLinePart.setArgsArrayOrder(i);          commandLineParts.add(commandLinePart);          continue;        }        Object argValue=commandLineTool.getArgument(job,argBinding);        Map<String,Object> emptySchema=new HashMap<>();        CWLCommandLinePart commandLinePart=buildCommandLinePart(job,null,argBinding,argValue,emptySchema,null);        if (commandLinePart != null) {          commandLinePart.setArgsArrayOrder(i);          commandLineParts.add(commandLinePart);        }      }    }    for (    CWLInputPort inputPort : inputPorts) {      String key=inputPort.getId();      Object schema=inputPort.getSchema();      if (schema instanceof Map && ((Map)schema).get("type").equals("record") && inputPort.getInputBinding() == null) {        List<CWLCommandLinePart> parts=buildRecordCommandLinePart(job,job.getInputs().get(CWLSchemaHelper.normalizeId(key)),schema);        commandLineParts.addAll(parts);      } else {        CWLCommandLinePart part=buildCommandLinePart(job,inputPort,inputPort.getInputBinding(),job.getInputs().get(CWLSchemaHelper.normalizeId(key)),schema,key);        if (part != null) {          commandLineParts.add(part);        }      }    }    Collections.sort(commandLineParts,new CWLCommandLinePart.CommandLinePartComparator());    for (    CWLCommandLinePart part : commandLineParts) {      List<Object> flattenedObjects=part.flatten();      for (      Object obj : flattenedObjects) {        result.add(obj);      }    }  } catch (  CWLExpressionException e) {    logger.error("Failed to build command line.",e);    throw new BindingException("Failed to build command line.",e);  }  return result;}  }
class C{  public void print(boolean b) throws IOException {  if (_startLine)   printIndent();  _os.print(b);  _lastCr=false;}  }
class C{  private BusinessObjectDataEntity createBusinessObjectDataEntityFromBusinessObjectDataInvalidateUnregisteredRequest(BusinessObjectFormatEntity businessObjectFormatEntity,BusinessObjectDataInvalidateUnregisteredRequest request,int businessObjectDataVersion,boolean latestVersion){  BusinessObjectDataEntity businessObjectDataEntity=new BusinessObjectDataEntity();  businessObjectDataEntity.setBusinessObjectFormat(businessObjectFormatEntity);  businessObjectDataEntity.setPartitionValue(request.getPartitionValue());  businessObjectDataEntity.setPartitionValue2(herdCollectionHelper.safeGet(request.getSubPartitionValues(),0));  businessObjectDataEntity.setPartitionValue3(herdCollectionHelper.safeGet(request.getSubPartitionValues(),1));  businessObjectDataEntity.setPartitionValue4(herdCollectionHelper.safeGet(request.getSubPartitionValues(),2));  businessObjectDataEntity.setPartitionValue5(herdCollectionHelper.safeGet(request.getSubPartitionValues(),3));  businessObjectDataEntity.setVersion(businessObjectDataVersion);  businessObjectDataEntity.setLatestVersion(latestVersion);  businessObjectDataEntity.setStatus(businessObjectDataStatusDao.getBusinessObjectDataStatusByCode(BusinessObjectDataStatusEntity.VALID));  return businessObjectDataDao.saveAndRefresh(businessObjectDataEntity);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  private boolean overloaded(MethodSymbol m,TypeSymbol c,Types types){  for (com.redhat.ceylon.langtools.tools.javac.util.List<Type> is=types.interfaces(c.type); is.nonEmpty(); is=is.tail) {    TypeSymbol i=is.head.tsym;    if (overloadedIn(m,i,types))     return true;    if (overloaded(m,i,types))     return true;  }  return false;}  }
class C{  @Override protected void shutdown(){  Arrays.fill(mac_write_secret,(byte)0);  Arrays.fill(mac_read_secret,(byte)0);  super.shutdown();}  }
class C{  IndexGenerator(byte[] seed,NTRUEncryptionParameters params){  this.seed=seed;  N=params.N;  c=params.c;  minCallsR=params.minCallsR;  totLen=0;  remLen=0;  counter=0;  hashAlg=params.hashAlg;  hLen=hashAlg.getDigestSize();  initialized=false;}  }
class C{  public Quaternion subtract(Quaternion q){  this.x-=q.x;  this.y-=q.y;  this.z-=q.z;  this.w-=q.w;  return this;}  }
class C{  public boolean hasRecurrence(){  return super.hasElement(Recurrence.KEY);}  }
class C{  public static boolean distributedDeviceHasDefaultNamingConvention(String deviceName,List<String> claimedVolumeNames){  String distDevicePrefix=VPlexApiConstants.DIST_DEVICE_PREFIX + VPlexApiConstants.DIST_DEVICE_NAME_DELIM;  if (!deviceName.startsWith(distDevicePrefix)) {    s_logger.info("Distributed device {} does not start with the expected prefix",deviceName);    return false;  }  if (deviceName.equals(distDevicePrefix)) {    s_logger.info("Distributed device {} consists only of the expected prefix",deviceName);    return false;  }  String deviceNameNoPrefix=deviceName.substring(distDevicePrefix.length());  String[] deviceNameComponents=deviceNameNoPrefix.split(VPlexApiConstants.DIST_DEVICE_NAME_DELIM);  if (deviceNameComponents.length != 2) {    s_logger.info("Distributed device {} does not consist of exactly 2 components",deviceName);    return false;  }  boolean allComponentsMatched=true;  for (  String deviceNameComponent : deviceNameComponents) {    boolean match=false;    for (    String claimedVolumeName : claimedVolumeNames)     if (deviceNameComponent.equals(claimedVolumeName)) {      match=true;      break;    }    if (!match) {      allComponentsMatched=false;      break;    }  }  if (!allComponentsMatched) {    s_logger.info("Distributed device name {} does not contain claimed volumes {}",deviceName,claimedVolumeNames);    return false;  }  return true;}  }
class C{  public Gap(final File file) throws IOException {  super();  DataInputStream is;  try {    is=new DataInputStream(new BufferedInputStream(new FileInputStream(file),(Integer.SIZE + Long.SIZE) * 1024));  } catch (  final OutOfMemoryError e) {    is=new DataInputStream(new FileInputStream(file));  }  long p;  int l;  while (true) {    try {      p=is.readLong();      l=is.readInt();      this.put(Long.valueOf(p),Integer.valueOf(l));    } catch (    final IOException e) {      break;    }  }  is.close();  is=null;}  }
class C{  public static void dumpCursor(ICursor cursor,StringBuilder builder){  dumpCursor(cursor,20,builder);}  }
class C{  public AnnotationMirror aliasedAnnotation(AnnotationMirror a){  TypeElement elem=(TypeElement)a.getAnnotationType().asElement();  String qualName=elem.getQualifiedName().toString();  return aliases.get(qualName);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);}  }
class C{  public final java.lang.String readUTF() throws java.io.IOException {  return null;}  }
class C{  @Override public java.util.List<JToolBar> createToolBars(Application a,@Nullable View pr){  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  ODGView p=(ODGView)pr;  DrawingEditor editor;  if (p == null) {    editor=getSharedEditor();  } else {    editor=p.getEditor();  }  LinkedList<JToolBar> list=new LinkedList<JToolBar>();  JToolBar tb;  tb=new JToolBar();  addCreationButtonsTo(tb,editor);  tb.setName(labels.getString("window.drawToolBar.title"));  list.add(tb);  tb=new JToolBar();  addAttributesButtonsTo(tb,editor);  tb.setName(labels.getString("window.attributesToolBar.title"));  list.add(tb);  tb=new JToolBar();  ButtonFactory.addAlignmentButtonsTo(tb,editor);  tb.setName(labels.getString("window.alignmentToolBar.title"));  list.add(tb);  return list;}  }
class C{  private void constructResourcesPanel(){  myAllocationsPanel=new TaskAllocationsPanel(selectedTasks[0],myHumanResourceManager,myRoleManager);  resourcesPanel=myAllocationsPanel.getComponent();}  }
class C{  public static final boolean validateGroupName(String sGroupName){  if (sGroupName.length() == 0) {    return false;  }  return sGroupName.matches("^.{8}$");}  }
class C{  private void recycleViewsFromStart(RecyclerView.Recycler recycler,int dt){  if (dt < 0) {    if (DEBUG) {      Log.d(TAG,"Called recycle from start with a negative value. This might happen" + " during layout changes but may be sign of a bug");    }    return;  }  final int limit=dt;  final int childCount=getChildCount();  if (mShouldReverseLayout) {    for (int i=childCount - 1; i >= 0; i--) {      View child=getChildAt(i);      if (mOrientationHelper.getDecoratedEnd(child) > limit) {        recycleChildren(recycler,childCount - 1,i);        return;      }    }  } else {    for (int i=0; i < childCount; i++) {      View child=getChildAt(i);      if (mOrientationHelper.getDecoratedEnd(child) > limit) {        recycleChildren(recycler,0,i);        return;      }    }  }}  }
class C{  public void addCharEntitiesRange(String[] symbols,int startcode){  if (userDefinedCharEntities == null) {    userDefinedCharEntities=new Hashtable();  }  int slen=symbols.length;  for (int i=0; i < slen; i++) {    if (symbols[i] != null) {      userDefinedCharEntities.put(trimCharEntity(symbols[i]),new Integer(startcode + i));    }  }}  }
class C{  public static List<U32> computeOurVersionBitmaps(Set<OFVersion> ofVersions){  if (ofVersions == null || ofVersions.isEmpty()) {    throw new IllegalStateException("OpenFlow version list should never be null or empty at this point. Make sure it's set in the OFSwitchManager.");  }  int pos=1;  int size=32;  int tempBitmap=0;  List<U32> bitmaps=new ArrayList<U32>();  ArrayList<OFVersion> sortedVersions=new ArrayList<OFVersion>(ofVersions);  Collections.sort(sortedVersions);  for (  OFVersion v : sortedVersions) {    if (v.getWireVersion() > pos * size - 1) {      bitmaps.add(U32.ofRaw(tempBitmap));      tempBitmap=0;      pos++;    }    tempBitmap=tempBitmap | (1 << (v.getWireVersion() % size));  }  if (tempBitmap != 0) {    bitmaps.add(U32.ofRaw(tempBitmap));  }  return bitmaps;}  }
class C{  @Override public ExampleSet createExampleSet(Iterator<AttributeRole> newSpecialAttributes){  Map<Attribute,String> specialAttributes=new LinkedHashMap<>();  while (newSpecialAttributes.hasNext()) {    AttributeRole role=newSpecialAttributes.next();    specialAttributes.put(role.getAttribute(),role.getSpecialName());  }  return new SimpleExampleSet(this,specialAttributes);}  }
class C{  protected void NodeTest(int axesType) throws javax.xml.transform.TransformerException {  if (lookahead('(',1)) {    Object nodeTestOp=Keywords.getNodeType(m_token);    if (null == nodeTestOp) {      error(XPATHErrorResources.ER_UNKNOWN_NODETYPE,new Object[]{m_token});    } else {      nextToken();      int nt=((Integer)nodeTestOp).intValue();      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),nt);      m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);      consumeExpected('(');      if (OpCodes.NODETYPE_PI == nt) {        if (!tokenIs(')')) {          Literal();        }      }      consumeExpected(')');    }  } else {    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.NODENAME);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    if (lookahead(':',1)) {      if (tokenIs('*')) {        m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ELEMWILDCARD);      } else {        m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);        if (!Character.isLetter(m_tokenChar) && !tokenIs('_')) {          error(XPATHErrorResources.ER_EXPECTED_NODE_TEST,null);        }      }      nextToken();      consumeExpected(':');    } else {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.EMPTY);    }    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    if (tokenIs('*')) {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ELEMWILDCARD);    } else {      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),m_queueMark - 1);      if (!Character.isLetter(m_tokenChar) && !tokenIs('_')) {        error(XPATHErrorResources.ER_EXPECTED_NODE_TEST,null);      }    }    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  }}  }
class C{  public void render(final float delta){  if (currentController != null) {    currentController.render(delta);  }}  }
class C{  public static String[] toStringArrayEL(Array array){  String[] arr=new String[array.size()];  for (int i=0; i < arr.length; i++) {    arr[i]=Caster.toString(array.get(i + 1,null),null);  }  return arr;}  }
class C{  public synchronized void internalRemoveRelationships(Vertex type){  Map<Relationship,Relationship> relationships=getRelationships().get(type);  if (relationships == null) {    return;  }  for (  Relationship relationship : relationships.values()) {    this.network.removeRelationship(relationship);    if (this.allRelationships != null) {      this.allRelationships.remove(relationship);    }  }  getRelationships().remove(type);}  }
class C{  public void mousePressed(MouseEvent e){}  }
class C{  public static RefactoringStatus checkPackageName(String name,IJavaElement context){  return checkName(name,JavaConventionsUtil.validatePackageName(name,context));}  }
class C{  static public boolean evaluateBooleanQuery(final AbstractTripleStore store,final ASTContainer astContainer,final BindingSet globallyScopedBS,final Dataset dataset) throws QueryEvaluationException {  final AST2BOpContext context=new AST2BOpContext(astContainer,store);  final DeferredResolutionResult resolved;  try {    resolved=ASTDeferredIVResolution.resolveQuery(store,astContainer,globallyScopedBS,dataset,context);  } catch (  MalformedQueryException e) {    throw new QueryEvaluationException(e.getMessage(),e);  }  if (resolved.dataset != null) {    astContainer.getOriginalAST().setDataset(new DatasetNode(resolved.dataset,false));  }  astContainer.clearOptimizedAST();  final IBindingSet[] globallyScopedBSAsList=toBindingSet(resolved.bindingSet);  AST2BOpUtility.convert(context,globallyScopedBSAsList);  final QueryRoot optimizedQuery=astContainer.getOptimizedAST();  final boolean materializeProjectionInQuery=context.materializeProjectionInQuery && !optimizedQuery.hasSlice();  CloseableIteration<BindingSet,QueryEvaluationException> itr=null;  try {    itr=ASTEvalHelper.evaluateQuery(astContainer,context,materializeProjectionInQuery,new IVariable[0]);    return itr.hasNext();  }  finally {    if (itr != null) {      itr.close();    }  }}  }
class C{  private NamedValue[] chargeProperties(AlfrescoDatosEspecificosVO datosEspecificosVO){  Iterator it=datosEspecificosVO.getValues().values().iterator();  NamedValue[] titledProps=new NamedValue[datosEspecificosVO.getValues().size() + 1];  int i=1;  while (it.hasNext()) {    AlfrescoDatosEspecificosValueVO MapVO=(AlfrescoDatosEspecificosValueVO)it.next();    titledProps[i]=Utils.createNamedValue(Constants.createQNameString(MapVO.getContentName(),MapVO.getName()),MapVO.getValue());    i++;  }  return titledProps;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"add");  if (instruction.getOperands().size() != 2) {    throw new InternalTranslationException("Error: Argument instruction is not a add instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final List<? extends IOperandTree> operands=instruction.getOperands();  final IOperandTree targetOperand=operands.get(0);  final IOperandTree sourceOperand=operands.get(1);  final TranslationResult sourceResult=Helpers.translateOperand(environment,offset,sourceOperand,true);  instructions.addAll(sourceResult.getInstructions());  offset=baseOffset + instructions.size();  final TranslationResult targetResult=Helpers.translateOperand(environment,offset,targetOperand,true);  instructions.addAll(targetResult.getInstructions());  offset=baseOffset + instructions.size();  final OperandSize size=targetResult.getSize();  final String sourceRegister=sourceResult.getRegister();  final String targetRegister=targetResult.getRegister();  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String carryMask=String.valueOf(Helpers.getCarryMask(size));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String shiftCarry=String.valueOf(-size.getBitSize());  final OperandSize resultSize=TranslationHelpers.getNextSize(size);  final String msb1=environment.getNextVariableString();  final String msb2=environment.getNextVariableString();  final String addResult=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String msbSameBefore=environment.getNextVariableString();  final String msbSameBeforeNeg=environment.getNextVariableString();  final String msbChanged=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String tempCf=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,sourceRegister,size,msbMask,size,msb1));  instructions.add(ReilHelpers.createAnd(offset + 1,size,targetRegister,size,msbMask,size,msb2));  instructions.add(ReilHelpers.createAdd(offset + 2,size,sourceRegister,size,targetRegister,resultSize,addResult));  instructions.add(ReilHelpers.createAnd(offset + 3,resultSize,addResult,resultSize,msbMask,size,msbResult));  instructions.add(ReilHelpers.createBsh(offset + 4,size,msbResult,size,shiftValue,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createXor(offset + 5,size,msb1,size,msb2,size,msbSameBefore));  instructions.add(ReilHelpers.createXor(offset + 6,size,msbSameBefore,size,msbMask,size,msbSameBeforeNeg));  instructions.add(ReilHelpers.createXor(offset + 7,size,msb1,size,msbResult,size,msbChanged));  instructions.add(ReilHelpers.createAnd(offset + 8,size,msbSameBeforeNeg,size,msbChanged,size,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 9,size,tempOf,size,shiftValue,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 10,resultSize,addResult,resultSize,carryMask,resultSize,tempCf));  instructions.add(ReilHelpers.createBsh(offset + 11,resultSize,tempCf,resultSize,shiftCarry,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 12,resultSize,addResult,resultSize,truncateMask,size,truncatedResult));  instructions.add(ReilHelpers.createBisz(offset + 13,size,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.writeBack(environment,offset + 14,targetOperand,truncatedResult,size,targetResult.getAddress(),targetResult.getType(),instructions);}  }
class C{  public static void hideView(Activity context,int id){  if (context != null) {    View view=context.findViewById(id);    if (view != null) {      view.setVisibility(View.GONE);    } else {      Log.e("PercolateAndroidUtils","View does not exist.  Could not hide it.");    }  }}  }
class C{  void populateRootNode(DValue frame,ArrayList<DVariable> orderedChildList,int isolateId){  populateFrame(0,orderedChildList,isolateId);  DValue base=getOrCreateValue(Value.BASE_ID,isolateId);  base.setMembersObtained(true);}  }
class C{  JPanel makeTopPanel(JFrame frame,String title,int width,int height){  Container contentPane=frame.getContentPane();  contentPane.setLayout(new BoxLayout(contentPane,BoxLayout.X_AXIS));  contentPane.add(Box.createRigidArea(new Dimension(0,height)));  JPanel topPanel=new JPanel();  topPanel.setLayout(new BoxLayout(topPanel,BoxLayout.Y_AXIS));  Border panelBorder=BorderFactory.createEtchedBorder();  Border panelTitled=BorderFactory.createTitledBorder(panelBorder,rbx.getString(title));  topPanel.setBorder(panelTitled);  topPanel.add(Box.createRigidArea(new Dimension(width,0)));  topPanel.add(Box.createVerticalGlue());  return topPanel;}  }
class C{  public void deleteAttributes(int[] columnIndices){  ((DataTableModel)getModel()).deleteAttributes(columnIndices);}  }
class C{  public static void clear(int WindowNo,Container c,String ParseString){  log.info("Dialog.clear: " + ParseString);  Properties ctx=Env.getCtx();  String parse=Env.parseContext(ctx,WindowNo,ParseString,false);  if (parse.length() == 0)   parse="ERROR parsing: " + ParseString;  Window parent=Env.getParent(c);  if (parent == null)   parent=Env.getWindow(WindowNo);  if (showDialog && parent != null) {    if (parent instanceof JFrame)     new ADialogDialog((JFrame)parent,Env.getHeader(ctx,WindowNo),"=> " + parse,JOptionPane.INFORMATION_MESSAGE); else     new ADialogDialog((JDialog)parent,Env.getHeader(ctx,WindowNo),"=> " + parse,JOptionPane.INFORMATION_MESSAGE);  } else   JOptionPane.showMessageDialog(parent,"=> " + parse + "\n",Env.getHeader(ctx,WindowNo),JOptionPane.INFORMATION_MESSAGE);}  }
class C{  public Pos3D(Entity entity){  this(entity.posX,entity.posY,entity.posZ);}  }
class C{  public final boolean isAttributeNormalized(int i){  if (i >= attCount)   throw new IndexOutOfBoundsException();  return attNormalized[i];}  }
class C{  public void copyTexturesTo(Material material) throws TextureException {  int num=mTextureList.size();  for (int i=0; i < num; ++i)   material.addTexture(mTextureList.get(i));}  }
class C{  public void start(){  consoleManager.startConsole(config.getBoolean(Key.USE_JLINE));  consoleManager.startFile(config.getString(Key.LOG_FILE));  if (getProxySupport()) {    if (getOnlineMode()) {      logger.warning("Proxy support is enabled, but online mode is enabled.");    } else {      logger.info("Proxy support is enabled.");    }  } else   if (!getOnlineMode()) {    logger.warning("The server is running in offline mode! Only do this if you know what you're doing.");  }  opsList.load();  whitelist.load();  nameBans.load();  ipBans.load();  new LibraryManager(this).run();  loadPlugins();  enablePlugins(PluginLoadOrder.STARTUP);  String name=config.getString(Key.LEVEL_NAME);  String seedString=config.getString(Key.LEVEL_SEED);  boolean structs=getGenerateStructures();  WorldType type=WorldType.getByName(getWorldType());  if (type == null) {    type=WorldType.NORMAL;  }  long seed=new Random().nextLong();  if (!seedString.isEmpty()) {    try {      long parsed=Long.parseLong(seedString);      if (parsed != 0) {        seed=parsed;      }    } catch (    NumberFormatException ex) {      seed=seedString.hashCode();    }  }  createWorld(WorldCreator.name(name).environment(Environment.NORMAL).seed(seed).type(type).generateStructures(structs));  if (getAllowNether()) {    checkTransfer(name,"_nether",Environment.NETHER);    createWorld(WorldCreator.name(name + "_nether").environment(Environment.NETHER).seed(seed).type(type).generateStructures(structs));  }  if (getAllowEnd()) {    checkTransfer(name,"_the_end",Environment.THE_END);    createWorld(WorldCreator.name(name + "_the_end").environment(Environment.THE_END).seed(seed).type(type).generateStructures(structs));  }  enablePlugins(PluginLoadOrder.POSTWORLD);  commandMap.registerServerAliases();  scheduler.start();}  }
class C{  public static CRC64 fromBytes(byte[] b){  long l=0;  for (int i=0; i < 4; i++) {    l<<=8;    l^=(long)b[i] & 0xFF;  }  return new CRC64(l);}  }
class C{  public static String filterIpAddress(String data){  String[] dataSplitArray=data.split(" ");  return dataSplitArray[dataSplitArray.length - 1];}  }
class C{  public void reset(){  Cell[] as=cells;  Cell a;  base=0L;  if (as != null) {    for (int i=0; i < as.length; ++i) {      if ((a=as[i]) != null)       a.value=0L;    }  }}  }
class C{  public static StdoutStream create(){  if (_stdout == null) {    _stdout=new StdoutStream();    ConstPath path=new ConstPath(null,_stdout);    path.setScheme("stdout");  }  return _stdout;}  }
class C{  private static byte[] encode(long[] min,long[] max){  checkArgs(min,max);  byte[] b=new byte[BYTES * 2 * min.length];  verifyAndEncode(min,max,b);  return b;}  }
class C{  public void unregister(){  getPreferenceStore().removePropertyChangeListener(this);}  }
class C{  public void addContact(Contact contact){  addProperty(contact);}  }
class C{  @GridifySetToSet(gridName="GridifySetToSetTarget",threshold=2,splitSize=2) @Override public Iterator<Long> findPrimesWithIterator(Iterator<Long> input){  System.out.println(">>>");  System.out.println("Find primes in iterator: " + input);  System.out.println(">>>");  Collection<Long> res=new ArrayList<>();  while (input.hasNext()) {    Long val=input.next();    Long divisor=checkPrime(val,2,val);    if (divisor == null)     res.add(val);  }  return new MathIteratorAdapter<>(res);}  }
class C{  public static RelativeLayout.LayoutParams createRelativeLayoutParamsWW(){  return new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);}  }
class C{  public SorterToCursorAdapter(StoreAdapter adapter,QueryContext context,QueryBindings bindings,RowCursor input,RowType rowType,API.Ordering ordering,API.SortOption sortOption,InOutTap loadTap){  this.adapter=adapter;  this.context=context;  this.bindings=bindings;  this.input=input;  this.rowType=rowType;  this.ordering=ordering;  this.sortOption=sortOption;  this.loadTap=loadTap;}  }
class C{  public boolean isFileTransferAutoAcceptedInRoaming(){  return readBoolean(RcsSettingsData.AUTO_ACCEPT_FT_IN_ROAMING);}  }
class C{  public UpdatabilityTest(String name){  super(name);}  }
class C{  @Override public EmpiricalDistribution copy(){  EmpiricalDistribution copy=new EmpiricalDistribution(samples);  return copy;}  }
class C{  public static Scenario loadScenario(final Config config){  ScenarioLoaderImpl scenarioLoader=new ScenarioLoaderImpl(config);  Scenario scenario=scenarioLoader.loadScenario();  return scenario;}  }
class C{  void registerProvidesModule(Node n,String file,String namespace){  FileModule module;  if (fileToModule.containsKey(file)) {    if (fileToModule.get(file).isGoogModule) {      compiler.report(JSError.make(n,GentsErrorManager.GENTS_MODULE_PASS_ERROR,String.format("goog.provide cannot be used in the same file as goog.module.")));      return;    }    module=fileToModule.get(file);  } else {    module=new FileModule(file,false);  }  module.registerNamespaceToGlobalScope(namespace);}  }
class C{  public static void main(String[] args){  int size=10;  int[] counts=new int[4];  double[] values=new double[size];  counts[0]=7;  counts[1]=counts[0] * 2;  counts[2]++;  counts[3]-=60;  int j=0;  while (j < 4) {    System.out.println(counts[j]);    j++;  }  for (int i=0; i < 4; i++) {    System.out.println(counts[i]);  }  int[] array={1,2,3,4};  printArray(array);  System.out.println(array);  System.out.println(Arrays.toString(array));  double[] a={1.0,2.0,3.0};  double[] b=new double[a.length];  for (int i=0; i < a.length; i++) {    b[i]=a[i];  }  double[] c=Arrays.copyOf(a,a.length);  for (int i=0; i < a.length; i++) {    a[i]=Math.pow(a[i],2.0);  }  int index=search(a,2.0);  System.out.println("index = " + index);  double total=sum(a);  System.out.println("total = " + total);}  }
class C{  private void jarHellCheck(Path candidate,boolean isolated) throws IOException {  final List<URL> jars=new ArrayList<>(Arrays.asList(JarHell.parseClassPath()));  List<Bundle> bundles=PluginsService.getPluginBundles(environment.pluginsFile());  if (isolated == false) {    jars.addAll(bundles.get(0).urls);  }  Path pluginJars[]=FileSystemUtils.files(candidate,"*.jar");  for (  Path jar : pluginJars) {    jars.add(jar.toUri().toURL());  }  try {    JarHell.checkJarHell(jars.toArray(new URL[jars.size()]));  } catch (  Exception ex) {    throw new RuntimeException(ex);  }}  }
class C{  public ImageWarp(int[] pix,int width,int height,GeoCoordTransformation transform,DataBounds imageBounds){  if (pix != null) {    iwidth=width;    iheight=height;    setGeoTrans(transform);    setImageBounds(imageBounds);    pixels=pix;  }}  }
class C{  public UserBuilder address(String address){  this.address=address;  return this;}  }
class C{  public SingletonMapConverter(final Mapper mapper){  super(mapper);}  }
class C{  public void onNewHistoryItem(WebHistoryItem item){}  }
class C{  public InternalFrameEvent(JInternalFrame source,int id){  super(source,id);}  }
class C{  public void initOptions(){  RANDOM_PORT.setSelected(!ConnectionSettings.MANUAL_PORT_RANGE.getValue());  MANUAL_PORT.setSelected(ConnectionSettings.MANUAL_PORT_RANGE.getValue());  PORT_0_FIELD.setValue(ConnectionSettings.PORT_RANGE_0.getValue());  PORT_1_FIELD.setValue(ConnectionSettings.PORT_RANGE_1.getValue());  updateState();}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,lastModified);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  @Override public void info(String format,Object... argArray){  if (logger.isLoggable(Level.INFO)) {    FormattingTuple ft=MessageFormatter.arrayFormat(format,argArray);    log(SELF,Level.INFO,ft.getMessage(),ft.getThrowable());  }}  }
class C{  public AndroidAuthenticator(Context context,Account account,String authTokenType){  this(context,account,authTokenType,false);}  }
class C{  public JSONArray toJSONArray(JSONArray names) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  JSONArray ja=new JSONArray();  for (int i=0; i < names.length(); i+=1) {    ja.put(this.opt(names.getString(i)));  }  return ja;}  }
class C{  public static Runnable secure(Runnable runnable){  if (runnable == null || runnable instanceof SafeRunnable) {    return runnable;  }  return new SafeRunnable(runnable);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void endOverlay(){}  }
class C{  public double measureTime(){  return m_totalTime;}  }
class C{  private void parseProperties(Properties p){  if (p != null) {    String s;    s=p.getProperty("p2p.tcpBufferSize","" + tcpBufferSize);    try {      tcpBufferSize=Integer.parseInt(s);    } catch (    Exception e) {      logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_EXCEPTION_PARSING_P2PTCPBUFFERSIZE),e);    }    if (tcpBufferSize < Connection.SMALL_BUFFER_SIZE) {      tcpBufferSize=Connection.SMALL_BUFFER_SIZE;    }    s=p.getProperty("p2p.idleConnectionTimeout","" + idleConnectionTimeout);    try {      idleConnectionTimeout=Integer.parseInt(s);    } catch (    Exception e) {      logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_EXCEPTION_PARSING_P2PIDLECONNECTIONTIMEOUT),e);    }    s=p.getProperty("membership_port_range_start");    try {      tcpPortRange[0]=Integer.parseInt(s);    } catch (    Exception e) {      logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_EXCEPTION_PARSING_TCPPORTRANGESTART),e);    }    s=p.getProperty("membership_port_range_end");    try {      tcpPortRange[1]=Integer.parseInt(s);    } catch (    Exception e) {      logger.warn(LocalizedMessage.create(LocalizedStrings.TCPConduit_EXCEPTION_PARSING_TCPPORTRANGEEND),e);    }  }}  }
class C{  public boolean supportsRightOuterJoin(){  return supportedJOINs[JoinRowSet.RIGHT_OUTER_JOIN];}  }
class C{  @Override public GeoDirectoryResponse filter(GeoDirectoryRequest request) throws TException {  GeoDirectoryResponse response=new GeoDirectoryResponse();  if (0 == request.getGtsSize() || 0 == request.getShapeSize()) {    return response;  }  long nano=System.nanoTime();  GeoXPShape shape=GeoXPLib.fromCells(request.getShape());  shape=GeoXPLib.limit(shape,this.maxcells);  Set<String> unfiltered=new HashSet<String>();  for (  Entry<Long,Set<Long>> entry : request.getGts().entrySet()) {    long classid=entry.getKey();    for (    long labelsid : entry.getValue()) {      String id=GTSHelper.gtsIdToString(classid,labelsid);      unfiltered.add(id);    }  }  Set<String> filtered=this.index.find(unfiltered,shape,request.isInside(),request.getStartTimestamp(),request.getEndTimestamp());  Map<String,String> labels=new HashMap<String,String>();  labels.put(SensisionConstants.SENSISION_LABEL_GEODIR,this.name);  labels.put(SensisionConstants.SENSISION_LABEL_TYPE,request.isInside() ? "in" : "out");  Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_FILTERED,labels,filtered.size());  Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_UNFILTERED,labels,unfiltered.size());  Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_REQUESTS,labels,1);  Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_CELLS,labels,request.getShapeSize());  Sensision.update(SensisionConstants.SENSISION_CLASS_GEODIR_TIME_US,labels,(System.nanoTime() - nano) / 1000);  for (  String id : filtered) {    long[] clslbls=GTSHelper.unpackGTSIdLongs(id);    if (0 == response.getGtsSize() || !response.getGts().containsKey(clslbls[0])) {      response.putToGts(clslbls[0],new HashSet<Long>());    }    response.getGts().get(clslbls[0]).add(clslbls[1]);  }  return response;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public MX4JServerSocketFactory(boolean useSSL,boolean needClientAuth,String protocols,String ciphers,Properties gfsecurityProps){  if (protocols == null || protocols.length() == 0) {    protocols=DistributionConfig.DEFAULT_SSL_PROTOCOLS;  }  if (ciphers == null || ciphers.length() == 0) {    ciphers=DistributionConfig.DEFAULT_SSL_CIPHERS;  }  this.socketCreator=SocketCreatorFactory.createNonDefaultInstance(useSSL,needClientAuth,protocols,ciphers,gfsecurityProps);}  }
class C{  public Type3(final PdfObjectReader current_pdf_file,final boolean isPrinting){  glyphs=new T3Glyphs();  this.isPrinting=isPrinting;  init(current_pdf_file);}  }
class C{  private boolean algEquals(String algURI,String algName){  if (algName.equalsIgnoreCase("DSA") && algURI.equalsIgnoreCase(SignatureMethod.DSA_SHA1)) {    return true;  } else   if (algName.equalsIgnoreCase("RSA") && algURI.equalsIgnoreCase(SignatureMethod.RSA_SHA1)) {    return true;  } else {    return false;  }}  }
class C{  public void addFormField(String fieldName,int x,int y,int width,Color color){  setForeground(color);  int start=pointToInt(x,y);  int end=pointToInt(x + width,y);  addFormRange(fieldName,start,end);}  }
class C{  public Builder removeEntitlements(){  this.entitlements.clear();  return this;}  }
class C{  void resize(int newCapacity){  Entry[] oldTable=table;  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(newTable);  table=newTable;  threshold=(int)(newCapacity * loadFactor);}  }
class C{  private int calculateIconY(Icon icon){  int iconHeight=icon.getIconHeight();  int textHeight=editingComponent.getFontMetrics(editingComponent.getFont()).getHeight();  int textY=iconHeight / 2 - textHeight / 2;  int totalY=Math.min(0,textY);  int totalHeight=Math.max(iconHeight,textY + textHeight) - totalY;  return getHeight() / 2 - (totalY + (totalHeight / 2));}  }
class C{  @SuppressWarnings("unchecked") public <T>T unmarshallXmlToObject(Class<T> classType,String xmlString) throws JAXBException {  JAXBContext context=JAXBContext.newInstance(classType);  Unmarshaller un=context.createUnmarshaller();  return (T)un.unmarshal(IOUtils.toInputStream(xmlString));}  }
class C{  public Result decode(LuminanceSource source){  return decode(toBitmap(source));}  }
class C{  public boolean isBPartnerFlatDiscount(){  Object oo=get_Value(COLUMNNAME_IsBPartnerFlatDiscount);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean notify(NotifType type,String title,String text){  boolean didNotify=false;switch (type) {case PM:{      if (Settings.PM_NOTIFICATIONS) {        if (Settings.NOTIFICATION_SOUNDS) {          if (Settings.SOUND_NOTIFS_ALWAYS) {            playNotificationSound();            didNotify=true;          } else           if (!Game.getInstance().getContentPane().hasFocus()) {            playNotificationSound();            didNotify=true;          }        }        if (Settings.TRAY_NOTIFS) {          if (Settings.TRAY_NOTIFS_ALWAYS) {            displayNotification(title,text);            didNotify=true;          } else           if (!Game.getInstance().getContentPane().hasFocus()) {            displayNotification(title,text);            didNotify=true;          }        }      }      break;    }case TRADE:{    if (Settings.TRADE_NOTIFICATIONS) {      if (Settings.NOTIFICATION_SOUNDS) {        if (Settings.SOUND_NOTIFS_ALWAYS) {          playNotificationSound();          didNotify=true;        } else         if (!Game.getInstance().getContentPane().hasFocus()) {          playNotificationSound();          didNotify=true;        }      }      if (Settings.TRAY_NOTIFS) {        if (Settings.TRAY_NOTIFS_ALWAYS) {          displayNotification(title,text);          didNotify=true;        } else         if (!Game.getInstance().getContentPane().hasFocus()) {          displayNotification(title,text);          didNotify=true;        }      }    }    break;  }case DUEL:{  if (Settings.DUEL_NOTIFICATIONS) {    if (Settings.NOTIFICATION_SOUNDS) {      if (Settings.SOUND_NOTIFS_ALWAYS) {        playNotificationSound();        didNotify=true;      } else       if (!Game.getInstance().getContentPane().hasFocus()) {        playNotificationSound();        didNotify=true;      }    }    if (Settings.TRAY_NOTIFS) {      if (Settings.TRAY_NOTIFS_ALWAYS) {        displayNotification(title,text);        didNotify=true;      } else       if (!Game.getInstance().getContentPane().hasFocus()) {        displayNotification(title,text);        didNotify=true;      }    }  }  break;}case LOGOUT:{if (Settings.LOGOUT_NOTIFICATIONS) {  if (Settings.NOTIFICATION_SOUNDS) {    if (Settings.SOUND_NOTIFS_ALWAYS) {      playNotificationSound();      didNotify=true;    } else     if (!Game.getInstance().getContentPane().hasFocus()) {      playNotificationSound();      didNotify=true;    }  }  if (Settings.TRAY_NOTIFS) {    if (Settings.TRAY_NOTIFS_ALWAYS) {      displayNotification(title,text);      didNotify=true;    } else     if (!Game.getInstance().getContentPane().hasFocus()) {      displayNotification(title,text);      didNotify=true;    }  }}break;}case LOWHP:{if (Settings.LOW_HP_NOTIFICATIONS) {if (Settings.NOTIFICATION_SOUNDS) {  if (Settings.SOUND_NOTIFS_ALWAYS) {    playNotificationSound();    didNotify=true;  } else   if (!Game.getInstance().getContentPane().hasFocus()) {    playNotificationSound();    didNotify=true;  }}if (Settings.TRAY_NOTIFS) {  if (Settings.TRAY_NOTIFS_ALWAYS) {    displayNotification(title,text);    didNotify=true;  } else   if (!Game.getInstance().getContentPane().hasFocus()) {    displayNotification(title,text);    didNotify=true;  }}}break;}case FATIGUE:{if (Settings.FATIGUE_NOTIFICATIONS) {if (Settings.NOTIFICATION_SOUNDS) {if (Settings.SOUND_NOTIFS_ALWAYS) {  playNotificationSound();  didNotify=true;} else if (!Game.getInstance().getContentPane().hasFocus()) {  playNotificationSound();  didNotify=true;}}if (Settings.TRAY_NOTIFS) {if (Settings.TRAY_NOTIFS_ALWAYS) {  displayNotification(title,text);  didNotify=true;} else if (!Game.getInstance().getContentPane().hasFocus()) {  displayNotification(title,text);  didNotify=true;}}}break;}}return didNotify;}  }
class C{  public static boolean isJavaCompilerAvailable(){  JavaCompiler compiler=ToolProvider.getSystemJavaCompiler();  return compiler != null;}  }
class C{  void printModifiers(List ext){  for (Iterator it=ext.iterator(); it.hasNext(); ) {    ASTNode p=(ASTNode)it.next();    p.accept(this);    this.buffer.append(" ");  }}  }
class C{  public FastShortBuffer(int size){  if (size < 0) {    throw new IllegalArgumentException("Invalid size: " + size);  }  this.minChunkLen=size;}  }
class C{  private void cmd_cancel(){  advancedTable.stopEditor(false);  log.info("");  m_query=null;  m_total=999999;  m_isCancel=true;  dispose();}  }
class C{  public boolean isInnerShadowEnabled(){  return null == innerShadowEnabled ? _innerShadowEnabled : innerShadowEnabled.get();}  }
class C{  public void updatePoint(int x1,int y1,int radius,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoint.write(x1,y1,radius,properties,link.dos);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:46.627 -0500",hash_original_method="F0DC6C1F8DBE67146FDB19D4375AE051",hash_generated_method="7D3E0CB9D461E3294FC5AE0F436AD4DE") private boolean isOpen(){  return buf.getTaintBoolean();}  }
class C{  public int size(){  return _map.size();}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public void onItemDataResponse(final ItemDataResponse itemDataResponse){  Log.v(TAG,"onItemDataResponse recieved");  Log.v(TAG,"ItemDataRequestStatus" + itemDataResponse.getItemDataRequestStatus());  Log.v(TAG,"ItemDataRequestId" + itemDataResponse.getRequestId());  new ItemDataAsyncTask().execute(itemDataResponse);}  }
class C{  public static void main(String[] args){  new Baleen().runCLI(args);}  }
class C{  void notifyWidgetSizeChanged(Launcher launcher){  AppWidgetResizeFrame.updateWidgetSizeRanges(hostView,launcher,spanX,spanY);  mHasNotifiedInitialWidgetSizeChanged=true;}  }
class C{  public WriteBuffer clear(){  if (buff.limit() > MAX_REUSE_CAPACITY) {    buff=reuse;  } else   if (buff != reuse) {    reuse=buff;  }  buff.clear();  return this;}  }
class C{  private void statInit(){  lDocumentNo.setLabelFor(fDocumentNo);  fDocumentNo.setBackground(AdempierePLAF.getInfoBackground());  fDocumentNo.addActionListener(this);  fcheckReceipt.setSelected(true);  fcheckReceipt.setActionCommand("OnlyReceipt");  fcheckReceipt.addActionListener(this);  fcheckPayment.setSelected(false);  fcheckPayment.setActionCommand("OnlyPayment");  fcheckPayment.addActionListener(this);  fBankAccount_ID=new VLookup("C_BankAccount_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_C_BankAccount_ID),DisplayType.TableDir));  lBankAccount_ID.setLabelFor(fBankAccount_ID);  fBankAccount_ID.setBackground(AdempierePLAF.getInfoBackground());  fBankAccount_ID.addActionListener(this);  fBPartner_ID=new VLookup("C_BPartner_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MPayment.Table_Name,MPayment.COLUMNNAME_C_BPartner_ID),DisplayType.Search));  lBPartner_ID.setLabelFor(fBPartner_ID);  fBPartner_ID.setBackground(AdempierePLAF.getInfoBackground());  fBPartner_ID.addActionListener(this);  lDateFrom.setLabelFor(fDateFrom);  fDateFrom.setBackground(AdempierePLAF.getInfoBackground());  fDateFrom.setToolTipText(Msg.translate(Env.getCtx(),"DateFrom"));  fDateFrom.addActionListener(this);  lDateTo.setLabelFor(fDateTo);  fDateTo.setBackground(AdempierePLAF.getInfoBackground());  fDateTo.setToolTipText(Msg.translate(Env.getCtx(),"DateTo"));  fDateTo.addActionListener(this);  lAmtFrom.setLabelFor(fAmtFrom);  fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());  fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(),"AmtFrom"));  fAmtFrom.setBorder(fDateFrom.getBorder());  fAmtFrom.addActionListener(this);  lAmtTo.setLabelFor(fAmtTo);  fAmtTo.setBackground(AdempierePLAF.getInfoBackground());  fAmtTo.setToolTipText(Msg.translate(Env.getCtx(),"AmtTo"));  fAmtTo.setBorder(fDateFrom.getBorder());  fAmtTo.addActionListener(this);  CPanel amtPanel=new CPanel();  CPanel datePanel=new CPanel();  amtPanel.setLayout(new ALayout(0,0,true));  amtPanel.add(fAmtFrom,new ALayoutConstraint(0,0));  amtPanel.add(lAmtTo,null);  amtPanel.add(fAmtTo,null);  datePanel.setLayout(new ALayout(0,0,true));  datePanel.add(fDateFrom,new ALayoutConstraint(0,0));  datePanel.add(lDateTo,null);  datePanel.add(fDateTo,null);  p_criteriaGrid.add(lDocumentNo,new ALayoutConstraint(0,0));  p_criteriaGrid.add(fDocumentNo,null);  p_criteriaGrid.add(lBPartner_ID,null);  p_criteriaGrid.add(fBPartner_ID,null);  p_criteriaGrid.add(fcheckReceipt,new ALayoutConstraint(0,5));  p_criteriaGrid.add(lBankAccount_ID,new ALayoutConstraint(1,0));  p_criteriaGrid.add(fBankAccount_ID);  p_criteriaGrid.add(lDateFrom,null);  p_criteriaGrid.add(datePanel,null);  p_criteriaGrid.add(fcheckPayment,new ALayoutConstraint(1,5));  p_criteriaGrid.add(lAmtFrom,new ALayoutConstraint(2,2));  p_criteriaGrid.add(amtPanel,null);}  }
class C{  public static long tryParseLong(String longString,int defaultValue){  try {    return Long.parseLong(longString);  } catch (  NumberFormatException e) {    return defaultValue;  }}  }
class C{  public final void info(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_INFO)) {    log(SimpleLog.LOG_LEVEL_INFO,message,null);  }}  }
class C{  public ModelAndView flush(HttpServletRequest request,HttpServletResponse response,HttpSession session){  List<InteresadoVO> interesados=(List<InteresadoVO>)WebUtils.getOrCreateSessionAttribute(session,INTERESADOS,ArrayList.class);  String decoratedInteresados=getInteresadosDecorator().interesados2string(interesados);  session.removeAttribute(INTERESADOS);  ModelAndView mav=new ModelAndView("interesados.flush");  mav.addObject(INTERESADOS,decoratedInteresados);  return mav;}  }
class C{  public static boolean isMemoryCached(String url){  return getBCache().containsKey(url) || getSCache().containsKey(url) || getICache().containsKey(url);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public long period(){  if (this.size() < 1)   return Long.MAX_VALUE;  long latest=0;  long earliest=0;  int count=0;  for (  MessageEntry messageEntry : this) {    if (latest == 0) {      latest=messageEntry.created_at.getTime();      continue;    }    earliest=messageEntry.created_at.getTime();    count++;    if (count >= 19)     break;  }  if (count == 0)   return Long.MAX_VALUE;  long timeInterval=latest - earliest;  long p=1 + timeInterval / count;  return p < 4000 ? p / 4 + 3000 : p;}  }
class C{  public static Bitmap loadBitmapFromAsset(GoogleApiClient googleApiClient,Asset asset){  if (asset == null) {    throw new IllegalArgumentException("Asset must be non-null");  }  InputStream assetInputStream=Wearable.DataApi.getFdForAsset(googleApiClient,asset).await().getInputStream();  if (assetInputStream == null) {    Log.w(TAG,"Requested an unknown Asset.");    return null;  }  return BitmapFactory.decodeStream(assetInputStream);}  }
class C{  public static void clearAppData(Context context) throws AndroidAgentException {  try {    revokePolicy(context);  } catch (  SecurityException e) {    throw new AndroidAgentException("Error occurred while revoking policy",e);  } finally {    Resources resources=context.getResources();    SharedPreferences mainPref=context.getSharedPreferences(Constants.PACKAGE_NAME,Context.MODE_PRIVATE);    Editor editor=mainPref.edit();    editor.putBoolean(Constants.PreferenceFlag.IS_AGREED,false);    editor.putString(Constants.PreferenceFlag.REG_ID,null);    editor.putBoolean(Constants.PreferenceFlag.REGISTERED,false);    editor.putString(Constants.PreferenceFlag.IP,null);    editor.putString(Constants.PreferenceFlag.NOTIFIER_TYPE,null);    editor.putString(context.getResources().getString(R.string.shared_pref_sender_id),resources.getString(R.string.shared_pref_default_string));    editor.putString(context.getResources().getString(R.string.shared_pref_eula),resources.getString(R.string.shared_pref_default_string));    editor.putBoolean(Constants.PreferenceFlag.DEVICE_ACTIVE,false);    editor.commit();    Preference.clearPreferences(context);    clearClientCredentials(context);    context.deleteDatabase(Constants.EMM_DB);  }}  }
class C{  private InterpreterResult processSearch(String[] urlItems,String data,int size){  if (urlItems.length > 2) {    return new InterpreterResult(InterpreterResult.Code.ERROR,"Bad URL (it should be /index1,index2,.../type1,type2,...)");  }  final SearchResponse response=searchData(urlItems,data,size);  return buildResponseMessage(response);}  }
class C{  public void takeEmergencyCallAction(){  mPowerManager.userActivity(SystemClock.uptimeMillis(),true);  if (TelephonyManager.getDefault().getCallState() == TelephonyManager.CALL_STATE_OFFHOOK) {    mLockPatternUtils.resumeCall();  } else {    Intent intent=new Intent(ACTION_EMERGENCY_DIAL);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS);    getContext().startActivityAsUser(intent,new UserHandle(mLockPatternUtils.getCurrentUser()));  }}  }
class C{  public final int hashCode(){  return super.hashCode();}  }
class C{  public void init() throws ServletException {}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public void showNativeScreen(Object nativeFullScreenPeer){  inNativeUI=true;  impl.showNativeScreen(nativeFullScreenPeer);}  }
class C{  public void write(JWindow jW){  if (page == null) {    newpage();  }  if (page != null && pagenum >= prFirst) {    int x=x0;    int y=y0 + (linenum * lineheight);    page.translate(x,y);    jW.setVisible(true);    jW.printAll(page);    jW.setVisible(false);    jW.dispose();    page.translate(-x,-y);  }}  }
class C{  public CharSequence terminateToken(CharSequence text){  return text + ", ";}  }
class C{  public void onScreenBrightness(int brightness){  if (DEBUG) {    Slog.d(TAG,"onScreenBrightness: brightness=" + brightness);  }  try {    mBatteryStats.noteScreenBrightness(brightness);  } catch (  RemoteException ex) {  }}  }
class C{  @Override public void initialize(ResourceManager rm){}  }
class C{  public JsonRequest(int method,String requestUrl,JSONObject jsonRequest,Response.Listener<JSONObject> successListener,Response.ErrorListener errorListener,FragmentManager fragmentManager,String accessToken){  super(method,requestUrl,jsonRequest,successListener,errorListener);  this.requestUrl=requestUrl;  this.fragmentManager=fragmentManager;  this.accessToken=accessToken;}  }
class C{  public static List<String> readLines(InputStream input,Charset encoding) throws IOException {  InputStreamReader reader=new InputStreamReader(input,Charsets.toCharset(encoding));  return readLines(reader);}  }
class C{  public static JmxManagerLocatorResponse send(String locatorHost,int locatorPort,int msTimeout,Map<String,String> sslConfigProps) throws IOException {  Properties distributionConfigProps=new Properties();  InetAddress networkAddress=InetAddress.getByName(locatorHost);  try {    if (sslConfigProps != null) {      distributionConfigProps.putAll(sslConfigProps);    }    TcpClient client=new TcpClient(new DistributionConfigImpl(distributionConfigProps));    Object responseFromServer=client.requestToServer(networkAddress,locatorPort,SINGLETON,msTimeout);    return (JmxManagerLocatorResponse)responseFromServer;  } catch (  ClassNotFoundException unexpected) {    throw new IllegalStateException(unexpected);  }catch (  ClassCastException unexpected) {    throw new IllegalStateException(unexpected);  } finally {    distributionConfigProps.clear();  }}  }
class C{  public static String buildThresholdCheckForAlertingStateQuery(AlertingState alertingState,long currentTime){  AlertingDefinition definition=alertingState.getAlertingDefinition();  String aggregationFunction;  if (definition.getThresholdType() == ThresholdType.UPPER_THRESHOLD) {    aggregationFunction="MAX";  } else {    aggregationFunction="MIN";  }  StringBuilder builder=new StringBuilder();  builder.append("SELECT " + aggregationFunction + "(\"").append(definition.getField()).append("\") FROM \"").append(definition.getMeasurement()).append("\" WHERE ");  for (  Entry<String,String> entry : definition.getTags().entrySet()) {    builder.append('"').append(entry.getKey());    builder.append("\" = '").append(entry.getValue()).append("' AND ");  }  long leftCheckIntervalBorder=alertingState.getLastCheckTime() - alertingState.getAlertingDefinition().getTimeRange(TimeUnit.MILLISECONDS);  builder.append("time <= ").append(currentTime).append("ms AND time > ").append(leftCheckIntervalBorder).append("ms");  return builder.toString();}  }
class C{  @Override public void createOrUpdateElasticAdminKeyspace(){  UntypedResultSet result=QueryProcessor.executeInternal(String.format("SELECT strategy_class,strategy_options  FROM system.schema_keyspaces WHERE keyspace_name='%s'",elasticAdminKeyspaceName));  logger.info(" elasticAdminMetadata exist={}",!result.isEmpty());  if (result.isEmpty()) {    MetaData metadata=state().metaData();    try {      String metaDataString=MetaData.Builder.toXContent(metadata);      JSONObject replication=new JSONObject();      replication.put("class",NetworkTopologyStrategy.class.getName());      replication.put(DatabaseDescriptor.getLocalDataCenter(),Integer.toString(getLocalDataCenterSize()));      String createKeyspace=String.format("CREATE KEYSPACE IF NOT EXISTS \"%s\" WITH replication = %s;",elasticAdminKeyspaceName,replication.toJSONString().replaceAll("\"","'"));      logger.info(createKeyspace);      process(ConsistencyLevel.LOCAL_ONE,createKeyspace);      String createTable=String.format("CREATE TABLE IF NOT EXISTS \"%s\".%s ( cluster_name text PRIMARY KEY, owner uuid, version bigint, metadata text) WITH comment='%s';",elasticAdminKeyspaceName,ELASTIC_ADMIN_METADATA_TABLE,MetaData.Builder.toXContent(metadata));      logger.info(createTable);      process(ConsistencyLevel.LOCAL_ONE,createTable);      process(ConsistencyLevel.LOCAL_ONE,insertMetadataQuery,DatabaseDescriptor.getClusterName(),UUID.fromString(StorageService.instance.getLocalHostId()),metadata.version(),metaDataString);      logger.info("Succefully initialize {}.{} = {}",elasticAdminKeyspaceName,ELASTIC_ADMIN_METADATA_TABLE,metaDataString);      writeMetaDataAsComment(metaDataString);    } catch (    Throwable e) {      logger.error("Failed to initialize table {}.{}",e,elasticAdminKeyspaceName,ELASTIC_ADMIN_METADATA_TABLE);    }  } else {    Row row=result.one();    if (!NetworkTopologyStrategy.class.getName().equals(row.getString("strategy_class"))) {      throw new ConfigurationException("Keyspace [" + this.elasticAdminKeyspaceName + "] should use "+ NetworkTopologyStrategy.class.getName()+ " replication strategy");    }    JSONObject replication;    try {      replication=(JSONObject)new JSONParser().parse(row.getString("strategy_options"));      int currentRF=-1;      if (replication.get(DatabaseDescriptor.getLocalDataCenter()) != null) {        currentRF=Integer.valueOf(replication.get(DatabaseDescriptor.getLocalDataCenter()).toString());      }      int targetRF=getLocalDataCenterSize();      if (targetRF != currentRF) {        replication.put(DatabaseDescriptor.getLocalDataCenter(),Integer.toString(targetRF));        replication.put("class",NetworkTopologyStrategy.class.getName());        try {          String query=String.format("ALTER KEYSPACE \"%s\" WITH replication = %s",elasticAdminKeyspaceName,replication.toJSONString().replaceAll("\"","'"));          process(ConsistencyLevel.LOCAL_ONE,query);          logger.info(query);        } catch (        Throwable e) {          logger.error("Failed to alter keyspace [{}]",e,this.elasticAdminKeyspaceName);          throw e;        }      } else {        logger.info("Keep unchanged keyspace={} datacenter={} RF={}",elasticAdminKeyspaceName,DatabaseDescriptor.getLocalDataCenter(),targetRF);      }    } catch (    ParseException e1) {      throw new ConfigurationException("Failed to update " + elasticAdminKeyspaceName,e1);    }  }}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public boolean isSetCount(){  return EncodingUtils.testBit(__isset_bitfield,__COUNT_ISSET_ID);}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  com.google.common.base.Preconditions.checkState(expression,errorMessage);}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + ro+ ","+ pk+ ")";}  }
class C{  public UnsupportedQueryResultFormatException(String msg){  super(msg);}  }
class C{  public String toString(){  String result=m_ParamChar + " " + m_Lower+ " ";switch ((int)(m_Lower - m_Upper + 0.5)) {case 1:    result+="A";  break;case 2:result+="I";break;default :result+=m_Upper;break;}result+=" " + m_Steps;if (m_RoundParam) {result+=" R";}return result;}  }
class C{  @Override public final void addBezierCurveY(final float x,final float y,final float x3,final float y3){  elements.add(new QuadCurveTo(x,y,x3,y3));  currentPos[0]=x3;  currentPos[1]=y3;}  }
class C{  public BuiltinFont(String baseFont,PDFObject fontObj,PDFFontDescriptor descriptor) throws IOException {  super(baseFont,fontObj,descriptor);  String fontName=descriptor.getFontName();  for (int i=0; i < baseFonts.length; i++) {    if (fontName.equalsIgnoreCase(baseFonts[i])) {      parseFont(fontName);      return;    }  }  for (int i=0; i < mappedFonts.length; i+=2) {    if (fontName.equalsIgnoreCase(mappedFonts[i])) {      parseFont(mappedFonts[i + 1]);      return;    }  }  int flags=descriptor.getFlags();  int style=((flags & PDFFontDescriptor.FORCEBOLD) != 0) ? Typeface.BOLD : Typeface.NORMAL;  if (fontName.indexOf("Bold") > 0) {    style|=Typeface.BOLD;  }  if ((descriptor.getItalicAngle() != 0) || ((flags & PDFFontDescriptor.NONSYMBOLIC) != 0)) {    style|=Typeface.ITALIC;  }  String name=null;  if ((flags & PDFFontDescriptor.FIXED_PITCH) != 0) {    if (((style & Typeface.BOLD) > 0) && ((style & Typeface.ITALIC) > 0)) {      name="Courier-BoldOblique";    } else     if ((style & Typeface.BOLD) > 0) {      name="Courier-Bold";    } else     if ((style & Typeface.ITALIC) > 0) {      name="Courier-Oblique";    } else {      name="Courier";    }  } else   if ((flags & PDFFontDescriptor.SERIF) != 0) {    if (((style & Typeface.BOLD) > 0) && ((style & Typeface.ITALIC) > 0)) {      name="Times-BoldItalic";    } else     if ((style & Typeface.BOLD) > 0) {      name="Times-Bold";    } else     if ((style & Typeface.ITALIC) > 0) {      name="Times-Italic";    } else {      name="Times-Roman";    }  } else {    if (((style & Typeface.BOLD) > 0) && ((style & Typeface.ITALIC) > 0)) {      name="Helvetica-BoldOblique";    } else     if ((style & Typeface.BOLD) > 0) {      name="Helvetica-Bold";    } else     if ((style & Typeface.ITALIC) > 0) {      name="Helvetica-Oblique";    } else {      name="Helvetica";    }  }  parseFont(name);}  }
class C{  public boolean fileExists(String url){  File file=new File(url);  return file.exists();}  }
class C{  public static boolean isWindows2000(){  return osName.indexOf("Windows") > -1 && osVersion.equals("5.0");}  }
class C{  public static void e(String msg){  if (LOGE_DEBUG && mLogAll) {    Log.e(DEFAULT_TAG,getInformation(msg));  }}  }
class C{  public SE8cSignalHead(int pNumber){  super("LH" + pNumber);  this.lowTurnout=makeHandle(pNumber);  this.highTurnout=makeHandle(pNumber + 1);  systemName="LH" + pNumber;  init();}  }
class C{  public FlowExpressionContext(Receiver receiver,List<Receiver> arguments,BaseContext checkerContext){  this(receiver,receiver,arguments,checkerContext);}  }
class C{  public static PrintWriter newPrintWriter(File file) throws IOException {  return new GroovyPrintWriter(newWriter(file));}  }
class C{  public static <V extends Vec>void covarianceDiag(Vec means,Vec diag,List<V> dataset){  final int n=dataset.size();  final int d=dataset.get(0).length();  int[] nnzCounts=new int[d];  for (int i=0; i < n; i++) {    Vec x=dataset.get(i);    for (    IndexValue iv : x) {      int indx=iv.getIndex();      nnzCounts[indx]++;      diag.increment(indx,pow(iv.getValue() - means.get(indx),2));    }  }  for (int i=0; i < nnzCounts.length; i++)   diag.increment(i,pow(means.get(i),2) * (n - nnzCounts[i]));  diag.mutableDivide(n);}  }
class C{  public void testBug7081() throws Exception {  String tableName="testBug7081";  try {    createTable(tableName,"(field1 INT, INDEX(field1))");    DatabaseMetaData dbmd=this.conn.getMetaData();    this.rs=dbmd.getIndexInfo(this.conn.getCatalog(),null,tableName,true,false);    assertTrue(!this.rs.next());    this.rs=dbmd.getIndexInfo(this.conn.getCatalog(),null,tableName,false,false);    assertTrue(this.rs.next());    assertTrue(!this.rs.next());  }  finally {    dropTable(tableName);  }}  }
class C{  public byte[] decode(byte[] pArray){  return decodeBase64(pArray);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends CharSequence>TransformationStrategy<T> prefixFreeIso(){  return (TransformationStrategy<T>)PREFIX_FREE_ISO;}  }
class C{  @Override public boolean onCreateOptionsMenu(final Menu menu){  getMenuInflater().inflate(R.menu.add_to_homescreen,menu);  getMenuInflater().inflate(R.menu.shuffle,menu);  if (isArtistSongPage()) {    getMenuInflater().inflate(R.menu.artist_song_sort_by,menu);  } else   if (isArtistAlbumPage()) {    getMenuInflater().inflate(R.menu.artist_album_sort_by,menu);  } else   if (isAlbum()) {    getMenuInflater().inflate(R.menu.album_song_sort_by,menu);  }  if (isArtist() || isAlbum()) {    final SubMenu subMenu=menu.addSubMenu(TabFragmentOrder.ALBUMS_POSITION,FragmentMenuItems.ADD_TO_PLAYLIST,Menu.NONE,R.string.add_to_playlist);    MusicUtils.makePlaylistMenu(this,TabFragmentOrder.ALBUMS_POSITION,subMenu,false);  }  return super.onCreateOptionsMenu(menu);}  }
class C{  public int squaredDistanceFrom(int x,int y){  int xDist=this.x + width / 2 - x;  int yDist=this.y + height / 2 - y;  return xDist * xDist + yDist * yDist;}  }
class C{  public static TargetProcessThread parseThreadId(final byte[] data) throws MessageParserException {  Preconditions.checkNotNull(data,"IE00057: Data argument can not be null");  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    final DocumentBuilder builder=factory.newDocumentBuilder();    final Document document=builder.parse(new ByteArrayInputStream(data,0,data.length));    final Node node=document.getFirstChild();    final long threadId=Long.valueOf(getAttribute(node,"threadid"));    return new TargetProcessThread(threadId,ThreadState.SUSPENDED);  } catch (  final Exception exception) {    throw new MessageParserException(exception.getLocalizedMessage());  }}  }
class C{  public JtaScriptCommand(Configuration configuration,String resourcePath){  super(configuration,resourcePath);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  @Override public boolean equals(Object other){  if (this == other)   return true;  if (other == null || getClass() != other.getClass())   return false;  DictionaryColumnUniqueIdentifier that=(DictionaryColumnUniqueIdentifier)other;  if (!carbonTableIdentifier.equals(that.carbonTableIdentifier))   return false;  return columnIdentifier.equals(that.columnIdentifier);}  }
class C{  private void changeState(final ScriptRunningState newState){  changeState(eventBus,script.getName(),newState,script,executor);}  }
class C{  void initializeDepthFirstNumbering(int instructionCount){  int noRehashCapacity=(int)(instructionCount * 1.5f);  depthFirstNumbers=new HashMap<Instruction,Integer>(noRehashCapacity);}  }
class C{  public static String encodeContentDisposition(String filename) throws UnsupportedEncodingException {  filename=filename.replaceAll("[:\\x5c\\/{?]","_");  filename=URLEncoder.encode(filename,"UTF-8").replaceAll("\\+","%20");  filename="filename*=UTF-8''" + filename;  return filename;}  }
class C{  public void build(boolean incremental) throws IOException {  for (Iterator<Builder> i=getBuildOrder(); i.hasNext(); ) {    Builder builder=i.next();    if (builder != null) {      builder.build(incremental);    }  }}  }
class C{  public void advancedIntegration(View v){  Intent intent=new Intent(this,ScanActivity.class);  startActivity(intent);}  }
class C{  public Set<K> keySet(){  Set<K> ks=keySet;  if (ks == null) {    ks=new KeySet();    keySet=ks;  }  return ks;}  }
class C{  public static void writeSource(FacesContext ctx,String file){  ExternalContext extCtx=ctx.getExternalContext();  BufferedReader r=new BufferedReader(new InputStreamReader(extCtx.getResourceAsStream(file)));  StringWriter w=new StringWriter();  PrintWriter pw=new PrintWriter(w);  try {    int lineNumber=1;    for (String s=r.readLine(); s != null; s=r.readLine()) {      pw.format("%3s",Integer.toString(lineNumber++));      pw.write(": ");      pw.write(s);      pw.write('\n');    }    ctx.getResponseWriter().writeText(w.toString(),null);  } catch (  IOException ioe) {    if (LOGGER.isLoggable(Level.SEVERE)) {      LOGGER.log(Level.SEVERE,ioe.toString(),ioe);    }  }}  }
class C{  public Port createPort(){  PortImpl port=new PortImpl();  return port;}  }
class C{  @Override public Context createPackageContext(String packageName,int flags) throws PackageManager.NameNotFoundException {  return mRealContext.createPackageContext(packageName,flags);}  }
class C{  public void stopRepeating(){  mRepeatHandler.removeMessages(RepeatHandler.MSG_REPEAT);  mResourceIdToRepeat=0;}  }
class C{  private void calculatePlan(int AD_Client_ID,int AD_Org_ID,int M_Warehouse_ID,int PP_MRP_ID,MProduct product,Timestamp DemandDateStartSchedule,String trxName) throws SQLException {  log.info("Create Plan ...");  if (m_product_planning.getM_Product_ID() != product.get_ID()) {    throw new IllegalStateException("MRP Internal Error:" + " DataPlanningProduct(" + m_product_planning.getM_Product_ID() + ")"+ " <> Product("+ product+ ")");  }  final BigDecimal yield=BigDecimal.valueOf(m_product_planning.getYield());  if (yield.signum() != 0) {    QtyGrossReqs=QtyGrossReqs.multiply(Env.ONEHUNDRED).divide(yield,4,RoundingMode.HALF_UP);  }  BigDecimal QtyNetReqs=getNetRequirements(AD_Client_ID,AD_Org_ID,M_Warehouse_ID,product,DemandDateStartSchedule,trxName);  BigDecimal QtyPlanned=Env.ZERO;  ((PO)m_product_planning).dump();  log.info("                    Product:" + product);  log.info(" Demand Date Start Schedule:" + DemandDateStartSchedule);  log.info("           DatePromisedFrom:" + DatePromisedFrom + " DatePromisedTo:"+ DatePromisedTo);  log.info("                Qty Planned:" + QtyPlanned);  log.info("     Qty Scheduled Receipts:" + QtyScheduledReceipts);  log.info("           QtyProjectOnHand:" + QtyProjectOnHand);  log.info("               QtyGrossReqs:" + QtyGrossReqs);  log.info("                     Supply:" + (QtyScheduledReceipts).add(QtyProjectOnHand));  log.info("                 QtyNetReqs:" + QtyNetReqs);  if (QtyNetReqs.signum() > 0) {    QtyProjectOnHand=QtyNetReqs;    QtyNetReqs=Env.ZERO;    QtyScheduledReceipts=Env.ZERO;    QtyPlanned=Env.ZERO;    QtyGrossReqs=Env.ZERO;    return;  } else {    QtyPlanned=QtyNetReqs.negate();    QtyGrossReqs=Env.ZERO;    QtyScheduledReceipts=Env.ZERO;  }  if (QtyPlanned.signum() > 0 && m_product_planning.getOrder_Min().signum() > 0) {    if (m_product_planning.getOrder_Min().compareTo(QtyPlanned) > 0) {      String comment=Msg.translate(getCtx(),I_PP_Product_Planning.COLUMNNAME_Order_Min) + " : " + m_product_planning.getOrder_Min();      createMRPNote("MRP-080",AD_Org_ID,PP_MRP_ID,product,null,QtyPlanned,comment,trxName);    }    QtyPlanned=QtyPlanned.max(m_product_planning.getOrder_Min());  }  if (m_product_planning.getOrder_Pack().signum() > 0 && QtyPlanned.signum() > 0) {    QtyPlanned=m_product_planning.getOrder_Pack().multiply(QtyPlanned.divide(m_product_planning.getOrder_Pack(),0,BigDecimal.ROUND_UP));  }  if (QtyPlanned.compareTo(m_product_planning.getOrder_Max()) > 0 && m_product_planning.getOrder_Max().signum() > 0) {    String comment=Msg.translate(getCtx(),I_PP_Product_Planning.COLUMNNAME_Order_Max) + " : " + m_product_planning.getOrder_Max();    createMRPNote("MRP-090",AD_Org_ID,PP_MRP_ID,product,null,QtyPlanned,comment,trxName);  }  QtyProjectOnHand=QtyPlanned.add(QtyNetReqs);  log.info("QtyNetReqs:" + QtyNetReqs);  log.info("QtyPlanned:" + QtyPlanned);  log.info("QtyProjectOnHand:" + QtyProjectOnHand);  if (TimeFence != null && DemandDateStartSchedule.compareTo(TimeFence) < 0) {    String comment=Msg.translate(getCtx(),I_PP_Product_Planning.COLUMNNAME_TimeFence) + " : " + m_product_planning.getTimeFence()+ "-"+ Msg.getMsg(getCtx(),"Date")+ " : "+ TimeFence+ " "+ Msg.translate(getCtx(),MPPOrder.COLUMNNAME_DatePromised)+ " : "+ DemandDateStartSchedule;    createMRPNote("MRP-100",AD_Org_ID,PP_MRP_ID,product,null,QtyPlanned,comment,trxName);  }  if (m_product_planning.isCreatePlan() == false && QtyPlanned.signum() > 0) {    createMRPNote("MRP-020",AD_Org_ID,PP_MRP_ID,product,null,QtyPlanned,null,trxName);    return;  }  if (QtyPlanned.signum() > 0) {    int loops=1;    if (m_product_planning.getOrder_Policy().equals(X_PP_Product_Planning.ORDER_POLICY_FixedOrderQuantity)) {      if (m_product_planning.getOrder_Qty().signum() != 0)       loops=(QtyPlanned.divide(m_product_planning.getOrder_Qty(),0,BigDecimal.ROUND_UP)).intValueExact();      QtyPlanned=m_product_planning.getOrder_Qty();    }    for (int ofq=1; ofq <= loops; ofq++) {      log.info("Is Purchased: " + product.isPurchased() + " Is BOM: "+ product.isBOM());      try {        createSupply(AD_Org_ID,PP_MRP_ID,product,QtyPlanned,DemandDateStartSchedule,trxName);      } catch (      Exception e) {        createMRPNote("MRP-160",AD_Org_ID,PP_MRP_ID,product,QtyPlanned,DemandDateStartSchedule,e,trxName);      }    }  } else {    log.info("No Create Plan");  }}  }
class C{  public String GetElementAttr(String xPathExpression){  try {    org.jdom.Attribute node=(Attribute)XPath.selectSingleNode(this.xmlDocument,xPathExpression);    return node.getValue();  } catch (  Exception ex) {    LOG.error("Error in handler: " + ex.getMessage(),ex);    return "";  }}  }
class C{  public PlotRenderingInfo(ChartRenderingInfo owner){  this.owner=owner;  this.dataArea=new Rectangle2D.Double();  this.subplotInfo=new java.util.ArrayList();}  }
class C{  public Type capture(Type t){  return types.capture(t);}  }
class C{  public static IndexKeyRange unbounded(IndexRowType indexRowType){  IndexBound unbounded=new IndexBound(new ValuesHolderRow(indexRowType),ConstantColumnSelector.ALL_OFF);  return new IndexKeyRange(indexRowType,unbounded,false,unbounded,false,IndexKind.CONVENTIONAL);}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof SpanNode || child instanceof BRNode || child instanceof TabNode|| child instanceof ImgNode|| child instanceof LinkNode|| child instanceof CDATANode) {    if (child instanceof LinkNode && (((LinkNode)child).href == null)) {      throw new FXGException(getStartLine(),getStartColumn(),"MissingHref");    }    if (child instanceof LinkNode && this.parentNode instanceof LinkNode) {      throw new FXGException(getStartLine(),getStartColumn(),"InvalidNestingElements");    }    if (content == null)     content=new ArrayList<TextNode>();    content.add((TextNode)child);  } else {    super.addChild(child);    return;  }  if (child instanceof AbstractRichTextNode)   ((AbstractRichTextNode)child).setParent(this);}  }
class C{  public void removeListener(ILabelProviderListener listener){}  }
class C{  public boolean verify(final byte[] salt,final Signature signature){  final Signer signer=new Signer(this.keyPair);  return signer.verify(this.getPayload(salt),signature);}  }
class C{  public int detectEncoding(byte[] rawtext){  int[] scores;  int index, maxscore=0;  int encoding_guess=OTHER;  scores=new int[TOTALTYPES];  scores[GB2312]=gb2312_probability(rawtext);  scores[GBK]=gbk_probability(rawtext);  scores[GB18030]=gb18030_probability(rawtext);  scores[HZ]=hz_probability(rawtext);  scores[BIG5]=big5_probability(rawtext);  scores[CNS11643]=euc_tw_probability(rawtext);  scores[ISO2022CN]=iso_2022_cn_probability(rawtext);  scores[UTF8]=utf8_probability(rawtext);  scores[UNICODE]=utf16_probability(rawtext);  scores[EUC_KR]=euc_kr_probability(rawtext);  scores[CP949]=cp949_probability(rawtext);  scores[JOHAB]=0;  scores[ISO2022KR]=iso_2022_kr_probability(rawtext);  scores[ASCII]=ascii_probability(rawtext);  scores[SJIS]=sjis_probability(rawtext);  scores[EUC_JP]=euc_jp_probability(rawtext);  scores[ISO2022JP]=iso_2022_jp_probability(rawtext);  scores[UNICODET]=0;  scores[UNICODES]=0;  scores[ISO2022CN_GB]=0;  scores[ISO2022CN_CNS]=0;  scores[OTHER]=0;  for (index=0; index < TOTALTYPES; index++) {    if (debug)     System.err.println("Encoding " + nicename[index] + " score "+ scores[index]);    if (scores[index] > maxscore) {      encoding_guess=index;      maxscore=scores[index];    }  }  if (maxscore <= 50) {    encoding_guess=OTHER;  }  return encoding_guess;}  }
class C{  public boolean isTitleEnabled(){  return mCollapsingTitleEnabled;}  }
class C{  public String handleGetMessage(Locale locale,String key,Object[] subs){  return MessageFormat.format(handleGetMessage(locale,key),subs);}  }
class C{  private void highlight(boolean highlighted){  if (highlighted) {    this.setBackground(COLOR_HIGHLIGHT);  } else {    this.setBackground(defaultBackground);  }}  }
class C{  public static boolean intersectLineSegmentTriangle(Vector3fc p0,Vector3fc p1,Vector3fc v0,Vector3fc v1,Vector3fc v2,float epsilon,Vector3f intersectionPoint){  return intersectLineSegmentTriangle(p0.x(),p0.y(),p0.z(),p1.x(),p1.y(),p1.z(),v0.x(),v0.y(),v0.z(),v1.x(),v1.y(),v1.z(),v2.x(),v2.y(),v2.z(),epsilon,intersectionPoint);}  }
class C{  public Contour(MatOfPoint data){  this.mat=data;}  }
class C{  public void serialize(KXmlSerializer serializer) throws IOException {  serializer.startTag(ns,TAG);  serializeAttribute(serializer,NAME_ATTR,mName);  serializeAttribute(serializer,APP_PACKAGE_NAME_ATTR,mAppPackageName);  serializeAttribute(serializer,DIGEST_ATTR,getDigest());  if (SIGNATURE_TEST_PKG.equals(mName)) {    serializer.attribute(ns,"signatureCheck","true");  }  mSuiteRoot.serialize(serializer);  serializer.endTag(ns,TAG);}  }
class C{  public Map<String,Object> sendPostForUpload(String url,Map<String,Object> parameters){  SimpleClientHttpRequestFactory requestFactory=new SimpleClientHttpRequestFactory();  requestFactory.setBufferRequestBody(false);  RestTemplate restTemplate=new RestTemplate(requestFactory);  List<HttpMessageConverter<?>> mc=restTemplate.getMessageConverters();  mc.add(new MappingJackson2HttpMessageConverter());  restTemplate.setMessageConverters(mc);  MultiValueMap<String,Object> postParams=new LinkedMultiValueMap<String,Object>();  postParams.setAll(parameters);  Map<String,Object> response=new HashMap<String,Object>();  HttpHeaders headers=new HttpHeaders();  headers.set("Content-Type","multipart/form-data");  headers.set("Accept","application/json");  headers.add("Cookie","JSESSIONID=" + localContext.getCookieStore().getCookies().get(0).getValue());  HttpEntity<Object> request=new HttpEntity<Object>(postParams,headers);  ResponseEntity<?> result=restTemplate.exchange(url,HttpMethod.POST,request,String.class);  String body=result.getBody().toString();  MediaType contentType=result.getHeaders().getContentType();  HttpStatus statusCode=result.getStatusCode();  response.put(CONTENT_TYPE,contentType);  response.put(STATUS_CODE,statusCode);  response.put(BODY,body);  return response;}  }
class C{  public final boolean hasOutline(){  return OutlinesObj != null;}  }
class C{  private static void performInitialSelection(final List<LockItemModel> items){  boolean unlockableExists=false;  for (  LockItemModel item : items) {    if (item.canBeUnlocked()) {      unlockableExists=true;      item.setSelectionStatus(Boolean.TRUE);    }  }  if (!unlockableExists) {    for (    LockItemModel item : items) {      if (item.canBeLocked()) {        item.setSelectionStatus(Boolean.TRUE);      }    }  }}  }
class C{  public void onNewIntent(Intent intent){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onNewIntent(intent);    }  }}  }
class C{  public void await(long timeout,TimeUnit unit) throws InterruptedException, TimeoutException {  if (!latch.await(timeout,unit)) {    throw new TimeoutException();  }}  }
class C{  private static boolean isMapped(Class<?> aClass,XML xml){  return xml.isInheritedMapped(aClass) || Annotation.isInheritedMapped(aClass);}  }
class C{  @Override @TargetApi(Build.VERSION_CODES.KITKAT) public void sendRequest() throws Throwable {  isLoading=false;  responseCode=0;  URL url=new URL(queryUrl);{    Proxy proxy=params.getProxy();    if (proxy != null) {      connection=(HttpURLConnection)url.openConnection(proxy);    } else {      connection=(HttpURLConnection)url.openConnection();    }    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {      connection.setRequestProperty("Connection","close");    }    connection.setReadTimeout(params.getConnectTimeout());    connection.setConnectTimeout(params.getConnectTimeout());    connection.setInstanceFollowRedirects(params.getRedirectHandler() == null);    if (connection instanceof HttpsURLConnection) {      SSLSocketFactory sslSocketFactory=params.getSslSocketFactory();      if (sslSocketFactory != null) {        ((HttpsURLConnection)connection).setSSLSocketFactory(sslSocketFactory);      }    }  }  if (params.isUseCookie()) {    try {      Map<String,List<String>> singleMap=COOKIE_MANAGER.get(url.toURI(),new HashMap<String,List<String>>(0));      List<String> cookies=singleMap.get("Cookie");      if (cookies != null) {        connection.setRequestProperty("Cookie",TextUtils.join(";",cookies));      }    } catch (    Throwable ex) {      LogUtil.e(ex.getMessage(),ex);    }  }{    List<RequestParams.Header> headers=params.getHeaders();    if (headers != null) {      for (      RequestParams.Header header : headers) {        String name=header.key;        String value=header.getValueStr();        if (!TextUtils.isEmpty(name) && !TextUtils.isEmpty(value)) {          if (header.setHeader) {            connection.setRequestProperty(name,value);          } else {            connection.addRequestProperty(name,value);          }        }      }    }  }  if (requestInterceptListener != null) {    requestInterceptListener.beforeRequest(this);  }{    HttpMethod method=params.getMethod();    try {      connection.setRequestMethod(method.toString());    } catch (    ProtocolException ex) {      try {        Field methodField=HttpURLConnection.class.getDeclaredField("method");        methodField.setAccessible(true);        methodField.set(connection,method.toString());      } catch (      Throwable ignored) {        throw ex;      }    }    if (HttpMethod.permitsRequestBody(method)) {      RequestBody body=params.getRequestBody();      if (body != null) {        if (body instanceof ProgressBody) {          ((ProgressBody)body).setProgressHandler(progressHandler);        }        String contentType=body.getContentType();        if (!TextUtils.isEmpty(contentType)) {          connection.setRequestProperty("Content-Type",contentType);        }        long contentLength=body.getContentLength();        if (contentLength < 0) {          connection.setChunkedStreamingMode(256 * 1024);        } else {          if (contentLength < Integer.MAX_VALUE) {            connection.setFixedLengthStreamingMode((int)contentLength);          } else           if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            connection.setFixedLengthStreamingMode(contentLength);          } else {            connection.setChunkedStreamingMode(256 * 1024);          }        }        connection.setRequestProperty("Content-Length",String.valueOf(contentLength));        connection.setDoOutput(true);        body.writeTo(connection.getOutputStream());      }    }  }  if (params.isUseCookie()) {    try {      Map<String,List<String>> headers=connection.getHeaderFields();      if (headers != null) {        COOKIE_MANAGER.put(url.toURI(),headers);      }    } catch (    Throwable ex) {      LogUtil.e(ex.getMessage(),ex);    }  }  responseCode=connection.getResponseCode();  if (requestInterceptListener != null) {    requestInterceptListener.afterRequest(this);  }  if (responseCode == 204 || responseCode == 205) {    throw new HttpException(responseCode,this.getResponseMessage());  } else   if (responseCode >= 300) {    HttpException httpException=new HttpException(responseCode,this.getResponseMessage());    try {      httpException.setResult(IOUtil.readStr(this.getInputStream(),params.getCharset()));    } catch (    Throwable ignored) {    }    LogUtil.e(httpException.toString() + ", url: " + queryUrl);    throw httpException;  }  isLoading=true;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.183 -0400",hash_original_method="2A9E440FCF0AAE6B2EF64361426B6DDA",hash_generated_method="738BEB3568983C73A7474ABE3EBE6D75") private String doRawStream(BOMInputStream bom,BOMInputStream pis,boolean lenient) throws IOException {  String bomEnc=bom.getBOMCharsetName();  String xmlGuessEnc=pis.getBOMCharsetName();  String xmlEnc=getXmlProlog(pis,xmlGuessEnc);  try {    return calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc);  } catch (  XmlStreamReaderException ex) {    if (lenient) {      return doLenientDetection(null,ex);    } else {      throw ex;    }  }}  }
class C{  static RenewSpec extractRenew(AssertionType inputToken){  assert inputToken != null;  final boolean renewable=true;  final boolean renew=true;  return new RenewSpec(renewable,renew,parseRenewCount(inputToken));}  }
class C{  protected void applyRotation(DrawContext dc){  if (!(this.parent instanceof KMLGroundOverlay))   return;  KMLLatLonBox box=((KMLGroundOverlay)this.parent).getLatLonBox();  if (box != null) {    Double rotation=box.getRotation();    if (rotation != null) {      Sector sector=KMLUtil.createSectorFromLatLonBox(box);      java.util.List<LatLon> corners=KMLUtil.rotateSector(dc.getGlobe(),sector,Angle.fromDegrees(rotation));      this.setOuterBoundary(corners);    }  }}  }
class C{  @NoNullCheck @Unpreemptible protected static Lock attemptToInflate(Object o,Offset lockOffset,Lock l){  if (false)   VM.sysWriteln("l = ",Magic.objectAsAddress(l));  l.mutex.lock();  for (int cnt=0; ; ++cnt) {    Word bits=Magic.getWordAtOffset(o,lockOffset);    if (isFat(bits)) {      if (trace) {        VM.sysWriteln("Thread #",RVMThread.getCurrentThreadSlot(),": freeing lock ",Magic.objectAsAddress(l)," because we had a double-inflate");      }      Lock result=Lock.getLock(getLockIndex(bits));      if (result == null || result.lockedObject != o) {        continue;      }      Lock.free(l);      l.mutex.unlock();      return result;    }    if (VM.VerifyAssertions)     VM._assert(l != null);    if (attemptToMarkInflated(o,lockOffset,bits,l.index,cnt)) {      l.setLockedObject(o);      l.setOwnerId(getLockOwner(bits));      if (l.getOwnerId() != 0) {        l.setRecursionCount(getRecCount(bits));      } else {        if (VM.VerifyAssertions)         VM._assert(l.getRecursionCount() == 0);      }      return l;    }  }}  }
class C{  public boolean contains(long index){  if (!validIndex(index))   return false;  Segment segment=segments.segment(index);  return segment != null && segment.contains(index);}  }
class C{  private void checkPackedTextureProps(Material mat){  Collection<MatParam> params=mat.getParams();  for (Iterator<MatParam> it=new ArrayList<MatParam>(params).iterator(); it.hasNext(); ) {    MatParam param=it.next();    MaterialProperty prop=new MaterialProperty(param);    if (prop.getValue() == null) {switch (param.getVarType()) {case Texture2D:case Texture3D:case TextureArray:case TextureBuffer:case TextureCubeMap:        try {          MatParamTexture texParam=mat.getTextureParam(param.getName());          Texture tex=texParam.getTextureValue();          Image img=tex.getImage();          if (img == null) {            logger.log(Level.INFO,"No image found");            return;          }          BufferedImage image=ImageToAwt.convert(img,false,false,0);          ByteArrayOutputStream out=new ByteArrayOutputStream();          ImageWriter imgWrtr=ImageIO.getImageWritersByFormatName("png").next();          ImageOutputStream imgOutStrm;          imgOutStrm=ImageIO.createImageOutputStream(out);          imgWrtr.setOutput(imgOutStrm);          ImageWriteParam jpgWrtPrm=imgWrtr.getDefaultWriteParam();          imgWrtr.write(null,new IIOImage(image,null,null),jpgWrtPrm);          imgOutStrm.close();          out.close();          String texturePath=material.getName();          texturePath="Textures/" + texturePath + "-"+ param.getName()+ ".png";          StoreTextureWizardWizardAction act=new StoreTextureWizardWizardAction(manager,out.toByteArray(),texturePath);          act.actionPerformed(null);          texturePath=act.getName();          TextureKey texKey=new TextureKey(texturePath);          TextureKey oldKey=(TextureKey)tex.getKey();          if (oldKey != null) {            Beans.copyProperties(texKey,oldKey);          }          texKey.setFlipY(false);          Texture texture=manager.loadTexture(texKey);          MatParamTexture newParam=new MatParamTexture(texParam.getVarType(),texParam.getName(),texture,null);          materialParameters.put(newParam.getName(),new MaterialProperty(newParam));        } catch (        Exception ex) {          Exceptions.printStackTrace(ex);        }      break;default :  }} else {  materialParameters.put(param.getName(),prop);}}}  }
class C{  public double[][] coefficients(){  return m_Par;}  }
class C{  private void markSubroutines(){  BitSet anyvisited=new BitSet();  markSubroutineWalk(mainSubroutine,0,anyvisited);  for (Iterator<Map.Entry<LabelNode,BitSet>> it=subroutineHeads.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<LabelNode,BitSet> entry=it.next();    LabelNode lab=entry.getKey();    BitSet sub=entry.getValue();    int index=instructions.indexOf(lab);    markSubroutineWalk(sub,index,anyvisited);  }}  }
class C{  public ReflectionException(java.lang.Exception e,String message){  super(message);  exception=e;}  }
class C{  public static Color parseColorFromProperties(Properties p,String propName,String dfault,boolean forceAlpha) throws NumberFormatException {  String colorString=p.getProperty(propName,dfault);  return parseColor(colorString,forceAlpha);}  }
class C{  public TestTable1 selectByNameCreateTime(String name,java.util.Date createTime){  Criteria c=WHERE();  c.name.eq(name);  c.createTime.eq(createTime);  return super.selectOneByExample(c.example);}  }
class C{  public void resetRootsStream(){  rootsStream.resetData();  totalRoots=0;}  }
class C{  void readPAT(E00Record r,int n) throws IOException {  int itype=r.getItemIndex(prefix.substring(0,2) + "PTTYPE");  int ival=r.getItemIndex(prefix.substring(0,2) + "PTVAL");  int ival2=r.getItemIndex(prefix.substring(0,2) + "PYTYPE");  int iname=r.getItemIndex(prefix.substring(0,2) + "PTNAME");  for (int i=0; i < n; i++) {    r.read(isr);    BasicLocation bl=(BasicLocation)labs.getOMGraphicAt(i);    String S=r.getStringField(iname).trim();    if (bl == null)     continue;    if (S.length() > 0) {      Debug.message("e00",S);      bl.setName(S);      bl.setShowName(true);    } else     bl.setLabel(null);    E00Data d=(E00Data)bl.getAttribute(OMGraphic.APP_OBJECT);    if (itype != -1)     d.type=r.getIntField(itype);    if (ival != -1)     d.valeur=r.getIntField(ival);    if (ival2 != -1)     d.valeur2=r.getIntField(ival2); else     d.valeur2=d.valeur;    if (itype >= 0)     setLocationColor(bl,r.getIntField(itype));  }}  }
class C{  public static Collection<CommunicationSummaryStatistics> buildCommunicationSummaryTree(Collection<CommunicationSummaryStatistics> nodes,Set<String> endpoints){  Map<String,CommunicationSummaryStatistics> nodeMap=new HashMap<String,CommunicationSummaryStatistics>();  for (  CommunicationSummaryStatistics css : nodes) {    nodeMap.put(css.getId(),css);  }  List<CommunicationSummaryStatistics> ret=new ArrayList<>();  for (  String endpoint : endpoints) {    CommunicationSummaryStatistics n=nodeMap.get(EndpointUtil.encodeClientURI(endpoint));    if (n == null) {      n=nodeMap.get(endpoint);    }    if (n != null) {      CommunicationSummaryStatistics rootNode=new CommunicationSummaryStatistics(n);      initCommunicationSummaryTreeNode(rootNode,nodeMap,new HashSet<>(Collections.singleton(rootNode.getId())));      ret.add(rootNode);    }  }  return ret;}  }
class C{  protected void onReleaseResult(D result){}  }
class C{  public StandardPieToolTipGenerator(String labelFormat){  this(labelFormat,Locale.getDefault());}  }
class C{  public void put(int key,long value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      long[] nvalues=new long[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static JarArchive open(File f) throws IOException {  return new DefaultJarArchive(f.getAbsolutePath());}  }
class C{  public void addEntry(Entry e,int dataSetIndex){  if (mDataSets.size() > dataSetIndex && dataSetIndex >= 0) {    float val=e.getVal();    mYValCount+=1;    mYValueSum+=val;    if (mYMax < val)     mYMax=val;    if (mYMin > val)     mYMin=val;    T set=mDataSets.get(dataSetIndex);    if (set != null) {      if (set.getAxisDependency() == AxisDependency.LEFT) {        if (mLeftAxisMax < e.getVal())         mLeftAxisMax=e.getVal();        if (mLeftAxisMin > e.getVal())         mLeftAxisMin=e.getVal();      } else {        if (mRightAxisMax < e.getVal())         mRightAxisMax=e.getVal();        if (mRightAxisMin > e.getVal())         mRightAxisMin=e.getVal();      }      handleEmptyAxis(getFirstLeft(),getFirstRight());      set.addEntry(e);    }  } else {    Log.e("addEntry","Cannot add Entry because dataSetIndex too high or too low.");  }}  }
class C{  @Override public void testIgnored(Description description) throws java.lang.Exception {  LoggingUtils.getEvoLogger().info("* Ignored: " + "ClassName: " + description.getClassName() + ", MethodName: "+ description.getMethodName());}  }
class C{  public static RE mkChar(char c){  return mkString(Character.toString(c));}  }
class C{  private int lineBeginningFor(int pos){  if (sourceChars == null) {    return -1;  }  if (pos <= 0) {    return 0;  }  char[] buf=sourceChars;  if (pos >= buf.length) {    pos=buf.length - 1;  }  while (--pos >= 0) {    char c=buf[pos];    if (c == '\n' || c == '\r') {      return pos + 1;    }  }  return 0;}  }
class C{  public DataBaseAdmin(){}  }
class C{  private int makeSendReqPdu(){  if (mMessage == null) {    mMessage=new ByteArrayOutputStream();    mPosition=0;  }  appendOctet(PduHeaders.MESSAGE_TYPE);  appendOctet(PduHeaders.MESSAGE_TYPE_SEND_REQ);  appendOctet(PduHeaders.TRANSACTION_ID);  byte[] trid=mPduHeader.getTextString(PduHeaders.TRANSACTION_ID);  if (trid == null) {    throw new IllegalArgumentException("Transaction-ID is null.");  }  appendTextString(trid);  if (appendHeader(PduHeaders.MMS_VERSION) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendHeader(PduHeaders.DATE);  if (appendHeader(PduHeaders.FROM) != PDU_COMPOSE_SUCCESS) {    return PDU_COMPOSE_CONTENT_ERROR;  }  boolean recipient=false;  if (appendHeader(PduHeaders.TO) != PDU_COMPOSE_CONTENT_ERROR) {    recipient=true;  }  if (appendHeader(PduHeaders.CC) != PDU_COMPOSE_CONTENT_ERROR) {    recipient=true;  }  if (appendHeader(PduHeaders.BCC) != PDU_COMPOSE_CONTENT_ERROR) {    recipient=true;  }  if (!recipient) {    return PDU_COMPOSE_CONTENT_ERROR;  }  appendHeader(PduHeaders.SUBJECT);  appendHeader(PduHeaders.MESSAGE_CLASS);  appendHeader(PduHeaders.EXPIRY);  appendHeader(PduHeaders.PRIORITY);  appendHeader(PduHeaders.DELIVERY_REPORT);  appendHeader(PduHeaders.READ_REPORT);  appendOctet(PduHeaders.CONTENT_TYPE);  return makeMessageBody();}  }
class C{  public void testRemoveAllRandomAccess(){  Multimap<String,Integer> multimap=create();  multimap.put("foo",1);  multimap.put("foo",3);  assertTrue(multimap.removeAll("foo") instanceof RandomAccess);  assertTrue(multimap.removeAll("bar") instanceof RandomAccess);}  }
class C{  public static String valueOf(int char32){  if (char32 < CODEPOINT_MIN_VALUE || char32 > CODEPOINT_MAX_VALUE) {    throw new IllegalArgumentException("Illegal codepoint");  }  return toString(char32);}  }
class C{  public void copy(){  this.checkWidget();  this.text.copy();}  }
class C{  protected final V wrapKey(Object o){  return (V)o;}  }
class C{  public static TransactionInput fromProtobuf(BCSAPIMessage.TXIN pi){  return new TransactionInput(new Outpoint(new TID(pi.getSource().toByteArray()),pi.getSourceix()),pi.getSequence(),new Script(pi.getScript().toByteArray()));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Sage.childrenNames(getString(stack));}  }
class C{  public ReasonFlags(boolean[] flags){  this.flags=flags;}  }
class C{  protected Properties convertToProperty(Map<?,?> data) throws IOException {  Properties properties=new Properties();  for (Iterator<?> entryIter=data.entrySet().iterator(); entryIter.hasNext(); ) {    Map.Entry<?,?> entry=(Map.Entry<?,?>)entryIter.next();    Object key=entry.getKey();    Object val=(entry.getValue() == null) ? "" : entry.getValue();    if (!(key instanceof String)) {      throw new IOException("JobDataMap keys/values must be Strings " + "when the 'useProperties' property is set. " + " offending Key: "+ key);    }    if (!(val instanceof String)) {      throw new IOException("JobDataMap values must be Strings " + "when the 'useProperties' property is set. " + " Key of offending value: "+ key);    }    properties.put(key,val);  }  return properties;}  }
class C{  public KeyProcessorContext updateCurrentContext(Component component,Shortcut sc,boolean isModalContext){  myContext.setFoundComponent(null);  myContext.getActions().clear();  if (isControlEnterOnDialog(component,sc))   return myContext;  boolean hasSecondStroke=false;  for (; component != null; component=component.getParent()) {    if (!(component instanceof JComponent)) {      continue;    }    List<AnAction> listOfActions=ActionUtil.getActions((JComponent)component);    if (listOfActions.isEmpty()) {      continue;    }    for (    Object listOfAction : listOfActions) {      if (!(listOfAction instanceof AnAction)) {        continue;      }      AnAction action=(AnAction)listOfAction;      hasSecondStroke|=addAction(action,sc);    }    if (!myContext.getActions().isEmpty()) {      myContext.setFoundComponent((JComponent)component);      break;    }  }  Keymap keymap=KeymapManager.getInstance().getActiveKeymap();  String[] actionIds=keymap.getActionIds(sc);  ActionManager actionManager=ActionManager.getInstance();  for (  String actionId : actionIds) {    AnAction action=actionManager.getAction(actionId);    if (action != null) {      if (isModalContext && !action.isEnabledInModalContext()) {        continue;      }      hasSecondStroke|=addAction(action,sc);    }  }  if (!hasSecondStroke && sc instanceof KeyboardShortcut) {    final KeyboardShortcut keyboardShortcut=(KeyboardShortcut)sc;    final KeyStroke firstKeyStroke=keyboardShortcut.getFirstKeyStroke();    final KeyStroke secondKeyStroke=keyboardShortcut.getSecondKeyStroke();    if (secondKeyStroke != null && secondKeyStroke.getModifiers() != 0 && firstKeyStroke.getModifiers() != 0) {      final KeyboardShortcut altShortCut=new KeyboardShortcut(firstKeyStroke,KeyStroke.getKeyStroke(secondKeyStroke.getKeyCode(),0));      final String[] additionalActions=keymap.getActionIds(altShortCut);      for (      final String actionId : additionalActions) {        AnAction action=actionManager.getAction(actionId);        if (action != null) {          if (isModalContext && !action.isEnabledInModalContext()) {            continue;          }          hasSecondStroke|=addAction(action,altShortCut);        }      }    }  }  myContext.setHasSecondStroke(hasSecondStroke);  final List<AnAction> actions=myContext.getActions();  if (actions.size() > 1) {    final List<AnAction> readOnlyActions=Collections.unmodifiableList(actions);    for (    ActionPromoter promoter : ActionPromoter.EP_NAME.getExtensions()) {      final List<AnAction> promoted=promoter.promote(readOnlyActions,myContext.getDataContext());      if (promoted.isEmpty())       continue;      actions.removeAll(promoted);      actions.addAll(0,promoted);    }  }  return myContext;}  }
class C{  public ViewPropertyAnimator rotationX(float value){  animateProperty(ROTATION_X,value);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:38.299 -0500",hash_original_method="CB2FD50E46BEAA500E1BA02FF1CB309D",hash_generated_method="866E681A0EB1161DFEB42CAAEEE0D322") public SoftInputWindow(Context context,int theme,KeyEvent.DispatcherState dispatcherState){  super(context,theme);  mDispatcherState=dispatcherState;  initDockWindow();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void createProteinLoadJob(){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("StatsUtil class =" + statsUtil.getClass().toString());    LOGGER.debug("WorkerRunner class=" + workerRunner.getClass().toString());    LOGGER.debug("StepInstanceDAO class=" + stepInstanceDAO.getClass().toString());  }  createStepInstancesForJob("jobLoadFromUniParc",null);  LOGGER.debug("Finished creating uniparc step instance");}  }
class C{  public TreeNode(final ObjectType object){  m_object=object;}  }
class C{  @org.junit.Test public void verifyGetDoubleResponse() throws Exception {  Map<String,String> queryParams=new HashMap<String,String>();  String str=client.invokeAPI("/mockResponses/primitiveDoubleResponse","GET",queryParams,null,new HashMap<String,String>(),null,"application/json",null,new String[0]);  assertEquals(str,String.valueOf(ExampleBuilder.SAMPLE_DOUBLE_PROPERTY_VALUE));}  }
class C{  public void testNames(){  String[] names=null;  Metadata meta=new Metadata();  names=meta.names();  assertEquals(0,names.length);  meta.add("name-one","value");  names=meta.names();  assertEquals(1,names.length);  assertEquals("name-one",names[0]);  meta.add("name-two","value");  names=meta.names();  assertEquals(2,names.length);}  }
class C{  public synchronized ISourceRange mapSource(IType type,char[] contents,IBinaryType info,IJavaElement elementToFind){  this.binaryType=(BinaryType)type;  if (this.sourceRanges.get(type) != null)   return (elementToFind != null) ? getNameRange(elementToFind) : null;  this.importsTable.remove(this.binaryType);  this.importsCounterTable.remove(this.binaryType);  this.searchedElement=elementToFind;  this.types=new IType[1];  this.typeDeclarationStarts=new int[1];  this.typeNameRanges=new SourceRange[1];  this.typeModifiers=new int[1];  this.typeDepth=-1;  this.memberDeclarationStart=new int[1];  this.memberName=new String[1];  this.memberNameRange=new SourceRange[1];  this.methodParameterTypes=new char[1][][];  this.methodParameterNames=new char[1][][];  this.anonymousCounter=0;  HashMap oldSourceRanges=null;  if (elementToFind != null) {    oldSourceRanges=(HashMap)this.sourceRanges.clone();  }  try {    IProblemFactory factory=new DefaultProblemFactory();    SourceElementParser parser=null;    this.anonymousClassName=0;    if (info == null) {      try {        info=(IBinaryType)this.binaryType.getElementInfo();      } catch (      JavaModelException e) {        return null;      }    }    boolean isAnonymousClass=info.isAnonymous();    char[] fullName=info.getName();    if (isAnonymousClass) {      String eltName=this.binaryType.getParent().getElementName();      eltName=eltName.substring(eltName.lastIndexOf('$') + 1,eltName.length());      try {        this.anonymousClassName=Integer.parseInt(eltName);      } catch (      NumberFormatException e) {      }    }    boolean doFullParse=hasToRetrieveSourceRangesForLocalClass(fullName);    parser=new SourceElementParser(this,factory,new CompilerOptions(this.options),doFullParse,true);    parser.javadocParser.checkDocComment=false;    IJavaElement javaElement=this.binaryType.getCompilationUnit();    if (javaElement == null)     javaElement=this.binaryType.getParent();    parser.parseCompilationUnit(new BasicCompilationUnit(contents,null,this.binaryType.sourceFileName(info),javaElement),doFullParse,null);    if (elementToFind != null) {      ISourceRange range=getNameRange(elementToFind);      return range;    } else {      return null;    }  }  finally {    if (elementToFind != null) {      this.sourceRanges=oldSourceRanges;    }    this.binaryType=null;    this.searchedElement=null;    this.types=null;    this.typeDeclarationStarts=null;    this.typeNameRanges=null;    this.typeDepth=-1;  }}  }
class C{  protected void drawChartValuesText(Canvas canvas,XYSeries series,XYSeriesRenderer renderer,Paint paint,List<Float> points,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  float halfDiffX=getHalfDiffX(points,length,seriesNr);  for (int i=0; i < length; i+=2) {    int index=startIndex + i / 2;    double value=series.getY(index);    if (!isNullValue(value)) {      float x=points.get(i);      if (mType == Type.DEFAULT) {        x+=seriesIndex * 2 * halfDiffX - (seriesNr - 1.5f) * halfDiffX;      }      if (value >= 0) {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) - renderer.getChartValuesSpacing(),paint,0);      } else {        drawText(canvas,getLabel(renderer.getChartValuesFormat(),value),x,points.get(i + 1) + renderer.getChartValuesTextSize() + renderer.getChartValuesSpacing() - 3,paint,0);      }    }  }}  }
class C{  private void buildStatements(@NonNull String statementFormat,Object... objects){  builder.beginControlFlow("if (!$L($T.class, $S, $L, $L))",SHOULD_IGNORE_METHOD_NAME,typeMirror,getter.name,RaveWriter.EXCLUSION_STRATEGY_MAP_ARG_NAME,RaveWriter.VALIDATION_CONTEXT_ARG_NAME);  builder.addStatement(statementFormat,objects);  builder.endControlFlow();}  }
class C{  private CertStore createCertStoreForRevChecking(Collection<AlternativeOCSP> ocspCollection) throws CertificateRevocationCheckException {  Collection<Object> certCollection=new ArrayList<Object>();  if (null != ocspCollection) {    for (    AlternativeOCSP altOCSP : ocspCollection) {      X509Certificate cert=altOCSP.get_responderSigningCert();      if (null != cert) {        certCollection.add(cert);      }    }  } else {    X509Certificate cert=this.certPolicy.getOCSPResponderSigningCert();    if (null != cert) {      certCollection.add(cert);    }  }  try {    return CertStore.getInstance("Collection",new CollectionCertStoreParameters(certCollection));  } catch (  Exception e) {    throw new CertificateRevocationCheckException("Unable to create cert store." + e.getMessage(),e);  }}  }
class C{  private byte[] calculateDigest(boolean validating) throws ReferenceNotInitializedException, XMLSignatureException {  OutputStream os=null;  try {    MessageDigestAlgorithm mda=this.getMessageDigestAlgorithm();    mda.reset();    DigesterOutputStream diOs=new DigesterOutputStream(mda);    os=new UnsyncBufferedOutputStream(diOs);    XMLSignatureInput output=this.dereferenceURIandPerformTransforms(os);    if (Reference.useC14N11 && !validating && !output.isOutputStreamSet()&& !output.isOctetStream()) {      if (transforms == null) {        transforms=new Transforms(this.doc);        transforms.setSecureValidation(secureValidation);        this.constructionElement.insertBefore(transforms.getElement(),digestMethodElem);      }      transforms.addTransform(Transforms.TRANSFORM_C14N11_OMIT_COMMENTS);      output.updateOutputStream(os,true);    } else {      output.updateOutputStream(os);    }    os.flush();    if (output.getOctetStreamReal() != null) {      output.getOctetStreamReal().close();    }    return diOs.getDigestValue();  } catch (  XMLSecurityException ex) {    throw new ReferenceNotInitializedException("empty",ex);  }catch (  IOException ex) {    throw new ReferenceNotInitializedException("empty",ex);  } finally {    if (os != null) {      try {        os.close();      } catch (      IOException ex) {        throw new ReferenceNotInitializedException("empty",ex);      }    }  }}  }
class C{  public GPUImageBoxBlurFilter(){  this(1f);}  }
class C{  public X509Certificate[] downloadChain() throws AcmeException {  if (chain == null) {    if (chainCertUri == null) {      download();    }    if (chainCertUri == null) {      throw new AcmeProtocolException("No certificate chain provided");    }    LOG.debug("downloadChain");    List<X509Certificate> certChain=new ArrayList<>();    URI link=chainCertUri;    while (link != null && certChain.size() < MAX_CHAIN_LENGTH) {      try (Connection conn=getSession().provider().connect()){        int rc=conn.sendRequest(chainCertUri,getSession());        if (rc != HttpURLConnection.HTTP_OK) {          conn.throwAcmeException();        }        certChain.add(conn.readCertificate());        link=conn.getLink("up");      } catch (      IOException ex) {        throw new AcmeNetworkException(ex);      }    }    if (link != null) {      throw new AcmeProtocolException("Recursion limit reached (" + MAX_CHAIN_LENGTH + "). Didn't get "+ link);    }    chain=certChain.toArray(new X509Certificate[certChain.size()]);  }  return chain;}  }
class C{  private static void updateHttpCacheHeaderValues(HttpURLConnection connection,Channel channel){  long lastModified=connection.getLastModified();  String eTag=connection.getHeaderField("ETag");  if (lastModified > 0) {    channel.setLastModified(lastModified);  }  if (eTag != null) {    channel.setETag(eTag);  }}  }
class C{  private boolean adjStep(Graph graph,IndependenceTest ind,IKnowledge knowledge,SepsetMap sepset,int n){  Iterator<Node> it=latents.iterator();  boolean result=false;  List<Node> visited=new LinkedList<>();  while (it.hasNext()) {    Node nodeX=it.next();    Set<Node> set=new HashSet<>();    for (    Node node : graph.getAdjacentNodes(nodeX)) {      if (latents.contains(node)) {        set.add(node);      }    }    for (    Node aVisited : visited) {      set.remove(aVisited);    }    visited.add(nodeX);    Iterator<Node> it1=(new HashSet<>(set)).iterator();    while (it1.hasNext()) {      Node nodeY=it1.next();      Set<String> set1=new HashSet<>();      for (      Node node : graph.getAdjacentNodes(nodeX)) {        if (latents.contains(node)) {          set1.add(node.toString());        }      }      Set<String> set2=new HashSet<>();      for (      Node node : graph.getAdjacentNodes(nodeY)) {        if (latents.contains(node)) {          set2.add(node.toString());        }      }      set1.addAll(set2);      set1.remove(nodeY.toString());      set1.remove(nodeX.toString());      Object[] seta=forbidFilter(set1,nodeX.getName(),knowledge);      if (seta.length >= n) {        result=true;        ChoiceGenerator cg=new ChoiceGenerator(seta.length,n);        int[] subset;        while ((subset=cg.next()) != null) {          List<Node> condSet=asList(subset,seta);          if (ind.isIndependent(nodeX,nodeY,condSet) && knowledge.noEdgeRequired(nodeX.getName(),nodeY.getName())) {            set.remove(nodeY);            graph.removeEdge(nodeX,nodeY);            sepset.set(nodeX,nodeY,new LinkedList(condSet));            break;          }        }      }    }  }  return result;}  }
class C{  public String call() throws IOException, InterruptedException {  StringBuilder powerShellOutput=new StringBuilder();  try {    if (startReading()) {      readData(powerShellOutput);    }  } catch (  IOException ioe) {    Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"Unexpected error reading PowerShell output",ioe);    return ioe.getMessage();  }catch (  Exception e) {    Logger.getLogger(PowerShell.class.getName()).log(Level.SEVERE,"Unexpected error reading PowerShell output",e);  }  return powerShellOutput.toString();}  }
class C{  @SuppressWarnings("unchecked") @protection static <K,V>Map<K,V> dynamicallyCastMap(Map<?,?> map,Class<K> keyType,Class<V> valueType){  if (map == null) {    return null;  }  assert checkCollectionMembers(map.keySet(),keyType) : "The map contains keys with a type other than " + keyType.getName();  assert checkCollectionMembers(map.values(),valueType) : "The map contains values with a type other than " + valueType.getName();  return (Map<K,V>)map;}  }
class C{  public static N4mfFactory init(){  try {    N4mfFactory theN4mfFactory=(N4mfFactory)EPackage.Registry.INSTANCE.getEFactory(N4mfPackage.eNS_URI);    if (theN4mfFactory != null) {      return theN4mfFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new N4mfFactoryImpl();}  }
class C{  public StderrLog(){}  }
class C{  @SuppressWarnings("UnusedParameters") public final List<String> extractTextAsWordlist(int x1,int y1,int x2,int y2,final int page_number,final boolean breakFragments,final String punctuation) throws PdfException {  final int[] v=validateCoordinates(x1,y1,x2,y2);  x1=v[0];  y1=v[1];  x2=v[2];  y2=v[3];  if (breakFragments) {    copyToArrays(x1,y2,x2,y1,true,true,false,punctuation,true);  } else {    copyToArrays();  }  removeEncoding();  cleanupShadowsAndDrownedObjects(true);  final int[] items=getsortedUnusedFragments(true,false);  final int count=items.length;  if (count == 0) {    LogWriter.writeLog("Less than 1 text item on page");    return null;  }  final int writingMode=getWritingMode(items,count);  createLines(count,items,writingMode,true,false,false,false);  float[] f_x1=null, f_x2=null, f_y1=null, f_y2=null;  if (useUnrotatedCoords || writingMode == PdfData.HORIZONTAL_LEFT_TO_RIGHT) {    f_x1=this.f_x1;    f_x2=this.f_x2;    f_y1=this.f_y1;    f_y2=this.f_y2;  } else   if (writingMode == PdfData.HORIZONTAL_RIGHT_TO_LEFT) {    f_x2=this.f_x1;    f_x1=this.f_x2;    f_y1=this.f_y1;    f_y2=this.f_y2;  } else   if (writingMode == PdfData.VERTICAL_BOTTOM_TO_TOP) {    f_x1=this.f_y2;    f_x2=this.f_y1;    f_y1=this.f_x2;    f_y2=this.f_x1;  } else   if (writingMode == PdfData.VERTICAL_TOP_TO_BOTTOM) {    f_x1=this.f_y1;    f_x2=this.f_y2;    f_y2=this.f_x1;    f_y1=this.f_x2;  }  final List<String> values=new ArrayList<String>();  for (int i=0; i < content.length; i++) {    if (content[i] != null) {      if ((colorExtracted) && (isXMLExtraction)) {        if (!content[i].toString().toLowerCase().startsWith(GenericColorSpace.cb)) {          content[i].insert(0,f_colorTag[master]);        }        if (!content[i].toString().toLowerCase().endsWith(GenericColorSpace.ce)) {          content[i].append(GenericColorSpace.ce);        }      }      if (isXMLExtraction) {        values.add((content[i]).toString());      } else {        values.add(Strip.convertToText((content[i]).toString(),isXMLExtraction));      }      if ((!useUnrotatedCoords) && (writingMode == PdfData.VERTICAL_TOP_TO_BOTTOM)) {        values.add(String.valueOf(f_x1[i]));        values.add(String.valueOf(f_y1[i]));        values.add(String.valueOf(f_x2[i]));        values.add(String.valueOf(f_y2[i]));      } else       if ((!useUnrotatedCoords) && (writingMode == PdfData.VERTICAL_BOTTOM_TO_TOP)) {        values.add(String.valueOf(f_x1[i]));        values.add(String.valueOf(f_y2[i]));        values.add(String.valueOf(f_x2[i]));        values.add(String.valueOf(f_y1[i]));      } else {        values.add(String.valueOf(f_x1[i]));        values.add(String.valueOf(f_y1[i]));        values.add(String.valueOf(f_x2[i]));        values.add(String.valueOf(f_y2[i]));      }    }  }  LogWriter.writeLog("Text extraction as wordlist completed");  return values;}  }
class C{  @Override public void abort(){  super.abort();  this.entityManager.clear();}  }
class C{  public static void clear(){  shopId.set(0L);  shopCode.set("DEFAULT");}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public List<NamedRelatedResourceRep> listBySmisProvider(URI smisProviderId){  StorageSystemList response=client.get(StorageSystemList.class,PathConstants.STORAGE_SYSTEM_BY_PROVIDER_URL,smisProviderId);  return defaultList(response.getStorageSystems());}  }
class C{  public boolean hasOutlinks(){  return fieldSetFlags()[19];}  }
class C{  public void test_largeBlobAllocation(){  final int sectorSize=manager.getSectorSize();  assertTrue(manager.getSlotBytes() == 0L);  final long addr=manager.allocate(sectorSize,false);  if (log.isInfoEnabled())   log.info("Manager addr=" + addr + ", sizeof(addr)="+ manager.allocationSize(addr)+ ", slotBytes: "+ manager.getSlotBytes());  assertEquals("allocationSize",sectorSize,manager.allocationSize(addr));  manager.free(addr);  assertTrue(manager.getSlotBytes() == 0L);}  }
class C{  public boolean isHandshakeComplete(){  return handshakeComplete;}  }
class C{  public void startSession(){  if (processor != null) {    processor.startProcessing();  }}  }
class C{  public void rotateRight(int places,int startIndex,int endIndex){  for (int x=0; x < places; x++) {    rotateRight(startIndex,endIndex);  }}  }
class C{  public void testContinuousMode() throws Exception {  processTest(DeploymentMode.CONTINUOUS);}  }
class C{  public void addPush(String k){  int length=k.length();  int limit=itsConstantPool.getUtfEncodingLimit(k,0,length);  if (limit == length) {    addLoadConstant(k);    return;  }  final String SB="java/lang/StringBuffer";  add(ByteCode.NEW,SB);  add(ByteCode.DUP);  addPush(length);  addInvoke(ByteCode.INVOKESPECIAL,SB,"<init>","(I)V");  int cursor=0;  for (; ; ) {    add(ByteCode.DUP);    String s=k.substring(cursor,limit);    addLoadConstant(s);    addInvoke(ByteCode.INVOKEVIRTUAL,SB,"append","(Ljava/lang/String;)Ljava/lang/StringBuffer;");    add(ByteCode.POP);    if (limit == length) {      break;    }    cursor=limit;    limit=itsConstantPool.getUtfEncodingLimit(k,limit,length);  }  addInvoke(ByteCode.INVOKEVIRTUAL,SB,"toString","()Ljava/lang/String;");}  }
class C{  public boolean isAncestorOf(Node node1,Node node2){  return getAncestors(Collections.singletonList(node2)).contains(node1);}  }
class C{  @Override public void snmpV1Trap(InetAddress addr,String cs,int generic,int specific,SnmpVarBindList varBindList) throws IOException, SnmpStatusException {  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"snmpV1Trap","generic=" + generic + ", specific="+ specific);  }  SnmpPduTrap pdu=new SnmpPduTrap();  pdu.address=null;  pdu.port=trapPort;  pdu.type=pduV1TrapPdu;  pdu.version=snmpVersionOne;  if (cs != null)   pdu.community=cs.getBytes(); else   pdu.community=null;  pdu.enterprise=enterpriseOid;  pdu.genericTrap=generic;  pdu.specificTrap=specific;  pdu.timeStamp=getSysUpTime();  if (varBindList != null) {    pdu.varBindList=new SnmpVarBind[varBindList.size()];    varBindList.copyInto(pdu.varBindList);  } else   pdu.varBindList=null;  try {    if (address != null)     pdu.agentAddr=handleMultipleIpVersion(address.getAddress()); else     pdu.agentAddr=handleMultipleIpVersion(InetAddress.getLocalHost().getAddress());  } catch (  UnknownHostException e) {    byte[] zeroedAddr=new byte[4];    pdu.agentAddr=handleMultipleIpVersion(zeroedAddr);  }  if (addr != null)   sendTrapPdu(addr,pdu); else   sendTrapPdu(pdu);}  }
class C{  private void addDirectoryValuesToList(Class makerNoteClass,int[] tags){  if (metadata.containsDirectory(makerNoteClass)) {    Directory dir=metadata.getDirectory(makerNoteClass);    for (int i=0; i < tags.length; i++) {      addTagKeyValuePairToListAsString(metadataList,dir,tags[i],null);    }  }}  }
class C{  public GroovySocketServer(GroovyShell groovy,GroovyCodeSource source,boolean autoOutput,int port){  this.groovy=groovy;  this.source=source;  this.autoOutput=autoOutput;  try {    url=new URL("http",InetAddress.getLocalHost().getHostAddress(),port,"/");    System.out.println("groovy is listening on port " + port);  } catch (  IOException e) {    e.printStackTrace();  }  new Thread(this).start();}  }
class C{  public void handleDiskRemoval(DiskStore disk) throws ManagementException {  if (!isServiceInitialised("handleDiskRemoval")) {    return;  }  ObjectName diskStoreMBeanName=MBeanJMXAdapter.getDiskStoreMBeanName(cacheImpl.getDistributedSystem().getDistributedMember(),disk.getName());  DiskStoreMBean bean=null;  try {    bean=(DiskStoreMBean)service.getLocalDiskStoreMBean(disk.getName());    if (bean == null) {      return;    }  } catch (  ManagementException e) {    if (logger.isDebugEnabled()) {      logger.debug(e.getMessage(),e);    }    return;  }  bean.stopMonitor();  service.unregisterMBean(diskStoreMBeanName);  Notification notification=new Notification(JMXNotificationType.DISK_STORE_CLOSED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.DISK_STORE_CLOSED_PREFIX + disk.getName());  memberLevelNotifEmitter.sendNotification(notification);  memberMBeanBridge.removeDiskStore(disk);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  public EdgeWeightComparisonEditor(EdgeWeightComparison comparison){  this.comparison=comparison;  setup();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:46.230 -0500",hash_original_method="3FC3D91ED9F213084C3DE2075E5DC6AD",hash_generated_method="ABBBB4B99B75CEFCCF6BB9ED0DC43F49") private StructuredName(){}  }
class C{  public Calendar(long time){  this(time,java.util.TimeZone.getDefault());}  }
class C{  public Exceptional<T> ifPresent(Consumer<? super T> consumer){  if (throwable == null) {    consumer.accept(value);  }  return this;}  }
class C{  public void close() throws IOException {  lat.stopWorking();}  }
class C{  private static void coInterferePhis(SsaMethod ssaMeth,InterferenceGraph interference){  for (  SsaBasicBlock b : ssaMeth.getBlocks()) {    List<SsaInsn> phis=b.getPhiInsns();    int szPhis=phis.size();    for (int i=0; i < szPhis; i++) {      for (int j=0; j < szPhis; j++) {        if (i == j) {          continue;        }        interference.add(phis.get(i).getResult().getReg(),phis.get(j).getResult().getReg());      }    }  }}  }
class C{  public final SecretKey generateKey(){  return spiImpl.engineGenerateKey();}  }
class C{  public static String[] toArray(StringArray array){  if (array == null) {    return new String[0];  } else {    return array.toArray();  }}  }
class C{  public static void shutdown(){  if (mPool != null) {    mPool.shutdown();    mPool=null;  }}  }
class C{  public static int convertTypeToSQLType(int type){  return getDataType(type).sqlType;}  }
class C{  public void compileExpr(ASTree e) throws CompileError {  if (e != null)   gen.compileExpr(e);}  }
class C{  public static void checkFieldSignature(final String signature){  int pos=checkFieldTypeSignature(signature,0);  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  private void fillList(final int offset){  final int bottomEdge=getChildBottom(getChildAt(getChildCount() - 1));  fillListDown(bottomEdge,offset);  final int topEdge=getChildTop(getChildAt(0));  fillListUp(topEdge,offset);}  }
class C{  public static boolean contains(short[] array,short valueToFind){  return indexOf(array,valueToFind) != INDEX_NOT_FOUND;}  }
class C{  private void handleEnd(GuacamoleInstruction instruction){  List<String> args=instruction.getArgs();  if (args.size() < 1)   return;  closeInterceptedStream(args.get(0));}  }
class C{  public Vector2 add(Vector2 v){  x+=v.x;  y+=v.y;  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String valueSparse(int indexOfIndex) throws Exception {  return actualValue(indexOfIndex);}  }
class C{  public boolean isOverwriteActivity(){  Object oo=get_Value(COLUMNNAME_OverwriteActivity);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private int makeAvailable(){  if (pos != -1) {    return 0;  }  total+=tail - head - pad;  System.arraycopy(buffer,tail - pad,buffer,0,pad);  head=0;  tail=pad;  for (; ; ) {    int bytesRead=0;    try {      bytesRead=input.read(buffer,tail,bufSize - tail);    } catch (    IOException e) {      throw new RuntimeException("Error while reading multipart stream");    }    if (bytesRead == -1) {      final String msg="Stream ended unexpectedly";      throw new MalformedStreamException(msg);    }    tail+=bytesRead;    findSeparator();    int av=available();    if (av > 0 || pos != -1) {      return av;    }  }}  }
class C{  public static Attribute attribute(String name){  return new Attribute(name);}  }
class C{  private void fixDown(int k){  int j;  while ((j=k << 1) <= size && j > 0) {    if (j < size && queue[j].nextExecutionTime > queue[j + 1].nextExecutionTime)     j++;    if (queue[k].nextExecutionTime <= queue[j].nextExecutionTime)     break;    TimerTask tmp=queue[j];    queue[j]=queue[k];    queue[k]=tmp;    k=j;  }}  }
class C{  private String buildSqlTimingDump(Spy spy,long execTime,String methodCall,String sql,boolean debugInfo){  StringBuffer out=new StringBuffer();  if (debugInfo) {    out.append(getDebugInfo());    out.append(nl);    out.append(spy.getConnectionNumber());    out.append(". ");  }  sql=processSql(sql);  out.append(sql);  out.append(" {executed in ");  out.append(execTime);  out.append(" msec}");  return out.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:12.546 -0500",hash_original_method="E7765B1F5071215565A877BF624E5F15",hash_generated_method="48AAD943FA72B2B79BA264EF711FFE29") @DSVerified @DSSpec(DSCat.INTERNET) public DatagramSocket createDatagramSocket(int port,InetAddress laddr) throws SocketException {  return new DatagramSocket(port,laddr);}  }
class C{  private void readBinary(final LittleEndianDataInputStream dis) throws IOException {  RajLog.i("StlPaser: Reading Binary");  dis.skip(80);  int facetCount=dis.readInt();  float[] verticesArr=new float[facetCount * 9];  float[] normalsArr=new float[facetCount * 9];  int[] indicesArr=new int[facetCount * 3];  float[] tempNorms=new float[3];  int vertPos=0, normPos=0;  for (int i=0; i < indicesArr.length; i++)   indicesArr[i]=i;  while (dis.available() > 0) {    for (int j=0; j < 3; j++) {      tempNorms[j]=dis.readFloat();      if (Float.isNaN(tempNorms[j]) || Float.isInfinite(tempNorms[j])) {        RajLog.w("STL contains bad normals of NaN or Infinite!");        tempNorms[0]=0;        tempNorms[1]=0;        tempNorms[2]=0;        break;      }    }    for (int j=0; j < 3; j++) {      normalsArr[normPos++]=tempNorms[0];      normalsArr[normPos++]=tempNorms[1];      normalsArr[normPos++]=tempNorms[2];    }    for (int j=0; j < 9; j++)     verticesArr[vertPos++]=dis.readFloat();    dis.skip(2);  }  mRootObject.setData(verticesArr,normalsArr,null,null,indicesArr,false);}  }
class C{  @CheckForNull public static <T extends Cause>T ghCauseFromRun(Run<?,?> run,Class<T> tClass){  if (run instanceof MatrixRun) {    MatrixBuild parentBuild=((MatrixRun)run).getParentBuild();    if (nonNull(parentBuild)) {      return parentBuild.getCause(tClass);    }  } else {    return run.getCause(tClass);  }  return null;}  }
class C{  @SuppressWarnings("unchecked") public T next(){  if (hasNext() == false) {    throw new NoSuchElementException();  }  return (T)Array.get(array,index++);}  }
class C{  public HttpRoute(HttpHost target){  this(null,target,null,false,TunnelType.PLAIN,LayerType.PLAIN);}  }
class C{  public String toString(){  return "Mercator[" + super.toString();}  }
class C{  public SortedMap<String,SortedMap<MetricName,Metric>> groupedMetrics(){  return groupedMetrics(MetricPredicate.ALL);}  }
class C{  public T caseSaveHistory(SaveHistory object){  return null;}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public static Pair<String,BigDecimal> checkNumericSearch(String filter,char[] binarySortedPrefixes,int precision){  if (filter.length() > 1 && Arrays.binarySearch(binarySortedPrefixes,filter.charAt(0)) >= 0) {    try {      final BigDecimal qty=new BigDecimal(filter.substring(1)).setScale(precision,BigDecimal.ROUND_CEILING);      if (qty.signum() == -1) {        return null;      }      return new Pair<>(filter.substring(0,1),qty);    } catch (    Exception exp) {      return null;    }  }  return null;}  }
class C{  public static void sArraySet(short[] a,int i,short v){  try {    a[i]=v;  } catch (  Throwable t) {    a[DefaultGroovyMethodsSupport.normaliseIndex(i,a.length)]=v;  }}  }
class C{  private static void populateLevels(){  levelList=new LinkedList<>();  levelList.add(Level.SEVERE.toString());  levelList.add(Level.WARNING.toString());  levelList.add(Level.INFO.toString());  levelList.add(Level.CONFIG.toString());  levelList.add(Level.FINE.toString());  levelList.add(Level.FINER.toString());  levelList.add(Level.FINEST.toString());}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DATA_ATTRIBUTES_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectFormatUsages/{businessObjectFormatUsage}/businessObjectFormatFileTypes/{businessObjectFormatFileType}"+ "/businessObjectFormatVersions/{businessObjectFormatVersion}/partitionValues/{partitionValue}/businessObjectDataVersions/{businessObjectDataVersion}"+ "/businessObjectDataAttributeNames/{businessObjectDataAttributeName}",method=RequestMethod.DELETE) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DATA_ATTRIBUTES_DELETE) public BusinessObjectDataAttribute deleteBusinessObjectDataAttribute(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectFormatUsage") String businessObjectFormatUsage,@PathVariable("businessObjectFormatFileType") String businessObjectFormatFileType,@PathVariable("businessObjectFormatVersion") Integer businessObjectFormatVersion,@PathVariable("partitionValue") String partitionValue,@PathVariable("businessObjectDataVersion") Integer businessObjectDataVersion,@PathVariable("businessObjectDataAttributeName") String businessObjectDataAttributeName){  return businessObjectDataAttributeService.deleteBusinessObjectDataAttribute(new BusinessObjectDataAttributeKey(namespace,businessObjectDefinitionName,businessObjectFormatUsage,businessObjectFormatFileType,businessObjectFormatVersion,partitionValue,new ArrayList<String>(),businessObjectDataVersion,businessObjectDataAttributeName));}  }
class C{  public Bundler putStringArrayList(String key,ArrayList<String> value){  bundle.putStringArrayList(key,value);  return this;}  }
class C{  public Boolean isDhcp(){  return dhcp;}  }
class C{  public void quoteChar(int ch){  if (ch >= 0 && ch < ctype.length)   ctype[ch]=CT_QUOTE;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String encodeBody(){  StringBuffer retval=new StringBuffer();  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(LESS_THAN);  }  retval.append(address.encode());  if (address.getAddressType() == AddressImpl.ADDRESS_SPEC) {    retval.append(GREATER_THAN);  }  if (!parameters.isEmpty())   retval.append(SEMICOLON + this.parameters.encode());  return retval.toString();}  }
class C{  public void remove(ComponentName componentName){synchronized (mCache) {    mCache.remove(componentName);  }}  }
class C{  public RoleUnresolvedList(){  super();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double minVal;  double maxVal;  double centreValue;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSizeX=Integer.parseInt(args[2]);  filterSizeY=Integer.parseInt(args[3]);  filterRounded=Boolean.parseBoolean(args[4]);  reflectAtBorders=Boolean.parseBoolean(args[5]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    double largeVal=Double.MAX_VALUE;    double smallVal=Double.MIN_VALUE;    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=inputFile.getValue(row,col);        if (centreValue != noData) {          minVal=largeVal;          maxVal=smallVal;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              if (x != col && y != row) {                if (z < minVal) {                  minVal=z;                }                if (z > maxVal) {                  maxVal=z;                }              }            }          }          if (centreValue > maxVal) {            outputFile.setValue(row,col,maxVal);          } else           if (centreValue < minVal) {            outputFile.setValue(row,col,minVal);          } else {            outputFile.setValue(row,col,centreValue);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void handleException(Exception exception){  if (this.listener == null) {    throw new IllegalStateException(exception);  }  this.listener.exceptionThrown(exception);}  }
class C{  public void configure(){  AcelaTrafficController control=new AcelaTrafficController();  control.connectPort(this);  this.getSystemConnectionMemo().setAcelaTrafficController(control);  this.getSystemConnectionMemo().configureManagers();}  }
class C{  public int lastIndexOfSubSeq(String seq){  return lastIndexOfSubSeq(CharSeq.of(seq));}  }
class C{  public boolean isRoot(){  return isRoot(getVirtualFile());}  }
class C{  @Override public void clearSensitiveData(Key key){  SensitiveData.clear(key);}  }
class C{  public FileProvider(String name,String base){  this(name,base,"open");}  }
class C{  public static <T>void assertCollectionContains(Collection<T> actual,T... expectedElements){  assertEquals(expectedElements.length,actual.size());  Collection<T> actualCopy=new ArrayList<T>(actual);  for (  T expectedElement : expectedElements) {    assertTrue("Collection did not contain: " + expectedElement,actualCopy.remove(expectedElement));  }}  }
class C{  int reduceToUnsignedRange(long value){  if (value == (int)value && canRepresentUnsigned((int)value))   return (int)value;  int range=getRange();  assert (range > 0);  value%=range;  if (value < 0)   value+=range;  assert (canRepresentUnsigned((int)value));  return (int)value;}  }
class C{  private int infixPriority(char opp){switch (opp) {case 'l':case 'b':case 'c':case 'e':case 's':case 'f':case 'h':case 'r':case 't':case 'n':    return 3;case '^':  return 2;case '*':return 2;case '/':return 2;case '+':return 1;case '-':return 1;case '(':return 4;case ')':return 0;default :throw new IllegalArgumentException("Unrecognized operator:" + opp);}}  }
class C{  public void deleteNextChar(ActionEvent e){  JTextComponent c=getTextComponent(e);  boolean beep=true;  if ((c != null) && (c.isEditable())) {    try {      javax.swing.text.Document doc=c.getDocument();      Caret caret=c.getCaret();      int dot=caret.getDot();      int mark=caret.getMark();      if (dot != mark) {        doc.remove(Math.min(dot,mark),Math.abs(dot - mark));        beep=false;      } else       if (dot < doc.getLength()) {        doc.remove(dot,1);        beep=false;      }    } catch (    BadLocationException bl) {    }  }  if (beep) {    Toolkit.getDefaultToolkit().beep();  }}  }
class C{  public static org.oscm.internal.vo.VOCountryVatRate convertToUp(org.oscm.vo.VOCountryVatRate oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOCountryVatRate newVO=new org.oscm.internal.vo.VOCountryVatRate();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setRate(oldVO.getRate());  newVO.setCountry(oldVO.getCountry());  return newVO;}  }
class C{  protected void fireDocumentPartitioningChanged(DocumentPartitioningChangedEvent event){  if (fDocumentPartitioningListeners == null)   return;  Object[] listeners=fDocumentPartitioningListeners.getListeners();  for (int i=0; i < listeners.length; i++) {    DocumentPartitioningListener l=(DocumentPartitioningListener)listeners[i];    try {      l.documentPartitioningChanged(event);    } catch (    Exception ex) {      fail(ex);    }  }}  }
class C{  private void statInit(){  fCash_ID=new VLookup("C_Cash_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,p_TabNo,MColumn.getColumn_ID(MCash.Table_Name,MCash.COLUMNNAME_C_Cash_ID),DisplayType.Search));  lCash_ID.setLabelFor(fCash_ID);  fCash_ID.setBackground(AdempierePLAF.getInfoBackground());  fCash_ID.addActionListener(this);  ;  fCashBook_ID=new VLookup("C_CashBook_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCash.Table_Name,MCash.COLUMNNAME_C_CashBook_ID),DisplayType.TableDir));  lCashBook_ID.setLabelFor(fCashBook_ID);  fCashBook_ID.setBackground(AdempierePLAF.getInfoBackground());  fCashBook_ID.addActionListener(this);  fInvoice_ID=new VLookup("C_Invoice_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Invoice_ID),DisplayType.Search));  lInvoice_ID.setLabelFor(fInvoice_ID);  fInvoice_ID.setBackground(AdempierePLAF.getInfoBackground());  fInvoice_ID.addActionListener(this);  fPayment_ID=new VLookup("C_Payment_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Payment_ID),DisplayType.Search));  lPayment_ID.setLabelFor(fPayment_ID);  fPayment_ID.setBackground(AdempierePLAF.getInfoBackground());  fPayment_ID.addActionListener(this);  fBankAccount_ID=new VLookup("C_BankAccount_ID",false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_BankAccount_ID),DisplayType.TableDir));  lBankAccount_ID.setLabelFor(fBankAccount_ID);  fBankAccount_ID.setBackground(AdempierePLAF.getInfoBackground());  fBankAccount_ID.addActionListener(this);  fCharge_ID=new VLookup(MCashLine.COLUMNNAME_C_Charge_ID,false,false,true,MLookupFactory.get(Env.getCtx(),p_WindowNo,0,MColumn.getColumn_ID(MCashLine.Table_Name,MCashLine.COLUMNNAME_C_Charge_ID),DisplayType.TableDir));  fCharge_ID.setBackground(AdempierePLAF.getInfoBackground());  fCharge_ID.addActionListener(this);  lDateFrom.setLabelFor(fDateFrom);  fDateFrom.setBackground(AdempierePLAF.getInfoBackground());  fDateFrom.setToolTipText(Msg.translate(Env.getCtx(),"DateFrom"));  fDateFrom.addActionListener(this);  lDateTo.setLabelFor(fDateTo);  fDateTo.setBackground(AdempierePLAF.getInfoBackground());  fDateTo.setToolTipText(Msg.translate(Env.getCtx(),"DateTo"));  fDateTo.addActionListener(this);  lAmtFrom.setLabelFor(fAmtFrom);  fAmtFrom.setBackground(AdempierePLAF.getInfoBackground());  fAmtFrom.setToolTipText(Msg.translate(Env.getCtx(),"AmtFrom"));  fAmtFrom.addActionListener(this);  lAmtTo.setLabelFor(fAmtTo);  fAmtTo.setBackground(AdempierePLAF.getInfoBackground());  fAmtTo.setToolTipText(Msg.translate(Env.getCtx(),"AmtTo"));  fAmtTo.addActionListener(this);  cbAbsolute.setText(Msg.translate(Env.getCtx(),"AbsoluteAmt"));  cbAbsolute.setName("AbsoluteAmt");  cbAbsolute.setToolTipText(Msg.getMsg(Env.getCtx(),"AbsoluteAmt"));  cbAbsolute.setSelected(false);  cbAbsolute.addActionListener(this);  CPanel amtPanel=new CPanel();  CPanel datePanel=new CPanel();  amtPanel.setLayout(new ALayout(0,0,true));  amtPanel.add(fAmtFrom,new ALayoutConstraint(0,0));  amtPanel.add(lAmtTo,null);  amtPanel.add(fAmtTo,null);  datePanel.setLayout(new ALayout(0,0,true));  datePanel.add(fDateFrom,new ALayoutConstraint(0,0));  datePanel.add(lDateTo,null);  datePanel.add(fDateTo,null);  p_criteriaGrid.setLayout(new ALayout());  p_criteriaGrid.add(lCashBook_ID,new ALayoutConstraint(0,0));  p_criteriaGrid.add(fCashBook_ID,null);  p_criteriaGrid.add(lCash_ID,null);  p_criteriaGrid.add(fCash_ID,null);  p_criteriaGrid.add(lInvoice_ID,new ALayoutConstraint(1,0));  p_criteriaGrid.add(fInvoice_ID,null);  p_criteriaGrid.add(lPayment_ID,null);  p_criteriaGrid.add(fPayment_ID,null);  p_criteriaGrid.add(lBankAccount_ID,new ALayoutConstraint(2,0));  p_criteriaGrid.add(fBankAccount_ID,null);  p_criteriaGrid.add(lDateFrom,null);  p_criteriaGrid.add(datePanel,null);  p_criteriaGrid.add(lCharge_ID,new ALayoutConstraint(3,0));  p_criteriaGrid.add(fCharge_ID,null);  p_criteriaGrid.add(lAmtFrom,null);  p_criteriaGrid.add(amtPanel,null);  p_criteriaGrid.add(cbAbsolute,new ALayoutConstraint(3,5));}  }
class C{  public static Instruction saveReplaceThreadID(Instruction inst,String pattern,String replacement) throws DMLRuntimeException {  if (inst instanceof MRJobInstruction) {    MRJobInstruction mrinst=(MRJobInstruction)inst;    mrinst.updateInstructionThreadID(pattern,replacement);  } else   if (inst instanceof VariableCPInstruction) {    inst.updateInstructionThreadID(pattern,replacement);  }  return inst;}  }
class C{  public static double cdf(double x,double lambda){  return 1.0 - Math.exp(-lambda * x);}  }
class C{  public DefaultActionGroup(@NotNull AnAction... actions){  this(Arrays.asList(actions));}  }
class C{  public Configuration(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:20.079 -0500",hash_original_method="400BD091D4CACB3FCA76B3A275DD11D5",hash_generated_method="A3F5C278F78163852F760D51592A04F2") public boolean requestNetworkTransitionWakelock(String forWhom){  try {    mService.requestNetworkTransitionWakelock(forWhom);    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodecommentnodename.class,args);}  }
class C{  public static CCScaleTo action(float t,float sx,float sy){  return new CCScaleTo(t,sx,sy);}  }
class C{  @SuppressWarnings("unchecked") public <T extends PO>T firstOnly() throws DBException {  T po=null;  String sql=buildSQL(null,true);  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,trxName);    rs=createResultSet(pstmt);    if (rs.next()) {      po=(T)table.getPO(rs,trxName);    }    if (rs.next()) {      throw new DBException("QueryMoreThanOneRecordsFound");    }  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);    throw new DBException(e,sql);  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  return po;}  }
class C{  public Object createSoftWeakRef(Object o){  return new SoftReference(o);}  }
class C{  protected ChoiceImpl(){  super();}  }
class C{  public boolean isNoCase(){  if (noCase == null) {    return false;  } else {    return noCase;  }}  }
class C{  public ThrottledRunLater(){  this.runnable=null;}  }
class C{  public void releaseDistributed(){  if (this.distLockId != null) {    try {      TXLockService txls=TXLockService.createDTLS();      txls.release(this.distLockId);    } catch (    IllegalStateException ignore) {    }    this.distLockId=null;  }}  }
class C{  public static <E>Set<E> lockedSet(Set<E> s){  return new LockedSet<>(s);}  }
class C{  public static Collection<InterestLevel> all(){  return enums.all();}  }
class C{  public Collection<Host> allHosts(){  return Collections.unmodifiableCollection(manager.allHosts());}  }
class C{  private void startLoadBitmap(Uri uri){  if (uri != null) {    enableSave(false);    final View loading=findViewById(R.id.loading);    loading.setVisibility(View.VISIBLE);    mLoadBitmapTask=new LoadBitmapTask();    mLoadBitmapTask.execute(uri);  } else {    cannotLoadImage();    done();  }}  }
class C{  public FileFormat(String name,String mimeType,Charset charset,Collection<String> fileExtensions){  this(name,Arrays.asList(mimeType),charset,fileExtensions);}  }
class C{  public Archive findStartMatchArchive(String consolFun,long startTime,long resolution) throws IOException {  long arcStep, diff;  int fallBackIndex=0;  int arcIndex=-1;  long minDiff=Long.MAX_VALUE;  long fallBackDiff=Long.MAX_VALUE;  for (int i=0; i < archives.length; i++) {    if (archives[i].getConsolFun().toString().equals(consolFun)) {      arcStep=archives[i].getArcStep();      diff=Math.abs(resolution - arcStep);      if (startTime >= archives[i].getStartTime()) {        if (diff == 0) {          return archives[i];        } else         if (diff < minDiff) {          minDiff=diff;          arcIndex=i;        }      } else       if (diff < fallBackDiff) {        fallBackDiff=diff;        fallBackIndex=i;      }    }  }  return (arcIndex >= 0 ? archives[arcIndex] : archives[fallBackIndex]);}  }
class C{  public ComputeElementRestRep deregister(URI id){  return client.post(ComputeElementRestRep.class,getIdUrl() + "/deregister",id);}  }
class C{  public static String chompLast(String str,String sep){  if (str.length() == 0) {    return str;  }  String sub=str.substring(str.length() - sep.length());  if (sep.equals(sub)) {    return str.substring(0,str.length() - sep.length());  } else {    return str;  }}  }
class C{  private static byte char64(char x){  if ((int)x < 0 || (int)x > index_64.length) {    return -1;  }  return index_64[(int)x];}  }
class C{  public boolean isPrinted(){  Object oo=get_Value(COLUMNNAME_IsPrinted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static OrionWebXml parseOrionXml(InputStream input) throws IOException, JDOMException {  OrionWebXmlIo io=new OrionWebXmlIo();  return (OrionWebXml)io.parseXml(input);}  }
class C{  private File createTreeFile(){  File result=new File(fileNode.getPath()).getParentFile();  if (null == result) {    return new File("");  }  return result;}  }
class C{  @Override public String generateFileName(int logLevel,long timestamp){  SimpleDateFormat sdf=mLocalDateFormat.get();  sdf.setTimeZone(TimeZone.getDefault());  return sdf.format(new Date(timestamp));}  }
class C{  public void run(){  int maxruns=this.maxruns;  int maxsmall=this.maxsmall;  while (maxruns > 0) {    double oldchi=getChiSq();    iterate();    --maxruns;    double newchi=getChiSq();    double deltachi=newchi - oldchi;    if (deltachi < 0 && deltachi > -small) {      --maxsmall;      if (maxsmall < 0) {        break;      }    }  }}  }
class C{  private void testOrientationChange(CourseUnitNavigationActivity activity,int orientation){  Configuration config=activity.getResources().getConfiguration();  assertNotEquals(orientation,config.orientation);  config.orientation=orientation;  activity.onConfigurationChanged(config);  assertOrientationSetup(activity);}  }
class C{  public static int toInt(short[] shorts,int start){  return toInt(shorts[start],shorts[start + 1]);}  }
class C{  public BigDecimal createFactCash(MAcctSchema as,Fact fact,BigDecimal multiplier){  boolean creditMemo=getDocumentType().equals(DOCTYPE_ARCredit) || getDocumentType().equals(DOCTYPE_APCredit);  boolean payables=getDocumentType().equals(DOCTYPE_APInvoice) || getDocumentType().equals(DOCTYPE_APCredit);  BigDecimal acctAmt=Env.ZERO;  FactLine fl=null;  for (int i=0; i < p_lines.length; i++) {    DocLine line=p_lines[i];    boolean landedCost=false;    if (payables)     landedCost=landedCost(as,fact,line,false);    if (landedCost && as.isExplicitCostAdjustment()) {      fact.createLine(line,line.getAccount(ProductCost.ACCTTYPE_P_Expense,as),getC_Currency_ID(),null,line.getAmtSource());      fl=fact.createLine(line,line.getAccount(ProductCost.ACCTTYPE_P_Expense,as),getC_Currency_ID(),line.getAmtSource(),null);      String desc=line.getDescription();      if (desc == null)       desc="100%"; else       desc+=" 100%";      fl.setDescription(desc);    }    if (!landedCost) {      MAccount acct=line.getAccount(payables ? ProductCost.ACCTTYPE_P_Expense : ProductCost.ACCTTYPE_P_Revenue,as);      if (payables) {        if (line.isItem())         acct=line.getAccount(ProductCost.ACCTTYPE_P_InventoryClearing,as);      }      BigDecimal amt=line.getAmtSource().multiply(multiplier);      BigDecimal amt2=null;      if (creditMemo) {        amt2=amt;        amt=null;      }      if (payables)       fl=fact.createLine(line,acct,getC_Currency_ID(),amt,amt2); else       fl=fact.createLine(line,acct,getC_Currency_ID(),amt2,amt);      if (fl != null)       acctAmt=acctAmt.add(fl.getAcctBalance());    }  }  for (int i=0; i < m_taxes.length; i++) {    BigDecimal amt=m_taxes[i].getAmount();    BigDecimal amt2=null;    if (creditMemo) {      amt2=amt;      amt=null;    }    FactLine tl=null;    if (payables)     tl=fact.createLine(null,m_taxes[i].getAccount(m_taxes[i].getAPTaxType(),as),getC_Currency_ID(),amt,amt2); else     tl=fact.createLine(null,m_taxes[i].getAccount(DocTax.ACCTTYPE_TaxDue,as),getC_Currency_ID(),amt2,amt);    if (tl != null)     tl.setC_Tax_ID(m_taxes[i].getC_Tax_ID());  }  FactLine[] fLines=fact.getLines();  for (int i=0; i < fLines.length; i++) {    if (fLines[i] != null) {      if (payables) {        fLines[i].setLocationFromBPartner(getC_BPartner_Location_ID(),true);        fLines[i].setLocationFromOrg(fLines[i].getAD_Org_ID(),false);      } else {        fLines[i].setLocationFromOrg(fLines[i].getAD_Org_ID(),true);        fLines[i].setLocationFromBPartner(getC_BPartner_Location_ID(),false);      }    }  }  return acctAmt;}  }
class C{  public PLInternalCameraListener(PLView view){  super();  mView=view;}  }
class C{  public boolean isDrawValueAboveBarEnabled(){  return mDrawValueAboveBar;}  }
class C{  @Override public Object processRegionValue(Object principal,String regionName,Object key,Object value){  String name=null;  if (principal instanceof Principal) {    name=((Principal)principal).getName();  } else {    name=principal.toString();  }  return name + "/" + regionName+ "/"+ key+ "/"+ value;}  }
class C{  static void printBrief(DexData dexData,boolean justClasses){  ClassRef[] externClassRefs=dexData.getExternalReferences();  printClassRefs(externClassRefs,justClasses);  if (!justClasses) {    printFieldRefs(externClassRefs);    printMethodRefs(externClassRefs);  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 2) {    System.out.println("Usage: java RemoveText filename");    System.exit(1);  }  File file=new File(args[1]);  if (!file.exists()) {    System.out.println("File " + args[1] + " does not exist");    System.exit(2);  }  ArrayList<String> s2=new ArrayList<>();  try (Scanner input=new Scanner(file)){    while (input.hasNext()) {      String s1=input.nextLine();      s2.add(removeString(args[0],s1));    }  }   try (PrintWriter output=new PrintWriter(file)){    for (int i=0; i < s2.size(); i++) {      output.println(s2.get(i));    }  } }  }
class C{  public static String buildAddress(final Address address){  LOGGER.debug("Entered into buildAddress");  if (LOGGER.isInfoEnabled())   LOGGER.info("buildAddress - Address: " + address);  final StringBuffer strAddress=new StringBuffer();  strAddress.append(isNotBlank(address.getLandmark()) ? address.getLandmark() : " ").append("|");  strAddress.append(isNotBlank(address.getHouseNoBldgApt()) ? address.getHouseNoBldgApt() : " ").append("|");  final String tmpPin=address.getPinCode();  strAddress.append(tmpPin != null && !tmpPin.toString().isEmpty() ? tmpPin : " ").append("|");  LOGGER.debug("Exit from buildAddress, Address: " + strAddress.toString());  return strAddress.toString();}  }
class C{  public void flush() throws IOException {  flushBits();  out.flush();}  }
class C{  public LinearScalingModel(){  this(1.0,1);}  }
class C{  public void testConvenienceMethodsWithNulls() throws Exception {  StringWriter sw=new StringWriter();  JsonGenerator gen=new JsonFactory().createJsonGenerator(sw);  gen.writeStartObject();  gen.writeStringField("str",null);  gen.writeNumberField("num",null);  gen.writeObjectField("obj",null);  gen.writeEndObject();  gen.close();  String docStr=sw.toString();  JsonParser jp=createParserUsingReader(docStr);  assertEquals(JsonToken.START_OBJECT,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("str",jp.getCurrentName());  assertEquals(JsonToken.VALUE_NULL,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("num",jp.getCurrentName());  assertEquals(JsonToken.VALUE_NULL,jp.nextToken());  assertEquals(JsonToken.FIELD_NAME,jp.nextToken());  assertEquals("obj",jp.getCurrentName());  assertEquals(JsonToken.VALUE_NULL,jp.nextToken());  assertEquals(JsonToken.END_OBJECT,jp.nextToken());}  }
class C{  int sensorState(){  if (namedSensor != null) {    return getSensor().getKnownState();  } else {    return Sensor.UNKNOWN;  }}  }
class C{  public static double product(DoubleArrayList data){  int size=data.size();  double[] elements=data.elements();  double product=1;  for (int i=size; --i >= 0; )   product*=elements[i];  return product;}  }
class C{  public static ThrowableFormatter createThrowableFormatter(){  return new DefaultThrowableFormatter();}  }
class C{  public static String readFileToString(File file,String encoding) throws IOException {  return readFileToString(file,Charsets.toCharset(encoding));}  }
class C{  public int read(byte[] buf,int off,int len) throws IOException {  if (len == 0)   return 0;  if (in == null)   throw new XZIOException("Stream closed");  if (exception != null)   throw exception;  int size;  try {    size=in.read(buf,off,len);  } catch (  IOException e) {    exception=e;    throw e;  }  if (size == -1)   return -1;  delta.decode(buf,off,size);  return size;}  }
class C{  protected void closeFields() throws SQLException {  wasNullValid=false;  SQLExceptionChainBuilder<SQLException> chain=new SQLExceptionChainBuilder<>();  for (  FBField field : fields) {    try {      field.close();    } catch (    SQLException ex) {      chain.append(ex);    }  }  if (chain.hasException()) {    throw chain.getException();  }}  }
class C{  protected void closeSession(final String message,final Throwable t){  if (t != null) {    LOGGER.error(message,t);    proxyIoSession.setAuthenticationFailed(true);  } else {    LOGGER.error(message);  }  getSession().close(true);}  }
class C{  private Resource findArtifact(ModuleDetails details,ResourcePatternResolver ctx,Map<String,String> data) throws IOException {  if (details.getName().equals("deck")) {    return this.fileManager.createTempFile(details,findDeckMavenArtifact(details,data));  } else {    return this.fileManager.createTempFile(details,findMavenArtifact(details,ctx));  }}  }
class C{  private static void splitMult(double a[],double b[],double ans[]){  ans[0]=a[0] * b[0];  ans[1]=a[0] * b[1] + a[1] * b[0] + a[1] * b[1];  resplit(ans);}  }
class C{  public static void checkArgument(boolean expression,@Nullable String errorMessageTemplate,@Nullable Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  RoomDeptListForm roomDeptListForm=(RoomDeptListForm)form;  sessionContext.checkPermission(Right.RoomDepartments);  buildDeptTable(request,roomDeptListForm);  return mapping.findForward("showRoomDeptList");}  }
class C{  public static boolean isWeakKey(byte[] key,int offset){  return isWeakKey(key,offset,key.length - offset);}  }
class C{  public static final void fillPolygon(GL2 gl,Polygon p){  RenderUtilities.fillPolygon(gl,p.getVertices());}  }
class C{  public FacebookOperationCanceledException(String message){  super(message);}  }
class C{  protected void clearOutEvents(){}  }
class C{  public boolean reActivateIt(){  log.info("reActivateIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REACTIVATE);  if (m_processMsg != null)   return false;  for (  MJournal journal : getJournals(true)) {    if (DOCSTATUS_Completed.equals(journal.getDocStatus())) {      if (journal.processIt(DOCACTION_Re_Activate)) {        journal.saveEx();      } else {        throw new AdempiereException(journal.getProcessMsg());      }    }  }  setProcessed(false);  setDocAction(DOCACTION_Complete);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REACTIVATE);  if (m_processMsg != null)   return false;  return true;}  }
class C{  public boolean isResend(){  return resend;}  }
class C{  private void init(Context context,AttributeSet attrs,RuqusTheme theme){  inflate(context,R.layout.rqv_card2,this);  outlinesView=(LinearLayout)findViewById(R.id.outlines);  outline1TextView=(TextView)findViewById(R.id.outline1_text);  outline2TextView=(TextView)findViewById(R.id.outline2_text);  cardView=(CardView)findViewById(R.id.card);  cardTextView=(TextView)findViewById(R.id.card_text);  setTheme(theme);  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.RQVCard2);  mode=typedArray.getInt(R.styleable.RQVCard2_rqv_card2_mode,0) == 0 ? Mode.OUTLINES : Mode.CARD;  outline1TextView.setText(typedArray.getString(R.styleable.RQVCard2_rqv_outline1_text));  outline2TextView.setText(typedArray.getString(R.styleable.RQVCard2_rqv_outline2_text));  cardTextView.setText(typedArray.getString(R.styleable.RQVCard2_rqv_card2_text));  typedArray.recycle();}  }
class C{  public static AuthToken basic(String username,String password){  return new InternalAuthToken(parameters("scheme","basic","principal",username,"credentials",password).asMap(Values.ofValue()));}  }
class C{  public static String createUrlFromQury(String query) throws MalformedURLException, URISyntaxException {  String str=BASIC_YAHOO_API_URL + "format=json&q=" + query+ "&env="+ YAHOO_DB_URL;  URL url=new URL(str);  URI uri=new URI(url.getProtocol(),url.getUserInfo(),url.getHost(),url.getPort(),url.getPath(),url.getQuery(),url.getRef());  return uri.toASCIIString();}  }
class C{  public void addCategories(Categories categories){  addProperty(categories);}  }
class C{  public T entity(boolean entity){  holder().entity=entity;  return (T)this;}  }
class C{  private void render(ShaderProgram shader,Array<BillboardDecal> decals){  BillboardDecalMaterial lastMaterial=null;  int idx=0;  for (  BillboardDecal decal : decals) {    if (lastMaterial == null || !lastMaterial.equals(decal.getMaterial())) {      if (idx > 0) {        flush(shader,idx);        idx=0;      }      decal.material.set();      lastMaterial=decal.material;    }    decal.update();    System.arraycopy(decal.vertices,0,vertices,idx,decal.vertices.length);    idx+=decal.vertices.length;    if (idx == vertices.length) {      flush(shader,idx);      idx=0;    }  }  if (idx > 0) {    flush(shader,idx);  }}  }
class C{  public static boolean[] toBooleanArray(float[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] > 0;  }  return result;}  }
class C{  public boolean removeNode(ServiceNode node){  try {    return nodes.remove(node);  } catch (  Exception e) {    return false;  }}  }
class C{  protected void updateProblemIndication(){  if (updateProblemIndication) {    BasicDiagnostic diagnostic=new BasicDiagnostic(Diagnostic.OK,"com.github.lbroudoux.dsl.eip.editor",0,null,new Object[]{editingDomain.getResourceSet()});    for (    Diagnostic childDiagnostic : resourceToDiagnosticMap.values()) {      if (childDiagnostic.getSeverity() != Diagnostic.OK) {        diagnostic.add(childDiagnostic);      }    }    int lastEditorPage=getPageCount() - 1;    if (lastEditorPage >= 0 && getEditor(lastEditorPage) instanceof ProblemEditorPart) {      ((ProblemEditorPart)getEditor(lastEditorPage)).setDiagnostic(diagnostic);      if (diagnostic.getSeverity() != Diagnostic.OK) {        setActivePage(lastEditorPage);      }    } else     if (diagnostic.getSeverity() != Diagnostic.OK) {      ProblemEditorPart problemEditorPart=new ProblemEditorPart();      problemEditorPart.setDiagnostic(diagnostic);      problemEditorPart.setMarkerHelper(markerHelper);      try {        addPage(++lastEditorPage,problemEditorPart,getEditorInput());        setPageText(lastEditorPage,problemEditorPart.getPartName());        setActivePage(lastEditorPage);        showTabs();      } catch (      PartInitException exception) {        EipEditorPlugin.INSTANCE.log(exception);      }    }    if (markerHelper.hasMarkers(editingDomain.getResourceSet())) {      markerHelper.deleteMarkers(editingDomain.getResourceSet());      if (diagnostic.getSeverity() != Diagnostic.OK) {        try {          markerHelper.createMarkers(diagnostic);        } catch (        CoreException exception) {          EipEditorPlugin.INSTANCE.log(exception);        }      }    }  }}  }
class C{  public static byte[] decode(char[] in){  return decode(in,0,in.length);}  }
class C{  public void addMetadata(String name,String value){  if ((name != null) && (value != null)) {    Metadata m=new Metadata(name,value);    _metadata.add(m);  }}  }
class C{  @Beta public static String toString(byte x){  return toString(x,10);}  }
class C{  public void extend(final TextField target){  super.extend(target);}  }
class C{  private <A extends Annotation>Expression buildSpecificFieldExpression(final PermissionCondition condition,final Function<Check,Expression> checkFn){  Class<?> resourceClass=condition.getEntityClass();  Class<? extends Annotation> annotationClass=condition.getPermission();  String field=condition.getField().isPresent() ? condition.getField().get() : null;  ParseTree classPermissions=entityDictionary.getPermissionsForClass(resourceClass,annotationClass);  ParseTree fieldPermissions=entityDictionary.getPermissionsForField(resourceClass,field,annotationClass);  return new SpecificFieldExpression(condition,expressionFromParseTree(classPermissions,checkFn),expressionFromParseTree(fieldPermissions,checkFn));}  }
class C{  public int size(){  if (buffer != null)   return buffer.size(); else   return offsets.size();}  }
class C{  public void acquireReadLock(){  if (readWriteLockMissing()) {    return;  }  lockUtil.acquireLock(readWriteLock.readLock());}  }
class C{  public void fetchNull(int tag) throws BerException {  final int backup=next;  try {    if (fetchTag() != tag) {      throw new BerException();    }    final int length=fetchLength();    if (length != 0)     throw new BerException();  } catch (  BerException e) {    next=backup;    throw e;  }}  }
class C{  @SuppressWarnings("unchecked") public static <T extends net.sourceforge.retroweaver.harmony.runtime.java.lang.Comparable<? super T>>void sort(List<T> list){  Object[] array=list.toArray();  Arrays.sort(array);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set((T)array[i++]);  }}  }
class C{  public boolean isNull(){  return false;}  }
class C{  private List<StoragePort> allocatePorts(StoragePortsAllocator allocator,List<StoragePort> candidatePorts,int portsRequested,NetworkLite net,URI varrayURI){  Collections.shuffle(candidatePorts);  if (simulation) {    StoragePortsAllocator.PortAllocationContext context=StoragePortsAllocator.getPortAllocationContext(net,"arrayX",allocator.getContext());    for (    StoragePort port : candidatePorts) {      context.addPort(port,null,null,null,null);    }    List<StoragePort> portsAllocated=allocator.allocatePortsForNetwork(portsRequested,context,false,null,false);    allocator.setContext(context);    return portsAllocated;  } else {    Map<StoragePort,Long> sportMap=_blockScheduler.computeStoragePortUsage(candidatePorts);    List<StoragePort> portsAllocated=allocator.selectStoragePorts(_dbClient,sportMap,net,varrayURI,portsRequested,null,false);    return portsAllocated;  }}  }
class C{  @GET @Path("authenticate") public Response authenticate(@Required @QueryParam("oauth_provider") String oauthProvider,@QueryParam("userId") String userId,@QueryParam("scope") List<String> scopes) throws ForbiddenException, BadRequestException, OAuthAuthenticationException {  OAuthAuthenticator oauth=getAuthenticator(oauthProvider);  if (!isNullOrEmpty(userId) && !userId.equals(EnvironmentContext.getCurrent().getUser().getId())) {    throw new ForbiddenException("Provided userId " + userId + " is not related to current user "+ EnvironmentContext.getCurrent().getUser().getId());  }  final String authUrl=oauth.getAuthenticateUrl(getRequestUrl(uriInfo),userId,scopes == null ? Collections.<String>emptyList() : scopes);  return Response.temporaryRedirect(URI.create(authUrl)).build();}  }
class C{  public void simpleDwellTimeAdjustment(){  CepasTransaction lastAlighting=null;  CepasTransaction firstBoarding=null;  for (  CepasTransaction transaction : cepasTransactions) {    if (transaction.type.equals(CepasTransactionType.alighting))     lastAlighting=transaction; else {      if (firstBoarding == null)       firstBoarding=transaction;    }  }  if (firstBoarding != null) {    this.arrivalTime=(int)firstBoarding.time;  }  if (lastAlighting != null) {    this.departureTime=(int)lastAlighting.time;  }  if (departureTime <= arrivalTime) {    departureTime=(departureTime + arrivalTime) / 2;    arrivalTime=departureTime;    arrivalTime-=minDwellTime / 2;    departureTime+=minDwellTime / 2;    return;  }  if (getDwellTime() < minDwellTime) {    double avgtime=(arrivalTime + departureTime) / 2;    arrivalTime=(int)(avgtime - minDwellTime / 2);    departureTime=(int)(avgtime + minDwellTime / 2);  }}  }
class C{  public static final void addMenuItem(String s,ActionListener l,JMenu m,boolean enable){  addMenuItem(s,l,m,enable,-1);}  }
class C{  public NCExplosion restrictExplosionBy(float factor){  restrictExplosion=factor;  return this;}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  public static void updateTrack(MyTracksProviderUtils myTracksProviderUtils,Track track,File driveFile){  track.setDriveId(driveFile != null ? driveFile.getId() : "");  track.setModifiedTime(driveFile != null ? driveFile.getModifiedDate().getValue() : -1L);  track.setSharedWithMe(driveFile != null ? driveFile.getSharedWithMeDate() != null : false);  track.setSharedOwner(driveFile != null && driveFile.getSharedWithMeDate() != null && driveFile.getOwnerNames().size() > 0 ? driveFile.getOwnerNames().get(0) : "");  myTracksProviderUtils.updateTrack(track);}  }
class C{  public static byte[] decode(byte[] source) throws java.io.IOException {  byte[] decoded=null;  decoded=decode(source,0,source.length,Base64.NO_OPTIONS);  return decoded;}  }
class C{  public StreamingPubsubIOWrite(DataflowRunner runner,PubsubUnboundedSink<T> transform){  this.transform=transform;}  }
class C{  public boolean contains(Object key){  if (key == null) {    String msg=Logging.getMessage("nullValue.KeyIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return this.entryMap.containsKey(key);}  }
class C{  public DeterministicKey(ImmutableList<ChildNumber> childNumberPath,byte[] chainCode,LazyECPoint publicAsPoint,@Nullable BigInteger priv,@Nullable DeterministicKey parent){  super(priv,compressPoint(checkNotNull(publicAsPoint)));  checkArgument(chainCode.length == 32);  this.parent=parent;  this.childNumberPath=checkNotNull(childNumberPath);  this.chainCode=Arrays.copyOf(chainCode,chainCode.length);  this.depth=parent == null ? 0 : parent.depth + 1;  this.parentFingerprint=(parent != null) ? parent.getFingerprint() : 0;}  }
class C{  public void treeCollapsed(TreeExpansionEvent event){  getHandler().treeCollapsed(event);}  }
class C{  public boolean isSymbol(){  return meta.getType() == MetaCharacter.SYMBOL;}  }
class C{  protected void resetAttribute(SVGItem item){}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void test_indexNotVisibleUnlessCommitted(){  final Journal journal=getStore();  try {    final String name="abc";{      IndexMetadata md=new IndexMetadata(name,UUID.randomUUID());      md.setIsolatable(true);      journal.registerIndex(md);    }    final long tx1=journal.newTx(ITx.UNISOLATED);    assertNull(journal.getIndex(name,tx1));    assertNotSame(0L,journal.commit());    final long tx2=journal.newTx(ITx.UNISOLATED);    assertNull(journal.getIndex(name,tx1));    assertNotNull(journal.getIndex(name,tx2));    journal.abort(tx1);    journal.abort(tx2);  }  finally {    journal.destroy();  }}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  env.error(where,"invalid.decl");  return checkBlockStatement(env,ctx,vset,exp);}  }
class C{  public void lowerCaseMode(boolean fl){  forceLower=fl;}  }
class C{  public float floatValue(){  Object obj=getValue();  if (obj instanceof Number) {    return ((Number)obj).floatValue();  }  return 0f;}  }
class C{  public String format(String zkUrl){  List<ZKAddress> addressList=parser.validateZkUrl(zkUrl);  StringBuilder builder=new StringBuilder();  addressList.forEach(null);  builder.deleteCharAt(0);  return builder.toString();}  }
class C{  public static void selectSubtreeNodes(final ZyGraph graph,final ITreeNode<CTag> tag){  selectNodes(graph,getSubtreeTags(tag),false);}  }
class C{  public void parseStyleDeclaration(String source) throws CSSException, IOException {  parser.parseStyleDeclaration(new InputSource(new StringReader(source)));}  }
class C{  public boolean isOverwriteBPartner(){  Object oo=get_Value(COLUMNNAME_OverwriteBPartner);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void useNew(){  state=State.USE_NEW;  ttl=newEntry.ttl();}  }
class C{  public boolean equals(XObject obj2){  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.equals(this);  if (null != m_obj) {    return m_obj.equals(obj2.m_obj);  } else {    return obj2.m_obj == null;  }}  }
class C{  TestEnvironment(SystemTestEnvironment systemTestEnvironment,Path workingDir,Path sourceDir,Path classDir,Path jacocoDir){  this.systemTestEnvironment=systemTestEnvironment;  this.workingDir=workingDir;  this.sourceDir=sourceDir;  this.classDir=classDir;  this.jacocoDir=jacocoDir;  this.testClassPath=systemTestEnvironment.classpath + ":" + classDir.toString();}  }
class C{  public static Response.Builder readSpdy3HeadersList(List<Header> headerBlock) throws IOException {  String status=null;  String version="HTTP/1.1";  Headers.Builder headersBuilder=new Headers.Builder();  for (int i=0, size=headerBlock.size(); i < size; i++) {    ByteString name=headerBlock.get(i).name;    String values=headerBlock.get(i).value.utf8();    for (int start=0; start < values.length(); ) {      int end=values.indexOf('\0',start);      if (end == -1) {        end=values.length();      }      String value=values.substring(start,end);      if (name.equals(RESPONSE_STATUS)) {        status=value;      } else       if (name.equals(VERSION)) {        version=value;      } else       if (!SPDY_3_SKIPPED_RESPONSE_HEADERS.contains(name)) {        headersBuilder.add(name.utf8(),value);      }      start=end + 1;    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  StatusLine statusLine=StatusLine.parse(version + " " + status);  return new Response.Builder().protocol(Protocol.SPDY_3).code(statusLine.code).message(statusLine.message).headers(headersBuilder.build());}  }
class C{  public MouseTraps(long seed){  this(seed,0.7,100,100,true);}  }
