class C{  public void end_notify_observers(){  observers.deactivate();}  }
class C{  private UnboundedToken newValueToken(String value) throws Exception {  if (value == null) {    value="";  }  UnboundedToken valueToken=new UnboundedToken(value);  valueToken.setTokenIndex(getParser().getNextTokenIndex());  return valueToken;}  }
class C{  public char last(){  if (chars.length > 0) {    pos=chars.length - 1;  } else {    pos=0;  }  return current();}  }
class C{  public String toXMLString() throws FSMsgException {  return toXMLString(true,true);}  }
class C{  public Door(final Material type,BlockFace face){  this(type,face,false);}  }
class C{  public JTabbedPane(){  this(TOP,WRAP_TAB_LAYOUT);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testEmployee;  String employeeNamespace;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("employee");  testEmployee=elementList.item(0);  assertNotNull("employeeNotNull",testEmployee);  employeeNamespace=testEmployee.getNamespaceURI();  assertEquals("namespaceURI","http://www.nist.gov",employeeNamespace);}  }
class C{  public static boolean requiresUnsynchronization(byte[] abySource){  for (int i=0; i < abySource.length - 1; i++) {    if (((abySource[i] & MPEGFrameHeader.SYNC_BYTE1) == MPEGFrameHeader.SYNC_BYTE1) && ((abySource[i + 1] & MPEGFrameHeader.SYNC_BYTE2) == MPEGFrameHeader.SYNC_BYTE2)) {      if (logger.isLoggable(Level.FINEST)) {        logger.finest("Unsynchronisation required found bit at:" + i);      }      return true;    }  }  return false;}  }
class C{  protected boolean isSharedAgent(SSOToken token,String userName,String userDNUnivId,String rlmName){  boolean isSharedAgent=false;  try {    if (debug.messageEnabled()) {      debug.message("AuthenticatedSharedAgents:isSharedAgent:" + "userName = " + userName + " Realm Name = "+ rlmName);    }    if (userName != null) {      String agentName=userName;      if (LDAPUtils.isDN(userName)) {        agentName=LDAPUtils.rdnValueFromDn(userName);      }      if (debug.messageEnabled()) {        debug.message("AuthenticatedSharedAgents:isSharedAgent:" + "agentName = " + agentName);      }      if ((sharedAgentsCache != null) && (!sharedAgentsCache.isEmpty()) && (sharedAgentsCache.contains(userDNUnivId))) {        return (true);      }      SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());      ServiceConfig oc=getOrgConfig(adminToken,rlmName);      ServiceConfig aCfg=oc.getSubConfig(agentName);      if (aCfg != null) {        String agentType=aCfg.getSchemaID();        if ((oc.getSubConfigNames().contains(agentName)) && (agentType.equalsIgnoreCase("SharedAgent"))) {          isSharedAgent=true;          updateCache(userDNUnivId);        }      }    }  } catch (  SSOException ssoe) {    if (debug.warningEnabled()) {      debug.warning("AuthenticatedSharedAgents.isSharedAgent(): " + "SSOException: " + ssoe);    }  }catch (  SMSException smse) {    if (debug.warningEnabled()) {      debug.warning("AuthenticatedSharedAgents.isSharedAgent(): " + "SMSException: " + smse);    }  }  return isSharedAgent;}  }
class C{  @Override public Foo fetchByUuid_Last(String uuid,OrderByComparator<Foo> orderByComparator){  int count=countByUuid(uuid);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid(uuid,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  private void initParticleMotion(){  mParticleMotionControllers=new ArrayList<>();  mDisappearParticleMotionControllers=new ArrayList<>();  int littleOffset=10;  int offsetOne=0;  int smallStarOffsetToCenter=offsetOne + 5;  ParticleMotionController disappear1=new ParticleMotionController();  disappear1.setNumber(0);  disappear1.addModifier(new TranslateModifier(centerX - smallStarOffsetToCenter - bitmapDisappearDustHalfWidth,centerY - bitmapDisappearDustHalfHeight,centerX - smallStarOffsetToCenter - smallStarTranslateDistance- bitmapDisappearDustHalfWidth,centerY - bitmapDisappearDustHalfHeight));  mDisappearParticleMotionControllers.add(disappear1);  ParticleMotionController disappear2=new ParticleMotionController();  disappear2.setNumber(1);  disappear2.addModifier(new TranslateModifier(centerX - bitmapDisappearDustHalfWidth,centerY - smallStarOffsetToCenter - bitmapDisappearDustHalfHeight,centerX - bitmapDisappearDustHalfWidth,centerY - smallStarOffsetToCenter - smallStarTranslateDistance- bitmapDisappearDustHalfHeight));  mDisappearParticleMotionControllers.add(disappear2);  ParticleMotionController disappear3=new ParticleMotionController();  disappear3.setNumber(2);  disappear3.addModifier(new TranslateModifier(centerX + smallStarOffsetToCenter - bitmapDisappearDustHalfWidth,centerY - bitmapDisappearDustHalfHeight,centerX + smallStarOffsetToCenter + smallStarTranslateDistance - bitmapDisappearDustHalfWidth,centerY - bitmapDisappearDustHalfHeight));  mDisappearParticleMotionControllers.add(disappear3);  ParticleMotionController disappear4=new ParticleMotionController();  disappear4.setNumber(3);  disappear4.addModifier(new TranslateModifier(centerX - bitmapDisappearDustHalfWidth,centerY + smallStarOffsetToCenter - bitmapDisappearDustHalfHeight,centerX - bitmapDisappearDustHalfWidth,centerY + smallStarOffsetToCenter + smallStarTranslateDistance - bitmapDisappearDustHalfHeight));  mDisappearParticleMotionControllers.add(disappear4);  ParticleMotionController info1=new ParticleMotionController();  info1.setNumber(0);  info1.addModifier(new TranslateModifier(centerX - littleOffset,centerY,centerX - smallStarTranslateDistance - littleOffset,centerY));  mParticleMotionControllers.add(info1);  ParticleMotionController info2=new ParticleMotionController();  info2.setNumber(1);  info2.addModifier(new TranslateModifier(centerX,centerY - littleOffset,centerX,centerY - smallStarTranslateDistance - littleOffset));  mParticleMotionControllers.add(info2);  ParticleMotionController info3=new ParticleMotionController();  info3.setNumber(2);  mParticleMotionControllers.add(info3);  info3.addModifier(new TranslateModifier(centerX + littleOffset,centerY,centerX + smallStarTranslateDistance + littleOffset,centerY));  ParticleMotionController info4=new ParticleMotionController();  info4.setNumber(3);  info4.addModifier(new TranslateModifier(centerX,centerY + littleOffset,centerX,centerY + smallStarTranslateDistance + littleOffset));  mParticleMotionControllers.add(info4);  for (int i=0; i < 4; i++) {    mParticleMotionControllers.get(i).addModifier(new ScaleModifier(0.8f,0.8f + 0.2f * random.nextFloat()));    mParticleMotionControllers.get(i).addModifier(new AlphaModifier(255,100));    random.setSeed(System.currentTimeMillis() + i * 100);    mParticleMotionControllers.get(i).addModifier(getRandomArgbModifier());  }  for (int i=0; i < 4; i++) {    mDisappearParticleMotionControllers.get(i).addModifier(new ScaleModifier(0.2f,0.2f + 0.1f * random.nextFloat()));    mDisappearParticleMotionControllers.get(i).addModifier(new AlphaModifier(255,100));  }  ParticleMotionController disappear5=new ParticleMotionController();  disappear5.setNumber(4);  disappear5.addModifier(new TranslateModifier(centerX - offsetOne - bitmapDisappearDustHalfWidth,centerY - offsetOne - bitmapDisappearDustHalfHeight- offsetForHeartCenter,centerX - offsetOne - bigStarTranslateDistance- bitmapDisappearDustHalfWidth,centerY - offsetOne - bigStarTranslateDistance- bitmapDisappearDustHalfHeight- offsetForHeartCenter));  mDisappearParticleMotionControllers.add(disappear5);  ParticleMotionController disappear6=new ParticleMotionController();  disappear6.setNumber(5);  disappear6.addModifier(new TranslateModifier(centerX + offsetOne - bitmapDisappearDustHalfWidth,centerY - offsetOne - bitmapDisappearDustHalfHeight- offsetForHeartCenter,centerX + offsetOne + bigStarTranslateDistance - bitmapDisappearDustHalfWidth,centerY - offsetOne - bigStarTranslateDistance- bitmapDisappearDustHalfHeight- offsetForHeartCenter));  mDisappearParticleMotionControllers.add(disappear6);  ParticleMotionController disappear7=new ParticleMotionController();  disappear7.setNumber(6);  disappear7.addModifier(new TranslateModifier(centerX + offsetOne - bitmapDisappearDustHalfWidth,centerY + offsetOne - bitmapDisappearDustHalfHeight - offsetForHeartCenter,centerX + offsetOne + bigStarTranslateDistance - bitmapDisappearDustHalfWidth,centerY + offsetOne + bigStarTranslateDistance - bitmapDisappearDustHalfHeight - offsetForHeartCenter));  mDisappearParticleMotionControllers.add(disappear7);  ParticleMotionController disappear8=new ParticleMotionController();  disappear8.setNumber(7);  disappear8.addModifier(new TranslateModifier(centerX - offsetOne - bitmapDisappearDustHalfWidth,centerY + offsetOne - bitmapDisappearDustHalfHeight - offsetForHeartCenter,centerX - offsetOne - bigStarTranslateDistance- bitmapDisappearDustHalfWidth,centerY + offsetOne + bigStarTranslateDistance - bitmapDisappearDustHalfHeight - offsetForHeartCenter));  mDisappearParticleMotionControllers.add(disappear8);  ParticleMotionController info5=new ParticleMotionController();  info5.setNumber(4);  info5.addModifier(new TranslateModifier(centerX - littleOffset,centerY - littleOffset,(float)(centerX - bigStarTranslateDistance * Math.sin(Math.PI / 4) - littleOffset),(float)(centerY - bigStarTranslateDistance * Math.sin(Math.PI / 4)) - littleOffset));  mParticleMotionControllers.add(info5);  ParticleMotionController info6=new ParticleMotionController();  info6.setNumber(5);  info6.addModifier(new TranslateModifier(centerX + littleOffset,centerY - littleOffset,(float)(centerX + bigStarTranslateDistance * Math.sin(Math.PI / 4) + littleOffset),(float)(centerY - bigStarTranslateDistance * Math.sin(Math.PI / 4)) - littleOffset));  mParticleMotionControllers.add(info6);  ParticleMotionController info7=new ParticleMotionController();  info7.setNumber(6);  info7.addModifier(new TranslateModifier(centerX + littleOffset,centerY + littleOffset,(float)(centerX + bigStarTranslateDistance * Math.sin(Math.PI / 4) + littleOffset),(float)(centerY + bigStarTranslateDistance * Math.sin(Math.PI / 4)) + littleOffset));  mParticleMotionControllers.add(info7);  ParticleMotionController info8=new ParticleMotionController();  info8.setNumber(7);  info8.addModifier(new TranslateModifier(centerX - littleOffset,centerY + littleOffset,(float)(centerX - bigStarTranslateDistance * Math.sin(Math.PI / 4) - littleOffset),(float)(centerY + bigStarTranslateDistance * Math.sin(Math.PI / 4)) + littleOffset));  mParticleMotionControllers.add(info8);  for (int i=4; i < mParticleMotionControllers.size(); i++) {    if (i < 8) {      mParticleMotionControllers.get(i).addModifier(new ScaleModifier(0.9f,0.9f + 0.3f * random.nextFloat()));      mParticleMotionControllers.get(i).addModifier(new AlphaModifier(240,200));      random.setSeed(System.currentTimeMillis() + i * 100);      mParticleMotionControllers.get(i).addModifier(getRandomArgbModifier());    }  }  for (int i=4; i < mDisappearParticleMotionControllers.size(); i++) {    if (i < 8) {      mDisappearParticleMotionControllers.get(i).addModifier(new ScaleModifier(0.3f,0.3f + 0.1f * random.nextFloat()));      mDisappearParticleMotionControllers.get(i).addModifier(new AlphaModifier(240,200));    }  }  if (mParticleMotionControllers.size() != mParticleField.getmParticles().size()) {    return;  }  for (int i=0; i < mParticleField.getmParticles().size(); i++) {    mParticleField.getmParticles().get(i).setModifiers(mParticleMotionControllers.get(i).getModifierList());  }  if (mDisappearParticleMotionControllers.size() != mDisappearField.getmParticles().size()) {    return;  }  for (int i=0; i < mDisappearField.getmParticles().size(); i++) {    mDisappearField.getmParticles().get(i).setModifiers(mDisappearParticleMotionControllers.get(i).getModifierList());  }}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  submitCycle=true;  AMPropertySheet ps=(AMPropertySheet)getChild(PROPERTY_ATTRIBUTE);  MAPDeviceProfileModel model=(MAPDeviceProfileModel)getModel();  deviceName=(String)getDisplayFieldValue(TF_DEVICE_NAME);  Map orig=model.getAttributeValues(deviceName,(String)getDisplayFieldValue(TF_CLASSIFICATION));  try {    Map values=ps.getAttributeValues(orig,true,model);    model.modifyProfile(deviceName,values);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }  forwardTo();}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSAssertionConsumerService.doPost : called");  Document doc=null;  if ((request == null) || (response == null)) {    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullInputParameter"));    return;  }  String metaAlias=FSServiceUtils.getMetaAlias(request);  String realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);  String baseURL=FSServiceUtils.getBaseURL(request);  String framedPageURL=FSServiceUtils.getCommonLoginPageURL(metaAlias,null,null,request,baseURL);  String hostEntityId=null;  SPDescriptorType hostDesc=null;  BaseConfigType hostConfig=null;  try {    hostEntityId=metaManager.getEntityIDByMetaAlias(metaAlias);    hostDesc=metaManager.getSPDescriptor(realm,hostEntityId);    hostConfig=metaManager.getSPDescriptorConfig(realm,hostEntityId);  } catch (  Exception e) {    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Exception when obtain host meta data:",e);    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }  String encodedAuthnResponse=request.getParameter(IFSConstants.POST_AUTHN_RESPONSE_PARAM);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionConsumerService.doPost: " + "Base64 encoded AuthnResponse: " + encodedAuthnResponse);  }  if (encodedAuthnResponse == null) {    String[] data={FSUtils.bundle.getString("missingAuthnResponse")};    LogUtil.error(Level.INFO,LogUtil.MISSING_AUTHN_RESPONSE,data);    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("missingAuthnResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }  encodedAuthnResponse=encodedAuthnResponse.replace(' ','\n');  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionConsumerService.doPost: " + "Base64 encoded AuthnResponse2: " + encodedAuthnResponse);  }  FSAuthnResponse authnResponse=null;  try {    String decodedAuthnResponse=new String(Base64.decode(encodedAuthnResponse));    FSUtils.debug.message("Decoded authnResponse" + decodedAuthnResponse);    doc=XMLUtils.toDOMDocument(decodedAuthnResponse,FSUtils.debug);    if (doc == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAssertionConsumerService.doPost:Error " + "while parsing input xml string");      }      throw new FSMsgException("parseError",null);    }    authnResponse=new FSAuthnResponse(doc.getDocumentElement());    if (authnResponse == null) {      FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Invalid AuthnResponse. " + "Can't parse Base64 encoded AuthnResponse");      String[] data={FSUtils.bundle.getString("invalidAuthnResponse")};      LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data);      FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("invalidAuthnResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");      FSUtils.forwardRequest(request,response,framedPageURL);      return;    }  } catch (  FSException e) {    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Invalid AuthnResponse. FSException" + " occured while parsing Base64 encoded AuthnResponse: ",e);    String[] data={FSUtils.bundle.getString("invalidAuthnResponse")};    LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data);    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("invalidAuthnResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }catch (  SAMLException e) {    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Invalid AuthnResponse. SAMLException" + " occurred while parsing Base64 encoded AuthnResponse: ",e);    String[] data={FSUtils.bundle.getString("invalidAuthnResponse")};    LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data);    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("invalidAuthnResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }  try {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSAssertionConsumerService.doPost: " + "AuthnResponse received is valid: " + authnResponse.toXMLString());    }  } catch (  FSException e) {    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Invalid AuthnResponse. FSException" + " occurred while calling AuthnResponse.toXMLString(): ",e);    String[] data={FSUtils.bundle.getString("invalidAuthnResponse")};    LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data);    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("invalidAuthnResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }  FSAuthnRequest authnRequest=null;  String requestID=authnResponse.getInResponseTo();  if (requestID == null) {    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Invalid AuthnResponse. AuthnResponse " + "received does not have inResponseTo attribute");    String[] data={FSUtils.bundle.getString("invalidAuthnResponse")};    LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data);    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("invalidAuthnResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionConsumerService.doPost: " + "AuthnResponse received is against requestID: " + requestID);  }  authnRequest=getInResponseToRequest(requestID,metaAlias);  if (authnRequest == null) {    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Invalid AuthnResponse. AuthnResponse" + " received does not have an associated AuthnRequest");    String[] data={FSUtils.bundle.getString("invalidAuthnResponse")};    LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data);    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("invalidAuthnResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");    FSUtils.forwardRequest(request,response,framedPageURL);    return;  }  String framedLoginPageURL=FSServiceUtils.getCommonLoginPageURL(metaAlias,authnRequest.getRelayState(),null,request,baseURL);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAssertionConsumerService.doPost: " + "inResponseTo validation is successful");  }  try {    String idpEntityId=null;    IDPDescriptorType idpDescriptor=null;    if (!authnRequest.getProtocolProfile().equals(IFSConstants.SSO_PROF_LECP)) {      idpEntityId=getProvider(authnResponse.getInResponseTo(),metaAlias);      idpDescriptor=metaManager.getIDPDescriptor(realm,idpEntityId);      if (idpEntityId == null || idpDescriptor == null) {        FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Invalid AuthnResponse. Sender information " + "not found for the received AuthnResponse");        String[] data={FSUtils.bundle.getString("invalidAuthnResponse")};        LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_RESPONSE,data);        FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("invalidAuthnResponse") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");        FSUtils.forwardRequest(request,response,framedLoginPageURL);        return;      }      if ((FSServiceUtils.isSigningOn() || (FSServiceUtils.isSigningOptional() && authnRequest.getProtocolProfile().equals(IFSConstants.SSO_PROF_BROWSER_POST))) && !verifyAuthnResponseSignature(doc,idpDescriptor,idpEntityId)) {        FSUtils.debug.error("FSAssertionConsumerService.doPost: Signature " + "verification failed");        FSUtils.forwardRequest(request,response,framedLoginPageURL);        return;      }    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSAssertionConsumerService.doPost: " + "LECP Profile identified. IDP info is unknown so far" + "Get providerId from the response");      }      idpEntityId=authnResponse.getProviderId();      idpDescriptor=metaManager.getIDPDescriptor(realm,idpEntityId);    }    FSServiceManager sm=FSServiceManager.getInstance();    FSAssertionArtifactHandler handler=sm.getAssertionArtifactHandler(request,response,authnRequest,authnResponse,idpDescriptor,idpEntityId);    if (handler == null) {      FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "could not create AssertionArtifactHandler");      String[] data={FSUtils.bundle.getString("requestProcessingFailed")};      LogUtil.error(Level.INFO,LogUtil.AUTHN_REQUEST_PROCESSING_FAILED,data);      FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("requestProcessingFailed") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");      FSUtils.forwardRequest(request,response,framedLoginPageURL);      return;    }    handler.setHostEntityId(hostEntityId);    handler.setHostDescriptor(hostDesc);    handler.setHostDescriptorConfig(hostConfig);    handler.setMetaAlias(metaAlias);    handler.setRealm(realm);    handler.processAuthnResponse(authnResponse);    return;  } catch (  Exception se) {    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + "Exception: ",se);    FSUtils.debug.error("FSAssertionConsumerService.doPost: " + FSUtils.bundle.getString("requestProcessingFailed") + " AuthnRequest Processing Failed at the IDP"+ " Redirecting to the Framed Login Page");    FSUtils.forwardRequest(request,response,framedLoginPageURL);    return;  }}  }
class C{  private String initClassPath(){  StringBuilder cpath=new StringBuilder();  if (parentClassLoader instanceof URLClassLoader) {    URL[] urls=((URLClassLoader)parentClassLoader).getURLs();    for (int i=0; i < urls.length; i++) {      if (urls[i].getProtocol().equals("file")) {        try {          String decoded=URLDecoder.decode(urls[i].getPath(),"UTF-8");          cpath.append(decoded + File.pathSeparator);        } catch (        UnsupportedEncodingException e) {        }      }    }  }  cpath.append(options.getScratchDir() + File.pathSeparator);  String cp=(String)context.getAttribute(Constants.SERVLET_CLASSPATH);  if (cp == null || cp.equals("")) {    cp=options.getClassPath();  }  String path=cpath.toString() + cp;  if (log.isDebugEnabled()) {    log.debug("Compilation classpath initialized: " + path);  }  return path;}  }
class C{  private final int _shortUTF8Encode2(char[] str,int i,int end,int outputPtr,int outputStart){  final byte[] outBuf=_outputBuffer;  while (i < end) {    int c=str[i++];    if (c <= 0x7F) {      outBuf[outputPtr++]=(byte)c;      continue;    }    if (c < 0x800) {      outBuf[outputPtr++]=(byte)(0xc0 | (c >> 6));      outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));      continue;    }    if (c < SURR1_FIRST || c > SURR2_LAST) {      outBuf[outputPtr++]=(byte)(0xe0 | (c >> 12));      outBuf[outputPtr++]=(byte)(0x80 | ((c >> 6) & 0x3f));      outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));      continue;    }    if (c > SURR1_LAST) {      _throwIllegalSurrogate(c);    }    if (i >= end) {      _throwIllegalSurrogate(c);    }    c=_convertSurrogate(c,str[i++]);    if (c > 0x10FFFF) {      _throwIllegalSurrogate(c);    }    outBuf[outputPtr++]=(byte)(0xf0 | (c >> 18));    outBuf[outputPtr++]=(byte)(0x80 | ((c >> 12) & 0x3f));    outBuf[outputPtr++]=(byte)(0x80 | ((c >> 6) & 0x3f));    outBuf[outputPtr++]=(byte)(0x80 | (c & 0x3f));  }  return (outputPtr - outputStart);}  }
class C{  private boolean doAcquireNanos(long arg,long nanosTimeout) throws InterruptedException {  if (nanosTimeout <= 0L)   return false;  final long deadline=System.nanoTime() + nanosTimeout;  final Node node=addWaiter(Node.EXCLUSIVE);  boolean failed=true;  try {    for (; ; ) {      final Node p=node.predecessor();      if (p == head && tryAcquire(arg)) {        setHead(node);        p.next=null;        failed=false;        return true;      }      nanosTimeout=deadline - System.nanoTime();      if (nanosTimeout <= 0L)       return false;      if (shouldParkAfterFailedAcquire(p,node) && nanosTimeout > spinForTimeoutThreshold)       LockSupport.parkNanos(this,nanosTimeout);      if (Thread.interrupted())       throw new InterruptedException();    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public HashAttributeSet(Attribute[] attributes){  this(attributes,Attribute.class);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node oldChild;  NodeList elementList;  Node elementNode;  Node removedChild;  doc=(Document)load("staff",true);  oldChild=doc.createElement("oldChild");  elementList=doc.getElementsByTagName("employee");  elementNode=elementList.item(1);{    boolean success=false;    try {      removedChild=elementNode.removeChild(oldChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_FOUND_ERR);    }    assertTrue("throw_NOT_FOUND_ERR",success);  }}  }
class C{  void checkMultiColumnCell(int axis,int col,int ncols,View v){  long min=0;  long pref=0;  long max=0;  for (int i=0; i < ncols; i++) {    SizeRequirements req=columnRequirements[col + i];    min+=req.minimum;    pref+=req.preferred;    max+=req.maximum;  }  int cmin=(int)v.getMinimumSpan(axis);  if (cmin > min) {    SizeRequirements[] reqs=new SizeRequirements[ncols];    for (int i=0; i < ncols; i++) {      reqs[i]=columnRequirements[col + i];    }    int[] spans=new int[ncols];    int[] offsets=new int[ncols];    SizeRequirements.calculateTiledPositions(cmin,null,reqs,offsets,spans);    for (int i=0; i < ncols; i++) {      SizeRequirements req=reqs[i];      req.minimum=Math.max(spans[i],req.minimum);      req.preferred=Math.max(req.minimum,req.preferred);      req.maximum=Math.max(req.preferred,req.maximum);    }  }  int cpref=(int)v.getPreferredSpan(axis);  if (cpref > pref) {    SizeRequirements[] reqs=new SizeRequirements[ncols];    for (int i=0; i < ncols; i++) {      reqs[i]=columnRequirements[col + i];    }    int[] spans=new int[ncols];    int[] offsets=new int[ncols];    SizeRequirements.calculateTiledPositions(cpref,null,reqs,offsets,spans);    for (int i=0; i < ncols; i++) {      SizeRequirements req=reqs[i];      req.preferred=Math.max(spans[i],req.preferred);      req.maximum=Math.max(req.preferred,req.maximum);    }  }}  }
class C{  public static User createEntity(EntityManager em){  User user=new User();  user.setLogin("test");  user.setPassword(RandomStringUtils.random(60));  user.setActivated(true);  user.setEmail("test@test.com");  user.setFirstName("test");  user.setLastName("test");  user.setLangKey("en");  em.persist(user);  em.flush();  return user;}  }
class C{  public AnnotationFormatError(String message,Throwable cause){  super(message,cause);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.CommonNameElement createCommonNameElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.CommonNameElementImpl();}  }
class C{  @Override public void clear(){  removeAllElements();}  }
class C{  protected SubjectTypeManager(PolicyManager pm){  this.pm=pm;  pmRealmName=LDAPUtils.formatToRFC(pm.getOrganizationDN());  token=pm.token;  java.util.Locale loc;  try {    String lstr=token.getProperty("Locale");    loc=com.sun.identity.shared.locale.Locale.getLocale(lstr);  } catch (  SSOException ex) {    debug.error("SubjectTypeManager:Unable to retreive locale from SSOToken",ex);    loc=Locale.getDefaultLocale();  }  if (debug.messageEnabled()) {    debug.message("SubjectManager locale=" + loc + "\tI18nFileName = "+ ResBundleUtils.rbName);  }  rb=amCache.getResBundle(ResBundleUtils.rbName,loc);}  }
class C{  @Override public void removeChangeListener(ConfigurationChangeListener<ExternalChangelogDomainCfg> listener){}  }
class C{  private void handleQueryResultList(JsonValue resultList,QueryResourceHandler handler){  for (  JsonValue entry : resultList) {    String id=null;    String rev=null;    if (entry.isMap()) {      id=entry.get(ResourceResponse.FIELD_ID).asString();      rev=entry.get(ResourceResponse.FIELD_REVISION).asString();    }    handler.handleResource(newResourceResponse(id,rev,entry));  }}  }
class C{  private String fieldParamComment(Field field,String paramComment,boolean isOptional){  String commentType=fieldTypeCardinalityComment(field);  String fieldName=lowerUnderscoreToLowerCamel(field.getSimpleName());  fieldName="request." + fieldName;  if (isOptional) {    commentType=commentType + "=";  }  return fieldComment(String.format("@param {%s} %s",commentType,fieldName),paramComment,field);}  }
class C{  private static boolean determineNegation(StringBuilder ruleExpr){  boolean negate=false;  String ruleStr=ruleExpr.toString();  while (ruleStr.regionMatches(true,0,"not ",0,4)) {    negate=!negate;    ruleStr=ruleStr.substring(4);  }  ruleExpr.replace(0,ruleExpr.length(),ruleStr);  return negate;}  }
class C{  public void addComment(String c){  comments.add(c);}  }
class C{  public synchronized void incrementActiveSessions(){  numberOfActiveSessions++;  if (SystemProperties.isServerMode() && MonitoringUtil.isRunning()) {    SsoServerSessSvcImpl sessImpl=Agent.getSessSvcMBean();    sessImpl.incSessionActiveCount();  }}  }
class C{  public MP3File(File file,int loadOptions,boolean readOnly) throws IOException, TagException, ReadOnlyFileException, InvalidAudioFrameException {  RandomAccessFile newFile=null;  try {    this.file=file;    newFile=checkFilePermissions(file,readOnly);    long tagSizeReportedByHeader=AbstractID3v2Tag.getV2TagSizeIfExists(file);    logger.config("TagHeaderSize:" + Hex.asHex(tagSizeReportedByHeader));    audioHeader=new MP3AudioHeader(file,tagSizeReportedByHeader);    if (tagSizeReportedByHeader != ((MP3AudioHeader)audioHeader).getMp3StartByte()) {      logger.config("First header found after tag:" + audioHeader);      audioHeader=checkAudioStart(tagSizeReportedByHeader,(MP3AudioHeader)audioHeader);    }    readV1Tag(file,newFile,loadOptions);    readV2Tag(file,loadOptions,(int)((MP3AudioHeader)audioHeader).getMp3StartByte());    if (this.getID3v2Tag() != null) {      tag=this.getID3v2Tag();    } else     if (id3v1tag != null) {      tag=id3v1tag;    }  }  finally {    if (newFile != null) {      newFile.close();    }  }}  }
class C{  public void write(RandomAccessFile file) throws IOException {  logger.config("Saving ID3v1 tag to file");  byte[] buffer=new byte[TAG_LENGTH];  int i;  String str;  delete(file);  file.seek(file.length());  System.arraycopy(TAG_ID,FIELD_TAGID_POS,buffer,FIELD_TAGID_POS,TAG_ID.length);  int offset=FIELD_TITLE_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveTitle()) {    str=ID3Tags.truncate(title,FIELD_TITLE_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_ARTIST_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveArtist()) {    str=ID3Tags.truncate(artist,FIELD_ARTIST_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_ALBUM_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveAlbum()) {    str=ID3Tags.truncate(album,FIELD_ALBUM_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_YEAR_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveYear()) {    str=ID3Tags.truncate(year,AbstractID3v1Tag.FIELD_YEAR_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_COMMENT_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveComment()) {    str=ID3Tags.truncate(comment,FIELD_COMMENT_LENGTH);    for (i=0; i < str.length(); i++) {      buffer[i + offset]=(byte)str.charAt(i);    }  }  offset=FIELD_GENRE_POS;  if (TagOptionSingleton.getInstance().isId3v1SaveGenre()) {    buffer[offset]=genre;  }  file.write(buffer);  logger.config("Saved ID3v1 tag to file");}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s4_linear_with_only_annotated_tags_and_branch();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s1_linear_with_only_annotated_tags();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer xml=new StringBuffer(200);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.PROTOCOL_NAMESPACE_STRING;  }  xml.append("<").append(prefix).append("AuthenticationQuery").append(uri);  if (authMethod != null) {    xml.append(" AuthenticationMethod=\"").append(authMethod).append("\"");  }  xml.append(">\n").append(subject.toString(true,true));  xml.append("</").append(prefix).append("AuthenticationQuery>\n");  return xml.toString();}  }
class C{  @Override public void initializeForTemplate(TemplateFile templateFile,Template template,String[] arguments,int lineNumber,List<LocalizableMessage> warnings) throws InitializationException {  if (arguments.length != 0) {    LocalizableMessage message=ERR_MAKELDIF_TAG_INVALID_ARGUMENT_COUNT.get(getName(),lineNumber,0,arguments.length);    throw new InitializationException(message);  }}  }
class C{  public PlaPointFloat end_point_approx(){  return end_point.to_float();}  }
class C{  public PBEKeySpec(char[] password){  if (password == null) {    this.password=EmptyArray.CHAR;  } else {    this.password=new char[password.length];    System.arraycopy(password,0,this.password,0,password.length);  }  salt=null;  iterationCount=0;  keyLength=0;}  }
class C{  private static boolean isNotImplemented(MonitoringAttributes attr,SearchResultEntry monitoringEntry){  Attribute monitoringValue=monitoringEntry.getAttribute(attr.getAttributeName());  if (attr.isNumeric() && monitoringValue != null) {    try {      monitoringValue.parse().asLong();      return false;    } catch (    Throwable t) {      return true;    }  }  return false;}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if ((ui != null) && (getUIClassID().equals(uiClassID))) {    ui.installUI(this);  }}  }
class C{  public synchronized void removeTextListener(TextListener l){  if (l == null) {    return;  }  textListener=AWTEventMulticaster.remove(textListener,l);}  }
class C{  public Node item(int index){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  protected void startFoldAnimation(ArrayList<FoldingCellView> foldingCellElements,ViewGroup foldingLayout,int part90degreeAnimationDuration,AnimationEndListener animationEndListener){  for (  FoldingCellView foldingCellElement : foldingCellElements)   foldingLayout.addView(foldingCellElement);  Collections.reverse(foldingCellElements);  int nextDelay=0;  for (int i=0; i < foldingCellElements.size(); i++) {    FoldingCellView cell=foldingCellElements.get(i);    cell.setVisibility(VISIBLE);    if (i != 0) {      FoldAnimation foldAnimation=new FoldAnimation(FoldAnimation.FoldAnimationMode.UNFOLD_UP,part90degreeAnimationDuration).withStartOffset(nextDelay).withInterpolator(new DecelerateInterpolator());      if (i == foldingCellElements.size() - 1) {        foldAnimation.setAnimationListener(animationEndListener);      }      cell.animateFrontView(foldAnimation);      nextDelay=nextDelay + part90degreeAnimationDuration;    }    if (i != foldingCellElements.size() - 1) {      cell.startAnimation(new FoldAnimation(FoldAnimation.FoldAnimationMode.FOLD_UP,part90degreeAnimationDuration).withStartOffset(nextDelay).withInterpolator(new DecelerateInterpolator()));      nextDelay=nextDelay + part90degreeAnimationDuration;    }  }}  }
class C{  public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){  ListCellRenderer renderer=comboBox.getRenderer();  Component c;  if (hasFocus && !isPopupVisible(comboBox)) {    c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,true,false);  } else {    c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,false,false);    c.setBackground(UIManager.getColor("ComboBox.background"));  }  c.setFont(comboBox.getFont());  if (hasFocus && !isPopupVisible(comboBox)) {    c.setForeground(listBox.getSelectionForeground());    c.setBackground(listBox.getSelectionBackground());  } else {    if (comboBox.isEnabled()) {      c.setForeground(comboBox.getForeground());      c.setBackground(comboBox.getBackground());    } else {      c.setForeground(DefaultLookup.getColor(comboBox,this,"ComboBox.disabledForeground",null));      c.setBackground(DefaultLookup.getColor(comboBox,this,"ComboBox.disabledBackground",null));    }  }  boolean shouldValidate=false;  if (c instanceof JPanel) {    shouldValidate=true;  }  int x=bounds.x, y=bounds.y, w=bounds.width, h=bounds.height;  if (padding != null) {    x=bounds.x + padding.left;    y=bounds.y + padding.top;    w=bounds.width - (padding.left + padding.right);    h=bounds.height - (padding.top + padding.bottom);  }  currentValuePane.paintComponent(g,c,comboBox,x,y,w,h,shouldValidate);}  }
class C{  public UnsupportedAudioFileException(){  super();}  }
class C{  private Future<Long> zpop(String key){  Future<Long> future=Future.future();  client.transaction().multi(_failure()).zrange(key,0,0,_failure()).zremrangebyrank(key,0,0,_failure()).exec(null);  return future;}  }
class C{  public SessionContextStatement(SessionContext sessionContext,Subject subject) throws SAMLException {  if ((sessionContext == null) || (subject == null)) {    SAMLUtils.debug.message("SessionContextStatement: " + "SessionContext is null!");    throw new SAMLRequesterException(SAMLUtils.bundle.getString("nullInput"));  }  _sessionContext=sessionContext;  this._subject=subject;}  }
class C{  private FSLogoutStatus doHTMLGet(String providerId){  FSUtils.debug.message("In HTML based response");  StringBuffer destination=new StringBuffer();  destination.append(hostedDescriptor.getSingleLogoutServiceURL());  if ((destination.toString()).indexOf(QUESTION_MARK) == -1) {    destination.append(QUESTION_MARK);  } else {    destination.append(AMPERSAND);  }  destination.append("logoutSource=logoutGet");  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Submit action : " + destination.toString());  }  FSUtils.debug.message("Calling getLogoutGETProviders");  HashMap providerMap=FSLogoutUtil.getLogoutGETProviders(userID,providerId,sessionIndex,realm,metaAlias);  Vector providerGetList=(Vector)providerMap.get(IFSConstants.PROVIDER);  FSUtils.debug.message("Calling cleanSessionMapProviders");  FSLogoutUtil.cleanSessionMapProviders(userID,providerGetList,metaAlias);  FSUtils.debug.message("Calling getMultiLogoutRequest");  String multiLogoutRequest=getMultiLogoutRequest(providerMap);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("Image Statements : " + multiLogoutRequest);  }  request.setAttribute("DESTINATION_URL",destination.toString());  request.setAttribute("MULTI_LOGOUT_REQUEST",multiLogoutRequest);  try {    request.getRequestDispatcher(LOGOUT_JSP).forward(request,response);  } catch (  ServletException sE) {    FSUtils.debug.error("Error in performing HTTP GET for regular agent",sE);    return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);  }catch (  IOException ioE) {    FSUtils.debug.error("Error in performing HTTP GET for regular agent",ioE);    return new FSLogoutStatus(IFSConstants.SAML_RESPONDER);  }  return new FSLogoutStatus(IFSConstants.SAML_SUCCESS);}  }
class C{  public void addURL(String url) throws ServiceNotFoundException {  try {    URL ur=new URL(url);    if (!Arrays.asList(getURLs()).contains(ur))     super.addURL(ur);  } catch (  MalformedURLException e) {    if (MLET_LOGGER.isLoggable(Level.FINEST)) {      MLET_LOGGER.logp(Level.FINEST,MLet.class.getName(),"addUrl","Malformed URL: " + url,e);    }    throw new ServiceNotFoundException("The specified URL is malformed");  }}  }
class C{  public void disposeBefore(long pos){  long index=pos / BUFFER_LENGTH;  if (index < cacheStart) {    throw new IndexOutOfBoundsException("pos already disposed");  }  long numBlocks=Math.min(index - cacheStart,cache.size());  for (long i=0; i < numBlocks; i++) {    cache.remove(0);  }  this.cacheStart=index;}  }
class C{  public static byte[][] generatePkcs1Vectors(RSAPublicKey publicKey,BleichenbacherCommandConfig.Type type){  Random random=new Random();  byte[] keyBytes=new byte[HandshakeByteLength.PREMASTER_SECRET];  random.nextBytes(keyBytes);  int rsaKeyLength=publicKey.getModulus().bitLength() / 8;  int vectorSize=STATIC_VECTOR_SIZE;  if (type == BleichenbacherCommandConfig.Type.FULL) {    vectorSize+=rsaKeyLength - 2;  }  byte[][] plainPaddedKeys=new byte[vectorSize][];  plainPaddedKeys[0]=getEK_NoNullByte(rsaKeyLength,keyBytes);  plainPaddedKeys[1]=getEK_NullByteInPadding(rsaKeyLength,keyBytes);  plainPaddedKeys[2]=getEK_NullByteInPkcsPadding(rsaKeyLength,keyBytes);  plainPaddedKeys[3]=getEK_SymmetricKeyOfSize(rsaKeyLength,keyBytes,0);  plainPaddedKeys[4]=getEK_SymmetricKeyOfSize(rsaKeyLength,keyBytes,1);  plainPaddedKeys[5]=getEK_SymmetricKeyOfSize(rsaKeyLength,keyBytes,8);  plainPaddedKeys[6]=getEK_SymmetricKeyOfSize(rsaKeyLength,keyBytes,16);  plainPaddedKeys[7]=getEK_SymmetricKeyOfSize(rsaKeyLength,keyBytes,32);  plainPaddedKeys[8]=getEK_WrongFirstByte(rsaKeyLength,keyBytes);  plainPaddedKeys[9]=getEK_WrongSecondByte(rsaKeyLength,keyBytes);  plainPaddedKeys[10]=getPaddedKey(rsaKeyLength,keyBytes);  if (type == BleichenbacherCommandConfig.Type.FULL) {    byte[][] additionalPaddedKeys=getEK_DifferentPositionsOf0x00(rsaKeyLength,keyBytes);    System.arraycopy(additionalPaddedKeys,0,plainPaddedKeys,STATIC_VECTOR_SIZE,additionalPaddedKeys.length);  }  try {    Cipher rsa=Cipher.getInstance("RSA/NONE/NoPadding");    rsa.init(Cipher.ENCRYPT_MODE,publicKey);    byte[][] encryptedKeys=new byte[vectorSize][];    for (int i=0; i < encryptedKeys.length; i++) {      encryptedKeys[i]=rsa.doFinal(plainPaddedKeys[i]);    }    return encryptedKeys;  } catch (  BadPaddingException|IllegalBlockSizeException|InvalidKeyException|NoSuchAlgorithmException|NoSuchPaddingException ex) {    throw new ConfigurationException("The different PKCS#1 attack vectors could not be generated.",ex);  }}  }
class C{  public void resetTagDefinitions(){  mTagInfo=null;}  }
class C{  public String toString(boolean includeNS,boolean declareNS){  StringBuffer result=new StringBuffer(100);  String prefix="";  String uri="";  if (includeNS) {    prefix=SAMLConstants.ASSERTION_PREFIX;  }  if (declareNS) {    uri=SAMLConstants.assertionDeclareStr;  }  result.append("<").append(prefix).append("AssertionIDReference").append(uri).append(">").append(assertionID).append("</").append(prefix).append("AssertionIDReference>\n");  return (result.toString());}  }
class C{  public final boolean isForwarded(){  return flags[FORWARDED_TICKET_FLAG];}  }
class C{  public static void serialize(XMPMeta xmp,OutputStream out,SerializeOptions options) throws XMPException {  assertImplementation(xmp);  XMPSerializerHelper.serialize((XMPMetaImpl)xmp,out,options);}  }
class C{  public MaterialBarcodeScannerBuilder(@NonNull Activity activity){  this.mRootView=(ViewGroup)activity.findViewById(android.R.id.content);  this.mActivity=activity;}  }
class C{  public PropertyVetoException(String mess,PropertyChangeEvent evt){  super(mess);  this.evt=evt;}  }
class C{  public void testPowMathContext(){  String a="123121247898748298842980";  int aScale=10;  int exp=10;  String c="8.0044E+130";  int cScale=-126;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  MathContext mc=new MathContext(5,RoundingMode.HALF_UP);  BigDecimal result=aNumber.pow(exp,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  protected static String listToCommaDelimitedString(List<String> stringList){  if (stringList == null) {    return "";  }  StringBuilder result=new StringBuilder();  for (Iterator<String> it=stringList.iterator(); it.hasNext(); ) {    Object element=it.next();    if (element != null) {      result.append(element);      if (it.hasNext()) {        result.append(", ");      }    }  }  return result.toString();}  }
class C{  public InternalSession removeSession(SessionID sessionID){  Reject.ifNull(sessionID);  return store.remove(sessionID);}  }
class C{  public void removeUpdateListener(AnimatorUpdateListener listener){  if (updateListeners == null) {    return;  }  updateListeners.remove(listener);  if (updateListeners.size() == 0) {    updateListeners=null;  }}  }
class C{  private void addUsedVarNames(Set<String> names){  this.usedVarNames.addAll(names);}  }
class C{  @NonNull public static Interpolator divide(Interpolator dividend,Interpolator divisor){  return new DivideInterpolator(dividend,divisor);}  }
class C{  public final void addDescriptor(final MetadataDescriptor toAdd) throws IllegalArgumentException {  this.containerType.assertConstraints(toAdd.getName(),toAdd.getRawData(),toAdd.getType(),toAdd.getStreamNumber(),toAdd.getLanguageIndex());  if (!isAddSupported(toAdd)) {    throw new IllegalArgumentException("Descriptor cannot be added, see isAddSupported(...)");  }  List<MetadataDescriptor> list;synchronized (this.perfPoint) {    list=this.descriptors.get(this.perfPoint.setDescriptor(toAdd));  }  if (list == null) {    list=new ArrayList<MetadataDescriptor>();    this.descriptors.put(new DescriptorPointer(toAdd),list);  } else {    if (!list.isEmpty() && !this.containerType.isMultiValued()) {      throw new IllegalArgumentException("Container does not allow multiple values of descriptors with same name, language index and stream number");    }  }  list.add(toAdd);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  @JsonIgnore public Privilege asPrivilege(){  return privilege;}  }
class C{  public HashSet(int initialCapacity,float loadFactor){  map=new HashMap<>(initialCapacity,loadFactor);}  }
class C{  public boolean isFocusTraversable(JComboBox c){  return !comboBox.isEditable();}  }
class C{  public DirectoryException(ResultCode resultCode,OpenDsException cause){  super(cause.getMessageObject(),cause);  this.resultCode=resultCode;  this.matchedDN=null;  this.referralURLs=null;}  }
class C{  public void dispatchCharactersEvents(org.xml.sax.ContentHandler ch) throws org.xml.sax.SAXException {}  }
class C{  public void testGenerateCertPath3() throws Exception {  try {    CertificateFactory.getInstance("X.509").generateCertPath((InputStream)null);    fail("CertificateException was not thrown");  } catch (  CertificateException e) {  }}  }
class C{  private static long calcSize(long size,long skip,long limit){  return size >= 0 ? Math.max(-1,Math.min(size - skip,limit)) : -1;}  }
class C{  @Override public void write(int b){  buf.write(b);}  }
class C{  public int hashCode(){  return Objects.hash(file,princ,bound);}  }
class C{  public static void addCookieToResponse(HttpServletResponse response,Cookie cookie){  if (cookie == null) {    return;  }  if (!isCookieHttpOnly()) {    response.addCookie(cookie);    return;  }  if (setHttpOnlyMethod != null) {    try {      setHttpOnlyMethod.invoke(cookie,true);      response.addCookie(cookie);      return;    } catch (    IllegalAccessException iae) {      debug.warning("IllegalAccessException while trying to add HttpOnly cookie: " + iae.getMessage());    }catch (    InvocationTargetException ite) {      debug.error("An error occurred while trying to add HttpOnly cookie",ite);    }  }  StringBuilder sb=new StringBuilder(150);  sb.append(cookie.getName()).append("=").append(cookie.getValue());  String path=cookie.getPath();  if (path != null && path.length() > 0) {    sb.append(";path=").append(path);  } else {    sb.append(";path=/");  }  String domain=cookie.getDomain();  if (domain != null && domain.length() > 0) {    sb.append(";domain=").append(domain);  }  int age=cookie.getMaxAge();  if (age > -1) {    Date date=new Date(currentTimeMillis() + age * 1000l);    SimpleDateFormat sdf=new SimpleDateFormat("EEE, dd-MMM-yyyy HH:mm:ss zzz",Locale.UK);    sdf.setTimeZone(TimeZone.getTimeZone("GMT"));    sb.append(";max-age=").append(age);    sb.append(";Expires=").append(sdf.format(date));  }  if (CookieUtils.isCookieSecure() || cookie.getSecure()) {    sb.append(";secure");  }  sb.append(";httponly");  if (debug.messageEnabled()) {    debug.message("CookieUtils:addCookieToResponse adds " + sb);  }  response.addHeader("Set-Cookie",sb.toString());}  }
class C{  public void error(SAXParseException e) throws SAXException {}  }
class C{  private void addFocusListener(FocusListener focusListener,Container container){  for (int i=0; i < container.getComponentCount(); i++) {    Component comp=container.getComponent(i);    if (comp instanceof AbstractButton || comp instanceof JTextComponent || comp instanceof JList|| comp instanceof JComboBox|| comp instanceof JTable) {      comp.addFocusListener(focusListener);    } else     if (comp instanceof JPanel || comp instanceof JScrollPane || comp instanceof JViewport) {      addFocusListener(focusListener,(Container)comp);    }  }}  }
class C{  public static Foo toModel(FooSoap soapModel){  if (soapModel == null) {    return null;  }  Foo model=new FooImpl();  model.setUuid(soapModel.getUuid());  model.setFooId(soapModel.getFooId());  model.setGroupId(soapModel.getGroupId());  model.setCompanyId(soapModel.getCompanyId());  model.setUserId(soapModel.getUserId());  model.setUserName(soapModel.getUserName());  model.setCreateDate(soapModel.getCreateDate());  model.setModifiedDate(soapModel.getModifiedDate());  model.setField1(soapModel.getField1());  model.setField2(soapModel.getField2());  model.setField3(soapModel.getField3());  model.setField4(soapModel.getField4());  model.setField5(soapModel.getField5());  return model;}  }
class C{  @BeforeClass public void entryCacheTestInit() throws Exception {  TestCaseUtils.startServer();  Entry cacheConfigEntry=TestCaseUtils.makeEntry("dn: cn=FIFO,cn=Entry Caches,cn=config","objectClass: ds-cfg-fifo-entry-cache","objectClass: ds-cfg-entry-cache","objectClass: top","cn: FIFO","ds-cfg-cache-level: 1","ds-cfg-java-class: org.opends.server.extensions.FIFOEntryCache","ds-cfg-enabled: true","ds-cfg-max-entries: " + super.MAXENTRIES);  super.configuration=InitializationUtils.getConfiguration(FIFOEntryCacheCfgDefn.getInstance(),cacheConfigEntry);  System.gc();  super.cache=new FIFOEntryCache();  super.cache.initializeEntryCache(configuration);  super.testEntriesList=new ArrayList<>(super.NUMTESTENTRIES);  for (int i=0; i < super.NUMTESTENTRIES; i++) {    super.testEntriesList.add(TestCaseUtils.makeEntry("dn: uid=test" + i + ".user"+ i+ ",ou=test"+ i+ ",o=test","objectClass: person","objectClass: inetorgperson","objectClass: top","objectClass: organizationalperson","postalAddress: somewhere in Testville" + i,"street: Under Construction Street" + i,"l: Testcounty" + i,"st: Teststate" + i,"telephoneNumber: +878 8378 8378" + i,"mobile: +878 8378 8378" + i,"homePhone: +878 8378 8378" + i,"pager: +878 8378 8378" + i,"mail: test" + i + ".user"+ i+ "@testdomain.net","postalCode: 8378" + i,"userPassword: testpassword" + i,"description: description for Test" + i + "User"+ i,"cn: Test" + i + "User"+ i,"sn: User" + i,"givenName: Test" + i,"initials: TST" + i,"employeeNumber: 8378" + i,"uid: test" + i + ".user"+ i));  }}  }
class C{  public OAuth2ErrorException(final OAuth2Error error,final Throwable cause){  super(error.toString(),cause);  this.error=error;}  }
class C{  public void start(){  LocalizableMessageBuilder mb=new LocalizableMessageBuilder();  mb.append(formatter.getSpace());  for (int i=0; i < 5; i++) {    mb.append(formatter.getFormattedPoint());  }  app.print(mb.toMessage());  t=new Thread(this);  t.start();}  }
class C{  public boolean isUnusable(){  return code == Code.UNUSABLE;}  }
class C{  private boolean checkDITContentRule(DITContentRule ditContentRule,AcceptRejectWarn structuralPolicy,LocalizableMessageBuilder invalidReason){  for (  AttributeType t : ditContentRule.getRequiredAttributes()) {    if (!userAttributes.containsKey(t) && !operationalAttributes.containsKey(t) && !t.isObjectClass()) {      LocalizableMessage message=ERR_ENTRY_SCHEMA_MISSING_REQUIRED_ATTR_FOR_DCR.get(dn,t.getNameOrOID(),ditContentRule.getNameOrOID());      if (structuralPolicy == AcceptRejectWarn.REJECT) {        invalidReason.append(message);        return false;      } else       if (structuralPolicy == AcceptRejectWarn.WARN) {        logger.error(message);      }    }  }  for (  AttributeType t : ditContentRule.getProhibitedAttributes()) {    if (userAttributes.containsKey(t) || operationalAttributes.containsKey(t)) {      LocalizableMessage message=ERR_ENTRY_SCHEMA_PROHIBITED_ATTR_FOR_DCR.get(dn,t.getNameOrOID(),ditContentRule.getNameOrOID());      if (structuralPolicy == AcceptRejectWarn.REJECT) {        invalidReason.append(message);        return false;      } else       if (structuralPolicy == AcceptRejectWarn.WARN) {        logger.error(message);      }    }  }  return true;}  }
class C{  public void handleWriteError(String record,Throwable ex){  if (!writeErroroccurred) {    System.err.println(ERR_LOGGER_ERROR_WRITING_RECORD.get(publisherConfigDN,stackTraceToSingleLineString(ex)));    writeErroroccurred=true;  }}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  public URI(URI p_other){  initialize(p_other);}  }
class C{  public final char readChar() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (char)((ch1 << 8) + (ch2 << 0));}  }
class C{  @Override public void removeByUuid_C(String uuid,long companyId){  for (  Foo foo : findByUuid_C(uuid,companyId,QueryUtil.ALL_POS,QueryUtil.ALL_POS,null)) {    remove(foo);  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  updateMaskIfNecessary();}  }
class C{  public void testNotZero(){  byte rBytes[]={-1};  BigInteger aNumber=BigInteger.ZERO;  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public FileAlreadyExistsException(String file,String other,String reason){  super(file,other,reason);}  }
class C{  public synchronized void undoOrRedo() throws CannotRedoException, CannotUndoException {  if (indexOfNextAdd == edits.size()) {    undo();  } else {    redo();  }}  }
class C{  public void shortSummarizeOggPageHeaders(File oggFile) throws CannotReadException, IOException {  RandomAccessFile raf=new RandomAccessFile(oggFile,"r");  int i=0;  while (raf.getFilePointer() < raf.length()) {    System.out.println("pageHeader starts at absolute file position:" + raf.getFilePointer());    OggPageHeader pageHeader=OggPageHeader.read(raf);    System.out.println("pageHeader finishes at absolute file position:" + raf.getFilePointer());    System.out.println(pageHeader + "\n");    raf.seek(raf.getFilePointer() + pageHeader.getPageLength());    i++;    if (i >= 5) {      break;    }  }  System.out.println("Raf File Pointer at:" + raf.getFilePointer() + "File Size is:"+ raf.length());  raf.close();}  }
class C{  public boolean isNoExport(){  return getFieldFlag(FF_NO_EXPORT);}  }
class C{  public PeerUnavailableException(){  super();}  }
class C{  public CallBackTiledView(View parent,String name){  super(parent,name);  setPrimaryModel((DatasetModel)getDefaultModel());  registerChildren();}  }
class C{  static ByteString decode(final String base64){  Reject.ifNull(base64);  final int length=base64.length();  if (length % 4 != 0) {    final LocalizableMessage message=ERR_BASE64_DECODE_INVALID_LENGTH.get(base64);    throw new LocalizedIllegalArgumentException(message);  }  final ByteStringBuilder builder=new ByteStringBuilder(length);  for (int i=0; i < length; i+=4) {    boolean append=true;    int value=0;    for (int j=0; j < 4; j++) {switch (base64.charAt(i + j)) {case 'A':        value<<=6;      break;case 'B':    value=(value << 6) | 0x01;  break;case 'C':value=(value << 6) | 0x02;break;case 'D':value=(value << 6) | 0x03;break;case 'E':value=(value << 6) | 0x04;break;case 'F':value=(value << 6) | 0x05;break;case 'G':value=(value << 6) | 0x06;break;case 'H':value=(value << 6) | 0x07;break;case 'I':value=(value << 6) | 0x08;break;case 'J':value=(value << 6) | 0x09;break;case 'K':value=(value << 6) | 0x0A;break;case 'L':value=(value << 6) | 0x0B;break;case 'M':value=(value << 6) | 0x0C;break;case 'N':value=(value << 6) | 0x0D;break;case 'O':value=(value << 6) | 0x0E;break;case 'P':value=(value << 6) | 0x0F;break;case 'Q':value=(value << 6) | 0x10;break;case 'R':value=(value << 6) | 0x11;break;case 'S':value=(value << 6) | 0x12;break;case 'T':value=(value << 6) | 0x13;break;case 'U':value=(value << 6) | 0x14;break;case 'V':value=(value << 6) | 0x15;break;case 'W':value=(value << 6) | 0x16;break;case 'X':value=(value << 6) | 0x17;break;case 'Y':value=(value << 6) | 0x18;break;case 'Z':value=(value << 6) | 0x19;break;case 'a':value=(value << 6) | 0x1A;break;case 'b':value=(value << 6) | 0x1B;break;case 'c':value=(value << 6) | 0x1C;break;case 'd':value=(value << 6) | 0x1D;break;case 'e':value=(value << 6) | 0x1E;break;case 'f':value=(value << 6) | 0x1F;break;case 'g':value=(value << 6) | 0x20;break;case 'h':value=(value << 6) | 0x21;break;case 'i':value=(value << 6) | 0x22;break;case 'j':value=(value << 6) | 0x23;break;case 'k':value=(value << 6) | 0x24;break;case 'l':value=(value << 6) | 0x25;break;case 'm':value=(value << 6) | 0x26;break;case 'n':value=(value << 6) | 0x27;break;case 'o':value=(value << 6) | 0x28;break;case 'p':value=(value << 6) | 0x29;break;case 'q':value=(value << 6) | 0x2A;break;case 'r':value=(value << 6) | 0x2B;break;case 's':value=(value << 6) | 0x2C;break;case 't':value=(value << 6) | 0x2D;break;case 'u':value=(value << 6) | 0x2E;break;case 'v':value=(value << 6) | 0x2F;break;case 'w':value=(value << 6) | 0x30;break;case 'x':value=(value << 6) | 0x31;break;case 'y':value=(value << 6) | 0x32;break;case 'z':value=(value << 6) | 0x33;break;case '0':value=(value << 6) | 0x34;break;case '1':value=(value << 6) | 0x35;break;case '2':value=(value << 6) | 0x36;break;case '3':value=(value << 6) | 0x37;break;case '4':value=(value << 6) | 0x38;break;case '5':value=(value << 6) | 0x39;break;case '6':value=(value << 6) | 0x3A;break;case '7':value=(value << 6) | 0x3B;break;case '8':value=(value << 6) | 0x3C;break;case '9':value=(value << 6) | 0x3D;break;case '+':value=(value << 6) | 0x3E;break;case '/':value=(value << 6) | 0x3F;break;case '=':append=false;switch (j) {case 2:builder.appendByte(value >>> 4);break;case 3:builder.appendByte(value >>> 10);builder.appendByte(value >>> 2);break;}break;default :final LocalizableMessage message=ERR_BASE64_DECODE_INVALID_CHARACTER.get(base64,base64.charAt(i + j));throw new LocalizedIllegalArgumentException(message);}if (!append) {break;}}if (append) {builder.appendByte(value >>> 16);builder.appendByte(value >>> 8);builder.appendByte(value);} else {break;}}return builder.toByteString();}  }
class C{  ContentModelState(Object content,ContentModelState next){  this(content,next,0);}  }
class C{  public LockableFileWriter(String fileName,boolean append,String lockDir) throws IOException {  this(new File(fileName),append,lockDir);}  }
class C{  @Override public Foo fetchByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  int count=countByUuid_C(uuid,companyId);  if (count == 0) {    return null;  }  List<Foo> list=findByUuid_C(uuid,companyId,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public boolean swapBuffers(EGLSurface eglSurface){  return EGL14.eglSwapBuffers(mEGLDisplay,eglSurface);}  }
class C{  public void testGetSecretKey(){  SecretKey sk=new tmpSecretKey();  KeyStore.SecretKeyEntry ske=new KeyStore.SecretKeyEntry(sk);  assertEquals("Incorrect SecretKey",sk,ske.getSecretKey());}  }
class C{  @Override public String mkdirs(String path) throws MalformedURLException, IOException, AuthenticationException {  String resp=null;  ensureValidToken();  HttpURLConnection conn=authenticatedURL.openConnection(new URL(new URL(httpfsUrl),MessageFormat.format("/webhdfs/v1/{0}?op=MKDIRS",URLUtil.encodePath(path))),token);  conn.setRequestMethod("PUT");  conn.connect();  resp=result(conn,true);  conn.disconnect();  return resp;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodevalue04.class,args);}  }
class C{  @Override public int countByUUID_G(String uuid,long groupId){  FinderPath finderPath=FINDER_PATH_COUNT_BY_UUID_G;  Object[] finderArgs=new Object[]{uuid,groupId};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(3);    query.append(_SQL_COUNT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  private void clearSubtree(DN baseDN,Backend<?> backend){  Map<Long,CacheEntry> map=idMap.get(backend.getBackendID());  if (map == null) {    return;  }  int entriesExamined=0;  Iterator<CacheEntry> iterator=map.values().iterator();  while (iterator.hasNext()) {    CacheEntry e=iterator.next();    DN entryDN=e.getEntry().getName();    if (entryDN.isSubordinateOrEqualTo(baseDN)) {      iterator.remove();      dnMap.remove(entryDN);    }    entriesExamined++;    if ((entriesExamined % 1000) == 0) {      cacheWriteLock.unlock();      Thread.yield();      cacheWriteLock.lock();    }  }  for (  Backend<?> subBackend : backend.getSubordinateBackends()) {    boolean isAppropriate=false;    for (    DN subBase : subBackend.getBaseDNs()) {      if (subBase.isSubordinateOrEqualTo(baseDN)) {        isAppropriate=true;        break;      }    }    if (isAppropriate) {      clearSubtree(baseDN,subBackend);    }  }}  }
class C{  private void tryGrow(Object[] array,int oldCap){  lock.unlock();  Object[] newArray=null;  if (allocationSpinLock == 0 && UNSAFE.compareAndSwapInt(this,allocationSpinLockOffset,0,1)) {    try {      int newCap=oldCap + ((oldCap < 64) ? (oldCap + 2) : (oldCap >> 1));      if (newCap - MAX_ARRAY_SIZE > 0) {        int minCap=oldCap + 1;        if (minCap < 0 || minCap > MAX_ARRAY_SIZE)         throw new OutOfMemoryError();        newCap=MAX_ARRAY_SIZE;      }      if (newCap > oldCap && queue == array)       newArray=new Object[newCap];    }  finally {      allocationSpinLock=0;    }  }  if (newArray == null)   Thread.yield();  lock.lock();  if (newArray != null && queue == array) {    queue=newArray;    System.arraycopy(array,0,newArray,0,oldCap);  }}  }
class C{  public void addJKTableColumn(final JKTableColumn col){  col.setIndex(this.tableColumns.size());  this.tableColumns.add(col);  this.visibilityManager.refreshVisibility();  fireTableStructureChanged();}  }
class C{  public boolean isRepeatable(){  return true;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(200);  sb.append("\nDelegationPermission Object:");  sb.append("\norgName=");  sb.append(orgName);  sb.append("\nserviceName=");  sb.append(serviceName);  sb.append("\nserviceVersion=");  sb.append(serviceVersion);  sb.append("\nconfigType=");  sb.append(configType);  sb.append("\nsubConfigName=");  sb.append(subConfigName);  sb.append("\nactions=");  sb.append(actions);  sb.append("\nextensions=");  sb.append(extensions);  return sb.toString();}  }
class C{  public static SOAPMessage convertDOMToSOAP(Document doc){  try {    MimeHeaders headers=new MimeHeaders();    headers.addHeader("Content-Type","text/xml");    return fac.createMessage(headers,new ByteArrayInputStream((printDocument(doc)).getBytes()));  } catch (  Exception e) {    FSUtils.debug.error("FSServiceUtils.convertDOMToSOAP: " + "Exception: " + e.getMessage());    return null;  }}  }
class C{  public AttributeCertificateHolder(int digestedObjectType,ASN1ObjectIdentifier digestAlgorithm,ASN1ObjectIdentifier otherObjectTypeID,byte[] objectDigest){  holder=new Holder(new ObjectDigestInfo(digestedObjectType,otherObjectTypeID,new AlgorithmIdentifier(digestAlgorithm),Arrays.clone(objectDigest)));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  CharacterData entText;  EntityReference entReference;  Node appendedNode;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  appendedNode=genderNode.appendChild(entReference);  entText=(CharacterData)entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      entText.replaceData(1,3,"newArg");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public final AMAccessAuditEventBuilder response(AccessAuditEventBuilder.ResponseStatus status,String statusCode){  Object object=object(field("status",status == null ? null : status.toString()),field("statusCode",statusCode));  this.jsonValue.put("response",object);  return this;}  }
class C{  public int size(){  return size;}  }
class C{  public static double determinant(Pnt[] matrix){  if (matrix.length != matrix[0].dimension())   throw new IllegalArgumentException("Matrix is not square");  boolean[] columns=new boolean[matrix.length];  for (int i=0; i < matrix.length; i++)   columns[i]=true;  try {    return determinant(matrix,0,columns);  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException("Matrix is wrong shape");  }}  }
class C{  private SAXParseException makeException(String message){  if (locator != null) {    return new SAXParseException(message,locator);  } else {    return new SAXParseException(message,null,null,-1,-1);  }}  }
class C{  public CRL engineGenerateCRL(InputStream inStream) throws CRLException {  throw new UnsupportedOperationException("not yet.");}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  public GetEffectiveRightsRequestControl(boolean isCritical,String authzDN,List<String> attrs){  super(OID_GET_EFFECTIVE_RIGHTS,isCritical);  this.rawAuthzDN=authzDN;  this.rawAttrs=attrs;}  }
class C{  public static int e(String tag,String msg){  return Log.e(tag,msg);}  }
class C{  public void clearDB() throws ChangelogException {  if (!dbDirectory.exists()) {    return;  }  ChangelogException firstException=null;  for (  DN baseDN : this.domainToReplicaDBs.keySet()) {    removeDomain(baseDN);  }synchronized (cnIndexDBLock) {    if (cnIndexDB != null) {      try {        cnIndexDB.clear();      } catch (      ChangelogException e) {        firstException=e;      }      try {        shutdownChangeNumberIndexDB();      } catch (      ChangelogException e) {        if (firstException == null) {          firstException=e;        } else {          logger.traceException(e);        }      }      cnIndexDB=null;    }  }  if (firstException != null) {    throw firstException;  }}  }
class C{  public void addCallParam(String pattern,int paramIndex){  addRule(pattern,new CallParamRule(paramIndex));}  }
class C{  public void testClearBitPositiveOutside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=150;  byte rBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  static public void assertEquals(short expected,short actual){  assertEquals(null,expected,actual);}  }
class C{  public AppLauncher closeOutOnExit(boolean closeOutOnExit){  this.closeOutOnExit=closeOutOnExit;  return this;}  }
class C{  @Override public void addParameter(String name,String value){  if ((name == null) || (value == null)) {    throw new IllegalArgumentException(sm.getString("standardContext.parameter.required"));  }  String oldValue=parameters.putIfAbsent(name,value);  if (oldValue != null) {    throw new IllegalArgumentException(sm.getString("standardContext.parameter.duplicate",name));  }  fireContainerEvent("addParameter",name);}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Callable<V> callable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  public SQLRecoverableException(String reason,String sqlState,int vendorCode){  super(reason,sqlState,vendorCode);}  }
class C{  private void deleteExternalDatabaseFiles(Set<String> dbFiles) throws ApplicationException {  if (isVerbose()) {    notifyListeners(getFormattedProgressWithLineBreak(INFO_PROGRESS_DELETING_EXTERNAL_DB_FILES.get()));  } else {    notifyListeners(getFormattedWithPoints(INFO_PROGRESS_DELETING_EXTERNAL_DB_FILES_NON_VERBOSE.get()));  }  for (  String path : dbFiles) {    deleteRecursively(new File(path));  }  if (!isVerbose()) {    notifyListeners(getFormattedDoneWithLineBreak());  }}  }
class C{  private void expectedByte(int position,int count) throws UTFDataFormatException {  throw new UTFDataFormatException(Localizer.getMessage("jsp.error.xml.expectedByte",Integer.toString(position),Integer.toString(count)));}  }
class C{  public final void testGetCertPath() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  CertPath cp=new MyCertPath(testEncoding);  CertPathBuilderResult r=new PKIXCertPathBuilderResult(cp,ta,TestUtils.getPolicyTree(),testPublicKey);  assertSame(cp,r.getCertPath());}  }
class C{  public void test_Of_EEArray(){  EnumWithInnerClass[] enumArray=new EnumWithInnerClass[]{EnumWithInnerClass.b,EnumWithInnerClass.c};  EnumSet<EnumWithInnerClass> enumSet=EnumSet.of(EnumWithInnerClass.a,enumArray);  assertEquals("Should be equal",3,enumSet.size());  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.a));  assertTrue("Should return true",enumSet.contains(EnumWithInnerClass.c));  try {    EnumSet.of(EnumWithInnerClass.a,(EnumWithInnerClass[])null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  EnumFoo[] foos={EnumFoo.a,EnumFoo.c,EnumFoo.d};  EnumSet<EnumFoo> set=EnumSet.of(EnumFoo.c,foos);  assertEquals("size of set should be 1",3,set.size());  assertTrue("Should contain EnumFoo.a",set.contains(EnumFoo.a));  assertTrue("Should contain EnumFoo.c",set.contains(EnumFoo.c));  assertTrue("Should contain EnumFoo.d",set.contains(EnumFoo.d));  HugeEnumWithInnerClass[] hugeEnumArray=new HugeEnumWithInnerClass[]{HugeEnumWithInnerClass.b,HugeEnumWithInnerClass.c};  EnumSet<HugeEnumWithInnerClass> hugeEnumSet=EnumSet.of(HugeEnumWithInnerClass.a,hugeEnumArray);  assertEquals(3,hugeEnumSet.size());  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeEnumSet.contains(HugeEnumWithInnerClass.c));  try {    EnumSet.of(HugeEnumWithInnerClass.a,(HugeEnumWithInnerClass[])null);    fail("Should throw NullPointerException");  } catch (  NullPointerException npe) {  }  HugeEnumWithInnerClass[] huges={HugeEnumWithInnerClass.a,HugeEnumWithInnerClass.c,HugeEnumWithInnerClass.d};  EnumSet<HugeEnumWithInnerClass> hugeSet=EnumSet.of(HugeEnumWithInnerClass.c,huges);  assertEquals(3,hugeSet.size());  assertTrue(hugeSet.contains(HugeEnumWithInnerClass.a));  assertTrue(hugeSet.contains(HugeEnumWithInnerClass.c));  assertTrue(hugeSet.contains(HugeEnumWithInnerClass.d));}  }
class C{  public void processMessage(SIPMessage sipMessage){  sipMessage.setRemoteAddress(this.peerAddress);  sipMessage.setRemotePort(this.getPeerPort());  sipMessage.setLocalPort(this.getPort());  sipMessage.setLocalAddress(this.getMessageProcessor().getIpAddress());  if (logger.isLoggingEnabled(LogWriter.TRACE_INFO)) {    logger.logInfo("Setting SIPMessage peerPacketSource to: " + peerPacketSourceAddress + ":"+ peerPacketSourcePort);  }  sipMessage.setPeerPacketSourceAddress(this.peerPacketSourceAddress);  sipMessage.setPeerPacketSourcePort(this.peerPacketSourcePort);  if (sipMessage instanceof SIPRequest) {    SIPRequest sipRequest=(SIPRequest)sipMessage;    if (logger.isLoggingEnabled(ServerLogger.TRACE_MESSAGES)) {      this.sipStack.serverLogger.logMessage(sipMessage,this.getPeerHostPort().toString(),this.getHost() + ":" + this.myPort,false,receptionTime);    }    final ServerRequestInterface sipServerRequest=sipStack.newSIPServerRequest(sipRequest,this);    if (sipServerRequest == null) {      if (logger.isLoggingEnabled()) {        logger.logWarning("Null request interface returned -- dropping request");      }      return;    }    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     this.logger.logDebug("About to process " + sipRequest.getFirstLine() + "/"+ sipServerRequest);    try {      sipServerRequest.processRequest(sipRequest,this);    }  finally {      if (sipServerRequest instanceof SIPTransaction) {        SIPServerTransaction sipServerTx=(SIPServerTransaction)sipServerRequest;        if (!sipServerTx.passToListener()) {          ((SIPTransaction)sipServerRequest).releaseSem();        }      }    }    if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG))     this.logger.logDebug("Done processing " + sipRequest.getFirstLine() + "/"+ sipServerRequest);  } else {    SIPResponse sipResponse=(SIPResponse)sipMessage;    try {      sipResponse.checkHeaders();    } catch (    ParseException ex) {      if (logger.isLoggingEnabled())       logger.logError("Dropping Badly formatted response message >>> " + sipResponse);      return;    }    ServerResponseInterface sipServerResponse=sipStack.newSIPServerResponse(sipResponse,this);    if (sipServerResponse != null) {      try {        if (sipServerResponse instanceof SIPClientTransaction && !((SIPClientTransaction)sipServerResponse).checkFromTag(sipResponse)) {          if (logger.isLoggingEnabled())           logger.logError("Dropping response message with invalid tag >>> " + sipResponse);          return;        }        sipServerResponse.processResponse(sipResponse,this);      }  finally {        if (sipServerResponse instanceof SIPTransaction && !((SIPTransaction)sipServerResponse).passToListener())         ((SIPTransaction)sipServerResponse).releaseSem();      }    } else {      if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {        this.logger.logDebug("null sipServerResponse!");      }    }  }}  }
class C{  public void testValidate01() throws InvalidAlgorithmParameterException, CertPathValidatorException {  if (!PKIXSupport) {    fail(NotSupportMsg);    return;  }  MyCertPath mCP=new MyCertPath(new byte[0]);  CertPathParameters params=new PKIXParameters(TestUtils.getTrustAnchorSet());  CertPathValidator[] certPV=createCPVs();  assertNotNull("CertPathValidator objects were not created",certPV);  for (int i=0; i < certPV.length; i++) {    try {      certPV[i].validate(mCP,null);      fail("InvalidAlgorithmParameterException must be thrown");    } catch (    InvalidAlgorithmParameterException e) {    }    try {      certPV[i].validate(null,params);      fail("NullPointerException must be thrown");    } catch (    NullPointerException e) {    }  }}  }
class C{  public boolean continueIterating(){  return continueIterating;}  }
class C{  public void logWarning(String string){  getLogger().warn(string);}  }
class C{  public FSFederationTerminationNotification(Element root) throws FSMsgException {  String tag=null;  if (root == null) {    FSUtils.debug.message("FSFederationTerminationNotification(Element):null input.");    throw new FSMsgException("nullInput",null);  }  if (((tag=root.getLocalName()) == null) || (!tag.equals("FederationTerminationNotification"))) {    FSUtils.debug.message("FSFederationTerminationNotification(Element):wrong input");    throw new FSMsgException("wrongInput",null);  }  String instantString=root.getAttribute(IFSConstants.ISSUE_INSTANT);  if ((instantString == null) || (instantString.length() == 0)) {    FSUtils.debug.message("FederationTerminationNotification(Element): " + "missing IssueInstant");    String[] args={IFSConstants.ISSUE_INSTANT};    throw new FSMsgException("missingAttribute",args);  } else {    try {      issueInstant=DateUtils.stringToDate(instantString);    } catch (    ParseException e) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FederationTerminationNotification " + " (Element): could not parse IssueInstant",e);      }      throw new FSMsgException("wrongInput",null);    }  }  int length=0;  id=root.getAttribute(IFSConstants.ID);  requestID=root.getAttribute(IFSConstants.REQUEST_ID);  parseMajorVersion(root.getAttribute(IFSConstants.MAJOR_VERSION));  parseMinorVersion(root.getAttribute(IFSConstants.MINOR_VERSION));  NodeList contentnl=root.getChildNodes();  Node child;  String nodeName;  length=contentnl.getLength();  for (int i=0; i < length; i++) {    child=contentnl.item(i);    if ((nodeName=child.getLocalName()) != null) {      if (nodeName.equals(IFSConstants.RESPONDWITH)) {        if (respondWiths == Collections.EMPTY_LIST) {          respondWiths=new ArrayList();        }        respondWiths.add(XMLUtils.getElementValue((Element)child));      } else       if (nodeName.equals(IFSConstants.SIGNATURE)) {      } else       if (nodeName.equals(IFSConstants.PROVIDER_ID)) {        if (providerId != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSFederationTerminationNotification(" + "Element : should contain only one " + "ProviderID.");          }          throw new FSMsgException("wrongInput",null);        }        providerId=XMLUtils.getElementValue((Element)child);      } else       if (nodeName.equals(IFSConstants.NAME_IDENTIFIER)) {        try {          this.nameIdentifier=new NameIdentifier((Element)child);        } catch (        SAMLException ex) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSFederationTerminationNotification " + "(Element): SAMLException " + "while constructing nameidentifier");          }          throw new FSMsgException("nameIdentifierCreateError",null);        }      } else       if (nodeName.equals(IFSConstants.RELAY_STATE)) {        if (relayState != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSFederationTerminationNotification " + "(Element) :should contain only one " + "relayState.");          }          throw new FSMsgException("wrongInput",null);        }        relayState=XMLUtils.getElementValue((Element)child);      } else {        if (FSUtils.debug.messageEnabled()) {          FSUtils.debug.message("FSFederationTerminationNotification(Element): " + " invalid node" + nodeName);        }        throw new FSMsgException("wrongInput",null);      }    }  }  List signs=XMLUtils.getElementsByTagNameNS1(root,SAMLConstants.XMLSIG_NAMESPACE_URI,SAMLConstants.XMLSIG_ELEMENT_NAME);  int signsSize=signs.size();  if (signsSize == 1) {    Element elem=(Element)signs.get(0);    setSignature(elem);    xmlString=XMLUtils.print(root);    signed=true;  } else   if (signsSize != 0) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFederationTerminationNotification(Element):" + "included more than one Signature element.");    }    throw new FSMsgException("moreElement",null);  }}  }
class C{  public boolean isSelected(){  return selected;}  }
class C{  public String doubleMetaphone(String value,boolean alternate){  value=cleanInput(value);  if (value == null) {    return null;  }  boolean slavoGermanic=isSlavoGermanic(value);  int index=isSilentStart(value) ? 1 : 0;  DoubleMetaphoneResult result=new DoubleMetaphoneResult(this.getMaxCodeLen());  while (!result.isComplete() && index <= value.length() - 1) {switch (value.charAt(index)) {case 'A':case 'E':case 'I':case 'O':case 'U':case 'Y':      index=handleAEIOUY(value,result,index);    break;case 'B':  result.append('P');index=charAt(value,index + 1) == 'B' ? index + 2 : index + 1;break;case '\u00C7':result.append('S');index++;break;case 'C':index=handleC(value,result,index);break;case 'D':index=handleD(value,result,index);break;case 'F':result.append('F');index=charAt(value,index + 1) == 'F' ? index + 2 : index + 1;break;case 'G':index=handleG(value,result,index,slavoGermanic);break;case 'H':index=handleH(value,result,index);break;case 'J':index=handleJ(value,result,index,slavoGermanic);break;case 'K':result.append('K');index=charAt(value,index + 1) == 'K' ? index + 2 : index + 1;break;case 'L':index=handleL(value,result,index);break;case 'M':result.append('M');index=conditionM0(value,index) ? index + 2 : index + 1;break;case 'N':result.append('N');index=charAt(value,index + 1) == 'N' ? index + 2 : index + 1;break;case '\u00D1':result.append('N');index++;break;case 'P':index=handleP(value,result,index);break;case 'Q':result.append('K');index=charAt(value,index + 1) == 'Q' ? index + 2 : index + 1;break;case 'R':index=handleR(value,result,index,slavoGermanic);break;case 'S':index=handleS(value,result,index,slavoGermanic);break;case 'T':index=handleT(value,result,index);break;case 'V':result.append('F');index=charAt(value,index + 1) == 'V' ? index + 2 : index + 1;break;case 'W':index=handleW(value,result,index);break;case 'X':index=handleX(value,result,index);break;case 'Z':index=handleZ(value,result,index,slavoGermanic);break;default :index++;break;}}return alternate ? result.getAlternate() : result.getPrimary();}  }
class C{  private void handlePreflightFlow(final HttpServletRequest req,final HttpServletResponse res){  final String originHeader=req.getHeader(CORSConstants.ORIGIN);  if (!isPreflightValid(req)) {    return;  }  res.setHeader(CORSConstants.AC_ALLOW_METHODS,csvHelper.listToCSVString(acceptedMethods));  if (acceptedHeaders.size() > 0) {    res.setHeader(CORSConstants.AC_ALLOW_HEADERS,csvHelper.listToCSVString(acceptedHeaders));  }  if (maxAge > 0) {    res.setIntHeader(CORSConstants.AC_MAX_AGE,maxAge);  }  addOriginAndCredsHeaders(res,originHeader);}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    if (pos != count) {      return str.charAt(pos++);    }    return -1;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.SubjectType createSubjectType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.SubjectTypeImpl();}  }
class C{  void removePolicyFromResourceTree(ServiceTypeManager svtm,SSOToken token,Policy policy) throws PolicyException, SSOException {  Set ruleNames=policy.getRuleNames();  Iterator iter=ruleNames.iterator();  String ruleName=null;  Rule rule=null;  Set serviceNames=new HashSet();  while (iter.hasNext()) {    ruleName=(String)iter.next();    rule=policy.getRule(ruleName);    String serviceName=rule.getServiceTypeName();    serviceNames.add(serviceName);    ServiceType resourceType=svtm.getServiceType(serviceName);    removeIndexEntry(resourceType,rule.getResourceName(),policy.getName());  }  iter=serviceNames.iterator();  while (iter.hasNext()) {    String serviceName=(String)iter.next();    saveResourceIndex(serviceName);  }  Referrals referrals=policy.getReferrals();  if (referrals != null) {    Set referralNames=referrals.getReferralNames();    if ((referralNames != null) && (!referralNames.isEmpty())) {      Iterator referralIter=referralNames.iterator();      while (referralIter.hasNext()) {        String referralName=(String)referralIter.next();        Referral referral=referrals.getReferral(referralName);        if (referral instanceof OrgReferral) {          Set values=referral.getValues();          if ((values != null) && (!values.isEmpty())) {            Iterator valueIter=values.iterator();            while (valueIter.hasNext()) {              Map servicePrefixMap=new HashMap();              String value=(String)valueIter.next();              try {                PolicyManager pm=new PolicyManager(token,value);                ResourceManager rm=pm.getResourceManager();                Iterator ruleIter=policy.getRuleNames().iterator();                while (ruleIter.hasNext()) {                  String ruleName1=(String)ruleIter.next();                  Rule rule1=policy.getRule(ruleName1);                  String resourceName=rule1.getResourceName();                  if (resourceName != null) {                    String service=rule1.getServiceTypeName();                    Set resourceNames=(Set)servicePrefixMap.get(service);                    if (resourceNames == null) {                      resourceNames=new HashSet();                      servicePrefixMap.put(service,resourceNames);                    }                    resourceNames.add(resourceName);                  }                }                Iterator serviceIter=servicePrefixMap.keySet().iterator();                while (serviceIter.hasNext()) {                  String service=(String)serviceIter.next();                  Set resourceNames=(Set)servicePrefixMap.get(service);                  rm.removeResourcePrefixes(service,resourceNames);                }              } catch (              PolicyException e) {                if (DEBUG.warningEnabled()) {                  DEBUG.warning("Could not clean up resource " + " prefixes in referrred to org :" + value + "-"+ e.getMessage());                }              }            }          }        }      }    }  }}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=zzPushbackPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public CipherParameters generateDerivedParameters(int keySize){  keySize=keySize / 8;  if (keySize > digest.getDigestSize()) {    throw new IllegalArgumentException("Can't generate a derived key " + keySize + " bytes long.");  }  byte[] dKey=generateDerivedKey();  return new KeyParameter(dKey,0,keySize);}  }
class C{  private void stopRefresh(){  stopRefreshNode(rootNode);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrname.class,args);}  }
class C{  public void testCase21(){  byte rBytes[]={0};  BigInteger aNumber=BigInteger.ZERO;  BigInteger bNumber=BigInteger.ZERO;  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public char[] toCharArray(){synchronized (lock) {    char[] result=new char[count];    System.arraycopy(buf,0,result,0,count);    return result;  }}  }
class C{  public double num() throws javax.xml.transform.TransformerException {  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NUM_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  @Override public String[] findSecurityReferences(){  referencesLock.readLock().lock();  try {    String results[]=new String[references.size()];    return references.keySet().toArray(results);  }  finally {    referencesLock.readLock().unlock();  }}  }
class C{  public CoreTokenResource(JSONSerialisation serialisation,CTSPersistentStore store,Debug debug){  this.serialisation=serialisation;  this.store=store;  this.debug=debug;}  }
class C{  private String _cleanSelectorString(String selector){  SearchBuffer sb=SearchBuffer.obtainSearchBuffer();  StringBuffer buff=sb.getStringBuffer();  boolean lastWasSpace=true;  int lastIndex=0;  char[] chars=selector.toCharArray();  int numChars=chars.length;  String retValue=null;  try {    for (int counter=0; counter < numChars; counter++) {switch (chars[counter]) {case ' ':        if (!lastWasSpace) {          lastWasSpace=true;          if (lastIndex < counter) {            buff.append(chars,lastIndex,1 + counter - lastIndex);          }        }      lastIndex=counter + 1;    break;case '\n':case '\r':case '\t':  if (!lastWasSpace) {    lastWasSpace=true;    if (lastIndex < counter) {      buff.append(chars,lastIndex,counter - lastIndex);      buff.append(' ');    }  }lastIndex=counter + 1;break;default :lastWasSpace=false;break;}}if (lastWasSpace && buff.length() > 0) {buff.setLength(buff.length() - 1);} else if (lastIndex < numChars) {buff.append(chars,lastIndex,numChars - lastIndex);}retValue=buff.toString();}  finally {SearchBuffer.releaseSearchBuffer(sb);}return retValue;}  }
class C{  public OverScroller(Context context,Interpolator interpolator){  this(context,interpolator,true);}  }
class C{  @SuppressWarnings({"unchecked"}) private void inheritValues(Values fromParent){  Object[] table=this.table;  for (int i=table.length - 2; i >= 0; i-=2) {    Object k=table[i];    if (k == null || k == TOMBSTONE) {      continue;    }    Reference<InheritableThreadLocal<?>> reference=(Reference<InheritableThreadLocal<?>>)k;    InheritableThreadLocal key=reference.get();    if (key != null) {      table[i + 1]=key.childValue(fromParent.table[i + 1]);    } else {      table[i]=TOMBSTONE;      table[i + 1]=null;      fromParent.table[i]=TOMBSTONE;      fromParent.table[i + 1]=null;      tombstones++;      fromParent.tombstones++;      size--;      fromParent.size--;    }  }}  }
class C{  public static Optional<String> at(final String value,int index){  if (value == null || value.isEmpty()) {    return Optional.empty();  }  int length=value.length();  if (index < 0) {    index=length + index;  }  return (index < length && index >= 0) ? Optional.of(String.valueOf(value.charAt(index))) : Optional.empty();}  }
class C{  public boolean acquireMemory(long size){  return allowOvercommit || reservedMemory.tryAcquire((int)(size / ONE_MEGABYTE));}  }
class C{  protected boolean isFile(Object value){  return value != null && (value instanceof File || value instanceof byte[]);}  }
class C{  public boolean isFinished(){  return mScroller.isFinished();}  }
class C{  public static Foo fetchByPrimaryKey(long fooId){  return getPersistence().fetchByPrimaryKey(fooId);}  }
class C{  public void reset(){  gsStack.removeAllElements();  gsStack.push(new ParserGraphicsState());  textMatrix=null;  textLineMatrix=null;  resourcesStack=new Stack<>();  isClip=false;  currentPath=new Path();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodereplacechildnomodificationallowederrEE.class,args);}  }
class C{  public static BooleanArgument restartArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_RESTART).shortIdentifier('R').description(INFO_DESCRIPTION_RESTART.get()).buildArgument();}  }
class C{  public ChannelBinding(InetAddress initAddr,InetAddress acceptAddr,byte[] appData){  initiator=initAddr;  acceptor=acceptAddr;  if (appData != null) {    this.appData=new byte[appData.length];    java.lang.System.arraycopy(appData,0,this.appData,0,appData.length);  }}  }
class C{  private void validate() throws InvalidDebugConfigurationException {  if (getRotationFileSizeInByte() != -1) {    if (getRotationFileSizeInByte() <= 0) {      throw new InvalidDebugConfigurationException("File size rotation needs to be greater than " + "zero. File size rotation = '" + getRotationFileSizeInByte() + "'",null);    }    if (getDebugSuffix().isEmpty()) {      throw new InvalidDebugConfigurationException("Log size rotation is enabled (File size rotation = " + getRotationFileSizeInByte() + ") but the debug suffix is empty");    }    try {      if (validateSuffix(Calendar.MILLISECOND,1)) {        throw new InvalidDebugConfigurationException("This suffix '" + getDebugSuffix() + "' isn't "+ "compatible with the file size rotation enable.");      }    } catch (    IllegalArgumentException e) {      throw new InvalidDebugConfigurationException("Suffix '" + getDebugSuffix() + "' can't be parsed.");    }  }  if (getRotationInterval() != -1) {    if (getRotationInterval() <= 0) {      throw new InvalidDebugConfigurationException("Rotation interval needs to be greater than zero. " + "rotationInterval = '" + rotationInterval + "'",null);    }    if (getDebugSuffix().isEmpty()) {      throw new InvalidDebugConfigurationException("Log time rotation is enabled (rotation interval = " + getRotationInterval() + ") but the debug suffix is empty");    }    try {      if (validateSuffix(Calendar.MINUTE,getRotationInterval())) {        throw new InvalidDebugConfigurationException("Suffix '" + getDebugSuffix() + "' isn't compatible"+ " with the rotation interval requested '"+ getRotationInterval()+ "'.");      }    } catch (    IllegalArgumentException e) {      throw new InvalidDebugConfigurationException("Suffix '" + getDebugSuffix() + "' can't be parsed.");    }  }}  }
class C{  public Name addAll(int posn,List<Rdn> suffixRdns){  unparsed=null;  for (int i=0; i < suffixRdns.size(); i++) {    Object obj=suffixRdns.get(i);    if (!(obj instanceof Rdn)) {      throw new IllegalArgumentException("Entry:" + obj + "  not a valid type;suffix list entries must be of type Rdn");    }    rdns.add(i + posn,(Rdn)obj);  }  return this;}  }
class C{  private void jmxSet(String dn,String attributeName,Object value,MBeanServerConnection mbsc) throws Exception {  String jmxName=JMXMBean.getJmxName(DN.valueOf(dn));  ObjectName name=ObjectName.getInstance(jmxName);  Attribute attr=new Attribute(attributeName,value);  mbsc.setAttribute(name,attr);}  }
class C{  protected void notifyWaitingThread(RouteSpecificPool rospl){  WaitingThread waitingThread=null;  poolLock.lock();  try {    if ((rospl != null) && rospl.hasThread()) {      if (log.isDebugEnabled()) {        log.debug("Notifying thread waiting on pool" + " [" + rospl.getRoute() + "]");      }      waitingThread=rospl.nextThread();    } else     if (!waitingThreads.isEmpty()) {      if (log.isDebugEnabled()) {        log.debug("Notifying thread waiting on any pool");      }      waitingThread=waitingThreads.remove();    } else     if (log.isDebugEnabled()) {      log.debug("Notifying no-one, there are no waiting threads");    }    if (waitingThread != null) {      waitingThread.wakeup();    }  }  finally {    poolLock.unlock();  }}  }
class C{  private void cleanupAfterEditing(){  if (editingComponent != null) {    editingContainer.remove(editingComponent);  }  editingComponent=null;}  }
class C{  protected void copy(WebResource resource,ServletOutputStream ostream,Iterator<Range> ranges,String contentType) throws IOException {  IOException exception=null;  while ((exception == null) && (ranges.hasNext())) {    InputStream resourceInputStream=resource.getInputStream();    try (InputStream istream=new BufferedInputStream(resourceInputStream,input)){      Range currentRange=ranges.next();      ostream.println();      ostream.println("--" + mimeSeparation);      if (contentType != null)       ostream.println("Content-Type: " + contentType);      ostream.println("Content-Range: bytes " + currentRange.start + "-"+ currentRange.end+ "/"+ currentRange.length);      ostream.println();      exception=copyRange(istream,ostream,currentRange.start,currentRange.end);    }   }  ostream.println();  ostream.print("--" + mimeSeparation + "--");  if (exception != null)   throw exception;}  }
class C{  public void addAppender(Appender appender){  this.logger.addAppender(appender);}  }
class C{  void removeEntry(IndexBuffer buffer,EntryID entryID,Entry entry) throws StorageRuntimeException, DirectoryException {  for (  MatchingRuleIndex index : indexIdToIndexes.values()) {    for (    ByteString key : index.indexEntry(entry)) {      buffer.remove(index,key,entryID);    }  }}  }
class C{  public void writeExif(Bitmap bmap,OutputStream exifOutStream) throws IOException {  if (bmap == null || exifOutStream == null) {    throw new IllegalArgumentException(NULL_ARGUMENT_STRING);  }  OutputStream s=getExifWriterStream(exifOutStream);  bmap.compress(Bitmap.CompressFormat.JPEG,90,s);  s.flush();}  }
class C{  public SplittableRandom(long seed){  this(seed,GOLDEN_GAMMA);}  }
class C{  private void stopScan(){  if (mIsScanning) {    mScanButton.setText(R.string.scanner_action_scan);    final BluetoothLeScannerCompat scanner=BluetoothLeScannerCompat.getScanner();    scanner.stopScan(scanCallback);    mIsScanning=false;  }}  }
class C{  public synchronized void close() throws IOException {  if (in == null)   return;  in.close();  in=null;  buf=null;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  if (rect == null) {    return null;  }  return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height(),false);}  }
class C{  public Scanner(String source){  this(new StringReader(source),WHITESPACE_PATTERN);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_entitiessetnameditem1.class,args);}  }
class C{  public boolean isRunning(){  return false;}  }
class C{  private StartTLSExtendedRequestImpl(){}  }
class C{  public Object remove(int posn) throws InvalidNameException {  return impl.remove(posn);}  }
class C{  private void continueInstallClicked(){  application.forceToDisplay();  getDialog().forceToDisplay();  setCurrentStep(Step.WELCOME);}  }
class C{  public static Foo removeByUUID_G(java.lang.String uuid,long groupId) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().removeByUUID_G(uuid,groupId);}  }
class C{  private void recycleView(View view,int index){  int count=wheel.getViewAdapter().getItemsCount();  if ((index < 0 || index >= count) && !wheel.isCyclic()) {    emptyItems=addView(view,emptyItems);  } else {    while (index < 0) {      index=count + index;    }    index%=count;    items=addView(view,items);  }}  }
class C{  public void test_getLongLjava_lang_ObjectI(){  long[] x={1};  long ret=0;  boolean thrown=false;  try {    ret=Array.getLong(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret);  try {    ret=Array.getLong(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getLong(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getLong(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  static void addPostReadResponse(final Operation operation,final LDAPPostReadRequestControl postReadRequest,final Entry entry){  if (postReadRequest == null) {    return;  }  final Entry fullEntry=entry.duplicate(true);  final SearchResultEntry unfilteredSearchEntry=new SearchResultEntry(fullEntry,null);  if (getAccessControlHandler().maySend(operation,unfilteredSearchEntry)) {    final Entry filteredEntry=fullEntry.filterEntry(postReadRequest.getRequestedAttributes(),false,false,false);    final SearchResultEntry filteredSearchEntry=new SearchResultEntry(filteredEntry,null);    getAccessControlHandler().filterEntry(operation,unfilteredSearchEntry,filteredSearchEntry);    operation.addResponseControl(new LDAPPostReadResponseControl(filteredSearchEntry));  }}  }
class C{  public void paintToolBarDragWindowBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintToolBarDragWindowBackground(context,g,x,y,w,h);}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  public int hashCode(){  return subjectValues.hashCode();}  }
class C{  public final boolean peek(){  return m_values[m_index];}  }
class C{  public UnsupportedAudioFileException(String message){  super(message);}  }
class C{  public void printStackTrace(PrintStream pstream){  printStackTrace(new PrintWriter(pstream,true));}  }
class C{  public AndQueryExp(QueryExp q1,QueryExp q2){  exp1=q1;  exp2=q2;}  }
class C{  public ConnectException(String msg){  super(msg);}  }
class C{  public SerializablePermission(String name){  super(name);}  }
class C{  public void putDocumentInCache(int n,Source source){  int cachedNode=getNode(source);  if (DTM.NULL != cachedNode) {    if (!(cachedNode == n))     throw new RuntimeException("Programmer's Error!  " + "putDocumentInCache found reparse of doc: " + source.getSystemId());    return;  }  if (null != source.getSystemId()) {    m_sourceTree.addElement(new SourceTree(n,source.getSystemId()));  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList emList;  Node emNode;  CharacterData emText;  Node nullChild;  doc=(Document)load("hc_staff",false);  emList=doc.getElementsByTagName("em");  emNode=emList.item(0);  emText=(CharacterData)emNode.getFirstChild();  nullChild=emText.getLastChild();  assertNull("nullChild",nullChild);}  }
class C{  protected Chromaticity(int value){  super(value);}  }
class C{  protected synchronized void remove(PrintWriter writer,String name,StringManager smClient){  if (debug >= 1) {    log(sm.getString("hostManagerServlet.remove",name));  }  if ((name == null) || name.length() == 0) {    writer.println(smClient.getString("hostManagerServlet.invalidHostName",name));    return;  }  if (engine.findChild(name) == null) {    writer.println(smClient.getString("hostManagerServlet.noHost",name));    return;  }  if (engine.findChild(name) == installedHost) {    writer.println(smClient.getString("hostManagerServlet.cannotRemoveOwnHost",name));    return;  }  try {    Container child=engine.findChild(name);    engine.removeChild(child);    if (child instanceof ContainerBase)     ((ContainerBase)child).destroy();  } catch (  Exception e) {    writer.println(smClient.getString("hostManagerServlet.exception",e.toString()));    return;  }  Host host=(StandardHost)engine.findChild(name);  if (host == null) {    writer.println(smClient.getString("hostManagerServlet.remove",name));  } else {    writer.println(smClient.getString("hostManagerServlet.removeFailed",name));  }}  }
class C{  public boolean isCellEditable(int row,int column){  return true;}  }
class C{  public Object newTransport(HttpEngine httpEngine) throws IOException {  return (spdyConnection != null) ? new SpdyTransport(httpEngine,spdyConnection) : new HttpTransport(httpEngine,out,in);}  }
class C{  public static Object processResponse(HttpServletRequest request,HttpServletResponse response,PrintWriter out,String metaAlias,Object session,ResponseInfo respInfo,String realm,String hostEntityId,SAML2MetaManager metaManager,SAML2EventLogger auditor) throws SAML2Exception {  String classMethod="SPACSUtils.processResponse: ";  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "Response : " + respInfo.getResponse());  }  Map smap=null;  try {    smap=SAML2Utils.verifyResponse(request,response,respInfo.getResponse(),realm,hostEntityId,respInfo.getProfileBinding());  } catch (  SAML2Exception se) {    invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.INVALID_RESPONSE,se);    throw se;  }  com.sun.identity.saml2.assertion.Subject assertionSubject=(com.sun.identity.saml2.assertion.Subject)smap.get(SAML2Constants.SUBJECT);  NameID nameId=assertionSubject.getNameID();  EncryptedID encId=assertionSubject.getEncryptedID();  Assertion authnAssertion=(Assertion)smap.get(SAML2Constants.POST_ASSERTION);  String sessionIndex=(String)smap.get(SAML2Constants.SESSION_INDEX);  respInfo.setSessionIndex(sessionIndex);  Integer authLevel=(Integer)smap.get(SAML2Constants.AUTH_LEVEL);  Long maxSessionTime=(Long)smap.get(SAML2Constants.MAX_SESSION_TIME);  String inRespToResp=(String)smap.get(SAML2Constants.IN_RESPONSE_TO);  List assertions=(List)smap.get(SAML2Constants.ASSERTIONS);  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "Assertions : " + assertions);  }  SPSSOConfigElement spssoconfig=metaManager.getSPSSOConfig(realm,hostEntityId);  SPAccountMapper acctMapper=SAML2Utils.getSPAccountMapper(realm,hostEntityId);  SPAttributeMapper attrMapper=SAML2Utils.getSPAttributeMapper(realm,hostEntityId);  boolean needAssertionEncrypted=Boolean.parseBoolean(SAML2Utils.getAttributeValueFromSPSSOConfig(spssoconfig,SAML2Constants.WANT_ASSERTION_ENCRYPTED));  boolean needAttributeEncrypted=getNeedAttributeEncrypted(needAssertionEncrypted,spssoconfig);  boolean needNameIDEncrypted=getNeedNameIDEncrypted(needAssertionEncrypted,spssoconfig);  Set<PrivateKey> decryptionKeys=KeyUtil.getDecryptionKeys(spssoconfig);  if (needNameIDEncrypted && encId == null) {    SAML2Utils.debug.error(classMethod + "process: NameID was not encrypted.");    SAML2Exception se=new SAML2Exception(SAML2Utils.bundle.getString("nameIDNotEncrypted"));    invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.INVALID_RESPONSE,se);    throw se;  }  if (encId != null) {    try {      nameId=encId.decrypt(decryptionKeys);    } catch (    SAML2Exception se) {      invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.INVALID_RESPONSE,se);      throw se;    }  }  respInfo.setNameId(nameId);  SPSSODescriptorElement spDesc=null;  try {    spDesc=metaManager.getSPSSODescriptor(realm,hostEntityId);  } catch (  SAML2MetaException ex) {    SAML2Utils.debug.error(classMethod,ex);  }  if (spDesc == null) {    SAML2Exception se=new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));    invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.SSO_FAILED_META_DATA_ERROR,se);    throw se;  }  String nameIDFormat=nameId.getFormat();  if (nameIDFormat != null) {    List spNameIDFormatList=spDesc.getNameIDFormat();    if ((spNameIDFormatList != null) && (!spNameIDFormatList.isEmpty()) && (!spNameIDFormatList.contains(nameIDFormat))) {      Object[] args={nameIDFormat};      SAML2Exception se=new SAML2Exception(SAML2Utils.BUNDLE_NAME,"unsupportedNameIDFormatSP",args);      invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.INVALID_RESPONSE,se);      throw se;    }  }  boolean isTransient=SAML2Constants.NAMEID_TRANSIENT_FORMAT.equals(nameIDFormat);  boolean ignoreProfile=SAML2PluginsUtils.isIgnoredProfile(realm);  String existUserName=null;  SessionProvider sessionProvider=null;  try {    sessionProvider=SessionManager.getProvider();  } catch (  SessionException se) {    SAML2Exception se2=new SAML2Exception(se);    invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.SSO_FAILED_SESSION_ERROR,se2);    throw se2;  }  if (session != null) {    try {      existUserName=sessionProvider.getPrincipalName(session);    } catch (    SessionException se) {      SAML2Exception se2=new SAML2Exception(se);      invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.SSO_FAILED_SESSION_ERROR,se2);      throw se2;    }  }  String remoteHostId=authnAssertion.getIssuer().getValue();  String userName=null;  boolean isNewAccountLink=false;  boolean shouldPersistNameID=!isTransient && !ignoreProfile && acctMapper.shouldPersistNameIDFormat(realm,hostEntityId,remoteHostId,nameIDFormat);  try {    if (shouldPersistNameID) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + "querying data store for existing federation links: realm = " + realm+ " hostEntityID = "+ hostEntityId+ " remoteEntityID = "+ remoteHostId);      }      try {        userName=SAML2Utils.getDataStoreProvider().getUserID(realm,SAML2Utils.getNameIDKeyMap(nameId,hostEntityId,remoteHostId,realm,SAML2Constants.SP_ROLE));      } catch (      DataStoreProviderException dse) {        SAML2Utils.debug.error(classMethod + "DataStoreProviderException whilst retrieving NameID " + "information",dse);        throw new SAML2Exception(dse.getMessage());      }    }    if (userName == null) {      userName=acctMapper.getIdentity(authnAssertion,hostEntityId,realm);      isNewAccountLink=true;    }  } catch (  SAML2Exception se) {    invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.SSO_FAILED_NO_USER_MAPPING,se);    throw se;  }  if (userName == null && respInfo.isLocalLogin()) {    userName=existUserName;  }  if (null != auditor) {    auditor.setUserId(userName);  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "process: userName =[" + userName+ "]");  }  List attrs=null;  for (Iterator it=assertions.iterator(); it.hasNext(); ) {    Assertion assertion=(Assertion)it.next();    List origAttrs=getSAMLAttributes(assertion,needAttributeEncrypted,decryptionKeys);    if (origAttrs != null && !origAttrs.isEmpty()) {      if (attrs == null) {        attrs=new ArrayList();      }      attrs.addAll(origAttrs);    }  }  Map attrMap=null;  if (attrs != null) {    try {      attrMap=attrMapper.getAttributes(attrs,userName,hostEntityId,remoteHostId,realm);    } catch (    SAML2Exception se) {      invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.SSO_FAILED_ATTRIBUTE_MAPPING,se);      throw se;    }  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "process: remoteHostId = " + remoteHostId);    SAML2Utils.debug.message(classMethod + "process: attrMap = " + attrMap);  }  respInfo.setAttributeMap(attrMap);  if (StringUtils.isEmpty(userName)) {    if (session != null) {      try {        sessionProvider.invalidateSession(session,request,response);      } catch (      SessionException se) {        SAML2Utils.debug.error("An error occurred while trying to invalidate session",se);      }    }    throw new SAML2Exception(SAML2Utils.bundle.getString("noUserMapping"));  }  boolean writeFedInfo=isNewAccountLink && shouldPersistNameID;  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "userName : " + userName);    SAML2Utils.debug.message(classMethod + "writeFedInfo : " + writeFedInfo);  }  AuthnRequest authnRequest=null;  if (smap != null) {    authnRequest=(AuthnRequest)smap.get(SAML2Constants.AUTHN_REQUEST);  }  if (inRespToResp != null && inRespToResp.length() != 0) {    SPCache.requestHash.remove(inRespToResp);  }  Map sessionInfoMap=new HashMap();  sessionInfoMap.put(SessionProvider.REALM,realm);  sessionInfoMap.put(SessionProvider.PRINCIPAL_NAME,userName);  String clientAddr=ClientUtils.getClientIPAddress(request);  sessionInfoMap.put(SessionProvider.HOST,clientAddr);  sessionInfoMap.put(SessionProvider.HOST_NAME,clientAddr);  sessionInfoMap.put(SessionProvider.AUTH_LEVEL,String.valueOf(authLevel));  request.setAttribute(SessionProvider.ATTR_MAP,attrMap);  try {    session=sessionProvider.createSession(sessionInfoMap,request,response,null);  } catch (  SessionException se) {    int failureCode=SAML2ServiceProviderAdapter.SSO_FAILED_SESSION_GENERATION;    int sessCode=se.getErrCode();    if (sessCode == SessionException.AUTH_USER_INACTIVE) {      failureCode=SAML2ServiceProviderAdapter.SSO_FAILED_AUTH_USER_INACTIVE;    } else     if (sessCode == SessionException.AUTH_USER_LOCKED) {      failureCode=SAML2ServiceProviderAdapter.SSO_FAILED_AUTH_USER_LOCKED;    } else     if (sessCode == SessionException.AUTH_ACCOUNT_EXPIRED) {      failureCode=SAML2ServiceProviderAdapter.SSO_FAILED_AUTH_ACCOUNT_EXPIRED;    }    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("SPACSUtils.processResponse : error code=" + sessCode,se);    }    SAML2Exception se2=new SAML2Exception(se);    invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,failureCode,se2);    throw se2;  }  String[] values={metaAlias};  try {    setAttrMapInSession(sessionProvider,attrMap,session);    setDiscoBootstrapCredsInSSOToken(sessionProvider,authnAssertion,session);    sessionProvider.setProperty(session,SAML2Constants.SP_METAALIAS,values);  } catch (  SessionException se) {    SAML2Exception se2=new SAML2Exception(se);    invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.SSO_FAILED_SESSION_ERROR,se2);    throw se2;  }  NameIDInfo info=null;  String affiID=nameId.getSPNameQualifier();  boolean isDualRole=SAML2Utils.isDualRole(hostEntityId,realm);  AffiliationDescriptorType affiDesc=null;  if (affiID != null && !affiID.isEmpty()) {    affiDesc=metaManager.getAffiliationDescriptor(realm,affiID);  }  if (affiDesc != null) {    if (!affiDesc.getAffiliateMember().contains(hostEntityId)) {      throw new SAML2Exception(SAML2Utils.bundle.getString("spNotAffiliationMember"));    }    if (isDualRole) {      info=new NameIDInfo(affiID,remoteHostId,nameId,SAML2Constants.DUAL_ROLE,true);    } else {      info=new NameIDInfo(affiID,remoteHostId,nameId,SAML2Constants.SP_ROLE,true);    }  } else {    if (isDualRole) {      info=new NameIDInfo(hostEntityId,remoteHostId,nameId,SAML2Constants.DUAL_ROLE,false);    } else {      info=new NameIDInfo(hostEntityId,remoteHostId,nameId,SAML2Constants.SP_ROLE,false);    }  }  Map props=new HashMap();  String nameIDValueString=info.getNameIDValue();  props.put(LogUtil.NAME_ID,info.getNameIDValue());  try {    userName=sessionProvider.getPrincipalName(session);  } catch (  SessionException se) {    SAML2Exception se2=new SAML2Exception(se);    invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.SSO_FAILED_SESSION_ERROR,se2);    throw se2;  }  String[] data1={userName,nameIDValueString};  LogUtil.access(Level.INFO,LogUtil.SUCCESS_FED_SSO,data1,session,props);  if (writeFedInfo) {    try {      AccountUtils.setAccountFederation(info,userName);    } catch (    SAML2Exception se) {      invokeSPAdapterForSSOFailure(hostEntityId,realm,request,response,smap,respInfo,SAML2ServiceProviderAdapter.FEDERATION_FAILED_WRITING_ACCOUNT_INFO,se);      throw se;    }    String[] data={userName,""};    if (LogUtil.isAccessLoggable(Level.FINE)) {      data[1]=info.toValueString();    }    LogUtil.access(Level.INFO,LogUtil.FED_INFO_WRITTEN,data,session,props);  }  String requestID=respInfo.getResponse().getInResponseTo();  saveInfoInMemory(sessionProvider,session,sessionIndex,metaAlias,info,IDPProxyUtil.isIDPProxyEnabled(requestID),isTransient);  SAML2ServiceProviderAdapter spAdapter=SAML2Utils.getSPAdapterClass(hostEntityId,realm);  if (spAdapter != null) {    boolean redirected=spAdapter.postSingleSignOnSuccess(hostEntityId,realm,request,response,out,session,authnRequest,respInfo.getResponse(),respInfo.getProfileBinding(),writeFedInfo);    String[] value=null;    if (redirected) {      value=new String[]{"true"};    } else {      value=new String[]{"false"};    }    try {      sessionProvider.setProperty(session,SAML2Constants.RESPONSE_REDIRECTED,value);    } catch (    SessionException ex) {      SAML2Utils.debug.warning("SPSingleLogout.processResp",ex);    }catch (    UnsupportedOperationException ex) {      SAML2Utils.debug.warning("SPSingleLogout.processResp",ex);    }  }  String assertionID=authnAssertion.getID();  if (respInfo.getProfileBinding().equals(SAML2Constants.HTTP_POST)) {    SPCache.assertionByIDCache.put(assertionID,SAML2Constants.ONETIME);    try {      if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {        SAML2FailoverUtils.saveSAML2TokenWithoutSecondaryKey(assertionID,SAML2Constants.ONETIME,((Long)smap.get(SAML2Constants.NOTONORAFTER)).longValue() / 1000);      }    } catch (    SAML2TokenRepositoryException se) {      SAML2Utils.debug.error(classMethod + "There was a problem saving the assertionID to the SAML2 Token Repository for assertionID:" + assertionID,se);    }  }  respInfo.setAssertion(authnAssertion);  return session;}  }
class C{  public PdfCanvas(PdfFormXObject xObj,PdfDocument document){  this(xObj.getPdfObject(),xObj.getResources(),document);}  }
class C{  public Object eval(String script) throws ScriptException {  return eval(script,context);}  }
class C{  public PdfImageXObject copyTo(PdfDocument document){  PdfImageXObject image=new PdfImageXObject(getPdfObject().copyTo(document));  image.width=width;  image.height=height;  image.mask=mask;  image.softMask=softMask;  return image;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LSNElement createLSNElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LSNElementImpl();}  }
class C{  public void addSelectionRows(int[] rows){  TreeUI ui=getUI();  if (ui != null && rows != null) {    int numRows=rows.length;    TreePath[] paths=new TreePath[numRows];    for (int counter=0; counter < numRows; counter++)     paths[counter]=ui.getPathForRow(this,rows[counter]);    addSelectionPaths(paths);  }}  }
class C{  public void remove(int position) throws IndexOutOfBoundsException {synchronized (lock) {    items.remove(position);  }  itemPositionChangeChecked=new SparseBooleanArray(items.size());  notifyDataSetChanged();}  }
class C{  public static AssertionRequestControl newControl(final boolean isCritical,final Filter filter){  return new AssertionRequestControl(isCritical,filter);}  }
class C{  public void printin(){  writer.print(SPACES.substring(0,indent));}  }
class C{  public void removeAssignableDynamicGroup(AMAssignableDynamicGroup assignableDynamicGroup) throws AMException, SSOException {  removeAssignableDynamicGroup(assignableDynamicGroup.getDN());}  }
class C{  public ServletRegistration.Dynamic dynamicServletAdded(Wrapper wrapper){  Servlet s=wrapper.getServlet();  if (s != null && createdServlets.contains(s)) {    wrapper.setServletSecurityAnnotationScanRequired(true);  }  return new ApplicationServletRegistration(wrapper,this);}  }
class C{  public void testDoubleValuePosInfinity(){  String a="123809648392384754573567356745735.63567890295784902768787678287E+400";  BigDecimal aNumber=new BigDecimal(a);  double result=Double.POSITIVE_INFINITY;  assertEquals("incorrect value",result,aNumber.doubleValue(),0);}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @Override public V put(K key,V value){  if (key == null) {    return putValueForNullKey(value);  }  int hash=secondaryHash(key);  HashMapEntry<K,V>[] tab=table;  int index=hash & (tab.length - 1);  for (HashMapEntry<K,V> e=tab[index]; e != null; e=e.next) {    if (e.hash == hash && key.equals(e.key)) {      preModify(e);      V oldValue=e.value;      e.value=value;      return oldValue;    }  }  modCount++;  if (size++ > threshold) {    tab=doubleCapacity();    index=hash & (tab.length - 1);  }  addNewEntry(key,value,hash,index);  return null;}  }
class C{  private void clampPositionToBottomStackStart(StackScrollState.ViewState childViewState,int childHeight){  childViewState.yTranslation=Math.min(childViewState.yTranslation,mInnerHeight - mBottomStackPeekSize - mCollapseSecondCardPadding- childHeight);}  }
class C{  public SQLTransactionRollbackException(String reason,String sqlState,Throwable cause){  super(reason,sqlState,cause);}  }
class C{  @Override public void addContainerListener(ContainerListener listener){  listeners.add(listener);}  }
class C{  protected void parseDOMAttributes(Element element) throws SAML2Exception {  super.parseDOMAttributes(element);}  }
class C{  @Deprecated protected void drawTextAppearance(Rectangle rect,PdfFont font,int fontSize,String value,PdfFormXObject appearance){  drawTextAppearance(rect,font,(float)fontSize,value,appearance);}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  private void readClassInfo() throws IOException, ClassFormatException {  access_flags=dataInputStream.readUnsignedShort();  if ((access_flags & Const.ACC_INTERFACE) != 0) {    access_flags|=Const.ACC_ABSTRACT;  }  if (((access_flags & Const.ACC_ABSTRACT) != 0) && ((access_flags & Const.ACC_FINAL) != 0)) {    throw new ClassFormatException("Class can't be both final and abstract");  }  int class_name_index=dataInputStream.readUnsignedShort();  class_name=Utility.getClassName(constant_pool,class_name_index);  int superclass_name_index=dataInputStream.readUnsignedShort();  if (superclass_name_index > 0) {    superclass_name=Utility.getClassName(constant_pool,superclass_name_index);  } else {    superclass_name="java.lang.Object";  }}  }
class C{  public void test_parkUntil_2() throws Exception {  CyclicBarrier barrier=new CyclicBarrier(2);  Parker parker=new Parker(barrier,true,1000);  Thread parkerThread=new Thread(parker);  Thread waiterThread=new Thread(new WaitAndUnpark(barrier,300,parkerThread));  parkerThread.start();  waiterThread.start();  parker.assertDurationIsInRange(300);  waiterThread.join();  parkerThread.join();}  }
class C{  public static <E extends Exception>void throwFirstFrom(List<? extends E> exceptions) throws E {  if (!exceptions.isEmpty()) {    throw exceptions.get(0);  }}  }
class C{  public boolean isAllUserAttributes(){  return allUserAttributes;}  }
class C{  public static boolean runSuCommand(String command){  if (!isRooted()) {    return false;  }  Process proc=null;  OutputStreamWriter osw=null;  try {    proc=new ProcessBuilder("su").redirectErrorStream(true).start();    osw=new OutputStreamWriter(proc.getOutputStream(),"UTF-8");    osw.write(command);    osw.flush();    osw.close();  } catch (  IOException ex) {    Debug.log(ex);  } finally {    if (osw != null) {      try {        osw.close();      } catch (      IOException e) {        Debug.log(e);      }    }  }  try {    if (proc != null) {      proc.waitFor();      proc.destroy();    } else {      return false;    }  } catch (  InterruptedException e) {    Debug.log(e);    return false;  }  return proc.exitValue() == 0;}  }
class C{  protected boolean right(TextView widget,Spannable buffer){  return false;}  }
class C{  private void addFonts(char[] chars,Map<? extends Attribute,?> attributes,int start,int limit){  FontResolver resolver=FontResolver.getInstance();  CodePointIterator iter=CodePointIterator.create(chars,start,limit);  for (int runStart=iter.charIndex(); runStart < limit; runStart=iter.charIndex()) {    int fontIndex=resolver.nextFontRunIndex(iter);    addFont(resolver.getFont(fontIndex,attributes),runStart);  }}  }
class C{  public ChangelogException(LocalizableMessage message){  super(message);}  }
class C{  protected String jmxInvoke(MBeanServerConnection jmxServerConnection,String name) throws Exception {  Object result;  if (args == null) {    result=jmxServerConnection.invoke(new ObjectName(name),operation,null,null);  } else {    Object argsA[]=new Object[args.size()];    String sigA[]=new String[args.size()];    for (int i=0; i < args.size(); i++) {      Arg arg=args.get(i);      if (arg.getType() == null) {        arg.setType("java.lang.String");        sigA[i]=arg.getType();        argsA[i]=arg.getValue();      } else {        sigA[i]=arg.getType();        argsA[i]=convertStringToType(arg.getValue(),arg.getType());      }    }    result=jmxServerConnection.invoke(new ObjectName(name),operation,argsA,sigA);  }  if (result != null) {    echoResult(operation,result);    createProperty(result);  }  return null;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(attrspecifiedvaluechanged.class,args);}  }
class C{  public boolean hasReceiverTypeDispatch(){  return MethodHandleNatives.refKindDoesDispatch(getReferenceKind());}  }
class C{  @SuppressWarnings("unused") public static CallSite bootstrapCallFunctionalObject(MethodHandles.Lookup lookup,String methodName,MethodType methodType){  MethodHandle mh=MethodHandles.insertArguments(callFunctionalObject,1,lookup.lookupClass());  mh=mh.asCollector(Object[].class,methodType.parameterCount() - 1).asType(methodType);  MutableCallSite mCallSite=new MutableCallSite(mh);  mCallSite.setTarget(mh);  return mCallSite;}  }
class C{  public PipedWriter(PipedReader snk) throws IOException {  connect(snk);}  }
class C{  public ServerEditAdvancedViewBean(){  super("ServerEditAdvanced");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  execute("/serverinfo");}  }
class C{  @Override public void onRender(){  if (error) {    addModel("error",true);  } else {    addModel("currentVersion",VersionUtils.getCurrentVersion());    addModel("newVersion",VersionUtils.getWarFileVersion());    addModel("changelist",upgrade.generateShortUpgradeReport(adminToken,true));  }}  }
class C{  public static boolean evaluate(Entry e,DN clientDN,AttributeType attrType){  List<Attribute> attrs=e.getAllAttributes(attrType);  for (  ByteString v : attrs.get(0)) {    try {      DN dn=DN.valueOf(v.toString());      if (dn.equals(clientDN)) {        return true;      }    } catch (    LocalizedIllegalArgumentException ignored) {      break;    }  }  return false;}  }
class C{  public void startEntity(String name) throws SAXException {  m_handler.startEntity(name);}  }
class C{  @Override public void recycle(){}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public void handleTblSupportedContainerButtonAddRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    WSPPServiceSupportedContainerAddViewBean vb=(WSPPServiceSupportedContainerAddViewBean)getViewBean(WSPPServiceSupportedContainerAddViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());    forwardTo();  }}  }
class C{  public ArrayDeque(int numElements){  allocateElements(numElements);}  }
class C{  public boolean isOverrideAllowed(){  return overrideAllowed;}  }
class C{  private static void simulateOpenAMResponse(final String username,final String password,final Response response) throws IOException {  String message;  if (credentialsAreValid(username,password)) {    message="Welcome, " + username + "!"+ EOL;    Cookie cookie=new Cookie(IPLANET_DIRECTORY_PRO_COOKIE,username + ":" + password);    cookie.setPath("/");    response.addCookie(cookie);    response.setStatus(200,"OK");  } else {    String user=isNullOrEmpty(username) ? "" : username + ", ";    message="Too bad, " + user + "you failed to authenticate."+ EOL;    response.setStatus(403,"Forbidden");  }  response.setContentType("text/plain");  response.setContentLength(message.length());  response.getWriter().write(message);}  }
class C{  public MockConstraint(boolean allowAdds,boolean allowModifies,boolean allowDeletes){  this.allowAdds=allowAdds;  this.allowModifies=allowModifies;  this.allowDeletes=allowDeletes;}  }
class C{  public static WindowListener add(WindowListener a,WindowListener b){  return (WindowListener)addInternal(a,b);}  }
class C{  public static boolean isVolatile(int mod){  return (mod & ACC_VOLATILE) != 0;}  }
class C{  public void removeNotify(){  JRootPane root=SwingUtilities.getRootPane(this);  if (root != null && root.getDefaultButton() == this) {    root.setDefaultButton(null);  }  super.removeNotify();}  }
class C{  public void unregister(Object provider){  ArrayList<ServiceUnregisterEvent> unregisteredEvents=new ArrayList<ServiceUnregisterEvent>();synchronized (providers) {    Iterator<Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>>> it=providers.entrySet().iterator();    try {      while (it.hasNext()) {        Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>> entry=it.next();        Iterator<RegisteredServiceProvider<?>> it2=entry.getValue().iterator();        try {          while (it2.hasNext()) {            RegisteredServiceProvider<?> registered=it2.next();            if (registered.getProvider().equals(provider)) {              it2.remove();              unregisteredEvents.add(new ServiceUnregisterEvent(registered));            }          }        } catch (        NoSuchElementException e) {        }        if (entry.getValue().size() == 0) {          it.remove();        }      }    } catch (    NoSuchElementException e) {    }  }  for (  ServiceUnregisterEvent event : unregisteredEvents) {    Bukkit.getServer().getPluginManager().callEvent(event);  }}  }
class C{  public static Charset forContentType(String contentType,Charset defaultCharset){  try {    if (!StringUtils.isEmpty(contentType)) {      String[] parts=StringUtils.split(contentType,';');      for (      String t1 : parts) {        String t=t1.trim();        int index=t.toLowerCase().indexOf("charset=");        if (index != -1) {          String charset=t.substring(index + 8);          String charset1=StringUtils.split(charset,",;")[0];          return forName(charset1,defaultCharset);        }      }      return defaultCharset;    }    return defaultCharset;  } catch (  Exception ex) {    log.debug(String.format("Cannot extract charset from %s",contentType),ex);    return defaultCharset;  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RequireClientCertificateElement createRequireClientCertificateElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RequireClientCertificateElementImpl();}  }
class C{  public void release(){  gsStack=null;  currentGs=null;  contentStream=null;  resources=null;}  }
class C{  public void fireEndEntity(String name) throws org.xml.sax.SAXException {  if (m_tracer != null)   flushMyWriter();}  }
class C{  public void putProperty(String key,String value){  internalPutProperty(key,value);}  }
class C{  public void insert_octet(byte value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_octet",_opsClass);  DynFixedOperations $self=(DynFixedOperations)$so.servant;  try {    $self.insert_octet(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private Point translatePointToTabPanel(int srcx,int srcy,Point dest){  Point vpp=tabScroller.viewport.getLocation();  Point viewp=tabScroller.viewport.getViewPosition();  dest.x=srcx - vpp.x + viewp.x;  dest.y=srcy - vpp.y + viewp.y;  return dest;}  }
class C{  protected void logDiagnostic(String msg){  if (isDiagnosticsEnabled()) {    logRawDiagnostic(diagnosticPrefix + msg);  }}  }
class C{  public Builder names(final String... names){  return names(asList(names));}  }
class C{  public void activate(){  if (ACTIVITY_CHECK) {    accessCount=new AtomicInteger();  }  fireSessionEvent(Session.SESSION_ACTIVATED_EVENT,null);  HttpSessionEvent event=null;  String keys[]=keys();  for (int i=0; i < keys.length; i++) {    Object attribute=attributes.get(keys[i]);    if (attribute instanceof HttpSessionActivationListener) {      if (event == null)       event=new HttpSessionEvent(getSession());      try {        ((HttpSessionActivationListener)attribute).sessionDidActivate(event);      } catch (      Throwable t) {        ExceptionUtils.handleThrowable(t);        manager.getContext().getLogger().error(sm.getString("standardSession.attributeEvent"),t);      }    }  }}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    System.out.println("shootme: got an Invite sending Trying");    Response response=messageFactory.createResponse(Response.TRYING,request);    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      st=sipProvider.getNewServerTransaction(request);    }    dialog=st.getDialog();    st.sendResponse(response);    Response sessionProgress=dialog.createReliableProvisionalResponse(Response.SESSION_PROGRESS);    ToHeader toHeader=(ToHeader)sessionProgress.getHeader(ToHeader.NAME);    this.toTag="4321";    toHeader.setTag(toTag);    this.inviteTid=st;    this.inviteRequest=request;    System.out.println("sending reliable provisional response.");    dialog.sendReliableProvisionalResponse(sessionProgress);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public boolean postSSOFederationFailure(String hostedEntityID,HttpServletRequest request,HttpServletResponse response,FSAuthnRequest authnRequest,FSAuthnResponse authnResponse,FSResponse samlResponse,int failureCode){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSDefaultSPAdapter.postFedFailure, " + "process " + hostedEntityID + "\nfailure code="+ failureCode);  }  String baseURL=FSServiceUtils.getBaseURL(request);  String relayState=null;  if (authnRequest != null) {    relayState=authnRequest.getRelayState();  }  String framedLoginPageURL=FSServiceUtils.getCommonLoginPageURL(FSServiceUtils.getMetaAlias(request),relayState,null,request,baseURL);  StringBuffer sb=new StringBuffer();  sb.append(framedLoginPageURL).append("&").append(IFSConstants.FAILURE_CODE).append("=").append(failureCode);  if (failureCode == INVALID_AUTHN_RESPONSE || failureCode == INVALID_RESPONSE) {    Status status=null;    if (failureCode == INVALID_AUTHN_RESPONSE) {      status=authnResponse.getStatus();    } else {      status=samlResponse.getStatus();    }    StatusCode firstLevelStatusCode=status.getStatusCode();    if (firstLevelStatusCode == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSDefaultSPAdapter.postSSO" + "FederationFailure: Status is null");      }      return false;    }    StatusCode secondLevelStatusCode=firstLevelStatusCode.getStatusCode();    if (secondLevelStatusCode == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSDefaultSPAdapter.postSSO" + "FederationFailure: Second level status is empty");      }      return false;    }    String statusValue=URLEncDec.encode(secondLevelStatusCode.getValue());    sb.append("&").append(IFSConstants.STATUS_CODE).append("=").append(statusValue);  }  String redirectURL=sb.toString();  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSDefaultSPAdapter.postSSOFederation" + "Failure. URL to be redirected: " + redirectURL);  }  try {    response.setHeader("Location",redirectURL);    response.sendRedirect(redirectURL);  } catch (  java.io.IOException io) {    FSUtils.debug.error("FSDefaultSPAdapter.postSSOFedFailure",io);    return false;  }  return true;}  }
class C{  public final void init(ManagerFactoryParameters spec) throws InvalidAlgorithmParameterException {  spiImpl.engineInit(spec);}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s8_main_and_branch_with_intermediate_light_tag();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  final V doRemove(Object okey,Object value){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c < 0)       return null;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       return null;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key);        if (head.right == null)         tryReduceLevel();      }      return (V)v;    }  }}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof RADIUSPrincipal)) {    return false;  }  RADIUSPrincipal that=(RADIUSPrincipal)o;  if (this.getName().equals(that.getName())) {    return true;  }  return false;}  }
class C{  public void addItemListener(ItemListener l){  listenerList.add(ItemListener.class,l);}  }
class C{  public void initialize() throws IOException {  cache.initialize();}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    if (isOpen()) {      if (pos != count) {        return str.charAt(pos++);      }      return -1;    }    throw new IOException("StringReader is closed");  }}  }
class C{  private void processLog(){synchronized (logFile) {    try {      if (logFile.length() == 0) {        return;      }      try (BufferedReader reader=new BufferedReader(new FileReader(logFile))){        String line;        while ((line=reader.readLine()) != null) {          try {            String[] a=line.split("[\t]");            DN origDn=DN.valueOf(a[0]);            if (a.length == 1) {              processDelete(Collections.singleton(origDn),false);            } else {              DN movedDN=DN.valueOf(a[1]);              processModifyDN(origDn,movedDN);            }          } catch (          LocalizedIllegalArgumentException e) {            logger.error(ERR_PLUGIN_REFERENT_CANNOT_DECODE_STRING_AS_DN,e.getMessage());          }        }      }       logFile.delete();      logFile.createNewFile();    } catch (    IOException io) {      logger.error(ERR_PLUGIN_REFERENT_REPLACE_LOGFILE,io.getMessage());    }  }}  }
class C{  private String generateAuthId(SecretKey key,Map<String,Object> jwtValues) throws SignatureException, RestAuthException {  String otk=new BigInteger(130,RANDOM).toString(32);  JwtClaimsSet claimsSet=jwtBuilderFactory.claims().claim("otk",otk).claims(jwtValues).build();  final SigningHandler signingHandler=signingManager.newHmacSigningHandler(key.getEncoded());  String jwt=jwtBuilderFactory.jws(signingHandler).headers().alg(JwsAlgorithm.HS256).done().claims(claimsSet).build();  return jwt;}  }
class C{  public void stop(boolean playerDied){  game.setGameOverUI(playerDied);  super.stop();}  }
class C{  public java.lang.Object newInstance(java.lang.Class javaContentInterface) throws javax.xml.bind.JAXBException {  return super.newInstance(javaContentInterface);}  }
class C{  protected void scrollDueToClickInTrack(int dir){  scrollByBlock(dir);}  }
class C{  static void appendLangItem(XMPNode arrayNode,String itemLang,String itemValue) throws XMPException {  XMPNode newItem=new XMPNode(ARRAY_ITEM_NAME,itemValue,null);  XMPNode langQual=new XMPNode(XML_LANG,itemLang,null);  newItem.addQualifier(langQual);  if (!X_DEFAULT.equals(langQual.getValue())) {    arrayNode.addChild(newItem);  } else {    arrayNode.addChild(1,newItem);  }}  }
class C{  public TimeoutEvent extractCollectedTimeoutEvent(){  if (timeoutCollector == null)   throw new TckInternalError("A timeout collect was attempted when the timeoutCollector was null");  TimeoutEvent collectedEvent=timeoutCollector.collectedEvent;  timeoutCollector.provider.removeSipListener(timeoutCollector);  resetCollectors();  return collectedEvent;}  }
class C{  private void linkFirst(E e){  final Node<E> f=first;  final Node<E> newNode=new Node<>(null,e,f);  first=newNode;  if (f == null)   last=newNode; else   f.prev=newNode;  size++;  modCount++;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Attr newAttribute;  Node testAddress;  NamedNodeMap attributes;  Attr districtNode;  String attrValue;  Node setNode;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testAddress=elementList.item(1);  newAttribute=doc.createAttribute("class");  attributes=testAddress.getAttributes();  setNode=attributes.setNamedItem(newAttribute);  districtNode=(Attr)attributes.getNamedItem("class");  attrValue=districtNode.getNodeValue();  assertEquals("namednodemapSetNamedItemThatExistsAssert","",attrValue);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapchildnoderange.class,args);}  }
class C{  public org.w3c.dom.Element signXML(org.w3c.dom.Document doc,java.lang.String certAlias) throws XMLSignatureException {  return signXML(doc,certAlias,null);}  }
class C{  private void processCharacterSetsAndRanges(CharacterSetPasswordValidatorCfg configuration,boolean apply) throws ConfigException {  HashMap<String,Integer> characterSets=new HashMap<>();  HashMap<String,Integer> characterRanges=new HashMap<>();  HashSet<Character> usedCharacters=new HashSet<>();  int mandatoryCharacterSets=0;  for (  String definition : configuration.getCharacterSet()) {    int colonPos=definition.indexOf(':');    if (colonPos <= 0) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_NO_SET_COLON.get(definition);      throw new ConfigException(message);    } else     if (colonPos == (definition.length() - 1)) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_NO_SET_CHARS.get(definition);      throw new ConfigException(message);    }    int minCount;    try {      minCount=Integer.parseInt(definition.substring(0,colonPos));    } catch (    Exception e) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_INVALID_SET_COUNT.get(definition);      throw new ConfigException(message);    }    if (minCount < 0) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_INVALID_SET_COUNT.get(definition);      throw new ConfigException(message);    }    String characterSet=definition.substring(colonPos + 1);    for (int i=0; i < characterSet.length(); i++) {      char c=characterSet.charAt(i);      if (usedCharacters.contains(c)) {        throw new ConfigException(ERR_CHARSET_VALIDATOR_DUPLICATE_CHAR.get(definition,c));      }      usedCharacters.add(c);    }    characterSets.put(characterSet,minCount);    if (minCount > 0) {      mandatoryCharacterSets++;    }  }  for (  String definition : configuration.getCharacterSetRanges()) {    int colonPos=definition.indexOf(':');    if (colonPos <= 0) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_NO_RANGE_COLON.get(definition);      throw new ConfigException(message);    } else     if (colonPos == (definition.length() - 1)) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_NO_RANGE_CHARS.get(definition);      throw new ConfigException(message);    }    int minCount;    try {      minCount=Integer.parseInt(definition.substring(0,colonPos));    } catch (    Exception e) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_INVALID_RANGE_COUNT.get(definition);      throw new ConfigException(message);    }    if (minCount < 0) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_INVALID_RANGE_COUNT.get(definition);      throw new ConfigException(message);    }    String characterRange=definition.substring(colonPos + 1);    int rangeOffset=0;    while (rangeOffset < characterRange.length()) {      if (rangeOffset > characterRange.length() - 3) {        LocalizableMessage message=ERR_CHARSET_VALIDATOR_SHORT_RANGE.get(definition,characterRange.substring(rangeOffset));        throw new ConfigException(message);      }      if (characterRange.charAt(rangeOffset + 1) != '-') {        LocalizableMessage message=ERR_CHARSET_VALIDATOR_MALFORMED_RANGE.get(definition,characterRange.substring(rangeOffset,rangeOffset + 3));        throw new ConfigException(message);      }      if (characterRange.charAt(rangeOffset) >= characterRange.charAt(rangeOffset + 2)) {        LocalizableMessage message=ERR_CHARSET_VALIDATOR_UNSORTED_RANGE.get(definition,characterRange.substring(rangeOffset,rangeOffset + 3));        throw new ConfigException(message);      }      rangeOffset+=3;    }    characterRanges.put(characterRange,minCount);    if (minCount > 0) {      mandatoryCharacterSets++;    }  }  int optionalCharacterSets=characterSets.size() + characterRanges.size() - mandatoryCharacterSets;  if (optionalCharacterSets > 0 && configuration.getMinCharacterSets() != null) {    int minCharacterSets=configuration.getMinCharacterSets();    if (minCharacterSets < mandatoryCharacterSets) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_MIN_CHAR_SETS_TOO_SMALL.get(minCharacterSets);      throw new ConfigException(message);    }    if (minCharacterSets > characterSets.size() + characterRanges.size()) {      LocalizableMessage message=ERR_CHARSET_VALIDATOR_MIN_CHAR_SETS_TOO_BIG.get(minCharacterSets);      throw new ConfigException(message);    }  }  if (apply) {    this.characterSets=characterSets;    this.characterRanges=characterRanges;  }}  }
class C{  public void endEntity(String name) throws SAXException {  if (null != m_resultLexicalHandler)   m_resultLexicalHandler.endEntity(name);}  }
class C{  @Override public void destroy(){}  }
class C{  public PatternRDN(String type,List<ByteString> valuePattern,String dnString) throws DirectoryException {  if (type.contains("*")) {    if (!type.equals("*")) {      LocalizableMessage message=WARN_PATTERN_DN_TYPE_CONTAINS_SUBSTRINGS.get(dnString);      throw new DirectoryException(ResultCode.INVALID_DN_SYNTAX,message);    }    hasTypeWildcard=true;  } else {    hasTypeWildcard=false;  }  typePatterns=new String[]{type};  valuePatterns=newArrayList(valuePattern);}  }
class C{  public IIOMetadataNode(String nodeName){  this.nodeName=nodeName;}  }
class C{  private JsonValue fetchAllObjects() throws ResourceException {  JsonValue flatParams=flattenJson(taskScannerContext.getScanValue());  ConfigMacroUtil.expand(flatParams);  return performQuery(taskScannerContext.getObjectID(),flatParams);}  }
class C{  private static boolean resolveEnable(Context context){  int state=context.getPackageManager().getApplicationEnabledSetting(DOWNLOAD_MANAGER_PACKAGE_NAME);  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR2) {    return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED);  } else {    return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER);  }}  }
class C{  public void testConstructor_InetAddressI() throws Exception {  int sport=startServer("Cons InetAddress,I");  int[] invalidPort={-1,Integer.MIN_VALUE,65536,Integer.MAX_VALUE};  SSLSocket ssl=getSSLSocket(InetAddress.getLocalHost(),sport);  assertNotNull(ssl);  assertEquals(sport,ssl.getPort());  ssl.close();  try {    getSSLSocket(InetAddress.getLocalHost(),sport + 1);    fail();  } catch (  IOException expected) {  }  for (int i=0; i < invalidPort.length; i++) {    try {      getSSLSocket(InetAddress.getLocalHost(),invalidPort[i]);      fail();    } catch (    IllegalArgumentException expected) {    }  }}  }
class C{  public static boolean mustObfuscate(String attrName,Schema schema){  if (schema != null) {    return hasPasswordSyntax(attrName,schema);  }  for (  String attr : attrsToObfuscate) {    if (attr.equalsIgnoreCase(attrName)) {      return true;    }  }  return false;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"GREEN_UPDATE\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"UPDATELISTJSON\" TEXT);");}  }
class C{  public String resolveFrom(Context context){  Reject.ifFalse(context.containsContext(RealmContext.class),"Must contain a RealmContext cannot be null");  Reject.ifNull(context,"Context cannot be null");  return RealmContext.getRealm(context).asPath();}  }
class C{  public boolean hasEvents(){  return fieldSetFlags()[3];}  }
class C{  public static int _printBase64Binary(byte[] input,int offset,int len,char[] buf,int ptr){  int remaining=len;  int i;  for (i=offset; remaining >= 3; remaining-=3, i+=3) {    buf[ptr++]=encode(input[i] >> 2);    buf[ptr++]=encode(((input[i] & 0x3) << 4) | ((input[i + 1] >> 4) & 0xF));    buf[ptr++]=encode(((input[i + 1] & 0xF) << 2) | ((input[i + 2] >> 6) & 0x3));    buf[ptr++]=encode(input[i + 2] & 0x3F);  }  if (remaining == 1) {    buf[ptr++]=encode(input[i] >> 2);    buf[ptr++]=encode(((input[i]) & 0x3) << 4);    buf[ptr++]='=';    buf[ptr++]='=';  }  if (remaining == 2) {    buf[ptr++]=encode(input[i] >> 2);    buf[ptr++]=encode(((input[i] & 0x3) << 4) | ((input[i + 1] >> 4) & 0xF));    buf[ptr++]=encode((input[i + 1] & 0xF) << 2);    buf[ptr++]='=';  }  return ptr;}  }
class C{  @Override public void resourceSetCreated(String realm,ResourceSetDescription resourceSet) throws ServerException {  Map<String,Boolean> resourceTypeActions=new HashMap<String,Boolean>();  for (  String umaScope : resourceSet.getScopes()) {    resourceTypeActions.put(umaScope,Boolean.TRUE);  }  ResourceType resourceType=ResourceType.builder().setName(resourceSet.getName() + " - " + resourceSet.getId()).setUUID(resourceSet.getId()).setDescription("Dynamically created resource type for the UMA resource set. " + "Used to find all Policy Engine Policies that make up an UMA Policy").setActions(resourceTypeActions).addPattern(UmaConstants.UMA_POLICY_SCHEME_PATTERN).build();  Subject adminSubject=SubjectUtils.createSuperAdminSubject();  try {    resourceTypeService.saveResourceType(adminSubject,realm,resourceType);  } catch (  EntitlementException e) {    logger.error("Failed to create resource type for resource set, {}",resourceSet,e);    throw new ServerException(e);  }  try {    ApplicationService appService=applicationServiceFactory.create(adminSubject,realm);    Application application=appService.getApplication(resourceSet.getClientId().toLowerCase());    application.addResourceTypeUuid(resourceType.getUUID());    appService.saveApplication(application);  } catch (  EntitlementException e) {    logger.error("Failed to add Resource Type, " + resourceType.getUUID() + " to application, "+ resourceSet.getClientId(),e);    throw new ServerException(e);  }}  }
class C{  public static SerializedFragment newInstance(String serialized){  SerializedFragment fragment=new SerializedFragment();  Bundle args=new Bundle();  args.putString(SERIALIZED,serialized);  fragment.setArguments(args);  return fragment;}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.IPAddressType createIPAddressType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.IPAddressTypeImpl();}  }
class C{  public void detach(){}  }
class C{  public JspException(String msg){  super(msg);}  }
class C{  public void push(AwtreeNode p_element){  if (p_element == null)   return;  node_list.add(p_element);}  }
class C{  @Override protected void onResume(){  super.onResume();  if (sGoCoderSDK != null) {    mPermissionsGranted=true;    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {      mPermissionsGranted=(mRequiredPermissions.length > 0 ? WowzaGoCoder.hasPermissions(this,mRequiredPermissions) : true);      if (!mPermissionsGranted)       ActivityCompat.requestPermissions(this,mRequiredPermissions,PERMISSIONS_REQUEST_CODE);    }    if (mPermissionsGranted) {      prepareListData();      listAdapter=new ExpandableListAdapter(this,listDataHeader,listDataChild);      expListView.setAdapter(listAdapter);    }  }}  }
class C{  public void putFile(short fid,byte[] bytes){  if (bytes == null) {    return;  }  try {    lds.add(fid,new ByteArrayInputStream(bytes),bytes.length);    if (fid != PassportService.EF_COM && fid != PassportService.EF_SOD && fid != cvcaFID) {      updateCOMSODFile(null);    }  } catch (  IOException ioe) {    ioe.printStackTrace();  }  verificationStatus.setAll(VerificationStatus.Verdict.UNKNOWN,ReasonCode.UNKNOWN);}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  public ChannelData(){  this(true);}  }
class C{  private ASCIIPropertyListParser(byte[] propertyListContent){  data=propertyListContent;}  }
class C{  protected void initializeObject(String ssoToken,String entityLocation) throws EntityException, SSOException {  checkInitialization();  try {    token=tokenManager.createSSOToken(ssoToken);    amsc=new AMStoreConnection(token);    String orgDN=amsc.getOrganizationDN(entityLocation,null);    entity=amsc.getOrganization(orgDN);  } catch (  AMException amex) {    EntityUtils.debug.error("EntityObjectImpl.initializeObject() : " + "Unable to get Organization DN " + amex);    throw EntityUtils.convertException(amex);  }catch (  SSOException ssoe) {    EntityUtils.debug.error("EntityObjectImpl.initializeObject() : " + "Unable to convert SSOToken: " + ssoToken,ssoe);    throw ssoe;  }  if (EntityUtils.debug.messageEnabled()) {    EntityUtils.debug.message("EntityObjectImpl.getAMEntity(): " + "Obtained ssotoken: " + ssoToken);    EntityUtils.debug.message("EntityObjectImpl.getAMEntity(): " + "Obtained AMSToreConnection object for SSOToken: " + ssoToken);  }}  }
class C{  protected PreparedStatement credentials(Connection dbConnection,String username) throws SQLException {  if (preparedCredentials == null) {    StringBuilder sb=new StringBuilder("SELECT ");    sb.append(userCredCol);    sb.append(" FROM ");    sb.append(userTable);    sb.append(" WHERE ");    sb.append(userNameCol);    sb.append(" = ?");    if (containerLog.isDebugEnabled()) {      containerLog.debug("credentials query: " + sb.toString());    }    preparedCredentials=dbConnection.prepareStatement(sb.toString());  }  if (username == null) {    preparedCredentials.setNull(1,java.sql.Types.VARCHAR);  } else {    preparedCredentials.setString(1,username);  }  return (preparedCredentials);}  }
class C{  public synchronized void abortGrabbing(){  imageComplete(IMAGEABORTED);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementinvalidcharacterexception.class,args);}  }
class C{  public static DsnComponentPlacement read_scope(JflexScanner p_scanner) throws java.io.IOException {  Object next_token=p_scanner.next_token();  if (!(next_token instanceof String)) {    System.out.println("Component.read_scope: component name expected");    return null;  }  String name=(String)next_token;  DsnComponentPlacement component_placement=new DsnComponentPlacement(name);  Object prev_token=next_token;  next_token=p_scanner.next_token();  while (next_token != DsnKeyword.CLOSED_BRACKET) {    if (prev_token == DsnKeyword.OPEN_BRACKET && next_token == DsnKeyword.PLACE) {      DsnComponentLocation next_location=read_place_scope(p_scanner);      if (next_location != null) {        component_placement.locations.add(next_location);      }    }    prev_token=next_token;    next_token=p_scanner.next_token();  }  return component_placement;}  }
class C{  protected void updateUndoPositions(Vector positions,int offset,int length){  int endOffset=offset + length;  int g1=getGapEnd();  int startIndex;  int endIndex=findMarkAdjustIndex(g1 + 1);  if (offset != 0) {    startIndex=findMarkAdjustIndex(g1);  } else {    startIndex=0;  }  for (int counter=positions.size() - 1; counter >= 0; counter--) {    UndoPosRef ref=(UndoPosRef)positions.elementAt(counter);    ref.resetLocation(endOffset,g1);  }  if (startIndex < endIndex) {    Object[] sorted=new Object[endIndex - startIndex];    int addIndex=0;    int counter;    if (offset == 0) {      for (counter=startIndex; counter < endIndex; counter++) {        MarkData mark=marks.elementAt(counter);        if (mark.index == 0) {          sorted[addIndex++]=mark;        }      }      for (counter=startIndex; counter < endIndex; counter++) {        MarkData mark=marks.elementAt(counter);        if (mark.index != 0) {          sorted[addIndex++]=mark;        }      }    } else {      for (counter=startIndex; counter < endIndex; counter++) {        MarkData mark=marks.elementAt(counter);        if (mark.index != g1) {          sorted[addIndex++]=mark;        }      }      for (counter=startIndex; counter < endIndex; counter++) {        MarkData mark=marks.elementAt(counter);        if (mark.index == g1) {          sorted[addIndex++]=mark;        }      }    }    marks.replaceRange(startIndex,endIndex,sorted);  }}  }
class C{  protected byte[] serializeSessionId(String sessionId) throws IOException {  ByteArrayOutputStream bos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(bos);  oos.writeUTF(sessionId);  oos.flush();  oos.close();  return bos.toByteArray();}  }
class C{  @Override public Foo findByUuid_C_Last(String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_C_Last(uuid,companyId,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(6);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(", companyId=");  msg.append(companyId);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public LDIFChangeRecordWriter(final Writer writer){  super(writer);}  }
class C{  @Override public boolean equals(Object obj){  boolean equalled=true;  if (obj == null) {    return false;  }  if (!getClass().equals(obj.getClass())) {    return false;  }  Entitlement object=(Entitlement)obj;  if (name == null) {    if (object.getName() != null) {      return false;    }  } else {    if ((object.getName()) == null) {      return false;    } else     if (!name.equals(object.getName())) {      return false;    }  }  if (applicationName == null) {    if (object.getApplicationName() != null) {      return false;    }  } else {    if ((object.getApplicationName()) == null) {      return false;    } else     if (!applicationName.equals(object.getApplicationName())) {      return false;    }  }  if (resourceNames == null) {    if (object.getResourceNames() != null) {      return false;    }  } else {    if ((object.getResourceNames()) == null) {      return false;    } else     if (!resourceNames.equals(object.getResourceNames())) {      return false;    }  }  if (actionValues == null) {    if ((object.getActionValues() != null) && !object.getActionValues().isEmpty()) {      return false;    }  } else {    if ((object.getActionValues()) == null) {      return false;    } else     if (!actionValues.equals(object.getActionValues())) {      return false;    }  }  if (advices == null) {    if ((object.getAdvices() != null) && !object.getAdvices().isEmpty()) {      return false;    }  } else {    if ((object.getAdvices()) == null) {      return false;    } else     if (!advices.equals(object.getAdvices())) {      return false;    }  }  if (attributes == null) {    if ((object.getAttributes() != null) && !object.getAttributes().isEmpty()) {      return false;    }  } else {    if ((object.getAttributes()) == null) {      return false;    } else     if (!attributes.equals(object.getAttributes())) {      return false;    }  }  return equalled;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  IOutput outputWriter=getOutputWriter();  try {    String[] params={realm,serviceName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_REALM_SERVICE_ATTR_VALUES",params);    Map attributeValues=null;    AMIdentityRepository repo=new AMIdentityRepository(adminSSOToken,realm);    AMIdentity ai=repo.getRealmIdentity();    Set servicesFromIdRepo=ai.getAssignedServices();    if (servicesFromIdRepo.contains(serviceName)) {      attributeValues=ai.getServiceAttributes(serviceName);    } else {      OrganizationConfigManager ocm=new OrganizationConfigManager(adminSSOToken,realm);      attributeValues=ocm.getServiceAttributes(serviceName);    }    if ((attributeValues != null) && !attributeValues.isEmpty()) {      outputWriter.printlnMessage(FormatUtils.printAttributeValues(getResourceString("get-service-attr-values-of-realm-result"),attributeValues,CLIUtil.getPasswordFields(serviceName)));    } else {      outputWriter.printlnMessage(getResourceString("get-service-attr-values-of-realm-no-attr"));    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_REALM_SERVICE_ATTR_VALUES",params);  } catch (  IdRepoException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmGetServiceAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_REALM_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmGetServiceAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_REALM_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={realm,serviceName,e.getMessage()};    debugError("RealmGetServiceAttributeValues.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_GET_REALM_SERVICE_ATTR_VALUES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  protected JobStateReason(int value){  super(value);}  }
class C{  public ObjectInstance(String objectName,String className) throws MalformedObjectNameException {  this(new ObjectName(objectName),className);}  }
class C{  public static String toString(char[] a){  if (a == null)   return "null";  int iMax=a.length - 1;  if (iMax == -1)   return "[]";  StringBuilder b=new StringBuilder();  b.append('[');  for (int i=0; ; i++) {    b.append(a[i]);    if (i == iMax)     return b.append(']').toString();    b.append(", ");  }}  }
class C{  public void addObfuscatedArgument(final Argument argument){  addArgument(argument);  obfuscatedArgs.add(argument);}  }
class C{  final void onAttach(){  DraweeSpan[] images=getImages();  for (  DraweeSpan image : images) {    image.onAttach(this);  }}  }
class C{  protected DirectoryThread(String threadName){  super(DIRECTORY_THREAD_GROUP,threadName);  init();}  }
class C{  protected void fill() throws IOException {  ensureOpen();  len=in.read(buf,0,buf.length);  if (len == -1) {    throw new EOFException("Unexpected end of ZLIB input stream");  }  inf.setInput(buf,0,len);}  }
class C{  @RequiresPermission(allOf={Manifest.permission.ACCESS_NETWORK_STATE,Manifest.permission.INTERNET}) public final boolean isNetworkAvailable(){  if (PermissionUtil.hasPermission(context,Manifest.permission.INTERNET) && PermissionUtil.hasPermission(context,Manifest.permission.ACCESS_NETWORK_STATE)) {    ConnectivityManager cm=(ConnectivityManager)context.getApplicationContext().getSystemService(Context.CONNECTIVITY_SERVICE);    NetworkInfo netInfo=cm.getActiveNetworkInfo();    return netInfo != null && netInfo.isConnected();  }  return false;}  }
class C{  public static boolean checkpw(String plaintext,String hashed){  byte hashed_bytes[];  byte try_bytes[];  try {    String try_pw=hashpw(plaintext,hashed);    hashed_bytes=hashed.getBytes("UTF-8");    try_bytes=try_pw.getBytes("UTF-8");  } catch (  UnsupportedEncodingException uee) {    return false;  }  if (hashed_bytes.length != try_bytes.length) {    return false;  }  byte ret=0;  for (int i=0; i < try_bytes.length; i++) {    ret|=hashed_bytes[i] ^ try_bytes[i];  }  return ret == 0;}  }
class C{  public final Object elementAt(int i){  return m_map[i];}  }
class C{  public void testHasAttribute1() throws Throwable {  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staff",builder);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(4);  state=testNode.hasAttribute("domestic");  assertFalse("throw_False",state);}  }
class C{  protected void fireIntervalAdded(Object source,int index0,int index1){  Object[] listeners=listenerList.getListenerList();  ListDataEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ListDataListener.class) {      if (e == null) {        e=new ListDataEvent(source,ListDataEvent.INTERVAL_ADDED,index0,index1);      }      ((ListDataListener)listeners[i + 1]).intervalAdded(e);    }  }}  }
class C{  private void closeBackendImport(Backend<?> backend) throws DirectoryException {  String lockFile=LockFileManager.getBackendLockFileName(backend);  StringBuilder failureReason=new StringBuilder();  if (!LockFileManager.releaseLock(lockFile,failureReason)) {    LocalizableMessage message=WARN_LDIFIMPORT_CANNOT_UNLOCK_BACKEND.get(backend.getBackendID(),failureReason);    logger.warn(message);    throw new DirectoryException(ResultCode.OTHER,message);  }  TaskUtils.enableBackend(backend.getBackendID());  ignoreBackendInitializationEvent=false;}  }
class C{  public final void cdata(char ch[],int start,int length) throws org.xml.sax.SAXException {  if ((null != m_elemContext.m_elementName) && (m_elemContext.m_elementName.equalsIgnoreCase("SCRIPT") || m_elemContext.m_elementName.equalsIgnoreCase("STYLE"))) {    try {      if (m_elemContext.m_startTagOpen) {        closeStartTag();        m_elemContext.m_startTagOpen=false;      }      m_ispreserve=true;      if (shouldIndent())       indent();      writeNormalizedChars(ch,start,length,true,m_lineSepUse);    } catch (    IOException ioe) {      throw new org.xml.sax.SAXException(Utils.messages.createMessage(MsgKey.ER_OIERROR,null),ioe);    }  } else {    super.cdata(ch,start,length);  }}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  processRequest(request,response);}  }
class C{  public void elementDecl(String name,String model) throws SAXException {}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SSLType createSSLType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SSLTypeImpl();}  }
class C{  private void newClientWithChanges(ServerState state,CSN nextCSN) throws Exception {  ReplicationBroker broker=null;  try {    final long generationId=getGenerationId(TEST_ROOT_DN);    broker=new ReplicationBroker(new DummyReplicationDomain(generationId),state,newFakeCfg(TEST_ROOT_DN,3,replicationServerPort),getReplSessionSecurity());    connect(broker,5000);    ReplicationMsg receivedMsg=broker.receive();    broker.updateWindowAfterReplay();    assertDeleteMsgCSNEquals(receivedMsg,nextCSN,"second");  }  finally {    stop(broker);  }}  }
class C{  public int processBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if ((inOff + blockSize) > in.length) {    throw new DataLengthException("input buffer too short");  }  if ((outOff + blockSize) > out.length) {    throw new DataLengthException("output buffer too short");  }  cipher.processBlock(ofbV,0,ofbOutV,0);  for (int i=0; i < blockSize; i++) {    out[outOff + i]=(byte)(ofbOutV[i] ^ in[inOff + i]);  }  System.arraycopy(ofbV,blockSize,ofbV,0,ofbV.length - blockSize);  System.arraycopy(ofbOutV,0,ofbV,ofbV.length - blockSize,blockSize);  return blockSize;}  }
class C{  public synchronized Object put(Object key,Object value){  if (value == null)   throw new NullPointerException();  Entry tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index]; e != null; e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      Object old=e.value;      e.value=value;      lruTracker.replaceLast(e);      return old;    }  }  Entry e=null;  if (count == maxSize) {    e=lruTracker.getFirst();    adjustEntry(e.key);    lruTracker.replaceLast(e);    e.changeValues(hash,key,value,tab[index]);  } else {    modCount++;    count++;    e=new Entry(hash,key,value,tab[index]);    lruTracker.addLast(e);  }  tab[index]=e;  return null;}  }
class C{  public static String intToString(int i,int radix){  if (radix < Character.MIN_RADIX || radix > Character.MAX_RADIX) {    radix=10;  }  if (radix == 10) {    return intToString(i);  }  boolean negative=false;  if (i < 0) {    negative=true;  } else {    i=-i;  }  int bufLen=radix < 8 ? 33 : 12;  char[] buf=new char[bufLen];  int cursor=bufLen;  do {    int q=i / radix;    buf[--cursor]=DIGITS[radix * q - i];    i=q;  } while (i != 0);  if (negative) {    buf[--cursor]='-';  }  return new String(cursor,bufLen - cursor,buf);}  }
class C{  @Override public void store(PrintWriter aWriter,int indent,Object aServer) throws Exception {  storeXMLHead(aWriter);  super.store(aWriter,indent,aServer);}  }
class C{  public boolean isTimedOut(){  return timeout;}  }
class C{  public static boolean isSurrogateHigh(char c){  return c >= '\ud800' && c <= '\udbff';}  }
class C{  public CoreTokenException(int errorCode,Object[] params,int httpStatusCode){  this.errorCode=errorCode;  this.params=params;  this.httpStatusCode=httpStatusCode;  this.message=getLocalizedMessage(Locale.getDefault());}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb11.SendSingleLogOutElement createSendSingleLogOutElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb11.impl.SendSingleLogOutElementImpl();}  }
class C{  public void copyMissingData(PersistentStateAccess pStateAccess){  StateData gData=pStateAccess.getGlobalData();  getGlobalData().copyMissingData(gData.getNameValueMap());  StateData iData=pStateAccess.getInstanceData();  getInstanceData().copyMissingData(iData.getNameValueMap());  Map cData=pStateAccess.getCompleteData();  Iterator iter=cData.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry me=(Map.Entry)iter.next();    if (!getCompleteData().containsKey(me.getKey())) {      getCompleteData().put(me.getKey(),me.getValue());    }  }}  }
class C{  public boolean isBorderPainted(){  return paintBorder;}  }
class C{  public static PdfAction createGoToR(String filename,int pageNum,boolean newWindow){  return createGoToR(new PdfStringFS(filename),PdfExplicitDestination.createFitH(pageNum,10000),newWindow);}  }
class C{  public static void fadeOutView(View view){  fadeOutView(view,ANIMATION_DURATION_SHORTEST);}  }
class C{  public void accept(final ClassVisitor cv){  String[] interfaces=new String[this.interfaces.size()];  this.interfaces.toArray(interfaces);  cv.visit(version,access,name,signature,superName,interfaces);  if (sourceFile != null || sourceDebug != null) {    cv.visitSource(sourceFile,sourceDebug);  }  if (outerClass != null) {    cv.visitOuterClass(outerClass,outerMethod,outerMethodDesc);  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(cv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(cv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    cv.visitAttribute(attrs.get(i));  }  for (i=0; i < innerClasses.size(); ++i) {    innerClasses.get(i).accept(cv);  }  for (i=0; i < fields.size(); ++i) {    fields.get(i).accept(cv);  }  for (i=0; i < methods.size(); ++i) {    methods.get(i).accept(cv);  }  cv.visitEnd();}  }
class C{  public LightweightServerHandler(ReplicationServerHandler replServerHandler,DSInfo dsInfo){  this.replServerHandler=replServerHandler;  this.dsInfo=dsInfo;  if (logger.isTraceEnabled()) {    debugInfo("()");  }}  }
class C{  public boolean isZoomed(){  return normalizedScale != 1;}  }
class C{  public void cacheCookieString(String cookieString){  this.cookieStr=cookieString;}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.MustSupportRefKeyIdentifierElement createMustSupportRefKeyIdentifierElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.MustSupportRefKeyIdentifierElementImpl();}  }
class C{  public void reset(){  curves=new Vector();  invalidateBounds();}  }
class C{  public void reset(){  if (text != null) {    text.reset();    NormalizerBase.Mode mode=CollatorUtilities.toNormalizerMode(owner.getDecomposition());    text.setMode(mode);  }  buffer=null;  expIndex=0;  swapOrder=0;}  }
class C{  public void arrayStore(final Type type){  mv.visitInsn(type.getOpcode(Opcodes.IASTORE));}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  SSOToken adminSSOToken=getAdminSSOToken();  String realm=getStringOptionValue(IArgument.REALM_NAME);  List agentNames=(List)rc.getOption(IArgument.AGENT_NAMES);  String file=getStringOptionValue(IArgument.FILE);  if (agentNames == null) {    agentNames=new ArrayList();  }  if (file != null) {    agentNames.addAll(AttributeValues.parseValues(file));  }  if (agentNames.isEmpty()) {    throw new CLIException(getResourceString("missing-agent-names"),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  String displayableNames=tokenize(agentNames);  String[] params={realm,displayableNames};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_DELETE_AGENTS",params);  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set setDelete=new HashSet();    for (Iterator i=agentNames.iterator(); i.hasNext(); ) {      String name=(String)i.next();      AMIdentity amid=new AMIdentity(adminSSOToken,name,IdType.AGENTONLY,realm,null);      setDelete.add(amid);    }    amir.deleteIdentities(setDelete);    IOutput outputWriter=getOutputWriter();    outputWriter.printlnMessage(getResourceString("delete-agent-succeeded"));    for (Iterator i=agentNames.iterator(); i.hasNext(); ) {      outputWriter.printlnMessage("    " + (String)i.next());    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_DELETE_AGENTS",params);  } catch (  IdRepoException e) {    String[] args={realm,displayableNames,e.getMessage()};    debugError("DeleteAgents.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AGENTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,displayableNames,e.getMessage()};    debugError("DeleteAgents.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_DELETE_AGENTS",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int n=s.readInt();  values=new Vector<>(n);  while (--n >= 0) {    values.addElement(s.readObject());  }}  }
class C{  public Cursor fetch(Long dataFilterID){  if (dataFilterID == null) {    throw new IllegalArgumentException("primary key null.");  }  Cursor mCursor=database.query(true,DATABASE_TABLE,KEYS,KEY_DATAFILTERID + "=" + dataFilterID,null,null,null,null,null);  if (mCursor != null) {    mCursor.moveToFirst();  }  return mCursor;}  }
class C{  public StateInteractive key_typed(char p_key_char){  StateInteractive result=this;  if (p_key_char == 'a') {    i_brd.autoroute_selected_items();  } else   if (p_key_char == 'b') {    extent_to_whole_components();  } else   if (p_key_char == 'd') {    result=cutout_items();  } else   if (p_key_char == 'e') {    result=extent_to_whole_connections();  } else   if (p_key_char == 'f') {    fix_items();  } else   if (p_key_char == 'i') {    result=info_display();  } else   if (p_key_char == 'm') {    result=StateMoveItem.get_instance(i_brd.get_current_mouse_position(),items_list,return_state,i_brd,actlog);  } else   if (p_key_char == 'n') {    extent_to_whole_nets();  } else   if (p_key_char == 'p') {    i_brd.optimize_selected_items();  } else   if (p_key_char == 'r') {    result=new StateSelectRegionZoom(this,i_brd,actlog,i_brd.get_current_mouse_position());  } else   if (p_key_char == 's') {    result=extent_to_whole_connected_sets();  } else   if (p_key_char == 'u') {    unfix_items();  } else   if (p_key_char == 'v') {    toggle_clearance_violations();  } else   if (p_key_char == 'V') {    repair_clearance_violations();  } else   if (p_key_char == 'w') {    i_brd.zoom_selection();  } else   if (p_key_char == KeyEvent.VK_DELETE) {    result=delete_items();  } else {    result=super.key_typed(p_key_char);  }  return result;}  }
class C{  public CircularRedirectException(){  super();}  }
class C{  public NotFoundException(String message){  super(message);}  }
class C{  public SecurityToken issueToken(EndpointSpecification endpointSpecification,TokenSpecification tokenSpecification) throws SoapSTSConsumerException {  return issueTokenInternal(endpointSpecification,tokenSpecification,ALLOW_TOKEN_RENEWAL);}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  protected SSLRecordProtocol(HandshakeProtocol handshakeProtocol,AlertProtocol alertProtocol,SSLInputStream in,Appendable appData){  this.handshakeProtocol=handshakeProtocol;  this.handshakeProtocol.setRecordProtocol(this);  this.alertProtocol=alertProtocol;  this.alertProtocol.setRecordProtocol(this);  this.in=in;  this.appData=appData;}  }
class C{  public TypeConstraintException(String message,Throwable exception){  this(message,null,exception);}  }
class C{  @Override public synchronized void removeInstance(String stsId,String realm,boolean removeOnlyFromRouter) throws STSPublishException {  RouteMatcher<Request> route=publishedRoutes.remove(normalizeDeploymentSubPathForRouteCache(stsId));  if (route == null) {    try {      persistentStore.getSTSInstanceConfig(stsId,realm);    } catch (    STSPublishException e) {      throw new STSPublishException(ResourceException.NOT_FOUND,"A rest sts instance with id " + stsId + " in realm "+ realm+ " not found.");    }    if (!removeOnlyFromRouter) {      logger.warn("A previously published STS instance with id " + stsId + " in realm "+ realm+ " found in SMS, but not in route table. This indicates a previously failed deletion attempt."+ " Will attempt to remove from SMS.");    } else {      logger.error("A previously published STS instance with id " + stsId + " in realm "+ realm+ " not found in router, but found in SMS, and the removeOnlyFromRouter is true, indicating a "+ "ServiceListener invoked deletion triggered by a deletion on another site server. "+ "This is an illegal state.");    }  } else {    router.removeRoute(route);  }  if (!removeOnlyFromRouter) {    persistentStore.removeSTSInstance(stsId,realm);  }}  }
class C{  public static void checkFieldSignature(final String signature){  int pos=checkFieldTypeSignature(signature,0);  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public static NameIDMappingResponse initiateNameIDMappingRequest(Object session,String realm,String spEntityID,String idpEntityID,String targetSPEntityID,String targetNameIDFormat,Map paramsMap) throws SAML2Exception {  if (spEntityID == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("nullSPEntityID"));  }  if (idpEntityID == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("nullIDPEntityID"));  }  String userID=null;  try {    userID=sessionProvider.getPrincipalName(session);  } catch (  SessionException e) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("NameIDMapping.createNameIDMappingRequest: ",e);    }  }  if (userID == null) {    throw new SAML2Exception(SAML2Utils.bundle.getString("invalidSSOToken"));  }  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message("NameIDMapping.initiateNameMappingRequest:" + " IDP EntityID is : " + idpEntityID);    SAML2Utils.debug.message("NameIDMapping.initiateNameMappingRequest:" + " SP HOST EntityID is : " + spEntityID);    SAML2Utils.debug.message("NameIDMapping.initiateNameMappingRequest:" + " target SP EntityID is : " + targetSPEntityID);  }  try {    String binding=SAML2Utils.getParameter(paramsMap,SAML2Constants.BINDING);    if (binding == null) {      binding=SAML2Constants.SOAP;    } else     if (!binding.equals(SAML2Constants.SOAP)) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nimServiceBindingUnsupport"));    }    String nimURL=SAML2Utils.getParameter(paramsMap,"nimURL");    if (nimURL == null) {      NameIDMappingServiceElement nameIDMappingService=getNameIDMappingService(realm,idpEntityID,binding);      if (nameIDMappingService != null) {        nimURL=nameIDMappingService.getLocation();      }    }    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("NameIDMapping.initiateNameMappingRequest:" + " nimURL" + nimURL);    }    if (nimURL == null) {      throw new SAML2Exception(SAML2Utils.bundle.getString("nimServiceNotFound"));    }    NameIDMappingRequest nimRequest=createNameIDMappingRequest(userID,realm,spEntityID,idpEntityID,nimURL,targetSPEntityID,targetNameIDFormat);    signNIMRequest(nimRequest,realm,spEntityID,false);    BaseConfigType config=metaManager.getIDPSSOConfig(realm,idpEntityID);    nimURL=SAML2SDKUtils.fillInBasicAuthInfo(config,nimURL);    return doNIMBySOAP(nimRequest.toXMLString(true,true),nimURL,realm,spEntityID);  } catch (  SAML2MetaException sme) {    throw new SAML2Exception(SAML2Utils.bundle.getString("metaDataError"));  }}  }
class C{  private static <T extends Executable>T findBestMatch(List<T> methodList,Object[] args,boolean[] primitives){  Map<T,int[]> steps=new HashMap<>();  for (  T m : methodList) {    int[] step=new int[args.length];    for (int i=0; i < args.length; ++i) {      Class<?> type=m.getParameterTypes()[i];      if (primitives[i] && type.isPrimitive()) {        step[i]=0;      } else       if (primitives[i]) {        step[i]=PRIMITIVE_BOX_CAST_BASE;        step[i]+=bfsSearch(args[i].getClass(),type);      } else       if (type.isPrimitive()) {        step[i]=PRIMITIVE_BOX_CAST_BASE;      } else {        if (args[i] == null)         step[i]=0; else {          if (type.isAssignableFrom(args[i].getClass()))           step[i]=bfsSearch(args[i].getClass(),type); else {            if (type.isArray() || isFunctionalAbstractClass(type) || isFunctionalInterface(type)) {              step[i]=1;            } else             throw new LtBug("unsupported type cast");          }        }      }    }    steps.put(m,step);  }  T methodToInvoke=null;  int[] step=null;  for (  Map.Entry<T,int[]> entry : steps.entrySet()) {    if (methodToInvoke == null) {      methodToInvoke=entry.getKey();      step=entry.getValue();    } else {      int[] newStep=entry.getValue();      boolean isBetter=false;      boolean isWorse=false;      for (int i=0; i < step.length; ++i) {        if (step[i] == newStep[i])         continue; else         if (step[i] > newStep[i])         isBetter=true; else         if (step[i] < newStep[i])         isWorse=true;        if (isBetter && isWorse)         throw new LtRuntimeException("cannot decide which method to invoke:\n" + methodToInvoke + ":"+ Arrays.toString(step)+ "\n"+ entry.getKey()+ ":"+ Arrays.toString(newStep));      }      if (isBetter) {        methodToInvoke=entry.getKey();        step=entry.getValue();      }    }  }  assert methodToInvoke != null;  return methodToInvoke;}  }
class C{  public static boolean isIDPProxyEnabled(String requestID){  return IDPCache.proxySPAuthnReqCache.containsKey(requestID);}  }
class C{  @Override public void processServerShutdown(LocalizableMessage reason){  stopRequested=true;  while (backgroundThread != null && backgroundThread.isAlive()) {    try {      backgroundThread.interrupt();      backgroundThread.join();    } catch (    InterruptedException ex) {    }  }  DirectoryServer.deregisterShutdownListener(this);  queue.close();  close(httpClientHandler);  backgroundThread=null;}  }
class C{  public void doLogKey(String key){  if (logStatus) {    doLog(Locale.getString(rb,key,PWResetModelImpl.debug));  }}  }
class C{  private String encodeVal(String v){  char[] chars=v.toCharArray();  StringBuilder sb=new StringBuilder(chars.length + 20);  int i=0, lastIdx=0;  for (i=0; i < chars.length; i++) {    if (chars[i] == '%') {      if (lastIdx != i) {        sb.append(chars,lastIdx,i - lastIdx);      }      sb.append("%25");      lastIdx=i + 1;    } else     if (chars[i] == ',') {      if (lastIdx != i) {        sb.append(chars,lastIdx,i - lastIdx);      }      sb.append("%2C");      lastIdx=i + 1;    }  }  if (lastIdx != i) {    sb.append(chars,lastIdx,i - lastIdx);  }  return sb.toString();}  }
class C{  private void parse_operator_like_invocation() throws SyntaxException {  if (isParsingOperatorLikeInvocation)   return;  parsedExpsNotEmpty(current);  Expression a=parsedExps.pop();  String op=((Element)current).getContent();  LineCol opLineCol=current.getLineCol();  if (current.next() instanceof Element && (!isParsingMap || !((Element)current.next()).getContent().equals(":"))) {    if (!last2VarOps.empty()) {      String lastOp=last2VarOps.pop();      if (twoVar_higherOrEqual(lastOp,op)) {        parsedExps.push(a);        return;      }      last2VarOps.push(lastOp);    }    nextNode(true);    last2VarOps.push(op);    List<Expression> opArgs=new ArrayList<>();    opArgs.add(get_exp(false));    while (current instanceof EndingNode && ((EndingNode)current).getType() == EndingNode.STRONG) {      Stack<String> tmp=new Stack<>();      while (!last2VarOps.empty())       tmp.push(last2VarOps.pop());      nextNode(false);      isParsingOperatorLikeInvocation=true;      opArgs.add(get_exp(false));      isParsingOperatorLikeInvocation=false;      while (!tmp.empty())       last2VarOps.push(tmp.pop());    }    AST.Invocation invocation=new AST.Invocation(new AST.Access(a,op,opLineCol),opArgs,false,opLineCol);    parsedExps.push(invocation);  } else {    if (!last2VarOps.empty()) {      last2VarOps.pop();      parsedExps.push(a);      return;    }    nextNode(true);    AST.Access access=new AST.Access(a,op,opLineCol);    parsedExps.push(access);  }  parse_expression();}  }
class C{  public final void writeChildren(ObjectOutputStream oos) throws IOException {  if (serializable <= 0)   return;  boolean prev=serializing;  serializing=true;  int count=0;synchronized (children) {    Iterator i=children.entrySet().iterator();    while (i.hasNext() && count < serializable) {      Map.Entry entry=(Map.Entry)i.next();      if (entry.getKey() instanceof Serializable) {        try {          oos.writeObject(entry.getKey());          oos.writeObject(entry.getValue());        } catch (        IOException ioe) {          serializing=prev;          throw ioe;        }        count++;      }    }  }  serializing=prev;  if (count != serializable) {    throw new IOException("wrote different number of children than expected");  }}  }
class C{  public void addAttribute(String uri,String localName,String rawName,String type,String value,boolean XSLAttribute) throws SAXException {  if (m_elemContext.m_startTagOpen) {    addAttributeAlways(uri,localName,rawName,type,value,XSLAttribute);  }}  }
class C{  @Override synchronized boolean isComparableTypeValid(ObjectName object,String attribute,Comparable<?> value){  final GaugeMonitorObservedObject o=(GaugeMonitorObservedObject)getObservedObject(object);  if (o == null)   return false;  if (value instanceof Integer) {    o.setType(INTEGER);  } else   if (value instanceof Byte) {    o.setType(BYTE);  } else   if (value instanceof Short) {    o.setType(SHORT);  } else   if (value instanceof Long) {    o.setType(LONG);  } else   if (value instanceof Float) {    o.setType(FLOAT);  } else   if (value instanceof Double) {    o.setType(DOUBLE);  } else {    return false;  }  return true;}  }
class C{  protected FileAlterationObserver(FileEntry rootEntry,FileFilter fileFilter,IOCase caseSensitivity){  if (rootEntry == null) {    throw new IllegalArgumentException("Root entry is missing");  }  if (rootEntry.getFile() == null) {    throw new IllegalArgumentException("Root directory is missing");  }  this.rootEntry=rootEntry;  this.fileFilter=fileFilter;  if (caseSensitivity == null || caseSensitivity.equals(IOCase.SYSTEM)) {    this.comparator=NameFileComparator.NAME_SYSTEM_COMPARATOR;  } else   if (caseSensitivity.equals(IOCase.INSENSITIVE)) {    this.comparator=NameFileComparator.NAME_INSENSITIVE_COMPARATOR;  } else {    this.comparator=NameFileComparator.NAME_COMPARATOR;  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeObject(toString());}  }
class C{  @SuppressWarnings("deprecation") private static long javaToDosTime(long time){  Date d=new Date(time);  int year=d.getYear() + 1900;  if (year < 1980) {    return ZipEntry.DOSTIME_BEFORE_1980;  }  return (year - 1980) << 25 | (d.getMonth() + 1) << 21 | d.getDate() << 16 | d.getHours() << 11 | d.getMinutes() << 5 | d.getSeconds() >> 1;}  }
class C{  @Override public boolean allowedInBranch(){  return true;}  }
class C{  public AVTPartXPath(XPath xpath){  m_xpath=xpath;}  }
class C{  public boolean isHidden(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkRead(path);  }  if (isInvalid()) {    return false;  }  return ((fs.getBooleanAttributes(this) & FileSystem.BA_HIDDEN) != 0);}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  super.startElement(handler,uri,localName,rawName,attributes);  try {    int stylesheetType=handler.getStylesheetType();    Stylesheet stylesheet;    if (stylesheetType == StylesheetHandler.STYPE_ROOT) {      try {        stylesheet=getStylesheetRoot(handler);      } catch (      TransformerConfigurationException tfe) {        throw new TransformerException(tfe);      }    } else {      Stylesheet parent=handler.getStylesheet();      if (stylesheetType == StylesheetHandler.STYPE_IMPORT) {        StylesheetComposed sc=new StylesheetComposed(parent);        parent.setImport(sc);        stylesheet=sc;      } else {        stylesheet=new Stylesheet(parent);        parent.setInclude(stylesheet);      }    }    stylesheet.setDOMBackPointer(handler.getOriginatingNode());    stylesheet.setLocaterInfo(handler.getLocator());    stylesheet.setPrefixes(handler.getNamespaceSupport());    handler.pushStylesheet(stylesheet);    setPropertiesFromAttributes(handler,rawName,attributes,handler.getStylesheet());    handler.pushElemTemplateElement(handler.getStylesheet());  } catch (  TransformerException te) {    throw new org.xml.sax.SAXException(te);  }}  }
class C{  public void remove(RxAction action){  Pair<Integer,Subscription> old=mMap.remove(action.getType());  if (old != null && !old.second.isUnsubscribed())   old.second.unsubscribe();}  }
class C{  private static int calculateNumberOfRows(int m,int k,int c){  int r=((m + 1 + k) / c) + 1;  if (c * r >= (m + 1 + k+ c)) {    r--;  }  return r;}  }
class C{  public Point dbl(Point p,boolean checkInfinity) throws DivisionException {  if (checkInfinity) {    if (p.isInfinity()) {      return p;    }    if (p.getY().signum() == 0) {      return new Point(true);    }  }  return dbl(p);}  }
class C{  @Override public byte[] perform(byte[] blob) throws TokenStrategyFailedException {  Reject.ifNull(blob);  final ByteArrayOutputStream bout=new ByteArrayOutputStream(blob.length);  try {    final GZIPOutputStream out=new GZIPOutputStream(bout);    out.write(blob);    out.flush();    out.close();  } catch (  IOException e) {    throw new TokenStrategyFailedException(e);  }  return bout.toByteArray();}  }
class C{  public FileURLConnection(URL url){  super(url);  filename=url.getFile();  if (filename == null) {    filename="";  }  filename=UriCodec.decode(filename);}  }
class C{  final int compareHalf(MutableBigInteger b){  int blen=b.intLen;  int len=intLen;  if (len <= 0)   return blen <= 0 ? 0 : -1;  if (len > blen)   return 1;  if (len < blen - 1)   return -1;  int[] bval=b.value;  int bstart=0;  int carry=0;  if (len != blen) {    if (bval[bstart] == 1) {      ++bstart;      carry=0x80000000;    } else     return -1;  }  int[] val=value;  for (int i=offset, j=bstart; i < len + offset; ) {    int bv=bval[j++];    long hb=((bv >>> 1) + carry) & LONG_MASK;    long v=val[i++] & LONG_MASK;    if (v != hb)     return v < hb ? -1 : 1;    carry=(bv & 1) << 31;  }  return carry == 0 ? 0 : -1;}  }
class C{  public void handleTblRequestHandlerListButtonDeleteRequest(RequestInvocationEvent event) throws ModelControlException {  setSubmitCycle(true);  CCActionTable table=(CCActionTable)getChild(SCSAML2SOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);  table.restoreStateData();  CCActionTableModel tblModel=(CCActionTableModel)propertySheetModel.getModel(SCSAML2SOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);  Integer[] selected=tblModel.getSelectedRows();  if ((selected != null) && (selected.length > 0)) {    OrderedSet tblValues=(OrderedSet)getPageSessionAttribute(SCSAML2SOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST);    tblValues.removeAll(selected);    setPageSessionAttribute(SCSAML2SOAPBindingModelImpl.ATTRIBUTE_NAME_REQUEST_HANDLER_LIST,tblValues);    populateRequestHandlerListTable(tblValues);    setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.profile.modified");    setPageSessionAttribute(PAGE_MODIFIED,"1");  }  forwardTo();}  }
class C{  public static RemoteException wrapException(Throwable orig){  if (utilDelegate != null) {    return utilDelegate.wrapException(orig);  }  return null;}  }
class C{  public boolean hasNext(Pattern pattern){  ensureOpen();  if (pattern == null)   throw new NullPointerException();  hasNextPattern=null;  saveState();  while (true) {    if (getCompleteTokenInBuffer(pattern) != null) {      matchValid=true;      cacheResult();      return revertState(true);    }    if (needInput)     readInput(); else     return revertState(false);  }}  }
class C{  @Override public String scrollToPositionAtProgress(float touchFraction){  if (mWidgets == null) {    return "";  }  int rowCount=mWidgets.getPackageSize();  if (rowCount == 0) {    return "";  }  stopScroll();  getCurScrollState(mScrollPosState);  float pos=rowCount * touchFraction;  int availableScrollHeight=getAvailableScrollHeight(rowCount,mScrollPosState.rowHeight);  LinearLayoutManager layoutManager=((LinearLayoutManager)getLayoutManager());  layoutManager.scrollToPositionWithOffset(0,(int)-(availableScrollHeight * touchFraction));  int posInt=(int)((touchFraction == 1) ? pos - 1 : pos);  PackageItemInfo p=mWidgets.getPackageItemInfo(posInt);  return p.titleSectionName;}  }
class C{  private void load(DataInputStream dis) throws Exception {  if (dis.readByte() != 1) {    throw new StreamCorruptedException("File format not recognised");  }  String groupId=dis.readUTF();  if ("TZDB".equals(groupId) == false) {    throw new StreamCorruptedException("File format not recognised");  }  int versionCount=dis.readShort();  for (int i=0; i < versionCount; i++) {    versionId=dis.readUTF();  }  int regionCount=dis.readShort();  String[] regionArray=new String[regionCount];  for (int i=0; i < regionCount; i++) {    regionArray[i]=dis.readUTF();  }  regionIds=Arrays.asList(regionArray);  int ruleCount=dis.readShort();  Object[] ruleArray=new Object[ruleCount];  for (int i=0; i < ruleCount; i++) {    byte[] bytes=new byte[dis.readShort()];    dis.readFully(bytes);    ruleArray[i]=bytes;  }  for (int i=0; i < versionCount; i++) {    int versionRegionCount=dis.readShort();    regionToRules.clear();    for (int j=0; j < versionRegionCount; j++) {      String region=regionArray[dis.readShort()];      Object rule=ruleArray[dis.readShort() & 0xffff];      regionToRules.put(region,rule);    }  }}  }
class C{  public void error(String message,Throwable th){  if (errorEnabled()) {    record("ERROR: " + message,th);  }}  }
class C{  public RefQueueWorker(ReferenceQueue<?> queue,RefQueueHandler handler){  if (queue == null) {    throw new IllegalArgumentException("Queue must not be null.");  }  if (handler == null) {    throw new IllegalArgumentException("Handler must not be null.");  }  refQueue=queue;  refHandler=handler;}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(Foo foo){  return fooPersistence.remove(foo);}  }
class C{  @Deprecated protected ActionListener createKeyboardHomeListener(){  return new KeyboardHomeHandler();}  }
class C{  private boolean isOpen(){  return buf != null;}  }
class C{  private boolean point_near_rectangle(double p_x,double p_y,Rectangle p_rect,double p_dist){  if (p_x < p_rect.x - p_dist) {    return false;  }  if (p_y < p_rect.y - p_dist) {    return false;  }  if (p_x > p_rect.x + p_rect.width + p_dist) {    return false;  }  if (p_y > p_rect.y + p_rect.height + p_dist) {    return false;  }  return true;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatasetnodevalue.class,args);}  }
class C{  public boolean isRequired(){  return required;}  }
class C{  public void offSwitcher(){  this.on=false;}  }
class C{  public com.sun.identity.liberty.ws.interaction.jaxb.StatusType createStatusType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.interaction.jaxb.impl.StatusTypeImpl();}  }
class C{  public static String read4Chars(RandomAccessFile raf) throws IOException {  StringBuffer sbuf=new StringBuffer(4);  for (int i=0; i < 4; i++) {    char ch=(char)raf.read();    sbuf.append(ch);  }  return sbuf.toString();}  }
class C{  public boolean isShuttingDown(){  return shuttingDown;}  }
class C{  public String[][] logRecRead(Set tableNames,LogQuery logQuery,java.util.logging.LogManager logMgr,boolean sourceData) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, SQLException, Exception {  String sortField=null;  this.cleaner();  Set tblNames=new HashSet();  StringBuilder allTablesSB=new StringBuilder("");  for (Iterator it=tableNames.iterator(); it.hasNext(); ) {    String ss=(String)it.next();    String ss2=ss.replace('.','_');    tblNames.add(ss2);    allTablesSB.append(ss2);  }  try {    this.databaseURL=logMgr.getProperty(LogConstants.LOG_LOCATION);    this.dbDriver=logMgr.getProperty(LogConstants.DB_DRIVER);    this.dbUserName=logMgr.getProperty(LogConstants.DB_USER);    this.dbPassWord=logMgr.getProperty(LogConstants.DB_PASSWORD);    this.maxRecordsStr=logMgr.getProperty(LogConstants.MAX_RECORDS);  } catch (  Exception e) {    Debug.error("DBLogRecReadSet:config: ",e);    throw e;  }  if (this.dbDriver.toLowerCase().indexOf("oracle") != -1) {    isMySQL=false;  } else   if (this.dbDriver.toLowerCase().indexOf("mysql") != -1) {    isMySQL=true;  } else {    isMySQL=false;    Debug.warning("DBlogRecRead:assuming driver: '" + this.dbDriver + "' is Oracle-compatible.");  }  try {    this.maxRecords=Integer.parseInt(maxRecordsStr);  } catch (  NumberFormatException nfe) {    if (Debug.warningEnabled()) {      Debug.warning("DBlogRecRead(s): maxRecords error (" + maxRecordsStr + "), set to MAX");    }    this.maxRecords=LogConstants.MAX_RECORDS_DEFAULT_INT;  }  String selectStr;  if (!isMySQL) {    if (sourceData == true) {      String temps=logQuery.getSortingField();      if (temps != null) {        sortField=temps.trim();      }      String columns="*";      ArrayList sCol=logQuery.getColumns();      if (sCol != null) {        StringBuilder colSB=new StringBuilder();        int sSize=sCol.size();        for (int i=0; i < sSize; i++) {          colSB.append((String)sCol.get(i));          if ((i + 1) < sSize) {            colSB.append(", ");          }        }        columns=colSB.toString();      }      selectStr=lq2Select(tblNames,columns,logQuery);      if (Debug.messageEnabled()) {        Debug.message("logRecRead/4:selectStr = " + selectStr);      }    } else {      String columns="*";      selectStr=lq2Select(tblNames,columns,null);      if (Debug.messageEnabled()) {        Debug.message("logRecRead/4.2:selectStr = " + selectStr);      }    }    String[][] tableResults;    try {      connectToDatabase(dbUserName,dbPassWord);    } catch (    SQLException sqe) {      Debug.error("DBlogRecRead:connect:SQE:code=" + sqe.getErrorCode() + ", msg="+ sqe.getMessage());      throw sqe;    }catch (    ClassNotFoundException cnfe) {      throw cnfe;    }    String selStr=selectStr;    Statement stmt=null;    int numberOfRows=0;    try {      stmt=conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);      if (Debug.messageEnabled()) {        Debug.message("DBlogRecRead:about to execute: " + selStr);      }      ResultSet rs=stmt.executeQuery(selStr);      ResultSetMetaData rsmd=rs.getMetaData();      int numberOfColumns=rsmd.getColumnCount();      if (Debug.messageEnabled()) {        Debug.message("DBlogRecRead:#columns = " + numberOfColumns);      }      String[] spltHdrStr=new String[numberOfColumns];      for (int i=1; i <= numberOfColumns; i++) {        String tempstr=rsmd.getColumnName(i);        if (Debug.messageEnabled()) {          Debug.message("DBlogRecRead:col #" + i + " name = "+ tempstr);        }        spltHdrStr[i - 1]=tempstr;      }      listOfValidRecords.add(spltHdrStr);      while (rs.next()) {        numberOfRows++;      }      if (Debug.messageEnabled()) {        Debug.message("DBlogRecRead:#rows = " + numberOfRows);      }      if (numberOfRows == 0) {        stmt.close();        try {          conn.close();        } catch (        SQLException ex) {          Debug.error("DBlogRecRead:rows=0:conn.close (" + ex.getErrorCode() + "): "+ ex.getMessage());        }        int recSize=listOfValidRecords.size();        if (recSize <= 0) {          return null;        }        queryResult=new String[recSize][];        for (int i=0; i < recSize; i++) {          queryResult[i]=(String[])listOfValidRecords.get(i);        }        return queryResult;      }      if (numberOfRows > this.maxRecords) {        stmt.close();        try {          conn.close();        } catch (        SQLException ex) {          Debug.error("DBlogRecRead:conn.close (" + ex.getErrorCode() + "): "+ ex.getMessage());        }        throw new AMLogException(AMLogException.LOG_DB_TOOMANYRECORDS);      }      boolean isFirst=rs.first();      if (isFirst == false) {        Debug.error("DBlogRecRead:first() is false!");      }      int rowsToAlloc=numberOfRows;      tableResults=new String[rowsToAlloc][numberOfColumns];      String result=null;      int rowCount=0;      for (int i=0; i < numberOfColumns; i++) {        result=rs.getString(i + 1);        tableResults[0][i]=result;      }      rowCount=1;      while (rs.next()) {        for (int i=0; i < numberOfColumns; i++) {          result=rs.getString(i + 1);          tableResults[rowCount][i]=result;        }        rowCount++;      }      stmt.close();    } catch (    SQLException se) {      Debug.error("DBlogRecRead:query:SQE:code=" + se.getErrorCode() + ", msg="+ se.getMessage());      throw se;    }    try {      this.getRecords(tableResults,sourceData);    } catch (    IOException e) {      throw e;    }catch (    IllegalArgumentException e) {      throw e;    }catch (    RuntimeException e) {      throw e;    }catch (    Exception e) {      throw e;    }    int recSize=listOfValidRecords.size();    if (recSize <= 0) {      return null;    }    try {      conn.close();    } catch (    SQLException ex) {      Debug.error("DBlogRecRead:conn.close (" + ex.getErrorCode() + "): "+ ex.getMessage());    }    queryResult=new String[recSize][];    for (int i=0; i < recSize; i++) {      queryResult[i]=(String[])listOfValidRecords.get(i);    }  } else {    String columns=null;    if (sourceData == true) {      String temps=logQuery.getSortingField();      if (temps != null) {        sortField=temps.trim();      }      columns="*";      ArrayList sCol=logQuery.getColumns();      if (sCol != null) {        StringBuilder colSB=new StringBuilder();        int sSize=sCol.size();        for (int i=0; i < sSize; i++) {          colSB.append((String)sCol.get(i));          if ((i + 1) < sSize) {            colSB.append(", ");          }        }        columns=colSB.toString();      }    } else {      columns="*";    }    boolean isFirstTable=true;    int totalNumberOfRows=0;    int recSize=0;    for (Iterator it=tblNames.iterator(); it.hasNext(); ) {      String thisTable=(String)it.next();      if (sourceData == true) {        selectStr=lq2Select(thisTable,columns,logQuery);        if (Debug.messageEnabled()) {          Debug.message("logRecRead/5:selectStr = " + selectStr);        }      } else {        selectStr=lq2Select(thisTable,columns,null);        if (Debug.messageEnabled()) {          Debug.message("logRecRead/5.2:selectStr = " + selectStr);        }      }      String[][] tableResults=null;      try {        connectToDatabase(dbUserName,dbPassWord);      } catch (      SQLException sqe) {        Debug.error("DBlogRecRead:connect:SQE:code=" + sqe.getErrorCode() + ", msg="+ sqe.getMessage());        throw sqe;      }catch (      ClassNotFoundException cnfe) {        throw cnfe;      }      String selStr=selectStr;      Statement stmt=null;      int numberOfRows=0;      try {        stmt=conn.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE,ResultSet.CONCUR_UPDATABLE);        if (Debug.messageEnabled()) {          Debug.message("DBlogRecRead:about to execute: " + selStr);        }        ResultSet rs=stmt.executeQuery(selStr);        ResultSetMetaData rsmd=rs.getMetaData();        int numberOfColumns=rsmd.getColumnCount();        if (Debug.messageEnabled()) {          Debug.message("DBlogRecRead:#columns = " + numberOfColumns);        }        if (isFirstTable) {          String[] spltHdrStr=new String[numberOfColumns];          for (int i=1; i <= numberOfColumns; i++) {            String tempstr=rsmd.getColumnName(i);            if (Debug.messageEnabled()) {              Debug.message("DBlogRecRead:col #" + i + " name = "+ tempstr);            }            spltHdrStr[i - 1]=tempstr;          }          listOfValidRecords.add(spltHdrStr);        }        numberOfRows=0;        while (rs.next()) {          numberOfRows++;        }        totalNumberOfRows+=numberOfRows;        if (totalNumberOfRows > this.maxRecords) {          stmt.close();          try {            conn.close();          } catch (          SQLException ex) {            Debug.error("DBlogRecRead:conn.close (" + ex.getErrorCode() + "): "+ ex.getMessage());          }          throw new AMLogException(AMLogException.LOG_DB_TOOMANYRECORDS);        }        if (numberOfRows > 0) {          boolean isFirst=rs.first();          if (isFirst == false) {            Debug.error("DBlogRecRead:first() is false!");          }          tableResults=new String[numberOfRows][numberOfColumns];          String result=null;          int rowCount=0;          do {            for (int i=0; i < numberOfColumns; i++) {              result=rs.getString(i + 1);              tableResults[rowCount][i]=result;            }            rowCount++;          } while (rs.next());        }        stmt.close();      } catch (      SQLException se) {        Debug.error("DBlogRecRead:query:SQE:code=" + se.getErrorCode() + ", msg="+ se.getMessage());        throw se;      }      if (numberOfRows > 0) {        try {          this.getRecords(tableResults,sourceData);        } catch (        IOException e) {          throw e;        }catch (        IllegalArgumentException e) {          throw e;        }catch (        RuntimeException e) {          throw e;        }catch (        Exception e) {          throw e;        }      }      if (isFirstTable) {        isFirstTable=false;      }    }    try {      conn.close();    } catch (    SQLException ex) {      Debug.error("DBlogRecRead:conn.close (" + ex.getErrorCode() + "): "+ ex.getMessage());    }    if (logQuery != null) {      String sortByField=logQuery.getSortingField();      if (sortByField != null) {        try {          this.sorter=new LogRecordSorter(sortByField,listOfValidRecords);          queryResult=this.sorter.getSortedRecords();        } catch (        NoSuchFieldException e) {          Debug.error("DBlogRecRead/5:sort:nsfe: " + e.getMessage());          throw e;        }catch (        IllegalArgumentException e) {          Debug.error("DBlogRecRead/5:sort:iae: " + e.getMessage());          throw e;        }catch (        RuntimeException e) {          Debug.error("DBlogRecRead/5:sort:rte: " + e.getMessage());          throw e;        }catch (        Exception e) {          Debug.error("DBlogRecRead/5:sort:ex: " + e.getMessage());          throw e;        }        return (queryResult);      }    }    recSize=listOfValidRecords.size();    if (recSize <= 0) {      return null;    }    queryResult=new String[recSize][];    for (int i=0; i < recSize; i++) {      queryResult[i]=(String[])listOfValidRecords.get(i);    }  }  return queryResult;}  }
class C{  private void updateOptionPaneState(){  int type=-2;  boolean closable=wasClosable;  Object obj=frame.getClientProperty("JInternalFrame.messageType");  if (obj == null) {    return;  }  if (obj instanceof Integer) {    type=((Integer)obj).intValue();  }switch (type) {case JOptionPane.ERROR_MESSAGE:    selectedBackgroundKey="OptionPane.errorDialog.titlePane.background";  selectedForegroundKey="OptionPane.errorDialog.titlePane.foreground";selectedShadowKey="OptionPane.errorDialog.titlePane.shadow";closable=false;break;case JOptionPane.QUESTION_MESSAGE:selectedBackgroundKey="OptionPane.questionDialog.titlePane.background";selectedForegroundKey="OptionPane.questionDialog.titlePane.foreground";selectedShadowKey="OptionPane.questionDialog.titlePane.shadow";closable=false;break;case JOptionPane.WARNING_MESSAGE:selectedBackgroundKey="OptionPane.warningDialog.titlePane.background";selectedForegroundKey="OptionPane.warningDialog.titlePane.foreground";selectedShadowKey="OptionPane.warningDialog.titlePane.shadow";closable=false;break;case JOptionPane.INFORMATION_MESSAGE:case JOptionPane.PLAIN_MESSAGE:selectedBackgroundKey=selectedForegroundKey=selectedShadowKey=null;closable=false;break;default :selectedBackgroundKey=selectedForegroundKey=selectedShadowKey=null;break;}if (closable != frame.isClosable()) {frame.setClosable(closable);}}  }
class C{  private static double parseDoubleValue(String parseString,String openTag,String closeTag,DataTypeValidationException exception) throws DataTypeValidationException {  String tagValue;  tagValue=parseStringValue(parseString,openTag,closeTag,exception);  double doubleValue;  try {    doubleValue=Double.parseDouble(tagValue);  } catch (  NumberFormatException e) {    throw e;  }  return doubleValue;}  }
class C{  private static void toUpperCase(String s,StringBuilder buffer){  if (s == null) {    return;  }  int length=s.length();  for (int i=0; i < length; i++) {    char c=s.charAt(i);    if ((c & 0x7F) != c) {      buffer.append(s.substring(i).toUpperCase());      return;    }switch (c) {case 'a':      buffer.append('A');    break;case 'b':  buffer.append('B');break;case 'c':buffer.append('C');break;case 'd':buffer.append('D');break;case 'e':buffer.append('E');break;case 'f':buffer.append('F');break;case 'g':buffer.append('G');break;case 'h':buffer.append('H');break;case 'i':buffer.append('I');break;case 'j':buffer.append('J');break;case 'k':buffer.append('K');break;case 'l':buffer.append('L');break;case 'm':buffer.append('M');break;case 'n':buffer.append('N');break;case 'o':buffer.append('O');break;case 'p':buffer.append('P');break;case 'q':buffer.append('Q');break;case 'r':buffer.append('R');break;case 's':buffer.append('S');break;case 't':buffer.append('T');break;case 'u':buffer.append('U');break;case 'v':buffer.append('V');break;case 'w':buffer.append('W');break;case 'x':buffer.append('X');break;case 'y':buffer.append('Y');break;case 'z':buffer.append('Z');break;default :buffer.append(c);}}}  }
class C{  protected List<List<Record>> createListsOfRecordsOfTheSameContentType(List<Record> records){  List<List<Record>> result=new LinkedList();  int recordPointer=0;  Record record=records.get(recordPointer);  List<Record> currentRecords=new LinkedList<>();  currentRecords.add(record);  result.add(currentRecords);  recordPointer++;  while (recordPointer < records.size()) {    ProtocolMessageType previousMessageType=ProtocolMessageType.getContentType(record.getContentType().getValue());    record=records.get(recordPointer);    ProtocolMessageType currentMessageType=ProtocolMessageType.getContentType(record.getContentType().getValue());    if (currentMessageType == previousMessageType) {      currentRecords.add(record);    } else {      currentRecords=new LinkedList<>();      currentRecords.add(record);      result.add(currentRecords);    }    recordPointer++;  }  return result;}  }
class C{  protected void onSessionTimeout(RequestContext requestContext) throws ServletException {}  }
class C{  private static void copy(String resource,String directory) throws IOException {  mkdir(directory);  String fileName=resource.substring(resource.lastIndexOf("/") + 1);  File file=new File(directory + System.getProperty("file.separator") + fileName);  try (InputStream is=EmbeddedCassandraServerHelper.class.getResourceAsStream(resource);OutputStream out=new FileOutputStream(file)){    byte[] buf=new byte[1024];    int len;    while ((len=is.read(buf)) > 0) {      out.write(buf,0,len);    }    out.close();  } }  }
class C{  public FSAuthnDecisionHandler(String realm,String entityID,HttpServletRequest request){  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSAuthnDecisionHandler::Constructor called " + "with entityID" + entityID);  }  loginURL=SystemConfigurationUtil.getProperty(IFSConstants.IDP_LOGIN_URL);  if ((loginURL == null) || (loginURL.trim().length() == 0)) {    loginURL=FSServiceUtils.getBaseURL(request) + IFSConstants.LOGIN_PAGE;  }  loginURL=loginURL + IFSConstants.QUESTION_MARK + IFSConstants.ARGKEY+ IFSConstants.EQUAL_TO+ IFSConstants.NEWSESSION;  getIDPAuthContextInfo(realm,entityID);}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public DropTargetDropEvent(DropTargetContext dtc,Point cursorLocn,int dropAction,int srcActions,boolean isLocal){  this(dtc,cursorLocn,dropAction,srcActions);  isLocalTx=isLocal;}  }
class C{  public static boolean isNetworkConnected(Context context){  if (null == context) {    return false;  }  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  if (connectivityManager != null) {    NetworkInfo info=connectivityManager.getActiveNetworkInfo();    if (info != null && info.isConnected()) {      if (info.getState() == NetworkInfo.State.CONNECTED) {        return true;      }    }  }  return false;}  }
class C{  public void read(String tokenId,ResultHandler<Token,?> handler) throws CoreTokenException {  Reject.ifNull(tokenId,handler);  try {    taskExecutor.execute(tokenId,taskFactory.read(tokenId,handler));  } catch (  DataLayerException e) {    throw new CoreTokenException("Error in data layer",e);  }}  }
class C{  @Override public ConditionDecision evaluate(String realm,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  if (eCondition == null) {    return new ConditionDecision(false,Collections.EMPTY_MAP);  }  ConditionDecision decision=eCondition.evaluate(realm,subject,resourceName,environment);  return ConditionDecision.newBuilder(!decision.isSatisfied()).setResponseAttributes(decision.getResponseAttributes()).build();}  }
class C{  boolean try_remove_edge(int p_net_no,AwtreeShapeSearch p_autoroute_search_tree){  if (!(from_room instanceof ExpandRoomFreespaceIncomplete))   return false;  ExpandRoomFreespaceIncomplete curr_incomplete_room=(ExpandRoomFreespaceIncomplete)from_room;  int remove_edge_no=-1;  ShapeTileSimplex room_simplex=curr_incomplete_room.get_shape().to_Simplex();  double room_shape_area=room_simplex.area();  int prev_edge_no=-1;  int curr_edge_no=0;  for (  SortedRoom next_neighbour : sorted_neighbours) {    if (next_neighbour.touching_side_no_of_room == prev_edge_no)     continue;    if (next_neighbour.touching_side_no_of_room == curr_edge_no) {      prev_edge_no=curr_edge_no;      ++curr_edge_no;    } else {      remove_edge_no=curr_edge_no;      break;    }  }  if (remove_edge_no < 0 && curr_edge_no < room_simplex.border_line_count()) {    remove_edge_no=curr_edge_no;  }  if (remove_edge_no >= 0) {    ShapeTileSimplex enlarged_shape=room_simplex.remove_border_line(remove_edge_no);    ExpandRoomFreespaceIncomplete enlarged_room=new ExpandRoomFreespaceIncomplete(enlarged_shape,curr_incomplete_room.get_layer(),curr_incomplete_room.get_contained_shape());    Collection<ExpandRoomFreespaceIncomplete> new_rooms=p_autoroute_search_tree.complete_shape(enlarged_room,p_net_no,null,null);    if (new_rooms.size() != 1) {      System.out.println("AutorouteEngine.calculate_doors: 1 completed shape expected");      return false;    }    boolean remove_edge=false;    if (new_rooms.size() == 1) {      ExpandRoomFreespaceIncomplete new_shape=new_rooms.iterator().next();      if (new_shape.get_shape().area() > room_shape_area) {        remove_edge=true;      }    }    if (remove_edge) {      Iterator<ExpandRoomFreespaceIncomplete> it2=new_rooms.iterator();      ExpandRoomFreespaceIncomplete new_room=it2.next();      curr_incomplete_room.set_shape(new_room.get_shape());      curr_incomplete_room.set_contained_shape(new_room.get_contained_shape());      return true;    }  }  return false;}  }
class C{  private boolean destroySessionIfNecessary(InternalSession sess){  boolean wasDestroyed=false;  try {    wasDestroyed=performSessionDestroyIfNecessary(sess);  } catch (  Exception ex) {    debug.error("Exception in session destroyIfNecessary() : ",ex);    wasDestroyed=true;  }  if (wasDestroyed) {    try {      removeInternalSession(sess.getID());    } catch (    Exception ex) {      debug.error("Exception while removing session : ",ex);    }  }  return wasDestroyed;}  }
class C{  public void testCase15(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={1,2,3,4,5,6,7};  byte rBytes[]={0};  int aSign=-1;  int bSign=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  public AuthnSvcException(Throwable t){  super(t.getMessage());  fillInStackTrace();}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public boolean is_comvex(){  if (border_line_count() <= 2)   return true;  PlaPointInt prev_point=corners.get(border_line_count() - 1);  PlaPointInt curr_point=corners.get(0);  PlaPointInt next_point=corners.get(1);  for (int ind=0; ind < border_line_count(); ++ind) {    if (next_point.side_of(prev_point,curr_point) == PlaSide.ON_THE_RIGHT)     return false;    prev_point=curr_point;    curr_point=next_point;    if (ind == border_line_count() - 2)     next_point=corners.get(0); else     next_point=corners.get(ind + 2);  }  PlaLineInt first_line=new PlaLineInt(corners.get(border_line_count() - 1),corners.get(0));  PlaLineInt curr_line=new PlaLineInt(corners.get(0),corners.get(1));  PlaDirection first_direction=first_line.direction();  PlaDirection curr_direction=curr_line.direction();  long last_det=first_direction.determinant(curr_direction);  for (int ind2=2; ind2 < border_line_count(); ++ind2) {    curr_line=new PlaLineInt(curr_line.point_b,corners.get(ind2));    curr_direction=curr_line.direction();    long curr_det=first_direction.determinant(curr_direction);    if (last_det <= 0 && curr_det > 0)     return false;    last_det=curr_det;  }  return true;}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public static Set<String> toSet(Object... array){  Set<String> set=new HashSet<String>(array == null ? 0 : array.length);  if (array != null) {    for (    Object item : array) {      set.add(item.toString().trim());    }  }  return set;}  }
class C{  @Nullable @Override public ActionMode startSupportActionMode(@NonNull final ActionMode.Callback callback){  return delegate.startSupportActionMode(callback);}  }
class C{  public boolean addCSSAttributeFromHTML(MutableAttributeSet attr,CSS.Attribute key,String value){  Object iValue=css.getCssValue(key,value);  if (iValue != null) {    attr.addAttribute(key,iValue);    return true;  }  return false;}  }
class C{  public FrameBodyTSOC(){}  }
class C{  protected void childInsertedAtModelIndex(int index,boolean isExpandedAndVisible){  FHTreeStateNode aChild;  int maxCounter=getChildCount();  for (int counter=0; counter < maxCounter; counter++) {    aChild=(FHTreeStateNode)getChildAt(counter);    if (aChild.childIndex >= index) {      if (isExpandedAndVisible) {        adjustRowBy(1,counter);        adjustRowCountBy(1);      }      for (; counter < maxCounter; counter++)       ((FHTreeStateNode)getChildAt(counter)).childIndex++;      childCount++;      return;    }  }  if (isExpandedAndVisible) {    adjustRowBy(1,maxCounter);    adjustRowCountBy(1);  }  childCount++;}  }
class C{  public void enter(MetricReference metricReference){  Thread threadId=Thread.currentThread();  enter(threadId,metricReference);}  }
class C{  public void testClearBitNegativeInside1(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=15;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,92,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.clearBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public Object clone(){  SipUri retval=(SipUri)super.clone();  if (this.authority != null)   retval.authority=(Authority)this.authority.clone();  if (this.uriParms != null)   retval.uriParms=(NameValueList)this.uriParms.clone();  if (this.qheaders != null)   retval.qheaders=(NameValueList)this.qheaders.clone();  if (this.telephoneSubscriber != null)   retval.telephoneSubscriber=(TelephoneNumber)this.telephoneSubscriber.clone();  return retval;}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  public ResourceType build(){  Reject.ifNull(name,"ResourceType name may not be null.");  Reject.ifNull(uuid,"ResourceType UUID may not be null.");  return new ResourceType(this);}  }
class C{  public static String escapeValue(String str){  return DN.escapeAttributeValue(str);}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  returnToAuthProperties(null);}  }
class C{  public DoubleAccumulator(DoubleBinaryOperator accumulatorFunction,double identity){  this.function=accumulatorFunction;  base=this.identity=Double.doubleToRawLongBits(identity);}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  protected void startNode(Node node) throws org.xml.sax.SAXException {  if (m_contentHandler instanceof NodeConsumer) {    ((NodeConsumer)m_contentHandler).setOriginatingNode(node);  }  if (node instanceof Locator) {    Locator loc=(Locator)node;    m_locator.setColumnNumber(loc.getColumnNumber());    m_locator.setLineNumber(loc.getLineNumber());    m_locator.setPublicId(loc.getPublicId());    m_locator.setSystemId(loc.getSystemId());  } else {    m_locator.setColumnNumber(0);    m_locator.setLineNumber(0);  }switch (node.getNodeType()) {case Node.COMMENT_NODE:{      String data=((Comment)node).getData();      if (m_contentHandler instanceof LexicalHandler) {        LexicalHandler lh=((LexicalHandler)this.m_contentHandler);        lh.comment(data.toCharArray(),0,data.length());      }    }  break;case Node.DOCUMENT_FRAGMENT_NODE:break;case Node.DOCUMENT_NODE:break;case Node.ELEMENT_NODE:NamedNodeMap atts=((Element)node).getAttributes();int nAttrs=atts.getLength();for (int i=0; i < nAttrs; i++) {Node attr=atts.item(i);String attrName=attr.getNodeName();if (attrName.equals("xmlns") || attrName.startsWith("xmlns:")) {int index;String prefix=(index=attrName.indexOf(":")) < 0 ? "" : attrName.substring(index + 1);this.m_contentHandler.startPrefixMapping(prefix,attr.getNodeValue());}}String ns=m_dh.getNamespaceOfNode(node);if (null == ns) ns="";this.m_contentHandler.startElement(ns,m_dh.getLocalNameOfNode(node),node.getNodeName(),new AttList(atts,m_dh));break;case Node.PROCESSING_INSTRUCTION_NODE:{ProcessingInstruction pi=(ProcessingInstruction)node;String name=pi.getNodeName();if (name.equals("xslt-next-is-raw")) {nextIsRaw=true;} else {this.m_contentHandler.processingInstruction(pi.getNodeName(),pi.getData());}}break;case Node.CDATA_SECTION_NODE:{boolean isLexH=(m_contentHandler instanceof LexicalHandler);LexicalHandler lh=isLexH ? ((LexicalHandler)this.m_contentHandler) : null;if (isLexH) {lh.startCDATA();}dispatachChars(node);{if (isLexH) {lh.endCDATA();}}}break;case Node.TEXT_NODE:{if (nextIsRaw) {nextIsRaw=false;m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_DISABLE_OUTPUT_ESCAPING,"");dispatachChars(node);m_contentHandler.processingInstruction(javax.xml.transform.Result.PI_ENABLE_OUTPUT_ESCAPING,"");} else {dispatachChars(node);}}break;case Node.ENTITY_REFERENCE_NODE:{EntityReference eref=(EntityReference)node;if (m_contentHandler instanceof LexicalHandler) {((LexicalHandler)this.m_contentHandler).startEntity(eref.getNodeName());} else {}}break;default :}}  }
class C{  public static String decToHex(int dec){  String hex=Integer.toHexString(dec);  return hex.length() == 1 ? "0" + hex : hex;}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    checkNotClosed();    int ch=readChar();    if (lastWasCR && ch == '\n') {      ch=readChar();    }    lastWasCR=false;    return ch;  }}  }
class C{  @Override public ExpandRoomComplete other_room_complete(ExpandRoomComplete p_room){  ExpandRoom result=other_room(p_room);  if (result == null)   return null;  if (result instanceof ExpandRoomComplete)   return (ExpandRoomComplete)result;  return null;}  }
class C{  public Mp4TagBinaryField(String id,ByteBuffer raw) throws UnsupportedEncodingException {  super(id,raw);}  }
class C{  public DelegationException(String message){  super(message);}  }
class C{  public ArrayDeque(){  elements=new Object[16];}  }
class C{  @Inject public StatelessTokenStore(StatefulTokenStore statefulTokenStore,JwtBuilderFactory jwtBuilder,OAuth2ProviderSettingsFactory providerSettingsFactory,@Named(OAuth2Constants.DEBUG_LOG_NAME) Debug logger,OpenIdConnectClientRegistrationStore clientRegistrationStore,RealmNormaliser realmNormaliser,OAuth2UrisFactory oAuth2UrisFactory,Blacklist<Blacklistable> tokenBlacklist,CTSPersistentStore cts,TokenAdapter<StatelessTokenMetadata> tokenAdapter,OAuth2Utils utils){  this.statefulTokenStore=statefulTokenStore;  this.jwtBuilder=jwtBuilder;  this.providerSettingsFactory=providerSettingsFactory;  this.logger=logger;  this.clientRegistrationStore=clientRegistrationStore;  this.realmNormaliser=realmNormaliser;  this.oAuth2UrisFactory=oAuth2UrisFactory;  this.tokenBlacklist=tokenBlacklist;  this.cts=cts;  this.tokenAdapter=tokenAdapter;  this.utils=utils;}  }
class C{  public boolean equals(java.lang.Object obj){  if (stubDelegate == null) {    setDefaultDelegate();  }  if (stubDelegate != null) {    return stubDelegate.equals(this,obj);  }  return false;}  }
class C{  public void _read(InputStream input){  value=input.read_longlong();}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void add(N node){  if (theNeighbors.containsKey(node))   return;  theNeighbors.put(node,new ArraySet<N>());}  }
class C{  public boolean bool(XPathContext xctxt) throws javax.xml.transform.TransformerException {  return (m_left.bool(xctxt) && m_right.bool(xctxt));}  }
class C{  private void readStateForDomain(final Entry<DN,String> domainEntry,final ChangelogState state) throws ChangelogException {  final File domainDirectory=getDomainPath(domainEntry.getValue());  final DN domainDN=domainEntry.getKey();  final String generationId=retrieveGenerationId(domainDirectory);  if (generationId != null) {    state.setDomainGenerationId(domainDN,toGenerationId(generationId));  }  final File[] serverIds=domainDirectory.listFiles(SERVER_ID_FILE_FILTER);  if (serverIds == null) {    throw new ChangelogException(ERR_CHANGELOG_READ_STATE_CANT_READ_DOMAIN_DIRECTORY.get(replicationRootPath,domainDirectory.getPath()));  }  for (  final File serverId : serverIds) {    readStateForServerId(domainDN,serverId,state);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(setAttributeNS03.class,args);}  }
class C{  public void beginDisplay(DisplayEvent event){  setDisplayFieldValue(REDIRECT_URL,loginURL);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  @Override public long contentLength(){  long size;  try {    size=Long.parseLong(request.getHeader(FileUploadBase.CONTENT_LENGTH));  } catch (  NumberFormatException e) {    size=request.getContentLength();  }  return size;}  }
class C{  private boolean isRecording(){  return currentRecord != null;}  }
class C{  void mergesort(Vector a,Vector b,int l,int r,XPathContext support) throws TransformerException {  if ((r - l) > 0) {    int m=(r + l) / 2;    mergesort(a,b,l,m,support);    mergesort(a,b,m + 1,r,support);    int i, j, k;    for (i=m; i >= l; i--) {      if (i >= b.size())       b.insertElementAt(a.elementAt(i),i); else       b.setElementAt(a.elementAt(i),i);    }    i=l;    for (j=(m + 1); j <= r; j++) {      if (r + m + 1 - j >= b.size())       b.insertElementAt(a.elementAt(j),r + m + 1 - j); else       b.setElementAt(a.elementAt(j),r + m + 1 - j);    }    j=r;    int compVal;    for (k=l; k <= r; k++) {      if (i == j)       compVal=-1; else       compVal=compare((NodeCompareElem)b.elementAt(i),(NodeCompareElem)b.elementAt(j),0,support);      if (compVal < 0) {        a.setElementAt(b.elementAt(i),k);        i++;      } else       if (compVal > 0) {        a.setElementAt(b.elementAt(j),k);        j--;      }    }  }}  }
class C{  static public void assertSame(Object expected,Object actual){  assertSame(null,expected,actual);}  }
class C{  protected DirectoryFileFilter(){}  }
class C{  public CRLException(String message){  super(message);}  }
class C{  public SpannableStringBuilder(CharSequence text,int start,int end){  int srclen=end - start;  if (srclen < 0)   throw new StringIndexOutOfBoundsException();  char[] array=ArrayUtils.newUnpaddedCharArray(GrowingArrayUtils.growSize(srclen));  TextUtils.getChars(text,start,end,array,0);  init(array,start,end);  if (text instanceof Spanned) {    Spanned sp=(Spanned)text;    Object[] spans=sp.getSpans(start,end,Object.class);    for (int i=0; i < spans.length; i++) {      if (spans[i] instanceof NoCopySpan) {        continue;      }      int st=sp.getSpanStart(spans[i]) - start;      int en=sp.getSpanEnd(spans[i]) - start;      int fl=sp.getSpanFlags(spans[i]);      if (st < 0)       st=0;      if (st > end - start)       st=end - start;      if (en < 0)       en=0;      if (en > end - start)       en=end - start;      setSpan(false,spans[i],st,en,fl);    }    restoreInvariants();  }}  }
class C{  public AuthenticationNotSupportedException(){  super();}  }
class C{  public FilenameUtils(){  super();}  }
class C{  final int fullyRelease(Node node){  boolean failed=true;  try {    int savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  private static UnbindRequestProtocolOp readUnbindRequest(ASN1Reader reader) throws LDAPException {  try {    reader.readNull();    return new UnbindRequestProtocolOp();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_UNBIND_DECODE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }}  }
class C{  public ShortHolder(short initial){  value=initial;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(prefix03.class,args);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr attribute;  String attrName;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("emp:address");  testAddr=(Element)elementList.item(0);  assertNotNull("empAddrNotNull",testAddr);  attribute=testAddr.getAttributeNodeNS("http://www.nist.gov","domestic");  attrName=attribute.getNodeName();  assertEquals("attrName","emp:domestic",attrName);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Attr attribute;  NodeList elementList;  String attrName;  String attrValue;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:employee");  element=(Element)elementList.item(0);  assertNotNull("empEmployeeNotNull",element);  element.setAttributeNS("http://www.w3.org/DOM/Test/1","defaultAttr","default1");  element.setAttributeNS("http://www.w3.org/DOM/Test/2","defaultAttr","default2");  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Test/1","defaultAttr");  attrName=attribute.getNodeName();  attrValue=attribute.getNodeValue();  assertEquals("elementsetattributens03_attrName","defaultAttr",attrName);  assertEquals("elementsetattributens03_attrValue","default1",attrValue);}  }
class C{  public TransformerConfigurationException(Throwable e){  super(e);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  int sourceNode=transformer.getXPathContext().getCurrentNode();  XObject var=getValue(transformer,sourceNode);  transformer.getXPathContext().getVarStack().setLocalVariable(m_index,var);}  }
class C{  private TaskState shouldStart(Task task){  TaskState state=task.getTaskState();  if (state == TaskState.RECURRING) {    state=null;  }  if (state != null && TaskState.isDone(state)) {    return state;  }  if (!isRunning) {    return TaskState.UNSCHEDULED;  }  if (task.getScheduledStartTime() > TimeThread.getTime()) {    return TaskState.WAITING_ON_START_TIME;  }  LinkedList<String> dependencyIDs=task.getDependencyIDs();  if (dependencyIDs != null) {    for (    String dependencyID : dependencyIDs) {      Task t=tasks.get(dependencyID);      if (t != null) {        TaskState tState=t.getTaskState();        if (!TaskState.isDone(tState)) {          return TaskState.WAITING_ON_DEPENDENCY;        }        if (!TaskState.isSuccessful(tState)) {          FailedDependencyAction action=task.getFailedDependencyAction();switch (action) {case CANCEL:            cancelTask(task.getTaskID());          return task.getTaskState();case DISABLE:        task.setTaskState(TaskState.DISABLED);      return task.getTaskState();default :    break;}}}}}return TaskState.RUNNING;}  }
class C{  public Object clone() throws CloneNotSupportedException {  chooseFirstProvider();  if (sigSpi instanceof Cloneable) {    SignatureSpi sigSpiClone=(SignatureSpi)sigSpi.clone();    Signature that=new Delegate(sigSpiClone,((Signature)this).algorithm);    that.provider=((Signature)this).provider;    return that;  } else {    throw new CloneNotSupportedException();  }}  }
class C{  private final String _decodeShortUnicodeName(int len) throws IOException {  int outPtr=0;  char[] outBuf=_textBuffer.emptyAndGetCurrentSegment();  int inPtr=_inputPtr;  _inputPtr+=len;  final int[] codes=SmileConstants.sUtf8UnitLengths;  final byte[] inBuf=_inputBuffer;  for (int end=inPtr + len; inPtr < end; ) {    int i=inBuf[inPtr++] & 0xFF;    int code=codes[i];    if (code != 0) {switch (code) {case 1:        i=((i & 0x1F) << 6) | (inBuf[inPtr++] & 0x3F);      break;case 2:    i=((i & 0x0F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6) | (inBuf[inPtr++] & 0x3F);  break;case 3:i=((i & 0x07) << 18) | ((inBuf[inPtr++] & 0x3F) << 12) | ((inBuf[inPtr++] & 0x3F) << 6)| (inBuf[inPtr++] & 0x3F);i-=0x10000;outBuf[outPtr++]=(char)(0xD800 | (i >> 10));i=0xDC00 | (i & 0x3FF);break;default :_reportError("Invalid byte " + Integer.toHexString(i) + " in short Unicode text block");}}outBuf[outPtr++]=(char)i;}return _textBuffer.setCurrentAndReturn(outPtr);}  }
class C{  @Override protected void onActivityResult(final int requestCode,final int resultCode,final Intent data){  super.onActivityResult(requestCode,resultCode,data);}  }
class C{  private static Object[] findRootNode(Node root,boolean xmpmetaRequired,Object[] result){  NodeList children=root.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    root=children.item(i);    if (Node.PROCESSING_INSTRUCTION_NODE == root.getNodeType() && XMPConst.XMP_PI.equals(((ProcessingInstruction)root).getTarget())) {      if (result != null) {        result[2]=((ProcessingInstruction)root).getData();      }    } else     if (Node.TEXT_NODE != root.getNodeType() && Node.PROCESSING_INSTRUCTION_NODE != root.getNodeType()) {      String rootNS=root.getNamespaceURI();      String rootLocal=root.getLocalName();      if ((XMPConst.TAG_XMPMETA.equals(rootLocal) || XMPConst.TAG_XAPMETA.equals(rootLocal)) && XMPConst.NS_X.equals(rootNS)) {        return findRootNode(root,false,result);      } else       if (!xmpmetaRequired && "RDF".equals(rootLocal) && XMPConst.NS_RDF.equals(rootNS)) {        if (result != null) {          result[0]=root;          result[1]=XMP_RDF;        }        return result;      } else {        Object[] newResult=findRootNode(root,xmpmetaRequired,result);        if (newResult != null) {          return newResult;        } else {          continue;        }      }    }  }  return null;}  }
class C{  public final int length(){  return array.length;}  }
class C{  public synchronized void requestPreviewFrame(Handler handler,int message){  OpenCamera theCamera=camera;  if (theCamera != null && previewing) {    previewCallback.setHandler(handler,message);    theCamera.getCamera().setOneShotPreviewCallback(previewCallback);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node genderNode;  Node entText;  EntityReference entReference;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  genderNode=genderList.item(2);  entReference=doc.createEntityReference("ent3");  assertNotNull("createdEntRefNotNull",entReference);  appendedChild=genderNode.appendChild(entReference);  entText=entReference.getFirstChild();  assertNotNull("entTextNotNull",entText);{    boolean success=false;    try {      ((CharacterData)entText).appendData("newString");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public static String signAndReturnQueryString(String queryString,String certAlias){  FSUtils.debug.message("FSSignatureUtil.signAndReturnQueryString: Called");  if (queryString == null || queryString.length() == 0) {    FSUtils.debug.error("FSSignatureUtil." + "signAndReturnQueryString: " + FSUtils.bundle.getString("nullInput"));    return null;  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureUtil.signAndReturnQueryString: queryString: " + queryString);    }  }  if (certAlias == null || certAlias.length() == 0) {    FSUtils.debug.error("FSSignatureUtil.signAndReturnQueryString: " + FSUtils.bundle.getString("nullInput"));    return null;  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureUtil.signAndReturnQueryString: certAlias: " + certAlias);    }  }  FSSignatureManager manager=FSSignatureManager.getInstance();  String sigAlg=IFSConstants.DEF_SIG_ALGO_JCA;  String algoId=null;  if (manager.getKeyProvider().getPrivateKey(certAlias).getAlgorithm().equals(IFSConstants.KEY_ALG_RSA)) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureUtil.signAndReturnQueryString: " + "private key algorithm is: RSA");    }    sigAlg=IFSConstants.ALGO_ID_SIGNATURE_RSA_JCA;    algoId=IFSConstants.ALGO_ID_SIGNATURE_RSA;  } else   if (manager.getKeyProvider().getPrivateKey(certAlias).getAlgorithm().equals(IFSConstants.KEY_ALG_DSA)) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSignatureUtil.signAndReturnQueryString: " + "private key algorithm is: DSA");    }    sigAlg=IFSConstants.ALGO_ID_SIGNATURE_DSA_JCA;    algoId=IFSConstants.ALGO_ID_SIGNATURE_DSA;  } else {    FSUtils.debug.error("FSSignatureUtil.signAndReturnQueryString: " + "private key algorithm is not supported");    return null;  }  byte[] signature=null;  if (queryString.charAt(queryString.length() - 1) != '&') {    queryString=queryString + "&";  }  queryString=queryString + "SigAlg=" + URLEncDec.encode(algoId);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSignatureUtil.signAndReturnQueryString: " + "Querystring to be signed: " + queryString);  }  try {    signature=manager.signBuffer(queryString,certAlias,sigAlg);  } catch (  FSSignatureException se) {    FSUtils.debug.error("FSSignatureUtil." + "signAndReturnQueryString: FSSignatureException occured " + "while signing query string: ",se);    return null;  }  if (signature == null) {    FSUtils.debug.error("FSSignatureUtil." + "signAndReturnQueryString: Signature generated is null");    return null;  }  String encodedSig=Base64.encode(signature);  queryString=queryString + "&" + "Signature="+ URLEncDec.encode(encodedSig);  if (FSUtils.debug.messageEnabled()) {    FSUtils.debug.message("FSSignatureUtil." + "signAndReturnQueryString:Signed Querystring: " + queryString);  }  return queryString;}  }
class C{  public boolean filterStart(){  if (getLogger().isDebugEnabled()) {    getLogger().debug("Starting filters");  }  boolean ok=true;synchronized (filterConfigs) {    filterConfigs.clear();    for (    Entry<String,FilterDef> entry : filterDefs.entrySet()) {      String name=entry.getKey();      if (getLogger().isDebugEnabled()) {        getLogger().debug(" Starting filter '" + name + "'");      }      try {        ApplicationFilterConfig filterConfig=new ApplicationFilterConfig(this,entry.getValue());        filterConfigs.put(name,filterConfig);      } catch (      Throwable t) {        t=ExceptionUtils.unwrapInvocationTargetException(t);        ExceptionUtils.handleThrowable(t);        getLogger().error(sm.getString("standardContext.filterStart",name),t);        ok=false;      }    }  }  return ok;}  }
class C{  public void seek(long pos) throws IOException {  checkClosed();  if (pos < flushedPos) {    throw new IndexOutOfBoundsException("pos < flushedPos!");  }  bitOffset=0;  raf.seek(pos);  streamPos=raf.getFilePointer();}  }
class C{  synchronized private void processNext(){  if (mQueue.isEmpty())   throw new RuntimeException("No active request in processNext()");  mQueue.remove();  if (!mQueue.isEmpty()) {    mQueue.peek().start(mBluetoothGatt);  }}  }
class C{  private void addMnemonic(int index,int mnemonic){  if (mnemonicToIndexMap == null) {    initMnemonics();  }  mnemonicInputMap.put(KeyStroke.getKeyStroke(mnemonic,BasicLookAndFeel.getFocusAcceleratorKeyMask()),"setSelectedIndex");  mnemonicToIndexMap.put(Integer.valueOf(mnemonic),Integer.valueOf(index));}  }
class C{  public int next(){  if (_currentNode == DTM.NULL) {    return DTM.NULL;  }  int node=_currentNode;  int eType;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    do {      node=_nextsib(node);    } while (node != DTM.NULL && _exptype(node) != nodeType);  } else {    while ((node=_nextsib(node)) != DTM.NULL) {      eType=_exptype(node);      if (eType < DTM.NTYPES) {        if (eType == nodeType) {          break;        }      } else       if (m_expandedNameTable.getType(eType) == nodeType) {        break;      }    }  }  _currentNode=node;  return (_currentNode == DTM.NULL) ? DTM.NULL : returnNode(makeNodeHandle(_currentNode));}  }
class C{  private boolean simulateEntryChange(Entry newEntry,ConfigurationRepository configRepository){  ArgumentCaptor<ConfigChangeListener> registeredListener=ArgumentCaptor.forClass(ConfigChangeListener.class);  verify(configRepository).registerChangeListener(eq(newEntry.getName()),registeredListener.capture());  return registeredListener.getValue().configChangeIsAcceptable(newEntry,new LocalizableMessageBuilder());}  }
class C{  public ObjectFactory(){}  }
class C{  public synchronized int size(){  return cache.size();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodeattributenodevalue.class,args);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.EncryptedNameIdentifierType createEncryptedNameIdentifierType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.EncryptedNameIdentifierTypeImpl();}  }
class C{  protected ListCellRenderer createRenderer(){  return new BasicComboBoxRenderer.UIResource();}  }
class C{  public SSOToken login(IndexType type,String indexName,Callback[] userInfo) throws AuthLoginException {  login(type,indexName,null,null,null,null);  SSOToken ssoToken=null;  Callback[] callbacks=null;  while (hasMoreRequirements()) {    callbacks=getRequirements();    if (callbacks != null) {      try {        submitRequirements(userInfo);      } catch (      Exception e) {        if (authDebug.messageEnabled()) {          authDebug.message("Error: submitRequirements with userInfo : " + e.getMessage());        }        throw new AuthLoginException(e);      }    }  }  try {    if (getStatus() == AuthContext.Status.SUCCESS) {      ssoToken=getSSOToken();    }  } catch (  Exception e) {    if (authDebug.messageEnabled()) {      authDebug.message("Error: getSSOToken : " + e.getMessage());    }    throw new AuthLoginException(e);  }  return ssoToken;}  }
class C{  public void processListenerEvent(String name){synchronized (jaasConfig) {    if (debug.messageEnabled()) {      debug.message("pLE, remove config " + name);    }    jaasConfig.remove(name);  }}  }
class C{  @Inject public OAuthTokenStore(CTSPersistentStore cts,TokenIdFactory tokenIdFactory,@Named(OAuth2Constants.CoreTokenParams.OAUTH_TOKEN_ADAPTER) TokenAdapter<JsonValue> tokenAdapter,OAuth2AuditLogger auditLogger,@Named(OAuth2Constants.DEBUG_LOG_NAME) Debug logger){  this.cts=cts;  this.tokenAdapter=tokenAdapter;  this.tokenIdFactory=tokenIdFactory;  this.auditLogger=auditLogger;  this.logger=logger;}  }
class C{  public VetoableChangeSupport(Object sourceBean){  if (sourceBean == null) {    throw new NullPointerException();  }  source=sourceBean;}  }
class C{  static Class lookUpFactoryClass(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  String factoryClassName=lookUpFactoryClassName(factoryId,propertiesFilename,fallbackClassName);  ClassLoader cl=findClassLoader();  if (factoryClassName == null) {    factoryClassName=fallbackClassName;  }  try {    Class providerClass=findProviderClass(factoryClassName,cl,true);    debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return providerClass;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + factoryClassName + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + factoryClassName + " could not be instantiated: "+ x,x);  }}  }
class C{  static void clear(){  cotCache.clear();}  }
class C{  public SessionRequest parseXML(){  if (document == null) {    return null;  }  sessionRequest=new SessionRequest();  Element elem=document.getDocumentElement();  String temp=elem.getAttribute("vers");  if (temp != null) {    sessionRequest.setRequestVersion(temp);  }  temp=elem.getAttribute("reqid");  if (temp != null) {    sessionRequest.setRequestID(temp);  }  String data=elem.getAttribute("requester");  if (data != null && data.length() > 0) {    try {      sessionRequest.setRequester(new String(Base64.decode(data),"UTF-8"));    } catch (    Exception e) {      throw new IllegalArgumentException("Illegal requester attribute value=" + data);    }  }  NodeList nodelist=elem.getElementsByTagName("GetSession");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setMethodID(SessionRequest.GetSession);    parseGetSessionAttributes((Element)nodelist.item(0));  }  nodelist=elem.getElementsByTagName("GetValidSessions");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setMethodID(SessionRequest.GetValidSessions);  }  nodelist=elem.getElementsByTagName("DestroySession");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setMethodID(SessionRequest.DestroySession);  }  nodelist=elem.getElementsByTagName("Logout");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setMethodID(SessionRequest.Logout);  }  nodelist=elem.getElementsByTagName("AddSessionListener");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setMethodID(SessionRequest.AddSessionListener);  }  nodelist=elem.getElementsByTagName("SetProperty");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setMethodID(SessionRequest.SetProperty);  }  nodelist=elem.getElementsByTagName("SessionID");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setSessionID(parseCDATA((Element)nodelist.item(0)));  }  nodelist=elem.getElementsByTagName("DestroySessionID");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setDestroySessionID(parseCDATA((Element)nodelist.item(0)));  }  nodelist=elem.getElementsByTagName("URL");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setNotificationURL(parseCDATA((Element)nodelist.item(0)));  }  nodelist=elem.getElementsByTagName("Property");  if (nodelist != null && nodelist.getLength() != 0) {    parsePropertyAttributes((Element)nodelist.item(0));  }  nodelist=elem.getElementsByTagName("Pattern");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setPattern(parseCDATA((Element)nodelist.item(0)));  }  nodelist=elem.getElementsByTagName("GetSessionCount");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setMethodID(SessionRequest.GetSessionCount);  }  nodelist=elem.getElementsByTagName("UUID");  if (nodelist != null && nodelist.getLength() != 0) {    sessionRequest.setUUID(parseCDATA((Element)nodelist.item(0)));  }  return sessionRequest;}  }
class C{  public void makeImmutable(){  if (mutable) {    if (attrValues != null) {      attrValues=Collections.unmodifiableList(attrValues);    }    if (valueStrings != null) {      valueStrings=Collections.unmodifiableList(valueStrings);    }    if (anyMap != null) {      anyMap=Collections.unmodifiableMap(anyMap);    }    mutable=false;  }}  }
class C{  public SQLFeatureNotSupportedException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  public EmbeddedSearchResultIterator(LinkedList results,Set excludeDNs){  resultIter=results.iterator();  this.excludeDNs=excludeDNs;  hasExcludeDNs=(excludeDNs != null) && !excludeDNs.isEmpty();}  }
class C{  public static Foo create(long fooId){  return getPersistence().create(fooId);}  }
class C{  public String toString(){  return hexify();}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  String instance=(String)getPageSessionAttribute(SERVICE_TYPE);  AuthPropertiesModel model=getAuthModel();  if (getServiceName(instance) == null) {    returnToAuthProperties(model.getLocalizedString("no.module.instance"));  } else {    if (model != null) {      try {        Map values=getValues();        model.setInstanceValues(instance,values);        setInlineAlertMessage(CCAlert.TYPE_INFO,"message.information","message.updated");      } catch (      AMConsoleException e) {        setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());      }    }    forwardTo();  }}  }
class C{  public RuleNet add(String p_name,int p_subnet_number,boolean p_contains_plane){  int new_net_no=net_list.size() + 1;  if (new_net_no >= max_legal_net_no)   throw new IllegalArgumentException("Nets.add_net: max_net_no out of range");  RuleNet new_net=new RuleNet(p_name,p_subnet_number,new_net_no,this,p_contains_plane);  net_list.add(new_net);  return new_net;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document aNewDoc;  DocumentType doc1Type;  NamedNodeMap entityList;  Entity entity2;  Entity entity1;  Document ownerDocument;  DocumentType docType;  String system;  String entityName;  Node child;  String childName;  doc=(Document)load("staffNS",true);  aNewDoc=(Document)load("staffNS",true);  doc1Type=aNewDoc.getDoctype();  entityList=doc1Type.getEntities();  assertNotNull("entitiesNotNull",entityList);  entity2=(Entity)entityList.getNamedItem("ent4");  entity1=(Entity)doc.importNode(entity2,true);  ownerDocument=entity1.getOwnerDocument();  docType=ownerDocument.getDoctype();  system=docType.getSystemId();  assertURIEquals("systemId",null,null,null,"staffNS.dtd",null,null,null,null,system);  entityName=entity1.getNodeName();  assertEquals("entityName","ent4",entityName);  child=entity1.getFirstChild();  assertNotNull("notnull",child);  childName=child.getNodeName();  assertEquals("childName","entElement1",childName);}  }
class C{  public static void remove(){  JKThreadLocal.thread.remove();}  }
class C{  private final Polyline spring_over(Polyline p_polyline,int p_half_width,int p_layer,NetNosList p_net_no_arr,int p_cl_type,boolean p_over_connected_pins,int p_recursion_depth,Set<BrdAbitPin> p_contact_pins){  BrdItem found_obstacle=null;  ShapeTileBox found_obstacle_bounding_box=null;  AwtreeShapeSearch search_tree=r_board.search_tree_manager.get_default_tree();  NetNosList check_net_no_arr;  if (p_contact_pins == null)   check_net_no_arr=p_net_no_arr; else   check_net_no_arr=NetNosList.EMPTY;  for (int index=0; index < p_polyline.plaline_len(-2); ++index) {    ShapeTile curr_shape=p_polyline.offset_shape(p_half_width,index);    Collection<BrdItem> obstacles=search_tree.find_overlap_items_with_clearance(curr_shape,p_layer,check_net_no_arr,p_cl_type);    for (    BrdItem curr_item : obstacles) {      boolean is_obstacle;      if (curr_item.shares_net_no(p_net_no_arr)) {        is_obstacle=curr_item instanceof BrdAbitPin && p_contact_pins != null && !p_contact_pins.contains(curr_item);      } else       if (curr_item instanceof BrdAreaConduction) {        is_obstacle=((BrdAreaConduction)curr_item).is_area_obstacle();      } else       if (curr_item instanceof BrdAreaObstacleVia || curr_item instanceof BrdAreaObstacleComp) {        is_obstacle=false;      } else       if (curr_item instanceof BrdTracep) {        if (curr_item.is_shove_fixed()) {          is_obstacle=true;          if (curr_item instanceof BrdTracep) {            Collection<BrdItem> curr_contacts=curr_item.get_normal_contacts();            for (            BrdItem curr_contact : curr_contacts) {              if (curr_contact.shares_net_no(p_net_no_arr)) {                is_obstacle=false;              }            }          }        } else {          is_obstacle=false;        }      } else {        is_obstacle=!curr_item.is_route();      }      if (is_obstacle) {        if (found_obstacle == null) {          found_obstacle=curr_item;          found_obstacle_bounding_box=curr_item.bounding_box();        } else         if (found_obstacle != curr_item) {          ShapeTileBox curr_item_bounding_box=curr_item.bounding_box();          if (found_obstacle_bounding_box.intersects(curr_item_bounding_box)) {            if (curr_item_bounding_box.contains(found_obstacle_bounding_box)) {              found_obstacle=curr_item;              found_obstacle_bounding_box=curr_item_bounding_box;            } else             if (!found_obstacle_bounding_box.contains(curr_item_bounding_box)) {              return null;            }          }        }      }    }    if (found_obstacle != null)     break;  }  if (found_obstacle == null) {    return p_polyline;  }  if (p_recursion_depth <= 0 || found_obstacle instanceof BrdOutline || (found_obstacle instanceof BrdTracep && !found_obstacle.is_shove_fixed())) {    r_board.shove_fail_obstacle_set(found_obstacle);    return null;  }  boolean try_spring_over=true;  if (!p_over_connected_pins) {    Collection<BrdItem> contacts_on_layer=found_obstacle.get_all_contacts(p_layer);    for (    BrdItem curr_contact : contacts_on_layer) {      if (curr_contact instanceof BrdTracep) {        try_spring_over=false;        break;      }    }  }  ShapeTile obstacle_shape=null;  if (try_spring_over) {    if (found_obstacle instanceof BrdArea || found_obstacle instanceof BrdTracep) {      if (found_obstacle.tree_shape_count(search_tree) == 1) {        obstacle_shape=found_obstacle.get_tree_shape(search_tree,0);      } else {        try_spring_over=false;      }    } else     if (found_obstacle instanceof BrdAbit) {      BrdAbit found_drill_item=(BrdAbit)found_obstacle;      obstacle_shape=(found_drill_item.get_tree_shape_on_layer(search_tree,p_layer));    }  }  if (!try_spring_over) {    r_board.shove_fail_obstacle_set(found_obstacle);    return null;  }  ShapeTile offset_shape;  if (search_tree.is_clearance_compensation_used()) {    int offset=p_half_width + 1;    offset_shape=obstacle_shape.enlarge(offset);  } else {    int offset=p_half_width + 1;    double half_cl_offset=0.5 * r_board.get_clearance(found_obstacle.clearance_idx(),p_cl_type,p_layer);    offset_shape=obstacle_shape.enlarge(offset + half_cl_offset);    offset_shape=offset_shape.enlarge(half_cl_offset);  }  if (r_board.brd_rules.is_trace_snap_45()) {    offset_shape=offset_shape.bounding_octagon();  }  if (offset_shape.contains_inside(p_polyline.corner_first()) || offset_shape.contains_inside(p_polyline.corner_last())) {    r_board.shove_fail_obstacle_set(found_obstacle);    return null;  }  ArrayList<PlaToupleInt> entries=offset_shape.entrance_points(p_polyline);  if (entries.size() == 0) {    return p_polyline;  }  if (entries.size() < 2) {    r_board.shove_fail_obstacle_set(found_obstacle);    return null;  }  ArrayList<Polyline> pieces=offset_shape.cutout(p_polyline);  PlaToupleInt a_first=entries.get(0);  PlaToupleInt a_last=entries.get(entries.size() - 1);  int first_intersection_side_no=a_first.v_b;  int last_intersection_side_no=a_last.v_b;  int first_intersection_line_no=a_first.v_a;  int last_intersection_line_no=a_last.v_a;  int side_diff=last_intersection_side_no - first_intersection_side_no;  if (side_diff < 0) {    side_diff+=offset_shape.border_line_count();  } else   if (side_diff == 0) {    PlaPointFloat compare_corner=offset_shape.corner_approx(first_intersection_side_no);    PlaPointFloat first_intersection=p_polyline.plaline(first_intersection_line_no).intersection_approx(offset_shape.border_line(first_intersection_side_no));    PlaPointFloat second_intersection=p_polyline.plaline(last_intersection_line_no).intersection_approx(offset_shape.border_line(last_intersection_side_no));    if (compare_corner.distance(second_intersection) < compare_corner.distance(first_intersection)) {      side_diff+=offset_shape.border_line_count();    }  }  PlaLineInt[] substitute_lines=new PlaLineInt[side_diff + 3];  substitute_lines[0]=p_polyline.plaline(first_intersection_line_no);  int curr_edge_line_no=first_intersection_side_no;  for (int index=1; index <= side_diff + 1; ++index) {    substitute_lines[index]=offset_shape.border_line(curr_edge_line_no);    if (curr_edge_line_no == offset_shape.border_line_count() - 1) {      curr_edge_line_no=0;    } else {      ++curr_edge_line_no;    }  }  substitute_lines[side_diff + 2]=p_polyline.plaline(last_intersection_line_no);  Polyline substitute_polyline=new Polyline(substitute_lines);  Polyline result=substitute_polyline;  if (pieces.size() > 0) {    result=pieces.get(0).combine(substitute_polyline);  }  if (pieces.size() > 1) {    result=result.combine(pieces.get(1));  }  return spring_over(result,p_half_width,p_layer,p_net_no_arr,p_cl_type,p_over_connected_pins,p_recursion_depth - 1,p_contact_pins);}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true).setUseDefaultBranchingPolicy(false);  unchecked(null);}  }
class C{  public static boolean isEqual(JsonValue oldValue,JsonValue newValue){  JsonValue tmpOldValue=null == oldValue ? json(object()) : oldValue.copy();  JsonValue tmpNewValue=null == newValue ? json(object()) : newValue.copy();  tmpOldValue.remove(FIELD_CONTENT_ID);  tmpOldValue.remove(FIELD_CONTENT_REVISION);  tmpNewValue.remove(FIELD_CONTENT_ID);  tmpNewValue.remove(FIELD_CONTENT_REVISION);  return tmpOldValue.isEqualTo(tmpNewValue);}  }
class C{  public boolean isInterface(){  return itf;}  }
class C{  public boolean verifyAA(ActiveAuthenticationResult aaResult){  try {    PublicKey publicKey=aaResult.getPublicKey();    String digestAlgorithm=aaResult.getDigestAlgorithm();    String signatureAlgorithm=aaResult.getSignatureAlgorithm();    byte[] challenge=aaResult.getChallenge();    byte[] response=aaResult.getResponse();    String pubKeyAlgorithm=publicKey.getAlgorithm();    if ("RSA".equals(pubKeyAlgorithm)) {      if (!"SHA1".equalsIgnoreCase(digestAlgorithm) || !"SHA-1".equalsIgnoreCase(digestAlgorithm) || !"SHA1WithRSA/ISO9796-2".equalsIgnoreCase(signatureAlgorithm)) {        LOGGER.warning("Unexpected algorithms for RSA AA: " + "digest algorithm = " + (digestAlgorithm == null ? "null" : digestAlgorithm) + ", signature algorithm = "+ (signatureAlgorithm == null ? "null" : signatureAlgorithm));        rsaAADigest=MessageDigest.getInstance(digestAlgorithm);        rsaAASignature=Signature.getInstance(signatureAlgorithm,BC_PROVIDER);      }      RSAPublicKey rsaPublicKey=(RSAPublicKey)publicKey;      rsaAACipher.init(Cipher.DECRYPT_MODE,rsaPublicKey);      rsaAASignature.initVerify(rsaPublicKey);      int digestLength=rsaAADigest.getDigestLength();      assert (digestLength == 20);      byte[] plaintext=rsaAACipher.doFinal(response);      byte[] m1=Util.recoverMessage(digestLength,plaintext);      rsaAASignature.update(m1);      rsaAASignature.update(challenge);      boolean success=rsaAASignature.verify(response);      if (success) {        verificationStatus.setAA(VerificationStatus.Verdict.SUCCEEDED,ReasonCode.SIGNATURE_CHECKED,aaResult);      } else {        verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.SIGNATURE_FAILURE,aaResult);      }      return success;    } else     if ("EC".equals(pubKeyAlgorithm) || "ECDSA".equals(pubKeyAlgorithm)) {      ECPublicKey ecdsaPublicKey=(ECPublicKey)publicKey;      if (ecdsaAASignature == null || signatureAlgorithm != null && !signatureAlgorithm.equals(ecdsaAASignature.getAlgorithm())) {        LOGGER.warning("Re-initializing ecdsaAASignature with signature algorithm " + signatureAlgorithm);        ecdsaAASignature=Signature.getInstance(signatureAlgorithm);      }      if (ecdsaAADigest == null || digestAlgorithm != null && !digestAlgorithm.equals(ecdsaAADigest.getAlgorithm())) {        LOGGER.warning("Re-initializing ecdsaAADigest with digest algorithm " + digestAlgorithm);        ecdsaAADigest=MessageDigest.getInstance(digestAlgorithm);      }      ecdsaAASignature.initVerify(ecdsaPublicKey);      if (response.length % 2 != 0) {        LOGGER.warning("Active Authentication response is not of even length");      }      int l=response.length / 2;      BigInteger r=Util.os2i(response,0,l);      BigInteger s=Util.os2i(response,l,l);      ecdsaAASignature.update(challenge);      try {        ASN1Sequence asn1Sequence=new DERSequence(new ASN1Encodable[]{new ASN1Integer(r),new ASN1Integer(s)});        boolean success=ecdsaAASignature.verify(asn1Sequence.getEncoded());        if (success) {          verificationStatus.setAA(VerificationStatus.Verdict.SUCCEEDED,ReasonCode.SUCCEEDED,aaResult);        } else {          verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.SIGNATURE_FAILURE,aaResult);        }        return success;      } catch (      IOException ioe) {        LOGGER.severe("Unexpected exception during AA signature verification with ECDSA");        ioe.printStackTrace();        verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE,aaResult);        return false;      }    } else {      LOGGER.severe("Unsupported AA public key type " + publicKey.getClass().getSimpleName());      verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.UNSUPPORTED_KEY_TYPE_FAILURE,aaResult);      return false;    }  } catch (  Exception e) {    verificationStatus.setAA(VerificationStatus.Verdict.FAILED,ReasonCode.UNEXPECTED_EXCEPTION_FAILURE,aaResult);    return false;  }}  }
class C{  private E dequeue(){  Node<E> h=head;  Node<E> first=h.next;  h.next=h;  head=first;  E x=first.item;  first.item=null;  return x;}  }
class C{  public String toString(){  return toString(true,false);}  }
class C{  public static void notifyExportBeginning(Backend<?> backend,LDIFExportConfig config){  for (  ExportTaskListener listener : directoryServer.exportTaskListeners) {    try {      listener.processExportBegin(backend,config);    } catch (    Exception e) {      logger.traceException(e);    }  }}  }
class C{  public boolean isFlashEnabledByDefault(){  return mFlashEnabledByDefault;}  }
class C{  public StringBuilder encode(StringBuilder encoding){  String dayString;  if (day < 10) {    dayString="0" + day;  } else   dayString="" + day;  String hourString;  if (hour < 10) {    hourString="0" + hour;  } else   hourString="" + hour;  String minuteString;  if (minute < 10) {    minuteString="0" + minute;  } else   minuteString="" + minute;  String secondString;  if (second < 10) {    secondString="0" + second;  } else   secondString="" + second;  if (sipWkDay != null)   encoding.append(sipWkDay).append(Separators.COMMA).append(Separators.SP);  encoding.append(dayString).append(Separators.SP);  if (sipMonth != null)   encoding.append(sipMonth).append(Separators.SP);  return encoding.append(year).append(Separators.SP).append(hourString).append(Separators.COLON).append(minuteString).append(Separators.COLON).append(secondString).append(Separators.SP).append(GMT);}  }
class C{  public double signed_area(PlaPointInt p_1,PlaPointInt p_2){  PlaVectorInt d21=p_2.difference_by(p_1);  PlaVectorInt d01=difference_by(p_1);  return d21.determinant(d01);}  }
class C{  public boolean hasAdvices(){  return advicesAreSet;}  }
class C{  public View applyTo(View target,int tipsId){  mTargetView=target;  ViewGroup parent=(ViewGroup)target.getParent();  if (parent == null) {    return null;  }  View tipsView;  if (parent instanceof TipsContainer) {    tipsView=addTipsViewToContainer(target,parent,tipsId);  } else {    TipsContainer tipsContainerView=new TipsContainer(target.getContext());    ViewGroup.LayoutParams targetParams=target.getLayoutParams();    int index=parent.indexOfChild(target);    parent.removeViewAt(index);    parent.addView(tipsContainerView,index,targetParams);    Drawable background=target.getBackground();    if (background != null) {      tipsContainerView.setBackgroundDrawable(background);    }    tipsView=addTipsViewToContainer(target,tipsContainerView,tipsId);  }  return tipsView;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  m_fixUpWasCalled=true;  int sz=vars.size();  for (int i=vars.size() - 1; i >= 0; i--) {    QName qn=(QName)vars.elementAt(i);    if (qn.equals(m_qname)) {      if (i < globalsSize) {        m_isGlobal=true;        m_index=i;      } else {        m_index=i - globalsSize;      }      return;    }  }  java.lang.String msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_COULD_NOT_FIND_VAR,new Object[]{m_qname.toString()});  TransformerException te=new TransformerException(msg,this);  throw new org.apache.xml.utils.WrappedRuntimeException(te);}  }
class C{  Ser(byte type,Object object){  this.type=type;  this.object=object;}  }
class C{  public StringCharacterIterator(String text,int pos){  this(text,0,text.length(),pos);}  }
class C{  public void invokeStatic(final Type owner,final Method method){  invokeInsn(Opcodes.INVOKESTATIC,owner,method,false);}  }
class C{  public int hashCode(){  return (((x & 0x0000FFFF)) | ((y & 0x0000FFFF) << 16));}  }
class C{  public XMPDateTimeImpl(Calendar calendar){  Date date=calendar.getTime();  TimeZone zone=calendar.getTimeZone();  GregorianCalendar intCalendar=(GregorianCalendar)Calendar.getInstance(Locale.US);  intCalendar.setGregorianChange(new Date(Long.MIN_VALUE));  intCalendar.setTimeZone(zone);  intCalendar.setTime(date);  this.year=intCalendar.get(Calendar.YEAR);  this.month=intCalendar.get(Calendar.MONTH) + 1;  this.day=intCalendar.get(Calendar.DAY_OF_MONTH);  this.hour=intCalendar.get(Calendar.HOUR_OF_DAY);  this.minute=intCalendar.get(Calendar.MINUTE);  this.second=intCalendar.get(Calendar.SECOND);  this.nanoSeconds=intCalendar.get(Calendar.MILLISECOND) * 1000000;  this.timeZone=intCalendar.getTimeZone();  hasDate=hasTime=hasTimeZone=true;}  }
class C{  public MBeanInfo(String className,String description,MBeanAttributeInfo[] attributes,MBeanConstructorInfo[] constructors,MBeanOperationInfo[] operations,MBeanNotificationInfo[] notifications) throws IllegalArgumentException {  this(className,description,attributes,constructors,operations,notifications,null);}  }
class C{  public ByteMatrix encode(String contents,int width,int height) throws WriterException {  return encode(contents,width,height,null);}  }
class C{  @Override protected void dispatchDraw(Canvas canvas){  canvas.clipRect(mBackgroundPadding.left,mBackgroundPadding.top,getWidth() - mBackgroundPadding.right,getHeight() - mBackgroundPadding.bottom);  super.dispatchDraw(canvas);}  }
class C{  protected View createChild(String name){  View child=null;  if (name.equals(TITLE_HTML_PAGE)) {    child=new StaticTextField(this,TITLE_HTML_PAGE,"");  } else   if (name.equals(COPYRIGHT_TEXT)) {    child=new StaticTextField(this,COPYRIGHT_TEXT,"");  } else   if (name.equals(ERROR_TITLE)) {    child=new StaticTextField(this,ERROR_TITLE,"");  } else   if (name.equals(ERROR_MSG)) {    child=new StaticTextField(this,ERROR_MSG,"");  } else   if (name.equals(INFO_MSG)) {    child=new StaticTextField(this,INFO_MSG,"");  } else   if (name.equals(LBL_SUN_LOGO)) {    child=new StaticTextField(this,LBL_SUN_LOGO,"");  } else   if (name.equals(LBL_PRODUCT)) {    child=new StaticTextField(this,LBL_PRODUCT,"");  } else   if (name.equals(LBL_JAVA_LOGO)) {    child=new StaticTextField(this,LBL_JAVA_LOGO,"");  } else {    throw new IllegalArgumentException("invalid child name " + name);  }  return child;}  }
class C{  public static final ParsedQuery createTestParsedQueryBulkData(){  Query query=new Query();  query.setWhere("field1 = 'this is my data'");  query.setDatabase(Fixtures.DB);  query.setTable("mytable");  WhereClause whereClause=new WhereClause(query.getWhere());  return new ParsedQuery(query,whereClause,createTestIndexWithBulkDataHit());}  }
class C{  public final void fatal(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_FATAL)) {    log(SimpleLog.LOG_LEVEL_FATAL,message,null);  }}  }
class C{  private static int classifyCharacter(char ch){  if (SPACES.indexOf(ch) >= 0 || (0x2000 <= ch && ch <= 0x200B)) {    return UCK_SPACE;  } else   if (COMMAS.indexOf(ch) >= 0) {    return UCK_COMMA;  } else   if (SEMICOLA.indexOf(ch) >= 0) {    return UCK_SEMICOLON;  } else   if (QUOTES.indexOf(ch) >= 0 || (0x3008 <= ch && ch <= 0x300F) || (0x2018 <= ch && ch <= 0x201F)) {    return UCK_QUOTE;  } else   if (ch < 0x0020 || CONTROLS.indexOf(ch) >= 0) {    return UCK_CONTROL;  } else {    return UCK_NORMAL;  }}  }
class C{  @Override public boolean containsHeader(String name){  return this._getHttpServletResponse().containsHeader(name);}  }
class C{  public AssertionError(double detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  public int read() throws IOException {  if (frameSize != 1) {    throw new IOException("cannot read a single byte if frame size > 1");  }  byte[] data=new byte[1];  int temp=read(data);  if (temp <= 0) {    return -1;  }  return data[0] & 0xFF;}  }
class C{  protected byte[] engineDigest(){  byte[] hash=new byte[DIGEST_LENGTH];  processDigest(hash,0);  return hash;}  }
class C{  public void findBrokenClass() throws TestFailed, InvocationTargetException {  findDexClass(CLASS_NAME);}  }
class C{  public String toString(){  return getClass().getName() + "[i=" + (index)+ "]";}  }
class C{  public AsfHeaderReader(final List<Class<? extends ChunkReader>> toRegister,final boolean readChunkOnce){  super(toRegister,readChunkOnce);}  }
class C{  protected void installPreviousButtonListeners(Component c){  installButtonListeners(c,previousButtonHandler);}  }
class C{  private ModuleState chooseUserID(Callback[] callbacks) throws AuthLoginException {  ModuleState result=null;  String userChoiceID=getCallbackFieldValue(callbacks[0]);  if (userChoiceID.equals(createMyOwn)) {    return ModuleState.REGISTRATION;  } else {    String attrName=getAttribute(ModuleState.REGISTRATION.intValue(),0);    userID=userChoiceID;    Set<String> values=new HashSet<String>();    values.add(userID);    userAttrs.put(attrName,values);    result=processRegistrationResult();  }  return result;}  }
class C{  public VorbisCommentTagField(String fieldId,String fieldContent){  this.id=fieldId.toUpperCase();  this.content=fieldContent;  checkCommon();}  }
class C{  public static Result copyOfResult(final Result result){  return new ResultImpl(result);}  }
class C{  public BasicTextAreaUI(){  super();}  }
class C{  private void processWebInfLib(){  WebResource[] possibleJars=listResources("/WEB-INF/lib",false);  for (  WebResource possibleJar : possibleJars) {    if (possibleJar.isFile() && possibleJar.getName().endsWith(".jar")) {      createWebResourceSet(ResourceSetType.CLASSES_JAR,"/WEB-INF/classes",possibleJar.getURL(),"/");    }  }}  }
class C{  @Override public void firePropertyChange(String propertyName,double oldValue,double newValue){}  }
class C{  protected Expression numberlit(int opPos){  opPos=getFirstChildPos(opPos);  return (XNumber)getTokenQueue().elementAt(getOp(opPos));}  }
class C{  private void readObject(java.io.ObjectInputStream p_stream) throws IOException, ClassNotFoundException {  p_stream.defaultReadObject();  item_color_table=new ItemColorTableModel(p_stream);  other_color_table=new OtherColorTableModel(p_stream);}  }
class C{  public static boolean isHPUX(){  return (matchApprox(HPUX));}  }
class C{  protected AdminSecurityException(LocalizableMessage message,Throwable cause){  super(message,cause);}  }
class C{  protected long outputOffset(){  return _bytesWritten + _outputTail;}  }
class C{  @Override public void recycle(){  lock();  try {    super.recycle();    deltaRequest.clear();  }  finally {    unlock();  }}  }
class C{  @Before public void init() throws IOException {  repository=new FileRepositoryBuilder().setGitDir(scenario.getRepositoryLocation()).build();  git=new Git(repository);  versionCalculator=GitVersionCalculator.location(scenario.getRepositoryLocation()).setMavenLike(true).setQualifierBranchingPolicies(BranchingPolicy.ignoreBranchName("master"),BranchingPolicy.fixedBranchName("develop"),new BranchingPolicy("release/(.*)",Collections.singletonList(BranchNameTransformations.IGNORE.name())),new BranchingPolicy("feature/(.*)",Arrays.asList(BranchNameTransformations.REMOVE_UNEXPECTED_CHARS.name(),BranchNameTransformations.LOWERCASE_EN.name()))).setUseDefaultBranchingPolicy(false);  unchecked(null);}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_lang_String(){  try {    Provider[] providers=Security.getProviders("SecureRandom.SHA1PRNG");    if (providers != null) {      for (int i=0; i < providers.length; i++) {        SecureRandom.getInstance("SHA1PRNG",providers[i].getName());      }    } else {      fail("No providers support SHA1PRNG");    }  } catch (  NoSuchAlgorithmException e) {    fail("getInstance did not find a SHA1PRNG algorithm");  }catch (  NoSuchProviderException e) {    fail("getInstance did not find the provider for SHA1PRNG");  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  Attr addrAttr;  String attrName;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributeNode("domestic");  attrName=addrAttr.getNodeName();  assertEquals("nodeAttributeNodeNameAssert1","domestic",attrName);}  }
class C{  public static Step fromCursor(Cursor cursor){  Step step=new Step();  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeInstructionsTable.PHOTO_COLUMN)) {      step.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeInstructionsTable.DESCRIPTION_COLUMN)) {      step.setDescription(cursor.getString(c));    }  }  return step;}  }
class C{  public void handleButton3Request(RequestInvocationEvent event){  FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);  backTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public Result useInteractedBlock(){  return useClickedBlock;}  }
class C{  protected WalkingIterator createIteratorFromSteps(final WalkingIterator wi,int numSteps){  WalkingIterator newIter=new WalkingIterator(wi.getPrefixResolver());  try {    AxesWalker walker=(AxesWalker)wi.getFirstWalker().clone();    newIter.setFirstWalker(walker);    walker.setLocPathIterator(newIter);    for (int i=1; i < numSteps; i++) {      AxesWalker next=(AxesWalker)walker.getNextWalker().clone();      walker.setNextWalker(next);      next.setLocPathIterator(newIter);      walker=next;    }    walker.setNextWalker(null);  } catch (  CloneNotSupportedException cnse) {    throw new WrappedRuntimeException(cnse);  }  return newIter;}  }
class C{  public HttpServletRequestWrapper(HttpServletRequest request){  super(request);}  }
class C{  @Override public String toString(){  return "ModelMBeanAttributeInfo: " + this.getName() + " ; Description: "+ this.getDescription()+ " ; Types: "+ this.getType()+ " ; isReadable: "+ this.isReadable()+ " ; isWritable: "+ this.isWritable()+ " ; Descriptor: "+ this.getDescriptor();}  }
class C{  public ZipEntry(String name){  Objects.requireNonNull(name,"name");  if (name.length() > 0xFFFF) {    throw new IllegalArgumentException("entry name too long");  }  this.name=name;}  }
class C{  public WebServiceException(Throwable cause){  super(cause);}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void testMac01(){  try {    Mac.getInstance(null);    fail("NullPointerException or NoSuchAlgorithmException should be thrown when algorithm is null");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      Mac.getInstance(invalidValues[i]);      fail("NoSuchAlgorithmException must be thrown when algorithm is not available: ".concat(invalidValues[i]));    } catch (    NoSuchAlgorithmException e) {    }  }}  }
class C{  public int parseToNode(Source source,SourceLocator locator,XPathContext xctxt) throws TransformerException {  try {    Object xowner=xctxt.getOwnerObject();    DTM dtm;    if (null != xowner && xowner instanceof org.apache.xml.dtm.DTMWSFilter) {      dtm=xctxt.getDTM(source,false,(org.apache.xml.dtm.DTMWSFilter)xowner,false,true);    } else {      dtm=xctxt.getDTM(source,false,null,false,true);    }    return dtm.getDocument();  } catch (  Exception e) {    throw new TransformerException(e.getMessage(),locator,e);  }}  }
class C{  public void release(){  this.contentLength=0;  parentPool.release(this);}  }
class C{  public static int write(Sequence in,int type,File out) throws IOException {  List providers=getMidiFileWriters();  int bytesWritten=-2;  for (int i=0; i < providers.size(); i++) {    MidiFileWriter writer=(MidiFileWriter)providers.get(i);    if (writer.isFileTypeSupported(type,in)) {      bytesWritten=writer.write(in,type,out);      break;    }  }  if (bytesWritten == -2) {    throw new IllegalArgumentException("MIDI file type is not supported");  }  return bytesWritten;}  }
class C{  public static boolean unloadWorld(World world,boolean save){  return server.unloadWorld(world,save);}  }
class C{  public final void testToString() throws NoSuchAlgorithmException {  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      assertNotNull(dos.toString());      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public String scanIdentifier(Reader in) throws IOException {  StringBuilder buf=new StringBuilder();  while (true) {    if (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')) || ((c >= '0') && (c <= '9'))|| (c == '_')) {      buf.append((char)c);      c=in.read();    } else {      return buf.toString();    }  }}  }
class C{  public boolean addService(Class serviceClass,BeanContextServiceProvider bcsp){  return addService(serviceClass,bcsp,true);}  }
class C{  public void logSearchRequest(SearchOperation searchOperation){}  }
class C{  public boolean isMutable(){  return mutable;}  }
class C{  private int handleS(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index - 1,3,"ISL","YSL")) {    index++;  } else   if (index == 0 && contains(value,index,5,"SUGAR")) {    result.append('X','S');    index++;  } else   if (contains(value,index,2,"SH")) {    if (contains(value,index + 1,4,"HEIM","HOEK","HOLM","HOLZ")) {      result.append('S');    } else {      result.append('X');    }    index+=2;  } else   if (contains(value,index,3,"SIO","SIA") || contains(value,index,4,"SIAN")) {    if (slavoGermanic) {      result.append('S');    } else {      result.append('S','X');    }    index+=3;  } else   if ((index == 0 && contains(value,index + 1,1,"M","N","L","W")) || contains(value,index + 1,1,"Z")) {    result.append('S','X');    index=contains(value,index + 1,1,"Z") ? index + 2 : index + 1;  } else   if (contains(value,index,2,"SC")) {    index=handleSC(value,result,index);  } else {    if (index == value.length() - 1 && contains(value,index - 2,2,"AI","OI")) {      result.appendAlternate('S');    } else {      result.append('S');    }    index=contains(value,index + 1,1,"S","Z") ? index + 2 : index + 1;  }  return index;}  }
class C{  MultistepExprHolder(ExpressionOwner exprOwner,int stepCount,MultistepExprHolder next){  m_exprOwner=exprOwner;  assertion(null != m_exprOwner,"exprOwner can not be null!");  m_stepCount=stepCount;  m_next=next;}  }
class C{  @Override public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException {  String clientIP=ClientUtils.getClientIPAddress(request);  if (SAMLSOAPReceiver.checkCaller(request,response) != null) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message(DEBUG_SUCCESS_MSG + clientIP);    }    super.doPost(request,response);  } else {    String errMsg=DEBUG_FAILED_MSG + clientIP;    SAMLUtils.debug.error(errMsg);    SAMLUtils.sendError(request,response,HttpServletResponse.SC_FORBIDDEN,"untrustedSite",SAMLUtils.bundle.getString("untrustedSite") + clientIP);    return;  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.SSLElement createSSLElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.SSLElementImpl();}  }
class C{  public StatusCodeImpl(String xmlString) throws SAML2Exception {  Document xmlDocument=XMLUtils.toDOMDocument(xmlString,SAML2SDKUtils.debug);  if (xmlDocument == null) {    throw new SAML2Exception(SAML2SDKUtils.bundle.getString("errorObtainingElement"));  }  parseElement(xmlDocument.getDocumentElement());}  }
class C{  public void initializeConfiguration() throws InitializationException {  configFile=environmentConfig.getConfigFile();  configurationHandler=ConfigurationHandler.bootstrapConfiguration(serverContext);  serverManagementContext=new ServerManagementContext(configurationHandler);}  }
class C{  @Override public com.liferay.blade.samples.servicebuilder.model.Foo fetchFooByUuidAndGroupId(java.lang.String uuid,long groupId){  return _fooLocalService.fetchFooByUuidAndGroupId(uuid,groupId);}  }
class C{  private void loadCalendarData(){  try {    String resourceName=calendarProperties.getProperty(PROP_PREFIX + typeId);    Objects.requireNonNull(resourceName,"Resource missing for calendar: " + PROP_PREFIX + typeId);    Properties props=readConfigProperties(resourceName);    Map<Integer,int[]> years=new HashMap<>();    int minYear=Integer.MAX_VALUE;    int maxYear=Integer.MIN_VALUE;    String id=null;    String type=null;    String version=null;    int isoStart=0;    for (    Map.Entry<Object,Object> entry : props.entrySet()) {      String key=(String)entry.getKey();switch (key) {case KEY_ID:        id=(String)entry.getValue();      break;case KEY_TYPE:    type=(String)entry.getValue();  break;case KEY_VERSION:version=(String)entry.getValue();break;case KEY_ISO_START:{int[] ymd=parseYMD((String)entry.getValue());isoStart=(int)LocalDate.of(ymd[0],ymd[1],ymd[2]).toEpochDay();break;}default :try {int year=Integer.valueOf(key);int[] months=parseMonths((String)entry.getValue());years.put(year,months);maxYear=Math.max(maxYear,year);minYear=Math.min(minYear,year);} catch (NumberFormatException nfe) {throw new IllegalArgumentException("bad key: " + key);}}}if (!getId().equals(id)) {throw new IllegalArgumentException("Configuration is for a different calendar: " + id);}if (!getCalendarType().equals(type)) {throw new IllegalArgumentException("Configuration is for a different calendar type: " + type);}if (version == null || version.isEmpty()) {throw new IllegalArgumentException("Configuration does not contain a version");}if (isoStart == 0) {throw new IllegalArgumentException("Configuration does not contain a ISO start date");}hijrahStartEpochMonth=minYear * 12;minEpochDay=isoStart;hijrahEpochMonthStartDays=createEpochMonths(minEpochDay,minYear,maxYear,years);maxEpochDay=hijrahEpochMonthStartDays[hijrahEpochMonthStartDays.length - 1];for (int year=minYear; year < maxYear; year++) {int length=getYearLength(year);minYearLength=Math.min(minYearLength,length);maxYearLength=Math.max(maxYearLength,length);}} catch (Exception ex) {PlatformLogger logger=PlatformLogger.getLogger("java.time.chrono");logger.severe("Unable to initialize Hijrah calendar proxy: " + typeId,ex);throw new DateTimeException("Unable to initialize HijrahCalendar: " + typeId,ex);}}  }
class C{  public QName(String namespaceURI,String prefix,String localName,boolean validate){  if (localName == null)   throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_NULL,null));  if (validate) {    if (!XML11Char.isXML11ValidNCName(localName)) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }    if ((null != prefix) && (!XML11Char.isXML11ValidNCName(prefix))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_PREFIX_INVALID,null));    }  }  _namespaceURI=namespaceURI;  _prefix=prefix;  _localName=localName;  m_hashCode=toString().hashCode();}  }
class C{  public EtchedBorder(int etchType){  this(etchType,null,null);}  }
class C{  public static final Document createTestDocument3(){  Document entity=new Document();  entity.setTable("mydb","mytable");  entity.setObjectAsString("{\"thisisastring\":\"hello\", \"thisisanint\": \"5\", \"thisisadouble\":\"5.555\"," + " \"thisisbase64\":\"VGhpcyBpcyBhIGdvb2RseSB0ZXN0IG1lc3NhZ2Uu\", \"thisisaboolean\":\"f\"," + " \"thisisadate\":\"Thu Apr 30 09:52:04 MDT 2015\", \"thisisauudid\":\"3d069a5a-ef51-11e4-90ec-1681e6b88ec1\", \"thisisalong\":\"378657657654654\"}");  entity.setUuid(new UUID(0L,3L));  entity.setCreatedAt(new Date());  entity.setUpdatedAt(new Date());  return entity;}  }
class C{  public TreeMapEntry(final String... ldifLines){  this(Requests.newAddRequest(ldifLines));}  }
class C{  private synchronized boolean extendDirtyRegion(Component c,int x,int y,int w,int h){  Rectangle r=dirtyComponents.get(c);  if (r != null) {    SwingUtilities.computeUnion(x,y,w,h,r);    return true;  }  return false;}  }
class C{  public void printTagValueArray(PrintWriter aWriter,String tag,int indent,String[] elements){  if (elements != null && elements.length > 0) {    printIndent(aWriter,indent + 2);    aWriter.print("<");    aWriter.print(tag);    aWriter.print(">");    for (int i=0; i < elements.length; i++) {      printIndent(aWriter,indent + 4);      aWriter.print(elements[i]);      if (i + 1 < elements.length)       aWriter.println(",");    }    printIndent(aWriter,indent + 2);    aWriter.print("</");    aWriter.print(tag);    aWriter.println(">");  }}  }
class C{  public ServerException(final String message){  super(400,"server_error",message);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("Object ID        :").append(m_guid).append("\n");  sb.append("Naming attribute :").append(getNamingAttribute()).append("\n");  sb.append("Class            :").append(getClass().getName()).append("\n");  sb.append("Principal        :").append(m_principal).append("\n");  sb.append("Attribute Set    :").append(m_attrSet).append("\n");  return sb.toString();}  }
class C{  @Override public void run(){  if (logger.isTraceEnabled()) {    logger.trace("Replication Replay thread starting.");  }  while (!shutdown.get()) {    try {      if (switchQueueLock.tryLock(1L,TimeUnit.SECONDS)) {        LDAPReplicationDomain domain;        LDAPUpdateMsg updateMsg;        try {          if (shutdown.get()) {            break;          }          UpdateToReplay updateToreplay=updateToReplayQueue.poll(1L,TimeUnit.SECONDS);          if (updateToreplay == null) {            continue;          }          updateMsg=updateToreplay.getUpdateMessage();          domain=updateToreplay.getReplicationDomain();          domain.markInProgress(updateMsg);        }  finally {          switchQueueLock.unlock();        }        domain.replay(updateMsg,shutdown);      }    } catch (    Exception e) {      logger.error(ERR_EXCEPTION_REPLAYING_REPLICATION_MESSAGE,stackTraceToSingleLineString(e));    }  }  if (logger.isTraceEnabled()) {    logger.trace("Replication Replay thread stopping.");  }}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  if (transformer.getStylesheet().isSecureProcessing())   throw new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_EXTENSION_ELEMENT_NOT_ALLOWED_IN_SECURE_PROCESSING,new Object[]{getRawName()}));  try {    transformer.getResultTreeHandler().flushPending();    ExtensionsTable etable=transformer.getExtensionsTable();    ExtensionHandler nsh=etable.get(m_extns);    if (null == nsh) {      if (hasFallbackChildren()) {        executeFallbacks(transformer);      } else {        TransformerException te=new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_CALL_TO_EXT_FAILED,new Object[]{getNodeName()}));        transformer.getErrorListener().fatalError(te);      }      return;    }    try {      nsh.processElement(this.getLocalName(),this,transformer,getStylesheet(),this);    } catch (    Exception e) {      if (hasFallbackChildren())       executeFallbacks(transformer); else {        if (e instanceof TransformerException) {          TransformerException te=(TransformerException)e;          if (null == te.getLocator())           te.setLocator(this);          transformer.getErrorListener().fatalError(te);        } else         if (e instanceof RuntimeException) {          transformer.getErrorListener().fatalError(new TransformerException(e));        } else {          transformer.getErrorListener().warning(new TransformerException(e));        }      }    }  } catch (  TransformerException e) {    transformer.getErrorListener().fatalError(e);  }catch (  SAXException se) {    throw new TransformerException(se);  }}  }
class C{  public synchronized void removeObject(NSObject obj){  set.remove(obj);}  }
class C{  static void testAccess3(ClassLoader loader){  Class altClass;  try {    altClass=loader.loadClass("Inaccessible3");    System.err.println("ERROR: Inaccessible3 was accessible");  } catch (  ClassNotFoundException cnfe) {    Throwable cause=cnfe.getCause();    if (cause instanceof IllegalAccessError) {      System.out.println("Got expected CNFE/IAE #3");    } else {      System.err.println("Got unexpected CNFE/IAE #3");      cnfe.printStackTrace();    }  }}  }
class C{  private void restoreIcon(BackupProtos.Key key,byte[] buffer,int dataSize) throws IOException {  if (VERBOSE)   Log.v(TAG,"unpacking icon " + key.id);  if (DEBUG)   Log.d(TAG,"read (" + buffer.length + "): "+ Base64.encodeToString(buffer,0,dataSize,Base64.NO_WRAP));  BackupProtos.Resource res=unpackProto(new BackupProtos.Resource(),buffer,dataSize);  if (DEBUG) {    Log.d(TAG,"unpacked " + res.dpi + " dpi icon");  }  Bitmap icon=BitmapFactory.decodeByteArray(res.data,0,res.data.length);  if (icon == null) {    Log.w(TAG,"failed to unpack icon for " + key.name);  } else {    if (VERBOSE)     Log.v(TAG,"saving restored icon as: " + key.name);    mIconCache.preloadIcon(ComponentName.unflattenFromString(key.name),icon,res.dpi,"",mUserSerial,mIdp);  }}  }
class C{  private void computeAllAppsButtonSize(Context context){  Resources res=context.getResources();  float padding=res.getInteger(R.integer.config_allAppsButtonPaddingPercent) / 100f;  allAppsButtonVisualSize=(int)(hotseatIconSizePx * (1 - padding));}  }
class C{  public void test_doAs_01(){  Subject subj=new Subject();  PrivilegedAction<Object> pa=new myPrivilegedAction();  PrivilegedAction<Object> paNull=null;  try {    Object obj=Subject.doAs(null,pa);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    Object obj=Subject.doAs(subj,pa);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    Object obj=Subject.doAs(subj,paNull);    fail("NullPointerException wasn't thrown");  } catch (  NullPointerException npe) {  }}  }
class C{  public void insertIndexInterval(int index,int length,boolean before){  int insMinIndex=(before) ? index : index + 1;  int insMaxIndex=(insMinIndex + length) - 1;  for (int i=maxIndex; i >= insMinIndex; i--) {    setState(i + length,value.get(i));  }  boolean setInsertedValues=((getSelectionMode() == SINGLE_SELECTION) ? false : value.get(index));  for (int i=insMinIndex; i <= insMaxIndex; i++) {    setState(i,setInsertedValues);  }  int leadIndex=this.leadIndex;  if (leadIndex > index || (before && leadIndex == index)) {    leadIndex=this.leadIndex + length;  }  int anchorIndex=this.anchorIndex;  if (anchorIndex > index || (before && anchorIndex == index)) {    anchorIndex=this.anchorIndex + length;  }  if (leadIndex != this.leadIndex || anchorIndex != this.anchorIndex) {    updateLeadAnchorIndices(anchorIndex,leadIndex);  }  fireValueChanged();}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String publicId;  String nullNS=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root","PUB",nullNS);  publicId=docType.getPublicId();  assertEquals("documenttypepublicid01","PUB",publicId);}  }
class C{  public void testDuplicateEntries() throws Exception {  String name1="test_file_name1";  String name2="test_file_name2";  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ZipOutputStream out=new ZipOutputStream(baos);  out.putNextEntry(new ZipEntry(name2));  out.closeEntry();  out.putNextEntry(new ZipEntry(name1));  out.closeEntry();  out.close();  byte[] buffer=baos.toByteArray();  replaceBytes(buffer,name2.getBytes(),name1.getBytes());  File badZip=createTemporaryZipFile();  writeBytes(badZip,buffer);  try {    ZipFile bad=new ZipFile(badZip);    fail();  } catch (  ZipException expected) {  }}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public static ResourceResultRequest parseXML(Node pNode) throws PolicyEvaluationException {  ResourceResultRequest resResultReq=new ResourceResultRequest();  String attr=null;  attr=XMLUtils.getNodeAttributeValue(pNode,USER_SSOTOKEN);  if ((attr == null) || (attr.trim().equals(PolicyUtils.EMPTY_STRING))) {    if (debug.messageEnabled()) {      debug.error("ResourceResultRequest: user sso toekn is null");    }    attr=PolicyUtils.EMPTY_STRING;  }  resResultReq.setUserSSOToken(attr);  attr=XMLUtils.getNodeAttributeValue(pNode,SERVICE_NAME);  if (attr == null) {    debug.error("ResourceResultRequest: missing attribute " + SERVICE_NAME);    String objs[]={SERVICE_NAME};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  resResultReq.setServiceName(attr);  attr=XMLUtils.getNodeAttributeValue(pNode,RESOURCE_NAME);  if (attr == null) {    debug.error("ResourceResultRequest: missing attribute " + RESOURCE_NAME);    String objs[]={RESOURCE_NAME};    throw new PolicyEvaluationException(ResBundleUtils.rbName,"missing_attribute",objs,null);  }  resResultReq.setResourceName(attr);  attr=XMLUtils.getNodeAttributeValue(pNode,RESOURCE_SCOPE);  if (attr == null) {    resResultReq.setResourceScope(RESOURCE_SCOPE_STRICT_SUBTREE);  } else {    if (attr.equals(RESOURCE_SCOPE_SUBTREE) || attr.equals(RESOURCE_SCOPE_STRICT_SUBTREE) || attr.equals(RESOURCE_SCOPE_SELF)|| attr.equals(RESPONSE_ATTRIBUTES_ONLY)) {      resResultReq.setResourceScope(attr);    } else {      debug.error("ResourceResultRequest: invalid value " + attr + " set for attribute "+ RESOURCE_SCOPE);      String objs[]={attr,RESOURCE_SCOPE};      throw new PolicyEvaluationException(ResBundleUtils.rbName,"invalid_value_for_attribute",objs,null);    }  }  Node node=XMLUtils.getChildNode(pNode,ENV_PARAMETERS);  if (node != null) {    try {      resResultReq.setEnvParms(PolicyUtils.parseEnvParameters(node));    } catch (    PolicyException pe) {      throw new PolicyEvaluationException(pe);    }  }  node=XMLUtils.getChildNode(pNode,GET_RESPONSE_DECISIONS);  if (node != null) {    try {      resResultReq.setResponseAttributes(PolicyUtils.parseResponseAttributes(node));    } catch (    PolicyException pe) {      throw new PolicyEvaluationException(pe);    }  }  return resResultReq;}  }
class C{  public void extend_selection_to_whole_components(){  if (board_is_read_only)   return;  if (!is_StateSelectedItem())   return;  set_interactive_state(((StateSelectedItem)interactive_state).extent_to_whole_components());}  }
class C{  public static DN create(ManagedObjectPath<?,?> path,RelationDefinition<?,?> relation){  DN dn=path.toDN();  LDAPProfile profile=LDAPProfile.getInstance();  DN localName=DN.valueOf(profile.getRelationRDNSequence(relation));  return dn.child(localName);}  }
class C{  public void beginDisplay(DisplayEvent event) throws ModelControlException {  IdentitySubjectModel subjectModel=getSubjectModel();  PolicyModel model=(PolicyModel)getModel();  super.beginDisplay(event);  CCDropDownMenu menu=(CCDropDownMenu)getChild(FILTER_TYPE);  Map supportedEntityTypes=model.getSupportedEntityTypes(realmName);  OptionList entityTypes=createOptionList(supportedEntityTypes);  entityTypes.add(0,"policy.subject.select.identity.type","");  menu.setOptions(entityTypes);  menu.setValue("");  CCAddRemove child=(CCAddRemove)getChild(VALUES_MULTIPLE_CHOICE_VALUE);  child.restoreStateData();  OptionList selected=addRemoveModel.getSelectedOptionList();  OptionList possible=helper.createOptionList(model.getUserSSOToken(),model.getUserLocale(),this,getPossibleValues(subjectModel,realmName));  child.resetStateData();  addRemoveModel.setAvailableOptionList(possible);}  }
class C{  public com.sun.identity.liberty.ws.disco.jaxb.QueryType createQueryType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.disco.jaxb.impl.QueryTypeImpl();}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.ls.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new BatikTestDocumentBuilderFactory(new DocumentBuilderSetting[0]);  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public boolean remove(Object o){  return map.remove(o) == PRESENT;}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < in.length - 1) {    if (random == null) {      in[inOff]=0;    } else {      in[inOff]=(byte)random.nextInt();    }    inOff++;  }  in[inOff]=code;  return code;}  }
class C{  public FixASCIIControlsReader(Reader input){  super(input,BUFFER_SIZE);}  }
class C{  protected void startFontTag(String style) throws IOException {  boolean callIndent=false;  if (inFontTag()) {    endFontTag();    callIndent=true;  }  writeStartTag("<font style=\"" + style + "\">");  if (callIndent) {    indent();  }}  }
class C{  private static Headers combine(Headers cachedHeaders,Headers networkHeaders) throws IOException {  Headers.Builder result=new Headers.Builder();  for (int i=0, size=cachedHeaders.size(); i < size; i++) {    String fieldName=cachedHeaders.name(i);    String value=cachedHeaders.value(i);    if ("Warning".equalsIgnoreCase(fieldName) && value.startsWith("1")) {      continue;    }    if (!OkHeaders.isEndToEnd(fieldName) || networkHeaders.get(fieldName) == null) {      result.add(fieldName,value);    }  }  for (int i=0, size=networkHeaders.size(); i < size; i++) {    String fieldName=networkHeaders.name(i);    if ("Content-Length".equalsIgnoreCase(fieldName)) {      continue;    }    if (OkHeaders.isEndToEnd(fieldName)) {      result.add(fieldName,networkHeaders.value(i));    }  }  return result.build();}  }
class C{  public Set<String> searchReferralPrivilegeNames(Set<SearchFilter> filters,Subject adminSubject,String currentRealm,boolean boolAnd,int numOfEntries,boolean sortResults,boolean ascendingOrder) throws EntitlementException {  StringBuilder strFilter=new StringBuilder();  if (filters.isEmpty()) {    strFilter.append("(ou=*)");  } else {    if (filters.size() == 1) {      strFilter.append(filters.iterator().next().getFilter());    } else {      if (boolAnd) {        strFilter.append("(&");      } else {        strFilter.append("(|");      }      for (      SearchFilter psf : filters) {        strFilter.append(psf.getFilter());      }      strFilter.append(")");    }  }  return dataStore.searchReferral(adminSubject,currentRealm,strFilter.toString(),numOfEntries,sortResults,ascendingOrder);}  }
class C{  private static String attributeLevelWriteRights(AciLDAPOperationContainer container,AciHandler handler,boolean skipCheck){  StringBuilder resString=new StringBuilder();  if (skipCheck && container.isAuthzidAuthorizationDN()) {    resString.append("write").append(":1");    container.setEvaluationResult(EnumEvalReason.SKIP_ACI,null);    container.setEvalSummary(createSummary(container,true));  } else {    container.resetEffectiveRightsParams();    container.setTargAttrFiltersAciName(null);    container.setRights(ACI_WRITE_ADD | ACI_SKIP_PROXY_CHECK);    final boolean addRet=handler.accessAllowed(container) && container.getTargAttrFiltersAciName() == null;    container.setRights(ACI_WRITE_DELETE | ACI_SKIP_PROXY_CHECK);    final boolean delRet=handler.accessAllowed(container) && container.getTargAttrFiltersAciName() == null;    if (addRet && delRet) {      resString.append("write").append(":1");    } else {      if (container.getTargAttrFiltersAciName() != null) {        resString.append("write").append(":?");      } else {        resString.append("write").append(":0");      }    }  }  return resString.toString();}  }
class C{  public Hyphenation hyphenate(String word,int remainCharCount,int pushCharCount){  char[] w=word.toCharArray();  if (isMultiPartWord(w,w.length)) {    List<char[]> words=splitOnNonCharacters(w);    return new Hyphenation(new String(w),getHyphPointsForWords(words,remainCharCount,pushCharCount));  } else {    return hyphenate(w,0,w.length,remainCharCount,pushCharCount);  }}  }
class C{  public AccountLockedException(String msg){  super(msg);}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public boolean isSupportedOption(String name){  boolean isSupported=false;  for (Iterator i=mandatoryOptions.iterator(); i.hasNext() && !isSupported; ) {    String opt=(String)i.next();    isSupported=opt.equals(name);  }  for (Iterator i=optionalOptions.iterator(); i.hasNext() && !isSupported; ) {    String opt=(String)i.next();    isSupported=opt.equals(name);  }  return isSupported;}  }
class C{  public void reset(){  count=0;}  }
class C{  private void checkServerIsRunning() throws InitializationException {  if (checkIfServerIsRunning && DirectoryServer.isRunning()) {    throw new InitializationException(ERR_DIRCFG_SERVER_ALREADY_RUNNING.get());  }}  }
class C{  protected void parseDOMAttributes(Element element) throws SAML2Exception {  super.parseDOMAttributes(element);}  }
class C{  public static <T>Callable<T> privilegedCallable(Callable<T> callable){  if (callable == null)   throw new NullPointerException();  return new PrivilegedCallable<T>(callable);}  }
class C{  public void testGetNamedItemNS2() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  String attrName;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");  attrName=attribute.getNodeName();  assertEquals("namednodemapgetnameditemns02","emp:domestic",attrName);}  }
class C{  private List<RawAttribute> generateAttributes(int numAttributes,int numValues,String prefix){  List<RawAttribute> attributes=new ArrayList<>();  for (int i=0; i < numAttributes; i++) {    ArrayList<String> values=new ArrayList<>();    for (int j=0; j < numValues; j++) {      values.add(prefix + "Value" + i+ "."+ j);    }    attributes.add(new LDAPAttribute("testAttribute" + i,values));  }  return attributes;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    target.copy();  }}  }
class C{  protected String paramString(){  String desktopManagerString=(desktopManager != null ? desktopManager.toString() : "");  return super.paramString() + ",desktopManager=" + desktopManagerString;}  }
class C{  public CodeStream putLong(final long l){  ensureCapacity(8);  int i=(int)(l >>> 32);  _data[_length++]=(byte)((i >>> 24) & 0xFF);  _data[_length++]=(byte)((i >>> 16) & 0xFF);  _data[_length++]=(byte)((i >>> 8) & 0xFF);  _data[_length++]=(byte)(i & 0xFF);  i=(int)l;  _data[_length++]=(byte)((i >>> 24) & 0xFF);  _data[_length++]=(byte)((i >>> 16) & 0xFF);  _data[_length++]=(byte)((i >>> 8) & 0xFF);  _data[_length++]=(byte)(i & 0xFF);  return this;}  }
class C{  Attribute(String id){  name=id;}  }
class C{  private ConditionResult processGreaterOrEqual(SearchFilter completeFilter,Entry entry) throws DirectoryException {  if (getAttributeType() == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_GREATER_OR_EQUAL_NO_ATTRIBUTE_TYPE.get(entry.getName(),toString());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  if (assertionValue == null) {    LocalizableMessage message=ERR_SEARCH_FILTER_GREATER_OR_EQUAL_NO_VALUE.get(entry.getName(),toString(),getAttributeType().getNameOrOID());    throw new DirectoryException(ResultCode.PROTOCOL_ERROR,message);  }  Iterable<Attribute> attrs=entry.getAllAttributes(attributeDescription);  if (isEmpty(attrs)) {    if (logger.isTraceEnabled()) {      logger.trace("Returning FALSE for " + "greater-or-equal component %s in filter %s " + "because entry %s didn't have attribute type %s",this,completeFilter,entry.getName(),getAttributeType().getNameOrOID());    }    return ConditionResult.FALSE;  }  ConditionResult result=ConditionResult.FALSE;  for (  Attribute a : attrs) {switch (a.greaterThanOrEqualTo(assertionValue)) {case TRUE:      if (logger.isTraceEnabled()) {        logger.trace("Returning TRUE for greater-or-equal component " + "%s in filter %s for entry %s",this,completeFilter,entry.getName());      }    return ConditionResult.TRUE;case FALSE:  break;case UNDEFINED:if (logger.isTraceEnabled()) {  logger.trace("Undefined result encountered for " + "greater-or-equal component %s in filter %s " + "for entry %s",this,completeFilter,entry.getName());}result=ConditionResult.UNDEFINED;break;default :}}if (logger.isTraceEnabled()) {logger.trace("Returning %s for greater-or-equal component %s in " + "filter %s for entry %s",result,this,completeFilter,entry.getName());}return result;}  }
class C{  public void test_read$CII() throws IOException {  PushbackReader tobj;  char[] buf=("01234567890123456789").toCharArray();  tobj=new PushbackReader(underlying);  tobj.read(buf,6,5);  assertEquals("Wrong value read!","BEGIN",new String(buf,6,5));  assertEquals("Too much read!","012345BEGIN123456789",new String(buf));  underlying.throwExceptionOnNextUse=true;  try {    tobj.read(buf,6,5);    fail("IOException not thrown.");  } catch (  IOException e) {  }  try {    char[] c=new char[5];    pbr.read(c,0,5);    assertTrue("Failed to read chars",new String(c).equals(pbString.substring(0,5)));    assertEquals(0,pbr.read(c,0,0));    assertEquals(c.length,pbr.read(c,0,c.length));    assertEquals(0,pbr.read(c,c.length,0));  } catch (  IOException e) {    fail("IOException during read test : " + e.getMessage());  }}  }
class C{  public boolean containsValue(double val){  for (  NSObject o : dict.values()) {    if (o.getClass().equals(NSNumber.class)) {      NSNumber num=(NSNumber)o;      if (num.isReal() && num.doubleValue() == val)       return true;    }  }  return false;}  }
class C{  protected void createMBean(Server server){  StoreLoader loader=new StoreLoader();  try {    Class<?> clazz=Class.forName(getStoreConfigClass(),true,this.getClass().getClassLoader());    storeConfig=(IStoreConfig)clazz.newInstance();    if (null == getStoreRegistry())     loader.load(); else     loader.load(getStoreRegistry());    storeConfig.setRegistry(loader.getRegistry());    storeConfig.setServer(server);  } catch (  Exception e) {    log.error("createMBean load",e);    return;  }  try {    oname=new ObjectName("Catalina:type=StoreConfig");    registry.registerComponent(storeConfig,oname,"StoreConfig");  } catch (  Exception ex) {    log.error("createMBean register MBean",ex);  }}  }
class C{  public java.io.Reader readCharacterStream() throws SQLException {  return (java.io.Reader)getNextAttribute();}  }
class C{  private static PdfDictionary parseDictionary(PdfCanvasParser ps) throws IOException {  PdfDictionary dict=new PdfDictionary();  for (PdfObject key=ps.readObject(); key != null && !"ID".equals(key.toString()); key=ps.readObject()) {    PdfObject value=ps.readObject();    PdfName resolvedKey=inlineImageEntryAbbreviationMap.get((PdfName)key);    if (resolvedKey == null) {      resolvedKey=(PdfName)key;    }    dict.put(resolvedKey,getAlternateValue(resolvedKey,value));  }  int ch=ps.getTokeniser().read();  if (!PdfTokenizer.isWhitespace(ch))   throw new InlineImageParseException(PdfException.UnexpectedCharacter1FoundAfterIDInInlineImage).setMessageParams(ch);  return dict;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  FSUtils.debug.message("FSAuthnResponse.toXMLString(3): Called");  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSAuthnResponse.toXMLString: " + "providerId is null ");    throw new FSMsgException("nullProviderID",null);  }  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(SAMLConstants.DEFAULT_ENCODING).append("\" ?>\n").append(IFSConstants.QUOTE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);  }  String prefixSAML="";  String prefixLIB="";  String prefixSAML_PROTOCOL="";  String uriSAML_PROTOCOL="";  String uriSAML="";  String uriLIB="";  String uriDS="";  String uriXSI="";  if (includeNS) {    prefixLIB=IFSConstants.LIB_PREFIX;    prefixSAML=IFSConstants.ASSERTION_PREFIX;    prefixSAML_PROTOCOL=IFSConstants.PROTOCOL_PREFIX;  }  if (declareNS) {    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uriLIB=IFSConstants.LIB_12_NAMESPACE_STRING;    } else {      uriLIB=IFSConstants.LIB_NAMESPACE_STRING;    }    uriSAML=IFSConstants.assertionDeclareStr;    uriSAML_PROTOCOL=IFSConstants.PROTOCOL_NAMESPACE_STRING;    uriDS=IFSConstants.DSSAMLNameSpace;    uriXSI=IFSConstants.XSI_NAMESPACE_STRING;  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  if ((responseID != null) && (inResponseTo != null)) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.AUTHN_RESPONSE).append(uriLIB).append(uriSAML).append(uriSAML_PROTOCOL).append(IFSConstants.SPACE).append(uriDS).append(IFSConstants.SPACE).append(uriXSI).append(IFSConstants.SPACE).append(IFSConstants.RESPONSE_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(responseID).append(IFSConstants.QUOTE).append(IFSConstants.SPACE);    if ((inResponseTo != null) && (inResponseTo.length() != 0)) {      xml.append(IFSConstants.SPACE).append(IFSConstants.IN_RESPONSE_TO).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(inResponseTo).append(IFSConstants.QUOTE);    }    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION && id != null && (id.length() > 0)) {      xml.append(IFSConstants.SPACE).append(IFSConstants.ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(id).append(IFSConstants.QUOTE);    }    xml.append(IFSConstants.SPACE).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(majorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(instantString).append(IFSConstants.QUOTE);    if (consentURI != null) {      xml.append(IFSConstants.SPACE).append(IFSConstants.CONSENT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(consentURI).append(IFSConstants.QUOTE).append(IFSConstants.SPACE);    }    if ((recipient != null) && (recipient.length() != 0)) {      xml.append(IFSConstants.SPACE).append(IFSConstants.RECIPIENT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(recipient).append(IFSConstants.QUOTE).append(IFSConstants.SPACE);    }    xml.append(IFSConstants.RIGHT_ANGLE);  }  if (signed) {    if (signatureString != null && signatureString.length() != 0) {      xml.append(signatureString);    } else     if (signature != null) {      signatureString=XMLUtils.print(signature);      xml.append(signatureString);    }  }  if (status != null) {    xml.append(status.toString(includeNS,false));  }  if ((assertions != null) && (assertions != Collections.EMPTY_LIST)) {    Iterator j=assertions.iterator();    while (j.hasNext()) {      xml.append(((FSAssertion)j.next()).toXMLString(true,declareNS));    }  }  xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE).append(providerId).append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE);  if (relayState != null && relayState.length() != 0) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefixLIB).append(IFSConstants.RELAY_STATE).append(IFSConstants.RIGHT_ANGLE).append(XMLUtils.escapeSpecialCharacters(relayState)).append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.RELAY_STATE).append(IFSConstants.RIGHT_ANGLE);  }  xml.append(IFSConstants.START_END_ELEMENT).append(prefixLIB).append(IFSConstants.AUTHN_RESPONSE).append(IFSConstants.RIGHT_ANGLE).append(IFSConstants.NL);  return xml.toString();}  }
class C{  public Object next(){  if (hasNext()) {    XMPPropertyInfo result=returnProperty;    returnProperty=null;    return result;  } else {    throw new NoSuchElementException("There are no more nodes to return");  }}  }
class C{  @Override public void removeFilterDef(FilterDef filterDef){synchronized (filterDefs) {    filterDefs.remove(filterDef.getFilterName());  }  fireContainerEvent("removeFilterDef",filterDef);}  }
class C{  private static boolean containsModifiableVariableModification(ModifiableVariableHolder object,Field field){  try {    field.setAccessible(true);    ModifiableVariable mv=(ModifiableVariable)field.get(object);    return (mv != null && mv.getModification() != null && mv.isOriginalValueModified());  } catch (  IllegalAccessException|IllegalArgumentException ex) {    throw new ModificationException(ex.getLocalizedMessage(),ex);  }}  }
class C{  public TransformerException(String message,Throwable e){  super(((message == null) || (message.length() == 0)) ? e.toString() : message);  this.containedException=e;  this.locator=null;}  }
class C{  public TokenRestriction resolve(String agentId,String realm,SSOToken adminToken) throws IdRepoException, SMSException, SSOException {  Reject.ifNull(agentId);  Reject.ifNull(realm);  Reject.ifNull(adminToken);  Map<AMIdentity,Map<String,Set<String>>> agents=searchAgentById(agentId,realm,adminToken);  AgentInfo agentInfo=getAgentInfo(agents);  return createTokenRestriction(agentInfo);}  }
class C{  @Override public void write(int b) throws IOException {  write(new byte[]{(byte)b},0,1);}  }
class C{  public void characters(String s) throws org.xml.sax.SAXException {  if (m_inEntityRef && !m_expandDTDEntities)   return;  final int length=s.length();  if (length > m_charsBuff.length) {    m_charsBuff=new char[length * 2 + 1];  }  s.getChars(0,length,m_charsBuff,0);  characters(m_charsBuff,0,length);}  }
class C{  public static ByteString valueOfUtf8(final char[] chars){  if (chars.length == 0) {    return EMPTY;  }  return wrap(StaticUtils.getBytes(chars));}  }
class C{  public static byte[] decode(byte[] source,int off,int len,byte[] decodabet) throws Base64DecoderException {  int len34=len * 3 / 4;  byte[] outBuff=new byte[2 + len34];  int outBuffPosn=0;  byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=0; i < len; i++) {    sbiCrop=(byte)(source[i + off] & 0x7f);    sbiDecode=decodabet[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        if (sbiCrop == EQUALS_SIGN) {          int bytesLeft=len - i;          byte lastByte=(byte)(source[len - 1 + off] & 0x7f);          if (b4Posn == 0 || b4Posn == 1) {            throw new Base64DecoderException("invalid padding byte '=' at byte offset " + i);          } else           if ((b4Posn == 3 && bytesLeft > 2) || (b4Posn == 4 && bytesLeft > 1)) {            throw new Base64DecoderException("padding byte '=' falsely signals end of encoded value " + "at offset " + i);          } else           if (lastByte != EQUALS_SIGN && lastByte != NEW_LINE) {            throw new Base64DecoderException("encoded value has invalid trailing byte");          }          break;        }        b4[b4Posn++]=sbiCrop;        if (b4Posn == 4) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);          b4Posn=0;        }      }    } else {      throw new Base64DecoderException("Bad Base64 input character at " + i + ": "+ source[i + off]+ "(decimal)");    }  }  if (b4Posn != 0) {    if (b4Posn == 1) {      throw new Base64DecoderException("single trailing character at offset " + (len - 1));    }    b4[b4Posn++]=EQUALS_SIGN;    outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,decodabet);  }  byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public void checkJarCertificates(File file) throws Exception {  JarFile jarFile=new JarFile(file);  JarEntry je=jarFile.getJarEntry("AndroidManifest.xml");  byte[] readBuffer=new byte[1024];  long t0=System.currentTimeMillis();  InputStream is=jarFile.getInputStream(je);  while (is.read(readBuffer,0,readBuffer.length) != -1) {  }  is.close();  Certificate[] certs=je != null ? je.getCertificates() : null;  long t1=System.currentTimeMillis();  System.out.println("loadCertificates() took " + (t1 - t0) + " ms");  if (certs == null) {    System.out.println("We have no certificates");  } else {    System.out.println("We have " + certs.length + " certificates");  }}  }
class C{  public void postSingleLogoutSuccess(String hostedProviderID,HttpServletRequest request,HttpServletResponse response,String userDN,FSLogoutNotification logoutRequest,FSLogoutResponse logoutResponse,String sloProfile){  FSUtils.debug.message("In FSDefaultSPAdapter.postSingleLogoutSuccess.");}  }
class C{  protected void uninstallComponents(){  if (arrowButton != null) {    unconfigureArrowButton();  }  if (editor != null) {    unconfigureEditor();  }  comboBox.removeAll();  arrowButton=null;}  }
class C{  public final void test_ROUNDTRIP_GetKeySpecKeyString01() throws Exception {  boolean performed=false;  for (int i=0; i < algName.length; i++) {    for (int l=0; l < provider.length; l++) {      if (provider[l] == null) {        continue;      }      TestDataGenerator g;      try {        g=new TestDataGenerator(algName[i][0],algName[i][1],privateKeyInfo,provider[l]);      } catch (      TestDataGenerator.AllowedFailure allowedFailure) {        continue;      }      try {        EncryptedPrivateKeyInfo epki;        if (g.ap() == null) {          epki=new EncryptedPrivateKeyInfo(algName[i][0],g.ct());        } else {          epki=new EncryptedPrivateKeyInfo(g.ap(),g.ct());        }        try {          PKCS8EncodedKeySpec eks=epki.getKeySpec(g.pubK() == null ? g.k() : g.pubK(),provider[l].getName());          if (!Arrays.equals(privateKeyInfo,eks.getEncoded())) {            fail(algName[i][0] + " != " + algName[i][1]);          }        } catch (        InvalidKeyException e) {          fail(algName[i][0] + ", " + algName[i][1]+ ": "+ e);        }        performed=true;      } catch (      NoSuchAlgorithmException allowedFailure) {      }    }  }  assertTrue("Test not performed",performed);}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(100);  sb.append("AMIdentityRepository object: ").append(organizationDN);  return (sb.toString());}  }
class C{  @Override public void init(FilterConfig fConfig) throws ServletException {  this.filterConfig=fConfig;  this.attribute=fConfig.getInitParameter("attribute");}  }
class C{  public FrameBodyTSSE(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  public static ComponentUI createUI(JComponent c){  return new BasicTextFieldUI();}  }
class C{  private static boolean fieldsEqual(Object a,Object b){  return a == b || (a != null && a.equals(b));}  }
class C{  public Polyline shorten(int p_new_line_count,double p_last_segment_length){  PlaPointFloat last_corner=corner_approx(p_new_line_count - 2);  PlaPointFloat prev_last_corner=corner_approx(p_new_line_count - 3);  PlaPointInt new_last_corner=prev_last_corner.change_length(last_corner,p_last_segment_length).round();  if (new_last_corner.equals(corner(corner_count() - 2))) {    return new Polyline(plaline_skip(p_new_line_count - 1,p_new_line_count - 1));  }  PlaLineIntAlist new_lines=new PlaLineIntAlist(p_new_line_count);  alist_append_to(new_lines,0,p_new_line_count - 2);  PlaPointInt first_line_point=plaline(p_new_line_count - 2).point_a;  if (first_line_point.equals(new_last_corner)) {    first_line_point=plaline(p_new_line_count - 2).point_b;  }  PlaLineInt new_prev_last_line=new PlaLineInt(first_line_point,new_last_corner);  new_lines.add(new_prev_last_line);  new_lines.add(new PlaLineInt(new_last_corner,new_prev_last_line.direction().rotate_45_deg(6)));  return new Polyline(new_lines);}  }
class C{  @Override public void load(){  sessions.clear();  if (store == null)   return;  String[] ids=null;  try {    if (SecurityUtil.isPackageProtectionEnabled()) {      try {        ids=AccessController.doPrivileged(new PrivilegedStoreKeys());      } catch (      PrivilegedActionException ex) {        Exception exception=ex.getException();        log.error("Exception in the Store during load: " + exception,exception);        return;      }    } else {      ids=store.keys();    }  } catch (  IOException e) {    log.error("Can't load sessions from store, " + e.getMessage(),e);    return;  }  int n=ids.length;  if (n == 0)   return;  if (log.isDebugEnabled())   log.debug(sm.getString("persistentManager.loading",String.valueOf(n)));  for (int i=0; i < n; i++)   try {    swapIn(ids[i]);  } catch (  IOException e) {    log.error("Failed load session from store, " + e.getMessage(),e);  }}  }
class C{  public UnionPathIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  super();  opPos=OpMap.getFirstChildPos(opPos);  loadLocationPaths(compiler,opPos,0);}  }
class C{  @Override public void disconnect(){  try {    connecting=false;    setConnected(false);    if (socketChannel != null) {      try {        try {          socketChannel.socket().close();        } catch (        Exception x) {        }        try {          socketChannel.close();        } catch (        Exception x) {        }      }  finally {        socketChannel=null;      }    }    if (dataChannel != null) {      try {        try {          dataChannel.socket().close();        } catch (        Exception x) {        }        try {          dataChannel.close();        } catch (        Exception x) {        }      }  finally {        dataChannel=null;      }    }  } catch (  Exception x) {    log.error(sm.getString("nioSender.unable.disconnect",x.getMessage()));    if (log.isDebugEnabled())     log.debug(sm.getString("nioSender.unable.disconnect",x.getMessage()),x);  }}  }
class C{  public X509Name(boolean reverse,Hashtable lookUp,String dirName){  this(reverse,lookUp,dirName,new X509DefaultEntryConverter());}  }
class C{  public void start(Activity activity,int requestCode){  activity.startActivityForResult(getIntent(activity),requestCode);}  }
class C{  public boolean equal_at_end(PlaPointInt p_point){  if (p_point == null)   return false;  PlaPoint last=corner_last();  return last.equals(p_point);}  }
class C{  public FrameBodyTDTG(){}  }
class C{  private void checkKeyType(Object[] key){  if ((key == null) || (key.length == 0)) {    throw new NullPointerException("Argument key cannot be null or empty.");  }  if (key.length != this.indexNamesArray.length) {    throw new InvalidKeyException("Argument key's length=" + key.length + " is different from the number of item values, which is "+ indexNamesArray.length+ ", specified for the indexing rows in this TabularData instance.");  }  OpenType<?> keyElementType;  for (int i=0; i < key.length; i++) {    keyElementType=tabularType.getRowType().getType(this.indexNamesArray[i]);    if ((key[i] != null) && (!keyElementType.isValue(key[i]))) {      throw new InvalidKeyException("Argument element key[" + i + "] is not a value for the open type expected for "+ "this element of the index, whose name is \""+ indexNamesArray[i]+ "\" and whose open type is "+ keyElementType);    }  }}  }
class C{  private Uid executePatchOperations(ConnectorFacade facade,OperationOptions operationOptions,Multimap<String,Attribute> operations,Uid uid) throws IOException, ResourceException {  Set<String> keys=operations.keySet();  for (  String key : keys) {    Set<Attribute> attrs=ImmutableSet.copyOf(operations.get(key));    if (attrs.size() > 0) {switch (key) {case PatchOperation.OPERATION_ADD:        uid=facade.addAttributeValues(objectClassInfoHelper.getObjectClass(),uid,AttributeUtil.filterUid(attrs),operationOptions);      break;case PatchOperation.OPERATION_REMOVE:    try {      uid=facade.removeAttributeValues(objectClassInfoHelper.getObjectClass(),uid,AttributeUtil.filterUid(attrs),operationOptions);    } catch (    ConnectorException e) {      logger.debug("Error removing attribute values for object {}",uid,e);    }  break;case PatchOperation.OPERATION_REPLACE:default :uid=facade.update(objectClassInfoHelper.getObjectClass(),uid,AttributeUtil.filterUid(attrs),operationOptions);}}}return uid;}  }
class C{  @TargetApi(19) public static boolean hasTranslucentStatusBar(@Nullable final Activity activity){  if (null == activity) {    return false;  }  if (Build.VERSION.SDK_INT >= 19) {    return ((activity.getWindow().getAttributes().flags & LayoutParams.FLAG_TRANSLUCENT_STATUS) == LayoutParams.FLAG_TRANSLUCENT_STATUS);  } else {    return false;  }}  }
class C{  public static void createAgentGroup(SSOToken ssoToken,String realm,String agentGroupName,String agentType,Map attrValues) throws IdRepoException, SSOException, SMSException, ConfigurationException {  createAgentGroupEx(ssoToken,realm,agentGroupName,agentType,attrValues,null,null);}  }
class C{  public MakeLDIF(){  ldifWriter=null;  entriesWritten=0L;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS) throws FSMsgException {  return toXMLString(includeNS,declareNS,false);}  }
class C{  public static Recipe fromCursor(Cursor cursor){  Recipe recipe=new Recipe(null);  for (int c=0; c < cursor.getColumnCount(); c++) {    String columnName=cursor.getColumnName(c);    if (columnName.equals(RecipeTable.ID_COLUMN)) {      recipe.id=cursor.getString(c);    } else     if (columnName.equals(RecipeTable.TITLE_COLUMN)) {      recipe.setTitle(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.DESCRIPTION_COLUMN)) {      recipe.setDescription(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PHOTO_COLUMN)) {      recipe.setPhoto(cursor.getString(c));    } else     if (columnName.equals(RecipeTable.PREP_TIME_COLUMN)) {      recipe.setPrepTime(cursor.getString(c));    }  }  return recipe;}  }
class C{  public void fireTreeWillCollapse(TreePath path) throws ExpandVetoException {  Object[] listeners=listenerList.getListenerList();  TreeExpansionEvent e=null;  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeWillExpandListener.class) {      if (e == null)       e=new TreeExpansionEvent(this,path);      ((TreeWillExpandListener)listeners[i + 1]).treeWillCollapse(e);    }  }}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (mv != null) {    return mv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  public void insertUpdate(DocumentEvent changes,Shape a,ViewFactory f){  super.insertUpdate(changes,adjustAllocation(a),f);  updateVisibilityModel();}  }
class C{  public static boolean isJavaValidName(String str){  if (str.isEmpty())   return false;  if (javaKeys.contains(str))   return false;  char first=str.charAt(0);  if (isValidNameStartChar(first)) {    for (int i=1; i < str.length(); ++i) {      char c=str.charAt(i);      if (!isValidNameChar(c))       return false;    }    return true;  } else {    return false;  }}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value) throws IOException {  this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));}  }
class C{  public void internalFrameIconified(InternalFrameEvent e){}  }
class C{  public static String readFileToString(File file,String encoding) throws IOException {  return readFileToString(file,Charsets.toCharset(encoding));}  }
class C{  private String toString(final boolean showObfuscated,final String lineSeparator){  final StringBuilder builder=new StringBuilder();  builder.append(commandName);  if (subcommandName != null) {    builder.append(" ").append(subcommandName);  }  for (  final Argument arg : args) {    if (ArgumentConstants.OPTION_LONG_USE_SSL.equals(arg.getLongIdentifier())) {      continue;    }    String argName;    if (arg.getLongIdentifier() != null) {      argName="--" + arg.getLongIdentifier();    } else {      argName="-" + arg.getShortIdentifier();    }    if (arg instanceof BooleanArgument) {      builder.append(lineSeparator).append(argName);    } else     if (arg instanceof FileBasedArgument) {      for (      String value : ((FileBasedArgument)arg).getNameToValueMap().keySet()) {        builder.append(lineSeparator).append(argName).append(" ");        builder.append(getOutputValue(value,arg,showObfuscated));      }    } else {      for (      String value : arg.getValues()) {        builder.append(lineSeparator).append(argName).append(" ");        builder.append(getOutputValue(value,arg,showObfuscated));      }    }  }  return builder.toString();}  }
class C{  public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){  if (initialCapacity < 1) {    throw new IllegalArgumentException("initialCapacity < 1: " + initialCapacity);  }  elements=newElementArray(initialCapacity);  this.comparator=comparator;}  }
class C{  public void init(boolean encrypting,CipherParameters params) throws IllegalArgumentException {  boolean oldEncrypting=this.encrypting;  this.encrypting=encrypting;  if (params instanceof ParametersWithIV) {    ParametersWithIV ivParam=(ParametersWithIV)params;    byte[] iv=ivParam.getIV();    if (iv.length != blockSize) {      throw new IllegalArgumentException("initialisation vector must be the same length as block size");    }    System.arraycopy(iv,0,IV,0,iv.length);    reset();    if (ivParam.getParameters() != null) {      cipher.init(encrypting,ivParam.getParameters());    } else     if (oldEncrypting != encrypting) {      throw new IllegalArgumentException("cannot change encrypting state without providing key.");    }  } else {    reset();    if (params != null) {      cipher.init(encrypting,params);    } else     if (oldEncrypting != encrypting) {      throw new IllegalArgumentException("cannot change encrypting state without providing key.");    }  }}  }
class C{  public CertificateExpiredException(String message){  super(message);}  }
class C{  public boolean match(Object other){  if (other == null)   return true;  if (!(other instanceof Address))   return false; else {    AddressImpl that=(AddressImpl)other;    if (that.getMatcher() != null)     return that.getMatcher().match(this.encode()); else     if (that.displayName != null && this.displayName == null)     return false; else     if (that.displayName == null)     return address.match(that.address); else     return displayName.equalsIgnoreCase(that.displayName) && address.match(that.address);  }}  }
class C{  public void show(Component invoker,int x,int y){  if (DEBUG) {    System.out.println("in JPopupMenu.show ");  }  setInvoker(invoker);  Frame newFrame=getFrame(invoker);  if (newFrame != frame) {    if (newFrame != null) {      this.frame=newFrame;      if (popup != null) {        setVisible(false);      }    }  }  Point invokerOrigin;  if (invoker != null) {    invokerOrigin=invoker.getLocationOnScreen();    long lx, ly;    lx=((long)invokerOrigin.x) + ((long)x);    ly=((long)invokerOrigin.y) + ((long)y);    if (lx > Integer.MAX_VALUE)     lx=Integer.MAX_VALUE;    if (lx < Integer.MIN_VALUE)     lx=Integer.MIN_VALUE;    if (ly > Integer.MAX_VALUE)     ly=Integer.MAX_VALUE;    if (ly < Integer.MIN_VALUE)     ly=Integer.MIN_VALUE;    setLocation((int)lx,(int)ly);  } else {    setLocation(x,y);  }  setVisible(true);}  }
class C{  private boolean doFederationTermination(HttpServletRequest request,HttpServletResponse response,FSAccountFedInfo acctInfo){  FSUtils.debug.message("Entered FSFedTerminationHandler::doFederationTermination");  try {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFedTerminationHandler::doFederationTermination create" + " request start");    }    FSFederationTerminationNotification reqFedTermination=createFederationTerminationRequest(acctInfo);    reqFedTermination.setMinorVersion(FSServiceUtils.getMinorVersion(remoteDescriptor.getProtocolSupportEnumeration()));    if (reqFedTermination == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSIDPFedTerminationHandler::Termination request could " + "not be formed");      }      FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);      return false;    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSIDPFedTerminationHandler::Termination request formed" + "successfully");    }    boolean isSOAPProfile=true;    if (acctInfo.isRoleIDP()) {      List hostProfiles=hostedDescriptor.getFederationTerminationNotificationProtocolProfile();      if (hostProfiles == null || hostProfiles.isEmpty()) {        FSUtils.debug.error("FSFedTerminationHandler::" + "doFederationTermination no termination profile" + " cannot process request");        FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);        return false;      }      String profile=(String)hostProfiles.iterator().next();      if (profile.equalsIgnoreCase(IFSConstants.TERMINATION_SP_SOAP_PROFILE) || profile.equalsIgnoreCase(IFSConstants.TERMINATION_IDP_SOAP_PROFILE)) {        isSOAPProfile=true;      } else       if (profile.equalsIgnoreCase(IFSConstants.TERMINATION_SP_HTTP_PROFILE) || profile.equalsIgnoreCase(IFSConstants.TERMINATION_IDP_HTTP_PROFILE)) {        isSOAPProfile=false;      } else {        FSUtils.debug.error("FSFedTerminationHandler::" + "doFederationTermination Invalid termination profile" + " cannot process request");        FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);        return false;      }    } else {      List remoteProfiles=remoteDescriptor.getFederationTerminationNotificationProtocolProfile();      if (remoteProfiles == null || remoteProfiles.isEmpty()) {        FSUtils.debug.error("FSFedTerminationHandler::" + "doFederationTermination no termination profile" + " cannot process request");        FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);        return false;      }      String profile=(String)remoteProfiles.iterator().next();      if (profile.equalsIgnoreCase(IFSConstants.TERMINATION_SP_SOAP_PROFILE) || profile.equalsIgnoreCase(IFSConstants.TERMINATION_IDP_SOAP_PROFILE)) {        isSOAPProfile=true;      } else       if (profile.equalsIgnoreCase(IFSConstants.TERMINATION_SP_HTTP_PROFILE) || profile.equalsIgnoreCase(IFSConstants.TERMINATION_IDP_HTTP_PROFILE)) {        isSOAPProfile=false;      } else {        FSUtils.debug.error("FSFedTerminationHandler::" + "doFederationTermination Invalid termination profile" + " cannot process request");        FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);        return false;      }    }    if (isSOAPProfile) {      FSSOAPService instSOAP=FSSOAPService.getInstance();      if (instSOAP != null) {        FSUtils.debug.message("Signing suceeded. To call bindTerminationRequest");        reqFedTermination.setID(IFSConstants.TERMINATIONID);        SOAPMessage msgTermination=instSOAP.bind(reqFedTermination.toXMLString(true,true));        if (msgTermination != null) {          try {            if (FSServiceUtils.isSigningOn()) {              int minorVersion=reqFedTermination.getMinorVersion();              if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION) {                msgTermination=signTerminationRequest(msgTermination,IFSConstants.ID,reqFedTermination.getID());              } else               if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {                msgTermination=signTerminationRequest(msgTermination,IFSConstants.REQUEST_ID,reqFedTermination.getRequestID());              } else {                FSUtils.debug.message("invalid minor version.");              }            }            boolean sendStatus=instSOAP.sendTerminationMessage(msgTermination,remoteDescriptor.getSoapEndpoint());            if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {              FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);              if (spAdapter != null) {                try {                  spAdapter.postTerminationNotificationSuccess(hostedEntityId,request,response,userID,reqFedTermination,IFSConstants.TERMINATION_SP_SOAP_PROFILE);                } catch (                Exception e) {                  FSUtils.debug.error("postTerm.SP/SOAP",e);                }              }            }            FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);            return sendStatus;          } catch (          Exception e) {            FSUtils.debug.error("FSFedTerminationHandler::" + "doFederationTermination " + FSUtils.bundle.getString(IFSConstants.TERMINATION_FAILED_SEND_REMOTE));            FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);            return false;          }        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSSPFedTerminationHandler::doFederation" + "Termination failed. Error in forming Message");          }          FSUtils.debug.error("FSSPFedTerminationHandler.doFederationTermination " + FSUtils.bundle.getString(IFSConstants.TERMINATION_FAILED_SEND_REMOTE));          FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);          return false;        }      }      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSFedTerminationHandler::doFederationTermination " + "failed. Cannot get Service Manager instance");      }      FSUtils.debug.error("FSSPFedTerminationHandler::doFederationTermination " + FSUtils.bundle.getString(IFSConstants.TERMINATION_FAILED_SEND_REMOTE));      FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);      return false;    } else {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSFedTerminationHandler::doFederationTermination " + "In Redirect profile");      }      String urlEncodedRequest=reqFedTermination.toURLEncodedQueryString();      if (FSServiceUtils.isSigningOn()) {        String certAlias=IDFFMetaUtils.getFirstAttributeValueFromConfig(hostedConfig,IFSConstants.SIGNING_CERT_ALIAS);        if (certAlias == null || certAlias.length() == 0) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("FSBrowserArtifactConsumerHandler:: " + "signSAMLRequest:" + "couldn't obtain this site's cert alias.");          }          throw new SAMLResponderException(FSUtils.bundle.getString(IFSConstants.NO_CERT_ALIAS));        }        urlEncodedRequest=FSSignatureUtil.signAndReturnQueryString(urlEncodedRequest,certAlias);      }      StringBuffer redirectURL=new StringBuffer();      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("Request to be sent : " + urlEncodedRequest);      }      String retURL=remoteDescriptor.getFederationTerminationServiceURL();      redirectURL.append(retURL);      if (retURL.indexOf(IFSConstants.QUESTION_MARK) == -1) {        redirectURL.append(IFSConstants.QUESTION_MARK);      } else {        redirectURL.append(IFSConstants.AMPERSAND);      }      redirectURL.append(urlEncodedRequest);      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSFedTerminationHandler::Redirect URL is " + redirectURL.toString());      }      if (hostedProviderRole != null && hostedProviderRole.equalsIgnoreCase(IFSConstants.SP)) {        FederationSPAdapter spAdapter=FSServiceUtils.getSPAdapter(hostedEntityId,hostedConfig);        if (spAdapter != null) {          try {            spAdapter.postTerminationNotificationSuccess(hostedEntityId,request,response,userID,reqFedTermination,IFSConstants.TERMINATION_SP_HTTP_PROFILE);          } catch (          Exception e) {            FSUtils.debug.error("postTerm.SP/HTTP",e);          }        }      }      response.sendRedirect(redirectURL.toString());      return true;    }  } catch (  IOException e) {    FSUtils.debug.error("FSFedTerminationHandler" + FSUtils.bundle.getString(IFSConstants.FEDERATION_REDIRECT_FAILED));  }catch (  FSMsgException e) {    FSUtils.debug.error("FSFedTerminationHandler::doFederationTermination " + FSUtils.bundle.getString(IFSConstants.TERMINATION_FAILED_SEND_REMOTE));  }catch (  SAMLResponderException e) {    FSUtils.debug.error("FSFedTerminationHandler::doFederationTermination " + FSUtils.bundle.getString(IFSConstants.TERMINATION_FAILED_SEND_REMOTE));  }  FSServiceUtils.returnLocallyAfterOperation(response,termination_done_url,true,IFSConstants.TERMINATION_SUCCESS,IFSConstants.TERMINATION_FAILURE);  return false;}  }
class C{  public AMAuthenticationAuditEventBuilder entry(AuthenticationAuditEntry authenticationAuditEntry){  if (authenticationAuditEntry != null) {    super.entries(singletonList(authenticationAuditEntry.toMap()));  }  return this;}  }
class C{  public static void writePackageName(ByteBuffer buffer,String packageName){  buffer.put(packageName.getBytes(Charset.forName("UTF-16LE")),0,PACKAGE_NAME_SIZE);}  }
class C{  public void revokeWritePermission(Collection attributeNames){  Iterator it=attributeNames.iterator();  if (it != null) {    while (it.hasNext()) {      String temp=(String)it.next();      writables.remove(temp.toLowerCase());    }  }}  }
class C{  public XMLString substring(int beginIndex,int endIndex){  return new XMLStringDefault(m_str.substring(beginIndex,endIndex));}  }
class C{  public void paintProgressBarForeground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  public static synchronized String[][] read(String logName,String logType,Object userCrdential) throws IOException, NoSuchFieldException, IllegalArgumentException, RuntimeException, Exception {  queryResult=read(logName,logType,(String)null,(LogQuery)null,userCrdential);  return queryResult;}  }
class C{  public void testHitEndAfterFind(){  hitEndTest(true,"#01.0","r((ege)|(geg))x","regexx",false);  hitEndTest(true,"#01.1","r((ege)|(geg))x","regex",false);  hitEndTest(true,"#01.2","r((ege)|(geg))x","rege",true);  hitEndTest(true,"#01.2","r((ege)|(geg))x","xregexx",false);  hitEndTest(true,"#02.0","regex","rexreger",true);  hitEndTest(true,"#02.1","regex","raxregexr",false);  String floatRegex=getHexFloatRegex();  hitEndTest(true,"#03.0",floatRegex,Double.toHexString(-1.234d),true);  hitEndTest(true,"#03.1",floatRegex,"1 ABC" + Double.toHexString(Double.NaN) + "buhuhu",false);  hitEndTest(true,"#03.2",floatRegex,Double.toHexString(-0.0) + "--",false);  hitEndTest(true,"#03.3",floatRegex,"--" + Double.toHexString(Double.MIN_VALUE) + "--",false);  hitEndTest(true,"#04.0","(\\d+) fish (\\d+) fish (\\w+) fish (\\d+)","1 fish 2 fish red fish 5",true);  hitEndTest(true,"#04.1","(\\d+) fish (\\d+) fish (\\w+) fish (\\d+)","----1 fish 2 fish red fish 5----",false);}  }
class C{  public boolean hasBeenModified() throws IOException {  boolean isConfigFileModified=getPort() != 389;  if (!isConfigFileModified) {    isConfigFileModified=!getLowerCaseContents().contains("# The contents of this file are subject to the terms of the Common Development".toLowerCase());  }  return isConfigFileModified;}  }
class C{  @Override public void addMimeMapping(String extension,String mimeType){synchronized (mimeMappings) {    mimeMappings.put(extension.toLowerCase(Locale.ENGLISH),mimeType);  }  fireContainerEvent("addMimeMapping",extension);}  }
class C{  private void rebuild(boolean clearSelection){  Object rootObject;  treePathMapping.clear();  if (treeModel != null && (rootObject=treeModel.getRoot()) != null) {    root=createNodeForValue(rootObject);    root.path=new TreePath(rootObject);    addMapping(root);    root.updatePreferredSize(0);    visibleNodes.removeAllElements();    if (isRootVisible())     visibleNodes.addElement(root);    if (!root.isExpanded())     root.expand(); else {      Enumeration cursor=root.children();      while (cursor.hasMoreElements()) {        visibleNodes.addElement(cursor.nextElement());      }      if (!isFixedRowHeight())       updateYLocationsFrom(0);    }  } else {    visibleNodes.removeAllElements();    root=null;  }  if (clearSelection && treeSelectionModel != null) {    treeSelectionModel.clearSelection();  }  this.visibleNodesChanged();}  }
class C{  protected void checkOuputStreams(ByteStringBuilder out,ByteStringBuilder err,Object expectedOutput,Object expectedError) throws Exception {  checkOutputStream(out,expectedOutput);  checkOutputStream(err,expectedError);}  }
class C{  public String doubleMetaphone(String value){  return doubleMetaphone(value,false);}  }
class C{  public FrameBodyTSST(){}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  support.addPropertyChangeListener(listener);}  }
class C{  private void searchPublicNamingContexts(ResultCode expectedRC,int expectedNamingContexts) throws Exception {  searchEntries("",expectedRC,expectedNamingContexts);}  }
class C{  private static final void unescapeDoubleQuotes(ByteChunk bc){  if (bc == null || bc.getLength() == 0 || bc.indexOf('"',0) == -1) {    return;  }  byte[] original=bc.getBuffer();  int len=bc.getLength();  byte[] copy=new byte[len];  System.arraycopy(original,bc.getStart(),copy,0,len);  int src=0;  int dest=0;  while (src < len) {    if (copy[src] == '\\' && src < len && copy[src + 1] == '"') {      src++;    }    copy[dest]=copy[src];    dest++;    src++;  }  bc.setBytes(copy,0,dest);}  }
class C{  public static void updateComboBoxModel(Collection<?> newElements,DefaultComboBoxModel model,Comparator<Object> comparator){  boolean changed=newElements.size() != model.getSize();  if (!changed) {    int i=0;    for (    Object newElement : newElements) {      if (comparator != null) {        changed=comparator.compare(newElement,model.getElementAt(i)) != 0;      } else {        changed=!newElement.equals(model.getElementAt(i));      }      if (changed) {        break;      }      i++;    }  }  if (changed) {    Object selected=model.getSelectedItem();    model.removeAllElements();    boolean selectDefault=false;    for (    Object newElement : newElements) {      model.addElement(newElement);    }    if (selected != null) {      if (model.getIndexOf(selected) != -1) {        model.setSelectedItem(selected);      } else {        selectDefault=true;      }    } else {      selectDefault=true;    }    if (selectDefault) {      for (int i=0; i < model.getSize(); i++) {        Object o=model.getElementAt(i);        if (o instanceof CategorizedComboBoxElement && ((CategorizedComboBoxElement)o).getType() == CategorizedComboBoxElement.Type.CATEGORY) {          continue;        }        model.setSelectedItem(o);        break;      }    }  }}  }
class C{  public boolean isReverse(){  return true;}  }
class C{  public void fireTableRowsDeleted(int firstRow,int lastRow){  fireTableChanged(new TableModelEvent(this,firstRow,lastRow,TableModelEvent.ALL_COLUMNS,TableModelEvent.DELETE));}  }
class C{  public void process(String name,Vector elems,Hashtable atts,String pcdata){  _logname=((Log)elems.elementAt(0))._logname;  _loggedBySid=((Log)elems.elementAt(0))._loggedBySid;  for (int i=1; i < elems.size(); i++) {    com.sun.identity.log.service.LogRecord lr=(com.sun.identity.log.service.LogRecord)elems.elementAt(i);    _records.addElement(lr);  }}  }
class C{  public StreamReaderDelegate(){}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  NamedNodeMap attrList;  String value;  doc=(Document)load("staff",true);  docFragment=doc.createDocumentFragment();  attrList=docFragment.getAttributes();  assertNull("attributesNull",attrList);  value=docFragment.getNodeValue();  assertNull("initiallyNull",value);}  }
class C{  public String byteStringNoSlash(){  StringBuilder retval=new StringBuilder();  try {    while (true) {      char next=lookAhead(0);      if (next == '\0' || next == '\n' || next == '/') {        break;      } else {        consume(1);        retval.append(next);      }    }  } catch (  ParseException ex) {    return retval.toString();  }  return retval.toString();}  }
class C{  private static boolean isTokenChar(char c){  return ((c > 040) && (c < 0177)) && (TSPECIALS.indexOf(c) < 0);}  }
class C{  public boolean next(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("next",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    return $self.next();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public void CopyFrom(ToXMLStream xmlListener){  setWriter(xmlListener.m_writer);  String encoding=xmlListener.getEncoding();  setEncoding(encoding);  setOmitXMLDeclaration(xmlListener.getOmitXMLDeclaration());  m_ispreserve=xmlListener.m_ispreserve;  m_preserves=xmlListener.m_preserves;  m_isprevtext=xmlListener.m_isprevtext;  m_doIndent=xmlListener.m_doIndent;  setIndentAmount(xmlListener.getIndentAmount());  m_startNewLine=xmlListener.m_startNewLine;  m_needToOutputDocTypeDecl=xmlListener.m_needToOutputDocTypeDecl;  setDoctypeSystem(xmlListener.getDoctypeSystem());  setDoctypePublic(xmlListener.getDoctypePublic());  setStandalone(xmlListener.getStandalone());  setMediaType(xmlListener.getMediaType());  m_encodingInfo=xmlListener.m_encodingInfo;  m_spaceBeforeClose=xmlListener.m_spaceBeforeClose;  m_cdataStartCalled=xmlListener.m_cdataStartCalled;}  }
class C{  public FrameBodyWPUB(){}  }
class C{  public void updateConfigurationAttribute(AttributeType attr,Schema schema){  configurationAttributePanel.update(attr,schema);  schemaElementPanel=configurationAttributePanel;  ((CardLayout)mainPanel.getLayout()).show(mainPanel,configurationAttributePanel.getTitle().toString());}  }
class C{  final boolean transferForSignal(Node node){  if (!compareAndSetWaitStatus(node,Node.CONDITION,0))   return false;  Node p=enq(node);  int ws=p.waitStatus;  if (ws > 0 || !compareAndSetWaitStatus(p,ws,Node.SIGNAL))   LockSupport.unpark(node.thread);  return true;}  }
class C{  public PluginResult.PostOperation invokePostOperationUnbindPlugins(PostOperationUnbindOperation unbindOperation){  PluginResult.PostOperation result=null;  PluginResult.PostOperation finalResult=null;  ArrayList<DirectoryServerPlugin> skippedPlugins=skippedPreOperationPlugins.remove(unbindOperation);  for (  DirectoryServerPlugin p : postOperationUnbindPlugins) {    if (isInternalOperation(unbindOperation,p) || isSkipped(skippedPlugins,p)) {      continue;    }    try {      result=p.doPostOperation(unbindOperation);    } catch (    Exception e) {      logException(unbindOperation,p,e,ERR_PLUGIN_POST_OPERATION_PLUGIN_EXCEPTION);    }    if (result == null) {      logNullResult(unbindOperation,p,ERR_PLUGIN_POST_OPERATION_PLUGIN_RETURNED_NULL);    } else     if (!result.continueProcessing()) {      finalResult=result;    }  }  if (result == null) {    finalResult=PluginResult.PostOperation.continueOperationProcessing();  } else   if (finalResult == null) {    finalResult=result;  }  return finalResult;}  }
class C{  public PlaDirection perpendicular_direction(PlaPointInt p_from_point){  PlaSide line_side=side_of(p_from_point);  if (line_side == PlaSide.COLLINEAR)   return null;  PlaDirection dir1=direction().rotate_45_deg(2);  PlaPointInt check_point_1=p_from_point.translate_by(dir1);  if (side_of(check_point_1) != line_side)   return dir1;  PlaDirection dir2=direction().rotate_45_deg(6);  PlaPointInt check_point_2=p_from_point.translate_by(dir2);  if (side_of(check_point_2) != line_side)   return dir2;  PlaPointFloat nearest_line_point=p_from_point.to_float().projection_approx(this);  if (nearest_line_point.distance_square(check_point_1.to_float()) <= nearest_line_point.distance_square(check_point_2.to_float()))   return dir1; else   return dir2;}  }
class C{  @Override public int hashCode(){  return toString().hashCode();}  }
class C{  static void processRESTPolicyNotification(String pn) throws PolicyEvaluationException {  if (pn != null) {    if (debug.messageEnabled()) {      debug.message("ResourceResultCache:processRESTPolicyNotification(), jsonString:" + pn);    }    ResourceResultCache cache=ResourceResultCache.getInstance();    String serviceName="iPlanetAMWebAgentService";    Set<String> affectedResourceNames=null;    try {      JSONObject jo=new JSONObject(pn);      JSONArray jsonArray=jo.optJSONArray("resources");      if (jsonArray != null) {        int arrayLen=jsonArray.length();        for (int i=0; i < arrayLen; i++) {          String resName=jsonArray.optString(i);          if (affectedResourceNames == null) {            affectedResourceNames=new HashSet<String>();          }          affectedResourceNames.add(resName);        }      }    } catch (    JSONException je) {      debug.error("ResourceResultCache.processRESTPolicyNotification():" + "pn=" + pn);      throw new PolicyEvaluationException("notification_not_valid_json");    }    if (serviceName != null && affectedResourceNames != null) {      if (cache.remotePolicyListeners.contains(serviceName)) {        if (debug.messageEnabled()) {          debug.message("ResourceResultCache:" + "processRESTPolicyNotification():" + "serviceName=" + serviceName + ":affectedResourceNames="+ affectedResourceNames+ ":clearing cache for affected "+ "resource names");        }        clearCacheForResourceNames(serviceName,affectedResourceNames);      } else {        if (debug.messageEnabled()) {          debug.message("ResourceResultCache:" + "processRESTPolicyNotification():" + "serviceName not registered"+ ":no resource names cleared from cache");        }      }    } else {      if (debug.messageEnabled()) {        debug.message("ResourceResultCache:" + "processRESTPolicyNotification():" + "serviceName or affectedResourceNames is null"+ ":no resource names cleared from cache");      }    }  } else {    debug.error("ResourceResultCache.processRESTPolicyNotification()" + "PolicyNotification is null");  }}  }
class C{  public CertificateMessage(HandshakeIODataStream in,int length) throws IOException {  int l=in.readUint24();  if (l == 0) {    if (length != 3) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateMessage");    }    certs=new X509Certificate[0];    encoded_certs=new byte[0][0];    this.length=3;    return;  }  CertificateFactory cf;  try {    cf=CertificateFactory.getInstance("X509");  } catch (  CertificateException e) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);    return;  }  ArrayList<X509Certificate> certsList=new ArrayList<X509Certificate>();  int size=0;  int enc_size=0;  while (l > 0) {    size=in.readUint24();    l-=3;    try {      certsList.add((X509Certificate)cf.generateCertificate(in));    } catch (    CertificateException e) {      fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR",e);    }    l-=size;    enc_size+=size;  }  certs=certsList.toArray(new X509Certificate[certsList.size()]);  this.length=3 + 3 * certs.length + enc_size;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect CertificateMessage");  }}  }
class C{  public int redo(UndoOwner[] owners,int count){  if (mWorking != null) {    throw new IllegalStateException("Can't be called during an update");  }  int num=0;  int i=-1;  mInUndo=true;  while (count > 0 && (i=findPrevState(mRedos,owners,i)) >= 0) {    UndoState state=mRedos.remove(i);    state.redo();    mUndos.add(state);    count--;    num++;  }  mInUndo=false;  return num;}  }
class C{  public static int showInternalConfirmDialog(Component parentComponent,Object message){  return showInternalConfirmDialog(parentComponent,message,UIManager.getString("OptionPane.titleText"),YES_NO_CANCEL_OPTION);}  }
class C{  @DataProvider(name="identifiedChoicdeIdentifierValues") public Object[][] createIdentifiedChoicdeIdentifierValues(){  return new Object[][]{{"serialNumber:",true},{"issuer1:",true},{"Serialnumber:",false},{"0serialnumber:",false},{"serial Number:",false},{"missingColon",false}};}  }
class C{  public final static String formatElements(final HeaderElement[] elems,final boolean quote,HeaderValueFormatter formatter){  if (formatter == null)   formatter=BasicHeaderValueFormatter.DEFAULT;  return formatter.formatElements(null,elems,quote).toString();}  }
class C{  private void createDAG(){  List<DependencyInfo> sorted=new ArrayList<DependencyInfo>(stepMappings.size());  boolean updated=true;  while (!stepMappings.isEmpty() && updated) {    updated=false;    Iterator<Map.Entry<String,DependencyInfo>> it=stepMappings.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<String,DependencyInfo> entry=it.next();      DependencyInfo depInfo=entry.getValue();      depInfo.dependencies.removeAll(sorted);      if ((depInfo.dependencies.isEmpty() && !depInfo.className.equals("*")) || (stepMappings.size() == 2) && depInfo.className.equals("*")) {        sorted.add(depInfo);        it.remove();        updated=true;      }    }  }  if (!stepMappings.isEmpty()) {    processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR,"Unable to detect DAG, there seems to be a directed cycle across the following dependencies: " + stepMappings.values().toString());  } else {    String outputFile=processingEnv.getOptions().get("outputFile");    StringBuilder sb=new StringBuilder(200);    sb.append("upgrade.step.order=");    for (    DependencyInfo dependencyInfo : sorted) {      if (!dependencyInfo.className.equals("*")) {        sb.append(dependencyInfo.className).append(' ');      }    }    sb.deleteCharAt(sb.length() - 1);    writeFile(outputFile,sb.toString());  }}  }
class C{  protected synchronized void save(PrintWriter writer,String path,StringManager smClient){  ObjectName storeConfigOname;  try {    storeConfigOname=new ObjectName("Catalina:type=StoreConfig");  } catch (  MalformedObjectNameException e) {    log(sm.getString("managerServlet.exception"),e);    writer.println(smClient.getString("managerServlet.exception",e.toString()));    return;  }  if (!mBeanServer.isRegistered(storeConfigOname)) {    writer.println(smClient.getString("managerServlet.storeConfig.noMBean",storeConfigOname));    return;  }  if ((path == null) || path.length() == 0 || !path.startsWith("/")) {    try {      mBeanServer.invoke(storeConfigOname,"storeConfig",null,null);      writer.println(smClient.getString("managerServlet.saved"));    } catch (    Exception e) {      log("managerServlet.storeConfig",e);      writer.println(smClient.getString("managerServlet.exception",e.toString()));      return;    }  } else {    String contextPath=path;    if (path.equals("/")) {      contextPath="";    }    Context context=(Context)host.findChild(contextPath);    if (context == null) {      writer.println(smClient.getString("managerServlet.noContext",path));      return;    }    try {      mBeanServer.invoke(storeConfigOname,"store",new Object[]{context},new String[]{"java.lang.String"});      writer.println(smClient.getString("managerServlet.savedContext",path));    } catch (    Exception e) {      log("managerServlet.save[" + path + "]",e);      writer.println(smClient.getString("managerServlet.exception",e.toString()));      return;    }  }}  }
class C{  public void visitClassType(String name){}  }
class C{  static String readQuotedToken(StringReader input) throws IOException {  StringBuilder result=new StringBuilder();  boolean quoted=false;  int c=skipLws(input,false);  if (c == '"') {    quoted=true;  } else   if (c == -1 || !isToken(c)) {    return null;  } else {    result.append((char)c);  }  c=input.read();  while (c != -1 && isToken(c)) {    result.append((char)c);    c=input.read();  }  if (quoted) {    if (c != '"') {      return null;    }  } else {    input.skip(-1);  }  if (c != -1 && result.length() == 0) {    return null;  } else {    return result.toString();  }}  }
class C{  private boolean isServerRunning(){  return Installation.getLocal().getStatus().isServerRunning();}  }
class C{  Hyphen(String pre){  preBreak=pre;  noBreak=null;  postBreak=null;}  }
class C{  public void processInvite(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme: got an Invite sending Trying");    ServerTransaction st=requestEvent.getServerTransaction();    if (st == null) {      logger.info("null server tx -- getting a new one");      st=sipProvider.getNewServerTransaction(request);    }    logger.info("getNewServerTransaction : " + st);    String txId=((ViaHeader)request.getHeader(ViaHeader.NAME)).getBranch();    this.serverTxTable.put(txId,st);    Response response=protocolObjects.messageFactory.createResponse(Response.TRYING,request);    ListeningPoint lp=sipProvider.getListeningPoint(protocolObjects.transport);    int myPort=lp.getPort();    Address address=protocolObjects.addressFactory.createAddress("Shootme <sip:" + myAddress + ":"+ myPort+ ">");    int timeToSleep=(int)(Math.random() * 1000);    st.sendResponse(response);    Response ringingResponse=protocolObjects.messageFactory.createResponse(Response.RINGING,request);    ContactHeader contactHeader=protocolObjects.headerFactory.createContactHeader(address);    response.addHeader(contactHeader);    ToHeader toHeader=(ToHeader)ringingResponse.getHeader(ToHeader.NAME);    String toTag=actAsNonRFC3261UAS ? null : new Integer((int)(Math.random() * 10000)).toString();    if (!actAsNonRFC3261UAS)     toHeader.setTag(toTag);    ringingResponse.addHeader(contactHeader);    st.sendResponse(ringingResponse);    Dialog dialog=st.getDialog();    dialog.setApplicationData(st);    this.inviteSeen=true;    new Timer().schedule(new MyTimerTask(requestEvent,st),timeToSleep);  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public void serviceAvailable(BeanContextServiceAvailableEvent bcsae){}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsspolicy.RecipientEncryptionTokenElement createRecipientEncryptionTokenElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsspolicy.impl.RecipientEncryptionTokenElementImpl();}  }
class C{  public static boolean isUserLoggedIn(){  return currentUser != null;}  }
class C{  @Override public void addApplicationParameter(ApplicationParameter parameter){synchronized (applicationParametersLock) {    String newName=parameter.getName();    for (    ApplicationParameter p : applicationParameters) {      if (newName.equals(p.getName()) && !p.getOverride())       return;    }    ApplicationParameter results[]=Arrays.copyOf(applicationParameters,applicationParameters.length + 1);    results[applicationParameters.length]=parameter;    applicationParameters=results;  }  fireContainerEvent("addApplicationParameter",parameter);}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  try {    logger.info("shootme: got an ACK " + requestEvent.getRequest());    int ackCount=((ApplicationData)dialog.getApplicationData()).ackCount;    logger.info("Dialogapplication data " + dialog.getApplicationData());    if (ackCount == 1) {      dialog=inviteTid.getDialog();      Thread.sleep(100);      this.sendReInvite(sipProvider);    }    ((ApplicationData)dialog.getApplicationData()).ackCount++;  } catch (  Exception ex) {    String s="Unexpected error";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  private static List<Integer[]> confirmedLocations(String str,List<Integer> possibleLocations){  List<Integer[]> confirmedLocations=new ArrayList<Integer[]>();  Integer[] lastPair={-1,-1};  for (  Integer start : possibleLocations) {    int length=0;    if (start != 0 && str.charAt(start - 1) == '\\') {      continue;    }    boolean found=false;    for (int i=start; i < str.length(); i++) {      length+=1;      if (str.charAt(i) == '}') {        found=true;        break;      }    }    if ((lastPair[0] + lastPair[1] < start) && found) {      Integer[] pair={start,length};      confirmedLocations.add(pair);    }  }  return confirmedLocations;}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node ownerElement;  Attr attr;  doc=(Document)load("staffNS",false);  attr=doc.createAttributeNS("http://www.w3.org/DOM","dom:attr");  ownerElement=attr.getOwnerElement();  assertNull("attrgetownerelement03",ownerElement);}  }
class C{  public ProcessBuilder command(List<String> command){  if (command == null) {    throw new NullPointerException("command == null");  }  this.command=command;  return this;}  }
class C{  private String readStandardString(int length) throws java.io.IOException {  return raf.readString(length,PdfEncodings.WINANSI);}  }
class C{  public static List<String> splitClassNames(String clazzNames,String separator){  List<String> res=new ArrayList<>();  if (clazzNames == null || clazzNames.isEmpty()) {    return res;  }  for (  String clazzName : clazzNames.split(separator)) {    clazzName=clazzName.trim();    if (!clazzName.isEmpty()) {      res.add(clazzName);    }  }  return res;}  }
class C{  public ParameterBlock add(long l){  return add(new Long(l));}  }
class C{  public DashedBorder(Color color,float width){  super(color,width);}  }
class C{  public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == '+') {      buffer.write(' ');    } else     if (b == '%') {      try {        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          throw new DecoderException("Invalid URL encoding");        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        throw new DecoderException("Invalid URL encoding");      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public Object clone(){  Referrals answer=null;  try {    answer=(Referrals)super.clone();  } catch (  CloneNotSupportedException cnse) {    PolicyManager.debug.error("Referrals: clone failed",cnse);  }  answer.name=name;  answer.description=description;  answer.referrals=new HashMap();  Iterator items=referrals.keySet().iterator();  while (items.hasNext()) {    Object item=items.next();    answer.referrals.put(item,referrals.get(item));  }  return (answer);}  }
class C{  public static String calculateITableName(String databaseName,String tableName,String indexName){  String key=databaseName + ":" + tableName+ ":"+ indexName;  Cache c=CacheFactory.getCache("iTableName");  Element e=c.get(key);  if (e == null || e.getObjectValue() == null) {    StringBuilder sb=new StringBuilder();    sb.append(databaseName);    sb.append('_');    sb.append(tableName);    sb.append('_');    sb.append(indexName);    e=new Element(key,sb.toString().toLowerCase());    c.put(e);  }  return (String)e.getObjectValue();}  }
class C{  public void testConstrStringWithExponentWithoutPoint4(){  String a="238768787678287e+214";  int aScale=-214;  BigInteger bA=new BigInteger("238768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public void test_getInstanceLjava_lang_StringLjava_security_Provider() throws Exception {  Provider[] providers=Security.getProviders("Cipher.DES");  assertNotNull("No installed providers support Cipher.DES",providers);  for (int i=0; i < providers.length; i++) {    Cipher cipher=Cipher.getInstance("DES",providers[i]);    assertNotNull("Cipher.getInstance() returned a null value",cipher);  }  try {    Cipher.getInstance("DES",(Provider)null);    fail();  } catch (  IllegalArgumentException expected) {  }  try {    Cipher.getInstance("WrongAlg",providers[0]);    fail();  } catch (  NoSuchAlgorithmException expected) {  }}  }
class C{  private static boolean isValueAbsent(String s){  return s == null || s.length() == 0;}  }
class C{  public void addElement(int value){  int indexRelativeToCache=m_firstFree - m_buildCacheStartIndex;  if (indexRelativeToCache >= 0 && indexRelativeToCache < m_blocksize) {    m_buildCache[indexRelativeToCache]=value;    ++m_firstFree;  } else {    int index=m_firstFree >>> m_SHIFT;    int offset=m_firstFree & m_MASK;    if (index >= m_map.length) {      int newsize=index + m_numblocks;      int[][] newMap=new int[newsize][];      System.arraycopy(m_map,0,newMap,0,m_map.length);      m_map=newMap;    }    int[] block=m_map[index];    if (null == block)     block=m_map[index]=new int[m_blocksize];    block[offset]=value;    m_buildCache=block;    m_buildCacheStartIndex=m_firstFree - offset;    ++m_firstFree;  }}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof JMXPrincipal))   return false;  JMXPrincipal that=(JMXPrincipal)o;  return (this.getName().equals(that.getName()));}  }
class C{  public static Entry makeEntry(List<String> ldifLines){  return makeEntry(ldifLines.toArray(new String[ldifLines.size()]));}  }
class C{  public double distanceSquared(Location o){  if (o == null) {    throw new IllegalArgumentException("Cannot measure distance to a null location");  } else   if (o.getWorld() == null || getWorld() == null) {    throw new IllegalArgumentException("Cannot measure distance to a null world");  } else   if (o.getWorld() != getWorld()) {    throw new IllegalArgumentException("Cannot measure distance between " + getWorld().getName() + " and "+ o.getWorld().getName());  }  return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);}  }
class C{  MutableBigInteger(MutableBigInteger val){  intLen=val.intLen;  value=Arrays.copyOfRange(val.value,val.offset,val.offset + intLen);}  }
class C{  public LineSegment(Vector startPoint,Vector endPoint){  this.startPoint=startPoint;  this.endPoint=endPoint;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("staff",true);  addressList=doc.getElementsByTagName("address");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("street");  streetAttr.setValue("Y&ent1;");  value=streetAttr.getValue();  assertEquals("value","Y&ent1;",value);  value=streetAttr.getNodeValue();  assertEquals("nodeValue","Y&ent1;",value);}  }
class C{  public Subject removeSubject(String subjectName) throws ObjectInUseException, PolicyException, SSOException {  return removeSubject(subjectName,false);}  }
class C{  private void reconcile(ReconciliationContext reconContext) throws SynchronizationException {  try {    reconContext.getObjectMapping().recon(reconContext);  } catch (  SynchronizationException ex) {    if (reconContext.isCanceled()) {      reconContext.setStage(ReconStage.COMPLETED_CANCELED);    } else {      reconContext.setStage(ReconStage.COMPLETED_FAILED);      throw ex;    }  }catch (  RuntimeException ex) {    reconContext.setStage(ReconStage.COMPLETED_FAILED);    throw ex;  }}  }
class C{  public Ref readRef() throws SQLException {  return (Ref)getNextAttribute();}  }
class C{  public boolean isNative(){  return Modifier.isNative(flags);}  }
class C{  @Override public HijrahDate date(Era era,int yearOfEra,int month,int dayOfMonth){  return date(prolepticYear(era,yearOfEra),month,dayOfMonth);}  }
class C{  public static Condition contains(String propertyName,String propertyStringValue){  return new ContainsCondition(propertyName,propertyStringValue);}  }
class C{  public ConnectorException(final int errorCode,final Exception e){  this(errorCode);  this.exception=e;  addCurrentFolder=false;  this.errorMsg=e.getMessage();}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  backTrail();  ServerConfigXMLViewBean vb=(ServerConfigXMLViewBean)getViewBean(ServerConfigXMLViewBean.class);  removePageSessionAttribute(PG_ATTR_SERVER_GROUP_TYPE);  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  protected BasicPooledConnAdapter(ThreadSafeClientConnManager tsccm,AbstractPoolEntry entry){  super(tsccm,entry);  markReusable();}  }
class C{  @Override public void realWriteChars(char buf[],int off,int len) throws IOException {  outputCharChunk.setChars(buf,off,len);  while (outputCharChunk.getLength() > 0) {    conv.convert(outputCharChunk,bb);    if (bb.getLength() == 0) {      break;    }    if (outputCharChunk.getLength() > 0) {      if (bb.getBuffer().length == bb.getEnd() && bb.getLength() < bb.getLimit()) {        bb.makeSpace(outputCharChunk.getLength());      } else {        bb.flushBuffer();      }    }  }}  }
class C{  protected String paramString(){  String orientationString=(orientation == HORIZONTAL ? "HORIZONTAL" : "VERTICAL");  String paintBorderString=(paintBorder ? "true" : "false");  String progressStringString=(progressString != null ? progressString : "");  String paintStringString=(paintString ? "true" : "false");  String indeterminateString=(indeterminate ? "true" : "false");  return super.paramString() + ",orientation=" + orientationString+ ",paintBorder="+ paintBorderString+ ",paintString="+ paintStringString+ ",progressString="+ progressStringString+ ",indeterminateString="+ indeterminateString;}  }
class C{  public static void logAccess(Level lvl,String msgid,String[] data,Object tok,String ipaddr,String userid,String org,String module,Map props){  Map accProps=accumulateLogProps(ipaddr,userid,org,module,props);  LogUtil.access(lvl,msgid,data,tok,accProps);}  }
class C{  @Override public Foo findByUuid_First(String uuid,OrderByComparator<Foo> orderByComparator) throws NoSuchFooException {  Foo foo=fetchByUuid_First(uuid,orderByComparator);  if (foo != null) {    return foo;  }  StringBundler msg=new StringBundler(4);  msg.append(_NO_SUCH_ENTITY_WITH_KEY);  msg.append("uuid=");  msg.append(uuid);  msg.append(StringPool.CLOSE_CURLY_BRACE);  throw new NoSuchFooException(msg.toString());}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private String encryptPassword(String userpasswd) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException, IllegalBlockSizeException, BadPaddingException, SSOException {  String deskeystr=SystemProperties.get(REPLAY_PASSWORD_KEY);  if (StringUtils.isBlank(deskeystr)) {    if (debug.messageEnabled()) {      debug.message("ReplayPasswd.encodePassword: cannot encode password, Replay PaswordKey is empty");    }    return null;  }  byte[] desKey=Base64.decode(deskeystr);  SecretKeySpec keySpec=new SecretKeySpec(desKey,"DES");  Cipher cipher=Cipher.getInstance(CIPHER_INSTANCE_NAME);  cipher.init(Cipher.ENCRYPT_MODE,keySpec);  int length=userpasswd.length() + (8 - userpasswd.length() % 8);  byte[] data=new byte[length];  System.arraycopy(userpasswd.getBytes(),0,data,0,userpasswd.length());  byte[] ciphertext=cipher.doFinal(data);  return Base64.encode(ciphertext);}  }
class C{  protected MouseDragGestureRecognizer(DragSource ds){  this(ds,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badString;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badString=child.substringData(40,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throw_INDEX_SIZE_ERR",success);  }}  }
class C{  protected CompoundName(Enumeration<String> comps,Properties syntax){  if (syntax == null) {    throw new NullPointerException();  }  mySyntax=syntax;  impl=new NameImpl(syntax,comps);}  }
class C{  public static void enableVerboseConsoleLoggingForOpenDJ(){  enableConsoleLoggingForOpenDJ(Level.ALL,System.out,System.err);}  }
class C{  public void createSite(String name,String url) throws AMConsoleException {  String[] param={name};  logEvent("ATTEMPT_CREATE_SITE",param);  try {    SiteConfiguration.createSite(getUserSSOToken(),name,url,Collections.EMPTY_SET);    logEvent("SUCCEED_CREATE_SITE",param);  } catch (  ConfigurationException e) {    throw new AMConsoleException(getErrorString(e));  }catch (  SMSException e) {    String[] params={name,e.getMessage()};    logEvent("SMS_EXCEPTION_CREATE_SITE",params);    throw new AMConsoleException(getErrorString(e));  }catch (  SSOException e) {    String[] params={name,e.getMessage()};    logEvent("SSO_EXCEPTION_CREATE_SITE",params);    throw new AMConsoleException(getErrorString(e));  }}  }
class C{  private float[] calculateImageIndents(){  mTempMatrix.reset();  mTempMatrix.setRotate(-getCurrentAngle());  float[] unrotatedImageCorners=Arrays.copyOf(mCurrentImageCorners,mCurrentImageCorners.length);  float[] unrotatedCropBoundsCorners=RectUtils.getCornersFromRect(mCropRect);  mTempMatrix.mapPoints(unrotatedImageCorners);  mTempMatrix.mapPoints(unrotatedCropBoundsCorners);  RectF unrotatedImageRect=RectUtils.trapToRect(unrotatedImageCorners);  RectF unrotatedCropRect=RectUtils.trapToRect(unrotatedCropBoundsCorners);  float deltaLeft=unrotatedImageRect.left - unrotatedCropRect.left;  float deltaTop=unrotatedImageRect.top - unrotatedCropRect.top;  float deltaRight=unrotatedImageRect.right - unrotatedCropRect.right;  float deltaBottom=unrotatedImageRect.bottom - unrotatedCropRect.bottom;  float indents[]=new float[4];  indents[0]=(deltaLeft > 0) ? deltaLeft : 0;  indents[1]=(deltaTop > 0) ? deltaTop : 0;  indents[2]=(deltaRight < 0) ? deltaRight : 0;  indents[3]=(deltaBottom < 0) ? deltaBottom : 0;  mTempMatrix.reset();  mTempMatrix.setRotate(getCurrentAngle());  mTempMatrix.mapPoints(indents);  return indents;}  }
class C{  private static void checkInitialization() throws SAMLException {  if (assertionManager == null) {synchronized (lock) {      if (assertionManager == null) {        try {          assertionManager=AssertionManager.getInstance();        } catch (        SAMLException samle) {          SAMLUtils.debug.error("AssertionManagerImpl: Unable to get " + "AssertionManager",samle);          throw (samle);        }      }    }  }}  }
class C{  public PdfActionOcgState(PdfName state,List<PdfDictionary> ocgs){  this.state=state;  this.ocgs=ocgs;}  }
class C{  private int currentColorDuringTransition(int startColor,int endColor,float fraction){  final float[] from=new float[3], to=new float[3];  Color.colorToHSV(startColor,from);  Color.colorToHSV(endColor,to);  final float[] hsv=new float[3];  hsv[0]=from[0] + (to[0] - from[0]) * fraction;  hsv[1]=from[1] + (to[1] - from[1]) * fraction;  hsv[2]=from[2] + (to[2] - from[2]) * fraction;  return Color.HSVToColor(hsv);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatasubstringexceedsvalue.class,args);}  }
class C{  private ASN1Primitive toASN1Object(X509Certificate cert) throws CertificateEncodingException {  try {    return new ASN1InputStream(cert.getEncoded()).readObject();  } catch (  Exception e) {    throw new CertificateEncodingException("Exception while encoding certificate: " + e.toString());  }}  }
class C{  public static AddRequest newAddRequest(final String name){  return Requests.newAddRequest(name).addControl(TransactionIdControl.newControl(AuditRequestContext.createSubTransactionIdValue()));}  }
class C{  public void removeComment(){  comment=null;}  }
class C{  public IndexModifiedEvent(BackendDescriptor backend){  this.modifiedIndexes.addAll(backend.getIndexes());  this.modifiedIndexes.addAll(backend.getVLVIndexes());}  }
class C{  public Expression locationPathPattern(int opPos) throws TransformerException {  opPos=getFirstChildPos(opPos);  return stepPattern(opPos,0,null);}  }
class C{  public DecimalStyle withZeroDigit(char zeroDigit){  if (zeroDigit == this.zeroDigit) {    return this;  }  return new DecimalStyle(zeroDigit,positiveSign,negativeSign,decimalSeparator);}  }
class C{  public RPSigninRequest(HttpServletRequest request,HttpServletResponse response,String whr,String wct,String wctx,String wreply){  super(request,response);  this.whr=whr;  this.wct=wct;  this.wctx=wctx;  this.wreply=wreply;}  }
class C{  public SendSmsAction(HashMap<String,String> parameters) throws OmnidroidException {  super(SendSmsAction.SMS_INTENT,Action.BY_SERVICE);  phoneNumber=parameters.get(PARAM_PHONE_NO);  sms=parameters.get(PARAM_SMS);  if (phoneNumber == null || sms == null) {    throw new OmnidroidException(120002,ExceptionMessageMap.getMessage(new Integer(120002).toString()));  }}  }
class C{  public static void assertStructName(String structName) throws XMPException {  if (structName == null || structName.length() == 0) {    throw new XMPException("Empty array name",XMPError.BADPARAM);  }}  }
class C{  private int parseStatusLine(InputStream is){  int index;  int nread=0;  log("Parse status line");  nread=readOneLine(is);  if (nread == -1) {    requestMethod=UNKNOWN_METHOD;    return -1;  }  if (buf[0] == (byte)'G' && buf[1] == (byte)'E' && buf[2] == (byte)'T' && buf[3] == (byte)' ') {    requestMethod=GET_METHOD;    log("GET request");    index=4;  } else   if (buf[0] == (byte)'H' && buf[1] == (byte)'E' && buf[2] == (byte)'A' && buf[3] == (byte)'D' && buf[4] == (byte)' ') {    requestMethod=HEAD_METHOD;    log("HEAD request");    index=5;  } else   if (buf[0] == (byte)'P' && buf[1] == (byte)'O' && buf[2] == (byte)'S' && buf[3] == (byte)'T' && buf[4] == (byte)' ') {    requestMethod=POST_METHOD;    log("POST request");    index=5;  } else {    requestMethod=UNKNOWN_METHOD;    return -1;  }  if (requestMethod > UNKNOWN_METHOD) {    int i=index;    while (buf[i] != (byte)' ') {      if ((buf[i] == (byte)'\n') || (buf[i] == (byte)'\r')) {        requestMethod=UNKNOWN_METHOD;        return -1;      }      i++;    }    path=new String(buf,0,index,i - index);    testID=path.substring(1);    return nread;  }  return -1;}  }
class C{  public static void encode(ASN1Writer writer,int opType,String value) throws IOException {  writer.writeStartSequence();  writer.writeEnumerated(opType);  if (value != null) {    writer.writeStartSequence();    writer.writeOctetString(value);    writer.writeEndSequence();  }  writer.writeEndSequence();}  }
class C{  @Deprecated protected void notifyPathChange(Vector<?> changedPaths,TreePath oldLeadSelection){  int cPathCount=changedPaths.size();  boolean[] newness=new boolean[cPathCount];  TreePath[] paths=new TreePath[cPathCount];  PathPlaceHolder placeholder;  for (int counter=0; counter < cPathCount; counter++) {    placeholder=(PathPlaceHolder)changedPaths.elementAt(counter);    newness[counter]=placeholder.isNew;    paths[counter]=placeholder.path;  }  TreeSelectionEvent event=new TreeSelectionEvent(this,paths,newness,oldLeadSelection,leadPath);  fireValueChanged(event);}  }
class C{  public static void checkDBDirExistsOrCanCreate(File backendDir,ConfigChangeResult ccr,boolean cleanup){  if (!backendDir.exists()) {    if (!backendDir.mkdirs()) {      addErrorMessage(ccr,ERR_CREATE_FAIL.get(backendDir.getPath()));    }    if (cleanup) {      backendDir.delete();    }  } else   if (!backendDir.isDirectory()) {    addErrorMessage(ccr,ERR_DIRECTORY_INVALID.get(backendDir.getPath()));  }}  }
class C{  public static void updateAgentGroup(SSOToken ssoToken,String realm,String agentGroupName,Map attrValues) throws IdRepoException, SSOException, SMSException, ConfigurationException {  updateAgentGroup(ssoToken,realm,agentGroupName,attrValues,true);}  }
class C{  public ApplicationType(String name,Map<String,Boolean> actions,Class searchIndex,Class saveIndex,Class resourceComp) throws InstantiationException, IllegalAccessException {  this.name=name;  this.actions=actions;  setSearchIndex(searchIndex);  setSaveIndex(saveIndex);  Class resourceCompClass=(resourceComp == null) ? URLResourceName.class : resourceComp;  resourceCompInstance=(ResourceName)resourceCompClass.newInstance();}  }
class C{  @Override public Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  int count=countByField2(field2);  if (count == 0) {    return null;  }  List<Foo> list=findByField2(field2,count - 1,count,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public void componentResized(ComponentEvent e){  Rectangle parentNewBounds=((Component)e.getSource()).getBounds();  JInternalFrame.JDesktopIcon icon=null;  if (frame != null) {    icon=frame.getDesktopIcon();    if (frame.isMaximum()) {      frame.setBounds(0,0,parentNewBounds.width,parentNewBounds.height);    }  }  if (icon != null) {    Rectangle iconBounds=icon.getBounds();    int y=iconBounds.y + (parentNewBounds.height - parentBounds.height);    icon.setBounds(iconBounds.x,y,iconBounds.width,iconBounds.height);  }  if (!parentBounds.equals(parentNewBounds)) {    parentBounds=parentNewBounds;  }  if (frame != null)   frame.validate();}  }
class C{  private Set<String> updateEnvironmentRealmDn(Map<String,Set<String>> environment,String subRealm){  String orgDN=DNMapper.orgNameToDN(subRealm);  Map orgConfig=null;  Set<String> savedRealmDn=null;  try {    orgConfig=PolicyConfig.getPolicyConfig(orgDN);  } catch (  PolicyException ex) {    PolicyConstants.DEBUG.error("ReferralPrivilege.updateEnvironmentRealmDn: can not get policy config for sub-realm : " + subRealm + " org : "+ orgDN,ex);  }  if (orgConfig != null) {    savedRealmDn=environment.get(PolicyEvaluator.REALM_DN);    environment.put(PolicyEvaluator.REALM_DN,CollectionUtils.asSet(orgDN));  }  return savedRealmDn;}  }
class C{  public PersistentSearchControl(boolean isCritical,Set<PersistentSearchChangeType> changeTypes,boolean changesOnly,boolean returnECs){  super(OID_PERSISTENT_SEARCH,isCritical);  this.changeTypes=changeTypes;  this.changesOnly=changesOnly;  this.returnECs=returnECs;}  }
class C{  public BAD_INV_ORDER(){  this("");}  }
class C{  public GenericObjectPool(final PooledObjectFactory<T> factory,final GenericObjectPoolConfig config,final AbandonedConfig abandonedConfig){  this(factory,config);  setAbandonedConfig(abandonedConfig);}  }
class C{  ClientHandshakeImpl(Object owner){  super(owner);}  }
class C{  @Override public void write(ASN1Writer stream) throws IOException {  stream.writeStartSequence(OP_TYPE_BIND_REQUEST);  stream.writeInteger(protocolVersion);  stream.writeOctetString(dn);  if (authenticationType == AuthenticationType.SIMPLE) {    stream.writeOctetString(TYPE_AUTHENTICATION_SIMPLE,simplePassword);  } else {    stream.writeStartSequence(TYPE_AUTHENTICATION_SASL);    stream.writeOctetString(saslMechanism);    if (saslCredentials != null) {      stream.writeOctetString(saslCredentials);    }    stream.writeEndSequence();  }  stream.writeEndSequence();}  }
class C{  public void _read(InputStream input){  value=input.read_float();}  }
class C{  protected static boolean cleanSessionMapProviders(String userID,Vector sessionList,String metaAlias){  if (sessionList != null) {    for (int i=0; i < sessionList.size(); i++) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("cleaning provider " + (String)sessionList.elementAt(i) + " from session map");      }      cleanSessionMapPartnerList(userID,(String)sessionList.elementAt(i),metaAlias,null);    }  }  return true;}  }
class C{  public void paint(Graphics g,Shape a){  Rectangle r=(Rectangle)a;  g.clipRect(r.x,r.y,r.width,r.height);  super.paint(g,a);}  }
class C{  public static String decode(final String value){  try {    return URLDecoder.decode(value,CHARSET_ISO_8859_1);  } catch (  UnsupportedEncodingException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  public <X extends Throwable>double orElseThrow(Supplier<X> exceptionSupplier) throws X {  if (isPresent) {    return value;  } else {    throw exceptionSupplier.get();  }}  }
class C{  private static void dualPivotQuicksort(int[] a,int left,int right){  int sixth=(right - left + 1) / 6;  int e1=left + sixth;  int e5=right - sixth;  int e3=(left + right) >>> 1;  int e4=e3 + sixth;  int e2=e3 - sixth;  int ae1=a[e1], ae2=a[e2], ae3=a[e3], ae4=a[e4], ae5=a[e5];  if (ae1 > ae2) {    int t=ae1;    ae1=ae2;    ae2=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  if (ae1 > ae3) {    int t=ae1;    ae1=ae3;    ae3=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae1 > ae4) {    int t=ae1;    ae1=ae4;    ae4=t;  }  if (ae3 > ae4) {    int t=ae3;    ae3=ae4;    ae4=t;  }  if (ae2 > ae5) {    int t=ae2;    ae2=ae5;    ae5=t;  }  if (ae2 > ae3) {    int t=ae2;    ae2=ae3;    ae3=t;  }  if (ae4 > ae5) {    int t=ae4;    ae4=ae5;    ae5=t;  }  a[e1]=ae1;  a[e3]=ae3;  a[e5]=ae5;  int pivot1=ae2;  a[e2]=a[left];  int pivot2=ae4;  a[e4]=a[right];  int less=left + 1;  int great=right - 1;  boolean pivotsDiffer=(pivot1 != pivot2);  if (pivotsDiffer) {    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=a[great];          a[great--]=ak;        }      }    }  } else {    for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot1) {        continue;      }      if (ak < pivot1) {        if (k != less) {          a[k]=a[less];          a[less]=ak;        }        less++;      } else {        while (a[great] > pivot1) {          great--;        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less++]=a[great];          a[great--]=ak;        } else {          a[k]=pivot1;          a[great--]=ak;        }      }    }  }  a[left]=a[less - 1];  a[less - 1]=pivot1;  a[right]=a[great + 1];  a[great + 1]=pivot2;  doSort(a,left,less - 2);  doSort(a,great + 2,right);  if (!pivotsDiffer) {    return;  }  if (less < e1 && great > e5) {    while (a[less] == pivot1) {      less++;    }    while (a[great] == pivot2) {      great--;    }    outer:     for (int k=less; k <= great; k++) {      int ak=a[k];      if (ak == pivot2) {        while (a[great] == pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] == pivot1) {          a[k]=a[less];          a[less++]=pivot1;        } else {          a[k]=a[great];        }        a[great--]=pivot2;      } else       if (ak == pivot1) {        a[k]=a[less];        a[less++]=pivot1;      }    }  }  doSort(a,less,great);}  }
class C{  public OffscreenSurface(EglCore eglCore,int width,int height){  super(eglCore);  createOffscreenSurface(width,height);}  }
class C{  private void co_yield(boolean moreRemains) throws SAXException {  if (fNoMoreEvents)   return;  try {    Object arg=Boolean.FALSE;    if (moreRemains) {      arg=fCoroutineManager.co_resume(Boolean.TRUE,fSourceCoroutineID,fControllerCoroutineID);    }    if (arg == Boolean.FALSE) {      fNoMoreEvents=true;      if (fXMLReader != null)       throw new StopException();      fCoroutineManager.co_exit_to(Boolean.FALSE,fSourceCoroutineID,fControllerCoroutineID);    }  } catch (  NoSuchMethodException e) {    fNoMoreEvents=true;    fCoroutineManager.co_exit(fSourceCoroutineID);    throw new SAXException(e);  }}  }
class C{  public ChallengeException(AccessChallenge res){  challenge=res;}  }
class C{  public void stopWS(){  System.out.println("WebsocketThread.stopWS(): Sending UnSuscribe message to Streaming Quote WS server");  sendUnSubscribeMessage();  System.out.println("WebsocketThread.stopWS(): Terminate Force closing previous WS session");  clientEndPoint.forceClose(true);  clientEndPoint=null;  currWSstateLock.lock();  currWSstate=null;  currWSstateLock.unlock();  System.out.println("WebsocketThread.stopWS(): method called to stop Websocket data parser thread...");  quoteParserThread.stopThread();  runStatus=false;}  }
class C{  private Visitor(Collection<DN> dependencies){  this.dependencies=dependencies;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  try {    msgFactory=MessageFactory.newInstance();  } catch (  SOAPException ex) {    FSUtils.debug.error("FSSSOAndFedService.init: create message factory failed.",ex);    throw new ServletException(ex.getMessage());  }  metaManager=FSUtils.getIDFFMetaManager();}  }
class C{  private boolean isDigit(final char c){  return (c >= ZERO && c < NINE);}  }
class C{  public void handleConfigActionColumnHREFRequest(RequestInvocationEvent event) throws ModelControlException {  String name=hexToString((String)getDisplayFieldValue(CONFIG_ACTION_COLUMN_HREF));  AuthConfigViewBean vb=(AuthConfigViewBean)getViewBean(AuthConfigViewBean.class);  setPageSessionAttribute(AuthConfigurationModelImpl.CONFIG_NAME,name);  unlockPageTrail();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  public JarEntry(ZipEntry ze){  super(ze);}  }
class C{  private void putPropertyStrings(Service s){  String type=s.getType();  String algorithm=s.getAlgorithm();  super.put(type + "." + algorithm,s.getClassName());  for (  String alias : s.getAliases()) {    super.put(ALIAS_PREFIX + type + "."+ alias,algorithm);  }  for (  Map.Entry<UString,String> entry : s.attributes.entrySet()) {    String key=type + "." + algorithm+ " "+ entry.getKey();    super.put(key,entry.getValue());  }}  }
class C{  public void addDeleteOnTearDown(File file){  deleteOnTearDown.add(file);}  }
class C{  private static ModifyRequestProtocolOp readModifyRequest(ASN1Reader reader) throws LDAPException {  try {    reader.readStartSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ByteString dn;  try {    dn=reader.readOctetString();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_REQUEST_DECODE_DN.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  ArrayList<RawModification> modifications;  try {    reader.readStartSequence();    modifications=new ArrayList<>();    while (reader.hasNextElement()) {      modifications.add(LDAPModification.decode(reader));    }    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_REQUEST_DECODE_MODS.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  try {    reader.readEndSequence();  } catch (  Exception e) {    logger.traceException(e);    LocalizableMessage message=ERR_LDAP_MODIFY_REQUEST_DECODE_SEQUENCE.get(e);    throw new LDAPException(PROTOCOL_ERROR,message,e);  }  return new ModifyRequestProtocolOp(dn,modifications);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.assertion.AssertionIDReferenceElement createAssertionIDReferenceElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.assertion.impl.AssertionIDReferenceElementImpl();}  }
class C{  @Override public void onResume(){  super.onResume();  Log.d(TAG,"FMRadio onResume isGestureOpen = " + isGestureOpen());  if (isFmRadioGestureSupport() && isGestureOpen()) {    resumePsensor();  }  Log.d(TAG,"FmRadioActivity.onResume start");  mIsActivityForeground=true;  if (null == mService) {    Log.d(TAG,"service has not bind finished");    mIsNeedShowNoAntennaDlg=false;    return;  }  updateMenuStatus();  updateDialogStatus();  if (!isRecordFileExist()) {    mButtonPlayback.setEnabled(false);  }  checkNoAntennaDialogInOnResume();  Log.d(TAG,"FmRadioActivity.onResume end");}  }
class C{  public ValidationException(String rbName,String errorCode){  super(rbName,errorCode,(Object[])null);}  }
class C{  public ASN1ObjectIdentifier branch(String branchID){  return new ASN1ObjectIdentifier(this,branchID);}  }
class C{  public static String toString(URL url,String encoding) throws IOException {  return toString(url,Charsets.toCharset(encoding));}  }
class C{  public void resetLengthForReceive(){  this.length=userSuppliedLength;}  }
class C{  static ZoneOffset readOffset(DataInput in) throws IOException {  int offsetByte=in.readByte();  return (offsetByte == 127 ? ZoneOffset.ofTotalSeconds(in.readInt()) : ZoneOffset.ofTotalSeconds(offsetByte * 900));}  }
class C{  public static void generateECC(byte[] wd,int nd,int datablock,int nc){  int blocks=(nd + 2) / datablock;  int b;  byte[] buf=new byte[256];  byte[] ecc=new byte[256];  int[] c=getPoly(nc);  for (b=0; b < blocks; b++) {    int n, p=0;    for (n=b; n < nd; n+=blocks)     buf[p++]=wd[n];    reedSolomonBlock(buf,p,ecc,nc,c);    p=0;    for (n=b; n < nc * blocks; n+=blocks)     wd[nd + n]=ecc[p++];  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String internal;  String nullNS=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root",nullNS,nullNS);  internal=docType.getInternalSubset();  assertNull("internalSubsetNull",internal);}  }
class C{  public String geNumericAliasKey(){  return "N";}  }
class C{  public void printStackTrace(){  System.err.println(fetchStackTrace());}  }
class C{  public BMPImageWriteParam(Locale locale){  super(locale);  compressionTypes=BMPCompressionTypes.getCompressionTypes();  canWriteCompressed=true;  compressionMode=MODE_COPY_FROM_METADATA;  compressionType=compressionTypes[BMPConstants.BI_RGB];}  }
class C{  public static Foo[] findByUuid_C_PrevAndNext(long fooId,java.lang.String uuid,long companyId,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_C_PrevAndNext(fooId,uuid,companyId,orderByComparator);}  }
class C{  public RedirectUrlValidator(final ValidDomainExtractor<T> domainExtractor){  this.domainExtractor=domainExtractor;}  }
class C{  public boolean isQuiet(){  return this.quiet;}  }
class C{  SubMap<K,V> newSubMap(K fromKey,boolean fromInclusive,K toKey,boolean toInclusive){  Comparator<? super K> cmp=m.comparator;  if (isDescending) {    K tk=fromKey;    fromKey=toKey;    toKey=tk;    boolean ti=fromInclusive;    fromInclusive=toInclusive;    toInclusive=ti;  }  if (lo != null) {    if (fromKey == null) {      fromKey=lo;      fromInclusive=loInclusive;    } else {      int c=cpr(cmp,fromKey,lo);      if (c < 0 || (c == 0 && !loInclusive && fromInclusive))       throw new IllegalArgumentException("key out of range");    }  }  if (hi != null) {    if (toKey == null) {      toKey=hi;      toInclusive=hiInclusive;    } else {      int c=cpr(cmp,toKey,hi);      if (c > 0 || (c == 0 && !hiInclusive && toInclusive))       throw new IllegalArgumentException("key out of range");    }  }  return new SubMap<K,V>(m,fromKey,fromInclusive,toKey,toInclusive,isDescending);}  }
class C{  private void buildOneIns(MethodVisitor methodVisitor,CodeInfo info,Instruction ins,boolean requireValue){  CodeInfo.Container container;  if (info.insToLabel.containsKey(ins)) {    container=info.insToLabel.get(ins);  } else {    container=new CodeInfo.Container(new Label());    info.insToLabel.put(ins,container);  }  if (!container.isVisited) {    methodVisitor.visitLabel(container.label);    container.isVisited=true;  }  if (ins instanceof Value) {    buildValueAccess(methodVisitor,info,(Value)ins,requireValue);  } else   if (ins instanceof Ins.TReturn) {    buildReturn(methodVisitor,info,(Ins.TReturn)ins);  } else   if (ins instanceof Ins.TStore) {    buildTStore(methodVisitor,info,(Ins.TStore)ins);  } else   if (ins instanceof Ins.PutField) {    buildPutField(methodVisitor,info,(Ins.PutField)ins);  } else   if (ins instanceof Ins.PutStatic) {    buildPutStatic(methodVisitor,info,(Ins.PutStatic)ins);  } else   if (ins instanceof Ins.IfNe) {    buildValueAccess(methodVisitor,info,((Ins.IfNe)ins).condition(),true);    Label l;    if (info.insToLabel.containsKey(((Ins.IfNe)ins).gotoIns())) {      l=info.insToLabel.get(((Ins.IfNe)ins).gotoIns()).label;    } else {      l=new Label();      info.insToLabel.put(((Ins.IfNe)ins).gotoIns(),new CodeInfo.Container(l));    }    methodVisitor.visitJumpInsn(Opcodes.IFNE,l);    info.pop(1);  } else   if (ins instanceof Ins.IfEq) {    buildValueAccess(methodVisitor,info,((Ins.IfEq)ins).condition(),true);    Label l;    if (info.insToLabel.containsKey(((Ins.IfEq)ins).gotoIns())) {      l=info.insToLabel.get(((Ins.IfEq)ins).gotoIns()).label;    } else {      l=new Label();      info.insToLabel.put(((Ins.IfEq)ins).gotoIns(),new CodeInfo.Container(l));    }    methodVisitor.visitJumpInsn(Opcodes.IFEQ,l);    info.pop(1);  } else   if (ins instanceof Ins.IfNonNull) {    buildValueAccess(methodVisitor,info,((Ins.IfNonNull)ins).object(),true);    Label l;    if (info.insToLabel.containsKey(((Ins.IfNonNull)ins).gotoIns())) {      l=info.insToLabel.get(((Ins.IfNonNull)ins).gotoIns()).label;    } else {      l=new Label();      info.insToLabel.put(((Ins.IfNonNull)ins).gotoIns(),new CodeInfo.Container(l));    }    methodVisitor.visitJumpInsn(Opcodes.IFNONNULL,l);    info.pop(1);  } else   if (ins instanceof Ins.IfACmpNe) {    buildValueAccess(methodVisitor,info,((Ins.IfACmpNe)ins).value1(),true);    buildValueAccess(methodVisitor,info,((Ins.IfACmpNe)ins).value2(),true);    Label l;    if (info.insToLabel.containsKey(((Ins.IfACmpNe)ins).gotoIns())) {      l=info.insToLabel.get(((Ins.IfACmpNe)ins).gotoIns()).label;    } else {      l=new Label();      info.insToLabel.put(((Ins.IfACmpNe)ins).gotoIns(),new CodeInfo.Container(l));    }    methodVisitor.visitJumpInsn(Opcodes.IF_ACMPNE,l);    info.pop(2);  } else   if (ins instanceof Ins.Goto) {    Label l;    if (info.insToLabel.containsKey(((Ins.Goto)ins).gotoIns())) {      l=info.insToLabel.get(((Ins.Goto)ins).gotoIns()).label;    } else {      l=new Label();      info.insToLabel.put(((Ins.Goto)ins).gotoIns(),new CodeInfo.Container(l));    }    methodVisitor.visitJumpInsn(Opcodes.GOTO,l);  } else   if (ins instanceof Ins.Nop) {    methodVisitor.visitInsn(Opcodes.NOP);  } else   if (ins instanceof Ins.AThrow) {    buildValueAccess(methodVisitor,info,((Ins.AThrow)ins).exception(),true);    Label label=new Label();    methodVisitor.visitLabel(label);    methodVisitor.visitInsn(Opcodes.ATHROW);    info.pop(1);    VisitLineNumber(methodVisitor,ins.line_col(),label);  } else   if (ins instanceof Ins.ExStore) {    info.push(CodeInfo.Size._1);    methodVisitor.visitVarInsn(Opcodes.ASTORE,((Ins.ExStore)ins).index());    info.registerLocal(((Ins.ExStore)ins).index());    info.pop(1);  } else   if (ins instanceof Ins.Pop) {    methodVisitor.visitInsn(Opcodes.POP);    info.pop(1);  } else   if (ins instanceof Ins.TAStore) {    buildTAStore(methodVisitor,info,(Ins.TAStore)ins);  } else   if (ins instanceof Ins.MonitorEnter) {    buildMonitorEnter(methodVisitor,info,(Ins.MonitorEnter)ins);  } else   if (ins instanceof Ins.MonitorExit) {    buildMonitorExit(methodVisitor,info,(Ins.MonitorExit)ins);  } else {    throw new LtBug("unknown ins " + ins);  }}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.MobileNetworkNoEncryptionType createMobileNetworkNoEncryptionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.MobileNetworkNoEncryptionTypeImpl();}  }
class C{  public void modifyService(String serviceName,Map attributes) throws SMSException {  try {    getServiceConfig(serviceName).setAttributes(attributes);  } catch (  SSOException ssoe) {    SMSEntry.debug.error("OrganizationConfigManager.modifyService " + "SSOException in modify service ",ssoe);    throw (new SMSException(SMSEntry.bundle.getString(SMS_INVALID_SSO_TOKEN),SMS_INVALID_SSO_TOKEN));  }}  }
class C{  private void enableSSL(ConnectionSecurityProvider sslProvider){  tlsActiveProvider=sslProvider;  tlsChannel.redirect(sslProvider);}  }
class C{  private void assertOpen() throws SQLException {  if (isClosed) {    throw new SQLException(CLOSED);  }}  }
class C{  public NodeSetDTM(NodeIterator iterator,XPathContext xctxt){  super();  Node node;  m_manager=xctxt.getDTMManager();  while (null != (node=iterator.nextNode())) {    int handle=xctxt.getDTMHandleFromNode(node);    addNodeInDocOrder(handle,xctxt);  }}  }
class C{  public static void writeRemoteObject(OutputStream out,java.lang.Object obj){  if (utilDelegate != null) {    utilDelegate.writeRemoteObject(out,obj);  }}  }
class C{  public static void sort(char[] a){  DualPivotQuicksort.sort(a,0,a.length - 1,null,0,0);}  }
class C{  protected final int returnNode(final int node){  _position++;  return node;}  }
class C{  Entry entryFromDatabase(ByteString bytes,CompressedSchema compressedSchema) throws DirectoryException, DecodeException, LDAPException, DataFormatException, IOException {  EntryCodec codec=acquireEntryCodec();  try {    return codec.decode(bytes,compressedSchema);  }  finally {    codec.release();  }}  }
class C{  public java.io.Serializable read_value(org.omg.CORBA.portable.BoxedValueHelper factory){  throw new org.omg.CORBA.NO_IMPLEMENT();}  }
class C{  public PrintException(String s,Exception e){  super(s,e);}  }
class C{  public static ObjectifyFactory factory(){  return ObjectifyService.factory();}  }
class C{  private void purge(){synchronized (queue) {    WeakKey key;    while ((key=(WeakKey)queue.poll()) != null) {      super.remove(key.getReferenced());    }  }}  }
class C{  private boolean hasNextPostponed(){  return !postponedRoutes.isEmpty();}  }
class C{  public void clearPasswordChangedTime(){  operations.add(PasswordPolicyStateOperationType.CLEAR_PASSWORD_CHANGED_TIME);}  }
class C{  private void processBind(){  try {    if (!AccessControlConfigManager.getInstance().getAccessControlHandler().isAllowed(this)) {      setResultCode(ResultCode.INVALID_CREDENTIALS);      setAuthFailureReason(ERR_BIND_AUTHZ_INSUFFICIENT_ACCESS_RIGHTS.get());      return;    }  } catch (  DirectoryException e) {    setResultCode(e.getResultCode());    setAuthFailureReason(e.getMessageObject());    return;  }  try {    handleRequestControls();  } catch (  DirectoryException de) {    logger.traceException(de);    setResponseData(de);    return;  }  try {switch (getAuthenticationType()) {case SIMPLE:      processSimpleBind();    break;case SASL:  processSASLBind();break;default :setResultCode(ResultCode.PROTOCOL_ERROR);}} catch (DirectoryException de) {logger.traceException(de);if (de.getResultCode() == ResultCode.INVALID_CREDENTIALS) {setResultCode(ResultCode.INVALID_CREDENTIALS);setAuthFailureReason(de.getMessageObject());} else {setResponseData(de);}}}  }
class C{  static Map addElementToMap(String key,Set values,Map toMap){  if ((key != null) && (toMap != null)) {    toMap.put(key,values);  }  return toMap;}  }
class C{  public boolean reset(){  return m_handler.reset();}  }
class C{  private float calculateTab(Rectangle layoutBox,float curWidth,TabStop tabStop,IRenderer nextElementRenderer,LayoutResult nextElementResult,IRenderer tabRenderer){  float childWidth=0;  if (nextElementRenderer != null)   childWidth=nextElementRenderer.getOccupiedArea().getBBox().getWidth();  float tabWidth=0;switch (tabStop.getTabAlignment()) {case RIGHT:    tabWidth=tabStop.getTabPosition() - curWidth - childWidth;  break;case CENTER:tabWidth=tabStop.getTabPosition() - curWidth - childWidth / 2;break;case ANCHOR:float anchorPosition=-1;if (nextElementRenderer instanceof TextRenderer) anchorPosition=((TextRenderer)nextElementRenderer).getTabAnchorCharacterPosition();if (anchorPosition == -1) anchorPosition=childWidth;tabWidth=tabStop.getTabPosition() - curWidth - anchorPosition;break;}if (tabWidth < 0) tabWidth=0;if (curWidth + tabWidth + childWidth > layoutBox.getWidth()) tabWidth-=(curWidth + childWidth + tabWidth) - layoutBox.getWidth();tabRenderer.setProperty(Property.WIDTH,UnitValue.createPointValue(tabWidth));tabRenderer.setProperty(Property.HEIGHT,maxAscent - maxDescent);return tabWidth;}  }
class C{  public void testGenKeyPair01() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  KeyPairGenerator[] kpg=createKPGen();  assertNotNull("KeyPairGenerator objects were not created",kpg);  KeyPair kp, kp1;  SecureRandom rr=new SecureRandom();  for (int i=0; i < kpg.length; i++) {    kpg[i].initialize(512,rr);    kp=kpg[i].generateKeyPair();    kp1=kpg[i].genKeyPair();    assertFalse("Incorrect private key",kp.getPrivate().equals(kp1.getPrivate()));    assertFalse("Incorrect public key",kp.getPublic().equals(kp1.getPublic()));  }}  }
class C{  @KnownFailure("Fixed in DonutBurger, boundary checks missing") public void test_wrap_02() throws SSLException {  String host="new host";  int port=8080;  ByteBuffer bb=ByteBuffer.allocate(10);  ByteBuffer[] bbA={ByteBuffer.allocate(5),ByteBuffer.allocate(10),ByteBuffer.allocate(5)};  SSLEngine sse=getEngine(host,port);  sse.setUseClientMode(true);  try {    sse.wrap(bbA,-1,3,bb);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.wrap(bbA,0,-3,bb);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.wrap(bbA,bbA.length + 1,bbA.length,bb);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }  try {    sse.wrap(bbA,0,bbA.length + 1,bb);    fail("IndexOutOfBoundsException wasn't thrown");  } catch (  IndexOutOfBoundsException iobe) {  }}  }
class C{  public synchronized int write(InputStream in) throws IOException {  int readCount=0;  int inBufferPos=count - filledBufferSum;  int n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  while (n != -1) {    readCount+=n;    inBufferPos+=n;    count+=n;    if (inBufferPos == currentBuffer.length) {      needNewBuffer(currentBuffer.length);      inBufferPos=0;    }    n=in.read(currentBuffer,inBufferPos,currentBuffer.length - inBufferPos);  }  return readCount;}  }
class C{  public void processKeyEvent(Component focusedComponent,KeyEvent e){  if (consumeProcessedKeyEvent(e)) {    return;  }  if (e.getID() == KeyEvent.KEY_TYPED) {    return;  }  if (focusedComponent.getFocusTraversalKeysEnabled() && !e.isConsumed()) {    AWTKeyStroke stroke=AWTKeyStroke.getAWTKeyStrokeForEvent(e), oppStroke=AWTKeyStroke.getAWTKeyStroke(stroke.getKeyCode(),stroke.getModifiers(),!stroke.isOnKeyRelease());    Set<AWTKeyStroke> toTest;    boolean contains, containsOpp;    toTest=focusedComponent.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS);    contains=toTest.contains(stroke);    containsOpp=toTest.contains(oppStroke);    if (contains || containsOpp) {      consumeTraversalKey(e);      if (contains) {        focusNextComponent(focusedComponent);      }      return;    } else     if (e.getID() == KeyEvent.KEY_PRESSED) {      consumeNextKeyTyped=false;    }    toTest=focusedComponent.getFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS);    contains=toTest.contains(stroke);    containsOpp=toTest.contains(oppStroke);    if (contains || containsOpp) {      consumeTraversalKey(e);      if (contains) {        focusPreviousComponent(focusedComponent);      }      return;    }    toTest=focusedComponent.getFocusTraversalKeys(KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS);    contains=toTest.contains(stroke);    containsOpp=toTest.contains(oppStroke);    if (contains || containsOpp) {      consumeTraversalKey(e);      if (contains) {        upFocusCycle(focusedComponent);      }      return;    }    if (!((focusedComponent instanceof Container) && ((Container)focusedComponent).isFocusCycleRoot())) {      return;    }    toTest=focusedComponent.getFocusTraversalKeys(KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS);    contains=toTest.contains(stroke);    containsOpp=toTest.contains(oppStroke);    if (contains || containsOpp) {      consumeTraversalKey(e);      if (contains) {        downFocusCycle((Container)focusedComponent);      }    }  }}  }
class C{  public Text replaceWholeText(String content) throws DOMException {  return null;}  }
class C{  public static Response processAuthnQuery(AuthnQuery authnQuery,HttpServletRequest request,HttpServletResponse response,String authnAuthorityEntityID,String realm) throws SAML2Exception {  try {    verifyAuthnQuery(authnQuery,authnAuthorityEntityID,realm);  } catch (  SAML2Exception se) {    SAML2Utils.debug.error("AuthnQueryUtil.processAuthnQuery:",se);    return SAML2Utils.getErrorResponse(authnQuery,SAML2Constants.REQUESTER,null,se.getMessage(),null);  }  Issuer issuer=authnQuery.getIssuer();  String spEntityID=issuer.getValue();  AuthnAuthorityDescriptorElement aad=null;  SAML2MetaManager metaManager=SAML2Utils.getSAML2MetaManager();  try {    aad=metaManager.getAuthnAuthorityDescriptor(realm,authnAuthorityEntityID);  } catch (  SAML2MetaException sme) {    SAML2Utils.debug.error("AuthnQueryUtil.processAuthnQuery:",sme);    return SAML2Utils.getErrorResponse(authnQuery,SAML2Constants.RESPONDER,null,SAML2Utils.bundle.getString("metaDataError"),null);  }  if (aad == null) {    return SAML2Utils.getErrorResponse(authnQuery,SAML2Constants.REQUESTER,null,SAML2Utils.bundle.getString("authnAuthorityNotFound"),null);  }  NameID nameID=getNameID(authnQuery.getSubject(),realm,authnAuthorityEntityID);  if (nameID == null) {    return SAML2Utils.getErrorResponse(authnQuery,SAML2Constants.REQUESTER,SAML2Constants.UNKNOWN_PRINCIPAL,null,null);  }  IDPAccountMapper idpAcctMapper=SAML2Utils.getIDPAccountMapper(realm,authnAuthorityEntityID);  String userID=idpAcctMapper.getIdentity(nameID,authnAuthorityEntityID,spEntityID,realm);  if (userID == null) {    return SAML2Utils.getErrorResponse(authnQuery,SAML2Constants.REQUESTER,SAML2Constants.UNKNOWN_PRINCIPAL,null,null);  }  IDPAuthnContextMapper idpAuthnContextMapper=IDPSSOUtil.getIDPAuthnContextMapper(realm,authnAuthorityEntityID);  List returnAssertions=new ArrayList();  String qSessionIndex=authnQuery.getSessionIndex();  RequestedAuthnContext requestedAC=authnQuery.getRequestedAuthnContext();  List assertions=null;  String cacheKey=userID.toLowerCase();  AssertionFactory assertionFactory=AssertionFactory.getInstance();  if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message("AuthnQueryUtil.processAuthnQuery: " + "getting user assertions from DB. user = " + cacheKey);    }    List list=null;    try {      list=SAML2FailoverUtils.retrieveSAML2TokensWithSecondaryKey(cacheKey);    } catch (    SAML2TokenRepositoryException se) {      SAML2Utils.debug.error("AuthnQueryUtil.processAuthnQuery: " + "Unable to obtain user assertions from CTS Repository. user = " + cacheKey,se);    }    if (list != null && !list.isEmpty()) {      assertions=new ArrayList();      for (Iterator iter=list.iterator(); iter.hasNext(); ) {        String assertionStr=(String)iter.next();        assertions.add(assertionFactory.createAssertion(assertionStr));      }    }  } else {    assertions=(List)IDPCache.assertionCache.get(cacheKey);  }  if ((assertions != null) && (!assertions.isEmpty())) {synchronized (assertions) {      for (Iterator aIter=assertions.iterator(); aIter.hasNext(); ) {        Assertion assertion=(Assertion)aIter.next();        if (!assertion.isTimeValid()) {          if (SAML2Utils.debug.messageEnabled()) {            SAML2Utils.debug.message("AuthnQueryUtil.processAuthnQuery: " + " assertion " + assertion.getID() + " expired.");          }          continue;        }        List authnStmts=assertion.getAuthnStatements();        for (Iterator asIter=authnStmts.iterator(); asIter.hasNext(); ) {          AuthnStatement authnStmt=(AuthnStatement)asIter.next();          AuthnContext authnStmtAC=authnStmt.getAuthnContext();          String sessionIndex=authnStmt.getSessionIndex();          String authnStmtACClassRef=authnStmtAC.getAuthnContextClassRef();          if (SAML2Utils.debug.messageEnabled()) {            SAML2Utils.debug.message("AuthnQueryUtil.processAuthnQuery: " + "authnStmtACClassRef is " + authnStmtACClassRef + ", sessionIndex = "+ sessionIndex);          }          if ((qSessionIndex != null) && (qSessionIndex.length() != 0) && (!qSessionIndex.equals(sessionIndex))) {            continue;          }          if (requestedAC != null) {            List requestedACClassRefs=requestedAC.getAuthnContextClassRef();            String comparison=requestedAC.getComparison();            if (idpAuthnContextMapper.isAuthnContextMatching(requestedACClassRefs,authnStmtACClassRef,comparison,realm,authnAuthorityEntityID)) {              returnAssertions.add(assertion);              break;            }          } else {            returnAssertions.add(assertion);            break;          }        }      }    }  }  ProtocolFactory protocolFactory=ProtocolFactory.getInstance();  Response samlResp=protocolFactory.createResponse();  if (!returnAssertions.isEmpty()) {    samlResp.setAssertion(returnAssertions);  }  samlResp.setID(SAML2Utils.generateID());  samlResp.setInResponseTo(authnQuery.getID());  samlResp.setVersion(SAML2Constants.VERSION_2_0);  samlResp.setIssueInstant(newDate());  Status status=protocolFactory.createStatus();  StatusCode statusCode=protocolFactory.createStatusCode();  statusCode.setValue(SAML2Constants.SUCCESS);  status.setStatusCode(statusCode);  samlResp.setStatus(status);  Issuer respIssuer=assertionFactory.createIssuer();  respIssuer.setValue(authnAuthorityEntityID);  samlResp.setIssuer(respIssuer);  signResponse(samlResp,authnAuthorityEntityID,realm,false);  return samlResp;}  }
class C{  public boolean isPushButton(){  return getFieldFlag(FF_PUSH_BUTTON);}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(perms);  }}  }
class C{  private void reportInterruptAfterWait(int interruptMode) throws InterruptedException {  if (interruptMode == THROW_IE)   throw new InterruptedException(); else   if (interruptMode == REINTERRUPT)   selfInterrupt();}  }
class C{  public boolean isEmptyButtonShown(){  return mShowEmptyButton;}  }
class C{  public static MethodHandle arrayElementSetter(Class<?> arrayClass) throws IllegalArgumentException {  return MethodHandleImpl.makeArrayElementAccessor(arrayClass,true);}  }
class C{  public Triangle locate(Pnt point){  Triangle triangle=mostRecent;  if (!this.contains(triangle))   triangle=null;  Set<Triangle> visited=new HashSet<Triangle>();  while (triangle != null) {    if (visited.contains(triangle)) {      System.out.println("Warning: Caught in a locate loop");      break;    }    visited.add(triangle);    Pnt corner=point.isOutside(triangle.toArray(new Pnt[0]));    if (corner == null)     return triangle;    triangle=this.neighborOpposite(corner,triangle);  }  System.out.println("Warning: Checking all triangles for " + point);  for (  Triangle tri : this) {    if (point.isOutside(tri.toArray(new Pnt[0])) == null)     return tri;  }  System.out.println("Warning: No triangle holds " + point);  return null;}  }
class C{  @Override public void removeResource(String name){  entries.remove(name);  ContextResource resource=null;synchronized (resources) {    resource=resources.remove(name);  }  if (resource != null) {    support.firePropertyChange("resource",resource,null);    if (resourceRequireExplicitRegistration) {      try {        MBeanUtils.destroyMBean(resource);      } catch (      Exception e) {        log.warn(sm.getString("namingResources.mbeanDestroyFail",resource.getName()),e);      }    }    resource.setNamingResources(null);  }}  }
class C{  public Object clone(){  return super.clone();}  }
class C{  final Node<E> succ(Node<E> p){  Node<E> next=p.next;  return (p == next) ? head : next;}  }
class C{  public static boolean isAssemblyAllowed(int permissions){  return (EncryptionConstants.ALLOW_ASSEMBLY & permissions) == EncryptionConstants.ALLOW_ASSEMBLY;}  }
class C{  public static <T extends Enum<T>>T valueOf(Class<T> enumType,String name){  if (enumType == null) {    throw new NullPointerException("enumType == null");  } else   if (name == null) {    throw new NullPointerException("name == null");  }  T[] values=getSharedConstants(enumType);  if (values == null) {    throw new IllegalArgumentException(enumType + " is not an enum type");  }  for (  T value : values) {    if (name.equals(value.name())) {      return value;    }  }  throw new IllegalArgumentException(name + " is not a constant in " + enumType.getName());}  }
class C{  public JsonValue handleCallbacks(HttpServletRequest request,HttpServletResponse response,Callback[] callbacks) throws RestAuthException {  List<Object> jsonCallbacks=new ArrayList<>();  int callbackIndex=0;  boolean handledInternally=handleCallbacksInternally(request,response,callbacks);  if (!handledInternally) {    logger.message("Cannot handle callbacks internally. Converting to JSON instead.");    for (    Callback callback : callbacks) {      callbackIndex++;      RestAuthCallbackHandler restAuthCallbackHandler=restAuthCallbackHandlerFactory.getRestAuthCallbackHandler(callback.getClass());      JsonValue jsonCallback=restAuthCallbackHandler.convertToJson(callback,callbackIndex);      jsonCallbacks.add(jsonCallback.getObject());    }  }  return new JsonValue(jsonCallbacks);}  }
class C{  void checkAccess(byte refKind,Class<?> refc,MemberName m) throws IllegalAccessException {  assert (m.referenceKindIsConsistentWith(refKind) && MethodHandleNatives.refKindIsValid(refKind) && (MethodHandleNatives.refKindIsField(refKind) == m.isField()));  int allowedModes=this.allowedModes;  if (allowedModes == TRUSTED)   return;  int mods=m.getModifiers();  if (Modifier.isProtected(mods) && refKind == REF_invokeVirtual && m.getDeclaringClass() == Object.class && m.getName().equals("clone") && refc.isArray()) {    mods^=Modifier.PROTECTED | Modifier.PUBLIC;  }  if (Modifier.isProtected(mods) && refKind == REF_newInvokeSpecial) {    mods^=Modifier.PROTECTED;  }  if (Modifier.isFinal(mods) && MethodHandleNatives.refKindIsSetter(refKind))   throw m.makeAccessException("unexpected set of a final field",this);  if (Modifier.isPublic(mods) && Modifier.isPublic(refc.getModifiers()) && allowedModes != 0)   return;  int requestedModes=fixmods(mods);  if ((requestedModes & allowedModes) != 0) {    if (VerifyAccess.isMemberAccessible(refc,m.getDeclaringClass(),mods,lookupClass(),allowedModes))     return;  } else {    if ((requestedModes & PROTECTED) != 0 && (allowedModes & PACKAGE) != 0 && VerifyAccess.isSamePackage(m.getDeclaringClass(),lookupClass()))     return;  }  throw m.makeAccessException(accessFailedMessage(refc,m),this);}  }
class C{  private static int checkClassTypeSignature(final String signature,int pos){  pos=checkChar('L',signature,pos);  pos=checkIdentifier(signature,pos);  while (getChar(signature,pos) == '/') {    pos=checkIdentifier(signature,pos + 1);  }  if (getChar(signature,pos) == '<') {    pos=checkTypeArguments(signature,pos);  }  while (getChar(signature,pos) == '.') {    pos=checkIdentifier(signature,pos + 1);    if (getChar(signature,pos) == '<') {      pos=checkTypeArguments(signature,pos);    }  }  return checkChar(';',signature,pos);}  }
class C{  public int size(){  if (relations == null) {    return 0;  } else {    return relations.size();  }}  }
class C{  public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  boolean satified=false;  Set publicCreds=subject.getPublicCredentials();  if ((publicCreds != null) && !publicCreds.isEmpty()) {    Map<String,Set<String>> attributes=(Map<String,Set<String>>)publicCreds.iterator().next();    Set<String> values=attributes.get(SubjectAttributesCollector.NAMESPACE_ATTR + getID());    satified=(values != null) ? values.contains(getValue()) : false;  }  satified=satified ^ isExclusive();  return new SubjectDecision(satified,Collections.EMPTY_MAP);}  }
class C{  private static LocalizableMessage createMessage(final PropertyDefinition<?> pd,final Object value){  final PropertyDefinitionUsageBuilder builder=new PropertyDefinitionUsageBuilder(true);  return ERR_ILLEGAL_PROPERTY_VALUE_EXCEPTION.get(value,pd.getName(),builder.getUsage(pd));}  }
class C{  public static PermissionDeniedDialog newInstance(boolean finishActivity){  Bundle arguments=new Bundle();  arguments.putBoolean(ARGUMENT_FINISH_ACTIVITY,finishActivity);  PermissionDeniedDialog dialog=new PermissionDeniedDialog();  dialog.setArguments(arguments);  return dialog;}  }
class C{  public void sessionInvalidated(Object session){  FSLogoutUtil.removeTokenFromSession(session,metaAlias);}  }
class C{  @NonNull public final Agera subscribeOnMain(){  return subscribeOn(Looper.getMainLooper());}  }
class C{  public static void doWebArtifact(HttpServletRequest request,HttpServletResponse response,String target) throws IOException, SAMLException {  doSSO(request,response,target,SAMLConstants.SAML_AWARE_NAMING);}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.LanguageElement createLanguageElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.LanguageElementImpl();}  }
class C{  void updateInputAttributes(int dot,int mark,JTextComponent c){  Document aDoc=c.getDocument();  if (!(aDoc instanceof StyledDocument)) {    return;  }  int start=Math.min(dot,mark);  StyledDocument doc=(StyledDocument)aDoc;  Element run;  currentParagraph=doc.getParagraphElement(start);  if (currentParagraph.getStartOffset() == start || dot != mark) {    run=doc.getCharacterElement(start);  } else {    run=doc.getCharacterElement(Math.max(start - 1,0));  }  if (run != currentRun) {    currentRun=run;    createInputAttributes(currentRun,getInputAttributes());  }}  }
class C{  public boolean hasStickyHeader(View itemView,int orientation,int position){  int offset, margin;  mDimensionCalculator.initMargins(mTempRect1,itemView);  if (orientation == LinearLayout.VERTICAL) {    offset=itemView.getTop();    margin=mTempRect1.top;  } else {    offset=itemView.getLeft();    margin=mTempRect1.left;  }  return offset <= margin && mAdapter.getHeaderId(position) >= 0;}  }
class C{  public synchronized void removeVetoableChangeListener(VetoableChangeListener listener){  if (vetoableChangeSupport == null) {    return;  }  vetoableChangeSupport.removeVetoableChangeListener(listener);}  }
class C{  @NonNull public static Interpolator decelerate(int factor){  return new DecelerateInterpolator(factor);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.insertData(0,"Mss. ");  childData=child.getData();  assertEquals("characterdataInsertDataBeginningAssert","Mss. Margaret Martin",childData);}  }
class C{  public ProtobufSchema forFirstType(){  MessageElement msg=_firstMessageType();  if (msg == null) {    throw new IllegalArgumentException("Protobuf schema definition (name '" + _name + "') contains no message type definitions");  }  return new ProtobufSchema(this,TypeResolver.construct(_nativeTypes).resolve(msg));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateattributeNS01.class,args);}  }
class C{  private void failIfDeleted(){  if (isDeleted()) {    throw new IllegalStateException("Operation failed: element is deleted");  }}  }
class C{  public void insertTextAtIndex(int index,String s){  AccessibleEditableText at=getEditorAccessibleEditableText();  if (at != null) {    at.insertTextAtIndex(index,s);  }}  }
class C{  public TIMEOUT(int minorCode,CompletionStatus completionStatus){  this("",minorCode,completionStatus);}  }
class C{  public boolean isId(){  return false;}  }
class C{  public IConfiguration prepareConfiguration(final HttpServletRequest request,final IConfiguration baseConf) throws Exception {  if (baseConf != null) {    IConfiguration conf=baseConf.cloneConfiguration();    conf.prepareConfigurationForRequest(request);    updateResourceTypesPaths(request,conf);    return conf;  }  return null;}  }
class C{  public static int toRealPosition(int position,int count){  position=position - 1;  if (position < 0) {    position+=count;  } else {    position=position % count;  }  return position;}  }
class C{  public MetaState(){  savedStates=new Stack<>();  MetaObjects=new ArrayList<>();  currentPoint=new Point(0,0);  currentPen=new MetaPen();  currentBrush=new MetaBrush();  currentFont=new MetaFont();}  }
class C{  public void logSuccess(String msgId,String logId){  try {    String logSuccess=LazyConfig.AUTHD.bundle.getString(msgId);    List<String> dataList=new ArrayList<String>();    dataList.add(logSuccess);    dataList.add("isNoSession=" + isNoSession());    String[] data=dataList.toArray(new String[dataList.size()]);    Hashtable<String,String> props=new Hashtable<String,String>();    if (client != null) {      props.put(LogConstants.IP_ADDR,client);    }    if (userDN != null) {      props.put(LogConstants.LOGIN_ID,userDN);    }    if (orgDN != null) {      props.put(LogConstants.DOMAIN,orgDN);    }    if (authMethName != null) {      props.put(LogConstants.MODULE_NAME,authMethName);    }    InternalSession session=getReferencedSession();    if (session != null) {      props.put(LogConstants.LOGIN_ID_SID,finalSessionId.toString());    }    LazyConfig.AUTHD.logIt(data,AuthD.LOG_ACCESS,logId,props);  } catch (  Exception e) {    DEBUG.message("Error creating logSuccess message",e);  }}  }
class C{  public LockableFileWriter(File file,Charset encoding,boolean append,String lockDir) throws IOException {  super();  file=file.getAbsoluteFile();  if (file.getParentFile() != null) {    FileUtils.forceMkdir(file.getParentFile());  }  if (file.isDirectory()) {    throw new IOException("File specified is a directory");  }  if (lockDir == null) {    lockDir=System.getProperty("java.io.tmpdir");  }  File lockDirFile=new File(lockDir);  FileUtils.forceMkdir(lockDirFile);  testLockDir(lockDirFile);  lockFile=new File(lockDirFile,file.getName() + LCK);  createLock();  out=initWriter(file,encoding,append);}  }
class C{  public static ThreatResult withData(String type,String desc,List<String> detections){  String detectionStr="";  for (  String detection : detections) {    detectionStr+=detection + "<br>";  }  return new ThreatResult(type,desc,"<br>Detections:<br><br>" + detectionStr);}  }
class C{  @Override public Context createSubcontext(String name) throws NamingException {  return createSubcontext(new CompositeName(name));}  }
class C{  @Query(operationDescription=@Operation,type=QueryType.FILTER,queryableFields="*") public Promise<QueryResponse,ResourceException> handleQuery(Context context,QueryRequest request,QueryResourceHandler handler) throws InternalServerErrorException {  try {    Collection<JsonValue> resultItems=search(context);    List<ResourceResponse> filteredResponses=filterAndPrepareResponse(resultItems,request);    QueryResponsePresentation.perform(handler,request,filteredResponses);  } catch (  SMSException|SSOException e) {    debug.error("SmsAggregatingAgentsQueryHandler:: Unable to query agent config: ",e);    return new InternalServerErrorException("Unable to query agent config.",e).asPromise();  }  return newResultPromise(newQueryResponse());}  }
class C{  public SuballocatedIntVector(int blocksize,int numblocks){  for (m_SHIFT=0; 0 != (blocksize>>>=1); ++m_SHIFT)   ;  m_blocksize=1 << m_SHIFT;  m_MASK=m_blocksize - 1;  m_numblocks=numblocks;  m_map0=new int[m_blocksize];  m_map=new int[numblocks][];  m_map[0]=m_map0;  m_buildCache=m_map0;  m_buildCacheStartIndex=0;}  }
class C{  @Override public void write(int idx){}  }
class C{  private static boolean isURIString(String p_uric){  if (p_uric == null) {    return false;  }  int end=p_uric.length();  char testChar='\0';  for (int i=0; i < end; i++) {    testChar=p_uric.charAt(i);    if (testChar == '%') {      if (i + 2 >= end || !isHex(p_uric.charAt(i + 1)) || !isHex(p_uric.charAt(i + 2))) {        return false;      } else {        i+=2;        continue;      }    }    if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar)) {      continue;    } else {      return false;    }  }  return true;}  }
class C{  public Encoder withoutPadding(){  if (!doPadding)   return this;  return new Encoder(isURL,newline,linemax,false);}  }
class C{  public boolean shutdownRequested(){  queueReadLock.lock();  try {    return shutdownRequested;  }  finally {    queueReadLock.unlock();  }}  }
class C{  public void unparsedEntityDecl(String name,String publicId,String systemId,String notationName){  getCurrentProcessor().unparsedEntityDecl(this,name,publicId,systemId,notationName);}  }
class C{  @Override public boolean isValidToken(SSOToken token,boolean refresh){  SSOTokenImpl tokenImpl=(SSOTokenImpl)token;  return (tokenImpl.isValid(refresh));}  }
class C{  @Override public void store(PrintWriter aWriter,int indent,Object aContext) throws Exception {  if (aContext instanceof StandardContext) {    StoreDescription desc=getRegistry().findDescription(aContext.getClass());    if (desc.isStoreSeparate()) {      URL configFile=((StandardContext)aContext).getConfigFile();      if (configFile != null) {        if (desc.isExternalAllowed()) {          if (desc.isBackup())           storeWithBackup((StandardContext)aContext); else           storeContextSeparate(aWriter,indent,(StandardContext)aContext);          return;        }      } else       if (desc.isExternalOnly()) {        Context context=((StandardContext)aContext);        Host host=(Host)context.getParent();        File configBase=host.getConfigBaseFile();        ContextName cn=new ContextName(context.getName(),false);        String baseName=cn.getBaseName();        File xml=new File(configBase,baseName + ".xml");        context.setConfigFile(xml.toURI().toURL());        if (desc.isBackup())         storeWithBackup((StandardContext)aContext); else         storeContextSeparate(aWriter,indent,(StandardContext)aContext);        return;      }    }  }  super.store(aWriter,indent,aContext);}  }
class C{  @SuppressWarnings("unused") public void handleButton2Request(RequestInvocationEvent event){  backToProfileViewBean();}  }
class C{  ICC_ProfileGray(ProfileDeferralInfo pdi){  super(pdi);}  }
class C{  public boolean isRoot(){  return getParent() == null;}  }
class C{  public final void testHashCode02(){  ECPoint p1=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.ONE);  ECPoint p2=new ECPoint(BigInteger.valueOf(-23456L),BigInteger.valueOf(1L));  assertEquals(p1.hashCode(),p2.hashCode());}  }
class C{  public static String toLowerCase(String string){  boolean changed=false;  char[] chars=string.toCharArray();  for (int i=0; i != chars.length; i++) {    char ch=chars[i];    if ('A' <= ch && 'Z' >= ch) {      changed=true;      chars[i]=(char)(ch - 'A' + 'a');    }  }  if (changed) {    return new String(chars);  }  return string;}  }
class C{  public SelectorContext(Hashtable<String,Object> env,boolean initialContext){  this.env=env;  this.initialContext=initialContext;}  }
class C{  private void endProcessing(Collection<PartialToken> results){  if (results == null) {    close();  }}  }
class C{  public boolean apply(ObjectName name) throws BadStringOperationException, BadBinaryOpValueExpException, BadAttributeValueExpException, InvalidApplicationException {  Object val1=exp1.apply(name);  Object val2=exp2.apply(name);  boolean numeric=val1 instanceof NumericValueExp;  boolean bool=val1 instanceof BooleanValueExp;  if (numeric) {    if (((NumericValueExp)val1).isLong()) {      long lval1=((NumericValueExp)val1).longValue();      long lval2=((NumericValueExp)val2).longValue();switch (relOp) {case Query.GT:        return lval1 > lval2;case Query.LT:      return lval1 < lval2;case Query.GE:    return lval1 >= lval2;case Query.LE:  return lval1 <= lval2;case Query.EQ:return lval1 == lval2;}} else {double dval1=((NumericValueExp)val1).doubleValue();double dval2=((NumericValueExp)val2).doubleValue();switch (relOp) {case Query.GT:return dval1 > dval2;case Query.LT:return dval1 < dval2;case Query.GE:return dval1 >= dval2;case Query.LE:return dval1 <= dval2;case Query.EQ:return dval1 == dval2;}}} else if (bool) {boolean bval1=((BooleanValueExp)val1).getValue().booleanValue();boolean bval2=((BooleanValueExp)val2).getValue().booleanValue();switch (relOp) {case Query.GT:return bval1 && !bval2;case Query.LT:return !bval1 && bval2;case Query.GE:return bval1 || !bval2;case Query.LE:return !bval1 || bval2;case Query.EQ:return bval1 == bval2;}} else {String sval1=((StringValueExp)val1).getValue();String sval2=((StringValueExp)val2).getValue();switch (relOp) {case Query.GT:return sval1.compareTo(sval2) > 0;case Query.LT:return sval1.compareTo(sval2) < 0;case Query.GE:return sval1.compareTo(sval2) >= 0;case Query.LE:return sval1.compareTo(sval2) <= 0;case Query.EQ:return sval1.compareTo(sval2) == 0;}}return false;}  }
class C{  public boolean combine(EntitlementListener l){  if (!l.url.equals(url)) {    return false;  }  for (  String appName : l.mapAppToRes.keySet()) {    Set<String> res=mapAppToRes.get(appName);    if (res == null) {      res=new HashSet<String>();      mapAppToRes.put(appName,res);    }    res.addAll(l.mapAppToRes.get(appName));  }  return true;}  }
class C{  private OptionalInt(){  this.isPresent=false;  this.value=0;}  }
class C{  protected void installKeyboardActions(){  InputMap keyMap=(InputMap)DefaultLookup.get(header,this,"TableHeader.ancestorInputMap");  SwingUtilities.replaceUIInputMap(header,JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT,keyMap);  LazyActionMap.installLazyActionMap(header,BasicTableHeaderUI.class,"TableHeader.actionMap");}  }
class C{  public static TitledBorder createTitledBorder(String title){  return new TitledBorder(title);}  }
class C{  private BitLevel(){}  }
class C{  private static boolean notNullOrEmpty(final String s){  return s != null && !s.isEmpty();}  }
class C{  public static MultiPolygon fromJson(String json){  GsonBuilder gson=new GsonBuilder();  gson.registerTypeAdapter(Position.class,new PositionDeserializer());  return gson.create().fromJson(json,MultiPolygon.class);}  }
class C{  private static Method internalFindMethod(Class<?> start,String methodName,int argCount,Class args[]){  Method method=null;  for (Class<?> cl=start; cl != null; cl=cl.getSuperclass()) {    Method methods[]=getPublicDeclaredMethods(cl);    for (int i=0; i < methods.length; i++) {      method=methods[i];      if (method == null) {        continue;      }      if (method.getName().equals(methodName)) {        Type[] params=method.getGenericParameterTypes();        if (params.length == argCount) {          if (args != null) {            boolean different=false;            if (argCount > 0) {              for (int j=0; j < argCount; j++) {                if (TypeResolver.erase(TypeResolver.resolveInClass(start,params[j])) != args[j]) {                  different=true;                  continue;                }              }              if (different) {                continue;              }            }          }          return method;        }      }    }  }  method=null;  Class ifcs[]=start.getInterfaces();  for (int i=0; i < ifcs.length; i++) {    method=internalFindMethod(ifcs[i],methodName,argCount,null);    if (method != null) {      break;    }  }  return method;}  }
class C{  public AuthXMLRequestParser(String xmlString,HttpServletRequest req){  servletReq=req;  try {    xmlDocument=XMLUtils.getXMLDocument(new ByteArrayInputStream(xmlString.toString().getBytes("UTF-8")));    if (debug.messageEnabled()) {      debug.message("AuthXMLRequestParser: in the constructor");    }  } catch (  Exception e) {    debug.message("AuthXMLRequest Parser error : ",e);  }}  }
class C{  public void handleToken(Segment seg,byte id,int offset,int length,TokenMarker.LineContext context){}  }
class C{  public void removeEditor(){  if (editor != null) {    unconfigureEditor();    comboBox.remove(editor);    editor=null;  }}  }
class C{  public void allowDetachToRelease(boolean allowRelease){  if ((false == allowRelease) && !hasCache()) {    setShouldCacheNodes(true);  }  if (null != m_iter)   m_iter.allowDetachToRelease(allowRelease);  super.allowDetachToRelease(allowRelease);}  }
class C{  public void close() throws java.io.IOException {  m_os.close();}  }
class C{  private void assertInitializationAllowed() throws IllegalStateException {  if (getConnectionCalled) {    throw new IllegalStateException(GET_CONNECTION_CALLED);  }}  }
class C{  public org.omg.CORBA.Object resolve(org.omg.CosNaming.NameComponent[] n) throws org.omg.CosNaming.NamingContextPackage.NotFound, org.omg.CosNaming.NamingContextPackage.CannotProceed, org.omg.CosNaming.NamingContextPackage.InvalidName {  org.omg.CORBA.portable.InputStream $in=null;  try {    org.omg.CORBA.portable.OutputStream $out=_request("resolve",true);    org.omg.CosNaming.NameHelper.write($out,n);    $in=_invoke($out);    org.omg.CORBA.Object $result=org.omg.CORBA.ObjectHelper.read($in);    return $result;  } catch (  org.omg.CORBA.portable.ApplicationException $ex) {    $in=$ex.getInputStream();    String _id=$ex.getId();    if (_id.equals("IDL:omg.org/CosNaming/NamingContext/NotFound:1.0"))     throw org.omg.CosNaming.NamingContextPackage.NotFoundHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/CannotProceed:1.0"))     throw org.omg.CosNaming.NamingContextPackage.CannotProceedHelper.read($in); else     if (_id.equals("IDL:omg.org/CosNaming/NamingContext/InvalidName:1.0"))     throw org.omg.CosNaming.NamingContextPackage.InvalidNameHelper.read($in); else     throw new org.omg.CORBA.MARSHAL(_id);  }catch (  org.omg.CORBA.portable.RemarshalException $rm) {    return resolve(n);  } finally {    _releaseReply($in);  }}  }
class C{  public synchronized Object remove(Object key){  Entry tab[]=table;  int hash=key.hashCode();  int index=(hash & 0x7FFFFFFF) % tab.length;  for (Entry e=tab[index], prev=null; e != null; prev=e, e=e.next) {    if ((e.hash == hash) && e.key.equals(key)) {      modCount++;      if (prev != null) {        prev.next=e.next;      } else {        tab[index]=e.next;      }      count--;      Object oldValue=e.value;      e.value=null;      lruTracker.remove(e);      return oldValue;    }  }  return null;}  }
class C{  public boolean isLockedOut(){  return accountLocked;}  }
class C{  public void parseForField(GenericDeclaration genericDecl,SignatureTag signature){  setInput(genericDecl,signature);  if (!eof) {    this.fieldType=parseFieldTypeSignature();  }}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public JColorChooser(Color initialColor){  this(new DefaultColorSelectionModel(initialColor));}  }
class C{  public boolean isEnabled(){  return (statsState > Stats.OFF);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.secext.KeyIdentifierType createKeyIdentifierType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.secext.impl.KeyIdentifierTypeImpl();}  }
class C{  public final byte[] genExemptionBlob() throws IllegalStateException, ExemptionMechanismException {  if (!isInit) {    throw new IllegalStateException("ExemptionMechanism is not initialized");  }  generated=false;  byte[] result=spiImpl.engineGenExemptionBlob();  generated=true;  return result;}  }
class C{  public HiddenValueCallback(String id){  Reject.ifNull(id,"A HiddenValueCallback must be given an id.");  this.id=id;}  }
class C{  public String toString(){  return Integer.toString(unique,16) + ":" + Long.toString(time,16)+ ":"+ Integer.toString(count,16);}  }
class C{  public void addLayoutComponent(String name,Component comp){  invalidateLayout(comp.getParent());}  }
class C{  public void visitSource(String source,String debug){  if (cv != null) {    cv.visitSource(source,debug);  }}  }
class C{  public void destroyModuleState(){  validatedUserID=null;  userPrincipal=null;}  }
class C{  public static String encodeString(String s){  return new String(encode(s.getBytes()));}  }
class C{  public static String formatDate(Date dat){  return dateFmt.format(dat);}  }
class C{  public static EditStatus newInstance(String token){  EditStatus fragment=new EditStatus();  Bundle args=new Bundle();  args.putString(ARG_TOKEN,token);  fragment.setArguments(args);  return fragment;}  }
class C{  public void testNextCleanRetainedWhitespace() throws JSONException {  assertNotClean("null",'\u0000');  assertNotClean("next line",'\u0085');  assertNotClean("non-breaking space",'\u00a0');  assertNotClean("ogham space mark",'\u1680');  assertNotClean("mongolian vowel separator",'\u180e');  assertNotClean("en quad",'\u2000');  assertNotClean("em quad",'\u2001');  assertNotClean("en space",'\u2002');  assertNotClean("em space",'\u2003');  assertNotClean("three-per-em space",'\u2004');  assertNotClean("four-per-em space",'\u2005');  assertNotClean("six-per-em space",'\u2006');  assertNotClean("figure space",'\u2007');  assertNotClean("punctuation space",'\u2008');  assertNotClean("thin space",'\u2009');  assertNotClean("hair space",'\u200a');  assertNotClean("zero-width space",'\u200b');  assertNotClean("left-to-right mark",'\u200e');  assertNotClean("right-to-left mark",'\u200f');  assertNotClean("line separator",'\u2028');  assertNotClean("paragraph separator",'\u2029');  assertNotClean("narrow non-breaking space",'\u202f');  assertNotClean("medium mathematical space",'\u205f');  assertNotClean("ideographic space",'\u3000');  assertNotClean("line tabulation",'\u000b');  assertNotClean("form feed",'\u000c');  assertNotClean("information separator 4",'\u001c');  assertNotClean("information separator 3",'\u001d');  assertNotClean("information separator 2",'\u001e');  assertNotClean("information separator 1",'\u001f');}  }
class C{  ObjectStreamField(Field field,boolean unshared,boolean showType){  this.field=field;  this.unshared=unshared;  name=field.getName();  Class<?> ftype=field.getType();  type=(showType || ftype.isPrimitive()) ? ftype : Object.class;  signature=getClassSignature(ftype).intern();}  }
class C{  public static int[] normalizeRect(SettingsDecoder decoder,String key,int deviceDensity,int settingDensity){  int[] rect=decoder.getRect(key);  for (int i=0; i < 4; i++) {    rect[i]=rect[i] * deviceDensity / settingDensity;  }  try {    decoder.settings.put(key,BackgroundSection.getStr(rect));  } catch (  Exception e) {  }  return rect;}  }
class C{  private Set<PinSwappable> calculate_swap_pin_infos(){  TreeSet<PinSwappable> result=new TreeSet<PinSwappable>();  if (target_set == null)   return result;  for (  BrdItem curr_item : target_set) {    if (!(curr_item instanceof BrdAbitPin))     continue;    BrdAbitPin a_pin=(BrdAbitPin)curr_item;    Collection<BrdAbitPin> curr_swapppable_pins=a_pin.get_swappable_pins();    for (    BrdAbitPin curr_swappable_pin : curr_swapppable_pins) {      result.add(new PinSwappable(r_board,curr_swappable_pin));    }  }  ItemSelectionFilter selection_filter=new ItemSelectionFilter(ItemSelectionChoice.PINS);  Collection<BrdItem> picked_items=r_board.pick_items(prev_corner,layer_active_no,selection_filter);  for (  BrdItem curr_item : picked_items) {    if (!(curr_item instanceof BrdAbitPin))     continue;    BrdAbitPin a_pin=(BrdAbitPin)curr_item;    Collection<BrdAbitPin> curr_swapppable_pins=a_pin.get_swappable_pins();    for (    BrdAbitPin curr_swappable_pin : curr_swapppable_pins) {      result.add(new PinSwappable(r_board,curr_swappable_pin));    }  }  return result;}  }
class C{  public RandomPasswordGenerator(){  if (values == null || values.isEmpty()) {    initialize();  }}  }
class C{  public void test_read_writeBoolean() throws IOException {  RandomAccessFile raf=new java.io.RandomAccessFile(fileName,"rw");  raf.writeBoolean(true);  raf.writeBoolean(false);  raf.seek(0);  assertEquals("Test 1: Incorrect value written or read;",true,raf.readBoolean());  assertEquals("Test 2: Incorrect value written or read;",false,raf.readBoolean());  try {    raf.readBoolean();    fail("Test 3: EOFException expected.");  } catch (  EOFException e) {  }  raf.close();  try {    raf.writeBoolean(false);    fail("Test 4: IOException expected.");  } catch (  IOException e) {  }  try {    raf.readBoolean();    fail("Test 5: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public boolean isAbsolute(){  return absolute;}  }
class C{  public DsnCoordinateTransform(double p_scale_factor,double p_base_x,double p_base_y){  scale_factor=p_scale_factor;  base_x=p_base_x;  base_y=p_base_y;}  }
class C{  private void validateDisableReplicationOptions(LocalizableMessageBuilder buf){  appendErrorMessageIfArgumentsConflict(buf,getAdminUidArg(),secureArgsList.getBindDnArg());  appendErrorMessageIfArgumentsConflict(buf,disableAllArg,disableReplicationServerArg);  appendErrorMessageIfArgumentsConflict(buf,disableAllArg,baseDNsArg);}  }
class C{  public NameIDMappingResponse createNameIDMappingResponse(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.NAMEIDMAPPING_RES,value);  if (obj == null) {    return new NameIDMappingResponseImpl(value);  } else {    return (NameIDMappingResponse)obj;  }}  }
class C{  public Obligations createObligations(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESOURCE);  if (obj == null) {    return new ObligationsImpl();  } else {    return (Obligations)obj;  }}  }
class C{  @Override public int hashCode(){  int code=0;  if (propertyName != null) {    code+=propertyName.hashCode();  }  if (propertyValues != null) {    code+=propertyValues.hashCode();  }  if (pResponseProviderName != null) {    code+=pResponseProviderName.hashCode();  }  return code;}  }
class C{  public void handleButton1Request(RequestInvocationEvent event) throws ModelControlException {  ImportEntityModel model=(ImportEntityModel)getModel();  Map data=new HashMap(6);  String realm=(String)getDisplayFieldValue(model.REALM_NAME);  data.put(model.REALM_NAME,realm);  String radioMeta=(String)getDisplayFieldValue("radioMeta");  String meta=(radioMeta.equals("url")) ? (String)getDisplayFieldValue("tfMetadataFileURL") : (String)getDisplayFieldValue("tfMetadataFile");  String radioExtended=(String)getDisplayFieldValue("radioExtended");  String extended=(radioExtended.equals("url")) ? (String)getDisplayFieldValue("tfExtendeddataFileURL") : (String)getDisplayFieldValue("tfExtendeddataFile");  if ((meta == null) || (meta.length() == 0)) {    psModel.setErrorProperty("standardFileNameProperty",true);    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.input.error","import.entity.missing.metadata");    forwardTo();  } else {    data.put(ImportEntityModel.STANDARD_META,meta);    if ((extended != null) || (extended.trim().length() > 0)) {      data.put(ImportEntityModel.EXTENDED_META,extended);    }    try {      model.importEntity(data);      StringBuilder buff=new StringBuilder();      data.remove(ImportEntityModel.REALM_NAME);      for (Iterator i=data.keySet().iterator(); i.hasNext(); ) {        String key=(String)i.next();        String value=(String)data.get(key);        if ((value != null) && (value.length() > 0)) {          String val=(String)data.get(key);          if (val.startsWith("http")) {            if (buff.length() > 0) {              buff.append(", ");            }            buff.append(val);          } else {            int idx=val.lastIndexOf("<!-- ");            if (idx != -1) {              int idx1=val.lastIndexOf(" -->");              if (idx1 != -1) {                val=val.substring(idx + 5,idx1);              }            }            if (buff.length() > 0) {              buff.append(", ");            }            buff.append(val);          }        }      }      String message="";      if (buff.length() > 0) {        Object[] params={buff.toString()};        message=MessageFormat.format(model.getLocalizedString("import.entity.metadata.success"),params);      }      setPageSessionAttribute(FederationViewBean.MESSAGE_TEXT,message);      FederationViewBean vb=(FederationViewBean)getViewBean(FederationViewBean.class);      passPgSessionMap(vb);      vb.forwardTo(getRequestContext());    } catch (    AMConsoleException ame) {      debug.warning("ImportEntityViewBean.handleButton1req ",ame);      setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",ame.getMessage());      forwardTo();    }  }}  }
class C{  public LauncherScroller(Context context,Interpolator interpolator){  this(context,interpolator,context.getApplicationInfo().targetSdkVersion >= Build.VERSION_CODES.HONEYCOMB);}  }
class C{  protected IdentifiedException(LocalizableMessage message){  super(message);}  }
class C{  public static void checkGlError(String op){  int error=GLES20.glGetError();  if (error != GLES20.GL_NO_ERROR) {    String msg=op + ": glError 0x" + Integer.toHexString(error);    Log.e(TAG,msg);    throw new RuntimeException(msg);  }}  }
class C{  private void pinDayOfMonth(LocalGregorianCalendar.Date date){  int year=date.getYear();  int dom=date.getDayOfMonth();  if (year != getMinimum(YEAR)) {    date.setDayOfMonth(1);    jcal.normalize(date);    int monthLength=jcal.getMonthLength(date);    if (dom > monthLength) {      date.setDayOfMonth(monthLength);    } else {      date.setDayOfMonth(dom);    }    jcal.normalize(date);  } else {    LocalGregorianCalendar.Date d=jcal.getCalendarDate(Long.MIN_VALUE,getZone());    LocalGregorianCalendar.Date realDate=jcal.getCalendarDate(time,getZone());    long tod=realDate.getTimeOfDay();    realDate.addYear(+400);    realDate.setMonth(date.getMonth());    realDate.setDayOfMonth(1);    jcal.normalize(realDate);    int monthLength=jcal.getMonthLength(realDate);    if (dom > monthLength) {      realDate.setDayOfMonth(monthLength);    } else {      if (dom < d.getDayOfMonth()) {        realDate.setDayOfMonth(d.getDayOfMonth());      } else {        realDate.setDayOfMonth(dom);      }    }    if (realDate.getDayOfMonth() == d.getDayOfMonth() && tod < d.getTimeOfDay()) {      realDate.setDayOfMonth(Math.min(dom + 1,monthLength));    }    date.setDate(year,realDate.getMonth(),realDate.getDayOfMonth());  }}  }
class C{  protected static String[] commaDelimitedListToStringArray(String commaDelimitedStrings){  return (commaDelimitedStrings == null || commaDelimitedStrings.length() == 0) ? new String[0] : commaSeparatedValuesPattern.split(commaDelimitedStrings);}  }
class C{  protected PStmtKey createKey(final String sql,final StatementType stmtType){  String catalog=null;  try {    catalog=getCatalog();  } catch (  final SQLException e) {  }  return new PStmtKey(normalizeSQL(sql),catalog,stmtType,null);}  }
class C{  @NonNull public static Interpolator join(Interpolator... interpolators){  return new JoinInterpolator(interpolators);}  }
class C{  public PreferencesServiceImpl(Context context){  LOG.info("Creating PreferencesService instance for {}",context);  this.sharedPreferences=PreferenceManager.getDefaultSharedPreferences(context);  this.context=context;}  }
class C{  public void error(Level level,String messageId,String data[],Object session,Map props) throws LogException {  if (isErrorLoggable(level)) {    SSOToken authSSOToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());    LogRecord lr=getLogRecord(messageId,data,session,props,authSSOToken);    if (lr != null) {      errorLogger.log(lr,authSSOToken);    }  }}  }
class C{  protected String rewriteUrl(String path){  return URLEncoder.DEFAULT.encode(path,"UTF-8");}  }
class C{  private void buildCast(MethodVisitor methodVisitor,CodeInfo info,Ins.Cast cast){  buildValueAccess(methodVisitor,info,cast.value(),true);  Label label=new Label();  methodVisitor.visitLabel(label);  methodVisitor.visitInsn(cast.castMode());  if (cast.castMode() == Ins.Cast.CAST_FLOAT_TO_DOUBLE || cast.castMode() == Ins.Cast.CAST_INT_TO_DOUBLE || cast.castMode() == Ins.Cast.CAST_LONG_TO_DOUBLE) {    info.pop(1);    info.push(CodeInfo.Size._2);  } else {    info.pop(1);    info.push(CodeInfo.Size._1);  }  VisitLineNumber(methodVisitor,cast.line_col(),label);}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason,String sqlState,int vendorCode,Throwable cause){  super(reason,sqlState,vendorCode,cause);}  }
class C{  public void appendHeading(LocalizableMessage value){  header.add(value);  if (header.size() > width) {    width=header.size();    columnWidths.add(value.length());  } else   if (columnWidths.get(header.size() - 1) < value.length()) {    columnWidths.set(header.size() - 1,value.length());  }}  }
class C{  public boolean hasMember(Guid guid,int level) throws UMSException {  if (level == LEVEL_ALL) {    level=getMaxNestingLevel();  }  String id=guid.getDn();  for (int i=LEVEL_DIRECT; i <= level; i++) {    if (isMemberAtLevel(id,i)) {      return true;    }  }  return false;}  }
class C{  public void paintInternalFrameTitlePaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean warningEnabled(){  return (debugLevel > Debug.ERROR);}  }
class C{  public CertificatePolicies(){}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  if (actions == null)   getActions();  s.defaultWriteObject();}  }
class C{  public final void print(final LocalizableMessage msg){  if (!isQuiet()) {    out.print(wrap(msg));  }}  }
class C{  public XMLString concat(String str){  return new XString(str().concat(str));}  }
class C{  @Override public int countByField2(boolean field2){  FinderPath finderPath=FINDER_PATH_COUNT_BY_FIELD2;  Object[] finderArgs=new Object[]{field2};  Long count=(Long)finderCache.getResult(finderPath,finderArgs,this);  if (count == null) {    StringBundler query=new StringBundler(2);    query.append(_SQL_COUNT_FOO_WHERE);    query.append(_FINDER_COLUMN_FIELD2_FIELD2_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      qPos.add(field2);      count=(Long)q.uniqueResult();      finderCache.putResult(finderPath,finderArgs,count);    } catch (    Exception e) {      finderCache.removeResult(finderPath,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  return count.intValue();}  }
class C{  public FrameBodyTXXX(){  this.setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  this.setObjectValue(DataTypes.OBJ_DESCRIPTION,"");  this.setObjectValue(DataTypes.OBJ_TEXT,"");}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public FrameBodyTPUB(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("LDAP Attribute");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Attribute Type:  ");  buffer.append(attributeType);  buffer.append(EOL);  buffer.append("  Attribute Values:");  buffer.append(EOL);  for (  ByteString value : values) {    buffer.append(value.toHexPlusAsciiString(indent + 4));  }}  }
class C{  private boolean expand_to_door(ExpandDoor p_to_door,MazeListElement p_list_element,int p_add_costs,boolean p_next_room_is_thick,MazeAdjustment p_adjustment){  double half_width=art_ctrl.compensated_trace_half_width[p_list_element.next_room.get_layer()];  boolean something_expanded=false;  PlaSegmentFloat[] line_sections=p_to_door.get_section_segments(half_width);  for (int i=0; i < line_sections.length; ++i) {    MazeSearchElement mz_el=p_to_door.get_maze_search_element(i);    if (mz_el.is_occupied) {      continue;    }    PlaSegmentFloat new_shape_entry;    if (p_next_room_is_thick) {      new_shape_entry=line_sections[i];      if (p_to_door.dimension.is_line() && line_sections.length == 1 && p_to_door.first_room instanceof ExpandRoomFreespaceComplete && p_to_door.second_room instanceof ExpandRoomFreespaceComplete) {        PlaPointFloat shape_entry_middle=new_shape_entry.point_a.middle_point(new_shape_entry.point_b);        ShapeTile room_shape=p_list_element.next_room.get_shape();        if (room_shape.min_width() < 2 * half_width) {          return false;        }        PlaPointFloat[] nearest_points=room_shape.nearest_border_points_approx(shape_entry_middle,2);        if (nearest_points.length < 2 || nearest_points[1].distance(shape_entry_middle) <= half_width + 1) {          return false;        }      }    } else {      if (p_to_door.dimension.is_line() && i == 0 && line_sections[0].point_b.distance_square(line_sections[0].point_a) < 1) {        continue;      }      new_shape_entry=segment_projection(p_list_element.shape_entry,line_sections[i]);      if (new_shape_entry == null) {        continue;      }    }    if (expand_to_door_section(p_to_door,i,new_shape_entry,p_list_element,p_add_costs,p_adjustment)) {      something_expanded=true;    }  }  return something_expanded;}  }
class C{  public static double convertLatOrLongToDouble(Rational[] coordinate,String reference){  try {    double degrees=coordinate[0].toDouble();    double minutes=coordinate[1].toDouble();    double seconds=coordinate[2].toDouble();    double result=degrees + minutes / 60.0 + seconds / 3600.0;    if ((reference.equals("S") || reference.equals("W"))) {      return -result;    }    return result;  } catch (  ArrayIndexOutOfBoundsException e) {    throw new IllegalArgumentException();  }}  }
class C{  public static int countByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().countByUUID_G(uuid,groupId);}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("flattening iterator out of bounds");  }  int type=holdType;  if (type != SEG_CLOSE) {    coords[0]=(float)hold[holdIndex + 0];    coords[1]=(float)hold[holdIndex + 1];    if (type != SEG_MOVETO) {      type=SEG_LINETO;    }  }  return type;}  }
class C{  public Underline(Color color,float thickness,float thicknessMul,float yPosition,float yPositionMul,int lineCapStyle){  this.color=color;  this.thickness=thickness;  this.thicknessMul=thicknessMul;  this.yPosition=yPosition;  this.yPositionMul=yPositionMul;  this.lineCapStyle=lineCapStyle;}  }
class C{  public Pattern delimiter(){  return delimPattern;}  }
class C{  protected int calculateNewPagerPosition(int newActiveElement){  newActiveElement++;  if (newActiveElement <= 0)   newActiveElement=1;  int pagerActiveElemCenterPosX=mPagerElementActiveSize / 2 + newActiveElement * mPagerElementLeftMargin + (newActiveElement - 1) * (mPagerElementNormalSize + mPagerElementRightMargin);  return mRootLayout.getWidth() / 2 - pagerActiveElemCenterPosX;}  }
