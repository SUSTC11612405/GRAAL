class C{  public IntVector(int blocksize){  m_blocksize=blocksize;  m_mapSize=blocksize;  m_map=new int[blocksize];}  }
class C{  public void testArraysMatch(double[] a1,double[] a2){  for (int i=0; i < a1.length; i++) {    boolean found=false;    for (int j=0; j < a2.length; j++) {      if (a1[i] == a2[j]) {        found=true;        a2[j]=Double.NaN;      }    }    Assert.assertTrue(found);  }}  }
class C{  protected void init() throws ConfigurationException, LoggingException {  this.dataFileEncoder=new DataFileEncoder();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:47.418 -0500",hash_original_method="8872C66D19E491C8A24E1F3793E76CF5",hash_generated_method="CD09FE4DC07B71735E833151673F9B1F") @Override public void put(String name,short value){  emulatedFields.put(name,value);}  }
class C{  public boolean canZoomIn(){  return zoomLevel < MAX_ZOOM_LEVEL;}  }
class C{  public SourceAttr(CP name){  this.name=name;}  }
class C{  private void showHideFormMessage(){  if (profile.isCommonProfile()) {    managedForm.getMessageManager().addMessage(this,"Common profiles can not be edited",null,IMessageProvider.NONE);  } else   if (configToAssignmentMap.isEmpty()) {    managedForm.getMessageManager().addMessage(this,"No sensor assignment defined",null,IMessageProvider.INFORMATION);  } else {    managedForm.getMessageManager().removeMessage(this);  }}  }
class C{  @Override public Map<String,byte[]> put(final byte[] pk,final Map<String,byte[]> map){  try {    final Map<String,byte[]> entry=this.get(pk);    final byte[] b=BEncoder.encode(BEncoder.transcode(map));    this.table.insert(pk,b);    this.columnames.addAll(map.keySet());    return entry;  } catch (  final IOException e) {    ConcurrentLog.logException(e);    return null;  }catch (  final SpaceExceededException e) {    ConcurrentLog.logException(e);    return null;  }}  }
class C{  private void addWarningToContainers(PlausibilityWarning warning){  allWarnings.add(warning);  MapUtils.getSet(warning.getTransitRoute(),MapUtils.getMap(warning.getTransitLine(),this.warningsSchedule)).add(warning);  MapUtils.getSet(warning.getLinkIds(),warningsLinkIds).add(warning);  for (  Id<Link> linkId : warning.getLinkIds()) {    MapUtils.getSet(linkId,warningsLinks).add(warning);  }}  }
class C{  private void verifyExportMaskOnSystem(ExportMask mask,StorageSystem array){  VplexBackEndMaskingOrchestrator maskingOrchestrator=getOrch(array);  BlockStorageDevice storageDevice=_blockDeviceController.getDevice(array.getSystemType());  List<Initiator> initiators=new ArrayList<Initiator>();  initiators.addAll(ExportMaskUtils.getInitiatorsForExportMask(_dbClient,mask,Transport.FC));  if (initiators.isEmpty()) {    initiators.addAll(ExportMaskUtils.getExistingInitiatorsForExportMask(_dbClient,mask,Transport.FC));  }  Map<URI,ExportMask> maskSet=maskingOrchestrator.readExistingExportMasks(array,storageDevice,initiators);  if (maskSet.containsKey(mask.getId())) {    _log.info(String.format("Verified ExportMask %s present on %s",mask.getMaskName(),array.getNativeGuid()));    return;  }  _log.info(String.format("ExportMask %s not present on %s; checking if renamed...",mask.getMaskName(),array.getNativeGuid()));  checkForRenamedExportMasks(maskSet);}  }
class C{  public boolean isAlternateDnsServerAddressSettable(){  return alternateDnsServerAddressSettable;}  }
class C{  public ModelMBeanOperationInfo(ModelMBeanOperationInfo inInfo){  super(inInfo.getName(),inInfo.getDescription(),inInfo.getSignature(),inInfo.getReturnType(),inInfo.getImpact());  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"ModelMBeanOperationInfo(ModelMBeanOperationInfo)","Entry");  }  Descriptor newDesc=inInfo.getDescriptor();  operationDescriptor=validDescriptor(newDesc);}  }
class C{  private XMPPTCPConnection createNewConnection(SettingsManager settings) throws XMPPException {  Log.i("Creating new XMPP connection configuration");  XMPPTCPConnectionConfiguration.Builder confBuilder=XMPPTCPConnectionConfiguration.builder();  confBuilder.setConnectTimeout(10000);  if (settings.manuallySpecifyServerSettings) {    confBuilder.setHost(settings.serverHost.trim());    confBuilder.setPort(settings.serverPort);  }  confBuilder.setServiceName(settings.serviceName);  confBuilder.setSocketFactory(new XmppSocketFactory());  try {    SSLContext sc=SSLContext.getInstance("TLS");    sc.init(null,MemorizingTrustManager.getInstanceList(mContext),new SecureRandom());    confBuilder.setCustomSSLContext(sc);  } catch (  NoSuchAlgorithmException e) {    throw new IllegalStateException(e);  }catch (  KeyManagementException e) {    throw new IllegalStateException(e);  }switch (settings.xmppSecurityModeInt) {case SettingsManager.XMPPSecurityOptional:    confBuilder.setSecurityMode(ConnectionConfiguration.SecurityMode.ifpossible);  break;case SettingsManager.XMPPSecurityRequired:confBuilder.setSecurityMode(ConnectionConfiguration.SecurityMode.required);break;case SettingsManager.XMPPSecurityDisabled:default :confBuilder.setSecurityMode(ConnectionConfiguration.SecurityMode.disabled);break;}if (settings.useCompression) {confBuilder.setCompressionEnabled(true);}confBuilder.setSendPresence(false);confBuilder.setDebuggerEnabled(settings.debugLog);return new XMPPTCPConnection(confBuilder.build());}  }
class C{  public static List<String> executeCommandAndGetLines(List<String> cmdArray) throws IOException, InterruptedException {  ProcessBuilder builder=new ProcessBuilder(cmdArray);  builder.redirectErrorStream(true);  Process process=builder.start();  try (InputStream is=process.getInputStream();Scanner scanner=new Scanner(is).useDelimiter("\n")){    List<String> lines=new ArrayList<>();    while (scanner.hasNext()) {      lines.add(scanner.next());    }    process.waitFor();    int exitValue=process.exitValue();    if (exitValue != 0) {      throw new IllegalArgumentException(String.format("Command execution failed with status: %d\n%s",exitValue,lines));    }    return lines;  } }  }
class C{  public boolean equalsIgnoreCase(final StrBuilder other){  if (this == other) {    return true;  }  if (this.size != other.size) {    return false;  }  final char thisBuf[]=this.buffer;  final char otherBuf[]=other.buffer;  for (int i=size - 1; i >= 0; i--) {    final char c1=thisBuf[i];    final char c2=otherBuf[i];    if (c1 != c2 && Character.toUpperCase(c1) != Character.toUpperCase(c2)) {      return false;    }  }  return true;}  }
class C{  public int rtf(){  return m_dtmRoot;}  }
class C{  public PdfFontException(final String message){  error_message=message;}  }
class C{  public boolean add(Outlier outlier){  return this.outliers.add(outlier);}  }
class C{  public BoxRenderer(String url,int width,int height){  this(url,url,width,height);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.576 -0500",hash_original_method="37285ED747A36960374A3465C356C231",hash_generated_method="3827DF70E72AE91F10D6EDEE1DD6AF1F") private static boolean isEmergencyNumberInternal(String number,boolean useExactMatch){  if (number == null)   return false;  if (isUriNumber(number)) {    return false;  }  number=extractNetworkPortionAlt(number);  String numbers=SystemProperties.get("ril.ecclist");  if (TextUtils.isEmpty(numbers)) {    numbers=SystemProperties.get("ro.ril.ecclist");  }  if (!TextUtils.isEmpty(numbers)) {    for (    String emergencyNum : numbers.split(",")) {      if (useExactMatch) {        if (number.equals(emergencyNum)) {          return true;        }      } else {        if (number.startsWith(emergencyNum)) {          return true;        }      }    }    return false;  }  if (useExactMatch) {    return (number.equals("112") || number.equals("911"));  } else {    return (number.startsWith("112") || number.startsWith("911"));  }}  }
class C{  public static boolean vPoolSpecifiesMetroPoint(final VirtualPool virtualPool){  Boolean metroPoint=virtualPool.getMetroPoint();  String highAvailability=virtualPool.getHighAvailability();  return metroPoint != null && metroPoint && vPoolSpecifiesProtection(virtualPool) && NullColumnValueGetter.isNotNullValue(highAvailability) && VirtualPool.HighAvailabilityType.vplex_distributed.name().equals(highAvailability);}  }
class C{  private void writeMetrics() throws IOException {  if (metrics.size() > 0) {    try {      byte[] payload=pickleMetrics(metrics);      byte[] header=ByteBuffer.allocate(4).putInt(payload.length).array();      OutputStream outputStream=socket.getOutputStream();      outputStream.write(header);      outputStream.write(payload);      outputStream.flush();      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Wrote {} metrics",metrics.size());      }    } catch (    IOException e) {      this.failures++;      throw e;    } finally {      metrics.clear();    }  }}  }
class C{  public static void processPage(final Values commonValues,final PdfDecoderInt decode_pdf,final GUIFactory currentGUI,final GUIThumbnailPanel thumbnails){  if (commonValues.isPDF() && ((decode_pdf.isOpen() || !commonValues.isPDF() || decode_pdf.getJPedalObject(PdfDictionary.Linearized) != null))) {    final PdfFileInformation currentFileInformation=decode_pdf.getFileInformationData();    decode_pdf.setRenderMode(PdfDecoderInt.RENDERIMAGES + PdfDecoderInt.RENDERTEXT);    final String[] values=currentFileInformation.getFieldValues();    final String[] fields=PdfFileInformation.getFieldNames();    final String[] ocr={"TeleForm","dgn2pdf","ABBYY FineReader 8.0 Professional Edition"};    for (int i=0; i < fields.length; i++) {      if ((fields[i].equals("Creator")) || (fields[i].equals("Producer"))) {        for (        final String anOcr : ocr) {          if (values[i].equals(anOcr)) {            decode_pdf.setRenderMode(PdfDecoderInt.RENDERIMAGES);          }        }      }    }  }  if (commonValues.isPDF()) {    commonValues.setPageCount(decode_pdf.getPageCount());  } else   if (!commonValues.isMultiTiff()) {    commonValues.setPageCount(1);  }  if (commonValues.getPageCount() < commonValues.getCurrentPage()) {    commonValues.setCurrentPage(commonValues.getPageCount());    System.err.println(commonValues.getCurrentPage() + " out of range. Opening on last page");    LogWriter.writeLog(commonValues.getCurrentPage() + " out of range. Opening on last page");  }  decode_pdf.setExtractionMode(PdfDecoderInt.TEXT,currentGUI.getScaling());  currentGUI.setPageNumber();  currentGUI.resetRotationBox();  if (commonValues.isPDF()) {    currentGUI.decodePage();  } else {    currentGUI.scaleAndRotate();    decode_pdf.setPDFBorder(BorderFactory.createLineBorder(Color.black,1));    Images.decodeImage(decode_pdf,currentGUI,thumbnails,commonValues);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isAnimationCompleted(){  return mNativeInfoHandle.isAnimationCompleted();}  }
class C{  protected OnamiSuite(RunnerBuilder builder,Class<?> suite,Class<?>[] suiteClasses) throws InitializationError {  super(suite,runners(suite,suiteClasses));  try {    if (LOGGER.isLoggable(Level.FINER)) {      LOGGER.finer("Inizializing injector for siote class: " + suite.getName());    }    this.allModules=inizializeInjector(suite);    if (LOGGER.isLoggable(Level.FINER)) {      LOGGER.finer("done...");    }  } catch (  Exception e) {    final List<Throwable> throwables=new LinkedList<Throwable>();    throwables.add(e);    throw new InitializationError(throwables);  }}  }
class C{  private MInvoice createCounterDoc(){  if (getRef_Invoice_ID() != 0)   return null;  MOrg org=MOrg.get(getCtx(),getAD_Org_ID());  int counterC_BPartner_ID=org.getLinkedC_BPartner_ID(get_TrxName());  if (counterC_BPartner_ID == 0)   return null;  MBPartner bp=new MBPartner(getCtx(),getC_BPartner_ID(),get_TrxName());  int counterAD_Org_ID=bp.getAD_OrgBP_ID_Int();  if (counterAD_Org_ID == 0)   return null;  MBPartner counterBP=new MBPartner(getCtx(),counterC_BPartner_ID,get_TrxName());  log.info("Counter BP=" + counterBP.getName());  int C_DocTypeTarget_ID=0;  MDocTypeCounter counterDT=MDocTypeCounter.getCounterDocType(getCtx(),getC_DocType_ID());  if (counterDT != null) {    log.fine(counterDT.toString());    if (!counterDT.isCreateCounter() || !counterDT.isValid())     return null;    C_DocTypeTarget_ID=counterDT.getCounter_C_DocType_ID();  } else {    C_DocTypeTarget_ID=MDocTypeCounter.getCounterDocType_ID(getCtx(),getC_DocType_ID());    log.fine("Indirect C_DocTypeTarget_ID=" + C_DocTypeTarget_ID);    if (C_DocTypeTarget_ID <= 0)     return null;  }  MInvoice counter=copyFrom(this,getDateInvoiced(),getDateAcct(),C_DocTypeTarget_ID,!isSOTrx(),true,get_TrxName(),true);  counter.setAD_Org_ID(counterAD_Org_ID);  counter.setBPartner(counterBP);  counter.setSalesRep_ID(getSalesRep_ID());  counter.save(get_TrxName());  MInvoiceLine[] counterLines=counter.getLines(true);  for (int i=0; i < counterLines.length; i++) {    MInvoiceLine counterLine=counterLines[i];    counterLine.setClientOrg(counter);    counterLine.setInvoice(counter);    counterLine.setPrice();    counterLine.setTax();    counterLine.save(get_TrxName());  }  log.fine(counter.toString());  if (counterDT != null) {    if (counterDT.getDocAction() != null) {      counter.setDocAction(counterDT.getDocAction());      counter.processIt(counterDT.getDocAction());      counter.save(get_TrxName());    }  }  return counter;}  }
class C{  static void svd_datx(int n,double da,double[] dx,int incx,double[] dy,int incy){  assert incx == 1 || incx == -1 || incx == 0;  assert incy == 1 || incy == -1 || incy == 0;  if (n <= 0 || incx == 0 || incy == 0)   return;  int ix=(incx == 1) ? 0 : n - 1;  int iy=(incy == 1) ? 0 : n - 1;  for (int i=0; i < n; i++) {    dy[iy]=da * dx[ix];    iy+=incy;    ix+=incx;  }}  }
class C{  private void nextChunk() throws IOException {  if (!this.bof)   readCRLF();  this.chunkSize=getChunkSizeFromInputStream(this.in);  this.bof=false;  this.pos=0;  if (this.chunkSize == 0) {    this.eof=true;    skipTrailerHeaders();  }}  }
class C{  @Override protected Bitmap decodeByteArrayAsPurgeable(CloseableReference<PooledByteBuffer> bytesRef,BitmapFactory.Options options){  return decodeFileDescriptorAsPurgeable(bytesRef,bytesRef.get().size(),null,options);}  }
class C{  public void sendChat(String message){  send(new Packet(Packet.COMMAND_CHAT,message));  flushConn();}  }
class C{  public void success(JSONObject message){  try {    WritableMap writableMap=SQLitePluginConverter.jsonToReact(message);    successCallback.invoke(writableMap);  } catch (  JSONException ex) {    errorCallback.invoke("Internal error converting results:" + ex.getMessage());  }}  }
class C{  public MySqlConfig build(){  MySqlConfig mySqlConfig=new MySqlConfig(this);  return mySqlConfig;}  }
class C{  public static final String nullifyingToString(Object o){  return o != null ? nullifyIfEmpty(o.toString()) : null;}  }
class C{  void prepareDisplayTaskFor(ImageAware imageAware,String memoryCacheKey){  cacheKeysForImageAwares.put(imageAware.getId(),memoryCacheKey);}  }
class C{  private void processVolume(URI volumeId,VolumeShowResponse volDetails,DbClient dbClient,Calendar now,StringBuilder logMsgBuilder){  try {    Volume volume=dbClient.queryObject(Volume.class,volumeId);    volume.setCreationTime(now);    volume.setNativeId(volDetails.volume.id);    volume.setNativeGuid(NativeGUIDGenerator.generateNativeGuid(dbClient,volume));    long capacityInBytes=Long.valueOf(volDetails.volume.size) * 1024L * 1024L* 1024L;    volume.setAllocatedCapacity(capacityInBytes);    volume.setWWN(volDetails.volume.id);    volume.setProvisionedCapacity(capacityInBytes);    volume.setInactive(false);    dbClient.persistObject(volume);    if (logMsgBuilder.length() != 0) {      logMsgBuilder.append("\n");    }    logMsgBuilder.append(String.format("Created volume successfully .. NativeId: %s, URI: %s",volume.getNativeId(),getTaskCompleter().getId()));  } catch (  IOException e) {    logger.error("Caught an exception while trying to update volume attributes",e);  }}  }
class C{  public final void lazySet(boolean newValue){  int v=newValue ? 1 : 0;  unsafe.putOrderedInt(this,valueOffset,v);}  }
class C{  public static String jvmName(){  return jvmImplName;}  }
class C{  private static void loadFindbugsPlugin(){  DetectorFactoryCollection dfc=new DetectorFactoryCollection();  DetectorFactoryCollection.resetInstance(dfc);}  }
class C{  @DELETE public void deleteObject() throws GuacamoleException {  directory.remove(object.getIdentifier());}  }
class C{  public ServiceChannel createServiceChannel(String endpointUrl) throws ServiceResultException {  return new ServiceChannel(createSecureChannel(endpointUrl,endpointUrl));}  }
class C{  public final AC align(String side){  return align(side,curIx);}  }
class C{  public static double normalize(int distance){  double k=Properties.MAX_INT;  double d=distance;  return d / (d + 0.5 * k);}  }
class C{  @Nullable public static DebugServerException parse(String str){  if (TextUtils.isEmpty(str)) {    return null;  }  try {    JSONObject jsonObject=new JSONObject(str);    String fullFileName=jsonObject.getString("filename");    return new DebugServerException(jsonObject.getString("description"),shortenFileName(fullFileName),jsonObject.getInt("lineNumber"),jsonObject.getInt("column"));  } catch (  JSONException e) {    FLog.w(ReactConstants.TAG,"Could not parse DebugServerException from: " + str,e);    return null;  }}  }
class C{  private boolean isDropDown(){  return comboBox.isEditable() || hasScrollBars();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public K peekLast(){  return buffer[getIndex(writePos - 1)];}  }
class C{  protected final void fireColumnEvent(int type,int start,int end){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,type,start,end);}  }
class C{  public void generate(Collection<ActivityScreenAnnotatedClass> annotatedClasses) throws IOException, UnsupportedTypeException {  for (  ActivityScreenAnnotatedClass annotatedClass : annotatedClasses) {    TypeElement annotatedClassElement=annotatedClass.getTypeElement();    Name activitySimpleName=annotatedClassElement.getSimpleName();    String screenClassName=activitySimpleName + ActivityScreenAnnotatedClass.SUFFIX;    PackageElement pkg=elementUtils.getPackageOf(annotatedClassElement);    String packageName=pkg.isUnnamed() ? "" : pkg.getQualifiedName().toString();    ClassName activityScreenClassName=ClassName.get(packageName,screenClassName);    TypeSpec.Builder classBuilder=TypeSpec.classBuilder(screenClassName);    Set<ActivityArgAnnotatedField> requiredFields=annotatedClass.getRequiredFields();    Set<ActivityArgAnnotatedField> optionalFields=annotatedClass.getOptionalFields();    List<Argument> requiredArguments=new ArrayList<Argument>(requiredFields.size());    List<Argument> optionalArguments=new ArrayList<Argument>(optionalFields.size());    for (    ActivityArgAnnotatedField field : requiredFields) {      requiredArguments.add(Argument.from(field,typeElements));    }    for (    ActivityArgAnnotatedField field : optionalFields) {      optionalArguments.add(Argument.from(field,typeElements));    }    for (    Argument argument : requiredArguments) {      classBuilder.addField(argument.asField(Modifier.PUBLIC,Modifier.FINAL));    }    for (    Argument argument : optionalArguments) {      classBuilder.addField(argument.asField(Modifier.PRIVATE));    }    MethodSpec.Builder costructorBuilder=MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC);    for (    Argument argument : requiredArguments) {      costructorBuilder.addParameter(argument.asParameter());      String name=argument.name();      costructorBuilder.addStatement("this.$L = $L",name,name);    }    MethodSpec constructor=costructorBuilder.build();    classBuilder.addMethod(constructor);    for (    Argument argument : optionalArguments) {      String name=argument.name();      MethodSpec setter=MethodSpec.methodBuilder(String.format("set%s",WordUtils.capitalize(argument.name()))).addStatement("this.$L = $L",name,name).addStatement("return this").returns(activityScreenClassName).addModifiers(Modifier.PUBLIC).build();      classBuilder.addMethod(setter);    }    for (    Argument argument : optionalArguments) {      MethodSpec getter=MethodSpec.methodBuilder(String.format("get%s",WordUtils.capitalize(argument.name()))).addStatement("return $L",argument.name()).returns(argument.typeName()).addModifiers(Modifier.PUBLIC).build();      classBuilder.addMethod(getter);    }    MethodSpec openMethod=generateOpenMethod(false);    MethodSpec openForResultMethod=generateOpenMethod(true);    MethodSpec createIntentMethod=generateToIntentMethod(activitySimpleName,requiredArguments,optionalArguments);    classBuilder.addMethod(openMethod).addMethod(openForResultMethod).addMethod(createIntentMethod);    if (!requiredArguments.isEmpty() || !optionalArguments.isEmpty()) {      MethodSpec injectMethod=generateInjectMethod(annotatedClassElement,Iterables.concat(requiredArguments,optionalArguments));      classBuilder.addMethod(injectMethod);    }    if (!requiredArguments.isEmpty()) {      MethodSpec checkArgumentsMethod=generateCheckArgumentsMethod(requiredArguments);      classBuilder.addMethod(checkArgumentsMethod);    }    TypeSpec screenClass=classBuilder.addModifiers(Modifier.PUBLIC,Modifier.FINAL).build();    JavaFile javaFile=JavaFile.builder(packageName,screenClass).indent("    ").build();    javaFile.writeTo(filer);  }}  }
class C{  public List<ReplicationJob> createReplicationJobs(AuditLogEntry auditLogEntry,List<ReplicationFilter> replicationFilters) throws StateUpdateException {  List<ReplicationJob> replicationJobs=new ArrayList<>();  for (  ReplicationFilter replicationFilter : replicationFilters) {    if (!replicationFilter.accept(auditLogEntry)) {      LOG.debug(String.format("Audit log entry id: %s filtered out by %s",auditLogEntry,replicationFilter.getClass().getSimpleName()));      return replicationJobs;    }  }  if (auditLogEntry.getOutputTables().size() == 0 && auditLogEntry.getCommandType() == null) {    ExchangePartitionParser parser=new ExchangePartitionParser();    boolean parsed=parser.parse(auditLogEntry.getCommand());    if (parsed) {      LOG.debug(String.format("Parsed audit log id: %s " + "query: %s as an exchange partition query",auditLogEntry.getId(),auditLogEntry.getCommand()));      HiveObjectSpec exchangeToSpec=new HiveObjectSpec(parser.getExchangeToSpec().getDbName(),parser.getExchangeToSpec().getTableName(),parser.getPartitionName());      Table exchangeToTable=new Table();      exchangeToTable.setDbName(exchangeToSpec.getDbName());      exchangeToTable.setTableName(exchangeToSpec.getTableName());      Partition exchangeToPartition=new Partition();      exchangeToPartition.setDbName(exchangeToSpec.getDbName());      exchangeToPartition.setTableName(exchangeToSpec.getTableName());      exchangeToPartition.setValues(parser.getPartitionValues());      for (      ReplicationFilter replicationFilter : replicationFilters) {        if (!replicationFilter.accept(exchangeToTable,new NamedPartition(exchangeToSpec.getPartitionName(),exchangeToPartition))) {          LOG.debug(String.format("Exchange partition from audit log" + " id: %s filtered out by %s",auditLogEntry.getId(),replicationFilter.getClass().getSimpleName()));          return replicationJobs;        }      }      ReplicationJob job=createJobForCopyPartition(auditLogEntry.getId(),auditLogEntry.getCreateTime().getTime(),exchangeToSpec);      replicationJobs.add(job);      return replicationJobs;    } else {      LOG.warn("Error parsing query " + auditLogEntry.getCommand());    }  }  if (auditLogEntry.getOutputTables().size() == 0 && auditLogEntry.getOutputPartitions().size() == 0) {    LOG.debug(String.format("Audit log entry id: %s filtered out " + "since it has no output tables or partitions",auditLogEntry.getId()));    return replicationJobs;  }  OperationType operationType=null;switch (auditLogEntry.getCommandType()) {case DROPTABLE:case THRIFT_DROP_TABLE:case DROPVIEW:case ALTERTABLE_DROPPARTS:case THRIFT_DROP_PARTITION:    operationType=OperationType.DROP;  break;case ALTERTABLE_RENAME:case ALTERVIEW_RENAME:case ALTERTABLE_RENAMEPART:operationType=OperationType.RENAME;break;case THRIFT_ALTER_TABLE:String inputTableName=auditLogEntry.getInputTable().getTableName();if (auditLogEntry.getOutputTables().size() == 1 && !auditLogEntry.getOutputTables().get(0).getTableName().equals(inputTableName)) {operationType=OperationType.RENAME;} else {operationType=OperationType.COPY;}break;case THRIFT_ALTER_PARTITION:NamedPartition inputPartition=auditLogEntry.getInputPartition();List<NamedPartition> outputPartitions=auditLogEntry.getOutputPartitions();if (inputPartition != null && outputPartitions.size() == 1 && !inputPartition.getName().equals(outputPartitions.get(0).getName())) {operationType=OperationType.RENAME;} else {operationType=OperationType.COPY;}break;default :operationType=OperationType.COPY;}List<Table> outputTables=new ArrayList<>(auditLogEntry.getOutputTables());List<NamedPartition> outputPartitions=new ArrayList<>(auditLogEntry.getOutputPartitions());List<Table> referenceTables=auditLogEntry.getReferenceTables();filterObjects(replicationFilters,outputTables,outputPartitions,createTableLookupMap(referenceTables));switch (operationType) {case COPY:boolean shouldNotAddTables=auditLogEntry.getCommandType() == HiveOperation.ALTERTABLE_ADDPARTS || (auditLogEntry.getCommandType() == HiveOperation.LOAD && auditLogEntry.getOutputPartitions().size() > 0);if (!shouldNotAddTables) {for (Table t : outputTables) {replicationJobs.add(createJobForCopyTable(auditLogEntry.getId(),auditLogEntry.getCreateTime().getTime(),t));}}if (auditLogEntry.getOutputPartitions().size() > 1 && ReplicationUtils.fromSameTable(NamedPartition.toPartitions(outputPartitions))) {replicationJobs.add(createJobForCopyDynamicPartitions(auditLogEntry.getId(),auditLogEntry.getCreateTime().getTime(),auditLogEntry.getOutputPartitions()));} else {for (NamedPartition p : outputPartitions) {replicationJobs.add(createJobForCopyPartition(auditLogEntry.getId(),auditLogEntry.getCreateTime().getTime(),p));}}break;case DROP:for (Table t : outputTables) {replicationJobs.add(createJobForDropTable(auditLogEntry.getId(),auditLogEntry.getCreateTime().getTime(),t));}for (NamedPartition p : outputPartitions) {replicationJobs.add(createJobForDropPartition(auditLogEntry.getId(),auditLogEntry.getCreateTime().getTime(),p));}break;case RENAME:if (outputTables.size() == 0 && outputPartitions.size() == 0) {} else if (auditLogEntry.getInputTable() != null) {replicationJobs.add(createJobForRenameTable(auditLogEntry.getId(),auditLogEntry.getCreateTime().getTime(),auditLogEntry.getInputTable(),auditLogEntry.getOutputTables().get(0)));} else if (auditLogEntry.getInputPartition() != null) {replicationJobs.add(createJobForRenamePartition(auditLogEntry.getId(),auditLogEntry.getCreateTime().getTime(),auditLogEntry.getInputPartition(),auditLogEntry.getOutputPartitions().get(0)));} else {throw new RuntimeException("Shouldn't happen!");}break;default :throw new RuntimeException("Operation not handled: " + operationType);}LOG.debug("Converted audit log entry " + auditLogEntry + " to "+ replicationJobs);return replicationJobs;}  }
class C{  @Override public int insertUnassignedGroup(int analysisGroup) throws AdeException {  if (analysisGroup != UNASSIGNED_ANALYSIS_GROUP_ID) {    throw new AdeInternalException("This update is for unassigned analysis groups ONLY");  }  int analysisGroupInternalId;  analysisGroupInternalId=getUnassignedGroupInternalId();  if (analysisGroupInternalId != 0)   return analysisGroupInternalId;  final ConnectionWrapper cw=new ConnectionWrapper(AdeInternal.getDefaultConnection());  ResultSet generatedKey=null;  PreparedStatement ps=null;  try {    final int ruleId=insertUnassignedRules();    final int evaluationOrder=getNumOfGroups(cw) + 1;    PreparedStatementWrapper psw=cw.preparedStatement("INSERT INTO " + SQL.GROUPS + " (GROUP_NAME, "+ "GROUP_TYPE, DATA_TYPE, RULE_INTERNAL_ID, EVALUATION_ORDER) "+ "VALUES (?,?,?,?,?)",new String[]{"GROUP_INTERNAL_ID"});    ps=psw.getPreparedStatement();    int pos=1;    ps.setString(pos++,UNASSIGNED_GROUP_NAME);    ps.setInt(pos++,UNASSIGNED_GROUP_TYPE);    ps.setInt(pos++,UNASSIGNED_DATA_TYPE);    ps.setInt(pos++,ruleId);    ps.setInt(pos++,evaluationOrder);    ps.execute();    generatedKey=ps.getGeneratedKeys();    if (generatedKey.next()) {      analysisGroupInternalId=generatedKey.getInt(1);    }    cw.close();  } catch (  SQLException e) {    cw.failed(e);  } finally {    cw.quietCleanup();    try {      if (generatedKey != null)       generatedKey.close();    } catch (    SQLException e) {      logger.error("Error encountered closing the ResultSet.",e);    }    try {      if (ps != null)       ps.close();    } catch (    SQLException e) {      logger.error("Error encountered closing the PreparedStatement.",e);    }  }  return analysisGroupInternalId;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void startEarlyCore(SetupManager setupManager,LimeWireCore limeWireCore){  boolean inFirewallException=FirewallUtils.addToFirewall();  if (!inFirewallException) {    limeWireCore.getLifecycleManager().loadBackgroundTasks();  }}  }
class C{  public boolean process(MPayment payment){  if (m_order == null)   return false;  if (payment.get_ID() == 0)   payment.saveEx();  m_order.setC_Payment_ID(payment.getC_Payment_ID());  m_order.setDocAction(MOrder.DOCACTION_WaitComplete);  boolean ok=m_order.processIt(MOrder.DOCACTION_WaitComplete);  m_order.saveEx();  payment.setC_Order_ID(m_order.getC_Order_ID());  payment.setC_Invoice_ID(getInvoice_ID());  return ok;}  }
class C{  public void close(){  close(true);}  }
class C{  public StringProperty lastReceivedTimestampProperty(){  return lastReceivedTimestamp;}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public void update(){  timestamp=System.currentTimeMillis();}  }
class C{  public static void debug(String tag,String text){  if (BuildConfig.DEBUG) {    Log.d(tag,text);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Ministry.getInstance().getJobDestFile(getInt(stack));}  }
class C{  public Composer rightSide(float rightSide){  this.mRightSide=rightSide;  return this;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  if (triple != null) {    sb.append("<").append(getSubject().toString()).append("> ");    sb.append("<").append(getPredicate().toString()).append("> ");    if (getObject() instanceof Literal) {      sb.append(getObject().toString());    } else {      sb.append("<").append(getObject().toString()).append(">");    }  }  return sb.append(" .").toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:30.631 -0500",hash_original_method="B1BB833FCE4ABF3667361FA6F055417F",hash_generated_method="F20742DB08905530B79687A0FFA2E895") public boolean removeTask(int taskId,int flags) throws SecurityException {  try {    return ActivityManagerNative.getDefault().removeTask(taskId,flags);  } catch (  RemoteException e) {    return false;  }}  }
class C{  public void menuSelectionChanged(boolean isIncluded){}  }
class C{  public ChiSquare(double freedom,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(freedom);}  }
class C{  private static String formatDisplayName(String nodeName){  char[] val=nodeName.toCharArray();  int position=0;  StringBuffer newNodeName=new StringBuffer(nodeName);  for (int i=0; i < val.length; i++) {    if (!Character.isLetterOrDigit(val[i]) || (i == 0)) {      String replace=null;      if (i == 0) {        replace="" + Character.toUpperCase(val[i]);        newNodeName.replace(position,position + 1,replace);      } else {        replace=" " + Character.toUpperCase(val[i + 1]);        newNodeName.replace(position,position + 2,replace);      }    }    position++;  }  return newNodeName.toString();}  }
class C{  protected Light createNewSpecificLight(String systemName,String userName){  return new SpecificLight(systemName,tc,userName);}  }
class C{  private void createNew(){  String value;  String name;  log.config("");  value=m_txbValueField.getValue();  if (value.length() == 0) {    throw new WrongValueException(m_txbValueField,Msg.getMsg(Env.getCtx(),"FillMandatory") + m_lblValue.getValue());  }  name=m_txbNameField.getText();  if (name.length() == 0) {    throw new WrongValueException(m_txbNameField,Msg.getMsg(Env.getCtx(),"FillMandatory") + m_lblName.getValue());  }  int elementValueId=createElementValue(value,name,m_chbIsExpense.isChecked());  if (elementValueId == 0) {    FDialog.error(form.getWindowNo(),form,"ChargeNotCreated",name);    return;  }  int chargeId=createCharge(name,elementValueId);  if (chargeId == 0) {    FDialog.error(form.getWindowNo(),form,"ChargeNotCreated",name);    return;  }  FDialog.info(form.getWindowNo(),form,"ChargeCreated",name);}  }
class C{  public Executor wd(File wd){  this.wd=wd;  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case StextPackage.STATE_ROOT__DEF:    return def != null;}return super.eIsSet(featureID);}  }
class C{  public static boolean isLoggable(int logLevel){  return (logLevel >= LOGLEVEL);}  }
class C{  public void ensureCleaningUpDyingTabs(long time){  finishAnimation(time);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  private static int randomNumberInRange(int min,int max){  return random.nextInt((max - min) + 1) + min;}  }
class C{  private static boolean isInNeedOfForm(UIComponent component){  return (component instanceof ActionSource || component instanceof ActionSource2 || component instanceof EditableValueHolder);}  }
class C{  public void closeScene(final SceneRequest request){  closeScene(request,null);}  }
class C{  public void store16(int addr,int value){  store8(addr,value >> 8);  store8(addr + 1,value);}  }
class C{  public static String formatAsUnits(long number,UnitSystem unitSystem,String unitPostfix,String separator){  UnitComponent comp=new UnitComponent(number,unitSystem);  int GB=comp.giga();  int MB=comp.mega();  int KB=comp.kilo();  int B=comp.base();  StringBuilder formatedSize=new StringBuilder(32);  if (GB > 0)   formatedSize.append(GB).append(unitSystem.gigaPrefix().symbol()).append(unitPostfix).append(separator);  if (MB > 0)   formatedSize.append(MB).append(unitSystem.megaPrefix().symbol()).append(unitPostfix).append(separator);  if (KB > 0)   formatedSize.append(KB).append(unitSystem.kiloPrefix().symbol()).append(unitPostfix).append(separator);  formatedSize.append(B).append(unitSystem.basePrefix().symbol()).append(unitPostfix).append(separator);  formatedSize.setLength(formatedSize.length() - separator.length());  return formatedSize.toString();}  }
class C{  public GsonBuilder serializeNulls(){  this.serializeNulls=true;  return this;}  }
class C{  protected void removeFromSource(PropertyChangeEvent event){  Object src=event.getSource();  try {    src.getClass().getMethod("removePropertyChangeListener",new Class[]{PropertyChangeListener.class}).invoke(src,this);  } catch (  Exception ex) {    InternalError ie=new InternalError("Could not remove WeakPropertyChangeListener from " + src + ".");    ie.initCause(ex);    throw ie;  }}  }
class C{  protected void decodeAtom(PushbackInputStream inStream,OutputStream outStream,int rem) throws java.io.IOException {  int i;  byte a=-1, b=-1, c=-1, d=-1;  if (rem < 2) {    throw new CEFormatException("BASE64Decoder: Not enough bytes for an atom.");  }  do {    i=inStream.read();    if (i == -1) {      throw new CEStreamExhausted();    }  } while (i == '\n' || i == '\r');  decode_buffer[0]=(byte)i;  i=readFully(inStream,decode_buffer,1,rem - 1);  if (i == -1) {    throw new CEStreamExhausted();  }  if (rem > 3 && decode_buffer[3] == '=') {    rem=3;  }  if (rem > 2 && decode_buffer[2] == '=') {    rem=2;  }switch (rem) {case 4:    d=pem_convert_array[decode_buffer[3] & 0xff];case 3:  c=pem_convert_array[decode_buffer[2] & 0xff];case 2:b=pem_convert_array[decode_buffer[1] & 0xff];a=pem_convert_array[decode_buffer[0] & 0xff];break;}switch (rem) {case 2:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));break;case 3:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));outStream.write((byte)(((b << 4) & 0xf0) | ((c >>> 2) & 0xf)));break;case 4:outStream.write((byte)(((a << 2) & 0xfc) | ((b >>> 4) & 3)));outStream.write((byte)(((b << 4) & 0xf0) | ((c >>> 2) & 0xf)));outStream.write((byte)(((c << 6) & 0xc0) | (d & 0x3f)));break;}return;}  }
class C{  public void initialise(){  destNextPastSourceVectors=null;  epsilons=new double[k + 2];}  }
class C{  public void endDocument() throws SAXException {}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof com.bbn.openmap.MapBean) {    logger.fine("ProjectionStack removing a MapBean.");    MapBean map=getMapBean();    if (map != null && map == (MapBean)someObj) {      setMapBean(null);    }  }}  }
class C{  public void testGetReaderPort(){  OlimexRfidProtocol instance=new OlimexRfidProtocol();  char expResult=0x00;  assertEquals(expResult,instance.getReaderPort(msgStandalone));}  }
class C{  @Override public void printProjection(){  projection.print();}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public long maxMemory(){  return MemoryManager.maxMemory().toLong();}  }
class C{  static <T>GeneralRange<T> downTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,true,endpoint,boundType,false,null,OPEN);}  }
class C{  public ObjectVirtualPoolRestRep create(ObjectVirtualPoolParam input){  return client.post(ObjectVirtualPoolRestRep.class,input,baseUrl);}  }
class C{  public static <T extends DataObject>List<T> iteratorToList(Iterator<T> itr){  List<T> objs=new ArrayList<T>();  while (itr.hasNext()) {    objs.add(itr.next());  }  return objs;}  }
class C{  public DefaultRequest dnsTime(Integer value){  setInteger(DNS_TIME,value);  return this;}  }
class C{  private static String toByteA(final HLL hll,final ISchemaVersion schemaVersion){  final byte[] bytes=hll.toBytes(schemaVersion);  return ("\\x" + NumberUtil.toHex(bytes,0,bytes.length));}  }
class C{  private String serializedLambdaDisambiguation(){  StringBuilder buf=new StringBuilder();  Assert.check(owner.type != null || directlyEnclosingLambda() != null);  if (owner.type != null) {    buf.append(typeSig(owner.type));    buf.append(":");  }  buf.append(types.findDescriptorSymbol(tree.type.tsym).owner.flatName());  buf.append(" ");  if (assignedTo != null) {    buf.append(assignedTo.flatName());    buf.append("=");  }  for (  Symbol fv : getSymbolMap(CAPTURED_VAR).keySet()) {    if (fv != self) {      buf.append(typeSig(fv.type));      buf.append(" ");      buf.append(fv.flatName());      buf.append(",");    }  }  return buf.toString();}  }
class C{  public JSONArray(Collection c){  super(c);}  }
class C{  static Font lookupFont(String pangoName){  String family="";  int style=Font.PLAIN;  int size=10;  StringTokenizer tok=new StringTokenizer(pangoName);  while (tok.hasMoreTokens()) {    String word=tok.nextToken();    if (word.equalsIgnoreCase("italic")) {      style|=Font.ITALIC;    } else     if (word.equalsIgnoreCase("bold")) {      style|=Font.BOLD;    } else     if (CHARS_DIGITS.indexOf(word.charAt(0)) != -1) {      try {        size=Integer.parseInt(word);      } catch (      NumberFormatException ex) {      }    } else {      if (family.length() > 0) {        family+=" ";      }      family+=word;    }  }  double dsize=size;  int dpi=96;  Object value=Toolkit.getDefaultToolkit().getDesktopProperty("gnome.Xft/DPI");  if (!(value instanceof Integer)) {    value=GTKEngine.INSTANCE.getSetting(GTKEngine.Settings.GTK_XFT_DPI);  }  if (value instanceof Integer) {    dpi=((Integer)value).intValue() / 1024;    if (dpi == -1) {      dpi=96;    }    if (dpi < 50) {      dpi=50;    }    dsize=((double)(dpi * size) / 72.0);  } else {    dsize=size * fontScale;  }  size=(int)(dsize + 0.5);  if (size < 1) {    size=1;  }  String fcFamilyLC=family.toLowerCase();  if (FontUtilities.mapFcName(fcFamilyLC) != null) {    Font font=FontUtilities.getFontConfigFUIR(fcFamilyLC,style,size);    font=font.deriveFont(style,(float)dsize);    return new FontUIResource(font);  } else {    Font font=new Font(family,style,size);    font=font.deriveFont(style,(float)dsize);    FontUIResource fuir=new FontUIResource(font);    return FontUtilities.getCompositeFontUIResource(fuir);  }}  }
class C{  public final int read(byte ba[],int off,int len) throws IOException {  return is.read(ba,off,len);}  }
class C{  public static byte[] decode(String s) throws java.io.IOException {  return decode(s,NO_OPTIONS);}  }
class C{  protected boolean isNavigationKey(int keyCode){  return keyCode == KeyEvent.VK_UP || keyCode == KeyEvent.VK_DOWN || keyCode == KeyEvent.VK_KP_UP || keyCode == KeyEvent.VK_KP_DOWN;}  }
class C{  public void normal(){  mHintView.setVisibility(View.VISIBLE);  mProgressBar.setVisibility(View.GONE);}  }
class C{  protected static void rejectMethodD(long n,long N,int count,long low,long[] values,int fromIndex,RandomEngine randomGenerator){  n=N - n;  double nreal, Nreal, ninv, nmin1inv, U, X, Vprime, y1, y2, top, bottom, negSreal, qu1real;  long qu1, t, limit;  long S;  long chosen=-1 + low;  long negalphainv=-13;  nreal=n;  ninv=1.0 / nreal;  Nreal=N;  Vprime=Math.exp(Math.log(randomGenerator.raw()) * ninv);  qu1=-n + 1 + N;  qu1real=-nreal + 1.0 + Nreal;  while (n > 1 && count > 0) {    nmin1inv=1.0 / (-1.0 + nreal);    for (; ; ) {      for (; ; ) {        X=Nreal * (-Vprime + 1.0);        S=(long)X;        if (S < qu1)         break;        Vprime=Math.exp(Math.log(randomGenerator.raw()) * ninv);      }      U=randomGenerator.raw();      negSreal=-S;      y1=Math.exp(Math.log(U * Nreal / qu1real) * nmin1inv);      Vprime=y1 * (-X / Nreal + 1.0) * (qu1real / (negSreal + qu1real));      if (Vprime <= 1.0)       break;      y2=1.0;      top=-1.0 + Nreal;      if (n - 1 > S) {        bottom=-nreal + Nreal;        limit=-S + N;      } else {        bottom=-1.0 + negSreal + Nreal;        limit=qu1;      }      for (t=N - 1; t >= limit; t--) {        y2=(y2 * top) / bottom;        top--;        bottom--;      }      if (Nreal / (-X + Nreal) >= y1 * Math.exp(Math.log(y2) * nmin1inv)) {        Vprime=Math.exp(Math.log(randomGenerator.raw()) * nmin1inv);        break;      }      Vprime=Math.exp(Math.log(randomGenerator.raw()) * ninv);    }    int iter=count;    if (S < iter)     iter=(int)S;    count-=iter;    for (; --iter >= 0; )     values[fromIndex++]=++chosen;    chosen++;    N-=S + 1;    Nreal=negSreal + (-1.0 + Nreal);    n--;    nreal--;    ninv=nmin1inv;    qu1=-S + qu1;    qu1real=negSreal + qu1real;  }  if (count > 0) {    S=(long)(N * Vprime);    int iter=count;    if (S < iter)     iter=(int)S;    count-=iter;    for (; --iter >= 0; )     values[fromIndex++]=++chosen;    chosen++;    for (; --count >= 0; )     values[fromIndex++]=++chosen;  }}  }
class C{  public void addBannedIp(final String ip,final Date banTill){  if (isIpBanned(ip).getFirst()) {    removeBannedIp(ip);  }  Timestamp banTillTs=null;  if (banTill != null) {    banTillTs=new Timestamp(banTill.getTime());  }  s_logger.fine("Banning ip:" + ip);  final Connection con=Database.getConnection();  try {    final PreparedStatement ps=con.prepareStatement("insert into banned_ips (ip, ban_till) values (?, ?)");    ps.setString(1,ip);    ps.setTimestamp(2,banTillTs);    ps.execute();    ps.close();    con.commit();  } catch (  final SQLException sqle) {    if (sqle.getErrorCode() == 30000) {      s_logger.info("Tried to create duplicate banned ip:" + ip + " error:"+ sqle.getMessage());      return;    }    s_logger.log(Level.SEVERE,"Error inserting banned ip:" + ip,sqle);    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }}  }
class C{  private static void updateNetworks(List<URI> ids,VirtualArrayAssignmentChanges changes){  if (ids.isEmpty()) {    return;  }  List<NetworkRestRep> networks=NetworkUtils.getNetworks(ids);  for (  NetworkRestRep network : networks) {    NetworkUpdate update=new NetworkUpdate();    update.setVarrayChanges(changes);    NetworkUtils.update(network.getId(),update);  }}  }
class C{  public static FloatMatrix randn(int len){  return randn(len,1);}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public PriorityQueue(SortedSet<? extends E> c){  getFromSortedSet(c);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentcreateelementNS05.class,args);}  }
class C{  private void addSynapse(final Synapse synapse){  if (objectNodeMap.get(synapse) != null) {    return;  }  NeuronNode source=(NeuronNode)objectNodeMap.get(synapse.getSource());  NeuronNode target=(NeuronNode)objectNodeMap.get(synapse.getTarget());  if ((source == null) || (target == null)) {    return;  }  SynapseNode node=new SynapseNode(NetworkPanel.this,source,target,synapse);  canvas.getLayer().addChild(node);  objectNodeMap.put(synapse,node);  node.lowerToBottom();}  }
class C{  public static void createTable(KeyValueService kvs,TableReference tableRef,String rowComponent,String columnName){  TableDefinition tableDef=new TableDefinition(){{      rowName();      rowComponent(rowComponent,ValueType.STRING);      columns();      column(columnName,columnName,ValueType.BLOB);      conflictHandler(ConflictHandler.IGNORE_ALL);      sweepStrategy(TableMetadataPersistence.SweepStrategy.NOTHING);    }  };  kvs.createTable(tableRef,tableDef.toTableMetadata().persistToBytes());}  }
class C{  void unregisterDecorators(){  view.removeDrawDecorator(processAnnotationDrawer,RenderPhase.ANNOTATIONS);  view.removeDrawDecorator(operatorAnnotationDrawer,RenderPhase.OPERATOR_ANNOTATIONS);  view.removeDrawDecorator(workflowAnnotationDrawerHighlight,RenderPhase.OVERLAY);  view.removeDrawDecorator(opAnnotationIconDrawer);  view.getOverviewPanelDrawer().removeDecorator(processAnnotationDrawer,RenderPhase.ANNOTATIONS);  view.getOverviewPanelDrawer().removeDecorator(operatorAnnotationDrawer,RenderPhase.OPERATOR_ANNOTATIONS);  hook.unregisterEventHooks();  view.removeComponentListener(colorPanelMover);  ApplicationFrame.getApplicationFrame().removeComponentListener(colorPanelMover);}  }
class C{  public Model(Option option,Data data,Dictionary dict,FeatureGen feaGen,Train train,Inference inference,Evaluation evaluation){  this.option=option;  this.data=data;  this.dict=dict;  this.feaGen=feaGen;  this.evaluation=evaluation;  if (train != null) {    this.train=train;    this.train.model=this;    this.train.init();  }  if (inference != null) {    this.inference=inference;    this.inference.model=this;    this.inference.init();  }  if (evaluation != null) {    this.evaluation=evaluation;    this.evaluation.model=this;    this.evaluation.init();  }}  }
class C{  private void pruneScrapViews(){  final int maxViews=activeViews.length;  final int viewTypeCount=this.viewTypeCount;  final SparseArray<View>[] scrapViews=this.scrapViews;  for (int i=0; i < viewTypeCount; ++i) {    final SparseArray<View> scrapPile=scrapViews[i];    int size=scrapPile.size();    final int extras=size - maxViews;    size--;    for (int j=0; j < extras; j++) {      scrapPile.remove(scrapPile.keyAt(size--));    }  }}  }
class C{  public static Document parseText(String text) throws DocumentException {  SAXReader reader=new SAXReader();  String encoding=getEncoding(text);  InputSource source=new InputSource(new StringReader(text));  source.setEncoding(encoding);  Document result=reader.read(source);  if (result.getXMLEncoding() == null) {    result.setXMLEncoding(encoding);  }  return result;}  }
class C{  public CDebuggersTable(final JTree projectTree,final IDatabase database){  super(projectTree,new CDebuggersModel(database),new CDebuggersTableHelp());  m_database=database;}  }
class C{  public JBBPFieldStruct parse(final byte[] array,final JBBPVarFieldProcessor varFieldProcessor,final JBBPExternalValueProvider externalValueProvider) throws IOException {  JBBPUtils.assertNotNull(array,"Array must not be null");  return this.parse(new ByteArrayInputStream(array),varFieldProcessor,externalValueProvider);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'FRESH_NEWS_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  private void removePreferenceFromScreen(String key){  Preference pref=findPreference(key);  if (pref != null) {    getPreferenceScreen().removePreference(pref);  }}  }
class C{  private int hash(long qAddr){  return mem.readInt(qAddr + 6);}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  public int size(){  return sizes.size();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.114 -0500",hash_original_method="0F7A0E2393C34E90AEC2D039DA3C1483",hash_generated_method="AA78817369B857462D1EED8199A1A4E2") public void copy1DRangeFromUnchecked(int off,int count,float[] d){  int dataSize=mType.mElement.getSizeBytes() * count;  data1DChecks(off,count,d.length * 4,dataSize);  mRS.nAllocationData1D(getIDSafe(),off,mSelectedLOD,count,d,dataSize);}  }
class C{  public static LinearDelayStrategy withDuration(final int minDelay,final int maxDelay,final int duration){  if (duration < minDelay + maxDelay) {    throw new IllegalArgumentException("duration must be at least minDelay + maxDelay");  }  final int iterations=2 * duration / (minDelay + maxDelay);  return new LinearDelayStrategy(minDelay,maxDelay,iterations);}  }
class C{  public String toString(){  Annotation[][] aa=getAnnotations();  StringBuilder sbuf=new StringBuilder();  int k=0;  while (k < aa.length) {    Annotation[] a=aa[k++];    int i=0;    while (i < a.length) {      sbuf.append(a[i++].toString());      if (i != a.length)       sbuf.append(" ");    }    if (k != aa.length)     sbuf.append(", ");  }  return sbuf.toString();}  }
class C{  @SuppressWarnings("unchecked") public Network parse(URL uri){  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder parser=factory.newDocumentBuilder();    Document document=parser.parse(uri.toString());    Element root=document.getDocumentElement();    BasicNetwork network=new BasicNetwork();    SimpleDateFormat formater=new SimpleDateFormat();    NodeList vertexElements=((Element)root.getElementsByTagName("vertices").item(0)).getElementsByTagName("vertex");    Map<Number,Vertex> verticiesById=new HashMap<Number,Vertex>();    for (int index=0; index < vertexElements.getLength(); index++) {      Element vertexElement=(Element)vertexElements.item(index);      BasicVertex vertex=new BasicVertex();      Long id=new Long(vertexElement.getAttribute("id"));      vertex.setId(id);      NodeList creationDateElements=vertexElement.getElementsByTagName("creation-date");      if (creationDateElements != null && creationDateElements.getLength() > 0) {        String date=(String)creationDateElements.item(0).getFirstChild().getNodeValue();        vertex.setCreationDate(formater.parse(date));      } else {        vertex.setCreationDate(new Date());      }      NodeList accessDateElements=vertexElement.getElementsByTagName("access-date");      if (accessDateElements != null && accessDateElements.getLength() > 0) {        String date=(String)accessDateElements.item(0).getFirstChild().getNodeValue();        vertex.setAccessDate(formater.parse(date));      } else {        vertex.setAccessDate(new Date());      }      String count=vertexElement.getAttribute("access-count");      if (count != "") {        vertex.setAccessCount(Integer.parseInt(count));      } else {        vertex.setAccessCount(1);      }      NodeList dataElements=vertexElement.getElementsByTagName("data");      if (dataElements != null && dataElements.getLength() > 0) {        Element dataNode=(Element)dataElements.item(0);        String type=dataNode.getAttribute("type");        String value=dataNode.getTextContent();        Object data=null;        if (type.equals("Primitive")) {          data=new Primitive(value);        } else         if (type.equals("String")) {          data=value;        } else         if (type.equals("Date")) {          data=Calendar.getInstance();          ((Calendar)data).setTime(formater.parse(value));        } else {          try {            Class<Object> typeClass=(Class<Object>)Class.forName(type);            data=typeClass.getConstructor(String.class).newInstance(value);          } catch (          Exception error) {            System.out.println(error);            data=value;          }        }        vertex.setData(data);      }      Vertex existingVertex=network.findByData(vertex.getData());      if (existingVertex == null) {        network.addVertex(vertex);        verticiesById.put(id,vertex);      } else {        verticiesById.put(id,existingVertex);      }    }    NodeList relationElements=((Element)root.getElementsByTagName("relations").item(0)).getElementsByTagName("relationship");    for (int index=0; index < relationElements.getLength(); index++) {      Element relationElement=(Element)relationElements.item(index);      Long sourceId=new Long(relationElement.getAttribute("source-id"));      Long targetId=new Long(relationElement.getAttribute("target-id"));      Long typeId=new Long(relationElement.getAttribute("type-id"));      Float correctness=0.5f;      try {        correctness=new Float(relationElement.getAttribute("correctness"));      } catch (      Exception backwardCompatibility) {      }      Vertex source=(Vertex)verticiesById.get(sourceId);      Vertex target=(Vertex)verticiesById.get(targetId);      Vertex type=(Vertex)verticiesById.get(typeId);      Relationship relationship=source.addRelationship(type,target);      relationship.setCorrectness(correctness);    }    return network;  } catch (  Exception exception) {    throw new BotException("Parsing error while parsing network xml file.",exception);  }}  }
class C{  public void paintInternalFrameBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  protected IonFloat ionFloat(double value){  return system().newFloat(value);}  }
class C{  public void start(int checkLoopInterval){  showComponent();  new Timer().schedule(this,0,checkLoopInterval);}  }
class C{  public <R>R transact(Work<R> work){  return inTransaction() ? work.run() : transactNew(work);}  }
class C{  void performaAliasing(){  final Expression verb1=getVerb(0);  final Expression verb2=getVerb(1);  final Expression subject1=getSubject(0);  final Expression subject2=getSubject(1);  if (matchesNormalizedStart("will SUB VER")) {    verb2.mergeLeft(verb1,false);    expressions.remove(verb1);    sentenceType=SentenceType.QUESTION;  } else   if (matchesNormalized("you have OBJ for me")) {    expressions.remove(subject1);    expressions.remove(getPreposition(0));    expressions.remove(subject2);    verb1.setNormalized("buy");    sentenceType=SentenceType.IMPERATIVE;  } else   if (isYouGiveMe(subject1,verb1,subject2)) {    expressions.remove(subject1);    expressions.remove(subject2);    verb1.setNormalized("buy");    sentenceType=SentenceType.IMPERATIVE;  }  if (isLikeToHave()) {    getVerb().setNormalized("buy");    sentenceType=SentenceType.IMPERATIVE;  }}  }
class C{  public T caseExtraCode_(ExtraCode_ object){  return null;}  }
class C{  protected FunctionImpl(){  super();}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  Operand peek(Register s){  Stack<Operand> stack=get(s);  if (stack == null || stack.isEmpty()) {    return null;  } else {    return stack.peek();  }}  }
class C{  public CacheCreation(){  this(false);}  }
class C{  public DateTime withChronology(Chronology newChronology){  newChronology=DateTimeUtils.getChronology(newChronology);  return (newChronology == getChronology() ? this : new DateTime(getMillis(),newChronology));}  }
class C{  @VisibleForTesting protected State buildPatch(TaskState.TaskStage stage,TaskState.SubStage subStage){  return buildPatch(stage,subStage,(Throwable)null);}  }
class C{  @Pure public static <T extends Comparable<? super T>>IPersistentVector<T> sort(IPersistentVector<T> list){  ITransientVector<T> tv=list.asTransient();  Collections.sort(tv);  return tv.persistent();}  }
class C{  public FXDialog(final Stage parent,final Modality modality,final Pane content){  init(parent,modality,content);  final Scene scene=new Scene(content);  setScene(scene);}  }
class C{  public static boolean canSendSms(Context context){  Uri smsUri=Uri.parse("smsto:12345");  Intent smsIntent=new Intent(Intent.ACTION_SENDTO,smsUri);  PackageManager smspackageManager=context.getPackageManager();  List<ResolveInfo> smsresolveInfos=smspackageManager.queryIntentActivities(smsIntent,0);  return smsresolveInfos.size() > 0;}  }
class C{  public MinExpiresHeader createMinExpiresHeader(int minExpires) throws InvalidArgumentException {  if (minExpires < 0)   throw new InvalidArgumentException("bad minExpires " + minExpires);  MinExpires min=new MinExpires();  min.setExpires(minExpires);  return min;}  }
class C{  @Override public void onChunkLoad(){  this.isChunkLoaded=true;  MinecraftForge.EVENT_BUS.post(new ChunkEvent.Load(this));}  }
class C{  public Constituent addTokenLabel(int tokenId,String label,double score){  return this.addSpanLabel(tokenId,tokenId + 1,label,score);}  }
class C{  public DrawerBuilder withTranslucentNavigationBar(boolean translucentNavigationBar){  this.mTranslucentNavigationBar=translucentNavigationBar;  if (!translucentNavigationBar) {    this.mTranslucentNavigationBarProgrammatically=false;  }  return this;}  }
class C{  public double calculateNewTurnAngle(int fromEdge,int toEdge){  EdgeStore.Edge e=layer.edgeStore.getCursor(fromEdge);  int outAngle=e.getOutAngle();  e=layer.edgeStore.getCursor(toEdge);  int inAngle=e.getInAngle();  return calculateTurnAngle(outAngle,inAngle);}  }
class C{  public void writeFloat(float value) throws IOException {  writeSI32(Float.floatToIntBits(value));}  }
class C{  public void traverse(EclipseASTVisitor visitor){  top().traverse(visitor);}  }
class C{  public int write(final Protein protein,final boolean standalone) throws IOException {  checkEntryHierarchy();  if (entryHierarchy != null) {    for (    ProteinXref xref : protein.getCrossReferences()) {      final SimpleProtein simpleProtein=SimpleProtein.valueOf(protein,xref,entryHierarchy);      if (simpleProtein != null) {        final SimpleHash model=buildModelMap(simpleProtein,entryHierarchy,standalone);        Writer writer=null;        try {          final Template temp=freeMarkerConfig.getTemplate(freeMarkerTemplate);          checkTempDirectory(tempDirectory);          if (!tempDirectory.endsWith(File.separator)) {            tempDirectory=tempDirectory + File.separator;          }          UrlFriendlyIdGenerator gen=UrlFriendlyIdGenerator.getInstance();          String urlFriendlyId=gen.generate(xref.getIdentifier());          final Path newResultFile=Paths.get(tempDirectory + urlFriendlyId + ".html");          resultFiles.add(newResultFile);          writer=Files.newBufferedWriter(newResultFile,characterSet);          temp.process(model,writer);          writer.flush();        } catch (        TemplateException e) {          e.printStackTrace();        }catch (        IOException e) {          e.printStackTrace();        } finally {          if (writer != null) {            writer.close();          }        }      }    }  }  return 0;}  }
class C{  public int makePyramid(final Vector position,final Pattern block,int size,final boolean filled) throws MaxChangedBlocksException {  final int height=size;  for (int y=0; y <= height; ++y) {    size--;    for (int x=0; x <= size; ++x) {      for (int z=0; z <= size; ++z) {        if ((filled && (z <= size) && (x <= size)) || (z == size) || (x == size)) {          this.setBlock(position.add(x,y,z),block);          this.setBlock(position.add(-x,y,z),block);          this.setBlock(position.add(x,y,-z),block);          this.setBlock(position.add(-x,y,-z),block);        }      }    }  }  return changes;}  }
class C{  public static <K,V>ImmutableListMultimap<K,V> of(K k1,V v1,K k2,V v2,K k3,V v3){  ImmutableListMultimap.Builder<K,V> builder=ImmutableListMultimap.builder();  builder.put(k1,v1);  builder.put(k2,v2);  builder.put(k3,v3);  return builder.build();}  }
class C{  public SynchronizingStorageEngine(IStorageEngine<ByteArray,byte[]> localStorage,SyncManager syncManager,IDebugCounterService debugCounter,Scope scope){  super(localStorage,debugCounter);  this.localStorage=localStorage;  this.syncManager=syncManager;  this.scope=scope;}  }
class C{  public String toString(){  return this.token;}  }
class C{  public Constant findConstant(String constantName){  return constants.get(constantName);}  }
class C{  public UTMPoint(UTMPoint point){  this(point.northing,point.easting,point.zone_number,point.zone_letter);}  }
class C{  public static Object startJarVerification(){  ProviderList currentList=getProviderList();  ProviderList jarList=currentList.getJarList(jarVerificationProviders);  return beginThreadProviderList(jarList);}  }
class C{  public static boolean isTfGitRepository(@NotNull final GitRepository gitRepository){  return getTfGitRemote(gitRepository) != null;}  }
class C{  public void addTradePosition(TradePosition tradePosition){  int index=0;  for (  TradePosition currTradePosition : this.tradePositions) {    if (currTradePosition.getIdTradePosition().equals(tradePosition.getIdTradePosition())) {      index=this.tradePositions.indexOf(currTradePosition);      break;    }  }  if (index > 0)   this.tradePositions.remove(index);  this.tradePositions.add(tradePosition);}  }
class C{  @Override void initAnimation(){  if (!mInitialized) {    int numValues=mValues.length;    for (int i=0; i < numValues; ++i) {      mValues[i].setupSetterAndGetter(mTarget);    }    super.initAnimation();  }}  }
class C{  public void onBackKeyPressed(){  if (mViewPlayAgainMain.getVisibility() == View.VISIBLE) {    returnToBackClass();  } else {    if (mViewPauseButton.getVisibility() != View.GONE) {      pauseGame();    } else {      unPauseGame();    }  }}  }
class C{  @Override public String toString(){  if (count == 0) {    return "";  }  return new String(value,0,count);}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof AppInfo) {    AppInfo ai=(AppInfo)o;    return this.id.equals(ai.id);  }  return super.equals(o);}  }
class C{  public SageMsg(){}  }
class C{  public static String backQuoteChars(String string){  int index;  StringBuffer newStringBuffer;  char charsFind[]={'\\','\'','\t','\n','\r','"','%','\u001E'};  String charsReplace[]={"\\\\","\\'","\\t","\\n","\\r","\\\"","\\%","\\u001E"};  for (int i=0; i < charsFind.length; i++) {    if (string.indexOf(charsFind[i]) != -1) {      newStringBuffer=new StringBuffer();      while ((index=string.indexOf(charsFind[i])) != -1) {        if (index > 0) {          newStringBuffer.append(string.substring(0,index));        }        newStringBuffer.append(charsReplace[i]);        if ((index + 1) < string.length()) {          string=string.substring(index + 1);        } else {          string="";        }      }      newStringBuffer.append(string);      string=newStringBuffer.toString();    }  }  return string;}  }
class C{  public synchronized void removeFocusListener(FocusListener l){  if (source instanceof Component) {    ((Component)source).removeFocusListener(l);  }}  }
class C{  public static DecomposableMatchBuilder0<String> caseString(String s){  List<Matcher<Object>> matchers=new ArrayList<>();  matchers.add(eq(s));  return new DecomposableMatchBuilder0<>(matchers,new PrimitiveFieldExtractor<>(String.class));}  }
class C{  public static ReilInstruction createAnd(final Address address,final ReilOperand firstOperand,final ReilOperand secondOperand,final ReilOperand thirdOperand){  return new ReilInstruction(address,ReilMnemonics.AND,firstOperand,secondOperand,thirdOperand);}  }
class C{  public void flushBits() throws IOException {  if (bitField != -1) {    out.write(bitField);    bitField=-1;  }}  }
class C{  public boolean memberNameSet(){  return ((this.getMemberName() != null) && (!this.getMemberName().isEmpty()));}  }
class C{  void determineIntersecting(EventPoint p,DoubleNode<ILineSegment> left,DoubleNode<ILineSegment> right){  if (sweepPt == null) {    return;  }  if (left == null) {    left=dlstate.first();  } else {    left=successor(left);  }  while (left != right) {    ILineSegment ils=left.value();    if (ils != null) {      if (!ils.getStart().equals(p.point) && !ils.getEnd().equals(p.point)) {        p.addIntersectingLineSegment(ils);      }    }    left=successor(left);  }}  }
class C{  public boolean connectAudio(){  if (mService != null && isEnabled()) {    try {      return mService.connectAudio();    } catch (    RemoteException e) {      Log.e(TAG,e.toString());    }  } else {    Log.w(TAG,"Proxy not attached to service");    if (DBG)     Log.d(TAG,Log.getStackTraceString(new Throwable()));  }  return false;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node addressNode;  Node clonedNode;  NamedNodeMap attributes;  Node attributeNode;  String attributeName;  java.util.Collection result=new java.util.ArrayList();  java.util.Collection htmlExpected=new java.util.ArrayList();  htmlExpected.add("class");  htmlExpected.add("title");  java.util.Collection expected=new java.util.ArrayList();  expected.add("class");  expected.add("title");  expected.add("dir");  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  addressNode=elementList.item(1);  clonedNode=addressNode.cloneNode(false);  attributes=clonedNode.getAttributes();  for (int indexN10076=0; indexN10076 < attributes.getLength(); indexN10076++) {    attributeNode=(Node)attributes.item(indexN10076);    attributeName=attributeNode.getNodeName();    result.add(attributeName);  }  if (("text/html".equals(getContentType()))) {    assertEqualsIgnoreCase("nodeNames_html",htmlExpected,result);  } else {    assertEquals("nodeNames",expected,result);  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.BINARY_BITWISE_EXPRESSION__LHS:    return getLhs();case N4JSPackage.BINARY_BITWISE_EXPRESSION__OP:  return getOp();case N4JSPackage.BINARY_BITWISE_EXPRESSION__RHS:return getRhs();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public AddressbookEntry(String name,Set<String> categories){  this.name=StringUtil.toLowerCase(name);  this.categories=createCategoriesSet(categories);}  }
class C{  public Object read(InputNode node) throws Exception {  String name=node.getName();  String element=path.getElement(name);  Label label=elements.get(element);  Converter converter=label.getConverter(context);  return converter.read(node);}  }
class C{  public static void createAllFlashAuto(List<String> types){  List<String> vaIds4allflash=new ArrayList<String>();  List<String> vaIds4vmax=new ArrayList<String>();  List<String> vaIds4xio=new ArrayList<String>();  List<String> vaIds4unity=new ArrayList<String>();  JsonArray vpools=new JsonArray();  JsonObject dataObject=getCookieAsJson(GUIDE_DATA);  if (dataObject != null) {    JsonArray varrays=dataObject.getAsJsonArray(VARRAYS);    if (varrays != null) {      for (      Object varray : varrays) {        JsonObject jsonvarray=(JsonObject)varray;        String varrayid=jsonvarray.get("id").getAsString();        VirtualArrayRestRep varrayRest=VirtualArrayUtils.getVirtualArray(varrayid);        if (varrayRest != null) {          Map<String,Set<String>> attributes=VirtualArrayUtils.getAvailableAttributes(uris(varrayid));          Set<String> system_type=attributes.get(ATTRIBUTE_SYSTEM_TYPES);          if (system_type != null && !system_type.isEmpty()) {            if (system_type.size() > 1) {              vaIds4allflash.add(varrayid);            } else {              for (              String vasystemtype : system_type) {                if (StringUtils.equals(UNITY,vasystemtype)) {                  vaIds4unity.add(varrayid);                }                if (StringUtils.equals(VMAX,vasystemtype)) {                  vaIds4vmax.add(varrayid);                }                if (StringUtils.equals(XTREMIO,vasystemtype)) {                  vaIds4xio.add(varrayid);                }              }            }          } else {            vaIds4allflash.add(varrayid);          }        }      }    }  }  if (!vaIds4allflash.isEmpty()) {    Map<String,String> virtualpoolAllFlashMap=allFlashVirtualPool();    String vpid=virtualpoolAllFlashMap.get(VP_ALL_FLASH);    if (vpid != null) {      BlockVirtualPoolRestRep blockvpool=VirtualPoolUtils.getBlockVirtualPool(vpid);      List<RelatedResourceRep> virtualarrays=blockvpool.getVirtualArrays();      for (      String vaid : vaIds4allflash) {        RelatedResourceRep newVaId=new RelatedResourceRep();        newVaId.setId(URI.create(vaid));        virtualarrays.add(newVaId);      }      blockvpool.setVirtualArrays(virtualarrays);      updateAutoVirtualPool(vpid,blockvpool,vpools);    } else {      createBaseVPool(VP_ALL_FLASH,StorageSystemTypes.NONE,vaIds4allflash,Messages.get("gettingStarted.vpool.allflash.desc"),vpools);    }  }  if (!vaIds4vmax.isEmpty()) {    Map<String,String> virtualpoolAllFlashMap=allFlashVirtualPool();    boolean isCompression=isCompressionEnable(vaIds4vmax);    String vpid=virtualpoolAllFlashMap.get(VP_VMAX_DIAMOND);    if (vpid != null && !isCompression) {      BlockVirtualPoolRestRep blockvpool=VirtualPoolUtils.getBlockVirtualPool(vpid);      List<RelatedResourceRep> virtualarrays=blockvpool.getVirtualArrays();      for (      String vaid : vaIds4vmax) {        RelatedResourceRep newVaId=new RelatedResourceRep();        newVaId.setId(URI.create(vaid));        virtualarrays.add(newVaId);      }      blockvpool.setVirtualArrays(virtualarrays);      updateAutoVirtualPool(vpid,blockvpool,vpools);    } else {      vpid=virtualpoolAllFlashMap.get(VP_VMAX_DIAMOND_COMPRESSED);      if (vpid != null && isCompression) {        BlockVirtualPoolRestRep blockvpool=VirtualPoolUtils.getBlockVirtualPool(vpid);        List<RelatedResourceRep> virtualarrays=blockvpool.getVirtualArrays();        for (        String vaid : vaIds4vmax) {          RelatedResourceRep newVaId=new RelatedResourceRep();          newVaId.setId(URI.create(vaid));          virtualarrays.add(newVaId);        }        blockvpool.setVirtualArrays(virtualarrays);        updateAutoVirtualPool(vpid,blockvpool,vpools);      } else {        createBaseVPool(VP_VMAX_DIAMOND,StorageSystemTypes.VMAX,vaIds4vmax,Messages.get("gettingStarted.vpool.vmax.desc"),vpools);      }    }  }  if (!vaIds4xio.isEmpty()) {    Map<String,String> virtualpoolAllFlashMap=allFlashVirtualPool();    String vpid=virtualpoolAllFlashMap.get(VP_XIO_DIAMOND);    if (vpid != null) {      BlockVirtualPoolRestRep blockvpool=VirtualPoolUtils.getBlockVirtualPool(vpid);      List<RelatedResourceRep> virtualarrays=blockvpool.getVirtualArrays();      for (      String vaid : vaIds4xio) {        RelatedResourceRep newVaId=new RelatedResourceRep();        newVaId.setId(URI.create(vaid));        virtualarrays.add(newVaId);      }      blockvpool.setVirtualArrays(virtualarrays);      updateAutoVirtualPool(vpid,blockvpool,vpools);    } else {      createBaseVPool(VP_XIO_DIAMOND,StorageSystemTypes.XTREMIO,vaIds4xio,Messages.get("gettingStarted.vpool.xio.desc"),vpools);    }  }  if (!vaIds4unity.isEmpty()) {    Map<String,String> virtualpoolAllFlashMap=allFlashVirtualPool();    String vpid=virtualpoolAllFlashMap.get(VP_UNITY_DIAMOND);    if (vpid != null) {      BlockVirtualPoolRestRep blockvpool=VirtualPoolUtils.getBlockVirtualPool(vpid);      List<RelatedResourceRep> virtualarrays=blockvpool.getVirtualArrays();      for (      String vaid : vaIds4unity) {        RelatedResourceRep newVaId=new RelatedResourceRep();        newVaId.setId(URI.create(vaid));        virtualarrays.add(newVaId);      }      blockvpool.setVirtualArrays(virtualarrays);      updateAutoVirtualPool(vpid,blockvpool,vpools);    } else {      createBaseVPool(VP_UNITY_DIAMOND,StorageSystemTypes.UNITY,vaIds4unity,Messages.get("gettingStarted.vpool.unity.desc"),vpools);    }  }  dataObject.add(VPOOL_COOKIES,vpools);  saveJsonAsCookie(GUIDE_DATA,dataObject);  list();}  }
class C{  public static void main(String args[]) throws Exception {  if (args.length != 2) {    System.err.println("Usage: OAuth2Authenticator <email> <oauthToken>");    return;  }  String email=args[0];  String oauthToken=args[1];  initialize();  IMAPStore imapStore=connectToImap("imap.gmail.com",993,email,oauthToken,true);  System.out.println("Successfully authenticated to IMAP.\n");  SMTPTransport smtpTransport=connectToSmtp("smtp.gmail.com",587,email,oauthToken,true);  System.out.println("Successfully authenticated to SMTP.");}  }
class C{  private void tryToAddDataArray(){  if (traceData.size() == traceData.getBufferSize() && plotMode == PlotMode.N_STOP)   return;switch (updateMode) {case X_OR_Y:    if ((chronological && currentYDataArrayChanged) || (!chronological && (currentXDataArrayChanged || currentYDataArrayChanged)))     addDataArray();  break;case X_AND_Y:if ((chronological && currentYDataArrayChanged) || (!chronological && (currentXDataArrayChanged && currentYDataArrayChanged))) addDataArray();break;case X:if ((chronological && currentYDataArrayChanged) || (!chronological && currentXDataArrayChanged)) addDataArray();break;case Y:if (currentYDataArrayChanged) addDataArray();break;case TRIGGER:default :break;}}  }
class C{  public KeyedValues2DItemKey(R rowKey,C columnKey){  ParamChecks.nullNotPermitted(rowKey,"rowKey");  ParamChecks.nullNotPermitted(columnKey,"columnKey");  this.rowKey=rowKey;  this.columnKey=columnKey;}  }
class C{  @Override protected EClass eStaticClass(){  return TypesPackage.Literals.COMPLEX_TYPE;}  }
class C{  public static void createTablesAndIndexes(Schema schema,KeyValueService kvs){  schema.validate();  createTables(kvs,schema.getTableDefinitions());  createIndices(kvs,schema.getIndexDefinitions());}  }
class C{  Node(Object item,boolean isData){  UNSAFE.putObject(this,itemOffset,item);  this.isData=isData;}  }
class C{  @Override public String toString(){  StringBuffer sb=new StringBuffer(bits.length / 2);  int bitCount=0;  sb.append('{');  boolean comma=false;  for (int i=0; i < bits.length; i++) {    if (bits[i] == 0) {      bitCount+=ELM_SIZE;      continue;    }    for (int j=0; j < ELM_SIZE; j++) {      if (((bits[i] & (TWO_N_ARRAY[j])) != 0)) {        if (comma) {          sb.append(", ");        }        sb.append(bitCount);        comma=true;      }      bitCount++;    }  }  sb.append('}');  return sb.toString();}  }
class C{  public li addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:51.882 -0500",hash_original_method="3B858FD9FEE5DA9FA545213DB80889DF",hash_generated_method="658B99F54705E16774AE803B8F2B680D") public DialogTimeoutEvent(Object source,Dialog dialog,Reason reason){  super(source);  m_dialog=dialog;  m_reason=reason;}  }
class C{  public ListValue(char s){  separator=s;}  }
class C{  public void includeUsageWarnings(boolean usageWarnings){  this.usageWarnings=usageWarnings;}  }
class C{  public void testUnpackMultipleTuplesMultipleBags() throws InvalidAdviceException {  BaggageAPIForTest baggage=new BaggageAPIForTest();  baggage.put("bag1",new Object[][]{{"b1_t1_v1","b1_t1_v2"},{"b1_t2_v1","b1_t2_v2"},{"b1_t3_v1","b1_t3_v2"}});  baggage.put("bag2",new Object[][]{{"b2_t1_v1","b2_t1_v2"},{"b2_t2_v1","b2_t2_v2"},{"b2_t3_v1","b2_t3_v2"}});  baggage.put("bag3",new Object[][]{{"b3_t1_v1","b3_t1_v2"},{"b3_t2_v1","b3_t2_v2"},{"b3_t3_v1","b3_t3_v2"}});  EmitAPIForTest results=new EmitAPIForTest();  Advice advice=AdviceTestUtils.newAdvice().observe("a","b").unpack("bag1","c","d").unpack("bag2","e","f").unpack("bag3","g","h").emit("test1","a").build(baggage,results);  assertTrue("Expect nothing emitted yet",results.emitted.size() == 0);  advice.advise("vva","vvb");  advice.advise("vva","vvc");  advice.advise("vva","vve");  int expected=3 * 3 * 3* 3;  for (int i=0; i < expected; i++) {    results.expectTuple("vva");  }  results.check();  assertTrue("Expect " + expected + " output tuple emitted",results.emitted.size() == expected);}  }
class C{  public void flush() throws IOException {  writer.flush();}  }
class C{  public Heap(){}  }
class C{  public static double P_FmacroAvgD(int Y[][],int Ypred[][]){  int N=Y.length;  double F1_macro_D=0.0;  for (int i=0; i < N; i++) {    if (allMissing(Y[i])) {      N--;      continue;    }    F1_macro_D+=F1(Y[i],Ypred[i]);  }  return F1_macro_D / (double)N;}  }
class C{  public ConfigurableOccupancyAnalyzer(Set<Id<TransitLine>> calibratedLines,int timeBinSize_s){  this.calibratedLines=calibratedLines;  delegOccuAnalyzer=new OccupancyAnalyzer(timeBinSize_s,maxTime);  log.info("time bin size set to: " + timeBinSize_s);  if (this.calibratedLines.size() == 0) {    log.warn("number of calibrated lines= 0!");  }}  }
class C{  protected void reset(int linksSize,int varArraySize){  _frameTop=0;  _linksTop=0;  if (_links == null) {    _links=new int[linksSize];  }  _links[_linksTop++]=0;  _stackFrames=new XObject[varArraySize];}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(VALUE).setRequired(true);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean match(String text){  if (text == null) {    return false;  }  return match(text,0,text.length());}  }
class C{  public CrowdingDistanceFitnessEvaluator(){  super();}  }
class C{  public LogRecord(Level level,String msg){  level.getClass();  this.level=level;  message=msg;  sequenceNumber=globalSequenceNumber.getAndIncrement();  threadID=defaultThreadID();  millis=System.currentTimeMillis();  needToInferCaller=true;}  }
class C{  @Override public boolean equals(Object o){  return (compareTo(o) == 0);}  }
class C{  public boolean isSetPacket(){  return this.packet != null;}  }
class C{  public void showLoading(List<Integer> skipIds){  switchState(LOADING,null,null,null,null,null,skipIds);}  }
class C{  public PointsToSet reachingObjects(Local l,SootField f){  return reachingObjects(f);}  }
class C{  public LuaError(Throwable cause){  super("vm error: " + cause);  this.cause=cause;  this.level=1;}  }
class C{  public W3CPoint(){}  }
class C{  public static Function<String> jsonReplace(Object json,Object... pathValuePairs){  return new JSONArgumentFunction<>("json_replace",json,pathValuePairs);}  }
class C{  public static int bytesToInt(byte[] arr){  return (arr[0] << 24) | ((arr[1] & 0xff) << 16) | ((arr[2] & 0xff) << 8)| (arr[3] & 0xff);}  }
class C{  public String admitAndOperate(Patient p){  return operate(p);}  }
class C{  static void messageBox(final String message){  LoneOptionDialog.showMessageDialog(message,DIALOG_TITLE);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\tThe number of steps in the learning rate curve.\n" + "\t(default 10)","X",1,"-X <num steps>"));  newVector.addElement(new Option("\tThe full class name of a ResultProducer.\n" + "\teg: weka.experiment.CrossValidationResultProducer","W",1,"-W <class name>"));  if ((m_ResultProducer != null) && (m_ResultProducer instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to result producer " + m_ResultProducer.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_ResultProducer).listOptions()));  }  return newVector.elements();}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"neg");  if (instruction.getOperands().size() != 1) {    throw new InternalTranslationException("Error: Argument instruction is not an neg instruction (invalid number of operands)");  }  final long baseOffset=instruction.getAddress().toLong() * 0x100;  long offset=baseOffset;  final IOperandTree operand=instruction.getOperands().get(0);  final TranslationResult result=Helpers.translateOperand(environment,offset,operand,true);  instructions.addAll(result.getInstructions());  offset=baseOffset + instructions.size();  final String operandRegister=result.getRegister();  final OperandSize size=result.getSize();  final OperandSize resultSize=TranslationHelpers.getNextSize(size);  final String msbMask=String.valueOf(TranslationHelpers.getMsbMask(size));  final String truncateMask=String.valueOf(TranslationHelpers.getAllBitsMask(size));  final String shiftValue=String.valueOf(TranslationHelpers.getShiftMsbLsbMask(size));  final String targetIsZero=environment.getNextVariableString();  final String msbTarget=environment.getNextVariableString();  final String negResult=environment.getNextVariableString();  final String msbResult=environment.getNextVariableString();  final String tempOf=environment.getNextVariableString();  final String truncatedResult=environment.getNextVariableString();  instructions.add(ReilHelpers.createBisz(offset,size,operandRegister,OperandSize.BYTE,targetIsZero));  instructions.add(ReilHelpers.createBisz(offset + 1,OperandSize.BYTE,targetIsZero,OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 2,size,operandRegister,size,msbMask,size,msbTarget));  instructions.add(ReilHelpers.createSub(offset + 3,size,"0",size,operandRegister,resultSize,negResult));  instructions.add(ReilHelpers.createAnd(offset + 4,resultSize,negResult,size,msbMask,size,msbResult));  instructions.add(ReilHelpers.createBsh(offset + 5,size,msbResult,size,shiftValue,OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 6,size,msbTarget,size,msbResult,size,tempOf));  instructions.add(ReilHelpers.createBsh(offset + 7,size,tempOf,size,shiftValue,OperandSize.BYTE,Helpers.OVERFLOW_FLAG));  instructions.add(ReilHelpers.createAnd(offset + 8,resultSize,negResult,size,truncateMask,size,truncatedResult));  instructions.add(ReilHelpers.createBisz(offset + 9,size,truncatedResult,OperandSize.BYTE,Helpers.ZERO_FLAG));  Helpers.writeBack(environment,offset + 10,operand,truncatedResult,size,result.getAddress(),result.getType(),instructions);}  }
class C{  public RepublishRequest clone(){  RepublishRequest result=new RepublishRequest();  result.RequestHeader=RequestHeader == null ? null : RequestHeader.clone();  result.SubscriptionId=SubscriptionId;  result.RetransmitSequenceNumber=RetransmitSequenceNumber;  return result;}  }
class C{  public void endLine(){  if (coordList == null) {    return;  }  if (ignoreInvalidLines && coordList.size() < 2) {    coordList=null;    return;  }  Coordinate[] rawPts=coordList.toCoordinateArray();  Coordinate[] pts=rawPts;  if (fixInvalidLines)   pts=validCoordinateSequence(rawPts);  coordList=null;  LineString line=null;  try {    line=geomFact.createLineString(pts);  } catch (  IllegalArgumentException ex) {    if (!ignoreInvalidLines)     throw ex;  }  if (line != null)   lines.add(line);}  }
class C{  public static void main(String[] args){  double s1=3600.;  double s2=93.;  double s3=7225.;  Assert.assertEquals(60.,convertSeconds2Minutes(s1));  Assert.assertEquals(1.33,convertSeconds2Minutes(s2));  Assert.assertEquals(120.25,convertSeconds2Minutes(s3));}  }
class C{  public final int elementAt(int offset){  return ((Integer)ptVector.get(offset)).intValue();}  }
class C{  public UseSupertypeDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.USE_SUPER_TYPE,project,description,comment,arguments,flags);  fInstanceof=JavaRefactoringDescriptorUtil.getBoolean(arguments,ATTRIBUTE_INSTANCEOF,fInstanceof);  fSubType=(IType)JavaRefactoringDescriptorUtil.getJavaElement(arguments,ATTRIBUTE_INPUT,project);  fSupertype=(IType)JavaRefactoringDescriptorUtil.getJavaElement(arguments,JavaRefactoringDescriptorUtil.getAttributeName(ATTRIBUTE_ELEMENT,1),project);}  }
class C{  public ExecutionTargetException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @Ignore("TODO: test is disabled because of #52190") @Test public void testReplicatedSerialPropagation_withoutRemoteLocator() throws Exception {  Integer lnPort=(Integer)vm0.invoke(null);  createCacheInVMs(lnPort,vm4,vm5,vm6,vm7);  vm4.invoke(null);  vm5.invoke(null);  startSenderInVMs("ln",vm4,vm5);  vm4.invoke(createReplicatedRegionRunnable());  vm5.invoke(createReplicatedRegionRunnable());  vm6.invoke(createReplicatedRegionRunnable());  vm7.invoke(createReplicatedRegionRunnable());  vm4.invoke(null);  Integer nyPort=(Integer)vm1.invoke(null);  createCacheInVMs(nyPort,vm2,vm3);  vm2.invoke(null);  vm3.invoke(null);  vm2.invoke(null);  vm3.invoke(null);  vm4.invoke(null);  vm2.invoke(null);  vm3.invoke(null);}  }
class C{  private static TemplateVariableResolver[] createResolvers(IConfigurationElement[] extensions,String contextTypeId){  List resolvers=new ArrayList();  for (int i=0; i < extensions.length; i++) {    if (extensions[i].getName().equals(RESOLVER)) {      String declaredId=extensions[i].getAttribute(CONTEXT_TYPE_ID);      if (contextTypeId.equals(declaredId)) {        try {          TemplateVariableResolver resolver=createResolver(extensions[i]);          if (resolver != null)           resolvers.add(resolver);        } catch (        CoreException e) {          JavaPlugin.log(e);        }      }    }  }  return (TemplateVariableResolver[])resolvers.toArray(new TemplateVariableResolver[resolvers.size()]);}  }
class C{  public void load(){}  }
class C{  private void init(Context context){  this.context=context;  this.mAlpha=255;  this.isChecked=false;  this.mPaint=new Paint();  this.mPaint.setColor(Color.WHITE);  float density=getResources().getDisplayMetrics().density;  this.mAnimatedVelocity=(int)(0.5F + 350.0F * density);}  }
class C{  ItemInputStream(){  findSeparator();}  }
class C{  public SkyGradientLayer(){  this.setPickEnabled(false);}  }
class C{  public void addHandler(ExceptionHandler handler){  if (!handlers.contains(handler))   handlers.add(handler);}  }
class C{  public TimeLimitExceededException(){  super();}  }
class C{  protected void sequence_AnnotatedScriptElement_ImportClause_ImportDeclaration_ImportDeclarationImpl_ImportSpecifiersExceptDefault(ISerializationContext context,ImportDeclaration semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  @Override public void mousePressed(MouseEvent e){synchronized (mouseLock) {    mouseX=userX(e.getX());    mouseY=userY(e.getY());    mousePressed=true;  }  if (e.getButton() == MouseEvent.BUTTON1) {    for (    DrawListener listener : listeners)     listener.mousePressed(userX(e.getX()),userY(e.getY()));  }}  }
class C{  public boolean execute(final String sql,final int autoGeneratedKeys) throws SQLException {  return executeInternal(sql,fetchSize);}  }
class C{  public void reset(){  for (int i=0; i < index.size(); i++)   index.set(i,i);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.341 -0400",hash_original_method="75F54BDE1C47E9678EFB232794384C6F",hash_generated_method="862BEA436CADF88DE9A7A340F87E1725") @Override public long skip(long n){  if (n < 0) {    throw new IllegalArgumentException("Number of characters to skip is less than zero: " + n);  }  if (idx >= charSequence.length()) {    return -1;  }  int dest=(int)Math.min(charSequence.length(),idx + n);  int count=dest - idx;  idx=dest;  return count;}  }
class C{  public static void reIndexLeaves(Tree t){  reIndexLeaves(t,1);}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public boolean containsValue(Object value){  value=maskNull(value);  for (  Object val : vals)   if (value.equals(val))   return true;  return false;}  }
class C{  @Override public void onReceivedHttpAuthRequest(WebView view,HttpAuthHandler handler,String host,String realm){  handler.proceed("user","passwd");}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFEFuncBElement(prefix,(AbstractDocument)doc);}  }
class C{  public TestMultithreadedAccess(String name){  super(name);}  }
class C{  @Deprecated public Character next(){  return nextChar();}  }
class C{  private static int NewObjectArray(JNIEnvironment env,int length,int classJREF,int initElementJREF){  if (traceJNI)   VM.sysWrite("JNI called: NewObjectArray  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object initElement=env.getJNIRef(initElementJREF);    Class<?> cls=(Class<?>)env.getJNIRef(classJREF);    if (cls == null) {      throw new NullPointerException();    }    if (length < 0) {      throw new NegativeArraySizeException();    }    RVMArray arrayType=java.lang.JikesRVMSupport.getTypeForClass(cls).getArrayTypeForElementType();    if (!arrayType.isInitialized()) {      arrayType.resolve();      arrayType.instantiate();      arrayType.initialize();    }    Object[] newArray=(Object[])RuntimeEntrypoints.resolvedNewArray(length,arrayType);    if (initElement != null) {      for (int i=0; i < length; i++) {        newArray[i]=initElement;      }    }    return env.pushJNIRef(newArray);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public static boolean fileCopy(String src,String dest){  Logger.getInstance().logVerbose("FileCopy","From " + src + " to "+ dest);  boolean success=false;  InputStream inputStream=null;  OutputStream outputStream=null;  try {    inputStream=new FileInputStream(src);    outputStream=new FileOutputStream(dest);    success=fileCopy(inputStream,outputStream);  } catch (  IOException ex) {    Logger.getInstance().logError("FileCopy","Failed: " + ex.toString());  }  try {    if (inputStream != null)     inputStream.close();    if (outputStream != null)     outputStream.close();  } catch (  IOException ex) {    Logger.getInstance().logError("FileCopy","Failed: " + ex.toString());  }  return success;}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{quota_class_name}") @CheckPermission(roles={Role.SYSTEM_MONITOR,Role.TENANT_ADMIN},acls={ACL.ANY}) public Response updateQuotaClass(@PathParam("tenant_id") String openstackTenantId,CinderQuotaClassDetails quotaClassUpdates,@Context HttpHeaders header){  String quotaClassName=quotaClassUpdates.quota_class_set.get(CinderConstants.CLASS_NAME_KEY);  _log.debug("quotaClassUpdates.quota_class_set is {}",quotaClassUpdates.quota_class_set);  boolean bVpoolQuotaUpdate=isVpoolQuotaUpdate(quotaClassUpdates.quota_class_set);  String vpoolName=null;  VirtualPool objVpool=null;  if (bVpoolQuotaUpdate) {    vpoolName=getVpoolName(quotaClassUpdates.quota_class_set);    _log.debug("Vpool for which quota is being updated is {}",vpoolName);    objVpool=getCinderHelper().getVpool(vpoolName);    if (objVpool == null) {      _log.error("vpool with the given name doesnt exist");      throw APIException.badRequests.parameterIsNotValid(vpoolName);    }  }  List<URI> quotaClasses=_dbClient.queryByType(QuotaClassOfCinder.class,true);  CinderQuotaClassDetails resp=new CinderQuotaClassDetails();  _log.debug("quotaClassName is {}",quotaClassName);  for (  URI quota : quotaClasses) {    QuotaClassOfCinder quotaClass=_dbClient.queryObject(QuotaClassOfCinder.class,quota);    if (quotaClass.getQuotaClass().equals(quotaClassName)) {      _log.debug("quotaClass.getLimits() is {}",quotaClass.getLimits());      HashMap<String,String> qMap=(HashMap<String,String>)getQuotaHelper().convertKeyValPairsStringToMap(quotaClass.getLimits());      qMap.putAll(quotaClassUpdates.quota_class_set);      qMap.remove("class_name");      quotaClass.setLimits(getQuotaHelper().convertMapToKeyValPairsString(qMap));      _dbClient.updateObject(quotaClass);      qMap=getQuotaHelper().populateVolumeTypeDefaultsForQuotaClass(qMap,openstackTenantId,null);      resp.quota_class_set.putAll(qMap);      _log.debug("resp.quota_class_set is {}",resp.quota_class_set.toString());      return getQuotaClassDetailFormat(header,resp);    } else {      continue;    }  }  QuotaClassOfCinder objQuotaClass=new QuotaClassOfCinder();  objQuotaClass.setQuotaClass(quotaClassName);  HashMap<String,String> qMap=new HashMap<String,String>();  qMap.putAll(getQuotaHelper().convertKeyValPairsStringToMap(getQuotaHelper().createDefaultLimitsInStrFormat(null)));  qMap.putAll(quotaClassUpdates.quota_class_set);  qMap.remove(CinderConstants.CLASS_NAME_KEY);  objQuotaClass.setLimits(getQuotaHelper().convertMapToKeyValPairsString(qMap));  objQuotaClass.setId(URI.create(UUID.randomUUID().toString()));  _dbClient.createObject(objQuotaClass);  resp.quota_class_set.putAll(qMap);  return getQuotaClassDetailFormat(header,resp);}  }
class C{  protected void run(WorkerThread.Paceable paceable,MessageListener listener){  Log.logger.info("START");  while (!done && !shutdown) {    try {      status=sCONNECTING;      buildJMSResources();      status=sRUNNING;      Log.logger.fine("Entering client loop");      if (listener != null) {        startTime=System.currentTimeMillis();        messageConsumer.setMessageListener(listener);        waitForShutdownSignal();      } else {        pace(paceable);      }      done=true;    } catch (    JMSException je) {      if (ignoreExceptions) {        Log.logger.fine("disconnected?");      } else {        handleException(je);      }    }catch (    Throwable e) {      handleException(e);    } finally {      if (done) {        status=(status & sERROR) | sENDING;        if (endTime == 0) {          endTime=System.currentTimeMillis();        }        destroyJMSResources(false);        Log.logger.info("STOP");        status=(status & sERROR) | sENDED;      }    }  }}  }
class C{  public static Type appliedType(TypeDeclaration declaration,Type... typeArguments){  if (declaration == null)   return null;  return declaration.appliedType(null,asList(typeArguments));}  }
class C{  public FileDescriptor(){}  }
class C{  public static ServiceManagerProvider current(){  ServiceManagerProvider systemProvider=_systemProvider;  if (systemProvider != null) {    return systemProvider;  }  Thread thread=Thread.currentThread();  ClassLoader loader=thread.getContextClassLoader();  return getProvider(loader);}  }
class C{  public ProblemsLabelDecorator(){  this(null);  fUseNewRegistry=true;}  }
class C{  private OffsetIndex createIndex(SegmentDescriptor descriptor){  return new DelegatingOffsetIndex(HeapBuffer.allocate(Math.min(DEFAULT_BUFFER_SIZE,descriptor.maxEntries()),OffsetIndex.size(descriptor.maxEntries())));}  }
class C{  private ExprCfg parseCmpExpr(ExprToken code,ExprCfg left,ExprCfg right){  while (true) {    ExprToken token=scanToken();switch (token) {case EQ:case NE:case GT:case LT:case LE:case GE:case MATCHES:      left=new ExprCfgCmp(left,right);    code=token;  right=parseTerm();break;default :unreadToken();return new ExprCfgCmp(left,right);}}}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  protected Writer write(Writer writer){  return this.write(writer,-1,0);}  }
class C{  protected void expect(int t) throws SyntaxError, IOException {  if (token != t) {switch (t) {case IDENT:      env.error(scanner.prevPos,"identifier.expected");    break;default :  env.error(scanner.prevPos,"token.expected",opNames[t]);break;}throw new SyntaxError();}scan();}  }
class C{  private Item newString(final String value){  key2.set(STR,value,null,null);  Item result=get(key2);  if (result == null) {    pool.put12(STR,newUTF8(value));    result=new Item(index++,key2);    put(result);  }  return result;}  }
class C{  public static <A>MonoTSeq<A> fromAnyM(final AnyMSeq<A> anyM){  return of(anyM.map(null));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.MULTIPLICITY___BOUND_1:    return getBound_1();case UmplePackage.MULTIPLICITY___LOWER_BOUND_1:  return getLowerBound_1();case UmplePackage.MULTIPLICITY___UPPER_BOUND_1:return getUpperBound_1();case UmplePackage.MULTIPLICITY___BOUND_INT:return getBound_int();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ExclusiveLockManager(boolean trackLocks){  this.lock=new LockManager(trackLocks || Properties.lockTrackingEnabled());}  }
class C{  public void save(Context context){  if (_id == null) {    _id=QuantumFlux.insertAndReturn(this)._id;  } else {    QuantumFlux.update(this);  }}  }
class C{  public V cloneValue(V v){  return v;}  }
class C{  private Stmt mainMethodHeader(StmtBody body){  Local arg=Jimple.v().newLocal("_$l" + localID++,ArrayType.v(RefType.v("java.lang.String"),1));  body.getLocals().add(arg);  body.getUnits().add(Jimple.v().newIdentityStmt(arg,Jimple.v().newParameterRef(ArrayType.v(RefType.v("java.lang.String"),1),0)));  NopStmt beginCalls=Jimple.v().newNopStmt();  body.getUnits().add(beginCalls);  return beginCalls;}  }
class C{  private void create(EnumerationContext ctx){  logInfo("Creating Local Compute States");  AtomicInteger size=new AtomicInteger(ctx.virtualMachines.size());  logInfo("%s compute description with states to be created",size.toString());  ctx.virtualMachines.values().forEach(null);}  }
class C{  public Gas registerFluid(){  if (fluid == null) {    if (FluidRegistry.getFluid(getName()) == null) {      fluid=new Fluid(getName()).setGaseous(true);      FluidRegistry.registerFluid(fluid);    } else {      fluid=FluidRegistry.getFluid(getName());    }  }  return this;}  }
class C{  public JSONObject optJSONObject(String key){  Object object=this.opt(key);  return object instanceof JSONObject ? (JSONObject)object : null;}  }
class C{  private int nextCode(){  int fillbits=bitspercode;  int value=0;  if (bytepos >= buf.limit() - 1) {    return -1;  }  while (fillbits > 0) {    int nextbits=buf.get(bytepos);    int bitsfromhere=8 - bitpos;    if (bitsfromhere > fillbits) {      bitsfromhere=fillbits;    }    value|=((nextbits >> (8 - bitpos - bitsfromhere)) & (0xff >> (8 - bitsfromhere))) << (fillbits - bitsfromhere);    fillbits-=bitsfromhere;    bitpos+=bitsfromhere;    if (bitpos >= 8) {      bitpos=0;      bytepos++;    }  }  return value;}  }
class C{  void closeDatabaseNow(){  if (mydb != null) {    mydb.close();    mydb=null;  }}  }
class C{  public void updateProfile(){  DataStyle.switchTo(prefs.getMapProfile());  DataStyle.updateStrokes(strokeWidth(viewBox.getWidth()));  DataStyle.setAntiAliasing(prefs.isAntiAliasingEnabled());  for (  Way w : getDelegator().getCurrentStorage().getWays()) {    w.setFeatureProfile(null);  }}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  public boolean hasWildcard(){  return WILDCARD.equals(type) || WILDCARD.equals(subtype);}  }
class C{  public void refund(String sku){}  }
class C{  public void add(int id,String name,int parentId,int parentDocId,int fileId,String fileExt,int sortOrder,int annId) throws Exception {  FolderTokenDocument doc;  doc=new FolderTokenDocument(id,name,parentId,parentDocId,fileId,fileExt,sortOrder,annId);  super.add(doc);}  }
class C{  private void calculateNewPath0(){  navMeshPointPath.calculateForGraphPath(navMeshGraphPath);  pathToRender.clear();  pathToRender.addAll(navMeshPointPath.getVectors());  centerOfMassPath.clear();  for (  Vector3 v : navMeshPointPath) {    centerOfMassPath.add(new Vector3(v).add(0,steerableBody.halfExtents.y,0));  }  linePath.createPath(centerOfMassPath);  followPathSB.setTimeToTarget(steerableBody.steerSettings.getTimeToTarget()).setArrivalTolerance(steerableBody.steerSettings.getArrivalTolerance()).setDecelerationRadius(steerableBody.steerSettings.getDecelerationRadius()).setPredictionTime(steerableBody.steerSettings.getPredictionTime()).setPathOffset(steerableBody.steerSettings.getPathOffset());  steerableBody.setZeroLinearSpeedThreshold(steerableBody.steerSettings.getZeroLinearSpeedThreshold());  currentSegmentIndex=-1;  collisionAvoidanceSB.setEnabled(true);  deadlockDetection=false;  steerableBody.steerer=this;}  }
class C{  public Graph search(){  Graph graph=getResultGraph();  this.logger.log("graph","\nReturning this graph: " + graph);  return graph;}  }
class C{  public DERSequence(ASN1Encodable[] array){  super(array);}  }
class C{  @Override public boolean canFinish(){  return canFinish;}  }
class C{  public LocalDate toLocalDate(){  return new LocalDate(getYear(),getMonthOfYear(),getDayOfMonth(),getChronology());}  }
class C{  public InputSource(InputStream byteStream){  setByteStream(byteStream);}  }
class C{  @Override public void removeSubWindow(View subviewContainer){  mContentView.removeView(subviewContainer);  mUiController.endActionMode();}  }
class C{  public Double remove(Long key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  @Override public int compareTo(final yacyVersion obj){  return compare(this,obj);}  }
class C{  public void stop(){  final String methodName="stop";synchronized (lifecycle) {    if (running) {      log.fine(CLASS_NAME,methodName,"700");      running=false;      if (!Thread.currentThread().equals(callbackThread)) {        try {synchronized (workAvailable) {            log.fine(CLASS_NAME,methodName,"701");            workAvailable.notifyAll();          }          callbackThread.join();        } catch (        InterruptedException ex) {        }      }    }    callbackThread=null;    log.fine(CLASS_NAME,methodName,"703");  }}  }
class C{  public static InjectionProvider createInstance(ExternalContext extContext){  String providerClass=findProviderClass(extContext);  InjectionProvider provider=getProviderInstance(providerClass,extContext);  if (!NoopInjectionProvider.class.equals(provider.getClass()) && !WebContainerInjectionProvider.class.equals(provider.getClass())) {    if (LOGGER.isLoggable(Level.FINE)) {      LOGGER.log(Level.FINE,"jsf.spi.injection.provider_configured",new Object[]{provider.getClass().getName()});    }    return provider;  } else   if (WebContainerInjectionProvider.class.equals(provider.getClass())) {    if (LOGGER.isLoggable(Level.INFO)) {      LOGGER.info("jsf.core.injection.provider_generic_web_configured");    }    return provider;  } else {    if (LOGGER.isLoggable(Level.WARNING)) {      LOGGER.log(Level.WARNING,"jsf.spi.injection.no_injection");    }    return provider;  }}  }
class C{  public AbstractDataWriter(String mimeType){  settings=new HashMap<String,Object>();  defaults=new HashMap<String,Object>();  this.mimeType=mimeType;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void renameVolume(DbClient dbClient,StorageSystem storageSystem,Volume volume,String name){  try {    CIMObjectPath volumePath=_cimPath.getBlockObjectPath(storageSystem,volume);    _log.info(String.format("Attempting to modify volume %s to %s",volumePath.toString(),name));    CIMInstance toUpdate=new CIMInstance(volumePath,new CIMProperty[]{new CIMPropertyFactory().string(SmisConstants.CP_ELEMENT_NAME,name)});    modifyInstance(storageSystem,toUpdate,SmisConstants.PS_ELEMENT_NAME);    volume.setDeviceLabel(name);    dbClient.updateAndReindexObject(volume);    _log.info(String.format("Volume name has been modified to %s",name));  } catch (  WBEMException e) {    _log.error("Encountered an error while trying to set the volume name",e);  }catch (  DatabaseException e) {    _log.error("Encountered an error while trying to set the volume name",e);  }catch (  Exception e) {    _log.error("Encountered an error while trying to set the volume name",e);  }}  }
class C{  public static boolean hasKitKat(){  return Build.VERSION.SDK_INT >= 19;}  }
class C{  public boolean equals(Object obj){  if ((obj != null) && (obj instanceof BinaryRefAddr)) {    BinaryRefAddr target=(BinaryRefAddr)obj;    if (addrType.compareTo(target.addrType) == 0) {      if (buf == null && target.buf == null)       return true;      if (buf == null || target.buf == null || buf.length != target.buf.length)       return false;      for (int i=0; i < buf.length; i++)       if (buf[i] != target.buf[i])       return false;      return true;    }  }  return false;}  }
class C{  @Override public MultivariateTable toDiscrete(){  return this;}  }
class C{  @Override public Object clone(){  return new IntStack(this);}  }
class C{  public byte[] unwrap(byte[] in,int inOff,int inLen) throws InvalidCipherTextException {  if (forWrapping) {    throw new IllegalStateException("Not set for unwrapping");  }  if (in == null) {    throw new InvalidCipherTextException("Null pointer as ciphertext");  }  final int blockSize=engine.getBlockSize();  if (inLen % blockSize != 0) {    throw new InvalidCipherTextException("Ciphertext not multiple of " + blockSize);  }  ParametersWithIV param2=new ParametersWithIV(this.param,IV2);  this.engine.init(false,param2);  byte TEMP3[]=new byte[inLen];  for (int currentBytePos=0; currentBytePos != inLen; currentBytePos+=blockSize) {    engine.processBlock(in,inOff + currentBytePos,TEMP3,currentBytePos);  }  byte[] TEMP2=reverse(TEMP3);  this.iv=new byte[8];  byte[] TEMP1=new byte[TEMP2.length - 8];  System.arraycopy(TEMP2,0,this.iv,0,8);  System.arraycopy(TEMP2,8,TEMP1,0,TEMP2.length - 8);  this.paramPlusIV=new ParametersWithIV(this.param,this.iv);  this.engine.init(false,this.paramPlusIV);  byte[] WKCKS=new byte[TEMP1.length];  for (int currentBytePos=0; currentBytePos != WKCKS.length; currentBytePos+=blockSize) {    engine.processBlock(TEMP1,currentBytePos,WKCKS,currentBytePos);  }  byte[] result=new byte[WKCKS.length - 8];  byte[] CKStoBeVerified=new byte[8];  System.arraycopy(WKCKS,0,result,0,WKCKS.length - 8);  System.arraycopy(WKCKS,WKCKS.length - 8,CKStoBeVerified,0,8);  if (!checkCMSKeyChecksum(result,CKStoBeVerified)) {    throw new InvalidCipherTextException("Checksum inside ciphertext is corrupted");  }  return result;}  }
class C{  public int hashCode(){  if (cachedHashCode == Integer.MIN_VALUE) {    int hashCode=0;    getAnnotationType();    Method[] methods=annotationType.getDeclaredMethods();    for (int i=0; i < methods.length; ++i) {      String name=methods[i].getName();      int valueHashCode=0;      MemberValue mv=annotation.getMemberValue(name);      Object value=null;      try {        if (mv != null)         value=mv.getValue(classLoader,pool,methods[i]);        if (value == null)         value=getDefault(name,methods[i]);      } catch (      RuntimeException e) {        throw e;      }catch (      Exception e) {        throw new RuntimeException("Error retrieving value " + name + " for annotation "+ annotation.getTypeName(),e);      }      if (value != null) {        if (value.getClass().isArray())         valueHashCode=arrayHashCode(value); else         valueHashCode=value.hashCode();      }      hashCode+=127 * name.hashCode() ^ valueHashCode;    }    cachedHashCode=hashCode;  }  return cachedHashCode;}  }
class C{  public boolean isAssignable(@Nullable Object value){  if (value == null) {    return isNullValueAllowed();  }  return clazz.isInstance(value);}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  ConstPool constPool=getConstPool();  int pos=currentPos;  int index=iterator.u16bitAt(pos + 1);  Javac jc=new Javac(thisClass);  CodeAttribute ca=iterator.get();  try {    CtClass[] params;    CtClass retType;    CtClass fieldType=Descriptor.toCtClass(constPool.getFieldrefType(index),thisClass.getClassPool());    boolean read=isReader();    if (read) {      params=new CtClass[0];      retType=fieldType;    } else {      params=new CtClass[1];      params[0]=fieldType;      retType=CtClass.voidType;    }    int paramVar=ca.getMaxLocals();    jc.recordParams(constPool.getFieldrefClassName(index),params,true,paramVar,withinStatic());    boolean included=checkResultValue(retType,statement);    if (read)     included=true;    int retVar=jc.recordReturnType(retType,included);    if (read)     jc.recordProceed(new ProceedForRead(retType,opcode,index,paramVar)); else {      jc.recordType(fieldType);      jc.recordProceed(new ProceedForWrite(params[0],opcode,index,paramVar));    }    Bytecode bytecode=jc.getBytecode();    storeStack(params,isStatic(),paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    if (included)     if (retType == CtClass.voidType) {      bytecode.addOpcode(ACONST_NULL);      bytecode.addAstore(retVar);    } else {      bytecode.addConstZero(retType);      bytecode.addStore(retVar,retType);    }    jc.compileStmnt(statement);    if (read)     bytecode.addLoad(retVar,retType);    replace0(pos,bytecode,3);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public void mouseDragged(MouseEvent e){  if (down == null)   return;  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();  boolean accepted=checkModifiers(e);  if (accepted) {    if (vv instanceof SatelliteVisualizationViewer) {      VisualizationViewer<?,?> vvMaster=((SatelliteVisualizationViewer<?,?>)vv).getMaster();      MutableTransformer modelTransformerMaster=vvMaster.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);      vv.setCursor(cursor);      Point2D q=down;      Point2D p=e.getPoint();      float dx=(float)(p.getX() - q.getX());      float dy=(float)(p.getY() - q.getY());      Dimension d=vv.getSize();      float shx=2.f * dx / d.height;      float shy=2.f * dy / d.width;      Point2D center=vv.getRenderContext().getMultiLayerTransformer().transform(vvMaster.getRenderContext().getMultiLayerTransformer().inverseTransform(vvMaster.getCenter()));      if (p.getX() < center.getX()) {        shy=-shy;      }      if (p.getY() < center.getY()) {        shx=-shx;      }      modelTransformerMaster.shear(-shx,-shy,vvMaster.getCenter());      down.x=e.getX();      down.y=e.getY();    }    e.consume();  }}  }
class C{  @FXML public boolean saveAs(){  boolean isSaved=false;  if (validateForm()) {    FileChooser fc=new FileChooser();    fc.setTitle("Choose where to save fingerprint");    if (this.defaultFingerprintFolder != null) {      fc.setInitialDirectory(this.defaultFingerprintFolder);    }    fc.setInitialFileName(this.textFieldNameId.getText() + ".xml");    File file=fc.showSaveDialog(this.stage);    if (file != null) {      this.defaultFingerprintFolder=file.getParentFile();      FingerprintBuilder fpBuilder=new FingerprintBuilder(this.textFieldNameId.getText(),this.textFieldAuthorId.getText(),this.textFieldDescriptionId.getText(),this.textFieldTagsId.getText());      try {        fpBuilder.processFilterPanel(this.filterPanelList,this);        fpBuilder.processPayloadPanel(this.treeViewPanelList,this);        fpBuilder.saveFile(file);        setSaved();        isSaved=true;      } catch (      IOException|JAXBException e) {        showException(e);      }    }  }  return isSaved;}  }
class C{  public static void download(final String urlFrom,final String filePath,final String checkSum,final Map<String,String> requestHeaders) throws Exception {  Log.d("CHCP","Loading file: " + urlFrom);  final MD5 md5=new MD5();  final File downloadFile=new File(filePath);  FilesUtility.delete(downloadFile);  FilesUtility.ensureDirectoryExists(downloadFile.getParentFile());  final URLConnection connection=URLConnectionHelper.createConnectionToURL(urlFrom,requestHeaders);  final InputStream input=new BufferedInputStream(connection.getInputStream());  final OutputStream output=new BufferedOutputStream(new FileOutputStream(filePath,false));  final byte data[]=new byte[1024];  int count;  while ((count=input.read(data)) != -1) {    output.write(data,0,count);    md5.write(data,count);  }  output.flush();  output.close();  input.close();  final String downloadedFileHash=md5.calculateHash();  if (!downloadedFileHash.equals(checkSum)) {    throw new IOException("File is corrupted: checksum " + checkSum + " doesn't match hash "+ downloadedFileHash+ " of the downloaded file");  }}  }
class C{  public Element store(){  Element e=new org.jdom2.Element(Xml.AUTOMATION);  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.NAME,getName());  e.setAttribute(Xml.COMMENT,getComment());  if (getCurrentAutomationItem() != null) {    e.setAttribute(Xml.CURRENT_ITEM,getCurrentAutomationItem().getId());  }  for (  AutomationItem item : getItemsBySequenceList()) {    e.addContent(item.store());  }  return e;}  }
class C{  public boolean isAuthRequired(String remoteIP){  return false;}  }
class C{  public PBEParameterSpec(byte[] salt,int iterationCount){  if (salt == null) {    throw new NullPointerException("salt == null");  }  this.salt=new byte[salt.length];  System.arraycopy(salt,0,this.salt,0,salt.length);  this.iterationCount=iterationCount;}  }
class C{  public static String stringForQuery(SQLiteStatement prog,String[] selectionArgs){  prog.bindAllArgsAsStrings(selectionArgs);  return prog.simpleQueryForString();}  }
class C{  public static double calcRadius(int start,int end,int[] instList,Instances insts,Instance pivot,DistanceFunction distanceFunction) throws Exception {  double radius=Double.NEGATIVE_INFINITY;  for (int i=start; i <= end; i++) {    double dist=distanceFunction.distance(pivot,insts.instance(instList[i]),Double.POSITIVE_INFINITY);    if (dist > radius)     radius=dist;  }  return Math.sqrt(radius);}  }
class C{  public int eval(INode state){  EightPuzzleNode node=(EightPuzzleNode)state;  int Pn=0;  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {      if (node.isEmpty(r,c)) {        continue;      }      int digit=node.cell(r,c);      Pn+=Math.abs(diffs[digit][0] - r);      Pn+=Math.abs(diffs[digit][1] - c);    }  }  int Sn=0;  if (!node.isEmpty(1,1)) {    Sn=1;  }  for (int r=0; r <= EightPuzzleNode.MaxR; r++) {    for (int c=0; c <= EightPuzzleNode.MaxC; c++) {      int idx=r * 3 + c;      if (r == 1 && c == 1) {        continue;      }      if (node.cell(r,c) == EightPuzzleNode.EmptyMark) {        continue;      }      if (succ[node.cell(r,c)] != node.cell(succs[idx][0],succs[idx][1])) {        Sn+=2;      }    }  }  int gn=0;  DepthTransition t=(DepthTransition)state.storedData();  if (t != null) {    gn=t.depth;  }  return gn + Pn + 3 * Sn;}  }
class C{  @Override public void add(PLIFileDownloader fileDownloader){  if (fileDownloader != null) {synchronized (mDownloaders) {      mDownloaders.add(fileDownloader);    }  }}  }
class C{  public void registerAttribute(String name) throws Exception {  attributes.put(name,null);}  }
class C{  private final String[] _expandSeenNames(String[] oldShared){  int len=oldShared.length;  String[] newShared;  if (len == 0) {    newShared=_smileBufferRecycler.allocSeenNamesBuffer();    if (newShared == null) {      newShared=new String[SmileBufferRecycler.DEFAULT_NAME_BUFFER_LENGTH];    }  } else   if (len == SmileConstants.MAX_SHARED_NAMES) {    newShared=oldShared;    _seenNameCount=0;  } else {    int newSize=(len == SmileBufferRecycler.DEFAULT_STRING_VALUE_BUFFER_LENGTH) ? 256 : SmileConstants.MAX_SHARED_NAMES;    newShared=new String[newSize];    System.arraycopy(oldShared,0,newShared,0,oldShared.length);  }  return newShared;}  }
class C{  public static IgniteBiTuple<IgniteConfiguration,GridSpringResourceContext> loadConfiguration(String springCfgPath) throws IgniteCheckedException {  IgniteBiTuple<Collection<IgniteConfiguration>,? extends GridSpringResourceContext> t=loadConfigurations(springCfgPath);  return F.t(F.first(t.get1()),t.get2());}  }
class C{  private static MobileDoc createPage(MobileSessionCtx wsc,WWindowStatus ws,String roleId){  MobileDoc doc=MobileDoc.create(true);  body body=doc.getBody();  StringBuffer sb=new StringBuffer("FieldUpdate - ");  body.addElement(new p().addElement(sb.toString()));  reply_Login2_Role(body,wsc,roleId);  return doc;}  }
class C{  public static ExportGroup verifyExportGroupExists(IngestionRequestContext requestContext,URI project,URI computeResource,URI vArray,String resourceType,DbClient dbClient){  List<URI> exportGroupUris=dbClient.queryByConstraint(ContainmentConstraint.Factory.getProjectExportGroupConstraint(project));  List<ExportGroup> exportGroups=dbClient.queryObject(ExportGroup.class,exportGroupUris);  if (null == exportGroups || exportGroups.isEmpty()) {    return null;  }  ExportGroup exportGroup=null;  for (  ExportGroup eg : exportGroups) {    if (eg.getVirtualArray().equals(vArray)) {      if (ExportGroup.ExportGroupType.Host.toString().equalsIgnoreCase(resourceType)) {        if (eg.hasHost(computeResource) && !ExportGroup.ExportGroupType.Cluster.toString().equalsIgnoreCase(eg.getType())) {          _logger.info("Export Groups {} matching Varray/Project/ComputeResource exists",eg.getId());          exportGroup=eg;          break;        }      } else       if (ExportGroup.ExportGroupType.Cluster.toString().equalsIgnoreCase(resourceType)) {        if (eg.hasCluster(computeResource)) {          _logger.info("Export Groups {} matching Varray/Project/ComputeResource exists",eg.getId());          exportGroup=eg;          break;        }      }    }  }  if (exportGroup != null) {    DataObject alreadyLoadedExportGroup=requestContext.findInUpdatedObjects(exportGroup.getId());    if (alreadyLoadedExportGroup != null && (alreadyLoadedExportGroup instanceof ExportGroup)) {      _logger.info("Found an already loaded export group");      exportGroup=(ExportGroup)alreadyLoadedExportGroup;    }  }  return exportGroup;}  }
class C{  public void resetRotationMatrix(){  setRotationMatrix(this.defaultRotationMatrix);}  }
class C{  @IntRange(from=MIN_SEGMENT,to=MAX_SEGMENT) public static int extractSegmentPart(long composedId){  return (int)((composedId & BIT_MASK_SEGMENT) >>> BIT_OFFSET_SEGMENT);}  }
class C{  public BasicWebViewFactory(){}  }
class C{  public boolean logModified(Logger log){  for (int i=_dependencyList.size() - 1; i >= 0; i--) {    Dependency dependency=_dependencyList.get(i);    if (dependency.logModified(log))     return true;  }  return false;}  }
class C{  public void tryCommit(final Graph graph,final Consumer<Graph> assertFunction){  assertFunction.accept(graph);  if (graph.features().graph().supportsTransactions()) {    graph.tx().commit();    assertFunction.accept(graph);  }}  }
class C{  public void put(String key,InputStream stream,String name){  put(key,stream,name,null);}  }
class C{  public void testMoveCounters() throws ChessParseError {  String fen="r1bqk2r/2ppbppp/p1n2n2/1pP1p3/B3P3/5N2/PP1P1PPP/RNBQK2R w KQkq b6 0 7";  Position pos=TextIO.readFEN(fen);  Move move=TextIO.stringToMove(pos,"Nc3");  UndoInfo ui=new UndoInfo();  pos.makeMove(move,ui);  assertEquals(1,pos.halfMoveClock);  assertEquals(7,pos.fullMoveCounter);  pos.unMakeMove(move,ui);  move=TextIO.stringToMove(pos,"O-O");  pos.makeMove(move,ui);  assertEquals(1,pos.halfMoveClock);  assertEquals(7,pos.fullMoveCounter);  pos.unMakeMove(move,ui);  move=TextIO.stringToMove(pos,"a3");  pos.makeMove(move,ui);  assertEquals(0,pos.halfMoveClock);  assertEquals(7,pos.fullMoveCounter);  pos.unMakeMove(move,ui);  move=TextIO.stringToMove(pos,"Nxe5");  pos.makeMove(move,ui);  assertEquals(0,pos.halfMoveClock);  assertEquals(7,pos.fullMoveCounter);  pos.unMakeMove(move,ui);  move=TextIO.stringToMove(pos,"cxb6");  pos.makeMove(move,ui);  assertEquals(0,pos.halfMoveClock);  assertEquals(7,pos.fullMoveCounter);  pos.unMakeMove(move,ui);  move=TextIO.stringToMove(pos,"Kf1");  pos.makeMove(move,ui);  assertEquals(1,pos.halfMoveClock);  assertEquals(7,pos.fullMoveCounter);  pos.unMakeMove(move,ui);  Move firstMove=TextIO.stringToMove(pos,"Nc3");  UndoInfo firstUi=new UndoInfo();  pos.makeMove(move,firstUi);  move=TextIO.stringToMove(pos,"O-O");  pos.makeMove(move,ui);  assertEquals(2,pos.halfMoveClock);  assertEquals(8,pos.fullMoveCounter);  pos.unMakeMove(move,ui);  pos.unMakeMove(firstMove,firstUi);  fen="8/8/8/4k3/8/8/2p5/5K2 b - - 47 68";  pos=TextIO.readFEN(fen);  move=TextIO.stringToMove(pos,"c1Q");  pos.makeMove(move,ui);  assertEquals(0,pos.halfMoveClock);  assertEquals(69,pos.fullMoveCounter);}  }
class C{  public int find(Object key){  Object o=this.map.get(key);  return o instanceof Integer ? ((Integer)o).intValue() : none;}  }
class C{  public static String encode(String str,String charset) throws RuntimeException {  byte[] bytes;  try {    bytes=str.getBytes(charset);  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("Unsupported charset: " + charset,e);  }  byte[] encoded=encode(bytes);  try {    return new String(encoded,"ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException("ASCII is not supported!",e);  }}  }
class C{  public boolean wasInitiallyLocal(){  return this.startedLocal;}  }
class C{  public VertexPartition(Graph<V,E> g,Map<V,Set<V>> partition_map){  this.vertex_partition_map=Collections.unmodifiableMap(partition_map);  this.graph=g;}  }
class C{  public static ResultSet search(Connection conn,String text,int limit,int offset) throws SQLException {  try {    return search(conn,text,limit,offset,false);  } catch (  DbException e) {    throw DbException.toSQLException(e);  }}  }
class C{  public static void deleteAllMaps(Context context,String accountName){  Account account=getGoogleAccount(context,accountName);  if (account == null) {    Log.e(TAG,"Unable to get account.");    return;  }  MapsClient mapsClient=new MapsClient(GDataClientFactory.getGDataClient(context),new XmlMapsGDataParserFactory(new AndroidXmlParserFactory()));  ArrayList<MapsMapMetadata> mapMetadata=getMaps(context,account,mapsClient);  for (  MapsMapMetadata oneData : mapMetadata) {    try {      mapsClient.deleteEntry(oneData.getGDataEditUri(),AccountManager.get(context).blockingGetAuthToken(account,MapsConstants.SERVICE_NAME,false));    } catch (    Exception e) {      Log.e(TAG,"Unable to delete maps.",e);    }  }}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  protected void buildCharCategories(Vector<String> tempRuleList){  super.buildCharCategories(tempRuleList);  categoryFlags=new boolean[categories.size()];  for (int i=0; i < categories.size(); i++) {    CharSet cs=categories.elementAt(i);    if (!(cs.intersection(dictionaryChars).empty())) {      categoryFlags[i]=true;    }  }}  }
class C{  public boolean isValignByRow(){  return vAlignByRow;}  }
class C{  public void store(ObjectReference val){  SimulatedMemory.setWord(this,val.value);}  }
class C{  @Override public String toString(){  if (this.timeout == 0) {    return "NO EXPIRATION";  }  return "timeout: " + this.timeout + ";action: "+ this.action;}  }
class C{  private int indexOf(Object x){  if (x != null) {    if (x instanceof ScheduledFutureTask) {      int i=((ScheduledFutureTask)x).heapIndex;      if (i >= 0 && i < size && queue[i] == x)       return i;    } else {      for (int i=0; i < size; i++)       if (x.equals(queue[i]))       return i;    }  }  return -1;}  }
class C{  public static ContactId formatContact(String contact){synchronized (ContactUtil.class) {    if (mContactUtil == null) {      mContactUtil=com.gsma.services.rcs.contact.ContactUtil.getInstance(RiApplication.getAppContext());    }  }  try {    return mContactUtil.formatContact(contact);  } catch (  RcsPermissionDeniedException e) {    String errorMessage="Failed to convert phone number '" + contact + "' into contactId!";    throw new IllegalStateException(errorMessage,e);  }}  }
class C{  public boolean hasErrors(){  return CollectionUtils.isNotEmpty(errors);}  }
class C{  private static boolean isKeystoreExists(){  File file=new File(getKeystore().getPath());  if (!file.exists()) {    return false;  }  return sKeyStore != null;}  }
class C{  public String[] listAttributes(){  NamedNodeMap nnm=node.getAttributes();  String[] outgoing=new String[nnm.getLength()];  for (int i=0; i < outgoing.length; i++) {    outgoing[i]=nnm.item(i).getNodeName();  }  return outgoing;}  }
class C{  protected DecimalEscapeSequenceImpl(){  super();}  }
class C{  private Map<String,Signature> loadPersistedSignatures(){  Map<String,Signature> signatures=new HashMap<String,Signature>(TMHMMSignature.values().length);  final SignatureLibraryRelease release=loadTMHMMRelease();  final Query query=entityManager.createQuery("select s from Signature s where s.signatureLibraryRelease = :release");  query.setParameter("release",release);  @SuppressWarnings("unchecked") List<Signature> retrievedSignatures=query.getResultList();  for (  final TMHMMSignature tmhmmSignature : TMHMMSignature.values()) {    boolean found=false;    String signatureAcc=tmhmmSignature.getAccession();    for (    final Signature retrievedSignature : retrievedSignatures) {      if (tmhmmSignature.getAccession().equals(retrievedSignature.getAccession()) && tmhmmSignature.getAccession().equals(retrievedSignature.getAccession())) {        signatures.put(signatureAcc,retrievedSignature);        found=true;        break;      }    }    if (!found) {      Signature.Builder builder=new Signature.Builder(tmhmmSignature.getAccession());      final Signature signature=builder.description(tmhmmSignature.getShortDesc()).signatureLibraryRelease(release).build();      entityManager.persist(signature);      signatures.put(signatureAcc,signature);    }  }  return signatures;}  }
class C{  public boolean addAll(Collection c){  int numNew=c.size();  if (numNew == 0)   return false;synchronized (this) {    Object[] elements=getArray();    int len=elements.length;    Object[] newElements=new Object[len + numNew];    System.arraycopy(elements,0,newElements,0,len);    for (Iterator itr=c.iterator(); itr.hasNext(); ) {      Object e=itr.next();      newElements[len++]=e;    }    setArray(newElements);    return true;  }}  }
class C{  public void testCreateMyTracksOnDrive() throws IOException {  if (!RunConfiguration.getInstance().getRunSyncTest()) {    return;  }  instrumentation.waitForIdleSync();  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.createSimpleTrack(0,true);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  instrumentation.waitForIdleSync();  SyncTestUtils.checkFilesNumber(drive);  File folder=SyncUtils.getMyTracksFolder(trackListActivity.getApplicationContext(),drive);  assertNotNull(folder);  SyncTestUtils.removeFile(folder,drive);  EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);  SyncTestUtils.checkFilesNumber(drive);}  }
class C{  public static CourseOffering findBySessionSubjAreaIdCourseNbr(Long acadSessionId,Long subjAreaId,String courseNbr){  return (CourseOffering)CourseOfferingDAO.getInstance().getSession().createQuery("from CourseOffering co " + "where co.uniqueCourseNbr.subjectArea.uniqueId = :subjArea " + "and co.uniqueCourseNbr.courseNbr = :crsNbr "+ "and co.instructionalOffering.session.uniqueId = :acadSessionId").setString("crsNbr",courseNbr).setLong("subjArea",subjAreaId).setLong("acadSessionId",acadSessionId).setMaxResults(1).uniqueResult();}  }
class C{  public void processArticleContent(final JSONObject article,final HttpServletRequest request) throws ServiceException {  final JSONObject author=article.optJSONObject(Article.ARTICLE_T_AUTHOR);  if (null != author && UserExt.USER_STATUS_C_INVALID == author.optInt(UserExt.USER_STATUS) || Article.ARTICLE_STATUS_C_INVALID == article.optInt(Article.ARTICLE_STATUS)) {    article.put(Article.ARTICLE_TITLE,langPropsService.get("articleTitleBlockLabel"));    article.put(Article.ARTICLE_CONTENT,langPropsService.get("articleContentBlockLabel"));    article.put(Article.ARTICLE_REWARD_CONTENT,"");    article.put(Article.ARTICLE_REWARD_POINT,0);    return;  }  String articleContent=article.optString(Article.ARTICLE_CONTENT);  article.put(Common.DISCUSSION_VIEWABLE,true);  final Set<String> userNames=userQueryService.getUserNames(articleContent);  final JSONObject currentUser=userQueryService.getCurrentUser(request);  final String currentUserName=null == currentUser ? "" : currentUser.optString(User.USER_NAME);  final String currentRole=null == currentUser ? "" : currentUser.optString(User.USER_ROLE);  final String authorName=article.optString(Article.ARTICLE_T_AUTHOR_NAME);  if (Article.ARTICLE_TYPE_C_DISCUSSION == article.optInt(Article.ARTICLE_TYPE) && !authorName.equals(currentUserName) && !Role.ADMIN_ROLE.equals(currentRole)) {    boolean invited=false;    for (    final String userName : userNames) {      if (userName.equals(currentUserName)) {        invited=true;        break;      }    }    if (!invited) {      String blockContent=langPropsService.get("articleDiscussionLabel");      blockContent=blockContent.replace("{user}","<a href='" + Latkes.getServePath() + "/member/"+ authorName+ "'>"+ authorName+ "</a>");      article.put(Article.ARTICLE_CONTENT,blockContent);      article.put(Common.DISCUSSION_VIEWABLE,false);      article.put(Article.ARTICLE_REWARD_CONTENT,"");      article.put(Article.ARTICLE_REWARD_POINT,0);      return;    }  }  for (  final String userName : userNames) {    articleContent=articleContent.replace('@' + userName,"@<a href='" + Latkes.getServePath() + "/member/"+ userName+ "'>"+ userName+ "</a>");  }  articleContent=shortLinkQueryService.linkArticle(articleContent);  articleContent=shortLinkQueryService.linkTag(articleContent);  articleContent=Emotions.convert(articleContent);  article.put(Article.ARTICLE_CONTENT,articleContent);  if (article.optInt(Article.ARTICLE_REWARD_POINT) > 0) {    String articleRewardContent=article.optString(Article.ARTICLE_REWARD_CONTENT);    final Set<String> rewordContentUserNames=userQueryService.getUserNames(articleRewardContent);    for (    final String userName : rewordContentUserNames) {      articleRewardContent=articleRewardContent.replace('@' + userName,"@<a href='" + Latkes.getServePath() + "/member/"+ userName+ "'>"+ userName+ "</a>");    }    articleRewardContent=Emotions.convert(articleRewardContent);    article.put(Article.ARTICLE_REWARD_CONTENT,articleRewardContent);  }  markdown(article);}  }
class C{  @Override public boolean isClosed() throws SQLException {  try {    debugCodeCall("isClosed");    return session == null || session.isClosed();  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected void encodeBufferPrefix(OutputStream a) throws IOException {  sequence=0;  super.encodeBufferPrefix(a);}  }
class C{  public static void sizerTestForMemCapacityController(Integer port){  region=cache.getRegion(Region.SEPARATOR + CacheServerImpl.generateNameForClientMsgsRegion(port.intValue()));  assertNotNull(region);  Set entries=region.entrySet();  assertTrue(entries.size() > 0);  Iterator iter=entries.iterator();  for (; iter.hasNext(); ) {    Region.Entry entry=(Region.Entry)iter.next();    ClientUpdateMessageImpl cum=(ClientUpdateMessageImpl)entry.getValue();    assertTrue("cum size is not equal",(cc.entrySize(null,entry.getValue()) - OVERHEAD_PER_ENTRY) == cum.getSizeInBytes());  }  cache.getLogger().fine("Test passed. Now, doing a cleanup job.");  cleanUp(new Long(20000));}  }
class C{  public void clear(){  refMap.clear();}  }
class C{  public EnabledEditingSupport(){  super(tableViewer);}  }
class C{  @Override public void pluginInitialize(){  this.initTelephonyReceiver();}  }
class C{  public static BufferedImage createPattern(String pattern,Dimension size,float scale,Color lineColor,Color backColor){  int halfWidth=size.width / 2;  int halfHeight=size.height / 2;  int dim=(int)(size.width * scale);  BufferedImage image=new BufferedImage(size.width,size.height,BufferedImage.TYPE_4BYTE_ABGR);  Graphics2D g2=image.createGraphics();  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  g2.setPaint(backColor);  g2.fillRect(0,0,size.width,size.height);  if (scale <= 0)   return image;  g2.setPaint(lineColor);  g2.setStroke(new BasicStroke(dim));  if (pattern.equals(PATTERN_HLINE)) {    int y=halfHeight - 1 - dim / 2;    g2.fillRect(0,y,size.width,dim);  } else   if (pattern.equals(PATTERN_VLINE)) {    int x=halfWidth - 1 - dim / 2;    g2.fillRect(x,0,dim,size.height);  }  if (pattern.equals(PATTERN_HVLINE)) {    int x=halfWidth - 1 - dim / 2;    g2.fillRect(x,0,dim,size.height);    int y=halfHeight - 1 - dim / 2;    g2.fillRect(0,y,size.width,dim);  } else   if (pattern.equals(PATTERN_SQUARE)) {    int x=halfWidth - dim / 2;    int y=halfHeight - dim / 2;    g2.fillRect(x,y,dim,dim);  } else   if (pattern.equals(PATTERN_SQUARES)) {    int x=halfWidth - 1 - dim / 2;    int y=halfHeight - 1 - dim / 2;    g2.fillRect(x,y,dim,dim);    g2.fillRect(x - halfWidth,y - halfHeight,dim,dim);    g2.fillRect(x - halfWidth,y + halfHeight,dim,dim);    g2.fillRect(x + halfWidth,y - halfHeight,dim,dim);    g2.fillRect(x + halfWidth,y + halfHeight,dim,dim);  } else   if (pattern.equals(PATTERN_CIRCLE)) {    int x=halfWidth - dim / 2;    int y=halfHeight - dim / 2;    g2.fillOval(x,y,dim,dim);  } else   if (pattern.equals(PATTERN_CIRCLES)) {    int x=halfWidth - 1 - dim / 2;    int y=halfHeight - 1 - dim / 2;    g2.fillOval(x,y,dim,dim);    g2.fillOval(x - halfWidth,y - halfHeight,dim,dim);    g2.fillOval(x - halfWidth,y + halfHeight,dim,dim);    g2.fillOval(x + halfWidth,y - halfHeight,dim,dim);    g2.fillOval(x + halfWidth,y + halfHeight,dim,dim);  } else   if (pattern.equals(PATTERN_TRIANGLE_UP)) {    GeneralPath path=new GeneralPath();    path.moveTo(halfWidth - 1 - dim / 2,halfHeight - 1 + dim / 2);    path.lineTo(halfWidth - 1,halfHeight - 1 - dim / 2);    path.lineTo(halfWidth - 1 + dim / 2,halfHeight - 1 + dim / 2);    path.lineTo(halfWidth - 1 - dim / 2,halfHeight - 1 + dim / 2);    g2.fill(path);  } else   if (pattern.equals(PATTERN_DIAGONAL_UP) || pattern.equals(PATTERN_DIAGONAL_DOWN)) {    if (pattern.equals(PATTERN_DIAGONAL_DOWN)) {      AffineTransform at=AffineTransform.getScaleInstance(-1,1);      at.translate(-size.width,0);      g2.setTransform(at);    }    g2.drawLine(-dim,size.height - 1 + dim,size.width - 1 + dim,-dim);    g2.drawLine(-dim - 1,dim,dim - 1,-dim);    g2.drawLine(size.width - dim,size.height - 1 + dim,size.width + dim,size.height - 1 - dim);  } else   if (pattern.equals(GRADIENT_VLINEAR)) {    g2.setPaint(new GradientPaint((float)halfWidth,0f,lineColor,(float)halfWidth,(float)size.height - 1,backColor));    g2.fillRect(0,0,size.width,size.height);  } else   if (pattern.equals(GRADIENT_HLINEAR)) {    g2.setPaint(new GradientPaint(0f,halfHeight,lineColor,(float)size.width - 1,halfHeight,backColor));    g2.fillRect(0,0,size.width,size.height);  }  return image;}  }
class C{  private void popupExplanation(JLabel label){  if (Helper.isNotNullOrEmpty(label.getToolTipText()))   JOptionPane.showMessageDialog(this,label.getToolTipText(),Localization.Main.getText("gui.tooltip"),JOptionPane.INFORMATION_MESSAGE);}  }
class C{  @Deprecated public File loadMATSim4UrbanSimXSD(){  InputStream is=null;  BufferedOutputStream bos=null;  boolean isInternetStream=Boolean.TRUE;  File dir=new File(this.destinationPath);  if (!dir.exists())   dir.mkdirs();  File output=new File(destinationPath + fileName);  log.info("Trying to load " + this.source + ". In some cases (e.g. network interface up but no connection), this may take a bit.");  log.info("The xsd file will be saved in " + this.destinationPath + ".");  try {    is=new URL(this.source).openStream();    bos=new BufferedOutputStream(new FileOutputStream(output));    for (int c; (c=is.read()) != -1; ) {      bos.write(c);    }    log.info("Loading successfully.");    if (bos != null) {      bos.flush();      bos.close();    }    if (is != null)     is.close();    return output;  } catch (  MalformedURLException e1) {    e1.printStackTrace();  }catch (  IOException e1) {    log.error(e1.toString() + ". May not be fatal.");    isInternetStream=Boolean.FALSE;    output=null;  }  if (!isInternetStream) {    log.info("Trying to access local dtd folder at standard location " + InternalConstants.CURRENT_MATSIM_4_URBANSIM_XSD_LOCALJAR + " ...");    File dtdFile=new File(InternalConstants.CURRENT_MATSIM_4_URBANSIM_XSD_LOCALJAR);    if (dtdFile.exists() && dtdFile.isFile() && dtdFile.canRead()) {      log.info("Using the local DTD " + dtdFile.getAbsolutePath());      output=new File(dtdFile.getAbsolutePath());      return output;    }{      String currentDir=System.getProperty("user.dir");      int index=(currentDir.indexOf("playground") > 0) ? currentDir.indexOf("playground") : currentDir.indexOf("contrib");      String root=currentDir.substring(0,index);      dtdFile=new File(root + "/matsim" + InternalConstants.CURRENT_MATSIM_4_URBANSIM_XSD_LOCALJAR);      log.info("Trying to access local dtd folder at standard location " + dtdFile.getAbsolutePath() + " ...");      if (dtdFile.exists() && dtdFile.isFile() && dtdFile.canRead()) {        log.info("Using the local DTD " + dtdFile.getAbsolutePath());        output=new File(dtdFile.getAbsolutePath());        return output;      }    }{      String currentDir=System.getProperty("user.dir");      int index=(currentDir.indexOf("playground") > 0) ? currentDir.indexOf("playground") : currentDir.indexOf("contrib");      String root=currentDir.substring(0,index);      dtdFile=new File(root + "/matsim/src/main/resources/" + InternalConstants.CURRENT_MATSIM_4_URBANSIM_XSD_LOCALJAR);      log.info("Trying to access local dtd folder at standard location " + dtdFile.getAbsolutePath() + " ...");      if (dtdFile.exists() && dtdFile.isFile() && dtdFile.canRead()) {        log.info("Using the local DTD " + dtdFile.getAbsolutePath());        output=new File(dtdFile.getAbsolutePath());        return output;      }    }  }  System.out.flush();  log.warn("Could neither get the XSD from the web nor a local one.");  System.err.flush();  return null;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.336 -0500",hash_original_method="16B8910DE162C0278D0CD4C3C9C4634A",hash_generated_method="80F3BCDCD6365473887F76B59C915276") private static String toCurl(HttpUriRequest request,boolean logAuthToken) throws IOException {  StringBuilder builder=new StringBuilder();  builder.append("curl ");  for (  Header header : request.getAllHeaders()) {    if (!logAuthToken && (header.getName().equals("Authorization") || header.getName().equals("Cookie"))) {      continue;    }    builder.append("--header \"");    builder.append(header.toString().trim());    builder.append("\" ");  }  URI uri=request.getURI();  if (request instanceof RequestWrapper) {    HttpRequest original=((RequestWrapper)request).getOriginal();    if (original instanceof HttpUriRequest) {      uri=((HttpUriRequest)original).getURI();    }  }  builder.append("\"");  builder.append(uri);  builder.append("\"");  if (request instanceof HttpEntityEnclosingRequest) {    HttpEntityEnclosingRequest entityRequest=(HttpEntityEnclosingRequest)request;    HttpEntity entity=entityRequest.getEntity();    if (entity != null && entity.isRepeatable()) {      if (entity.getContentLength() < 1024) {        ByteArrayOutputStream stream=new ByteArrayOutputStream();        entity.writeTo(stream);        if (isBinaryContent(request)) {          String base64=Base64.encodeToString(stream.toByteArray(),Base64.NO_WRAP);          builder.insert(0,"echo '" + base64 + "' | base64 -d > /tmp/$$.bin; ");          builder.append(" --data-binary @/tmp/$$.bin");        } else {          String entityString=stream.toString();          builder.append(" --data-ascii \"").append(entityString).append("\"");        }      } else {        builder.append(" [TOO MUCH DATA TO INCLUDE]");      }    }  }  return builder.toString();}  }
class C{  protected void enableNonTzAwareMode() throws ReplicatorException {  logger.info("Resetting MySQL session time zone back to global value");  String sql="set session time_zone=@@global.time_zone";  try {    conn.execute(sql);  } catch (  SQLException e) {    throw new ReplicatorException("Unable to reset MySQL session time_zone: sql=" + sql + " message="+ e.getLocalizedMessage());  }  TimeZone hostTz=runtime.getHostTimeZone();  logger.info("Resetting time zones used for date-time to enable non-time zone-aware operation: new tz=" + hostTz.getDisplayName());  dateTimeFormatter.setTimeZone(hostTz);  dateFormatter.setTimeZone(hostTz);  timeFormatter.setTimeZone(hostTz);  nonTzAwareMode=true;}  }
class C{  public String read(Link link) throws IOException {  Debug.message("link","LinkMapRequest: read()");  float ver=link.dis.readFloat();  if (ver != version) {    if (ver == .1) {      throw new IOException("LinkMapRequest: Versions do not match! DANGER!");    } else {      Debug.message("link","LinkMapRequest: Versions do not match");    }  }  float lat=link.dis.readFloat();  float lon=link.dis.readFloat();  center=new LatLonPoint.Float(lat,lon);  scale=link.dis.readFloat();  height=link.dis.readInt();  width=link.dis.readInt();  int length=link.dis.readInt();  boundingPolys=new LinkBoundingPoly[length];  for (int i=0; i < boundingPolys.length; i++) {    boundingPolys[i]=new LinkBoundingPoly(link.dis);  }  properties=new LinkProperties(link);  return link.readDelimiter(false);}  }
class C{  public void restartCurrentTimeUpdates(){  mPaused=false;  if (mHandler != null) {    mHandler.removeCallbacks(mUpdateCurrentTime);    mHandler.post(mUpdateCurrentTime);  }}  }
class C{  public static void addChemicalWasherRecipe(GasStack input,GasStack output){  addRecipe(Recipe.CHEMICAL_WASHER,new WasherRecipe(input,output));}  }
class C{  public void endParameterEntity(String name,Augmentations augs) throws XNIException {  try {    if (augs == null || !Boolean.TRUE.equals(augs.getItem(Constants.ENTITY_SKIPPED))) {      if (fLexicalHandler != null && fLexicalHandlerParameterEntities) {        fLexicalHandler.endEntity(name);      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public static boolean isNotEmpty(List<Object> list){  return !list.isEmpty();}  }
class C{  public DbSchemaChanger removeBeanProperty(String propertyName) throws Exception {  String getterMethodName=generateGetterMethodName(propertyName);  removeMethod(getterMethodName);  String setterMethodName=generateSetterMethodName(propertyName);  removeMethod(setterMethodName);  dumpClassInfo();  return this;}  }
class C{  @Override protected int extension_button_presentation(int button_pres){  return BUTTON_EXTENSION;}  }
class C{  private boolean Between(double Angle,double Tolerance,double Direction){  boolean flag=false;  double la=(Angle - Tolerance);  if (la < 0) {    la=2 * Math.PI + la;    flag=true;  }  double ha=(Angle + Tolerance);  if (ha >= 2 * Math.PI) {    ha=ha - 2 * Math.PI;    flag=true;  }  if (flag) {    if (Direction >= ha && Direction <= la) {      return false;    } else {      return true;    }  } else {    if (Direction >= la && Direction <= ha) {      return true;    } else {      return false;    }  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  private ColorPickerSwatch createColorSwatch(int color,int selectedColor){  ColorPickerSwatch view=new ColorPickerSwatch(getContext(),color,color == selectedColor,mOnColorSelectedListener);  TableRow.LayoutParams params=new TableRow.LayoutParams(mSwatchLength,mSwatchLength);  params.setMargins(mMarginSize,mMarginSize,mMarginSize,mMarginSize);  view.setLayoutParams(params);  return view;}  }
class C{  public void cleanup() throws InterruptedException, ExecutionException, IOException {  for (  String keyspace : getNonSystemKeySpaces()) {    cleanup(keyspace,Collections.emptyList());  }}  }
class C{  public DrawerBuilder withDrawerWidthRes(@DimenRes int drawerWidthRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  this.mDrawerWidth=mActivity.getResources().getDimensionPixelSize(drawerWidthRes);  return this;}  }
class C{  public boolean isCumulative(){  return cumulative;}  }
class C{  public void removeArchive(final int index){  this.archives.remove(index);}  }
class C{  @Override public void updateAsciiStream(String columnLabel,InputStream x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateAsciiStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(IOUtils.getAsciiReader(x),length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public boolean isAbstract(){  return false;}  }
class C{  private void selectFile(String action) throws OpenStegoException {  FileBrowser browser=new FileBrowser();  String fileName=null;  String title=null;  String filterDesc=null;  List<String> allowedExts=null;  int allowFileDir=FileBrowser.ALLOW_FILE;  boolean multiSelect=false;  int coverFileListSize=0;  int wmInputFileListSize=0;  JTextField textField=null;  OpenStegoPlugin plugin;  plugin=action.startsWith("BROWSE_DH_") ? getDefaultPlugin(OpenStegoPlugin.Purpose.DATA_HIDING) : getDefaultPlugin(OpenStegoPlugin.Purpose.WATERMARKING);  coverFileListSize=CommonUtil.parseFileList(getEmbedPanel().getCoverFileTextField().getText(),";").size();  wmInputFileListSize=CommonUtil.parseFileList(getEmbedWmPanel().getFileForWmTextField().getText(),";").size();  if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_DH_EMB_MSGFILE)) {    title=labelUtil.getString("gui.filer.title.dhEmbed.msgFile");    textField=getEmbedPanel().getMsgFileTextField();  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_DH_EMB_CVRFILE)) {    title=labelUtil.getString("gui.filer.title.dhEmbed.coverFile");    filterDesc=labelUtil.getString("gui.filer.filter.coverFiles",getExtensionsString(plugin,READ_EXTENSIONS));    allowedExts=getExtensionsList(plugin,READ_EXTENSIONS);    textField=getEmbedPanel().getCoverFileTextField();    multiSelect=true;  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_DH_EMB_STGFILE)) {    title=labelUtil.getString("gui.filer.title.dhEmbed.stegoFile");    if (coverFileListSize > 1) {      allowFileDir=FileBrowser.ALLOW_DIRECTORY;    } else {      filterDesc=labelUtil.getString("gui.filer.filter.stegoFiles",getExtensionsString(plugin,WRITE_EXTENSIONS));      allowedExts=getExtensionsList(plugin,WRITE_EXTENSIONS);    }    textField=getEmbedPanel().getStegoFileTextField();  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_DH_EXT_STGFILE)) {    title=labelUtil.getString("gui.filer.title.dhExtract.stegoFile");    filterDesc=labelUtil.getString("gui.filer.filter.stegoFiles",getExtensionsString(plugin,WRITE_EXTENSIONS));    allowedExts=getExtensionsList(plugin,WRITE_EXTENSIONS);    textField=getExtractPanel().getInputStegoFileTextField();  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_DH_EXT_OUTDIR)) {    title=labelUtil.getString("gui.filer.title.dhExtract.outputDir");    allowFileDir=FileBrowser.ALLOW_DIRECTORY;    textField=getExtractPanel().getOutputFolderTextField();  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_WM_GSG_SIGFILE)) {    title=labelUtil.getString("gui.filer.title.wmGenSig.sigFile");    filterDesc=labelUtil.getString("gui.filer.filter.sigFiles","*" + SIG_FILE_EXTENSION);    allowedExts=Arrays.asList(new String[]{SIG_FILE_EXTENSION});    textField=getGenSigPanel().getSignatureFileTextField();  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_WM_EMB_INPFILE)) {    title=labelUtil.getString("gui.filer.title.wmEmbed.fileForWm");    filterDesc=labelUtil.getString("gui.filer.filter.filesForWm",getExtensionsString(plugin,READ_EXTENSIONS));    allowedExts=getExtensionsList(plugin,READ_EXTENSIONS);    textField=getEmbedWmPanel().getFileForWmTextField();    multiSelect=true;  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_WM_EMB_SIGFILE)) {    title=labelUtil.getString("gui.filer.title.wmEmbed.sigFile");    filterDesc=labelUtil.getString("gui.filer.filter.sigFiles","*" + SIG_FILE_EXTENSION);    allowedExts=Arrays.asList(new String[]{SIG_FILE_EXTENSION});    textField=getEmbedWmPanel().getSignatureFileTextField();  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_WM_EMB_OUTFILE)) {    title=labelUtil.getString("gui.filer.title.wmEmbed.outputWmFile");    if (wmInputFileListSize > 1) {      allowFileDir=FileBrowser.ALLOW_DIRECTORY;    } else {      filterDesc=labelUtil.getString("gui.filer.filter.wmFiles",getExtensionsString(plugin,WRITE_EXTENSIONS));      allowedExts=getExtensionsList(plugin,WRITE_EXTENSIONS);    }    textField=getEmbedWmPanel().getOutputWmFileTextField();  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_WM_VER_INPFILE)) {    title=labelUtil.getString("gui.filer.title.wmExtract.inputWmFile");    filterDesc=labelUtil.getString("gui.filer.filter.wmFiles",getExtensionsString(plugin,WRITE_EXTENSIONS));    allowedExts=getExtensionsList(plugin,WRITE_EXTENSIONS);    textField=getVerifyWmPanel().getInputFileTextField();    multiSelect=true;  } else   if (action.equals(OpenStegoFrame.ActionCommands.BROWSE_WM_VER_SIGFILE)) {    title=labelUtil.getString("gui.filer.title.wmExtract.sigFile");    filterDesc=labelUtil.getString("gui.filer.filter.sigFiles","*" + SIG_FILE_EXTENSION);    allowedExts=Arrays.asList(new String[]{SIG_FILE_EXTENSION});    textField=getVerifyWmPanel().getSignatureFileTextField();  }  fileName=browser.getFileName(title,filterDesc,allowedExts,allowFileDir,multiSelect);  if (fileName != null) {    if ((action.equals(OpenStegoFrame.ActionCommands.BROWSE_DH_EMB_STGFILE) && (coverFileListSize <= 1)) || (action.equals(OpenStegoFrame.ActionCommands.BROWSE_WM_EMB_OUTFILE) && (wmInputFileListSize <= 1))) {      if (!plugin.getWritableFileExtensions().contains(fileName.substring(fileName.lastIndexOf('.') + 1).toLowerCase())) {        fileName=fileName + "." + plugin.getWritableFileExtensions().get(0);      }    }    textField.setText(fileName);  }}  }
class C{  public void stop(ClientCQ cq){  pool.getRITracker().removeCq(cq,cq.isDurable());  StopCQOp.execute(this.pool,cq.getName());}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.add(new Option("\tUse word frequencies instead of " + "binary bag of words.","W",0,"-W"));  newVector.add(new Option("\tHow often to prune the dictionary " + "of low frequency words (default = 0, i.e. don't prune)","P",1,"-P <# instances>"));  newVector.add(new Option("\tMinimum word frequency. Words with less " + "than this frequence are ignored.\n\tIf periodic pruning " + "is turned on then this is also used to determine which\n\t"+ "words to remove from the dictionary (default = 3).","M",1,"-M <double>"));  newVector.addElement(new Option("\tNormalize document length (use in conjunction with -norm and " + "-lnorm)","normalize",0,"-normalize"));  newVector.addElement(new Option("\tSpecify the norm that each instance must have (default 1.0)","norm",1,"-norm <num>"));  newVector.addElement(new Option("\tSpecify L-norm to use (default 2.0)","lnorm",1,"-lnorm <num>"));  newVector.addElement(new Option("\tConvert all tokens to lowercase " + "before adding to the dictionary.","lowercase",0,"-lowercase"));  newVector.addElement(new Option("\tThe stopwords handler to use (default Null).","-stopwords-handler",1,"-stopwords-handler"));  newVector.addElement(new Option("\tThe tokenizing algorihtm (classname plus parameters) to use.\n" + "\t(default: " + WordTokenizer.class.getName() + ")","tokenizer",1,"-tokenizer <spec>"));  newVector.addElement(new Option("\tThe stemmering algorihtm (classname plus parameters) to use.","stemmer",1,"-stemmer <spec>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public void testJarVerificationModifiedEntry() throws IOException {  Support_Resources.copyFile(resources,null,integrateJar);  File f=new File(resources,integrateJar);  JarFile jarFile=new JarFile(f);  ZipEntry zipEntry=jarFile.getJarEntry(integrateJarEntry);  zipEntry.setSize(zipEntry.getSize() + 1);  jarFile.getInputStream(zipEntry).skip(Long.MAX_VALUE);  jarFile=new JarFile(f);  zipEntry=jarFile.getJarEntry(integrateJarEntry);  zipEntry.setSize(zipEntry.getSize() - 1);  try {    jarFile.getInputStream(zipEntry).read(new byte[5000],0,5000);    fail("SecurityException expected");  } catch (  SecurityException e) {  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.908 -0500",hash_original_method="BE11705FB1BB92402BBB6B9F4331FB04",hash_generated_method="9679846F14674BBCF1733A34EAF385DD") public void put(String hostname,String detailMessage){  put(hostname,detailMessage,false);}  }
class C{  public MBeanInvocationFailedException(final String message,final Throwable thr){  super(message,thr);}  }
class C{  public RsFluent withHeader(final CharSequence key,final CharSequence value){  return new RsFluent(new RsWithHeader(this,key,value));}  }
class C{  public void removePlugin(AbstractPlugin plugin){  plugin.removePluginObserver(this);  activePlugins.remove(plugin);  allPlugins.remove(plugin);}  }
class C{  public int size(){  return map.size();}  }
class C{  public void startCDATA() throws org.xml.sax.SAXException {  m_cdataStartCalled=true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void registerInput(String varName,JavaRDD<String> rdd,String format,long rlen,long clen,long nnz) throws DMLRuntimeException {  registerInput(varName,rdd.mapToPair(new ConvertStringToLongTextPair()),format,rlen,clen,nnz,null);}  }
class C{  public String createExperimentIndexEntry(ResultProducer rp) throws Exception {  if (m_Debug) {    System.err.println("Creating experiment index entry...");  }  int numRows=0;  String query="SELECT COUNT(*) FROM " + EXP_INDEX_TABLE;  ResultSet rs=select(query);  if (m_Debug) {    System.err.println("...getting number of rows");  }  if (rs.next()) {    numRows=rs.getInt(1);  }  close(rs);  String expType=rp.getClass().getName();  String expParams=rp.getCompatibilityState();  query="INSERT INTO " + EXP_INDEX_TABLE + " VALUES ('"+ expType+ "', '"+ expParams+ "', "+ numRows+ " )";  if (update(query) > 0) {    if (m_Debug) {      System.err.println("...create returned resultset");    }  }  close();  if (!m_setAutoCommit) {    m_Connection.commit();    m_Connection.setAutoCommit(true);  }  String tableName=getResultsTableName(rp);  if (tableName == null) {    throw new Exception("Problem adding experiment index entry");  }  try {    query="DROP TABLE " + tableName;    if (m_Debug) {      System.err.println(query);    }    update(query);  } catch (  SQLException ex) {    System.err.println(ex.getMessage());  }  return tableName;}  }
class C{  public Builder clearCenterInside(){  centerInside=false;  return this;}  }
class C{  public int put(K key,int value){  int previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  K oldKey=(K)_set[index];  _set[index]=key;  _values[index]=value;  if (isNewMapping) {    postInsertHook(oldKey == null);  }  return previous;}  }
class C{  public Duration minusMillis(long millisToSubtract){  return (millisToSubtract == Long.MIN_VALUE ? plusMillis(Long.MAX_VALUE).plusMillis(1) : plusMillis(-millisToSubtract));}  }
class C{  protected ElemVariable createPseudoVarDecl(ElemTemplateElement psuedoVarRecipient,LocPathIterator lpi,boolean isGlobal) throws org.w3c.dom.DOMException {  QName uniquePseudoVarName=new QName(PSUEDOVARNAMESPACE,"#" + getPseudoVarID());  if (isGlobal) {    return createGlobalPseudoVarDecl(uniquePseudoVarName,(StylesheetRoot)psuedoVarRecipient,lpi);  } else   return createLocalPseudoVarDecl(uniquePseudoVarName,psuedoVarRecipient,lpi);}  }
class C{  public final Vertex orig(){  return vertex;}  }
class C{  public static byte[] md5(byte[] data){  return getDigest().digest(data);}  }
class C{  public long triggerSearch(final SearchInformation info){  if (!validate(info)) {    return 0;  }  long token=newSearchToken();  SearchResultMediator resultTab=addResultTab(token,info);  performSearch(token,info.getQuery());  if (info.getTitle().startsWith("youtube:")) {    resultTab.selectSchemaBoxByMediaType(NamedMediaType.getFromMediaType(MediaType.getVideoMediaType()));  }  return token;}  }
class C{  public HttpEntity receiveResponseEntity(final Headers headers){  assertOpen();  BasicHttpEntity entity=new BasicHttpEntity();  long len=determineLength(headers);  if (len == ContentLengthStrategy.CHUNKED) {    entity.setChunked(true);    entity.setContentLength(-1);    entity.setContent(new ChunkedInputStream(inbuffer));  } else   if (len == ContentLengthStrategy.IDENTITY) {    entity.setChunked(false);    entity.setContentLength(-1);    entity.setContent(new IdentityInputStream(inbuffer));  } else {    entity.setChunked(false);    entity.setContentLength(len);    entity.setContent(new ContentLengthInputStream(inbuffer,len));  }  String contentTypeHeader=headers.getContentType();  if (contentTypeHeader != null) {    entity.setContentType(contentTypeHeader);  }  String contentEncodingHeader=headers.getContentEncoding();  if (contentEncodingHeader != null) {    entity.setContentEncoding(contentEncodingHeader);  }  return entity;}  }
class C{  private static <T>SortedSet<T> cast(Iterable<T> iterable){  return (SortedSet<T>)iterable;}  }
class C{  public JsonWriter(final Writer writer,final int mode,final Format format,final int bufferSize){  super(mode,format.getNameCoder());  this.writer=new QuickWriter(writer,bufferSize);  this.format=format;  depth=(mode & DROP_ROOT_MODE) == 0 ? -1 : 0;}  }
class C{  public float[] generateTransformedValuesLine(List<? extends Entry> entries,float phaseX,float phaseY,int from,int to){  final int count=(int)Math.ceil((to - from) * phaseX) * 2;  float[] valuePoints=new float[count];  for (int j=0; j < count; j+=2) {    Entry e=entries.get(j / 2 + from);    if (e != null) {      valuePoints[j]=e.getXIndex();      valuePoints[j + 1]=e.getVal() * phaseY;    }  }  getValueToPixelMatrix().mapPoints(valuePoints);  return valuePoints;}  }
class C{  public static Future<BoxedUnit> zkAsyncCreateFullPathOptimistic(final ZooKeeperClient zkc,final String pathToCreate,final byte[] data,final List<ACL> acl,final CreateMode createMode){  Optional<String> parentPathShouldNotCreate=Optional.absent();  return zkAsyncCreateFullPathOptimistic(zkc,pathToCreate,parentPathShouldNotCreate,data,acl,createMode);}  }
class C{  public void unloadSound(int resourceId){  Integer soundId=mResourceToSoundId.get(resourceId);  if (soundId == null) {    throw new IllegalStateException("Sound not loaded. Must call #loadSound first.");  }  mSoundPool.unload(soundId);}  }
class C{  private void closeReader(){  if (reader != null)   try {    reader.close();  } catch (  IOException ioException) {    logger.error(AVRO_LOADER_INSTANCE_READ_ERROR + " : {}",ioException);    throw new RuntimeException(AVRO_LOADER_INSTANCE_READ_ERROR + " : " + ioException);  }}  }
class C{  protected Caret createCaret(){  return MotifTextUI.createCaret();}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public void windowStateChanged(WindowEvent e){  ((WindowStateListener)a).windowStateChanged(e);  ((WindowStateListener)b).windowStateChanged(e);}  }
class C{  static void test10(){  String header="H\uD800e\uDFFFa\uDBFF\uDC00der<";  for (int i=0; i < input.length; i++) {    String wholeString=header + input[i];    String str=wholeString.substring(header.length());    int length=str.length();    for (int j=0; j <= length; j++) {      int nCodePoints=Character.codePointCount(str,j,length);      int result=str.offsetByCodePoints(j,nCodePoints);      check(result != length,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ nCodePoints+ ")",result,length);      result=str.offsetByCodePoints(length,-nCodePoints);      int expected=j;      if (j > 0 && j < length) {        int cp=str.codePointBefore(j + 1);        if (Character.isSupplementaryCodePoint(cp)) {          expected--;        }      }      check(result != expected,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ (-nCodePoints)+ ")",result,expected);    }    for (int j=length; j >= 0; j--) {      int nCodePoints=Character.codePointCount(str,0,j);      int result=str.offsetByCodePoints(0,nCodePoints);      int expected=j;      if (j > 0 && j < length) {        int cp=str.codePointAt(j - 1);        if (Character.isSupplementaryCodePoint(cp)) {          expected++;        }      }      check(result != expected,"offsetByCodePoints(input[" + i + "], 0, "+ nCodePoints+ ")",result,expected);      result=str.offsetByCodePoints(j,-nCodePoints);      check(result != 0,"offsetByCodePoints(input[" + i + "], "+ j+ ", "+ (-nCodePoints)+ ")",result,0);    }  }}  }
class C{  protected String ensureNamespace(XmlNamespace namespace){  if (namespace.uri.equals(defaultNamespace)) {    return null;  }  String alias=checkNamespace(namespace.uri);  if (alias == null) {    Element current=currentElement();    namespace=ensureUniqueNamespaceAlias(current,namespace);    current.addNamespace(namespace);    alias=namespace.alias;  }  return alias;}  }
class C{  public <KeyType,ValueType>HGIndex<KeyType,ValueType> register(HGIndexer<?,?> indexer){  boolean createNewIndex=false;  boolean activate=hg.count(graph,hg.typePlus(indexer.getType())) == 0;  for (  HGHandle currentType : hg.typePlus(indexer.getType()).getSubTypes(graph)) {    List<HGIndexer<?,?>> forType=indexers.get(currentType);    if (forType == null) {      forType=new ArrayList<HGIndexer<?,?>>();      indexers.put(currentType,forType);    }    if (!forType.contains(indexer)) {      if (currentType.equals(indexer.getType()))       createNewIndex=true;      if (activate)       forType.add(indexer);    }  }  if (createNewIndex) {    HGHandle hIndexer=graph.add(indexer);    HGIndex<KeyType,ValueType> idx=getOrCreateIndex(indexer);    if (!activate)     graph.add(new ApplyNewIndexer(hIndexer));    return idx;  } else {    return getIndex(indexer);  }}  }
class C{  public CodonFitnessFunction(int codonCount,double alpha,double beta,double pInv){  GammaDistribution gamma=new GammaDistribution(beta,alpha);  stateSize=20;  fitness=new double[codonCount][stateSize];  byte[] aaFittest=new byte[codonCount];  fittest=getFittestGenome(codonCount,aaFittest);  for (int i=0; i < codonCount; i++) {    fitness[i][aaFittest[i]]=1.0;    for (int j=0; j < stateSize; j++) {      if (j != aaFittest[i]) {        if (MathUtils.nextDouble() < pInv) {          fitness[i][j]=0.0;        } else {          double prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;          while ((prob <= 0.0) || (prob >= 1.0)) {            prob=Math.round(MathUtils.nextDouble() * 1000.0) / 1000.0;          }          fitness[i][j]=Math.max(0.0,1.0 - gamma.quantile(prob));        }      }    }  }}  }
class C{  @Override public void load(final URL n3,final RDFFormat rdfFormat) throws IOException, RDFParseException, RepositoryException {  final InputStream in=n3.openConnection().getInputStream();  try {    final Reader reader=new InputStreamReader(in);    final BigdataSailRepositoryConnection m_cxn=repo.getConnection();    try {      m_cxn.setAutoCommit(false);      m_cxn.add(reader,"kb",rdfFormat);      m_cxn.commit();    }  finally {      m_cxn.close();    }  }  finally {    in.close();  }}  }
class C{  private void createRandomSample() throws IOException {  BufferedReader input=new BufferedReader(new InputStreamReader(System.in));  String line="";  System.out.println("Please set sample size (as int value) of the sample to be created:");  line=input.readLine();  int sampleSize=Integer.parseInt(line);  System.out.println("Please set name of output file:");  String outputFile=input.readLine();  BufferedWriter bw=new BufferedWriter(new FileWriter(outputFile));  Random rnd=new Random();  Integer id=rnd.nextInt(urlArray.length);  TreeSet<Integer> selectedIds=new TreeSet<Integer>();  System.out.println("Creating sample ...");  for (int i=0; i < sampleSize; i++) {    while (selectedIds.contains(id)) {      id=rnd.nextInt(urlArray.length);    }    selectedIds.add(id);    bw.write(id + "\t" + urlArray[id]+ "\t"+ (semIds.contains(id) ? "true" : "false")+ "\t"+ "false"+ "\n");  }  bw.close();  System.out.println("... created sample.");}  }
class C{  public ByteString toAsciiLowercase(){  for (int i=0; i < data.length; i++) {    byte c=data[i];    if (c < 'A' || c > 'Z')     continue;    byte[] lowercase=data.clone();    lowercase[i++]=(byte)(c - ('A' - 'a'));    for (; i < lowercase.length; i++) {      c=lowercase[i];      if (c < 'A' || c > 'Z')       continue;      lowercase[i]=(byte)(c - ('A' - 'a'));    }    return new ByteString(lowercase);  }  return this;}  }
class C{  public boolean hasQuotaUsedExt(){  return hasExtension(GphotoQuotaUsed.class);}  }
class C{  @GET @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/hosts") @Deprecated public HostList listHosts(@PathParam("id") URI id) throws DatabaseException {  getTenantById(id,false);  verifyAuthorizedInTenantOrg(id,getUserFromContext());  HostList list=new HostList();  list.setHosts(map(ResourceTypeEnum.HOST,listChildren(id,Host.class,"label","tenant")));  return list;}  }
class C{  public char first(){  return aci.setIndex(begin);}  }
class C{  public static boolean isAlphaMutableImageSupported(){  return Display.impl.isAlphaMutableImageSupported();}  }
class C{  private void parseStartTag(){  final int uriIdx=getLEWord(mParserOffset + (4 * WORD_SIZE));  final int nameIdx=getLEWord(mParserOffset + (5 * WORD_SIZE));  final int attrCount=getLEWord(mParserOffset + (7 * WORD_SIZE));  final String name=getString(nameIdx);  String uri, qname;  if (uriIdx == 0xFFFFFFFF) {    uri="";    qname=name;  } else {    uri=getString(uriIdx);    if (mNamespaces.containsKey(uri)) {      qname=mNamespaces.get(uri) + ':' + name;    } else {      qname=name;    }  }  mParserOffset+=(9 * WORD_SIZE);  final Attribute[] attrs=new Attribute[attrCount];  for (int a=0; a < attrCount; a++) {    attrs[a]=parseAttribute();    mParserOffset+=(5 * 4);  }  mListener.startElement(uri,name,qname,attrs);}  }
class C{  public boolean intersects(Interval1D that){  if (this.max < that.min)   return false;  if (that.max < this.min)   return false;  return true;}  }
class C{  public ST createStringTemplateInternally(CompiledST impl){  ST st=createStringTemplate(impl);  if (trackCreationEvents && st.debugState != null) {    st.debugState.newSTEvent=null;  }  return st;}  }
class C{  public void focusLost(FocusEvent e){}  }
class C{  public PointerHierarchyRepresentationResult run(Database database,Relation<O> relation){  DBIDs ids=relation.getDBIDs();  WritableDBIDDataStore pi=DataStoreUtil.makeDBIDStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC);  WritableDoubleDataStore lambda=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_STATIC,Double.POSITIVE_INFINITY);  WritableDoubleDataStore m=DataStoreUtil.makeDoubleStorage(ids,DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  final Logging log=getLogger();  FiniteProgress progress=log.isVerbose() ? new FiniteProgress("Running SLINK",ids.size(),log) : null;  ArrayDBIDs aids=DBIDUtil.ensureArray(ids);  DBIDArrayIter id=aids.iter(), it=aids.iter();  for (; id.valid(); id.advance()) {    pi.put(id,id);  }  log.incrementProcessed(progress);  if (getDistanceFunction() instanceof PrimitiveDistanceFunction) {    PrimitiveDistanceFunction<? super O> distf=(PrimitiveDistanceFunction<? super O>)getDistanceFunction();    for (id.seek(1); id.valid(); id.advance()) {      step2primitive(id,it,id.getOffset(),relation,distf,m);      process(id,aids,it,id.getOffset(),pi,lambda,m);      log.incrementProcessed(progress);    }  } else {    DistanceQuery<O> distQ=database.getDistanceQuery(relation,getDistanceFunction());    for (id.seek(1); id.valid(); id.advance()) {      step2(id,it,id.getOffset(),distQ,m);      process(id,aids,it,id.getOffset(),pi,lambda,m);      log.incrementProcessed(progress);    }  }  log.ensureCompleted(progress);  m.destroy();  m=null;  return new PointerHierarchyRepresentationResult(ids,pi,lambda);}  }
class C{  @Override public boolean add(E e){  return addLastImpl(e);}  }
class C{  public Field(String name,String value,IndexableFieldType type){  if (name == null) {    throw new IllegalArgumentException("name must not be null");  }  if (value == null) {    throw new IllegalArgumentException("value must not be null");  }  if (!type.stored() && type.indexOptions() == IndexOptions.NONE) {    throw new IllegalArgumentException("it doesn't make sense to have a field that " + "is neither indexed nor stored");  }  this.type=type;  this.name=name;  this.fieldsData=value;}  }
class C{  public boolean hasDetail(){  return hasExtension(CrawlIssueDetail.class);}  }
class C{  public R proceed(final T1 param1,final T2 param2,final T3 param3){  return fn.apply(param1,param2,param3);}  }
class C{  public static void FixPlusCal(Token[][] spec,boolean isTeX){  if (!hasPcal) {    return;  }  if (Parameters.CommentShading && Parameters.NoPlusCalShading && (pcalEnd.line < spec.length)&& (pcalEnd.item < spec[pcalEnd.line].length)) {    Token tok=pcalEnd.toToken(spec);    if (tok.type == Token.COMMENT) {      CommentToken ctok=(CommentToken)tok;      if (ctok.string.trim().equals("")) {        int rsubtype=ctok.rsubtype;        Token[] newline=new Token[spec[pcalEnd.line].length - 1];        int j=0;        for (int i=0; i < spec[pcalEnd.line].length; i++) {          if (i != pcalEnd.item) {            newline[j]=spec[pcalEnd.line][i];            j++;          }        }        if (rsubtype == CommentToken.NORMAL) {          spec[pcalEnd.line]=newline;        } else {          if (rsubtype == CommentToken.BEGIN_OVERRUN) {            Token next=spec[pcalEnd.line + 1][0];            int nextLine=pcalEnd.line + 1;            while ((next != null) && (next.type == CommentToken.COMMENT) && (((CommentToken)next).rsubtype == CommentToken.OVERRUN)&& (next.string.trim().equals(""))) {              nextLine++;              if (spec[nextLine + 1].length > 0) {                next=spec[nextLine][0];              } else {                next=null;              }            }            if ((next != null) && (next.type == CommentToken.COMMENT) && (next.string.trim().equals(""))&& (((CommentToken)next).rsubtype == CommentToken.END_OVERRUN)) {              spec[pcalEnd.line]=newline;              for (int i=pcalEnd.line + 1; i < nextLine; i++) {                spec[i]=new Token[0];              }              newline=new Token[spec[nextLine].length - 1];              System.arraycopy(spec[nextLine],1,newline,0,spec[nextLine].length - 1);              spec[nextLine]=newline;            }          }        }      }    }  }  if (!isCSyntax) {    return;  }  Position pos=pcalStart;  boolean beginningOfAlgorithm=!isTeX;  if (isTeX && pos != null) {    String firstString=pos.toToken(spec).string;    if (firstString.equals("--algorithm") || firstString.equals("--fair")) {      beginningOfAlgorithm=true;    }  }  if (beginningOfAlgorithm) {    while ((pos != null) && ((pos.toToken(spec).type != Token.BUILTIN) || (!pos.toToken(spec).string.equals("{")))) {      pos=nextTokenPos(pos,spec);    }  }  if (pos != null) {    pos=ProcessPcalBrace(pos,spec,isTeX);  }  while (isTeX && (pos != null)) {    pos=ProcessPcalBrace(pos,spec,isTeX);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static ThreadIdPatternConverter newInstance(final String[] options){  return INSTANCE;}  }
class C{  public static void doubleCenterMatrix(double[] dMatrix,int size){  double[] rowMean=new double[size];  for (int i=0, c=0; i < size; i++) {    for (int j=0; j < i; j++) {      double v=dMatrix[c++];      rowMean[i]+=v;      rowMean[j]+=v;    }    assert (dMatrix[c] == 0.);    c++;  }  double matrixMean=0.;  for (int i=0; i < size; i++) {    matrixMean+=rowMean[i];    rowMean[i]/=size;  }  matrixMean/=size * size;  for (int o=0, c=0; o < size; o++) {    for (int p=0; p <= o; p++) {      dMatrix[c++]-=rowMean[o] + rowMean[p] - matrixMean;    }  }}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY);  builder.addAttribute(ORDER_ID);  builder.addAttribute(REL);  builder.addAttribute(REF);  builder.addAttribute(PREV);  builder.addAttribute(NEXT);}  }
class C{  public static String parseCharset(Map<String,String> headers){  return parseCharset(headers,HTTP.DEFAULT_CONTENT_CHARSET);}  }
class C{  private void readHeaderFile(){  DataInputStream in=null;  BufferedReader br=null;  boolean byteOrderRead=false;  try {    FileInputStream fstream=new FileInputStream(this.headerFile);    in=new DataInputStream(fstream);    br=new BufferedReader(new InputStreamReader(in));    if (this.headerFile != null) {      String line;      String[] str;      while ((line=br.readLine()) != null) {        str=line.split("\t");        if (str[0].toLowerCase().contains("min:") && (str[0].toLowerCase().contains("display") == false)) {          this.minimumValue=Float.parseFloat(str[1]);        } else         if (str[0].toLowerCase().contains("max:") && (str[0].toLowerCase().contains("display") == false)) {          this.maximumValue=Float.parseFloat(str[1]);        } else         if (str[0].toLowerCase().contains("north")) {          this.north=Double.parseDouble(str[1]);        } else         if (str[0].toLowerCase().contains("south")) {          this.south=Double.parseDouble(str[1]);        } else         if (str[0].toLowerCase().contains("west")) {          this.west=Double.parseDouble(str[1]);        } else         if (str[0].toLowerCase().contains("east")) {          this.east=Double.parseDouble(str[1]);        } else         if (str[0].toLowerCase().contains("cols")) {          this.numberColumns=Integer.parseInt(str[1]);        } else         if (str[0].toLowerCase().contains("rows")) {          this.numberRows=Integer.parseInt(str[1]);        } else         if (str[0].toLowerCase().contains("data type")) {          this.setDataType(str[1]);        } else         if (str[0].toLowerCase().contains("data scale")) {          if (str[1].toLowerCase().contains("continuous")) {            this.setDataScale(DATA_SCALE_CONTINUOUS);          } else           if (str[1].toLowerCase().contains("categorical")) {            this.setDataScale(DATA_SCALE_CATEGORICAL);          } else           if (str[1].toLowerCase().contains("bool")) {            this.setDataScale(DATA_SCALE_BOOLEAN);          } else           if (str[1].toLowerCase().contains("rgb")) {            this.setDataScale(DATA_SCALE_RGB);          }        } else         if (str[0].toLowerCase().contains("z units")) {          this.setZUnits(str[1]);        } else         if (str[0].toLowerCase().contains("xy units")) {          this.setXYUnits(str[1]);        } else         if (str[0].toLowerCase().contains("projection")) {          this.projection=str[1];        } else         if (str[0].toLowerCase().contains("display min")) {          this.displayMinimum=Float.parseFloat(str[1]);        } else         if (str[0].toLowerCase().contains("display max")) {          this.displayMaximum=Float.parseFloat(str[1]);        } else         if (str[0].toLowerCase().contains("preferred palette")) {          this.preferredPalette=str[1].replace(".plt",".pal");        } else         if (str[0].toLowerCase().contains("byte order")) {          this.setByteOrder(str[1]);          byteOrderRead=true;        } else         if (str[0].toLowerCase().contains("nodata")) {          this.noDataValue=Double.parseDouble(str[1]);          System.out.println(str[1]);        } else         if (str[0].toLowerCase().contains("metadata entry")) {          if (str.length > 1) {            this.addMetadataEntry(str[1]);          }        }      }      in.close();      br.close();      if (byteOrderRead == false) {        this.byteOrder=ByteOrder.LITTLE_ENDIAN;      }    }  } catch (  java.io.IOException e) {    System.err.println("Error: " + e.getMessage());  }catch (  Exception e) {    System.err.println("Error: " + e.getMessage());  } finally {    try {      if (in != null || br != null) {        in.close();        br.close();      }    } catch (    java.io.IOException ex) {    }  }}  }
class C{  public static double parseDouble(CharSequence csq,Cursor cursor) throws NumberFormatException {  final int start=cursor.getIndex();  final int end=csq.length();  int i=start;  char c=csq.charAt(i);  if ((c == 'N') && match("NaN",csq,i,end)) {    cursor.increment(3);    return Double.NaN;  }  boolean isNegative=(c == '-');  if ((isNegative || (c == '+')) && (++i < end))   c=csq.charAt(i);  if ((c == 'I') && match("Infinity",csq,i,end)) {    cursor.increment(i + 8 - start);    return isNegative ? Double.NEGATIVE_INFINITY : Double.POSITIVE_INFINITY;  }  if (((c < '0') || (c > '9')) && (c != '.'))   throw new NumberFormatException("Digit or '.' required");  long decimal=0;  int decimalPoint=-1;  while (true) {    int digit=c - '0';    if ((digit >= 0) && (digit < 10)) {      long tmp=decimal * 10 + digit;      if ((decimal > LONG_MAX_DIV10) || (tmp < decimal))       throw new NumberFormatException("Too many digits - Overflow");      decimal=tmp;    } else     if ((c == '.') && (decimalPoint < 0))     decimalPoint=i; else     break;    if (++i >= end)     break;    c=csq.charAt(i);  }  if (isNegative)   decimal=-decimal;  int fractionLength=(decimalPoint >= 0) ? i - decimalPoint - 1 : 0;  int exp=0;  if ((i < end) && ((c == 'E') || (c == 'e'))) {    c=csq.charAt(++i);    boolean isNegativeExp=(c == '-');    if ((isNegativeExp || (c == '+')) && (++i < end))     c=csq.charAt(i);    if ((c < '0') || (c > '9'))     throw new NumberFormatException("Invalid exponent");    while (true) {      int digit=c - '0';      if ((digit >= 0) && (digit < 10)) {        int tmp=exp * 10 + digit;        if ((exp > INT_MAX_DIV10) || (tmp < exp))         throw new NumberFormatException("Exponent Overflow");        exp=tmp;      } else       break;      if (++i >= end)       break;      c=csq.charAt(i);    }    if (isNegativeExp)     exp=-exp;  }  cursor.increment(i - start);  return org.javolution.lang.MathLib.toDoublePow10(decimal,exp - fractionLength);}  }
class C{  public InputSource resolveEntity(String publicId,String systemId) throws SAXException {  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void markForDeletion(UIComponent c){  c.getAttributes().put(MARK_DELETED,Boolean.TRUE);  int sz=c.getChildCount();  if (sz > 0) {    UIComponent cc=null;    List cl=c.getChildren();    while (--sz >= 0) {      cc=(UIComponent)cl.get(sz);      if (cc.getAttributes().containsKey(MARK_CREATED)) {        cc.getAttributes().put(MARK_DELETED,Boolean.TRUE);      }    }  }  if (c.getFacets().size() > 0) {    Collection col=c.getFacets().values();    UIComponent fc;    for (Iterator itr=col.iterator(); itr.hasNext(); ) {      fc=(UIComponent)itr.next();      Map<String,Object> attrs=fc.getAttributes();      if (attrs.containsKey(MARK_CREATED)) {        attrs.put(MARK_DELETED,Boolean.TRUE);      } else       if (attrs.containsKey(IMPLICIT_PANEL)) {        List<UIComponent> implicitPanelChildren=fc.getChildren();        Map<String,Object> innerAttrs=null;        for (        UIComponent cur : implicitPanelChildren) {          innerAttrs=cur.getAttributes();          if (innerAttrs.containsKey(MARK_CREATED)) {            innerAttrs.put(MARK_DELETED,Boolean.TRUE);          }        }      }    }  }}  }
class C{  synchronized public void saveRobotList(List<RobotUser> robotList){  SQLiteDatabase db=dbHelper.getWritableDatabase();  if (db.isOpen()) {    db.delete(UserDao.ROBOT_TABLE_NAME,null,null);    for (    RobotUser item : robotList) {      ContentValues values=new ContentValues();      values.put(UserDao.ROBOT_COLUMN_NAME_ID,item.getUsername());      if (item.getNick() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_NICK,item.getNick());      if (item.getAvatar() != null)       values.put(UserDao.ROBOT_COLUMN_NAME_AVATAR,item.getAvatar());      db.replace(UserDao.ROBOT_TABLE_NAME,null,values);    }  }}  }
class C{  public void addAnnotation(Annotation annotation){  String type=annotation.getTypeName();  Annotation[] annotations=getAnnotations();  for (int i=0; i < annotations.length; i++) {    if (annotations[i].getTypeName().equals(type)) {      annotations[i]=annotation;      setAnnotations(annotations);      return;    }  }  Annotation[] newlist=new Annotation[annotations.length + 1];  System.arraycopy(annotations,0,newlist,0,annotations.length);  newlist[annotations.length]=annotation;  setAnnotations(newlist);}  }
class C{  private static int capacity(int expectedSize){  if (expectedSize < 3) {    checkArgument(expectedSize >= 0,"expectedSize cannot be negative but was: " + expectedSize);    return expectedSize + 1;  }  if (expectedSize < Ints.MAX_POWER_OF_TWO) {    return expectedSize + expectedSize / 3;  }  return Integer.MAX_VALUE;}  }
class C{  @AfterClass public static void tearDownClass() throws Exception {}  }
class C{  public String[] commandStationOptions(){  String[] retval={LnCommandStationType.COMMAND_STATION_IBX_TYPE_2.getName()};  return retval;}  }
class C{  public boolean okToSend(){  return (true);}  }
class C{  @Override public void print(String str){  if (str == null) {    str="null";  }  try {    write(str.getBytes(charset));  } catch (  java.io.IOException e) {    setError();  }}  }
class C{  protected void updateAgenda(final Agenda agenda,final AgendaItem left,final AgendaItem right,final Model model){  final SyntaxTreeNode leftChild=left.getParse();  final SyntaxTreeNode rightChild=right.getParse();  if (!allowUnseenRules && !seenRules.isSeen(leftChild.getCategory(),rightChild.getCategory())) {    return;  }  final List<RuleProduction> rules=getRules(leftChild.getCategory(),rightChild.getCategory());  final int size=rules.size();  for (int i=0; i < size; i++) {    final RuleProduction production=rules.get(i);    if (normalForm.isOk(leftChild.getRuleClass(),rightChild.getRuleClass(),production.getRuleType(),leftChild.getCategory(),rightChild.getCategory(),production.getCategory(),left.getStartOfSpan() == 0)) {      final SyntaxTreeNodeBinary newNode;      if (usingDependencies) {        final List<UnlabelledDependency> resolvedDependencies=new ArrayList<>();        final DependencyStructure newDependencies=production.getCombinator().apply(leftChild.getDependencyStructure(),rightChild.getDependencyStructure(),resolvedDependencies);        newNode=new SyntaxTreeNodeBinary(production.getCategory(),leftChild,rightChild,production.getRuleType(),production.isHeadIsLeft(),newDependencies,resolvedDependencies);      } else {        newNode=new SyntaxTreeNodeBinary(production.getCategory(),leftChild,rightChild,production.getRuleType(),production.isHeadIsLeft(),null,null);      }      if (isValidStep(newNode)) {        agenda.add(model.combineNodes(left,right,newNode));      }    }  }}  }
class C{  public char previous(){  if (--_pos < 0) {    _pos=0;    return DONE;  } else   return _string.charAt(_pos);}  }
class C{  GridNioFuture<?> writeNetBuffer() throws IgniteCheckedException {  assert isHeldByCurrentThread();  ByteBuffer cp=copy(outNetBuf);  return parent.proceedSessionWrite(ses,cp);}  }
class C{  @Override public long skip(long n) throws IllegalArgumentException, IOException {  if (lookaheadChar == UNDEFINED) {    lookaheadChar=super.read();  }  if (n < 0) {    throw new IllegalArgumentException("negative argument not supported");  }  if (n == 0 || lookaheadChar == END_OF_STREAM) {    return 0;  }  long skiped=0;  if (n > 1) {    skiped=super.skip(n - 1);  }  lookaheadChar=super.read();  lineCounter=Integer.MIN_VALUE;  return skiped + 1;}  }
class C{  public Object opt(String key){  return key == null ? null : this.map.get(key);}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  public RestoreSnapshotRequest indices(String... indices){  this.indices=indices;  return this;}  }
class C{  @Override protected void finalize() throws Throwable {  sysCall.sysMonitorDestroy(monitor);}  }
class C{  public InMemoryCursor(String[] columnNames){  mCurrentPosition=-1;  mColumnNames=columnNames;}  }
class C{  private static void assertCardinality(HLL hll,final Collection<Long> items) throws CloneNotSupportedException {  for (  final Long item : items) {    hll.addRaw(item);  }  final long hllCardinality=hll.cardinality();  final HLLType hllType=hll.getType();  final byte[] hllBytes=hll.toBytes();  hll=null;  HLL copy=HLL.fromBytes(hllBytes);  assertEquals(copy.cardinality(),hllCardinality);  assertEquals(copy.getType(),hllType);  assertTrue(Arrays.equals(copy.toBytes(),hllBytes));  HLL clone=copy.clone();  copy=null;  assertEquals(clone.cardinality(),hllCardinality);  assertEquals(clone.getType(),hllType);  assertTrue(Arrays.equals(clone.toBytes(),hllBytes));}  }
class C{  private void closeClient(){  if (flumeClient != null) {    try {      flumeClient.close();    } catch (    FlumeException ex) {      LOG.warn("Error while trying to close Flume Rpc Client.",ex);    } finally {      flumeClient=null;    }  }}  }
class C{  public void checkJvmMemoryGCVerboseLevel(EnumJvmMemoryGCVerboseLevel x) throws SnmpStatusException {}  }
class C{  private void persistGwtNatureSettings(IProject project,MavenProject mavenProject,Xpp3Dom mavenConfig) throws BackingStoreException {  IPath warOutDir=getWarOutDir(project,mavenProject);  WebAppProjectProperties.setWarSrcDir(project,getWarSrcDir(mavenProject,mavenConfig));  WebAppProjectProperties.setWarSrcDirIsOutput(project,getLaunchFromHere(mavenConfig));  WebAppProjectProperties.setLastUsedWarOutLocation(project,warOutDir);  WebAppProjectProperties.setGwtMavenModuleName(project,getGwtModuleName(mavenProject));  WebAppProjectProperties.setGwtMavenModuleShortName(project,getGwtModuleShortName(mavenProject));  String message="MavenProjectConfiguratior Maven: Success with setting up GWT Nature\n";  message+="\tartifactId=" + mavenProject.getArtifactId() + "\n";  message+="\tversion=" + mavenProject.getVersion() + "\n";  message+="\twarOutDir=" + warOutDir;  Activator.log(message);}  }
class C{  public boolean open(int maxRows){  log.info("MaxRows=" + maxRows);  m_maxRows=maxRows;  if (m_open) {    log.fine("already open");    dataRefreshAll();    return true;  }  if (m_virtual) {    verifyVirtual();  }  createSelectSql();  if (m_SQL == null || m_SQL.equals("")) {    log.log(Level.SEVERE,"No SQL");    return false;  }  m_loader=new Loader();  m_rowCount=m_loader.open(maxRows);  if (m_virtual) {    m_buffer=null;    m_virtualBuffer=new HashMap<Integer,Object[]>(210);  } else {    m_buffer=new ArrayList<Object[]>(m_rowCount + 10);  }  m_sort=new ArrayList<MSort>(m_rowCount + 10);  if (m_rowCount > 0) {    if (m_rowCount < 1000)     m_loader.run(); else {      m_loaderThread=new Thread(m_loader,"TLoader");      m_loaderThread.start();    }  } else   m_loader.close();  m_open=true;  m_changed=false;  m_rowChanged=-1;  m_inserting=false;  return true;}  }
class C{  static void recordStartedBy(int source){  RecordHistogram.recordSparseSlowlyHistogram("DocumentActivity.StartedBy",source);}  }
class C{  public synchronized boolean removeElement(Object obj){  modCount++;  int i=indexOf(obj);  if (i >= 0) {    removeElementAt(i);    return true;  }  return false;}  }
class C{  final public <T extends Throwable>T halt(final T cause){  halt=true;  final boolean isFirstCause=firstCause.compareAndSet(null,cause);  if (log.isEnabledFor(Level.WARN))   try {    if (!InnerCause.isInnerCause(cause,InterruptedException.class) && !InnerCause.isInnerCause(cause,CancellationException.class) && !InnerCause.isInnerCause(cause,ClosedByInterruptException.class)&& !InnerCause.isInnerCause(cause,RejectedExecutionException.class)&& !InnerCause.isInnerCause(cause,BufferClosedException.class)) {      log.warn(this + " : isFirstCause=" + isFirstCause+ " : "+ cause,cause);    }  } catch (  Throwable ex) {  }  return cause;}  }
class C{  @TargetApi(VERSION_CODES.LOLLIPOP) public static void reveal(final View view,int cx,int cy){  if (!hasLollipop()) {    view.setVisibility(View.VISIBLE);    return;  }  int finalRadius=Math.max(view.getWidth(),view.getHeight());  Animator animator=ViewAnimationUtils.createCircularReveal(view,cx,cy,0,finalRadius);  view.setVisibility(View.VISIBLE);  animator.start();}  }
class C{  public DefaultColorSelectionModel(Color color){  selectedColor=color;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void updateOffsets(){  if (this.blockAnchor.equals(RectangleAnchor.BOTTOM_LEFT)) {    this.xOffset=0.0;    this.yOffset=0.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.BOTTOM)) {    this.xOffset=-this.blockWidth / 2.0;    this.yOffset=0.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.BOTTOM_RIGHT)) {    this.xOffset=-this.blockWidth;    this.yOffset=0.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.LEFT)) {    this.xOffset=0.0;    this.yOffset=-this.blockHeight / 2.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.CENTER)) {    this.xOffset=-this.blockWidth / 2.0;    this.yOffset=-this.blockHeight / 2.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.RIGHT)) {    this.xOffset=-this.blockWidth;    this.yOffset=-this.blockHeight / 2.0;  } else   if (this.blockAnchor.equals(RectangleAnchor.TOP_LEFT)) {    this.xOffset=0.0;    this.yOffset=-this.blockHeight;  } else   if (this.blockAnchor.equals(RectangleAnchor.TOP)) {    this.xOffset=-this.blockWidth / 2.0;    this.yOffset=-this.blockHeight;  } else   if (this.blockAnchor.equals(RectangleAnchor.TOP_RIGHT)) {    this.xOffset=-this.blockWidth;    this.yOffset=-this.blockHeight;  }}  }
class C{  public AmqpSender(AmqpSession session,Target target,String senderId){  if (target == null) {    throw new IllegalArgumentException("User specified Target cannot be null");  }  this.session=session;  this.userSpecifiedTarget=target;  this.address=target.getAddress();  this.senderId=senderId;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  VisitorModelDao.createTable(db,ifNotExists);}  }
class C{  public boolean isApplicationWindowFocused(){  AccessibilityWindowInfo info=getCurrentWindow();  return info != null && info.getType() == AccessibilityWindowInfo.TYPE_APPLICATION;}  }
class C{  public Object lookup(String type,String url) throws IOException {  return new HessianRemote(type,url);}  }
class C{  @Override public int read() throws IOException {  return in.read();}  }
class C{  @PostConstruct protected void prepare(){  if (null == service) {    throw new BeanInitializationException("The service to export with the kryonet RMI must not be null.");  }  objectSpace.register(serviceId,service);  log.info("|-Service " + serviceInterface + " exported and available via kryonet RMI with the ID "+ serviceId);}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min >> 1;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) >> 2;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  private void insertEntryBefore(Entry entry,Entry nextSibling,boolean createParentRelationship){  final String nextSiblingParentId=nextSibling.getParentId();  final Entry nextSiblingParent=getEntryById(nextSiblingParentId);  if (createParentRelationship) {    entry.setParentId(nextSiblingParentId);  }  entry.setPreviousSiblingId(nextSibling.getPreviousSiblingId());  entry.setNextSiblingId(nextSibling.getId());  if (nextSibling.getPreviousSiblingId() != null) {    final Entry nextSiblingsPrevious=getEntryById(nextSibling.getPreviousSiblingId());    nextSiblingsPrevious.setNextSiblingId(entry.getId());  } else {    nextSiblingParent.setFirstChildId(entry.getId());  }  nextSibling.setPreviousSiblingId(entry.getId());}  }
class C{  @Override protected void ensureNumberOfColumns(int numberOfColumns){  if (data.length >= numberOfColumns) {    return;  }  float[] newData=new float[numberOfColumns];  System.arraycopy(data,0,newData,0,data.length);  data=newData;}  }
class C{  public void incEventsConflatedFromBatches(int numEvents){  this.stats.incInt(eventsConflatedFromBatchesId,numEvents);}  }
class C{  public boolean isRepeatable(){  return false;}  }
class C{  T queryObject(QueryEngine engine,URI uri){  if (md.isAbstract()) {    String type=URIUtil.getTypeName(uri);    for (    JClass subJc : getSubJClasses()) {      if (subJc.getClazz().getSimpleName().equals(type)) {        return (T)engine.queryObject(subJc.getClazz(),uri);      }    }  } else {    return engine.queryObject(getClazz(),uri);  }  return null;}  }
class C{  public void testConstrStringWithExponentWithPoint2(){  String a="238096483923847545735673567457356356789029578490276878.7678287e-214";  int aScale=221;  BigInteger bA=new BigInteger("2380964839238475457356735674573563567890295784902768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  public <E extends Enum<E>>E optEnum(Class<E> clazz,String key){  return this.optEnum(clazz,key,null);}  }
class C{  public SkullMetaBuilder start(final SkullMeta meta){  return new SkullMetaBuilder(meta);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void constValueIndex(int value) throws IOException {  constValueIndex('I',pool.addIntegerInfo(value));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:20.760 -0500",hash_original_method="1BD6D2C194F851AADBFBC2F46E042CD3",hash_generated_method="951EBC62540AA0526AE0DE45989413A3") public static void writeSingleByte(OutputStream out,int b) throws IOException {  byte[] buffer=new byte[1];  buffer[0]=(byte)(b & 0xff);  out.write(buffer);}  }
class C{  public boolean implicitCast(Type from,Type to) throws ClassNotFound {  if (from == to)   return true;  int toTypeCode=to.getTypeCode();switch (from.getTypeCode()) {case TC_BYTE:    if (toTypeCode == TC_SHORT)     return true;case TC_SHORT:case TC_CHAR:  if (toTypeCode == TC_INT)   return true;case TC_INT:if (toTypeCode == TC_LONG) return true;case TC_LONG:if (toTypeCode == TC_FLOAT) return true;case TC_FLOAT:if (toTypeCode == TC_DOUBLE) return true;case TC_DOUBLE:default :return false;case TC_NULL:return to.inMask(TM_REFERENCE);case TC_ARRAY:if (!to.isType(TC_ARRAY)) {return (to == Type.tObject || to == Type.tCloneable || to == Type.tSerializable);} else {do {from=from.getElementType();to=to.getElementType();} while (from.isType(TC_ARRAY) && to.isType(TC_ARRAY));if (from.inMask(TM_ARRAY | TM_CLASS) && to.inMask(TM_ARRAY | TM_CLASS)) {return isMoreSpecific(from,to);} else {return (from.getTypeCode() == to.getTypeCode());}}case TC_CLASS:if (toTypeCode == TC_CLASS) {ClassDefinition fromDef=getClassDefinition(from);ClassDefinition toDef=getClassDefinition(to);return toDef.implementedBy(this,fromDef.getClassDeclaration());} else {return false;}}}  }
class C{  @Deprecated public LongMessageDialog(String i18nKey,String message,Object... i18nArgs){  this(ApplicationFrame.getApplicationFrame(),i18nKey,message,i18nArgs);}  }
class C{  @Override public boolean isPaintable(){  return true;}  }
class C{  public void lessThan() throws IOException {  print("lessThan",null);}  }
class C{  public static double pnorm(double x,double mean,double sd){  if (sd <= 0.0)   throw new IllegalArgumentException("standard deviation <= 0.0");  return pnorm((x - mean) / sd);}  }
class C{  protected void Literal() throws javax.xml.transform.TransformerException {  int last=m_token.length() - 1;  char c0=m_tokenChar;  char cX=m_token.charAt(last);  if (((c0 == '\"') && (cX == '\"')) || ((c0 == '\'') && (cX == '\''))) {    int tokenQueuePos=m_queueMark - 1;    m_ops.m_tokenQueue.setElementAt(null,tokenQueuePos);    Object obj=new XString(m_token.substring(1,last));    m_ops.m_tokenQueue.setElementAt(obj,tokenQueuePos);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),tokenQueuePos);    m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);    nextToken();  } else {    error(XPATHErrorResources.ER_PATTERN_LITERAL_NEEDS_BE_QUOTED,new Object[]{m_token});  }}  }
class C{  public void forceRewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  if (!rewriteExif(filename,tags)) {    ExifData tempData=mData;    mData=new ExifData(DEFAULT_BYTE_ORDER);    FileInputStream is=null;    ByteArrayOutputStream bytes=null;    try {      is=new FileInputStream(filename);      bytes=new ByteArrayOutputStream();      doExifStreamIO(is,bytes);      byte[] imageBytes=bytes.toByteArray();      readExif(imageBytes);      setTags(tags);      writeExif(imageBytes,filename);    } catch (    IOException e) {      closeSilently(is);      throw e;    } finally {      is.close();      mData=tempData;    }  }}  }
class C{  public void addSubView(ISubView subView,Object layoutData){  super.addSubView(subView);  layoutDataMap.put(subView,layoutData);}  }
class C{  public static long[] toLongArray(Double[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].longValue();  }  return result;}  }
class C{  protected ST(){  if (STGroup.trackCreationEvents) {    if (debugState == null)     debugState=new ST.DebugState();    debugState.newSTEvent=new ConstructionEvent();  }}  }
class C{  public int interpElevationAt(float lat,float lon){  if (frame_is_valid == true) {    if (lat >= dsi.sw_lat && lat <= dsi.ne_lat && lon >= dsi.sw_lon && lon <= dsi.ne_lon) {      float lat_index=(lat - dsi.sw_lat) * 36000F / uhl.lat_post_interval;      float lon_index=(lon - dsi.sw_lon) * 36000F / uhl.lon_post_interval;      int lflon_index=(int)Math.floor(lon_index);      int lclon_index=(int)Math.ceil(lon_index);      int lclat_index=(int)Math.ceil(lat_index);      if (elevations[lflon_index] == null)       readDataRecord(lflon_index);      if (elevations[lclon_index] == null)       readDataRecord(lclon_index);      int ul=elevations[lflon_index][lclat_index];      int ur=elevations[lclon_index][lclat_index];      int ll=elevations[lflon_index][lclat_index];      int lr=elevations[lclon_index][lclat_index];      float answer=resolveFourPoints(ul,ur,lr,ll,lat_index,lon_index);      return Math.round(answer);    }  }  return -32767;}  }
class C{  public StoragePlatformEntity createStoragePlatformEntity(String storagePlatformCode){  StoragePlatformEntity storagePlatformEntity=new StoragePlatformEntity();  storagePlatformEntity.setName(storagePlatformCode);  return storagePlatformDao.saveAndRefresh(storagePlatformEntity);}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public static byte[] toByteArray(boolean[] array){  byte[] result=new byte[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i] ? (byte)1 : (byte)0;  }  return result;}  }
class C{  private static Class<?> loadProxyClass(String[] interfaceNames,ClassLoader defaultLoader,ClassLoader codebaseLoader,boolean preferCodebase) throws ClassNotFoundException {  ClassLoader proxyLoader=null;  Class<?>[] classObjs=new Class<?>[interfaceNames.length];  boolean[] nonpublic={false};  defaultLoaderCase:   if (defaultLoader != null) {    try {      proxyLoader=loadProxyInterfaces(interfaceNames,defaultLoader,classObjs,nonpublic);      if (loaderLog.isLoggable(Log.VERBOSE)) {        ClassLoader[] definingLoaders=new ClassLoader[classObjs.length];        for (int i=0; i < definingLoaders.length; i++) {          definingLoaders[i]=classObjs[i].getClassLoader();        }        loaderLog.log(Log.VERBOSE,"proxy interfaces found via defaultLoader, " + "defined by " + Arrays.asList(definingLoaders));      }    } catch (    ClassNotFoundException e) {      break defaultLoaderCase;    }    if (!nonpublic[0]) {      if (preferCodebase) {        try {          return Proxy.getProxyClass(codebaseLoader,classObjs);        } catch (        IllegalArgumentException e) {        }      }      proxyLoader=defaultLoader;    }    return loadProxyClass(proxyLoader,classObjs);  }  nonpublic[0]=false;  proxyLoader=loadProxyInterfaces(interfaceNames,codebaseLoader,classObjs,nonpublic);  if (loaderLog.isLoggable(Log.VERBOSE)) {    ClassLoader[] definingLoaders=new ClassLoader[classObjs.length];    for (int i=0; i < definingLoaders.length; i++) {      definingLoaders[i]=classObjs[i].getClassLoader();    }    loaderLog.log(Log.VERBOSE,"proxy interfaces found via codebase, " + "defined by " + Arrays.asList(definingLoaders));  }  if (!nonpublic[0]) {    proxyLoader=codebaseLoader;  }  return loadProxyClass(proxyLoader,classObjs);}  }
class C{  protected void createExtendedMetaDataAnnotations(){  String source="http:///org/eclipse/emf/ecore/util/ExtendedMetaData";  addAnnotation(componentEClass,source,new String[]{"name","Component","kind","elementOnly"});  addAnnotation(getComponent_InputComponetRefs(),source,new String[]{"kind","element","name","inputComponetRefs"});  addAnnotation(getComponent_OutputComponetRefs(),source,new String[]{"kind","element","name","outputComponetRefs"});  addAnnotation(getComponent_InputPortRefs(),source,new String[]{"kind","element","name","inputPortRefs"});  addAnnotation(getComponent_OutputPortRefs(),source,new String[]{"kind","element","name","outputPortRefs"});  addAnnotation(getComponent_Id(),source,new String[]{"kind","attribute","name","id"});  addAnnotation(getComponent_InputCnt(),source,new String[]{"kind","attribute","name","inputCnt"});  addAnnotation(getComponent_OutputCnt(),source,new String[]{"kind","attribute","name","outputCnt"});  addAnnotation(portEClass,source,new String[]{"name","Port","kind","empty"});  addAnnotation(getPort_Id(),source,new String[]{"kind","attribute","name","id"});  addAnnotation(getPort_Type(),source,new String[]{"kind","attribute","name","type"});}  }
class C{  public void onConfigurationChanged(){  int curFirst=pager.getCurrentScreen() * PAGE_SIZE;  calPageSize();  int newPage=curFirst / PAGE_SIZE;  removeViewAt(1);  afterPlatformListGot();  pager.setCurrentScreen(newPage);}  }
class C{  @Override public void onSwiped(RecyclerView.ViewHolder swiped,int direction){}  }
class C{  public WindItemRenderer(){  super();}  }
class C{  private Replace parseReplace(){  Replace command=new Replace(session);  currentPrepared=command;  read("INTO");  Table table=readTableOrView();  command.setTable(table);  if (readIf("(")) {    if (isSelect()) {      command.setQuery(parseSelect());      read(")");      return command;    }    Column[] columns=parseColumnList(table);    command.setColumns(columns);  }  if (readIf("VALUES")) {    do {      ArrayList<Expression> values=New.arrayList();      read("(");      if (!readIf(")")) {        do {          if (readIf("DEFAULT")) {            values.add(null);          } else {            values.add(readExpression());          }        } while (readIfMore());      }      command.addRow(values.toArray(new Expression[values.size()]));    } while (readIf(","));  } else {    command.setQuery(parseSelect());  }  return command;}  }
class C{  void update(double amount){  balance+=amount;}  }
class C{  public void animateX(int durationMillis,Easing.EasingOption easing){  if (android.os.Build.VERSION.SDK_INT < 11)   return;  ObjectAnimator animatorX=ObjectAnimator.ofFloat(this,"phaseX",0f,1f);  animatorX.setInterpolator(Easing.getEasingFunctionFromOption(easing));  animatorX.setDuration(durationMillis);  animatorX.addUpdateListener(mListener);  animatorX.start();}  }
class C{  public LetterTokenizer(){}  }
class C{  private static JsonElement createTestValueForAny(){  return new JsonParser().parse("{a:100,b:{c:'blah'}}");}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();}  }
class C{  public Builder withTcpKeepAlive(){  return withTcpKeepAlive(true);}  }
class C{  public static void runExamples(WebmasterToolsService myService) throws ServiceException, IOException {  printUserSites(myService);  insertSite(myService,SAMPLE_SITE);  printSiteSettings(myService);  listVerificationValues(myService,SAMPLE_SITE);  printUserSitemaps(myService,SAMPLE_SITE);  insertSitemap(myService,SAMPLE_SITE,SAMPLE_SITEMAP);  deleteSitemap(myService,SAMPLE_SITE,SAMPLE_SITEMAP);  deleteSite(myService,SAMPLE_SITE);}  }
class C{  public DoubleList(Collection<Double> c){  this(c.size());  this.addAll(c);}  }
class C{  int releaseSession(final RWWriteCacheService cache){  int freebits=0;  if (m_addr != 0) {    for (int i=0; i < m_live.length; i++) {      int chkbits=m_transients[i];      chkbits&=~m_live[i];      m_transients[i]=m_live[i] | m_commit[i];      final int startBit=i * 32;      freebits+=clearCacheBits(cache,startBit,chkbits);    }  }  return freebits;}  }
class C{  protected void parseScript(){  try {    AParserWrapper parser=AParserWrapper.createParser(script.getScriptType().isPYDML());    Map<String,Object> inputParameters=script.getInputParameters();    Map<String,String> inputParametersStringMaps=MLContextUtil.convertInputParametersForParser(inputParameters,script.getScriptType());    String scriptExecutionString=script.getScriptExecutionString();    dmlProgram=parser.parse(null,scriptExecutionString,inputParametersStringMaps);  } catch (  ParseException e) {    throw new MLContextException("Exception occurred while parsing script",e);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  private FlexibleNode readExternalNode(TaxonList taxonList) throws IOException, ImportException {  FlexibleNode node=new FlexibleNode();  String label=readToken(":(),;");  Taxon taxon;  if (taxonList != null) {    int index=taxonList.getTaxonIndex(label);    if (index != -1) {      taxon=taxonList.getTaxon(index);    } else {      throw new UnknownTaxonException("Taxon in tree, '" + label + "' is unknown");    }  } else {    taxon=new Taxon(label);  }  node.setTaxon(taxon);  return node;}  }
class C{  public void restart(){synchronized (mThread) {    mPosition=0;    mThread.notify();  }}  }
class C{  protected void angularObjectClientBind(NotebookSocket conn,HashSet<String> userAndRoles,Notebook notebook,Message fromMessage) throws Exception {  String noteId=fromMessage.getType("noteId");  String varName=fromMessage.getType("name");  Object varValue=fromMessage.get("value");  String paragraphId=fromMessage.getType("paragraphId");  Note note=notebook.getNote(noteId);  if (paragraphId == null) {    throw new IllegalArgumentException("target paragraph not specified for " + "angular value bind");  }  if (note != null) {    final InterpreterGroup interpreterGroup=findInterpreterGroupForParagraph(note,paragraphId);    final AngularObjectRegistry registry=interpreterGroup.getAngularObjectRegistry();    if (registry instanceof RemoteAngularObjectRegistry) {      RemoteAngularObjectRegistry remoteRegistry=(RemoteAngularObjectRegistry)registry;      pushAngularObjectToRemoteRegistry(noteId,paragraphId,varName,varValue,remoteRegistry,interpreterGroup.getId(),conn);    } else {      pushAngularObjectToLocalRepo(noteId,paragraphId,varName,varValue,registry,interpreterGroup.getId(),conn);    }  }}  }
class C{  public static float[] convertDoublesToFloats(double[] input){  if (input == null)   return null;  float[] output=new float[input.length];  for (int i=0; i < input.length; ++i) {    output[i]=(float)input[i];  }  return output;}  }
class C{  public SignatureVisitor visitReturnType(){  return this;}  }
class C{  @Override public FileLock tryLock(long position,long size,boolean shared) throws IOException {  throw new IOException("Method is unsupported.");}  }
class C{  public HashCode append(final boolean value){  iTotal=iTotal * iConstant + (value ? 0 : 1);  return this;}  }
class C{  public String detectPageType(String userAgent){  HTMLResponse res=downloadUrl(this.url,userAgent);  String page=res.getHtml();  if (!res.getAuthenticateHeader().equals("")) {    this.authString=res.getAuthenticateHeader();    if (res.getAuthenticateHeader().contains("Digest"))     this.authType=AuthType.DIGEST; else     if (res.getAuthenticateHeader().contains("Basic"))     this.authType=AuthType.BASIC;  }  if (res.hasSucceeded()) {    if (res.wasRedirected()) {      if (res.getLastUrl().contains("https") && !this.url.contains("https"))       this.setSSL(true);      this.url=res.getLastUrl();    }    Document doc=Jsoup.parse(page,this.url);    Elements images=doc.select("img[src$=-day.png]");    if (images.size() == 0)     images=doc.select("img[src$=-day.svg]");    if (images.size() > 0)     return "munin/x/"; else {      Elements muninHosts=doc.select("span.host");      Elements munstrapHosts=doc.select("ul.groupview");      if (muninHosts.size() > 0 || munstrapHosts.size() > 0)       return "munin/"; else       return res.getResponseCode() + " - " + res.getResponseMessage();    }  } else   if (res.getTimeout())   return "timeout"; else   return res.getResponseCode() + " - " + res.getResponseMessage();}  }
class C{  protected SVGOMImageElement(){}  }
class C{  public FunctionDeclaration createFunctionDeclaration(){  FunctionDeclarationImpl functionDeclaration=new FunctionDeclarationImpl();  return functionDeclaration;}  }
class C{  public Boolean isRollingOrder(){  return rollingOrder;}  }
class C{  public boolean remove(Runnable runnable){  return deltaQueue.remove(runnable);}  }
class C{  @SuppressWarnings("deprecation") private View makeAndAddView(int position,int childrenBottomOrTop,boolean flow,boolean selected){  View child;  int childrenLeft;  if (!mDataChanged) {    child=mRecycler.getActiveView(position);    if (child != null) {      if (ViewDebug.TRACE_RECYCLER) {        ViewDebug.trace(child,ViewDebug.RecyclerTraceType.RECYCLE_FROM_ACTIVE_HEAP,position,getChildCount());      }      childrenLeft=getItemLeft(position);      setupChild(child,position,childrenBottomOrTop,flow,childrenLeft,selected,true);      return child;    }  }  onItemAddedToList(position,flow);  childrenLeft=getItemLeft(position);  child=obtainView(position,mIsScrap);  setupChild(child,position,childrenBottomOrTop,flow,childrenLeft,selected,mIsScrap[0]);  return child;}  }
class C{  public T caseConstantDeclaration_(ConstantDeclaration_ object){  return null;}  }
class C{  public DatabaseTableConfig(Class<T> dataClass,String tableName,List<DatabaseFieldConfig> fieldConfigs){  this.dataClass=dataClass;  this.tableName=tableName;  this.fieldConfigs=fieldConfigs;}  }
class C{  protected boolean isSeen(MimeMessage aMessage) throws MessagingException {  boolean isSeen;  if (isMarkSeenPermanent())   isSeen=aMessage.isSet(Flags.Flag.SEEN); else   isSeen=handleMarkSeenNotPermanent(aMessage);  return isSeen;}  }
class C{  void onEnd(){  long now=U.currentTimeMillis();  lastEndTime=now;  lastExecTime=now - lastStartTime;  totalExecTime+=lastExecTime;  execCnt++;  running=false;}  }
class C{  public E poll(){  return pollFirst();}  }
class C{  public static boolean isBug367599(Throwable t){  if (t instanceof FilerException) {    for (    StackTraceElement ste : t.getStackTrace()) {      if (ste.toString().contains("org.eclipse.jdt.internal.apt.pluggable.core.filer.IdeFilerImpl.create")) {        return true;      }    }  }  if (t.getCause() != null) {    return isBug367599(t.getCause());  }  return false;}  }
class C{  public static boolean isValidRange(char channelNo){  if (channelNo >= 0x4000) {    return true;  }  return false;}  }
class C{  private static long position(int level,long offset){  assert level >= 1;  return (1 << (level - 1)) | (offset << level);}  }
class C{  public Bounds addZValue(final double z){  final double small=z - FUDGE_FACTOR;  if (minZ == null || minZ > small) {    minZ=new Double(small);  }  final double large=z + FUDGE_FACTOR;  if (maxZ == null || maxZ < large) {    maxZ=new Double(large);  }  return this;}  }
class C{  private void writeSubscriptionKey(long triggerProcessKey) throws Exception {  String subKey=determineSubscriptionKey(triggerProcessKey);  createTriggerProcessIdentifier(triggerProcessKey,TriggerProcessIdentifierName.SUBSCRIPTION_KEY,subKey);}  }
class C{  public RrdDefTemplate(InputSource xmlInputSource) throws IOException {  super(xmlInputSource);}  }
class C{  private boolean hasSuite(Method[] methods){  for (  Method m : methods) {    if (m.getName().equals("suite") && m.isPublic() && m.isStatic()&& m.getSignature().equals("()Ljunit/framework/Test;")) {      return true;    }  }  return false;}  }
class C{  public DrawerBuilder withOnDrawerItemClickListener(@NonNull Drawer.OnDrawerItemClickListener onDrawerItemClickListener){  this.mOnDrawerItemClickListener=onDrawerItemClickListener;  return this;}  }
class C{  public WaitingThread nextThread(){  return this.waitingThreads.peek();}  }
class C{  public SystemInfo(){  m_Info=new Hashtable<String,String>();  readProperties();}  }
class C{  private static void sqlFieldsQueryWithJoin(){  IgniteCache<AffinityKey<Long>,Person> cache=Ignition.ignite().cache(COLLOCATED_PERSON_CACHE);  String sql="select concat(firstName, ' ', lastName), org.name " + "from Person, \"" + ORG_CACHE + "\".Organization as org "+ "where Person.orgId = org.id";  QueryCursor<List<?>> cursor=cache.query(new SqlFieldsQuery(sql));  List<List<?>> res=cursor.getAll();  print("Names of all employees and organizations they belong to: ",res);}  }
class C{  public MXRecord(Name name,int dclass,long ttl,int priority,Name target){  super(name,Type.MX,dclass,ttl,priority,"priority",target,"target");}  }
class C{  public boolean isDecided(){  return decided;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static boolean isSpace(int c){  return c < 0x10000 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER:    setDeclaredTypeAccessModifier((TypeAccessModifier)newValue);  return;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME:setDeclaredProvidedByRuntime((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public void testMultipleDataSources() throws MalformedURLException {  DataSourceFixture fixture=ConfigurationFixtureFactory.createDataSource();  if ("glassfish4x".equals(getContainer().getId())) {    fixture.jndiLocation="jdbc/__default";  }  Configuration config=getLocalContainer().getConfiguration();  config.setProperty(DatasourcePropertySet.DATASOURCE + ".1",fixture.buildDataSourcePropertyString());  fixture=ConfigurationFixtureFactory.createAnotherDataSource();  testServletThatIssuesGetConnectionFrom(fixture,"two-datasources");}  }
class C{  public MetricsServlet(MetricRegistry registry){  super(LOGGER,MetricsServlet.class);  this.registry=registry;  getMapper().registerModule(new MetricsModule(TimeUnit.SECONDS,TimeUnit.SECONDS,false));}  }
class C{  @Override public void proceedTest(String type) throws IOException {  System.out.println("Test type: " + type);  try (CipherInputStream ciIn2=new CipherInputStream(getCiInput(),getDecryptCipher())){    for (int i=0; i < NUMBER_OF_BLOCKS; i++) {      if (type.equals(CICO_PBE_Test.BYTE_ARR_BUFFER)) {        proceedSkipTestUsingByteArrayBufferingType(ciIn2,i);      } else {        proceedSkipTestUsingIntBufferingType(ciIn2,i);      }      if (ciIn2.available() >= DISCARD) {        ciIn2.skip(DISCARD);      } else {        for (int k=0; k < DISCARD; k++) {          ciIn2.read();        }      }    }  }   if (!TestUtilities.equalsBlockPartial(plainText,outputText,BLOCK,SAVE)) {    throw new RuntimeException("outputText not same with expectedText" + " when test " + type);  }}  }
class C{  public DeviceAutomator pressDelete(){  mDevice.pressDelete();  return this;}  }
class C{  public synchronized void mark(int readlimit){  if (in == null) {    try {      in=owner.readNotify();    } catch (    IOException e) {      return;    }  }  in.mark(readlimit);}  }
class C{  Item newMethodItem(final String owner,final String name,final String desc,final boolean itf){  int type=itf ? IMETH : METH;  key3.set(type,owner,name,desc);  Item result=get(key3);  if (result == null) {    put122(type,newClass(owner),newNameType(name,desc));    result=new Item(index++,key3);    put(result);  }  return result;}  }
class C{  @Override public QueryResponse queryAndStreamResponse(SolrParams params,StreamingResponseCallback callback) throws SolrServerException, IOException {  if (this.solr0 != null)   return this.solr0.queryAndStreamResponse(params,callback);  if (this.solr1 != null)   return this.solr1.queryAndStreamResponse(params,callback);  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.125 -0500",hash_original_method="E369FF088FB91F5BEAD9EC65B9119630",hash_generated_method="61BEE3B61F78F6F1FCC670D4CBF72211") static Object newInstance(ClassLoader classLoader,String className) throws ClassNotFoundException, IllegalAccessException, InstantiationException {  Class driverClass;  if (classLoader == null) {    driverClass=Class.forName(className);  } else {    driverClass=classLoader.loadClass(className);  }  return driverClass.newInstance();}  }
class C{  public EmpiricalWalker(double[] pdf,int interpolationType,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setState(pdf,interpolationType);  setState2(pdf);}  }
class C{  public boolean visitTopLevelVariableOrParamDecl(ElemTemplateElement elem){  return true;}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  public String toString(){  return getSymbol().toUpperCase();}  }
class C{  protected SIPServerTransaction(SIPTransactionStack sipStack,MessageChannel newChannelToUse){  super(sipStack,newChannelToUse);  if (sipStack.maxListenerResponseTime != -1) {    sipStack.getTimer().schedule(new ListenerExecutionMaxTimer(),sipStack.maxListenerResponseTime * 1000);  }  this.rseqNumber=(int)(Math.random() * 1000);  if (sipStack.isLoggingEnabled()) {    sipStack.getStackLogger().logDebug("Creating Server Transaction" + this.getBranchId());    sipStack.getStackLogger().logStackTrace();  }}  }
class C{  protected void log(int type,Object message,Throwable t){  StringBuffer buf=new StringBuffer();  if (showDateTime) {    buf.append(dateFormatter.format(new Date()));    buf.append(" ");  }switch (type) {case SimpleLog.LOG_LEVEL_TRACE:    buf.append("[TRACE] ");  break;case SimpleLog.LOG_LEVEL_DEBUG:buf.append("[DEBUG] ");break;case SimpleLog.LOG_LEVEL_INFO:buf.append("[INFO] ");break;case SimpleLog.LOG_LEVEL_WARN:buf.append("[WARN] ");break;case SimpleLog.LOG_LEVEL_ERROR:buf.append("[ERROR] ");break;case SimpleLog.LOG_LEVEL_FATAL:buf.append("[FATAL] ");break;}if (showShortName) {if (shortLogName == null) {shortLogName=logName.substring(logName.lastIndexOf(".") + 1);shortLogName=shortLogName.substring(shortLogName.lastIndexOf("/") + 1);}buf.append(String.valueOf(shortLogName)).append(" - ");} else if (showLogName) {buf.append(String.valueOf(logName)).append(" - ");}buf.append(String.valueOf(message));if (t != null) {buf.append(" <");buf.append(t.toString());buf.append(">");java.io.StringWriter sw=new java.io.StringWriter(1024);java.io.PrintWriter pw=new java.io.PrintWriter(sw);t.printStackTrace(pw);pw.close();buf.append(sw.toString());}write(buf);}  }
class C{  public BinaryBitmap crop(int left,int top,int width,int height){  LuminanceSource newSource=binarizer.getLuminanceSource().crop(left,top,width,height);  return new BinaryBitmap(binarizer.createBinarizer(newSource));}  }
class C{  public String optString(int index){  return this.optString(index,"");}  }
class C{  private void findLicenseUrl(Element element){  if (!"a".equalsIgnoreCase(element.getTagName()))   return;  String href=element.getAttribute("href");  if (href == null)   return;  try {    URL url=new URL(base,href);    if ("http".equalsIgnoreCase(url.getProtocol()) && "creativecommons.org".equalsIgnoreCase(url.getHost()) && url.getPath() != null && url.getPath().startsWith("/licenses/") && url.getPath().length() > "/licenses/".length()) {      String rel=element.getAttribute("rel");      if (rel != null && "license".equals(rel) && this.relLicense == null) {        this.relLicense=url;      } else       if (this.anchorLicense == null) {        this.anchorLicense=url;      }    }  } catch (  MalformedURLException e) {  }}  }
class C{  public void assertSameSet(Query q1,Query q2) throws Exception {  assertSubsetOf(q1,q2);  assertSubsetOf(q2,q1);}  }
class C{  private List<BloomFilter<E>> bulkLoad(List<BloomFilter<E>> mbfList,InsDelUpdateStatistics stat){  if (mbfList.size() > 0) {    BloomFilter<E> base=mbfList.get(0);    for (    BloomFilter<E> c : mbfList) {      if (c.h != base.h)       throw new RuntimeException("You need to use the same hasher throughout!");    }  }  ArrayList<BloomFilter<E>> copy=new ArrayList<BloomFilter<E>>(mbfList);  mbfList=sort(copy);  BFINode<E> rightmost;  BloomFilter<E> sampleFilter=mbfList.get(0);  BloomFilter<E> zeroFilter=createZeroBloomFilter(sampleFilter);  this.root=new BFINode<E>(zeroFilter,this.order,this.splitFull);  rightmost=this.root;  BFINode<E> current;  for (  BloomFilter<E> bf : mbfList) {    current=new BFINode<E>(bf,this.order,this.splitFull);    this.idMap.put(bf.getID(),current);    rightmost=insertRight(true,rightmost,current,rightmost,stat);  }  return mbfList;}  }
class C{  public Channel(String channelName){  this();  mName=channelName;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  super.onMeasure(widthMeasureSpec,heightMeasureSpec);  int measureWidth=MeasureSpec.makeMeasureSpec(getMeasuredWidth() - getPaddingLeft() - getPaddingRight(),MeasureSpec.EXACTLY);  int measureHeight=MeasureSpec.makeMeasureSpec(getMeasuredHeight() - getPaddingTop() - getPaddingBottom(),MeasureSpec.EXACTLY);  if (dragView != null) {    dragView.measure(measureWidth,measureHeight);  }}  }
class C{  public JSObject callObject(String key){  return (JSObject)call(key);}  }
class C{  public boolean isNamespaceProcessingEnabled(){  return processNamespaces;}  }
class C{  private void checkPopup(MouseEvent e){  if (e.isPopupTrigger()) {    popup.show(this,e.getX(),e.getY());  }}  }
class C{  public Boolean isSkip(){  return skip;}  }
class C{  Record(ContentType type,ProtocolVersion version,int epoch,long sequenceNumber,byte[] fragmentBytes,InetSocketAddress peerAddress){  this(type,epoch,sequenceNumber);  this.version=version;  this.fragmentBytes=Arrays.copyOf(fragmentBytes,fragmentBytes.length);  this.length=fragmentBytes.length;  this.peerAddress=peerAddress;}  }
class C{  public String redo(){  if (!canRedo()) {    return "";  }  m_nCurrentEditAction++;  UndoAction undoAction=m_undoStack.get(m_nCurrentEditAction);  m_bNeedsUndoAction=false;  undoAction.redo();  m_bNeedsUndoAction=true;  return undoAction.getRedoMsg();}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public T caseObjectBindingPattern(ObjectBindingPattern object){  return null;}  }
class C{  public ConnectionPoolTimeoutException(String message){  super(message);}  }
class C{  public void add(@NonNull List items){  int previousCount=getItemPositions();  getList().addAll(items);  notifyItemRangeInserted(previousCount + 1,items.size());}  }
class C{  public int countElementosUsoFicha(String[] idsFichas){  String selectRentrega=DbSelectStatement.getSelectStmtText(RelacionEntregaDBEntityBaseImpl.TABLE_NAME,DbUtil.getColumnNamesWithAlias(new DbColumnDef[]{new DbColumnDef(ALIAS_CONTADOR,DbUtil.getCountColumn(RelacionEntregaDBEntityBaseImpl.CAMPO_ID))}),DBUtils.WHERE + DBUtils.generateInTokenField(RelacionEntregaDBEntityBaseImpl.CAMPO_IDFICHA,idsFichas),false);  String selectListaDescriptora=DbSelectStatement.getSelectStmtText(CatalogoListaDescriptoresDBEntityImpl.TABLE_NAME,DbUtil.getColumnNamesWithAlias(new DbColumnDef[]{new DbColumnDef(ALIAS_CONTADOR,DbUtil.getCountColumn(CatalogoListaDescriptoresDBEntityImpl.CAMPO_ID))}),DBUtils.WHERE + DBUtils.generateInTokenField(CatalogoListaDescriptoresDBEntityImpl.CAMPO_ID_FICHA_DESCR_PREF,idsFichas),false);  String selectDescriptor=DbSelectStatement.getSelectStmtText(DescriptorDBEntityImpl.TABLE_NAME,DbUtil.getColumnNamesWithAlias(new DbColumnDef[]{new DbColumnDef(ALIAS_CONTADOR,DbUtil.getCountColumn(DescriptorDBEntityImpl.CAMPO_ID))}),DBUtils.WHERE + DBUtils.generateInTokenField(DescriptorDBEntityImpl.CAMPO_ID_FICHA_DESCR,idsFichas),false);  String selectNivelCF=DbSelectStatement.getSelectStmtText(NivelCFDBEntityImpl.NIVELCF_TABLE_NAME,DbUtil.getColumnNamesWithAlias(new DbColumnDef[]{new DbColumnDef(ALIAS_CONTADOR,DbUtil.getCountColumn(NivelCFDBEntityImpl.ID_NIVEL_FIELD))}),DBUtils.WHERE + DBUtils.generateInTokenField(NivelCFDBEntityImpl.ID_FICHA_FIELD,idsFichas),false);  String selectElementoCF=DbSelectStatement.getSelectStmtText(ElementoCuadroClasificacionDBEntityImplBase.TABLE_NAME_ELEMENTO,DbUtil.getColumnNamesWithAlias(new DbColumnDef[]{new DbColumnDef(ALIAS_CONTADOR,DbUtil.getCountColumn(ElementoCuadroClasificacionDBEntityImplBase.ID_ELEMENTO_FIELD))}),DBUtils.WHERE + DBUtils.generateInTokenField(ElementoCuadroClasificacionDBEntityImplBase.IDFICHADESCR_FIELD,idsFichas),false);  StringBuffer sentenciaWhere=new StringBuffer().append(DBUtils.WHERE);  for (int i=0; i < idsFichas.length; i++) {    sentenciaWhere.append(DBUtils.generateLikeTokenField(SerieDBEntityImpl.CAMPO_INFO_FICHA_UDOC_REP_ECM,"<ID_FICHADESCRPREFUDOC>" + idsFichas[i] + "</ID_FICHADESCRPREFUDOC>"));    if (++i < idsFichas.length) {      sentenciaWhere.append(DBUtils.OR);      --i;    }  }  String selectSerie=DbSelectStatement.getSelectStmtText(SerieDBEntityImpl.TABLE_NAME_SERIE,DbUtil.getColumnNamesWithAlias(new DbColumnDef[]{new DbColumnDef(ALIAS_CONTADOR,DbUtil.getCountColumn(SerieDBEntityImpl.CAMPO_ID))}),sentenciaWhere.toString(),false);  String selectDivisionFS=DbSelectStatement.getSelectStmtText(DivisionFSDBEntityImpl.TABLE_NAME_DIVISIONFS,DbUtil.getColumnNamesWithAlias(new DbColumnDef[]{new DbColumnDef(ALIAS_CONTADOR,DbUtil.getCountColumn(DivisionFSDBEntityImpl.CAMPO_IDFS))}),DBUtils.WHERE + DBUtils.generateInTokenField(DivisionFSDBEntityImpl.CAMPO_ID_FICHA,idsFichas),false);  String uniones=DBUtils.generateUNIONTokens(new String[]{selectRentrega,selectListaDescriptora,selectDescriptor,selectNivelCF,selectElementoCF,selectSerie,selectDivisionFS});  DbTableDef table=new DbTableDef(uniones,ALIAS_UNIONES);  StringBuffer qual=new StringBuffer();  qual.append(DBUtils.WHERE);  qual.append(DBUtils.generateNEQTokenField(new DbColumnDef(ALIAS_CONTADOR,DbDataType.SHORT_INTEGER,false),0));  try {    return DbSelectFns.selectCount(getConnection(),table.getAliasedName(),ALIAS_CONTADOR,qual.toString(),false);  } catch (  Exception e) {    throw new DBException(e);  }}  }
class C{  private void processDeletionRequest(EBSVolumesEnumerationSubStage next){  if (this.aws.deletionNextPageLink == null) {    this.service.logFine("Finished deletion of disk states for AWS");    this.aws.subStage=next;    handleReceivedEnumerationData();    return;  }  this.service.logFine("Querying page [%s] for resources to be deleted",this.aws.deletionNextPageLink);  this.service.sendRequest(Operation.createGet(this.service,this.aws.deletionNextPageLink).setCompletion(null));}  }
class C{  public void deleteVideoSharings() throws RemoteException {  mRichcallService.tryToDeleteVideoSharings();}  }
class C{  public final double weight(){  return m_Weight;}  }
class C{  public void initialPositionIsSet(){  initialKingFile=getFile(bitscanForward(getPieceBB(WHITE,KING)));  long rookBB=getPieceBB(WHITE,ROOK);  int firstRook=getFile(bitscanForward(rookBB));  rookBB=bitscanClear(rookBB);  int secondRook=getFile(bitscanForward(rookBB));  if (firstRook < initialKingFile) {    initialLongRookFile=firstRook;    initialShortRookFile=secondRook;  } else {    initialLongRookFile=secondRook;    initialShortRookFile=firstRook;  }}  }
class C{  protected void startSchedulerDriver(){  driver.start();  LOG.info("Waiting for Mesos Framework get registered");  long timeout=MesosContext.getHeronMesosFrameworkStagingTimeoutMs(config);  if (!mesosFramework.waitForRegistered(timeout,TimeUnit.MILLISECONDS)) {    throw new RuntimeException("Failed to register with Mesos Master in time");  }}  }
class C{  public String toFormattedString(){  return "Device properties:\n    " + createString("\n    ");}  }
class C{  private void resetTabInfo(){  if (this.m_lookup == null)   return;  String col=m_lookup.getColumnName();  if (col.indexOf('.') != -1)   col=col.substring(col.indexOf('.') + 1);  final String[] infoNames;  if (col.equals("M_Product_ID")) {    infoNames=new String[]{"M_Product_ID","M_AttributeSetInstance_ID","M_Locator_ID","M_Lookup_ID"};  } else   if (col.equals("C_BPartner_ID")) {    infoNames=new String[]{"C_BPartner_ID","AD_User_ID","C_BPartner_Location_ID"};  } else {    infoNames=new String[]{};  }  for (  String name : infoNames) {    Env.setContext(Env.getCtx(),m_lookup.getWindowNo(),Env.TAB_INFO,name,null);  }}  }
class C{  DrawingData(Context context){  Resources res=context.getResources();  mPadding=res.getDimensionPixelOffset(R.dimen.ntp_list_item_padding);  mMinHeight=res.getDimensionPixelSize(R.dimen.ntp_list_item_min_height);  mFaviconSize=res.getDimensionPixelSize(R.dimen.default_favicon_size);  mFaviconContainerSize=res.getDimensionPixelSize(R.dimen.ntp_list_item_favicon_container_size);  mTextSize=res.getDimensionPixelSize(R.dimen.ntp_list_item_text_size);  mTextColor=res.getColor(R.color.ntp_list_item_text);}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  IfStatement s=(IfStatement)clone();  s.cond=cond.copyInline(ctx);  if (ifTrue != null) {    s.ifTrue=ifTrue.copyInline(ctx,valNeeded);  }  if (ifFalse != null) {    s.ifFalse=ifFalse.copyInline(ctx,valNeeded);  }  return s;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ACTION___ANONYMOUS_ACTION_11:    getAnonymous_action_1_1().clear();  getAnonymous_action_1_1().addAll((Collection<? extends Anonymous_action_1_>)newValue);return;case UmplePackage.ACTION___CODE_1:setCode_1((String)newValue);return;case UmplePackage.ACTION___ANONYMOUS_ACTION_21:getAnonymous_action_2_1().clear();getAnonymous_action_2_1().addAll((Collection<? extends Anonymous_action_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Identifier declareStartOfScopeTempVariable(){  Scope s=getClosestDeclarationContainer();  Identifier id=new Identifier(FilePosition.UNKNOWN,"temp" + (s.tempVariableCounter++) + "_");  s.addStartOfScopeStatement((Statement)substV("var @id;","id",id));  return id;}  }
class C{  public static byte[] toBytes(String s){  try {    return s.getBytes(UTF8_ENCODING);  } catch (  UnsupportedEncodingException e) {    LOG.error("UTF-8 not supported?",e);    return null;  }}  }
class C{  @Override public ServiceExceptionMethodNotFound rethrow(String msg){  return new ServiceExceptionMethodNotFound(msg,this);}  }
class C{  protected void addDocumentationPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_DocumentedElement_documentation_feature"),getString("_UI_PropertyDescriptor_description","_UI_DocumentedElement_documentation_feature","_UI_DocumentedElement_type"),BasePackage.Literals.DOCUMENTED_ELEMENT__DOCUMENTATION,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  private static List<TestSpecification> createTestSpecifications(CSVData accessSpec,CSVData data,int indexOffset,int rowOffset,int columnOffset){  List<TestSpecification> result=new LinkedList<>();  CSVData testSpec=data.getRange(0,0,-1,4);  Scenario scenario=Scenario.parse(testSpec.get(0,0));  ClassifierType supplierType=ClassifierType.parse(testSpec.get(0,1));  ClassifierType clientType=ClassifierType.parse(testSpec.get(0,2));  int count=0;  for (int row=0; row < testSpec.getSize(); row++) {    ClientLocation clientLocation=ClientLocation.parse(testSpec.get(row,3));    CSVRecord expectations=data.get(row).getRange(4,-1);    for (int col=0; col < expectations.getSize(); col++) {      Member.Static memberStatic=parseStatic(accessSpec.get(0,getFieldIndex(col,2 * 4 * 6)));      UsageType usageType=UsageType.parse(accessSpec.get(1,getFieldIndex(col,4 * 6)));      Classifier.Visibility supplierVisibility=parseClassifierVisibility(accessSpec.get(2,getFieldIndex(col,6)));      Member.Visibility memberVisibility=parseMemberVisibility(accessSpec.get(3,col));      Expectation expectation=Expectation.parse(expectations.get(col));      if (expectation != Expectation.SKIP) {        TestSpecification specification=new TestSpecification(count + indexOffset,row + rowOffset,col + columnOffset,scenario,supplierType,clientType,clientLocation,usageType,supplierVisibility,memberVisibility,memberStatic,expectation);        result.add(specification);        count++;      }    }  }  return result;}  }
class C{  protected float toPx(final float dp){  return dp * views[0].getContext().getResources().getDisplayMetrics().density;}  }
class C{  protected void prepareConnection(HttpURLConnection con,int contentLength) throws IOException {  super.prepareConnection(con,contentLength);  if (getReadTimeout() != -1) {    con.setReadTimeout(getReadTimeout());  }}  }
class C{  public static PublicKey generatePublicKey(String encodedPublicKey){  try {    byte[] decodedKey=Base64.decode(encodedPublicKey);    KeyFactory keyFactory=KeyFactory.getInstance(KEY_FACTORY_ALGORITHM);    return keyFactory.generatePublic(new X509EncodedKeySpec(decodedKey));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }catch (  InvalidKeySpecException e) {    Log.e(TAG,"Invalid key specification.");    throw new IllegalArgumentException(e);  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");    throw new IllegalArgumentException(e);  }}  }
class C{  public ComputedValue(Value cv){  cascadedValue=cv;}  }
class C{  private static boolean isNanp(String dialStr){  boolean retVal=false;  if (dialStr != null) {    if (dialStr.length() == NANP_LENGTH) {      if (isTwoToNine(dialStr.charAt(0)) && isTwoToNine(dialStr.charAt(3))) {        retVal=true;        for (int i=1; i < NANP_LENGTH; i++) {          char c=dialStr.charAt(i);          if (!PhoneNumberUtils.isISODigit(c)) {            retVal=false;            break;          }        }      }    }  } else {    Rlog.e("isNanp: null dialStr passed in",dialStr);  }  return retVal;}  }
class C{  void reducePentanomial(int m,int[] pc){  int i;  int p0, p1, p2, p3;  int q0, q1, q2, q3;  long t;  p0=m >>> 5;  q0=32 - (m & 0x1f);  p1=(m - pc[0]) >>> 5;  q1=32 - ((m - pc[0]) & 0x1f);  p2=(m - pc[1]) >>> 5;  q2=32 - ((m - pc[1]) & 0x1f);  p3=(m - pc[2]) >>> 5;  q3=32 - ((m - pc[2]) & 0x1f);  int max=((m << 1) - 2) >>> 5;  int min=p0;  for (i=max; i > min; i--) {    t=value[i] & 0x00000000ffffffffL;    value[i - p0 - 1]^=(int)(t << q0);    value[i - p0]^=t >>> (32 - q0);    value[i - p1 - 1]^=(int)(t << q1);    value[i - p1]^=t >>> (32 - q1);    value[i - p2 - 1]^=(int)(t << q2);    value[i - p2]^=t >>> (32 - q2);    value[i - p3 - 1]^=(int)(t << q3);    value[i - p3]^=t >>> (32 - q3);    value[i]=0;  }  t=value[min] & 0x00000000ffffffffL & (0xffffffffL << (m & 0x1f));  value[0]^=t >>> (32 - q0);  if (min - p1 - 1 >= 0) {    value[min - p1 - 1]^=(int)(t << q1);  }  value[min - p1]^=t >>> (32 - q1);  if (min - p2 - 1 >= 0) {    value[min - p2 - 1]^=(int)(t << q2);  }  value[min - p2]^=t >>> (32 - q2);  if (min - p3 - 1 >= 0) {    value[min - p3 - 1]^=(int)(t << q3);  }  value[min - p3]^=t >>> (32 - q3);  value[min]&=reverseRightMask[m & 0x1f];  blocks=((m - 1) >>> 5) + 1;  len=m;}  }
class C{  public Builder readBatchSize(int readBatchSize){  this.readBatchSize=readBatchSize;  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.379 -0500",hash_original_method="82F7EC85E36A90F9F5B540B5F614E447",hash_generated_method="C091F0C3991B47619AF8DBFB659D7B1A") static public void assertEquals(String message,String expected,String actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  throw new ComparisonFailure(message,expected,actual);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public synchronized void calcViewableMediaNodes(Context context,AreaPanelSpaceTimeBox localApStbox){  int newViewMltWidth=(int)(localApStbox.getWidth() * prefs.multiMLTAreaWidthToApBoxWidth);  if (newViewMltWidth != currViewMltWidth)   lastApStBox=null;  currViewMltWidth=newViewMltWidth;  AreaPanelSpaceTimeBox adjustedApStBox=new AreaPanelSpaceTimeBox(localApStbox);  adjustedApStBox.addBorder(currViewMltWidth);  ArrayList<MediaLocTime> mltsToClearOut=new ArrayList<MediaLocTime>();  Processor addViewNodeProcessor=createAddViewNodeProcessor(context,adjustedApStBox,mltsToClearOut);  for (  MediaLocTime mlt : mltsToClearOut) {    notifyMltNotClean(mlt);  }  if (lastApStBox == null || adjustedApStBox.minZ >= lastApStBox.maxZ || adjustedApStBox.maxZ <= lastApStBox.minZ || adjustedApStBox.minX >= lastApStBox.maxX || adjustedApStBox.maxX <= lastApStBox.minX || adjustedApStBox.minY >= lastApStBox.maxY || adjustedApStBox.maxY <= lastApStBox.minY) {    Log.d(GTG.TAG,"querying box");    rTree.query(addViewNodeProcessor,adjustedApStBox);  } else {    AABB temp=adjustedApStBox.clone();    if (adjustedApStBox.maxZ > lastApStBox.maxZ) {      temp.minZ=lastApStBox.maxZ;      rTree.query(addViewNodeProcessor,temp);      temp.minZ=adjustedApStBox.minZ;    }    if (adjustedApStBox.minZ < lastApStBox.minZ) {      temp.maxZ=lastApStBox.minZ;      rTree.query(addViewNodeProcessor,temp);      temp.maxZ=adjustedApStBox.maxZ;    }    if (adjustedApStBox.minX < lastApStBox.minX) {      temp.maxX=lastApStBox.minX;      rTree.query(addViewNodeProcessor,temp);      temp.maxX=adjustedApStBox.maxX;    }    if (adjustedApStBox.maxX > lastApStBox.maxX) {      temp.minX=lastApStBox.maxX;      rTree.query(addViewNodeProcessor,temp);      temp.minX=adjustedApStBox.minX;    }    if (adjustedApStBox.minY < lastApStBox.minY) {      temp.maxY=lastApStBox.minY;      rTree.query(addViewNodeProcessor,temp);      temp.maxY=adjustedApStBox.maxY;    }    if (adjustedApStBox.maxY > lastApStBox.maxY) {      temp.minY=lastApStBox.maxY;      rTree.query(addViewNodeProcessor,temp);      temp.minY=adjustedApStBox.minY;    }  }  for (Iterator<ViewMLT> i=GTG.mediaLocTimeMap.displayedViewMlts.iterator(); i.hasNext(); ) {    ViewMLT viewMlt=i.next();    if (viewMlt.totalNodes == 0 || viewMlt.width != GTG.mediaLocTimeMap.currViewMltWidth || viewMlt.minZ < adjustedApStBox.minZ || viewMlt.maxZ > adjustedApStBox.maxZ) {      i.remove();      continue;    }    int centerX=viewMlt.getCenterX();    int centerY=viewMlt.getCenterY();    if (centerX < adjustedApStBox.minX || centerX > adjustedApStBox.maxX || centerY < adjustedApStBox.minY || centerY > adjustedApStBox.maxY) {      i.remove();    }  }  lastApStBox=adjustedApStBox;}  }
class C{  public void writing(int tenant){  starting(Operation.WRITE,tenant);}  }
class C{  public static InternalDistributedMember readEssentialData(DataInput in) throws IOException, ClassNotFoundException {  final InternalDistributedMember mbr=new InternalDistributedMember();  mbr._readEssentialData(in);  return mbr;}  }
class C{  public static final LinkedHashMap<String,ContentBody> basicRequestParts(final Switchboard sb,final String targetHash,final String salt){  final LinkedHashMap<String,ContentBody> parts=new LinkedHashMap<String,ContentBody>();  if (sb.peers.mySeed().hash != null) {    parts.put("iam",UTF8.StringBody(sb.peers.mySeed().hash));    if (targetHash != null)     parts.put("youare",UTF8.StringBody(targetHash));    final GenericFormatter my_SHORT_SECOND_FORMATTER=new GenericFormatter(GenericFormatter.FORMAT_SHORT_SECOND,GenericFormatter.time_second);    parts.put("mytime",UTF8.StringBody(my_SHORT_SECOND_FORMATTER.format()));    parts.put("myUTC",UTF8.StringBody(Long.toString(System.currentTimeMillis())));    parts.put(SwitchboardConstants.NETWORK_NAME,UTF8.StringBody(Switchboard.getSwitchboard().getConfig(SwitchboardConstants.NETWORK_NAME,Seed.DFLT_NETWORK_UNIT)));  }  parts.put("key",UTF8.StringBody(salt));  final String authenticationControl=sb.getConfig("network.unit.protocol.control","uncontrolled");  final String authenticationMethod=sb.getConfig("network.unit.protocol.request.authentication.method","");  if ((authenticationControl.equals("controlled")) && (authenticationMethod.length() > 0)) {    if (authenticationMethod.equals("salted-magic-sim")) {      final String magic=sb.getConfig("network.unit.protocol.request.authentication.essentials","");      final String md5=Digest.encodeMD5Hex(salt + sb.peers.mySeed().hash + magic);      parts.put("magicmd5",UTF8.StringBody(md5));    }  }  return parts;}  }
class C{  public static CollectionsFragment newInstance(){  CollectionsFragment fragment=new CollectionsFragment();  return fragment;}  }
class C{  public boolean isEmpty(){  return remainingLength() == 0;}  }
class C{  public static int carrierCapacity(final Unit unit,final Territory territoryUnitsAreCurrentlyIn){  if (Matches.UnitIsCarrier.match(unit)) {    if (Matches.UnitHasWhenCombatDamagedEffect(UnitAttachment.UNITSMAYNOTLANDONCARRIER).match(unit)) {      if (Matches.UnitHasWhenCombatDamagedEffect(UnitAttachment.UNITSMAYNOTLEAVEALLIEDCARRIER).match(unit)) {        int cargo=0;        final Collection<Unit> airCargo=territoryUnitsAreCurrentlyIn.getUnits().getMatches(new CompositeMatchAnd<>(Matches.UnitIsAir,Matches.UnitCanLandOnCarrier));        for (        final Unit airUnit : airCargo) {          final TripleAUnit taUnit=(TripleAUnit)airUnit;          if (taUnit.getTransportedBy() != null && taUnit.getTransportedBy().equals(unit)) {            cargo+=UnitAttachment.get(taUnit.getType()).getCarrierCost();          }        }        return cargo;      } else {        return 0;      }    } else {      final UnitAttachment ua=UnitAttachment.get(unit.getType());      return ua.getCarrierCapacity();    }  }  return 0;}  }
class C{  private void relaxResources(boolean releaseMediaPlayer){  LogHelper.d(TAG,"relaxResources. releaseMediaPlayer=",releaseMediaPlayer);  if (releaseMediaPlayer && mMediaPlayer != null) {    mMediaPlayer.reset();    mMediaPlayer.release();    mMediaPlayer=null;  }  if (mWifiLock.isHeld()) {    mWifiLock.release();  }}  }
class C{  public ConfigurationProviderManager(){}  }
class C{  public BigDecimalPolynomial mult(BigDecimalPolynomial poly2){  int N=coeffs.length;  if (poly2.coeffs.length != N) {    throw new IllegalArgumentException("Number of coefficients must be the same");  }  BigDecimalPolynomial c=multRecursive(poly2);  if (c.coeffs.length > N) {    for (int k=N; k < c.coeffs.length; k++) {      c.coeffs[k - N]=c.coeffs[k - N].add(c.coeffs[k]);    }    c.coeffs=copyOf(c.coeffs,N);  }  return c;}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'GROUP_DB'";  db.execSQL(sql);}  }
class C{  private final void completeResumeLocked(ActivityRecord next){  next.idle=false;  next.results=null;  next.newIntents=null;  Message msg=mHandler.obtainMessage(IDLE_TIMEOUT_MSG);  msg.obj=next;  mHandler.sendMessageDelayed(msg,IDLE_TIMEOUT);  if (false) {    msg=mHandler.obtainMessage(IDLE_NOW_MSG);    msg.obj=next;    mHandler.sendMessage(msg);  }  if (mMainStack) {    mService.reportResumedActivityLocked(next);  }  if (mMainStack) {    mService.setFocusedActivityLocked(next);  }  next.resumeKeyDispatchingLocked();  ensureActivitiesVisibleLocked(null,0);  mService.mWindowManager.executeAppTransition();  mNoAnimActivities.clear();  if (next.app != null) {synchronized (mService.mProcessStatsThread) {      next.cpuTimeAtResume=mService.mProcessStats.getCpuTimeForPid(next.app.pid);    }  } else {    next.cpuTimeAtResume=0;  }  updatePrivacyGuardNotificationLocked(next);}  }
class C{  public void addAll(T... items){synchronized (mLock) {    if (mOriginalValues != null) {      Collections.addAll(mOriginalValues,items);    } else {      Collections.addAll(mObjects,items);    }  }  if (mNotifyOnChange)   notifyDataSetChanged();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static void fitCubic(ArrayList<Point2D.Double> d,int first,int last,Point2D.Double tHat1,Point2D.Double tHat2,double errorSquared,BezierPath bezierPath){  Point2D.Double[] bezCurve;  double[] u;  double maxError;  int[] splitPoint=new int[1];  int nPts;  double iterationError;  int maxIterations=4;  Point2D.Double tHatCenter;  int i;  tHat1=(Point2D.Double)tHat1.clone();  tHat2=(Point2D.Double)tHat2.clone();  iterationError=errorSquared * errorSquared;  nPts=last - first + 1;  if (nPts == 2) {    double dist=v2DistanceBetween2Points(d.get(last),d.get(first)) / 3.0;    bezCurve=new Point2D.Double[4];    for (i=0; i < bezCurve.length; i++) {      bezCurve[i]=new Point2D.Double();    }    bezCurve[0]=d.get(first);    bezCurve[3]=d.get(last);    v2Add(bezCurve[0],v2Scale(tHat1,dist),bezCurve[1]);    v2Add(bezCurve[3],v2Scale(tHat2,dist),bezCurve[2]);    bezierPath.curveTo(bezCurve[1].x,bezCurve[1].y,bezCurve[2].x,bezCurve[2].y,bezCurve[3].x,bezCurve[3].y);    return;  }  u=chordLengthParameterize(d,first,last);  bezCurve=generateBezier(d,first,last,u,tHat1,tHat2);  maxError=computeMaxError(d,first,last,bezCurve,u,splitPoint);  if (maxError < errorSquared) {    addCurveTo(bezCurve,bezierPath,errorSquared,first == 0 && last == d.size() - 1);    return;  }  if (maxError < iterationError) {    double[] uPrime;    for (i=0; i < maxIterations; i++) {      uPrime=reparameterize(d,first,last,u,bezCurve);      bezCurve=generateBezier(d,first,last,uPrime,tHat1,tHat2);      maxError=computeMaxError(d,first,last,bezCurve,uPrime,splitPoint);      if (maxError < errorSquared) {        addCurveTo(bezCurve,bezierPath,errorSquared,first == 0 && last == d.size() - 1);        return;      }      u=uPrime;    }  }  tHatCenter=computeCenterTangent(d,splitPoint[0]);  if (first < splitPoint[0]) {    fitCubic(d,first,splitPoint[0],tHat1,tHatCenter,errorSquared,bezierPath);  } else {    bezierPath.lineTo(d.get(splitPoint[0]).x,d.get(splitPoint[0]).y);  }  v2Negate(tHatCenter);  if (splitPoint[0] < last) {    fitCubic(d,splitPoint[0],last,tHatCenter,tHat2,errorSquared,bezierPath);  } else {    bezierPath.lineTo(d.get(last).x,d.get(last).y);  }}  }
class C{  public boolean updateDevice(String mac,String name,boolean isLocked){  JsonObject initJsonObjectParams=broadlinkStandardParams(BroadlinkConstants.CMD_DEVICE_UPDATE_ID,BroadlinkConstants.CMD_DEVICE_UPDATE);  initJsonObjectParams.addProperty("mac",mac);  initJsonObjectParams.addProperty("name",name);  initJsonObjectParams.addProperty("lock",isLocked ? 1 : 0);  JsonObject out=broadlinkExecuteCommand(initJsonObjectParams);  int code=out.get(BroadlinkConstants.CODE).getAsInt();  return code == 0;}  }
class C{  Type type(){  return type;}  }
class C{  public ZoneOffsetTransition nextTransition(Instant instant){  if (savingsInstantTransitions.length == 0) {    return null;  }  long epochSec=instant.getEpochSecond();  if (epochSec >= savingsInstantTransitions[savingsInstantTransitions.length - 1]) {    if (lastRules.length == 0) {      return null;    }    int year=findYear(epochSec,wallOffsets[wallOffsets.length - 1]);    ZoneOffsetTransition[] transArray=findTransitionArray(year);    for (    ZoneOffsetTransition trans : transArray) {      if (epochSec < trans.toEpochSecond()) {        return trans;      }    }    if (year < Year.MAX_VALUE) {      transArray=findTransitionArray(year + 1);      return transArray[0];    }    return null;  }  int index=Arrays.binarySearch(savingsInstantTransitions,epochSec);  if (index < 0) {    index=-index - 1;  } else {    index+=1;  }  return new ZoneOffsetTransition(savingsInstantTransitions[index],wallOffsets[index],wallOffsets[index + 1]);}  }
class C{  public Script parseExpression(PuzzleBuildingBlock buildingBlock,String expression){  try {    Script script=shell.parse(expression);    script.setProperty("buildingBlock",buildingBlock);    return script;  } catch (  CompilationFailedException e) {    throw new IllegalArgumentException(e);  }}  }
class C{  private CPanelCloser(){}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.Class forName0(java.lang.String,boolean,java.lang.ClassLoader)")) {    java_lang_Class_forName0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object newInstance0()")) {    java_lang_Class_newInstance0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.String getName()")) {    java_lang_Class_getName(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.ClassLoader getClassLoader0()")) {    java_lang_Class_getClassLoader0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getSuperclass()")) {    java_lang_Class_getSuperclass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class[] getInterfaces()")) {    java_lang_Class_getInterfaces(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getComponentType()")) {    java_lang_Class_getComponentType(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object[] getSigners()")) {    java_lang_Class_getSigners(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setSigners(java.lang.Object[])")) {    java_lang_Class_setSigners(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getDeclaringClass()")) {    java_lang_Class_getDeclaringClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("void setProtectionDomain0(java.security.ProtectionDomain)")) {    java_lang_Class_setProtectionDomain0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.security.ProtectionDomain getProtectionDomain0()")) {    java_lang_Class_getProtectionDomain0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class getPrimitiveClass(java.lang.String)")) {    java_lang_Class_getPrimitiveClass(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Field[] getFields0(int)")) {    java_lang_Class_getFields0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Method[] getMethods0(int)")) {    java_lang_Class_getMethods0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Constructor[] getConstructors0(int)")) {    java_lang_Class_getConstructors0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Field getField0(java.lang.String,int)")) {    java_lang_Class_getField0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Method getMethod0(java.lang.String,java.lang.Class[],int)")) {    java_lang_Class_getMethod0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Constructor getConstructor0(java.lang.Class[],int)")) {    java_lang_Class_getConstructor0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Class[] getDeclaredClasses0()")) {    java_lang_Class_getDeclaredClasses0(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.reflect.Constructor[] getDeclaredConstructors0(boolean)")) {    java_lang_Class_getDeclaredConstructors0(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public BackupDialog(){  backup=new DefaultBackup();  initComponents();}  }
class C{  protected int nextInAttList() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '>':nextChar();context=DTD_DECLARATIONS_CONTEXT;return type=LexicalUnits.END_CHAR;case '%':int t=readName(LexicalUnits.PARAMETER_ENTITY_REFERENCE);if (current != ';') {throw createXMLException("malformed.parameter.entity");}nextChar();return t;case 'C':return readIdentifier("DATA",LexicalUnits.CDATA_IDENTIFIER,LexicalUnits.NAME);case 'I':nextChar();if (current != 'D') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.ID_IDENTIFIER;}if (current != 'R') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'E') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'F') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.IDREF_IDENTIFIER;}if (current != 'S') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.IDREFS_IDENTIFIER;}do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return type=LexicalUnits.NAME;case 'N':switch (nextChar()) {default :do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;case 'O':context=NOTATION_TYPE_CONTEXT;return readIdentifier("TATION",LexicalUnits.NOTATION_IDENTIFIER,LexicalUnits.NAME);case 'M':nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'T') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'O') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'K') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'E') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'N') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NMTOKEN_IDENTIFIER;}if (current != 'S') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NMTOKENS_IDENTIFIER;}do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}case 'E':nextChar();if (current != 'N') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'T') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'I') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'T') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return type=LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}switch (current) {case 'Y':nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.ENTITY_IDENTIFIER;}do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;case 'I':nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'E') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}nextChar();if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}if (current != 'S') {do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}return LexicalUnits.ENTITIES_IDENTIFIER;default :if (current == -1 || !XMLUtilities.isXMLNameCharacter((char)current)) {return LexicalUnits.NAME;}do {nextChar();} while (current != -1 && XMLUtilities.isXMLNameCharacter((char)current));return LexicalUnits.NAME;}case '"':attrDelimiter='"';nextChar();if (current == -1) {throw createXMLException("unexpected.eof");}if (current != '"' && current != '&') {do {nextChar();} while (current != -1 && current != '"' && current != '&');}switch (current) {case '&':context=ATTRIBUTE_VALUE_CONTEXT;return LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT;case '"':nextChar();return LexicalUnits.STRING;default :throw createXMLException("invalid.character");}case '\'':attrDelimiter='\'';nextChar();if (current == -1) {throw createXMLException("unexpected.eof");}if (current != '\'' && current != '&') {do {nextChar();} while (current != -1 && current != '\'' && current != '&');}switch (current) {case '&':context=ATTRIBUTE_VALUE_CONTEXT;return LexicalUnits.FIRST_ATTRIBUTE_FRAGMENT;case '\'':nextChar();return LexicalUnits.STRING;default :throw createXMLException("invalid.character");}case '#':switch (nextChar()) {case 'R':return readIdentifier("EQUIRED",LexicalUnits.REQUIRED_IDENTIFIER,-1);case 'I':return readIdentifier("MPLIED",LexicalUnits.IMPLIED_IDENTIFIER,-1);case 'F':return readIdentifier("IXED",LexicalUnits.FIXED_IDENTIFIER,-1);default :throw createXMLException("invalid.character");}case '(':nextChar();context=ENUMERATION_CONTEXT;return LexicalUnits.LEFT_BRACE;default :return readName(LexicalUnits.NAME);}}  }
class C{  public static <T>Flux<T> flux(Adapter<T> adapter){  return Flux.from(adapter.stream());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:49.218 -0500",hash_original_method="ED818B78DD519794D8AD6912C0355074",hash_generated_method="21CC2FD2A81A4C5E1A7FDD3CA9402F5F") protected int findTokenEnd(int from){  if (from < 0) {    throw new IllegalArgumentException("Token start position must not be negative: " + from);  }  final int to=this.currentHeader.length();  int end=from + 1;  while ((end < to) && isTokenChar(this.currentHeader.charAt(end))) {    end++;  }  return end;}  }
class C{  public void ivrZoneMember(String pwwn,Integer vsanId,boolean isRemove) throws NetworkDeviceControllerException {  _log.info(MessageFormat.format("Host: {0}, Port: {1} - BEGIN  Add or remove ivrZoneMember: pwwn {2} vsan {3} - Remove {4}",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort(),pwwn,vsanId,isRemove}));  SSHPrompt[] prompts={SSHPrompt.MDS_CONFIG_IVR_ZONE};  if (!inConfigMode) {    throw NetworkDeviceControllerException.exceptions.mdsDeviceNotInConfigMode();  }  if (!Arrays.asList(prompts).contains(lastPrompt)) {    String message=Arrays.asList(prompts).toString();    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedLastPrompt(lastPrompt.toString(),message);  }  if (!pwwn.matches(wwnRegex)) {    String message="port wwn " + pwwn + " is not formatted correctly";    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedDeviceState(message);  }  if (!isIvrVsan(vsanId)) {    String message="VSAN " + vsanId.toString() + " is not an IVR VSAN.";    throw NetworkDeviceControllerException.exceptions.mdsUnexpectedDeviceState(message);  }  String noString=isRemove ? MDSDialogProperties.getString("MDSDialog.zoneNameVsan.no.cmd") : "";  StringBuilder buf=new StringBuilder();  String payload=MessageFormat.format(noString + MDSDialogProperties.getString("MDSDialog.ivr.zoneMember.cmd"),pwwn,vsanId.toString());  boolean retryNeeded=true;  for (int retryCount=0; retryCount < sessionLockRetryMax && retryNeeded; retryCount++) {    lastPrompt=sendWaitFor(payload,defaultTimeout,prompts,buf);    String[] lines=getLines(buf);    retryNeeded=checkForEnhancedZoneSession(lines,retryCount);  }  _log.info(MessageFormat.format("Host: {0}, Port: {1} - END - Add or remove ivrZoneMember: pwwn {2} vsan {3} - Remove {4}",new Object[]{getSession().getSession().getHost(),getSession().getSession().getPort(),pwwn,vsanId,isRemove}));}  }
class C{  public IESEngine(BasicAgreement agree,DerivationFunction kdf,Mac mac){  this.agree=agree;  this.kdf=kdf;  this.mac=mac;  this.macBuf=new byte[mac.getMacSize()];  this.cipher=null;}  }
class C{  @Override public boolean supports(String view){  return getScriptEngine(view) != null;}  }
class C{  public int nextInt(){  return (rand=rand(rand));}  }
class C{  public List<String> toNameValueBlock(){  Set<String> names=new HashSet<String>();  List<String> result=new ArrayList<String>();  for (int i=0; i < namesAndValues.size(); i+=2) {    String name=namesAndValues.get(i).toLowerCase(Locale.US);    String value=namesAndValues.get(i + 1);    if (name.equals("connection") || name.equals("host") || name.equals("keep-alive")|| name.equals("proxy-connection")|| name.equals("transfer-encoding")) {      continue;    }    if (names.add(name)) {      result.add(name);      result.add(value);      continue;    }    for (int j=0; j < result.size(); j+=2) {      if (name.equals(result.get(j))) {        result.set(j + 1,result.get(j + 1) + "\0" + value);        break;      }    }  }  return result;}  }
class C{  private void checkConnectivity(State state) throws StopRequest {switch (mService.getNetworkAvailabilityState(mDB)) {case DownloaderService.NETWORK_OK:    return;case DownloaderService.NETWORK_NO_CONNECTION:  throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"waiting for network to return");case DownloaderService.NETWORK_TYPE_DISALLOWED_BY_REQUESTOR:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI_OR_CELLULAR_PERMISSION,"waiting for wifi or for download over cellular to be authorized");case DownloaderService.NETWORK_CANNOT_USE_ROAMING:throw new StopRequest(DownloaderService.STATUS_WAITING_FOR_NETWORK,"roaming is not allowed");case DownloaderService.NETWORK_UNUSABLE_DUE_TO_SIZE:throw new StopRequest(DownloaderService.STATUS_QUEUED_FOR_WIFI,"waiting for wifi");}}  }
class C{  @Override public void close(TaskAttemptContext paramTaskAttemptContext){  try {    flush();  } catch (  IOException e) {    logger.error("Error flushing the buffer on RyaOutputFormat Close",e);  }  try {    if (freeTextIndexer != null)     freeTextIndexer.close();  } catch (  IOException e) {    logger.error("Error closing the freetextIndexer on RyaOutputFormat Close",e);  }  try {    if (temporalIndexer != null)     temporalIndexer.close();  } catch (  IOException e) {    logger.error("Error closing the temporalIndexer on RyaOutputFormat Close",e);  }  try {    if (entityIndexer != null)     entityIndexer.close();  } catch (  IOException e) {    logger.error("Error closing the entityIndexer on RyaOutputFormat Close",e);  }  try {    if (ryaIndexer != null)     ryaIndexer.destroy();  } catch (  RyaDAOException e) {    logger.error("Error closing RyaDAO on RyaOutputFormat Close",e);  }  if (writer != null) {    try {      writer.close();    } catch (    MutationsRejectedException e) {      logger.error("Error closing MultiTableBatchWriter on RyaOutputFormat Close",e);    }  }}  }
class C{  public OpenDoubleIntHashMap(){  this(defaultCapacity);}  }
class C{  public boolean isVoiceCallsEnabled(){  return voiceCallsEnabled;}  }
class C{  public int compare(T a,T b){  Object o1=a.getValueAt(_activeColumn);  Object o2=b.getValueAt(_activeColumn);  return AbstractTableMediator.compare(o1,o2) * _ascending;}  }
class C{  public void draw(int mouseX,int mouseY){  if (currentPageLeft != null)   currentPageLeft.draw(mouseX,mouseY);  if (currentPageRight != null)   currentPageRight.draw(mouseX,mouseY);}  }
class C{  public static boolean prefixMatched(long number,int d){  return getPrefix(number,getSize(d)) == d;}  }
class C{  public XaDriverScriptCommand(Configuration configuration,String resourcePath,DataSource dataSource,String driverModule){  super(configuration,resourcePath);  this.ds=dataSource;  this.driverModule=driverModule;}  }
class C{  static void splitReciprocal(final double in[],final double result[]){  final double b=1.0 / 4194304.0;  final double a=1.0 - b;  if (in[0] == 0.0) {    in[0]=in[1];    in[1]=0.0;  }  result[0]=a / in[0];  result[1]=(b * in[0] - a * in[1]) / (in[0] * in[0] + in[0] * in[1]);  if (result[1] != result[1]) {    result[1]=0.0;  }  resplit(result);  for (int i=0; i < 2; i++) {    double err=1.0 - result[0] * in[0] - result[0] * in[1] - result[1] * in[0] - result[1] * in[1];    err*=result[0] + result[1];    result[1]+=err;  }}  }
class C{  public static String emailPassword(HttpServletRequest request,HttpServletResponse response){  String defaultScreenLocation="component://securityext/widget/EmailSecurityScreens.xml#PasswordEmail";  Delegator delegator=(Delegator)request.getAttribute("delegator");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  String productStoreId=ProductStoreWorker.getProductStoreId(request);  String errMsg=null;  boolean useEncryption="true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.encrypt",delegator));  String userLoginId=request.getParameter("USERNAME");  if ((userLoginId != null) && ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","username.lowercase",delegator)))) {    userLoginId=userLoginId.toLowerCase();  }  if (!UtilValidate.isNotEmpty(userLoginId)) {    errMsg=UtilProperties.getMessage(resource,"loginevents.username_was_empty_reenter",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  GenericValue supposedUserLogin=null;  String passwordToSend=null;  try {    supposedUserLogin=EntityQuery.use(delegator).from("UserLogin").where("userLoginId",userLoginId).queryOne();    if (supposedUserLogin == null) {      errMsg=UtilProperties.getMessage(resource,"loginevents.username_not_found_reenter",UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }    if (useEncryption) {      passwordToSend=RandomStringUtils.randomAlphanumeric(Integer.parseInt(EntityUtilProperties.getPropertyValue("security","password.length.min","5",delegator)));      if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.lowercase",delegator))) {        passwordToSend=passwordToSend.toLowerCase();      }      supposedUserLogin.set("currentPassword",HashCrypt.cryptUTF8(LoginServices.getHashType(),null,passwordToSend));      supposedUserLogin.set("passwordHint","Auto-Generated Password");      if ("true".equals(EntityUtilProperties.getPropertyValue("security.properties","password.email_password.require_password_change",delegator))) {        supposedUserLogin.set("requirePasswordChange","Y");      }    } else {      passwordToSend=supposedUserLogin.getString("currentPassword");    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.toString());    errMsg=UtilProperties.getMessage(resource,"loginevents.error_accessing_password",messageMap,UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  StringBuilder emails=new StringBuilder();  GenericValue party=null;  try {    party=supposedUserLogin.getRelatedOne("Party",false);  } catch (  GenericEntityException e) {    Debug.logWarning(e,"",module);    party=null;  }  if (party != null) {    Iterator<GenericValue> emailIter=UtilMisc.toIterator(ContactHelper.getContactMechByPurpose(party,"PRIMARY_EMAIL",false));    while (emailIter != null && emailIter.hasNext()) {      GenericValue email=emailIter.next();      emails.append(emails.length() > 0 ? "," : "").append(email.getString("infoString"));    }  }  if (!UtilValidate.isNotEmpty(emails.toString())) {    errMsg=UtilProperties.getMessage(resource,"loginevents.no_primary_email_address_set_contact_customer_service",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  GenericValue productStoreEmail=null;  try {    productStoreEmail=EntityQuery.use(delegator).from("ProductStoreEmailSetting").where("productStoreId",productStoreId,"emailType","PRDS_PWD_RETRIEVE").queryOne();  } catch (  GenericEntityException e) {    Debug.logError(e,"Problem getting ProductStoreEmailSetting",module);  }  String bodyScreenLocation=null;  if (productStoreEmail != null) {    bodyScreenLocation=productStoreEmail.getString("bodyScreenLocation");  }  if (UtilValidate.isEmpty(bodyScreenLocation)) {    bodyScreenLocation=defaultScreenLocation;  }  Map<String,Object> bodyParameters=FastMap.newInstance();  bodyParameters.put("useEncryption",Boolean.valueOf(useEncryption));  bodyParameters.put("password",UtilFormatOut.checkNull(passwordToSend));  bodyParameters.put("locale",UtilHttp.getLocale(request));  bodyParameters.put("userLogin",supposedUserLogin);  bodyParameters.put("productStoreId",productStoreId);  Map<String,Object> serviceContext=FastMap.newInstance();  serviceContext.put("bodyScreenUri",bodyScreenLocation);  serviceContext.put("bodyParameters",bodyParameters);  if (productStoreEmail != null) {    serviceContext.put("subject",productStoreEmail.getString("subject"));    serviceContext.put("sendFrom",productStoreEmail.get("fromAddress"));    serviceContext.put("sendCc",productStoreEmail.get("ccAddress"));    serviceContext.put("sendBcc",productStoreEmail.get("bccAddress"));    serviceContext.put("contentType",productStoreEmail.get("contentType"));  } else {    GenericValue emailTemplateSetting=null;    try {      emailTemplateSetting=EntityQuery.use(delegator).from("EmailTemplateSetting").where("emailTemplateSettingId","EMAIL_PASSWORD").cache().queryOne();    } catch (    GenericEntityException e) {      Debug.logError(e,module);    }    if (emailTemplateSetting != null) {      String subject=emailTemplateSetting.getString("subject");      subject=FlexibleStringExpander.expandString(subject,UtilMisc.toMap("userLoginId",userLoginId));      serviceContext.put("subject",subject);      serviceContext.put("sendFrom",emailTemplateSetting.get("fromAddress"));    } else {      serviceContext.put("subject",UtilProperties.getMessage(resource,"loginservices.password_reminder_subject",UtilMisc.toMap("userLoginId",userLoginId),UtilHttp.getLocale(request)));      serviceContext.put("sendFrom",EntityUtilProperties.getPropertyValue("general.properties","defaultFromEmailAddress",delegator));    }  }  serviceContext.put("sendTo",emails.toString());  serviceContext.put("partyId",party.getString("partyId"));  try {    Map<String,Object> result=dispatcher.runSync("sendMailHiddenInLogFromScreen",serviceContext);    if (ModelService.RESPOND_ERROR.equals(result.get(ModelService.RESPONSE_MESSAGE))) {      Map<String,Object> messageMap=UtilMisc.toMap("errorMessage",result.get(ModelService.ERROR_MESSAGE));      errMsg=UtilProperties.getMessage(resource,"loginevents.error_unable_email_password_contact_customer_service_errorwas",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  } catch (  GenericServiceException e) {    Debug.logWarning(e,"",module);    errMsg=UtilProperties.getMessage(resource,"loginevents.error_unable_email_password_contact_customer_service",UtilHttp.getLocale(request));    request.setAttribute("_ERROR_MESSAGE_",errMsg);    return "error";  }  if (useEncryption) {    try {      supposedUserLogin.store();    } catch (    GenericEntityException e) {      Debug.logWarning(e,"",module);      Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.toString());      errMsg=UtilProperties.getMessage(resource,"loginevents.error_saving_new_password_email_not_correct_password",messageMap,UtilHttp.getLocale(request));      request.setAttribute("_ERROR_MESSAGE_",errMsg);      return "error";    }  }  if (useEncryption) {    errMsg=UtilProperties.getMessage(resource,"loginevents.new_password_createdandsent_check_email",UtilHttp.getLocale(request));    request.setAttribute("_EVENT_MESSAGE_",errMsg);  } else {    errMsg=UtilProperties.getMessage(resource,"loginevents.new_password_sent_check_email",UtilHttp.getLocale(request));    request.setAttribute("_EVENT_MESSAGE_",errMsg);  }  return "success";}  }
class C{  public static String convertToWord(String number){  String paise="";  if (number.contains(".")) {    final String[] splitPaise=number.split("[.]");    if (splitPaise.length == 2) {      if (!splitPaise[1].equals("00")) {        paise="and " + paiseInWords(splitPaise[1]) + " "+ "Paise Only";      }    }    number=splitPaise[0];  }  final String returnValue=translateToWord(number);  return (paise.isEmpty() ? ("Rupees " + returnValue + " Only ") : ("Rupees " + returnValue + " "+ paise));}  }
class C{  public PerfEvents(){  super(Options.set,"Perf Events","Use this to specify a comma seperated list of performance events to measure","");}  }
class C{  public AppMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  private void doSearchQuery(final Intent queryIntent,final String entryPoint){  final String queryString=queryIntent.getStringExtra(SearchManager.QUERY);  mQueryText.setText(queryString);  SearchRecentSuggestions suggestions=new SearchRecentSuggestions(this,SearchSuggestionSampleProvider.AUTHORITY,SearchSuggestionSampleProvider.MODE);  suggestions.saveRecentQuery(queryString,null);  final Bundle appData=queryIntent.getBundleExtra(SearchManager.APP_DATA);  if (appData == null) {    mAppDataText.setText("<no app data bundle>");  }  if (appData != null) {    String testStr=appData.getString("demo_key");    mAppDataText.setText((testStr == null) ? "<no app data>" : testStr);  }  mDeliveredByText.setText(entryPoint);}  }
class C{  public boolean removeKey(ECKey key){  lock.lock();  try {    boolean a=hashToKeys.remove(ByteString.copyFrom(key.getPubKeyHash())) != null;    boolean b=pubkeyToKeys.remove(ByteString.copyFrom(key.getPubKey())) != null;    checkState(a == b);    return a;  }  finally {    lock.unlock();  }}  }
class C{  public static final boolean isASCII(File file) throws IOException, StlParseException {  if (file.exists())   throw new StlParseException("Passed file does not exist.");  if (!file.isFile())   throw new StlParseException("This is not a file.");  final BufferedReader buffer=new BufferedReader(new FileReader(file));  boolean isASCII=isASCII(buffer);  buffer.close();  return isASCII;}  }
class C{  public void testMultiplyMathContextScalePosPos(){  String a="97665696756578755423325476545428779810457634781384756794987";  int aScale=-25;  String b="87656965586786097685674786576598865";  int bScale=10;  String c="8.561078619600910561431314228543672720908E+108";  int cScale=-69;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  MathContext mc=new MathContext(40,RoundingMode.HALF_DOWN);  BigDecimal result=aNumber.multiply(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",cScale,result.scale());}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void startDragAction(DragGestureEvent dge,DragSourceListener dsl){  if (Debug.debugging("beanbox"))   Debug.output("Enter> startDragAction");  Object selectedBean=null;  BeanBox selectedBeanBox=null;  Layer selectedLayer=null;  Point srcLocation=dge.getDragOrigin();  Enumeration keys=layers.keys();  while (keys.hasMoreElements()) {    String layerName=keys.nextElement().toString();    Layer omLayer=(Layer)layers.get(layerName);    BeanBox beanBox=((BeanBoxHandler)omLayer).getBeanBox();    selectedBean=beanBox.getBeanAtLocation(srcLocation);    if (selectedBean != null) {      selectedBeanBox=beanBox;      selectedLayer=omLayer;      break;    }  }  if (Debug.debugging("beanbox"))   Debug.output("selectedBean=" + selectedBean);  if (selectedBean == null || selectedBeanBox == null || selectedLayer == null) {    if (Debug.debugging("beanbox"))     Debug.output("Exit> startDragAction, selected bean/beanbox/layer is null");    return;  }  Image dragImage=selectedBeanBox.getDragImage(selectedBean);  super.setCursor(dragImage,DragSource.DefaultMoveDrop);  BeanInfo beanInfo=selectedBeanBox.getBeanInfoForBean(selectedBean.getClass().getName());  Vector beanTransferData=new Vector();  beanTransferData.add(selectedBean);  beanTransferData.add(beanInfo);  beanTransferData.add(new Boolean(true));  beanTransferData.add(selectedLayer.getName());  dragSource.startDrag(dge,super.getCursor(DragSource.DefaultMoveDrop),new DefaultTransferableObject(beanTransferData),dsl);  if (Debug.debugging("beanbox"))   Debug.output("Exit> startDragAction");}  }
class C{  public static <T>boolean removeIf(Iterable<T> removeFrom,Predicate<? super T> predicate){  if (removeFrom instanceof RandomAccess && removeFrom instanceof List) {    return removeIfFromRandomAccessList((List<T>)removeFrom,checkNotNull(predicate));  }  return Iterators.removeIf(removeFrom.iterator(),predicate);}  }
class C{  public static WindowStateListener add(WindowStateListener a,WindowStateListener b){  return (WindowStateListener)addInternal(a,b);}  }
class C{  static public String showPath(final Path x,final Map<PathIds,EdgeSample> edgeSamples){  if (x == null)   throw new IllegalArgumentException();  if (edgeSamples == null)   throw new IllegalArgumentException();  final StringBuilder sb=new StringBuilder();  final Formatter f=new Formatter(sb);{    f.format("%4s %10s%1s * %10s (%8s %8s %8s %8s %8s %8s) = %10s %10s%1s : %10s %10s","vert","srcCard","","f","in","sumRgCt","tplsRead","out","limit","adjCard","estRead","estCard","","sumEstRead","sumEstCard");    long sumEstRead=0;    long sumEstCard=0;    for (int i=0; i < x.vertices.length; i++) {      final int[] ids=BOpUtility.getPredIds(x.getPathSegment(i + 1));      final int predId=x.vertices[i].pred.getId();      final SampleBase sample;      if (i == 0) {        sample=x.vertices[i].sample;        if (sample != null) {          sumEstRead=sample.estCard;          sumEstCard=sample.estCard;        }      } else {        sample=edgeSamples.get(new PathIds(ids));        if (sample != null) {          sumEstRead+=((EdgeSample)sample).estRead;          sumEstCard+=((EdgeSample)sample).estCard;        }      }      sb.append("\n");      if (sample == null) {        f.format("% 4d %10s%1s * %10s (%8s %8s %8s %8s %8s %8s) = %10s %10s%1s : %10s %10s",predId,NA,"",NA,NA,NA,NA,NA,NA,NA,NA,NA,"",NA,NA);      } else       if (sample instanceof VertexSample) {        final long sumRangeCount=sample.estCard;        final long estRead=sample.estCard;        final long tuplesRead=Math.min(sample.estCard,sample.limit);        final long outputCount=Math.min(sample.estCard,sample.limit);        final long adjCard=Math.min(sample.estCard,sample.limit);        f.format("% 4d %10s%1s * %10s (%8s %8s %8s %8s %8s %8s) = % 10d % 10d%1s : %10d %10d",predId," "," "," "," ",sumRangeCount,tuplesRead,outputCount,sample.limit,adjCard,estRead,sample.estCard,sample.estimateEnum.getCode(),sumEstRead,sumEstCard);      } else {        final EdgeSample edgeSample=(EdgeSample)sample;        f.format("% 4d %10d%1s * % 10.2f (%8d %8d %8d %8d %8d %8d) = % 10d % 10d%1s : %10d %10d",predId,edgeSample.sourceSample.estCard,edgeSample.sourceSample.estimateEnum.getCode(),edgeSample.f,edgeSample.inputCount,edgeSample.sumRangeCount,edgeSample.tuplesRead,edgeSample.outputCount,edgeSample.limit,edgeSample.adjCard,edgeSample.estRead,edgeSample.estCard,edgeSample.estimateEnum.getCode(),sumEstRead,sumEstCard);      }    }  }  sb.append("\n");  return sb.toString();}  }
class C{  public static Map<String,Object> flowModToStorageEntry(OFFlowMod fm,String sw,String name) throws Exception {  Map<String,Object> entry=new HashMap<String,Object>();  entry.put(StaticFlowEntryPusher.COLUMN_NAME,name);  entry.put(StaticFlowEntryPusher.COLUMN_SWITCH,sw);  entry.put(StaticFlowEntryPusher.COLUMN_ACTIVE,Boolean.toString(true));  entry.put(StaticFlowEntryPusher.COLUMN_PRIORITY,Integer.toString(fm.getPriority()));switch (fm.getVersion()) {case OF_10:    if (fm.getActions() != null) {      entry.put(StaticFlowEntryPusher.COLUMN_ACTIONS,ActionUtils.actionsToString(fm.getActions(),log));    }  break;case OF_11:case OF_12:case OF_13:case OF_14:default :if (fm.getTableId() != null) {  entry.put(StaticFlowEntryPusher.COLUMN_TABLE_ID,Short.toString(fm.getTableId().getValue()));}if (fm.getInstructions() != null) {List<OFInstruction> instructions=fm.getInstructions();for (OFInstruction inst : instructions) {switch (inst.getType()) {case GOTO_TABLE:    entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_TABLE,InstructionUtils.gotoTableToString(((OFInstructionGotoTable)inst),log));  break;case WRITE_METADATA:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_METADATA,InstructionUtils.writeMetadataToString(((OFInstructionWriteMetadata)inst),log));break;case WRITE_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_WRITE_ACTIONS,InstructionUtils.writeActionsToString(((OFInstructionWriteActions)inst),log));break;case APPLY_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_APPLY_ACTIONS,InstructionUtils.applyActionsToString(((OFInstructionApplyActions)inst),log));break;case CLEAR_ACTIONS:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_CLEAR_ACTIONS,InstructionUtils.clearActionsToString(((OFInstructionClearActions)inst),log));break;case METER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_GOTO_METER,InstructionUtils.meterToString(((OFInstructionMeter)inst),log));break;case EXPERIMENTER:entry.put(StaticFlowEntryPusher.COLUMN_INSTR_EXPERIMENTER,InstructionUtils.experimenterToString(((OFInstructionExperimenter)inst),log));break;default :log.error("Could not decode OF1.1+ instruction type {}",inst);}}}}Match match=fm.getMatch();Iterator<MatchField<?>> itr=match.getMatchFields().iterator();while (itr.hasNext()) {@SuppressWarnings("rawtypes") MatchField mf=itr.next();switch (mf.id) {case IN_PORT:entry.put(StaticFlowEntryPusher.COLUMN_IN_PORT,Integer.toString((match.get(MatchField.IN_PORT)).getPortNumber()));break;case ETH_SRC:entry.put(StaticFlowEntryPusher.COLUMN_DL_SRC,match.get(MatchField.ETH_SRC).toString());break;case ETH_DST:entry.put(StaticFlowEntryPusher.COLUMN_DL_DST,match.get(MatchField.ETH_DST).toString());break;case VLAN_VID:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN,match.get(MatchField.VLAN_VID).getVlan());break;case VLAN_PCP:entry.put(StaticFlowEntryPusher.COLUMN_DL_VLAN_PCP,Byte.toString(match.get(MatchField.VLAN_PCP).getValue()));break;case ETH_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_DL_TYPE,match.get(MatchField.ETH_TYPE).getValue());break;case IP_ECN:entry.put(StaticFlowEntryPusher.COLUMN_NW_ECN,Byte.toString(match.get(MatchField.IP_ECN).getEcnValue()));break;case IP_DSCP:entry.put(StaticFlowEntryPusher.COLUMN_NW_DSCP,Byte.toString((byte)(match.get(MatchField.IP_DSCP).getDscpValue())));break;case IP_PROTO:entry.put(StaticFlowEntryPusher.COLUMN_NW_PROTO,Short.toString(match.get(MatchField.IP_PROTO).getIpProtocolNumber()));break;case IPV4_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW_SRC,match.get(MatchField.IPV4_SRC).toString());break;case IPV4_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW_DST,match.get(MatchField.IPV4_DST).toString());break;case TCP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_TCP_SRC,match.get(MatchField.TCP_SRC).getPort());break;case UDP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_UDP_SRC,match.get(MatchField.UDP_SRC).getPort());break;case SCTP_SRC:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_SRC,match.get(MatchField.SCTP_SRC).getPort());break;case TCP_DST:entry.put(StaticFlowEntryPusher.COLUMN_TCP_DST,match.get(MatchField.TCP_DST).getPort());break;case UDP_DST:entry.put(StaticFlowEntryPusher.COLUMN_UDP_DST,match.get(MatchField.UDP_DST).getPort());break;case SCTP_DST:entry.put(StaticFlowEntryPusher.COLUMN_SCTP_DST,match.get(MatchField.SCTP_DST).getPort());break;case ICMPV4_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_TYPE,match.get(MatchField.ICMPV4_TYPE).getType());break;case ICMPV4_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP_CODE,match.get(MatchField.ICMPV4_CODE).getCode());break;case ARP_OP:entry.put(StaticFlowEntryPusher.COLUMN_ARP_OPCODE,match.get(MatchField.ARP_OP).getOpcode());break;case ARP_SHA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SHA,match.get(MatchField.ARP_SHA).toString());break;case ARP_THA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DHA,match.get(MatchField.ARP_THA).toString());break;case ARP_SPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_SPA,match.get(MatchField.ARP_SPA).toString());break;case ARP_TPA:entry.put(StaticFlowEntryPusher.COLUMN_ARP_DPA,match.get(MatchField.ARP_TPA).toString());break;case IPV6_SRC:entry.put(StaticFlowEntryPusher.COLUMN_NW6_SRC,match.get(MatchField.IPV6_SRC).toString());break;case IPV6_DST:entry.put(StaticFlowEntryPusher.COLUMN_NW6_DST,match.get(MatchField.IPV6_DST).toString());break;case IPV6_FLABEL:entry.put(StaticFlowEntryPusher.COLUMN_IPV6_FLOW_LABEL,match.get(MatchField.IPV6_FLABEL).toString());break;case ICMPV6_TYPE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_TYPE,String.valueOf(match.get(MatchField.ICMPV6_TYPE).getValue()));break;case ICMPV6_CODE:entry.put(StaticFlowEntryPusher.COLUMN_ICMP6_CODE,match.get(MatchField.ICMPV6_CODE).getValue());break;case IPV6_ND_SLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_SLL,match.get(MatchField.IPV6_ND_SLL).toString());break;case IPV6_ND_TLL:entry.put(StaticFlowEntryPusher.COLUMN_ND_TLL,match.get(MatchField.IPV6_ND_TLL).toString());break;case IPV6_ND_TARGET:entry.put(StaticFlowEntryPusher.COLUMN_ND_TARGET,match.get(MatchField.IPV6_ND_TARGET).toString());break;case MPLS_LABEL:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_LABEL,match.get(MatchField.MPLS_LABEL).getValue());break;case MPLS_TC:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_TC,match.get(MatchField.MPLS_TC).getValue());break;case MPLS_BOS:entry.put(StaticFlowEntryPusher.COLUMN_MPLS_BOS,match.get(MatchField.MPLS_BOS).getValue());break;case METADATA:entry.put(StaticFlowEntryPusher.COLUMN_METADATA,match.get(MatchField.METADATA).getValue().getValue());break;case TUNNEL_ID:entry.put(StaticFlowEntryPusher.COLUMN_TUNNEL_ID,match.get(MatchField.TUNNEL_ID).getValue());break;default :log.error("Unhandled Match when parsing OFFlowMod: {}, {}",mf,mf.id);break;}}int result=StaticFlowEntryPusherResource.checkActions(entry);if (result == -1) throw new Exception("Invalid action/instructions");return entry;}  }
class C{  public List<X509Certificate> checkServerTrusted(X509Certificate[] chain,String authType,String host) throws CertificateException {  return checkTrusted(chain,authType,host,false);}  }
class C{  public AnchorPane createTreeViewPanel(String id){  XmlElementTreeItem rootItem=new XmlElementTreeItem(Instruction.PAYLOAD);  rootItem.setHelpText("Right click to add, Double-click to edit");  rootItem.addAttribute(new XmlElementAttribute("ID"),id);  TreeView<XmlElementTreeItem> payloadTree=new TreeView<>(new TreeItem<>(rootItem));  payloadTree.getRoot().setExpanded(true);  payloadTree.setCellFactory(null);  payloadTree.setOnMouseClicked(null);  this.treeViewPanelList.add(payloadTree);  AnchorPane payLoadTreeAnchor=new AnchorPane(payloadTree);  setAnchorPaneAnchors(payloadTree);  return payLoadTreeAnchor;}  }
class C{  private void paintControl(final PaintEvent e){  if (cachedImage == null) {    cachedImage=new Image(getDisplay(),getClientArea());    cachedGC=new GC(cachedImage);    cachedGC.setAntialias(SWT.ON);  }  drawBackground();  drawItems();  if (animationStep < 0d) {    drawTitle();  }  e.gc.drawImage(cachedImage,0,0);}  }
class C{  public void pause() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  pause(null);}  }
class C{  public void printGoto(Vertex equation,Writer writer,String indent,Set<Vertex> elements,Network network,long start,long timeout) throws IOException {  Vertex state=equation.getRelationship(Primitive.GOTO);  List<Vertex> localElements=new ArrayList<Vertex>();  writer.write(indent);  writer.write("goto ");  if (equation.hasRelationship(Primitive.FINALLY)) {    writer.write("finally ");  }  if (!elements.contains(state)) {    localElements.add(state);    elements.add(state);  }  printElement(state,writer,indent,null,null,elements,network);  Collection<Relationship> arguments=equation.getRelationships(Primitive.ARGUMENT);  if (arguments != null) {    writer.write(" with (");    for (Iterator<Relationship> iterator=arguments.iterator(); iterator.hasNext(); ) {      Relationship argument=iterator.next();      printElement(argument.getTarget(),writer,indent,null,null,elements,network);      if (iterator.hasNext()) {        writer.write(", ");      }    }    writer.write(")");  }  writer.write(";\r\n\r\n");  for (  Vertex element : localElements) {    if (element.instanceOf(Primitive.VARIABLE)) {      printVariable(element,writer,indent,elements,network);    } else     if (element.instanceOf(Primitive.STATE)) {      printState(element,writer,indent,elements,network,start,timeout);    }  }}  }
class C{  public PickedObjectList pick(float x,float y){  PickedObjectList pickedObjects=new PickedObjectList();  if (this.isPaused) {    return pickedObjects;  }  int px=Math.round(x);  int py=Math.round(this.getHeight() - y);  if (!this.viewport.contains(px,py)) {    return pickedObjects;  }  Line pickRay=new Line();  if (!this.rayThroughScreenPoint(x,y,pickRay)) {    return pickedObjects;  }  Frame frame=Frame.obtain(this.framePool);  frame.pickedObjects=pickedObjects;  frame.pickViewport=new Viewport(px - 1,py - 1,3,3);  frame.pickViewport.intersect(this.viewport);  frame.pickPoint=new Vec2(px,py);  frame.pickRay=pickRay;  frame.pickMode=true;  this.renderFrame(frame);  frame.awaitDone();  return pickedObjects;}  }
class C{  public UserModificationConstraintException(){  super();}  }
class C{  protected void mergeConstraintsWith(ConstraintSet other) throws HaskellTypeError {  this.constraints=new TreeSet<>(Sets.union(this.constraints,other.constraints));  this.simplifyConstraints();  this.checkSatisfiable();}  }
class C{  @Override public List<Integer> emit(List<Object> tuple,Object messageId){  List<Object> t=_callback.apply(tuple,_context.cloneContext().with(EmitContext.Type.PARTITION,getPartition(messageId)));  return _delegate.emit(t,messageId);}  }
class C{  @Override public String toCodeStringPostStatement(){  return "";}  }
class C{  public static String toDNA(GeoTimeSerie gts){  if (0 == gts.size() || !TYPE.LONG.equals(gts.getType())) {    return "";  }  GTSHelper.sort(gts);  StringBuilder sb=new StringBuilder();  byte[] seq=new byte[gts.values];  long value=0;  for (int i=0; i < gts.values; i++) {    int delta=(int)(gts.longValues[i] - value);    value=gts.longValues[i];switch (delta) {case 2:      seq[i]=0x41;    break;case 1:  seq[i]=0x47;break;case -1:seq[i]=0x43;break;case -2:seq[i]=0x54;break;default :seq[i]=0x2E;}}return new String(seq,Charsets.UTF_8);}  }
class C{  public void destroy() throws Exception {  this.exports.destroy();  this.zoo.close();}  }
class C{  public Intent newChooseAccountIntent(){  return AccountPicker.newChooseAccountIntent(account,null,new String[]{GoogleAccountManager.ACCOUNT_TYPE},true,null,null,null,null);}  }
class C{  public static String stringTo8859_1(String str) throws UnsupportedEncodingException {  if (str == null) {    return "";  }  return new String(str.getBytes("UTF8"),"8859_1");}  }
class C{  synchronized boolean ignoreForRecovery(){  return this.ignoreForRecovery;}  }
class C{  private int generateSalesHistory(){  List<Object> parameters=new ArrayList<Object>();  StringBuffer insert=new StringBuffer();  insert.append("INSERT INTO ").append(MSalesHistory.Table_Name).append(" (");  insert.append(MSalesHistory.COLUMNNAME_C_SalesHistory_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_InvoiceLine_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_AD_Client_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_AD_Org_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_BPartner_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_BP_Group_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_BPartner_Location_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_M_Product_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_M_Product_Category_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_M_Product_Classification_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_M_Product_Class_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_M_Product_Group_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_M_Warehouse_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_Activity_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_Campaign_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_SalesRegion_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_Project_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_ProjectPhase_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_C_ProjectTask_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_User1_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_User2_ID).append(",");  insert.append(MSalesHistory.COLUMNNAME_DateInvoiced).append(",");  insert.append(MSalesHistory.COLUMNNAME_Qty).append(",");  insert.append(MSalesHistory.COLUMNNAME_TotalInvQty).append(",");  insert.append(MSalesHistory.COLUMNNAME_PriceInvoiced).append(",");  insert.append(MSalesHistory.COLUMNNAME_TotalInvAmt).append(",");  insert.append(MSalesHistory.COLUMNNAME_CostAmt).append(",");  insert.append(MSalesHistory.COLUMNNAME_TotalInvCost).append(",");  insert.append(MSalesHistory.COLUMNNAME_Created).append(",");  insert.append(MSalesHistory.COLUMNNAME_CreatedBy).append(",");  insert.append(MSalesHistory.COLUMNNAME_Updated).append(",");  insert.append(MSalesHistory.COLUMNNAME_UpdatedBy).append(")");  insert.append(" SELECT DISTINCT ");  insert.append("nextidfunc(").append(MSequence.get(getCtx(),MSalesHistory.Table_Name).get_ID()).append(",'Y')").append(",");  insert.append("il.C_InvoiceLine_ID,");  insert.append("il.AD_Client_ID,");  insert.append("il.AD_Org_ID,");  insert.append("i.C_BPartner_ID,");  insert.append("bp.C_BP_Group_ID,");  insert.append("i.C_BPartner_Location_ID,");  insert.append("il.M_Product_ID,");  insert.append("p.M_Product_Category_ID,");  insert.append("pcl.M_Product_Classification_ID,");  insert.append("pclass.M_Product_Class_ID,");  insert.append("pg.M_Product_Group_ID,");  insert.append("l.M_Warehouse_ID,");  insert.append("il.C_Activity_ID,");  insert.append("il.C_Campaign_ID,");  insert.append("bpl.C_SalesRegion_ID,");  insert.append("il.C_Project_ID,");  insert.append("il.C_ProjectPhase_ID,");  insert.append("il.C_ProjectTask_ID,");  insert.append("il.User1_ID,");  insert.append("il.User2_ID,");  insert.append("i.DateInvoiced,");  insert.append("il.QtyInvoiced,");  insert.append("il.QtyInvoiced,");  insert.append("il.PriceActual,");  insert.append("il.LineTotalAmt,");  insert.append("0.00").append(",");  insert.append("0.00").append(",");  insert.append("SYSDATE").append(",");  insert.append(Env.getAD_User_ID(getCtx())).append(",");  insert.append("SYSDATE").append(",");  insert.append(Env.getAD_User_ID(getCtx()));  insert.append(" FROM C_InvoiceLine il ");  insert.append(" INNER JOIN  C_Invoice i ON (il.C_Invoice_ID=i.C_Invoice_ID) ");  insert.append(" INNER JOIN  C_BPartner bp ON (i.C_BPartner_ID=bp.C_BPartner_ID) ");  insert.append(" INNER JOIN  M_Product p ON (il.M_Product_ID=p.M_Product_ID) ");  insert.append(" LEFT JOIN C_BPartner_Location bpl ON (i.C_BPartner_Location_ID=bpl.C_BPartner_Location_ID)");  insert.append(" LEFT JOIN M_Product_Category  pc ON (p.M_Product_Category_ID=pc.M_Product_Category_ID) ");  insert.append(" LEFT JOIN M_Product_Classification  pcl ON (p.Classification=pcl.Value) ");  insert.append(" LEFT JOIN M_Product_Class  pclass ON (p.Group1=pclass.Value) ");  insert.append(" LEFT JOIN M_Product_Group  pg ON (p.Group2=pg.Value) ");  insert.append(" LEFT JOIN M_InOutLine iol ON (il.M_InOutLine_ID=iol.M_InOutLine_ID ) ");  insert.append(" LEFT JOIN M_Locator l ON (iol.M_Locator_ID=l.M_Locator_ID) ");  insert.append(" WHERE i.IsSOTrx='Y' AND NOT EXISTS (SELECT 1 FROM C_SalesHistory sh WHERE sh.C_InvoiceLine_ID=il.C_InvoiceLine_ID) AND ");  StringBuffer whereClause=new StringBuffer();  whereClause.append("il.AD_Client_ID=? AND ");  parameters.add(getAD_Client_ID());  if (p_AD_Org_ID > 0) {    whereClause.append("il.AD_Org_ID=? AND ");    parameters.add(p_AD_Org_ID);  }  if (p_M_Product_ID > 0) {    whereClause.append("il.M_Product_ID=? AND ");    parameters.add(p_M_Product_ID);  }  if (p_M_Product_Category_ID > 0) {    whereClause.append("pc.M_Product_Category_ID=? AND ");    parameters.add(p_M_Product_Category_ID);  }  if (p_M_Product_Classification_ID > 0) {    whereClause.append("pcl.M_Product_Classification_ID=? AND ");    parameters.add(p_M_Product_Classification_ID);  }  if (p_M_Product_Class_ID > 0) {    whereClause.append("pclass.M_Product_Class_ID=? AND ");    parameters.add(p_M_Product_Class_ID);  }  if (p_M_Product_Group_ID > 0) {    whereClause.append("pg.M_Product_Group_ID=? AND ");    parameters.add(p_M_Product_Group_ID);  }  if (p_M_Warehouse_ID > 0) {    whereClause.append("l.M_Warehouse_ID=? AND ");    parameters.add(p_M_Warehouse_ID);  }  if (p_C_BPartner_ID > 0) {    whereClause.append("i.C_BPartner_ID=? AND ");    parameters.add(p_C_BPartner_ID);  }  if (p_C_BP_Group_ID > 0) {    whereClause.append("bp.C_BP_Group_ID=? AND ");    parameters.add(p_C_BP_Group_ID);  }  if (p_C_BPartner_Location_ID > 0) {    whereClause.append("il.C_BPartner_Location_ID=? AND ");    parameters.add(p_C_BPartner_Location_ID);  }  if (p_C_SalesRegion_ID > 0) {    whereClause.append("bpl.C_SalesRegion_ID=? AND ");    parameters.add(p_C_SalesRegion_ID);  }  if (p_C_Campaign_ID > 0) {    whereClause.append("il.C_Campaign_ID=? AND ");    parameters.add(p_C_Campaign_ID);  }  if (p_C_Project_ID > 0) {    whereClause.append("il.C_Project_ID=? AND ");    parameters.add(p_C_Project_ID);  }  if (p_C_Activity_ID > 0) {    whereClause.append("il.C_Activity_ID=? AND ");    parameters.add(p_C_Activity_ID);  }  if (p_User1_ID > 0) {    whereClause.append("il.User1_ID=? AND ");    parameters.add(p_User1_ID);  }  if (p_User2_ID > 0) {    whereClause.append("il.User2_ID=? AND ");    parameters.add(p_User2_ID);  }  if (p_DateInvoicedFrom != null && p_DateInvoicedTo != null) {    whereClause.append("i.DateInvoiced BETWEEN ? AND ? ");    parameters.add(p_DateInvoicedFrom);    parameters.add(p_DateInvoicedTo);  }  insert.append(whereClause.toString());  return DB.executeUpdateEx(insert.toString(),parameters.toArray(),get_TrxName());}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BINDING_PROPERTY;}  }
class C{  public byte[] decrypt(byte[] bytes){  byte[] resp=null;  try {    resp=crypt(bytes,Cipher.DECRYPT_MODE);  } catch (  Exception e) {    return null;  }  return resp;}  }
class C{  public PaintHelper(){  super();  paintMap=new PaintMap();  nextPaintIndex=0;}  }
class C{  public UTF8StreamWriter(){  _bytes=new byte[2048];}  }
class C{  public NodeAge(final long age){  super(age,NodeAge.class);  if (this.getRaw() < 0) {    throw new IllegalArgumentException("node age cannot be negative");  }}  }
class C{  public long toLong(){  long a=this.a;  long b=this.b;  long c=this.c;  long d=this.d;  return ((a << 24) | (b << 16) | (c << 8)| d);}  }
class C{  protected int computeRelevance(CompletionProposal proposal){  final int baseRelevance=proposal.getRelevance() * 16;switch (proposal.getKind()) {case CompletionProposal.PACKAGE_REF:    return baseRelevance + 0;case CompletionProposal.LABEL_REF:  return baseRelevance + 1;case CompletionProposal.KEYWORD:return baseRelevance + 2;case CompletionProposal.TYPE_REF:case CompletionProposal.ANONYMOUS_CLASS_DECLARATION:case CompletionProposal.ANONYMOUS_CLASS_CONSTRUCTOR_INVOCATION:return baseRelevance + 3;case CompletionProposal.METHOD_REF:case CompletionProposal.CONSTRUCTOR_INVOCATION:case CompletionProposal.METHOD_NAME_REFERENCE:case CompletionProposal.METHOD_DECLARATION:case CompletionProposal.ANNOTATION_ATTRIBUTE_REF:return baseRelevance + 4;case CompletionProposal.POTENTIAL_METHOD_DECLARATION:return baseRelevance + 4;case CompletionProposal.FIELD_REF:return baseRelevance + 5;case CompletionProposal.LOCAL_VARIABLE_REF:case CompletionProposal.VARIABLE_DECLARATION:return baseRelevance + 6;default :return baseRelevance;}}  }
class C{  public void testUpdateNClob() throws Exception {  createTable("testUpdateNChlob","(c1 CHAR(10) PRIMARY KEY, c2 NATIONAL CHARACTER(10)) default character set sjis");  Properties props1=new Properties();  props1.put("useServerPrepStmts","true");  props1.put("characterEncoding","UTF-8");  Connection conn1=getConnectionWithProps(props1);  PreparedStatement pstmt1=conn1.prepareStatement("INSERT INTO testUpdateNChlob (c1, c2) VALUES (?, ?)");  pstmt1.setString(1,"1");  NClob nClob1=conn1.createNClob();  nClob1.setString(1,"aaa");  pstmt1.setNClob(2,nClob1);  pstmt1.execute();  Statement stmt1=conn1.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  ResultSet rs1=stmt1.executeQuery("SELECT c1, c2 FROM testUpdateNChlob");  rs1.next();  NClob nClob2=conn1.createNClob();  nClob2.setString(1,"bbb");  rs1.updateNClob("c2",nClob2);  rs1.updateRow();  rs1.moveToInsertRow();  rs1.updateString("c1","2");  NClob nClob3=conn1.createNClob();  nClob3.setString(1,"ccc");  rs1.updateNClob("c2",nClob3);  rs1.insertRow();  ResultSet rs2=stmt1.executeQuery("SELECT c1, c2 FROM testUpdateNChlob");  rs2.next();  assertEquals("1",rs2.getString("c1"));  assertEquals("bbb",rs2.getNString("c2"));  rs2.next();  assertEquals("2",rs2.getString("c1"));  assertEquals("ccc",rs2.getNString("c2"));  pstmt1.close();  stmt1.close();  conn1.close();  createTable("testUpdateNChlob","(c1 CHAR(10) PRIMARY KEY, c2 CHAR(10)) default character set sjis");  Properties props2=new Properties();  props2.put("useServerPrepStmts","true");  props2.put("characterEncoding","SJIS");  Connection conn2=getConnectionWithProps(props2);  PreparedStatement pstmt2=conn2.prepareStatement("INSERT INTO testUpdateNChlob (c1, c2) VALUES (?, ?)");  pstmt2.setString(1,"1");  pstmt2.setString(2,"aaa");  pstmt2.execute();  Statement stmt2=conn2.createStatement(ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_UPDATABLE);  ResultSet rs3=stmt2.executeQuery("SELECT c1, c2 FROM testUpdateNChlob");  rs3.next();  NClob nClob4=conn2.createNClob();  nClob4.setString(1,"bbb");  try {    rs3.updateNClob("c2",nClob4);    fail();  } catch (  SQLException ex) {    assertEquals("Can not call updateNClob() when field's character set isn't UTF-8",ex.getMessage());  }  rs3.close();  pstmt2.close();  stmt2.close();  conn2.close();}  }
class C{  public void send() throws IOException {  HashMap<String,RequestData.UploadFileInfo> uploadFiles=mRequestData.getUploadFiles();  HashMap<String,Object> mPostData=mRequestData.getPostData();  if (mPostData != null && mPostData.size() != 0) {    Iterator<Map.Entry<String,Object>> iterator=mPostData.entrySet().iterator();    while (iterator.hasNext()) {      Map.Entry<String,Object> item=iterator.next();      Object value=item.getValue();      if (value == null) {        value="";      }      addFormField(item.getKey(),value.toString());    }  }  Iterator<Map.Entry<String,RequestData.UploadFileInfo>> iterator=uploadFiles.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,RequestData.UploadFileInfo> item=iterator.next();    RequestData.UploadFileInfo uploadFileInfo=item.getValue();    addFilePart(uploadFileInfo.fieldName,uploadFileInfo.uploadFile,uploadFileInfo.fileName);  }}  }
class C{  public QueryNextResponse clone(){  QueryNextResponse result=new QueryNextResponse();  result.ResponseHeader=ResponseHeader == null ? null : ResponseHeader.clone();  if (QueryDataSets != null) {    result.QueryDataSets=new QueryDataSet[QueryDataSets.length];    for (int i=0; i < QueryDataSets.length; i++)     result.QueryDataSets[i]=QueryDataSets[i].clone();  }  result.RevisedContinuationPoint=RevisedContinuationPoint;  return result;}  }
class C{  public static separadoraveiro newInstance(String param1,String param2){  separadoraveiro fragment=new separadoraveiro();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putString(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.EXPRESSION_LIST;}  }
class C{  public static RecipePureDaisy registerPureDaisyRecipe(Object input,IBlockState outputState,int time){  RecipePureDaisy recipe=new RecipePureDaisy(input,outputState,time);  pureDaisyRecipes.add(recipe);  return recipe;}  }
class C{  public static Object[] extractParams(Map<String,? extends Object> config,Collection<String> ignoreParams,Map<String,ExternalResourceDescription> resources){  Set<String> uniqueParams=new HashSet<>();  uniqueParams.addAll(config.keySet());  if (ignoreParams != null) {    uniqueParams.removeAll(ignoreParams);  }  Object[] params=new Object[resources.size() * 2 + uniqueParams.size() * 2];  int i=0;  for (  Entry<String,ExternalResourceDescription> entry : resources.entrySet()) {    params[i++]=entry.getKey();    params[i++]=entry.getValue();  }  for (  String key : uniqueParams) {    params[i++]=key;    params[i++]=CpeBuilderUtils.convertToParameterValue(config.get(key));  }  return params;}  }
class C{  public int writeBit(final boolean bit) throws IOException {  return writeInCurrent(bit ? 1 : 0,1);}  }
class C{  public boolean inBounds(MouseEvent e){  return e.getX() > x && e.getX() < x + width && e.getY() > y && e.getY() < y + height;}  }
class C{  public static void addOsmiumCompressorRecipe(ItemStack input,ItemStack output){  addRecipe(Recipe.OSMIUM_COMPRESSOR,new OsmiumCompressorRecipe(input,output));}  }
class C{  protected boolean internalFirst() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  public boolean accept(String from,String recipient){  if (log.isDebugEnabled())   log.debug("Accepting mail from " + from + " to "+ recipient);  return true;}  }
class C{  public Container stop() throws Exception {  if (this.running) {    this.server.stop();    this.running=false;  }  return this;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.domainGridlineStroke=SerialUtilities.readStroke(stream);  this.domainGridlinePaint=SerialUtilities.readPaint(stream);  this.rangeGridlineStroke=SerialUtilities.readStroke(stream);  this.rangeGridlinePaint=SerialUtilities.readPaint(stream);  this.domainMinorGridlineStroke=SerialUtilities.readStroke(stream);  this.domainMinorGridlinePaint=SerialUtilities.readPaint(stream);  this.rangeMinorGridlineStroke=SerialUtilities.readStroke(stream);  this.rangeMinorGridlinePaint=SerialUtilities.readPaint(stream);  this.rangeZeroBaselineStroke=SerialUtilities.readStroke(stream);  this.rangeZeroBaselinePaint=SerialUtilities.readPaint(stream);  this.domainCrosshairStroke=SerialUtilities.readStroke(stream);  this.domainCrosshairPaint=SerialUtilities.readPaint(stream);  this.rangeCrosshairStroke=SerialUtilities.readStroke(stream);  this.rangeCrosshairPaint=SerialUtilities.readPaint(stream);  this.domainTickBandPaint=SerialUtilities.readPaint(stream);  this.rangeTickBandPaint=SerialUtilities.readPaint(stream);  this.quadrantOrigin=SerialUtilities.readPoint2D(stream);  this.quadrantPaint=new Paint[4];  for (int i=0; i < 4; i++) {    this.quadrantPaint[i]=SerialUtilities.readPaint(stream);  }  this.domainZeroBaselineStroke=SerialUtilities.readStroke(stream);  this.domainZeroBaselinePaint=SerialUtilities.readPaint(stream);  for (  ValueAxis axis : this.domainAxes.values()) {    if (axis != null) {      axis.setPlot(this);      axis.addChangeListener(this);    }  }  for (  ValueAxis axis : this.rangeAxes.values()) {    if (axis != null) {      axis.setPlot(this);      axis.addChangeListener(this);    }  }  for (  XYDataset dataset : this.datasets.values()) {    if (dataset != null) {      dataset.addChangeListener(this);    }  }  for (  XYItemRenderer renderer : this.renderers.values()) {    if (renderer != null) {      renderer.addChangeListener(this);    }  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static PathPoint curveTo(float c0X,float c0Y,float c1X,float c1Y,float x,float y){  return new PathPoint(c0X,c0Y,c1X,c1Y,x,y);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(ownerElement02.class,args);}  }
class C{  public double minExtent(){  if (isNull())   return 0.0;  double w=getWidth();  double h=getHeight();  if (w < h)   return w;  return h;}  }
class C{  public DeleteNodesResponse DeleteNodes(RequestHeader RequestHeader,DeleteNodesItem... NodesToDelete) throws ServiceFaultException, ServiceResultException {  DeleteNodesRequest req=new DeleteNodesRequest(RequestHeader,NodesToDelete);  return (DeleteNodesResponse)channel.serviceRequest(req);}  }
class C{  default ValidationType validationType(){  return BOTH;}  }
class C{  public ConnectorHandler(){}  }
class C{  public static void addPropertyIntoObject(VolumeObjectProperties key,String value,Object instance) throws Exception {  if (null != value) {    Method method=PropertySetterUtil.getMethod(key.getMethodName(),instance);    if (null == method) {      return;    }    Object typeCastedValue=PropertySetterUtil.typeCast(value,method);    if (null == typeCastedValue) {      return;    }    Object[] args=new Object[]{typeCastedValue};    if (null != method) {      method.invoke(instance,args);    }  }}  }
class C{  public synchronized void finest(String msg){  LogRecord record=new LogRecord(Level.FINEST,msg);  log(record);}  }
class C{  public static BlazeGraphEmbedded open(final BigdataSailRepository repo){  return open(repo,new BaseConfiguration());}  }
class C{  public AdditivelyDecomposableProblem(int n,int k,int overlap){  super();  this.n=n;  this.k=k;  this.overlap=overlap;  checkArguments();  generateRandom();}  }
class C{  public Builder(){}  }
class C{  public boolean deselectAll(){  if (mMultiChoiceAdapter != null) {    performVibrate();    Iterator it=mAllList.entrySet().iterator();    while (it.hasNext()) {      Map.Entry<Integer,View> pair=(Map.Entry<Integer,View>)it.next();      performDeselect(pair.getValue(),pair.getKey(),false);    }    if (multiChoiceSelectionListener != null)     multiChoiceSelectionListener.OnDeselectAll(mSelectedList.size(),mAllList.size());    return true;  }  return false;}  }
class C{  public static <T>ObjectName registerMBean(MBeanServer mbeanSrv,@Nullable String gridName,@Nullable String grp,String name,T impl,@Nullable Class<T> itf) throws JMException {  assert mbeanSrv != null;  assert name != null;  assert itf != null;  DynamicMBean mbean=new IgniteStandardMXBean(impl,itf);  mbean.getMBeanInfo();  return mbeanSrv.registerMBean(mbean,makeMBeanName(gridName,grp,name)).getObjectName();}  }
class C{  @Inject public ExecutorDriverDispatcher(final ExecutorDriverFactory driverFactory,final Executor executor,final ExecutorService executorService){  this.driver=driverFactory.getDriver(executor);  this.executor=executorService;}  }
class C{  public long rsslim(){  return Long.parseLong(fields[24]);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  if (attributeId == null) {    return;  }  List<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>();  attrs.add(new XmlWriter.Attribute("name",attributeId.getName()));  if (attributeId.getType() != null) {    attrs.add(new XmlWriter.Attribute("type",attributeId.getType().toString()));  }  if (totalValueCount > 0) {    attrs.add(new XmlWriter.Attribute("count",Integer.toString(totalValueCount)));  }  w.startElement(GoogleBaseNamespaces.GM,"attribute",attrs,null);  if (values != null) {    w.startRepeatingElement();    for (    AttributeHistogram.UniqueValue value : values) {      value.generate(w);    }    w.endRepeatingElement();  }  w.endElement();}  }
class C{  private boolean defineEntity(String name,char value){  StringBuffer sb=new StringBuffer("&");  sb.append(name);  sb.append(';');  String entityString=sb.toString();  boolean extra=defineChar2StringMapping(entityString,value);  return extra;}  }
class C{  public static String makeLogTag(Class cls){  return makeLogTag(cls.getSimpleName());}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (code_1: ");  result.append(code_1);  result.append(')');  return result.toString();}  }
class C{  final public MutableString replace(final String s,final String r){  final int length=length();  final int ns=s.length();  final int nr=r.length();  if (ns == 0) {    if (nr == 0)     return this;    throw new IllegalArgumentException("You cannot replace the empty string with a nonempty string");  }  final int bloomFilter=buildFilter(s,ns);  final int diff=ns - nr;  int i, j, l;  if (diff >= 0) {    final char[] a=array;    if ((i=indexOf(s,ns,0,bloomFilter)) != -1) {      r.getChars(0,nr,a,i);      j=i + nr;      l=diff;      while ((i=indexOf(s,ns,i + ns,bloomFilter)) != -1) {        if (diff != 0)         System.arraycopy(a,j + l,a,j,i - j - l);        l+=diff;        j=i + ns - l;        r.getChars(0,nr,a,j - nr);      }      if (diff != 0)       System.arraycopy(a,j + l,a,j,length - l - j);      l=length - l;      if (hashLength < 0) {        hashLength=-1;        if (diff != 0) {          final char[] newArray=new char[l];          System.arraycopy(a,0,newArray,0,l);          array=newArray;        }      } else       hashLength=l;    }  } else {    j=0;    i=length;    while ((i=lastIndexOf(s,ns,i - ns,bloomFilter)) != -1)     j++;    if (j != 0) {      int m=l=length + j * -diff;      expand(m);      final char[] a=array;      i=j=length;      while ((i=lastIndexOf(s,ns,i - ns,bloomFilter)) != -1) {        System.arraycopy(a,i + ns,a,l-=j - i - ns,j - i - ns);        r.getChars(0,nr,a,l-=nr);        j=i;      }      if (hashLength < 0)       hashLength=-1; else       hashLength=m;    }  }  return this;}  }
class C{  private boolean checkNotOwned(final Player player,DomesticAnimal animal){  final Player owner=animal.getOwner();  if (owner != null) {    player.sendPrivateText("This animal is already owned by " + owner.getTitle());    return false;  }  return true;}  }
class C{  private StateSet closure(StateSet startStates){  StateSet result=new StateSet(numStates);  if (startStates != null) {    states.reset(startStates);    while (states.hasMoreElements())     result.add(closure(states.nextElement()));  }  return result;}  }
class C{  @Override public Optional<? extends IN4JSEclipseProject> create(IProject project){  if (project == null) {    return Optional.absent();  }  return Optional.fromNullable(model.getN4JSProject(project));}  }
class C{  public static String normalizeDigits(String token){  StringBuilder sb=new StringBuilder(token.length());  int len=token.length();  for (int i=0; i < len; ++i) {    char c=token.charAt(i);    sb.append(Character.isDigit(c) ? "0" : c);  }  return sb.toString();}  }
class C{  private CharsToNameCanonicalizer(){  _canonicalize=true;  _intern=true;  _dirty=true;  initTables(DEFAULT_TABLE_SIZE);}  }
class C{  public HashChain(final List<Hash> hashList){  super(hashList);}  }
class C{  public SearchRequest scroll(Scroll scroll){  this.scroll=scroll;  return this;}  }
class C{  public void removeUseListener(){  remove("menu");  this.useListener=null;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName().equals(org.compiere.model.GridField.PROPERTY))   setValue(evt.getNewValue());}  }
class C{  private static void sqlQueryWithAggregation(){  IgniteCache<AffinityKey<Long>,Person> cache=Ignition.ignite().cache(COLLOCATED_PERSON_CACHE);  String sql="select avg(salary) " + "from Person, \"" + ORG_CACHE + "\".Organization as org "+ "where Person.orgId = org.id "+ "and lower(org.name) = lower(?)";  QueryCursor<List<?>> cursor=cache.query(new SqlFieldsQuery(sql).setArgs("ApacheIgnite"));  print("Average salary for 'ApacheIgnite' employees: ",cursor.getAll());}  }
class C{  private void update(){}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer a=new EnglishAnalyzer();  checkRandomData(random(),a,1000 * RANDOM_MULTIPLIER);  a.close();}  }
class C{  @Override public boolean equals(final Object o){  if (o == this)   return true;  if (!(o instanceof Pair))   return false;  final Pair<?,?> pair2=(Pair<?,?>)o;  return Objects.equals(value1,pair2.value1) && Objects.equals(value2,pair2.value2);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public boolean checkResourceExists(Locale locale) throws Exception {  try {    getTemplate(locale);    return true;  } catch (  FileNotFoundException ex) {    if (logger.isDebugEnabled()) {      logger.debug("No FreeMarker view found for URL: " + getUrl());    }    return false;  }catch (  ParseException ex) {    throw new ApplicationContextException("Failed to parse FreeMarker template for URL [" + getUrl() + "]",ex);  }catch (  IOException ex) {    throw new ApplicationContextException("Could not load FreeMarker template for URL [" + getUrl() + "]",ex);  }}  }
class C{  private void unmap(MappedByteBuffer bb){  if (!cleanInitialized) {    try {      cleanInitialized=true;      clean=Class.forName("sun.misc.Cleaner").getMethod("clean");      clean.setAccessible(true);    } catch (    Exception ex) {    }  }  if (clean == null || bb == null || !bb.isDirect()) {    return;  }  try {    Method cleaner=bb.getClass().getMethod("cleaner");    cleaner.setAccessible(true);    clean.invoke(cleaner.invoke(bb));  } catch (  Exception ex) {  }}  }
class C{  protected void updateResult(SnmpVarBind[] result){  if (result == null)   return;  final int max=varBind.size();  final int len=result.length;  for (int i=0; i < max; i++) {    final int pos=translation[i];    if (pos < len) {      result[pos]=(SnmpVarBind)((NonSyncVector)varBind).elementAtNonSync(i);    } else {      if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {        SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,SnmpSubRequestHandler.class.getName(),"updateResult","Position `" + pos + "' is out of bound...");      }    }  }}  }
class C{  protected final void connect() throws IOException {  if (connection != null) {    return;  }  if (routeSelector == null) {    String uriHost=uri.getHost();    if (uriHost == null) {      throw new UnknownHostException(uri.toString());    }    SSLSocketFactory sslSocketFactory=null;    HostnameVerifier hostnameVerifier=null;    if (uri.getScheme().equalsIgnoreCase("https")) {      sslSocketFactory=client.getSslSocketFactory();      hostnameVerifier=client.getHostnameVerifier();    }    Address address=new Address(uriHost,getEffectivePort(uri),sslSocketFactory,hostnameVerifier,client.getAuthenticator(),client.getProxy(),client.getTransports());    routeSelector=new RouteSelector(address,uri,client.getProxySelector(),client.getConnectionPool(),Dns.DEFAULT,client.getRoutesDatabase());  }  connection=routeSelector.next(method);  if (!connection.isConnected()) {    connection.connect(client.getConnectTimeout(),client.getReadTimeout(),getTunnelConfig());    client.getConnectionPool().maybeShare(connection);    client.getRoutesDatabase().connected(connection.getRoute());  } else {    connection.updateReadTimeout(client.getReadTimeout());  }  connected(connection);  if (connection.getRoute().getProxy() != client.getProxy()) {    requestHeaders.getHeaders().setRequestLine(getRequestLine());  }}  }
class C{  public void run(){  List<ViewerFilter> filters=new ArrayList<ViewerFilter>();  filters.add(new ClosedProjectFilter());  filters.add(new OutputFolderOnlyFilter());  ElementTreeSelectionDialog dialog=SWTFactory.createAllWorkspaceFileSelectionDialog(getShell(),"Classes folder Selection","Choose the class-folder to add to list ",filters);  MultiStatus status=new MultiStatus(Plugin.PLUGIN_ID,IJavaDebugUIConstants.INTERNAL_ERROR,"One or more exceptions occurred while adding projects.",null);  if (dialog.open() == Window.OK) {    Object[] selections=dialog.getResult();    List<IFolder> additions=new ArrayList<IFolder>(selections.length);    for (int i=0; i < selections.length; i++) {      IFolder jp=(IFolder)selections[i];      additions.add(jp);    }    List<IRuntimeClasspathEntry> runtimeEntries=new ArrayList<IRuntimeClasspathEntry>(additions.size());    Iterator<IFolder> iter=additions.iterator();    while (iter.hasNext()) {      IFolder jp=(IFolder)iter.next();      runtimeEntries.add(JavaRuntime.newArchiveRuntimeClasspathEntry(jp));    }    IRuntimeClasspathEntry[] entries=(IRuntimeClasspathEntry[])runtimeEntries.toArray(new IRuntimeClasspathEntry[0]);    getViewer().addEntries(entries);  }  if (!status.isOK()) {    Plugin.statusDialog(status);  }}  }
class C{  public MarketplaceAccessTypeUneligibleForOperationException(String message,String marketplaceId){  super(message,new Object[]{marketplaceId});}  }
class C{  @Override protected boolean beforeSave(boolean newRecord){  if (getC_Invoice_ID() == 0 && getC_Payment_ID() == 0) {    setAmt(Env.ZERO);    setOpenAmt(Env.ZERO);  }  if (Env.ZERO.compareTo(getOpenAmt()) == 0)   setConvertedAmt(Env.ZERO); else   if (Env.ZERO.compareTo(getConvertedAmt()) == 0)   setConvertedAmt(MConversionRate.convert(getCtx(),getOpenAmt(),getC_CurrencyFrom_ID(),getC_CurrencyTo_ID(),getAD_Client_ID(),getAD_Org_ID()));  setTotalAmt(getConvertedAmt().add(getFeeAmt()).add(getInterestAmt()));  if (isProcessed() && getInvoice() != null) {    I_C_DunningLevel level=getParent().getC_DunningLevel();    if (level != null) {      getInvoice().setC_DunningLevel_ID(level.getC_DunningLevel_ID());      if (level.getInvoiceCollectionType() != null) {        getInvoice().setInvoiceCollectionType(level.getInvoiceCollectionType());      } else {        if (!level.isStatement()) {          getInvoice().setInvoiceCollectionType(MInvoice.INVOICECOLLECTIONTYPE_Dunning);        }      }      getInvoice().saveEx();    }  }  return true;}  }
class C{  public RomeFeedEntry(SyndEntry syndEntry){  super(syndEntry);}  }
class C{  private void enableLayer(boolean enable){  final int layerType=enable ? LAYER_TYPE_HARDWARE : LAYER_TYPE_NONE;  for (  Decor decor : mDecors) {    if (decor.withLayer) {      decor.contentView.setLayerType(layerType,null);    }  }}  }
class C{  public boolean matchesSimilar(final ConversationStates state,final Sentence sentence){  if (state == this.state) {    for (    Expression triggerExpr : triggers) {      if (triggerExpr.getNormalized().length() == 0) {        return true;      }      if (sentence.getTriggerExpression().matchesNormalizedSimilar(triggerExpr)) {        return true;      }    }  }  return false;}  }
class C{  public void mouseReleased(MouseEvent e){  m_dragged=false;  m_draggedNode=null;  m_draggedStart=null;  repaint();}  }
class C{  public Task detachDisk(String vmId,VmDiskOperation vmDiskOperation) throws IOException {  String path=String.format("%s/%s/detach_disk",getBasePath(),vmId);  HttpResponse httpResponse=this.restClient.perform(RestClient.Method.POST,path,serializeObjectAsJson(vmDiskOperation));  this.restClient.checkResponse(httpResponse,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(httpResponse);}  }
class C{  public synchronized void remove(int index){  XYEntry<Double,Double> removedEntry=mXY.removeByIndex(index);  double removedX=removedEntry.getKey();  double removedY=removedEntry.getValue();  if (removedX == mMinX || removedX == mMaxX || removedY == mMinY || removedY == mMaxY) {    initRange();  }}  }
class C{  public TournamentSelection(DominanceComparator comparator){  this(2,comparator);}  }
class C{  public VNXeCommandJob deleteFileSystemAsync(String fileSystemId,boolean isForceSnapDeletion) throws VNXeException {  String resourceId=getStorageResourceId(fileSystemId);  if (resourceId == null || resourceId.isEmpty()) {    String error="Could not find corresponding storage resource Id for the " + "file system Id:" + fileSystemId;    _logger.error(error);    throw VNXeException.exceptions.vnxeCommandFailed(error);  }  return deleteResourceAsync(resourceId,isForceSnapDeletion);}  }
class C{  public void reset() throws IOException {  fInputStream.reset();}  }
class C{  @Override public void doSimStep(final double time){  moveNodes(time);  moveLinks(time);  printSimLog(time);}  }
class C{  public static CCMenuItemSprite item(CCNode normalSprite,CCNode selectedSprite,CCNode target,String selector){  return new CCMenuItemSprite(normalSprite,selectedSprite,null,target,selector);}  }
class C{  public HeavyStatus(){  super("heavy");}  }
class C{  public static Bitmap decodeImage(final ContentResolver resolver,final Uri uri,final int maxDim){  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  InputStream is=null;  try {    is=resolver.openInputStream(uri);    BitmapFactory.decodeStream(is,null,options);  } catch (  Exception e) {    if (DEBUG) {      L.v(TAG,"decodeImage() ex=" + e);      e.printStackTrace();    }    return null;  } finally {    try {      is.close();    } catch (    IOException e) {    }  }  final int origWidth=options.outWidth;  final int origHeight=options.outHeight;  options.inJustDecodeBounds=false;  options.inScaled=false;  options.inPurgeable=true;  options.inInputShareable=true;  options.inDither=true;  options.inPreferredConfig=Bitmap.Config.RGB_565;  if (origWidth > maxDim || origHeight > maxDim) {    int k=1;    int tmpHeight=origHeight, tmpWidth=origWidth;    while ((tmpWidth / 2) >= maxDim || (tmpHeight / 2) >= maxDim) {      tmpWidth/=2;      tmpHeight/=2;      k*=2;    }    options.inSampleSize=k;  }  Bitmap bitmap=null;  try {    is=resolver.openInputStream(uri);    bitmap=BitmapFactory.decodeStream(is,null,options);  } catch (  Exception e) {    if (DEBUG) {      L.v(TAG,"decodeImage() ex=" + e);      e.printStackTrace();    }  } finally {    try {      is.close();    } catch (    IOException e) {    }  }  if (null != bitmap) {    if (DEBUG) {      L.v(TAG,"decodeImage() " + bitmap.getWidth() + "XUtil"+ bitmap.getHeight());    }  }  return bitmap;}  }
class C{  public boolean isReadWrite(){  return m_textPane.isEditable();}  }
class C{  public void removeLinkListener(LinkListener listener){  listenerList.remove(LinkListener.class,listener);}  }
class C{  protected ComplexPrimitivePropertyTypeImpl(){  super();}  }
class C{  private static void s_uarvar(SparseBlock a,double[] c,int m,int n,CM_COV_Object cbuff,CM cm,int rl,int ru) throws DMLRuntimeException {  for (int i=rl, cix=rl * 5; i < ru; i++, cix+=5) {    cbuff.reset();    int count=(a.isEmpty(i)) ? n : n - a.size(i);    cbuff.w=count;    if (!a.isEmpty(i)) {      var(a.values(i),a.pos(i),a.size(i),cbuff,cm);    }    c[cix]=cbuff.getRequiredResult(AggregateOperationTypes.VARIANCE);    c[cix + 1]=cbuff.mean._sum;    c[cix + 2]=cbuff.w;    c[cix + 3]=cbuff.m2._correction;    c[cix + 4]=cbuff.mean._correction;  }}  }
class C{  public DataTypeException(String message,Throwable cause){  super(message,cause);}  }
class C{  public void abortiveClose(){  try {    server.abortiveCloseChannel(key);  } catch (  IOException e) {    System.out.println(e);  }}  }
class C{  public void push(double val){  this.push(new BaseTypeWrapper(val));}  }
class C{  public TaskList createSnapshotOfApplication(URI id,VolumeGroupSnapshotCreateParam input){  UriBuilder uriBuilder=client.uriBuilder(APP_SUPPORT_CREATE_SNAPSHOT_URL);  return client.postURI(TaskList.class,input,uriBuilder.build(id));}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Widget w=getWidget(stack);  return (w != null) ? Widget.TYPES[w.type()] : null;}  }
class C{  public void propertyChange(PropertyChangeEvent evt){  if (evt.getPropertyName() == MouseDelegator.ActiveModeProperty) {    String mmID=((MapMouseMode)evt.getNewValue()).getPrettyName();    if (Debug.debugging("mousemode")) {      Debug.output("propertyChange: action mode property " + mmID);    }    titleButton.setText(mmID);  } else   if (evt.getPropertyName() == MouseDelegator.MouseModesProperty) {    Debug.message("mousemode","propertyChange: mouse modes property");    rbs.removeAll();    setPanel(mouseDelegator);  }}  }
class C{  @Override void draw(final Graphics g,final int scale,final Color color){  int mapX=worldToCanvas(x,scale);  int mapY=worldToCanvas(y,scale);  final int scale_2=scale / 2;  final int size=scale_2 + 2;  mapX+=scale_2;  mapY+=scale_2;  g.setColor(color);  g.drawLine(mapX - size,mapY,mapX + size,mapY);  g.drawLine(mapX,mapY - size,mapX,mapY + size);}  }
class C{  public static boolean isVariable(RDFNode node){  return asVariable(node) != null;}  }
class C{  public String toString(){  return this.assetType;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override protected void onStart(){  super.onStart();  mApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).addConnectionCallbacks(this).addOnConnectionFailedListener(this).build();  mApiClient.connect();}  }
class C{  public CholeskyDecomposition chol(){  return new CholeskyDecomposition(this);}  }
class C{  public void close(){  if (!open) {    return;  }  if (openedToRight) {    int topX=topWrapper.getX();    openCloseMotion=Motion.createSplineMotion(topX,0,300);  } else {    int topX=topWrapper.getX();    openCloseMotion=Motion.createSplineMotion(-topX,0,300);  }  getComponentForm().registerAnimated(this);  openCloseMotion.start();  open=false;}  }
class C{  public BNetwork copy(){  BNetwork copyNetwork=new BNetwork();  List<BNode> sortedNodes=getSortedNodes();  Collections.reverse(sortedNodes);  for (  BNode node : sortedNodes) {    BNode nodeCopy=node.copy();    for (    BNode inputNode : node.getInputNodes()) {      if (!copyNetwork.hasNode(inputNode.getId())) {        throw new RuntimeException("cannot copy the network: structure " + "is corrupt (" + inputNode.getId() + " is not present, but "+ "should be input node to "+ node.getId()+ ")");      }      nodeCopy.addInputNode(copyNetwork.getNode(inputNode.getId()));    }    copyNetwork.addNode(nodeCopy);  }  return copyNetwork;}  }
class C{  public static void main(String[] args){  int m=Integer.parseInt(args[0]);  MinPQ<Transaction> pq=new MinPQ<Transaction>(m + 1);  while (StdIn.hasNextLine()) {    String line=StdIn.readLine();    Transaction transaction=new Transaction(line);    pq.insert(transaction);    if (pq.size() > m)     pq.delMin();  }  Stack<Transaction> stack=new Stack<Transaction>();  for (  Transaction transaction : pq)   stack.push(transaction);  for (  Transaction transaction : stack)   StdOut.println(transaction);}  }
class C{  public void println(Object x){  out.println(x);}  }
class C{  public RdKNNTreeHeader(int pageSize,int dirCapacity,int leafCapacity,int dirMinimum,int leafMinimum,int k_max){  super(pageSize,dirCapacity,leafCapacity,dirMinimum,leafMinimum);  this.k_max=k_max;}  }
class C{  private String toResourceIdentifier(String value){  if (value.startsWith("/")) {    value=value.substring(1);  }  return value;}  }
class C{  public X509TrustChainKeySelector(X509Certificate... trustedRoots){  _log=LoggerFactory.getLogger(X509TrustChainKeySelector.class);  checkCtorArgsNotNull(trustedRoots);  _trustAnchors=new HashSet<TrustAnchor>();  for (  X509Certificate cert : trustedRoots) {    _trustAnchors.add(new TrustAnchor(cert,null));  }}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  @Override public synchronized void mark(int readLimit){  super.mark(Integer.MAX_VALUE);}  }
class C{  public static java.awt.Color decodeColorRGBA(String encodedString){  if (encodedString == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (encodedString.startsWith("#")) {    encodedString=encodedString.replaceFirst("#","0x");  } else   if (!encodedString.startsWith("0x") && !encodedString.startsWith("0X")) {    encodedString="0x" + encodedString;  }  Long longValue;  try {    longValue=Long.parseLong(encodedString.substring(2),16);  } catch (  NumberFormatException e) {    String message=Logging.getMessage("generic.ConversionError",encodedString);    Logging.logger().log(java.util.logging.Level.SEVERE,message,e);    return null;  }  int i=(int)(longValue & 0xFFFFFFFFL);  return new java.awt.Color((i >> 24) & 0xFF,(i >> 16) & 0xFF,(i >> 8) & 0xFF,i & 0xFF);}  }
class C{  public HadoopIgfs20FileSystemShmemPrimarySelfTest(){  super(PRIMARY);}  }
class C{  public static <T>void forEachWithIndex(List<T> list,ObjectIntProcedure<? super T> objectIntProcedure){  int size=list.size();  for (int i=0; i < size; i++) {    objectIntProcedure.value(list.get(i),i);  }}  }
class C{  public int read(byte b[],int off,int len) throws IOException {  if (length == 0)   return -1;  len=(length < len) ? length : len;  int n=in.read(b,off,len);  length=(n != -1) ? length - n : 0;  return n;}  }
class C{  public int numColumns(){  return size();}  }
class C{  public NodesInfoRequest http(boolean http){  this.http=http;  return this;}  }
class C{  public MySqlRepeatStatement parseRepeat(String label){  MySqlRepeatStatement repeatStmt=new MySqlRepeatStatement();  repeatStmt.setLabelName(label);  accept(Token.REPEAT);  parseProcedureStatementList(repeatStmt.getStatements());  accept(Token.UNTIL);  repeatStmt.setCondition(exprParser.expr());  accept(Token.END);  accept(Token.REPEAT);  acceptIdentifier(label);  accept(Token.SEMI);  return repeatStmt;}  }
class C{  public ReplDBMSEvent poll() throws InterruptedException {  return queue.poll();}  }
class C{  @Override public void initialize(URL url,ResourceBundle rb){  animator.observe(notificationArea.getChildren());  final ObservableList<Notification> notifications=userInterfaceComponent.notifications();  notifications.addListener(null);  while (!notifications.isEmpty()) {    final Notification n=notifications.get(0);    NotificationController.showNotification(notificationArea,n.text(),n.icon(),n.palette(),n.onClose());    notifications.remove(0);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:39.991 -0500",hash_original_method="583E0D5D228DC11F4F3B1B541EE8393C",hash_generated_method="65DA150612AFC1A906C50197734E6BB1") public Builder detectDiskWrites(){  return enable(DETECT_DISK_WRITE);}  }
class C{  public static synchronized void initServiceInfo(Provider p){  for (  Provider.Service service : p.getServices()) {    String type=service.getType();    if (cachedSecureRandomService == null && type.equals("SecureRandom")) {      cachedSecureRandomService=service;    }    String key=type + "." + service.getAlgorithm().toUpperCase(Locale.US);    if (!services.containsKey(key)) {      services.put(key,service);    }    for (    String alias : Engine.door.getAliases(service)) {      key=type + "." + alias.toUpperCase(Locale.US);      if (!services.containsKey(key)) {        services.put(key,service);      }    }  }}  }
class C{  public StringIndexOutOfBoundsException(String s,int index){  this(s.length(),index);}  }
class C{  public static SignerInformation addCounterSigners(SignerInformation signerInformation,SignerInformationStore counterSigners){  SignerInfo sInfo=signerInformation.info;  AttributeTable unsignedAttr=signerInformation.getUnsignedAttributes();  ASN1EncodableVector v;  if (unsignedAttr != null) {    v=unsignedAttr.toASN1EncodableVector();  } else {    v=new ASN1EncodableVector();  }  ASN1EncodableVector sigs=new ASN1EncodableVector();  for (Iterator it=counterSigners.getSigners().iterator(); it.hasNext(); ) {    sigs.add(((SignerInformation)it.next()).toASN1Structure());  }  v.add(new Attribute(CMSAttributes.counterSignature,new DERSet(sigs)));  return new SignerInformation(new SignerInfo(sInfo.getSID(),sInfo.getDigestAlgorithm(),sInfo.getAuthenticatedAttributes(),sInfo.getDigestEncryptionAlgorithm(),sInfo.getEncryptedDigest(),new DERSet(v)),signerInformation.contentType,signerInformation.content,null);}  }
class C{  public boolean isFeatureSelected(int recordNumber){  if (recordNumber >= selectedFeatures.getLength()) {    return false;  }  return selectedFeatures.getValue(recordNumber);}  }
class C{  public static List<ViewFactory> instantiateFactories(int streamNum,List<ViewSpec> viewSpecList,StatementContext statementContext,boolean isSubquery,int subqueryNumber) throws ViewProcessingException {  List<ViewFactory> factoryChain=new ArrayList<ViewFactory>();  boolean grouped=false;  for (  ViewSpec spec : viewSpecList) {    ViewFactory viewFactory=statementContext.getViewResolutionService().create(spec.getObjectNamespace(),spec.getObjectName());    Audit audit=AuditEnum.VIEW.getAudit(statementContext.getAnnotations());    if (audit != null) {      viewFactory=(ViewFactory)ViewFactoryProxy.newInstance(statementContext.getEngineURI(),statementContext.getStatementName(),viewFactory,spec.getObjectName());    }    factoryChain.add(viewFactory);    try {      ViewFactoryContext context=new ViewFactoryContext(statementContext,streamNum,spec.getObjectNamespace(),spec.getObjectName(),isSubquery,subqueryNumber,grouped);      viewFactory.setViewParameters(context,spec.getObjectParameters());    } catch (    ViewParameterException e) {      throw new ViewProcessingException("Error in view '" + spec.getObjectNamespace() + ':'+ spec.getObjectName()+ "', "+ e.getMessage());    }    if (viewFactory instanceof GroupByViewFactoryMarker) {      grouped=true;    }    if (viewFactory instanceof MergeViewFactoryMarker) {      grouped=false;    }  }  return factoryChain;}  }
class C{  public ExpressionList createExpressionList(){  ExpressionListImpl expressionList=new ExpressionListImpl();  return expressionList;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void invoke(InputStream is,OutputStream os,String objectId,SerializerFactory serializerFactory) throws Exception {  CharArrayWriter writer=new CharArrayWriter();  _threadWriter.set(writer);  PrintWriter dbg=new PrintWriter(writer);  HessianDebugInputStream debug=new HessianDebugInputStream(is,dbg);  debug.startTop2();  super.invoke(debug,os,objectId,serializerFactory);}  }
class C{  public void jumpTo(final int resultIndex){  m_currentSearchIndex=0;  SearchResult previousResult=m_results.get(0);  for (int i=1; i <= resultIndex; i++) {    final SearchResult currentResult=m_results.get(i);    if (previousResult.getObject() != currentResult.getObject()) {      m_currentSearchIndex++;    }    previousResult=currentResult;  }  if (m_currentSearchIndex >= m_reducedResults.size()) {    throw new IllegalStateException();  }}  }
class C{  public void extractMajorLocations(){  if (this.chains.size() > 0) {    ArrayList<ArrayList<Activity>> majorLocationList=new ArrayList<ArrayList<Activity>>();    ArrayList<Activity> newMajorLocation=new ArrayList<Activity>();    majorLocationList.add(newMajorLocation);    newMajorLocation.add(this.chains.get(0).getActivities().get(0));    for (int i=0; i < this.chains.size(); i++) {      Activity a1=this.chains.get(i).getActivities().get(this.chains.get(i).getActivities().size() - 1);      Coordinate c1=a1.getLocation().getCoordinate();      boolean duplicate=false;      int j=0;      while ((!duplicate) && (j < majorLocationList.size())) {        ArrayList<Activity> thisMajorLocation=majorLocationList.get(j);        int k=0;        while ((!duplicate) && (k < thisMajorLocation.size())) {          Activity a2=thisMajorLocation.get(k);          Coordinate c2=a2.getLocation().getCoordinate();          int distance=(int)(c1.distance(c2));          if (distance < DISTANCE_THRESHOLD) {            duplicate=true;            majorLocationList.get(j).add(a1);          } else {            k++;          }        }        j++;      }      if (!duplicate) {        newMajorLocation=new ArrayList<Activity>();        newMajorLocation.add(a1);        majorLocationList.add(newMajorLocation);      }    }    for (int i=0; i < majorLocationList.size(); i++) {      ArrayList<Activity> thisList=majorLocationList.get(i);      double xSum=0;      double ySum=0;      for (int j=0; j < thisList.size(); j++) {        GPSPoint point=thisList.get(j).getLocation();        xSum+=point.getCoordinate().x;        ySum+=point.getCoordinate().y;      }      Coordinate center=new Coordinate((xSum / thisList.size()),(ySum / thisList.size()));      for (int j=0; j < thisList.size(); j++) {        thisList.get(j).getLocation().setCoordinate(center);      }    }    if (majorLocationList.size() > 1) {      int i=0;      while (i < majorLocationList.size() - 1) {        boolean deleted=false;        Coordinate c1=majorLocationList.get(i).get(0).getLocation().getCoordinate();        int w1=majorLocationList.get(i).size();        int j=(i + 1);        while (j < majorLocationList.size() && !deleted) {          Coordinate c2=majorLocationList.get(j).get(0).getLocation().getCoordinate();          int w2=majorLocationList.get(j).size();          int dist=(int)c1.distance(c2);          if (dist < DISTANCE_THRESHOLD) {            if (w1 > w2) {              for (int k=0; k < majorLocationList.get(j).size(); k++) {                majorLocationList.get(j).get(k).getLocation().setCoordinate(c1);              }              majorLocationList.get(i).addAll(majorLocationList.get(j));              majorLocationList.remove(j);            } else {              for (int k=0; k < majorLocationList.get(i).size(); k++) {                majorLocationList.get(i).get(k).getLocation().setCoordinate(c2);              }              majorLocationList.get(j).addAll(majorLocationList.get(i));              majorLocationList.remove(i);              deleted=true;            }          } else {            j++;          }        }        if (!deleted) {          i++;        }      }    }    for (int i=0; i < majorLocationList.size(); i++) {      homeLocation.add(majorLocationList.get(i).get(0));    }  }}  }
class C{  public void rejectReInvite(int code){  if (sLogger.isActivated()) {    sLogger.debug("ReInvite  has been rejected");  }synchronized (mWaitUserAnswer) {    mReInviteStatus=InvitationStatus.INVITATION_REJECTED;    mWaitUserAnswer.notifyAll();  }}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  @LargeTest public void testPreviewTheStoryBoard() throws Exception {  final String videoItemFileName1=INPUT_FILE_PATH + "MPEG4_SP_720x480_30fps_280kbps_AACLC_48kHz_96kbps_s_0_21.mp4";  final String videoItemFileName2=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_256kbps_0_30.mp4";  final String videoItemFileName3=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_256kbps_AACLC_32kHz_128kbps_s_1_17.3gp";  previewStart=false;  previewStop=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem1",videoItemFileName1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem1.setExtractBoundaries(0,10000);  mVideoEditor.addMediaItem(mediaVideoItem1);  final MediaVideoItem mediaVideoItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem2",videoItemFileName2,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem2);  mediaVideoItem2.setExtractBoundaries(0,10000);  final MediaVideoItem mediaVideoItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"mediaVideoItem3",videoItemFileName3,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem3.setExtractBoundaries(0,10000);  mVideoEditor.insertMediaItem(mediaVideoItem3,mediaVideoItem1.getId());  List<MediaItem> mediaList=mVideoEditor.getAllMediaItems();  assertEquals("Media Item 1",mediaVideoItem1,mediaList.get(0));  assertEquals("Media Item 3",mediaVideoItem3,mediaList.get(1));  assertEquals("Media Item 2",mediaVideoItem2,mediaList.get(2));  mediaVideoItem1.setRenderingMode(MediaItem.RENDERING_MODE_BLACK_BORDER);  assertEquals("Media Item 1 Rendering Mode",MediaItem.RENDERING_MODE_BLACK_BORDER,mediaVideoItem1.getRenderingMode());  mediaVideoItem2.setRenderingMode(MediaItem.RENDERING_MODE_BLACK_BORDER);  assertEquals("Media Item 2 Rendering Mode",MediaItem.RENDERING_MODE_BLACK_BORDER,mediaVideoItem2.getRenderingMode());  mediaVideoItem3.setRenderingMode(MediaItem.RENDERING_MODE_STRETCH);  assertEquals("Media Item 3 Rendering Mode",MediaItem.RENDERING_MODE_STRETCH,mediaVideoItem3.getRenderingMode());  mVideoEditor.setAspectRatio(MediaProperties.ASPECT_RATIO_5_3);  assertEquals("Aspect Ratio",MediaProperties.ASPECT_RATIO_5_3,mVideoEditor.getAspectRatio());  validatePreviewProgress(0,-1,false,mVideoEditor.getDuration());}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;default :return null;}}  }
class C{  Iterator<C> createColumnKeyIterator(){  return new ColumnKeyIterator();}  }
class C{  protected TAnnotationTypeRefArgumentImpl(){  super();}  }
class C{  public void showInformation(){  graphic(new ImageView(Notifications.class.getResource("/org/controlsfx/dialog/dialog-information.png").toExternalForm()));  show();}  }
class C{  public DebugGraphics(Graphics graphics,JComponent component){  this(graphics);  setDebugOptions(component.shouldDebugGraphics());}  }
class C{  public void clearAuthenticationTokens(){  this.authenticationTokens.clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.599 -0500",hash_original_method="5624025FD66E34CEC2F994FDB502F76B",hash_generated_method="178F02D1FDAA12FE7676116BF391D7C7") public void reportActiveChange(){  reportChange(ContentResolver.SYNC_OBSERVER_TYPE_ACTIVE);}  }
class C{  private void startServer(int portno) throws Exception {  port=portno;  SelectChannelConnector connector1=new SelectChannelConnector();  connector1.setHost("127.0.0.1");  connector1.setPort(port);  server.addConnector(connector1);  server.start();}  }
class C{  @Override public Writer append(char value){  builder.append(value);  return this;}  }
class C{  public void writeTo(ChannelBuffer data){  data.writeInt(wildcards);  data.writeShort(inputPort);  data.writeBytes(this.dataLayerSource);  data.writeBytes(this.dataLayerDestination);  data.writeShort(dataLayerVirtualLan);  data.writeByte(dataLayerVirtualLanPriorityCodePoint);  data.writeByte((byte)0x0);  data.writeShort(dataLayerType);  data.writeByte(networkTypeOfService);  data.writeByte(networkProtocol);  data.writeByte((byte)0x0);  data.writeByte((byte)0x0);  data.writeInt(networkSource);  data.writeInt(networkDestination);  data.writeShort(transportSource);  data.writeShort(transportDestination);}  }
class C{  public Object notifyStatusBar(String tickerText,String contentTitle,String contentBody,boolean vibrate,boolean flashLights,Hashtable args){  return impl.notifyStatusBar(tickerText,contentTitle,contentBody,vibrate,flashLights,args);}  }
class C{  public EdgeEndBundleStar(){}  }
class C{  public void testRandomlyAgainstJavaList(){  PStack<Integer> pstack=ConsPStack.empty();  List<Integer> list=new LinkedList<Integer>();  Random r=new Random();  for (int i=0; i < 1000; i++) {    if (pstack.size() == 0 || r.nextBoolean()) {      if (r.nextBoolean()) {        Integer v=r.nextInt();        assertEquals(list.contains(v),pstack.contains(v));        list.add(0,v);        pstack=pstack.plus(v);      } else {        int k=r.nextInt(pstack.size() + 1);        Integer v=r.nextInt();        assertEquals(list.contains(v),pstack.contains(v));        if (k < pstack.size())         assertEquals(list.get(k),pstack.get(k));        list.add(k,v);        pstack=pstack.plus(k,v);      }    } else     if (r.nextBoolean()) {      int k=r.nextInt(pstack.size());      Integer v=r.nextInt();      list.set(k,v);      pstack=pstack.with(k,v);    } else {      int j=r.nextInt(pstack.size()), k=0;      for (      Integer e : pstack) {        assertTrue(list.contains(e));        assertTrue(pstack.contains(e));        assertEquals(e,pstack.get(k));        assertEquals(list.get(k),pstack.get(k));        UtilityTest.assertEqualsAndHash(pstack,pstack.minus(k).plus(k,pstack.get(k)));        UtilityTest.assertEqualsAndHash(pstack,pstack.plus(k,10).minus(k));        if (k == j) {          list.remove(k);          pstack=pstack.minus(k);          k--;          j=-1;        }        k++;      }    }    Integer v=r.nextInt();    assertEquals(list.contains(v),pstack.contains(v));    list.remove(v);    pstack=pstack.minus(v);    String s=Integer.toString(v);    assertFalse(pstack.contains(v));    pstack=pstack.minus(s);    assertEquals(list.size(),pstack.size());    UtilityTest.assertEqualsAndHash(list,pstack);    UtilityTest.assertEqualsAndHash(pstack,ConsPStack.from(pstack));    UtilityTest.assertEqualsAndHash(ConsPStack.empty(),pstack.minusAll(pstack));    UtilityTest.assertEqualsAndHash(pstack,ConsPStack.empty().plusAll(UtilityTest.reverse(pstack)));    UtilityTest.assertEqualsAndHash(pstack,ConsPStack.singleton(10).plusAll(1,UtilityTest.reverse(pstack)).minus(0));  }}  }
class C{  public Collection<Member> members(){  return members;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public HashPrintJobAttributeSet(PrintJobAttribute[] attributes){  super(attributes,PrintJobAttribute.class);}  }
class C{  public int codePointBefore(int index){  if (index < 1 || index > count) {    throw new IndexOutOfBoundsException();  }  int s=index + offset;  return Character.codePointBefore(value,s);}  }
class C{  public void advance(){  this.totalResults++;  if (this.mayRender()) {    this.renderedResults++;  }  if (this.untilFirst > 0) {    this.untilFirst--;  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public static MovieListFragment newInstance(int currentTabPosition){  MovieListFragment fragment=new MovieListFragment();  Bundle args=new Bundle();  args.putInt(ARG_TAB_POSITION,currentTabPosition);  fragment.setArguments(args);  return fragment;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.153 -0500",hash_original_method="3003DC7DA59FD970800BABF8F86CE4CE",hash_generated_method="A05F49A324F76D94861C4DC456DEFD13") public final void connectProxy(HttpHost proxy,boolean secure){  if (proxy == null) {    throw new IllegalArgumentException("Proxy host may not be null.");  }  if (this.connected) {    throw new IllegalStateException("Already connected.");  }  this.connected=true;  this.proxyChain=new HttpHost[]{proxy};  this.secure=secure;}  }
class C{  public void endEntity(String name) throws org.xml.sax.SAXException {}  }
class C{  public boolean shouldExecute(){  if (!isEnable)   return false;  Entity entityliving=theMaid.getOwner();  if (entityliving == null) {    return false;  }  if (theMaid.isSitting() || theMaid.isMaidWait()) {    return false;  }  toDistance=theMaid.getDistanceSqToEntity(entityliving);  if (toDistance < theMaid.getActiveModeClass().getDistanceSqToStartFollow() && !theMaid.isInWater()) {    return false;  }  theOwner=entityliving;  return true;}  }
class C{  private static String convertHtml2Text(String html){  String s=html;  s=StringUtils.replaceAll(s,"<b>","");  s=StringUtils.replaceAll(s,"</b>","");  s=StringUtils.replaceAll(s,"<ul>","");  s=StringUtils.replaceAll(s,"</ul>","");  s=StringUtils.replaceAll(s,"<li>","- ");  s=StringUtils.replaceAll(s,"</li>","");  s=StringUtils.replaceAll(s,"<a href=\"","( ");  s=StringUtils.replaceAll(s,"\">"," ) ");  s=StringUtils.replaceAll(s,"</a>","");  s=StringUtils.replaceAll(s,"<br />","");  s=StringUtils.replaceAll(s,"<br/>","");  s=StringUtils.replaceAll(s,"<br>","");  if (s.indexOf('<') >= 0 || s.indexOf('>') >= 0) {    throw new RuntimeException("Unsupported HTML Tag: < or > in " + s);  }  return s;}  }
class C{  public static void cancelPendingRequests(Object tag){  if (mRequestQueue != null) {    mRequestQueue.cancelAll(tag);  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override protected Tuple<DeleteResponse,DeleteRequest> shardOperationOnPrimary(ClusterState clusterState,PrimaryOperationRequest shardRequest){  DeleteRequest request=shardRequest.request;  try {    clusterService.deleteRow(request.index(),request.type(),request.id(),request.consistencyLevel().toCassandraConsistencyLevel());    DeleteResponse response=new DeleteResponse(shardRequest.shardId.getIndex(),request.type(),request.id(),0L,true);    return new Tuple<>(response,shardRequest.request);  } catch (  RequestExecutionException|RequestValidationException|IOException e) {    throw new ElasticsearchException(e.getMessage(),e);  }}  }
class C{  public CcdRunner(DagWrapper dagWrapper,Parameters params){  super(dagWrapper.getDag(),params);}  }
class C{  public TermNode left(){  return (TermNode)super.getRequiredProperty(Annotations.LEFT);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>();  newVector.add(new Option("\tThe leaf prediction strategy to use. 0 = " + "majority class, 1 = naive Bayes, 2 = naive Bayes adaptive.\n\t" + "(default = 2)","L",1,"-L"));  newVector.add(new Option("\tThe splitting criterion to use. 0 = " + "Gini, 1 = Info gain\n\t" + "(default = 1)","S",1,"-S"));  newVector.add(new Option("\tThe allowable error in a split decision " + "- values closer to zero will take longer to decide\n\t" + "(default = 1e-7)","E",1,"-E"));  newVector.add(new Option("\tThreshold below which a split will be forced to " + "break ties\n\t(default = 0.05)","H",1,"-H"));  newVector.add(new Option("\tMinimum fraction of weight required down at least two " + "branches for info gain splitting\n\t(default = 0.01)","M",1,"-M"));  newVector.add(new Option("\tGrace period - the number of instances " + "a leaf should observe between split attempts\n\t" + "(default = 200)","G",1,"-G"));  newVector.add(new Option("\tThe number of instances (weight) a leaf " + "should observe before allowing naive Bayes to make " + "predictions (NB or NB adaptive only)\n\t(default = 0)","N",1,"-N"));  newVector.add(new Option("\tPrint leaf models when using naive Bayes " + "at the leaves.","P",0,"-P"));  return newVector.elements();}  }
class C{  protected void textStart(){  textLen=0;}  }
class C{  static void writeKeyLength(long ptr,int len,GridUnsafeMemory mem){  mem.writeInt(ptr + HEADER_KEY_SIZE_OFF,len);}  }
class C{  @Override public Instances transformedHeader() throws Exception {  if (m_eigenvalues == null) {    throw new Exception("Principal components hasn't been built yet");  }  if (m_transBackToOriginal) {    return m_originalSpaceFormat;  } else {    return m_transformedFormat;  }}  }
class C{  int read(){  return index == chars.length ? EOF : chars[index++];}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("GenerateModel[").append("]");  return sb.toString();}  }
class C{  private JMenu createMenu(){  JMenu menu=new JMenu("");  if (getWindowDecorationStyle() == JRootPane.FRAME) {    addMenuItems(menu);  }  return menu;}  }
class C{  @SuppressWarnings("all") public void dispose(){  this.component=null;  this.style=null;  releaseContext(this);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof DirectedGraph)) {    return false;  } else {    return nodes.equals(((DirectedGraph<?>)obj).nodes);  }}  }
class C{  private static void initializeVM() throws Exception {  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  props.setProperty(LOG_LEVEL,"info");  distributedSystem=DistributedSystem.connect(props);  cache=CacheFactory.create(distributedSystem);  assertNotNull(cache);  DiskStoreFactory dsf=cache.createDiskStoreFactory();  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.LOCAL);  File dir=new File("testingDirectoryDefault");  dir.mkdir();  dir.deleteOnExit();  File[] dirs={dir};  dsf.setDiskDirsAndSizes(dirs,new int[]{Integer.MAX_VALUE});  dsf.setAutoCompact(false);  DirectoryHolder.SET_DIRECTORY_SIZE_IN_BYTES_FOR_TESTING_PURPOSES=true;  try {    factory.setDiskStoreName(dsf.create(regionName).getName());  }  finally {    DirectoryHolder.SET_DIRECTORY_SIZE_IN_BYTES_FOR_TESTING_PURPOSES=false;  }  factory.setDiskSynchronous(true);  factory.setDataPolicy(DataPolicy.NORMAL);  factory.setEvictionAttributes(EvictionAttributesImpl.createLIFOMemoryAttributes(maximumMegabytes,EvictionAction.OVERFLOW_TO_DISK));  RegionAttributes attr=factory.create();  ((GemFireCacheImpl)cache).createRegion(regionName,attr);  lifoClockHand=((VMLRURegionMap)((LocalRegion)cache.getRegion(Region.SEPARATOR + regionName)).entries)._getLruList();  lifoStats=lifoClockHand.stats();}  }
class C{  private static void copyToVOAttributes(Discount domObj,VODiscount voObj){  voObj.setValue(domObj.getValue());  voObj.setStartTime(domObj.getStartTime());  voObj.setEndTime(domObj.getEndTime());}  }
class C{  public void generateExportGroupChangePathParamsWorkflow(Workflow workflow,BlockStorageScheduler blockScheduler,MaskingOrchestrator orchestrator,StorageSystem storage,ExportGroup exportGroup,BlockObject volume,String token) throws Exception {  Set<URI> volumeURISet=new HashSet<URI>();  volumeURISet.add(volume.getId());  if (exportGroup.getPathParameters().containsKey(volume.getId().toString())) {    _log.info(String.format("No changes will be made to ExportGroup %s (%s) because it has explicit path parameters overiding the Vpool",exportGroup.getLabel(),exportGroup.getId()));    return;  }  ExportPathParams newParam=blockScheduler.calculateExportPathParamForVolumes(volumeURISet,0,storage.getId(),exportGroup.getId());  _log.info("New path parameters requested: " + newParam.toString());  List<ExportMask> masks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup,storage.getId());  for (  ExportMask mask : masks) {    if (!mask.hasVolume(volume.getId())) {      continue;    }    if (mask.getCreatedBySystem() == false || mask.getZoningMap() == null) {      _log.info(String.format("ExportMask %s not ViPR created, and will be ignored",mask.getMaskName()));      continue;    }    ExportPathParams maskParam=BlockStorageScheduler.calculateExportPathParamForExportMask(_dbClient,mask);    _log.info(String.format("Existing mask %s (%s) path parameters: %s",mask.getMaskName(),mask.getId(),maskParam.toString()));    if (newParam.getPathsPerInitiator() > maskParam.getPathsPerInitiator()) {      _log.info("Increase paths per initiator not supported");    } else     if (newParam.getMaxPaths() > maskParam.getMaxPaths()) {      List<URI> unusedInitiators=getUnusedInitiators(exportGroup,mask);      if (!unusedInitiators.isEmpty()) {        _log.info(String.format("Increasing max_paths from %d to %d",maskParam.getMaxPaths(),newParam.getMaxPaths()));        orchestrator.increaseMaxPaths(workflow,storage,exportGroup,mask,unusedInitiators,token);      }    } else     if (newParam.getMaxPaths() < maskParam.getMaxPaths()) {      _log.info("Decrease max paths not supported");    }  }}  }
class C{  public static PreProcessor expandJson(){  return expandJson(null);}  }
class C{  public long executeForLong(String sql,Object[] bindArgs,int connectionFlags){  if (sql == null) {    throw new IllegalArgumentException("sql must not be null.");  }  if (executeSpecial(sql,bindArgs,connectionFlags)) {    return 0;  }  acquireConnection(sql,connectionFlags);  try {    return mConnection.executeForLong(sql,bindArgs);  }  finally {    releaseConnection();  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private void registerMailets(String parentMBeanName,Iterator<Mailet> mailets) throws JMException {  int i=0;  while (mailets.hasNext()) {    Mailet mailet=mailets.next();    MailetManagement mailetManagement=new MailetManagement(mailet.getMailetConfig());    String mailetMBeanName=parentMBeanName + ",subtype=mailet,index=" + (i++)+ ",mailetname="+ mailetManagement.getMailetName();    registerMBean(mailetMBeanName,mailetManagement);    mailetMap.put(mailet,mailetManagement);  }}  }
class C{  private static SSLEngine createSSLEngine(BoltServerAddress address,SSLContext sslContext){  SSLEngine sslEngine=sslContext.createSSLEngine(address.host(),address.port());  sslEngine.setUseClientMode(true);  return sslEngine;}  }
class C{  public int charsWidth(char[] ch,int offset,int length){  return Display.impl.charsWidth(font,ch,offset,length);}  }
class C{  public boolean isDurableWriteEnabled(){  return getBoolean(BKDL_IS_DURABLE_WRITE_ENABLED,defaultConfig.getBoolean(BKDL_IS_DURABLE_WRITE_ENABLED,BKDL_IS_DURABLE_WRITE_ENABLED_DEFAULT));}  }
class C{  public static String toCommaDelimitedString(Collection c){  if (c.isEmpty()) {    throw new IllegalArgumentException();  }  StringBuffer result=new StringBuffer();  for (Iterator i=c.iterator(); i.hasNext(); ) {    Object o=i.next();    result.append(", " + o.toString());  }  return result.substring(1);}  }
class C{  public static void writeAttribute(final XMLStreamWriter writer,final String attributeName,final String[] value) throws XMLStreamException {  if (value == null || value.length == 0) {    return;  }  for (int i=0; i < value.length; i++) {    writer.writeAttribute(attributeName,value[i]);  }}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  public void addSubjectName(X509Certificate x509certificate){  this.add(new XMLX509SubjectName(this.doc,x509certificate));}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.110 -0500",hash_original_method="67DFA658E3AD1AB9DCC34A02D12F48C7",hash_generated_method="7A24B9E3A7FB1E35014CB1AEFE3BD934") public MalformedChallengeException(){  super();}  }
class C{  public boolean execSQL(String sql,Object... bindArgs){  try {    openDB();    mSQLiteDatabase.execSQL(sql,bindArgs);    return true;  } catch (  SQLException ex) {    ex.printStackTrace();    throw ex;  }}  }
class C{  public SimpleTrainerControlPanel(final NetworkPanel networkPanel,final Trainer trainer){  this.trainer=trainer;  this.panel=networkPanel;  init();}  }
class C{  public boolean fireKeyboardAction(KeyEvent e,boolean pressed,Container topAncestor){  if (e.isConsumed()) {    System.out.println("Acquired pre-used event!");    Thread.dumpStack();  }  KeyStroke ks;  KeyStroke ksE=null;  if (e.getID() == KeyEvent.KEY_TYPED) {    ks=KeyStroke.getKeyStroke(e.getKeyChar());  } else {    if (e.getKeyCode() != e.getExtendedKeyCode()) {      ksE=KeyStroke.getKeyStroke(e.getExtendedKeyCode(),e.getModifiers(),!pressed);    }    ks=KeyStroke.getKeyStroke(e.getKeyCode(),e.getModifiers(),!pressed);  }  Hashtable keyMap=containerMap.get(topAncestor);  if (keyMap != null) {    Object tmp=null;    if (ksE != null) {      tmp=keyMap.get(ksE);      if (tmp != null) {        ks=ksE;      }    }    if (tmp == null) {      tmp=keyMap.get(ks);    }    if (tmp == null) {    } else     if (tmp instanceof JComponent) {      JComponent c=(JComponent)tmp;      if (c.isShowing() && c.isEnabled()) {        fireBinding(c,ks,e,pressed);      }    } else     if (tmp instanceof Vector) {      Vector v=(Vector)tmp;      for (int counter=v.size() - 1; counter >= 0; counter--) {        JComponent c=(JComponent)v.elementAt(counter);        if (c.isShowing() && c.isEnabled()) {          fireBinding(c,ks,e,pressed);          if (e.isConsumed())           return true;        }      }    } else {      System.out.println("Unexpected condition in fireKeyboardAction " + tmp);      Thread.dumpStack();    }  }  if (e.isConsumed()) {    return true;  }  if (keyMap != null) {    Vector v=(Vector)keyMap.get(JMenuBar.class);    if (v != null) {      Enumeration iter=v.elements();      while (iter.hasMoreElements()) {        JMenuBar mb=(JMenuBar)iter.nextElement();        if (mb.isShowing() && mb.isEnabled()) {          boolean extended=(ksE != null) && !ksE.equals(ks);          if (extended) {            fireBinding(mb,ksE,e,pressed);          }          if (!extended || !e.isConsumed()) {            fireBinding(mb,ks,e,pressed);          }          if (e.isConsumed()) {            return true;          }        }      }    }  }  return e.isConsumed();}  }
class C{  public Example2DataTableRowWrapper(Example example,List<Attribute> allAttributes,Attribute idAttribute){  this.example=example;  this.allAttributes=allAttributes;  this.idAttribute=idAttribute;}  }
class C{  protected void useForeGround(UserBuilderStatus userBuilderStatus){  WaitingActionCondition<BuilderStatus> condition=new BuilderStatusWaitingActionCondition(userBuilderStatus);  Request<BuilderStatus> request=userBuilderStatus.getProject().getCodenvy().builder().status(userBuilderStatus.getProject().getInnerReference(),userBuilderStatus.getInnerStatus().taskId());  WaitingAction<BuilderStatus> waitingAction=new WaitingAction<>("Build task waiting for a remote builder...","Build finished.",request,condition);  BuilderStatus executedStatus=waitingAction.execute();  if (executedStatus == null) {    System.out.println("Unable to find updated status");    return;  }  UserBuilderStatus newStatus=new DefaultUserBuilderStatus(executedStatus,userBuilderStatus.getProject());  if (CANCELLED != newStatus.getInnerStatus().status()) {    String logs=newStatus.getProject().getCodenvy().builder().logs(newStatus.getProject().getInnerReference(),newStatus.getInnerStatus().taskId()).execute();    System.out.println("Logs:");    System.out.println(logs);  }  if (SUCCESSFUL == newStatus.getInnerStatus().status()) {    String link="";    Link artifactLink=newStatus.getInnerStatus().getDownloadLink();    if (artifactLink != null) {      link=artifactLink.href();    }    System.out.println(format("Project %s has been successfully built.%nArtifact URL is '%s'",newStatus.getProject().name(),link));  } else   if (FAILED == newStatus.getInnerStatus().status()) {    System.out.println(format("Project %s has a build failure",newStatus.getProject().name()));  } else   if (CANCELLED == newStatus.getInnerStatus().status()) {    System.out.println(format("Project %s has been cancelled",newStatus.getProject().name()));  }  Ansi buffer=Ansi.ansi();  buffer.a("Builder ID is ").a(INTENSITY_BOLD).a(userBuilderStatus.shortId()).a(INTENSITY_BOLD_OFF);  System.out.println(buffer.toString());}  }
class C{  @Field(1) public Pointer ds(){  return this.io.getPointerField(this,1);}  }
class C{  public void testNamedSubqueryPlacement01(){  new Helper(){{      given=select(varNode(x),namedSubQuery("_set1",varNode("y1"),where(statementPatternNode(varNode("y1"),constantNode(a),constantNode(b),1))),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),stmtPatternWithVar("y1"),namedSubQueryInclude("_set1")));      expected=select(varNode(x),namedSubQuery("_set1",varNode("y1"),where(statementPatternNode(varNode("y1"),constantNode(a),constantNode(b),1))),where(stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),namedSubQueryInclude("_set1"),stmtPatternWithVar("y1")));    }  }.testWhileIgnoringExplainHints();}  }
class C{  public void accept(MemberValueVisitor visitor){  visitor.visitShortMemberValue(this);}  }
class C{  @Override protected void checkNumberOfColumn(String[] fields){  if (fields.length != 16 && fields.length != 15) {    throw new WrongNumberOfFieldsException("The number of fields is not correct. expected : " + getNumberOfColumns() + ", founds :  "+ fields.length+ ". details :"+ dumpFields(fields));  }}  }
class C{  public static void quit(Context cx,Scriptable thisObj,Object[] args,Function funObj){  Global global=getInstance(funObj);  if (global.quitAction != null) {    int exitCode=(args.length == 0 ? 0 : ScriptRuntime.toInt32(args[0]));    global.quitAction.quit(cx,exitCode);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.969 -0500",hash_original_method="AF30157C4F5CAE7AE82AAF53354D984E",hash_generated_method="E7186C784360CA6859C777C951E7586A") public void flush() throws IOException {synchronized (lock) {    __output.flush();  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  return encodeBytes(source,off,len,NO_OPTIONS);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(com.avos.demo.R.layout.main);  TextView empty=(TextView)findViewById(android.R.id.empty);  empty.setVisibility(View.VISIBLE);  searchInput=new EditText(this);  new RemoteDataTask().execute();}  }
class C{  public Vertex evaluateExpression(String code,Vertex speaker,Vertex target,boolean debug,Network network){  return evaluateEquation(code,speaker,target,debug,network);}  }
class C{  public void permissionAllowed(Permission permission){  rememberRecentReadFilePermissions(permission);  String name=permission.getClass().getName();  String type=getPermissionType(permission);  if (!allowedCount.containsKey(name)) {    allowedCount.put(name,new HashMap<String,Integer>());  }  if (allowedCount.get(name).containsKey(type)) {    allowedCount.get(name).put(type,allowedCount.get(name).get(type) + 1);  } else {    allowedCount.get(name).put(type,1);  }}  }
class C{  public boolean isEnableSides(){  return enableSides;}  }
class C{  boolean ClosedStart(Token t){  return t.kind == IDENTIFIER || (t.kind >= op_57 && t.kind <= op_119) || t.kind == NUMBER_LITERAL || t.kind == LBR || t.kind == LSB || t.kind == LAB || t.kind == LBC || t.kind == LWB || t.kind == STRING_LITERAL || t.kind == WF || t.kind == SF;}  }
class C{  public String classColumnTipText(){  return "Specify the number of the column that contains the class attribute";}  }
class C{  public String attributeIndicesTipText(){  return "Specify range of attributes to act on." + " This is a comma separated list of attribute indices, with" + " \"first\" and \"last\" valid values. Specify an inclusive"+ " range with \"-\". E.g: \"first-3,5,6-10,last\".";}  }
class C{  public IMethodBinding resolveMethodBinding(){  return this.ast.getBindingResolver().resolveMethod(this);}  }
class C{  public final int readUnsignedByte() throws IOException {  int ch=this.read();  if (ch < 0) {    throw new EOFException();  }  return ch;}  }
class C{  public static DataUri parse(String uri){  String scheme="data:";  if (uri.length() < scheme.length() || !uri.substring(0,scheme.length()).equalsIgnoreCase(scheme)) {    throw Messages.INSTANCE.getIllegalArgumentException(18,scheme);  }  String contentType=null;  String charset=null;  boolean base64=false;  String dataStr=null;  int tokenStart=scheme.length();  for (int i=scheme.length(); i < uri.length(); i++) {    char c=uri.charAt(i);    if (c == ';') {      String token=uri.substring(tokenStart,i);      if (contentType == null) {        contentType=token.toLowerCase();      } else {        if (token.toLowerCase().startsWith("charset=")) {          int equals=token.indexOf('=');          charset=token.substring(equals + 1);        } else         if ("base64".equalsIgnoreCase(token)) {          base64=true;        }      }      tokenStart=i + 1;      continue;    }    if (c == ',') {      String token=uri.substring(tokenStart,i);      if (contentType == null) {        contentType=token.toLowerCase();      } else {        if (token.toLowerCase().startsWith("charset=")) {          int equals=token.indexOf('=');          charset=token.substring(equals + 1);        } else         if ("base64".equalsIgnoreCase(token)) {          base64=true;        }      }      dataStr=uri.substring(i + 1);      break;    }  }  if (dataStr == null) {    throw Messages.INSTANCE.getIllegalArgumentException(20);  }  String text=null;  byte[] data=null;  if (base64) {    dataStr=dataStr.replaceAll("\\s","");    data=Base64.decodeBase64(dataStr);    if (charset != null) {      try {        text=new String(data,charset);      } catch (      UnsupportedEncodingException e) {        throw new IllegalArgumentException(Messages.INSTANCE.getExceptionMessage(43,charset),e);      }      data=null;    }  } else {    text=dataStr;  }  return new DataUri(contentType,data,text);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case NEW_NODE_ID:  return isSetNewNodeId();case NODE_STORE:return isSetNodeStore();}throw new IllegalStateException();}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_OrgType_ID"))     p_AD_OrgType_ID=para[i].getParameterAsInt(); else     if (name.equals("AD_Role_ID"))     p_AD_Role_ID=para[i].getParameterAsInt(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }  p_C_BPartner_ID=getRecord_ID();}  }
class C{  public void drawString(String aString,int x,int y){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing string: \"" + aString+ "\" at: "+ new Point(x,y));  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawString(aString,x,y);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawString(aString,x,y);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawString(aString,x,y);}  }
class C{  private static float distSq(PointF p,float x,float y){  final float dX=(x - p.x);  final float dY=(y - p.y);  return ((dX * dX) + (dY * dY));}  }
class C{  private boolean initiateGroupChat(boolean firstLoad){  try {    mGroupChat=mChatService.initiateGroupChat(new HashSet<>(mParticipants),mSubject);    mChatId=mGroupChat.getChatId();    setCursorLoader(firstLoad);    RI.sChatIdOnForeground=mChatId;    return true;  } catch (  RcsServiceException e) {    showExceptionThenExit(e);    return false;  }}  }
class C{  private static String unescape(String str){  return str.replace("\\n","\n").replace("\\t","\t");}  }
class C{  public StoragePolicyStatusEntity createStoragePolicyStatusEntity(String statusCode){  return createStoragePolicyStatusEntity(statusCode,AbstractDaoTest.DESCRIPTION);}  }
class C{  public TaskTagParser(){  result=new DefaultParseResult(this);  setTaskPattern(DEFAULT_TASK_PATTERN);}  }
class C{  public void start(){  if (mWidth == 0) {    startRequested=true;    return;  }  if (mStatus == Status.PLAYING)   return;  if (mStatus == Status.IDLE || mStatus == Status.STOPPED || mCurrentProgressPosition == 0.0f)   objectAnimatorProgress.start(); else {    if (Build.VERSION.SDK_INT < 19) {      objectAnimatorProgress.setCurrentPlayTime(mCurrentSeconds * 1000);      objectAnimatorProgress.start();    } else {      if (isProgressCancelled) {        objectAnimatorProgress.start();        isProgressCancelled=false;      } else       objectAnimatorProgress.resume();    }  }  mStatus=Status.PLAYING;}  }
class C{  public NaturalLanguageClassifier(String username,String password){  this();  setUsernameAndPassword(username,password);}  }
class C{  public static String[] toWSOrCommaSeparatedArray(String str) throws IOException {  String[] result=str.split("(\\s*,\\s*|\\s+)");  if (result.length == 1 && result[0].equals("")) {    return new String[0];  } else {    return result;  }}  }
class C{  private void fireFeatureDisabled(final String name){  logger.debug("Feature disabled: " + name);  for (  final FeatureChangeListener l : featureListeners) {    l.featureDisabled(name);  }}  }
class C{  public input addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public void startUpBase(FloodlightModuleContext context) throws FloodlightModuleException {  role=floodlightProvider.getRole().getOFRole();  floodlightProvider.addHAListener(this);  loadLogicalCategories();  registerDebugEvents();}  }
class C{  public synchronized V putIfAbsent(K key,V value){  if (!containsKey(key)) {    return put(key,value);  } else {    return get(key);  }}  }
class C{  @Override protected AxisSpace calculateAxisSpace(Graphics2D g2,Rectangle2D plotArea){  AxisSpace space=new AxisSpace();  PlotOrientation orientation=getOrientation();  AxisSpace fixed=getFixedRangeAxisSpace();  if (fixed != null) {    if (orientation == PlotOrientation.VERTICAL) {      space.setLeft(fixed.getLeft());      space.setRight(fixed.getRight());    } else     if (orientation == PlotOrientation.HORIZONTAL) {      space.setTop(fixed.getTop());      space.setBottom(fixed.getBottom());    }  } else {    ValueAxis valueAxis=getRangeAxis();    RectangleEdge valueEdge=Plot.resolveRangeAxisLocation(getRangeAxisLocation(),orientation);    if (valueAxis != null) {      space=valueAxis.reserveSpace(g2,this,plotArea,valueEdge,space);    }  }  Rectangle2D adjustedPlotArea=space.shrink(plotArea,null);  int n=this.subplots.size();  int totalWeight=0;  for (int i=0; i < n; i++) {    XYPlot sub=(XYPlot)this.subplots.get(i);    totalWeight+=sub.getWeight();  }  this.subplotAreas=new Rectangle2D[n];  double x=adjustedPlotArea.getX();  double y=adjustedPlotArea.getY();  double usableSize=0.0;  if (orientation == PlotOrientation.VERTICAL) {    usableSize=adjustedPlotArea.getWidth() - this.gap * (n - 1);  } else   if (orientation == PlotOrientation.HORIZONTAL) {    usableSize=adjustedPlotArea.getHeight() - this.gap * (n - 1);  }  for (int i=0; i < n; i++) {    XYPlot plot=(XYPlot)this.subplots.get(i);    if (orientation == PlotOrientation.VERTICAL) {      double w=usableSize * plot.getWeight() / totalWeight;      this.subplotAreas[i]=new Rectangle2D.Double(x,y,w,adjustedPlotArea.getHeight());      x=x + w + this.gap;    } else     if (orientation == PlotOrientation.HORIZONTAL) {      double h=usableSize * plot.getWeight() / totalWeight;      this.subplotAreas[i]=new Rectangle2D.Double(x,y,adjustedPlotArea.getWidth(),h);      y=y + h + this.gap;    }    AxisSpace subSpace=plot.calculateDomainAxisSpace(g2,this.subplotAreas[i],null);    space.ensureAtLeast(subSpace);  }  return space;}  }
class C{  public TransferEntropyCalculatorViaCondMutualInfo(String condMiCalculatorClassName) throws InstantiationException, IllegalAccessException, ClassNotFoundException {  @SuppressWarnings("unchecked") Class<ConditionalMutualInfoCalculatorMultiVariate> condMiClass=(Class<ConditionalMutualInfoCalculatorMultiVariate>)Class.forName(condMiCalculatorClassName);  ConditionalMutualInfoCalculatorMultiVariate condMiCalc=condMiClass.newInstance();  construct(condMiCalc);}  }
class C{  private boolean isModified(){  long uidListModified=uidFile.lastModified();  long curModified=curFolder.lastModified();  long newModified=newFolder.lastModified();  if (curModified >= uidListModified || newModified >= uidListModified) {    return true;  }  return false;}  }
class C{  @Override public Set<byte[]> keys(final byte[] pattern){  checkIsInMultiOrPipeline();  client.keys(pattern);  return SetFromList.of(client.getBinaryMultiBulkReply());}  }
class C{  public void squareThisPreCalc(){  int i;  if (isZero()) {    return;  }  if (value.length >= (blocks << 1)) {    for (i=blocks - 1; i >= 0; i--) {      value[(i << 1) + 1]=GF2Polynomial.squaringTable[(value[i] & 0x00ff0000) >>> 16] | (GF2Polynomial.squaringTable[(value[i] & 0xff000000) >>> 24] << 16);      value[i << 1]=GF2Polynomial.squaringTable[value[i] & 0x000000ff] | (GF2Polynomial.squaringTable[(value[i] & 0x0000ff00) >>> 8] << 16);    }    blocks<<=1;    len=(len << 1) - 1;  } else {    int[] result=new int[blocks << 1];    for (i=0; i < blocks; i++) {      result[i << 1]=GF2Polynomial.squaringTable[value[i] & 0x000000ff] | (GF2Polynomial.squaringTable[(value[i] & 0x0000ff00) >>> 8] << 16);      result[(i << 1) + 1]=GF2Polynomial.squaringTable[(value[i] & 0x00ff0000) >>> 16] | (GF2Polynomial.squaringTable[(value[i] & 0xff000000) >>> 24] << 16);    }    value=null;    value=result;    blocks<<=1;    len=(len << 1) - 1;  }}  }
class C{  private static boolean mayAttackPlayer(final Player attacker,final Player victim){  if (victimIsStrongEnough(attacker,victim)) {    return true;  }  RPEntity victimsTarget=victim.getAttackTarget();  if ((victimsTarget == null) || !(victimsTarget instanceof Player)) {    return false;  }  if (victimsTarget == attacker) {    return true;  }  Group group=SingletonRepository.getGroupManager().getGroup(victimsTarget.getName());  if (group == null) {    return false;  }  return group.hasMember(attacker.getName());}  }
class C{  public static void assertEquals(float expected,float actual){  assertEquals("",expected,actual);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:05.387 -0500",hash_original_method="DA29AB595B7A4A125EF99100FA337502",hash_generated_method="EB7FE71751A7FA292A28A3D6E4687565") public String encode(){  return headerName + COLON + SP+ encodeBody()+ NEWLINE;}  }
class C{  public ExtendedMessageFormat(final String pattern,final Locale locale){  this(pattern,locale,null);}  }
class C{  public static void main(String[] args){  try {    HTTP_TRANSPORT=GoogleNetHttpTransport.newTrustedTransport();    DATA_STORE_FACTORY=new FileDataStoreFactory(DATA_STORE_DIR);    Analytics analytics=initializeAnalytics();    McfData mcfPathData=executePathQuery(analytics,TABLE_ID);    printAllInfo(mcfPathData);    McfData mcfInteractionData=executeInteractionQuery(analytics,TABLE_ID);    printAllInfo(mcfInteractionData);  } catch (  GoogleJsonResponseException e) {    System.err.println("There was a service error: " + e.getDetails().getCode() + " : "+ e.getDetails().getMessage());  }catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  public void sendUserMessage(Severity severity,String message,Throwable exception){}  }
class C{  public StringBuilder(int length){}  }
class C{  protected ShippingOrder(){}  }
class C{  private boolean isValidParentId(int parentId,String entidad) throws Exception {  String tblName, qual=null;  boolean valid=false;  int count=0;  DirsTable table=new DirsTable();  DbConnection dbConn=new DbConnection();  try {    dbConn.open(DBSessionManager.getSession(entidad));    tblName=table.getDirTableName();    qual=table.getLoadDirQual(parentId);    if (parentId == 0)     valid=true; else {      count=DbSelectFns.selectCount(dbConn,tblName,qual);      if (count > 0)       valid=true;    }  } catch (  Exception e) {    _logger.error(e);    throw e;  } finally {    dbConn.close();  }  return valid;}  }
class C{  public MeshModel draw(MeshModel model){  Cuboid boundingBox=bounds.get();  double minX=boundingBox.min.getX() - 0.5;  double minY=boundingBox.min.getY() - 0.5;  double minZ=boundingBox.min.getZ() - 0.5;  double maxX=boundingBox.max.getX() - 0.5;  double maxY=boundingBox.max.getY() - 0.5;  double maxZ=boundingBox.max.getZ() - 0.5;  if (renderSide.test(Direction.DOWN)) {    Color downColor=colorMultiplier.apply(Direction.DOWN);    Face face=drawDown(model,minX,minY,minZ,maxX,maxY,maxZ,StaticCubeTextureCoordinates.instance);    face.texture=texture.apply(Direction.DOWN);    face.vertices.forEach(null);  }  if (renderSide.test(Direction.UP)) {    Color upColor=colorMultiplier.apply(Direction.UP);    Face face=drawUp(model,minX,minY,minZ,maxX,maxY,maxZ,StaticCubeTextureCoordinates.instance);    face.texture=texture.apply(Direction.UP);    face.vertices.forEach(null);  }  if (renderSide.test(Direction.NORTH)) {    Color northColor=colorMultiplier.apply(Direction.NORTH);    Face face=drawNorth(model,minX,minY,minZ,maxX,maxY,maxZ,StaticCubeTextureCoordinates.instance);    face.texture=texture.apply(Direction.NORTH);    face.vertices.forEach(null);  }  if (renderSide.test(Direction.SOUTH)) {    Color southColor=colorMultiplier.apply(Direction.SOUTH);    Face face=drawSouth(model,minX,minY,minZ,maxX,maxY,maxZ,StaticCubeTextureCoordinates.instance);    face.texture=texture.apply(Direction.SOUTH);    face.vertices.forEach(null);  }  if (renderSide.test(Direction.WEST)) {    Color westColor=colorMultiplier.apply(Direction.WEST);    Face face=drawWest(model,minX,minY,minZ,maxX,maxY,maxZ,StaticCubeTextureCoordinates.instance);    face.texture=texture.apply(Direction.WEST);    face.vertices.forEach(null);  }  if (renderSide.test(Direction.EAST)) {    Color eastColor=colorMultiplier.apply(Direction.EAST);    Face face=drawEast(model,minX,minY,minZ,maxX,maxY,maxZ,StaticCubeTextureCoordinates.instance);    face.texture=texture.apply(Direction.EAST);    face.vertices.forEach(null);  }  return model;}  }
class C{  public void testBug1934() throws Exception {  try {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1934");    this.stmt.executeUpdate("CREATE TABLE testBug1934 (field1 INT)");    System.out.println("Before prepareStatement()");    this.pstmt=this.conn.prepareStatement("INSERT INTO testBug1934 VALUES (?)",java.sql.Statement.RETURN_GENERATED_KEYS);    assertTrue(this.pstmt != null);    System.out.println("After prepareStatement() - " + this.pstmt);  }  finally {    this.stmt.executeUpdate("DROP TABLE IF EXISTS testBug1934");  }}  }
class C{  public void init(boolean forSigning,CipherParameters param){  RSAKeyParameters kParam;  int lengthOfSalt=saltLength;  if (param instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)param;    kParam=(RSAKeyParameters)p.getParameters();    if (forSigning) {      random=p.getRandom();    }  } else   if (param instanceof ParametersWithSalt) {    ParametersWithSalt p=(ParametersWithSalt)param;    kParam=(RSAKeyParameters)p.getParameters();    standardSalt=p.getSalt();    lengthOfSalt=standardSalt.length;    if (standardSalt.length != saltLength) {      throw new IllegalArgumentException("Fixed salt is of wrong length");    }  } else {    kParam=(RSAKeyParameters)param;    if (forSigning) {      random=new SecureRandom();    }  }  cipher.init(forSigning,kParam);  keyBits=kParam.getModulus().bitLength();  block=new byte[(keyBits + 7) / 8];  if (trailer == TRAILER_IMPLICIT) {    mBuf=new byte[block.length - digest.getDigestSize() - lengthOfSalt- 1- 1];  } else {    mBuf=new byte[block.length - digest.getDigestSize() - lengthOfSalt- 1- 2];  }  reset();}  }
class C{  XPathFactory createInstance(String className){  try {    if (debug)     debugPrintln("instantiating " + className);    Class clazz;    if (classLoader != null)     clazz=classLoader.loadClass(className); else     clazz=Class.forName(className);    if (debug)     debugPrintln("loaded it from " + which(clazz));    Object o=clazz.newInstance();    if (o instanceof XPathFactory)     return (XPathFactory)o;    if (debug)     debugPrintln(className + " is not assignable to " + SERVICE_CLASS.getName());  } catch (  VirtualMachineError vme) {    throw vme;  }catch (  ThreadDeath td) {    throw td;  }catch (  Throwable t) {    if (debug) {      debugPrintln("failed to instantiate " + className);      t.printStackTrace();    }  }  return null;}  }
class C{  public void initCorrelationMapping(List<DimensionIndex> hierarchy){  this.getStore().initCorrelationMapping(hierarchy);}  }
class C{  public static void matrixMultChain(MatrixBlock mX,MatrixBlock mV,MatrixBlock mW,MatrixBlock ret,ChainType ct) throws DMLRuntimeException {  if (mX.isEmptyBlock(false) || mV.isEmptyBlock(false) || (mW != null && mW.isEmptyBlock(false))) {    ret.examSparsity();    return;  }  ret.sparse=false;  ret.allocateDenseBlock();  if (mX.sparse)   matrixMultChainSparse(mX,mV,mW,ret,ct,0,mX.rlen); else   matrixMultChainDense(mX,mV,mW,ret,ct,0,mX.rlen);  ret.recomputeNonZeros();  ret.examSparsity();}  }
class C{  private void finish(){  this.writer.writeMainKml(this.mainKml);  this.writer.close();}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(super.toString()).append(" [");  sb.append("maxInStreams:").append(maxInStreams);  sb.append("maxOutStreams:").append(maxOutStreams).append("]");  return sb.toString();}  }
class C{  public void BeginWrite(){  while (this.numReaders > 0 || this.hasWriter) {    this.waitingWriters++;    try {      this.wait();    } catch (    InterruptedException e) {      Assert.fail(EC.SYSTEM_INTERRUPTED);    }    this.waitingWriters--;  }  this.hasWriter=true;}  }
class C{  public void addParameterList(NameValuePair param){  if (localParameterList == null) {    localParameterList=new NameValuePair[]{};  }  localParameterListTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localParameterList);  list.add(param);  this.localParameterList=(NameValuePair[])list.toArray(new NameValuePair[list.size()]);}  }
class C{  public void endFunctionExecutionWithException(boolean haveResult){  this._stats.incInt(_functionExecutionsRunningId,-1);  this._stats.incInt(_functionExecutionExceptions,1);  if (haveResult) {    this._stats.incInt(_functionExecutionsHasResultRunningId,-1);  }}  }
class C{  private void processAnsiCommand_d(){}  }
class C{  public static void writeToFile(String path,String content){  Writer writer=null;  try {    writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(path),"utf-8"));    writer.write(content);  } catch (  IOException ex) {    ex.printStackTrace();  } finally {    try {      writer.close();    } catch (    Exception ex) {    }  }}  }
class C{  public Cookie(final String name,final String value,final String path,final String domain,final int version) throws IllegalArgumentException {  if (name == null) {    throw new IllegalArgumentException("name==null");  }  this.name=name;  this.value=value;  this.version=version;  this.domain=domain;  this.path=path;}  }
class C{  protected void normalizeHermitian(){  float[] coords=this.getCoordinates();  float norm=0;  for (int x=0; x < coords.length; x++)   norm+=Math.pow(coords[x],2);  norm=(float)Math.sqrt(norm);  for (int x=0; x < coords.length; x++)   coords[x]=coords[x] / norm;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.IMPORT_SCOPE__IMPORTS:    getImports().clear();  return;}super.eUnset(featureID);}  }
class C{  public static final byte[] zip(byte[] in){  try {    ByteArrayOutputStream byteOut=new ByteArrayOutputStream(in.length / EXPECTED_COMPRESSION_RATIO);    GZIPOutputStream outStream=new GZIPOutputStream(byteOut);    try {      outStream.write(in);    } catch (    Exception e) {      LOG.error("Error writing outStream: ",e);    }    try {      outStream.close();    } catch (    IOException e) {      LOG.error("Error closing outStream: ",e);    }    return byteOut.toByteArray();  } catch (  IOException e) {    LOG.error("Error: ",e);    return null;  }}  }
class C{  public boolean isTimestamp(){  return (payload == null) ? false : payload.isTimestamp();}  }
class C{  public ZapToggleButton(Icon icon,boolean selected){  super(null,icon,selected);}  }
class C{  @Override public final void lineTo(final float x,final float y){  shape_primitives.addElement(L);  shape_primitive_x.addElement(x);  shape_primitive_y.addElement(y);  shape_primitive_x2.addElement(zero);  shape_primitive_y2.addElement(zero);  shape_primitive_x3.addElement(zero);  shape_primitive_y3.addElement(zero);}  }
class C{  public String handleGetMessage(String key){  return this.handleGetMessage(Locale.getDefault(),key);}  }
class C{  FormalParamNode[] flattenParams(FormalParamNode[][] array){  int size=0;  for (int i=0; i < array.length; i++) {    size=size + array[i].length;  }  ;  FormalParamNode[] res=new FormalParamNode[size];  int k=0;  for (int i=0; i < array.length; i++) {    for (int j=0; j < array[i].length; j++) {      res[k]=array[i][j];      k++;    }    ;  }  ;  return res;}  }
class C{  public BlockingObservableAssert<T> completes(){  isNotNull();  assertThat(getBlockingObservableExecutor().hasCompletedSuccessfully()).overridingErrorMessage("Observable has not completed successfully").isTrue();  return this;}  }
class C{  public Lattice(List<Node<Value>> nodes,JoshuaConfiguration config){  this.nodes=nodes;  this.latticeHasAmbiguity=true;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  protected List<String> computeDeferredRecipientNotFoundMessageIDs(){  return new ArrayList<String>(DEFAULT_INITIAL_SIZE_OF_DEFERRED_RECIPIENT_ARRAY);}  }
class C{  public Span trimTrail(CharSequence src){  if (start < end) {    while (src.charAt(end - 1) == 32) {      end--;      if (start == end)       break;    }  }  return this;}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  private void initializeViews(){  mUrlEditText=(EditText)findViewById(R.id.url);  mAddFab=(FloatingActionButton)findViewById(R.id.add_fab);  mDownloadFab=(FloatingActionButton)findViewById(R.id.download_fab);  mUrlEditText.setVisibility(View.INVISIBLE);  mDownloadFab.setVisibility(View.INVISIBLE);  mUrlEditText.setOnEditorActionListener(null);}  }
class C{  public boolean registerRpcClient(RpcClient rpcClient){  RpcClient existingClient=clientNameMap.get(rpcClient.getChannelName());  if (existingClient == null) {    clientNameMap.put(rpcClient.getChannelName(),rpcClient);    return true;  }  if (log.isDebugEnabled()) {    log.debug("RpcClient " + rpcClient.getChannelName() + " is already registered with "+ existingClient.getServerInfo());  }  return false;}  }
class C{  public ReferenceMap(){  super(ReferenceStrength.HARD,ReferenceStrength.SOFT,DEFAULT_CAPACITY,DEFAULT_LOAD_FACTOR,false);}  }
class C{  boolean tooDirty(CompressingStoredFieldsReader candidate){  return candidate.getNumDirtyChunks() > 1024 || candidate.getNumDirtyChunks() * 100 > candidate.getNumChunks();}  }
class C{  public void runMain(String[] args){  Options o=this.getCliOptions();  try {    new GnuParser().parse(o,args);  } catch (  ParseException pe) {    System.err.println("Error parsing command line");    new HelpFormatter().printHelp(this.getClassName(),o);    System.exit(1);  }  try {    float ratio=0.8f;    if (this.oratio.getValue() != null) {      ratio=Float.parseFloat(this.oratio.getValue());    }    this.runSubsampler(this.otest.getValues(),12,20,ratio);  } catch (  Exception e) {    e.printStackTrace();    System.exit(1);  }}  }
class C{  public boolean isFfw(){  return this.isFfw;}  }
class C{  public void changeNickname(String nickname) throws XMPPException {  if (nickname == null || nickname.equals("")) {    throw new IllegalArgumentException("Nickname must not be null or blank.");  }  if (!joined) {    throw new IllegalStateException("Must be logged into the room to change nickname.");  }  Presence joinPresence=new Presence(Presence.Type.available);  joinPresence.setTo(room + "/" + nickname);  for (  PacketInterceptor packetInterceptor : presenceInterceptors) {    packetInterceptor.interceptPacket(joinPresence);  }  PacketFilter responseFilter=new AndFilter(new FromMatchesFilter(room + "/" + nickname),new PacketTypeFilter(Presence.class));  PacketCollector response=connection.createPacketCollector(responseFilter);  connection.sendPacket(joinPresence);  Presence presence=(Presence)response.nextResult(SmackConfiguration.getPacketReplyTimeout());  response.cancel();  if (presence == null) {    throw new XMPPException("No response from server.");  } else   if (presence.getError() != null) {    throw new XMPPException(presence.getError());  }  this.nickname=nickname;}  }
class C{  protected void dispose(IInterval interval){}  }
class C{  public void hasBody(boolean hasBody){}  }
class C{  public JBBPClassInstantiator make(){  return this.make(JBBPClassInstantiatorType.AUTO);}  }
class C{  protected char charAt(String value,int index){  if (index < 0 || index >= value.length()) {    return Character.MIN_VALUE;  }  return value.charAt(index);}  }
class C{  public boolean isLot(){  Object oo=get_Value(COLUMNNAME_IsLot);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Map<String,Map<String,Map<String,Object>>> prepareField(Map<String,?> inputFields,Map<String,Object> queryStringMap,Map<String,List<Object[]>> origValueMap){  Map<String,Map<String,Map<String,Object>>> normalizedFields=new LinkedHashMap<String,Map<String,Map<String,Object>>>();  for (  String fieldNameRaw : inputFields.keySet()) {    String fieldNameRoot=null;    String fieldPair=null;    Object fieldValue=null;    int iPos=-1;    int iPos2=-1;    Map<String,Map<String,Object>> subMap=null;    Map<String,Object> subMap2=null;    String fieldMode=null;    fieldValue=inputFields.get(fieldNameRaw);    if (ObjectType.isEmpty(fieldValue)) {      continue;    }    queryStringMap.put(fieldNameRaw,fieldValue);    iPos=fieldNameRaw.indexOf("_");    if (iPos >= 0) {      String suffix=fieldNameRaw.substring(iPos + 1);      iPos2=suffix.indexOf("_");      if (iPos2 == 1) {        continue;      }    }    if (iPos < 0) {      fieldNameRoot=fieldNameRaw;      fieldPair="fld0";      fieldMode="value";    } else {      fieldNameRoot=fieldNameRaw.substring(0,iPos);      String suffix=fieldNameRaw.substring(iPos + 1);      iPos2=suffix.indexOf("_");      if (iPos2 < 0) {        if (suffix.startsWith("fld")) {          fieldPair=suffix;          fieldMode="value";        } else {          fieldPair="fld0";          fieldMode=suffix;        }      } else {        String tkn0=suffix.substring(0,iPos2);        String tkn1=suffix.substring(iPos2 + 1);        if (tkn0.startsWith("fld")) {          fieldPair=tkn0;          fieldMode=tkn1;        } else {          fieldPair=tkn1;          fieldMode=tkn0;        }      }    }    subMap=normalizedFields.get(fieldNameRoot);    if (subMap == null) {      subMap=new LinkedHashMap<String,Map<String,Object>>();      normalizedFields.put(fieldNameRoot,subMap);    }    subMap2=subMap.get(fieldPair);    if (subMap2 == null) {      subMap2=new LinkedHashMap<String,Object>();      subMap.put(fieldPair,subMap2);    }    subMap2.put(fieldMode,fieldValue);    List<Object[]> origList=origValueMap.get(fieldNameRoot);    if (origList == null) {      origList=new LinkedList<Object[]>();      origValueMap.put(fieldNameRoot,origList);    }    Object[] origValues={fieldNameRaw,fieldValue};    origList.add(origValues);  }  return normalizedFields;}  }
class C{  public void actionPerformed(ActionEvent e){  log.config(e.getActionCommand());  Object source=e.getSource();  if (source instanceof JCheckBox || source instanceof JRadioButton) {    cmd_selection(source);    if (source instanceof JRadioButton) {      Iterator it=m_buttonGroups.values().iterator();      while (it.hasNext()) {        ButtonGroup group=(ButtonGroup)it.next();        Enumeration en=group.getElements();        while (en.hasMoreElements()) {          if (source == en.nextElement()) {            Enumeration info=group.getElements();            while (info.hasMoreElements()) {              Object infoObj=info.nextElement();              if (source != infoObj)               cmd_selection(infoObj);            }          }        }      }    }  } else   if (source == productField || source == productQty) {    m_qty=(BigDecimal)productQty.getValue();    KeyNamePair pp=(KeyNamePair)productField.getSelectedItem();    m_product=MProduct.get(Env.getCtx(),pp.getKey());    createMainPanel();    sizeIt();  } else   if (source == orderField) {    KeyNamePair pp=(KeyNamePair)orderField.getSelectedItem();    boolean valid=(pp != null && pp.getKey() > 0);    if (invoiceField != null)     invoiceField.setReadWrite(!valid);    if (projectField != null)     projectField.setReadWrite(!valid);  } else   if (source == invoiceField) {    KeyNamePair pp=(KeyNamePair)invoiceField.getSelectedItem();    boolean valid=(pp != null && pp.getKey() > 0);    if (orderField != null)     orderField.setReadWrite(!valid);    if (projectField != null)     projectField.setReadWrite(!valid);  } else   if (source == projectField) {    KeyNamePair pp=(KeyNamePair)projectField.getSelectedItem();    boolean valid=(pp != null && pp.getKey() > 0);    if (orderField != null)     orderField.setReadWrite(!valid);    if (invoiceField != null)     invoiceField.setReadWrite(!valid);  } else   if (e.getActionCommand().equals(ConfirmPanel.A_OK)) {    if (cmd_save())     dispose();  } else   if (e.getActionCommand().equals(ConfirmPanel.A_CANCEL))   dispose();  boolean OK=m_product != null;  if (OK) {    KeyNamePair pp=null;    if (orderField != null)     pp=(KeyNamePair)orderField.getSelectedItem();    if ((pp == null || pp.getKey() <= 0) && invoiceField != null)     pp=(KeyNamePair)invoiceField.getSelectedItem();    if ((pp == null || pp.getKey() <= 0) && projectField != null)     pp=(KeyNamePair)projectField.getSelectedItem();    OK=(pp != null && pp.getKey() > 0);  }  confirmPanel.getOKButton().setEnabled(OK);}  }
class C{  public void addListener(ILabelProviderListener listener){}  }
class C{  @Override public int hashCode(){  return table.hashCode();}  }
class C{  Address(OsmElement e,LinkedHashMap<String,ArrayList<String>> tags){  init(e,tags);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private void checkMatrixDimensions(Matrix B){  if (B.m != m || B.n != n) {    throw new IllegalArgumentException("Matrix dimensions must agree.");  }}  }
class C{  public void test_read$CII() throws IOException {  lnr=new LineNumberReader(new StringReader(text));  char[] c=new char[100];  lnr.read(c,0,4);  assertTrue("Test 1: Read returned incorrect characters.","0\n1\n".equals(new String(c,0,4)));  assertEquals("Test 2: Read failed to inc lineNumber",2,lnr.getLineNumber());  lnr.close();  try {    lnr.read(c,0,4);    fail("Test 3: IOException expected.");  } catch (  IOException e) {  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  ProcessingInstruction piImport;  ProcessingInstruction piToImport;  String piData;  String piTarget;  doc=(Document)load("staffNS",true);  docImp=(Document)load("staffNS",true);  piToImport=doc.createProcessingInstruction("Target","Data");  piImport=(ProcessingInstruction)doc.importNode(piToImport,false);  piTarget=piImport.getTarget();  piData=piImport.getData();  assertEquals("documentimportnode18_Target","Target",piTarget);  assertEquals("documentimportnode18_Data","Data",piData);}  }
class C{  public void removeDebuggerTemplate(final DebuggerTemplate debuggerTemplate) throws CouldntDeleteException {  Preconditions.checkNotNull(debuggerTemplate,"Error: Debugger template argument can not be null");  try {    m_project.getConfiguration().removeDebugger(debuggerTemplate.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  public NotificationChain basicSetTimeValue(Expression newTimeValue,NotificationChain msgs){  Expression oldTimeValue=timeValue;  timeValue=newTimeValue;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.SCHEDULE_TIME_EVENT__TIME_VALUE,oldTimeValue,newTimeValue);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public double[][] selectionMatrixOfStrongEigenvectors(){  return e_czech;}  }
class C{  public Object read(InputNode node,Object source) throws Exception {  Class type=source.getClass();  Schema schema=context.getSchema(type);  Caller caller=schema.getCaller();  read(node,source,schema);  criteria.commit(source);  caller.validate(source);  caller.commit(source);  return readResolve(node,source,caller);}  }
class C{  public void cancel(){  if (executor != null) {    executor.cancel();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:13.489 -0500",hash_original_method="45C58224451B51A3264A16CA25344B04",hash_generated_method="DC06289D43B6BBB5FBD073291773A3E0") public int sendCommand(int command,String args) throws IOException {  return sendCommand(POP3Command._commands[command],args);}  }
class C{  public HeaderRenderer(){  setHorizontalAlignment(JLabel.LEADING);  setName("TableHeader.renderer");}  }
class C{  public String toString(){  return memberDef.toString();}  }
class C{  public GridCacheMvccCandidate addRemote(GridCacheEntryEx parent,UUID nodeId,@Nullable UUID otherNodeId,long threadId,GridCacheVersion ver,long timeout,boolean tx,boolean implicitSingle,boolean nearLoc){  GridCacheMvccCandidate cand=new GridCacheMvccCandidate(parent,nodeId,otherNodeId,null,threadId,ver,timeout,false,false,tx,implicitSingle,nearLoc,false,null);  addRemote(cand);  return cand;}  }
class C{  @Override public void generate(XmlWriter w,ExtensionProfile extProfile) throws IOException {  ArrayList<XmlWriter.Attribute> attrs=new ArrayList<XmlWriter.Attribute>(1);  if (coreVersion.isCompatible(Service.Versions.V1)) {    attrs.add(new Attribute("title",title.getPlainText()));  }  attrs.add(new XmlWriter.Attribute("href",href));  w.startElement(atomPubNs,"collection",attrs,null);  if (coreVersion.isCompatible(Service.Versions.V1)) {    if (accepts != null) {      StringBuffer acceptBuf=new StringBuffer();      for (      String accept : accepts) {        if (acceptBuf.length() != 0) {          acceptBuf.append(',');        }        acceptBuf.append(accept);      }      w.simpleElement(atomPubNs,"accept",null,acceptBuf.toString());    }  } else {    if (title != null) {      title.generateAtom(w,"title");    }    for (    String accept : accepts) {      if (accepts != null) {        w.simpleElement(atomPubNs,"accept",null,accept);      }    }    for (    Categories categories : getCategoriesList()) {      categories.generate(w,extProfile);    }  }  generateExtensions(w,extProfile);  w.endElement(atomPubNs,"collection");}  }
class C{  @Override public int hashCode(){  if (location != null)   return location.hashCode(); else   return 0;}  }
class C{  public void sendPlayload(byte[] content) throws SessionNotEstablishedException {  if (!mMediaSessionStarted) {    throw new SessionNotEstablishedException("Unable to send payload!");  }  mDataSender.addFrame(content,System.currentTimeMillis());}  }
class C{  @Override public void bookmarksOrHistoryPicker(ComboViews startView){  if (mTabControl.getCurrentWebView() == null) {    return;  }  if (isInCustomActionMode()) {    endActionMode();  }  Bundle extras=new Bundle();  extras.putBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW,!mTabControl.canCreateNewTab());  mUi.showComboView(startView,extras);}  }
class C{  public MappedMultiFields(MergeState mergeState,MultiFields multiFields){  super(multiFields);  this.mergeState=mergeState;}  }
class C{  public void preInit(){  registerMinecraftToNOVA();  registerNOVAToMinecraft();}  }
class C{  public static void main(String[] args){  JavadocTester tester=new PackagesHeader();  run(tester,JAVADOC_ARGS1,TESTARRAY1,NEGATED_TEST);  run(tester,JAVADOC_ARGS2,TESTARRAY2,NEGATED_TEST);  run(tester,JAVADOC_ARGS3,TESTARRAY3,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void forEach(String key,Consumer<? super T> reactor){  if (!pipes.get(key).isPresent())   pipes.register(key,factory.build());  pipes.reactiveSeq(key).get().futureOperations(ex).forEach(reactor);}  }
class C{  public ObjectFactory(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void resetState(){  mFromTalkgroup=null;  broadcast(ChangedAttribute.FROM_TALKGROUP);  mFromAlias=null;  broadcast(ChangedAttribute.FROM_TALKGROUP_ALIAS);  mToTalkgroup=null;  broadcast(ChangedAttribute.TO_TALKGROUP);  mToAlias=null;  broadcast(ChangedAttribute.TO_TALKGROUP_ALIAS);  mCallDetectTalkgroups.clear();  if (mCurrentCallEvent != null) {    mCurrentCallEvent.end();  }  mCurrentCallEvent=null;}  }
class C{  public CommitContext addInstanceToCommit(Entity entity,@Nullable View view){  commitInstances.add(entity);  if (view != null)   views.put(entity,view);  return this;}  }
class C{  public LogicalNotExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  int lastTrailingCommentIndex(ASTNode node){  if (this.trailingPtr >= 0) {    for (int i=0; i <= this.trailingPtr; i++) {      if (this.trailingNodes[i] == node) {        return (int)this.trailingIndexes[i];      }    }  }  return -1;}  }
class C{  public Millisecond(Date time){  this(time,TimeZone.getDefault(),Locale.getDefault());}  }
class C{  public void addOrientationListener(ActionListener l){  if (orientationListener == null) {    orientationListener=new EventDispatcher();  }  orientationListener.addListener(l);}  }
class C{  public void print(int ch) throws IOException {  write(ch);  throw new RuntimeException();}  }
class C{  public static double[][] convertLowerTriangleToSymmetric(double[][] arr){  int size=arr.length;  double[][] m=new double[size][size];  for (int i=0; i < size; i++) {    for (int j=0; j <= i; j++) {      m[i][j]=arr[i][j];      m[j][i]=arr[i][j];    }  }  return m;}  }
class C{  private float[] convertPacked(byte[] data1){  byte[] data=new byte[data1.length];  for (int x=0; x < data1.length; x+=4) {    data[x]=data1[x + 3];    data[x + 1]=data1[x + 2];    data[x + 2]=data1[x + 1];    data[x + 3]=data1[x];  }  int count=(int)((float)data.length / 1.5f);  if (count % 2 == 1) {    count--;  }  int bytes=(int)((float)count * 1.5f);  float[] samples=new float[count];  int pointer=0;  int first;  int second;  for (int x=0; x < bytes; x+=3) {    first=((data[x] << 4) & 0xFF0) | ((data[x + 1] >> 4) & 0xF);    samples[pointer++]=scale(first);    second=((data[x + 1] << 8) & 0xF00) | (data[x + 2] & 0xFF);    samples[pointer++]=scale(second);  }  return samples;}  }
class C{  public static String toString(double[] arr){  NumberFormat nf=new DecimalFormat(" 0.0000;-0.0000");  return toString(arr,nf);}  }
class C{  public static ApplicationBuilder fromJson(InputStream json) throws JSONException, AssemblyException {  String jsonString=new Scanner(json,"UTF-8").useDelimiter("\\A").next();  return fromJson(jsonString);}  }
class C{  protected void paint(SeaGlassContext context,Graphics g){  AbstractButton b=(AbstractButton)context.getComponent();  g.setColor(context.getStyle().getColor(context,ColorType.TEXT_FOREGROUND));  g.setFont(style.getFont(context));  context.getStyle().getGraphicsUtils(context).paintText(context,g,b.getText(),getIcon(b),b.getHorizontalAlignment(),b.getVerticalAlignment(),b.getHorizontalTextPosition(),b.getVerticalTextPosition(),b.getIconTextGap(),b.getDisplayedMnemonicIndex(),getTextShiftOffset(context));}  }
class C{  private void drawCar(){  getChildren().clear();  rectangle=new Rectangle(x,y - 20,50,10);  polygon=new Polygon(x + 10,y - 20,x + 20,y - 30,x + 30,y - 30,x + 40,y - 20);  circle1=new Circle(x + 15,y - 5,radius);  circle2=new Circle(x + 35,y - 5,radius);  getChildren().addAll(rectangle,circle1,circle2,polygon);}  }
class C{  private LogisticRegressionResult(String target,String[] variableNames,double[] xMeans,double[] xStdDevs,int numRegressors,int ny0,int ny1,double[] coefs,double[] stdErrs,double[] probs,double intercept,String result,double logLikelihood){  if (variableNames.length != numRegressors) {    throw new IllegalArgumentException();  }  if (coefs.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (stdErrs.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (probs.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (xMeans.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (xStdDevs.length != numRegressors + 1) {    throw new IllegalArgumentException();  }  if (target == null) {    throw new NullPointerException();  }  this.intercept=intercept;  this.target=target;  this.xMeans=xMeans;  this.xStdDevs=xStdDevs;  this.variableNames=variableNames;  this.numRegressors=numRegressors;  this.ny0=ny0;  this.ny1=ny1;  this.coefs=coefs;  this.stdErrs=stdErrs;  this.probs=probs;  this.result=result;  this.logLikelihood=logLikelihood;}  }
class C{  private boolean isUpperCaseCamelCaseHunk(String hunk){  if (hunk.length() < 2)   return false;  for (int i=0; i < hunk.length(); i++) {    if (!isLegalChar(hunk.charAt(i)))     return false;  }  return true;}  }
class C{  public Polygonizer(boolean extractOnlyPolygonal){  this.extractOnlyPolygonal=extractOnlyPolygonal;}  }
class C{  protected org.jdom2.Element store(org.jdom2.Element e){  e.setAttribute(Xml.ID,getId());  e.setAttribute(Xml.ROAD_NAME,getRoadName());  e.setAttribute(Xml.ROAD_NUMBER,getNumber());  e.setAttribute(Xml.TYPE,getTypeName());  e.setAttribute(Xml.LENGTH,getLength());  if (!getColor().equals(NONE)) {    e.setAttribute(Xml.COLOR,getColor());  }  if (!getWeight().equals(DEFAULT_WEIGHT)) {    e.setAttribute(Xml.WEIGHT,getWeight());  }  if (!getWeightTons().equals(NONE)) {    e.setAttribute(Xml.WEIGHT_TONS,getWeightTons());  }  if (!getBuilt().equals(NONE)) {    e.setAttribute(Xml.BUILT,getBuilt());  }  if (!getLocationId().equals(NONE)) {    e.setAttribute(Xml.LOCATION_ID,getLocationId());  }  if (!getRouteLocationId().equals(NONE)) {    e.setAttribute(Xml.ROUTE_LOCATION_ID,getRouteLocationId());  }  if (!getTrackId().equals(NONE)) {    e.setAttribute(Xml.SEC_LOCATION_ID,getTrackId());  }  if (!getDestinationId().equals(NONE)) {    e.setAttribute(Xml.DESTINATION_ID,getDestinationId());  }  if (!getRouteDestinationId().equals(NONE)) {    e.setAttribute(Xml.ROUTE_DESTINATION_ID,getRouteDestinationId());  }  if (!getDestinationTrackId().equals(NONE)) {    e.setAttribute(Xml.SEC_DESTINATION_ID,getDestinationTrackId());  }  if (!getLastRouteId().equals(NONE)) {    e.setAttribute(Xml.LAST_ROUTE_ID,getLastRouteId());  }  if (verboseStore) {    e.setAttribute(Xml.LOCATION,getLocationName());    e.setAttribute(Xml.TRACK,getTrackName());    e.setAttribute(Xml.DESTINATION,getDestinationName());    e.setAttribute(Xml.DES_TRACK,getDestinationTrackName());  }  e.setAttribute(Xml.MOVES,Integer.toString(getMoves()));  e.setAttribute(Xml.DATE,getLastDate());  e.setAttribute(Xml.SELECTED,isSelected() ? Xml.TRUE : Xml.FALSE);  if (!getLastLocationId().equals(LOCATION_UNKNOWN)) {    e.setAttribute(Xml.LAST_LOCATION_ID,getLastLocationId());  }  if (!getTrainName().equals(NONE)) {    e.setAttribute(Xml.TRAIN,getTrainName());    e.setAttribute(Xml.TRAIN_ID,getTrain().getId());  }  if (!getOwner().equals(NONE)) {    e.setAttribute(Xml.OWNER,getOwner());  }  if (!getValue().equals(NONE)) {    e.setAttribute(Xml.VALUE,getValue());  }  if (!getRfid().equals(NONE)) {    e.setAttribute(Xml.RFID,getRfid());  }  if (isLocationUnknown()) {    e.setAttribute(Xml.LOC_UNKNOWN,isLocationUnknown() ? Xml.TRUE : Xml.FALSE);  }  if (isOutOfService()) {    e.setAttribute(Xml.OUT_OF_SERVICE,isOutOfService() ? Xml.TRUE : Xml.FALSE);  }  if (getBlocking() != 0) {    e.setAttribute(Xml.BLOCKING,Integer.toString(getBlocking()));  }  if (!getComment().equals(NONE)) {    e.setAttribute(Xml.COMMENT,getComment());  }  return e;}  }
class C{  KafkaMessageHeaders(boolean generateId,boolean generateTimestamp){  super(null,generateId ? null : ID_VALUE_NONE,generateTimestamp ? null : -1L);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append('(').append('-').append(this.term.toString()).append(')');  return sb.toString();}  }
class C{  protected void appendConstant(final Object cst){  appendConstant(buf,cst);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().getVideoFrame().playbackControl(VideoFrame.DVD_CONTROL_MENU,2,0);  return null;}  }
class C{  private void addToTree(int node_ID,int parent_ID,int seqNo,boolean onBar){  MTreeNode child=getNodeDetail(node_ID,parent_ID,seqNo,onBar);  if (child == null)   return;  MTreeNode parent=null;  if (m_root != null)   parent=m_root.findNode(parent_ID);  if (parent != null && parent.getAllowsChildren()) {    parent.add(child);    if (m_buffer.size() > 0)     checkBuffer(child);  } else   m_buffer.add(child);}  }
class C{  public Shape createSliderThumbContinuous(final int x,final int y,final int diameter){  return createEllipseInternal(x,y,diameter,diameter);}  }
class C{  public boolean isEmpty(){  return objects.isEmpty();}  }
class C{  public static String tickToString(StringBuilder clslbls,long timestamp,long location,long elevation,Object value){  try {    StringBuilder sb=new StringBuilder();    sb.append(timestamp);    sb.append("/");    if (GeoTimeSerie.NO_LOCATION != location) {      double[] latlon=GeoXPLib.fromGeoXPPoint(location);      sb.append(latlon[0]);      sb.append(":");      sb.append(latlon[1]);    }    sb.append("/");    if (GeoTimeSerie.NO_ELEVATION != elevation) {      sb.append(elevation);    }    sb.append(" ");    if (null != clslbls && clslbls.length() > 0) {      sb.append(clslbls);      sb.append(" ");    }    encodeValue(sb,value);    return sb.toString();  } catch (  Exception e) {    e.printStackTrace();  }  return null;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WMenu.init");}  }
class C{  public void assertIsType(Operand op,TypeReference type){  if (VM.VerifyAssertions) {    if (op.isDefinitelyNull()) {      opt_assert(type.isReferenceType());    } else     if (op.isIntLike()) {      opt_assert(type.isIntLikeType());    } else {      TypeReference type1=op.getType();      if (ClassLoaderProxy.includesType(type,type1) == NO) {        String msg=op + ": " + type+ " is not assignable with "+ type1;        opt_assert(VM.NOT_REACHED,msg);      }    }  }}  }
class C{  public int asNode(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int current=xctxt.getCurrentNode();  DTM dtm=xctxt.getDTM(current);  return dtm.getFirstChild(current);}  }
class C{  @Override public String globalInfo(){  return "A wrapper for MULAN classifiers.\n" + "http://mulan.sourceforge.net";}  }
class C{  public CreateIndexRequest mapping(String type,String source){  if (mappings.containsKey(type)) {    throw new IllegalStateException("mappings for type \"" + type + "\" were already defined");  }  mappings.put(type,source);  return this;}  }
class C{  public static boolean isPropertyVisibleToWrite(JClassType voClass,JField field,boolean allowProtected){  if ((field.isPublic() || (allowProtected && field.isProtected())) && !field.isFinal()) {    return true;  } else {    return hasSetMethod(field,voClass);  }}  }
class C{  private synchronized void updateResults(){  if (mDatabaseUpdated) {    return;  }  final SQLiteDatabase database=mMusicDatabase.getWritableDatabase();  database.beginTransaction();  int oldestWeekWeCareAbout=mNumberOfWeeksSinceEpoch - NUM_WEEKS + 1;  database.delete(SongPlayCountColumns.NAME,SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX + " < " + oldestWeekWeCareAbout,null);  Cursor cursor=database.query(SongPlayCountColumns.NAME,new String[]{SongPlayCountColumns.ID},null,null,null,null,null);  if (cursor != null && cursor.moveToFirst()) {    do {      updateExistingRow(database,cursor.getLong(0),false);    } while (cursor.moveToNext());    cursor.close();    cursor=null;  }  mDatabaseUpdated=true;  database.setTransactionSuccessful();  database.endTransaction();}  }
class C{  public void notifySessionFinished(){  testTreeViewer.setInput(this.dataRoot);  testTreeViewer.setSelection(testTreeViewer.getSelection());}  }
class C{  public RefactoringDescriptor requestDescriptor(final RefactoringDescriptorProxy proxy,IProgressMonitor monitor){  Assert.isNotNull(proxy);  if (monitor == null)   monitor=new NullProgressMonitor();  try {    final RefactoringHistoryManager manager=getManager(proxy.getProject());    if (manager != null)     return manager.requestDescriptor(proxy,monitor);  }  finally {    monitor.done();  }  return null;}  }
class C{  private void paintBorder(SynthContext ctx,Graphics g,int x,int y,int w,int h,int orientation){  Component c=ctx.getComponent();  boolean ltr=c.getComponentOrientation().isLeftToRight();  if (orientation == SwingConstants.VERTICAL && ltr) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBorder(ctx,g,y,x,h,w,transform);  } else   if (orientation == SwingConstants.VERTICAL) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintBorder(ctx,g,y,0,h,w,transform);  } else   if (orientation == SwingConstants.HORIZONTAL && ltr) {    paintBorder(ctx,g,x,y,w,h,null);  } else {    paintBorder(ctx,g,x,y,w,h,null);  }}  }
class C{  public GBC anchor(int a){  anchor=a;  return this;}  }
class C{  public void exportMaskDelete(URI vplex,URI exportGroupURI,List<URI> initiatorURIs,String opId) throws ControllerException {  _log.info("Entering exportMaskDelete, opId: " + opId);  WorkflowStepCompleter.stepExecuting(opId);  Set<ExportMask> exportMasks=new HashSet<ExportMask>();  try {    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplex,_dbClient);    Map<URI,List<Initiator>> hostInitiatorMap=VPlexUtil.makeHostInitiatorsMap(initiatorURIs,_dbClient);    exportMasks=getExportMasksByHost(exportGroupURI,hostInitiatorMap,vplex);    _log.info("Attempting to delete ExportMask " + exportMasks + " on VPLEX "+ vplexSystem.getLabel());    if (exportMasks.isEmpty()) {      _log.info("there are no export masks to delete, so we're done.");      WorkflowStepCompleter.stepSucceded(opId);      return;    } else {      for (      ExportMask exportMask : exportMasks) {        _dbClient.markForDeletion(exportMask);        _log.info("updating ExportGroups containing this ExportMask");        List<ExportGroup> exportGroups=ExportMaskUtils.getExportGroups(_dbClient,exportMask);        for (        ExportGroup exGroup : exportGroups) {          _log.info("Removing mask from ExportGroup " + exGroup.getGeneratedName());          exGroup.removeExportMask(exportMask.getId());          _dbClient.updateObject(exGroup);        }      }      return;    }  } catch (  Exception ex) {    _log.error("Exception deleting ExportMask: " + ex.getMessage());    StringBuffer exportMaskNames=new StringBuffer();    if (!exportMasks.isEmpty()) {      for (      ExportMask exportMask : exportMasks) {        if (exportMaskNames.length() == 0) {          exportMaskNames.append(exportMask.getMaskName());        } else {          exportMaskNames.append(" ,").append(exportMask.getMaskName());        }      }    }    ServiceError serviceError=VPlexApiException.errors.exportMaskDeleteFailed(exportMaskNames.toString(),ex);    WorkflowStepCompleter.stepFailed(opId,serviceError);  }}  }
class C{  private Tradingday findTradingdayByDate(ZonedDateTime open,ZonedDateTime close){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<Tradingday> query=builder.createQuery(Tradingday.class);    Root<Tradingday> from=query.from(Tradingday.class);    query.select(from);    if (null != open)     query.where(builder.equal(from.get("open"),open));    if (null != close)     query.where(builder.equal(from.get("close"),close));    List<Tradingday> items=entityManager.createQuery(query).getResultList();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    throw re;  }}  }
class C{  public void delete(String name) throws CertificateException, IOException {  if (name.equalsIgnoreCase(NOT_BEFORE)) {    notBefore=null;  } else   if (name.equalsIgnoreCase(NOT_AFTER)) {    notAfter=null;  } else {    throw new CertificateException("Attribute name not recognized by" + " CertAttrSet:PrivateKeyUsage.");  }  encodeThis();}  }
class C{  static ColorSetting createColorSetting(Properties defaultProps,Properties props,String key,Color defaultColor){  return new ColorSetting(defaultProps,props,key,formatColor(defaultColor));}  }
class C{  public void normalise(){  this.dirty=true;  float mag=(float)Math.sqrt(points[3] * points[3] + points[0] * points[0] + points[1] * points[1] + points[2] * points[2]);  points[3]=points[3] / mag;  points[0]=points[0] / mag;  points[1]=points[1] / mag;  points[2]=points[2] / mag;}  }
class C{  public boolean isFinal(){  return is(FINAL);}  }
class C{  private Reference createReference(List<Transform> transforms,String id,String digestMethod){  assert transforms != null;  assert id != null;  assert digestMethod != null;  XMLSignatureFactory factory=XMLSignatureFactory.getInstance();  javax.xml.crypto.dsig.DigestMethod digestAlgorithm;  try {    digestAlgorithm=factory.newDigestMethod(digestMethod,null);  } catch (  Exception e) {    throw new IllegalStateException("Cannot create digest method object.",e);  }  log.debug("Created reference with id: {} and digestMethod: {}",id,digestMethod);  return factory.newReference("#" + id,digestAlgorithm,transforms,null,null);}  }
class C{  public void createLogicalRouterLinkPortTier1(LogicalRouterLinkPortOnTier1CreateSpec spec,FutureCallback<LogicalRouterLinkPortOnTier1> responseCallback) throws IOException {  postAsync(LOGICAL_ROUTER_PORTS_BASE_PATH,serializeObjectAsJson(spec),HttpStatus.SC_CREATED,new TypeReference<LogicalRouterLinkPortOnTier1>(){  },responseCallback);}  }
class C{  public static int indexOfChars(String string,String chars,int startindex){  int stringLen=string.length();  int charsLen=chars.length();  if (startindex < 0) {    startindex=0;  }  for (int i=startindex; i < stringLen; i++) {    char c=string.charAt(i);    for (int j=0; j < charsLen; j++) {      if (c == chars.charAt(j)) {        return i;      }    }  }  return -1;}  }
class C{  private void navigateToMonitor(String monitorLink){  String monitor=monitorLink.substring(monitorLink.lastIndexOf('/') + 1);  DefaultMutableTreeNode dumpNode=null;  if (monitorLink.indexOf("Dump No.") > 0) {    dumpNode=getDumpRootNode(monitorLink.substring(monitorLink.indexOf('/') + 1,monitorLink.lastIndexOf('/')),(DefaultMutableTreeNode)tree.getLastSelectedPathComponent());  } else {    dumpNode=getDumpRootNode((DefaultMutableTreeNode)tree.getLastSelectedPathComponent());  }  Enumeration childs=dumpNode.children();  DefaultMutableTreeNode monitorNode=null;  DefaultMutableTreeNode monitorWithoutLocksNode=null;  while (childs.hasMoreElements()) {    DefaultMutableTreeNode child=(DefaultMutableTreeNode)childs.nextElement();    if (child.getUserObject() instanceof TreeCategory) {      if (((TreeCategory)child.getUserObject()).getName().startsWith("Monitors (")) {        monitorNode=child;      } else       if (((TreeCategory)child.getUserObject()).getName().startsWith("Monitors without")) {        monitorWithoutLocksNode=child;      }    }  }  JTree searchTree=(JTree)((TreeCategory)monitorNode.getUserObject()).getCatComponent(this);  TreePath searchPath=searchTree.getNextMatch(monitor,0,Position.Bias.Forward);  if ((searchPath == null) && (monitorWithoutLocksNode != null)) {    searchTree=(JTree)((TreeCategory)monitorWithoutLocksNode.getUserObject()).getCatComponent(this);    searchPath=searchTree.getNextMatch(monitor,0,Position.Bias.Forward);    monitorNode=monitorWithoutLocksNode;  }  if (searchPath != null) {    TreePath monitorPath=new TreePath(monitorNode.getPath());    tree.setSelectionPath(monitorPath);    tree.scrollPathToVisible(monitorPath);    displayCategory(monitorNode.getUserObject());    TreePath threadInMonitor=searchPath.pathByAddingChild(((DefaultMutableTreeNode)searchPath.getLastPathComponent()).getLastChild());    searchTree.setSelectionPath(threadInMonitor);    searchTree.scrollPathToVisible(searchPath);    searchTree.setSelectionPath(searchPath);  }}  }
