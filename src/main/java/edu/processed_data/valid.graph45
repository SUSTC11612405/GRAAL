class C{  public ObjectReader(SocketChannel channel){  this(channel.socket());}  }
class C{  public void handleBtnClassificationRequest(RequestInvocationEvent event){  setDisplayFieldValue(SINGLECHOICE_CLASSIFICATION,getDisplayFieldValue(TF_CLASSIFICATION));  forwardTo();}  }
class C{  public SIPHeader parse() throws ParseException {  dbg_enter("parse");  try {    headerName(TokenTypes.AUTHORIZATION);    Authorization auth=new Authorization();    super.parse(auth);    return auth;  }  finally {    dbg_leave("parse");  }}  }
class C{  @Override public void onItemClick(AdapterView<?> parent,View view,int position,long id){  TextView textView=(TextView)view.findViewById(R.id.lv_station_freq);  float frequency=0;  try {    frequency=Float.parseFloat(textView.getText().toString());  } catch (  NumberFormatException e) {    e.printStackTrace();  }  Intent intentResult=new Intent();  intentResult.putExtra(ACTIVITY_RESULT,FmRadioUtils.computeStation(frequency));  setResult(RESULT_OK,intentResult);  finish();}  }
class C{  public SortControl(String sortBy,boolean criticality) throws IOException {  super(OID,criticality,null);  super.value=setEncodedValue(new SortKey[]{new SortKey(sortBy)});}  }
class C{  public Run(List<?> classPath,String mainClass) throws MalformedURLException {  this.setMainClass(mainClass);  this.setClassPath(classPath);}  }
class C{  public AttributeSet addAttribute(AttributeSet old,Object key,Object value){  if (css == null) {    css=new CSS();  }  if (key instanceof StyleConstants) {    HTML.Tag tag=HTML.getTagForStyleConstantsKey((StyleConstants)key);    if (tag != null && old.isDefined(tag)) {      old=removeAttribute(old,tag);    }    Object cssValue=css.styleConstantsValueToCSSValue((StyleConstants)key,value);    if (cssValue != null) {      Object cssKey=css.styleConstantsKeyToCSSKey((StyleConstants)key);      if (cssKey != null) {        return super.addAttribute(old,cssKey,cssValue);      }    }  }  return super.addAttribute(old,key,value);}  }
class C{  public int evaluate(){  return Condition.INDETERMINATE;}  }
class C{  protected void skipWhitespace(final CharArrayBuffer buffer,final ParserCursor cursor){  int pos=cursor.getPos();  int indexTo=cursor.getUpperBound();  while ((pos < indexTo) && HTTP.isWhitespace(buffer.charAt(pos))) {    pos++;  }  cursor.updatePos(pos);}  }
class C{  protected boolean includeAuthorityInRequestLine(){  return connection == null ? policy.usingProxy() : connection.getRoute().getProxy().type() == Proxy.Type.HTTP;}  }
class C{  public RAck(){  super(NAME);}  }
class C{  private void selectRadioButton(ActionEvent event,boolean next){  Object eventSrc=event.getSource();  if (!isValidRadioButtonObj(eventSrc))   return;  ButtonGroupInfo btnGroupInfo=new ButtonGroupInfo((JRadioButton)eventSrc);  btnGroupInfo.selectNewButton(next);}  }
class C{  private void connectServer1ToChangelog(int changelogID) throws Exception {{    String synchroServerLdif="dn: cn=" + testName + ", cn=domains,"+ SYNCHRO_PLUGIN_DN+ "\n"+ "objectClass: top\n"+ "objectClass: ds-cfg-replication-domain\n"+ "cn: "+ testName+ "\n"+ "ds-cfg-base-dn: "+ baseDnStr+ "\n"+ "ds-cfg-replication-server: localhost:"+ getChangelogPort(changelogID)+ "\n"+ "ds-cfg-server-id: "+ server1ID+ "\n"+ "ds-cfg-receive-status: true\n"+ "ds-cfg-window-size: "+ WINDOW_SIZE;    addSynchroServerEntry(synchroServerLdif);    replDomain=LDAPReplicationDomain.retrievesReplicationDomain(baseDN);    if (replDomain != null) {      debugInfo("ReplicationDomain: Import/Export is running ? " + replDomain.ieRunning());    }  }}  }
class C{  public void remove(){  checkState();  iterator.remove();}  }
class C{  public PKCS10CertificationRequest(String signatureAlgorithm,X509Name subject,PublicKey key,ASN1Set attributes,PrivateKey signingKey) throws NoSuchAlgorithmException, NoSuchProviderException, InvalidKeyException, SignatureException {  this(signatureAlgorithm,subject,key,attributes,signingKey,BouncyCastleProvider.PROVIDER_NAME);}  }
class C{  protected void processProps(Properties props) throws InvalidPropertiesFormatException {  String statGroupsNames=props.getProperty(CLIENTS);  if (statGroupsNames == null) {    throw new InvalidPropertiesFormatException("Unable to find " + CLIENTS + " property.");  }  StringTokenizer st=new StringTokenizer(statGroupsNames,COMMA);  while (st.hasMoreTokens()) {    populateClient(st.nextToken(),props);  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  acks++;  if (acks == 5) {    try {      System.out.println("shootme: got an ACK! ");      System.out.println("Dialog State = " + dialog.getState());      SipProvider provider=(SipProvider)requestEvent.getSource();      Request messageRequest=dialog.createRequest(Request.MESSAGE);      CSeqHeader cseq=(CSeqHeader)messageRequest.getHeader(CSeqHeader.NAME);      ClientTransaction ct=provider.getNewClientTransaction(messageRequest);      cseq.setSeqNumber(1);      ct.sendRequest();    } catch (    Exception ex) {      ex.printStackTrace();    }  }}  }
class C{  public static String[] generateSmap(JspCompilationContext ctxt,Node.Nodes pageNodes) throws IOException {  PreScanVisitor psVisitor=new PreScanVisitor();  try {    pageNodes.visit(psVisitor);  } catch (  JasperException ex) {  }  HashMap<String,SmapStratum> map=psVisitor.getMap();  SmapGenerator g=new SmapGenerator();  SmapStratum s=new SmapStratum("JSP");  g.setOutputFileName(unqualify(ctxt.getServletJavaFileName()));  evaluateNodes(pageNodes,s,map,ctxt.getOptions().getMappedFile());  s.optimizeLineSection();  g.addStratum(s,true);  if (ctxt.getOptions().isSmapDumped()) {    File outSmap=new File(ctxt.getClassFileName() + ".smap");    PrintWriter so=new PrintWriter(new OutputStreamWriter(new FileOutputStream(outSmap),SMAP_ENCODING));    so.print(g.getString());    so.close();  }  String classFileName=ctxt.getClassFileName();  int innerClassCount=map.size();  String[] smapInfo=new String[2 + innerClassCount * 2];  smapInfo[0]=classFileName;  smapInfo[1]=g.getString();  int count=2;  Iterator<Map.Entry<String,SmapStratum>> iter=map.entrySet().iterator();  while (iter.hasNext()) {    Map.Entry<String,SmapStratum> entry=iter.next();    String innerClass=entry.getKey();    s=entry.getValue();    s.optimizeLineSection();    g=new SmapGenerator();    g.setOutputFileName(unqualify(ctxt.getServletJavaFileName()));    g.addStratum(s,true);    String innerClassFileName=classFileName.substring(0,classFileName.indexOf(".class")) + '$' + innerClass+ ".class";    if (ctxt.getOptions().isSmapDumped()) {      File outSmap=new File(innerClassFileName + ".smap");      PrintWriter so=new PrintWriter(new OutputStreamWriter(new FileOutputStream(outSmap),SMAP_ENCODING));      so.print(g.getString());      so.close();    }    smapInfo[count]=innerClassFileName;    smapInfo[count + 1]=g.getString();    count+=2;  }  return smapInfo;}  }
class C{  public static boolean arrayequals(byte[] a,byte[] b,int count){  for (int i=0; i < count; i++) {    if (a[i] != b[i]) {      return false;    }  }  return true;}  }
class C{  public synchronized void evictAll() throws IOException {  initialize();  for (  Entry entry : lruEntries.values().toArray(new Entry[lruEntries.size()])) {    removeEntry(entry);  }}  }
class C{  public void skippedEntity(String name) throws SAXException {  m_handler.skippedEntity(name);}  }
class C{  public int hashCode(){  return lastPathComponent.hashCode();}  }
class C{  public SubjectConfirmation createSubjectConfirmation(){  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION);  if (obj == null) {    return new SubjectConfirmationImpl();  } else {    return (SubjectConfirmation)obj;  }}  }
class C{  public SearchResponse doSearch(ObjectFactory objFactory,SearchRequest searchRequest,List<org.opends.server.types.Control> controls) throws IOException, LDAPException {  SearchResponse searchResponse=objFactory.createSearchResponse();  searchResponse.setRequestID(searchRequest.getRequestID());  LDAPFilter filter=createFilter(searchRequest.getFilter());  DereferenceAliasesPolicy derefPolicy=DereferenceAliasesPolicy.NEVER;  String derefStr=searchRequest.getDerefAliases().toLowerCase();  if (derefStr.equals("derefinsearching")) {    derefPolicy=DereferenceAliasesPolicy.IN_SEARCHING;  } else   if (derefStr.equals("dereffindingbaseobj")) {    derefPolicy=DereferenceAliasesPolicy.FINDING_BASE;  } else   if (derefStr.equals("derefalways")) {    derefPolicy=DereferenceAliasesPolicy.ALWAYS;  }  SearchScope scope=SearchScope.WHOLE_SUBTREE;  String scopeStr=searchRequest.getScope().toLowerCase();  if (scopeStr.equals("singlelevel") || scopeStr.equals("one")) {    scope=SearchScope.SINGLE_LEVEL;  } else   if (scopeStr.equals("baseobject") || scopeStr.equals("base")) {    scope=SearchScope.BASE_OBJECT;  }  LinkedHashSet<String> attributes=new LinkedHashSet<>();  AttributeDescriptions attrDescriptions=searchRequest.getAttributes();  if (attrDescriptions != null) {    List<AttributeDescription> attrDesc=attrDescriptions.getAttribute();    for (    AttributeDescription desc : attrDesc) {      attributes.add(desc.getName());    }  }  SearchRequestProtocolOp protocolOp=new SearchRequestProtocolOp(ByteString.valueOfUtf8(searchRequest.getDn()),scope,derefPolicy,(int)searchRequest.getSizeLimit(),(int)searchRequest.getTimeLimit(),searchRequest.isTypesOnly(),filter,attributes);  try {    LDAPMessage msg=new LDAPMessage(DSMLServlet.nextMessageID(),protocolOp,controls);    connection.getLDAPWriter().writeMessage(msg);    byte opType;    do {      int resultCode=0;      LocalizableMessage errorMessage=null;      LDAPMessage responseMessage=connection.getLDAPReader().readMessage();      if (responseMessage == null) {        LocalizableMessage message=ERR_UNEXPECTED_CONNECTION_CLOSURE.get();        LDAPResult result=objFactory.createLDAPResult();        ResultCode code=ResultCodeFactory.create(objFactory,LDAPResultCode.UNAVAILABLE);        result.setResultCode(code);        result.setErrorMessage(message.toString());        searchResponse.setSearchResultDone(result);        return searchResponse;      }      opType=responseMessage.getProtocolOpType();switch (opType) {case LDAPConstants.OP_TYPE_SEARCH_RESULT_ENTRY:        SearchResultEntryProtocolOp searchEntryOp=responseMessage.getSearchResultEntryProtocolOp();      SearchResultEntry entry=objFactory.createSearchResultEntry();    java.util.List<DsmlAttr> attrList=entry.getAttr();  LinkedList<LDAPAttribute> attrs=searchEntryOp.getAttributes();for (LDAPAttribute attr : attrs) {  String nm=attr.getAttributeType();  DsmlAttr dsmlAttr=objFactory.createDsmlAttr();  dsmlAttr.setName(nm);  List<Object> dsmlAttrVal=dsmlAttr.getValue();  List<ByteString> vals=attr.getValues();  for (  ByteString val : vals) {    dsmlAttrVal.add(ByteStringUtility.convertByteString(val));  }  attrList.add(dsmlAttr);}entry.setDn(searchEntryOp.getDN().toString());searchResponse.getSearchResultEntry().add(entry);break;case LDAPConstants.OP_TYPE_SEARCH_RESULT_REFERENCE:responseMessage.getSearchResultReferenceProtocolOp();break;case LDAPConstants.OP_TYPE_SEARCH_RESULT_DONE:SearchResultDoneProtocolOp searchOp=responseMessage.getSearchResultDoneProtocolOp();resultCode=searchOp.getResultCode();errorMessage=searchOp.getErrorMessage();LDAPResult result=objFactory.createLDAPResult();ResultCode code=ResultCodeFactory.create(objFactory,resultCode);result.setResultCode(code);result.setErrorMessage(errorMessage != null ? errorMessage.toString() : null);if (searchOp.getMatchedDN() != null) {result.setMatchedDN(searchOp.getMatchedDN().toString());}searchResponse.setSearchResultDone(result);break;default :throw new RuntimeException("Invalid protocol operation:" + opType);}} while (opType != LDAPConstants.OP_TYPE_SEARCH_RESULT_DONE);} catch (DecodeException ae) {ae.printStackTrace();throw new IOException(ae.getMessage());}return searchResponse;}  }
class C{  @Override public void onOptionsMenuClosed(final Menu menu){  delegate.onOptionsMenuClosed(menu);}  }
class C{  public static byte[] tauAdicNaf(byte mu,ZTauElement lambda){  if (!((mu == 1) || (mu == -1))) {    throw new IllegalArgumentException("mu must be 1 or -1");  }  BigInteger norm=norm(mu,lambda);  int log2Norm=norm.bitLength();  int maxLength=log2Norm > 30 ? log2Norm + 4 : 34;  byte[] u=new byte[maxLength];  int i=0;  int length=0;  BigInteger r0=lambda.u;  BigInteger r1=lambda.v;  while (!((r0.equals(ECConstants.ZERO)) && (r1.equals(ECConstants.ZERO)))) {    if (r0.testBit(0)) {      u[i]=(byte)ECConstants.TWO.subtract((r0.subtract(r1.shiftLeft(1))).mod(ECConstants.FOUR)).intValue();      if (u[i] == 1) {        r0=r0.clearBit(0);      } else {        r0=r0.add(ECConstants.ONE);      }      length=i;    } else {      u[i]=0;    }    BigInteger t=r0;    BigInteger s=r0.shiftRight(1);    if (mu == 1) {      r0=r1.add(s);    } else {      r0=r1.subtract(s);    }    r1=t.shiftRight(1).negate();    i++;  }  length++;  byte[] tnaf=new byte[length];  System.arraycopy(u,0,tnaf,0,length);  return tnaf;}  }
class C{  protected void manageForwardRouteException(ForwardRouteException ex,R context,IRoutingResult<R> originalRoutingResult) throws Exception {  Integer nbrTimeForwarded=context.variables().get(SpincastConstants.RequestScopedVariables.ROUTE_FORWARDED_NBR,Integer.class);  if (nbrTimeForwarded == null) {    nbrTimeForwarded=1;  } else {    nbrTimeForwarded++;  }  if (nbrTimeForwarded > getSpincastConfig().getRouteForwardingMaxNumber()) {    throw new RuntimeException("The maximum number of request forwarding has been reached : " + getSpincastConfig().getRouteForwardingMaxNumber() + "."+ "This route won't be called : "+ ex.getNewRoute());  }  context.variables().add(SpincastConstants.RequestScopedVariables.ROUTE_FORWARDED_NBR,nbrTimeForwarded);  if (ex.isResetResponse()) {    if (!context.response().isHeadersSent()) {      context.response().resetEverything();    } else {      this.logger.warn("The response headers have already been sent, we can't reset the response...");    }  }  context=createForwardedRequestContext(context,ex.getNewRoute());  IRoutingResult<R> routingResult=getRouter().route(context);  if (routingResult == null) {    this.logger.warn("A route forwarding was asked but the requested route doesn't have any match : " + ex.getNewRoute());    throw new NotFoundException(false);  }  context.variables().add(SpincastConstants.RequestScopedVariables.FORWARD_ROUTE_EXCEPTION_MESSAGE,ex.getMessage());  callRouteHandlers(context,routingResult);}  }
class C{  public NodeSetDTM mutableNodeset() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_MUTABLENODELIST,new Object[]{getTypeString()});  return (NodeSetDTM)m_obj;}  }
class C{  public void followAndPause(int nChanges){  debugInfo("Requested broker writer " + serverId + " to write "+ nChanges+ " change(s).");  pause();  nChangesSent=0;  nChangesSentLimit=nChanges;  careAboutAmountOfChanges=true;  sessionDone.set(false);  suspended.set(false);  while (!sessionDone.get()) {    TestCaseUtils.sleep(1000);  }  careAboutAmountOfChanges=false;}  }
class C{  @Override public void init() throws ServletException {  if ((wrapper == null) || (context == null))   throw new UnavailableException(sm.getString("managerServlet.noWrapper"));  String value=null;  try {    value=getServletConfig().getInitParameter("debug");    debug=Integer.parseInt(value);  } catch (  Throwable t) {    ExceptionUtils.handleThrowable(t);  }  Server server=((Engine)host.getParent()).getService().getServer();  if (server != null) {    global=server.getGlobalNamingContext();  }  versioned=(File)getServletContext().getAttribute(ServletContext.TEMPDIR);  configBase=new File(context.getCatalinaBase(),"conf");  Container container=context;  Container host=null;  Container engine=null;  while (container != null) {    if (container instanceof Host)     host=container;    if (container instanceof Engine)     engine=container;    container=container.getParent();  }  if (engine != null) {    configBase=new File(configBase,engine.getName());  }  if (host != null) {    configBase=new File(configBase,host.getName());  }  if (debug >= 1) {    log("init: Associated with Deployer '" + oname + "'");    if (global != null) {      log("init: Global resources are available");    }  }}  }
class C{  public boolean hasValue(){  return mValue != null;}  }
class C{  public boolean hasMember(Guid guid) throws UMSException {  return isMemberAtLevel(guid.getDn(),LEVEL_DIRECT);}  }
class C{  @Override public void run(){  if (queue == null)   throw new IllegalStateException("Must assign a queue before starting.");  try {    taskExecutor.start();  } catch (  DataLayerException e) {    throw new IllegalStateException("Cannot start task executor",e);  }  while (!Thread.currentThread().isInterrupted()) {    try {      Task task=queue.take();      debug("process Task {0}",task);      taskExecutor.execute(null,task);    } catch (    InterruptedException e) {      error("interrupt detected",e);      Thread.currentThread().interrupt();    }  }  debug("Processor thread shutdown.");}  }
class C{  public static void error(String msg,Throwable t){  debugInst.debug(IDebug.ERROR,msg,t);}  }
class C{  public Jdk14Logger(String name){  this.name=name;  logger=getLogger();}  }
class C{  protected AdminSecurityException(LocalizableMessage message){  super(message);}  }
class C{  public Builder withAttributes(Map<String,Set<String>> configAttributes){  this.configAttributes=configAttributes;  return this;}  }
class C{  public <M extends Configuration>void deregisterDeleteListener(OptionalRelationDefinition<?,M> d,ConfigurationDeleteListener<M> listener){  validateRelationDefinition(d);  DN baseDN=DNBuilder.create(path,d).parent();  deregisterDeleteListener(baseDN,listener);}  }
class C{  public boolean findDefaultApp(){  if (mResId == 0) {    return false;  }  parsedIntent=null;  parsedValues=null;  new MyLayoutParser().parseValues();  return (parsedValues != null) && (parsedIntent != null);}  }
class C{  public String toString(){  return ("ApplicationPrincipal:  " + name);}  }
class C{  private Intent createMarketSearchIntent(String query){  Uri marketSearchUri=Uri.parse("market://search").buildUpon().appendQueryParameter("q",query).build();  Intent marketSearchIntent=new Intent(Intent.ACTION_VIEW);  marketSearchIntent.setData(marketSearchUri);  return marketSearchIntent;}  }
class C{  public Compiler add(String dirOrJar) throws IOException {  return add(new File(dirOrJar));}  }
class C{  @Override public void startHandshake() throws IOException {  if (appDataIS == null) {    throw new IOException("Socket is not connected.");  }  if (socket_was_closed) {    throw new IOException("Socket has already been closed.");  }  if (!handshake_started) {    handshake_started=true;    if (sslParameters.getUseClientMode()) {      if (logger != null) {        logger.println("SSLSocketImpl: CLIENT");      }      handshakeProtocol=new ClientHandshakeImpl(this);    } else {      if (logger != null) {        logger.println("SSLSocketImpl: SERVER");      }      handshakeProtocol=new ServerHandshakeImpl(this);    }    alertProtocol=new AlertProtocol();    recordProtocol=new SSLRecordProtocol(handshakeProtocol,alertProtocol,new SSLStreamedInput(input),appDataIS.dataPoint);  }  if (logger != null) {    logger.println("SSLSocketImpl.startHandshake");  }  handshakeProtocol.start();  doHandshake();  if (logger != null) {    logger.println("SSLSocketImpl.startHandshake: END");  }}  }
class C{  public void handleSelector(String selector){  if (!(selector.startsWith(".") || selector.startsWith("#"))) {    selector=selector.toLowerCase();  }  int length=selector.length();  if (selector.endsWith(",")) {    if (length > 1) {      selector=selector.substring(0,length - 1);      selectorTokens.addElement(selector);    }    addSelector();  } else   if (length > 0) {    selectorTokens.addElement(selector);  }}  }
class C{  private JsonValue deleteUser(String id) throws Exception {  System.out.println("1. Delete a user: ");  HttpResponse<String> response=Unirest.delete(azureEndpoint + "/account/" + id).header("x-openidm-username","openidm-admin").header("x-openidm-password","openidm-admin").asString();  return json(readJson(response.getBody()));}  }
class C{  @Override public void write(String str,int st,int end) throws IOException {  out.write(str,st,end);}  }
class C{  private int awaitDone(boolean timed,long nanos) throws InterruptedException {  final long deadline=timed ? System.nanoTime() + nanos : 0L;  WaitNode q=null;  boolean queued=false;  for (; ; ) {    if (Thread.interrupted()) {      removeWaiter(q);      throw new InterruptedException();    }    int s=state;    if (s > COMPLETING) {      if (q != null)       q.thread=null;      return s;    } else     if (s == COMPLETING)     Thread.yield(); else     if (q == null)     q=new WaitNode(); else     if (!queued)     queued=UNSAFE.compareAndSwapObject(this,waitersOffset,q.next=waiters,q); else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos <= 0L) {        removeWaiter(q);        return state;      }      LockSupport.parkNanos(this,nanos);    } else     LockSupport.park(this);  }}  }
class C{  public void initialize(Map initParams){}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.EncryptedDataElement createEncryptedDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.EncryptedDataElementImpl();}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  Element child1;  Element child2;  Element child3;  Node appendedChild;  NodeList elementList;  String nullNS=null;  doc=(Document)load("staffNS",false);  element=doc.createElementNS("http://www.w3.org/DOM","root");  child1=doc.createElementNS("http://www.w3.org/DOM/Level1","dom:child");  child2=doc.createElementNS(nullNS,"child");  child3=doc.createElementNS("http://www.w3.org/DOM/Level2","dom:child");  appendedChild=element.appendChild(child1);  appendedChild=element.appendChild(child2);  appendedChild=element.appendChild(child3);  elementList=element.getElementsByTagNameNS(nullNS,"child");  assertSize("elementgetelementsbytagnamens04_1",1,elementList);  elementList=element.getElementsByTagNameNS("*","child");  assertSize("elementgetelementsbytagnamens04_2",3,elementList);}  }
class C{  public boolean isLoggable(Level level){  if (level.intValue() < levelValue || levelValue == offValue) {    return false;  }  return true;}  }
class C{  public static void failWasExpected(Class<? extends Throwable> exceptionClass){  fail("should throw an exception " + exceptionClass.getSimpleName());}  }
class C{  private boolean aciCheckMods(AciContainer container,LocalBackendModifyOperation operation,boolean skipAccessCheck) throws DirectoryException {  Entry resourceEntry=container.getResourceEntry();  DN dn=resourceEntry.getName();  List<Modification> modifications=operation.getModifications();  for (  Modification m : modifications) {    Attribute modAttr=m.getAttribute();    AttributeType modAttrType=modAttr.getAttributeDescription().getAttributeType();    if (modAttrType.equals(aciType) && !operation.getClientConnection().hasPrivilege(Privilege.MODIFY_ACL,operation)) {      logger.debug(INFO_ACI_MODIFY_FAILED_PRIVILEGE,container.getResourceDN(),container.getClientDN());      return false;    }    ModificationType modType=m.getModificationType();    if (((modType == ModificationType.DELETE && modAttr.isEmpty()) || modType == ModificationType.REPLACE || modType == ModificationType.INCREMENT) && resourceEntry.hasAttribute(modAttrType)) {      container.setCurrentAttributeType(modAttrType);      for (      Attribute a : resourceEntry.getAllAttributes(modAttr.getAttributeDescription())) {        for (        ByteString v : a) {          container.setCurrentAttributeValue(v);          container.setRights(ACI_WRITE_DELETE);          if (!skipAccessCheck && !accessAllowed(container)) {            return false;          }        }      }    }    if (!modAttr.isEmpty()) {      for (      ByteString v : modAttr) {        container.setCurrentAttributeType(modAttrType);switch (m.getModificationType().asEnum()) {case ADD:case REPLACE:          container.setCurrentAttributeValue(v);        container.setRights(ACI_WRITE_ADD);      if (!skipAccessCheck && !accessAllowed(container)) {        return false;      }    break;case DELETE:  container.setCurrentAttributeValue(v);container.setRights(ACI_WRITE_DELETE);if (!skipAccessCheck && !accessAllowed(container)) {return false;}break;case INCREMENT:Entry modifiedEntry=operation.getModifiedEntry();for (Attribute attr : modifiedEntry.getAllAttributes(modAttr.getAttributeDescription())) {for (ByteString val : attr) {container.setCurrentAttributeValue(val);container.setRights(ACI_WRITE_ADD);if (!skipAccessCheck && !accessAllowed(container)) {return false;}}}break;}if (modAttrType.equals(aciType) || modAttrType.equals(globalAciType)) {try {if (modAttrType.equals(globalAciType)) {dn=DN.rootDN();}Aci.decode(v,dn);} catch (AciException ex) {throw new DirectoryException(ResultCode.INVALID_ATTRIBUTE_SYNTAX,WARN_ACI_MODIFY_FAILED_DECODE.get(dn,ex.getMessage()));}}}}}return true;}  }
class C{  public CryptoSuite(CryptoManager cryptoManager,String cipherTransformation,int cipherKeyLength,boolean encrypt){  this.cryptoManager=cryptoManager;  this.cipherInfo=new CipherInfo(cipherTransformation,cipherKeyLength,encrypt);}  }
class C{  public long tryWriteLock(){  long s, next;  return ((((s=state) & ABITS) == 0L && U.compareAndSwapLong(this,STATE,s,next=s + WBIT)) ? next : 0L);}  }
class C{  public DefaultKeyTypedAction(){  super(defaultKeyTypedAction);}  }
class C{  public void update(ObjectClass oc,Schema schema){  if (oc == null || schema == null) {    return;  }  hmAttrs.clear();  String n=oc.getNameOrOID();  if (n == null) {    n=NOT_APPLICABLE.toString();  }  titlePanel.setDetails(LocalizableMessage.raw(n));  name.setText(n);  parent.setText(getSuperiorText(oc));  oid.setText(oc.getOID());  origin.setText(getOrigin(oc).toString());  n=oc.getDescription();  if (n == null) {    n=NOT_APPLICABLE.toString();  }  description.setText(n);  ArrayList<String> otherNames=new ArrayList<>();  Iterable<String> ocNames=oc.getNames();  String primaryName=oc.getNameOrOID();  if (primaryName == null) {    primaryName="";  }  for (  String name : ocNames) {    if (!name.equalsIgnoreCase(primaryName)) {      otherNames.add(toLowerCase(name));    }  }  if (!otherNames.isEmpty()) {    n=Utilities.getStringFromCollection(otherNames,", ");  } else {    n=NOT_APPLICABLE.toString();  }  aliases.setText(n);  type.setText(getTypeValue(oc).toString());  Comparator<String> lowerCaseComparator=new LowerCaseComparator();  SortedSet<String> requiredAttrs=new TreeSet<>(lowerCaseComparator);  Set<String> inheritedAttrs=new HashSet<>();  for (  AttributeType attr : oc.getRequiredAttributes()) {    requiredAttrs.add(attr.getNameOrOID());  }  Set<ObjectClass> parents=oc.getSuperiorClasses();  if (parents != null) {    if (parents.size() > 1) {      lParent.setText(INFO_CTRL_PANEL_OBJECTCLASS_PARENTS_LABEL.get().toString());    } else {      lParent.setText(INFO_CTRL_PANEL_OBJECTCLASS_PARENT_LABEL.get().toString());    }    for (    ObjectClass parent : parents) {      for (      AttributeType attr : parent.getRequiredAttributes()) {        inheritedAttrs.add(attr.getNameOrOID());      }    }  } else {    lParent.setText(INFO_CTRL_PANEL_OBJECTCLASS_PARENT_LABEL.get().toString());  }  DefaultListModel model=(DefaultListModel)requiredAttributes.getModel();  model.clear();  for (  String attr : requiredAttrs) {    String v;    if (inheritedAttrs.contains(attr)) {      v=attr + " (*)";    } else {      v=attr;    }    model.addElement(v);    hmAttrs.put(v,schema.getAttributeType(attr.toLowerCase()));  }  SortedSet<String> optionalAttrs=new TreeSet<>(lowerCaseComparator);  inheritedAttrs=new HashSet<>();  for (  AttributeType attr : oc.getOptionalAttributes()) {    optionalAttrs.add(attr.getNameOrOID());  }  if (parents != null) {    for (    ObjectClass parent : parents) {      for (      AttributeType attr : parent.getOptionalAttributes()) {        inheritedAttrs.add(attr.getNameOrOID());      }    }  }  model=(DefaultListModel)optionalAttributes.getModel();  model.clear();  for (  String attr : optionalAttrs) {    String v;    if (inheritedAttrs.contains(attr)) {      v=attr + " (*)";    } else {      v=attr;    }    model.addElement(v);    hmAttrs.put(v,schema.getAttributeType(attr.toLowerCase()));  }}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  try {    System.out.println("shootme: got an ACK! ");    System.out.println("Dialog State = " + dialog.getState());    SipProvider provider=(SipProvider)requestEvent.getSource();    if (!callerSendsBye) {      Request byeRequest=dialog.createRequest(Request.BYE);      ClientTransaction ct=provider.getNewClientTransaction(byeRequest);      dialog.sendRequest(ct);    }  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public CertificateExpiredException(String message){  super(message);}  }
class C{  TreeSet(NavigableMap<E,Object> m){  this.m=m;}  }
class C{  synchronized static void unregister(JComponent c){  for (int counter=components.size() - 1; counter >= 0; counter--) {    JComponent target=components.get(counter).get();    if (target == c || target == null) {      components.remove(counter);    }  }}  }
class C{  public void addResponseProvider(ResponseProvider responseProvider) throws NameAlreadyExistsException {  addResponseProvider(null,responseProvider);}  }
class C{  private boolean injectAnswerForCallback(RadiusResponse response,ContextHolder holder,String answer){  final Callback[] callbacks=holder.getCallbacks();  if (callbacks == null) {    return false;  }  final Callback cb=callbacks[holder.getIdxOfCurrentCallback()];  holder.incrementIdxOfCurrentCallback();  if (cb instanceof NameCallback) {    final NameCallback nc=(NameCallback)cb;    ((NameCallback)cb).setName(answer);  } else   if (cb instanceof PasswordCallback) {    final PasswordCallback pc=(PasswordCallback)cb;    pc.setPassword(answer.toCharArray());  } else   if (cb instanceof ChoiceCallback) {    final ChoiceCallback cc=(ChoiceCallback)cb;    final int maxIdx=cc.getChoices().length - 1;    if ("".equals(answer)) {      cc.setSelectedIndex(cc.getDefaultChoice());      return true;    }    final boolean answerContainsSeparator=answer.indexOf(' ') != -1;    if (cc.allowMultipleSelections() && answerContainsSeparator) {      if (answerContainsSeparator) {        final String[] answers=answer.split(" ");        final List<Integer> idxs=new ArrayList<Integer>();        for (        final String ans : answers) {          if (!"".equals(ans)) {            final int idx=parseInt(response,ans,answer,maxIdx,holder,cb);            if (idx == -1) {              return false;            }            idxs.add(idx);          }        }        final int[] selected=new int[idxs.size()];        for (int i=0; i < selected.length; i++) {          selected[i]=idxs.get(i);        }        cc.setSelectedIndexes(selected);      }    } else {      final int idx=parseInt(response,answer,answer,maxIdx,holder,cb);      if (idx == -1) {        return false;      }      cc.setSelectedIndex(idx);    }  } else   if (cb instanceof ConfirmationCallback) {    final ConfirmationCallback cc=(ConfirmationCallback)cb;    final int maxIdx=cc.getOptions().length - 1;    if ("".equals(answer)) {      cc.setSelectedIndex(cc.getDefaultOption());      return true;    }    final int idx=parseInt(response,answer,answer,maxIdx,holder,cb);    if (idx == -1) {      return false;    }    cc.setSelectedIndex(idx);  } else {    LOG.error("Unrecognized callback type '" + cb.getClass().getSimpleName() + "' while processing challenge response. Unable to submit answer. Denying Access.");    rejectAccessAndTerminateProcess(response,holder);    return false;  }  holder.setMillisExpiryPoint(currentTimeMillis() + holder.getMillisExpiryForCurrentCallbacks());  return true;}  }
class C{  public boolean contains(String key){  return get(key) != null;}  }
class C{  public static LDAPReplicationDomain createNewDomain(ReplicationDomainCfg configuration) throws ConfigException {  try {    final LDAPReplicationDomain domain=new LDAPReplicationDomain(configuration,updateToReplayQueue,dsrsShutdownSync);    if (domains.isEmpty()) {      createReplayThreads();    }    domains.put(domain.getBaseDN(),domain);    return domain;  } catch (  ConfigException e) {    logger.error(ERR_COULD_NOT_START_REPLICATION,configuration.dn(),e.getLocalizedMessage() + " " + stackTraceToSingleLineString(e));  }  return null;}  }
class C{  public AbandonRequestProtocolOp(int idToAbandon){  this.idToAbandon=idToAbandon;}  }
class C{  private void assertBacklog(int specifiedBacklog,InetSocketAddress serverAddress) throws IOException {  List<Socket> backlog=new ArrayList<Socket>();  int peak=0;  try {    int max=100;    for (int i=0; i < max; i++) {      Socket socket=new Socket();      backlog.add(socket);      socket.connect(serverAddress,500);      peak++;    }    fail("Failed to exhaust backlog after " + max + " connections!");  } catch (  IOException expected) {  }  System.out.println("backlog peaked at " + peak);  for (  Socket socket : backlog) {    socket.close();  }  assertTrue(peak >= specifiedBacklog && peak <= (specifiedBacklog + 3) * 1.5);}  }
class C{  private <T>void registerRemoveModification(PropertyDefinition<T> pd,SortedSet<T> newValues,SortedSet<T> previousValues){  PropertyEditorModification<?> mod=getModification(pd);  PropertyEditorModification<T> newMod;  SortedSet<T> originalValues;  if (mod != null) {    originalValues=new TreeSet<>(pd);    castAndAddValues(originalValues,mod.getOriginalValues(),pd);    if (newValues.isEmpty()) {      newMod=PropertyEditorModification.createRemoveModification(pd,originalValues,originalValues);    } else     if (mod.getType() == PropertyEditorModification.Type.REMOVE) {      SortedSet<T> removedValues=new TreeSet<>(originalValues);      removedValues.removeAll(newValues);      newMod=PropertyEditorModification.createRemoveModification(pd,removedValues,originalValues);    } else {      newMod=PropertyEditorModification.createSetModification(pd,new TreeSet<T>(newValues),originalValues);    }    removeModification(mod);  } else {    originalValues=new TreeSet<>(previousValues);    SortedSet<T> removedValues=new TreeSet<>(originalValues);    removedValues.removeAll(newValues);    newMod=PropertyEditorModification.createRemoveModification(pd,removedValues,originalValues);  }  addModification(newMod);}  }
class C{  private void remove(ThreadGroup g){synchronized (groups) {    for (Iterator<ThreadGroup> i=groups.iterator(); i.hasNext(); ) {      ThreadGroup threadGroup=i.next();      if (threadGroup.equals(g)) {        i.remove();        break;      }    }  }  destroyIfEmptyDaemon();}  }
class C{  private static void createWorkflow(DN baseDN,Backend<?> backend) throws DirectoryException {  LocalBackendWorkflowElement.createAndRegister(baseDN,backend);}  }
class C{  private float caretToPointDistance(float[] caretInfo,float x,float y){  float lineDistance=isVerticalLine ? y : x;  float distanceOffBaseline=isVerticalLine ? -x : y;  return lineDistance - caretInfo[0] + (distanceOffBaseline * caretInfo[1]);}  }
class C{  public HeartbeatThread(String threadName,Session session,long heartbeatInterval){  super(threadName);  this.session=session;  this.heartbeatInterval=heartbeatInterval;}  }
class C{  private static int unsignedBytesToInt(byte b0,byte b1,byte b2){  return (unsignedByteToInt(b0) + (unsignedByteToInt(b1) << 8)) + (unsignedByteToInt(b2) << 16);}  }
class C{  protected String paramString(){  String approveButtonTextString=(approveButtonText != null ? approveButtonText : "");  String dialogTitleString=(dialogTitle != null ? dialogTitle : "");  String dialogTypeString;  if (dialogType == OPEN_DIALOG) {    dialogTypeString="OPEN_DIALOG";  } else   if (dialogType == SAVE_DIALOG) {    dialogTypeString="SAVE_DIALOG";  } else   if (dialogType == CUSTOM_DIALOG) {    dialogTypeString="CUSTOM_DIALOG";  } else   dialogTypeString="";  String returnValueString;  if (returnValue == CANCEL_OPTION) {    returnValueString="CANCEL_OPTION";  } else   if (returnValue == APPROVE_OPTION) {    returnValueString="APPROVE_OPTION";  } else   if (returnValue == ERROR_OPTION) {    returnValueString="ERROR_OPTION";  } else   returnValueString="";  String useFileHidingString=(useFileHiding ? "true" : "false");  String fileSelectionModeString;  if (fileSelectionMode == FILES_ONLY) {    fileSelectionModeString="FILES_ONLY";  } else   if (fileSelectionMode == DIRECTORIES_ONLY) {    fileSelectionModeString="DIRECTORIES_ONLY";  } else   if (fileSelectionMode == FILES_AND_DIRECTORIES) {    fileSelectionModeString="FILES_AND_DIRECTORIES";  } else   fileSelectionModeString="";  String currentDirectoryString=(currentDirectory != null ? currentDirectory.toString() : "");  String selectedFileString=(selectedFile != null ? selectedFile.toString() : "");  return super.paramString() + ",approveButtonText=" + approveButtonTextString+ ",currentDirectory="+ currentDirectoryString+ ",dialogTitle="+ dialogTitleString+ ",dialogType="+ dialogTypeString+ ",fileSelectionMode="+ fileSelectionModeString+ ",returnValue="+ returnValueString+ ",selectedFile="+ selectedFileString+ ",useFileHiding="+ useFileHidingString;}  }
class C{  public void markCompletelyDirty(JComponent aComponent){  RepaintManager delegate=getDelegate(aComponent);  if (delegate != null) {    delegate.markCompletelyDirty(aComponent);    return;  }  addDirtyRegion(aComponent,0,0,Integer.MAX_VALUE,Integer.MAX_VALUE);}  }
class C{  void addAlias(String alias){  if ((aliases == null) || (aliases.size() == 0)) {    aliases=new ArrayList<String>();  }  aliases.add(alias);}  }
class C{  public boolean matches(XPathContext xctxt,int targetNode,QName mode) throws TransformerException {  double score=m_stepPattern.getMatchScore(xctxt,targetNode);  return (XPath.MATCH_SCORE_NONE != score) && matchModes(mode,m_template.getMode());}  }
class C{  public final void errPrintln(final LocalizableMessage msg,final int indent){  getErrStream().println(wrapText(msg,MAX_LINE_WIDTH,indent));}  }
class C{  protected void addMissingNamespaces(final JKTagWrapper wrapper){  final JKFacesConfigurations config=JKFacesConfigurations.getInstance();  final List<JKNamespace> namespaces=config.getNamespaces();  for (  final JKNamespace namespace : namespaces) {    wrapper.addAttribue(namespace.getPrefix(),namespace.getUrl());  }}  }
class C{  public static <T>T unmarshal(File xml,Class<T> type){  try {    JAXBElement<T> item=getContext(type).createUnmarshaller().unmarshal(new StreamSource(xml),type);    return item.getValue();  } catch (  JAXBException e) {    throw new DataBindingException(e);  }}  }
class C{  public ID3v22Tag(ByteBuffer buffer,String loggingFilename) throws TagException {  setLoggingFilename(loggingFilename);  this.read(buffer);}  }
class C{  private static void extractCircleItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){  logger.log(Level.FINE,"circle found" + currentGroupNode.getTextContent());  if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {    float cx=0;    float cy=0;    float radius=0;    NamedNodeMap a=currentGroupNode.getAttributes();    int len=a.getLength();    boolean pureTransparent=false;    for (int j=0; j < len; j++) {      Node n=a.item(j);      String name=n.getNodeName();      String value=n.getNodeValue();      if (name.equals(SVG_STYLE)) {        addStyleToPath(child,value);        if (value.contains("opacity:0;")) {          pureTransparent=true;        }      } else       if (presentationMap.containsKey(name)) {        child.fillPresentationAttributes(name,value);      } else       if (name.equals("clip-path") && value.startsWith("url(#SVGID_")) {      } else       if (name.equals("cx")) {        cx=Float.parseFloat(value);      } else       if (name.equals("cy")) {        cy=Float.parseFloat(value);      } else       if (name.equals("r")) {        radius=Float.parseFloat(value);      }    }    if (!pureTransparent && avg != null && !Float.isNaN(cx) && !Float.isNaN(cy)) {      PathBuilder builder=new PathBuilder();      builder.absoluteMoveTo(cx,cy);      builder.relativeMoveTo(-radius,0);      builder.relativeArcTo(radius,radius,false,true,true,2 * radius,0);      builder.relativeArcTo(radius,radius,false,true,true,-2 * radius,0);      child.setPathData(builder.toString());    }  }}  }
class C{  private static void renumProviders(){  Provider[] p=Services.getProviders();  for (int i=0; i < p.length; i++) {    p[i].setProviderNumber(i + 1);  }}  }
class C{  public void testConstrStringWithoutExpWithoutPoint(){  String a="-732546982374982347892379283571094797287346782359284756";  int aScale=0;  BigInteger bA=new BigInteger("-732546982374982347892379283571094797287346782359284756");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  private static boolean isBoxType(Class<?> cls){  return cls.equals(Integer.class) || cls.equals(Short.class) || cls.equals(Byte.class)|| cls.equals(Boolean.class)|| cls.equals(Long.class)|| cls.equals(Character.class)|| cls.equals(Float.class)|| cls.equals(Double.class);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ps.AuthenticationStatementType createAuthenticationStatementType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ps.impl.AuthenticationStatementTypeImpl();}  }
class C{  public void testNotationsSetNamedItemNS() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Element elem;  doc=(Document)load("hc_staff",builder);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    elem=doc.createElementNS("http://www.w3.org/1999/xhtml","br");    try {      notations.setNamedItemNS(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  @SuppressWarnings("null") public static MBeanServerConnection accessJMXConnection(Project project,String url,String host,String port,String username,String password,String refId) throws MalformedURLException, IOException {  MBeanServerConnection jmxServerConnection=null;  boolean isRef=project != null && refId != null && refId.length() > 0;  if (isRef) {    Object pref=project.getReference(refId);    try {      jmxServerConnection=(MBeanServerConnection)pref;    } catch (    ClassCastException cce) {      project.log("wrong object reference " + refId + " - "+ pref.getClass());      return null;    }  }  if (jmxServerConnection == null) {    jmxServerConnection=createJMXConnection(url,host,port,username,password);  }  if (isRef && jmxServerConnection != null) {    project.addReference(refId,jmxServerConnection);  }  return jmxServerConnection;}  }
class C{  public void init(Subject subject,Map sharedState,Map options){  debug.message("in initialize...");  java.util.Locale locale=getLoginLocale();  bundle=amCache.getResBundle(amAuthJDBC,locale);  if (debug.messageEnabled()) {    debug.message("amAuthJDBC Authentication resource bundle locale=" + locale);  }  this.options=options;  this.sharedState=sharedState;  if (options != null) {    try {      connectionType=CollectionHelper.getMapAttr(options,CONNECTIONTYPE);      if (connectionType == null) {        debug.message("No CONNECTIONTYPE for configuring");        errorMsg="noCONNECTIONTYPE";        return;      } else {        if (debug.messageEnabled()) {          debug.message("Found config for CONNECTIONTYPE: " + connectionType);        }        if (connectionType.equals("JNDI")) {          useJNDI=true;        }        if (useJNDI) {          debug.message("Using JNDI Retrieved Connection pool");          jndiName=CollectionHelper.getMapAttr(options,JNDINAME);          if (jndiName == null) {            debug.message("No JNDINAME for configuring");            errorMsg="noJNDINAME";            return;          } else {            if (debug.messageEnabled()) {              debug.message("Found config for JNDINAME: " + jndiName);            }          }        } else {          debug.message("Using non pooled JDBC");          driver=CollectionHelper.getMapAttr(options,DRIVER);          if (driver == null) {            debug.message("No DRIVER for configuring");            errorMsg="noDRIVER";            return;          } else {            if (debug.messageEnabled())             debug.message("Found config for DRIVER: " + driver);          }          url=CollectionHelper.getMapAttr(options,URL);          if (url == null) {            debug.message("No URL for configuring");            errorMsg="noURL";            return;          } else {            if (debug.messageEnabled()) {              debug.message("Found config for URL: " + url);            }          }          dbuser=CollectionHelper.getMapAttr(options,DBUSER);          if (dbuser == null) {            debug.message("No DBUSER for configuring");            errorMsg="noDBUSER";            return;          } else {            if (debug.messageEnabled()) {              debug.message("Found config for DBUSER: " + dbuser);            }          }          dbpassword=CollectionHelper.getMapAttr(options,DBPASSWORD,"");          if (dbpassword == null) {            debug.message("No DBPASSWORD for configuring");            errorMsg="noDBPASSWORD";            return;          }        }      }      passwordColumn=CollectionHelper.getMapAttr(options,PASSWORDCOLUMN);      if (passwordColumn == null) {        debug.message("No PASSWORDCOLUMN for configuring");        errorMsg="noPASSWORDCOLUMN";        return;      } else {        if (debug.messageEnabled()) {          debug.message("Found config for PASSWORDCOLUMN: " + passwordColumn);        }      }      statement=CollectionHelper.getMapAttr(options,STATEMENT);      if (statement == null) {        debug.message("No STATEMENT for configuring");        errorMsg="noSTATEMENT";      }      transform=CollectionHelper.getMapAttr(options,TRANSFORM);      if (transform == null) {        if (debug.messageEnabled()) {          debug.message("No TRANSFORM for configuring." + "Using clear text");        }        transform=DEFAULT_TRANSFORM;      } else {        if (debug.messageEnabled()) {          debug.message("Plugin for TRANSFORM: " + transform);        }      }      String authLevel=CollectionHelper.getMapAttr(options,AUTHLEVEL);      if (authLevel != null) {        try {          setAuthLevel(Integer.parseInt(authLevel));        } catch (        Exception e) {          debug.error("Unable to set auth level " + authLevel,e);        }      }    } catch (    Exception ex) {      debug.error("JDBC Init Exception",ex);    }  }}  }
class C{  void fullyLock(){  putLock.lock();  takeLock.lock();}  }
class C{  @SuppressWarnings("unchecked") @Override public PdfStream copyTo(PdfDocument document,boolean allowDuplicating){  return (PdfStream)super.copyTo(document,allowDuplicating);}  }
class C{  void unassignPolicies(AMTemplate template,Set policyDNs,boolean toVerify) throws AMException, SSOException {  throw new UnsupportedOperationException();}  }
class C{  @Override public int hashCode(){  return super.hashCode() ^ (int)gregorianCutoverDate;}  }
class C{  static public void assertEquals(double expected,double actual,double delta){  assertEquals(null,expected,actual,delta);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsaddr.MetadataType createMetadataType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsaddr.impl.MetadataTypeImpl();}  }
class C{  private synchronized void init(String instanceRDN) throws Exception {  String srvcName=getServiceName();  if (adminToken == null) {    adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());    sManager=new ServiceManager(adminToken);    ServiceSchemaManager schemaManager=sManager.getSchemaManager(srvcName,SERVICE_VERSION);    clientServiceSchema=schemaManager.getGlobalSchema();    clientSchema=clientServiceSchema.getSubSchema(DBSTORE_SUBSCHEMA_ID);    clientSchema=clientSchema.getSubSchema(CLIENT_SUBSCHEMA_ID);    amConnection=new AMStoreConnection(adminToken);    topLevelDN=amConnection.getOrganizationDN(null,null);    initClientSchema();    initConfigurationInfo(clientServiceSchema);    clientDataDN=CLIENT_DATA_DN_PREFIX + COMMA + topLevelDN;  }  databaseDN=instanceRDN + COMMA + clientDataDN;  amClientOrg=amConnection.getOrganizationalUnit(databaseDN);}  }
class C{  public void stop() throws Exception {  Method method=catalinaDaemon.getClass().getMethod("stop",(Class[])null);  method.invoke(catalinaDaemon,(Object[])null);}  }
class C{  @Override @Test(expectedExceptions=IllegalBlockingModeException.class) public void testDecodeTruncatedLengthArrayAsBoolean() throws Exception {  super.testDecodeTruncatedLengthArrayAsBoolean();}  }
class C{  @Override public Foo fetchByUuid_C_First(String uuid,long companyId,OrderByComparator<Foo> orderByComparator){  List<Foo> list=findByUuid_C(uuid,companyId,0,1,orderByComparator);  if (!list.isEmpty()) {    return list.get(0);  }  return null;}  }
class C{  public void copyFrom(Properties src){  copyFrom(src,true);}  }
class C{  public AssertionIDReference(Element element) throws SAMLException {  if (element == null) {    SAMLUtilsCommon.debug.message("AssertionIDReference: Input is null.");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("nullInput"));  }  String tag=null;  tag=element.getLocalName();  if ((tag == null) || (!tag.equals("AssertionIDReference"))) {    SAMLUtilsCommon.debug.message("AssertionIDReference: wrong input");    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("wrongInput"));  }  assertionID=XMLUtils.getElementValue(element);  if (assertionID == null || assertionID.length() == 0) {    if (SAMLUtilsCommon.debug.messageEnabled()) {      SAMLUtilsCommon.debug.message("AssertionIDReference is null.");    }    throw new SAMLRequesterException(SAMLUtilsCommon.bundle.getString("missingElementValue"));  }}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  public int hashCode(){  return this.address.getHostPort().encode().toLowerCase().hashCode();}  }
class C{  public boolean exists(){  return (!sc.isNewEntry());}  }
class C{  public void testCertStore17() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderCol);      assertEquals("Incorrect provider",certS.getProvider(),defaultProviderCol);    } catch (    IllegalArgumentException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderColName);      assertEquals("Incorrect provider",certS.getProvider(),defaultProviderCol);    } catch (    NoSuchProviderException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }  }}  }
class C{  public Map preProcessCreate(SSOToken token,String entryDN,Map attributes,int objectType) throws AMPreCallBackException {  return attributes;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  String filter=getStringOptionValue(IArgument.FILTER);  String[] params={realm,type,filter};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SEARCH_IDENTITIES",params);  try {    new OrganizationConfigManager(adminSSOToken,realm);  } catch (  SMSException e) {    String[] args={realm,type,filter,e.getMessage()};    debugError("SearchIdentities.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SEARCH_IDENTITIES",args);    Object[] msgArg={realm};    throw new CLIException(MessageFormat.format(getResourceString("realm-does-not-exist"),msgArg),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    IdType idType=convert2IdType(type);    IdSearchResults isr=amir.searchIdentities(idType,filter,new IdSearchControl());    Set results=isr.getSearchResults();    if ((results != null) && !results.isEmpty()) {      if (idType.equals(IdType.USER)) {        IdSearchResults specialUsersResults=amir.getSpecialIdentities(IdType.USER);        results.removeAll(specialUsersResults.getSearchResults());      }      for (Iterator i=results.iterator(); i.hasNext(); ) {        AMIdentity amid=(AMIdentity)i.next();        String[] args={amid.getName(),amid.getUniversalId()};        outputWriter.printlnMessage(MessageFormat.format(getResourceString("format-search-identities-results"),(Object[])args));      }    } else {      outputWriter.printlnMessage(getResourceString("search-identities-no-entries"));    }    outputWriter.printlnMessage(MessageFormat.format(getResourceString("search-identities-succeed"),(Object[])params));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SEARCH_IDENTITIES",params);  } catch (  IdRepoException e) {    String[] args={realm,type,filter,e.getMessage()};    debugError("SearchIdentities.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SEARCH_IDENTITIES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,filter,e.getMessage()};    debugError("SearchIdentities.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SEARCH_IDENTITIES",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public String toString(){  return "color=" + getColor() + ",media="+ getMedia()+ ",orientation-requested="+ getOrientationRequested()+ ",origin="+ getOrigin()+ ",print-quality="+ getPrintQuality()+ ",printer-resolution=["+ printerResolution[0]+ ","+ printerResolution[1]+ ","+ printerResolution[2]+ "]";}  }
class C{  public Door(final Material type,boolean isHingeRight){  super(type);  setTopHalf(true);  setHinge(isHingeRight);}  }
class C{  public void reset(){  loginStatus=Status.NOT_STARTED;}  }
class C{  private void extractStatic(MethodNode method){  for (  AbstractInsnNode ain : method.instructions.toArray()) {    if (ain.getOpcode() == Opcodes.PUTSTATIC) {      FieldInsnNode fin=(FieldInsnNode)ain;      if (ain.getPrevious().getOpcode() == Opcodes.AASTORE) {        zkmFieldName=fin.name;        multiZKM=true;      } else {        AbstractInsnNode prev=ain.getPrevious();        while (prev.getOpcode() == Opcodes.F_NEW) {          prev=prev.getPrevious();        }        if (prev.getOpcode() == Opcodes.GOTO) {          zkmFieldName=fin.name;          multiZKM=false;        }      }    }  }  List<AbstractInsnNode> lastInsns=new ArrayList<AbstractInsnNode>();  boolean possibleMatch=false;  int ind=0;  for (  AbstractInsnNode ain : method.instructions.toArray()) {    if (ain instanceof LdcInsnNode) {      Object cst=((LdcInsnNode)ain).cst;      if (cst instanceof String) {        strings.put(ind,(String)cst);        ind++;      }    } else {      int o=ain.getOpcode();      if (possibleMatch) {        if (o != Opcodes.F_NEW && o != Opcodes.TABLESWITCH) {          lastInsns.add(ain);        }        if (!((o >= Opcodes.ICONST_0 && o <= Opcodes.ICONST_5) || o == Opcodes.BIPUSH || o == Opcodes.GOTO || o == Opcodes.F_NEW || o == Opcodes.TABLESWITCH)) {          possibleMatch=false;          lastInsns.clear();        }        if (lastInsns.size() > 8) {          for (int i=0; i < 5; i++) {            int v=OpUtils.getIntValue(lastInsns.get(i * 2));            modifiers.put(i,v);          }          possibleMatch=false;          lastInsns.clear();        }      }      if (o == Opcodes.TABLESWITCH) {        possibleMatch=true;      }    }  }  for (  int in : strings.keySet()) {    strings.replace(in,(decrypt(strings.get(in))));  }}  }
class C{  void addPolicyToResourceTree(ServiceTypeManager svtm,SSOToken token,Policy policy) throws PolicyException, SSOException {  Set ruleNames=policy.getRuleNames();  Iterator iter=ruleNames.iterator();  Set serviceNames=new HashSet();  while (iter.hasNext()) {    String ruleName=(String)iter.next();    Rule rule=policy.getRule(ruleName);    String serviceName=rule.getServiceTypeName();    serviceNames.add(serviceName);    ServiceType resourceType=svtm.getServiceType(serviceName);    addIndexEntry(resourceType,rule.getResourceName(),policy.getName());  }  iter=serviceNames.iterator();  while (iter.hasNext()) {    String serviceName=(String)iter.next();    saveResourceIndex(serviceName);  }  Referrals referrals=policy.getReferrals();  if (referrals != null) {    Set referralNames=referrals.getReferralNames();    if ((referralNames != null) && (!referralNames.isEmpty())) {      Iterator referralIter=referralNames.iterator();      while (referralIter.hasNext()) {        String referralName=(String)referralIter.next();        Referral referral=referrals.getReferral(referralName);        if (referral instanceof OrgReferral) {          Set values=referral.getValues();          if ((values != null) && (!values.isEmpty())) {            Iterator valueIter=values.iterator();            while (valueIter.hasNext()) {              Map servicePrefixMap=new HashMap();              String value=(String)valueIter.next();              PolicyManager pm=new PolicyManager(token,value);              ResourceManager rm=pm.getResourceManager();              Set ruleNames1=policy.getRuleNames();              Iterator ruleIter=ruleNames1.iterator();              while (ruleIter.hasNext()) {                String ruleName1=(String)ruleIter.next();                Rule rule1=policy.getRule(ruleName1);                String resourceName=rule1.getResourceName();                if (resourceName != null) {                  String service=rule1.getServiceTypeName();                  Set resourceNames=(Set)servicePrefixMap.get(service);                  if (resourceNames == null) {                    resourceNames=new HashSet();                    servicePrefixMap.put(service,resourceNames);                  }                  resourceNames.add(resourceName);                }              }              Iterator serviceIter=servicePrefixMap.keySet().iterator();              while (serviceIter.hasNext()) {                String service=(String)serviceIter.next();                Set resourceNames=(Set)servicePrefixMap.get(service);                rm.addResourcePrefixes(service,resourceNames);              }            }          }        }      }    }  }}  }
class C{  @Override public Promise<ActionResponse,ResourceException> handleAction(Context context,ActionRequest request){  try {switch (request.getActionAsEnum(Action.class)) {case status:      return handleMaintenanceStatus();case enable:    enableMaintenanceMode();  return handleMaintenanceStatus();case disable:disableMaintenanceMode();return handleMaintenanceStatus();default :return new NotSupportedException(request.getAction() + " is not supported").asPromise();}} catch (Exception e) {return new InternalServerErrorException("Error processing Action request",e).asPromise();}}  }
class C{  public static void main(String[] args){  try {    SecurityOptionsDialog dlg=new SecurityOptionsDialog(new JFrame(),SecurityOptions.createNoCertificateOptions());    dlg.pack();    dlg.setVisible(true);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public Object popCurrentFuncResult(){  return m_currentFuncResult.pop();}  }
class C{  public RSAESOAEPparams(){  hashAlgorithm=DEFAULT_HASH_ALGORITHM;  maskGenAlgorithm=DEFAULT_MASK_GEN_FUNCTION;  pSourceAlgorithm=DEFAULT_P_SOURCE_ALGORITHM;}  }
class C{  private void newClientWithChangefromServer1() throws Exception {  debugInfo("Starting newClientWithChangefromServer1");  ServerState state=newServerState(firstCSNServer1);  newClientWithChanges(state,firstCSNServer2);  debugInfo("Ending newClientWithChangefromServer1");}  }
class C{  public static final String makeJavaIdentifier(String identifier){  return makeJavaIdentifier(identifier,true);}  }
class C{  public static ResultCode create(ObjectFactory objFactory,int resultCode){  ResultCode result=objFactory.createResultCode();  result.setCode(resultCode);  Integer r=Integer.valueOf(resultCode);  if (ResultCodeFactory.codeToDescr.containsKey(r)) {    result.setDescr(ResultCodeFactory.codeToDescr.get(r));  }  return result;}  }
class C{  private void genCommonPostamble(){  for (int i=0; i < methodsBuffered.size(); i++) {    GenBuffer methodBuffer=methodsBuffered.get(i);    methodBuffer.adjustJavaLines(out.getJavaLine() - 1);    out.printMultiLn(methodBuffer.toString());  }  if (fragmentHelperClass.isUsed()) {    fragmentHelperClass.generatePostamble();    fragmentHelperClass.adjustJavaLines(out.getJavaLine() - 1);    out.printMultiLn(fragmentHelperClass.toString());  }  if (charArrayBuffer != null) {    out.printMultiLn(charArrayBuffer.toString());  }  out.popIndent();  out.printil("}");}  }
class C{  public static void updateTableSizes(JTable table){  updateTableSizes(table,-1);}  }
class C{  public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  public boolean isLockedOut(String userName){  String normUserDN=normalizeDN(userName);  boolean locked=false;  try {    if (isAccountLockout.isMemoryLocking()) {      locked=isMemoryLockout(normUserDN);    }  } catch (  Exception e) {    if (DEBUG.messageEnabled()) {      DEBUG.message("isLockedOut:Exception : ",e);    }  }  return locked;}  }
class C{  public void newAccessRight(AccessRightObject accessRight) throws UMSException, ACIParseException {  ACI readACI=null;  ACI writeACI=null;  if (parentObject == null) {    parentObject=getParentObject();  }  Iterator acis=parentObject.getACI().iterator();  if (acis != null) {    String guid=getGuid().getDn().trim();    while (acis.hasNext()) {      ACI aci=(ACI)acis.next();      if (debug.messageEnabled()) {        debug.message("BaseRole.newAccessRight ACI.toString =" + aci.toString());      }      String aciName=aci.getName();      if (aciName.equals(READ_PERM_HEADER + guid)) {        readACI=aci;        if (writeACI != null)         break; else         continue;      }      if (aciName.equals(WRITE_PERM_HEADER + guid)) {        writeACI=aci;        if (readACI != null)         break; else         continue;      }    }  }  if (readACI != null) {    debug.message("modify existing read aci");    Attr attr=new Attr(ACI.ACI,readACI.getACIText());    if (debug.messageEnabled()) {      debug.message("readaci.ACIText :" + readACI.getACIText());    }    parentObject.modify(attr,ModificationType.DELETE);    ACI newReadACI=ACI.valueOf(readACI.toString());    QualifiedCollection readAttrs=new QualifiedCollection(accessRight.getReadableAttributeNames(),false);    newReadACI.setTargetAttributes(readAttrs);    attr=new Attr(ACI.ACI,newReadACI.toString());    parentObject.modify(attr,ModificationType.ADD);  } else {    debug.message("new read aci");    ACI newReadACI=new ACI(READ_PERM_HEADER + getGuid().getDn());    newReadACI.setName(READ_PERM_HEADER + getGuid().getDn());    QualifiedCollection readAttrs=new QualifiedCollection(accessRight.getReadableAttributeNames(),false);    newReadACI.setTargetAttributes(readAttrs);    HashSet hs=new HashSet();    hs.add(READ_PERM_STRING);    QualifiedCollection perm=new QualifiedCollection(hs,false);    newReadACI.setPermissions(perm);    hs=new HashSet();    hs.add(getGuid().getDn());    newReadACI.setRoles(hs);    Attr attr=new Attr(ACI.ACI,newReadACI.toString());    if (debug.messageEnabled()) {      debug.message("READ " + getGuid().getDn() + "="+ newReadACI.toString());    }    parentObject.modify(attr,ModificationType.ADD);  }  if (writeACI != null) {    debug.message("modify existing write aci");    Attr attr=new Attr(ACI.ACI,writeACI.getACIText());    if (debug.messageEnabled()) {      debug.message("writeaci.ACIText :" + writeACI.getACIText());    }    parentObject.modify(attr,ModificationType.DELETE);    ACI newWriteACI=ACI.valueOf(writeACI.toString());    QualifiedCollection qual=new QualifiedCollection(accessRight.getWritableAttributeNames(),false);    newWriteACI.setTargetAttributes(qual);    attr=new Attr(ACI.ACI,newWriteACI.toString());    parentObject.modify(attr,ModificationType.ADD);  } else {    debug.message("new write aci");    ACI newWriteACI=new ACI(WRITE_PERM_HEADER + getGuid().getDn());    newWriteACI.setName(WRITE_PERM_HEADER + getGuid().getDn());    QualifiedCollection writeAttrs=new QualifiedCollection(accessRight.getWritableAttributeNames(),false);    newWriteACI.setTargetAttributes(writeAttrs);    HashSet hs=new HashSet();    hs.add(WRITE_PERM_STRING);    QualifiedCollection perm=new QualifiedCollection(hs,false);    newWriteACI.setPermissions(perm);    hs=new HashSet();    hs.add(getGuid().getDn());    newWriteACI.setRoles(hs);    Attr attr=new Attr(ACI.ACI,newWriteACI.toString());    if (debug.messageEnabled()) {      debug.message("Write " + getGuid().getDn() + "="+ newWriteACI.toString());    }    parentObject.modify(attr,ModificationType.ADD);  }  parentObject.save();}  }
class C{  public static Collection<File> listFilesAndDirs(File directory,IOFileFilter fileFilter,IOFileFilter dirFilter){  validateListFilesParameters(directory,fileFilter);  IOFileFilter effFileFilter=setUpEffectiveFileFilter(fileFilter);  IOFileFilter effDirFilter=setUpEffectiveDirFilter(dirFilter);  Collection<File> files=new java.util.LinkedList<File>();  if (directory.isDirectory()) {    files.add(directory);  }  innerListFiles(files,directory,FileFilterUtils.or(effFileFilter,effDirFilter),true);  return files;}  }
class C{  public void addActionDecision(ActionDecision newActionDecision,String trueValue,String falseValue){  String action=newActionDecision.getActionName();  ActionDecision oldActionDecision=(ActionDecision)actionDecisions.get(action);  if ((oldActionDecision == null) || (trueValue == null) || (falseValue == null)) {    addActionDecision(newActionDecision);  } else {    long newTtl=newActionDecision.getTimeToLive();    long oldTtl=oldActionDecision.getTimeToLive();    Set oldActionValues=oldActionDecision.getValues();    Set newActionValues=newActionDecision.getValues();    Map advices=null;    Map oldAdvices=oldActionDecision.getAdvices();    Map newAdvices=newActionDecision.getAdvices();    advices=PolicyUtils.addMapToMap(oldAdvices,newAdvices);    if ((oldActionValues != null) && (oldActionValues.contains(falseValue))) {      if ((newActionValues != null) && newActionValues.contains(falseValue)) {        oldActionDecision.setTimeToLive(Math.max(newTtl,oldTtl));      }    } else     if ((oldActionValues != null) && oldActionValues.contains(trueValue)) {      if ((newActionValues != null) && newActionValues.contains(falseValue)) {        actionDecisions.put(action,newActionDecision);      } else       if (newActionDecision.getValues().contains(trueValue)) {        oldActionDecision.setTimeToLive(Math.max(newTtl,oldTtl));      }    } else {      actionDecisions.put(action,newActionDecision);    }    ActionDecision ad=(ActionDecision)actionDecisions.get(action);    ad.setAdvices(advices);    setTimeToLive();  }}  }
class C{  private int acc(List<SModifier> modifiers){  int acc=0;  for (  SModifier m : modifiers) {    acc|=m.flag;  }  return acc;}  }
class C{  private static final int nthSlash(CharChunk name,int n){  char[] c=name.getBuffer();  int end=name.getEnd();  int start=name.getStart();  int pos=start;  int count=0;  while (pos < end) {    if ((c[pos++] == '/') && ((++count) == n)) {      pos--;      break;    }  }  return (pos);}  }
class C{  public int next(){  if (_currentNode != NULL) {    int node=_currentNode;    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }  return END;}  }
class C{  private String[][] retrieveIanaTlsCipherSuitesRegistryFromInternet() throws Exception {  String url="http://www.iana.org/assignments/tls-parameters/tls-parameters.xml";  URLConnection conn=new URL(url).openConnection();  try (BufferedInputStream bis=new BufferedInputStream(conn.getInputStream())){    DocumentBuilderFactory dbFactory=DocumentBuilderFactory.newInstance();    DocumentBuilder builder=dbFactory.newDocumentBuilder();    Document doc=builder.parse(bis);    XPathFactory xpathFactory=XPathFactory.newInstance();    XPath xpath=xpathFactory.newXPath();    String xPathExpr="//registry[@id='tls-parameters-4']/record/description/text()";    List<String> realCiphers=retrieveRealCiphers(doc,xpath,xPathExpr);    return toDataProviderResult(realCiphers);  } }  }
class C{  public JCheckBox(String text,boolean selected){  this(text,null,selected);}  }
class C{  public PrintWriter log(PrintWriter out){  return log(this,out);}  }
class C{  private boolean isCurrentDevice(RouteInfo info){  if (mCastDevice == null) {    return false;  }  CastDevice device=CastDevice.getFromBundle(info.getExtras());  if (!device.getDeviceId().equals(mCastDevice.getDeviceId())) {    return false;  }  return true;}  }
class C{  public IndexedPropertyChangeEvent(Object source,String propertyName,Object oldValue,Object newValue,int index){  super(source,propertyName,oldValue,newValue);  this.index=index;}  }
class C{  public boolean delete(Long failedActionID){  if (failedActionID == null) {    throw new IllegalArgumentException("null");  }  return database.delete(DATABASE_TABLE,KEY_FAILEDACTIONID + "=" + failedActionID,null) > 0;}  }
class C{  protected void Pattern() throws javax.xml.transform.TransformerException {  while (true) {    LocationPathPattern();    if (tokenIs('|')) {      nextToken();    } else {      break;    }  }}  }
class C{  ServerStartMsg(byte[] in) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  decodeHeader(scanner,MSG_TYPE_SERVER_START);  baseDN=scanner.nextDN();  serverId=scanner.nextIntUTF8();  serverURL=scanner.nextString();  maxReceiveDelay=scanner.nextIntUTF8();  maxReceiveQueue=scanner.nextIntUTF8();  maxSendDelay=scanner.nextIntUTF8();  maxSendQueue=scanner.nextIntUTF8();  windowSize=scanner.nextIntUTF8();  heartbeatInterval=scanner.nextIntUTF8();  sslEncryption=Boolean.valueOf(scanner.nextString());  serverState=scanner.nextServerStateMustComeLast();}  }
class C{  public static void clear(){  if (mSharedPreferences == null) {    return;  }  mSharedPreferences.edit().clear().apply();}  }
class C{  public boolean compressAttributeDescriptions(){  return compressAttrDescriptions;}  }
class C{  protected boolean shouldUpdateStyleOnEvent(PropertyChangeEvent ev){  String eName=ev.getPropertyName();  if ("name" == eName || "componentOrientation" == eName) {    return true;  }  if ("ancestor" == eName && ev.getNewValue() != null) {    return shouldUpdateStyleOnAncestorChanged();  }  return false;}  }
class C{  private Session deleteSession(SessionID sessionID){  Reject.ifNull(sessionID);  SessionCuller sessionCuller=sessionCullerTable.remove(sessionID);  if (sessionCuller != null) {    sessionCuller.cancel();  }  return sessionTable.remove(sessionID);}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  int col=0;  int ncells=getViewCount();  for (int cell=0; cell < ncells; cell++) {    View cv=getView(cell);    if (skipComments && !(cv instanceof CellView)) {      continue;    }    for (; isFilled(col); col++)     ;    int colSpan=getColumnsOccupied(cv);    spans[cell]=columnSpans[col];    offsets[cell]=columnOffsets[col];    if (colSpan > 1) {      int n=columnSpans.length;      for (int j=1; j < colSpan; j++) {        if ((col + j) < n) {          spans[cell]+=columnSpans[col + j];          spans[cell]+=cellSpacing;        }      }      col+=colSpan - 1;    }    col++;  }}  }
class C{  public static String removeLast(String original,String string){  int lastIndexOf=original.lastIndexOf(string);  if (lastIndexOf == -1) {    return original;  }  return original.substring(0,lastIndexOf);}  }
class C{  public UnsupportedDigestAlgorithmException(String message){  super(message);}  }
class C{  public Object validateRequest(SOAPMessage soapMessage,Subject subject,Map sharedData,HttpServletRequest httpRequest) throws SOAPBindingException {  Utils.debug.message("SOAPProvider.validateRequest : Init");  Message req=null;  try {    req=new Message(soapMessage);    sharedData.put(SOAPBindingConstants.LIBERTY_REQUEST,req);    if (req.getSecurityProfileType() != Message.ANONYMOUS && !SecurityUtils.verifyMessage(req)) {      Utils.debug.error("MessageProcessor.validateRequest: Signature" + "Verification failed.");      throw new SOAPBindingException(Utils.bundle.getString("cannotVerifySignature"));    }    Utils.enforceProcessingRules(req,null,true);    if (_config != null) {      String authMech=req.getAuthenticationMechanism();      if (authMech == null || !_config.getSupportedAuthenticationMechanisms().contains(authMech)) {        throw new SOAPBindingException(Utils.bundle.getString("unsupportedAuthMech"));      }    } else {      throw new SOAPBindingException(Utils.bundle.getString("nullConfiguration"));    }    return _config.getAuthenticator().authenticate(req,subject,sharedData,httpRequest);  } catch (  SOAPBindingException sbe) {    Utils.debug.error("MessageProcessor.validateRequest: Request" + "Validation has failed.",sbe);    throw sbe;  }catch (  SOAPFaultException sfe) {    Utils.debug.error("MessageProcessor.validateRequest: SOAPFault" + "Exception.",sfe);    throw new SOAPBindingException(Utils.bundle.getString("soapFaultException"));  }}  }
class C{  public DefinedDefaultBehaviorProvider(String... values){  if (values == null || values.length == 0) {    throw new IllegalArgumentException("Null or empty list of default values");  }  this.values=Arrays.asList(values);}  }
class C{  public StringTokenizer(String str){  this(str," \t\n\r\f",false);}  }
class C{  public static BooleanArgument noOpArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_DRYRUN).shortIdentifier(OPTION_SHORT_DRYRUN).description(INFO_DESCRIPTION_NOOP.get()).buildArgument();}  }
class C{  @Override public boolean isPowered(){  return getItemType() == Material.REDSTONE_COMPARATOR_ON;}  }
class C{  @Override public int hashCode(){  return oid.hashCode();}  }
class C{  public boolean isAccessibleChildSelected(int i){  int childCount=getAccessibleChildrenCount();  if (i < 0 || i >= childCount) {    return false;  } else {    TreePath childPath=getChildTreePath(i);    return tree.isPathSelected(childPath);  }}  }
class C{  protected void layoutMajorAxis(int targetSpan,int axis,int[] offsets,int[] spans){  if (children == null) {    init();  }  SizeRequirements.calculateTiledPositions(targetSpan,null,getChildRequests(targetSpan,axis),offsets,spans);}  }
class C{  public static boolean isInteger(final String txt){  try {    Integer.parseInt(txt);    return true;  } catch (  final NumberFormatException e) {    return false;  }}  }
class C{  public ZipError(String s){  super(s);}  }
class C{  @Override public int read() throws IOException {  if (finished) {    return (outputIndex == outputLength) ? -1 : outputBuffer[outputIndex++] & 0xFF;  }  if (outputIndex < outputLength) {    return outputBuffer[outputIndex++] & 0xFF;  }  outputIndex=0;  outputLength=0;  while (outputLength == 0) {    int outputSize=cipher.getOutputSize(inputBuffer.length);    if ((outputBuffer == null) || (outputBuffer.length < outputSize)) {      this.outputBuffer=new byte[outputSize];    }    int byteCount=in.read(inputBuffer);    if (byteCount == -1) {      try {        outputLength=cipher.doFinal(outputBuffer,0);      } catch (      Exception e) {        throw new IOException("Error while finalizing cipher",e);      }      finished=true;      break;    }    try {      outputLength=cipher.update(inputBuffer,0,byteCount,outputBuffer,0);    } catch (    ShortBufferException e) {      throw new AssertionError(e);    }  }  return read();}  }
class C{  public static String removeProperty(String key){  return get().properties.remove(key);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.DigestMethodElement createDigestMethodElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.DigestMethodElementImpl();}  }
class C{  public Set createStaticGroups(Set groupNames) throws AMException, SSOException {  Iterator iter=groupNames.iterator();  Set groups=new HashSet();  while (iter.hasNext()) {    String groupDN=AMNamingAttrManager.getNamingAttr(GROUP) + "=" + ((String)iter.next())+ ","+ entryDN;    AMStaticGroupImpl groupImpl=new AMStaticGroupImpl(token,groupDN);    groupImpl.create();    groups.add(groupImpl);  }  return groups;}  }
class C{  public ApiHandlerAssert hasI18nDescription(){  assertI18nDescription(actual.description(),annotatedClass);  return this;}  }
class C{  protected ItemListener createItemListener(){  return getHandler();}  }
class C{  public final double check_trace(PlaSegmentInt p_line_segment,int p_layer,NetNosList p_net_no_arr,int p_trace_half_width,int p_cl_class_no,boolean p_only_not_shovable_obstacles){  Polyline check_polyline=p_line_segment.to_polyline();  ShapeTile shape_to_check=check_polyline.offset_shape(p_trace_half_width,0);  PlaPointFloat from_point=p_line_segment.start_point_approx();  PlaPointFloat to_point=p_line_segment.end_point_approx();  double line_length=to_point.distance(from_point);  double ok_length=Integer.MAX_VALUE;  AwtreeShapeSearch default_tree=search_tree_manager.get_default_tree();  Collection<AwtreeFindEntry> obstacle_list=default_tree.find_overlap_tree_entries_with_clearance(shape_to_check,p_layer,p_net_no_arr,p_cl_class_no);  for (  AwtreeFindEntry obstacle_entry : obstacle_list) {    if (!(obstacle_entry.object instanceof BrdItem))     continue;    BrdItem obstacle_item=(BrdItem)obstacle_entry.object;    if (p_only_not_shovable_obstacles && obstacle_item.is_route() && !obstacle_item.is_shove_fixed())     continue;    ShapeTile curr_obstacle_shape=obstacle_entry.object.get_tree_shape(default_tree,obstacle_entry.shape_index_in_object);    ShapeTile curr_offset_shape;    PlaPointFloat nearest_obstacle_point;    double shorten_value;    if (default_tree.is_clearance_compensation_used()) {      curr_offset_shape=shape_to_check;      shorten_value=p_trace_half_width + brd_rules.clearance_matrix.clearance_compensation_value(obstacle_item.clearance_idx(),p_layer);    } else {      int clearance_value=get_clearance(obstacle_item.clearance_idx(),p_cl_class_no,p_layer);      curr_offset_shape=shape_to_check.offset(clearance_value);      shorten_value=p_trace_half_width + clearance_value;    }    ShapeTile intersection=curr_obstacle_shape.intersection(curr_offset_shape);    if (intersection.is_empty())     continue;    nearest_obstacle_point=intersection.nearest_point_approx(from_point);    double projection=from_point.scalar_product(to_point,nearest_obstacle_point) / line_length;    projection=Math.max(0.0,projection - shorten_value - 1);    if (projection < ok_length) {      ok_length=projection;      if (ok_length <= 0) {        return 0;      }    }  }  return ok_length;}  }
class C{  public IntIteratorSpliterator(PrimitiveIterator.OfInt iterator,int characteristics){  this.it=iterator;  this.est=Long.MAX_VALUE;  this.characteristics=characteristics & ~(Spliterator.SIZED | Spliterator.SUBSIZED);}  }
class C{  public void addSortKey(int column){  addSortKey(column,String.CASE_INSENSITIVE_ORDER);}  }
class C{  public String foundType(){  return foundType;}  }
class C{  public synchronized void unregister(Plugin plugin){  boolean changed=false;  for (  List<RegisteredListener> list : handlerslots.values()) {    for (ListIterator<RegisteredListener> i=list.listIterator(); i.hasNext(); ) {      if (i.next().getPlugin().equals(plugin)) {        i.remove();        changed=true;      }    }  }  if (changed)   handlers=null;}  }
class C{  @Override public boolean containsKey(Object key){  return parent.containsKey(key);}  }
class C{  public void runTest() throws Throwable {  String publicId="http://www.example.com/";  String systemId="myDoc.dtd";  String qualifiedName;  DocumentType docType=null;  DOMImplementation domImpl;  domImpl=getImplementation();{    boolean success=false;    try {      docType=domImpl.createDocumentType("",publicId,systemId);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INVALID_CHARACTER_ERR);    }    assertTrue("throw_INVALID_CHARACTER_ERR",success);  }}  }
class C{  public boolean isChangeNumberEnabled(){  return config.isComputeChangeNumber();}  }
class C{  public void makeImmutable(){  if (isMutable) {    if (assertions != null) {      int length=assertions.size();      for (int i=0; i < length; i++) {        Assertion assertion=(Assertion)assertions.get(i);        assertion.makeImmutable();      }      assertions=Collections.unmodifiableList(assertions);    }    if (encryptedAssertions != null) {      encryptedAssertions=Collections.unmodifiableList(encryptedAssertions);    }    if (assertionIDRefs != null) {      int length=assertionIDRefs.size();      for (int i=0; i < length; i++) {        AssertionIDRef assertionIDRef=(AssertionIDRef)assertionIDRefs.get(i);        assertionIDRef.makeImmutable();      }      assertionIDRefs=Collections.unmodifiableList(assertionIDRefs);    }    if (assertionURIRefs != null) {      assertionURIRefs=Collections.unmodifiableList(assertionURIRefs);    }    if (additionalInfo != null) {      additionalInfo=Collections.unmodifiableList(additionalInfo);    }    isMutable=false;  }}  }
class C{  public String[] listChildren(InstantiableRelationDefinition<?,?> d){  validateRelationDefinition(d);  return serverContext.listManagedObjects(path,d);}  }
class C{  static public void assertEquals(String message,byte expected,byte actual){  assertEquals(message,new Byte(expected),new Byte(actual));}  }
class C{  public boolean isFocusTraversable(){  return false;}  }
class C{  public static void sleep(long ms){  try {    Thread.sleep(ms);  } catch (  InterruptedException e) {  }}  }
class C{  public JobMediaSheetsSupported(int lowerBound,int upperBound){  super(lowerBound,upperBound);  if (lowerBound > upperBound) {    throw new IllegalArgumentException("Null range specified");  } else   if (lowerBound < 0) {    throw new IllegalArgumentException("Job K octets value < 0 specified");  }}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.AddressElement createAddressElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.AddressElementImpl();}  }
class C{  public PreferenceChangeEvent(Preferences node,String key,String newValue){  super(node);  this.key=key;  this.newValue=newValue;}  }
class C{  @Override public void body(String namespace,String name,String bodyText) throws Exception {  if (attributeName == null && !fromStack) {    if (bodyTextStack == null) {      bodyTextStack=new ArrayStack<>();    }    bodyTextStack.push(bodyText.trim());  }}  }
class C{  private int executeCompare(LDAPConnection connection,String attributeType,byte[] attributeVal,String line,LDAPCompareOptions compareOptions) throws IOException, LDAPException {  ArrayList<Control> controls=compareOptions.getControls();  ByteString dnOctetStr=ByteString.valueOfUtf8(line);  ByteString attrValOctetStr=ByteString.wrap(attributeVal);  ProtocolOp protocolOp=new CompareRequestProtocolOp(dnOctetStr,attributeType,attrValOctetStr);  if (!isScriptFriendly()) {    out.println(INFO_PROCESSING_COMPARE_OPERATION.get(attributeType,attrValOctetStr,dnOctetStr));  }  if (!compareOptions.showOperations()) {    LDAPMessage responseMessage=null;    try {      LDAPMessage message=new LDAPMessage(nextMessageID.getAndIncrement(),protocolOp,controls);      connection.getLDAPWriter().writeMessage(message);      responseMessage=connection.getLDAPReader().readMessage();    } catch (    DecodeException ae) {      if (!compareOptions.continueOnError()) {        String message=LDAPToolUtils.getMessageForConnectionException(ae);        throw new IOException(message,ae);      } else {        printWrappedText(err,INFO_OPERATION_FAILED.get("COMPARE"));        printWrappedText(err,ae.getMessage());        return OPERATIONS_ERROR;      }    }    CompareResponseProtocolOp op=responseMessage.getCompareResponseProtocolOp();    int resultCode=op.getResultCode();    LocalizableMessage errorMessage=op.getErrorMessage();    if (resultCode != COMPARE_TRUE && resultCode != COMPARE_FALSE && !compareOptions.continueOnError()) {      LocalizableMessage msg=INFO_OPERATION_FAILED.get("COMPARE");      throw new LDAPException(resultCode,errorMessage,msg,op.getMatchedDN(),null);    } else {      if (resultCode == COMPARE_FALSE) {        if (isScriptFriendly()) {          out.println(line + ": " + COMPARE_FALSE);        } else {          out.println(INFO_COMPARE_OPERATION_RESULT_FALSE.get(line));        }      } else       if (resultCode == COMPARE_TRUE) {        if (isScriptFriendly()) {          out.println(line + ": " + COMPARE_TRUE);        } else {          out.println(INFO_COMPARE_OPERATION_RESULT_TRUE.get(line));        }      } else {        LocalizableMessage msg=INFO_OPERATION_FAILED.get("COMPARE");        LDAPToolUtils.printErrorMessage(err,msg,resultCode,errorMessage,op.getMatchedDN());      }    }    return resultCode;  }  return SUCCESS;}  }
class C{  @AfterClass public static void cleanupClass(){  try {    Misc.deleteDirectorySimple(scenario.getRepositoryLocation());  } catch (  Exception ignore) {    System.err.println("cannot remove " + scenario.getRepositoryLocation());  }}  }
class C{  public StringBuilder encodeBody(StringBuilder buffer){  return buffer.append(optionTag);}  }
class C{  public final void writeBoolean(boolean val) throws IOException {  write(val ? 1 : 0);}  }
class C{  private void printRouteList(){  if (logger.isLoggingEnabled(LogWriter.TRACE_DEBUG)) {    logger.logDebug("this : " + this);    logger.logDebug("printRouteList : " + this.routeList.encode());  }}  }
class C{  @SuppressWarnings("unchecked") private Segment<K,V> ensureSegment(int k){  final Segment<K,V>[] ss=this.segments;  long u=(k << SSHIFT) + SBASE;  Segment<K,V> seg;  if ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {    Segment<K,V> proto=ss[0];    int cap=proto.table.length;    float lf=proto.loadFactor;    int threshold=(int)(cap * lf);    HashEntry<K,V>[] tab=(HashEntry<K,V>[])new HashEntry<?,?>[cap];    if ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {      Segment<K,V> s=new Segment<K,V>(lf,threshold,tab);      while ((seg=(Segment<K,V>)UNSAFE.getObjectVolatile(ss,u)) == null) {        if (UNSAFE.compareAndSwapObject(ss,u,null,seg=s))         break;      }    }  }  return seg;}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  if (bean == null || attribute == null) {    throw new BuildException("Must specify 'bean' and 'attribute' attributes");  }  log("Getting attribute " + attribute + " in bean "+ bean);  try {    execute("/jmxproxy/?get=" + URLEncoder.encode(bean,getCharset()) + "&att="+ URLEncoder.encode(attribute,getCharset()));  } catch (  UnsupportedEncodingException e) {    throw new BuildException("Invalid 'charset' attribute: " + getCharset());  }}  }
class C{  private static synchronized boolean isUpdatePending(){  return updatePending;}  }
class C{  public void write(OutputStream out,Document doc,int pos,int len) throws IOException, BadLocationException {  OutputStreamWriter osw=new OutputStreamWriter(out);  write(osw,doc,pos,len);  osw.flush();}  }
class C{  public void addAttribute(String uri,String localName,String qName,String type,String value){  ensureCapacity(length + 1);  data[length * 5]=uri;  data[length * 5 + 1]=localName;  data[length * 5 + 2]=qName;  data[length * 5 + 3]=type;  data[length * 5 + 4]=value;  length++;}  }
class C{  public static boolean isValid(int c){  return (c < 0x10000 && (CHARS[c] & MASK_VALID) != 0) || (0x10000 <= c && c <= 0x10FFFF);}  }
class C{  public void logError(String message){  Logger logger=this.getLogger();  String newMsg=this.enhanceMessage(message);  countLines(newMsg);  logger.error(newMsg);}  }
class C{  public void makeCurrent(EGLSurface drawSurface,EGLSurface readSurface){  if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {    Log.d(TAG,"NOTE: makeCurrent w/o display");  }  if (!EGL14.eglMakeCurrent(mEGLDisplay,drawSurface,readSurface,mEGLContext)) {    throw new RuntimeException("eglMakeCurrent(draw,read) failed");  }}  }
class C{  public boolean isBefore(Year other){  return year < other.year;}  }
class C{  public void testGetInstance02() throws NoSuchAlgorithmException, NoSuchProviderException, IllegalArgumentException, InvalidAlgorithmParameterException {  try {    AlgorithmParameterGenerator.getInstance(null,mProv.getName());    fail("NullPointerException or NoSuchAlgorithmException should be thrown");  } catch (  NullPointerException e) {  }catch (  NoSuchAlgorithmException e) {  }  for (int i=0; i < invalidValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(invalidValues[i],mProv.getName());      fail("NoSuchAlgorithmException must be thrown (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    NoSuchAlgorithmException e) {    }  }  String prov=null;  for (int i=0; i < validValues.length; i++) {    try {      AlgorithmParameterGenerator.getInstance(validValues[i],prov);      fail("IllegalArgumentException must be thrown when provider is null (algorithm: ".concat(invalidValues[i]).concat(")"));    } catch (    IllegalArgumentException e) {    }  }  for (int i=0; i < validValues.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        AlgorithmParameterGenerator.getInstance(validValues[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(invalidValues[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }  AlgorithmParameterGenerator apG;  for (int i=0; i < validValues.length; i++) {    apG=AlgorithmParameterGenerator.getInstance(validValues[i],mProv.getName());    assertEquals("Incorrect algorithm",apG.getAlgorithm(),validValues[i]);    assertEquals("Incorrect provider",apG.getProvider().getName(),mProv.getName());    checkResult(apG);  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.TokenType createTokenType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.TokenTypeImpl();}  }
class C{  public void removeTag(){  if (parameters != null)   parameters.delete(ParameterNames.TAG);}  }
class C{  public ArrayIndexOutOfBoundsException(String s){  super(s);}  }
class C{  public void truncate(long length) throws SerialException {  isValid();  if (length > len) {    throw new SerialException("Length more than what can be truncated");  } else {    len=length;    if (len == 0) {      buf=new char[]{};    } else {      buf=(this.getSubString(1,(int)len)).toCharArray();    }  }}  }
class C{  public void testUnscaledValue(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=100;  BigInteger bNumber=new BigInteger(a);  BigDecimal aNumber=new BigDecimal(bNumber,aScale);  assertTrue("incorrect unscaled value",aNumber.unscaledValue().equals(bNumber));}  }
class C{  public void insert_reference(org.omg.CORBA.Object value) throws org.omg.DynamicAny.DynAnyPackage.TypeMismatch, org.omg.DynamicAny.DynAnyPackage.InvalidValue {  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("insert_reference",_opsClass);  DynStructOperations $self=(DynStructOperations)$so.servant;  try {    $self.insert_reference(value);  }  finally {    _servant_postinvoke($so);  }}  }
class C{  public ObjectFactory(){  super(grammarInfo);}  }
class C{  public void beginMonitoringOf(final InetAddress inetAddress,final int inode){  final long socketIdentifier=fromInet4AddressAndInode(inetAddress,inode);  candidateSockets.beginMonitoringSocketIdentifier(new InetSocketAddress(inetAddress,0),socketIdentifier);}  }
class C{  @NonNull public Parcelable onSaveInstanceState(){  Bundle bundle=new Bundle();  bundle.putInt(SAVEDINSTANCESTATE_FIRSTANIMATEDPOSITION,mFirstAnimatedPosition);  bundle.putInt(SAVEDINSTANCESTATE_LASTANIMATEDPOSITION,mLastAnimatedPosition);  bundle.putBoolean(SAVEDINSTANCESTATE_SHOULDANIMATE,mShouldAnimate);  return bundle;}  }
class C{  void clearGenerationId(final DN domainDN) throws ChangelogException {synchronized (domainsLock) {    final String domainId=domains.get(domainDN);    if (domainId == null) {      return;    }    final File idFile=retrieveGenerationIdFile(getDomainPath(domainId));    if (idFile != null) {      final boolean isDeleted=idFile.delete();      if (!isDeleted) {        throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_DELETE_GENERATION_ID_FILE.get(idFile.getPath(),domainDN.toString()));      }    }    changelogState.setDomainGenerationId(domainDN,NO_GENERATION_ID);  }}  }
class C{  public byte[] signBuffer(java.lang.String data,java.lang.String certAlias) throws FSSignatureException {  return sp.signBuffer(data,certAlias);}  }
class C{  private void addBlockAtOffset(int offset){  final int line=getLineForOffset(offset);  if (mBlockEndLines == null) {    mBlockEndLines=ArrayUtils.newUnpaddedIntArray(1);    mBlockEndLines[mNumberOfBlocks]=line;    mNumberOfBlocks++;    return;  }  final int previousBlockEndLine=mBlockEndLines[mNumberOfBlocks - 1];  if (line > previousBlockEndLine) {    mBlockEndLines=GrowingArrayUtils.append(mBlockEndLines,mNumberOfBlocks,line);    mNumberOfBlocks++;  }}  }
class C{  public int compareTo(XMLString xstr){  int len1=this.length();  int len2=xstr.length();  int n=Math.min(len1,len2);  int i=0;  int j=0;  while (n-- != 0) {    char c1=this.charAt(i);    char c2=xstr.charAt(j);    if (c1 != c2) {      return c1 - c2;    }    i++;    j++;  }  return len1 - len2;}  }
class C{  public synchronized void write(byte b[],int off,int len) throws IOException {  if (len >= buf.length) {    flushBuffer();    out.write(b,off,len);    return;  }  if (len > buf.length - count) {    flushBuffer();  }  System.arraycopy(b,off,buf,count,len);  count+=len;}  }
class C{  boolean aboutEquals(float moduleSize,float i,float j){  if (Math.abs(i - getY()) <= moduleSize && Math.abs(j - getX()) <= moduleSize) {    float moduleSizeDiff=Math.abs(moduleSize - estimatedModuleSize);    return moduleSizeDiff <= 1.0f || moduleSizeDiff <= estimatedModuleSize;  }  return false;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  public SAXNotSupportedException(){  super();}  }
class C{  public boolean contains(int value){  Entry[] tab=table;  for (int i=tab.length; i-- > 0; ) {    for (Entry e=tab[i]; e != null; e=e.next) {      if (e.value == value) {        return true;      }    }  }  return false;}  }
class C{  @Override public void flush(){  Logger logger=LoggerFactory.getLogger(PdfDocument.class);  logger.warn("PdfCatalog cannot be flushed manually");}  }
class C{  public static String composeArrayItemPath(String arrayName,int itemIndex) throws XMPException {  if (itemIndex > 0) {    return arrayName + '[' + itemIndex+ ']';  } else   if (itemIndex == XMPConst.ARRAY_LAST_ITEM) {    return arrayName + "[last()]";  } else {    throw new XMPException("Array index must be larger than zero",XMPError.BADINDEX);  }}  }
class C{  private void initStreamOutput() throws SAXException {  boolean firstElementIsHTML=isFirstElemHTML();  if (firstElementIsHTML) {    SerializationHandler oldHandler=m_handler;    Properties htmlProperties=OutputPropertiesFactory.getDefaultMethodProperties(Method.HTML);    Serializer serializer=SerializerFactory.getSerializer(htmlProperties);    m_handler=(SerializationHandler)serializer;    Writer writer=oldHandler.getWriter();    if (null != writer)     m_handler.setWriter(writer); else {      OutputStream os=oldHandler.getOutputStream();      if (null != os)       m_handler.setOutputStream(os);    }    m_handler.setVersion(oldHandler.getVersion());    m_handler.setDoctypeSystem(oldHandler.getDoctypeSystem());    m_handler.setDoctypePublic(oldHandler.getDoctypePublic());    m_handler.setMediaType(oldHandler.getMediaType());    m_handler.setTransformer(oldHandler.getTransformer());  }  if (m_needToCallStartDocument) {    m_handler.startDocument();    m_needToCallStartDocument=false;  }  m_wrapped_handler_not_initialized=false;}  }
class C{  public boolean modifyData(Object credential,String resourceID,List dstModifications,Map interactedData,Document request) throws IDPPException {  if (credential == null || resourceID == null || dstModifications == null || dstModifications.isEmpty()) {    IDPPUtils.debug.error("PersonalProfile:modifyData:null input");    throw new IDPPException(IDPPUtils.bundle.getString("nullInputParamters"));  }  boolean sessionValid=false;  try {    sessionValid=SessionManager.getProvider().isValid(credential);  } catch (  SessionException se) {    IDPPUtils.debug.error("PersonalProfile:modifyData:Invalid WSC" + "credentials",se);  }  if (!sessionValid) {    throw new IDPPException(IDPPUtils.bundle.getString("invalidWSCCredentials"));  }  String userDN=getUserDN(resourceID);  if (userDN == null) {    if (IDPPUtils.debug.messageEnabled()) {      IDPPUtils.debug.message("PersonalProfile: modifyData:userDN" + "is null for a given resourceID.");    }    throw new IDPPException(IDPPUtils.bundle.getString("noResourceID"));  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PersonalProfile:modifyData:userDN =" + userDN);  }  Map modifyMap=new HashMap();  Map binaryAttributeMap=new HashMap();  Iterator iter=dstModifications.iterator();  while (iter.hasNext()) {    DSTModification modification=(DSTModification)iter.next();    String select=modification.getSelect();    boolean override=modification.isOverrideAllowed();    List dataObject=modification.getNewDataValue();    String containerContext=getContainerFromSelect(select);    IDPPContainer container=getIDPPContainer(containerContext,userDN);    if (container == null) {      if (IDPPUtils.debug.messageEnabled()) {        IDPPUtils.debug.message("PersonalProfile:modifyData:" + "The given select expression is not in supported containers");      }      return false;    }    try {      if (!override && IDPPUtils.checkForUserAttributes(userDN,container.getContainerAttributesForSelect(select))) {        if (IDPPUtils.debug.messageEnabled()) {          IDPPUtils.debug.message("PersonalProfile:modifyData:" + "override set to false and data Already exists.");        }        return false;      }      Map map=container.getDataMapForSelect(select,dataObject);      if (container.hasBinaryAttributes()) {        binaryAttributeMap=map;        continue;      }      if (map != null) {        modifyMap.putAll(map);      }      if (interactedData != null && !interactedData.isEmpty()) {        modifyMap=updateUserDataMap(modifyMap,interactedData);      }    } catch (    IDPPException ie) {      IDPPUtils.debug.error("PersonalProfile:modifyData: error while" + "converting the data into a data map.",ie);      return false;    }  }  if (binaryAttributeMap != null && !binaryAttributeMap.isEmpty()) {    try {      IDPPUtils.setUserAttributes(userDN,binaryAttributeMap);    } catch (    Exception ie) {      IDPPUtils.debug.error("PersonalProfile:modifyMap:Error while" + "modifying the user data.",ie);      return false;    }  }  if (modifyMap == null || modifyMap.isEmpty()) {    IDPPUtils.debug.message("PersonalProfile:modifyData:map is null");    if (!binaryAttributeMap.isEmpty()) {      return true;    } else {      return false;    }  }  if (IDPPUtils.debug.messageEnabled()) {    IDPPUtils.debug.message("PersonalProfile:modifyData:data " + "to be modified" + modifyMap);  }  try {    IDPPUtils.setUserAttributes(userDN,modifyMap);    return true;  } catch (  Exception ie) {    IDPPUtils.debug.error("PersonalProfile:modifyMap:Error while" + "modifying the user data.",ie);    return false;  }}  }
class C{  public void write(int c) throws IOException {  m_os.write(c);}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitParameter(name,access);}  }
class C{  ZoneOffsetTransition(long epochSecond,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  this.transition=LocalDateTime.ofEpochSecond(epochSecond,0,offsetBefore);  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  private void checkSchema(Entry parentEntry) throws DirectoryException {  LocalizableMessageBuilder invalidReason=new LocalizableMessageBuilder();  if (!entry.conformsToSchema(parentEntry,true,true,true,invalidReason)) {    throw new DirectoryException(ResultCode.OBJECTCLASS_VIOLATION,invalidReason.toMessage());  }  invalidReason=new LocalizableMessageBuilder();  checkAttributesConformToSyntax(invalidReason,userAttributes);  checkAttributesConformToSyntax(invalidReason,operationalAttributes);  for (  AttributeType at : userAttributes.keySet()) {    if (at.isObsolete()) {      throw newDirectoryException(entryDN,ResultCode.CONSTRAINT_VIOLATION,WARN_ADD_ATTR_IS_OBSOLETE.get(entryDN,at.getNameOrOID()));    }  }  for (  AttributeType at : operationalAttributes.keySet()) {    if (at.isObsolete()) {      throw newDirectoryException(entryDN,ResultCode.CONSTRAINT_VIOLATION,WARN_ADD_ATTR_IS_OBSOLETE.get(entryDN,at.getNameOrOID()));    }  }  for (  ObjectClass oc : objectClasses.keySet()) {    if (oc.isObsolete()) {      throw newDirectoryException(entryDN,ResultCode.CONSTRAINT_VIOLATION,WARN_ADD_OC_IS_OBSOLETE.get(entryDN,oc.getNameOrOID()));    }  }}  }
class C{  public ServerFaultException(final String messageCode,final String detail){  super(null,messageCode,detail);}  }
class C{  public boolean pop_snapshot(){  return undo_items.pop_snapshot();}  }
class C{  private static Class safeLoadClass(String className,ClassLoader classLoader) throws ClassNotFoundException {  try {    SecurityManager s=System.getSecurityManager();    if (s != null) {      int i=className.lastIndexOf('.');      if (i != -1) {        s.checkPackageAccess(className.substring(0,i));      }    }    if (classLoader == null)     return Class.forName(className); else     return classLoader.loadClass(className);  } catch (  SecurityException se) {    if (Provider.DEFAULT_JAXWSPROVIDER.equals(className))     return Class.forName(className);    throw se;  }}  }
class C{  @Override public synchronized boolean addAll(Collection<? extends E> collection){  return addAll(elementCount,collection);}  }
class C{  public final void add(final String problem){  add(problem,Severity.FATAL);}  }
class C{  @Override public Map<String,MappedClass> read(BufferedReader fileReader) throws Exception {  Map<String,MappedClass> remap=new HashMap<String,MappedClass>();  String line=null;  while ((line=fileReader.readLine()) != null) {    if (line.startsWith("CL: ")) {      String className=line.split(" ")[1];      String newClassName=line.split(" ")[2];      if (useNodes && !nodes.containsKey(className)) {        continue;      }      MappedClass mc=new MappedClass(nodes == null ? fakeNode(className) : nodes.get(className),newClassName);      remap.put(className,mc);    } else     if (line.startsWith("FD: ")) {      String s1=line.split(" ")[1], s2=line.split(" ")[2];      String className=s1.substring(0,s1.lastIndexOf('/'));      if (!remap.containsKey(className)) {        continue;      }      String fieldName=s1.substring(s1.lastIndexOf('/') + 1);      String newFieldName=s2.substring(s2.lastIndexOf('/') + 1);      String desc="L" + className + ";";      MappedClass mc=remap.get(className);      Object node=getFieldNode(mc.getNode().fields,fieldName,desc);      MappedMember field=new MappedMember(mc,node,0,desc,fieldName);      field.setNewName(newFieldName);      mc.addField(field);    } else     if (line.startsWith("MD: ")) {      String s1=line.split(" ")[1], desc=line.split(" ")[2], s3=line.split(" ")[3];      String className=s1.substring(0,s1.lastIndexOf('/'));      if (!remap.containsKey(className)) {        continue;      }      String methodName=s1.substring(s1.lastIndexOf('/') + 1);      String newMethodName=s3.substring(s3.lastIndexOf('/') + 1);      MappedClass mc=remap.get(className);      Object node=getMethodNode(mc.getNode().methods,methodName,desc);      MappedMember method=new MappedMember(mc,node,0,desc,methodName);      method.setNewName(newMethodName);      mc.addMethod(method);    }  }  return remap;}  }
class C{  public SiteEntry(String host,int port,String sourceid,String samlUrl,String postUrl,String version){  hostname=host;  portnumber=port;  sid=sourceid;  saml=samlUrl;  post=postUrl;  prefVersion=version;}  }
class C{  SchemaFactory createInstance(String className){  return createInstance(className,false);}  }
class C{  public boolean mkdirs(){  if (exists()) {    return false;  }  if (mkdir()) {    return true;  }  File canonFile=null;  try {    canonFile=getCanonicalFile();  } catch (  IOException e) {    return false;  }  File parent=canonFile.getParentFile();  return (parent != null && (parent.mkdirs() || parent.exists()) && canonFile.mkdir());}  }
class C{  public String transform(String password){  if (AuthnSvcUtils.debug.messageEnabled()) {    AuthnSvcUtils.debug.message("SelectTransform.transform");  }  if (parameters == null || parameters.isEmpty()) {    if (AuthnSvcUtils.debug.warningEnabled()) {      AuthnSvcUtils.debug.warning("SelectTransform.transform: " + "no parameter found");    }    return password;  }  for (Iterator iter=parameters.iterator(); iter.hasNext(); ) {    Parameter parameter=(Parameter)iter.next();    if (parameter.getName().equals(Parameter.NAME_ALLOWED)) {      String allowed=parameter.getValue();      if (AuthnSvcUtils.debug.messageEnabled()) {        AuthnSvcUtils.debug.message("SelectTransform.transform: " + "allowed = " + allowed);      }      if (allowed == null || allowed.length() == 0) {        return "";      }      int pLen=password.length();      StringBuffer resultSB=new StringBuffer(pLen);      for (int i=0; i < pLen; i++) {        char c=password.charAt(i);        if (allowed.indexOf(c) != -1) {          resultSB.append(c);        }      }      return resultSB.toString();    }  }  if (AuthnSvcUtils.debug.warningEnabled()) {    AuthnSvcUtils.debug.warning("SelectTransform.transform: " + "parameter 'allowed' not found");  }  return password;}  }
class C{  @Override public SubjectDecision evaluate(String realm,SubjectAttributesManager mgr,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  boolean satified=false;  if (mgr.isGroupMembershipSearchIndexEnabled()) {    Set publicCreds=subject.getPublicCredentials();    if ((publicCreds != null) && !publicCreds.isEmpty()) {      Map<String,Set<String>> attributes=(Map<String,Set<String>>)publicCreds.iterator().next();      Set<String> values=attributes.get(SubjectAttributesCollector.NAMESPACE_IDENTITY + IdType.GROUP.getName());      String grpID=getID();      if (values != null) {        if (values.contains(grpID)) {          satified=true;        } else {          try {            SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());            AMIdentity idGroup=IdUtils.getIdentity(adminToken,grpID);            for (            String value : values) {              AMIdentity amgrp=IdUtils.getIdentity(adminToken,value);              if (idGroup.equals(amgrp)) {                satified=true;                break;              }            }          } catch (          IdRepoException e) {            PrivilegeManager.debug.error("GroupSubject.evaluate",e);          }        }      }    }  } else {    try {      SSOToken adminToken=(SSOToken)AccessController.doPrivileged(AdminTokenAction.getInstance());      AMIdentity idGroup=IdUtils.getIdentity(adminToken,getID());      Set<IdType> supportedType=IdType.GROUP.canHaveMembers();      for (      IdType type : supportedType) {        if (isMember(subject,type,idGroup)) {          satified=true;          break;        }      }    } catch (    IdRepoException e) {      PrivilegeManager.debug.error("GroupSubject.evaluate",e);    }catch (    SSOException e) {      PrivilegeManager.debug.error("GroupSubject.evaluate",e);    }  }  return new SubjectDecision(satified,Collections.EMPTY_MAP);}  }
class C{  public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  private void processCollectiveAttributes(){  if (isSubentry() || isLDAPSubentry()) {    return;  }  SubentryManager manager=DirectoryServer.getSubentryManager();  if (manager == null) {    return;  }  List<SubEntry> collectiveAttrSubentries=manager.getCollectiveSubentries(this);  if (collectiveAttrSubentries == null || collectiveAttrSubentries.isEmpty()) {    return;  }  AttributeType exclusionsType=DirectoryServer.getSchema().getAttributeType(ATTR_COLLECTIVE_EXCLUSIONS_LC);  List<Attribute> exclusionsAttrList=operationalAttributes.get(exclusionsType);  List<String> excludedAttrNames=new ArrayList<>();  if (exclusionsAttrList != null && !exclusionsAttrList.isEmpty()) {    for (    Attribute attr : exclusionsAttrList) {      for (      ByteString attrValue : attr) {        String excludedAttrName=attrValue.toString().toLowerCase();        if (VALUE_COLLECTIVE_EXCLUSIONS_EXCLUDE_ALL_LC.equals(excludedAttrName) || OID_COLLECTIVE_EXCLUSIONS_EXCLUDE_ALL.equals(excludedAttrName)) {          return;        }        excludedAttrNames.add(excludedAttrName);      }    }  }  for (  SubEntry subEntry : collectiveAttrSubentries) {    if (subEntry.isCollective() || subEntry.isInheritedCollective()) {      Entry inheritFromEntry=null;      if (subEntry.isInheritedCollective()) {        if (subEntry.isInheritedFromDNCollective() && hasAttribute(subEntry.getInheritFromDNType())) {          try {            DN inheritFromDN=null;            for (            Attribute attr : getAllAttributes(subEntry.getInheritFromDNType())) {              for (              ByteString value : attr) {                inheritFromDN=DN.valueOf(value);                if (!inheritFromDN.isSubordinateOrEqualTo(subEntry.getDN().parent())) {                  inheritFromDN=null;                }                break;              }            }            if (inheritFromDN == null) {              continue;            }            inheritFromEntry=DirectoryServer.getEntry(inheritFromDN);          } catch (          DirectoryException de) {            logger.traceException(de);          }        } else         if (subEntry.isInheritedFromRDNCollective() && hasAttribute(subEntry.getInheritFromRDNAttrType())) {          DN inheritFromDN=subEntry.getInheritFromBaseDN();          if (inheritFromDN != null) {            try {              for (              Attribute attr : getAllAttributes(subEntry.getInheritFromRDNAttrType())) {                inheritFromDN=subEntry.getInheritFromBaseDN();                for (                ByteString value : attr) {                  inheritFromDN=inheritFromDN.child(new RDN(subEntry.getInheritFromRDNType(),value));                  break;                }              }              inheritFromEntry=DirectoryServer.getEntry(inheritFromDN);            } catch (            DirectoryException de) {              logger.traceException(de);            }          } else {            continue;          }        }      }      List<Attribute> collectiveAttrList=subEntry.getCollectiveAttributes();      for (      Attribute collectiveAttr : collectiveAttrList) {        AttributeType attributeType=collectiveAttr.getAttributeDescription().getAttributeType();        if (hasAnyNameOrOID(attributeType,excludedAttrNames)) {          continue;        }        if (subEntry.isInheritedCollective()) {          if (inheritFromEntry != null) {            collectiveAttr=inheritFromEntry.getAttribute(collectiveAttr.getAttributeDescription());            if (collectiveAttr == null || collectiveAttr.isEmpty()) {              continue;            }            collectiveAttr=new CollectiveVirtualAttribute(collectiveAttr);          } else {            continue;          }        }        List<Attribute> attrList=userAttributes.get(attributeType);        if (attrList == null || attrList.isEmpty()) {          attrList=operationalAttributes.get(attributeType);          if (attrList == null || attrList.isEmpty()) {            putAttributes(attributeType,newLinkedList(collectiveAttr));          } else {            resolveCollectiveConflict(subEntry.getConflictBehavior(),collectiveAttr,attrList,operationalAttributes,attributeType);          }        } else {          resolveCollectiveConflict(subEntry.getConflictBehavior(),collectiveAttr,attrList,userAttributes,attributeType);        }      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  boolean state;  doc=(Document)load("hc_staff",true);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(2);  ((Element)testNode).setAttribute("class","Y\u03b1");  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("class");  state=streetAttr.getSpecified();  assertTrue("acronymClassSpecified",state);}  }
class C{  public static boolean isLocalHost(String host){  if ("localhost".equalsIgnoreCase(host)) {    return true;  }  try {    InetAddress localAddress=InetAddress.getLocalHost();    InetAddress[] addresses=InetAddress.getAllByName(host);    for (    InetAddress address : addresses) {      if (localAddress.equals(address)) {        return true;      }    }  } catch (  Throwable t) {    logger.warn(LocalizableMessage.raw("Failing checking host names: " + t,t));  }  return false;}  }
class C{  public void runFullUpdate(){  debugInfo("Broker " + serverId + " initializer starting sending entries to server "+ destId);  for (long i=0; i < nEntries; i++) {    EntryMsg entryMsg=createNextEntryMsg();    rb.publish(entryMsg);  }  debugInfo("Broker " + serverId + " initializer stopping sending entries");  debugInfo("Broker " + serverId + " initializer sending EntryDoneMsg");  DoneMsg doneMsg=new DoneMsg(serverId,destId);  rb.publish(doneMsg);  if (createReader) {    shutdown(reader);  }  debugInfo("Broker " + serverId + " initializer thread is dying");}  }
class C{  private void handleDraggedViews(AmbientState ambientState,StackScrollState resultState,StackScrollAlgorithmState algorithmState){  ArrayList<View> draggedViews=ambientState.getDraggedViews();  for (  View draggedView : draggedViews) {    int childIndex=algorithmState.visibleChildren.indexOf(draggedView);    if (childIndex >= 0 && childIndex < algorithmState.visibleChildren.size() - 1) {      View nextChild=algorithmState.visibleChildren.get(childIndex + 1);      if (!draggedViews.contains(nextChild)) {        StackScrollState.ViewState viewState=resultState.getViewStateForView(nextChild);        viewState.alpha=1;      }      StackScrollState.ViewState viewState=resultState.getViewStateForView(draggedView);      viewState.alpha=draggedView.getAlpha();    }  }}  }
class C{  @Deprecated public URL toURL() throws MalformedURLException {  if (isInvalid()) {    throw new MalformedURLException("Invalid file path");  }  return new URL("file","",slashify(getAbsolutePath(),isDirectory()));}  }
class C{  public CrlClientOnline(URL... crls){  for (  URL url : urls) {    addUrl(url);  }}  }
class C{  public PipedInputStream(PipedOutputStream src,int pipeSize) throws IOException {  initPipe(pipeSize);  connect(src);}  }
class C{  @Override public Foo fetchByUUID_G(String uuid,long groupId,boolean retrieveFromCache){  Object[] finderArgs=new Object[]{uuid,groupId};  Object result=null;  if (retrieveFromCache) {    result=finderCache.getResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,this);  }  if (result instanceof Foo) {    Foo foo=(Foo)result;    if (!Objects.equals(uuid,foo.getUuid()) || (groupId != foo.getGroupId())) {      result=null;    }  }  if (result == null) {    StringBundler query=new StringBundler(4);    query.append(_SQL_SELECT_FOO_WHERE);    boolean bindUuid=false;    if (uuid == null) {      query.append(_FINDER_COLUMN_UUID_G_UUID_1);    } else     if (uuid.equals(StringPool.BLANK)) {      query.append(_FINDER_COLUMN_UUID_G_UUID_3);    } else {      bindUuid=true;      query.append(_FINDER_COLUMN_UUID_G_UUID_2);    }    query.append(_FINDER_COLUMN_UUID_G_GROUPID_2);    String sql=query.toString();    Session session=null;    try {      session=openSession();      Query q=session.createQuery(sql);      QueryPos qPos=QueryPos.getInstance(q);      if (bindUuid) {        qPos.add(uuid);      }      qPos.add(groupId);      List<Foo> list=q.list();      if (list.isEmpty()) {        finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,list);      } else {        Foo foo=list.get(0);        result=foo;        cacheResult(foo);        if ((foo.getUuid() == null) || !foo.getUuid().equals(uuid) || (foo.getGroupId() != groupId)) {          finderCache.putResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs,foo);        }      }    } catch (    Exception e) {      finderCache.removeResult(FINDER_PATH_FETCH_BY_UUID_G,finderArgs);      throw processException(e);    } finally {      closeSession(session);    }  }  if (result instanceof List<?>) {    return null;  } else {    return (Foo)result;  }}  }
class C{  public void write(Tag tag,RandomAccessFile raf,RandomAccessFile rafTemp) throws CannotWriteException, IOException {  logger.config("Started writing tag data");  FileChannel fileReadChannel=raf.getChannel();  FileChannel fileWriteChannel=rafTemp.getChannel();  int oldIlstSize=0;  int relativeIlstposition;  int startIlstWithinFile;  int newIlstSize;  int oldMetaLevelFreeAtomSize;  int topLevelFreePosition;  int topLevelFreeSize;  long endOfMoov=0;  boolean topLevelFreeAtomComesBeforeMdatAtomAndAfterMetadata;  boolean topLevelFreeAtomComesBeforeMdatAndMetadata;  Mp4BoxHeader topLevelFreeHeader;  Mp4AtomTree atomTree;  try {    atomTree=new Mp4AtomTree(raf,false);  } catch (  CannotReadException cre) {    throw new CannotWriteException(cre.getMessage());  }  Mp4BoxHeader mdatHeader=atomTree.getBoxHeader(atomTree.getMdatNode());  if (mdatHeader == null) {    throw new CannotWriteException(ErrorMessage.MP4_CHANGES_TO_FILE_FAILED_CANNOT_FIND_AUDIO.getMsg());  }  ByteBuffer rawIlstData=tc.convert(tag);  rawIlstData.rewind();  newIlstSize=rawIlstData.limit();  Mp4BoxHeader moovHeader=atomTree.getBoxHeader(atomTree.getMoovNode());  long positionWithinFileAfterFindingMoovHeader=moovHeader.getFilePos() + Mp4BoxHeader.HEADER_LENGTH;  endOfMoov=moovHeader.getFilePos() + moovHeader.getLength();  Mp4StcoBox stco=atomTree.getStco();  Mp4BoxHeader ilstHeader=atomTree.getBoxHeader(atomTree.getIlstNode());  Mp4BoxHeader udtaHeader=atomTree.getBoxHeader(atomTree.getUdtaNode());  Mp4BoxHeader metaHeader=atomTree.getBoxHeader(atomTree.getMetaNode());  Mp4BoxHeader hdlrMetaHeader=atomTree.getBoxHeader(atomTree.getHdlrWithinMetaNode());  Mp4BoxHeader tagsHeader=atomTree.getBoxHeader(atomTree.getTagsNode());  Mp4BoxHeader trakHeader=atomTree.getBoxHeader(atomTree.getTrakNodes().get(0));  ByteBuffer moovBuffer=atomTree.getMoovBuffer();  if (udtaHeader != null) {    if (metaHeader != null) {      if (ilstHeader != null) {        oldIlstSize=ilstHeader.getLength();        startIlstWithinFile=(int)ilstHeader.getFilePos();        relativeIlstposition=(int)(startIlstWithinFile - (moovHeader.getFilePos() + Mp4BoxHeader.HEADER_LENGTH));      } else {        if (hdlrMetaHeader != null) {          startIlstWithinFile=(int)hdlrMetaHeader.getFilePos() + hdlrMetaHeader.getLength();          relativeIlstposition=(int)(startIlstWithinFile - (moovHeader.getFilePos() + Mp4BoxHeader.HEADER_LENGTH));        } else {          startIlstWithinFile=(int)metaHeader.getFilePos() + Mp4BoxHeader.HEADER_LENGTH + Mp4MetaBox.FLAGS_LENGTH;          relativeIlstposition=(int)((startIlstWithinFile) - (moovHeader.getFilePos() + Mp4BoxHeader.HEADER_LENGTH));        }      }    } else {      relativeIlstposition=moovHeader.getLength() - Mp4BoxHeader.HEADER_LENGTH;      startIlstWithinFile=(int)(moovHeader.getFilePos() + moovHeader.getLength());    }  } else {    if (metaHeader != null) {      startIlstWithinFile=(int)trakHeader.getFilePos() + trakHeader.getLength();      relativeIlstposition=(int)(startIlstWithinFile - (moovHeader.getFilePos() + Mp4BoxHeader.HEADER_LENGTH));    } else {      relativeIlstposition=moovHeader.getLength() - Mp4BoxHeader.HEADER_LENGTH;      startIlstWithinFile=(int)(moovHeader.getFilePos() + moovHeader.getLength());    }  }  oldMetaLevelFreeAtomSize=getMetaLevelFreeAtomSize(atomTree);  topLevelFreePosition=0;  topLevelFreeSize=0;  topLevelFreeAtomComesBeforeMdatAtomAndAfterMetadata=true;  topLevelFreeAtomComesBeforeMdatAndMetadata=false;  for (  DefaultMutableTreeNode freeNode : atomTree.getFreeNodes()) {    DefaultMutableTreeNode parentNode=(DefaultMutableTreeNode)freeNode.getParent();    if (parentNode.isRoot()) {      topLevelFreeHeader=((Mp4BoxHeader)freeNode.getUserObject());      topLevelFreeSize=topLevelFreeHeader.getLength();      topLevelFreePosition=(int)topLevelFreeHeader.getFilePos();      break;    }  }  if (topLevelFreeSize > 0) {    if (topLevelFreePosition > mdatHeader.getFilePos()) {      topLevelFreeAtomComesBeforeMdatAtomAndAfterMetadata=false;    } else     if (topLevelFreePosition < moovHeader.getFilePos()) {      topLevelFreeAtomComesBeforeMdatAtomAndAfterMetadata=false;      topLevelFreeAtomComesBeforeMdatAndMetadata=true;    }  } else {    topLevelFreePosition=(int)mdatHeader.getFilePos();  }  logger.config("Read header successfully ready for writing");  if (oldIlstSize == newIlstSize) {    logger.config("Writing:Option 1:Same Size");    writeMetadataSameSize(rawIlstData,oldIlstSize,startIlstWithinFile,fileReadChannel,fileWriteChannel,tagsHeader);  } else   if (oldIlstSize > newIlstSize) {    if (oldMetaLevelFreeAtomSize > 0) {      logger.config("Writing:Option 2:Smaller Size have free atom:" + oldIlstSize + ":"+ newIlstSize);      writeDataUptoIncludingIlst(fileReadChannel,fileWriteChannel,oldIlstSize,startIlstWithinFile,rawIlstData);      int newFreeSize=oldMetaLevelFreeAtomSize + (oldIlstSize - newIlstSize);      Mp4FreeBox newFreeBox=new Mp4FreeBox(newFreeSize - Mp4BoxHeader.HEADER_LENGTH);      fileWriteChannel.write(newFreeBox.getHeader().getHeaderData());      fileWriteChannel.write(newFreeBox.getData());      fileReadChannel.position(fileReadChannel.position() + oldMetaLevelFreeAtomSize);      writeDataAfterIlst(fileReadChannel,fileWriteChannel,tagsHeader);    } else {      int newFreeSize=(oldIlstSize - newIlstSize) - Mp4BoxHeader.HEADER_LENGTH;      if (newFreeSize > 0) {        logger.config("Writing:Option 3:Smaller Size can create free atom");        writeDataUptoIncludingIlst(fileReadChannel,fileWriteChannel,oldIlstSize,startIlstWithinFile,rawIlstData);        Mp4FreeBox newFreeBox=new Mp4FreeBox(newFreeSize);        fileWriteChannel.write(newFreeBox.getHeader().getHeaderData());        fileWriteChannel.write(newFreeBox.getData());        writeDataAfterIlst(fileReadChannel,fileWriteChannel,tagsHeader);      } else {        logger.config("Writing:Option 4:Smaller Size <=8 cannot create free atoms");        int sizeReducedBy=oldIlstSize - newIlstSize;        fileReadChannel.position(0);        fileWriteChannel.transferFrom(fileReadChannel,0,moovHeader.getFilePos());        fileWriteChannel.position(moovHeader.getFilePos());        if (mdatHeader.getFilePos() > moovHeader.getFilePos()) {          stco.adjustOffsets(-sizeReducedBy);        }        adjustSizeOfMoovHeader(moovHeader,moovBuffer,-sizeReducedBy,udtaHeader,metaHeader);        fileWriteChannel.write(moovHeader.getHeaderData());        moovBuffer.rewind();        moovBuffer.limit(relativeIlstposition);        fileWriteChannel.write(moovBuffer);        fileWriteChannel.write(rawIlstData);        fileReadChannel.position(startIlstWithinFile + oldIlstSize);        writeDataAfterIlst(fileReadChannel,fileWriteChannel,tagsHeader);      }    }  } else {    int additionalSpaceRequiredForMetadata=newIlstSize - oldIlstSize;    if (additionalSpaceRequiredForMetadata <= (oldMetaLevelFreeAtomSize - Mp4BoxHeader.HEADER_LENGTH)) {      int newFreeSize=oldMetaLevelFreeAtomSize - (additionalSpaceRequiredForMetadata);      logger.config("Writing:Option 5;Larger Size can use meta free atom need extra:" + newFreeSize + "bytes");      writeDataUptoIncludingIlst(fileReadChannel,fileWriteChannel,oldIlstSize,startIlstWithinFile,rawIlstData);      Mp4FreeBox newFreeBox=new Mp4FreeBox(newFreeSize - Mp4BoxHeader.HEADER_LENGTH);      fileWriteChannel.write(newFreeBox.getHeader().getHeaderData());      fileWriteChannel.write(newFreeBox.getData());      fileReadChannel.position(fileReadChannel.position() + oldMetaLevelFreeAtomSize);      writeDataAfterIlst(fileReadChannel,fileWriteChannel,tagsHeader);    } else {      int additionalMetaSizeThatWontFitWithinMetaAtom=additionalSpaceRequiredForMetadata - (oldMetaLevelFreeAtomSize);      fileReadChannel.position(0);      fileWriteChannel.transferFrom(fileReadChannel,0,positionWithinFileAfterFindingMoovHeader - Mp4BoxHeader.HEADER_LENGTH);      fileWriteChannel.position(positionWithinFileAfterFindingMoovHeader - Mp4BoxHeader.HEADER_LENGTH);      if (udtaHeader == null) {        logger.config("Writing:Option 5.1;No udta atom");        Mp4HdlrBox hdlrBox=Mp4HdlrBox.createiTunesStyleHdlrBox();        Mp4MetaBox metaBox=Mp4MetaBox.createiTunesStyleMetaBox(hdlrBox.getHeader().getLength() + rawIlstData.limit());        udtaHeader=new Mp4BoxHeader(Mp4AtomIdentifier.UDTA.getFieldName());        udtaHeader.setLength(Mp4BoxHeader.HEADER_LENGTH + metaBox.getHeader().getLength());        additionalMetaSizeThatWontFitWithinMetaAtom=additionalMetaSizeThatWontFitWithinMetaAtom + (udtaHeader.getLength() - rawIlstData.limit());        if ((!topLevelFreeAtomComesBeforeMdatAtomAndAfterMetadata) || ((topLevelFreeSize - Mp4BoxHeader.HEADER_LENGTH < additionalMetaSizeThatWontFitWithinMetaAtom) && (topLevelFreeSize != additionalMetaSizeThatWontFitWithinMetaAtom))) {          if (mdatHeader.getFilePos() > moovHeader.getFilePos()) {            logger.config("Adjusting Offsets");            stco.adjustOffsets(additionalMetaSizeThatWontFitWithinMetaAtom);          }        }        moovHeader.setLength(moovHeader.getLength() + additionalMetaSizeThatWontFitWithinMetaAtom);        fileWriteChannel.write(moovHeader.getHeaderData());        moovBuffer.rewind();        moovBuffer.limit(relativeIlstposition);        fileWriteChannel.write(moovBuffer);        fileWriteChannel.write(udtaHeader.getHeaderData());        fileWriteChannel.write(metaBox.getHeader().getHeaderData());        fileWriteChannel.write(metaBox.getData());        fileWriteChannel.write(hdlrBox.getHeader().getHeaderData());        fileWriteChannel.write(hdlrBox.getData());      } else       if (metaHeader == null) {        logger.config("Writing:Option 5.2;No meta atom");        int oldUdtaHeaderLength=udtaHeader.getLength();        Mp4HdlrBox hdlrBox=Mp4HdlrBox.createiTunesStyleHdlrBox();        Mp4MetaBox metaBox=Mp4MetaBox.createiTunesStyleMetaBox(hdlrBox.getHeader().getLength() + rawIlstData.limit());        udtaHeader=new Mp4BoxHeader(Mp4AtomIdentifier.UDTA.getFieldName());        udtaHeader.setLength(Mp4BoxHeader.HEADER_LENGTH + metaBox.getHeader().getLength());        additionalMetaSizeThatWontFitWithinMetaAtom=additionalMetaSizeThatWontFitWithinMetaAtom + (udtaHeader.getLength() - rawIlstData.limit());        if ((!topLevelFreeAtomComesBeforeMdatAtomAndAfterMetadata) || ((topLevelFreeSize - Mp4BoxHeader.HEADER_LENGTH < additionalMetaSizeThatWontFitWithinMetaAtom) && (topLevelFreeSize != additionalMetaSizeThatWontFitWithinMetaAtom))) {          if (mdatHeader.getFilePos() > moovHeader.getFilePos()) {            logger.config("Adjusting Offsets");            stco.adjustOffsets(additionalMetaSizeThatWontFitWithinMetaAtom);          }        }        moovHeader.setLength(moovHeader.getLength() - oldUdtaHeaderLength + additionalMetaSizeThatWontFitWithinMetaAtom);        fileWriteChannel.write(moovHeader.getHeaderData());        moovBuffer.rewind();        moovBuffer.limit(relativeIlstposition - oldUdtaHeaderLength);        fileWriteChannel.write(moovBuffer);        fileWriteChannel.write(udtaHeader.getHeaderData());        fileWriteChannel.write(metaBox.getHeader().getHeaderData());        fileWriteChannel.write(metaBox.getData());        fileWriteChannel.write(hdlrBox.getHeader().getHeaderData());        fileWriteChannel.write(hdlrBox.getData());      } else {        logger.config("Writing:Option 5.3;udta atom exists");        if ((!topLevelFreeAtomComesBeforeMdatAtomAndAfterMetadata) || ((topLevelFreeSize - Mp4BoxHeader.HEADER_LENGTH < additionalMetaSizeThatWontFitWithinMetaAtom) && (topLevelFreeSize != additionalMetaSizeThatWontFitWithinMetaAtom))) {          if (mdatHeader.getFilePos() > moovHeader.getFilePos()) {            stco.adjustOffsets(additionalMetaSizeThatWontFitWithinMetaAtom);          }        }        adjustSizeOfMoovHeader(moovHeader,moovBuffer,additionalMetaSizeThatWontFitWithinMetaAtom,udtaHeader,metaHeader);        fileWriteChannel.write(moovHeader.getHeaderData());        moovBuffer.rewind();        moovBuffer.limit(relativeIlstposition);        fileWriteChannel.write(moovBuffer);      }      fileWriteChannel.write(rawIlstData);      fileReadChannel.position(startIlstWithinFile + oldIlstSize);      fileReadChannel.position(fileReadChannel.position() + oldMetaLevelFreeAtomSize);      if (tagsHeader != null) {        long writeBetweenIlstAndTags=tagsHeader.getFilePos() - fileReadChannel.position();        fileWriteChannel.transferFrom(fileReadChannel,fileWriteChannel.position(),writeBetweenIlstAndTags);        fileWriteChannel.position(fileWriteChannel.position() + writeBetweenIlstAndTags);        convertandWriteTagsAtomToFreeAtom(fileWriteChannel,tagsHeader);        fileReadChannel.position(tagsHeader.getFilePos() + tagsHeader.getLength());        long extraData=endOfMoov - fileReadChannel.position();        fileWriteChannel.transferFrom(fileReadChannel,fileWriteChannel.position(),extraData);      } else {        long extraData=endOfMoov - fileReadChannel.position();        fileWriteChannel.transferFrom(fileReadChannel,fileWriteChannel.position(),extraData);        fileWriteChannel.position(fileWriteChannel.position() + extraData);      }      if (topLevelFreeAtomComesBeforeMdatAtomAndAfterMetadata && (topLevelFreePosition >= startIlstWithinFile)) {        if (topLevelFreeSize - Mp4BoxHeader.HEADER_LENGTH >= additionalMetaSizeThatWontFitWithinMetaAtom) {          logger.config("Writing:Option 6;Larger Size can use top free atom");          Mp4FreeBox freeBox=new Mp4FreeBox((topLevelFreeSize - Mp4BoxHeader.HEADER_LENGTH) - additionalMetaSizeThatWontFitWithinMetaAtom);          fileWriteChannel.write(freeBox.getHeader().getHeaderData());          fileWriteChannel.write(freeBox.getData());          fileReadChannel.position(fileReadChannel.position() + topLevelFreeSize);          writeDataInChunks(fileReadChannel,fileWriteChannel);        } else         if (topLevelFreeSize == additionalMetaSizeThatWontFitWithinMetaAtom) {          logger.config("Writing:Option 7;Larger Size uses top free atom including header");          fileReadChannel.position(fileReadChannel.position() + topLevelFreeSize);          writeDataInChunks(fileReadChannel,fileWriteChannel);        } else {          logger.config("Writing:Option 8;Larger Size cannot use top free atom");          fileWriteChannel.transferFrom(fileReadChannel,fileWriteChannel.position(),fileReadChannel.size() - fileReadChannel.position());          writeDataInChunks(fileReadChannel,fileWriteChannel);        }      } else {        logger.config("Writing:Option 9;Top Level Free comes after Mdat or before Metadata so cant use it");        writeDataInChunks(fileReadChannel,fileWriteChannel);      }    }  }  fileReadChannel.close();  raf.close();  checkFileWrittenCorrectly(rafTemp,mdatHeader,fileWriteChannel,stco);}  }
class C{  public void loadArg(final int arg){  loadInsn(argumentTypes[arg],getArgIndex(arg));}  }
class C{  private final void internalMap(CharChunk host,CharChunk uri,String version,MappingData mappingData) throws IOException {  if (mappingData.host != null) {    throw new AssertionError();  }  uri.setLimit(-1);  MappedHost[] hosts=this.hosts;  MappedHost mappedHost=exactFindIgnoreCase(hosts,host);  if (mappedHost == null) {    int firstDot=host.indexOf('.');    if (firstDot > -1) {      int offset=host.getOffset();      try {        host.setOffset(firstDot + offset);        mappedHost=exactFindIgnoreCase(hosts,host);      }  finally {        host.setOffset(offset);      }    }    if (mappedHost == null) {      mappedHost=defaultHost;      if (mappedHost == null) {        return;      }    }  }  mappingData.host=mappedHost.object;  ContextList contextList=mappedHost.contextList;  MappedContext[] contexts=contextList.contexts;  int pos=find(contexts,uri);  if (pos == -1) {    return;  }  int lastSlash=-1;  int uriEnd=uri.getEnd();  int length=-1;  boolean found=false;  MappedContext context=null;  while (pos >= 0) {    context=contexts[pos];    if (uri.startsWith(context.name)) {      length=context.name.length();      if (uri.getLength() == length) {        found=true;        break;      } else       if (uri.startsWithIgnoreCase("/",length)) {        found=true;        break;      }    }    if (lastSlash == -1) {      lastSlash=nthSlash(uri,contextList.nesting + 1);    } else {      lastSlash=lastSlash(uri);    }    uri.setEnd(lastSlash);    pos=find(contexts,uri);  }  uri.setEnd(uriEnd);  if (!found) {    if (contexts[0].name.equals("")) {      context=contexts[0];    } else {      context=null;    }  }  if (context == null) {    return;  }  mappingData.contextPath.setString(context.name);  ContextVersion contextVersion=null;  ContextVersion[] contextVersions=context.versions;  final int versionCount=contextVersions.length;  if (versionCount > 1) {    Context[] contextObjects=new Context[contextVersions.length];    for (int i=0; i < contextObjects.length; i++) {      contextObjects[i]=contextVersions[i].object;    }    mappingData.contexts=contextObjects;    if (version != null) {      contextVersion=exactFind(contextVersions,version);    }  }  if (contextVersion == null) {    contextVersion=contextVersions[versionCount - 1];  }  mappingData.context=contextVersion.object;  mappingData.contextSlashCount=contextVersion.slashCount;  if (!contextVersion.isPaused()) {    internalMapWrapper(contextVersion,uri,mappingData);  }}  }
class C{  public static MatchedValuesFilter createLessOrEqualFilter(AttributeType attributeType,ByteString assertionValue){  Reject.ifNull(attributeType,assertionValue);  String rawAttributeType=attributeType.getNameOrOID();  MatchedValuesFilter filter=new MatchedValuesFilter(LESS_OR_EQUAL_TYPE,rawAttributeType,assertionValue,null,null,null,null);  filter.attributeType=attributeType;  filter.assertionValue=assertionValue;  return filter;}  }
class C{  public void identityMovedOrRenamed(DN previousDN){  if (dnCacheEnabled) {    String name=LDAPUtils.getName(previousDN);    for (    IdType idType : getSupportedTypes()) {      String previousId=generateDNCacheKey(name,idType);      Object previousDn=dnCache.remove(previousId);      if (DEBUG.messageEnabled() && previousDn != null) {        DEBUG.message("Removed " + previousId + " from DN Cache");      }    }  }}  }
class C{  public boolean swap(BrdAbitPin p_other){  if (net_count() > 1 || p_other.net_count() > 1) {    System.out.println("Pin.swap not yet implemented for pins belonging to more than 1 net ");    return false;  }  int this_net_no=net_count() > 0 ? get_net_no(0) : 0;  int other_net_no=p_other.net_count() > 0 ? p_other.get_net_no(0) : 0;  set_net_no(other_net_no);  p_other.set_net_no(this_net_no);  BrdAbitPin tmp=changed_to;  changed_to=p_other.changed_to;  p_other.changed_to=tmp;  return true;}  }
class C{  public Pnt isOutside(Pnt[] simplex){  int[] result=this.relation(simplex);  for (int i=0; i < result.length; i++) {    if (result[i] > 0)     return simplex[i];  }  return null;}  }
class C{  public WindowEvent(Window source,int id,Window opposite){  this(source,id,opposite,0,0);}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  protected void fireStateChanged(){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ChangeListener.class) {      if (changeEvent == null)       changeEvent=new ChangeEvent(this);      ((ChangeListener)listeners[i + 1]).stateChanged(changeEvent);    }  }}  }
class C{  public LibPackage pkg_get(int p_package_no){  LibPackage result=package_list.elementAt(p_package_no - 1);  if (result.pkg_no != p_package_no) {    System.err.println(classname + "pkg_get: inconsistent padstack number");  }  return result;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",true);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.replaceData(5,5,"South");  childData=child.getData();  assertEquals("characterdataReplaceDataMiddleAssert","1230 South Ave. Dallas, Texas 98551",childData);}  }
class C{  public void referralSolveError(DN dn,String[] referrals,BasicNodeError error){  searchResult=null;  errorSearchingPanel.setReferralError(dn,referrals,error);  delete.setVisible(false);  saveChanges.setVisible(false);  cardLayout.show(mainPanel,ERROR_SEARCHING);  displayedEntryPanel=null;}  }
class C{  public PhoneStateMachine(){  idleState=new IdlePhoneState(this);  ringingState=new RingingPhoneState(this);  inboundOffHookState=new InboundOffHookState(this);  outboundOffHookState=new OutboundOffHookState(this);  currentState=idleState;}  }
class C{  public static ConnectionFactory newPrioritizedFailoverConnectionFactory(Set<String> servers,String hostServerId,String hostSiteId,String username,char[] password,int heartBeatInterval,String heartBeatTimeUnit,Options options){  return newFailoverConnectionFactory(prioritizeServers(servers,hostServerId,hostSiteId),username,password,heartBeatInterval,heartBeatTimeUnit,options);}  }
class C{  public boolean readHeader(RandomAccessFile raf) throws IOException {  StringBuffer id=new StringBuffer(4);  for (int i=0; i < 4; i++) {    int ch=raf.read();    if (ch < 32) {      String hx=Integer.toHexString(ch);      if (hx.length() < 2) {        hx="0" + hx;      }      return false;    }    id.append((char)ch);  }  _chunkID=id.toString();  _size=AiffUtil.readUINT32(raf);  return true;}  }
class C{  public boolean isCharacterElementContentWhitespace(int nodeHandle){  return false;}  }
class C{  public void unassignService(String serviceName) throws IdRepoException, SSOException {  IdServices idServices=IdServicesFactory.getDataStoreServices();  Set OCs=getServiceOCs(token,serviceName);  Map tMap=new HashMap();  tMap.put(serviceName,OCs);  Set assignedServices=idServices.getAssignedServices(token,type,name,tMap,orgName,univDN);  if (!assignedServices.contains(serviceName)) {    Object args[]={serviceName};    throw new IdRepoException(IdRepoBundle.BUNDLE_NAME,IdRepoErrorCode.SERVICE_NOT_ASSIGNED,args);  }  Map attrMap=new HashMap();  Set objectclasses=getAttribute("objectclass");  if (objectclasses != null && !objectclasses.isEmpty()) {    Set removeOCs=AMCommonUtils.updateAndGetRemovableOCs(objectclasses,OCs);    try {      Set attrNames=new HashSet();      ServiceSchemaManager ssm=new ServiceSchemaManager(serviceName,token);      ServiceSchema uss=ssm.getSchema(type.getName());      if (uss != null) {        attrNames=uss.getAttributeSchemaNames();      }      Iterator it=attrNames.iterator();      while (it.hasNext()) {        String a=(String)it.next();        attrMap.put(a,Collections.EMPTY_SET);      }    } catch (    SMSException smse) {    }    attrMap.put("objectclass",removeOCs);  }  idServices.unassignService(token,type,name,serviceName,attrMap,orgName,univDN);}  }
class C{  public void initializeLogRotationPolicyConfig() throws ConfigException, InitializationException {  RootCfg root=serverContext.getRootConfig();  root.addLogRotationPolicyAddListener(this);  root.addLogRotationPolicyDeleteListener(this);  for (  String name : root.listLogRotationPolicies()) {    LogRotationPolicyCfg config=root.getLogRotationPolicy(name);    RotationPolicy<LogRotationPolicyCfg> rotationPolicy=getRotationPolicy(config);    DirectoryServer.registerRotationPolicy(config.dn(),rotationPolicy);  }}  }
class C{  public Key decryptKey(Element encryptedKey,String certAlias){  return ep.decryptKey(encryptedKey,certAlias);}  }
class C{  protected void checkJAXPVersion(Hashtable h){  if (null == h)   h=new Hashtable();  final Class noArgs[]=new Class[0];  Class clazz=null;  try {    final String JAXP1_CLASS="javax.xml.parsers.DocumentBuilder";    final String JAXP11_METHOD="getDOMImplementation";    clazz=ObjectFactory.findProviderClass(JAXP1_CLASS,ObjectFactory.findClassLoader(),true);    Method method=clazz.getMethod(JAXP11_METHOD,noArgs);    h.put(VERSION + "JAXP","1.1 or higher");  } catch (  Exception e) {    if (null != clazz) {      h.put(ERROR + VERSION + "JAXP","1.0.1");      h.put(ERROR,ERROR_FOUND);    } else {      h.put(ERROR + VERSION + "JAXP",CLASS_NOTPRESENT);      h.put(ERROR,ERROR_FOUND);    }  }}  }
class C{  private static float crossProductZ(ResultPoint pointA,ResultPoint pointB,ResultPoint pointC){  float bX=pointB.x;  float bY=pointB.y;  return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));}  }
class C{  private Operation retryNextOperation(TraditionalWorkerThread workerThread,int numFailures){  queueReadLock.lock();  try {    if (shutdownRequested) {      return null;    }    if (killThreads && tryKillThisWorkerThread(workerThread)) {      return null;    }    if (numFailures > MAX_RETRY_COUNT) {      logger.error(ERR_CONFIG_WORK_QUEUE_TOO_MANY_FAILURES,Thread.currentThread().getName(),numFailures,MAX_RETRY_COUNT);      return null;    }    while (true) {      Operation nextOperation=opQueue.poll(5,TimeUnit.SECONDS);      if (nextOperation != null) {        return nextOperation;      }      queueReadLock.unlock();      Thread.yield();      queueReadLock.lock();      if (shutdownRequested) {        return null;      }      if (killThreads && tryKillThisWorkerThread(workerThread)) {        return null;      }    }  } catch (  InterruptedException ie) {    if (shutdownRequested) {      return null;    }    logger.warn(WARN_WORKER_INTERRUPTED_WITHOUT_SHUTDOWN,Thread.currentThread().getName(),ie);  }catch (  Exception e) {    logger.traceException(e);    logger.warn(WARN_WORKER_WAITING_UNCAUGHT_EXCEPTION,Thread.currentThread().getName(),e);  } finally {    queueReadLock.unlock();  }  return retryNextOperation(workerThread,numFailures + 1);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.soap.BodyType createBodyType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.soap.impl.BodyTypeImpl();}  }
class C{  public void remove_trace_tails(int p_net_no,BrdStopConnection p_stop_connection_option){  SortedSet<BrdItem> stub_set=new TreeSet<BrdItem>();  Collection<BrdItem> board_items=get_items();  for (  BrdItem curr_item : board_items) {    if (!curr_item.is_route())     continue;    if (curr_item.net_count() != 1)     continue;    if (p_net_no > 0 && curr_item.get_net_no(0) != p_net_no)     continue;    if (!curr_item.is_tail())     continue;    if (curr_item instanceof BrdAbitVia) {      if (p_stop_connection_option == BrdStopConnection.VIA)       continue;      if (p_stop_connection_option == BrdStopConnection.FANOUT_VIA) {        if (curr_item.is_fanout_via(null))         continue;      }    }    stub_set.add(curr_item);  }  SortedSet<BrdItem> stub_connections=new TreeSet<BrdItem>();  for (  BrdItem curr_item : stub_set) {    int item_contact_count=curr_item.get_normal_contacts().size();    if (item_contact_count == 1) {      stub_connections.addAll(curr_item.get_connection_items(p_stop_connection_option));    } else {      stub_connections.add(curr_item);    }  }  if (stub_connections.isEmpty())   return;  remove_items_unfixed(stub_connections);  combine_traces(p_net_no);}  }
class C{  public LowerCaseIdServicesDecorator(IdServices delegate){  super(delegate);}  }
class C{  public static Foo findByUuid_Last(java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_Last(uuid,orderByComparator);}  }
class C{  public final HashCode append(boolean value){  hashCode=combine(hashCode,value);  return this;}  }
class C{  protected void delegateFocus(MouseEvent e){  if (comboBox.isEditable()) {    Component comp=comboBox.getEditor().getEditorComponent();    if ((!(comp instanceof JComponent)) || ((JComponent)comp).isRequestFocusEnabled()) {      comp.requestFocus();    }  } else   if (comboBox.isRequestFocusEnabled()) {    comboBox.requestFocus();  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  for (ListIterator<String> li=valueList.listIterator(); li.hasNext(); ) {    String next=li.next();    sb.append(next);    if (li.hasNext()) {      sb.append(",");    }  }  return sb.toString();}  }
class C{  public ID3v22Frame createFrame(String id){  return new ID3v22Frame(id);}  }
class C{  public UpdateException(String message,Throwable ex){  super(message,ex);}  }
class C{  private static String[] composeList(MessageFormat format,String[] list){  if (list.length <= 3)   return list;  String[] listItems={list[0],list[1]};  String newItem=format.format(listItems);  String[] newList=new String[list.length - 1];  System.arraycopy(list,2,newList,1,newList.length - 1);  newList[0]=newItem;  return composeList(format,newList);}  }
class C{  public static PasswordPolicyResponseControl newControl(final PasswordPolicyErrorType errorType){  Reject.ifNull(errorType);  return new PasswordPolicyResponseControl(false,null,-1,errorType);}  }
class C{  public static HashMap<String,List<String>> extractHeadersFromRequest(Request request){  HashMap<String,List<String>> headers=new HashMap<>();  for (  String headerName : request.getHeaderNames()) {    headers.put(headerName,request.getHeaders(headerName));  }  return headers;}  }
class C{  public OBJECT_NOT_EXIST(){  this("");}  }
class C{  @Inject public TaskDispatcher(@DataLayer(ConnectionType.CTS_ASYNC) TaskFactory taskFactory,@DataLayer(ConnectionType.CTS_ASYNC) TaskExecutor taskExecutor){  this.taskFactory=taskFactory;  this.taskExecutor=taskExecutor;  this.continuousQueries=new ConcurrentHashMap<>();}  }
class C{  private JPanel createNumberEntriesPanel(){  JPanel panel;  GridBagConstraints gbc=new GridBagConstraints();  panel=new JPanel(new GridBagLayout());  panel.setOpaque(false);  gbc.gridwidth=3;  gbc.insets=UIFactory.getEmptyInsets();  gbc.weightx=0.0;  panel.add(getLabel(FieldName.NUMBER_ENTRIES),gbc);  gbc.gridwidth--;  gbc.weightx=0.1;  gbc.insets.left=UIFactory.LEFT_INSET_SECONDARY_FIELD;  panel.add(getField(FieldName.NUMBER_ENTRIES),gbc);  gbc.gridwidth=GridBagConstraints.REMAINDER;  gbc.weightx=1.0;  gbc.fill=GridBagConstraints.HORIZONTAL;  panel.add(Box.createHorizontalGlue(),gbc);  return panel;}  }
class C{  public ClusterRuleSet(){  this("");}  }
class C{  public void writeRemainingPages(int pageSequence,RandomAccessFile raf,RandomAccessFile rafTemp) throws IOException, CannotReadException, CannotWriteException {  long startAudio=raf.getFilePointer();  long startAudioWritten=rafTemp.getFilePointer();  ByteBuffer bb=ByteBuffer.allocate((int)(raf.length() - raf.getFilePointer()));  ByteBuffer bbTemp=ByteBuffer.allocate((int)(raf.length() - raf.getFilePointer()));  raf.getChannel().read(bb);  bb.rewind();  while (bb.hasRemaining()) {    OggPageHeader nextPage=OggPageHeader.read(bb);    ByteBuffer nextPageHeaderBuffer=ByteBuffer.allocate(nextPage.getRawHeaderData().length + nextPage.getPageLength());    nextPageHeaderBuffer.order(ByteOrder.LITTLE_ENDIAN);    nextPageHeaderBuffer.put(nextPage.getRawHeaderData());    ByteBuffer data=bb.slice();    data.limit(nextPage.getPageLength());    nextPageHeaderBuffer.put(data);    nextPageHeaderBuffer.putInt(OggPageHeader.FIELD_PAGE_SEQUENCE_NO_POS,++pageSequence);    calculateChecksumOverPage(nextPageHeaderBuffer);    bb.position(bb.position() + nextPage.getPageLength());    nextPageHeaderBuffer.rewind();    bbTemp.put(nextPageHeaderBuffer);  }  bbTemp.rewind();  rafTemp.getChannel().write(bbTemp);  if ((raf.length() - startAudio) != (rafTemp.length() - startAudioWritten)) {    throw new CannotWriteException("File written counts don't match, file not written");  }}  }
class C{  public ExpiresHeader createExpiresHeader(int expires) throws InvalidArgumentException {  if (expires < 0)   throw new InvalidArgumentException("bad value " + expires);  Expires e=new Expires();  e.setExpires(expires);  return e;}  }
class C{  public void callArgVisitors(XPathVisitor visitor){  for (int i=0; i < m_argVec.size(); i++) {    Expression exp=(Expression)m_argVec.elementAt(i);    exp.callVisitors(new ArgExtOwner(exp),visitor);  }}  }
class C{  public Exchanger(){  participant=new Participant();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  @Override public void execute() throws MojoExecutionException, MojoFailureException {  final Map<String,Object> map=new HashMap<>();  map.put("year",new SimpleDateFormat("yyyy").format(new Date()));  final JavaClass resultCodeClass;  try {    resultCodeClass=getJavaClass();  } catch (  IOException e) {    throw new MojoExecutionException("Could not read " + resultCodeSource.getPath(),e);  }  map.put("classComment",cleanComment(resultCodeClass.getComment()));  final Map<String,Object> comments=new HashMap<>();  for (  final JavaField field : resultCodeClass.getFields()) {    final JavaType type=field.getType();    if (type.getValue().equals("ResultCode")) {      comments.put(field.getName(),cleanComment(field.getComment()));    }  }  map.put("resultCodes",getResultCodesDoc(comments));  final String template="appendix-ldap-result-codes.ftl";  try {    writeStringToFile(applyTemplate(template,map),xmlFile);  } catch (  IOException e) {    throw new MojoExecutionException("Could not write to " + xmlFile.getPath(),e);  }  getLog().info("Wrote " + xmlFile.getPath());}  }
class C{  public boolean isSubscribable() throws AMException, SSOException {  return getBooleanAttribute(SUBSCRIBABLE_ATTRIBUTE);}  }
class C{  static int deriveARGB(Color color1,Color color2,float midPoint){  int r=color1.getRed() + Math.round((color2.getRed() - color1.getRed()) * midPoint);  int g=color1.getGreen() + Math.round((color2.getGreen() - color1.getGreen()) * midPoint);  int b=color1.getBlue() + Math.round((color2.getBlue() - color1.getBlue()) * midPoint);  int a=color1.getAlpha() + Math.round((color2.getAlpha() - color1.getAlpha()) * midPoint);  return ((a & 0xFF) << 24) | ((r & 0xFF) << 16) | ((g & 0xFF) << 8)| (b & 0xFF);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.ac.ResumeSessionType createResumeSessionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.ac.impl.ResumeSessionTypeImpl();}  }
class C{  public void send(DatagramPacket pack) throws IOException {  checkOpen();  ensureBound();  InetAddress packAddr=pack.getAddress();  if (address != null) {    if (packAddr != null) {      if (!address.equals(packAddr) || port != pack.getPort()) {        throw new IllegalArgumentException("Packet address mismatch with connected address");      }    } else {      pack.setAddress(address);      pack.setPort(port);    }  } else {    if (packAddr == null) {      throw new NullPointerException("Destination address is null");    }  }  impl.send(pack);}  }
class C{  protected void paint(SynthContext context,Graphics g){}  }
class C{  public IDFFSingleLogoutHandler(){}  }
class C{  protected void addImpl(Component child,Object constraints,int index){  setView(child);}  }
class C{  protected View createChild(String name){  View child=null;  if (name.equals(LBL_USER_ATTR)) {    child=new StaticTextField(this,LBL_USER_ATTR,"");  } else   if (name.equals(TF_USER_ATTR)) {    child=new TextField(this,TF_USER_ATTR,"");  } else   if (name.equals(NEXT_BUTTON)) {    child=new Button(this,NEXT_BUTTON,"");  } else   if (name.equals(USER_VALIDATION_TITLE)) {    child=new StaticTextField(this,USER_VALIDATION_TITLE,"");  } else   if (name.equals(FLD_USER_ATTR)) {    return new HiddenField(this,FLD_USER_ATTR,"");  } else {    child=super.createChild(name);  }  return child;}  }
class C{  public Object clone(){  try {    IdentityHashMap<?,?> m=(IdentityHashMap<?,?>)super.clone();    m.entrySet=null;    m.table=table.clone();    return m;  } catch (  CloneNotSupportedException e) {    throw new InternalError(e);  }}  }
class C{  private List sendMessage(List requestObjects) throws DSTException, InteractionRedirectException {  DSTUtils.debug.message("DSTClient:sendMessage:Init");  if (requestObjects == null || requestObjects.size() == 0) {    DSTUtils.debug.message("DSTClient:sendMessage: requestobj are null");    throw new DSTException(DSTUtils.bundle.getString("nullInputParams"));  }  try {    Message msg=null;    ProviderHeader provH=null;    if (providerID != null) {      provH=new ProviderHeader(providerID);    }    if (securityProfile == Message.X509_TOKEN) {      if (token == null) {        throw new DSTException(DSTUtils.bundle.getString("nullToken"));      }      DSTUtils.debug.message("DSTClient:sendMessage:using x509");      msg=new Message(provH,token);    } else     if (securityProfile == Message.SAML_TOKEN) {      DSTUtils.debug.message("DSTClient:sendMessage:using SAML");      msg=new Message(provH,assertion);    } else     if (securityProfile == Message.BEARER_TOKEN) {      DSTUtils.debug.message("DSTClient:sendMessage:using Bearer");      msg=new Message(provH,assertion);    } else     if (securityProfile == Message.ANONYMOUS) {      DSTUtils.debug.message("DSTClient:sendMessage:using Anonymous");      msg=new Message(provH);    } else {      throw new DSTException(DSTUtils.bundle.getString("invalidSecurityProfile"));    }    msg.setSOAPBodies(requestObjects);    msg.setWSFVersion(wsfVersion);    if (clientAuthEnabled) {      msg.setClientAuthentication(clientAuthEnabled);    }    if (DSTUtils.debug.messageEnabled()) {      DSTUtils.debug.message("DSTClient:sendMessage: request:" + msg.toString());    }    Message response=null;    if (httpRequest != null) {      response=handleInteraction(msg);    } else {      response=Client.sendRequest(msg,soapURI,certAlias,soapAction);    }    if (DSTUtils.debug.messageEnabled()) {      DSTUtils.debug.message("DSTClient:sendMessage:response = " + response.toString());    }    serviceInstanceUpdateHeader=response.getServiceInstanceUpdateHeader();    return response.getBodies();  } catch (  SOAPBindingException sbe) {    DSTUtils.debug.error("DSTClient:sendMessage:soapbindexception",sbe);    throw new DSTException(sbe);  }catch (  SOAPFaultException sfe) {    DSTUtils.debug.error("DSTClient:sendMessage:soapfault",sfe);    serviceInstanceUpdateHeader=sfe.getSOAPFaultMessage().getServiceInstanceUpdateHeader();    throw new DSTException(sfe);  }}  }
class C{  public long simpleQueryForLong(){  acquireReference();  try {    return getSession().executeForLong(getSql(),getBindArgs(),getConnectionFlags(),null);  } catch (  SQLiteDatabaseCorruptException ex) {    onCorruption();    throw ex;  } finally {    releaseReference();  }}  }
class C{  public com.sun.identity.wsfederation.jaxb.xmlsig.MgmtDataElement createMgmtDataElement(java.lang.String value) throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.xmlsig.impl.MgmtDataElementImpl(value);}  }
class C{  protected static boolean isDiagnosticsEnabled(){  return LogFactory.isDiagnosticsEnabled();}  }
class C{  @Indexable(type=IndexableType.DELETE) @Override public Foo deleteFoo(Foo foo){  return fooPersistence.remove(foo);}  }
class C{  private void initMetrics(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Initializing Metrics registries");  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,metricRegistry);  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,metricRegistry);  log.debug("Registering Metrics Filter");  FilterRegistration.Dynamic metricsFilter=servletContext.addFilter("webappMetricsFilter",new InstrumentedFilter());  metricsFilter.addMappingForUrlPatterns(disps,true,"/*");  metricsFilter.setAsyncSupported(true);  log.debug("Registering Metrics Servlet");  ServletRegistration.Dynamic metricsAdminServlet=servletContext.addServlet("metricsServlet",new MetricsServlet());  metricsAdminServlet.addMapping("/management/jhipster/metrics/*");  metricsAdminServlet.setAsyncSupported(true);  metricsAdminServlet.setLoadOnStartup(2);}  }
class C{  protected void registerChildren(){  super.registerChildren();  registerChild(TAB_CLIENT_DETECTION,CCTabs.class);  registerChild(PGTITLE,CCPageTitle.class);  registerChild(SEC_MH_COMMON,CCSecondaryMasthead.class);  registerChild(TF_FILTER,CCTextField.class);  registerChild(BTN_SEARCH,CCButton.class);  registerChild(TBL_CLIENTS,CCActionTable.class);  registerChild(SINGLECHOICE_STYLE,CCDropDownMenu.class);  ptModel.registerChildren(this);  tblModel.registerChildren(this);}  }
class C{  public FrameBodyTCOM(){}  }
class C{  private JsonValue logout(String tokenId,Context context) throws InternalServerErrorException {  SSOToken ssoToken;  try {    if (tokenId == null) {      if (LOGGER.messageEnabled()) {        LOGGER.message("SessionResource.logout() :: Null Token Id.");      }      throw new InternalServerErrorException("Null Token Id");    }    ssoToken=ssoTokenManager.createSSOToken(tokenId);  } catch (  SSOException ex) {    Map<String,Object> map=new HashMap<String,Object>();    map.put(SessionResource.KEYWORD_RESULT,"Token has expired");    if (LOGGER.messageEnabled()) {      LOGGER.message("SessionResource.logout() :: Token ID, " + tokenId + ", already expired.");    }    return new JsonValue(map);  }  HttpServletResponse httpServletResponse=null;  final AdviceContext adviceContext=context.asContext(AdviceContext.class);  if (adviceContext == null) {    if (LOGGER.warningEnabled()) {      LOGGER.warning("No AdviceContext in Context, and thus no headers can be set in the HttpServletResponse.");    }  } else {    httpServletResponse=new HeaderCollectingHttpServletResponse(new UnsupportedResponse(),adviceContext);  }  AttributesContext requestContext=context.asContext(AttributesContext.class);  Map<String,Object> requestAttributes=requestContext.getAttributes();  final HttpServletRequest httpServletRequest=(HttpServletRequest)requestAttributes.get(HttpServletRequest.class.getName());  String sessionId;  Map<String,Object> map=new HashMap<>();  if (ssoToken != null) {    sessionId=ssoToken.getTokenID().toString();    try {      authUtilsWrapper.logout(sessionId,httpServletRequest,httpServletResponse);    } catch (    SSOException e) {      if (LOGGER.errorEnabled()) {        LOGGER.error("SessionResource.logout() :: Token ID, " + tokenId + ", unable to log out associated token.");      }      throw new InternalServerErrorException("Error logging out",e);    }    String papRedirect=authUtilsWrapper.getPostProcessLogoutURL(httpServletRequest);    if (!StringUtils.isBlank(papRedirect)) {      map.put("goto",papRedirect);    }  }  map.put("result","Successfully logged out");  LOGGER.message("SessionResource.logout() :: Successfully logged out token, {}",tokenId);  return new JsonValue(map);}  }
class C{  public SpringLayout(){}  }
class C{  public boolean isLeaf(){  return (getChildCount() == 0);}  }
class C{  public static void createServiceInstance(String serverInstance,String serverId,Set values,String serverConfigXML){  String classMethod="UpgradeUtils:createServiceInstance : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "serverInstance :" + serverInstance);    debug.message(classMethod + "serverId :" + serverId);  }  try {    ServerConfiguration.createServerInstance(ssoToken,serverInstance,serverId,values,serverConfigXML);  } catch (  UnknownPropertyNameException uce) {  }catch (  ConfigurationException ce) {  }catch (  SMSException sme) {  }catch (  SSOException ssoe) {  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodegetownerdocumentnull.class,args);}  }
class C{  public void normalize(){  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);}  }
class C{  public static void postToAppLogout(HttpServletRequest request,String appLogoutURL,Object session){  String method="SAML2Utils.postToAppLogout: ";  try {    if ((appLogoutURL == null) || (appLogoutURL.length() == 0)) {      return;    }    String logoutURL=appLogoutURL;    String sessProp=null;    int pos=appLogoutURL.indexOf(SAML2Constants.APP_SESSION_PROPERTY + "=");    if (pos != -1) {      int endPos=appLogoutURL.indexOf("&",pos);      if (endPos != -1) {        sessProp=appLogoutURL.substring(pos + SAML2Constants.APP_SESSION_PROPERTY.length() + 1,endPos);        logoutURL=appLogoutURL.substring(0,pos) + appLogoutURL.substring(endPos + 1);      } else {        sessProp=appLogoutURL.substring(pos + SAML2Constants.APP_SESSION_PROPERTY.length() + 1);        logoutURL=appLogoutURL.substring(0,pos - 1);      }    }    if (debug.messageEnabled()) {      debug.message(method + "appLogoutURL=" + appLogoutURL+ ", real logoutURL="+ logoutURL+ ", session property name: "+ sessProp);    }    URL url=new URL(logoutURL);    HttpURLConnection conn=HttpURLConnectionManager.getConnection(url);    conn.setDoOutput(true);    conn.setRequestMethod("POST");    HttpURLConnection.setFollowRedirects(false);    conn.setInstanceFollowRedirects(false);    String strCookies=getCookiesString(request);    if (strCookies != null) {      if (debug.messageEnabled()) {        debug.message(method + "Sending cookies : " + strCookies);      }      conn.setRequestProperty("Cookie",strCookies);    }    conn.setRequestProperty("Content-Type","application/x-www-form-urlencoded");    StringBuffer buffer=new StringBuffer();    buffer.append("");    if ((sessProp != null) && (session != null)) {      String[] values=SessionManager.getProvider().getProperty(session,sessProp);      if ((values != null) && (values.length != 0)) {        int i=0;        while (true) {          conn.setRequestProperty(URLEncDec.encode(sessProp),URLEncDec.encode(values[i]));          buffer.append(URLEncDec.encode(sessProp)).append('=');          buffer.append(URLEncDec.encode(values[i++]));          if (i != values.length) {            buffer.append('&');          } else {            break;          }        }      }    }    if (debug.messageEnabled()) {      debug.message(method + "Sending content: " + buffer.toString());    }    OutputStream outputStream=conn.getOutputStream();    outputStream.write(buffer.toString().getBytes());    outputStream.flush();    outputStream.close();    if (conn.getResponseCode() == HttpURLConnection.HTTP_OK) {      if (debug.messageEnabled()) {        debug.message(method + "Response code OK");      }    } else {      debug.error(method + "Response code NOT OK: " + conn.getResponseCode());    }  } catch (  SessionException ex) {    debug.error(method + " post to external app failed.",ex);  }catch (  IOException ex) {    debug.error(method + " post to external app failed.",ex);  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementreplaceexistingattributegevalue.class,args);}  }
class C{  private void unRegisterAuth(LDAPURL ldapUrl) throws LdapException {  String key=makeKeyFromLDAPUrl(ldapUrl);  authTable.remove(key);  notifyListeners();}  }
class C{  private void drawCenterRect(Canvas canvas){  int center=getHeight() / 2;  int offset=(int)(getItemHeight() / 2 * 1.2);  Paint paint=new Paint();  paint.setColor(Color.parseColor("#c9c9c9"));  paint.setStrokeWidth((float)2);  canvas.drawLine(0,center - offset,getWidth(),center - offset,paint);  canvas.drawLine(0,center + offset,getWidth(),center + offset,paint);}  }
class C{  public final String[] keys(){  String[] keysArr=new String[m_firstFree];  for (int i=0; i < m_firstFree; i++) {    keysArr[i]=m_map[i];  }  return keysArr;}  }
class C{  protected void handleOutput(String output,int priority){  if (priority == Project.MSG_ERR) {    handleErrorOutput(output);  } else {    handleOutput(output);  }}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public static String showInternalInputDialog(Component parentComponent,Object message,String title,int messageType){  return (String)showInternalInputDialog(parentComponent,message,title,messageType,null,null,null);}  }
class C{  public XPath(String exprString,SourceLocator locator,PrefixResolver prefixResolver,int type) throws javax.xml.transform.TransformerException {  this(exprString,locator,prefixResolver,type,null);}  }
class C{  public static int write(AudioInputStream stream,AudioFileFormat.Type fileType,File out) throws IOException {  List providers=getAudioFileWriters();  int bytesWritten=0;  boolean flag=false;  for (int i=0; i < providers.size(); i++) {    AudioFileWriter writer=(AudioFileWriter)providers.get(i);    try {      bytesWritten=writer.write(stream,fileType,out);      flag=true;      break;    } catch (    IllegalArgumentException e) {      continue;    }  }  if (!flag) {    throw new IllegalArgumentException("could not write audio file: file type not supported: " + fileType);  } else {    return bytesWritten;  }}  }
class C{  public Hyphenation hyphenate(String word){  return hyphenator != null ? hyphenator.hyphenate(word) : null;}  }
class C{  private void remove_concave_corners(){  PlaPointInt[] corner_arr=new PlaPointInt[corner_list.size()];  Iterator<PlaPointInt> it=corner_list.iterator();  for (int i=0; i < corner_arr.length; ++i) {    corner_arr[i]=it.next();  }  int new_length=corner_arr.length;  if (new_length < 3) {    return;  }  PlaPointInt last_corner=corner_arr[new_length - 1];  PlaPointInt curr_corner=corner_arr[new_length - 2];  while (new_length > 2) {    PlaPointInt prev_corner=corner_arr[new_length - 3];    PlaSide last_corner_side=last_corner.side_of(prev_corner,curr_corner);    if (last_corner_side == PlaSide.ON_THE_LEFT)     break;    if (!r_brd.brd_rules.is_trace_snap_45()) {      corner_arr[new_length - 2]=last_corner;    }    --new_length;    curr_corner=prev_corner;  }  if (new_length < corner_arr.length) {    corner_list=new LinkedList<PlaPointInt>();    for (int index=0; index < new_length; ++index) {      corner_list.add(corner_arr[index]);    }  }}  }
class C{  public void removeProvider(String userID,String entityID,FSSession localSession){  FSUtils.debug.message("FSSessionManager.removeProvider: Called ");  if (localSession != null) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSSessionManager.removeProvider: " + "localSession is not null");    }    localSession.removeSessionPartner(entityID);    return;  }  List sessions=getSessionList(userID);  if (sessions != null) {synchronized (sessions) {      Iterator i=sessions.iterator();      while (i.hasNext()) {        FSSession session=(FSSession)i.next();        if (session != null) {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("removeSessionPartner" + entityID);          }          session.removeSessionPartner(entityID);        }      }    }  }}  }
class C{  public static void displayOperationRejectedException(ConsoleApplication app,OperationRejectedException e){  LocalizableMessage ufn=e.getUserFriendlyName();  LocalizableMessage msg;  final boolean singleMessage=e.getMessages().size() == 1;switch (e.getOperationType()) {case CREATE:    msg=singleMessage ? ERR_DSCFG_ERROR_CREATE_ORE_SINGLE.get(ufn) : ERR_DSCFG_ERROR_CREATE_ORE_PLURAL.get(ufn);  break;case DELETE:msg=singleMessage ? ERR_DSCFG_ERROR_DELETE_ORE_SINGLE.get(ufn) : ERR_DSCFG_ERROR_DELETE_ORE_PLURAL.get(ufn);break;default :msg=singleMessage ? ERR_DSCFG_ERROR_MODIFY_ORE_SINGLE.get(ufn) : ERR_DSCFG_ERROR_MODIFY_ORE_PLURAL.get(ufn);break;}app.errPrintln(msg);app.errPrintln();TableBuilder builder=new TableBuilder();for (LocalizableMessage reason : e.getMessages()) {builder.startRow();builder.appendCell("*");builder.appendCell(reason);}TextTablePrinter printer=new TextTablePrinter(app.getErrorStream());printer.setDisplayHeadings(false);printer.setColumnWidth(1,0);printer.setIndentWidth(4);builder.print(printer);}  }
class C{  public static void loadAgent(String agentPath,String vmID){  try {    File agentFile=new File(agentPath);    VirtualMachine vm=VirtualMachine.attach(vmID);    vm.loadAgent(agentFile.getAbsolutePath(),"");    VirtualMachine.attach(vm.id());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  private void saveChanges(boolean modal){  newTask=null;  final ArrayList<LocalizableMessage> errors=new ArrayList<>();  try {    ProgressDialog dlg=new ProgressDialog(Utilities.getFrame(this),Utilities.getFrame(this),INFO_CTRL_PANEL_MODIFYING_ENTRY_CHANGES_TITLE.get(),getInfo());    dlg.setModal(modal);    Entry entry=displayedEntryPanel.getEntry();    newTask=new ModifyEntryTask(getInfo(),dlg,entry,searchResult,controller,treePath);    for (    Task task : getInfo().getTasks()) {      task.canLaunch(newTask,errors);    }    if (errors.isEmpty()) {      if (newTask.hasModifications()) {        String dn=entry.getName().toString();        launchOperation(newTask,INFO_CTRL_PANEL_MODIFYING_ENTRY_SUMMARY.get(dn),INFO_CTRL_PANEL_MODIFYING_ENTRY_COMPLETE.get(),INFO_CTRL_PANEL_MODIFYING_ENTRY_SUCCESSFUL.get(dn),ERR_CTRL_PANEL_MODIFYING_ENTRY_ERROR_SUMMARY.get(),ERR_CTRL_PANEL_MODIFYING_ENTRY_ERROR_DETAILS.get(dn),null,dlg);        saveChanges.setEnabled(false);        dlg.setVisible(true);      } else {        saveChanges.setEnabled(false);      }    }  } catch (  OpenDsException ode) {    errors.add(ERR_CTRL_PANEL_INVALID_ENTRY.get(ode.getMessageObject()));  }  if (!errors.isEmpty()) {    displayErrorDialog(errors);  }}  }
class C{  public void testCase2(){  byte aBytes[]={1,2,3,4,5,6,7,1,2,3};  byte bBytes[]={10,20,30,40,50,60,70,10,20,30};  int aSign=1;  int bSign=1;  byte rBytes[]={-10,-19,-28,-37,-46,-55,-64,-10,-19,-27};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.subtract(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals(-1,result.signum());}  }
class C{  public boolean isExpanded(){  return isExpanded;}  }
class C{  public static boolean isStrikeThrough(AttributeSet a){  Boolean strike=(Boolean)a.getAttribute(StrikeThrough);  if (strike != null) {    return strike.booleanValue();  }  return false;}  }
class C{  protected View createChild(String name){  View view=null;  if (name.equals(SEC_MH_COMMON)) {    view=new CCSecondaryMasthead(this,name);  } else   if (name.equals(PGTITLE)) {    view=new CCPageTitle(this,ptModel,name);  } else   if (ptModel.isChildSupported(name)) {    view=ptModel.createChild(this,name);  } else   if (name.equals(PROPERTY_ATTRIBUTE)) {    view=new AMPropertySheet(this,propertySheetModel,name);  } else   if (propertySheetModel.isChildSupported(name)) {    view=propertySheetModel.createChild(this,name,getModel());  } else {    view=super.createChild(name);  }  return view;}  }
class C{  public boolean bool(XPathContext xctxt,int contextNode,PrefixResolver namespaceContext) throws javax.xml.transform.TransformerException {  xctxt.pushNamespaceContext(namespaceContext);  xctxt.pushCurrentNodeAndExpression(contextNode,contextNode);  try {    return m_mainExp.bool(xctxt);  } catch (  TransformerException te) {    te.setLocator(this.getLocator());    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.error(te);    } else     throw te;  }catch (  Exception e) {    while (e instanceof org.apache.xml.utils.WrappedRuntimeException) {      e=((org.apache.xml.utils.WrappedRuntimeException)e).getException();    }    String msg=e.getMessage();    if (msg == null || msg.length() == 0) {      msg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_XPATH_ERROR,null);    }    TransformerException te=new TransformerException(msg,getLocator(),e);    ErrorListener el=xctxt.getErrorListener();    if (null != el) {      el.fatalError(te);    } else     throw te;  } finally {    xctxt.popNamespaceContext();    xctxt.popCurrentNodeAndExpression();  }  return false;}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  @Override public void clear_doors(){  doors_list.clear();}  }
class C{  protected void configure(){  if (configured) {    return;  }  log=LogFactory.getLog("org.apache.tomcat.util.digester.Digester");  saxLog=LogFactory.getLog("org.apache.tomcat.util.digester.Digester.sax");  configured=true;}  }
class C{  public World createWorld(){  return Bukkit.createWorld(this);}  }
class C{  public static long readSwappedLong(InputStream input) throws IOException {  byte[] bytes=new byte[8];  for (int i=0; i < 8; i++) {    bytes[i]=(byte)read(input);  }  return readSwappedLong(bytes,0);}  }
class C{  public boolean equals(BigInt other){  if (this == other)   return true;  byte[] otherPlaces=other.toByteArray();  if (places.length != otherPlaces.length)   return false;  for (int i=0; i < places.length; i++)   if (places[i] != otherPlaces[i])   return false;  return true;}  }
class C{  public static Foo fetchByField2_Last(boolean field2,OrderByComparator<Foo> orderByComparator){  return getPersistence().fetchByField2_Last(field2,orderByComparator);}  }
class C{  public void deregister(VirtualAttributeRule rule){  rules.remove(getDummyDN(rule));}  }
class C{  @Override public void onPause(){  super.onPause();  mDelegate.detachView();  if (getActivity().isFinishing()) {    mDelegate.destroyPresenter();  }}  }
class C{  boolean searchUserProfile(Subject subject,AuthContext.IndexType indexType,String indexName) throws AuthException {  Set<String> tokenSet=getTokenFromPrincipal(subject);  if (DEBUG.messageEnabled()) {    DEBUG.message("in searchUserProfile");    DEBUG.message("indexType is.. :" + indexType);    DEBUG.message("indexName is.. :" + indexName);    DEBUG.message("Subject is.. :" + subject);    DEBUG.message("token is.. :" + token);    DEBUG.message("tokenSet is.. :" + tokenSet);    DEBUG.message("ignoreUserProfile.. :" + ignoreUserProfile);    DEBUG.message("userDN is.. :" + userDN);  }  try {    boolean gotUserProfile=true;    if (((ignoreUserProfile && !isApplicationModule(indexName))) || (isApplicationModule(indexName) && LazyConfig.AUTHD.isSuperAdmin(userDN))) {      if (LazyConfig.AUTHD.isSuperAdmin(userDN)) {        amIdentityUser=LazyConfig.AUTHD.getIdentity(IdType.USER,userDN,getOrgDN());      } else {        amIdentityUser=new AMIdentity(null,userDN,IdType.USER,getOrgDN(),null);      }      userDN=getUserDN(amIdentityUser);      populateDefaultUserAttributes();      return true;    }    if ((indexType == AuthContext.IndexType.USER)) {      if (token == null) {        return false;      }      getUserProfile(token,true);      Map<String,Boolean> aliasFound=searchUserAliases(token,tokenSet);      if (!checkAliasList(aliasFound)) {        if (createWithAlias) {          if (amIdentityUser == null) {            addAliasToUserProfile(amIdentityUser,aliasFound);          } else {            addAliasToUserProfile(token,aliasFound);          }        } else {          throw new AuthException(AMAuthErrorCode.AUTH_LOGIN_FAILED,null);        }      }    } else {      boolean gotProfile=true;      if (tokenSet.isEmpty()) {        DEBUG.message("tokenset empty");        throw new AuthException(AMAuthErrorCode.AUTH_ERROR,null);      } else       if (tokenSet.size() == 1) {        if (isAccountLocked(getUserUniversalId(token))) {          DEBUG.message("User account \"{}\" locked",token);          throw new AuthException(AMAuthErrorCode.AUTH_USER_LOCKED,null);        }        DEBUG.message("tokenset size is 1");        gotUserProfile=getCreateUserProfile(true);        if (!userEnabled) {          setFailedUserId(token);          throw new AuthException(AMAuthErrorCode.AUTH_USER_INACTIVE,null);        }        if (LazyConfig.AUTHD.isSuperAdmin(userDN)) {          return true;        }        if (gotUserProfile) {          if (indexType == AuthContext.IndexType.ROLE) {            boolean userRoleFound=getUserForRole(getIdentityRole(indexName));            if (DEBUG.messageEnabled()) {              DEBUG.message("userRoleFound: " + userRoleFound);            }            if (!userRoleFound) {              logFailed(AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_USER_NOT_FOUND,AuthUtils.ERROR_MESSAGE),"USERNOTFOUND");              auditor.auditLoginFailure(this,USER_NOT_FOUND);              throw new AuthException(AMAuthErrorCode.AUTH_USER_NOT_FOUND,null);            }          }        }      } else {        DEBUG.message("came here !! multiple modules , users ");        String validToken=null;        boolean foundUserAlias=false;        boolean userRoleFound=true;        Map<String,Boolean> userEnabledMap=new HashMap<String,Boolean>();        Map<String,Boolean> userRoleFoundMap=new HashMap<String,Boolean>();        Map<String,Boolean> foundAliasMap=new HashMap<String,Boolean>();        Map<String,Boolean> gotUserProfileMap=new HashMap<String,Boolean>();        String aliasToken=null;        for (        final String tok : tokenSet) {          token=tok;          if (DEBUG.messageEnabled()) {            DEBUG.message("BEGIN WHILE: Token is.. : " + token);          }          gotUserProfile=getUserProfile(token,true);          gotUserProfileMap.put(token,gotUserProfile);          if (DEBUG.messageEnabled()) {            DEBUG.message("gotUserProfile : " + gotUserProfile);          }          if (gotUserProfile) {            if (validToken == null) {              validToken=token;            }            userEnabledMap.put(token,userEnabled);            if (indexType == AuthContext.IndexType.ROLE) {              userRoleFound=getUserForRole(getIdentityRole(indexName));              userRoleFoundMap.put(token,userRoleFound);            }            foundAliasMap=searchUserAliases(token,tokenSet);            if (foundUserAlias=getFoundUserAlias(foundAliasMap)) {              aliasToken=token;              if (DEBUG.messageEnabled()) {                DEBUG.message("found aliases exiting while:" + foundAliasMap);              }              break;            }          }        }        if (DEBUG.messageEnabled()) {          DEBUG.message("Alias Token is : " + aliasToken);          DEBUG.message("Profile Token :" + validToken);          DEBUG.message("Token is : " + token);        }        if (aliasToken != null) {          token=aliasToken;        }        boolean userEnabled=getUserEnabled(userEnabledMap);        if (!userEnabled) {          setFailedUserId(DNUtils.DNtoName(token));          throw new AuthException(AMAuthErrorCode.AUTH_USER_INACTIVE,null);        }        if (indexType == AuthContext.IndexType.ROLE) {          userRoleFound=getUserRoleFound(userRoleFoundMap);          if (!userRoleFound) {            logFailed(AuthUtils.getErrorVal(AMAuthErrorCode.AUTH_USER_NOT_FOUND,AuthUtils.ERROR_MESSAGE),"USERNOTFOUND");            auditor.auditLoginFailure(this,USER_NOT_FOUND);            throw new AuthException(AMAuthErrorCode.AUTH_USER_NOT_FOUND,null);          }          DEBUG.message("userRoleFound:true");        }        gotUserProfile=getGotUserProfile(gotUserProfileMap);        DEBUG.message("userEnabled : true");        if ((gotUserProfile) && (!foundUserAlias)) {          if (createWithAlias) {            if (DEBUG.messageEnabled()) {              DEBUG.message("dynamicProfileCreation : " + dynamicProfileCreation);              DEBUG.message("foundUserAliasMap : " + foundAliasMap);              DEBUG.message("foundUserAliasMap : " + foundUserAlias);            }            addAliasToUserProfile(validToken,foundAliasMap);          } else {            throw new AuthException(AMAuthErrorCode.AUTH_LOGIN_FAILED,null);          }        }        if (createWithAlias && !gotUserProfile) {          gotUserProfile=createUserProfileForTokens(tokenSet);        }      }    }    if (DEBUG.messageEnabled()) {      DEBUG.message("LoginState:searchUserProfile:returning: " + gotUserProfile);    }    return gotUserProfile;  } catch (  AuthException e) {    throw new AuthException(e);  }catch (  Exception e) {    DEBUG.error("Error retrieving profile",e);    throw new AuthException(e);  }}  }
class C{  @Override public void perform() throws UpgradeException {  for (  Map.Entry<String,Set<Privilege>> entry : privilegesToUpgrade.entrySet()) {    String realm=entry.getKey();    getApplicationService(SUPER_ADMIN_SUBJECT,realm).clearCache();    PrivilegeManager privilegeManager=getPrivilegeManager(realm);    for (    Privilege privilege : entry.getValue()) {      privilege.getEntitlement().clearCache();      try {        addResourceType(privilege,realm);        privilegeManager.modify(privilege.getName(),privilege);      } catch (      EntitlementException e) {        DEBUG.error("Failed to modify privilege!",e);        throw new UpgradeException("Failed to modify privilege!",e);      }    }  }}  }
class C{  public static void init(@NonNull Context context){  mAppContext=context;}  }
class C{  private final String _findDecodedFromSymbols(int len) throws IOException {  if ((_inputEnd - _inputPtr) < len) {    _loadToHaveAtLeast(len);  }  if (len < 5) {    int inPtr=_inputPtr;    final byte[] inBuf=_inputBuffer;    int q=inBuf[inPtr] & 0xFF;    if (--len > 0) {      q=(q << 8) + (inBuf[++inPtr] & 0xFF);      if (--len > 0) {        q=(q << 8) + (inBuf[++inPtr] & 0xFF);        if (--len > 0) {          q=(q << 8) + (inBuf[++inPtr] & 0xFF);        }      }    }    _quad1=q;    return _symbols.findName(q);  }  if (len < 9) {    int inPtr=_inputPtr;    final byte[] inBuf=_inputBuffer;    int q1=(inBuf[inPtr] & 0xFF) << 8;    q1+=(inBuf[++inPtr] & 0xFF);    q1<<=8;    q1+=(inBuf[++inPtr] & 0xFF);    q1<<=8;    q1+=(inBuf[++inPtr] & 0xFF);    int q2=(inBuf[++inPtr] & 0xFF);    len-=5;    if (len > 0) {      q2=(q2 << 8) + (inBuf[++inPtr] & 0xFF);      if (--len > 0) {        q2=(q2 << 8) + (inBuf[++inPtr] & 0xFF);        if (--len > 0) {          q2=(q2 << 8) + (inBuf[++inPtr] & 0xFF);        }      }    }    _quad1=q1;    _quad2=q2;    return _symbols.findName(q1,q2);  }  return _findDecodedMedium(len);}  }
class C{  protected void service(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  if (lbCookieName == null || lbCookieValue == null) {    initLbCookieSettings();  }  response.addHeader("Cache-Control","no-store, no-cache, must-revalidate, max-age=0");  response.addHeader("Pragma","no-cache");  IdentityServicesImpl security=this.factory.newInstance();  SecurityMethod.execute(security,request,response);  setLbCookie(request,response);}  }
class C{  int findInCharMap(int ch){  if (charMap == null || charMap.length == 0) {    return -1;  }  int top, bottom, current;  bottom=0;  top=charMap.length;  current=top / 2;  while (top - bottom > 1) {    if (ch >= charMap[current][0][0]) {      bottom=current;    } else {      top=current;    }    current=(top + bottom) / 2;  }  if (ch == charMap[current][0][0])   return current; else   return -1;}  }
class C{  protected ConnectionStateTLS(SSLSessionImpl session){  try {    CipherSuite cipherSuite=session.cipherSuite;    hash_size=cipherSuite.getMACLength();    boolean is_exportabe=cipherSuite.isExportable();    int key_size=(is_exportabe) ? cipherSuite.keyMaterial : cipherSuite.expandedKeyMaterial;    int iv_size=cipherSuite.ivSize;    block_size=cipherSuite.getBlockSize();    String algName=cipherSuite.getBulkEncryptionAlgorithm();    String macName=cipherSuite.getHmacName();    if (logger != null) {      logger.println("ConnectionStateTLS.create:");      logger.println("  cipher suite name: " + cipherSuite.getName());      logger.println("  encryption alg name: " + algName);      logger.println("  mac alg name: " + macName);      logger.println("  hash size: " + hash_size);      logger.println("  block size: " + block_size);      logger.println("  IV size:" + iv_size);      logger.println("  key size: " + key_size);    }    byte[] clientRandom=session.clientRandom;    byte[] serverRandom=session.serverRandom;    byte[] key_block=new byte[2 * hash_size + 2 * key_size + 2 * iv_size];    byte[] seed=new byte[clientRandom.length + serverRandom.length];    System.arraycopy(serverRandom,0,seed,0,serverRandom.length);    System.arraycopy(clientRandom,0,seed,serverRandom.length,clientRandom.length);    PRF.computePRF(key_block,session.master_secret,KEY_EXPANSION_LABEL,seed);    byte[] client_mac_secret=new byte[hash_size];    byte[] server_mac_secret=new byte[hash_size];    byte[] client_key=new byte[key_size];    byte[] server_key=new byte[key_size];    boolean is_client=!session.isServer;    System.arraycopy(key_block,0,client_mac_secret,0,hash_size);    System.arraycopy(key_block,hash_size,server_mac_secret,0,hash_size);    System.arraycopy(key_block,2 * hash_size,client_key,0,key_size);    System.arraycopy(key_block,2 * hash_size + key_size,server_key,0,key_size);    IvParameterSpec clientIV=null;    IvParameterSpec serverIV=null;    if (is_exportabe) {      System.arraycopy(clientRandom,0,seed,0,clientRandom.length);      System.arraycopy(serverRandom,0,seed,clientRandom.length,serverRandom.length);      byte[] final_client_key=new byte[cipherSuite.expandedKeyMaterial];      byte[] final_server_key=new byte[cipherSuite.expandedKeyMaterial];      PRF.computePRF(final_client_key,client_key,CLIENT_WRITE_KEY_LABEL,seed);      PRF.computePRF(final_server_key,server_key,SERVER_WRITE_KEY_LABEL,seed);      client_key=final_client_key;      server_key=final_server_key;      if (block_size != 0) {        byte[] iv_block=new byte[2 * iv_size];        PRF.computePRF(iv_block,null,IV_BLOCK_LABEL,seed);        clientIV=new IvParameterSpec(iv_block,0,iv_size);        serverIV=new IvParameterSpec(iv_block,iv_size,iv_size);      }    } else     if (block_size != 0) {      clientIV=new IvParameterSpec(key_block,2 * (hash_size + key_size),iv_size);      serverIV=new IvParameterSpec(key_block,2 * (hash_size + key_size) + iv_size,iv_size);    }    if (logger != null) {      logger.println("is exportable: " + is_exportabe);      logger.println("master_secret");      logger.print(session.master_secret);      logger.println("client_random");      logger.print(clientRandom);      logger.println("server_random");      logger.print(serverRandom);      logger.println("client_mac_secret");      logger.print(client_mac_secret);      logger.println("server_mac_secret");      logger.print(server_mac_secret);      logger.println("client_key");      logger.print(client_key);      logger.println("server_key");      logger.print(server_key);      if (clientIV == null) {        logger.println("no IV.");      } else {        logger.println("client_iv");        logger.print(clientIV.getIV());        logger.println("server_iv");        logger.print(serverIV.getIV());      }    }    if (algName == null) {      encCipher=new NullCipher();      decCipher=new NullCipher();    } else {      encCipher=Cipher.getInstance(algName);      decCipher=Cipher.getInstance(algName);      if (is_client) {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);      } else {        encCipher.init(Cipher.ENCRYPT_MODE,new SecretKeySpec(server_key,algName),serverIV);        decCipher.init(Cipher.DECRYPT_MODE,new SecretKeySpec(client_key,algName),clientIV);      }    }    encMac=Mac.getInstance(macName);    decMac=Mac.getInstance(macName);    if (is_client) {      encMac.init(new SecretKeySpec(client_mac_secret,macName));      decMac.init(new SecretKeySpec(server_mac_secret,macName));    } else {      encMac.init(new SecretKeySpec(server_mac_secret,macName));      decMac.init(new SecretKeySpec(client_mac_secret,macName));    }  } catch (  Exception e) {    e.printStackTrace();    throw new AlertException(AlertProtocol.INTERNAL_ERROR,new SSLProtocolException("Error during computation of security parameters"));  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void unbox(final Type type){  Type t=NUMBER_TYPE;  Method sig=null;switch (type.getSort()) {case Type.VOID:    return;case Type.CHAR:  t=CHARACTER_TYPE;sig=CHAR_VALUE;break;case Type.BOOLEAN:t=BOOLEAN_TYPE;sig=BOOLEAN_VALUE;break;case Type.DOUBLE:sig=DOUBLE_VALUE;break;case Type.FLOAT:sig=FLOAT_VALUE;break;case Type.LONG:sig=LONG_VALUE;break;case Type.INT:case Type.SHORT:case Type.BYTE:sig=INT_VALUE;}if (sig == null) {checkCast(type);} else {checkCast(t);invokeVirtual(t,sig);}}  }
class C{  protected void fireMenuKeyTyped(MenuKeyEvent event){  if (DEBUG) {    System.out.println("in JMenuItem.fireMenuKeyTyped for " + getText() + "  "+ KeyStroke.getKeyStrokeForEvent(event));  }  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == MenuKeyListener.class) {      ((MenuKeyListener)listeners[i + 1]).menuKeyTyped(event);    }  }}  }
class C{  public JsonValue build(){  return new JsonValue(content);}  }
class C{  public SAMLRequestVersionTooHighException(String rbName,String errorCode,Object[] args){  super(rbName,errorCode,args);}  }
class C{  public static IOFileFilter suffixFileFilter(String suffix){  return new SuffixFileFilter(suffix);}  }
class C{  private boolean validateProperties(Map properties) throws PolicyException {  if ((properties == null) || (properties.keySet() == null)) {    throw new PolicyException(ResBundleUtils.rbName,"properties_can_not_be_null_or_empty",null,null);  }  Set keySet=properties.keySet();  if (!keySet.contains(LDAP_FILTER)) {    String args[]={LDAP_FILTER};    throw new PolicyException(ResBundleUtils.rbName,"property_value_not_defined",args,null);  }  Iterator keys=keySet.iterator();  while (keys.hasNext()) {    String key=(String)keys.next();    if (!LDAP_FILTER.equals(key)) {      String args[]={key};      throw new PolicyException(ResBundleUtils.rbName,"attempt_to_set_invalid_property",args,null);    }  }  Collection ldapFilterCollection=(Collection)properties.get(LDAP_FILTER);  if (ldapFilterCollection != null) {    validateLdapFilterCollection(ldapFilterCollection);  }  return true;}  }
class C{  public static void writeFile(String toWrite,String fileName) throws FileNotFoundException, UnsupportedEncodingException {  logger.debug("Writing file: " + fileName);  PrintWriter writer=null;  try {    writer=new PrintWriter(fileName,"UTF-8");    writer.println(toWrite);  }  finally {    if (writer != null) {      writer.close();    }  }}  }
class C{  public AgentConfigInheritViewBean(){  super("AgentConfigInherit");  setDefaultDisplayURL(DEFAULT_DISPLAY_URL);}  }
class C{  public static boolean tryEnqueueRequest(Operation operation) throws DirectoryException {  checkCanEnqueueRequest(operation,false);  return directoryServer.workQueue.trySubmitOperation(operation);}  }
class C{  @Override public String toString(){  StringBuilder result=new StringBuilder();  result.append("path+params=");  result.append(path);  result.append(paramsToString());  result.append(" method: ");  result.append(httpMethod.toString());  if (postData.length() > 0) {    result.append(" post data ");    if (postData.toLowerCase().contains("password")) {      result.append(postData.length() + " bytes of POST data (hidden as it appears to contain a password)");    } else {      result.append(postData);    }  }  if (!headers.isEmpty()) {    result.append(" headers:");    result.append("\n");    result.append(headersToString());  }  return result.toString();}  }
class C{  public final void test_write$BII_3() throws NoSuchAlgorithmException, IOException {  assertTrue(MY_MESSAGE_LEN % (CHUNK_SIZE + 1) != 0);  for (int k=0; k < algorithmName.length; k++) {    try {      ByteArrayOutputStream bos=new ByteArrayOutputStream(MY_MESSAGE_LEN);      MessageDigest md=MessageDigest.getInstance(algorithmName[k]);      DigestOutputStream dos=new DigestOutputStream(bos,md);      for (int i=0; i < MY_MESSAGE_LEN / (CHUNK_SIZE + 1); i++) {        dos.write(myMessage,i * (CHUNK_SIZE + 1),CHUNK_SIZE + 1);      }      dos.write(myMessage,MY_MESSAGE_LEN / (CHUNK_SIZE + 1) * (CHUNK_SIZE + 1),MY_MESSAGE_LEN % (CHUNK_SIZE + 1));      assertTrue("write",Arrays.equals(myMessage,bos.toByteArray()));      assertTrue("update",Arrays.equals(dos.getMessageDigest().digest(),MDGoldenData.getDigest(algorithmName[k])));      return;    } catch (    NoSuchAlgorithmException e) {    }  }  fail(getName() + ": no MessageDigest algorithms available - test not performed");}  }
class C{  public void repair(Set<BrdItem> p_items_list){  IteraClearanceViolations clearance_violations=new IteraClearanceViolations(p_items_list);  Iterator<BrdItemViolation> iter=clearance_violations.violation_list.iterator();  if (!iter.hasNext())   return;  int violation_count=clearance_violations.violation_list.size();  if (debug(Mdbg.CLRVIOL,Ldbg.DEBUG))   i_brd.userPrintln(classname + "repair: violation_count=" + violation_count);  BrdItemViolation a_viol=iter.next();  if (debug(Mdbg.CLRVIOL,Ldbg.FINE)) {    StringBuilder builder=new StringBuilder(500);    builder.append("violation center" + a_viol.shape.centre_of_gravity());    builder.append(" min_radius=" + a_viol.shape.min_width());    i_brd.userPrintln(builder.toString());  }  repair(a_viol);}  }
class C{  void resetDoubleBuffer(){  if (standardDoubleBuffer != null) {    standardDoubleBuffer.needsReset=true;  }}  }
class C{  public final void testFieldsGetDigestAlgorithm(){  assertEquals("SHA-1",MGF1ParameterSpec.SHA1.getDigestAlgorithm());  assertEquals("SHA-256",MGF1ParameterSpec.SHA256.getDigestAlgorithm());  assertEquals("SHA-384",MGF1ParameterSpec.SHA384.getDigestAlgorithm());  assertEquals("SHA-512",MGF1ParameterSpec.SHA512.getDigestAlgorithm());}  }
class C{  public void removeVetoableChangeListener(VetoableChangeListener listener){  if (listener == null) {    return;  }  if (listener instanceof VetoableChangeListenerProxy) {    VetoableChangeListenerProxy proxy=(VetoableChangeListenerProxy)listener;    removeVetoableChangeListener(proxy.getPropertyName(),proxy.getListener());  } else {    this.map.remove(null,listener);  }}  }
class C{  public String toXML(){  StringBuilder stringBuilder=new StringBuilder();  return stringBuilder.toString();}  }
class C{  public boolean isContinuousLayout(){  return continuousLayout;}  }
class C{  private void updateDataArray(){  TreeSet<BackendDescriptor> sortedSet=new TreeSet<>(this);  sortedSet.addAll(data);  dataArray.clear();  for (  BackendDescriptor ach : sortedSet) {    String[] s=getLine(ach);    dataArray.add(s);  }  String[] line=new String[attributes.size() + 1];  line[0]="<html><b>" + INFO_CTRL_PANEL_TOTAL_LABEL.get() + "</b>";  for (int i=1; i < line.length; i++) {    boolean valueSet=false;    boolean notImplemented=false;    long totalValue=0;    for (    String[] l : dataArray) {      String value=l[i];      try {        long v=Long.parseLong(value);        totalValue+=v;        valueSet=true;      } catch (      Throwable t) {        try {          double v=Double.parseDouble(value);          totalValue+=v;          valueSet=true;        } catch (        Throwable t2) {          notImplemented=NOT_IMPLEMENTED.toString().equals(value);        }      }    }    if (notImplemented) {      line[i]=NOT_IMPLEMENTED.toString();    } else     if (valueSet) {      line[i]=String.valueOf(totalValue);    } else {      line[i]=NO_VALUE_SET.toString();    }  }  dataArray.add(line);}  }
class C{  private void cancelClicked(){  isCanceled=true;  dispose();}  }
class C{  public IMP_LIMIT(String s,int minor,CompletionStatus completed){  super(s,minor,completed);}  }
class C{  public PdfPage addNewPage(){  return addNewPage(getDefaultPageSize());}  }
class C{  public void handleTblRequestHandlerListHrefDupActionRequest(RequestInvocationEvent event) throws ModelControlException {  try {    Map values=getValues();    onBeforeSaveProfile(values);    setPageSessionAttribute(PROPERTY_ATTRIBUTE,(HashMap)values);    SCSOAPBindingRequestHandlerListDupViewBean vb=(SCSOAPBindingRequestHandlerListDupViewBean)getViewBean(SCSOAPBindingRequestHandlerListDupViewBean.class);    unlockPageTrail();    passPgSessionMap(vb);    int idx=Integer.parseInt((String)getDisplayFieldValue(TBL_REQUEST_HANDLER_LIST_HREF_DUP_ACTION));    vb.setDupIndex(idx);    vb.forwardTo(getRequestContext());  } catch (  AMConsoleException e) {    setInlineAlertMessage(CCAlert.TYPE_ERROR,"message.error",e.getMessage());  }}  }
class C{  public static List<Foo> toModels(FooSoap[] soapModels){  if (soapModels == null) {    return null;  }  List<Foo> models=new ArrayList<Foo>(soapModels.length);  for (  FooSoap soapModel : soapModels) {    models.add(toModel(soapModel));  }  return models;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList acronymList;  Node testNode;  NamedNodeMap attributes;  Attr titleAttr;  String value;  Text terNode;  Text dayNode;  DocumentFragment docFrag;  Node retval;  Node firstChild;  Node lastChild;  Node refChild;  doc=(Document)load("hc_staff",true);  acronymList=doc.getElementsByTagName("acronym");  testNode=acronymList.item(3);  attributes=testNode.getAttributes();  titleAttr=(Attr)attributes.getNamedItem("title");  terNode=doc.createTextNode("ter");  dayNode=doc.createTextNode("day");  docFrag=doc.createDocumentFragment();  retval=docFrag.appendChild(terNode);  retval=docFrag.appendChild(dayNode);  refChild=titleAttr.getFirstChild();  retval=titleAttr.insertBefore(docFrag,refChild);  value=titleAttr.getValue();  assertEquals("attrValue","terdayYes",value);  value=titleAttr.getNodeValue();  assertEquals("attrNodeValue","terdayYes",value);  value=retval.getNodeValue();  assertNull("retvalValue",value);  firstChild=titleAttr.getFirstChild();  value=firstChild.getNodeValue();  assertEquals("firstChildValue","ter",value);  lastChild=titleAttr.getLastChild();  value=lastChild.getNodeValue();  assertEquals("lastChildValue","Yes",value);}  }
class C{  public com.sun.identity.saml2.jaxb.assertion.AssertionType createAssertionType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.assertion.impl.AssertionTypeImpl();}  }
class C{  public static boolean isPackage(Element element){  if (element.getTokenType() == TokenType.VALID_NAME && element.hasNext()) {    Node next=element.next();    if (next instanceof Element) {      String nextContent=((Element)next).getContent();      if (nextContent.equals("::") && next.hasNext()) {        Node nextNext=next.next();        if (nextNext instanceof Element) {          return nextNext.getTokenType() == TokenType.VALID_NAME;        }      }    }  }  return false;}  }
class C{  public boolean is_legal(){  if (left_triangle == null || right_triangle == null) {    return true;  }  PlaDelTriCorner left_opposite_corner=left_triangle.opposite_corner(this);  PlaDelTriCorner right_opposite_corner=right_triangle.opposite_corner(this);  boolean inside_circle=right_opposite_corner.coor.to_float().inside_circle(this.start_corner.coor.to_float(),left_opposite_corner.coor.to_float(),this.end_corner.coor.to_float());  return !inside_circle;}  }
class C{  static void useAssertionControl(Connection connection) throws LdapException {  if (isSupported(AssertionRequestControl.OID)) {    final String dn="uid=bjensen,ou=People,dc=example,dc=com";    final ModifyRequest request=Requests.newModifyRequest(dn).addControl(AssertionRequestControl.newControl(true,Filter.valueOf("!(description=*)"))).addModification(ModificationType.ADD,"description","Created using LDAP assertion control");    connection.modify(request);    try (final LDIFEntryWriter writer=new LDIFEntryWriter(System.out)){      writer.writeEntry(connection.readEntry(dn,"description"));    } catch (    final IOException e) {      System.err.println(e.getMessage());      System.exit(ResultCode.CLIENT_SIDE_LOCAL_ERROR.intValue());    }  } else {    System.err.println("AssertionRequestControl not supported.");  }}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  SSOToken adminSSOToken=getAdminSSOToken();  IOutput outputWriter=getOutputWriter();  String realm=getStringOptionValue(IArgument.REALM_NAME);  String idName=getStringOptionValue(ARGUMENT_ID_NAME);  String type=getStringOptionValue(ARGUMENT_ID_TYPE);  IdType idType=convert2IdType(type);  String memberIdName=getStringOptionValue(ARGUMENT_MEMBER_IDNAME);  String memberType=getStringOptionValue(ARGUMENT_MEMBER_IDTYPE);  IdType memberIdType=convert2IdType(memberType);  String[] params={realm,type,idName,memberIdName,memberType};  try {    AMIdentityRepository amir=new AMIdentityRepository(adminSSOToken,realm);    Set memberOfs=memberIdType.canBeMemberOf();    if (!memberOfs.contains(idType)) {      String[] args={type,memberType};      throw new CLIException(MessageFormat.format(getResourceString("idrepo-cannot-be-member"),(Object[])args),ExitCodes.REQUEST_CANNOT_BE_PROCESSED);    }    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_IDREPO_REMOVE_MEMBER",params);    AMIdentity amid=new AMIdentity(adminSSOToken,idName,idType,realm,null);    AMIdentity memberAmid=new AMIdentity(adminSSOToken,memberIdName,memberIdType,realm,null);    String[] args={memberIdName,idName};    amid.removeMember(memberAmid);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("idrepo-get-removemember-succeed"),(Object[])args));    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_IDREPO_REMOVE_MEMBER",params);  } catch (  IdRepoException e) {    String[] args={realm,type,idName,memberIdName,memberType,e.getMessage()};    debugError("RemoveMember.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_REMOVE_MEMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SSOException e) {    String[] args={realm,type,idName,memberIdName,memberType,e.getMessage()};    debugError("RemoveMember.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_IDREPO_REMOVE_MEMBER",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public static boolean apply(JsonValue subject,List<PatchOperation> operations) throws ResourceException {  return apply(subject,operations,NullTransformer.NULL_TRANSFORMER);}  }
class C{  public boolean contains(long prefix_hash){  if (prefix_hash == 0) {    return false;  }  int idx=-1 * Arrays.binarySearch(hashes_idx,prefix_hash) - 1;  if (idx == cache_size) {    return false;  } else {    return (hashes_idx[idx] & PREFIX_HASH_MASK) == prefix_hash;  }}  }
class C{  public AssertionError(int detailMessage){  this(String.valueOf(detailMessage));}  }
class C{  private void initializePath(String p_uriSpec) throws MalformedURIException {  if (p_uriSpec == null) {    throw new MalformedURIException("Cannot initialize path from null string!");  }  int index=0;  int start=0;  int end=p_uriSpec.length();  char testChar='\0';  while (index < end) {    testChar=p_uriSpec.charAt(index);    if (testChar == '?' || testChar == '#') {      break;    }    if (testChar == '%') {      if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {        throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_CONTAINS_INVALID_ESCAPE_SEQUENCE,null));      }    } else     if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {      if ('\\' != testChar)       throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_PATH_INVALID_CHAR,new Object[]{String.valueOf(testChar)}));    }    index++;  }  m_path=p_uriSpec.substring(start,index);  if (testChar == '?') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '#') {        break;      }      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Query string contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Query string contains invalid character:" + testChar);      }      index++;    }    m_queryString=p_uriSpec.substring(start,index);  }  if (testChar == '#') {    index++;    start=index;    while (index < end) {      testChar=p_uriSpec.charAt(index);      if (testChar == '%') {        if (index + 2 >= end || !isHex(p_uriSpec.charAt(index + 1)) || !isHex(p_uriSpec.charAt(index + 2))) {          throw new MalformedURIException("Fragment contains invalid escape sequence!");        }      } else       if (!isReservedCharacter(testChar) && !isUnreservedCharacter(testChar)) {        throw new MalformedURIException("Fragment contains invalid character:" + testChar);      }      index++;    }    m_fragment=p_uriSpec.substring(start,index);  }}  }
class C{  @Override public String toString(){  return String.format("ContentLength=%s, ContentType=%s",Long.valueOf(this.contentLength()),this.getContentType());}  }
class C{  static void calculateIV(byte[] initIV,long counter,byte[] IV){  Utils.checkArgument(initIV.length == CryptoCipherFactory.AES_BLOCK_SIZE);  Utils.checkArgument(IV.length == CryptoCipherFactory.AES_BLOCK_SIZE);  int i=IV.length;  int j=0;  int sum=0;  while (i-- > 0) {    sum=(initIV[i] & 0xff) + (sum >>> Byte.SIZE);    if (j++ < 8) {      sum+=(byte)counter & 0xff;      counter>>>=8;    }    IV[i]=(byte)sum;  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeattributenodetype.class,args);}  }
class C{  private final void toString(StringBuilder buffer){  buffer.append("(version ").append(this.version);  buffer.append("; acl \"").append(this.name).append("\"; ");  for (  PermBindRulePair pair : this.permBindRulePairs) {    pair.toString(buffer);  }}  }
class C{  protected void addNode(FHTreeStateNode newChild){  boolean added=false;  int childIndex=newChild.getChildIndex();  for (int counter=0, maxCounter=getChildCount(); counter < maxCounter; counter++) {    if (((FHTreeStateNode)getChildAt(counter)).getChildIndex() > childIndex) {      added=true;      insert(newChild,counter);      counter=maxCounter;    }  }  if (!added)   add(newChild);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();}  }
class C{  private ReplicationBroker createReplicationBroker(int dsId,ServerState state,long generationId) throws Exception {  SortedSet<String> replServers=newTreeSet("localhost:" + rs1Port);  DomainFakeCfg fakeCfg=new DomainFakeCfg(EXAMPLE_DN_,dsId,replServers);  fakeCfg.setHeartbeatInterval(0);  fakeCfg.setChangetimeHeartbeatInterval(500);  ReplSessionSecurity security=new ReplSessionSecurity(null,null,null,true);  ReplicationBroker broker=new ReplicationBroker(new DummyReplicationDomain(generationId),state,fakeCfg,security);  broker.start();  checkConnection(30,broker);  return broker;}  }
class C{  private int internalAwaitAdvance(int phase,QNode node){  releaseWaiters(phase - 1);  boolean queued=false;  int lastUnarrived=0;  int spins=SPINS_PER_ARRIVAL;  long s;  int p;  while ((p=(int)((s=state) >>> PHASE_SHIFT)) == phase) {    if (node == null) {      int unarrived=(int)s & UNARRIVED_MASK;      if (unarrived != lastUnarrived && (lastUnarrived=unarrived) < NCPU)       spins+=SPINS_PER_ARRIVAL;      boolean interrupted=Thread.interrupted();      if (interrupted || --spins < 0) {        node=new QNode(this,phase,false,false,0L);        node.wasInterrupted=interrupted;      }    } else     if (node.isReleasable())     break; else     if (!queued) {      AtomicReference<QNode> head=(phase & 1) == 0 ? evenQ : oddQ;      QNode q=node.next=head.get();      if ((q == null || q.phase == phase) && (int)(state >>> PHASE_SHIFT) == phase)       queued=head.compareAndSet(q,node);    } else {      try {        ForkJoinPool.managedBlock(node);      } catch (      InterruptedException ie) {        node.wasInterrupted=true;      }    }  }  if (node != null) {    if (node.thread != null)     node.thread=null;    if (node.wasInterrupted && !node.interruptible)     Thread.currentThread().interrupt();    if (p == phase && (p=(int)(state >>> PHASE_SHIFT)) == phase)     return abortWait(phase);  }  releaseWaiters(phase);  return p;}  }
class C{  @Override public StringBuffer format(long value,StringBuffer buffer,FieldPosition field){  return format((double)value,buffer,field);}  }
class C{  @SuppressWarnings("unused") public static RectF resetRectToOrigin(RectF rect){  RectF newRect=new RectF(rect);  newRect.offset(-newRect.left,-newRect.top);  return newRect;}  }
class C{  public void sessionInvalidated(Object session){  String classMethod="IDPSessionListener.sessionInvalidated: ";  HashMap paramsMap=new HashMap();  if (SAML2Utils.debug.messageEnabled()) {    SAML2Utils.debug.message(classMethod + "Entering ...");  }  if (session == null) {    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "Session is null.");    }    return;  }  try {    SessionProvider sessionProvider=SessionManager.getProvider();    String[] values=sessionProvider.getProperty(session,SAML2Constants.IDP_SESSION_INDEX);    if (values == null || values.length == 0) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + "No sessionIndex stored in session.");      }      return;    }    String sessionIndex=values[0];    if (sessionIndex == null || sessionIndex.length() == 0) {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + "No sessionIndex stored in session.");      }      return;    }    IDPSession idpSession=(IDPSession)IDPCache.idpSessionsByIndices.get(sessionIndex);    if (idpSession != null) {      paramsMap.put(SAML2Constants.ROLE,SAML2Constants.IDP_ROLE);      String metaAlias=idpSession.getMetaAlias();      String realm=SAML2Utils.getRealm(SAML2MetaUtils.getRealmByMetaAlias(metaAlias));      String idpEntityID=sm.getEntityByMetaAlias(metaAlias);      try {        List list=(List)idpSession.getNameIDandSPpairs();        for (Iterator iter=list.iterator(); iter.hasNext(); ) {          NameIDandSPpair pair=(NameIDandSPpair)iter.next();          String spEntityID=pair.getSPEntityID();          NameID nameID=pair.getNameID();          BaseConfigType idpConfig=sm.getIDPSSOConfig(realm,idpEntityID);          if (idpConfig != null) {            List idpSessionSyncList=(List)SAML2MetaUtils.getAttributes(idpConfig).get(SAML2Constants.IDP_SESSION_SYNC_ENABLED);            if ((idpEntityID != null && spEntityID != null && idpSessionSyncList != null && idpSessionSyncList.size() != 0)) {              boolean idpSessionSyncEnabled=((String)idpSessionSyncList.get(0)).equals(SAML2Constants.TRUE) ? true : false;              if (idpSessionSyncEnabled) {                if (SAML2Utils.debug.messageEnabled()) {                  SAML2Utils.debug.message(classMethod + "IDP Session Synchronization flag " + "is enabled, initiating SLO to SP");                }                initiateIDPSingleLogout(sessionIndex,metaAlias,realm,SAML2Constants.SOAP,nameID,spEntityID,paramsMap);              }            }          } else {            if (SAML2Utils.debug.messageEnabled()) {              SAML2Utils.debug.message(classMethod + "Unable to retrieve the IDP " + "config data, idpConfig is null");            }          }        }      } catch (      SAML2MetaException sme) {        SAML2Utils.debug.error("IDPSessionListener.sessionInvalidated:",sme);      }catch (      SAML2Exception se) {        SAML2Utils.debug.error("IDPSessionListener.sessionInvalidated:",se);      }catch (      SessionException s) {        SAML2Utils.debug.error("IDPSessionListener.sessionInvalidated:",s);      }synchronized (IDPCache.idpSessionsByIndices) {        List list=(List)idpSession.getNameIDandSPpairs();        for (Iterator iter=list.iterator(); iter.hasNext(); ) {          NameIDandSPpair pair=(NameIDandSPpair)iter.next();          NameID nameID=pair.getNameID();          if (SAML2Constants.NAMEID_TRANSIENT_FORMAT.equals(nameID.getFormat())) {            IDPCache.userIDByTransientNameIDValue.remove(nameID.getValue());          }        }      }    } else {      if (SAML2Utils.debug.messageEnabled()) {        SAML2Utils.debug.message(classMethod + "IDP Session with session index " + sessionIndex+ " already removed.");      }    }    IDPCache.idpSessionsByIndices.remove(sessionIndex);    IDPCache.authnContextCache.remove(sessionIndex);    String sessID=sessionProvider.getSessionID(session);    if (IDPCache.idpSessionsBySessionID.get(sessID) != null) {      IDPCache.idpSessionsBySessionID.remove(sessID);      if ((agent != null) && agent.isRunning() && (saml2Svc != null)) {        saml2Svc.setIdpSessionCount((long)IDPCache.idpSessionsBySessionID.size());      }    }    if (IDPCache.spSessionPartnerBySessionID.get(sessID) != null) {      IDPCache.spSessionPartnerBySessionID.remove(sessID);    }    try {      if (SAML2FailoverUtils.isSAML2FailoverEnabled()) {        SAML2FailoverUtils.deleteSAML2Token(sessionIndex);      }    } catch (    SAML2TokenRepositoryException se) {      SAML2Utils.debug.error(classMethod + "SAML2 Token Repository error, sessionIndex:" + sessionIndex,se);    }    if (SAML2Utils.debug.messageEnabled()) {      SAML2Utils.debug.message(classMethod + "cleaned up the IDP session cache for a session expiring or being destroyed: sessionIndex=" + sessionIndex);    }  } catch (  SessionException e) {    if (SAML2Utils.debug.warningEnabled()) {      SAML2Utils.debug.warning(classMethod + "invalid or expired session.",e);    }  }catch (  SAML2MetaException samlme) {    if (SAML2Utils.debug.warningEnabled()) {      SAML2Utils.debug.warning(classMethod + "unable to retrieve idp entity id.",samlme);    }  }}  }
class C{  public static Message sendRequest(Message req,String connectTo,String certAlias) throws SOAPBindingException, SOAPFaultException {  return sendRequest(req,connectTo,certAlias,null);}  }
class C{  private void save() throws DirectoryException {synchronized (saveLock) {    final String path=DirectoryServer.getInstanceRoot() + File.separator + CONFIG_DIR_NAME+ File.separator+ COMPRESSED_SCHEMA_FILE_NAME;    final String tempPath=path + ".tmp";    try (FileOutputStream outputStream=new FileOutputStream(tempPath)){      final ASN1Writer writer=ASN1.getWriter(outputStream);      writer.writeStartSequence();      int ocCounter=1;      for (      final Entry<byte[],Collection<String>> mapEntry : getAllObjectClasses()) {        writer.writeStartSequence();        writer.writeOctetString(ByteString.wrap(mapEntry.getKey()));        final Collection<String> objectClassNames=mapEntry.getValue();        for (        final String ocName : objectClassNames) {          writer.writeOctetString(ocName);        }        writer.writeEndSequence();        ocCounter++;      }      writer.writeEndSequence();      writer.writeInteger(ocCounter);      writer.writeStartSequence();      int adCounter=1;      for (      final Entry<byte[],Entry<String,Iterable<String>>> mapEntry : getAllAttributes()) {        writer.writeStartSequence();        writer.writeOctetString(ByteString.wrap(mapEntry.getKey()));        writer.writeOctetString(mapEntry.getValue().getKey());        for (        final String option : mapEntry.getValue().getValue()) {          writer.writeOctetString(option);        }        writer.writeEndSequence();        adCounter++;      }      writer.writeEndSequence();      writer.writeInteger(adCounter);      outputStream.close();      final File liveFile=new File(path);      final File tempFile=new File(tempPath);      if (liveFile.exists()) {        final File saveFile=new File(liveFile.getAbsolutePath() + ".save");        if (saveFile.exists()) {          saveFile.delete();        }        liveFile.renameTo(saveFile);      }      tempFile.renameTo(liveFile);    } catch (    final Exception e) {      logger.traceException(e);      final LocalizableMessage message=ERR_COMPRESSEDSCHEMA_CANNOT_WRITE_UPDATED_DATA.get(stackTraceToSingleLineString(e));      throw new DirectoryException(DirectoryServer.getServerErrorResultCode(),message,e);    }  }}  }
class C{  protected void reportWrongNumberArgs() throws WrongNumberArgsException {  throw new WrongNumberArgsException(XSLMessages.createXPATHMessage("zero",null));}  }
class C{  public boolean isOptionAlias(String name){  return setOptionAliases.contains(name);}  }
class C{  public void connect(SocketAddress endpoint,int timeout) throws IOException {  if (endpoint == null)   throw new IllegalArgumentException("connect: The address can't be null");  if (timeout < 0)   throw new IllegalArgumentException("connect: timeout can't be negative");  if (isClosed())   throw new SocketException("Socket is closed");  if (!oldImpl && isConnected())   throw new SocketException("already connected");  if (!(endpoint instanceof InetSocketAddress))   throw new IllegalArgumentException("Unsupported address type");  InetSocketAddress epoint=(InetSocketAddress)endpoint;  InetAddress addr=epoint.getAddress();  int port=epoint.getPort();  checkAddress(addr,"connect");  SecurityManager security=System.getSecurityManager();  if (security != null) {    if (epoint.isUnresolved())     security.checkConnect(epoint.getHostName(),port); else     security.checkConnect(addr.getHostAddress(),port);  }  if (!created)   createImpl(true);  if (!oldImpl)   impl.connect(epoint,timeout); else   if (timeout == 0) {    if (epoint.isUnresolved())     impl.connect(addr.getHostName(),port); else     impl.connect(addr,port);  } else   throw new UnsupportedOperationException("SocketImpl.connect(addr, timeout)");  connected=true;  bound=true;}  }
class C{  @Deprecated protected InputStream renderHtml(String contextPath,WebResource resource) throws IOException {  return renderHtml(contextPath,resource,null);}  }
class C{  public Result createResult(String xml) throws XACMLException {  Object object=XACMLSDKUtils.getObjectInstance(XACMLConstants.RESULT,xml);  if (object == null) {    return new ResultImpl(xml);  } else {    return (Result)object;  }}  }
class C{  public boolean isLoggingEnabled(int logLevel){  return logger.isEnabledFor(intToLevel(logLevel));}  }
class C{  public boolean hasMoreTokens(){  return (currentPosition >= maxPosition) ? false : true;}  }
class C{  protected RoutedRequest handleResponse(RoutedRequest roureq,HttpResponse response,HttpContext context) throws HttpException, IOException {  HttpRoute route=roureq.getRoute();  HttpHost proxy=route.getProxyHost();  RequestWrapper request=roureq.getRequest();  HttpParams params=request.getParams();  if (HttpClientParams.isRedirecting(params) && this.redirectHandler.isRedirectRequested(response,context)) {    if (redirectCount >= maxRedirects) {      throw new RedirectException("Maximum redirects (" + maxRedirects + ") exceeded");    }    redirectCount++;    URI uri=this.redirectHandler.getLocationURI(response,context);    HttpHost newTarget=new HttpHost(uri.getHost(),uri.getPort(),uri.getScheme());    HttpGet redirect=new HttpGet(uri);    HttpRequest orig=request.getOriginal();    redirect.setHeaders(orig.getAllHeaders());    RequestWrapper wrapper=new RequestWrapper(redirect);    wrapper.setParams(params);    HttpRoute newRoute=determineRoute(newTarget,wrapper,context);    RoutedRequest newRequest=new RoutedRequest(wrapper,newRoute);    if (this.log.isDebugEnabled()) {      this.log.debug("Redirecting to '" + uri + "' via "+ newRoute);    }    return newRequest;  }  CredentialsProvider credsProvider=(CredentialsProvider)context.getAttribute(ClientContext.CREDS_PROVIDER);  if (credsProvider != null && HttpClientParams.isAuthenticating(params)) {    if (this.targetAuthHandler.isAuthenticationRequested(response,context)) {      HttpHost target=(HttpHost)context.getAttribute(ExecutionContext.HTTP_TARGET_HOST);      if (target == null) {        target=route.getTargetHost();      }      this.log.debug("Target requested authentication");      Map<String,Header> challenges=this.targetAuthHandler.getChallenges(response,context);      try {        processChallenges(challenges,this.targetAuthState,this.targetAuthHandler,response,context);      } catch (      AuthenticationException ex) {        if (this.log.isWarnEnabled()) {          this.log.warn("Authentication error: " + ex.getMessage());          return null;        }      }      updateAuthState(this.targetAuthState,target,credsProvider);      if (this.targetAuthState.getCredentials() != null) {        return roureq;      } else {        return null;      }    } else {      this.targetAuthState.setAuthScope(null);    }    if (this.proxyAuthHandler.isAuthenticationRequested(response,context)) {      this.log.debug("Proxy requested authentication");      Map<String,Header> challenges=this.proxyAuthHandler.getChallenges(response,context);      try {        processChallenges(challenges,this.proxyAuthState,this.proxyAuthHandler,response,context);      } catch (      AuthenticationException ex) {        if (this.log.isWarnEnabled()) {          this.log.warn("Authentication error: " + ex.getMessage());          return null;        }      }      updateAuthState(this.proxyAuthState,proxy,credsProvider);      if (this.proxyAuthState.getCredentials() != null) {        return roureq;      } else {        return null;      }    } else {      this.proxyAuthState.setAuthScope(null);    }  }  return null;}  }
class C{  public static void deregisterSASLMechanismHandler(String name){  directoryServer.saslMechanismHandlers.remove(name);}  }
class C{  private void installEditorBorderListener(JComponent editor){  if (!UIManager.getBoolean("Spinner.editorBorderPainted")) {    if (editor instanceof JPanel && editor.getBorder() == null && editor.getComponentCount() > 0) {      editor=(JComponent)editor.getComponent(0);    }    if (editor != null && (editor.getBorder() == null || editor.getBorder() instanceof UIResource)) {      editor.addPropertyChangeListener(getHandler());    }  }}  }
class C{  public static long dynamicQueryCount(com.liferay.portal.kernel.dao.orm.DynamicQuery dynamicQuery){  return getService().dynamicQueryCount(dynamicQuery);}  }
class C{  public Referral removeReferral(String referralName){  return (Referral)referrals.remove(referralName);}  }
class C{  public boolean isEchoOn(){  return echoOn;}  }
class C{  public SchemaException(String s){  super(s);}  }
class C{  public JobService cardByType(String type,JobState state,Handler<AsyncResult<Long>> handler){  delegate.cardByType(type,state,handler);  return this;}  }
class C{  static void put(final AnnotationWriter[] panns,final int off,final ByteVector out){  int size=1 + 2 * (panns.length - off);  for (int i=off; i < panns.length; ++i) {    size+=panns[i] == null ? 0 : panns[i].getSize();  }  out.putInt(size).putByte(panns.length - off);  for (int i=off; i < panns.length; ++i) {    AnnotationWriter aw=panns[i];    AnnotationWriter last=null;    int n=0;    while (aw != null) {      ++n;      aw.visitEnd();      aw.prev=last;      last=aw;      aw=aw.next;    }    out.putShort(n);    aw=last;    while (aw != null) {      out.putByteArray(aw.bv.data,0,aw.bv.length);      aw=aw.prev;    }  }}  }
class C{  private static boolean isNameStartChar(char ch){  return (ch <= 0xFF && xmlNameStartChars[ch]) || (ch >= 0x100 && ch <= 0x2FF) || (ch >= 0x370 && ch <= 0x37D)|| (ch >= 0x37F && ch <= 0x1FFF)|| (ch >= 0x200C && ch <= 0x200D)|| (ch >= 0x2070 && ch <= 0x218F)|| (ch >= 0x2C00 && ch <= 0x2FEF)|| (ch >= 0x3001 && ch <= 0xD7FF)|| (ch >= 0xF900 && ch <= 0xFDCF)|| (ch >= 0xFDF0 && ch <= 0xFFFD)|| (ch >= 0x10000 && ch <= 0xEFFFF);}  }
class C{  @BeforeClass public void startServer() throws Exception {  TestCaseUtils.startServer();  schemaBackend=(SchemaBackend)DirectoryServer.getBackend("schema");  assertNotNull(schemaBackend);}  }
class C{  public SearchResultEntry searchSingleEntry(SearchRequest request) throws LdapException {  addControls(request);  return conn.getConnection().searchSingleEntry(request);}  }
class C{  public void collectDbStats(ArrayList<SQLiteDebug.DbStats> dbStatsList){synchronized (mLock) {    if (mAvailablePrimaryConnection != null) {      mAvailablePrimaryConnection.collectDbStats(dbStatsList);    }    for (    SQLiteConnection connection : mAvailableNonPrimaryConnections) {      connection.collectDbStats(dbStatsList);    }    for (    SQLiteConnection connection : mAcquiredConnections.keySet()) {      connection.collectDbStatsUnsafe(dbStatsList);    }  }}  }
class C{  public void printData(final String data){  passFirstSeparatorColumn();  printCell(data,Alignment.RIGHT);}  }
class C{  public void fling(int startX,int startY,int velocityX,int velocityY,int minX,int maxX,int minY,int maxY){  if (mFlywheel && !mFinished) {    float oldVel=getCurrVelocity();    float dx=(float)(mFinalX - mStartX);    float dy=(float)(mFinalY - mStartY);    float hyp=(float)Math.sqrt(dx * dx + dy * dy);    float ndx=dx / hyp;    float ndy=dy / hyp;    float oldVelocityX=ndx * oldVel;    float oldVelocityY=ndy * oldVel;    if (Math.signum(velocityX) == Math.signum(oldVelocityX) && Math.signum(velocityY) == Math.signum(oldVelocityY)) {      velocityX+=oldVelocityX;      velocityY+=oldVelocityY;    }  }  mMode=FLING_MODE;  mFinished=false;  float velocity=(float)Math.sqrt(velocityX * velocityX + velocityY * velocityY);  mVelocity=velocity;  mDuration=getSplineFlingDuration(velocity);  mStartTime=AnimationUtils.currentAnimationTimeMillis();  mStartX=startX;  mStartY=startY;  float coeffX=velocity == 0 ? 1.0f : velocityX / velocity;  float coeffY=velocity == 0 ? 1.0f : velocityY / velocity;  double totalDistance=getSplineFlingDistance(velocity);  mDistance=(int)(totalDistance * Math.signum(velocity));  mMinX=minX;  mMaxX=maxX;  mMinY=minY;  mMaxY=maxY;  mFinalX=startX + (int)Math.round(totalDistance * coeffX);  mFinalX=Math.min(mFinalX,mMaxX);  mFinalX=Math.max(mFinalX,mMinX);  mFinalY=startY + (int)Math.round(totalDistance * coeffY);  mFinalY=Math.min(mFinalY,mMaxY);  mFinalY=Math.max(mFinalY,mMinY);}  }
class C{  public LtvVerifier(PdfDocument document) throws GeneralSecurityException {  super(null);  this.document=document;  this.acroForm=PdfAcroForm.getAcroForm(document,true);  this.sgnUtil=new SignatureUtil(document);  List<String> names=sgnUtil.getSignatureNames();  signatureName=names.get(names.size() - 1);  this.signDate=DateTimeUtil.getCurrentTimeDate();  pkcs7=coversWholeDocument();  LOGGER.info(MessageFormat.format("Checking {0}signature {1}",pkcs7.isTsp() ? "document-level timestamp " : "",signatureName));}  }
class C{  public void collectTimeoutEvent(SipProvider provider) throws TooManyListenersException {  initCollectors(provider);  provider.addSipListener(timeoutCollector);}  }
class C{  public static int resetSubordinateModifyDNCount(){  return subordinateModifyDNCounter.getAndSet(0);}  }
class C{  @Override public int hashCode(){  return getChronology().getId().hashCode() ^ isoDate.hashCode();}  }
class C{  private void initResourcesIfNecessary(){  setBackgroundResource(android.R.color.white);}  }
class C{  protected void initializeRequestContext(RequestContext requestContext){  super.initializeRequestContext(requestContext);  ViewBeanManager viewBeanManager=new ViewBeanManager(requestContext,PACKAGE_NAME);  ((RequestContextImpl)requestContext).setViewBeanManager(viewBeanManager);}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  @Override public Node insertChildAt(Node toInsert,int index){  if (toInsert instanceof Element && getDocumentElement() != null) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Only one root element allowed");  }  if (toInsert instanceof DocumentType && getDoctype() != null) {    throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR,"Only one DOCTYPE element allowed");  }  return super.insertChildAt(toInsert,index);}  }
class C{  @Override public int read() throws IOException {synchronized (lock) {    return in.read();  }}  }
class C{  @Override public void addRuleInstances(Digester digester){  if (create) {    digester.addObjectCreate(prefix + "Context","org.apache.catalina.core.StandardContext","className");    digester.addSetProperties(prefix + "Context");  } else {    digester.addRule(prefix + "Context",new SetContextPropertiesRule());  }  if (create) {    digester.addRule(prefix + "Context",new LifecycleListenerRule("org.apache.catalina.startup.ContextConfig","configClass"));    digester.addSetNext(prefix + "Context","addChild","org.apache.catalina.Container");  }  digester.addObjectCreate(prefix + "Context/Listener",null,"className");  digester.addSetProperties(prefix + "Context/Listener");  digester.addSetNext(prefix + "Context/Listener","addLifecycleListener","org.apache.catalina.LifecycleListener");  digester.addObjectCreate(prefix + "Context/Loader","org.apache.catalina.loader.WebappLoader","className");  digester.addSetProperties(prefix + "Context/Loader");  digester.addSetNext(prefix + "Context/Loader","setLoader","org.apache.catalina.Loader");  digester.addObjectCreate(prefix + "Context/Manager","org.apache.catalina.session.StandardManager","className");  digester.addSetProperties(prefix + "Context/Manager");  digester.addSetNext(prefix + "Context/Manager","setManager","org.apache.catalina.Manager");  digester.addObjectCreate(prefix + "Context/Manager/Store",null,"className");  digester.addSetProperties(prefix + "Context/Manager/Store");  digester.addSetNext(prefix + "Context/Manager/Store","setStore","org.apache.catalina.Store");  digester.addObjectCreate(prefix + "Context/Manager/SessionIdGenerator","org.apache.catalina.util.StandardSessionIdGenerator","className");  digester.addSetProperties(prefix + "Context/Manager/SessionIdGenerator");  digester.addSetNext(prefix + "Context/Manager/SessionIdGenerator","setSessionIdGenerator","org.apache.catalina.SessionIdGenerator");  digester.addObjectCreate(prefix + "Context/Parameter","org.apache.tomcat.util.descriptor.web.ApplicationParameter");  digester.addSetProperties(prefix + "Context/Parameter");  digester.addSetNext(prefix + "Context/Parameter","addApplicationParameter","org.apache.tomcat.util.descriptor.web.ApplicationParameter");  digester.addRuleSet(new RealmRuleSet(prefix + "Context/"));  digester.addObjectCreate(prefix + "Context/Resources","org.apache.catalina.webresources.StandardRoot","className");  digester.addSetProperties(prefix + "Context/Resources");  digester.addSetNext(prefix + "Context/Resources","setResources","org.apache.catalina.WebResourceRoot");  digester.addObjectCreate(prefix + "Context/Resources/PreResources",null,"className");  digester.addSetProperties(prefix + "Context/Resources/PreResources");  digester.addSetNext(prefix + "Context/Resources/PreResources","addPreResources","org.apache.catalina.WebResourceSet");  digester.addObjectCreate(prefix + "Context/Resources/JarResources",null,"className");  digester.addSetProperties(prefix + "Context/Resources/JarResources");  digester.addSetNext(prefix + "Context/Resources/JarResources","addJarResources","org.apache.catalina.WebResourceSet");  digester.addObjectCreate(prefix + "Context/Resources/PostResources",null,"className");  digester.addSetProperties(prefix + "Context/Resources/PostResources");  digester.addSetNext(prefix + "Context/Resources/PostResources","addPostResources","org.apache.catalina.WebResourceSet");  digester.addObjectCreate(prefix + "Context/ResourceLink","org.apache.tomcat.util.descriptor.web.ContextResourceLink");  digester.addSetProperties(prefix + "Context/ResourceLink");  digester.addRule(prefix + "Context/ResourceLink",new SetNextNamingRule("addResourceLink","org.apache.tomcat.util.descriptor.web.ContextResourceLink"));  digester.addObjectCreate(prefix + "Context/Valve",null,"className");  digester.addSetProperties(prefix + "Context/Valve");  digester.addSetNext(prefix + "Context/Valve","addValve","org.apache.catalina.Valve");  digester.addCallMethod(prefix + "Context/WatchedResource","addWatchedResource",0);  digester.addCallMethod(prefix + "Context/WrapperLifecycle","addWrapperLifecycle",0);  digester.addCallMethod(prefix + "Context/WrapperListener","addWrapperListener",0);  digester.addObjectCreate(prefix + "Context/JarScanner","org.apache.tomcat.util.scan.StandardJarScanner","className");  digester.addSetProperties(prefix + "Context/JarScanner");  digester.addSetNext(prefix + "Context/JarScanner","setJarScanner","org.apache.tomcat.JarScanner");  digester.addObjectCreate(prefix + "Context/JarScanner/JarScanFilter","org.apache.tomcat.util.scan.StandardJarScanFilter","className");  digester.addSetProperties(prefix + "Context/JarScanner/JarScanFilter");  digester.addSetNext(prefix + "Context/JarScanner/JarScanFilter","setJarScanFilter","org.apache.tomcat.JarScanFilter");  digester.addObjectCreate(prefix + "Context/CookieProcessor","org.apache.tomcat.util.http.Rfc6265CookieProcessor","className");  digester.addSetProperties(prefix + "Context/CookieProcessor");  digester.addSetNext(prefix + "Context/CookieProcessor","setCookieProcessor","org.apache.tomcat.util.http.CookieProcessor");}  }
class C{  public boolean isChar(StringLiteral literal,LineCol lineCol,boolean testSymbol) throws SyntaxException {  String str=literal.literal();  str=str.substring(1);  str=str.substring(0,str.length() - 1);  if (testSymbol && !literal.literal().startsWith("\'"))   return false;  String s=unescape(str,lineCol);  assert s != null;  return s.length() == 1;}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources/");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  protected void tearDown(){}  }
class C{  public LoginProcess next(Callback[] callbacks) throws AuthLoginException {  AuthIndexType indexType=authContext.getIndexType();  if (indexType == null) {    indexType=loginConfiguration.getIndexType();  }  if (AuthIndexType.LEVEL.equals(indexType) || AuthIndexType.COMPOSITE.equals(indexType)) {    String choice=null;    for (    Callback responseCallback : callbacks) {      if (responseCallback instanceof ChoiceCallback) {        int selectedIndex=((ChoiceCallback)responseCallback).getSelectedIndexes()[0];        choice=((ChoiceCallback)responseCallback).getChoices()[selectedIndex];        break;      }    }    String indexValue=coreServicesWrapper.getDataFromRealmQualifiedData(choice);    String qualifiedRealm=coreServicesWrapper.getRealmFromRealmQualifiedData(choice);    if ((qualifiedRealm != null) && (qualifiedRealm.length() != 0)) {      String orgDN=coreServicesWrapper.orgNameToDN(qualifiedRealm);      authContext.setOrgDN(orgDN);    }    int type=coreServicesWrapper.getCompositeAdviceType(authContext);    if (type == AuthUtils.MODULE) {      indexType=AuthIndexType.MODULE;    } else     if (type == AuthUtils.SERVICE) {      indexType=AuthIndexType.SERVICE;    } else     if (type == AuthUtils.REALM) {      indexType=AuthIndexType.SERVICE;      String orgDN=coreServicesWrapper.orgNameToDN(choice);      indexValue=coreServicesWrapper.getOrgConfiguredAuthenticationChain(orgDN);      authContext.setOrgDN(orgDN);    } else {      indexType=AuthIndexType.MODULE;    }    loginConfiguration.indexType(indexType);    loginConfiguration.indexValue(indexValue);    return loginAuthenticator.startLoginProcess(this);  } else {    authContext.submitRequirements(callbacks);    return this;  }}  }
class C{  public java.lang.String _get_codebase(){  org.omg.CORBA.portable.Delegate delegate=_get_delegate();  if (delegate instanceof Delegate)   return ((Delegate)delegate).get_codebase(this);  return null;}  }
class C{  public Crop withMaxSize(int width,int height){  cropIntent.putExtra(Extra.MAX_X,width);  cropIntent.putExtra(Extra.MAX_Y,height);  return this;}  }
class C{  public synchronized void removeAllElements(){  for (int i=0; i < elementCount; i++) {    elementData[i]=null;  }  modCount++;  elementCount=0;}  }
class C{  protected AbstractSet(){}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGetPost(request,response);}  }
class C{  @Override public void processMessage(SIPMessage message) throws Exception {  if (message instanceof Request) {    ContactHeader contact=(ContactHeader)message.getHeader(ContactHeader.NAME);    RecordRouteHeader rr=(RecordRouteHeader)message.getHeader(RecordRouteHeader.NAME);    ViaHeader via=message.getTopmostViaHeader();    if (rr == null) {      if (contact != null) {        rewriteUri((SipURI)contact.getAddress().getURI());      }    } else {      rewriteUri((SipURI)rr.getAddress().getURI());    }    String viaHost=via.getHost();    if (viaHost.endsWith(".invalid")) {      via.setHost(getPeerAddress());      via.setPort(getPeerPort());    }  } else {    ContactHeader contact=(ContactHeader)message.getHeader(ContactHeader.NAME);    if (contact != null) {      rewriteUri((SipURI)contact.getAddress().getURI());    }  }  super.processMessage(message);}  }
class C{  public ScriptException(String s){  super(s);  fileName=null;  lineNumber=-1;  columnNumber=-1;}  }
class C{  public void prepend(String s){  content=s + content;}  }
class C{  protected static void notifyACIChangeEvent(String dn,int eventType){  if (debug.messageEnabled()) {    debug.message("In AMObjectImpl.notifyACIChangeEvent(..): " + dn);  }synchronized (objImplListeners) {    if (objImplListeners.isEmpty()) {      return;    }    AMEvent dpEvent=new AMEvent(new AMEvent(dn),eventType);switch (eventType) {case AMEvent.OBJECT_CHANGED:case AMEvent.OBJECT_RENAMED:      if (debug.messageEnabled()) {        debug.message("In AMObjectImpl.notifyACIChangeEvent(..): " + "ACI Entry renamed/changed event");      }    notifyAffectedDNs(dn,dpEvent);  break;case AMEvent.OBJECT_REMOVED:if (debug.messageEnabled()) {  debug.message("In AMObjectImpl.notifyACIChangeEvent(..): " + "ACI Entry removed event");}Set objImplSet=(Set)objImplListeners.get(dn.toLowerCase());if (objImplSet == null) {return;}Iterator itr=objImplSet.iterator();while (itr.hasNext()) {AMObjectImpl dpObjImpl=(AMObjectImpl)itr.next();dpObjImpl.sendEvents(dpEvent);}break;default :;}}}  }
class C{  public String elementName(){  return elementName;}  }
class C{  protected void removeServiced(String name) throws Exception {  String[] params={name};  String[] signature={"java.lang.String"};  mBeanServer.invoke(oname,"removeServiced",params,signature);}  }
class C{  public CryptoManagerSync() throws InitializationException {  super(DN.valueOf(CONFIG_DN),EnumSet.of(POST_RESPONSE_ADD,POST_RESPONSE_MODIFY,POST_RESPONSE_DELETE),true);  try {    CryptoManagerImpl.publishInstanceKeyEntryInADS();  } catch (  CryptoManagerException ex) {    throw new InitializationException(ex.getMessageObject());  }  DirectoryServer.registerBackendInitializationListener(this);  try {    adminSuffixDN=ADSContext.getAdministrationSuffixDN();    instanceKeysDN=adminSuffixDN.child(DN.valueOf("cn=instance keys"));    secretKeysDN=adminSuffixDN.child(DN.valueOf("cn=secret keys"));    trustStoreRootDN=DN.valueOf(ConfigConstants.DN_TRUST_STORE_ROOT);    keySearchFilter=SearchFilter.createFilterFromString("(|" + "(objectclass=" + OC_CRYPTO_INSTANCE_KEY + ")"+ "(objectclass="+ OC_CRYPTO_CIPHER_KEY+ ")"+ "(objectclass="+ OC_CRYPTO_MAC_KEY+ ")"+ ")");  } catch (  DirectoryException e) {  }  ocInstanceKey=DirectoryServer.getSchema().getObjectClass(OC_CRYPTO_INSTANCE_KEY);  ocCipherKey=DirectoryServer.getSchema().getObjectClass(OC_CRYPTO_CIPHER_KEY);  ocMacKey=DirectoryServer.getSchema().getObjectClass(OC_CRYPTO_MAC_KEY);  attrCert=getSchema().getAttributeType(ATTR_CRYPTO_PUBLIC_KEY_CERTIFICATE);  attrAlias=getSchema().getAttributeType(ATTR_CRYPTO_KEY_ID);  attrCompromisedTime=getSchema().getAttributeType(ATTR_CRYPTO_KEY_COMPROMISED_TIME);  if (DirectoryServer.getBackendWithBaseDN(adminSuffixDN) != null) {    searchAdminSuffix();  }  DirectoryServer.registerInternalPlugin(this);}  }
class C{  private void measureLeftDistance(){  mLeftDistanceCameraBtn=mCameraButton.getLeft() + mCameraButton.getWidth() / 2;  mLeftDistanceHangUpBtn=mHangUpButton.getLeft() + mHangUpButton.getWidth() / 2;  mLeftDistanceVoiceBtn=mVoiceButton.getLeft() + mVoiceButton.getWidth() / 2;}  }
class C{  public static String encodeOffline(byte[] passwordBytes) throws DirectoryException {  byte[] saltBytes=new byte[NUM_SALT_BYTES];  byte[] digestBytes=encodeWithRandomSalt(ByteString.wrap(passwordBytes),saltBytes);  byte[] hashPlusSalt=concatenateSaltPlusHash(saltBytes,digestBytes);  return '{' + STORAGE_SCHEME_NAME_PKCS5S2 + '}'+ Base64.encode(hashPlusSalt);}  }
class C{  public CTSDJLDAPv3PersistentSearchBuilder(ConnectionFactory connectionFactory){  Reject.ifNull(connectionFactory);  this.connectionFactory=connectionFactory;}  }
class C{  private static RMIServer objectToBind(RMIServerImpl rmiServer,Map<String,?> env) throws IOException {  return RMIConnector.connectStub((RMIServer)rmiServer.toStub(),env);}  }
class C{  public MutableFilterDecorator(){  this(PassthroughFilter.PASSTHROUGH_FILTER);}  }
class C{  private void linkAttributeValues(Assertion assertion,String userName) throws AuthLoginException, SAML2Exception {  final String spName=metaManager.getEntityByMetaAlias(metaAlias);  final SPSSOConfigElement spssoconfig=metaManager.getSPSSOConfig(realm,spName);  final boolean needAssertionEncrypted=Boolean.parseBoolean(SAML2Utils.getAttributeValueFromSPSSOConfig(spssoconfig,SAML2Constants.WANT_ASSERTION_ENCRYPTED));  final boolean needAttributeEncrypted=SPACSUtils.getNeedAttributeEncrypted(needAssertionEncrypted,spssoconfig);  final Set<PrivateKey> decryptionKeys=KeyUtil.getDecryptionKeys(spssoconfig);  final List<Attribute> attrs=SPACSUtils.getAttrs(assertion,needAttributeEncrypted,decryptionKeys);  final SPAttributeMapper attrMapper=SAML2Utils.getSPAttributeMapper(realm,spName);  final Map<String,Set<String>> attrMap;  try {    attrMap=attrMapper.getAttributes(attrs,userName,spName,entityName,realm);  } catch (  SAML2Exception se) {    return;  }  setUserAttributes(attrMap);  if (assertion.getAdvice() != null) {    List<String> creds=assertion.getAdvice().getAdditionalInfo();    attrMap.put(SAML2Constants.DISCOVERY_BOOTSTRAP_CREDENTIALS,new HashSet<>(creds));  }  for (  String name : attrMap.keySet()) {    Set<String> value=attrMap.get(name);    StringBuilder toStore=new StringBuilder();    for (    String toAdd : value) {      toStore.append(com.sun.identity.shared.StringUtils.getEscapedValue(toAdd)).append(PROPERTY_VALUES_SEPARATOR);    }    toStore.deleteCharAt(toStore.length() - 1);    setUserSessionProperty(name,toStore.toString());  }}  }
class C{  public int read(char cbuf[],int off,int len) throws IOException {  int c;  char cc;  for (int i=0; i < len; i++) {    c=in.read();    if (c == -1) {      return (i > 0) ? i : -1;    }    cc=(char)c;    if (cc == '\\') {      c=in.read();      if (c == -1) {        return (i > 0) ? i : -1;      }      cc=(char)c;      if (cc == 'u') {        int value=0;        for (int j=0; j < 4; j++) {          c=in.read();          if (c == -1) {            return (i > 0) ? i : -1;          }          cc=(char)c;switch (cc) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':            value=(value << 4) + cc - '0';          break;case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':        value=(value << 4) + 10 + cc - 'a';      break;case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':    value=(value << 4) + 10 + cc - 'A';  break;default :throw new IllegalArgumentException("Malformed \\uxxxx encoding.");}}cbuf[off + i]=(char)value;} else {cbuf[off + i]=cc;}} else {cbuf[off + i]=cc;}}return len;}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  @Override public void write(char[] buf) throws IOException {  if (writer != null) {    writer.write(buf);  } else {    write(buf,0,buf.length);  }}  }
class C{  void registerEntryContainer(DN baseDN,EntryContainer entryContainer) throws InitializationException {  EntryContainer ec=this.entryContainers.get(baseDN);  if (ec != null) {    throw new InitializationException(ERR_ENTRY_CONTAINER_ALREADY_REGISTERED.get(ec.getTreePrefix(),baseDN));  }  this.entryContainers.put(baseDN,entryContainer);}  }
class C{  protected int askPort(LocalizableMessage prompt,int defaultValue,LocalizedLogger logger){  while (true) {    try {      int port=readPort(prompt,defaultValue);      if (port != -1) {        return port;      }    } catch (    ClientException ce) {      logger.warn(LocalizableMessage.raw("Error reading input: " + ce,ce));    }  }}  }
class C{  public static void addSubSchema(String serviceName,String subSchemaName,ServiceSchema serviceSchema,Node subSchemaNode) throws UpgradeException {  String classMethod="UpgradeUtils:addSubSchema : ";  if (debug.messageEnabled()) {    debug.message(classMethod + "Adding subschema:" + subSchemaName+ " for service: "+ serviceName);  }  ByteArrayInputStream bis=null;  try {    bis=new ByteArrayInputStream(XMLUtils.print(subSchemaNode).getBytes());    serviceSchema.addSubSchema(bis);  } catch (  SSOException ssoe) {    throw new UpgradeException("invalid sso token");  }catch (  SMSException ssoe) {    throw new UpgradeException("error creating subschema");  }}  }
class C{  public LastOwnerException(){}  }
class C{  public final void yyreset(java.io.Reader reader){  zzReader=reader;  zzAtBOL=true;  zzAtEOF=false;  zzEndRead=zzStartRead=0;  zzCurrentPos=zzMarkedPos=0;  yyline=yychar=yycolumn=0;  zzLexicalState=YYINITIAL;}  }
class C{  public int read(byte[] b,int off,int len) throws IOException {  ensureOpen();  if (b == null) {    throw new NullPointerException("Null buffer for read");  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  int cnt=0;  while (len > 0 && !def.finished()) {    int n;    if (def.needsInput()) {      n=in.read(buf,0,buf.length);      if (n < 0) {        def.finish();      } else       if (n > 0) {        def.setInput(buf,0,n);      }    }    n=def.deflate(b,off,len);    cnt+=n;    off+=n;    len-=n;  }  if (cnt == 0 && def.finished()) {    reachEOF=true;    cnt=-1;  }  return cnt;}  }
class C{  @Override public void firePropertyChange(String propertyName,char oldValue,char newValue){}  }
class C{  public DefaultRetryPolicy(int initialTimeoutMs,int maxNumRetries,float backoffMultiplier){  mCurrentTimeoutMs=initialTimeoutMs;  mMaxNumRetries=maxNumRetries;  mBackoffMultiplier=backoffMultiplier;}  }
class C{  public boolean debugEnabled(){  return (debugLevel > Debug.WARNING);}  }
class C{  public void addApplicationIdentifier(String id){  applicationIdentifiers.add(id);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild5.class,args);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr domesticAttr;  Node s;  doc=(Document)load("hc_staff",false);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(0);  attributes=testNode.getAttributes();  domesticAttr=(Attr)attributes.getNamedItem("title");  s=domesticAttr.getParentNode();  assertNull("attrParentNodeNullAssert",s);}  }
class C{  public static FontProgram createType1Font(String metricsPath,String binaryPath,boolean cached) throws java.io.IOException {  return createType1Font(metricsPath,binaryPath,null,null,cached);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public void put(WriteableTransaction txn,EntryID entryID,Entry entry) throws StorageRuntimeException, DirectoryException {  put(txn,entryID,encode(entry));}  }
class C{  @Override public void removeApplicationListener(String listener){synchronized (applicationListenersLock) {    int n=-1;    for (int i=0; i < applicationListeners.length; i++) {      if (applicationListeners[i].equals(listener)) {        n=i;        break;      }    }    if (n < 0)     return;    int j=0;    String results[]=new String[applicationListeners.length - 1];    for (int i=0; i < applicationListeners.length; i++) {      if (i != n)       results[j++]=applicationListeners[i];    }    applicationListeners=results;  }  fireContainerEvent("removeApplicationListener",listener);}  }
class C{  public WSAuthNServicesModelImpl(HttpServletRequest req,Map map) throws AMConsoleException {  super(req,SERVICE_NAME,map);}  }
class C{  private void writeLog(Set<DN> deleteDNset){synchronized (logFile) {    try (BufferedWriter writer=setupWriter()){      for (      DN deletedEntryDN : deleteDNset) {        writer.write(deletedEntryDN.toString());        writer.newLine();      }    } catch (    IOException io) {      logger.error(ERR_PLUGIN_REFERENT_CLOSE_LOGFILE,io.getMessage());    }  }}  }
class C{  static <K extends Comparable<K>,V>BlockLogWriter<K,V> newWriterForTests(final LogWriter writer,final RecordParser<K,V> parser,final int blockSize){  return new BlockLogWriter<>(writer,parser,blockSize);}  }
class C{  public static void serialize(XMPMeta xmp,OutputStream out) throws XMPException {  serialize(xmp,out,null);}  }
class C{  public void scheduleAtFixedRate(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,true);}  }
class C{  public org.w3c.dom.Element signWithWSSX509TokenProfile(org.w3c.dom.Document doc,java.security.cert.Certificate cert,String algorithm,java.util.List ids,String wsfVersion) throws XMLSignatureException {  return sp.signWithWSSX509TokenProfile(doc,cert,algorithm,ids,wsfVersion);}  }
class C{  public void removeChild(PersistentObject object) throws AccessRightsException, EntryNotFoundException, UMSException {  String childStr;  if (object == null) {    String args[]=new String[1];    args[0]=this.toString();    String msg=i18n.getString(IUMSConstants.DEL_NULL_OBJ,args);    throw new IllegalArgumentException(msg);  }  childStr=object.getGuid().getDn();  if (childStr == null) {    String idAttr=object.getNamingAttribute();    String idValue=object.getAttribute(idAttr).getValue();    if (idAttr == null || idValue == null || idValue.length() == 0) {      String args[]=new String[1];      args[0]=object.toString();      String msg=i18n.getString(IUMSConstants.COMPOSE_GUID_FAILED,args);      throw new IllegalArgumentException(msg);    }    if (getGuid().getDn().length() > 0) {      childStr=idAttr + "=" + idValue+ ","+ getGuid();    } else {      childStr=idAttr + "=" + idValue;    }  }  DN parentEntry=DN.valueOf(getDN());  DN childEntry=DN.valueOf(childStr);  if (!childEntry.isInScopeOf(parentEntry,SearchScope.SUBORDINATES)) {    String msg=i18n.getString(IUMSConstants.BAD_CHILD_OBJ);    throw new IllegalArgumentException(msg);  }  DataLayer.getInstance().deleteEntry(getPrincipal(),new Guid(childStr));  object.setGuid(new Guid("DELETED"));  object.setPrincipal(null);}  }
class C{  public static Border createRaisedBevelBorder(){  return createSharedBevel(BevelBorder.RAISED);}  }
class C{  public String toXMLString(boolean includeNSPrefix,boolean declareNS) throws SAML2Exception {  StringBuffer xml=new StringBuffer();  String NS="";  String appendNS="";  if (declareNS) {    NS=SAML2Constants.ASSERTION_DECLARE_STR;  }  if (includeNSPrefix) {    appendNS=SAML2Constants.ASSERTION_PREFIX;  }  xml.append("<").append(appendNS).append(elementName);  xml.append(NS).append(" ");  xml.append(getElementValue(includeNSPrefix,declareNS));  xml.append("</").append(appendNS).append(elementName).append(">");  return xml.toString();}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.X509DataType.X509IssuerSerial createX509DataTypeX509IssuerSerial() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.X509DataTypeImpl.X509IssuerSerialImpl();}  }
class C{  public boolean equals(Object obj){  if (obj instanceof ActivationID) {    ActivationID id=(ActivationID)obj;    return (uid.equals(id.uid) && activator.equals(id.activator));  } else {    return false;  }}  }
class C{  public static Document sign(FederationElement descriptor,SPSSOConfigElement spconfig,IDPSSOConfigElement idpconfig) throws JAXBException, WSFederationMetaException {  return null;}  }
class C{  private static byte[] or(byte[] ip1,byte[] ip2){  byte[] temp=new byte[ip1.length];  for (int i=0; i < ip1.length; i++) {    temp[i]=(byte)(ip1[i] | ip2[i]);  }  return temp;}  }
class C{  private final void checkAndUpdateServerState(){  final AttributeType histType=DirectoryServer.getSchema().getAttributeType(HISTORICAL_ATTRIBUTE_NAME);synchronized (this) {    CSN serverStateMaxCSN=state.getCSN(serverId);    if (serverStateMaxCSN == null) {      return;    }    InternalSearchOperation op;    try {      op=LDAPReplicationDomain.searchForChangedEntries(baseDN,serverStateMaxCSN,null);    } catch (    Exception e) {      return;    }    if (op.getResultCode() != ResultCode.SUCCESS) {      logger.error(ERR_CANNOT_RECOVER_CHANGES,baseDN);      return;    }    CSN dbMaxCSN=serverStateMaxCSN;    for (    SearchResultEntry resEntry : op.getSearchEntries()) {      for (      ByteString attrValue : resEntry.getAllAttributes(histType).get(0)) {        HistoricalAttributeValue histVal=new HistoricalAttributeValue(attrValue.toString());        CSN csn=histVal.getCSN();        if (csn != null && csn.getServerId() == serverId && dbMaxCSN.isOlderThan(csn)) {          dbMaxCSN=csn;        }      }    }    if (dbMaxCSN.isNewerThan(serverStateMaxCSN)) {      update(dbMaxCSN);      logger.info(NOTE_SERVER_STATE_RECOVERY,baseDN,dbMaxCSN);    }  }}  }
class C{  public void dragExit(DropTargetEvent dte){}  }
class C{  public boolean removeCursor(MapCursor cursor){  return cursors.remove(cursor);}  }
class C{  public Phaser(){  this(null,0);}  }
class C{  public boolean isError(){  return ((errorMsg != null) && (errorMsg.length() > 0));}  }
class C{  public static String deepToString(Object[] a){  if (a == null)   return "null";  int bufLen=20 * a.length;  if (a.length != 0 && bufLen <= 0)   bufLen=Integer.MAX_VALUE;  StringBuilder buf=new StringBuilder(bufLen);  deepToString(a,buf,new HashSet<Object[]>());  return buf.toString();}  }
class C{  public String toString(){  if (soid == null) {    StringBuilder sb=new StringBuilder(4 * oid.length);    for (int i=0; i < oid.length - 1; ++i) {      sb.append(oid[i]);      sb.append('.');    }    sb.append(oid[oid.length - 1]);    soid=sb.toString();  }  return soid;}  }
class C{  public static Map<String,MappedClass> correlate(MappedClass targetClass,MappedClass cleanClass,Map<String,MappedClass> targetMap,Map<String,MappedClass> cleanMap){  if (targetClass.isRenamed()) {    return targetMap;  }  if (!areSimiliar(targetClass,cleanClass)) {    return targetMap;  }  if (targetClass.hasParent() && cleanClass.hasParent()) {    targetMap=correlate(targetClass.getParent(),cleanClass.getParent(),targetMap,cleanMap);  }  int inters=targetClass.getInterfaces().size();  if (inters > 0)   for (int key=0; key < inters; key++) {    MappedClass interfaceClassTarget=targetClass.getInterfaces().get(key);    MappedClass interfaceClassClean=cleanClass.getInterfaces().get(key);    targetMap=correlate(interfaceClassTarget,interfaceClassClean,targetMap,cleanMap);  }  targetClass.setNewName(cleanClass.getOriginalName());  if (!targetClass.isTruelyRenamed()) {    targetClass.setRenamedOverride(true);  }  List<MappedMember> targetFields=targetClass.getFields();  List<MappedMember> cleanFields=cleanClass.getFields();  int offsetField=0;  for (int key=0; key < targetFields.size(); key++) {    if (key >= cleanFields.size()) {      continue;    }    MappedMember targetField=targetFields.get(key);    MappedMember cleanField=cleanFields.get(key + offsetField);    if (cleanField == null) {      continue;    }    if (!fix(targetField.getDesc()).equals(fix(cleanField.getDesc()))) {      offsetField-=1;      continue;    } else {      if (targetField.getDesc().length() > 4 && cleanField.getDesc().length() > 4) {        String n1=RegexUtils.matchDescriptionClasses(targetField.getDesc()).get(0);        String n2=RegexUtils.matchDescriptionClasses(cleanField.getDesc()).get(0);        MappedClass c1=targetMap.get(n1);        MappedClass c2=targetMap.get(n2);        if (c1 != null && c2 != null) {          boolean flag=areSimiliar(c1,c2);          if (!flag) {            offsetField-=1;            continue;          }        }      }    }    targetField.setNewName(cleanField.getOriginalName());    List<MappedClass> targetFieldTypes=getTypesFromMember(targetField,targetMap);    if (targetFieldTypes == null) {      continue;    }    List<MappedClass> cleanFieldTypes=getTypesFromMember(cleanField,cleanMap);    if (cleanFieldTypes == null) {      continue;    }    for (int i=0; i < targetFieldTypes.size(); i++) {      MappedClass targetType=targetFieldTypes.get(i);      if (i >= cleanFieldTypes.size()) {        break;      }      MappedClass cleanType=cleanFieldTypes.get(i);      if (targetType == null || cleanType == null) {        continue;      }      targetMap=correlate(targetType,cleanType,targetMap,cleanMap);    }  }  List<MappedMember> targetMethods=targetClass.getMethods();  List<MappedMember> cleanMethods=cleanClass.getMethods();  int offsetMethd=0;  for (int key=0; key < targetMethods.size(); key++) {    if (key >= cleanMethods.size()) {      continue;    }    MappedMember targetMethod=targetMethods.get(key);    MappedMember cleanMethod=cleanMethods.get(key + offsetMethd);    if (cleanMethod == null) {      continue;    }    if (!fix(targetMethod.getDesc()).equals(fix(cleanMethod.getDesc()))) {      offsetMethd-=1;      continue;    }    targetMethod.setNewName(cleanMethod.getOriginalName());    List<MappedClass> targetMethodTypes=getTypesFromMember(targetMethod,targetMap);    if (targetMethodTypes == null) {      continue;    }    List<MappedClass> cleanMethodTypes=getTypesFromMember(cleanMethod,cleanMap);    if (cleanMethodTypes == null) {      continue;    }    int offset=0;    for (int i=0; i < targetMethodTypes.size() - offset; i++) {      if (i >= targetMethodTypes.size()) {        break;      }      MappedClass targetType=targetMethodTypes.get(i);      if (targetType.getOriginalName().equals(targetClass.getOriginalName())) {        continue;      }      if (i + offset >= cleanMethodTypes.size()) {        break;      }      MappedClass cleanType=cleanMethodTypes.get(i + offset);      if (cleanType == null) {        continue;      }      if (!areSimiliar(targetType,cleanType)) {        continue;      }      targetMap=correlate(targetType,cleanType,targetMap,cleanMap);    }  }  targetMap.put(targetClass.getOriginalName(),targetClass);  return targetMap;}  }
class C{  public boolean hasOwnOrModelProperty(int property){  return properties.containsKey(property) || (null != getModelElement() && getModelElement().hasProperty(property));}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.SignaturePropertiesElement createSignaturePropertiesElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.SignaturePropertiesElementImpl();}  }
class C{  public void incModuleCounter(String moduleName,boolean success,String orgDN){  String classMethod="SsoServerAuthSvcImpl.incModuleCounter:";  String rName=Agent.getRealmNameFromDN(orgDN);  if (debug.messageEnabled()) {    debug.message(classMethod + "\n" + "    moduleName = "+ moduleName+ "\n"+ "    realmName = "+ rName+ "\n"+ "    success = "+ success+ "\n"+ "    orgDN = "+ orgDN);  }  if (rName == null) {    if (debug.messageEnabled()) {      debug.message(classMethod + "no realm configuration for org " + orgDN+ " set up yet.");    }    return;  }  if ((moduleName != null) && (moduleName.length() > 0)) {    String rlmAuthInst=rName + "|" + moduleName;    SsoServerAuthModulesEntryImpl mei=Agent.getAuthModuleEntry(rlmAuthInst);    if (mei == null) {      if (debug.warningEnabled()) {        debug.warning(classMethod + "did not find auth module instance for " + moduleName+ " in realm "+ rName);      }      return;    }    if (debug.messageEnabled()) {      debug.message(classMethod + "got auth module instance for " + rlmAuthInst);    }    if (success) {      mei.incModuleSuccessCount();      incSsoServerAuthenticationSuccessCount();    } else {      mei.incModuleFailureCount();      incSsoServerAuthenticationFailureCount();    }  } else {    if (debug.warningEnabled()) {      debug.warning(classMethod + "no module name provided");    }  }}  }
class C{  @Override public void storeChildren(PrintWriter aWriter,int indent,Object aObject,StoreDescription parentDesc) throws Exception {  if (aObject instanceof StandardServer) {    StandardServer server=(StandardServer)aObject;    LifecycleListener listeners[]=((Lifecycle)server).findLifecycleListeners();    storeElementArray(aWriter,indent,listeners);    NamingResourcesImpl globalNamingResources=server.getGlobalNamingResources();    StoreDescription elementDesc=getRegistry().findDescription(NamingResourcesImpl.class.getName() + ".[GlobalNamingResources]");    if (elementDesc != null) {      elementDesc.getStoreFactory().store(aWriter,indent,globalNamingResources);    }    Service services[]=server.findServices();    storeElementArray(aWriter,indent,services);  }}  }
class C{  public boolean isSearchable(){  return (isSearchable);}  }
class C{  @DataProvider public Object[][] createLocalNameTestData(){  return new Object[][]{{"",0,""},{"",1,""},{"dc=x",0,""},{"dc=x",1,"dc=x"},{"dc=x",2,"dc=x"},{"dc=x,dc=y",0,""},{"dc=x,dc=y",1,"dc=x"},{"dc=x,dc=y",2,"dc=x,dc=y"},{"dc=x,dc=y",3,"dc=x,dc=y"},{"dc=x,dc=y,dc=z",0,""},{"dc=x,dc=y,dc=z",1,"dc=x"},{"dc=x,dc=y,dc=z",2,"dc=x,dc=y"},{"dc=x,dc=y,dc=z",3,"dc=x,dc=y,dc=z"},{"dc=x,dc=y,dc=z",4,"dc=x,dc=y,dc=z"}};}  }
class C{  @After public void clean(){  mute(null);  mute(null);  mute(null);}  }
class C{  public static List<UIComponent> findComponents(UIComponent parent,Class type){  List<UIComponent> result=new Vector<>();  List<UIComponent> children=parent.getChildren();  for (  UIComponent uiComponent : children) {    if (uiComponent.getClass().equals(type)) {      result.add(uiComponent);    }    result.addAll(findComponents(uiComponent,type));  }  return result;}  }
class C{  public ValidationResult isFileReadable(String filename,Map props,IStateAccess state){  ValidationResultStatus validRes=ValidationResultStatus.STATUS_FAILED;  LocalizedMessage returnMessage=null;  if (isStringValid(filename)) {    File file=new File(filename);    if (file.exists() && file.isFile() && file.canRead()) {      returnMessage=LocalizedMessage.get(LOC_VA_MSG_FILE_READ,new Object[]{filename});      validRes=ValidationResultStatus.STATUS_SUCCESS;    }  }  if (validRes.getIntValue() == ValidationResultStatus.INT_STATUS_FAILED) {    returnMessage=LocalizedMessage.get(LOC_VA_WRN_FILE_NOT_READ,new Object[]{filename});  }  Debug.log("FileSystemValidator : Is File : " + filename + " readable ? "+ validRes.isSuccessful());  return new ValidationResult(validRes,null,returnMessage);}  }
class C{  void init(JsonValue config){synchronized (dbLock) {    try {      dbURL=getDBUrl(config);      logger.info("Use DB at dbURL: {}",dbURL);      user=config.get(CONFIG_USER).defaultTo("admin").asString();      password=config.get(CONFIG_PASSWORD).defaultTo("admin").asString();      poolMinSize=config.get(CONFIG_POOL_MIN_SIZE).defaultTo(DEFAULT_POOL_MIN_SIZE).asInteger();      poolMaxSize=config.get(CONFIG_POOL_MAX_SIZE).defaultTo(DEFAULT_POOL_MAX_SIZE).asInteger();      Map<String,String> queryMap=config.get(CONFIG_QUERIES).defaultTo(new HashMap<String,String>()).asMap(String.class);      queries.setConfiguredQueries(queryMap);      Map<String,String> commandMap=config.get(CONFIG_COMMANDS).defaultTo(new HashMap<String,String>()).asMap(String.class);      commands.setConfiguredQueries(commandMap);    } catch (    RuntimeException ex) {      logger.warn("Configuration invalid, can not start OrientDB repository",ex);      throw ex;    }    try {      pool=DBHelper.getPool(dbURL,user,password,poolMinSize,poolMaxSize,config,true);      logger.debug("Obtained pool {}",pool);    } catch (    RuntimeException ex) {      logger.warn("Initializing database pool failed",ex);      throw ex;    }  }}  }
class C{  public void paintRootPaneBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void moveYLineTo(float y){  float curYLine=getYLine();  float delta=y - curYLine;  occupiedArea.getBBox().setY(occupiedArea.getBBox().getY() + delta);}  }
class C{  public boolean isAccelerated(){  return accelerated;}  }
class C{  public DecisionImpl(Element element) throws XACMLException {  processElement(element);  makeImmutable();}  }
class C{  public ResourceSetRegistrationExceptionFilter(Restlet next,JacksonRepresentationFactory jacksonRepresentationFactory){  this.jacksonRepresentationFactory=jacksonRepresentationFactory;  setNext(next);}  }
class C{  public PdfVisibilityExpression(PdfName operator){  super(new PdfArray());  if (operator == null || !PdfName.Or.equals(operator) && !PdfName.And.equals(operator) && !PdfName.Not.equals(operator))   throw new IllegalArgumentException("Invalid operator");  getPdfObject().add(operator);}  }
class C{  private synchronized AbstractNodeTask fetch() throws InterruptedException {  AbstractNodeTask result=null;  do {    int waitingSize=waitingQueue.size();    int i=0;    while (i < waitingSize && !canBeFetched(i)) {      i++;    }    if (i == waitingSize) {      wait();    } else {      result=waitingQueue.get(i);      waitingQueue.remove(i);      workingList.put(result.getNode(),result);    }  } while (result == null);  return result;}  }
class C{  public void handleButton2Request(RequestInvocationEvent event){  RealmResourceOfferingViewBeanBase vb=(RealmResourceOfferingViewBeanBase)getReturnToViewBean();  passPgSessionMap(vb);  vb.forwardTo(getRequestContext());}  }
class C{  @Override protected void onUpdateBackgroundAndPaddings(Rect searchBarBounds,Rect padding){  boolean isRtl=Utilities.isRtl(getResources());  InsetDrawable background=new InsetDrawable(getResources().getDrawable(R.drawable.quantum_panel_shape),padding.left,0,padding.right,0);  Rect bgPadding=new Rect();  background.getPadding(bgPadding);  mContainerView.setBackground(background);  mRevealView.setBackground(background.getConstantState().newDrawable());  mAppsRecyclerView.updateBackgroundPadding(bgPadding);  mAdapter.updateBackgroundPadding(bgPadding);  mContent.setPadding(0,padding.top,0,padding.bottom);  mContainerView.setPadding(0,0,0,0);  int startInset=Math.max(mSectionNamesMargin,mAppsRecyclerView.getMaxScrollbarWidth());  int topBottomPadding=mRecyclerViewTopBottomPadding;  if (isRtl) {    mAppsRecyclerView.setPadding(padding.left + mAppsRecyclerView.getMaxScrollbarWidth(),topBottomPadding,padding.right + startInset,topBottomPadding);  } else {    mAppsRecyclerView.setPadding(padding.left + startInset,topBottomPadding,padding.right + mAppsRecyclerView.getMaxScrollbarWidth(),topBottomPadding);  }  if (mSearchBarView != null) {    Rect backgroundPadding=new Rect();    if (mSearchBarView.getBackground() != null) {      mSearchBarView.getBackground().getPadding(backgroundPadding);    }    LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mSearchBarContainerView.getLayoutParams();    lp.leftMargin=searchBarBounds.left - backgroundPadding.left;    lp.topMargin=searchBarBounds.top - backgroundPadding.top;    lp.rightMargin=(getMeasuredWidth() - searchBarBounds.right) - backgroundPadding.right;    mSearchBarContainerView.requestLayout();  }}  }
class C{  public static boolean parseBoolean(String lexicalXSDBoolean){  if (theConverter == null)   initConverter();  return theConverter.parseBoolean(lexicalXSDBoolean);}  }
class C{  public int hashCode(){  return value.hashCode();}  }
class C{  public String findUser(String username){  UserDatabase database=(UserDatabase)this.resource;  User user=database.findUser(username);  if (user == null) {    return (null);  }  try {    ObjectName oname=MBeanUtils.createObjectName(managedUser.getDomain(),user);    return (oname.toString());  } catch (  MalformedObjectNameException e) {    IllegalArgumentException iae=new IllegalArgumentException("Cannot create object name for user [" + username + "]");    iae.initCause(e);    throw iae;  }}  }
class C{  protected PropertyChangeListener createPropertyChangeListener(){  return getHandler();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdataindexsizeerrdeletedataoffsetgreater.class,args);}  }
class C{  @Override public void init(Subject subject,Map sharedState,Map options){  try {    if (debug.messageEnabled()) {      debug.message("Radius resbundle locale=" + getLoginLocale());    }    this.sharedState=sharedState;    if (options != null) {      try {        String serverPort=CollectionHelper.getMapAttr(options,"iplanet-am-auth-radius-server-port",DEFAULT_SERVER_PORT);        iServerPort=Integer.parseInt(serverPort);        primaryServers=new LinkedHashSet<RADIUSServer>();        Set<String> tmp;        tmp=CollectionHelper.getServerMapAttrs(options,"iplanet-am-auth-radius-server1");        if (tmp.isEmpty()) {          primaryServers.add(new RADIUSServer("localhost",iServerPort));          debug.error("Error: primary server attribute " + "misconfigured using localhost");        }        for (        String server : tmp) {          int idx=server.indexOf(':');          if (idx == -1) {            primaryServers.add(new RADIUSServer(server,iServerPort));          } else {            primaryServers.add(new RADIUSServer(server.substring(0,idx),Integer.parseInt(server.substring(idx + 1))));          }        }        secondaryServers=new LinkedHashSet<RADIUSServer>();        tmp=CollectionHelper.getServerMapAttrs(options,"iplanet-am-auth-radius-server2");        if (tmp == null) {          secondaryServers.add(new RADIUSServer("localhost",iServerPort));          debug.error("Error: primary server attribute " + "misconfigured using localhost");        }        for (        String server : tmp) {          int idx=server.indexOf(':');          if (server.indexOf(':') == -1) {            secondaryServers.add(new RADIUSServer(server,iServerPort));          } else {            secondaryServers.add(new RADIUSServer(server.substring(0,idx),Integer.parseInt(server.substring(idx + 1))));          }        }        sharedSecret=CollectionHelper.getMapAttr(options,"iplanet-am-auth-radius-secret");        String timeOut=CollectionHelper.getMapAttr(options,"iplanet-am-auth-radius-timeout",DEFAULT_TIMEOUT);        iTimeOut=Integer.parseInt(timeOut);        String authLevel=CollectionHelper.getMapAttr(options,"iplanet-am-auth-radius-auth-level");        String interval=CollectionHelper.getMapAttr(options,"openam-auth-radius-healthcheck-interval",DEFAULT_INTERVAL);        healthCheckInterval=Integer.parseInt(interval);        if (authLevel != null) {          try {            setAuthLevel(Integer.parseInt(authLevel));          } catch (          Exception e) {            debug.error("Unable to set auth level " + authLevel);          }        }        if (debug.messageEnabled()) {          debug.message("server1: " + primaryServers + " server2: "+ secondaryServers+ " serverPort: "+ serverPort+ " timeOut: "+ timeOut+ " authLevel: "+ authLevel);        }        if ((sharedSecret == null) || (sharedSecret.length() == 0)) {          debug.error("RADIUS initialization failure; no Shared Secret");        }      } catch (      Exception ex) {        debug.error("RADIUS parameters initialization failure",ex);      }    } else {      debug.error("options not initialized");    }  } catch (  Exception e) {    debug.error("RADIUS init Error....",e);  }}  }
class C{  private void sendError(String status,String msg){  try {    if (status == null)     throw new Error("sendResponse(): Status can't be null.");    final OutputStream out=mySocket.getOutputStream();    PrintWriter pw=new PrintWriter(out);    pw.print("HTTP/1.0 " + status + " \r\n");    pw.print("Content-Type: text/plain\r\n");    pw.print("Date: " + gmtFrmt.format(new Date()) + "\r\n");    pw.print("\r\n");    pw.flush();    out.flush();    out.close();    mySocket.close();  } catch (  IOException ioe) {    try {      mySocket.close();    } catch (    Throwable t) {    }  }}  }
class C{  public void deleteProperty(int property){  if (properties.containsKey(property)) {    properties.remove(property);  } else {    if (modelElement != null) {      modelElement.deleteOwnProperty(property);    }  }}  }
class C{  public TagResult writeEntries(EntryWriter entryWriter,DN parentDN,int count) throws IOException, MakeLDIFException {  for (int i=0; i < count; i++) {    templateFile.nextFirstAndLastNames();    TemplateEntry templateEntry=new TemplateEntry(this,parentDN);    for (    TemplateLine l : templateLines) {      TagResult r=l.generateLine(templateEntry);      if (!r.keepProcessingEntry() || !r.keepProcessingParent() || !r.keepProcessingTemplateFile()) {        return r;      }    }    if (!entryWriter.writeEntry(templateEntry)) {      return TagResult.STOP_PROCESSING;    }    for (int j=0; j < subordinateTemplates.length; j++) {      TagResult r=subordinateTemplates[j].writeEntries(entryWriter,templateEntry.getDN(),numEntriesPerTemplate[j]);      if (!r.keepProcessingParent() || !r.keepProcessingTemplateFile()) {        if (r.keepProcessingTemplateFile()) {          return TagResult.SUCCESS_RESULT;        }        return r;      }    }  }  return TagResult.SUCCESS_RESULT;}  }
class C{  public com.sun.identity.liberty.ws.idpp.jaxb.MsgContactType createMsgContactType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.idpp.jaxb.impl.MsgContactTypeImpl();}  }
class C{  public static String convertFrameID24To23(String identifier){  String id;  if (identifier.length() < 4) {    return null;  }  id=ID3Frames.convertv24Tov23.get(identifier);  if (id == null) {    if (ID3v23Frames.getInstanceOf().getIdToValueMap().containsKey(identifier)) {      id=identifier;    }  }  return id;}  }
class C{  public JCheckBoxMenuItem(String text){  this(text,null,false);}  }
class C{  private List<String> addRules(int filterId,List<String> rules,boolean useCosmetics){  InputStream inputStream=null;  InputStreamReader inputStreamReader=null;  BufferedReader reader=null;  try {    String fileName=getOrCreateFilterFile(filterId);    inputStream=context.openFileInput(fileName);    inputStreamReader=new InputStreamReader(inputStream);    reader=new BufferedReader(inputStreamReader);    String line=reader.readLine();    while (line != null) {      if (useCosmetics || !FilterRule.isCosmeticRule(line)) {        rules.add(line);      }      line=reader.readLine();    }    return rules;  } catch (  Exception ex) {    log.error("Cannot select rules for filter {}",filterId,ex);    throw new RuntimeException("Cannot select rules for filter " + filterId,ex);  } finally {    IOUtils.closeQuietly(inputStream);    IOUtils.closeQuietly(inputStreamReader);    IOUtils.closeQuietly(reader);  }}  }
class C{  static void stop(final HttpServer httpServer){  httpServer.shutdownNow();}  }
class C{  private SAXUnmarshallerHandler createUnmarshallerHandler(Locator locator){  SAXUnmarshallerHandler unmarshaller=new SAXUnmarshallerHandlerImpl(this,grammarInfo);  try {    if (isValidating()) {      unmarshaller=ValidatingUnmarshaller.create(context.getGrammar(),unmarshaller,locator);    }  } catch (  JAXBException e) {    e.printStackTrace();  }  return unmarshaller;}  }
class C{  public void processAck(RequestEvent requestEvent,ServerTransaction serverTransaction){  logger.info("shootme: got an ACK " + requestEvent.getRequest());}  }
class C{  public void newDataAvailable(final TableModelEvent event){  fireTableChanged(event);}  }
class C{  public void createContentList(String body) throws ParseException {  if (boundary != null) {    Scanner scanner=new Scanner(body);    scanner.useDelimiter("\r?\n?--" + boundary + "(--)?\r?\n?");    while (scanner.hasNext()) {      try {        String bodyPart=scanner.next();        Content partContent=parseBodyPart(bodyPart);        contentList.add(partContent);      } catch (      NoSuchElementException e) {      }    }  } else {    ContentImpl content=parseBodyPart(body);    content.setContentTypeHeader(this.getContentTypeHeader());    this.contentList.add(content);  }}  }
class C{  TemplateSubPatternAssociation(ElemTemplate template,StepPattern pattern,String pat){  m_pattern=pat;  m_template=template;  m_stepPattern=pattern;  m_targetString=m_stepPattern.getTargetString();  m_wild=m_targetString.equals("*");}  }
class C{  public Writer(){  this.stream=new ByteArrayOutputStream();  this.config=new LDIFExportConfig(stream);  try {    this.writer=new LDIFWriter(config);  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  private V doPut(K key,V value,boolean onlyIfAbsent){  Node<K,V> z;  if (key == null)   throw new NullPointerException();  Comparator<? super K> cmp=comparator;  outer:   for (; ; ) {    for (Node<K,V> b=findPredecessor(key,cmp), n=b.next; ; ) {      if (n != null) {        Object v;        int c;        Node<K,V> f=n.next;        if (n != b.next)         break;        if ((v=n.value) == null) {          n.helpDelete(b,f);          break;        }        if (b.value == null || v == n)         break;        if ((c=cpr(cmp,key,n.key)) > 0) {          b=n;          n=f;          continue;        }        if (c == 0) {          if (onlyIfAbsent || n.casValue(v,value)) {            @SuppressWarnings("unchecked") V vv=(V)v;            return vv;          }          break;        }      }      z=new Node<K,V>(key,value,n);      if (!b.casNext(n,z))       break;      break outer;    }  }  int rnd=ThreadLocalRandom.nextSecondarySeed();  if ((rnd & 0x80000001) == 0) {    int level=1, max;    while (((rnd>>>=1) & 1) != 0)     ++level;    Index<K,V> idx=null;    HeadIndex<K,V> h=head;    if (level <= (max=h.level)) {      for (int i=1; i <= level; ++i)       idx=new Index<K,V>(z,idx,null);    } else {      level=max + 1;      @SuppressWarnings("unchecked") Index<K,V>[] idxs=(Index<K,V>[])new Index<?,?>[level + 1];      for (int i=1; i <= level; ++i)       idxs[i]=idx=new Index<K,V>(z,idx,null);      for (; ; ) {        h=head;        int oldLevel=h.level;        if (level <= oldLevel)         break;        HeadIndex<K,V> newh=h;        Node<K,V> oldbase=h.node;        for (int j=oldLevel + 1; j <= level; ++j)         newh=new HeadIndex<K,V>(oldbase,newh,idxs[j],j);        if (casHead(h,newh)) {          h=newh;          idx=idxs[level=oldLevel];          break;        }      }    }    splice:     for (int insertionLevel=level; ; ) {      int j=h.level;      for (Index<K,V> q=h, r=q.right, t=idx; ; ) {        if (q == null || t == null)         break splice;        if (r != null) {          Node<K,V> n=r.node;          int c=cpr(cmp,key,n.key);          if (n.value == null) {            if (!q.unlink(r))             break;            r=q.right;            continue;          }          if (c > 0) {            q=r;            r=r.right;            continue;          }        }        if (j == insertionLevel) {          if (!q.link(r,t))           break;          if (t.node.value == null) {            findNode(key);            break splice;          }          if (--insertionLevel == 0)           break splice;        }        if (--j >= insertionLevel && j < level)         t=t.down;        q=q.down;        r=q.right;      }    }  }  return null;}  }
class C{  public FrameBodyTXXX(FrameBodyTMOO body){  setObjectValue(DataTypes.OBJ_TEXT_ENCODING,body.getTextEncoding());  this.setObjectValue(DataTypes.OBJ_TEXT_ENCODING,TextEncoding.ISO_8859_1);  this.setObjectValue(DataTypes.OBJ_DESCRIPTION,MOOD);  this.setObjectValue(DataTypes.OBJ_TEXT,body.getText());}  }
class C{  public ResourceMatch compare(String requestResource,String targetResource,boolean wildcardCompare){  if ((requestResource == null) || (targetResource == null)) {    return ResourceMatch.NO_MATCH;  }  if (debug.messageEnabled()) {    debug.message("HttpURLResourceName.compare: " + "request resource=" + requestResource + "; policy resource="+ targetResource);  }  int requestIndex=requestResource.indexOf("?");  int targetIndex=targetResource.indexOf("?");  if ((requestIndex >= 0) || (targetIndex >= 0)) {    ResourceMatch result=ResourceMatch.NO_MATCH;    String requestSubstring1=requestResource;    String requestSubstring2=null;    if (requestIndex >= 0) {      requestSubstring1=requestResource.substring(0,requestIndex);      if (requestResource.length() > (requestIndex + 1)) {        requestSubstring2=requestResource.substring(requestIndex + 1);      }    }    String targetSubstring1=targetResource;    String targetSubstring2=null;    if (targetIndex >= 0) {      targetSubstring1=targetResource.substring(0,targetIndex);      if (targetResource.length() > (targetIndex + 1)) {        targetSubstring2=targetResource.substring(targetIndex + 1);      }    }    if (debug.messageEnabled()) {      debug.message("HttpURLResourceName.compare: " + "request resource substring1=" + requestSubstring1 + "; request resource substring2="+ requestSubstring2+ "; policy resource substring1="+ targetSubstring1+ "; policy resource substring2="+ targetSubstring2);    }    ResourceMatch substring1Res=compare(requestSubstring1,targetSubstring1,wildcardCompare);    if ((substring1Res == ResourceMatch.EXACT_MATCH) || (substring1Res == ResourceMatch.WILDCARD_MATCH)) {      if (targetSubstring2 != null && targetSubstring2.equals(wildcard) && requestResource.contains("?") && ((requestSubstring2 == null) || (requestSubstring2.trim().length() == 0))) {        return ResourceMatch.WILDCARD_MATCH;      }      if ((requestSubstring2 == null) || (requestSubstring2.trim().length() == 0)) {        return ResourceMatch.SUB_RESOURCE_MATCH;      }      if ((targetSubstring2 == null) || (targetSubstring2.trim().length() == 0)) {        return ResourceMatch.SUPER_RESOURCE_MATCH;      }      ResourceMatch substring2Res=compare(requestSubstring2,targetSubstring2,wildcardCompare);      if ((substring2Res == ResourceMatch.EXACT_MATCH) || (substring2Res == ResourceMatch.WILDCARD_MATCH)) {        if (substring1Res == substring2Res) {          result=substring2Res;        } else {          result=ResourceMatch.WILDCARD_MATCH;        }      }    } else {      result=substring1Res;    }    if (debug.messageEnabled()) {      debug.message("HttpURLResourceName.compare: with query string " + "; result=" + result);    }    return result;  }  if ((!wildcardCompare) || !targetResource.endsWith(delimiter + wildcard)) {    return (super.compare(requestResource,targetResource,wildcardCompare));  }  ResourceMatch res=super.compare(requestResource,targetResource,wildcardCompare);  if ((res == ResourceMatch.EXACT_MATCH) || (res == ResourceMatch.WILDCARD_MATCH) || (res == ResourceMatch.SUPER_RESOURCE_MATCH)) {    res=ResourceMatch.WILDCARD_MATCH;  } else   if (res == ResourceMatch.SUB_RESOURCE_MATCH) {    res=ResourceMatch.SUB_RESOURCE_MATCH;  } else {    res=ResourceMatch.NO_MATCH;  }  if (debug.messageEnabled()) {    debug.message("HttpURLResourceName.compare: result=" + res);  }  return res;}  }
class C{  public void testCase10(){  byte aBytes[]={10,20,30,40,50,60,70,10,20,30};  byte bBytes[]={1,2,3,4,5,6,7,1,2,3,4,5,6,7};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-2,-3,-4,-5,-16,-27,-38,-42,-53,-64,-75,-16,-27,-37};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.add(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  @Override public void onBindViewHolder(K holder,int positions){  super.onBindViewHolder(holder,positions);  int viewType=holder.getItemViewType();  if (mItemTouchHelper != null && itemDragEnabled && viewType != LOADING_VIEW && viewType != HEADER_VIEW && viewType != EMPTY_VIEW && viewType != FOOTER_VIEW) {    if (mToggleViewId != NO_TOGGLE_VIEW) {      View toggleView=((BaseViewHolder)holder).getView(mToggleViewId);      if (toggleView != null) {        toggleView.setTag(R.id.BaseQuickAdapter_viewholder_support,holder);        if (mDragOnLongPress) {          toggleView.setOnLongClickListener(mOnToggleViewLongClickListener);        } else {          toggleView.setOnTouchListener(mOnToggleViewTouchListener);        }      }    } else {      holder.itemView.setTag(R.id.BaseQuickAdapter_viewholder_support,holder);      holder.itemView.setOnLongClickListener(mOnToggleViewLongClickListener);    }  }}  }
class C{  @Override public void toString(StringBuilder buffer,int indent){  StringBuilder indentBuf=new StringBuilder(indent);  for (int i=0; i < indent; i++) {    indentBuf.append(' ');  }  buffer.append(indentBuf);  buffer.append("Modify DN Request");  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Entry DN:  ");  buffer.append(entryDN);  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  New RDN:  ");  buffer.append(newRDN);  buffer.append(EOL);  buffer.append(indentBuf);  buffer.append("  Delete Old RDN:  ");  buffer.append(deleteOldRDN);  buffer.append(EOL);  if (newSuperior != null) {    buffer.append(indentBuf);    buffer.append("  New Superior:  ");    buffer.append(newSuperior);    buffer.append(EOL);  }}  }
class C{  public OneStepIterator(DTMAxisIterator iterator,int axis) throws javax.xml.transform.TransformerException {  super(null);  m_iterator=iterator;  m_axis=axis;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  public Set searchSubOrganizations(String wildcard,int level) throws AMException, SSOException {  return searchSubOrganizations(wildcard,null,level);}  }
class C{  public void paintTableHeaderBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  private static void checkCRL(DistributionPoint dp,ExtendedPKIXParameters paramsPKIX,X509Certificate cert,Date validDate,X509Certificate defaultCRLSignCert,PublicKey defaultCRLSignKey,CertStatus certStatus,ReasonsMask reasonMask,List certPathCerts) throws AnnotatedException {  Date currentDate=new Date(System.currentTimeMillis());  if (validDate.getTime() > currentDate.getTime()) {    throw new AnnotatedException("Validation time is in future.");  }  Set crls=CertPathValidatorUtilities.getCompleteCRLs(dp,cert,currentDate,paramsPKIX);  boolean validCrlFound=false;  AnnotatedException lastException=null;  Iterator crl_iter=crls.iterator();  while (crl_iter.hasNext() && certStatus.getCertStatus() == CertStatus.UNREVOKED && !reasonMask.isAllReasons()) {    try {      X509CRL crl=(X509CRL)crl_iter.next();      ReasonsMask interimReasonsMask=RFC3280CertPathUtilities.processCRLD(crl,dp);      if (!interimReasonsMask.hasNewReasons(reasonMask)) {        continue;      }      Set keys=RFC3280CertPathUtilities.processCRLF(crl,cert,defaultCRLSignCert,defaultCRLSignKey,paramsPKIX,certPathCerts);      PublicKey key=RFC3280CertPathUtilities.processCRLG(crl,keys);      X509CRL deltaCRL=null;      if (paramsPKIX.isUseDeltasEnabled()) {        Set deltaCRLs=CertPathValidatorUtilities.getDeltaCRLs(currentDate,paramsPKIX,crl);        deltaCRL=RFC3280CertPathUtilities.processCRLH(deltaCRLs,key);      }      if (paramsPKIX.getValidityModel() != ExtendedPKIXParameters.CHAIN_VALIDITY_MODEL) {        if (cert.getNotAfter().getTime() < crl.getThisUpdate().getTime()) {          throw new AnnotatedException("No valid CRL for current time found.");        }      }      RFC3280CertPathUtilities.processCRLB1(dp,cert,crl);      RFC3280CertPathUtilities.processCRLB2(dp,cert,crl);      RFC3280CertPathUtilities.processCRLC(deltaCRL,crl,paramsPKIX);      RFC3280CertPathUtilities.processCRLI(validDate,deltaCRL,cert,certStatus,paramsPKIX);      RFC3280CertPathUtilities.processCRLJ(validDate,crl,cert,certStatus);      if (certStatus.getCertStatus() == CRLReason.removeFromCRL) {        certStatus.setCertStatus(CertStatus.UNREVOKED);      }      reasonMask.addReasons(interimReasonsMask);      Set criticalExtensions=crl.getCriticalExtensionOIDs();      if (criticalExtensions != null) {        criticalExtensions=new HashSet(criticalExtensions);        criticalExtensions.remove(X509Extensions.IssuingDistributionPoint.getId());        criticalExtensions.remove(X509Extensions.DeltaCRLIndicator.getId());        if (!criticalExtensions.isEmpty()) {          throw new AnnotatedException("CRL contains unsupported critical extensions.");        }      }      if (deltaCRL != null) {        criticalExtensions=deltaCRL.getCriticalExtensionOIDs();        if (criticalExtensions != null) {          criticalExtensions=new HashSet(criticalExtensions);          criticalExtensions.remove(X509Extensions.IssuingDistributionPoint.getId());          criticalExtensions.remove(X509Extensions.DeltaCRLIndicator.getId());          if (!criticalExtensions.isEmpty()) {            throw new AnnotatedException("Delta CRL contains unsupported critical extension.");          }        }      }      validCrlFound=true;    } catch (    AnnotatedException e) {      lastException=e;    }  }  if (!validCrlFound) {    throw lastException;  }}  }
class C{  protected void closeRedirector(){  try {    if (redirectOutput && redirectOutPrintStream != null) {      redirector.complete();    }  } catch (  IOException ioe) {    log("Error closing redirector: " + ioe.getMessage(),Project.MSG_ERR);  }  redirectOutStream=null;  redirectOutPrintStream=null;  redirectErrStream=null;  redirectErrPrintStream=null;}  }
class C{  public AlertInfoHeader createAlertInfoHeader(URI alertInfo){  if (alertInfo == null)   throw new NullPointerException("null arg alertInfo");  AlertInfo a=new AlertInfo();  a.setAlertInfo(alertInfo);  return a;}  }
class C{  protected void oneTouchExpandableChanged(){  if (!DefaultLookup.getBoolean(splitPane,splitPaneUI,"SplitPane.supportsOneTouchButtons",true)) {    return;  }  if (splitPane.isOneTouchExpandable() && leftButton == null && rightButton == null) {    leftButton=createLeftOneTouchButton();    if (leftButton != null)     leftButton.addActionListener(new OneTouchActionHandler(true));    rightButton=createRightOneTouchButton();    if (rightButton != null)     rightButton.addActionListener(new OneTouchActionHandler(false));    if (leftButton != null && rightButton != null) {      add(leftButton);      add(rightButton);    }  }  revalidateSplitPane();}  }
class C{  private static void checkForNullElement(Object[] arg,String argName){  if ((arg == null) || (arg.length == 0)) {    throw new IllegalArgumentException("Argument " + argName + "[] cannot be null or empty.");  }  for (int i=0; i < arg.length; i++) {    if (arg[i] == null) {      throw new IllegalArgumentException("Argument's element " + argName + "["+ i+ "] cannot be null.");    }  }}  }
class C{  public ConfigRetrievalException(String message,Throwable cause){  super(message,cause);}  }
class C{  public static void stop(Thread thread){  if (thread != null) {    thread.interrupt();  }}  }
class C{  public Status createStatus() throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.STATUS);  if (obj == null) {    return new StatusImpl();  } else {    return (Status)obj;  }}  }
class C{  EntryMsg(byte[] in,short version) throws DataFormatException {  final ByteArrayScanner scanner=new ByteArrayScanner(in);  final byte msgType=scanner.nextByte();  if (msgType != MSG_TYPE_ENTRY) {    throw new DataFormatException("input is not a valid " + getClass().getCanonicalName());  }  this.senderID=scanner.nextIntUTF8();  this.destination=scanner.nextIntUTF8();  if (version >= ProtocolVersion.REPLICATION_PROTOCOL_V4) {    this.msgId=scanner.nextIntUTF8();  }  this.entryByteArray=scanner.remainingBytesZeroTerminated();}  }
class C{  public SQLWarning(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  private void readBootJson(String basedir) throws IOException {  BootstrapConfig boot=BootstrapConfig.fromJsonFile(basedir + "/boot.json");  String dsamePassword;  String configStorePassword;  try {    AMKeyProvider amKeyProvider=new AMKeyProvider(boot.getKeyStoreConfig("default"));    dsamePassword=amKeyProvider.getSecret(DSAME_PWD_KEY);    configStorePassword=amKeyProvider.getSecret(CONFIG_PWD_KEY);  } catch (  KeyStoreException e) {    throw new IOException("Can't open boot keystore",e);  }  String server_instance=boot.getInstance();  if (server_instance == null) {    throw new IOException("Can't bootstrap - missing server instance");  }  String dsame_user=boot.getDsameUser();  for (  ConfigStoreProperties cfp : boot.getConfigStoreList()) {    Map m=new HashMap();    String proto=cfp.getLdapProtocol() + "://";    m.put(PROTOCOL,proto);    m.put(DS_HOST,cfp.getLdapHost());    String port="" + cfp.getLdapPort();    m.put(DS_PORT,port);    m.put(SERVER_INSTANCE,server_instance);    m.put(PWD,configStorePassword);    m.put(DS_BASE_DN,cfp.getBaseDN());    m.put(USER,dsame_user);    m.put(DS_MGR,cfp.getDirManagerDN());    m.put(DS_PWD,dsamePassword);    String bootstrap=createBootstrapResource(m,false);    bootstrap=StringUtils.strReplaceAll(bootstrap,"@DSAMEUSER_NAME@",URLEncoder.encode(dsame_user,"UTF-8"));    data.add(bootstrap);  }}  }
class C{  public Status(Installation installation){  this.installation=installation;}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.AttributeAuthorityDescriptorType createAttributeAuthorityDescriptorType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.AttributeAuthorityDescriptorTypeImpl();}  }
class C{  public void dispatch(){  try {    if (catchExceptions) {      try {        runnable.run();      } catch (      Throwable t) {        if (t instanceof Exception) {          exception=(Exception)t;        }        throwable=t;      }    } else {      runnable.run();    }  }  finally {    finishedDispatching(true);  }}  }
class C{  public void unregisterIdentityProviderListener(IdentityProviderListener listener){  identityProviderListeners.remove(listener.getListenerName());}  }
class C{  public void visit(int version,int access,String name,String signature,String superName,String[] interfaces){  if (cv != null) {    cv.visit(version,access,name,signature,superName,interfaces);  }}  }
class C{  public AttributeMissingException(String message){  super(message);}  }
class C{  public static DN create(ManagedObjectPath<?,?> path){  return path.toDN();}  }
class C{  public boolean markSupported(){  return true;}  }
class C{  public void fireTreeCollapsed(TreePath path){  Object[] listeners=listenerList.getListenerList();  TreeExpansionEvent e=null;  if (uiTreeExpansionListener != null) {    e=new TreeExpansionEvent(this,path);    uiTreeExpansionListener.treeCollapsed(e);  }  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeExpansionListener.class && listeners[i + 1] != uiTreeExpansionListener) {      if (e == null)       e=new TreeExpansionEvent(this,path);      ((TreeExpansionListener)listeners[i + 1]).treeCollapsed(e);    }  }}  }
class C{  public void test_setTimeZoneLjava_util_TimeZone(){  try {    DateFormat format=DateFormat.getInstance();    TimeZone tz=TimeZone.getTimeZone("America/Los_Angeles");    format.setTimeZone(tz);    assertTrue("TimeZone is set incorrectly",tz.equals(format.getTimeZone()));  } catch (  Exception e) {    fail("Unexpected exception " + e.toString());  }}  }
class C{  public SQLInvalidAuthorizationSpecException(String reason){  super(reason,null,0);}  }
class C{  ElementInfo(Element element){  this(element,null);}  }
class C{  public AbstractMethodError(String s){  super(s);}  }
class C{  public Builder prohibitedAttributes(final String... attributeNamesOrOIDs){  this.prohibitedAttributeOIDs.addAll(asList(attributeNamesOrOIDs));  return this;}  }
class C{  public static Component createHorizontalStrut(int width){  return new Filler(new Dimension(width,0),new Dimension(width,0),new Dimension(width,Short.MAX_VALUE));}  }
class C{  @Override protected void doPost(final HttpServletRequest request,final HttpServletResponse response) throws ServletException, IOException {  request.setCharacterEncoding("UTF-8");  response.setCharacterEncoding("UTF-8");  getResponse(request,response,true);}  }
class C{  public static void addFullRow(final UIComponent comp,final int colSpan,final String style) throws IOException {  if (comp != null) {    final ResponseWriter writer=JKJsfUtil.context().getResponseWriter();    writer.startElement("tr",null);    writer.startElement("td",null);    JKJsfUtil.writeAttribue(comp,"align","center");    JKJsfUtil.writeAttribue(comp,"colspan",colSpan);    JKJsfUtil.writeAttribue(comp,"styleClass","class",style);    comp.encodeAll(JKJsfUtil.context());    writer.endElement("td");    writer.endElement("tr");  }}  }
class C{  public boolean hasStreams(){  return streams.size() > 0;}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  CharSequence buildHistory(){  SQLiteOpenHelper helper=new DBHelper(activity);  SQLiteDatabase db=null;  Cursor cursor=null;  try {    db=helper.getWritableDatabase();    cursor=db.query(DBHelper.TABLE_NAME,COLUMNS,null,null,null,null,DBHelper.TIMESTAMP_COL + " DESC");    DateFormat format=DateFormat.getDateTimeInstance(DateFormat.MEDIUM,DateFormat.MEDIUM);    StringBuilder historyText=new StringBuilder(1000);    while (cursor.moveToNext()) {      historyText.append('"').append(massageHistoryField(cursor.getString(0))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(1))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(2))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(3))).append("\",");      long timestamp=cursor.getLong(3);      historyText.append('"').append(massageHistoryField(format.format(new Date(timestamp)))).append("\",");      historyText.append('"').append(massageHistoryField(cursor.getString(4))).append("\"\r\n");    }    return historyText;  }  finally {    close(cursor,db);  }}  }
class C{  long triggerTime(long delay){  return now() + ((delay < (Long.MAX_VALUE >> 1)) ? delay : overflowFree(delay));}  }
class C{  public boolean equals(Object schemaAttrSyntax){  if (schemaAttrSyntax instanceof Syntax) {    Syntax s=(Syntax)schemaAttrSyntax;    return (s.attrSyntax.equals(attrSyntax));  }  return (false);}  }
class C{  public boolean isSiteUp(String siteId){  return servicesClusterMonitorHandler.isSiteUp(siteId);}  }
class C{  protected static Set stringArrayToSet(String[] strs){  int count=strs.length;  Set set=((count > 0) ? new HashSet(count) : new HashSet());  for (int i=0; i < count; i++) {    set.add(strs[i]);  }  return set;}  }
class C{  @Override protected JsonParser _createParser(Reader r,IOContext ctxt) throws IOException {  return _nonByteSource();}  }
class C{  public static void validateAttributes(ModSet modSet,Class cls,Guid guid) throws UMSException, DataConstraintException {  if (modSet == null) {    return;  }  for (int i=0; i < modSet.size(); i++) {    Modification ldapMod=modSet.elementAt(i);    if (!ModificationType.DELETE.equals(ldapMod.getModificationType())) {      Attr attr=new Attr(ldapMod.getAttribute());      validateAttribute(attr,cls,guid);    }  }}  }
class C{  @org.opends.server.types.PublicAPI(stability=org.opends.server.types.StabilityLevel.PRIVATE,mayInstantiate=false,mayExtend=false,mayInvoke=false) @Override public void cancelAllOperations(CancelRequest cancelRequest){}  }
class C{  @PostConstruct public void init(){  try {    InputStream instream=this.getClass().getResourceAsStream("/system_ar.properties");    BufferedReader in=new BufferedReader(new InputStreamReader(instream,"utf8"));    String line;    while ((line=in.readLine()) != null) {      String label[]=line.split("=");      if (label.length >= 2) {        prop.setProperty(label[0],line.substring(line.indexOf("=") + 1));      }    }  } catch (  IOException e) {    System.err.println("Error while loading Lables : " + e);    e.printStackTrace();  }}  }
class C{  @RequestMapping(value="/user/hello",method=RequestMethod.GET,produces=MediaTypes.TEXT_PLAIN_UTF_8) public String helloUser(String name,Integer age){  User user=new User();  user.setName(name);  return "Hello," + name + "!"+ age;}  }
class C{  public GenericPrincipal(String name,String password,List<String> roles,Principal userPrincipal){  this(name,password,roles,userPrincipal,null);}  }
class C{  public AMClientDetector(String className){  if (className != null) {    try {      clientDetector=(ClientDetectionInterface)(Class.forName(className).newInstance());    } catch (    Exception ex) {      clientDetector=defaultClientDetector;    }  } else {    clientDetector=defaultClientDetector;  }}  }
class C{  public NodeSetDTM(DTMIterator ni){  super();  m_manager=ni.getDTMManager();  m_root=ni.getRoot();  addNodes(ni);}  }
class C{  private void doRegistrationInitiation(HttpServletRequest request,HttpServletResponse response,ProviderDescriptorType hostedProviderDesc,BaseConfigType hostedConfig,String hostedEntityId,String hostedRole,String hostedProviderAlias){  FSUtils.debug.message("Entered FSRegistrationInitiationServlet::doRegistrationInitiation");  try {    Object ssoToken=getValidToken(request);    if (ssoToken != null) {      String providerId=request.getParameter(IFSConstants.REGISTRATION_PROVIDER_ID);      if (providerId == null || providerId.length() < 1) {        FSUtils.debug.error("Provider Id not found, display error page");        FSServiceUtils.showErrorPage(response,COMMON_ERROR_PAGE,IFSConstants.REGISTRATION_NO_PROVIDER,IFSConstants.CONTACT_ADMIN);        return;      }      FSServiceManager instSManager=FSServiceManager.getInstance();      if (instSManager != null) {        FSUtils.debug.message("FSServiceManager Instance not null");        String remoteProviderRole=IFSConstants.SP;        FSAccountFedInfo fedinfo=null;        if (hostedRole.equalsIgnoreCase(IFSConstants.SP)) {          remoteProviderRole=IFSConstants.IDP;          FSSessionManager sessManager=FSSessionManager.getInstance(hostedProviderAlias);          FSSession ssoSession=sessManager.getSession(ssoToken);          if (ssoSession != null) {            if (!ssoSession.getOneTime()) {              fedinfo=ssoSession.getAccountFedInfo();            }          }        }        SessionProvider sessionProvider=SessionManager.getProvider();        FSNameRegistrationHandler handlerObj=instSManager.getNameRegistrationHandler(providerId,remoteProviderRole,sessionProvider.getPrincipalName(ssoToken),hostedEntityId,hostedProviderAlias);        if (handlerObj != null) {          handlerObj.setHostedDescriptor(hostedProviderDesc);          handlerObj.setHostedDescriptorConfig(hostedConfig);          handlerObj.setMetaAlias(hostedProviderAlias);          handlerObj.setHostedProviderRole(hostedRole);          handlerObj.setHostedEntityId(hostedEntityId);          if (fedinfo != null) {            handlerObj.setAccountInfo(fedinfo);          }          boolean bStatus=handlerObj.handleNameRegistration(request,response,ssoToken);          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("handleNameRegistration status is : " + bStatus);          }          return;        } else {          if (FSUtils.debug.messageEnabled()) {            FSUtils.debug.message("Unable to get registration " + "handler. User account Not valid");          }        }      } else {        FSUtils.debug.message("FSServiceManager Instance null");      }      FSServiceUtils.returnLocallyAfterOperation(response,REGISTRATION_DONE_URL,false,IFSConstants.REGISTRATION_SUCCESS,IFSConstants.REGISTRATION_FAILURE);      return;    } else {      FSServiceUtils.redirectForAuthentication(request,response,hostedProviderAlias);      return;    }  } catch (  IOException e) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("IOException in doRegistrationInitiation:",e);    }  }catch (  SessionException ex) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("SessionException in doRegistrationInitiation",ex);    }  }  FSServiceUtils.returnLocallyAfterOperation(response,REGISTRATION_DONE_URL,false,IFSConstants.REGISTRATION_SUCCESS,IFSConstants.REGISTRATION_FAILURE);}  }
class C{  public void install(JFormattedTextField ftf){  super.install(ftf);  if (ftf != null) {    Object value=ftf.getValue();    try {      stringToValue(valueToString(value));    } catch (    ParseException pe) {      setEditValid(false);    }  }}  }
class C{  public List<String> metricsPatterns(){  return values.metricsPatterns;}  }
class C{  public void makeLogEntry(EventName eventName,AcceptedRadiusEvent accessRequestEvent){  LOG.message("Entering RadiusAuditLoggerEventBus.makeLogEntry()");  Set<String> trackingIds=new HashSet<String>();  trackingIds.add(accessRequestEvent.getRequest().getContextHolderKey());  AuditRequestContext.set(new AuditRequestContext(new TransactionId(accessRequestEvent.getRequestId())));  AMAccessAuditEventBuilder builder=auditEventFactory.accessEvent(accessRequestEvent.getRealm()).timestamp(accessRequestEvent.getTimeOfEvent()).transactionId(accessRequestEvent.getRequestId()).eventName(eventName).component(Component.RADIUS).trackingIds(trackingIds);  String uid=accessRequestEvent.getUniversalId();  if (!Strings.isNullOrEmpty(uid)) {    builder.userId(uid);  } else {    LOG.message("Not setting authentication to universal Id. None available.");  }  setRequestDetails(builder,accessRequestEvent);  try {    setClientDetails(builder,accessRequestEvent.getRequestContext());    RadiusResponse response=accessRequestEvent.getResponse();    if (response.getResponsePacket() != null) {      setResponseDetails(builder,response);    }  } catch (  RadiusAuditLoggingException e) {    LOG.warning("Failed to set client details on access audit event. Reason; {}",e.getMessage());  }  this.auditEventPublisher.tryPublish(AuditConstants.ACCESS_TOPIC,builder.toEvent());  LOG.message("Leaving RadiusAuditLoggerEventBus.makeLogEntry()");}  }
class C{  static void testExtendOkay(ClassLoader loader){  Class doubledExtendOkayClass;  Object obj;  try {    doubledExtendOkayClass=loader.loadClass("DoubledExtendOkay");  } catch (  ClassNotFoundException cnfe) {    System.err.println("loadClass failed: " + cnfe);    return;  }  try {    obj=doubledExtendOkayClass.newInstance();  } catch (  InstantiationException ie) {    System.err.println("newInstance failed: " + ie);    return;  }catch (  IllegalAccessException iae) {    System.err.println("newInstance failed: " + iae);    return;  }catch (  LinkageError le) {    System.err.println("Got unexpected LinkageError on DEO");    le.printStackTrace();    return;  }  BaseOkay baseRef=(BaseOkay)obj;  DoubledExtendOkay de=baseRef.getExtended();  try {    String result;    result=BaseOkay.doStuff(de);    System.out.println("Got DEO result " + result);  } catch (  LinkageError le) {    System.err.println("Got unexpected LinkageError on DEO");    le.printStackTrace();    return;  }}  }
class C{  public com.sun.identity.saml2.jaxb.metadata.OrganizationType createOrganizationType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.metadata.impl.OrganizationTypeImpl();}  }
class C{  public GZIPInputStream(InputStream in,int size) throws IOException {  super(in,new Inflater(true),size);  usesDefaultInflater=true;  readHeader(in);}  }
class C{  public PaddingException(String msg){  super(msg);}  }
class C{  public boolean isInMemoryDb(){  return path.equalsIgnoreCase(MEMORY_DB_PATH);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  UserDao.createTable(db,ifNotExists);}  }
class C{  public SIPHeader parse() throws ParseException {  WarningList warningList=new WarningList();  if (debug)   dbg_enter("WarningParser.parse");  try {    headerName(TokenTypes.WARNING);    while (lexer.lookAhead(0) != '\n') {      Warning warning=new Warning();      warning.setHeaderName(SIPHeaderNames.WARNING);      this.lexer.match(TokenTypes.ID);      Token token=lexer.getNextToken();      try {        int code=Integer.parseInt(token.getTokenValue());        warning.setCode(code);      } catch (      NumberFormatException ex) {        throw createParseException(ex.getMessage());      }catch (      InvalidArgumentException ex) {        throw createParseException(ex.getMessage());      }      this.lexer.SPorHT();      this.lexer.match(TokenTypes.ID);      token=lexer.getNextToken();      if (lexer.lookAhead(0) == ':') {        this.lexer.match(':');        this.lexer.match(TokenTypes.ID);        Token token2=lexer.getNextToken();        warning.setAgent(token.getTokenValue() + ":" + token2.getTokenValue());      } else {        warning.setAgent(token.getTokenValue());      }      this.lexer.SPorHT();      String text=this.lexer.quotedString();      warning.setText(text);      this.lexer.SPorHT();      warningList.add(warning);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        warning=new Warning();        this.lexer.match(TokenTypes.ID);        Token tok=lexer.getNextToken();        try {          int code=Integer.parseInt(tok.getTokenValue());          warning.setCode(code);        } catch (        NumberFormatException ex) {          throw createParseException(ex.getMessage());        }catch (        InvalidArgumentException ex) {          throw createParseException(ex.getMessage());        }        this.lexer.SPorHT();        this.lexer.match(TokenTypes.ID);        tok=lexer.getNextToken();        if (lexer.lookAhead(0) == ':') {          this.lexer.match(':');          this.lexer.match(TokenTypes.ID);          Token token2=lexer.getNextToken();          warning.setAgent(tok.getTokenValue() + ":" + token2.getTokenValue());        } else {          warning.setAgent(tok.getTokenValue());        }        this.lexer.SPorHT();        text=this.lexer.quotedString();        warning.setText(text);        this.lexer.SPorHT();        warningList.add(warning);      }    }  }  finally {    if (debug)     dbg_leave("WarningParser.parse");  }  return warningList;}  }
class C{  public void test_binarySearchLjava_util_ListLjava_lang_ObjectLjava_util_Comparator(){  LinkedList<Integer> lst=new LinkedList<Integer>();  lst.add(new Integer(30));  Collections.sort(lst,null);  int index=Collections.binarySearch(lst,new Integer(2),null);  assertEquals(-1,index);  LinkedList<String> lls=new LinkedList<String>();  lls.add("1");  lls.add("2");  lls.add("3");  lls.add("4");  lls.add("");  LinkedList<String> ll=lls;  try {    Collections.binarySearch(ll,new Integer(10),null);    fail("ClassCastException expected");  } catch (  ClassCastException e) {  }}  }
class C{  private void initAuthServiceGlobalSettings() throws Exception {  ServiceSchemaManager scm=new ServiceSchemaManager(ISAuthConstants.AUTH_SERVICE_NAME,ssoAuthSession);  updateAuthServiceGlobals(scm);  new AuthConfigMonitor(scm);}  }
class C{  public FrameBodyTMCL(ByteBuffer byteBuffer,int frameSize) throws InvalidTagException {  super(byteBuffer,frameSize);}  }
class C{  protected void tearDown(){}  }
class C{  public boolean isAutomaticExpand(){  return automaticExpand;}  }
class C{  public SQLTransientConnectionException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public double[] board_to_dsn(PlaVectorInt p_vector){  double[] result=new double[2];  PlaPointFloat v=p_vector.to_float();  result[0]=board_to_dsn(v.v_x);  result[1]=board_to_dsn(v.v_y);  return result;}  }
class C{  @Deprecated public boolean isBackingStoreEnabled(){  return scrollMode == BACKINGSTORE_SCROLL_MODE;}  }
class C{  public static boolean match(String value,String strPattern){  if (isNotEmpty(strPattern)) {    if (isBlank(value)) {      return strPattern.equals("*");    }    value=value.toLowerCase();    strPattern=strPattern.toLowerCase();    StringBuilder buff=new StringBuilder();    for (int i=0; i < strPattern.length() - 1; i++) {      char c=strPattern.charAt(i);      if (c == '*') {        buff.append(".*?");      } else {        buff.append(c);      }    }    char lastChar=strPattern.charAt(strPattern.length() - 1);    if (lastChar == '*') {      buff.append(".*");    } else {      buff.append(lastChar);    }    return Pattern.matches(buff.toString(),value);  }  return true;}  }
class C{  public InsertContent(Pattern pattern){  this.pattern=pattern;}  }
class C{  public static boolean isRegistered(String fontName){  return FontProgramFactory.isRegisteredFont(fontName);}  }
class C{  public boolean bool(){  return false;}  }
class C{  public void writeExtendedResult(final int messageID,final ExtendedResult result) throws IOException {  logger.trace("ENCODE LDAP EXTENDED RESULT(messageID=%d, result=%s)",messageID,result);  writeMessageHeader(messageID);{    writeResultHeader(LDAP.OP_TYPE_EXTENDED_RESPONSE,result);{      final String responseName=result.getOID();      if (responseName != null) {        writer.writeOctetString(LDAP.TYPE_EXTENDED_RESPONSE_OID,responseName);      }      final ByteString responseValue=result.getValue();      if (responseValue != null) {        writer.writeOctetString(LDAP.TYPE_EXTENDED_RESPONSE_VALUE,responseValue);      }    }    writeResultFooter(writer);  }  writeMessageFooter(result.getControls());}  }
class C{  public JKHttpException(final String message,final int errorCode){  super(message);  this.errorCode=errorCode;}  }
class C{  public <T>Class<? extends T> loadClass(String className,Class<T> instanceOf){  Reject.ifNull(className,instanceOf);  validateClassName(className);  Class<?> theClass=validateClassInterfaces(className,true);  return theClass.asSubclass(instanceOf);}  }
class C{  public Obligation createObligation(){  Object obj=XACMLSDKUtils.getObjectInstance(XACMLConstants.REQUEST);  if (obj == null) {    return new ObligationImpl();  } else {    return (Obligation)obj;  }}  }
class C{  public void endElement(String name) throws org.xml.sax.SAXException {  endElement(null,null,name);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.xmlsig.TransformType createTransformType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.xmlsig.impl.TransformTypeImpl();}  }
class C{  @Override public void addAll(Collection<PdfObject> c){  for (  PdfObject obj : c) {    add(obj);  }}  }
class C{  public static PropertyException illegalPropertyValueException(final PropertyDefinition<?> pd,final Object value,final Throwable cause){  return new PropertyException(pd,createMessage(pd,value),cause);}  }
class C{  void resetVolatileDoubleBuffer(GraphicsConfiguration gc){  Image image=volatileMap.remove(gc);  if (image != null) {    image.flush();  }}  }
class C{  public Object clone(){  return new X509CollectionStoreParameters(collection);}  }
class C{  @Override public int hashCode(){  try {    return getNormalizedValue().hashCode();  } catch (  Exception e) {    logger.traceException(e);    return value.hashCode();  }}  }
class C{  public synchronized void removeConsumer(ImageConsumer ic){  if (proxies != null) {    ImageFilter imgf=(ImageFilter)proxies.get(ic);    if (imgf != null) {      src.removeConsumer(imgf);      proxies.remove(ic);      if (proxies.isEmpty()) {        proxies=null;      }    }  }}  }
class C{  private JsonValue doSourceSync(Context context,String resourceId,JsonValue value,boolean sourceDeleted,JsonValue oldValue) throws SynchronizationException {  JsonValue results=json(array());  LOGGER.trace("Start source synchronization of {} {}",resourceId,(value == null) ? "without a value" : "with a value");  LazyObjectAccessor sourceObjectAccessor=null;  if (sourceDeleted) {    sourceObjectAccessor=new LazyObjectAccessor(connectionFactory,sourceObjectSet,resourceId,null);  } else   if (value != null) {    value.put("_id",resourceId);    sourceObjectAccessor=new LazyObjectAccessor(connectionFactory,sourceObjectSet,resourceId,value);  } else {    sourceObjectAccessor=new LazyObjectAccessor(connectionFactory,sourceObjectSet,resourceId);  }  for (  String linkQualifier : getLinkQualifiers(sourceObjectAccessor.getObject(),oldValue,false,context,null)) {    SourceSyncOperation op=new SourceSyncOperation(this,context);    op.oldValue=oldValue;    op.setLinkQualifier(linkQualifier);    op.sourceObjectAccessor=sourceObjectAccessor;    SyncAuditEventLogger syncAuditEvent=new SyncAuditEventLogger(op,name,context);    syncAuditEvent.setSourceObjectId(LazyObjectAccessor.qualifiedId(sourceObjectSet,resourceId));    Status status=Status.SUCCESS;    try {      results.add(op.sync());    } catch (    SynchronizationException e) {      if (op.action != ReconAction.EXCEPTION) {        status=Status.FAILURE;        LOGGER.warn("Unexpected failure during source synchronization",e);      }      setLogEntryMessage(syncAuditEvent,e);      throw e;    } finally {      syncAuditEvent.setTargetObjectId(op.getTargetObjectId());      syncAuditEvent.setLinkQualifier(op.getLinkQualifier());      syncAuditEvent.setStatus(status);      logEntry(syncAuditEvent,null);    }  }  return results;}  }
class C{  public static String unescapeSpecialCharacters(String text){  text=text.replaceAll("&amp;","&");  text=text.replaceAll("&lt;","<");  text=text.replaceAll("&gt;",">");  text=text.replaceAll("&quot;","\"");  text=text.replaceAll("&apos;","'");  text=text.replaceAll("&#xA;","\n");  text=text.replaceAll("&#xD;","\r");  return text;}  }
class C{  public static Foo[] findByUuid_PrevAndNext(long fooId,java.lang.String uuid,OrderByComparator<Foo> orderByComparator) throws com.liferay.blade.samples.servicebuilder.exception.NoSuchFooException {  return getPersistence().findByUuid_PrevAndNext(fooId,uuid,orderByComparator);}  }
class C{  public String formatErrors(){  String errorMessage=error.getMessage();  if (errorMessage == null)   errorMessage="";  StringBuilder message=new StringBuilder(errorMessage);  if (message.length() > 0)   message.append(' ').append('(').append(status).append(')'); else   message.append(status);  List<FieldError> errors=error.getErrors();  if (errors != null && errors.size() > 0) {    message.append(':');    for (    FieldError fieldError : errors)     message.append(' ').append(format(fieldError)).append(',');    message.deleteCharAt(message.length() - 1);  }  return message.toString();}  }
class C{  public void invalidate_drill_pages(ShapeTile p_shape){  drill_page_array.invalidate(p_shape);}  }
class C{  void checkSecurityManager(Class<?> refc,MemberName m){  SecurityManager smgr=System.getSecurityManager();  if (smgr == null)   return;  if (allowedModes == TRUSTED)   return;  boolean fullPowerLookup=hasPrivateAccess();  if (!fullPowerLookup || !VerifyAccess.classLoaderIsAncestor(lookupClass,refc)) {    ReflectUtil.checkPackageAccess(refc);  }  if (m.isPublic())   return;  if (!fullPowerLookup) {    smgr.checkPermission(SecurityConstants.CHECK_MEMBER_ACCESS_PERMISSION);  }  Class<?> defc=m.getDeclaringClass();  if (!fullPowerLookup && defc != refc) {    ReflectUtil.checkPackageAccess(defc);  }}  }
class C{  public PolicyEnforcementFilter(@SuppressWarnings("rawtypes") final LeftValueExpression<Map> target,final RequestHandler requestHandler,final Handler failureHandler){  this.target=checkNotNull(target);  this.requestHandler=checkNotNull(requestHandler);  this.failureHandler=checkNotNull(failureHandler);}  }
class C{  public static JTextField makeJTextField(LocalizableMessage text,LocalizableMessage tooltip,int size,TextStyle style){  JTextField f=new JTextField();  updateTextFieldComponent(f,text,tooltip,size,style);  f.addFocusListener(new TextFieldFocusListener(f));  return f;}  }
class C{  public boolean loadOnStartup(Container children[]){  TreeMap<Integer,ArrayList<Wrapper>> map=new TreeMap<>();  for (int i=0; i < children.length; i++) {    Wrapper wrapper=(Wrapper)children[i];    int loadOnStartup=wrapper.getLoadOnStartup();    if (loadOnStartup < 0)     continue;    Integer key=Integer.valueOf(loadOnStartup);    ArrayList<Wrapper> list=map.get(key);    if (list == null) {      list=new ArrayList<>();      map.put(key,list);    }    list.add(wrapper);  }  for (  ArrayList<Wrapper> list : map.values()) {    for (    Wrapper wrapper : list) {      try {        wrapper.load();      } catch (      ServletException e) {        getLogger().error(sm.getString("standardContext.loadOnStartup.loadException",getName(),wrapper.getName()),StandardWrapper.getRootCause(e));        if (getComputedFailCtxIfServletStartFails()) {          return false;        }      }    }  }  return true;}  }
class C{  public Cell add(String content){  return add(new Paragraph(content));}  }
class C{  @Override public boolean isRootNode(){  return isRootNode;}  }
class C{  public XmlSerializer newSerializer() throws XmlPullParserException {  if (serializerClasses == null) {    throw new XmlPullParserException("Factory initialization incomplete - has not tried " + classNamesLocation);  }  if (serializerClasses.size() == 0) {    throw new XmlPullParserException("No valid serializer classes found in " + classNamesLocation);  }  final StringBuilder issues=new StringBuilder();  for (int i=0; i < serializerClasses.size(); i++) {    final Class ppClass=(Class)serializerClasses.get(i);    try {      final XmlSerializer ser=(XmlSerializer)ppClass.newInstance();      return ser;    } catch (    Exception ex) {      issues.append(ppClass.getName() + ": " + ex.toString()+ "; ");    }  }  throw new XmlPullParserException("could not create serializer: " + issues);}  }
class C{  public static void destroyMBean(ContextEnvironment environment) throws Exception {  String mname=createManagedName(environment);  ManagedBean managed=registry.findManagedBean(mname);  if (managed == null) {    return;  }  String domain=managed.getDomain();  if (domain == null)   domain=mserver.getDefaultDomain();  ObjectName oname=createObjectName(domain,environment);  if (mserver.isRegistered(oname))   mserver.unregisterMBean(oname);}  }
class C{  public static String insert(final String value,final String substr,final int index){  validate(value,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  validate(substr,NULL_STRING_PREDICATE,NULL_STRING_MSG_SUPPLIER);  if (index > value.length()) {    return value;  }  return append(value.substring(0,index),substr,value.substring(index));}  }
class C{  protected void childAllocation(int index,Rectangle alloc){  alloc.x+=getOffset(X_AXIS,index);  alloc.y+=getOffset(Y_AXIS,index);  alloc.width=getSpan(X_AXIS,index);  alloc.height=getSpan(Y_AXIS,index);}  }
class C{  public LogRecord(Level level,String msg){  super(level,msg);}  }
class C{  public boolean valueMatches(AttributeType type,ByteString value){  for (  MatchedValuesFilter f : filters) {    try {      if (f.valueMatches(type,value)) {        return true;      }    } catch (    Exception e) {      logger.traceException(e);    }  }  return false;}  }
class C{  @Override public boolean isField2(){  return _foo.isField2();}  }
class C{  static <T>PropertyEditorModification<T> createResetModification(PropertyDefinition<T> propertyDefinition,SortedSet<T> originalValues){  return new PropertyEditorModification<>(propertyDefinition,Type.RESET,new TreeSet<T>(propertyDefinition),originalValues);}  }
class C{  public AppLauncher args(String... args){  this.args.addAll(Arrays.asList(args));  return this;}  }
class C{  public void write(final Record<K,V> record) throws ChangelogException {  try {    write(parser.encodeRecord(record));    writer.flush();  } catch (  Exception e) {    throw new ChangelogException(ERR_CHANGELOG_UNABLE_TO_ADD_RECORD.get(record.toString(),writer.getFile().getPath()),e);  }}  }
class C{  public SocketHandler(String host,int port) throws IOException {  sealed=false;  configure();  sealed=true;  this.port=port;  this.host=host;  connect();}  }
class C{  public static String printLong(long val){  if (theConverter == null)   initConverter();  return theConverter.printLong(val);}  }
class C{  public void treeNodesChanged(TreeModelEvent e){  fireVisibleDataPropertyChange();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node testAddr;  Attr addrAttr;  String attr;  String namespaceURI;  String localName;  String prefix;  doc=(Document)load("staffNS",true);  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  ((Element)testAddr).removeAttributeNS("http://www.nist.gov","local1");  elementList=doc.getElementsByTagName("emp:address");  testAddr=elementList.item(0);  addrAttr=((Element)testAddr).getAttributeNodeNS("http://www.nist.gov","local1");  attr=((Element)testAddr).getAttributeNS("http://www.nist.gov","local1");  namespaceURI=addrAttr.getNamespaceURI();  localName=addrAttr.getLocalName();  prefix=testAddr.getPrefix();  assertEquals("attr","FALSE",attr);  assertEquals("uri","http://www.nist.gov",namespaceURI);  assertEquals("lname","local1",localName);  assertEquals("prefix","emp",prefix);}  }
class C{  @Override public void execute() throws BuildException {  super.execute();  String queryString;  if (query == null) {    queryString="";  } else {    try {      queryString="?qry=" + URLEncoder.encode(query,getCharset());    } catch (    UnsupportedEncodingException e) {      throw new BuildException("Invalid 'charset' attribute: " + getCharset());    }  }  log("Query string is " + queryString);  execute("/jmxproxy/" + queryString);}  }
class C{  private File exportCertificate() throws Exception {  File path=File.createTempFile("exportCertificate",".cert");  path.deleteOnExit();  path.delete();  CertificateManager certManager=new CertificateManager(JKS_KEY_STORE_PATH,"JKS","password");  Certificate certificate=certManager.getCertificate("server-cert");  assertNotNull(certificate);  byte[] certificateBytes=certificate.getEncoded();  assertNotNull(certificateBytes);  assertTrue(certificateBytes.length > 0);  FileOutputStream outputStream=new FileOutputStream(path,false);  outputStream.write(certificateBytes);  outputStream.close();  return path;}  }
class C{  private IntegerValidator(){}  }
class C{  public void log(Level level,String msg,Throwable thrown){  if (!isLoggable(level)) {    return;  }  LogRecord lr=new LogRecord(level,msg);  lr.setThrown(thrown);  doLog(lr);}  }
class C{  public Compiler shiftRight(String fileDir){  return shiftRight(new File(fileDir));}  }
class C{  public static NamingResponse parseXML(String xml){  NamingResponseParser parser=new NamingResponseParser(xml);  return parser.parseXML();}  }
class C{  public void migrate(InstallLogger migrateLog) throws InstallException {  migrate(null,INT_OPERATION_TYPE_REGULAR,migrateLog);}  }
class C{  @Override public EnumEvalResult evaluate(AciEvalContext evalCtx){  return evaluate(evalCtx.getRemoteAddress());}  }
class C{  public HashDocAttributeSet(DocAttribute[] attributes){  super(attributes,DocAttribute.class);}  }
class C{  public void changed_area_join_corner(BrdChangedArea p_area,int p_index,int p_layer){  PlaPointFloat corner=get(p_index).intersection_approx(get(p_index + 1));  if (corner.is_NaN())   return;  p_area.join(corner,p_layer);}  }
class C{  private Object writeReplace(){  return new Ser(Ser.MINGUO_DATE_TYPE,this);}  }
class C{  public static Pair<X509Certificate,PrivateKey> generateCertificate(String commonName,String organization,String organizationUnit,String stateOrProvince,String country,String locality,String algorithm,int keySize,String signatureAlgorithm,String validFrom,String validTo) throws Exception {  KeyPairGenerator keyPairGenerator=KeyPairGenerator.getInstance(algorithm);  keyPairGenerator.initialize(keySize);  KeyPair keyPair=keyPairGenerator.generateKeyPair();  X500NameBuilder builder=new X500NameBuilder(BCStyle.INSTANCE);  builder.addRDN(BCStyle.C,country);  builder.addRDN(BCStyle.ST,stateOrProvince);  builder.addRDN(BCStyle.L,locality);  builder.addRDN(BCStyle.OU,organizationUnit);  builder.addRDN(BCStyle.O,organization);  builder.addRDN(BCStyle.CN,commonName);  Date notBefore;  Date notAfter;  if (validFrom == null) {    notBefore=new Date(System.currentTimeMillis() - 1000L * 60 * 60* 24* 30);  } else {    DateTime notBeforeDateTime=DateUtil.getDateUtil().parseIfDate(validFrom);    if (notBeforeDateTime == null) {      throw new InternalServerErrorException("Invalid date format for 'validFrom' property");    } else {      notBefore=notBeforeDateTime.toDate();    }  }  if (validTo == null) {    Calendar date=Calendar.getInstance();    date.setTime(new Date());    date.add(Calendar.YEAR,10);    notAfter=date.getTime();  } else {    DateTime notAfterDateTime=DateUtil.getDateUtil().parseIfDate(validTo);    if (notAfterDateTime == null) {      throw new InternalServerErrorException("Invalid date format for 'validTo' property");    } else {      notAfter=notAfterDateTime.toDate();    }  }  BigInteger serial=BigInteger.valueOf(System.currentTimeMillis());  X509v3CertificateBuilder v3CertGen=new JcaX509v3CertificateBuilder(builder.build(),serial,notBefore,notAfter,builder.build(),keyPair.getPublic());  ContentSigner sigGen=new JcaContentSignerBuilder(signatureAlgorithm).setProvider(BC).build(keyPair.getPrivate());  X509Certificate cert=new JcaX509CertificateConverter().setProvider(BC).getCertificate(v3CertGen.build(sigGen));  cert.checkValidity(new Date());  cert.verify(cert.getPublicKey());  return Pair.of(cert,keyPair.getPrivate());}  }
class C{  public SIPMessage parseSIPMessage(byte[] msgBuffer,boolean readBody,boolean strict,ParseExceptionListener parseExceptionListener) throws ParseException {  if (msgBuffer == null || msgBuffer.length == 0)   return null;  int i=0;  try {    while (msgBuffer[i] < 0x20)     i++;  } catch (  ArrayIndexOutOfBoundsException e) {    if (logger.isLoggingEnabled(StackLogger.TRACE_DEBUG)) {      logger.logDebug("handled only control char so returning null");    }    return null;  }  String currentLine=null;  String currentHeader=null;  boolean isFirstLine=true;  SIPMessage message=null;  do {    int lineStart=i;    try {      while (msgBuffer[i] != '\r' && msgBuffer[i] != '\n')       i++;    } catch (    ArrayIndexOutOfBoundsException e) {      break;    }    int lineLength=i - lineStart;    try {      currentLine=new String(msgBuffer,lineStart,lineLength,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new ParseException("Bad message encoding!",0);    }    currentLine=trimEndOfLine(currentLine);    if (currentLine.length() == 0) {      if (currentHeader != null && message != null) {        processHeader(currentHeader,message,parseExceptionListener,msgBuffer);      }    } else {      if (isFirstLine) {        message=processFirstLine(currentLine,parseExceptionListener,msgBuffer);      } else {        char firstChar=currentLine.charAt(0);        if (firstChar == '\t' || firstChar == ' ') {          if (currentHeader == null)           throw new ParseException("Bad header continuation.",0);          currentHeader+=currentLine.substring(1);        } else {          if (currentHeader != null && message != null) {            processHeader(currentHeader,message,parseExceptionListener,msgBuffer);          }          currentHeader=currentLine;        }      }    }    if (msgBuffer[i] == '\r' && msgBuffer.length > i + 1 && msgBuffer[i + 1] == '\n')     i++;    i++;    isFirstLine=false;  } while (currentLine.length() > 0);  if (message == null)   throw new ParseException("Bad message",0);  message.setSize(i);  if (readBody && message.getContentLength() != null) {    if (message.getContentLength().getContentLength() != 0) {      int bodyLength=msgBuffer.length - i;      byte[] body=new byte[bodyLength];      System.arraycopy(msgBuffer,i,body,0,bodyLength);      message.setMessageContent(body,!strict,computeContentLengthFromMessage,message.getContentLength().getContentLength());    } else     if (!computeContentLengthFromMessage && message.getContentLength().getContentLength() == 0 & strict) {      String last4Chars=new String(msgBuffer,msgBuffer.length - 4,4);      if (!"\r\n\r\n".equals(last4Chars)) {        throw new ParseException("Extraneous characters at the end of the message ",i);      }    }  }  return message;}  }
class C{  private void net_init(RoutingBoard p_board,int p_via_costs){  RuleNet curr_net=p_board.brd_rules.nets.get(net_no);  NetClass curr_net_class;  if (curr_net != null) {    curr_net_class=curr_net.get_class();    trace_clearance_idx=curr_net_class.get_trace_clearance_class();    via_rule=curr_net_class.get_via_rule();  } else {    System.out.println("ArtControl.net_init: STRANGE curr_net==null");    trace_clearance_idx=1;    via_rule=p_board.brd_rules.via_rules.firstElement();    curr_net_class=null;  }  for (int index=0; index < layer_count; ++index) {    if (net_no > 0)     trace_half_width[index]=p_board.brd_rules.get_trace_half_width(net_no,index); else     trace_half_width[index]=p_board.brd_rules.get_trace_half_width(1,index);    compensated_trace_half_width[index]=trace_half_width[index] + p_board.brd_rules.clearance_matrix.clearance_compensation_value(trace_clearance_idx,index);    if (curr_net_class != null && !curr_net_class.is_active_routing_layer(index))     layer_active[index]=false;  }  if (via_rule.via_count() > 0) {    via_clearance_idx=via_rule.get_via(0).get_clearance_class();  } else {    via_clearance_idx=1;  }  via_info_arr=new ArtViaMask[via_rule.via_count()];  for (int index=0; index < via_rule.via_count(); ++index) {    BrdViaInfo curr_via=via_rule.get_via(index);    if (curr_via.attach_smd_allowed())     attach_smd_allowed=true;    LibPadstack curr_via_padstack=curr_via.get_padstack();    int from_layer=curr_via_padstack.from_layer();    int to_layer=curr_via_padstack.to_layer();    for (int jndex=from_layer; jndex <= to_layer; ++jndex) {      ShapeConvex curr_shape=curr_via_padstack.get_shape(jndex);      double curr_radius=curr_shape != null ? 0.5 * curr_shape.max_width() : 0;      via_radius_arr[jndex]=Math.max(via_radius_arr[jndex],curr_radius);    }    via_info_arr[index]=new ArtViaMask(from_layer,to_layer,curr_via.attach_smd_allowed());  }  for (int jndex=0; jndex < layer_count; ++jndex) {    via_radius_arr[jndex]=Math.max(via_radius_arr[jndex],trace_half_width[jndex]);    via_radius_max=Math.max(via_radius_max,via_radius_arr[jndex]);  }  double via_cost_factor=via_radius_max;  via_cost_factor=Math.max(via_cost_factor,1);  min_normal_via_cost=p_via_costs * via_cost_factor;  min_cheap_via_cost=0.8 * min_normal_via_cost;}  }
class C{  public static byte[] serializeToBuffer(XMPMeta xmp,SerializeOptions options) throws XMPException {  assertImplementation(xmp);  return XMPSerializerHelper.serializeToBuffer((XMPMetaImpl)xmp,options);}  }
class C{  private void notifyAuthDataChanged(LDAPURL url){  startRefreshReferralNodes(rootNode);}  }
class C{  public static String encodeBase64(byte[] buffer){  return new String(Base64.encode(buffer));}  }
class C{  @Override public boolean hasRole(Wrapper wrapper,Principal principal,String role){  if (wrapper != null) {    String realRole=wrapper.findSecurityReference(role);    if (realRole != null)     role=realRole;  }  if (principal instanceof GenericPrincipal) {    GenericPrincipal gp=(GenericPrincipal)principal;    if (gp.getUserPrincipal() instanceof User) {      principal=gp.getUserPrincipal();    }  }  if (!(principal instanceof User)) {    return super.hasRole(null,principal,role);  }  if ("*".equals(role)) {    return true;  } else   if (role == null) {    return false;  }  User user=(User)principal;  Role dbrole=database.findRole(role);  if (dbrole == null) {    return false;  }  if (user.isInRole(dbrole)) {    return true;  }  Iterator<Group> groups=user.getGroups();  while (groups.hasNext()) {    Group group=groups.next();    if (group.isInRole(dbrole)) {      return true;    }  }  return false;}  }
class C{  private void adjust_corners(){  int check_len=plaline_len(-2);  for (int index=0; index < check_len; index++) {    adjust_corner(index);  }}  }
class C{  public static Foo fetchByUUID_G(java.lang.String uuid,long groupId){  return getPersistence().fetchByUUID_G(uuid,groupId);}  }
class C{  public void testGetPublicId() throws Throwable {  Document doc;  DocumentType docType;  DOMImplementation domImpl;  String publicId;  String nullNS=null;  doc=(Document)load("staffNS",builder);  domImpl=doc.getImplementation();  docType=domImpl.createDocumentType("l2:root","PUB",nullNS);  publicId=docType.getPublicId();  assertEquals("documenttypepublicid01","PUB",publicId);}  }
class C{  public static int countByUuid_C(java.lang.String uuid,long companyId){  return getPersistence().countByUuid_C(uuid,companyId);}  }
class C{  public NameNotFoundException(String explanation){  super(explanation);}  }
class C{  public static MatchedValuesRequestControl newControl(final boolean isCritical,final String... filters){  Reject.ifFalse(filters.length > 0,"filters is empty");  final List<Filter> parsedFilters=new ArrayList<>(filters.length);  for (  final String filter : filters) {    parsedFilters.add(validateFilter(Filter.valueOf(filter)));  }  return new MatchedValuesRequestControl(isCritical,Collections.unmodifiableList(parsedFilters));}  }
class C{  @Override public String toString(){  return attr;}  }
class C{  public void deinstall(JTextComponent c){  c.removeMouseListener(this);  c.removeMouseMotionListener(this);  c.removeFocusListener(this);  c.removePropertyChangeListener(handler);  Document doc=c.getDocument();  if (doc != null) {    doc.removeDocumentListener(handler);  }synchronized (this) {    component=null;  }  if (flasher != null) {    flasher.stop();  }}  }
class C{  public com.sun.identity.federation.jaxb.entityconfig.ValueElement createValueElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.federation.jaxb.entityconfig.impl.ValueElementImpl();}  }
class C{  public static BooleanArgument remoteArgument() throws ArgumentException {  return BooleanArgument.builder(OPTION_LONG_REMOTE).shortIdentifier(OPTION_SHORT_REMOTE).description(INFO_DESCRIPTION_REMOTE.get()).buildArgument();}  }
class C{  public static String wrapText(final LocalizableMessage message,final int width,final int indent){  return wrapText(message.toString(),width,indent);}  }
class C{  private DensityUtil(){  throw new UnsupportedOperationException("cannot be instantiated");}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element element;  String qualifiedName;  java.util.List qualifiedNames=new java.util.ArrayList();  qualifiedNames.add("/");  qualifiedNames.add("//");  qualifiedNames.add("\\");  qualifiedNames.add(";");  qualifiedNames.add("&");  qualifiedNames.add("*");  qualifiedNames.add("]]");  qualifiedNames.add(">");  qualifiedNames.add("<");  doc=(Document)load("staffNS",true);  element=doc.createElementNS("http://www.w3.org/DOM/Test/L2","dom:elem");  for (int indexN10058=0; indexN10058 < qualifiedNames.size(); indexN10058++) {    qualifiedName=(String)qualifiedNames.get(indexN10058);{      boolean success=false;      try {        element.setAttributeNS("http://www.w3.org/DOM/Test/L2",qualifiedName,"test");      } catch (      DOMException ex) {        success=(ex.code == DOMException.INVALID_CHARACTER_ERR);      }      assertTrue("elementsetattributens04",success);    }  }}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    auditEvents.add(convertToAuditEvent(persistentAuditEvent));  }  return auditEvents;}  }
class C{  public CalendarWrapper(Calendar cal,String name) throws JobPersistenceException {  this.name=name;  this.serialized=RepoJobStoreUtils.serialize(cal);}  }
class C{  protected <V>RunnableScheduledFuture<V> decorateTask(Runnable runnable,RunnableScheduledFuture<V> task){  return task;}  }
class C{  public void testUnmappableForLength(){  assertNotNull(CoderResult.unmappableForLength(Integer.MAX_VALUE));  assertNotNull(CoderResult.unmappableForLength(1));  assertSame(CoderResult.unmappableForLength(1),CoderResult.unmappableForLength(1));  assertNotSame(CoderResult.unmappableForLength(2),CoderResult.unmappableForLength(1));  try {    CoderResult.unmappableForLength(-1);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }  try {    CoderResult.unmappableForLength(0);    fail("Should throw IllegalArgumentException");  } catch (  IllegalArgumentException ex) {  }}  }
class C{  public boolean has_net_no(int p_net_no){  if (p_net_no < 0)   return false;  int array_len=net_nos_arr.length;  for (int index=0; index < array_len; ++index) {    if (net_nos_arr[index] == p_net_no)     return true;  }  return false;}  }
class C{  public void list(HttpServletRequest request,HttpServletResponse response,String message,StringManager smClient) throws IOException {  if (debug >= 1) {    log(sm.getString("hostManagerServlet.list",engine.getName()));  }  PrintWriter writer=response.getWriter();  writer.print(org.apache.catalina.manager.Constants.HTML_HEADER_SECTION);  Object[] args=new Object[2];  args[0]=request.getContextPath();  args[1]=smClient.getString("htmlHostManagerServlet.title");  writer.print(MessageFormat.format(org.apache.catalina.manager.Constants.BODY_HEADER_SECTION,args));  args=new Object[3];  args[0]=smClient.getString("htmlHostManagerServlet.messageLabel");  if (message == null || message.length() == 0) {    args[1]="OK";  } else {    args[1]=RequestUtil.filter(message);  }  writer.print(MessageFormat.format(Constants.MESSAGE_SECTION,args));  args=new Object[9];  args[0]=smClient.getString("htmlHostManagerServlet.manager");  args[1]=response.encodeURL(request.getContextPath() + "/html/list");  args[2]=smClient.getString("htmlHostManagerServlet.list");  args[3]=response.encodeURL(request.getContextPath() + "/" + smClient.getString("htmlHostManagerServlet.helpHtmlManagerFile"));  args[4]=smClient.getString("htmlHostManagerServlet.helpHtmlManager");  args[5]=response.encodeURL(request.getContextPath() + "/" + smClient.getString("htmlHostManagerServlet.helpManagerFile"));  args[6]=smClient.getString("htmlHostManagerServlet.helpManager");  args[7]=response.encodeURL("/manager/status");  args[8]=smClient.getString("statusServlet.title");  writer.print(MessageFormat.format(Constants.MANAGER_SECTION,args));  args=new Object[3];  args[0]=smClient.getString("htmlHostManagerServlet.hostName");  args[1]=smClient.getString("htmlHostManagerServlet.hostAliases");  args[2]=smClient.getString("htmlHostManagerServlet.hostTasks");  writer.print(MessageFormat.format(HOSTS_HEADER_SECTION,args));  Container[] children=engine.findChildren();  String hostNames[]=new String[children.length];  for (int i=0; i < children.length; i++)   hostNames[i]=children[i].getName();  TreeMap<String,String> sortedHostNamesMap=new TreeMap<>();  for (int i=0; i < hostNames.length; i++) {    String displayPath=hostNames[i];    sortedHostNamesMap.put(displayPath,hostNames[i]);  }  String hostsStart=smClient.getString("htmlHostManagerServlet.hostsStart");  String hostsStop=smClient.getString("htmlHostManagerServlet.hostsStop");  String hostsRemove=smClient.getString("htmlHostManagerServlet.hostsRemove");  Iterator<Map.Entry<String,String>> iterator=sortedHostNamesMap.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,String> entry=iterator.next();    String hostName=entry.getKey();    Host host=(Host)engine.findChild(hostName);    if (host != null) {      args=new Object[2];      args[0]=RequestUtil.filter(hostName);      String[] aliases=host.findAliases();      StringBuilder buf=new StringBuilder();      if (aliases.length > 0) {        buf.append(aliases[0]);        for (int j=1; j < aliases.length; j++) {          buf.append(", ").append(aliases[j]);        }      }      if (buf.length() == 0) {        buf.append("&nbsp;");        args[1]=buf.toString();      } else {        args[1]=RequestUtil.filter(buf.toString());      }      writer.print(MessageFormat.format(HOSTS_ROW_DETAILS_SECTION,args));      args=new Object[4];      if (host.getState().isAvailable()) {        args[0]=response.encodeURL(request.getContextPath() + "/html/stop?name=" + URLEncoder.encode(hostName,"UTF-8"));        args[1]=hostsStop;      } else {        args[0]=response.encodeURL(request.getContextPath() + "/html/start?name=" + URLEncoder.encode(hostName,"UTF-8"));        args[1]=hostsStart;      }      args[2]=response.encodeURL(request.getContextPath() + "/html/remove?name=" + URLEncoder.encode(hostName,"UTF-8"));      args[3]=hostsRemove;      if (host == this.installedHost) {        writer.print(MessageFormat.format(MANAGER_HOST_ROW_BUTTON_SECTION,args));      } else {        writer.print(MessageFormat.format(HOSTS_ROW_BUTTON_SECTION,args));      }    }  }  args=new Object[6];  args[0]=smClient.getString("htmlHostManagerServlet.addTitle");  args[1]=smClient.getString("htmlHostManagerServlet.addHost");  args[2]=response.encodeURL(request.getContextPath() + "/html/add");  args[3]=smClient.getString("htmlHostManagerServlet.addName");  args[4]=smClient.getString("htmlHostManagerServlet.addAliases");  args[5]=smClient.getString("htmlHostManagerServlet.addAppBase");  writer.print(MessageFormat.format(ADD_SECTION_START,args));  args=new Object[3];  args[0]=smClient.getString("htmlHostManagerServlet.addAutoDeploy");  args[1]="autoDeploy";  args[2]="checked";  writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN,args));  args[0]=smClient.getString("htmlHostManagerServlet.addDeployOnStartup");  args[1]="deployOnStartup";  args[2]="checked";  writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN,args));  args[0]=smClient.getString("htmlHostManagerServlet.addDeployXML");  args[1]="deployXML";  args[2]="checked";  writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN,args));  args[0]=smClient.getString("htmlHostManagerServlet.addUnpackWARs");  args[1]="unpackWARs";  args[2]="checked";  writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN,args));  args[0]=smClient.getString("htmlHostManagerServlet.addManager");  args[1]="manager";  args[2]="checked";  writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN,args));  args[0]=smClient.getString("htmlHostManagerServlet.addCopyXML");  args[1]="copyXML";  args[2]="";  writer.print(MessageFormat.format(ADD_SECTION_BOOLEAN,args));  args=new Object[1];  args[0]=smClient.getString("htmlHostManagerServlet.addButton");  writer.print(MessageFormat.format(ADD_SECTION_END,args));  args=new Object[4];  args[0]=smClient.getString("htmlHostManagerServlet.persistTitle");  args[1]=response.encodeURL(request.getContextPath() + "/html/persist");  args[2]=smClient.getString("htmlHostManagerServlet.persistAllButton");  args[3]=smClient.getString("htmlHostManagerServlet.persistAll");  writer.print(MessageFormat.format(PERSIST_SECTION,args));  args=new Object[7];  args[0]=smClient.getString("htmlHostManagerServlet.serverTitle");  args[1]=smClient.getString("htmlHostManagerServlet.serverVersion");  args[2]=smClient.getString("htmlHostManagerServlet.serverJVMVersion");  args[3]=smClient.getString("htmlHostManagerServlet.serverJVMVendor");  args[4]=smClient.getString("htmlHostManagerServlet.serverOSName");  args[5]=smClient.getString("htmlHostManagerServlet.serverOSVersion");  args[6]=smClient.getString("htmlHostManagerServlet.serverOSArch");  writer.print(MessageFormat.format(Constants.SERVER_HEADER_SECTION,args));  args=new Object[6];  args[0]=ServerInfo.getServerInfo();  args[1]=System.getProperty("java.runtime.version");  args[2]=System.getProperty("java.vm.vendor");  args[3]=System.getProperty("os.name");  args[4]=System.getProperty("os.version");  args[5]=System.getProperty("os.arch");  writer.print(MessageFormat.format(Constants.SERVER_ROW_SECTION,args));  writer.print(Constants.HTML_TAIL_SECTION);  writer.flush();  writer.close();}  }
class C{  public boolean contains(int s){  runTo(-1);  return super.contains(s);}  }
class C{  public DateHeader createDateHeader(Calendar date){  SIPDateHeader d=new SIPDateHeader();  if (date == null)   throw new NullPointerException("null date");  d.setDate(date);  return d;}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  this.config=config;  init(config.getServletContext());}  }
class C{  public static void updateComboBoxModel(Collection<?> newElements,DefaultComboBoxModel model){  updateComboBoxModel(newElements,model,null);}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/schema";  String qualifiedName="namespaceURI:x";  Document doc;  DocumentType docType;  DOMImplementation domImpl;  Document aNewDoc;  doc=(Document)load("staffNS",false);  aNewDoc=(Document)load("staffNS",false);  docType=doc.getDoctype();  domImpl=aNewDoc.getImplementation();{    boolean success=false;    try {      aNewDoc=domImpl.createDocument(namespaceURI,qualifiedName,docType);    } catch (    DOMException ex) {      success=(ex.code == DOMException.WRONG_DOCUMENT_ERR);    }    assertTrue("throw_WRONG_DOCUMENT_ERR",success);  }}  }
class C{  protected Request createTiRegisterRequest() throws TiUnexpectedError {  try {    return createRequest(Request.REGISTER,tiAddressFactory,tiHeaderFactory,tiMessageFactory,tiSipProvider,riSipProvider,null,null,null);  } catch (  Throwable exc) {    throw new TiUnexpectedError("Failed to create a TI->RI register request",exc);  }}  }
class C{  public boolean isUseSSL(){  return currentConfig.isUseSSL();}  }
class C{  private void finishCompletion(){  for (WaitNode q; (q=waiters) != null; ) {    if (UNSAFE.compareAndSwapObject(this,waitersOffset,q,null)) {      for (; ; ) {        Thread t=q.thread;        if (t != null) {          q.thread=null;          LockSupport.unpark(t);        }        WaitNode next=q.next;        if (next == null)         break;        q.next=null;        q=next;      }      break;    }  }  done();  callable=null;}  }
class C{  public CompositeCallback(Collection<MenuCallback<T>> callbacks){  this.callbacks=callbacks;}  }
class C{  @Parameters({"parent-realm","entity-type","entity-name"}) @Test(groups={"api","memberships"},expectedExceptions={IdRepoException.class}) public void addItselfAsMember(String parentRealm,String idType,String entityName) throws IdRepoException, SSOException {  Object[] params={parentRealm,idType,entityName};  entering("addItselfAsMember",params);  try {    AMIdentity amid=getIdentity(parentRealm,IdUtils.getType(idType),entityName);    amid.removeMember(amid);  } catch (  SSOException e) {    log(Level.SEVERE,"addItselfAsMember",e.getMessage(),params);    e.printStackTrace();    throw e;  }  exiting("addItselfAsMember");}  }
class C{  public static String formatDouble(double d,ByteBufferOutputStream buf){  if (HIGH_PRECISION) {    String sform=DecimalFormatUtil.formatNumber(d,"0.######");    if (buf == null)     return sform; else {      buf.append(sform);      return null;    }  }  boolean negative=false;  if (Math.abs(d) < 0.000015) {    if (buf != null) {      buf.append(ZERO);      return null;    } else {      return "0";    }  }  if (d < 0) {    negative=true;    d=-d;  }  if (d < 1.0) {    d+=0.000005;    if (d >= 1) {      if (negative) {        if (buf != null) {          buf.append((byte)'-');          buf.append((byte)'1');          return null;        } else {          return "-1";        }      } else {        if (buf != null) {          buf.append((byte)'1');          return null;        } else {          return "1";        }      }    }    if (buf != null) {      int v=(int)(d * 100000);      if (negative)       buf.append((byte)'-');      buf.append((byte)'0');      buf.append((byte)'.');      buf.append((byte)(v / 10000 + ZERO));      if (v % 10000 != 0) {        buf.append((byte)((v / 1000) % 10 + ZERO));        if (v % 1000 != 0) {          buf.append((byte)((v / 100) % 10 + ZERO));          if (v % 100 != 0) {            buf.append((byte)((v / 10) % 10 + ZERO));            if (v % 10 != 0) {              buf.append((byte)((v) % 10 + ZERO));            }          }        }      }      return null;    } else {      int x=100000;      int v=(int)(d * x);      StringBuilder res=new StringBuilder();      if (negative)       res.append('-');      res.append("0.");      while (v < x / 10) {        res.append('0');        x/=10;      }      res.append(v);      int cut=res.length() - 1;      while (res.charAt(cut) == '0') {        --cut;      }      res.setLength(cut + 1);      return res.toString();    }  } else   if (d <= 32767) {    d+=0.005;    int v=(int)(d * 100);    if (v < byteCacheSize && byteCache[v] != null) {      if (buf != null) {        if (negative)         buf.append((byte)'-');        buf.append(byteCache[v]);        return null;      } else {        String tmp=PdfEncodings.convertToString(byteCache[v],null);        if (negative)         tmp="-" + tmp;        return tmp;      }    }    if (buf != null) {      if (v < byteCacheSize) {        byte[] cache;        int size=0;        if (v >= 1000000) {          size+=5;        } else         if (v >= 100000) {          size+=4;        } else         if (v >= 10000) {          size+=3;        } else         if (v >= 1000) {          size+=2;        } else         if (v >= 100) {          size+=1;        }        if (v % 100 != 0) {          size+=2;        }        if (v % 10 != 0) {          size++;        }        cache=new byte[size];        int add=0;        if (v >= 1000000) {          cache[add++]=bytes[(v / 1000000)];        }        if (v >= 100000) {          cache[add++]=bytes[(v / 100000) % 10];        }        if (v >= 10000) {          cache[add++]=bytes[(v / 10000) % 10];        }        if (v >= 1000) {          cache[add++]=bytes[(v / 1000) % 10];        }        if (v >= 100) {          cache[add++]=bytes[(v / 100) % 10];        }        if (v % 100 != 0) {          cache[add++]=(byte)'.';          cache[add++]=bytes[(v / 10) % 10];          if (v % 10 != 0) {            cache[add++]=bytes[v % 10];          }        }        byteCache[v]=cache;      }      if (negative)       buf.append((byte)'-');      if (v >= 1000000) {        buf.append(bytes[(v / 1000000)]);      }      if (v >= 100000) {        buf.append(bytes[(v / 100000) % 10]);      }      if (v >= 10000) {        buf.append(bytes[(v / 10000) % 10]);      }      if (v >= 1000) {        buf.append(bytes[(v / 1000) % 10]);      }      if (v >= 100) {        buf.append(bytes[(v / 100) % 10]);      }      if (v % 100 != 0) {        buf.append((byte)'.');        buf.append(bytes[(v / 10) % 10]);        if (v % 10 != 0) {          buf.append(bytes[v % 10]);        }      }      return null;    } else {      StringBuilder res=new StringBuilder();      if (negative)       res.append('-');      if (v >= 1000000) {        res.append(chars[(v / 1000000)]);      }      if (v >= 100000) {        res.append(chars[(v / 100000) % 10]);      }      if (v >= 10000) {        res.append(chars[(v / 10000) % 10]);      }      if (v >= 1000) {        res.append(chars[(v / 1000) % 10]);      }      if (v >= 100) {        res.append(chars[(v / 100) % 10]);      }      if (v % 100 != 0) {        res.append('.');        res.append(chars[(v / 10) % 10]);        if (v % 10 != 0) {          res.append(chars[v % 10]);        }      }      return res.toString();    }  } else {    d+=0.5;    long v=(long)d;    if (negative)     return "-" + Long.toString(v); else     return Long.toString(v);  }}  }
class C{  static public void assertEquals(String message,String expected,String actual){  if (expected == null && actual == null)   return;  if (expected != null && expected.equals(actual))   return;  throw new ComparisonFailure(message,expected,actual);}  }
class C{  public String toString(int units,String unitsName){  StringBuffer result=new StringBuffer();  result.append(getCrossFeedResolution(units));  result.append('x');  result.append(getFeedResolution(units));  if (unitsName != null) {    result.append(' ');    result.append(unitsName);  }  return result.toString();}  }
class C{  private boolean tryAcquireParentSubtreeReadLock(){  if (parent == null) {    return true;  }  if (!parent.tryAcquireParentSubtreeReadLock()) {    return false;  }  if (tryLockWithTimeout(parent.subtreeLock.readLock())) {    return true;  }  releaseParentSubtreeReadLock();  return false;}  }
class C{  public void allow(){  result=Result.ALLOWED;  message="";}  }
class C{  public void retrievePaymentRecord(String payId,Handler<AsyncResult<Payment>> resultHandler){  delegate.retrievePaymentRecord(payId,resultHandler);}  }
class C{  public Iterator<E> iterator(){  return map.keySet().iterator();}  }
class C{  protected WritableRaster(SampleModel sampleModel,DataBuffer dataBuffer,Point origin){  this(sampleModel,dataBuffer,new Rectangle(origin.x,origin.y,sampleModel.getWidth(),sampleModel.getHeight()),origin,null);}  }
class C{  public ServletSecurityElement(HttpConstraintElement httpConstraintElement){  this(httpConstraintElement,null);}  }
class C{  public void traverse(Node pos) throws org.xml.sax.SAXException {  this.fSerializer.startDocument();  if (pos.getNodeType() != Node.DOCUMENT_NODE) {    Document ownerDoc=pos.getOwnerDocument();    if (ownerDoc != null && ownerDoc.getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  } else {    if (((Document)pos).getImplementation().hasFeature("Core","3.0")) {      fIsLevel3DOM=true;    }  }  if (fSerializer instanceof LexicalHandler) {    fLexicalHandler=((LexicalHandler)this.fSerializer);  }  if (fFilter != null)   fWhatToShowFilter=fFilter.getWhatToShow();  Node top=pos;  while (null != pos) {    startNode(pos);    Node nextNode=null;    nextNode=pos.getFirstChild();    while (null == nextNode) {      endNode(pos);      if (top.equals(pos))       break;      nextNode=pos.getNextSibling();      if (null == nextNode) {        pos=pos.getParentNode();        if ((null == pos) || (top.equals(pos))) {          if (null != pos)           endNode(pos);          nextNode=null;          break;        }      }    }    pos=nextNode;  }  this.fSerializer.endDocument();}  }
class C{  protected void processRequest(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  String metaAlias=request.getParameter(IFSConstants.META_ALIAS);  if (metaAlias == null) {    metaAlias=FSServiceUtils.getMetaAlias(request);  }  if (metaAlias != null && metaAlias.length() > 0) {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSPostLoginHandler::processRequest: " + "Calling postlogin with metaAlias" + metaAlias);    }    FSPostLogin postLogin=new FSPostLogin();    postLogin.doPostLogin(request,response);  } else {    FSUtils.debug.error("FSPostLoginHandler::Cannot proceed as no" + "metaAlias in request");  }}  }
class C{  static final Object unmaskNull(Object key){  return (key == NULL_KEY ? null : key);}  }
class C{  public static void initializeConfigurationFramework(){  if (!ConfigurationFramework.getInstance().isInitialized()) {    try {      final Logger configFrameworkLogger=Logger.getLogger("com.forgerock.opendj.ldap.config.config");      configFrameworkLogger.setUseParentHandlers(false);      ConfigurationFramework.getInstance().initialize();      configFrameworkLogger.setUseParentHandlers(true);    } catch (    ConfigException e) {      final LocalizableMessage message=ERROR_CTRL_PANEL_INITIALIZE_CONFIG_OFFLINE.get(e.getLocalizedMessage());      logger.error(message);      throw new RuntimeException(message.toString(),e);    }  }}  }
class C{  public ManageNameIDRequest createManageNameIDRequest(String value) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.MANAGE_NAMEID_REQUEST,value);  if (obj == null) {    return new ManageNameIDRequestImpl(value);  } else {    return (ManageNameIDRequest)obj;  }}  }
class C{  public boolean isOptimizedDrawingEnabled(){  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodedocumenttypenodevalue.class,args);}  }
class C{  public static <T>boolean remove(Collection<T> collection,T element){  if (element == null) {    return false;  }  if (CollectionUtils.isEmpty(collection)) {    return false;  }  return collection.remove(element);}  }
class C{  public void logCompareResponse(CompareOperation compareOperation){}  }
class C{  private int writePlaintextData(final ByteBuffer src){  final int pos=src.position();  final int limit=src.limit();  final int len=Math.min(limit - pos,MAX_PLAINTEXT_LENGTH);  final int sslWrote;  if (src.isDirect()) {    final long addr=Buffer.address(src) + pos;    sslWrote=SSL.writeToSSL(ssl,addr,len);    if (sslWrote >= 0) {      src.position(pos + sslWrote);      return sslWrote;    }  } else {    ByteBuffer buf=ByteBuffer.allocateDirect(len);    try {      final long addr=memoryAddress(buf);      src.limit(pos + len);      buf.put(src);      src.limit(limit);      sslWrote=SSL.writeToSSL(ssl,addr,len);      if (sslWrote >= 0) {        src.position(pos + sslWrote);        return sslWrote;      } else {        src.position(pos);      }    }  finally {      buf.clear();      ByteBufferUtils.cleanDirectBuffer(buf);    }  }  throw new IllegalStateException(sm.getString("engine.writeToSSLFailed",Integer.toString(sslWrote)));}  }
class C{  public Observable<Void> initializePersistenceObservable(){  io.vertx.rx.java.ObservableFuture<Void> resultHandler=io.vertx.rx.java.RxHelper.observableFuture();  initializePersistence(resultHandler.toHandler());  return resultHandler;}  }
class C{  public String toXMLString(boolean includeNS,boolean declareNS,boolean includeHeader) throws FSMsgException {  if ((providerId == null) || (providerId.length() == 0)) {    FSUtils.debug.error("FSFederationTerminationNotification.toXMLString" + ": providerId is null in the request with requestId:" + requestID);    String[] args={requestID};    throw new FSMsgException("nullProviderIdWRequestId",args);  }  if ((requestID == null) || (requestID.length() == 0)) {    requestID=SAMLUtils.generateID();    if (requestID == null) {      FSUtils.debug.error("FSFederationTerminationNotification." + "toXMLString: couldn't generate RequestID.");      throw new FSMsgException("errorGenerateID",null);    }  }  StringBuffer xml=new StringBuffer(300);  if (includeHeader) {    xml.append(IFSConstants.XML_PREFIX).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.QUESTION_MARK).append(IFSConstants.RIGHT_ANGLE);  }  String prefix="";  String uriSAML="";  String uri="";  if (includeNS) {    prefix=IFSConstants.LIB_PREFIX;  }  if (declareNS) {    uri=IFSConstants.LIB_NAMESPACE_STRING;    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) {      uri=IFSConstants.LIB_12_NAMESPACE_STRING;    }    uriSAML=IFSConstants.assertionDeclareStr;  }  String instantString=DateUtils.toUTCDateFormat(issueInstant);  if (requestID != null) {    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.FEDERATION_TERMINATION_NOTICFICATION).append(uri).append(uriSAML).append(IFSConstants.SPACE);    if (minorVersion == IFSConstants.FF_11_PROTOCOL_MINOR_VERSION && id != null && !(id.length() == 0)) {      xml.append(IFSConstants.SPACE).append("id").append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(id).append(IFSConstants.QUOTE).append(IFSConstants.SPACE);    }    xml.append(IFSConstants.REQUEST_ID).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(requestID).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.MAJOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(majorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.MINOR_VERSION).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(minorVersion).append(IFSConstants.QUOTE).append(IFSConstants.SPACE).append(IFSConstants.ISSUE_INSTANT).append(IFSConstants.EQUAL_TO).append(IFSConstants.QUOTE).append(instantString).append(IFSConstants.QUOTE).append(IFSConstants.RIGHT_ANGLE);    if ((respondWiths != null) && (respondWiths != Collections.EMPTY_LIST)) {      Iterator i=respondWiths.iterator();      while (i.hasNext()) {        xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.RESPONDWITH).append(IFSConstants.RIGHT_ANGLE).append((String)i.next()).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.RESPONDWITH).append(IFSConstants.LEFT_ANGLE);      }    }    if (signed) {      if (signatureString != null) {        xml.append(signatureString);      } else       if (signature != null) {        signatureString=XMLUtils.print(signature);        xml.append(signatureString);      }    }    xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.PROVIDER_ID).append(uri).append(IFSConstants.RIGHT_ANGLE).append(providerId).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.PROVIDER_ID).append(IFSConstants.RIGHT_ANGLE);    if (nameIdentifier != null) {      xml.append(nameIdentifier.toString());    }    if (relayState != null) {      xml.append(IFSConstants.LEFT_ANGLE).append(prefix).append(IFSConstants.RELAY_STATE).append(uri).append(IFSConstants.RIGHT_ANGLE).append(providerId).append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.RELAY_STATE).append(IFSConstants.RIGHT_ANGLE);    }    xml.append(IFSConstants.START_END_ELEMENT).append(prefix).append(IFSConstants.FEDERATION_TERMINATION_NOTICFICATION).append(IFSConstants.RIGHT_ANGLE);  } else {    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSFederationTerminationNotification." + "toString: requestID is null ");    }    throw new FSMsgException("nullRequestID",null);  }  return xml.toString();}  }
class C{  public static UIComponent createTreeComponent(){  return JSFComponentFactory.createComponent(Tree.COMPONENT_TYPE);}  }
class C{  public void visitInsn(int opcode){  if (mv != null) {    mv.visitInsn(opcode);  }}  }
class C{  public InvalidAttributesException(){  super();}  }
class C{  public final void writeBytes(String s) throws IOException {  int len=s.length();  for (int i=0; i < len; i++) {    out.write((byte)s.charAt(i));  }  incCount(len);}  }
class C{  private void fitImageToView(){  Drawable drawable=getDrawable();  if (drawable == null || drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) {    return;  }  if (matrix == null || prevMatrix == null) {    return;  }  int drawableWidth=drawable.getIntrinsicWidth();  int drawableHeight=drawable.getIntrinsicHeight();  float scaleX=(float)viewWidth / drawableWidth;  float scaleY=(float)viewHeight / drawableHeight;switch (mScaleType) {case CENTER:    scaleX=scaleY=1;  break;case CENTER_CROP:scaleX=scaleY=Math.max(scaleX,scaleY);break;case CENTER_INSIDE:scaleX=scaleY=Math.min(1,Math.min(scaleX,scaleY));case FIT_CENTER:scaleX=scaleY=Math.min(scaleX,scaleY);break;case FIT_XY:break;default :throw new UnsupportedOperationException("TouchImageView does not support FIT_START or FIT_END");}float redundantXSpace=viewWidth - (scaleX * drawableWidth);float redundantYSpace=viewHeight - (scaleY * drawableHeight);matchViewWidth=viewWidth - redundantXSpace;matchViewHeight=viewHeight - redundantYSpace;if (!isZoomed()) {matrix.setScale(scaleX,scaleY);matrix.postTranslate(redundantXSpace / 2,redundantYSpace / 2);normalizedScale=1;} else {prevMatrix.getValues(m);m[Matrix.MSCALE_X]=matchViewWidth / drawableWidth * normalizedScale;m[Matrix.MSCALE_Y]=matchViewHeight / drawableHeight * normalizedScale;float transX=m[Matrix.MTRANS_X];float transY=m[Matrix.MTRANS_Y];float prevActualWidth=prevMatchViewWidth * normalizedScale;float actualWidth=getImageWidth();translateMatrixAfterRotate(Matrix.MTRANS_X,transX,prevActualWidth,actualWidth,prevViewWidth,viewWidth,drawableWidth);float prevActualHeight=prevMatchViewHeight * normalizedScale;float actualHeight=getImageHeight();translateMatrixAfterRotate(Matrix.MTRANS_Y,transY,prevActualHeight,actualHeight,prevViewHeight,viewHeight,drawableHeight);matrix.setValues(m);}fixTrans();setImageMatrix(matrix);}  }
class C{  public CTSBlockCipher(BlockCipher cipher){  if ((cipher instanceof OFBBlockCipher) || (cipher instanceof CFBBlockCipher)) {    throw new IllegalArgumentException("CTSBlockCipher can only accept ECB, or CBC ciphers");  }  this.cipher=cipher;  blockSize=cipher.getBlockSize();  buf=new byte[blockSize * 2];  bufOff=0;}  }
class C{  public void reject(){  accepted=false;  throw new LicenseRejectedException(this);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if (target != null) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    target.replaceSelection("\n");  }}  }
class C{  @Override public void stopInternal(){  releaseConnectionLatch();  if (!paused) {    pause();  }  if (running) {    running=false;    poller.stop();    for (    SocketWrapperBase<Long> socketWrapper : connections.values()) {      try {        socketWrapper.close();        getHandler().release(socketWrapper);      } catch (      IOException e) {      }    }    for (    AbstractEndpoint.Acceptor acceptor : acceptors) {      long waitLeft=10000;      while (waitLeft > 0 && acceptor.getState() != AcceptorState.ENDED && serverSock != 0) {        try {          Thread.sleep(50);        } catch (        InterruptedException e) {        }        waitLeft-=50;      }      if (waitLeft == 0) {        log.warn(sm.getString("endpoint.warn.unlockAcceptorFailed",acceptor.getThreadName()));        if (serverSock != 0) {          Socket.shutdown(serverSock,Socket.APR_SHUTDOWN_READ);          serverSock=0;        }      }    }    try {      poller.destroy();    } catch (    Exception e) {    }    poller=null;    connections.clear();    if (getUseSendfile()) {      try {        sendfile.destroy();      } catch (      Exception e) {      }      sendfile=null;    }    processorCache.clear();  }  shutdownExecutor();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null) {    return false;  }  if (obj.getClass() != getClass()) {    return false;  }  final DSInfo dsInfo=(DSInfo)obj;  return dsId == dsInfo.getDsId() && rsId == dsInfo.getRsId() && generationId == dsInfo.getGenerationId() && status == dsInfo.getStatus() && assuredFlag == dsInfo.isAssured() && assuredMode == dsInfo.getAssuredMode() && safeDataLevel == dsInfo.getSafeDataLevel() && groupId == dsInfo.getGroupId() && protocolVersion == dsInfo.getProtocolVersion() && refUrls.equals(dsInfo.getRefUrls()) && Objects.equals(eclIncludes,dsInfo.getEclIncludes()) && Objects.equals(eclIncludesForDeletes,dsInfo.getEclIncludesForDeletes());}  }
class C{  public void disableVertexAttribute(String name){  int location=fetchAttributeLocation(name);  if (location == -1)   return;  GLES20.glDisableVertexAttribArray(location);}  }
class C{  public static void main(String[] args){  if (args.length >= 1) {    if ("--os".equals(args[0])) {      System.out.print(getOSName());      return;    } else     if ("--arch".equals(args[0])) {      System.out.print(getArchName());      return;    }  }  System.out.print(getNativeLibFolderPathForCurrentOS());}  }
class C{  public static Event35Log.Builder newBuilder(){  return new Event35Log.Builder();}  }
class C{  public MultiPixelPackedSampleModel(int dataType,int w,int h,int numberOfBits,int scanlineStride,int dataBitOffset){  super(dataType,w,h,1);  if (dataType != DataBuffer.TYPE_BYTE && dataType != DataBuffer.TYPE_USHORT && dataType != DataBuffer.TYPE_INT) {    throw new IllegalArgumentException("Unsupported data type " + dataType);  }  this.dataType=dataType;  this.pixelBitStride=numberOfBits;  this.scanlineStride=scanlineStride;  this.dataBitOffset=dataBitOffset;  this.dataElementSize=DataBuffer.getDataTypeSize(dataType);  this.pixelsPerDataElement=dataElementSize / numberOfBits;  if (pixelsPerDataElement * numberOfBits != dataElementSize) {    throw new RasterFormatException("MultiPixelPackedSampleModel " + "does not allow pixels to " + "span data element boundaries");  }  this.bitMask=(1 << numberOfBits) - 1;}  }
class C{  @Override public boolean onCreateOptionsMenu(Menu menu){  menu.add(Menu.NONE,MENU_HELP,Menu.NONE,getString(R.string.help)).setIcon(android.R.drawable.ic_menu_help).setAlphabeticShortcut('h');  return super.onCreateOptionsMenu(menu);}  }
class C{  public void test_SSLEngineResultStatus_valueOf(){  String[] str={"BUFFER_OVERFLOW","BUFFER_UNDERFLOW","CLOSED","OK"};  String[] str_invalid={"","OK1","BUFFER_overflow","BUFFER_UND","CLOSED_CLOSED","Bad string for verification valueOf method"};  SSLEngineResult.Status enS;  for (int i=0; i < str.length; i++) {    try {      enS=SSLEngineResult.Status.valueOf(str[i]);      assertEquals("Incorrect Status",enS.toString(),str[i]);    } catch (    Exception e) {      fail("Unexpected exception " + e + " was thrown for "+ str[i]);    }  }  for (int i=0; i < str_invalid.length; i++) {    try {      enS=SSLEngineResult.Status.valueOf(str_invalid[i]);      fail("IllegalArgumentException should be thrown for " + str_invalid[i]);    } catch (    IllegalArgumentException iae) {    }  }  try {    enS=SSLEngineResult.Status.valueOf(null);    fail("NullPointerException/IllegalArgumentException should be thrown for NULL parameter");  } catch (  NullPointerException npe) {  }catch (  IllegalArgumentException iae) {  }}  }
class C{  public AnnotationFormatError(Throwable cause){  super(cause);}  }
class C{  public String encodeUrl(String url){  return this._getHttpServletResponse() != null ? this._getHttpServletResponse().encodeUrl(url) : null;}  }
class C{  private static boolean isExclusive(EntitlementSubject subject){  if (subject instanceof PolicySubject) {    return ((PolicySubject)subject).isExclusive();  } else {    return false;  }}  }
class C{  public boolean equals(Object o){  if (o == null) {    return false;  }  if (this == o) {    return true;  }  if (!(o instanceof OblixPrincipal)) {    return false;  }  OblixPrincipal that=(OblixPrincipal)o;  return this.getName().equals(that.getName());}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.TransformType createTransformType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.TransformTypeImpl();}  }
class C{  public int corner_x(int p_no){  int x;switch (p_no) {case 0:    x=oct_llx - oct_ly;  break;case 1:x=oct_lrx + oct_ly;break;case 2:x=oct_rx;break;case 3:x=oct_rx;break;case 4:x=oct_urx - oct_uy;break;case 5:x=oct_ulx + oct_uy;break;case 6:x=oct_lx;break;case 7:x=oct_lx;break;default :throw new IllegalArgumentException("IntOctagon.corner: p_no out of range");}return x;}  }
class C{  public void test_ConstructorIF(){  Hashtable h=new java.util.Hashtable(10,0.5f);  assertEquals("Created incorrect hashtable",0,h.size());  Hashtable empty=new Hashtable(0,0.75f);  assertNull("Empty hashtable access",empty.get("nothing"));  empty.put("something","here");  assertTrue("cannot get element",empty.get("something") == "here");  try {    new Hashtable(-1,0.75f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }  try {    new Hashtable(0,-0.75f);    fail("IllegalArgumentException expected");  } catch (  IllegalArgumentException e) {  }}  }
class C{  public boolean isInterface(){  return itf;}  }
class C{  public static boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public boolean equals(Object object){  return (object != null && object instanceof TextSyntax && this.value.equals(((TextSyntax)object).value) && this.locale.equals(((TextSyntax)object).locale));}  }
class C{  public static void read(BoardFrame p_board_frame,IteraBoard p_board_handling,InputStream p_input_stream) throws IOException {  GuiConfigScanner scanner=new GuiConfigScanner(new InputStreamReader(p_input_stream));  GuiConfigFile config_file=new GuiConfigFile(p_board_frame,p_board_handling,scanner,null);  config_file.read_defaults_scope();}  }
class C{  public void push(char val){  this.push(new BaseTypeWrapper(val));}  }
class C{  public boolean hasNameOrOID(final String value){  return hasName(value) || structuralClassOID.equals(value);}  }
class C{  public static int toIntValue(Object decoded){  return new BigInteger((byte[])decoded).intValue();}  }
class C{  private static String quote(String value){  boolean needsQuotes=false;  int length=value.length();  for (int i=0; (i < length) && !needsQuotes; ++i) {    needsQuotes=!isTokenChar(value.charAt(i));  }  if (needsQuotes) {    StringBuilder buffer=new StringBuilder((int)(length * 1.5));    buffer.append('"');    for (int i=0; i < length; ++i) {      char c=value.charAt(i);      if ((c == '\\') || (c == '"')) {        buffer.append('\\');      }      buffer.append(c);    }    buffer.append('"');    return buffer.toString();  } else {    return value;  }}  }
class C{  public static Document newDocument() throws ParserConfigurationException {  return getSafeDocumentBuilder(validating).newDocument();}  }
class C{  public static byte[] ASCII85Decode(byte[] in){  ByteArrayOutputStream out=new ByteArrayOutputStream();  int state=0;  int[] chn=new int[5];  for (int k=0; k < in.length; ++k) {    int ch=in[k] & 0xff;    if (ch == '~')     break;    if (PdfTokenizer.isWhitespace(ch))     continue;    if (ch == 'z' && state == 0) {      out.write(0);      out.write(0);      out.write(0);      out.write(0);      continue;    }    if (ch < '!' || ch > 'u')     throw new PdfException(PdfException.IllegalCharacterInAscii85decode);    chn[state]=ch - '!';    ++state;    if (state == 5) {      state=0;      int r=0;      for (int j=0; j < 5; ++j)       r=r * 85 + chn[j];      out.write((byte)(r >> 24));      out.write((byte)(r >> 16));      out.write((byte)(r >> 8));      out.write((byte)r);    }  }  if (state == 2) {    int r=chn[0] * 85 * 85* 85* 85 + chn[1] * 85 * 85* 85 + 85 * 85 * 85 + 85 * 85 + 85;    out.write((byte)(r >> 24));  } else   if (state == 3) {    int r=chn[0] * 85 * 85* 85* 85 + chn[1] * 85 * 85* 85 + chn[2] * 85 * 85 + 85 * 85 + 85;    out.write((byte)(r >> 24));    out.write((byte)(r >> 16));  } else   if (state == 4) {    int r=chn[0] * 85 * 85* 85* 85 + chn[1] * 85 * 85* 85 + chn[2] * 85 * 85 + chn[3] * 85 + 85;    out.write((byte)(r >> 24));    out.write((byte)(r >> 16));    out.write((byte)(r >> 8));  }  return out.toByteArray();}  }
class C{  public void build(DOMTestSink sink){  sink.addTest(attrcreatedocumentfragment.class);  sink.addTest(attrcreatetextnode.class);  sink.addTest(attrcreatetextnode2.class);  sink.addTest(attreffectivevalue.class);  sink.addTest(attrname.class);  sink.addTest(attrnextsiblingnull.class);  sink.addTest(attrparentnodenull.class);  sink.addTest(attrprevioussiblingnull.class);  sink.addTest(attrspecifiedvalue.class);  sink.addTest(attrspecifiedvaluechanged.class);  sink.addTest(cdatasectiongetdata.class);  sink.addTest(characterdataappenddata.class);  sink.addTest(characterdataappenddatagetdata.class);  sink.addTest(characterdatadeletedatabegining.class);  sink.addTest(characterdatadeletedataend.class);  sink.addTest(characterdatadeletedataexceedslength.class);  sink.addTest(characterdatadeletedatagetlengthanddata.class);  sink.addTest(characterdatadeletedatamiddle.class);  sink.addTest(characterdatagetdata.class);  sink.addTest(characterdatagetlength.class);  sink.addTest(characterdatainsertdatabeginning.class);  sink.addTest(characterdatainsertdataend.class);  sink.addTest(characterdatainsertdatamiddle.class);  sink.addTest(characterdatareplacedatabegining.class);  sink.addTest(characterdatareplacedataend.class);  sink.addTest(characterdatareplacedataexceedslengthofarg.class);  sink.addTest(characterdatareplacedataexceedslengthofdata.class);  sink.addTest(characterdatareplacedatamiddle.class);  sink.addTest(characterdatasubstringvalue.class);  sink.addTest(commentgetcomment.class);  sink.addTest(documentcreatecdatasection.class);  sink.addTest(documentcreatecomment.class);  sink.addTest(documentcreatedocumentfragment.class);  sink.addTest(documentcreateelement.class);  sink.addTest(documentcreateelementcasesensitive.class);  sink.addTest(documentcreateentityreference.class);  sink.addTest(documentcreateprocessinginstruction.class);  sink.addTest(documentcreatetextnode.class);  sink.addTest(documentgetdoctype.class);  sink.addTest(documentgetdoctypenodtd.class);  sink.addTest(documentgetelementsbytagnamelength.class);  sink.addTest(documentgetelementsbytagnamevalue.class);  sink.addTest(documentgetimplementation.class);  sink.addTest(documentgetrootnode.class);  sink.addTest(documentinvalidcharacterexceptioncreateattribute.class);  sink.addTest(documentinvalidcharacterexceptioncreateelement.class);  sink.addTest(documenttypegetdoctype.class);  sink.addTest(domimplementationfeaturenoversion.class);  sink.addTest(domimplementationfeaturenull.class);  sink.addTest(domimplementationfeaturexml.class);  sink.addTest(elementaddnewattribute.class);  sink.addTest(elementassociatedattribute.class);  sink.addTest(elementchangeattributevalue.class);  sink.addTest(elementgetattributenode.class);  sink.addTest(elementgetattributenodenull.class);  sink.addTest(elementgetelementsbytagname.class);  sink.addTest(elementgetelementsbytagnameaccessnodelist.class);  sink.addTest(elementgetelementsbytagnamenomatch.class);  sink.addTest(elementgettagname.class);  sink.addTest(elementinuseattributeerr.class);  sink.addTest(elementinvalidcharacterexception.class);  sink.addTest(elementnormalize.class);  sink.addTest(elementnotfounderr.class);  sink.addTest(elementremoveattributeaftercreate.class);  sink.addTest(elementremoveattributenode.class);  sink.addTest(elementreplaceexistingattributegevalue.class);  sink.addTest(elementretrieveattrvalue.class);  sink.addTest(elementretrievetagname.class);  sink.addTest(elementsetattributenodenull.class);  sink.addTest(elementwrongdocumenterr.class);  sink.addTest(namednodemapchildnoderange.class);  sink.addTest(namednodemapgetnameditem.class);  sink.addTest(namednodemapinuseattributeerr.class);  sink.addTest(namednodemapnotfounderr.class);  sink.addTest(namednodemapnumberofnodes.class);  sink.addTest(namednodemapremovenameditemreturnnodevalue.class);  sink.addTest(namednodemapreturnattrnode.class);  sink.addTest(namednodemapreturnfirstitem.class);  sink.addTest(namednodemapreturnlastitem.class);  sink.addTest(namednodemapreturnnull.class);  sink.addTest(namednodemapsetnameditem.class);  sink.addTest(namednodemapsetnameditemreturnvalue.class);  sink.addTest(namednodemapsetnameditemwithnewvalue.class);  sink.addTest(namednodemapwrongdocumenterr.class);  sink.addTest(nodeappendchild.class);  sink.addTest(nodeappendchildgetnodename.class);  sink.addTest(nodeappendchildnewchilddiffdocument.class);  sink.addTest(nodeappendchildnodeancestor.class);  sink.addTest(nodeattributenodeattribute.class);  sink.addTest(nodeattributenodename.class);  sink.addTest(nodeattributenodetype.class);  sink.addTest(nodeattributenodevalue.class);  sink.addTest(nodecdatasectionnodeattribute.class);  sink.addTest(nodecdatasectionnodename.class);  sink.addTest(nodecdatasectionnodetype.class);  sink.addTest(nodecdatasectionnodevalue.class);  sink.addTest(nodechildnodes.class);  sink.addTest(nodechildnodesempty.class);  sink.addTest(nodecommentnodeattributes.class);  sink.addTest(nodecommentnodename.class);  sink.addTest(nodecommentnodetype.class);  sink.addTest(nodecommentnodevalue.class);  sink.addTest(nodedocumentfragmentnodename.class);  sink.addTest(nodedocumentfragmentnodetype.class);  sink.addTest(nodedocumentfragmentnodevalue.class);  sink.addTest(nodedocumentnodeattribute.class);  sink.addTest(nodedocumentnodename.class);  sink.addTest(nodedocumentnodetype.class);  sink.addTest(nodedocumentnodevalue.class);  sink.addTest(nodedocumenttypenodename.class);  sink.addTest(nodedocumenttypenodetype.class);  sink.addTest(nodedocumenttypenodevalue.class);  sink.addTest(nodeelementnodeattributes.class);  sink.addTest(nodeelementnodename.class);  sink.addTest(nodeelementnodetype.class);  sink.addTest(nodeelementnodevalue.class);  sink.addTest(nodeentityreferencenodeattributes.class);  sink.addTest(nodeentityreferencenodename.class);  sink.addTest(nodeentityreferencenodetype.class);  sink.addTest(nodeentityreferencenodevalue.class);  sink.addTest(nodegetfirstchild.class);  sink.addTest(nodegetfirstchildnull.class);  sink.addTest(nodegetlastchild.class);  sink.addTest(nodegetlastchildnull.class);  sink.addTest(nodegetnextsibling.class);  sink.addTest(nodegetnextsiblingnull.class);  sink.addTest(nodegetownerdocument.class);  sink.addTest(nodegetownerdocumentnull.class);  sink.addTest(nodegetprevioussibling.class);  sink.addTest(nodegetprevioussiblingnull.class);  sink.addTest(nodehaschildnodes.class);  sink.addTest(nodehaschildnodesfalse.class);  sink.addTest(nodeinsertbeforenewchilddiffdocument.class);  sink.addTest(nodeinsertbeforenewchildexists.class);  sink.addTest(nodeinsertbeforenodeancestor.class);  sink.addTest(nodeinsertbeforenodename.class);  sink.addTest(nodelistindexequalzero.class);  sink.addTest(nodelistindexgetlength.class);  sink.addTest(nodelistindexgetlengthofemptylist.class);  sink.addTest(nodelistindexnotzero.class);  sink.addTest(nodelistreturnfirstitem.class);  sink.addTest(nodelistreturnlastitem.class);  sink.addTest(nodelisttraverselist.class);  sink.addTest(nodeparentnode.class);  sink.addTest(nodeparentnodenull.class);  sink.addTest(nodeprocessinginstructionnodeattributes.class);  sink.addTest(nodeprocessinginstructionnodename.class);  sink.addTest(nodeprocessinginstructionnodetype.class);  sink.addTest(nodeprocessinginstructionnodevalue.class);  sink.addTest(noderemovechild.class);  sink.addTest(noderemovechildgetnodename.class);  sink.addTest(nodereplacechildnewchilddiffdocument.class);  sink.addTest(nodereplacechildnodeancestor.class);  sink.addTest(nodereplacechildnodename.class);  sink.addTest(nodetextnodeattribute.class);  sink.addTest(nodetextnodename.class);  sink.addTest(nodetextnodetype.class);  sink.addTest(nodetextnodevalue.class);  sink.addTest(processinginstructiongetdata.class);  sink.addTest(processinginstructiongettarget.class);  sink.addTest(textsplittextfour.class);  sink.addTest(textsplittextone.class);  sink.addTest(textsplittextthree.class);  sink.addTest(textwithnomarkup.class);  sink.addTest(nodevalue01.class);  sink.addTest(nodevalue03.class);  sink.addTest(nodevalue04.class);  sink.addTest(nodevalue05.class);  sink.addTest(nodevalue06.class);  sink.addTest(hc_attrcreatedocumentfragment.class);  sink.addTest(hc_attrcreatetextnode.class);  sink.addTest(hc_attrcreatetextnode2.class);  sink.addTest(hc_attreffectivevalue.class);  sink.addTest(hc_attrname.class);  sink.addTest(hc_attrnextsiblingnull.class);  sink.addTest(hc_attrparentnodenull.class);  sink.addTest(hc_attrprevioussiblingnull.class);  sink.addTest(hc_attrspecifiedvalue.class);  sink.addTest(hc_attrspecifiedvaluechanged.class);  sink.addTest(hc_characterdataappenddata.class);  sink.addTest(hc_characterdataappenddatagetdata.class);  sink.addTest(hc_characterdatadeletedatabegining.class);  sink.addTest(hc_characterdatadeletedataend.class);  sink.addTest(hc_characterdatadeletedataexceedslength.class);  sink.addTest(hc_characterdatadeletedatagetlengthanddata.class);  sink.addTest(hc_characterdatadeletedatamiddle.class);  sink.addTest(hc_characterdatagetdata.class);  sink.addTest(hc_characterdatagetlength.class);  sink.addTest(hc_characterdatainsertdatabeginning.class);  sink.addTest(hc_characterdatainsertdataend.class);  sink.addTest(hc_characterdatainsertdatamiddle.class);  sink.addTest(hc_characterdatareplacedatabegining.class);  sink.addTest(hc_characterdatareplacedataend.class);  sink.addTest(hc_characterdatareplacedataexceedslengthofarg.class);  sink.addTest(hc_characterdatareplacedataexceedslengthofdata.class);  sink.addTest(hc_characterdatareplacedatamiddle.class);  sink.addTest(hc_characterdatasubstringvalue.class);  sink.addTest(hc_commentgetcomment.class);  sink.addTest(hc_documentcreatecomment.class);  sink.addTest(hc_documentcreatedocumentfragment.class);  sink.addTest(hc_documentcreateelement.class);  sink.addTest(hc_documentcreateelementcasesensitive.class);  sink.addTest(hc_documentcreatetextnode.class);  sink.addTest(hc_documentgetdoctype.class);  sink.addTest(hc_documentgetelementsbytagnamelength.class);  sink.addTest(hc_documentgetelementsbytagnametotallength.class);  sink.addTest(hc_documentgetelementsbytagnamevalue.class);  sink.addTest(hc_documentgetimplementation.class);  sink.addTest(hc_documentgetrootnode.class);  sink.addTest(hc_documentinvalidcharacterexceptioncreateattribute.class);  sink.addTest(hc_documentinvalidcharacterexceptioncreateattribute1.class);  sink.addTest(hc_documentinvalidcharacterexceptioncreateelement.class);  sink.addTest(hc_documentinvalidcharacterexceptioncreateelement1.class);  sink.addTest(hc_domimplementationfeaturenoversion.class);  sink.addTest(hc_domimplementationfeaturenull.class);  sink.addTest(hc_domimplementationfeaturexml.class);  sink.addTest(hc_elementaddnewattribute.class);  sink.addTest(hc_elementassociatedattribute.class);  sink.addTest(hc_elementchangeattributevalue.class);  sink.addTest(hc_elementgetattributenode.class);  sink.addTest(hc_elementgetattributenodenull.class);  sink.addTest(hc_elementgetelementsbytagname.class);  sink.addTest(hc_elementgetelementsbytagnameaccessnodelist.class);  sink.addTest(hc_elementgetelementsbytagnamenomatch.class);  sink.addTest(hc_elementgettagname.class);  sink.addTest(hc_elementinuseattributeerr.class);  sink.addTest(hc_elementinvalidcharacterexception.class);  sink.addTest(hc_elementinvalidcharacterexception1.class);  sink.addTest(hc_elementnormalize.class);  sink.addTest(hc_elementnotfounderr.class);  sink.addTest(hc_elementremoveattribute.class);  sink.addTest(hc_elementremoveattributeaftercreate.class);  sink.addTest(hc_elementremoveattributenode.class);  sink.addTest(hc_elementreplaceexistingattributegevalue.class);  sink.addTest(hc_elementretrieveattrvalue.class);  sink.addTest(hc_elementretrievetagname.class);  sink.addTest(hc_elementsetattributenodenull.class);  sink.addTest(hc_elementwrongdocumenterr.class);  sink.addTest(hc_namednodemapgetnameditem.class);  sink.addTest(hc_namednodemapinuseattributeerr.class);  sink.addTest(hc_namednodemapnotfounderr.class);  sink.addTest(hc_namednodemapremovenameditem.class);  sink.addTest(hc_namednodemapreturnattrnode.class);  sink.addTest(hc_namednodemapreturnnull.class);  sink.addTest(hc_namednodemapsetnameditem.class);  sink.addTest(hc_namednodemapsetnameditemreturnvalue.class);  sink.addTest(hc_namednodemapsetnameditemwithnewvalue.class);  sink.addTest(hc_namednodemapwrongdocumenterr.class);  sink.addTest(hc_nodeappendchild.class);  sink.addTest(hc_nodeappendchildgetnodename.class);  sink.addTest(hc_nodeappendchildnewchilddiffdocument.class);  sink.addTest(hc_nodeappendchildnodeancestor.class);  sink.addTest(hc_nodeattributenodeattribute.class);  sink.addTest(hc_nodeattributenodename.class);  sink.addTest(hc_nodeattributenodetype.class);  sink.addTest(hc_nodeattributenodevalue.class);  sink.addTest(hc_nodechildnodes.class);  sink.addTest(hc_nodechildnodesempty.class);  sink.addTest(hc_nodecommentnodeattributes.class);  sink.addTest(hc_nodecommentnodename.class);  sink.addTest(hc_nodecommentnodetype.class);  sink.addTest(hc_nodecommentnodevalue.class);  sink.addTest(hc_nodedocumentfragmentnodename.class);  sink.addTest(hc_nodedocumentfragmentnodetype.class);  sink.addTest(hc_nodedocumentfragmentnodevalue.class);  sink.addTest(hc_nodedocumentnodeattribute.class);  sink.addTest(hc_nodedocumentnodename.class);  sink.addTest(hc_nodedocumentnodetype.class);  sink.addTest(hc_nodedocumentnodevalue.class);  sink.addTest(hc_nodeelementnodename.class);  sink.addTest(hc_nodeelementnodetype.class);  sink.addTest(hc_nodeelementnodevalue.class);  sink.addTest(hc_nodegetfirstchild.class);  sink.addTest(hc_nodegetfirstchildnull.class);  sink.addTest(hc_nodegetlastchild.class);  sink.addTest(hc_nodegetlastchildnull.class);  sink.addTest(hc_nodegetnextsibling.class);  sink.addTest(hc_nodegetnextsiblingnull.class);  sink.addTest(hc_nodegetownerdocument.class);  sink.addTest(hc_nodegetownerdocumentnull.class);  sink.addTest(hc_nodegetprevioussibling.class);  sink.addTest(hc_nodegetprevioussiblingnull.class);  sink.addTest(hc_nodehaschildnodes.class);  sink.addTest(hc_nodehaschildnodesfalse.class);  sink.addTest(hc_nodeinsertbeforenewchilddiffdocument.class);  sink.addTest(hc_nodeinsertbeforenodeancestor.class);  sink.addTest(hc_nodeinsertbeforenodename.class);  sink.addTest(hc_nodelistindexequalzero.class);  sink.addTest(hc_nodelistindexgetlength.class);  sink.addTest(hc_nodelistindexgetlengthofemptylist.class);  sink.addTest(hc_nodelistindexnotzero.class);  sink.addTest(hc_nodelistreturnfirstitem.class);  sink.addTest(hc_nodelistreturnlastitem.class);  sink.addTest(hc_nodelisttraverselist.class);  sink.addTest(hc_nodeparentnode.class);  sink.addTest(hc_nodeparentnodenull.class);  sink.addTest(hc_noderemovechild.class);  sink.addTest(hc_noderemovechildgetnodename.class);  sink.addTest(hc_nodereplacechildnewchilddiffdocument.class);  sink.addTest(hc_nodereplacechildnodeancestor.class);  sink.addTest(hc_nodereplacechildnodename.class);  sink.addTest(hc_nodetextnodeattribute.class);  sink.addTest(hc_nodetextnodename.class);  sink.addTest(hc_nodetextnodetype.class);  sink.addTest(hc_nodetextnodevalue.class);  sink.addTest(hc_nodevalue01.class);  sink.addTest(hc_nodevalue03.class);  sink.addTest(hc_nodevalue04.class);  sink.addTest(hc_nodevalue05.class);  sink.addTest(hc_nodevalue06.class);  sink.addTest(hc_textsplittextfour.class);  sink.addTest(hc_textsplittextone.class);  sink.addTest(hc_textsplittextthree.class);  sink.addTest(hc_textwithnomarkup.class);  sink.addTest(hc_attrappendchild2.class);  sink.addTest(hc_attrappendchild4.class);  sink.addTest(hc_attrinsertbefore5.class);  sink.addTest(hc_attrinsertbefore7.class);}  }
class C{  public static boolean matches(MappedMember mm,MappedMember mm2,boolean orig){  return matches(mm,orig ? mm2.getOriginalName() : mm2.getNewName(),mm2.getDesc(),true);}  }
class C{  public com.sun.identity.wsfederation.jaxb.wsfederation.PseudonymBasisType createPseudonymBasisType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.wsfederation.jaxb.wsfederation.impl.PseudonymBasisTypeImpl();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodelistindexnotzero.class,args);}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  FSUtils.debug.message("FSIntersiteTransferService.doGet: Called");  if (FSUtils.needSetLBCookieAndRedirect(request,response,false)) {    return;  }  try {    IDPDescriptorType idpDescriptor=null;    String metaAlias=request.getParameter(IFSConstants.META_ALIAS);    if (metaAlias == null || metaAlias.length() == 0) {      metaAlias=FSServiceUtils.getMetaAlias(request);    }    IDFFMetaManager metaManager=FSUtils.getIDFFMetaManager();    String hostEntityId=metaManager.getEntityIDByMetaAlias(metaAlias);    String realm=IDFFMetaUtils.getRealmByMetaAlias(metaAlias);    if ((request == null) || (response == null)) {      response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullInputParameter"));      return;    }    String qs=request.getQueryString();    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSIntersiteTransferService.doGet: " + "QueryString Received from CommonDomain: " + qs);    }    String requestID=findRequestID(request);    if (requestID == null) {      FSUtils.debug.error("FSIntersiteTransferService.doGet: " + FSUtils.bundle.getString("nullInputParameter"));      response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("nullInputParameter"));      return;    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSIntersiteTransferService.doGet: " + "RequestID found: " + requestID);    }    FSSessionManager sessionMgr=FSSessionManager.getInstance(metaAlias);    FSAuthnRequest authnRequest=sessionMgr.getAuthnRequest(requestID);    if (authnRequest == null) {      FSUtils.debug.error("FSIntersiteTransferService.doGet: " + FSUtils.bundle.getString("invalidRequestId"));      String[] data={FSUtils.bundle.getString("invalidRequestId")};      LogUtil.error(Level.INFO,"INVALID_AUTHN_REQUEST",data);      response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("invalidRequestId"));      return;    }    String resourceUrl=authnRequest.getRelayState();    String baseURL=FSServiceUtils.getBaseURL(request);    framedLoginPageURL=FSServiceUtils.getCommonLoginPageURL(metaAlias,resourceUrl,null,request,baseURL);    String idpID=FSUtils.findPreferredIDP(realm,request);    if (idpID == null) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSIntersiteTransferService.doGet: " + "No Preffered IDP found in this Common Domain. " + "Try to find PrefferedIDP in other common domains");      }      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSIntersiteTransferService.doGet: " + "RequestID :" + requestID);      }      redirectToCommonDomain(request,response,requestID);      return;    } else {      idpDescriptor=metaManager.getIDPDescriptor(realm,idpID);      if (idpDescriptor == null) {        FSUtils.debug.error("FSIntersiteTransferService.doGet: " + FSUtils.bundle.getString("noTrust"));        String[] data={idpID};        LogUtil.error(Level.INFO,"PROVIDER_NOT_TRUSTED",data);        response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("noTrust"));        return;      }      HttpSession session=request.getSession(true);      session.removeAttribute(IFSConstants.SESSION_COTSET_ATTR);    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSIntersiteTransferService.doGet: " + "Preffered IDP found:" + idpID);    }    sessionMgr.setIDPEntityID(requestID,idpID);    int minorVersion=FSServiceUtils.getMinorVersion(idpDescriptor.getProtocolSupportEnumeration());    authnRequest.setMinorVersion(minorVersion);    authnRequest.getAuthnContext().setMinorVersion(minorVersion);    SPDescriptorType hostDesc=metaManager.getSPDescriptor(realm,hostEntityId);    BaseConfigType hostConfig=metaManager.getSPDescriptorConfig(realm,hostEntityId);    if (IDFFMetaUtils.getBooleanAttributeValueFromConfig(hostConfig,IFSConstants.ENABLE_AFFILIATION)) {      Set affiliations=metaManager.getAffiliateEntity(realm,idpID);      if (affiliations != null && !affiliations.isEmpty()) {        AffiliationDescriptorType affiliateDescriptor=(AffiliationDescriptorType)affiliations.iterator().next();        authnRequest.setAffiliationID(affiliateDescriptor.getAffiliationID());      }    }    if (minorVersion == IFSConstants.FF_12_PROTOCOL_MINOR_VERSION && IDFFMetaUtils.getBooleanAttributeValueFromConfig(hostConfig,IFSConstants.ENABLE_IDP_PROXY)) {      FSScoping scoping=new FSScoping();      scoping.setProxyCount(Integer.parseInt(IDFFMetaUtils.getFirstAttributeValueFromConfig(hostConfig,IFSConstants.IDP_PROXY_COUNT)));      List proxyIDPs=IDFFMetaUtils.getAttributeValueFromConfig(hostConfig,IFSConstants.IDP_PROXY_LIST);      if (proxyIDPs != null && !proxyIDPs.isEmpty()) {        Iterator iter=proxyIDPs.iterator();        ArrayList list=new ArrayList();        while (iter.hasNext()) {          IDPEntry entry=new IDPEntry((String)iter.next(),null,null);          list.add(entry);        }        IDPEntries entries=new IDPEntries(list);        FSIDPList idpList=new FSIDPList(entries,null);        scoping.setIDPList(idpList);      }      authnRequest.setScoping(scoping);    }    if (FSUtils.debug.messageEnabled()) {      FSUtils.debug.message("FSIntersiteTransferService.doGet: " + "AuthnRequest:" + authnRequest.toXMLString(true,true));    }    if (authnRequest.getProtocolProfile().equals(IFSConstants.SSO_PROF_BROWSER_ART) || authnRequest.getProtocolProfile().equals(IFSConstants.SSO_PROF_BROWSER_POST)) {      handleBrowserArtifactPOSTIST(request,response,authnRequest,idpDescriptor,hostDesc,hostConfig);      return;    } else     if (authnRequest.getProtocolProfile().equals(IFSConstants.SSO_PROF_WML_POST)) {      handleWMLIST(request,response,authnRequest,idpDescriptor);      return;    }    FSUtils.debug.error("FSIntersiteTransferService.doGet: " + "Unknown Protocol Profile");    String[] data={FSUtils.bundle.getString("invalidAuthnRequest")};    LogUtil.error(Level.INFO,LogUtil.INVALID_AUTHN_REQUEST,data);    response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("invalidAuthnRequest"));    return;  } catch (  Exception e) {    FSUtils.debug.error("FSIntersiteTransferService.doGet: ",e);    try {      response.sendError(response.SC_INTERNAL_SERVER_ERROR,FSUtils.bundle.getString("Exception"));      return;    } catch (    IOException ioe) {      if (FSUtils.debug.messageEnabled()) {        FSUtils.debug.message("FSIntersiteTransferService.doGet: " + FSUtils.bundle.getString("sendFailed") + ioe.getMessage());      }    }  }}  }
class C{  public void testPowPositiveNum(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=1;  int exp=5;  byte rBytes[]={20,93,41,14,126,-114,49,87,-116,34,-4,-60,91,-112,74,-104,41,-42,-35,113,-100,31,-106,58,-128,-46,-109,-75,92,-106,-34,-13,4,19,-18,20,118,126,114,-28,121,-27,66,-110,124,-17,-92,69,-109};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  NamedNodeMap addrAttr;  Node attrNode;  NamedNodeMap attrList;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributes();  attrNode=addrAttr.item(0);  attrList=attrNode.getAttributes();  assertNull("nodeAttributeNodeAttributeAssert1",attrList);}  }
class C{  public Future<Job> inactive(){  return this.state(JobState.INACTIVE);}  }
class C{  public final WritableRaster filter(Raster src,WritableRaster dst){  int numBands=src.getNumBands();  int dstLength=dst.getNumBands();  int height=src.getHeight();  int width=src.getWidth();  int srcPix[]=new int[numBands];  if (dst == null) {    dst=createCompatibleDestRaster(src);  } else   if (height != dst.getHeight() || width != dst.getWidth()) {    throw new IllegalArgumentException("Width or height of Rasters do not " + "match");  }  dstLength=dst.getNumBands();  if (numBands != dstLength) {    throw new IllegalArgumentException("Number of channels in the src (" + numBands + ") does not match number of channels"+ " in the destination ("+ dstLength+ ")");  }  int numComponents=ltable.getNumComponents();  if (numComponents != 1 && numComponents != src.getNumBands()) {    throw new IllegalArgumentException("Number of arrays in the " + " lookup table (" + numComponents + " is not compatible with the "+ " src Raster: "+ src);  }  if (ImagingLib.filter(this,src,dst) != null) {    return dst;  }  if (ltable instanceof ByteLookupTable) {    byteFilter((ByteLookupTable)ltable,src,dst,width,height,numBands);  } else   if (ltable instanceof ShortLookupTable) {    shortFilter((ShortLookupTable)ltable,src,dst,width,height,numBands);  } else {    int sminX=src.getMinX();    int sY=src.getMinY();    int dminX=dst.getMinX();    int dY=dst.getMinY();    for (int y=0; y < height; y++, sY++, dY++) {      int sX=sminX;      int dX=dminX;      for (int x=0; x < width; x++, sX++, dX++) {        src.getPixel(sX,sY,srcPix);        ltable.lookupPixel(srcPix,srcPix);        dst.setPixel(dX,dY,srcPix);      }    }  }  return dst;}  }
class C{  public ValueBaseHolder(java.io.Serializable initial){  value=initial;}  }
class C{  void processClientHello(){  CipherSuite cipher_suite;  checkCompression: {    for (int i=0; i < clientHello.compression_methods.length; i++) {      if (clientHello.compression_methods[i] == 0) {        break checkCompression;      }    }    fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");  }  byte[] server_version=clientHello.client_version;  if (!ProtocolVersion.isSupported(clientHello.client_version)) {    if (clientHello.client_version[0] >= 3) {      server_version=ProtocolVersion.TLSv1.version;    } else {      fatalAlert(AlertProtocol.PROTOCOL_VERSION,"PROTOCOL VERSION. Unsupported client version " + clientHello.client_version[0] + clientHello.client_version[1]);    }  }  isResuming=false;  FIND:   if (clientHello.session_id.length != 0) {    SSLSessionImpl sessionToResume;    boolean reuseCurrent=false;    if (session != null && Arrays.equals(session.id,clientHello.session_id)) {      if (session.isValid()) {        isResuming=true;        break FIND;      }      reuseCurrent=true;    }    sessionToResume=findSessionToResume(clientHello.session_id);    if (sessionToResume == null || !sessionToResume.isValid()) {      if (!parameters.getEnableSessionCreation()) {        if (reuseCurrent) {          sendWarningAlert(AlertProtocol.NO_RENEGOTIATION);          status=NOT_HANDSHAKING;          clearMessages();          return;        }        fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");      }      session=null;    } else {      session=(SSLSessionImpl)sessionToResume.clone();      isResuming=true;    }  }  if (isResuming) {    cipher_suite=session.cipherSuite;    checkCipherSuite: {      for (int i=0; i < clientHello.cipher_suites.length; i++) {        if (cipher_suite.equals(clientHello.cipher_suites[i])) {          break checkCipherSuite;        }      }      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. Incorrect client hello message");    }  } else {    cipher_suite=selectSuite(clientHello.cipher_suites);    if (cipher_suite == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"HANDSHAKE FAILURE. NO COMMON SUITE");    }    if (!parameters.getEnableSessionCreation()) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"SSL Session may not be created");    }    session=new SSLSessionImpl(cipher_suite,parameters.getSecureRandom());    if (engineOwner != null) {      session.setPeer(engineOwner.getPeerHost(),engineOwner.getPeerPort());    } else {      session.setPeer(socketOwner.getInetAddress().getHostName(),socketOwner.getPort());    }  }  recordProtocol.setVersion(server_version);  session.protocol=ProtocolVersion.getByVersion(server_version);  session.clientRandom=clientHello.random;  serverHello=new ServerHello(parameters.getSecureRandom(),server_version,session.getId(),cipher_suite,(byte)0);  session.serverRandom=serverHello.random;  send(serverHello);  if (isResuming) {    sendChangeCipherSpec();    return;  }  if (!cipher_suite.isAnonymous()) {    X509Certificate[] certs=null;    String certType=cipher_suite.getServerKeyType();    if (certType == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO CERT TYPE FOR " + cipher_suite.getName());    }    String alias=null;    X509KeyManager km=parameters.getKeyManager();    if (km instanceof X509ExtendedKeyManager) {      X509ExtendedKeyManager ekm=(X509ExtendedKeyManager)km;      if (this.socketOwner != null) {        alias=ekm.chooseServerAlias(certType,null,this.socketOwner);      } else {        alias=ekm.chooseEngineServerAlias(certType,null,this.engineOwner);      }      if (alias != null) {        certs=ekm.getCertificateChain(alias);      }    } else {      alias=km.chooseServerAlias(certType,null,this.socketOwner);      if (alias != null) {        certs=km.getCertificateChain(alias);      }    }    if (certs == null) {      fatalAlert(AlertProtocol.HANDSHAKE_FAILURE,"NO SERVER CERTIFICATE FOUND");      return;    }    session.localCertificates=certs;    serverCert=new CertificateMessage(certs);    privKey=km.getPrivateKey(alias);    send(serverCert);  }  RSAPublicKey rsakey=null;  DHPublicKeySpec dhkeySpec=null;  byte[] hash=null;  BigInteger p=null;  BigInteger g=null;  KeyPairGenerator kpg=null;  try {    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {      PublicKey pk=serverCert.certs[0].getPublicKey();      if (getRSAKeyLength(pk) > 512) {        kpg=KeyPairGenerator.getInstance("RSA");        kpg.initialize(512);      }    } else     if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_DSS_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DHE_RSA_EXPORT || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon || cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_DH_anon_EXPORT) {      kpg=KeyPairGenerator.getInstance("DH");      p=new BigInteger(1,DHParameters.getPrime());      g=new BigInteger("2");      DHParameterSpec spec=new DHParameterSpec(p,g);      kpg.initialize(spec);    }  } catch (  Exception e) {    fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);  }  if (kpg != null) {    DigitalSignature ds=new DigitalSignature(cipher_suite.authType);    KeyPair kp=null;    try {      kp=kpg.genKeyPair();      if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {        rsakey=(RSAPublicKey)kp.getPublic();      } else {        DHPublicKey dhkey=(DHPublicKey)kp.getPublic();        KeyFactory kf=KeyFactory.getInstance("DH");        dhkeySpec=kf.getKeySpec(dhkey,DHPublicKeySpec.class);      }      if (!cipher_suite.isAnonymous()) {        ds.init(privKey);        privKey=kp.getPrivate();        ds.update(clientHello.getRandom());        ds.update(serverHello.getRandom());        if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {          ServerKeyExchange.updateSignatureRsa(ds,rsakey.getModulus(),rsakey.getPublicExponent());        } else {          ServerKeyExchange.updateSignatureDh(ds,dhkeySpec.getP(),dhkeySpec.getG(),dhkeySpec.getY());        }        hash=ds.sign();      } else {        privKey=kp.getPrivate();      }    } catch (    Exception e) {      fatalAlert(AlertProtocol.INTERNAL_ERROR,"INTERNAL ERROR",e);    }    if (cipher_suite.keyExchange == CipherSuite.KEY_EXCHANGE_RSA_EXPORT) {      serverKeyExchange=new ServerKeyExchange(rsakey.getModulus(),rsakey.getPublicExponent(),null,hash);    } else {      serverKeyExchange=new ServerKeyExchange(p,g,dhkeySpec.getY(),hash);    }    send(serverKeyExchange);  }  certRequest:   if (parameters.getWantClientAuth() || parameters.getNeedClientAuth()) {    X509Certificate[] accepted;    try {      X509TrustManager tm=parameters.getTrustManager();      accepted=tm.getAcceptedIssuers();    } catch (    ClassCastException e) {      break certRequest;    }    byte[] requestedClientCertTypes={CipherSuite.TLS_CT_RSA_SIGN,CipherSuite.TLS_CT_DSS_SIGN};    certificateRequest=new CertificateRequest(requestedClientCertTypes,accepted);    send(certificateRequest);  }  serverHelloDone=new ServerHelloDone();  send(serverHelloDone);  status=NEED_UNWRAP;}  }
class C{  public void saveGroup(Group group){  if (group instanceof JsonGroup) {    JsonGroup jsonGroup=(JsonGroup)group;    JsonGroupQuery query=new JsonGroupQuery(this);    query.groupId(group.getId());    Group existingGroup=query.executeSingleResult(null);    try {      if (existingGroup != null) {        UpdateRequest request=newUpdateRequest(GROUP_PATH,jsonGroup.getId(),jsonGroup);        getConnection().update(context,request);      } else {        CreateRequest request=Requests.newCreateRequest(GROUP_PATH,jsonGroup.getId(),jsonGroup);        getConnection().create(context,request);      }    } catch (    ResourceException ex) {      throw new RuntimeException(ex);    }  }}  }
class C{  public void rewind(){  org.omg.CORBA.portable.ServantObject $so=_servant_preinvoke("rewind",_opsClass);  DynEnumOperations $self=(DynEnumOperations)$so.servant;  try {    $self.rewind();  }  finally {    _servant_postinvoke($so);  }}  }
class C{  private void extract(String destDir,boolean removeFirstPath) throws ApplicationException {  ZipInputStream zipIn=new ZipInputStream(is);  int nEntries=1;  Map<String,List<String>> permissions=new HashMap<>();  permissions.put(getProtectedDirectoryPermissionUnix(),newArrayList(destDir));  try {    if (application != null) {      application.checkAbort();    }    ZipEntry entry=zipIn.getNextEntry();    while (entry != null) {      if (application != null) {        application.checkAbort();      }      int ratioBeforeCompleted=minRatio + ((nEntries - 1) * (maxRatio - minRatio) / numberZipEntries);      int ratioWhenCompleted=minRatio + (nEntries * (maxRatio - minRatio) / numberZipEntries);      String name=entry.getName();      if (name != null && removeFirstPath) {        int sepPos=name.indexOf(ZIP_ENTRY_NAME_SEP);        if (sepPos != -1) {          name=name.substring(sepPos + 1);        } else {          logger.warn(LocalizableMessage.raw("zip entry name does not contain a path separator"));        }      }      if (name != null && name.length() > 0) {        try {          File destination=new File(destDir,name);          copyZipEntry(entry,destination,zipIn,ratioBeforeCompleted,ratioWhenCompleted,permissions);        } catch (        IOException ioe) {          throw new ApplicationException(ReturnCode.FILE_SYSTEM_ACCESS_ERROR,getThrowableMsg(INFO_ERROR_COPYING.get(entry.getName()),ioe),ioe);        }      }      zipIn.closeEntry();      entry=zipIn.getNextEntry();      nEntries++;    }    if (isUnix()) {      for (      String perm : permissions.keySet()) {        List<String> paths=permissions.get(perm);        try {          int result=Utils.setPermissionsUnix(paths,perm);          if (result != 0) {            throw new IOException("Could not set permissions on files " + paths + ".  The chmod error code was: "+ result);          }        } catch (        InterruptedException ie) {          throw new IOException("Could not set permissions on files " + paths + ".  The chmod call returned an InterruptedException.",ie);        }      }    }  } catch (  IOException ioe) {    throw new ApplicationException(ReturnCode.FILE_SYSTEM_ACCESS_ERROR,getThrowableMsg(INFO_ERROR_ZIP_STREAM.get(zipFileName),ioe),ioe);  }}  }
class C{  public boolean isDataFlavorSupported(DataFlavor flavor){  DataFlavor[] flavors=getTransferDataFlavors();  for (int i=0; i < flavors.length; i++) {    if (flavors[i].equals(flavor)) {      return true;    }  }  return false;}  }
class C{  public boolean isCached(){  return true;}  }
class C{  public void printAVPairs(Map avPairs,int indentLevel){  Set set=avPairs.keySet();  Iterator itr=set.iterator();  Object objAttribute;  Object objValue;  while (itr.hasNext()) {    objAttribute=itr.next();    objValue=avPairs.get(objAttribute);    printIndent(indentLevel);    writer.println(objAttribute.toString() + " = " + objValue.toString());  }  writer.flush();}  }
class C{  public void addLineData(int inputStartLine,String inputFileName,int inputLineCount,int outputStartLine,int outputLineIncrement){  int fileIndex=filePathList.indexOf(inputFileName);  if (fileIndex == -1)   throw new IllegalArgumentException("inputFileName: " + inputFileName);  if (outputStartLine == 0)   return;  LineInfo li=new LineInfo();  li.setInputStartLine(inputStartLine);  li.setInputLineCount(inputLineCount);  li.setOutputStartLine(outputStartLine);  li.setOutputLineIncrement(outputLineIncrement);  if (fileIndex != lastFileID)   li.setLineFileID(fileIndex);  lastFileID=fileIndex;  lineData.add(li);}  }
class C{  public void preDeregister() throws java.lang.Exception {  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"preDeregister","stop the timer");  stop();}  }
class C{  public FrameBodyTDTG(byte textEncoding,String text){  super(textEncoding,text);}  }
class C{  private static ByteBuffer readCookieValue(ByteBuffer bb){  boolean quoted=false;  if (bb.hasRemaining()) {    if (bb.get() == QUOTE_BYTE) {      quoted=true;    } else {      bb.rewind();    }  }  int start=bb.position();  int end=bb.limit();  while (bb.hasRemaining()) {    byte b=bb.get();    if (isCookieOctet[(b & 0xFF)]) {    } else     if (b == SEMICOLON_BYTE || b == COMMA_BYTE || b == SPACE_BYTE || b == TAB_BYTE) {      end=bb.position() - 1;      bb.position(end);      break;    } else     if (quoted && b == QUOTE_BYTE) {      end=bb.position() - 1;      break;    } else {      return null;    }  }  return new ByteBuffer(bb.bytes,start,end - start);}  }
class C{  @Override Object writeReplace(){  return super.writeReplace();}  }
class C{  public int next(){  int result=_currentNode;  if (result == END)   return DTM.NULL;  if (_nodeType == NULL) {    _currentNode=END;    return returnNode(makeNodeHandle(result));  } else   if (_nodeType >= DTM.NTYPES) {    if (_nodeType == _exptype2(result)) {      _currentNode=END;      return returnNode(makeNodeHandle(result));    }  } else {    if (_nodeType == _type2(result)) {      _currentNode=END;      return returnNode(makeNodeHandle(result));    }  }  return DTM.NULL;}  }
class C{  @Override public int hashCode(){  int yearValue=prolepticYear;  int monthValue=monthOfYear;  int dayValue=dayOfMonth;  return getChronology().getId().hashCode() ^ (yearValue & 0xFFFFF800) ^ ((yearValue << 11) + (monthValue << 6) + (dayValue));}  }
class C{  public Guid(String dn,long id){  _dn=DN.valueOf(dn);  _uniqueId=id;}  }
class C{  static String lookUpFactoryClassName(String factoryId,String propertiesFilename,String fallbackClassName){  SecuritySupport ss=SecuritySupport.getInstance();  try {    String systemProp=ss.getSystemProperty(factoryId);    if (systemProp != null) {      debugPrintln("found system property, value=" + systemProp);      return systemProp;    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=ss.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=ss.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXalanProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=ss.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXalanProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=ss.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXalanProperties=new Properties();          fis=ss.getFileInputStream(propertiesFile);          fXalanProperties.load(fis);        }      } catch (      Exception x) {        fXalanProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXalanProperties != null) {      factoryClassName=fXalanProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=ss.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return factoryClassName;  }  return findJarServiceProviderName(factoryId);}  }
class C{  public static void copyFileFromJar(InputStream in,File destFile,boolean overwrite) throws IOException {  if (overwrite || (!destFile.exists())) {    if (destFile.exists() && destFile.isFile()) {      destFile.delete();    }    File parent=destFile.getParentFile();    if ((parent != null) && (!parent.exists())) {      parent.mkdirs();    }    String line=null;    FileOutputStream out=null;    try {      out=new FileOutputStream(destFile);      byte[] buffer=new byte[BUFFER_SIZE];      int count=0;      while ((count=in.read(buffer,0,buffer.length)) != -1) {        out.write(buffer,0,count);      }    }  finally {      out.close();      in.close();    }  }}  }
class C{  public MLet(URL[] urls,ClassLoader parent,URLStreamHandlerFactory factory,boolean delegateToCLR){  super(urls,parent,factory);  init(delegateToCLR);}  }
class C{  @Override public void process(Request request,Response response){  HashMap<String,List<String>> headers=extractHeadersFromRequest(request);  for (  SecurityPlugin plugin : securityPlugins) {    logger.debug("Running security plugin: " + plugin.getPluginName());    try {      plugin.doValidate(headers,request.getPath(),HttpMethod.forString(request.getHttpMethod().name()));    } catch (    PermissionDeniedException e) {      throw new SecurityException(e.getMessage());    }  }}  }
class C{  public Object encode(Object pObject) throws EncoderException {  if (!(pObject instanceof byte[])) {    throw new EncoderException("Parameter supplied to Base64 encode is not a byte[]");  }  return encode((byte[])pObject);}  }
class C{  @Read(operationDescription=@Operation(errors={@ApiError(code=500,description=CORE_TOKEN_RESOURCE + "error.unexpected.server.error." + DESCRIPTION)},description=CORE_TOKEN_RESOURCE + READ_DESCRIPTION)) public Promise<ResourceResponse,ResourceException> readInstance(Context serverContext,String tokenId,ReadRequest readRequest){  String principal=PrincipalRestUtils.getPrincipalNameFromServerContext(serverContext);  try {    Token token=store.read(tokenId);    if (token == null) {      error("READ by {0}: No token resource to read with ID: {1}",principal,tokenId);      return generateNotFoundException(tokenId).asPromise();    }    String json=serialisation.serialise(token);    ResourceResponse response=newResourceResponse(tokenId,String.valueOf(currentTimeMillis()),JsonValueBuilder.toJsonValue(json));    debug("READ by {0}: Read token resource with ID: {1}",principal,tokenId);    return newResultPromise(response);  } catch (  CoreTokenException e) {    error(e,"READ by {0}: Error reading token resource with ID: {1}",principal,tokenId);    return generateException(e).asPromise();  }}  }
class C{  public void writeSetOpenDSJavaHome(UserData uData,String installPath) throws IOException {  String javaHome=System.getProperty("java.home");  if (javaHome == null || javaHome.length() == 0) {    javaHome=System.getenv(SetupUtils.OPENDJ_JAVA_HOME);  }  Map<JavaArguments,JavaArguments> hmJavaArguments=new HashMap<>();  for (  String script : uData.getScriptNamesForJavaArguments()) {    JavaArguments origJavaArguments=uData.getJavaArguments(script);    if (hmJavaArguments.get(origJavaArguments) == null) {      if (Utils.supportsOption(origJavaArguments.getStringArguments(),javaHome,installPath)) {        hmJavaArguments.put(origJavaArguments,origJavaArguments);      } else {        JavaArguments transformedArguments=getBestEffortArguments(origJavaArguments,javaHome,installPath);        hmJavaArguments.put(origJavaArguments,transformedArguments);      }    }  }  Properties fileProperties=getJavaPropertiesFileContents(getPropertiesFileName(installPath));  Map<String,JavaArguments> args=new HashMap<>();  Map<String,String> otherProperties=new HashMap<>();  for (  String script : uData.getScriptNamesForJavaArguments()) {    JavaArguments origJavaArgument=uData.getJavaArguments(script);    JavaArguments transformedJavaArg=hmJavaArguments.get(origJavaArgument);    JavaArguments defaultJavaArg=uData.getDefaultJavaArguments(script);    String propertiesKey=getJavaArgPropertyForScript(script);    if (origJavaArgument.equals(defaultJavaArg) && fileProperties.containsKey(propertiesKey)) {      otherProperties.put(propertiesKey,fileProperties.getProperty(propertiesKey));    } else {      args.put(script,transformedJavaArg);    }  }  putBooleanPropertyFrom("overwrite-env-java-home",fileProperties,otherProperties);  putBooleanPropertyFrom("overwrite-env-java-args",fileProperties,otherProperties);  if (!fileProperties.containsKey("default.java-home")) {    otherProperties.put("default.java-home",javaHome);  }  writeSetOpenDSJavaHome(installPath,args,otherProperties);}  }
class C{  private boolean isNewer(String first,String second) throws NumberFormatException {  if ((first == null) || (second == null))   return false;  if (first.equals(second))   return true;  StringTokenizer fTok=new StringTokenizer(first,".",true);  StringTokenizer sTok=new StringTokenizer(second,".",true);  int fVersion=0;  int sVersion=0;  while (fTok.hasMoreTokens() || sTok.hasMoreTokens()) {    if (fTok.hasMoreTokens())     fVersion=Integer.parseInt(fTok.nextToken()); else     fVersion=0;    if (sTok.hasMoreTokens())     sVersion=Integer.parseInt(sTok.nextToken()); else     sVersion=0;    if (fVersion < sVersion)     return false; else     if (fVersion > sVersion)     return true;    if (fTok.hasMoreTokens())     fTok.nextToken();    if (sTok.hasMoreTokens())     sTok.nextToken();  }  return true;}  }
class C{  public Attribute(String name,String nameSpace,String attributeValue) throws SAMLException {  super(name,nameSpace);  String escapeAttVal=SystemConfigurationUtil.getProperty(SAMLConstants.ESCAPE_ATTR_VALUE,"true");  boolean escapeAtt="true".equalsIgnoreCase(escapeAttVal) ? true : false;  if (escapeAtt) {    this.addAttributeValue(XMLUtils.escapeSpecialCharacters(attributeValue));  } else {    this.addAttributeValue(attributeValue);  }}  }
class C{  public static boolean copyInternal(File src,File dest,byte[] buf){  boolean result=true;  String files[]=null;  if (src.isDirectory()) {    files=src.list();    result=dest.mkdir();  } else {    files=new String[1];    files[0]="";  }  if (files == null) {    files=new String[0];  }  for (int i=0; (i < files.length) && result; i++) {    File fileSrc=new File(src,files[i]);    File fileDest=new File(dest,files[i]);    if (fileSrc.isDirectory()) {      result=copyInternal(fileSrc,fileDest,buf);    } else {      try (FileInputStream is=new FileInputStream(fileSrc);FileOutputStream os=new FileOutputStream(fileDest)){        int len=0;        while (true) {          len=is.read(buf);          if (len == -1)           break;          os.write(buf,0,len);        }      } catch (      IOException e) {        e.printStackTrace();        result=false;      }    }  }  return result;}  }
class C{  public void updateUiState(){  if (meetingJoined) {    this.joinMeetingButton.setText(R.string.leave_meeting);  } else {    this.joinMeetingButton.setText(R.string.join_meeting);  }}  }
class C{  @DataProvider(name="dataForAttributeRename") public Object[][] dataForAttributeRename(){  return new Object[][]{{"cn","cn",true},{"CN","cn",true},{"objectClass","cn",false},{"cn;foo","cn",true}};}  }
class C{  public ReconAuditEventBuilder ambiguousTargetIds(String ambiguousTargetIds){  jsonValue.put(AMBIGUOUS_TARGET_IDS,ambiguousTargetIds);  return self();}  }
class C{  private static byte[] encode3to4(byte[] b4,byte[] threeBytes,int numSigBytes,int options){  encode3to4(threeBytes,0,numSigBytes,b4,0,options);  return b4;}  }
class C{  @DataProvider(name="testSearchInternalAttributeFilters") public Object[][] createTestSearchInternalAttributeFiltersData(){  return new Object[][]{{AttributeFilterType.DEFAULT,false,false,false},{AttributeFilterType.DEFAULT,false,false,true},{AttributeFilterType.DEFAULT,false,true,false},{AttributeFilterType.DEFAULT,false,true,true},{AttributeFilterType.DEFAULT,true,false,false},{AttributeFilterType.DEFAULT,true,false,true},{AttributeFilterType.DEFAULT,true,true,false},{AttributeFilterType.DEFAULT,true,true,true},{AttributeFilterType.WILDCARDS,false,false,false},{AttributeFilterType.WILDCARDS,false,false,true},{AttributeFilterType.WILDCARDS,false,true,false},{AttributeFilterType.WILDCARDS,false,true,true},{AttributeFilterType.WILDCARDS,true,false,false},{AttributeFilterType.WILDCARDS,true,false,true},{AttributeFilterType.WILDCARDS,true,true,false},{AttributeFilterType.WILDCARDS,true,true,true},{AttributeFilterType.ENUMERATED,false,false,false},{AttributeFilterType.ENUMERATED,false,false,true},{AttributeFilterType.ENUMERATED,false,true,false},{AttributeFilterType.ENUMERATED,false,true,true},{AttributeFilterType.ENUMERATED,true,false,false},{AttributeFilterType.ENUMERATED,true,false,true},{AttributeFilterType.ENUMERATED,true,true,false},{AttributeFilterType.ENUMERATED,true,true,true}};}  }
class C{  public synchronized int read(byte b[],int off,int len){  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  }  if (pos >= count) {    return -1;  }  int avail=count - pos;  if (len > avail) {    len=avail;  }  if (len <= 0) {    return 0;  }  System.arraycopy(buf,pos,b,off,len);  pos+=len;  return len;}  }
class C{  public String toString(){  return ("SchemaType: " + schemaType);}  }
class C{  public ServiceAlreadyExistsException(String rbName,String errCode,Object[] args){  super(rbName,errCode,args);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("hc_staff",true);  newNode=doc.createDocumentFragment();  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public static void println(String message){synchronized (logSync) {    if (logWriter != null) {      logWriter.println(message);      logWriter.flush();    }  }}  }
class C{  public static File createTemplateFile(String baseDN,int numEntries) throws IOException {  Set<String> baseDNs=new HashSet<>(1);  baseDNs.add(baseDN);  return createTemplateFile(baseDNs,numEntries);}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[(codewords[0] - codeIndex) * 2];  int[] byteCompactionData=new int[(codewords[0] - codeIndex) * 2];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:case BYTE_COMPACTION_MODE_LATCH_6:case NUMERIC_COMPACTION_MODE_LATCH:case BEGIN_MACRO_PDF417_CONTROL_BLOCK:case BEGIN_MACRO_PDF417_OPTIONAL_FIELD:case MACRO_PDF417_TERMINATOR:    codeIndex--;  end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  public static void putIfAbsent(Map<String,String> map,String name,String value){  if (!map.containsKey(name)) {    map.put(name,value);  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      boolean old=isRootPaneCheckingEnabled();      try {        setRootPaneCheckingEnabled(false);        ui.installUI(this);      }  finally {        setRootPaneCheckingEnabled(old);      }    }  }}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  public FSBrowserArtifactConsumerHandler(HttpServletRequest request,HttpServletResponse response,IDPDescriptorType idpDescriptor,String idpEntityId,boolean doFederate,String nameIDPolicy,String relayState){  super(request,response,idpDescriptor,idpEntityId,doFederate,nameIDPolicy,relayState);}  }
class C{  public InvalidMagicMimeEntryException(){  super("Invalid Magic Mime Entry: Unknown entry");}  }
class C{  public void testDisconnect_BlockWithServerChannelClosed() throws IOException {  assertTrue(this.channel1.isBlocking());  connectLocalServer();  this.channel1.close();  disconnectAfterClosed();}  }
class C{  public void paint(Graphics g,float x,float y,float w,float h,View v,int item){  View cv=v.getView(item);  Container host=v.getContainer();  Object name=cv.getElement().getAttributes().getAttribute(StyleConstants.NameAttribute);  if (!(name instanceof HTML.Tag) || name != HTML.Tag.LI) {    return;  }  isLeftToRight=host.getComponentOrientation().isLeftToRight();  float align=0;  if (cv.getViewCount() > 0) {    View pView=cv.getView(0);    Object cName=pView.getElement().getAttributes().getAttribute(StyleConstants.NameAttribute);    if ((cName == HTML.Tag.P || cName == HTML.Tag.IMPLIED) && pView.getViewCount() > 0) {      paintRect.setBounds((int)x,(int)y,(int)w,(int)h);      Shape shape=cv.getChildAllocation(0,paintRect);      if (shape != null && (shape=pView.getView(0).getChildAllocation(0,shape)) != null) {        Rectangle rect=(shape instanceof Rectangle) ? (Rectangle)shape : shape.getBounds();        align=pView.getView(0).getAlignment(View.Y_AXIS);        y=rect.y;        h=rect.height;      }    }  }  Color c=(host.isEnabled() ? (ss != null ? ss.getForeground(cv.getAttributes()) : host.getForeground()) : UIManager.getColor("textInactiveText"));  g.setColor(c);  if (img != null) {    drawIcon(g,(int)x,(int)y,(int)w,(int)h,align,host);    return;  }  CSS.Value childtype=getChildType(cv);  Font font=((StyledDocument)cv.getDocument()).getFont(cv.getAttributes());  if (font != null) {    g.setFont(font);  }  if (childtype == CSS.Value.SQUARE || childtype == CSS.Value.CIRCLE || childtype == CSS.Value.DISC) {    drawShape(g,childtype,(int)x,(int)y,(int)w,(int)h,align);  } else   if (childtype == CSS.Value.DECIMAL) {    drawLetter(g,'1',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  } else   if (childtype == CSS.Value.LOWER_ALPHA) {    drawLetter(g,'a',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  } else   if (childtype == CSS.Value.UPPER_ALPHA) {    drawLetter(g,'A',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  } else   if (childtype == CSS.Value.LOWER_ROMAN) {    drawLetter(g,'i',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  } else   if (childtype == CSS.Value.UPPER_ROMAN) {    drawLetter(g,'I',(int)x,(int)y,(int)w,(int)h,align,getRenderIndex(v,item));  }}  }
class C{  public static Date parseNormalizedDateString(String dateString){  if (dateString == null)   return null;  ParsePosition pos=new ParsePosition(0);  Date date=normalizedDateFormat.parse(dateString,pos);  if (date == null) {    debug.error("Locale.parseNormalizedDateString: " + "Unable to parse date string");  }  if (debug.messageEnabled()) {    debug.message("Locale.parseNormalizedDateString(" + dateString + ")="+ date);  }  return date;}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  String url=getStringOptionValue(ARGUMENT_URL);  String interfaceName=getStringOptionValue(ARGUMENT_INTERFACE_NAME);  String pluginName=getStringOptionValue(ARGUMENT_PLUGIN_NAME);  ServiceSchemaManager ssm=getServiceSchemaManager();  IOutput outputWriter=getOutputWriter();  try {    String[] params={serviceName,pluginName};    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_SET_PLUGIN_SCHEMA_PROP_VIEWBEAN_URL",params);    PluginSchema ps=ssm.getPluginSchema(pluginName,interfaceName,"/");    ps.setPropertiesViewBeanURL(url);    writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_SET_PLUGIN_SCHEMA_PROP_VIEWBEAN_URL",params);    outputWriter.printlnMessage(MessageFormat.format(getResourceString("add-plugin-interface-succeed"),(Object[])params));  } catch (  SSOException e) {    String[] args={serviceName,pluginName,e.getMessage()};    debugError("SetPluginSchemaPropertiesViewBeanURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_PLUGIN_SCHEMA_PROP_VIEWBEAN_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }catch (  SMSException e) {    String[] args={serviceName,pluginName,e.getMessage()};    debugError("SetPluginSchemaPropertiesViewBeanURL.handleRequest",e);    writeLog(LogWriter.LOG_ERROR,Level.INFO,"FAILED_SET_PLUGIN_SCHEMA_PROP_VIEWBEAN_URL",args);    throw new CLIException(e,ExitCodes.REQUEST_CANNOT_BE_PROCESSED);  }}  }
class C{  public void addJKTableColumn(String keyLabel){  JKTableColumn col=new JKTableColumn();  col.setName(keyLabel);  addJKTableColumn(col);}  }
class C{  public boolean hasAttributeNS(String namespaceURI,String localName){  return DTM.NULL != dtm.getAttributeNode(node,namespaceURI,localName);}  }
class C{  @Override public boolean isServlet22(){  return XmlIdentifiers.WEB_22_PUBLIC.equals(publicId);}  }
class C{  public ConditionDecision evaluate(String realm,Subject subject,String resourceName,Map<String,Set<String>> environment) throws EntitlementException {  try {    SSOToken token=(subject != null) ? getSSOToken(subject) : null;    Condition cond=getPolicyCondition();    com.sun.identity.policy.ConditionDecision dec=cond.getConditionDecision(token,environment);    return new ConditionDecision(dec.isAllowed(),dec.getAdvices(),dec.getTimeToLive());  } catch (  SSOException ex) {    throw new EntitlementException(510,ex);  }catch (  PolicyException ex) {    throw new EntitlementException(510,ex);  }}  }
class C{  private void createPostExternalInitializationSubCommand() throws ArgumentException {  postExternalInitializationSubCmd=new SubCommand(this,POST_EXTERNAL_INITIALIZATION_SUBCMD_NAME,INFO_DESCRIPTION_SUBCMD_POST_EXTERNAL_INITIALIZATION.get(PRE_EXTERNAL_INITIALIZATION_SUBCMD_NAME));  Argument[] argsToAdd={secureArgsList.getHostNameArg(),secureArgsList.getPortArg()};  for (  Argument arg : argsToAdd) {    postExternalInitializationSubCmd.addArgument(arg);  }}  }
class C{  String toIndentedString(int index){  failIfDeleted();  StringBuffer buff=new StringBuffer();  for (int i=0; i < index; i++) {    buff.append(" ");  }  return buff.toString() + "[" + getName()+ ":"+ getValue()+ ":"+ (getChildElements() == null ? "0" : String.valueOf(getChildElements().size()))+ ":"+ "attr="+ getAttributes()+ ":"+ getStartToken().getTokenIndex()+ "]\n"+ getChildElementsIndentedString(index + 1);}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {  String refClassName=in.readUTF();  if (refClassName == null || refClassName.length() == 0) {    ref=(RemoteRef)in.readObject();  } else {    String internalRefClassName=RemoteRef.packagePrefix + "." + refClassName;    Class<?> refClass=Class.forName(internalRefClassName);    try {      ref=(RemoteRef)refClass.newInstance();    } catch (    InstantiationException e) {      throw new ClassNotFoundException(internalRefClassName,e);    }catch (    IllegalAccessException e) {      throw new ClassNotFoundException(internalRefClassName,e);    }catch (    ClassCastException e) {      throw new ClassNotFoundException(internalRefClassName,e);    }    ref.readExternal(in);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr streetAttr;  Attr replacedAttr;  String value;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  streetAttr=testEmployee.getAttributeNode("class");  replacedAttr=testEmployee.setAttributeNode(streetAttr);  assertSame("replacedAttr",streetAttr,replacedAttr);}  }
class C{  public SubschemaSubentryVirtualAttributeProvider(){  super();}  }
class C{  public String name(){  return name;}  }
class C{  public void putLineRecord(String file,int line,String content){  Map<Integer,String> map;  if (lineRecord.containsKey(file)) {    map=lineRecord.get(file);  } else {    map=new HashMap<>();    lineRecord.put(file,map);  }  map.put(line,content);}  }
class C{  @Override public long dynamicQueryCount(DynamicQuery dynamicQuery){  return fooPersistence.countWithDynamicQuery(dynamicQuery);}  }
class C{  public Response createResponse(){  Response response=new Response();  response.setConnector(this);  return (response);}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder("SecurityCollection[");  sb.append(name);  if (description != null) {    sb.append(", ");    sb.append(description);  }  sb.append("]");  return (sb.toString());}  }
class C{  public Point(){  this(0,0);}  }
class C{  public boolean isRefreshNeededOnExpansion(){  return refreshNeededOnExpansion;}  }
class C{  public DispatcherTaskRunner(String queueName,DispatcherTask dispatcherTask){  this.queueName=queueName;  this.dispatcherTask=dispatcherTask;}  }
class C{  public boolean visitMatchPattern(ExpressionOwner owner,StepPattern pattern){  return true;}  }
class C{  private boolean isForceUpgrade(){  return force.isPresent();}  }
class C{  public String toString(){  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"toString()","Entry");  }  String retStr="ModelMBeanOperationInfo: " + this.getName() + " ; Description: "+ this.getDescription()+ " ; Descriptor: "+ this.getDescriptor()+ " ; ReturnType: "+ this.getReturnType()+ " ; Signature: ";  MBeanParameterInfo[] pTypes=this.getSignature();  for (int i=0; i < pTypes.length; i++) {    retStr=retStr.concat((pTypes[i]).getType() + ", ");  }  return retStr;}  }
class C{  public AMSearchResults searchUsers(String wildcard,AMSearchControl searchControl,String avfilter) throws AMException, SSOException {  return searchObjects(AMNamingAttrManager.getNamingAttr(USER),getSearchFilter(AMObject.USER),wildcard,searchControl,avfilter);}  }
class C{  public com.sun.identity.liberty.ws.common.jaxb.protocol.StatusMessageElement createStatusMessageElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.common.jaxb.protocol.impl.StatusMessageElementImpl();}  }
class C{  @Override public synchronized void backgroundProcess(){  if (getState().isAvailable() && getEnabled() && writer != null && buffered) {    writer.flush();  }}  }
class C{  public Engine(String service){  this.serviceName=service;}  }
class C{  public InvalidOpenTypeException(String msg){  super(msg);}  }
class C{  public static Border createEtchedBorder(Color highlight,Color shadow){  return new EtchedBorder(highlight,shadow);}  }
class C{  public LDAPTrustManagerProvider(){}  }
class C{  public boolean hasNextBoolean(){  return hasNext(boolPattern());}  }
class C{  private Context createAdminContext(String realm,String resourceOwnerId) throws RealmLookupException {  RealmContext realmContext=new RealmContext(new RootContext(),Realm.of(realm));  SubjectContext subjectContext=new AdminSubjectContext(logger,sessionCache,realmContext);  Map<String,String> templateVariables=new HashMap<>();  templateVariables.put("user",resourceOwnerId);  return new UriRouterContext(subjectContext,"","",templateVariables);}  }
class C{  public void auditAccessAttempt(){  if (auditEventPublisher.isAuditing(realm,ACCESS_TOPIC,EventName.AM_ACCESS_ATTEMPT)) {    AuditEvent auditEvent=auditEventFactory.accessEvent(realm).forHttpServletRequest(httpServletRequest).timestamp(startTime).transactionId(AuditRequestContext.getTransactionIdValue()).eventName(EventName.AM_ACCESS_ATTEMPT).component(component).userId(userId).request(PLL,method).trackingId(trackingId).toEvent();    auditEventPublisher.tryPublish(ACCESS_TOPIC,auditEvent);  }  accessAttemptAudited=true;}  }
class C{  public Polygon(){  xpoints=new int[MIN_LENGTH];  ypoints=new int[MIN_LENGTH];}  }
class C{  public final void popPair(){  m_firstFree-=2;  m_map[m_firstFree]=null;  m_map[m_firstFree + 1]=null;}  }
class C{  public StringBufferInputStream(String s){  this.buffer=s;  count=s.length();}  }
class C{  public void testConstrStringWithExponentWithPoint4(){  String a="23809648392384754573567356745735635678.90295784902768787678287E+21";  int aScale=2;  BigInteger bA=new BigInteger("2380964839238475457356735674573563567890295784902768787678287");  BigDecimal aNumber=new BigDecimal(a);  assertEquals("incorrect value",bA,aNumber.unscaledValue());  assertEquals("incorrect scale",aScale,aNumber.scale());}  }
class C{  @Deprecated public boolean inside(int x,int y){  return contains((double)x,(double)y);}  }
class C{  public static String map2OID(String algName){  checkCacheVersion();  String result=alg2OidMap.get(algName.toUpperCase(Locale.US));  if (result != null) {    return result;  }  AlgNameMapperSource s=source;  if (s != null) {    return s.mapNameToOid(algName);  }  return null;}  }
class C{  public VLVRequestControl(int beforeCount,int afterCount,int offset,int contentCount){  this(false,beforeCount,afterCount,offset,contentCount,null);}  }
class C{  protected void fireValueChanged(TreeSelectionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == TreeSelectionListener.class) {      ((TreeSelectionListener)listeners[i + 1]).valueChanged(e);    }  }}  }
class C{  public static RecipeFragment newInstance(Recipe recipe,int sectionNumber){  RecipeFragment fragment=new RecipeFragment();  fragment.recipe=recipe;  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  protected Key engineTranslateKey(Key key) throws InvalidKeyException {  if (key != null) {    if (key instanceof DSAPrivateKey) {      DSAPrivateKey privateKey=(DSAPrivateKey)key;      DSAParams params=privateKey.getParams();      try {        return engineGeneratePrivate(new DSAPrivateKeySpec(privateKey.getX(),params.getP(),params.getQ(),params.getG()));      } catch (      InvalidKeySpecException e) {        throw new InvalidKeyException("ATTENTION: InvalidKeySpecException: " + e);      }    }    if (key instanceof DSAPublicKey) {      DSAPublicKey publicKey=(DSAPublicKey)key;      DSAParams params=publicKey.getParams();      try {        return engineGeneratePublic(new DSAPublicKeySpec(publicKey.getY(),params.getP(),params.getQ(),params.getG()));      } catch (      InvalidKeySpecException e) {        throw new InvalidKeyException("ATTENTION: InvalidKeySpecException: " + e);      }    }  }  throw new InvalidKeyException("'key' is neither DSAPublicKey nor DSAPrivateKey");}  }
class C{  public void testSetObject_int_Object_int() throws SQLException {  PreparedStatement ps=null;  try {    String query="insert into type (IntVal) values (?);";    ps=conn.prepareStatement(query);    Statement st=null;    try {      ps.setObject(1,Integer.MAX_VALUE,Types.INTEGER);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where IntVal=" + Integer.MAX_VALUE);      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (LongVal) values (?);";    ps=conn.prepareStatement(query);    try {      ps.setObject(1,"test text",Types.CHAR);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where LongVal='test text';");      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (DecVal) values (?);";    ps=conn.prepareStatement(query);    ps.setObject(1,new Object(),Types.DECIMAL);    ps.execute();    query="insert into type (dateVal) values (?);";    ps=conn.prepareStatement(query);    Date d=new Date(123456789);    try {      ps.setObject(1,d,Types.DATE);      ps.execute();      st=conn.createStatement();      st.execute("select * from type where dateVal='" + d.getTime() + "';");      ResultSet rs=st.getResultSet();      assertEquals(1,getCount(rs));    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }    query="insert into type (BlobVal) values (?);";    ps=conn.prepareStatement(query);    try {      ps.setObject(1,"",Types.BLOB);      ps.execute();    }  finally {      try {        st.close();      } catch (      Exception ee) {      }    }  }  finally {    try {      ps.close();    } catch (    Exception ee) {    }  }  try {    ps.setObject(1,Integer.MAX_VALUE,Types.INTEGER);    fail("Exception not thrown");  } catch (  SQLException e) {  }}  }
class C{  public PdfDictionary(){  super();}  }
class C{  private void searchChangelogForOneChangeNumber(long changeNumber,CSN expectedCsn) throws Exception {  String testName="searchOneChangeNumber/" + changeNumber;  debugInfo(testName,"Starting search\n\n");  InternalSearchOperation searchOp=searchChangelog("(changenumber=" + changeNumber + ")",1,SUCCESS,testName);  SearchResultEntry entry=searchOp.getSearchEntries().get(0);  String uncheckedUid=null;  assertEntryCommonAttributes(entry,uncheckedUid,USER1_ENTRY_UUID,changeNumber,expectedCsn);  debugInfo(testName,"Ending search with success");}  }
class C{  public String paramString(){  String typeStr;switch (id) {case COMPONENT_ADDED:    typeStr="COMPONENT_ADDED";  break;case COMPONENT_REMOVED:typeStr="COMPONENT_REMOVED";break;default :typeStr="unknown type";}return typeStr + ",child=" + child.getName();}  }
class C{  public RuntimeCryptoException(String message){  super(message);}  }
class C{  public boolean isNot(OmniDate compareDate){  return !is(compareDate);}  }
class C{  public PasswordPolicyResponseControl(boolean isCritical,PasswordPolicyWarningType warningType,int warningValue,PasswordPolicyErrorType errorType){  super(OID_PASSWORD_POLICY_CONTROL,isCritical);  this.warningType=warningType;  this.warningValue=warningValue;  this.errorType=errorType;}  }
class C{  static void updateSubregion(SynthContext state,Graphics g,Rectangle bounds){  paintRegion(state,g,bounds);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList genderList;  Node gender;  EntityReference entRef;  Element entElement;  Node appendedChild;  doc=(Document)load("staff",true);  genderList=doc.getElementsByTagName("gender");  gender=genderList.item(2);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  appendedChild=gender.appendChild(entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);{    boolean success=false;    try {      entElement.removeAttribute("domestic");    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);  }}  }
class C{  public GenericObject first(){  return (NetObject)super.first();}  }
class C{  void writeToUsageOutputStream(CharSequence message){  try {    usageOutputStream.write(getBytes(message.toString()));  } catch (  final Exception e) {    logger.traceException(e);  }}  }
class C{  private void registerAuth(ConnectionWrapper conn){  LDAPURL url=makeLDAPUrl(conn);  try {    registerAuth(url,conn.getBindDn(),conn.getBindPassword(),false);  } catch (  LdapException x) {    throw new RuntimeException("Bug");  }}  }
class C{  private void initMaps(){  putSummary(NOT_STARTED,INFO_SUMMARY_UNINSTALL_NOT_STARTED);  putSummary(STOPPING_SERVER,INFO_SUMMARY_STOPPING);  putSummary(UNCONFIGURING_REPLICATION,INFO_SUMMARY_UNCONFIGURING_REPLICATION);  putSummary(DISABLING_WINDOWS_SERVICE,INFO_SUMMARY_DISABLING_WINDOWS_SERVICE);  putSummary(DELETING_EXTERNAL_DATABASE_FILES,INFO_SUMMARY_DELETING_EXTERNAL_DB_FILES);  putSummary(DELETING_EXTERNAL_LOG_FILES,INFO_SUMMARY_DELETING_EXTERNAL_LOG_FILES);  putSummary(REMOVING_EXTERNAL_REFERENCES,INFO_SUMMARY_DELETING_EXTERNAL_REFERENCES);  putSummary(DELETING_INSTALLATION_FILES,INFO_SUMMARY_DELETING_INSTALLATION_FILES);  LocalizableMessage successMsg;  Installation installation=getInstallation();  String libPath=getPath(installation.getLibrariesDirectory());  String resourcesPath=getPath(installation.getResourcesDirectory());  String classesPath=getPath(installation.getClassesDirectory());  boolean resourcesDefined=Utils.directoryExistsAndIsNotEmpty(resourcesPath);  boolean classesDefined=Utils.directoryExistsAndIsNotEmpty(classesPath);  ArrayList<String> paths=new ArrayList<>();  paths.add(libPath);  if (resourcesDefined) {    paths.add(resourcesPath);  }  if (classesDefined) {    paths.add(classesPath);  }  if (isCli()) {    if (getUninstallUserData().getRemoveLibrariesAndTools()) {      String arg;      if (isWindows()) {        arg=installation.getUninstallBatFile() + getLineBreak().toString() + getTab()+ joinAsString(getLineBreak().toString(),paths);      } else {        arg=joinAsString(getLineBreak().toString(),paths);      }      successMsg=INFO_SUMMARY_UNINSTALL_FINISHED_SUCCESSFULLY_REMOVE_JARFILES_CLI.get(arg);    } else {      successMsg=INFO_SUMMARY_UNINSTALL_FINISHED_SUCCESSFULLY_CLI.get();    }  } else   if (getUninstallUserData().getRemoveLibrariesAndTools()) {    String formattedPath=addWordBreaks(joinAsString(getLineBreak().toString(),paths),60,5);    successMsg=INFO_SUMMARY_UNINSTALL_FINISHED_SUCCESSFULLY_REMOVE_JARFILES.get(formattedPath);  } else {    successMsg=INFO_SUMMARY_UNINSTALL_FINISHED_SUCCESSFULLY.get();  }  hmSummary.put(FINISHED_SUCCESSFULLY,getFormattedSuccess(successMsg));  LocalizableMessage nonCriticalMsg;  if (!isCli()) {    nonCriticalMsg=INFO_SUMMARY_UNINSTALL_FINISHED_WITH_ERROR_ON_REMOTE.get();  } else {    nonCriticalMsg=INFO_SUMMARY_UNINSTALL_FINISHED_WITH_ERROR_ON_REMOTE_CLI.get();  }  hmSummary.put(FINISHED_WITH_ERROR_ON_REMOTE,getFormattedWarning(nonCriticalMsg));  if (!isCli()) {    nonCriticalMsg=INFO_SUMMARY_UNINSTALL_FINISHED_WITH_ERROR_DELETING.get();  } else {    nonCriticalMsg=INFO_SUMMARY_UNINSTALL_FINISHED_WITH_ERROR_DELETING_CLI.get();  }  hmSummary.put(FINISHED_WITH_ERROR_DELETING,getFormattedWarning(nonCriticalMsg));  hmSummary.put(FINISHED_WITH_ERROR,getFormattedError(INFO_SUMMARY_UNINSTALL_FINISHED_WITH_ERROR.get()));  Map<UninstallProgressStep,Integer> hmTime=new HashMap<>();  hmTime.put(UNCONFIGURING_REPLICATION,5);  hmTime.put(STOPPING_SERVER,15);  hmTime.put(DISABLING_WINDOWS_SERVICE,5);  hmTime.put(DELETING_EXTERNAL_DATABASE_FILES,30);  hmTime.put(DELETING_EXTERNAL_LOG_FILES,5);  hmTime.put(REMOVING_EXTERNAL_REFERENCES,5);  hmTime.put(DELETING_INSTALLATION_FILES,10);  int totalTime=0;  List<UninstallProgressStep> steps=new ArrayList<>();  if (getUninstallUserData().getUpdateRemoteReplication()) {    totalTime+=hmTime.get(UNCONFIGURING_REPLICATION);    steps.add(UNCONFIGURING_REPLICATION);  }  if (getUserData().getStopServer()) {    totalTime+=hmTime.get(STOPPING_SERVER);    steps.add(STOPPING_SERVER);  }  if (isWindowsServiceEnabled()) {    totalTime+=hmTime.get(DISABLING_WINDOWS_SERVICE);    steps.add(DISABLING_WINDOWS_SERVICE);  }  totalTime+=hmTime.get(DELETING_INSTALLATION_FILES);  steps.add(DELETING_INSTALLATION_FILES);  if (!getUninstallUserData().getExternalDbsToRemove().isEmpty()) {    totalTime+=hmTime.get(DELETING_EXTERNAL_DATABASE_FILES);    steps.add(DELETING_EXTERNAL_DATABASE_FILES);  }  if (!getUninstallUserData().getExternalLogsToRemove().isEmpty()) {    totalTime+=hmTime.get(DELETING_EXTERNAL_LOG_FILES);    steps.add(DELETING_EXTERNAL_LOG_FILES);  }  int cumulatedTime=0;  for (  UninstallProgressStep s : steps) {    Integer statusTime=hmTime.get(s);    hmRatio.put(s,(100 * cumulatedTime) / totalTime);    if (statusTime != null) {      cumulatedTime+=statusTime;    }  }  hmRatio.put(FINISHED_SUCCESSFULLY,100);  hmRatio.put(FINISHED_WITH_ERROR_ON_REMOTE,100);  hmRatio.put(FINISHED_WITH_ERROR,100);}  }
class C{  public int intValue(){  return intValue;}  }
class C{  public void startElement(String qName) throws SAXException {  if (m_state != null) {    m_state.resetState(getTransformer());  }  if (m_tracer != null)   super.fireStartElem(qName);}  }
class C{  public static synchronized SSLClientSessionCache usingDirectory(File directory) throws IOException {  FileClientSessionCache.Impl cache=caches.get(directory);  if (cache == null) {    cache=new FileClientSessionCache.Impl(directory);    caches.put(directory,cache);  }  return cache;}  }
class C{  public void reset() throws IOException {  bufHandler.reset();}  }
class C{  public PdfLayer(PdfDictionary layerDictionary){  super(layerDictionary);  ensureObjectIsAddedToDocument(layerDictionary);}  }
class C{  private String doLenientDetection(String httpContentType,XmlStreamReaderException ex) throws IOException {  if (httpContentType != null && httpContentType.startsWith("text/html")) {    httpContentType=httpContentType.substring("text/html".length());    httpContentType="text/xml" + httpContentType;    try {      return calculateHttpEncoding(httpContentType,ex.getBomEncoding(),ex.getXmlGuessEncoding(),ex.getXmlEncoding(),true);    } catch (    XmlStreamReaderException ex2) {      ex=ex2;    }  }  String encoding=ex.getXmlEncoding();  if (encoding == null) {    encoding=ex.getContentTypeEncoding();  }  if (encoding == null) {    encoding=defaultEncoding == null ? UTF_8 : defaultEncoding;  }  return encoding;}  }
class C{  public BasicPermission(String name,String actions){  super(name);  init(name);}  }
class C{  protected synchronized void minorRequirementChange(ChildState cs){  minorChanged=true;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlenc.CipherDataElement createCipherDataElement() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlenc.impl.CipherDataElementImpl();}  }
class C{  public void finish() throws IOException {  if (!this.wroteLastChunk) {    flushCache();    writeClosingChunk();    this.wroteLastChunk=true;  }}  }
class C{  SIPDialogErrorEvent(SIPDialog sourceDialog,int dialogErrorID){  super(sourceDialog);  errorID=dialogErrorID;}  }
class C{  public AVT(StylesheetHandler handler,String uri,String name,String rawName,String stringedValue,ElemTemplateElement owner) throws javax.xml.transform.TransformerException {  m_uri=uri;  m_name=name;  m_rawName=rawName;  StringTokenizer tokenizer=new StringTokenizer(stringedValue,"{}\"\'",true);  int nTokens=tokenizer.countTokens();  if (nTokens < 2) {    m_simpleString=stringedValue;  } else {    FastStringBuffer buffer=null;    FastStringBuffer exprBuffer=null;    if (USE_OBJECT_POOL) {      buffer=StringBufferPool.get();      exprBuffer=StringBufferPool.get();    } else {      buffer=new FastStringBuffer(6);      exprBuffer=new FastStringBuffer(6);    }    try {      m_parts=new Vector(nTokens + 1);      String t=null;      String lookahead=null;      String error=null;      while (tokenizer.hasMoreTokens()) {        if (lookahead != null) {          t=lookahead;          lookahead=null;        } else         t=tokenizer.nextToken();        if (t.length() == 1) {switch (t.charAt(0)) {case ('\"'):case ('\''):{              buffer.append(t);              break;            }case ('{'):{            try {              lookahead=tokenizer.nextToken();              if (lookahead.equals("{")) {                buffer.append(lookahead);                lookahead=null;                break;              } else {                if (buffer.length() > 0) {                  m_parts.addElement(new AVTPartSimple(buffer.toString()));                  buffer.setLength(0);                }                exprBuffer.setLength(0);                while (null != lookahead) {                  if (lookahead.length() == 1) {switch (lookahead.charAt(0)) {case '\'':case '\"':{                        exprBuffer.append(lookahead);                        String quote=lookahead;                        lookahead=tokenizer.nextToken();                        while (!lookahead.equals(quote)) {                          exprBuffer.append(lookahead);                          lookahead=tokenizer.nextToken();                        }                        exprBuffer.append(lookahead);                        lookahead=tokenizer.nextToken();                        break;                      }case '{':{                      error=XSLMessages.createMessage(XSLTErrorResources.ER_NO_CURLYBRACE,null);                      lookahead=null;                      break;                    }case '}':{                    buffer.setLength(0);                    XPath xpath=handler.createXPath(exprBuffer.toString(),owner);                    m_parts.addElement(new AVTPartXPath(xpath));                    lookahead=null;                    break;                  }default :{                  exprBuffer.append(lookahead);                  lookahead=tokenizer.nextToken();                }            }          } else {            exprBuffer.append(lookahead);            lookahead=tokenizer.nextToken();          }        }        if (error != null) {          break;        }      }      break;    } catch (    java.util.NoSuchElementException ex) {      error=XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_ATTRIBUTE_VALUE,new Object[]{name,stringedValue});      break;    }  }case ('}'):{  lookahead=tokenizer.nextToken();  if (lookahead.equals("}")) {    buffer.append(lookahead);    lookahead=null;  } else {    try {      handler.warn(XSLTErrorResources.WG_FOUND_CURLYBRACE,null);    } catch (    org.xml.sax.SAXException se) {      throw new TransformerException(se);    }    buffer.append("}");  }  break;}default :{buffer.append(t);}}} else {buffer.append(t);}if (null != error) {try {handler.warn(XSLTErrorResources.WG_ATTR_TEMPLATE,new Object[]{error});} catch (org.xml.sax.SAXException se) {throw new TransformerException(se);}break;}}if (buffer.length() > 0) {m_parts.addElement(new AVTPartSimple(buffer.toString()));buffer.setLength(0);}}  finally {if (USE_OBJECT_POOL) {StringBufferPool.free(buffer);StringBufferPool.free(exprBuffer);} else {buffer=null;exprBuffer=null;};}}if (null == m_parts && (null == m_simpleString)) {m_simpleString="";}}  }
class C{  @Override public boolean equals(Object otherRules){  if (this == otherRules) {    return true;  }  if (otherRules instanceof ZoneRules) {    ZoneRules other=(ZoneRules)otherRules;    return Arrays.equals(standardTransitions,other.standardTransitions) && Arrays.equals(standardOffsets,other.standardOffsets) && Arrays.equals(savingsInstantTransitions,other.savingsInstantTransitions)&& Arrays.equals(wallOffsets,other.wallOffsets)&& Arrays.equals(lastRules,other.lastRules);  }  return false;}  }
class C{  public Node renameNode(Node n,String namespaceURI,String name) throws DOMException {  return n;}  }
class C{  @SuppressWarnings({"unchecked"}) @Test(expectedExceptions=ProviderNotFoundException.class,expectedExceptionsMessageRegExp="^The requested provider 'unknown' .*") public void testCreateLDAPListenerFailureProviderNotFound() throws Exception {  Options options=defaultOptions().set(TRANSPORT_PROVIDER,"unknown");  LDAPListener listener=new LDAPListener(findFreeSocketAddress(),mock(ServerConnectionFactory.class),options);  listener.close();}  }
class C{  private final void dispatachChars(int node) throws org.xml.sax.SAXException {  m_dtm.dispatchCharactersEvents(node,m_contentHandler,false);}  }
class C{  public AuthenticationInfo(Entry authenticationEntry,boolean isRoot){  this.authenticationEntry=authenticationEntry;  this.isRoot=isRoot;  isAuthenticated=authenticationEntry != null;  mustChangePassword=false;  simpleBindDN=authenticationEntry != null ? authenticationEntry.getName() : null;  authorizationEntry=authenticationEntry;  saslMechanism=null;  authenticationType=AuthenticationType.INTERNAL;}  }
class C{  protected void deleteLeastUsedEntry(){  try {    poolLock.lock();    BasicPoolEntry entry=freeConnections.remove();    if (entry != null) {      deleteEntry(entry);    } else     if (log.isDebugEnabled()) {      log.debug("No free connection to delete.");    }  }  finally {    poolLock.unlock();  }}  }
class C{  public boolean toggleFlashLight(){  return videoClient.toggleFlashLight();}  }
class C{  public void replicaOfflineMsgSent(DN baseDN){  stopInstanceTimestamp.compareAndSet(0,System.currentTimeMillis());  replicaOfflineMsgs.add(baseDN);}  }
class C{  public static MouseListener remove(MouseListener l,MouseListener oldl){  return (MouseListener)removeInternal(l,oldl);}  }
class C{  public void addResourceRoutes(ResourceRouter rootRouter,ResourceRouter realmRouter){}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_namednodemapreturnlastitem.class,args);}  }
class C{  public Request _create_request(Context ctx,String operation,NVList arg_list,NamedValue result){  throw new org.omg.CORBA.NO_IMPLEMENT(reason);}  }
class C{  static int checkDesc(final String desc,final int start,final boolean canBeVoid){  if (desc == null || start >= desc.length()) {    throw new IllegalArgumentException("Invalid type descriptor (must not be null or empty)");  }  int index;switch (desc.charAt(start)) {case 'V':    if (canBeVoid) {      return start + 1;    } else {      throw new IllegalArgumentException("Invalid descriptor: " + desc);    }case 'Z':case 'C':case 'B':case 'S':case 'I':case 'F':case 'J':case 'D':  return start + 1;case '[':index=start + 1;while (index < desc.length() && desc.charAt(index) == '[') {++index;}if (index < desc.length()) {return checkDesc(desc,index,false);} else {throw new IllegalArgumentException("Invalid descriptor: " + desc);}case 'L':index=desc.indexOf(';',start);if (index == -1 || index - start < 2) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}try {checkInternalName(desc,start + 1,index,null);} catch (IllegalArgumentException unused) {throw new IllegalArgumentException("Invalid descriptor: " + desc);}return index + 1;default :throw new IllegalArgumentException("Invalid descriptor: " + desc);}}  }
class C{  @Override public void schemaChanged(String serviceName,String version){}  }
class C{  private boolean backupBackend(Backend<?> b,File backupLocation){  BackendCfg cfg=TaskUtils.getConfigEntry(b);  BackupDirectory backupDir;  if (backupLocation.exists()) {    String descriptorPath=backupLocation.getPath() + File.separator + BACKUP_DIRECTORY_DESCRIPTOR_FILE;    File descriptorFile=new File(descriptorPath);    if (descriptorFile.exists()) {      try {        backupDir=BackupDirectory.readBackupDirectoryDescriptor(backupLocation.getPath());        if (!backupDir.getConfigEntryDN().equals(cfg.dn())) {          logger.error(ERR_BACKUPDB_CANNOT_BACKUP_IN_DIRECTORY,b.getBackendID(),backupLocation.getPath(),backupDir.getConfigEntryDN().rdn().getFirstAVA().getAttributeValue());          return false;        }      } catch (      ConfigException ce) {        logger.error(ERR_BACKUPDB_CANNOT_PARSE_BACKUP_DESCRIPTOR,descriptorPath,ce.getMessage());        return false;      }catch (      Exception e) {        logger.error(ERR_BACKUPDB_CANNOT_PARSE_BACKUP_DESCRIPTOR,descriptorPath,getExceptionMessage(e));        return false;      }    } else {      backupDir=new BackupDirectory(backupLocation.getPath(),cfg.dn());    }  } else {    try {      backupLocation.mkdirs();    } catch (    Exception e) {      logger.error(ERR_BACKUPDB_CANNOT_CREATE_BACKUP_DIR,backupLocation.getPath(),getExceptionMessage(e));      return false;    }    backupDir=new BackupDirectory(backupLocation.getPath(),cfg.dn());  }  backupConfig=new BackupConfig(backupDir,backupID,incremental);  backupConfig.setCompressData(compress);  backupConfig.setEncryptData(encrypt);  backupConfig.setHashData(hash);  backupConfig.setSignHash(signHash);  backupConfig.setIncrementalBaseID(incrementalBase);  try {    DirectoryServer.notifyBackupBeginning(b,backupConfig);    b.createBackup(backupConfig);    DirectoryServer.notifyBackupEnded(b,backupConfig,true);  } catch (  DirectoryException de) {    DirectoryServer.notifyBackupEnded(b,backupConfig,false);    logger.error(ERR_BACKUPDB_ERROR_DURING_BACKUP,b.getBackendID(),de.getMessageObject());    return false;  }catch (  Exception e) {    DirectoryServer.notifyBackupEnded(b,backupConfig,false);    logger.error(ERR_BACKUPDB_ERROR_DURING_BACKUP,b.getBackendID(),getExceptionMessage(e));    return false;  }  return true;}  }
class C{  public AMAuthenticationAuditEventBuilder principal(String principal){  if (isNotEmpty(principal)) {    principal(singletonList(principal));  }  return this;}  }
class C{  public void uninstallUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).uninstallUI(a);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap notations;  DocumentType docType;  Node retval;  Element elem;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    notations=docType.getNotations();    assertNotNull("notationsNotNull",notations);    elem=doc.createElement("br");    try {      retval=notations.setNamedItem(elem);      fail("throw_HIER_OR_NO_MOD_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 3:        break;case 7:      break;default :    throw ex;}}}}  }
class C{  public static StringArgument baseDNArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_BASEDN).shortIdentifier(OPTION_SHORT_BASEDN).description(INFO_ARGUMENT_DESCRIPTION_BASEDN.get()).multiValued().valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get()).buildArgument();}  }
class C{  public void deleteOnQuery(final TokenFilter filter) throws CoreTokenException, IllegalArgumentException {  filter.addReturnAttribute(CoreTokenField.TOKEN_ID);  ResultHandler<Collection<PartialToken>,CoreTokenException> handler=handlerFactory.getDeleteOnQueryHandler();  try {    attributeQueryWithHandler(filter,handler);  } catch (  CoreTokenException e) {    throw new QueryFailedException(filter,e);  }}  }
class C{  public R visitClass(ClassPropertyDefinition pd,String v,P p){  return visitUnknown(pd,v,p);}  }
class C{  public void handleRequest(RequestContext rc) throws CLIException {  super.handleRequest(rc);  ldapLogin();  String serviceName=getStringOptionValue(IArgument.SERVICE_NAME);  ServiceSchemaManager ssm=getServiceSchemaManager();  IOutput outputWriter=getOutputWriter();  String[] params={serviceName};  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"ATTEMPT_GET_SERVICE_REVISION_NUMBER",params);  String revisionNumber=Integer.toString(ssm.getRevisionNumber());  String[] args={serviceName,revisionNumber};  outputWriter.printlnMessage(MessageFormat.format(getResourceString("service-schema-get-revision-number-succeed"),(Object[])args));  writeLog(LogWriter.LOG_ACCESS,Level.INFO,"SUCCEED_GET_SERVICE_REVISION_NUMBER",params);}  }
class C{  protected void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, java.io.IOException {  processRequest(request,response);}  }
class C{  private void dropTables(SQLiteDatabase db){  db.execSQL(RegisteredAppDbAdapter.DATABASE_DROP);  db.execSQL(RegisteredEventDbAdapter.DATABASE_DROP);  db.execSQL(RegisteredEventAttributeDbAdapter.DATABASE_DROP);  db.execSQL(RegisteredActionDbAdapter.DATABASE_DROP);  db.execSQL(RegisteredActionParameterDbAdapter.DATABASE_DROP);  db.execSQL(DataFilterDbAdapter.DATABASE_DROP);  db.execSQL(DataTypeDbAdapter.DATABASE_DROP);  db.execSQL(ExternalAttributeDbAdapter.DATABASE_DROP);  db.execSQL(RuleDbAdapter.DATABASE_DROP);  db.execSQL(RuleFilterDbAdapter.DATABASE_DROP);  db.execSQL(RuleActionDbAdapter.DATABASE_DROP);  db.execSQL(RuleActionParameterDbAdapter.DATABASE_DROP);  db.execSQL(LogEventDbAdapter.DATABASE_DROP);  db.execSQL(LogActionDbAdapter.DATABASE_DROP);  db.execSQL(LogGeneralDbAdapter.DATABASE_DROP);  db.execSQL(FailedActionsDbAdapter.DATABASE_DROP);  db.execSQL(FailedActionParameterDbAdapter.DATABASE_DROP);}  }
class C{  public SIPDialog(SIPClientTransaction subscribeTx,SIPTransaction notifyST){  this(notifyST);  serverTransactionFlag=false;  lastTransaction=subscribeTx;  storeFirstTransactionInfo(this,subscribeTx);  terminateOnBye=false;  localSequenceNumber=subscribeTx.getCSeq();  SIPRequest not=(SIPRequest)notifyST.getRequest();  remoteSequenceNumber=not.getCSeq().getSeqNumber();  setDialogId(not.getDialogId(true));  setLocalTag(not.getToTag());  setRemoteTag(not.getFromTag());  setLastResponse(subscribeTx,subscribeTx.getLastResponse());  localParty=not.getTo().getAddress();  remoteParty=not.getFrom().getAddress();  addRoute(not);  setState(CONFIRMED_STATE);}  }
class C{  private int checkScale(long val){  int asInt=(int)val;  if (asInt != val) {    asInt=val > Integer.MAX_VALUE ? Integer.MAX_VALUE : Integer.MIN_VALUE;    BigInteger b;    if (intCompact != 0 && ((b=intVal) == null || b.signum() != 0))     throw new ArithmeticException(asInt > 0 ? "Underflow" : "Overflow");  }  return asInt;}  }
class C{  @Override public void onOptionsMenuClosed(final Menu menu){  super.onOptionsMenuClosed(menu);}  }
class C{  HeapImpl(final HeapImpl parent){  this(parent,Name.of("anonymous"));}  }
class C{  public boolean isWriteable(){  return (this.writeable);}  }
class C{  public Handshake handshake(){  return handshake;}  }
class C{  public IllformedLocaleException(String message){  super(message);}  }
class C{  public static FontProgram createFont(byte[] fontProgram) throws java.io.IOException {  return createFont(null,fontProgram,DEFAULT_CACHED);}  }
class C{  private int readFrameType(final Object[] frame,final int index,int v,final char[] buf,final Label[] labels){  int type=b[v++] & 0xFF;switch (type) {case 0:    frame[index]=Opcodes.TOP;  break;case 1:frame[index]=Opcodes.INTEGER;break;case 2:frame[index]=Opcodes.FLOAT;break;case 3:frame[index]=Opcodes.DOUBLE;break;case 4:frame[index]=Opcodes.LONG;break;case 5:frame[index]=Opcodes.NULL;break;case 6:frame[index]=Opcodes.UNINITIALIZED_THIS;break;case 7:frame[index]=readClass(v,buf);v+=2;break;default :frame[index]=readLabel(readUnsignedShort(v),labels);v+=2;}return v;}  }
class C{  public com.sun.identity.liberty.ws.authnsvc.jaxb.PasswordTransformsType createPasswordTransformsType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.liberty.ws.authnsvc.jaxb.impl.PasswordTransformsTypeImpl();}  }
class C{  public static GetConnectionIDExtendedResult newResult(final ResultCode resultCode){  Reject.ifNull(resultCode);  return new GetConnectionIDExtendedResult(resultCode);}  }
class C{  public org.w3c.dom.Element signWithSAMLToken(org.w3c.dom.Document doc,java.security.Key key,boolean symmetricKey,java.security.cert.Certificate sigingCert,java.security.cert.Certificate encryptCert,java.lang.String assertionID,java.lang.String algorithm,java.util.List ids) throws XMLSignatureException {  return null;}  }
class C{  @Override protected JComponent createEditor(){  JComponent editor=spinner.getEditor();  editor.setName("Spinner.editor");  updateEditorAlignment(editor);  return editor;}  }
class C{  @Override public void closeInbound() throws SSLException {  if (logger != null) {    logger.println("closeInbound() " + isInboundDone);  }  if (isInboundDone) {    return;  }  isInboundDone=true;  engine_was_closed=true;  if (handshake_started) {    if (!close_notify_was_received) {      if (session != null) {        session.invalidate();      }      alertProtocol.alert(AlertProtocol.FATAL,AlertProtocol.INTERNAL_ERROR);      throw new SSLException("Inbound is closed before close_notify " + "alert has been received.");    }  } else {    shutdown();  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document docImp;  Node textImport;  Node textToImport;  String nodeValue;  doc=(Document)load("staffNS",true);  docImp=(Document)load("staffNS",true);  textToImport=doc.createTextNode("Document.importNode test for a TEXT_NODE");  textImport=doc.importNode(textToImport,true);  nodeValue=textImport.getNodeValue();  assertEquals("documentimportnode15","Document.importNode test for a TEXT_NODE",nodeValue);}  }
class C{  private boolean mustAdd(AttributeType attr){  String f=filter.getText().trim();  if (f.length() > 0) {    Object filterType=filterAttribute.getSelectedItem();    if (FILTER_NAME.equals(filterType)) {      return mustAddAttributeName(attr,f);    } else     if (FILTER_TYPE.equals(filterType)) {      return mustAddType(f,StandardAttributePanel.getTypeValue(attr));    } else {      return false;    }  }  return true;}  }
class C{  public ID3v1Tag(RandomAccessFile file) throws TagNotFoundException, IOException {  this(file,"");}  }
class C{  public String toString(){  String sEncoding="";  if (getEncoding() != null) {    sEncoding=getEncoding().toString() + " ";  }  String sSampleRate;  if (getSampleRate() == (float)AudioSystem.NOT_SPECIFIED) {    sSampleRate="unknown sample rate, ";  } else {    sSampleRate="" + getSampleRate() + " Hz, ";  }  String sSampleSizeInBits;  if (getSampleSizeInBits() == (float)AudioSystem.NOT_SPECIFIED) {    sSampleSizeInBits="unknown bits per sample, ";  } else {    sSampleSizeInBits="" + getSampleSizeInBits() + " bit, ";  }  String sChannels;  if (getChannels() == 1) {    sChannels="mono, ";  } else   if (getChannels() == 2) {    sChannels="stereo, ";  } else {    if (getChannels() == AudioSystem.NOT_SPECIFIED) {      sChannels=" unknown number of channels, ";    } else {      sChannels="" + getChannels() + " channels, ";    }  }  String sFrameSize;  if (getFrameSize() == (float)AudioSystem.NOT_SPECIFIED) {    sFrameSize="unknown frame size, ";  } else {    sFrameSize="" + getFrameSize() + " bytes/frame, ";  }  String sFrameRate="";  if (Math.abs(getSampleRate() - getFrameRate()) > 0.00001) {    if (getFrameRate() == (float)AudioSystem.NOT_SPECIFIED) {      sFrameRate="unknown frame rate, ";    } else {      sFrameRate=getFrameRate() + " frames/second, ";    }  }  String sEndian="";  if ((getEncoding().equals(Encoding.PCM_SIGNED) || getEncoding().equals(Encoding.PCM_UNSIGNED)) && ((getSampleSizeInBits() > 8) || (getSampleSizeInBits() == AudioSystem.NOT_SPECIFIED))) {    if (isBigEndian()) {      sEndian="big-endian";    } else {      sEndian="little-endian";    }  }  return sEncoding + sSampleRate + sSampleSizeInBits+ sChannels+ sFrameSize+ sFrameRate+ sEndian;}  }
class C{  public ByteStringBuilder appendUtf8(final String s){  if (s == null) {    return this;  }  final int len=s.length();  ensureAdditionalCapacity(len);  for (int i=0; i < len; i++) {    final char c=s.charAt(i);    final byte b=(byte)(c & 0x0000007F);    if (c == b) {      buffer[this.length + i]=b;    } else {      try {        return appendBytes(s.getBytes("UTF-8"));      } catch (      final UnsupportedEncodingException e) {        throw new RuntimeException("Unable to encode String '" + s + "' to UTF-8 bytes",e);      }    }  }  this.length+=len;  return this;}  }
class C{  private InvokerBytecodeGenerator(String className,String invokerName,MethodType invokerType){  this(null,invokerType.parameterCount(),className,invokerName,invokerType);  localTypes[localTypes.length - 1]=V_TYPE;  for (int i=0; i < localsMap.length; i++) {    localsMap[i]=invokerType.parameterSlotCount() - invokerType.parameterSlotDepth(i);    if (i < invokerType.parameterCount())     localTypes[i]=basicType(invokerType.parameterType(i));  }}  }
class C{  public void endDocument() throws SAXException {  if (contentHandler != null) {    contentHandler.endDocument();  }}  }
class C{  public static Cookie newCookie(String name,String value,String path){  return newCookie(name,value,defAge,path,null);}  }
class C{  @Override public synchronized int read(){  return pos < count ? buffer.charAt(pos++) & 0xFF : -1;}  }
class C{  public static RequestAuthnContext parseURLEncodedRequest(HttpServletRequest request,int minorVersion) throws FSMsgException {  RequestAuthnContext retAuthnContext=new RequestAuthnContext();  String strAuthnContextClassRef=request.getParameter("AuthnContextClassRef");  if (strAuthnContextClassRef != null) {    StringTokenizer st=new StringTokenizer(strAuthnContextClassRef);    while (st.hasMoreTokens()) {      if (retAuthnContext.authnContextClassRefList == null) {        retAuthnContext.authnContextClassRefList=new ArrayList();      }      retAuthnContext.authnContextClassRefList.add(st.nextToken());    }  }  String strAuthnContextStatementRef=request.getParameter("AuthnContextStatementRef");  if (strAuthnContextStatementRef != null) {    StringTokenizer st=new StringTokenizer(strAuthnContextStatementRef);    while (st.hasMoreTokens()) {      if (retAuthnContext.authnContextStatementRefList == null) {        retAuthnContext.authnContextStatementRefList=new ArrayList();      }      retAuthnContext.authnContextStatementRefList.add(st.nextToken());    }  }  String strAuthnContextComparison=request.getParameter("AuthnContextComparison");  if (strAuthnContextComparison != null) {    retAuthnContext.setAuthnContextComparison(strAuthnContextComparison);  }  retAuthnContext.setMinorVersion(minorVersion);  return retAuthnContext;}  }
class C{  protected void tearDown(){  try {    pbr.close();  } catch (  IOException e) {  }}  }
class C{  public void columnSelectionChanged(ListSelectionEvent e){}  }
class C{  public TRANSACTION_REQUIRED(){  this("");}  }
class C{  public void reset(){  m_next=0;}  }
class C{  public void put(String uri) throws IOException {  put(uri,null,null);}  }
class C{  public void paintTreeCellFocus(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  public void testCase05_PowerUpPerformance() throws Exception {  if (mButtonDecrease.isEnabled()) {    makeFMPowerDown();  }  long startTime=System.currentTimeMillis();  Log.i(TAG,"[Performance test][FmRadio] power up start [" + startTime + "]");  mInstrumentation.invokeMenuActionSync(mFmRadioActivity,R.id.fm_power,0);  sleep(WAIT_UI_STATE_CHANGE);}  }
class C{  void clear(){  offset=intLen=0;  for (int index=0, n=value.length; index < n; index++)   value[index]=0;}  }
class C{  public void unlock(String username){  registerAuthSuccess(username);}  }
class C{  public static Builder createBuilder(AbstractManagedObjectDefinition<?,?> d,String propertyName){  return new Builder(d,propertyName);}  }
class C{  public static boolean checkSignatureValid(String xmlString,String idAttribute,String issuer){  String certAlias=null;  boolean valid=true;  Map entries=(Map)SAMLServiceManager.getAttribute(SAMLConstants.PARTNER_URLS);  if (entries != null) {    SAMLServiceManager.SOAPEntry srcSite=(SAMLServiceManager.SOAPEntry)entries.get(issuer);    if (srcSite != null) {      certAlias=srcSite.getCertAlias();    }  }  try {    SAMLUtils.debug.message("SAMLUtils.checkSignatureValid for certAlias {}",certAlias);    XMLSignatureManager manager=XMLSignatureManager.getInstance();    valid=manager.verifyXMLSignature(xmlString,idAttribute,certAlias);  } catch (  Exception e) {    SAMLUtils.debug.warning("SAMLUtils.checkSignatureValid:" + " signature validation exception",e);    valid=false;  }  if (!valid) {    if (SAMLUtils.debug.messageEnabled()) {      SAMLUtils.debug.message("SAMLUtils.checkSignatureValid:" + " Couldn't verify signature.");    }  }  return valid;}  }
class C{  public Axial(PdfColorSpace cs,float x0,float y0,float[] color0,float x1,float y1,float[] color1,boolean[] extend){  this(cs,x0,y0,color0,x1,y1,color1);  if (extend == null || extend.length != 2)   throw new IllegalArgumentException("extend");  setExtend(extend[0],extend[1]);}  }
class C{  public static StringArgument proxyAuthIdArgument() throws ArgumentException {  return StringArgument.builder(OPTION_LONG_PROXYAUTHID).shortIdentifier(OPTION_SHORT_PROXYAUTHID).description(INFO_DESCRIPTION_PROXYAUTHZID.get()).valuePlaceholder(INFO_PROXYAUTHID_PLACEHOLDER.get()).buildArgument();}  }
class C{  public DTMIterator asNodeIterator(){  throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_RTF_NOT_SUPPORTED_XRTREEFRAGSELECTWRAPPER,null));}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  Element entElement;  Node attrNode;  Text textNode;  Node removedNode;  Node newChild;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  attrNode=entElement.getAttributeNode("domestic");  textNode=(Text)attrNode.getFirstChild();  assertNotNull("attrChildNotNull",textNode);  newChild=doc.createTextNode("Yesterday");{    boolean success=false;    try {      removedNode=attrNode.replaceChild(newChild,textNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setValue_throws_NO_MODIFICATION_ERR",success);  }}  }
class C{  public SubjectConfirmationData createSubjectConfirmationData(String xml) throws SAML2Exception {  Object obj=SAML2SDKUtils.getObjectInstance(SAML2SDKUtils.SUBJECT_CONFIRMATION_DATA,xml);  if (obj == null) {    return new SubjectConfirmationDataImpl(xml);  } else {    return (SubjectConfirmationData)obj;  }}  }
class C{  protected Object createSelfTimingMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  selfPolicyTiming=new SelfTimingImpl(this);  return selfPolicyTiming;}  }
class C{  public void testRoundMathContextHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  int precision=15;  RoundingMode rm=RoundingMode.HALF_UP;  MathContext mc=new MathContext(precision,rm);  String res="3736186567876.88";  int resScale=2;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal result=aNumber.round(mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",resScale,result.scale());}  }
class C{  public static java.awt.Graphics2D CREATEGRAPHICS(Object g,long iid) throws IOException {  ThreadTracer tracer=getActiveThreadTracer();  if (tracer != null)   tracer.stop();  java.awt.Graphics2D newG=(java.awt.Graphics2D)((java.awt.Graphics)g).create();  if (tracer != null)   tracer.start();  if (tracer == null)   return newG;  tracer.header(iid);  DataOutputStream trace=tracer.trace;  trace.writeLong(getUniqueObjectID(g));  trace.writeLong(getUniqueObjectID(newG));  return newG;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(namednodemapsetnameditemns02.class,args);}  }
class C{  public ServletRequestWrapper(ServletRequest request){  if (request == null) {    throw new IllegalArgumentException("Request cannot be null");  }  this.request=request;}  }
class C{  protected OCommandSQL createQueryObject(String queryString){  return new OCommandSQL(queryString);}  }
class C{  protected PropertyChangeListener createRolloverListener(){  return null;}  }
class C{  public Element signXMLUsingKeyPass(Document doc,String certAlias,String encryptedKeyPass,String algorithm,String idAttrName,String id,boolean includeCert,String xpath) throws XMLSignatureException {  return sp.signXMLUsingKeyPass(doc,certAlias,encryptedKeyPass,algorithm,idAttrName,id,includeCert,xpath);}  }
class C{  private static int determineType(byte[] bytes){  int offset=0;  if (bytes.length >= 3 && (bytes[0] & 0xFF) == 0xEF && (bytes[1] & 0xFF) == 0xBB && (bytes[2] & 0xFF) == 0xBF) {    offset+=3;  }  while (offset < bytes.length && bytes[offset] == ' ' || bytes[offset] == '\t' || bytes[offset] == '\r' || bytes[offset] == '\n' || bytes[offset] == '\f') {    offset++;  }  return determineType(new String(bytes,offset,Math.min(8,bytes.length - offset)));}  }
class C{  protected void createDomain(SSOToken token,Guid orgGuid,String domainName,AttrSet attrSet) throws AMException {  if (DCTREE_START_DN == null) {    throw new AMException(AMSDKBundle.getString("355"),"355");  }  if ((domainName != null) && (!domainName.equals(""))) {    try {      DomainComponentTree dcTree=new DomainComponentTree(token,new Guid(DCTREE_START_DN));      dcTree.addDomain(domainName);      dcTree.setDomainMapping(domainName,orgGuid);      String status=attrSet.getValue(INET_DOMAIN_STATUS_ATTR);      if (status != null) {        dcTree.setDomainStatus(domainName,status);      }    } catch (    InvalidDCRootException ie) {      debug.error("DCTree.createDomain(): ",ie);      throw new AMException(AMSDKBundle.getString("343"),"343");    }catch (    UMSException ue) {      debug.error("DCTree.createDomain(): ",ue);      throw new AMException(AMSDKBundle.getString("344"),"344");    }  }}  }
class C{  private Compiler(){}  }
class C{  public JMenuItem(String text){  this(text,(Icon)null);}  }
class C{  public static Rectangle[] computeDifference(Rectangle rectA,Rectangle rectB){  if (rectB == null || !rectA.intersects(rectB) || isRectangleContainingRectangle(rectB,rectA)) {    return new Rectangle[0];  }  Rectangle t=new Rectangle();  Rectangle a=null, b=null, c=null, d=null;  Rectangle result[];  int rectCount=0;  if (isRectangleContainingRectangle(rectA,rectB)) {    t.x=rectA.x;    t.y=rectA.y;    t.width=rectB.x - rectA.x;    t.height=rectA.height;    if (t.width > 0 && t.height > 0) {      a=new Rectangle(t);      rectCount++;    }    t.x=rectB.x;    t.y=rectA.y;    t.width=rectB.width;    t.height=rectB.y - rectA.y;    if (t.width > 0 && t.height > 0) {      b=new Rectangle(t);      rectCount++;    }    t.x=rectB.x;    t.y=rectB.y + rectB.height;    t.width=rectB.width;    t.height=rectA.y + rectA.height - (rectB.y + rectB.height);    if (t.width > 0 && t.height > 0) {      c=new Rectangle(t);      rectCount++;    }    t.x=rectB.x + rectB.width;    t.y=rectA.y;    t.width=rectA.x + rectA.width - (rectB.x + rectB.width);    t.height=rectA.height;    if (t.width > 0 && t.height > 0) {      d=new Rectangle(t);      rectCount++;    }  } else {    if (rectB.x <= rectA.x && rectB.y <= rectA.y) {      if ((rectB.x + rectB.width) > (rectA.x + rectA.width)) {        t.x=rectA.x;        t.y=rectB.y + rectB.height;        t.width=rectA.width;        t.height=rectA.y + rectA.height - (rectB.y + rectB.height);        if (t.width > 0 && t.height > 0) {          a=t;          rectCount++;        }      } else       if ((rectB.y + rectB.height) > (rectA.y + rectA.height)) {        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectA.height);        if (t.width > 0 && t.height > 0) {          a=t;          rectCount++;        }      } else {        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),(rectB.y + rectB.height) - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      }    } else     if (rectB.x <= rectA.x && (rectB.y + rectB.height) >= (rectA.y + rectA.height)) {      if ((rectB.x + rectB.width) > (rectA.x + rectA.width)) {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=t;          rectCount++;        }      } else {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectB.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),(rectA.y + rectA.height) - rectB.y);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      }    } else     if (rectB.x <= rectA.x) {      if ((rectB.x + rectB.width) >= (rectA.x + rectA.width)) {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      } else {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectB.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectB.height);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          c=new Rectangle(t);          rectCount++;        }      }    } else     if (rectB.x <= (rectA.x + rectA.width) && (rectB.x + rectB.width) > (rectA.x + rectA.width)) {      if (rectB.y <= rectA.y && (rectB.y + rectB.height) > (rectA.y + rectA.height)) {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,rectA.height);        if (t.width > 0 && t.height > 0) {          a=t;          rectCount++;        }      } else       if (rectB.y <= rectA.y) {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,(rectB.y + rectB.height) - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      } else       if ((rectB.y + rectB.height) > (rectA.y + rectA.height)) {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,rectB.y,rectB.x - rectA.x,(rectA.y + rectA.height) - rectB.y);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      } else {        t.setBounds(rectA.x,rectA.y,rectA.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,rectB.y,rectB.x - rectA.x,rectB.height);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }        t.setBounds(rectA.x,(rectB.y + rectB.height),rectA.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          c=new Rectangle(t);          rectCount++;        }      }    } else     if (rectB.x >= rectA.x && (rectB.x + rectB.width) <= (rectA.x + rectA.width)) {      if (rectB.y <= rectA.y && (rectB.y + rectB.height) > (rectA.y + rectA.height)) {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,rectA.height);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectA.height);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }      } else       if (rectB.y <= rectA.y) {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,rectA.height);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectB.x,(rectB.y + rectB.height),rectB.width,(rectA.y + rectA.height) - (rectB.y + rectB.height));        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectA.height);        if (t.width > 0 && t.height > 0) {          c=new Rectangle(t);          rectCount++;        }      } else {        t.setBounds(rectA.x,rectA.y,rectB.x - rectA.x,rectA.height);        if (t.width > 0 && t.height > 0) {          a=new Rectangle(t);          rectCount++;        }        t.setBounds(rectB.x,rectA.y,rectB.width,rectB.y - rectA.y);        if (t.width > 0 && t.height > 0) {          b=new Rectangle(t);          rectCount++;        }        t.setBounds((rectB.x + rectB.width),rectA.y,(rectA.x + rectA.width) - (rectB.x + rectB.width),rectA.height);        if (t.width > 0 && t.height > 0) {          c=new Rectangle(t);          rectCount++;        }      }    }  }  result=new Rectangle[rectCount];  rectCount=0;  if (a != null)   result[rectCount++]=a;  if (b != null)   result[rectCount++]=b;  if (c != null)   result[rectCount++]=c;  if (d != null)   result[rectCount++]=d;  return result;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder(getClass().getName());  sb.append("[name=").append(this.name);  appendTo(sb,"displayName",this.displayName);  appendTo(sb,"shortDescription",this.shortDescription);  appendTo(sb,"preferred",this.preferred);  appendTo(sb,"hidden",this.hidden);  appendTo(sb,"expert",this.expert);  if ((this.table != null) && !this.table.isEmpty()) {    sb.append("; values={");    for (    Entry<String,Object> entry : this.table.entrySet()) {      sb.append(entry.getKey()).append("=").append(entry.getValue()).append("; ");    }    sb.setLength(sb.length() - 2);    sb.append("}");  }  appendTo(sb);  return sb.append("]").toString();}  }
class C{  protected void stop(){  if (engine.getLogger().isDebugEnabled())   engine.getLogger().debug(sm.getString("engineConfig.stop"));}  }
class C{  @BeforeClass public static void initClass(){  scenario=Scenarios.s5_several_branches();  if (Misc.isDebugMode()) {    System.out.println("git repository created under: " + scenario.getRepositoryLocation());  }}  }
class C{  private boolean tryKillThisWorkerThread(TraditionalWorkerThread workerThread){  queueReadLock.unlock();  queueWriteLock.lock();  try {    if (shutdownRequested) {      return true;    }    int currentThreads=workerThreads.size();    if (currentThreads > numWorkerThreads) {      if (workerThreads.remove(Thread.currentThread())) {        currentThreads--;      }      if (currentThreads <= numWorkerThreads) {        killThreads=false;      }      workerThread.setStoppedByReducedThreadNumber();      return true;    }  }  finally {    queueWriteLock.unlock();    queueReadLock.lock();    if (shutdownRequested) {      return true;    }  }  return false;}  }
class C{  final void onDetach(){  DraweeSpan[] images=getImages();  for (  DraweeSpan image : images) {    Drawable drawable=image.getDrawable();    if (drawable != null) {      unscheduleDrawable(drawable);    }    image.onDetach();  }}  }
class C{  private static String makeInstalledLAFKey(String laf,String attr){  return "swing.installedlaf." + laf + "."+ attr;}  }
class C{  private void createAndRegisterGroup(Entry entry){  for (  Group<?> groupImplementation : groupImplementations.values()) {    try {      if (groupImplementation.isGroupDefinition(entry)) {        Group<?> groupInstance=groupImplementation.newInstance(serverContext,entry);        lock.writeLock().lock();        try {          groupInstances.put(entry.getName(),groupInstance);          refreshToken++;        }  finally {          lock.writeLock().unlock();        }      }    } catch (    DirectoryException e) {      logger.traceException(e);    }  }}  }
class C{  private void close(){  IOUtils.closeIfNotNull(debugWriter);  this.debugWriter=null;  this.currentFile=null;}  }
class C{  public static void crossFadeViews(View showView,View hideView){  crossFadeViews(showView,hideView,ANIMATION_DURATION_SHORT);}  }
class C{  @SuppressWarnings("unused") static <T>Promise<Collection<T>> blockingPromiseCollection(Class<T> componentType,final Duration duration){  return new BlockingPromise<>(duration);}  }
class C{  @Override public void flush() throws IOException {  out.flush();}  }
class C{  public AMPreCallBackException(String msg,String errorCode,UMSException ue){  super(msg,errorCode,ue);}  }
class C{  public boolean disableConnectionHandlers(){  return isPropertyTrue(PROPERTY_DISABLE_CONNECTION_HANDLERS);}  }
class C{  public static PublicKeySelector fromString(String type){  if (type != null) {    for (    PublicKeySelector keySelector : PublicKeySelector.values()) {      if (type.equalsIgnoreCase(keySelector.type)) {        return keySelector;      }    }  }  return null;}  }
class C{  protected AccessibleJComponent(){  super();}  }
class C{  public void update(Graphics g){  paint(g);}  }
class C{  private static void solve_l2r_l1l2_svr(Problem prob,double[] w,Parameter param){  int l=prob.l;  double C=param.C;  double p=param.p;  int w_size=prob.n;  double eps=param.eps;  int i, s, iter=0;  int max_iter=param.getMaxIters();  int active_size=l;  int[] index=new int[l];  double d, G, H;  double Gmax_old=Double.POSITIVE_INFINITY;  double Gmax_new, Gnorm1_new;  double Gnorm1_init=-1.0;  double[] beta=new double[l];  double[] QD=new double[l];  double[] y=prob.y;  double[] lambda=new double[]{0.5 / C};  double[] upper_bound=new double[]{Double.POSITIVE_INFINITY};  if (param.solverType == SolverType.L2R_L1LOSS_SVR_DUAL) {    lambda[0]=0;    upper_bound[0]=C;  }  for (i=0; i < l; i++)   beta[i]=0;  for (i=0; i < w_size; i++)   w[i]=0;  for (i=0; i < l; i++) {    QD[i]=0;    for (    Feature xi : prob.x[i]) {      double val=xi.getValue();      QD[i]+=val * val;      w[xi.getIndex() - 1]+=beta[i] * val;    }    index[i]=i;  }  while (iter < max_iter) {    Gmax_new=0;    Gnorm1_new=0;    for (i=0; i < active_size; i++) {      int j=i + random.nextInt(active_size - i);      swap(index,i,j);    }    for (s=0; s < active_size; s++) {      i=index[s];      G=-y[i] + lambda[GETI_SVR(i)] * beta[i];      H=QD[i] + lambda[GETI_SVR(i)];      for (      Feature xi : prob.x[i]) {        int ind=xi.getIndex() - 1;        double val=xi.getValue();        G+=val * w[ind];      }      double Gp=G + p;      double Gn=G - p;      double violation=0;      if (beta[i] == 0) {        if (Gp < 0)         violation=-Gp; else         if (Gn > 0)         violation=Gn; else         if (Gp > Gmax_old && Gn < -Gmax_old) {          active_size--;          swap(index,s,active_size);          s--;          continue;        }      } else       if (beta[i] >= upper_bound[GETI_SVR(i)]) {        if (Gp > 0)         violation=Gp; else         if (Gp < -Gmax_old) {          active_size--;          swap(index,s,active_size);          s--;          continue;        }      } else       if (beta[i] <= -upper_bound[GETI_SVR(i)]) {        if (Gn < 0)         violation=-Gn; else         if (Gn > Gmax_old) {          active_size--;          swap(index,s,active_size);          s--;          continue;        }      } else       if (beta[i] > 0)       violation=Math.abs(Gp); else       violation=Math.abs(Gn);      Gmax_new=Math.max(Gmax_new,violation);      Gnorm1_new+=violation;      if (Gp < H * beta[i])       d=-Gp / H; else       if (Gn > H * beta[i])       d=-Gn / H; else       d=-beta[i];      if (Math.abs(d) < 1.0e-12)       continue;      double beta_old=beta[i];      beta[i]=Math.min(Math.max(beta[i] + d,-upper_bound[GETI_SVR(i)]),upper_bound[GETI_SVR(i)]);      d=beta[i] - beta_old;      if (d != 0) {        for (        Feature xi : prob.x[i]) {          w[xi.getIndex() - 1]+=d * xi.getValue();        }      }    }    if (iter == 0)     Gnorm1_init=Gnorm1_new;    iter++;    if (iter % 10 == 0)     info(".");    if (Gnorm1_new <= eps * Gnorm1_init) {      if (active_size == l)       break; else {        active_size=l;        info("*");        Gmax_old=Double.POSITIVE_INFINITY;        continue;      }    }    Gmax_old=Gmax_new;  }  info("%noptimization finished, #iter = %d%n",iter);  if (iter >= max_iter)   info("%nWARNING: reaching max number of iterations%nUsing -s 11 may be faster%n%n");  double v=0;  int nSV=0;  for (i=0; i < w_size; i++)   v+=w[i] * w[i];  v=0.5 * v;  for (i=0; i < l; i++) {    v+=p * Math.abs(beta[i]) - y[i] * beta[i] + 0.5 * lambda[GETI_SVR(i)] * beta[i]* beta[i];    if (beta[i] != 0)     nSV++;  }  info("Objective value = %g%n",v);  info("nSV = %d%n",nSV);}  }
class C{  private void ensureOpen() throws IOException {  if (out == null)   throw new IOException("Stream closed");}  }
class C{  public String toString(){  return getClass().getName() + "[dropPoint=" + getDropPoint()+ ","+ "path="+ path+ ","+ "childIndex="+ index+ "]";}  }
class C{  public synchronized void mouseMove(int x,int y){  peer.mouseMove(x,y);  afterEvent();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childNodes;  Node childNode;  int childType;  String childName;  java.util.List elementNames=new java.util.ArrayList();  java.util.List expectedElementNames=new java.util.ArrayList();  expectedElementNames.add("employeeId");  expectedElementNames.add("name");  expectedElementNames.add("position");  expectedElementNames.add("salary");  expectedElementNames.add("gender");  expectedElementNames.add("address");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  employeeNode=elementList.item(1);  childNodes=employeeNode.getChildNodes();  for (int indexN1006C=0; indexN1006C < childNodes.getLength(); indexN1006C++) {    childNode=(Node)childNodes.item(indexN1006C);    childType=(int)childNode.getNodeType();    if (equals(1,childType)) {      childName=childNode.getNodeName();      elementNames.add(childName);    }  }  assertEquals("elementNames",expectedElementNames,elementNames);}  }
class C{  public Object clone(){  SampleResponseProvider theClone=null;  try {    theClone=(SampleResponseProvider)super.clone();  } catch (  CloneNotSupportedException e) {    throw new InternalError();  }  if (properties != null) {    theClone.properties=new HashMap();    Iterator iter=properties.keySet().iterator();    while (iter.hasNext()) {      Object obj=iter.next();      Set values=new HashSet();      values.addAll((Set)properties.get(obj));      theClone.properties.put(obj,values);    }  }  return theClone;}  }
class C{  private int computeFields(int fieldMask,int tzMask){  int zoneOffset=0;  TimeZone tz=getZone();  if (zoneOffsets == null) {    zoneOffsets=new int[2];  }  if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {    if (tz instanceof ZoneInfo) {      zoneOffset=((ZoneInfo)tz).getOffsets(time,zoneOffsets);    } else {      zoneOffset=tz.getOffset(time);      zoneOffsets[0]=tz.getRawOffset();      zoneOffsets[1]=zoneOffset - zoneOffsets[0];    }  }  if (tzMask != 0) {    if (isFieldSet(tzMask,ZONE_OFFSET)) {      zoneOffsets[0]=internalGet(ZONE_OFFSET);    }    if (isFieldSet(tzMask,DST_OFFSET)) {      zoneOffsets[1]=internalGet(DST_OFFSET);    }    zoneOffset=zoneOffsets[0] + zoneOffsets[1];  }  long fixedDate=zoneOffset / ONE_DAY;  int timeOfDay=zoneOffset % (int)ONE_DAY;  fixedDate+=time / ONE_DAY;  timeOfDay+=(int)(time % ONE_DAY);  if (timeOfDay >= ONE_DAY) {    timeOfDay-=ONE_DAY;    ++fixedDate;  } else {    while (timeOfDay < 0) {      timeOfDay+=ONE_DAY;      --fixedDate;    }  }  fixedDate+=EPOCH_OFFSET;  int era=CE;  int year;  if (fixedDate >= gregorianCutoverDate) {    assert cachedFixedDate == Long.MIN_VALUE || gdate.isNormalized() : "cache control: not normalized";    assert cachedFixedDate == Long.MIN_VALUE || gcal.getFixedDate(gdate.getNormalizedYear(),gdate.getMonth(),gdate.getDayOfMonth(),gdate) == cachedFixedDate : "cache control: inconsictency" + ", cachedFixedDate=" + cachedFixedDate + ", computed="+ gcal.getFixedDate(gdate.getNormalizedYear(),gdate.getMonth(),gdate.getDayOfMonth(),gdate)+ ", date="+ gdate;    if (fixedDate != cachedFixedDate) {      gcal.getCalendarDateFromFixedDate(gdate,fixedDate);      cachedFixedDate=fixedDate;    }    year=gdate.getYear();    if (year <= 0) {      year=1 - year;      era=BCE;    }    calsys=gcal;    cdate=gdate;    assert cdate.getDayOfWeek() > 0 : "dow=" + cdate.getDayOfWeek() + ", date="+ cdate;  } else {    calsys=getJulianCalendarSystem();    cdate=(BaseCalendar.Date)jcal.newCalendarDate(getZone());    jcal.getCalendarDateFromFixedDate(cdate,fixedDate);    Era e=cdate.getEra();    if (e == jeras[0]) {      era=BCE;    }    year=cdate.getYear();  }  internalSet(ERA,era);  internalSet(YEAR,year);  int mask=fieldMask | (ERA_MASK | YEAR_MASK);  int month=cdate.getMonth() - 1;  int dayOfMonth=cdate.getDayOfMonth();  if ((fieldMask & (MONTH_MASK | DAY_OF_MONTH_MASK | DAY_OF_WEEK_MASK)) != 0) {    internalSet(MONTH,month);    internalSet(DAY_OF_MONTH,dayOfMonth);    internalSet(DAY_OF_WEEK,cdate.getDayOfWeek());    mask|=MONTH_MASK | DAY_OF_MONTH_MASK | DAY_OF_WEEK_MASK;  }  if ((fieldMask & (HOUR_OF_DAY_MASK | AM_PM_MASK | HOUR_MASK| MINUTE_MASK| SECOND_MASK| MILLISECOND_MASK)) != 0) {    if (timeOfDay != 0) {      int hours=timeOfDay / ONE_HOUR;      internalSet(HOUR_OF_DAY,hours);      internalSet(AM_PM,hours / 12);      internalSet(HOUR,hours % 12);      int r=timeOfDay % ONE_HOUR;      internalSet(MINUTE,r / ONE_MINUTE);      r%=ONE_MINUTE;      internalSet(SECOND,r / ONE_SECOND);      internalSet(MILLISECOND,r % ONE_SECOND);    } else {      internalSet(HOUR_OF_DAY,0);      internalSet(AM_PM,AM);      internalSet(HOUR,0);      internalSet(MINUTE,0);      internalSet(SECOND,0);      internalSet(MILLISECOND,0);    }    mask|=(HOUR_OF_DAY_MASK | AM_PM_MASK | HOUR_MASK| MINUTE_MASK| SECOND_MASK| MILLISECOND_MASK);  }  if ((fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) != 0) {    internalSet(ZONE_OFFSET,zoneOffsets[0]);    internalSet(DST_OFFSET,zoneOffsets[1]);    mask|=(ZONE_OFFSET_MASK | DST_OFFSET_MASK);  }  if ((fieldMask & (DAY_OF_YEAR_MASK | WEEK_OF_YEAR_MASK | WEEK_OF_MONTH_MASK| DAY_OF_WEEK_IN_MONTH_MASK)) != 0) {    int normalizedYear=cdate.getNormalizedYear();    long fixedDateJan1=calsys.getFixedDate(normalizedYear,1,1,cdate);    int dayOfYear=(int)(fixedDate - fixedDateJan1) + 1;    long fixedDateMonth1=fixedDate - dayOfMonth + 1;    int cutoverGap=0;    int cutoverYear=(calsys == gcal) ? gregorianCutoverYear : gregorianCutoverYearJulian;    int relativeDayOfMonth=dayOfMonth - 1;    if (normalizedYear == cutoverYear) {      if (gregorianCutoverYearJulian <= gregorianCutoverYear) {        fixedDateJan1=getFixedDateJan1(cdate,fixedDate);        if (fixedDate >= gregorianCutoverDate) {          fixedDateMonth1=getFixedDateMonth1(cdate,fixedDate);        }      }      int realDayOfYear=(int)(fixedDate - fixedDateJan1) + 1;      cutoverGap=dayOfYear - realDayOfYear;      dayOfYear=realDayOfYear;      relativeDayOfMonth=(int)(fixedDate - fixedDateMonth1);    }    internalSet(DAY_OF_YEAR,dayOfYear);    internalSet(DAY_OF_WEEK_IN_MONTH,relativeDayOfMonth / 7 + 1);    int weekOfYear=getWeekNumber(fixedDateJan1,fixedDate);    if (weekOfYear == 0) {      long fixedDec31=fixedDateJan1 - 1;      long prevJan1=fixedDateJan1 - 365;      if (normalizedYear > (cutoverYear + 1)) {        if (CalendarUtils.isGregorianLeapYear(normalizedYear - 1)) {          --prevJan1;        }      } else       if (normalizedYear <= gregorianCutoverYearJulian) {        if (CalendarUtils.isJulianLeapYear(normalizedYear - 1)) {          --prevJan1;        }      } else {        BaseCalendar calForJan1=calsys;        int prevYear=getCalendarDate(fixedDec31).getNormalizedYear();        if (prevYear == gregorianCutoverYear) {          calForJan1=getCutoverCalendarSystem();          if (calForJan1 == jcal) {            prevJan1=calForJan1.getFixedDate(prevYear,BaseCalendar.JANUARY,1,null);          } else {            prevJan1=gregorianCutoverDate;            calForJan1=gcal;          }        } else         if (prevYear <= gregorianCutoverYearJulian) {          calForJan1=getJulianCalendarSystem();          prevJan1=calForJan1.getFixedDate(prevYear,BaseCalendar.JANUARY,1,null);        }      }      weekOfYear=getWeekNumber(prevJan1,fixedDec31);    } else {      if (normalizedYear > gregorianCutoverYear || normalizedYear < (gregorianCutoverYearJulian - 1)) {        if (weekOfYear >= 52) {          long nextJan1=fixedDateJan1 + 365;          if (cdate.isLeapYear()) {            nextJan1++;          }          long nextJan1st=BaseCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,getFirstDayOfWeek());          int ndays=(int)(nextJan1st - nextJan1);          if (ndays >= getMinimalDaysInFirstWeek() && fixedDate >= (nextJan1st - 7)) {            weekOfYear=1;          }        }      } else {        BaseCalendar calForJan1=calsys;        int nextYear=normalizedYear + 1;        if (nextYear == (gregorianCutoverYearJulian + 1) && nextYear < gregorianCutoverYear) {          nextYear=gregorianCutoverYear;        }        if (nextYear == gregorianCutoverYear) {          calForJan1=getCutoverCalendarSystem();        }        long nextJan1;        if (nextYear > gregorianCutoverYear || gregorianCutoverYearJulian == gregorianCutoverYear || nextYear == gregorianCutoverYearJulian) {          nextJan1=calForJan1.getFixedDate(nextYear,BaseCalendar.JANUARY,1,null);        } else {          nextJan1=gregorianCutoverDate;          calForJan1=gcal;        }        long nextJan1st=BaseCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,getFirstDayOfWeek());        int ndays=(int)(nextJan1st - nextJan1);        if (ndays >= getMinimalDaysInFirstWeek() && fixedDate >= (nextJan1st - 7)) {          weekOfYear=1;        }      }    }    internalSet(WEEK_OF_YEAR,weekOfYear);    internalSet(WEEK_OF_MONTH,getWeekNumber(fixedDateMonth1,fixedDate));    mask|=(DAY_OF_YEAR_MASK | WEEK_OF_YEAR_MASK | WEEK_OF_MONTH_MASK| DAY_OF_WEEK_IN_MONTH_MASK);  }  return mask;}  }
class C{  public void notationDecl(String name,String publicId,String systemId) throws SAXException {  if (m_dtdHandler != null) {    m_dtdHandler.notationDecl(name,publicId,systemId);  }}  }
class C{  @Inject public DefaultDebugRecorder(ExecutorServiceFactory executorServiceFactory){  scheduledExecutorService=executorServiceFactory.createScheduledService(2);  recordReport=new RecordReport();}  }
class C{  public static void main(String[] args) throws UnknownHostException {  SpringApplication app=new SpringApplication(GatewayApp.class);  DefaultProfileUtil.addDefaultProfile(app);  Environment env=app.run(args).getEnvironment();  log.info("\n----------------------------------------------------------\n\t" + "Application '{}' is running! Access URLs:\n\t" + "Local: \t\thttp://127.0.0.1:{}\n\t"+ "External: \thttp://{}:{}\n----------------------------------------------------------",env.getProperty("spring.application.name"),env.getProperty("server.port"),InetAddress.getLocalHost().getHostAddress(),env.getProperty("server.port"));  String configServerStatus=env.getProperty("configserver.status");  log.info("\n----------------------------------------------------------\n\t" + "Config Server: \t{}\n----------------------------------------------------------",configServerStatus == null ? "Not found or not setup for this application" : configServerStatus);}  }
class C{  public void remove(int i){  if ((i >= array.length) || (i < 0))   throw new ArrayIndexOutOfBoundsException("invalid index:" + i + ";the array length is "+ array.length);  NSObject[] newArray=new NSObject[array.length - 1];  System.arraycopy(array,0,newArray,0,i);  System.arraycopy(array,i + 1,newArray,i,array.length - i - 1);  array=newArray;}  }
class C{  protected String paramString(){  String horizontalAlignmentString;  if (horizontalAlignment == LEFT) {    horizontalAlignmentString="LEFT";  } else   if (horizontalAlignment == CENTER) {    horizontalAlignmentString="CENTER";  } else   if (horizontalAlignment == RIGHT) {    horizontalAlignmentString="RIGHT";  } else   if (horizontalAlignment == LEADING) {    horizontalAlignmentString="LEADING";  } else   if (horizontalAlignment == TRAILING) {    horizontalAlignmentString="TRAILING";  } else   horizontalAlignmentString="";  String commandString=(command != null ? command : "");  return super.paramString() + ",columns=" + columns+ ",columnWidth="+ columnWidth+ ",command="+ commandString+ ",horizontalAlignment="+ horizontalAlignmentString;}  }
class C{  public Resource subResources(final SubResource... subResources){  this.subResources.addAll(asList(subResources));  return this;}  }
class C{  @Override public void onDestroy(){  if (mAdView != null) {    mAdView.destroy();  }  super.onDestroy();}  }
class C{  public static void deregisterImportTaskListener(ImportTaskListener listener){  directoryServer.importTaskListeners.remove(listener);}  }
class C{  public static boolean removeAccountFederation(NameIDInfo info,String userID) throws WSFederationException {  String classMethod="AccountUtils.removeAccountFederation: ";  WSFederationUtils.debug.message(classMethod);  if (info == null) {    throw new WSFederationException(WSFederationUtils.bundle.getString("nullNameIDInfo"));  }  if (userID == null) {    throw new WSFederationException(WSFederationUtils.bundle.getString("nullUserID"));  }  try {    Set existingFed=WSFederationUtils.dsProvider.getAttribute(userID,getNameIDInfoAttribute());    Set existingInfoKey=WSFederationUtils.dsProvider.getAttribute(userID,getNameIDInfoKeyAttribute());    if (existingFed == null || existingFed.isEmpty()) {      if (WSFederationUtils.debug.messageEnabled()) {        WSFederationUtils.debug.message(classMethod + "user does not have account federation infos.");      }      return false;    }    String infoValue=info.toValueString();    String infoKeyValue=info.getNameIDInfoKey().toValueString();    if (WSFederationUtils.debug.messageEnabled()) {      WSFederationUtils.debug.message(classMethod + "info to be removed:" + infoValue+ "user="+ userID+ "infoKeyValue = "+ infoKeyValue);    }    if (existingFed.contains(infoValue)) {      existingFed.remove(infoValue);      if (existingInfoKey != null && existingInfoKey.contains(infoKeyValue)) {        existingInfoKey.remove(infoKeyValue);      }      Map map=new HashMap();      map.put(getNameIDInfoAttribute(),existingFed);      map.put(getNameIDInfoKeyAttribute(),existingInfoKey);      WSFederationUtils.dsProvider.setAttributes(userID,map);      return true;    }    if (WSFederationUtils.debug.messageEnabled()) {      WSFederationUtils.debug.message(classMethod + "account federation info not found.");    }    return false;  } catch (  DataStoreProviderException dse) {    WSFederationUtils.debug.error(classMethod + "DataStoreProviderException",dse);    throw new WSFederationException(dse);  }catch (  SAML2Exception se) {    WSFederationUtils.debug.error(classMethod + "SAML2Exception",se);    throw new WSFederationException(se);  }}  }
class C{  public CookieManager(CookieStore store,CookiePolicy cookiePolicy){  policyCallback=(cookiePolicy == null) ? CookiePolicy.ACCEPT_ORIGINAL_SERVER : cookiePolicy;  if (store == null) {    cookieJar=new InMemoryCookieStore();  } else {    cookieJar=store;  }}  }
class C{  private void checkforRowSetInterface() throws SQLException {  if ((this instanceof javax.sql.RowSet) == false) {    throw new SQLException("The class extending abstract class BaseRowSet " + "must implement javax.sql.RowSet or one of it's sub-interfaces.");  }}  }
class C{  public void processAttributes(java.io.Writer writer,int nAttrs) throws IOException, SAXException {  for (int i=0; i < nAttrs; i++) {    processAttribute(writer,m_attributes.getQName(i),m_attributes.getValue(i),m_elemContext.m_elementDesc);  }}  }
class C{  public boolean isModifyPolicyEvalRequired(){  return isModifyPolicyEval;}  }
class C{  public com.sun.identity.saml2.jaxb.xmlsig.RSAKeyValueType createRSAKeyValueType() throws javax.xml.bind.JAXBException {  return new com.sun.identity.saml2.jaxb.xmlsig.impl.RSAKeyValueTypeImpl();}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  ChatCacheEntityDao.createTable(db,ifNotExists);}  }
class C{  public FrameBodyTSOA(){}  }
class C{  public final boolean isInfoEnabled(){  return false;}  }
class C{  public Trie(Trie existingTrie){  m_Root=existingTrie.m_Root;  m_lowerCaseOnly=existingTrie.m_lowerCaseOnly;  int max=existingTrie.getLongestKeyLength();  m_charBuffer=new char[max];}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  Dialog dialog=requestEvent.getDialog();  System.out.println("local party = " + dialog.getLocalParty());  try {    System.out.println("shootme:  got a bye sending OK.");    Response response=messageFactory.createResponse(200,request);    serverTransactionId.sendResponse(response);    System.out.println("Dialog State is " + serverTransactionId.getDialog().getState());  } catch (  Exception ex) {    ex.printStackTrace();    System.exit(0);  }}  }
class C{  public synchronized void writeDone(){  --currentWriters;  if (queuedReaders > 0)   notify_readers(); else   notify_writers();}  }
class C{  private boolean isAdministratorAlreadyRegistered(String uid) throws ADSContextException {  return isExistingEntry(getAdministratorDN(uid));}  }
class C{  protected boolean bindAsUser(DirContext context,User user,String credentials) throws NamingException {  if (credentials == null || user == null)   return false;  String dn=user.getDN();  if (dn == null)   return false;  if (containerLog.isTraceEnabled()) {    containerLog.trace("  validating credentials by binding as the user");  }  userCredentialsAdd(context,dn,credentials);  boolean validated=false;  try {    if (containerLog.isTraceEnabled()) {      containerLog.trace("  binding as " + dn);    }    context.getAttributes("",null);    validated=true;  } catch (  AuthenticationException e) {    if (containerLog.isTraceEnabled()) {      containerLog.trace("  bind attempt failed");    }  }  userCredentialsRemove(context);  return validated;}  }
class C{  public void config(Supplier<String> msgSupplier){  log(Level.CONFIG,msgSupplier);}  }
class C{  private void pop(){  String removed=encodedPathSegments.remove(encodedPathSegments.size() - 1);  if (removed.isEmpty() && !encodedPathSegments.isEmpty()) {    encodedPathSegments.set(encodedPathSegments.size() - 1,"");  } else {    encodedPathSegments.add("");  }}  }
class C{  private void verifyPackage(String packageName) throws Exception {  if (!mValidPackages.contains(packageName)) {    throw new Exception("Package not available");  }}  }
class C{  public boolean isActive(){  return active;}  }
class C{  public void processBye(RequestEvent requestEvent,ServerTransaction serverTransactionId){  SipProvider sipProvider=(SipProvider)requestEvent.getSource();  Request request=requestEvent.getRequest();  try {    logger.info("shootme:  got a bye sending OK.");    Response response=protocolObjects.messageFactory.createResponse(200,request);    if (serverTransactionId != null) {      serverTransactionId.sendResponse(response);      logger.info("Dialog State is " + serverTransactionId.getDialog().getState());    } else {      logger.info("null server tx.");    }  } catch (  Exception ex) {    String s="Unexpected exception";    logger.error(s,ex);    ReInviteTest.fail(s);  }}  }
class C{  public void shutdown(int statusCode) throws IOException {synchronized (spdyWriter) {    int lastGoodStreamId;synchronized (this) {      if (shutdown) {        return;      }      shutdown=true;      lastGoodStreamId=this.lastGoodStreamId;    }    spdyWriter.goAway(0,lastGoodStreamId,statusCode);  }}  }
class C{  private static boolean classExists(final String className){  try {    Class.forName(className);    return true;  } catch (  ClassNotFoundException|ClassCastException e) {    return false;  }}  }
class C{  public Dimension minimumLayoutSize(Container parent){  Dimension cpd, mbd, tpd;  int cpWidth=0;  int cpHeight=0;  int mbWidth=0;  int mbHeight=0;  int tpWidth=0;  int tpHeight=0;  Insets i=parent.getInsets();  JRootPane root=(JRootPane)parent;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getMinimumSize();  } else {    cpd=root.getSize();  }  if (cpd != null) {    cpWidth=cpd.width;    cpHeight=cpd.height;  }  if (root.getMenuBar() != null) {    mbd=root.getMenuBar().getMinimumSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof MetalRootPaneUI)) {    JComponent titlePane=((MetalRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getMinimumSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  return new Dimension(Math.max(Math.max(cpWidth,mbWidth),tpWidth) + i.left + i.right,cpHeight + mbHeight + tpWidth+ i.top+ i.bottom);}  }
class C{  public void itemStateChanged(ItemEvent e){  ((ItemListener)a).itemStateChanged(e);  ((ItemListener)b).itemStateChanged(e);}  }
class C{  boolean containRelayState(String relayState){  return relayStateMap.containsKey(relayState);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testEmployee;  Attr newAttribute;  NamedNodeMap attributes;  Attr districtAttr;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  testEmployee=(Element)elementList.item(2);  newAttribute=doc.createAttribute("lang");  districtAttr=testEmployee.setAttributeNode(newAttribute);  districtAttr=testEmployee.removeAttributeNode(newAttribute);  attributes=testEmployee.getAttributes();  districtAttr=(Attr)attributes.getNamedItem("lang");  assertNull("removed_item_null",districtAttr);}  }
class C{  private boolean readMessage(AjpMessage message,boolean block) throws IOException {  byte[] buf=message.getBuffer();  if (!read(buf,0,Constants.H_SIZE,block)) {    return false;  }  int messageLength=message.processHeader(true);  if (messageLength < 0) {    throw new IOException(sm.getString("ajpmessage.invalidLength",Integer.valueOf(messageLength)));  } else   if (messageLength == 0) {    return true;  } else {    if (messageLength > message.getBuffer().length) {      throw new IllegalArgumentException(sm.getString("ajpprocessor.header.tooLong",Integer.valueOf(messageLength),Integer.valueOf(buf.length)));    }    read(buf,Constants.H_SIZE,messageLength,true);    return true;  }}  }
class C{  private void initializeGlobalArguments(OutputStream outStream) throws ArgumentException {  ArrayList<Argument> defaultArgs=new ArrayList<>(createGlobalArguments(outStream,alwaysSSL));  Argument[] argsToRemove={secureArgsList.getHostNameArg(),secureArgsList.getPortArg(),secureArgsList.getBindDnArg(),secureArgsList.getBindPasswordFileArg(),secureArgsList.getBindPasswordArg()};  for (  Argument arg : argsToRemove) {    defaultArgs.remove(arg);  }  defaultArgs.remove(super.noPropertiesFileArg);  defaultArgs.remove(super.propertiesFileArg);  defaultArgs.remove(getAdminUidArg());  int index=0;  baseDNsArg=StringArgument.builder(OPTION_LONG_BASEDN).shortIdentifier(OPTION_SHORT_BASEDN).description(INFO_DESCRIPTION_REPLICATION_BASEDNS.get()).multiValued().valuePlaceholder(INFO_BASEDN_PLACEHOLDER.get()).buildArgument();  defaultArgs.add(index++,baseDNsArg);  secureArgsList.createVisibleAdminUidArgument(INFO_DESCRIPTION_REPLICATION_ADMIN_UID.get(ENABLE_REPLICATION_SUBCMD_NAME));  defaultArgs.add(index++,secureArgsList.getAdminUidArg());  secureArgsList.setBindPasswordArgument(StringArgument.builder(OPTION_LONG_ADMIN_PWD).shortIdentifier(OPTION_SHORT_BINDPWD).description(INFO_DESCRIPTION_REPLICATION_ADMIN_BINDPASSWORD.get()).valuePlaceholder(INFO_BINDPWD_PLACEHOLDER.get()).buildArgument());  defaultArgs.add(index++,secureArgsList.getBindPasswordArg());  secureArgsList.setBindPasswordFileArgument(FileBasedArgument.builder(OPTION_LONG_ADMIN_PWD_FILE).shortIdentifier(OPTION_SHORT_BINDPWD_FILE).description(INFO_DESCRIPTION_REPLICATION_ADMIN_BINDPASSWORDFILE.get()).valuePlaceholder(INFO_BINDPWD_FILE_PLACEHOLDER.get()).buildArgument());  defaultArgs.add(index++,secureArgsList.getBindPasswordFileArg());  defaultArgs.remove(verboseArg);  quietArg=quietArgument();  defaultArgs.add(index++,quietArg);  noPromptArg=noPromptArgument();  defaultArgs.add(index++,noPromptArg);  displayEquivalentArgument=displayEquivalentCommandArgument();  defaultArgs.add(index++,displayEquivalentArgument);  equivalentCommandFileArgument=CommonArguments.equivalentCommandFileArgument(INFO_REPLICATION_DESCRIPTION_EQUIVALENT_COMMAND_FILE_PATH.get());  defaultArgs.add(index++,equivalentCommandFileArgument);  advancedArg=advancedModeArgument();  defaultArgs.add(index++,advancedArg);  configFileArg=configFileArgument();  defaultArgs.add(index++,configFileArg);  this.propertiesFileArgument=propertiesFileArgument();  defaultArgs.add(this.propertiesFileArgument);  setFilePropertiesArgument(this.propertiesFileArgument);  this.noPropertiesFileArgument=noPropertiesFileArgument();  defaultArgs.add(this.noPropertiesFileArgument);  setNoPropertiesFileArgument(this.noPropertiesFileArgument);  initializeGlobalArguments(defaultArgs,null);}  }
class C{  public final void testRSAMultiPrimePrivateCrtKeySpec06(){  try {    new RSAMultiPrimePrivateCrtKeySpec(BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,null,BigInteger.ONE,BigInteger.ONE,BigInteger.ONE,opi);    fail("Expected NPE not thrown");  } catch (  NullPointerException e) {  }}  }
class C{  private void addAttrTypeToSchemaFile(String schemaFile,AttributeType attributeType,Set<ByteString> values,Set<AttributeType> addedTypes,int depth) throws DirectoryException {  if (depth > 20) {    LocalizableMessage message=ERR_SCHEMA_MODIFY_CIRCULAR_REFERENCE_AT.get(attributeType.getNameOrOID());    throw new DirectoryException(ResultCode.UNWILLING_TO_PERFORM,message);  }  if (addedTypes.contains(attributeType)) {    return;  }  AttributeType superiorType=attributeType.getSuperiorType();  if (superiorType != null && schemaFile.equals(getElementSchemaFile(attributeType)) && !addedTypes.contains(superiorType)) {    addAttrTypeToSchemaFile(schemaFile,superiorType,values,addedTypes,depth + 1);  }  values.add(ByteString.valueOfUtf8(attributeType.toString()));  addedTypes.add(attributeType);}  }
class C{  public void test_addILjava_lang_Object(){  Object o;  alist.add(50,o=new Object());  assertTrue("Failed to add Object",alist.get(50) == o);  assertTrue("Failed to fix up list after insert",alist.get(51) == objArray[50] && (alist.get(52) == objArray[51]));  Object oldItem=alist.get(25);  alist.add(25,null);  assertNull("Should have returned null",alist.get(25));  assertTrue("Should have returned the old item from slot 25",alist.get(26) == oldItem);  try {    alist.add(-1,null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }  try {    alist.add(alist.size() + 1,null);    fail("IndexOutOfBoundsException expected");  } catch (  IndexOutOfBoundsException e) {  }}  }
class C{  @SuppressWarnings("unchecked") public static <M>Function<M,M,NeverThrowsException> identityFunction(){  return (Function<M,M,NeverThrowsException>)IDENTITY;}  }
class C{  private void render(RoutingContext context,String state){  final String uiPath="webroot/views/job/list.jade";  String title=config().getString("kue.ui.title","Vert.x Kue");  kue.getAllTypes().setHandler(resultHandler(context,null));}  }
class C{  ApplicationType(String type){  this.type=type;}  }
