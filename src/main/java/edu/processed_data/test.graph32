class C{  private void handleStartedH(boolean workOngoing){switch (mVerb) {case VERB_STARTING:    mVerb=VERB_EXECUTING;  if (!workOngoing) {    handleFinishedH(false);    return;  }if (mCancelled.get()) {  handleCancelH();  return;}scheduleOpTimeOut();break;default :}}  }
class C{  @SuppressWarnings("unchecked") public static String toString(JSONObject o) throws JSONException {  boolean b=false;  Iterator keys=o.keys();  String s;  StringBuilder sb=new StringBuilder();  while (keys.hasNext()) {    s=keys.next().toString();    if (!o.isNull(s)) {      if (b) {        sb.append(';');      }      sb.append(Cookie.escape(s));      sb.append("=");      sb.append(Cookie.escape(o.getString(s)));      b=true;    }  }  return sb.toString();}  }
class C{  public static void registerFuel(ItemStack stack,boolean checkNBT,int duration){  Predicate<ItemStack> matcher=ItemStackDictionary.matcherOf(stack,checkNBT);  OpenModLoader.getEventBus().register(FuelEvent.class,null);}  }
class C{  public PageLink(int page,String label){  this(page,label,null);}  }
class C{  public TimingLogger(String tag,String label){  reset(tag,label);}  }
class C{  private void loadBinary(ByteBuffer bb) throws IOException {  if (bb.getInt() != MAGIC) {    throw new Error("Bad magic in db");  }  if (bb.getInt() != VERSION) {    throw new Error("Bad VERSION in db");  }  continuityWeight=bb.getInt();  optimalCoupling=bb.getInt();  extendSelections=bb.getInt();  joinMethod=bb.getInt();  joinWeightShift=bb.getInt();  int weightLength=bb.getInt();  joinWeights=new int[weightLength];  for (int i=0; i < joinWeights.length; i++) {    joinWeights[i]=bb.getInt();  }  int unitsLength=bb.getInt();  units=new DatabaseClusterUnit[unitsLength];  for (int i=0; i < units.length; i++) {    units[i]=new DatabaseClusterUnit(bb);  }  int unitTypesLength=bb.getInt();  unitTypes=new UnitType[unitTypesLength];  for (int i=0; i < unitTypes.length; i++) {    unitTypes[i]=new UnitType(bb);  }  sts=new SampleSet(bb);  mcep=new SampleSet(bb);  int numCarts=bb.getInt();  cartMap=new HashMap();  for (int i=0; i < numCarts; i++) {    String name=Utilities.getString(bb);    CART cart=CARTImpl.loadBinary(bb);    cartMap.put(name,cart);    if (defaultCart == null) {      defaultCart=cart;    }  }}  }
class C{  public void prepend(CharSequence s){  text.insert(0,s);}  }
class C{  public void cancel(OCUpload storedUpload){  cancel(storedUpload.getAccountName(),storedUpload.getRemotePath());}  }
class C{  public boolean isTranformInProgress(){  return m_transact.isRunning();}  }
class C{  public OperatelogExample(){  oredCriteria=new ArrayList<Criteria>();}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  ProxyVerifier(Registrar server,ServiceID registrarID){  if (!(server instanceof RemoteMethodControl)) {    throw new UnsupportedOperationException("server does not implement RemoteMethodControl");  } else   if (!(server instanceof TrustEquivalence)) {    throw new UnsupportedOperationException("server does not implement TrustEquivalence");  }  this.server=(RemoteMethodControl)server;  this.registrarID=registrarID;}  }
class C{  public double doCompare(String sSummaryTextFile,Set<String> ssModelFiles){  Distribution dRes=new Distribution();  NGramSymWinHierDocument ndNDoc1=new NGramSymWinHierDocument(MinN,Levels,DistFactor,GraphIndices);  ndNDoc1.loadDataStringFromFile(sSummaryTextFile);  File fSummaryFile=new File(sSummaryTextFile);  Iterator<String> iOtherIter=ssModelFiles.iterator();  while (iOtherIter.hasNext()) {    String sModelFile=iOtherIter.next();    if (new File(sModelFile).getName().equals(fSummaryFile.getName()) && AvoidSelfComparison) {      System.err.print(String.format("Skipping '%s' to '%s' comparison",sModelFile,fSummaryFile));      continue;    }    NGramSymWinHierDocument ndNDoc2=new NGramSymWinHierDocument(MinN,Levels,DistFactor,GraphIndices);    ndNDoc2.loadDataStringFromFile(sModelFile);    GraphSimilarity sSimil=null;    sSimil=ndNDoc1.compareTo(ndNDoc2);    dRes.increaseValue(sSimil.ValueSimilarity,1.0);  }  return dRes.average(false);}  }
class C{  public int determineInsertionIndex(TabLaunchType type,int position,Tab newTab){  if (linkClicked(type)) {    position=determineInsertionIndex(type,newTab);  }  if (willOpenInForeground(type,newTab.isIncognito())) {    forgetAllOpeners();  }  return position;}  }
class C{  private boolean isZeroToThree(final char ch){  return ch >= '0' && ch <= '3';}  }
class C{  public AnnotationAttr(String type,ArrayList elems){  this.type=new AsciiCP(type);  this.list=elems;}  }
class C{  public boolean isDirectory(){  return isDirectory;}  }
class C{  public String createAuthorityName(Role role){  String roleName=role.getRoleName().toUpperCase();  return rolePrefix + roleName;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_INVITED_HIS_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1300189,value0);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public VariableDeclaration fullCopy(){  VariableDeclaration tree=(VariableDeclaration)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public ParticleSystem(Activity a,int maxParticles,int drawableResId,long timeToLive){  this(a,maxParticles,ContextCompat.getDrawable(a,drawableResId),timeToLive,android.R.id.content);}  }
class C{  public void endElement(){  if (fGlobalMapStack.isEmpty()) {    return;  }  HashMap oldMap=(HashMap)fGlobalMapStack.pop();  if (oldMap == null) {    return;  }  Iterator entries=oldMap.entrySet().iterator();  while (entries.hasNext()) {    Map.Entry entry=(Map.Entry)entries.next();    IdentityConstraint id=(IdentityConstraint)entry.getKey();    ValueStoreBase oldVal=(ValueStoreBase)entry.getValue();    if (oldVal != null) {      ValueStoreBase currVal=(ValueStoreBase)fGlobalIDConstraintMap.get(id);      if (currVal == null) {        fGlobalIDConstraintMap.put(id,oldVal);      } else       if (currVal != oldVal) {        currVal.append(oldVal);      }    }  }}  }
class C{  private static void createTextArea(){  if (splashTextArea == null) {    Dimension ssDim=null;    if (splashScreenObj != null) {      ssDim=splashScreenObj.getSize();    } else {      ssDim=new Dimension(640,459);    }    int height=ssDim.height;    int width=ssDim.width;    splashTextArea=new Rectangle2D.Double(300.0,height * 0.88,width * .45,32.0);  }}  }
class C{  public String stem(String str){  if (str.length() > 0) {    char[] c=str.toCharArray();    for (int i=0; i < c.length; i++) {      if (!Character.isLetter(c[i]))       return "Invalid term";    }  } else {    return "No term entered";  }  str=step1a(str);  str=step1b(str);  str=step1c(str);  str=step2(str);  str=step3(str);  str=step4(str);  str=step5a(str);  str=step5b(str);  return str;}  }
class C{  public BKLogReadHandler(ZKLogMetadataForReader logMetadata,Optional<String> subscriberId,DistributedLogConfiguration conf,DynamicDistributedLogConfiguration dynConf,ZooKeeperClientBuilder zkcBuilder,BookKeeperClientBuilder bkcBuilder,LogSegmentMetadataStore metadataStore,OrderedScheduler scheduler,OrderedScheduler lockStateExecutor,OrderedScheduler readAheadExecutor,AlertStatsLogger alertStatsLogger,ReadAheadExceptionsLogger readAheadExceptionsLogger,StatsLogger statsLogger,StatsLogger perLogStatsLogger,String clientId,AsyncNotification notification,boolean isHandleForReading,boolean deserializeRecordSet){  super(logMetadata,conf,zkcBuilder,bkcBuilder,metadataStore,scheduler,statsLogger,alertStatsLogger,notification,LogSegmentFilter.DEFAULT_FILTER,clientId);  this.logMetadataForReader=logMetadata;  this.dynConf=dynConf;  this.readAheadExecutor=readAheadExecutor;  this.alertStatsLogger=alertStatsLogger;  this.perLogStatsLogger=isHandleForReading ? perLogStatsLogger : NullStatsLogger.INSTANCE;  this.handlerStatsLogger=BroadCastStatsLogger.masterslave(this.perLogStatsLogger,statsLogger);  this.readAheadExceptionsLogger=readAheadExceptionsLogger;  handleCache=LedgerHandleCache.newBuilder().bkc(this.bookKeeperClient).conf(conf).statsLogger(statsLogger).build();  readAheadCache=new ReadAheadCache(getFullyQualifiedName(),handlerStatsLogger,alertStatsLogger,notification,dynConf.getReadAheadMaxRecords(),deserializeRecordSet,conf.getTraceReadAheadDeliveryLatency(),conf.getDataLatencyWarnThresholdMillis(),Ticker.systemTicker());  this.subscriberId=subscriberId;  this.readLockPath=logMetadata.getReadLockPath(subscriberId);  this.lockStateExecutor=lockStateExecutor;  this.lockFactory=new ZKSessionLockFactory(zooKeeperClient,getLockClientId(),lockStateExecutor,conf.getZKNumRetries(),conf.getLockTimeoutMilliSeconds(),conf.getZKRetryBackoffStartMillis(),statsLogger.scope("read_lock"));  this.isHandleForReading=isHandleForReading;}  }
class C{  public void createDatabase() throws Exception {  boolean dbExists=checkDatabase();  if (!dbExists) {    this.getReadableDatabase();    try {      copyDatabase();    } catch (    Exception e) {      Log.e("DB_ERROR","createDatabase(): Could not copy DB");      throw new Error("Could not copy DB'");    }  }}  }
class C{  public boolean isInitValues(){  return isInitValue;}  }
class C{  public static boolean removeFromCache(String imageUri,DiskCache diskCache){  File image=diskCache.get(imageUri);  return image != null && image.exists() && image.delete();}  }
class C{  public IntFileGetterInMemory(File file) throws IOException {  limit=file.length() / 4;  data=new int[(int)((limit >>> BITS)) + 1][];  final int length0=1 << BITS;  for (int i=0; i < data.length; i++) {    int length=(i < data.length - 1 ? length0 : (int)(limit & BIT_MASK) + 1);    data[i]=new int[length];  }  try (InputStream ins=new BufferedInputStream(new FileInputStream(file));ProgressPercentage progress=new ProgressPercentage("Reading file: " + file,limit)){    int whichArray=0;    int indexInArray=0;    int[] row=data[0];    for (long index=0; index < limit; index++) {      row[indexInArray]=((ins.read() & 0xFF) << 24) + (((ins.read()) & 0xFF) << 16) + (((ins.read()) & 0xFF) << 8)+ (ins.read() & 0xFF);      if (++indexInArray == length0) {        row=data[++whichArray];        indexInArray=0;      }      progress.setProgress(index);    }  } }  }
class C{  private void checkDimensions(final LinearObjectiveFunction objectiveFunction,final Collection<LinearConstraint> c){  final int dimension=objectiveFunction.getCoefficients().getDimension();  for (  final LinearConstraint constraint : c) {    final int constraintDimension=constraint.getCoefficients().getDimension();    if (constraintDimension != dimension) {      throw new MathIllegalArgumentException(LocalizedCoreFormats.DIMENSIONS_MISMATCH,constraintDimension,dimension);    }  }}  }
class C{  private void actuallySendPing(URL url) throws IOException {  assert url != null;  if (DEBUG) {    LOG.debug("Ping: " + url.toString());  }  HttpURLConnection conn=(HttpURLConnection)url.openConnection();  int responseCode;  try {    responseCode=conn.getResponseCode();  } catch (  UnknownHostException e) {    responseCode=HttpURLConnection.HTTP_BAD_REQUEST;  }  if (responseCode != HttpURLConnection.HTTP_OK && responseCode != HttpURLConnection.HTTP_NOT_FOUND) {    throw new IOException(conn.getResponseMessage() + ": " + url);  }}  }
class C{  public CM_CHECK_NICKNAME(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public DesiredExpirationListener desiredExpirationListener(){  if (listener == null)   return null;  if (listener instanceof DesiredExpirationListener)   return (DesiredExpirationListener)listener;  return null;}  }
class C{  private void notifyActionListeners(String command,SandboxBody body){  ActionListener[] listeners=this.getListeners(ActionListener.class);  int size=listeners.length;  BodyActionEvent event=new BodyActionEvent(this,ActionEvent.ACTION_PERFORMED,command,body);  for (int i=0; i < size; i++) {    listeners[i].actionPerformed(event);  }}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  @Override public void internalEntityDecl(String name,XMLString text,XMLString nonNormalizedText,Augmentations augmentations) throws XNIException {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonSkillArea_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1201147,skillname);}  }
class C{  @Override public String whoAmI(){  return ("step " + Double.toString(100.0 * stepVal) + "%");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_ENEMY_BLOCK(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1230218,value0,value1);}  }
class C{  public boolean isPlaying(){  return isPlaying;}  }
class C{  public EntityQuery fetchSize(int fetchSize){  this.fetchSize=fetchSize;  return this;}  }
class C{  private void createUI(){  PrefManager.getInstance().addVendorOptionListener(this);  createVendorOptionPanel();  readConfigFile(vendorOptionTextFactory,this,"Text.xml");}  }
class C{  public int size(){  return 5;}  }
class C{  public static Dfp copysign(final Dfp x,final Dfp y){  Dfp result=x.newInstance(x);  result.sign=y.sign;  return result;}  }
class C{  public Element generateSimpleElement(final Document document,final String rootName,final Object pojo,final String... attributes) throws ParserConfigurationException, IllegalAccessException, InstantiationException {  return generateSimpleElement(document,rootName,pojo,Arrays.asList(attributes));}  }
class C{  @Override public String toString(){  String s=super.toString();  int index1=s.lastIndexOf('$');  if (index1 != -1) {    s=s.substring(index1 + 1);  }  int index2=s.lastIndexOf('.');  if (index2 != -1) {    s=s.substring(index2 + 1);  }  return s + '[' + fIdentityConstraint+ ']';}  }
class C{  public AccountChangePasswordQuery oldPassword(String value){  return unsafeParam("old_password",value);}  }
class C{  public Future<ProcessResult> stop() throws RabbitMqCommandException {  return execute("stop");}  }
class C{  public void testAddActivityNoShow() throws Exception {  deleteManifest();  myFixture.copyFileToProject("intentions/DummyActivity_manifest_after.xml","AndroidManifest.xml");  final VirtualFile file=myFixture.copyFileToProject("intentions/DummyActivity.java","src/com/example/DummyActivity.java");  myFixture.configureFromExistingVirtualFile(file);  final IntentionAction action=AndroidTestUtils.getIntentionAction(myFixture,ADD_ACTIVITY_TO_MANIFEST);  assertNull(action);}  }
class C{  @SneakyThrows public static void create(final CuratorFramework client,final String path,final String content){  try {    if (content == null) {      client.create().creatingParentsIfNeeded().forPath(path);    } else {      client.create().creatingParentsIfNeeded().forPath(path,content.getBytes());    }  } catch (  NodeExistsException ex) {    log.warn("node exists, can not create it again!");  }catch (  Exception ex) {    log.error("failed create znode: {}, error: {}",path,ex);    throw ex;  }}  }
class C{  @Deprecated public static <E>List<E> toList(Chain<E> c){  return new ArrayList<E>(c);}  }
class C{  public static Bitmap scaleImage(Bitmap src,float scaleWidth,float scaleHeight){  if (src == null) {    return null;  }  Matrix matrix=new Matrix();  matrix.postScale(scaleWidth,scaleHeight);  return Bitmap.createBitmap(src,0,0,src.getWidth(),src.getHeight(),matrix,true);}  }
class C{  public K[] keys(K[] a){  int size=size();  if (a.length < size) {    a=(K[])java.lang.reflect.Array.newInstance(a.getClass().getComponentType(),size);  }  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != FREE && k[i] != REMOVED) {      a[j++]=k[i];    }  }  return a;}  }
class C{  @Override public synchronized void initialize(){  if (!mRootDirectory.exists()) {    if (!mRootDirectory.mkdirs()) {      VolleyLog.e("Unable to create cache dir %s",mRootDirectory.getAbsolutePath());    }    return;  }  File[] files=mRootDirectory.listFiles();  if (files == null) {    return;  }  for (  File file : files) {    BufferedInputStream fis=null;    try {      fis=new BufferedInputStream(new FileInputStream(file));      CacheHeader entry=CacheHeader.readHeader(fis);      entry.size=file.length();      putEntry(entry.key,entry);    } catch (    IOException e) {      if (file != null) {        file.delete();      }    } finally {      try {        if (fis != null) {          fis.close();        }      } catch (      IOException ignored) {      }    }  }}  }
class C{  public void loadPages(){  if (optimalPageWidth == 0 || optimalPageHeight == 0) {    return;  }  renderingAsyncTask.removeAllTasks();  cacheManager.makeANewSet();  pagesLoader.loadPages();  redraw();}  }
class C{  public Zspec(Zmat AA) throws JampackException {  int i, j;  if (AA.nrow != AA.ncol) {    throw new RuntimeException("Matrix not square.");  }  Zmat A=new Zmat(AA);  for (i=0; i < A.nrow; i++) {    if (A.im[i][i] != 0) {      throw new JampackException("Matrix not Hermitian");    }    for (j=0; j < i; j++) {      if (A.re[i][j] != A.re[j][i] || A.im[i][j] != -A.im[j][i]) {        throw new JampackException("Matrix not Hermitian");      }    }  }  Schur S=new Schur(A);  D=new Zdiagmat(S.T);  for (i=0; i < D.n; i++) {    D.im[i]=0.;  }  U=S.U;}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public boolean hasNext(){  if (prefetch || isSortTempFileCompressionEnabled) {    return this.prefetchRecordsProceesed < this.entryCount;  }  return this.numberOfObjectRead < this.entryCount;}  }
class C{  public void handleExceptionsWith(final ExceptionHandler<? super T> exceptionHandler){  this.exceptionHandler=exceptionHandler;}  }
class C{  private String prepareReportContent(DataEntryForm dataEntryForm,Map<String,Object> dataValues,Map<String,Object> indicatorValues,I18nFormat format){  StringBuffer buffer=new StringBuffer();  Matcher inputMatcher=INPUT_PATTERN.matcher(dataEntryForm.getHtmlCode());  while (inputMatcher.find()) {    String inputHtml=inputMatcher.group(1);    Matcher identifierMatcher=IDENTIFIER_PATTERN.matcher(inputHtml);    Matcher dataElementTotalMatcher=DATAELEMENT_TOTAL_PATTERN.matcher(inputHtml);    Matcher indicatorMatcher=INDICATOR_PATTERN.matcher(inputHtml);    if (identifierMatcher.find() && identifierMatcher.groupCount() > 0) {      String dataElementId=identifierMatcher.group(1);      String optionComboId=identifierMatcher.group(2);      Object dataValue=dataValues.get(dataElementId + SEPARATOR + optionComboId);      String value="<span class=\"val\" data-de=\"" + dataElementId + "\" data-co=\""+ optionComboId+ "\">"+ format.formatValue(dataValue)+ "</span>";      inputMatcher.appendReplacement(buffer,Matcher.quoteReplacement(value));    } else     if (dataElementTotalMatcher.find() && dataElementTotalMatcher.groupCount() > 0) {      String dataElementId=dataElementTotalMatcher.group(1);      Object dataValue=dataValues.get(dataElementId);      inputMatcher.appendReplacement(buffer,Matcher.quoteReplacement(format.formatValue(dataValue)));    } else     if (indicatorMatcher.find() && indicatorMatcher.groupCount() > 0) {      String indicatorId=indicatorMatcher.group(1);      Object indicatorValue=indicatorValues.get(indicatorId);      inputMatcher.appendReplacement(buffer,Matcher.quoteReplacement(format.formatValue(indicatorValue)));    }  }  inputMatcher.appendTail(buffer);  return buffer.toString();}  }
class C{  @Override protected void configurePipeline(){  super.configurePipeline();  fDTDScanner.setDTDHandler(fDTDProcessor);  fDTDProcessor.setDTDSource(fDTDScanner);  fDTDProcessor.setDTDHandler(fXIncludeHandler);  fXIncludeHandler.setDTDSource(fDTDProcessor);  fXIncludeHandler.setDTDHandler(fXPointerHandler);  fXPointerHandler.setDTDSource(fXIncludeHandler);  fXPointerHandler.setDTDHandler(fDTDHandler);  if (fDTDHandler != null) {    fDTDHandler.setDTDSource(fXPointerHandler);  }  XMLDocumentSource prev=null;  if (fFeatures.get(XMLSCHEMA_VALIDATION) == Boolean.TRUE) {    prev=fSchemaValidator.getDocumentSource();  } else {    prev=fLastComponent;    fLastComponent=fXPointerHandler;  }  XMLDocumentHandler next=prev.getDocumentHandler();  prev.setDocumentHandler(fXIncludeHandler);  fXIncludeHandler.setDocumentSource(prev);  if (next != null) {    fXIncludeHandler.setDocumentHandler(next);    next.setDocumentSource(fXIncludeHandler);  }  fXIncludeHandler.setDocumentHandler(fXPointerHandler);  fXPointerHandler.setDocumentSource(fXIncludeHandler);}  }
class C{  public IStoredListIterator<T> establishListOrderedScan(IObjectInfo<T> OrderedScanPivot,boolean ascending){  if (m_Size <= 0)   return null;  StoredListIterator<T> slh=_SLHolderPool.get();  StoredListIterator<T> res=establishOrderedPos((ObjectInfo<T>)OrderedScanPivot,ascending,slh);  if (res == null)   slh.release();  return res;}  }
class C{  public void initValueStoresFor(XSElementDecl eDecl,FieldActivator activator){  IdentityConstraint[] icArray=eDecl.fIDConstraints;  int icCount=eDecl.fIDCPos;  for (int i=0; i < icCount; i++) {switch (icArray[i].getCategory()) {case (XSIDCDefinition.IC_UNIQUE):      UniqueOrKey unique=(UniqueOrKey)icArray[i];    LocalIDKey toHash=new LocalIDKey(unique,fElementDepth);  UniqueValueStore uniqueValueStore=(UniqueValueStore)fIdentityConstraint2ValueStoreMap.get(toHash);if (uniqueValueStore == null) {  uniqueValueStore=new UniqueValueStore(unique);  fIdentityConstraint2ValueStoreMap.put(toHash,uniqueValueStore);} else {  uniqueValueStore.clear();}fValueStores.add(uniqueValueStore);activateSelectorFor(icArray[i]);break;case (XSIDCDefinition.IC_KEY):UniqueOrKey key=(UniqueOrKey)icArray[i];toHash=new LocalIDKey(key,fElementDepth);KeyValueStore keyValueStore=(KeyValueStore)fIdentityConstraint2ValueStoreMap.get(toHash);if (keyValueStore == null) {keyValueStore=new KeyValueStore(key);fIdentityConstraint2ValueStoreMap.put(toHash,keyValueStore);} else {keyValueStore.clear();}fValueStores.add(keyValueStore);activateSelectorFor(icArray[i]);break;case (XSIDCDefinition.IC_KEYREF):KeyRef keyRef=(KeyRef)icArray[i];toHash=new LocalIDKey(keyRef,fElementDepth);KeyRefValueStore keyRefValueStore=(KeyRefValueStore)fIdentityConstraint2ValueStoreMap.get(toHash);if (keyRefValueStore == null) {keyRefValueStore=new KeyRefValueStore(keyRef,null);fIdentityConstraint2ValueStoreMap.put(toHash,keyRefValueStore);} else {keyRefValueStore.clear();}fValueStores.add(keyRefValueStore);activateSelectorFor(icArray[i]);break;}}}  }
class C{  void handleMethodAnnotation(Host h,Method method){  Set<? extends Annotation> aSet=method.getAnnotations();  if (!(aSet == null || aSet.isEmpty())) {    List<Tag> tags=handleAnnotation(aSet,null);    if (tags != null)     for (    Tag t : tags)     if (t != null) {      h.addTag(t);      Debug.printDbg("add method annotation: ",t);    }  }  ArrayList<String> parameterNames=new ArrayList<String>();  boolean addParameterNames=false;  for (  MethodParameter p : method.getParameters()) {    String name=p.getName();    parameterNames.add(name);    if (name != null)     addParameterNames=true;  }  if (addParameterNames) {    h.addTag(new ParamNamesTag(parameterNames));  }  boolean doParam=false;  List<? extends MethodParameter> parameters=method.getParameters();  for (  MethodParameter p : parameters) {    Debug.printDbg("parameter ",p," annotations: ",p.getAnnotations());    if (p.getAnnotations().size() > 0) {      doParam=true;      break;    }  }  if (doParam) {    VisibilityParameterAnnotationTag tag=new VisibilityParameterAnnotationTag(parameters.size(),AnnotationConstants.RUNTIME_VISIBLE);    for (    MethodParameter p : parameters) {      List<Tag> tags=handleAnnotation(p.getAnnotations(),null);      if (tags == null) {        tag.addVisibilityAnnotation(null);        continue;      }      VisibilityAnnotationTag paramVat=new VisibilityAnnotationTag(AnnotationConstants.RUNTIME_VISIBLE);      tag.addVisibilityAnnotation(paramVat);      for (      Tag t : tags) {        if (t == null)         continue;        AnnotationTag vat=null;        if (!(t instanceof VisibilityAnnotationTag)) {          if (t instanceof DeprecatedTag) {            vat=new AnnotationTag("Ljava/lang/Deprecated;");          } else           if (t instanceof SignatureTag) {            SignatureTag sig=(SignatureTag)t;            ArrayList<AnnotationElem> sigElements=new ArrayList<AnnotationElem>();            for (            String s : SootToDexUtils.splitSignature(sig.getSignature()))             sigElements.add(new AnnotationStringElem(s,'s',"value"));            AnnotationElem elem=new AnnotationArrayElem(sigElements,'s',"value");            vat=new AnnotationTag("Ldalvik/annotation/Signature;",Collections.singleton(elem));          } else {            throw new RuntimeException("error: unhandled tag for parameter annotation in method " + h + " ("+ t+ ").");          }        } else {          vat=((VisibilityAnnotationTag)t).getAnnotations().get(0);        }        Debug.printDbg("add parameter annotation: ",t);        paramVat.addAnnotation(vat);      }    }    if (tag.getVisibilityAnnotations().size() > 0)     h.addTag(tag);  }}  }
class C{  private void showDialog(){  int index=getValueIndex();  index=index < 0 ? 0 : index;  final int height=LIST_ITEM_HEIGHT * getEntries().length + LIST_PADDING * 2;  View parent=((View)mViewHolder.itemView.getParent().getParent().getParent());  int parentHeight=parent.getHeight();  if (height > parentHeight) {    mPopupWindow.setHeight(parentHeight - LIST_PADDING * 2);    mRecyclerView.setOverScrollMode(View.OVER_SCROLL_IF_CONTENT_SCROLLS);    mRecyclerView.scrollToPosition(index);  } else {    mRecyclerView.setOverScrollMode(View.OVER_SCROLL_NEVER);  }  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    mPopupWindow.setElevation(48f);  }  mPopupWindow.setAnimationStyle(R.style.Animation_SimpleMenuCenter);  int width=mViewHolder.itemView.getWidth() - POPUP_PADDING_X * 2;  mPopupWindow.setWidth(width);  mPopupWindow.showAtLocation(mViewHolder.itemView,Gravity.CENTER_VERTICAL,0,0);}  }
class C{  public void populateFontField(FieldIdEnum fieldId,Font font){  if (fieldConfigManager == null) {    return;  }  FieldConfigBase fieldConfig=fieldConfigManager.get(fieldId);  if (fieldConfig != null) {    fieldConfig.populateField(font);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ARTIFACT_CASTING(DescriptionId race,String value1,DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1301033,race,value1,descriptionId);}  }
class C{  public boolean isValid(String domain){  if (domain == null) {    return false;  }  domain=unicodeToASCII(domain);  if (domain.length() > 253) {    return false;  }  String[] groups=domainRegex.match(domain);  if (groups != null && groups.length > 0) {    return isValidTld(groups[0]);  }  return allowLocal && hostnameRegex.isValid(domain);}  }
class C{  public void init$Children(){  children=new ASTNode[4];  setChild(new List(),0);  setChild(new Opt(),1);  setChild(new List(),2);}  }
class C{  @RequestMapping(value="/servers",method=RequestMethod.GET) public JsonResponse listServers(){  Response<List<ServerInfo>> listResp=clusterService.listServers();  if (!listResp.isSuccess()) {    Logs.error("failed to list all servers, cause: {}",listResp.getErr());    return JsonResponse.notOk(listResp.getErr());  }  return JsonResponse.ok(listResp.getData());}  }
class C{  protected Attribute(final String type){  this.type=type;}  }
class C{  @Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  if (fNamespaces) {    handleStartElement(element,attributes,augs,true);    handleEndElement(element,augs,true);  } else   if (fDocumentHandler != null) {    fDocumentHandler.emptyElement(element,attributes,augs);  }}  }
class C{  public static <K,V>Map<K,V> newMap(){  return new HashMap<K,V>();}  }
class C{  public boolean isStacked(){  return mYValues != null;}  }
class C{  public Region<S> xor(final Region<S> region1,final Region<S> region2){  final BSPTree<S> tree=region1.getTree(false).merge(region2.getTree(false),new XorMerger());  tree.visit(nodeCleaner);  return region1.buildNew(tree);}  }
class C{  public static final SandboxRay show(Window owner){  AddRayDialog ard=new AddRayDialog(owner);  ard.setLocationRelativeTo(owner);  ard.setVisible(true);  if (!ard.canceled) {synchronized (AddRayDialog.class) {      N++;    }    return ard.rayPanel.getRay();  }  return null;}  }
class C{  public ProxyWriter(Writer proxy){  super(proxy);}  }
class C{  default boolean hasDataForHttp(){  return false;}  }
class C{  protected void drawYAxis(Graphics2D gc,Dimension size){}  }
class C{  public static boolean isActionUp(KeyEvent event){  return event.getAction() == KeyEvent.ACTION_UP;}  }
class C{  public void put(String key,File file,String contentType) throws FileNotFoundException {  if (key != null && file != null) {    fileParams.put(key,new FileWrapper(file,contentType));  }}  }
class C{  public SimplifiedIntervalList intersect(SimplifiedIntervalList that){  Iterator<Interval> theseIntervals=this.iterator();  Iterator<Interval> thoseIntervals=that.iterator();  Interval thisCurrent=getNextIfAvailable.apply(theseIntervals);  Interval thatCurrent=getNextIfAvailable.apply(thoseIntervals);  List<Interval> collected=new ArrayList<>();  while (thisCurrent != null && thatCurrent != null) {    if (thisCurrent.overlaps(thatCurrent)) {      collected.add(thisCurrent.overlap(thatCurrent));    }    if (thisCurrent.isBefore(thatCurrent.getEnd())) {      thisCurrent=getNextIfAvailable.apply(theseIntervals);    } else {      thatCurrent=getNextIfAvailable.apply(thoseIntervals);    }  }  return new SimplifiedIntervalList(collected);}  }
class C{  public Expression bindKeyVariable(Value var,Value map){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public static Page createFromJSONString(String json){  return new GsonBuilder().create().fromJson(json,Page.class);}  }
class C{  public static void main(String[] sArgs){  System.err.print("Parsing XML file...");  ACQUAINT2DocumentSet tds=new ACQUAINT2DocumentSet("/home/pckid/Documents/JApplications/JInsect/TAC2008/data/cna_eng/cna_eng_200410");  System.err.println("Done.");  System.err.print("Creating sets.");  tds.createSets();  System.err.println("Done.");  System.err.println("Determining categories...");  System.out.println(utils.printList(tds.getCategories()," | "));  System.err.println("Determining categories...Done.");  System.err.println("File count per category...");  for (  String sCategory : (List<String>)tds.getCategories())   System.out.println(String.format("%s : #%d",sCategory,tds.getFilesFromCategory(sCategory).size()));  System.err.println("File count per category...Done.");  System.out.println("First text per category...");  for (  String sCategory : (List<String>)tds.getCategories()) {    System.out.println("\n===" + sCategory + "===");    System.out.println(tds.loadDocumentTextToString((String)tds.getFilesFromCategory(sCategory).get(0)));    String sDateline=tds.loadDocumentDatelineToString((String)tds.getFilesFromCategory(sCategory).get(0));    System.out.println(sDateline.length() == 0 ? "No dateline..." : "Dateline:\t" + sDateline);  }  System.out.println("File count per category...Done.");  System.err.println("Extracting dates...");  for (  String sDocID : tds.toFilenameSet(ACQUAINT2DocumentSet.FROM_WHOLE_SET)) {    Date d=tds.getDocDate(sDocID);    System.out.println(String.format("%s : %s",sDocID,d != null ? d.toString() : "No date found"));  }  System.err.println("Extracting dates...Done.");}  }
class C{  public boolean onCommand(String command,String ipFrom,DataOutputStream dos){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectPositional_ME_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200557,skilltarget,skillcaster,skillname);}  }
class C{  public void unload() throws StartupException {  SplashLoader.close();}  }
class C{  @Override public void startDocument(XMLLocator locator,String encoding,NamespaceContext namespaceContext,Augmentations augs) throws XNIException {  fNamespaceContext=namespaceContext;  try {    if (fDocumentHandler != null) {      if (locator != null) {        fDocumentHandler.setDocumentLocator(new LocatorProxy(locator));      }      if (fDocumentHandler != null) {        fDocumentHandler.startDocument();      }    }    if (fContentHandler != null) {      if (locator != null) {        fContentHandler.setDocumentLocator(new LocatorProxy(locator));      }      if (fContentHandler != null) {        fContentHandler.startDocument();      }    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  public int compare(Object o1,Object o2){  Split split1=(Split)o1;  return split1.compareTo(o2);}  }
class C{  public IdParser createIdParser(){  final IdParser idParser=new IdParser(this);  idParser.setAlgorithm(algorithm);  return idParser;}  }
class C{  public void put(Map<String,Object> base,T value){  if (this.isEmpty) {    return;  }  if (base == null) {    throw new IllegalArgumentException("Cannot put a value in a null base Map");  }  try {    UelUtil.setValue(base,getExpression(base),value == null ? Object.class : value.getClass(),value);  } catch (  Exception e) {    Debug.logError("UEL exception while setting value: " + e + ", original = "+ this.original,module);  }}  }
class C{  private boolean selectByMouseInLegendPanel(LegendPanel legendPanel,Point point,ChartSelection chartSelection){  SelectionGraphics<String[]> selectionGraphics=new SelectionGraphics<>(getGraphics());  selectionGraphics.setMouseLocation(point);  legendPanel.paint(selectionGraphics);  Set<String> seriesToSelect=new HashSet<>();  Set<String> classesToSelect=new HashSet<>();  for (  String[] pair : selectionGraphics.getSelectedItems()) {    if (pair[0] != null) {      seriesToSelect.add(pair[0]);    }    if (pair[1] != null) {      classesToSelect.add(pair[1]);    }  }  if (seriesToSelect.size() > 0)   chartSelection.setSelectedSeries(seriesToSelect,true);  if (classesToSelect.size() > 0)   chartSelection.setSelectedClass(classesToSelect,true);  return seriesToSelect.size() > 0 || classesToSelect.size() > 0;}  }
class C{  private void add(final NestedLoops node) throws MathIllegalArgumentException {  for (  final NestedLoops child : surrounded) {    if (child.polygon.contains(node.polygon)) {      child.add(node);      return;    }  }  for (final Iterator<NestedLoops> iterator=surrounded.iterator(); iterator.hasNext(); ) {    final NestedLoops child=iterator.next();    if (node.polygon.contains(child.polygon)) {      node.surrounded.add(child);      iterator.remove();    }  }  RegionFactory<Euclidean2D> factory=new RegionFactory<Euclidean2D>();  for (  final NestedLoops child : surrounded) {    if (!factory.intersection(node.polygon,child.polygon).isEmpty()) {      throw new MathIllegalArgumentException(LocalizedGeometryFormats.CROSSING_BOUNDARY_LOOPS);    }  }  surrounded.add(node);}  }
class C{  private void digitsSlashDigitsToWords(WordRelation wordRelation,Item tokenItem,String tokenVal){  int index=tokenVal.indexOf('/');  String aaa=tokenVal.substring(0,index);  String bbb=tokenVal.substring(index + 1);  int a, b;  if (matches(digitsPattern,(String)tokenItem.findFeature("p.name")) && tokenItem.getPrevious() != null) {    wordRelation.addWord(tokenItem,"and");  }  if (aaa.equals("1") && bbb.equals("2")) {    wordRelation.addWord(tokenItem,"a");    wordRelation.addWord(tokenItem,"half");  } else   if ((a=Integer.parseInt(aaa)) < (b=Integer.parseInt(bbb))) {    NumberExpander.expandNumber(aaa,wordRelation,tokenItem);    NumberExpander.expandOrdinal(bbb,wordRelation,tokenItem);    if (a > 1) {      wordRelation.addWord(tokenItem,"'s");    }  } else {    NumberExpander.expandNumber(aaa,wordRelation,tokenItem);    wordRelation.addWord(tokenItem,"slash");    NumberExpander.expandNumber(bbb,wordRelation,tokenItem);  }}  }
class C{  public static float readSwappedFloat(InputStream input) throws IOException {  return Float.intBitsToFloat(readSwappedInteger(input));}  }
class C{  @Override public int compareTo(ComponentDescription o){  int myPos=0;  int oPos=0;  if (this instanceof LanguageComponentDescription) {    myPos=5;  } else   if (this instanceof VoiceComponentDescription) {    myPos=10;  }  if (o instanceof LanguageComponentDescription) {    oPos=5;  } else   if (o instanceof VoiceComponentDescription) {    oPos=10;  }  if (oPos - myPos != 0) {    return (oPos - myPos);  }  return name.compareTo(o.name);}  }
class C{  @Override public Element createElementNS(String namespaceURI,String qualifiedName) throws DOMException {  return new PSVIElementNSImpl(this,namespaceURI,qualifiedName);}  }
class C{  public static void updateFloat(VisualItem item,String field,float val){  item.setFloat(getStartField(field),item.getFloat(field));  item.setFloat(field,val);  item.setFloat(getEndField(field),val);}  }
class C{  protected void writeNetscapeExt() throws IOException {  out.write(0x21);  out.write(0xff);  out.write(11);  writeString("NETSCAPE" + "2.0");  out.write(3);  out.write(1);  writeShort(repeat);  out.write(0);}  }
class C{  @NotNull public File addExcludedDir(@NotNull String path){  File dir=myFileStructure.createProjectDir(path);  myExcludedDirs.add(dir);  return dir;}  }
class C{  public static boolean hasJellyBeanMr2(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2;}  }
class C{  public void selectDataSource(final DataSource dataSource){  if (dataSource == null)   return;  selectDataSources(Collections.singleton(dataSource));}  }
class C{  public void updateLogo(Logo logo){  if (logo == null) {    updateLogo(getDefaultLogo(),null,true);  } else {    String contentDescription=TextUtils.isEmpty(logo.altText) ? null : getResources().getString(R.string.accessibility_google_doodle,logo.altText);    updateLogo(logo.image,contentDescription,false);  }}  }
class C{  public Heal(EntityLivingBase living,float healAmount){  super(living);  this.healAmount=healAmount;}  }
class C{  private void initModel(){  this.pagerManageModel=new PagerManageObject(0);}  }
class C{  public FaveGetMarketItemsQuery(VkApiClient client,UserActor actor){  super(client,"fave.getMarketItems",GetMarketItemsResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,String permissions[],int[] grantResults){  try {    cordovaInterface.onRequestPermissionResult(requestCode,permissions,grantResults);  } catch (  JSONException e) {    LOG.d(TAG,"JSONException: Parameters fed into the method are not valid");    e.printStackTrace();  }}  }
class C{  public synchronized final void reschedule(long period){  _period=period;  wakeUp();}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public int diff_commonSuffix(String text1,String text2){  int text1_length=text1.length();  int text2_length=text2.length();  int n=Math.min(text1_length,text2_length);  for (int i=1; i <= n; i++) {    if (text1.charAt(text1_length - i) != text2.charAt(text2_length - i)) {      return i - 1;    }  }  return n;}  }
class C{  @POST @Path("{experimentID}/exclusions") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @ApiOperation(value="Create mutual exclusion rules for an experiment",notes="Can only create mutual exclusion rules for experiments in DRAFT, " + "RUNNING, and PAUSED states within+" + "the same application") @Timed public Response createExclusions(@PathParam("experimentID") @ApiParam(value="Experiment ID") final Experiment.ID experimentID,final ExperimentIDList experimentIDList,@HeaderParam(AUTHORIZATION) @ApiParam(value=EXAMPLE_AUTHORIZATION_HEADER,required=true) final String authorizationHeader){  Username userName=authorization.getUser(authorizationHeader);  Experiment experiment=experiments.getExperiment(experimentID);  if (experiment == null) {    throw new ExperimentNotFoundException(experimentID);  }  authorization.checkUserPermissions(userName,experiment.getApplicationName(),CREATE);  UserInfo user=authorization.getUserInfo(userName);  List<Map> exclusions=mutex.createExclusions(experimentID,experimentIDList,user);  return httpHeader.headers(CREATED).entity(ImmutableMap.<String,Object>builder().put("exclusions",exclusions).build()).build();}  }
class C{  public void openSelectedFiles(){  StringBuilder buf=new StringBuilder();  int count=0;  Set<String> openFiles=getCurrentlyOpenRemoteFiles();  for (  String fileName : getSelectedFiles()) {    if (openFiles.contains(fileName)) {      buf.append("toFront file='").append(fileName).append("';");    } else {      buf.append("open file='").append(fileName).append("' readOnly=true;");      count++;    }  }  if (count > 10) {    if (JOptionPane.showConfirmDialog(remoteServiceBrowser.getFrame(),"Do you really want to open " + count + " new files?","Confirm",JOptionPane.YES_NO_OPTION) == JOptionPane.NO_OPTION)     return;  }  Director dir=remoteServiceBrowser.getDir();  dir.execute(buf.toString(),remoteServiceBrowser.getCommandManager());}  }
class C{  protected boolean needsAccessor(polyglot.types.MemberInstance inst){  if (inst.flags().isPrivate()) {    if (!Util.getSootType(inst.container()).equals(body.getMethod().getDeclaringClass().getType())) {      return true;    }  } else   if (inst.flags().isProtected()) {    if (Util.getSootType(inst.container()).equals(body.getMethod().getDeclaringClass().getType())) {      return false;    }    soot.SootClass currentClass=body.getMethod().getDeclaringClass();    if (currentClass.getSuperclass().getType().equals(Util.getSootType(inst.container()))) {      return false;    }    while (currentClass.hasOuterClass()) {      currentClass=currentClass.getOuterClass();      if (Util.getSootType(inst.container()).equals(currentClass.getType())) {        return false;      } else       if (Util.getSootType(inst.container()).equals(currentClass.getSuperclass().getType())) {        return true;      }    }    return false;  }  return false;}  }
class C{  public CacheException(){  super();}  }
class C{  @Override public void registerTool(Class<?> nodeType,ToolInterface toolToRegister){  ToolInterface uniqueTool=uniqueToolMap.get(toolToRegister.getClass());  if (uniqueTool == null) {    uniqueToolMap.put(toolToRegister.getClass(),toolToRegister);    uniqueTool=toolToRegister;  }  List<ToolInterface> toolList=toolMap.get(nodeType);  if (toolList == null) {    toolList=new ArrayList<ToolInterface>();    toolMap.put(nodeType,toolList);  }  toolList.add(uniqueTool);  logger.debug("Registered tool : " + uniqueTool.getToolName() + " for "+ nodeType.getName());}  }
class C{  private static void processAutomaticSignIn(Context appContext,int signinType){  final Account[] googleAccounts=AccountManagerHelper.get(appContext).getGoogleAccounts();  SigninManager signinManager=SigninManager.get(appContext);  if (!FeatureUtilities.canAllowSync(appContext) || !signinManager.isSignInAllowed() || googleAccounts.length != 1) {    return;  }  signinManager.signInToSelectedAccount(null,googleAccounts[0],signinType,SigninManager.SIGNIN_SYNC_IMMEDIATELY,false,null);}  }
class C{  public AemTextArea typeNewLine(){  return type(NEW_LINE_CHARACTER);}  }
class C{  @Override public void confirm(){  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(activateButton));}  }
class C{  public RealVectorFormat(final String prefix,final String suffix,final String separator){  this(prefix,suffix,separator,CompositeFormat.getDefaultNumberFormat());}  }
class C{  private static Interpolator createInterpolator(int type){switch (type) {case INTERP_ACCELERATE:    return new AccelerateInterpolator();case INTERP_DECELERATE:  return new DecelerateInterpolator();case INTERP_ACCELERATE_DECELERATE:return new AccelerateDecelerateInterpolator();default :return new LinearInterpolator();}}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  String firstLine=Basic.getFirstLineFromFile(new File(fileName));  return firstLine != null && (firstLine.startsWith("# FORMAT.Blast") || firstLine.startsWith("# BLAST") || firstLine.split("\t").length == 12);}  }
class C{  public void justSelected(){  setCachedExpression(generateExpression());  setValueFieldState();}  }
class C{  public static String encode(String value,Map<String,Object> context){  if (UtilValidate.isEmpty(value)) {    return value;  }  UtilCodec.SimpleEncoder encoder=(UtilCodec.SimpleEncoder)context.get("simpleEncoder");  if (encoder != null) {    value=encoder.encode(value);  } else {    value=UtilCodec.getEncoder("string").encode(value);  }  return value;}  }
class C{  public MessagesGetChatUsersQueryWithFields(VkApiClient client,UserActor actor,List<UserField> fields){  super(client,"messages.getChatUsers",Utils.buildParametrizedType(List.class,UserXtrInvitedBy.class));  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  public AnnotationDefaultAttr(ElemValPair s){  elem=s;}  }
class C{  @deprecated public void compact(boolean exhaustive){  if (!this.isCompact) {    int limitCompacted=0;    int iBlockStart=0;    char iUntouched=65535;    for (int i=0; i < this.indices.length; iBlockStart+=128) {      this.indices[i]=65535;      boolean touched=blockTouched(i);      if ((!touched) && (iUntouched != 65535)) {        this.indices[i]=iUntouched;      } else {        int jBlockStart=0;        int j=0;        for (j=0; j < limitCompacted; jBlockStart+=128) {          if ((this.hashes[i] == this.hashes[j]) && (arrayRegionMatches(this.values,iBlockStart,this.values,jBlockStart,128))) {            this.indices[i]=((char)jBlockStart);            break;          }          j++;        }        if (this.indices[i] == 65535) {          System.arraycopy(this.values,iBlockStart,this.values,jBlockStart,128);          this.indices[i]=((char)jBlockStart);          this.hashes[j]=this.hashes[i];          limitCompacted++;          if (!touched) {            iUntouched=(char)jBlockStart;          }        }      }      i++;    }    int newSize=limitCompacted * 128;    byte[] result=new byte[newSize];    System.arraycopy(this.values,0,result,0,newSize);    this.values=result;    this.isCompact=true;    this.hashes=null;  }}  }
class C{  public static void logThreadStarting(final String threadName){  Thread.currentThread().setName(APP_NAME + " [" + threadName+ "]");  logThreadStarting();}  }
class C{  public static boolean hasFlagSameLine(CharSequence sequence,char flag,int fromIndex){  for (int i=fromIndex; i < sequence.length(); i++) {    char c=sequence.charAt(i);    if (c == NEW_LINE) {      return false;    }    if (c == flag) {      return i != fromIndex;    }  }  return false;}  }
class C{  public Builder paddingTopLeft(Point paddingTopLeft){  this.paddingTopLeft=paddingTopLeft;  return this;}  }
class C{  public static void stopMostRecentTimer(){  try {    stopTiming(RLOG.get().mostRecentTimer.name);  } catch (  NullPointerException ignored) {    LOG.warn("Stopping timing failed because mostRecentTimer wasn't registered.");  }}  }
class C{  @Override public final void disconnect(){  wrappedSender.disconnect();}  }
class C{  public MersenneTwister(long seed){  mt=new int[N];  setSeed(seed);}  }
class C{  public NotesDeleteCommentQuery deleteComment(UserActor actor,int commentId){  return new NotesDeleteCommentQuery(getClient(),actor,commentId);}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  public static void clickButtonYoutube(){  RewiMod.getInstance().openUrl("https://www.youtube.com/user/rewinside/");}  }
class C{  public static Date parseDate(String dateStr){  String formatString="";  if (dateStr.length() == 16)   dateStr=dateStr.substring(0,14);  if (dateStr.length() == 15)   formatString="yyyyMMdd'T'hhmmss";  if (dateStr.length() == 8)   formatString="yyyyMMdd";  SimpleDateFormat formatter=new SimpleDateFormat(formatString);  ParsePosition pos=new ParsePosition(0);  return formatter.parse(dateStr,pos);}  }
class C{  public final boolean removeRuleId(final Long pId){  if (this.ruleIds.contains(pId)) {    this.ruleIds.remove(pId);    this.tagChange=CHANGE_CONFIGURATION;    return true;  } else {    return false;  }}  }
class C{  public final static <T extends Bean>List<T> load(String table,String[] cols,String where,Object[] args,Class<T> clazz){  return load(table,cols,where,args,null,-1,-1,clazz);}  }
class C{  public TestCaseStep(final String stepNumber,final String description,final TestCaseStatus status,final String info){  this.stepNumber=stepNumber;  this.description=description;  this.status=status;  this.executionInfo=info;}  }
class C{  public JmsTopicListener(Delegator delegator,String jndiServer,String jndiName,String topicName,String userName,String password){  super(delegator);  this.jndiServer=jndiServer;  this.jndiName=jndiName;  this.topicName=topicName;  this.userName=userName;  this.password=password;}  }
class C{  private void createMJPEGFormat(){  videoFormat=new VideoFormat(VideoFormat.MJPG,new Dimension(mip.getMWidth(),mip.getMHeight()),Format.NOT_SPECIFIED,Format.byteArray,mip.getFPS());}  }
class C{  public boolean canAddSingleRecord(){  return singleRecordSupported;}  }
class C{  public boolean add_tags(){  return soot.PhaseOptions.getBoolean(options,"add-tags");}  }
class C{  public boolean isEmpty(){synchronized (contents) {    return (contents.isEmpty());  }}  }
class C{  private void nextOperation(){  Pair<Target,RemoteOperation> next=null;synchronized (mPendingOperations) {    next=mPendingOperations.peek();  }  if (next != null) {    mCurrentOperation=next.second;    RemoteOperationResult result=null;    try {      if (mLastTarget == null || !mLastTarget.equals(next.first)) {        mLastTarget=next.first;        if (mLastTarget.mAccount != null) {          OwnCloudAccount ocAccount=new OwnCloudAccount(mLastTarget.mAccount,mService);          mOwnCloudClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,mService);          OwnCloudVersion version=com.owncloud.android.authentication.AccountUtils.getServerVersion(mLastTarget.mAccount);          mOwnCloudClient.setOwnCloudVersion(version);          mStorageManager=new FileDataStorageManager(mLastTarget.mAccount,mService.getContentResolver());        } else {          OwnCloudCredentials credentials=null;          if (mLastTarget.mCookie != null && mLastTarget.mCookie.length() > 0) {            credentials=OwnCloudCredentialsFactory.newSamlSsoCredentials(null,mLastTarget.mCookie);          }          OwnCloudAccount ocAccount=new OwnCloudAccount(mLastTarget.mServerUrl,credentials);          mOwnCloudClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,mService);          mStorageManager=null;        }      }      if (mCurrentOperation instanceof SyncOperation) {        result=((SyncOperation)mCurrentOperation).execute(mOwnCloudClient,mStorageManager);      } else {        result=mCurrentOperation.execute(mOwnCloudClient);      }    } catch (    AccountsException e) {      if (mLastTarget.mAccount == null) {        Log_OC.e(TAG,"Error while trying to get authorization for a NULL account",e);      } else {        Log_OC.e(TAG,"Error while trying to get authorization for " + mLastTarget.mAccount.name,e);      }      result=new RemoteOperationResult(e);    }catch (    IOException e) {      if (mLastTarget.mAccount == null) {        Log_OC.e(TAG,"Error while trying to get authorization for a NULL account",e);      } else {        Log_OC.e(TAG,"Error while trying to get authorization for " + mLastTarget.mAccount.name,e);      }      result=new RemoteOperationResult(e);    }catch (    Exception e) {      if (mLastTarget.mAccount == null) {        Log_OC.e(TAG,"Unexpected error for a NULL account",e);      } else {        Log_OC.e(TAG,"Unexpected error for " + mLastTarget.mAccount.name,e);      }      result=new RemoteOperationResult(e);    } finally {synchronized (mPendingOperations) {        mPendingOperations.poll();      }    }    mService.dispatchResultToOperationListeners(mCurrentOperation,result);  }}  }
class C{  void onLoadFailed(int errorCode){  if (mRestoreStartedAtMillis != -1 && mLastShowMillis >= mRestoreStartedAtMillis) {    recordTabRestoreResult(false,-1,-1,errorCode);  }  mRestoreStartedAtMillis=-1;}  }
class C{  public void afterStart(){}  }
class C{  public static <T>T checkNotNull(T reference){  if (reference == null) {    throw new NullPointerException();  }  return reference;}  }
class C{  @Override public boolean isElementContentWhitespace(){  if (needsSyncData()) {    synchronizeData();  }  return internalIsIgnorableWhitespace();}  }
class C{  public static final String[] splitToWords(String sStr){  return splitToWords(sStr,false);}  }
class C{  public Set<R> rowKeySet(){  return dataMap.keySet();}  }
class C{  public static String stripInitialWhitespace(String s){  int i=0;  while ((i < s.length()) && charInString(s.charAt(i),whitespace))   i++;  return s.substring(i);}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  public PhotosRestoreCommentQuery restoreComment(UserActor actor,int commentId){  return new PhotosRestoreCommentQuery(getClient(),actor,commentId);}  }
class C{  public static File stripSuffix(@NotNull File file,@NotNull String suffix){  if (file.getName().endsWith(suffix)) {    String name=file.getName();    name=name.substring(0,name.length() - suffix.length());    File parent=file.getParentFile();    if (parent != null) {      return new File(parent,name);    } else {      return new File(name);    }  }  return file;}  }
class C{  @Nullable public static String readTextFileFromRawResource(@NonNull final Context context,@RawRes final int resId){  final BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(context.getResources().openRawResource(resId)));  String line;  final StringBuilder body=new StringBuilder();  try {    while ((line=bufferedReader.readLine()) != null) {      body.append(line).append('\n');    }  } catch (  IOException e) {    return null;  }  return body.toString();}  }
class C{  protected FriendsGetRequestsQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  public Vector zero(){  x=0;  y=0;  z=0;  return this;}  }
class C{  @Override protected void synchronizeChildren(){  boolean orig=ownerDocument().getMutationEvents();  ownerDocument().setMutationEvents(false);  needsSyncChildren(false);  DeferredDocumentImpl ownerDocument=(DeferredDocumentImpl)this.ownerDocument;  entities=new NamedNodeMapImpl(this);  notations=new NamedNodeMapImpl(this);  elements=new NamedNodeMapImpl(this);  DeferredNode last=null;  for (int index=ownerDocument.getLastChild(fNodeIndex); index != -1; index=ownerDocument.getPrevSibling(index)) {    DeferredNode node=ownerDocument.getNodeObject(index);    int type=node.getNodeType();switch (type) {case Node.ENTITY_NODE:{        entities.setNamedItem(node);        break;      }case Node.NOTATION_NODE:{      notations.setNamedItem(node);      break;    }case NodeImpl.ELEMENT_DEFINITION_NODE:{    elements.setNamedItem(node);    break;  }case Node.ELEMENT_NODE:{  if (((DocumentImpl)getOwnerDocument()).allowGrammarAccess) {    insertBefore(node,last);    last=node;    break;  }}default :{System.out.println("DeferredDocumentTypeImpl" + "#synchronizeInfo: " + "node.getNodeType() = " + node.getNodeType() + ", class = "+ node.getClass().getName());}}}ownerDocument().setMutationEvents(orig);setReadOnly(true,false);}  }
class C{  public int childPosition(int level){  return (int)(id >>> (2 * (MAX_LEVEL - level) + 1)) & 3;}  }
class C{  @Override public XSObject itemByName(String namespace,String localName){  for (int i=0; i < fNSNum; i++) {    if (isEqual(namespace,fNamespaces[i])) {      if (fMaps != null) {        return (XSObject)fMaps[i].get(localName);      }      XSObject ret;      for (int j=0; j < fLength; j++) {        ret=fArray[j];        if (ret.getName().equals(localName)) {          return ret;        }      }      return null;    }  }  return null;}  }
class C{  public static String separatorsToWindows(String path){  if (path == null || path.indexOf(UNIX_SEPARATOR) == -1) {    return path;  }  return path.replace(UNIX_SEPARATOR,WINDOWS_SEPARATOR);}  }
class C{  private void populateDuration(TimePeriodPanel timePeriodPanel,Duration duration){  if (timePeriodPanel == null) {    return;  }  if (timePeriodPanel.areFieldsConfigured()) {    if (timePeriodPanel.dateModel != null) {      if (duration.isDate()) {        timePeriodPanel.dateRadioButton.setSelected(true);        timePeriodPanel.dateModel.setValue(duration.getDate());        timePeriodPanel.timePicker.setValue(duration.getDate());      } else {        timePeriodPanel.durationRadioButton.setSelected(true);        timePeriodPanel.yearSpinner.setValue(duration.getDurationYears());        timePeriodPanel.monthSpinner.setValue(duration.getDurationMonths());        timePeriodPanel.daySpinner.setValue(duration.getDurationDays());        timePeriodPanel.hourSpinner.setValue(duration.getDurationHours());        timePeriodPanel.minuteSpinner.setValue(duration.getDurationMinutes());        timePeriodPanel.secondSpinner.setValue(duration.getDurationSeconds());      }      updateFields(timePeriodPanel);    }  }}  }
class C{  public int keyAt(int index){  return mKeys[index];}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IsLessThenImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 3)) {    filter=new IsLessThanExtended();  } else {    LiteralExpressionImpl matchCase=(LiteralExpressionImpl)parameterList.get(2);    filter=new IsLessThanExtended(parameterList.get(0),parameterList.get(1),(Boolean)matchCase.getValue());  }  return filter;}  }
class C{  public <RES>MatcherNext<RES,ARG> as(){  return new MatcherNext<>(arg);}  }
class C{  public NonSymmetricMatrixException(int row,int column,double threshold){  super(org.hipparchus.migration.exception.util.LocalizedFormats.NON_SYMMETRIC_MATRIX,row,column,threshold);  this.row=row;  this.column=column;  this.threshold=threshold;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_MY_EXP_GAIN(String value0){  return new SM_SYSTEM_MESSAGE(1370001,value0);}  }
class C{  @Override public boolean isEnabled(){  if ((attributeSelectionPanel != null) && !isValueOnly()) {    return attributeSelectionPanel.isEnabled();  } else {    if (datePicker != null) {      return datePicker.isEnabled();    }  }  return false;}  }
class C{  public static Histogram divide(Histogram x,double y){  return x.modifyEventCounters(null);}  }
class C{  private String unshortenUrl(String shortURL){  if (!shortURL.startsWith(HTTP_PROTOCOL) && !shortURL.startsWith(HTTPS_PROTOCOL))   return "";  URLConnection urlConn=connectURL(shortURL);  urlConn.getHeaderFields();  String finalResult=urlConn.getURL().toString();  urlConn=connectURL(finalResult);  urlConn.getHeaderFields();  shortURL=urlConn.getURL().toString();  while (!shortURL.equals(finalResult)) {    finalResult=unshortenUrl(finalResult);  }  return finalResult;}  }
class C{  @Override public void populateField(List<FeatureTypeConstraint> valueList){  if (filterModel != null) {    if (valueList != null) {      filterModel.populate(valueList);      UndoManager.getInstance().addUndoEvent(new UndoEvent(this,getFieldId(),oldValueObj,valueList));      oldValueObj=valueList;      valueUpdated();    }  }}  }
class C{  private String doRawStream(BOMInputStream bom,BOMInputStream pis,boolean lenient) throws IOException {  String bomEnc=bom.getBOMCharsetName();  String xmlGuessEnc=pis.getBOMCharsetName();  String xmlEnc=getXmlProlog(pis,xmlGuessEnc);  try {    return calculateRawEncoding(bomEnc,xmlGuessEnc,xmlEnc);  } catch (  XmlStreamReaderException ex) {    if (lenient) {      return doLenientDetection(null,ex);    } else {      throw ex;    }  }}  }
class C{  public void clear(){  initialize();}  }
class C{  public void lockUserInput(){  locked=true;  commandManager.setEnableCritical(false);}  }
class C{  public DetailsViewConfiguration(double topHorizontalDividerLocation,double topHorizontalDividerResizeWeight,double bottomHorizontalDividerLocation,double bottomHorizontalDividerResizeWeight,double verticalDividerLocation,double verticalDividerResizeWeight){  this.topHorizontalDividerLocation=topHorizontalDividerLocation;  this.topHorizontalDividerResizeWeight=topHorizontalDividerResizeWeight;  this.bottomHorizontalDividerLocation=bottomHorizontalDividerLocation;  this.bottomHorizontalDividerResizeWeight=bottomHorizontalDividerResizeWeight;  this.verticalDividerLocation=verticalDividerLocation;  this.verticalDividerResizeWeight=verticalDividerResizeWeight;}  }
class C{  private void tryScrollBackToTop(){  if (!mPtrIndicator.isUnderTouch() && mPtrIndicator.hasLeftStartPosition()) {    mScrollChecker.tryToScrollTo(PtrIndicator.POS_START,mDurationToCloseHeader);  }}  }
class C{  public Matcher(Field.XPath xpath,ValueStore store){  super(xpath);  fStore=store;}  }
class C{  protected void init(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){  assertIsMutable();  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  this.modelEntity=modelEntity;  this.entityName=modelEntity.getEntityName();  this.delegatorName=delegator.getDelegatorName();  this.internalDelegator=delegator;  this.observable=new Observable();  setFields(fields);  if (this.entityName == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null entityName in the modelEntity parameter");  }}  }
class C{  @Override public void endExternalSubset(Augmentations augs) throws XNIException {  fInDTDExternalSubset=false;  fBaseURIStack.pop();}  }
class C{  public Builder addColumnsDouble(String... columnNames){  for (  String s : columnNames)   addColumnDouble(s);  return this;}  }
class C{  public double distanceSquared(double x,double y){  double dx=this.x - x;  double dy=this.y - y;  return dx * dx + dy * dy;}  }
class C{  public void createMaterialZoneTemplate(Spatial geometry,int worldId,int materialId,boolean failOnMissing){  ZoneName zoneName=null;  if (failOnMissing) {    zoneName=ZoneName.get(geometry.getName() + "_" + worldId);  } else {    zoneName=ZoneName.createOrGet(geometry.getName() + "_" + worldId);  }  if (zoneName.name().equals(ZoneName.NONE)) {    return;  }  ZoneHandler handler=collidableHandlers.get(zoneName);  if (handler == null) {    if (materialId == 11) {      if (GeoDataConfig.GEO_SHIELDS_ENABLE) {        handler=new SiegeShield(geometry);        ShieldService.getInstance().registerShield(worldId,(SiegeShield)handler);      } else {        return;      }    } else {      MaterialTemplate template=DataManager.MATERIAL_DATA.getTemplate(materialId);      if (template == null) {        return;      }      handler=new MaterialZoneHandler(geometry,template);    }    collidableHandlers.put(zoneName,handler);  } else {  }  Collection<ZoneInfo> areas=this.zoneByMapIdMap.get(worldId);  if (areas == null) {    this.zoneByMapIdMap.put(worldId,new ArrayList<ZoneInfo>());    areas=this.zoneByMapIdMap.get(worldId);  }  ZoneInfo zoneInfo=null;  for (  ZoneInfo area : areas) {    if (area.getZoneTemplate().getName().equals(zoneName)) {      zoneInfo=area;      break;    }  }  if (zoneInfo == null) {    MaterialZoneTemplate zoneTemplate=new MaterialZoneTemplate(geometry,worldId);    Area zoneInfoArea=null;    if (zoneTemplate.getSphere() != null) {      zoneInfoArea=new SphereArea(zoneName,worldId,zoneTemplate.getSphere().getX(),zoneTemplate.getSphere().getY(),zoneTemplate.getSphere().getZ(),zoneTemplate.getSphere().getR());    } else     if (zoneTemplate.getCylinder() != null) {      zoneInfoArea=new CylinderArea(zoneName,worldId,zoneTemplate.getCylinder().getX(),zoneTemplate.getCylinder().getY(),zoneTemplate.getCylinder().getR(),zoneTemplate.getCylinder().getBottom(),zoneTemplate.getCylinder().getTop());    } else     if (zoneTemplate.getSemisphere() != null) {      zoneInfoArea=new SemisphereArea(zoneName,worldId,zoneTemplate.getSemisphere().getX(),zoneTemplate.getSemisphere().getY(),zoneTemplate.getSemisphere().getZ(),zoneTemplate.getSemisphere().getR());    }    if (zoneInfoArea != null) {      zoneInfo=new ZoneInfo(zoneInfoArea,zoneTemplate);      areas.add(zoneInfo);    }  }}  }
class C{  private Object deserializePrimitive(PrimitiveTypeInfo type,Object value) throws SerDeException {switch (type.getPrimitiveCategory()) {case VOID:    return null;case STRING:  return deserializeString(value);case BOOLEAN:return deserializeBoolean(value);case BYTE:case SHORT:case INT:case LONG:case FLOAT:case DOUBLE:return deserializeNumber(value,type);case DATE:case TIMESTAMP:return deserializeDate(value,type);default :throw new SerDeException("Unsupported type: " + type.getPrimitiveCategory());}}  }
class C{  boolean modifyTxnState(int state){  if (finer_op_logger) {    operationsLogger.entering(TxnManagerTransaction.class.getName(),"modifyTxnState",new Integer(state));  }  if (state != ACTIVE && state != VOTING && state != COMMITTED && state != ABORTED) {    if (state != PREPARED || _externalXid == null) {      throw new IllegalArgumentException("TxnManagerTransaction: " + "modifyTxnState: invalid state");    }  }  boolean result=false;  while (true) {    int curState=_trState;    result=(_externalXid != null) ? subManagerStates[curState][state] : states[curState][state];    if (result) {      if (_stateUpdater.compareAndSet(this,curState,state))       break;    } else     break;  }  if (finer_op_logger) {    operationsLogger.exiting(TxnManagerTransaction.class.getName(),"modifyTxnState",Boolean.valueOf(result));  }  return result;}  }
class C{  public static void share(boolean shareDirectly,Activity activity,String title,String url,Bitmap screenshot){  if (shareDirectly) {    shareWithLastUsed(activity,title,url,screenshot);  } else   if (TargetChosenReceiver.isSupported()) {    makeIntentAndShare(activity,title,url,screenshot,null);  } else {    showShareDialog(activity,title,url,screenshot);  }}  }
class C{  public boolean isSetServerMessageId(){  return this.serverMessageId != null;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public GroupsGetMembersQueryWithFields(VkApiClient client,Actor actor,List<UserField> fields){  super(client,"groups.getMembers",GetMembersFieldsResponse.class);  accessToken(actor.getAccessToken());  fields(fields);}  }
class C{  public Object onMessage(String id,Object data){  if (id.equals("telephone")) {    if ("ringing".equals(data) || "offhook".equals(data)) {      for (      AudioPlayer audio : this.players.values()) {        if (audio.getState() == AudioPlayer.STATE.MEDIA_RUNNING.ordinal()) {          this.pausedForPhone.add(audio);          audio.pausePlaying();        }      }    } else     if ("idle".equals(data)) {      for (      AudioPlayer audio : this.pausedForPhone) {        audio.startPlaying(null);      }      this.pausedForPhone.clear();    }  }  return null;}  }
class C{  public void render(Graphics2D g){  AffineTransform ot=g.getTransform();  AffineTransform lt=new AffineTransform();  lt.translate(this.transform.getTranslationX() * SCALE,this.transform.getTranslationY() * SCALE);  lt.rotate(this.transform.getRotation());  g.transform(lt);  for (  BodyFixture fixture : this.fixtures) {    Convex convex=fixture.getShape();    Graphics2DRenderer.render(g,convex,SCALE,color);  }  g.setTransform(ot);}  }
class C{  public ServiceType(){}  }
class C{  public Configurator fromAsset(String assetName){  InputStream stream=null;  try {    stream=getContext().getAssets().open(assetName);    return new Configurator(assetName,true);  } catch (  IOException e) {    throw new FileNotFoundException(assetName + " does not exist.",e);  } finally {    try {      if (stream != null) {        stream.close();      }    } catch (    IOException e) {    }  }}  }
class C{  public boolean isSetRequestInfo(){  return this.requestInfo != null;}  }
class C{  protected void computeTotalDuration() throws MaryConfigurationException {  long time=0;  long nRead=0;  boolean haveReadAll=false;  try {    Pair<ByteBuffer,Long> p=getByteBufferAtTime(0);    ByteBuffer bb=p.getFirst();    assert p.getSecond() == 0;    while (!haveReadAll) {      Datagram dat=getNextDatagram(bb);      if (dat == null) {        p=getByteBufferAtTime(time);        bb=p.getFirst();        assert p.getSecond() == time;        dat=getNextDatagram(bb);        if (dat == null) {          break;        }      }      assert dat != null;      time+=dat.getDuration();      nRead++;      if (nRead == numDatagrams) {        haveReadAll=true;      }    }  } catch (  Exception e) {    throw new MaryConfigurationException("Could not compute total duration",e);  }  if (!haveReadAll) {    throw new MaryConfigurationException("Could not read all datagrams to compute total duration");  }  totalDuration=time;}  }
class C{  public MultiStartMultivariateOptimizer(final MultivariateOptimizer optimizer,final int starts,final RandomVectorGenerator generator) throws MathIllegalArgumentException, NullArgumentException {  super(optimizer,starts,generator);  this.optimizer=optimizer;}  }
class C{  public BoyerMoore(String pat){  this.R=256;  this.pat=pat;  right=new int[R];  for (int c=0; c < R; c++)   right[c]=-1;  for (int j=0; j < pat.length(); j++)   right[pat.charAt(j)]=j;}  }
class C{  public String requestDiscoveryContent(List<String> cookielist,int pagenum) throws Exception {  URL url=new URL("http://www.hi-pda.com/forum/forumdisplay.php?fid=2&page=" + pagenum);  HttpURLConnection huc=(HttpURLConnection)url.openConnection();  for (  String cookie : cookielist) {    huc.setRequestProperty("Cookie",cookie.split(";",2)[0]);  }  huc.connect();  String line=null;  StringBuilder content=new StringBuilder();  InputStream in=new GZIPInputStream(huc.getInputStream());  BufferedReader bufw=new BufferedReader(new InputStreamReader(in,"gbk"));  StringBuilder writeContent=new StringBuilder();  int count=0;  while ((line=bufw.readLine()) != null) {    String temp=null;    Pattern titlePattern=Pattern.compile(" <span id=\"thread_(.*)span>");    Matcher title=titlePattern.matcher(line.toString().subSequence(0,line.length()));    Pattern numsPattern=Pattern.compile("<td class=\"nums\"><str(.*)td>");    Matcher nums=numsPattern.matcher(line.toString().subSequence(0,line.length()));    Pattern datePattern=Pattern.compile("<em>20(.*)em>");    Matcher date=datePattern.matcher(line.toString().subSequence(0,line.length()));    if (title.matches() == true) {      writeContent=writeContent.append(title.group().replaceAll("[\\x00-\\x08\\x0b-\\x0c\\x0e-\\x1f]",""));    }    if (nums.matches() == true) {      temp=nums.group();      temp=temp.replaceAll("strong","reply");      temp=temp.replaceAll("em","hit");      temp=temp.replaceAll("<td class=\"nums\">","");      temp=temp.replaceAll("</td>","");      int i=temp.indexOf('/');      int j=temp.lastIndexOf('/');      writeContent=writeContent.insert(writeContent.length() - 7,temp);      writeContent.append("\r\n");    }    if (date.matches() == true) {      temp=date.group();      temp=temp.replaceAll("em","date");      writeContent=writeContent.insert(writeContent.length() - 7,temp);    }    content.append(line + "\r\n");  }  return writeContent.toString();}  }
class C{  public CustomConfiguration tryGetHostConfiguration(String hostName,HttpServletRequest request){  try {    return ConfigurationService.getHostConfiguration(hostName,request.getRemoteAddr(),request.getSession().getId());  } catch (  ConfigurationException e) {    Logger.debug(getClass(),"Failed to retrieve host configuration: " + hostName);    return null;  }}  }
class C{  @Override public void onUIRefreshBegin(PtrFrameLayout frame){  mDrawable.setAlpha(255);  mDrawable.start();}  }
class C{  public static int dip2px(Context context,float dipValue){  if (context == null) {    return 0;  }  final float scale=context.getResources().getDisplayMetrics().density;  return (int)(dipValue * scale + 0.5f);}  }
class C{  protected AdsUpdateTargetGroupQuery accountId(int value){  return unsafeParam("account_id",value);}  }
class C{  public static short ulawToShort(byte ulaw){  short ulawbyte=(short)(ulaw + 128);  final int[] exp_lut={0,132,396,924,1980,4092,8316,16764};  int sign, exponent, mantissa;  short sample;  ulawbyte=(short)(ulawbyte & 0x00FF);  ulawbyte=(short)(~ulawbyte);  sign=(ulawbyte & ((short)0x80));  exponent=(ulawbyte & (short)0x00FF) >> 4 & 0x07;  mantissa=ulawbyte & (short)0x0F;  sample=(short)(exp_lut[exponent] + (mantissa << (exponent + 3)));  if (sign != 0)   sample=(short)(-sample);  return sample;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  @Override public List<Period> generatePeriods(Date date){  Calendar cal=createCalendarInstance(date);  cal.add(Calendar.YEAR,cal.get(Calendar.YEAR) % 2 == 0 ? -10 : -9);  cal.set(Calendar.DAY_OF_YEAR,1);  ArrayList<Period> twoYears=new ArrayList<>();  for (int i=0; i < 11; ++i) {    Date startDate=cal.getTime();    cal.add(Calendar.YEAR,1);    cal.set(Calendar.DAY_OF_YEAR,cal.getActualMaximum(Calendar.DAY_OF_YEAR));    twoYears.add(new Period(this,startDate,cal.getTime()));    cal.add(Calendar.DAY_OF_YEAR,1);  }  return twoYears;}  }
class C{  public boolean isItemViewSwipeEnabled(){  initializeItemTouchHelper();  return this.mDefaultItemTouchHelper.isItemViewSwipeEnabled();}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  final megan.remote.RemoteServiceBrowser remoteServiceBrowser=(megan.remote.RemoteServiceBrowser)getViewer();  final megan.remote.ServicePanel servicePanel=remoteServiceBrowser.getServicePanel();  if (servicePanel != null) {    final Collection<String> selectedFiles=remoteServiceBrowser.getServicePanel().getSelectedFiles();    if (selectedFiles.size() > 1) {      CompareWindow compareWindow=new CompareWindow(getViewer().getFrame(),remoteServiceBrowser.getDir(),selectedFiles);      if (!compareWindow.isCanceled()) {        final Director newDir=Director.newProject();        newDir.getMainViewer().getFrame().setVisible(true);        newDir.getMainViewer().setDoReInduce(true);        newDir.getMainViewer().setDoReset(true);        final String command=compareWindow.getCommand();        if (command != null)         newDir.execute(command,newDir.getCommandManager());      }    }  }}  }
class C{  private void updateThumbnailMatrix(){  if (mThumbnail == null)   return;  if (mImageMatrix == null)   mImageMatrix=new Matrix();  float widthScale=(float)getMeasuredWidth() / mThumbnail.getWidth();  float heightScale=(float)getMeasuredHeight() / mThumbnail.getHeight();  float scale=Math.max(widthScale,heightScale);  mImageMatrix.setScale(scale,scale);  setImageMatrix(mImageMatrix);}  }
class C{  private void init(String name){  if (name == null) {    throw new NullPointerException("name cannot be null");  } else   if (name.length() == 0) {    throw new IllegalArgumentException("name cannot be empty");  }  int i=name.lastIndexOf('.');  if (i >= 0) {    iface=name.substring(0,i);    name=name.substring(i + 1);  }  if (!name.equals("*")) {    method=name;  }  if (iface != null && !validClass(iface)) {    throw new IllegalArgumentException("invalid interface name");  } else   if (method != null && !validMethod(method)) {    throw new IllegalArgumentException("invalid method name");  }}  }
class C{  public void addImplements(Access node){  List<Access> list=(parent == null || state == null) ? getImplementsListNoTransform() : getImplementsList();  list.addChild(node);}  }
class C{  public static boolean hasTopCategory(HttpServletRequest request,String categoryId,List<String> pathElements){  if (CategoryWorker.isCategoryTop(request,categoryId)) {    return true;  }  String topCategoryId=CategoryWorker.getTopCategoryFromTrail(request,pathElements);  if (topCategoryId != null) {    return true;  }  List<String> trail=CategoryWorker.getTrail(request);  topCategoryId=CategoryWorker.getTopCategoryFromTrail(request,trail);  if (topCategoryId == null) {    return true;  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Bind_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200775,skilltarget);}  }
class C{  @Override protected final void process(double[] real,double[] imag){  MathUtils.toPolarCoordinates(real,imag);  double[] r=real;  double[] phi=imag;  processPolar(r,phi);  MathUtils.toCartesianCoordinates(real,imag);}  }
class C{  public void dropCache(){  FileUtil.delete(getPreviewCacheDir());}  }
class C{  public void clear(){  preferences.edit().clear().apply();}  }
class C{  public void requestSaveToXML(){  updateXml();  mySaveXmlTimer.reset();}  }
class C{  public String makeStringLiteralSQ(String value){  if (value == null) {    return this.literalSQStringDefault;  } else   if (value.isEmpty()) {    return "''";  } else   if (!value.contains("'")) {    return "r'" + value + "'";  } else {    return "'" + makeStringValueSQ(value) + "'";  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SOUL_BOUND_INVALID_STANCE(int value0){  return new SM_SYSTEM_MESSAGE(1300489,new DescriptionId(value0));}  }
class C{  public AdsGetSuggestionsQueryWithCities country(Integer value){  return unsafeParam("country",value);}  }
class C{  public final TestSubscriber<T> assertComplete(){  assertNoError();  int c=completionCount;  if (c == 0) {    throw new AssertionError("Not completed",null);  }  if (c > 1) {    throw new AssertionError("Multiple completions: " + c,null);  }  return this;}  }
class C{  public int createTextureObject(){  int[] textures=new int[1];  GLES20.glGenTextures(1,textures,0);  GlUtil.checkGlError("glGenTextures");  int texId=textures[0];  GLES20.glBindTexture(textureTarget,texId);  GlUtil.checkGlError("glBindTexture " + texId);  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_NEAREST);  GLES20.glTexParameterf(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_S,GLES20.GL_CLAMP_TO_EDGE);  GLES20.glTexParameteri(GLES11Ext.GL_TEXTURE_EXTERNAL_OES,GLES20.GL_TEXTURE_WRAP_T,GLES20.GL_CLAMP_TO_EDGE);  GlUtil.checkGlError("glTexParameter");  return texId;}  }
class C{  public summaryEvaluator(Semaphore sOutputSemaphore,String sDo,int iWordMin,int iWordMax,int iWordDist,int iCharMin,int iCharMax,int iCharDist,int iThreads,String sOutFile,String sSummaryDir,String sModelDir,boolean bSilent,int iWeightMethod,boolean bProgress){  Do=sDo;  OutputSemaphore=sOutputSemaphore;  WordMin=iWordMin;  WordMax=iWordMax;  WordDist=iWordDist;  CharMin=iCharMin;  CharMax=iCharMax;  CharDist=iCharDist;  Threads=iThreads;  OutFile=sOutFile;  SummaryDir=sSummaryDir;  ModelDir=sModelDir;  Silent=bSilent;  WeightMethod=iWeightMethod;  Progress=bProgress;}  }
class C{  private Set<String> extractFilteredElementNames(Document doc) throws PIRException {  Set<String> filteredNamesSet=new HashSet<>();  NodeList filterNamesList=doc.getElementsByTagName("filterNames");  if (filterNamesList.getLength() != 0) {    if (filterNamesList.getLength() > 1) {      throw new PIRException("filterNamesList.getLength() = " + filterNamesList.getLength() + " -- should be 0 or 1");    }    NodeList filterNList=((Element)filterNamesList.item(0)).getElementsByTagName("name");    for (int i=0; i < filterNList.getLength(); i++) {      Node nNode=filterNList.item(i);      if (nNode.getNodeType() == Node.ELEMENT_NODE) {        String name=nNode.getFirstChild().getNodeValue().trim();        filteredNamesSet.add(name);        logger.info("filterName = " + name);      }    }  }  return filteredNamesSet;}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  public static boolean hasMimeType(String mimeType){  if (mimeType == null || mimeType.isEmpty()) {    return false;  }  return mimeTypeToExtensionMap.containsKey(mimeType);}  }
class C{  public void testPreconditions() throws Exception {  assertNotNull("testMainActivity is null",testMainActivity);  assertNotNull("etMessage is null",etMessage);  assertNotNull("sendMessageLayout is null",sendMessageLayout);  assertNotNull("coordinatorLayout is null",coordinatorLayout);}  }
class C{  private boolean styleExists(String workspaceName,String styleName){  GeoServerRESTManager manager=GeoServerRESTManagerFactory.getManager(connection);  GeoServerRESTReader reader=manager.getReader();  if (reader != null) {    if (isDefaultWorkspace(workspaceName)) {      return reader.existsStyle(styleName,true);    } else {      if (reader.existsWorkspace(workspaceName)) {        return reader.existsStyle(workspaceName,styleName);      }    }  }  return false;}  }
class C{  @Override public void onListItemClick(ListView l,View v,int position,long id){  PhysicalWebUma.onUrlSelected();  PwsResult pwsResult=mAdapter.getItem(position);  Intent intent=createNavigateToUrlIntent(pwsResult);  startActivity(intent);}  }
class C{  public Object jjtAccept(MithraQLVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  private StringObservable(){  throw new IllegalStateException("No instances!");}  }
class C{  public void increment(final double x,final double y){  n++;  final double deltaX=x - meanX;  final double deltaY=y - meanY;  meanX+=deltaX / n;  meanY+=deltaY / n;  covarianceNumerator+=((n - 1.0) / n) * deltaX * deltaY;}  }
class C{  public AuthSignupQuery signup(UserActor actor,String firstName,String lastName,int clientId,String clientSecret,String phone){  return new AuthSignupQuery(getClient(),actor,firstName,lastName,clientId,clientSecret,phone);}  }
class C{  public static User load(String name){  return Helper.load(W.create("name",name).and("deleted",1,W.OP_NEQ).sort("name",1),User.class);}  }
class C{  public AuthConfirmQuery password(String value){  return unsafeParam("password",value);}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonHoming_ME_TO_SELF(String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200424,value0,skillname);}  }
class C{  @Override public void displayQuickInfo(Context context,View view){  try {    Intent intent=new Intent(Intent.ACTION_VIEW);    Uri uri=Uri.withAppendedPath(ContactsContract.Contacts.CONTENT_URI,String.valueOf(contactID));    intent.setData(uri);    context.startActivity(intent);  } catch (  ActivityNotFoundException ex) {    Toast.makeText(context,R.string.no_app_found,Toast.LENGTH_SHORT).show();  }}  }
class C{  public BoardRestoreCommentQuery restoreComment(UserActor actor,int groupId,int topicId,int commentId){  return new BoardRestoreCommentQuery(getClient(),actor,groupId,topicId,commentId);}  }
class C{  public static void startUp() throws Exception {  Registry reg=LocateRegistry.createRegistry(1099);  RemoteDriver d=new RemoteDriverImpl();  reg.rebind("vanilladb-sp",d);}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  public static int discrete(int[] frequencies){  if (frequencies == null)   throw new NullPointerException("argument array is null");  long sum=0;  for (int i=0; i < frequencies.length; i++) {    if (frequencies[i] < 0)     throw new IllegalArgumentException("array entry " + i + " must be nonnegative: "+ frequencies[i]);    sum+=frequencies[i];  }  if (sum == 0)   throw new IllegalArgumentException("at least one array entry must be positive");  if (sum >= Integer.MAX_VALUE)   throw new IllegalArgumentException("sum of frequencies overflows an int");  double r=uniform((int)sum);  sum=0;  for (int i=0; i < frequencies.length; i++) {    sum+=frequencies[i];    if (sum > r)     return i;  }  assert false;  return -1;}  }
class C{  private Map<String,Object> buildResultRow(Result result){  Map<String,Object> row=new LinkedHashMap<>();  row.put("dateTime",result.getTimeStamp().toString(DateTimeFormatterFactory.getOutputFormatter()));  Map<DimensionColumn,DimensionRow> dr=result.getDimensionRows();  for (  Entry<DimensionColumn,DimensionRow> dce : dr.entrySet()) {    DimensionRow drow=dce.getValue();    Dimension dimension=dce.getKey().getDimension();    Set<DimensionField> requestedDimensionFields;    if (requestedApiDimensionFields.get(dimension) != null) {      requestedDimensionFields=requestedApiDimensionFields.get(dimension);      if (requestedDimensionFields.isEmpty()) {        row.put(dimension.getApiName(),drow.get(dimension.getKey()));      } else {        for (        DimensionField dimensionField : requestedDimensionFields) {          row.put(getDimensionColumnName(dimension,dimensionField),drow.get(dimensionField));        }      }    }  }  for (  MetricColumn apiMetricColumn : apiMetricColumns) {    row.put(apiMetricColumn.getName(),result.getMetricValue(apiMetricColumn));  }  return row;}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public void removeIdentifier(String idName){  if (needsSyncData()) {    synchronizeData();  }  if (identifiers == null) {    return;  }  identifiers.remove(idName);}  }
class C{  @Override protected FlowSet entryInitialFlow(){  return emptySet.clone();}  }
class C{  public static JSONArray toJSONArray(JSONTokener x) throws JSONException {  return toJSONArray(rowToJSONArray(x),x);}  }
class C{  @ApiMethod(path="{type}/{id}",verb=ApiVerb.DELETE,description="Gets and deletes the entry from space with the provided id.",produces={MediaType.APPLICATION_JSON_VALUE}) @RequestMapping(value="/{type}/{id}",method=RequestMethod.DELETE,produces={MediaType.APPLICATION_JSON_VALUE}) public @ResponseBody Map<String,Object> deleteById(@ApiPathParam(name="type",description=TYPE_DESCRIPTION) @PathVariable String type,@ApiPathParam(name="id") @PathVariable String id) throws ObjectNotFoundException {  GigaSpace gigaSpace=ControllerUtils.xapCache.get();  Object typedBasedId=getTypeBasedIdObject(gigaSpace,type,id);  if (logger.isLoggable(Level.FINE))   logger.fine("creating takebyid query with type: " + type + " and id: "+ id);  Object doc;  try {    doc=gigaSpace.takeById(new IdQuery<Object>(type,typedBasedId));  } catch (  DataAccessException e) {    throw translateDataAccessException(gigaSpace,e,type);  }  if (doc == null) {    doc=emptyObject;  }  try {    Map<String,Object> result=new HashMap<String,Object>();    result.put("status","success");    result.put("data",ControllerUtils.mapper.readValue(ControllerUtils.mapper.writeValueAsString(doc),Map.class));    return result;  } catch (  IOException e) {    throw new RestException(e.getMessage());  }}  }
class C{  @Override public long limit(){  return limit;}  }
class C{  private byte[] MonoToStereo(byte[] input){  byte[] output=new byte[input.length * 2];  int outputIndex=0;  for (int n=0; n < input.length; n+=2) {    output[outputIndex++]=input[n];    output[outputIndex++]=input[n + 1];    output[outputIndex++]=input[n];    output[outputIndex++]=input[n + 1];  }  return output;}  }
class C{  public VideoGetCatalogQuery(VkApiClient client){  super(client,"video.getCatalog",GetCatalogResponse.class);}  }
class C{  public IElementType advance() throws java.io.IOException {  int zzInput;  int zzAction;  int zzCurrentPosL;  int zzMarkedPosL;  int zzEndReadL=zzEndRead;  CharSequence zzBufferL=zzBuffer;  char[] zzBufferArrayL=zzBufferArray;  char[] zzCMapL=ZZ_CMAP;  int[] zzTransL=ZZ_TRANS;  int[] zzRowMapL=ZZ_ROWMAP;  int[] zzAttrL=ZZ_ATTRIBUTE;  while (true) {    zzMarkedPosL=zzMarkedPos;    zzAction=-1;    zzCurrentPosL=zzCurrentPos=zzStartRead=zzMarkedPosL;    zzState=ZZ_LEXSTATE[zzLexicalState];    zzForAction: {      while (true) {        if (zzCurrentPosL < zzEndReadL)         zzInput=zzBufferL.charAt(zzCurrentPosL++); else         if (zzAtEOF) {          zzInput=YYEOF;          break zzForAction;        } else {          zzCurrentPos=zzCurrentPosL;          zzMarkedPos=zzMarkedPosL;          boolean eof=zzRefill();          zzCurrentPosL=zzCurrentPos;          zzMarkedPosL=zzMarkedPos;          zzBufferL=zzBuffer;          zzEndReadL=zzEndRead;          if (eof) {            zzInput=YYEOF;            break zzForAction;          } else {            zzInput=zzBufferL.charAt(zzCurrentPosL++);          }        }        int zzNext=zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];        if (zzNext == -1)         break zzForAction;        zzState=zzNext;        int zzAttributes=zzAttrL[zzState];        if ((zzAttributes & 1) == 1) {          zzAction=zzState;          zzMarkedPosL=zzCurrentPosL;          if ((zzAttributes & 8) == 8)           break zzForAction;        }      }    }    zzMarkedPos=zzMarkedPosL;switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {case 3:{        return RenderscriptTokenType.OPERATOR;      }case 12:    break;case 9:{    return RenderscriptTokenType.BRACE;  }case 13:break;case 11:{return RenderscriptTokenType.KEYWORD;}case 14:break;case 6:{return RenderscriptTokenType.SEPARATOR;}case 15:break;case 7:{return RenderscriptTokenType.CHARACTER;}case 16:break;case 10:{return RenderscriptTokenType.COMMENT;}case 17:break;case 4:{return RenderscriptTokenType.IDENTIFIER;}case 18:break;case 8:{return RenderscriptTokenType.STRING;}case 19:break;case 1:{return TokenType.BAD_CHARACTER;}case 20:break;case 5:{return RenderscriptTokenType.NUMBER;}case 21:break;case 2:{return TokenType.WHITE_SPACE;}case 22:break;default :if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {zzAtEOF=true;zzDoEOF();{return null;}} else {zzScanError(ZZ_NO_MATCH);}}}}  }
class C{  public int deflateString2ByteArray(byte[] input,int inputOffset,int inputLength,byte[] bytes){  if (inputLength >= MIN_SIZE_FOR_DEFLATION) {    deflater.setInput(input,inputOffset,inputLength);    deflater.finish();    int compressedDataLength=deflater.deflate(bytes);    deflater.reset();    return -compressedDataLength;  } else {    System.arraycopy(input,inputOffset,bytes,0,inputLength);    return inputLength;  }}  }
class C{  public DistributedLogClientBuilder statsReceiver(StatsReceiver statsReceiver){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._statsReceiver=statsReceiver;  return newBuilder;}  }
class C{  public MidPointIntegrator(final int minimalIterationCount,final int maximalIterationCount) throws MathIllegalArgumentException {  super(minimalIterationCount,maximalIterationCount);  if (maximalIterationCount > MIDPOINT_MAX_ITERATIONS_COUNT) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_LARGE_BOUND_EXCLUDED,maximalIterationCount,MIDPOINT_MAX_ITERATIONS_COUNT);  }}  }
class C{  public static int determineConsecutiveDigitCount(CharSequence msg,int startpos){  int count=0;  int len=msg.length();  int idx=startpos;  if (idx < len) {    char ch=msg.charAt(idx);    while (isDigit(ch) && idx < len) {      count++;      idx++;      if (idx < len) {        ch=msg.charAt(idx);      }    }  }  return count;}  }
class C{  public UsersSearchQuery school(Integer value){  return unsafeParam("school",value);}  }
class C{  public static void addRows(Grid grid,SqlRowSet rs){  int cols=rs.getMetaData().getColumnCount();  while (rs.next()) {    grid.addRow();    for (int i=1; i <= cols; i++) {      grid.addValue(rs.getObject(i));    }  }}  }
class C{  public GroupsEditPlaceQuery editPlace(UserActor actor,int groupId){  return new GroupsEditPlaceQuery(getClient(),actor,groupId);}  }
class C{  protected VideoRemoveTagQuery tagId(int value){  return unsafeParam("tag_id",value);}  }
class C{  private String preprocessToJs(byte[] loader) throws Exception {  Pair<ArrayList<Integer>,List<Byte>> data=preprocessRop(loader);  List<Long> longList=new ArrayList<>();  for (  Integer i : data.first) {    longList.add(i & 0xFFFFFFFFL);  }  String payload=TextUtils.join(",",longList);  String relocations=TextUtils.join(",",data.second);  return String.format("\npayload = [%1$s];\nrelocs = [%2$s];\n",payload,relocations);}  }
class C{  @Provides @Singleton @JobZooKeeper CuratorFramework provideJobZooKeeperConnection(@Global CuratorFramework curator){  return withComponentNamespace(curator,"job");}  }
class C{  @JsonAnyGetter public Map<String,LogInfo> any(){  return body;}  }
class C{  protected Button createCheckBox(Composite group,String label){  Button button=new Button(group,SWT.CHECK | SWT.LEFT);  button.setText(label);  GridData data=new GridData();  data.horizontalSpan=2;  button.setLayoutData(data);  return button;}  }
class C{  public boolean isLazy(){  return lazy;}  }
class C{  public boolean addAbyssSkill(Player player,int skillId,int skillLevel){  return addSkill(player,skillId,skillLevel,false,false,PersistentState.NOACTION);}  }
class C{  protected boolean sameBaseURIAsIncludeParent(){  String parentBaseURI=getIncludeParentBaseURI();  String baseURI=fCurrentBaseURI.getExpandedSystemId();  return parentBaseURI != null && parentBaseURI.equals(baseURI);}  }
class C{  public static Assignment createAssignment(){  return new Assignment();}  }
class C{  @Override public void reset() throws IOException {}  }
class C{  protected VideoCreateCommentQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public void onAppMessage(String message,String namespace,int sequenceNumber){  try {    JSONObject jsonMessage=new JSONObject();    jsonMessage.put("sessionId",mSessionId);    jsonMessage.put("namespaceName",namespace);    jsonMessage.put("message",message);    sendMessageToClients("app_message",jsonMessage.toString(),sequenceNumber);  } catch (  JSONException e) {    Log.e(TAG,"Failed to create the message wrapper",e);  }}  }
class C{  public static boolean checkRangeQuery(boolean inclusive,String field,String query,String value,DataSchema dataSchema){  boolean matches=true;  logger.info("inclusive = " + inclusive + " field = "+ field+ " query = "+ query+ " value = "+ value);  if (inclusive) {    query=query.replaceFirst("\\[","");    query=query.replaceFirst("\\]","");  } else {    query=query.replaceFirst("\\{","");    query=query.replaceFirst("\\}","");  }  logger.debug("query = " + query);  if (dataSchema.getPartitionerTypeName(field).equals(IPDataPartitioner.class.getName())) {    logger.debug("Have IP Field");    String[] ranges=query.split("\\+TO\\+");    logger.info("ranges[0] = " + ranges[0] + " ranges[1] = "+ ranges[1]);    if ((!inclusive) && (value.equals(ranges[0]) || value.equals(ranges[1]))) {      logger.debug("inclusive = false and either value.equals(ranges[0]) or value.equals(ranges[1])");      matches=false;    } else {      String[] blocksLower=ranges[0].split("\\.");      String[] blocksUpper=ranges[1].split("\\.");      String[] ipValue=value.split("\\.");      int ipBlock=0;      while (ipBlock < 4) {        logger.info("ipBlock = " + ipBlock + " ipValue[ipBlock] = "+ ipValue[ipBlock]+ " blocksLower[ipBlock] = "+ blocksLower[ipBlock]+ " blocksUpper[ipBlock] = "+ blocksUpper[ipBlock]);        if (blocksLower[ipBlock].equals(blocksUpper[ipBlock])) {          logger.info("blocksLower[ipBlock].equals(blocksUpper[ipBlock])");          if (!ipValue[ipBlock].equals(blocksLower[ipBlock])) {            logger.info("!ipValue[ipBlock].equals(blocksLower[ipBlock]");            matches=false;          }        } else {          if (!((Integer.parseInt(blocksLower[ipBlock]) <= Integer.parseInt(ipValue[ipBlock])) && (Integer.parseInt(ipValue[ipBlock]) <= Integer.parseInt(blocksUpper[ipBlock])))) {            logger.info("IP block not within given range");            matches=false;          }        }        ++ipBlock;      }    }  } else   if (field.equals("date")) {    String[] ranges=query.split("\\+TO\\+");    logger.info("query:" + query);    logger.info("value:" + value);    logger.info("ranges[0] = " + ranges[0] + " ranges[1] = "+ ranges[1]);    if ((EpochDateParser.isEpochDateFormat(ranges[0]) || EpochDateParser.isEpochDateSearchFormat(ranges[0])) && (EpochDateParser.isEpochDateFormat(ranges[1]) || EpochDateParser.isEpochDateSearchFormat(ranges[1]))) {      double fromDate=0;      double toDate=0;      double valueDate=0;      long fromSeconds=0;      long fromMilli=0;      long toSeconds=0;      long toMilli=0;      try {        fromDate=EpochDateParser.convertSearchDate(ranges[0]);        toDate=EpochDateParser.convertSearchDate(ranges[1]);        valueDate=Double.parseDouble(value);        logger.debug("fromDate:" + fromDate);        logger.debug("toDate:" + toDate);        logger.debug("valueDate:" + valueDate);        String[] fromDateArr=ranges[0].split("\\.");        fromSeconds=Integer.parseInt(fromDateArr[0]);        fromMilli=Integer.parseInt(fromDateArr[1]);        String[] toDateArr=ranges[1].split("\\.");        toSeconds=Integer.parseInt(toDateArr[0]);        toMilli=Integer.parseInt(toDateArr[1]);      } catch (      Exception e) {        logger.info(Arrays.toString(e.getStackTrace()));      }      if ((!inclusive) && (fromDate == valueDate || toDate == valueDate)) {        logger.debug("(inclusive == false) && (fromDate == valueDate || toDate == valueDate))");        matches=false;      } else {        if (!((fromDate <= valueDate) && (valueDate <= toDate))) {          logger.debug("valueDate = " + valueDate + " out of range: <"+ fromDate+ ","+ toDate+ ">");          matches=false;        }      }    } else {      long lower=0;      long upper=0;      long valueDate=0;      try {        lower=ISO8601DateParser.getLongDate(ranges[0]);        upper=ISO8601DateParser.getLongDate(ranges[1]);        valueDate=ISO8601DateParser.getLongDate(value);      } catch (      ParseException e) {        e.printStackTrace();      }      if ((!inclusive) && (lower == valueDate || upper == valueDate)) {        logger.debug("(inclusive == false) && (lower == valueDate || upper == valueDate))");        matches=false;      } else {        if (!((lower <= valueDate) && (valueDate <= upper))) {          logger.debug("valueDate = " + valueDate + " out of range: <"+ lower+ ","+ upper+ ">");          matches=false;        }      }      logger.debug("valueDate  = " + valueDate + " in range: <"+ lower+ ","+ upper+ ">");    }  } else {    String[] ranges=query.split("\\+TO\\+");    int lower=Integer.parseInt(ranges[0]);    int upper=Integer.parseInt(ranges[1]);    int valueInt=Integer.parseInt(value);    logger.debug("valueInt = " + valueInt + " lower = "+ lower+ " upper = "+ upper);    if ((!inclusive) && (lower == valueInt || upper == valueInt)) {      logger.debug("(inclusive == false) && (lower == valueInt || upper == valueInt))");      matches=false;    } else {      if (!((lower <= valueInt) && (valueInt <= upper))) {        logger.debug("valueInt = " + valueInt + " out of range: <"+ lower+ ","+ upper+ ">");        matches=false;      }    }    logger.debug("valueInt = " + valueInt + " in range: <"+ lower+ ","+ upper+ ">");  }  return matches;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CarveSignet_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200491,num0,skilltarget,skillname);}  }
class C{  public static byte[] decode(String s){  return decode(s.toCharArray());}  }
class C{  public static JSON create(Map<String,Object> m){  JSON j=create();  j.putAll(m);  return j;}  }
class C{  public void run(String[] args){  cmdLineArgs=args;  start=new Date();  try {    Timers.v().totalTimer.start();    processCmdLine(cmdLineArgs);    autoSetOptions();    G.v().out.println("Soot started on " + start);    Scene.v().loadNecessaryClasses();    if (Options.v().ast_metrics()) {      try {        OutputStream streamOut=new FileOutputStream("../astMetrics.xml");        PrintWriter writerOut=new PrintWriter(new OutputStreamWriter(streamOut));        writerOut.println("<?xml version='1.0'?>");        writerOut.println("<ASTMetrics>");        Iterator<ClassData> it=G.v().ASTMetricsData.iterator();        while (it.hasNext()) {          ClassData cData=it.next();          writerOut.println(cData.toString());        }        writerOut.println("</ASTMetrics>");        writerOut.flush();        streamOut.close();      } catch (      IOException e) {        throw new CompilationDeathException("Cannot output file astMetrics",e);      }      return;    }    PackManager.v().runPacks();    if (!Options.v().oaat())     PackManager.v().writeOutput();    Timers.v().totalTimer.end();    if (Options.v().time())     Timers.v().printProfilingInformation();  } catch (  CompilationDeathException e) {    Timers.v().totalTimer.end();    if (e.getStatus() != CompilationDeathException.COMPILATION_SUCCEEDED)     throw e; else     return;  }  finish=new Date();  G.v().out.println("Soot finished on " + finish);  long runtime=finish.getTime() - start.getTime();  G.v().out.println("Soot has run for " + (runtime / 60000) + " min. "+ ((runtime % 60000) / 1000)+ " sec.");}  }
class C{  public void removeResultsAvailableHandler(ResultsAvailableHandler handler){  onResultsAvailable.remove(handler);}  }
class C{  protected void actionPerformed(GuiButton par1GuiButton){  if (par1GuiButton.enabled) {    if (par1GuiButton.id == ID_GENERIC_DONE) {      Minecraft.getMinecraft().vrSettings.saveOptions();      this.mc.displayGuiScreen(this.parentGuiScreen);    } else     if (par1GuiButton.id == ID_GENERIC_DEFAULTS) {      VRSettings vrSettings=Minecraft.getMinecraft().vrSettings;      vrSettings.keyholeX=15;      vrSettings.xSensitivity=1;      vrSettings.ySensitivity=1;      vrSettings.vrFreeMove=true;      Minecraft.getMinecraft().vrSettings.saveOptions();      this.reinit=true;    } else     if (par1GuiButton instanceof GuiSmallButtonEx) {      VRSettings.VrOptions num=VRSettings.VrOptions.getEnumOptions(par1GuiButton.id);      this.guivrSettings.setOptionValue(((GuiSmallButtonEx)par1GuiButton).returnVrEnumOptions(),1);      par1GuiButton.displayString=this.guivrSettings.getKeyBinding(VRSettings.VrOptions.getEnumOptions(par1GuiButton.id));      if (num == VRSettings.VrOptions.MOVE_MODE) {        this.reinit=true;      }    }  }}  }
class C{  @Override public boolean equals(Object o){  if (o instanceof AssociationsModel) {    AssociationsModel association=(AssociationsModel)o;    if (association.getTableName() != null && association.getAssociatedTableName() != null) {      if (association.getAssociationType() == associationType && association.getTableHoldsForeignKey().equals(tableHoldsForeignKey)) {        if (association.getTableName().equals(tableName) && association.getAssociatedTableName().equals(associatedTableName) && association.getTableHoldsForeignKey().equals(tableHoldsForeignKey)) {          return true;        } else         if (association.getTableName().equals(associatedTableName) && association.getAssociatedTableName().equals(tableName) && association.getTableHoldsForeignKey().equals(tableHoldsForeignKey)) {          return true;        }      }    }  }  return false;}  }
class C{  synchronized void registerTextChanges(){  mIgnoreTextChanges=false;}  }
class C{  void logSearchTermResolutionDetails(String searchTerm,@Nullable URL basePageUrl){  if (!isUserUndecided()) {    ContextualSearchUma.logBasePageProtocol(isBasePageHTTP(basePageUrl));    boolean isSingleWord=!CONTAINS_WHITESPACE_PATTERN.matcher(searchTerm.trim()).find();    ContextualSearchUma.logSearchTermResolvedWords(isSingleWord);  }}  }
class C{  private PokeInfoCalculator(String[] namesArray,int[] attackArray,int[] defenceArray,int[] staminaArray,int[] devolutionArray,int[] evolutionCandyCostArray){  populatePokemon(namesArray,attackArray,defenceArray,staminaArray,devolutionArray,evolutionCandyCostArray);}  }
class C{  private Number parseInt(String value){  Long l=Long.valueOf(value);  if (l.intValue() == l) {    return l.intValue();  }  return l;}  }
class C{  public boolean isPotion(){  return getItemId() == ItemId.ITEM_POTION || getItemId() == ItemId.ITEM_SUPER_POTION || getItemId() == ItemId.ITEM_HYPER_POTION || getItemId() == ItemId.ITEM_MAX_POTION;}  }
class C{  public static List split(String s){  return (split(s,"\\s+"));}  }
class C{  @Override public void updateClassifications(String[] cNames,List<UpdateItem> updateItemList,ProgressListener progressListener) throws IOException, CanceledException {  final UpdateItemList updateItems=(UpdateItemList)updateItemList;  long maxProgress=0;  for (int i=0; i < cNames.length; i++) {    maxProgress+=updateItems.getClassIds(i).size();  }  progressListener.setMaximum(maxProgress);  final Map<Integer,ListOfLongs>[] fName2ClassId2Location=new HashMap[cNames.length];  final Map<Integer,Integer>[] fName2ClassId2Weight=new HashMap[cNames.length];  for (int i=0; i < cNames.length; i++) {    fName2ClassId2Location[i]=new HashMap<>(10000);    fName2ClassId2Weight[i]=new HashMap<>(10000);  }  for (int i=0; i < cNames.length; i++) {    final Map<Integer,ListOfLongs> classId2Location=fName2ClassId2Location[i];    final Map<Integer,Integer> classId2weight=fName2ClassId2Weight[i];    for (    Integer classId : updateItems.getClassIds(i)) {      int weightedSize=updateItems.getSize(i,classId);      final ListOfLongs positions=new ListOfLongs();      classId2Location.put(classId,positions);      classId2weight.put(classId,weightedSize);      if (weightedSize > 0) {        for (UpdateItem item=updateItems.getFirst(i,classId); item != null; item=updateItems.getUpdateItem(item.getNextInClassification(i))) {          positions.add(item.getReadUId());        }      }      progressListener.incrementProgress();    }  }  try (RMA6FileModifier rma6Modifier=new RMA6FileModifier(fileName)){    rma6Modifier.updateClassifications(cNames,fName2ClassId2Location,fName2ClassId2Weight);  } }  }
class C{  public void goToNextColor(){  mColorIndex=(mColorIndex + 1) % (mColors.length);}  }
class C{  public static String generateRandomFinNumber(Delegator delegator,int length,boolean isId) throws GenericEntityException {  if (length > 19) {    length=19;  }  Random rand=new Random();  boolean isValid=false;  String number=null;  while (!isValid) {    number="";    for (int i=0; i < length; i++) {      int randInt=rand.nextInt(9);      number=number + randInt;    }    if (isId) {      int check=UtilValidate.getLuhnCheckDigit(number);      number=number + check;      if (checkFinAccountNumber(number)) {        isValid=checkIsNumberInDatabase(delegator,number);      }    } else {      isValid=true;    }  }  return number;}  }
class C{  public void deregister(LocalDispatcher local){  if (Debug.infoOn())   Debug.logInfo("De-Registering dispatcher: " + local.getName(),module);  localContext.remove(local.getName());  if (localContext.size() == 0) {    try {      this.shutdown();    } catch (    GenericServiceException e) {      Debug.logError(e,"Trouble shutting down ServiceDispatcher!",module);    }  }}  }
class C{  public IndexSelectScan(Index idx,ConstantRange searchRange,TableScan ts){  this.idx=idx;  this.searchRange=searchRange;  this.ts=ts;  beforeFirst();}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_REMOVE_ITEM_OPTION_INVALID_STANCE(String value0){  return new SM_SYSTEM_MESSAGE(1300474,value0);}  }
class C{  private String extractDeclaringTypeFQN(CompletionProposal methodProposal){  char[] declaringTypeSignature=methodProposal.getDeclarationSignature();  if (declaringTypeSignature == null)   return "java.lang.Object";  return SignatureUtil.stripSignatureToFQN(String.valueOf(declaringTypeSignature));}  }
class C{  public BifocalDistortion(double xrange,double xmag,double yrange,double ymag){  rx=xrange;  mx=xmag;  ry=yrange;  my=ymag;  m_distortX=!(rx == 0 || mx == 1.0);  m_distortY=!(ry == 0 || my == 1.0);}  }
class C{  public BooleanLiteral(boolean b){  m_value=b;}  }
class C{  protected RealMatrix computeCovarianceMatrix(double[][] data) throws MathIllegalArgumentException {  return computeCovarianceMatrix(data,true);}  }
class C{  public boolean skipChar(int c) throws IOException {  if (DEBUG_BUFFER) {    System.out.print("(skipChar, '" + (char)c + "': ");    XMLEntityManager.print(fCurrentEntity);    System.out.println();  }  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int cc=fCurrentEntity.ch[fCurrentEntity.position];  if (cc == c) {    fCurrentEntity.position++;    if (c == '\n') {      fCurrentEntity.lineNumber++;      fCurrentEntity.columnNumber=1;    } else {      fCurrentEntity.columnNumber++;    }    if (DEBUG_BUFFER) {      System.out.print(")skipChar, '" + (char)c + "': ");      XMLEntityManager.print(fCurrentEntity);      System.out.println(" -> true");    }    return true;  } else   if (c == '\n' && cc == '\r' && fCurrentEntity.isExternal()) {    if (fCurrentEntity.position == fCurrentEntity.count) {      fCurrentEntity.ch[0]=(char)cc;      load(1,false);    }    fCurrentEntity.position++;    if (fCurrentEntity.ch[fCurrentEntity.position] == '\n') {      fCurrentEntity.position++;    }    fCurrentEntity.lineNumber++;    fCurrentEntity.columnNumber=1;    if (DEBUG_BUFFER) {      System.out.print(")skipChar, '" + (char)c + "': ");      XMLEntityManager.print(fCurrentEntity);      System.out.println(" -> true");    }    return true;  }  if (DEBUG_BUFFER) {    System.out.print(")skipChar, '" + (char)c + "': ");    XMLEntityManager.print(fCurrentEntity);    System.out.println(" -> false");  }  return false;}  }
class C{  public final void sinkEvents(Widget widget,Set<String> typeNames){  if (typeNames == null) {    return;  }  int eventsToSink=0;  for (  String typeName : typeNames) {    int typeInt=Event.getTypeInt(typeName);    if (typeInt < 0) {      widget.sinkBitlessEvent(typeName);    } else {      typeInt=sinkEvent(widget,typeName);      if (typeInt > 0) {        eventsToSink|=typeInt;      }    }  }  if (eventsToSink > 0) {    widget.sinkEvents(eventsToSink);  }}  }
class C{  public static int createImageTexture(ByteBuffer data,int width,int height,int format){  int[] textureHandles=new int[1];  int textureHandle;  GLES20.glGenTextures(1,textureHandles,0);  textureHandle=textureHandles[0];  GlUtil.checkGlError("glGenTextures");  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,textureHandle);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MIN_FILTER,GLES20.GL_LINEAR);  GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D,GLES20.GL_TEXTURE_MAG_FILTER,GLES20.GL_LINEAR);  GlUtil.checkGlError("loadImageTexture");  GLES20.glTexImage2D(GLES20.GL_TEXTURE_2D,0,format,width,height,0,format,GLES20.GL_UNSIGNED_BYTE,data);  GlUtil.checkGlError("loadImageTexture");  return textureHandle;}  }
class C{  private void populateTimingsForFailedCONNECT(HarEntry harEntry){  HarTimings timings=harEntry.getTimings();  if (connectionQueuedNanos > 0L && dnsResolutionStartedNanos > 0L) {    timings.setBlocked(dnsResolutionStartedNanos - connectionQueuedNanos,TimeUnit.NANOSECONDS);  }  if (dnsResolutionStartedNanos > 0L && dnsResolutionFinishedNanos > 0L) {    timings.setDns(dnsResolutionFinishedNanos - dnsResolutionStartedNanos,TimeUnit.NANOSECONDS);  }  if (connectionStartedNanos > 0L && connectionSucceededTimeNanos > 0L) {    timings.setConnect(connectionSucceededTimeNanos - connectionStartedNanos,TimeUnit.NANOSECONDS);    if (sslHandshakeStartedNanos > 0L) {      timings.setSsl(connectionSucceededTimeNanos - this.sslHandshakeStartedNanos,TimeUnit.NANOSECONDS);    }  }  if (sendStartedNanos > 0L && sendFinishedNanos >= 0L) {    timings.setSend(sendFinishedNanos - sendStartedNanos,TimeUnit.NANOSECONDS);  }  if (sendFinishedNanos > 0L && responseReceiveStartedNanos >= 0L) {    timings.setWait(responseReceiveStartedNanos - sendFinishedNanos,TimeUnit.NANOSECONDS);  }}  }
class C{  public double recordsOutput(){  String fld=dists.keySet().iterator().next();  double sum=0.0;  for (  Bucket bkt : buckets(fld))   sum+=bkt.frequency();  return sum;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public void makeMultiInstanceIntent(Activity activity,Intent intent){  if (activity instanceof ChromeLauncherActivity && isMultiWindow(activity)) {    if (TextUtils.equals(ChromeTabbedActivity.class.getName(),intent.getComponent().getClassName())) {      intent.setClassName(activity,MultiInstanceChromeTabbedActivity.class.getName());    }    intent.setFlags(intent.getFlags() & ~(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_NEW_DOCUMENT));  }}  }
class C{  private Builder smoothFactor(Number smoothFactor){  this.smoothFactor=smoothFactor;  return this;}  }
class C{  public static void recordAction(int action){  assert action >= 0 && action < SIGNIN_PROMO_COUNT;  RecordHistogram.recordEnumeratedHistogram("Signin.AndroidSigninPromoAction",action,SIGNIN_PROMO_COUNT);}  }
class C{  public boolean hasElse(){  return getElseOpt().getNumChild() != 0;}  }
class C{  private JToolBar createToolbar(){  JToolBar toolBar=new JToolBar();  toolBar.setOrientation(JToolBar.HORIZONTAL);  toolBar.setFloatable(false);  JButton btn;  ButtonGroup cursorToolGrp=new ButtonGroup();  btn=new JButton(new NoToolAction(mapPane));  btn.setName(TOOLBAR_POINTER_BUTTON_NAME);  toolBar.add(btn);  cursorToolGrp.add(btn);  btn=new JButton(new ZoomInAction(mapPane));  btn.setName(TOOLBAR_ZOOMIN_BUTTON_NAME);  toolBar.add(btn);  cursorToolGrp.add(btn);  btn=new JButton(new ZoomOutAction(mapPane));  btn.setName(TOOLBAR_ZOOMOUT_BUTTON_NAME);  toolBar.add(btn);  cursorToolGrp.add(btn);  toolBar.addSeparator();  btn=new JButton(new PanAction(mapPane));  btn.setName(TOOLBAR_PAN_BUTTON_NAME);  toolBar.add(btn);  cursorToolGrp.add(btn);  toolBar.addSeparator();  btn=new JButton(new ResetAction(mapPane));  btn.setName(TOOLBAR_RESET_BUTTON_NAME);  toolBar.add(btn);  return toolBar;}  }
class C{  public VideoSearchQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public Quaternion add(final Quaternion q){  return add(this,q);}  }
class C{  public CM_PING_REQUEST(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public IsLessThanExtended(Expression expression1,Expression expression2,boolean matchCase){  super(expression1,expression2,matchCase);}  }
class C{  public boolean removeByObject(T obj){  if (getNumSegments() > 1)   throw new RuntimeException("ConcurrentSegmentedStoredList::removeByObject not supported for multi segments list");  if (_segments[0].removeByObject(obj)) {    sizeUpdater.decrementAndGet(this);    return true;  }  return false;}  }
class C{  public synchronized void close() throws IOException {  if (journalWriter == null) {    return;  }  for (  Entry entry : new ArrayList<Entry>(lruEntries.values())) {    if (entry.currentEditor != null) {      entry.currentEditor.abort();    }  }  trimToSize();  journalWriter.close();  journalWriter=null;}  }
class C{  public TransformerConfigurationException(String msg){  super(msg);}  }
class C{  @Override public void confirm(){  bobcatWait.withTimeout(Timeouts.BIG).until(null,2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_EVENT_WIN_ARTIFACT(String value1,String value0,String value2){  return new SM_SYSTEM_MESSAGE(1320002,value1,value0,value2);}  }
class C{  public WallSearchQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"wall.search",SearchExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  public XML11NonValidatingConfiguration(SymbolTable symbolTable,XMLGrammarPool grammarPool){  this(symbolTable,grammarPool,null);}  }
class C{  public static Tuple max(TupleSet tuples,String field,Comparator cmp){  if (tuples instanceof Table) {    Table table=(Table)tuples;    ColumnMetadata md=table.getMetadata(field);    return table.getTuple(md.getMaximumRow());  } else {    return max(tuples.tuples(),field,cmp);  }}  }
class C{  public void create(){}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testDeleteEventDoesNotDispathComplete() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  assertNotNull(processInstance);  listener.clearEventsReceived();  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  runtimeService.deleteProcessInstance(processInstance.getId(),"testing task delete events");  assertEquals(1,listener.getEventsReceived().size());  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  assertTrue(event.getEntity() instanceof Task);  Task taskFromEvent=(Task)event.getEntity();  assertEquals(task.getId(),taskFromEvent.getId());  assertExecutionDetails(event,processInstance);  try {    task=taskService.newTask();    task.setCategory("123");    task.setDescription("Description");    taskService.saveTask(task);    listener.clearEventsReceived();    taskService.deleteTask(task.getId());    assertEquals(1,listener.getEventsReceived().size());    event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);    assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());    assertTrue(event.getEntity() instanceof Task);    taskFromEvent=(Task)event.getEntity();    assertEquals(task.getId(),taskFromEvent.getId());    assertNull(event.getProcessDefinitionId());    assertNull(event.getProcessInstanceId());    assertNull(event.getExecutionId());  }  finally {    if (task != null) {      String taskId=task.getId();      task=taskService.createTaskQuery().taskId(taskId).singleResult();      if (task != null) {        taskService.deleteTask(taskId);      }      historyService.deleteHistoricTaskInstance(taskId);    }  }}  }
class C{  public boolean isLoading(){  return state.equals(LOADING);}  }
class C{  public Broker(String host,int port){  this.host=host;  this.port=port;}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.err.println("Usage : URLUtil <url>");    return;  }  String url=args[0];  try {    System.out.println(URLUtil.getDomainName(new URL(url)));  } catch (  MalformedURLException ex) {    ex.printStackTrace();  }}  }
class C{  public FriendsAddListQuery(VkApiClient client,UserActor actor,String name){  super(client,"friends.addList",AddListResponse.class);  accessToken(actor.getAccessToken());  name(name);}  }
class C{  @Override public void any(Augmentations augmentations) throws XNIException {}  }
class C{  public static void main(String[] arguments){  try {    try {      throw new Exception("1st");    }  finally {      throw new Exception("2nd");    }  } catch (  Exception happened) {    System.out.println(happened.getMessage());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ITEM_CANNOT_BE_GIVEN(String value0){  return new SM_SYSTEM_MESSAGE(1300390,value0);}  }
class C{  @PostConstruct public void init(){  LOG.info("Initializing Device cache...");  commonInit();  LOG.info("Device cache initialization complete.");}  }
class C{  public double mannWhitneyU(final double[] x,final double[] y) throws MathIllegalArgumentException, NullArgumentException {  ensureDataConformance(x,y);  final double[] z=concatenateSamples(x,y);  final double[] ranks=naturalRanking.rank(z);  double sumRankX=0;  for (int i=0; i < x.length; ++i) {    sumRankX+=ranks[i];  }  final double U1=sumRankX - ((long)x.length * (x.length + 1)) / 2;  final double U2=(long)x.length * y.length - U1;  return FastMath.max(U1,U2);}  }
class C{  public String localName(){  return theType.localName();}  }
class C{  public void init(int shadowColor,int position){  mFadingShadow=new FadingShadow(shadowColor);  mPosition=position;  postInvalidateOnAnimation();}  }
class C{  public void applyUpdate(Object update) throws Exception {  throw new UnsupportedOperationException("JoinStateManager:Updating log" + ", this should not happen");}  }
class C{  public void createProjection(List<SelectColumn> columns){  ArrayList<Object> fieldValues=new ArrayList<Object>();  for (int i=0; i < columns.size(); i++) {    SelectColumn column=columns.get(i);    if (!column.isVisible())     continue;    QueryTableData columnTableData=column.getColumnTableData();    if (columnTableData == null) {      fieldValues.add(null);      continue;    }    IEntryPacket entry=getEntry(columnTableData.getTableIndex());    if (entry == null) {      fieldValues.add(null);    } else     if (column.isUid()) {      fieldValues.add(entry.getUID());    } else {      fieldValues.add(column.getFieldValue(entry));    }  }  setFieldsValues(fieldValues.toArray());}  }
class C{  public static boolean writeFile(File file,InputStream stream,boolean append){  OutputStream o=null;  try {    makeDirs(file.getAbsolutePath());    o=new FileOutputStream(file,append);    byte data[]=new byte[1024];    int length=-1;    while ((length=stream.read(data)) != -1) {      o.write(data,0,length);    }    o.flush();    return true;  } catch (  FileNotFoundException e) {    throw new RuntimeException("FileNotFoundException occurred. ",e);  }catch (  IOException e) {    throw new RuntimeException("IOException occurred. ",e);  } finally {    IOUtil.close(o);    IOUtil.close(stream);  }}  }
class C{  public EvaluationRmsChecker(final double relTol,final double absTol){  this.relTol=relTol;  this.absTol=absTol;}  }
class C{  public String process(Item item) throws ProcessException {  return getPhoneFeature(item,"vheight");}  }
class C{  public GroupsIsMemberQueryWithUserIds(VkApiClient client,UserActor actor,String groupId,Integer... userIds){  super(client,"groups.isMember",Utils.buildParametrizedType(List.class,MemberStatus.class));  accessToken(actor.getAccessToken());  groupId(groupId);  userIds(userIds);}  }
class C{  public static final boolean allNonNull(Object... objects){  if (objects == null) {    return false;  }  for (  Object object : objects) {    if (object == null) {      return false;    }  }  return true;}  }
class C{  public boolean isUseDefinedMargin(){  return mUseDefinedMargin;}  }
class C{  private void receivedTraffic(String json,AirMapTraffic.TrafficType trafficType){  List<AirMapTraffic> updated=new ArrayList<>();  List<AirMapTraffic> added=new ArrayList<>();  JSONArray trafficJsonArray;  try {    trafficJsonArray=new JSONObject(json).getJSONArray("traffic");  } catch (  JSONException e) {    e.printStackTrace();    AirMapLog.e("TrafficService",e.getMessage());    return;  }  for (int i=0; i < trafficJsonArray.length(); i++) {    AirMapTraffic temp=new AirMapTraffic(trafficJsonArray.optJSONObject(i));    temp.setTrafficType(trafficType);    Coordinate projected=projectedCoordinate(temp);    temp.setCoordinate(projected);    int index=allTraffic.indexOf(temp);    if (index != -1) {      allTraffic.set(index,temp);      updated.add(temp);    } else {      allTraffic.add(temp);      added.add(temp);    }  }  notifyUpdated(updated);  notifyAdded(added);}  }
class C{  @Override public boolean isCellEditable(int row,int column){  EnvVar envVar=dataList.get(row);  if (column == COL_VALUE) {    return true;  }  return !envVar.isPredefined();}  }
class C{  public static double sumOfProducts(double[]... nums){  if (nums == null || nums.length < 1)   return 0;  double sum=0;  for (int i=0; i < nums.length; i++) {    double[] column=column(i,nums);    sum+=times(column);  }  return sum;}  }
class C{  public AdaptableList(){  children=new ArrayList();}  }
class C{  @Override public void write(String str,int st,int len) throws IOException {  try {    beforeWrite(len);    out.write(str,st,len);    afterWrite(len);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public ContextIntegrationTest(){  setResponseLogLengthLimit(1000);  experiment=ExperimentFactory.createExperiment();  experiment.samplingPercent=1;  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  public void registerSaveParticipant() throws CoreException {  IWorkspace ws=ResourcesPlugin.getWorkspace();  ISavedState ss=ws.addSaveParticipant(SVNProviderPlugin.getPlugin(),this);  if (ss != null) {    ss.processResourceChangeEvents(this);  }  ws.removeSaveParticipant(SVNProviderPlugin.getPlugin());}  }
class C{  private boolean canAddMember(){  int memberSize=getLegionMembers().size();switch (getLegionLevel()) {case 1:    return memberSize < LegionConfig.LEGION_LEVEL1_MAX_MEMBERS;case 2:  return memberSize < LegionConfig.LEGION_LEVEL2_MAX_MEMBERS;case 3:return memberSize < LegionConfig.LEGION_LEVEL3_MAX_MEMBERS;case 4:return memberSize < LegionConfig.LEGION_LEVEL4_MAX_MEMBERS;case 5:return memberSize < LegionConfig.LEGION_LEVEL5_MAX_MEMBERS;case 6:return memberSize < LegionConfig.LEGION_LEVEL6_MAX_MEMBERS;case 7:return memberSize < LegionConfig.LEGION_LEVEL7_MAX_MEMBERS;case 8:return memberSize < LegionConfig.LEGION_LEVEL8_MAX_MEMBERS;}return false;}  }
class C{  @Override public String formatMessage(Locale locale,String key,Object[] arguments) throws MissingResourceException {  if (locale == null) {    locale=Locale.getDefault();  }  if (locale != fLocale) {    fResourceBundle=ResourceBundle.getBundle("mf.org.apache.xerces.impl.msg.XMLSchemaMessages",locale);    fLocale=locale;  }  String msg=fResourceBundle.getString(key);  if (arguments != null) {    try {      msg=java.text.MessageFormat.format(msg,arguments);    } catch (    Exception e) {      msg=fResourceBundle.getString("FormatFailed");      msg+=" " + fResourceBundle.getString(key);    }  }  if (msg == null) {    msg=fResourceBundle.getString("BadMessageKey");    throw new MissingResourceException(msg,"mf.org.apache.xerces.impl.msg.SchemaMessages",key);  }  return msg;}  }
class C{  private static void removeAbsolutePositionAndSizes(NlComponent component){  for (  NlComponent child : component.getChildren()) {    child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_X,null);    child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_Y,null);    child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_WIDTH,null);    child.setAttribute(TOOLS_URI,ATTR_LAYOUT_CONVERSION_ABSOLUTE_HEIGHT,null);    removeAbsolutePositionAndSizes(child);  }}  }
class C{  @Override public void onStopTrackingTouch(SeekBar seekBar){  mDragging=false;  setProgress();  updatePausePlay();  mHandler.sendEmptyMessage(SHOW_PROGRESS);}  }
class C{  public LegendTool(){  super();  createUI();}  }
class C{  public static void i(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg,throwable);}  }
class C{  public int hashCode(){  return Constraint.hash(reqs) + Constraint.hash(prefs);}  }
class C{  public static S2Cap full(){  return new S2Cap(new S2Point(1,0,0),2);}  }
class C{  public boolean isNamespaceAware(){  return false;}  }
class C{  public Bundler putDouble(String key,double value){  bundle.putDouble(key,value);  return this;}  }
class C{  public void drag(long time,float x,float y,float deltaX,float deltaY,float totalX,float totalY){  mModelSelectorButton.drag(x,y);  getActiveStripLayoutHelper().drag(time,x,y,deltaX,deltaY,totalX,totalY);}  }
class C{  public String markdown(String txt){  if (txt == null) {    txt="";  }  TextEditor text=new TextEditor(txt);  text.replaceAll("\\r\\n","\n");  text.replaceAll("\\r","\n");  text.replaceAll("^[ \\t]+$","");  text.append("\n\n");  text.detabify();  text.deleteAll("^[ ]+$");  hashHTMLBlocks(text);  stripLinkDefinitions(text);  text=runBlockGamut(text);  unEscapeSpecialChars(text);  text.append("\n");  return wrapHtml(text.toString());}  }
class C{  public boolean node_elim_opt(){  return soot.PhaseOptions.getBoolean(options,"node-elim-opt");}  }
class C{  private void recordNonLocalChange(){synchronized (myLock) {    mySeenNonSourceChanges=true;    stopFileListener();  }}  }
class C{  public static DeviceClassNameResponse createTransferDeviceName(String name){  return new DeviceClassNameResponseImpl(name);}  }
class C{  public XMLSchemaValidatorComponentManager(XSGrammarPoolContainer grammarContainer){  fEntityManager=new XMLEntityManager();  fComponents.put(ENTITY_MANAGER,fEntityManager);  fErrorReporter=new XMLErrorReporter();  fComponents.put(ERROR_REPORTER,fErrorReporter);  fNamespaceContext=new NamespaceSupport();  fComponents.put(NAMESPACE_CONTEXT,fNamespaceContext);  fSchemaValidator=new XMLSchemaValidator();  fComponents.put(SCHEMA_VALIDATOR,fSchemaValidator);  fValidationManager=new ValidationManager();  fComponents.put(VALIDATION_MANAGER,fValidationManager);  fComponents.put(ENTITY_RESOLVER,null);  fComponents.put(ERROR_HANDLER,null);  fComponents.put(SECURITY_MANAGER,null);  fComponents.put(SYMBOL_TABLE,new SymbolTable());  fComponents.put(XMLGRAMMAR_POOL,grammarContainer.getGrammarPool());  fUseGrammarPoolOnly=grammarContainer.isFullyComposed();  fErrorReporter.putMessageFormatter(XSMessageFormatter.SCHEMA_DOMAIN,new XSMessageFormatter());  final String[] recognizedFeatures={DISALLOW_DOCTYPE_DECL_FEATURE,NORMALIZE_DATA,SCHEMA_ELEMENT_DEFAULT,SCHEMA_AUGMENT_PSVI};  addRecognizedFeatures(recognizedFeatures);  fFeatures.put(DISALLOW_DOCTYPE_DECL_FEATURE,Boolean.FALSE);  fFeatures.put(NORMALIZE_DATA,Boolean.FALSE);  fFeatures.put(SCHEMA_ELEMENT_DEFAULT,Boolean.FALSE);  fFeatures.put(SCHEMA_AUGMENT_PSVI,Boolean.TRUE);  addRecognizedParamsAndSetDefaults(fEntityManager,grammarContainer);  addRecognizedParamsAndSetDefaults(fErrorReporter,grammarContainer);  addRecognizedParamsAndSetDefaults(fSchemaValidator,grammarContainer);  Boolean secureProcessing=grammarContainer.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING);  if (Boolean.TRUE.equals(secureProcessing)) {    fInitSecurityManager=new SecurityManager();  } else {    fInitSecurityManager=null;  }  fComponents.put(SECURITY_MANAGER,fInitSecurityManager);  fFeatures.put(IGNORE_XSI_TYPE,Boolean.FALSE);  fFeatures.put(ID_IDREF_CHECKING,Boolean.TRUE);  fFeatures.put(IDENTITY_CONSTRAINT_CHECKING,Boolean.TRUE);  fFeatures.put(UNPARSED_ENTITY_CHECKING,Boolean.TRUE);}  }
class C{  public static byte[] toByteArray(Reader input) throws IOException {  return toByteArray(input,Charset.defaultCharset());}  }
class C{  public FriendsGetRequestsQueryWithNeedMutual extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  static void startAnimation(View animView){  Animation tx=new TranslateAnimation(-350,350,0,0);  tx.setDuration(1000);  tx.setRepeatCount(Animation.INFINITE);  tx.setInterpolator(new AccelerateDecelerateInterpolator());  tx.setRepeatMode(Animation.REVERSE);  animView.startAnimation(tx);}  }
class C{  private HashMap createSVMModel(double dTolerance,double dCost,double dGamma){  svm_problem spProblem=new svm_problem();  spProblem.l=DocumentList.size();  if (spProblem.l == 0) {    Model=null;    return null;  }  HashMap hCategories=new HashMap();  spProblem.x=new svm_node[spProblem.l][];  spProblem.y=new double[spProblem.l];  ListIterator iIter=DocumentList.listIterator();  int iCnt=0;  while (iIter.hasNext()) {    Decision idDocInfo=(Decision)iIter.next();    spProblem.x[iCnt]=documentToNodeArray((SimpleTextDocument)idDocInfo.Document);    if (!hCategories.containsKey(idDocInfo.FinalDecision))     hCategories.put(idDocInfo.FinalDecision,hCategories.size() + 1);    spProblem.y[iCnt++]=((Integer)hCategories.get(idDocInfo.FinalDecision)).doubleValue();  }  svm_parameter spParam=new svm_parameter();  spParam.svm_type=svm_parameter.C_SVC;  spParam.kernel_type=svm_parameter.RBF;  spParam.degree=1;  spParam.gamma=dGamma;  spParam.coef0=0;  spParam.nu=0.5;  spParam.cache_size=100;  spParam.C=dCost;  spParam.eps=dTolerance;  spParam.p=0.1;  spParam.shrinking=0;  spParam.probability=0;  spParam.nr_weight=0;  spParam.weight_label=new int[0];  spParam.weight=new double[0];  String error_msg=svm.svm_check_parameter(spProblem,spParam);  if (error_msg != null) {    System.err.print("Error: " + error_msg + "\n");    return null;  }  try {    FileWriter fw=new FileWriter("train.dat");    for (int iLine=0; iLine < spProblem.l; iLine++) {      String sLine=String.valueOf(spProblem.y[iLine]) + " ";      for (int iElem=0; iElem < spProblem.x[iLine].length; iElem++) {        sLine+=String.valueOf(spProblem.x[iLine][iElem].index) + ":" + String.valueOf(spProblem.x[iLine][iElem].value)+ " ";      }      fw.write(sLine + "\n");    }    fw.close();  } catch (  Exception e) {    e.printStackTrace();    return hCategories;  }  try {    Process p=(new ProcessBuilder("svmtrain.exe","-s 0","-t 2","-g " + String.valueOf(dGamma),"-v 10","train.dat","model.dat")).start();    InputStreamReader reader=new InputStreamReader(p.getInputStream());    BufferedReader buf_reader=new BufferedReader(reader);    String line;    while ((line=buf_reader.readLine()) != null)     System.out.println(line);  } catch (  Exception ioe) {    ioe.printStackTrace();    return hCategories;  }  Model=svm.svm_train(spProblem,spParam);  return hCategories;}  }
class C{  public final String xmlNameToJavaName(final String xmlName){  StringBuilder str=new StringBuilder();  int fieldNameLength=xmlName.length();  char currentChar;  for (int i=0; i < fieldNameLength; i++) {    currentChar=xmlName.charAt(i);    if (currentChar == '-') {      str.append(Character.toUpperCase(xmlName.charAt(++i)));    } else {      str.append(currentChar);    }  }  return str.toString();}  }
class C{  public WallSearchQueryWithExtended ownersOnly(Boolean value){  return unsafeParam("owners_only",value);}  }
class C{  public DatabaseGetCitiesQuery(VkApiClient client,UserActor actor,int countryId){  super(client,"database.getCities",GetCitiesResponse.class);  accessToken(actor.getAccessToken());  countryId(countryId);}  }
class C{  protected void doOptimizedEval(final Semaphore sSem,PrintStream pOverallResultsOutStream,int WordNGramSize_Min,int WordNGramSize_Max,int Word_Dmax,int CharacterNGramSize_Min,int CharacterNGramSize_Max,int Character_Dmax,boolean bDoCharNGrams,boolean bDoWordNGrams,String sSummaryDir,String sModelDir,int iThreads,boolean bSilent,boolean bProgress) throws Exception {  if (pOverallResultsOutStream == null)   pOverallResultsOutStream=System.out;  ThreadList tqRobin=new ThreadList(iThreads);  DocumentSet dsSummarySet=new DocumentSet(sSummaryDir,1.0);  final DocumentSet dsModelSet=new DocumentSet(sModelDir,1.0);  dsSummarySet.createSets();  dsModelSet.createSets();  HashMap hmCategoryResults=new HashMap();  if (dsSummarySet.getTrainingSet().size() * dsModelSet.getTrainingSet().size() == 0) {    System.err.println("Empty document set...");    throw new Exception("Empty document set...");  }  pOverallResultsOutStream.print("Theme\t");  pOverallResultsOutStream.print("SystemID\t");  if (bDoWordNGrams) {    pOverallResultsOutStream.print("GraphCooccurence\t");    pOverallResultsOutStream.print("GraphValue\t");    pOverallResultsOutStream.print("GraphSize\t");    pOverallResultsOutStream.print("HistoContainmentSimilarity\t");    pOverallResultsOutStream.print("HistoValue\t");    pOverallResultsOutStream.print("HistoSize\t");    pOverallResultsOutStream.print("OverallSimil\t");  }  if (bDoCharNGrams) {    pOverallResultsOutStream.print("CharGraphCooccurence\t");    pOverallResultsOutStream.print("CharGraphValue\t");    pOverallResultsOutStream.print("CharGraphSize\t");    pOverallResultsOutStream.print("NHistoContainmentSimilarity\t");    pOverallResultsOutStream.print("NHistoValue\t");    pOverallResultsOutStream.print("NHistoSize\t");    pOverallResultsOutStream.print("NOverallSimil\t");  }  pOverallResultsOutStream.println();  int iTotal=dsSummarySet.getTrainingSet().size();  int iCur=0;  Iterator iCatIter=dsModelSet.getCategories().iterator();  Date dStart=new Date();  while (iCatIter.hasNext()) {    String sCurCategory=(String)iCatIter.next();    if (!bSilent)     System.err.println("Processing category:" + sCurCategory);    hModelCache.clear();    hNModelCache.clear();    List lModelFiles=dsModelSet.getFilesFromCategory(sCurCategory);    Iterator iIter=dsSummarySet.getFilesFromCategory(sCurCategory,dsSummarySet.FROM_TRAINING_SET).iterator();    while (iIter.hasNext()) {      final CategorizedFileEntry cfeCur=(CategorizedFileEntry)iIter.next();      Runnable r=new CalcSimilRunner(WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,cfeCur,lModelFiles,sSem,bDoCharNGrams,bDoWordNGrams,pOverallResultsOutStream,bSilent,this,WeightMethod,Progress);      while (!tqRobin.addThreadFor(r))       Thread.yield();      Date dCurTime=new Date();      long lRemaining=(iTotal - iCur + 1) * (long)((double)(dCurTime.getTime() - dStart.getTime()) / iCur);      if (!bSilent || (bProgress))       System.err.print("Completed " + String.format("%7.4f",(double)iCur++ / iTotal * 100) + "%"+ String.format(" - Remaining %50s\r",gr.demokritos.iit.jinsect.utils.millisToMinSecString(lRemaining)));    }  }  try {    tqRobin.waitUntilCompletion();  } catch (  InterruptedException ex) {    System.err.println("Could not complete execution of all tasks.");    ex.printStackTrace(System.err);  }  System.err.println("Completed 100%. A total of " + iTotal + " comparisons were "+ "performed.");}  }
class C{  public PollsCreateQuery isAnonymous(Boolean value){  return unsafeParam("is_anonymous",value);}  }
class C{  public void uploadBuild(){  binary.initPath(apkAbsolutePath);  uploadService.sendBuild(null,apkAbsolutePath,apiToken,binary,changeLogTa);}  }
class C{  public Bundler(){  this(null);}  }
class C{  public PageObjectListInvocationHandler(Class<?> genericType,ElementLocator elementLocator,PageObjectInjector injector,boolean cacheResults,FramePath framePath){  this.type=genericType;  this.injector=injector;  this.locator=elementLocator;  this.cacheResults=cacheResults;  this.framePath=framePath;}  }
class C{  public boolean isLookingForEvent(){  return lookingForEvent;}  }
class C{  private static QueryBuilder createQueryParser(IndexState state,Request r,String field){  if (r.hasParam("queryParser")) {    r=r.getStruct("queryParser");    Request.PolyResult pr=r.getPoly("class");    QueryBuilder qp;    if (pr.name.equals("classic")) {      FieldDef fd=state.getField(pr.r,"defaultField");      qp=new QueryParser(field == null ? fd.name : field,state.searchAnalyzer);    } else     if (pr.name.equals("SimpleQueryParser")) {      int flags=0;      for (      Object o : pr.r.getList("operators")) {        if (o.equals("AND")) {          flags=flags | SimpleQueryParser.AND_OPERATOR;        } else         if (o.equals("NOT")) {          flags=flags | SimpleQueryParser.NOT_OPERATOR;        } else         if (o.equals("OR")) {          flags=flags | SimpleQueryParser.OR_OPERATOR;        } else         if (o.equals("PREFIX")) {          flags=flags | SimpleQueryParser.PREFIX_OPERATOR;        } else         if (o.equals("PHRASE")) {          flags=flags | SimpleQueryParser.PHRASE_OPERATOR;        } else         if (o.equals("PRECEDENCE")) {          flags=flags | SimpleQueryParser.PRECEDENCE_OPERATORS;        } else         if (o.equals("ESCAPE")) {          flags=flags | SimpleQueryParser.ESCAPE_OPERATOR;        } else         if (o.equals("WHITESPACE")) {          flags=flags | SimpleQueryParser.WHITESPACE_OPERATOR;        } else {          throw new AssertionError();        }      }      Map<String,Float> fieldAndWeights;      if (field != null) {        fieldAndWeights=new HashMap<String,Float>();        fieldAndWeights.put(field,1.0f);      } else {        fieldAndWeights=parseFieldsAndWeights(state,pr.r,"fields");      }      qp=new SimpleQueryParser(state.searchAnalyzer,fieldAndWeights,flags);    } else     if (pr.name.equals("MultiFieldQueryParser")) {      Map<String,Float> fieldsAndWeights=parseFieldsAndWeights(state,pr.r,"fields");      String[] fields=new String[fieldsAndWeights.size()];      int upto=0;      for (      String field2 : fieldsAndWeights.keySet()) {        fields[upto++]=field2;      }      qp=new MultiFieldQueryParser(fields,state.searchAnalyzer,fieldsAndWeights);    } else {      assert false;      qp=null;    }    String opString=r.getEnum("defaultOperator");    if (opString.equals("or")) {      if (qp instanceof SimpleQueryParser) {        ((SimpleQueryParser)qp).setDefaultOperator(BooleanClause.Occur.SHOULD);      } else {        ((QueryParserBase)qp).setDefaultOperator(QueryParser.OR_OPERATOR);      }    } else {      if (qp instanceof SimpleQueryParser) {        ((SimpleQueryParser)qp).setDefaultOperator(BooleanClause.Occur.MUST);      } else {        ((QueryParserBase)qp).setDefaultOperator(QueryParser.AND_OPERATOR);      }    }    qp.setEnablePositionIncrements(r.getBoolean("enablePositionIncrements"));    if (qp instanceof QueryParserBase) {      QueryParserBase qpb=(QueryParserBase)qp;      qpb.setFuzzyMinSim(r.getInt("fuzzyMinSim"));      qpb.setFuzzyPrefixLength(r.getInt("fuzzyPrefixLength"));      qpb.setPhraseSlop(r.getInt("phraseSlop"));      if (r.hasParam("locale")) {        qpb.setLocale(getLocale(r.getStruct("locale")));      }    }    return qp;  } else {    List<String> fields;    if (field != null) {      fields=Collections.singletonList(field);    } else {      fields=state.getIndexedAnalyzedFields();    }    return new MultiFieldQueryParser(fields.toArray(new String[fields.size()]),state.searchAnalyzer);  }}  }
class C{  public GroupsSearchQuery(VkApiClient client,UserActor actor,String q){  super(client,"groups.search",SearchResponse.class);  accessToken(actor.getAccessToken());  q(q);}  }
class C{  public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,Charset.defaultCharset(),false);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_WARNING_MAXWAIT(String value0){  return new SM_SYSTEM_MESSAGE(1400828,value0);}  }
class C{  public void addResourcesDirectory(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myResourcesDirectories.add(directory);}  }
class C{  public static boolean isNimbus(){  return UIUtils.isNimbus();}  }
class C{  public long themeColor(){  return mThemeColor;}  }
class C{  @NonNull public static Maybe<LoginResult> login(@NonNull final Activity activity){  checkNotNull(activity,"activity == null");  ReactiveFB.getSessionManager().setActivity(activity);  return Maybe.create(new LoginOnSubscribe());}  }
class C{  public UsersGetSubscriptionsQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  @RequestMapping(value="/order/list",method=RequestMethod.GET) public PageRespJson selectOrderList(@RequestParam(value="reqId",required=false,defaultValue=StringConstant.ZERO) Integer reqId,@RequestParam(value="start",required=false) Integer start,@RequestParam(value="rows",required=false) Integer rows,@RequestParam(value="orderNo",required=false) String orderNo,@RequestParam(value="orderType",required=false) Integer orderType,@RequestParam(value="customerName",required=false) String customerName,@RequestParam(value="customerMobile",required=false) String customerMobile,@RequestParam(value="customerIdNumber",required=false) String customerIdNumber,@RequestParam(value="skuCode",required=false) String skuCode,@RequestParam(value="startDate",required=false) String startDate,@RequestParam(value="endDate",required=false) String endDate){  OrderReqDto reqDto=new OrderReqDto(reqId,start,rows);  reqDto.setOrderNo(orderNo);  reqDto.setOrderType(orderType);  reqDto.setCustomerName(customerName);  reqDto.setCustomerMobile(customerMobile);  reqDto.setCustomerIdNumber(customerIdNumber);  reqDto.setSkuCode(skuCode);  reqDto.setStartDate(startDate);  reqDto.setEndDate(endDate);  try {    List<Order> orderList=orderDao.searchOrder(reqDto);    int count=orderDao.searchOrderCount(reqDto);    return PageRespJson.buildSuccessResponse(orderList,reqId,count);  } catch (  Exception e) {    e.printStackTrace();    return PageRespJson.buildFailureResponse(StringUtils.getValidString(e.getMessage()),reqId);  }}  }
class C{  private boolean handleLiveTagRegistration(final ClientDataTagImpl liveTag) throws JMSException {  final DataTagQuality tagQuality=liveTag.getDataTagQuality();  if (tagQuality.isExistingTag()) {    if (!jmsProxy.isRegisteredListener(liveTag)) {      jmsProxy.registerUpdateListener(liveTag,liveTag);      return true;    }  } else {    supervisionManager.removeSupervisionListener(liveTag);    if (jmsProxy.isRegisteredListener(liveTag)) {      jmsProxy.unregisterUpdateListener(liveTag);    }  }  return false;}  }
class C{  public static long toLong(Object v){  return toLong(v,0);}  }
class C{  @NotNull public Emotion findEmotionFromSingleFace(@NotNull InputStream image){  List<Emotion> emotions=emotionBuilder.emotionRecognition(image).withResult();  if (Utils.isEmpty(emotions) || emotions.size() > 1)   throw new SingleFaceNotFoundException(Utils.isEmpty(emotions) ? 0 : emotions.size(),"a single face was not present");  return emotions.get(0);}  }
class C{  public static void removeAccess(long rid,String name){  Helper.delete(W.create("rid",rid).and("name",name),RoleAccess.class);  Helper.update(W.create(X.ID,rid),V.create("updated",System.currentTimeMillis()),Role.class);}  }
class C{  public void stopJumping(){  for (  JumpingBeansSpan bean : jumpingBeans) {    if (bean != null) {      bean.teardown();    }  }  cleanupSpansFrom(textView.get());}  }
class C{  public void reverse(int from,int to){  if (from == to) {    return;  }  if (from > to) {    throw new IllegalArgumentException("from cannot be greater than to");  }  for (int i=from, j=to - 1; i < j; i++, j--) {    swap(i,j);  }}  }
class C{  public GroupsEditQuery obsceneWords(String... value){  return unsafeParam("obscene_words",value);}  }
class C{  public void propertiesToContainerState(ContainerState containerState,Map<String,Object> properties){  AssertUtil.assertNotNull(containerState,"containerState");  AssertUtil.assertNotNull(properties,"properties");  containerState.id=(String)properties.get(DOCKER_CONTAINER_ID_PROP_NAME);  String name=(String)properties.get(DOCKER_CONTAINER_NAME_PROP_NAME);  if (name != null && name.startsWith("/")) {    name=name.substring(1);  }  containerState.names=Collections.singletonList(name);  containerState.created=parseDate(properties.get(DOCKER_CONTAINER_CREATED_PROP_NAME));  mapStateProperties(containerState,getMap(properties,DOCKER_CONTAINER_STATE_PROP_NAME));  mapConfigProperties(containerState,getMap(properties,DOCKER_CONTAINER_CONFIG_PROP_NAME));  mapPortBindingProperties(containerState,getMap(properties,DOCKER_CONTAINER_NETWORK_SETTINGS_PROP_NAME));  mapContainerIPAddress(containerState,getMap(properties,DOCKER_CONTAINER_NETWORK_SETTINGS_PROP_NAME));}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private void mergeDependenciesIntoGradle() throws Exception {  File gradleBuildFile=getGradleBuildFilePath(myContext.getModuleRoot());  String destinationContents=gradleBuildFile.exists() ? nullToEmpty(readTextFile(gradleBuildFile)) : "";  Object buildApi=getParamMap().get(TemplateMetadata.ATTR_BUILD_API);  String supportLibVersionFilter=buildApi != null ? buildApi.toString() : "";  String result=myIO.mergeGradleFiles(formatDependencies(),destinationContents,myContext.getProject(),supportLibVersionFilter);  myIO.writeFile(this,result,gradleBuildFile);  myNeedsGradleSync=true;}  }
class C{  public GroupsIsMemberQueryWithUserIdsExtended isMemberExtended(UserActor actor,String groupId,List<Integer> userIds){  return new GroupsIsMemberQueryWithUserIdsExtended(getClient(),actor,groupId,userIds);}  }
class C{  public NameFileFilter(String name){  this(name,null);}  }
class C{  public JsonArrayRequest(String url,Listener<JSONArray> listener,ErrorListener errorListener){  super(Method.GET,url,null,listener,errorListener);}  }
class C{  private void dropClass(IServerTypeDesc typeDesc){  final TypeData typeData=_typeDataMap.get(typeDesc);  if (typeData != null) {    Context context=null;    try {      context=getCacheContext();      clearEntries(typeData,context);      clearTemplates(typeDesc.getTypeName());      _typeDataMap.remove(typeDesc);    } catch (    SAException ex) {      JSpaceUtilities.throwEngineInternalSpaceException(ex.getMessage(),ex);    } finally {      freeCacheContext(context);    }  }}  }
class C{  protected boolean writeFields(DataOutputStream dd) throws IOException {  field_info fi;  int i;  for (i=0; i < fields_count; i++) {    fi=fields[i];    dd.writeShort(fi.access_flags);    dd.writeShort(fi.name_index);    dd.writeShort(fi.descriptor_index);    dd.writeShort(fi.attributes_count);    if (fi.attributes_count > 0) {      writeAttributes(dd,fi.attributes_count,fi.attributes);    }  }  return true;}  }
class C{  public void close(){  if (mBluetoothAdapter != null)   mBluetoothAdapter.cancelDiscovery();  if (mNeed2unRegister) {    mContext.unregisterReceiver(mReceiver);    mNeed2unRegister=!mNeed2unRegister;  }  mWritable=false;  mReadable=false;  if (mSocket != null)   try {    mSocket.close();  } catch (  IOException e) {    mSocket=null;  }  mNewList=null;  mBondedList=null;  mReceiver=null;  sBtHelperClient=null;  mCurrStatus=STATUS.FREE;}  }
class C{  @Override public void beforeFirst() throws RemoteException {  s.beforeFirst();}  }
class C{  public UpdateItem addItem(final long readUid,int readWeight,final Integer[] classIds) throws IOException {  if (classIds.length != numberOfClassifications)   throw new IOException("classIds has wrong length: " + classIds.length + ", should be: "+ numberOfClassifications);  UpdateItem item=new UpdateItem(numberOfClassifications);  item.setReadUId(readUid);  add(item);  readUid2UpdateItem.put(readUid,item);  if (readWeight == 0) {    readWeight=1;  }  for (int i=0; i < numberOfClassifications; i++) {    final int id=classIds[i];    if (id != 0) {      item.setClassId(i,id);      UpdateItem lastInClass=last[i].get(id);      if (lastInClass == null) {        first[i].put(id,item);        last[i].put(id,item);        size[i].put(id,readWeight);      } else {        lastInClass.setNextInClassifaction(i,readUid);        last[i].put(id,item);        size[i].put(id,size[i].get(id) + readWeight);      }    }  }  return item;}  }
class C{  @Override public void handleUseItemFinish(Player player,Npc npc){switch (npc.getNpcId()) {case 701001:    SkillEngine.getInstance().getSkill(npc,19316,60,player).useNoAnimationSkill();  break;case 701002:SkillEngine.getInstance().getSkill(npc,19317,60,player).useNoAnimationSkill();break;case 701003:SkillEngine.getInstance().getSkill(npc,19318,60,player).useNoAnimationSkill();break;case 701004:SkillEngine.getInstance().getSkill(npc,19319,60,player).useNoAnimationSkill();break;}}  }
class C{  protected PollsEditQuery pollId(int value){  return unsafeParam("poll_id",value);}  }
class C{  public static boolean checkRootPermission(){  return execCommand("echo root",true,false,null).result == 0;}  }
class C{  public String toString(){  return children.toString();}  }
class C{  @Override public Double fractionOfData(final long number_impressions_1,final long number_actions_1,final long number_impressions_2,final long number_actions_2,final double effect_size){  inputValidation(number_impressions_1,number_actions_1,number_impressions_2);  if (effect_size < -1.0 || effect_size > 1.0) {    throw new IllegalArgumentException("Effect size must be in the interval [-1, 1].");  }  double zval=DecisionAdjuster.scaledZ(confidenceLevel,maxDecisions);  double rate_1=1.0 * number_actions_1 / number_impressions_1;  double rate_2=rate_1 - effect_size;  return 1 / ((rate_1 * (1 - rate_1) / number_impressions_1 + rate_2 * (1 - rate_2) / number_impressions_2) * zval * zval / effect_size / effect_size);}  }
class C{  Object[] updateOrWrite(IEntryPacket[] entries,Transaction txn,long[] leases,SpaceContext sc,int operationModifiers,boolean fromWriteMultiple,boolean newRouter) throws UnusableEntryException, UnknownTypeException, TransactionException, RemoteException {  XtnEntry txnEntry=null;  if (txn != null) {    txnEntry=attachToXtn((ServerTransaction)txn,false);  }  Context context=null;  try {    context=_cacheManager.getCacheContext();    if (_isSyncReplication)     context.setSyncReplFromMultipleOperation(true);    context.setMultipleOperation();    setFromGatewayIfNeeded(sc,context);    Object[] returnValues=new Object[entries.length];    for (int i=0; i < entries.length; ++i) {      context.setWriteResult(null);      try {        UpdateOrWriteContext ctx=new UpdateOrWriteContext(entries[i],leases[i],0,txn,sc,operationModifiers,!fromWriteMultiple,false,fromWriteMultiple);        if (txnEntry != null && context.isFromGateway() && Modifiers.contains(operationModifiers,Modifiers.OVERRIDE_VERSION)) {          txnEntry.setGatewayOverrideVersion(entries[i].getUID());        }        ctx.setCacheContext(context);        AnswerPacket answerPacket=_spaceImpl.updateOrWrite(ctx,newRouter);        if (answerPacket != null) {          if (fromWriteMultiple && answerPacket.m_leaseProxy != null)           returnValues[i]=answerPacket.m_leaseProxy; else           if (fromWriteMultiple && answerPacket.getWriteEntryResult() != null)           returnValues[i]=answerPacket.getWriteEntryResult(); else           returnValues[i]=answerPacket.m_EntryPacket;        }      } catch (      UnknownTypeException e) {        throw e;      }catch (      InterruptedException e) {        throw e;      }catch (      Throwable e) {        returnValues[i]=e;      }    }    return returnValues;  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();    return null;  } finally {    if (txnEntry != null)     txnEntry.decrementUsed(true);    replicateAndfreeCache(context);  }}  }
class C{  public JSONArray optJSONArray(String key){  Object o=this.opt(key);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public boolean removeChildEdge(Edge e){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public static boolean isAssignable(Class targetType,Class valueType){  Assert.notNull(targetType,"Target type must not be null");  Assert.notNull(valueType,"Value type must not be null");  return (targetType.isAssignableFrom(valueType) || targetType.equals(primitiveWrapperTypeMap.get(valueType)));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Provoker_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200703,skillcaster,skillname);}  }
class C{  public WallSearchQueryWithExtended ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public static long tankiness(final PokemonId pokemonId,final int defenseIV,final int staminaIV){  final PokemonMeta meta=PokemonMetaRegistry.getMeta(pokemonId);  return (meta.getBaseStamina() + staminaIV) * (meta.getBaseDefense() + defenseIV);}  }
class C{  private static byte[] streamToBytes(InputStream in,int length) throws IOException {  byte[] bytes=new byte[length];  int count;  int pos=0;  while (pos < length && ((count=in.read(bytes,pos,length - pos)) != -1)) {    pos+=count;  }  if (pos != length) {    throw new IOException("Expected " + length + " bytes, read "+ pos+ " bytes");  }  return bytes;}  }
class C{  private boolean isConvex(final Vector2D[] hullVertices){  if (hullVertices.length < 3) {    return true;  }  int sign=0;  for (int i=0; i < hullVertices.length; i++) {    final Vector2D p1=hullVertices[i == 0 ? hullVertices.length - 1 : i - 1];    final Vector2D p2=hullVertices[i];    final Vector2D p3=hullVertices[i == hullVertices.length - 1 ? 0 : i + 1];    final Vector2D d1=p2.subtract(p1);    final Vector2D d2=p3.subtract(p2);    final double crossProduct=MathArrays.linearCombination(d1.getX(),d2.getY(),-d1.getY(),d2.getX());    final int cmp=Precision.compareTo(crossProduct,0.0,tolerance);    if (cmp != 0.0) {      if (sign != 0.0 && cmp != sign) {        return false;      }      sign=cmp;    }  }  return true;}  }
class C{  private boolean rebuildItems(){  boolean updated=false;  ItemsRange range=getItemsRange();  if (itemsLayout != null) {    int first=recycle.recycleItems(itemsLayout,firstItem,range);    updated=firstItem != first;    firstItem=first;  } else {    createItemsLayout();    updated=true;  }  if (!updated) {    updated=firstItem != range.getFirst() || itemsLayout.getChildCount() != range.getCount();  }  if (firstItem > range.getFirst() && firstItem <= range.getLast()) {    for (int i=firstItem - 1; i >= range.getFirst(); i--) {      if (!addViewItem(i,true)) {        break;      }      firstItem=i;    }  } else {    firstItem=range.getFirst();  }  int first=firstItem;  for (int i=itemsLayout.getChildCount(); i < range.getCount(); i++) {    if (!addViewItem(firstItem + i,false) && itemsLayout.getChildCount() == 0) {      first++;    }  }  firstItem=first;  return updated;}  }
class C{  public void clear(){  observations.clear();}  }
class C{  public static void error(@NonNull String tag,Throwable throwable,String message,Object... args){  android.util.Log.e(tag,String.format(Locale.ENGLISH,message,args),throwable);}  }
class C{  private List<Tuple2<Long,BigInteger>> processTupleFromPartitionDataBolt(Tuple tuple){  matrixElements.clear();  int rowIndex=tuple.getIntegerByField(StormConstants.HASH_FIELD);  if (!colIndexByRow.containsKey(rowIndex)) {    colIndexByRow.put(rowIndex,0);    hitsByRow.put(rowIndex,0);  }  if (splitPartitions) {    dataArray.add((BigInteger)tuple.getValueByField(StormConstants.PARTIONED_DATA_FIELD));  } else {    dataArray=(ArrayList<BigInteger>)tuple.getValueByField(StormConstants.PARTIONED_DATA_FIELD);  }  logger.debug("Retrieving {} elements in EncRowCalcBolt.",dataArray.size());  try {    int colIndex=colIndexByRow.get(rowIndex);    int numRecords=hitsByRow.get(rowIndex);    if (limitHitsPerSelector && numRecords < maxHitsPerSelector) {      logger.debug("computing matrix elements.");      matrixElements=ComputeEncryptedRow.computeEncRow(dataArray,query,rowIndex,colIndex);      colIndexByRow.put(rowIndex,colIndex + matrixElements.size());      hitsByRow.put(rowIndex,numRecords + 1);    } else     if (limitHitsPerSelector) {      logger.info("maxHits: rowIndex = " + rowIndex + " elementCounter = "+ numRecords);    }  } catch (  IOException e) {    logger.warn("Caught IOException while encrypting row. ",e);  }  dataArray.clear();  return matrixElements;}  }
class C{  protected AudioMoveToAlbumQuery audioIds(int... value){  return unsafeParam("audio_ids",value);}  }
class C{  @Override public TemplateDruidQuery updateOuterQuery(TemplateDruidQuery outerQuery,Map<String,String> oldFieldNameToNewFieldNameMap){  Map<String,Aggregation> oldNameToNewAggregationMapping=new HashMap<>();  Set<Aggregation> updatedOuterAggs=updateQueryAggs(outerQuery.getAggregations(),oldFieldNameToNewFieldNameMap,oldNameToNewAggregationMapping);  Set<PostAggregation> updateOuterPostAggs=new HashSet<>();  for (  PostAggregation postAggregation : outerQuery.getPostAggregations()) {    updateOuterPostAggs.add(replacePostAggWithPostAggFromMap(postAggregation,oldNameToNewAggregationMapping));  }  return new TemplateDruidQuery(updatedOuterAggs,updateOuterPostAggs,outerQuery.getInnerQuery(),outerQuery.getTimeGrain());}  }
class C{  private void addToMetricDictionary(MetricDictionary metricDictionary,List<MetricInstance> metrics){  metrics.stream().map(null).forEach(null);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ThrowStmt fullCopy(){  ThrowStmt tree=(ThrowStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getNotPrimaryAlignmentFlag()) {      return false;    }  } else {    if (!record.getNotPrimaryAlignmentFlag()) {      return false;    }  }  return true;}  }
class C{  public PhotosSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public OAuth1AccessToken(){  super("stub","stub","stub");}  }
class C{  public void run(){  SimilarityArray sa;switch (WeightingMethod) {case summaryEvaluator.USE_DISTRO_AVERAGE_AS_WEIGHT:    sa=Caller.calcDistroSimilarityMeasures(CurEntry,CompareAgainst,true,OutStream,Sem,WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,DoCharNGrams,DoWordNGrams,Silent);  break;case summaryEvaluator.USE_OCCURENCES_AS_WEIGHT:sa=Caller.calcSimilarityMeasures(CurEntry,CompareAgainst,true,OutStream,Sem,WordNGramSize_Min,WordNGramSize_Max,Word_Dmax,CharacterNGramSize_Min,CharacterNGramSize_Max,Character_Dmax,DoCharNGrams,DoWordNGrams,Silent);break;default :sa=new SimilarityArray();}}  }
class C{  public NamespaceHelper(Node node){  if (node != null) {    String[] component=node.getNodeName().split(":");    if (component.length == 2) {      prefix=component[0];      elementName=component[1];    } else     if (component.length == 1) {      prefix="";      elementName=component[0];    }  }}  }
class C{  public boolean filterOut(final SAMRecord first,final SAMRecord second){  throw new UnsupportedOperationException("Paired *Filter not implemented!");}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {  if (fDocumentHandler != null && !fOnlyPassPrefixMappingEvents) {    fDocumentHandler.processingInstruction(target,data,augs);  }}  }
class C{  private URI extendUriWithQuery(URI targetUri,CommandInput input){  List<String> parameters=new ArrayList<String>();  for (  Map.Entry<String,Object> property : input.getProperties().entrySet()) {    parameters.add(property.getKey());    parameters.add(String.valueOf(property.getValue()));  }  return UriUtils.extendUriWithQuery(targetUri,parameters.toArray(new String[0]));}  }
class C{  public Builder addConverterFactory(Converter.Factory factory){  converterFactories.add(checkNotNull(factory,"factory == null"));  return this;}  }
class C{  public V putIfAbsent(K key,V value,boolean unstableKey){  if (value == null)   throw new NullPointerException();  int hash=hash(key.hashCode());  return segmentFor(hash).put(key,hash,value,true,unstableKey);}  }
class C{  @Override public void onLoaderReset(Loader<Cursor> cursorLoader){  changeCursor(null);}  }
class C{  public static boolean hasLollipop(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP;}  }
class C{  public void scaleToSamples(int usrSamples){  double ratio;  ratio=(double)usrSamples / count;  count=0;  for (int i=0; i <= limits.length; ++i) {    results[i]=(int)Math.round(results[i] * ratio);    count+=results[i];  }}  }
class C{  public ExactMatchConversationCanceller(String escapeSequence){  this.escapeSequence=escapeSequence;}  }
class C{  public static byte[] hexStringToBytes(String hexString){  if (hexString == null || hexString.equals("")) {    return null;  }  hexString=hexString.toUpperCase();  int length=hexString.length() / 2;  char[] hexChars=hexString.toCharArray();  byte[] d=new byte[length];  for (int i=0; i < length; i++) {    int pos=i * 2;    d[i]=(byte)(charToByte(hexChars[pos]) << 4 | charToByte(hexChars[pos + 1]));  }  return d;}  }
class C{  public BoardGetCommentsQuery needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  public Tuple addTuple(Tuple t){  throw new UnsupportedOperationException();}  }
class C{  private String readResponseFromServer(HttpURLConnection urlConnection) throws RequestFailureException {  try {    InputStreamReader reader=new InputStreamReader(urlConnection.getInputStream());    BufferedReader in=new BufferedReader(reader);    try {      StringBuilder response=new StringBuilder();      for (String line=in.readLine(); line != null; line=in.readLine()) {        response.append(line);      }      checkServerResponseCode(urlConnection);      return response.toString();    }  finally {      in.close();    }  } catch (  IOException e) {    throw new RequestFailureException("Failed when reading response from server: ",e);  }}  }
class C{  public XMLGrammarPoolImpl(){  fGrammars=new Entry[TABLE_SIZE];  fPoolIsLocked=false;}  }
class C{  private List<Unit> collectDefinitions(Local l,LocalDefs localDefs,Body body){  List<Unit> defs=new ArrayList<Unit>();  for (  Unit u : body.getUnits()) {    List<Unit> defsOf=localDefs.getDefsOfAt(l,u);    if (defsOf != null)     defs.addAll(defsOf);  }  for (  Unit u : defs) {    Debug.printDbg("[add def] ",u);  }  return defs;}  }
class C{  @Override public void close(){}  }
class C{  public void updateClustering(String[] labels,Table<String,String,Float> matrix){  if (!inUpdate) {    try {      inUpdate=true;      labelOrder.clear();      treeView.getGraph().clear();      previousRectangle=null;      if (labels.length > 0) {        final Taxa taxa=new Taxa();        for (        String label : labels)         taxa.add(label);        if (labels.length == 1) {          final Node root=treeView.getPhyloTree().newNode();          treeView.getPhyloTree().setRoot(root);          treeView.setLabel(root,labels[0]);          labelOrder.addAll(getLabelOrder(treeView));        } else {          final Distances distances=new Distances(taxa.size());          for (int i=0; i < labels.length; i++) {            final float[] iValues=getValuesRow(labels[i],matrix);            for (int j=i + 1; j < labels.length; j++) {              final float[] jValues=getValuesRow(labels[j],matrix);              distances.set(i + 1,j + 1,computeCorrelationDistances(iValues.length,iValues,jValues));            }          }          UPGMA.apply(taxa,distances,treeView);          flipCoordinates(treeView,rootSide);          labelOrder.addAll(getLabelOrder(treeView));        }      }    }  finally {      inUpdate=false;    }  }}  }
class C{  public static void inferConstraints(WidgetsScene list){  inferConstraints(list.getRoot());}  }
class C{  public static boolean equals(CharSequence a,CharSequence b){  if (a == b)   return true;  int length;  if (a != null && b != null && (length=a.length()) == b.length()) {    if (a instanceof String && b instanceof String) {      return a.equals(b);    } else {      for (int i=0; i < length; i++) {        if (a.charAt(i) != b.charAt(i))         return false;      }      return true;    }  }  return false;}  }
class C{  public void move(int newX,int newY){  controller.mouseMove(newX,newY);}  }
class C{  public static String join(CharSequence delimiter,Iterable<?> tokens){  StringBuilder sb=new StringBuilder();  boolean firstTime=true;  for (  Object token : tokens) {    if (firstTime) {      firstTime=false;    } else {      sb.append(delimiter);    }    sb.append(token);  }  return sb.toString();}  }
class C{  public static boolean kingLike(Item tokenItem){  String kingName=((String)tokenItem.findFeature("p.name")).toLowerCase();  if (inKingSectionLikeHash(kingName,KING_NAMES)) {    return true;  } else {    String kingTitle=((String)tokenItem.findFeature("p.p.name")).toLowerCase();    return inKingSectionLikeHash(kingTitle,KING_TITLES);  }}  }
class C{  public boolean isNumericType(){  return valueType.isNumeric();}  }
class C{  public void write(int a) throws IOException {  outs.write(a);  position++;}  }
class C{  private void addTraps(){  for (  TryBlock<? extends ExceptionHandler> tryItem : tries) {    int startAddress=tryItem.getStartCodeAddress();    Debug.printDbg(" start : 0x",Integer.toHexString(startAddress));    int length=tryItem.getCodeUnitCount();    Debug.printDbg(" length: 0x",Integer.toHexString(length));    Debug.printDbg(" end   : 0x",Integer.toHexString(startAddress + length));    int endAddress=startAddress + length;    Unit beginStmt=instructionAtAddress(startAddress).getUnit();    Unit endStmt=instructionAtAddress(endAddress).getUnit();    if (jBody.getUnits().getLast() == endStmt && instructionAtAddress(endAddress - 1).getUnit() == endStmt) {      Unit nop=Jimple.v().newNopStmt();      jBody.getUnits().insertAfter(nop,endStmt);      endStmt=nop;    }    Debug.printDbg("begin instruction (0x",Integer.toHexString(startAddress),"): ",instructionAtAddress(startAddress).getUnit()," --- ",beginStmt);    Debug.printDbg("end instruction   (0x",Integer.toHexString(endAddress),"): ",instructionAtAddress(endAddress).getUnit()," --- ",endStmt);    List<? extends ExceptionHandler> hList=tryItem.getExceptionHandlers();    for (    ExceptionHandler handler : hList) {      int handlerAddress=handler.getHandlerCodeAddress();      Debug.printDbg("handler   (0x",Integer.toHexString(handlerAddress),"): ",instructionAtAddress(handlerAddress).getUnit()," --- ",handlerAddress > 0 ? instructionAtAddress(handlerAddress - 1).getUnit() : "<unknown>");      String exceptionType=handler.getExceptionType();      if (exceptionType == null)       exceptionType="Ljava/lang/Throwable;";      Type t=DexType.toSoot(exceptionType);      if (t instanceof RefType) {        SootClass exception=((RefType)t).getSootClass();        DexlibAbstractInstruction instruction=instructionAtAddress(handler.getHandlerCodeAddress());        if (!(instruction instanceof MoveExceptionInstruction))         Debug.printDbg("First instruction of trap handler unit not MoveException but ",instruction.getClass()); else         ((MoveExceptionInstruction)instruction).setRealType(this,exception.getType());        Trap trap=Jimple.v().newTrap(exception,beginStmt,endStmt,instruction.getUnit());        jBody.getTraps().add(trap);      }    }  }}  }
class C{  @NotNull public IdeaSourceDirectoryStub addSourceDir(@NotNull String path){  File dir=myFileStructure.createProjectDir(path);  IdeaSourceDirectoryStub sourceDir=new IdeaSourceDirectoryStub(dir);  mySourceDirs.add(sourceDir);  return sourceDir;}  }
class C{  public static PlaceholderFragment newInstance(int sectionNumber){  PlaceholderFragment fragment=new PlaceholderFragment();  Bundle args=new Bundle();  args.putInt(ARG_SECTION_NUMBER,sectionNumber);  fragment.setArguments(args);  return fragment;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public static <E>Stream<Map.Entry<E,E>> crossProductNoDoubles(Stream<E> stream){  Objects.requireNonNull(stream);  CrossProductOrderedSpliterator<E> spliterator=CrossProductOrderedSpliterator.noDoubles(stream.spliterator());  return StreamSupport.stream(spliterator,stream.isParallel()).onClose(null);}  }
class C{  @Override public void removeAttributeAt(int attrIndex){  fIsTableViewConsistent=false;  if (attrIndex < fLength - 1) {    Attribute removedAttr=fAttributes[attrIndex];    System.arraycopy(fAttributes,attrIndex + 1,fAttributes,attrIndex,fLength - attrIndex - 1);    fAttributes[fLength - 1]=removedAttr;  }  fLength--;}  }
class C{  @Override public Node nextSibling(){  if (fCurrentNode == null)   return null;  Node node=getNextSibling(fCurrentNode);  if (node != null) {    fCurrentNode=node;  }  return node;}  }
class C{  private void displayMessage(final BaseMqttMessage message){  displayMessage(new SimpleMqttMessage(message.getPayload(),message.getTopic(),message.getQoS(),message.isRetained()));}  }
class C{  public DataOutputBuffer(){  this(new Buffer());}  }
class C{  public static MaryModule instantiateModule(String moduleInitInfo) throws MaryConfigurationException {  Log.i(Mary.LOG,"Now initiating mary module '" + moduleInitInfo + "'");  MaryModule m=(MaryModule)MaryRuntimeUtils.instantiateObject(moduleInitInfo);  return m;}  }
class C{  private InputStream toBufferedInputStream(){  int remaining=count;  if (remaining == 0) {    return new ClosedInputStream();  }  List<ByteArrayInputStream> list=new ArrayList<ByteArrayInputStream>(buffers.size());  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    list.add(new ByteArrayInputStream(buf,0,c));    remaining-=c;    if (remaining == 0) {      break;    }  }  return new SequenceInputStream(Collections.enumeration(list));}  }
class C{  public void removeAllSections(){  this.sections.clear();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_TIME_10(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400223,durationtime0);}  }
class C{  private void writeLine(String str,int start,int len) throws IOException {  if (beginningOfLine && len > 0) {    writeIndent();    beginningOfLine=false;  }  writer.write(str,start,len);}  }
class C{  public AccountLookupContactsQuery fields(List<UserField> value){  return unsafeParam("fields",value);}  }
class C{  public void searchDevices(OnSearchDeviceListener listener){  checkNotNull(listener);  if (mBondedList == null)   mBondedList=new ArrayList<>();  if (mNewList == null)   mNewList=new ArrayList<>();  mOnSearchDeviceListener=listener;  if (mBluetoothAdapter == null) {    mOnSearchDeviceListener.onError(new NullPointerException(DEVICE_HAS_NOT_BLUETOOTH_MODULE));    return;  }  if (mReceiver == null)   mReceiver=new Receiver();  IntentFilter filter=new IntentFilter(BluetoothDevice.ACTION_FOUND);  mContext.registerReceiver(mReceiver,filter);  filter=new IntentFilter(BluetoothAdapter.ACTION_DISCOVERY_FINISHED);  mContext.registerReceiver(mReceiver,filter);  mNeed2unRegister=true;  mBondedList.clear();  mNewList.clear();  if (mBluetoothAdapter.isDiscovering())   mBluetoothAdapter.cancelDiscovery();  mBluetoothAdapter.startDiscovery();  if (mOnSearchDeviceListener != null)   mOnSearchDeviceListener.onStartDiscovery();}  }
class C{  private int findActivityElement(int activityIndex){  for (int elementIndex=0; elementIndex < mActivityList.size(); elementIndex++) {    if (mActivityList.get(elementIndex).mActivityIndex == activityIndex) {      return elementIndex;    }  }  return -1;}  }
class C{  public Syncer(String threadName,DirectPersistencySyncHandler handler){  super(threadName);  _handler=handler;  this.setDaemon(true);}  }
class C{  public void handleConstant(Constant constant){  setResult(fetchNode(constant));}  }
class C{  public ArrayRealVector(ArrayRealVector v1,double[] v2){  final int l1=v1.getDimension();  final int l2=v2.length;  data=new double[l1 + l2];  System.arraycopy(v1.data,0,data,0,l1);  System.arraycopy(v2,0,data,l1,l2);}  }
class C{  public String post(String stream) throws HttpClientException {  this.rawStream=stream;  return sendHttpRequest("post");}  }
class C{  @Override public String toString(){  return Base64.encodeToString(getConfidentialityKey().getEncoded(),BASE64_FLAGS) + ":" + Base64.encodeToString(getIntegrityKey().getEncoded(),BASE64_FLAGS);}  }
class C{  @Override public void confirm(){  bobcatWait.withTimeout(Timeouts.BIG).until(WindowActions.clickButton(createButton));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GET_EXP2_MAKEUP_BONUS(long num0,long num1){  return new SM_SYSTEM_MESSAGE(1400349,num0,num1);}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEvent(GymsEvent event){  setGymsMarkers(event);}  }
class C{  public static void zipDir(String zipDirectory,String outputFile){  ZipOutputStream zip=null;  FileOutputStream fileWriter=null;  try {    fileWriter=new FileOutputStream(outputFile);    zip=new ZipOutputStream(fileWriter);    addFolderToZip("",zipDirectory,zip);    zip.close();    fileWriter.close();  } catch (  IOException e) {    LOGGER.log(Level.WARNING,"Unable to zip file",e);  }}  }
class C{  @Override public List<Class<? extends ConfigAspect>> mergeDependencies(){  return ImmutableList.of();}  }
class C{  private Store meta(Store store){  Map<String,Object> map=this.restTemplate.exchange(url + "/stores/{id}",HttpMethod.GET,null,new ParameterizedTypeReference<Map<String,Object>>(){  },store.getId()).getBody();  @SuppressWarnings("unchecked") Map<String,Object> meta=(Map<String,Object>)map.get("address");  store.getMeta().putAll(meta);  return store;}  }
class C{  public LeadsCompleteQuery comment(String value){  return unsafeParam("comment",value);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public Fires(Entity entity,double x,double y,double z,float yaw,float partialTicks){  this.entity=entity;  this.x=x;  this.y=y;  this.z=z;  this.yaw=yaw;  this.partialTicks=partialTicks;}  }
class C{  public static RecipientEntry constructFakeEntry(final String address,final boolean isValid){  final Rfc822Token[] tokens=Rfc822Tokenizer.tokenize(address);  final String tokenizedAddress=tokens.length > 0 ? tokens[0].getAddress() : address;  return new RecipientEntry(ENTRY_TYPE_PERSON,tokenizedAddress,tokenizedAddress,INVALID_DESTINATION_TYPE,null,INVALID_CONTACT,null,INVALID_CONTACT,null,true,isValid,null);}  }
class C{  public WallGetCommentsQueryWithExtended needLikes(Boolean value){  return unsafeParam("need_likes",value);}  }
class C{  @Override public Source resolve(String href,String base) throws TransformerException {  String uri=href;  String fragment=null;  int hashPos=href.indexOf("#");  if (hashPos >= 0) {    uri=href.substring(0,hashPos);    fragment=href.substring(hashPos + 1);  }  String result=null;  if (href != null && uriMap.containsKey(href)) {    result=(String)uriMap.get(href);  }  if (result == null) {    try {      URL url=null;      if (base == null) {        url=new URL(uri);        result=url.toString();      } else {        URL baseURL=new URL(base);        url=(href.length() == 0 ? baseURL : new URL(baseURL,uri));        result=url.toString();      }    } catch (    java.net.MalformedURLException mue) {      String absBase=makeAbsolute(base);      if (!absBase.equals(base)) {        return resolve(href,absBase);      } else {        throw new TransformerException("Malformed URL " + href + "(base "+ base+ ")",mue);      }    }  }  SAXSource source=new SAXSource();  source.setInputSource(new InputSource(result));  return source;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_SEAL_WARNING_UNSEALCANCEL(String value0){  return new SM_SYSTEM_MESSAGE(1400829,value0);}  }
class C{  public static void showInformation(String message){  showNotification(title,message,Mode.information,Pos.BOTTOM_LEFT,10000);}  }
class C{  public void testWriteReadFull() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(replicationTransmissionPolicy);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  ReplicationTransmissionPolicy copy=(ReplicationTransmissionPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(replicationTransmissionPolicy,copy));}  }
class C{  public Node addChild(Node parent){  throw new UnsupportedOperationException("Changes to tree structure not allowed for spanning trees.");}  }
class C{  public static boolean couldMerge(ItemStack a,ItemStack b){  if (a == null || b == null) {    return true;  }  return a.getItem() == b.getItem() && a.getItemDamage() == b.getItemDamage() && sameItemTags(a,b);}  }
class C{  public static Map<String,List<Distributable>> nodeBlockMapping(List<Distributable> blockInfos,int noOfNodesInput){  return nodeBlockMapping(blockInfos,noOfNodesInput,null);}  }
class C{  public Clock logTime(String message){  super.split();  String time=DurationFormatUtils.formatDurationHMS(super.getSplitTime());  String msg=message + SEPARATOR + time;  if (log != null) {    log.info(msg);  } else {    defaultLog.info(msg);  }  return this;}  }
class C{  @Override public void endDocument(Augmentations augs) throws XNIException {}  }
class C{  private static synchronized void saveXML(Element rootElement,File containerFile) throws IOException {  try {    String filePath=containerFile.getCanonicalPath();    String filePathWithoutExtention=filePath.substring(0,filePath.lastIndexOf('.'));    File oldFile=new File(filePathWithoutExtention + ".old");    if (oldFile.exists())     oldFile.delete(); else     containerFile.renameTo(oldFile);    PrintStream attrStream=new PrintStream(new FileOutputStream(filePath));    JSpaceUtilities.domWriter(rootElement,attrStream,"");    attrStream.close();  } catch (  FileNotFoundException ex) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"FileNotFoundException: " + ex.toString(),ex);    }  }}  }
class C{  @Override public void removeEnvVar(EnvVar envVar){  if (envVar != null) {    envVarList.remove(envVar);  }}  }
class C{  public void stopWatching(String fileName){synchronized (mObservedChildren) {    mObservedChildren.remove(fileName);    if (mObservedChildren.isEmpty()) {      stopWatching();      Log_OC.d(TAG,"Stopped watching parent folder " + mPath + "/");    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_OBJECT_DELETE_USE_COUNT(int nameId){  return new SM_SYSTEM_MESSAGE(1401262,calculateNameId(nameId));}  }
class C{  public CommandBuilder withLongSwitch(String switchName,Object value){  withLongSwitch(switchName,value,UnaryOperator.identity());  return this;}  }
class C{  private static void replace(byte[] text,byte[] replacement,int start){  for (int t=start, p=0; p < replacement.length; t++, p++) {    text[t]=replacement[p];  }}  }
class C{  public void renderBeginningBoundaryComment(Appendable writer,String widgetType,ModelWidget modelWidget) throws IOException {  StringWriter sr=new StringWriter();  sr.append("<@formatBoundaryComment ");  sr.append(" boundaryType=");  sr.append(ftlFmt.makeStringLiteral("Begin"));  sr.append(" widgetType=");  sr.append(ftlFmt.makeStringLiteral(widgetType));  sr.append(" widgetName=");  sr.append(ftlFmt.makeStringLiteral(modelWidget.getBoundaryCommentName()));  sr.append(" />");  executeMacro(writer,sr.toString());}  }
class C{  public void onStart(){  for (  CordovaPlugin plugin : this.pluginMap.values()) {    if (plugin != null) {      plugin.onStart();    }  }}  }
class C{  public AdaptableList add(IAdaptable a){  children.add(a);  return this;}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.main);}  }
class C{  public void listAlphabeticWords(){  for (  Node n : root.children)   n.listAlphabeticWords(new LinkedList<Character>());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200401,skillname);}  }
class C{  public void removeXValue(int index){  mXVals.remove(index);}  }
class C{  protected PhotosCopyQuery photoId(int value){  return unsafeParam("photo_id",value);}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  boolean shouldAnimateSearchProviderIcon(SelectionType selectionType,boolean isShowing){  if (isShowing || ContextualSearchFieldTrial.areExtraSearchBarAnimationsDisabled()) {    return false;  }  if (selectionType == SelectionType.TAP) {    long currentTimeMillis=System.currentTimeMillis();    long lastAnimatedTimeMillis=mPreferenceManager.getContextualSearchLastAnimationTime();    if (Math.abs(currentTimeMillis - lastAnimatedTimeMillis) > ONE_DAY_IN_MILLIS) {      mPreferenceManager.setContextualSearchLastAnimationTime(currentTimeMillis);      return true;    } else {      return false;    }  } else   if (selectionType == SelectionType.LONG_PRESS) {    return getPromoOpenCount() == 0;  }  return false;}  }
class C{  public CollectionsImplementor(CollectionsModel model,CollectionsView view){  this.model=model;  this.view=view;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TShortLongHashMap)) {    return false;  }  TShortLongHashMap that=(TShortLongHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public static boolean isDark(@ColorInt int color){  float[] hsl=new float[3];  android.support.v4.graphics.ColorUtils.colorToHSL(color,hsl);  return isDark(hsl);}  }
class C{  public FriendsDeleteQuery(VkApiClient client,UserActor actor,int userId){  super(client,"friends.delete",DeleteResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public Builder easeLinearity(Number easeLinearity){  this.easeLinearity=easeLinearity;  return this;}  }
class C{  public <T>T removeEnv(String key){  String ekey=this.expandString(key);  FlexibleMapAccessor<T> fma=FlexibleMapAccessor.getInstance(ekey);  return removeEnv(fma);}  }
class C{  @Override public boolean equals(Object o){  if (this == o)   return true;  if (!(o instanceof WeakKey))   return false;  WeakKey weakKey=(WeakKey)o;  Object key=weakKey.get();  return key == get();}  }
class C{  @Override public void destroy() throws Exception {  if (this.cacheManager != null) {    this.cacheManager.stop();  }}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  @ConstructorProperties({"name","value"}) public SimpleMetric(MetricName name,MetricValue value){  name_=requireNonNull(name);  value_=requireNonNull(value);}  }
class C{  public boolean containOnlyDigitalGoods(){  for (  ShoppingCartItem cartItem : this.cartLines) {    GenericValue product=cartItem.getProduct();    try {      GenericValue productType=product.getRelatedOne("ProductType",true);      if (productType == null || !"N".equals(productType.getString("isPhysical"))) {        return false;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up ProductType: " + e.toString(),module);      return false;    }  }  return true;}  }
class C{  @Deprecated protected void wait(int duration,Runnable callBack){  executor.schedule(callBack,duration,TimeUnit.MILLISECONDS);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getDeptName() == null) ? 0 : getDeptName().hashCode());  result=prime * result + ((getParentId() == null) ? 0 : getParentId().hashCode());  result=prime * result + ((getSortNo() == null) ? 0 : getSortNo().hashCode());  result=prime * result + ((getLeaf() == null) ? 0 : getLeaf().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  return result;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_DISPERSE_DONE(String value0){  return new SM_SYSTEM_MESSAGE(1300302,value0);}  }
class C{  public static void registerReceiver(Context context,BroadcastReceiver receiver,String... actions){  IntentFilter filter=new IntentFilter();  for (  String action : actions)   filter.addAction(action);  LocalBroadcastManager.getInstance(context).registerReceiver(receiver,filter);}  }
class C{  public Item(EntityPlayer player,ItemStack stack,ItemStack fuel,int levels,List<EnchantmentData> enchantments){  this.player=player;  this.stack=stack;  this.fuel=fuel;  this.levels=levels;  this.enchantments=enchantments;}  }
class C{  public XMLGrammarCachingConfiguration(SymbolTable symbolTable){  this(symbolTable,fStaticGrammarPool,null);}  }
class C{  public OpenMapRealMatrix(OpenMapRealMatrix matrix){  this.rows=matrix.rows;  this.columns=matrix.columns;  this.entries=new OpenIntToDoubleHashMap(matrix.entries);}  }
class C{  public AndFileFilter(){  this.fileFilters=new ArrayList<IOFileFilter>();}  }
class C{  public static double distanceInf(double[] p1,double[] p2){  double max=0;  for (int i=0; i < p1.length; i++) {    max=Math.max(max,Math.abs(p1[i] - p2[i]));  }  return max;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_TOWER_DEFENCE_CANT_INVITE_WHEN_HE_IS_ASKED_QUESTION(String value0){  return new SM_SYSTEM_MESSAGE(1400953,value0);}  }
class C{  public void testGetDeployments() throws Exception {  try {    Calendar yesterday=Calendar.getInstance();    yesterday.add(Calendar.DAY_OF_MONTH,-1);    dmnEngineConfiguration.getClock().setCurrentTime(yesterday.getTime());    DmnDeployment firstDeployment=dmnRepositoryService.createDeployment().name("Deployment 1").category("DEF").addClasspathResource("org/activiti/rest/dmn/service/api/repository/simple.dmn").deploy();    dmnEngineConfiguration.getClock().setCurrentTime(Calendar.getInstance().getTime());    DmnDeployment secondDeployment=dmnRepositoryService.createDeployment().name("Deployment 2").category("ABC").addClasspathResource("org/activiti/rest/dmn/service/api/repository/simple.dmn").tenantId("myTenant").deploy();    String baseUrl=DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT_COLLECTION);    assertResultsPresentInDataResponse(baseUrl,firstDeployment.getId(),secondDeployment.getId());    String url=baseUrl + "?name=" + encode("Deployment 1");    assertResultsPresentInDataResponse(url,firstDeployment.getId());    url=baseUrl + "?nameLike=" + encode("%ment 2");    assertResultsPresentInDataResponse(url,secondDeployment.getId());    url=baseUrl + "?category=DEF";    assertResultsPresentInDataResponse(url,firstDeployment.getId());    url=baseUrl + "?categoryNotEquals=DEF";    assertResultsPresentInDataResponse(url,secondDeployment.getId());    url=baseUrl + "?tenantId=myTenant";    assertResultsPresentInDataResponse(url,secondDeployment.getId());    url=baseUrl + "?tenantId=unexistingTenant";    assertResultsPresentInDataResponse(url);    url=baseUrl + "?tenantIdLike=" + encode("%enant");    assertResultsPresentInDataResponse(url,secondDeployment.getId());    url=baseUrl + "?withoutTenantId=true";    assertResultsPresentInDataResponse(url,firstDeployment.getId());    CloseableHttpResponse response=executeRequest(new HttpGet(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT_COLLECTION) + "?sort=name&order=asc"),HttpStatus.SC_OK);    JsonNode dataNode=objectMapper.readTree(response.getEntity().getContent()).get("data");    closeResponse(response);    assertEquals(2L,dataNode.size());    assertEquals(firstDeployment.getId(),dataNode.get(0).get("id").textValue());    assertEquals(secondDeployment.getId(),dataNode.get(1).get("id").textValue());    response=executeRequest(new HttpGet(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT_COLLECTION) + "?sort=deployTime&order=asc"),HttpStatus.SC_OK);    dataNode=objectMapper.readTree(response.getEntity().getContent()).get("data");    closeResponse(response);    assertEquals(2L,dataNode.size());    assertEquals(firstDeployment.getId(),dataNode.get(0).get("id").textValue());    assertEquals(secondDeployment.getId(),dataNode.get(1).get("id").textValue());    response=executeRequest(new HttpGet(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT_COLLECTION) + "?sort=tenantId&order=desc"),HttpStatus.SC_OK);    dataNode=objectMapper.readTree(response.getEntity().getContent()).get("data");    closeResponse(response);    assertEquals(2L,dataNode.size());    assertEquals(secondDeployment.getId(),dataNode.get(0).get("id").textValue());    assertEquals(firstDeployment.getId(),dataNode.get(1).get("id").textValue());    response=executeRequest(new HttpGet(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT_COLLECTION) + "?sort=deployTime&order=asc&start=1&size=1"),HttpStatus.SC_OK);    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());    closeResponse(response);    dataNode=responseNode.get("data");    assertEquals(1L,dataNode.size());    assertEquals(secondDeployment.getId(),dataNode.get(0).get("id").textValue());    assertEquals(2L,responseNode.get("total").longValue());    assertEquals(1L,responseNode.get("start").longValue());    assertEquals(1L,responseNode.get("size").longValue());  }  finally {    List<DmnDeployment> deployments=dmnRepositoryService.createDeploymentQuery().list();    for (    DmnDeployment deployment : deployments) {      dmnRepositoryService.deleteDeployment(deployment.getId());    }  }}  }
class C{  public boolean isApplicable(){  CompareWindow viewer=(CompareWindow)getParent();  return viewer != null && viewer.getJList().getSelectedValuesList().size() >= 1;}  }
class C{  @Deployment public void testActivityMessageBoundaryEventsOnUserTask() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("messageOnUserTaskProcess");  assertNotNull(processInstance);  Execution executionWithMessage=runtimeService.createExecutionQuery().messageEventSubscriptionName("message_1").singleResult();  assertNotNull(executionWithMessage);  runtimeService.messageEventReceived("message_1",executionWithMessage.getId());  assertEquals(3,listener.getEventsReceived().size());  assertTrue(listener.getEventsReceived().get(0) instanceof ActivitiMessageEvent);  ActivitiMessageEvent messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_WAITING,messageEvent.getType());  assertEquals("boundaryMessageEventCatching",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("message_1",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(1) instanceof ActivitiMessageEvent);  messageEvent=(ActivitiMessageEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED,messageEvent.getType());  assertEquals("boundaryMessageEventCatching",messageEvent.getActivityId());  assertEquals(executionWithMessage.getId(),messageEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),messageEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),messageEvent.getProcessDefinitionId());  assertEquals("message_1",messageEvent.getMessageName());  assertNull(messageEvent.getMessageData());  assertTrue(listener.getEventsReceived().get(2) instanceof ActivitiActivityCancelledEvent);  ActivitiActivityCancelledEvent signalEvent=(ActivitiActivityCancelledEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.ACTIVITY_CANCELLED,signalEvent.getType());  assertEquals("cloudformtask1",signalEvent.getActivityId());  assertEquals(executionWithMessage.getId(),signalEvent.getExecutionId());  assertEquals(executionWithMessage.getProcessInstanceId(),signalEvent.getProcessInstanceId());  assertEquals(processInstance.getProcessDefinitionId(),signalEvent.getProcessDefinitionId());  assertNotNull(signalEvent.getCause());  assertTrue(signalEvent.getCause() instanceof MessageEventSubscriptionEntity);  MessageEventSubscriptionEntity cause=(MessageEventSubscriptionEntity)signalEvent.getCause();  assertEquals("message_1",cause.getEventName());  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_WAITING);  assertDatabaseEventPresent(ActivitiEventType.ACTIVITY_MESSAGE_RECEIVED);}  }
class C{  public void update(){  updateButtons();}  }
class C{  public void updatePackage(Context context,String packageName){  final List<ResolveInfo> matches=findActivitiesForPackage(context,packageName);  if (matches.size() > 0) {    for (int i=data.size() - 1; i >= 0; i--) {      final ItemApplication applicationInfo=data.get(i);      final ComponentName component=applicationInfo.mIntent.getComponent();      if (packageName.equals(component.getPackageName())) {        if (!findActivity(matches,component)) {          removed.add(applicationInfo);          mIconCache.remove(component);          data.remove(i);        }      }    }    int count=matches.size();    for (int i=0; i < count; i++) {      final ResolveInfo info=matches.get(i);      ItemApplication applicationInfo=findApplicationInfoLocked(info.activityInfo.applicationInfo.packageName,info.activityInfo.name);      if (applicationInfo == null) {        add(new ItemApplication(context.getPackageManager(),info,mIconCache,null));      } else {        mIconCache.remove(applicationInfo.mComponentName);        mIconCache.getTitleAndIcon(applicationInfo,info,null);        modified.add(applicationInfo);      }    }  } else {    for (int i=data.size() - 1; i >= 0; i--) {      final ItemApplication applicationInfo=data.get(i);      final ComponentName component=applicationInfo.mIntent.getComponent();      if (packageName.equals(component.getPackageName())) {        removed.add(applicationInfo);        mIconCache.remove(component);        data.remove(i);      }    }  }}  }
class C{  public TermCriteria(int type,int maxCount,double epsilon){  this.type=type;  this.maxCount=maxCount;  this.epsilon=epsilon;}  }
class C{  public boolean isFifo(){  return fifo;}  }
class C{  public static boolean batch(WebSocketImpl ws,ByteChannel sockchannel) throws IOException {  ByteBuffer buffer=ws.outQueue.peek();  WrappedByteChannel c=null;  if (buffer == null) {    if (sockchannel instanceof WrappedByteChannel) {      c=(WrappedByteChannel)sockchannel;      if (c.isNeedWrite()) {        c.writeMore();      }    }  } else {    do {      sockchannel.write(buffer);      if (buffer.remaining() > 0) {        return false;      } else {        ws.outQueue.poll();        buffer=ws.outQueue.peek();      }    } while (buffer != null);  }  if (ws != null && ws.outQueue.isEmpty() && ws.isFlushAndClose() && ws.getDraft() != null && ws.getDraft().getRole() != null && ws.getDraft().getRole() == Role.SERVER) {synchronized (ws) {      ws.closeConnection();    }  }  return c != null ? !((WrappedByteChannel)sockchannel).isNeedWrite() : true;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (constraints == null) {    throw new InvalidObjectException("cannot create constraint with no elements");  }  try {    verify(constraints,2);  } catch (  RuntimeException e) {    if (e instanceof NullPointerException || e instanceof IllegalArgumentException) {      InvalidObjectException ee=new InvalidObjectException(e.getMessage());      ee.initCause(e);      throw ee;    }    throw e;  }  for (int i=constraints.length; --i >= 0; ) {    if (Constraint.contains(constraints,i,constraints[i])) {      throw new InvalidObjectException("cannot create constraint with duplicate elements");    }  }  setRelative();}  }
class C{  public ConfigXmlProvider(File configFile) throws XmlParsingException, FileNotFoundException {  if (!configFile.isFile()) {    throw new FileNotFoundException(String.format("Invalid config file: '%s' not found",configFile.getAbsolutePath()));  }  this.config=XmlParser.parse(configFile,new String[]{CONFIG_XSD},CONFIG_PACKAGE,ConfigType.class);}  }
class C{  public LineTableAttr(){  line=new Vector();  pc=new Vector();}  }
class C{  protected void createFullCovarianceMatrices(){  Matrix curPoint=null;  Matrix[] centers;  Matrix diff;  double[][][] clusterElements=null;  int[] numberElements;  double minDistance=0.0d;  int clusterIndex=0;  this.covariances=new Matrix[clusters.length];  centers=new Matrix[clusters.length];  numberElements=new int[clusters.length];  clusterElements=new double[clusters.length][][];  for (int i=0; i < clusters.length; i++) {    clusterElements[i]=new double[clusters[i].getNumberOfElements()][dimension];    centers[i]=clusters[i].getCenter();  }  for (int k=0; k < data.size(); k++) {    curPoint=data.get(k);    minDistance=Double.MAX_VALUE;    for (int j=0; j < numberClusters; j++) {      double d=clusters[j].getDistanceFromCenter(curPoint);      if (d < minDistance) {        minDistance=d;        clusterIndex=j;      }    }    diff=centers[clusterIndex].minus(curPoint);    clusterElements[clusterIndex][numberElements[clusterIndex]]=diff.getColumnPackedCopy();    numberElements[clusterIndex]++;  }  for (int i=0; i < numberClusters; i++) {    covariances[i]=new Matrix(clusterElements[i],numberElements[i],dimension);    covariances[i]=(covariances[i].transpose().times(covariances[i])).times(1.0d / numberElements[i]);    if (covariances[i].rank() < dimension) {      double GMM_WIDTH=1.0d;      covariances[i]=covariances[i].plus(Matrix.identity(dimension,dimension).times(GMM_WIDTH));    }  }}  }
class C{  public WeatherView(Context context,AttributeSet attrs){  super(context,attrs);  mContext=context;  if (!isInEditMode()) {    mActivity=(Activity)getContext();    mSensorManager=(SensorManager)mActivity.getSystemService(mActivity.SENSOR_SERVICE);    accelerometer=mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);    magnetometer=mSensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);    initListeners();    setWeather(Constants.weatherStatus.SUN);    initOptions(context,attrs);  }}  }
class C{  private double[] altmov(int knew,double adelt){  printMethod();  final int n=currentBest.getDimension();  final int npt=numberOfInterpolationPoints;  final ArrayRealVector glag=new ArrayRealVector(n);  final ArrayRealVector hcol=new ArrayRealVector(npt);  final ArrayRealVector work1=new ArrayRealVector(n);  final ArrayRealVector work2=new ArrayRealVector(n);  for (int k=0; k < npt; k++) {    hcol.setEntry(k,ZERO);  }  for (int j=0, max=npt - n - 1; j < max; j++) {    final double tmp=zMatrix.getEntry(knew,j);    for (int k=0; k < npt; k++) {      hcol.setEntry(k,hcol.getEntry(k) + tmp * zMatrix.getEntry(k,j));    }  }  final double alpha=hcol.getEntry(knew);  final double ha=HALF * alpha;  for (int i=0; i < n; i++) {    glag.setEntry(i,bMatrix.getEntry(knew,i));  }  for (int k=0; k < npt; k++) {    double tmp=ZERO;    for (int j=0; j < n; j++) {      tmp+=interpolationPoints.getEntry(k,j) * trustRegionCenterOffset.getEntry(j);    }    tmp*=hcol.getEntry(k);    for (int i=0; i < n; i++) {      glag.setEntry(i,glag.getEntry(i) + tmp * interpolationPoints.getEntry(k,i));    }  }  double presav=ZERO;  double step=Double.NaN;  int ksav=0;  int ibdsav=0;  double stpsav=0;  for (int k=0; k < npt; k++) {    if (k == trustRegionCenterInterpolationPointIndex) {      continue;    }    double dderiv=ZERO;    double distsq=ZERO;    for (int i=0; i < n; i++) {      final double tmp=interpolationPoints.getEntry(k,i) - trustRegionCenterOffset.getEntry(i);      dderiv+=glag.getEntry(i) * tmp;      distsq+=tmp * tmp;    }    double subd=adelt / FastMath.sqrt(distsq);    double slbd=-subd;    int ilbd=0;    int iubd=0;    final double sumin=FastMath.min(ONE,subd);    for (int i=0; i < n; i++) {      final double tmp=interpolationPoints.getEntry(k,i) - trustRegionCenterOffset.getEntry(i);      if (tmp > ZERO) {        if (slbd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {          slbd=(lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp;          ilbd=-i - 1;        }        if (subd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {          subd=FastMath.max(sumin,(upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp);          iubd=i + 1;        }      } else       if (tmp < ZERO) {        if (slbd * tmp > upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {          slbd=(upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp;          ilbd=i + 1;        }        if (subd * tmp < lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) {          subd=FastMath.max(sumin,(lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i)) / tmp);          iubd=-i - 1;        }      }    }    step=slbd;    int isbd=ilbd;    double vlag=Double.NaN;    if (k == knew) {      final double diff=dderiv - ONE;      vlag=slbd * (dderiv - slbd * diff);      final double d1=subd * (dderiv - subd * diff);      if (FastMath.abs(d1) > FastMath.abs(vlag)) {        step=subd;        vlag=d1;        isbd=iubd;      }      final double d2=HALF * dderiv;      final double d3=d2 - diff * slbd;      final double d4=d2 - diff * subd;      if (d3 * d4 < ZERO) {        final double d5=d2 * d2 / diff;        if (FastMath.abs(d5) > FastMath.abs(vlag)) {          step=d2 / diff;          vlag=d5;          isbd=0;        }      }    } else {      vlag=slbd * (ONE - slbd);      final double tmp=subd * (ONE - subd);      if (FastMath.abs(tmp) > FastMath.abs(vlag)) {        step=subd;        vlag=tmp;        isbd=iubd;      }      if (subd > HALF && FastMath.abs(vlag) < ONE_OVER_FOUR) {        step=HALF;        vlag=ONE_OVER_FOUR;        isbd=0;      }      vlag*=dderiv;    }    final double tmp=step * (ONE - step) * distsq;    final double predsq=vlag * vlag * (vlag * vlag + ha * tmp * tmp);    if (predsq > presav) {      presav=predsq;      ksav=k;      stpsav=step;      ibdsav=isbd;    }  }  for (int i=0; i < n; i++) {    final double tmp=trustRegionCenterOffset.getEntry(i) + stpsav * (interpolationPoints.getEntry(ksav,i) - trustRegionCenterOffset.getEntry(i));    newPoint.setEntry(i,FastMath.max(lowerDifference.getEntry(i),FastMath.min(upperDifference.getEntry(i),tmp)));  }  if (ibdsav < 0) {    newPoint.setEntry(-ibdsav - 1,lowerDifference.getEntry(-ibdsav - 1));  }  if (ibdsav > 0) {    newPoint.setEntry(ibdsav - 1,upperDifference.getEntry(ibdsav - 1));  }  final double bigstp=adelt + adelt;  int iflag=0;  double cauchy=Double.NaN;  double csave=ZERO;  while (true) {    double wfixsq=ZERO;    double ggfree=ZERO;    for (int i=0; i < n; i++) {      final double glagValue=glag.getEntry(i);      work1.setEntry(i,ZERO);      if (FastMath.min(trustRegionCenterOffset.getEntry(i) - lowerDifference.getEntry(i),glagValue) > ZERO || FastMath.max(trustRegionCenterOffset.getEntry(i) - upperDifference.getEntry(i),glagValue) < ZERO) {        work1.setEntry(i,bigstp);        ggfree+=glagValue * glagValue;      }    }    if (ggfree == ZERO) {      return new double[]{alpha,ZERO};    }    final double tmp1=adelt * adelt - wfixsq;    if (tmp1 > ZERO) {      step=FastMath.sqrt(tmp1 / ggfree);      ggfree=ZERO;      for (int i=0; i < n; i++) {        if (work1.getEntry(i) == bigstp) {          final double tmp2=trustRegionCenterOffset.getEntry(i) - step * glag.getEntry(i);          if (tmp2 <= lowerDifference.getEntry(i)) {            work1.setEntry(i,lowerDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));            final double d1=work1.getEntry(i);            wfixsq+=d1 * d1;          } else           if (tmp2 >= upperDifference.getEntry(i)) {            work1.setEntry(i,upperDifference.getEntry(i) - trustRegionCenterOffset.getEntry(i));            final double d1=work1.getEntry(i);            wfixsq+=d1 * d1;          } else {            final double d1=glag.getEntry(i);            ggfree+=d1 * d1;          }        }      }    }    double gw=ZERO;    for (int i=0; i < n; i++) {      final double glagValue=glag.getEntry(i);      if (work1.getEntry(i) == bigstp) {        work1.setEntry(i,-step * glagValue);        final double min=FastMath.min(upperDifference.getEntry(i),trustRegionCenterOffset.getEntry(i) + work1.getEntry(i));        alternativeNewPoint.setEntry(i,FastMath.max(lowerDifference.getEntry(i),min));      } else       if (work1.getEntry(i) == ZERO) {        alternativeNewPoint.setEntry(i,trustRegionCenterOffset.getEntry(i));      } else       if (glagValue > ZERO) {        alternativeNewPoint.setEntry(i,lowerDifference.getEntry(i));      } else {        alternativeNewPoint.setEntry(i,upperDifference.getEntry(i));      }      gw+=glagValue * work1.getEntry(i);    }    double curv=ZERO;    for (int k=0; k < npt; k++) {      double tmp=ZERO;      for (int j=0; j < n; j++) {        tmp+=interpolationPoints.getEntry(k,j) * work1.getEntry(j);      }      curv+=hcol.getEntry(k) * tmp * tmp;    }    if (iflag == 1) {      curv=-curv;    }    if (curv > -gw && curv < -gw * (ONE + FastMath.sqrt(TWO))) {      final double scale=-gw / curv;      for (int i=0; i < n; i++) {        final double tmp=trustRegionCenterOffset.getEntry(i) + scale * work1.getEntry(i);        alternativeNewPoint.setEntry(i,FastMath.max(lowerDifference.getEntry(i),FastMath.min(upperDifference.getEntry(i),tmp)));      }      final double d1=HALF * gw * scale;      cauchy=d1 * d1;    } else {      final double d1=gw + HALF * curv;      cauchy=d1 * d1;    }    if (iflag == 0) {      for (int i=0; i < n; i++) {        glag.setEntry(i,-glag.getEntry(i));        work2.setEntry(i,alternativeNewPoint.getEntry(i));      }      csave=cauchy;      iflag=1;    } else {      break;    }  }  if (csave > cauchy) {    for (int i=0; i < n; i++) {      alternativeNewPoint.setEntry(i,work2.getEntry(i));    }    cauchy=csave;  }  return new double[]{alpha,cauchy};}  }
class C{  public DUC2006TopicFileSet(String sTopicSGMLFile,String sCorpusRootDir){  super(sCorpusRootDir,1.0);  TopicFile=sTopicSGMLFile;  TopicFileText=utils.loadFileToStringWithNewlines(sTopicSGMLFile);}  }
class C{  public Fraction subtract(final int i){  return new Fraction(numerator - i * denominator,denominator);}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "\"BOOK\" ("+ "\"_id\" INTEGER PRIMARY KEY ,"+ "\"BOOK_NAME\" TEXT,"+ "\"BOOK_ISBN\" TEXT,"+ "\"BOOK_ID\" TEXT,"+ "\"REQUEST_ID\" TEXT,"+ "\"DOWNLOAD_STATUS\" TEXT);");}  }
class C{  public OutputQueue(){  this(DEFAULT_SIZE);}  }
class C{  public ColumnEntry(int col,Column column,ColumnMetadata metadata){  this.colnum=col;  this.column=column;  this.metadata=metadata;  this.index=null;}  }
class C{  public static final void reverseWinding(Vector2... points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.nullPointArray"));  int size=points.length;  if (size == 1 || size == 0)   return;  int i=0;  int j=size - 1;  Vector2 temp=null;  while (j > i) {    temp=points[j];    points[j]=points[i];    points[i]=temp;    j--;    i++;  }}  }
class C{  public static boolean parseFixedstring(final String source,final String expected,final ParsePosition pos){  final int startIndex=pos.getIndex();  final int endIndex=startIndex + expected.length();  if ((startIndex >= source.length()) || (endIndex > source.length()) || (source.substring(startIndex,endIndex).compareTo(expected) != 0)) {    pos.setIndex(startIndex);    pos.setErrorIndex(startIndex);    return false;  }  pos.setIndex(endIndex);  return true;}  }
class C{  public boolean isReifiable(){  ASTNode$State state=state();  try {    return true;  }  finally {  }}  }
class C{  private static void checkDelayedInit(Class<?> clazz){  if (DelayedInit.class.isAssignableFrom(clazz)) {    Optional<StackTraceElement> onStack=ImmutableList.copyOf(Thread.currentThread().getStackTrace()).stream().filter(null).findFirst();    if (!onStack.isPresent()) {      throw new FlagException("A DelayedInit (e.g. App) object defines a Flag but is not initialized. Consider " + "moving to a non DelayedInit object. Class: " + clazz.getCanonicalName());    }  }}  }
class C{  public LinkedHashSet<JobRowFilter> buildJobStoreFilter(@NotNull String filterQuery){  return Arrays.stream(filterQuery.split(COMMA_AFTER_BRACKET_PATTERN)).map(null).collect(Collectors.toCollection(null));}  }
class C{  public static S2Point planarCentroid(S2Point a,S2Point b,S2Point c){  return new S2Point((a.x + b.x + c.x) / 3.0,(a.y + b.y + c.y) / 3.0,(a.z + b.z + c.z) / 3.0);}  }
class C{  public int timePassed(){  return (int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public static char[] toCharArray(InputStream is,Charset encoding) throws IOException {  CharArrayWriter output=new CharArrayWriter();  copy(is,output,encoding);  return output.toCharArray();}  }
class C{  public void SLDLoaded(LegendOptionData data){  if (data != null) {    updateLegendOptionData(data);    if (legendOptionPanel != null) {      legendOptionPanel.updateData(data);    }  }}  }
class C{  @Override public String toString(){  return "IV: " + HexTool.toString(this.iv);}  }
class C{  public void attach(AppCompatActivity activity){  if (activity.getDelegate() instanceof LayoutInflaterFactory) {    LayoutInflaterFactory originInflaterFactory=(LayoutInflaterFactory)activity.getDelegate();    LayoutInflaterFactory proxyInflaterFactory=(LayoutInflaterFactory)Proxy.newProxyInstance(originInflaterFactory.getClass().getClassLoader(),new Class[]{LayoutInflaterFactory.class},new InflaterHandler(originInflaterFactory,activity));    LayoutInflater layoutInflater=LayoutInflater.from(activity);    LayoutInflaterCompat.setFactory(layoutInflater,proxyInflaterFactory);  }}  }
class C{  public void loadUrl(String url){  loadUrl(url,null);}  }
class C{  public void onEmojiconDeleteEvent(){  if (!TextUtils.isEmpty(editText.getText())) {    KeyEvent event=new KeyEvent(0,0,0,KeyEvent.KEYCODE_DEL,0,0,0,0,KeyEvent.KEYCODE_ENDCALL);    editText.dispatchKeyEvent(event);  }}  }
class C{  public static void show(Context context,int resId,int duration){  show(context,resId,duration,DEFAULT_GRAVITY);}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public static String[] readStrings(String filename){  return new In(filename).readAllStrings();}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  public GroupsGetMembersQueryWithFilter count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Override public boolean canSetParameter(String name,Object state){  if (state == null) {    return true;  }  if (state instanceof Boolean) {    boolean value=((Boolean)state).booleanValue();    if (name.equalsIgnoreCase(Constants.DOM_NAMESPACES) || name.equalsIgnoreCase(Constants.DOM_SPLIT_CDATA) || name.equalsIgnoreCase(Constants.DOM_DISCARD_DEFAULT_CONTENT)|| name.equalsIgnoreCase(Constants.DOM_XMLDECL)|| name.equalsIgnoreCase(Constants.DOM_WELLFORMED)|| name.equalsIgnoreCase(Constants.DOM_INFOSET)|| name.equalsIgnoreCase(Constants.DOM_ENTITIES)|| name.equalsIgnoreCase(Constants.DOM_CDATA_SECTIONS)|| name.equalsIgnoreCase(Constants.DOM_COMMENTS)|| name.equalsIgnoreCase(Constants.DOM_FORMAT_PRETTY_PRINT)|| name.equalsIgnoreCase(Constants.DOM_NAMESPACE_DECLARATIONS)) {      return true;    } else     if (name.equalsIgnoreCase(Constants.DOM_CANONICAL_FORM) || name.equalsIgnoreCase(Constants.DOM_VALIDATE_IF_SCHEMA) || name.equalsIgnoreCase(Constants.DOM_VALIDATE)|| name.equalsIgnoreCase(Constants.DOM_CHECK_CHAR_NORMALIZATION)|| name.equalsIgnoreCase(Constants.DOM_DATATYPE_NORMALIZATION)|| name.equalsIgnoreCase(Constants.DOM_NORMALIZE_CHARACTERS)) {      return !value;    } else     if (name.equalsIgnoreCase(Constants.DOM_ELEMENT_CONTENT_WHITESPACE) || name.equalsIgnoreCase(Constants.DOM_IGNORE_UNKNOWN_CHARACTER_DENORMALIZATIONS)) {      return value;    }  } else   if (name.equalsIgnoreCase(Constants.DOM_ERROR_HANDLER) && state == null || state instanceof DOMErrorHandler) {    return true;  }  return false;}  }
class C{  public static void checkArgument(boolean expression,String errorMessageTemplate,Object... errorMessageArgs){  if (!expression) {    throw new IllegalArgumentException(String.format(errorMessageTemplate,errorMessageArgs));  }}  }
class C{  public static CustomConfiguration createConfiguration(String key,String main,Map<String,StrLookup> propertyProviders,Map<String,ConfigurationProvider> configurationProviders) throws ConfigurationException {  CustomConfigurationBuilder confBuilder=new CustomConfigurationBuilder();  confBuilder.setAutoSave(false);  for (  Map.Entry<String,ConfigurationProvider> provider : configurationProviders.entrySet()) {    confBuilder.addConfigurationProvider(provider.getKey(),provider.getValue());  }  for (  Map.Entry<String,StrLookup> provider : propertyProviders.entrySet()) {    confBuilder.getInterpolator().registerLookup(provider.getKey(),provider.getValue());  }  main=String.valueOf(PropertyConverter.interpolate(main,confBuilder));  confBuilder.load(main);  CustomConfiguration conf=new CustomConfiguration(confBuilder.getConfiguration(false));  for (  FileConfiguration f : conf.getLoadedFileConfigurations()) {    Logger.debug(ConfigurationService.class,"Loaded configuration file: " + f.getFile() + " for: "+ key);  }  Logger.debug(ConfigurationService.class,"Loaded " + key + "configuration: "+ conf.toStringTree());  return conf;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ConvertHeal_ME_TO_SELF(String skillname){  return new SM_SYSTEM_MESSAGE(1200343,skillname);}  }
class C{  public String localName(){  return theLocalName;}  }
class C{  public static void expandHorizontally(ArrayList<ConstraintWidget> widgetList,int margin){  WidgetContainer base=(WidgetContainer)widgetList.get(0).getParent();  ConstraintWidget[] pears=new ConstraintWidget[base.getChildren().size()];  pears=base.getChildren().toArray(pears);  Rectangle selectBounds=getBoundingBox(widgetList);  Rectangle clip=new Rectangle();  int gapWest=gap(Direction.WEST,selectBounds,pears);  int gapEast=gap(Direction.EAST,selectBounds,pears);  clip.x=selectBounds.x - gapWest;  clip.width=selectBounds.width + gapEast + gapWest;  ArrayList<ConstraintWidget> selectedList;  selectedList=new ArrayList<ConstraintWidget>(widgetList);  while (!selectedList.isEmpty()) {    ConstraintWidget widget=selectedList.remove(0);    ArrayList<ConstraintWidget> row=new ArrayList<>();    row.add(widget);    for (Iterator<ConstraintWidget> iterator=selectedList.iterator(); iterator.hasNext(); ) {      ConstraintWidget elem=iterator.next();      if (isSameRow(widget,elem)) {        if (!row.contains(elem)) {          row.add(elem);        }        iterator.remove();      }    }    ConstraintWidget[] rowArray=new ConstraintWidget[row.size()];    rowArray=row.toArray(rowArray);    Arrays.sort(rowArray,sSortX);    int gaps=(rowArray.length - 1) * margin;    int totalWidth=(clip.width - gaps - 2 * margin);    for (int i=0; i < rowArray.length; i++) {      int x=margin * i + (i * (totalWidth)) / rowArray.length;      ConstraintWidget constraintWidget=rowArray[i];      constraintWidget.setX(x + clip.x + margin);      int xend=margin * i + (totalWidth * (i + 1)) / rowArray.length;      constraintWidget.setHorizontalDimensionBehaviour(ConstraintWidget.DimensionBehaviour.FIXED);      constraintWidget.setWidth(xend - x);    }  }}  }
class C{  private void blackmanHarris3s(int size){  int start=(windowFunction.length - size) / 2;  int stop=(windowFunction.length + size) / 2;  double scale=1.0 / (double)size / 0.45;  for (int i=0; start < stop; start++, i++)   windowFunction[i]=scale * (0.44959 - 0.49364 * Math.cos(twoPI * i / size) + 0.05677 * Math.cos(2 * twoPI * i / size));}  }
class C{  public double evaluateAttribute(int attribute) throws Exception {  return m_InfoGains[attribute];}  }
class C{  public double distance(Vector2 point){  double dx=this.x - point.x;  double dy=this.y - point.y;  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  private Bitmap scaleBitmapForIcon(Bitmap bitmap){  Resources res=mContext.getResources();  float maxWidth=res.getDimension(R.dimen.remote_notification_logo_max_width);  float maxHeight=res.getDimension(R.dimen.remote_notification_logo_max_height);  return scaleBitmap(bitmap,(int)maxWidth,(int)maxHeight);}  }
class C{  public HoverActionControl(String action){  m_action=action;}  }
class C{  public ComparisonPredicate(int operation,Expression left,Expression right,Comparator cmp){  super(operation,LT,GTEQ,left,right);  this.m_cmp=cmp;}  }
class C{  static public String encode(final byte[] bytes){  int i=0, index=0, digit=0;  int currByte, nextByte;  StringBuffer base32=new StringBuffer((bytes.length + 7) * 8 / 5);  while (i < bytes.length) {    currByte=(bytes[i] >= 0) ? bytes[i] : (bytes[i] + 256);    if (index > 3) {      if ((i + 1) < bytes.length) {        nextByte=(bytes[i + 1] >= 0) ? bytes[i + 1] : (bytes[i + 1] + 256);      } else {        nextByte=0;      }      digit=currByte & (0xFF >> index);      index=(index + 5) % 8;      digit<<=index;      digit|=nextByte >> (8 - index);      i++;    } else {      digit=(currByte >> (8 - (index + 5))) & 0x1F;      index=(index + 5) % 8;      if (index == 0)       i++;    }    base32.append(base32Chars.charAt(digit));  }  return base32.toString();}  }
class C{  public List<SLDDataInterface> showDialog(JFrame parent){  List<SLDDataInterface> newSLDList=null;  selected=null;  if (parent != null) {    this.setLocationRelativeTo(parent);    int x=((parent.getWidth() - getWidth()) / 2);    int y=((parent.getHeight() - getHeight()) / 2);    this.setLocation(x,y);  }  setVisible(true);  if (selected != null) {    newSLDList=new ArrayList<SLDDataInterface>();    StyledLayerDescriptor sld=selected.create();    if (sldWriter == null) {      sldWriter=SLDWriterFactory.createWriter(null);    }    newSLDList.add(new SLDData(new StyleWrapper(selected.getName()),sldWriter.encodeSLD(null,sld)));    return newSLDList;  }  return null;}  }
class C{  public static ReadBlockRMA2 read(RMA2Formatter rma2Formatter,long uid,boolean wantReadText,boolean wantMatchData,boolean wantMatchText,float minScore,float maxExpected,TextStorageReader textReader,IInputReader dataIndexReader) throws IOException {  ReadBlockRMA2 readBlock=rma2Formatter.isWantLocationData() ? new ReadBlockFromBlast() : new ReadBlockRMA2();  if (uid == -1)   uid=dataIndexReader.getPosition(); else   dataIndexReader.seek(uid);  readBlock.setUId(uid);  ReadBlockRMA2Formatter readBlockFormatter=rma2Formatter.getReadBlockRMA2Formatter();  readBlockFormatter.read(dataIndexReader);  readBlock.setReadWeight(readBlockFormatter.hasReadWeight() ? readBlockFormatter.getReadWeight() : 1);  readBlock.setMateUId(readBlockFormatter.getMateUId());  readBlock.setMateType(readBlockFormatter.getMateType());  readBlock.setReadLength(readBlockFormatter.getReadLength());  readBlock.setComplexity(readBlockFormatter.getComplexity());  readBlock.setNumberOfMatches(readBlockFormatter.getNumberOfMatches());  Location location=new Location(dataIndexReader.readChar(),dataIndexReader.readLong(),dataIndexReader.readInt());  if (wantReadText) {    Pair<String,String> headerSequence=textReader.getHeaderAndSequence(location);    if (rma2Formatter.isWantLocationData()) {      ((ReadBlockFromBlast)readBlock).setTextLocation(location);    }    readBlock.setReadHeader(headerSequence.getFirst());    readBlock.setReadSequence(headerSequence.getSecond());  }  if (wantMatchData || wantMatchText) {    List<IMatchBlock> matchBlocks=new LinkedList<>();    int skippedMatches=0;    for (int i=0; i < readBlock.getNumberOfMatches(); i++) {      MatchBlockRMA2 matchBlock=MatchBlockRMA2.read(rma2Formatter,-1,wantMatchData,wantMatchText,minScore,maxExpected,textReader,dataIndexReader);      if (matchBlock == null) {        skippedMatches=(readBlock.getNumberOfMatches() - (i + 1));        break;      }      matchBlocks.add(matchBlock);    }    readBlock.setMatchBlocks(matchBlocks.toArray(new IMatchBlock[matchBlocks.size()]));    if (skippedMatches > 0) {      dataIndexReader.skipBytes(skippedMatches * MatchBlockRMA2.getBytesInIndexFile(rma2Formatter.getMatchBlockRMA2Formatter()));    }  } else   dataIndexReader.skipBytes(readBlock.getNumberOfMatches() * MatchBlockRMA2.getBytesInIndexFile(rma2Formatter.getMatchBlockRMA2Formatter()));  return readBlock;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) private void handleDocumentActivityIntent(){  if (getIntent() == null || mIntentHandler.shouldIgnoreIntent(this,getIntent())) {    Log.e(TAG,"Ignoring intent: " + getIntent());    mIsFinishDelayed=false;    return;  }  maybePrefetchDnsInBackground();  StartupMetrics.getInstance().updateIntent(getIntent());  boolean hasUserGesture=IntentWithGesturesHandler.getInstance().getUserGestureAndClear(getIntent());  TabIdManager.getInstance().incrementIdCounterTo(getTaskId() + 1);  String url=IntentHandler.getUrlFromIntent(getIntent());  if ((url == null && TextUtils.equals(getIntent().getAction(),Intent.ACTION_VIEW)) || TextUtils.equals(getIntent().getAction(),Intent.ACTION_MAIN)) {    handleMainDocumentIntent();    return;  }  if (clobberCurrentDocument(url,hasUserGesture))   return;  boolean incognito=IntentUtils.safeGetBooleanExtra(getIntent(),IntentHandler.EXTRA_OPEN_NEW_INCOGNITO_TAB,false);  boolean append=IntentUtils.safeGetBooleanExtra(getIntent(),IntentHandler.EXTRA_APPEND_TASK,false);  boolean reuse=IntentUtils.safeGetBooleanExtra(getIntent(),ShortcutHelper.REUSE_URL_MATCHING_TAB_ELSE_NEW_TAB,false);  boolean affiliated=IntentUtils.safeGetBooleanExtra(getIntent(),IntentHandler.EXTRA_OPEN_IN_BG,false);  if (reuse && !append) {    int shortcutSource=getIntent().getIntExtra(ShortcutHelper.EXTRA_SOURCE,ShortcutSource.UNKNOWN);    LaunchMetrics.recordHomeScreenLaunchIntoTab(url,shortcutSource);    if (relaunchTask(incognito,url) != Tab.INVALID_TAB_ID)     return;  }  Intent newIntent=createLaunchIntent(getApplicationContext(),getIntent(),url,incognito,Tab.INVALID_TAB_ID);  setRecentsFlagsOnIntent(newIntent,append ? 0 : Intent.FLAG_ACTIVITY_NEW_DOCUMENT,incognito);  AsyncTabCreationParams asyncParams=new AsyncTabCreationParams(new LoadUrlParams(url));  fireDocumentIntent(this,newIntent,incognito,affiliated,asyncParams);}  }
class C{  @Override public void applyInline(double[] data,int off,int len){  if (off < 0 || len <= 0 || off + len > data.length)   throw new IllegalArgumentException("off or len out of bounds");  for (int n=0; n < len; n++) {    int offn=off + n;    for (int i=1; i <= p; i++) {      if (n < i)       data[offn]+=a[i - 1] * memory[p + n - i]; else       data[offn]+=a[i - 1] * data[offn - i];    }  }  if (len < p) {    System.arraycopy(memory,len,memory,0,p - len);    System.arraycopy(data,off,memory,p - len,len);  } else {    System.arraycopy(data,off + len - p,memory,0,p);  }}  }
class C{  protected BoardGetCommentsQueryWithExtended extended(Boolean value){  return unsafeParam("extended",value);}  }
class C{  private final static byte lobyte(int val){  return (byte)(val & 0x000000FF);}  }
class C{  public boolean isApplicable(){  ChartViewer chartViewer=(ChartViewer)getViewer();  return chartViewer.getChartDrawer() != null && chartViewer.getChartDrawer().canShowXAxis();}  }
class C{  private TaskDefinition extractTaskDefinitionFromJobDefinition(JobDefinition jobDefinition,String taskDefinitionId){  TaskDefinition result=jobDefinition.getTaskDefinitions().stream().filter(null).findFirst().orElse(null);  return result;}  }
class C{  protected void onMouseClick(){  if (onMouseClick != null) {    onMouseClick.run();  }}  }
class C{  private void load(String fileName) throws IOException, MaryConfigurationException {  DataInputStream dis=null;  try {    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  } catch (  FileNotFoundException e) {    Log.d(Mary.LOG,"File [" + fileName + "] was not found.");    throw new MaryConfigurationException("File [" + fileName + "] was not found.");  }  hdr=new MaryHeader(dis);  if (hdr.getType() != MaryHeader.LISTENERFEATS) {    Log.d(Mary.LOG,"File [" + fileName + "] is not a valid Mary Units file.");    throw new MaryConfigurationException("File [" + fileName + "] is not a valid Mary Units file.");  }  numberOfUnits=dis.readInt();  if (numberOfUnits < 0) {    Log.d(Mary.LOG,"File [" + fileName + "] has a negative number of units. Aborting.");    throw new MaryConfigurationException("File [" + fileName + "] has a negative number of units. Aborting.");  }  hnmSignals=new HntmSpeechSignal[numberOfUnits];  for (int i=0; i < numberOfUnits; i++) {    hnmSignals[i]=new HntmSpeechSignal(0,0,0);    hnmSignals[i].read(dis,HntmAnalyzerParams.WAVEFORM);  }  System.out.println();}  }
class C{  public void searchMagInCartTree(HTSModel m,FeatureVector fv,FeatureDefinition featureDef){  for (int s=0; s < numStates; s++) {    PdfLeafNode node=(PdfLeafNode)magTree[s].interpretToNode(fv,1);    m.setMagMean(s,node.getMean());    m.setMagVariance(s,node.getVariance());  }}  }
class C{  public ArrayRealVector(int size,double preset){  data=new double[size];  Arrays.fill(data,preset);}  }
class C{  public static Explosion onExplosion(World world,Entity entity,double x,double y,double z,float explosionSize,boolean isFlaming,boolean isSmoking){  ExplosionEvent event=new ExplosionEvent(world,entity,x,y,z,explosionSize,isFlaming,isSmoking);  return OpenModLoader.getEventBus().post(event) ? new Explosion(event.world,event.entity,event.x,event.y,event.z,event.explosionSize,event.isFlaming,event.isSmoking) : null;}  }
class C{  public OrderByScanResult(){}  }
class C{  private static void checkState(boolean expression){  if (!expression) {    throw new IllegalStateException();  }}  }
class C{  private String formatDate(Date date){  return DateFormat.getDateInstance(DateFormat.SHORT).format(date);}  }
class C{  public boolean canAccessProgram(Program program){  for (  UserAuthorityGroup group : userAuthorityGroups) {    if (group.getPrograms().contains(program)) {      return true;    }  }  return false;}  }
class C{  public synchronized void denyAll(){  for (  RequestResponseHandler handler : map.values()) {    handler.handle(player,0);  }  map.clear();}  }
class C{  public void releaseAll(){  for (  OneWayBinding<?> oneWayBinding : myOneWayBindings) {    oneWayBinding.dispose();  }  myOneWayBindings.clear();  for (  TwoWayBinding<?> twoWayBinding : myTwoWayBindings) {    twoWayBinding.dispose();  }  myTwoWayBindings.clear();}  }
class C{  public void reset(){  mCurrentMatrix.reset();  mCurrentScale=1.0f;  invalidate();}  }
class C{  public static void main(String[] args){  byte[] json="{\"name\":\"Elvis\"}".getBytes(StandardCharsets.UTF_8);  JsonParser parser=new JsonParser(StandardCharsets.UTF_8);  int pos=0;  int event;  do {    while ((event=parser.nextEvent()) == JsonEvent.NEED_MORE_INPUT) {      pos+=parser.getFeeder().feed(json,pos,json.length - pos);      if (pos == json.length) {        parser.getFeeder().done();      }    }    System.out.println("JSON event: " + event);    if (event == JsonEvent.ERROR) {      throw new IllegalStateException("Syntax error in JSON text");    }    if (event == JsonEvent.VALUE_STRING) {      System.out.println("VALUE: " + parser.getCurrentString());    }  } while (event != JsonEvent.EOF);}  }
class C{  public static void createAccessorMethod(SootMethod container,Stmt stmt){  Body containerBody=container.getActiveBody();  soot.util.Chain containerStmts=containerBody.getUnits();  if (!containerStmts.contains(stmt))   throw new RuntimeException();  if (stmt.containsInvokeExpr()) {    createInvokeAccessor(container,stmt);  } else   if (stmt instanceof AssignStmt) {    AssignStmt as=(AssignStmt)stmt;    FieldRef ref;    if (as.getLeftOp() instanceof FieldRef) {      ref=(FieldRef)as.getLeftOp();      createSetAccessor(container,as,ref);    } else     if (as.getRightOp() instanceof FieldRef) {      ref=(FieldRef)as.getRightOp();      createGetAccessor(container,as,ref);    } else {      throw new RuntimeException("Expected class member access");    }  } else   throw new RuntimeException("Expected class member access");}  }
class C{  @Override public void reset(XMLComponentManager componentManager) throws XNIException {  try {    fContinueAfterFatalError=componentManager.getFeature(CONTINUE_AFTER_FATAL_ERROR);  } catch (  XNIException e) {    fContinueAfterFatalError=false;  }  fErrorHandler=(XMLErrorHandler)componentManager.getProperty(ERROR_HANDLER);}  }
class C{  private void writeSortIndexFile(List<String> data,String columnId) throws IOException {  ColumnIdentifier columnIdentifier=new ColumnIdentifier(columnId,null,null);  Map<String,Integer> dataToSurrogateKeyMap=new HashMap<>(data.size());  int surrogateKey=0;  List<Integer> invertedIndexList=new ArrayList<>(data.size());  for (int i=0; i < data.size(); i++) {    dataToSurrogateKeyMap.put(data.get(i),++surrogateKey);  }  List<String> sortedKeyList=new ArrayList<>(dataToSurrogateKeyMap.keySet());  Collections.sort(sortedKeyList);  List<Integer> sortedIndexList=new ArrayList<>(data.size());  int[] invertedIndexArray=new int[sortedKeyList.size()];  for (int i=0; i < sortedKeyList.size(); i++) {    Integer key=dataToSurrogateKeyMap.get(sortedKeyList.get(i));    sortedIndexList.add(key);    invertedIndexArray[--key]=i + 1;  }  for (int i=0; i < invertedIndexArray.length; i++) {    invertedIndexList.add(invertedIndexArray[i]);  }  CarbonDictionarySortIndexWriter dictionarySortIndexWriter=new CarbonDictionarySortIndexWriterImpl(carbonTableIdentifier,columnIdentifier,carbonStorePath);  try {    dictionarySortIndexWriter.writeSortIndex(sortedIndexList);    dictionarySortIndexWriter.writeInvertedSortIndex(invertedIndexList);  }  finally {    dictionarySortIndexWriter.close();  }}  }
class C{  private Color createColor(Display display,String preference){  RGB rgb=PreferenceConverter.getColor(SVNUIPlugin.getPlugin().getPreferenceStore(),preference);  return new Color(display,rgb);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof Vector)) {    return false;  }  Vector other=(Vector)obj;  return Math.abs(x - other.x) < epsilon && Math.abs(y - other.y) < epsilon && Math.abs(z - other.z) < epsilon && (this.getClass().equals(obj.getClass()));}  }
class C{  public static void createAllTables(Database db,boolean ifNotExists){  NewsDao.createTable(db,ifNotExists);  ThemeListDao.createTable(db,ifNotExists);}  }
class C{  private void callMain() throws ForkProcessException {  try {    Object objectParameters[]={getProcessArgs().getMainArgs()};    Class<?> classParameters[]={objectParameters[0].getClass()};    Class<?> c=Class.forName(_procArg.getMainClass());    Method m=c.getDeclaredMethod("main",classParameters);    m.invoke(null,objectParameters);  } catch (  InvocationTargetException invte) {    throw newForkProcessException(invte.getTargetException());  }catch (  Throwable t) {    throw newForkProcessException(t);  }}  }
class C{  public static boolean isDay(String s){  if (isEmpty(s))   return defaultEmptyOK;  return isIntegerInRange(s,1,31);}  }
class C{  public static boolean shouldShowRequestPermissionRationale(Activity activity,String... permissions){  for (  String permission : permissions) {    if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {      return true;    }  }  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_OUT_OF_SKILL_POINT(String value0){  return new SM_SYSTEM_MESSAGE(1330044,value0);}  }
class C{  private String codeText(Caption newC){  String toReturn="";  String[] lines=newC.getContent().split("<br />");  int i=0;  int tab;  if (lines[i].length() > 32) {    lines[i]=lines[i].substring(0,32);  }  tab=(32 - lines[i].length()) / 2;  toReturn+="1340 1340 ";  if (tab % 4 != 0) {  }  toReturn+=codeChar(lines[i].toCharArray());  if (lines.length > 1) {    i++;    if (lines[i].length() > 32) {      lines[i]=lines[i].substring(0,32);    }    tab=(32 - lines[i].length()) / 2;    toReturn+="13e0 13e0 ";    if (tab % 4 != 0) {    }    toReturn+=codeChar(lines[i].toCharArray());    if (lines.length > 2) {      i++;      if (lines[i].length() > 32) {        lines[i]=lines[i].substring(0,32);      }      tab=(32 - lines[i].length()) / 2;      toReturn+="9440 9440 ";      if (tab % 4 != 0) {      }      toReturn+=codeChar(lines[i].toCharArray());      if (lines.length > 3) {        i++;        if (lines[i].length() > 32) {          lines[i]=lines[i].substring(0,32);        }        tab=(32 - lines[i].length()) / 2;        toReturn+="94e0 94e0 ";        if (tab % 4 != 0) {        }        toReturn+=codeChar(lines[i].toCharArray());      }    }  }  return toReturn;}  }
class C{  private void postHandleGrid(DataQueryParams params,Grid grid){  if (params.hasProcessingHint(ProcessingHint.SINGLE_INDICATOR_REPORTING_RATE_FILTER_ITEM)) {    grid.removeColumn(DataQueryParams.DX_INDEX);  }}  }
class C{  public Builder withRationaleEnabled(boolean enabled){  buildObj.rationaleEnabled=enabled;  return this;}  }
class C{  protected void removeTrackedServices(){  for (  ServiceTracker<ExtHttpService,ExtHttpService> tracker : trackers) {    tracker.close();  }}  }
class C{  private void unifyViaAtom(Atomic parentAtom){  Atomic childAtom=getRuleConclusionAtom();  Query parent=parentAtom.getParentQuery();  Map<String,String> unifiers=childAtom.getUnifiers(parentAtom);  head.unify(unifiers);  body.unify(unifiers);  Set<String> childFVs=body.getVarSet();  Set<String> parentBVs=parentAtom.getVarNames();  Set<String> parentVars=parent.getVarSet();  parentBVs.forEach(null);  childFVs.forEach(null);}  }
class C{  protected AbstractLeaseMap(Lease lease,long duration){  this(new java.util.HashMap(13),lease,duration);}  }
class C{  @Override public void write(double value){  double[] buffer=new double[1];  buffer[0]=value;  write(buffer,0,1);}  }
class C{  protected AdsUpdateTargetGroupQuery name(String value){  return unsafeParam("name",value);}  }
class C{  public void addCommand(String s){synchronized (this) {    this.commandQueue.add(new CommandAndIPAddress(s,""));  }}  }
class C{  public boolean contains(String key){  return preferences.contains(key);}  }
class C{  public static boolean isPojo(Object object){  if (object == null)   return false;  if (object instanceof Object[]) {    if (object instanceof Entry[])     return false;    if (Array.getLength(object) == 0)     return false;    Object value=Array.get(object,0);    if (value == null || value instanceof Entry)     return false;  } else   if (object instanceof Entry)   return false;  return true;}  }
class C{  public static boolean useDarkTheme(){  return sDarkTheme;}  }
class C{  public static final void addAlliance(League league,PlayerAlliance alliance){  Preconditions.checkNotNull(league,"League should not be null");  league.onEvent(new LeagueEnteredEvent(league,alliance));}  }
class C{  public void leftTrim(int numberOfSample){  trim(numberOfSample,0);}  }
class C{  public CustomConfiguration tryGetPluginConfiguration(String hostName,String pluginName,HttpServletRequest request){  try {    return ConfigurationService.getPluginConfiguration(pluginName,hostName,request.getRemoteAddr(),request.getSession().getId());  } catch (  ConfigurationException e) {    Logger.debug(getClass(),"Failed to retrieve plugin configuration: " + hostName + ":"+ pluginName);    return null;  }}  }
class C{  private boolean verifyChecksum(byte[] data,int offset,int length){  if ((length & 3) != 0 || (length <= 4)) {    return false;  }  long chksum=0;  int count=length - 4;  long check;  int i;  for (i=offset; i < count; i+=4) {    check=data[i] & 0xff;    check|=data[i + 1] << 8 & 0xff00;    check|=data[i + 2] << 0x10 & 0xff0000;    check|=data[i + 3] << 0x18 & 0xff000000;    chksum^=check;  }  check=data[i] & 0xff;  check|=data[i + 1] << 8 & 0xff00;  check|=data[i + 2] << 0x10 & 0xff0000;  check|=data[i + 3] << 0x18 & 0xff000000;  check=data[i] & 0xff;  check|=data[i + 1] << 8 & 0xff00;  check|=data[i + 2] << 0x10 & 0xff0000;  check|=data[i + 3] << 0x18 & 0xff000000;  return 0 == chksum;}  }
class C{  public void execute(DelegateExecution execution){  boolean exists=FileExistsMock.getInstance().fileExists();  execution.setVariable("fileexists",exists);}  }
class C{  private Entry readEntry(XmlPullParser parser) throws XmlPullParserException, IOException, ParseException {  parser.require(XmlPullParser.START_TAG,ns,"entry");  String id=null;  String title=null;  String link=null;  long publishedOn=0;  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String name=parser.getName();switch (name) {case "id":      id=readTag(parser,TAG_ID);    break;case "title":  title=readTag(parser,TAG_TITLE);break;case "link":String tempLink=readTag(parser,TAG_LINK);if (tempLink != null) {link=tempLink;}break;case "published":Time t=new Time();t.parse3339(readTag(parser,TAG_PUBLISHED));publishedOn=t.toMillis(false);break;default :skip(parser);break;}}return new Entry(id,title,link,publishedOn);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately("set ignoreUnassigned=" + (!isSelected()) + ";");}  }
class C{  public BracketingNthOrderBrentSolver(final double relativeAccuracy,final double absoluteAccuracy,final double functionValueAccuracy,final int maximalOrder) throws MathIllegalArgumentException {  super(relativeAccuracy,absoluteAccuracy,functionValueAccuracy);  if (maximalOrder < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,maximalOrder,2);  }  this.maximalOrder=maximalOrder;  this.allowed=AllowedSolution.ANY_SIDE;}  }
class C{  public boolean isOverride(){  if (override == null) {    return true;  } else {    return override;  }}  }
class C{  public DataFile2EntityXml(){}  }
class C{  public boolean isDecayable(){  return (getData() & 0x4) == 0;}  }
class C{  @SuppressWarnings("rawtypes") public Value cast(Value obj,Class cls){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public void print(){  System.out.println("{");  for (int i=0; i < data.length; i++) {    Matrix x=data[i];    System.out.print("{");    for (int j=0; j < dimension; j++) {      if (j < dimension - 1)       System.out.print(x.get(j,0) + ","); else       System.out.print(x.get(j,0));    }    if (i < data.length - 1)     System.out.println("},"); else     System.out.println("}");  }  System.out.println("}");}  }
class C{  public BlurDrawable(Window blurredWindow){  this(blurredWindow.getDecorView());}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  if (textField != null) {    if (undoRedoObject != null) {      String oldValue=(String)undoRedoObject.getOldValue();      textField.setText(oldValue);    }  }}  }
class C{  @Override public int readInt(String filePath){  FileChannel fileChannel=updateCache(filePath);  ByteBuffer byteBffer=read(fileChannel,CarbonCommonConstants.INT_SIZE_IN_BYTE);  return byteBffer.getInt();}  }
class C{  public BaseAdapterHelper linkify(int viewId){  TextView view=retrieveView(viewId);  Linkify.addLinks(view,Linkify.ALL);  return this;}  }
class C{  public MapContext<K,V> standAloneStack(){  MapContext<K,V> standAlone=MapContext.createMapContext(this);  return standAlone;}  }
class C{  @Override public String toString(){  return String.format("Storage [getFrontendIOPS()=%s, getBackendIOPS()=%s, getReplicaBackEndIOPS()=%s, getCloneFrontendIOPS()=%s, getCloneBackendIOPS()=%s, getPersistentFrondendIOPS()=%s, getPersistentBackendIOPS()=%s, getClonedatastorecount()=%s, getClonedatastoresize()=%s, getClonedatastorefrontendIOPS()=%s, getClonedatastorebackendIOPS()=%s, getPersistentusablecapacity()=%s, getOverhead()=%s, getBlockdeduplicationratio()=%s, getDatastorevmcount()=%s, getCachereadratio()=%s, getCachewriteratio()=%s, getLocalswapsizetotal()=%s, getUsablecapacity()=%s, getSuspendusablecapacity()=%s, getSwappowerstatecapacityreduction()=%s, getParentusablecapacity()=%s, getReplicausablecapacity()=%s]",getFrontendIOPS(),getBackendIOPS(),getReplicaBackEndIOPS(),getCloneFrontendIOPS(),getCloneBackendIOPS(),getPersistentFrondendIOPS(),getPersistentBackendIOPS(),getClonedatastorecount(),getClonedatastoresize(),getClonedatastorefrontendIOPS(),getClonedatastorebackendIOPS(),getPersistentusablecapacity(),getOverhead(),getBlockdeduplicationratio(),getDatastorevmcount(),getCachereadratio(),getCachewriteratio(),getLocalswapsizetotal(),getUsablecapacity(),getSuspendusablecapacity(),getSwappowerstatecapacityreduction(),getParentusablecapacity(),getReplicausablecapacity());}  }
class C{  @Override public void renderSymbol(){  dataEditedFlag=true;  notifySLDEditorFileHasUpdated();}  }
class C{  private double guessX(final double targetY,final double[] x,final double[] y,final int start,final int end){  for (int i=start; i < end - 1; ++i) {    final int delta=i + 1 - start;    for (int j=end - 1; j > i; --j) {      x[j]=(x[j] - x[j - 1]) / (y[j] - y[j - delta]);    }  }  double x0=0;  for (int j=end - 1; j >= start; --j) {    x0=x[j] + x0 * (targetY - y[j]);  }  return x0;}  }
class C{  public void addNewMarker(){  if (symbolTree == null) {    return;  }  Object oldValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());  PointSymbolizer newPointSymbolizer=DefaultSymbols.createDefaultPointSymbolizer();  DefaultMutableTreeNode ruleNode=getRuleTreeNode();  SelectedSymbol.getInstance().addSymbolizerToRule(newPointSymbolizer);  DefaultMutableTreeNode newNode=sldTree.addObject(ruleNode,newPointSymbolizer,true);  if (newNode != null) {    sldTree.addObject(newNode,SLDTreeLeafFactory.getInstance().getFill(newPointSymbolizer),true);    TreePath newPath=getPath(newNode);    symbolTree.setSelectionPath(newPath);    Object newValueObj=sldWriter.encodeSLD(null,SelectedSymbol.getInstance().getSld());    UndoManager.getInstance().addUndoEvent(new UndoEvent(sldTree.getUndoObject(),getClass().getName(),oldValueObj,newValueObj));  }}  }
class C{  public SpaceTypeDescriptorBuilder replicable(boolean replicable){  this._replicable=replicable;  return this;}  }
class C{  public void reconcileService(Service service){  val serviceName=service.getMetadata().getName();  log.debug("Reconciliation request for {}",serviceName);  if (isCertificateRequest(service) && !inProgressServices.contains(serviceName)) {    new Thread(null).start();  }}  }
class C{  public DownloadInfo updateDownloadInfo(DownloadInfo downloadInfo,long newDownloadId){  long oldDownloadId=downloadInfo.getDownloadId();  OMAInfo omaInfo=mPendingOMADownloads.get(oldDownloadId);  mPendingOMADownloads.remove(oldDownloadId);  mPendingOMADownloads.put(newDownloadId,omaInfo);  return DownloadInfo.Builder.fromDownloadInfo(downloadInfo).setDownloadId((int)newDownloadId).build();}  }
class C{  protected final boolean hasListeners(){  return m_listeners != null && m_listeners.size() > 0;}  }
class C{  public static <T>ConfiguredElement<T> create(@NotNull FolderConfiguration folderConfiguration,@NotNull T value){  return new ConfiguredElement<T>(folderConfiguration,value);}  }
class C{  public SpaceIteratorAggregatorPartitionResult(){}  }
class C{  @Override public void deleteMetadata() throws IOException {  checkClosedOrInError("createOrUpdateMetadata");  createOrUpdateMetadata(null);}  }
class C{  protected void processGroupingsReport(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  maxGroups=serialMessage.getMessagePayloadByte(offset + 1);  logger.debug("NODE {}: processGroupingsReport number of groups {}",getNode().getNodeId(),maxGroups);  initialiseDone=true;  for (int groupId=1; groupId <= maxGroups; groupId++) {    if (getNode().getAssociationGroup(groupId) == null) {      ZWaveAssociationGroup group=new ZWaveAssociationGroup(groupId);      getNode().setAssociationGroup(group);    }  }}  }
class C{  @deprecated protected int handleGetExtendedYear(){  int eyear;  int eyear;  if (newerField(19,1) == 19) {    eyear=internalGet(19,1);  } else {    int era=internalGet(0,1);    int eyear;    if (era == 0) {      eyear=1 - internalGet(1,1);    } else {      eyear=internalGet(1,1);    }  }  return eyear;}  }
class C{  public synchronized List subList(int fromIndex,int toIndex){  Object[] elements=getArray();  int len=elements.length;  if (fromIndex < 0 || toIndex > len || fromIndex > toIndex)   throw new IndexOutOfBoundsException();  return new COWSubList(this,fromIndex,toIndex);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DashATK_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200651,skillcaster,num0,skillname);}  }
class C{  public double normality(String s){  DistributionWordDocument dDoc=new DistributionWordDocument(NeighbourhoodWindow,SourceNGramSize);  dDoc.setDataString(s,SourceNGramSize,true);  EdgeCachedLocator eclLocator=new EdgeCachedLocator(20);  double dRes=0.0;  int iCnt=0;  try {    Iterator iIter=dDoc.Graph.getEdgeSet().iterator();    while (iIter.hasNext()) {      Edge eCur=(Edge)iIter.next();      Distribution dCur=dDoc.Graph.getEdgeDistro(eCur);      Edge e=eclLocator.locateEdgeInGraph(Graph,eCur.getVertexA(),eCur.getVertexB());      if (e != null) {        Distribution d=(Graph.getEdgeDistro(e) == null) ? new Distribution() : Graph.getEdgeDistro(e);        if (OnCompare != null)         dRes+=OnCompare.compareDistributions(dCur,d); else         dRes+=dCur.similarityTo(d);      }      iCnt++;    }  } catch (  Exception exc) {    exc.printStackTrace();    return 0.0;  }  return dRes / (iCnt == 0 ? 1 : iCnt);}  }
class C{  public Object[] fetchConverted() throws KeyGenException {  if (null != currentConveretedRawRow) {    return currentConveretedRawRow;  }  if (hasNext()) {    Object[] rawRow=batch.getRawRow(counter);    currentConveretedRawRow=convertRow(rawRow);    ;    return currentConveretedRawRow;  } else {    return null;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_HOSTIL(String value0){  return new SM_SYSTEM_MESSAGE(1300519,value0);}  }
class C{  private static void usage(){  int consoleWidth=ConsoleUtil.getConsoleWidth();  if (consoleWidth <= 0) {    consoleWidth=80;  }  System.out.println("java -cp baksmali.jar org.cc.dexlib2.analysis.DumpFields -d path/to/framework/jar/files <dex-file>");}  }
class C{  public StatelessScrollableDataIterator(String hQuery,SessionFactory sessionFactory,int fetchSize){  super(hQuery,sessionFactory,fetchSize);}  }
class C{  public boolean isAnyAxisInverted(){  return mAxisLeft.isInverted() || mAxisRight.isInverted();}  }
class C{  @Override public int available() throws IOException {  return frameSize * source.available();}  }
class C{  protected void sample(String val){  for (int i=0; i < m_parsers.length; ++i) {    if (m_isCandidate[i]) {      m_isCandidate[i]=m_parsers[i].canParse(val);    }  }}  }
class C{  private boolean isApprovalEnabled(){  boolean setting=systemSettingManager.hideUnapprovedDataInAnalytics();  boolean levels=!dataApprovalLevelService.getAllDataApprovalLevels().isEmpty();  return setting && levels;}  }
class C{  public static void main(String[] args){  double[][] score={{0.3,0.1,0.0},{0.2,0.4,0.1},{0.1,0.4,0.2}};  ViterbiDecoder vd=new ViterbiDecoder(score);  int[] path=vd.bestPath();  System.out.println("Best path: ");  for (  int i : path)   System.out.println(i);  double[][] score2={{29,4,20,46,30},{13,95,52,33,56},{87,25,19,50,23},{92,28,28,45,54},{30,64,25,29,80}};  vd=new ViterbiDecoder(score2);  path=vd.bestPath();  System.out.println("Best path: ");  for (  int i : path)   System.out.println(i);  double[][] score3={{0.321223,0.726969,0.802805,0.747823,0.848001},{0.509316,0.330791,0.186159,0.800983,0.320709},{0.078514,0.110131,0.688176,0.080399,0.823965},{0.602709,0.017961,0.162477,0.962956,0.897437},{0.208598,0.232417,0.286169,0.865968,0.181086}};  vd=new ViterbiDecoder(score3);  path=vd.bestPath();  System.out.println("Best path: ");  for (  int i : path)   System.out.println(i);  double[][] score4={{2,0,1,0,8,0},{2,3,0,2,8,5},{2,2,0,7,1,2},{0,9,0,9,1,5}};  vd=new ViterbiDecoder(score4);  path=vd.bestPath();  System.out.println("Best path: ");  for (  int i : path)   System.out.println(i);}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public InterfaceInvokeExpr newInterfaceInvokeExpr(Local base,SootMethodRef method,Value... args){  return newInterfaceInvokeExpr(base,method,Arrays.asList(args));}  }
class C{  public static void startUp(int port) throws Exception {  Registry reg=LocateRegistry.createRegistry(port);  RemoteDriver d=new RemoteDriverImpl();  reg.rebind(RMI_REG_NAME,d);}  }
class C{  protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  public Attr(String name,@Nullable List<Format> formats){  this.name=name;  this.formats=formats;}  }
class C{  public void addUpdateListeners(final Collection<BaseListener> listeners){  for (  BaseListener listener : listeners) {    addUpdateListener(listener);  }}  }
class C{  public void unregisterAll(Plugin plugin){  ArrayList<ServiceUnregisterEvent> unregisteredEvents=new ArrayList<ServiceUnregisterEvent>();synchronized (providers) {    Iterator<Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>>> it=providers.entrySet().iterator();    try {      while (it.hasNext()) {        Map.Entry<Class<?>,List<RegisteredServiceProvider<?>>> entry=it.next();        Iterator<RegisteredServiceProvider<?>> it2=entry.getValue().iterator();        try {          while (it2.hasNext()) {            RegisteredServiceProvider<?> registered=it2.next();            if (registered.getPlugin().equals(plugin)) {              it2.remove();              unregisteredEvents.add(new ServiceUnregisterEvent(registered));            }          }        } catch (        NoSuchElementException e) {        }        if (entry.getValue().size() == 0) {          it.remove();        }      }    } catch (    NoSuchElementException e) {    }  }  for (  ServiceUnregisterEvent event : unregisteredEvents) {    Bukkit.getServer().getPluginManager().callEvent(event);  }}  }
class C{  @Override public final byte[] read(final int num){  byte[] ret=new byte[num];  for (int x=0; x < num; x++) {    ret[x]=readByte();  }  return ret;}  }
class C{  public static void print(float x){  out.print(x);  out.flush();}  }
class C{  static IDevice createMockDevice(){  IDevice d=EasyMock.createMock(IDevice.class);  EasyMock.expect(d.getClientName(1493)).andStubReturn("dummy.client.name");  EasyMock.expect(d.getClientName(11698)).andStubReturn("com.android.chattylogger");  EasyMock.expect(d.getClientName(EasyMock.anyInt())).andStubReturn("?");  EasyMock.replay(d);  return d;}  }
class C{  @SuppressWarnings("deprecation") private ReplicationPolicy createIfExistsReplicationPolicy(Element groupElem,String activeGroupName,ArrayList<String> groupMemberNames,ArrayList<SpaceURL> groupMemberURLList,Hashtable<String,ReplicationPolicyDescription> replPolicyDescTable,boolean isMirrorEnabled) throws CreateException {  ReplicationPolicy replPolicy;  NodeList repNodeList=groupElem.getElementsByTagName(REPL_POLICY_TAG);  if (repNodeList.getLength() <= 0)   return null;  Element replPolicyNode=(Element)repNodeList.item(0);  NodeList nl=replPolicyNode.getElementsByTagName(POLICY_TYPE_TAG);  if (nl.getLength() == 0)   throw new CreateException("<policy-type> tag not found under <repl-policy> tag.Check " + clusterConfigFile + " cluster config file.");  clusterPolicy.m_Replicated=true;  replPolicy=new ReplicationPolicy(clusterPolicy.m_ClusterName,activeGroupName,(List<String>)groupMemberNames.clone(),(List<SpaceURL>)groupMemberURLList.clone(),_clusterMemberName,replPolicyDescTable,new SyncReplPolicy(_clusterMemberName),new MultiBucketReplicationPolicy(),new SwapBacklogConfig());  if (isMirrorEnabled)   createMirrorServiceConfig(replPolicy);  String replicationMode=getNodeValueIfExists(replPolicyNode,REPLICATION_MODE_TAG);  if (replicationMode != null) {    replPolicy.m_IsSyncReplicationEnabled=calculateSyncReplicationValue(replicationMode);    replPolicy.isOneWayReplication=calculateOneWayReplicationValue(replicationMode);  }  replPolicy.m_ReplicationMode=replicationMode;  String permittedOperations=getNodeValueIfExists(replPolicyNode,PERMITTED_OPERATIONS_TAG);  List<ReplicationOperationType> opers;  if (permittedOperations != null) {    opers=new ArrayList<ReplicationOperationType>();    StringTokenizer st=new StringTokenizer(permittedOperations,",",false);    while (st.hasMoreTokens()) {      opers.add(ReplicationOperationType.valueOf(st.nextToken().trim().toUpperCase()));    }  } else {    opers=Arrays.asList(ReplicationOperationType.values());  }  replPolicy.setPermittedOperations(opers);  String policyType=getNodeValueIfExists(replPolicyNode,POLICY_TYPE_TAG);  if (policyType.equalsIgnoreCase(FULL_REPLICATION))   replPolicy.m_PolicyType=ReplicationPolicy.FULL_REPLICATION; else   if (policyType.equalsIgnoreCase(PARTIAL_REPLICATION))   replPolicy.m_PolicyType=ReplicationPolicy.PARTIAL_REPLICATION; else   throw new CreateException("Unknown replication policy type. Check <policy-type> tag value under <repl-policy> tag.Check " + clusterConfigFile + " cluster config file.");  String value=getNodeValueIfExists(replPolicyNode,REPL_MEMORY_RECOVERY_TAG);  if (value != null) {    replPolicy.m_Recovery=JSpaceUtilities.parseBooleanTag(REPL_MEMORY_RECOVERY_TAG,value);  }  value=getNodeValueIfExists(replPolicyNode,REPL_REDO_LOG_CAPACITY_TAG);  if (value != null)   replPolicy.setMaxRedoLogCapacity(Long.parseLong(value));  value=getNodeValueIfExists(replPolicyNode,REPL_REDO_LOG_MEMORY_CAPACITY_TAG);  if (value != null)   replPolicy.setMaxRedoLogMemoryCapacity(Long.parseLong(value));  value=getNodeValueIfExists(replPolicyNode,REPL_REDO_LOG_LOCALVIEW_CAPACITY_TAG);  if (value != null) {    if (value.toLowerCase().trim().equals("memory"))     replPolicy.setLocalViewMaxRedologCapacity(null); else     replPolicy.setLocalViewMaxRedologCapacity(Long.parseLong(value));  }  value=getNodeValueIfExists(replPolicyNode,REPL_LOCALVIEW_MAX_DISCONNECTION_TIME_TAG);  if (value != null) {    replPolicy.setLocalViewMaxDisconnectionTime(Long.parseLong(value));  }  value=getNodeValueIfExists(replPolicyNode,REPL_REDO_LOG_LOCALVIEW_RECOVERY_CAPACITY_TAG);  if (value != null) {    if (value.toLowerCase().trim().equals("memory"))     replPolicy.setLocalViewMaxRedologRecoveryCapacity(null); else     replPolicy.setLocalViewMaxRedologRecoveryCapacity(Long.parseLong(value));  }  value=getNodeValueIfExists(replPolicyNode,REPL_REDO_LOG_DURABLE_NOTIFICATION_CAPACITY_TAG);  if (value != null) {    if (value.toLowerCase().trim().equals("memory"))     replPolicy.setDurableNotificationMaxRedologCapacity(null); else     replPolicy.setDurableNotificationMaxRedologCapacity(Long.parseLong(value));  }  value=getNodeValueIfExists(replPolicyNode,REPL_DURABLE_NOTIFICATION_MAX_DISCONNECTION_TIME_TAG);  if (value != null)   replPolicy.setDurableNotificationMaxDisconnectionTime(Long.parseLong(value));  value=getNodeValueIfExists(replPolicyNode,REPL_REDO_LOG_RECOVERY_CAPACITY_TAG);  if (value != null)   replPolicy.setMaxRedoLogRecoveryCapacity(Long.parseLong(value));  value=getNodeValueIfExists(replPolicyNode,REPL_REDO_LOG_CAPACITY_EXCEEDED_TAG);  if (value != null)   replPolicy.setOnRedoLogCapacityExceeded(parseRedoLogCapacityExceededPolicy(value));  value=getNodeValueIfExists(replPolicyNode,REPL_TOLERATE_MISSING_PACKETS_TAG);  if (value != null)   replPolicy.setOnMissingPackets(parseMissingPacketsPolicy(value));  value=getNodeValueIfExists(replPolicyNode,REPL_ON_CONFLICTING_PACKETS_TAG);  if (value != null)   replPolicy.setConflictingOperationPolicy(ConflictingOperationPolicy.parseConflictingPacketsPolicy(value));  value=getNodeValueIfExists(replPolicyNode,REPL_FULL_TAKE_TAG);  if (value != null)   replPolicy.setReplicateFullTake(Boolean.parseBoolean(value));  value=getNodeValueIfExists(replPolicyNode,REPL_ONE_PHASE_COMMIT_TAG);  if (value != null)   replPolicy.setReplicateOnePhaseCommit(Boolean.parseBoolean(value));  value=getNodeValueIfExists(replPolicyNode,CONNECTION_MONITOR_THREAD_POOL_SIZE);  if (value != null)   replPolicy.setConnectionMonitorThreadPoolSize(Integer.parseInt(value));  value=getNodeValueIfExists(replPolicyNode,RECOVERY_CHUNK_SIZE_TAG);  if (value != null)   replPolicy.setRecoveryChunkSize(Integer.parseInt(value));  value=getNodeValueIfExists(replPolicyNode,RECOVERY_THREAD_POOL_SIZE);  if (value != null)   replPolicy.setRecoveryThreadPoolSize(Integer.parseInt(value));  value=getNodeValueIfExists(replPolicyNode,REPLICATION_PROCESSING_TYPE);  if (value != null) {    replPolicy.setProcessingType(parseProcessingType(value));    if (_logger.isLoggable(Level.FINE))     _logger.log(Level.FINE,"Replication processing type set to: " + value);  }  NodeList multiBucketNL=replPolicyNode.getElementsByTagName(REPLICATION_MULTI_BUCKET_CONFIG);  if (multiBucketNL.getLength() > 0) {    Element multiBucketNode=(Element)multiBucketNL.item(0);    value=getNodeValueIfExists(multiBucketNode,REPLICATION_MULTI_BUCKET_COUNT);    if (value != null)     replPolicy.getMultiBucketReplicationPolicy().setBucketsCount(Short.parseShort(value));    value=getNodeValueIfExists(multiBucketNode,REPLICATION_MULTI_BUCKET_BATCH_PARALLEL_FACTOR);    if (StringUtils.hasText(value) && !value.equals("default"))     replPolicy.getMultiBucketReplicationPolicy().setBatchParallelFactor(Integer.parseInt(value));    value=getNodeValueIfExists(multiBucketNode,REPLICATION_MULTI_BUCKET_BATCH_PARALLEL_THRESHOLD);    if (value != null)     replPolicy.getMultiBucketReplicationPolicy().setBatchParallelThreshold(Integer.parseInt(value));  }  NodeList swapRedoLogNL=replPolicyNode.getElementsByTagName(SWAP_REDOLOG_CONFIG);  if (swapRedoLogNL.getLength() > 0) {    Element swapRedologNode=(Element)swapRedoLogNL.item(0);    value=getNodeValueIfExists(swapRedologNode,SWAP_REDOLOG_FLUSH_BUFFER_PACKET_COUNT);    if (value != null)     replPolicy.getSwapRedologPolicy().setFlushBufferPacketsCount(Integer.parseInt(value));    value=getNodeValueIfExists(swapRedologNode,SWAP_REDOLOG_FETCH_BUFFER_PACKET_COUNT);    if (value != null)     replPolicy.getSwapRedologPolicy().setFetchBufferPacketsCount(Integer.parseInt(value));    value=getNodeValueIfExists(swapRedologNode,SWAP_REDOLOG_SEGMENT_SIZE);    if (value != null)     replPolicy.getSwapRedologPolicy().setSegmentSize(Long.parseLong(value));    value=getNodeValueIfExists(swapRedologNode,SWAP_REDOLOG_MAX_SCAN_LENGTH);    if (value != null)     replPolicy.getSwapRedologPolicy().setMaxScanLength(Integer.parseInt(value));    value=getNodeValueIfExists(swapRedologNode,SWAP_REDOLOG_MAX_OPEN_CURSORS);    if (value != null)     replPolicy.getSwapRedologPolicy().setMaxOpenCursors(Integer.parseInt(value));    value=getNodeValueIfExists(swapRedologNode,SWAP_REDOLOG_WRITER_BUFFER_SIZE);    if (value != null)     replPolicy.getSwapRedologPolicy().setWriterBufferSize(Integer.parseInt(value));  }  value=getNodeValueIfExists(replPolicyNode,REPL_NOTIFY_TEMPLATE_TAG);  if (value != null)   replPolicy.m_ReplicateNotifyTemplates=JSpaceUtilities.parseBooleanTag(REPL_NOTIFY_TEMPLATE_TAG,value);  value=getNodeValueIfExists(replPolicyNode,REPL_TRIGGER_NOTIFY_TEMPLATES_TAG);  if (value != null)   replPolicy.m_TriggerNotifyTemplates=JSpaceUtilities.parseBooleanTag(REPL_TRIGGER_NOTIFY_TEMPLATES_TAG,value);  value=getNodeValueIfExists(replPolicyNode,REPL_LEASE_EXPIRATIONS_TAG);  if (value != null)   replPolicy.setReplicateLeaseExpirations(JSpaceUtilities.parseBooleanTag(REPL_LEASE_EXPIRATIONS_TAG,value));  value=getNodeValueIfExists(replPolicyNode,REPL_FIND_TIMEOUT_TAG);  if (value != null)   replPolicy.m_SpaceFinderTimeout=Long.parseLong(value);  value=getNodeValueIfExists(replPolicyNode,REPL_FIND_REPORT_INTERVAL_TAG);  if (value != null)   replPolicy.m_SpaceFinderReportInterval=Long.parseLong(value);  value=getNodeValueIfExists(replPolicyNode,REPL_ORIGINAL_STATE_TAG);  if (value != null)   replPolicy.setReplicatedOriginalState(JSpaceUtilities.parseBooleanTag(REPL_ORIGINAL_STATE_TAG,value));  NodeList asyncNL=replPolicyNode.getElementsByTagName(ASYNC_REPLICATION_TAG);  if (asyncNL.getLength() > 0) {    Element asyncReplElem=(Element)asyncNL.item(0);    value=getNodeValueIfExists(asyncReplElem,REPL_CHUNK_SIZE_TAG);    if (value != null)     replPolicy.m_ReplicationChunkSize=Integer.parseInt(value);    value=getNodeValueIfExists(asyncReplElem,REPL_INTERVAL_MILLIS_TAG);    if (value != null)     replPolicy.m_ReplicationIntervalMillis=Long.parseLong(value);    value=getNodeValueIfExists(asyncReplElem,REPL_INTERVAL_OPERS_TAG);    if (value != null)     replPolicy.m_ReplicationIntervalOperations=Integer.parseInt(value);    value=getNodeValueIfExists(asyncReplElem,REPL_SYNC_ON_COMMIT_TAG);    if (value != null)     replPolicy.m_SyncOnCommit=JSpaceUtilities.parseBooleanTag(REPL_SYNC_ON_COMMIT_TAG,value);    value=getNodeValueIfExists(asyncReplElem,REPL_SYNC_ON_COMMIT_TIMEOUT_TAG);    if (value != null)     replPolicy.m_SyncOnCommitTimeout=Long.parseLong(value);    value=getNodeValueIfExists(asyncReplElem,RELIABLE_ASYNC_REPL_TAG);    if (value != null)     replPolicy.setReliableAsyncRepl(JSpaceUtilities.parseBooleanTag(RELIABLE_ASYNC_REPL_TAG,value));    value=getNodeValueIfExists(asyncReplElem,REPL_ASYNC_CHANNEL_SHUTDOWN_TIMEOUT_TAG);    if (value != null)     replPolicy.setAsyncChannelShutdownTimeout(Long.parseLong(value));    value=getNodeValueIfExists(asyncReplElem,RELIABLE_ASYNC_STATE_NOTIFY_INTERVAL_TAG);    if (value != null)     replPolicy.setReliableAsyncCompletionNotifierInterval(Long.parseLong(value));    value=getNodeValueIfExists(asyncReplElem,RELIABLE_ASYNC_STATE_NOTIFY_PACKETS_TAG);    if (value != null)     replPolicy.setReliableAsyncCompletionNotifierPacketsThreshold(Long.parseLong(value));  }  NodeList syncNL=replPolicyNode.getElementsByTagName(SYNC_REPLICATION_TAG);  if (syncNL.getLength() > 0) {    Element syncReplElem=(Element)replPolicyNode.getElementsByTagName(SYNC_REPLICATION_TAG).item(0);    value=getNodeValueIfExists(syncReplElem,TODO_QUEUE_TIMEOUT_TAG);    if (value != null)     replPolicy.m_SyncReplPolicy.setTodoQueueTimeout(Long.parseLong(value));    value=getNodeValueIfExists(syncReplElem,HOLD_TXN_LOCK_TAG);    if (value != null)     replPolicy.m_SyncReplPolicy.setHoldTxnLockUntilSyncReplication(JSpaceUtilities.parseBooleanTag(HOLD_TXN_LOCK_TAG,value));    value=getNodeValueIfExists(syncReplElem,MULTIPLE_OPERS_CHUNK_SIZE);    if (value != null)     replPolicy.m_SyncReplPolicy.setMultipleOperationChunkSize(Integer.parseInt(value));    value=getNodeValueIfExists(syncReplElem,THROTTLE_WHEN_INACTIVE_TAG);    if (value != null)     replPolicy.m_SyncReplPolicy.setThrottleWhenInactive(Boolean.parseBoolean(value));    value=getNodeValueIfExists(syncReplElem,MAX_THROTTLE_TP_WHEN_INACTIVE_TAG);    if (value != null)     replPolicy.m_SyncReplPolicy.setMaxThrottleTPWhenInactive(Integer.parseInt(value));    value=getNodeValueIfExists(syncReplElem,MIN_THROTTLE_WHEN_INACTIVE_TAG);    if (value != null)     replPolicy.m_SyncReplPolicy.setMinThrottleTPWhenActive(Integer.parseInt(value));    value=getNodeValueIfExists(syncReplElem,TARGET_CONSUME_TIMEOUT_TAG);    if (value != null)     replPolicy.m_SyncReplPolicy.setTargetConsumeTimeout(Long.parseLong(value));    value=getNodeValueIfExists(syncReplElem,CONSISTENCY_LEVEL_TAG);    if (value != null) {      if (value.toUpperCase().equals("QUOROM"))       value=ConsistencyLevel.QUORUM.toString();      replPolicy.m_SyncReplPolicy.setConsistencyLevel(Enum.valueOf(ConsistencyLevel.class,value.toUpperCase()));    }    NodeList unicastSyncNL=syncReplElem.getElementsByTagName(SYNC_REPL_UNICAST_TAG);    if (unicastSyncNL.getLength() > 0) {      Element unicastSyncElem=(Element)unicastSyncNL.item(0);      value=getNodeValueIfExists(unicastSyncElem,MIN_WORK_THREADS_TAG);      if (value != null)       replPolicy.m_SyncReplPolicy.setUnicastMinThreadPoolSize(Integer.parseInt(value));      value=getNodeValueIfExists(unicastSyncElem,MAX_WORK_THREADS_TAG);      if (value != null)       replPolicy.m_SyncReplPolicy.setUnicastMaxThreadPoolSize(Integer.parseInt(value));    }    NodeList multicastSyncNL=syncReplElem.getElementsByTagName(SYNC_REPL_MULTICAST_TAG);    if (multicastSyncNL.getLength() > 0) {      Element multicastElem=(Element)multicastSyncNL.item(0);      value=getNodeValueIfExists(multicastElem,IP_GROUP_TAG);      if (value != null)       replPolicy.m_SyncReplPolicy.setMulticastIpGroup(value);      value=getNodeValueIfExists(multicastElem,PORT_TAG);      if (value != null)       replPolicy.m_SyncReplPolicy.setMulticastPort(Integer.parseInt(value));      value=getNodeValueIfExists(multicastElem,TTL_TAG);      if (value != null)       replPolicy.m_SyncReplPolicy.setMulticastTTL(Integer.parseInt(value));      value=getNodeValueIfExists(multicastElem,MIN_WORK_THREADS_TAG);      if (value != null)       replPolicy.m_SyncReplPolicy.setMulticastMinThreadPoolSize(Integer.parseInt(value));      value=getNodeValueIfExists(multicastElem,MAX_WORK_THREADS_TAG);      if (value != null)       replPolicy.m_SyncReplPolicy.setMulticastMaxThreadPoolSize(Integer.parseInt(value));      value=getNodeValueIfExists(multicastElem,ADAPTIVE_MULTICAST_TAG);      if (value != null)       replPolicy.m_SyncReplPolicy.setAdaptiveMulticast(JSpaceUtilities.parseBooleanTag(ADAPTIVE_MULTICAST_TAG,value));    }  }  return replPolicy;}  }
class C{  public static boolean isNegativeInteger(String value){  return value != null && INT_VALIDATOR.isValid(value) && NEGATIVE_INT_PATTERN.matcher(value).matches();}  }
class C{  public static boolean isCreatedRecipient(long id){  return id == RecipientEntry.INVALID_CONTACT || id == RecipientEntry.GENERATED_CONTACT;}  }
class C{  protected Set<ApiFilter> generateFilters(String filterQuery,DimensionDictionary dimensionDictionary) throws BadApiRequestException {  LOG.trace("Dimension Dictionary: {}",dimensionDictionary);  Set<ApiFilter> generated=new LinkedHashSet<>();  if (filterQuery == null || "".equals(filterQuery)) {    return generated;  }  List<String> apiFilters=Arrays.asList(filterQuery.split(COMMA_AFTER_BRACKET_PATTERN));  for (  String apiFilter : apiFilters) {    ApiFilter newFilter;    try {      newFilter=new ApiFilter(apiFilter,dimensionDictionary);    } catch (    BadFilterException filterException) {      throw new BadApiRequestException(filterException.getMessage(),filterException);    }    generated.add(newFilter);  }  LOG.trace("Generated set of filters: {}",generated);  return generated;}  }
class C{  private void moveToNextBlock(){  blk=new BlockId(blk.fileName(),blk.number() - 1);  pg.read(blk);  currentRec=(Integer)pg.getVal(LogMgr.LAST_POS,INTEGER).asJavaVal();}  }
class C{  public String cast(String value){  return cast(value,type());}  }
class C{  public PegGraph(CallGraph callGraph,Hierarchy hierarchy,PAG pag,Set<Object> methodsNeedingInlining,Set<AllocNode> allocNodes,List inlineSites,Map synchObj,Set<AllocNode> multiRunAllocNodes,Map allocNodeToObj,Body unitBody,SootMethod sm,boolean addExceptionEdges,boolean dontAddEdgeFromStmtBeforeAreaOfProtectionToCatchBlock){  this(callGraph,hierarchy,pag,methodsNeedingInlining,allocNodes,inlineSites,synchObj,multiRunAllocNodes,allocNodeToObj,unitBody,"main",sm,addExceptionEdges,dontAddEdgeFromStmtBeforeAreaOfProtectionToCatchBlock);}  }
class C{  public void onMainActivityStart(){  try {    TraceEvent.begin("GoogleServicesManager.onMainActivityStart");    boolean accountsChanged=SigninHelper.checkAndClearAccountsChangedPref(mContext);    mSigninHelper.validateAccountSettings(accountsChanged);  }  finally {    TraceEvent.end("GoogleServicesManager.onMainActivityStart");  }}  }
class C{  public void updateSizes(int size){  if (size == LARGE) {    setSizeParameters(CIRCLE_DIAMETER_LARGE,CIRCLE_DIAMETER_LARGE,CENTER_RADIUS_LARGE,STROKE_WIDTH_LARGE,ARROW_WIDTH_LARGE,ARROW_HEIGHT_LARGE);  } else {    setSizeParameters(CIRCLE_DIAMETER,CIRCLE_DIAMETER,CENTER_RADIUS,STROKE_WIDTH,ARROW_WIDTH,ARROW_HEIGHT);  }}  }
class C{  public static boolean isEmailRegistered(String email){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    return user != null;  }  finally {    pm.close();  }}  }
class C{  public double expectedWeightedValue(){  return this.weightedProduct;}  }
class C{  public static Map<String,Object> createAffiliate(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  String partyId=getPartyId(context);  if (UtilValidate.isNotEmpty(partyId) && partyId.matches("\\d+")) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_affiliate_digit",locale));  }  if (UtilValidate.isEmpty(partyId)) {    try {      partyId=delegator.getNextSeqId("Party");    } catch (    IllegalArgumentException e) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_affiliate_generation_failure",locale));    }  }  GenericValue party=null;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);  }  if (party == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_affiliate_no_party_entity",locale));  }  GenericValue affiliate=null;  try {    affiliate=EntityQuery.use(delegator).from("Affiliate").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);  }  if (affiliate != null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.cannot_create_affiliate_ID_already_exists",locale));  }  affiliate=delegator.makeValue("Affiliate",UtilMisc.toMap("partyId",partyId));  affiliate.setNonPKFields(context);  affiliate.set("dateTimeCreated",now,false);  try {    delegator.create(affiliate);  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.could_not_add_affiliate_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("partyId",partyId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  private void fixRotateOffset(){  if (offsetRotate < 0) {    offsetRotate=0;  }  if (offsetRotate > getMaxOffsetDegree()) {    offsetRotate=getMaxOffsetDegree();  }}  }
class C{  public static String dataValueIsValid(String value,DataElement dataElement){  if (dataElement == null || dataElement.getValueType() == null) {    return "data_element_or_type_null_or_empty";  }  return dataValueIsValid(value,dataElement.getValueType());}  }
class C{  public BrentSolver(double relativeAccuracy,double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy);}  }
class C{  public GroupsEditQuery phone(String value){  return unsafeParam("phone",value);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  private void saveWindowPosition(int appraisalWindowPosition){  SharedPreferences.Editor edit=sharedPref.edit();  edit.putInt(APPRAISAL_WINDOW_POSITION,appraisalWindowPosition);  edit.apply();}  }
class C{  private PokemonCpUtils(){}  }
class C{  public static Map<String,Object> updatePaymentApplication(DispatchContext dctx,Map<String,Object> context){  if (!context.containsKey("useHighestAmount")) {    context.put("useHighestAmount","N");  }  BigDecimal amountApplied=(BigDecimal)context.get("amountApplied");  if (amountApplied != null) {    context.put("amountApplied",amountApplied);  } else {    context.put("amountApplied",ZERO);  }  return updatePaymentApplicationDefBd(dctx,context);}  }
class C{  public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  public GetFormKeyCmd(String processDefinitionId,String taskDefinitionKey){  setProcessDefinitionId(processDefinitionId);  if (taskDefinitionKey == null || taskDefinitionKey.length() < 1) {    throw new ActivitiIllegalArgumentException("The task definition key is mandatory, but '" + taskDefinitionKey + "' has been provided.");  }  this.taskDefinitionKey=taskDefinitionKey;}  }
class C{  public static Matrix computeDoubleCenteringOfSquaredMatrix(Matrix matrix){  int size=matrix.getColumnDimension();  Matrix result=new Matrix(matrix.getColumnDimension(),matrix.getRowDimension());  for (int i=0; i < size; i++) {    for (int j=0; j < size; j++) {      double v1=0;      for (int k=0; k < size; k++) {        v1+=matrix.get(k,j) * matrix.get(k,j) / size;      }      double v2=0;      for (int k=0; k < size; k++) {        v2+=matrix.get(i,k) * matrix.get(i,k) / size;      }      double v3=0;      for (int k=0; k < size; k++) {        for (int l=0; l < size; l++) {          v3+=matrix.get(k,l) * matrix.get(k,l) / (size * size);        }      }      double v4=matrix.get(i,j);      result.set(i,j,0.5 * (v1 + v2 - v3 - (v4 * v4)));    }  }  return result;}  }
class C{  public static void restore(RequestLog ctx){  RequestLog current=RLOG.get();  current.clear();  current.logId=ctx.logId;  current.info=ctx.info;  current.mostRecentTimer=ctx.mostRecentTimer;  current.times.putAll(ctx.times);  current.threadIds.addAll(ctx.threadIds);  current.threadIds.add(Thread.currentThread().getName());  MDC.put(ID_KEY,current.logId);}  }
class C{  @Override public void onTokenRefresh(){  String token=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"FCM Token: " + token);  FirebaseMessaging.getInstance().subscribeToTopic(FRIENDLY_ENGAGE_TOPIC);}  }
class C{  public static String graphToDot(UniqueVertexGraph gTree,boolean bDirected,Map hEdgeDistros){  StringBuffer sb=new StringBuffer();  String sConnector;  boolean bDistroGraph=(hEdgeDistros != null);  if (!bDirected) {    sb.append("graph {\n");    sConnector="--";  } else {    sb.append("digraph {\n");    sConnector="->";  }  Iterator iIter=gTree.getEdgeSet().iterator();  while (iIter.hasNext()) {    Edge e=(Edge)iIter.next();    String sA="_" + e.getVertexA().toString().replaceAll("\\W","_");    String sB="_" + e.getVertexB().toString().replaceAll("\\W","_");    String sLabel="";    if (e instanceof WeightedEdge) {      sLabel+=String.format("%4.2f",((WeightedEdge)e).getWeight());    }    if (bDistroGraph) {      Distribution dTmp;      if ((dTmp=(Distribution)(hEdgeDistros.get(e))) != null)       sLabel+=" - Distro: " + dTmp.toString();    }    if (e instanceof WeightedEdge)     sb.append("\t" + sA + " "+ sConnector+ " "+ sB+ " [label=\""+ sLabel.replaceAll("\\s+"," ")+ "\"]\n"); else     sb.append("\t" + sA + " "+ sConnector+ " "+ sB+ "\n");    sb.append("\t" + sA + " [label=\""+ sA+ "\"] "+ "\n");  }  sb.append("}");  return sb.toString();}  }
class C{  public Builder countUniqueColumns(String... columns){  return add(ReduceOp.CountUnique,columns);}  }
class C{  public Vector multiply(int m){  x*=m;  y*=m;  z*=m;  return this;}  }
class C{  void accumulate(double elapsedTime){  this.force.zero();  int size=this.forces.size();  if (size > 0) {    Iterator<Force> it=this.forces.iterator();    while (it.hasNext()) {      Force force=it.next();      this.force.add(force.force);      if (force.isComplete(elapsedTime)) {        it.remove();      }    }  }  this.torque=0.0;  size=this.torques.size();  if (size > 0) {    Iterator<Torque> it=this.torques.iterator();    while (it.hasNext()) {      Torque torque=it.next();      this.torque+=torque.torque;      if (torque.isComplete(elapsedTime)) {        it.remove();      }    }  }}  }
class C{  public void zoomOut(){  this.scale*=2.0;}  }
class C{  public boolean isInstanceType(){  return worldMapTemplate.isInstance();}  }
class C{  public ArrayRealVector(int size){  data=new double[size];}  }
class C{  public RevisionAwareDifferencer(){}  }
class C{  public void removeAllTags(){  mTagList=null;}  }
class C{  public static void d(Class<?> clazz,String msg){  if (isDebug) {    Log.d(clazz.getSimpleName(),msg);  }}  }
class C{  @SuppressLint("NewApi") private void send() throws IOException, InterruptedException {  int sum=1, len=0, type;  if (streamType == 0) {    fill(header,0,5);    ts+=delay;    naluLength=header[3] & 0xFF | (header[2] & 0xFF) << 8 | (header[1] & 0xFF) << 16 | (header[0] & 0xFF) << 24;    if (naluLength > 100000 || naluLength < 0)     resync();  } else   if (streamType == 1) {    fill(header,0,5);    ts=((MediaCodecInputStream)is).getLastBufferInfo().presentationTimeUs * 1000L;    naluLength=is.available() + 1;    if (!(header[0] == 0 && header[1] == 0 && header[2] == 0)) {      Log.e(TAG,"NAL units are not preceeded by 0x00000001");      streamType=2;      return;    }  } else {    fill(header,0,1);    header[4]=header[0];    ts=((MediaCodecInputStream)is).getLastBufferInfo().presentationTimeUs * 1000L;    naluLength=is.available() + 1;  }  type=header[4] & 0x1F;  if (type == 7 || type == 8) {    Log.v(TAG,"SPS or PPS present in the stream.");    count++;    if (count > 4) {      sps=null;      pps=null;    }  }  if (type == 5 && sps != null && pps != null) {    buffer=socket.requestBuffer();    socket.markNextPacket();    socket.updateTimestamp(ts);    System.arraycopy(stapa,0,buffer,rtphl,stapa.length);    super.send(rtphl + stapa.length);  }  if (naluLength <= MAXPACKETSIZE - rtphl - 2) {    buffer=socket.requestBuffer();    buffer[rtphl]=header[4];    len=fill(buffer,rtphl + 1,naluLength - 1);    socket.updateTimestamp(ts);    socket.markNextPacket();    super.send(naluLength + rtphl);  } else {    header[1]=(byte)(header[4] & 0x1F);    header[1]+=0x80;    header[0]=(byte)((header[4] & 0x60) & 0xFF);    header[0]+=28;    while (sum < naluLength) {      buffer=socket.requestBuffer();      buffer[rtphl]=header[0];      buffer[rtphl + 1]=header[1];      socket.updateTimestamp(ts);      if ((len=fill(buffer,rtphl + 2,naluLength - sum > MAXPACKETSIZE - rtphl - 2 ? MAXPACKETSIZE - rtphl - 2 : naluLength - sum)) < 0)       return;      sum+=len;      if (sum >= naluLength) {        buffer[rtphl + 1]+=0x40;        socket.markNextPacket();      }      super.send(len + rtphl + 2);      header[1]=(byte)(header[1] & 0x7F);    }  }}  }
class C{  private HavingOperation extractOperation(Matcher query) throws BadHavingException {  String operationName=query.group(2);  try {    return HavingOperation.fromString(operationName);  } catch (  IllegalArgumentException ignored) {    LOG.debug(HAVING_OPERATOR_INVALID.logFormat(operationName));    throw new BadHavingException(HAVING_OPERATOR_INVALID.format(operationName));  }}  }
class C{  public static Map<String,Object> updateDataResourceAndText(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> thisResult=updateDataResourceMethod(dctx,context);  if (thisResult.get(ModelService.RESPONSE_MESSAGE) != null) {    return ServiceUtil.returnError((String)thisResult.get(ModelService.ERROR_MESSAGE));  }  String dataResourceTypeId=(String)context.get("dataResourceTypeId");  if (dataResourceTypeId != null && dataResourceTypeId.equals("ELECTRONIC_TEXT")) {    thisResult=updateElectronicText(dctx,context);    if (thisResult.get(ModelService.RESPONSE_MESSAGE) != null) {      return ServiceUtil.returnError((String)thisResult.get(ModelService.ERROR_MESSAGE));    }  }  return ServiceUtil.returnSuccess();}  }
class C{  public void ResetAttack(){  loop=0;}  }
class C{  @Override public double[] makeDensityTestValues(){  return new double[]{0,0,0,0,0,0.0455118580441,0.070444173646,0.0896924681582,0.112794186114,0.151439332084};}  }
class C{  private float computeCorrelationCoefficentTransposed(String seriesNameX,String seriesNameY){  final ArrayList<Double> xValues=new ArrayList<>(getChartData().getClassNames().size());  final ArrayList<Double> yValues=new ArrayList<>(getChartData().getClassNames().size());  for (  String className : getChartData().getClassNames()) {    xValues.add(getChartData().getValueAsDouble(seriesNameX,className));    yValues.add(getChartData().getValueAsDouble(seriesNameY,className));  }  return (float)Correlation.computePersonsCorrelationCoefficent(xValues.size(),xValues,yValues);}  }
class C{  public static RealMatrix covarianceMatrix(RealMatrix matrix){  int dimension=matrix.getColumnDimension();  final RealMatrix outMatrix=new BlockRealMatrix(dimension,dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < i; j++) {      final double cov=covariance(matrix.getColumn(i),matrix.getColumn(j));      outMatrix.setEntry(i,j,cov);      outMatrix.setEntry(j,i,cov);    }    outMatrix.setEntry(i,i,variance(matrix.getColumn(i)));  }  return outMatrix;}  }
class C{  public static List<IOFileFilter> toList(IOFileFilter... filters){  if (filters == null) {    throw new IllegalArgumentException("The filters must not be null");  }  List<IOFileFilter> list=new ArrayList<IOFileFilter>(filters.length);  for (int i=0; i < filters.length; i++) {    if (filters[i] == null) {      throw new IllegalArgumentException("The filter[" + i + "] is null");    }    list.add(filters[i]);  }  return list;}  }
class C{  public WallGetCommentsQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void updateModifiers(int modifiers){  myMouseInteraction.setIsControlDown(((modifiers & InputEvent.CTRL_DOWN_MASK) != 0) || ((modifiers & InputEvent.CTRL_MASK) != 0));  myMouseInteraction.setIsShiftDown(((modifiers & InputEvent.SHIFT_DOWN_MASK) != 0) || ((modifiers & InputEvent.SHIFT_MASK) != 0));  myMouseInteraction.setIsAltDown(((modifiers & InputEvent.ALT_DOWN_MASK) != 0) || ((modifiers & InputEvent.ALT_MASK) != 0));}  }
class C{  public void sendMail(Player sender,String recipientName,String title,String message,int attachedItemObjId,int attachedItemCount,int attachedKinahCount,LetterType letterType){  if (letterType == LetterType.BLACKCLOUD || recipientName.length() > 16) {    return;  }  if (title.length() > 20) {    title=title.substring(0,20);  }  if (message.length() > 1000) {    message=message.substring(0,1000);  }  PlayerCommonData recipientCommonData=DAOManager.getDAO(PlayerDAO.class).loadPlayerCommonDataByName(recipientName);  if (recipientCommonData == null) {    PacketSendUtility.sendPacket(sender,new SM_MAIL_SERVICE(MailMessage.NO_SUCH_CHARACTER_NAME));    return;  }  if ((recipientCommonData.getRace() != sender.getRace()) && sender.getAccessLevel() < AdminConfig.GM_LEVEL) {    PacketSendUtility.sendPacket(sender,new SM_MAIL_SERVICE(MailMessage.MAIL_IS_ONE_RACE_ONLY));    return;  }  Player recipient=World.getInstance().findPlayer(recipientCommonData.getPlayerObjId());  if (recipient != null) {    if (!recipient.getMailbox().haveFreeSlots()) {      PacketSendUtility.sendPacket(sender,new SM_MAIL_SERVICE(MailMessage.RECIPIENT_MAILBOX_FULL));      return;    }  } else   if (recipientCommonData.getMailboxLetters() > 99) {    PacketSendUtility.sendPacket(sender,new SM_MAIL_SERVICE(MailMessage.RECIPIENT_MAILBOX_FULL));    return;  }  if (!validateMailSendPrice(sender,attachedKinahCount,attachedItemObjId,attachedItemCount)) {    return;  }  Item attachedItem=null;  int finalAttachedKinahCount=0;  int kinahMailCommission=0;  int itemMailCommission=0;  Storage senderInventory=sender.getInventory();  if (attachedItemObjId != 0 && attachedItemCount > 0) {    Item senderItem=senderInventory.getItemByObjId(attachedItemObjId);    if (senderItem == null) {      return;    }    if (!AdminService.getInstance().canOperate(sender,null,senderItem,"mail")) {      return;    }    float qualityPriceRate;switch (senderItem.getItemTemplate().getItemQuality()) {case JUNK:case COMMON:      qualityPriceRate=0.02f;    break;case RARE:  qualityPriceRate=0.03f;break;case LEGEND:case UNIQUE:qualityPriceRate=0.04f;break;case MYTHIC:case EPIC:qualityPriceRate=0.05f;break;default :qualityPriceRate=0.02f;break;}if (senderItem.getItemCount() < attachedItemCount) {return;}if (!senderItem.isTradeable(sender)) {Disposition dispo=senderItem.getItemTemplate().getDisposition();if (dispo == null || dispo.getId() == 0 || dispo.getCount() == 0) {return;}if (!senderItem.isPacked()) {if (senderInventory.getItemCountByItemId(dispo.getId()) >= dispo.getCount()) {senderInventory.decreaseByItemId(dispo.getId(),dispo.getCount());} else {PacketSendUtility.sendPacket(sender,new SM_SYSTEM_MESSAGE(1401514,new DescriptionId(dispo.getId())));return;}} else {if (senderItem.getPackCount() > senderItem.getItemTemplate().getPackCount()) {return;}}}if (senderItem.getItemCount() == attachedItemCount) {senderInventory.remove(senderItem);PacketSendUtility.sendPacket(sender,new SM_DELETE_ITEM(attachedItemObjId));attachedItem=senderItem;} else if (senderItem.getItemCount() > attachedItemCount) {attachedItem=ItemFactory.newItem(senderItem.getItemTemplate().getTemplateId(),attachedItemCount);senderInventory.decreaseItemCount(senderItem,attachedItemCount);}if (attachedItem == null) {return;}attachedItem.setEquipped(false);attachedItem.setEquipmentSlot(0);attachedItem.setItemLocation(StorageType.MAILBOX.getId());itemMailCommission=Math.round((attachedItem.getItemTemplate().getPrice() * attachedItem.getItemCount()) * qualityPriceRate);}if (attachedKinahCount > 0) {if (senderInventory.getKinah() - attachedKinahCount >= 0) {finalAttachedKinahCount=attachedKinahCount;kinahMailCommission=Math.round(attachedKinahCount * 0.01f);}}int finalMailKinah=10 + kinahMailCommission + itemMailCommission+ finalAttachedKinahCount;if (senderInventory.getKinah() > finalMailKinah) {senderInventory.decreaseKinah(finalMailKinah);} else {AuditLogger.info(sender,"Mail kinah exploit.");return;}Timestamp time=new Timestamp(Calendar.getInstance().getTimeInMillis());Letter newLetter=new Letter(IDFactory.getInstance().nextId(),recipientCommonData.getPlayerObjId(),attachedItem,finalAttachedKinahCount,title,message,sender.getName(),time,true,letterType);if (attachedItem != null) {if (!DAOManager.getDAO(InventoryDAO.class).store(attachedItem,recipientCommonData.getPlayerObjId())) {return;}}if (!DAOManager.getDAO(MailDAO.class).storeLetter(time,newLetter)) {return;}if (recipient != null) {Mailbox recipientMailbox=recipient.getMailbox();recipientMailbox.putLetterToMailbox(newLetter);PacketSendUtility.sendPacket(sender,new SM_MAIL_SERVICE(MailMessage.MAIL_SEND_SECCESS));PacketSendUtility.sendPacket(recipient,new SM_MAIL_SERVICE(recipientMailbox));recipientMailbox.isMailListUpdateRequired=true;if (recipientMailbox.mailBoxState != 0) {boolean isPostman=(recipientMailbox.mailBoxState & PlayerMailboxState.EXPRESS) == PlayerMailboxState.EXPRESS;PacketSendUtility.sendPacket(recipient,new SM_MAIL_SERVICE(recipient,recipientMailbox.getLetters(),isPostman));}if (letterType == LetterType.EXPRESS) {PacketSendUtility.sendPacket(recipient,SM_SYSTEM_MESSAGE.STR_POSTMAN_NOTIFY);}}if (attachedItem != null) {if (LoggingConfig.LOG_MAIL) {log.info("[MAILSERVICE] [Player: " + sender.getName() + "] send [Item: "+ attachedItem.getItemId()+ (LoggingConfig.ENABLE_ADVANCED_LOGGING ? "] [Item Name: " + attachedItem.getItemName() + "]" : "]")+ " [Count: "+ attachedItem.getItemCount()+ "] to [Reciever: "+ recipientName+ "]");}}if (!recipientCommonData.isOnline()) {PacketSendUtility.sendPacket(sender,new SM_MAIL_SERVICE(MailMessage.MAIL_SEND_SECCESS));recipientCommonData.setMailboxLetters(recipientCommonData.getMailboxLetters() + 1);DAOManager.getDAO(MailDAO.class).updateOfflineMailCounter(recipientCommonData);}}  }
class C{  @Override public void endAttlist(Augmentations augs) throws XNIException {  if (fDTDGrammar != null)   fDTDGrammar.endAttlist(augs);  if (fDTDHandler != null) {    fDTDHandler.endAttlist(augs);  }}  }
class C{  public short[] interpolate(int oldSampleRate,int newSampleRate,short[] samples){  if (oldSampleRate == newSampleRate) {    return samples;  }  int newLength=Math.round(((float)samples.length / oldSampleRate * newSampleRate));  float lengthMultiplier=(float)newLength / samples.length;  short[] interpolatedSamples=new short[newLength];  for (int i=0; i < newLength; i++) {    float currentPosition=i / lengthMultiplier;    int nearestLeftPosition=(int)currentPosition;    int nearestRightPosition=nearestLeftPosition + 1;    if (nearestRightPosition >= samples.length) {      nearestRightPosition=samples.length - 1;    }    float slope=samples[nearestRightPosition] - samples[nearestLeftPosition];    float positionFromLeft=currentPosition - nearestLeftPosition;    interpolatedSamples[i]=(short)(slope * positionFromLeft + samples[nearestLeftPosition]);  }  return interpolatedSamples;}  }
class C{  public boolean filterOut(final SAMRecord record){  boolean isTopStrand=((!record.getReadNegativeStrandFlag() && !record.getReadPairedFlag()) || (!record.getReadNegativeStrandFlag() && record.getReadPairedFlag() && record.getFirstOfPairFlag()) || (record.getReadNegativeStrandFlag() && record.getReadPairedFlag() && record.getSecondOfPairFlag()));  if (include) {    if (isTopStrand) {      return false;    }  } else {    if (!isTopStrand) {      return false;    }  }  return true;}  }
class C{  public boolean isBcontains(BitSet H){  BitSet M=((BitSet)B.clone());  M.and(H);  return M.cardinality() == H.cardinality();}  }
class C{  public static void deleteESTestIndex(String index){  logger.info("Deleting index:");  ProcessBuilder pDelete=new ProcessBuilder("curl","-XDELETE",index);  try {    executeCommand(pDelete);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  void checkReadLock() throws DLIllegalStateException, LockingException {synchronized (this) {    if ((null == lockAcquireFuture) || (!lockAcquireFuture.isDefined())) {      throw new DLIllegalStateException("Attempt to check for lock before it has been acquired successfully");    }  }  readLock.checkOwnership();}  }
class C{  public void delete(){  select().clickOption(ToolbarOptions.DELETE);  deleteDialog.confirmDelete();  verifyIsHidden();}  }
class C{  @deprecated public StringCharacterIterator(String text){  this(text,0);}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(extras.get("VT"));    setRetryUntil(extras.get("GT"));    setMaxRetries(extras.get("GR"));  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  boolean isPinned(){  internalLock.readLock().lock();  try {    return pins > 0;  }  finally {    internalLock.readLock().unlock();  }}  }
class C{  public void updateTimersAndEvents(ProcessDefinitionEntity processDefinition,ProcessDefinitionEntity previousProcessDefinition,ParsedDeployment parsedDeployment){  Process process=parsedDeployment.getProcessModelForProcessDefinition(processDefinition);  BpmnModel bpmnModel=parsedDeployment.getBpmnModelForProcessDefinition(processDefinition);  eventSubscriptionManager.removeObsoleteMessageEventSubscriptions(previousProcessDefinition);  eventSubscriptionManager.addMessageEventSubscriptions(processDefinition,process,bpmnModel);  eventSubscriptionManager.removeObsoleteSignalEventSubScription(previousProcessDefinition);  eventSubscriptionManager.addSignalEventSubscriptions(Context.getCommandContext(),processDefinition,process,bpmnModel);  timerManager.removeObsoleteTimers(processDefinition);  timerManager.scheduleTimers(processDefinition,process);}  }
class C{  public static final boolean isSameApp(int uid1,int uid2){  return getAppId(uid1) == getAppId(uid2);}  }
class C{  @Override public int hashCode(){  if (isNaN()) {    return 542;  }  return 122 * (76 * MathUtils.hash(x) + MathUtils.hash(y));}  }
class C{  public double readDouble() throws IOException {  read(bytes,0,8);  for (int i=0; i < 8; i++)   byteBuffer.put(i,bytes[8 - i - 1]);  return byteBuffer.getDouble(0);}  }
class C{  public static Object cast(ITypeDesc typeDesc,String propertyName,Object obj,boolean isPreparedValue) throws SQLException {  if (obj == null)   return null;  final Class<?> type=getPropertyType(typeDesc,propertyName);  if (type == void.class)   return obj;  if (isPreparedValue) {    if (type.getName().equals(Clob.class.getName()))     return new Clob((String)obj);    if (type.getName().equals(Blob.class.getName()))     return new Blob((byte[])obj);    return obj;  }  return ObjectConverter.convert(obj,type);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public TimeMetaData(String name,TimeZone timeZone){  this(name,timeZone,null,null);}  }
class C{  public static boolean isWritable(@NotNull FileOp fileOp,@Nullable File sdkLocation){  if (sdkLocation == null) {    return false;  } else   if (fileOp.exists(sdkLocation)) {    return fileOp.isDirectory(sdkLocation) && fileOp.canWrite(sdkLocation);  } else {    File parent=getFirstExistentParent(fileOp,sdkLocation);    return parent != null && fileOp.canWrite(parent);  }}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  float d;  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Float_info cu=(CONSTANT_Float_info)cp;  d=convert() - cu.convert();  return ((d > 0.0) ? 1 : ((d < 0.0) ? -1 : 0));}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mainHandler=new Handler(getMainLooper());  DisplayMetrics metrics=new DisplayMetrics();  getWindowManager().getDefaultDisplay().getMetrics(metrics);  AndroidApplicationConfiguration config=new AndroidApplicationConfiguration();  config.hideStatusBar=true;  config.useAccelerometer=false;  config.useCompass=false;  final AndroidMobileApi api=new AndroidMobileApi(this);  initialize(new DiceHeroes(api),config);  gameServicesHelper=new GameServicesHelper(this);  purchaseHelper=new PurchaseHelper(this,api);}  }
class C{  public boolean knowns(AionObject object){  return knownObjects.containsKey(object.getObjectId());}  }
class C{  public OrdersChangeStateQuery(VkApiClient client,UserActor actor,int orderId,OrdersChangeStateAction action){  super(client,"orders.changeState",String.class);  accessToken(actor.getAccessToken());  orderId(orderId);  action(action);}  }
class C{  private void resize(int newCapacity){  Entry[] oldTable=getTable();  int oldCapacity=oldTable.length;  if (oldCapacity == MAXIMUM_CAPACITY) {    threshold=Integer.MAX_VALUE;    return;  }  Entry[] newTable=new Entry[newCapacity];  transfer(oldTable,newTable);  table=newTable;  if (size >= threshold / 2) {    threshold=(int)(newCapacity * loadFactor);  } else {    expungeStaleEntries();    transfer(newTable,oldTable);    table=oldTable;  }}  }
class C{  public EqIOException(String message,Throwable cause){  super(message,cause);}  }
class C{  protected Combo createEditableCombo(Composite parent){  Combo combo=new Combo(parent,SWT.NULL);  GridData data=new GridData(GridData.FILL_HORIZONTAL);  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;  combo.setLayoutData(data);  return combo;}  }
class C{  public PotionEffect(PotionEffectType type,int duration,int amplifier,boolean ambient,boolean particles){  this(type,duration,amplifier,ambient,particles,null);}  }
class C{  public static void showSnackBar(Activity context,int color,int view,int text,int length){  View layout=context.findViewById(view);  Snackbar snackbar=Snackbar.make(layout,text,length).setActionTextColor(context.getResources().getColor(R.color.white));  View snackBarView=snackbar.getView();  if (color == 0)   color=ContextCompat.getColor(context,R.color.backgroundColor);  snackBarView.setBackgroundColor(color);  snackbar.show();}  }
class C{  private void updateImportListWith(SchemaGrammar newGrammar){  SchemaGrammar[] schemaGrammars=fGrammarBucket.getGrammars();  for (int i=0; i < schemaGrammars.length; ++i) {    SchemaGrammar sg=schemaGrammars[i];    if (sg != newGrammar) {      Vector importedGrammars=sg.getImportedGrammars();      if (importedGrammars != null) {        for (int j=0; j < importedGrammars.size(); j++) {          SchemaGrammar isg=(SchemaGrammar)importedGrammars.elementAt(j);          if (null2EmptyString(isg.getTargetNamespace()).equals(null2EmptyString(newGrammar.getTargetNamespace()))) {            if (isg != newGrammar) {              importedGrammars.set(j,newGrammar);            }            break;          }        }      }    }  }}  }
class C{  public static boolean isDark(@NonNull Bitmap bitmap,int backupPixelX,int backupPixelY){  Palette palette=Palette.from(bitmap).maximumColorCount(3).generate();  if (palette != null && palette.getSwatches().size() > 0) {    return isDark(palette) == IS_DARK;  } else {    return isDark(bitmap.getPixel(backupPixelX,backupPixelY));  }}  }
class C{  @Override public int[] unrank(){  if (k == 0)   return new int[0];  int[] combi=new int[k];  BigInteger rank=count.subtract(BigInteger.ONE).subtract(currentIndex);  BigInteger e=count.multiply(BigInteger.valueOf(n - k)).divide(BigInteger.valueOf(n));  int t=n - k + 1;  int m=k;  int p=n - 1;  do {    if (e.compareTo(rank) <= 0) {      combi[k - m]=n - t - m + 1;      if (e.compareTo(BigInteger.ZERO) > 0) {        rank=rank.subtract(e);        e=e.multiply(BigInteger.valueOf(m)).divide(BigInteger.valueOf(p));      }      m--;      p--;    } else {      e=e.multiply(BigInteger.valueOf(p - m)).divide(BigInteger.valueOf(p));      t--;      p--;    }  } while (m > 0);  return combi;}  }
class C{  public void addBottomResourceBundle(InternalRbmWrapper topInternalRbmWrapper){  this.rbmwStack.addToBottom(topInternalRbmWrapper);}  }
class C{  public boolean isValid(){  return wind != null && condition != null && !condition.isEmpty();}  }
class C{  public RequestHandle delete(String url,ResponseHandlerInterface responseHandler){  return delete(null,url,responseHandler);}  }
class C{  public static long convert(String stringValue){  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {    return (long)ColumnType.LONG_INT.getMissingValue();  }  Matcher matcher=COMMA_PATTERN.matcher(stringValue);  return Long.parseLong(matcher.replaceAll(""));}  }
class C{  @RequestMapping(value="/pets",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Pet> createPet(@RequestBody Pet pet) throws URISyntaxException {  log.debug("REST request to save Pet : {}",pet);  if (pet.getPetId() != null) {    return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("pet","idexists","A new pet cannot already have an ID")).body(null);  }  Pet result=petService.save(pet);  return ResponseEntity.created(new URI("/api/pets/" + result.getPetId())).headers(HeaderUtil.createEntityCreationAlert("pet",result.getPetId().toString())).body(result);}  }
class C{  private void applySpeechRateSpecifications(NodeList nl,String rateAttribute){  if ("".equals(rateAttribute)) {    return;  }  boolean hasLabel=rateAttribute.equals("x-slow") || rateAttribute.equals("slow") || rateAttribute.equals("medium")|| rateAttribute.equals("fast")|| rateAttribute.equals("x-fast")|| rateAttribute.equals("default");  if (hasLabel) {    rateAttribute=rateLabels2RelativeValues(rateAttribute);  }  if (!(rateAttribute.startsWith("+") || rateAttribute.startsWith("-")) && rateAttribute.endsWith("%")) {    double absolutePercentage=new Double(rateAttribute.substring(0,rateAttribute.length() - 1)).doubleValue();    if (absolutePercentage == 100) {      return;    } else {      rateAttribute=df.format(absolutePercentage / 100);    }  }  boolean hasPositiveInteger=!rateAttribute.endsWith("%") && (!rateAttribute.startsWith("+") || !rateAttribute.startsWith("-"));  if (hasPositiveInteger) {    rateAttribute=positiveInteger2RelativeValues(rateAttribute);  }  Pattern p=Pattern.compile("[+|-][0-9]+(.[0-9]+)?[%]?");  Matcher m=p.matcher(rateAttribute);  if (m.find()) {    double percentage=new Double(rateAttribute.substring(1,rateAttribute.length() - 1)).doubleValue();    if (rateAttribute.startsWith("+")) {      modifySpeechRate(nl,percentage,true);    } else {      modifySpeechRate(nl,percentage,false);    }  }}  }
class C{  @Override public void initTrigger(){  Calendar calendar=Calendar.getInstance();  calendar.set(Calendar.HOUR_OF_DAY,hour);  calendar.set(Calendar.MINUTE,minute);  calendar.set(Calendar.SECOND,second);  long delay=calendar.getTimeInMillis() - System.currentTimeMillis();  if (delay < 0) {    delay+=DAY_IN_MSEC;  }  ThreadPoolManager.getInstance().scheduleAtFixedRate(this,delay,DAY_IN_MSEC);}  }
class C{  public String print(String aClassName,String aFieldOrMtdSignature,Tag aTag){  return aTag.toString();}  }
class C{  @Override public void publish(String topic,byte[] payload) throws AWSIotException {  super.publish(topic,payload);}  }
class C{  @Override public LSSerializer createLSSerializer(){  try {    Class serializerClass=ObjectFactory.findProviderClass("org.apache.xml.serializer.dom3.LSSerializerImpl",ObjectFactory.findClassLoader(),true);    return (LSSerializer)serializerClass.newInstance();  } catch (  Exception e) {  }  return new DOMSerializerImpl();}  }
class C{  public AemDialog open(){  open(currentScope);  return this;}  }
class C{  public PhotosEditQuery placeStr(String value){  return unsafeParam("place_str",value);}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  boolean isZero(){  return _index <= 0;}  }
class C{  public MaxTask(Class<T> reduceType,Task<T> task,AsyncResultFilter<T> filter) throws IllegalArgumentException {  super(task,filter);  this.reducer=new MaxReducer<T>(reduceType);}  }
class C{  public boolean isPredefined(){  return predefined;}  }
class C{  public char nextClean(){  for (; ; ) {    char c=next();    if (c == 0 || c > ' ') {      return c;    }  }}  }
class C{  public AWSIotException(AWSIotDeviceErrorCode errorCode,String message){  super(message);  this.errorCode=errorCode;}  }
class C{  public synchronized BookKeeperClientBuilder ledgersPath(String ledgersPath){  this.ledgersPath=ledgersPath;  return this;}  }
class C{  @ObjectiveCName("typed:") public static String typed(Object value){  if (value instanceof String) {    return Types.STRING.toString() + value;  } else   if (value instanceof Number) {    return Types.NUMBER.toString() + value.toString();  } else   if (value instanceof Boolean) {    if ((Boolean)value) {      return Types.TRUE.toString();    } else {      return Types.FALSE.toString();    }  } else   if (value == null) {    return Types.NULL.toString();  } else {    Gson gson=new GsonBuilder().enableComplexMapKeySerialization().create();    return Types.OBJECT.toString() + gson.toJson(value);  }}  }
class C{  protected void notifyDataChangedEvent(){  if (datasetObservers != null) {    for (    DataSetObserver observer : datasetObservers) {      observer.onChanged();    }  }}  }
class C{  public RequestHandle delete(Context context,String url,Header[] headers,ResponseHandlerInterface responseHandler){  final HttpDelete delete=new HttpDelete(url);  if (headers != null)   delete.setHeaders(headers);  return sendRequest(httpClient,httpContext,delete,null,responseHandler,context);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  private boolean hasWrappedMethodsForClass(SootClass parentClass,boolean newTaints,boolean killTaints,boolean excludeTaints){  if (newTaints && classList.containsKey(parentClass.getName()))   return true;  if (excludeTaints && excludeList.containsKey(parentClass.getName()))   return true;  if (killTaints && killList.containsKey(parentClass.getName()))   return true;  return false;}  }
class C{  private JsonObject readDataSource(FeatureLayer featureLayer){  JsonObject jsonDataSourceObject=new JsonObject();  try {    IWorkspace workspace=featureLayer.getWorkspace();    jsonDataSourceObject.addProperty(DatasourceKeys.TYPE,workspace.getType());    jsonDataSourceObject.addProperty(DatasourceKeys.PATH,workspace.getPathName());    IPropertySet properties=workspace.getConnectionProperties();    Object[] keys=new Object[1];    Object[] values=new Object[1];    properties.getAllProperties(keys,values);    JsonObject jsonDataSourcePropertiesObject=new JsonObject();    for (int index=0; index < properties.getCount(); index++) {      String key=((Object[])keys[0])[index].toString();      String value=((Object[])values[0])[index].toString();      if (key.compareToIgnoreCase("PASSWORD") != 0) {        jsonDataSourcePropertiesObject.addProperty(key,value);      }    }    jsonDataSourceObject.add(DatasourceKeys.PROPERTIES,jsonDataSourcePropertiesObject);  } catch (  AutomationException e) {    System.out.println("Failed to connect to layer's data source so fields were not read");  }catch (  IOException e) {    System.out.println("Failed to connect to layer's data source so fields were not read");  }  return jsonDataSourceObject;}  }
class C{  boolean isUnitTypeEqual(int unitA,int unitB){  return units[unitA].type == units[unitB].type;}  }
class C{  @SuppressWarnings("restriction") public synchronized String decrypt(String str){  byte[] dec;  try {    dec=decoder.decodeBuffer(str);    byte[] utf8=decrypter.doFinal(dec);    return new String(utf8,"UTF-8");  } catch (  IOException e) {    e.printStackTrace();  }catch (  IllegalBlockSizeException e) {    e.printStackTrace();  }catch (  BadPaddingException e) {    e.printStackTrace();  }  return str;}  }
class C{  public Bundler putLongArray(String key,long[] value){  bundle.putLongArray(key,value);  return this;}  }
class C{  @Override protected void prepareBlock(){  double[] frame=getNextFrame();  if (frame == null)   return;  int frameLength=frameProvider.getFrameLengthSamples();  if (processor != null)   processor.applyInline(frame,0,frameLength);  if (outputWindow != null)   outputWindow.applyInline(frame,0,frameLength);  if (memory.length < frameLength) {    double[] oldMemory=memory;    memory=new double[frameLength];    System.arraycopy(oldMemory,0,memory,0,oldMemory.length);  }  for (int i=0; i < frameLength; i++) {    memory[i]+=frame[i];  }}  }
class C{  private synchronized void readProperties(){  try {    propertyFileURI=CatalogManager.class.getResource("/" + propertyFile);    InputStream in=CatalogManager.class.getResourceAsStream("/" + propertyFile);    if (in == null) {      if (!ignoreMissingProperties) {        System.err.println("Cannot find " + propertyFile);        ignoreMissingProperties=true;      }      return;    }    resources=new PropertyResourceBundle(in);  } catch (  MissingResourceException mre) {    if (!ignoreMissingProperties) {      System.err.println("Cannot read " + propertyFile);    }  }catch (  java.io.IOException e) {    if (!ignoreMissingProperties) {      System.err.println("Failure trying to read " + propertyFile);    }  }  if (verbosity == null) {    try {      String verbStr=resources.getString("verbosity");      int verb=Integer.parseInt(verbStr.trim());      debug.setDebug(verb);      verbosity=new Integer(verb);    } catch (    Exception e) {    }  }}  }
class C{  public <T>T inject(Class<T> clazz,WebElement scope,Object object){  return inject(clazz,scope,frameMap.get(object));}  }
class C{  public void acos(final double[] operand,final int operandOffset,final double[] result,final int resultOffset){  double[] function=new double[1 + order];  final double x=operand[operandOffset];  function[0]=FastMath.acos(x);  if (order > 0) {    final double[] p=new double[order];    p[0]=-1;    final double x2=x * x;    final double f=1.0 / (1 - x2);    double coeff=FastMath.sqrt(f);    function[1]=coeff * p[0];    for (int n=2; n <= order; ++n) {      double v=0;      p[n - 1]=(n - 1) * p[n - 2];      for (int k=n - 1; k >= 0; k-=2) {        v=v * x2 + p[k];        if (k > 2) {          p[k - 2]=(k - 1) * p[k - 1] + (2 * n - k) * p[k - 3];        } else         if (k == 2) {          p[0]=p[1];        }      }      if ((n & 0x1) == 0) {        v*=x;      }      coeff*=f;      function[n]=coeff * v;    }  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  protected void updateRoot(int pNum){  this.rootPageNum=pNum;  writeHeader();}  }
class C{  public AppsGetScoreQuery(VkApiClient client,UserActor actor,int userId){  super(client,"apps.getScore",Integer.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  private void createField(String key,String labelString){  int row=textFieldMap.size();  int y=row * ROW_HEIGHT;  JLabel label=new JLabel(labelString);  label.setBounds(LABEL_X,y,LABEL_WIDTH,FIELD_HEIGHT);  panel.add(label);  JTextField textField=new JTextField();  textField.setBounds(FIELD_X,y,FIELD_WIDTH,FIELD_HEIGHT);  textFieldMap.put(key,textField);  panel.add(textField);}  }
class C{  @Override public WebDriver frame(WebElement frameElement){  return targetLocator.frame(frameElement);}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public void enableDragItem(@NonNull ItemTouchHelper itemTouchHelper,int toggleViewId,boolean dragOnLongPress){  itemDragEnabled=true;  mItemTouchHelper=itemTouchHelper;  setToggleViewId(toggleViewId);  setToggleDragOnLongPress(dragOnLongPress);}  }
class C{  private int calculateTotalDictionaryChunkCountsToBeRead(List<CarbonDictionaryColumnMetaChunk> dictionaryChunkMetaList,long dictionaryChunkStartOffset,long dictionaryChunkEndOffset){  boolean chunkWithStartOffsetFound=false;  int dictionaryChunkCount=0;  for (  CarbonDictionaryColumnMetaChunk metaChunk : dictionaryChunkMetaList) {    if (!chunkWithStartOffsetFound && dictionaryChunkStartOffset == metaChunk.getStart_offset()) {      chunkWithStartOffsetFound=true;    }    if (chunkWithStartOffsetFound) {      dictionaryChunkCount=dictionaryChunkCount + metaChunk.getChunk_count();    }    if (dictionaryChunkEndOffset == metaChunk.getEnd_offset()) {      break;    }  }  return dictionaryChunkCount;}  }
class C{  public void tryVibrate(){  if (mVibrator != null && mIsGloballyEnabled) {    long now=SystemClock.uptimeMillis();    if (now - mLastVibrate >= VIBRATE_DELAY_MS) {      mVibrator.vibrate(VIBRATE_LENGTH_MS);      mLastVibrate=now;    }  }}  }
class C{  public static void addFailure(SoftAssertionError softAssertionError){  getFailures().add(softAssertionError);}  }
class C{  public boolean compare(Sample other){  if (frameData.length != other.getFrameData().length) {    return false;  }  for (int i=0; i < frameData.length; i++) {    if (frameData[i] != other.frameData[i]) {      return false;    }  }  if (residualData.length != other.residualData.length) {    return false;  }  for (int i=0; i < residualData.length; i++) {    if (residualData[i] != other.residualData[i]) {      return false;    }  }  return true;}  }
class C{  private void updateResizeHandlesPositions(ViewTransform viewTransform){  for (  ResizeHandle mResizeHandle : mResizeHandles) {    mResizeHandle.updatePosition(viewTransform);  }}  }
class C{  public IntervalsSet(final double tolerance){  super(tolerance);}  }
class C{  public MarketGetByIdQueryWithExtended(VkApiClient client,UserActor actor,String... itemIds){  super(client,"market.getById",GetByIdExtendedResponse.class);  accessToken(actor.getAccessToken());  itemIds(itemIds);  extended(true);}  }
class C{  public Vector multiply(float m){  x*=m;  y*=m;  z*=m;  return this;}  }
class C{  public GroupsIsMemberQuery(VkApiClient client,String groupId){  super(client,"groups.isMember",BoolInt.class);  groupId(groupId);}  }
class C{  public OPCHardwareAddressImpl(final String pItemName) throws ConfigurationException {  this(pItemName,0);}  }
class C{  public Builder removeColumns(Collection<String> columnNames){  return transform(new RemoveColumnsTransform(columnNames.toArray(new String[columnNames.size()])));}  }
class C{  public Vector minus(Vector other){  return new Vector(x - other.x,y - other.y);}  }
class C{  public static float calcDistanceFromPlayerToPosition(EntityPlayerSP player,Pos targetPos){  double x=player.posX - targetPos.getX().doubleValue();  double y=player.posY - targetPos.getY().doubleValue();  double z=player.posZ - targetPos.getZ().doubleValue();  return (float)Math.sqrt(x * x + y * y + z * z);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ShapeChange_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200865,skillcaster,value0,skillname);}  }
class C{  public RealMatrix covarianceToCorrelation(RealMatrix covarianceMatrix){  int nVars=covarianceMatrix.getColumnDimension();  RealMatrix outMatrix=new BlockRealMatrix(nVars,nVars);  for (int i=0; i < nVars; i++) {    double sigma=FastMath.sqrt(covarianceMatrix.getEntry(i,i));    outMatrix.setEntry(i,i,1d);    for (int j=0; j < i; j++) {      double entry=covarianceMatrix.getEntry(i,j) / (sigma * FastMath.sqrt(covarianceMatrix.getEntry(j,j)));      outMatrix.setEntry(i,j,entry);      outMatrix.setEntry(j,i,entry);    }  }  return outMatrix;}  }
class C{  public TypeVariable typeVariable(TypeNode typeNode){  TypeVariable result=typeVariableMap.get(typeNode);  if (result == null) {    int id=typeVariableList.size();    typeVariableList.add(null);    result=new TypeVariable(id,this,typeNode);    typeVariableList.set(id,result);    typeVariableMap.put(typeNode,result);  }  return result;}  }
class C{  public Matrix arrayLeftDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=B.A[i][j] / A[i][j];    }  }  return this;}  }
class C{  public UsersGetFollowersQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public boolean isExtensible(){  return proto.getExtensionRangeCount() != 0;}  }
class C{  protected MarketAddQuery description(String value){  return unsafeParam("description",value);}  }
class C{  public void fitScreen(){  Matrix save=mViewPortHandler.fitScreen();  mViewPortHandler.refresh(save,this,false);  calculateOffsets();  postInvalidate();}  }
class C{  private void determineProsodicSettings(Document doc){  NodeList prosodies=doc.getElementsByTagName(MaryXML.PROSODY);  for (int i=0; i < prosodies.getLength(); i++) {    Element prosody=(Element)prosodies.item(i);    determineProsodicSettings(prosody);  }}  }
class C{  public NestedSelectorScopedLocatorFactory(SearchContext searchContext,By selector,ElementLocatorFactory parentFactory,boolean globalCurrenScope){  this.searchContext=searchContext;  this.selector=selector;  this.parentFactory=parentFactory;  this.globalCurrenScope=globalCurrenScope;}  }
class C{  static Object newInstance(String className,ClassLoader cl,boolean doFallback) throws ConfigurationError {  try {    Class providerClass=findProviderClass(className,cl,doFallback);    Object instance=providerClass.newInstance();    if (DEBUG)     debugPrintln("created new instance of " + providerClass + " using ClassLoader: "+ cl);    return instance;  } catch (  ClassNotFoundException x) {    throw new ConfigurationError("Provider " + className + " not found",x);  }catch (  Exception x) {    throw new ConfigurationError("Provider " + className + " could not be instantiated: "+ x,x);  }}  }
class C{  public static <T>CopyOnWriteArraySet<T> copyOnWriteArraySet(){  return new CopyOnWriteArraySet<T>();}  }
class C{  public boolean contains(R rowKey,C columnKey){  if (rowKey == null || columnKey == null)   return false;  Map<C,V> row=dataMap.get(rowKey);  return row != null && row.containsKey(columnKey);}  }
class C{  public static String toDateTimeString(java.util.Date date){  if (date == null)   return "";  String dateString=toDateString(date);  String timeString=toTimeString(date);  if (dateString != null && timeString != null) {    return dateString + " " + timeString;  } else {    return "";  }}  }
class C{  public DeferredFileOutputStream(int threshold,File outputFile){  this(threshold,outputFile,null,null,null);}  }
class C{  public AutoIncrementer(){  this.nextId=0;}  }
class C{  public AuthCheckPhoneQuery(VkApiClient client,String phone,String clientSecret){  super(client,"auth.checkPhone",OkResponse.class);  phone(phone);  clientSecret(clientSecret);}  }
class C{  public void createPage(String title,String name,String exactTemplateName){  typeTitle(title);  typeName(name);  selectTemplate(exactTemplateName);  confirm();}  }
class C{  public DataStorage(Object store){  if (store instanceof DataProvider)   _saDataProvider=(DataProvider<T>)store; else   _saDataProvider=null;  if (store instanceof DataPersister)   _saDataPersister=(DataPersister<T>)store; else   _saDataPersister=null;  if (store instanceof SQLDataProvider)   _saSQLDataProvider=(SQLDataProvider<T>)store; else   _saSQLDataProvider=null;  if (store instanceof BulkDataPersister)   _saBulkDataPersister=(BulkDataPersister)store; else   _saBulkDataPersister=null;  if (store instanceof ManagedDataSource)   _saManagedDataSource=(ManagedDataSource)store; else   _saManagedDataSource=null;  if (_logger.isLoggable(Level.CONFIG)) {    _logger.config("\n\t Space Data Storage <" + store + "> Loaded"+ "\n\t\t "+ DataProvider.class.getSimpleName()+ "              : "+ (isDataProvider() ? "Implemented" : "-")+ "\n\t\t "+ DataPersister.class.getSimpleName()+ "             : "+ (isDataPersister() ? "Implemented" : "-")+ "\n\t\t "+ BulkDataPersister.class.getSimpleName()+ "         : "+ (isBulkDataPersister() ? "Implemented" : "-")+ "\n\t\t "+ SQLDataProvider.class.getSimpleName()+ "           : "+ (isSQLDataProvider() ? "Implemented" : "-")+ "\n\t\t "+ ManagedDataSource.class.getSimpleName()+ "         : "+ (isManagedDataSource() ? "Implemented" : "-")+ "\n");  }}  }
class C{  protected AppsGetLeaderboardQuery type(AppsGetLeaderboardType value){  return unsafeParam("type",value);}  }
class C{  public static Tailer create(File file,TailerListener listener,long delayMillis,boolean end,boolean reOpen,int bufSize){  Tailer tailer=new Tailer(file,listener,delayMillis,end,reOpen,bufSize);  Thread thread=new Thread(tailer);  thread.setDaemon(true);  thread.start();  return tailer;}  }
class C{  @Override public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  makeChildNode();  CoreDocumentImpl ownerDocument=ownerDocument();  ownerDocument.replacingNode(this);  internalInsertBefore(newChild,oldChild,true);  if (newChild != oldChild) {    internalRemoveChild(oldChild,true);  }  ownerDocument.replacedNode(this);  return oldChild;}  }
class C{  public AemListItem up(){  buttonUp.click();  return this;}  }
class C{  public final short readLEShort(byte[] byteArray){  return (short)((byteArray[1] & 0xff) << 8 | (byteArray[0] & 0xff));}  }
class C{  public MbrolaVoice(String databaseDirectory,String database,float rate,float pitch,float range,String name,Gender gender,Age age,String description,Locale locale,String domain,String organization,CMULexicon lexicon){  super(name,gender,age,description,locale,domain,organization,lexicon);  setRate(rate);  setPitch(pitch);  setPitchRange(range);  this.databaseDirectory=databaseDirectory;  this.database=database;}  }
class C{  public ThetaSketchSetOperationPostAggregation withFunc(SketchSetOperationPostAggFunction func){  return new ThetaSketchSetOperationPostAggregation(getName(),func,getFields(),getSize());}  }
class C{  protected void performOutgoingBehavior(ExecutionEntity execution,boolean checkConditions,boolean throwExceptionIfExecutionStuck){  Context.getAgenda().planTakeOutgoingSequenceFlowsOperation(execution,true);}  }
class C{  public void tag(DataFrame input,String outputFileName,OutputFormat outputFormat){  long tic=System.currentTimeMillis();  long duration=0;  if (cmmModel != null) {    DataFrame output=cmmModel.transform(input).repartition(1);    duration=System.currentTimeMillis() - tic;switch (outputFormat) {case JSON:      output.write().json(outputFileName);    break;case PARQUET:  output.write().parquet(outputFileName);break;case TEXT:toTaggedSentence(output).repartition(1).saveAsTextFile(outputFileName);break;}} else {System.err.println("Tagging model is null. You need to create or load a model first.");}if (verbose) {long n=input.count();System.out.println(" Number of sentences = " + n);System.out.println("  Total tagging time = " + duration + " milliseconds.");System.out.println("Average tagging time = " + ((float)duration) / n + " milliseconds.");}}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public String featureEqualsAnalyse(FeatureDefinition other){  if (numByteFeatures != other.numByteFeatures) {    return ("The number of BYTE features differs: " + numByteFeatures + " versus "+ other.numByteFeatures);  }  if (numShortFeatures != other.numShortFeatures) {    return ("The number of SHORT features differs: " + numShortFeatures + " versus "+ other.numShortFeatures);  }  if (numContinuousFeatures != other.numContinuousFeatures) {    return ("The number of CONTINUOUS features differs: " + numContinuousFeatures + " versus "+ other.numContinuousFeatures);  }  for (int i=0; i < numByteFeatures + numShortFeatures + numContinuousFeatures; i++) {    if (!getFeatureName(i).equals(other.getFeatureName(i))) {      return ("The feature name differs at position [" + i + "]: "+ getFeatureName(i)+ " versus "+ other.getFeatureName(i));    }  }  for (int i=0; i < numByteFeatures + numShortFeatures; i++) {    if (getNumberOfValues(i) != other.getNumberOfValues(i)) {      return ("The number of values differs at position [" + i + "]: "+ getNumberOfValues(i)+ " versus "+ other.getNumberOfValues(i));    }    for (int v=0, n=getNumberOfValues(i); v < n; v++) {      if (!getFeatureValueAsString(i,v).equals(other.getFeatureValueAsString(i,v))) {        return ("The feature value differs at position [" + i + "] for feature value ["+ v+ "]: "+ getFeatureValueAsString(i,v)+ " versus "+ other.getFeatureValueAsString(i,v));      }    }  }  return "";}  }
class C{  public String toString(){  return image;}  }
class C{  private void decode(byte[] data,int width,int height){  Size size=activity.getCameraManager().getPreviewSize();  byte[] rotatedData=new byte[data.length];  for (int y=0; y < size.height; y++) {    for (int x=0; x < size.width; x++)     rotatedData[x * size.height + size.height - y - 1]=data[x + y * size.width];  }  int tmp=size.width;  size.width=size.height;  size.height=tmp;  Result rawResult=null;  PlanarYUVLuminanceSource source=buildLuminanceSource(rotatedData,size.width,size.height);  if (source != null) {    BinaryBitmap bitmap=new BinaryBitmap(new HybridBinarizer(source));    try {      rawResult=multiFormatReader.decodeWithState(bitmap);    } catch (    ReaderException re) {    } finally {      multiFormatReader.reset();    }  }  Handler handler=activity.getHandler();  if (rawResult != null) {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_succeeded,rawResult);      Bundle bundle=new Bundle();      bundleThumbnail(source,bundle);      message.setData(bundle);      message.sendToTarget();    }  } else {    if (handler != null) {      Message message=Message.obtain(handler,R.id.decode_failed);      message.sendToTarget();    }  }}  }
class C{  @Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){  super.onRequestPermissionsResult(requestCode,permissions,grantResults);  contentManager.onRequestPermissionsResult(requestCode,permissions,grantResults);}  }
class C{  public boolean isCritical(){  return false;}  }
class C{  public static DirectCallExecutor newExecutor(){  return NEVER_PAUSING_EXECUTOR;}  }
class C{  private static void groupCorrespodingInfoBasedOnTask(TableBlockInfo info,TaskBlockInfo taskBlockMapping,String taskNo){  List<TableBlockInfo> blockLists=taskBlockMapping.getTableBlockInfoList(taskNo);  if (null != blockLists) {    blockLists.add(info);  } else {    blockLists=new ArrayList<>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);    blockLists.add(info);    taskBlockMapping.addTableBlockInfoList(taskNo,blockLists);  }}  }
class C{  static Flake createFlake(float xRange,Bitmap originalBitmap,Context Context){  Flake flake=new Flake();  DisplayMetrics metrics=DvAppUtil.getDisplayMetrics(Context);  if (metrics.widthPixels >= 1080) {    flake.width=(int)(5 + (float)Math.random() * 80);    float hwRatio=originalBitmap.getHeight() / originalBitmap.getWidth();    flake.height=(int)(flake.width * hwRatio + 60);  } else {    flake.width=(int)(5 + (float)Math.random() * 50);    float hwRatio=originalBitmap.getHeight() / originalBitmap.getWidth();    flake.height=(int)(flake.width * hwRatio + 40);  }  flake.x=(float)Math.random() * (xRange - flake.width);  flake.y=0 - (flake.height + (float)Math.random() * flake.height);  flake.speed=50 + (float)Math.random() * 150;  flake.rotation=(float)Math.random() * 180 - 90;  flake.rotationSpeed=(float)Math.random() * 90 - 45;  flake.bitmap=bitmapMap.get(flake.width);  if (flake.bitmap == null) {    flake.bitmap=Bitmap.createScaledBitmap(originalBitmap,(int)flake.width,(int)flake.height,true);    bitmapMap.put(flake.width,flake.bitmap);  }  return flake;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  FriendDao.createTable(db,ifNotExists);  GroupsDao.createTable(db,ifNotExists);  BlackListDao.createTable(db,ifNotExists);  GroupMemberDao.createTable(db,ifNotExists);}  }
class C{  public ThreadQueue(int iMax){  Max=iMax;  qThreads=new LinkedList();}  }
class C{  public ZWaveNodeNamingCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  static public int ceil(float value){  return (int)(value + BIG_ENOUGH_CEIL) - BIG_ENOUGH_INT;}  }
class C{  @Deployment public void testDoubleNestedSimpleSubProcess(){  ProcessInstance pi=runtimeService.startProcessInstanceByKey("nestedSimpleSubProcess");  Task subProcessTask=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();  assertEquals("Task in subprocess",subProcessTask.getName());  taskService.complete(subProcessTask.getId());  Task taskAfterSubProcesses=taskService.createTaskQuery().processInstanceId(pi.getId()).singleResult();  assertEquals("Task after subprocesses",taskAfterSubProcesses.getName());}  }
class C{  public SM_MAIL_SERVICE(MailMessage mailMessage){  super(null);  this.serviceId=1;  this.mailMessage=mailMessage.getId();}  }
class C{  @Override public void write(DataOutput out) throws IOException {  out.writeLong(duration);  out.writeInt(getLength());  for (int i=0; i < quantizedCoeffs.length; i++) {    out.writeShort(quantizedCoeffs[i]);  }  out.write(quantizedResidual);}  }
class C{  public void dumpASCII(String path) throws IOException {  Writer writer=new FileWriter(path,true);  getWave().dump(writer);}  }
class C{  public void sendNoMsgToTarget(Object target){  sendToTargetOrType(target.getClass(),null);}  }
class C{  private void initPresenter(){  this.toolbarPresenter=new ToolbarImplementor();  this.popupManageImplementor=new HomeFragmentPopupManageImplementor(this);  this.pagerManagePresenter=new PagerManageImplementor(pagerManageModel,this);}  }
class C{  public DOMImplementationListImpl(ArrayList params){  fImplementations=params;}  }
class C{  public AudioEditQuery noSearch(Boolean value){  return unsafeParam("no_search",value);}  }
class C{  public void init(){  ProcessConfiguration processConfiguration=configurationController.getProcessConfiguration();  log.debug("Setting ActiveMessageReceiver listener destination to {}",processConfiguration.getJmsDaqCommandQueue());  listenerContainer.setMessageListener(this);  listenerContainer.setDestination(new ActiveMQQueue(processConfiguration.getJmsDaqCommandQueue()));  listenerContainer.initialize();  listenerContainer.start();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_STIGMA_AFTER_UNEQUIP_STONE_YOU_CAN_USE_THIS_SKILL_LEVEL_BY_OTHER_STONE(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300402,value0,value1);}  }
class C{  private Granularity generateGranularity(String granularity,DateTimeZone dateTimeZone) throws DeserializationException {  try {    return granularityParser.parseGranularity(granularity,dateTimeZone);  } catch (  GranularityParseException e) {    String msg=ErrorMessageFormat.GRANULARITY_PARSING_ERROR.format(granularity);    LOG.error(msg,e);    throw new DeserializationException(msg,e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_BUDDY_REQUEST_TO_ADD(String value0){  return new SM_SYSTEM_MESSAGE(1300911,value0);}  }
class C{  public static boolean writeFile(String filePath,String content){  return writeFile(filePath,content,false);}  }
class C{  public PollsCreateQuery addAnswers(String value){  return unsafeParam("add_answers",value);}  }
class C{  public Set<C> columnKeySet(){  Set<C> set=new HashSet<>();  for (  Map<C,V> row : dataMap.values()) {    set.addAll(row.keySet());  }  return set;}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  protected MarketReportCommentQuery reason(ReportReason value){  return unsafeParam("reason",value);}  }
class C{  @Nullable public byte[] findClassDefinition(@NotNull String name,@NotNull AppResourceRepository appRepo){  int index=name.lastIndexOf('.');  if (index != -1 && name.charAt(index + 1) == 'R' && (index == name.length() - 2 || name.charAt(index + 2) == '$') && index > 1) {    String pkg=name.substring(0,index);    if (myPackages != null && myPackages.contains(pkg)) {      AarResourceClassGenerator generator=myGeneratorMap.get(appRepo);      if (generator != null) {        return generator.generate(name);      }    }  }  return null;}  }
class C{  public NewsfeedSearchQueryWithExtended q(String value){  return unsafeParam("q",value);}  }
class C{  public void increaseReceiveFinishEventCount(){  this.nReceiveFinishEventCount++;}  }
class C{  private boolean normalizeAttrValue(XMLAttributes attributes,int index){  boolean leadingSpace=true;  boolean spaceStart=false;  boolean readingNonSpace=false;  int count=0;  int eaten=0;  String attrValue=attributes.getValue(index);  char[] attValue=new char[attrValue.length()];  fBuffer.setLength(0);  attrValue.getChars(0,attrValue.length(),attValue,0);  for (int i=0; i < attValue.length; i++) {    if (attValue[i] == ' ') {      if (readingNonSpace) {        spaceStart=true;        readingNonSpace=false;      }      if (spaceStart && !leadingSpace) {        spaceStart=false;        fBuffer.append(attValue[i]);        count++;      } else {        if (leadingSpace || !spaceStart) {          eaten++;        }      }    } else {      readingNonSpace=true;      spaceStart=false;      leadingSpace=false;      fBuffer.append(attValue[i]);      count++;    }  }  if (count > 0 && fBuffer.charAt(count - 1) == ' ') {    fBuffer.setLength(count - 1);  }  String newValue=fBuffer.toString();  attributes.setValue(index,newValue);  return !attrValue.equals(newValue);}  }
class C{  public static RequestQueue newRequestQueue(Context context,String assetFile) throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, KeyManagementException {  return newRequestQueue(context,DEFAULT_CA_TYPE,assetFile);}  }
class C{  private void init(){  InputStream in=null;  props=new Properties();  try {    URI uri=getClass().getClassLoader().getResource(PROPERTY_FILE_NAME).toURI();    File file=new File(uri);    in=new FileInputStream(file);    props.load(in);  } catch (  IOException e) {    e.printStackTrace();  }catch (  URISyntaxException e) {    e.printStackTrace();  } finally {    CarbonUtil.closeStreams(in);  }}  }
class C{  public void removeAllBodiesAndJoints(boolean notify){  List<DestructionListener> listeners=null;  if (notify) {    listeners=this.getListeners(DestructionListener.class);  }  int bsize=this.bodies.size();  for (int i=0; i < bsize; i++) {    Body body=this.bodies.get(i);    body.joints.clear();    if (notify) {      Iterator<ContactEdge> aIterator=body.contacts.iterator();      while (aIterator.hasNext()) {        ContactEdge contactEdge=aIterator.next();        Body other=contactEdge.other;        ContactConstraint contactConstraint=contactEdge.interaction;        Iterator<ContactEdge> bIterator=other.contacts.iterator();        while (bIterator.hasNext()) {          ContactEdge otherContactEdge=bIterator.next();          ContactConstraint otherContactConstraint=otherContactEdge.interaction;          if (otherContactConstraint == contactConstraint) {            bIterator.remove();            break;          }        }        List<Contact> contacts=contactConstraint.getContacts();        int csize=contacts.size();        for (int j=0; j < csize; j++) {          Contact contact=contacts.get(j);          ContactPoint contactPoint=new ContactPoint(new ContactPointId(contactConstraint.getId(),contact.getId()),contactConstraint.getBody1(),contactConstraint.getFixture1(),contactConstraint.getBody2(),contactConstraint.getFixture2(),contact.getPoint(),contactConstraint.getNormal(),contact.getDepth());          for (          DestructionListener dl : listeners) {            dl.destroyed(contactPoint);          }        }      }      for (      DestructionListener dl : listeners) {        dl.destroyed(body);      }    }    body.contacts.clear();    body.world=null;  }  if (notify) {    int jsize=this.joints.size();    for (int i=0; i < jsize; i++) {      Joint joint=this.joints.get(i);      for (      DestructionListener dl : listeners) {        dl.destroyed(joint);      }    }  }  this.broadphaseDetector.clear();  this.joints.clear();  this.bodies.clear();  this.contactManager.clear();}  }
class C{  private void drStToWords(WordRelation wordRelation,Item tokenItem,String drStString){  String street=null;  String saint=null;  char c0=drStString.charAt(0);  if (c0 == 's' || c0 == 'S') {    street="street";    saint="saint";  } else {    street="drive";    saint="doctor";  }  FeatureSet featureSet=tokenItem.getFeatures();  String punctuation=featureSet.getString("punc");  String featPunctuation=(String)tokenItem.findFeature("punc");  if (tokenItem.getNext() == null || punctuation.indexOf(',') != -1) {    wordRelation.addWord(tokenItem,street);  } else   if (featPunctuation.equals(",")) {    wordRelation.addWord(tokenItem,saint);  } else {    String pName=(String)tokenItem.findFeature("p.name");    String nName=(String)tokenItem.findFeature("n.name");    char p0=pName.charAt(0);    char n0=nName.charAt(0);    if (isUppercaseLetter(p0) && isLowercaseLetter(n0)) {      wordRelation.addWord(tokenItem,street);    } else     if (NumberExpander.isDigit(p0) && isLowercaseLetter(n0)) {      wordRelation.addWord(tokenItem,street);    } else     if (isLowercaseLetter(p0) && isUppercaseLetter(n0)) {      wordRelation.addWord(tokenItem,saint);    } else {      String whitespace=(String)tokenItem.findFeature("n.whitespace");      if (whitespace.equals(" ")) {        wordRelation.addWord(tokenItem,saint);      } else {        wordRelation.addWord(tokenItem,street);      }    }  }  if (punctuation != null && punctuation.equals(".")) {    featureSet.setString("punc","");  }}  }
class C{  public CascadedTable(Table parent,Predicate rowFilter){  this(parent,rowFilter,null);}  }
class C{  @Override public void run(){  try {    AudioSystem.write(m_audioInputStream,m_targetType,m_outputFile);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public UnitSelector() throws Exception {}  }
class C{  public boolean isComplete(){  return complete;}  }
class C{  @Override public void startDocument() throws SAXException {  litePalAttr=LitePalAttr.getInstance();  litePalAttr.getClassNames().clear();}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  private int visitNodesRec(Node v,EdgeMap<Integer> edgeWeights){  int maxValue=0;  for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {    if (edgeWeights.get(e) == null) {      edgeWeights.set(e,visitNodesRec(e.getTarget(),edgeWeights) + (Integer)e.getInfo());    }    maxValue=Math.max(maxValue,edgeWeights.get(e));  }  return maxValue;}  }
class C{  public static Temp create(String name){  Temp t=new Temp();  t.name=name;  t.id=UID.id(System.currentTimeMillis(),UID.random());  t.file=get(t.id,name);  if (t.file.exists()) {    t.file.delete();  } else {    t.file.getParentFile().mkdirs();  }  return t;}  }
class C{  private void close(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   this.supportFinishAfterTransition(); else   finish();}  }
class C{  public Draw(GuiScreen gui,float partialTicks){  super(gui);  this.partialTicks=partialTicks;}  }
class C{  public static JSON from(String jsonString){  Assert.notNull("jsonString",jsonString);  return new JSON(jsonString);}  }
class C{  private void parseAndAdd(String line,BufferedReader reader){  try {    StringTokenizer tokenizer=new StringTokenizer(line," ");    String tag=tokenizer.nextToken();    if (tag.equals("NAME")) {      name=tokenizer.nextToken();    } else     if (tag.equals("SAMPLE_RATE")) {      sampleRate=Integer.parseInt(tokenizer.nextToken());    } else     if (tag.equals("NUM_CHANNELS")) {      numChannels=Integer.parseInt(tokenizer.nextToken());    } else     if (tag.equals("LPC_MIN")) {      lpcMin=Float.parseFloat(tokenizer.nextToken());    } else     if (tag.equals("COEFF_MIN")) {      lpcMin=Float.parseFloat(tokenizer.nextToken());    } else     if (tag.equals("COEFF_RANGE")) {      lpcRange=Float.parseFloat(tokenizer.nextToken());    } else     if (tag.equals("LPC_RANGE")) {      lpcRange=Float.parseFloat(tokenizer.nextToken());    } else     if (tag.equals("DIPHONE")) {      String name=tokenizer.nextToken();      int start=Integer.parseInt(tokenizer.nextToken());      int mid=Integer.parseInt(tokenizer.nextToken());      int end=Integer.parseInt(tokenizer.nextToken());      int numSamples=(end - start);      int midPoint=mid - start;      if (numChannels <= 0) {        throw new Error("Bad number of channels " + numChannels);      }      if (numSamples <= 0) {        throw new Error("Bad number of samples " + numSamples);      }      Sample[] samples=new Sample[numSamples];      for (int i=0; i < samples.length; i++) {        samples[i]=new Sample(reader,numChannels);        assert samples[i].getFrameData().length == numChannels;      }      Diphone diphone=new Diphone(name,samples,midPoint);      add(diphone);    } else {      throw new Error("Unsupported tag " + tag);    }  } catch (  NoSuchElementException nse) {    throw new Error("Error parsing db " + nse.getMessage());  }catch (  NumberFormatException nfe) {    throw new Error("Error parsing numbers in db " + nfe.getMessage());  }}  }
class C{  public CreatePageWindow typeTitle(String title){  titleField.setValue(title);  return this;}  }
class C{  public boolean evaluateStep(final ODEStateInterpolator interpolator) throws MathIllegalArgumentException, MathIllegalStateException {  forward=interpolator.isForward();  final ODEStateAndDerivative s1=interpolator.getCurrentState();  final double t1=s1.getTime();  final double dt=t1 - t0;  if (FastMath.abs(dt) < convergence) {    return false;  }  final int n=FastMath.max(1,(int)FastMath.ceil(FastMath.abs(dt) / maxCheckInterval));  final double h=dt / n;  double ta=t0;  double ga=g0;  for (int i=0; i < n; ++i) {    final double tb=(i == n - 1) ? t1 : t0 + (i + 1) * h;    final double gb=handler.g(interpolator.getInterpolatedState(tb));    if (gb == 0.0 || (g0Positive ^ (gb > 0))) {      if (findRoot(interpolator,ta,ga,tb,gb)) {        return true;      }    } else {      ta=tb;      ga=gb;    }  }  pendingEvent=false;  pendingEventTime=Double.NaN;  return false;}  }
class C{  @Override public boolean isFullyComposed(){  return fFullyComposed;}  }
class C{  public NoSuchNameException(){  super();}  }
class C{  public static String toString(Object o) throws JSONException {  return toString(o,null);}  }
class C{  private void postInit(){  isConnected=NetworkUtil.getConnectivityStatus(mContext);  LayoutInflater.from(mContext).inflate(R.layout.layout_flow,this);  contentView=(FrameLayout)findViewById(R.id.content_view);  emptyView=(FrameLayout)findViewById(R.id.empty_view);  progressView=(FrameLayout)findViewById(R.id.progress_view);  connectivityView=(FrameLayout)findViewById(R.id.connectivity_view);  inflateLayouts();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostHealEffect_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200690,skillcaster,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_ARTIFACT_LOSE_FORT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1390209,value0,value1);}  }
class C{  private void readColumnSortInfo() throws IOException {  init();  try {    columnSortInfo=(ColumnSortInfo)dictionarySortIndexThriftReader.read();  } catch (  IOException ie) {    LOGGER.error(ie,"problem while reading the column sort info.");    throw new IOException("problem while reading the column sort info.",ie);  } finally {    if (null != dictionarySortIndexThriftReader) {      dictionarySortIndexThriftReader.close();    }  }}  }
class C{  private void removeTemplateFromCache(ITemplateHolder template){  TemplateCacheInfo pTemplate=_templatesManager.remove(template.getUID());  if (pTemplate == null)   return;  boolean extendedMatch=pTemplate.m_TemplateHolder.getExtendedMatchCodes() != null;  IObjectInfo<TemplateCacheInfo> oi=null;  IStoredList<TemplateCacheInfo> templates;  int refpos=0;  TypeData typeData=_typeDataMap.get(template.getServerTypeDesc());  boolean anyIndexes=false;  TypeDataIndex[] indexes=typeData.getIndexes();  for (  TypeDataIndex index : indexes) {    if (index.getIndexCreationNumber() > pTemplate.getLatestIndexCreationNumber())     continue;    if (index.isCompound())     continue;    anyIndexes=true;    break;  }  if (template.getUidToOperateBy() == null) {    if (!anyIndexes) {      refpos=removeNonIndexedTemplate(pTemplate,extendedMatch,typeData);    } else {      refpos=TypeDataIndex.removeIndexedTemplate(pTemplate,extendedMatch,oi,refpos,typeData);    }  } else {    oi=pTemplate.m_BackRefs.get(0);    if (pTemplate.m_TemplateHolder.isNotifyTemplate())     templates=typeData.getNotifyUidTemplates().get(pTemplate.m_TemplateHolder.getUidToOperateBy()); else     templates=typeData.getReadTakeUidTemplates().get(pTemplate.m_TemplateHolder.getUidToOperateBy());    templates.remove(oi);  }  if (template.isNotifyTemplate())   typeData.decM_NumRegularNotifyTemplatesStored();  pTemplate.m_BackRefs.clear();  _leaseManager.unregister(pTemplate,pTemplate.m_TemplateHolder.getExpirationTime());  if (pTemplate.m_TemplateHolder.getXidOriginated() != null) {    XtnData pXtn=pTemplate.m_TemplateHolder.getXidOriginated().getXtnData();    if (pXtn != null) {      if (pTemplate.m_TemplateHolder.isNotifyTemplate())       pXtn.getNTemplates().removeByObject(pTemplate); else       pXtn.getRTTemplates().removeByObject(pTemplate);    }  }  if (template.isFifoGroupPoll())   _fifoGroupCacheImpl.decrementNumOfTemplates();}  }
class C{  @AfterClass public void afterClass(){  toCleanUp.add(experiment);}  }
class C{  public EmptyBucketUserAssignmentToEmptyBucket(){  setResponseLogLengthLimit(1000);  experiment=ExperimentFactory.createExperiment();  DefaultNameExclusionStrategy experimentComparisonStrategy=new DefaultNameExclusionStrategy("creationTime","modificationTime","ruleJson");  experiment.setSerializationStrategy(experimentComparisonStrategy);}  }
class C{  public static boolean contentEquals(Reader input1,Reader input2) throws IOException {  input1=toBufferedReader(input1);  input2=toBufferedReader(input2);  int ch=input1.read();  while (EOF != ch) {    int ch2=input2.read();    if (ch != ch2) {      return false;    }    ch=input1.read();  }  int ch2=input2.read();  return ch2 == EOF;}  }
class C{  public void endSubreport(String subreport){  currentTest.get().endSubreport(subreport);}  }
class C{  private void startWaveNorthernShieldGenerator1(){  sp(233726,174.50981f,251.38982f,292.43088f,(byte)0,1000,"NorthernShieldGenerator1");  sp(233727,174.9973f,254.4739f,292.3325f,(byte)0,1000,"NorthernShieldGenerator2");  sp(233857,174.84029f,257.80832f,292.4389f,(byte)0,1000,"NorthernShieldGenerator3");}  }
class C{  public final String toJson(){  return getGson().toJson(this);}  }
class C{  public void addChangeListener(ChangeListener changeListener){  this.listenerList.add(ChangeListener.class,changeListener);}  }
class C{  @Override public void onLoad(boolean viewRecreated){  super.onLoad(viewRecreated);}  }
class C{  @Override public byte[] asBytes(int rowNumber){  return ByteBuffer.allocate(8).putLong(getLong(rowNumber)).array();}  }
class C{  public int hashCode(){  return hashCode;}  }
class C{  public void addSuperInterfaceId(Access node){  List<Access> list=(parent == null || state == null) ? getSuperInterfaceIdListNoTransform() : getSuperInterfaceIdList();  list.addChild(node);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200822,skillcaster,num0,skillname);}  }
class C{  protected void addXML11Component(XMLComponent component){  if (fXML11Components.contains(component)) {    return;  }  fXML11Components.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public Foonalasys(){  jt=new JavaTranslator();  debug("Translating classes to intermediate form...");  Method[] methods=jt.translateApplicationClasses();  for (  Method m : methods) {    System.out.println("Method: " + m.getName() + ":");    Collection<Statement> stmts=m.getEntry().getSuccs();    printStmts(stmts);    System.out.println("------------------------");  }  debug("Foonalasys done");}  }
class C{  public void upload(File file,long restartAt) throws IllegalStateException, FileNotFoundException, IOException, FTPIllegalReplyException, FTPException, FTPDataTransferException, FTPAbortedException {  upload(file,restartAt,null);}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  @Override public String toString(){  final StringBuilder builder=new StringBuilder(32);  builder.append("Vm []");  return builder.toString();}  }
class C{  public boolean hasValueBeenUpdated(int row,int column){  if (column == COL_STYLE) {    GeoServerLayer layer=getLayer(row);    return layerMap.get(layer);  }  return false;}  }
class C{  public static <T extends DataSupport>void markAsDeleted(Collection<T> collection){  for (  T t : collection) {    t.clearSavedState();  }}  }
class C{  public BoardGetTopicsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  protected File[] filterDirectoryContents(File directory,int depth,File[] files) throws IOException {  return files;}  }
class C{  public void java_lang_ClassLoader_findLoadedClass(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getClassObject());}  }
class C{  public SimpleSimilarity(double dInit){  Simil=Double.valueOf(dInit);}  }
class C{  protected void drawHorizontalBezier(Canvas c,ILineDataSet dataSet){  Transformer trans=mChart.getTransformer(dataSet.getAxisDependency());  int entryCount=dataSet.getEntryCount();  Entry entryFrom=dataSet.getEntryForXIndex((mMinX < 0) ? 0 : mMinX,DataSet.Rounding.DOWN);  Entry entryTo=dataSet.getEntryForXIndex(mMaxX,DataSet.Rounding.UP);  int diff=(entryFrom == entryTo) ? 1 : 0;  int minx=Math.max(dataSet.getEntryIndex(entryFrom) - diff,0);  int maxx=Math.min(Math.max(minx + 2,dataSet.getEntryIndex(entryTo) + 1),entryCount);  float phaseX=Math.max(0.f,Math.min(1.f,mAnimator.getPhaseX()));  float phaseY=mAnimator.getPhaseY();  cubicPath.reset();  int size=(int)Math.ceil((maxx - minx) * phaseX + minx);  if (size - minx >= 2) {    Entry prev=dataSet.getEntryForIndex(minx);    Entry cur=prev;    cubicPath.moveTo(cur.getXIndex(),cur.getVal() * phaseY);    for (int j=minx + 1, count=Math.min(size,entryCount); j < count; j++) {      prev=dataSet.getEntryForIndex(j - 1);      cur=dataSet.getEntryForIndex(j);      final float cpx=(float)(prev.getXIndex()) + (float)(cur.getXIndex() - prev.getXIndex()) / 2.0f;      cubicPath.cubicTo(cpx,prev.getVal() * phaseY,cpx,cur.getVal() * phaseY,cur.getXIndex(),cur.getVal() * phaseY);    }  }  if (dataSet.isDrawFilledEnabled()) {    cubicFillPath.reset();    cubicFillPath.addPath(cubicPath);    drawCubicFill(mBitmapCanvas,dataSet,cubicFillPath,trans,minx,size);  }  mRenderPaint.setColor(dataSet.getColor());  mRenderPaint.setStyle(Paint.Style.STROKE);  trans.pathValueToPixel(cubicPath);  mBitmapCanvas.drawPath(cubicPath,mRenderPaint);  mRenderPaint.setPathEffect(null);}  }
class C{  @SuppressWarnings("deprecation") public static boolean install(Context context,String destDir,String filename){  String abi=Build.CPU_ABI;  if (!abi.startsWith("arm")) {    return false;  }  try {    File f=new File(context.getDir(destDir,Context.MODE_PRIVATE),filename);    if (f.exists()) {      Log.d(TAG,"binary has existed");      return false;    }    copyAssets(context,filename,f,"0755");    return true;  } catch (  Exception e) {    Log.e(TAG,"installBinary failed: " + e.getMessage());    return false;  }}  }
class C{  @Override public int compare(CarbonFile o1,CarbonFile o2){  String firstFileName=o1.getName();  String secondFileName=o2.getName();  int lastIndexOfO1=firstFileName.lastIndexOf('_');  int lastIndexOfO2=secondFileName.lastIndexOf('_');  int file1=0;  int file2=0;  try {    file1=Integer.parseInt(firstFileName.substring(lastIndexOfO1 + 1));    file2=Integer.parseInt(secondFileName.substring(lastIndexOfO2 + 1));  } catch (  NumberFormatException e) {    return -1;  }  return (file1 < file2) ? -1 : (file1 == file2 ? 0 : 1);}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  utterance.getVoice().log("PartOfSpeechTagger does nothing!");}  }
class C{  public void addContext(String str){  if (str == null) {    throw new NullPointerException("str == null");  }  context.append(str);  if (!str.endsWith("\n")) {    context.append('\n');  }}  }
class C{  public SimpleStringProperty keyProperty(){  return this.key;}  }
class C{  @Override public void onRequestInitiated(int code){  if (code == ConnectAPI.SPEAKERS_CODE) {    progressDialog.show();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200446,skilltarget);}  }
class C{  private Label createLabel(Composite parent,String text,int span){  Label label=new Label(parent,SWT.LEFT);  label.setText(text);  GridData data=new GridData();  data.horizontalSpan=span;  data.horizontalAlignment=GridData.FILL;  label.setLayoutData(data);  return label;}  }
class C{  public static DateFormat toDateFormat(String dateFormat,TimeZone tz,Locale locale){  DateFormat df=null;  if (UtilValidate.isEmpty(dateFormat)) {    df=DateFormat.getDateInstance(DateFormat.SHORT,locale);  } else {    df=new SimpleDateFormat(dateFormat,locale == null ? Locale.getDefault() : locale);  }  df.setTimeZone(tz);  return df;}  }
class C{  public boolean use_original_names(){  return soot.PhaseOptions.getBoolean(options,"use-original-names");}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  if (DEBUG)   debugPrintln("debug is on");  ClassLoader cl=findClassLoader();  try {    String systemProp=SecuritySupport.getSystemProperty(factoryId);    if (systemProp != null && systemProp.length() > 0) {      if (DEBUG)       debugPrintln("found system property, value=" + systemProp);      return newInstance(systemProp,cl,true);    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=SecuritySupport.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXercesProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXercesProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=SecuritySupport.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXercesProperties=new Properties();          fis=SecuritySupport.getFileInputStream(propertiesFile);          fXercesProperties.load(fis);        }      } catch (      Exception x) {        fXercesProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXercesProperties != null) {      factoryClassName=fXercesProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    if (DEBUG)     debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return newInstance(factoryClassName,cl,true);  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (DEBUG)   debugPrintln("using fallback, value=" + fallbackClassName);  return newInstance(fallbackClassName,cl,true);}  }
class C{  @Override public void deliverResult(T data){  if (isReset()) {    if (data != null) {      onReleaseResources(data);    }  }  T oldData=mData;  mData=data;  if (isStarted()) {    super.deliverResult(data);  }  if (oldData != null) {    onReleaseResources(oldData);  }}  }
class C{  private void startList(Attributes attributes){  List listTag=null;  if (!mParagraphStyles.isEmpty()) {    AccumulatedParagraphStyle currentStyle=mParagraphStyles.peek();    ParagraphType type=currentStyle.getType();    int indent=currentStyle.getAbsoluteIndent();    boolean isIndentation=isIndentation(attributes);    if (type.isIndentation() || isIndentation) {      listTag=new UL(indent,true);    } else     if (type.isNumbering()) {      listTag=new OL(indent,false);    } else     if (type.isBullet()) {      listTag=new UL(indent,false);    }  } else {    listTag=new UL(0,false);  }  if (listTag != null)   start(listTag);}  }
class C{  public void changeItemIconAtPosition(int itemIndex,int newIcon){  if (itemIndex < 0 || itemIndex > spaceItems.size()) {    throwArrayIndexOutOfBoundsException(itemIndex);  } else {    SpaceItem spaceItem=spaceItems.get(itemIndex);    RelativeLayout textAndIconContainer=(RelativeLayout)spaceItemList.get(itemIndex);    ImageView spaceItemIcon=(ImageView)textAndIconContainer.findViewById(R.id.space_icon);    spaceItemIcon.setImageResource(newIcon);    spaceItem.setItemIcon(newIcon);    changedItemAndIconHashMap.put(itemIndex,spaceItem);  }}  }
class C{  @Override public String toString(){  return name;}  }
class C{  private String attemptToChooseFormattingPattern(){  if (nationalNumber.length() >= MIN_LEADING_DIGITS_LENGTH) {    getAvailableFormats(nationalNumber.toString());    String formattedNumber=attemptToFormatAccruedDigits();    if (formattedNumber.length() > 0) {      return formattedNumber;    }    return maybeCreateNewTemplate() ? inputAccruedNationalNumber() : accruedInput.toString();  } else {    return appendNationalNumber(nationalNumber.toString());  }}  }
class C{  public ConversionException(String message){  super(message);}  }
class C{  public SlickForm withFields(FormField[] fields){  Collections.addAll(this.formFields,fields);  return this;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"book_table\"";  db.execSQL(sql);}  }
class C{  public synchronized void write(BlockId blk){  fileMgr.write(blk,contents);}  }
class C{  public Iterator<Edge> edgesOutOf(MethodOrMethodContext m){  return new TargetsOfMethodIterator(m);}  }
class C{  public void update(){  clear();  final String[] columnNames=new String[classificationViewer.getNumberOfDatasets() + 1];  columnNames[0]=classificationViewer.getClassName();  for (int i=1; i <= classificationViewer.getNumberOfDatasets(); i++) {    columnNames[i]="Reads [" + i + "]";  }  model.setColumnIdentifiers(columnNames);  for (int i=0; i < getColumnCount(); i++) {    TableColumn col=getColumnModel().getColumn(i);    col.setCellRenderer(cellRenderer);  }  if (classificationViewer.getTree().getRoot() != null) {    buildHeatMapRec(classificationViewer.getTree().getRoot(),new HashSet<Integer>());  }  int[] maxCounts=new int[classificationViewer.getNumberOfDatasets()];  for (Node v=classificationViewer.getTree().getFirstNode(); v != null; v=v.getNext()) {    if (v.getOutDegree() == 0) {      NodeData data=classificationViewer.getNodeData(v);      if (data != null) {        int[] summarized=data.getSummarized();        int top=Math.min(summarized.length,maxCounts.length);        for (int i=0; i < top; i++) {          maxCounts[i]=Math.max(maxCounts[i],summarized[i]);        }      }    }  }  cellRenderer.setMaxCounts(maxCounts);}  }
class C{  protected GroupsGetSettingsQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static void toDotFile(String methodname,PegGraph graph,String graphname){  int sequence=0;  nodecount=0;  Hashtable nodeindex=new Hashtable(graph.size());  DotGraph canvas=new DotGraph(methodname);  if (!onepage) {    canvas.setPageSize(8.5,11.0);  }  canvas.setNodeShape(DotGraphConstants.NODE_SHAPE_BOX);  canvas.setGraphLabel(graphname);  Iterator nodesIt=graph.iterator();{    while (nodesIt.hasNext()) {      Object node=nodesIt.next();      if (node instanceof List) {        String listName="list" + (new Integer(sequence++)).toString();        String nodeName=makeNodeName(getNodeOrder(nodeindex,listName));        listNodeName.put(node,listName);      }    }  }  nodesIt=graph.mainIterator();  while (nodesIt.hasNext()) {    Object node=nodesIt.next();    String nodeName=null;    if (node instanceof List) {      nodeName=makeNodeName(getNodeOrder(nodeindex,listNodeName.get(node)));    } else {      Tag tag=(Tag)((JPegStmt)node).getTags().get(0);      nodeName=makeNodeName(getNodeOrder(nodeindex,tag + " " + node));      if (((JPegStmt)node).getName().equals("start")) {        startNodeToName.put(node,nodeName);      }    }    Iterator succsIt=graph.getSuccsOf(node).iterator();    while (succsIt.hasNext()) {      Object s=succsIt.next();      String succName=null;      if (s instanceof List) {        succName=makeNodeName(getNodeOrder(nodeindex,listNodeName.get(s)));      } else {        JPegStmt succ=(JPegStmt)s;        Tag succTag=(Tag)succ.getTags().get(0);        succName=makeNodeName(getNodeOrder(nodeindex,succTag + " " + succ));      }      canvas.drawEdge(nodeName,succName);    }  }  System.out.println("Drew main chain");  System.out.println("while printing, startToThread has size " + graph.getStartToThread().size());  Set maps=graph.getStartToThread().entrySet();  System.out.println("maps has size " + maps.size());  for (Iterator iter=maps.iterator(); iter.hasNext(); ) {    Map.Entry entry=(Map.Entry)iter.next();    Object startNode=entry.getKey();    System.out.println("startNode is: " + startNode);    String startNodeName=startNodeToName.get(startNode);    System.out.println("startNodeName is: " + startNodeName);    List runMethodChainList=(List)entry.getValue();    Iterator it=runMethodChainList.iterator();    while (it.hasNext()) {      Chain chain=(Chain)it.next();      Iterator subNodesIt=chain.iterator();      boolean firstNode=false;      while (subNodesIt.hasNext()) {        Object node=subNodesIt.next();        String nodeName=null;        if (node instanceof List) {          nodeName=makeNodeName(getNodeOrder(nodeindex,listNodeName.get(node)));          System.out.println("Didn't draw list node");        } else {          if (((JPegStmt)node).getName().equals("begin"))           firstNode=true;          Tag tag=(Tag)((JPegStmt)node).getTags().get(0);          nodeName=makeNodeName(getNodeOrder(nodeindex,tag + " " + node));          if (((JPegStmt)node).getName().equals("start")) {            startNodeToName.put(node,nodeName);          }          if (firstNode) {            if (startNodeName == null)             System.out.println("00000000startNodeName is null ");            if (nodeName == null)             System.out.println("00000000nodeName is null ");            DotGraphEdge startThreadEdge=canvas.drawEdge(startNodeName,nodeName);            startThreadEdge.setStyle("dotted");            firstNode=false;          }        }        Iterator succsIt=graph.getSuccsOf(node).iterator();        while (succsIt.hasNext()) {          Object succ=succsIt.next();          String threadNodeName=null;          if (succ instanceof List) {            threadNodeName=makeNodeName(getNodeOrder(nodeindex,listNodeName.get(succ)));          } else {            JPegStmt succStmt=(JPegStmt)succ;            Tag succTag=(Tag)succStmt.getTags().get(0);            threadNodeName=makeNodeName(getNodeOrder(nodeindex,succTag + " " + succStmt));          }          canvas.drawEdge(nodeName,threadNodeName);        }      }    }  }  if (!isBrief) {    nodesIt=nodeindex.keySet().iterator();    while (nodesIt.hasNext()) {      Object node=nodesIt.next();      String nodename=makeNodeName(getNodeOrder(nodeindex,node));      DotGraphNode dotnode=canvas.getNode(nodename);      dotnode.setLabel(node.toString());    }  }  canvas.plot("peg.dot");  listNodeName.clear();  startNodeToName.clear();}  }
class C{  public PhotosGetAllCommentsQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public SimpleMetricGroup(GroupName name,Iterator<? extends Metric> i){  this(name);  while (i.hasNext())   add(i.next());}  }
class C{  protected DocsSaveQuery file(String value){  return unsafeParam("file",value);}  }
class C{  private boolean canLaunchDevices(@NotNull List<AndroidDevice> devices){  Set<String> requiredPackages=Sets.newHashSet();  for (  AndroidDevice device : devices) {    if (device instanceof LaunchableAndroidDevice) {      LaunchableAndroidDevice avd=(LaunchableAndroidDevice)device;      AvdInfo info=avd.getAvdInfo();      if (AvdManagerConnection.isSystemImageDownloadProblem(info.getStatus())) {        requiredPackages.add(AvdManagerConnection.getRequiredSystemImagePath(info));      }    }  }  if (requiredPackages.isEmpty()) {    return true;  }  String title;  StringBuilder message=new StringBuilder();  if (requiredPackages.size() == 1) {    title="Download System Image";    message.append("The system image: ").append(Iterables.getOnlyElement(requiredPackages)).append(" is missing.\n\n");    message.append("Download it now?");  } else {    title="Download System Images";    message.append("The following system images are missing:\n");    for (    String packageName : requiredPackages) {      message.append(packageName).append("\n");    }    message.append("\nDownload them now?");  }  int response=Messages.showOkCancelDialog(message.toString(),title,Messages.getQuestionIcon());  if (response != Messages.OK) {    return false;  }  ModelWizardDialog sdkQuickfixWizard=SdkQuickfixUtils.createDialogForPaths(myFacet.getModule().getProject(),requiredPackages);  if (sdkQuickfixWizard == null) {    return false;  }  sdkQuickfixWizard.show();  myDevicePicker.refreshAvds(null);  if (!sdkQuickfixWizard.isOK()) {    return false;  }  AvdManagerConnection manager=AvdManagerConnection.getDefaultAvdManagerConnection();  for (  AndroidDevice device : devices) {    if (device instanceof LaunchableAndroidDevice) {      LaunchableAndroidDevice avd=(LaunchableAndroidDevice)device;      AvdInfo info=avd.getAvdInfo();      String problem;      try {        AvdInfo reloadedAvdInfo=manager.reloadAvd(info);        problem=reloadedAvdInfo.getErrorMessage();      } catch (      AndroidLocation.AndroidLocationException e) {        problem="AVD cannot be loaded";      }      if (problem != null) {        Messages.showErrorDialog(myFacet.getModule().getProject(),problem,"Emulator Launch Failed");        return false;      }    }  }  return true;}  }
class C{  public CM_CLOSE_DIALOG(int opcode,State state,State... restStates){  super(opcode,state,restStates);}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public DefaultCellRenderer(){  super();}  }
class C{  private boolean contains(Body body,Vector2 point){  Transform transform=body.getTransform();  int fSize=body.getFixtureCount();  for (int j=fSize - 1; j >= 0; j--) {    BodyFixture bodyFixture=body.getFixture(j);    Convex convex=bodyFixture.getShape();    if (contains(convex,transform,point)) {      return true;    }  }  return false;}  }
class C{  private void onTextPaintMeasurementChanged(){  metrics.invalidate();  checkForRelayout();  invalidate();}  }
class C{  private List<Class<?>> findClasses(File directory,String packageName) throws ClassNotFoundException {  List<Class<?>> classes=new ArrayList<>();  if (!directory.exists()) {    return classes;  }  TreeSet<File> files=new TreeSet<>(Arrays.asList(directory.listFiles()));  for (  File file : files) {    String name=file.getName();    if (file.isDirectory()) {      assert !name.contains(".");      classes.addAll(findClasses(file,packageName + "." + name));    } else     if (name.endsWith(".class")) {      name=packageName + '.' + name.substring(0,name.length() - 6);      classes.add(Class.forName(name));    }  }  return classes;}  }
class C{  private MatchingPart createEmoPermissionPart(String part,PartType partType){  part=unescapeSeparators(part);switch (part.charAt(0)) {case 'c':    if (isTableResource(partType) && part.startsWith("createTable(") && part.endsWith(")")) {      String rison=part.substring(12,part.length() - 1);      return RisonHelper.fromORison(rison,CreateTablePart.class);    }  break;case 'i':if (part.startsWith("if(") && part.endsWith(")")) {  String condition=part.substring(3,part.length() - 1);switch (partType) {case SOR_TABLE:    return new SorTableConditionPart(Conditions.fromString(condition),_dataStore);case BLOB_TABLE:  return new BlobTableConditionPart(Conditions.fromString(condition),_blobStore);default :return new ConditionPart(Conditions.fromString(condition));}}break;case '*':if (part.length() == 1) {return getAnyPart();}break;}Condition condition=Conditions.like(part);if (condition instanceof EqualCondition) {return new EmoConstantPart(part);}return new ConditionPart(condition);}  }
class C{  private void sortDrawablesNewest(){  Sort.instance().sort(drawables,null);  refreshDrawableDisplay();}  }
class C{  public Date parse(String rawDate) throws DateParseException {  for (  Locale locale : LOCALES) {    for (    String format : DATE_FORMATS) {      DateTimeFormatter formatter=DateTimeFormat.forPattern(format).withLocale(locale).withDefaultYear(DateConstants.NO_YEAR);      try {        LocalDate parsedDate=formatter.parseLocalDate(rawDate);        int dayOfMonth=parsedDate.getDayOfMonth();        @MonthInt int month=parsedDate.getMonthOfYear();        int year=parsedDate.getYear();        if (year == DateConstants.NO_YEAR) {          return Date.on(dayOfMonth,month);        } else {          return Date.on(dayOfMonth,month,year);        }      } catch (      IllegalArgumentException e) {        if (BuildConfig.DEBUG && isNotAboutInvalidFormat(e)) {          e.printStackTrace();        }      }    }  }  throw new DateParseException("Unable to parse " + rawDate);}  }
class C{  @Override public void endConditional(Augmentations augs) throws XNIException {  fInDTDIgnore=false;  if (fDTDGrammar != null)   fDTDGrammar.endConditional(augs);  if (fDTDHandler != null) {    fDTDHandler.endConditional(augs);  }}  }
class C{  public static Map<String,Object> updateImage(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=updateImageMethod(dctx,context);  return result;}  }
class C{  public Builder format(String format){  this.format=format;  return this;}  }
class C{  public String stopServerAndReturnHar(final ProxyServer proxyServer,final String userId,final String identifierForHTDFile) throws IOException, DASTProxyException {  LOGGER.debug(AppScanConstants.DEBUG_MSG__IN_FUNC_STOP_SERVER_RETURN_HAR);  String nameOfHtd=null;  FileOutputStream fileOutputStream=null;  BufferedReader bufferedReader=null;  try {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Request is for the har with following identifier: " + userId);    }    final String userFolder=AppScanUtils.createUserFolderIfNotExist(AppScanConstants.USER_HTD_FILES_LOCATION,userId) + "/";    String nameFormatForUser=null;    if (AppScanUtils.isNotNull(identifierForHTDFile)) {      nameFormatForUser="Recordings-" + identifierForHTDFile + "-"+ AppScanUtils.returnDateInPredefinedFormat();    } else {      nameFormatForUser="Recordings-" + userId + "-"+ AppScanUtils.returnDateInPredefinedFormat();    }    final String userFilePath=userFolder + nameFormatForUser;    final String pathOfHarFile=userFilePath + AppScanConstants.HAR_FILE_EXTENSION;    nameOfHtd=nameFormatForUser + AppScanConstants.HTD_FILE_EXTENSION;    final String pathOfHtd=userFilePath + AppScanConstants.HTD_FILE_EXTENSION;    final Har har=proxyServer.getHar();    fileOutputStream=new FileOutputStream(pathOfHarFile);    har.writeTo(fileOutputStream);    LOGGER.debug("A HAR file has been successfully written to the file system");    final Process buildHar=new ProcessBuilder(AppScanConstants.HTD_CONVERTOR_APP_PATH,pathOfHarFile,pathOfHtd).start();    final InputStream inputStream=buildHar.getInputStream();    final InputStreamReader inputStreamReader=new InputStreamReader(inputStream);    bufferedReader=new BufferedReader(inputStreamReader);    if (LOGGER.isDebugEnabled()) {      String line;      while (AppScanUtils.isNotNull((line=bufferedReader.readLine()))) {        LOGGER.debug("HTDConvertor Application is saying: " + line);      }      LOGGER.debug("HTDConvertor Application has terminated");    }    proxyServer.stop();    LOGGER.debug(AppScanConstants.DEBUG_MSG_PROXY_STOPPED);  } catch (  Exception exception) {    LOGGER.error("Error in BrowserMobServiceBean.stopServerAndReturnHar function",exception);    throw new DASTProxyException("Error in creating a file containing all the recordings. Contact Administrator");  } finally {    if (AppScanUtils.isNotNull(fileOutputStream)) {      fileOutputStream.close();    }    if (AppScanUtils.isNotNull(bufferedReader)) {      bufferedReader.close();    }  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("Name of the HTD is being returned. The name is: " + nameOfHtd);  }  return nameOfHtd;}  }
class C{  public static int nextGreaterValueToTarget(int currentIndex,FixedLengthDimensionDataChunk dimColumnDataChunk,byte[] compareValue,int numerOfRows){  while (currentIndex + 1 < numerOfRows && ByteUtil.UnsafeComparer.INSTANCE.compareTo(dimColumnDataChunk.getCompleteDataChunk(),(currentIndex + 1) * compareValue.length,compareValue.length,compareValue,0,compareValue.length) <= 0) {    ++currentIndex;  }  return ++currentIndex;}  }
class C{  public static ISpaceQuery create(Class<?> entryClass,ISpacePredicate... predicates){  return new CustomSpaceQuery(entryClass,new AllSpacePredicate(predicates));}  }
class C{  public boolean isSelfIncremented(){  return _selfIncrementedColumnName != null;}  }
class C{  public GroupsIsMemberQuery isMember(String groupId){  return new GroupsIsMemberQuery(getClient(),groupId);}  }
class C{  public void showEmpty(Drawable emptyImageDrawable,String emptyTextContent,List<Integer> skipIds){  switchState(EMPTY,emptyImageDrawable,emptyTextContent,null,null,skipIds);}  }
class C{  public XMLCatalogResolver(String[] catalogs,boolean preferPublic){  init(catalogs,preferPublic);}  }
class C{  public DecoderResult decode(boolean[][] image,Map<DecodeHintType,?> hints) throws ChecksumException, FormatException {  int dimension=image.length;  BitMatrix bits=new BitMatrix(dimension);  for (int i=0; i < dimension; i++) {    for (int j=0; j < dimension; j++) {      if (image[i][j]) {        bits.set(j,i);      }    }  }  return decode(bits,hints);}  }
class C{  public ComplexFormat(String imaginaryCharacter,NumberFormat realFormat,NumberFormat imaginaryFormat) throws MathIllegalArgumentException, NullArgumentException {  if (imaginaryCharacter == null) {    throw new NullArgumentException();  }  if (imaginaryCharacter.length() == 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NO_DATA);  }  MathUtils.checkNotNull(imaginaryFormat,LocalizedCoreFormats.IMAGINARY_FORMAT);  MathUtils.checkNotNull(realFormat,LocalizedCoreFormats.REAL_FORMAT);  this.imaginaryCharacter=imaginaryCharacter;  this.imaginaryFormat=imaginaryFormat;  this.realFormat=realFormat;}  }
class C{  public void send(Destination _destination,Message _message,int _deliveryMode,int _priority,long _timeToLive) throws JMSException {  if (_destination == null || !(_destination instanceof Queue || _destination instanceof Topic)) {    throw new InvalidDestinationException("Can't send message to" + " an unidentified destination: " + _destination);  }  if (_deliveryMode != DeliveryMode.NON_PERSISTENT && _deliveryMode != DeliveryMode.PERSISTENT)   throw new JMSException("Delivery Mode of " + _deliveryMode + " is not valid"+ " (should be "+ DeliveryMode.NON_PERSISTENT+ " integer for a Non-Persistent delivery, or "+ DeliveryMode.PERSISTENT+ " integer for a Persistent delivery).");  if (0 > _priority || _priority > 9) {    throw new JMSException("Message Priority of " + _priority + " is not valid"+ " (should be an integer between 0 and 9).");  }  GSMessageImpl message=(GSMessageImpl)_message;  try {    prepareMessageToSend(message,_deliveryMode,_priority,_timeToLive,_destination);    m_session.handleSendMessage(message);  } catch (  RemoteException re) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Exception inside GSMessageProducerImpl.send(: " + re.toString(),re);    }    JMSException e=new JMSException("RemoteException : " + re.toString());    e.setLinkedException(re);    throw e;  }catch (  TransactionException te) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.log(Level.SEVERE,"Exception inside GSMessageProducerImpl.send(: " + te.toString(),te);    }    JMSException e=new JMSException("TransactionException : " + te.toString());    e.setLinkedException(te);    throw e;  }catch (  EntryAlreadyInSpaceException eaine) {    if (_logger.isLoggable(Level.SEVERE)) {      _logger.severe("GSMessageProducerImpl.send() EntryAlreadyInSpaceException: " + message.DestinationName + "  |  destination:  "+ _destination+ "  |  uid:  "+ message.__getEntryInfo().m_UID);    }    JMSException e=new JMSException("EntryAlreadyInSpaceException : " + eaine.toString());    e.setLinkedException(eaine);    throw e;  }catch (  Exception e) {    if (_logger.isLoggable(Level.FINE)) {      _logger.log(Level.FINE,"Exception inside GSMessageProducerImpl.send(): ",e);    }    if (!(e instanceof InterruptedException)) {      if (_logger.isLoggable(Level.FINE)) {        _logger.log(Level.FINE,e.toString(),e);      }      JMSException jmse=new JMSException("Exception: " + e.toString());      jmse.setLinkedException(e);      throw jmse;    }  }}  }
class C{  public static Map<String,Object> prodFindSelectedVariant(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Locale locale=(Locale)context.get("locale");  Map<String,String> selectedFeatures=UtilGenerics.checkMap(context.get("selectedFeatures"));  List<GenericValue> products=FastList.newInstance();  Map<String,Object> resVariants=prodFindAllVariants(dctx,context);  List<GenericValue> variants=UtilGenerics.checkList(resVariants.get("assocProducts"));  for (  GenericValue oneVariant : variants) {    Map<String,String> feaContext=FastMap.newInstance();    feaContext.put("productId",oneVariant.getString("productIdTo"));    feaContext.put("type","STANDARD_FEATURE");    Map<String,Object> resFeatures=prodGetFeatures(dctx,feaContext);    List<GenericValue> features=UtilGenerics.checkList(resFeatures.get("productFeatures"));    boolean variantFound=true;    for (    GenericValue oneFeature : features) {      if (selectedFeatures.containsKey(oneFeature.getString("productFeatureTypeId"))) {        if (!selectedFeatures.containsValue(oneFeature.getString("productFeatureId"))) {          variantFound=false;          break;        }      }    }    if (variantFound) {      try {        products.add(EntityQuery.use(delegator).from("Product").where("productId",oneVariant.getString("productIdTo")).queryOne());      } catch (      GenericEntityException e) {        Map<String,String> messageMap=UtilMisc.toMap("errProductFeatures",e.toString());        String errMsg=UtilProperties.getMessage(resourceError,"productservices.problem_reading_product_features_errors",messageMap,locale);        Debug.logError(e,errMsg,module);        return ServiceUtil.returnError(errMsg);      }    }  }  Map<String,Object> result=ServiceUtil.returnSuccess();  result.put("products",products);  return result;}  }
class C{  public SootMethod resolveConcreteDispatch(SootClass concreteType,SootMethod m){  concreteType.checkLevel(SootClass.HIERARCHY);  m.getDeclaringClass().checkLevel(SootClass.HIERARCHY);  checkState();  if (concreteType.isInterface())   throw new RuntimeException("class needed!");  String methodSig=m.getSubSignature();  for (  SootClass c : getSuperclassesOfIncluding(concreteType)) {    SootMethod sm=c.getMethodUnsafe(methodSig);    if (sm != null && isVisible(c,m)) {      return sm;    }  }  throw new RuntimeException("could not resolve concrete dispatch!\nType: " + concreteType + "\nMethod: "+ m);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARRY_A_TO_B(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1201101,value0,value1);}  }
class C{  @Deprecated public void clearDiscCache(){  clearDiskCache();}  }
class C{  public UsersSearchQuery(VkApiClient client,UserActor actor){  super(client,"users.search",SearchResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public int next(){  if (!hasNextLine())   return -1;  matchesTextLength=0;  String line=nextLine();  while (hasNextLine() && !line.startsWith(">")) {    line=nextLine();  }  if (line == null || !line.startsWith(">"))   return -1;  final String queryName=Basic.getReadName(line);  if (!hasNextLine())   return -1;  line=nextLine();  final String[] tokens=Basic.split(line,';');  int matchId=0;  matches.clear();  StringBuilder path=new StringBuilder();  try {    path.append("root").append(";");    int whichToken=0;    while (whichToken < tokens.length && tokens[whichToken].length() > 0) {      String name=tokens[whichToken++];      if (whichToken >= 2 && Character.isLowerCase(name.charAt(0)) && whichToken == tokens.length - 1)       name=tokens[whichToken - 3] + " " + name;      if (!name.equalsIgnoreCase("root"))       path.append(name).append(";");      String ref=Basic.toString(tokens,0,whichToken,";") + ";";      String scoreString=tokens[whichToken++];      float bitScore=100 * Basic.parseFloat(scoreString);      if (matches.size() < getMaxNumberOfMatchesPerRead() || bitScore > matches.last().bitScore) {        Match match=new Match();        match.bitScore=bitScore;        match.id=matchId++;        match.samLine=makeSAM(queryName,path.toString(),bitScore,ref);        matches.add(match);        if (matches.size() > getMaxNumberOfMatchesPerRead())         matches.remove(matches.last());      }    }  } catch (  Exception ex) {    System.err.println("Error parsing file near line: " + getLineNumber());    if (incrementNumberOfErrors() >= getMaxNumberOfErrors())     throw new RuntimeException("Too many errors");  }  if (matches.size() == 0) {    if (queryName.length() > matchesText.length) {      matchesText=new byte[2 * queryName.length()];    }    for (int i=0; i < queryName.length(); i++)     matchesText[matchesTextLength++]=(byte)queryName.charAt(i);    matchesText[matchesTextLength++]='\n';    return 0;  } else {    for (    Match match : matches) {      byte[] bytes=match.samLine.getBytes();      if (matchesTextLength + bytes.length + 1 >= matchesText.length) {        byte[] tmp=new byte[2 * (matchesTextLength + bytes.length + 1)];        System.arraycopy(matchesText,0,tmp,0,matchesTextLength);        matchesText=tmp;      }      System.arraycopy(bytes,0,matchesText,matchesTextLength,bytes.length);      matchesTextLength+=bytes.length;      matchesText[matchesTextLength++]='\n';    }    return matches.size();  }}  }
class C{  int findCenterViewIndex(){  int count=getChildCount();  int index=RecyclerView.NO_POSITION;  int closest=Integer.MAX_VALUE;  int centerY=getCenterYPos();  for (int i=0; i < count; ++i) {    View child=getChildAt(i);    int childCenterY=mTicklableRecyclerView.getTop() + ViewPropertiesHelper.getCenterYPos(child);    int distance=Math.abs(centerY - childCenterY);    if (distance < closest) {      closest=distance;      index=i;    }  }  if (index == RecyclerView.NO_POSITION) {    throw new IllegalStateException("Can\'t find central view.");  } else {    return index;  }}  }
class C{  public static BloomSpecification computeBloomSpec(int maxBucketsPerElement,double maxFalsePosProb){  assert maxBucketsPerElement >= 1;  assert maxBucketsPerElement <= probs.length - 1;  int maxK=probs[maxBucketsPerElement].length - 1;  if (maxFalsePosProb >= probs[minBuckets][minK]) {    return new BloomSpecification(2,optKPerBuckets[2]);  }  if (maxFalsePosProb < probs[maxBucketsPerElement][maxK]) {    throw new UnsupportedOperationException(String.format("Unable to satisfy %s with %s buckets per element",maxFalsePosProb,maxBucketsPerElement));  }  int bucketsPerElement=2;  int K=optKPerBuckets[2];  while (probs[bucketsPerElement][K] > maxFalsePosProb) {    bucketsPerElement++;    K=optKPerBuckets[bucketsPerElement];  }  while (probs[bucketsPerElement][K - 1] <= maxFalsePosProb) {    K--;  }  return new BloomSpecification(K,bucketsPerElement);}  }
class C{  public void registerPeekPromoSeen(){  final int peekPromoShowCount=mPreferenceManager.getContextualSearchPeekPromoShowCount();  mPreferenceManager.setContextualSearchPeekPromoShowCount(peekPromoShowCount + 1);}  }
class C{  public static String removeInvertedCommas(String s){  return removeDelimiter(s,'\"');}  }
class C{  public int send(OutputStream out) throws IOException {  FileInputStream fis;  int readBytes;  byte[] buff=new byte[256 * 1024];  fis=new FileInputStream(this.local_filename);  try {    while ((readBytes=fis.read(buff)) >= 0) {      if (readBytes == 0) {        continue;      }      out.write(buff,0,readBytes);    }  }  finally {    fis.close();  }  return 0;}  }
class C{  private void launchNtp(boolean incognito){  if (incognito && !PrefServiceBridge.getInstance().isIncognitoModeEnabled())   return;  getTabCreator(incognito).launchNTP();}  }
class C{  public static ContextConfigAspect create(Model model){  return new ContextConfigAspect(model);}  }
class C{  private boolean doRender(@NotNull RenderingContext context){  TemplateMetadata metadata=getMetadata();  assert metadata != null;  enforceParameterTypes(metadata,context.getParamMap());  try {    processFile(context,new File(TEMPLATE_XML_NAME));    if (!context.showWarnings() || context.getWarnings().isEmpty()) {      return true;    }    if (!context.getProject().isInitialized() && myTemplateRoot.getPath().contains(GOOGLE_GLASS_PATH_19)) {      return true;    }    int result=Messages.showOkCancelDialog(context.getProject(),formatWarningMessage(context),String.format("%1$s %2$s",context.getCommandName(),StringUtil.pluralize("Warning")),"Proceed Anyway","Cancel",Messages.getWarningIcon());    return result == Messages.OK;  } catch (  TemplateUserVisibleException e) {    if (context.showErrors()) {      Messages.showErrorDialog(context.getProject(),formatErrorMessage(context,e),String.format("%1$s Failed",context.getCommandName()));    } else {      throw new RuntimeException(e);    }    return false;  }catch (  TemplateProcessingException e) {    throw new RuntimeException(e);  }}  }
class C{  public DocsEditQuery edit(UserActor actor,int ownerId,int docId){  return new DocsEditQuery(getClient(),actor,ownerId,docId);}  }
class C{  public static Timestamp stringToTimeStamp(String dateTimeString,TimeZone tz,Locale locale) throws ParseException {  return stringToTimeStamp(dateTimeString,null,tz,locale);}  }
class C{  private static File constructFilePaths(String file1,String file2){  File newPath;  if (file2.startsWith(file1)) {    newPath=new File(file2);  } else {    newPath=new File(file1 + "/" + file2);  }  return newPath;}  }
class C{  public static Map<String,Object> initLowLevelCode(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  Locale locale=(Locale)context.get("locale");  try {    List<GenericValue> products=EntityQuery.use(delegator).from("Product").orderBy("isVirtual DESC").queryList();    Long zero=Long.valueOf(0);    List<GenericValue> allProducts=FastList.newInstance();    for (    GenericValue product : products) {      product.set("billOfMaterialLevel",zero);      allProducts.add(product);    }    delegator.storeAll(allProducts);    Debug.logInfo("Low Level Code set to 0 for all the products",module);    for (    GenericValue product : products) {      try {        Map<String,Object> depthResult=dispatcher.runSync("updateLowLevelCode",UtilMisc.<String,Object>toMap("productIdTo",product.getString("productId"),"alsoComponents",Boolean.valueOf(false),"alsoVariants",Boolean.valueOf(false)));        Debug.logInfo("Product [" + product.getString("productId") + "] Low Level Code ["+ depthResult.get("lowLevelCode")+ "]",module);      } catch (      Exception exc) {        Debug.logWarning(exc.getMessage(),module);      }    }  } catch (  Exception e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingBomErrorRunningInitLowLevelCode",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  return result;}  }
class C{  public static void clearCache(Context context,String uniqueName){  File cacheDir=CacheManager.getDiskCacheDir(context,uniqueName);  clearCache(cacheDir);}  }
class C{  @Override protected final boolean processData(ByteBuffer data){  try {    if (!crypt.decrypt(data)) {      nbInvalidPackets++;      log.info("[" + nbInvalidPackets + "/"+ MAX_INVALID_PACKETS+ "] Decrypt fail, client packet passed...");      if (nbInvalidPackets >= MAX_INVALID_PACKETS) {        log.warn("Decrypt fail!");        return false;      }      return true;    }  } catch (  Exception ex) {    log.error("Exception caught during decrypt!" + ex.getMessage());    return false;  }  if (data.remaining() < 5) {    log.error("Received fake packet from: " + this);    return false;  }  AionClientPacket pck=aionPacketHandler.handle(data,this);  if (pck != null) {    if (SecurityConfig.PFF_ENABLE) {      int opcode=pck.getOpcode();      if (pff.length > opcode) {        if (pff[opcode] > 0) {          long last=this.pffRequests[opcode];          if (last == 0) {            this.pffRequests[opcode]=System.currentTimeMillis();          } else {            long diff=System.currentTimeMillis() - last;            if (diff < pff[opcode]) {              log.warn(this + " has flooding " + pck.getClass().getSimpleName()+ " "+ diff);switch (SecurityConfig.PFF_LEVEL) {case 1:                return false;case 2:              break;          }        } else {          this.pffRequests[opcode]=System.currentTimeMillis();        }      }    }  }}PacketLoggerService.getInstance().logPacketCM(pck.getPacketName());if (pck.read()) {  packetProcessor.executePacket(pck);}}return true;}  }
class C{  public void populateExpression(String wellKnownName){  if (wellKnownName != null) {    fieldConfigVisitor.populateTextField(FieldIdEnum.WKT,wellKnownName);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @Test public void createProcessDescriptionEnum(){  ProcessDescriptionType process=Wps10FactoryImpl.init().createProcessDescriptionType();  CodeType codeType=Ows11FactoryImpl.init().createCodeType();  codeType.setValue("JTS:area");  process.setIdentifier(codeType);  DataInputsType dataInputs=Wps10FactoryImpl.init().createDataInputsType();  EList dataInputList=dataInputs.getInput();  InputDescriptionType inputDescription=Wps10FactoryImpl.init().createInputDescriptionType();  CodeType codeType2=Ows11FactoryImpl.init().createCodeType();  codeType2.setValue("dummyParameter");  inputDescription.setIdentifier(codeType2);  inputDescription.setMinOccurs(BigInteger.valueOf(1));  inputDescription.setMaxOccurs(BigInteger.valueOf(1));  LiteralInputType literal=Wps10FactoryImpl.init().createLiteralInputType();  AllowedValuesType allowedValues=Ows11FactoryImpl.init().createAllowedValuesType();  EList allowedValueList=allowedValues.getValue();  ValueType item1=Ows11FactoryImpl.init().createValueType();  item1.setValue("item 1");  allowedValueList.add(item1);  ValueType item2=Ows11FactoryImpl.init().createValueType();  item2.setValue("item 2");  allowedValueList.add(item2);  ValueType item3=Ows11FactoryImpl.init().createValueType();  item1.setValue("item 3");  allowedValueList.add(item3);  literal.setAllowedValues(allowedValues);  inputDescription.setLiteralData(literal);  dataInputList.add(inputDescription);  process.setDataInputs(dataInputs);  CustomProcessFunction obj=new CustomProcessFunction();  List<ProcessFunctionParameterValue> valueList=obj.extractParameters(process);  assertEquals(1,valueList.size());  ProcessFunctionParameterValue value=valueList.get(0);  assertEquals(1,value.minOccurences);  assertEquals(1,value.maxOccurences);  assertEquals(3,value.enumValueList.size());}  }
class C{  public Geometry(String name,Mesh mesh){  this(name);  if (mesh == null) {    throw new NullPointerException();  }  this.mesh=mesh;}  }
class C{  @Override public void clear(){  if (null != columnReverseDictionaryInfo) {    columnReverseDictionaryInfo.clear();    columnReverseDictionaryInfo=null;  }}  }
class C{  public ProxyTrustInvocationHandler(RemoteMethodControl main,ProxyTrust boot){  if (main == null || boot == null) {    throw new NullPointerException("arguments cannot be null");  } else   if (!(main instanceof TrustEquivalence)) {    throw new IllegalArgumentException("main proxy must implement TrustEquivalence");  } else   if (!(boot instanceof RemoteMethodControl)) {    throw new IllegalArgumentException("bootstrap proxy must implement RemoteMethodControl");  } else   if (!(boot instanceof TrustEquivalence)) {    throw new IllegalArgumentException("bootstrap proxy must implement TrustEquivalence");  }  this.main=main;  this.boot=boot;}  }
class C{  public static boolean isBodyAABBEnabled(){  return bodyAABBEnabled;}  }
