class C{  public static boolean pathEquals(String path1,String path2){  return cleanPath(path1).equals(cleanPath(path2));}  }
class C{  @Override public void onServiceConnected(ComponentName name,IBinder service){  if (DEBUG)   Log.d(TAG,"Connected to provider " + name);  mIsBound=true;  if (mListener != null) {    mListener.onServiceConnected(this);  }}  }
class C{  public mxSession(String id,mxSharedDiagram diagram){  this.id=id;  this.diagram=diagram;  this.diagram.addDiagramChangeListener(this);  lastTimeMillis=System.currentTimeMillis();}  }
class C{  public Dataset(final int dimensions,final int numPoints){  this(dimensions);  for (int i=0; i < numPoints; i++) {    double[] point=new double[dimensions];    addPoint(new DataPoint(point));  }}  }
class C{  public static String format(int kind,String source,int indentationLevel,String lineSeparator,Map<String,String> options){  TextEdit edit=format2(kind,source,indentationLevel,lineSeparator,options);  if (edit == null) {    return source;  } else {    Document document=new WorkerDocument(source);    try {      edit.apply(document,TextEdit.NONE);    } catch (    BadLocationException e) {      Assert.isTrue(false,"Formatter created edits with wrong positions: " + e.getMessage());    }    return document.get();  }}  }
class C{  public PluginPrinter(Component applet,PrintStream stream,int x,int y,int w,int h){  this.applet=applet;  this.epsTitle="Java Plugin Applet";  this.stream=stream;  bx=x;  by=y;  bw=w;  bh=h;  width=applet.size().width;  height=applet.size().height;  epsPrinter=new EPSPrinter(this,epsTitle,stream,0,0,width,height);}  }
class C{  public boolean isFinalByType(){  final Type dtype=this.getDeclaredType();  if ((dtype == null)) {    return false;  }  return dtype.isFinal();}  }
class C{  public User findUser(String name){  return users.get(name);}  }
class C{  public DriveImageView(Context context,AttributeSet attrs){  super(context,attrs);  initialize(context);}  }
class C{  private void apply(){  int boardWidth;  int boardHeight;  int mapWidth;  int mapHeight;  try {    boardWidth=Integer.parseInt(texBoardWidth.getText());    boardHeight=Integer.parseInt(texBoardHeight.getText());    mapWidth=(Integer)spnMapWidth.getModel().getValue();    mapHeight=(Integer)spnMapHeight.getModel().getValue();  } catch (  NumberFormatException ex) {    JOptionPane.showMessageDialog(clientGUI.frame,Messages.getString("BoardSelectionDialog.InvalidNumberOfmaps"),Messages.getString("BoardSelectionDialog.InvalidMapSize"),JOptionPane.ERROR_MESSAGE);    return;  }  if ((boardWidth <= 0) || (boardHeight <= 0) || (mapWidth <= 0)|| (mapHeight <= 0)) {    JOptionPane.showMessageDialog(clientGUI.frame,Messages.getString("BoardSelectionDialog.MapSizeMustBeGreateter0"),Messages.getString("BoardSelectionDialog.InvalidMapSize"),JOptionPane.ERROR_MESSAGE);    return;  }  mapSettings.setBoardSize(boardWidth,boardHeight);  mapSettings.setMapSize(mapWidth,mapHeight);  clientGUI.getClient().sendMapDimensions(mapSettings);}  }
class C{  public ArffTable(){  this(new ArffSortedTableModel(""));}  }
class C{  public static DataStorage newDataStorage(Configuration configuration) throws IllegalDataStorageTypeException {  String storageType=configuration.getString(EAGLE_STORAGE_TYPE);  if (storageType == null) {    throw new IllegalDataStorageTypeException(EAGLE_STORAGE_TYPE + " is null");  }  return newDataStorage(storageType);}  }
class C{  public boolean equalTo(CFMLEngine other,final boolean checkReferenceEqualityOnly){  while (other instanceof CFMLEngineWrapper)   other=((CFMLEngineWrapper)other).engine;  if (checkReferenceEqualityOnly)   return engine == other;  return engine.equals(other);}  }
class C{  @Override public void onDeleteComplete(int taskId,Object cookie,int deleteCount){}  }
class C{  public boolean isDeployed(){  Object oo=get_Value(COLUMNNAME_IsDeployed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean succeeded(){  return value != null;}  }
class C{  static public Map<String,List<GroupInfo>> extractGroupInfo(String namedPattern){  Map<String,List<GroupInfo>> groupInfo=new LinkedHashMap<String,List<GroupInfo>>();  java.util.regex.Matcher matcher=NAMED_GROUP_PATTERN.matcher(namedPattern);  while (matcher.find()) {    int pos=matcher.start();    if (isEscapedChar(namedPattern,pos))     continue;    String name=matcher.group(INDEX_GROUP_NAME);    int groupIndex=countOpenParens(namedPattern,pos);    List<GroupInfo> list;    if (groupInfo.containsKey(name)) {      list=groupInfo.get(name);    } else {      list=new ArrayList<GroupInfo>();    }    list.add(new GroupInfo(groupIndex,pos));    groupInfo.put(name,list);  }  return groupInfo;}  }
class C{  protected void writeList(Output out,List<?> list){  if (!list.isEmpty()) {    int size=list.size();    if (size < 100) {      out.writeArray(list,this);      return;    }    int nullCount=0;    for (int i=0; i < size; i++) {      if (list.get(i) == null) {        nullCount++;      }    }    if (nullCount > (size * 0.8)) {      out.writeMap(list,this);    } else {      out.writeArray(list,this);    }  } else {    out.writeArray(new Object[]{},this);  }}  }
class C{  public MoveDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.MOVE,project,description,comment,arguments,flags);  fMovePolicy=JavaRefactoringDescriptorUtil.getString(fArguments,ATTRIBUTE_POLICY);  fDestination=JavaRefactoringDescriptorUtil.getJavaElement(fArguments,ATTRIBUTE_DESTINATION,project,true);  if (fDestination == null)   fDestination=JavaRefactoringDescriptorUtil.getResourcePath(fArguments,ATTRIBUTE_TARGET,project);  if (POLICY_MOVE_RESOURCES.equals(fMovePolicy)) {    fReferences=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_REFERENCES,fReferences);    fQualified=JavaRefactoringDescriptorUtil.getBoolean(fArguments,ATTRIBUTE_QUALIFIED,fQualified);    fPatterns=JavaRefactoringDescriptorUtil.getString(fArguments,ATTRIBUTE_PATTERNS,true);    int offset=1;    fFiles=JavaRefactoringDescriptorUtil.getResourcePathArray(fArguments,ATTRIBUTE_FILES,ATTRIBUTE_ELEMENT,offset,project);    offset+=fFiles.length;    fFolders=JavaRefactoringDescriptorUtil.getResourcePathArray(fArguments,ATTRIBUTE_FOLDERS,ATTRIBUTE_ELEMENT,offset,project);    offset+=fFolders.length;    fUnits=(ICompilationUnit[])JavaRefactoringDescriptorUtil.getJavaElementArray(fArguments,ATTRIBUTE_UNITS,ATTRIBUTE_ELEMENT,offset,project,ICompilationUnit.class);  } else   if (POLICY_MOVE_ROOTS.equals(fMovePolicy)) {    fRoots=(IPackageFragmentRoot[])JavaRefactoringDescriptorUtil.getJavaElementArray(fArguments,ATTRIBUTE_ROOTS,ATTRIBUTE_ELEMENT,1,project,IPackageFragmentRoot.class);  } else   if (POLICY_MOVE_PACKAGES.equals(fMovePolicy)) {    fFragments=(IPackageFragment[])JavaRefactoringDescriptorUtil.getJavaElementArray(fArguments,ATTRIBUTE_FRAGMENTS,ATTRIBUTE_ELEMENT,1,project,IPackageFragment.class);  } else   if (POLICY_MOVE_MEMBERS.equals(fMovePolicy)) {    fMembers=(IMember[])JavaRefactoringDescriptorUtil.getJavaElementArray(fArguments,ATTRIBUTE_MEMBERS,ATTRIBUTE_ELEMENT,1,project,IMember.class);  }}  }
class C{  public boolean isDirectDebit(){  if (!isACH())   return false;  String s=getBPBankAcctUse();  if (s == null)   return true;  return (s.equals(BPBANKACCTUSE_Both) || s.equals(BPBANKACCTUSE_DirectDebit));}  }
class C{  @Deprecated public ContentItem forward(boolean forward){  this.forward=forward;  return this;}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  public void error(SAXParseException spe){  if (LOG.isErrorEnabled()) {    LOG.error("Error: " + spe.toString() + ": "+ spe.getMessage());  }}  }
class C{  protected void throttleDispose(){  active=false;  stopStatusTimer();  finishRecord();}  }
class C{  protected Size2D arrangeNN(BlockContainer container,Graphics2D g2){  double y=0.0;  double height=0.0;  double maxWidth=0.0;  List blocks=container.getBlocks();  int blockCount=blocks.size();  if (blockCount > 0) {    Size2D[] sizes=new Size2D[blocks.size()];    for (int i=0; i < blocks.size(); i++) {      Block block=(Block)blocks.get(i);      sizes[i]=block.arrange(g2,RectangleConstraint.NONE);      height=height + sizes[i].getHeight();      maxWidth=Math.max(sizes[i].width,maxWidth);      block.setBounds(new Rectangle2D.Double(0.0,y,sizes[i].width,sizes[i].height));      y=y + sizes[i].height + this.verticalGap;    }    if (blockCount > 1) {      height=height + this.verticalGap * (blockCount - 1);    }    if (this.horizontalAlignment != HorizontalAlignment.LEFT) {      for (int i=0; i < blocks.size(); i++) {        if (this.horizontalAlignment == HorizontalAlignment.CENTER) {        } else         if (this.horizontalAlignment == HorizontalAlignment.RIGHT) {        }      }    }  }  return new Size2D(maxWidth,height);}  }
class C{  public String remove(String key){  String value=get(key);  properties.remove(key);  return value;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private boolean isReservingOverflow(){  if (!mReserveOverflowSet) {    mReserveOverflow=ActionMenuPresenter.reserveOverflow(mActivity);    mReserveOverflowSet=true;  }  return mReserveOverflow;}  }
class C{  public static <T>T[] insert(T[] dest,T[] src,int offset){  Class<T> componentType=(Class<T>)dest.getClass().getComponentType();  return insert(dest,src,offset,componentType);}  }
class C{  public void endProcess(){}  }
class C{  @Override public void clear(){  removeAllElements();}  }
class C{  public final boolean isNoInferiors(){  return noInferiors;}  }
class C{  @RequestMapping(method=RequestMethod.GET) public ResultVO all(@And({@Spec(path="usr",spec=Like.class),@Spec(path="name",spec=Like.class),@Spec(path="validFlag",constVal="VALID",spec=In.class),@Spec(path="createdDate",params={"createdDateAfter","createdDateBefore"},spec=DateBetween.class)}) Specification<User> userSpecification,UserParam param){  try {    if (param.getPageNo() == null) {      return resultHelper.successResp(userDomain.getAll(userSpecification,QueryHelper.getSort(param.getSortBy()),UserVO.class));    }    return resultHelper.successResp(userDomain.getPage(userSpecification,QueryHelper.getPageRequest(param),UserVO.class));  } catch (  CommonsException e) {    return resultHelper.infoResp(logger,e.getErrorType(),e.getMessage());  }catch (  Exception e) {    return resultHelper.errorResp(logger,e,ErrorType.UNKNOWN,e.getMessage());  }}  }
class C{  public static int hashCode(boolean[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  public PrefixSearchTupleSet(){  this(false);}  }
class C{  public static boolean equals(int[] array1,int[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public String substring(int start,int end){  if (_length < start || start < 0 || end < start)   throw new StringIndexOutOfBoundsException();  return new String(_buffer,_offset + start,end - start);}  }
class C{  @Override protected String doInBackground(String... f_url){  int count;  InputStream input=null;  OutputStream output=null;  try {    URL url=new URL(f_url[0]);    URLConnection connection=url.openConnection();    connection.connect();    int lengthOfFile=connection.getContentLength();    input=new BufferedInputStream(url.openStream(),8192);    output=new FileOutputStream(f_url[1]);    byte data[]=new byte[1024];    long total=0;    while ((count=input.read(data)) != -1) {      total+=count;      publishProgress(Integer.toString((int)((total * 100) / lengthOfFile)));      output.write(data,0,count);    }    output.flush();  } catch (  Exception e) {    Log.e("Error: ",e.getMessage());  } finally {    try {      if (output != null)       output.close();    } catch (    Exception e) {      Log.e("Error: ",e.getMessage());    }    try {      if (input != null)       input.close();    } catch (    Exception e) {      Log.e("Error: ",e.getMessage());    }  }  return null;}  }
class C{  public TEnumLiteral basicGetDefinedLiteral(){  return definedLiteral;}  }
class C{  static void removeAllPhis(IR ir){  for (Instruction s=ir.firstInstructionInCodeOrder(), sentinel=ir.lastInstructionInCodeOrder(), nextInstr=null; s != sentinel; s=nextInstr) {    nextInstr=s.nextInstructionInCodeOrder();    if (Phi.conforms(s))     s.remove();  }}  }
class C{  static boolean toStringDeclared(final Class<?> clazz){  if (clazz == null) {    return false;  }  if (clazz == Object.class || clazz == IntegralAbstract.class) {    return false;  }  try {    final String methodName="toString";    final Method m=clazz.getDeclaredMethod(methodName);    if (m == null) {      return toStringDeclared(clazz.getSuperclass());    }  } catch (  final SecurityException e) {    return false;  }catch (  final NoSuchMethodException e) {    return toStringDeclared(clazz.getSuperclass());  }  return true;}  }
class C{  public static boolean containsGas(String name){  return getGas(name) != null;}  }
class C{  public void testEqualObjects(){  String value1="12378246728727834290276457386374882976782849";  String value2="12378246728727834290276457386374882976782849";  BigInteger aNumber1=new BigInteger(value1);  BigInteger aNumber2=new BigInteger(value2);  int code1=aNumber1.hashCode();  int code2=aNumber2.hashCode();  if (aNumber1.equals(aNumber2)) {    assertTrue("hash codes for equal objects are unequal",code1 == code2);  }}  }
class C{  public static PieDataset createPieDatasetForColumn(CategoryDataset dataset,Comparable columnKey){  int column=dataset.getColumnIndex(columnKey);  return createPieDatasetForColumn(dataset,column);}  }
class C{  public GeoLocation(final double latitude,final double longitude){  this.latitude=latitude;  this.longitude=longitude;}  }
class C{  public void createCG(URI vplexURI,URI cgURI,Collection<URI> vplexVolumeURIs,String stepId) throws WorkflowException {  try {    WorkflowStepCompleter.stepExecuting(stepId);    log.info("Updated step state for consistency group creation to execute.");    if (vplexVolumeURIs == null || vplexVolumeURIs.isEmpty()) {      log.info("empty volume list; no CG will be created");      WorkflowStepCompleter.stepSucceded(stepId);      log.info("Updated workflow step for consistency group creation to success.");      return;    }    StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,dbClient);    VPlexApiClient client=getVPlexAPIClient(vplexApiFactory,vplexSystem,dbClient);    log.debug("Got VPLEX API client.");    Volume firstVplexVolume=null;    for (    URI volURI : vplexVolumeURIs) {      Volume vol=dbClient.queryObject(Volume.class,volURI);      if (vol != null && PersonalityTypes.SOURCE.name().equalsIgnoreCase(vol.getPersonality())) {        firstVplexVolume=vol;        break;      }    }    if (firstVplexVolume != null && NullColumnValueGetter.isNotNullValue(firstVplexVolume.getPersonality()) && firstVplexVolume.getPersonality().equals(PersonalityTypes.SOURCE.toString())) {      VirtualPool vpool=getDataObject(VirtualPool.class,firstVplexVolume.getVirtualPool(),dbClient);      boolean haIsWinningCluster=VirtualPool.isRPVPlexProtectHASide(vpool) || (vpool.getMetroPoint() && NullColumnValueGetter.isNotNullValue(vpool.getHaVarrayConnectedToRp()));      if (haIsWinningCluster) {        log.info("Force HA side as winning cluster for VPLEX CG.");        firstVplexVolume.setLabel("DO NOT PERSIST THIS VOLUME");        firstVplexVolume.setVirtualArray(URI.create(vpool.getHaVarrayConnectedToRp()));      }    }    List<String> lockKeys=new ArrayList<String>();    lockKeys.add(ControllerLockingUtil.getConsistencyGroupStorageKey(dbClient,cgURI,vplexURI));    workflowService.acquireWorkflowStepLocks(stepId,lockKeys,LockTimeoutValue.get(LockType.RP_VPLEX_CG));    BlockConsistencyGroup cg=getDataObject(BlockConsistencyGroup.class,cgURI,dbClient);    Map<String,List<URI>> cgToVolListMap=new HashMap<String,List<URI>>();    for (    URI vplexVolumeURI : vplexVolumeURIs) {      Volume vplexVolume=getDataObject(Volume.class,vplexVolumeURI,dbClient);      ClusterConsistencyGroupWrapper clusterConsistencyGroup=getClusterConsistencyGroup(vplexVolume,cg);      String cgName=clusterConsistencyGroup.getCgName();      String clusterName=clusterConsistencyGroup.getClusterName();      boolean isDistributed=clusterConsistencyGroup.isDistributed();      String cgKey=String.format("%s:%s:%s",cgName,clusterName,(isDistributed ? "dist" : "local"));      if (!cgToVolListMap.containsKey(cgKey)) {        cgToVolListMap.put(cgKey,new ArrayList<URI>());      }      cgToVolListMap.get(cgKey).add(vplexVolumeURI);    }    for (    Entry<String,List<URI>> entry : cgToVolListMap.entrySet()) {      String[] elems=StringUtils.delimitedListToStringArray(entry.getKey(),":");      if (elems.length != 3) {        log.error("Error in vplex cg mapping key. Expect <cgname>:<clustername>:<dist|local>; got: " + entry.getKey());        continue;      }      String cgName=elems[0];      String clusterName=elems[1];      boolean isDistributed=elems[2].equals("dist");      if (!BlockConsistencyGroupUtils.isVplexCgCreated(cg,vplexURI.toString(),clusterName,cgName,isDistributed)) {        createVplexCG(vplexSystem,client,cg,firstVplexVolume,cgName,clusterName,isDistributed);      } else {        modifyCGSettings(client,cgName,clusterName,isDistributed);      }      addVolumesToCG(cgURI,entry.getValue(),cgName,clusterName,client);    }    WorkflowStepCompleter.stepSucceded(stepId);    log.info("Updated workflow step for consistency group creation to success.");  } catch (  Exception ex) {    log.error("Exception creating consistency group: " + ex.getMessage(),ex);    ServiceError serviceError=VPlexApiException.errors.jobFailed(ex);    WorkflowStepCompleter.stepFailed(stepId,serviceError);  }}  }
class C{  void displayState(){  if (state) {    if (isIcon()) {      super.setIcon(active);    }  } else {    if (isIcon()) {      super.setIcon(error);    }  }  updateSize();  revalidate();  return;}  }
class C{  public static double min(final double... array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  }  Validate.isTrue(array.length != 0,"Array cannot be empty.");  double min=array[0];  for (int i=1; i < array.length; i++) {    min=min(array[i],min);  }  return min;}  }
class C{  protected void waitForExternalStoreMount() throws Exception {  String extStorageState=Environment.getExternalStorageState();  int currentWaitTime=0;  while (!extStorageState.equals(Environment.MEDIA_MOUNTED)) {    Log.i(LOG_TAG,"Waiting for SD card...");    currentWaitTime=timeoutWait(currentWaitTime,DEFAULT_WAIT_POLL_TIME,DEFAULT_MAX_WAIT_TIME,"Timed out waiting for SD Card to be ready!");    extStorageState=Environment.getExternalStorageState();  }}  }
class C{  private static String trimTrailingSlashes(String s){  int n=s.length();  if (n == 0)   return s;  n--;  while ((n > 0) && isSlash(s.charAt(n))) {    if ((n >= 1) && s.charAt(n - 1) == ':')     break;    n--;  }  return s.substring(0,n + 1);}  }
class C{  public synchronized boolean build(){  reset();  while (TrainManager.instance().isAnyTrainBuilding()) {    try {      wait(100);    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  runScripts(getBuildScripts());  TrainBuilder tb=new TrainBuilder();  boolean results=tb.build(this);  setPrinted(false);  setSwitchListStatus(UNKNOWN);  runScripts(getAfterBuildScripts());  return results;}  }
class C{  public void invokeAPI(EndPointInfo apiEndPointInfo,APIResultCallBack apiResultCallBack,int requestCode,Context context){  if (Constants.DEBUG_ENABLED) {    Log.d(TAG,"invokeAPI called");  }  this.apiResultCallback=apiResultCallBack;  this.apiEndPointInfo=apiEndPointInfo;  if (IdentityProxy.getInstance().getContext() == null) {    IdentityProxy.getInstance().setContext(context);  }  IdentityProxy.getInstance().setRequestCode(requestCode);  IdentityProxy.getInstance().requestToken(IdentityProxy.getInstance().getContext(),this,this.clientKey,this.clientSecret);}  }
class C{  public Object onMessage(String id,Object data){  if ("onReceivedError".equals(id)) {    JSONObject d=(JSONObject)data;    try {      this.onReceivedError(d.getInt("errorCode"),d.getString("description"),d.getString("url"));    } catch (    JSONException e) {      e.printStackTrace();    }  } else   if ("exit".equals(id)) {    finish();  }  return null;}  }
class C{  public void testSetF4Momentary(){  boolean f4Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF4Momentary(f4Momentary);}  }
class C{  public static synchronized ControllerPlan findLatestPlan(RVMMethod method){  LinkedList<ControllerPlan> planList=findPlan(method);  if (planList == null) {    return null;  } else {    return planList.getLast();  }}  }
class C{  public void enableBluetooth(Activity activity,int requestCode){  if (!mBluetoothAdapter.isEnabled()) {    Intent enableBtIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);    activity.startActivityForResult(enableBtIntent,requestCode);  }}  }
class C{  public RemoteFile(final String name){  this.name=Preconditions.checkNotNull(name,"IE00770: Name argument can not be null");}  }
class C{  protected char scanSurrogates(){  if (surrogatesSupported && Character.isHighSurrogate(ch)) {    char high=ch;    scanChar();    if (Character.isLowSurrogate(ch)) {      return high;    }    ch=high;  }  return 0;}  }
class C{  public boolean validSystemNameFormat(String systemName){  return ((systemName.startsWith(prefix + "l") || systemName.startsWith(prefix + "L")) && Integer.valueOf(systemName.substring(prefix.length() + 1)).intValue() > 0);}  }
class C{  @Override public void close() throws IOException {  table.close();}  }
class C{  private Control createDetailsViewer(final Composite parent){  if (details == null) {    return null;  }  final Text text=new Text(parent,SWT.MULTI | SWT.READ_ONLY | SWT.BORDER| SWT.H_SCROLL| SWT.V_SCROLL);  text.setLayoutData(new GridData(GridData.FILL_BOTH));  final StringWriter writer=new StringWriter(1000);  if (details instanceof Throwable) {    appendException(new PrintWriter(writer),(Throwable)details);  } else   if (details instanceof IStatus) {    appendCommandStatus(new PrintWriter(writer),(IStatus)details,0);  }  text.setText(writer.toString());  return text;}  }
class C{  public final void store8(int addr,int value){  if (logMemoryMessages) {    System.err.println("Store8 address: 0x" + Integer.toHexString(addr) + " val: 0x"+ Format.asHex((value & 0xFF),2)+ " - 0b"+ StringUtils.leftPad(Integer.toBinaryString(value & 0xFF),8).replace('0',' '));  }  byte[] pageData=writableMemory[getPTE(addr)];  if (pageData == null) {    map(truncateToPage(addr),PAGE_SIZE,true,true,true);    pageData=writableMemory[getPTE(addr)];  }  pageData[getOffset(addr)]=(byte)value;}  }
class C{  public static boolean verifySignature(String signedRequestHex,ContainerRequestContext context,Certificate certificate) throws InvalidKeyException, SignatureException, DecoderException {  if (signedRequestHex == null) {    return false;  }  String stringToSign=buildStringToSign(context);  return RequestSigner.verify(signedRequestHex,stringToSign,certificate);}  }
class C{  public static Range iterateToFindRangeBounds(XYDataset dataset,List visibleSeriesKeys,Range xRange,boolean includeInterval){  ParamChecks.nullNotPermitted(dataset,"dataset");  ParamChecks.nullNotPermitted(visibleSeriesKeys,"visibleSeriesKeys");  ParamChecks.nullNotPermitted(xRange,"xRange");  double minimum=Double.POSITIVE_INFINITY;  double maximum=Double.NEGATIVE_INFINITY;  if (includeInterval && dataset instanceof OHLCDataset) {    OHLCDataset ohlc=(OHLCDataset)dataset;    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.indexOf(seriesKey);      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double x=ohlc.getXValue(series,item);        if (xRange.contains(x)) {          double lvalue=ohlc.getLowValue(series,item);          double uvalue=ohlc.getHighValue(series,item);          if (!Double.isNaN(lvalue)) {            minimum=Math.min(minimum,lvalue);          }          if (!Double.isNaN(uvalue)) {            maximum=Math.max(maximum,uvalue);          }        }      }    }  } else   if (includeInterval && dataset instanceof BoxAndWhiskerXYDataset) {    BoxAndWhiskerXYDataset bx=(BoxAndWhiskerXYDataset)dataset;    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.indexOf(seriesKey);      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double x=bx.getXValue(series,item);        if (xRange.contains(x)) {          Number lvalue=bx.getMinRegularValue(series,item);          Number uvalue=bx.getMaxRegularValue(series,item);          if (lvalue != null) {            minimum=Math.min(minimum,lvalue.doubleValue());          }          if (uvalue != null) {            maximum=Math.max(maximum,uvalue.doubleValue());          }        }      }    }  } else   if (includeInterval && dataset instanceof IntervalXYDataset) {    IntervalXYDataset ixyd=(IntervalXYDataset)dataset;    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.indexOf(seriesKey);      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double x=ixyd.getXValue(series,item);        if (xRange.contains(x)) {          double yvalue=ixyd.getYValue(series,item);          double lvalue=ixyd.getStartYValue(series,item);          double uvalue=ixyd.getEndYValue(series,item);          if (!Double.isNaN(yvalue)) {            minimum=Math.min(minimum,yvalue);            maximum=Math.max(maximum,yvalue);          }          if (!Double.isNaN(lvalue)) {            minimum=Math.min(minimum,lvalue);          }          if (!Double.isNaN(uvalue)) {            maximum=Math.max(maximum,uvalue);          }        }      }    }  } else {    Iterator iterator=visibleSeriesKeys.iterator();    while (iterator.hasNext()) {      Comparable seriesKey=(Comparable)iterator.next();      int series=dataset.indexOf(seriesKey);      int itemCount=dataset.getItemCount(series);      for (int item=0; item < itemCount; item++) {        double x=dataset.getXValue(series,item);        double y=dataset.getYValue(series,item);        if (xRange.contains(x)) {          if (!Double.isNaN(y)) {            minimum=Math.min(minimum,y);            maximum=Math.max(maximum,y);          }        }      }    }  }  if (minimum == Double.POSITIVE_INFINITY) {    return null;  } else {    return new Range(minimum,maximum);  }}  }
class C{  default void afterUninstall(){}  }
class C{  public ComparableTextSpan(int start,int end){  this(start,end,null);}  }
class C{  public void testBadInputs() throws Exception {  if (random().nextBoolean()) {    assertU(adoc("id","42","str","z","float","99.99","int","42"));    assertU(adoc("id","66","str","x","float","22.00","int","-66"));  } else {    assertU(commit());  }  assertU(commit());  for (  String c : new String[]{"","   ","all the docs please!"}) {    assertFail(params("q","*:*","sort","id desc",CURSOR_MARK_PARAM,c),ErrorCode.BAD_REQUEST,"Unable to parse");  }  assertFail(params("q","*:*","sort","score desc",CURSOR_MARK_PARAM,CURSOR_MARK_START),ErrorCode.BAD_REQUEST,"uniqueKey field");  assertFail(params("q","*:*","sort","_docid_ asc, id desc",CURSOR_MARK_PARAM,CURSOR_MARK_START),ErrorCode.BAD_REQUEST,"_docid_");  assertFail(params("q","*:*","sort","id desc",CommonParams.TIME_ALLOWED,"1000",CURSOR_MARK_PARAM,CURSOR_MARK_START),ErrorCode.BAD_REQUEST,CommonParams.TIME_ALLOWED);  assertFail(params("q","*:*","sort","id desc",GroupParams.GROUP,"true",GroupParams.GROUP_FIELD,"str",CURSOR_MARK_PARAM,CURSOR_MARK_START),ErrorCode.BAD_REQUEST,"Grouping");}  }
class C{  public static LinkedList<IPoint[]> compute(IPoint[] points){  LinkedList<IPoint[]> list=new LinkedList<IPoint[]>();  Selection.qsort(points,0,points.length - 1,IPoint.xy_sorter);  LinkedList<IPoint> pointsList=new LinkedList<IPoint>();  for (  IPoint ip : points) {    pointsList.add(ip);  }  IConvexHull alg=new ConvexHullScan();  while (points.length > 0) {    IPoint newPoints[]=AklToussaint.reduce(points);    IPoint[] hull=alg.compute(newPoints);    list.add(hull);    for (    IPoint hp : hull) {      pointsList.remove(hp);    }    points=pointsList.toArray(new IPoint[]{});  }  return list;}  }
class C{  public void neg(int size,Register dst,Register src){  sub(size,dst,zr,src);}  }
class C{  private void addEnumMembers(JCClassDecl tree,Env<AttrContext> env){  JCExpression valuesType=make.Type(new ArrayType(tree.sym.type,syms.arrayClass));  JCMethodDecl values=make.MethodDef(make.Modifiers(Flags.PUBLIC | Flags.STATIC),names.values,valuesType,List.<JCTypeParameter>nil(),List.<JCVariableDecl>nil(),List.<JCExpression>nil(),null,null);  memberEnter(values,env);  JCMethodDecl valueOf=make.MethodDef(make.Modifiers(Flags.PUBLIC | Flags.STATIC),names.valueOf,make.Type(tree.sym.type),List.<JCTypeParameter>nil(),List.of(make.VarDef(make.Modifiers(Flags.PARAMETER | Flags.MANDATED),names.fromString("name"),make.Type(syms.stringType),null)),List.<JCExpression>nil(),null,null);  memberEnter(valueOf,env);}  }
class C{  @Uninterruptible public static Offset slotAsOffset(int slot){  return Offset.fromIntSignExtend((slot - middleOfTable) << LOG_BYTES_IN_INT);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.labelPaint=SerialUtilities.readPaint(stream);  this.dividerStroke=SerialUtilities.readStroke(stream);  this.dividerPaint=SerialUtilities.readPaint(stream);}  }
class C{  public static List<String> readLines(final InputStream input,final String encoding) throws IOException {  return IOUtils.readLines(input,Charsets.toCharset(encoding));}  }
class C{  public EventLoopGroup eventLoopGroup(){  return eventLoopGroup;}  }
class C{  private Object readResolve(){  return object;}  }
class C{  static double calculateDepartureTime(Activity act,double now,PlansConfigGroup.ActivityDurationInterpretation activityDurationInterpretation){  if (act.getMaximumDuration() == Time.UNDEFINED_TIME && (act.getEndTime() == Time.UNDEFINED_TIME)) {    return Double.POSITIVE_INFINITY;  } else {    double departure=0;    if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.minOfDurationAndEndTime)) {      if (act.getMaximumDuration() == Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else       if (act.getEndTime() == Time.UNDEFINED_TIME) {        departure=now + act.getMaximumDuration();      } else {        departure=Math.min(act.getEndTime(),now + act.getMaximumDuration());      }    } else     if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.endTimeOnly)) {      if (act.getEndTime() != Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else {        throw new IllegalStateException("activity end time not set and using something else not allowed.");      }    } else     if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.tryEndTimeThenDuration)) {      if (act.getEndTime() != Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else       if (act.getMaximumDuration() != Time.UNDEFINED_TIME) {        departure=now + act.getMaximumDuration();      } else {        throw new IllegalStateException("neither activity end time nor activity duration defined; don't know what to do.");      }    } else {      throw new IllegalStateException("should not happen");    }    if (departure < now) {      departure=now;    }    return departure;  }}  }
class C{  private static void uncollapseParents(final IViewNode<?> node){  if (node.getParentGroup() != null) {    uncollapseParents(node.getParentGroup());    node.getParentGroup().setCollapsed(false);  }}  }
class C{  private static double[][] createPhiTransform(double originLon,double originLat,double[][] phiMatrix){  if (phiMatrix == null) {    phiMatrix=new double[3][3];  }  originLon=StrictMath.toRadians(originLon);  originLat=StrictMath.toRadians(originLat);  final double sLon=StrictMath.sin(originLon);  final double cLon=StrictMath.cos(originLon);  final double sLat=StrictMath.sin(originLat);  final double cLat=StrictMath.cos(originLat);  phiMatrix[0][0]=-sLon;  phiMatrix[0][1]=cLon;  phiMatrix[0][2]=0.0D;  phiMatrix[1][0]=-sLat * cLon;  phiMatrix[1][1]=-sLat * sLon;  phiMatrix[1][2]=cLat;  phiMatrix[2][0]=cLat * cLon;  phiMatrix[2][1]=cLat * sLon;  phiMatrix[2][2]=sLat;  return phiMatrix;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.597 -0500",hash_original_method="848BE9CB29607B1E2AFE44721BE481D7",hash_generated_method="C3456B90876EA554F99D5D9A6A620D47") private ArrayList<ApnSetting> buildWaitingApns(String requestedApnType){  ArrayList<ApnSetting> apnList=new ArrayList<ApnSetting>();  if (requestedApnType.equals(Phone.APN_TYPE_DUN)) {    ApnSetting dun=fetchDunApn();    if (dun != null) {      apnList.add(dun);      if (DBG)       log("buildWaitingApns: X added APN_TYPE_DUN apnList=" + apnList);      return apnList;    }  }  String operator=mPhone.mIccRecords.getOperatorNumeric();  int radioTech=mPhone.getServiceState().getRadioTechnology();  if (requestedApnType.equals(Phone.APN_TYPE_DEFAULT)) {    if (canSetPreferApn && mPreferredApn != null) {      if (DBG) {        log("buildWaitingApns: Preferred APN:" + operator + ":"+ mPreferredApn.numeric+ ":"+ mPreferredApn);      }      if (mPreferredApn.numeric.equals(operator)) {        if (mPreferredApn.bearer == 0 || mPreferredApn.bearer == radioTech) {          apnList.add(mPreferredApn);          if (DBG)           log("buildWaitingApns: X added preferred apnList=" + apnList);          return apnList;        } else {          if (DBG)           log("buildWaitingApns: no preferred APN");          setPreferredApn(-1);          mPreferredApn=null;        }      } else {        if (DBG)         log("buildWaitingApns: no preferred APN");        setPreferredApn(-1);        mPreferredApn=null;      }    }  }  if (mAllApns != null) {    for (    ApnSetting apn : mAllApns) {      if (apn.canHandleType(requestedApnType)) {        if (apn.bearer == 0 || apn.bearer == radioTech) {          if (DBG)           log("apn info : " + apn.toString());          apnList.add(apn);        }      }    }  } else {    loge("mAllApns is empty!");  }  if (DBG)   log("buildWaitingApns: X apnList=" + apnList);  return apnList;}  }
class C{  private void initGUI(){  scrollPane=new ExtendedJScrollPane();  scrollPane.setBorder(null);  innerPanel=new JPanel();}  }
class C{  public CeylonRepoManagerBuilder extraUserRepos(List<String> extraUserRepos){  this.extraUserRepos=extraUserRepos;  return this;}  }
class C{  public void add(Path directory,String filter,Path suffix){  try (DirectoryStream<Path> ds=Files.newDirectoryStream(directory,filter)){    ClasspathContainer container=new ClasspathContainer();    container.initialize(suffix.getNameCount());    for (    Path dir : ds) {      Path path=dir.resolve(suffix).normalize();      addURL(container,path.toUri().toURL());    }  } catch (  IOException e) {    throw new LabException(String.format("Failed adding directory (%s) sub-folders to the classpath",directory.toString()));  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:46.408 -0500",hash_original_method="2C00C7AAB5402D365DFE9454D01A448E",hash_generated_method="7E78560CD6C15B30DB0177E24FE61CB0") static CallerInfo doSecondaryLookupIfNecessary(Context context,String number,CallerInfo previousResult){  if (!previousResult.contactExists && PhoneNumberUtils.isUriNumber(number)) {    String username=PhoneNumberUtils.getUsernameFromUriNumber(number);    if (PhoneNumberUtils.isGlobalPhoneNumber(username)) {      previousResult=getCallerInfo(context,Uri.withAppendedPath(PhoneLookup.CONTENT_FILTER_URI,Uri.encode(username)));    }  }  return previousResult;}  }
class C{  private void hideSubMenus(ViewGroup viewGroup,final AnimatorListenerAdapter listener){  if (viewGroup == null)   return;  int childCount=viewGroup.getChildCount();  for (int i=0; i < childCount; i++) {    View view=viewGroup.getChildAt(i);    view.animate().translationY(mScreenHeight).setDuration(mDuration).setListener(listener).start();  }}  }
class C{  static Lazyable<ExplicitVersionPolicy> createLazyable(){  return new Lazyable<>(new ExplicitVersionPolicy(),null);}  }
class C{  private ComponentAnimation animateLayout(final int duration,boolean wait,int opacity,boolean addAnimation){  Form f=getComponentForm();  if (f == null) {    return null;  }  setShouldCalcPreferredSize(true);  enableLayoutOnPaint=false;  final int componentCount=getComponentCount();  int[] beforeX=new int[componentCount];  int[] beforeY=new int[componentCount];  int[] beforeW=new int[componentCount];  int[] beforeH=new int[componentCount];  final Motion[] xMotions=new Motion[componentCount];  final Motion[] yMotions=new Motion[componentCount];  final Motion[] wMotions=new Motion[componentCount];  final Motion[] hMotions=new Motion[componentCount];  for (int iter=0; iter < componentCount; iter++) {    Component current=getComponentAt(iter);    beforeX[iter]=current.getX();    beforeY[iter]=current.getY();    beforeW[iter]=current.getWidth();    beforeH[iter]=current.getHeight();  }  layoutContainer();  for (int iter=0; iter < componentCount; iter++) {    Component current=getComponentAt(iter);    xMotions[iter]=createAnimateMotion(beforeX[iter],current.getX(),duration);    yMotions[iter]=createAnimateMotion(beforeY[iter],current.getY(),duration);    wMotions[iter]=createAnimateMotion(beforeW[iter],current.getWidth(),duration);    hMotions[iter]=createAnimateMotion(beforeH[iter],current.getHeight(),duration);    xMotions[iter].start();    yMotions[iter].start();    wMotions[iter].start();    hMotions[iter].start();    current.setX(beforeX[iter]);    current.setY(beforeY[iter]);    current.setWidth(beforeW[iter]);    current.setHeight(beforeH[iter]);  }  MorphAnimation a=new MorphAnimation(this,duration,new Motion[][]{xMotions,yMotions,wMotions,hMotions});  setAnimOpacity(opacity,255,a,componentCount,duration);  if (addAnimation) {    if (wait) {      getAnimationManager().addAnimationAndBlock(a);    } else {      getAnimationManager().addAnimation(a);    }  } else {    a.dontRevalidate=true;  }  return a;}  }
class C{  public boolean isVariableReferenced(IVariableBinding binding){  VariableReferenceFinder finder=new VariableReferenceFinder(binding);  fDeclaration.accept(finder);  return finder.getResult();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPaymentCheck[");  sb.append(get_ID()).append("-").append(getDocumentNo()).append("-").append(getPayAmt()).append(",PaymetRule=").append(getPaymentRule()).append(",Qty=").append(getQty()).append("]");  return sb.toString();}  }
class C{  @Override public void process(final Task<Diff> task) throws ConfigurationException, IOException, SQLConsumerException {  try {    List<String> data=dataFileEncoder.encodeTask(task);    for (    String d : data) {      this.writer.write(d + ";");      this.writer.flush();    }    if (task.getTaskType() == TaskTypes.TASK_FULL || task.getTaskType() == TaskTypes.TASK_PARTIAL_LAST) {      if (this.dataFile.length() > LIMIT_SQL_FILE_SIZE) {        writeHeader();      }      if (!MODE_STATISTICAL_OUTPUT) {        System.out.println(task.toString());      }    } else {      System.out.println(task.toString());    }  } catch (  DecodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }catch (  EncodingException e) {    throw ErrorFactory.createSQLConsumerException(ErrorKeys.DIFFTOOL_SQLCONSUMER_FILEWRITER_EXCEPTION,e);  }}  }
class C{  private void handleFetchError(KafkaConsumerInfo<Long> consumerInfo,SimpleConsumer consumer,long readOffset,short errorCode){  TopicPartition topicPartition=consumerInfo.getTopicPartition();  String topic=topicPartition.getTopic();  int partition=topicPartition.getPartition();  LOG.warn("Failed to fetch from broker {}:{} for topic-partition {}-{} with error code {}",consumer.host(),consumer.port(),topic,partition,errorCode);  if (errorCode == ErrorMapping.OffsetOutOfRangeCode()) {    long earliest=getReadOffset(consumer,topic,partition,kafka.api.OffsetRequest.EarliestTime());    if (readOffset < earliest) {      consumerInfo.setReadOffset(earliest);    } else {      consumerInfo.setReadOffset(getReadOffset(consumer,topic,partition,kafka.api.OffsetRequest.LatestTime()));    }  } else {    kafkaConsumers.invalidate(topicPartition);  }}  }
class C{  public void testTruncatedStrings(){  StringBuffer sb=new StringBuffer();  for (int i=1; i <= 1000; i++) {    sb.append("0123456789");  }  String bigString=sb.toString();  MTest testPO=new MTest(getCtx(),getClass().getName(),1);  testPO.set_TrxName(getTrxName());  POInfo info=POInfo.getPOInfo(getCtx(),MTest.Table_ID);  int maxLength=info.getFieldLength(info.getColumnIndex(MTest.COLUMNNAME_Name));{    testPO.set_ValueOfColumn(MTest.COLUMNNAME_Name,bigString.substring(0,maxLength - 1));    String resultString=(String)testPO.get_Value(MTest.COLUMNNAME_Name);    assertEquals("String was not truncated correctly (1)",maxLength - 1,resultString.length());    testPO.setName(bigString.substring(0,maxLength - 1));    assertEquals("String was not truncated correctly (2)",maxLength - 1,testPO.getName().length());  }{    testPO.set_ValueOfColumn(MTest.COLUMNNAME_Name,bigString.substring(0,maxLength));    String resultString=(String)testPO.get_Value(MTest.COLUMNNAME_Name);    assertEquals("String was not truncated correctly (3)",maxLength,resultString.length());    testPO.setName(bigString.substring(0,maxLength));    assertEquals("String was not truncated correctly (4)",maxLength,testPO.getName().length());  }{    testPO.set_ValueOfColumn(MTest.COLUMNNAME_Name,bigString);    String resultString=(String)testPO.get_Value(MTest.COLUMNNAME_Name);    assertEquals("String was not truncated correctly (5)",maxLength,resultString.length());    testPO.setName(bigString);    assertEquals("String was not truncated correctly (6)",maxLength,testPO.getName().length());  }}  }
class C{  public void start(){  Listener listener=new Listener(this);  this.glass.setVisible(true);  this.cancelButton.addActionListener(listener);  addPropertyChangeListener(listener);  execute();}  }
class C{  public void trace(Object message,Throwable t){}  }
class C{  public boolean performAnswerCheck(){  adjustBackground(mAnswer.getAnswerCorrect());  boolean answerCorrect=mAnswer.getAnswerCorrect() == mToggleButton.isChecked();  if (mToggleButton.isChecked()) {    mSelectionCorrectMarker.setVisibility(View.VISIBLE);    if (answerCorrect) {      mSelectionCorrectMarker.setImageResource(R.drawable.ic_check);    } else {      mSelectionCorrectMarker.setImageResource(R.drawable.ic_cross);    }  } else {    mSelectionCorrectMarker.setVisibility(View.GONE);  }  mSelectionCorrectMarker.bringToFront();  mToggleButton.setEnabled(false);  return answerCorrect;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == AccessibleTypeElement.class) {switch (baseFeatureID) {case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_TYPE_ACCESS_MODIFIER:      return TypesPackage.TOBJECT_PROTOTYPE__DECLARED_TYPE_ACCESS_MODIFIER;case TypesPackage.ACCESSIBLE_TYPE_ELEMENT__DECLARED_PROVIDED_BY_RUNTIME:    return TypesPackage.TOBJECT_PROTOTYPE__DECLARED_PROVIDED_BY_RUNTIME;default :  return -1;}}if (baseClass == DeclaredTypeWithAccessModifier.class) {switch (baseFeatureID) {default :return -1;}}if (baseClass == ArrayLike.class) {switch (baseFeatureID) {case TypesPackage.ARRAY_LIKE__DECLARED_ELEMENT_TYPE:return TypesPackage.TOBJECT_PROTOTYPE__DECLARED_ELEMENT_TYPE;default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public UnionPathIterator(Compiler compiler,int opPos) throws javax.xml.transform.TransformerException {  super();  opPos=OpMap.getFirstChildPos(opPos);  loadLocationPaths(compiler,opPos,0);}  }
class C{  public void removeAllGraphModelListeners(){  m_listeners.clear();}  }
class C{  protected String int2singlealphaCount(long val,CharArrayWrapper table){  int radix=table.getLength();  if (val > radix) {    return getZeroString();  } else   return (new Character(table.getChar((int)val - 1))).toString();}  }
class C{  private void tuneHorizontalSplitter(Element el){  el.getParentElement().getStyle().setProperty("zIndex","1000");  el.getParentElement().getStyle().setProperty("overflow","visible");  el.getStyle().setProperty("height","3px");  el.getStyle().setProperty("marginTop","-2px");  el.getStyle().setProperty("backgroundColor","transparent");  DivElement delimiter=Document.get().createDivElement();  delimiter.getStyle().setProperty("position","absolute");  delimiter.getStyle().setProperty("width","100%");  delimiter.getStyle().setProperty("height","1px");  delimiter.getStyle().setProperty("left","0px");  delimiter.getStyle().setProperty("backgroundColor",Style.getSplitterSmallBorderColor());  delimiter.getStyle().setProperty("top","2px");  el.appendChild(delimiter);}  }
class C{  public boolean registryHasElement(String hashcode){  return (registry.containsKey(hashcode));}  }
class C{  public SortableCategoryDataProvider(final List<CategoryDecorator> categories){  this.categories=categories;}  }
class C{  public Bundler putLongArray(String key,long[] value){  bundle.putLongArray(key,value);  return this;}  }
class C{  public void reset(){  edge_index.clear();}  }
class C{  public double newValue(int x,int y,double value){  final Grid2D field=(Grid2D)this.field;  if (field instanceof IntGrid2D)   value=(int)value;  if (map.validLevel(value))   return value;  if (field != null) {    if (field instanceof DoubleGrid2D)     return ((DoubleGrid2D)field).field[x][y]; else     return ((IntGrid2D)field).field[x][y];  } else   return map.defaultValue();}  }
class C{  public TechnicalServiceNotAliveException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public final short readLEShort(byte[] byteArray){  return (short)((byteArray[1] & 0xff) << 8 | (byteArray[0] & 0xff));}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(1);  newVector.addElement(new Option("\tSpecify shrinkage rate. " + "(default = 1.0, ie. no shrinkage)\n","S",1,"-S"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  private static void printSegments(Segments segments){  System.out.println("\n----- Segments Collection -----\n");  for (  Segment segment : segments.getItems()) {    System.out.println("Advanced Segment ID: " + segment.getId());    System.out.println("Advanced Segment Name: " + segment.getName());    System.out.println("Advanced Segment Definition: " + segment.getDefinition());    if (segment.getCreated() != null) {      System.out.println("Advanced Segment Created: " + segment.getCreated());      System.out.println("Advanced Segment Updated: " + segment.getUpdated());    }  }}  }
class C{  public void addViewActionContainer(final String actionContainerId,final ActionContainer actionContainer){  parser.getData().addActionContainer(actionContainerId,actionContainer);}  }
class C{  public ByteStream(AbstractDriver driver,String name,byte minValue,byte maxValue,byte zeroValue,byte defaultValue,String stringPre,String stringPost,int presentation,int paintStyle,int indexMaxStream,Color colour,boolean summary){  super(driver,BYTE_TYPE,name,minValue,maxValue,zeroValue,defaultValue,stringPre,stringPost,presentation,paintStyle,indexMaxStream,colour,summary);  data=(byte[])GCspy.util.createDataArray(new byte[0],driver.getMaxTileNum());  this.defaultValue=defaultValue;}  }
class C{  private String stmtId(StatementProxy statement){  StringBuffer buf=new StringBuffer();  if (statement instanceof CallableStatementProxy) {    buf.append("cstmt-");  } else   if (statement instanceof PreparedStatementProxy) {    buf.append("pstmt-");  } else {    buf.append("stmt-");  }  buf.append(statement.getId());  return buf.toString();}  }
class C{  public static void cacheReset(String tableName,int Record_ID){  log.config("TableName=" + tableName + ", Record_ID="+ Record_ID);  if (isServerActive()) {    log.config("trying server");    try {      Server server=CConnection.get().getServer();      if (server != null) {        server.cacheReset(tableName,Record_ID);      }    } catch (    Exception e) {      log.log(Level.SEVERE,"ex",e);      s_server=null;    }  }}  }
class C{  public void checkStateErrors(MediaRecorderStateErrors stateErrors){  assertTrue(!stateErrors.errorInPreparedState);  assertTrue(stateErrors.errorInRecordingState);  assertTrue(stateErrors.errorInInitialState);  assertTrue(stateErrors.errorInInitialStateAfterReset);  assertTrue(stateErrors.errorInInitialStateAfterStop);  assertTrue(stateErrors.errorInInitializedState);  assertTrue(stateErrors.errorInErrorState);  assertTrue(stateErrors.errorInDataSourceConfiguredState);}  }
class C{  public void addFillAlpha(float a){  addCommand(new PDFFillAlphaCmd(a));}  }
class C{  public TimeFormat(NumberFormat numberFormat){  this.numberFormat=numberFormat;}  }
class C{  public void test_create01() throws Exception {  final String namespace2="kb2-" + UUID.randomUUID();  doTestCreate(namespace2);}  }
class C{  @Override public String globalInfo(){  return "CC method with probabilistic output (CCp).\n" + "This version includes probabilistic output in the distributionForInstance, like other MT methods.\n" + "i.e.: y[j+L] := P(y[j]|x) (this is usefull when used in an ensemble).";}  }
class C{  protected HTMLElement(){}  }
class C{  protected void addTypePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_TypedElement_type_feature"),getString("_UI_PropertyDescriptor_description","_UI_TypedElement_type_feature","_UI_TypedElement_type"),TypesPackage.Literals.TYPED_ELEMENT__TYPE,true,false,true,null,null,null));}  }
class C{  SolrInputField field(String name,float boost,Object... values){  SolrInputField f=new SolrInputField(name);  for (  Object v : values) {    f.addValue(v,1.0F);  }  f.setBoost(boost);  return f;}  }
class C{  public static void createDirectory(File dir){  FileUtilSupport.getDefault().createDirectory(dir);}  }
class C{  static public String executeFunction(String[] values){  try {    if (values[2].equalsIgnoreCase("BYTE_Max"))     return DataTypeFunctions.BYTE_Max(); else     if (values[2].equalsIgnoreCase("BYTE_Min"))     return DataTypeFunctions.BYTE_Min(); else     if (values[2].equalsIgnoreCase("BYTE_Max_Plus"))     return DataTypeFunctions.BYTE_Max_Plus(); else     if (values[2].equalsIgnoreCase("BYTE_Min_Minus"))     return DataTypeFunctions.BYTE_Min_Minus(); else     if (values[2].equalsIgnoreCase("SHORT_Max"))     return DataTypeFunctions.SHORT_Max(); else     if (values[2].equalsIgnoreCase("SHORT_Min"))     return DataTypeFunctions.SHORT_Min(); else     if (values[2].equalsIgnoreCase("SHORT_Max_Plus"))     return DataTypeFunctions.SHORT_Max_Plus(); else     if (values[2].equalsIgnoreCase("SHORT_Min_Minus"))     return DataTypeFunctions.SHORT_Min_Minus(); else     if (values[2].equalsIgnoreCase("INT_Max"))     return DataTypeFunctions.INT_Max(); else     if (values[2].equalsIgnoreCase("INT_Min"))     return DataTypeFunctions.INT_Min(); else     if (values[2].equalsIgnoreCase("INT_Max_Plus"))     return DataTypeFunctions.INT_Max_Plus(); else     if (values[2].equalsIgnoreCase("INT_Min_Minus"))     return DataTypeFunctions.INT_Min_Minus(); else     if (values[2].equalsIgnoreCase("LONG_Max"))     return DataTypeFunctions.LONG_Max(); else     if (values[2].equalsIgnoreCase("LONG_Min"))     return DataTypeFunctions.LONG_Min(); else     if (values[2].equalsIgnoreCase("LONG_Max_Plus"))     return DataTypeFunctions.LONG_Max_Plus(); else     if (values[2].equalsIgnoreCase("LONG_Min_Minus"))     return DataTypeFunctions.LONG_Min_Minus();    return "";  } catch (  Exception ex) {    return "";  }}  }
class C{  @Override public void alarm(){}  }
class C{  public java.sql.Date readDate() throws SQLException {  return (java.sql.Date)getNextAttribute();}  }
class C{  public int numberOfColumns(){  if (category0 == null) {    return 0;  } else   if (category1 == null) {    return 1;  } else   if (category2 == null) {    return 2;  }  return 3;}  }
class C{  public void addForeignKeyConstraint(String name,String sourceField,String targetField,String targetTable){  ForeignKeyConstraint foreignKey=new ForeignKeyConstraint(name,sourceField,targetField,targetTable);  addForeignKeyConstraint(foreignKey);}  }
class C{  public static void createClientCache(String host,Integer port1,Integer port2) throws Exception {  StatsBugDUnitTest test=new StatsBugDUnitTest();  cache=test.createCache(createProperties1());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  pool=(PoolImpl)ClientServerTestCase.configureConnectionPool(factory,host,new int[]{port1.intValue(),port2.intValue()},true,-1,3,null);  RegionAttributes attrs=factory.create();  Region region=cache.createRegion(REGION_NAME,attrs);  region.registerInterest("ALL_KEYS");  LogWriterUtils.getLogWriter().info("Client cache created");}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof LogFormat)) {    return false;  }  LogFormat that=(LogFormat)obj;  if (this.base != that.base) {    return false;  }  if (!this.baseLabel.equals(that.baseLabel)) {    return false;  }  if (this.baseLog != that.baseLog) {    return false;  }  if (this.showBase != that.showBase) {    return false;  }  if (!this.formatter.equals(that.formatter)) {    return false;  }  return super.equals(obj);}  }
class C{  public String toString(){  return "Ellipsoid[name=" + name + ", radius="+ radius+ ", eccsq="+ eccsq+ "]";}  }
class C{  public boolean isCaseSensitive(){  return sensitive;}  }
class C{  public static <U>Stream<U> concat(final Object o,final Stream<U> stream){  Stream<U> first=null;  if (o instanceof Stream) {    first=(Stream)o;  } else   if (o instanceof Iterable) {    first=stream((Iterable)o);  } else   if (o instanceof Streamable) {    first=((Streamable)o).stream();  } else {    first=Stream.of((U)o);  }  return Stream.concat(first,stream);}  }
class C{  public boolean calculatePrice(){  if (m_M_Product_ID == 0 || (m_found != null && !m_found.booleanValue()))   return false;  if (m_useVendorBreak) {    if (!m_calculated) {      m_calculated=calculatePLV_VB();      if (m_calculated)       m_vendorbreak=true;    }    if (!m_calculated) {      m_calculated=calculatePL_VB();      if (m_calculated)       m_vendorbreak=true;    }    if (!m_calculated) {      m_calculated=calculateBPL_VB();      if (m_calculated)       m_vendorbreak=true;    }  }  if (!m_calculated)   m_calculated=calculatePLV();  if (!m_calculated)   m_calculated=calculatePL();  if (!m_calculated)   m_calculated=calculateBPL();  if (!m_calculated)   setBaseInfo();  if (m_calculated && !m_vendorbreak)   calculateDiscount();  setPrecision();  m_found=new Boolean(m_calculated);  return m_calculated;}  }
class C{  public void startElement(String name,UIComponent componentForElement) throws IOException {  if (name == null) {    throw new NullPointerException(MessageUtils.getExceptionMessageString(MessageUtils.NULL_PARAMETERS_ERROR_MESSAGE_ID,"name"));  }  closeStartIfNecessary();  char firstChar=name.charAt(0);  if ((firstChar == 's') || (firstChar == 'S')) {    if ("script".equalsIgnoreCase(name) || "style".equalsIgnoreCase(name)) {      dontEscape=true;    }  }  writer.write("<");  writer.write(name);  closeStart=true;}  }
class C{  @Reference(title="Fast and accurate computation of binomial probabilities",authors="C. Loader",booktitle="",url="http://projects.scipy.org/scipy/raw-attachment/ticket/620/loader2000Fast.pdf") public static double pmf(double x,int n,double p){  if (x < 0 || x > n) {    return 0.;  }  if (p <= 0.) {    return x == 0 ? 1. : 0.;  }  if (p >= 1.) {    return x == n ? 1. : 0.;  }  final double q=1 - p;  if (x == 0) {    if (p < .1) {      return Math.exp(-devianceTerm(n,n * q) - n * p);    } else {      return Math.exp(n * Math.log(q));    }  }  if (x == n) {    if (p > .9) {      return Math.exp(-devianceTerm(n,n * p) - n * q);    } else {      return Math.exp(n * Math.log(p));    }  }  final double lc=stirlingError(n) - stirlingError(x) - stirlingError(n - x)- devianceTerm(x,n * p)- devianceTerm(n - x,n * q);  final double f=(MathUtil.TWOPI * x * (n - x)) / n;  return Math.exp(lc) / Math.sqrt(f);}  }
class C{  private boolean skipNextIF(){  Assert.isTrue(fToken == Symbols.TokenELSE);  while (true) {    nextToken();switch (fToken) {case Symbols.TokenRPAREN:case Symbols.TokenRBRACKET:case Symbols.TokenRBRACE:case Symbols.TokenGREATERTHAN:      skipScope();    break;case Symbols.TokenIF:  return true;case Symbols.TokenELSE:skipNextIF();break;case Symbols.TokenLPAREN:case Symbols.TokenLBRACE:case Symbols.TokenLBRACKET:case Symbols.TokenEOF:return false;}}}  }
class C{  public boolean hasExpired(){  if (maxAge == -1l) {    return false;  }  boolean expired=false;  if (maxAge <= 0l) {    expired=true;  }  return expired;}  }
class C{  private void add(int number,int prevEntryPos){  Entry entry;  Entry entryBefore=null;  Entry entryAfter=null;  boolean appended=false;  boolean prepended=false;  if (prevEntryPos != -1) {    entryBefore=list.get(prevEntryPos);    if (number == (entryBefore.getEnd() + 1)) {      entryBefore.setEnd(number);      appended=true;    }  }  int nextEntryPos=prevEntryPos + 1;  if ((nextEntryPos) < list.size()) {    entryAfter=list.get(nextEntryPos);    if (number == (entryAfter.getStart() - 1)) {      if (!appended) {        entryAfter.setStart(number);      } else {        entryAfter.setStart(entryBefore.getStart());        list.remove(prevEntryPos);        if (windowStartIndex > prevEntryPos)         windowStartIndex--;      }      prepended=true;    }  }  if (prepended || appended)   return;  if (list.size() < MAX_INTERVALS) {    entry=new Entry(number);    if (prevEntryPos < windowStartIndex)     windowStartIndex++;  } else {    int oldWindowStartIndex=windowStartIndex;    if (windowStartIndex == (list.size() - 1))     windowStartIndex=0;    entry=list.remove(oldWindowStartIndex);    windowStart=list.get(windowStartIndex).getStart();    entry.setStart(number);    entry.setEnd(number);    if (prevEntryPos >= oldWindowStartIndex) {      prevEntryPos--;    } else {      if (oldWindowStartIndex != windowStartIndex) {        if (prevEntryPos == -1)         windowStart=number;      } else {        windowStartIndex++;      }    }  }  list.add(prevEntryPos + 1,entry);}  }
class C{  public boolean isPatchVisible(PatchSet ps,ChangeData cd) throws OrmException {  checkArgument(cd.getId().equals(ps.getId().getParentKey()),"%s not for change %s",ps,cd.getId());  if (ps.isDraft() && !isDraftVisible(cd.db(),cd)) {    return false;  }  return isVisible(cd.db());}  }
class C{  public FileDictionary(InputStream dictFile,String fieldDelimiter){  in=new BufferedReader(IOUtils.getDecodingReader(dictFile,StandardCharsets.UTF_8));  this.fieldDelimiter=fieldDelimiter;}  }
class C{  protected DeferredTypeRefImpl(){  super();}  }
class C{  private static int[] WFG_create_A(int M,boolean degenerate){  assert M >= 2;  if (degenerate) {    int[] A=new int[M - 1];    A[0]=1;    return A;  } else {    int[] A=new int[M - 1];    Arrays.fill(A,1);    return A;  }}  }
class C{  public void removeFromRemoteGroups(Volume target){  RemoteDirectorGroup tgtGroup=dbClient.queryObject(RemoteDirectorGroup.class,target.getSrdfGroup());  RemoteDirectorGroup srcGroup=getAssociatedRemoteDirectorGroup(tgtGroup);  Volume source=dbClient.queryObject(Volume.class,target.getSrdfParent().getURI());  List<String> nativeGuids=newArrayList(source.getNativeGuid(),target.getNativeGuid());  removeFromRemoteGroup(tgtGroup,nativeGuids);  if (srcGroup != null) {    removeFromRemoteGroup(srcGroup,nativeGuids);  }}  }
class C{  public boolean equals(Object other){  if (other instanceof Name)   return table == ((Name)other).table && index == ((Name)other).getIndex(); else   return false;}  }
class C{  public static float dpToPx(float dp){  return dp * Resources.getSystem().getDisplayMetrics().density;}  }
class C{  public void testReloadEvictionLocalCache() throws Exception {  cacheMode=CacheMode.LOCAL;  doTest();}  }
class C{  public int indexOf(int elem){  runTo(-1);  return super.indexOf(elem);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.559 -0400",hash_original_method="BAA3ED875E19911C3E75F2F82717033E",hash_generated_method="EA1346BDE73EBCB5A920CE6AC9ADD2FD") private long readLines(RandomAccessFile reader) throws IOException {  StringBuilder sb=new StringBuilder();  long pos=reader.getFilePointer();  long rePos=pos;  int num;  boolean seenCR=false;  while (run && ((num=reader.read(inbuf)) != -1)) {    for (int i=0; i < num; i++) {      byte ch=inbuf[i];switch (ch) {case '\n':        seenCR=false;      listener.handle(sb.toString());    sb.setLength(0);  rePos=pos + i + 1;break;case '\r':if (seenCR) {sb.append('\r');}seenCR=true;break;default :if (seenCR) {seenCR=false;listener.handle(sb.toString());sb.setLength(0);rePos=pos + i + 1;}sb.append((char)ch);}}pos=reader.getFilePointer();}reader.seek(rePos);return rePos;}  }
class C{  public FilterQuery(final int count,final long[] follow){  this();  this.count=count;  this.follow=follow;}  }
class C{  private void invalidateLayout(){  m_size=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void delete(){  if (buffer instanceof FileBuffer)   ((FileBuffer)buffer).delete();}  }
class C{  public void runTest() throws Throwable {  String namespaceURI="http://www.ecommerce.org/";  String malformedName="prefix::local";  Document doc;  Element newElement;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newElement=doc.createElementNS(namespaceURI,malformedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  public void addRelation(HuiRelation relation){  if (relations.get(relation.getTo()) == null) {    this.relations.put(relation.getTo(),new HashSet<HuiRelation>());  }  this.relations.get(relation.getTo()).add(relation);}  }
class C{  public void clearNodes(){  Set<SessionNode> _nodes=new HashSet<>(this.nodes);  for (  SessionNode node : _nodes) {    removeNode(node);  }}  }
class C{  @Override public Value concatenate(Value value){  if (!(value instanceof RelationalVal)) {    throw new RuntimeException("Cannot concatenate " + this + " with "+ value);  }  return new RelationalVal(toString() + value.toString());}  }
class C{  @SuppressWarnings("PMD.AvoidInstantiatingObjectsInLoops") private static SortedMap<String,List<String>> asMap(final String query){  final SortedMap<String,List<String>> params=new TreeMap<>();  if (query != null) {    for (    final String pair : query.split("&")) {      final String[] parts=pair.split("=",2);      final String key=Href.decode(parts[0]);      final String value;      if (parts.length > 1) {        value=Href.decode(parts[1]);      } else {        value="";      }      if (!params.containsKey(key)) {        params.put(key,new LinkedList<String>());      }      params.get(key).add(value);    }  }  return params;}  }
class C{  @Override public synchronized void parse(Reader reader,String baseURI) throws IOException, RDFParseException, RDFHandlerException {  if (reader == null) {    throw new IllegalArgumentException("Reader can not be 'null'");  }  if (baseURI == null) {    throw new IllegalArgumentException("base URI can not be 'null'");  }  if (rdfHandler != null) {    rdfHandler.startRDF();  }  this.reader=reader;  lineNo=1;  reportLocation(lineNo,1);  try {    int c=readCodePoint();    c=skipWhitespace(c);    while (c != -1) {      if (c == '#') {        c=skipLine(c);      } else       if (c == '\r' || c == '\n') {        c=skipLine(c);      } else {        c=parseTriple(c);      }      c=skipWhitespace(c);    }  }  finally {    clear();  }  if (rdfHandler != null) {    rdfHandler.endRDF();  }}  }
class C{  public boolean isActive(){  return this.state.equals(TxState.ACTIVE);}  }
class C{  void sendMessageToHandlerWithControllerReset(List<OFMessage> messages) throws Exception {  verify(controller);  reset(controller);  sendMessageToHandlerNoControllerReset(messages);}  }
class C{  @Override public void addAttribute(String name,String value){  if (name.equals("index")) {    this.index=Integer.valueOf(value);  } else {    super.addAttribute(name,value);  }}  }
class C{  public long manhattanDistance(final int x,final int y){  return Math.abs((long)this.x - x) + Math.abs((long)this.y - y);}  }
class C{  public void testStefan() throws Exception {  String text="<foo>hello</foo>";  Document document=DocumentHelper.parseText(text);  XPath xpath=DocumentHelper.createXPath("/x");  Object value=xpath.evaluate(document);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.VARIABLE_BINDING__PATTERN:    return pattern != null;case N4JSPackage.VARIABLE_BINDING__EXPRESSION:  return expression != null;}return super.eIsSet(featureID);}  }
class C{  public static void p(String text){  p(text,DEBUG);}  }
class C{  public boolean hasSiteInState(SiteState state){  return !listSitesInState(state).isEmpty();}  }
class C{  public long node(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return node;}  }
class C{  public static <T>List<T> nCopies(final int length,T object){  return new CopiesList<T>(length,object);}  }
class C{  public static double angle(double x1,double y1,double x2,double y2){  return atan2(y2 - y1,x2 - x1);}  }
class C{  private static void parseTrun(Track track,DefaultSampleValues defaultSampleValues,long decodeTime,int workaroundFlags,ParsableByteArray trun,TrackFragment out){  trun.setPosition(ATOM_HEADER_SIZE);  int fullAtom=trun.readInt();  int flags=parseFullAtomFlags(fullAtom);  int sampleCount=trun.readUnsignedIntToInt();  if ((flags & 0x01) != 0) {    trun.skip(4);  }  boolean firstSampleFlagsPresent=(flags & 0x04) != 0;  int firstSampleFlags=defaultSampleValues.flags;  if (firstSampleFlagsPresent) {    firstSampleFlags=trun.readUnsignedIntToInt();  }  boolean sampleDurationsPresent=(flags & 0x100) != 0;  boolean sampleSizesPresent=(flags & 0x200) != 0;  boolean sampleFlagsPresent=(flags & 0x400) != 0;  boolean sampleCompositionTimeOffsetsPresent=(flags & 0x800) != 0;  out.initTables(sampleCount);  int[] sampleSizeTable=out.sampleSizeTable;  int[] sampleDecodingTimeTable=out.sampleDecodingTimeTable;  int[] sampleCompositionTimeOffsetTable=out.sampleCompositionTimeOffsetTable;  boolean[] sampleIsSyncFrameTable=out.sampleIsSyncFrameTable;  long timescale=track.timescale;  long cumulativeTime=decodeTime;  boolean workaroundEveryVideoFrameIsSyncFrame=track.type == Track.TYPE_VIDEO && ((workaroundFlags & WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME) == WORKAROUND_EVERY_VIDEO_FRAME_IS_SYNC_FRAME);  for (int i=0; i < sampleCount; i++) {    int sampleDuration=sampleDurationsPresent ? trun.readUnsignedIntToInt() : defaultSampleValues.duration;    int sampleSize=sampleSizesPresent ? trun.readUnsignedIntToInt() : defaultSampleValues.size;    int sampleFlags=(i == 0 && firstSampleFlagsPresent) ? firstSampleFlags : sampleFlagsPresent ? trun.readInt() : defaultSampleValues.flags;    if (sampleCompositionTimeOffsetsPresent) {      int sampleOffset=trun.readInt();      sampleCompositionTimeOffsetTable[i]=(int)((sampleOffset * 1000) / timescale);    } else {      sampleCompositionTimeOffsetTable[i]=0;    }    sampleDecodingTimeTable[i]=(int)((cumulativeTime * 1000) / timescale);    sampleSizeTable[i]=sampleSize;    sampleIsSyncFrameTable[i]=((sampleFlags >> 16) & 0x1) == 0 && (!workaroundEveryVideoFrameIsSyncFrame || i == 0);    cumulativeTime+=sampleDuration;  }}  }
class C{  public static String quoteChar(char ch){switch (ch) {case '\b':    return "\\b";case '\f':  return "\\f";case '\n':return "\\n";case '\r':return "\\r";case '\t':return "\\t";case '\'':return "\\'";case '\"':return "\\\"";case '\\':return "\\\\";default :return ch < 32 ? String.format("\\%03o",(int)ch) : String.valueOf(ch);}}  }
class C{  public boolean isStreaming(){  return false;}  }
class C{  public Selection isEqualTo(DateColumn column){  Selection results=new BitmapBackedSelection();  int i=0;  IntIterator intIterator=column.intIterator();  for (  int next : data) {    if (next == intIterator.nextInt()) {      results.add(i);    }    i++;  }  return results;}  }
class C{  private final void detach(){  if (mWindow == null) {    return;  }  try {    onDreamingStopped();  } catch (  Throwable t) {    Slog.w(TAG,"Crashed in onDreamingStopped()",t);  }  if (mDebug)   Slog.v(TAG,"detach(): Removing window from window manager");  try {    mWindowManager.removeViewImmediate(mWindow.getDecorView());    WindowManagerGlobal.getInstance().closeAll(mWindowToken,this.getClass().getName(),"Dream");  } catch (  Throwable t) {    Slog.w(TAG,"Crashed removing window view",t);  }  mWindow=null;  mWindowToken=null;}  }
class C{  public Boolean isEmpty(){  return this.resistances.isEmpty();}  }
class C{  public EOFException(){}  }
class C{  public XCalDocument(String xml) throws SAXException {  this(XmlUtils.toDocument(xml));}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  @LargeTest public void testTransitionCrossFade() throws Exception {  final String videoItemFilename1=INPUT_FILE_PATH + "H264_BP_640x480_30fps_256kbps_1_17.mp4";  final String videoItemFilename2=INPUT_FILE_PATH + "H263_profile0_176x144_15fps_128kbps_1_35.3gp";  final String imageItemFilename1=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final String videoItemFilename3=INPUT_FILE_PATH + "H264_BP_640x480_30fps_192kbps_1_5.mp4";  final String videoItemFilename4=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_256kbps_0_30.mp4";  final String videoItemFilename5=INPUT_FILE_PATH + "H263_profile0_176x144_10fps_96kbps_0_25.3gp";  boolean flagForException=false;  final MediaVideoItem mediaVideoItem1=mVideoEditorHelper.createMediaItem(mVideoEditor,"m1",videoItemFilename1,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem1.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem1);  final MediaVideoItem mediaVideoItem2=mVideoEditorHelper.createMediaItem(mVideoEditor,"m2",videoItemFilename2,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem2.setExtractBoundaries(0,15000);  mVideoEditor.addMediaItem(mediaVideoItem2);  final TransitionCrossfade transition1And2=mVideoEditorHelper.createTCrossFade("transition1And2",mediaVideoItem1,mediaVideoItem2,3000,Transition.BEHAVIOR_SPEED_UP);  mVideoEditor.addTransition(transition1And2);  assertTrue("Transition ID",transition1And2.getId().equals("transition1And2"));  assertEquals("Transtion After Media item",mediaVideoItem1,transition1And2.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem2,transition1And2.getBeforeMediaItem());  assertEquals("Transtion Duration",3000,transition1And2.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_SPEED_UP,transition1And2.getBehavior());  final MediaImageItem mediaImageItem3=mVideoEditorHelper.createMediaItem(mVideoEditor,"m3",imageItemFilename1,15000,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaImageItem3);  final TransitionCrossfade transition2And3=mVideoEditorHelper.createTCrossFade("transition2And3",mediaVideoItem2,mediaImageItem3,1000,Transition.BEHAVIOR_SPEED_DOWN);  mVideoEditor.addTransition(transition2And3);  assertTrue("Transition ID",transition2And3.getId().equals("transition2And3"));  assertEquals("Transtion After Media item",mediaVideoItem2,transition2And3.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaImageItem3,transition2And3.getBeforeMediaItem());  assertEquals("Transtion Duration",1000,transition2And3.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_SPEED_DOWN,transition2And3.getBehavior());  final MediaVideoItem mediaVideoItem4=mVideoEditorHelper.createMediaItem(mVideoEditor,"m4",videoItemFilename3,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem4.setExtractBoundaries(0,18000);  mVideoEditor.addMediaItem(mediaVideoItem4);  final TransitionCrossfade transition3And4=mVideoEditorHelper.createTCrossFade("transition3And4",mediaImageItem3,mediaVideoItem4,5000,Transition.BEHAVIOR_LINEAR);  mVideoEditor.addTransition(transition3And4);  assertTrue("Transition ID",transition3And4.getId().equals("transition3And4"));  assertEquals("Transtion After Media item",mediaImageItem3,transition3And4.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem4,transition3And4.getBeforeMediaItem());  assertEquals("Transtion Duration",5000,transition3And4.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_LINEAR,transition3And4.getBehavior());  final MediaVideoItem mediaVideoItem5=mVideoEditorHelper.createMediaItem(mVideoEditor,"m5",videoItemFilename4,MediaItem.RENDERING_MODE_BLACK_BORDER);  mVideoEditor.addMediaItem(mediaVideoItem5);  final TransitionCrossfade transition4And5=mVideoEditorHelper.createTCrossFade("transition4And5",mediaVideoItem4,mediaVideoItem5,8000,Transition.BEHAVIOR_MIDDLE_FAST);  mVideoEditor.addTransition(transition4And5);  assertTrue("Transition ID",transition4And5.getId().equals("transition4And5"));  assertEquals("Transtion After Media item",mediaVideoItem4,transition4And5.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem5,transition4And5.getBeforeMediaItem());  assertEquals("Transtion Duration",8000,transition4And5.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_MIDDLE_FAST,transition4And5.getBehavior());  final MediaVideoItem mediaVideoItem6=mVideoEditorHelper.createMediaItem(mVideoEditor,"m6",videoItemFilename5,MediaItem.RENDERING_MODE_BLACK_BORDER);  mediaVideoItem6.setExtractBoundaries(0,20000);  mVideoEditor.addMediaItem(mediaVideoItem6);  final TransitionCrossfade transition5And6=mVideoEditorHelper.createTCrossFade("transition5And6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_SLOW);  mVideoEditor.addTransition(transition5And6);  assertTrue("Transition ID",transition5And6.getId().equals("transition5And6"));  assertEquals("Transtion After Media item",mediaVideoItem5,transition5And6.getAfterMediaItem());  assertEquals("Transtion Before Media item",mediaVideoItem6,transition5And6.getBeforeMediaItem());  assertEquals("Transtion Duration",2000,transition5And6.getDuration());  assertEquals("Transtion Behavior",Transition.BEHAVIOR_MIDDLE_SLOW,transition5And6.getBehavior());  flagForException=false;  try {    mVideoEditorHelper.createTCrossFade("transitiond6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_SPEED_UP - 1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition FadeBlack with Invalid behavior",flagForException);  flagForException=false;  try {    mVideoEditorHelper.createTCrossFade("transitiond6",mediaVideoItem5,mediaVideoItem6,2000,Transition.BEHAVIOR_MIDDLE_FAST + 1);  } catch (  IllegalArgumentException e) {    flagForException=true;  }  assertTrue("Transition FadeBlack with Invalid behavior",flagForException);}  }
class C{  private int handleT(String value,DoubleMetaphoneResult result,int index){  if (contains(value,index,4,"TION")) {    result.append('X');    index+=3;  } else   if (contains(value,index,3,"TIA","TCH")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"TH") || contains(value,index,3,"TTH")) {    if (contains(value,index + 2,2,"OM","AM") || contains(value,0,4,"VAN ","VON ") || contains(value,0,3,"SCH")) {      result.append('T');    } else {      result.append('0','T');    }    index+=2;  } else {    result.append('T');    index=contains(value,index + 1,1,"T","D") ? index + 2 : index + 1;  }  return index;}  }
class C{  private void checkTouchExplorationSupport(){  final PreferenceGroup category=(PreferenceGroup)findPreferenceByResId(R.string.pref_category_touch_exploration_key);  if (category == null) {    return;  }  checkTouchExplorationSupportInner(category);}  }
class C{  public void onCallStateChanged(int state,String incomingNumber){  Log.d("onCallStateChanged, state=" + state);  if (MainService.IsRunning) {switch (state) {case TelephonyManager.CALL_STATE_IDLE:      manageIncoming=true;    mReconnectHandler.removeCallbacks(mReconnectRunnable);  if (mIsModifiedSettings) {    mAudioMgr.setSpeakerphoneOn(mIsSpeakerOn);    mIsModifiedSettings=false;  }break;case TelephonyManager.CALL_STATE_OFFHOOK:if (mEnableSpeakerOnTheNextCall) {mEnableSpeakerOnTheNextCall=false;Log.d("Setting speaker on in 1s, state=" + state);mReconnectHandler.postDelayed(mReconnectRunnable,1000);}manageIncoming=true;break;case TelephonyManager.CALL_STATE_RINGING:Log.d("PhoneCallListener Call State Ringing with incomingNumber=" + incomingNumber + " manageIncoming="+ manageIncoming);if (manageIncoming) {manageIncoming=false;String contact=ContactsManager.getContactName(svc,incomingNumber);svc.send(svc.getString(R.string.chat_is_calling,contact),null);}break;default :break;}}}  }
class C{  public double eval(double params[]){  return (Math.max(Math.max(params[0],params[1]),params[2]));}  }
class C{  public static ASN1Primitive toDERObject(byte[] data) throws IOException {  try (InputStream is=new ByteArrayInputStream(data)){    return new ASN1InputStream(is).readObject();  } }  }
class C{  public static IgniteBiTuple<Object,Object> addLog4jNoOpLogger() throws IgniteCheckedException {  Object rootLog;  Object nullApp;  try {    Class<?> logCls=Class.forName("org.apache.log4j.Logger");    rootLog=logCls.getMethod("getRootLogger").invoke(logCls);    try {      nullApp=Class.forName("org.apache.log4j.varia.NullAppender").newInstance();    } catch (    ClassNotFoundException ignore) {      return new IgniteBiTuple<>(rootLog,null);    }    Class appCls=Class.forName("org.apache.log4j.Appender");    rootLog.getClass().getMethod("addAppender",appCls).invoke(rootLog,nullApp);  } catch (  Exception e) {    throw new IgniteCheckedException("Failed to add no-op logger for Log4j.",e);  }  return new IgniteBiTuple<>(rootLog,nullApp);}  }
class C{  public void loadTagFragment(){  final Intent tagUserActivityIntent=new Intent(getActivity(),TagUserActivity.class);  tagUserActivityIntent.putExtra(AppConstants.Keys.WALL_ID,mWallId);  tagUserActivityIntent.putExtra(AppConstants.Keys.USER_ID,mUserId);  tagUserActivityIntent.putExtra(AppConstants.Keys.TAG_USER_COUNT,Integer.parseInt(mConnection));  tagUserActivityIntent.putExtra(AppConstants.Keys.FROM_WALL,true);  startActivity(tagUserActivityIntent);}  }
class C{  private int cheConfigure(int chePos,int type,int id,int[] channels){  if (channels[0] >= MAX_CHANNELS) {    return AAC_ERROR;  }  if (chePos != 0) {    if (ac.che[type][id] == null) {      ac.che[type][id]=new ChannelElement();      AacSbr.ctxInit(ac.che[type][id].sbr);    }    if (type != TYPE_CCE) {      if (channels[0] >= MAX_CHANNELS - ((type == TYPE_CPE || (type == TYPE_SCE && ac.oc[1].m4ac.ps == 1)) ? 1 : 0)) {        log.error(String.format("Too many channels"));        return AAC_ERROR;      }      ac.outputElement[channels[0]++]=ac.che[type][id].ch[0];      if (type == TYPE_CPE || (type == TYPE_SCE && ac.oc[1].m4ac.ps == 1)) {        ac.outputElement[channels[0]++]=ac.che[type][id].ch[1];      }    }  } else {    if (ac.che[type][id] != null) {      AacSbr.ctxClose(ac.che[type][id].sbr);      ac.che[type][id]=null;    }  }  return 0;}  }
class C{  public void respondChannel(String response){  if (getChannel() == null)   throw new RuntimeException("Event does not contain a channel");  getBot().sendIRC().message(channelSource,response);}  }
class C{  static MethodHandle makePairwiseConvert(MethodHandle target,MethodType srcType,boolean strict,boolean monobox){  MethodType dstType=target.type();  if (srcType == dstType)   return target;  return makePairwiseConvertByEditor(target,srcType,strict,monobox);}  }
class C{  private static byte[] numberToCalledPartyBCDHelper(String number,boolean includeLength){  int numberLenReal=number.length();  int numberLenEffective=numberLenReal;  boolean hasPlus=number.indexOf('+') != -1;  if (hasPlus)   numberLenEffective--;  if (numberLenEffective == 0)   return null;  int resultLen=(numberLenEffective + 1) / 2;  int extraBytes=1;  if (includeLength)   extraBytes++;  resultLen+=extraBytes;  byte[] result=new byte[resultLen];  int digitCount=0;  for (int i=0; i < numberLenReal; i++) {    char c=number.charAt(i);    if (c == '+')     continue;    int shift=((digitCount & 0x01) == 1) ? 4 : 0;    result[extraBytes + (digitCount >> 1)]|=(byte)((charToBCD(c) & 0x0F) << shift);    digitCount++;  }  if ((digitCount & 0x01) == 1)   result[extraBytes + (digitCount >> 1)]|=0xF0;  int offset=0;  if (includeLength)   result[offset++]=(byte)(resultLen - 1);  result[offset]=(byte)(hasPlus ? TOA_International : TOA_Unknown);  return result;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void doAcquireShared(int arg){  final Node node=addWaiter(Node.SHARED);  boolean failed=true;  try {    boolean interrupted=false;    for (; ; ) {      final Node p=node.predecessor();      if (p == head) {        int r=tryAcquireShared(arg);        if (r >= 0) {          setHeadAndPropagate(node,r);          p.next=null;          if (interrupted)           selfInterrupt();          failed=false;          return;        }      }      if (shouldParkAfterFailedAcquire(p,node) && parkAndCheckInterrupt())       interrupted=true;    }  }  finally {    if (failed)     cancelAcquire(node);  }}  }
class C{  public boolean hasNextPage(){  if (totalCount <= 0 || pageIndex <= 0 || pageSize <= 0) {    return false;  } else {    return totalCount > pageIndex * (pageSize + 1);  }}  }
class C{  public JSONArray(Collection<?> collection){  this.list=new ArrayList<Object>();  if (collection != null) {    for (    Object o : collection) {      this.list.add(JSONObject.wrap(o));    }  }}  }
class C{  public Task(String cmd){  m_cmd=cmd;}  }
class C{  public String toString(){  if (value == null) {    return "[" + localName + "]";  }  return "[" + localName + "=\""+ value+ "\"]";}  }
class C{  protected void remove(Character c){  TrieNode child;  child=m_Children.get(c);  remove(child);  m_Children.remove(c);}  }
class C{  public String localNodeId(){  return this.localNodeId;}  }
class C{  final Object peek(){  int size=stack.size();  return size == 0 ? null : stack.get(size - 1);}  }
class C{  private void normalizeLocalFileName(StringBuilder localFileName){  while (true) {    int dotDotIndex=localFileName.indexOf("/../");    if (dotDotIndex < 0) {      break;    }    int parentIndex=localFileName.lastIndexOf("/",dotDotIndex - 1);    if (parentIndex < 0) {      break;    }    localFileName.delete(parentIndex,dotDotIndex + 3);  }  if (localFileName.length() >= 3 && localFileName.lastIndexOf("/..") == localFileName.length() - 3) {    if (localFileName.length() <= 3) {      localFileName.setLength(0);    } else {      int parentIndex=localFileName.lastIndexOf("/",localFileName.length() - 4);      if (parentIndex < 0) {        localFileName.setLength(0);      } else {        localFileName.setLength(parentIndex);      }    }  }  while (true) {    int dotIndex=localFileName.indexOf("/./");    if (dotIndex < 0) {      break;    }    localFileName.delete(dotIndex,dotIndex + 2);  }  if (localFileName.length() >= 2 && localFileName.lastIndexOf("/.") == localFileName.length() - 2) {    localFileName.setLength(localFileName.length() - 2);  }  if (localFileName.length() > 0 && localFileName.charAt(0) == '/') {    localFileName.deleteCharAt(0);  }  if (localFileName.length() > 0 && localFileName.charAt(localFileName.length() - 1) == '/') {    localFileName.setLength(localFileName.length() - 1);  }}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  private void generatePaySelect(){  miniTable.stopEditor(true);  if (miniTable.getRowCount() == 0)   return;  miniTable.setRowSelectionInterval(0,0);  calculateSelection();  if (m_noSelected == 0)   return;  String msg=generatePaySelect(miniTable,(ValueNamePair)fieldPaymentRule.getSelectedItem(),fieldPayDate.getTimestamp(),(BankInfo)fieldBankAccount.getSelectedItem());  if (msg != null && msg.length() > 0) {    ADialog.error(m_WindowNo,panel,"SaveError",msg);    return;  }  if (!ADialog.ask(m_WindowNo,panel,"VPaySelectGenerate?","(" + m_ps.getName() + ")"))   return;  int AD_Proces_ID=155;  ProcessInfo pi=new ProcessInfo(m_frame.getTitle(),AD_Proces_ID,X_C_PaySelection.Table_ID,m_ps.getC_PaySelection_ID());  pi.setAD_User_ID(Env.getAD_User_ID(Env.getCtx()));  pi.setAD_Client_ID(Env.getAD_Client_ID(Env.getCtx()));  ProcessParameterPanel pp=new ProcessParameterPanel(m_WindowNo,pi);  ProcessCtl.process(this,m_WindowNo,(IProcessParameter)pp,pi,trx);}  }
class C{  public BasicControl(String id,boolean criticality,byte[] value){  this.id=id;  this.criticality=criticality;  this.value=value;}  }
class C{  protected static void annotateBIO_AllLevelsWithTaggers(Data data,NETaggerLevel1 taggerLevel1,NETaggerLevel2 taggerLevel2) throws Exception {  clearPredictions(data);  NETaggerLevel1.isTraining=false;  NETaggerLevel2.isTraining=false;  GreedyDecoding.annotateGreedy(data,taggerLevel1,1);  TextChunkRepresentationManager.changeChunkRepresentation(ParametersForLbjCode.currentParameters.taggingEncodingScheme,TextChunkRepresentationManager.EncodingScheme.BIO,data,NEWord.LabelToLookAt.PredictionLevel1Tagger);  PredictionsAndEntitiesConfidenceScores.pruneLowConfidencePredictions(data,ParametersForLbjCode.currentParameters.minConfidencePredictionsLevel1,NEWord.LabelToLookAt.PredictionLevel1Tagger);  boolean level2=ParametersForLbjCode.currentParameters.featuresToUse.containsKey("PredictionsLevel1");  if (taggerLevel2 != null && level2) {    PredictionsAndEntitiesConfidenceScores.pruneLowConfidencePredictions(data,0.0,NEWord.LabelToLookAt.PredictionLevel1Tagger);    TwoLayerPredictionAggregationFeatures.setLevel1AggregationFeatures(data,false);    GreedyDecoding.annotateGreedy(data,taggerLevel2,2);    PredictionsAndEntitiesConfidenceScores.pruneLowConfidencePredictions(data,ParametersForLbjCode.currentParameters.minConfidencePredictionsLevel2,NEWord.LabelToLookAt.PredictionLevel2Tagger);    TextChunkRepresentationManager.changeChunkRepresentation(ParametersForLbjCode.currentParameters.taggingEncodingScheme,TextChunkRepresentationManager.EncodingScheme.BIO,data,NEWord.LabelToLookAt.PredictionLevel2Tagger);  } else {    for (int docid=0; docid < data.documents.size(); docid++) {      ArrayList<LinkedVector> sentences=data.documents.get(docid).sentences;      for (      LinkedVector sentence : sentences)       for (int i=0; i < sentence.size(); i++) {        NEWord w=(NEWord)sentence.get(i);        w.neTypeLevel2=w.neTypeLevel1;      }    }  }}  }
class C{  public void createHelpText(CommandLoader cl){  File dir=new File((getClass().getResource("..").getPath()));  dir=new File(dir,language);  if (!dir.exists() && !dir.mkdirs()) {    System.out.println("Failed to create " + dir.getAbsolutePath());    return;  }  for (  String mnemo : cl.getMnemoList()) {    if (!exists(mnemo)) {      File file=new File(dir,mnemo + ".htm");      try {        file.createNewFile();        BufferedOutputStream os=new BufferedOutputStream(new FileOutputStream(file));        PrintStream ps=new PrintStream(os);        ps.println("<html>\n<head>\n<title>" + mnemo + "\n</title>\n</head>\n<body>");        ps.println("Command: " + mnemo.toUpperCase() + "<br>");        ps.println("arguments: <br>");        ps.println("effects: <br>");        ps.println("flags to be set: <br>");        ps.println("approx. clockcycles: <br>");        ps.println("misc: <br>");        ps.println("</body>\n</html>");        ps.flush();        ps.close();      } catch (      IOException e) {        System.out.println("failed to create " + file.getAbsolutePath());      }    }  }}  }
class C{  protected EmrMasterSecurityGroup addSecurityGroupsToClusterMasterImpl(EmrMasterSecurityGroupAddRequest request) throws Exception {  validateAddSecurityGroupsToClusterMasterRequest(request);  NamespaceEntity namespaceEntity=namespaceDaoHelper.getNamespaceEntity(request.getNamespace());  EmrClusterDefinitionEntity emrClusterDefinitionEntity=emrClusterDefinitionDaoHelper.getEmrClusterDefinitionEntity(request.getNamespace(),request.getEmrClusterDefinitionName());  List<String> groupIds=null;  String clusterName=emrHelper.buildEmrClusterName(namespaceEntity.getCode(),emrClusterDefinitionEntity.getName(),request.getEmrClusterName());  try {    groupIds=emrDao.addEmrMasterSecurityGroups(emrHelper.getActiveEmrClusterId(request.getEmrClusterId(),clusterName),request.getSecurityGroupIds(),emrHelper.getAwsParamsDto());  } catch (  AmazonServiceException ex) {    handleAmazonException(ex,"An Amazon exception occurred while adding EMR security groups: " + herdStringHelper.buildStringWithDefaultDelimiter(request.getSecurityGroupIds()) + " to cluster: "+ clusterName);  }  return createEmrClusterMasterGroupFromRequest(namespaceEntity.getCode(),emrClusterDefinitionEntity.getName(),request.getEmrClusterName(),groupIds);}  }
class C{  public void start(String path) throws TomcatManagerException, IOException {  invoke("/start?path=" + URLEncoder.encode(path,this.charset));}  }
class C{  final void loadText(Segment segment,int p0,int p1){  try {    Document doc=getDocument();    doc.getText(p0,p1 - p0,segment);  } catch (  BadLocationException bl) {    throw new StateInvariantError("Can't get line text");  }}  }
class C{  private static void checkName(String zoneId){  int n=zoneId.length();  if (n < 2) {    throw new DateTimeException("Invalid ID for region-based ZoneId, invalid format: " + zoneId);  }  for (int i=0; i < n; i++) {    char c=zoneId.charAt(i);    if (c >= 'a' && c <= 'z')     continue;    if (c >= 'A' && c <= 'Z')     continue;    if (c == '/' && i != 0)     continue;    if (c >= '0' && c <= '9' && i != 0)     continue;    if (c == '~' && i != 0)     continue;    if (c == '.' && i != 0)     continue;    if (c == '_' && i != 0)     continue;    if (c == '+' && i != 0)     continue;    if (c == '-' && i != 0)     continue;    throw new DateTimeException("Invalid ID for region-based ZoneId, invalid format: " + zoneId);  }}  }
class C{  @Override public void perform(IR ir){  for (Enumeration<BasicBlock> e=ir.getBasicBlocks(); e.hasMoreElements(); ) {    BasicBlock bb=e.nextElement();    if (bb.isEmpty())     continue;    container.counter2++;    if (bb.getInfrequent()) {      container.counter1++;      if (ir.options.FREQ_FOCUS_EFFORT)       continue;    }    for (Enumeration<Instruction> ie=bb.forwardInstrEnumerator(); ie.hasMoreElements(); ) {      Instruction s=ie.nextElement();      if (TypeCheck.conforms(s) && (invertNullAndTypeChecks(s) || pushTypeCheckBelowIf(s,ir))) {        ie=bb.forwardInstrEnumerator();      }    }  }}  }
class C{  public Name(String s,Name origin) throws TextParseException {  if (s.equals(""))   throw parseException(s,"empty name"); else   if (s.equals("@")) {    if (origin == null)     copy(empty,this); else     copy(origin,this);    return;  } else   if (s.equals(".")) {    copy(root,this);    return;  }  int labelstart=-1;  int pos=1;  byte[] label=new byte[MAXLABEL + 1];  boolean escaped=false;  int digits=0;  int intval=0;  boolean absolute=false;  for (int i=0; i < s.length(); i++) {    byte b=(byte)s.charAt(i);    if (escaped) {      if (b >= '0' && b <= '9' && digits < 3) {        digits++;        intval*=10;        intval+=(b - '0');        if (intval > 255)         throw parseException(s,"bad escape");        if (digits < 3)         continue;        b=(byte)intval;      } else       if (digits > 0 && digits < 3)       throw parseException(s,"bad escape");      if (pos > MAXLABEL)       throw parseException(s,"label too long");      labelstart=pos;      label[pos++]=b;      escaped=false;    } else     if (b == '\\') {      escaped=true;      digits=0;      intval=0;    } else     if (b == '.') {      if (labelstart == -1)       throw parseException(s,"invalid empty label");      label[0]=(byte)(pos - 1);      appendFromString(s,label,0,1);      labelstart=-1;      pos=1;    } else {      if (labelstart == -1)       labelstart=i;      if (pos > MAXLABEL)       throw parseException(s,"label too long");      label[pos++]=b;    }  }  if (digits > 0 && digits < 3)   throw parseException(s,"bad escape");  if (escaped)   throw parseException(s,"bad escape");  if (labelstart == -1) {    appendFromString(s,emptyLabel,0,1);    absolute=true;  } else {    label[0]=(byte)(pos - 1);    appendFromString(s,label,0,1);  }  if (origin != null && !absolute)   appendFromString(s,origin.name,origin.offset(0),origin.getlabels());}  }
class C{  public boolean isSetResponseTo(){  return EncodingUtils.testBit(__isset_bitfield,__RESPONSETO_ISSET_ID);}  }
class C{  protected void dispatchQueuedEvents(){  if (isDispatching.get()) {    return;  }  isDispatching.set(true);  try {    while (true) {      EventWithHandler eventWithHandler=eventsToDispatch.get().poll();      if (eventWithHandler == null) {        break;      }      if (eventWithHandler.handler.isValid()) {        dispatch(eventWithHandler.event,eventWithHandler.handler);      }    }  }  finally {    isDispatching.set(false);  }}  }
class C{  public IRemoteTxState0 statusTx(final long txId) throws RemoteTransactionNotFoundException {  final ConnectOptions opts=new ConnectOptions(mgr.getBaseServiceURL() + "/tx/" + Long.toString(txId));  opts.method="POST";  opts.addRequestParam("STATUS");  JettyResponseListener response=null;  try {    RemoteRepository.checkResponseCode(response=mgr.doConnect(opts));    return singleTxResponse(response);  } catch (  HttpException ex) {switch (ex.getStatusCode()) {case 404:      throw new RemoteTransactionNotFoundException(txId,mgr.getBaseServiceURL());default :    throw new RuntimeException(ex);}}catch (Exception t) {throw new RuntimeException(t);} finally {if (response != null) response.abort();}}  }
class C{  public void preDeregister() throws java.lang.Exception {  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"preDeregister","stop the timer");  stop();}  }
class C{  @Override public void insertBack(int x){  if (size == items.length) {    resize((int)(size * 1.01));  }  items[size]=x;  size=size + 1;}  }
class C{  public final void connect() throws RcsPermissionDeniedException {  if (!sApiCompatible) {    try {      sApiCompatible=mRcsServiceControl.isCompatible(this);      if (!sApiCompatible) {        throw new RcsPermissionDeniedException("The TAPI client version of the geoloc sharing service is not compatible with the TAPI service implementation version on this device!");      }    } catch (    RcsServiceException e) {      throw new RcsPermissionDeniedException("The compatibility of TAPI client version with the TAPI service implementation version of this device cannot be checked for the geoloc sharing service!",e);    }  }  Intent serviceIntent=new Intent(IGeolocSharingService.class.getName());  serviceIntent.setPackage(RcsServiceControl.RCS_STACK_PACKAGENAME);  mCtx.bindService(serviceIntent,apiConnection,0);}  }
class C{  public int size(){  return al.size();}  }
class C{  public RequestBuilder withType(RequestType type){  Preconditions.checkNotNull(type,"Request Type is null");  this.type=type;  return this;}  }
class C{  public static void updateBarsColor(int color,Window window){  updateBarsColor(color,window,true);}  }
class C{  static public TreeModel instance(){  if (instanceValue == null) {    instanceValue=new TreeModel();  }  return instanceValue;}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  public static void join(ByteString baggageBytes){  join(DetachedBaggage.deserialize(baggageBytes));}  }
class C{  static private double fac2(int j){  long i=j;  if (j < 0)   i=Math.abs(j);  double d=1.0;  while (i > 1)   d*=i--;  if (j < 0)   return -d; else   return d;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static String toString(JSONArray names,JSONArray ja) throws JSONException {  if (names == null || names.length() == 0) {    return null;  }  StringBuffer sb=new StringBuffer();  for (int i=0; i < ja.length(); i+=1) {    JSONObject jo=ja.optJSONObject(i);    if (jo != null) {      sb.append(rowToString(jo.toJSONArray(names)));    }  }  return sb.toString();}  }
class C{  public void delete(){  mBaseName.delete();  mBackupName.delete();}  }
class C{  public int read(String name){  status=STATUS_OK;  try {    name=name.trim().toLowerCase();    if ((name.indexOf("file:") >= 0) || (name.indexOf(":/") > 0)) {      URL url=new URL(name);      in=new BufferedInputStream(url.openStream());    } else {      in=new BufferedInputStream(new FileInputStream(name));    }    status=read(in);  } catch (  IOException e) {    status=STATUS_OPEN_ERROR;  }  return status;}  }
class C{  private void verifyContainingType(FieldDescriptor field){  if (field.getContainingType() != type) {    throw new IllegalArgumentException("FieldDescriptor does not match message type.");  }}  }
class C{  protected void addDataSourceToConfigurationViaProperty(DataSourceFixture fixture){  Configuration config=getLocalContainer().getConfiguration();  config.setProperty(DatasourcePropertySet.DATASOURCE,fixture.buildDataSourcePropertyString());}  }
class C{  public boolean isDevice(){  return DEVICE.equals(value);}  }
class C{  private void processMeasure(Set<Control> measures,int topicMaturity){  for (  Control measure : measures) {    Integer controlMaturity=measure.getMaturityValueByTag();    if (controlMaturity <= topicMaturity) {      measure.getEntity().setSimpleValue(getImplPropertyType(),Control.IMPLEMENTED_YES);      measureCount++;      changedElements.add(measure);    } else     if (measure.isImplementationNotEdited()) {      measure.getEntity().setSimpleValue(getImplPropertyType(),Control.IMPLEMENTED_NO);      measureCount++;      changedElements.add(measure);    }  }}  }
class C{  private void _writeString(char[] text,int offset,int len) throws IOException, JsonGenerationException {  len+=offset;  final int[] escCodes=CharTypes.getOutputEscapes();  final int escLen=escCodes.length;  while (offset < len) {    int start=offset;    while (true) {      char c=text[offset];      if (c < escLen && escCodes[c] != 0) {        break;      }      if (++offset >= len) {        break;      }    }    int newAmount=offset - start;    if (newAmount < SHORT_WRITE) {      if ((_outputTail + newAmount) > _outputEnd) {        _flushBuffer();      }      if (newAmount > 0) {        System.arraycopy(text,start,_outputBuffer,_outputTail,newAmount);        _outputTail+=newAmount;      }    } else {      _flushBuffer();      _writer.write(text,start,newAmount);    }    if (offset >= len) {      break;    }    int escCode=escCodes[text[offset]];    ++offset;    int needLen=(escCode < 0) ? 6 : 2;    if ((_outputTail + needLen) > _outputEnd) {      _flushBuffer();    }    _appendSingleEscape(escCode,_outputBuffer,_outputTail);    _outputTail+=needLen;  }}  }
class C{  @Override protected void removeAt(int index){  _values[index]=(V)TObjectHash.REMOVED;  super.removeAt(index);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public IncrementQuestAction(final String questname,final int increment){  this.questname=checkNotNull(questname);  this.index=-1;  this.increment=increment;}  }
class C{  protected void loadChildren(ViewFactory f){  Document doc=getDocument();  int offs0=getStartOffset();  int offs1=getEndOffset();  append(createZone(offs0,offs1));  handleInsert(offs0,offs1 - offs0);}  }
class C{  @Override public boolean isValidateRoot(){  return false;}  }
class C{  protected void collapse(boolean adjustTree){  if (isExpanded()) {    Enumeration cursor=preorderEnumeration();    cursor.nextElement();    int rowsDeleted=0;    boolean isFixed=isFixedRowHeight();    int lastYEnd;    if (isFixed)     lastYEnd=0; else     lastYEnd=getPreferredHeight() + getYOrigin();    int startHeight=getPreferredHeight();    int startYEnd=lastYEnd;    int myRow=getRow();    if (!isFixed) {      while (cursor.hasMoreElements()) {        TreeStateNode node=(TreeStateNode)cursor.nextElement();        if (node.isVisible()) {          rowsDeleted++;          lastYEnd=node.getYOrigin() + node.getPreferredHeight();        }      }    } else {      while (cursor.hasMoreElements()) {        TreeStateNode node=(TreeStateNode)cursor.nextElement();        if (node.isVisible()) {          rowsDeleted++;        }      }    }    for (int counter=rowsDeleted + myRow; counter > myRow; counter--) {      visibleNodes.removeElementAt(counter);    }    expanded=false;    if (myRow == -1)     markSizeInvalid(); else     if (adjustTree)     updatePreferredSize(myRow);    if (myRow != -1 && adjustTree && (rowsDeleted > 0 || startHeight != getPreferredHeight())) {      startYEnd+=(getPreferredHeight() - startHeight);      if (!isFixed && (myRow + 1) < getRowCount() && startYEnd != lastYEnd) {        int counter, maxCounter, shiftAmount;        shiftAmount=startYEnd - lastYEnd;        for (counter=myRow + 1, maxCounter=visibleNodes.size(); counter < maxCounter; counter++)         ((TreeStateNode)visibleNodes.elementAt(counter)).shiftYOriginBy(shiftAmount);      }      didAdjustTree();      visibleNodesChanged();    }    if (treeSelectionModel != null && rowsDeleted > 0 && myRow != -1) {      treeSelectionModel.resetRowSelection();    }  }}  }
class C{  synchronized public void removeListener(GCTraceSetListener listener){  ArgumentChecking.notNull(listener,"listener");  listeners.remove(listener);}  }
class C{  public boolean isQuoted(){  return quoted;}  }
class C{  @Field(0) public cl_image_format image_channel_order(int image_channel_order){  this.io.setIntField(this,0,image_channel_order);  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:34.924 -0500",hash_original_method="8E38511E2EC0E52F81E91783DD99493A",hash_generated_method="39D05B985C35F2EB9E6449B0282F5D02") public X509Principal(boolean reverse,String dirName){  super(reverse,dirName);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  private static byte[] constructPT(int rounds){  byte[] tempValue=new byte[16];  Arrays.fill(tempValue,(byte)0);  int whichByte=rounds / 8;  int whichDigit=rounds % 8;  if ((whichByte >= 16) || (whichDigit < 0) || (whichDigit > 8)) {    throw new IllegalArgumentException("Invalid rounds: " + rounds);  }switch (whichDigit) {case 0:    tempValue[whichByte]=(byte)0x80;  break;case 1:tempValue[whichByte]=(byte)0x40;break;case 2:tempValue[whichByte]=(byte)0x20;break;case 3:tempValue[whichByte]=(byte)0x10;break;case 4:tempValue[whichByte]=(byte)0x08;break;case 5:tempValue[whichByte]=(byte)0x04;break;case 6:tempValue[whichByte]=(byte)0x02;break;case 7:tempValue[whichByte]=(byte)0x01;break;}return tempValue;}  }
class C{  public ConfiguredAnalyzerFactory(AnalyzerPair config[],String defaultLanguage){  this.config=config;  this.defaultLanguage=defaultLanguage;}  }
class C{  public final int countCategories(){  return mCategories != null ? mCategories.size() : 0;}  }
class C{  private static boolean hasXMPHeader(byte[] data){  if (data.length < XMP_HEADER_SIZE) {    return false;  }  try {    byte[] header=new byte[XMP_HEADER_SIZE];    System.arraycopy(data,0,header,0,XMP_HEADER_SIZE);    if (new String(header,"UTF-8").equals(XMP_HEADER)) {      return true;    }  } catch (  UnsupportedEncodingException e) {    return false;  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int[][] allPredictions(double t){  int Y[][]=new int[predictions.size()][];  for (int i=0; i < predictions.size(); i++) {    Y[i]=rowPrediction(i,t);  }  return Y;}  }
class C{  @VisibleForTesting protected boolean recover(OutputFileMetadata outputFileMetadata) throws IOException {  Path firstBlockPath=new Path(blocksDirectoryPath + Path.SEPARATOR + outputFileMetadata.getBlockIds()[0]);  Path outputFilePath=new Path(filePath,outputFileMetadata.getRelativePath());  if (appFS.exists(firstBlockPath)) {    FileStatus status=appFS.getFileStatus(firstBlockPath);    if (status.getLen() == outputFileMetadata.getFileLength()) {      moveToFinalFile(firstBlockPath,outputFilePath);      return true;    }    LOG.error("Unable to recover in FileMerger for file: {}",outputFilePath);    return false;  }  if (outputFS.exists(outputFilePath)) {    LOG.debug("Output file already present at the destination, nothing to recover.");    return true;  }  LOG.error("Unable to recover in FileMerger for file: {}",outputFilePath);  return false;}  }
class C{  public Configuration(String resourceFileName) throws IOException, NullPointerException {  this(resourceFileName,true);}  }
class C{  public void monitorEnter(){  mv.visitInsn(Opcodes.MONITORENTER);}  }
class C{  private String intToIp(int i){  return ((i >> 24) & 0xFF) + "." + ((i >> 16) & 0xFF)+ "."+ ((i >> 8) & 0xFF)+ "."+ (i & 0xFF);}  }
class C{  public AnimationBuilder textColor(int... colors){  for (  View view : views) {    if (view instanceof TextView) {      ObjectAnimator objectAnimator=ObjectAnimator.ofInt(view,"textColor",colors);      objectAnimator.setEvaluator(new ArgbEvaluator());      this.animatorList.add(objectAnimator);    }  }  return this;}  }
class C{  private boolean showHelpOnFirstLaunch(){  try {    PackageInfo info=getPackageManager().getPackageInfo(PACKAGE_NAME,0);    int currentVersion=info.versionCode;    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);    int lastVersion=prefs.getInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN,0);    if (currentVersion > lastVersion) {      prefs.edit().putInt(PreferencesActivity.KEY_HELP_VERSION_SHOWN,currentVersion).commit();      Intent intent=new Intent(this,HelpActivity.class);      intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);      String page=lastVersion == 0 ? HelpActivity.DEFAULT_PAGE : HelpActivity.WHATS_NEW_PAGE;      intent.putExtra(HelpActivity.REQUESTED_PAGE_KEY,page);      startActivity(intent);      return true;    }  } catch (  PackageManager.NameNotFoundException e) {    Log.w(TAG,e);  }  return false;}  }
class C{  public ArrayDeque(Collection<? extends E> c){  allocateElements(c.size());  addAll(c);}  }
class C{  public static void sleep(int t){  try {    Thread.sleep(t);  } catch (  InterruptedException e) {  }}  }
class C{  public StoragePolicyUpdateRequest createStoragePolicyUpdateRequest(String storagePolicyRuleType,Integer storagePolicyRuleValue,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,String businessObjectFormatUsage,String businessObjectFormatFileType,String storageName,String destinationStorageName,String storagePolicyStatus){  StoragePolicyUpdateRequest request=new StoragePolicyUpdateRequest();  StoragePolicyRule storagePolicyRule=new StoragePolicyRule();  request.setStoragePolicyRule(storagePolicyRule);  storagePolicyRule.setRuleType(storagePolicyRuleType);  storagePolicyRule.setRuleValue(storagePolicyRuleValue);  StoragePolicyFilter storagePolicyFilter=new StoragePolicyFilter();  request.setStoragePolicyFilter(storagePolicyFilter);  storagePolicyFilter.setNamespace(businessObjectDefinitionNamespace);  storagePolicyFilter.setBusinessObjectDefinitionName(businessObjectDefinitionName);  storagePolicyFilter.setBusinessObjectFormatUsage(businessObjectFormatUsage);  storagePolicyFilter.setBusinessObjectFormatFileType(businessObjectFormatFileType);  storagePolicyFilter.setStorageName(storageName);  StoragePolicyTransition storagePolicyTransition=new StoragePolicyTransition();  request.setStoragePolicyTransition(storagePolicyTransition);  storagePolicyTransition.setDestinationStorageName(destinationStorageName);  request.setStatus(storagePolicyStatus);  return request;}  }
class C{  protected final boolean shouldProposeGenerics(IJavaProject project){  String sourceVersion;  if (project != null)   sourceVersion=project.getOption(JavaCore.COMPILER_SOURCE,true); else   sourceVersion=JavaCore.getOption(JavaCore.COMPILER_SOURCE);  return sourceVersion != null && JavaCore.VERSION_1_5.compareTo(sourceVersion) <= 0;}  }
class C{  public static int compute1(int x){  int lo=16807 * (x & 0xFFFF);  int hi=16807 * (x >>> 16);  lo+=(hi & 0x7FFF) << 16;  if ((lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  lo+=hi >>> 15;  if (lo == 0 || (lo & 0x80000000) != 0) {    lo&=0x7fffffff;    ++lo;  }  return lo;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.SDIRECT_ASSIGNMENT;}  }
class C{  private void colorLoops(){  try {    for (    final INaviViewNode currentNode : getGraph().getNodes()) {      if (currentNode.getParents().isEmpty()) {        CLoopHighlighter.colorLoops(getGraph(),currentNode);        break;      }    }  } catch (  final MalformedGraphException exception) {    NaviLogger.warning("Error: Graph is malformed, can not color loops");  }}  }
class C{  @Override public void put(Object key,Object value){  try {    Output output=new Output(4096,Integer.MAX_VALUE);    getKyro().writeClassAndObject(output,value);    getGeodeRegion().put((String)key,output.getBuffer());  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  @Override protected void resetEditorFrom(DLangRunDmdConfiguration config){  resetCompilerTabForm(config);  resetOutputTabForm(config);  resetDebugTabForm(config);  fillArguments(config);}  }
class C{  public DefaultListModel(){  this.items=new ArrayList();}  }
class C{  public final void run(){  TLCState curState=null;  try {    while (true) {      curState=(TLCState)this.squeue.sDequeue();      if (curState == null) {synchronized (this.tlc) {          this.tlc.setDone();          this.tlc.notify();        }        this.squeue.finishAll();        return;      }      if (this.tlc.doNext(curState,this.astCounts,this))       return;    }  } catch (  Throwable e) {synchronized (this.tlc) {      if (this.tlc.setErrState(curState,null,true)) {        MP.printError(EC.GENERAL,e);      }      this.squeue.finishAll();      this.tlc.notify();    }    return;  }}  }
class C{  public int indexColumns(int i){  return i / rows;}  }
class C{  public static ResponseData parse(String responseData){  int index=responseData.indexOf(':');  String mainData, extraData;  if (-1 == index) {    mainData=responseData;    extraData="";  } else {    mainData=responseData.substring(0,index);    extraData=index >= responseData.length() ? "" : responseData.substring(index + 1);  }  String[] fields=TextUtils.split(mainData,Pattern.quote("|"));  if (fields.length < 6) {    throw new IllegalArgumentException();  }  ResponseData data=new ResponseData();  data.extra=extraData;  data.responseCode=Integer.parseInt(fields[0]);  data.nonce=Integer.parseInt(fields[1]);  data.packageName=fields[2];  data.versionCode=fields[3];  data.userId=fields[4];  data.timestamp=Long.parseLong(fields[5]);  return data;}  }
class C{  public BytesReference sourceRef(){  try {    this.source=CompressorFactory.uncompressIfNeeded(this.source);    return this.source;  } catch (  IOException e) {    throw new ElasticsearchParseException("failed to decompress source",e);  }}  }
class C{  public ChangeMethodSignatureArguments(String newName,String newReturnType,int newVisibility,Parameter[] newParameters,ThrownException[] thrownExceptions,boolean keepOriginal){  Assert.isNotNull(newName);  fNewName=newName;  fNewReturnType=newReturnType;  fNewVisibility=newVisibility;  fNewParameters=newParameters;  fThrownExceptions=thrownExceptions;  fKeepOriginal=keepOriginal;}  }
class C{  public SessionEvent(Object source,int type){  super(source);switch (type) {case EXECUTION_STARTED:    this.type=type;  break;case ADDING_EDGE:this.type=type;break;default :throw new IllegalArgumentException("Not the type of event that " + "requires zero session nodes " + "as arguments.");}}  }
class C{  public void testDoCheckWithDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithDetectionResultOverridenByConstructor");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.FAILED);  expectLastCall().once();  mockProcessRemarkService.addSourceCodeRemarkOnElement(TestSolution.FAILED,element,ATTR_PRESENT_MSG);  expectLastCall().once();  AttributePresenceChecker instance=new AttributePresenceChecker(AttributeStore.ALT_ATTR,TestSolution.FAILED,TestSolution.PASSED,ATTR_PRESENT_MSG,ATTR_ABSENT_MSG);  instance.setProcessRemarkService(mockProcessRemarkService);  replay(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockSSPHandler,mockTestSolutionHandler,mockProcessRemarkService);}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.CONFIGURATION;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof ContourEntity && super.equals(obj)) {    ContourEntity ce=(ContourEntity)obj;    if (this.index != ce.index) {      return false;    }    return true;  }  return false;}  }
class C{  public BinaryOpValueExp(int o,ValueExp v1,ValueExp v2){  op=o;  exp1=v1;  exp2=v2;}  }
class C{  public StringValueExp(String val){  this.val=val;}  }
class C{  public void writeRawLittleEndian32(final int value) throws IOException {  if (buffer.remaining() < 4) {    throw new OutOfSpaceException(buffer.position(),buffer.limit());  }  buffer.putInt(value);}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public synchronized <T>T unwrap(java.lang.Class<T> iface) throws java.sql.SQLException {  try {    if ("java.sql.Statement".equals(iface.getName()) || "java.sql.PreparedStatement".equals(iface.getName()) || "java.sql.Wrapper.class".equals(iface.getName())) {      return iface.cast(this);    }    if (unwrappedInterfaces == null) {      unwrappedInterfaces=new HashMap<Class<?>,Object>();    }    Object cachedUnwrapped=unwrappedInterfaces.get(iface);    if (cachedUnwrapped == null) {      if (cachedUnwrapped == null) {        cachedUnwrapped=Proxy.newProxyInstance(this.wrappedStmt.getClass().getClassLoader(),new Class<?>[]{iface},new ConnectionErrorFiringInvocationHandler(this.wrappedStmt));        unwrappedInterfaces.put(iface,cachedUnwrapped);      }      unwrappedInterfaces.put(iface,cachedUnwrapped);    }    return iface.cast(cachedUnwrapped);  } catch (  ClassCastException cce) {    throw SQLError.createSQLException("Unable to unwrap to " + iface.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,this.exceptionInterceptor);  }}  }
class C{  public LinkedCaseInsensitiveMap(){  this(null);}  }
class C{  private void endTask(){synchronized (lock) {    int numRunning=--runningTasks;    if (numRunning == 0) {      lock.notifyAll();    }  }}  }
class C{  @Dev public PlaySoundAction(String sound,boolean delay){  this.sound=sound;  this.delay=delay;}  }
class C{  String explain(boolean multiline,String prefix,Schema schema){  StringBuilder sb=new StringBuilder();  String sep=" ";  if (multiline) {    sep="\n" + prefix;  }  if (triple == null) {    sb.append("(empty)").append(sep);  } else {    Resource s=getSubject();    URI p=getPredicate();    Value o=getObject();    sb.append("<").append(s.toString()).append(">").append(sep);    sb.append("<").append(p.toString()).append(">").append(sep);    sb.append("<").append(o.toString()).append(">");    if (schema != null && p.equals(RDF.TYPE)) {      Resource objClass=(Resource)o;      if (schema.hasRestriction(objClass)) {        sb.append(" { ");        sb.append(schema.explainRestriction(objClass));        sb.append(" }");      }    }    sb.append(sep);  }  if (isInference()) {    sb.append(derivation.explain(multiline,prefix,schema));  } else {    sb.append("[input]");  }  return sb.toString();}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void handleCacheCreateEvent(SystemMemberCacheEvent event){  String memberId=event.getMemberId();  SystemMemberJmx systemMemberJmx=(SystemMemberJmx)findCacheOrAppVmById(memberId);  if (systemMemberJmx != null) {    systemMemberJmx.handleCacheCreate(event);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_capture);  CameraManager.init(getApplication());  if (Build.VERSION.SDK_INT >= 21) {    try {      getWindow().setStatusBarColor(Color.DKGRAY);    } catch (    Exception e) {      e.printStackTrace();    }  }  viewfinderView=(ViewfinderView)findViewById(R.id.viewfinder_view);  txtResult=(TextView)findViewById(R.id.txtResult);  hasSurface=false;  inactivityTimer=new InactivityTimer(this);}  }
class C{  public Map update(){  if (!isValid) {    return null;  }synchronized (XSettings.this) {    long currentSerial=XSettings.this.serial;    if (this.serial <= currentSerial) {      return null;    }    for (int i=0; i < nsettings && idx < dlen; ++i) {      updateOne(currentSerial);    }    XSettings.this.serial=this.serial;  }  return updatedSettings;}  }
class C{  public static HashMap<String,Integer> computeMaxRefCountTbl(List<HashMap<String,Integer>> listRefNgramTbl){  HashMap<String,Integer> merged=new HashMap<>();  for (  HashMap<String,Integer> tbl : listRefNgramTbl) {    for (    String ngram : tbl.keySet()) {      merged.put(ngram,0);    }  }  for (  String ngram : merged.keySet()) {    int max=0;    for (    HashMap<String,Integer> tbl : listRefNgramTbl) {      Integer val=tbl.get(ngram);      if (val != null && val > max)       max=val;    }    merged.put(ngram,max);  }  return merged;}  }
class C{  public void show(boolean animate){  show(animate,fadeIn);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void showShoppingCartDetailView(View view){  shoppingCartRenderer.showDetailView();}  }
class C{  public boolean recordChange(IResourceDelta delta){switch (delta.getKind()) {case IResourceDelta.ADDED:    handleAdded(delta);  return true;case IResourceDelta.REMOVED:handleRemoved(delta);return false;case IResourceDelta.CHANGED:handleChange(delta);return true;}return true;}  }
class C{  public IssueMatcher lineNumber(int expectedLineNumber){  return addEqualsMatcher("line number",expectedLineNumber,null);}  }
class C{  private static int lastIndexOf(Object o,Object[] elements,int index){  if (o == null) {    for (int i=index; i >= 0; i--)     if (elements[i] == null)     return i;  } else {    for (int i=index; i >= 0; i--)     if (o.equals(elements[i]))     return i;  }  return -1;}  }
class C{  @Nullable public BlockEntry findById(int id){  return legacyMap[id];}  }
class C{  public void addObjectsToLocation(final Bag objs,final int x,final int y){  if (objs == null)   return;  Bag[] fieldx=field[x];  if (fieldx[y] == null)   buildBag(fieldx,y);  fieldx[y].addAll(objs);}  }
class C{  @Provides @Config("logoFilename") public static String provideLogoFilename(RegistryEnvironment environment){switch (environment) {case UNITTEST:case LOCAL:    return "logo.png";default :  return "google_registry.png";}}  }
class C{  protected boolean afterDelete(boolean success){  if (!success)   return success;  return updateHeader();}  }
class C{  BinarySearchTreeNode<E> removeMinimum(BinarySearchTreeNode<E> node){  node=this.getMinimum(node);  if (node == null)   return null;  if (node == this.root) {    this.root=node.right;  } else   if (node.parent.right == node) {    node.parent.right=node.right;  } else {    node.parent.left=node.right;  }  this.size--;  return node;}  }
class C{  public static double oneTailedFishersExact(int k,int n,int r,int m){  if (k < 0 || k < (m + r) - n || k > r || k > m || r > n || m > n) {    throw new IllegalArgumentException("Invalid Fisher's exact: " + "k=" + k + " n="+ n+ " r="+ r+ " m="+ m+ " k<0="+ (k < 0)+ " k<(m+r)-n="+ (k < (m + r) - n)+ " k>r="+ (k > r)+ " k>m="+ (k > m)+ " r>n="+ (r > n)+ "m>n="+ (m > n));  }  if (m > n / 2) {    m=n - m;    k=r - k;  }  if (r > n / 2) {    r=n - r;    k=m - k;  }  if (m > r) {    int temp=m;    m=r;    r=temp;  }  double total=0.0;  if (k > m / 2) {    for (int k0=k; k0 <= m; k0++) {      total+=SloppyMath.hypergeometric(k0,n,r,m);    }  } else {    int min=Math.max(0,(m + r) - n);    for (int k0=min; k0 < k; k0++) {      total+=SloppyMath.hypergeometric(k0,n,r,m);    }    total=1.0 - total;  }  return total;}  }
class C{  private StringObfuscator(){  throw new AssertionError(StringObfuscator.class.getName() + " is non-instantiable");}  }
class C{  public NbtTagList(String name){  super(name);  this.tagList=new ArrayList<>(8);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  requestWindowFeature(Window.FEATURE_NO_TITLE);  setContentView(R.layout.channeladd);  channelInput=(EditText)findViewById(R.id.channel);  channelInput.setSelection(1);  adapter=new ArrayAdapter<String>(this,R.layout.channelitem);  ListView list=(ListView)findViewById(R.id.channels);  list.setAdapter(adapter);  list.setOnItemClickListener(this);  ((Button)findViewById(R.id.add)).setOnClickListener(this);  ((Button)findViewById(R.id.cancel)).setOnClickListener(this);  okButton=(Button)findViewById(R.id.ok);  okButton.setOnClickListener(this);  okButton.setEnabled(false);  channels=getIntent().getExtras().getStringArrayList(Extra.CHANNELS);  for (  String channel : channels) {    adapter.add(channel);  }}  }
class C{  RVMMethod findDeclaredOrFirstMethod(RVMClass klass,String methname,String methdesc){  if (klass == null)   return null;  Atom methodName=Atom.findOrCreateAsciiAtom(methname);  Atom methodDesc="-".equals(methdesc) ? null : Atom.findOrCreateAsciiAtom(methdesc);  for (  RVMMethod method : klass.getDeclaredMethods()) {    if (method.getName() == methodName && ((methodDesc == null) || (methodDesc == method.getDescriptor()))) {      return method;    }  }  if (methodDesc == null) {    output.sysErrPrintln("No method named " + methodName + " found in class "+ klass);  } else {    output.sysErrPrintln("No method matching " + methodName + " "+ methodDesc+ " found in class "+ klass);  }  return null;}  }
class C{  public void flush() throws IOException {  int numBytes=this.indexIntoOutputStream + ((this.bitsLeft == 8) ? 0 : 1);  if (numBytes > 0) {    this.output.write(numBytes);    this.output.write(this.buffer,0,numBytes);    this.buffer[0]=0;    this.indexIntoOutputStream=0;    this.bitsLeft=8;  }}  }
class C{  public boolean isFindUsers(){  return findUsers;}  }
class C{  public static SupportedCountry find(DataService mgr,String countryCode){  SupportedCountry result=(SupportedCountry)mgr.find(new SupportedCountry(countryCode));  return result;}  }
class C{  public void compose(StylesheetRoot sroot) throws TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_name_avt)   m_name_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_namespace_avt)   m_namespace_avt.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  private void sendDataToWearable(List<Attraction> attractions){  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  int count=attractions.size() > Constants.MAX_ATTRACTIONS ? Constants.MAX_ATTRACTIONS : attractions.size();  ArrayList<DataMap> attractionsData=new ArrayList<>(count);  for (int i=0; i < count; i++) {    Attraction attraction=attractions.get(i);    Bitmap image=null;    Bitmap secondaryImage=null;    try {      image=Glide.with(this).load(attraction.imageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE_PARALLAX_WIDTH,Constants.WEAR_IMAGE_SIZE).get();      secondaryImage=Glide.with(this).load(attraction.secondaryImageUrl).asBitmap().diskCacheStrategy(DiskCacheStrategy.SOURCE).into(Constants.WEAR_IMAGE_SIZE_PARALLAX_WIDTH,Constants.WEAR_IMAGE_SIZE).get();    } catch (    InterruptedException|ExecutionException e) {      Log.e(TAG,"Exception loading bitmap from network");    }    if (image != null && secondaryImage != null) {      DataMap attractionData=new DataMap();      String distance=Utils.formatDistanceBetween(Utils.getLocation(this),attraction.location);      attractionData.putString(Constants.EXTRA_TITLE,attraction.name);      attractionData.putString(Constants.EXTRA_DESCRIPTION,attraction.description);      attractionData.putDouble(Constants.EXTRA_LOCATION_LAT,attraction.location.latitude);      attractionData.putDouble(Constants.EXTRA_LOCATION_LNG,attraction.location.longitude);      attractionData.putString(Constants.EXTRA_DISTANCE,distance);      attractionData.putString(Constants.EXTRA_CITY,attraction.city);      attractionData.putAsset(Constants.EXTRA_IMAGE,Utils.createAssetFromBitmap(image));      attractionData.putAsset(Constants.EXTRA_IMAGE_SECONDARY,Utils.createAssetFromBitmap(secondaryImage));      attractionsData.add(attractionData);    }  }  if (connectionResult.isSuccess() && googleApiClient.isConnected() && attractionsData.size() > 0) {    PutDataMapRequest dataMap=PutDataMapRequest.create(Constants.ATTRACTION_PATH);    dataMap.getDataMap().putDataMapArrayList(Constants.EXTRA_ATTRACTIONS,attractionsData);    dataMap.getDataMap().putLong(Constants.EXTRA_TIMESTAMP,new Date().getTime());    PutDataRequest request=dataMap.asPutDataRequest();    DataApi.DataItemResult result=Wearable.DataApi.putDataItem(googleApiClient,request).await();    if (!result.getStatus().isSuccess()) {      Log.e(TAG,String.format("Error sending data using DataApi (error code = %d)",result.getStatus().getStatusCode()));    }  } else {    Log.e(TAG,String.format(Constants.GOOGLE_API_CLIENT_ERROR_MSG,connectionResult.getErrorCode()));  }  googleApiClient.disconnect();}  }
class C{  public void insertChild(SimpleNode n,int pos){  int numChildren=getChildCount();  SimpleNode[] newChild=new SimpleNode[numChildren + 1];  for (int i=0; i < pos; i++) {    newChild[i]=child[i];  }  newChild[pos]=n;  for (int i=pos; i < numChildren; i++) {    newChild[i + 1]=child[i];  }  child=newChild;  n.setParent(this);}  }
class C{  public OctetStreamData(InputStream octetStream){  if (octetStream == null) {    throw new NullPointerException("octetStream is null");  }  this.octetStream=octetStream;}  }
class C{  public LocalizedText(String text){  this(text,NO_LOCALE);}  }
class C{  public boolean isLeap(long instant){  throw unsupported();}  }
class C{  @Override public synchronized void flush() throws IOException {  checkNotClosed();  flushInternal();  out.flush();}  }
class C{  public void test_select_xsd_int() throws MalformedQueryException, TokenMgrError, ParseException {  final String sparql="select (\"12\"^^<http://www.w3.org/2001/XMLSchema#int> as ?x) where {?s ?p ?o}";  final QueryRoot expected=new QueryRoot(QueryType.SELECT);{    final ProjectionNode projection=new ProjectionNode();    projection.addProjectionExpression(new AssignmentNode(new VarNode("x"),new ConstantNode(makeIV(valueFactory.createLiteral(12)))));    expected.setProjection(projection);  }  final QueryRoot actual=parse(sparql,baseURI);  assertSameAST(sparql,expected.getProjection(),actual.getProjection());}  }
class C{  public static ResponseProperties storeCalendar(InputStream is,Map<String,Object> context) throws IOException, ParserException, GenericEntityException, GenericServiceException {  CalendarBuilder builder=new CalendarBuilder();  Calendar calendar=null;  try {    calendar=builder.build(is);  }  finally {    if (is != null) {      is.close();    }  }  if (Debug.verboseOn()) {    Debug.logVerbose("Processing calendar:\r\n" + calendar,module);  }  String workEffortId=fromXProperty(calendar.getProperties(),workEffortIdXPropName);  if (workEffortId == null) {    workEffortId=(String)context.get("workEffortId");  }  if (!workEffortId.equals(context.get("workEffortId"))) {    Debug.logWarning("Spoof attempt: received calendar workEffortId " + workEffortId + " on URL workEffortId "+ context.get("workEffortId"),module);    return ICalWorker.createForbiddenResponse(null);  }  Delegator delegator=(Delegator)context.get("delegator");  GenericValue publishProperties=EntityQuery.use(delegator).from("WorkEffort").where("workEffortId",workEffortId).queryOne();  if (!isCalendarPublished(publishProperties)) {    Debug.logInfo("WorkEffort calendar is not published: " + workEffortId,module);    return ICalWorker.createNotFoundResponse(null);  }  if (context.get("userLogin") == null) {    return ICalWorker.createNotAuthorizedResponse(null);  }  if (!hasPermission(workEffortId,"UPDATE",context)) {    return ICalWorker.createForbiddenResponse(null);  }  boolean hasCreatePermission=hasPermission(workEffortId,"CREATE",context);  List<GenericValue> workEfforts=getRelatedWorkEfforts(publishProperties,context);  Set<String> validWorkEfforts=FastSet.newInstance();  if (UtilValidate.isNotEmpty(workEfforts)) {    for (    GenericValue workEffort : workEfforts) {      validWorkEfforts.add(workEffort.getString("workEffortId"));    }  }  List<Component> components=UtilGenerics.checkList(calendar.getComponents(),Component.class);  ResponseProperties responseProps=null;  for (  Component component : components) {    if (Component.VEVENT.equals(component.getName()) || Component.VTODO.equals(component.getName())) {      workEffortId=fromXProperty(component.getProperties(),workEffortIdXPropName);      if (workEffortId == null) {        Property uid=component.getProperty(Uid.UID);        if (uid != null) {          GenericValue workEffort=EntityQuery.use(delegator).from("WorkEffort").where("universalId",uid.getValue()).queryFirst();          if (workEffort != null) {            workEffortId=workEffort.getString("workEffortId");          }        }      }      if (workEffortId != null) {        if (validWorkEfforts.contains(workEffortId)) {          replaceProperty(component.getProperties(),toXProperty(workEffortIdXPropName,workEffortId));          responseProps=storeWorkEffort(component,context);        } else {          Debug.logWarning("Spoof attempt: unrelated workEffortId " + workEffortId + " on URL workEffortId "+ context.get("workEffortId"),module);          responseProps=ICalWorker.createForbiddenResponse(null);        }      } else       if (hasCreatePermission) {        responseProps=createWorkEffort(component,context);      }      if (responseProps != null) {        return responseProps;      }    }  }  Map<String,? extends Object> serviceMap=UtilMisc.toMap("workEffortId",context.get("workEffortId"),"icalData",calendar.toString());  GenericValue iCalData=publishProperties.getRelatedOne("WorkEffortIcalData",false);  Map<String,Object> serviceResult=null;  if (iCalData == null) {    serviceResult=invokeService("createWorkEffortICalData",serviceMap,context);  } else {    serviceResult=invokeService("updateWorkEffortICalData",serviceMap,context);  }  if (ServiceUtil.isError(serviceResult)) {    return ICalWorker.createPartialContentResponse(ServiceUtil.getErrorMessage(serviceResult));  }  return ICalWorker.createOkResponse(null);}  }
class C{  private ScheduleTaskImpl readInTask(Element el) throws PageException {  long timeout=su.toLong(el,"timeout");  if (timeout > 0 && timeout < 1000)   timeout*=1000;  if (timeout < 0)   timeout=600000;  try {    ScheduleTaskImpl st=new ScheduleTaskImpl(su.toString(el,"name").trim(),su.toResource(config,el,"file"),su.toDate(config,el,"startDate"),su.toTime(config,el,"startTime"),su.toDate(config,el,"endDate"),su.toTime(config,el,"endTime"),su.toString(el,"url"),su.toInt(el,"port",-1),su.toString(el,"interval"),timeout,su.toCredentials(el,"username","password"),ProxyDataImpl.getInstance(su.toString(el,"proxyHost"),su.toInt(el,"proxyPort",80),su.toString(el,"proxyUser"),su.toString(el,"proxyPassword")),su.toBoolean(el,"resolveUrl"),su.toBoolean(el,"publish"),su.toBoolean(el,"hidden",false),su.toBoolean(el,"readonly",false),su.toBoolean(el,"paused",false),su.toBoolean(el,"autoDelete",false));    return st;  } catch (  Exception e) {    e.printStackTrace();    throw Caster.toPageException(e);  }}  }
class C{  public MultiplexingSocket(String host,int port){  this((Socket)null);}  }
class C{  private void validateReferenceTransforms(Reference reference) throws XMLSignatureException {  assert reference != null;  List<Transform> transforms=reference.getTransforms();  if ((transforms != null) && (transforms.size() > 1)) {    throw new XMLSignatureException("Unexpected number of transforms. Only an exclusive canonicalization is supported.");  } else   if ((transforms != null) && (transforms.size() > 0) && (!CanonicalizationMethod.EXCLUSIVE.equals(transforms.get(0).getAlgorithm()))) {    throw new XMLSignatureException(String.format("Unexpected Transform '%s'. Only an exclusive canonicalization is supported.",transforms.get(0).getAlgorithm()));  }}  }
class C{  public void runTask(){  ReplDBMSEvent currentEvent=null;  ReplDBMSEvent firstFilteredEvent=null;  ReplDBMSEvent lastFilteredEvent=null;  long filteredEventCount=0;  ReplEvent genericEvent=null;  ReplDBMSEvent event=null;  String currentService=null;  try {    if (stage.isAutoSync()) {      eventDispatcher.put(new InSequenceNotification());    }    boolean syncTHLWithExtractor=stage.getPipeline().syncTHLWithExtractor();    lastCommitMillis=System.currentTimeMillis();    while (!cancelled) {      if (schedule.isCancelled()) {        logInfo("Task has been cancelled",null);        break;      }      event=null;      try {        taskProgress.beginExtractInterval();        genericEvent=extractor.extract();      } catch (      ExtractorException e) {        String message="Event extraction failed";        if (context.getExtractorFailurePolicy() == FailurePolicy.STOP) {          if (logger.isDebugEnabled())           logger.debug(message,e);          dispatchErrorNotification(message,null,e);          break;        } else {          logError(message,e);          continue;        }      } finally {        taskProgress.endExtractInterval();      }      if (genericEvent == null) {        if (logger.isDebugEnabled())         logger.debug("No event extracted, retrying...");        continue;      }      boolean unsafeForBlockCommit=false;      boolean doRollback=false;      if (usingBlockCommit && strictBlockCommit && genericEvent instanceof ReplDBMSEvent&& !(genericEvent instanceof ReplDBMSFilteredEvent)) {        ReplDBMSEvent re=(ReplDBMSEvent)genericEvent;        String newService=re.getDBMSEvent().getMetadataOptionValue(ReplOptionParams.SERVICE);        if (currentService == null) {          currentService=newService;        }        unsafeForBlockCommit=re.getDBMSEvent().getMetadataOptionValue(ReplOptionParams.UNSAFE_FOR_BLOCK_COMMIT) != null;        boolean isRollback=re.getDBMSEvent().getMetadataOptionValue(ReplOptionParams.ROLLBACK) != null;        if (currentService != null && !currentService.equals(newService)) {          if (re.getFragno() == 0) {            if (logger.isDebugEnabled()) {              String msg=String.format("Committing due to service change: prev svc=%s seqno=%d new_svc=%s\n",currentService,re.getSeqno(),newService);              logger.debug(msg);            }            commit();          } else {            String msg=String.format("Service name change between fragments: prev svc=%s seqno=%d fragno=%d new_svc=%s\n",currentService,re.getSeqno(),re.getFragno(),newService);            logger.warn(msg);          }        } else         if (unsafeForBlockCommit) {          commit();        } else         if (re.getFragno() == 0 && !re.getLastFrag()) {          commit();        } else         if (re.getFragno() == 0 && isRollback) {          commit();          doRollback=true;        }      }      int disposition=schedule.advise(genericEvent);      if (disposition == Schedule.PROCEED) {      } else       if (disposition == Schedule.CONTINUE_NEXT) {        updatePosition(genericEvent,false);        continue;      } else       if (disposition == Schedule.CONTINUE_NEXT_COMMIT) {        updatePosition(genericEvent,true);        continue;      } else       if (disposition == Schedule.QUIT) {        if (logger.isDebugEnabled())         logger.debug("Quitting task processing loop");        updatePosition(genericEvent,false);        break;      } else {        throw new ReplicatorException("Unexpected schedule disposition on event: disposition=" + disposition + " event="+ genericEvent.toString());      }      event=(ReplDBMSEvent)genericEvent;      if (logger.isDebugEnabled()) {        logger.debug("Extracted event: seqno=" + event.getSeqno() + " fragno="+ event.getFragno());      }      currentEvent=event;      if (!(event instanceof ReplDBMSFilteredEvent)) {        taskProgress.beginFilterInterval();        try {          for (          Filter f : filters) {            if ((event=f.filter(event)) == null) {              if (logger.isDebugEnabled()) {                logger.debug("Event discarded by filter: name=" + f.getClass().toString());              }              break;            }          }        }  finally {          taskProgress.endFilterInterval();        }      }      if (event == null) {        if (firstFilteredEvent == null) {          firstFilteredEvent=currentEvent;          lastFilteredEvent=currentEvent;          filteredEventCount=1;        } else {          lastFilteredEvent=currentEvent;          filteredEventCount++;        }        continue;      } else {        if (firstFilteredEvent != null) {          if (logger.isDebugEnabled()) {            logger.debug("Applying filtered event");          }          apply(new ReplDBMSFilteredEvent(firstFilteredEvent,lastFilteredEvent),false,false,syncTHLWithExtractor);          if (this.usingBlockCommit) {            blockEventCount+=filteredEventCount;          }          firstFilteredEvent=null;          lastFilteredEvent=null;          filteredEventCount=0;        }      }      boolean forceCommit=event.getDBMSEvent().getMetadataOptionValue(ReplOptionParams.FORCE_COMMIT) != null;      boolean doCommit=false;      if (unsafeForBlockCommit && strictBlockCommit) {        doCommit=true;      } else       if (forceCommit) {        doCommit=true;      } else       if (usingBlockCommit) {        blockEventCount++;        if (event.getLastFrag()) {          if ((blockEventCount >= blockCommitRowsCount)) {            doCommit=true;          } else           if (extractorQueueEmpty()) {            doCommit=true;          }        }      } else {        doCommit=event.getLastFrag();      }      if (logger.isDebugEnabled()) {        logger.debug("Applying event: seqno=" + event.getSeqno() + " fragno="+ event.getFragno()+ " doCommit="+ doCommit);      }      apply(event,doCommit,doRollback,syncTHLWithExtractor);    }    if (event != null && event.getLastFrag()) {      commit();    } else {      String message;      if (event == null) {        message="Performing rollback of possible partial transaction: seqno=(unavailable)";      } else {        message="Performing rollback of partial transaction: seqno=" + event.getSeqno() + " fragno="+ event.getFragno()+ " last_frag="+ event.getLastFrag();      }      logger.info(message);      applier.rollback();    }  } catch (  InterruptedException e) {    if (!schedule.isCancelled())     logger.warn("Received unexpected interrupt in stage task: " + stage.getName()); else     if (logger.isDebugEnabled())     logger.debug("Task loop interrupted",e);    try {      applier.rollback();    } catch (    InterruptedException e1) {      logWarn("Task cancelled while trying to rollback following cancellation",null);    }  }catch (  ApplierException e) {    String message;    if (event == null) {      message="Event application failed: seqno=(unavailable) message=" + e.getMessage();    } else {      message="Event application failed: seqno=" + event.getSeqno() + " fragno="+ event.getFragno()+ " message="+ e.getMessage();    }    emergencyRollback(message,event,e);  }catch (  Throwable e) {    String message;    if (event == null) {      message="Stage task failed: " + stage.getName();    } else {      message="Stage task failed: stage=" + stage.getName() + " seqno="+ +event.getSeqno()+ " fragno="+ event.getFragno();    }    emergencyRollback(message,event,e);  }}  }
class C{  public boolean contains(int val){  return index(val) >= 0;}  }
class C{  private String typeSig(Type type){  L2MSignatureGenerator sg=new L2MSignatureGenerator();  sg.assembleSig(type);  return sg.toString();}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof PinNeedle)) {    return false;  }  if (!super.equals(obj)) {    return false;  }  return true;}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("away")) {    onAway(null);  }  if (changes.has("grumpy")) {    onGrumpy(null);  }  if (changes.has(LAST_PLAYER_KILL_TIME)) {    badboy=false;    fireChange(PROP_PLAYER_KILLER);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:31.072 -0500",hash_original_method="5C17F0343C6E509718E3D350EB6D1C4E",hash_generated_method="CD780E9C0EEDF6153F684A454110836D") public MalformedCookieException(String message){  super(message);}  }
class C{  public void deleteDir(String fspath,boolean recursive) throws IsilonException {  fspath=scrubPath(fspath);  ClientResponse resp=null;  try {    fspath=URLEncoder.encode(fspath,"UTF-8");    resp=_client.delete(_baseUrl.resolve(URI_IFS.resolve(fspath + (recursive ? "?recursive=1" : ""))));    if (resp.getStatus() != 200 && resp.getStatus() != 204 && resp.getStatus() != 404) {      processErrorResponse("delete","directory: " + fspath,resp.getStatus(),resp.hasEntity() ? resp.getEntity(JSONObject.class) : null);    }  } catch (  Exception e) {    throw IsilonException.exceptions.deleteDirFailedOnIsilonArray(e.getMessage(),e);  } finally {    if (resp != null) {      resp.close();    }  }}  }
class C{  public boolean isFill(){  return fill;}  }
class C{  public CSVParserBuilder withEscapeChar(final char escapeChar){  this.escapeChar=escapeChar;  return this;}  }
class C{  public JTextReporter(Shell parent,String title){  super(parent);  this.title=title;  setShellStyle(SWT.CLOSE | SWT.MODELESS | SWT.BORDER| SWT.TITLE);  setBlockOnOpen(false);}  }
class C{  public final CC x(String x){  return corrPos(x,0);}  }
class C{  @Override public void didBeginDownload(String url,long startTime){}  }
class C{  private static void saveTenantACLs(String virtualArrayId,List<String> tenants){  Set<String> tenantIds=Sets.newHashSet();  if (tenants != null) {    tenantIds.addAll(tenants);  }  ACLUpdateBuilder builder=new ACLUpdateBuilder(VirtualArrayUtils.getACLs(virtualArrayId));  builder.setTenants(tenantIds);  try {    VirtualArrayUtils.updateACLs(virtualArrayId,builder.getACLUpdate());  } catch (  ViPRException e) {    Logger.error(e,"Failed to update Virtual Array ACLs");    String errorDesc=e.getMessage();    if (e instanceof ServiceErrorException) {      errorDesc=((ServiceErrorException)e).getDetailedMessage();    }    flash.error(MessagesUtils.get("varrays.updateVarrayACLs.failed",errorDesc));  }}  }
class C{  @Override protected void integrityCheckParameters(DeLiCluNode parent,int index){  super.integrityCheckParameters(parent,index);  DeLiCluEntry entry=parent.getEntry(index);  boolean hasHandled=hasHandled();  boolean hasUnhandled=hasUnhandled();  if (entry.hasHandled() != hasHandled) {    String soll=Boolean.toString(hasHandled);    String ist=Boolean.toString(entry.hasHandled());    throw new RuntimeException("Wrong hasHandled in node " + parent.getPageID() + " at index "+ index+ " (child "+ entry+ ")"+ "\nsoll: "+ soll+ ",\n ist: "+ ist);  }  if (entry.hasUnhandled() != hasUnhandled) {    String soll=Boolean.toString(hasUnhandled);    String ist=Boolean.toString(entry.hasUnhandled());    throw new RuntimeException("Wrong hasUnhandled in node " + parent.getPageID() + " at index "+ index+ " (child "+ entry+ ")"+ "\nsoll: "+ soll+ ",\n ist: "+ ist);  }}  }
class C{  public void serviceCancel(long svcPtr,long memPtr) throws IgniteCheckedException {  enter();  try {    PlatformCallbackUtils.serviceCancel(envPtr,svcPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public long commandSequence(){  return commandSequence;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void destroyPresenter(){  helper.destroyPresenter();}  }
class C{  public void run(){  long startTime=System.currentTimeMillis();  MLookupCache.loadStart(m_info);  String sql=m_info.Query;  if (!m_info.IsValidated) {    String validation=Env.parseContext(m_info.ctx,m_info.WindowNo,m_info.ValidationCode,false);    m_info.parsedValidationCode=validation;    if (validation.length() == 0 && m_info.ValidationCode.length() > 0) {      log.fine(m_info.KeyColumn + ": Loader NOT Validated: " + m_info.ValidationCode);      boolean isReportViewer=Env.getContext(m_info.ctx,m_info.WindowNo,"_WinInfo_IsReportViewer").equals("Y");      if (!isReportViewer) {        m_lookup.clear();        return;      }    } else {      log.fine(m_info.KeyColumn + ": Loader Validated: " + validation);      int posFrom=sql.lastIndexOf(" FROM ");      boolean hasWhere=sql.indexOf(" WHERE ",posFrom) != -1;      int posOrder=sql.lastIndexOf(" ORDER BY ");      if (posOrder != -1)       sql=sql.substring(0,posOrder) + (hasWhere ? " AND " : " WHERE ") + validation+ sql.substring(posOrder); else       sql+=(hasWhere ? " AND " : " WHERE ") + validation;      if (CLogMgt.isLevelFinest())       log.fine(m_info.KeyColumn + ": Validation=" + validation);    }  }  if (isInterrupted()) {    log.log(Level.WARNING,m_info.KeyColumn + ": Loader interrupted");    return;  }  if (CLogMgt.isLevelFiner())   Env.setContext(m_info.ctx,Env.WINDOW_MLOOKUP,m_info.Column_ID,m_info.KeyColumn,sql);  if (CLogMgt.isLevelFinest())   log.fine(m_info.KeyColumn + ": " + sql);  m_lookup.clear();  boolean isNumber=m_info.KeyColumn.endsWith("_ID");  m_hasInactive=false;  int rows=0;  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    ResultSet rs=pstmt.executeQuery();    m_allLoaded=true;    while (rs.next()) {      if (rows++ > MAX_ROWS) {        log.warning(m_info.KeyColumn + ": Loader - Too many records");        m_allLoaded=false;        break;      }      if (rows % 20 == 0 && isInterrupted())       break;      String name=rs.getString(3);      boolean isActive=rs.getString(4).equals("Y");      if (!isActive) {        name=INACTIVE_S + name + INACTIVE_E;        m_hasInactive=true;      }      if (isNumber) {        int key=rs.getInt(1);        KeyNamePair p=new KeyNamePair(key,name);        m_lookup.put(new Integer(key),p);      } else {        String value=rs.getString(2);        ValueNamePair p=new ValueNamePair(value,name);        m_lookup.put(value,p);      }    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,m_info.KeyColumn + ", " + m_info.Column_ID+ " : Loader - "+ sql,e);  }  int size=m_lookup.size();  log.finer(m_info.KeyColumn + " (" + m_info.Column_ID+ "):"+ " - Loader complete #"+ size+ " - all="+ m_allLoaded+ " - ms="+ String.valueOf(System.currentTimeMillis() - m_startTime)+ " ("+ String.valueOf(System.currentTimeMillis() - startTime)+ ")");  MLookupCache.loadEnd(m_info,m_lookup);}  }
class C{  public static <E extends Comparable<E>>int binarySearch(E[] list,E key){  int low=0;  int high=list.length - 1;  while (high >= low) {    int mid=(low + high / 2);    if (key.compareTo(list[mid]) < 0)     high=mid - 1; else     if (key.compareTo(list[mid]) == 0)     return mid; else     low=mid + 1;  }  return -low - 1;}  }
class C{  public static boolean sendError(final ServletResponse resp,final int statusCode) throws IOException {  return sendError(resp,statusCode,null);}  }
class C{  public void testDishToDishVariability(){  setDefaultParameters();  this.simulator.setNumDishes(100);  this.simulator.setStepsGenerated(2);  this.simulator.setNumSamplesPerDish(1);  this.simulator.setSampleSampleVariability(0.0001);  this.simulator.setChipChipVariability(0.0001);  this.simulator.setPixelDigitalization(0.0001);  this.simulator.setNumCellsPerDish(100);  this.simulator.simulate(this.history);  double[][][] measuredData=this.simulator.getMeasuredData();  DoubleArrayList doubleArrayList=new DoubleArrayList(measuredData[1][0]);  double sum=Descriptive.sum(doubleArrayList);  double sumOfSquares=Descriptive.sumOfSquares(doubleArrayList);  double gene2time1sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[1][0].length,sum,sumOfSquares));  DoubleArrayList doubleArrayList1=new DoubleArrayList(measuredData[2][0]);  double sum1=Descriptive.sum(doubleArrayList1);  double sumOfSquares1=Descriptive.sumOfSquares(doubleArrayList1);  double gene3time1sd=Descriptive.standardDeviation(Descriptive.variance(measuredData[2][0].length,sum1,sumOfSquares1));  double gene2time1mean=Descriptive.mean(new DoubleArrayList(measuredData[1][0]));  double gene3time1mean=Descriptive.mean(new DoubleArrayList(measuredData[2][0]));  assertEquals(Math.abs(0.1 * gene2time1mean),gene2time1sd,0.03);  assertEquals(Math.abs(0.1 * gene3time1mean),gene3time1sd,0.03);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trace_execute_1: ");  result.append(trace_execute_1);  result.append(')');  return result.toString();}  }
class C{  public Time(){  this.hour=0;  this.minute=0;  this.second=0.0;}  }
class C{  static Set<Integer> findLoadIndexes(final List<Instruction> instructions,final Predicate<LoadInstruction> isLoadIgnored){  return instructions.stream().filter(null).map(null).filter(null).map(null).collect(null,null,null);}  }
class C{  public static boolean isAbstract(int flags){  return (flags & ABSTRACT) != 0;}  }
class C{  public static int[] shuffle(int[] intArray){  if (intArray == null) {    return null;  }  return shuffle(intArray,getRandom(intArray.length));}  }
class C{  protected void notifyStructureAvailable(Instances structure){  if (m_dataSetEventTargets > 0 && structure != null) {    DataSetEvent dse=new DataSetEvent(this,structure);    notifyDataSetLoaded(dse);  } else   if (m_instanceEventTargets > 0 && structure != null) {    m_ie.setStructure(structure);    notifyInstanceLoaded(m_ie);  }}  }
class C{  public Wrapper(){  super();}  }
class C{  private synchronized void addTypeScriptConsoleConnectors(IConfigurationElement[] cf,List<ITypeScriptConsoleConnector> list){  for (  IConfigurationElement ce : cf) {    try {      list.add((ITypeScriptConsoleConnector)ce.createExecutableExtension("class"));      Trace.trace(Trace.EXTENSION_POINT,"  Loaded console connectors: " + ce.getAttribute("class"));    } catch (    Throwable t) {      Trace.trace(Trace.SEVERE,"  Could not load console connectors: " + ce.getAttribute("class"),t);    }  }}  }
class C{  public static synchronized void reentrantOuter(){  reentrantInner();}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public void addThread(final TargetProcessThread thread){  Preconditions.checkNotNull(thread,"IE00766: Thread argument can not be null");  activeProcessThreads.add(thread);  for (  final ProcessManagerListener listener : listeners) {    try {      listener.addedThread(thread);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  private void freshAttributeVector(){  m_AttValues=toDoubleArray();}  }
class C{  void recomposeIncludes(Stylesheet including){  int n=including.getIncludeCount();  if (n > 0) {    if (null == m_includesComposed)     m_includesComposed=new Vector();    for (int i=0; i < n; i++) {      Stylesheet included=including.getInclude(i);      m_includesComposed.addElement(included);      recomposeIncludes(included);    }  }}  }
class C{  public void updateBranches() throws VcsException {  VirtualFile root=getSelectedRoot();  GitSimpleHandler handler=new GitSimpleHandler(myProject,root,GitCommand.BRANCH);  handler.setSilent(true);  handler.addParameters("--no-color","-a","--no-merged");  String output=handler.run();  myBranchChooser.clear();  for (StringTokenizer lines=new StringTokenizer(output,"\n",false); lines.hasMoreTokens(); ) {    String branch=lines.nextToken().substring(2);    myBranchChooser.addElement(branch,false);  }}  }
class C{  public AddressConstantOperand(Extent v){  this(v.toWord().toAddress());}  }
class C{  public synchronized String exec(String a,String b){  if (a == null || b == null) {    return null;  }  int x;  int y;  int maxx;  int maxy;  int go[]=new int[4];  final int X=1;  final int Y=2;  final int R=3;  final int D=0;  maxx=a.length() + 1;  maxy=b.length() + 1;  if ((maxx >= sizex) || (maxy >= sizey)) {    sizex=maxx + 8;    sizey=maxy + 8;    net=new int[sizex][sizey];    way=new int[sizex][sizey];  }  for (x=0; x < maxx; x++) {    for (y=0; y < maxy; y++) {      net[x][y]=0;    }  }  for (x=1; x < maxx; x++) {    net[x][0]=x;    way[x][0]=X;  }  for (y=1; y < maxy; y++) {    net[0][y]=y;    way[0][y]=Y;  }  for (x=1; x < maxx; x++) {    for (y=1; y < maxy; y++) {      go[X]=net[x - 1][y] + DELETE;      go[Y]=net[x][y - 1] + INSERT;      go[R]=net[x - 1][y - 1] + REPLACE;      go[D]=net[x - 1][y - 1] + ((a.charAt(x - 1) == b.charAt(y - 1)) ? NOOP : 100);      short min=D;      if (go[min] >= go[X]) {        min=X;      }      if (go[min] > go[Y]) {        min=Y;      }      if (go[min] > go[R]) {        min=R;      }      way[x][y]=min;      net[x][y]=(short)go[min];    }  }  StringBuilder result=new StringBuilder();  final char base='a' - 1;  char deletes=base;  char equals=base;  for (x=maxx - 1, y=maxy - 1; x + y != 0; ) {switch (way[x][y]) {case X:      if (equals != base) {        result.append("-" + (equals));        equals=base;      }    deletes++;  x--;break;case Y:if (deletes != base) {result.append("D" + (deletes));deletes=base;}if (equals != base) {result.append("-" + (equals));equals=base;}result.append('I');result.append(b.charAt(--y));break;case R:if (deletes != base) {result.append("D" + (deletes));deletes=base;}if (equals != base) {result.append("-" + (equals));equals=base;}result.append('R');result.append(b.charAt(--y));x--;break;case D:if (deletes != base) {result.append("D" + (deletes));deletes=base;}equals++;x--;y--;break;}}if (deletes != base) {result.append("D" + (deletes));deletes=base;}return result.toString();}  }
class C{  private void fillFilterData(Filter presetFilter){  filterName.setText(presetFilter.getName());  regEx.setText(presetFilter.getFilterExpression());  filterRule.setSelectedIndex(presetFilter.getFilterRule());  isExclusionFilter.setSelected(presetFilter.isExclusionFilter());  isEnabled.setSelected(presetFilter.isEnabled());}  }
class C{  public boolean redial(BluetoothDevice device){  if (DBG)   log("redial()");  if (mService != null && isEnabled() && isValidDevice(device)) {    try {      return mService.redial(device);    } catch (    RemoteException e) {      Log.e(TAG,Log.getStackTraceString(new Throwable()));    }  }  if (mService == null)   Log.w(TAG,"Proxy not attached to service");  return false;}  }
class C{  protected void addImportPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Package_import_feature"),getString("_UI_PropertyDescriptor_description","_UI_Package_import_feature","_UI_Package_type"),TypesPackage.Literals.PACKAGE__IMPORT,true,false,true,null,null,null));}  }
class C{  public static BfsNode create(byte[] bytes) throws IOException {  return create(new DataInputStream(new ByteArrayInputStream(bytes)));}  }
class C{  public void testCase10(){  byte aBytes[]={1,100,56,7,98,-1,39,-128,127,5,6,7,8,9};  byte bBytes[]={15,48,-29,7,98,-1,39,-128};  int aSign=-1;  int bSign=-1;  byte rBytes[]={23,115,11,78,35,-11};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public DoubleMatrix2D identity(int rowsAndColumns){  DoubleMatrix2D matrix=make(rowsAndColumns,rowsAndColumns);  for (int i=rowsAndColumns; --i >= 0; ) {    matrix.setQuick(i,i,1);  }  return matrix;}  }
class C{  public Builder maxWaitForConnection(final int maxWait){  this.maxWaitForConnection=maxWait;  return this;}  }
class C{  public XYBubbleRenderer(){  this(SCALE_ON_BOTH_AXES);}  }
class C{  public static String[] convertStrings(List<String> strings){  String[] ret=new String[strings.size()];  for (int i=0; i < ret.length; i++) {    ret[i]=strings.get(i);  }  return ret;}  }
class C{  public GemFireCheckedException(){  super();}  }
class C{  public void testNonResourceParameter(){  doTest();}  }
class C{  public static double cosineFormulaRad(double lat1,double lon1,double lat2,double lon2){  final double slat1=Math.sin(lat1), clat1=MathUtil.sinToCos(lat1,slat1);  final double slat2=Math.sin(lat2), clat2=MathUtil.sinToCos(lat2,slat2);  return Math.acos(Math.min(1.0,slat1 * slat2 + clat1 * clat2 * Math.cos(Math.abs(lon2 - lon1))));}  }
class C{  public static void main(String[] args){  StopBodyAfterCollision simulation=new StopBodyAfterCollision();  simulation.run();}  }
class C{  public Gallery(Composite parent,int style){  try {    fc=new FigureCanvas(parent,checkStyle(style) | SWT.DOUBLE_BUFFERED);  } catch (  Exception e) {    fc=new FigureCanvas(parent,SWT.DOUBLE_BUFFERED);  }  horizontal=((style & SWT.HORIZONTAL) != 0);  wrap=((style & SWT.WRAP) != 0);  hookControl(fc);  createContents();}  }
class C{  public RecentItemEvent(AbstractRecentItemsHandler<M,T> source,T file){  super(source);  m_Item=file;}  }
class C{  public File resourceEmlFile(@NotNull String resourceName,@NotNull BigDecimal version){  String fn="eml-" + version.toPlainString() + ".xml";  return dataFile(RESOURCES_DIR + "/" + resourceName+ "/"+ fn);}  }
class C{  public static void putbytes2Uint8s(char[] destUint8s,byte[] srcBytes,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destUint8s[destOffset + i]=convertByte2Uint8(srcBytes[srcOffset + i]);  }}  }
class C{  public DistributedSystemConfigImpl(DistributionConfig distConfig,String remoteCommand){  if (distConfig == null) {    throw new IllegalArgumentException(LocalizedStrings.DistributedSystemConfigImpl_DISTRIBUTIONCONFIG_MUST_NOT_BE_NULL.toLocalizedString());  }  this.mcastAddress=InetAddressUtil.toString(distConfig.getMcastAddress());  this.mcastPort=distConfig.getMcastPort();  this.locators=distConfig.getLocators();  this.membershipPortRange=getMembershipPortRangeString(distConfig.getMembershipPortRange());  this.systemName=distConfig.getName();  this.sslEnabled=distConfig.getClusterSSLEnabled();  this.sslCiphers=distConfig.getClusterSSLCiphers();  this.sslProtocols=distConfig.getClusterSSLProtocols();  this.sslAuthenticationRequired=distConfig.getClusterSSLRequireAuthentication();  this.logFile=distConfig.getLogFile().getPath();  this.logLevel=LogWriterImpl.levelToString(distConfig.getLogLevel());  this.logDiskSpaceLimit=distConfig.getLogDiskSpaceLimit();  this.logFileSizeLimit=distConfig.getLogFileSizeLimit();  basicSetBindAddress(distConfig.getBindAddress());  this.tcpPort=distConfig.getTcpPort();  this.disableTcp=distConfig.getDisableTcp();  this.remoteCommand=remoteCommand;  this.serverBindAddress=distConfig.getServerBindAddress();  this.enableNetworkPartitionDetection=distConfig.getEnableNetworkPartitionDetection();  this.memberTimeout=distConfig.getMemberTimeout();  this.refreshInterval=DistributedSystemConfig.DEFAULT_REFRESH_INTERVAL;  this.gfSecurityProperties=(Properties)distConfig.getSSLProperties().clone();}  }
class C{  public HybridTimestamp clone(){  return new HybridTimestamp(physicalTimeProvider,logicalTime,logicalCounter);}  }
class C{  public IntegerOrPercentage(final String s){  final int pos=s.indexOf('%');  if (pos >= 0) {    mValue=Integer.parseInt(s.substring(0,pos));    mIsPercentage=true;  } else {    mValue=Integer.parseInt(s);    mIsPercentage=false;  }}  }
class C{  @SuppressWarnings("UnusedDeclaration") public void useXMLExtraction(){  isXMLExtraction=true;}  }
class C{  public void test_ESTCARD_quads_01() throws Exception {  if (TestMode.quads != getTestMode())   return;  doInsertbyURL("POST",packagePath + "test_estcard.trig");  final long rangeCount=m_repo.rangeCount(null,null,null);  assertEquals(7,rangeCount);}  }
class C{  private void interpretRetainCase(StringBuffer buf,char ch){  if (fRetainCaseMode == RC_UPPER)   buf.append(String.valueOf(ch).toUpperCase()); else   if (fRetainCaseMode == RC_LOWER)   buf.append(String.valueOf(ch).toLowerCase()); else   if (fRetainCaseMode == RC_FIRSTUPPER) {    buf.append(String.valueOf(ch).toUpperCase());    fRetainCaseMode=RC_MIXED;  } else   buf.append(ch);}  }
class C{  @Override public boolean canSave(){  return false;}  }
class C{  public void injectNullReceived(){  doNotify(new Event(EType.KILLSENDER));}  }
class C{  public static void main(String args[]){  SearchDemoOsmAgentApp demo=new SearchDemoOsmAgentApp();  demo.readMap(DataResource.getULMFileResource());  demo.startApplication();}  }
class C{  public synchronized void pack(JarFile in,OutputStream out) throws IOException {  assert (Utils.currentInstance.get() == null);  boolean needUTC=!props.getBoolean(Utils.PACK_DEFAULT_TIMEZONE);  try {    Utils.currentInstance.set(this);    if (needUTC) {      Utils.changeDefaultTimeZoneToUtc();    }    if ("0".equals(props.getProperty(Pack200.Packer.EFFORT))) {      Utils.copyJarFile(in,out);    } else {      (new DoPack()).run(in,out);    }  }  finally {    Utils.currentInstance.set(null);    if (needUTC) {      Utils.restoreDefaultTimeZone();    }    in.close();  }}  }
class C{  public static void copyFile(File sourceFile,File destFile) throws IOException {  if (!sourceFile.exists()) {    throw new IOException("Does not exist: " + sourceFile.getAbsolutePath());  }  copyFile(new FileInputStream(sourceFile),new FileOutputStream(destFile));}  }
class C{  public void processKeyEvent(KeyEvent e,MenuElement path[],MenuSelectionManager manager){}  }
class C{  public boolean isSafeToExecuteSUTCode(){  Thread current=Thread.currentThread();  if (!privilegedThreads.contains(current)) {    return true;  } else {    return privilegedThreadToIgnore == current;  }}  }
class C{  public SampleVcpcFastRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  public void release(){  delegate.release();}  }
class C{  private void updateUser(User user,boolean refreshAvatar){  this.user=user;  if (avatar == null) {    return;  }  if (avatar.getDrawable() == null || refreshAvatar) {    loadAvatar(!refreshAvatar);  }  if (user.getPoints() != null) {    long points=user.getPoints();    Level level=new Level(points);    levelText.setText(String.valueOf(level.getLevel()));  }  followView.setUser(user,userHandler,client);  decideEditLinks();}  }
class C{  protected boolean allowReplyFromSender(){  return false;}  }
class C{  public final static char[] toCharArray(byte[] barr,String charset) throws UnsupportedEncodingException {  return new String(barr,charset).toCharArray();}  }
class C{  static Tuple0OfNullables ofNullables(){  return Tuple0OfNullablesImpl.EMPTY_TUPLE;}  }
class C{  public <T>T call(String methodName,String restPath,Class<T> expectedResponse,Object payload,Map<String,String> queryParams){  WebTarget webTarget=createWebTarget(restPath,queryParams);  Response result=webTarget.request().headers(headers).method(methodName.toString(),Entity.entity(payload,MediaType.APPLICATION_XML),Response.class);  if (expectedResponse.getName().equals(Response.class.getName())) {    return (T)result;  }  if (result != null && result.hasEntity() && isStatusCodeOK(result,restPath)) {    return (T)result.readEntity(expectedResponse);  }  return null;}  }
class C{  public boolean isEventCondition(){  return false;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.TAGGED_TEMPLATE_STRING__TARGET:    return target != null;case N4JSPackage.TAGGED_TEMPLATE_STRING__TEMPLATE:  return template != null;}return super.eIsSet(featureID);}  }
class C{  public void rejectInvitation() throws RcsPermissionDeniedException, RcsGenericException {  try {    mSessionIntf.rejectInvitation();  } catch (  Exception e) {    RcsPermissionDeniedException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  private void DTDprolog() throws SAXException, IOException {  final java.io.Writer writer=m_writer;  if (m_needToOutputDocTypeDecl) {    outputDocTypeDecl(m_elemContext.m_elementName,false);    m_needToOutputDocTypeDecl=false;  }  if (m_inDoctype) {    writer.write(" [");    writer.write(m_lineSep,0,m_lineSepLen);    m_inDoctype=false;  }}  }
class C{  public void testRemoveFirst(){  LinkedBlockingDeque q=populatedDeque(SIZE);  for (int i=0; i < SIZE; ++i) {    assertEquals(i,q.removeFirst());  }  try {    q.removeFirst();    shouldThrow();  } catch (  NoSuchElementException success) {  }  assertNull(q.peekFirst());}  }
class C{  public boolean same(ContractViolation other){  if (!contract.getClass().equals(other.contract.getClass()))   return false;  if (!statement.getClass().equals(other.statement.getClass()))   return false;  if (exception != null && other.exception != null) {    if (!exception.getClass().equals(other.exception.getClass()))     return false;  }  if (statement instanceof MethodStatement) {    MethodStatement ms1=(MethodStatement)statement;    MethodStatement ms2=(MethodStatement)other.statement;    if (ms1.getMethod().getMethod().equals(ms2.getMethod().getMethod())) {      return true;    }  } else   if (statement instanceof ConstructorStatement) {    ConstructorStatement ms1=(ConstructorStatement)statement;    ConstructorStatement ms2=(ConstructorStatement)other.statement;    if (ms1.getConstructor().getConstructor().equals(ms2.getConstructor().getConstructor())) {      return true;    }  } else   if (statement instanceof AssignmentStatement) {    VariableReference var1=statement.getReturnValue();    VariableReference var2=other.statement.getReturnValue();    if (var1 instanceof FieldReference && var2 instanceof FieldReference) {      if (((FieldReference)var1).getField().getField().equals(((FieldReference)var2).getField().getField()))       return true;    }  }  return false;}  }
class C{  private void prepareTestCase1(){  when(page1.canSkip()).thenReturn(false);  when(page1.isCompleted()).thenReturn(true);  when(page2.canSkip()).thenReturn(false);  when(page2.isCompleted()).thenReturn(true);  when(page3.canSkip()).thenReturn(true);  when(page3.isCompleted()).thenReturn(true);  when(page4.canSkip()).thenReturn(false);  when(page4.isCompleted()).thenReturn(true);  wizard.addPage(page1);  wizard.addPage(page2);  wizard.addPage(page3);  wizard.addPage(page4);}  }
class C{  public void runTest() throws Throwable {  Document doc;  Element rootNode;  Node newChild;  Node appendedChild;  doc=(Document)load("staff",true);  rootNode=doc.getDocumentElement();  newChild=doc.createAttribute("newAttribute");{    boolean success=false;    try {      appendedChild=rootNode.appendChild(newChild);    } catch (    DOMException ex) {      success=(ex.code == DOMException.HIERARCHY_REQUEST_ERR);    }    assertTrue("throw_HIERARCHY_REQUEST_ERR",success);  }}  }
class C{  private void createSampler(){  this.sampler=glGenSamplers();  glSamplerParameteri(this.sampler,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glSamplerParameteri(this.sampler,GL_TEXTURE_MAG_FILTER,GL_NEAREST);}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("The class index","c",1,"-c <the class index>"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public ZlibInflater(Wrapper wrapper){  this(wrapper,null);}  }
class C{  public T caseN4TypeDeclaration(N4TypeDeclaration object){  return null;}  }
class C{  static int svd_idamax(int n,double[] dx,int ix0,int incx){  int ix, imax;  double dmax;  if (n < 1)   return -1;  if (n == 1)   return 0;  if (incx == 0)   return -1;  ix=(incx < 0) ? ix0 + ((-n + 1) * incx) : ix0;  imax=ix;  dmax=fabs(dx[ix]);  for (int i=1; i < n; i++) {    ix+=incx;    double dtemp=fabs(dx[ix]);    if (dtemp > dmax) {      dmax=dtemp;      imax=ix;    }  }  return imax;}  }
class C{  public NoRouteToHostException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public Reference<? extends T> remove() throws InterruptedException {  return remove(0L);}  }
class C{  public boolean isOverwritePriceLimit(){  Object oo=get_Value(COLUMNNAME_OverwritePriceLimit);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public List<Zoneset> showZoneset(Integer vsanId,boolean activeZonesetOnly,String zoneName,boolean excludeMembers,boolean excludeAliases) throws NetworkDeviceControllerException {  List<Zoneset> zonesets=new ArrayList<Zoneset>();  SSHPrompt[] prompts={SSHPrompt.POUND,SSHPrompt.GREATER_THAN};  StringBuilder buf=new StringBuilder();  String zonesetCommand=MDSDialogProperties.getString("MDSDialog.showZoneset.cmd");  sendWaitFor(zonesetCommand + vsanId.toString() + "\n",defaultTimeout,prompts,buf);  if (buf.toString().indexOf(MDSDialogProperties.getString("MDSDialog.showZoneset.not.configured")) >= 0) {    throw NetworkDeviceControllerException.exceptions.fabricNotFoundInNetwork(vsanId.toString(),"");  }  String[] lines=getLines(buf);  Zoneset zoneset=null;  Zone zone=null;  ZoneMember member=null;  String[] regex={MDSDialogProperties.getString("MDSDialog.showZoneset.zonesetname.match"),MDSDialogProperties.getString("MDSDialog.showZoneset.zonename.match"),MDSDialogProperties.getString("MDSDialog.showZoneset.pwwn.match"),MDSDialogProperties.getString("MDSDialog.showZoneset.deviceAlias.match")};  String[] groups=new String[10];  Map<String,String> aliasDatabase=showDeviceAliasDatabase();  String filterCriteria=null;  if (!StringUtils.isEmpty(zoneName) && zoneName.startsWith(NetworkDeviceController.ZONESET_QUERY_FILTER)) {    filterCriteria=zoneName.substring(NetworkDeviceController.ZONESET_QUERY_FILTER.length());  }  for (  String line : lines) {    int index=match(line,regex,groups);switch (index) {case 0:      zoneset=new Zoneset(groups[0]);    if (!vsanId.toString().equals(groups[1])) {      String message="VSAN " + vsanId.toString() + " not the expected VSAN "+ groups[1];      throw NetworkDeviceControllerException.exceptions.mdsUnexpectedDeviceState(message);    }  zonesets.add(zoneset);break;case 1:if (StringUtils.isEmpty(zoneName) || StringUtils.equals(groups[0],zoneName) || (!StringUtils.isEmpty(filterCriteria) && groups[0].contains(filterCriteria))) {zone=new Zone(groups[0]);zoneset.getZones().add(zone);} else {zone=null;}break;case 2:case 3:if (zone == null || excludeMembers) {break;}member=new ZoneMember(ZoneMember.ConnectivityMemberType.WWPN);zone.getMembers().add(member);if (excludeAliases) {_log.info("Excluding aliases while getting zone members");}if (index == 2) {member.setAddress(groups[0]);if (!excludeAliases && groups.length >= 2 && groups[1] != null) {member.setAlias(groups[1].replace("[","").replace("]",""));}} else if (index == 3) {if (!excludeAliases) {member.setAlias(groups[0]);member.setAliasType(true);}String pwwn=getDeviceAliasPwwn(groups[0],aliasDatabase);if (!StringUtils.isEmpty(pwwn)) {member.setAddress(pwwn);}}break;}}if (zonesets.isEmpty()) {return zonesets;}sendWaitFor(MDSDialogProperties.getString("MDSDialog.showZoneset.showzonesetactivevsan.cmd") + vsanId.toString() + "\n",defaultTimeout,prompts,buf);lines=getLines(buf);String[] regex2={MDSDialogProperties.getString("MDSDialog.showZoneset.zonesetname2.match"),MDSDialogProperties.getString("MDSDialog.showZoneset.zonename2.match")};Zoneset activeZoneset=null;for (String line : lines) {int index=match(line,regex2,groups);switch (index) {case 0:String activeName=groups[0];for (Zoneset zs : zonesets) {if (zs.getName().equals(activeName)) {activeZoneset=zs;zs.setActive(true);} else {zs.setActive(false);}}break;case 1:if (zoneset != null) {for (Zone zo : activeZoneset.getZones()) {if (zo.getName().equals(groups[0])) {zo.setActive(true);}}}}}if (activeZonesetOnly) {zonesets.clear();if (activeZoneset != null) {zonesets.add(activeZoneset);}}return zonesets;}  }
class C{  public boolean isLocalInt32BaseAtomicsSupported(){  return hasExtension("cl_khr_local_int32_base_atomics");}  }
class C{  public static void clearDnsCache(){  addressCache.clear();}  }
class C{  public void rest(){  this.offset+=this.length;  this.length=this.originalString.length() - this.offset;}  }
class C{  public synchronized boolean isClosed(){  return closed;}  }
class C{  public boolean hasChanged(){  boolean result=changed;  changed=false;  return result;}  }
class C{  public boolean canRestore(ReviewDb db) throws OrmException {  return canAbandon(db) && getRefControl().canUpload();}  }
class C{  public FileCommitSeqnoAccessor(FileCommitSeqno commitSeqno){  this.commitSeqno=commitSeqno;}  }
class C{  private static void findPathsOfLength(Graph pag,Set<List<Node>> paths,Node previous,Node current,Node target,Set<Node> condition,Set<Node> conditionClosure,List<Node> history,Integer length){  if (history.size() > length) {    return;  }  if (history.contains(current)) {    return;  }  if (current.equals(target) && history.size() == length) {    history.add(current);    paths.add(history);    return;  }  List<Node> adjacencies=pag.getAdjacentNodes(current);  for (  Node adj : adjacencies) {    if (previous == null) {      List<Node> h=new ArrayList<>(history);      h.add(current);      findPathsOfLength(pag,paths,current,adj,target,condition,conditionClosure,h,length);      continue;    }    boolean pass;    boolean isConditionClosure=conditionClosure.contains(current);    boolean isCondition=condition.contains(current);    if (pag.isDefCollider(previous,current,adj)) {      pass=isConditionClosure;    } else {      pass=!isCondition || !pag.isUnderlineTriple(previous,current,adj) && isOpen(pag,previous,current,adj);    }    if (pass) {      List<Node> h=new ArrayList<>(history);      h.add(current);      findPathsOfLength(pag,paths,current,adj,target,condition,conditionClosure,h,length);    }  }}  }
class C{  public boolean visit(VariableDeclarationExpression node){  return true;}  }
class C{  public void reset() throws IOException {  fOffset=0;  fSurrogate=-1;}  }
class C{  public static String wildcardToRegex(String wildcard){  StringBuffer s=new StringBuffer(wildcard.length());  s.append('^');  for (int i=0; i < wildcard.length(); i++) {    char c=wildcard.charAt(i);switch (c) {case '*':      s.append(".*");    break;case '?':  s.append(".");break;case '(':case ')':case '[':case ']':case '$':case '^':case '.':case '{':case '}':case '|':case '\\':s.append("\\");s.append(c);break;default :s.append(c);break;}}s.append('$');return s.toString();}  }
class C{  public static ShortestPathFinder newInstanceOfGreedy(final Coords destination,final MoveStepType stepType,final IGame game){  final ShortestPathFinder spf=new ShortestPathFinder(new ShortestPathFinder.MovePathRelaxer(),new MovePathGreedyComparator(destination),stepType,game);  spf.addStopCondition(new DestinationReachedStopCondition(destination));  spf.addFilter(new MovePathGreedyFilter(destination));  return spf;}  }
class C{  private double calculateNodeTimes(TreeModel tree,NodeRef node){  NodeRef parent=tree.getParent(node);  double time0=0.0;  if (!tree.isExternal(node)) {    NodeRef child1=tree.getChild(node,0);    double t1=calculateNodeTimes(tree,child1);    NodeRef child2=tree.getChild(node,1);    double t2=calculateNodeTimes(tree,child2);    time0=(t1 + t2) / 2.0;  }  if (parent == null)   return 0.0;  double branchTime=tree.getNodeHeight(parent) - tree.getNodeHeight(node);  double time1=time0 + branchTime;  nodeTimes[node.getNumber()]=time0;  return time1;}  }
class C{  public CNodeSynchronizer(final BreakpointManager manager,final ZyGraph graph,final CDebugPerspectiveModel debugPerspective){  m_graph=Preconditions.checkNotNull(graph,"IE01511: Graph argument can not be null");  m_manager=Preconditions.checkNotNull(manager,"IE01512: Manager argument can not be null");  m_debugPerspective=Preconditions.checkNotNull(debugPerspective,"IE02296: debugPerspective argument can not be null");  graph.addNodeModifier(m_realizerListener);}  }
class C{  protected void rotateOrthogonal(){  active.setRotation(active.getRotation() + 1,this);  error.setRotation(error.getRotation() + 1,this);  displayState();  repaint();}  }
class C{  static <T>T loadService(Class<T> ofType){  List<String> implClasses=loadServicesImplementations(ofType);  for (  String implClass : implClasses) {    T result=attemptLoad(ofType,implClass);    if (result != null) {      if (LOG.isLoggable(Level.FINEST)) {        LOG.finest("Selected " + ofType.getSimpleName() + " implementation: "+ result.getClass().getName());      }      return result;    }  }  throw (new IllegalStateException("Could not load " + ofType.getName() + " implementation"));}  }
class C{  public void removeMailServer(String hostName) throws SecurityException {  checkWriteAccess();  Element mail=_getRootElement("mail");  Element[] children=XMLConfigWebFactory.getChildren(mail,"server");  if (children.length > 0) {    for (int i=0; i < children.length; i++) {      Element el=children[i];      String smtp=el.getAttribute("smtp");      if (smtp != null && smtp.equalsIgnoreCase(hostName)) {        mail.removeChild(children[i]);      }    }  }}  }
class C{  private void sincronizarBase(){  listaColecao=ControleDAO.getBanco().getColecaoDAO().listar();}  }
class C{  public static void register(){  final NameAction name=new NameAction();  CommandCenter.register("name",name);}  }
class C{  public boolean isLocal(){  return LOCAL.equals(master);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mDueChallengeLogic=mUserLogicFactory.createDueChallengeLogic(mUserManager.getCurrentUser());  mCategories=mCategoryDataSource.getAll();}  }
class C{  public boolean isAlterTableForDropUsed(){  return alterTableForDropUsed;}  }
class C{  public JenkinsServer(URI serverUri){  this(new JenkinsHttpClient(serverUri));}  }
class C{  private HttpEntity executeGet(String url,String[][] getParams,String[][] headerParams) throws IOException {  if (getParams != null) {    List<NameValuePair> formparams=new ArrayList<NameValuePair>();    for (    String[] param : getParams) {      if (param[0] != null && param[1] != null) {        formparams.add(new BasicNameValuePair(param[0],param[1]));      }    }    url=url + "?" + URLEncodedUtils.format(formparams,"UTF-8");  }  HttpGet httpget=new HttpGet(url);  if (headerParams != null) {    for (    String[] param : headerParams) {      if (param[0] != null && param[1] != null) {        httpget.setHeader(param[0],param[1]);      }    }  }  return executeHttpRequest(httpget);}  }
class C{  public String readString() throws IOException {  int len=in.readInt();  if (len == -1) {    return null;  }  StringBuilder buff=new StringBuilder(len);  for (int i=0; i < len; i++) {    buff.append(in.readChar());  }  String s=buff.toString();  s=StringUtils.cache(s);  return s;}  }
class C{  public int describeContents(){  return 0;}  }
class C{  public static BiosCommandResult createPendingResult(){  BiosCommandResult result=new BiosCommandResult();  result.pending();  return result;}  }
class C{  public static AggregateParams compileAggregateParams(List<String> outputTags,List<String> outputFields,List<String> groupbys,List<String> functions,List<String> sortFieldOrders) throws IllegalArgumentException, AggregateFunctionNotSupportedException {  AggregateParams aggParams=new AggregateParams();  for (  String groupby : groupbys) {    if (!outputTags.contains(groupby) && !outputFields.contains(groupby)) {      throw new IllegalArgumentException(groupby + ", All gb fields should appear in outputField list or outputTag list");    }  }  for (  String function : functions) {    AggregateFunctionTypeMatcher m=AggregateFunctionType.count.matcher(function);    if (m.find()) {      aggParams.setCounting(true);      continue;    }    m=AggregateFunctionType.sum.matcher(function);    if (m.find()) {      if (!outputFields.contains(m.field())) {        throw new IllegalArgumentException(m.field() + ", All summary function fields should appear in outputField list");      }      aggParams.getSumFunctionFields().add(m.field());      continue;    }    throw new AggregateFunctionNotSupportedException("function " + function + " is not supported, only count, sum aggregate functions are now supported");  }  List<String> groupbyFields=new ArrayList<String>();  groupbyFields.add(Aggregator.GROUPBY_ROOT_FIELD_NAME);  groupbyFields.addAll(groupbys);  aggParams.setGroupbyFields(groupbyFields);  boolean byKeySorting=false;  for (  String sortFieldOrder : sortFieldOrders) {    AggregateParams.SortFieldOrder sfo=SortFieldOrderType.matchAll(sortFieldOrder);    if (sfo == null) {      throw new IllegalArgumentException(sortFieldOrder + ", All sort field order should be <field>=(asc|desc)");    }    if (sfo.getField().equals(AggregateParams.SortFieldOrder.SORT_BY_AGGREGATE_KEY)) {      byKeySorting=true;    } else     if (!sfo.getField().equals(AggregateParams.SortFieldOrder.SORT_BY_COUNT)) {      if (!groupbys.contains(sfo.getField()) && !aggParams.getSumFunctionFields().contains(sfo.getField())) {        throw new IllegalArgumentException(sortFieldOrder + ", All sort field order should appear in gb or function fields");      }    }    aggParams.getSortFieldOrders().add(sfo);  }  if (!byKeySorting) {    aggParams.getSortFieldOrders().add(new AggregateParams.SortFieldOrder(AggregateParams.SortFieldOrder.SORT_BY_AGGREGATE_KEY,true));  }  return aggParams;}  }
class C{  public static String decodeString(String source) throws URISyntaxException {  if (source == null) {    return source;  }  int i;  if ((i=source.indexOf(QUOTE_MARKER)) == -1) {    return source;  }  ByteArrayOutputStream decoded=new ByteArrayOutputStream();  try {    decoded.write(toBytes(source.substring(0,i)));    int len=source.length();    for (; i < len; i++) {      char ch=source.charAt(i);      if (ch == QUOTE_MARKER) {        if ((i + 2) >= len) {          ch=ENCODING_ERROR_MARKER;        } else {          try {            ch=(char)Integer.parseInt(source.substring(i + 1,i + 3),16);          } catch (          NumberFormatException nfe) {            throw new URISyntaxException(source,"Invalid escape value");          }          decoded.write(ch);        }        i+=2;      } else {        decoded.write(ch);      }    }    return new String(decoded.toByteArray(),"UTF8");  } catch (  IOException e) {    e.printStackTrace();    return null;  }}  }
class C{  public boolean isInCache(String imageLocation){  return imageCache.containsKey(imageLocation);}  }
class C{  public static InputStream decrypt(InputStream encryptedDataStream,File x509CertificateFile,File privateKeyFile) throws IOException, CertificateException, EncryptionException {  return new SMIMEDecryptedInputStream(encryptedDataStream,x509CertificateFile,privateKeyFile);}  }
class C{  public Territory(final String name,final boolean water,final GameData data,final int... coordinate){  super(name,data);  m_water=water;  m_units=new UnitCollection(this,getData());  if (data.getMap().isCoordinateValid(coordinate)) {    m_coordinate=coordinate;  } else {    throw new IllegalArgumentException("Invalid coordinate: " + coordinate[0] + ","+ coordinate[1]);  }}  }
class C{  private void initializeLiveAttributes(){  cx=createLiveAnimatedLength(null,SVG_CX_ATTRIBUTE,SVG_CIRCLE_CX_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  cy=createLiveAnimatedLength(null,SVG_CY_ATTRIBUTE,SVG_CIRCLE_CY_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  r=createLiveAnimatedLength(null,SVG_R_ATTRIBUTE,null,SVGOMAnimatedLength.OTHER_LENGTH,true);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public static final CButton createNewButton(boolean withText){  if (withText)   return createNewButton(Msg.getMsg(Env.getCtx(),A_NEW));  return createNewButton(null);}  }
class C{  public static void assertSearcherHasNotChanged(SolrIndexSearcher expected){  SolrQueryRequest req=req("*:*");  try {    SolrIndexSearcher newSearcher=getMainSearcher(req);    assertSame(expected,newSearcher);  }  finally {    req.close();  }}  }
class C{  public boolean isResettable(){  return source.isResettable();}  }
class C{  private static Shape bottomEdge(BufferedImage image){  GeneralPath path=new GeneralPath();  Point2D p1=null;  Point2D p2=null;  Line2D line=new Line2D.Float();  Point2D p=new Point2D.Float();  int foundPointX=-1;  for (int i=0; i < image.getWidth(); i++) {    for (int j=image.getHeight() - 1; j >= 0; j--) {      if ((image.getRGB(i,j) & 0xff000000) != 0) {        p.setLocation(i,j);        foundPointX=i;        break;      }    }    if (foundPointX >= 0) {      if (p2 == null) {        p1=new Point2D.Float(foundPointX,0);        path.moveTo(p1.getX(),p1.getY());        p2=new Point2D.Float();        p2.setLocation(p);      } else {        p2=detectLine(p1,p2,p,line,path);      }    }  }  path.lineTo(p.getX(),p.getY());  if (foundPointX >= 0) {    path.lineTo(foundPointX,0);  }  path.closePath();  return path;}  }
class C{  public static void main(String args[]) throws IOException {  DistributionConfigImpl cfg=new DistributionConfigImpl();  String fileName=DistributionConfig.GEMFIRE_PREFIX + "properties";  if (args != null && args.length > 0) {    String temp=args[0].trim();    fileName="".equals(temp) ? fileName : temp;  }  cfg.toFile(new File(fileName));}  }
class C{  public static void requestPermissions(CordovaPlugin plugin,int requestCode,String[] permissions){  try {    Method requestPermission=CordovaInterface.class.getDeclaredMethod("requestPermissions",CordovaPlugin.class,int.class,String[].class);    requestPermission.invoke(plugin.cordova,plugin,requestCode,permissions);  } catch (  NoSuchMethodException noSuchMethodException) {    LOG.d(LOG_TAG,"No need to request permissions " + Arrays.toString(permissions));    deliverPermissionResult(plugin,requestCode,permissions);  }catch (  IllegalAccessException illegalAccessException) {    LOG.e(LOG_TAG,"IllegalAccessException when requesting permissions " + Arrays.toString(permissions),illegalAccessException);  }catch (  InvocationTargetException invocationTargetException) {    LOG.e(LOG_TAG,"invocationTargetException when requesting permissions " + Arrays.toString(permissions),invocationTargetException);  }}  }
class C{  public void add(Predicate p,BasicStroke stroke){  super.add(p,stroke);}  }
class C{  public void clear(){  rollingBuffer.clear();  needKeyframe=true;  lastReadTimeUs=Long.MIN_VALUE;  spliceOutTimeUs=Long.MIN_VALUE;  largestParsedTimestampUs=Long.MIN_VALUE;}  }
class C{  public static byte[] subarray(final byte[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return ArrayUtils.EMPTY_BYTE_ARRAY;  }  byte[] subarray=new byte[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public void dispose(){  m_synchronizer.dispose();}  }
class C{  public final short makeShort(byte[] bytes,int offset,boolean isle) throws BinaryParseException {  if (bytes.length < offset + 2)   throw new BinaryParseException("Offset out of range when reading short");  return isle ? (short)((bytes[offset + 1] << 8) | (bytes[offset + 0] & 0xff)) : (short)((bytes[offset + 0] << 8) | (bytes[offset + 1] & 0xff));}  }
class C{  public void monitorEnter(){  mv.visitInsn(Opcodes.MONITORENTER);}  }
class C{  public void closeActivities(MPPOrderNode activity,Timestamp movementDate,boolean milestone){  if (activity.getPP_Order_Workflow_ID() != get_ID()) {    throw new AdempiereException("Activity and Order Workflow not matching" + " (" + activity + ", PP_Order_Workflow_ID="+ get_ID()+ ")");  }  MPPOrder order=getMPPOrder();  for (int nodeId=activity.get_ID(); nodeId != 0; nodeId=getPrevious(nodeId,getAD_Client_ID())) {    MPPOrderNode node=getNode(nodeId);    if (milestone && node.isMilestone() && node.get_ID() != activity.get_ID()) {      break;    }    if (MPPOrderNode.DOCSTATUS_Drafted.equals(node.getDocStatus())) {      BigDecimal qtyToDeliver=node.getQtyToDeliver();      if (qtyToDeliver.signum() <= 0) {        continue;      }      int setupTimeReal=node.getSetupTimeRequired() - node.getSetupTimeReal();      RoutingService routingService=RoutingServiceFactory.get().getRoutingService(node.getAD_Client_ID());      BigDecimal durationReal=routingService.estimateWorkingTime(node,qtyToDeliver);      MPPCostCollector.createCollector(order,order.getM_Product_ID(),order.getM_Locator_ID(),order.getM_AttributeSetInstance_ID(),node.getS_Resource_ID(),0,node.get_ID(),MDocType.getDocType(MDocType.DOCBASETYPE_ManufacturingCostCollector),MPPCostCollector.COSTCOLLECTORTYPE_ActivityControl,movementDate,qtyToDeliver,Env.ZERO,Env.ZERO,setupTimeReal,durationReal);      node.load(order.get_TrxName());      node.closeIt();      node.saveEx();    } else     if (MPPOrderNode.DOCSTATUS_Completed.equals(node.getDocStatus()) || MPPOrderNode.DOCSTATUS_InProgress.equals(node.getDocStatus())) {      node.closeIt();      node.saveEx();    }  }  m_nodes=null;}  }
class C{  public void moveToInsertRow() throws SQLException {  throw new UnsupportedOperationException();}  }
class C{  private Offset fp2spOffset(Offset offset){  Offset offsetToFrameHead=Offset.fromIntSignExtend(stackHeights[biStart] << LG_WORDSIZE).minus(firstLocalOffset);  return offset.plus(offsetToFrameHead);}  }
class C{  private static int findNalStartCode(byte[] data,int index){  int endIndex=data.length - NAL_START_CODE.length;  for (int i=index; i <= endIndex; i++) {    if (isNalStartCode(data,i)) {      return i;    }  }  return -1;}  }
class C{  public static boolean writeStringToFile(File file,String string,boolean isAppend){  boolean isWriteOk=false;  if (null == file || null == string) {    return isWriteOk;  }  FileWriter fw=null;  try {    fw=new FileWriter(file,isAppend);    fw.write(string,0,string.length());    fw.flush();    isWriteOk=true;  } catch (  Exception e) {    isWriteOk=false;    e.printStackTrace();  } finally {    if (fw != null) {      try {        fw.close();      } catch (      IOException e) {        isWriteOk=false;        e.printStackTrace();      }    }  }  return isWriteOk;}  }
class C{  private void readFromByteSourceStream(){  int byteCount=thisBuffer.getByteArrayBufferSize(sourceStream.getFormat());  if (byteBuffer == null || byteBuffer.length < byteCount) {    byteBuffer=new byte[byteCount];  }  if (TDebug.TraceAudioConverter && DEBUG_STREAM) {    TDebug.out("in readFromByteSourceStream: trying to read " + byteCount + " bytes = "+ (byteCount / sourceStream.getFormat().getFrameSize())+ " samples from source stream");  }  int bytesRead=0;  int thisRead;  do {    try {      thisRead=sourceStream.read(byteBuffer,bytesRead,byteCount - bytesRead);    } catch (    IOException ioe) {      thisRead=-1;    }    if (thisRead > 0) {      bytesRead+=thisRead;    }  } while (bytesRead < byteCount && thisRead > 0);  if (bytesRead == 0) {    close();  } else {    thisBuffer.initFromByteArray(byteBuffer,0,bytesRead,sourceStream.getFormat());    if (TDebug.TraceAudioConverter && DEBUG_STREAM) {      TDebug.out("in readFromByteSourceStream: initialized thisBuffer with " + thisBuffer.getSampleCount() + " samples");    }  }}  }
class C{  public NibbleArray(int size){  Validate.isTrue((size > 0) && ((size % 2) == 0),"size must be positive even number, not " + size);  this.data=new byte[size / 2];}  }
class C{  @SuppressWarnings("unchecked") public void writeText(String p_146191_1_){  String var2="";  String var3=EmailAllowedCharacters.filterAllowedCharacters(p_146191_1_);  int var4=cursorPosition < selectionEnd ? cursorPosition : selectionEnd;  int var5=cursorPosition < selectionEnd ? selectionEnd : cursorPosition;  int var6=maxStringLength - text.length() - (var4 - var5);  if (text.length() > 0)   var2=var2 + text.substring(0,var4);  int var8;  if (var6 < var3.length()) {    var2=var2 + var3.substring(0,var6);    var8=var6;  } else {    var2=var2 + var3;    var8=var3.length();  }  if (text.length() > 0 && var5 < text.length())   var2=var2 + text.substring(var5);  if (field_175209_y.apply(var2)) {    text=var2;    moveCursorBy(var4 - selectionEnd + var8);    if (field_175210_x != null)     field_175210_x.func_175319_a(field_175208_g,text);  }}  }
class C{  public static void copy(byte[] in,OutputStream out) throws IOException {  Preconditions.checkNotNull(in,"No input byte array specified");  Preconditions.checkNotNull(out,"No OutputStream specified");  try {    out.write(in);  }  finally {    try {      out.close();    } catch (    IOException ex) {    }  }}  }
class C{  public void testAbsNeg(){  String a="-123809648392384754573567356745735.63567890295784902768787678287E+21";  BigDecimal aNumber=new BigDecimal(a);  String result="123809648392384754573567356745735635678902957849027687.87678287";  assertEquals("incorrect value",result,aNumber.abs().toString());}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","njit");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public void store(long value){}  }
class C{  @Transactional(readOnly=false,propagation=Propagation.REQUIRED) @Caching(evict={@CacheEvict(value="product",allEntries=true),@CacheEvict(value="products",allEntries=true)}) @IncrementCache(name="product_count",key="all",value=1) public Product addProduct(Product product) throws IllegalArgumentException {  URL path=product.getPath();  String origin=product.getOrigin();  if (path == null || origin == null || origin.isEmpty()) {    throw new IllegalArgumentException("product must have a path and an origin");  }  Product final_product=this.productDao.create(product);  return final_product;}  }
class C{  MetalFontDesktopProperty(int type){  this(propertyMapping[type],type);}  }
class C{  public ClientMessage createMessage(byte[] body,Map<String,Object> properties){  ClientMessage message=createMessage(body);  addMessageProperties(message,properties);  return message;}  }
class C{  public static Entity entityFromTargetName(final String target,final Entity player){  if ((target == null) || (player == null)) {    return null;  }  final StendhalRPZone zone=player.getZone();  Entity entity=null;  if ((target.length() > 1) && (target.charAt(0) == '#') && Character.isDigit(target.charAt(1))) {    final int objectId=Integer.parseInt(target.substring(1));    entity=entityFromZoneByID(objectId,zone);  }  if (entity == null) {    entity=SingletonRepository.getRuleProcessor().getPlayer(target);    if ((entity != null) && !player.isInSight(entity)) {      entity=null;    }  }  if (entity == null) {    entity=SingletonRepository.getNPCList().get(target);    if ((entity != null) && !player.isInSight(entity)) {      entity=null;    }  }  return entity;}  }
class C{  public String findMimeType(String name){  for (Iterator<String> i=mimeMappings.keySet().iterator(); i.hasNext(); ) {    String mimeType=i.next();    Object value=mimeMappings.get(mimeType);    if (value instanceof String[]) {      String[] extensions=(String[])value;      for (int j=0, size=extensions.length; j < size; j++) {        int nlen=name.length();        int elen=extensions[j].length();        if (nlen > elen && name.regionMatches(true,nlen - elen,extensions[j],0,elen)) {          return mimeType;        }      }    } else     if (value instanceof String) {      int nlen=name.length();      int elen=((String)value).length();      if (nlen > elen && name.regionMatches(true,nlen - elen,(String)value,0,elen)) {        return mimeType;      }    }  }  return null;}  }
class C{  public Controler(final String[] args){  this.controler=new org.matsim.core.controler.Controler(args);  this.controler.addControlerListener(new CalibrationStatsListener(this.controler.getEvents(),SURVEY_FILES,1,"Travel Survey (Benchmark)","Red_Scheme",new HashSet<Id<Person>>()));}  }
class C{  protected void replyItemNotFoundPacket(IQ request){  XMPPError xmppError=new XMPPError(XMPPError.Condition.item_not_found);  IQ error=IQ.createErrorResponse(request,xmppError);  this.connection.sendPacket(error);}  }
class C{  final void put(final ClassWriter cw,final byte[] code,final int len,final int maxStack,final int maxLocals,final ByteVector out){  Attribute attr=this;  while (attr != null) {    ByteVector b=attr.write(cw,code,len,maxStack,maxLocals);    out.putShort(cw.newUTF8(attr.type)).putInt(b.length);    out.putByteArray(b.data,0,b.length);    attr=attr.next;  }}  }
class C{  public static String join(Object[] array,String separator){  if (separator == null) {    separator="";  }  int arraySize=array.length;  int bufSize=(arraySize == 0 ? 0 : (array[0].toString().length() + separator.length()) * arraySize);  StringBuilder buf=new StringBuilder(bufSize);  for (int i=0; i < arraySize; i++) {    if (i > 0) {      buf.append(separator);    }    buf.append(array[i]);  }  return buf.toString();}  }
class C{  @Override public ResponseFuture request(Object request,int timeout) throws RemotingException {  if (closed) {    throw new RemotingException(this.getLocalAddress(),null,"Failed to send request " + request + ", cause: The channel "+ this+ " is closed!");  }  if (request instanceof RpcInvocation) {    RpcInvocation inv=(RpcInvocation)request;    int id=SEQUENCE.incrementAndGet();    ChannelBuffer output=createRequestBuffer(id,inv);    DefaultFuture future=new DefaultFuture(id,channel,timeout,inv.getAttachment(Constants.PATH_KEY),inv.getMethodName());    channel.send(output);    return future;  }  return null;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.EXPRESSION__LEFT:    return getLeft();case GamlPackage.EXPRESSION__OP:  return getOp();case GamlPackage.EXPRESSION__RIGHT:return getRight();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void testAddCertificate2() throws Exception {  Identity i=new IdentityStub("iii");  PublicKeyStub pk1=new PublicKeyStub("kkk","fff",null);  CertificateStub c1=new CertificateStub("fff",null,null,pk1);  i.addCertificate(c1);  assertSame(c1,i.certificates()[0]);  assertSame(pk1,i.getPublicKey());}  }
class C{  private Node floor(Node x,Key key){  if (x == null)   return null;  int cmp=key.compareTo(x.key);  if (cmp == 0)   return x;  if (cmp < 0)   return floor(x.left,key);  Node y=floor(x.right,key);  if (y != null)   return y; else   return x;}  }
class C{  public static UpgradeResponse checkUpgradeResponse(UpgradeResponse upgradeResponse) throws RpcException {  logger.info("Checking {}",upgradeResponse);switch (upgradeResponse.getResult()) {case OK:    break;case SYSTEM_ERROR:  throw new SystemErrorException(upgradeResponse.getError());default :throw new RpcException(String.format("Unknown result: %s",upgradeResponse.getResult()));}return upgradeResponse;}  }
class C{  public static double calculateLOSSlope(int startTotalHeight,int endTotalHeight,double arc_dist){  double ret=0;  double P=Math.sin(arc_dist) * (endTotalHeight + Planet.wgs84_earthEquatorialRadiusMeters);  double xPrime=Math.cos(arc_dist) * (endTotalHeight + Planet.wgs84_earthEquatorialRadiusMeters);  double cutoff=startTotalHeight + Planet.wgs84_earthEquatorialRadiusMeters;  double bottom=cutoff - xPrime;  ret=MoreMath.HALF_PI_D - Math.atan(bottom / P);  return ret;}  }
class C{  Entry(Object key,V value,ReferenceQueue<Object> queue,int hash,Entry<K,V> next){  super(key,queue);  this.value=value;  this.hash=hash;  this.next=next;}  }
class C{  @Override public boolean has(String pattern){  return has(Pattern.compile(pattern.startsWith("^") ? pattern : "^" + pattern,Pattern.DOTALL | Pattern.MULTILINE));}  }
class C{  public boolean isRegistered(){  return registeredAs != null;}  }
class C{  public void removePropertyChangeListener(final String propertyName,final PropertyChangeListener listener){  propertyChangeSupport.removePropertyChangeListener(propertyName,listener);}  }
class C{  public int size(){  int size=0;  for (  Entry<IPath,Set<IIndexedJavaRef>> fileIndexEntry : fileIndex.entrySet()) {    String projectName=fileIndexEntry.getKey().segment(0);    IProject project=Util.getWorkspaceRoot().getProject(projectName);    if (project.exists() && project.isOpen()) {      size+=fileIndexEntry.getValue().size();    }  }  return size;}  }
class C{  public void removeListener(String namespaceURI,EventListener listener){  if (head == null) {    return;  } else   if (head != null && (namespaceURI != null && namespaceURI.equals(head.namespaceURI) || namespaceURI == null && head.namespaceURI == null) && listener == head.listener) {    head=head.next;  } else {    Entry e;    Entry prev=head;    for (e=head.next; e != null; e=e.next) {      if ((namespaceURI != null && namespaceURI.equals(e.namespaceURI) || namespaceURI == null && e.namespaceURI == null) && e.listener == listener) {        prev.next=e.next;        break;      }      prev=e;    }    if (e == null) {      return;    }  }  counts.dec(namespaceURI);  n--;  listeners=null;  listenersNS.remove(namespaceURI);}  }
class C{  public SimpleFragmentIntent<F> putIntegerArrayListExtra(String name,ArrayList<Integer> value){  if (extras == null) {    extras=new Bundle();  }  extras.putIntegerArrayList(name,value);  return this;}  }
class C{  public void start() throws IOException {}  }
class C{  public static boolean isValidDownscale(float value){  return value >= MIN_DOWNSCALE && value <= MAX_DOWNSCALE;}  }
class C{  public static void renameEpisode(TvShowEpisode episode){  if (episode.getSeason() < 0 || episode.getEpisode() < 0) {    LOGGER.warn("failed to rename episode " + episode.getTitle() + " (TV show "+ episode.getTvShow().getTitle()+ ") - invalid season/episode number");    MessageManager.instance.pushMessage(new Message(MessageLevel.ERROR,episode.getTvShow().getTitle(),"tvshow.renamer.failedrename",new String[]{episode.getTitle()}));    return;  }  LOGGER.info("Renaming TvShow '" + episode.getTvShow().getTitle() + "' Episode "+ episode.getEpisode());  for (  MediaFile mf : new ArrayList<>(episode.getMediaFiles())) {    renameMediaFile(mf,episode.getTvShow());  }}  }
class C{  public boolean hasMore() throws NamingException {  return more ? (counter < _bindingList.value.length || getMore()) : false;}  }
class C{  public void destroy(){  initialised=false;  valid=false;  invokeDestroy(runClassInstance);  destroyMethod=null;  runMethod=null;  initMethod=null;  filterInitMethod=null;  runServletConfig=null;  runConstructor=null;  runClassInstance=null;  methodStr=null;  classStr=null;  error=null;}  }
class C{  public byte[] toByteArray(){  try {    return path.getEncoded("PkiPath");  } catch (  CertificateEncodingException e) {    return new byte[0];  }}  }
class C{  ColorCorrectionInfo(CameraCharacteristics camChar,TotalCaptureResult captureInfo){  if (captureInfo != null) {    RggbChannelVector gains=(RggbChannelVector)captureInfo.get(CaptureResult.COLOR_CORRECTION_GAINS);    Gains[0]=gains.getBlue();    Gains[1]=gains.getRed();    Gains[2]=gains.getGreenOdd();    Gains[3]=gains.getGreenEven();    if (camChar.get(CameraCharacteristics.SENSOR_REFERENCE_ILLUMINANT1) != null)     ReferenceIllum1=camChar.get(CameraCharacteristics.SENSOR_REFERENCE_ILLUMINANT1);    if (camChar.get(CameraCharacteristics.SENSOR_REFERENCE_ILLUMINANT2) != null)     ReferenceIllum2=camChar.get(CameraCharacteristics.SENSOR_REFERENCE_ILLUMINANT2);    copyTransformMatrix(camChar.get(CameraCharacteristics.SENSOR_COLOR_TRANSFORM1),Transform1);    copyTransformMatrix(camChar.get(CameraCharacteristics.SENSOR_COLOR_TRANSFORM2),Transform2);    copyCalibrationMatrix(camChar.get(CameraCharacteristics.SENSOR_CALIBRATION_TRANSFORM1),Calibration1);    copyCalibrationMatrix(camChar.get(CameraCharacteristics.SENSOR_CALIBRATION_TRANSFORM2),Calibration2);    if (camChar.get(CameraCharacteristics.SENSOR_BLACK_LEVEL_PATTERN) != null) {      BlackLevelPattern bp=camChar.get(CameraCharacteristics.SENSOR_BLACK_LEVEL_PATTERN);      BlackLevels[0]=bp.getOffsetForIndex(0,0);      BlackLevels[1]=bp.getOffsetForIndex(0,1);      BlackLevels[2]=bp.getOffsetForIndex(1,0);      BlackLevels[3]=bp.getOffsetForIndex(1,1);    }    if (camChar.get(CameraCharacteristics.SENSOR_INFO_WHITE_LEVEL) != null)     WhiteLevel=camChar.get(CameraCharacteristics.SENSOR_INFO_WHITE_LEVEL);    LensShadingMap sm=captureInfo.get(CaptureResult.STATISTICS_LENS_SHADING_CORRECTION_MAP);    if (sm != null) {      ShadingRows=sm.getRowCount();      ShadingCols=sm.getColumnCount();      ShadingMap=new float[ShadingRows * ShadingCols * 4];      sm.copyGainFactors(ShadingMap,0);    }  }}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  public RemoveOp(final byte[] data,final RDFFormat format){  this.data=data;  this.format=format;}  }
class C{  public void writeNFO(){  if (MovieModuleManager.MOVIE_SETTINGS.getMovieNfoFilenames().isEmpty()) {    LOGGER.info("Not writing any NFO file, because NFO filename preferences were empty...");    return;  }  if (MovieModuleManager.MOVIE_SETTINGS.getMovieConnector() == MovieConnectors.MP) {    MovieToMpNfoConnector.setData(this);  } else {    MovieToXbmcNfoConnector.setData(this);  }  firePropertyChange(HAS_NFO_FILE,false,true);}  }
class C{  public void copy(AnnotationPart other){  name=other.name;  attributes=other.attributes;}  }
class C{  private void walkStep(){  if (!SwingUtilities.isEventDispatchThread()) {    throw new IllegalStateException("Wrong thread");  }  if (doneWalkingSteps()) {    wakeAll();    return;  }  int index=m_list.getSelectedIndex() + 1;  if (index >= m_list.getModel().getSize()) {    index=0;  }  m_listSelectionModel.hiddenSetSelectionInterval(index);  waitThenWalk();}  }
class C{  public ExternalFile(IProject project,IContainer parent,File file){  super(new Path(file.getAbsolutePath()),null);  this.file=file;  this.project=project;  this.parent=parent;}  }
class C{  private void checkSortMissingFunction(final String field,final String low,final String high){  assertU(adoc("id","0"));  assertU(adoc("id","1",field,low));  assertU(adoc("id","2",field,high));  assertU(commit());  assertQ(req("q","*:*","fl","e:exists(" + field + ")","sort","id asc"),"//result/doc[1]/bool[@name='e'][.='false']","//result/doc[2]/bool[@name='e'][.='true']","//result/doc[3]/bool[@name='e'][.='true']");}  }
class C{  public boolean isServiceActive(){  VOService sel_service=getService();  if (sel_service == null) {    return false;  }  return sel_service.getStatus().equals(ServiceStatus.ACTIVE);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case RegularExpressionPackage.PATTERN__QUANTIFIER:    return basicSetQuantifier(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public Document exportRecord(MEXPFormat exportFormat,String where,Integer ReplicationMode,String ReplicationType,Integer ReplicationEvent) throws Exception {  MClient client=MClient.get(exportFormat.getCtx(),m_AD_Client_ID);  MTable table=MTable.get(exportFormat.getCtx(),exportFormat.getAD_Table_ID());  log.info("Table = " + table);  Collection<PO> records=new Query(exportFormat.getCtx(),table.getTableName(),exportFormat.getWhereClause(),exportFormat.get_TrxName()).setOnlyActiveRecords(true).list();  for (  PO po : records) {    log.info("Client = " + client.toString());    log.finest("po.getAD_Org_ID() = " + po.getAD_Org_ID());    log.finest("po.get_TrxName() = " + po.get_TrxName());    if (po.get_TrxName() == null || po.get_TrxName().equals("")) {      po.set_TrxName("exportRecord");    }    if (po.get_KeyColumns().length < 1) {      throw new Exception(Msg.getMsg(po.getCtx(),"ExportNoneColumnKeyNotSupported"));    }    outDocument=createNewDocument();    HashMap<String,Integer> variableMap=new HashMap<String,Integer>();    Element rootElement=outDocument.createElement(exportFormat.getValue());    if (exportFormat.getDescription() != null && !"".equals(exportFormat.getDescription())) {      rootElement.appendChild(outDocument.createComment(exportFormat.getDescription()));    }    rootElement.setAttribute("AD_Client_Value",client.getValue());    rootElement.setAttribute("Version",exportFormat.getVersion());    rootElement.setAttribute("ReplicationMode",ReplicationMode.toString());    rootElement.setAttribute("ReplicationType",ReplicationType);    rootElement.setAttribute("ReplicationEvent",ReplicationEvent.toString());    outDocument.appendChild(rootElement);    generateExportFormat(rootElement,exportFormat,po,po.get_ID(),variableMap);  }  return outDocument;}  }
class C{  public void createPictScenario05() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-01-30 10:00:00"));  String supplierAdminId="Pict05Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict05SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  setCutOffDay(supplierAdmin.getKey(),2);  String customerAdminId="Pict05DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict05DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-02-01 00:00:00"),DateTimeHandling.calculateMillis("2013-02-16 23:59:59"));  orgSetup.createMarketingPermission(basicSetup.getSupplierAdminKey(),supplier.getOrganizationId(),technicalService);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT_TEST_05",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT05_UNIT_WEEK,technicalService,supplierMarketplace);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_05",serviceDetails,customerAdmin,role);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 00:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceDetails,"USER"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 03:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 04:00:00"));  subscrSetup.revokeUser(customerAdmin,subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 05:00:00"));  role=VOServiceFactory.getRole(serviceDetails,"USER");  subDetails=subscrSetup.addUser(customerAdmin,role,subDetails.getSubscriptionId());  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT05_RATA_WEEK_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT05_RATA_WEEK,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),serviceDetails,proRataService);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 10:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,proRataService);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-01 10:10:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  upgradedSubDetails.setSubscriptionId("PICT_TEST_05" + "_SubID2");  upgradedSubDetails=subscrSetup.modifySubscription(upgradedSubDetails,null);  VOServiceDetails proRataService2=serviceSetup.createPublishAndActivateMarketableService(supplierAdmin.getKey(),"PICT05_RATA_WEEK2_SERVICE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT05_RATA_WEEK2,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),proRataService,proRataService2);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-03 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,proRataService2);  upgradedSubDetails2=subscrSetup.modifyParameterForSubscription(upgradedSubDetails2,DateTimeHandling.calculateMillis("2013-02-03 02:00:00"),"HAS_OPTIONS","1");  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-02-03 05:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(upgradedSubDetails2.getPriceModel(),new BigDecimal("1000.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),upgradedSubDetails2,newSubPriceModel,customer);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-02-03 10:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_05",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_05",customer);}  }
class C{  public T caseEqualityExpression(EqualityExpression object){  return null;}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawBackground(0);  drawCenteredString(fontRendererObj,"Press a key",width / 2,height / 4 + 48,16777215);  super.drawScreen(par1,par2,par3);}  }
class C{  private String processString(String key,String value){  value=evaluate(value);  logVariable(key,value);  return value;}  }
class C{  public boolean isLeaf(Object node){  if (asksAllowsChildren)   return !((TreeNode)node).getAllowsChildren();  return ((TreeNode)node).isLeaf();}  }
class C{  private void dynInit(){  ArrayList<KeyNamePair> data=getPaySelectionData();  for (  KeyNamePair pp : data)   fPaySelect.addItem(pp);  if (fPaySelect.getItemCount() == 0)   ADialog.info(m_WindowNo,panel,"VPayPrintNoRecords"); else {    fPaySelect.setSelectedIndex(0);    loadPaySelectInfo();  }}  }
class C{  public RoundedIconGenerator(int iconWidthPx,int iconHeightPx,int cornerRadiusPx,int backgroundColor,float textSizePx){  mIconWidthPx=iconWidthPx;  mIconHeightPx=iconHeightPx;  mCornerRadiusPx=cornerRadiusPx;  mBackgroundRect=new RectF(0,0,mIconWidthPx,mIconHeightPx);  mBackgroundPaint=new Paint(Paint.ANTI_ALIAS_FLAG);  mBackgroundPaint.setColor(backgroundColor);  mTextPaint=new TextPaint(Paint.ANTI_ALIAS_FLAG);  mTextPaint.setColor(Color.WHITE);  mTextPaint.setFakeBoldText(true);  mTextPaint.setTextSize(textSizePx);  FontMetrics textFontMetrics=mTextPaint.getFontMetrics();  mTextHeight=(float)Math.ceil(textFontMetrics.bottom - textFontMetrics.top);  mTextYOffset=-textFontMetrics.top;}  }
class C{  public static Date updated(Date self,Map<Object,Integer> updates){  Calendar cal=Calendar.getInstance();  cal.setTime(self);  set(cal,updates);  return cal.getTime();}  }
class C{  public CertificateMessage(Certificate[] certificateChain,InetSocketAddress peerAddress){  super(peerAddress);  if (certificateChain == null) {    throw new NullPointerException("Certificate chain must not be null");  } else {    setCertificateChain(certificateChain);    calculateLength();  }}  }
class C{  public static int EADDRNOTAVAIL(){  return Errno.EADDRNOTAVAIL.intValue();}  }
class C{  @Override public void addFocusables(@NonNull ArrayList<View> views,int direction,int focusableMode){  final int focusableCount=views.size();  final int descendantFocusability=getDescendantFocusability();  if (descendantFocusability != FOCUS_BLOCK_DESCENDANTS) {    for (int i=0; i < getChildCount(); i++) {      final View child=getChildAt(i);      if (child.getVisibility() == VISIBLE) {        ItemInfo ii=infoForChild(child);        if (ii != null && ii.position == currentItem) {          child.addFocusables(views,direction,focusableMode);        }      }    }  }  if (descendantFocusability != FOCUS_AFTER_DESCENDANTS || (focusableCount == views.size())) {    if (!isFocusable()) {      return;    }    if ((focusableMode & FOCUSABLES_TOUCH_MODE) == FOCUSABLES_TOUCH_MODE && isInTouchMode() && !isFocusableInTouchMode()) {      return;    }    views.add(this);  }}  }
class C{  private static String list(String[] arr,int from,int len){  StringBuffer sb=new StringBuffer();  for (int i=from; i < len; i++) {    sb.append(arr[i]);    if (i + 1 != arr.length)     sb.append('/');  }  return sb.toString();}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + String.valueOf(progress) + "%");  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public DocCollection readCollectionState(URI backupLoc,String backupId,String collectionName) throws IOException {  Preconditions.checkNotNull(collectionName);  URI zkStateDir=repository.resolve(backupLoc,backupId,ZK_STATE_DIR);  try (IndexInput is=repository.openInput(zkStateDir,COLLECTION_PROPS_FILE,IOContext.DEFAULT)){    byte[] arr=new byte[(int)is.length()];    is.readBytes(arr,0,(int)is.length());    ClusterState c_state=ClusterState.load(-1,arr,Collections.emptySet());    return c_state.getCollection(collectionName);  } }  }
class C{  protected List<IJavaElement> selectionToJavaElements(final ISelection selection){  final List<IJavaElement> elements;  if (selection instanceof IStructuredSelection) {    IStructuredSelection structuredSelection=(IStructuredSelection)selection;    elements=toSingleProjectElements(structuredSelection.toArray());  } else {    elements=new ArrayList<IJavaElement>();  }  return elements;}  }
class C{  public void removeAttribute(String name){  attributes.remove(name);}  }
class C{  public static boolean isBoxed(TruffleObject foreignObject){  if (foreignObject == null) {    return false;  }  return boolMessage(Message.IS_BOXED,foreignObject);}  }
class C{  private AgendaItem labelDependencies(AgendaItem result,final SyntaxTreeNode node){  final List<UnlabelledDependency> resolvedUnlabelledDependencies=node.getResolvedUnlabelledDependencies();  int i=0;  for (  final UnlabelledDependency dep : resolvedUnlabelledDependencies) {    final ExtendedLexicalEntry forest=forests.get(dep.getHead());    final Scored<SRLLabel> scoredLabel=forest.getBestLabels(dep);    final double newInsideScore=result.getInsideScore() + scoredLabel.getScore();    final SyntaxTreeNode labelling=new SyntaxTreeNodeLabelling(result.getParse(),dep.setLabel(scoredLabel.getObject()),resolvedUnlabelledDependencies.subList(i + 1,resolvedUnlabelledDependencies.size()));    result=new AgendaItem(labelling,newInsideScore,result.outsideScoreUpperbound - forest.getLogUnnormalizedViterbiScore(dep.getCategory(),dep.getArgNumber()),result.getStartOfSpan(),result.getSpanLength(),true);    i++;  }  return result;}  }
class C{  public int[] validBaudValues(){  return new int[]{57600,115200,230400,250000,333333,460800};}  }
class C{  private void doSignalAll(Node first){  lastWaiter=firstWaiter=null;  do {    Node next=first.nextWaiter;    first.nextWaiter=null;    transferForSignal(first);    first=next;  } while (first != null);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public JCRMailboxMessage(JCRId mailboxUUID,MessageUid uid,MessageId messageId,long modSeq,JCRMailboxMessage message,Logger logger) throws MailboxException {  this.mailboxUUID=mailboxUUID;  this.messageId=messageId;  this.internalDate=message.getInternalDate();  this.size=message.getFullContentOctets();  setFlags(message.createFlags());  this.uid=uid;  this.modSeq=modSeq;  this.logger=logger;  try {    this.content=new SharedByteArrayInputStream(IOUtils.toByteArray(message.getFullContent()));  } catch (  IOException e) {    throw new MailboxException("Unable to parse message",e);  }  this.bodyStartOctet=(int)(message.getFullContentOctets() - message.getBodyOctets());  PropertyBuilder pBuilder=new PropertyBuilder(message.getProperties());  this.textualLineCount=message.getTextualLineCount();  this.mediaType=message.getMediaType();  this.subType=message.getSubType();  final List<Property> properties=pBuilder.toProperties();  this.properties=new ArrayList<JCRProperty>(properties.size());  for (  Property property : properties) {    this.properties.add(new JCRProperty(property,logger));  }}  }
class C{  @NotNull @ObjectiveCName("loadSessionsCommand") public Command<List<ApiAuthSession>> loadSessions(){  return null;}  }
class C{  public FileExtFilter(String ext,String description){  exts=new String[1];  exts[0]=ext;  this.description=description;}  }
class C{  private void drawTicks(Canvas canvas,double min,double max,double minAngle,double maxAngle,int centerX,int centerY,double longRadius,double shortRadius,double ticks,Paint paint,boolean labels){  for (double i=min; i <= max; i+=ticks) {    double angle=getAngleForValue(i,minAngle,maxAngle,min,max);    double sinValue=Math.sin(angle);    double cosValue=Math.cos(angle);    int x1=Math.round(centerX + (float)(shortRadius * sinValue));    int y1=Math.round(centerY + (float)(shortRadius * cosValue));    int x2=Math.round(centerX + (float)(longRadius * sinValue));    int y2=Math.round(centerY + (float)(longRadius * cosValue));    canvas.drawLine(x1,y1,x2,y2,paint);    if (labels) {      paint.setTextAlign(Align.LEFT);      if (x1 <= x2) {        paint.setTextAlign(Align.RIGHT);      }      String text=i + "";      if (Math.round(i) == (long)i) {        text=(long)i + "";      }      canvas.drawText(text,x1,y1,paint);    }  }}  }
class C{  public void add(Component comp,Object constraints){  dockPanel.add(comp,constraints);}  }
class C{  public UpdateConstraintException(String message,DomainObjectExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.997 -0500",hash_original_method="CD7691F9B0EDFAD8C08008BAAFAB09D1",hash_generated_method="2AB4D24013CC1BCF0BB0F89D2394C1B4") public static String axisToString(int axis){  String symbolicName=AXIS_SYMBOLIC_NAMES.get(axis);  return symbolicName != null ? symbolicName : Integer.toString(axis);}  }
class C{  @Transactional public void updateWorkflowState(License licenseObj){  final Assignment wfInitiator=assignmentService.getPrimaryAssignmentForUser(licenseObj.getCreatedBy().getId());  Position pos=wfInitiator.getPosition();  final DateTime currentDate=new DateTime();  final User user=securityUtils.getCurrentUser();  final Boolean digitalSignEnabled=licenseUtils.isDigitalSignEnabled();  WorkFlowMatrix wfmatrix;  if (digitalSignEnabled) {    licenseUtils.applicationStatusChange(licenseObj,APPLICATION_STATUS_DIGUPDATE_CODE);    pos=licenseUtils.getCityLevelCommissioner();    if (licenseObj.getLicenseAppType() != null && licenseObj.getLicenseAppType().getName().equals(Constants.RENEWAL_LIC_APPTYPE)) {      wfmatrix=tradeLicenseWorkflowService.getWfMatrix(TRADELICENSE,null,null,"RENEWALTRADE",WF_STATE_DIGITAL_SIGN_RENEWAL,null);      licenseObj.transition(true).withSenderName(user.getUsername() + "::" + user.getName()).withComments(Constants.WORKFLOW_STATE_COLLECTED).withStateValue(WF_STATE_DIGITAL_SIGN_RENEWAL).withDateInfo(currentDate.toDate()).withOwner(pos).withNextAction(wfmatrix.getNextAction());    } else {      wfmatrix=tradeLicenseWorkflowService.getWfMatrix(TRADELICENSE,null,null,null,WF_STATE_DIGITAL_SIGN_NEWTL,null);      licenseObj.transition(true).withSenderName(user.getUsername() + "::" + user.getName()).withComments(Constants.WORKFLOW_STATE_COLLECTED).withStateValue(WF_STATE_DIGITAL_SIGN_NEWTL).withDateInfo(currentDate.toDate()).withOwner(pos).withNextAction(wfmatrix.getNextAction());    }  } else {    licenseUtils.applicationStatusChange(licenseObj,APPLICATION_STATUS_APPROVED_CODE);    if (licenseObj.getLicenseAppType() != null && licenseObj.getLicenseAppType().getName().equals(Constants.RENEWAL_LIC_APPTYPE))     wfmatrix=tradeLicenseWorkflowService.getWfMatrix(TRADELICENSE,null,null,"RENEWALTRADE",WF_STATE_RENEWAL_COMM_APPROVED,null); else     wfmatrix=tradeLicenseWorkflowService.getWfMatrix(TRADELICENSE,null,null,null,WF_STATE_COLLECTION_PENDING,null);    licenseObj.transition(true).withSenderName(user.getUsername() + "::" + user.getName()).withComments(Constants.WORKFLOW_STATE_COLLECTED).withStateValue(wfmatrix.getNextState()).withDateInfo(currentDate.toDate()).withOwner(pos).withNextAction(wfmatrix.getNextAction());  }}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getDerivedAttribute_();}  }
class C{  public Builder chunkSize(long chunkSize){  this.chunkSize=chunkSize;  return this;}  }
class C{  public GuidedTourProjectType(){  super("GuidedTour","Guided tour type",false,true);  addVariableDefinition("codenvyGuidedTour","Guided Tour attribute",false);}  }
class C{  char readCharFromReader() throws IOException {  if (lastCharRead != (char)-1) {    char c=lastCharRead;    lastCharRead=(char)-1;    return c;  }  return (char)internalReader.read();}  }
class C{  static String formatId(String noteId,Paragraph p){  String id=noteId;  if (null != p) {    id=Joiner.on('/').join(id,PARAGRAPH,p.getId());  }  return id;}  }
class C{  public final boolean isQueryTimeExpander(){  return queryTimeExpander;}  }
class C{  public static List<IJavaCompletionProposal> createProposalsForProblemsOnAsyncMethod(ASTNode node){  RpcPair rpcPair=resolveRpcPair(node,PeerTypeResolver.SYNC_RESOLVER);  return createProposal(rpcPair,BUILDER);}  }
class C{  protected String parseMetocSymCode(String symCode){  StringBuilder sb=new StringBuilder();  String s=symCode.substring(0,1);  if (SymbologyConstants.SCHEME_METOC.equalsIgnoreCase(s))   this.setScheme(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.scheme"));  s=symCode.substring(1,2);  if (SymbologyConstants.CATEGORY_ALL_METOC.contains(s.toUpperCase()))   this.setCategory(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.category"));  s=symCode.substring(2,4);  if (SymbologyConstants.STATIC_DYNAMIC_ALL.contains(s.toUpperCase()))   this.setStaticDynamic(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.status"));  s=symCode.substring(4,10);  if (!"------".equals(s))   this.setFunctionId(s);  s=symCode.substring(10,13);  if (SymbologyConstants.GRAPHIC_TYPE_ALL.contains(s.toUpperCase()))   this.setGraphicType(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.echelon"));  return sb.length() > 0 ? Logging.getMessage("Symbology.SymbolCodeFieldsUnrecognized",sb.toString(),symCode) : null;}  }
class C{  public static void sort(char[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public static <Type>Type newInstance(final Class<Type> ofClass,final Type defaultValue){  try {    return ClassReflection.newInstance(ofClass);  } catch (  final Throwable exception) {    Exceptions.ignore(exception);    return defaultValue;  }}  }
class C{  public static XMethod findExactMethod(InvokeInstruction inv,ConstantPoolGen cpg,JavaClassAndMethodChooser chooser){  String className=inv.getClassName(cpg);  String methodName=inv.getName(cpg);  String methodSig=inv.getSignature(cpg);  XMethod result=findMethod(DescriptorFactory.createClassDescriptorFromDottedClassName(className),methodName,methodSig,inv instanceof INVOKESTATIC);  return thisOrNothing(result,chooser);}  }
class C{  public long seek(final long whereto){  try {    mCurrentMediaPlayer.seekTo((int)whereto);  } catch (  Throwable ignored) {  }  return whereto;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:40.091 -0500",hash_original_method="ADDCD70E458E7B4958723B2C0A9B7ABB",hash_generated_method="26C0FDB7EDCC79336E3E1458678B9E65") public boolean supportsBearing(){  return mSupportsBearing;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public String toString(){  if (this.getObject() == null) {    return this.getStyle().getNullText();  }  Class clazz=this.getObject().getClass();  this.appendFieldsIn(clazz);  while (clazz.getSuperclass() != null && clazz != this.getUpToClass()) {    clazz=clazz.getSuperclass();    this.appendFieldsIn(clazz);  }  return super.toString();}  }
class C{  public JSONArray put(int index,long value) throws JSONException {  this.put(index,new Long(value));  return this;}  }
class C{  public byte[] receiveMessage() throws IOException {  byte[] prefix=new byte[4];  int idx=0;  while (idx < 4) {    int read=in.read(prefix,idx,4 - idx);    if (read < 0)     throw new IOException("End of stream reached before message length was read.");    idx+=read;  }  int len=U.bytesToInt(prefix,0);  byte[] res=new byte[len];  idx=0;  while (idx < len) {    int read=in.read(res,idx,len - idx);    if (read < 0)     throw new IOException("End of stream reached before message body was read.");    idx+=read;  }  return res;}  }
class C{  public void testStateFormatUpdateWithExplicitRefresh() throws Exception {  testStateFormatUpdate(true,true);}  }
class C{  public static void log(IStatus status){  LOG.error(status.getMessage(),status.getException());}  }
class C{  public static <A>MaybeTValue<A> of(final AnyMValue<Maybe<A>> monads){  return new MaybeTValue<>(monads);}  }
class C{  final public void paintComponent(Graphics g){  repaintPending=false;  paintComponent(g,true);}  }
class C{  public static boolean contains(String key){  return hawkFacade.contains(key);}  }
class C{  @Override final public void ILOAD_0(){  Assertions.check(false);}  }
class C{  private List<Graph> possRemove(Graph pag,Map<Edge,Boolean> necEdges){  List<Edge> remEdges=new ArrayList<>();  for (  Edge remEdge : necEdges.keySet()) {    if (!necEdges.get(remEdge))     remEdges.add(remEdge);  }  PowerSet<Edge> pset=new PowerSet<>(remEdges);  List<Graph> possRemove=new ArrayList<>();  for (  Set<Edge> set : pset) {    Graph newPag=new EdgeListGraph(pag);    for (    Edge edge : set) {      newPag.removeEdge(edge);    }    possRemove.add(newPag);  }  return possRemove;}  }
class C{  public static int binarySearch(float[] array,int startIndex,int endIndex,float value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int intBits=Float.floatToIntBits(value);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (lessThan(array[mid],value)) {      low=mid + 1;    } else     if (intBits == Float.floatToIntBits(array[mid])) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (lessThan(value,array[mid]) ? 1 : 2);}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Order_ID"))     p_C_Order_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public void addExportedLibRelative(String pLibPath) throws MalformedURLException {  URI uri=new File(getPluginPath() + File.separator + pLibPath).toURI();  URL url=uri.toURL();  fExportedLibs.add(url);}  }
class C{  public static SpannableStringBuilder toBold(String string,String subString){  if (TextUtils.isEmpty(string)) {    return new SpannableStringBuilder("");  }  SpannableStringBuilder spannableBuilder=new SpannableStringBuilder(string);  StyleSpan bss=new StyleSpan(Typeface.BOLD);  if (subString != null) {    int substringNameStart=string.toLowerCase().indexOf(subString);    if (substringNameStart > -1) {      spannableBuilder.setSpan(bss,substringNameStart,substringNameStart + subString.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);    }  } else {    spannableBuilder.setSpan(bss,0,spannableBuilder.length(),Spannable.SPAN_INCLUSIVE_INCLUSIVE);  }  return spannableBuilder;}  }
class C{  public void skipLengthEncodedBytes(){  int type=this.buf[this.position++] & 0xff;switch (type) {case 251:    break;case 252:  position+=2 + (0xffff & (((buf[position] & 0xff) + ((buf[position + 1] & 0xff) << 8))));break;case 253:position+=3 + (0xffffff & ((buf[position] & 0xff) + ((buf[position + 1] & 0xff) << 8) + ((buf[position + 2] & 0xff) << 16)));break;case 254:position+=8 + ((buf[position] & 0xff) + ((long)(buf[position + 1] & 0xff) << 8) + ((long)(buf[position + 2] & 0xff) << 16)+ ((long)(buf[position + 3] & 0xff) << 24)+ ((long)(buf[position + 4] & 0xff) << 32)+ ((long)(buf[position + 5] & 0xff) << 40)+ ((long)(buf[position + 6] & 0xff) << 48)+ ((long)(buf[position + 7] & 0xff) << 56));break;default :position+=type;}}  }
class C{  public User(String name,String email){  this(UUID.randomUUID().toString(),name,email);}  }
class C{  public String renderTimeStamp(boolean use24hFormat,boolean includeSeconds){  Date date=new Date(timestamp);  int hours=date.getHours();  int minutes=date.getMinutes();  int seconds=date.getSeconds();  if (!use24hFormat) {    hours=Math.abs(12 - hours);    if (hours == 12) {      hours=0;    }  }  if (includeSeconds) {    return String.format("[%02d:%02d:%02d]",hours,minutes,seconds);  } else {    return String.format("[%02d:%02d]",hours,minutes);  }}  }
class C{  protected String extractSubstring(String pszSrc){  int nBracket=0;  int i;  String pszReturn;  for (i=0; i < pszSrc.length() && (nBracket > 0 || pszSrc.charAt(i) != ','); i++) {    if (pszSrc.charAt(i) == '(') {      nBracket++;    } else     if (pszSrc.charAt(i) == ')') {      nBracket--;    }  }  if (pszSrc.charAt(0) == '(') {    pszReturn=pszSrc.substring(1,i - 2);  } else {    pszReturn=pszSrc.substring(0,i);  }  return pszReturn;}  }
class C{  public static <T,K,L extends List<T>>BiFunction<Partition<T,K,L>,T,Boolean> alwaysInsert(){  return null;}  }
class C{  public SortKey(String attrID){  this.attrID=attrID;}  }
class C{  public FireworkEffectBuilder withFade(Color... colors) throws IllegalArgumentException {  Validate.notNull(colors,"Colors can't be null");  for (  Color color : colors) {    this.fadeColors.add(color);  }  return this;}  }
class C{  public final InternalThreadLocalMap threadLocalMap(){  return threadLocalMap;}  }
class C{  public static void isValidEnumValue(String member,Enum<?> arg,Enum<?>... validValues) throws ValidationException {  isNotNull(member,arg);  for (  Enum<?> value : validValues) {    if (arg == value) {      return;    }  }  ValidationException vf=new ValidationException(ReasonEnum.ENUMERATION,member,new Object[]{arg});  logValidationFailure(vf);  throw vf;}  }
class C{  public static <T extends IControl>T transformGeneric(IItem item,T control){  if (item.getName() != null) {    control.setTitel(item.getName().replaceAll("\\s"," "));  }  control.setDescription(item.getDescription());  if (item.isMaturityLevelSupport()) {    control.setMaturity(item.getMaturity());    control.setWeight1(item.getWeight1());    control.setWeight2(item.getWeight2());    control.setThreshold1(item.getThreshold1());    control.setThreshold2(item.getThreshold2());  }  if (item.getVersion() != null && !item.getVersion().isEmpty()) {    control.setVersion(item.getVersion());  }  return control;}  }
class C{  static protected float parseUnitSize(String text){  int len=text.length() - 2;  if (text.endsWith("pt")) {    return PApplet.parseFloat(text.substring(0,len)) * 1.25f;  } else   if (text.endsWith("pc")) {    return PApplet.parseFloat(text.substring(0,len)) * 15;  } else   if (text.endsWith("mm")) {    return PApplet.parseFloat(text.substring(0,len)) * 3.543307f;  } else   if (text.endsWith("cm")) {    return PApplet.parseFloat(text.substring(0,len)) * 35.43307f;  } else   if (text.endsWith("in")) {    return PApplet.parseFloat(text.substring(0,len)) * 90;  } else   if (text.endsWith("px")) {    return PApplet.parseFloat(text.substring(0,len));  } else {    return PApplet.parseFloat(text);  }}  }
class C{  public Axis3D(ReadonlyVec3D dir){  this(new Vec3D(),dir);}  }
class C{  public IgfsPath path(){  return path;}  }
class C{  public void addCharacters(char[] ch,int start,int length) throws IOException {  charsAddedBetweenTags_=true;  writer_.write(ch,start,length);}  }
class C{  public static String toJson(final Object object,final boolean indent){  final StringBuilder s=new StringBuilder();  encode(s,object,indent,indent ? 0 : -1);  return s.toString();}  }
class C{  private static int byteCompaction(int mode,int[] codewords,int codeIndex,StringBuilder result){  if (mode == BYTE_COMPACTION_MODE_LATCH) {    int count=0;    long value=0;    char[] decodedData=new char[6];    int[] byteCompactedCodewords=new int[6];    boolean end=false;    int nextCode=codewords[codeIndex++];    while ((codeIndex < codewords[0]) && !end) {      byteCompactedCodewords[count++]=nextCode;      value=900 * value + nextCode;      nextCode=codewords[codeIndex++];      if (nextCode == TEXT_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH || nextCode == NUMERIC_COMPACTION_MODE_LATCH || nextCode == BYTE_COMPACTION_MODE_LATCH_6 || nextCode == BEGIN_MACRO_PDF417_CONTROL_BLOCK || nextCode == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || nextCode == MACRO_PDF417_TERMINATOR) {        codeIndex--;        end=true;      } else {        if ((count % 5 == 0) && (count > 0)) {          for (int j=0; j < 6; ++j) {            decodedData[5 - j]=(char)(value % 256);            value>>=8;          }          result.append(decodedData);          count=0;        }      }    }    if (codeIndex == codewords[0] && nextCode < TEXT_COMPACTION_MODE_LATCH) {      byteCompactedCodewords[count++]=nextCode;    }    for (int i=0; i < count; i++) {      result.append((char)byteCompactedCodewords[i]);    }  } else   if (mode == BYTE_COMPACTION_MODE_LATCH_6) {    int count=0;    long value=0;    boolean end=false;    while (codeIndex < codewords[0] && !end) {      int code=codewords[codeIndex++];      if (code < TEXT_COMPACTION_MODE_LATCH) {        count++;        value=900 * value + code;      } else {        if (code == TEXT_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH || code == NUMERIC_COMPACTION_MODE_LATCH || code == BYTE_COMPACTION_MODE_LATCH_6 || code == BEGIN_MACRO_PDF417_CONTROL_BLOCK || code == BEGIN_MACRO_PDF417_OPTIONAL_FIELD || code == MACRO_PDF417_TERMINATOR) {          codeIndex--;          end=true;        }      }      if ((count % 5 == 0) && (count > 0)) {        char[] decodedData=new char[6];        for (int j=0; j < 6; ++j) {          decodedData[5 - j]=(char)(value & 0xFF);          value>>=8;        }        result.append(decodedData);        count=0;      }    }  }  return codeIndex;}  }
class C{  public static int indexOf(short[] array,short value){  for (int i=0; i < array.length; i++) {    if (array[i] == value) {      return i;    }  }  return -1;}  }
class C{  public static void copyToClipboard(String content){  if (content == null) {    return;  }  Clipboard cb=null;  try {    cb=new Clipboard(Display.getDefault());    cb.setContents(new String[]{content},new TextTransfer[]{TextTransfer.getInstance()});  }  finally {    if (cb != null) {      cb.dispose();    }  }}  }
class C{  public void testSetup(){  assertTrue(true);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:07.184 -0500",hash_original_method="BF42B4FF2E7F96D2FA4773C6E514B79D",hash_generated_method="CB2C94B316DEDEA4A30B30A937886F41") public ContentTypeHeader createContentTypeHeader(String contentType,String contentSubType) throws ParseException {  if (contentType == null || contentSubType == null)   throw new NullPointerException("null contentType or subType");  ContentType c=new ContentType();  c.setContentType(contentType);  c.setContentSubType(contentSubType);  return c;}  }
class C{  public static String generateNativeGuidForVirtualNAS(String systemNativeGuid,String vNasName){  return String.format("%s" + VIRTUAL_NAS + "+%s",systemNativeGuid,vNasName);}  }
class C{  private QueueEvent element() throws KeeperException, InterruptedException {  TreeMap<Long,String> orderedChildren;  while (true) {    try {      orderedChildren=orderedChildren(null);    } catch (    KeeperException.NoNodeException e) {      return null;    }    if (orderedChildren.size() == 0)     return null;    for (    String headNode : orderedChildren.values()) {      if (headNode != null) {        try {          return new QueueEvent(dir + "/" + headNode,zookeeper.getData(dir + "/" + headNode,null,null,true),null);        } catch (        KeeperException.NoNodeException e) {        }      }    }  }}  }
class C{  public static void main(String[] args){  String[] word={"Zero","One","Two","Three","Four","Five","Six","Seven","Eight","Nine","Ten","Eleven","Twelve","Thirteen","Fourteen","Fifteen","Sixteen","Seventeen","Eighteen","Nineteen","Twenty","Twenty-One","Twenty-Two","Twenty-Three","Twenty-Four","Twenty-Five","Twenty-Six","Twenty-Seven","Twenty-Eight","Twenty-Nine","Thirty","Thirty-One","Thirty-Two","Thirty-Three","Thirty-Four","Thirty-Five","Thirty-Six","Thirty-Seven","Thirty-Eight","Thirty-Nine"};  DTMStringPool pool=new DTMStringPool();  System.out.println("If no complaints are printed below, we passed initial test.");  for (int pass=0; pass <= 1; ++pass) {    int i;    for (i=0; i < word.length; ++i) {      int j=pool.stringToIndex(word[i]);      if (j != i)       System.out.println("\tMismatch populating pool: assigned " + j + " for create "+ i);    }    for (i=0; i < word.length; ++i) {      int j=pool.stringToIndex(word[i]);      if (j != i)       System.out.println("\tMismatch in stringToIndex: returned " + j + " for lookup "+ i);    }    for (i=0; i < word.length; ++i) {      String w=pool.indexToString(i);      if (!word[i].equals(w))       System.out.println("\tMismatch in indexToString: returned" + w + " for lookup "+ i);    }    pool.removeAllElements();    System.out.println("\nPass " + pass + " complete\n");  }}  }
class C{  public synchronized Reapable borrowConnection() throws CreateConnectionException, PoolExhaustedException, ConnectionPoolException {  assertNotDestroyed();  Reapable ret=null;  ret=findExistingOpenConnectionForCallingThread();  if (ret == null) {    ret=findOrWaitForAnAvailableConnection();  }  return ret;}  }
class C{  public final void translate(Point2D vector){  position.translate(vector);}  }
class C{  private void addItemToMinimizedSection(FormToolkit toolkit,String sectionTitle,String text){  if (minimizedSections.containsKey(sectionTitle)) {    Label label=toolkit.createLabel(minimizedSections.get(sectionTitle),text,SWT.LEFT);    label.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,false));  }}  }
class C{  public GifTextView(Context context,AttributeSet attrs){  super(context,attrs);  init(attrs,0,0);}  }
class C{  public TenantDeletionConstraintException(){  super();}  }
class C{  public StochasticGradientBoosting(Regressor weakLearner,int maxIterations){  this(weakLearner,maxIterations,DEFAULT_LEARNING_RATE);}  }
class C{  public BitInputStream(InputStream in,int firstByte){  this.in=in;  this.unread=firstByte;  this.available=8;}  }
class C{  public void pushError(String errorFileName,int line,String message,String referenceText,String referenceTextPointer){  int limit=errorLimit + nwarnings;  if (++errorsPushed >= limit && errorLimit >= 0) {    if (!hitErrorLimit) {      hitErrorLimit=true;      output(errorString("too.many.errors",new Integer(errorLimit),null,null));    }    return;  }  if (errorFileName.endsWith(".java")) {    output(errorFileName + ":" + line+ ": "+ message);    output(referenceText);    output(referenceTextPointer);  } else {    output(errorFileName + ": " + message);  }}  }
class C{  public boolean isAbstract(){  return (this.isDeclaredAbstract() || ((this.eContainer() instanceof TInterface) && this.isHasNoBody()));}  }
class C{  public MessageBuilder withContent(String content){  this.content=content;  return this;}  }
class C{  public void addRow(Expression[] expr){  list.add(expr);}  }
class C{  public static int parseLowerMap(String s) throws NumberFormatException {  int lowerCase=MAP_UNDEFINED;  int length=s.length();  if (length >= 4 && length <= 6) {    lowerCase=Integer.parseInt(s,16);  } else   if (s.length() != 0) {    throw new NumberFormatException();  }  return lowerCase;}  }
class C{  public ECPair transform(ECPair cipherText){  if (key == null) {    throw new IllegalStateException("ECFixedTransform not initialised");  }  ECDomainParameters ec=key.getParameters();  BigInteger n=ec.getN();  ECMultiplier basePointMultiplier=createBasePointMultiplier();  BigInteger k=this.k.mod(n);  ECPoint[] gamma_phi=new ECPoint[]{basePointMultiplier.multiply(ec.getG(),k).add(cipherText.getX()),key.getQ().multiply(k).add(cipherText.getY())};  ec.getCurve().normalizeAll(gamma_phi);  return new ECPair(gamma_phi[0],gamma_phi[1]);}  }
class C{  public boolean isExternal(){  return external;}  }
class C{  private void persistComponentNamesToSettingLocked(String settingName,Set<ComponentName> componentNames,int userId){  StringBuilder builder=new StringBuilder();  for (  ComponentName componentName : componentNames) {    if (builder.length() > 0) {      builder.append(COMPONENT_NAME_SEPARATOR);    }    builder.append(componentName.flattenToShortString());  }  Settings.Secure.putStringForUser(mContext.getContentResolver(),settingName,builder.toString(),userId);}  }
class C{  public DExportPrivateKeyType(JFrame parent){  super(parent,Dialog.ModalityType.DOCUMENT_MODAL);  setTitle(res.getString("DExportPrivateKeyType.Title"));  initComponents();}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  private StringUtil(){}  }
class C{  public Set<String> allowableTags(String form){  if (!table.containsKey(form)) {    HashSet<String> result=new HashSet<String>();    if (form.equals(";"))     result.add(":"); else     if (looksLikeNumber(form))     result.add("CD");    return result;  }  return table.get(form).keySet();}  }
class C{  private void updateFSExport(FileShare fsObj,DbClient dbClient,VNXeApiClient apiClient,FileExport newExport){  _logger.info("upading file export. ");  FSExportMap exports=fsObj.getFsExports();  if (exports == null) {    exports=new FSExportMap();  }  VNXeNfsShare nfsShare=apiClient.findNfsShare(fsObj.getNativeId(),shareName);  String nfsShareId=nfsShare.getId();  newExport.setIsilonId(nfsShareId);  exports.put(newExport.getFileExportKey(),newExport);  fsObj.setFsExports(exports);  updateExportRules(fsObj.getId(),newExport,dbClient);  dbClient.persistObject(fsObj);}  }
class C{  public void commit(){  checkNotClosed();  store.commit(this,logId);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.BINDING_PROPERTY__VALUE:    return value != null;case N4JSPackage.BINDING_PROPERTY__VAR_DECL:  return varDecl != null;}return super.eIsSet(featureID);}  }
class C{  void clear(){  mSealed=false;  mBooleanProperties=PROPERTY_IMPORTANT_FOR_ACCESSIBILITY;  mCurrentItemIndex=UNDEFINED;  mItemCount=UNDEFINED;  mFromIndex=UNDEFINED;  mToIndex=UNDEFINED;  mScrollX=UNDEFINED;  mScrollY=UNDEFINED;  mMaxScrollX=UNDEFINED;  mMaxScrollY=UNDEFINED;  mAddedCount=UNDEFINED;  mRemovedCount=UNDEFINED;  mClassName=null;  mContentDescription=null;  mBeforeText=null;  mParcelableData=null;  mText.clear();  mSourceNodeId=AccessibilityNodeInfo.makeNodeId(UNDEFINED,UNDEFINED);  mSourceWindowId=UNDEFINED;  mConnectionId=UNDEFINED;}  }
class C{  public static TimeZone toTimeZone(String strTimeZone,TimeZone defaultValue){  return TimeZoneUtil.toTimeZone(strTimeZone,defaultValue);}  }
class C{  @Override public void onReceivedHttpAuthRequest(WebView view,final HttpAuthHandler handler,final String host,final String realm){  mWebViewController.onReceivedHttpAuthRequest(Tab.this,view,handler,host,realm);}  }
class C{  public FeatureClassInfo(CoverageTable cthis,String colname,String tablepath,String ftname) throws FormatException {  super(tablepath + ftname,true);  if (Debug.debugging("vpf.fci")) {    Debug.output("FCI: set to peruse (" + filename + ")\n\tcreated with colname ("+ colname+ ")\n\ttablepath ("+ tablepath+ ")\n\tftname ("+ ftname+ ")");  }  ctable=cthis;  columnname=colname.toLowerCase().intern();}  }
class C{  private static void invokeRemoteClearAndWait(VM remoteVM,VM thisVM){  remoteVM.invoke(null);  try {    clearLatch.await();  } catch (  InterruptedException e) {    fail("wait for remote clear to complete failed");  }}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.BOOLEAN_LITERAL;}  }
class C{  public boolean isCaseSensitive(){  return sensitive;}  }
class C{  @Override public int read() throws IOException {  bytik=in.get() & 0x00FF;  consumed++;  return bytik;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public String toString(){  String result;  result="Filename: " + getFilename() + ", "+ "Size: "+ getSize()+ ", "+ "# Files: "+ getNumFiles();  return result;}  }
class C{  @VisibleForTesting NativePooledByteBuffer newByteBuf(InputStream inputStream,NativePooledByteBufferOutputStream outputStream) throws IOException {  mPooledByteStreams.copy(inputStream,outputStream);  return outputStream.toByteBuffer();}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  public static void print(Object x){  out.print(x);  out.flush();}  }
class C{  public static BufferedImage makeImage(final GenericColorSpace decodeColorData,final ImageData imageData){  final int comp=imageData.getCompCount();  final int w=imageData.getWidth();  final int h=imageData.getHeight();  final int d=imageData.getDepth();  byte[] data=imageData.getObjectData();  final int ID=decodeColorData.getID();  final byte[] index=decodeColorData.getIndexedMap();  if (ID == ColorSpaces.DeviceGray) {    data=correctDataArraySize(d,w,h,data);  }  BufferedImage image=null;  if (index != null) {    image=IndexedImage.make(w,h,decodeColorData,index,d,data);  } else   if (d == 1) {    image=BinaryImage.make(w,h,data,decodeColorData,d);  } else   if (ID == ColorSpaces.Separation || ID == ColorSpaces.DeviceN || ID == ColorSpaces.Lab) {    LogWriter.writeLog("Converting Separation/DeviceN colorspace to sRGB ");    image=decodeColorData.dataToRGB(data,w,h);  } else {switch (comp) {case 4:      if (decodeColorData.getID() == ColorSpaces.DeviceRGB) {        image=ColorSpaceConvertor.createARGBImage(w,h,data);      } else {        image=ColorSpaceConvertor.convertFromICCCMYK(w,h,data);      }    break;case 3:  image=ThreeComponentImage.make(d,data,index,w,h);break;case 1:image=OneBitImage.make(d,w,h,data);break;}}return image;}  }
class C{  protected boolean isChangeInputMode(int keyCode){  return keyCode == defaultChangeInputModeKey;}  }
class C{  public SimpleProperties sortAlphabetically(){  return sort(makeAlphabeticalComparator());}  }
class C{  public boolean isAutoMode(){  return usingAutoMode;}  }
class C{  @SuppressWarnings("unchecked") public static <T>Mono<T> instance(){  return (Mono<T>)INSTANCE;}  }
class C{  protected void error(String msg,Object args[],Exception e) throws org.xml.sax.SAXException {  String formattedMsg=XSLMessages.createMessage(msg,args);  error(formattedMsg,e);}  }
class C{  @Override public ServiceExceptionNotFound rethrow(String msg){  return new ServiceExceptionNotFound(msg,this);}  }
class C{  public IntegerMap(){  mapValues=new HashMap<>();}  }
class C{  protected void sendTestMessage(NceMessage m){  notifyMessage(m,null);  return;}  }
class C{  public SolutionDetail(X509Certificate certificate,String description){  super(description);  this.certificate=certificate;}  }
class C{  @DSComment("Data serialization/deserialization") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:29.028 -0500",hash_original_method="6C139DF2C99367764164B889BB05F5C6",hash_generated_method="A4FC67A1E0EC81E84D832D0DE58F7F12") public static ParcelFileDescriptor open(File file,int mode) throws FileNotFoundException {  String path=file.getPath();  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkRead(path);    if ((mode & MODE_WRITE_ONLY) != 0) {      security.checkWrite(path);    }  }  if ((mode & MODE_READ_WRITE) == 0) {    throw new IllegalArgumentException("Must specify MODE_READ_ONLY, MODE_WRITE_ONLY, or MODE_READ_WRITE");  }  FileDescriptor fd=Parcel.openFileDescriptor(path,mode);  return fd != null ? new ParcelFileDescriptor(fd) : null;}  }
class C{  @Override public String toString(){  return method.getName();}  }
class C{  public static boolean doesFileExist(File file){  if (file == null) {    return false;  }  boolean doesFileExist;  try {    doesFileExist=file.exists();  } catch (  Exception e) {    logger.debug(e.toString() + System.lineSeparator() + StackTrace.getStringFromStackTrace(e));    doesFileExist=false;  }  return doesFileExist;}  }
class C{  public BrowseResponse Browse(BrowseRequest req) throws ServiceFaultException, ServiceResultException {  return (BrowseResponse)channel.serviceRequest(req);}  }
class C{  public Edge(WordToken from,Dependency dependency,WordToken to){  this.from=from;  this.dependency=dependency;  this.to=to;}  }
class C{  public static void updateAllLightTypes(World world,int x,int y,int z){  world.updateLightByType(EnumSkyBlock.Block,x,y,z);  world.updateLightByType(EnumSkyBlock.Sky,x,y,z);}  }
class C{  public void replaceAnnFile(String pathAnnFile){  m_pathAnnFile=pathAnnFile;  m_readerAnnFile=null;  m_isUpdateAnnFile=true;  if (!isModified())   setEditFlag(FolderEditFlag.UPDATE);}  }
class C{  public ShapeDataCache(long maxTimeSinceLastUsed){  this.maxTimeSinceLastUsed=maxTimeSinceLastUsed;}  }
class C{  public String toStringq(final JIPEngine engine){  return m_obj.toStringq(engine);}  }
class C{  public StarRating(final Composite parent,final int style){  super(parent,checkStyle(style) | SWT.DOUBLE_BUFFERED);  sizeOfStars=SIZE.SMALL;  currentNumberOfStars=0;  if ((style & SWT.VERTICAL) != 0) {    orientation=SWT.VERTICAL;  } else {    orientation=SWT.HORIZONTAL;  }  stars=new ArrayList<Star>();  selectionListeners=new ArrayList<SelectionListener>();  setMaxNumberOfStars(DEFAULT_MAX_NUMBERS_OF_STARS);  initListeners();}  }
class C{  public List<TriggerKey> selectTriggerKeysForJob(Connection conn,JobKey jobKey) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    ps=conn.prepareStatement(rtp(SELECT_TRIGGERS_FOR_JOB));    ps.setString(1,jobKey.getName());    ps.setString(2,jobKey.getGroup());    rs=ps.executeQuery();    LinkedList<TriggerKey> list=new LinkedList<TriggerKey>();    while (rs.next()) {      String trigName=rs.getString(COL_TRIGGER_NAME);      String trigGroup=rs.getString(COL_TRIGGER_GROUP);      list.add(triggerKey(trigName,trigGroup));    }    return list;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  private VOUser createUser(long userKey,String userId){  VOUser user=new VOUser();  user.setUserId(userId);  user.setKey(userKey);  return user;}  }
class C{  private void applyStyle(HTMLElement element,CSSElement selector,HTMLComponent htmlC){  if ((element.getUi() != null) && (element.getUi().size() > 0)) {    if (!HTMLComponent.PROCESS_HTML_MP1_ONLY) {      String reset=selector.getAttributeById(CSSElement.CSS_COUNTER_RESET);      if (reset != null) {        htmlC.incCounter(reset,true);      }      String inc=selector.getAttributeById(CSSElement.CSS_COUNTER_INCREMENT);      if (inc != null) {        htmlC.incCounter(inc,false);      }      if ((selector.getSelectorPseudoClass() & (CSSElement.PC_BEFORE | CSSElement.PC_AFTER)) != 0) {        handleContentProperty(element,selector,htmlC);        return;      }    }    for (int iter=0; iter < element.getUi().size(); iter++) {      Object o=element.getUi().elementAt(iter);      if (o != null && o instanceof Component) {        final Component cmp=(Component)o;        applyStyleToUIElement(cmp,selector,element,htmlC);      }    }  }}  }
class C{  private boolean initializeFromXMLFile(Element root){  NodeList childNodes=root.getChildNodes();  int count=childNodes.getLength();  for (int i=0; i < count; i++) {    Node node=childNodes.item(i);    int type=node.getNodeType();switch (type) {case Node.ELEMENT_NODE:      String nodeName=node.getNodeName();    if (nodeName.equals(MACRO_NAME)) {      NodeList childNodes2=node.getChildNodes();      name=UNTITLED_MACRO_NAME;      if (childNodes2.getLength() > 0) {        node=childNodes2.item(0);        int type2=node.getNodeType();        if (type2 != Node.CDATA_SECTION_NODE && type2 != Node.TEXT_NODE) {          return false;        }        name=node.getNodeValue().trim();      }    } else     if (nodeName.equals(ACTION)) {      NamedNodeMap attributes=node.getAttributes();      if (attributes == null || attributes.getLength() != 1)       return false;      Node node2=attributes.item(0);      MacroRecord macroRecord=new MacroRecord();      if (!node2.getNodeName().equals(ID)) {        return false;      }      macroRecord.id=node2.getNodeValue();      NodeList childNodes2=node.getChildNodes();      int length=childNodes2.getLength();      if (length == 0) {        macroRecord.actionCommand="";        macroRecords.add(macroRecord);        break;      } else {        node=childNodes2.item(0);        int type2=node.getNodeType();        if (type2 != Node.CDATA_SECTION_NODE && type2 != Node.TEXT_NODE) {          return false;        }        macroRecord.actionCommand=node.getNodeValue();        macroRecords.add(macroRecord);      }    }  break;default :break;}}return true;}  }
class C{  public static List<String> split(String stringToSplit,String delimiter,String markers,String markerCloses,boolean trim){  if (stringToSplit == null) {    return new ArrayList<String>();  }  if (delimiter == null) {    throw new IllegalArgumentException();  }  int delimPos=0;  int currentPos=0;  List<String> splitTokens=new ArrayList<String>();  while ((delimPos=indexOfIgnoreCase(currentPos,stringToSplit,delimiter,markers,markerCloses,SEARCH_MODE__MRK_COM_WS)) != -1) {    String token=stringToSplit.substring(currentPos,delimPos);    if (trim) {      token=token.trim();    }    splitTokens.add(token);    currentPos=delimPos + 1;  }  if (currentPos < stringToSplit.length()) {    String token=stringToSplit.substring(currentPos);    if (trim) {      token=token.trim();    }    splitTokens.add(token);  }  return splitTokens;}  }
class C{  public void copyFrom(MProcessPara source){  log.log(Level.FINE,"Copying from:" + source + ", to: "+ this);  setAD_Element_ID(source.getAD_Element_ID());  setAD_Reference_ID(source.getAD_Reference_ID());  setAD_Reference_Value_ID(source.getAD_Reference_Value_ID());  setAD_Val_Rule_ID(source.getAD_Val_Rule_ID());  setColumnName(source.getColumnName());  setDefaultValue(source.getDefaultValue());  setDefaultValue2(source.getDefaultValue2());  setDescription(source.getDescription());  setDisplayLogic(source.getDisplayLogic());  setFieldLength(source.getFieldLength());  setHelp(source.getHelp());  setIsActive(source.isActive());  setIsCentrallyMaintained(source.isCentrallyMaintained());  setIsMandatory(source.isMandatory());  setIsRange(source.isRange());  setName(source.getName());  setReadOnlyLogic(source.getReadOnlyLogic());  setSeqNo(source.getSeqNo());  setValueMax(source.getValueMax());  setValueMin(source.getValueMin());  setVFormat(source.getVFormat());  saveEx();  String sql="DELETE FROM AD_Process_Para_Trl WHERE AD_Process_Para_ID = ?";  int count=DB.executeUpdateEx(sql,new Object[]{getAD_Process_Para_ID()},get_TrxName());  log.log(Level.FINE,"AD_Process_Para_Trl deleted: " + count);  sql="INSERT INTO AD_Process_Para_Trl (AD_Process_Para_ID, AD_Language, " + " AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, Updated, UpdatedBy, " + " Name, Description, Help, IsTranslated) "+ " SELECT ?, AD_Language, AD_Client_ID, AD_Org_ID, IsActive, Created, CreatedBy, "+ " Updated, UpdatedBy, Name, Description, Help, IsTranslated "+ " FROM AD_Process_Para_Trl WHERE AD_Process_Para_ID = ? ";  count=DB.executeUpdateEx(sql,new Object[]{getAD_Process_Para_ID(),source.getAD_Process_Para_ID()},get_TrxName());  log.log(Level.FINE,"AD_Process_Para_Trl inserted: " + count);}  }
class C{  public void testPassiveAvailabilityChange() throws Throwable {  testAvailabilityChange(Member.Type.PASSIVE);}  }
class C{  static void testClassNewInstance(){  try {    MaybeAbstract ma=new MaybeAbstract();    System.err.println("ERROR: MaybeAbstract succeeded unexpectedly");  } catch (  InstantiationError ie) {    System.out.println("Got expected InstantationError");    if (VERBOSE)     System.out.println("--- " + ie);  }catch (  Exception ex) {    System.err.println("Got unexpected MaybeAbstract failure");  }}  }
class C{  void addTypeOnlyImports(Node script){  if (!script.isScript() || !importsNeeded.containsKey(script.getSourceFileName())) {    return;  }  Node body=script.getFirstChild().isModuleBody() ? script.getFirstChild() : script;  for (  Node n : body.children()) {    if (n.isImport()) {      for (      Node newImport : importsNeeded.get(script.getSourceFileName())) {        body.addChildBefore(newImport,n);      }      return;    }  }  for (  Node newImport : importsNeeded.get(script.getSourceFileName())) {    script.addChildToFront(newImport);  }}  }
class C{  @Override public String toString(){  if (TextUtils.isEmpty(jsonString)) {    jsonString=generateJson();  }  return jsonString;}  }
class C{  private LineSourceImpl createRaLine(int index,int numRaSources){  LineSourceImpl line=new LineSourceImpl(LINE_COLOR);  float ra=index * 360.0f / numRaSources;  for (int i=0; i < NUM_DEC_VERTICES - 1; i++) {    float dec=90.0f - i * 180.0f / (NUM_DEC_VERTICES - 1);    RaDec raDec=new RaDec(ra,dec);    line.raDecs.add(raDec);    line.vertices.add(GeocentricCoordinates.getInstance(raDec));  }  RaDec raDec=new RaDec(0.0f,-90.0f);  line.raDecs.add(raDec);  line.vertices.add(GeocentricCoordinates.getInstance(raDec));  return line;}  }
class C{  public static boolean verifyVolumesInCG(List<Volume> volumes,BlockConsistencyGroup cg,DbClient dbClient){  List<Volume> cgVolumes=BlockConsistencyGroupUtils.getActiveVplexVolumesInCG(cg,dbClient,null);  return verifyVolumesInCG(volumes,cgVolumes,dbClient);}  }
class C{  public void test_validate(){}  }
class C{  @ObjectiveCName("isRenameHintShown") public boolean isRenameHintShown(){  return modules.getSettingsModule().isRenameHintShown();}  }
class C{  public void writeData(DataOutput dout) throws IOException {  dout.write(getMessage());}  }
class C{  public NetObjectList(String lname,Class<?> cname){  super(lname,cname);}  }
class C{  public String fullToString(){  return resultToString(getResult()) + vertex.toString();}  }
class C{  public static String removeNamespacePrefix(String attributeName){  return attributeName.replaceFirst("^.*:","");}  }
class C{  public static void generateImplicitLanguageTags(){  logger.debug("generateImplicitLanguageTags:  Enter");  if (useLanguagesAsTags == false) {    logger.debug("generateImplicitLanguageTags:  Exit - not wanted");    return;  }  int lastId=-1;  for (  Tag tag : getListOfTags()) {    int id=Integer.parseInt(tag.getId());    if (lastId < id)     lastId=id;  }  Map<String,Tag> mapOfLanguageTags=new HashMap<String,Tag>();  for (  Book book : getListOfBooks()) {    if (Helper.isNotNullOrEmpty(book.getBookLanguages())) {      for (      Language language : book.getBookLanguages()) {        if (language != null) {          String languageTagName=IMPLICIT_LANGUAGE_TAG_PREFIX + language.getIso2();          Tag languageTag=mapOfLanguageTags.get(languageTagName.toUpperCase(Locale.ENGLISH));          if (languageTag == null) {            for (            Tag tag : getListOfTags()) {              if (tag.getName().equalsIgnoreCase(languageTagName)) {                languageTag=tag;                break;              }            }            if (languageTag == null) {              languageTag=new Tag("" + (++lastId),languageTagName);              addTag(languageTag);            }            mapOfLanguageTags.put(languageTagName.toUpperCase(Locale.ENGLISH),languageTag);          }          if (!book.getTags().contains(languageTag))           book.getTags().add(languageTag);        } else {          logger.error("generateImplicitLanguageTags: found a null language for book " + book);          for (          Language language1 : book.getBookLanguages()) {            logger.error(language1);          }        }      }    }  }  mapOfBooksByTag=null;  logger.debug("generateImplicitLanguageTags:  Exit");}  }
class C{  protected StateMachineContext<S,E> buildStateMachineContext(StateMachine<S,E> stateMachine){  ExtendedState extendedState=new DefaultExtendedState();  extendedState.getVariables().putAll(stateMachine.getExtendedState().getVariables());  ArrayList<StateMachineContext<S,E>> childs=new ArrayList<StateMachineContext<S,E>>();  S id=null;  State<S,E> state=stateMachine.getState();  if (state.isSubmachineState()) {    Collection<S> ids1=state.getIds();    @SuppressWarnings("unchecked") S[] ids2=(S[])ids1.toArray();    id=ids2[ids2.length - 1];  } else   if (state.isOrthogonal()) {    Collection<Region<S,E>> regions=((AbstractState<S,E>)state).getRegions();    for (    Region<S,E> r : regions) {      S s=r.getState().getId();      childs.add(new DefaultStateMachineContext<S,E>(s,null,null,null));    }    id=state.getId();  } else {    id=state.getId();  }  Map<S,S> historyStates=new HashMap<S,S>();  PseudoState<S,E> historyState=((AbstractStateMachine<S,E>)stateMachine).getHistoryState();  if (historyState != null) {    historyStates.put(null,((HistoryPseudoState<S,E>)historyState).getState().getId());  }  Collection<State<S,E>> states=stateMachine.getStates();  for (  State<S,E> ss : states) {    if (ss.isSubmachineState()) {      StateMachine<S,E> submachine=((AbstractState<S,E>)ss).getSubmachine();      PseudoState<S,E> ps=((AbstractStateMachine<S,E>)submachine).getHistoryState();      if (ps != null) {        State<S,E> pss=((HistoryPseudoState<S,E>)ps).getState();        if (pss != null) {          historyStates.put(ss.getId(),pss.getId());        }      }    }  }  return new DefaultStateMachineContext<S,E>(childs,id,null,null,extendedState,historyStates,stateMachine.getId());}  }
class C{  public ArrayMap(int capacity){  if (capacity == 0) {    mHashes=EMPTY_INTS;    mArray=EMPTY_OBJECTS;  } else {    allocArrays(capacity);  }  mSize=0;}  }
class C{  public void configure(){  SerialTrafficController tc=new SerialTrafficController();  tc.connectPort(this);  ((CMRISystemConnectionMemo)getSystemConnectionMemo()).setTrafficController(tc);  ((CMRISystemConnectionMemo)getSystemConnectionMemo()).configureManagers();}  }
class C{  public void opc_invokeinterface(short methodIndex,int numArgs,byte count,int numReturnValues){  emitByte(opc_invokeinterface);  emitShort(methodIndex);  emitByte(count);  emitByte((byte)0);  setStack(getStack() - numArgs - 1 + numReturnValues);}  }
class C{  public Time(){}  }
class C{  public static boolean copyTree(String sourceDir,String targetRoot){  boolean result;  try {    File source=new File(sourceDir);    File root=new File(targetRoot);    if (source.exists() == false || source.isDirectory() == false) {      log.error("Source path dosn't exsist (\"" + source.getCanonicalPath() + "\"). Can't copy files.");      return false;    }    if (root.exists() == false) {      log.error("Destination path dosn't exsist (\"" + root.getCanonicalPath() + "\").");      log.info("Creating destination directory.");      if (!root.mkdirs()) {        log.equals("Creating destination directory faild!");        return false;      }    }    String targetRootName=Paths.checkPathEnding(root.getCanonicalPath());    ArrayList<File> fileNames=listAllFiles(source,true);    result=true;    File target;    for (    File f : fileNames) {      String fullName=f.getCanonicalPath();      int pos=fullName.indexOf(sourceDir);      String subName=null;      if (sourceDir.endsWith("/"))       subName=fullName.substring(pos + sourceDir.length()); else       subName=fullName.substring(pos + sourceDir.length() + 1);      String targetName=targetRootName + subName;      target=new File(targetName);      if (f.isDirectory()) {        if (target.exists() == false) {          boolean st=target.mkdir();          if (st == false)           result=false;        }        continue;      }      boolean st=fileCopy(f,target);      if (st == false)       result=false;    }  } catch (  Exception e) {    e.printStackTrace();    result=false;  }  return result;}  }
class C{  private List<Node<T,E>> findAllMatchingNodes(List<Token<E>> tokens,int tokenIdx){  List<Node<T,E>> result=new ArrayList<Node<T,E>>();  List<Node<T,E>> nodes=this.getChildrenAsList();  for (  Node<T,E> node : nodes) {    int matchResult=node.matches(tokens,tokenIdx);    if (matchResult < 0) {      continue;    }    if (matchResult >= tokens.size()) {      do {        if (node.hasValues()) {          result.add(node);        }        if (node.hasWildcardChild()) {          Node<T,E> child=node.getChild(getWildcardChar());          if (child.getKind() != getKind()) {            node=null;          } else {            node=child;          }        } else {          node=null;        }      } while (node != null);    } else {      result.addAll(node.findAllMatchingNodes(tokens,matchResult));    }  }  return result;}  }
class C{  public void add(Predicate p,SizeAction f){  super.add(p,f);}  }
class C{  public static TextEdit format2(int kind,String source,int offset,int length,int indentationLevel,String lineSeparator,Map<String,String> options){  if (offset < 0 || length < 0 || offset + length > source.length()) {    throw new IllegalArgumentException("offset or length outside of string. offset: " + offset + ", length: "+ length+ ", string size: "+ source.length());  }  return ToolFactory.createCodeFormatter(options).format(kind,source,offset,length,indentationLevel,lineSeparator);}  }
class C{  public void removeFromWidgetsPanel(Component comp){  if (m_LayoutWidgets != null)   m_LayoutWidgets.setRows(m_LayoutWidgets.getRows() - 1);  m_PanelWidgets.remove(comp);}  }
class C{  private void removeNodeFromParent(ReactShadowNode nodeToRemove,boolean shouldDelete){  ReactShadowNode nativeNodeToRemoveFrom=nodeToRemove.getNativeParent();  if (nativeNodeToRemoveFrom != null) {    int index=nativeNodeToRemoveFrom.indexOfNativeChild(nodeToRemove);    nativeNodeToRemoveFrom.removeNativeChildAt(index);    mUIViewOperationQueue.enqueueManageChildren(nativeNodeToRemoveFrom.getReactTag(),new int[]{index},null,shouldDelete ? new int[]{nodeToRemove.getReactTag()} : null);  } else {    for (int i=nodeToRemove.getChildCount() - 1; i >= 0; i--) {      removeNodeFromParent(nodeToRemove.getChildAt(i),shouldDelete);    }  }}  }
class C{  public NbtTag readTag(NbtTagType type,boolean anonymous,NbtLimiter limiter) throws IOException {  NbtTag tag=type.newInstance();  tag.read(this,anonymous,limiter);  return tag;}  }
class C{  public void clear(){  CACHE.clear();}  }
class C{  public static XPath2FilterContainer newInstanceUnion(Document doc,String xpath2filter){  return new XPath2FilterContainer(doc,xpath2filter,XPath2FilterContainer._ATT_FILTER_VALUE_UNION);}  }
class C{  protected void decryptBlock(byte[] in,int pos,int length){  byte[] decryptedIn=new byte[blockSize];  byte[] ivBytes=ByteArrayHelper.toByteArray(nonce++,16);  ParametersWithIV ivParams=new ParametersWithIV(cipherParameters,ivBytes);  aesCipher.init(false,ivParams);  int remainingCount=length - pos;  if (remainingCount >= blockSize) {    mac.update(in,pos,blockSize);    aesCipher.processBlock(in,pos,decryptedIn,0);    System.arraycopy(decryptedIn,0,in,pos,blockSize);  } else {    mac.update(in,pos,remainingCount);    byte[] extendedIn=new byte[blockSize];    System.arraycopy(in,pos,extendedIn,0,remainingCount);    aesCipher.processBlock(extendedIn,0,decryptedIn,0);    System.arraycopy(decryptedIn,0,in,pos,remainingCount);  }}  }
class C{  void processDragMouseMoved(DragSourceDragEvent dsde){  DragSourceMotionListener dsml=motionListener;  if (dsml != null) {    dsml.dragMouseMoved(dsde);  }}  }
class C{  protected final void handleVariableChangedEvent(Variable variable,int index,Parameter.ChangeType type){}  }
class C{  public Matrix uminus(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=-A[i][j];    }  }  return X;}  }
class C{  public void writeInt(int x){  byte[] buff=data;  buff[pos]=(byte)(x >> 24);  buff[pos + 1]=(byte)(x >> 16);  buff[pos + 2]=(byte)(x >> 8);  buff[pos + 3]=(byte)x;  pos+=4;}  }
class C{  public E element(){  return getFirst();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:08.091 -0500",hash_original_method="EC21A725ACD65B59B44C587C03791CB0",hash_generated_method="1E6275FC145A23B549543A655868D2B3") public Object[] parse(String string) throws ParseException {  ParsePosition position=new ParsePosition(0);  Object[] result=parse(string,position);  if (position.getIndex() == 0) {    throw new ParseException("Parse failure",position.getErrorIndex());  }  return result;}  }
class C{  public boolean isOperationCall(){  return operationCall;}  }
class C{  public MonitorTypeException(){  super();}  }
class C{  protected void drawLeftLabel(Graphics2D g2,PiePlotState state,PieLabelRecord record){  double anchorX=state.getLinkArea().getMinX();  double targetX=anchorX - record.getGap();  double targetY=record.getAllocatedY();  if (this.labelLinksVisible) {    double theta=record.getAngle();    double linkX=state.getPieCenterX() + Math.cos(theta) * state.getPieWRadius() * record.getLinkPercent();    double linkY=state.getPieCenterY() - Math.sin(theta) * state.getPieHRadius() * record.getLinkPercent();    double elbowX=state.getPieCenterX() + Math.cos(theta) * state.getLinkArea().getWidth() / 2.0;    double elbowY=state.getPieCenterY() - Math.sin(theta) * state.getLinkArea().getHeight() / 2.0;    double anchorY=elbowY;    g2.setPaint(this.labelLinkPaint);    g2.setStroke(this.labelLinkStroke);    PieLabelLinkStyle style=getLabelLinkStyle();    if (style.equals(PieLabelLinkStyle.STANDARD)) {      g2.draw(new Line2D.Double(linkX,linkY,elbowX,elbowY));      g2.draw(new Line2D.Double(anchorX,anchorY,elbowX,elbowY));      g2.draw(new Line2D.Double(anchorX,anchorY,targetX,targetY));    } else     if (style.equals(PieLabelLinkStyle.QUAD_CURVE)) {      QuadCurve2D q=new QuadCurve2D.Float();      q.setCurve(targetX,targetY,anchorX,anchorY,elbowX,elbowY);      g2.draw(q);      g2.draw(new Line2D.Double(elbowX,elbowY,linkX,linkY));    } else     if (style.equals(PieLabelLinkStyle.CUBIC_CURVE)) {      CubicCurve2D c=new CubicCurve2D.Float();      c.setCurve(targetX,targetY,anchorX,anchorY,elbowX,elbowY,linkX,linkY);      g2.draw(c);    }  }  TextBox tb=record.getLabel();  tb.draw(g2,(float)targetX,(float)targetY,RectangleAnchor.RIGHT);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.log(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override @Deprecated public <T extends Comparable<T>>GraphQuery has(final String key,final T value,final Compare compare){  return has(key,compare,value);}  }
class C{  public static boolean orthogonalizeVectors(List<Vector> list){  int dimension=list.get(0).getDimension();  for (int k=0; k < list.size(); ++k) {    Vector kthVector=list.get(k);    if (kthVector.getVectorType() != VectorType.REAL)     throw new IncompatibleVectorsException();    kthVector.normalize();    if (kthVector.getDimension() != dimension) {      logger.warning("In orthogonalizeVector: not all vectors have required dimension.");      return false;    }    for (int j=0; j < k; ++j) {      Vector jthVector=list.get(j);      double dotProduct=kthVector.measureOverlap(jthVector);      kthVector.superpose(jthVector,-dotProduct,null);      kthVector.normalize();    }  }  return true;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private void doCollection(TagPluginContext ctxt){  ctxt.generateImport("java.util.*");  generateIterators(ctxt);  String itemsV=ctxt.getTemporaryVariableName();  ctxt.generateJavaSource("Object " + itemsV + "= ");  ctxt.generateAttribute("items");  ctxt.generateJavaSource(";");  String indexV=null, beginV=null, endV=null, stepV=null;  if (hasBegin) {    beginV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("int " + beginV + " = ");    ctxt.generateAttribute("begin");    ctxt.generateJavaSource(";");  }  if (hasEnd) {    indexV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("int " + indexV + " = 0;");    endV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("int " + endV + " = ");    ctxt.generateAttribute("end");    ctxt.generateJavaSource(";");  }  if (hasStep) {    stepV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("int " + stepV + " = ");    ctxt.generateAttribute("step");    ctxt.generateJavaSource(";");  }  String iterV=ctxt.getTemporaryVariableName();  ctxt.generateJavaSource("Iterator " + iterV + " = null;");  ctxt.generateJavaSource("if (" + itemsV + " instanceof Object[])");  ctxt.generateJavaSource(iterV + "=toIterator((Object[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof boolean[])");  ctxt.generateJavaSource(iterV + "=toIterator((boolean[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof byte[])");  ctxt.generateJavaSource(iterV + "=toIterator((byte[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof char[])");  ctxt.generateJavaSource(iterV + "=toIterator((char[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof short[])");  ctxt.generateJavaSource(iterV + "=toIterator((short[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof int[])");  ctxt.generateJavaSource(iterV + "=toIterator((int[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof long[])");  ctxt.generateJavaSource(iterV + "=toIterator((long[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof float[])");  ctxt.generateJavaSource(iterV + "=toIterator((float[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof double[])");  ctxt.generateJavaSource(iterV + "=toIterator((double[])" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof Collection)");  ctxt.generateJavaSource(iterV + "=((Collection)" + itemsV+ ").iterator();");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof Iterator)");  ctxt.generateJavaSource(iterV + "=(Iterator)" + itemsV+ ";");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof Enumeration)");  ctxt.generateJavaSource(iterV + "=toIterator((Enumeration)" + itemsV+ ");");  ctxt.generateJavaSource("else if (" + itemsV + " instanceof Map)");  ctxt.generateJavaSource(iterV + "=((Map)" + itemsV+ ").entrySet().iterator();");  if (hasBegin) {    String tV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("for (int " + tV + "="+ beginV+ ";"+ tV+ ">0 && "+ iterV+ ".hasNext(); "+ tV+ "--)");    ctxt.generateJavaSource(iterV + ".next();");  }  ctxt.generateJavaSource("while (" + iterV + ".hasNext()){");  if (hasVar) {    ctxt.generateJavaSource("_jspx_page_context.setAttribute(");    ctxt.generateAttribute("var");    ctxt.generateJavaSource(", " + iterV + ".next());");  }  ctxt.generateBody();  if (hasStep) {    String tV=ctxt.getTemporaryVariableName();    ctxt.generateJavaSource("for (int " + tV + "="+ stepV+ "-1;"+ tV+ ">0 && "+ iterV+ ".hasNext(); "+ tV+ "--)");    ctxt.generateJavaSource(iterV + ".next();");  }  if (hasEnd) {    if (hasStep) {      ctxt.generateJavaSource(indexV + "+=" + stepV+ ";");    } else {      ctxt.generateJavaSource(indexV + "++;");    }    if (hasBegin) {      ctxt.generateJavaSource("if(" + beginV + "+"+ indexV+ ">"+ endV+ ")");    } else {      ctxt.generateJavaSource("if(" + indexV + ">"+ endV+ ")");    }    ctxt.generateJavaSource("break;");  }  ctxt.generateJavaSource("}");}  }
class C{  public Vector3f crossLocal(float otherX,float otherY,float otherZ){  float tempx=(y * otherZ) - (z * otherY);  float tempy=(z * otherX) - (x * otherZ);  z=(x * otherY) - (y * otherX);  x=tempx;  y=tempy;  return this;}  }
class C{  public JSONException syntaxError(String message){  return new JSONException(message + this.toString());}  }
class C{  public static SimpleBeanPropertyFilter filterOutAllExcept(Set<String> properties){  return new FilterExceptFilter(properties);}  }
class C{  public BaseIndexStats(final ICheckpointProtocol ndx){  if (ndx == null)   throw new IllegalArgumentException();  final ICheckpoint checkpoint=ndx.getCheckpoint();  final IndexMetadata metadata=ndx.getIndexMetadata();  this.indexType=checkpoint.getIndexType();  this.name=metadata.getName();switch (indexType) {case BTree:    this.m=metadata.getBranchingFactor();  break;case HTree:m=((HTreeIndexMetadata)metadata).getAddressBits();break;case Stream:m=0;break;default :throw new AssertionError("Unknown indexType=" + indexType);}this.height=checkpoint.getHeight();this.ntuples=checkpoint.getEntryCount();this.nnodes=checkpoint.getNodeCount();this.nleaves=checkpoint.getLeafCount();}  }
class C{  private void paintSignature(Graphics g){  g.setColor(0x0);  boolean oldAA=g.isAntiAliased();  g.setAntiAliased(true);  g.drawShape(path,stroke);  g.setAntiAliased(oldAA);}  }
class C{  public void spacing(){  int len=m_bias + m_tagStack.size() * m_tab;  for (int i=0; i < len; ++i)   m_out.print(' ');}  }
class C{  public LevelSetConfig(Sector sector,double firstLevelDelta,int numLevels,int tileWidth,int tileHeight){  if (sector != null) {    this.sector.set(sector);  }  this.firstLevelDelta=firstLevelDelta;  this.numLevels=numLevels;  this.tileWidth=tileWidth;  this.tileHeight=tileHeight;}  }
class C{  public void addChild(TreeStructure treeStruct){  Util.notNull("treeStruct",treeStruct);  if (children == null) {    children=new ArrayList<TreeStructure>();  }  children.add(treeStruct);}  }
class C{  public static Stats of(Iterator<? extends Number> values){  StatsAccumulator accumulator=new StatsAccumulator();  accumulator.addAll(values);  return accumulator.snapshot();}  }
class C{  public InvalidSearchFilterException(String msg){  super(msg);}  }
class C{  public BasicTreeNode(String text,Object imageSource){  if (text == null) {    String message=Logging.getMessage("nullValue.StringIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.text=text.trim();  this.setImageSource(imageSource);}  }
class C{  boolean needToCheckExclude(){  return false;}  }
class C{  private ConnectorBootstrap(){}  }
class C{  public boolean isRefreshing(){  return mStatus == PTR_STATUS_LOADING;}  }
class C{  public String removeAfter(String original,String marker){  int index=original.indexOf(marker);  if (index != -1) {    return original.substring(0,index);  }  return original;}  }
class C{  public static Size reduce(Size aspectRatio){  BigInteger width=BigInteger.valueOf(aspectRatio.width());  BigInteger height=BigInteger.valueOf(aspectRatio.height());  BigInteger gcd=width.gcd(height);  int numerator=Math.max(width.intValue(),height.intValue()) / gcd.intValue();  int denominator=Math.min(width.intValue(),height.intValue()) / gcd.intValue();  return new Size(numerator,denominator);}  }
class C{  public void applyPattern(String pattern){  applyPatternImpl(pattern);}  }
class C{  public FolderTokenFdrLink findByName(String name) throws Exception {  int idx;  FolderTokenFdrLink link=null;  idx=super.findIndexByName(name);  if (idx == -1) {    throw new IeciTdException(FolderBaseError.EC_NOT_FOUND,FolderBaseError.EM_NOT_FOUND);  }  link=get(idx);  return link;}  }
class C{  private CProgressDialog(){}  }
class C{  protected void addRaster(DataRaster raster,String filename) throws IOException {  final Sector sector=(Sector)raster.getValue(AVKey.SECTOR);  if (sector == null) {    String msg=Logging.getMessage("DataRaster.MissingMetadata",AVKey.SECTOR);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  int width=raster.getWidth();  int height=raster.getHeight();  DataRaster subRaster=raster.getSubRaster(width,height,sector,raster);  if (!(subRaster instanceof ByteBufferRaster)) {    String msg=Logging.getMessage("ElevationModel.CannotCreateElevationBuffer",filename);    Logging.logger().severe(msg);    throw new WWRuntimeException(msg);  }  ByteBuffer elevations=((ByteBufferRaster)subRaster).getByteBuffer();  subRaster.dispose();  this.addElevations(elevations,sector,width,height,raster);  raster.dispose();}  }
class C{  protected FetchResponse(ParameterList params){  _parameters=params;}  }
class C{  public void addName(String name,Object pageKey,String usageDescription){  Hashtable pageNames=(Hashtable)pageStorage.get(pageKey);  if (pageNames == null) {    pageNames=new Hashtable();    pageStorage.put(pageKey,pageNames);  }  pageNames.put(name,usageDescription);}  }
class C{  @Override protected void search(BayesNet bayesNet,Instances instances) throws Exception {  m_random=new Random(getSeed());  double fBestScore;  double fCurrentScore=calcScore(bayesNet);  BayesNet bestBayesNet;  fBestScore=fCurrentScore;  bestBayesNet=new BayesNet();  bestBayesNet.m_Instances=instances;  bestBayesNet.initStructure();  copyParentSets(bestBayesNet,bayesNet);  for (int iRun=0; iRun < m_nRuns; iRun++) {    generateRandomNet(bayesNet,instances);    super.search(bayesNet,instances);    fCurrentScore=calcScore(bayesNet);    if (fCurrentScore > fBestScore) {      fBestScore=fCurrentScore;      copyParentSets(bestBayesNet,bayesNet);    }  }  copyParentSets(bayesNet,bestBayesNet);  bestBayesNet=null;}  }
class C{  public void assertSameType(Type s,Type t){  assertSameType(s,t,true);}  }
class C{  public CharArraySet(Collection<?> c,boolean ignoreCase){  this(c.size(),ignoreCase);  addAll(c);}  }
class C{  public java.util.List<AppUser> retrieveAllUsers(){  String sql="select * from " + APPUSER_TABLENAME + " order by username";  Connection conn=null;  Statement stmt=null;  ResultSet rs=null;  java.util.ArrayList<AppUser> userList=new java.util.ArrayList<AppUser>();  try {    conn=getConnection();    stmt=conn.createStatement();    rs=stmt.executeQuery(sql);    while (rs != null && rs.next()) {      AppUser user=new AppUser();      user.setName(rs.getString("USERNAME"));      user.setUserprivilege(rs.getShort("USER_PRIVILEGE"));      user.setEmail(rs.getString("EMAIL"));      user.setVerified("1".equals(rs.getString("VERIFIED")));      userList.add(user);    }  } catch (  Exception ex) {    logger.log(Level.SEVERE,"Exception",ex);  } finally {    DBUtils.close(rs);    DBUtils.close(stmt);    DBUtils.close(conn);  }  return userList;}  }
class C{  public void disable() throws InterruptedException {synchronized (enabled) {    if (enabled.get() == 0) {      return;    }    enabled.set(0);  }}  }
class C{  private void changeOfAddress(){  currentAddress=addrSelector.getAddress();  if (currentAddress == null) {    return;  }  for (int i=0; i < listeners.size(); i++) {    AddressListener l=listeners.get(i);    if (log.isDebugEnabled()) {      log.debug("Notify address listener of address change " + l.getClass());    }    l.notifyAddressChosen(currentAddress);  }  boolean requestOK=InstanceManager.throttleManagerInstance().requestThrottle(getCurrentAddress(),rosterEntry,this);  if (!requestOK) {    JOptionPane.showMessageDialog(mainPanel,Bundle.getMessage("AddressInUse"));  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void updateHash(byte b){  msg_byte_counter++;  m|=(((long)b & 0xff) << (m_idx * 8));  m_idx++;  if (m_idx >= LONG_BYTES) {    v3^=m;    siphash_round();    siphash_round();    v0^=m;    m_idx=0;    m=0;  }}  }
class C{  protected ClassLoader(ClassLoader parentLoader){  SecurityManager sc=System.getSecurityManager();  if (sc != null) {    sc.checkCreateClassLoader();  }  parentClassLoader=parentLoader;  definedPackages=new HashMap<String,Package>();  loadedClasses=new HashMap<String,Class<?>>();  packageCertificates=new Hashtable<String,Certificate[]>();}  }
class C{  public static boolean containsChroot(String zkHost){  return zkHost.contains("/");}  }
class C{  public PutWarmerRequest searchRequest(SearchRequest searchRequest){  this.searchRequest=searchRequest;  return this;}  }
class C{  public String toString(){  return super.toString() + "SubjectInfoAccess [\n  " + accessDescriptions+ "\n]\n";}  }
class C{  public ObjectMatrix2D viewRow(int row){  checkRow(row);  int viewRows=this.slices;  int viewColumns=this.columns;  int viewRowZero=sliceZero;  int viewColumnZero=columnZero;  int viewOffset=this.offset + _rowOffset(_rowRank(row));  int viewRowStride=this.sliceStride;  int viewColumnStride=this.columnStride;  int[] viewRowOffsets=this.sliceOffsets;  int[] viewColumnOffsets=this.columnOffsets;  return new SelectedDenseObjectMatrix2D(viewRows,viewColumns,this.elements,viewRowZero,viewColumnZero,viewRowStride,viewColumnStride,viewRowOffsets,viewColumnOffsets,viewOffset);}  }
class C{  public ScriptNotFoundException(Throwable cause){  super(cause);}  }
class C{  public static MaterialSlide newInstance(int imageDrawable,String title,String content,int titleTextColor,int contentTextColor){  MaterialSlide materialSlide=new MaterialSlide();  Bundle args=new Bundle();  args.putInt(ARG_DRAWABLE,imageDrawable);  args.putString(ARG_TITLE,title);  args.putString(ARG_CONTENT,content);  args.putInt(ARG_TITLE_TEXT_COLOR,titleTextColor);  args.putInt(ARG_CONTENT_TEXT_COLOR,contentTextColor);  materialSlide.setArguments(args);  return materialSlide;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (sessionNode == null) {    throw new NullPointerException();  }  if (buttonType == null) {    throw new NullPointerException();  }  setNodeType(NodeType.SESSION);}  }
class C{  public JRadioButton(String text,Icon icon){  this(text,icon,false);}  }
class C{  @Override protected boolean hasImmediateOutputFormat(){  return isStreamableFilter();}  }
class C{  public static ImageSearcher createSimpleSearcher(int maximumHits){  return ImageSearcherFactory.createColorLayoutImageSearcher(maximumHits);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public static long[] andI(long[] v,long[] o,int off){  if (off == 0) {    return andI(v,o);  }  if (off < 0) {    throw new UnsupportedOperationException("Negative shifts are not supported.");  }  final int shiftWords=off >>> LONG_LOG2_SIZE;  final int shiftBits=off & LONG_LOG2_MASK;  if (shiftWords >= v.length) {    return v;  }  if (shiftBits == 0) {    final int end=Math.min(v.length,o.length + shiftWords);    for (int i=shiftWords; i < end; i++) {      v[i]&=o[i - shiftWords];    }    Arrays.fill(v,0,shiftWords,0);    return v;  }  final int unshiftBits=Long.SIZE - shiftBits;  final int end=Math.min(v.length,o.length + shiftWords) - 1;  Arrays.fill(v,end + 1,v.length,0);  for (int i=end; i > shiftWords; i--) {    final int src=i - shiftWords;    v[i]&=(o[src] << shiftBits) | (o[src - 1] >>> unshiftBits);  }  v[shiftWords]&=o[0] << shiftBits;  Arrays.fill(v,0,shiftWords,0);  return v;}  }
class C{  public static void expandCallingConventions(IR ir){  for (Instruction inst=ir.firstInstructionInCodeOrder(); inst != null; inst=inst.nextInstructionInCodeOrder()) {    if (inst.isCall()) {      callExpand(inst,ir);    } else     if (inst.isReturn()) {      returnExpand(inst,ir);    }  }  prologueExpand(ir);}  }
class C{  public void removeAllListeners(){  mListeners=new ArrayList<>();}  }
class C{  public int lengthOfMonth(){  return getMonth().length(isLeapYear());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static Shape topEdge(BufferedImage image,GeneralPath path,int start){  Point2D p1=path.getCurrentPoint();  Point2D p2=null;  Line2D line=new Line2D.Float();  for (int i=start; i >= firstx; i-=sample) {    boolean aPointExistsOnThisLine=false;    for (int j=0; j < image.getHeight(); j+=sample) {      if ((image.getRGB(i,j) & 0xff000000) != 0) {        Point2D p=new Point2D.Float(i,j);        aPointExistsOnThisLine=true;        p2=detectLine(p1,p2,p,line,path);        break;      }    }    if (aPointExistsOnThisLine == false) {      break;    }  }  path.closePath();  return path;}  }
class C{  @Override public EncryptedData encrypt(byte[] plainBytes,KeyParameter aesKey) throws KeyCrypterException {  checkNotNull(plainBytes);  checkNotNull(aesKey);  try {    byte[] iv=new byte[BLOCK_LENGTH];    secureRandom.nextBytes(iv);    ParametersWithIV keyWithIv=new ParametersWithIV(aesKey,iv);    BufferedBlockCipher cipher=new PaddedBufferedBlockCipher(new CBCBlockCipher(new AESFastEngine()));    cipher.init(true,keyWithIv);    byte[] encryptedBytes=new byte[cipher.getOutputSize(plainBytes.length)];    final int length1=cipher.processBytes(plainBytes,0,plainBytes.length,encryptedBytes,0);    final int length2=cipher.doFinal(encryptedBytes,length1);    return new EncryptedData(iv,Arrays.copyOf(encryptedBytes,length1 + length2));  } catch (  Exception e) {    throw new KeyCrypterException("Could not encrypt bytes.",e);  }}  }
class C{  public Builder addFixed64(final long value){  if (result.fixed64 == null) {    result.fixed64=new ArrayList<Long>();  }  result.fixed64.add(value);  return this;}  }
class C{  @Inline private void fastPath(ObjectReference src,Address slot,ObjectReference tgt,int mode){  if (Gen.GATHER_WRITE_BARRIER_STATS)   Gen.wbFast.inc();  if ((mode == ARRAY_ELEMENT && USE_OBJECT_BARRIER_FOR_AASTORE) || (mode == INSTANCE_FIELD && USE_OBJECT_BARRIER_FOR_PUTFIELD)) {    if (HeaderByte.isUnlogged(src)) {      if (Gen.GATHER_WRITE_BARRIER_STATS)       Gen.wbSlow.inc();      HeaderByte.markAsLogged(src);      modbuf.insert(src);    }  } else {    if (!Gen.inNursery(slot) && Gen.inNursery(tgt)) {      if (Gen.GATHER_WRITE_BARRIER_STATS)       Gen.wbSlow.inc();      remset.insert(slot);    }  }}  }
class C{  public boolean removeFromLocalGroup(String tenantName,PrincipalId principalId,String groupName) throws Exception {  return getService().removeFromLocalGroup(tenantName,principalId,groupName,this.getServiceContext());}  }
class C{  public static boolean isValidEmail(String email){  final String emailPattern="^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";  Matcher matcher;  Pattern pattern=Pattern.compile(emailPattern);  matcher=pattern.matcher(email);  if (matcher != null)   return matcher.matches(); else   return false;}  }
class C{  public static Map<String,Object> createBinaryFile(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=null;  try {    result=createBinaryFileMethod(dctx,context);  } catch (  GenericServiceException e) {    return ServiceUtil.returnError(e.getMessage());  }  return result;}  }
class C{  public static double copySign(final double magnitude,final double sign){  return Double.longBitsToDouble(Double.doubleToRawLongBits(sign) & Long.MIN_VALUE | Double.doubleToRawLongBits(magnitude) & Long.MAX_VALUE);}  }
class C{  public BoundingBox calcBoundingBoxFromData() throws OsmException {  int top=0;  int bottom=0;  int left=0;  int right=0;  if (nodes != null) {    for (    Node n : nodes) {      if (n.getLat() > top)       top=n.getLat(); else       if (n.getLat() < bottom)       bottom=n.getLat();      if (n.getLon() > right)       right=n.getLon(); else       if (n.getLon() < left)       left=n.getLon();    }  }  BoundingBox result=new BoundingBox(left,bottom,right,top);  return result;}  }
class C{  public String sqlMetadata_uniqueColumns(String vendorName,String catalogName,String schemaName){  return m_interfaces.get(getDBVendorID(vendorName)).sqlMetadata_uniqueColumns(catalogName,schemaName);}  }
class C{  public static boolean isGeometryOperationSpecified(){  return geometryOp != defaultOp;}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  protected void logMsg(String s){  outWriter.println(s);}  }
class C{  void error(String msg){  Messager messager=processingEnv.getMessager();  messager.printMessage(Diagnostic.Kind.ERROR,msg);}  }
class C{  private static boolean hasMvcOrJaxrsAnnotations(Method method){  final List<Annotation> ans=Arrays.asList(method.getDeclaredAnnotations());  return ans.stream().anyMatch(null);}  }
class C{  @Override public TPS apply(final IIndex ndx){  final long timestamp=TimestampChooser.chooseTimestamp(ndx,this.writeTime);  final byte[] fromKey=schema.getPrefix(ndx.getIndexMetadata().getKeyBuilder(),primaryKey);  final TPS tps=atomicDelete(ndx,fromKey,schema,timestamp,filter);  if (tps == null) {    if (log.isInfoEnabled())     log.info("No data for primaryKey: " + primaryKey);  }  return tps;}  }
class C{  public static String translateMessage(String code,Dictionary<?,?> params) throws MessageTranslatorException {  MessageFormat mf=lookupMessageFormat(code);  String[] indexNames=lookupArrayIndexNames(code);  Object[] formatParams=new Object[indexNames.length];  for (int i=0; i < indexNames.length; i++) {    Object param=null;    if (null != params) {      param=params.get(indexNames[i]);    }    if (null == param) {      formatParams[i]="";    } else {      formatParams[i]=param;    }  }  return mf.format(formatParams);}  }
class C{  public Action(){  super();}  }
class C{  public static RuntimeException throwUncheckedException(Throwable ex){  throwIfInstance(ex,RuntimeException.class);  throwIfInstance(ex,Error.class);  throw createPalantirRuntimeException(ex);}  }
class C{  public boolean isUpdateable(){  if (isVirtualColumn())   return false;  return m_vo.IsUpdateable;}  }
class C{  private void removeCars() throws BuildFailedException {  addLine(_buildReport,SEVEN,BLANK_LINE);  addLine(_buildReport,SEVEN,Bundle.getMessage("buildRemoveCars"));  boolean showCar=true;  int carListSize=_carList.size();  for (_carIndex=0; _carIndex < _carList.size(); _carIndex++) {    Car car=_carList.get(_carIndex);    if (showCar && carListSize - _carList.size() == DISPLAY_CAR_LIMIT_100) {      showCar=false;      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildOnlyFirstXXXCars"),new Object[]{DISPLAY_CAR_LIMIT_100,Bundle.getMessage("Type")}));    }    if (car.getTrack() == null) {      addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildErrorRsNoLoc"),new Object[]{car.toString(),car.getLocationName()}));      _carList.remove(car);      _carIndex--;      continue;    }    if (car.isLocationUnknown()) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarLocUnknown"),new Object[]{car.toString(),car.getLocationName(),car.getTrackName()}));      if (car.getTrack().equals(_departStageTrack)) {        throw new BuildFailedException(MessageFormat.format(Bundle.getMessage("buildErrorLocationUnknown"),new Object[]{car.getLocationName(),car.getTrackName(),car.toString()}));      }      _carList.remove(car);      _carIndex--;      continue;    }    if (car.isOutOfService()) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarOutOfService"),new Object[]{car.toString(),car.getLocationName(),car.getTrackName()}));      if (car.getTrack().equals(_departStageTrack)) {        throw new BuildFailedException(MessageFormat.format(Bundle.getMessage("buildErrorLocationOutOfService"),new Object[]{car.getLocationName(),car.getTrackName(),car.toString()}));      }      _carList.remove(car);      _carIndex--;      continue;    }    if (car.hasFred() && car.getDestination() != null && car.getDestination() != _terminateLocation) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildExcludeCarWrongDest"),new Object[]{car.toString(),car.getTypeName(),car.getDestinationName()}));      _carList.remove(car);      _carIndex--;      continue;    }    if (car.isCaboose() && car.getDestination() != null && car.getDestination() != _terminateLocation && _train.getSecondLegOptions() == Train.NO_CABOOSE_OR_FRED && _train.getThirdLegOptions() == Train.NO_CABOOSE_OR_FRED) {      addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildExcludeCarWrongDest"),new Object[]{car.toString(),car.getTypeName(),car.getDestinationName()}));      _carList.remove(car);      _carIndex--;      continue;    }    if (car.getTrack().getTrackType().equals(Track.INTERCHANGE)) {      if (car.getTrack().getPickupOption().equals(Track.ANY) && car.getLastRouteId().equals(_train.getRoute().getId())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarDropByTrain"),new Object[]{car.toString(),_train.getRoute().getName(),car.getLocationName(),car.getTrackName()}));        _carList.remove(car);        _carIndex--;        continue;      }    }    if (car.getTrack().getTrackType().equals(Track.INTERCHANGE) || car.getTrack().getTrackType().equals(Track.SPUR)) {      if (car.getTrack().getPickupOption().equals(Track.TRAINS) || car.getTrack().getPickupOption().equals(Track.EXCLUDE_TRAINS)) {        if (car.getTrack().acceptsPickupTrain(_train)) {          log.debug("Car ({}) can be picked up by this train",car.toString());        } else {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarByTrain"),new Object[]{car.toString(),car.getTrack().getTrackTypeName(),car.getLocationName(),car.getTrackName()}));          _carList.remove(car);          _carIndex--;          continue;        }      } else       if (car.getTrack().getPickupOption().equals(Track.ROUTES) || car.getTrack().getPickupOption().equals(Track.EXCLUDE_ROUTES)) {        if (car.getTrack().acceptsPickupRoute(_train.getRoute())) {          log.debug("Car ({}) can be picked up by this route",car.toString());        } else {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarByRoute"),new Object[]{car.toString(),car.getTrack().getTrackTypeName(),car.getLocationName(),car.getTrackName()}));          _carList.remove(car);          _carIndex--;          continue;        }      }    }    if (_departStageTrack == null || car.getTrack() != _departStageTrack) {      if (!_train.acceptsRoadName(car.getRoadName())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarWrongRoad"),new Object[]{car.toString(),car.getTypeName(),car.getRoadName()}));        _carList.remove(car);        _carIndex--;        continue;      }      if (!_train.acceptsTypeName(car.getTypeName())) {        if (showCar) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarWrongType"),new Object[]{car.toString(),car.getTypeName()}));        }        _carList.remove(car);        _carIndex--;        continue;      }      if (!car.isCaboose() && !car.isPassenger() && !_train.acceptsLoad(car.getLoadName(),car.getTypeName())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarLoadAtLoc"),new Object[]{car.toString(),car.getTypeName(),car.getLoadName()}));        _carList.remove(car);        _carIndex--;        continue;      }      if (!_train.acceptsOwnerName(car.getOwner())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarOwnerAtLoc"),new Object[]{car.toString(),car.getOwner(),(car.getLocationName() + ", " + car.getTrackName())}));        _carList.remove(car);        _carIndex--;        continue;      }      if (!_train.acceptsBuiltDate(car.getBuilt())) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarBuiltAtLoc"),new Object[]{car.toString(),car.getBuilt(),(car.getLocationName() + ", " + car.getTrackName())}));        _carList.remove(car);        _carIndex--;        continue;      }      if (car.hasFred() && (_train.getRequirements() & Train.FRED) == 0) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarWithFredAtLoc"),new Object[]{car.toString(),car.getTypeName(),(car.getLocationName() + ", " + car.getTrackName())}));        _carList.remove(car);        _carIndex--;        continue;      }      if (car.getWait() > 0 && _train.services(car)) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarWait"),new Object[]{car.toString(),car.getTypeName(),car.getLocationName(),car.getTrackName(),car.getWait()}));        car.setWait(car.getWait() - 1);        String oldLoad=car.getLoadName();        car.updateLoad();        String newLoad=car.getLoadName();        if (!oldLoad.equals(newLoad)) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarLoadChangedWait"),new Object[]{car.toString(),car.getTypeName(),oldLoad,newLoad}));        }        _carList.remove(car);        _carIndex--;        continue;      }      if (!car.getPickupScheduleId().equals(Car.NONE)) {        if (car.getPickupScheduleId().equals(TrainManager.instance().getTrainScheduleActiveId())) {          car.setPickupScheduleId(Car.NONE);        } else {          TrainSchedule sch=TrainScheduleManager.instance().getScheduleById(car.getPickupScheduleId());          if (sch != null) {            addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarSchedule"),new Object[]{car.toString(),car.getTypeName(),car.getLocationName(),car.getTrackName(),sch.getName()}));            _carList.remove(car);            _carIndex--;            continue;          }        }      }    }  }  if (_departStageTrack != null) {    int numCarsFromStaging=0;    _numOfBlocks=new Hashtable<String,Integer>();    addLine(_buildReport,SEVEN,BLANK_LINE);    addLine(_buildReport,SEVEN,Bundle.getMessage("buildRemoveCarsStaging"));    for (_carIndex=0; _carIndex < _carList.size(); _carIndex++) {      Car car=_carList.get(_carIndex);      if (car.getLocationName().equals(_departLocation.getName())) {        if (car.getTrackName().equals(_departStageTrack.getName())) {          numCarsFromStaging++;          if (!car.isCaboose() && !car.hasFred() && !car.isPassenger()&& (car.getKernel() == null || car.getKernel().isLead(car))) {            log.debug("Car {} last location id: {}",car.toString(),car.getLastLocationId());            Integer number=1;            if (_numOfBlocks.containsKey(car.getLastLocationId())) {              number=_numOfBlocks.get(car.getLastLocationId()) + 1;              _numOfBlocks.remove(car.getLastLocationId());            }            _numOfBlocks.put(car.getLastLocationId(),number);          }        } else {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarAtLoc"),new Object[]{car.toString(),(car.getLocationName() + ", " + car.getTrackName())}));          _carList.remove(car);          _carIndex--;        }      }    }    addLine(_buildReport,FIVE,BLANK_LINE);    addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildDepartingStagingCars"),new Object[]{_departStageTrack.getLocation().getName(),_departStageTrack.getName(),numCarsFromStaging}));    for (    Car car : _carList) {      if (car.getTrack() == _departStageTrack) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildStagingCarAtLoc"),new Object[]{car.toString(),car.getTypeName(),car.getLoadName()}));      }    }    if (numCarsFromStaging != _departStageTrack.getNumberCars()) {      throw new BuildFailedException(MessageFormat.format(Bundle.getMessage("buildErrorNotAllCars"),new Object[]{_departStageTrack.getName(),Integer.toString(_departStageTrack.getNumberCars() - numCarsFromStaging)}));    }    log.debug("Staging departure track ({}) has {} cars and {} blocks",_departStageTrack.getName(),numCarsFromStaging,_numOfBlocks.size());  }  addLine(_buildReport,FIVE,BLANK_LINE);  addLine(_buildReport,ONE,MessageFormat.format(Bundle.getMessage("buildFoundCars"),new Object[]{Integer.toString(_carList.size()),_train.getName()}));  List<String> locationNames=new ArrayList<String>();  for (  RouteLocation rl : _train.getRoute().getLocationsBySequenceList()) {    if (locationNames.contains(rl.getName())) {      continue;    }    locationNames.add(rl.getName());    if (rl.getLocation().isStaging()) {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarsInStaging"),new Object[]{rl.getName()}));    } else {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarsAtLocation"),new Object[]{rl.getName()}));    }    int carCount=0;    for (_carIndex=0; _carIndex < _carList.size(); _carIndex++) {      Car car=_carList.get(_carIndex);      if (!car.getLocationName().equals(rl.getName())) {        continue;      }      if (carCount < DISPLAY_CAR_LIMIT_50) {        if (car.getLoadPriority().equals(CarLoad.PRIORITY_LOW)) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarAtLocWithMoves"),new Object[]{car.toString(),car.getTypeName(),(car.getLocationName() + ", " + car.getTrackName()),car.getMoves()}));        } else {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarAtLocWithMovesPriority"),new Object[]{car.toString(),car.getTypeName(),(car.getLocationName() + ", " + car.getTrackName()),car.getMoves(),car.getLoadPriority()}));        }      }      if (carCount == DISPLAY_CAR_LIMIT_50) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildOnlyFirstXXXCars"),new Object[]{carCount,rl.getName()}));      }      carCount++;      if (car.getKernel() != null) {        if (car.getKernel().isLead(car)) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarLeadKernel"),new Object[]{car.toString(),car.getKernelName(),car.getKernel().getSize(),car.getKernel().getTotalLength(),Setup.getLengthUnit().toLowerCase()}));        } else {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarPartOfKernel"),new Object[]{car.toString(),car.getKernelName(),car.getKernel().getSize(),car.getKernel().getTotalLength(),Setup.getLengthUnit().toLowerCase()}));        }        checkKernel(car);        if (!car.getKernel().isLead(car)) {          _carList.remove(car);          _carIndex--;          continue;        }      }      if (_train.equals(car.getTrain())) {        addLine(_buildReport,FIVE,MessageFormat.format(Bundle.getMessage("buildCarAlreadyAssigned"),new Object[]{car.toString()}));      }      if (car.getDestination() != null) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildCarHasAssignedDest"),new Object[]{car.toString(),(car.getDestinationName() + ", " + car.getDestinationTrackName())}));        RouteLocation rld=_train.getRoute().getLastLocationByName(car.getDestinationName());        if (rld == null) {          addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("buildExcludeCarDestNotPartRoute"),new Object[]{car.toString(),car.getDestinationName(),_train.getRoute().getName()}));          if (car.getLocation().equals(_departLocation) && _departStageTrack != null) {            throw new BuildFailedException(MessageFormat.format(Bundle.getMessage("buildErrorCarNotPartRoute"),new Object[]{car.toString()}));          }          _carList.remove(car);          _carIndex--;        }      }    }    addLine(_buildReport,SEVEN,BLANK_LINE);  }  return;}  }
class C{  @Override int calculateEndRightBound(float xAxisDelta){  return getView().getRight() + (int)xAxisDelta;}  }
class C{  public static double estimateSrtmElevation(String pathToTiles,Coord c){  pathToTiles+=pathToTiles.endsWith("/") ? "" : "/";  String tileName=getSrtmTile(c);  String tileFileName=pathToTiles + tileName + ".hgt";  File tileFile=new File(tileFileName);  if (!tileFile.exists()) {    LOG.warn("Tile " + tileFileName + " is not available locally. Downloading...");    Runtime rt=Runtime.getRuntime();    String url=SRTM_URL_AFRICA + tileName + ".hgt.zip";    try {      Process p1=rt.exec("curl -o " + tileFileName + ".zip "+ url);      while (p1.isAlive()) {      }      Process p2=rt.exec("unzip " + tileFileName + ".zip -d "+ pathToTiles);      while (p2.isAlive()) {      }      Process p3=rt.exec("rm " + tileFileName + ".zip");      while (p3.isAlive()) {      }    } catch (    IOException e) {      e.printStackTrace();      throw new RuntimeException("Could not download SRTM tile file.");    }  }  SrtmTile srtmTile=new SrtmTile(tileFile);  return srtmTile.getElevation(c.getX(),c.getY());}  }
class C{  private static <T>void assertCollectionEqualsNoOrder(Collection<T> expected,Collection<T> actual){  String msg=String.format("expected=%s, actual=%s",expected.toString(),actual.toString());  assertEquals(msg,expected.size(),actual.size());  for (  T e : expected) {    if (!actual.contains(e)) {      msg=String.format("Expected element %s not found in " + "actual. expected=%s, actual=%s",e,expected,actual);      fail(msg);    }  }}  }
class C{  @Override public boolean containsValue(Object val){  return _map.containsValue(unwrapValue(val));}  }
class C{  public List<GTScanRange> planScanRanges(){  TupleFilter flatFilter=flattenToOrAndFilter(gtFilter);  List<Collection<ColumnRange>> orAndDimRanges=translateToOrAndDimRanges(flatFilter);  List<GTScanRange> scanRanges=Lists.newArrayListWithCapacity(orAndDimRanges.size());  for (  Collection<ColumnRange> andDimRanges : orAndDimRanges) {    GTScanRange scanRange=newScanRange(andDimRanges);    if (scanRange != null)     scanRanges.add(scanRange);  }  List<GTScanRange> mergedRanges=mergeOverlapRanges(scanRanges);  mergedRanges=mergeTooManyRanges(mergedRanges,maxScanRanges);  return mergedRanges;}  }
class C{  public boolean isWeaponBlockedAt(int loc,boolean isRear){  return false;}  }
class C{  public Tasks<VolumeRestRep> startFullCopy(URI copyId){  return postTasks(getIdUrl() + "/start",copyId);}  }
class C{  public static double decodeVelocity(short velocity){  return velocity / 8000.0;}  }
class C{  public boolean isNull(String key){  return JSONObject.NULL.equals(this.opt(key));}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset){  byte[] ALPHABET=_STANDARD_ALPHABET;  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=ALPHABET[(inBuff >>> 18)];  destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=ALPHABET[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=ALPHABET[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=ALPHABET[(inBuff >>> 18)];destination[destOffset + 1]=ALPHABET[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public static PublicKey mutate(final PublicKey key){  return new PublicKey(Utils.incrementAtIndex(key.getRaw(),12));}  }
class C{  protected void pageDialog(){  m_PageFormat=m_PrinterJob.pageDialog(m_PageFormat);}  }
class C{  @action(name="agree",args={@arg(name=GamaMessageType.MESSAGE_STR,type=IType.MESSAGE,optional=false,doc=@doc("The message to be replied")),@arg(name=GamaMessage.CONTENTS,type=IType.LIST,optional=false,doc=@doc("The content of the replying message"))},doc=@doc("Replies a message with an 'agree' performative message.")) public Object primAgree(final IScope scope) throws GamaRuntimeException {  final IList originals=getMessageArg(scope);  if (originals == null || originals.size() == 0) {    return null;  }  return replyMessage(scope,originals,AGREE,getContentArg(scope));}  }
class C{  public HttpsURL(final String userinfo,final String host,final int port,final String path) throws URIException {  this(userinfo,host,port,path,null,null);}  }
class C{  @Override public final boolean isWaitForRead(){  return true;}  }
class C{  public void testNotSpecialCase(){  byte aBytes[]={-1,-1,-1,-1};  int aSign=1;  byte rBytes[]={-1,0,0,0,0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.not();  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void saveCache(){  LogService.getRoot().log(Level.CONFIG,"com.rapidminer.gui.security.Wallet.saving_secrets_file");  Document doc=getWalletAsXML();  File file=FileSystemService.getUserConfigFile(CACHE_FILE_NAME);  try {    XMLTools.stream(doc,file,null);  } catch (  XMLException e) {    LogService.getRoot().log(Level.WARNING,I18N.getMessage(LogService.getRoot().getResourceBundle(),"com.rapidminer.gui.security.Wallet.saving_secrets_file_error",e),e);  }}  }
class C{  public QueryException(final String message,final int errorCode,final SqlStates sqlState){  super(message);  this.message=message;  this.errorCode=errorCode;  this.sqlState=sqlState.getSqlState();}  }
class C{  private boolean checkInterrupted(){  if (isInterrupted()) {    log.config("interrupted");    if (m_child != null)     m_child.destroy();    m_child=null;    if (m_outReader != null && m_outReader.isAlive())     m_outReader.interrupt();    m_outReader=null;    if (m_errReader != null && m_errReader.isAlive())     m_errReader.interrupt();    m_errReader=null;    if (m_inStream != null)     try {      m_inStream.close();    } catch (    Exception e) {    }    m_inStream=null;    if (m_outStream != null)     try {      m_outStream.close();    } catch (    Exception e) {    }    m_outStream=null;    if (m_errStream != null)     try {      m_errStream.close();    } catch (    Exception e) {    }    m_errStream=null;    return true;  }  return false;}  }
class C{  public static CompilerOptions fromConfig(){  return fromConfig(CeylonConfig.get());}  }
class C{  private String d(int cnt){  SB buf=new SB();  for (int i=0; i < cnt; i++)   buf.a(DELIM_FIELD);  return buf.toString();}  }
class C{  public Memoizer(){  this(null);}  }
class C{  private boolean analyzeUpgradeResponse1(String response){  EspHttpResponseBaseEntity responseEntity=new EspHttpResponseBaseEntity(response);  return responseEntity.isValid() && responseEntity.getStatus() == HttpStatus.SC_OK;}  }
class C{  public SceneKeyboard(Scene scene,Stage stage){  target=scene;  scene.setOnKeyPressed(null);  scene.setOnKeyReleased(null);  if (stage != null) {    stage.focusedProperty().addListener(null);  }}  }
class C{  public static int toInt(byte[] bytes,int start){  return toInt(bytes[start],bytes[start + 1],bytes[start + 2],bytes[start + 3]);}  }
class C{  public void testTopologyValidator() throws Exception {  putValid(null);  remove(null);  putInvalid(CACHE_NAME_1);  removeInvalid(CACHE_NAME_1);  putInvalid(CACHE_NAME_2);  removeInvalid(CACHE_NAME_2);  startGrid(1);  putValid(null);  remove(null);  putValid(CACHE_NAME_1);  putValid(CACHE_NAME_2);  remove(CACHE_NAME_2);  startGrid(2);  putValid(null);  remove(null);  getInvalid(CACHE_NAME_1);  putInvalid(CACHE_NAME_1);  removeInvalid(CACHE_NAME_1);  putValid(CACHE_NAME_2);  remove(CACHE_NAME_2);}  }
class C{  private void makeRegistryView() throws Exception {  handleTableCreation("registry data view",bigquery().query(REGISTRY_DATA_SQL.put("SOURCE_DATASET",sourceDatasetId).build(),bigquery().buildDestinationTable("RegistryData").description("Synthetic view of registry information.").type(TableType.VIEW).build()));}  }
class C{  public Builder addQueryParameter(String name,String value){  if (name == null) {    throw new IllegalArgumentException("name == null");  }  if (encodedQueryNamesAndValues == null) {    encodedQueryNamesAndValues=new ArrayList<>();  }  encodedQueryNamesAndValues.add(canonicalize(name,QUERY_COMPONENT_ENCODE_SET,false,false,true,true));  encodedQueryNamesAndValues.add(value != null ? canonicalize(value,QUERY_COMPONENT_ENCODE_SET,false,false,true,true) : null);  return this;}  }
class C{  public byte nextByte(int offset){  skip(offset - 1);  return nextByte();}  }
class C{  public ComponentBuilder reset(){  return retain(FormatRetention.NONE);}  }
class C{  public static void println(float x){  out.println(x);}  }
class C{  private List<MethodInvocationTree> resolveReflectiveMethod(MethodInvocationTree tree,AnnotatedTypeFactory reflectionFactory){  assert isReflectiveMethodInvocation(tree);  JCMethodInvocation methodInvocation=(JCMethodInvocation)tree;  Context context=((JavacProcessingEnvironment)processingEnv).getContext();  TreeMaker make=TreeMaker.instance(context);  TreePath path=reflectionFactory.getPath(tree);  JavacScope scope=(JavacScope)trees.getScope(path);  Env<AttrContext> env=scope.getEnv();  List<MethodInvocationTree> methods=new ArrayList<>();  boolean unknown=isUnknownMethod(tree);  AnnotationMirror estimate=getMethodVal(tree);  if (estimate == null) {    debugReflection("MethodVal is unknown for: " + tree);    debugReflection("UnknownMethod annotation: " + unknown);    return methods;  }  debugReflection("MethodVal type system annotations: " + estimate);  List<String> listClassNames=AnnotationUtils.getElementValueArray(estimate,"className",String.class,true);  List<String> listMethodNames=AnnotationUtils.getElementValueArray(estimate,"methodName",String.class,true);  List<Integer> listParamLenghts=AnnotationUtils.getElementValueArray(estimate,"params",Integer.class,true);  assert listClassNames.size() == listMethodNames.size() && listClassNames.size() == listParamLenghts.size();  for (int i=0; i < listClassNames.size(); ++i) {    String className=listClassNames.get(i);    String methodName=listMethodNames.get(i);    int paramLength=listParamLenghts.get(i);    JCExpression receiver=methodInvocation.args.head;    com.sun.tools.javac.util.List<JCExpression> args=methodInvocation.args.tail;    for (    Symbol symbol : getMethodSymbolsfor(className,methodName,paramLength,env)) {      if ((symbol.flags() & Flags.PUBLIC) > 0) {        debugReflection("Resolved public method: " + symbol.owner + "."+ symbol);      } else {        debugReflection("Resolved non-public method: " + symbol.owner + "."+ symbol);      }      JCExpression method=make.Select(receiver,symbol);      args=getCorrectedArgs(symbol,args);      JCMethodInvocation syntTree=paramLength > 0 ? make.App(method,args) : make.App(method);      methods.add(syntTree);    }  }  return methods;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:44.797 -0500",hash_original_method="D6836B125607EB452687B13BDE6808A1",hash_generated_method="9D9F09BCA00ADEF6E37839FEA4228DCD") public Signature(byte[] signature){  mSignature=signature.clone();}  }
class C{  public void logEvent(String eventName){  logEvent(eventName,null);}  }
class C{  void attribTypeVariables(List<JCTypeParameter> typarams,Env<AttrContext> env){  for (  JCTypeParameter tvar : typarams) {    TypeVar a=(TypeVar)tvar.type;    a.tsym.flags_field|=UNATTRIBUTED;    a.bound=Type.noType;    if (!tvar.bounds.isEmpty()) {      List<Type> bounds=List.of(attribType(tvar.bounds.head,env));      for (      JCExpression bound : tvar.bounds.tail)       bounds=bounds.prepend(attribType(bound,env));      types.setBounds(a,bounds.reverse());    } else {      types.setBounds(a,List.of(syms.objectType));    }    a.tsym.flags_field&=~UNATTRIBUTED;  }  for (  JCTypeParameter tvar : typarams) {    chk.checkNonCyclic(tvar.pos(),(TypeVar)tvar.type);  }}  }
class C{  public int compareTo(Object arg0){  return ((StringReplacement)arg0).oldStr.compareTo(this.oldStr);}  }
class C{  private boolean hasAccess(StorageOSUser storageOSUser,CatalogService service){  log.debug("check if " + storageOSUser.getName() + " has access for "+ service.getTitle());  return hasAccess(storageOSUser,service.getAcls());}  }
class C{  public void fillPolygon(int[] xPoints,int[] yPoints,int nPoints){  int[] cX=xPoints;  int[] cY=yPoints;  if ((!impl.isTranslationSupported()) && (xTranslate != 0 || yTranslate != 0)) {    cX=new int[nPoints];    cY=new int[nPoints];    System.arraycopy(xPoints,0,cX,0,nPoints);    System.arraycopy(yPoints,0,cY,0,nPoints);    for (int iter=0; iter < nPoints; iter++) {      cX[iter]+=xTranslate;      cY[iter]+=yTranslate;    }  }  impl.fillPolygon(nativeGraphics,cX,cY,nPoints);}  }
class C{  private static int reconstructModel(Camera camera,List<Model> candidateModels,Collection<Feature> commonFeatures,Matrix t,Matrix r,SceneView i1,SceneView i2){  Model m=new Model();  Matrix c=r.transpose().times(t).times(-1);  Matrix zeroTrans=new Matrix(3,1);  Matrix identityRot=Matrix.identity(3,3);  final SceneView left=i1;  final SceneView right=i2;  int result=0;  for (  Feature f : commonFeatures) {    final HasCoordinates2d fLeft=left.getLocationInView(f);    final HasCoordinates2d fRight=right.getLocationInView(f);    Matrix x=Triangulator.triangulate(camera,r,c,fLeft,fRight);    m.addPoint(f,new Point3d(x.get(0,0),x.get(1,0),x.get(2,0)));    if (camera.isPointBehindCamera(x,t,r)) {      result++;    }    if (camera.isPointBehindCamera(x,zeroTrans,identityRot)) {      result++;    }  }  candidateModels.add(m);  return result;}  }
class C{  public static CoordinateSequence projectToYZ(CoordinateSequence seq){  return new AxisPlaneCoordinateSequence(seq,YZ_INDEX);}  }
class C{  private void renderAABB(GL2 gl,SandboxBody body){  gl.glColor4fv(Preferences.getBodyAABBColor(),0);  AABB aabb=this.simulation.getWorld().getBroadphaseDetector().getAABB(body);  if (aabb != null) {    RenderUtilities.drawRectangleFromStartToEnd(gl,aabb.getMinX(),aabb.getMinY(),aabb.getMaxX(),aabb.getMaxY(),false);  }}  }
class C{  static public Locator southWest(){  return new RelativeDecoratorLocator(0.0,1.0);}  }
class C{  public AnnotatedMethod remove(AnnotatedMethod am){  return remove(am.getAnnotated());}  }
class C{  public boolean isVendor(){  Object oo=get_Value(COLUMNNAME_IsVendor);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void addBranchUpdateOperation(final Tree tree,final NodeRef node){  branchOperations.add(new DataLikelihoodDelegate.BranchOperation(node.getNumber(),computeBranchLength(tree,node)));}  }
class C{  public SliderBridge(ConnectionRequest source){  if (source != null) {    sources=new ConnectionRequest[]{source};  }  bindProgress(sources,this);}  }
class C{  public void parse(final String osmFilename){  parse(osmFilename,null);}  }
class C{  public URL toURL() throws MalformedURLException {  if (!absolute) {    throw new IllegalArgumentException("URI is not absolute: " + toString());  }  return new URL(toString());}  }
class C{  public static void parseArgs(String[] args) throws Exception {  args=new String[]{"jane2jane.cer","jane2steve.cer","steve2tom.cer"};  TrustAnchor anchor=new TrustAnchor(getCertFromFile(args[0]),null);  List<X509Certificate> list=new ArrayList<X509Certificate>();  for (int i=1; i < args.length; i++) {    list.add(0,getCertFromFile(args[i]));  }  CertificateFactory cf=CertificateFactory.getInstance("X509");  path=cf.generateCertPath(list);  Set<TrustAnchor> anchors=Collections.singleton(anchor);  params=new PKIXParameters(anchors);  params.setRevocationEnabled(false);  params.setDate(new Date(1243828800000l));}  }
class C{  public void addCdn(String srcHost,int minSize,int maxSize,String cdnHost,String cdnSslHost){  SizeRange sizeRange=new SizeRange(minSize,maxSize,cdnHost,cdnSslHost);  SrcHostInfo hostInfo=cdnSrcHostInfos.get(srcHost);  if (hostInfo == null) {    hostInfo=new SrcHostInfo(srcHost);    cdnSrcHostInfos.put(srcHost,hostInfo);  }  hostInfo.sizeRanges.add(sizeRange);}  }
class C{  private void RPARENHandler(){  boolean closed=false;  if (inComment)   closed=true;  while (!closed) {    if (lparen > 0) {      if (lparen == rparen + 1) {        stateStackPop();      } else {        rparen++;      }      closed=true;    } else {      if (!stateStackPop())       break;    }  }}  }
class C{  public static XMLTree from(InputStream is) throws IOException {  return new XMLTree(toByteArray(is));}  }
class C{  public MemberScopeRequest enforceInstance(){  if (!staticAccess) {    return this;  }  return new MemberScopeRequest(originalReceiverTypeRef,context,checkVisibility,false);}  }
class C{  public static boolean isMouseActionEvent(@NotNull MouseEvent e,@NotNull String actionId){  KeymapManager keymapManager=KeymapManager.getInstance();  if (keymapManager == null) {    return false;  }  Keymap keymap=keymapManager.getActiveKeymap();  if (keymap == null) {    return false;  }  int button=e.getButton();  int modifiers=e.getModifiersEx();  if (button == MouseEvent.NOBUTTON && e.getID() == MouseEvent.MOUSE_DRAGGED) {    if ((modifiers & InputEvent.BUTTON1_DOWN_MASK) != 0) {      button=MouseEvent.BUTTON1;    } else     if ((modifiers & InputEvent.BUTTON2_DOWN_MASK) != 0) {      button=MouseEvent.BUTTON2;    }  }  String[] actionIds=keymap.getActionIds(new MouseShortcut(button,modifiers,1));  if (actionIds == null) {    return false;  }  for (  String id : actionIds) {    if (actionId.equals(id)) {      return true;    }  }  return false;}  }
class C{  public static void main(String[] args){  runFilter(new NumericToNominal(),args);}  }
class C{  public int deleteLog(){  if (getKeepLogDays() < 1)   return 0;  String sql="DELETE AD_AlertProcessorLog " + "WHERE AD_AlertProcessor_ID=" + getAD_AlertProcessor_ID() + " AND (Created+"+ getKeepLogDays()+ ") < SysDate";  int no=DB.executeUpdate(sql,get_TrxName());  return no;}  }
class C{  public URIReferenceException(String message,Throwable cause,URIReference uriReference){  this(message,cause);  if (uriReference == null) {    throw new NullPointerException("uriReference cannot be null");  }  this.uriReference=uriReference;}  }
class C{  protected List<P> internalFilterInterceptors(Class<P> type,List<? extends BaseInterceptor> listIn){  if (listIn == null) {    return Collections.emptyList();  } else {    CopyOnWriteArrayList<P> listOut=new CopyOnWriteArrayList<>();    for (    BaseInterceptor<?> in : listIn) {      if (type.isInstance(in)) {        listOut.add((P)in);      }    }    return listOut;  }}  }
class C{  @Uninterruptible public static void takeTimerSample(int whereFrom,Address yieldpointServiceMethodFP){  Controller.controllerClock++;  Address ypTakenInFP=Magic.getCallerFramePointer(yieldpointServiceMethodFP);  int ypTakenInCMID=Magic.getCompiledMethodID(ypTakenInFP);  Address ypTakenInCallerFP=Magic.getCallerFramePointer(ypTakenInFP);  int ypTakenInCallerCMID=Magic.getCompiledMethodID(ypTakenInCallerFP);  CompiledMethod ypTakenInCM=CompiledMethods.getCompiledMethod(ypTakenInCMID);  if (ypTakenInCallerCMID == StackFrameLayout.getInvisibleMethodID() || ypTakenInCM.getMethod().getDeclaringClass().hasBridgeFromNativeAnnotation()) {    ypTakenInCallerCMID=-1;  }  for (  NullListener aNl : timerNullListeners) {    if (aNl.isActive()) {      aNl.update(whereFrom);    }  }  for (  MethodListener aMl : timerMethodListeners) {    if (aMl.isActive()) {      aMl.update(ypTakenInCMID,ypTakenInCallerCMID,whereFrom);    }  }  if (ypTakenInCallerCMID != -1) {    for (    ContextListener aCl : timerContextListeners) {      if (aCl.isActive()) {        aCl.update(ypTakenInFP,whereFrom);      }    }  }}  }
class C{  public File tmpDir(){  String random=String.valueOf(RANDOM.nextLong());  File dir=tmpFile("dir" + random);  assureDirExists(dir);  return dir;}  }
class C{  void associateLedger(BufferLedger ledger){  assertOpen();  if (DEBUG) {synchronized (DEBUG_LOCK) {      childLedgers.put(ledger,null);    }  }}  }
class C{  private void bindAuthenticationProvider(Class<? extends AuthenticationProvider> authenticationProvider){  logger.debug("[{}] Binding AuthenticationProvider \"{}\".",boundAuthenticationProviders.size(),authenticationProvider.getName());  boundAuthenticationProviders.add(new AuthenticationProviderFacade(authenticationProvider));}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 3) {    System.out.println("Usage: Java Exercise_12_16 file oldString newString");    System.exit(1);  }  File file=new File(args[0]);  if (!file.exists()) {    System.out.println("File " + args[0] + " does not exist");    System.exit(2);  }  ArrayList<String> list=new ArrayList<>();  try (Scanner input=new Scanner(file)){    while (input.hasNext()) {      String s1=input.nextLine();      list.add(s1.replaceAll(args[1],args[2]));    }  }   try (PrintWriter output=new PrintWriter(file)){    for (int i=0; i < list.size(); i++) {      output.println(list.get(i));    }  } }  }
class C{  public void classLoaderInit(DynamicClassLoader env){}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isDisplayed(){  Object oo=get_Value(COLUMNNAME_IsDisplayed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void closePeriod() throws AdeException {  writePeriod();  m_inPeriod=false;}  }
class C{  public JPanel generateContentPanelSystem(String title,String[][] content,String help_title,String help_link,String icon){  JPanel panelContent=new JPanel(new BorderLayout());  JPanel header=new JPanel();  ImageIcon icon_image=generateIcon(icon);  header.add(new JLabel(title,icon_image,JLabel.CENTER)).setForeground(Color.WHITE);  header.setBackground(Color.decode("#5C6B84"));  panelContent.setBorder(BorderFactory.createLineBorder(Color.BLACK));  JPanel container=new JPanel();  container.setLayout(new BoxLayout(container,BoxLayout.Y_AXIS));  if (!(help_title.equals("") && help_link.equals(""))) {    container.add(new URLLabel(help_title,help_link));    container.add(new JLabel("   "));  }  String[] titles={"Object","Data"};  JTable table=new JTable(content,titles);  container.add(table);  container.setBackground(Color.decode("#FFFFFF"));  JScrollPane data=new JScrollPane(container);  data.setViewportView(table);  panelContent.add(header,BorderLayout.NORTH);  panelContent.add(data,BorderLayout.CENTER);  data.getViewport().setBackground(Color.WHITE);  return panelContent;}  }
class C{  public static double[][] appendColumns(double[][] matrix1,double[][] matrix2) throws Exception {  double[][] data=new double[matrix1.length][];  if (matrix1.length != matrix2.length) {    throw new Exception("matrix1 and matrix2 have different lengths");  }  if (matrix1.length == 0) {    return data;  }  for (int r=0; r < matrix1.length; r++) {    data[r]=append(matrix1[r],matrix2[r]);  }  return data;}  }
class C{  private Pair<long[],ArrayModifiableDBIDs> findParent(Relation<V> relation,Pair<long[],ArrayModifiableDBIDs> child,TCustomHashMap<long[],List<ArrayModifiableDBIDs>> clustersMap){  NumberVector child_centroid=ProjectedCentroid.make(child.first,relation,child.second);  Pair<long[],ArrayModifiableDBIDs> result=null;  int resultCardinality=-1;  long[] childPV=child.first;  int childCardinality=BitsUtil.cardinality(childPV);  for (  long[] parentPV : clustersMap.keySet()) {    int parentCardinality=BitsUtil.cardinality(parentPV);    if (parentCardinality >= childCardinality) {      continue;    }    if (resultCardinality != -1 && parentCardinality <= resultCardinality) {      continue;    }    long[] pv=BitsUtil.andCMin(childPV,parentPV);    if (pv.equals(parentPV)) {      List<ArrayModifiableDBIDs> parentList=clustersMap.get(parentPV);      for (      ArrayModifiableDBIDs parent : parentList) {        NumberVector parent_centroid=ProjectedCentroid.make(parentPV,relation,parent);        double d=weightedDistance(child_centroid,parent_centroid,parentPV);        if (d <= 2 * epsilon) {          result=new Pair<>(parentPV,parent);          resultCardinality=parentCardinality;          break;        }      }    }  }  return result;}  }
class C{  public void clear(){  table=new Entry[initialCapacity];  count=0;}  }
class C{  public static double versvn2combinedVersion(final double version,final int svn){  return (Math.rint((version * 100000000.0) + (svn)) / 100000000);}  }
class C{  public static void keytool(String cmd){  log.info("keytool " + cmd);  ArrayList<String> list=new ArrayList<String>();  StringTokenizer st=new StringTokenizer(cmd," ");  String quoteBuffer=null;  while (st.hasMoreTokens()) {    String token=st.nextToken();    if (quoteBuffer == null) {      if (token.startsWith("\""))       quoteBuffer=token.substring(1); else       list.add(token);    } else     quoteBuffer+=" " + token;    if (token.endsWith("\"")) {      String str=quoteBuffer.substring(0,quoteBuffer.length() - 1);      list.add(str);      quoteBuffer=null;    }  }  String[] args=new String[list.size()];  list.toArray(args);  try {    KeyTool.main(args);  } catch (  Exception e) {  }}  }
class C{  protected Section renameSection(final Section section,final String name) throws CouldntSaveDataException {  Preconditions.checkNotNull(section,"Error: section argument can not be null");  Preconditions.checkNotNull(name,"Error: name argument can not be null");  provider.setSectionName(module.getConfiguration().getId(),section.getId(),name);  return new Section(section.getId(),name,CommentManager.get(provider),module,section.getStartAddress(),section.getEndAddress(),section.getSectionPermission(),section.getData());}  }
class C{  public void free(){  CompilerDirectives.transferToInterpreterAndInvalidate();  if (isFreed) {    throw new AssertionError("already freed");  }  UNSAFE.freeMemory(lowerBounds);  lowerBounds=0;  upperBounds=0;  isFreed=true;}  }
class C{  public StorageUnitEntity createStorageUnitEntity(String storageName,BusinessObjectDataKey businessObjectDataKey,Boolean businessObjectDataLatestVersion,String businessObjectDataStatusCode,String storageUnitStatus,String storageDirectoryPath){  return createStorageUnitEntity(storageName,StoragePlatformEntity.S3,businessObjectDataKey,businessObjectDataLatestVersion,businessObjectDataStatusCode,storageUnitStatus,storageDirectoryPath);}  }
class C{  public static SecretKeys keys(String keysStr) throws InvalidKeyException {  String[] keysArr=keysStr.split(":");  if (keysArr.length != 2) {    throw new IllegalArgumentException("Cannot parse aesKey:hmacKey");  } else {    byte[] confidentialityKey=Base64.decode(keysArr[0],BASE64_FLAGS);    if (confidentialityKey.length != AES_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + AES_KEY_LENGTH_BITS + " bytes");    }    byte[] integrityKey=Base64.decode(keysArr[1],BASE64_FLAGS);    if (integrityKey.length != HMAC_KEY_LENGTH_BITS / 8) {      throw new InvalidKeyException("Base64 decoded key is not " + HMAC_KEY_LENGTH_BITS + " bytes");    }    return new SecretKeys(new SecretKeySpec(confidentialityKey,0,confidentialityKey.length,CIPHER),new SecretKeySpec(integrityKey,HMAC_ALGORITHM));  }}  }
class C{  public boolean isLigature(){  return (glyphType & 0x3) == LIGATURE;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void geneRecombine(MersenneTwisterFast srt,GEPChromosome chromosome1,GEPChromosome chromosome2){  int genome1[][]=chromosome1.genome;  int genome2[][]=chromosome2.genome;  int gene_index=srt.nextInt(genome1.length);  int temp[]=genome1[gene_index];  genome1[gene_index]=genome2[gene_index];  genome2[gene_index]=temp;}  }
class C{  private Set<AnnotationMirror> findSmallestTypes(Set<AnnotationMirror> inset){  Set<AnnotationMirror> outset=AnnotationUtils.createAnnotationSet();  outset.addAll(inset);  for (  AnnotationMirror a1 : inset) {    Iterator<AnnotationMirror> outit=outset.iterator();    while (outit.hasNext()) {      AnnotationMirror a2=outit.next();      if (a1 != a2 && isSubtype(a1,a2)) {        outit.remove();      }    }  }  return outset;}  }
class C{  private static WebDoc createPage(WWindowStatus ws){  WebDoc doc=WebDoc.createWindow(ws.mWindow.getName());  doc.getBody().addElement(new script("deleteText='" + Msg.getMsg(ws.ctx,"DeleteRecord?") + "';"));  return doc;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  DeletePrevWordAction(){  super(deletePrevWordAction);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:02.098 -0500",hash_original_method="60E8CE9FCECD3622E03D9910A9625801",hash_generated_method="C77D2550DD3D2C9672729BA276F9DDD6") public boolean hasPort(){  return (getSentBy()).hasPort();}  }
class C{  private void addElementNameEvidenceElementToOverrideTarget(ProcessRemarkService prs,ProcessRemark pr){  EvidenceElement ee=prs.getEvidenceElement(ProcessRemarkService.DEFAULT_EVIDENCE,ELEMENT_NAME_VALUE_KEY);  pr.addElement(ee);}  }
class C{  @PostConstruct public void init(){  if (!_isSkipInit) {    initImpl();  }}  }
class C{  private static void testExceptions() throws Exception {  try (FileChannel fc=FileChannel.open(blah.toPath(),READ)){    testExceptions(fc);    checkException(fc,MapMode.READ_WRITE,0L,fc.size(),NonWritableChannelException.class);    checkException(fc,MapMode.READ_WRITE,-1L,fc.size(),NonWritableChannelException.class,IllegalArgumentException.class);    checkException(fc,MapMode.READ_WRITE,0L,-1L,NonWritableChannelException.class,IllegalArgumentException.class);    checkException(fc,MapMode.PRIVATE,0L,fc.size(),NonWritableChannelException.class);    checkException(fc,MapMode.PRIVATE,-1L,fc.size(),NonWritableChannelException.class,IllegalArgumentException.class);    checkException(fc,MapMode.PRIVATE,0L,-1L,NonWritableChannelException.class,IllegalArgumentException.class);  }   try (FileChannel fc=FileChannel.open(blah.toPath(),WRITE)){    testExceptions(fc);    checkException(fc,MapMode.READ_ONLY,0L,fc.size(),NonReadableChannelException.class);    checkException(fc,MapMode.READ_ONLY,-1L,fc.size(),NonReadableChannelException.class,IllegalArgumentException.class);  }   try (FileChannel fc=FileChannel.open(blah.toPath(),READ,WRITE)){    testExceptions(fc);  } }  }
class C{  public String toString(){  String retValue=name;  if (description != null && description.length() > 0)   retValue+=" (" + description + ")";  return retValue;}  }
class C{  public void addFilters(List<FilterNode> list){  if (filters == null)   filters=list; else   filters.addAll(list);}  }
class C{  public static void close(@Nullable SelectionKey rsrc,@Nullable IgniteLogger log){  if (rsrc != null)   close(rsrc.channel(),log);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:19.920 -0500",hash_original_method="492C8BC9ACE864159B4ED5D85649FE7D",hash_generated_method="EEAA5DD329489A39C31FC59FF3F1E428") public X509Name(Vector oids,Vector values,X509NameEntryConverter converter){  this.converter=converter;  if (oids.size() != values.size()) {    throw new IllegalArgumentException("oids vector must be same length as values.");  }  for (int i=0; i < oids.size(); i++) {    this.ordering.addElement(oids.elementAt(i));    this.values.addElement(values.elementAt(i));    this.added.addElement(FALSE);  }}  }
class C{  public void onCancelled(IgniteUuid sesId){  assert sesId != null;  lock.readLock();  try {    if (stopping && !waiting) {      U.warn(log,"Attempt to cancel task while stopping grid (will ignore): " + sesId);      return;    }    GridTaskWorker<?,?> task=tasks.get(sesId);    if (task == null) {      if (log.isDebugEnabled())       log.debug("Attempt to cancel unknown task (was task already reduced?): " + sesId);      return;    }    task.finishTask(null,new ComputeTaskCancelledCheckedException("Task was cancelled."),true);  }  finally {    lock.readUnlock();  }}  }
class C{  public synchronized void remove(UndoStackTrigger pt){  if (triggers == null) {    return;  }  triggers.remove(pt);}  }
class C{  private int xScale(int x){  return doScale(x,m_localGraphicsState.getXScale());}  }
class C{  public int hashCode(){  return this.address.getHostPort().encode().toLowerCase().hashCode();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public TelURLImpl telURL(boolean inBrackets) throws ParseException {  lexer.match(TokenTypes.TEL);  lexer.match(':');  TelephoneNumber tn=this.parseTelephoneNumber(inBrackets);  TelURLImpl telUrl=new TelURLImpl();  telUrl.setTelephoneNumber(tn);  return telUrl;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:51.799 -0500",hash_original_method="5A630DC8DA41E048830D803B657E049B",hash_generated_method="5A630DC8DA41E048830D803B657E049B") void closeSocket(){  try {    mSocket.close();  } catch (  IOException ex) {    Log.e(TAG,"Exception while closing command " + "socket in parent",ex);  }}  }
class C{  private void printCurrentValues(Database conn,Table table,long row,int range) throws SQLException {  String query=null;  if (methodPk) {    Key pk=table.getPrimaryKey();    if (pk.getColumns().size() < 1) {      fatal(ConsistencyCheck.Method.MD5PK + " method works on tables with primary keys only: " + schema+ "."+ table.getName(),null);    } else     if (pk.getColumns().size() > 1) {      fatal(ConsistencyCheck.Method.MD5PK + " method doesn't support tables with composite primary keys: " + schema+ "."+ table.getName(),null);    } else {      String pkName=pk.getColumns().get(0).getName();      query=String.format("SELECT * FROM %s.%s WHERE %s >= %d AND %s < %d",schema,table.getName(),pkName,row,pkName,row + range);    }  } else {    query=String.format("SELECT * FROM %s.%s LIMIT %d,%d",schema,table.getName(),row,range);  }  Statement st=null;  ResultSet rs=null;  try {    st=conn.createStatement();    rs=st.executeQuery(query);    ResultSetMetaData metaData=rs.getMetaData();    int columnCount=metaData.getColumnCount();    while (rs.next()) {      for (int col=1; col <= columnCount; col++) {        print(rs.getObject(col) + "\t");      }      println("");    }  }  finally {    if (rs != null) {      try {        rs.close();      } catch (      SQLException e) {      }    }    if (st != null) {      try {        st.close();      } catch (      SQLException e) {      }    }  }}  }
class C{  public void addSubInterfaceNoBidirectionalUpdate(InterfaceType type){  if (null == subInterfaces) {    subInterfaces=new TypeSet<InterfaceType>();  }  subInterfaces.addOrUpdate(type);}  }
class C{  public void useLegend(boolean b){  legendOn=b;}  }
class C{  protected WalkingIterator createIteratorFromSteps(final WalkingIterator wi,int numSteps){  WalkingIterator newIter=new WalkingIterator(wi.getPrefixResolver());  try {    AxesWalker walker=(AxesWalker)wi.getFirstWalker().clone();    newIter.setFirstWalker(walker);    walker.setLocPathIterator(newIter);    for (int i=1; i < numSteps; i++) {      AxesWalker next=(AxesWalker)walker.getNextWalker().clone();      walker.setNextWalker(next);      next.setLocPathIterator(newIter);      walker=next;    }    walker.setNextWalker(null);  } catch (  CloneNotSupportedException cnse) {    throw new WrappedRuntimeException(cnse);  }  return newIter;}  }
class C{  @Override public MinguoDate dateYearDay(Era era,int yearOfEra,int dayOfYear){  return dateYearDay(prolepticYear(era,yearOfEra),dayOfYear);}  }
class C{  public static int hash32(final byte[] data,int length){  return hash32(data,length,0x9747b28c);}  }
class C{  public boolean startsWith(String prefix){  return m_str.startsWith(prefix);}  }
class C{  public static long sizeOfDirectory(File directory){  checkDirectory(directory);  final File[] files=directory.listFiles();  if (files == null) {    return 0L;  }  long size=0;  for (  final File file : files) {    size+=sizeOf(file);    if (size < 0) {      break;    }  }  return size;}  }
class C{  private boolean isUndeclared(ElementKey<?,?> key){  return (metadata == null) || !metadata.isDeclared(key);}  }
class C{  public static JFileChooser userFileChooser(String filter,String suffix1,String suffix2){  JFileChooser fc=new JFileChooser(FileUtil.getUserFilesPath());  NoArchiveFileFilter filt=new NoArchiveFileFilter(filter);  if (suffix1 != null) {    filt.addExtension(suffix1);  }  if (suffix2 != null) {    filt.addExtension(suffix2);  }  fc.setFileFilter(filt);  return fc;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void shiftLeft(int bits){  if (bits != 0) {    if (bits < 64) {      hi8<<=bits;      hi8|=(lo8 >>> (64 - bits));      lo8<<=bits;    } else     if (bits < 128) {      hi8=lo8 << (bits - 64);      lo8=0;    } else {      hi8=0;      lo8=0;    }  }}  }
class C{  public static String experimenterToString(OFInstructionExperimenter inst,Logger log){  return Long.toString(inst.getExperimenter());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public SelectItem(Object value){  this(value,value == null ? null : value.toString(),null,false,true,false);}  }
class C{  public boolean isConstant(){  return constant;}  }
class C{  public void actionPerformed(ActionEvent e){  super.actionPerformed(e);  String cmd=e.getActionCommand();  if (cmd == showMapsCommand) {    JCheckBox mapCheck=(JCheckBox)e.getSource();    viewAttributes.showMaps=mapCheck.isSelected();    repaint();  } else   if (cmd == showInfoCommand) {    JCheckBox infoCheck=(JCheckBox)e.getSource();    boolean showInfo=infoCheck.isSelected();    viewAttributes.showInfo=showInfo;    showSubframes(showInfo);    doPrepare();  } else   if (cmd == lockSeriesCommand) {    JCheckBox lockCheck=(JCheckBox)e.getSource();    boolean locked=lockCheck.isSelected();    if (locked) {      List<RpfCoverageBox> coverageBoxes=getCoverageBoxes();      String seriesName;      if (coverageBoxes == null || coverageBoxes.isEmpty()) {        seriesName=RpfViewAttributes.ANY;      } else {        seriesName=coverageBoxes.get(0).chartCode;      }      if (seriesName == null) {        seriesName=RpfViewAttributes.ANY;        fireRequestMessage("The " + getName() + " Layer is having trouble determining what kind\nof charts are being displayed.  Can't establish lock for charts\ncurrently being viewed.");      }      lockCheck.setText(lockedButtonTitle + " - " + seriesName);      viewAttributes.chartSeries=seriesName;    } else {      lockCheck.setText(unlockedButtonTitle);      viewAttributes.chartSeries=RpfViewAttributes.ANY;    }  } else   if (cmd == showCoverageCommand) {    if (coverage != null) {      JCheckBox coverageCheck=(JCheckBox)e.getSource();      coverage.setInUse(coverageCheck.isSelected());      doPrepare();    }  } else {    doPrepare();  }}  }
class C{  protected void validateState(State current){  checkNotNull(current.taskInfo,"taskInfo cannot be null");  checkNotNull(current.taskInfo.stage,"stage cannot be null");  checkNotNull(current.queryPollDelay,"queryPollDelay cannot be null");  checkState(current.queryPollDelay > 0,"queryPollDelay needs to be >= 0");  checkState(current.documentExpirationTimeMicros > 0,"documentExpirationTimeMicros needs to be greater than 0");  if (current.finishedCopies != null) {    checkState(current.finishedCopies >= 0,"finishedCopies needs to be >= 0");  }  if (current.failedOrCanceledCopies != null) {    checkState(current.failedOrCanceledCopies >= 0,"failedOrCanceledCopies needs to be >= 0");  }  if (current.dataStoreCount != null) {    checkState(current.dataStoreCount >= 0,"dataStoreCount needs to be >= 0");  }switch (current.taskInfo.stage) {case STARTED:    checkState(current.taskInfo.subStage != null,"subStage cannot be null");  checkArgument(StringUtils.isNotBlank(current.image),"image not provided");checkArgument(StringUtils.isNotBlank(current.datastore),"datastore not provided");switch (current.taskInfo.subStage) {case TRIGGER_COPIES:break;case AWAIT_COMPLETION:checkArgument(current.dataStoreCount != null,"dataStoreCount not provided");break;default :checkState(false,"unsupported sub-state: " + current.taskInfo.subStage.toString());}break;case FAILED:case FINISHED:case CANCELLED:checkState(current.taskInfo.subStage == null,"Invalid stage update. subStage must be null");break;default :checkState(false,"cannot process patches in state: " + current.taskInfo.stage.toString());}}  }
class C{  public final void testGetMGFParameters02(){  PSSParameterSpec pssps=new PSSParameterSpec("SHA-1","MGF1",null,20,1);  assertNull(pssps.getMGFParameters());}  }
class C{  protected void processAttribute(java.io.Writer writer,String name,String value,ElemDesc elemDesc) throws IOException {  writer.write(' ');  if (((value.length() == 0) || value.equalsIgnoreCase(name)) && elemDesc != null && elemDesc.isAttrFlagSet(name,ElemDesc.ATTREMPTY)) {    writer.write(name);  } else {    writer.write(name);    writer.write("=\"");    if (elemDesc != null && elemDesc.isAttrFlagSet(name,ElemDesc.ATTRURL))     writeAttrURI(writer,value,m_specialEscapeURLs); else     writeAttrString(writer,value,this.getEncoding());    writer.write('"');  }}  }
class C{  private TimerQueue timerQueue(){  return TimerQueue.sharedInstance();}  }
class C{  public boolean shouldOverrideUrlLoading(String url){  ResultTransport<Boolean> res=new ResultTransport<Boolean>(false);  Message msg=obtainMessage(OVERRIDE_URL);  msg.getData().putString("url",url);  msg.obj=res;  sendMessageToUiThreadSync(msg);  return res.getResult().booleanValue();}  }
class C{  private static String subProcess(int[] n1,int[] n2){  if (n1.length < n2.length) {    return "+" + toString(n1);  }  int off=0;  int length=n2.length;  while (compareTo(n2,0,length,n1,off) > 0) {    n2=expand(n2);    length=n2.length;    if (length > n1.length) {      return "+" + toString(n1);    }  }  int[] innerSum=new int[n1.length + 1];  int[] result=new int[length];  int start;  if (n2[0] == 0) {    start=9;  } else {    start=n1[0] / n2[0];  }  multiply(n2,start,innerSum);  innerSum=reduce(innerSum);  if (innerSum.length < n2.length) {    innerSum=expand(innerSum);  } else {    while (n2.length < innerSum.length) {      start--;      innerSum=new int[n1.length + 1];      multiply(n2,start,innerSum);      innerSum=reduce(innerSum);    }  }  boolean subtractDown=compareTo(innerSum,n1,innerSum.length) > 0;  while (true) {    if (subtractDown) {      start--;      subtract(innerSum,n2,result,subProcessSign);      assign(innerSum,result);      subtractDown=compareTo(innerSum,n1,innerSum.length) > 0;    } else {      int[] newTop=new int[innerSum.length];      extract(newTop,0,n1,0,innerSum.length);      result=new int[innerSum.length];      subtract(newTop,innerSum,result,subProcessSign);      extract(n1,0,result,0,result.length);      int[] normalized_n1=reduce(n1);      int[] normalized_n2=reduce(n2);      String s=start + subProcess(normalized_n1,normalized_n2);      return s;    }  }}  }
class C{  public Boolean isD6On(){  return this.isDigitalOn(6);}  }
class C{  public void pause(){  pause=true;}  }
class C{  protected SwitchStatementImpl(){  super();}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildHideoutArea(zone);}  }
class C{  public void beginDrawing(GL10 gl,float viewWidth,float viewHeight){  checkState(STATE_INITIALIZED,STATE_DRAWING);  gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureID);  gl.glShadeModel(GL10.GL_FLAT);  gl.glEnable(GL10.GL_BLEND);  gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);  gl.glColor4x(0x10000,0x10000,0x10000,0x10000);  gl.glMatrixMode(GL10.GL_PROJECTION);  gl.glPushMatrix();  gl.glLoadIdentity();  gl.glOrthof(0.0f,viewWidth,0.0f,viewHeight,0.0f,1.0f);  gl.glMatrixMode(GL10.GL_MODELVIEW);  gl.glPushMatrix();  gl.glLoadIdentity();  gl.glTranslatef(0.375f,0.375f,0.0f);}  }
class C{  public final boolean owns(ConditionObject condition){  return condition.isOwnedBy(this);}  }
class C{  public boolean isOrientationHittable(){  return orientationHittable;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.766 -0400",hash_original_method="ACDB1E0F1106ED25DED903F3FAD064F0",hash_generated_method="37718B6F2173319DE5385DB52AC5C5D2") public PrefixFileFilter(List<String> prefixes,IOCase caseSensitivity){  if (prefixes == null) {    throw new IllegalArgumentException("The list of prefixes must not be null");  }  this.prefixes=prefixes.toArray(new String[prefixes.size()]);  this.caseSensitivity=caseSensitivity == null ? IOCase.SENSITIVE : caseSensitivity;}  }
class C{  public LabeledOMPoly(double latPoint,double lonPoint,int[] xypoints,int cMode){  super(latPoint,lonPoint,xypoints,cMode);}  }
class C{  public static List<ReutersDocument> extractFile(InputStream sgmFile,URI uri) throws IOException, ParseException {  BufferedReader reader=new BufferedReader(new InputStreamReader(sgmFile,StandardCharsets.ISO_8859_1));  List<ReutersDocument> entries=new ArrayList<>();  StringBuilder docBuffer=new StringBuilder(1024);  String line;  while ((line=reader.readLine()) != null) {    if (!line.contains("</REUTERS")) {      docBuffer.append(line).append(' ');    } else {      ReutersDocument reutersDocument=new ReutersDocument();      Matcher matcher=EXTRACTION_PATTERN.matcher(docBuffer);      while (matcher.find()) {        for (int i=1; i <= matcher.groupCount(); i+=2) {          if (matcher.group(i) != null) {            String tag=matcher.group(i).trim();            String value=matcher.group(i + 1).trim();            for (int j=0; j < META_CHARS_SERIALIZATIONS.length; j++) {              value=value.replaceAll(META_CHARS_SERIALIZATIONS[j],META_CHARS[j]);            }            if (NESTED_TAGS.contains(tag)) {              extractNested(reutersDocument,tag,value);            } else {              reutersDocument.set(tag,value);            }          }        }      }      reutersDocument.setPath(uri);      entries.add(reutersDocument);      docBuffer.setLength(0);    }  }  return entries;}  }
class C{  public void notifyTimeout(XNetMessage msg){}  }
class C{  public static Angle limitPitch(Angle angle,ViewPropertyLimits viewLimits){  if (angle == null) {    String message=Logging.getMessage("nullValue.AngleIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (viewLimits == null) {    String message=Logging.getMessage("nullValue.ViewLimitsIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Angle[] limits=viewLimits.getPitchLimits();  Angle newAngle=angle;  if (angle.compareTo(limits[0]) < 0) {    newAngle=limits[0];  } else   if (angle.compareTo(limits[1]) > 0) {    newAngle=limits[1];  }  return newAngle;}  }
class C{  public float hyperbolicTf(float freq){  if (0.0f == freq)   return 0.0f;  final float min=tf_hyper_min;  final float max=tf_hyper_max;  final double base=tf_hyper_base;  final float xoffset=tf_hyper_xoffset;  final double x=(double)(freq - xoffset);  final float result=min + (float)((max - min) / 2.0f * (((Math.pow(base,x) - Math.pow(base,-x)) / (Math.pow(base,x) + Math.pow(base,-x))) + 1.0d));  return Float.isNaN(result) ? max : result;}  }
class C{  private static boolean hasParentNodeType(@NotNull ASTNode node,@NotNull IElementType parentNodeType){  while (node != null) {    IElementType currentType=node.getElementType();    if (currentType == parentNodeType) {      return true;    }    node=node.getTreeParent();  }  return false;}  }
class C{  public Query createBooleanQuery(String field,String queryText,BooleanClause.Occur operator){  if (operator != BooleanClause.Occur.SHOULD && operator != BooleanClause.Occur.MUST) {    throw new IllegalArgumentException("invalid operator: only SHOULD or MUST are allowed");  }  return createFieldQuery(analyzer,operator,field,queryText,false,0);}  }
class C{  @POST @Path("/{id}/deactivate") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) public TaskResourceRep deleteNetworkSystem(@PathParam("id") URI id) throws DatabaseException {  NetworkSystem system=queryObject(NetworkSystem.class,id,true);  ArgValidator.checkEntity(system,id,isIdEmbeddedInURL(id));  if (!RegistrationStatus.UNREGISTERED.toString().equals(system.getRegistrationStatus())) {    throw APIException.badRequests.invalidParameterCannotDeactivateRegisteredNetworkSystem(system.getId());  }  if (DiscoveredDataObject.DataCollectionJobStatus.IN_PROGRESS.toString().equals(system.getDiscoveryStatus()) || DiscoveredDataObject.DataCollectionJobStatus.SCHEDULED.toString().equals(system.getDiscoveryStatus())) {    throw APIException.serviceUnavailable.cannotDeactivateStorageSystemWhileInDiscover(system.getId());  }  List<Network> networkList=CustomQueryUtility.queryActiveResourcesByConstraint(_dbClient,Network.class,AlternateIdConstraint.Factory.getConstraint(Network.class,"networkSystems",system.getId().toString()));  for (  Network network : networkList) {    if (network != null && network.getInactive() != true && network.getConnectedVirtualArrays() != null && !network.getConnectedVirtualArrays().isEmpty() && (network.getNetworkSystems() != null && network.getNetworkSystems().contains(system.getId().toString()) && network.getNetworkSystems().size() == 1)) {      throw APIException.badRequests.invalidParameterNetworkMustBeUnassignedFromVirtualArray(network.getLabel(),system.getLabel());    }  }  Map<String,List<FCZoneReference>> zonesMap=getNetworkSystemZoneRefs(system);  List<URI> nsystems=null;  List<FCZoneReference> zones=null;  for (  Network network : networkList) {    nsystems=StringSetUtil.stringSetToUriList(network.getNetworkSystems());    nsystems.remove(system.getId());    if (nsystems.isEmpty()) {      List<StoragePort> netPorts=NetworkAssociationHelper.getNetworkStoragePorts(network.getId().toString(),null,_dbClient);      NetworkAssociationHelper.clearPortAssociations(netPorts,_dbClient);    } else {      URI nsUri=nsystems.get(0);      zones=zonesMap.get(network.getNativeId());      if (zones != null) {        for (        FCZoneReference zone : zones) {          zone.setNetworkSystemUri(nsUri);        }        _dbClient.persistObject(zones);      }    }  }  String taskId=UUID.randomUUID().toString();  Operation op=_dbClient.createTaskOpStatus(NetworkSystem.class,system.getId(),taskId,ResourceOperationTypeEnum.DELETE_NETWORK_SYSTEM);  PurgeRunnable.executePurging(_dbClient,_dbPurger,_asynchJobService.getExecutorService(),system,_retry_attempts,taskId,60);  auditOp(OperationTypeEnum.DELETE_NETWORK_SYSTEM,true,AuditLogManager.AUDITOP_BEGIN,system.getId().toString(),system.getLabel(),system.getPortNumber(),system.getUsername(),system.getSmisProviderIP(),system.getSmisPortNumber(),system.getSmisUserName(),system.getSmisUseSSL(),system.getVersion(),system.getUptime());  return toTask(system,taskId,op);}  }
class C{  public void addBitmapToCache(String data,BitmapDrawable value){  if (data == null || value == null) {    return;  }  if (mMemoryCache != null) {    if (RecyclingBitmapDrawable.class.isInstance(value)) {      ((RecyclingBitmapDrawable)value).setIsCached(true);    }    mMemoryCache.put(data,value);  }}  }
class C{  public ScrollBarButtonsTogetherState(){  super("ButtonsTogether");}  }
class C{  public void textAlign(int align){  g.textAlign(align);}  }
class C{  private Class readPrimitive(String target) throws Exception {  if (target.equals(BYTE)) {    return byte.class;  }  if (target.equals(SHORT)) {    return short.class;  }  if (target.equals(INTEGER)) {    return int.class;  }  if (target.equals(LONG)) {    return long.class;  }  if (target.equals(CHARACTER)) {    return char.class;  }  if (target.equals(FLOAT)) {    return float.class;  }  if (target.equals(DOUBLE)) {    return double.class;  }  if (target.equals(BOOLEAN)) {    return boolean.class;  }  if (target.equals(VOID)) {    return void.class;  }  return null;}  }
class C{  protected void processEndPng(){}  }
class C{  @Override protected void afterTestsStopped() throws Exception {  U.delete(getDeployDir());}  }
class C{  @Override public void performAdditionalDomainRestoreLogic(DomainResource domainResource,String clientId,DateTime asOfDate,EppInput eppInput,HistoryEntry historyEntry) throws EppException {  messageToThrow="restored";}  }
class C{  public ApprovalDialog(){  super();}  }
class C{  public static void register(Class<? extends ResourceResolverSpi> className,boolean start){  JavaUtils.checkRegisterPermission();  try {    ResourceResolverSpi resourceResolverSpi=className.newInstance();    register(resourceResolverSpi,start);  } catch (  IllegalAccessException e) {    log.log(java.util.logging.Level.WARNING,"Error loading resolver " + className + " disabling it");  }catch (  InstantiationException e) {    log.log(java.util.logging.Level.WARNING,"Error loading resolver " + className + " disabling it");  }}  }
class C{  public void startDownloadRepeat(final String hostname,final String uri,final int repeatWindow,final int reportPeriodMillis,final IRepeatListener repeatListener){  startDownloadRepeat(hostname,SpeedTestConst.HTTP_DEFAULT_PORT,uri,repeatWindow,reportPeriodMillis,repeatListener);}  }
class C{  public synchronized TemporalOMGraphicList createData(EventLayer callback){  TemporalOMGraphicList list=new TemporalOMGraphicList();  Hashtable<String,TemporalOMGraphic> library=new Hashtable<String,TemporalOMGraphic>();  Hashtable<String,ImageIcon> iconLibrary=new Hashtable<String,ImageIcon>();  DataBounds dataBounds=callback.getDataBounds();  TimeBounds timeBounds=new TimeBounds();  if (locationFile != null && nameIndex != -1) {    logger.fine("Reading location file...");    try {      CSVFile locations=new CSVFile(locationFile);      locations.loadData();      Iterator<Vector<Object>> records=locations.iterator();      while (records.hasNext()) {        String name=null;        String iconName=null;        ImageIcon icon=null;        Vector<?> record=records.next();        if (record.isEmpty()) {          continue;        }        name=(String)record.elementAt(nameIndex);        if (iconIndex != -1) {          iconName=(String)record.elementAt(iconIndex);          icon=iconLibrary.get(iconName);          if (icon == null) {            URL icURL=PropUtils.getResourceOrFileOrURL(iconName);            if (icURL != null) {              icon=new ImageIcon(icURL);              if (icon != null) {                iconLibrary.put(iconName,icon);              }            }          }        }        if (name != null) {          TemporalOMGraphic location;          if (icon == null) {            location=new TemporalOMPoint(name,OMGraphic.RENDERTYPE_LATLON,true);          } else {            location=new TemporalOMScalingIcon(name,OMGraphic.RENDERTYPE_LATLON,true,icon,4000000);          }          drawingAttributes.setTo(location);          library.put(name.intern(),location);          list.add(location);        } else {          logger.warning("no name to use to create location: " + name);        }      }    } catch (    MalformedURLException murle) {      logger.warning("problem finding the location file: " + locationFile);      return list;    }catch (    ArrayIndexOutOfBoundsException aioobe) {      logger.warning("problem with parsing location file: " + locationFile);      if (logger.isLoggable(Level.FINE)) {        logger.fine("The problem is with one of the indexes into the file: \n" + aioobe.getMessage());        aioobe.printStackTrace();      }    }catch (    NullPointerException npe) {      logger.warning("null pointer exception, most likely a problem finding the organization data file");    }  } else {    logger.warning("Location file (" + locationFile + ") not configured.");    return list;  }  if (activityFile != null && activityNameIndex != -1 && latIndex != -1 && lonIndex != -1 && timeIndex != -1) {    logger.fine("Reading activity file...");    try {      CSVFile activities=new CSVFile(activityFile);      activities.loadData();      Iterator<Vector<Object>> records=activities.iterator();      while (records.hasNext()) {        String name=null;        float lat;        float lon;        Vector<?> record=records.next();        if (record.isEmpty()) {          continue;        }        name=record.elementAt(activityNameIndex).toString().intern();        try {          lat=((Double)record.elementAt(latIndex)).floatValue();          lon=((Double)record.elementAt(lonIndex)).floatValue();          String timeString=(String)record.elementAt(timeIndex);          Date timeDate=timeFormat.parse(timeString);          long time=timeDate.getTime();          timeBounds.addTimeToBounds(time);          dataBounds.add((double)lon,(double)lat);          if (name != null) {            TemporalOMGraphic point=library.get(name);            if (point != null) {              LatLonPoint location=new LatLonPoint.Double(lat,lon);              TemporalPoint ts=new TemporalPoint(location,time);              point.addTimeStamp(ts);              OMEvent event=new OMEvent(ts,name + " moving",time,location);              callback.events.add(event);            } else {              logger.warning("ScenarioPoint not found for " + name + ", entry: "+ record);            }          } else {            logger.warning("no name to use to create activity point: " + name);          }        } catch (        ClassCastException cce) {          Object obj0=record.elementAt(activityNameIndex);          Object obj1=record.elementAt(latIndex);          Object obj2=record.elementAt(lonIndex);          Object obj3=record.elementAt(timeIndex);          logger.warning("Problem with indexes in activity file for " + obj0 + " ("+ obj0.getClass().getName()+ ")"+ ":\n\tlat index = "+ latIndex+ ", value = "+ obj1+ " ("+ obj1.getClass().getName()+ ")\n\t lon index = "+ lonIndex+ ", value = "+ obj2+ " ("+ obj2.getClass().getName()+ ")\n\t time index = "+ timeIndex+ ", value = "+ obj3+ " ("+ obj3.getClass().getName()+ ")");        }catch (        ParseException pe) {          logger.fine("Problem with time format. " + pe.getMessage());        }      }    } catch (    MalformedURLException murle) {      logger.warning("problem with activity file: " + activityFile);      return list;    }catch (    NullPointerException npe) {      logger.warning("null pointer exception, most likely a problem finding the activites data file");    }  } else {    logger.warning("Activity file (" + activityFile + ") not configured.");    return list;  }  logger.fine("Reading files OK");  callback.setTimeBounds(timeBounds);  return list;}  }
class C{  protected AbstractGraph(List<Edge> edges,int numberOfVertices){  for (int i=0; i < numberOfVertices; i++)   addVertex((V)(new Integer(i)));  createAjacencyLists(edges,numberOfVertices);}  }
class C{  public Cursor query(BatchQuery query){  DownloadDeleter downloadDeleter=new DownloadDeleter(contentResolver);  RealSystemFacade systemFacade=new RealSystemFacade(GlobalState.getContext(),new Clock());  BatchRepository batchRepository=BatchRepository.from(contentResolver,downloadDeleter,downloadsUriProvider,systemFacade);  Cursor cursor=batchRepository.retrieveFor(query);  if (cursor == null) {    return null;  }  PublicFacingStatusTranslator statusTranslator=new PublicFacingStatusTranslator();  return new CursorTranslator(cursor,downloadsUriProvider.getBatchesUri(),statusTranslator);}  }
class C{  public String createShare(IsilonSMBShare smbFileShare) throws IsilonException {  return create(_baseUrl.resolve(URI_SMB_SHARES),"share",smbFileShare);}  }
class C{  public static void w(String tag,String msg,Throwable tr){  println(WARN,tag,msg,tr);}  }
class C{  public ObjectMatrix2D like(int rows,int columns){  return new SparseObjectMatrix2D(rows,columns);}  }
class C{  private void addImportClass(String className){  if (className == null || (className.startsWith("java.lang.") && !className.startsWith("java.lang.reflect.")) || className.startsWith(packageName + "."))   return;  for (  String name : s_importClasses) {    if (className.equals(name))     return;  }  if (className.equals("byte[]")) {    log.warning("Invalid type - " + className);    return;  }  s_importClasses.add(className);}  }
class C{  private void computeMoves(){  if (compMoves != null) {    return;  }  int idx=0;  Hashtable<Integer,int[]> entries=new Hashtable<Integer,int[]>();  for (int i=0; i < r; i++) {    for (int j=0; j <= i; j++) {      int ids[]=new int[]{idx,idx - (i + 1),idx - 2 * i - 1,idx,idx - i,idx - 2 * i + 1,idx,idx + 1,idx + 2,idx,idx + (i + 2),idx + 2 * i + 5,idx,idx + (i + 1),idx + 2 * i + 3,idx,idx - 1,idx - 2};      entries.put(idx,ids);      idx++;    }  }  int numValidMoves=6 * k;  boolean[] adjusted=new boolean[k];  for (  int i : new int[]{0,1,2,4}) {    int[] a=entries.get(i);    a[3 * NW]=-1;    a[3 * NE]=-1;    a[3 * E]=-1;    a[3 * W]=-1;    numValidMoves-=4;    adjusted[i]=true;  }  int numAdj=0;  for (int d=3, i=3; i <= k - 3 * r + 3; i+=d, d++) {    if (adjusted[i])     continue;    int[] b=entries.get(i);    b[3 * NW]=-1;    b[3 * W]=-1;    numValidMoves-=2;    adjusted[i]=true;    numAdj++;  }  if (numAdj > 1) {    for (int d=4, i=7; i <= k - 3 * r + 4; i+=d, d++) {      if (adjusted[i])       continue;      int[] b=entries.get(i);      b[3 * NW]=-1;      b[3 * W]=-1;      numValidMoves-=2;      adjusted[i]=true;    }  }  for (int d=4, i=5; i <= k - 2 * r; i+=d, d++) {    if (adjusted[i])     continue;    int[] c=entries.get(i);    c[3 * NE]=-1;    c[3 * E]=-1;    numValidMoves-=2;    adjusted[i]=true;  }  if (numAdj > 1) {    for (int d=5, i=8; i <= k - 2 * r - 1; i+=d, d++) {      if (adjusted[i])       continue;      int[] c=entries.get(i);      c[3 * NE]=-1;      c[3 * E]=-1;      numValidMoves-=2;      adjusted[i]=true;    }  }  for (  int i : new int[]{k - r,k - r + 1,k - 2 * r + 1,k - 2 * r + 2}) {    if (adjusted[i])     continue;    int[] e=entries.get(i);    e[3 * NW]=-1;    e[3 * SE]=-1;    e[3 * SW]=-1;    e[3 * W]=-1;    numValidMoves-=4;    adjusted[i]=true;  }  for (int i=k - r + 2; i <= k - 3; i++) {    if (adjusted[i])     continue;    int[] f=entries.get(i);    f[3 * SE]=-1;    f[3 * SW]=-1;    numValidMoves-=2;    adjusted[i]=true;  }  if (numAdj > 1) {    for (int i=k - 2 * r + 3; i <= k - r - 3; i++) {      if (adjusted[i])       continue;      int[] f=entries.get(i);      f[3 * SE]=-1;      f[3 * SW]=-1;      numValidMoves-=2;      adjusted[i]=true;    }  }  for (  int i : new int[]{k - r - 2,k - r - 1,k - 2,k - 1}) {    if (adjusted[i])     continue;    int[] g=entries.get(i);    g[3 * NE]=-1;    g[3 * E]=-1;    g[3 * SE]=-1;    g[3 * SW]=-1;    numValidMoves-=4;    adjusted[i]=true;  }  idx=0;  compMoves=new int[numValidMoves][3];  int vm=0;  for (int i=0; i < r; i++) {    for (int j=0; j <= i; j++) {      int[] e=entries.get(idx);      for (int m=0; m < 6; m++) {        if (e[3 * m] == -1)         continue;        compMoves[vm][0]=e[3 * m];        compMoves[vm][1]=e[3 * m + 1];        compMoves[vm][2]=e[3 * m + 2];        vm++;      }      idx++;    }  }}  }
class C{  public void visitAttribute(Attribute attr){  if (fv != null) {    fv.visitAttribute(attr);  }}  }
class C{  private void dropDecMultTbl(DbConnection dbConn) throws Exception {  String tableName;  if (_logger.isDebugEnabled())   _logger.debug("dropDecMultTbl");  try {    tableName=DaoUtil.getMultFldTblName(_tblPrefix,DbDataType.SHORT_DECIMAL);    DbTableFns.dropTable(dbConn,tableName);  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  private boolean equalsOrNull(Object o1,Object o2){  if (o1 == null) {    return o2 == null;  }  if (o2 == null) {    return false;  }  return o1.equals(o2);}  }
class C{  public void aggregate(final Element element){  aggregate(element.getProperties());}  }
class C{  public boolean isActivated(){  return activated;}  }
class C{  @Override @Unpreemptible("Deliver exception possibly from unpreemptible code") public void deliverException(CompiledMethod compiledMethod,Address catchBlockInstructionAddress,Throwable exceptionObject,AbstractRegisters registers){  Address fp=registers.getInnermostFramePointer();  NormalMethod method=(NormalMethod)compiledMethod.getMethod();  RVMThread myThread=RVMThread.getCurrentThread();  Address sp=fp.plus(BaselineCompilerImpl.getEmptyStackOffset(method));  sp=sp.minus(BYTES_IN_ADDRESS);  sp.store(Magic.objectAsAddress(exceptionObject));  registers.getGPRs().set(SP.value(),sp.toWord());  registers.setIP(catchBlockInstructionAddress);  VM.enableGC();  if (VM.VerifyAssertions)   VM._assert(registers.getInUse());  registers.setInUse(false);  myThread.stackLimit=Magic.objectAsAddress(myThread.getStack()).plus(STACK_SIZE_GUARD);  Magic.restoreHardwareExceptionState(registers);  if (VM.VerifyAssertions)   VM._assert(NOT_REACHED);}  }
class C{  @Override public boolean supportsMinimumSQLGrammar(){  debugCodeCall("supportsMinimumSQLGrammar");  return true;}  }
class C{  private void repaintPath(TreePath path){  if (path != null) {    Rectangle bounds=getPathBounds(tree,path);    if (bounds != null) {      tree.repaint(bounds.x,bounds.y,bounds.width,bounds.height);    }  }}  }
class C{  @Deprecated public static int fromLong(long d){  if (d == 0L)   return 0;  double d2=Math.signum(d) * Math.abs(d) / (1L + Math.abs(d));  int d3=(int)Math.round(Integer.MAX_VALUE * d2);  return d3;}  }
class C{  public ExtensionDescription(Class<? extends Extension> extensionClass,XmlNamespace namespace,String localName,boolean required,boolean repeatable,boolean aggregate,boolean arbitraryXml,boolean mixedContent){  this.namespace=namespace;  this.localName=localName;  this.extensionClass=extensionClass;  this.required=required;  this.repeatable=repeatable;  this.aggregate=aggregate;  this.arbitraryXml=arbitraryXml;  this.mixedContent=mixedContent;}  }
class C{  protected final void assertLogMessageContains(String needle){  LoggingEvent hit=null;  Iterator<LoggingEvent> iter=loggedEvents.iterator();  while (hit == null && iter.hasNext()) {    LoggingEvent event=iter.next();    if (event.getRenderedMessage().contains(needle)) {      hit=event;    }  }  assertNotNull("Could not find log message containing '" + needle + "'",hit);  assertTrue("Could not remove log message containing '" + needle + "'",loggedEvents.remove(hit));}  }
class C{  protected synchronized void close(){  closeInstance();  if (timer != null) {    timer.cancel();  }  timer=null;}  }
class C{  public Transaction(NetworkParameters params,byte[] payload,int offset) throws ProtocolException {  super(params,payload,offset);}  }
class C{  public static Pattern[] load(final IFile ignoreFile){  Check.notNull(ignoreFile,"file");  if (ignoreFile.exists() == false) {    return null;  }  final ArrayList<Pattern> patterns=new ArrayList<Pattern>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new InputStreamReader(ignoreFile.getContents(),ignoreFile.getCharset() != null ? ignoreFile.getCharset() : ResourcesPlugin.getEncoding()));    String line=null;    int lineNumber=0;    while ((line=reader.readLine()) != null) {      lineNumber++;      line=line.trim();      if (line.length() == 0 || line.startsWith("" + COMMENT_CHAR)) {        continue;      }      try {        patterns.add(Pattern.compile(line,getCompileFlags()));      } catch (      final PatternSyntaxException e) {        log.warn(MessageFormat.format(Messages.getString("TPIgnoreFileParser.CouldNotParseIgnorePatternFormat",LocaleUtil.ROOT),line,ignoreFile.getLocation().toOSString(),Integer.toString(lineNumber)),e);        TFSEclipseClientPlugin.getDefault().getLog().log(new Status(Status.ERROR,TFSEclipseClientPlugin.PLUGIN_ID,0,MessageFormat.format(Messages.getString("TPIgnoreFileParser.CouldNotParseIgnorePatternFormat"),line,ignoreFile.getLocation().toOSString(),Integer.toString(lineNumber)),e));      }    }  } catch (  final CoreException e) {    log.error(MessageFormat.format("Resource error reading resource exclusion file {0}",ignoreFile),e);    return null;  }catch (  final IOException e) {    log.error(MessageFormat.format("Error reading resource exclusion file {0}",ignoreFile),e);    return null;  } finally {    if (reader != null) {      try {        reader.close();      } catch (      final IOException e) {      }    }  }  return patterns.toArray(new Pattern[patterns.size()]);}  }
class C{  public void reset(){  super.reset();  fmod.reset();  amod.reset();}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  public Label mark(){  Label label=new Label();  mv.visitLabel(label);  return label;}  }
class C{  public PriorityQueue(int initialCapacity,Comparator<? super E> comparator){  if (initialCapacity < 1) {    throw new IllegalArgumentException("initialCapacity < 1: " + initialCapacity);  }  elements=newElementArray(initialCapacity);  this.comparator=comparator;}  }
class C{  public String element(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  Integer AD_Element_ID=(Integer)value;  if (AD_Element_ID == null || AD_Element_ID <= 0)   return "";  I_AD_Process_Para para=GridTabWrapper.create(mTab,I_AD_Process_Para.class);  MTable table=MTable.get(ctx,para.Table_ID);  MProcess process=MProcess.get(ctx,para.getAD_Process_ID());  para.setEntityType(process.getEntityType());  M_Element element=new M_Element(ctx,AD_Element_ID,null);  if (element.getAD_Reference_ID() == DisplayType.ID) {    String columnName=table.get_TableName() + "_ID";    if (!columnName.equals(element.getColumnName())) {      para.setAD_Reference_ID(DisplayType.TableDir);    }  }  if (para.getColumnName() == null || para.getColumnName().length() <= 0)   para.setColumnName(element.getColumnName());  if (para.getFieldLength() <= 0)   para.setFieldLength(element.getFieldLength());  if (para.getAD_Reference_ID() <= 0)   para.setAD_Reference_ID(element.getAD_Reference_ID());  if (para.getAD_Reference_Value_ID() <= 0)   para.setAD_Reference_Value_ID(element.getAD_Reference_Value_ID());  if (para.getName() == null || para.getName().length() <= 0)   para.setName(element.getName());  if (para.getDescription() == null || para.getDescription().length() <= 0)   para.setDescription(element.getDescription());  if (para.getHelp() == null || para.getHelp().length() <= 0)   para.setHelp(element.getHelp());  return "";}  }
class C{  private JsonObject metadataToJsonObject(Map<String,String> metadata){  JsonObject root=new JsonObject();  JsonArray array=new JsonArray();  root.add("metadata",array);  for (  String key : metadata.keySet()) {    JsonObject entry=new JsonObject();    entry.addProperty("name",key);    entry.addProperty("value",metadata.get(key));    array.add(entry);  }  return root;}  }
class C{  @InService(PageServiceImpl.class) static PageLeafImpl readCheckpointFull(TableKelp table,PageServiceImpl pageActor,InputStream is,int pid,int nextPid,long sequence) throws IOException {  byte[] minKey=new byte[table.getKeyLength()];  byte[] maxKey=new byte[table.getKeyLength()];  int count=0;  BlockLeaf[] blocks;  IoUtil.readAll(is,minKey,0,minKey.length);  IoUtil.readAll(is,maxKey,0,maxKey.length);  count=BitsUtil.readInt16(is);  blocks=new BlockLeaf[count];  for (int i=0; i < count; i++) {    blocks[i]=new BlockLeaf(pid);    blocks[i].readCheckpointFull(is);  }  if (count == 0) {    blocks=new BlockLeaf[]{new BlockLeaf(pid)};  }  PageLeafImpl page=new PageLeafImpl(pid,nextPid,sequence,table,minKey,maxKey,blocks);  page.clearDirty();  page.validate(table);  page.toSorted(table);  return page;}  }
class C{  protected void installListeners(){  mouseInputListener=createMouseInputListener();  header.addMouseListener(mouseInputListener);  header.addMouseMotionListener(mouseInputListener);  header.addFocusListener(focusListener);}  }
class C{  public Object convertFieldValue(ModelField modelField,Object value,ModelFieldTypeReader modelFieldTypeReader,Map<String,? extends Object> context){  if (value == null || value == GenericEntity.NULL_FIELD) {    return null;  }  String fieldJavaType=modelFieldTypeReader.getModelFieldType(modelField.getType()).getJavaType();  try {    return ObjectType.simpleTypeConvert(value,fieldJavaType,null,(TimeZone)context.get("timeZone"),(Locale)context.get("locale"),true);  } catch (  GeneralException e) {    String errMsg="Could not convert field value for the field: [" + modelField.getName() + "] on the ["+ this.getEntityName()+ "] entity to the ["+ fieldJavaType+ "] type for the value ["+ value+ "]: "+ e.toString();    Debug.logError(e,errMsg,module);    throw new IllegalArgumentException(errMsg);  }}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("remove not supported by this iterator");}  }
class C{  public final boolean hasDataAuthority(Uri data){  return matchDataAuthority(data) >= 0;}  }
class C{  private static void nap(int secs){  try {    Thread.sleep(secs * 1000);  } catch (  InterruptedException ignore) {  }}  }
class C{  private void digit(StringBuilder rtn){  while (cfml.isValidIndex()) {    if (!cfml.isCurrentDigit())     break;    rtn.append(cfml.getCurrentLower());    cfml.next();  }}  }
class C{  public AtomicReferenceArray(E[] array){  this.array=Arrays.copyOf(array,array.length,Object[].class);}  }
class C{  public static Builder createSpecBuilder(PrincipalId tokenPresenter,X509Certificate confirmationCert,Date authnTime,TimePeriod lifespan,String identityAttribute,Collection<String> attributeNames,SignatureAlgorithm desiredSignatureAlgorithmInRequest,String recipient,String inResponseTo){  Confirmation confirmation=(confirmationCert == null) ? new Confirmation(inResponseTo,recipient) : new Confirmation(confirmationCert);  AuthenticationData authnData=new AuthenticationData(tokenPresenter,authnTime,AuthnMethod.ASSERTION,identityAttribute);  Builder builder=new Builder(lifespan,confirmation,authnData,attributeNames);  if (desiredSignatureAlgorithmInRequest != null) {    builder=builder.setSignatureAlgorithm(desiredSignatureAlgorithmInRequest);  }  return builder;}  }
class C{  private void decodePass(WritableRaster imRas,int xOffset,int yOffset,int xStep,int yStep,int passWidth,int passHeight){  if ((passWidth == 0) || (passHeight == 0)) {    return;  }  int bytesPerRow=(inputBands * passWidth * bitDepth + 7) / 8;  int eltsPerRow=(bitDepth == 16) ? bytesPerRow / 2 : bytesPerRow;  byte[] curr=new byte[bytesPerRow];  byte[] prior=new byte[bytesPerRow];  WritableRaster passRow=createRaster(passWidth,1,inputBands,eltsPerRow,bitDepth);  DataBuffer dataBuffer=passRow.getDataBuffer();  int type=dataBuffer.getDataType();  byte[] byteData=null;  short[] shortData=null;  if (type == DataBuffer.TYPE_BYTE) {    byteData=((DataBufferByte)dataBuffer).getData();  } else {    shortData=((DataBufferUShort)dataBuffer).getData();  }  int srcY, dstY;  for (srcY=0, dstY=yOffset; srcY < passHeight; srcY++, dstY+=yStep) {    int filter=0;    try {      filter=dataStream.read();      dataStream.readFully(curr,0,bytesPerRow);    } catch (    Exception e) {      e.printStackTrace();    }switch (filter) {case PNG_FILTER_NONE:      break;case PNG_FILTER_SUB:    decodeSubFilter(curr,bytesPerRow,bytesPerPixel);  break;case PNG_FILTER_UP:decodeUpFilter(curr,prior,bytesPerRow);break;case PNG_FILTER_AVERAGE:decodeAverageFilter(curr,prior,bytesPerRow,bytesPerPixel);break;case PNG_FILTER_PAETH:decodePaethFilter(curr,prior,bytesPerRow,bytesPerPixel);break;default :String msg=PropertyUtil.getString("PNGImageDecoder16");throw new RuntimeException(msg);}if (bitDepth < 16) {System.arraycopy(curr,0,byteData,0,bytesPerRow);} else {int idx=0;for (int j=0; j < eltsPerRow; j++) {shortData[j]=(short)((curr[idx] << 8) | (curr[idx + 1] & 0xff));idx+=2;}}processPixels(postProcess,passRow,imRas,xOffset,xStep,dstY,passWidth);byte[] tmp=prior;prior=curr;curr=tmp;}}  }
class C{  public String isMandatory(){  return mandatory;}  }
class C{  public boolean isRooted(){  rootChecker=new Root();  return rootChecker.isDeviceRooted();}  }
class C{  private void doDelete() throws PageException, SearchException {  required("index",action,"collection",collection);  if (type != SearchIndex.TYPE_CUSTOM)   required("index",action,"key",key);  if (type == -1) {    if (query != null) {      type=SearchIndex.TYPE_CUSTOM;    } else {      Resource file=null;      try {        file=ResourceUtil.toResourceExisting(pageContext,key);        pageContext.getConfig().getSecurityManager().checkFileLocation(file);      } catch (      ExpressionException e) {      }      if (file != null && file.exists() && file.isFile())       type=SearchIndex.TYPE_FILE; else       if (file != null && file.exists() && file.isDirectory())       type=SearchIndex.TYPE_PATH; else {        try {          new URL(key);          type=SearchIndex.TYPE_URL;        } catch (        MalformedURLException e) {        }      }    }  }  collection.deleteIndex(pageContext,key,type,query);}  }
class C{  @SuppressWarnings("unchecked") public static Map createMap(Object... args){  Map result=new LinkedHashMap();  if (args == null || args.length == 0)   return result;  for (int i=0; i < args.length - 1; i+=2)   result.put(args[i],args[i + 1]);  return result;}  }
class C{  public void toolError(ErrorType errorType,Object... args){  toolError(errorType,null,args);}  }
class C{  public Builder(String token){  this.token=token;  if (Strings.isNullOrEmpty(token)) {    throw new IllegalArgumentException("token must not be null or empty.");  }}  }
class C{  private void readSimpleExpressions(final String text,final ConversationContext ctx,final Sentence sentence){  final StringTokenizer tok=new StringTokenizer(text);  while (tok.hasMoreTokens()) {    final String str=tok.nextToken();    final Expression expr=new Expression(str);    expr.setNormalized(str);    expr.setMatcher(this);    sentence.expressions.add(expr);  }}  }
class C{  public static boolean containsIgnoreCase(String str,String query){  if (str != null && query != null) {    int limit=str.length() - query.length() + 1;    for (int i=0; i < limit; i++) {      if (matchesIgnoreCase(str,query,i)) {        return true;      }    }  }  return false;}  }
class C{  public static <T>List<T> nCopies(final int length,T object){  return new CopiesList<T>(length,object);}  }
class C{  public int optInt(String key){  return this.optInt(key,0);}  }
class C{  public void testComputeSignificanceDoesntAlterAverage(PredictiveInfoCalculator piCalc,int k,int timeSteps) throws Exception {  piCalc.initialise(k);  RandomGenerator rg=new RandomGenerator();  double[] data=rg.generateNormalData(timeSteps,0,1);  piCalc.setObservations(data);  double pi=piCalc.computeAverageLocalOfObservations();  System.out.printf("Average was %.5f\n",pi);  int[][] newOrderings=rg.generateDistinctRandomPerturbations(timeSteps - (2 * k - 1),2);  EmpiricalMeasurementDistribution measDist=piCalc.computeSignificance(newOrderings);  assertFalse(pi == measDist.distribution[0]);  for (int i=0; i < 10; i++) {    double lastAverage=piCalc.getLastAverage();    assertEquals(pi,lastAverage);    double averageCheck1=piCalc.computeAverageLocalOfObservations();    assertEquals(pi,averageCheck1);  }}  }
class C{  private long size(File file){  long size=0;  if (file.isDirectory()) {    for (    File subFile : file.listFiles()) {      size+=size(subFile);    }  } else {    size=file.length();  }  return size;}  }
class C{  @SuppressWarnings("unchecked") public static <C extends Comparable>ImmutableRangeSet<C> of(){  return (ImmutableRangeSet<C>)EMPTY;}  }
class C{  public static byte[] instrument(byte[] originalBytes,String recorderClass,String recorderMethod,ClassLoader loader){  try {    ClassReader cr=new ClassReader(originalBytes);    ClassWriter cw=new StaticClassWriter(cr,ClassWriter.COMPUTE_FRAMES,loader);    VerifyingClassAdapter vcw=new VerifyingClassAdapter(cw,originalBytes,cr.getClassName());    ClassVisitor adapter=new AllocationClassAdapter(vcw,recorderClass,recorderMethod);    cr.accept(adapter,ClassReader.SKIP_FRAMES);    return vcw.toByteArray();  } catch (  RuntimeException e) {    logger.log(Level.WARNING,"Failed to instrument class.",e);    throw e;  }catch (  Error e) {    logger.log(Level.WARNING,"Failed to instrument class.",e);    throw e;  }}  }
class C{  private void proxyCacheClose(final int[] userIndices,final Boolean keepAliveFlags){  if (keepAliveFlags != null) {    for (    int i : userIndices) {      getProxyCaches(i).close(keepAliveFlags);    }  } else {    for (    int i : userIndices) {      getProxyCaches(i).close();    }  }}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  final int bitmapSize=getBitmapSize(bitmap) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public static IndexSchema buildIndexSchema(String resourceName,SolrConfig config){  PluginInfo info=config.getPluginInfo(IndexSchemaFactory.class.getName());  IndexSchemaFactory factory;  if (null != info) {    factory=config.getResourceLoader().newInstance(info.className,IndexSchemaFactory.class);    factory.init(info.initArgs);  } else {    factory=new ClassicIndexSchemaFactory();  }  IndexSchema schema=factory.create(resourceName,config);  return schema;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> replaceValues(K key,Iterable<? extends V> values){  throw new UnsupportedOperationException();}  }
class C{  @Override @SuppressWarnings("unchecked") public V put(K key,V value){  return putImpl(key,value);}  }
class C{  private Object executeExp(PageContext pc,SQL sql,Query qr,ZExp exp,int row) throws PageException {  if (exp instanceof ZConstant)   return executeConstant(sql,qr,(ZConstant)exp,row); else   if (exp instanceof ZExpression)   return executeExpression(pc,sql,qr,(ZExpression)exp,row);  throw new DatabaseException("unsupported sql statement [" + exp + "]",null,sql,null);}  }
class C{  protected java.io.File createWorkDir(java.io.File parent,BaseBuilderRequest request) throws BuilderException {  try {    return Files.createDirectory(new java.io.File(parent,request.getProjectDescriptor().getName()).toPath()).toFile();  } catch (  IOException e) {    throw new BuilderException(e);  }}  }
class C{  public boolean intersects(){  return intersects;}  }
class C{  public void evaluateInverse(){  if (arraysUnlinked)   throw new IllegalStateException("Sequence and transform arrays are not linked");  dft.evaluate();  double scale=1.0f / (double)N;  int N2=N / 2;  yr[0]*=scale;  yi[0]*=scale;  yr[N2]*=scale;  yi[N2]*=scale;  int i=1;  int j=N - 1;  double tmp;  while (i < j) {    tmp=yr[i];    yr[i]=yr[j] * scale;    yr[j]=tmp * scale;    tmp=yi[i];    yi[i]=yi[j] * scale;    yi[j]=tmp * scale;    i++;    j--;  }}  }
class C{  public static void assertBlockHarvestNotification(final Notification notification,final Account expectedAccount,final Amount expectedAmount){  final BalanceAdjustmentNotification n=(BalanceAdjustmentNotification)notification;  Assert.assertThat(n.getType(),IsEqual.equalTo(NotificationType.BlockHarvest));  Assert.assertThat(n.getAccount(),IsEqual.equalTo(expectedAccount));  Assert.assertThat(n.getAmount(),IsEqual.equalTo(expectedAmount));}  }
class C{  public int indexOf(Object o){synchronized (lock) {    if (o == null) {      for (int i=0; i < size; i++)       if (elementData[i] == null)       return i;    } else {      for (int i=0; i < size; i++)       if (o.equals(elementData[i]))       return i;    }  }  return -1;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.543 -0500",hash_original_method="5A84D35A2C5A040CC18139106D665D0E",hash_generated_method="5B39CF3A953CC5CBC19C522FEA0C7488") private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  s.writeInt(size());  int mask=elements.length - 1;  for (int i=head; i != tail; i=(i + 1) & mask)   s.writeObject(elements[i]);}  }
class C{  public area(String shape,String coords,String href){  setShape(shape);  setCoords(coords);  setHref(href);}  }
class C{  public void sendFinalMessage(String message,Object population_data){  try {    out.writeObject(message);    out.flush();    if (Properties.SERIALIZE_RESULT)     out.writeObject(population_data); else     out.writeObject(null);    out.flush();  } catch (  Exception e) {    logger.error("error in sending messages",e);  }  try {    Thread.sleep(1000);  } catch (  InterruptedException e) {    logger.debug("Thread interrupted while waiting after sending results from client to master",e);  }}  }
class C{  private void init9IndicatorCells(){  int distance=this.cellBoxWidth + this.cellBoxWidth / 2 - this.radius;  for (int i=0; i < 3; i++) {    for (int j=0; j < 3; j++) {      mIndicatorCells[i][j]=new IndicatorCell(distance * j + radius + offset,distance * i + radius + offset,3 * i + j + 1);    }  }}  }
class C{  public static void updateNodes(PathDataNode[] target,PathDataNode[] source){  for (int i=0; i < source.length; i++) {    target[i].type=source[i].type;    for (int j=0; j < source[i].params.length; j++) {      target[i].params[j]=source[i].params[j];    }  }}  }
class C{  public User createUser(String userName){  if (!AccountAttributeValidator.isUserNameValid(userName)) {    return null;  }  User user=db.getUserHelper(userName);  if (user != null) {    return null;  }  return createUserHelper(userName);}  }
class C{  private Hop simplifyDistributiveBinaryOperation(Hop parent,Hop hi,int pos){  if (hi instanceof BinaryOp) {    BinaryOp bop=(BinaryOp)hi;    Hop left=bop.getInput().get(0);    Hop right=bop.getInput().get(1);    boolean applied=false;    if (left.getDataType() == DataType.MATRIX && right.getDataType() == DataType.MATRIX && HopRewriteUtils.isValidOp(bop.getOp(),LOOKUP_VALID_DISTRIBUTIVE_BINARY)) {      Hop X=null;      Hop Y=null;      if (left instanceof BinaryOp && ((BinaryOp)left).getOp() == OpOp2.MULT) {        Hop leftC1=left.getInput().get(0);        Hop leftC2=left.getInput().get(1);        if (leftC1.getDataType() == DataType.MATRIX && leftC2.getDataType() == DataType.MATRIX && (right == leftC1 || right == leftC2) && leftC1 != leftC2) {          X=right;          Y=(right == leftC1) ? leftC2 : leftC1;        }        if (X != null) {          HopRewriteUtils.removeChildReference(parent,hi);          LiteralOp literal=new LiteralOp(1);          BinaryOp plus=new BinaryOp(right.getName(),right.getDataType(),right.getValueType(),bop.getOp(),Y,literal);          HopRewriteUtils.refreshOutputParameters(plus,right);          BinaryOp mult=new BinaryOp(left.getName(),left.getDataType(),left.getValueType(),OpOp2.MULT,plus,X);          HopRewriteUtils.refreshOutputParameters(mult,left);          HopRewriteUtils.addChildReference(parent,mult,pos);          hi=mult;          applied=true;          LOG.debug("Applied simplifyDistributiveBinaryOperation1");        }      }      if (!applied && right instanceof BinaryOp && ((BinaryOp)right).getOp() == OpOp2.MULT) {        Hop rightC1=right.getInput().get(0);        Hop rightC2=right.getInput().get(1);        if (rightC1.getDataType() == DataType.MATRIX && rightC2.getDataType() == DataType.MATRIX && (left == rightC1 || left == rightC2) && rightC1 != rightC2) {          X=left;          Y=(left == rightC1) ? rightC2 : rightC1;        }        if (X != null) {          HopRewriteUtils.removeChildReference(parent,hi);          LiteralOp literal=new LiteralOp(1);          BinaryOp plus=new BinaryOp(left.getName(),left.getDataType(),left.getValueType(),bop.getOp(),literal,Y);          HopRewriteUtils.refreshOutputParameters(plus,left);          BinaryOp mult=new BinaryOp(right.getName(),right.getDataType(),right.getValueType(),OpOp2.MULT,plus,X);          HopRewriteUtils.refreshOutputParameters(mult,right);          HopRewriteUtils.addChildReference(parent,mult,pos);          hi=mult;          LOG.debug("Applied simplifyDistributiveBinaryOperation2");        }      }    }  }  return hi;}  }
class C{  public void dataStreamerTopologyUpdate(long ptr,long topVer,int topSize){  enter();  try {    PlatformCallbackUtils.dataStreamerTopologyUpdate(envPtr,ptr,topVer,topSize);  }  finally {    leave();  }}  }
class C{  private String _serializeList(List list,Set<Object> done) throws ConverterException {  StringBuilder sb=new StringBuilder(goIn() + "<array length=" + del+ list.size()+ del+ ">");  ListIterator it=list.listIterator();  while (it.hasNext()) {    sb.append(_serialize(it.next(),done));  }  sb.append(goIn() + "</array>");  return sb.toString();}  }
class C{  private static ReilOperand check1(final ReilOperand firstOperand){  Preconditions.checkNotNull(firstOperand,"Error: First operand can not be null");  return firstOperand;}  }
class C{  boolean isSingleWindowStandardOffset(){  return windowEnd.equals(LocalDateTime.MAX) && timeDefinition == TimeDefinition.WALL && fixedSavingAmountSecs == null && lastRuleList.isEmpty() && ruleList.isEmpty();}  }
class C{  @Scheduled(cron="${schedule}") public void fetchData(){  fetcher.tryFetchData();}  }
class C{  protected void appendTextString(byte[] text){  if (((text[0]) & 0xff) > TEXT_MAX) {    append(TEXT_MAX);  }  arraycopy(text,0,text.length);  append(0);}  }
class C{  public boolean isCancelVisible(){  return bCancel.isVisible();}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void stem(){  k=i - 1;  if (k > 1) {    step1();    step2();    step3();    step4();    step5();    step6();  }  i_end=k + 1;  i=0;}  }
class C{  public Builder resize(int targetWidth,int targetHeight){  if (targetWidth <= 0) {    throw new IllegalArgumentException("Width must be positive number.");  }  if (targetHeight <= 0) {    throw new IllegalArgumentException("Height must be positive number.");  }  this.targetWidth=targetWidth;  this.targetHeight=targetHeight;  return this;}  }
class C{  public double[] distributionForInstance(Instance instance) throws Exception {  if (relearned == true) {    PrepareHClusters();  }  int num_classes=(int)(0.5 * numClasses);  int num_features=(int)(0.5 * numFeatures);  double[] dist=new double[num_classes];  double[] currentData=new double[numFeatures];  double[] ranking=new double[num_classes];  for (int j=0; j < num_features; j++) {    currentData[j]=instance.value(num_classes + j);    currentData[num_features + j]=1 - currentData[j];  }  SortPair[] sortedActClust=ARTCs.activate(currentData);  List<Integer> ids=new ArrayList<Integer>();  java.util.Arrays.sort(sortedActClust);  int cid=sortedActClust[0].getOriginalIndex();  int numberofids=0;  for (int k=0; k < ARTCs.Ids[cid].length; k++) {    ids.add(ARTCs.Ids[cid][k]);  }  numberofids+=ARTCs.Ids[cid].length;  int c1=1;  while (c1 < ARTCs.maxids) {    cid=sortedActClust[c1].getOriginalIndex();    for (int k=0; k < ARTCs.Ids[cid].length; k++) {      ids.add(ARTCs.Ids[cid][k]);    }    numberofids+=ARTCs.Ids[cid].length;    c1+=1;  }  SortPair[] sortedActivations=ARTActivateCategories(currentData,ids,numberofids);  java.util.Arrays.sort(sortedActivations);  double diff_act=sortedActivations[0].getValue() - sortedActivations[sortedActivations.length - 1].getValue();  int largest_activ=1;  double activ_change=0;  for (int i=1; i < sortedActivations.length; i++) {    activ_change=(sortedActivations[0].getValue() - sortedActivations[i].getValue()) / sortedActivations[0].getValue();    if (activ_change > threshold * diff_act) {      break;    }    largest_activ=largest_activ + 1;  }  double[] best_matches=new double[largest_activ];  java.util.Arrays.fill(best_matches,1);  for (int i=0; i < largest_activ; i++) {    best_matches[i]=sortedActivations[i].getValue();  }  double sum_mat=sumArray(best_matches);  int currentCategory=0;  this.neuronsactivated=new int[largest_activ];  this.neuronsactivity=new double[largest_activ];  for (int i=0; i < largest_activ; i++) {    this.neuronsactivity[i]=best_matches[i];    best_matches[i]=best_matches[i] / sum_mat;    currentCategory=sortedActivations[i].getOriginalIndex();    this.neuronsactivated[i]=currentCategory;    for (int j=0; j < num_classes; j++) {      ranking[j]=ranking[j] + best_matches[i] * weightsB[currentCategory][j];    }  }  if (m_userankstoclass) {    return ARAMm_Ranking2Class(ranking);  }  return ranking;}  }
class C{  public void deactivate(){  if (!mActive)   return;  if (mObserver != null)   mObserver.onFindToolbarHidden();  setResultsBarVisibility(false);  mTabModelSelector.removeObserver(mTabModelSelectorObserver);  for (  TabModel model : mTabModelSelector.getModels()) {    model.removeObserver(mTabModelObserver);  }  mCurrentTab.getChromeWebContentsDelegateAndroid().setFindResultListener(null);  mCurrentTab.getChromeWebContentsDelegateAndroid().setFindMatchRectsListener(null);  mCurrentTab.removeObserver(mTabObserver);  UiUtils.hideKeyboard(mFindQuery);  if (mFindQuery.getText().length() > 0) {    clearResults();    mFindInPageBridge.stopFinding();  }  mFindInPageBridge.destroy();  mActive=false;}  }
class C{  Fact(int id,String name){  this.id=id;  this.name=name;}  }
class C{  public static void log(String message){  if (VectorDrawableParser.DEBUG) {    System.out.println(message);  }}  }
class C{  public SparseMap(Order<? super K> keyOrder){  this.keyOrder=keyOrder;}  }
