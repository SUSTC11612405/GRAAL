class C{  static void parseParams(String[] args){  for (  String cmd : args) {    if (cmd.equalsIgnoreCase("-updateMovies")) {      updateMovies=true;    } else     if (cmd.matches("(?)-updateMovies[1-9]")) {      updateMovies=true;      updateMovieDs.add(Integer.parseInt(StrgUtils.substr(cmd,"(?)-updateMovies(\\d)")));    } else     if (cmd.equalsIgnoreCase("-updateTv")) {      updateTv=true;    } else     if (cmd.matches("(?)-updateTv[1-9]")) {      updateTv=true;      updateTvDs.add(Integer.parseInt(StrgUtils.substr(cmd,"(?)-updateTv(\\d)")));    } else     if (cmd.equalsIgnoreCase("-update")) {      updateMovies=true;      updateTv=true;    } else     if (cmd.equalsIgnoreCase("-scrapeNew")) {      scrapeNew=true;    } else     if (cmd.equalsIgnoreCase("-scrapeAll")) {      scrapeAll=true;    } else     if (cmd.equalsIgnoreCase("-scrapeUnscraped")) {      scrapeUnscraped=true;    } else     if (cmd.equalsIgnoreCase("-dryRun")) {      dryRun=true;      if (args.length == 1) {        printSyntax();        System.exit(0);      }    } else     if (cmd.equalsIgnoreCase("-checkFiles")) {      checkFiles=true;    } else     if (cmd.equalsIgnoreCase("-rename") || cmd.equalsIgnoreCase("-renameNew")) {      rename=true;    } else     if (cmd.toLowerCase().contains("help")) {      printSyntax();      System.exit(0);    } else {      System.out.println("ERROR: unrecognized command '" + cmd);      printSyntax();      System.exit(0);    }  }}  }
class C{  public DViewSecretKey(JFrame parent,String title,SecretKey secretKey) throws CryptoException {  super(parent,title,Dialog.ModalityType.DOCUMENT_MODAL);  this.secretKey=secretKey;  initComponents();}  }
class C{  private static boolean isValueExist(String subKey,String valueName,int regLevel){  if (isSubKeyExist(subKey,regLevel)) {    int hKey=getHKeyByLevel(regLevel);    if (WinRegistryWrapper.WinRegValueExist(hKey,subKey,valueName) == ERROR_ITEM_EXISTED) {      return true;    }  }  return false;}  }
class C{  public boolean isDaemon(){  return daemon;}  }
class C{  public boolean onKeyDown(int keyCode,KeyEvent event){  if (isShowing()) {    if (keyCode != KeyEvent.KEYCODE_SPACE && (mDropDownList.getSelectedItemPosition() >= 0 || !isConfirmKey(keyCode))) {      int curIndex=mDropDownList.getSelectedItemPosition();      boolean consumed;      final boolean below=!mPopup.isAboveAnchor();      final ListAdapter adapter=mAdapter;      boolean allEnabled;      int firstItem=Integer.MAX_VALUE;      int lastItem=Integer.MIN_VALUE;      if (adapter != null) {        allEnabled=adapter.areAllItemsEnabled();        firstItem=allEnabled ? 0 : mDropDownList.lookForSelectablePosition(0,true);        lastItem=allEnabled ? adapter.getCount() - 1 : mDropDownList.lookForSelectablePosition(adapter.getCount() - 1,false);      }      if ((below && keyCode == KeyEvent.KEYCODE_DPAD_UP && curIndex <= firstItem) || (!below && keyCode == KeyEvent.KEYCODE_DPAD_DOWN && curIndex >= lastItem)) {        clearListSelection();        mPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NEEDED);        show();        return true;      } else {        mDropDownList.setListSelectionHidden(false);      }      consumed=mDropDownList.onKeyDown(keyCode,event);      if (DEBUG)       Log.v(TAG,"Key down: code=" + keyCode + " list consumed="+ consumed);      if (consumed) {        mPopup.setInputMethodMode(PopupWindow.INPUT_METHOD_NOT_NEEDED);        mDropDownList.requestFocusFromTouch();        show();switch (keyCode) {case KeyEvent.KEYCODE_ENTER:case KeyEvent.KEYCODE_DPAD_CENTER:case KeyEvent.KEYCODE_DPAD_DOWN:case KeyEvent.KEYCODE_DPAD_UP:          return true;      }    } else {      if (below && keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {        if (curIndex == lastItem) {          return true;        }      } else       if (!below && keyCode == KeyEvent.KEYCODE_DPAD_UP && curIndex == firstItem) {        return true;      }    }  }}return false;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  public boolean isSuspendProcess(){  return suspendProcess;}  }
class C{  public static void resetBarsColor(Window window){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    window.setStatusBarColor(ContextCompat.getColor(window.getContext(),R.color.black));    window.setNavigationBarColor(ContextCompat.getColor(window.getContext(),R.color.black));  }}  }
class C{  private String[] parseLine(String nextLine,boolean multi) throws IOException {  if (!multi && pending != null) {    pending=null;  }  if (nextLine == null) {    if (pending != null) {      String s=pending;      pending=null;      return new String[]{s};    } else {      return null;    }  }  List<String> tokensOnThisLine=new ArrayList<String>();  StringBuilder sb=new StringBuilder(INITIAL_READ_SIZE);  boolean inQuotes=false;  if (pending != null) {    sb.append(pending);    pending=null;    inQuotes=true;  }  for (int i=0; i < nextLine.length(); i++) {    char c=nextLine.charAt(i);    if (c == this.escape) {      if (isNextCharacterEscapable(nextLine,inQuotes || inField,i)) {        sb.append(nextLine.charAt(i + 1));        i++;      }    } else     if (c == quotechar) {      if (isNextCharacterEscapedQuote(nextLine,inQuotes || inField,i)) {        sb.append(nextLine.charAt(i + 1));        i++;      } else {        if (!strictQuotes) {          if (i > NUM_2 && nextLine.charAt(i - 1) != this.separator && nextLine.length() > (i + 1) && nextLine.charAt(i + 1) != this.separator) {            if (ignoreLeadingWhiteSpace && sb.length() > 0 && isAllWhiteSpace(sb)) {              sb.setLength(0);            } else {              sb.append(c);            }          }        }        inQuotes=!inQuotes;      }      inField=!inField;    } else     if (c == separator && !inQuotes) {      tokensOnThisLine.add(sb.toString());      sb.setLength(0);      inField=false;    } else {      if (!strictQuotes || inQuotes) {        sb.append(c);        inField=true;      }    }  }  if (inQuotes) {    if (multi) {      sb.append("\n");      pending=sb.toString();      sb=null;    } else {      throw new IOException("Un-terminated quoted field at end of CSV line");    }  }  if (sb != null) {    tokensOnThisLine.add(sb.toString());  }  return tokensOnThisLine.toArray(new String[tokensOnThisLine.size()]);}  }
class C{  public boolean isFinalFrame(){  return isFinalFrame_;}  }
class C{  public PointRDD(JavaRDD<Point> rawPointRDD){  this.setRawPointRDD(rawPointRDD);}  }
class C{  public ObjectFactory(){}  }
class C{  public MechBay(double space,int doors,int bayNumber){  totalSpace=space;  currentSpace=space;  this.doors=doors;  doorsNext=doors;  this.bayNumber=bayNumber;}  }
class C{  public static void logError(String msg,Throwable ex){  getDefault().getLog().log(new Status(IStatus.ERROR,PLUGIN_ID,IStatus.OK,msg,ex));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:58.056 -0400",hash_original_method="B61D151163EA402642536A8375DC60A2",hash_generated_method="5A991771D3878B22A70220CDCF44E2AD") public synchronized void start() throws Exception {  if (running) {    throw new IllegalStateException("Monitor is already running");  }  for (  FileAlterationObserver observer : observers) {    observer.initialize();  }  running=true;  if (threadFactory != null) {    thread=threadFactory.newThread(this);  } else {    thread=new Thread(this);  }  thread.start();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DomPackage.SIMPLE_TYPE_REFERENCE__OWNER:    setOwner((Composite)null);  return;case DomPackage.SIMPLE_TYPE_REFERENCE__TYPE_NAME:setTypeName(TYPE_NAME_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public WritableRaster copyData(WritableRaster dest){  if (dest == null)   throw new IllegalArgumentException("Cannot generate a noise pattern into a null raster");  int w=dest.getWidth();  int h=dest.getHeight();  DataBufferInt dstDB=(DataBufferInt)dest.getDataBuffer();  SinglePixelPackedSampleModel sppsm;  int minX=dest.getMinX();  int minY=dest.getMinY();  sppsm=(SinglePixelPackedSampleModel)dest.getSampleModel();  int dstOff=dstDB.getOffset() + sppsm.getOffset(minX - dest.getSampleModelTranslateX(),minY - dest.getSampleModelTranslateY());  final int[] destPixels=dstDB.getBankData()[0];  int dstAdjust=sppsm.getScanlineStride() - w;  int i, end, dp=dstOff;  final int[] rgb=new int[4];  final double[] fSum={0,0,0,0};  final double[] noise={0,0,0,0};  final double tx0, tx1, ty0, ty1;  tx0=tx[0];  tx1=tx[1];  ty0=ty[0] - (w * tx0);  ty1=ty[1] - (w * tx1);  double[] p={minX,minY};  txf.transform(p,0,p,0,1);  double point_0=p[0];  double point_1=p[1];  if (isFractalNoise) {    if (stitchInfo == null) {      if (channels.length == 4) {        for (i=0; i < h; i++) {          for (end=dp + w; dp < end; dp++) {            destPixels[dp]=turbulenceFractal_4(point_0,point_1,fSum);            point_0+=tx0;            point_1+=tx1;          }          point_0+=ty0;          point_1+=ty1;          dp+=dstAdjust;        }      } else {        for (i=0; i < h; i++) {          for (end=dp + w; dp < end; dp++) {            turbulenceFractal(rgb,point_0,point_1,fSum,noise);            destPixels[dp]=((rgb[3] << 24) | (rgb[0] << 16) | (rgb[1] << 8)| (rgb[2]));            point_0+=tx0;            point_1+=tx1;          }          point_0+=ty0;          point_1+=ty1;          dp+=dstAdjust;        }      }    } else {      StitchInfo si=new StitchInfo();      for (i=0; i < h; i++) {        for (end=dp + w; dp < end; dp++) {          si.assign(this.stitchInfo);          turbulenceFractalStitch(rgb,point_0,point_1,fSum,noise,si);          destPixels[dp]=((rgb[3] << 24) | (rgb[0] << 16) | (rgb[1] << 8)| (rgb[2]));          point_0+=tx0;          point_1+=tx1;        }        point_0+=ty0;        point_1+=ty1;        dp+=dstAdjust;      }    }  } else {    if (stitchInfo == null) {      if (channels.length == 4) {        for (i=0; i < h; i++) {          for (end=dp + w; dp < end; dp++) {            destPixels[dp]=turbulence_4(point_0,point_1,fSum);            point_0+=tx0;            point_1+=tx1;          }          point_0+=ty0;          point_1+=ty1;          dp+=dstAdjust;        }      } else {        for (i=0; i < h; i++) {          for (end=dp + w; dp < end; dp++) {            turbulence(rgb,point_0,point_1,fSum,noise);            destPixels[dp]=((rgb[3] << 24) | (rgb[0] << 16) | (rgb[1] << 8)| (rgb[2]));            point_0+=tx0;            point_1+=tx1;          }          point_0+=ty0;          point_1+=ty1;          dp+=dstAdjust;        }      }    } else {      StitchInfo si=new StitchInfo();      for (i=0; i < h; i++) {        for (end=dp + w; dp < end; dp++) {          si.assign(this.stitchInfo);          turbulenceStitch(rgb,point_0,point_1,fSum,noise,si);          destPixels[dp]=((rgb[3] << 24) | (rgb[0] << 16) | (rgb[1] << 8)| (rgb[2]));          point_0+=tx0;          point_1+=tx1;        }        point_0+=ty0;        point_1+=ty1;        dp+=dstAdjust;      }    }  }  return dest;}  }
class C{  public BatchLookup(){}  }
class C{  public static Minutes minutesBetween(ReadableInstant start,ReadableInstant end){  int amount=BaseSingleFieldPeriod.between(start,end,DurationFieldType.minutes());  return Minutes.minutes(amount);}  }
class C{  protected static boolean saveXMLFile(String fileName,Document doc) throws IOException, Exception {  File xmlFile=null;  FileOutputStream fos=null;  Transformer transformer;  try {    xmlFile=new File(fileName);    fos=new FileOutputStream(xmlFile);    TransformerFactory transFactory=TransformerFactory.newInstance();    transformer=transFactory.newTransformer();    DOMSource source=new DOMSource(doc);    StreamResult destination=new StreamResult(fos);    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(source,destination);  } catch (  Exception excp) {    Activator.getDefault().log(excp.getMessage(),excp);    throw new Exception(String.format("%s%s",Messages.saveErrMsg,excp.getMessage()));  } finally {    if (fos != null) {      fos.close();    }  }  return true;}  }
class C{  public String type(){  return type;}  }
class C{  @SuppressWarnings({"BusyWait","TypeMayBeWeakened"}) private Collection<Integer> interactWithClient(IpcSharedMemoryServerEndpoint srv,boolean killClient) throws Exception {  ProcessStartResult clientStartRes=startSharedMemoryTestClient();  IpcSharedMemoryClientEndpoint clientEndpoint=(IpcSharedMemoryClientEndpoint)srv.accept();  Collection<Integer> shmemIds=new ArrayList<>();  InputStream is=null;  int interactionsCntBeforeClientKilling=5;  int i=1;  try {    is=clientEndpoint.inputStream();    shmemIds.add(clientEndpoint.inSpace().sharedMemoryId());    shmemIds.add(clientEndpoint.outSpace().sharedMemoryId());    for (; i < interactionsCntBeforeClientKilling * 2; i++) {      info("Before read.");      is.read();      Thread.sleep(RW_SLEEP_TIMEOUT);      if (killClient && i == interactionsCntBeforeClientKilling) {        info("Going to kill client.");        clientStartRes.proc().kill();      }    }  } catch (  IOException e) {    assertTrue("No IOException should be thrown if we do not kill client.",killClient);    assertTrue("No IOException should be thrown before client is killed.",i > interactionsCntBeforeClientKilling);    assertTrue(X.hasCause(e,IgniteCheckedException.class));    assertTrue(X.cause(e,IgniteCheckedException.class).getMessage().contains("Shared memory segment has been closed"));    clientStartRes.isKilledLatch().await();    return shmemIds;  } finally {    U.closeQuiet(is);  }  assertTrue("Interactions count should be bigger than interactionsCntBeforeClientKilling if we do not kill client.",i > interactionsCntBeforeClientKilling);  clientStartRes.proc().kill();  clientStartRes.isKilledLatch().await();  assertFalse("No IOException have been thrown while the client should be killed.",killClient);  return shmemIds;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static void main(String[] args) throws Exception {  Properties config=new Properties();  config.put(StreamsConfig.APPLICATION_ID_CONFIG,"not-looking-at-facebook");  config.put(StreamsConfig.BOOTSTRAP_SERVERS_CONFIG,"localhost:9092");  config.put(StreamsConfig.ZOOKEEPER_CONNECT_CONFIG,"localhost:2181");  config.put(StreamsConfig.KEY_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  config.put(StreamsConfig.VALUE_SERDE_CLASS_CONFIG,Serdes.String().getClass().getName());  Properties producerConfig=new Properties();  producerConfig.put("bootstrap.servers","localhost:9092");  producerConfig.put("key.serializer","org.apache.kafka.common.serialization.StringSerializer");  producerConfig.put("value.serializer","org.apache.kafka.common.serialization.StringSerializer");  String[] users={"Doyin","George","Mark"};  KStreamBuilder builder=new KStreamBuilder();  KTable<String,String> logons=builder.table("logons");  KStream<String,String> ticks=builder.stream("ticks");  KStream<String,String> notifications=ticks.leftJoin(logons,null).filter(null).filter(null).mapValues(null);  KTable<Windowed<String>,Long> notificationCounts=notifications.countByKey(TimeWindows.of("notificationCounts",60000L).advanceBy(10000L).until(60000L));  notificationCounts.toStream(null).to(Serdes.String(),Serdes.Long(),"metrics");  notifications.to("notifications");  new Thread(new LogonGenerator(users,producerConfig)).start();  new Thread(new TickGenerator(users,producerConfig)).start();  KafkaStreams streams=new KafkaStreams(builder,config);  streams.start();}  }
class C{  protected boolean typeSupported(String type){  for (  String key : mimeMap.keySet()) {    if (mimeMap.get(key).equals(type)) {      if (fileTypes.contains(key))       return true;    }  }  return false;}  }
class C{  public Rational(){  this(new BigInteger("0"),new BigInteger("1"));}  }
class C{  public int lineNumber(int i){  return ByteArray.readU16bit(info,i * 4 + 4);}  }
class C{  protected static FontUIResource _getSubTextFont(){  if (smallFont == null) {    try {      smallFont=new FontUIResource(Font.getFont("swing.plaf.metal.smallFont",new Font(FONT_DEFAULT,Font.PLAIN,FONT_SIZE - 2)));    } catch (    Exception e) {      smallFont=new FontUIResource(FONT_DEFAULT,Font.PLAIN,FONT_SIZE - 2);    }  }  return smallFont;}  }
class C{  public final boolean equalCondset(Object itemSet){  if ((itemSet == null) || !(itemSet.getClass().equals(this.getClass()))) {    return false;  }  if (m_items.length != ((ItemSet)itemSet).items().length) {    return false;  }  for (int i=0; i < m_items.length; i++) {    if (m_items[i] != ((ItemSet)itemSet).itemAt(i)) {      return false;    }  }  return true;}  }
class C{  private FindDurableQueueProcessor(DM dm,Set members){  super(dm,members);}  }
class C{  public void add(Rule rule){  rules.add(rule);}  }
class C{  public void connect() throws CouldntLoadDriverException, CouldntConnectException, InvalidDatabaseException, CouldntInitializeDatabaseException, InvalidDatabaseFormatException {  try {    m_database.connect();  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDriverException e) {    throw new CouldntLoadDriverException(e);  }catch (  com.google.security.zynamics.binnavi.Database.Exceptions.CouldntConnectException|LoadCancelledException e) {    throw new CouldntConnectException(e);  }catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.InvalidDatabaseException e) {    throw new InvalidDatabaseException(e);  }catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntInitializeDatabaseException e) {    throw new CouldntInitializeDatabaseException(e);  }catch (  com.google.security.zynamics.binnavi.Database.Exceptions.InvalidExporterDatabaseFormatException|com.google.security.zynamics.binnavi.Database.Exceptions.InvalidDatabaseVersionException e) {    throw new InvalidDatabaseFormatException(e);  }}  }
class C{  @Override public boolean contains(Object obj){  if (!(obj instanceof Struct)) {    return false;  }  Struct s=(Struct)obj;  if (!this.structType.equals(StructTypeImpl.typeFromStruct(s))) {    return false;  }  return containsFieldValues(s.getFieldValues());}  }
class C{  private boolean invalidated(int index,int prevTakeIndex,long dequeues,int length){  if (index < 0)   return false;  int distance=index - prevTakeIndex;  if (distance < 0)   distance+=length;  return dequeues > distance;}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return VALUE;case 2:  return VERSION;default :return null;}}  }
class C{  public static void send(Player player,Object packet){  if (player == null || packet == null)   return;  try {    Object craftPlayer=ReflectionUtils.PackageType.CRAFTBUKKIT_ENTITY.getClass("CraftPlayer").cast(player);    Object handle=player.getClass().getMethod("getHandle").invoke(craftPlayer);    Object playerConnection=handle.getClass().getField("playerConnection").get(handle);    playerConnection.getClass().getMethod("sendPacket",ReflectionUtils.PackageType.MINECRAFT_SERVER.getClass("Packet")).invoke(playerConnection,packet);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public boolean addCandidate(AffinityTopologyVersion topVer,GridCacheMvccCandidate cand){  lock();  try {    if (cands.isEmpty())     return false;    assert this.topVer.equals(topVer);    Deque<GridCacheMvccCandidate> deque=ensureDeque(cand.key());    GridCacheMvccCandidate old=F.first(deque);    deque.add(cand);    if (old != null && old.owner())     cand.setOwner();    return true;  }  finally {    unlock();  }}  }
class C{  public Vertex evaluateGREATERTHAN(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  if ((left.getData() instanceof Number) && (right.getData() instanceof Number)) {    if (((Number)left.getData()).doubleValue() > ((Number)right.getData()).doubleValue()) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if ((left.getData() instanceof String) && (right.getData() instanceof String)) {    if (((String)left.getData()).compareTo((String)right.getData()) > 0) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  if ((left.getData() instanceof java.util.Date) && (right.getData() instanceof java.util.Date)) {    if (((java.util.Date)left.getData()).compareTo((java.util.Date)right.getData()) > 0) {      return network.createVertex(Primitive.TRUE);    } else {      return network.createVertex(Primitive.FALSE);    }  }  return network.createVertex(Primitive.UNKNOWN);}  }
class C{  public Jerry children(){  List<Node> result=new NodeList(nodes.length);  for (  Node node : nodes) {    Node[] children=node.getChildElements();    Collections.addAll(result,children);  }  return new Jerry(this,result);}  }
class C{  public PluginEntry(String service,CordovaPlugin plugin){  this(service,plugin.getClass().getName(),true,plugin,null);}  }
class C{  public void configureOption2(String value){  super.configureOption2(value);  log.debug("configureOption2: " + value);}  }
class C{  public void testHashCode(){  int version=1;  int rounds=5;  int wordSize=16;  byte[] iv={1,2,3,4,5,6};  RC5ParameterSpec ps1=new RC5ParameterSpec(version,rounds,wordSize,iv);  RC5ParameterSpec ps2=new RC5ParameterSpec(version,rounds,wordSize,iv);  assertTrue("Equal objects should have the same hash codes.",ps1.hashCode() == ps2.hashCode());}  }
class C{  public static String toString(ByteBuffer bb){  byte[] bytes=new byte[bb.getInt()];  String s="";  try {    if (ArrayUtils.isNotEmpty(bytes)) {      bb.get(bytes);      s=new String(bytes,UTF8);    }  } catch (  Exception e) {    throw new RuntimeException("ByteBuffer not in expected format," + " failed to parse string bytes",e);  }  return s;}  }
class C{  public JLTransform(final int k,final TransformMode mode,boolean inMemory){  this.mode=mode;  this.k=k;  this.inMemory=inMemory;}  }
class C{  public void rotateImage(int degrees){  Matrix matrix=new Matrix();  matrix.postRotate(degrees);  mBitmap=Bitmap.createBitmap(mBitmap,0,0,mBitmap.getWidth(),mBitmap.getHeight(),matrix,true);  setImageBitmap(mBitmap);  mDegreesRotated+=degrees;  mDegreesRotated=mDegreesRotated % 360;}  }
class C{  public void write(Entity entity) throws SAXException {  String text=entity.getText();  if (lexicalHandler != null) {    String name=entity.getName();    lexicalHandler.startEntity(name);    write(text);    lexicalHandler.endEntity(name);  } else {    write(text);  }}  }
class C{  public void decrypt(int[] inbuffer,int[] outbuffer){  int nLen=inbuffer.length;  long lTemp;  for (int nI=0; nI < nLen; nI+=2) {    lTemp=BinConverter.intArrayToLong(inbuffer,nI);    lTemp=decryptBlock(lTemp);    BinConverter.longToIntArray(lTemp,outbuffer,nI);  }  ;}  }
class C{  public boolean isParameter(){  return param;}  }
class C{  private void writeFailureToPublicationLog(Throwable e){  StringBuilder sb=new StringBuilder();  sb.append("Archive generation failed!\n");  StringWriter sw=new StringWriter();  e.printStackTrace(new PrintWriter(sw));  sb.append(sw.toString());  writePublicationLogMessage(sb.toString());}  }
class C{  public final synchronized int currVariation(){  return game.currVariation();}  }
class C{  public static YouTubeExtractor create(OkHttpClient.Builder okHttpBuilder){  return new YouTubeExtractor(okHttpBuilder);}  }
class C{  String popBaseIndentifier(){  return (String)m_baseIdentifiers.pop();}  }
class C{  public FacebookOperationCanceledException(){  super();}  }
class C{  private static boolean isURIString(String p_uric){  if (p_uric == null) {    return false;  }  int end=p_uric.length();  char testChar='\0';  for (int i=0; i < end; i++) {    testChar=p_uric.charAt(i);    if (testChar == '%') {      if (i + 2 >= end || !isHex(p_uric.charAt(i + 1)) || !isHex(p_uric.charAt(i + 2))) {        return false;      } else {        i+=2;        continue;      }    }    if (isReservedCharacter(testChar) || isUnreservedCharacter(testChar)) {      continue;    } else {      return false;    }  }  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.556 -0500",hash_original_method="E0D86A54342F3A96677BD3492DB07E61",hash_generated_method="3BC2E46FCD45BBF5CB5F5ACFF64F945A") public SIPHeader parse() throws ParseException {  RouteList routeList=new RouteList();  if (debug)   dbg_enter("parse");  try {    this.lexer.match(TokenTypes.ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      Route route=new Route();      super.parse(route);      routeList.add(route);      this.lexer.SPorHT();      char la=lexer.lookAhead(0);      if (la == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (la == '\n')       break; else       throw createParseException("unexpected char");    }    return routeList;  }  finally {    if (debug)     dbg_leave("parse");  }}  }
class C{  public OneStepIterator(DTMAxisIterator iterator,int axis) throws javax.xml.transform.TransformerException {  super(null);  m_iterator=iterator;  m_axis=axis;  int whatToShow=DTMFilter.SHOW_ALL;  initNodeTest(whatToShow);}  }
class C{  public int hashCode(){  return 89 + set.hashCode();}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {  String data=transformer.transformToString(this);  transformer.getMsgMgr().message(this,data,m_terminate);  if (m_terminate)   transformer.getErrorListener().fatalError(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_STYLESHEET_DIRECTED_TERMINATION,null)));}  }
class C{  public boolean isApplet(){  return (applet != null);}  }
class C{  public static double readDoubleWithPreamble(String preamble,final EvolutionState state,final LineNumberReader reader){  DecodeReturn d=checkPreamble(preamble,state,reader);  Code.decode(d);  if (d.type != DecodeReturn.T_DOUBLE)   state.output.fatal("Line " + d.lineNumber + " has no double floating point number after preamble '"+ preamble+ "'. -->"+ d.data);  return d.d;}  }
class C{  public void initializePackageContents(){  if (isInitialized)   return;  isInitialized=true;  setName(eNAME);  setNsPrefix(eNS_PREFIX);  setNsURI(eNS_URI);  EcorePackage theEcorePackage=(EcorePackage)EPackage.Registry.INSTANCE.getEPackage(EcorePackage.eNS_URI);  TypeRefsPackage theTypeRefsPackage=(TypeRefsPackage)EPackage.Registry.INSTANCE.getEPackage(TypeRefsPackage.eNS_URI);  ETypeParameter containerTypeEClass_MT=addETypeParameter(containerTypeEClass,"MT");  EGenericType g1=createEGenericType(this.getTMember());  containerTypeEClass_MT.getEBounds().add(g1);  tModuleEClass.getESuperTypes().add(this.getSyntaxRelatedTElement());  tModuleEClass.getESuperTypes().add(this.getTAnnotableElement());  identifiableElementEClass.getESuperTypes().add(this.getTypableElement());  tExportableElementEClass.getESuperTypes().add(this.getIdentifiableElement());  tAnnotationStringArgumentEClass.getESuperTypes().add(this.getTAnnotationArgument());  tAnnotationTypeRefArgumentEClass.getESuperTypes().add(this.getTAnnotationArgument());  typeVariableEClass.getESuperTypes().add(this.getType());  inferenceVariableEClass.getESuperTypes().add(this.getTypeVariable());  tFunctionEClass.getESuperTypes().add(this.getDeclaredTypeWithAccessModifier());  tFunctionEClass.getESuperTypes().add(this.getSyntaxRelatedTElement());  typeEClass.getESuperTypes().add(this.getTExportableElement());  typeEClass.getESuperTypes().add(this.getTAnnotableElement());  declaredTypeWithAccessModifierEClass.getESuperTypes().add(this.getType());  declaredTypeWithAccessModifierEClass.getESuperTypes().add(this.getAccessibleTypeElement());  containerTypeEClass.getESuperTypes().add(this.getType());  g1=createEGenericType(this.getContainerType());  EGenericType g2=createEGenericType(this.getTMember());  g1.getETypeArguments().add(g2);  virtualBaseTypeEClass.getEGenericSuperTypes().add(g1);  moduleNamespaceVirtualTypeEClass.getESuperTypes().add(this.getType());  moduleNamespaceVirtualTypeEClass.getESuperTypes().add(this.getSyntaxRelatedTElement());  g1=createEGenericType(this.getContainerType());  g2=createEGenericType(this.getTMember());  g1.getETypeArguments().add(g2);  primitiveTypeEClass.getEGenericSuperTypes().add(g1);  g1=createEGenericType(this.getArrayLike());  primitiveTypeEClass.getEGenericSuperTypes().add(g1);  builtInTypeEClass.getESuperTypes().add(this.getType());  anyTypeEClass.getESuperTypes().add(this.getBuiltInType());  undefinedTypeEClass.getESuperTypes().add(this.getBuiltInType());  nullTypeEClass.getESuperTypes().add(this.getBuiltInType());  voidTypeEClass.getESuperTypes().add(this.getBuiltInType());  g1=createEGenericType(this.getContainerType());  g2=createEGenericType(this.getTStructMember());  g1.getETypeArguments().add(g2);  tStructuralTypeEClass.getEGenericSuperTypes().add(g1);  g1=createEGenericType(this.getSyntaxRelatedTElement());  tStructuralTypeEClass.getEGenericSuperTypes().add(g1);  g1=createEGenericType(this.getContainerType());  g2=createEGenericType(this.getTMember());  g1.getETypeArguments().add(g2);  tClassifierEClass.getEGenericSuperTypes().add(g1);  g1=createEGenericType(this.getSyntaxRelatedTElement());  tClassifierEClass.getEGenericSuperTypes().add(g1);  tObjectPrototypeEClass.getESuperTypes().add(this.getTClassifier());  tObjectPrototypeEClass.getESuperTypes().add(this.getDeclaredTypeWithAccessModifier());  tObjectPrototypeEClass.getESuperTypes().add(this.getArrayLike());  tn4ClassifierEClass.getESuperTypes().add(this.getTClassifier());  tn4ClassifierEClass.getESuperTypes().add(this.getDeclaredTypeWithAccessModifier());  tClassEClass.getESuperTypes().add(this.getTN4Classifier());  tInterfaceEClass.getESuperTypes().add(this.getTN4Classifier());  tMemberEClass.getESuperTypes().add(this.getIdentifiableElement());  tMemberEClass.getESuperTypes().add(this.getTAnnotableElement());  tMemberEClass.getESuperTypes().add(this.getSyntaxRelatedTElement());  tMemberWithAccessModifierEClass.getESuperTypes().add(this.getTMember());  tStructMemberEClass.getESuperTypes().add(this.getTMember());  tMethodEClass.getESuperTypes().add(this.getTFunction());  tMethodEClass.getESuperTypes().add(this.getTMemberWithAccessModifier());  tStructMethodEClass.getESuperTypes().add(this.getTMethod());  tStructMethodEClass.getESuperTypes().add(this.getTStructMember());  tFormalParameterEClass.getESuperTypes().add(this.getIdentifiableElement());  tFormalParameterEClass.getESuperTypes().add(this.getTAnnotableElement());  tFormalParameterEClass.getESuperTypes().add(this.getSyntaxRelatedTElement());  tAnonymousFormalParameterEClass.getESuperTypes().add(this.getTFormalParameter());  tFieldEClass.getESuperTypes().add(this.getTMemberWithAccessModifier());  tStructFieldEClass.getESuperTypes().add(this.getTField());  tStructFieldEClass.getESuperTypes().add(this.getTStructMember());  fieldAccessorEClass.getESuperTypes().add(this.getTMemberWithAccessModifier());  tGetterEClass.getESuperTypes().add(this.getFieldAccessor());  tGetterEClass.getESuperTypes().add(this.getTMemberWithAccessModifier());  tStructGetterEClass.getESuperTypes().add(this.getTGetter());  tStructGetterEClass.getESuperTypes().add(this.getTStructMember());  tSetterEClass.getESuperTypes().add(this.getFieldAccessor());  tSetterEClass.getESuperTypes().add(this.getTMemberWithAccessModifier());  tStructSetterEClass.getESuperTypes().add(this.getTSetter());  tStructSetterEClass.getESuperTypes().add(this.getTStructMember());  tEnumEClass.getESuperTypes().add(this.getDeclaredTypeWithAccessModifier());  tEnumEClass.getESuperTypes().add(this.getSyntaxRelatedTElement());  tEnumLiteralEClass.getESuperTypes().add(this.getSyntaxRelatedTElement());  tEnumLiteralEClass.getESuperTypes().add(this.getIdentifiableElement());  tVariableEClass.getESuperTypes().add(this.getTExportableElement());  tVariableEClass.getESuperTypes().add(this.getSyntaxRelatedTElement());  tVariableEClass.getESuperTypes().add(this.getTAnnotableElement());  tVariableEClass.getESuperTypes().add(this.getAccessibleTypeElement());  initEClass(typeDefsEClass,TypeDefs.class,"TypeDefs",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTypeDefs_Types(),this.getType(),null,"types",null,0,-1,TypeDefs.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(tModuleEClass,TModule.class,"TModule",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTModule_QualifiedName(),theEcorePackage.getEString(),"qualifiedName",null,0,1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_ProjectId(),theEcorePackage.getEString(),"projectId",null,0,1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_VendorID(),theEcorePackage.getEString(),"vendorID",null,0,1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_ModuleLoader(),theEcorePackage.getEString(),"moduleLoader",null,0,1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_N4jsdModule(),theEcorePackage.getEBoolean(),"n4jsdModule",null,0,1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_StaticPolyfillModule(),theEcorePackage.getEBoolean(),"staticPolyfillModule",null,0,1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_StaticPolyfillAware(),theEcorePackage.getEBoolean(),"staticPolyfillAware",null,0,1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_MainModule(),theEcorePackage.getEBoolean(),"mainModule",null,0,1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_PreLinkingPhase(),theEcorePackage.getEBoolean(),"preLinkingPhase",null,0,1,TModule.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTModule_TopLevelTypes(),this.getType(),null,"topLevelTypes",null,0,-1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTModule_Variables(),this.getTVariable(),null,"variables",null,0,-1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTModule_InternalTypes(),this.getType(),null,"internalTypes",null,0,-1,TModule.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTModule_ExposedInternalTypes(),this.getType(),null,"exposedInternalTypes",null,0,-1,TModule.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTModule_ModuleSpecifier(),theEcorePackage.getEString(),"moduleSpecifier",null,0,1,TModule.class,IS_TRANSIENT,IS_VOLATILE,!IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,IS_DERIVED,IS_ORDERED);  initEClass(typableElementEClass,TypableElement.class,"TypableElement",IS_ABSTRACT,IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(identifiableElementEClass,IdentifiableElement.class,"IdentifiableElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getIdentifiableElement_Name(),theEcorePackage.getEString(),"name",null,0,1,IdentifiableElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getIdentifiableElement__GetContainingModule(),this.getTModule(),"getContainingModule",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tExportableElementEClass,TExportableElement.class,"TExportableElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTExportableElement_ExportedName(),theEcorePackage.getEString(),"exportedName",null,0,1,TExportableElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTExportableElement__IsExported(),theEcorePackage.getEBoolean(),"isExported",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tAnnotationEClass,TAnnotation.class,"TAnnotation",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTAnnotation_Name(),theEcorePackage.getEString(),"name",null,0,1,TAnnotation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTAnnotation_Args(),this.getTAnnotationArgument(),null,"args",null,0,-1,TAnnotation.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  EOperation op=initEOperation(getTAnnotation__HasStringArgument__String(),theEcorePackage.getEBoolean(),"hasStringArgument",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"argumentValue",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTAnnotation__GetAnnotationAsString(),theEcorePackage.getEString(),"getAnnotationAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tAnnotationArgumentEClass,TAnnotationArgument.class,"TAnnotationArgument",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getTAnnotationArgument__GetArgAsString(),theEcorePackage.getEString(),"getArgAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tAnnotationStringArgumentEClass,TAnnotationStringArgument.class,"TAnnotationStringArgument",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTAnnotationStringArgument_Value(),theEcorePackage.getEString(),"value",null,0,1,TAnnotationStringArgument.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTAnnotationStringArgument__GetArgAsString(),theEcorePackage.getEString(),"getArgAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tAnnotationTypeRefArgumentEClass,TAnnotationTypeRefArgument.class,"TAnnotationTypeRefArgument",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTAnnotationTypeRefArgument_TypeRef(),theTypeRefsPackage.getTypeRef(),null,"typeRef",null,0,1,TAnnotationTypeRefArgument.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTAnnotationTypeRefArgument__GetArgAsString(),theEcorePackage.getEString(),"getArgAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tAnnotableElementEClass,TAnnotableElement.class,"TAnnotableElement",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTAnnotableElement_Annotations(),this.getTAnnotation(),null,"annotations",null,0,-1,TAnnotableElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(typeVariableEClass,TypeVariable.class,"TypeVariable",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTypeVariable_DeclaredCovariant(),theEcorePackage.getEBoolean(),"declaredCovariant",null,0,1,TypeVariable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTypeVariable_DeclaredContravariant(),theEcorePackage.getEBoolean(),"declaredContravariant",null,0,1,TypeVariable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTypeVariable_DeclaredUpperBound(),theTypeRefsPackage.getTypeRef(),null,"declaredUpperBound",null,0,1,TypeVariable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTypeVariable__GetVariance(),this.getVariance(),"getVariance",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeVariable__GetTypeVars(),this.getTypeVariable(),"getTypeVars",0,-1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTypeVariable__GetTypeAsString(),theEcorePackage.getEString(),"getTypeAsString",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getTypeVariable__GetTypeVariableAsString__TypeRef(),theEcorePackage.getEString(),"getTypeVariableAsString",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theTypeRefsPackage.getTypeRef(),"upperBound",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(inferenceVariableEClass,InferenceVariable.class,"InferenceVariable",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(tFunctionEClass,TFunction.class,"TFunction",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTFunction_External(),theEcorePackage.getEBoolean(),"external",null,0,1,TFunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTFunction_Fpars(),this.getTFormalParameter(),null,"fpars",null,0,-1,TFunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTFunction_ReturnTypeRef(),theTypeRefsPackage.getTypeRef(),null,"returnTypeRef",null,0,1,TFunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTFunction_TypeVars(),this.getTypeVariable(),null,"typeVars",null,0,-1,TFunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTFunction_DeclaredThisType(),theTypeRefsPackage.getTypeRef(),null,"declaredThisType",null,0,1,TFunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTFunction_DeclaredAsync(),theEcorePackage.getEBoolean(),"declaredAsync",null,0,1,TFunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTFunction_Constructor(),theEcorePackage.getEBoolean(),"constructor",null,0,1,TFunction.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTFunction__IsCallableConstructor(),theEcorePackage.getEBoolean(),"isCallableConstructor",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getTFunction__GetFparForArgIdx__int(),this.getTFormalParameter(),"getFparForArgIdx",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEInt(),"argIndex",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTFunction__GetFunctionAsString(),theEcorePackage.getEString(),"getFunctionAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTFunction__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(typeEClass,Type.class,"Type",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getType__IsProvidedByRuntime(),theEcorePackage.getEBoolean(),"isProvidedByRuntime",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__IsPolyfill(),theEcorePackage.getEBoolean(),"isPolyfill",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__IsStaticPolyfill(),theEcorePackage.getEBoolean(),"isStaticPolyfill",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__IsDynamizable(),theEcorePackage.getEBoolean(),"isDynamizable",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__IsArrayLike(),theEcorePackage.getEBoolean(),"isArrayLike",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__GetElementType(),theTypeRefsPackage.getTypeRef(),"getElementType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__GetTypeAccessModifier(),this.getTypeAccessModifier(),"getTypeAccessModifier",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__IsGeneric(),theEcorePackage.getEBoolean(),"isGeneric",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__GetTypeVars(),this.getTypeVariable(),"getTypeVars",0,-1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getType__GetVarianceOfTypeVar__int(),this.getVariance(),"getVarianceOfTypeVar",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEInt(),"idx",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__GetRawTypeAsString(),theEcorePackage.getEString(),"getRawTypeAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getType__GetTypeAsString(),theEcorePackage.getEString(),"getTypeAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(accessibleTypeElementEClass,AccessibleTypeElement.class,"AccessibleTypeElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getAccessibleTypeElement_DeclaredTypeAccessModifier(),this.getTypeAccessModifier(),"declaredTypeAccessModifier",null,0,1,AccessibleTypeElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getAccessibleTypeElement_DeclaredProvidedByRuntime(),theEcorePackage.getEBoolean(),"declaredProvidedByRuntime",null,0,1,AccessibleTypeElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getAccessibleTypeElement__IsProvidedByRuntime(),theEcorePackage.getEBoolean(),"isProvidedByRuntime",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getAccessibleTypeElement__GetTypeAccessModifier(),this.getTypeAccessModifier(),"getTypeAccessModifier",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getAccessibleTypeElement__IsExported(),theEcorePackage.getEBoolean(),"isExported",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(declaredTypeWithAccessModifierEClass,DeclaredTypeWithAccessModifier.class,"DeclaredTypeWithAccessModifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(containerTypeEClass,ContainerType.class,"ContainerType",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  g1=createEGenericType(theEcorePackage.getEMap());  g2=createEGenericType(this.getNameAndAccess());  g1.getETypeArguments().add(g2);  g2=createEGenericType();  g1.getETypeArguments().add(g2);  EGenericType g3=createEGenericType(this.getTMember());  g2.setEUpperBound(g3);  initEAttribute(getContainerType_OwnedMembersByNameAndAccess(),g1,"ownedMembersByNameAndAccess",null,0,1,ContainerType.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  g1=createEGenericType(containerTypeEClass_MT);  initEReference(getContainerType_OwnedMembers(),g1,null,"ownedMembers",null,0,-1,ContainerType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getContainerType_CallableCtor(),this.getTMethod(),null,"callableCtor",null,0,1,ContainerType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getContainerType_TypeVars(),this.getTypeVariable(),null,"typeVars",null,0,-1,ContainerType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getContainerType__GetOwnedCtor(),this.getTMethod(),"getOwnedCtor",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getContainerType__FindOwnedMember__String(),this.getTMember(),"findOwnedMember",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"name",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getContainerType__FindOwnedMember__String_boolean_boolean(),this.getTMember(),"findOwnedMember",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEString(),"name",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEBoolean(),"writeAccess",0,1,!IS_UNIQUE,IS_ORDERED);  addEParameter(op,theEcorePackage.getEBoolean(),"staticAccess",0,1,!IS_UNIQUE,IS_ORDERED);  op=initEOperation(getContainerType__GetOrCreateOwnedMembersByNameAndAccess(),null,"getOrCreateOwnedMembersByNameAndAccess",0,1,!IS_UNIQUE,IS_ORDERED);  g1=createEGenericType(theEcorePackage.getEMap());  g2=createEGenericType(this.getNameAndAccess());  g1.getETypeArguments().add(g2);  g2=createEGenericType();  g1.getETypeArguments().add(g2);  g3=createEGenericType(this.getTMember());  g2.setEUpperBound(g3);  initEOperation(op,g1);  initEClass(virtualBaseTypeEClass,VirtualBaseType.class,"VirtualBaseType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getVirtualBaseType_DeclaredOwnedMembers(),this.getTMember(),null,"declaredOwnedMembers",null,0,-1,VirtualBaseType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(moduleNamespaceVirtualTypeEClass,ModuleNamespaceVirtualType.class,"ModuleNamespaceVirtualType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getModuleNamespaceVirtualType_Module(),this.getTModule(),null,"module",null,0,1,ModuleNamespaceVirtualType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getModuleNamespaceVirtualType_DeclaredDynamic(),theEcorePackage.getEBoolean(),"declaredDynamic",null,0,1,ModuleNamespaceVirtualType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getModuleNamespaceVirtualType__IsProvidedByRuntime(),theEcorePackage.getEBoolean(),"isProvidedByRuntime",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(primitiveTypeEClass,PrimitiveType.class,"PrimitiveType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getPrimitiveType_AssignmentCompatible(),this.getPrimitiveType(),null,"assignmentCompatible",null,0,1,PrimitiveType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getPrimitiveType_AutoboxedType(),this.getTClassifier(),null,"autoboxedType",null,0,1,PrimitiveType.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(builtInTypeEClass,BuiltInType.class,"BuiltInType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getBuiltInType__GetTypeVars(),this.getTypeVariable(),"getTypeVars",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(anyTypeEClass,AnyType.class,"AnyType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getAnyType__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(undefinedTypeEClass,UndefinedType.class,"UndefinedType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(nullTypeEClass,NullType.class,"NullType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(voidTypeEClass,VoidType.class,"VoidType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(tStructuralTypeEClass,TStructuralType.class,"TStructuralType",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getTStructuralType__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tClassifierEClass,TClassifier.class,"TClassifier",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTClassifier_DeclaredCovariantConstructor(),theEcorePackage.getEBoolean(),"declaredCovariantConstructor",null,0,1,TClassifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTClassifier__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClassifier__GetSuperClassifiers(),this.getIterableOfTClassifier(),"getSuperClassifiers",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClassifier__GetSuperClassifierRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getSuperClassifierRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClassifier__GetImplementedOrExtendedInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getImplementedOrExtendedInterfaceRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClassifier__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tObjectPrototypeEClass,TObjectPrototype.class,"TObjectPrototype",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTObjectPrototype_SuperType(),theTypeRefsPackage.getParameterizedTypeRef(),null,"superType",null,0,1,TObjectPrototype.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTObjectPrototype_DeclaredFinal(),theEcorePackage.getEBoolean(),"declaredFinal",null,0,1,TObjectPrototype.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTObjectPrototype__GetOwnedCtor(),this.getTMethod(),"getOwnedCtor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTObjectPrototype__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(arrayLikeEClass,ArrayLike.class,"ArrayLike",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getArrayLike_DeclaredElementType(),theTypeRefsPackage.getTypeRef(),null,"declaredElementType",null,0,1,ArrayLike.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getArrayLike__GetElementType(),theTypeRefsPackage.getTypeRef(),"getElementType",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tn4ClassifierEClass,TN4Classifier.class,"TN4Classifier",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTN4Classifier_Dynamizable(),theEcorePackage.getEBoolean(),"dynamizable","true",0,1,TN4Classifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTN4Classifier_TypingStrategy(),this.getTypingStrategy(),"typingStrategy",null,0,1,TN4Classifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(tClassEClass,TClass.class,"TClass",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTClass_External(),theEcorePackage.getEBoolean(),"external",null,0,1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTClass_DeclaredAbstract(),theEcorePackage.getEBoolean(),"declaredAbstract",null,0,1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTClass_DeclaredN4JS(),theEcorePackage.getEBoolean(),"declaredN4JS",null,0,1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTClass_DeclaredFinal(),theEcorePackage.getEBoolean(),"declaredFinal",null,0,1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTClass_DeclaredPolyfill(),theEcorePackage.getEBoolean(),"declaredPolyfill",null,0,1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTClass_DeclaredStaticPolyfill(),theEcorePackage.getEBoolean(),"declaredStaticPolyfill",null,0,1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTClass_Observable(),theEcorePackage.getEBoolean(),"observable",null,0,1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTClass_SuperClassRef(),theTypeRefsPackage.getParameterizedTypeRef(),null,"superClassRef",null,0,1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTClass_ImplementedInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRef(),null,"implementedInterfaceRefs",null,0,-1,TClass.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTClass__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClass__GetSuperClass(),this.getTClass(),"getSuperClass",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClass__GetSuperClassifierRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getSuperClassifierRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClass__GetImplementedOrExtendedInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getImplementedOrExtendedInterfaceRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClass__IsPolyfill(),theEcorePackage.getEBoolean(),"isPolyfill",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClass__IsStaticPolyfill(),theEcorePackage.getEBoolean(),"isStaticPolyfill",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTClass__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tInterfaceEClass,TInterface.class,"TInterface",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTInterface_External(),theEcorePackage.getEBoolean(),"external",null,0,1,TInterface.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTInterface_SuperInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRef(),null,"superInterfaceRefs",null,0,-1,TInterface.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTInterface__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTInterface__GetSuperClassifierRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getSuperClassifierRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTInterface__GetImplementedOrExtendedInterfaceRefs(),theTypeRefsPackage.getParameterizedTypeRefIterable(),"getImplementedOrExtendedInterfaceRefs",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tMemberEClass,TMember.class,"TMember",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTMember_DeclaredFinal(),theEcorePackage.getEBoolean(),"declaredFinal",null,0,1,TMember.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTMember_DeclaredStatic(),theEcorePackage.getEBoolean(),"declaredStatic",null,0,1,TMember.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTMember_DeclaredOverride(),theEcorePackage.getEBoolean(),"declaredOverride",null,0,1,TMember.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  op=initEOperation(getTMember__GetContainingType(),null,"getContainingType",0,1,!IS_UNIQUE,IS_ORDERED);  g1=createEGenericType(this.getContainerType());  g2=createEGenericType();  g1.getETypeArguments().add(g2);  initEOperation(op,g1);  initEOperation(getTMember__GetMemberAccessModifier(),this.getMemberAccessModifier(),"getMemberAccessModifier",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__GetMemberType(),this.getMemberType(),"getMemberType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsField(),theEcorePackage.getEBoolean(),"isField",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsGetter(),theEcorePackage.getEBoolean(),"isGetter",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsSetter(),theEcorePackage.getEBoolean(),"isSetter",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsAccessor(),theEcorePackage.getEBoolean(),"isAccessor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsMethod(),theEcorePackage.getEBoolean(),"isMethod",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsConstructor(),theEcorePackage.getEBoolean(),"isConstructor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsOptional(),theEcorePackage.getEBoolean(),"isOptional",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsReadable(),theEcorePackage.getEBoolean(),"isReadable",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsWriteable(),theEcorePackage.getEBoolean(),"isWriteable",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__GetMemberAsString(),theEcorePackage.getEString(),"getMemberAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsFinal(),theEcorePackage.getEBoolean(),"isFinal",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsStatic(),theEcorePackage.getEBoolean(),"isStatic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMember__IsPolyfilled(),theEcorePackage.getEBoolean(),"isPolyfilled",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tMemberWithAccessModifierEClass,TMemberWithAccessModifier.class,"TMemberWithAccessModifier",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTMemberWithAccessModifier_HasNoBody(),theEcorePackage.getEBoolean(),"hasNoBody",null,0,1,TMemberWithAccessModifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTMemberWithAccessModifier_DeclaredMemberAccessModifier(),this.getMemberAccessModifier(),"declaredMemberAccessModifier",null,0,1,TMemberWithAccessModifier.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTMemberWithAccessModifier__GetMemberAccessModifier(),this.getMemberAccessModifier(),"getMemberAccessModifier",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tStructMemberEClass,TStructMember.class,"TStructMember",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTStructMember_DefinedMember(),this.getTStructMember(),null,"definedMember",null,0,1,TStructMember.class,IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTStructMember__GetDefaultMemberAccessModifier(),this.getMemberAccessModifier(),"getDefaultMemberAccessModifier",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTStructMember__IsStatic(),theEcorePackage.getEBoolean(),"isStatic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTStructMember__GetMemberAccessModifier(),this.getMemberAccessModifier(),"getMemberAccessModifier",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tMethodEClass,TMethod.class,"TMethod",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTMethod_DeclaredAbstract(),theEcorePackage.getEBoolean(),"declaredAbstract",null,0,1,TMethod.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTMethod_LacksThisOrSuperUsage(),theEcorePackage.getEBoolean(),"lacksThisOrSuperUsage",null,0,1,TMethod.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTMethod__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMethod__GetMemberType(),this.getMemberType(),"getMemberType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMethod__IsConstructor(),theEcorePackage.getEBoolean(),"isConstructor",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMethod__GetFunctionAsString(),theEcorePackage.getEString(),"getFunctionAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTMethod__GetMemberAsString(),theEcorePackage.getEString(),"getMemberAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tStructMethodEClass,TStructMethod.class,"TStructMethod",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(tFormalParameterEClass,TFormalParameter.class,"TFormalParameter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTFormalParameter_Variadic(),theEcorePackage.getEBoolean(),"variadic",null,0,1,TFormalParameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTFormalParameter_TypeRef(),theTypeRefsPackage.getTypeRef(),null,"typeRef",null,0,1,TFormalParameter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTFormalParameter__IsOptional(),theEcorePackage.getEBoolean(),"isOptional",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTFormalParameter__IsVariadicOrOptional(),theEcorePackage.getEBoolean(),"isVariadicOrOptional",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTFormalParameter__GetFormalParameterAsString(),theEcorePackage.getEString(),"getFormalParameterAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tAnonymousFormalParameterEClass,TAnonymousFormalParameter.class,"TAnonymousFormalParameter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getTAnonymousFormalParameter__GetName(),theEcorePackage.getEString(),"getName",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTAnonymousFormalParameter__GetDefinedName(),theEcorePackage.getEString(),"getDefinedName",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tFieldEClass,TField.class,"TField",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTField_Const(),theEcorePackage.getEBoolean(),"const",null,0,1,TField.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTField_HasExpression(),theEcorePackage.getEBoolean(),"hasExpression",null,0,1,TField.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTField_TypeRef(),theTypeRefsPackage.getTypeRef(),null,"typeRef",null,0,1,TField.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTField__IsOptional(),theEcorePackage.getEBoolean(),"isOptional",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTField__IsStatic(),theEcorePackage.getEBoolean(),"isStatic",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTField__IsReadable(),theEcorePackage.getEBoolean(),"isReadable",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTField__IsWriteable(),theEcorePackage.getEBoolean(),"isWriteable",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTField__GetMemberType(),this.getMemberType(),"getMemberType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTField__GetMemberAsString(),theEcorePackage.getEString(),"getMemberAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tStructFieldEClass,TStructField.class,"TStructField",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(fieldAccessorEClass,FieldAccessor.class,"FieldAccessor",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getFieldAccessor_DeclaredAbstract(),theEcorePackage.getEBoolean(),"declaredAbstract",null,0,1,FieldAccessor.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getFieldAccessor_DeclaredThisType(),theTypeRefsPackage.getTypeRef(),null,"declaredThisType",null,0,1,FieldAccessor.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getFieldAccessor__GetDeclaredTypeRef(),theTypeRefsPackage.getTypeRef(),"getDeclaredTypeRef",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getFieldAccessor__IsAbstract(),theEcorePackage.getEBoolean(),"isAbstract",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tGetterEClass,TGetter.class,"TGetter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTGetter_DeclaredTypeRef(),theTypeRefsPackage.getTypeRef(),null,"declaredTypeRef",null,0,1,TGetter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTGetter__GetMemberType(),this.getMemberType(),"getMemberType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTGetter__GetMemberAsString(),theEcorePackage.getEString(),"getMemberAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tStructGetterEClass,TStructGetter.class,"TStructGetter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEClass(tSetterEClass,TSetter.class,"TSetter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTSetter_Fpar(),this.getTFormalParameter(),null,"fpar",null,0,1,TSetter.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTSetter__GetDeclaredTypeRef(),theTypeRefsPackage.getTypeRef(),"getDeclaredTypeRef",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTSetter__IsReadable(),theEcorePackage.getEBoolean(),"isReadable",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTSetter__IsWriteable(),theEcorePackage.getEBoolean(),"isWriteable",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTSetter__GetMemberType(),this.getMemberType(),"getMemberType",0,1,!IS_UNIQUE,IS_ORDERED);  initEOperation(getTSetter__GetMemberAsString(),theEcorePackage.getEString(),"getMemberAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tStructSetterEClass,TStructSetter.class,"TStructSetter",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEOperation(getTStructSetter__IsWriteable(),theEcorePackage.getEBoolean(),"isWriteable",0,1,!IS_UNIQUE,IS_ORDERED);  initEClass(tEnumEClass,TEnum.class,"TEnum",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTEnum_External(),theEcorePackage.getEBoolean(),"external",null,0,1,TEnum.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEReference(getTEnum_Literals(),this.getTEnumLiteral(),null,"literals",null,0,-1,TEnum.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTEnum__GetTypeVars(),this.getTypeVariable(),"getTypeVars",0,-1,!IS_UNIQUE,IS_ORDERED);  initEClass(tEnumLiteralEClass,TEnumLiteral.class,"TEnumLiteral",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEAttribute(getTEnumLiteral_Value(),theEcorePackage.getEString(),"value",null,0,1,TEnumLiteral.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(syntaxRelatedTElementEClass,SyntaxRelatedTElement.class,"SyntaxRelatedTElement",IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getSyntaxRelatedTElement_AstElement(),theEcorePackage.getEObject(),null,"astElement",null,0,1,SyntaxRelatedTElement.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_COMPOSITE,IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEClass(tVariableEClass,TVariable.class,"TVariable",!IS_ABSTRACT,!IS_INTERFACE,IS_GENERATED_INSTANCE_CLASS);  initEReference(getTVariable_TypeRef(),theTypeRefsPackage.getTypeRef(),null,"typeRef",null,0,1,TVariable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,IS_COMPOSITE,!IS_RESOLVE_PROXIES,!IS_UNSETTABLE,IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTVariable_Const(),theEcorePackage.getEBoolean(),"const",null,0,1,TVariable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEAttribute(getTVariable_External(),theEcorePackage.getEBoolean(),"external",null,0,1,TVariable.class,!IS_TRANSIENT,!IS_VOLATILE,IS_CHANGEABLE,!IS_UNSETTABLE,!IS_ID,!IS_UNIQUE,!IS_DERIVED,IS_ORDERED);  initEOperation(getTVariable__GetVariableAsString(),theEcorePackage.getEString(),"getVariableAsString",0,1,!IS_UNIQUE,IS_ORDERED);  initEEnum(nullModifierEEnum,NullModifier.class,"NullModifier");  addEEnumLiteral(nullModifierEEnum,NullModifier.NA);  addEEnumLiteral(nullModifierEEnum,NullModifier.NULLABLE);  addEEnumLiteral(nullModifierEEnum,NullModifier.NOTNULL);  addEEnumLiteral(nullModifierEEnum,NullModifier.ISNULL);  initEEnum(undefModifierEEnum,UndefModifier.class,"UndefModifier");  addEEnumLiteral(undefModifierEEnum,UndefModifier.NA);  addEEnumLiteral(undefModifierEEnum,UndefModifier.MANDATORY);  addEEnumLiteral(undefModifierEEnum,UndefModifier.OPTIONAL);  addEEnumLiteral(undefModifierEEnum,UndefModifier.ISUNDEFINED);  initEEnum(typingStrategyEEnum,TypingStrategy.class,"TypingStrategy");  addEEnumLiteral(typingStrategyEEnum,TypingStrategy.DEFAULT);  addEEnumLiteral(typingStrategyEEnum,TypingStrategy.NOMINAL);  addEEnumLiteral(typingStrategyEEnum,TypingStrategy.STRUCTURAL);  addEEnumLiteral(typingStrategyEEnum,TypingStrategy.STRUCTURAL_FIELDS);  addEEnumLiteral(typingStrategyEEnum,TypingStrategy.STRUCTURAL_READ_ONLY_FIELDS);  addEEnumLiteral(typingStrategyEEnum,TypingStrategy.STRUCTURAL_WRITE_ONLY_FIELDS);  addEEnumLiteral(typingStrategyEEnum,TypingStrategy.STRUCTURAL_FIELD_INITIALIZER);  initEEnum(typeAccessModifierEEnum,TypeAccessModifier.class,"TypeAccessModifier");  addEEnumLiteral(typeAccessModifierEEnum,TypeAccessModifier.UNDEFINED);  addEEnumLiteral(typeAccessModifierEEnum,TypeAccessModifier.PRIVATE);  addEEnumLiteral(typeAccessModifierEEnum,TypeAccessModifier.PROJECT);  addEEnumLiteral(typeAccessModifierEEnum,TypeAccessModifier.PUBLIC_INTERNAL);  addEEnumLiteral(typeAccessModifierEEnum,TypeAccessModifier.PUBLIC);  initEEnum(memberAccessModifierEEnum,MemberAccessModifier.class,"MemberAccessModifier");  addEEnumLiteral(memberAccessModifierEEnum,MemberAccessModifier.UNDEFINED);  addEEnumLiteral(memberAccessModifierEEnum,MemberAccessModifier.PRIVATE);  addEEnumLiteral(memberAccessModifierEEnum,MemberAccessModifier.PROJECT);  addEEnumLiteral(memberAccessModifierEEnum,MemberAccessModifier.PROTECTED_INTERNAL);  addEEnumLiteral(memberAccessModifierEEnum,MemberAccessModifier.PROTECTED);  addEEnumLiteral(memberAccessModifierEEnum,MemberAccessModifier.PUBLIC_INTERNAL);  addEEnumLiteral(memberAccessModifierEEnum,MemberAccessModifier.PUBLIC);  initEEnum(memberTypeEEnum,MemberType.class,"MemberType");  addEEnumLiteral(memberTypeEEnum,MemberType.GETTER);  addEEnumLiteral(memberTypeEEnum,MemberType.SETTER);  addEEnumLiteral(memberTypeEEnum,MemberType.FIELD);  addEEnumLiteral(memberTypeEEnum,MemberType.METHOD);  initEDataType(iterableOfTClassifierEDataType,Iterable.class,"IterableOfTClassifier",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS,"java.lang.Iterable<? extends eu.numberfour.n4js.ts.types.TClassifier>");  initEDataType(varianceEDataType,Variance.class,"Variance",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS);  initEDataType(nameAndAccessEDataType,NameAndAccess.class,"NameAndAccess",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS);  initEDataType(memberListEDataType,List.class,"MemberList",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS,"java.util.List<? extends eu.numberfour.n4js.ts.types.TMember>");  initEDataType(tClassifierIterableEDataType,Iterable.class,"TClassifierIterable",IS_SERIALIZABLE,!IS_GENERATED_INSTANCE_CLASS,"java.lang.Iterable<eu.numberfour.n4js.ts.types.TClassifier>");  createResource(eNS_URI);}  }
class C{  public static void genkey(String alias,char[] password,String fileName,String dname){  StringBuffer cmd=new StringBuffer("-genkey -keyalg rsa");  cmd.append(" -alias ").append(alias);  cmd.append(" -dname \"").append(dname).append("\"");  cmd.append(" -keypass ").append(password).append(" -validity 999");  if (fileName.indexOf(' ') != -1)   cmd.append(" -keystore \"").append(fileName).append("\" -storepass ").append(password); else   cmd.append(" -keystore ").append(fileName).append(" -storepass ").append(password);  keytool(cmd.toString());}  }
class C{  @Override public IterationAttachObject copy(){  return new IterationAttachObject(this);}  }
class C{  public OutlinedObjects(){  super();  this.setPaint(Color.gray);}  }
class C{  public boolean readHeader(BinaryFile binFile){  try {    byte[] endianByte=binFile.readBytes(1,false);    if (endianByte[0] > 0)     endian=true;    binFile.byteOrder(!endian);    headerSectionLength=binFile.readShort();    byte[] filenameArray=binFile.readBytes(12,false);    filename=new String(filenameArray);    byte[] newwByte=binFile.readBytes(1,false);    neww=newwByte[0];    byte[] standardNumberArray=binFile.readBytes(15,false);    standardNumber=new String(standardNumberArray);    byte[] standardDateArray=binFile.readBytes(8,false);    standardDate=new String(standardDateArray);    classification=binFile.readChar();    byte[] countryArray=binFile.readBytes(2,false);    country=new String(countryArray);    byte[] releaseArray=binFile.readBytes(2,false);    release=new String(releaseArray);    locationSectionLocation=binFile.readInteger();    if (Debug.debugging("rpfheader")) {      Debug.output(this.toString());    }  } catch (  IOException e) {    Debug.error("RpfHeader: File IO Error while reading header information:\n" + e);    return false;  }catch (  FormatException f) {    Debug.error("RpfHeader: File IO Format error while reading header information:\n" + f);    return false;  }  return true;}  }
class C{  public void testConnection(){  String userid="****";  String domain="****";  String first_name="****";  String middle_i="****";  String last_name="****";  String password="****";  String community_code="****";  String language_code="****";  String email="****";  String adminid="****";  String client_id="****";  String client_secret="*****";  this.createUser(client_id,client_secret,userid,domain,first_name,middle_i,last_name,password,community_code,language_code,email,adminid);}  }
class C{  public void startProduction(ImageConsumer ic){  addConsumer(ic);}  }
class C{  OverviewCard findViewAtPoint(int x,int y){  int childCount=mSv.getChildCount();  for (int i=childCount - 1; i >= 0; i--) {    OverviewCard tv=(OverviewCard)mSv.getChildAt(i);    if (tv.getVisibility() == View.VISIBLE) {      if (mSv.isTransformedTouchPointInView(x,y,tv)) {        return tv;      }    }  }  return null;}  }
class C{  public void registerInput(String varName,JavaRDD<String> rdd,String format,boolean hasHeader,String delim,boolean fill,double fillValue,long rlen,long clen,long nnz) throws DMLRuntimeException {  CSVFileFormatProperties props=new CSVFileFormatProperties(hasHeader,delim,fill,fillValue,"");  registerInput(varName,rdd.mapToPair(new ConvertStringToLongTextPair()),format,rlen,clen,nnz,props);}  }
class C{  @Override public void onDismissed(Snackbar snackbar,@DismissEvent int event){  super.onDismissed(snackbar,event);  notifySnackbarCallback(snackbar,event);  notifySeparateCallbacks(snackbar,event);}  }
class C{  public JSONArray put(int index,int value) throws JSONException {  put(index,new Integer(value));  return this;}  }
class C{  void tokenize(String pat) throws javax.xml.transform.TransformerException {  tokenize(pat,null);}  }
class C{  public Message sendMessage(String content,String channelID) throws IOException, ParseException {  if (null != ws) {    content=StringEscapeUtils.escapeJson(content);    try {      String response=Requests.POST.makeRequest(DiscordEndpoints.CHANNELS + channelID + "/messages",new StringEntity("{\"content\":\"" + content + "\",\"mentions\":[]}","UTF-8"),new BasicNameValuePair("authorization",token),new BasicNameValuePair("content-type","application/json"));      JSONObject object1=(JSONObject)JSON_PARSER.parse(response);      String time=(String)object1.get("timestamp");      String messageID=(String)object1.get("id");      Channel channel=getChannelByID(channelID);      Message message=new Message(messageID,content,this.ourUser,channel,this.convertFromTimestamp(time));      channel.addMessage(message);      DiscordClient.this.dispatcher.dispatch(new MessageSendEvent(message));      return message;    } catch (    HTTP403Exception e) {      Discord4J.logger.error("Received 403 error attempting to send message; is your login correct?");      return null;    }  } else {    Discord4J.logger.error("Bot has not signed in yet!");    return null;  }}  }
class C{  public PCAResult(SortedEigenPairs eigenPairs){  super();  this.eigenPairs=eigenPairs;  this.eigenvalues=eigenPairs.eigenValues();  this.eigenvectors=eigenPairs.eigenVectors();}  }
class C{  public ToStringBuilder append(long[] array){  style.append(buffer,null,array,null);  return this;}  }
class C{  public SQLFeatureNotSupportedException(String reason){  super(reason,null,0);}  }
class C{  public GZipOutputStream(OutputStream out,int level) throws IOException {  super(out,new Deflater(level,true),512);  this.level=level;  this.fileSystem=FS_FAT;  crc.reset();}  }
class C{  private void runAction(MouseEvent e){  if (m_action != null) {    Display d=(Display)e.getSource();    d.getVisualization().run(m_action);  }}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";  db.execSQL(sql);}  }
class C{  AttributeCreatorImpl build(ElementKey<?,?> parent,AttributeKey<?> key,MetadataContext context){  Preconditions.checkNotNull(parent,"parent");  Preconditions.checkNotNull(key,"key");  TransformKey transformKey=TransformKey.forTransform(parent,key,context);synchronized (root) {    AttributeCreatorImpl creator=creators.get(transformKey);    if (creator == null) {      creator=new AttributeCreatorImpl(root,transformKey);      creators.put(transformKey,creator);      root.dirty();    }    return creator;  }}  }
class C{  public RestResult put(String path,String payload){  HttpPut httpPut=new HttpPut(formatUrl(path));  httpPut.setEntity(new StringEntity(payload,StandardCharsets.UTF_8));  return executeRequest(httpPut);}  }
class C{  protected void possiblyLaunchGwtSuperDevModeCodeServer(DebugEvent event){  IProcess runtimeProcess=(IProcess)event.getSource();  ILaunch launch=runtimeProcess.getLaunch();  ILaunchConfiguration launchConfig=launch.getLaunchConfiguration();  String launchMode=launch.getLaunchMode();  IServer server=null;  try {    server=ServerUtil.getServer(launchConfig);  } catch (  CoreException e) {    logError("possiblyLaunchGwtSuperDevModeCodeServer: Could get the WTP server.",e);    return;  }  if (server == null) {    logMessage("possiblyLaunchGwtSuperDevModeCodeServer: No WTP server runtime found.");    return;  }  IFacetedProject gwtFacetedProject=GwtFacetUtils.getGwtFacetedProject(server);  if (gwtFacetedProject == null) {    logMessage("possiblyLaunchGwtSuperDevModeCodeServer: Does not have a GWT Facet.");    return;  }  if (!GWTProjectProperties.getFacetSyncCodeServer(gwtFacetedProject.getProject())) {    logMessage("possiblyLaunchGwtSuperDevModeCodeServer: GWT Facet project properties, the code server sync is off.");    return;  }  String launcherDir=getLauncherDirectory(server,launchConfig,gwtFacetedProject);  String launcherId=setLauncherIdToWtpRunTimeLaunchConfig(launchConfig);  logMessage("possiblyLaunchGwtSuperDevModeCodeServer: Launching GWT Super Dev Mode CodeServer. launcherId=" + launcherId + " launcherDir="+ launcherDir);  if (launchMode == null) {    launchMode="run";  }  if (launcherId == null) {    logMessage("possiblyLaunchGwtSuperDevModeCodeServer: No launcherId.");  }  addServerUrlsToDevModeView(launch);  GwtSuperDevModeCodeServerLaunchUtil.launch(gwtFacetedProject.getProject(),launchMode,launcherDir,launcherId);}  }
class C{  public Collection values(){  if (values == null) {    values=new ReferenceValues(this);  }  return values;}  }
class C{  private void parseTrailerHeaders() throws IOException {  try {    this.footers=AbstractMessageParser.parseHeaders(in,-1,-1,null);  } catch (  HttpException e) {    IOException ioe=new MalformedChunkCodingException("Invalid footer: " + e.getMessage());    ExceptionUtils.initCause(ioe,e);    throw ioe;  }}  }
class C{  private static boolean isLargeTablet(Context context){  return context.getResources().getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;}  }
class C{  boolean isRemoved(){  assert Thread.holdsLock(mux);  return rmv;}  }
class C{  private static <W>ArrayEncodedProbBackoffLm<W> secondPassArrayEncoded(final ConfigOptions opts,final LmReader<ProbBackoffPair,ArpaLmReaderCallback<ProbBackoffPair>> lmReader,final WordIndexer<W> wordIndexer,final FirstPassCallback<ProbBackoffPair> valueAddingCallback,final LongArray[] numNgramsForEachWord,final boolean reversed,final boolean compress){  final boolean contextEncoded=false;  final NgramMap<ProbBackoffPair> map=buildMapArpa(opts,lmReader,wordIndexer,valueAddingCallback,numNgramsForEachWord,contextEncoded,reversed,compress);  return new ArrayEncodedProbBackoffLm<W>(map.getMaxNgramOrder(),wordIndexer,map,opts);}  }
class C{  public ProjectFileEditorInput(IFile file){  super(file);}  }
class C{  public void m(){}  }
class C{  private void insertPlainInsnBefore(SsaInsn insn,RegisterSpecList newSources,RegisterSpec newResult,int newOpcode,Constant cst){  Insn originalRopInsn=insn.getOriginalRopInsn();  Rop newRop;  if (newOpcode == RegOps.MOVE_RESULT_PSEUDO) {    newRop=Rops.opMoveResultPseudo(newResult.getType());  } else {    newRop=Rops.ropFor(newOpcode,newResult,newSources,cst);  }  Insn newRopInsn;  if (cst == null) {    newRopInsn=new PlainInsn(newRop,originalRopInsn.getPosition(),newResult,newSources);  } else {    newRopInsn=new PlainCstInsn(newRop,originalRopInsn.getPosition(),newResult,newSources,cst);  }  NormalSsaInsn newInsn=new NormalSsaInsn(newRopInsn,insn.getBlock());  List<SsaInsn> insns=insn.getBlock().getInsns();  insns.add(insns.lastIndexOf(insn),newInsn);  ssaMeth.onInsnAdded(newInsn);}  }
class C{  private synchronized void block(boolean tf){  if (tf) {    try {      if (m_splitThread.isAlive()) {        wait();      }    } catch (    InterruptedException ex) {    }  } else {    notifyAll();  }}  }
class C{  public void validate(FacesContext facesContext,UIComponent component,Object value) throws ValidatorException {  if (value == null) {    return;  }  String str=value.toString();  if (str.length() == 0) {    return;  }  if (ADMValidator.isUrl(str)) {    return;  }  Object[] args=null;  String label=JSFUtils.getLabel(component);  if (label != null) {    args=new Object[]{label};  }  ValidationException e=new ValidationException(ValidationException.ReasonEnum.URL,label,null);  String text=JSFUtils.getText(e.getMessageKey(),args,facesContext);  throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));}  }
class C{  @Override public boolean contains(Point2D.Double p){  Rectangle2D.Double r=(Rectangle2D.Double)rectangle.clone();  if (get(IS_QUADRATIC)) {    double side=Math.max(r.width,r.height);    r.x-=(side - r.width) / 2;    r.y-=(side - r.height) / 2;    r.width=r.height=side;  }  double grow=AttributeKeys.getPerpendicularFillGrowth(this);  if (grow != 0d) {    double w=r.width / 2d;    double h=r.height / 2d;    double lineLength=Math.sqrt(w * w + h * h);    double scale=grow / lineLength;    double yb=scale * w;    double xa=scale * h;    double growx, growy;    growx=((yb * yb) / xa + xa);    growy=((xa * xa) / yb + yb);    Geom.grow(r,growx,growy);  }  Path2D.Double diamond=new Path2D.Double();  diamond.moveTo((r.x + r.width / 2),r.y);  diamond.lineTo((r.x + r.width),(r.y + r.height / 2));  diamond.lineTo((r.x + r.width / 2),(r.y + r.height));  diamond.lineTo(r.x,(r.y + r.height / 2));  diamond.closePath();  return diamond.contains(p);}  }
class C{  public void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){  propertyChangeSupport.addPropertyChangeListener(propertyName,listener);}  }
class C{  public static Map<String,Object> createTelecomNumber(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  Timestamp now=UtilDateTime.nowTimestamp();  List<GenericValue> toBeStored=FastList.newInstance();  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_CREATE");  if (result.size() > 0)   return result;  String contactMechTypeId="TELECOM_NUMBER";  String newCmId=null;  try {    newCmId=delegator.getNextSeqId("ContactMech");  } catch (  IllegalArgumentException e) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_id_generation_failure",locale));  }  GenericValue tempContactMech=delegator.makeValue("ContactMech",UtilMisc.toMap("contactMechId",newCmId,"contactMechTypeId",contactMechTypeId));  toBeStored.add(tempContactMech);  toBeStored.add(delegator.makeValue("PartyContactMech",UtilMisc.toMap("partyId",partyId,"contactMechId",newCmId,"fromDate",now,"roleTypeId",context.get("roleTypeId"),"allowSolicitation",context.get("allowSolicitation"),"extension",context.get("extension"))));  toBeStored.add(delegator.makeValue("TelecomNumber",UtilMisc.toMap("contactMechId",newCmId,"countryCode",context.get("countryCode"),"areaCode",context.get("areaCode"),"contactNumber",context.get("contactNumber"))));  try {    delegator.storeAll(toBeStored);  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_create_contact_info_write",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  result.put("contactMechId",newCmId);  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.ENUM_LITERAL__NAME:    setName(NAME_EDEFAULT);  return;case DatatypePackage.ENUM_LITERAL__DESCRIPTION:setDescription(DESCRIPTION_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean isEmpty(){  return mEventQueue.isEmpty();}  }
class C{  public static JsonNode inferMapping(Schema schema){  if (schema == null) {    throw new DataException("Cannot infer mapping without schema.");  }  String schemaName=schema.name();  Object defaultValue=schema.defaultValue();  if (schemaName != null) {switch (schemaName) {case Date.LOGICAL_NAME:case Time.LOGICAL_NAME:case Timestamp.LOGICAL_NAME:      return inferPrimitive(ElasticsearchSinkConnectorConstants.DATE_TYPE,defaultValue);case Decimal.LOGICAL_NAME:    return inferPrimitive(ElasticsearchSinkConnectorConstants.DOUBLE_TYPE,defaultValue);}}Schema keySchema;Schema valueSchema;Schema.Type schemaType=schema.type();ObjectNode properties=JsonNodeFactory.instance.objectNode();ObjectNode fields=JsonNodeFactory.instance.objectNode();switch (schemaType) {case ARRAY:valueSchema=schema.valueSchema();return inferMapping(valueSchema);case MAP:keySchema=schema.keySchema();valueSchema=schema.valueSchema();properties.set("properties",fields);fields.set(MAP_KEY,inferMapping(keySchema));fields.set(MAP_VALUE,inferMapping(valueSchema));return properties;case STRUCT:properties.set("properties",fields);for (Field field : schema.fields()) {String fieldName=field.name();Schema fieldSchema=field.schema();fields.set(fieldName,inferMapping(fieldSchema));}return properties;default :return inferPrimitive(ElasticsearchSinkConnectorConstants.TYPES.get(schemaType),defaultValue);}}  }
class C{  public SnmpStringFixed(int l,Byte[] v) throws IllegalArgumentException {  if ((l <= 0) || (v == null)) {    throw new IllegalArgumentException();  }  int length=Math.min(l,v.length);  value=new byte[l];  for (int i=0; i < length; i++) {    value[i]=v[i].byteValue();  }  for (int i=length; i < l; i++) {    value[i]=0;  }}  }
class C{  public void deleteArc(int nParent,int nChild) throws Exception {  if (m_bNeedsUndoAction) {    addUndoAction(new DeleteArcAction(nParent,nChild));  }  int nParentCard=m_ParentSets[nChild].getCardinalityOfParents();  int nTargetCard=m_Instances.attribute(nChild).numValues();  nParentCard=nParentCard / nTargetCard;  Estimator[] distribution2=new Estimator[nParentCard];  for (int iParent=0; iParent < nParentCard; iParent++) {    distribution2[iParent]=m_Distributions[nChild][iParent];  }  m_Distributions[nChild]=distribution2;  m_ParentSets[nChild].deleteParent(nParent,m_Instances);}  }
class C{  public static ByteString copyFrom(long l){  return ByteString.copyFrom(Longs.toByteArray(l));}  }
class C{  public static DynamicSchema parseFrom(byte[] schemaDescBuf) throws DescriptorValidationException, IOException {  return new DynamicSchema(FileDescriptorSet.parseFrom(schemaDescBuf));}  }
class C{  protected static void succeed(){  System.exit(0);}  }
class C{  public static <K>int calculateNumStreamsToRebalance(K nodeToRebalance,Map<K,Integer> loadDistribution,int rebalanceWaterMark,double tolerancePercentage){  Integer myLoad=loadDistribution.get(nodeToRebalance);  if (null == myLoad || myLoad <= rebalanceWaterMark) {    return 0;  }  long totalLoad=0L;  int numNodes=loadDistribution.size();  for (  Map.Entry<K,Integer> entry : loadDistribution.entrySet()) {    if (null == entry.getKey() || null == entry.getValue()) {      continue;    }    totalLoad+=entry.getValue();  }  double averageLoad=((double)totalLoad) / numNodes;  long permissibleLoad=Math.max(1L,(long)Math.ceil(averageLoad + averageLoad * tolerancePercentage / 100.0f));  if (myLoad <= permissibleLoad) {    return 0;  }  return Math.max(0,myLoad - (int)Math.ceil(averageLoad));}  }
class C{  private Node<E> nextNode(Node<E> p){  for (; ; ) {    Node<E> s=p.next;    if (s == p)     return head.next;    if (s == null || s.item != null)     return s;    p=s;  }}  }
class C{  TemplateElement asSingleElement(){  if (count == 0) {    return new TextBlock(CollectionUtils.EMPTY_CHAR_ARRAY,false);  } else {    TemplateElement first=buffer[0];    if (count == 1) {      return first;    } else {      MixedContent mixedContent=new MixedContent();      mixedContent.setChildren(this);      mixedContent.setLocation(first.getTemplate(),first,getLast());      return mixedContent;    }  }}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  protected void onCollisionBegin(Entity a,Entity b){}  }
class C{  @Override public void preProcess() throws Exception {  if (m_ResultProducer == null) {    throw new Exception("No ResultProducer set");  }  m_ResultProducer.setResultListener(this);  findKeyIndex();  if (m_KeyIndex == -1) {    throw new Exception("No key field called " + m_KeyFieldName + " produced by "+ m_ResultProducer.getClass().getName());  }  m_ResultProducer.preProcess();}  }
class C{  BugSet query(SortableValue keyValuePair){  if (doneMap.containsKey(keyValuePair)) {    return doneMap.get(keyValuePair);  }  ArrayList<BugLeafNode> bugs=new ArrayList<BugLeafNode>();  for (  BugLeafNode b : mainList) {    if (b.matches(keyValuePair)) {      bugs.add(b);    }  }  BugSet temp=new BugSet(bugs);  doneMap.put(keyValuePair,temp);  return temp;}  }
class C{  public Object run(String scriptText,String fileName,List list) throws CompilationFailedException {  String[] args=new String[list.size()];  list.toArray(args);  return run(scriptText,fileName,args);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("SaveOrigDocDataDocInput[");  buffer.append("procId = ").append(procId);  buffer.append(", procName = ").append(procName);  buffer.append("]");  return buffer.toString();}  }
class C{  public static void applyToOrSetInvisible(ImageHolder imageHolder,ImageView imageView,String tag){  boolean imageSet=applyTo(imageHolder,imageView,tag);  if (imageView != null) {    if (imageSet) {      imageView.setVisibility(View.VISIBLE);    } else {      imageView.setVisibility(View.INVISIBLE);    }  }}  }
class C{  public int[] shuffle(){  int[] ans=Arrays.copyOf(nums,nums.length);  for (int i=1; i < nums.length; i++) {    swap(ans,i,random.nextInt(i + 1));  }  return ans;}  }
class C{  @Override public void execute(ExecutionContext ec) throws DMLRuntimeException {  _runID=_idSeq.getNextID();  ExternalFunctionInvocationInstruction inst=null;  for (int i=0; i < _inst.size(); i++) {    try {      inst=(ExternalFunctionInvocationInstruction)_inst.get(i);      executeInstruction(ec,inst);    } catch (    Exception e) {      throw new DMLRuntimeException(this.printBlockErrorLocation() + "Error evaluating instruction " + i+ " in external function programBlock. inst: "+ inst.toString(),e);    }  }  checkOutputParameters(ec.getVariables());}  }
class C{  public static String makeJsString(String str){  String escapedStr=str.replace("\\","\\\\").replace("\"","\\\"").replace("\'","\\\'").replace("\n","\\n");  return "\"" + escapedStr + "\"";}  }
class C{  public Map<String,RawProtein<T>> process(Map<String,RawProtein<T>> proteinIdToRawMatchMap){  if (passLevels == null) {    throw new IllegalStateException("The ProfilePostProcessing class has not been correctly initialised. A List of acceptable Levels must be passed in.");  }  if (passLevels.size() == 0) {    LOGGER.warn("The ProfilePostProcessing class has been initialised such that NO matches will pass. (The list of acceptable levels is empty).");  }  Map<String,RawProtein<T>> filteredMatches=new HashMap<String,RawProtein<T>>();  for (  String candidateProteinId : proteinIdToRawMatchMap.keySet()) {    RawProtein<T> candidateRawProtein=proteinIdToRawMatchMap.get(candidateProteinId);    RawProtein<T> filteredProtein=new RawProtein<T>(candidateRawProtein.getProteinIdentifier());    for (    T rawMatch : candidateRawProtein.getMatches()) {      if (passLevels.contains(rawMatch.getLevel())) {        filteredProtein.addMatch(rawMatch);      }    }    if (filteredProtein.getMatches() != null && filteredProtein.getMatches().size() > 0) {      filteredMatches.put(candidateProteinId,filteredProtein);    }  }  return filteredMatches;}  }
class C{  public LinkedList<Patch> patch_make(String text1,String text2,LinkedList<Diff> diffs){  return patch_make(text1,diffs);}  }
class C{  static public final int random(int range){  return random.nextInt(range + 1);}  }
class C{  public final void handleDownloads(String file){  final String[] filenameArray=file.split("\\.");  final String extension="." + filenameArray[filenameArray.length - 1];  file=file.replace("file://","");  if (extension.equals(Preferences.CATALOG_FILE_EXTENSION)) {    mCurrentCatalogDownloadId=-1;    if (file.contains(getContext().getExternalCacheDir().getPath())) {      file=moveToFolder(file,FileUtils.getCatalogFolder(getContext()).getAbsolutePath());    }    activateCatalog(file);  }}  }
class C{  public double optDouble(int index,double defaultValue){  try {    return this.getDouble(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public ImmutableByteBufferInputStream(ByteBuffer bb){  setBuffer(bb.slice());}  }
class C{  public void sendPairingKey(String pairingKey){  for (  DeviceService service : services.values()) {    service.sendPairingKey(pairingKey);  }}  }
class C{  private void initComponents(){  value=new JTextField();}  }
class C{  public void processExaminedGameBecameSetup(){  Game[] activeGames=connector.getGameService().getAllActiveGames();  for (  Game game : activeGames) {    if (game.isInState(Game.EXAMINING_STATE)) {      if (LOG.isDebugEnabled()) {        LOG.debug("Handling transition from examined game to bsetup.");      }      SetupGame setupGame=new SetupGame();      game.overwrite(setupGame,true);      setupGame.setPieceCount(WHITE,PAWN,1);      setupGame.setPieceCount(WHITE,KNIGHT,1);      setupGame.setPieceCount(WHITE,BISHOP,1);      setupGame.setPieceCount(WHITE,ROOK,1);      setupGame.setPieceCount(WHITE,QUEEN,1);      setupGame.setPieceCount(WHITE,KING,1);      setupGame.setPieceCount(BLACK,PAWN,1);      setupGame.setPieceCount(BLACK,KNIGHT,1);      setupGame.setPieceCount(BLACK,BISHOP,1);      setupGame.setPieceCount(BLACK,ROOK,1);      setupGame.setPieceCount(BLACK,QUEEN,1);      setupGame.setPieceCount(BLACK,KING,1);      setupGame.clearState(Game.EXAMINING_STATE);      setupGame.clearState(Game.OBSERVING_EXAMINED_STATE);      setupGame.clearState(Game.OBSERVING_STATE);      setupGame.addState(Game.SETUP_STATE);      setupGame.addState(Game.DROPPABLE_STATE);      connector.getGameService().addGame(setupGame);      connector.getGameService().fireExaminedGameBecameSetup(game.getId());      break;    }  }}  }
class C{  public void mouseMoved(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  private DurationAccumulator[] collectStatistics(Map<Integer,Long> data,DurationAccumulator overall,int maxMsgId){  DurationAccumulator[] msgRange=new DurationAccumulator[STATISTICS_SEGMENTS_CNT];  for (int i=0; i < msgRange.length; i++)   msgRange[i]=new DurationAccumulator();  for (  Map.Entry<Integer,Long> e : data.entrySet()) {    long duration=e.getValue();    int msgId=e.getKey();    overall.duration(duration);    assert msgId <= maxMsgId : "msgId=" + msgId + ", maxMsgId="+ maxMsgId;    int idx=(msgId - 1) * msgRange.length / maxMsgId;    if (idx >= msgRange.length)     idx=msgRange.length - 1;    msgRange[idx].duration(duration);  }  return msgRange;}  }
class C{  public DirichletEstimatorParamsEditor(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:17.125 -0500",hash_original_method="4C81A08F59ACE9D4E0294DB069346160",hash_generated_method="AB892100D0FF299C9A57061325B5ABD7") public static String writeDateTime(Calendar cal){  TimeZone tz=TimeZone.getTimeZone("GMT");  GregorianCalendar c=new GregorianCalendar(tz);  c.setTimeInMillis(cal.getTimeInMillis());  return writeDateTime(c,true);}  }
class C{  private JFreeChart createChart(XYDataset dataset){  chart=ChartFactory.createTimeSeriesChart("OBD Data Graph","Time","Value",dataset,true,true,false);  chart.setBackgroundPaint(Color.white);  XYPlot plot=(XYPlot)chart.getPlot();  plot.setBackgroundPaint(Color.lightGray);  plot.setDomainGridlinePaint(Color.white);  plot.setRangeGridlinePaint(Color.white);  plot.setDomainCrosshairVisible(true);  plot.setRangeCrosshairVisible(true);  plot.getDomainAxis().setTickLabelFont(legendFont);  DateAxis axis=(DateAxis)plot.getDomainAxis();  axis.setDateFormatOverride(new SimpleDateFormat("HH:mm:ss"));  chart.getLegend().setItemFont(legendFont);  return chart;}  }
class C{  public String encodeMessage(){  String retval;  if (requestLine != null) {    this.setRequestLineDefaults();    retval=requestLine.encode() + super.encodeSIPHeaders();  } else   if (this.isNullRequest()) {    retval="\r\n\r\n";  } else   retval=super.encodeSIPHeaders();  return retval;}  }
class C{  protected String doIt() throws Exception {  log.info("C_BPartner_ID=" + p_C_BPartner_ID + ", AD_Org_ID="+ p_AD_Org_ID+ ", AD_OrgType_ID="+ p_AD_OrgType_ID+ ", AD_Role_ID="+ p_AD_Role_ID);  if (p_C_BPartner_ID == 0)   throw new AdempiereUserError("No Business Partner ID");  MBPartner bp=new MBPartner(getCtx(),p_C_BPartner_ID,get_TrxName());  if (bp.get_ID() == 0)   throw new AdempiereUserError("Business Partner not found - C_BPartner_ID=" + p_C_BPartner_ID);  MBPartnerLocation[] locs=bp.getLocations(false);  if (locs == null || locs.length == 0)   throw new IllegalArgumentException("Business Partner has no Location");  int C_Location_ID=locs[0].getC_Location_ID();  if (C_Location_ID == 0)   throw new IllegalArgumentException("Business Partner Location has no Address");  boolean newOrg=p_AD_Org_ID == 0;  MOrg org=new MOrg(getCtx(),p_AD_Org_ID,get_TrxName());  if (newOrg) {    org.setValue(bp.getValue());    org.setName(bp.getName());    org.setDescription(bp.getDescription());    if (!org.save())     throw new Exception("Organization not saved");  } else {    int C_BPartner_ID=org.getLinkedC_BPartner_ID(get_TrxName());    if (C_BPartner_ID > 0)     throw new IllegalArgumentException("Organization '" + org.getName() + "' already linked (to C_BPartner_ID="+ C_BPartner_ID+ ")");  }  p_AD_Org_ID=org.getAD_Org_ID();  MOrgInfo oInfo=org.getInfo();  oInfo.setAD_OrgType_ID(p_AD_OrgType_ID);  if (newOrg)   oInfo.setC_Location_ID(C_Location_ID);  MWarehouse wh=null;  if (!newOrg) {    MWarehouse[] whs=MWarehouse.getForOrg(getCtx(),p_AD_Org_ID);    if (whs != null && whs.length > 0)     wh=whs[0];  }  if (wh == null) {    wh=new MWarehouse(org);    if (!wh.save(get_TrxName()))     throw new Exception("Warehouse not saved");  }  MLocator mLoc=wh.getDefaultLocator();  if (mLoc == null) {    mLoc=new MLocator(wh,"Standard");    mLoc.setIsDefault(true);    mLoc.save(get_TrxName());  }  oInfo.setM_Warehouse_ID(wh.getM_Warehouse_ID());  if (!oInfo.save(get_TrxName()))   throw new Exception("Organization Info not saved");  bp.setAD_OrgBP_ID(p_AD_Org_ID);  if (bp.getAD_Org_ID() != 0)   bp.setClientOrg(bp.getAD_Client_ID(),0);  if (!bp.save())   throw new Exception("Business Partner not updated");  if (p_AD_Role_ID != 0) {    boolean found=false;    MRoleOrgAccess[] orgAccesses=MRoleOrgAccess.getOfOrg(getCtx(),p_AD_Org_ID);    for (int i=0; i < orgAccesses.length; i++) {      if (orgAccesses[i].getAD_Role_ID() == p_AD_Role_ID)       found=true; else       orgAccesses[i].delete(true);    }    if (!found) {      MRoleOrgAccess orgAccess=new MRoleOrgAccess(org,p_AD_Role_ID);      orgAccess.save(get_TrxName());    }  }  MRole.getDefault(getCtx(),true);  return "Business Partner - Organization Link created";}  }
class C{  public void putOrderedSetOf(byte tag,DerEncoder[] set) throws IOException {  putOrderedSet(tag,set,lexOrder);}  }
class C{  public CGraphToolBar(final JFrame parent,final CGraphPanel graphPanel,final ZyGraph graph,final List<INaviModule> modules){  Preconditions.checkNotNull(parent,"IE01622: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE01623: Graph argument can not be null");  Preconditions.checkNotNull(graphPanel,"IE01624: Action provider argument can't be null");  m_settings=graph.getSettings();  createButtons(parent,graph,graphPanel);  m_navigationPanel=new CGraphToolBarNavigationPanel(graph,modules,parent);  add(m_navigationPanel);  setFloatable(false);  m_settings.getDisplaySettings().addListener(m_internalListener);}  }
class C{  public CoderResult error(){  assert error != null;  return error;}  }
class C{  public static SyncInfo removableVersions(final RepositoryInfo local,final boolean forceRemove) throws IOException {  final SoftwareVersion localCurrent=(local != null) ? local.getCurrentVersion() : null;  final List<SoftwareVersion> localVersions=(local != null && local.getVersions() != null) ? local.getVersions() : new ArrayList<SoftwareVersion>();  return new SyncInfo(findToRemove(localVersions,localCurrent,null,null,forceRemove));}  }
class C{  public static void fillRepoLinks(final ChannelInformation channel,final List<MenuEntry> links,final String baseName,final int basePriority,final String prefix,final int priorityOffset,final Function<String,LinkTarget> targetFunction){  Objects.requireNonNull(channel,"'channel' must not be null");  Objects.requireNonNull(links,"'links' must not be null");  Objects.requireNonNull(baseName,"'baseName' must not be null");  Objects.requireNonNull(prefix,"'prefix' must not be null");  Objects.requireNonNull(targetFunction,"'targetFunction' must not be null");  links.add(new MenuEntry(baseName,basePriority,prefix + " (by ID)",priorityOffset,targetFunction.apply(channel.getId()),Modifier.LINK,null));  int i=1;  for (  final String name : channel.getNames()) {    final LinkTarget target=targetFunction.apply(name);    if (target != null) {      links.add(new MenuEntry(baseName,basePriority,String.format("%s (name: %s)",prefix,name),priorityOffset + i,target,Modifier.LINK,null));    }    i++;  }}  }
class C{  public Stream<InteractionWord> process(List<PatternReference> patterns){  final Set<Word> terms=gatherTerms(patterns);  monitor.info("Gathered {} terms",terms.size());  calculateTermFrequencies(patterns,terms);  monitor.info("Calculated frequencies");  sort(patterns);  monitor.info("Sorted patterns by frequency");  final List<ClusteredPatterns> clusters=cluster(patterns);  monitor.info("Patterns clustered into {} clusters",clusters.size());  filterClusters(clusters);  monitor.info("Patterns filtered to {} clusters",clusters.size());  monitor.info("Finding interaction words");  return extractInteractionWords(clusters);}  }
class C{  protected void addConvertMetadata(ConvertMetadata convert){  if (convert.isForMapKey()) {    addMapKeyConvert(convert);  } else {    addConvert(convert);  }}  }
class C{  public VirtualMachine attach(String address,Map<String,? extends Connector.Argument> args) throws IOException, IllegalConnectorArgumentsException {  String ts=argument(ARG_TIMEOUT,args).value();  int timeout=0;  if (ts.length() > 0) {    timeout=Integer.decode(ts).intValue();  }  Connection connection=transportService.attach(address,timeout,0);  return Bootstrap.virtualMachineManager().createVirtualMachine(connection);}  }
class C{  public JSONArray put(Object value){  this.myArrayList.add(value);  return this;}  }
class C{  public final boolean doNext(TLCState curState,long cfp,boolean isLeaf,ObjLongTable counts,StateVec states,LongVec fps) throws Throwable {  boolean deadLocked=true;  TLCState succState=null;  SetOfStates liveNextStates=null;  if (this.checkLiveness && isLeaf) {    liveNextStates=new SetOfStates(INITIAL_CAPACITY * threadLocal.get());  }  try {    int k=0;    boolean allSuccDone=true;    boolean allSuccNonLeaf=true;    for (int i=0; i < this.actions.length; i++) {      StateVec nextStates=this.tool.getNextStates(this.actions[i],curState);      int sz=nextStates.size();      this.numOfGenStates.getAndAdd(sz);      deadLocked=deadLocked && (sz == 0);      for (int j=0; j < sz; j++) {        succState=nextStates.elementAt(j);        if (!this.tool.isGoodState(succState)) {synchronized (this) {            if (this.setErrState(curState,succState,false)) {              this.printTrace(EC.TLC_STATE_NOT_COMPLETELY_SPECIFIED_NEXT,null,curState,succState);            }          }          return allSuccNonLeaf;        }        if (TLCGlobals.coverageInterval >= 0) {          ((TLCStateMutSource)succState).addCounts(counts);        }        boolean inModel=(this.tool.isInModel(succState) && this.tool.isInActions(curState,succState));        int status=FPIntSet.NEW;        if (inModel) {          long fp=succState.fingerPrint();          status=this.theFPSet.setStatus(fp,FPIntSet.NEW);          allSuccDone=allSuccDone && FPIntSet.isDone(status);          allSuccNonLeaf=allSuccNonLeaf && !FPIntSet.isLeaf(status);          this.allStateWriter.writeState(curState,succState,status == FPIntSet.NEW);          if (!FPIntSet.isCompleted(status)) {            states.addElement(succState);            fps.addElement(fp);          }          if (this.checkLiveness && isLeaf) {            liveNextStates.put(fp,succState);          }        }        if (status == FPIntSet.NEW) {          try {            int len=this.invariants.length;            for (k=0; k < len; k++) {              if (!tool.isValid(this.invariants[k],succState)) {synchronized (this) {                  if (TLCGlobals.continuation) {                    this.printTrace(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,new String[]{this.tool.getInvNames()[k]},curState,succState);                    break;                  } else {                    if (this.setErrState(curState,succState,false)) {                      this.printTrace(EC.TLC_INVARIANT_VIOLATED_BEHAVIOR,new String[]{this.tool.getInvNames()[k]},curState,succState);                      this.notify();                    }                    return allSuccNonLeaf;                  }                }              }            }            if (k < len)             continue;          } catch (          Exception e) {synchronized (this) {              if (this.setErrState(curState,succState,true)) {                this.printTrace(EC.TLC_INVARIANT_EVALUATION_FAILED,new String[]{this.tool.getInvNames()[k]},curState,succState);                this.notify();              }              return allSuccNonLeaf;            }          }        }        try {          int len=this.impliedActions.length;          for (k=0; k < len; k++) {            if (!tool.isValid(this.impliedActions[k],curState,succState)) {synchronized (this) {                if (TLCGlobals.continuation) {                  this.printTrace(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);                  break;                } else {                  if (this.setErrState(curState,succState,false)) {                    this.printTrace(EC.TLC_ACTION_PROPERTY_VIOLATED_BEHAVIOR,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);                    this.notify();                  }                  return allSuccNonLeaf;                }              }            }          }          if (k < len)           continue;        } catch (        Exception e) {synchronized (this) {            if (this.setErrState(curState,succState,true)) {              this.printTrace(EC.TLC_ACTION_PROPERTY_EVALUATION_FAILED,new String[]{this.tool.getImpliedActNames()[k]},curState,succState);              this.notify();            }          }          return allSuccNonLeaf;        }      }      succState=null;    }    if (deadLocked && this.checkDeadlock) {synchronized (this) {        if (this.setErrState(curState,null,false)) {          this.printTrace(EC.TLC_DEADLOCK_REACHED,null,curState,null);          this.notify();        }      }      return allSuccNonLeaf;    }    if (this.checkLiveness && isLeaf) {      final long curStateFP=curState.fingerPrint();      liveNextStates.put(curStateFP,curState);      this.allStateWriter.writeState(curState,curState,true,IStateWriter.Visualization.STUTTERING);      liveCheck.addNextState(curState,curStateFP,liveNextStates);      final int multiplier=threadLocal.get();      if (liveNextStates.capacity() > (multiplier * INITIAL_CAPACITY)) {        threadLocal.set(multiplier + 1);      }    }    if (allSuccDone || (isLeaf && allSuccNonLeaf)) {      this.theFPSet.setStatus(cfp,FPIntSet.DONE);    }    return allSuccNonLeaf;  } catch (  Throwable e) {    boolean keep=((e instanceof StackOverflowError) || (e instanceof OutOfMemoryError));synchronized (this) {      if (this.setErrState(curState,succState,!keep)) {        String[] parameters=null;        int errorCode;        if (e instanceof StackOverflowError) {          errorCode=EC.SYSTEM_STACK_OVERFLOW;        } else         if (e instanceof OutOfMemoryError) {          errorCode=EC.SYSTEM_OUT_OF_MEMORY;        } else {          errorCode=EC.GENERAL;          parameters=new String[]{MP.ECGeneralMsg("computing the set of next states",e)};        }        this.printTrace(errorCode,parameters,curState,succState);        this.notifyAll();      }    }    throw e;  }}  }
class C{  public void SwitchTo(int lexState){  if (lexState >= 12 || lexState < 0)   throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",TokenMgrError.INVALID_LEXICAL_STATE); else   curLexState=lexState;}  }
class C{  private void createGui(final InitialTab initialTab){  final JTabbedPane tab=new JTabbedPane();  tab.add("Global Line Comments",m_globalLineCommentsPanel);  tab.add("Local Line Comments",m_localLineCommentsPanel);  tab.add("Node Comments",m_commentsPanel);  tab.add("Function Comments",m_functionCommentsPanel);  add(tab,BorderLayout.CENTER);  add(new OKButtonPanel(this),BorderLayout.SOUTH);  pack();switch (initialTab) {case GlobalLineComments:    tab.setSelectedIndex(0);  break;case LocalLineComments:tab.setSelectedIndex(1);break;case LocalNodeComments:tab.setSelectedIndex(2);m_commentsPanel.focusLocalField();break;case GlobalNodeComments:tab.setSelectedIndex(2);m_commentsPanel.focusGlobalField();break;case FunctionComments:tab.setSelectedIndex(3);m_functionCommentsPanel.focusGlobalField();break;default :throw new IllegalStateException("IE00681: Unknown initial tab");}}  }
class C{  public GrowingPassiveEntityRespawnPoint(final RPObject object,final String type,final String itemName,final String actionName,final int maxRipeness,final int growthRate){  super(object,itemName,growthRate);  init(type,actionName,maxRipeness,getInt("width"),getInt("height"));  ripeness=getInt("ripeness");  update();  if (ripeness < maxRipeness) {    SingletonRepository.getTurnNotifier().notifyInTurns(getRandomTurnsForRegrow(),this);  }}  }
class C{  public void run(Runnable runnable,Executor executor){  if (this.goForward()) {    for (int i=this.from; i <= this.to; i+=this.step) {      executor.execute(runnable);    }  } else {    for (int i=this.from; i >= this.to; i+=this.step) {      executor.execute(runnable);    }  }}  }
class C{  public void testSetIntrospectedProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  Beans.setIntrospectedProperty(introspectedTarget,STRING_PROPERTY,NEW_VALUE);  Beans.setIntrospectedProperty(hashedTarget,STRING_PROPERTY,NEW_VALUE);  assertEquals(NEW_VALUE,Beans.getProperty(introspectedTarget,STRING_PROPERTY));  assertNotSame(NEW_VALUE,Beans.getProperty(hashedTarget,STRING_PROPERTY));}  }
class C{  protected static <M extends Model>int[] findDepth(Clustering<M> c){  final Hierarchy<Cluster<M>> hier=c.getClusterHierarchy();  int[] size={0,0};  for (Iter<Cluster<M>> iter=c.iterToplevelClusters(); iter.valid(); iter.advance()) {    findDepth(hier,iter.get(),size);  }  return size;}  }
class C{  public EpsilonMOEA(Problem problem,Population population,EpsilonBoxDominanceArchive archive,Selection selection,Variation variation,Initialization initialization,DominanceComparator dominanceComparator){  super(problem,population,archive,initialization);  this.variation=variation;  this.selection=selection;  this.dominanceComparator=dominanceComparator;}  }
class C{  private ArrayList<String> searchAccurateAliases(String[] keyTypes,Principal[] issuers){  if (keyTypes == null || keyTypes.length == 0)   return null;  ArrayList<String> accurateAliases=new ArrayList<>();  for (  Map.Entry<String,KeyStore.PrivateKeyEntry> mapEntry : privateKeyHash.entrySet()) {    Certificate[] certs=mapEntry.getValue().getCertificateChain();    String alg=certs[0].getPublicKey().getAlgorithm();    for (    String keyType : keyTypes) {      if (alg.equals(keyType)) {        if (issuers != null && issuers.length != 0) {          checkLoop:           for (          Certificate cert : certs) {            if (cert instanceof X509Certificate) {              X500Principal certificateIssuer=((X509Certificate)cert).getIssuerX500Principal();              for (              Principal issuer : issuers) {                if (certificateIssuer.equals(issuer)) {                  accurateAliases.add(mapEntry.getKey());                  break checkLoop;                }              }            }          }        } else {          accurateAliases.add(mapEntry.getKey());        }      }    }  }  return accurateAliases;}  }
class C{  public void runTest() throws Throwable {  String namespaceURI=null;  String qualifiedName="prefix:local";  Document doc;  Attr newAttr;  doc=(Document)load("staffNS",false);{    boolean success=false;    try {      newAttr=doc.createAttributeNS(namespaceURI,qualifiedName);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NAMESPACE_ERR);    }    assertTrue("throw_NAMESPACE_ERR",success);  }}  }
class C{  protected ItemStack createBannerStack(){  final ItemStack bannerStack=new ItemStack(Items.BANNER);  final NBTTagCompound bannerData=bannerStack.getSubCompound("BlockEntityTag",true);  final NBTTagList patternsList=new NBTTagList();  bannerData.setTag("Patterns",patternsList);  patternsList.appendTag(createPatternTag(TileEntityBanner.EnumBannerPattern.GRADIENT_UP,EnumDyeColor.MAGENTA));  patternsList.appendTag(createPatternTag(TileEntityBanner.EnumBannerPattern.FLOWER,EnumDyeColor.BLACK));  bannerData.setInteger("Base",EnumDyeColor.PINK.getDyeDamage());  return bannerStack;}  }
class C{  public boolean isNull(int index){  return JSONObject.NULL.equals(this.opt(index));}  }
class C{  public void actionPerformed(ActionEvent e){  optionPane.setValue(btnString1);}  }
class C{  public boolean addDepartment(final Department department){  Sys.sleep(100_000);  departmentMap.put(department.getId(),department);  return true;}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public CallSpec<Void,HttpError> unlikeComment(String commentId){  return Resource.<Void,HttpError>newDeleteSpec(api,"/v1/groups/forums/posts/comments/{comment_id}/like",false).responseAs(Void.class).pathParam("comment_id",commentId).build();}  }
class C{  public String customizationId(){  return customizationId;}  }
class C{  public static double[][][] readHashFunctions() throws IOException {  ObjectInputStream ois=new ObjectInputStream(new GZIPInputStream(BitSampling.class.getResourceAsStream(hashFunctionsFileName)));  int bits=ois.readInt();  int dimensions=ois.readInt();  int numFunctionBundles=ois.readInt();  double[][][] hashFunctions=new double[numFunctionBundles][bits][dimensions];  for (int i=0; i < hashFunctions.length; i++) {    double[][] functionBundle=hashFunctions[i];    for (int j=0; j < functionBundle.length; j++) {      double[] bitFunctions=functionBundle[j];      for (int k=0; k < bitFunctions.length; k++) {        bitFunctions[k]=(double)ois.readFloat();      }    }  }  BitSampling.hashes=hashFunctions;  return hashFunctions;}  }
class C{  public String calculatePayment(IMiniTable payment,boolean isMultiCurrency){  log.config("");  totalPay=new BigDecimal(0.0);  int rows=payment.getRowCount();  m_noPayments=0;  for (int i=0; i < rows; i++) {    if (payment.isRowChecked(i)) {      Timestamp ts=(Timestamp)payment.getValueAt(i,payment.convertColumnIndexToView(1));      if (!isMultiCurrency)       allocDate=TimeUtil.max(allocDate,ts);      BigDecimal bd=(BigDecimal)payment.getValueAt(i,payment.convertColumnIndexToView(i_payment));      totalPay=totalPay.add(bd);      m_noPayments++;      log.fine("Payment_" + i + " = "+ bd+ " - Total="+ totalPay);    }  }  return String.valueOf(m_noPayments) + " - " + Msg.getMsg(Env.getCtx(),"Sum")+ "  "+ format.format(totalPay)+ " ";}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  @Override public TextChangeInterceptor build(String contentType){  return new AngularJSInterpolationBraceStrategy();}  }
class C{  public int intValue(){  Object obj=getValue();  if (obj instanceof Number) {    return ((Number)obj).intValue();  }  return 0;}  }
class C{  @Override public <NV extends NumberVector>NV projectRenderToDataSpace(double[] v,NumberVector.Factory<NV> prototype){  final int dim=v.length;  double[] vec=projectRenderToScaled(v);  for (int d=0; d < dim; d++) {    vec[d]=scales[d].getUnscaled(vec[d]);  }  return prototype.newNumberVector(vec);}  }
class C{  public static ActivateInstanceE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  ActivateInstanceE object=new ActivateInstanceE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    java.util.Vector handledAttributes=new java.util.Vector();    while (!reader.isEndElement()) {      if (reader.isStartElement()) {        if (reader.isStartElement() && new javax.xml.namespace.QName("http://oscm.org/xsd","activateInstance").equals(reader.getName())) {          object.setActivateInstance(org.oscm.xsd.ActivateInstance.Factory.parse(reader));        } else {          throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());        }      } else {        reader.next();      }    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  static String changeLess32toRFC(String string) throws IOException {  StringBuilder sb=new StringBuilder();  StringReader sr=new StringReader(string);  int i=0;  char c;  while ((i=sr.read()) > -1) {    c=(char)i;    if (c == '\\') {      sb.append(c);      char c1=(char)sr.read();      char c2=(char)sr.read();      if ((((c1 >= 48) && (c1 <= 57)) || ((c1 >= 65) && (c1 <= 70)) || ((c1 >= 97) && (c1 <= 102))) && (((c2 >= 48) && (c2 <= 57)) || ((c2 >= 65) && (c2 <= 70)) || ((c2 >= 97) && (c2 <= 102)))) {        char ch=(char)Byte.parseByte("" + c1 + c2,16);        sb.append(ch);      } else {        sb.append(c1);        sb.append(c2);      }    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public SynchronizedProtocolDecoder(ProtocolDecoder decoder){  if (decoder == null) {    throw new IllegalArgumentException("decoder");  }  this.decoder=decoder;}  }
class C{  public GridItemView(Context context){  this(context,null);}  }
class C{  TablePane(){  rectangle1.setStroke(Color.BLACK);  rectangle1.setFill(Color.WHITE);  rectangle2.setStroke(Color.BLACK);  rectangle2.setFill(Color.WHITE);  setTextProperties();  getTable();}  }
class C{  private void updateColor(int color){  String hex=Integer.toHexString(color);  hex=hex.toUpperCase();  tvColor.setText(String.format("Selected color: #%s",hex));}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  public LocalVariableTable_attribute findLocalVariableTable(){  int i;  for (i=0; i < attributes_count; i++) {    if (attributes[i] instanceof LocalVariableTable_attribute)     return (LocalVariableTable_attribute)(attributes[i]);  }  return null;}  }
class C{  public boolean pad(int factor) throws IOException {  int padding=factor - (int)(this.nrBits % factor);  boolean result=true;  for (int i=0; i < padding; i+=1) {    if (bit()) {      result=false;    }  }  return result;}  }
class C{  public DiscoveryNode findByAddress(TransportAddress address){  for (  ObjectCursor<DiscoveryNode> cursor : nodes.values()) {    DiscoveryNode node=cursor.value;    if (node.address().equals(address)) {      return node;    }  }  return null;}  }
class C{  public void pop(){  mv.visitInsn(Opcodes.POP);}  }
class C{  public void skipBytes(long totalNumBytesToSkip) throws IOException {  try (BufferedInputStream inputStream=new BufferedInputStream(new FileInputStream(this.inputFile))){    skipBytes(inputStream,this.position + totalNumBytesToSkip);    this.position+=totalNumBytesToSkip;  } }  }
class C{  @Override public void error(final SAXParseException exception) throws SAXException {  throw new SAXParseException("Error while parsing XML at line " + exception.getLineNumber() + " column "+ exception.getColumnNumber()+ ": "+ exception.getMessage(),null,exception);}  }
class C{  public static void addEmojis(Context context,Spannable text,int emojiSize,int emojiAlignment,int textSize,boolean useSystemDefault){  addEmojis(context,text,emojiSize,emojiAlignment,textSize,0,-1,useSystemDefault);}  }
class C{  @Override @Inline public void completeTrace(){  VM.assertions.fail("SanityRootTraceLocal.completeTrace called.");}  }
class C{  private boolean isFlashSupported(CameraCapabilities capabilities){  return (capabilities.supports(CameraCapabilities.FlashMode.AUTO) || capabilities.supports(CameraCapabilities.FlashMode.ON));}  }
class C{  protected String toStringOriginal(){  StringBuffer text=new StringBuffer();  text.append("Naive Bayes Classifier");  if (m_Instances == null) {    text.append(": No model built yet.");  } else {    try {      for (int i=0; i < m_Distributions[0].length; i++) {        text.append("\n\nClass " + m_Instances.classAttribute().value(i) + ": Prior probability = "+ Utils.doubleToString(m_ClassDistribution.getProbability(i),4,2)+ "\n\n");        Enumeration<Attribute> enumAtts=m_Instances.enumerateAttributes();        int attIndex=0;        while (enumAtts.hasMoreElements()) {          Attribute attribute=enumAtts.nextElement();          if (attribute.weight() > 0) {            text.append(attribute.name() + ":  " + m_Distributions[attIndex][i]);          }          attIndex++;        }      }    } catch (    Exception ex) {      text.append(ex.getMessage());    }  }  return text.toString();}  }
class C{  private void createPricedProductRoles(PriceModel priceModel,PricedParameter pricedParameter,PricedOption pricedOption,BigDecimal pricePerUser,Date creationDate) throws NonUniqueBusinessKeyException {  List<RoleDefinition> roleDefinitionLists=technicalProduct.getRoleDefinitions();  for (  RoleDefinition roleDefinition : roleDefinitionLists) {    PricedProductRole pricedProductRole=new PricedProductRole();    pricedProductRole.setPriceModel(priceModel);    pricedProductRole.setPricedParameter(pricedParameter);    pricedProductRole.setPricedOption(pricedOption);    pricedProductRole.setRoleDefinition(roleDefinition);    pricedProductRole.setPricePerUser(pricePerUser);    updateHistoryModDate(pricedProductRole,creationDate);    mgr.persist(pricedProductRole);    mgr.flush();  }}  }
class C{  protected void createPanel(){  setSize(WIDTH,HEIGHT);  setConfirmExit(false);  setLayout(new BorderLayout());  fileChooser=new ConverterFileChooser(new File(System.getProperty("user.dir")));  fileChooser.setMultiSelectionEnabled(true);  menuBar=new JMenuBar();  menuFile=new JMenu("File");  menuFileOpen=new JMenuItem("Open...",ComponentHelper.getImageIcon("open.gif"));  menuFileOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,KeyEvent.CTRL_MASK));  menuFileOpen.addActionListener(this);  menuFileSave=new JMenuItem("Save",ComponentHelper.getImageIcon("save.gif"));  menuFileSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,KeyEvent.CTRL_MASK));  menuFileSave.addActionListener(this);  menuFileSaveAs=new JMenuItem("Save as...",ComponentHelper.getImageIcon("empty.gif"));  menuFileSaveAs.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));  menuFileSaveAs.addActionListener(this);  menuFileClose=new JMenuItem("Close",ComponentHelper.getImageIcon("empty.gif"));  menuFileClose.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,KeyEvent.CTRL_MASK));  menuFileClose.addActionListener(this);  menuFileCloseAll=new JMenuItem("Close all",ComponentHelper.getImageIcon("empty.gif"));  menuFileCloseAll.addActionListener(this);  menuFileProperties=new JMenuItem("Properties",ComponentHelper.getImageIcon("empty.gif"));  menuFileProperties.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,KeyEvent.CTRL_MASK));  menuFileProperties.addActionListener(this);  menuFileExit=new JMenuItem("Exit",ComponentHelper.getImageIcon("forward.gif"));  menuFileExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,KeyEvent.ALT_MASK));  menuFileExit.addActionListener(this);  menuFile.add(menuFileOpen);  menuFile.add(menuFileSave);  menuFile.add(menuFileSaveAs);  menuFile.add(menuFileClose);  menuFile.add(menuFileCloseAll);  menuFile.addSeparator();  menuFile.add(menuFileProperties);  menuFile.addSeparator();  menuFile.add(menuFileExit);  menuBar.add(menuFile);  menuEdit=new JMenu("Edit");  menuEditUndo=new JMenuItem("Undo",ComponentHelper.getImageIcon("undo.gif"));  menuEditUndo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z,KeyEvent.CTRL_MASK));  menuEditUndo.addActionListener(this);  menuEditCopy=new JMenuItem("Copy",ComponentHelper.getImageIcon("copy.gif"));  menuEditCopy.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_INSERT,KeyEvent.CTRL_MASK));  menuEditCopy.addActionListener(this);  menuEditSearch=new JMenuItem("Search...",ComponentHelper.getImageIcon("find.gif"));  menuEditSearch.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_MASK));  menuEditSearch.addActionListener(this);  menuEditClearSearch=new JMenuItem("Clear search",ComponentHelper.getImageIcon("empty.gif"));  menuEditClearSearch.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F,KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));  menuEditClearSearch.addActionListener(this);  menuEditRenameAttribute=new JMenuItem("Rename attribute",ComponentHelper.getImageIcon("empty.gif"));  menuEditRenameAttribute.addActionListener(this);  menuEditAttributeAsClass=new JMenuItem("Attribute as class",ComponentHelper.getImageIcon("empty.gif"));  menuEditAttributeAsClass.addActionListener(this);  menuEditDeleteAttribute=new JMenuItem("Delete attribute",ComponentHelper.getImageIcon("empty.gif"));  menuEditDeleteAttribute.addActionListener(this);  menuEditDeleteAttributes=new JMenuItem("Delete attributes",ComponentHelper.getImageIcon("empty.gif"));  menuEditDeleteAttributes.addActionListener(this);  menuEditDeleteInstance=new JMenuItem("Delete instance",ComponentHelper.getImageIcon("empty.gif"));  menuEditDeleteInstance.addActionListener(this);  menuEditDeleteInstances=new JMenuItem("Delete instances",ComponentHelper.getImageIcon("empty.gif"));  menuEditDeleteInstances.addActionListener(this);  menuEditSortInstances=new JMenuItem("Sort data (ascending)",ComponentHelper.getImageIcon("sort.gif"));  menuEditSortInstances.addActionListener(this);  menuEdit.add(menuEditUndo);  menuEdit.addSeparator();  menuEdit.add(menuEditCopy);  menuEdit.addSeparator();  menuEdit.add(menuEditSearch);  menuEdit.add(menuEditClearSearch);  menuEdit.addSeparator();  menuEdit.add(menuEditRenameAttribute);  menuEdit.add(menuEditAttributeAsClass);  menuEdit.add(menuEditDeleteAttribute);  menuEdit.add(menuEditDeleteAttributes);  menuEdit.addSeparator();  menuEdit.add(menuEditDeleteInstance);  menuEdit.add(menuEditDeleteInstances);  menuEdit.add(menuEditSortInstances);  menuBar.add(menuEdit);  menuView=new JMenu("View");  menuViewAttributes=new JMenuItem("Attributes...",ComponentHelper.getImageIcon("objects.gif"));  menuViewAttributes.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_A,KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));  menuViewAttributes.addActionListener(this);  menuViewValues=new JMenuItem("Values...",ComponentHelper.getImageIcon("properties.gif"));  menuViewValues.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,KeyEvent.CTRL_MASK + KeyEvent.SHIFT_MASK));  menuViewValues.addActionListener(this);  menuViewOptimalColWidths=new JMenuItem("Optimal column width (all)",ComponentHelper.getImageIcon("resize.gif"));  menuViewOptimalColWidths.addActionListener(this);  menuView.add(menuViewAttributes);  menuView.add(menuViewValues);  menuView.addSeparator();  menuView.add(menuViewOptimalColWidths);  menuBar.add(menuView);  tabbedPane=new JTabbedPane();  tabbedPane.addChangeListener(this);  add(tabbedPane,BorderLayout.CENTER);  updateMenu();  updateFrameTitle();}  }
class C{  public DeleteSnapshotRequest(String repository,String snapshot){  this.repository=repository;  this.snapshot=snapshot;}  }
class C{  public WeakValueMap(Map<? extends K,? extends V> m){  hash=new HashMap<K,WeakEntry>(m.size());  putAll(m);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public boolean isIndex(){  return partitioner instanceof LocalPartitioner;}  }
class C{  public XMLWriter(){  init(null);}  }
class C{  public void add(Node parent,Node child){  NodeDescriptor nodeDescriptor=getWrapper(parent);  insert(nodeDescriptor,nodeDescriptor.getChildren().size(),child);}  }
class C{  public void createContentList(String body) throws ParseException {  try {    HeaderFactoryExt headerFactory=new HeaderFactoryImpl();    String delimiter=this.getContentTypeHeader().getParameter(BOUNDARY);    if (delimiter == null) {      this.contentList=new LinkedList<Content>();      ContentImpl content=new ContentImpl(body,delimiter);      content.setContentTypeHeader(this.getContentTypeHeader());      this.contentList.add(content);      return;    }    String[] fragments=body.split("--" + delimiter + "\r\n");    for (    String nextPart : fragments) {      if (nextPart == null) {        return;      }      StringBuffer strbuf=new StringBuffer(nextPart);      while (strbuf.length() > 0 && (strbuf.charAt(0) == '\r' || strbuf.charAt(0) == '\n'))       strbuf.deleteCharAt(0);      if (strbuf.length() == 0)       continue;      nextPart=strbuf.toString();      int position=nextPart.indexOf("\r\n\r\n");      int off=4;      if (position == -1) {        position=nextPart.indexOf("\n");        off=2;      }      if (position == -1)       throw new ParseException("no content type header found in " + nextPart,0);      String rest=nextPart.substring(position + off);      if (rest == null)       throw new ParseException("No content [" + nextPart + "]",0);      String headers=nextPart.substring(0,position);      ContentImpl content=new ContentImpl(rest,boundary);      String[] headerArray=headers.split("\r\n");      for (      String hdr : headerArray) {        Header header=headerFactory.createHeader(hdr);        if (header instanceof ContentTypeHeader) {          content.setContentTypeHeader((ContentTypeHeader)header);        } else         if (header instanceof ContentDispositionHeader) {          content.setContentDispositionHeader((ContentDispositionHeader)header);        } else {          throw new ParseException("Unexpected header type " + header.getName(),0);        }        contentList.add(content);      }    }  } catch (  StringIndexOutOfBoundsException ex) {    throw new ParseException("Invalid Multipart mime format",0);  }}  }
class C{  public static double[][] f(double[][] M,Function f){  double[][] fM=new double[M.length][];  for (int i=0; i < fM.length; i++) {    fM[i]=new double[M[i].length];    for (int j=0; j < fM[i].length; j++)     fM[i][j]=f.f(M[i][j]);  }  return fM;}  }
class C{  public String firstEntityIdForLabelStartingWith(String label,String language,String type) throws RetryableException {  URI uri=uris.searchForLabel(label,language,type);  log.debug("Searching for entity using {}",uri);  try {    JSONObject result=checkApi(getJson(new HttpGet(uri)));    JSONArray resultList=(JSONArray)result.get("search");    if (resultList.isEmpty()) {      return null;    }    result=(JSONObject)resultList.get(0);    return result.get("id").toString();  } catch (  IOException|ParseException e) {    throw new RetryableException("Error searching for page",e);  }}  }
class C{  public void selectFile(final String file) throws DebugException {  try {    m_debugger.selectFile(file);  } catch (  final DebugExceptionWrapper exception) {    throw new DebugException(exception);  }}  }
class C{  XSLTAttributeDef(String namespace,String name,int type,boolean required,boolean supportsAVT,int errorType){  this.m_namespace=namespace;  this.m_name=name;  this.m_type=type;  this.m_required=required;  this.m_supportsAVT=supportsAVT;  this.m_errorType=errorType;}  }
class C{  public void removeConfigurationParameterListener(ConfigurationParameterListener listener){  if (this.listeners.contains(listener)) {    this.listeners.remove(listener);  }}  }
class C{  public void updateDataset(CandleDataset source,int seriesIndex,boolean newBar){  if (source == null) {    throw new IllegalArgumentException("Null source (CandleDataset).");  }  for (int x=0; x < this.getSeriesCount(); x++) {    AverageTrueRangeSeries series=this.getSeries(x);    series.updateSeries(source.getSeries(seriesIndex),source.getSeries(seriesIndex).getItemCount() - 1,newBar);  }}  }
class C{  public JPopupMenu(){  this(null);}  }
class C{  protected void childJustRemovedHook(Object child,BCSChild bcsChild){  if (bcsChild instanceof BCSSChild) {    releaseServicesForChild((BCSSChild)bcsChild,false);  }}  }
class C{  public byte[] toZOrderByteArray(final long[] componentsAsLongArr,final GeoSpatialDatatypeConfiguration datatypeConfig){  final IKeyBuilder kb=getKeyBuilder();  kb.reset();  for (int i=0; i < componentsAsLongArr.length; i++) {    final long componentAsLong=componentsAsLongArr[i];    final Long minValue=datatypeConfig.getFields().get(i).getMinValue();    final long componentAsLongRangeShifted=minValue == null ? componentAsLong : encodeRangeShift(componentAsLong,minValue);    kb.append(componentAsLongRangeShifted);  }  return kb.toZOrder(datatypeConfig.getNumDimensions());}  }
class C{  public static int levenshteinDistance(String o1,String o2,int prefix,int postfix){  final int l1=o1.length(), l2=o2.length();  int[] buf=new int[(l2 + 1 - (prefix + postfix)) << 1];  for (int j=0; j < buf.length; j+=2) {    buf[j]=j >> 1;  }  int inter=1;  for (int i=prefix, e1=l1 - postfix; i < e1; i++, inter^=1) {    final char chr=o1.charAt(i);    buf[inter]=i + 1 - prefix;    for (int c=2 + inter, p=3 - inter, j=prefix; c < buf.length; c+=2, p+=2) {      buf[c]=min(buf[p] + 1,buf[c - 2] + 1,buf[p - 2] + ((chr == o2.charAt(j++)) ? 0 : 1));    }  }  return buf[buf.length - 2 + (inter ^ 1)];}  }
class C{  public static String replaceTildesAndStars(String origText_){  String cleanText=origText_.replaceAll("~","");  cleanText=cleanText.replaceAll("\\*","");  cleanText=cleanText.replaceAll("\\^","");  return cleanText;}  }
class C{  private static void renderIfOutputEnabled(String outDir,String suffix,Mustache template,Object scope) throws IOException {  assert suffix.charAt(0) == '/';  if (outDir != null) {    assert !outDir.endsWith("/");    String path=outDir + suffix;    try (BufferedWriter writer=Files.newWriter(new File(path),Charsets.UTF_8)){      template.execute(writer,scope);    }   }}  }
class C{  public Rational rationalRepresentation(){  return new Rational(T);}  }
class C{  public static String reverseDelimitedString(String str,String delimiter){  String[] strs=split(str,delimiter);  reverseArray(strs);  return join(strs,delimiter);}  }
class C{  @Override public void endWindow(){  if (!mergedTuple.isEmpty()) {    mergedport.emit(mergedTuple);    mergedTuple=new HashMap<K,HighLow<V>>();  }}  }
class C{  public long find(BytesRef key,int code){  final long slot=slot(rehash(code),mask);  for (long index=slot; ; index=nextSlot(index,mask)) {    final long id=id(index);    if (id == -1L || key.bytesEquals(get(id,spare))) {      return id;    }  }}  }
class C{  private static void debugPrintln(String msg){  if (DEBUG) {    System.err.println("JAXP: " + msg);  }}  }
class C{  public static boolean isNotebookTitleValid(String value){  return value == null || value.length() < 1024;}  }
class C{  public static void main(String[] args){  TestRunner.run(ChannelTest.class);}  }
class C{  public CMSSignedData generate(CMSProcessable content,boolean encapsulate,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  if (content instanceof CMSTypedData) {    return this.generate(((CMSTypedData)content).getContentType().getId(),content,encapsulate,sigProvider);  } else {    return this.generate(DATA,content,encapsulate,sigProvider);  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  @Override public void mousePressed(MouseEvent e){  if (typingTarget != null) {    beginEdit(typingTarget);    updateCursor(getView(),e.getPoint());  }}  }
class C{  public String toString(){  if (m_AttributeSelection == null) {    return "AttributeSelectedClassifier: No attribute selection possible.\n\n" + m_Classifier.toString();  }  StringBuffer result=new StringBuffer();  result.append("AttributeSelectedClassifier:\n\n");  result.append(m_AttributeSelection.toResultsString());  result.append("\n\nHeader of reduced data:\n" + m_ReducedHeader.toString());  result.append("\n\nClassifier Model\n" + m_Classifier.toString());  return result.toString();}  }
class C{  public static boolean runJasperProcess(int Record_ID,ReportEngine re,boolean IsDirectPrint,String printerName){  MPrintFormat format=re.getPrintFormat();  ProcessInfo pi=new ProcessInfo("",format.getJasperProcess_ID());  pi.setPrintPreview(!IsDirectPrint);  pi.setRecord_ID(Record_ID);  Vector<ProcessInfoParameter> jasperPrintParams=new Vector<ProcessInfoParameter>();  ProcessInfoParameter pip;  if (printerName != null && printerName.trim().length() > 0) {    pip=new ProcessInfoParameter(PARAM_PRINTER_NAME,printerName,null,null,null);    jasperPrintParams.add(pip);  }  pip=new ProcessInfoParameter(PARAM_PRINT_FORMAT,format,null,null,null);  jasperPrintParams.add(pip);  pip=new ProcessInfoParameter(PARAM_PRINT_INFO,re.getPrintInfo(),null,null,null);  jasperPrintParams.add(pip);  pi.setParameter(jasperPrintParams.toArray(new ProcessInfoParameter[]{}));  ServerProcessCtl.process(null,pi,null);  boolean result=true;  return (result);}  }
class C{  private static int stToIJ(double s){  final int m=MAX_SIZE / 2;  return (int)Math.max(0,Math.min(2 * m - 1,Math.round(m * s + (m - 0.5))));}  }
class C{  public boolean isSendRawKey(){  return sendRawKey;}  }
class C{  final void computeAllowedScripts(){  scripts=new Vector<String>();  if (!SpriteTranscoder.this.hints.containsKey(KEY_ALLOWED_SCRIPT_TYPES)) {    return;  }  String allowedScripts=(String)SpriteTranscoder.this.hints.get(KEY_ALLOWED_SCRIPT_TYPES);  StringTokenizer st=new StringTokenizer(allowedScripts,",");  while (st.hasMoreTokens()) {    scripts.addElement(st.nextToken());  }}  }
class C{  public boolean isNetLoad(){  return (this.opDetails & OP_DETAILS_NET_LOAD) != 0;}  }
class C{  @Override public UpdateResponse optimize(boolean waitFlush,boolean waitSearcher) throws SolrServerException, IOException {  if (!this.writeEnabled)   return _dummyOKResponse;  UpdateResponse ur=null;  for (  SolrClient s : this.shards)   ur=s.optimize(waitFlush,waitSearcher);  return ur;}  }
class C{  protected SurfaceData initAcceleratedSurface(){  SurfaceData sData=null;  Component comp=vImg.getComponent();  final ComponentPeer peer=(comp != null) ? comp.getPeer() : null;  try {    boolean createVSynced=false;    boolean forceback=false;    if (context instanceof Boolean) {      forceback=((Boolean)context).booleanValue();      if (forceback && peer instanceof BackBufferCapsProvider) {        BackBufferCapsProvider provider=(BackBufferCapsProvider)peer;        BufferCapabilities caps=provider.getBackBufferCaps();        if (caps instanceof ExtendedBufferCapabilities) {          ExtendedBufferCapabilities ebc=(ExtendedBufferCapabilities)caps;          if (ebc.getVSync() == VSYNC_ON && ebc.getFlipContents() == COPIED) {            createVSynced=true;            forceback=false;          }        }      }    }    if (forceback) {    } else {      CGLGraphicsConfig gc=(CGLGraphicsConfig)vImg.getGraphicsConfig();      ColorModel cm=gc.getColorModel(vImg.getTransparency());      int type=vImg.getForcedAccelSurfaceType();      if (type == OGLSurfaceData.UNDEFINED) {        type=gc.isCapPresent(CAPS_EXT_FBOBJECT) ? OGLSurfaceData.FBOBJECT : OGLSurfaceData.PBUFFER;      }      if (createVSynced) {      } else {        sData=CGLSurfaceData.createData(gc,vImg.getWidth(),vImg.getHeight(),cm,vImg,type);      }    }  } catch (  NullPointerException ex) {    sData=null;  }catch (  OutOfMemoryError er) {    sData=null;  }  return sData;}  }
class C{  public Quaternion(Matrix4f mat){  double T=1 + mat.m00 + mat.m11+ mat.m22;  if (T > 0.00000001) {    double S=Math.sqrt(T) * 2;    this.x=(float)((mat.m12 - mat.m21) / S);    this.y=(float)((mat.m02 - mat.m20) / S);    this.z=(float)((mat.m10 - mat.m01) / S);    this.w=(float)(0.25 * S);  } else   if (T == 0) {    if (mat.m00 > mat.m11 && mat.m00 > mat.m22) {      double S=Math.sqrt(1.0 + mat.m00 - mat.m11 - mat.m22) * 2;      this.x=(float)(0.25 * S);      this.y=(float)((mat.m10 + mat.m01) / S);      this.z=(float)((mat.m02 + mat.m20) / S);      this.w=(float)((mat.m21 - mat.m12) / S);    } else     if (mat.m11 > mat.m22) {      double S=Math.sqrt(1.0 + mat.m11 - mat.m00 - mat.m22) * 2;      this.x=(float)((mat.m10 + mat.m01) / S);      this.y=(float)(0.25 * S);      this.z=(float)((mat.m21 + mat.m12) / S);      this.w=(float)((mat.m02 - mat.m20) / S);    } else {      double S=Math.sqrt(1.0 + mat.m22 - mat.m00 - mat.m11) * 2;      this.x=(float)((mat.m02 + mat.m20) / S);      this.y=(float)((mat.m21 + mat.m12) / S);      this.z=(float)(0.25 * S);      this.w=(float)((mat.m10 - mat.m01) / S);    }  }}  }
class C{  public void subsample(String filelist,float targetFtoERatio,String extf,String exte,String fpath,String epath,String output) throws IOException {  this.subsample(filelist,targetFtoERatio,new PhraseWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output + "." + extf),"UTF8")),new BufferedWriter(new OutputStreamWriter(new FileOutputStream(output + "." + exte),"UTF8"))),new BiCorpusFactory(fpath,epath,null,extf,exte,null));}  }
class C{  public static Map<String,Object> updateDataResource(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=updateDataResourceMethod(dctx,context);  return result;}  }
class C{  public static void isIdTagged(ExampleSet es) throws OperatorException {  if (es.getAttributes().getId() == null) {    throw new UserError(null,129);  }}  }
class C{  public static boolean volumeHasFullCopySession(Volume volume,DbClient dbClient){  boolean hasFcSession=false;  if (((isVolumeFullCopy(volume,dbClient)) && (!isFullCopyDetached(volume,dbClient))) || ((isVolumeFullCopySource(volume,dbClient)) && (!volumeDetachedFromFullCopies(volume,dbClient)))) {    hasFcSession=true;  }  return hasFcSession;}  }
class C{  static BasicBlock findOrCreateYieldpointBlock(IR ir,int whereFrom){  RVMMethod meth=null;  PhysicalRegisterSet phys=ir.regpool.getPhysicalRegisterSet().asPPC();  Register zero=phys.getGPR(0);  if (whereFrom == RVMThread.PROLOGUE) {    if (ir.MIRInfo.prologueYieldpointBlock != null) {      return ir.MIRInfo.prologueYieldpointBlock;    } else {      meth=Entrypoints.optThreadSwitchFromPrologueMethod;    }  } else   if (whereFrom == RVMThread.BACKEDGE) {    if (ir.MIRInfo.backedgeYieldpointBlock != null) {      return ir.MIRInfo.backedgeYieldpointBlock;    } else {      meth=Entrypoints.optThreadSwitchFromBackedgeMethod;    }  } else   if (whereFrom == RVMThread.EPILOGUE) {    if (ir.MIRInfo.epilogueYieldpointBlock != null) {      return ir.MIRInfo.epilogueYieldpointBlock;    } else {      meth=Entrypoints.optThreadSwitchFromEpilogueMethod;    }  } else   if (whereFrom == RVMThread.OSROPT) {    if (ir.MIRInfo.osrYieldpointBlock != null) {      return ir.MIRInfo.osrYieldpointBlock;    } else {      meth=Entrypoints.optThreadSwitchFromOsrOptMethod;    }  }  BasicBlock result=new BasicBlock(-1,null,ir.cfg);  ir.cfg.addLastInCodeOrder(result);  Register JTOC=phys.getJTOC();  Register CTR=phys.getCTR();  Offset offset=meth.getOffset();  if (fits(offset,16)) {    result.appendInstruction(MIR_Load.create(PPC_LAddr,A(zero),A(JTOC),IC(PPCMaskLower16(offset))));  } else {    if (VM.VerifyAssertions)     VM._assert(fits(offset,32));    result.appendInstruction(MIR_Binary.create(PPC_ADDIS,A(zero),A(JTOC),IC(PPCMaskUpper16(offset))));    result.appendInstruction(MIR_Load.create(PPC_LAddr,A(zero),A(zero),IC(PPCMaskLower16(offset))));  }  result.appendInstruction(MIR_Move.create(PPC_MTSPR,A(CTR),A(zero)));  result.appendInstruction(MIR_Branch.create(PPC_BCTR));  if (whereFrom == RVMThread.PROLOGUE) {    ir.MIRInfo.prologueYieldpointBlock=result;  } else   if (whereFrom == RVMThread.BACKEDGE) {    ir.MIRInfo.backedgeYieldpointBlock=result;  } else   if (whereFrom == RVMThread.EPILOGUE) {    ir.MIRInfo.epilogueYieldpointBlock=result;  } else   if (whereFrom == RVMThread.OSROPT) {    ir.MIRInfo.osrYieldpointBlock=result;  }  return result;}  }
class C{  public boolean isRecursive(){  return recursive;}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  public RequestHandle put(Context context,String url,HttpEntity entity,String contentType,ResponseHandlerInterface responseHandler){  return sendRequest(httpClient,httpContext,addEntityToRequestBase(new HttpPut(url),entity),contentType,responseHandler,context);}  }
class C{  public ArtistSorter(boolean ascending,boolean ignoreThe){  super(ascending);  this.ignoreThe=ignoreThe;}  }
class C{  protected void optimize(final AST2BOpContext ctx,final StaticAnalysis sa,final GraphPatternGroup<? extends IGroupMemberNode> group,final PropertyPathInfo ppInfo,final PathAlternative pathAlt,final ArbitraryLengthPathNode alpNode,final Properties queryHints,final PropertyPathNode ppNode){  if (pathAlt.arity() == 1) {    final PathSequence pathSeq=(PathSequence)pathAlt.get(0);    optimize(ctx,sa,group,ppInfo,pathSeq,alpNode,queryHints,ppNode);  } else {    final UnionNode union=new PropertyPathUnionNode();    group.addArg(getPositionOfNodeInGroup(ppNode,group),union);    final Iterator<BOp> it=pathAlt.argIterator();    while (it.hasNext()) {      final JoinGroupNode subgroup=new JoinGroupNode();      union.addArg(subgroup);      final PathSequence pathSeq=(PathSequence)it.next();      optimize(ctx,sa,subgroup,ppInfo,pathSeq,alpNode,queryHints,ppNode);    }  }}  }
class C{  public BulkUserImportException(String msg,BulkUserImportExceptionBean bean){  super(msg,bean);  this.bean=bean;}  }
class C{  public static boolean isPubid(int c){  return c < 0x10000 && (CHARS[c] & MASK_PUBID) != 0;}  }
class C{  public static NoneVal none(){  return noneValue;}  }
class C{  @NotNull public PsiQuery filter(@NotNull final FQNamesProvider name){  final Set<PsiElement> result=new HashSet<PsiElement>(Arrays.asList(myPsiElements));  for (  final PsiElement element : myPsiElements) {    final PyCallExpression callExpression=PyUtil.as(element,PyCallExpression.class);    if ((callExpression == null) || (!callExpression.isCallee(name))) {      result.remove(element);    }  }  return new PsiQuery(result.toArray(new PsiElement[result.size()]));}  }
class C{  boolean findCellForSpanIgnoring(int[] cellXY,int spanX,int spanY,View ignoreView){  return findCellForSpanThatIntersectsIgnoring(cellXY,spanX,spanY,-1,-1,ignoreView,mOccupied);}  }
class C{  public static JFreeChart createCandlestickChart(String title,String timeAxisLabel,String valueAxisLabel,OHLCDataset dataset,boolean legend){  ValueAxis timeAxis=new DateAxis(timeAxisLabel);  NumberAxis valueAxis=new NumberAxis(valueAxisLabel);  XYPlot plot=new XYPlot(dataset,timeAxis,valueAxis,null);  plot.setRenderer(new CandlestickRenderer());  JFreeChart chart=new JFreeChart(title,JFreeChart.DEFAULT_TITLE_FONT,plot,legend);  currentTheme.apply(chart);  return chart;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:53.548 -0500",hash_original_method="BE829AA0C3B19F93CC8F98530D925AC3",hash_generated_method="212B8C2BBD0F15A133396784EADE7D4B") protected void handlePollStateResultMessage(int what,AsyncResult ar){  int ints[];  String states[];switch (what) {case EVENT_POLL_STATE_REGISTRATION_CDMA:    states=(String[])ar.result;  int registrationState=4;int radioTechnology=-1;int baseStationId=-1;int baseStationLatitude=CdmaCellLocation.INVALID_LAT_LONG;int baseStationLongitude=CdmaCellLocation.INVALID_LAT_LONG;int cssIndicator=0;int systemId=0;int networkId=0;int roamingIndicator=-1;int systemIsInPrl=0;int defaultRoamingIndicator=0;int reasonForDenial=0;if (states.length >= 14) {try {if (states[0] != null) {registrationState=Integer.parseInt(states[0]);}if (states[3] != null) {radioTechnology=Integer.parseInt(states[3]);}if (states[4] != null) {baseStationId=Integer.parseInt(states[4]);}if (states[5] != null) {baseStationLatitude=Integer.parseInt(states[5]);}if (states[6] != null) {baseStationLongitude=Integer.parseInt(states[6]);}if (baseStationLatitude == 0 && baseStationLongitude == 0) {baseStationLatitude=CdmaCellLocation.INVALID_LAT_LONG;baseStationLongitude=CdmaCellLocation.INVALID_LAT_LONG;}if (states[7] != null) {cssIndicator=Integer.parseInt(states[7]);}if (states[8] != null) {systemId=Integer.parseInt(states[8]);}if (states[9] != null) {networkId=Integer.parseInt(states[9]);}if (states[10] != null) {roamingIndicator=Integer.parseInt(states[10]);}if (states[11] != null) {systemIsInPrl=Integer.parseInt(states[11]);}if (states[12] != null) {defaultRoamingIndicator=Integer.parseInt(states[12]);}if (states[13] != null) {reasonForDenial=Integer.parseInt(states[13]);}} catch (NumberFormatException ex) {loge("EVENT_POLL_STATE_REGISTRATION_CDMA: error parsing: " + ex);}} else {throw new RuntimeException("Warning! Wrong number of parameters returned from " + "RIL_REQUEST_REGISTRATION_STATE: expected 14 or more " + "strings and got " + states.length + " strings");}mRegistrationState=registrationState;mCdmaRoaming=regCodeIsRoaming(registrationState) && !isRoamIndForHomeSystem(states[10]);newSS.setState(regCodeToServiceState(registrationState));setCdmaTechnology(radioTechnology);newSS.setCssIndicator(cssIndicator);newSS.setSystemAndNetworkId(systemId,networkId);mRoamingIndicator=roamingIndicator;mIsInPrl=(systemIsInPrl == 0) ? false : true;mDefaultRoamingIndicator=defaultRoamingIndicator;newCellLoc.setCellLocationData(baseStationId,baseStationLatitude,baseStationLongitude,systemId,networkId);if (reasonForDenial == 0) {mRegistrationDeniedReason=ServiceStateTracker.REGISTRATION_DENIED_GEN;} else if (reasonForDenial == 1) {mRegistrationDeniedReason=ServiceStateTracker.REGISTRATION_DENIED_AUTH;} else {mRegistrationDeniedReason="";}if (mRegistrationState == 3) {if (DBG) log("Registration denied, " + mRegistrationDeniedReason);}break;case EVENT_POLL_STATE_OPERATOR_CDMA:String opNames[]=(String[])ar.result;if (opNames != null && opNames.length >= 3) {if ((opNames[2] == null) || (opNames[2].length() < 5) || ("00000".equals(opNames[2]))) {opNames[2]=SystemProperties.get(CDMAPhone.PROPERTY_CDMA_HOME_OPERATOR_NUMERIC,"00000");if (DBG) {log("RIL_REQUEST_OPERATOR.response[2], the numeric, " + " is bad. Using SystemProperties '" + CDMAPhone.PROPERTY_CDMA_HOME_OPERATOR_NUMERIC + "'= "+ opNames[2]);}}if (cm.getNvState().isNVReady()) {newSS.setOperatorName(null,opNames[1],opNames[2]);} else {newSS.setOperatorName(opNames[0],opNames[1],opNames[2]);}} else {if (DBG) log("EVENT_POLL_STATE_OPERATOR_CDMA: error parsing opNames");}break;default :loge("handlePollStateResultMessage: RIL response handle in wrong phone!" + " Expected CDMA RIL request and get GSM RIL request.");break;}}  }
class C{  @Override public void run(){  final Thread myThread=currentThread();  final int index;synchronized (this) {    index=lastDirectiveIndex;    checkState(runState == PAUSED_AT_GO_TO || runState == CANCEL_REQUESTED,"Illegal call of Runnable.run()");    lastDirectiveIndex=-1;    if (checkCancellationLocked()) {      return;    }    runState=RUNNING;    currentThread=myThread;  }  runFlowFrom(continueFromGoTo(directives,index),true);  Thread.interrupted();synchronized (this) {    if (currentThread == myThread) {      currentThread=null;    }  }}  }
class C{  private void sendStageProgressPatch(TaskState.TaskStage patchStage,@Nullable TaskState.SubStage patchSubStage){  ServiceUtils.logInfo(this,"Sending self-patch to stage %s:%s",patchStage,patchSubStage);  TaskUtils.sendSelfPatch(this,buildPatch(patchStage,patchSubStage,null));}  }
class C{  @Override public String toString(){  return "cudaFuncAttributes[" + "sharedSizeBytes=" + sharedSizeBytes + ","+ "constSizeBytes="+ constSizeBytes+ ","+ "localSizeBytes="+ localSizeBytes+ ","+ "maxThreadsPerBlock="+ maxThreadsPerBlock+ ","+ "numRegs="+ numRegs+ ","+ "ptxVersion="+ ptxVersion+ ","+ "binaryVersion="+ binaryVersion+ "]";}  }
class C{  public ConcurrentReaderHashMap(Map t){  this(Math.max((int)(t.size() / DEFAULT_LOAD_FACTOR) + 1,16),DEFAULT_LOAD_FACTOR);  putAll(t);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY__REFERENCING_ELEMENTS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getReferencingElements()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  Item(final int index,final Item i){  this.index=index;  type=i.type;  intVal=i.intVal;  longVal=i.longVal;  strVal1=i.strVal1;  strVal2=i.strVal2;  strVal3=i.strVal3;  hashCode=i.hashCode;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  public org.smpte_ra.schemas.st2067_2_2016.PKL.DigestMethodType buildDigestMethodType(String algorithm){  org.smpte_ra.schemas.st2067_2_2016.PKL.DigestMethodType digestMethodType=new org.smpte_ra.schemas.st2067_2_2016.PKL.DigestMethodType();  digestMethodType.setAlgorithm(algorithm);  return digestMethodType;}  }
class C{  public boolean hasQuality(){  return mHasQuality;}  }
class C{  public int size(){  return unassigned.size();}  }
class C{  private boolean hasNextPostponed(){  return !postponedRoutes.isEmpty();}  }
class C{  public void addParseTemplate(String parseTemplate){  parseTemplates.add(parseTemplate);}  }
class C{  protected String[] tokenizePath(String path){  return tokenizeToStringArray(path,this.pathSeparator,this.trimTokens,true);}  }
class C{  @Override public List<HashMap<String,Object>> findAllRemittanceDetailsForServiceAndFund(final String boundaryIdList,final String serviceCodes,final String fundCodes,final Date startDate,final Date endDate,final String paymentMode){  final List<HashMap<String,Object>> paramList=new ArrayList<HashMap<String,Object>>();  final String queryBuilder="SELECT sum(ih.instrumentamount) as INSTRUMENTMAOUNT,date(ch.RECEIPTDATE) AS RECEIPTDATE," + "sd.NAME as SERVICENAME,it.TYPE as INSTRUMENTTYPE,fnd.name AS FUNDNAME,dpt.name AS DEPARTMENTNAME," + "fnd.code AS FUNDCODE,dpt.code AS DEPARTMENTCODE from EGCL_COLLECTIONHEADER ch,"+ "EGF_INSTRUMENTHEADER ih,EGCL_COLLECTIONINSTRUMENT ci,EGCL_SERVICEDETAILS sd,"+ "EGF_INSTRUMENTTYPE it,EGCL_COLLECTIONMIS cm,FUND fnd,EG_DEPARTMENT dpt";  final String whereClauseBeforInstumentType=" where ch.id=cm.collectionheader AND " + "fnd.id=cm.fund AND dpt.id=cm.department and ci.INSTRUMENTHEADER=ih.ID and " + "ch.SERVICEDETAILS=sd.ID and ch.ID=ci.COLLECTIONHEADER and ih.INSTRUMENTTYPE=it.ID and ";  final String whereClauseForServiceAndFund=" sd.code in (" + serviceCodes + ")"+ " and fnd.code in ("+ fundCodes+ ")"+ " and ";  String whereClause=" AND ih.ID_STATUS=(select id from egw_status where moduletype='" + CollectionConstants.MODULE_NAME_INSTRUMENTHEADER + "' "+ "and description='"+ CollectionConstants.INSTRUMENT_NEW_STATUS+ "') and ih.ISPAYCHEQUE='0' and ch.STATUS=(select id from egw_status where "+ "moduletype='"+ CollectionConstants.MODULE_NAME_RECEIPTHEADER+ "' and code='"+ CollectionConstants.RECEIPT_STATUS_CODE_APPROVED+ "') "+ " AND ch.source='"+ Source.SYSTEM+ "' ";  if (startDate != null && endDate != null)   whereClause=whereClause + " AND date(ch.receiptdate) between '" + startDate+ "' and '"+ endDate+ "' ";  final String groupByClause=" group by date(ch.RECEIPTDATE),sd.NAME,it.TYPE,fnd.name,dpt.name,fnd.code,dpt.code";  final String orderBy=" order by RECEIPTDATE";  final StringBuilder queryStringForCashChequeDDCard=new StringBuilder(queryBuilder + ",egeis_jurisdiction ujl" + whereClauseBeforInstumentType+ whereClauseForServiceAndFund+ "it.TYPE in ");  if (paymentMode.equals(CollectionConstants.INSTRUMENTTYPE_CASH))   queryStringForCashChequeDDCard.append("('" + CollectionConstants.INSTRUMENTTYPE_CASH + "')"); else   if (paymentMode.equals(CollectionConstants.INSTRUMENTTYPE_CHEQUEORDD))   queryStringForCashChequeDDCard.append("('" + CollectionConstants.INSTRUMENTTYPE_CHEQUE + "',"+ "'"+ CollectionConstants.INSTRUMENTTYPE_DD+ "') "); else   queryStringForCashChequeDDCard.append("('" + CollectionConstants.INSTRUMENTTYPE_CASH + "','"+ CollectionConstants.INSTRUMENTTYPE_CHEQUE+ "',"+ "'"+ CollectionConstants.INSTRUMENTTYPE_DD+ "') ");  queryStringForCashChequeDDCard.append(whereClause + "AND ch.CREATEDBY=ujl.employee and ujl.boundary in (" + boundaryIdList+ ")"+ groupByClause);  collectionsUtil.getUserByUserName(CollectionConstants.CITIZEN_USER_NAME);  final Query query=receiptHeaderService.getSession().createSQLQuery(queryStringForCashChequeDDCard.toString() + orderBy);  final List<Object[]> queryResults=query.list();  for (int i=0; i < queryResults.size(); i++) {    final Object[] arrayObjectInitialIndex=queryResults.get(i);    HashMap<String,Object> objHashMap=new HashMap<String,Object>(0);    if (i == 0) {      objHashMap.put(CollectionConstants.BANKREMITTANCE_RECEIPTDATE,arrayObjectInitialIndex[1]);      objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICENAME,arrayObjectInitialIndex[2]);      objHashMap.put(CollectionConstants.BANKREMITTANCE_FUNDNAME,arrayObjectInitialIndex[4]);      objHashMap.put(CollectionConstants.BANKREMITTANCE_DEPARTMENTNAME,arrayObjectInitialIndex[5]);      objHashMap.put(CollectionConstants.BANKREMITTANCE_FUNDCODE,arrayObjectInitialIndex[6]);      objHashMap.put(CollectionConstants.BANKREMITTANCE_DEPARTMENTCODE,arrayObjectInitialIndex[7]);      if (arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_CASH)) {        objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCASHAMOUNT,arrayObjectInitialIndex[0]);        objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCHEQUEAMOUNT,"");      }      if (arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE) || arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_DD)) {        objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCASHAMOUNT,"");        objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCHEQUEAMOUNT,arrayObjectInitialIndex[0]);      }    } else {      final int checknew=receiptHeaderService.checkIfMapObjectExist(paramList,arrayObjectInitialIndex);      if (checknew == -1) {        objHashMap.put(CollectionConstants.BANKREMITTANCE_RECEIPTDATE,arrayObjectInitialIndex[1]);        objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICENAME,arrayObjectInitialIndex[2]);        objHashMap.put(CollectionConstants.BANKREMITTANCE_FUNDNAME,arrayObjectInitialIndex[4]);        objHashMap.put(CollectionConstants.BANKREMITTANCE_DEPARTMENTNAME,arrayObjectInitialIndex[5]);        objHashMap.put(CollectionConstants.BANKREMITTANCE_FUNDCODE,arrayObjectInitialIndex[6]);        objHashMap.put(CollectionConstants.BANKREMITTANCE_DEPARTMENTCODE,arrayObjectInitialIndex[7]);        if (arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_CASH)) {          objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCASHAMOUNT,arrayObjectInitialIndex[0]);          objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCHEQUEAMOUNT,"");          objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCARDPAYMENTAMOUNT,"");        }        if (arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE) || arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_DD)) {          objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCASHAMOUNT,"");          objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCHEQUEAMOUNT,arrayObjectInitialIndex[0]);          objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCARDPAYMENTAMOUNT,"");        }      } else {        objHashMap=paramList.get(checknew);        paramList.remove(checknew);        if (arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_CASH))         objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCASHAMOUNT,arrayObjectInitialIndex[0]);        if (arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_CHEQUE) || arrayObjectInitialIndex[3].equals(CollectionConstants.INSTRUMENTTYPE_DD)) {          BigDecimal existingAmount=BigDecimal.ZERO;          if (!objHashMap.get(CollectionConstants.BANKREMITTANCE_SERVICETOTALCHEQUEAMOUNT).equals(""))           existingAmount=new BigDecimal(objHashMap.get(CollectionConstants.BANKREMITTANCE_SERVICETOTALCHEQUEAMOUNT).toString());          existingAmount=existingAmount.add(new BigDecimal(arrayObjectInitialIndex[0].toString()));          objHashMap.put(CollectionConstants.BANKREMITTANCE_SERVICETOTALCHEQUEAMOUNT,existingAmount);        }      }    }    if (objHashMap.get(CollectionConstants.BANKREMITTANCE_RECEIPTDATE) != null && objHashMap.get(CollectionConstants.BANKREMITTANCE_SERVICENAME) != null)     paramList.add(objHashMap);  }  return paramList;}  }
class C{  public void startDocument() throws IOException {}  }
class C{  @Override public boolean pruneValues(double threshold){  return false;}  }
class C{  @SuppressWarnings("unchecked") private Object readResolve() throws ObjectStreamException {  try {    IgniteBiTuple<GridKernalContext,String> t=stash.get();    return t.get1().dataStructures().atomicReference(t.get2(),null,false);  } catch (  IgniteCheckedException e) {    throw U.withCause(new InvalidObjectException(e.getMessage()),e);  } finally {    stash.remove();  }}  }
class C{  public ProgressEvent(Executor executor,int currentSeed,int totalSeeds,boolean isSeedFinished,int currentNFE,int maxNFE,double percentComplete,double elapsedTime,double remainingTime){  super();  this.executor=executor;  this.currentSeed=currentSeed;  this.totalSeeds=totalSeeds;  this.isSeedFinished=isSeedFinished;  this.currentNFE=currentNFE;  this.maxNFE=maxNFE;  this.percentComplete=percentComplete;  this.elapsedTime=elapsedTime;  this.remainingTime=remainingTime;}  }
class C{  public void removeConfigureDeviceFromWifiList(List<ScanResult> wifiList,IEspDeviceNew device){  for (int i=0; i < wifiList.size(); i++) {    ScanResult sr=wifiList.get(i);    if (sr.BSSID.equals(device.getBssid())) {      wifiList.remove(sr);      return;    }  }}  }
class C{  public String[] listEntries(){  return Util.getImplementation().listStorageEntries();}  }
class C{  static XMLReader createParser(){  try {    SAXParserFactory factory=SAXParserFactory.newInstance();    factory.setNamespaceAware(true);    return factory.newSAXParser().getXMLReader();  } catch (  Exception e) {    throw new RuntimeException("Couldn't create XMLReader: " + e.getMessage());  }}  }
class C{  private int rotateWordLeft(int x,int y){  x&=0xffff;  return (x << y) | (x >> (16 - y));}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (name: ");  result.append(name);  result.append(')');  return result.toString();}  }
class C{  public int matchingFirstSegments(Path anotherPath){  checkNotNull(anotherPath);  int anotherPathLen=anotherPath.segmentCount();  int max=Math.min(segments.length,anotherPathLen);  int count=0;  for (int i=0; i < max; i++) {    if (!segments[i].equals(anotherPath.segment(i))) {      return count;    }    count++;  }  return count;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.SCRIPT__ANNOTATIONS:    getAnnotations().clear();  return;case N4JSPackage.SCRIPT__SCRIPT_ELEMENTS:getScriptElements().clear();return;case N4JSPackage.SCRIPT__MODULE:setModule((TModule)null);return;case N4JSPackage.SCRIPT__FLAGGED_USAGE_MARKING_FINISHED:setFlaggedUsageMarkingFinished(FLAGGED_USAGE_MARKING_FINISHED_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public void install(JFormattedTextField ftf){  super.install(ftf);  updateMaskIfNecessary();  positionCursorAtInitialLocation();}  }
class C{  @Override public void put(Collection<SinkRecord> collection){  List<SinkRecord> records=new ArrayList<>(collection);  for (int i=0; i < records.size(); i++) {    Map<String,List<WriteModel<Document>>> bulks=new HashMap<>();    for (int j=0; j < bulkSize && i < records.size(); j++, i++) {      SinkRecord record=records.get(i);      Map<String,Object> jsonMap=SchemaUtils.toJsonMap((Struct)record.value());      String topic=record.topic();      if (bulks.get(topic) == null) {        bulks.put(topic,new ArrayList<WriteModel<Document>>());      }      Document newDocument=new Document(jsonMap).append("_id",record.kafkaOffset());      log.trace("Adding to bulk: {}",newDocument.toString());      bulks.get(topic).add(new UpdateOneModel<Document>(Filters.eq("_id",record.kafkaOffset()),new Document("$set",newDocument),new UpdateOptions().upsert(true)));    }    i--;    log.trace("Executing bulk");    for (    String key : bulks.keySet()) {      try {        com.mongodb.bulk.BulkWriteResult result=mapping.get(key).bulkWrite(bulks.get(key));      } catch (      Exception e) {        log.error(e.getMessage());      }    }  }}  }
class C{  public static void assertNotEqual(double expected,double actual,double minRelativeError,String errorMessage){  if (verbose) {    log("assertNotEqual(" + expected + ", "+ actual+ ", "+ minRelativeError+ ", "+ errorMessage+ ")");  }  if (expected == actual) {    TestUtils.assertBool(false,errorMessage);  } else {    assertRelativeErrorExceeded(expected,actual,minRelativeError,errorMessage);  }}  }
class C{  public ESRILinkPointRecord(double x,double y){  super(x,y);}  }
class C{  public Node removeChild(int n){  Node node;  if (n == 0) {    node=leftChild;    leftChild=null;  } else   if (n == 1) {    node=rightChild;    rightChild=null;  } else {    throw new IllegalArgumentException("TreeModel.Nodes can only have 2 children");  }  node.parent=null;  return node;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder(this.getClass().getName()).append(": ");  if (prefix != null) {    sb.append(prefix);    sb.append(":");  }  sb=sb.append(name);  sb.append("=").append(value).append("->").append(token).append(System.getProperty("line.separator"));  return sb.toString();}  }
class C{  protected void validateProjectActions(FactoryDto factory) throws BadRequestException {  final IdeDto ide=factory.getIde();  if (ide == null) {    return;  }  final List<IdeActionDto> applicationActions=new ArrayList<>();  if (ide.getOnAppClosed() != null) {    applicationActions.addAll(ide.getOnAppClosed().getActions());  }  if (ide.getOnAppLoaded() != null) {    applicationActions.addAll(ide.getOnAppLoaded().getActions());  }  for (  IdeActionDto applicationAction : applicationActions) {    String id=applicationAction.getId();    if ("openFile".equals(id) || "findReplace".equals(id) || "runCommand".equals(id)|| "newTerminal".equals(id)) {      throw new BadRequestException(format(FactoryConstants.INVALID_ACTION_SECTION,id));    }  }  final OnAppLoadedDto onAppLoaded=ide.getOnAppLoaded();  if (onAppLoaded != null) {    for (    IdeActionDto action : onAppLoaded.getActions()) {      final Map<String,String> properties=action.getProperties();      if ("openWelcomePage".equals(action.getId()) && isNullOrEmpty(properties.get("greetingContentUrl"))) {        throw new BadRequestException(FactoryConstants.INVALID_WELCOME_PAGE_ACTION);      }    }  }  final OnProjectsLoadedDto onLoaded=ide.getOnProjectsLoaded();  if (onLoaded != null) {    final List<IdeActionDto> onProjectOpenedActions=onLoaded.getActions();    for (    IdeActionDto applicationAction : onProjectOpenedActions) {      final String id=applicationAction.getId();      final Map<String,String> properties=applicationAction.getProperties();switch (id) {case "openFile":        if (isNullOrEmpty(properties.get("file"))) {          throw new BadRequestException(FactoryConstants.INVALID_OPENFILE_ACTION);        }      break;case "runCommand":    if (isNullOrEmpty(properties.get("name"))) {      throw new BadRequestException(FactoryConstants.INVALID_RUNCOMMAND_ACTION);    }  break;case "findReplace":if (isNullOrEmpty(properties.get("in")) || isNullOrEmpty(properties.get("find")) || isNullOrEmpty(properties.get("replace"))) {  throw new BadRequestException(FactoryConstants.INVALID_FIND_REPLACE_ACTION);}break;}}}}  }
class C{  private static <T>void siftUpComparable(int k,T x,Object[] array){  Comparable<? super T> key=(Comparable<? super T>)x;  while (k > 0) {    int parent=(k - 1) >>> 1;    Object e=array[parent];    if (key.compareTo((T)e) >= 0)     break;    array[k]=e;    k=parent;  }  array[k]=key;}  }
class C{  protected int bytesPerAtom(){  return (3);}  }
class C{  public void addIm(ImEntity im){  ims.add(im);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof PropertyHandler) {    Debug.message("layerspanel","LayerAddPanel found a LayerHandler");    propertyHandler=(PropertyHandler)someObj;  }  if (someObj instanceof LayerHandler) {    layerHandler=(LayerHandler)someObj;  }}  }
class C{  public StunException(int id,String message,Throwable cause){  super(message,cause);  setID(id);}  }
class C{  private IBindingSet[] decodeNextChunk() throws IOException {  if (nsolutions == solutionSetCount) {    if (log.isDebugEnabled())     log.debug("Read solutionSet: name=" + name + ", solutionSetSize="+ nsolutions);    return null;  }  in.readInt();  final int chunkSize=in.readInt();  final int byteLength=in.readInt();  final byte[] a=new byte[byteLength];  in.readFully(a);  final DataInputBuffer buf=new DataInputBuffer(a);  final IBindingSet[] t=new IBindingSet[chunkSize];  for (int i=0; i < chunkSize; i++) {    t[i]=decoder.decodeSolution(buf,true);    if (log.isTraceEnabled())     log.trace("Read: name=" + name + ", solution="+ t[i]);  }  nsolutions+=chunkSize;  if (log.isTraceEnabled())   log.trace("Read chunk: name=" + name + ", chunkSize="+ chunkSize+ ", bytesRead="+ (SolutionSetStreamEncoder.CHUNK_HEADER_SIZE + byteLength)+ ", solutionSetSize="+ nsolutions);  return t;}  }
class C{  @RpcMethod public void createImage(String imageId,String datastore,AsyncMethodCallback<Host.AsyncClient.create_image_call> handler) throws RpcException {  ensureClient();  CreateImageRequest createImageRequest=new CreateImageRequest();  createImageRequest.setImage_id(imageId);  createImageRequest.setDatastore(datastore);  clientProxy.setTimeout(CREATE_IMAGE_TIMEOUT_MS);  logger.info("create_image target {}, request {}",getHostIp(),createImageRequest);  try {    clientProxy.create_image(createImageRequest,handler);  } catch (  TException e) {    throw new RpcException(e.getMessage());  }}  }
class C{  public static OverlappingContentFragment newInstance(){  return new OverlappingContentFragment();}  }
class C{  public LruCache(int maxSize){  if (maxSize <= 0) {    throw new IllegalArgumentException("Max size must be positive.");  }  this.maxSize=maxSize;  this.map=new LinkedHashMap<String,Bitmap>(0,0.75f,true);}  }
class C{  private FloatConsts(){}  }
class C{  public QuarkJdbc41Factory(){  this(4,1);}  }
class C{  public void menuSelected(MenuEvent e){  windowMenu.removeAll();  itemsToFrames.clear();  JInternalFrame[] layer0Frames=desktopPane.getAllFramesInLayer(0);  List titles=new ArrayList();  Map titlesToFrames=new HashMap();  for (  JInternalFrame layer0Frame : layer0Frames) {    String title=layer0Frame.getTitle();    title=((title == null) || title.equals("")) ? "[untitled]" : title;    titles.add(title);    titlesToFrames.put(title,layer0Frame);  }  Collections.sort(titles);  for (  Object title1 : titles) {    String title=(String)title1;    JMenuItem item=new JMenuItem(title);    this.windowMenu.add(item);    item.addActionListener(this);    this.itemsToFrames.put(item,titlesToFrames.get(title));  }}  }
class C{  public void putOnForTestsOnly(Connection con,Object key,Object value,EventID eventId,Object callbackArg){  EventIDHolder event=new EventIDHolder(eventId);  PutOp.execute(con,this.pool,this.regionName,key,value,event,callbackArg,this.pool.getPRSingleHopEnabled());}  }
class C{  public void put(ReplDBMSEvent event) throws InterruptedException, ReplicatorException {  if (filter(event) != null) {    super.put(event);  }}  }
class C{  @Override public int hashCode(){  return Objects.hashCode(value);}  }
class C{  public String stemQuery(String query){  Logger logger=Logger.getLogger("pitt.search.lucene");  String stemmedQuery="";  TokenStream theTS=createComponents(query).getTokenStream();  try {    while (theTS.incrementToken()) {      String theTS_s=theTS.toString().replaceAll(".*term=","");      stemmedQuery+=theTS_s.substring(0,theTS_s.length() - 1) + " ";    }  } catch (  IOException e) {    logger.info("Error while stemming query " + query);  }  return stemmedQuery;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  private void runTests(Problem problem,CommandLine commandLine){  int trials=5;  if (commandLine.getOptionValue("test") != null) {    trials=Integer.parseInt(commandLine.getOptionValue("test"));  }  try {    int count=0;    RandomInitialization initialization=new RandomInitialization(problem,trials);    Solution[] solutions=initialization.initialize();    for (    Solution solution : solutions) {      System.out.println("Running test " + (++count) + ":");      for (int j=0; j < solution.getNumberOfVariables(); j++) {        System.out.print("  Variable ");        System.out.print(j + 1);        System.out.print(" = ");        System.out.println(solution.getVariable(j));      }      System.out.println("  * Evaluating solution *");      problem.evaluate(solution);      System.out.println("  * Evaluation complete *");      for (int j=0; j < solution.getNumberOfObjectives(); j++) {        System.out.print("  Objective ");        System.out.print(j + 1);        System.out.print(" = ");        System.out.println(solution.getObjective(j));      }      for (int j=0; j < solution.getNumberOfConstraints(); j++) {        System.out.print("  Constraint ");        System.out.print(j + 1);        System.out.print(" = ");        System.out.println(solution.getConstraint(j));      }      if ((solution.getNumberOfConstraints() > 0) && solution.violatesConstraints()) {        System.out.println("  Solution is infeasible (non-zero " + "constraint value)!");      }    }    System.out.println("Test succeeded!");  } catch (  Exception e) {    e.printStackTrace();    System.out.println("Test failed!  Please see the error message " + "above for details.");  }}  }
class C{  public String peeterswim(int index){switch (index) {case 0:    return "0";case 1:  return "1";case 2:return "2";default :return null;}}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  protected StorageTier createStorageTier(CIMInstance tierInstance,StorageTier tierObject,String tierNativeGuid,URI vmaxFastPolicyUri,List<StorageTier> newTierList,List<StorageTier> updateTierList,String driveTechnology){  boolean isNewTier=false;  if (null == tierObject) {    tierObject=new StorageTier();    tierObject.setId(URIUtil.createId(StorageTier.class));    tierObject.setNativeGuid(tierNativeGuid);    isNewTier=true;  }  tierObject.setPercentage(getCIMPropertyValue(tierInstance,Constants.PERCENTAGE));  tierObject.setLabel(getCIMPropertyValue(tierInstance,Constants.ELEMENTNAME));  tierObject.setDiskDriveTechnology(driveTechnology);  String totalCapacity=getCIMPropertyValue(tierInstance,Constants.TOTAL_CAPACITY);  tierObject.setTotalCapacity(ControllerUtils.convertBytesToKBytes(totalCapacity));  if (isNewTier) {    newTierList.add(tierObject);  } else {    updateTierList.add(tierObject);  }  return tierObject;}  }
class C{  public String resolveURL(String syncUrl,String registrationUrl){  if (StringUtils.isBlank(syncUrl) || syncUrl.startsWith(Constants.PROTOCOL_NONE)) {    log.debug("Using the registration URL to contact the remote node because the syncURL for the node is blank");    return registrationUrl;  }  try {    URI uri=new URI(syncUrl);    for (    ISyncUrlExtension handler : extensionService.getExtensionPointList(ISyncUrlExtension.class)) {      syncUrl=handler.resolveUrl(uri);      uri=new URI(syncUrl);    }  } catch (  URISyntaxException e) {    log.error(e.getMessage(),e);  }  return syncUrl;}  }
class C{  public static boolean readCommandParams(final BashPsiBuilder builder,TokenSet validExtraTokens){  boolean ok=true;  while (!builder.eof() && ok) {    if (Parsing.redirection.isRedirect(builder,true)) {      ok=Parsing.redirection.parseList(builder,false,true);    } else     if (Parsing.word.isWordToken(builder,true)) {      ok=Parsing.word.parseWord(builder,true);    } else     if (validExtraTokens.contains(builder.getTokenType())) {      builder.advanceLexer();      ok=true;    } else {      break;    }  }  return ok;}  }
class C{  public static TableLookupPlan createLookupPlan(QueryGraph queryGraph,int currentLookupStream,int indexedStream,QueryPlanIndex indexSpecs,EventType[] typesPerStream,TableMetadata indexedStreamTableMeta){  QueryGraphValue queryGraphValue=queryGraph.getGraphValue(currentLookupStream,indexedStream);  QueryGraphValuePairHashKeyIndex hashKeyProps=queryGraphValue.getHashKeyProps();  List<QueryGraphValueEntryHashKeyed> hashPropsKeys=hashKeyProps.getKeys();  String[] hashIndexProps=hashKeyProps.getIndexed();  QueryGraphValuePairRangeIndex rangeProps=queryGraphValue.getRangeProps();  List<QueryGraphValueEntryRange> rangePropsKeys=rangeProps.getKeys();  String[] rangeIndexProps=rangeProps.getIndexed();  Pair<TableLookupIndexReqKey,int[]> pairIndexHashRewrite=indexSpecs.getIndexNum(hashIndexProps,rangeIndexProps);  TableLookupIndexReqKey indexNum=pairIndexHashRewrite == null ? null : pairIndexHashRewrite.getFirst();  if (pairIndexHashRewrite != null && pairIndexHashRewrite.getSecond() != null) {    int[] indexes=pairIndexHashRewrite.getSecond();    String[] newHashIndexProps=new String[indexes.length];    List<QueryGraphValueEntryHashKeyed> newHashKeys=new ArrayList<QueryGraphValueEntryHashKeyed>();    for (int i=0; i < indexes.length; i++) {      newHashIndexProps[i]=hashIndexProps[indexes[i]];      newHashKeys.add(hashPropsKeys.get(indexes[i]));    }    hashIndexProps=newHashIndexProps;    hashPropsKeys=newHashKeys;    rangeIndexProps=new String[0];    rangePropsKeys=Collections.emptyList();  }  if (hashIndexProps.length == 0 && rangeIndexProps.length == 0) {    QueryGraphValuePairInKWSingleIdx singles=queryGraphValue.getInKeywordSingles();    if (!singles.getKey().isEmpty()) {      QueryGraphValueEntryInKeywordSingleIdx single=null;      indexNum=null;      if (indexedStreamTableMeta != null) {        String[] indexes=singles.getIndexed();        int count=0;        for (        String index : indexes) {          Pair<IndexMultiKey,EventTableIndexEntryBase> indexPairFound=EventTableIndexUtil.findIndexBestAvailable(indexedStreamTableMeta.getEventTableIndexMetadataRepo().getIndexes(),Collections.singleton(index),Collections.<String>emptySet(),null);          if (indexPairFound != null) {            indexNum=new TableLookupIndexReqKey(indexPairFound.getSecond().getOptionalIndexName(),indexedStreamTableMeta.getTableName());            single=singles.getKey().get(count);          }          count++;        }      } else {        single=singles.getKey().get(0);        Pair<TableLookupIndexReqKey,int[]> pairIndex=indexSpecs.getIndexNum(new String[]{singles.getIndexed()[0]},null);        indexNum=pairIndex.getFirst();      }      if (indexNum != null) {        return new InKeywordTableLookupPlanSingleIdx(currentLookupStream,indexedStream,indexNum,single.getKeyExprs());      }    }    List<QueryGraphValuePairInKWMultiIdx> multis=queryGraphValue.getInKeywordMulti();    if (!multis.isEmpty()) {      if (indexedStreamTableMeta != null) {        return getFullTableScanTable(currentLookupStream,indexedStream,indexedStreamTableMeta);      }      QueryGraphValuePairInKWMultiIdx multi=multis.get(0);      TableLookupIndexReqKey[] indexNameArray=new TableLookupIndexReqKey[multi.getIndexed().length];      boolean foundAll=true;      for (int i=0; i < multi.getIndexed().length; i++) {        ExprIdentNode identNode=(ExprIdentNode)multi.getIndexed()[i];        Pair<TableLookupIndexReqKey,int[]> pairIndex=indexSpecs.getIndexNum(new String[]{identNode.getResolvedPropertyName()},null);        if (pairIndex == null) {          foundAll=false;        } else {          indexNameArray[i]=pairIndex.getFirst();        }      }      if (foundAll) {        return new InKeywordTableLookupPlanMultiIdx(currentLookupStream,indexedStream,indexNameArray,multi.getKey().getKeyExpr());      }    }    if (indexedStreamTableMeta != null) {      return getFullTableScanTable(currentLookupStream,indexedStream,indexedStreamTableMeta);    }    if (indexNum == null) {      indexNum=new TableLookupIndexReqKey(indexSpecs.addIndex(null,null));    }    return new FullTableScanLookupPlan(currentLookupStream,indexedStream,indexNum);  }  if (indexNum == null) {    throw new IllegalStateException("Failed to query plan as index for " + Arrays.toString(hashIndexProps) + " and "+ Arrays.toString(rangeIndexProps)+ " in the index specification");  }  if (indexedStreamTableMeta != null) {    Pair<IndexMultiKey,EventTableIndexEntryBase> indexPairFound=EventTableIndexUtil.findIndexBestAvailable(indexedStreamTableMeta.getEventTableIndexMetadataRepo().getIndexes(),toSet(hashIndexProps),toSet(rangeIndexProps),null);    if (indexPairFound != null) {      IndexKeyInfo indexKeyInfo=SubordinateQueryPlannerUtil.compileIndexKeyInfo(indexPairFound.getFirst(),hashIndexProps,getHashKeyFuncsAsSubProp(hashPropsKeys),rangeIndexProps,getRangeFuncsAsSubProp(rangePropsKeys));      if (indexKeyInfo.getOrderedKeyCoercionTypes().isCoerce() || indexKeyInfo.getOrderedRangeCoercionTypes().isCoerce()) {        return getFullTableScanTable(currentLookupStream,indexedStream,indexedStreamTableMeta);      }      hashPropsKeys=toHashKeyFuncs(indexKeyInfo.getOrderedHashDesc());      hashIndexProps=IndexedPropDesc.getIndexProperties(indexPairFound.getFirst().getHashIndexedProps());      rangePropsKeys=toRangeKeyFuncs(indexKeyInfo.getOrderedRangeDesc());      rangeIndexProps=IndexedPropDesc.getIndexProperties(indexPairFound.getFirst().getRangeIndexedProps());      indexNum=new TableLookupIndexReqKey(indexPairFound.getSecond().getOptionalIndexName(),indexedStreamTableMeta.getTableName());      if (hashIndexProps.length == 0 && rangeIndexProps.length == 0) {        return getFullTableScanTable(currentLookupStream,indexedStream,indexedStreamTableMeta);      }    } else {      return getFullTableScanTable(currentLookupStream,indexedStream,indexedStreamTableMeta);    }  }  if (hashIndexProps.length > 0 && rangeIndexProps.length == 0) {    TableLookupPlan tableLookupPlan;    if (hashPropsKeys.size() == 1) {      tableLookupPlan=new IndexedTableLookupPlanSingle(currentLookupStream,indexedStream,indexNum,hashPropsKeys.get(0));    } else {      tableLookupPlan=new IndexedTableLookupPlanMulti(currentLookupStream,indexedStream,indexNum,hashPropsKeys);    }    CoercionDesc coercionTypes=CoercionUtil.getCoercionTypesHash(typesPerStream,currentLookupStream,indexedStream,hashPropsKeys,hashIndexProps);    if (coercionTypes.isCoerce()) {      Class[] existCoercionTypes=indexSpecs.getCoercionTypes(hashIndexProps);      if (existCoercionTypes != null) {        for (int i=0; i < existCoercionTypes.length; i++) {          coercionTypes.getCoercionTypes()[i]=JavaClassHelper.getCompareToCoercionType(existCoercionTypes[i],coercionTypes.getCoercionTypes()[i]);        }      }      indexSpecs.setCoercionTypes(hashIndexProps,coercionTypes.getCoercionTypes());    }    return tableLookupPlan;  }  if (hashIndexProps.length == 0 && rangeIndexProps.length == 1) {    QueryGraphValueEntryRange range=rangePropsKeys.get(0);    return new SortedTableLookupPlan(currentLookupStream,indexedStream,indexNum,range);  } else {    return new CompositeTableLookupPlan(currentLookupStream,indexedStream,indexNum,hashPropsKeys,rangePropsKeys);  }}  }
class C{  public Triangle verticalRayTest(Vector3 testPoint,Vector3 out,Bits allowedMeshParts){  tmpRayVerticalRayTest.set(tmpVerticalRayTest1.set(Constants.V3_UP).scl(500).add(testPoint),tmpVerticalRayTest2.set(Constants.V3_DOWN));  Triangle hitTri=rayTest(tmpRayVerticalRayTest,1000,allowedMeshParts);  if (hitTri == null) {    out.set(Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY,Float.POSITIVE_INFINITY);    return null;  } else {    Intersector.intersectRayTriangle(tmpRayVerticalRayTest,hitTri.a,hitTri.b,hitTri.c,out);    return hitTri;  }}  }
class C{  private void handleActiveInternetConnection(ConnectivityEvent event,ConnectivityChangeListener listener){  if (event.getStrength().ordinal() < configuration.getMinimumSignalStrength().ordinal()) {    return;  } else   if (event.getType() == ConnectivityType.MOBILE && configuration.isRegisteredForMobileNetworkChanges()) {    listener.onConnectionChange(event);  } else   if (event.getType() == ConnectivityType.WIFI && configuration.isRegisteredForWiFiChanges()) {    listener.onConnectionChange(event);  }}  }
class C{  @Override public T selectPlan(final HasPlansAndId<T,I> person){  double maxScore=Double.NEGATIVE_INFINITY;  T bestPlan=null;  for (  T plan : person.getPlans()) {    Double score=plan.getScore();    if ((score != null) && (score.doubleValue() > maxScore) && !score.isNaN()) {      maxScore=plan.getScore().doubleValue();      bestPlan=plan;    }  }  if (bestPlan == null && person.getPlans().size() > 0) {    return person.getPlans().get(0);  }  return bestPlan;}  }
class C{  protected boolean close(LRUCacheEntry entry){  Openable element=(Openable)entry.key;  try {    if (!element.canBeRemovedFromCache()) {      return false;    } else {      element.close();      return true;    }  } catch (  JavaModelException npe) {    return false;  }}  }
class C{  public static IndependenceFact serializableInstance(){  return new IndependenceFact(new GraphNode("X"),new GraphNode("Y"));}  }
class C{  protected Node newNode(){  return new SVGOMRadialGradientElement();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static int parseInt(String str){  int value=0;  for (int i=0, j=(int)Math.pow(10,str.length() - 1); i < str.length(); i++, j/=10) {    value+=(str.charAt(i) - 48) * j;  }  return value;}  }
class C{  public void resetPreviousStates(boolean boo){  resetPreviousStates=boo;}  }
class C{  public void add(XMLX509CRL xmlX509CRL){  this.constructionElement.appendChild(xmlX509CRL.getElement());  XMLUtils.addReturnToElement(this.constructionElement);}  }
class C{  public Matrix3d(double m00,double m01,double m02,double m10,double m11,double m12,double m20,double m21,double m22){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m20=m20;  this.m21=m21;  this.m22=m22;}  }
class C{  public boolean justSerialized(){  return serialized.getAndSet(false);}  }
class C{  @Override default UnaryOperator<T> uncheck(){  return null;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public Point2D transform(Point2D graphPoint){  if (graphPoint == null)   return null;  Point2D viewCenter=getViewCenter();  double viewRadius=getViewRadius();  double ratio=getRatio();  Point2D viewPoint=delegate.transform(graphPoint);  double dx=viewPoint.getX() - viewCenter.getX();  double dy=viewPoint.getY() - viewCenter.getY();  dx*=ratio;  Point2D pointFromCenter=new Point2D.Double(dx,dy);  PolarPoint polar=PolarPoint.cartesianToPolar(pointFromCenter);  double theta=polar.getTheta();  double radius=polar.getRadius();  if (radius > viewRadius)   return viewPoint;  double mag=Math.tan(Math.PI / 2 * magnification);  radius*=mag;  radius=Math.min(radius,viewRadius);  radius/=viewRadius;  radius*=Math.PI / 2;  radius=Math.abs(Math.atan(radius));  radius*=viewRadius;  Point2D projectedPoint=PolarPoint.polarToCartesian(theta,radius);  projectedPoint.setLocation(projectedPoint.getX() / ratio,projectedPoint.getY());  Point2D translatedBack=new Point2D.Double(projectedPoint.getX() + viewCenter.getX(),projectedPoint.getY() + viewCenter.getY());  return translatedBack;}  }
class C{  @Inline public static Object initializeScalar(Address ptr,TIB tib,int size){  Object ref=JavaHeader.initializeScalarHeader(ptr,tib,size);  MiscHeader.initializeHeader(ref,tib,size,true);  setTIB(ref,tib);  return ref;}  }
class C{  public LinkSpatialIndex(String shpFilename) throws IOException {  super(shpFilename);}  }
class C{  public synchronized boolean sameAs(RegionVersionHolder<T> other){  mergeBitSet();  if (getVersion() != other.getVersion()) {    return false;  }  RegionVersionHolder<T> vh1=this.clone();  RegionVersionHolder<T> vh2=other.clone();  vh1.removeSpecialException();  vh2.removeSpecialException();  if (vh1.exceptions == null || vh1.exceptions.isEmpty()) {    if (vh2.exceptions != null && !vh2.exceptions.isEmpty()) {      return false;    }  } else {    List<RVVException> e1=canonicalExceptions(vh1.exceptions);    List<RVVException> e2=canonicalExceptions(vh2.exceptions);    Iterator<RVVException> it1=e1.iterator();    Iterator<RVVException> it2=e2.iterator();    while (it1.hasNext() && it2.hasNext()) {      if (!it1.next().sameAs(it2.next())) {        return false;      }    }    return (!it1.hasNext() && !it2.hasNext());  }  return true;}  }
class C{  public void readStats(GlowPlayer player){  File statsFile=getPlayerFile(player.getUniqueId());  player.getStatisticMap().getValues().clear();  if (statsFile.exists()) {    try {      JSONParser parser=new JSONParser();      JSONObject json=(JSONObject)parser.parse(new FileReader(statsFile));      for (      Object o : json.keySet()) {        String key=(String)o;        Long longValue=null;        if (json.get(o) instanceof Long) {          longValue=(Long)json.get(o);        } else         if (json.get(o) instanceof JSONObject) {          JSONObject object=(JSONObject)json.get(o);          if (object.containsKey("value")) {            longValue=(Long)object.get("value");          }        } else {          GlowServer.logger.warning("Unknown statistic type for '" + key + "': "+ json.get(o)+ " ("+ json.get(o).getClass().getSimpleName()+ ")");        }        if (longValue != null) {          player.getStatisticMap().getValues().put(key,longValue.intValue());        }      }    } catch (    ParseException|IOException e) {      e.printStackTrace();    }  }}  }
class C{  public String canopyT2TipText(){  return "The T2 distance to use when using canopy clustering. Values < 0 indicate that this should be set using " + "a heuristic based on attribute standard deviation";}  }
class C{  public void addAltField(AltField field){  addIdField(mAltLines,field);}  }
class C{  synchronized boolean contains(long v){  if (v > getVersion()) {    return false;  } else {    if (this.bitSet != null && v >= this.bitSetVersion) {      return this.bitSet.get((int)(v - this.bitSetVersion));    }    if (this.exceptions == null) {      return true;    }    for (Iterator<RVVException> it=this.exceptions.iterator(); it.hasNext(); ) {      RVVException e=it.next();      if (e.nextVersion <= v) {        return true;      }      if (e.previousVersion < v && v < e.nextVersion) {        return e.contains(v);      }    }    return true;  }}  }
class C{  public OptionsBean obtenerTiposInformesCombo(Entidad entidad) throws ISicresRPAdminException {  OptionsBean options=new OptionsBean();  ResourceBundle rs=ResourceBundle.getBundle("es.ieci.tecdoc.isicres.admin.core.manager.tipoInforme");  Enumeration keys=rs.getKeys();  while (keys.hasMoreElements()) {    OptionBean option=new OptionBean();    String key=keys.nextElement().toString();    String value=rs.getString(key);    option.setCodigo(key);    option.setDescripcion(value);    options.add(option);  }  return options;}  }
class C{  public long size(){  return buffer.offset() + buffer.position();}  }
class C{  public static void reparseFiles(@NotNull VirtualFile... files){  reparseFiles(Arrays.asList(files));}  }
class C{  private static boolean contains(String value,int start,int length,String criteria1,String criteria2,String criteria3,String criteria4){  return contains(value,start,length,new String[]{criteria1,criteria2,criteria3,criteria4});}  }
class C{  public CAddFilesAction(){  super(">>");}  }
class C{  protected Hit<V>[] applyRegex(final Hit<V>[] hits,final Pattern regex){  throw new UnsupportedOperationException();}  }
class C{  public DirClassesTypeResolver(File dir) throws IOException {  if (!dir.exists() || !dir.isDirectory()) {    throw new IllegalArgumentException("Not existing or not a directory: " + dir.getPath());  }  this.dir=dir;  explore(dir);  ClassPoolFactory.INSTANCE.addClassesDir(new CompiledClassPath());}  }
class C{  static StringBuilder newStringBuilderForCollection(int size){  checkNonnegative(size,"size");  return new StringBuilder((int)Math.min(size * 8L,Ints.MAX_POWER_OF_TWO));}  }
class C{  public static int[] shuffle(int[] input){  List<Integer> vals=new ArrayList<Integer>(input.length);  for (int i=0; i < input.length; i++)   vals.add(input[i]);  Collections.shuffle(vals,SEEDED_RANDOM);  int[] copy=new int[input.length];  for (int i=0; i < input.length; i++)   copy[i]=vals.get(i);  return copy;}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private Component findFocusOwner(Component visibleComponent){  Component focusOwner=KeyboardFocusManager.getCurrentKeyboardFocusManager().getFocusOwner();  for (Component temp=focusOwner; temp != null; temp=(temp instanceof Window) ? null : temp.getParent()) {    if (temp == visibleComponent) {      return focusOwner;    }  }  return null;}  }
class C{  public void writeLine(String text) throws IOException {  write(text);  out.newLine();}  }
class C{  public IconPanel(Icon icon){  setIcon(icon);}  }
class C{  public IndexedItem(){  index=-1;}  }
class C{  public void testSetF0Momentary(){  boolean f0Momentary=false;  AbstractThrottle instance=new AbstractThrottleImpl();  instance.setF0Momentary(f0Momentary);}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("FormFormat [ \n\t ver[");  buffer.append(ver);  buffer.append("] \n\t dlgDef [");  buffer.append(dlgDef);  buffer.append("\n\t ] \n\t varDefs [");  buffer.append(vardefs);  buffer.append("\n\t ]");  return buffer.toString();}  }
class C{  public void prepareMatrixOffset(boolean inverted){  mMatrixOffset.reset();  if (!inverted)   mMatrixOffset.postTranslate(mViewPortHandler.offsetLeft(),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom()); else {    mMatrixOffset.setTranslate(-(mViewPortHandler.getChartWidth() - mViewPortHandler.offsetRight()),mViewPortHandler.getChartHeight() - mViewPortHandler.offsetBottom());    mMatrixOffset.postScale(-1.0f,1.0f);  }}  }
class C{  private static void usage(){  for (  String s : USAGE_MESSAGE) {    System.out.println(s);  }  for (  String s : WELCOME_MESSAGE) {    System.out.println(s);  }}  }
class C{  public static double[] geometric(final int n,final double p){  if (p <= 0 || p > 1) {    throw new IllegalArgumentException();  }  final double[] r=new double[n];  double v=1.0;  for (int k=0; k < n; k++, v*=p) {    r[k]=v;  }  return renormalize(r);}  }
class C{  public int xMax(){  return this.data.readShort(Offset.xMax.offset);}  }
class C{  private List<Effect> adjustEffects(){  final List<Effect> adjustedEffects=new ArrayList<Effect>();  final List<Effect> effects=getAllEffects();  for (  Effect effect : effects) {    final long effectStartTimeMs;    if (effect.getStartTime() > getDuration()) {      effectStartTimeMs=0;    } else {      effectStartTimeMs=effect.getStartTime();    }    final long effectDurationMs;    if (effectStartTimeMs + effect.getDuration() > getDuration()) {      effectDurationMs=getDuration() - effectStartTimeMs;    } else {      effectDurationMs=effect.getDuration();    }    if (effectStartTimeMs != effect.getStartTime() || effectDurationMs != effect.getDuration()) {      effect.setStartTimeAndDuration(effectStartTimeMs,effectDurationMs);      adjustedEffects.add(effect);    }  }  return adjustedEffects;}  }
class C{  public void removeEventSourceListener(EventSourceListener listener){  LOG.entering(CLASS_NAME,"removeEventSourceListener",listener);  if (listener == null) {    throw new NullPointerException("listener");  }  listeners.remove(listener);}  }
class C{  public static <T>Supplier<T> prevDataSupplier(final Cursor cursor,final DatabaseEntry stopKey,final ByteArrayConverter<T> converter){  DatabaseEntry key=new DatabaseEntry();  DatabaseEntry data=new DatabaseEntry();  return null;}  }
class C{  public BinaryBlockFrame(JavaPairRDD<Long,FrameBlock> binaryBlocks,FrameMetadata frameMetadata){  this.binaryBlocks=binaryBlocks;  this.frameMetadata=frameMetadata;}  }
class C{  public String addSection(Section section){  String tag=UUID.randomUUID().toString();  addSection(tag,section);  return tag;}  }
class C{  public long optLong(String key){  return optLong(key,0);}  }
class C{  private static void adjust(Object[] array,Comparator c,int lower,int upper){  int j, k;  Object temp;  j=lower;  k=lower * 2;  while (k <= upper) {    if ((k < upper) && (c.compare(array[k - 1],array[k]) < 0)) {      k+=1;    }    if (c.compare(array[j - 1],array[k - 1]) < 0) {      temp=array[j - 1];      array[j - 1]=array[k - 1];      array[k - 1]=temp;    }    j=k;    k*=2;  }}  }
class C{  @Deprecated public static void registerEntity(String serviceName,Class<? extends TaggedLogAPIEntity> clazz) throws IllegalArgumentException {  registerEntity(serviceName,createEntityDefinition(clazz));}  }
class C{  @PostMapping("/users/{id}/update") public U updateUser(@PathVariable("id") U user,@RequestBody U updatedUser){  log.debug("Updating user ... ");  lemonService.updateUser(user,updatedUser);  return lemonService.userForClient();}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  LOG.d(LOG_TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  quotaUpdater.updateQuota(MAX_QUOTA);}  }
class C{  public TextClassificationTarget_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());  casFeat_suffix=jcas.getRequiredFeatureDE(casType,"suffix","uima.cas.String",featOkTst);  casFeatCode_suffix=(null == casFeat_suffix) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_suffix).getCode();  casFeat_id=jcas.getRequiredFeatureDE(casType,"id","uima.cas.Integer",featOkTst);  casFeatCode_id=(null == casFeat_id) ? JCas.INVALID_FEATURE_CODE : ((FeatureImpl)casFeat_id).getCode();}  }
class C{  public boolean isReadable(){  return true;}  }
class C{  public static synchronized boolean updateHistory(SignedTreeRoot newSTR){  if (newSTR == null) {    Logging.error("Got null STR");    return false;  }  if (newSTR.getEpoch() < nextEpoch()) {    Logging.error("Next epoch's STR has bad epoch");    return false;  }  curSTR=newSTR;  length++;  return true;}  }
class C{  public static final double kilogramsToPounds(double kilograms){  return kilograms * KILOGRAM_TO_POUND;}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof PrinterMessageFromOperator);}  }
class C{  public MdiMainFrame(String name,String treeFile,String menubarFile,String toolbarFile){  super(name);  configureFrame(treeFile);  addMainMenuBar(menubarFile);  addMainToolBar(toolbarFile);  pack();}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  public String computeConfigurationName(String runnerId,URI moduleToRun){  String modulePath=moduleToRun.path();  modulePath=stripStart(modulePath,"/","resource/","plugin/");  final String moduleName=modulePath.replace('/','-');  final String runnerName=runnerRegistry.getDescriptor(runnerId).getName();  return moduleName + " (" + runnerName+ ")";}  }
class C{  public ActionForward execute(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  sessionContext.checkPermission(Right.TimetableManagers);  MessageResources rsc=getResources(request);  TimetableManagerForm frm=(TimetableManagerForm)form;  String op=(request.getParameter("op") == null) ? (frm.getOp() == null || frm.getOp().length() == 0) ? (request.getAttribute("op") == null) ? null : request.getAttribute("op").toString() : frm.getOp() : request.getParameter("op");  if (op == null || op.trim().length() == 0)   throw new Exception("Operation could not be interpreted: " + op);  LookupTables.setupDepts(request,sessionContext.getUser().getCurrentAcademicSessionId());  request.setAttribute("solverGroupList",SolverGroup.findBySessionId(sessionContext.getUser().getCurrentAcademicSessionId()));  frm.setOp(op);  if (op.equalsIgnoreCase(rsc.getMessage("button.backToManagerList"))) {    if (frm.getUniqueId() != null && frm.getUniqueId().trim().length() > 0)     request.setAttribute(Constants.JUMP_TO_ATTR_NAME,frm.getUniqueId());    return mapping.findForward("displayManagerList");  }  if (op.equalsIgnoreCase(rsc.getMessage("op.edit"))) {    frm.setOp1("2");    loadForm(request,frm);  }  if (op.equalsIgnoreCase(rsc.getMessage("button.addTimetableManager"))) {    sessionContext.checkPermission(Right.TimetableManagerAdd);    frm.setOp1("1");    frm.setLookupEnabled(ApplicationProperty.ManagerExternalIdLookup.isTrue() && ApplicationProperty.ManagerExternalIdLookupClass.value() != null);  }  if (op.equalsIgnoreCase(rsc.getMessage("button.lookupManager"))) {  }  String mapPath=frm.getOp1().equals("1") ? "addManagerInfo" : "editManagerInfo";  if (op.equalsIgnoreCase(rsc.getMessage("button.addRole"))) {    ActionMessages errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      saveErrors(request,errors);      setupRoles(request,frm);      lookupManager(frm);      return mapping.findForward(mapPath);    }    Roles role=new RolesDAO().get(new Long(frm.getRole()));    frm.addToRoles(role);    if (frm.getRoles().size() == 1)     frm.setPrimaryRole(role.getRoleId().toString());    frm.getRoleReceiveEmailFlags().add(new Boolean(true));  }  if (op.equalsIgnoreCase(rsc.getMessage("button.addDepartment"))) {    ActionMessages errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      saveErrors(request,errors);      setupRoles(request,frm);      lookupManager(frm);      return mapping.findForward(mapPath);    }    Department dept=new DepartmentDAO().get(new Long(frm.getDept()));    frm.addToDepts(dept);  }  if (op.equalsIgnoreCase(rsc.getMessage("button.addSolverGroup"))) {    ActionMessages errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      saveErrors(request,errors);      setupRoles(request,frm);      lookupManager(frm);      return mapping.findForward(mapPath);    }    SolverGroup sg=new SolverGroupDAO().get(new Long(frm.getSolverGr()));    frm.addToSolverGrs(sg);  }  if (op.equalsIgnoreCase(rsc.getMessage("button.insertTimetableManager"))) {    frm.setOp1("1");    ActionMessages errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      saveErrors(request,errors);      setupRoles(request,frm);      try {        lookupManager(frm);      } catch (      Exception e) {      }      return mapping.findForward(mapPath);    }    addManager(request,frm);    return mapping.findForward("displayManagerList");  }  if (op.equalsIgnoreCase(rsc.getMessage("button.updateTimetableManager"))) {    frm.setOp1("2");    ActionMessages errors=frm.validate(mapping,request);    if (!errors.isEmpty()) {      saveErrors(request,errors);      setupRoles(request,frm);      try {        lookupManager(frm);      } catch (      Exception e) {      }      return mapping.findForward(mapPath);    }    updateManager(request,frm);    return mapping.findForward("displayManagerList");  }  if (op.equalsIgnoreCase(rsc.getMessage("button.delete")) || op.equalsIgnoreCase(rsc.getMessage("button.deleteTimetableManager"))) {    String deleteType=request.getParameter("deleteType");    String deleteId=request.getParameter("deleteId");    if (deleteType.equalsIgnoreCase("dept")) {      frm.removeFromDepts(Integer.parseInt(deleteId));    }    if (deleteType.equalsIgnoreCase("solverGr")) {      frm.removeFromSolverGrs(Integer.parseInt(deleteId));    }    if (deleteType.equalsIgnoreCase("role")) {      frm.removeFromRoles(Integer.parseInt(deleteId));      if (frm.getRoles().size() == 1)       frm.setPrimaryRole(frm.getRoles(0));    }    if (deleteType.equalsIgnoreCase("manager")) {      frm.setOp1("2");      deleteManager(request,frm);      return mapping.findForward("displayManagerList");    }  }  try {    lookupManager(frm);  } catch (  Exception e) {    ActionMessages errors=new ActionMessages();    errors.add("puid",new ActionMessage("errors.generic",e.getMessage()));    saveErrors(request,errors);    setupRoles(request,frm);    return mapping.findForward(mapPath);  }  setupRoles(request,frm);  return mapping.findForward(mapPath);}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processRequest(request,response);}  }
class C{  private boolean recursiveDelete(PreferenceGroup group,Preference preference){  if (group == null) {    Log.d(TAG,"attempting to delete from null preference group");    return false;  }  if (preference == null) {    Log.d(TAG,"attempting to delete null preference");    return false;  }  if (group.removePreference(preference)) {    return true;  }  for (int i=0; i < group.getPreferenceCount(); ++i) {    Preference pref=group.getPreference(i);    if (pref instanceof PreferenceGroup) {      if (recursiveDelete((PreferenceGroup)pref,preference)) {        return true;      }    }  }  return false;}  }
class C{  protected boolean edgeCheck(Edge e,boolean throwException){  if (!e.isValid()) {    if (throwException) {      throw new IllegalArgumentException("Edge must be valid.");    }    return false;  }  if (e.getGraph() != this) {    if (throwException) {      throw new IllegalArgumentException("Edge must be part of this Graph.");    }    return false;  }  return true;}  }
class C{  public static String parseMinShouldMatch(final IndexSchema schema,final SolrParams params){  org.apache.solr.parser.QueryParser.Operator op=QueryParsing.getQueryParserDefaultOperator(schema,params.get(QueryParsing.OP));  return params.get(DisMaxParams.MM,op.equals(QueryParser.Operator.AND) ? "100%" : "0%");}  }
class C{  protected void copyExtraClasspathJars() throws IOException {  List<String> dependencies=new ArrayList<String>();  dependencies.add("javax.api");  dependencies.add("javax.transaction.api");  Set<String> classpath=new TreeSet<String>();  if (this.getExtraClasspath() != null && this.getExtraClasspath().length != 0) {    for (    String classpathElement : this.getExtraClasspath()) {      classpath.add(classpathElement);    }  }  if (this.getSharedClasspath() != null && this.getSharedClasspath().length != 0) {    for (    String classpathElement : this.getSharedClasspath()) {      classpath.add(classpathElement);    }  }  for (  String classpathElement : classpath) {    String moduleName=getFileHandler().getName(classpathElement);    moduleName=moduleName.substring(0,moduleName.lastIndexOf('.'));    moduleName=moduleName.replace('.','-');    String folder=this.getHome() + "/modules/org/codehaus/cargo/classpath/" + moduleName+ "/main";    getFileHandler().mkdirs(folder);    StringBuilder dependenciesXml=new StringBuilder();    for (    String dependency : dependencies) {      dependenciesXml.append("\n    <module name=\"" + dependency + "\"/>");    }    dependencies.add("org.codehaus.cargo.classpath." + moduleName);    FilterChain filterChain=new FilterChain();    getAntUtils().addTokenToFilterChain(filterChain,"moduleName",moduleName);    getAntUtils().addTokenToFilterChain(filterChain,"dependencies",dependenciesXml.toString());    getFileHandler().copyFile(classpathElement,getFileHandler().append(folder,moduleName + ".jar"));    getResourceUtils().copyResource(AbstractLocalConfiguration.RESOURCE_PATH + "jboss-module/jboss-module.xml",getFileHandler().append(folder,"module.xml"),getFileHandler(),filterChain,"UTF-8");  }}  }
class C{  public boolean isSetMsg(){  return this.msg != null;}  }
class C{  public JLabel createLabel(String text,int x,int y,int width,int fontSize,Color color){  JLabel label=new JLabel(text);  label.setForeground(color);  label.setBounds(x,y,width,20);  label.setFont(new Font("Arial",0,fontSize));  this.add(label);  return label;}  }
class C{  private boolean checkEndWindowFinalization(){  if ((currentPartIdleWindows == maxIdleWindows)) {    return true;  }  return false;}  }
class C{  private boolean isSameFile(File file1,File file2){  if (file1.equals(file2)) {    return true;  }  if (file1.getAbsoluteFile().equals(file2.getAbsoluteFile())) {    return true;  }  try {    if (file1.getCanonicalFile().equals(file2.getCanonicalFile())) {      return true;    }  } catch (  IOException ex) {    logger.info(LocalizedMessage.create(LocalizedStrings.AdminDistributedSystemImpl_WHILE_GETTING_CANONICAL_FILE),ex);  }  return false;}  }
class C{  public void updateDefaultPose(){  this.defaultRotationX=this.rotateAngleX;  this.defaultRotationY=this.rotateAngleY;  this.defaultRotationZ=this.rotateAngleZ;  this.defaultOffsetX=this.offsetX;  this.defaultOffsetY=this.offsetY;  this.defaultOffsetZ=this.offsetZ;  this.defaultPositionX=this.rotationPointX;  this.defaultPositionY=this.rotationPointY;  this.defaultPositionZ=this.rotationPointZ;}  }
class C{  public void reset(){  lastPts=Long.MIN_VALUE;}  }
class C{  @Override public void receive(DatagramPacket p) throws IOException {  socketDelegate.receive(p);}  }
class C{  @Override public String nativeSQL(String sql) throws SQLException {  try {    debugCodeCall("nativeSQL",sql);    checkClosed();    return translateSQL(sql);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static void initialize(MockitoFilter filter){  MockitoComponentFactory mockingComponentFactory=new MockitoComponentFactory(filter);  ComponentInstanceManager.setComponentFactory(mockingComponentFactory);}  }
class C{  private int[] createEmptySetOfIntegers(int max){  firstWordNotUsed=0;  int[] arr=new int[arrayIndex(max - 1) + 1];  return arr;}  }
class C{  public static boolean showConfirmationDialog(@NotNull final Project project,final String message,final String title,final Icon logo,final String okActionMessage,final String cancelActionMessage){  final int result=Messages.showYesNoDialog(project,message,title,okActionMessage,cancelActionMessage,logo);  return result == 0 ? true : false;}  }
class C{  private void addBackingDataSourceWithImplementationClass(String className){  startDataSourceTag();  setImplementationClassAndJndiContext(className,"Provided");  addVendorConnectionDataAndCloseTag();}  }
class C{  public Builder withElectionTimeout(Duration electionTimeout){  Assert.argNot(electionTimeout.isNegative() || electionTimeout.isZero(),"electionTimeout must be positive");  Assert.argNot(electionTimeout.toMillis() <= heartbeatInterval.toMillis(),"electionTimeout must be greater than heartbeatInterval");  this.electionTimeout=Assert.notNull(electionTimeout,"electionTimeout");  return this;}  }
class C{  public void resumeSnapshot(){  data.load(snapshot);  updateAll();}  }
class C{  public void subdivide(Segment s0,Segment s1){  Quadradic q0=null, q1=null;  if (s0 instanceof Quadradic)   q0=(Quadradic)s0;  if (s1 instanceof Quadradic)   q1=(Quadradic)s1;  subdivide(q0,q1);}  }
class C{  private void showPopupMenu(final MouseEvent event){  final IProjectTreeNode selectedNode=(IProjectTreeNode)TreeHelpers.getNodeAt(this,event.getX(),event.getY());  if (selectedNode == null) {    m_popup.show(this,event.getX(),event.getY());  } else {    setSelectionPath(new TreePath(((DefaultMutableTreeNode)selectedNode).getPath()));    final JPopupMenu menu=selectedNode.getPopupMenu();    if (menu != null) {      menu.show(this,event.getX(),event.getY());    }  }}  }
class C{  public Literal createLiteral(){  LiteralImpl literal=new LiteralImpl();  return literal;}  }
class C{  public boolean isNeighbor(DelaunayTriangle triangle){  int count=0;  for (  DelaunayVertex vertex : this) {    if (!triangle.contains(vertex)) {      count++;    }  }  return count == 1;}  }
class C{  public void endTag(String tag) throws IOException {  if (state == IN_TAG) {    out.write(">");    state=IN_BODY;    out.newLine();  }  out.write("</");  out.write(tag);  out.write(">");  state=IN_BODY;}  }
class C{  public SymbolTableEntryOriginal basicGetDelegationTarget(){  return delegationTarget;}  }
class C{  @Override public void openElement(int index){  stack.push(current);  ArrayList list=current.getChildren();  current=(XMLElement)list.get(index);}  }
class C{  public void removeKey(KeyCode keyCode){  keyStrokes.removeIf(null);}  }
class C{  public ReplyException(){}  }
class C{  public void clearData(){  points.clear();}  }
class C{  private static void usage(){  OUT.println("Syntax: EventFeedPartialDemo <username> <password>");  OUT.println("\nThe username and password are used for " + "authentication.  The sample application will retrieve list of" + "user's calendar events and provides option to change event response.");}  }
class C{  public boolean hasNextThrow() throws SQLException {  if (closed) {    return false;  }  if (alreadyMoved) {    return true;  }  boolean result;  if (first) {    first=false;    result=results.first();  } else {    result=results.next();  }  if (!result) {    close();  }  alreadyMoved=true;  return result;}  }
class C{  public short readLEShort() throws IOException {  int byte1=in.read();  int byte2=in.read();  if (byte2 == -1)   throw new EOFException();  return (short)((byte2 << 8) + byte1);}  }
class C{  public CraftingStack(Object output){  if (output != null) {    Object[] stuff=new Object[9];    this.output=APIUtils.convertToStack(output);    for (    Object thing : CraftingManager.getInstance().getRecipeList())     if (thing instanceof IRecipe) {      IRecipe recipe=(IRecipe)thing;      if (recipe.getRecipeOutput() != null && recipe.getRecipeOutput().isItemEqual(this.output)) {        if (recipe instanceof ShapedRecipes)         for (int i=0; i < recipe.getRecipeSize(); i++)         stuff[i]=((ShapedRecipes)recipe).recipeItems[i];        if (recipe instanceof ShapelessRecipes)         for (int i=0; i < recipe.getRecipeSize(); i++)         stuff[i]=((ShapelessRecipes)recipe).recipeItems.get(i);        if (recipe instanceof ShapedOreRecipe)         for (int i=0; i < recipe.getRecipeSize(); i++)         stuff[i]=((ShapedOreRecipe)recipe).getInput()[i];        if (recipe instanceof ShapelessOreRecipe)         for (int i=0; i < recipe.getRecipeSize(); i++)         stuff[i]=((ShapelessOreRecipe)recipe).getInput().get(i);        if (recipe.getRecipeSize() == 4) {          Object[] copy=stuff.clone();          stuff=new Object[9];          for (int i=0; i < 2; i++) {            stuff[i]=copy[i];            stuff[i + 3]=copy[i + 2];          }        }        this.output.stackSize=recipe.getRecipeOutput().stackSize;      }    }    for (int i=0; i < 9; i++)     recipe[i]=APIUtils.convertToStack(stuff[i]);  }  for (  ItemStack stack : recipe)   if (stack != null && stack.getItemDamage() == OreDictionary.WILDCARD_VALUE)   stack.setItemDamage(0);}  }
class C{  @VisibleForTesting protected String createDCATDistributionInformation(Resource resource){  Preconditions.checkNotNull(resource.getEml());  Preconditions.checkNotNull(resource.getEml().parseLicenseUrl());  StringBuilder distributionBuilder=new StringBuilder();  String url=cfg.getResourceArchiveUrl(resource.getShortname());  distributionBuilder.append(encapsulateObject(url,ObjectTypes.RESOURCE));  distributionBuilder.append("\n");  distributionBuilder.append("a dcat:Distribution");  addPredicateToBuilder(distributionBuilder,"dct:description");  addObjectToBuilder(distributionBuilder,"Darwin Core Archive",ObjectTypes.LITERAL);  addPredicateToBuilder(distributionBuilder,"dct:license");  addObjectToBuilder(distributionBuilder,resource.getEml().parseLicenseUrl(),ObjectTypes.RESOURCE);  addPredicateToBuilder(distributionBuilder,"dct:format");  addObjectToBuilder(distributionBuilder,"dwc-a",ObjectTypes.LITERAL);  addPredicateToBuilder(distributionBuilder,"dcat:mediaType");  addObjectToBuilder(distributionBuilder,"application/zip",ObjectTypes.LITERAL);  addPredicateToBuilder(distributionBuilder,"dcat:downloadURL");  addObjectToBuilder(distributionBuilder,cfg.getResourceArchiveUrl(resource.getShortname()),ObjectTypes.RESOURCE);  addPredicateToBuilder(distributionBuilder,"dcat:accessURL");  String accessURLClass=encapsulateObject(cfg.getResourceUrl(resource.getShortname()),ObjectTypes.RESOURCE) + " a rdfs:Resource .";  addObjectToBuilder(distributionBuilder,cfg.getResourceUrl(resource.getShortname()),ObjectTypes.RESOURCE);  distributionBuilder.append(" .\n");  distributionBuilder.append(accessURLClass);  distributionBuilder.append("\n");  return distributionBuilder.toString();}  }
class C{  static public void assertEquals(String message,byte expected,byte actual){  assertEquals(message,Byte.valueOf(expected),Byte.valueOf(actual));}  }
class C{  public void replaceAndWait(final Component current,final Component next,final Transition t,int layoutAnimationSpeed){  enableLayoutOnPaint=false;  replaceComponents(current,next,t,true,false,null,0,layoutAnimationSpeed,true);  if (layoutAnimationSpeed > 0) {    animateLayoutAndWait(layoutAnimationSpeed);  }  dontRecurseContainer=false;  enableLayoutOnPaint=true;}  }
class C{  @Override public boolean supports(MethodParameter returnType,Class<? extends HttpMessageConverter<?>> converterType){  return converterType.equals(MappingJackson2HttpMessageConverter.class) || converterType.equals(StringHttpMessageConverter.class);}  }
class C{  public static void postBoot(){  CompilerAdviceAttribute.postBoot();}  }
class C{  public boolean equals(String str){  if (str == null)   return false;  if (_length != str.length())   return false;  for (int i=_length, j=_offset + _length; --i >= 0; ) {    if (_array[--j] != str.charAt(i))     return false;  }  return true;}  }
class C{  public ViewRefResolver(ViewResolver<? super T> resolver,Class<T> type,int priority){  Objects.requireNonNull(resolver);  Objects.requireNonNull(type);  _resolver=resolver;  _type=type;  _priority=priority;}  }
class C{  synchronized void insureNodesParsed(){  if (paramsNode != null)   return;  Object firstNode=jjtGetChild(0);  firstThrowsClause=1;  if (firstNode instanceof BSHReturnType) {    returnTypeNode=(BSHReturnType)firstNode;    paramsNode=(BSHFormalParameters)jjtGetChild(1);    if (jjtGetNumChildren() > 2 + numThrows)     blockNode=(BSHBlock)jjtGetChild(2 + numThrows);    ++firstThrowsClause;  } else {    paramsNode=(BSHFormalParameters)jjtGetChild(0);    blockNode=(BSHBlock)jjtGetChild(1 + numThrows);  }}  }
class C{  public void unassignFromShop(final long categoryId,final long shopId){  ((ShopCategoryService)shopCategoryGenericService).unassignFromShop(categoryId,shopId);}  }
class C{  protected final JsonToken parseNumberText(int ch) throws IOException, JsonParseException {  boolean negative=(ch == INT_MINUS);  int ptr=_inputPtr;  int startPtr=ptr - 1;  final int inputLen=_inputEnd;  dummy_loop:   do {    if (negative) {      if (ptr >= _inputEnd) {        break dummy_loop;      }      ch=_inputBuffer[ptr++];      if (ch > INT_9 || ch < INT_0) {        _inputPtr=ptr;        return _handleInvalidNumberStart(ch,true);      }    }    if (ch == INT_0) {      break dummy_loop;    }    int intLen=1;    int_loop:     while (true) {      if (ptr >= _inputEnd) {        break dummy_loop;      }      ch=(int)_inputBuffer[ptr++];      if (ch < INT_0 || ch > INT_9) {        break int_loop;      }      ++intLen;    }    int fractLen=0;    if (ch == INT_DECIMAL_POINT) {      fract_loop:       while (true) {        if (ptr >= inputLen) {          break dummy_loop;        }        ch=(int)_inputBuffer[ptr++];        if (ch < INT_0 || ch > INT_9) {          break fract_loop;        }        ++fractLen;      }      if (fractLen == 0) {        reportUnexpectedNumberChar(ch,"Decimal point not followed by a digit");      }    }    int expLen=0;    if (ch == INT_e || ch == INT_E) {      if (ptr >= inputLen) {        break dummy_loop;      }      ch=(int)_inputBuffer[ptr++];      if (ch == INT_MINUS || ch == INT_PLUS) {        if (ptr >= inputLen) {          break dummy_loop;        }        ch=(int)_inputBuffer[ptr++];      }      while (ch <= INT_9 && ch >= INT_0) {        ++expLen;        if (ptr >= inputLen) {          break dummy_loop;        }        ch=(int)_inputBuffer[ptr++];      }      if (expLen == 0) {        reportUnexpectedNumberChar(ch,"Exponent indicator not followed by a digit");      }    }    --ptr;    _inputPtr=ptr;    int len=ptr - startPtr;    _textBuffer.resetWithShared(_inputBuffer,startPtr,len);    return reset(negative,intLen,fractLen,expLen);  } while (false);  _inputPtr=negative ? (startPtr + 1) : startPtr;  return parseNumberText2(negative);}  }
class C{  public boolean isCellEditable(int rowIndex,int columnIndex){switch (columnIndex) {case 0:case 1:case 2:case 3:    return true;default :  assert false : "unexpected value of columnIndex=" + columnIndex;return false;}}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws SAXException {  String msg="";  super.startElement(handler,uri,localName,rawName,attributes);  ElemTemplateElement ancestor=handler.getElemTemplateElement().getParentElem();  while (ancestor != null && !(ancestor instanceof ElemExsltFunction)) {    if (ancestor instanceof ElemVariable || ancestor instanceof ElemParam || ancestor instanceof ElemExsltFuncResult) {      msg="func:result cannot appear within a variable, parameter, or another func:result.";      handler.error(msg,new SAXException(msg));    }    ancestor=ancestor.getParentElem();  }  if (ancestor == null) {    msg="func:result must appear in a func:function element";    handler.error(msg,new SAXException(msg));  }}  }
class C{  private String readSentenceHeader(int aField,boolean aPeek) throws IOException {  if (aPeek) {    br.mark(16000);  }  String line=br.readLine();  while (line != null) {    if (!line.startsWith("%%")) {      String[] parts=line.split("\\s+");      if (aPeek) {        br.reset();      }      return parts[aField];    }    line=br.readLine();  }  return null;}  }
class C{  public void focusGained(FocusEvent e){  if (focusLog.isLoggable(PlatformLogger.Level.FINE)) {    focusLog.fine("{0}",e);  }  bHasFocus=true;}  }
class C{  public CDeleteBookmarkAction(final BackEndDebuggerProvider provider,final int[] rows){  super(rows.length == 1 ? "Delete Bookmark" : "Delete Bookmarks");  m_actionProvider=Preconditions.checkNotNull(provider,"IE01328: Provider argument can not be null");  m_rows=rows.clone();}  }
class C{  public void enable() throws IOException {synchronized (optOutLock) {    if (isOptOut()) {      configuration.set("opt-out",false);      configuration.save(configurationFile);    }    if (task == null) {      start();    }  }}  }
class C{  public FBSavepoint(String name){  this.name=name;  serverId=getSavepointServerId(name);}  }
class C{  public RegionIterator(Iterator<Annotation> parentIterator,AnnotationModel model,int offset,int length,boolean canStartBefore,boolean canEndAfter){  this.parentIterator=parentIterator;  this.model=model;  this.region=new Position(offset,length);  this.canEndAfter=canEndAfter;  this.canStartBefore=canStartBefore;  next=findNext();}  }
class C{  @BeforeClass public static void beforeClass() throws Exception {  assumeTrue(CanConnect.to(new InetSocketAddress(RABBITMQ_HOST,RABBITMQ_HTTP_MANAGEMENT_PORT)));  VaultRule vaultRule=new VaultRule();  vaultRule.before();  assumeTrue(vaultRule.prepare().getVersion().isGreaterThanOrEqualTo(Version.parse("0.6.2")));  if (!vaultRule.prepare().hasSecretBackend("rabbitmq")) {    vaultRule.prepare().mountSecret("rabbitmq");  }  VaultOperations vaultOperations=vaultRule.prepare().getVaultOperations();  Map<String,String> connection=new HashMap<>();  connection.put("connection_uri",RABBITMQ_URI);  connection.put("username",RABBITMQ_USERNAME);  connection.put("password",RABBITMQ_PASSWORD);  vaultOperations.write(String.format("rabbitmq/config/connection"),connection);  vaultOperations.write(String.format("rabbitmq/roles/readonly"),Collections.singletonMap("vhosts",VHOSTS_ROLE));}  }
class C{  private static byte[] concatBytes(byte[] array1,byte[] array2){  byte[] cBytes=new byte[array1.length + array2.length];  try {    System.arraycopy(array1,0,cBytes,0,array1.length);    System.arraycopy(array2,0,cBytes,array1.length,array2.length);  } catch (  Exception e) {    throw new RuntimeException(e);  }  return cBytes;}  }
class C{  public static <T>T loadSpringBean(InputStream springXmlStream,String beanName) throws IgniteException {  try {    return IgnitionEx.loadSpringBean(springXmlStream,beanName);  } catch (  IgniteCheckedException e) {    throw U.convertException(e);  }}  }
class C{  @Override public void toXML(final StringBuilder builder,final ConfigVerification errors){  boolean verifyDiff=controller.isDiffVerificationEnabled();  boolean verifyEncoding=controller.isEncodingVerificationEnabled();  boolean statsOutput=controller.isStatsOutputEnabled();  boolean debugOutput=controller.isDebugOutputEnabled();  if (verifyDiff || verifyEncoding || statsOutput|| debugOutput) {    builder.append("\t<debug>\r\n");    if (verifyDiff) {      builder.append("\t\t<verification_diff>" + verifyDiff + "</verification_diff>\r\n");    }    if (verifyEncoding) {      builder.append("\t\t<verification_encoding>" + verifyEncoding + "</verification_encoding>\r\n");    }    if (statsOutput) {      builder.append("\t\t<statistical_output>" + statsOutput + "</statistical_output>\r\n");    }    builder.append("\t\t<debug_output>\r\n");    builder.append("\t\t\t<enabled>" + debugOutput + "</enabled>\r\n");    if (debugOutput) {      String path=debugOutputField.getText();      if (path.length() == 0) {        errors.add(new ConfigItem(ConfigItemTypes.WARNING,ConfigErrorKeys.PATH_NOT_SET,"The folder of the debug output is not specified."));      }      if (!path.endsWith(File.separator) && path.contains(File.separator)) {        path+=File.separator;      }      builder.append("\t\t\t<path>\"" + path + "\"</path>\r\n");    }    builder.append("\t\t</debug_output>\r\n");    builder.append("\t</debug>\r\n");  }}  }
class C{  public String pay(double amount,String currency){  throw new RuntimeException("Unsupported");}  }
class C{  private void storeErrorAndDeltas(Neuron neuron,double error){  double errorSignal=0;  if (neuron.getUpdateRule() instanceof DifferentiableUpdateRule) {    double derivative=((DifferentiableUpdateRule)neuron.getUpdateRule()).getDerivative(neuron.getWeightedInputs());    errorSignal=error * derivative;    errorMap.put(neuron,errorSignal);  }  for (  Synapse synapse : neuron.getFanIn()) {    double lastWeightDelta=0;    if (weightDeltaMap.get(synapse) != null) {      lastWeightDelta=weightDeltaMap.get(synapse);    }    double weightDelta=learningRate * errorSignal * synapse.getSource().getActivation() + momentum * lastWeightDelta;    weightDeltaMap.put(synapse,weightDelta);  }  if (neuron.getUpdateRule() instanceof BiasedUpdateRule) {    biasDeltaMap.put(neuron,learningRate * errorSignal);  }}  }
class C{  public static StringBuffer hex(int ch,int width,StringBuffer output){  return appendNumber(output,ch,16,width);}  }
class C{  public ArrayColormap(){  this.map=new int[256];}  }
class C{  public void testAffinity() throws Exception {  final int blockSize=10;  final int grpSize=blockSize * DATA_BLOCK_GROUP_CNT;  long t=System.currentTimeMillis();  IgfsEntryInfo info=IgfsUtils.createFile(IgniteUuid.randomUuid(),blockSize,1024 * 1024,null,null,false,null,t,t);  for (int pos=0; pos < 5 * grpSize; pos++) {    assertEquals("Expects no affinity for zero length.",Collections.<IgfsBlockLocation>emptyList(),mgr.affinity(info,pos,0));    for (int len=1, maxLen=grpSize - pos % grpSize; len < maxLen; len++) {      Collection<IgfsBlockLocation> aff=mgr.affinity(info,pos,len);      assertEquals("Unexpected affinity: " + aff,1,aff.size());      IgfsBlockLocation loc=F.first(aff);      assertEquals("Unexpected block location: " + loc,pos,loc.start());      assertEquals("Unexpected block location: " + loc,len,loc.length());    }    for (int len=grpSize * 4 + 1, maxLen=5 * grpSize - pos % grpSize; len < maxLen; len++) {      Collection<IgfsBlockLocation> aff=mgr.affinity(info,pos,len);      assertTrue("Unexpected affinity [aff=" + aff + ", pos="+ pos+ ", len="+ len+ ']',aff.size() <= 5);      IgfsBlockLocation first=F.first(aff);      assertEquals("Unexpected the first block location [aff=" + aff + ", pos="+ pos+ ", len="+ len+ ']',pos,first.start());      assertTrue("Unexpected the first block location [aff=" + aff + ", pos="+ pos+ ", len="+ len+ ']',first.length() >= grpSize - pos % grpSize);      IgfsBlockLocation last=F.last(aff);      assertTrue("Unexpected the last block location [aff=" + aff + ", pos="+ pos+ ", len="+ len+ ']',last.start() <= (pos / grpSize + 4) * grpSize);      assertTrue("Unexpected the last block location [aff=" + aff + ", pos="+ pos+ ", len="+ len+ ']',last.length() >= (pos + len - 1) % grpSize + 1);    }  }}  }
class C{  public void testSerializer(){  Serializer serializer=new Serializer();  GenericKryoSerializer kryoSerializer=new GenericKryoSerializer();  Foo foo=new Foo(1234);  HeapBuffer buffer=HeapBuffer.allocate();  kryoSerializer.write(foo,buffer,serializer);  Foo result=(Foo)kryoSerializer.read(Foo.class,buffer.flip(),serializer);  assertEquals(result.bar,1234);}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public TransitionDrawable(Drawable[] layers){  super(layers);}  }
class C{  public void addPoint(int x,int y){  if (npoints >= xpoints.length || npoints >= ypoints.length) {    int newLength=npoints * 2;    if (newLength < MIN_LENGTH) {      newLength=MIN_LENGTH;    } else     if ((newLength & (newLength - 1)) != 0) {      newLength=Integer.highestOneBit(newLength);    }    xpoints=Arrays.copyOf(xpoints,newLength);    ypoints=Arrays.copyOf(ypoints,newLength);  }  xpoints[npoints]=x;  ypoints[npoints]=y;  npoints++;  if (bounds != null) {    updateBounds(x,y);  }}  }
class C{  public URL(String protocol,String host,int port,String file,URLStreamHandler handler) throws MalformedURLException {  if (port < -1) {    throw new MalformedURLException("port < -1: " + port);  }  if (protocol == null) {    throw new NullPointerException("protocol == null");  }  if (host != null && host.contains(":") && host.charAt(0) != '[') {    host="[" + host + "]";  }  this.protocol=protocol;  this.host=host;  this.port=port;  file=UrlUtils.authoritySafePath(host,file);  int hash=file.indexOf("#");  if (hash != -1) {    this.file=file.substring(0,hash);    this.ref=file.substring(hash + 1);  } else {    this.file=file;  }  fixURL(false);  if (handler == null) {    setupStreamHandler();    if (streamHandler == null) {      throw new MalformedURLException("Unknown protocol: " + protocol);    }  } else {    streamHandler=handler;  }}  }
class C{  public LegHistogram(final int binSize,Id<Population> popId,Population population){  this(binSize,30 * 3600 / binSize + 1,popId,population);}  }
class C{  public void add(Token token,List<String> suggestions){  LinkedHashMap<String,Integer> map=this.suggestions.get(token);  if (map == null) {    map=new LinkedHashMap<>();    this.suggestions.put(token,map);  }  for (  String suggestion : suggestions) {    map.put(suggestion,NO_FREQUENCY_INFO);  }}  }
class C{  public static void testCursorContainsNumbers(Cursor cursor,int columnIndex,int... numbers){  HashMap<Integer,Boolean> idsFound=new HashMap<>();  for (  int number : numbers) {    idsFound.put(number,false);  }  assertTrue(cursor.moveToFirst());  do {    idsFound.put(cursor.getInt(columnIndex),true);  } while (cursor.moveToNext());  for (  Map.Entry<Integer,Boolean> entry : idsFound.entrySet()) {    int key=entry.getKey();    assertTrue("Id " + key + " not found",entry.getValue());  }}  }
class C{  public static int compileShader(@ShaderType final int shaderType,final String shaderSource){  int shaderHandle=GLES20.glCreateShader(shaderType);  if (shaderHandle != 0) {    GLES20.glShaderSource(shaderHandle,shaderSource);    GLES20.glCompileShader(shaderHandle);    final int[] compilationStatus=new int[1];    GLES20.glGetShaderiv(shaderHandle,GLES20.GL_COMPILE_STATUS,compilationStatus,0);    if (compilationStatus[0] == 0) {      Timber.e("Error compiling shader %s",GLES20.glGetShaderInfoLog(shaderHandle));      GLES20.glDeleteShader(shaderHandle);      shaderHandle=0;    }  }  if (shaderHandle == 0) {    throw new RuntimeException("Error creating shader.");  }  return shaderHandle;}  }
class C{  protected void resetPrintVerboseSettings(){  this.currentPrintInvisibleSetting=defaultInvisiblesSetting;  this.currentPrintVerboseGenerics=defaultPrintVerboseGenerics;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void open(InputStream in) throws IOException {  table.open(in);}  }
class C{  public static boolean compare(Class<?>[] primary,Class<?>[] secondary){  if (primary == null || secondary == null || primary.length != secondary.length) {    return false;  }  for (int index=0; index < primary.length; index++) {    Class<?> primaryClass=primary[index];    Class<?> secondaryClass=secondary[index];    if (primaryClass.equals(secondaryClass) || primaryClass.isAssignableFrom(secondaryClass)) {      continue;    }    return false;  }  return true;}  }
class C{  @Override public void relocate(){  int w=360, h=165;  int x=(this.getWidth() - w) / 2, y=(this.getHeight() - h) / 2;  verifyDiffCheckBox.setLocation(x,y);  verifyEncodingCheckBox.setLocation(x,y + 30);  statsOutputCheckBox.setLocation(x,y + 70);  debugOuputCheckBox.setLocation(x,y + 110);  debugOutputLabel.setLocation(x,y + 140);  debugOutputField.setLocation(x + 110,y + 140);}  }
class C{  public Manifest(InputStream is,boolean compute) throws IOException {  if (!is.markSupported()) {    is=new BufferedInputStream(is);  }  while (true) {    is.mark(1);    if (is.read() == -1) {      break;    }    is.reset();    MessageHeader m=new MessageHeader(is);    if (compute) {      doHashes(m);    }    addEntry(m);  }}  }
class C{  public void clear(){  queue.clear();}  }
class C{  @SuppressWarnings("rawtypes") public PvLimits(Comparable minVal,Comparable maxVal){  minValue=minVal;  maxValue=maxVal;}  }
class C{  public String buildUnionSubQuery(String typeDiscriminatorColumn,String[] unionColumns,Set<String> columnsPresentInTable,int computedColumnsOffset,String typeDiscriminatorValue,String selection,String groupBy,String having){  int unionColumnsCount=unionColumns.length;  String[] projectionIn=new String[unionColumnsCount];  for (int i=0; i < unionColumnsCount; i++) {    String unionColumn=unionColumns[i];    if (unionColumn.equals(typeDiscriminatorColumn)) {      projectionIn[i]="'" + typeDiscriminatorValue + "' AS "+ typeDiscriminatorColumn;    } else     if (i <= computedColumnsOffset || columnsPresentInTable.contains(unionColumn)) {      projectionIn[i]=unionColumn;    } else {      projectionIn[i]="NULL AS " + unionColumn;    }  }  return buildQuery(projectionIn,selection,groupBy,having,null,null);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String expr=getString(stack);  return Catbert.evaluateExpression(expr,new Catbert.Context(stack.getUIMgr()),null,null);}  }
class C{  private void validateFixedPartitionAttributesAgainstRedundantCopies(){  for (  FixedPartitionAttributesImpl fpa : this.pr.getFixedPartitionAttributesImpl()) {    List<FixedPartitionAttributesImpl> allSameFPAs=this.pr.getRegionAdvisor().adviseSameFPAs(fpa);    allSameFPAs.add(fpa);    if (!allSameFPAs.isEmpty()) {      int numSecondaries=0;      for (      FixedPartitionAttributes otherfpa : allSameFPAs) {        if (fpa.getNumBuckets() != otherfpa.getNumBuckets()) {          Object[] prms=new Object[]{this.pr.getName(),fpa.getPartitionName(),fpa.getNumBuckets(),otherfpa.getNumBuckets()};          throw new IllegalStateException(LocalizedStrings.PartitionedRegionConfigValidator_FOR_REGION_0_FOR_PARTITION_1_NUM_BUCKETS_ARE_NOT_SAME_ACROSS_NODES.toString(prms));        }        if (!otherfpa.isPrimary()) {          if (++numSecondaries > (this.pr.getRedundantCopies())) {            Object[] prms=new Object[]{this.pr.getName(),numSecondaries,fpa.getPartitionName(),this.pr.getRedundantCopies()};            throw new IllegalStateException(LocalizedStrings.PartitionedRegionConfigValidator_FOR_REGION_0_NUMBER_OF_SECONDARY_PARTITIONS_1_OF_A_PARTITION_2_SHOULD_NEVER_EXCEED_NUMBER_OF_REDUNDANT_COPIES_3.toString(prms));          }        }      }    }  }}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  void encodeDone(int[] palette) throws IOException {  int transparentIndex=-1;  int transparentRgb=-1;  colorHash=new Acme.IntHashtable();  int index=0;  for (int row=0; row < height; ++row) {    for (int col=0; col < width; ++col) {      int rgb;      if (palette != null) {        rgb=palette[rgbPixels[row][col]];      } else {        rgb=rgbPixels[row][col];      }      boolean isTransparent=((rgb >>> 24) < 0x80);      if (isTransparent) {        if (transparentIndex < 0) {          transparentIndex=index;          transparentRgb=rgb;        } else         if (rgb != transparentRgb) {          rgbPixels[row][col]=rgb=transparentRgb;        }      }      GifEncoderHashitem item=(GifEncoderHashitem)colorHash.get(rgb);      if (item == null) {        if (index >= 256) {          encodeDone(doppelt.Quantize.quantizeImage(rgbPixels,255));          return;        }        item=new GifEncoderHashitem(rgb,1,index,isTransparent);        ++index;        colorHash.put(rgb,item);      } else {        ++item.count;      }      rgbPixels[row][col]=rgb;    }  }  int logColors;  if (index <= 2)   logColors=1; else   if (index <= 4)   logColors=2; else   if (index <= 16)   logColors=4; else   logColors=8;  int mapSize=1 << logColors;  byte[] reds=new byte[mapSize];  byte[] grns=new byte[mapSize];  byte[] blus=new byte[mapSize];  for (Enumeration e=colorHash.elements(); e.hasMoreElements(); ) {    GifEncoderHashitem item=(GifEncoderHashitem)e.nextElement();    reds[item.index]=(byte)((item.rgb >> 16) & 0xff);    grns[item.index]=(byte)((item.rgb >> 8) & 0xff);    blus[item.index]=(byte)(item.rgb & 0xff);  }  GIFEncode(out,width,height,interlace,(byte)0,transparentIndex,logColors,reds,grns,blus);}  }
class C{  public int hashCode(){  return name.hashCode();}  }
class C{  public static Agg combinerFor(Agg agg){switch (agg) {case MIN:    return Agg.MIN;case MAX:  return Agg.MAX;default :return Agg.SUM;}}  }
class C{  public JSONArray put(Collection value){  this.put(new JSONArray(value));  return this;}  }
class C{  public List<A> append(A x){  return of(x).prependList(this);}  }
class C{  public <T extends Entry>T insert(T newEntry) throws ServiceException, IOException {  if (feedState.service == null) {    throw new ServiceException(CoreErrorDomain.ERR.entryNotAssociated);  }  Link postLink=getEntryPostLink();  if (postLink == null) {    throw new UnsupportedOperationException("Media cannot be inserted");  }  URL postUrl=postLink.getHrefUri().toURL();  return feedState.service.insert(postUrl,newEntry);}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  if (VolleyLog.DEBUG) {    VolleyLog.v("Pruning old cache entries.");  }  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  if (VolleyLog.DEBUG) {    VolleyLog.v("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime);  }}  }
class C{  public ShiftOperator createShiftOperatorFromString(EDataType eDataType,String initialValue){  ShiftOperator result=ShiftOperator.get(initialValue);  if (result == null)   throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '"+ eDataType.getName()+ "'");  return result;}  }
class C{  public CF7(){  this(10);}  }
class C{  public static boolean containsSmtpSettings(Map<String,String> properties){  for (  String key : properties.keySet()) {    if (key.startsWith(SMTP_PROPERTY_PREFIX)) {      return true;    }  }  return false;}  }
class C{  public boolean hasBiomeData(){  return biomeData != null && groundUp;}  }
class C{  @Override public void close() throws IOException {  SocketChannel s=_channel;  _channel=null;  SSLSocket sslSocket=_sslSocket;  _sslSocket=null;  if (sslSocket != null) {    try {      sslSocket.close();    } catch (    Exception e) {    }  }  if (s != null) {    try {      s.close();    } catch (    Exception e) {    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document newDoc;  DocumentType docType=null;  DOMImplementation domImpl;  NodeList childList;  String nullNS=null;  doc=(Document)load("staffNS",false);  domImpl=doc.getImplementation();  newDoc=domImpl.createDocument(nullNS,"root",docType);  childList=newDoc.getElementsByTagNameNS("*","*");  assertSize("documentgetelementsbytagnameNS01",1,childList);}  }
class C{  private void updateFilter(){  String game=null;  boolean favorites=filterFavorites.isSelected();  if (filterCurrentGame.isSelected()) {    game=currentGame;  }  table.filter(game,favorites);}  }
class C{  @RequestMapping(value="/account/change_password",method=RequestMethod.POST,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<?> changePassword(@RequestBody PasswordChangeDTO passwordChange){  if (StringUtils.isEmpty(passwordChange.getNewPassword()) || StringUtils.isEmpty(passwordChange.getOldPassword())) {    return new ResponseEntity<>(HttpStatus.FORBIDDEN);  }  if (userService.checkPassword(passwordChange.getOldPassword())) {    userService.changePassword(passwordChange.getNewPassword());    return new ResponseEntity<>(HttpStatus.OK);  } else {    return new ResponseEntity<>(HttpStatus.FORBIDDEN);  }}  }
class C{  @org.hamcrest.Factory public static <T>org.hamcrest.Matcher<Double> equalTo(final Double value,final int numPlaces){  return new IsRoundedEqual(value,numPlaces);}  }
class C{  private void findToken(String query,boolean ignoreCase) throws IOException {  String token;  boolean found=false;  do {    token=readToken();    if ((ignoreCase && token.equalsIgnoreCase(query)) || token.equals(query)) {      found=true;    }  } while (!found);}  }
class C{  @Override public String toString(){  return toString;}  }
class C{  public int hashCode(){  int hashCode=0;  for (int i=0; i < repn.length; i++)   hashCode=31 * hashCode + repn[i];  return hashCode ^ length;}  }
class C{  public void postRemote(Object event){  sendEventOverGooglePlayServices(event,false);}  }
class C{  protected String readReference() throws IOException {  Reader r=new BufferedReader(new FileReader(m_RefFile));  StringBuffer ref=new StringBuffer();  char[] buf=new char[5];  for (int read=r.read(buf); read > 0; read=r.read(buf)) {    ref.append(new String(buf,0,read));  }  r.close();  return ref.toString();}  }
class C{  private String inverseRename(String renamedFilename,Map<String,String> renamedToReferenceMap){  List<String> renamedAllParts=FILE_SEP_SPLITTER.splitToList(renamedFilename);  for (int i=renamedAllParts.size(); i > 0; i--) {    String renamedParts=FILE_SEP_JOINER.join(renamedAllParts.subList(0,i));    String partsToSubstitute=renamedToReferenceMap.get(renamedParts);    if (partsToSubstitute != null) {      return renamedFilename.replace(renamedParts,partsToSubstitute);    }  }  return renamedFilename;}  }
class C{  public static HashMap<String,String[]> readFDs(String filename) throws FileNotFoundException {  HashMap<String,String[]> FDs=new HashMap<String,String[]>();  System.out.println("\nReading FDs: " + filename + "...\n");  Scanner in=new Scanner(new FileReader(filename));  while (in.hasNextLine()) {    String line=in.nextLine();    if (line.contains(",")) {      String[] fd=line.split("->");      String key=fd[0];      String[] rhs=fd[1].split(",");      FDs.put(key,rhs);    } else     if (!line.substring(line.indexOf('>') + 1,line.length()).contains(",")) {      String key=line.substring(0,line.indexOf('-'));      String[] rhs={line.substring(line.indexOf('>') + 1,line.length())};      FDs.put(key,rhs);    } else {      System.out.println("invalid FD syntax: " + line);      continue;    }  }  return FDs;}  }
class C{  public DebugScope scope(CharSequence name,DebugConfig sandboxConfig,Object... newContextObjects){  DebugScope newScope=null;  if (sandboxConfig != null) {    newScope=new DebugScope(name.toString(),this,uniqueScopeId.incrementAndGet(),null,true,newContextObjects);    configTL.set(sandboxConfig);  } else {    newScope=this.createChild(name.toString(),this.extraInfo,newContextObjects);  }  instanceTL.set(newScope);  newScope.updateFlags();  return newScope;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(nodeappendchildnodeancestor.class,args);}  }
class C{  private static boolean isDefaultPartition(IDocument document,int position,String partitioning){  Assert.isTrue(position >= 0);  Assert.isTrue(position <= document.getLength());  try {    ITypedRegion region=TextUtilities.getPartition(document,partitioning,position,false);    return region.getType().equals(IDocument.DEFAULT_CONTENT_TYPE);  } catch (  BadLocationException e) {  }  return false;}  }
class C{  public boolean tryToExpand(double splitConfidence,double tieThreshold){  boolean shouldSplit=this.learningNode.tryToExpand(splitConfidence,tieThreshold);  return shouldSplit;}  }
class C{  public void addRowIdName(String name) throws CsvException {  if (rowCount > 0) {    throw new CsvException("Attempt to add row ID after writing one or more rows");  } else   if (rowId != null) {    throw new CsvException("Attempt to add row ID twice");  }  this.rowId=name;  addColumnName(rowId);}  }
class C{  protected void initializeInternal() throws SailException {  logger.debug("Initializing MemoryStore...");  this.store=new MemorySailStore(debugEnabled());  if (persist) {    File dataDir=getDataDir();    DirectoryLockManager locker=new DirectoryLockManager(dataDir);    dataFile=new File(dataDir,DATA_FILE_NAME);    syncFile=new File(dataDir,SYNC_FILE_NAME);    if (dataFile.exists()) {      logger.debug("Reading data from {}...",dataFile);      if (!dataFile.canRead()) {        logger.error("Data file is not readable: {}",dataFile);        throw new SailException("Can't read data file: " + dataFile);      }      dirLock=locker.tryLock();      if (dirLock == null) {        logger.warn("Failed to lock directory: {}",dataDir);      }      if (dataFile.length() == 0L) {        logger.warn("Ignoring empty data file: {}",dataFile);      } else {        SailSink explicit=store.getExplicitSailSource().sink(IsolationLevels.NONE);        SailSink inferred=store.getInferredSailSource().sink(IsolationLevels.NONE);        try {          new FileIO(store.getValueFactory()).read(dataFile,explicit,inferred);          logger.debug("Data file read successfully");        } catch (        IOException e) {          logger.error("Failed to read data file",e);          throw new SailException(e);        } finally {          explicit.prepare();          explicit.flush();          explicit.close();          inferred.prepare();          inferred.flush();          inferred.close();        }      }    } else {      try {        File dir=dataFile.getParentFile();        if (dir != null && !dir.exists()) {          logger.debug("Creating directory for data file...");          if (!dir.mkdirs()) {            logger.debug("Failed to create directory for data file: {}",dir);            throw new SailException("Failed to create directory for data file: " + dir);          }        }        dirLock=locker.lockOrFail();        logger.debug("Initializing data file...");        SailDataset explicit=store.getExplicitSailSource().dataset(IsolationLevels.SNAPSHOT);        SailDataset inferred=store.getInferredSailSource().dataset(IsolationLevels.SNAPSHOT);        try {          new FileIO(store.getValueFactory()).write(explicit,inferred,syncFile,dataFile);        }  finally {          explicit.close();          inferred.close();        }        logger.debug("Data file initialized");      } catch (      IOException e) {        logger.debug("Failed to initialize data file",e);        throw new SailException("Failed to initialize data file " + dataFile,e);      }catch (      SailException e) {        logger.debug("Failed to initialize data file",e);        throw new SailException("Failed to initialize data file " + dataFile,e);      }    }  }  contentsChanged=false;  logger.debug("MemoryStore initialized");}  }
class C{  private static int fromHex(char ch){  if (ch > 'f' || ch < '0') {    return -1;  }  if (ch <= '9') {    return ch - '0';  }  if (ch >= 'a') {    return ch - ('a' - 10);  }  if (ch <= 'F' && ch >= 'A') {    return ch - ('A' - 10);  }  return -1;}  }
class C{  public void addDataPoint(Vec numerical,double val){  addDataPoint(numerical,emptyInt,val);}  }
class C{  public void add(final FieldDescriptor type,final Message defaultInstance){  if (type.getJavaType() != FieldDescriptor.JavaType.MESSAGE) {    throw new IllegalArgumentException("ExtensionRegistry.add() provided a default instance for a " + "non-message extension.");  }  add(new ExtensionInfo(type,defaultInstance));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected Object invokeCallback(Object[] params,String exceptionNotice){  try {    if (sDebug) {      System.out.print("[ invokeCallback() ]: holder = " + mHolder);      System.out.println(" ,params = " + Arrays.toString(params));    }    return mMethod.invoke(mHolder,params);  } catch (  Exception e) {    if (exceptionNotice == null)     throw new DataBindException(e); else {      throw new DataBindException(exceptionNotice,e);    }  } finally {    afterCallback();  }}  }
class C{  private void moveSigner(){  if (!hasSignerAtNewLocation()) {    copySignerToNewLocation();  }  deleteSignerFromOldLocation();}  }
class C{  static Set<String> readValueAsSet(Map m,String key){  Set<String> result=new HashSet<>();  Object val=m.get(key);  if (val == null) {    if ("collection".equals(key)) {      return m.containsKey(key) ? singleton(null) : singleton("*");    }    return null;  }  if (val instanceof Collection) {    Collection list=(Collection)val;    for (    Object o : list)     result.add(String.valueOf(o));  } else   if (val instanceof String) {    result.add((String)val);  } else {    throw new RuntimeException("Bad value for : " + key);  }  return result.isEmpty() ? null : Collections.unmodifiableSet(result);}  }
class C{  @Override public void visit(NodeVisitor v){  if (v.visit(this)) {    condition.visit(v);    body.visit(v);  }}  }
class C{  static boolean packageHasActivities(Context context,String packageName,UserHandleCompat user){  final LauncherAppsCompat launcherApps=LauncherAppsCompat.getInstance(context);  return launcherApps.getActivityList(packageName,user).size() > 0;}  }
class C{  static void testCopyFileToOuputStream() throws IOException {  testCopyFileToOuputStream(0);  for (int i=0; i < 100; i++) {    testCopyFileToOuputStream(rand.nextInt(32000));  }  try {    copy((Path)null,new ByteArrayOutputStream());    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException ignore) {  }  try {    Path source=createTempFile("blah",null);    delete(source);    copy(source,(OutputStream)null);    throw new RuntimeException("NullPointerException expected");  } catch (  NullPointerException ignore) {  }}  }
class C{  public void runTest(){  MockVelocityServlet servlet=new MockVelocityServlet();  try {    servlet.init(new MockServletConfig());  } catch (  ServletException e) {    e.printStackTrace();  }  System.out.println(RuntimeConstants.OUTPUT_ENCODING + "=" + RuntimeSingleton.getProperty(RuntimeConstants.OUTPUT_ENCODING));  HttpServletResponse res=new MockHttpServletResponse();  servlet.visibleSetContentType(null,res);  assertEquals("Character encoding not set to UTF-8","UTF-8",res.getCharacterEncoding());}  }
class C{  public ExecPermissionCollection(){  permissions=new Vector<>();}  }
class C{  private void sendNotification(String messageBody){  Intent intent=new Intent(this,MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.drawable.sendbird_ic_launcher).setContentTitle("SendBird").setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  private void readResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  Header header=response.getFirstHeader("Content-Disposition");  if (header != null) {    innerState.mHeaderContentDisposition=header.getValue();  }  header=response.getFirstHeader("Content-Location");  if (header != null) {    innerState.mHeaderContentLocation=header.getValue();  }  header=response.getFirstHeader("ETag");  if (header != null) {    innerState.mHeaderETag=header.getValue();  }  String headerTransferEncoding=null;  header=response.getFirstHeader("Transfer-Encoding");  if (header != null) {    headerTransferEncoding=header.getValue();  }  String headerContentType=null;  header=response.getFirstHeader("Content-Type");  if (header != null) {    headerContentType=header.getValue();    if (!headerContentType.equals("application/vnd.android.obb")) {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect Mime type");    }  }  if (headerTransferEncoding == null) {    header=response.getFirstHeader("Content-Length");    if (header != null) {      innerState.mHeaderContentLength=header.getValue();      long contentLength=Long.parseLong(innerState.mHeaderContentLength);      if (contentLength != -1 && contentLength != mInfo.mTotalBytes) {        Log.e(Constants.TAG,"Incorrect file size delivered.");      }    }  } else {    if (Constants.LOGVV) {      Log.v(Constants.TAG,"ignoring content-length because of xfer-encoding");    }  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Content-Disposition: " + innerState.mHeaderContentDisposition);    Log.v(Constants.TAG,"Content-Length: " + innerState.mHeaderContentLength);    Log.v(Constants.TAG,"Content-Location: " + innerState.mHeaderContentLocation);    Log.v(Constants.TAG,"ETag: " + innerState.mHeaderETag);    Log.v(Constants.TAG,"Transfer-Encoding: " + headerTransferEncoding);  }  boolean noSizeInfo=innerState.mHeaderContentLength == null && (headerTransferEncoding == null || !headerTransferEncoding.equalsIgnoreCase("chunked"));  if (noSizeInfo) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"can't know size of download, giving up");  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public int putAll(K key,Collection<? extends V> vals){  final Set<V> theSet;  if (theMap.containsKey(key)) {    theSet=theMap.get(key);  } else {    theSet=new HashSet<>(23);    theMap.put(key,theSet);  }  theSet.addAll(vals);  return theSet.size();}  }
class C{  public void changeBufferData(BufferInfo bufferInfo,Buffer newData,int index,int size){  this.changeBufferData(bufferInfo,newData,index,size,false);}  }
class C{  public void append(String text){  append(text,null);}  }
class C{  public void add(Clockable clockable){  add(clockable,-1,true,true);}  }
class C{  public MonitorTrain(TransitSectionAction tsa){  _tsa=tsa;}  }
class C{  public POPOSigningKeyInput(GeneralName sender,SubjectPublicKeyInfo spki){  this.sender=sender;  this.publicKey=spki;}  }
class C{  public String explain(boolean multiline,Schema schema){  return explain(multiline,"",schema);}  }
class C{  public void loadData(Table t,String query){  loadData(t,query,null,null,null);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String theFirstString=m_arg0.execute(xctxt).str();  String theSecondString=m_arg1.execute(xctxt).str();  String theThirdString=m_arg2.execute(xctxt).str();  int theFirstStringLength=theFirstString.length();  int theThirdStringLength=theThirdString.length();  StringBuffer sbuffer=new StringBuffer();  for (int i=0; i < theFirstStringLength; i++) {    char theCurrentChar=theFirstString.charAt(i);    int theIndex=theSecondString.indexOf(theCurrentChar);    if (theIndex < 0) {      sbuffer.append(theCurrentChar);    } else     if (theIndex < theThirdStringLength) {      sbuffer.append(theThirdString.charAt(theIndex));    } else {    }  }  return new XString(sbuffer.toString());}  }
class C{  public void test_ticket_1105_quads_update1() throws Exception {  new UpdateTestHelper("ticket_1105_quads_update1","ticket_1105_update1.rq","ticket_1105.trig");}  }
class C{  private Pair<Integer,InstanceId> removeRRInstance(ArrayList<Container> containers,String component) throws RuntimeException {  int currentContainer=this.containerId - 1;  Optional<PackingPlan.InstancePlan> instancePlan=containers.get(currentContainer).removeAnyInstanceOfComponent(component);  if (instancePlan.isPresent()) {    containerId=(containerId == numContainers) ? 1 : containerId + 1;    PackingPlan.InstancePlan plan=instancePlan.get();    return new Pair<Integer,InstanceId>(currentContainer + 1,new InstanceId(plan.getComponentName(),plan.getTaskId(),plan.getComponentIndex()));  } else {    boolean containersChecked=false;    currentContainer=(containerId == numContainers) ? 0 : containerId;    while (!containersChecked) {      instancePlan=containers.get(currentContainer).removeAnyInstanceOfComponent(component);      if (instancePlan.isPresent()) {        containerId=(currentContainer == numContainers - 1) ? 1 : currentContainer + 2;        PackingPlan.InstancePlan plan=instancePlan.get();        return new Pair<Integer,InstanceId>(currentContainer + 1,new InstanceId(plan.getComponentName(),plan.getTaskId(),plan.getComponentIndex()));      }      currentContainer=(currentContainer == numContainers - 1) ? 0 : currentContainer + 1;      if (currentContainer == containerId - 1) {        containersChecked=true;      }    }    throw new RuntimeException("Cannot remove instance." + " No more instances of component " + component + " exist"+ " in the containers.");  }}  }
class C{  public static Tree createStanfordTreeWithAnnotations(Annotation root) throws CASException {  JCas aJCas=root.getCAS().getJCas();  Tree tree=createStanfordTree(root);  List<Annotation> nonParserAnnotations=new ArrayList<Annotation>();  List<Token> tokens=new ArrayList<Token>();  List<Annotation> annosWithinRoot=JCasUtil.selectCovered(aJCas,Annotation.class,root);  for (  Annotation curAnno : annosWithinRoot) {    if (!(curAnno instanceof POS) && !(curAnno instanceof Constituent) && !(curAnno instanceof Dependency)&& !(curAnno instanceof PennTree)&& !(curAnno instanceof Lemma)&& !(curAnno instanceof Token)&& !(curAnno instanceof DocumentMetaData)) {      nonParserAnnotations.add(curAnno);    } else     if (curAnno instanceof Token) {      tokens.add((Token)curAnno);    }  }  TreeWithTokens annoTree=new TreeWithTokens(tree,tokens);  for (  Annotation curAnno : nonParserAnnotations) {    Tree bestFittingNode=annoTree.getBestFit(curAnno);    if (bestFittingNode != null) {      IntPair span=annoTree.getSpan(bestFittingNode);      curAnno.setBegin(curAnno.getBegin() - span.getSource());      curAnno.setEnd(curAnno.getEnd() - span.getSource());      Collection<Annotation> annotations=((CoreLabel)bestFittingNode.label()).get(UIMAAnnotations.class);      if (annotations == null) {        annotations=new ArrayList<Annotation>();      }      annotations.add(curAnno);      ((CoreLabel)bestFittingNode.label()).set(UIMAAnnotations.class,annotations);    }  }  return tree;}  }
class C{  public boolean contains(T dataSet){  for (  T set : mDataSets) {    if (set.equals(dataSet))     return true;  }  return false;}  }
class C{  public void paint(Graphics g){  if (isVisible()) {    try {      TextUI mapper=component.getUI();      Rectangle r=mapper.modelToView(component,dot,dotBias);      if ((r == null) || ((r.width == 0) && (r.height == 0))) {        return;      }      if (width > 0 && height > 0 && !this._contains(r.x,r.y,r.width,r.height)) {        Rectangle clip=g.getClipBounds();        if (clip != null && !clip.contains(this)) {          repaint();        }        damage(r);      }      g.setColor(component.getCaretColor());      int paintWidth=getCaretWidth(r.height);      r.x-=paintWidth >> 1;      g.fillRect(r.x,r.y,paintWidth,r.height);      Document doc=component.getDocument();      if (doc instanceof AbstractDocument) {        Element bidi=((AbstractDocument)doc).getBidiRootElement();        if ((bidi != null) && (bidi.getElementCount() > 1)) {          flagXPoints[0]=r.x + ((dotLTR) ? paintWidth : 0);          flagYPoints[0]=r.y;          flagXPoints[1]=flagXPoints[0];          flagYPoints[1]=flagYPoints[0] + 4;          flagXPoints[2]=flagXPoints[0] + ((dotLTR) ? 4 : -4);          flagYPoints[2]=flagYPoints[0];          g.fillPolygon(flagXPoints,flagYPoints,3);        }      }    } catch (    BadLocationException e) {    }  }}  }
class C{  private boolean zzRefill(){  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public boolean isManagedComponent(final String name,final String version){  return this.managedComponents.containsKey(getManagedComponentKey(name,version));}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0xAE5DE6AF,version=150) public int sceUsbStart(String driverName,int size,@CanBeNull TPointer args){  usbStarted=true;  HLEModuleManager moduleManager=HLEModuleManager.getInstance();  if (moduleManager.hasFlash0Module(driverName)) {    log.info(String.format("Loading HLE module '%s'",driverName));    int sceModuleId=moduleManager.LoadFlash0Module(driverName);    SceModule module=Managers.modules.getModuleByUID(sceModuleId);    loadedModules.put(driverName,module);  }  return 0;}  }
class C{  public boolean canBeLongAddress(int address){  return isLongAddress(address);}  }
class C{  public void registerEngineExtension(String extension,ScriptEngineFactory factory){  if (extension == null || factory == null)   throw new NullPointerException();  extensionAssociations.put(extension,factory);}  }
class C{  public void increment(int i){  increment(i,0);}  }
class C{  public static short parseShort(String string,int radix) throws NumberFormatException {  int intValue=Integer.parseInt(string,radix);  short result=(short)intValue;  if (result == intValue) {    return result;  }  throw new NumberFormatException("Value out of range for short: \"" + string + "\"");}  }
class C{  public void accept(final MethodVisitor mv){  mv.visitTryCatchBlock(start.getLabel(),end.getLabel(),handler == null ? null : handler.getLabel(),type);  int n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (int i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(mv.visitTryCatchAnnotation(an.typeRef,an.typePath,an.desc,false));  }}  }
class C{  public static void appendEscapedSQLString(StringBuilder sb,String sqlString){  sb.append('\'');  if (sqlString.indexOf('\'') != -1) {    int length=sqlString.length();    for (int i=0; i < length; i++) {      char c=sqlString.charAt(i);      if (c == '\'') {        sb.append('\'');      }      sb.append(c);    }  } else {    sb.append(sqlString);  }  sb.append('\'');}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void clear(int[] n){  for (int i=0; i < n.length; i++) {    n[i]=0;  }}  }
class C{  public void addHyperlinkListener(HyperlinkListener l){  listenerList.add(HyperlinkListener.class,l);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == null)   return false;  if (this == obj)   return true;  if (getClass() != obj.getClass())   return false;  DecimalFormatSymbols other=(DecimalFormatSymbols)obj;  return (zeroDigit == other.zeroDigit && groupingSeparator == other.groupingSeparator && decimalSeparator == other.decimalSeparator && percent == other.percent && perMill == other.perMill && digit == other.digit && minusSign == other.minusSign && patternSeparator == other.patternSeparator && infinity.equals(other.infinity) && NaN.equals(other.NaN) && currencySymbol.equals(other.currencySymbol) && intlCurrencySymbol.equals(other.intlCurrencySymbol) && currency == other.currency && monetarySeparator == other.monetarySeparator && exponentialSeparator.equals(other.exponentialSeparator) && locale.equals(other.locale));}  }
class C{  public static boolean isUnboundedOrExtendsBounded(final AnnotatedWildcardType wildcardType){  return ((Type.WildcardType)wildcardType.getUnderlyingType()).isExtendsBound();}  }
class C{  public static String create(String relativePath,String defaultHostport,String defaultScheme){  return Config.getScheme(defaultScheme) + "://" + Config.getHostport(defaultHostport)+ relativePath;}  }
class C{  public int subtreeDepth() throws UnsupportedOperationException {  throw new UnsupportedOperationException("subtreeDepth() not defined for IPAddressName");}  }
class C{  public Object clone() throws CloneNotSupportedException {  NodeSetDTM clone=(NodeSetDTM)super.clone();  return clone;}  }
class C{  public static String[] ls(String directory) throws IOException {  if (!isDirectory(directory)) {    throw new IOException("Invalid directory! " + directory);  }  return (new File(directory)).list();}  }
class C{  public boolean wasErrorDuringDeviceSelection(){  return mErrorDuringDeviceSelection;}  }
class C{  public void printCount(String kind,int count){  if (count != 0) {    String key;    if (count == 1)     key="count." + kind; else     key="count." + kind + ".plural";    log.printLines(WriterKind.ERROR,key,String.valueOf(count));    log.flush(Log.WriterKind.ERROR);  }}  }
class C{  TValue create(TKey key){  return null;}  }
class C{  public LogEvent(Object source,String message){  super(source);  m_Message=message;}  }
class C{  public Statement leftNaturalJoin(Object table){  statement.append(" NATURAL LEFT JOIN ").append(table);  return this;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean engineCanResolve(Element element,String baseURI,StorageResolver storage){  throw new UnsupportedOperationException();}  }
class C{  @Override public void reset() throws IOException {  throw new IOException("reset not supported");}  }
class C{  @Override public void PUTFIELD(Object conc_receiver,String className,String fieldName,String desc){  Operand value_operand=env.topFrame().operandStack.popOperand();  ReferenceExpression receiver_ref=env.topFrame().operandStack.popRef();  env.heap.initializeReference(conc_receiver,receiver_ref);  Field field=resolveField(classLoader.getClassForName(className),fieldName);  env.ensurePrepared(field.getDeclaringClass());  if (nullReferenceViolation(receiver_ref,conc_receiver)) {    return;  }  ReferenceExpression symb_receiver=(ReferenceExpression)receiver_ref;  Expression<?> symb_value=null;  if (value_operand instanceof IntegerOperand) {    IntegerOperand intOp=(IntegerOperand)value_operand;    symb_value=intOp.getIntegerExpression();  } else   if (value_operand instanceof RealOperand) {    RealOperand realOp=(RealOperand)value_operand;    symb_value=realOp.getRealExpression();  } else   if (value_operand instanceof ReferenceOperand) {    return;  }  env.heap.putField(className,fieldName,conc_receiver,symb_receiver,symb_value);}  }
class C{  public static double P_RecallMacro(int Y[][],int Ypred[][]){  int L=Y[0].length;  double m=0.0;  for (int j=0; j < L; j++) {    int[] y_j=MatrixUtils.getCol(Y,j);    int[] p_j=MatrixUtils.getCol(Ypred,j);    if (allMissing(y_j)) {      L--;      continue;    }    int[][] aligned=align(y_j,p_j);    int[] y_jAligned=aligned[0];    int[] p_jAligned=aligned[1];    double curRecall=P_Recall(y_jAligned,p_jAligned);    if (Double.isNaN(curRecall)) {      continue;    }    m+=curRecall;  }  return m / L;}  }
class C{  public static boolean sync(@NonNull final OutputStream stream){  return (stream instanceof FileOutputStream) && FileUtil.sync((FileOutputStream)stream);}  }
class C{  public void execute(){  int pcDepth=getParams().getInt("depth",-1);  Cefs search=new Cefs(getIndependenceTest(),pcDepth);  Parameters params=getParams();  if (params instanceof Parameters) {    search.setAggressivelyPreventCycles(params.getBoolean("aggressivelyPreventCycles",false));  }  String targetName=getParams().getString("targetName",null);  Graph graph=search.search(targetName);  setResultGraph(graph);  if (getSourceGraph() != null) {    GraphUtils.arrangeBySourceGraph(graph,getSourceGraph());  } else   if (((IKnowledge)getParams().get("knowledge",new Knowledge2())).isDefaultToKnowledgeLayout()) {    SearchGraphUtils.arrangeByKnowledgeTiers(graph,(IKnowledge)getParams().get("knowledge",new Knowledge2()));  } else {    GraphUtils.circleLayout(graph,200,200,150);  }}  }
class C{  public static Vector<Object> toXmlRpcSpecificationsParameters(Collection<Specification> specifications){  Vector<Object> specificationsParams=new Vector<Object>();  for (  Specification specification : specifications) {    specificationsParams.add(specification.marshallize());  }  return specificationsParams;}  }
class C{  public Boolean isCheckDuplex(){  return checkDuplex;}  }
class C{  public ModeInterpolatorAction(DataEditor editor){  super("Replace Missing Values with Column Mode");  if (editor == null) {    throw new NullPointerException();  }  this.dataEditor=editor;}  }
class C{  private void lookAheadCase(int regExpNum){  if (getLookAhead(regExpNum) != null) {    RegExp r1=getRegExp(regExpNum);    RegExp r2=getLookAhead(regExpNum);    Action a=getAction(regExpNum);    int len1=SemCheck.length(r1);    int len2=SemCheck.length(r2);    if (len1 >= 0) {      a.setLookAction(Action.FIXED_BASE,len1);    } else     if (len2 >= 0) {      a.setLookAction(Action.FIXED_LOOK,len2);    } else     if (SemCheck.isFiniteChoice(r2)) {      a.setLookAction(Action.FINITE_CHOICE,0);    } else {      a.setLookAction(Action.GENERAL_LOOK,0);      look_entry.set(regExpNum,gen_look_count);      gen_look_count++;    }  }}  }
class C{  @Override public String toString(){  String out="Internal Error\n";switch (result) {case BACK:case FAIL:    out=resultToString(result);  out=out + vertex.throwableToString();break;case FOLLOW:case SUCCEED:case POSSIBLE:out=resultToString(result);break;default :out="Internal Error: Invalid step result\n";}return out;}  }
class C{  private static void checkArguments(String[] args){  if (args.length < 1)   throw new IllegalArgumentException("Invalid arguments.");}  }
class C{  private URL createSearchURL(URL url) throws MalformedURLException {  if (url == null) {    return url;  }  String protocol=url.getProtocol();  if (isDirectory(url) || protocol.equals("jar")) {    return url;  }  if (factory == null) {    return new URL("jar","",-1,url.toString() + "!/");  }  return new URL("jar","",-1,url.toString() + "!/",factory.createURLStreamHandler("jar"));}  }
class C{  @Override public Value sample(Assignment condition){  IndependentDistribution outputTable=getProbDistrib(condition);  return outputTable.sample();}  }
class C{  public double interpolateZValue(Vertex v0,Vertex v1,Vertex v2){  double x0=v0.getX();  double y0=v0.getY();  double a=v1.getX() - x0;  double b=v2.getX() - x0;  double c=v1.getY() - y0;  double d=v2.getY() - y0;  double det=a * d - b * c;  double dx=this.getX() - x0;  double dy=this.getY() - y0;  double t=(d * dx - b * dy) / det;  double u=(-c * dx + a * dy) / det;  double z=v0.getZ() + t * (v1.getZ() - v0.getZ()) + u * (v2.getZ() - v0.getZ());  return z;}  }
class C{  @Override public void restore(){  restore("",false);}  }
class C{  static void recordBug(Exception e){  StringBuffer msg=new StringBuffer();  msg.append(e.getClass().getName() + ": " + e.getMessage()+ "\n");  for (  StackTraceElement i : e.getStackTrace())   msg.append(i + "\n");  if (DEBUG)   JOptionPane.showMessageDialog(null,msg); else {    try {      logFile.createNewFile();      PrintWriter pw=new PrintWriter(new FileOutputStream(logFile));      pw.println(msg);      pw.close();    } catch (    IOException ohWell) {    }  }}  }
class C{  private static void validateAsyncLog() throws IOException {  List<String> logFileLines=FileUtils.readLines(new File(AsyncDBTestUtil.getAsyncLogFilePath()),StandardCharsets.UTF_8);  int expectedLineCount=3;  if (expectedLineCount != logFileLines.size()) {    throw new IntegrationTestFailedException("Async-log file should have " + expectedLineCount + "' lines, but has "+ logFileLines.size()+ " lines.");  }  int lineIndex=0;  for (  String logFileLine : logFileLines) {    String[] fields=logFileLine.split("" + AsyncLogWriter.FIELD_SEPARATOR);    if (fields.length != AsyncDBTestUtil.LOG_FILE_FIELDS) {      throw new IntegrationTestFailedException("Log file nr " + lineIndex + " has "+ fields.length+ " fields, but must have "+ AsyncDBTestUtil.LOG_FILE_FIELDS);    }    lineIndex++;  }}  }
class C{  protected JTextField addSimpleLongSetting(String name,int size,boolean editable){  SimpleLongSetting result=new SimpleLongSetting(size,editable);  addLongSetting(name,result);  return result;}  }
class C{  public static void changeUID(long oldUID,long newUID,String fromFile,String toFile) throws Exception {  String inputFile;  String tempFile;  File file;  String content;  String line;  BufferedReader reader;  BufferedWriter writer;  if (!isKOML(fromFile)) {    inputFile=fromFile + ".koml";    binaryToKOML(fromFile,inputFile);  } else {    inputFile=fromFile;  }  reader=new BufferedReader(new FileReader(inputFile));  content="";  while ((line=reader.readLine()) != null) {    if (!content.equals(""))     content+="\n";    content+=line;  }  reader.close();  content=content.replaceAll(" uid='" + Long.toString(oldUID) + "'"," uid='" + Long.toString(newUID) + "'");  tempFile=inputFile + ".temp";  writer=new BufferedWriter(new FileWriter(tempFile));  writer.write(content);  writer.flush();  writer.close();  if (!isKOML(toFile)) {    komlToBinary(tempFile,toFile);  } else {    writer=new BufferedWriter(new FileWriter(toFile));    writer.write(content);    writer.flush();    writer.close();  }  file=new File(tempFile);  file.delete();}  }
class C{  @Deprecated public int green(final Vector position,final double radius) throws MaxChangedBlocksException {  return this.green(position,radius,true);}  }
class C{  public double distance(IMultiPoint imp){  if (imp.dimensionality() != 2) {    throw new IllegalArgumentException("distance computation can only be performed between two-dimensional points");  }  double ox=imp.getCoordinate(1);  double oy=imp.getCoordinate(2);  return Math.sqrt((ox - x) * (ox - x) + (oy - y) * (oy - y));}  }
class C{  public void limit(double x1,double y1,double x2,double y2){  clip[0]=Math.max(clip[0],x1);  clip[1]=Math.max(clip[1],y1);  clip[6]=Math.min(clip[6],x2);  clip[7]=Math.min(clip[7],y2);}  }
class C{  public static byte[] parcelToByte(@NonNull Parcelable parcelable){  Parcel parcel=Parcel.obtain();  parcelable.writeToParcel(parcel,0);  byte[] bytes=parcel.marshall();  parcel.recycle();  return bytes;}  }
class C{  public static ThreadSafeSessionManager wrap(SessionManager sessionManager){  if (sessionManager != null)   return new ThreadSafeSessionManager(sessionManager); else   return null;}  }
class C{  public int compareHaplotypePositions(){  return mHaplotypeA.templatePosition() - mHaplotypeB.templatePosition();}  }
class C{  public static void createThumbnail(File inFile,File outFile,int width,int height) throws IOException {  validateDimensions(width,height);  if (inFile == null) {    throw new NullPointerException("Input file is null.");  } else   if (outFile == null) {    throw new NullPointerException("Output file is null.");  }  if (!inFile.exists()) {    throw new IOException("Input file does not exist.");  }  Thumbnails.of(inFile).size(width,height).toFile(outFile);}  }
class C{  private long sumMatrix(int[][] mat){  long ret=0;  for (int i=0; i < mat.length; i++) {    final int[] row=mat[i];    for (int j=0; j < row.length; j++) {      ret+=row[j];    }  }  return ret;}  }
class C{  @SuppressWarnings("unchecked") public <T>T loadAs(String yaml,Class<T> type){  return (T)loadFromReader(new StreamReader(yaml),type);}  }
class C{  public SVGOMUseShadowRoot(AbstractDocument owner,Element parent,boolean isLocal){  ownerDocument=owner;  cssParentElement=parent;  this.isLocal=isLocal;}  }
class C{  public void testCreateCustomDeployable() throws Exception {  Deployable deployableElement=createCustomDeployableElement();  String deployableFile="testCreateCustomDeployable.custom";  Artifact artifact=createCustomArtifact(deployableFile);  Set<Artifact> artifacts=new HashSet<Artifact>();  artifacts.add(artifact);  org.codehaus.cargo.container.deployable.Deployable deployable=deployableElement.createDeployable("whateverId",createDefaultProject("war",artifacts));  assertEquals(CustomType.class.getName(),deployable.getClass().getName());}  }
class C{  public Round(){  super(Number.class,Number.class);}  }
class C{  public static double cosh(double x){  return (MathLib.exp(x) + MathLib.exp(-x)) * 0.5;}  }
class C{  protected void preRedo(){  if (cursor >= 0 && cursor < selections.size()) {    ISelection selection=selectionProvider.getSelection();    selections.set(cursor,selection);  } else   if (cursor == selections.size()) {    ISelection selection=selectionProvider.getSelection();    selections.add(cursor,selection);  }}  }
class C{  public boolean isPath(){  return end - begin >= 1;}  }
class C{  private static String addArguments(Object[] arguments,String message){  try {    formatter.applyPattern(message);    String formatted=formatter.format(arguments);    return formatted;  } catch (  Throwable t) {    return message;  }}  }
class C{  public void updateClientManagement(Boolean clientManagement) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update scope setting");  Element scope=_getRootElement("scope");  scope.setAttribute("clientmanagement",Caster.toString(clientManagement,""));}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hzu");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int nRows, nCols;  double z;  int progress=0;  int i, a;  double noData=-32768;  double outputNoData=-32768;  String inputDataString=null;  int numImages=0;  double sumOfWeights=0;  double d=0;  double weight=0;  double scaleMin=0;  double scaleMax=1;  double imageMin=0;  double imageMax=1;  double imageRange=1;  double[] data=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  String[] dataSplit=args[0].split(";");  String[] constraints=args[1].split(";");  outputHeader=args[2];  String commonScale=args[3];  if (commonScale.equals("0-1")) {    scaleMin=0;    scaleMax=1;  } else   if (commonScale.equals("0-100")) {    scaleMin=0;    scaleMax=100;  } else   if (commonScale.equals("0-255")) {    scaleMin=0;    scaleMax=255;  }  if (outputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    ArrayList<Boolean> costFactor=new ArrayList<Boolean>();    ArrayList<String> imageFiles=new ArrayList<String>();    ArrayList<Double> weights=new ArrayList<Double>();    for (a=0; a < dataSplit.length; a+=3) {      if (!dataSplit[a + 1].trim().equals("") && !dataSplit[a].trim().toLowerCase().equals("not specified")) {        costFactor.add(Boolean.parseBoolean(dataSplit[a]));        imageFiles.add(dataSplit[a + 1].trim());        weights.add(Double.parseDouble(dataSplit[a + 2]));        sumOfWeights+=weights.get(numImages);        numImages++;      }    }    if (numImages < 2) {      showFeedback("At least two factor images must be specified.");      return;    }    for (a=0; a < numImages; a++) {      d=weights.get(a) / sumOfWeights;      weights.set(a,d);    }    image=new WhiteboxRaster(imageFiles.get(0),"r");    nRows=image.getNumberRows();    nCols=image.getNumberColumns();    outputNoData=image.getNoDataValue();    output=new WhiteboxRaster(outputHeader,"rw",imageFiles.get(0),WhiteboxRaster.DataType.FLOAT,0);    for (i=0; i < numImages; i++) {      progress=(int)(100f * (i + 1) / numImages);      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      weight=weights.get(i);      if (i > 0) {        image=new WhiteboxRaster(imageFiles.get(i),"r");        noData=image.getNoDataValue();        if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMin=image.getMinimumValue();      imageMax=image.getMaximumValue();      imageRange=imageMax - imageMin;      Boolean boolCost=costFactor.get(i);      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=output.getValue(row,col);            if (z != outputNoData) {              if (!boolCost) {                d=(data[col] - imageMin) / imageRange * scaleMax;                output.setValue(row,col,z + d * weight);              } else {                d=(1 - (data[col] - imageMin) / imageRange) * scaleMax;                output.setValue(row,col,z + d * weight);              }            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    for (i=0; i < constraints.length; i++) {      image=new WhiteboxRaster(constraints[i].trim(),"r");      noData=image.getNoDataValue();      if (image.getNumberRows() != nRows || image.getNumberColumns() != nCols) {        showFeedback("All input images must have the same dimensions (rows and columns).");        return;      }      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData && data[col] <= 0) {            if (output.getValue(row,col) != outputNoData) {              output.setValue(row,col,scaleMin);            }          } else {            output.setValue(row,col,outputNoData);          }        }        if (cancelOp) {          cancelOperation();          return;        }      }      image.close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Relationship bestResponse(float percentage,Vertex input,Vertex sentence,Vertex question,Vertex previousResponse,boolean cascade,boolean init,Vertex previousQuestion,Set<String> questionWords,Vertex currentTopic,Network network){  Collection<Relationship> responses=sentence.getRelationships(Primitive.RESPONSE);  Relationship best=null;  if (responses != null) {    if (init) {      Vertex previousQuestionInput=input.getRelationship(Primitive.QUESTION);      if (previousQuestionInput != null) {        previousQuestion=previousQuestionInput.getRelationship(Primitive.INPUT);      }      Vertex conversation=input.getRelationship(Primitive.CONVERSATION);      if (conversation != null) {        currentTopic=conversation.mostConscious(Primitive.TOPIC);      }      if (question != null) {        questionWords=new HashSet<String>();        Collection<Relationship> relationships=question.getRelationships(Primitive.WORD);        if (relationships != null) {          for (          Relationship relationship : relationships) {            questionWords.add(relationship.getTarget().getDataValue().toLowerCase());          }        }      }    }    Relationship bestWithTopic=null;    Relationship bestWithPrevious=null;    Relationship bestWithTopicPrevious=null;    for (    Relationship response : responses) {      if ((response.getCorrectness() >= percentage) && (response.getTarget() != previousResponse)) {        if (response.getTarget().hasRelationship(Primitive.ASSOCIATED,Primitive.OFFENSIVE)) {          continue;        }        Vertex meta=response.getMeta();        if (meta != null) {          if ((previousQuestion == null) && meta.hasRelationship(Primitive.REQUIRE,Primitive.PREVIOUS)) {            continue;          }          Vertex topic=meta.getRelationship(Primitive.TOPIC);          if (bestWithTopic != null && topic == null) {            continue;          }          Collection<Relationship> required=meta.getRelationships(Primitive.REQUIRED);          if ((required != null) && (!required.isEmpty()) && (question != null)) {            boolean found=true;            for (            Relationship word : required) {              if (!questionWords.contains(word.getTarget().getDataValue().toLowerCase())) {                found=false;                log("Missing required word",Level.FINER,word.getTarget());                break;              }            }            if (!found) {              continue;            }          } else {            Collection<Relationship> keywords=meta.getRelationships(Primitive.KEYWORD);            if ((keywords != null) && (!keywords.isEmpty()) && (question != null)) {              boolean found=false;              for (              Relationship keyword : keywords) {                if (questionWords.contains(keyword.getTarget().getDataValue().toLowerCase())) {                  found=true;                  break;                }              }              if (!found) {                log("Missing keyword",Level.FINER,keywords);                continue;              }            }          }          if (topic != null) {            boolean requireTopic=meta.hasRelationship(Primitive.REQUIRE,Primitive.TOPIC);            if (currentTopic == null && requireTopic) {              continue;            }            if (currentTopic != null) {              boolean match=topic == currentTopic;              if (!match && topic.instanceOf(Primitive.PATTERN)) {                match=evaluatePattern(topic,currentTopic,Primitive.TOPICWILDCARD,new HashMap<Vertex,Vertex>(),network);              }              if (!match && requireTopic) {                continue;              }              if (match && (bestWithTopic == null || (response.getCorrectness() > bestWithTopic.getCorrectness()))) {                if (previousQuestion != null) {                  if (meta.hasRelationship(Primitive.PREVIOUS,previousQuestion)) {                    bestWithTopicPrevious=response;                  } else {                    if (meta.hasInverseRelationship(Primitive.PREVIOUS,previousQuestion)) {                      continue;                    }                    Collection<Relationship> previous=meta.getRelationships(Primitive.PREVIOUS);                    if (previous != null) {                      for (                      Relationship relationship : previous) {                        match=evaluatePattern(relationship.getTarget(),previousQuestion,Primitive.THATWILDCARD,new HashMap<Vertex,Vertex>(),network);                        if (match) {                          bestWithTopicPrevious=response;                        }                      }                    }                  }                }                if (meta.hasRelationship(Primitive.REQUIRE,Primitive.PREVIOUS)) {                  continue;                }                bestWithTopic=response;              }            }          }          if ((bestWithTopic == null) && (previousQuestion != null) && ((bestWithPrevious == null) || (response.getCorrectness() > bestWithPrevious.getCorrectness()))) {            boolean match=false;            if (meta.hasRelationship(Primitive.PREVIOUS,previousQuestion)) {              bestWithPrevious=response;            } else {              if (meta.hasInverseRelationship(Primitive.PREVIOUS,previousQuestion)) {                continue;              }              Collection<Relationship> previous=meta.getRelationships(Primitive.PREVIOUS);              if (previous != null) {                for (                Relationship relationship : previous) {                  match=evaluatePattern(relationship.getTarget(),previousQuestion,Primitive.THATWILDCARD,new HashMap<Vertex,Vertex>(),network);                  if (match) {                    bestWithPrevious=response;                    break;                  }                }              }              if (!match && meta.hasRelationship(Primitive.REQUIRE,Primitive.PREVIOUS)) {                continue;              }            }          }        }        if ((best == null) || (response.getCorrectness() > best.getCorrectness())) {          best=response;        }      }    }    if (bestWithTopicPrevious != null) {      if (bestWithTopicPrevious.hasMeta()) {        this.lastResponseMetaId=bestWithTopicPrevious.getMeta().getId();      }      return bestWithTopicPrevious;    }    if (bestWithTopic != null) {      if (bestWithTopic.hasMeta()) {        this.lastResponseMetaId=bestWithTopic.getMeta().getId();      }      return bestWithTopic;    }    if (bestWithPrevious != null) {      if (bestWithPrevious.hasMeta()) {        this.lastResponseMetaId=bestWithPrevious.getMeta().getId();      }      return bestWithPrevious;    }    if (best != null) {      if (best.hasMeta()) {        this.lastResponseMetaId=best.getMeta().getId();      }      return best;    }  }  if (cascade) {    network.checkReduction(sentence);    Collection<Relationship> meanings=sentence.getRelationships(Primitive.SYNONYM);    if (meanings != null) {      for (      Relationship meaning : meanings) {        best=bestResponse(percentage,input,meaning.getTarget(),question,previousResponse,false,init,previousQuestion,questionWords,currentTopic,network);        if (best != null) {          return best;        }      }    }  }  return best;}  }
class C{  public final static double wrapLongitude(double lon){  if ((lon < -DATELINE_D) || (lon > DATELINE_D)) {    lon+=DATELINE_D;    lon%=LON_RANGE_D;    lon+=(lon < 0) ? DATELINE_D : -DATELINE_D;  }  return lon;}  }
class C{  public void visit(BinaryNode<K> parent,BinaryNode<K> n){  if (parent != null && !nodes.contains(parent)) {    visitNode(parent);  }  if (!nodes.contains(n)) {    visitNode(n);  }  if (parent != null) {    visitEdge(parent,n);  }}  }
class C{  protected int engineGetOutputSize(int inputLen){  return core.getOutputSize(inputLen);}  }
class C{  @Override public int hashCode(){  int hash=((time.toSecondOfDay() + (timeEndOfDay ? 1 : 0)) << 15) + (month << 11) + ((dom + 32) << 5)+ ((dow == -1 ? 8 : dow) << 2)+ (timeDefinition.ordinal());  return hash ^ standardOffset.hashCode() ^ offsetBefore.hashCode()^ offsetAfter.hashCode();}  }
class C{  public static String readString(Reader r) throws IOException {  return readFully(r).toString();}  }
class C{  public boolean isSipTraceActivated(){  return readBoolean(RcsSettingsData.SIP_TRACE_ACTIVATED);}  }
class C{  public byte[] nextSeed(byte[] outseed){  byte[] rand=new byte[outseed.length];  messDigestTree.update(outseed,0,outseed.length);  rand=new byte[messDigestTree.getDigestSize()];  messDigestTree.doFinal(rand,0);  addByteArrays(outseed,rand);  addOne(outseed);  return rand;}  }
class C{  static int toCodePoint(char ch){  int codePoint=ch;  return codePoint;}  }
class C{  protected Monitor pollFor(Map<String,Monitor> map,String name,long timeLimit) throws MonitorException {  Monitor monitor=null;  log("polling for: " + lvmid + ","+ name+ " ");  pollForEntry=nextEntry;  while ((monitor=map.get(name)) == null) {    log(".");    try {      Thread.sleep(20);    } catch (    InterruptedException e) {    }    long t=System.currentTimeMillis();    if ((t > timeLimit) || (overflow.intValue() > 0)) {      lognl("failed: " + lvmid + ","+ name);      dumpAll(map,lvmid);      throw new MonitorException("Could not find expected counter");    }    getNewMonitors(map);  }  lognl("success: " + lvmid + ","+ name);  return monitor;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap entities;  DocumentType docType;  Node retval;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    entities=docType.getEntities();    assertNotNull("entitiesNotNull",entities);{      boolean success=false;      try {        retval=entities.removeNamedItem("alpha");      } catch (      DOMException ex) {        success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);      }      assertTrue("throw_NO_MODIFICATION_ALLOWED_ERR",success);    }  }}  }
class C{  public JSONArray put(int index,boolean value) throws JSONException {  this.put(index,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  @Override public void distributeLabels(double minY,double height){  sort();  if (isOverlap()) {    adjustDownwards(minY,height);  }  if (isOverlap()) {    adjustUpwards(minY,height);  }  if (isOverlap()) {    spreadEvenly(minY,height);  }}  }
class C{  public void updateBaseComponent(String baseComponentCFML,String baseComponentLucee) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_SETTING);  if (!hasAccess)   throw new SecurityException("no access to update component setting");  Element scope=_getRootElement("component");  scope.removeAttribute("base");  scope.setAttribute("base-cfml",baseComponentCFML);  scope.setAttribute("base-lucee",baseComponentLucee);}  }
class C{  public SemUpdaterEditor(SemUpdater semUpdater){  if (semUpdater == null) {    throw new NullPointerException("Bayes semUpdater must not be null.");  }  this.semUpdater=semUpdater;  setLayout(new BorderLayout());  setName("Bayes Updater Editor");  Box b1=Box.createHorizontalBox();  semImEditor=new SemImEditor(new SemImWrapper(semUpdater.getSemIm()));  semImEditor.add(getUpdatePanel(),BorderLayout.WEST);  semImEditor.setEditable(false);  b1.add(semImEditor);  add(b1,BorderLayout.CENTER);}  }
class C{  protected CompleteUploadSingleMessageResult performCompleteUploadSingleMessageImpl(String objectKey){  CompleteUploadSingleMessageResult completeUploadSingleMessageResult=new CompleteUploadSingleMessageResult();  CompleteUploadSingleParamsDto completeUploadSingleParamsDto=new CompleteUploadSingleParamsDto();  uploadDownloadHelperService.prepareForFileMove(objectKey,completeUploadSingleParamsDto);  completeUploadSingleMessageResult.setSourceBusinessObjectDataKey(completeUploadSingleParamsDto.getSourceBusinessObjectDataKey());  completeUploadSingleMessageResult.setSourceOldBusinessObjectDataStatus(completeUploadSingleParamsDto.getSourceOldStatus());  completeUploadSingleMessageResult.setSourceNewBusinessObjectDataStatus(completeUploadSingleParamsDto.getSourceNewStatus());  completeUploadSingleMessageResult.setTargetBusinessObjectDataKey(completeUploadSingleParamsDto.getTargetBusinessObjectDataKey());  completeUploadSingleMessageResult.setTargetOldBusinessObjectDataStatus(completeUploadSingleParamsDto.getTargetOldStatus());  completeUploadSingleMessageResult.setTargetNewBusinessObjectDataStatus(completeUploadSingleParamsDto.getTargetNewStatus());  if (BusinessObjectDataStatusEntity.RE_ENCRYPTING.equals(completeUploadSingleParamsDto.getSourceNewStatus()) && BusinessObjectDataStatusEntity.RE_ENCRYPTING.equals(completeUploadSingleParamsDto.getTargetNewStatus())) {    uploadDownloadHelperService.performFileMove(completeUploadSingleParamsDto);    uploadDownloadHelperService.executeFileMoveAfterSteps(completeUploadSingleParamsDto);    completeUploadSingleMessageResult.setSourceNewBusinessObjectDataStatus(completeUploadSingleParamsDto.getSourceNewStatus());    completeUploadSingleMessageResult.setTargetNewBusinessObjectDataStatus(completeUploadSingleParamsDto.getTargetNewStatus());  }  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("completeUploadSingleMessageResult={}",jsonHelper.objectToJson(completeUploadSingleMessageResult));  }  return completeUploadSingleMessageResult;}  }
class C{  public void updateUI(){  setUI((MenuBarUI)UIManager.getUI(this));}  }
class C{  @Override public void aggregateDimensionData(AbstractScannedResult scannedResult,MeasureAggregator[] aggeragtor){  byte[] dimensionData=scannedResult.getDimensionKey(blockIndex);  int surrogateKey=CarbonUtil.getSurrogateKey(dimensionData,buffer);  Object valueFromSurrogate=directDictionaryGenerator.getValueFromSurrogate(surrogateKey);  if (null != valueFromSurrogate) {    Timestamp dataBasedOnDataType=new Timestamp((long)valueFromSurrogate / 1000);    if (actualTypeAggregatorIndex.length > 0) {      for (int j=0; j < actualTypeAggregatorIndex.length; j++) {        aggeragtor[aggregatorStartIndex + actualTypeAggregatorIndex[j]].agg(dataBasedOnDataType);      }    }    if (numberTypeAggregatorIndex.length > 0) {      for (int j=0; j < numberTypeAggregatorIndex.length; j++) {        aggeragtor[aggregatorStartIndex + numberTypeAggregatorIndex[j]].agg(dataBasedOnDataType);      }    }  }}  }
class C{  public TiledGrayscaleMatrix(final GrayscaleMatrix matrix,final int tileWidth,final int tileHeight){  if (matrix.getWidth() < tileWidth || matrix.getHeight() < tileHeight) {    throw new IllegalArgumentException("Tile size must be smaller than original matrix!");  }  if (tileWidth <= 0 || tileHeight <= 0) {    throw new IllegalArgumentException("Illegal tile size!");  }  this.tileWidth=tileWidth;  this.tileHeight=tileHeight;  this.tilesX=matrix.getWidth() / tileWidth;  this.tilesY=matrix.getHeight() / tileHeight;  int roundedWidth=tilesX * tileWidth;  int roundedHeight=tilesY * tileHeight;  tiles=new ArrayList<GrayscaleMatrix>(roundedWidth * roundedHeight);  for (int i=0; i < tilesY; i++) {    for (int j=0; j < tilesX; j++) {      tiles.add(GrayscaleMatrix.createFromRegion(matrix,tileWidth,tileHeight,this.tileWidth * j,this.tileHeight * i));    }  }}  }
class C{  private static boolean isSupportedRegex(String regex){  if (regex.contains("\\b"))   return false;  return true;}  }
class C{  public boolean isValidMessageFormat(){  if (this.match(this.myRegex) != null) {    return (true);  } else {    return (false);  }}  }
class C{  public static String unqualify(String qualifiedName){  return unqualify(qualifiedName,'.');}  }
class C{  protected SizeRequirements calculateMajorAxisRequirements(int axis,SizeRequirements r){  updateInsets();  rowIterator.updateAdjustments();  r=CSS.calculateTiledRequirements(rowIterator,r);  r.maximum=r.preferred;  return r;}  }
class C{  public ReplicationJob createJobForCopyDynamicPartitions(long auditLogId,long auditLogEntryCreateTime,List<NamedPartition> namedPartitions) throws StateUpdateException {  ReplicationOperation replicationOperation=ReplicationOperation.COPY_PARTITIONS;  List<Partition> partitions=NamedPartition.toPartitions(namedPartitions);  List<String> partitionNames=NamedPartition.toNames(namedPartitions);  Optional<Path> commonLocation=ReplicationUtils.getCommonDirectory(ReplicationUtils.getLocations(partitions));  Partition samplePartition=namedPartitions.get(0).getPartition();  HiveObjectSpec tableSpec=new HiveObjectSpec(samplePartition.getDbName(),samplePartition.getTableName());  Map<String,String> extras=new HashMap<>();  extras.put(PersistedJobInfo.AUDIT_LOG_ID_EXTRAS_KEY,Long.toString(auditLogId));  extras.put(PersistedJobInfo.AUDIT_LOG_ENTRY_CREATE_TIME_KEY,Long.toString(auditLogEntryCreateTime));  PersistedJobInfo persistedJobInfo=jobInfoStore.resilientCreate(replicationOperation,ReplicationStatus.PENDING,commonLocation,srcCluster.getName(),tableSpec,partitionNames,Optional.empty(),Optional.empty(),Optional.empty(),extras);  ReplicationTask replicationTask=new CopyPartitionsTask(conf,destinationObjectFactory,objectConflictHandler,srcCluster,destCluster,tableSpec,partitionNames,commonLocation,copyPartitionJobExecutor,directoryCopier);  return new ReplicationJob(conf,replicationTask,onStateChangeHandler,persistedJobInfo);}  }
class C{  public Drawable loadIcon(PackageManager pm){  if (icon != 0) {    Drawable dr=pm.getDrawable(packageName,icon,getApplicationInfo());    if (dr != null) {      return dr;    }  }  return loadDefaultIcon(pm);}  }
class C{  public SolrConfig(String instanceDir,String name,InputSource is) throws ParserConfigurationException, IOException, SAXException {  this(new SolrResourceLoader(instanceDir),name,is);}  }
class C{  @Override public Iterator<IDatabase> iterator(){  return m_databases.iterator();}  }
class C{  public boolean associate(ScriptableObject topScope){  if (topScope.getParentScope() != null) {    throw new IllegalArgumentException();  }  if (this == topScope.associateValue(AKEY,this)) {    associatedScope=topScope;    return true;  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_elementremoveattributenode.class,args);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 2) {    System.out.println("usage: [input] [output]");    System.exit(-1);  }  JobConf job=getJob(args[0],args[1]);  JobClient.runJob(job);}  }
class C{  protected double[][] computeDistanceMatrix(Population population){  double[][] distances=new double[population.size()][population.size()];  for (int i=0; i < population.size(); i++) {    distances[i][i]=0.0;    for (int j=i + 1; j < population.size(); j++) {      distances[i][j]=distances[j][i]=IndicatorUtils.euclideanDistance(problem,population.get(i),population.get(j));    }  }  return distances;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.writeObject(base);  out.writeObject(serverAddress);  out.writeObject(ownId);  out.writeBoolean(compressedCommunication);  out.writeObject(immigrantsSelectionMethod);  out.writeObject(indsToDieSelectionMethod);  out.writeInt(serverPort);  out.writeInt(clientPort);  out.writeBoolean(iAmServer);}  }
class C{  public boolean isSetError(){  return this.error != null;}  }
class C{  public static DigitalInput digitalInput(int port){  return dioRegistrar.fetch(port,DigitalInput.class,null);}  }
class C{  public boolean checkEvent(Event.ID choice){  peekEvent();  return currentEvent != null && currentEvent.is(choice);}  }
class C{  private static long sort(Ignite g,int size){  int[] bigArr=generateRandomArray(size);  X.println("Array is generated.");  long startTime=System.currentTimeMillis();  g.compute().execute(new GridMergeSortLoadTask(),bigArr);  long execTime=System.currentTimeMillis() - startTime;  X.println("Sorting is finished. Execution time: " + execTime + "ms");  return execTime;}  }
class C{  public void readFeatures(BufferedReader fin) throws IOException {  if (features != null) {    features.clear();  } else {    features=new ArrayList();  }  if (fmap != null) {    fmap.clear();  } else {    fmap=new HashMap();  }  if (eFeatures != null) {    eFeatures.clear();  } else {    eFeatures=new ArrayList();  }  if (sFeatures != null) {    sFeatures.clear();  } else {    sFeatures=new ArrayList();  }  String line;  if ((line=fin.readLine()) == null) {    System.out.println("Unknown number of features");    return;  }  int numFeatures=Integer.parseInt(line);  System.out.println("Number of features: " + numFeatures);  if (numFeatures <= 0) {    System.out.println("Invalid number of features");    return;  }  System.out.println("Reading features ...");  for (int i=0; i < numFeatures; i++) {    line=fin.readLine();    if (line == null) {      continue;    }    StringTokenizer strTok=new StringTokenizer(line," ");    if (strTok.countTokens() != 3) {      continue;    }    Feature f=new Feature(line,maps.cpStr2Int,maps.lbStr2Int);    Integer fidx=(Integer)fmap.get(f.strId);    if (fidx == null) {      fmap.put(f.strId,new Integer(f.idx));      features.add(f);      if (f.ftype == Feature.EDGE_FEATURE1) {        eFeatures.add(f);      }    } else {      features.add(f);    }  }  System.out.println("Reading " + Integer.toString(features.size()) + " features completed!");  line=fin.readLine();}  }
class C{  public double eval(double params[]){  return (1 - params[0]);}  }
class C{  public Hearing(OdorWorldEntity parent,String phrase,double outputAmount){  super(parent,"Hear: \"" + phrase + "\"");  this.phrase=phrase;  this.outputAmount=outputAmount;}  }
class C{  public static String wrapDefaultTemplate(String bodyText,String title,HtmlReportHelper hrh) throws IOException {  final Map<String,String> data=new HashMap<>();  data.put("body",bodyText);  data.put("title",title);  data.put("resourceDir",hrh.getResourcesDirName());  hrh.copyResources(TEMPLATE_DIR + "/rtg.css",TEMPLATE_DIR + "/rtg_logo.png",TEMPLATE_DIR + "/table.css");  return processTemplate(DEFAULT_TEMPLATE,data);}  }
class C{  public boolean contains(Class<?> type){  return cache.containsKey(type);}  }
class C{  private void addLabel(MaterialLabel label,LinearLayout location){  location.addView(label.getView(),Utils.genVerticalLayoutParam(48,displayDensity));}  }
class C{  public GenericPropertyAccessor(FDSpecification spec){  this.spec=spec;}  }
class C{  @Override protected ActionMode.Callback createActionMode(AppCompatActivity activity){  return new ActionModeTitle(activity,this);}  }
class C{  public boolean isSelected(int position){  return getSelectedItems().contains(position);}  }
class C{  public boolean levelCheck(int iter){  throw new WrongInvocationException("Level checking of " + kinds[this.getKind()] + " node not implemented.");}  }
class C{  public void write(byte b) throws IOException {  this.writeByte(b);}  }
class C{  public final void recreateKey(){  try {    mKeyStore.load(null);    mKeyGenerator.init(new KeyGenParameterSpec.Builder(mKeyName,KeyProperties.PURPOSE_ENCRYPT | KeyProperties.PURPOSE_DECRYPT).setBlockModes(KeyProperties.BLOCK_MODE_CBC).setUserAuthenticationRequired(true).setEncryptionPaddings(KeyProperties.ENCRYPTION_PADDING_PKCS7).build());    mKeyGenerator.generateKey();  } catch (  NoSuchAlgorithmException|InvalidAlgorithmParameterException|CertificateException|IOException e) {    throw new RuntimeException(e);  }}  }
class C{  @Override protected itemGridCellBinder newViewHolder(View view){  return new itemGridCellBinder(view,true);}  }
class C{  public void cID(String cID){  self.cID=cID;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.IMMUTABLE___IMMUTABLE_1:    return isImmutable_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static InetAddress decrement(InetAddress address){  byte[] addr=address.getAddress();  int i=addr.length - 1;  while (i >= 0 && addr[i] == (byte)0x00) {    addr[i]=(byte)0xff;    i--;  }  Preconditions.checkArgument(i >= 0,"Decrementing %s would wrap.",address);  addr[i]--;  return bytesToInetAddress(addr);}  }
class C{  public static String utf2string(byte[] src){  return utf2string(src,0,src.length);}  }
class C{  public void testConstructorStringException2(){  String value="   9234853876401";  int radix=10;  try {    new BigInteger(value,radix);    fail("NumberFormatException has not been caught");  } catch (  NumberFormatException e) {  }}  }
class C{  @Override public boolean check(ProcessBranch operator,String value) throws OperatorException {  if (value == null) {    throw new UndefinedParameterError(ProcessBranch.PARAMETER_CONDITION_VALUE,operator);  }  File file=new File(value);  return file.exists();}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  private Creator create(Signature signature){  Creator creator=new SignatureCreator(signature);  if (signature != null) {    options.add(creator);  }  return creator;}  }
class C{  public void grantModerator(String nickname) throws XMPPException {  changeRole(nickname,"moderator",null);}  }
class C{  public void run(){  runWorker(this);}  }
class C{  public static final Vec2D min(ReadonlyVec2D a,ReadonlyVec2D b){  return new Vec2D(MathUtils.min(a.x(),b.x()),MathUtils.min(a.y(),b.y()));}  }
class C{  public Object object(){  return str();}  }
class C{  public SSLProtocolException(String reason){  super(reason);}  }
class C{  public void fillFieldValues(){  kValue=new JTextField("" + wta.getK());}  }
class C{  public static void writeProperty(Object bean,PropertyDescriptor descriptor,Object value){  try {    Method writeMethod=descriptor.getWriteMethod();    if (null == writeMethod) {      throw new IllegalArgumentException(String.format("Missing public setter method for %s property",descriptor.getName()));    }    if (!writeMethod.isAccessible()) {      writeMethod.setAccessible(true);    }    writeMethod.invoke(bean,new Object[]{value});  } catch (  InvocationTargetException e) {    throw new RuntimeException(e.getCause());  }catch (  Exception e) {  }}  }
class C{  public Boolean isSendOnSuccess(){  return sendOnSuccess;}  }
class C{  public int hashCode(){  return m_storedObjectArray.length;}  }
class C{  private void printLocalVars(){  System.out.println("Printing local vars");  for (  Map.Entry<LocalItem,ArrayList<RegisterSpec>> e : localVariables.entrySet()) {    StringBuilder regs=new StringBuilder();    regs.append('{');    regs.append(' ');    for (    RegisterSpec reg : e.getValue()) {      regs.append('v');      regs.append(reg.getReg());      regs.append(' ');    }    regs.append('}');    System.out.printf("Local: %s Registers: %s\n",e.getKey(),regs);  }}  }
class C{  protected void addExternalPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_Property_external_feature"),getString("_UI_PropertyDescriptor_description","_UI_Property_external_feature","_UI_Property_type"),TypesPackage.Literals.PROPERTY__EXTERNAL,true,false,false,ItemPropertyDescriptor.BOOLEAN_VALUE_IMAGE,null,null));}  }
class C{  public Quaternionf nlerp(Quaternionfc q,float factor){  return nlerp(q,factor,this);}  }
class C{  public GenericListCellRenderer(Component odd,Component oddUnselected,Component even,Component evenUnselected){  this(odd,oddUnselected);  selectedEven=even;  unselectedEven=evenUnselected;  selectedEntriesEven=initRenderer(even);  unselectedEntriesEven=initRenderer(evenUnselected);  addSelectedEntriesListener(selectedEntriesEven);  addSelectedEntriesListener(unselectedEntriesEven);}  }
class C{  protected double[] evaluateGradient(double[] x){  double[] grad=new double[x.length];  int dim=m_NumPredictors + 1;  for (int i=0; i < cls.length; i++) {    double[] num=new double[m_NumClasses - 1];    int index;    for (int offset=0; offset < m_NumClasses - 1; offset++) {      double exp=0.0;      index=offset * dim;      for (int j=0; j < dim; j++) {        exp+=m_Data[i][j] * x[index + j];      }      num[offset]=exp;    }    double max=num[Utils.maxIndex(num)];    double denom=Math.exp(-max);    for (int offset=0; offset < m_NumClasses - 1; offset++) {      num[offset]=Math.exp(num[offset] - max);      denom+=num[offset];    }    Utils.normalize(num,denom);    double firstTerm;    for (int offset=0; offset < m_NumClasses - 1; offset++) {      index=offset * dim;      firstTerm=weights[i] * num[offset];      for (int q=0; q < dim; q++) {        grad[index + q]+=firstTerm * m_Data[i][q];      }    }    if (cls[i] != m_NumClasses - 1) {      for (int p=0; p < dim; p++) {        grad[cls[i] * dim + p]-=weights[i] * m_Data[i][p];      }    }  }  for (int offset=0; offset < m_NumClasses - 1; offset++) {    for (int r=1; r < dim; r++) {      grad[offset * dim + r]+=2 * m_Ridge * x[offset * dim + r];    }  }  return grad;}  }
class C{  V readValueUnderLock(HashEntry<K,V> e){  lock();  try {    return e.value;  }  finally {    unlock();  }}  }
class C{  public Vector(int capacity){  this(capacity,0);}  }
class C{  public ICUFoldingFilter(TokenStream input){  super(input,normalizer);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void addColumns(Collection<Column> columns){  for (Iterator<Column> it=columns.iterator(); it.hasNext(); ) {    addColumn((Column)it.next());  }}  }
class C{  protected void sequence_Addition_And_Comparison_Exponentiation_Multiplication(ISerializationContext context,Expression semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public TextClusteringModel(String component,boolean updateDataStore,TextClusteringComponentModel textClusteringComponentModel,IThresholdSetter thresholdSetter) throws AdeException {  m_componentName=component;  m_componentId=AdeInternal.getAdeImpl().getDictionaries().getComponentIdDictionary().addWord(component);  m_updateDataStore=updateDataStore;  m_clustersData=new LinkedList<TextClusterData>();  m_parentModel=textClusteringComponentModel;  m_dsTextClustering=AdeInternal.getAdeImpl().getDataStore().textClustering();  m_maxClusterId=m_dsTextClustering.refreshClustersFromDataStore(m_componentId,m_maxClusterId,m_clustersData);  m_parentModel.setMaxClusterId(m_maxClusterId);  m_thresholdSetter=thresholdSetter;}  }
class C{  public static int parseInt(CharSequence csq,int radix,Cursor cursor){  int start=cursor.getIndex();  int end=csq.length();  boolean isNegative=false;  int result=0;  int i=start;  for (; i < end; i++) {    char c=csq.charAt(i);    int digit=(c <= '9') ? c - '0' : ((c <= 'Z') && (c >= 'A')) ? c - 'A' + 10 : ((c <= 'z') && (c >= 'a')) ? c - 'a' + 10 : -1;    if (digit >= radix || digit < 0 && (c != '-' && c != '+')) {      throw new NumberFormatException("Invalid integer representation for " + csq.subSequence(start,end));    }    if ((digit >= 0) && (digit < radix)) {      int newResult=result * radix - digit;      if (newResult > result)       throw new NumberFormatException("Overflow parsing " + csq.subSequence(start,end));      result=newResult;    } else     if ((c == '-') && (i == start))     isNegative=true; else     if ((c == '+') && (i == start)) {    } else     break;  }  if ((result == 0) && ((end == 0) || (csq.charAt(i - 1) != '0')))   throw new NumberFormatException("Invalid integer representation for " + csq.subSequence(start,end));  if ((result == Integer.MIN_VALUE) && !isNegative)   throw new NumberFormatException("Overflow parsing " + csq.subSequence(start,end));  cursor.increment(i - start);  return isNegative ? result : -result;}  }
class C{  public boolean updateVersion(final Migration migration){  final Statement insert=QueryBuilder.insertInto(SCHEMA_VERSION_CF).value(TYPE,migration.getType().name()).value(VERSION,migration.getVersion()).value(TIMESTAMP,System.currentTimeMillis()).value(DESCRIPTION,migration.getDescription()).setConsistencyLevel(ConsistencyLevel.ALL);  try {    session.execute(insert);    return true;  } catch (  final Exception e) {    LOGGER.error("Failed to execute update version statement",e);    return false;  }}  }
class C{  protected static void println(Object o){  System.out.println(o);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public boolean has(String url){  final File transcriptDir=getTranscriptDir();  if (transcriptDir == null)   return false;  String hash=Sha1Util.SHA1(url);  File file=new File(transcriptDir,hash);  return file.exists();}  }
class C{  public Point2D calcCenter(final Point2D src,final Point2D tar){  double sourceX=src.getX();  double sourceY=src.getY();  double targetX=tar.getX();  double targetY=tar.getY();  double x=Math.abs(sourceX - targetX);  double y=Math.abs(sourceY - targetY);  double alpha=Math.atan(y / x);  double weightX=0;  double weightY=0;  int neuronOffset=NeuronNode.getDIAMETER() / 2;  if (sourceX < targetX) {    weightX=targetX - (neuronOffset * Math.cos(alpha));  } else {    weightX=targetX + (neuronOffset * Math.cos(alpha));  }  if (sourceY < targetY) {    weightY=targetY - (neuronOffset * Math.sin(alpha));  } else {    weightY=targetY + (neuronOffset * Math.sin(alpha));  }  return new Point2D.Double(weightX,weightY);}  }
class C{  public ODGDrawing(){}  }
class C{  public boolean isWritable(final int column) throws SQLException {  return !isReadOnly(column);}  }
class C{  public static boolean isSorted(int[] list){  for (int i=0; i < list.length - 1; i++) {    if (list[i] > list[i + 1])     return false;  }  return true;}  }
class C{  public static void forceDelete(File file) throws IOException {  if (file.isDirectory()) {    deleteDirectory(file);  } else {    Files.delete(file.toPath());  }}  }
class C{  public AssociationNotRegisteredException(String msg){  super(msg);}  }
class C{  public boolean isExclusiveQualifier(){  return isExclusive;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public OptionIntegerGUI_NB(){  initComponents();}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.legendShape,stream);}  }
class C{  public void PCDataAdded(String systemId,int lineNr) throws Exception {  this.delegate.PCDataAdded(systemId,lineNr);}  }
class C{  public void toggle(){  toggle(false,null,null);}  }
class C{  public void proposeMove(int time,int strategy){  IterativeDeepeningAlphaBetaSearch<ConnectFourState,Integer,String> search;  if (strategy == 0)   search=IterativeDeepeningAlphaBetaSearch.createFor(game,0.0,1.0,time); else   search=new ConnectFourAIPlayer(game,time);  if (enableLog)   search.setLogEnabled(true);  Integer action=search.makeDecision(currState);  searchMetrics=search.getMetrics();  currState=game.getResult(currState,action);  setChanged();  notifyObservers();}  }
class C{  public void optimize(SemIm semIm){  if (numRestarts < 1)   numRestarts=1;  if (numRestarts != 1) {    throw new IllegalArgumentException("Number of restarts must be 1 for this method.");  }  TetradMatrix sampleCovar=semIm.getSampleCovar();  if (sampleCovar == null) {    throw new NullPointerException("Sample covar has not been set.");  }  if (DataUtils.containsMissingValue(sampleCovar)) {    throw new IllegalArgumentException("Please remove or impute missing values.");  }  if (DataUtils.containsMissingValue(sampleCovar)) {    throw new IllegalArgumentException("Please remove or impute missing values.");  }  TetradLogger.getInstance().log("info","Trying EM...");  CovarianceMatrix cov=new CovarianceMatrix(semIm.getMeasuredNodes(),sampleCovar,semIm.getSampleSize());  SemGraph graph=semIm.getSemPm().getGraph();  Ricf.RicfResult result=new Ricf().ricf(graph,cov,0.001);  TetradMatrix bHat=new TetradMatrix(result.getBhat().toArray());  TetradMatrix lHat=new TetradMatrix(result.getLhat().toArray());  TetradMatrix oHat=new TetradMatrix(result.getOhat().toArray());  for (  Parameter param : semIm.getFreeParameters()) {    if (param.getType() == ParamType.COEF) {      int i=semIm.getSemPm().getVariableNodes().indexOf(param.getNodeA());      int j=semIm.getSemPm().getVariableNodes().indexOf(param.getNodeB());      semIm.setEdgeCoef(param.getNodeA(),param.getNodeB(),-bHat.get(j,i));    }    if (param.getType() == ParamType.VAR) {      int i=semIm.getSemPm().getVariableNodes().indexOf(param.getNodeA());      if (lHat.get(i,i) != 0) {        semIm.setErrVar(param.getNodeA(),lHat.get(i,i));      } else       if (oHat.get(i,i) != 0) {        semIm.setErrVar(param.getNodeA(),oHat.get(i,i));      }    }    if (param.getType() == ParamType.COVAR) {      int i=semIm.getSemPm().getVariableNodes().indexOf(param.getNodeA());      int j=semIm.getSemPm().getVariableNodes().indexOf(param.getNodeB());      if (lHat.get(i,i) != 0) {        semIm.setErrCovar(param.getNodeA(),param.getNodeB(),lHat.get(j,i));      } else       if (oHat.get(i,i) != 0) {        semIm.setErrCovar(param.getNodeA(),param.getNodeB(),oHat.get(j,i));      }    }  }  System.out.println(result);  System.out.println(semIm);}  }
class C{  private static boolean isAllUnderscores(){  int i=0;  boolean result=true;  while (result && (i < token.length())) {    if (token.charAt(i) != '_') {      result=false;    }    ;    i=i + 1;  }  ;  return result;}  }
class C{  public java.lang.String toString(){  return Integer.toString(value);}  }
class C{  public int length(){  return _length;}  }
class C{  public static CCTransitionScene transition(float t,CCScene s){  return new CCTransitionScene(t,s);}  }
class C{  boolean isSerializable(){  if (forceSerializable) {    return true;  }  for (  Type target : tree.targets) {    if (types.asSuper(target,syms.serializableType.tsym) != null) {      return true;    }  }  return false;}  }
class C{  public static AsymmetricKeyParameter createKey(PrivateKeyInfo keyInfo) throws IOException {  AlgorithmIdentifier algId=keyInfo.getPrivateKeyAlgorithm();  if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.rsaEncryption)) {    RSAPrivateKey keyStructure=RSAPrivateKey.getInstance(keyInfo.parsePrivateKey());    return new RSAPrivateCrtKeyParameters(keyStructure.getModulus(),keyStructure.getPublicExponent(),keyStructure.getPrivateExponent(),keyStructure.getPrime1(),keyStructure.getPrime2(),keyStructure.getExponent1(),keyStructure.getExponent2(),keyStructure.getCoefficient());  } else   if (algId.getAlgorithm().equals(PKCSObjectIdentifiers.dhKeyAgreement)) {    DHParameter params=DHParameter.getInstance(algId.getParameters());    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    BigInteger lVal=params.getL();    int l=lVal == null ? 0 : lVal.intValue();    DHParameters dhParams=new DHParameters(params.getP(),params.getG(),null,l);    return new DHPrivateKeyParameters(derX.getValue(),dhParams);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_dsa)) {    ASN1Integer derX=(ASN1Integer)keyInfo.parsePrivateKey();    ASN1Encodable de=algId.getParameters();    DSAParameters parameters=null;    if (de != null) {      DSAParameter params=DSAParameter.getInstance(de.toASN1Primitive());      parameters=new DSAParameters(params.getP(),params.getQ(),params.getG());    }    return new DSAPrivateKeyParameters(derX.getValue(),parameters);  } else   if (algId.getAlgorithm().equals(X9ObjectIdentifiers.id_ecPublicKey)) {    X962Parameters params=new X962Parameters((ASN1Primitive)algId.getParameters());    X9ECParameters x9;    if (params.isNamedCurve()) {      ASN1ObjectIdentifier oid=ASN1ObjectIdentifier.getInstance(params.getParameters());      x9=X962NamedCurves.getByOID(oid);      if (x9 == null) {        x9=SECNamedCurves.getByOID(oid);        if (x9 == null) {          x9=NISTNamedCurves.getByOID(oid);        }      }    } else {      x9=X9ECParameters.getInstance(params.getParameters());    }    ECPrivateKey ec=ECPrivateKey.getInstance(keyInfo.parsePrivateKey());    BigInteger d=ec.getKey();    ECDomainParameters dParams=new ECDomainParameters(x9.getCurve(),x9.getG(),x9.getN(),x9.getH(),x9.getSeed());    return new ECPrivateKeyParameters(d,dParams);  } else {    throw new RuntimeException("algorithm identifier in key not recognised");  }}  }
class C{  private final int threadHash(){  return Math.abs(Thread.currentThread().hashCode() % a.length);}  }
class C{  public void test_move() throws IOException, InterruptedException, ExecutionException {  final String name="testIndex";  final UUID indexUUID=UUID.randomUUID();{    final IndexMetadata indexMetadata=new IndexMetadata(name,indexUUID);    indexMetadata.setDeleteMarkers(true);    fed.registerIndex(indexMetadata,dataService0.getServiceUUID());  }  final PartitionLocator pmd0;{    final ClientIndexView ndx=(ClientIndexView)fed.getIndex(name,ITx.UNISOLATED);    final IMetadataIndex mdi=ndx.getMetadataIndex();    assertEquals("#index partitions",1,mdi.rangeCount());    pmd0=mdi.get(new byte[]{});    assertEquals("partitionId",0L,pmd0.getPartitionId());    assertEquals("dataServiceUUID",dataService0.getServiceUUID(),pmd0.getDataServiceUUID());  }  assertEquals("partitionCount",1,getPartitionCount(name));  final BTree groundTruth;{    final IndexMetadata indexMetadata=new IndexMetadata(indexUUID);    groundTruth=BTree.create(new TemporaryRawStore(),indexMetadata);  }  final int batchSize=5000;  long overflowCounter=dataService0.getAsynchronousOverflowCounter();  int npartitions=-1;{    if (log.isInfoEnabled())     log.info("Writing on indices to provoke overflow");    int nrounds=0;    long nwritten=0L;    while (npartitions < 2) {      final byte[][] keys=new byte[batchSize][];      final byte[][] vals=new byte[batchSize][];      for (int i=0; i < batchSize; i++) {        keys[i]=TestKeyBuilder.asSortKey(nwritten + i);        vals[i]=SerializerUtil.serialize(nwritten + i);      }      groundTruth.submit(0,batchSize,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);      dataService0.forceOverflow(false,false);      fed.getIndex(name,ITx.UNISOLATED).submit(0,batchSize,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);      overflowCounter=awaitAsynchronousOverflow(dataService0,overflowCounter);      assertEquals("rangeCount",groundTruth.getEntryCount(),fed.getIndex(name,ITx.UNISOLATED).rangeCount());      nrounds++;      nwritten+=batchSize;      npartitions=getPartitionCount(name);      if (log.isInfoEnabled())       log.info("Populating the index: overflowCounter=" + overflowCounter + ", nrounds="+ nrounds+ ", nwritten="+ nwritten+ ", nentries="+ groundTruth.getEntryCount()+ " ("+ fed.getIndex(name,ITx.UNISOLATED).rangeCount()+ "), npartitions="+ npartitions);      if (log.isInfoEnabled())       log.info("Verifying scale-out index against ground truth");      assertSameEntryIterator(groundTruth,fed.getIndex(name,ITx.UNISOLATED));    }  }  npartitions=getPartitionCount(name);  assertTrue("partitionCount=" + npartitions,npartitions >= 2);{    if (log.isInfoEnabled())     log.info("Setting up LBS for move.");    LoadBalancerService.log.setLevel(Level.INFO);    final AbstractEmbeddedLoadBalancerService lbs=((AbstractEmbeddedLoadBalancerService)((EmbeddedFederation)fed).getLoadBalancerService());    final ServiceScore[] fakeServiceScores=new ServiceScore[2];    fakeServiceScores[0]=new ServiceScore(AbstractStatisticsCollector.fullyQualifiedHostName,dataService0.getServiceUUID(),"dataService0",1.0);    fakeServiceScores[1]=new ServiceScore(AbstractStatisticsCollector.fullyQualifiedHostName,dataService1.getServiceUUID(),"dataService1",0.0);    lbs.setServiceScores(fakeServiceScores);  }{    if (log.isInfoEnabled())     log.info("Writing on indices to provoke overflow");{      final int nentries=5000;      final KV[] data=getRandomKeyValues(nentries);      final byte[][] keys=new byte[nentries][];      final byte[][] vals=new byte[nentries][];      for (int i=0; i < nentries; i++) {        keys[i]=data[i].key;        vals[i]=data[i].val;      }      groundTruth.submit(0,nentries,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);      dataService0.forceOverflow(false,true);      fed.getIndex(name,ITx.UNISOLATED).submit(0,nentries,keys,vals,BatchInsertConstructor.RETURN_NO_VALUES,null);      overflowCounter=awaitAsynchronousOverflow(dataService0,overflowCounter);      if (log.isInfoEnabled())       log.info("Verifying scale-out index against ground truth");      assertSameEntryIterator(groundTruth,fed.getIndex(name,ITx.UNISOLATED));    }  }{    int ndataService0=0;    int ndataService1=0;    final ITupleIterator<?> itr=new RawDataServiceTupleIterator(fed.getMetadataService(),MetadataService.getMetadataIndexName(name),ITx.READ_COMMITTED,true,null,null,0,IRangeQuery.DEFAULT,null);    int n=0;    while (itr.hasNext()) {      final PartitionLocator locator=(PartitionLocator)SerializerUtil.deserialize(itr.next().getValue());      if (log.isInfoEnabled())       log.info("locators[" + n + "]="+ locator);      if (locator.getDataServiceUUID().equals(dataService0.getServiceUUID())) {        ndataService0++;      } else       if (locator.getDataServiceUUID().equals(dataService1.getServiceUUID())) {        ndataService1++;      } else {        fail("Not expecting partition move to this service: " + locator);      }      n++;    }    if (log.isInfoEnabled()) {      log.info("npartitions=" + getPartitionCount(name));      log.info("npartitions(ds0)=" + ndataService0);      log.info("npartitions(ds1)=" + ndataService1);    }    assertEquals("#dataService0=" + ndataService0,1,ndataService0);    assertEquals("#dataService1=" + ndataService0,1,ndataService1);  }}  }
class C{  static public UniqueString resolveSynonym(UniqueString name){  Operator n=(Operator)DefinitionTable.get(name);  if (n == null)   return name; else   return n.getIdentifier();}  }
class C{  public JText(EText etext){  super();  JGraphic.fillOMGraphicParams(this,etext.egraphic);  setX(etext.p1.x);  setY(etext.p1.y);  setLat(etext.ll1.lat);  setLon(etext.ll1.lon);  setData(etext.data);  if (!etext.font.equals(""))   setFont(rebuildFont(etext.font));  setJustify(etext.justify);}  }
class C{  public StopWatch(String id){  this.id=id;}  }
class C{  public static boolean instanceOf(Class<?> objectClass,Object typeObject){  Class<?> typeClass=typeObject.getClass();  return instanceOf(objectClass,typeClass);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:49.116 -0500",hash_original_method="56302D274B0C35098461E26F41A371FE",hash_generated_method="8636066B283EEC770CB81C9AD3F3AA54") public boolean equals(Object o){  return (((getTaintInt() + o.getTaintInt())) == 1);}  }
class C{  private static Throwable assertNotNull(Throwable originalException){  if (originalException == null) {    throw new IllegalArgumentException("Original Exception for RemoteException must not be null.");  }  return originalException;}  }
class C{  public SelectionColorIcon(DrawingEditor editor,AttributeKey<Color> key,URL imageLocation,Shape colorShape){  super(imageLocation);  this.editor=editor;  this.key=key;  this.colorShape=colorShape;}  }
class C{  @Override final public void halt(final V v){  lock.lock();  try {    if (halt) {      return;    }    try {      halted.signalAll();      result=v;    }  finally {      halt=true;    }  }  finally {    lock.unlock();  }}  }
class C{  public static String valueOf(final Object value,final String... defaultValues){  if (value != null) {    return value.toString();  } else {    if (defaultValues != null) {      for (      String defaultValue : defaultValues) {        if (defaultValue != null) {          return defaultValue;        }      }    }    return String.valueOf(value);  }}  }
class C{  @Override public String toString(){  return " at " + this.index + " [character "+ this.character+ " line "+ this.line+ "]";}  }
class C{  public byte[] receiveSpecLenBytes(int len){  Log.d(TAG,"receiveSpecLenBytes() entrance: len = " + len);  try {    acquireLock();    mServerSocket.receive(mReceivePacket);    byte[] recDatas=Arrays.copyOf(mReceivePacket.getData(),mReceivePacket.getLength());    Log.d(TAG,"received len : " + recDatas.length);    for (int i=0; i < recDatas.length; i++) {      Log.e(TAG,"recDatas[" + i + "]:"+ recDatas[i]);    }    Log.e(TAG,"receiveSpecLenBytes: " + new String(recDatas));    if (recDatas.length != len) {      Log.w(TAG,"received len is different from specific len, return null");      return null;    }    return recDatas;  } catch (  IOException e) {    e.printStackTrace();  }  return null;}  }
class C{  public long modified(){  return this.data.readDateTimeAsLong(Offset.modified.offset);}  }
class C{  public String[] readAllStrings(){  String[] tokens=WHITESPACE_PATTERN.split(readAll());  if (tokens.length == 0 || tokens[0].length() > 0)   return tokens;  String[] decapitokens=new String[tokens.length - 1];  for (int i=0; i < tokens.length - 1; i++)   decapitokens[i]=tokens[i + 1];  return decapitokens;}  }
class C{  public static boolean isPooled(long memPtr){  return isPooled(flags(memPtr));}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return isHeadless() ? new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB) : getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public void extend(Assignment assign){  if (assign.isEmpty()) {    return;  }  groundings.stream().forEach(null);}  }
class C{  private void initialize(){  this.setContentPane(getJPanel());  this.setVisible(false);  this.setResizable(false);  this.setTitle(Constant.messages.getString("history.filter.title"));  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(600,300);  }  centreDialog();  this.getRootPane().setDefaultButton(btnApply);  this.pack();}  }
class C{  private MultivaluedMap<String,Object> resolveHeaders() throws StageException {  MultivaluedMap<String,Object> requestHeaders=new MultivaluedHashMap<>();  for (  Map.Entry<String,String> entry : conf.headers.entrySet()) {    List<Object> header=new ArrayList<>(1);    Object resolvedValue=headerEval.eval(headerVars,entry.getValue(),String.class);    header.add(resolvedValue);    requestHeaders.put(entry.getKey(),header);    hasher.putString(entry.getKey(),Charset.forName(conf.dataFormatConfig.charset));    hasher.putString(entry.getValue(),Charset.forName(conf.dataFormatConfig.charset));  }  return requestHeaders;}  }
class C{  private static void populateAvailableFonts(final DefaultMutableTreeNode top,final String filter){  if (FontMappings.fontSubstitutionTable != null) {    final Set<String> fonts=FontMappings.fontSubstitutionTable.keySet();    final Iterator<String> fontList=FontMappings.fontSubstitutionTable.keySet().iterator();    final int fontCount=fonts.size();    final ArrayList<String> fontNames=new ArrayList<String>(fontCount);    while (fontList.hasNext()) {      fontNames.add(fontList.next());    }    Collections.sort(fontNames);    String lowerCaseFilter="";    if (filter != null) {      lowerCaseFilter=filter.toLowerCase();    }    final java.util.List<String> location=new ArrayList<String>();    final java.util.List<DefaultMutableTreeNode> locationNode=new ArrayList<DefaultMutableTreeNode>();    for (    String nextFont : fontNames) {      String current=FontMappings.fontSubstitutionLocation.get(nextFont);      if (!FontMappings.fontPropertiesTablePath.containsKey(current)) {        continue;      }      if (sortFontsByDir) {        int ptr=current.lastIndexOf(System.getProperty("file.separator"));        if (ptr == -1 && current.indexOf('/') != -1) {          ptr=current.lastIndexOf('/');        }        if (ptr != -1) {          current=current.substring(0,ptr);        }      }      if (filter == null || nextFont.toLowerCase().contains(lowerCaseFilter)) {        final DefaultMutableTreeNode currentFontNode=new DefaultMutableTreeNode(nextFont + " = " + current);        if (sortFontsByDir) {          if (!location.contains(current)) {            location.add(current);            final DefaultMutableTreeNode loc=new DefaultMutableTreeNode(current);            top.add(loc);            locationNode.add(loc);          }          final int pos=location.indexOf(current);          locationNode.get(pos).add(currentFontNode);        } else {          top.add(currentFontNode);        }        addDetailsToCurrentNode(currentFontNode,nextFont);      }    }  }}  }
class C{  public static void logStackTrace(Level level,Throwable throwable){  logStackTrace(level,throwable,null);}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public T caseFault(Fault object){  return null;}  }
class C{  public boolean hasSeparateLargeIcons(){  return separateLargeIcons;}  }
class C{  public final void testGetP(){  DSAPrivateKeySpec dpks=new DSAPrivateKeySpec(new BigInteger("1"),new BigInteger("2"),new BigInteger("3"),new BigInteger("4"));  assertEquals(2,dpks.getP().intValue());}  }
class C{  protected void listadoconsultasnodisponiblesautorizadasExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionForward forward=listadoConsultaNoDisponibleAutorizadas(mapping,form,request,response);  setReturnActionFordward(request,forward);}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  return getBitmapSize(bitmap);}  }
class C{  @SmallTest public void testChangeCursorLive(){  SimpleCursorAdapter ca=new SimpleCursorAdapter(mContext,mLayout,mCursor2x2,mFrom,mTo);  assertEquals(2,ca.getCount());  ArrayList<ArrayList> data2=createTestList(5,2);  Cursor c2=createCursor(mFrom,data2);  ca.changeCursor(c2);  assertEquals(5,ca.getCount());}  }
class C{  public void added(Container cont){}  }
class C{  public static void fill(double[] a,int fromIndex,int toIndex,double val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public JAttributeTextArea(){}  }
class C{  public Dimension(final int index){  this.dimension=index;}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static TransactionInput fromWire(WireFormat.Reader reader) throws IOException {  return new Builder().source(new Outpoint(new TID(reader.readHash()),reader.readUint32())).script(Script.fromWire(reader)).sequence(reader.readUint32()).build();}  }
class C{  public TimeoutException(String arg0,Throwable arg1){  super(arg0,arg1);}  }
class C{  protected void sendMessage(boolean closed){  newKnownState(Turnout.UNKNOWN);  if (getInverted()) {    closed=!closed;  }  if ((masterObjectNumber) && (extended == 0)) {    EcosMessage m;    m=new EcosMessage("request(" + objectNumber + ", control)");    tc.sendEcosMessage(m,null);    m=new EcosMessage("set(" + objectNumber + ", state["+ (closed ? "0" : "1")+ "])");    tc.sendEcosMessage(m,null);    m=new EcosMessage("release(" + objectNumber + ", control)");    tc.sendEcosMessage(m,null);  } else {    boolean firststate;    boolean secondstate;    if (!masterObjectNumber) {      int turnaddr=_number - 1;      Turnout t=tm.getTurnout(prefix + "T" + turnaddr);      secondstate=closed;      if (t.getKnownState() == CLOSED) {        firststate=true;      } else {        firststate=false;      }    } else {      Turnout t=tm.getTurnout(slaveAddress);      firststate=closed;      if (t.getKnownState() == CLOSED) {        secondstate=true;      } else {        secondstate=false;      }    }    int setState=0;    if (extended == THREEWAY) {      if ((firststate) && (secondstate)) {        setState=0;      } else       if ((firststate) && (!secondstate)) {        setState=1;      } else {        setState=2;      }    } else     if (extended == DOUBLESLIP) {      if ((firststate) && (secondstate)) {        setState=0;      } else       if ((!firststate) && (!secondstate)) {        setState=1;      } else       if ((!firststate) && (secondstate)) {        setState=2;      } else {        setState=3;      }    }    if (setState == 99) {      if (closed) {        setCommandedState(THROWN);      } else {        setCommandedState(CLOSED);      }    } else {      EcosMessage m=new EcosMessage("request(" + objectNumber + ", control)");      tc.sendEcosMessage(m,this);      m=new EcosMessage("set(" + objectNumber + ", state["+ setState+ "])");      tc.sendEcosMessage(m,this);      m=new EcosMessage("release(" + objectNumber + ", control)");      tc.sendEcosMessage(m,this);    }  }}  }
class C{  void addDamage(int delta){  this.damage+=delta;}  }
class C{  public StateMachineState(S id,StateMachine<S,E> submachine){  super(id,null,null,null,null,submachine);  this.ids=new ArrayList<S>();  this.ids.add(id);}  }
class C{  protected BigDecimal calculateDuration(I_AD_WF_Node node,I_PP_Cost_Collector cc){  if (node == null) {    node=cc.getPP_Order_Node().getAD_WF_Node();  }  final I_AD_Workflow workflow=node.getAD_Workflow();  final double batchSize=workflow.getQtyBatchSize().doubleValue();  final double setupTime;  final double duration;  if (cc != null) {    setupTime=cc.getSetupTimeReal().doubleValue();    duration=cc.getDurationReal().doubleValue();  } else {    setupTime=node.getSetupTime();    duration=estimateWorkingTime(node).doubleValue();  }  double totalDuration;  if (batchSize > 0)   totalDuration=((setupTime / batchSize) + duration); else   totalDuration=setupTime + duration;  return BigDecimal.valueOf(totalDuration);}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ServiceRef_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_ServiceRef_name_feature","_UI_ServiceRef_type"),EipPackage.Literals.SERVICE_REF__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public StepBreakpointRemovedSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public In(String s){  try {    File file=new File(s);    if (file.exists()) {      scanner=new Scanner(file,CHARSET_NAME);      scanner.useLocale(LOCALE);      return;    }    URL url=getClass().getResource(s);    if (url == null) {      url=new URL(s);    }    URLConnection site=url.openConnection();    InputStream is=site.getInputStream();    scanner=new Scanner(new BufferedInputStream(is),CHARSET_NAME);    scanner.useLocale(LOCALE);  } catch (  IOException ioe) {    System.err.println("Could not open " + s);  }}  }
class C{  public void activateEncryption(){  this.encrypt=true;}  }
class C{  public void actionPerformed(ActionEvent e){  start.actionPerformed(e);  end.actionPerformed(e);}  }
class C{  @SuppressWarnings("unchecked") public static <T extends View>T findViewById(Activity context,int id){  T view=null;  View genericView=context.findViewById(id);  try {    view=(T)(genericView);  } catch (  Exception ex) {    String message="Can't cast view (" + id + ") to a "+ view.getClass()+ ".  Is actually a "+ genericView.getClass()+ ".";    Log.e("PercolateAndroidUtils",message);    throw new ClassCastException(message);  }  return view;}  }
class C{  public float update(float dtMs){  float dt=dtMs / mTimeTo90PercentMs;  float dts=dt * mSpringStiffness;  if (dts > 1.0f || dts < 0.0f) {    stop();    return mValue;  }  float delta=(mTarget - mValue);  float force=delta - 2.0f * mVelocity;  mVelocity+=force * dts;  mValue+=mVelocity * dts;  if (!isActive()) {    stop();  }  return mValue;}  }
class C{  @Override public Object execute(ExecutionEvent event) throws ExecutionException {  if (!HandlerUtil.matchesRadioState(event)) {    IWorkbenchPart part=HandlerUtil.getActivePart(event);    if (part instanceof SecuritySpecOutlineViewPart) {      SecuritySpecOutlineViewPart droidsafeView=(SecuritySpecOutlineViewPart)part;      String currentState=event.getParameter(RadioState.PARAMETER_ID);      droidsafeView.sortOutlineView(currentState);      HandlerUtil.updateRadioState(event.getCommand(),currentState);    }  }  return null;}  }
class C{  public static IndexedLagGraph serializableInstance(){  return new IndexedLagGraph(BasicLagGraph.serializableInstance());}  }
class C{  public static String createHistoryForScript(Script script,long when){  DateFormat dateFormat=new SimpleDateFormat("MM/dd/yyyy HH:mm:ss.SSS");  StringBuilder sb=new StringBuilder();  sb.append("Script Name: " + script.getName() + "\n");  sb.append("When: " + dateFormat.format(new Date(when)) + "\n");  sb.append(script.displayInputs());  sb.append(script.displayOutputs());  sb.append(script.displaySymbolTable());  return sb.toString();}  }
class C{  protected void expandAllPaths(TreePath path,TreeModel treeModel){  expandPath(path);  final Object node=path.getLastPathComponent();  final int n=treeModel.getChildCount(node);  for (int index=0; index < n; index++) {    final Object child=treeModel.getChild(node,index);    expandAllPaths(path.pathByAddingChild(child));  }}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  set(s.readDouble());}  }
class C{  private void updateUpdateFileList(){  StringBuilder updateList=new StringBuilder();  for (  String file : files) {    if (updateList.length() > 0) {      updateList.append(",");    }    if (file.indexOf("diff") > -1) {      updateList.append(file);    }  }  prop.put("update-file-list." + oldVersion,updateList.toString());}  }
class C{  public MockHttpSession(ServletContext servletContext){  this(servletContext,null);}  }
class C{  public MinLengthListener(Printer printer,ConstructLengths constructLengths,Set<Rules> enabledRules){  this.constructLengths=constructLengths;  this.printer=printer;  this.enabledRules=enabledRules;}  }
class C{  public static String generateFilename(TvShow tvShow,MediaFile mf){  return generateName("",tvShow,mf,true);}  }
class C{  protected Value createRGBColor(Value r,Value g,Value b){  return new RGBColorValue(r,g,b);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public boolean contains(int rX,int rY){  return x <= rX && y <= rY && x + size.getWidth() >= rX && y + size.getHeight() >= rY;}  }
class C{  public void add(Collection<Expression> triggerExpressions,final ConversationStates state,final ChatCondition condition,boolean secondary,final ConversationStates nextState,final String reply,final ChatAction action){  if (triggerExpressions != null && !triggerExpressions.isEmpty()) {    stateTransitionTable.add(new Transition(state,triggerExpressions,condition,secondary,nextState,reply,action));  }}  }
class C{  public boolean isConnected(short nodeId){  NodeConnection nc=connections.get(nodeId);  return (nc != null && nc.state == NodeConnectionState.CONNECTED);}  }
class C{  public int hashCode(){  long bits=1L;  bits=31L * bits + VecMathUtil.floatToIntBits(m00);  bits=31L * bits + VecMathUtil.floatToIntBits(m01);  bits=31L * bits + VecMathUtil.floatToIntBits(m02);  bits=31L * bits + VecMathUtil.floatToIntBits(m03);  bits=31L * bits + VecMathUtil.floatToIntBits(m10);  bits=31L * bits + VecMathUtil.floatToIntBits(m11);  bits=31L * bits + VecMathUtil.floatToIntBits(m12);  bits=31L * bits + VecMathUtil.floatToIntBits(m13);  bits=31L * bits + VecMathUtil.floatToIntBits(m20);  bits=31L * bits + VecMathUtil.floatToIntBits(m21);  bits=31L * bits + VecMathUtil.floatToIntBits(m22);  bits=31L * bits + VecMathUtil.floatToIntBits(m23);  bits=31L * bits + VecMathUtil.floatToIntBits(m30);  bits=31L * bits + VecMathUtil.floatToIntBits(m31);  bits=31L * bits + VecMathUtil.floatToIntBits(m32);  bits=31L * bits + VecMathUtil.floatToIntBits(m33);  return (int)(bits ^ (bits >> 32));}  }
class C{  public static <OUT>OUT deserialize(byte[] bytes,TypeSerializer<OUT> serializer) throws IOException {  ByteArrayInputStream bais=new ByteArrayInputStream(bytes);  final DataInputView input=new DataInputViewStreamWrapper(new DataInputStream(bais));  return serializer.deserialize(input);}  }
class C{  public String toXmlErrorMessage(boolean includeDebugInfo){  StringBuilder sb=new StringBuilder();  sb.append("<errors xmlns='http://schemas.google.com/g/2005'>\n");  for (  ServiceException sibling : siblings) {    addXmlError(sibling,sb,includeDebugInfo);  }  sb.append("</errors>\n");  return sb.toString();}  }
class C{  @Override public void write(URI f,URIChooser chooser) throws IOException {  Drawing drawing=view.getDrawing();  OutputFormat outputFormat=drawing.getOutputFormats().get(0);  outputFormat.write(f,drawing);}  }
class C{  protected ParameterizedCallExpressionImpl(){  super();}  }
class C{  @Pure @ShouldBePure public static String testParam3Good(Object in1,int in2){  Pure4J.immutable(in1);  return in1.toString();}  }
class C{  public IdentityArrayList(){  this(10);}  }
class C{  private float CADRG_calc_maxscale(){  return (float)Math.floor((1000000 * (float)CADRG_ARC_A[0]) / (width * 1.5f));}  }
class C{  public BlockHeight next(){  return new BlockHeight(this.getRaw() + 1);}  }
class C{  public PiecewiseConstantPopulation(Type units){  super(units);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static boolean isShape(RDFNode node){  if (node instanceof Resource) {    if (JenaUtil.hasIndirectType((Resource)node,SH.Shape)) {      return true;    } else     if (node.isAnon() && !((Resource)node).hasProperty(RDF.type)) {      if (node.getModel().contains(null,SH.shape,node) || node.getModel().contains(null,SH.filterShape,node)) {        return true;      }    }  }  return false;}  }
class C{  private int findRetrieveIndexFor(String fqn){  int size=size();  int min=0;  int max=size - 1;  while (max >= min) {    int mid=midpoint(min,max);    int compare=getAt(mid).getFQN().compareTo(fqn);    if (0 == compare) {      return mid;    }    min=(compare < 0) ? mid + 1 : min;    max=(compare > 0) ? mid - 1 : max;  }  return -1;}  }
class C{  public static void assertFalse(boolean condition){  assertTrue(!condition);}  }
class C{  private static StackSlot s(int offset){  return StackSlot.get(kind,-offset,true);}  }
class C{  public CScrollPane(Component view,int vsbPolicy,int hsbPolicy){  super(view,vsbPolicy,hsbPolicy);  setOpaque(false);  getViewport().setOpaque(false);}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public TLongLongHashMap(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  private void checkFaultTolerance(ParseException e) throws ParseException {  if (!isFaultTolerant) {    throw e;  }}  }
class C{  public PushDownDescriptor(){  super(IJavaRefactorings.PUSH_DOWN);}  }
class C{  private static float calculateScore(final int[] playCounts){  if (playCounts == null) {    return 0;  }  float score=0;  for (int i=0; i < Math.min(playCounts.length,NUM_WEEKS); i++) {    score+=playCounts[i] * getScoreMultiplierForWeek(i);  }  return score;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.YIELD_EXPRESSION__EXPRESSION:    setExpression((Expression)null);  return;case N4JSPackage.YIELD_EXPRESSION__MANY:setMany(MANY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public GridClientNodeImpl build(){  if (built)   throw new AssertionError("Instance already built.");  built=true;  return impl;}  }
class C{  public int measureTreeSize(){  return m_tree.numNodes();}  }
class C{  private void testPlot(){  ContinuousVariable c=new ContinuousVariable("test");  if (dataSet.getVariable("test") == null)   dataSet.addVariable(c);  ContinuousVariable c2=new ContinuousVariable("test2");  if (dataSet.getVariable("test2") == null)   dataSet.addVariable(c2);  this.selectedVariable=c;  int columnIndex=dataSet.getColumn(c);  Normal g=new Normal(1,1);  Exponential e=new Exponential(1);  double mean=0.0;  double sd=0.0;  this.minData=10000000000000.0;  this.maxData=0.0;  this.minComparison=1000000000000.0;  this.maxComparison=0.0;  for (int i=0; i < dataSet.getNumRows(); i++) {    double value=g.nextRandom();    double value2=e.nextRandom();    dataSet.setDouble(i,columnIndex,value);    dataSet.setDouble(i,columnIndex + 1,value2);    mean+=value;    if (value < this.minData)     this.minData=value;    if (value > this.maxData)     this.maxData=value;  }  NormalityTests.kolmogorovSmirnov(dataSet,c2);  for (int i=0; i < dataSet.getNumRows(); i++) {    for (int k=i; k < dataSet.getNumRows(); k++) {      if (dataSet.getDouble(i,columnIndex) > dataSet.getDouble(k,columnIndex)) {        double temp=dataSet.getDouble(i,columnIndex);        dataSet.setDouble(i,columnIndex,dataSet.getDouble(k,columnIndex));        dataSet.setDouble(k,columnIndex,temp);      }    }  }  if (mean == 0.0)   mean=1.0; else   mean/=dataSet.getNumRows();  for (int i=0; i < dataSet.getNumRows(); i++) {    sd+=(dataSet.getDouble(i,columnIndex) - mean) * (dataSet.getDouble(i,columnIndex) - mean);  }  if (sd == 0.0) {    sd=1.0;  } else {    sd/=dataSet.getNumRows() - 1.0;    sd=Math.sqrt(sd);  }  this.comparison=new cern.jet.random.Normal(mean,sd,new MersenneTwister());  calculateComparisonSet(this.comparison,this.dataSet);  if (this.minData < this.minComparison)   this.min=this.minData; else   this.min=this.minComparison;  if (this.maxData > this.maxComparison)   this.max=this.maxData; else   this.max=this.maxComparison;}  }
class C{  public GetSongs(ListType.Limits limits,String... properties){  super();  addParameterToRequest("limits",limits);  addParameterToRequest("properties",properties);}  }
class C{  protected AbstractFbWireService(WireServiceConnection connection,ProtocolDescriptor descriptor){  super(connection,new DefaultDatatypeCoder(connection.getEncodingFactory()));  protocolDescriptor=requireNonNull(descriptor,"parameter descriptor should be non-null");  wireOperations=descriptor.createWireOperations(connection,getServiceWarningCallback(),getSynchronizationObject());}  }
class C{  public StoredField(String name,int value){  super(name,TYPE);  fieldsData=value;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.shape,stream);  SerialUtilities.writePaint(this.fillPaint,stream);  SerialUtilities.writePaint(this.outlinePaint,stream);  SerialUtilities.writeStroke(this.outlineStroke,stream);  SerialUtilities.writeShape(this.line,stream);  SerialUtilities.writePaint(this.linePaint,stream);  SerialUtilities.writeStroke(this.lineStroke,stream);}  }
class C{  public int matchRowIndex(String regexp,int column){  checkColumn(column);  if (columnTypes[column] == STRING) {    String[] stringData=(String[])columns[column];    for (int row=0; row < rowCount; row++) {      if (stringData[row] != null && PApplet.match(stringData[row],regexp) != null) {        return row;      }    }  } else {    for (int row=0; row < rowCount; row++) {      String str=getString(row,column);      if (str != null && PApplet.match(str,regexp) != null) {        return row;      }    }  }  return -1;}  }
class C{  public float curveTangent(float a,float b,float c,float d,float t){  return g.curveTangent(a,b,c,d,t);}  }
class C{  public int addPadding(byte[] in,int inOff){  byte code=(byte)(in.length - inOff);  while (inOff < (in.length - 1)) {    in[inOff]=(byte)random.nextInt();    inOff++;  }  in[inOff]=code;  return code;}  }
class C{  ThreadLocalMap(ThreadLocal<?> firstKey,Object firstValue){  table=new Entry[INITIAL_CAPACITY];  int i=firstKey.threadLocalHashCode & (INITIAL_CAPACITY - 1);  table[i]=new Entry(firstKey,firstValue);  size=1;  setThreshold(INITIAL_CAPACITY);}  }
class C{  public void testGetF22(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF22();  assertEquals(expResult,result);}  }
class C{  public static boolean validateSchedulePolicyParam(SchedulePolicyParam schedule,SchedulePolicy schedulePolicy,StringBuilder errorMsg){  if (schedule != null) {    if (!ArgValidator.isValidEnum(schedule.getScheduleFrequency(),ScheduleFrequency.class)) {      errorMsg.append("Schedule frequency: " + schedule.getScheduleFrequency() + " is invalid. Valid schedule frequencies are days, weeks and months");      return false;    }    if (schedule.getScheduleRepeat() < 1) {      errorMsg.append("required parameter schedule_repeat is missing or value: " + schedule.getScheduleRepeat() + " is invalid");      return false;    }    String period=" PM";    int hour, minute;    boolean isValid=true;    if (schedule.getScheduleTime().contains(":")) {      String splitTime[]=schedule.getScheduleTime().split(":");      hour=Integer.parseInt(splitTime[0]);      minute=Integer.parseInt(splitTime[1]);      if (splitTime[0].startsWith("-") || splitTime[1].startsWith("-")) {        isValid=false;      }    } else {      hour=Integer.parseInt(schedule.getScheduleTime());      minute=0;    }    if (isValid && (hour >= 0 && hour < 24) && (minute >= 0 && minute < 60)) {      if (hour < 12) {        period=" AM";      }    } else {      errorMsg.append("Schedule time: " + schedule.getScheduleTime() + " is invalid");      return false;    }    ScheduleFrequency scheduleFreq=ScheduleFrequency.valueOf(schedule.getScheduleFrequency().toUpperCase());switch (scheduleFreq) {case DAYS:      schedulePolicy.setScheduleRepeat((long)schedule.getScheduleRepeat());    schedulePolicy.setScheduleTime(schedule.getScheduleTime() + period);  if (schedulePolicy.getScheduleDayOfWeek() != null && !schedulePolicy.getScheduleDayOfWeek().isEmpty()) {    schedulePolicy.setScheduleDayOfWeek(NullColumnValueGetter.getNullStr());  }if (schedulePolicy.getScheduleDayOfMonth() != null) {  schedulePolicy.setScheduleDayOfMonth(0L);}break;case WEEKS:schedulePolicy.setScheduleRepeat((long)schedule.getScheduleRepeat());if (schedule.getScheduleDayOfWeek() != null && !schedule.getScheduleDayOfWeek().isEmpty()) {List<String> weeks=Arrays.asList("monday","tuesday","wednesday","thursday","friday","saturday","sunday");if (weeks.contains(schedule.getScheduleDayOfWeek().toLowerCase())) {schedulePolicy.setScheduleDayOfWeek(schedule.getScheduleDayOfWeek().toLowerCase());} else {errorMsg.append("Schedule day of week: " + schedule.getScheduleDayOfWeek() + " is invalid");return false;}} else {errorMsg.append("required parameter schedule_day_of_week was missing or empty");return false;}schedulePolicy.setScheduleTime(schedule.getScheduleTime() + period);if (schedulePolicy.getScheduleDayOfMonth() != null) {schedulePolicy.setScheduleDayOfMonth(0L);}break;case MONTHS:if (schedule.getScheduleDayOfMonth() > 0 && schedule.getScheduleDayOfMonth() <= 31) {schedulePolicy.setScheduleDayOfMonth((long)schedule.getScheduleDayOfMonth());schedulePolicy.setScheduleRepeat((long)schedule.getScheduleRepeat());schedulePolicy.setScheduleTime(schedule.getScheduleTime() + period);if (schedulePolicy.getScheduleDayOfWeek() != null) {schedulePolicy.setScheduleDayOfWeek(NullColumnValueGetter.getNullStr());}} else {errorMsg.append("required parameter schedule_day_of_month is missing or value: " + schedule.getScheduleDayOfMonth() + " is invalid");return false;}break;default :return false;}}return true;}  }
class C{  public void opc_goto(Label l){  short instrBCI=getLength();  emitByte(opc_goto);  l.add(this,instrBCI,getLength(),getStack());  emitShort((short)-1);}  }
class C{  public MOEAD(Problem problem,int neighborhoodSize,WeightGenerator weightGenerator,Initialization initialization,Variation variation,double delta,double eta,int updateUtility){  super(problem);  this.neighborhoodSize=neighborhoodSize;  this.weightGenerator=weightGenerator;  this.initialization=initialization;  this.variation=variation;  this.delta=delta;  this.eta=eta;  this.updateUtility=updateUtility;}  }
class C{  public TempStream copy(){  TempStream newStream=new TempStream();  TempBuffer ptr=_head;  for (; ptr != null; ptr=ptr.next()) {    TempBuffer newPtr=TempBuffer.create();    if (newStream._tail != null)     newStream._tail.next(newPtr); else     newStream._head=newPtr;    newStream._tail=newPtr;    newPtr.write(ptr.buffer(),0,ptr.length());  }  return newStream;}  }
class C{  public void resume(){  if (isPausing) {    mAudioManager.abandonAudioFocus(mAfChangeListener);    if (mIsMuteStream && mCurrentVolume > 0) {      mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC,mCurrentVolume,0);    }    isPausing=false;  }}  }
class C{  @Override public void datasetChanged(DatasetChangeEvent event){  super.datasetChanged(event);  if (this.subplots == null) {    return;  }  XYDataset dataset=null;  if (event.getDataset() instanceof XYDataset) {    dataset=(XYDataset)event.getDataset();  }  for (  XYPlot subplot : this.subplots) {    if (subplot.indexOf(dataset) >= 0) {      subplot.configureRangeAxes();    }  }}  }
class C{  public static String extractMusicIDFromMediaID(@NonNull String mediaID){  int pos=mediaID.indexOf(LEAF_SEPARATOR);  if (pos >= 0) {    return mediaID.substring(pos + 1);  }  return null;}  }
class C{  public boolean paintRable(Graphics2D g2d){  Composite c=g2d.getComposite();  if (!SVGComposite.OVER.equals(c))   return false;  if (getCompositeRule() != CompositeRule.OVER)   return false;  ColorSpace crCS=getOperationColorSpace();  ColorSpace g2dCS=GraphicsUtil.getDestinationColorSpace(g2d);  if ((g2dCS == null) || (g2dCS != crCS)) {    return false;  }  Iterator i=getSources().iterator();  while (i.hasNext()) {    GraphicsUtil.drawImage(g2d,(Filter)i.next());  }  return true;}  }
class C{  public void init(){  initOriginEnd();  setSlicing();  if (gridVisible) {    setLightLines();    setLightLabels();  }}  }
class C{  void unlink(Node<E> p,Node<E> trail){  p.setValue(null);  trail.next=p.next;  if (last == p)   last=trail;  if (count.getAndDecrement() == capacity)   notFull.signal();}  }
class C{  public static ColorWithEnum newInstance(ColorEnum colorEnum){  ColorWithEnum colorWithEnum=new ColorWithEnum();  colorWithEnum.colorEnum=colorEnum;  return colorWithEnum;}  }
class C{  public int hashCode(){  return super.hashCode() ^ (the_symbol() == null ? 0 : the_symbol().hashCode());}  }
class C{  public static BigInteger[] signAndFromatToRS(PrivateKey priv,byte[] input){  X9ECParameters params=SECNamedCurves.getByName("secp256r1");  ECDomainParameters ecParams=new ECDomainParameters(params.getCurve(),params.getG(),params.getN(),params.getH());  if (priv == null)   throw new IllegalStateException("This ECKey does not have the private key necessary for signing.");  ECDSASigner signer=new ECDSASigner();  ECPrivateKeyParameters privKey=new ECPrivateKeyParameters(((ECPrivateKey)priv).getS(),ecParams);  signer.init(true,privKey);  BigInteger[] sigs=signer.generateSignature(input);  return sigs;}  }
class C{  private static boolean validDelete(Node x,Node y,Set<Node> h,Graph graph){  List<Node> naYXH=findNaYX(x,y,graph);  naYXH.removeAll(h);  return isClique(naYXH,graph);}  }
class C{  public Kita(){  super(2,2,3);}  }
class C{  @Override public String initialize(){  String result;  int i;  result=null;  m_Current=0;  for (i=0; i < m_Providers.length; i++) {    result=m_Providers[i].initialize();    if (result != null) {      result="Provider #" + (i + 1) + ": "+ result;      break;    }  }  return result;}  }
class C{  protected synchronized void invalidateCache(){  sortedListeners=null;}  }
class C{  protected static String obtenerPlantillaJustificante(String path,String idioma) throws RegistroTelematicoException {  String jasperPath=path + System.getProperty("file.separator") + "plantilla_"+ idioma+ ".jasper";  File plantillaFile=new File(jasperPath);  if ((plantillaFile == null) || (!plantillaFile.exists())) {    jasperPath=path + System.getProperty("file.separator") + "plantilla.jasper";    plantillaFile=new File(jasperPath);    if ((plantillaFile == null) || (!plantillaFile.exists())) {      logger.error("La plantilla del justificante no existe en el path: " + jasperPath);      throw new RegistroTelematicoException("Error al generar el justificante de presentacion de la solicitud de registro");    }  }  return jasperPath;}  }
class C{  public ArrayFileReader(String arrayFilename){  filename=arrayFilename;}  }
class C{  public boolean isResetOnSample(){  return this.isReset;}  }
class C{  public void launch(List<String> str) throws IOException {  if (!service.version().onLaunch(options.getLaunchVersion()))   return;  if (StrUtils.isNotBlank(options.getPrecalledCommand())) {    Process p=Runtime.getRuntime().exec(options.getPrecalledCommand());    try {      if (p.isAlive())       p.waitFor();    } catch (    InterruptedException ex) {      HMCLog.warn("Failed to invoke precalled command",ex);    }  }  HMCLog.log("Starting process");  HMCLog.log(str.toString());  ProcessBuilder builder=new ProcessBuilder(str);  if (options.getLaunchVersion() == null || service.baseDirectory() == null)   throw new Error("Fucking bug!");  builder.redirectErrorStream(true).directory(service.version().getRunDirectory(options.getLaunchVersion())).environment().put("APPDATA",service.baseDirectory().getAbsolutePath());  JavaProcess jp=new JavaProcess(str,builder.start(),PROCESS_MANAGER);  HMCLog.log("Have started the process");  launchEvent.execute(jp);}  }
class C{  public final Iterator<KnowledgeEdge> requiredEdgesIterator(){  return Collections.unmodifiableSet(this.allRequiredEdges).iterator();}  }
class C{  protected final void writeChildren(final XmlWriter writer){  writer.startElement("children");  try {    writeChildrenImpl(writer);  }  finally {    writer.endElement();  }}  }
class C{  public void remove(String key){  mValues.remove(key);}  }
class C{  public static int toInt(byte[] bytes){  return toInt(bytes[0],bytes[1],bytes[2],bytes[3]);}  }
class C{  public ClassPathResource(ClassLoader classLoader,String mimetype,String path){  super(mimetype);  this.classLoader=classLoader;  this.path=path;}  }
class C{  private void vanishGeneratedSources(){  final PsiShortNamesCache cache=PsiShortNamesCache.getInstance(myProject);  final PsiMethod[] methods=cache.getMethodsByName(AsmCodeGenerator.SETUP_METHOD_NAME,GlobalSearchScope.projectScope(myProject));  CodeInsightUtil.preparePsiElementsForWrite(methods);  for (int i=0; i < methods.length; i++) {    final PsiMethod method=methods[i];    final PsiClass aClass=method.getContainingClass();    if (aClass != null) {      try {        final PsiFile psiFile=aClass.getContainingFile();        LOG.assertTrue(psiFile != null);        final VirtualFile vFile=psiFile.getVirtualFile();        LOG.assertTrue(vFile != null);        myProgressWindow.setText(UIDesignerBundle.message("progress.converting",vFile.getPresentableUrl()));        myProgressWindow.setFraction(((double)i) / ((double)methods.length));        if (vFile.isWritable()) {          FormSourceCodeGenerator.cleanup(aClass);        }      } catch (      IncorrectOperationException e) {        LOG.error(e);      }    }  }}  }
class C{  public StreamNegotiator negotiateOutgoingTransfer(final String userID,final String streamID,final String fileName,final long size,final String desc,int responseTimeout) throws XMPPException {  StreamInitiation si=new StreamInitiation();  si.setSesssionID(streamID);  si.setMimeType(URLConnection.guessContentTypeFromName(fileName));  StreamInitiation.File siFile=new StreamInitiation.File(fileName,size);  siFile.setDesc(desc);  si.setFile(siFile);  si.setFeatureNegotiationForm(createDefaultInitiationForm());  si.setFrom(connection.getUser());  si.setTo(userID);  si.setType(IQ.Type.SET);  PacketCollector collector=connection.createPacketCollector(new PacketIDFilter(si.getPacketID()));  connection.sendPacket(si);  Packet siResponse=collector.nextResult(responseTimeout);  collector.cancel();  if (siResponse instanceof IQ) {    IQ iqResponse=(IQ)siResponse;    if (iqResponse.getType().equals(IQ.Type.RESULT)) {      StreamInitiation response=(StreamInitiation)siResponse;      return getOutgoingNegotiator(getStreamMethodField(response.getFeatureNegotiationForm()));    } else     if (iqResponse.getType().equals(IQ.Type.ERROR)) {      throw new XMPPException(iqResponse.getError());    } else {      throw new XMPPException("File transfer response unreadable");    }  } else {    return null;  }}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  public static String nodeSubTypeToString(int subType){  String val="?";switch (subType) {case NodeRepresentation.AND_TYPE:    val="AND_TYPE";  break;case NodeRepresentation.OR_TYPE:val="OR_TYPE";break;case NodeRepresentation.IMPLIES_TYPE:val="IMPLIES_TYPE";break;case NodeRepresentation.FORALL_TYPE:val="FORALL_TYPE";break;case NodeRepresentation.EXISTS_TYPE:val="EXISTS_TYPE";break;case NodeRepresentation.SQSUB_TYPE:val="SQSUB_TYPE";break;case NodeRepresentation.OTHER_TYPE:val="OTHER_TYPE";break;}return val;}  }
class C{  public static void showNodes(final Window parent,final ZyGraph graph,final Collection<NaviNode> nodes,final boolean visible){  Preconditions.checkNotNull(parent,"IE02123: Parent argument can not be null");  Preconditions.checkNotNull(graph,"IE02124: Graph argument can not be null");  Preconditions.checkNotNull(nodes,"IE02125: Nodes argument can not be null");  if (visible) {    final ZyGraphViewSettings settings=graph.getSettings();    final Set<NaviNode> neighbours=ProximityRangeCalculator.getNeighbors(graph,nodes,settings.getProximitySettings().getProximityBrowsingChildren(),settings.getProximitySettings().getProximityBrowsingParents());    neighbours.addAll(nodes);    final int invisibleNodes=countInvisibleNodes(neighbours);    if (userCancelsMakingVisible(parent,graph,invisibleNodes)) {      return;    }  }  graph.showNodes(nodes,visible);}  }
class C{  private TreeDecoder.Node rebuildTree(final LevelNode n){  if (n == null)   return null;  if (n.symbol != -1)   return new TreeDecoder.LeafNode(n.symbol);  TreeDecoder.Node newNode=new TreeDecoder.Node();  newNode.left=rebuildTree((LevelNode)n.left);  newNode.right=rebuildTree((LevelNode)n.right);  return newNode;}  }
class C{  public boolean makeReflective(CtClass clazz,CtClass metaobject,CtClass metaclass) throws CannotCompileException, CannotReflectException, NotFoundException {  if (clazz.isInterface())   throw new CannotReflectException("Cannot reflect an interface: " + clazz.getName());  if (clazz.subclassOf(classPool.get(classMetaobjectClassName)))   throw new CannotReflectException("Cannot reflect a subclass of ClassMetaobject: " + clazz.getName());  if (clazz.subclassOf(classPool.get(metaobjectClassName)))   throw new CannotReflectException("Cannot reflect a subclass of Metaobject: " + clazz.getName());  registerReflectiveClass(clazz);  return modifyClassfile(clazz,metaobject,metaclass);}  }
class C{  void reset(){  System.arraycopy(iv,0,r,0,blockSize);}  }
class C{  public void testJsp() throws Exception {  final URL url=new URL("http://localhost:" + System.getProperty("http.port") + "/simple-war/index.jsp");  final String expected="Sample page for testing";  PingUtils.assertPingTrue(url.getPath() + " not started",expected,url,logger);}  }
class C{  public OptionSet removeETag(byte[] etag){  getETags().remove(etag);  return this;}  }
class C{  protected void endDrawing(DrawContext dc){  GL2 gl=dc.getGL().getGL2();  this.BEogsh.pop(gl);}  }
class C{  public static Integer parse(LuaValue colorValue){  return parse(colorValue,null);}  }
class C{  public static boolean addLastCause(@Nullable Throwable e,@Nullable Throwable cause,IgniteLogger log){  if (e == null || cause == null)   return false;  for (Throwable t=e; t != null; t=t.getCause()) {    if (t == cause)     return false;    if (t.getCause() == null || t.getCause() == t) {      try {        t.initCause(cause);      } catch (      IllegalStateException ignored) {        error(log,"Failed to add cause to the end of cause chain (cause is printed here but will " + "not be propagated to callee): " + e,"Failed to add cause to the end of cause chain: " + e,cause);      }      return true;    }  }  return false;}  }
class C{  @Override public QueueBrowser createBrowser(final Queue queue,final String messageSelector) throws JMSException {  if (cri.getType() == ActiveMQRAConnectionFactory.TOPIC_CONNECTION || cri.getType() == ActiveMQRAConnectionFactory.XA_TOPIC_CONNECTION) {    throw new IllegalStateException("Cannot create browser for javax.jms.TopicSession");  }  Session session=getSessionInternal();  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createBrowser " + session + " queue="+ queue+ " selector="+ messageSelector);  }  QueueBrowser result=session.createBrowser(queue,messageSelector);  if (ActiveMQRASession.trace) {    ActiveMQRALogger.LOGGER.trace("createdBrowser " + session + " browser="+ result);  }  return result;}  }
class C{  public CategorizedTextEditGroup(String name,GroupCategorySet groupCategories){  super(name);  Assert.isNotNull(groupCategories);  fGroupCategories=groupCategories;}  }
class C{  @Override public void introspect(ContextH3 context){}  }
class C{  private void serializeComponents(final WorkspaceComponentSerializer serializer,final ArchiveContents archive,final ZipOutputStream zipStream) throws IOException {  for (  WorkspaceComponent component : workspace.getComponentList()) {    ArchiveContents.ArchivedComponent archiveComp=archive.addComponent(component);    ZipEntry entry=new ZipEntry(archiveComp.getUri());    zipStream.putNextEntry(entry);    serializer.serializeComponent(component);    GuiComponent<?> desktopComponent=SimbrainDesktop.getDesktop(workspace).getDesktopComponent(component);    if (desktopComponent != null) {      ArchiveContents.ArchivedComponent.ArchivedDesktopComponent dc=archiveComp.addDesktopComponent(desktopComponent);      entry=new ZipEntry(dc.getUri());      zipStream.putNextEntry(entry);      desktopComponent.save(zipStream);    }  }}  }
class C{  @Override public String toString(){  return "Triangle: side1 = " + side1 + " side2 = "+ side2+ " side3 = "+ side3;}  }
class C{  public Dimension maximumLayoutSize(Container parent){  return calculateLayoutSize(parent,'M');}  }
class C{  public static void addEnvironmentListener(EnvLoaderListener listener,ClassLoader loader){  for (; loader != null; loader=loader.getParent()) {    if (loader instanceof EnvironmentClassLoader) {      ((EnvironmentClassLoader)loader).addListener(listener);      return;    }  }  _globalEnvironmentListeners.add(listener);}  }
class C{  public void breakpointReached(BreakpointEvent event){  println("Got BreakpointEvent");  longValue=thisObject.getValue(longCheckField);  booleanValue=thisObject.getValue(booleanCheckField);  objectValue=thisObject.getValue(objectCheckField);  voidValue=thisObject.getValue(voidCheckField);}  }
class C{  public void delete(Object key){  memoryCache.remove(key);  weakCache.remove(key);  Vector storageCacheContent=getStorageCacheContent();  int s=storageCacheContent.size();  for (int iter=0; iter < s; iter++) {    Object[] obj=(Object[])storageCacheContent.elementAt(iter);    if (obj[1].equals(key)) {      Storage.getInstance().deleteStorageFile("$CACHE$" + cachePrefix + key.toString());      obj[0]=new Long(Long.MIN_VALUE);      obj[1]=obj[0];      Storage.getInstance().writeObject("$CACHE$Idx" + cachePrefix,storageCacheContent);      return;    }  }}  }
class C{  public static APOptions parse(DerInputStream data,byte explicitTag,boolean optional) throws Asn1Exception, IOException {  if ((optional) && (((byte)data.peekByte() & (byte)0x1F) != explicitTag))   return null;  DerValue der=data.getDerValue();  if (explicitTag != (der.getTag() & (byte)0x1F)) {    throw new Asn1Exception(Krb5.ASN1_BAD_ID);  } else {    DerValue subDer=der.getData().getDerValue();    return new APOptions(subDer);  }}  }
class C{  public void putAsString(String key,long value){  String strValue=Long.valueOf(value).toString();  super.put(key,strValue);}  }
class C{  public MarkerDescription(IMarker marker) throws CoreException {  this.type=marker.getType();  this.attributes=marker.getAttributes();  this.resource=marker.getResource();}  }
class C{  public int cacheFlagsOn(){  return cacheFlagsOn;}  }
class C{  public CannotFindMethodException(Type t,SootMethod method){  super(String.format("Cannot find or resolve method %s with type of receiver %s.",method,t));}  }
class C{  public static InspectNetworkParams create(@NotNull String netId){  return new InspectNetworkParams().withNetworkId(netId);}  }
class C{  public static boolean isValidPortNumber(int port){  return MIN_PORT_NUMBER < port && port < MAX_PORT_NUMBER;}  }
class C{  public GroupingSearch disableCaching(){  this.maxCacheRAMMB=null;  this.maxDocsToCache=null;  return this;}  }
class C{  public CommitConflictException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public static String middle(String source,String start,String end){  String one=StringUtils.right(source,start);  return StringUtils.leftBack(one,end);}  }
class C{  private void commit(){  Vector<EntityAction> newAttacks=new Vector<EntityAction>();  for (Enumeration<AbstractEntityAction> e=attacks.elements(); e.hasMoreElements(); ) {    AbstractEntityAction o=e.nextElement();    if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      Entity attacker=waa.getEntity(getClient().getGame());      Targetable target=waa.getTarget(getClient().getGame());      boolean curInFrontArc=Compute.isInArc(attacker.getPosition(),attacker.getSecondaryFacing(),target,attacker.getForwardArc());      if (curInFrontArc) {        WeaponAttackAction waa2=new WeaponAttackAction(waa.getEntityId(),waa.getTargetType(),waa.getTargetId(),waa.getWeaponId());        waa2.setAimedLocation(waa.getAimedLocation());        waa2.setAimingMode(waa.getAimingMode());        waa2.setOtherAttackInfo(waa.getOtherAttackInfo());        newAttacks.addElement(waa2);      }    } else {      newAttacks.addElement(o);    }  }  for (Enumeration<AbstractEntityAction> e=attacks.elements(); e.hasMoreElements(); ) {    Object o=e.nextElement();    if (o instanceof WeaponAttackAction) {      WeaponAttackAction waa=(WeaponAttackAction)o;      Entity attacker=waa.getEntity(getClient().getGame());      Targetable target=waa.getTarget(getClient().getGame());      boolean curInFrontArc=Compute.isInArc(attacker.getPosition(),attacker.getSecondaryFacing(),target,attacker.getForwardArc());      if (!curInFrontArc) {        WeaponAttackAction waa2=new WeaponAttackAction(waa.getEntityId(),waa.getTargetType(),waa.getTargetId(),waa.getWeaponId());        waa2.setAimedLocation(waa.getAimedLocation());        waa2.setAimingMode(waa.getAimingMode());        waa2.setOtherAttackInfo(waa.getOtherAttackInfo());        newAttacks.addElement(waa2);      }    }  }  getClient().sendAttackData(cen,newAttacks);  attacks.removeAllElements();}  }
class C{  public SidedPlane(final Vector p,final Vector A,final double BX,final double BY,final double BZ){  super(A,BX,BY,BZ);  sigNum=Math.signum(evaluate(p));  if (sigNum == 0.0)   throw new IllegalArgumentException("Cannot determine sidedness because check point is on plane.");}  }
class C{  public void clearCache(){  clearMemoryCache();  clearDiskCache();}  }
class C{  static double simpleAngle(Geo p1,Geo p2){  return Math.acos(p1.dot(p2) / (p1.length() * p2.length()));}  }
class C{  public final void clearSelection(){  getSelection().clear();}  }
class C{  public SignatureVisitor visitTypeArgument(char wildcard){  return this;}  }
class C{  @Override public boolean isResponsible(Class<?> clazz){  return true;}  }
class C{  public static void testVisibleChildParentDispose() throws Exception {  JFrame f=new JFrame();  JDialog dlg=new JDialog(f);  Listener l=new Listener();  dlg.addWindowListener(l);  dlg.setVisible(true);  f.dispose();  waitEvents();  assertEquals(1,l.getCount());}  }
class C{  public boolean isEmpty(){  return length == 0;}  }
class C{  public void disconnectContainerFromNetwork(DisconnectContainerFromNetworkParams params) throws IOException {  byte[] entityBytesArray=toJson(params.getDisconnectContainer()).getBytes(StandardCharsets.UTF_8);  try (DockerConnection connection=connectionFactory.openConnection(dockerDaemonUri).method("POST").path(apiVersionPathPrefix + "/networks/" + params.getNetworkId()+ "/disconnect").header("Content-Type",MediaType.APPLICATION_JSON).header("Content-Length",entityBytesArray.length).entity(entityBytesArray)){    final DockerResponse response=connection.request();    if (response.getStatus() / 100 != 2) {      throw getDockerException(response);    }  } }  }
class C{  private void enterEditMode(final int register){  requestFocusInWindow();  m_caret.setVisible(true);  m_editedRegister=register;  m_caretPosition=0;  m_editValue=m_registerModel.getRegisterInformation(register).getValue();  repaint();}  }
class C{  public static void writeToEntityXml(String fileName,DataFile dataFile) throws DataFileException {  File file=new File(fileName);  BufferedWriter outFile=null;  try {    outFile=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(file),"UTF-8"));  } catch (  Exception e) {    throw new DataFileException("Could not open file " + fileName,e);  }  try {    outFile.write("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");    outFile.newLine();    outFile.write("<entity-engine-xml>");    outFile.newLine();    for (    Record record : dataFile.getRecords()) {      ModelRecord modelRecord=record.getModelRecord();      outFile.write("<" + modelRecord.name + " ");      for (      ModelField modelField : modelRecord.fields) {        if (modelField.ignored)         continue;        Object value=record.get(modelField.name);        if (value == null) {          value=modelField.defaultValue;        }        if (value instanceof String) {          value=((String)value).trim();          if (((String)value).length() == 0) {            value=modelField.defaultValue;          }        }        if (value != null) {          if (value instanceof String) {            outFile.write(modelField.name + "=\"" + UtilFormatOut.encodeXmlValue((String)value)+ "\" ");          } else {            outFile.write(modelField.name + "=\"" + value+ "\" ");          }        }      }      outFile.write("/>");      outFile.newLine();    }    outFile.write("</entity-engine-xml>");    outFile.close();  } catch (  IOException e) {    throw new DataFileException("Error writing to file " + fileName,e);  }}  }
class C{  protected void createNonCGSRDFActiveModeVolumes(Workflow workflow,String waitFor,List<VolumeDescriptor> sourceDescriptors,List<VolumeDescriptor> targetDescriptors,Map<URI,Volume> uriVolumeMap){  RemoteDirectorGroup group=getRAGroup(targetDescriptors,uriVolumeMap);  StorageSystem system=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri());  StorageSystem targetSystem=dbClient.queryObject(StorageSystem.class,group.getRemoteStorageSystemUri());  Set<String> volumesInRDFGroupsOnProvider=findVolumesPartOfRDFGroups(system,group);  if (group.getVolumes() == null) {    group.setVolumes(new StringSet());  }  if ((group.getVolumes().isEmpty() && !volumesInRDFGroupsOnProvider.isEmpty()) || (!group.getVolumes().isEmpty() && volumesInRDFGroupsOnProvider.isEmpty())) {    log.info("RDF Group {} in ViPR DB is not sync with the one on the provider. ",group.getNativeGuid());    clearSourceAndTargetVolumes(sourceDescriptors,targetDescriptors);    throw DeviceControllerException.exceptions.rdfGroupInViprDBNotInSyncWithArray(group.getNativeGuid());  }  if (volumesInRDFGroupsOnProvider.isEmpty() && !SupportedCopyModes.ALL.toString().equalsIgnoreCase(group.getSupportedCopyMode())) {    log.info("RDF Group {} is empty and supported copy mode is {} ",group.getNativeGuid(),group.getSupportedCopyMode());    clearSourceAndTargetVolumes(sourceDescriptors,targetDescriptors);    throw DeviceControllerException.exceptions.rdfGroupInViprDBNotInSyncWithArray(group.getNativeGuid());  }  if (!group.getVolumes().isEmpty()) {    try {      List<Volume> volumes=utils.getAssociatedVolumesForSRDFGroup(system,group);    } catch (    Exception e) {      log.info("RDF Group {} has devices created outside ViPRController",group.getNativeGuid());      clearSourceAndTargetVolumes(sourceDescriptors,targetDescriptors);      throw DeviceControllerException.exceptions.rdfGroupHasPairsCreatedOutsideViPR(group.getNativeGuid());    }  }  String createSrdfPairStep=null;  if (volumesInRDFGroupsOnProvider.isEmpty() && SupportedCopyModes.ALL.toString().equalsIgnoreCase(group.getSupportedCopyMode())) {    log.info("RA Group {} was empty",group.getId());    createSrdfPairStep=createNonCGSrdfPairStepsOnEmptyGroup(sourceDescriptors,targetDescriptors,group,uriVolumeMap,waitFor,workflow);  } else {    log.info("RA Group {} not empty",group.getId());    createSrdfPairStep=createNonCGSrdfPairStepsOnPopulatedGroup(sourceDescriptors,targetDescriptors,group,uriVolumeMap,waitFor,workflow);  }  String refreshSourceSystemStep=null;  if (null != system) {    refreshSourceSystemStep=addStepToRefreshSystem(CREATE_SRDF_MIRRORS_STEP_GROUP,system,null,createSrdfPairStep,workflow);  }  String refreshTargetSystemStep=null;  if (null != targetSystem) {    refreshTargetSystemStep=addStepToRefreshSystem(CREATE_SRDF_MIRRORS_STEP_GROUP,targetSystem,null,refreshSourceSystemStep,workflow);  }  refreshVolumeProperties(targetDescriptors,targetSystem,refreshTargetSystemStep,workflow);}  }
class C{  public static int remainder(int dividend,int divisor){  return (int)(toLong(dividend) % toLong(divisor));}  }
class C{  public void add(char[] b,int offset,int length){  if (buffer.length == 0)   return;  int toBeCopied=length;  if (DEBUG)   System.out.println("Called add(" + new String(b,offset,toBeCopied) + ")");  if (toBeCopied > buffer.length) {    offset+=toBeCopied - buffer.length;    toBeCopied=buffer.length;  }  int toEnd=Math.min(toBeCopied,buffer.length - (start + len) % buffer.length);  System.arraycopy(b,offset,buffer,(start + len) % buffer.length,toEnd);  if (toBeCopied > toEnd) {    System.arraycopy(b,offset + toEnd,buffer,0,toBeCopied - toEnd);  }  if (toBeCopied > buffer.length - len) {    start=(start + toBeCopied + len) % buffer.length;  }  len=Math.min(buffer.length,len + toBeCopied);}  }
class C{  public void write(byte[] b,int off,int len) throws IOException {  if (bufferedBlockCipher != null) {    byte[] buf=new byte[bufferedBlockCipher.getOutputSize(len)];    int outLen=bufferedBlockCipher.processBytes(b,off,len,buf,0);    if (outLen != 0) {      out.write(buf,0,outLen);    }  } else {    byte[] buf=new byte[len];    streamCipher.processBytes(b,off,len,buf,0);    out.write(buf,0,len);  }}  }
class C{  public void shutdownJobsExecutor(){synchronized (this) {    openDatabaseService.shutdown();    try {      openDatabaseService.awaitTermination(10,TimeUnit.SECONDS);    } catch (    InterruptedException e) {      openDatabaseService.shutdown();    }    for (    Future<DatasourceDefinition> future : customerAccess.values()) {      if (future.isDone()) {        try {          future.get().getDBManager().close();        } catch (        InterruptedException|ExecutionException e) {        }      } else       if (future.isCancelled()) {      } else {        future.cancel(true);      }    }  }}  }
class C{  protected void configureMockMvcBuilder(DefaultMockMvcBuilder mockMvcBuilder){}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public static Element[] toElementArray(Document doc,Object o) throws PageException {  if (o instanceof Node[]) {    Node[] nodes=(Node[])o;    if (_isAllOfSameType(nodes,Node.ELEMENT_NODE))     return (Element[])nodes;    Element[] elements=new Element[nodes.length];    for (int i=0; i < nodes.length; i++) {      elements[i]=toElement(doc,nodes[i]);    }    return elements;  } else   if (o instanceof Collection) {    Collection coll=(Collection)o;    Iterator<Object> it=coll.valueIterator();    List<Element> elements=new ArrayList<Element>();    while (it.hasNext()) {      elements.add(toElement(doc,it.next()));    }    return elements.toArray(new Element[elements.size()]);  }  Node[] nodes=_toNodeArray(doc,o);  if (nodes != null)   return toElementArray(doc,nodes);  try {    return new Element[]{toElement(doc,o)};  } catch (  ExpressionException e) {    throw new XMLException("can't cast Object of type " + Caster.toClassName(o) + " to a XML Element Array");  }}  }
class C{  public StyledComboBoxUI(Style style){  this.style=style;}  }
class C{  public boolean isNullPtr(){  return trapCode == RuntimeEntrypoints.TRAP_NULL_POINTER;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.965 -0500",hash_original_method="8B578359B2B86A936D64E613060A616F",hash_generated_method="977FF06B6B5A2C0B3C866794A332C138") public boolean isNamespaceProcessingEnabled(){  return processNamespaces;}  }
class C{  @Override public void run(){  handler=createHandler();  super.run();}  }
class C{  public CLDevice[] listCPUDevices(boolean onlyAvailable){  try {    return listDevices(CLDevice.Type.CPU,onlyAvailable);  } catch (  CLException ex) {    if (ex.getCode() == CL_DEVICE_NOT_FOUND) {      return new CLDevice[0];    }    throw new RuntimeException("Unexpected OpenCL error",ex);  }}  }
class C{  public static void main(String[] args) throws IOException {  int low=0;  int high=32000;  if (args == null || args.length == 0) {  } else   if (args.length == 1) {    low=Integer.valueOf(args[0]);  } else   if (args.length >= 2) {    low=Integer.valueOf(args[0]);    high=Integer.valueOf(args[1]);    if (args.length > 2) {      System.err.println("Ignoring all command arguments but " + args[0] + " and "+ args[1]);    }  }  File f=new File("Output.report.txt");  FileWriter fw=new FileWriter(f);  pw=new PrintWriter(fw);  FreeCellNode goal=Deal.goal();  System.out.println("Processing boards [" + low + ","+ high+ "] to "+ f);  for (DealIterator di=Deal.iterator(new File("artifacts","32000.txt")); di.hasNext(); ) {    INode fc=di.next();    if (di.getNextDealNumber() - 1 < low || di.getNextDealNumber() - 1 > high) {      continue;    }    pw.println("Search for:" + (di.getNextDealNumber() - 1));    pw.println(fc);    pw.flush();    System.out.println("working on: " + (di.getNextDealNumber() - 1));    IScore eval=new BoardScorer();    GoalDirectedStagedDeepening<short[]> gdsd=new GoalDirectedStagedDeepening<short[]>(goal,eval);    gdsd.setLookAhead(7);    Result res=gdsd.fullSearch(fc,eval,FreeCellNode.comparator());    Stack<IMove> st=res.solution();    if (res.success) {      System.out.println("  Solution found!");      pw.println(st.size() + " moves");    } else {      System.out.println(" No solution uncovered.");      pw.println("  NO SOLUTION FOUND!");    }    pw.flush();  }}  }
class C{  public static void toXml(Object obj,Writer writer){  xstream.toXML(obj,writer);}  }
class C{  private Map<GraphNode,Point2D> computeFullViewScale(Collection<GraphNode> layoutNodes,Map<GraphNode,Point2D> locations,Rectangle2D viewport){  if (layoutNodes.size() <= 0) {    return Collections.emptyMap();  }  Map<GraphNode,Point2D> result=Maps.newHashMap();  if (layoutNodes.size() == 1) {    GraphNode singletonNode=layoutNodes.iterator().next();    Point2D singletonLocation=locations.get(singletonNode);    if (null != singletonLocation) {      result.put(singletonNode,singletonLocation);    }    return result;  }  LayoutScaler scaler=new LayoutScaler(layoutNodes,locations);  double scaleView=scaleWithMargin(scaler,viewport);  Point2dUtils.Translater translater=Point2dUtils.newScaleTranslater(scaleView,scaleView);  return Point2dUtils.translateNodes(layoutNodes,locations,translater);}  }
class C{  public Builder images(File imagesFile){  Validator.notNull(imagesFile,"'imagesFile' cannot be null");  this.imagesFile=imagesFile;  return this;}  }
class C{  public boolean isInitialized(){  return initialized;}  }
class C{  public void addRobotNature() throws CoreException {  RobotProjectNature.addRobotNature(project,null);}  }
class C{  public Boolean isAllowUnrestrictedCommunication(){  return allowUnrestrictedCommunication;}  }
class C{  public Object put(Object key,Object value){  processQueue();  ValueCell vc=ValueCell.create(key,value,queue);  return ValueCell.strip(hash.put(key,vc),true);}  }
class C{  public void testANDPhrase() throws Exception {  PhraseQuery phrase1=new PhraseQuery("field","foo","bar");  PhraseQuery phrase2=new PhraseQuery("field","star","wars");  BooleanQuery.Builder expected=new BooleanQuery.Builder();  expected.add(phrase1,Occur.MUST);  expected.add(phrase2,Occur.MUST);  assertEquals(expected.build(),parse("\"foo bar\"+\"star wars\""));}  }
class C{  public void addDataSetColors(int[] colors,Context c){  mDataSetColors.add(createColors(c,colors));  mColorCount+=colors.length;}  }
class C{  @SuppressWarnings("unchecked") protected void send(final byte[] fileContents,final ICallback<T> callback){  mBaseRequest.setHttpMethod(HttpMethod.PUT);  mBaseRequest.getClient().getHttpProvider().send(this,callback,mBaseRequest.getResponseType(),fileContents);}  }
class C{  public static FloatMatrix rand(int len){  return rand(len,1);}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  public static boolean testSaveLocationExists(){  String sDCardStatus=Environment.getExternalStorageState();  boolean status;  if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {    status=true;  } else {    status=false;  }  return status;}  }
class C{  public LinkedHashSet(int initialCapacity){  super(initialCapacity,.75f,true);}  }
class C{  private Pair<Element,Visualization> value(Element elem,Visualization vis){  return new Pair<>(elem,vis);}  }
class C{  public GenericEntry uploadPublicKey(String base64encodedKey) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  GenericEntry entry=new GenericEntry();  entry.addProperty("publicKey",base64encodedKey);  return insert(new URL(BASE_URL + "publickey/" + domain),entry);}  }
class C{  private double[] parseVector(String s){  String[] entries=WHITESPACE_PATTERN.split(s);  double[] d=new double[entries.length];  for (int i=0; i < entries.length; i++) {    try {      d[i]=ParseUtil.parseDouble(entries[i]);    } catch (    NumberFormatException e) {      throw new AbortException("Could not parse vector.");    }  }  return d;}  }
class C{  public int readAll(byte[] buf,int offset,int length) throws IOException {  int readOffset=_readOffset;  int readLength=_readLength;  int i=0;  while (true) {    int sublen=Math.min(length - i,readLength - readOffset);    System.arraycopy(_readBuffer,readOffset,buf,offset + i,sublen);    i+=sublen;    if (length <= i) {      _readOffset=readOffset + sublen;      return i;    } else {      if (!readBuffer()) {        return i == 0 ? -1 : i;      }      readOffset=_readOffset;      readLength=_readLength;    }  }}  }
class C{  public synchronized void addObserver(Observer o){  if (!observers.contains(o)) {    observers.addElement(o);  }}  }
class C{  public boolean isMethodCallOnSameObject(){  BytecodeInstruction srcInstruction=getSourceOfMethodInvocationInstruction();  if (srcInstruction == null)   return false;  return srcInstruction.loadsReferenceToThis();}  }
class C{  @Override public Savepoint connection_setSavepoint(FilterChain chain,ConnectionProxy connection,String name) throws SQLException {  Savepoint savepoint=chain.connection_setSavepoint(connection,name);  return savepoint;}  }
class C{  public int start(){  if (first < 0)   throw new IllegalStateException("No match available");  return first;}  }
class C{  public SimplifySpanBuild appendSpecialUnit(BaseSpecialUnit specialUnit){  if (null == specialUnit)   return this;  String specialText=specialUnit.getSpecialText();  if (TextUtils.isEmpty(specialText))   return this;  specialUnit.setStartPoss(new int[]{mStringBuilder.length()});  mStringBuilder.append(specialText);  mFinalSpecialUnit.add(specialUnit);  return this;}  }
class C{  public byte[] processData(byte[] data) throws InvalidCipherTextException {  if (debug) {    System.out.println();  }  if (data.length > getInputBlockSize()) {    int inBlocksize=getInputBlockSize();    int outBlocksize=getOutputBlockSize();    if (debug) {      System.out.println("Input blocksize is:  " + inBlocksize + " bytes");      System.out.println("Output blocksize is: " + outBlocksize + " bytes");      System.out.println("Data has length:.... " + data.length + " bytes");    }    int datapos=0;    int retpos=0;    byte[] retval=new byte[(data.length / inBlocksize + 1) * outBlocksize];    while (datapos < data.length) {      byte[] tmp;      if (datapos + inBlocksize < data.length) {        tmp=processBlock(data,datapos,inBlocksize);        datapos+=inBlocksize;      } else {        tmp=processBlock(data,datapos,data.length - datapos);        datapos+=data.length - datapos;      }      if (debug) {        System.out.println("new datapos is " + datapos);      }      if (tmp != null) {        System.arraycopy(tmp,0,retval,retpos,tmp.length);        retpos+=tmp.length;      } else {        if (debug) {          System.out.println("cipher returned null");        }        throw new InvalidCipherTextException("cipher returned null");      }    }    byte[] ret=new byte[retpos];    System.arraycopy(retval,0,ret,0,retpos);    if (debug) {      System.out.println("returning " + ret.length + " bytes");    }    return ret;  } else {    if (debug) {      System.out.println("data size is less then input block size, processing directly");    }    return processBlock(data,0,data.length);  }}  }
class C{  void updateStorageViewInfo(VPlexStorageViewInfo storageViewInfo){  String storageViewName=storageViewInfo.getName();  String clusterName=storageViewInfo.getClusterId();  StringBuilder uriBuilder=new StringBuilder();  uriBuilder.append(VPlexApiConstants.URI_CLUSTERS.toString());  uriBuilder.append(storageViewInfo.getClusterId());  uriBuilder.append(VPlexApiConstants.URI_STORAGE_VIEWS.toString());  uriBuilder.append(storageViewName);  URI requestURI=_vplexApiClient.getBaseURI().resolve(URI.create(uriBuilder.toString()));  s_logger.info("Storage View Info Request URI is {}",requestURI.toString());  ClientResponse response=_vplexApiClient.get(requestURI);  String responseStr=response.getEntity(String.class);  s_logger.info("Response is {}",responseStr);  int status=response.getStatus();  response.close();  if (status != VPlexApiConstants.SUCCESS_STATUS) {    throw VPlexApiException.exceptions.getStorageViewsFailed(String.format("Failed getting info for storage " + "view %s in cluster %s with status: %s",storageViewName,clusterName,status));  }  try {    VPlexApiUtils.setAttributeValues(responseStr,storageViewInfo);    updateStorageViewInitiatorPWWN(storageViewInfo);  } catch (  Exception e) {    throw VPlexApiException.exceptions.getStorageViewsFailed(String.format("Failed getting info for storage " + "view %s in cluster %s with status: %s",storageViewName,clusterName,status));  }}  }
class C{  public static Drawable bitmapToDrawable(Bitmap bitmap){  return bitmap == null ? null : new BitmapDrawable(bitmap);}  }
class C{  static void replace(final String fileName,final String name,final String value) throws Exception {  final Path path=Paths.get(fileName);  final Path temp=Paths.get(fileName + "_");  try (final BufferedReader in=Files.newBufferedReader(path,StandardCharsets.UTF_8);final BufferedWriter out=Files.newBufferedWriter(temp,StandardCharsets.UTF_8)){    String line;    while ((line=in.readLine()) != null)     out.write(line.replace(name,value) + "\r\n");  }   Files.delete(path);  Files.move(temp,path);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @NoInline @NoOptCompile @BaselineSaveLSRegisters @Unpreemptible public static int readBytes(int fd,byte[] buf,int off,int cnt){  RVMThread.saveThreadState();  RVMThread.enterNative();  int result=sysCall.sysReadBytes(fd,Magic.objectAsAddress(buf).plus(off),cnt);  RVMThread.leaveNative();  return result;}  }
class C{  public boolean isVoidElement(){  return voidElement;}  }
class C{  public static void exit(int status){  wasTimeAccessed=true;  throw new SystemExitException();}  }
class C{  public ServiceDiscovery registerServiceExporter(ServiceExporter exporter,JsonObject configuration){  ServiceDiscovery ret=ServiceDiscovery.newInstance(delegate.registerServiceExporter((io.vertx.servicediscovery.spi.ServiceExporter)exporter.getDelegate(),configuration));  return ret;}  }
class C{  public static String writeToxicityTable(LogicCircuit lc){  String s="";  s+=String.format("%14s","truth table") + "\t";  for (int j=lc.get_logic_gates().size() - 1; j >= 0; --j) {    Gate gate=lc.get_logic_gates().get(j);    if (gate.get_logics().size() > 0 && gate.get_toxicity().size() > 0) {      s+=String.format("%7s",gate.Group) + "\t";    }  }  s+=String.format("%11s","circuit") + "\t";  s+="\n";  for (int i=0; i < lc.get_output_gates().get(0).get_logics().size(); ++i) {    s+=String.format("%14s",lc.getLogicRow(i)) + "\t";    for (int j=lc.get_logic_gates().size() - 1; j >= 0; --j) {      Gate gate=lc.get_logic_gates().get(j);      if (gate.get_logics().size() > 0 && gate.get_toxicity().size() > 0) {        s+=String.format("%7s",String.format("%3.2f",gate.get_toxicity().get(i))) + "\t";      }    }    s+=String.format("%11s",String.format("%3.2f",lc.get_output_gates().get(0).get_toxicity().get(i))) + "\t";    s+="\n";  }  return s;}  }
class C{  private void processMountList(final List<Object> mountList,Map<String,Object> keyMap) throws VNXFilePluginException {  _logger.info("Processing file system mount response....");  final DbClient dbClient=(DbClient)keyMap.get(VNXFileConstants.DBCLIENT);  Map<String,Long> fsCapList=(HashMap<String,Long>)keyMap.get(VNXFileConstants.FILE_CAPACITY_MAP);  Map<String,Map<String,Long>> snapCapFsMap=(HashMap<String,Map<String,Long>>)keyMap.get(VNXFileConstants.SNAP_CAPACITY_MAP);  AccessProfile profile=(AccessProfile)keyMap.get(Constants.ACCESSPROFILE);  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,profile.getSystemId());  List<String> fsList=null;  Map<String,List<String>> fsMountvNASMap=new HashMap<String,List<String>>();  Map<String,List<String>> fsMountPhyNASMap=new HashMap<String,List<String>>();  Iterator<Object> iterator=mountList.iterator();  if (iterator.hasNext()) {    Status status=(Status)iterator.next();    if (status.getMaxSeverity() == Severity.OK) {      while (iterator.hasNext()) {        Mount mount=(Mount)iterator.next();        if (mount.isMoverIdIsVdm() == true) {          fsList=fsMountvNASMap.get(mount.getMover());          if (null == fsList) {            fsList=new ArrayList<String>();          }          fsList.add(mount.getFileSystem());          fsMountvNASMap.put(mount.getMover(),fsList);          _logger.debug("Filestem or Snapshot {} mounted on vdm {} ",mount.getFileSystem(),mount.getMover());        } else {          fsList=fsMountPhyNASMap.get(mount.getMover());          if (null == fsList) {            fsList=new ArrayList<String>();          }          fsList.add(mount.getFileSystem());          fsMountPhyNASMap.put(mount.getMover(),fsList);          _logger.debug("Filestem or Snapshot {} mounted on data mover {} ",mount.getFileSystem(),mount.getMover());        }      }      for (      Entry<String,List<String>> eachVNas : fsMountvNASMap.entrySet()) {        _logger.info(" Virtual data mover {} has Filestem or Snapshot mounts {} ",eachVNas.getKey(),eachVNas.getValue().size());      }      for (      Entry<String,List<String>> eachNas : fsMountPhyNASMap.entrySet()) {        _logger.info(" Data mover {} has Filestem or Snapshot mounts {} ",eachNas.getKey(),eachNas.getValue().size());      }      Map<String,Long> vdmCapacityMap=new HashMap<String,Long>();      Map<String,Long> dmCapacityMap=new HashMap<String,Long>();      vdmCapacityMap=computeMoverCapacity(fsMountvNASMap,fsCapList,snapCapFsMap);      dmCapacityMap=computeMoverCapacity(fsMountPhyNASMap,fsCapList,snapCapFsMap);      prepareDBMetrics(storageSystem,dbClient,fsMountPhyNASMap,dmCapacityMap,fsMountvNASMap,vdmCapacityMap);    } else {      throw new VNXFilePluginException("Fault response received from XMLAPI Server.",VNXFilePluginException.ERRORCODE_INVALID_RESPONSE);    }  }}  }
class C{  public boolean isCoveredByLA(Coordinate coord){  if (isCovered(coord,resultLineList))   return true;  if (isCovered(coord,resultPolyList))   return true;  return false;}  }
class C{  public static boolean testAabPlane(Vector3d min,Vector3d max,double a,double b,double c,double d){  return testAabPlane(min.x,min.y,min.z,max.x,max.y,max.z,a,b,c,d);}  }
class C{  @Override public boolean longClick(String obj,String corner) throws UiObjectNotFoundException {  return longClick(getUiObject(obj),corner);}  }
class C{  public NotificacionImpl(){}  }
class C{  public static boolean isFileinZipFailSafe(String fileName,java.util.zip.ZipFile zipFile){  try {    Enumeration<? extends ZipEntry> zipEntries=zipFile.entries();    while (zipEntries.hasMoreElements()) {      if (zipEntries.nextElement().getName().contains(fileName)) {        return true;      }    }  } catch (  Exception e) {    Logger.appendLog("[ZipTools][EX]" + e.getStackTrace());    return false;  }  return false;}  }
class C{  public MinusExpression(final List<MemoryExpressionElement> children){  this.children=children;}  }
class C{  private void serializeParser(LRParser parser){  File cup2File=new File(getSerializedSpecAbsolutePath());  File specFile=new File(getSpecAbsolutePath());  if (verbose) {    log("specification source file     = " + getSpecAbsolutePath());    log("Cup2 file for serialization   = " + cup2File.getAbsolutePath());    log("specification - last modified = " + specFile.lastModified());    log("CUP2 file     - last modified = " + cup2File.lastModified());  }  if (specFile.lastModified() > cup2File.lastModified() || !cup2File.exists()) {    if (verbose && !cup2File.exists())     log("cup2 file for serialization does not yet exist and is created..."); else     if (verbose && specFile.lastModified() > cup2File.lastModified())     log("Spec file is newer than cup2 file... creating cup2 file");    LRParserSerialization serial=new LRParserSerialization(cup2File.getAbsolutePath());    serial.saveParser(parser);  } else   if (verbose) {    log("Specification is older than CUP2 file. No serialization.");  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private Base64(){}  }
class C{  public Container addChildAt(int location,@NonNull DisplayObject DisplayObject){  if (mFps != DEFAULT_FPS) {    DisplayObject.setUp(mFps);  }  mDisplayList.add(location,DisplayObject);  return this;}  }
class C{  public boolean isExcludeSerNo(int AD_Column_ID,boolean isSOTrx){  if (getM_SerNoCtl_ID() == 0)   return true;  if (m_excludeSerNos == null) {    final String whereClause=X_M_SerNoCtlExclude.COLUMNNAME_M_SerNoCtl_ID + "=?";    List<X_M_SerNoCtlExclude> list=new Query(getCtx(),X_M_SerNoCtlExclude.Table_Name,whereClause,null).setParameters(getM_SerNoCtl_ID()).setOnlyActiveRecords(true).list();    m_excludeSerNos=new X_M_SerNoCtlExclude[list.size()];    list.toArray(m_excludeSerNos);  }  if (m_excludeSerNos != null && m_excludeSerNos.length > 0) {    MColumn column=MColumn.get(getCtx(),AD_Column_ID);    for (int i=0; i < m_excludeSerNos.length; i++) {      if (m_excludeSerNos[i].getAD_Table_ID() == column.getAD_Table_ID() && m_excludeSerNos[i].isSOTrx() == isSOTrx)       return true;    }  }  return false;}  }
class C{  public AbstractResource(String mimetype,long lastModified){  this.mimetype=mimetype;  this.lastModified=lastModified;}  }
class C{  protected void append(Node newNode) throws org.xml.sax.SAXException {  Node currentNode=m_currentNode;  if (null != currentNode) {    currentNode.appendChild(newNode);  } else   if (null != m_docFrag) {    m_docFrag.appendChild(newNode);  } else {    boolean ok=true;    short type=newNode.getNodeType();    if (type == Node.TEXT_NODE) {      String data=newNode.getNodeValue();      if ((null != data) && (data.trim().length() > 0)) {        throw new org.xml.sax.SAXException("Warning: can't output text before document element!  Ignoring...");      }      ok=false;    } else     if (type == Node.ELEMENT_NODE) {      if (m_doc.getDocumentElement() != null) {        throw new org.xml.sax.SAXException("Can't have more than one root on a DOM!");      }    }    if (ok)     m_doc.appendChild(newNode);  }}  }
class C{  public GeoPointMapperBuilder maxLevels(Integer maxLevels){  this.maxLevels=maxLevels;  return this;}  }
class C{  private void updateExtensionCoreIdMapping(ExtensionMapping mapping,String resourceCoreRowType){  Preconditions.checkNotNull(mapping.getIdColumn(),"The extension must contain a coreId element");  String coreIdTermQName=AppConfig.coreIdTerm(resourceCoreRowType);  PropertyMapping coreIdTermPropertyMapping=mapping.getField(coreIdTermQName);  if (coreIdTermPropertyMapping == null) {    Term coreIdTerm=TERM_FACTORY.findTerm(coreIdTermQName);    PropertyMapping coreIdTermMapping=new PropertyMapping(new ArchiveField(mapping.getIdColumn(),coreIdTerm));    mapping.getFields().add(coreIdTermMapping);  } else {    if (coreIdTermPropertyMapping.getIndex() != null && !coreIdTermPropertyMapping.getIndex().equals(mapping.getIdColumn())) {      mapping.setIdColumn(coreIdTermPropertyMapping.getIndex());    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:33.266 -0500",hash_original_method="955BAED9D745223A762EA03F9D3C1E25",hash_generated_method="D1E550090E6BBB897CAC6429B103B177") private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  out.writeInt(length());  out.writeObject(getValue());}  }
class C{  protected void encodeAtom(OutputStream outStream,byte data[],int offset,int len) throws IOException {  byte a, b=1, c=1;  int c1, c2, c3, c4;  a=data[offset];  if (len > 1) {    b=data[offset + 1];  }  if (len > 2) {    c=data[offset + 2];  }  c1=(a >>> 2) & 0x3f;  c2=((a << 4) & 0x30) | ((b >>> 4) & 0xf);  c3=((b << 2) & 0x3c) | ((c >>> 6) & 0x3);  c4=c & 0x3f;  outStream.write(c1 + ' ');  outStream.write(c2 + ' ');  outStream.write(c3 + ' ');  outStream.write(c4 + ' ');  return;}  }
class C{  public static boolean replicationGroupExists(URI storage,String replicationGroupName,DbClient dbClient){  Iterator<BlockConsistencyGroup> allCgs=dbClient.queryIterativeObjects(BlockConsistencyGroup.class,dbClient.queryByType(BlockConsistencyGroup.class,true));  while (allCgs.hasNext()) {    BlockConsistencyGroup cg=allCgs.next();    if (cg.created(storage,replicationGroupName)) {      return true;    }  }  return false;}  }
class C{  public void visitLabel(Label label){  if (mv != null) {    mv.visitLabel(label);  }}  }
class C{  private void createTriggerProcessIdentifier(long triggerProcessKey,TriggerProcessIdentifierName identifierName,String value) throws SQLException {  PreparedStatement pstmt=null;  try {    pstmt=conn.prepareStatement(QUERY_INSERT_TPI);    pstmt.setLong(1,triggerProcessKey);    pstmt.setString(2,identifierName.name());    pstmt.setString(3,value);    pstmt.executeUpdate();  }  finally {    if (pstmt != null) {      pstmt.close();    }  }}  }
class C{  public Categories addCategories(String... categories){  Categories prop=new Categories(categories);  addProperty(prop);  return prop;}  }
class C{  private void cmd_loadFormat(){  previewPanel.getChildren().clear();  ListItem listitem=pickFormat.getSelectedItem();  String formatName=(String)listitem.getValue();  if (formatName.equals(s_none))   return;  m_format=ImpFormat.load(formatName);  if (m_format == null) {    FDialog.error(m_WindowNo,this,formatName);    return;  }  int size=m_format.getRowCount();  m_labels=new Label[size];  m_fields=new Textbox[size];  for (int i=0; i < size; i++) {    ImpFormatRow row=m_format.getRow(i);    m_labels[i]=new Label(row.getColumnName());    Hbox hbox=new Hbox();    hbox.setWidth("100%");    hbox.setWidths("30%, 70%");    hbox.setStyle("padding-bottom: 3px");    hbox.appendChild(m_labels[i].rightAlign());    int length=row.getEndNo() - row.getStartNo();    if (length <= 5)     length=5; else     if (length > 20)     length=20;    m_fields[i]=new Textbox();    m_fields[i].setStyle("margin-left: 2px");    hbox.appendChild(m_fields[i]);    previewPanel.appendChild(hbox);  }  m_record=-1;  record.setValue("------");  previewPanel.invalidate();}  }
class C{  public boolean mouseMoved(MouseEvent e){  return false;}  }
class C{  public FeatureType basicGetType(){  return type;}  }
class C{  public T text(int resid){  if (view instanceof TextView) {    TextView tv=(TextView)view;    tv.setText(resid);  }  return self();}  }
class C{  public TreeNode<T> findByContent(T content){  Optional<TreeNode<T>> opt=TreeStream.breadthFirst(treeDef(),this).filter(null).findFirst();  if (opt.isPresent()) {    return opt.get();  } else {    throw new IllegalArgumentException(this.toString() + " has no child with content " + content);  }}  }
class C{  public void in(DataInputStream dis) throws IOException {  if (!dis.readUTF().equals("float")) {    throw new IllegalStateException("The matrix in the specified file is not of the correct type!");  }  this.columns=dis.readInt();  this.rows=dis.readInt();  final int MAX=dis.readInt();  data=new float[MAX];  for (int i=0; i < MAX; i++) {    data[i]=dis.readFloat();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:44.463 -0500",hash_original_method="FC50720DD3E5D2157039A2F08974D046",hash_generated_method="DDE2DF273A0113D2EC3E0F3A3C8BCEAE") public static String format(final List<? extends NameValuePair> parameters,final String encoding){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encode(parameter.getName(),encoding);    final String value=parameter.getValue();    final String encodedValue=value != null ? encode(value,encoding) : "";    if (result.length() > 0)     result.append(PARAMETER_SEPARATOR);    result.append(encodedName);    result.append(NAME_VALUE_SEPARATOR);    result.append(encodedValue);  }  return result.toString();}  }
class C{  public Printer(File inputFile,Severity maxSeverity,Formatter formatter){  this.inputFile=inputFile;  this.maxSeverity=maxSeverity;  this.formatter=formatter;}  }
class C{  public ZipFile(String name,String encoding) throws IOException {  this(new File(name),encoding);}  }
class C{  public void insertPrompt(final int pos,final String prompt){  try {    super.insertString(pos,prompt,pythonPromptAttr);  } catch (  final Exception ex) {    ex.printStackTrace();  }}  }
class C{  public void updateTask(){  this.thePet.getLookHelper().setLookPositionWithEntity(this.theOwner,10.0F,(float)this.thePet.getVerticalFaceSpeed());  if (--this.field_75343_h <= 0) {    this.field_75343_h=10;    if (!this.petPathfinder.tryMoveToXYZ(this.theOwner.posX,theOwner.posY + theOwner.getEyeHeight(),theOwner.posZ + 2,this.followSpeed)) {      if (!this.thePet.getLeashed()) {        if (this.thePet.getDistanceSqToEntity(this.theOwner) >= 144.0D) {          int x=MathHelper.floor_double(this.theOwner.posX) - 1;          int z=MathHelper.floor_double(this.theOwner.posZ) - 1;          int y=MathHelper.floor_double(this.theOwner.getEntityBoundingBox().maxY);          for (int xMov=0; xMov <= 3; ++xMov) {            for (int zMov=0; zMov <= 3; ++zMov) {              if ((xMov < 1 || zMov < 1 || xMov > 2 || zMov > 2) && this.func_181065_a(new BlockPos(x + xMov,y,z + zMov)) && this.func_181065_a(new BlockPos(x + xMov,y + 1,z + zMov))) {                this.thePet.setLocationAndAngles((double)((float)(x + xMov) + 0.5F),(double)y,(double)((float)(z + zMov) + 0.5F),this.thePet.rotationYaw,this.thePet.rotationPitch);                this.petPathfinder.clearPathEntity();                return;              }            }          }        }      }    }  }}  }
class C{  @Override protected void onReset(){  super.onReset();  onStopLoading();  if (result != null) {    onReleaseResult(result);    result=null;  }}  }
class C{  public void fillDocIdsToLoad(AtomicArray<IntArrayList> docsIdsToLoad,ScoreDoc[] shardDocs){  for (  ScoreDoc shardDoc : shardDocs) {    IntArrayList list=docsIdsToLoad.get(shardDoc.shardIndex);    if (list == null) {      list=new IntArrayList();      docsIdsToLoad.set(shardDoc.shardIndex,list);    }    list.add(shardDoc.doc);  }}  }
class C{  public Trace_ createTrace_(){  Trace_Impl trace_=new Trace_Impl();  return trace_;}  }
class C{  private void generateTypeParameterInfos(BinaryMember parent,char[] signature,HashMap newElements,ArrayList typeParameterHandles){  if (signature == null)   return;  char[][] typeParameterSignatures=Signature.getTypeParameters(signature);  for (int i=0, typeParameterCount=typeParameterSignatures.length; i < typeParameterCount; i++) {    char[] typeParameterSignature=typeParameterSignatures[i];    char[] typeParameterName=Signature.getTypeVariable(typeParameterSignature);    CharOperation.replace(typeParameterSignature,'/','.');    char[][] typeParameterBoundSignatures=Signature.getTypeParameterBounds(typeParameterSignature);    int boundLength=typeParameterBoundSignatures.length;    char[][] typeParameterBounds=new char[boundLength][];    for (int j=0; j < boundLength; j++) {      typeParameterBounds[j]=Signature.toCharArray(typeParameterBoundSignatures[j]);    }    TypeParameter typeParameter=new TypeParameter(parent,parent.manager,new String(typeParameterName));    TypeParameterElementInfo info=new TypeParameterElementInfo();    info.bounds=typeParameterBounds;    info.boundsSignatures=typeParameterBoundSignatures;    typeParameterHandles.add(typeParameter);    while (newElements.containsKey(typeParameter))     typeParameter.occurrenceCount++;    newElements.put(typeParameter,info);  }}  }
class C{  @Override protected void processAppStart() throws SQLException {  Statement stat=conn.createStatement();  if ((flags & FLAG_NO_DELAY) != 0) {    execute(stat,"SET WRITE_DELAY 0");    execute(stat,"SET MAX_LOG_SIZE 1");  }  ResultSet rs=stat.executeQuery("SELECT COUNT(*) FROM TEST");  rs.next();  rowCount=rs.getInt(1);  traceOperation("rows: " + rowCount,null);}  }
class C{  @Override public boolean equals(Object other){  if (other == this)   return true;  if (other == null)   return false;  if (other.getClass() != this.getClass())   return false;  Transaction that=(Transaction)other;  return (this.amount == that.amount) && (this.who.equals(that.who)) && (this.when.equals(that.when));}  }
class C{  public synchronized boolean goTo(String path){  if (!isHierachic(path)) {    if (m_Root.value.equals(path)) {      goToRoot();      return true;    } else {      return false;    }  }  TreeNode old=m_Current;  m_Current=new TreeNode();  goToRoot();  String[] nodes=tokenize(path);  if (!m_Current.value.equals(nodes[0])) {    return false;  }  for (int i=1; i < nodes.length; i++) {    int pos=search(m_Current.children,nodes[i]);    if (pos == -1) {      m_Current=old;      return false;    }    m_Current=m_Current.children.elementAt(pos);  }  return true;}  }
class C{  public static int value(String s){  return flags.getValue(s);}  }
class C{  @Override public JToolTip createToolTip(){  final JToolTip tt=super.createToolTip();  tt.setFont(getFont());  return tt;}  }
class C{  @Override protected boolean beforeSave(boolean newRecord){  String ct=getColumnType();  if (ct.equals(COLUMNTYPE_RelativePeriod)) {    setElementType(null);    setCalculationType(null);  } else   if (ct.equals(COLUMNTYPE_Calculation)) {    setElementType(null);    setRelativePeriod(null);  } else   if (ct.equals(COLUMNTYPE_SegmentValue)) {    setCalculationType(null);  }  return true;}  }
class C{  public IJavaElement createElement(Scope scope,int elementPosition,ICompilationUnit unit,HashSet existingElements,HashMap knownScopes){  IJavaElement newElement=(IJavaElement)knownScopes.get(scope);  if (newElement != null)   return newElement;switch (scope.kind) {case Scope.COMPILATION_UNIT_SCOPE:    newElement=unit;  break;case Scope.CLASS_SCOPE:IJavaElement parentElement=createElement(scope.parent,elementPosition,unit,existingElements,knownScopes);switch (parentElement.getElementType()) {case IJavaElement.COMPILATION_UNIT:newElement=((ICompilationUnit)parentElement).getType(new String(scope.enclosingSourceType().sourceName));break;case IJavaElement.TYPE:newElement=((IType)parentElement).getType(new String(scope.enclosingSourceType().sourceName));break;case IJavaElement.FIELD:case IJavaElement.INITIALIZER:case IJavaElement.METHOD:IMember member=(IMember)parentElement;if (member.isBinary()) {return null;} else {newElement=member.getType(new String(scope.enclosingSourceType().sourceName),1);if (newElement != null) {while (!existingElements.add(newElement)) ((SourceRefElement)newElement).occurrenceCount++;}}break;}if (newElement != null) {knownScopes.put(scope,newElement);}break;case Scope.METHOD_SCOPE:if (scope.isLambdaScope()) {parentElement=createElement(scope.parent,elementPosition,unit,existingElements,knownScopes);LambdaExpression expression=(LambdaExpression)scope.originalReferenceContext();if (expression.resolvedType != null && expression.resolvedType.isValidBinding() && !(expression.descriptor instanceof ProblemMethodBinding)) {newElement=LambdaFactory.createLambdaExpression((JavaElement)parentElement,expression).getMethod();knownScopes.put(scope,newElement);return newElement;}return parentElement;}IType parentType=(IType)createElement(scope.parent,elementPosition,unit,existingElements,knownScopes);MethodScope methodScope=(MethodScope)scope;if (methodScope.isInsideInitializer()) {TypeDeclaration type=methodScope.referenceType();int occurenceCount=1;int length=type.fields == null ? 0 : type.fields.length;for (int i=0; i < length; i++) {FieldDeclaration field=type.fields[i];if (field.declarationSourceStart <= elementPosition && elementPosition <= field.declarationSourceEnd) {switch (field.getKind()) {case AbstractVariableDeclaration.FIELD:case AbstractVariableDeclaration.ENUM_CONSTANT:newElement=parentType.getField(new String(field.name));break;case AbstractVariableDeclaration.INITIALIZER:newElement=parentType.getInitializer(occurenceCount);break;}break;} else if (field.getKind() == AbstractVariableDeclaration.INITIALIZER) {occurenceCount++;}}} else {AbstractMethodDeclaration method=methodScope.referenceMethod();newElement=parentType.getMethod(new String(method.selector),Util.typeParameterSignatures(method));if (newElement != null) {knownScopes.put(scope,newElement);}}break;case Scope.BLOCK_SCOPE:newElement=createElement(scope.parent,elementPosition,unit,existingElements,knownScopes);break;}return newElement;}  }
class C{  private void close(JMXConnector conn){  if (conn != null) {    try {      conn.close();    } catch (    IOException e) {      log.error("Failed to close JMX connector",e);    }  }}  }
class C{  protected CastExpressionImpl(){  super();}  }
class C{  protected void calcScore(){  if ((m_namespace == null) && (m_name == null))   m_score=SCORE_NODETEST; else   if (((m_namespace == WILD) || (m_namespace == null)) && (m_name == WILD))   m_score=SCORE_NODETEST; else   if ((m_namespace != WILD) && (m_name == WILD))   m_score=SCORE_NSWILD; else   m_score=SCORE_QNAME;  m_isTotallyWild=(m_namespace == null && m_name == WILD);}  }
class C{  public void lastField(){}  }
class C{  public Container start() throws Exception {  if (!this.running) {    this.deployer=this.server.start(this);    this.running=true;  }  return this;}  }
class C{  public boolean addRule(Rule rule){  if (validRule(rule)) {    rules.add(rule);    updateVarsAndTerminals(rule);    return true;  } else {    return false;  }}  }
class C{  public void readGroup(AttributeSet attrs){  TypedArray a=mContext.obtainStyledAttributes(attrs,R.styleable.SublimeMenuGroup);  groupId=a.getResourceId(R.styleable.SublimeMenuGroup_android_id,defaultGroupId);  groupVisible=a.getBoolean(R.styleable.SublimeMenuGroup_android_visible,defaultItemVisible);  groupEnabled=a.getBoolean(R.styleable.SublimeMenuGroup_android_enabled,defaultItemEnabled);  groupIsCollapsible=a.getBoolean(R.styleable.SublimeMenuGroup_collapsible,defaultGroupCollapsible);  groupIsCollapsed=a.getBoolean(R.styleable.SublimeMenuGroup_collapsed,defaultGroupCollapsed);  groupCheckableBehavior=getGroupCheckableBehavior(a.getInt(R.styleable.SublimeMenuGroup_android_checkableBehavior,defaultItemCheckable));  a.recycle();}  }
class C{  static Map<String,Object> parseParameters(String args[]) throws Exception {  debug(DEBUG_STANDARD,"TestRoot::parseParameters: Start");  HashMap<String,Object> map=new HashMap<>();  for (int i=0; i < args.length; i++) {    if (args[i].trim().startsWith("-")) {      if ((i + 1) < args.length && !args[i + 1].startsWith("-")) {        debug(DEBUG_STANDARD,"TestRoot::parseParameters: added in map = " + args[i] + " with value "+ args[i + 1]);        map.put(args[i].trim(),args[i + 1].trim());      } else       if ((i + 1) < args.length && args[i + 1].startsWith("-") || (i + 1) == args.length) {        debug(DEBUG_STANDARD,"TestRoot::parseParameters: added in map = " + args[i] + " with null value");        map.put(args[i].trim(),null);      } else {        System.out.println("TestRoot::parseParameters: (WARNING) not added in map = " + args[i]);      }    }  }  debug(DEBUG_STANDARD,"TestRoot::parseParameters: Done");  return map;}  }
class C{  private int countNodes(TreeNode n){  if (n == null) {    return 0;  }  return 1 + countNodes(n.left) + countNodes(n.right);}  }
class C{  public static boolean checkFrontCamera(Context context){  if (context.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FRONT)) {    return true;  } else {    return false;  }}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  int modew=MeasureSpec.getMode(widthMeasureSpec);  int modeh=MeasureSpec.getMode(heightMeasureSpec);  if (modew != MeasureSpec.EXACTLY || modeh != MeasureSpec.EXACTLY)   throw new IllegalArgumentException("width and height must have absolute sizes");  int widthSize=MeasureSpec.getSize(widthMeasureSpec);  int heightSize=MeasureSpec.getSize(heightMeasureSpec);  int padw=getPaddingLeft() + getPaddingRight();  int padh=getPaddingBottom() + getPaddingTop();  boolean landscape=widthSize > heightSize;  int halfSpace=mSpacing > 0 ? mSpacing / 2 : 0;  int fullHeight=heightSize - padh;  int fullWidth=widthSize - padw;  int halfHeight=landscape ? fullHeight : ((heightSize - padh) / 2) - halfSpace;  int halfWidth=landscape ? ((fullWidth - padw) / 2) - halfSpace : fullWidth;  int quarterHeight=landscape ? ((heightSize - padh) / 2) - halfSpace : halfHeight;  int quarterWidth=((fullWidth - padw) / 2) - halfSpace;  int eighthHeight=landscape ? quarterHeight : (halfHeight / 2) - halfSpace;  int eighthWidht=landscape ? (halfWidth / 2) - halfSpace : quarterWidth;  int viewCount=getChildCount();  if (viewCount == 1) {    View child=getChildAt(0);    int childSpecW=MeasureSpec.makeMeasureSpec(fullWidth,MeasureSpec.EXACTLY);    int childSpecH=MeasureSpec.makeMeasureSpec(fullHeight,MeasureSpec.EXACTLY);    measureChild(child,childSpecW,childSpecH);    LayoutParams lp=(LayoutParams)child.getLayoutParams();    lp.x=padw;    lp.y=padh;  } else   if (viewCount == 2) {    measureTwoChild(0,halfWidth,halfHeight,padw,padh,landscape);  } else   if (viewCount == 3) {    measureTwoChild(0,quarterWidth,quarterHeight,padw,padw,!landscape);    int childSpecW;    int childSpecH;    childSpecW=MeasureSpec.makeMeasureSpec(halfWidth,MeasureSpec.EXACTLY);    childSpecH=MeasureSpec.makeMeasureSpec(halfHeight,MeasureSpec.EXACTLY);    measureChild(getChildAt(2),childSpecW,childSpecH);    LayoutParams lp3=(LayoutParams)getChildAt(2).getLayoutParams();    if (landscape) {      lp3.x=padw + mSpacing + quarterWidth;      lp3.y=padh;    } else {      lp3.x=padw;      lp3.y=padh + mSpacing + quarterHeight;    }  } else   if (viewCount == 4) {    measureTwoChild(0,quarterWidth,quarterHeight,padw,padw,!landscape);    if (landscape) {      measureTwoChild(2,quarterWidth,quarterHeight,padw + mSpacing + quarterWidth,padh,!landscape);    } else {      measureTwoChild(2,quarterWidth,quarterHeight,padw,padh + mSpacing + quarterHeight,!landscape);    }  } else   if (viewCount == 5) {    int childSpecW;    int childSpecH;    if (landscape) {      childSpecW=MeasureSpec.makeMeasureSpec(halfWidth,MeasureSpec.EXACTLY);      childSpecH=MeasureSpec.makeMeasureSpec(quarterWidth,MeasureSpec.EXACTLY);    } else {      childSpecW=MeasureSpec.makeMeasureSpec(quarterWidth,MeasureSpec.EXACTLY);      childSpecH=MeasureSpec.makeMeasureSpec(halfHeight,MeasureSpec.EXACTLY);    }    measureChild(getChildAt(0),childSpecW,childSpecH);    LayoutParams lp=(LayoutParams)getChildAt(0).getLayoutParams();    lp.x=padw;    lp.y=padh;    if (landscape) {      measureTwoChild(1,eighthWidht,eighthHeight,padw,padh + quarterHeight + mSpacing,landscape);      measureTwoChild(3,quarterWidth,quarterHeight,padw + mSpacing + quarterWidth,padh,!landscape);    } else {      measureTwoChild(1,eighthWidht,eighthHeight,padw + quarterWidth + mSpacing,padh,landscape);      measureTwoChild(3,quarterWidth,quarterHeight,padw,padh + mSpacing + quarterHeight,!landscape);    }  } else   if (viewCount == 6) {    int childSpecW;    int childSpecH;    if (landscape) {      childSpecW=MeasureSpec.makeMeasureSpec(halfWidth,MeasureSpec.EXACTLY);      childSpecH=MeasureSpec.makeMeasureSpec(quarterWidth,MeasureSpec.EXACTLY);    } else {      childSpecW=MeasureSpec.makeMeasureSpec(quarterWidth,MeasureSpec.EXACTLY);      childSpecH=MeasureSpec.makeMeasureSpec(halfHeight,MeasureSpec.EXACTLY);    }    measureChild(getChildAt(0),childSpecW,childSpecH);    LayoutParams lp=(LayoutParams)getChildAt(0).getLayoutParams();    lp.x=padw;    lp.y=padh;    measureChild(getChildAt(5),childSpecW,childSpecH);    lp=(LayoutParams)getChildAt(5).getLayoutParams();    if (landscape) {      lp.x=padw + halfWidth + mSpacing;      lp.y=padh + quarterHeight + mSpacing;    } else {      lp.x=padw + quarterWidth + mSpacing;      lp.y=padh + halfHeight + mSpacing;    }    if (landscape) {      measureTwoChild(1,eighthWidht,eighthHeight,padw,padh + quarterHeight + mSpacing,landscape);      measureTwoChild(3,eighthWidht,eighthHeight,padw + halfWidth + mSpacing,padh,landscape);    } else {      measureTwoChild(1,eighthWidht,eighthHeight,padw + quarterWidth + mSpacing,padh,landscape);      measureTwoChild(3,eighthWidht,eighthHeight,padw,padh + halfHeight + mSpacing,landscape);    }  }  setMeasuredDimension(resolveSize(widthSize,widthMeasureSpec),resolveSize(heightSize,heightMeasureSpec));}  }
class C{  private void updateCompatibleMap(Sequence sequence,Type type){  ArrayListSimpleList<Sequence> set=this.sequenceMap.get(type);  if (set == null) {    set=new ArrayListSimpleList<>();    this.sequenceMap.put(type,set);  }  if (Log.isLoggingOn())   Log.logLine("Adding sequence of type " + type);  boolean added=set.add(sequence);  sequenceCount++;  assert added;}  }
class C{  public void splitSpan(int n){  int x=(xKnots[n] + xKnots[n + 1]) / 2;  addKnot(x,getColor(x / 256.0f),knotTypes[n]);  rebuildGradient();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void testBasics() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  BigInteger large=BigInteger.valueOf(Long.MAX_VALUE).multiply(BigInteger.valueOf(64));  document.add(new BigIntegerPoint("field",large));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(1,searcher.count(BigIntegerPoint.newExactQuery("field",large)));  assertEquals(1,searcher.count(BigIntegerPoint.newRangeQuery("field",large.subtract(BigInteger.ONE),large.add(BigInteger.ONE))));  assertEquals(1,searcher.count(BigIntegerPoint.newSetQuery("field",large)));  assertEquals(0,searcher.count(BigIntegerPoint.newSetQuery("field",large.subtract(BigInteger.ONE))));  assertEquals(0,searcher.count(BigIntegerPoint.newSetQuery("field")));  reader.close();  writer.close();  dir.close();}  }
class C{  public static void main(String[] args) throws Exception {  System.out.println("building TreeVisualizer...");  weka.gui.treevisualizer.TreeBuild builder=new weka.gui.treevisualizer.TreeBuild();  weka.gui.treevisualizer.NodePlace arrange=new weka.gui.treevisualizer.PlaceNode2();  weka.gui.treevisualizer.Node top=builder.create(new java.io.StringReader("digraph atree { top [label=\"the top\"] a [label=\"the first node\"] b [label=\"the second nodes\"] c [label=\"comes off of first\"] top->a top->b b->c }"));  weka.gui.treevisualizer.TreeVisualizer tv=new weka.gui.treevisualizer.TreeVisualizer(null,top,arrange);  tv.setSize(800,600);  String filename=System.getProperty("java.io.tmpdir") + File.separator + "test.bmp";  System.out.println("outputting to '" + filename + "'...");  toOutput(new BMPWriter(),tv,new File(filename));  System.out.println("done!");}  }
class C{  public static void wakeLockWithScreenUnLock(Context context){  partialWakeUpLock(context);  releaseScreenLock(context);}  }
class C{  public NumericPayloadTokenFilterFactory(Map<String,String> args){  super(args);  payload=requireFloat(args,"payload");  typeMatch=require(args,"typeMatch");  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public boolean removeBlockedContact(ContactId contact) throws PayloadException, NetworkException {  HttpResponse response=mXdm.removeContactFromBlockedList(contact);  if ((response != null) && (response.isSuccessfullResponse() || response.isNotFoundResponse())) {    return true;  }  return false;}  }
class C{  public final TestSubscriber assertValue(Tuple<String,String> value){  String prefix="";  boolean passed=true;  if (done.getCount() != 0) {    prefix="Subscriber still running! ";  }  int s=values.size();  if (s != 1) {    fail(prefix,"Expected: " + value + ", Actual: "+ values,errors);    fail("value does not match");    passed=false;  }  Tuple<String,String> v=values.get(0);  if (!Objects.equals(value,v)) {    fail(prefix,"Expected: " + valueAndClass(value) + ", Actual: "+ valueAndClass(v),errors);    fail("value does not match");    passed=false;  }  pass("value matches",passed);  return this;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,ExpressionsPackage.PARENTHESIZED_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public GSSResult(String contextId,PrincipalId principalId){  assert principalId != null;  this.principalId=principalId;  this.contextId=contextId;  this.serverLeg=null;}  }
class C{  private TechnicalProduct createTechnicalProduct() throws Exception {  TechnicalProduct technicalProduct=new TechnicalProduct();  Organization organization=new Organization();  organization.setOrganizationId("testOrg");  organization.setRegistrationDate(123L);  organization.setCutOffDay(1);  mgr.persist(organization);  mgr.flush();  technicalProduct.setProvisioningURL("http://");  technicalProduct.setProvisioningVersion("1.0");  technicalProduct.setTechnicalProductId("technicalProductId");  technicalProduct.setOrganizationKey(100);  technicalProduct.setOrganization(organization);  technicalProduct.setBillingIdentifier(BillingAdapterIdentifier.NATIVE_BILLING.toString());  mgr.persist(technicalProduct);  mgr.flush();  return technicalProduct;}  }
class C{  private List<ClassSymbol> enterClassFiles(Map<String,JavaFileObject> classFiles){  ClassReader reader=ClassReader.instance(context);  Names names=Names.instance(context);  List<ClassSymbol> list=List.nil();  for (  Map.Entry<String,JavaFileObject> entry : classFiles.entrySet()) {    Name name=names.fromString(entry.getKey());    JavaFileObject file=entry.getValue();    if (file.getKind() != JavaFileObject.Kind.CLASS)     throw new AssertionError(file);    ClassSymbol cs;    if (isPkgInfo(file,JavaFileObject.Kind.CLASS)) {      Name packageName=Convert.packagePart(name);      PackageSymbol p=reader.enterPackage(packageName);      if (p.package_info == null)       p.package_info=reader.enterClass(Convert.shortName(name),p);      cs=p.package_info;      if (cs.classfile == null)       cs.classfile=file;    } else     cs=reader.enterClass(name,file);    list=list.prepend(cs);  }  return list.reverse();}  }
class C{  public boolean isShortestPossiblePushData(){  checkState(isPushData());  if (data == null)   return true;  if (data.length == 0)   return opcode == OP_0;  if (data.length == 1) {    byte b=data[0];    if (b >= 0x01 && b <= 0x10)     return opcode == OP_1 + b - 1;    if ((b & 0xFF) == 0x81)     return opcode == OP_1NEGATE;  }  if (data.length < OP_PUSHDATA1)   return opcode == data.length;  if (data.length < 256)   return opcode == OP_PUSHDATA1;  if (data.length < 65536)   return opcode == OP_PUSHDATA2;  return opcode == OP_PUSHDATA4;}  }
class C{  public String buildUri(String representationId,int segmentNumber,int bandwidth,long time){  StringBuilder builder=new StringBuilder();  for (int i=0; i < identifierCount; i++) {    builder.append(urlPieces[i]);    if (identifiers[i] == REPRESENTATION_ID) {      builder.append(representationId);    } else     if (identifiers[i] == NUMBER_ID) {      builder.append(String.format(Locale.US,identifierFormatTags[i],segmentNumber));    } else     if (identifiers[i] == BANDWIDTH_ID) {      builder.append(String.format(Locale.US,identifierFormatTags[i],bandwidth));    } else     if (identifiers[i] == TIME_ID) {      builder.append(String.format(Locale.US,identifierFormatTags[i],time));    }  }  builder.append(urlPieces[identifierCount]);  return builder.toString();}  }
class C{  public static boolean isValidPrefix(String s){  return s.indexOf(':') == -1;}  }
class C{  public void deferNotifyDataSetChanged(){  mDeferNotifyDataSetChanged=true;}  }
class C{  public static Builder builder(){  return new Builder(new ConfigureResponse());}  }
class C{  @getter(ENDED) public boolean isEnded(){  return ended || areAllNodeEnded();}  }
class C{  public void adjustPathSeparator(){  boolean isWindows=System.getProperty("os.name").contains("Windows");  boolean containsWindowsPathSeparator=false;  for (  String path : boardsAvailable) {    if (path.contains("\\")) {      containsWindowsPathSeparator=true;    }    if (containsWindowsPathSeparator) {      break;    }  }  if (!isWindows && containsWindowsPathSeparator) {    for (int i=0; i < boardsAvailable.size(); i++) {      if (boardsAvailable.get(i) == null) {        continue;      }      boardsAvailable.set(i,boardsAvailable.get(i).replace("\\","/"));    }    for (int i=0; i < boardsSelected.size(); i++) {      if (boardsSelected.get(i) == null) {        continue;      }      boardsSelected.set(i,boardsSelected.get(i).replace("\\","/"));    }  }}  }
class C{  DTLSConnectionState(CipherSuite cipherSuite,CompressionMethod compressionMethod,SecretKey encryptionKey,IvParameterSpec iv,SecretKey macKey){  if (cipherSuite == null) {    throw new NullPointerException("Cipher suite must not be null");  } else   if (compressionMethod == null) {    throw new NullPointerException("Compression method must not be null");  }  this.cipherSuite=cipherSuite;  this.compressionMethod=compressionMethod;  this.encryptionKey=encryptionKey;  this.iv=iv;  this.macKey=macKey;}  }
class C{  public void gotoFrame(int frameNumber) throws IOException {  print("gotoFrame",new String[]{Integer.toString(frameNumber)});}  }
class C{  public boolean isInitialRangeSet(){  return isInitialRangeSet(0);}  }
class C{  public String toString(CSSEngine eng){  StringBuffer sb=new StringBuffer(size * 8);  for (int i=0; i < size; i++) {    sb.append(rules[i].toString(eng));  }  return sb.toString();}  }
class C{  public OutputStream createOutputStream(String name) throws IOException {  name=fixFileName(name);  return Util.getImplementation().createStorageOutputStream(name);}  }
class C{  public boolean isInsideArea(){  return segIndex == INSIDE_AREA;}  }
class C{  public String useResamplingTipText(){  return "Whether resampling is used instead of reweighting.";}  }
class C{  @Inline private ObjectReference traceObjectWithOpportunisticCopy(TransitiveClosure trace,ObjectReference object,int allocator,boolean nurseryCollection){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert((nurseryCollection && !ObjectHeader.isMatureObject(object)) || (defrag.determined(true) && isDefragSource(object)));  Word priorStatusWord=ForwardingWord.attemptToForward(object);  if (ForwardingWord.stateIsForwardedOrBeingForwarded(priorStatusWord)) {    ObjectReference rtn=ForwardingWord.spinAndGetForwardedObject(object,priorStatusWord);    if (VM.VERIFY_ASSERTIONS && rtn == object)     VM.assertions._assert((nurseryCollection && ObjectHeader.testMarkState(object,markState)) || defrag.spaceExhausted() || ObjectHeader.isPinnedObject(object));    if (VM.VERIFY_ASSERTIONS && rtn != object)     VM.assertions._assert(nurseryCollection || !isDefragSource(rtn));    if (VM.VERIFY_ASSERTIONS && HeaderByte.NEEDS_UNLOGGED_BIT)     VM.assertions._assert(HeaderByte.isUnlogged(rtn));    return rtn;  } else {    byte priorState=(byte)(priorStatusWord.toInt() & 0xFF);    if (ObjectHeader.testMarkState(priorState,markState)) {      if (VM.VERIFY_ASSERTIONS)       VM.assertions._assert(nurseryCollection || defrag.spaceExhausted() || ObjectHeader.isPinnedObject(object));      ObjectHeader.returnToPriorStateAndEnsureUnlogged(object,priorState);      if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)       VM.assertions._assert(HeaderByte.isUnlogged(object));      return object;    } else {      ObjectReference newObject;      if (ObjectHeader.isPinnedObject(object) || (!nurseryCollection && defrag.spaceExhausted())) {        ObjectHeader.setMarkStateUnlogAndUnlock(object,priorState,markState);        newObject=object;        if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)         VM.assertions._assert(HeaderByte.isUnlogged(newObject));      } else {        if (VM.VERIFY_ASSERTIONS)         VM.assertions._assert(!ObjectHeader.isPinnedObject(object));        newObject=ForwardingWord.forwardObject(object,allocator);        if (VM.VERIFY_ASSERTIONS && Plan.NEEDS_LOG_BIT_IN_HEADER)         VM.assertions._assert(HeaderByte.isUnlogged(newObject));      }      if (VM.VERIFY_ASSERTIONS && Options.verbose.getValue() >= 9) {        Log.write("C[");        Log.write(object);        Log.write("/");        Log.write(getName());        Log.write("] -> ");        Log.write(newObject);        Log.write("/");        Log.write(Space.getSpaceForObject(newObject).getName());        Log.writeln("]");      }      if (!MARK_LINE_AT_SCAN_TIME)       markLines(newObject);      trace.processNode(newObject);      if (VM.VERIFY_ASSERTIONS) {        if (!((getSpaceForObject(newObject) != this) || (newObject == object) || (nurseryCollection && willNotMoveThisNurseryGC(newObject))|| (defrag.inDefrag() && willNotMoveThisGC(newObject)))) {          Log.write("   object: ");          Log.writeln(object);          Log.write("newObject: ");          Log.writeln(newObject);          Log.write("    space: ");          Log.writeln(getName());          Log.write(" nursery?: ");          Log.writeln(nurseryCollection);          Log.write("  mature?: ");          Log.writeln(ObjectHeader.isMatureObject(object));          Log.write("  wnmngc?: ");          Log.writeln(willNotMoveThisNurseryGC(newObject));          Log.write("  pinned?: ");          Log.writeln(ObjectHeader.isPinnedObject(object));          Space otherSpace=getSpaceForObject(newObject);          Log.write(" space(o): ");          Log.writeln(otherSpace == null ? "<NULL>" : otherSpace.getName());          VM.assertions._assert(false);        }      }      return newObject;    }  }}  }
class C{  private void gotoFileExplorerActivity(){  Intent intent=new Intent();  intent.setClass(this,FileExplorerActivity.class);  startActivityForResult(intent,RC_FILE_EXPLORER);}  }
class C{  public void clickButtonByLabel(String text){  TestUtils.clickButtonByLabel(text);}  }
class C{  public boolean areFriends(Object node1,Object node2){  Bag myFriends=new Bag();  socialNetwork.getEdges(node1,myFriends);  return bagContains(myFriends,node2);}  }
class C{  public Rfc822Msg(String msg,Encoding encoding){  super(Namespaces.APPS_NAMESPACE,EXTENSION_LOCAL_NAME,null,msg);  if (encoding == null) {    throw new IllegalArgumentException("Encoding may not be null.  Use " + "Encoding.NONE to specify no encoding.");  }  this.encoding=encoding;}  }
class C{  public void begin(){  startMillis=System.currentTimeMillis();  endMillis=startMillis;}  }
class C{  public RsFluent withHeader(final CharSequence header){  return new RsFluent(new RsWithHeader(this,header));}  }
class C{  public XmlDom(InputStream is) throws SAXException {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder;  try {    builder=factory.newDocumentBuilder();    Document doc=builder.parse(is);    this.root=(Element)doc.getDocumentElement();  } catch (  ParserConfigurationException e) {  }catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public FloatColumn(int nrows,int capacity,float defaultValue){  super(float.class,new Float(defaultValue));  if (capacity < nrows) {    throw new IllegalArgumentException("Capacity value can not be less than the row count.");  }  m_values=new float[capacity];  Arrays.fill(m_values,defaultValue);  m_size=nrows;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  childData=child.getData();  assertEquals("characterdataGetDataAssert","Margaret Martin",childData);}  }
class C{  public ConnectionClosedException(final String message){  super(message);}  }
class C{  private OrganizationRefToPaymentType createOrgRefToPt(OrganizationRole role,PaymentType paymentType,boolean usedAsDefault,OrganizationReference ref){  OrganizationRefToPaymentType toSave=new OrganizationRefToPaymentType();  toSave.setUsedAsDefault(usedAsDefault);  toSave.setUsedAsServiceDefault(usedAsDefault);  toSave.setOrganizationReference(ref);  toSave.setOrganizationRole(role);  toSave.setPaymentType(paymentType);  try {    dm.persist(toSave);  } catch (  NonUniqueBusinessKeyException e) {    handleImpossibleBKViolation(e);  }  return toSave;}  }
class C{  public JClassDependency(JClass cl){  _className=cl.getName();}  }
class C{  public static void enable(){  setDisabled(false);}  }
class C{  static public Automaton repeat(Automaton a,int count){  if (count == 0) {    return repeat(a);  }  List<Automaton> as=new ArrayList<>();  while (count-- > 0) {    as.add(a);  }  as.add(repeat(a));  return concatenate(as);}  }
class C{  public static boolean isUniqueNames(List<String> names){  List<String> unique=Lists.newArrayList();  for (  String n : names) {    if (unique.contains(n)) {      return false;    }    unique.add(n);  }  return true;}  }
class C{  public void removeEntries(int start,int length){  int sizes[]=getSizes();  int end=start + length;  int n=a.length - length;  a=new int[n];  for (int i=0; i < start; i++) {    a[i]=sizes[i];  }  for (int i=start; i < n; i++) {    a[i]=sizes[i + length];  }  setSizes(a);}  }
class C{  public BrokerPermissionsChecker(final Context context,final ILogger logger){  mContext=context;  mLogger=logger;}  }
class C{  public void runTest() throws Throwable {  Document doc;  EntityReference entRef;  Element entElement;  Node attrNode;  Text textNode;  Node removedNode;  Node newChild;  doc=(Document)load("staff",true);  entRef=doc.createEntityReference("ent4");  assertNotNull("createdEntRefNotNull",entRef);  entElement=(Element)entRef.getFirstChild();  assertNotNull("entElementNotNull",entElement);  attrNode=entElement.getAttributeNode("domestic");  textNode=(Text)attrNode.getFirstChild();  assertNotNull("attrChildNotNull",textNode);  newChild=doc.createTextNode("Yesterday");{    boolean success=false;    try {      removedNode=attrNode.replaceChild(newChild,textNode);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NO_MODIFICATION_ALLOWED_ERR);    }    assertTrue("setValue_throws_NO_MODIFICATION_ERR",success);  }}  }
class C{  public boolean enlistResource(XAResource xaRes) throws RollbackException, IllegalStateException, SystemException {  XAResource xar=null;  try {synchronized (this) {      if (status == Status.STATUS_MARKED_ROLLBACK) {        String exception="GlobalTransaction::enlistResource::Cannot enlist resource as the transaction has been marked for rollback";        LogWriterI18n writer=TransactionUtils.getLogWriterI18n();        if (VERBOSE)         writer.fine(exception);        throw new RollbackException(exception);      } else       if (status != Status.STATUS_ACTIVE) {        String exception=LocalizedStrings.GlobalTransaction_GLOBALTRANSACTION_ENLISTRESOURCE_CANNOT_ENLIST_A_RESOURCE_TO_A_TRANSACTION_WHICH_IS_NOT_ACTIVE.toLocalizedString();        LogWriterI18n writer=TransactionUtils.getLogWriterI18n();        if (VERBOSE)         writer.fine(exception);        throw new IllegalStateException(exception);      }      if (resourceMap.isEmpty()) {        xaRes.start(xid,XAResource.TMNOFLAGS);        int delay=(int)((expirationTime - System.currentTimeMillis()) / 1000);        try {          if (!DISABLE_TRANSACTION_TIMEOUT_SETTING) {            xaRes.setTransactionTimeout(delay);          }        } catch (        XAException xe) {          String exception=LocalizedStrings.GlobalTransaction_GLOBALTRANSACTION_ENLISTRESOURCE_EXCEPTION_OCCURED_IN_TRYING_TO_SET_XARESOURCE_TIMEOUT_DUE_TO_0_ERROR_CODE_1.toLocalizedString(new Object[]{xe,Integer.valueOf(xe.errorCode)});          LogWriterI18n writer=TransactionUtils.getLogWriterI18n();          if (VERBOSE)           writer.fine(exception);          throw new SystemException(exception);        }        resourceMap.put(xaRes,Boolean.TRUE);      } else {synchronized (this.resourceMap) {          Iterator iterator=resourceMap.keySet().iterator();          xar=(XAResource)iterator.next();        }        if (!xar.isSameRM(xaRes)) {          LogWriterI18n writer=TransactionUtils.getLogWriterI18n();          if (writer.severeEnabled())           writer.severe(LocalizedStrings.GlobalTransaction_GLOBALTRANSACTIONENLISTRESOURCEONLY_ONE_RESOUCE_MANAGER_SUPPORTED);          throw new SystemException(LocalizedStrings.GlobalTransaction_GLOBALTRANSACTIONENLISTRESOURCEONLY_ONE_RESOUCE_MANAGER_SUPPORTED.toLocalizedString());        } else {          xaRes.start(xid,XAResource.TMJOIN);          resourceMap.put(xaRes,Boolean.TRUE);        }      }    }  } catch (  Exception e) {    String addon=(e instanceof XAException ? ("Error Code =" + ((XAException)e).errorCode) : "");    LogWriterI18n writer=TransactionUtils.getLogWriterI18n();    if (VERBOSE)     writer.fine(LocalizedStrings.GLOBALTRANSACTION__ENLISTRESOURCE__ERROR_WHILE_ENLISTING_XARESOURCE_0_1.toLocalizedString(new Object[]{e,addon}),e);    SystemException sysEx=new SystemException(LocalizedStrings.GLOBALTRANSACTION__ENLISTRESOURCE__ERROR_WHILE_ENLISTING_XARESOURCE_0_1.toLocalizedString(new Object[]{e,addon}));    sysEx.initCause(e);    throw sysEx;  }  return true;}  }
class C{  public static PolicyExecutionPlan parseExecutionPlan(String policyDefinition,Map<String,StreamDefinition> inputStreamDefinitions) throws Exception {  Preconditions.checkNotNull(inputStreamDefinitions,"No inputStreams to connect from");  return parseExecutionPlan(SiddhiDefinitionAdapter.buildSiddhiExecutionPlan(policyDefinition,inputStreamDefinitions));}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  public boolean isCommand(){  return message.length() > 0 && message.charAt(0) == '/';}  }
class C{  Map<String,Table> buildTablesFromMap(Map<String,String[]> params){  Map<String,Table> tables=new TreeMap<String,Table>();  List<String> keyList=new ArrayList<String>();  keyList.addAll(params.keySet());  Collections.sort(keyList);  Collections.reverse(keyList);  for (  String key : keyList) {    String value=params.get(key)[0];    LOGGER.debug("key = " + key + " value="+ value);    if (key.startsWith("srcTableName_")) {      Table table=new Table(value);      tables.put(table.getSrcTableName(),table);    } else     if (key.startsWith(INGESTONLY)) {      String srcTableName=key.replaceAll(INGESTONLY,"");      Table table=tables.get(srcTableName);      table.setIngestOrNot(value);    } else     if (key.startsWith(PRIMARYKEYCOLUMN)) {      String srcTableName=key.replaceAll(PRIMARYKEYCOLUMN,"");      Table table=tables.get(srcTableName);      table.setPrimaryKeyColumn(value);    } else     if (key.startsWith(INCREMENTTYPE)) {      String srcTableName=key.replaceAll(INCREMENTTYPE,"");      Table table=tables.get(srcTableName);      table.setIncrementType(value);    } else     if (key.startsWith("destTableName_")) {      String srcTableName=key.replaceAll("destTableName_","");      Table table=tables.get(srcTableName);      table.setDestTableName(value);    } else     if (key.startsWith("srcColumnName_")) {      String srcColName=value;      String srcTableName=key.replaceAll("srcColumnName_","").replaceAll(ESCAPESEQ,"");      Column column=new Column(srcColName);      Table table=tables.get(srcTableName);      table.addColumn(column);    } else     if (key.startsWith("srcColumnDType_")) {      String srcColDType=value;      String srcTableName=key.replaceAll("srcColumnDType_","").replaceAll(ESCAPESEQ,"");      String srcColName=key.replaceAll("srcColumnDType_.+\\.","");      Table table=tables.get(srcTableName);      Column column=table.getColumnByName(srcColName);      column.setSrcDataType(srcColDType);    } else     if (key.startsWith("srcColumnIndex_")) {      String srcColIndex=value;      String srcTableName=key.replaceAll("srcColumnIndex_","").replaceAll(ESCAPESEQ,"");      String srcColName=key.replaceAll("srcColumnIndex_.+\\.","");      Table table=tables.get(srcTableName);      Column column=table.getColumnByName(srcColName);      column.setSrcColumnIndex(srcColIndex);    } else     if (key.startsWith("hiveDataType_")) {      String destColDType=value;      String srcTableName=key.replaceAll("hiveDataType_","").replaceAll(ESCAPESEQ,"");      String srcColName=key.replaceAll("hiveDataType_.+\\.","");      Table table=tables.get(srcTableName);      Column column=table.getColumnByName(srcColName);      column.setDestDataType(destColDType);    } else     if (key.startsWith("destColumnName_")) {      String destColName=value;      String srcTableName=key.replaceAll("destColumnName_","").replaceAll(ESCAPESEQ,"");      String srcColName=key.replaceAll("destColumnName_.+\\.","");      Table table=tables.get(srcTableName);      Column column=table.getColumnByName(srcColName);      column.setDestColumnName(destColName);    }  }  return tables;}  }
class C{  public static boolean doCacheHeaderValidation(final SolrQueryRequest solrReq,final HttpServletRequest req,final Method reqMethod,final HttpServletResponse resp){  if (Method.POST == reqMethod || Method.OTHER == reqMethod) {    return false;  }  final long lastMod=HttpCacheHeaderUtil.calcLastModified(solrReq);  final String etag=HttpCacheHeaderUtil.calcEtag(solrReq);  resp.setDateHeader("Last-Modified",lastMod);  resp.setHeader("ETag",etag);  if (checkETagValidators(req,resp,reqMethod,etag)) {    return true;  }  if (checkLastModValidators(req,resp,lastMod)) {    return true;  }  return false;}  }
class C{  protected int dismiss(int position){  opened.remove(position);  checked.remove(position);  int start=mLayoutManager.findFirstVisibleItemPosition();  int end=mLayoutManager.findLastVisibleItemPosition();  View view=swipeListView.getChildAt(position - start);  ++dismissAnimationRefCount;  if (position >= start && position <= end) {    performDismiss(view,position,false);    return view.getHeight();  } else {    pendingDismisses.add(new PendingDismissData(position,null));    return 0;  }}  }
class C{  @POST @Path("/property/payWaterTax") @Consumes(MediaType.APPLICATION_FORM_URLENCODED) @Produces(MediaType.APPLICATION_JSON) public String payWateTax(@FormParam("consumerNo") String consumerNo,@FormParam("paymentMode") String paymentMode,@FormParam("totalAmount") BigDecimal totalAmount,@FormParam("paidBy") String paidBy,@FormParam("username") String username,@FormParam("password") String password) throws JsonGenerationException, JsonMappingException, IOException {  ErrorDetails errorDetails=propertyExternalService.validatePaymentDetails(consumerNo,paymentMode,totalAmount,paidBy);  if (null != errorDetails) {    return getJSONResponse(errorDetails);  } else {    errorDetails=propertyExternalService.payWaterTax(consumerNo,paymentMode,totalAmount,paidBy);    return getJSONResponse(errorDetails);  }}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  byte[] src=get();  byte[] dest=new byte[src.length];  ConstPool cp=getConstPool();  InnerClassesAttribute attr=new InnerClassesAttribute(newCp,dest);  int n=ByteArray.readU16bit(src,0);  ByteArray.write16bit(n,dest,0);  int j=2;  for (int i=0; i < n; ++i) {    int innerClass=ByteArray.readU16bit(src,j);    int outerClass=ByteArray.readU16bit(src,j + 2);    int innerName=ByteArray.readU16bit(src,j + 4);    int innerAccess=ByteArray.readU16bit(src,j + 6);    if (innerClass != 0)     innerClass=cp.copy(innerClass,newCp,classnames);    ByteArray.write16bit(innerClass,dest,j);    if (outerClass != 0)     outerClass=cp.copy(outerClass,newCp,classnames);    ByteArray.write16bit(outerClass,dest,j + 2);    if (innerName != 0)     innerName=cp.copy(innerName,newCp,classnames);    ByteArray.write16bit(innerName,dest,j + 4);    ByteArray.write16bit(innerAccess,dest,j + 6);    j+=8;  }  return attr;}  }
class C{  public CheckpointedTaxiRideSource(String dataFilePath){  this(dataFilePath,1);}  }
class C{  public static Address readFrom(final Deserializer deserializer,final String label,final AddressEncoding encoding){switch (encoding) {case PUBLIC_KEY:    return createAddressFromPublicKeyBytes(deserializer.readBytes(label));case COMPRESSED:default :  return createAddressFromEncodedAddress(deserializer.readString(label));}}  }
class C{  public static ScrollViewLicenseFragment newInstance(ArrayList<Integer> licenseIDs){  return (ScrollViewLicenseFragment)onNewInstance(new ScrollViewLicenseFragment(),licenseIDs);}  }
class C{  public boolean hasSingleExit(){  return getLoopExits().size() == 1;}  }
class C{  public void appendCloseStrongTag(){  text.append("</strong>");}  }
class C{  private void sb0(int a,int b,int c,int d){  int t1=a ^ d;  int t3=c ^ t1;  int t4=b ^ t3;  X3=(a & d) ^ t4;  int t7=a ^ (b & t1);  X2=t4 ^ (c | t7);  int t12=X3 & (t3 ^ t7);  X1=(~t3) ^ t12;  X0=t12 ^ (~t7);}  }
class C{  public CollectionProductsMap(Long collection_id){  this(collection_id,null,null,0,-1);}  }
class C{  public boolean bagContains(Bag bag,Object obj){  for (  Object item : bag) {    if (item == obj) {      return true;    }  }  return false;}  }
class C{  private static void bindPreferenceSummaryToValue(Preference preference){  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,PreferenceManager.getDefaultSharedPreferences(preference.getContext()).getString(preference.getKey(),""));}  }
class C{  private RVMAnnotation(TypeReference type,AnnotationMember[] elementValuePairs){  this.type=type;  this.elementValuePairs=elementValuePairs;}  }
class C{  public int selectNumJobs(Connection conn) throws SQLException {  PreparedStatement ps=null;  ResultSet rs=null;  try {    int count=0;    ps=conn.prepareStatement(rtp(SELECT_NUM_JOBS));    rs=ps.executeQuery();    if (rs.next()) {      count=rs.getInt(1);    }    return count;  }  finally {    closeResultSet(rs);    closeStatement(ps);  }}  }
class C{  public IndirectCall(final Module module,final Function function,final Address address){  this.module=module;  this.function=function;  this.address=address;}  }
