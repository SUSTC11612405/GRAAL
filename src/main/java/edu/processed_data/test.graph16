class C{  public InvalidPluginException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void testNameAndTenantIdSetWhenFetchingVariables(){  String tenantId="testTenantId";  String processInstanceName="myProcessInstance";  String deploymentId=repositoryService.createDeployment().addClasspathResource("org/activiti/engine/test/history/oneTaskProcess.bpmn20.xml").tenantId(tenantId).deploy().getId();  Map<String,Object> vars=new HashMap<String,Object>();  vars.put("name","Kermit");  vars.put("age",60);  ProcessInstance processInstance=runtimeService.startProcessInstanceByKeyAndTenantId("oneTaskProcess",vars,tenantId);  runtimeService.setProcessInstanceName(processInstance.getId(),processInstanceName);  List<ProcessInstance> processInstances=runtimeService.createProcessInstanceQuery().includeProcessVariables().list();  assertEquals(1,processInstances.size());  processInstance=processInstances.get(0);  assertEquals(processInstanceName,processInstance.getName());  assertEquals(tenantId,processInstance.getTenantId());  Map<String,Object> processInstanceVars=processInstance.getProcessVariables();  assertEquals(2,processInstanceVars.size());  assertEquals("Kermit",processInstanceVars.get("name"));  assertEquals(60,processInstanceVars.get("age"));  List<HistoricProcessInstance> historicProcessInstances=historyService.createHistoricProcessInstanceQuery().includeProcessVariables().list();  assertEquals(1,historicProcessInstances.size());  HistoricProcessInstance historicProcessInstance=historicProcessInstances.get(0);  assertEquals(processInstanceName,historicProcessInstance.getName());  assertEquals(tenantId,historicProcessInstance.getTenantId());  Map<String,Object> historicProcessInstanceVars=historicProcessInstance.getProcessVariables();  assertEquals(2,historicProcessInstanceVars.size());  assertEquals("Kermit",historicProcessInstanceVars.get("name"));  assertEquals(60,historicProcessInstanceVars.get("age"));  repositoryService.deleteDeployment(deploymentId,true);}  }
class C{  public void clearPendingDownloadNotifications(){  if (mSharedPrefs.contains(DOWNLOAD_NOTIFICATION_IDS)) {    Set<String> downloadIds=getStoredDownloadInfo(DOWNLOAD_NOTIFICATION_IDS);    for (    String id : downloadIds) {      int notificationId=parseNotificationId(id);      if (notificationId > 0) {        mDownloadNotifier.cancelNotification(notificationId);        Log.w(TAG,"Download failed: Cleared download id:" + id);      }    }    mSharedPrefs.edit().remove(DOWNLOAD_NOTIFICATION_IDS).apply();  }  if (mSharedPrefs.contains(PENDING_OMA_DOWNLOADS)) {    Set<String> omaDownloads=getStoredDownloadInfo(PENDING_OMA_DOWNLOADS);    for (    String omaDownload : omaDownloads) {      OMAEntry entry=OMAEntry.parseOMAEntry(omaDownload);      clearPendingOMADownload(entry.mDownloadId,entry.mInstallNotifyURI);    }  }}  }
class C{  public void takeDown(){synchronized (System.out) {    System.out.println("Finished..." + (new SimpleDateFormat("yyyy.MM.dd HH:mm:ss")).format(new Date()));  }}  }
class C{  protected GenericDelegator(){}  }
class C{  public VideoEditQuery privacyComment(List<String> value){  return unsafeParam("privacy_comment",value);}  }
class C{  public static UByte ubyte(short value) throws NumberFormatException {  return UByte.valueOf(value);}  }
class C{  @Override public boolean equals(Object that){  if (this == that) {    return true;  }  if (that == null) {    return false;  }  if (getClass() != that.getClass()) {    return false;  }  SysSession other=(SysSession)that;  return (this.getId() == null ? other.getId() == null : this.getId().equals(other.getId())) && (this.getSessionId() == null ? other.getSessionId() == null : this.getSessionId().equals(other.getSessionId())) && (this.getAccount() == null ? other.getAccount() == null : this.getAccount().equals(other.getAccount()))&& (this.getIp() == null ? other.getIp() == null : this.getIp().equals(other.getIp()))&& (this.getStartTime() == null ? other.getStartTime() == null : this.getStartTime().equals(other.getStartTime()))&& (this.getEnable() == null ? other.getEnable() == null : this.getEnable().equals(other.getEnable()))&& (this.getRemark() == null ? other.getRemark() == null : this.getRemark().equals(other.getRemark()))&& (this.getCreateTime() == null ? other.getCreateTime() == null : this.getCreateTime().equals(other.getCreateTime()))&& (this.getCreateBy() == null ? other.getCreateBy() == null : this.getCreateBy().equals(other.getCreateBy()))&& (this.getUpdateTime() == null ? other.getUpdateTime() == null : this.getUpdateTime().equals(other.getUpdateTime()))&& (this.getUpdateBy() == null ? other.getUpdateBy() == null : this.getUpdateBy().equals(other.getUpdateBy()));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectBase_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201241,skilltarget,skillcaster,skillname);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public void train(String corpusFileName,String pipelineModelFileName,int numFeatures){  JavaRDD<String> jrdd=jsc.textFile(corpusFileName);  train(jrdd.collect(),pipelineModelFileName,numFeatures);}  }
class C{  public void uncollapse(Set<Integer> toUncollapse,Set<Integer> collapsedIds){  Set<Integer> newCollapsed=new HashSet<>();  for (Node v=getFirstNode(); v != null; v=v.getNext()) {    int vId=(Integer)v.getInfo();    if (toUncollapse.contains(vId) && collapsedIds.contains(vId)) {      for (Edge e=v.getFirstOutEdge(); e != null; e=v.getNextOutEdge(e)) {        Node w=e.getTarget();        newCollapsed.add((Integer)w.getInfo());      }    }  }  collapsedIds.removeAll(toUncollapse);  collapsedIds.addAll(newCollapsed);}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  if (security != null) {    final int lastDot=className.lastIndexOf(".");    String packageName=className;    if (lastDot != -1)     packageName=className.substring(0,lastDot);    security.checkPackageAccess(packageName);  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  public static String stringifyException(Throwable e){  StringWriter stm=new StringWriter();  PrintWriter wrt=new PrintWriter(stm);  e.printStackTrace(wrt);  wrt.close();  return stm.toString();}  }
class C{  public List asList(){  List result=new LinkedList();  for (Iterator it=iterator(); it.hasNext(); ) {    result.add(it.next());  }  return result;}  }
class C{  public synchronized void close(){  done=true;  if (line != null && line.isOpen()) {    line.close();    line=null;    notify();  }}  }
class C{  public double distance(final Vector2D p){  return FastMath.abs(getOffset(p));}  }
class C{  public void clearAllBits(){  for (int i=0; i < types.size() * locals.size(); i++) {    clear(i);  }}  }
class C{  public final <V extends Enum<V> & PaginationFilterProperty>boolean test(T object,Class<V> enumType){  if (StringUtils.isBlank(filter)) {    return true;  } else   if (filter.contains(SEPARATOR)) {    if (StringUtils.containsNone(StringUtils.substringBefore(filter,SEPARATOR),DELIMITER)) {      return testFields(object,enumType);    }    return testFields(object,enumType) && testFulltext(object,enumType);  }  return testFulltext(object,enumType);}  }
class C{  public static boolean isNumberDelta(String string){  String s=string.trim();  if (s.length() < 2)   return false;  return (s.charAt(0) == '+' || s.charAt(0) == '-') && isUnsignedNumber(s.substring(1));}  }
class C{  public void __setEntryInfo(EntryInfo entryInfo){  this.entryInfo=entryInfo;}  }
class C{  protected MessagesGetChatQueryWithChatIds chatIds(Integer... value){  return unsafeParam("chat_ids",value);}  }
class C{  public static List inlineSite(SootMethod inlinee,Stmt toInline,SootMethod container,Map options){  boolean enableNullPointerCheckInsertion=PhaseOptions.getBoolean(options,"insert-null-checks");  boolean enableRedundantCastInsertion=PhaseOptions.getBoolean(options,"insert-redundant-casts");  Hierarchy hierarchy=Scene.v().getActiveHierarchy();  JimpleBody containerB=(JimpleBody)container.getActiveBody();  Chain<Unit> containerUnits=containerB.getUnits();  if (!(inlinee.getDeclaringClass().isApplicationClass() || inlinee.getDeclaringClass().isLibraryClass()))   return null;  Body inlineeB=inlinee.getActiveBody();  Chain<Unit> inlineeUnits=inlineeB.getUnits();  InvokeExpr ie=toInline.getInvokeExpr();  Value thisToAdd=null;  if (ie instanceof InstanceInvokeExpr)   thisToAdd=((InstanceInvokeExpr)ie).getBase();{    boolean targetUsesThis=true;    if (enableRedundantCastInsertion && ie instanceof InstanceInvokeExpr && targetUsesThis) {      SootClass localType, parameterType;      localType=((RefType)((InstanceInvokeExpr)ie).getBase().getType()).getSootClass();      parameterType=inlinee.getDeclaringClass();      if (localType.isInterface() || hierarchy.isClassSuperclassOf(localType,parameterType)) {        Local castee=Jimple.v().newLocal("__castee",parameterType.getType());        containerB.getLocals().add(castee);        containerB.getUnits().insertBefore(Jimple.v().newAssignStmt(castee,Jimple.v().newCastExpr(((InstanceInvokeExpr)ie).getBase(),parameterType.getType())),toInline);        thisToAdd=castee;      }    }  }{    if (enableNullPointerCheckInsertion && ie instanceof InstanceInvokeExpr) {      boolean caught=TrapManager.isExceptionCaughtAt(Scene.v().getSootClass("java.lang.NullPointerException"),toInline,containerB);      if (caught) {        Stmt insertee=Jimple.v().newIfStmt(Jimple.v().newNeExpr(((InstanceInvokeExpr)ie).getBase(),NullConstant.v()),toInline);        containerB.getUnits().insertBefore(insertee,toInline);        ((IfStmt)insertee).setTarget(toInline);        ThrowManager.addThrowAfter(containerB,insertee);      } else {        Stmt throwPoint=ThrowManager.getNullPointerExceptionThrower(containerB);        containerB.getUnits().insertBefore(Jimple.v().newIfStmt(Jimple.v().newEqExpr(((InstanceInvokeExpr)ie).getBase(),NullConstant.v()),throwPoint),toInline);      }    }  }{    if (inlinee.isSynchronized()) {      if (ie instanceof InstanceInvokeExpr)       SynchronizerManager.v().synchronizeStmtOn(toInline,containerB,(Local)((InstanceInvokeExpr)ie).getBase()); else {        if (!container.getDeclaringClass().isInterface()) {          Local l=SynchronizerManager.v().addStmtsToFetchClassBefore(containerB,toInline);          SynchronizerManager.v().synchronizeStmtOn(toInline,containerB,l);        }      }    }  }  Stmt exitPoint=(Stmt)containerUnits.getSuccOf(toInline);  HashMap<Local,Local> oldLocalsToNew=new HashMap<Local,Local>();  HashMap<Stmt,Stmt> oldUnitsToNew=new HashMap<Stmt,Stmt>();{    Stmt cursor=toInline;    for (Iterator<Unit> currIt=inlineeUnits.iterator(); currIt.hasNext(); ) {      final Stmt curr=(Stmt)currIt.next();      Stmt currPrime=(Stmt)curr.clone();      if (currPrime == null)       throw new RuntimeException("getting null from clone!");      currPrime.addAllTagsOf(curr);      containerUnits.insertAfter(currPrime,cursor);      cursor=currPrime;      oldUnitsToNew.put(curr,currPrime);    }    for (Iterator<Local> lIt=inlineeB.getLocals().iterator(); lIt.hasNext(); ) {      final Local l=lIt.next();      Local lPrime=(Local)l.clone();      if (lPrime == null)       throw new RuntimeException("getting null from local clone!");      containerB.getLocals().add(lPrime);      oldLocalsToNew.put(l,lPrime);    }  }{    Iterator<Unit> it=containerUnits.iterator(containerUnits.getSuccOf(toInline),containerUnits.getPredOf(exitPoint));    while (it.hasNext()) {      Stmt patchee=(Stmt)it.next();      for (      ValueBox box : patchee.getUseAndDefBoxes()) {        if (!(box.getValue() instanceof Local))         continue;        Local lPrime=oldLocalsToNew.get(box.getValue());        if (lPrime != null)         box.setValue(lPrime); else         throw new RuntimeException("local has no clone!");      }      for (      UnitBox box : patchee.getUnitBoxes()) {        Unit uPrime=(oldUnitsToNew.get(box.getUnit()));        if (uPrime != null)         box.setUnit(uPrime); else         throw new RuntimeException("inlined stmt has no clone!");      }    }  }{    Trap prevTrap=null;    for (    Trap t : inlineeB.getTraps()) {      Stmt newBegin=oldUnitsToNew.get(t.getBeginUnit()), newEnd=oldUnitsToNew.get(t.getEndUnit()), newHandler=oldUnitsToNew.get(t.getHandlerUnit());      if (newBegin == null || newEnd == null || newHandler == null)       throw new RuntimeException("couldn't map trap!");      Trap trap=Jimple.v().newTrap(t.getException(),newBegin,newEnd,newHandler);      if (prevTrap == null)       containerB.getTraps().addFirst(trap); else       containerB.getTraps().insertAfter(trap,prevTrap);      prevTrap=trap;    }  }{    Iterator<Unit> it=containerUnits.iterator(containerUnits.getSuccOf(toInline),containerUnits.getPredOf(exitPoint));    ArrayList<Unit> cuCopy=new ArrayList<Unit>();    while (it.hasNext()) {      cuCopy.add(it.next());    }    for (    Unit u : cuCopy) {      Stmt s=(Stmt)u;      if (s instanceof IdentityStmt) {        IdentityRef rhs=(IdentityRef)((IdentityStmt)s).getRightOp();        if (rhs instanceof CaughtExceptionRef)         continue; else         if (rhs instanceof ThisRef) {          if (!(ie instanceof InstanceInvokeExpr))           throw new RuntimeException("thisref with no receiver!");          containerUnits.swapWith(s,Jimple.v().newAssignStmt(((IdentityStmt)s).getLeftOp(),thisToAdd));        } else         if (rhs instanceof ParameterRef) {          ParameterRef pref=(ParameterRef)rhs;          containerUnits.swapWith(s,Jimple.v().newAssignStmt(((IdentityStmt)s).getLeftOp(),ie.getArg(pref.getIndex())));        }      } else       if (s instanceof ReturnStmt) {        if (toInline instanceof InvokeStmt) {          containerUnits.swapWith(s,Jimple.v().newGotoStmt(exitPoint));          continue;        }        if (!(toInline instanceof AssignStmt))         throw new RuntimeException("invoking stmt neither InvokeStmt nor AssignStmt!??!?!");        Value ro=((ReturnStmt)s).getOp();        Value lhs=((AssignStmt)toInline).getLeftOp();        AssignStmt as=Jimple.v().newAssignStmt(lhs,ro);        containerUnits.insertBefore(as,s);        containerUnits.swapWith(s,Jimple.v().newGotoStmt(exitPoint));      } else       if (s instanceof ReturnVoidStmt)       containerUnits.swapWith(s,Jimple.v().newGotoStmt(exitPoint));    }  }  List<Unit> newStmts=new ArrayList<Unit>();  for (Iterator<Unit> i=containerUnits.iterator(containerUnits.getSuccOf(toInline),containerUnits.getPredOf(exitPoint)); i.hasNext(); ) {    newStmts.add(i.next());  }  containerUnits.remove(toInline);  LocalNameStandardizer.v().transform(containerB,"ji.lns");  return newStmts;}  }
class C{  @Override public boolean isApplicable(){  if (ProgramProperties.get("always-allow-open-fviewer",false))   return true;  final Document doc=((Director)getDir()).getDocument();  return doc.getActiveViewers().contains(cName);}  }
class C{  public static Map<String,Object> updateTrackingNumber(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=new HashMap<String,Object>();  Delegator delegator=dctx.getDelegator();  String orderId=(String)context.get("orderId");  String shipGroupSeqId=(String)context.get("shipGroupSeqId");  String trackingNumber=(String)context.get("trackingNumber");  try {    GenericValue shipGroup=EntityQuery.use(delegator).from("OrderItemShipGroup").where("orderId",orderId,"shipGroupSeqId",shipGroupSeqId).queryOne();    if (shipGroup == null) {      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);      result.put(ModelService.ERROR_MESSAGE,"ERROR: No order shipment preference found!");    } else {      shipGroup.set("trackingNumber",trackingNumber);      shipGroup.store();      result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);    }  } catch (  GenericEntityException e) {    Debug.logError(e,module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,"ERROR: Could not set tracking number (" + e.getMessage() + ").");  }  return result;}  }
class C{  public static boolean before(GenericRecord first,GenericRecord second,String timestampFieldName){  return compareTimestamp(first,second,timestampFieldName) == -1;}  }
class C{  private static String validateOrderItemShipGroupAssoc(Delegator delegator,LocalDispatcher dispatcher,GenericValue orderItem,BigDecimal totalQuantity,GenericValue lastOISGAssoc,GenericValue userLogin,Locale locale) throws GeneralException {  String result=null;  BigDecimal qty=(BigDecimal)orderItem.get("quantity");  if (UtilValidate.isEmpty(qty)) {    qty=BigDecimal.ZERO;  }  BigDecimal cancelQty=(BigDecimal)orderItem.get("cancelQuantity");  if (UtilValidate.isEmpty(cancelQty)) {    cancelQty=BigDecimal.ZERO;  }  BigDecimal orderItemQuantity=qty.subtract(cancelQty);  if (totalQuantity.compareTo(orderItemQuantity) < 0) {    BigDecimal adjustementQuantity=orderItemQuantity.subtract(totalQuantity);    BigDecimal lastOISGAssocQuantity=(BigDecimal)lastOISGAssoc.get("quantity");    if (UtilValidate.isEmpty(lastOISGAssocQuantity)) {      lastOISGAssocQuantity=BigDecimal.ZERO;    }    BigDecimal oisgaQty=lastOISGAssocQuantity.add(adjustementQuantity);    lastOISGAssoc.set("quantity",oisgaQty);    lastOISGAssoc.store();    GenericValue orderHeader=EntityQuery.use(delegator).from("OrderHeader").where("orderId",lastOISGAssoc.get("orderId")).queryOne();    if (UtilValidate.isNotEmpty(orderHeader)) {      Map<String,Object> cancelOrderInventoryReservationMap=UtilMisc.toMap("userLogin",userLogin,"locale",locale);      cancelOrderInventoryReservationMap.put("orderId",lastOISGAssoc.get("orderId"));      cancelOrderInventoryReservationMap.put("orderItemSeqId",lastOISGAssoc.get("orderItemSeqId"));      cancelOrderInventoryReservationMap.put("shipGroupSeqId",lastOISGAssoc.get("shipGroupSeqId"));      Map<String,Object> cancelResp=dispatcher.runSync("cancelOrderInventoryReservation",cancelOrderInventoryReservationMap);      if (ServiceUtil.isError(cancelResp)) {        throw new GeneralException(ServiceUtil.getErrorMessage(cancelResp));      }      String productStoreId=orderHeader.getString("productStoreId");      String orderTypeId=orderHeader.getString("orderTypeId");      List<String> resErrorMessages=new LinkedList<String>();      if (Debug.infoOn())       Debug.logInfo("Calling reserve inventory...",module);      reserveInventory(delegator,dispatcher,userLogin,locale,UtilMisc.toList(lastOISGAssoc),null,UtilMisc.<String,GenericValue>toMap(lastOISGAssoc.getString("orderItemSeqId"),orderItem),orderTypeId,productStoreId,resErrorMessages);    }    Map<String,Object> messageParameters=new HashMap<String,Object>();    messageParameters.put("shipByDate",lastOISGAssoc.getRelatedOne("OrderItemShipGroup",false).getString("shipByDate"));    messageParameters.put("adjustementQuantity",adjustementQuantity);    return "Order OISG Assoc Quantity Auto Completed";  }  return result;}  }
class C{  private StyledLayerDescriptor createSLD(){  String sldContents="<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>" + "<StyledLayerDescriptor version=\"1.0.0\" " + "    xsi:schemaLocation=\"http://www.opengis.net/sld StyledLayerDescriptor.xsd\" "+ "    xmlns=\"http://www.opengis.net/sld\" "+ "    xmlns:ogc=\"http://www.opengis.net/ogc\" "+ "    xmlns:xlink=\"http://www.w3.org/1999/xlink\" "+ "    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">"+ "  <NamedLayer>"+ "    <Name>Attribute-based point</Name>"+ "    <UserStyle>"+ "      <Title>GeoServer SLD Cook Book: Attribute-based point</Title>"+ "      <FeatureTypeStyle>"+ "        <Rule>"+ "          <Name>SmallPop</Name>"+ "          <Title>1 to 50000</Title>"+ "          <ogc:Filter>"+ "            <ogc:PropertyIsLessThan>"+ "              <ogc:PropertyName>pop</ogc:PropertyName>"+ "              <ogc:Literal>50000</ogc:Literal>"+ "            </ogc:PropertyIsLessThan>"+ "          </ogc:Filter>"+ "          <PointSymbolizer>"+ "            <Graphic>"+ "              <Mark>"+ "                <WellKnownName>star</WellKnownName>"+ "                <Fill>"+ "                  <CssParameter name=\"fill\">#0033CC</CssParameter>"+ "                </Fill>"+ "              </Mark>"+ "              <Rotation>"+ "                <ogc:PropertyName>angle</ogc:PropertyName>"+ "              </Rotation>"+ "              <Size>"+ "                <ogc:PropertyName>size</ogc:PropertyName>"+ "              </Size>"+ "            </Graphic>"+ "          </PointSymbolizer>"+ "        </Rule>"+ "        <Rule>"+ "          <Name>MediumPop</Name>"+ "          <Title>50000 to 500000</Title>"+ "          <ogc:Filter>"+ "            <ogc:PropertyIsLessThan>"+ "              <ogc:PropertyName>pop</ogc:PropertyName>"+ "              <ogc:Literal>500000</ogc:Literal>"+ "            </ogc:PropertyIsLessThan>"+ "          </ogc:Filter>"+ "          <PointSymbolizer>"+ "            <Graphic>"+ "              <Mark>"+ "                <WellKnownName>star</WellKnownName>"+ "                <Fill>"+ "                  <CssParameter name=\"fill\">#0033CC</CssParameter>"+ "                </Fill>"+ "              </Mark>"+ "              <Rotation>"+ "                <ogc:PropertyName>angle</ogc:PropertyName>"+ "              </Rotation>"+ "              <Size>"+ "                <ogc:PropertyName>size</ogc:PropertyName>"+ "              </Size>"+ "            </Graphic>"+ "          </PointSymbolizer>"+ "          <PointSymbolizer>"+ "            <Graphic>"+ "              <Mark>"+ "                <WellKnownName>circle</WellKnownName>"+ "                <Fill>"+ "                  <CssParameter name=\"fill\">#123456</CssParameter>"+ "                </Fill>"+ "              </Mark>"+ "              <Rotation>"+ "                <ogc:PropertyName>angle</ogc:PropertyName>"+ "              </Rotation>"+ "              <Size>"+ "                <ogc:PropertyName>size</ogc:PropertyName>"+ "              </Size>"+ "            </Graphic>"+ "          </PointSymbolizer>"+ "        </Rule>"+ "        <Rule>"+ "          <Name>LargePop</Name>"+ "          <Title>500000 to 900000</Title>"+ "          <ogc:Filter>"+ "            <ogc:PropertyIsLessThan>"+ "              <ogc:PropertyName>pop</ogc:PropertyName>"+ "              <ogc:Literal>900000</ogc:Literal>"+ "            </ogc:PropertyIsLessThan>"+ "          </ogc:Filter>"+ "          <PointSymbolizer>"+ "            <Graphic>"+ "              <Mark>"+ "                <WellKnownName>star</WellKnownName>"+ "                <Fill>"+ "                  <CssParameter name=\"fill\">#0033CC</CssParameter>"+ "                </Fill>"+ "              </Mark>"+ "              <Rotation>"+ "                <ogc:PropertyName>angle</ogc:PropertyName>"+ "              </Rotation>"+ "              <Size>"+ "                <ogc:PropertyName>size</ogc:PropertyName>"+ "              </Size>"+ "            </Graphic>"+ "          </PointSymbolizer>"+ "        </Rule>"+ "      </FeatureTypeStyle>"+ "    </UserStyle>"+ "  </NamedLayer>"+ "</StyledLayerDescriptor>";  SLDData sldData=new SLDData(new StyleWrapper(null,"test.sld"),sldContents);  sldData.setDataSourceProperties(DataSourceConnectorFactory.getNoDataSource());  StyledLayerDescriptor sld=SLDUtils.createSLDFromString(sldData);  return sld;}  }
class C{  public DataSource(DataSource master){  this.master=master;}  }
class C{  public void requestPasswordForShareViaLink(boolean createShare){  SharePasswordDialogFragment dialog=SharePasswordDialogFragment.newInstance(mFile,createShare);  dialog.show(getFragmentManager(),SharePasswordDialogFragment.PASSWORD_FRAGMENT);}  }
class C{  public void addNumberFormat(EsriNumberFormatInterface numberFormatObj){  numberFormatMap.put(numberFormatObj.getNumberFormatClass(),numberFormatObj);}  }
class C{  public double calcTotalValues(){  Iterator iIter=hDistro.entrySet().iterator();  double dSum=0.0;  while (iIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iIter.next();    dSum+=(Double)(e.getValue());  }  return dSum;}  }
class C{  protected void makeDecisionTablesConsistentWithPersistedVersions(ParsedDeployment parsedDeployment){  for (  DecisionTableEntity decisionTable : parsedDeployment.getAllDecisionTables()) {    DecisionTableEntity persistedDecisionTable=dmnDeploymentHelper.getPersistedInstanceOfDecisionTable(decisionTable);    if (persistedDecisionTable != null) {      decisionTable.setId(persistedDecisionTable.getId());      decisionTable.setVersion(persistedDecisionTable.getVersion());    }  }}  }
class C{  public static boolean isVisaElectron(String cc){  String first6digs=cc.substring(0,6);  String first4digs=cc.substring(0,4);  if ((cc.length() == 16) && (first6digs.equals("417500") || first4digs.equals("4917") || first4digs.equals("4913")|| first4digs.equals("4508")|| first4digs.equals("4844")|| first4digs.equals("4027")))   return isCreditCard(cc);  return false;}  }
class C{  public MethodInfoEditor(MethodInfo mi){  this.setModalityType(ModalityType.APPLICATION_MODAL);  setBounds(100,100,450,300);  getContentPane().setLayout(new BorderLayout());  contentPanel.setBorder(new EmptyBorder(5,5,5,5));  getContentPane().add(contentPanel,BorderLayout.CENTER);  contentPanel.setLayout(new BorderLayout());  JLabel lblMethodDescription=null;  this.methodInfo=mi;{    lblMethodDescription=new JLabel("New label");    lblMethodDescription.setBounds(10,11,414,14);    contentPanel.add(lblMethodDescription);  }{    JScrollPane scrollPane=new JScrollPane();    scrollPane.setBounds(10,35,414,183);    JPanel panel=new JPanel(new GridBagLayout());    lblMethodDescription.setText(mi.getClassName() + ":" + mi.getHumanReadableDescription());    System.out.println("debug size: " + mi.getMethodParameters().size());    for (int i=0; i < mi.getMethodParameters().size(); i++) {      ParameterInfo pi=mi.getMethodParameters().get(i);      String string=pi.getParameterValue().toString();      int rows=1;      if (string.contains("\n")) {        for (int l=0; l < string.length(); l++) {          if (string.charAt(l) == '\n')           rows++;        }      } else {        rows=1;      }      JTextArea textArea=new JTextArea(pi.getParameterValue().toString(),rows,20);      GridBagConstraints constraints=new GridBagConstraints();      constraints.gridx=1;      constraints.gridy=i;      constraints.insets=new Insets(10,10,10,10);      panel.add(textArea,constraints);      textAreas.add(textArea);      String simpleName=pi.getParameterClass();      JLabel label=null;      if (!pi.getIsReturnValue())       label=new JLabel("[" + pi.getParameterIndex().toString() + "] "+ simpleName); else       if (pi.getIsReturnValue())       label=new JLabel("[Return Value]");      constraints.gridx=0;      constraints.gridy=i;      panel.add(label,constraints);    }    scrollPane.setViewportView(panel);    contentPanel.add(scrollPane,BorderLayout.CENTER);  }{    JPanel buttonPane=new JPanel();    buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));    getContentPane().add(buttonPane,BorderLayout.SOUTH);{      okButton=new JButton("OK");      okButton.setActionCommand("OK");      okButton.addActionListener(this);      buttonPane.add(okButton);      getRootPane().setDefaultButton(okButton);    }{      JButton cancelButton=new JButton("Cancel");      cancelButton.setActionCommand("Cancel");      buttonPane.add(cancelButton);    }  }}  }
class C{  public static MapWritable jsonStringToMapWritableWithWritableArrayWritable(String jsonString,DataSchema dataSchema){  MapWritable value=new MapWritable();  JSONParser jsonParser=new JSONParser();  try {    JSONObject jsonObj=(JSONObject)jsonParser.parse(jsonString);    for (    Object key : jsonObj.keySet()) {      Text mapKey=new Text(key.toString());      if (jsonObj.get(key) != null) {        logger.debug("key = " + key.toString());        if (dataSchema.isArrayElement((String)key)) {          WritableArrayWritable mapValue=StringUtils.jsonArrayStringToWritableArrayWritable(jsonObj.get(key).toString());          value.put(mapKey,mapValue);        } else {          Text mapValue=new Text(jsonObj.get(key).toString());          value.put(mapKey,mapValue);        }      }    }  } catch (  ParseException e) {    logger.warn("Could not json-decode string: " + jsonString,e);  }catch (  NumberFormatException e) {    logger.warn("Could not parse field into number: " + jsonString,e);  }  return value;}  }
class C{  public static short readSwappedShort(InputStream input) throws IOException {  return (short)(((read(input) & 0xff) << 0) + ((read(input) & 0xff) << 8));}  }
class C{  public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent){  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,Collections.<Integer>emptyList());}  }
class C{  public void registerProxyListener(ProxyListener listener){  proxyListeners.add(listener);}  }
class C{  public Matrix(Vector<double[]> rows,boolean clone){  m=rows.size();  n=rows.get(0).length;  A=new double[m][n];  if (clone) {    for (int i=0; i < m; i++)     A[i]=rows.get(i).clone();  } else {    for (int i=0; i < m; i++)     A[i]=rows.get(i);  }  for (int i=0; i < m; i++)   if (A[i].length != n)   (new IllegalArgumentException("Length of row " + i + " is "+ A[i].length+ ". Should be "+ n)).printStackTrace();}  }
class C{  protected VideoReportQuery videoId(int value){  return unsafeParam("video_id",value);}  }
class C{  public GroupsGetMembersQueryWithFields(VkApiClient client,List<UserField> fields){  super(client,"groups.getMembers",GetMembersFieldsResponse.class);  fields(fields);}  }
class C{  @Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  boolean removed=handleStartElement(element,attributes,augs);  if (fDocumentHandler != null) {    fDocumentHandler.emptyElement(element,attributes,augs);  }  if (!removed) {    handleEndElement(element,augs,true);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTRACT_GATHER_FAIL_1_BASIC(String value0){  return new SM_SYSTEM_MESSAGE(1330079,value0);}  }
class C{  public XPath(String xpath,SymbolTable symbolTable,NamespaceContext context) throws XPathException {  super(normalize(xpath),symbolTable,context);  for (int i=0; i < fLocationPaths.length; i++) {    mf.org.apache.xerces.impl.xpath.XPath.Axis axis=fLocationPaths[i].steps[fLocationPaths[i].steps.length - 1].axis;    if (axis.type == XPath.Axis.ATTRIBUTE) {      throw new XPathException("c-selector-xpath");    }  }}  }
class C{  private static SecretKeySpec generateKey(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {  final MessageDigest digest=MessageDigest.getInstance(HASH_ALGORITHM);  byte[] bytes=password.getBytes("UTF-8");  digest.update(bytes,0,bytes.length);  byte[] key=digest.digest();  SecretKeySpec secretKeySpec=new SecretKeySpec(key,"AES");  return secretKeySpec;}  }
class C{  public float lengthSquared(){  return x * x + y * y;}  }
class C{  protected void populateVendorOptionFieldMap(Map<Class<?>,List<SymbolTypeConfig>> fieldEnableMap){  vendorOptionMarkerSymbolFactory.getFieldMap(fieldEnableMap);}  }
class C{  public AfterExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public Response writeBytes(byte[] b){  if (b == null)   return this;  expand(b.length);  System.arraycopy(b,0,out,offset,b.length);  offset+=b.length;  return this;}  }
class C{  private void expand(int i){  if (count + i <= buf.length) {    return;  }  byte[] newbuf=mPool.getBuf((count + i) * 2);  System.arraycopy(buf,0,newbuf,0,count);  mPool.returnBuf(buf);  buf=newbuf;}  }
class C{  @Nullable private static ResourceValue findResourceValue(ResourceType type,String name,boolean isFramework,Module module,Configuration configuration){  if (isFramework) {    ResourceRepository frameworkResources=configuration.getFrameworkResources();    if (frameworkResources == null) {      return null;    }    if (!frameworkResources.hasResourceItem(type,name)) {      return null;    }    ResourceItem item=frameworkResources.getResourceItem(type,name);    return item.getResourceValue(type,configuration.getFullConfig(),false);  } else {    LocalResourceRepository appResources=AppResourceRepository.getAppResources(module,true);    if (appResources == null) {      return null;    }    if (!appResources.hasResourceItem(type,name)) {      return null;    }    return appResources.getConfiguredValue(type,name,configuration.getFullConfig());  }}  }
class C{  public void toString(StringBuffer s){  super.toString(s);}  }
class C{  public PhotosReorderAlbumsQuery(VkApiClient client,UserActor actor,int albumId){  super(client,"photos.reorderAlbums",OkResponse.class);  accessToken(actor.getAccessToken());  albumId(albumId);}  }
class C{  public static double chiSquare(final double[] expected,final long[] observed){  double sumExpected=0d;  double sumObserved=0d;  for (int i=0; i < observed.length; i++) {    sumExpected+=expected[i];    sumObserved+=observed[i];  }  double ratio=1.0d;  boolean rescale=false;  if (FastMath.abs(sumExpected - sumObserved) > 10E-6) {    ratio=sumObserved / sumExpected;    rescale=true;  }  double sumSq=0.0d;  for (int i=0; i < observed.length; i++) {    if (rescale) {      final double dev=observed[i] - ratio * expected[i];      sumSq+=dev * dev / (ratio * expected[i]);    } else {      final double dev=observed[i] - expected[i];      sumSq+=dev * dev / expected[i];    }  }  return sumSq;}  }
class C{  public ScaleToolPanel(SLDEditorInterface application){  this.application=application;  setTitle(Localisation.getString(ScaleToolPanel.class,"ScaleToolPanel.title"));  setModal(true);  setSize(800,300);  createUI();  Controller.getInstance().centreDialog(this);}  }
class C{  protected synchronized void parseCatalogFile(String fileName) throws IOException, CatalogException {  CatalogEntry entry;  try {    catalogCwd=FileURL.makeURL("basename");  } catch (  MalformedURLException e) {    String userdir=System.getProperty("user.dir");    userdir=userdir.replace('\\','/');    catalogManager.debug.message(1,"Malformed URL on cwd",userdir);    catalogCwd=null;  }  try {    base=new URL(catalogCwd,fixSlashes(fileName));  } catch (  MalformedURLException e) {    try {      base=new URL("file:" + fixSlashes(fileName));    } catch (    MalformedURLException e2) {      catalogManager.debug.message(1,"Malformed URL on catalog filename",fixSlashes(fileName));      base=null;    }  }  catalogManager.debug.message(2,"Loading catalog",fileName);  catalogManager.debug.message(4,"Default BASE",base.toString());  fileName=base.toString();  DataInputStream inStream=null;  boolean parsed=false;  boolean notFound=false;  for (int count=0; !parsed && count < readerArr.size(); count++) {    CatalogReader reader=(CatalogReader)readerArr.get(count);    try {      notFound=false;      inStream=new DataInputStream(base.openStream());    } catch (    FileNotFoundException fnfe) {      notFound=true;      break;    }    try {      reader.readCatalog(this,inStream);      parsed=true;    } catch (    CatalogException ce) {      if (ce.getExceptionType() == CatalogException.PARSE_FAILED) {        break;      } else {      }    }    try {      inStream.close();    } catch (    IOException e) {    }  }  if (!parsed) {    if (notFound) {      catalogManager.debug.message(3,"Catalog does not exist",fileName);    } else {      catalogManager.debug.message(1,"Failed to parse catalog",fileName);    }  }}  }
class C{  public ProviderBuilder<T> expirable(boolean expirable){  this.expirable=expirable;  return this;}  }
class C{  @Override public boolean isEqualNode(Node arg){  if (!super.isEqualNode(arg)) {    return false;  }  boolean hasAttrs=hasAttributes();  if (hasAttrs != arg.hasAttributes()) {    return false;  }  if (hasAttrs) {    NamedNodeMap map1=getAttributes();    NamedNodeMap map2=arg.getAttributes();    int len=map1.getLength();    if (len != map2.getLength()) {      return false;    }    for (int i=0; i < len; i++) {      Node n1=map1.item(i);      if (n1.getLocalName() == null) {        Node n2=map2.getNamedItem(n1.getNodeName());        if (n2 == null || !n1.isEqualNode(n2)) {          return false;        }      } else {        Node n2=map2.getNamedItemNS(n1.getNamespaceURI(),n1.getLocalName());        if (n2 == null || !n1.isEqualNode(n2)) {          return false;        }      }    }  }  return true;}  }
class C{  public void init$Children(){  children=new ASTNode[1];}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_USAGE_OVER(String value0){  return new SM_SYSTEM_MESSAGE(1400287,value0);}  }
class C{  public void sendLaunchFinishNotification(final String[] recipients,final String url,final Launch launch,final String resource,final Project.Configuration settings){  String subject=String.format(FINISH_LAUNCH_EMAIL_SUBJECT,launch.getName(),launch.getNumber());  MimeMessagePreparator preparator=null;  this.send(preparator);}  }
class C{  @Override public ApplicationType createModelFor(Application application){  Jvm jvm=JvmFactory.getJVMFor(application);  if (jvm.isBasicInfoSupported()) {    String args=jvm.getJvmArgs();    int jws_index=args.indexOf(JWS);    if (jws_index != -1) {      return new JavaWebStartApplicationType("");    }  }  return null;}  }
class C{  public NoiseDoubleDataSource(long n,double dB){  super();  this.n=n;  dataLength=n;  if (dB > 0) {    throw new IllegalArgumentException("Energy must be non-positive");  }  this.amplitude=DDSAudioInputStream.MAX_AMPLITUDE * Math.sqrt(MathUtils.db2linear(dB));}  }
class C{  public static void fillQueryDimensionsBlockIndexes(List<QueryDimension> queryDimensions,Map<Integer,Integer> columnOrdinalToBlockIndexMapping,Set<Integer> dictionaryDimensionBlockIndex,List<Integer> noDictionaryDimensionBlockIndex){  for (  QueryDimension queryDimension : queryDimensions) {    if (CarbonUtil.hasEncoding(queryDimension.getDimension().getEncoder(),Encoding.DICTIONARY) && queryDimension.getDimension().numberOfChild() == 0) {      dictionaryDimensionBlockIndex.add(columnOrdinalToBlockIndexMapping.get(queryDimension.getDimension().getOrdinal()));    } else     if (queryDimension.getDimension().numberOfChild() == 0) {      noDictionaryDimensionBlockIndex.add(columnOrdinalToBlockIndexMapping.get(queryDimension.getDimension().getOrdinal()));    }  }}  }
class C{  public IllinoisSolver(final double relativeAccuracy,final double absoluteAccuracy){  super(relativeAccuracy,absoluteAccuracy,Method.ILLINOIS);}  }
class C{  public BasenameList duplicate(){  return (new BasenameList(this.fromDir,this.fromExt,(Vector)(this.bList.clone())));}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  GroupsViewer groupsViewer=(GroupsViewer)getDir().getViewerByClass(GroupsViewer.class);  if (groupsViewer == null) {    try {      groupsViewer=new GroupsViewer((Director)getDir(),getViewer().getFrame());      getDir().addViewer(groupsViewer);      groupsViewer.getFrame().toFront();    } catch (    Exception e) {      Basic.caught(e);    }  } else {    groupsViewer.updateView(Director.ENABLE_STATE);    groupsViewer.getFrame().setVisible(true);    groupsViewer.getFrame().setState(JFrame.NORMAL);    groupsViewer.getFrame().toFront();  }}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  private void openFile(){  mContainerActivity.getFileOperationsHelper().openFile(getFile());  finish();}  }
class C{  private void showInfoLayout(){  if (!infoShownReceived) {    infoShownReceived=true;    PokemonNameCorrector.PokeDist possiblePoke=corrector.getPossiblePokemon(pokemonName,candyName,candyUpgradeCost);    initialButtonsLayout.setVisibility(View.VISIBLE);    onCheckButtonsLayout.setVisibility(View.GONE);    if (possiblePoke.dist == 0) {      pokeInputSpinner.setBackgroundColor(Color.parseColor("#ddffdd"));    } else     if (possiblePoke.dist < 2) {      pokeInputSpinner.setBackgroundColor(Color.parseColor("#ffffcc"));    } else {      pokeInputSpinner.setBackgroundColor(Color.parseColor("#ffcccc"));    }    resetToSpinner();    autoCompleteTextView1.setText("");    pokeInputSpinnerAdapter.updatePokemonList(pokeInfoCalculator.getEvolutionLine(possiblePoke.pokemon));    int selection=pokeInputSpinnerAdapter.getPosition(possiblePoke.pokemon);    pokeInputSpinner.setSelection(selection);    pokemonHPEdit.setText(optionalIntToString(pokemonHP));    pokemonCPEdit.setText(optionalIntToString(pokemonCP));    pokemonCandyEdit.setText(optionalIntToString(pokemonCandy));    showInfoLayoutArcPointer();    setVisibility(inputAppraisalExpandBox,appraisalBox,false,false);    positionHandler.setVisibility(appraisalBox.getVisibility());    moveOverlayUpOrDownToMatchAppraisalBox();    adjustArcPointerBar(estimatedPokemonLevel);    if (batterySaver) {      infoShownReceived=false;    }    if (!GoIVSettings.getInstance(getBaseContext()).shouldShouldConfirmationDialogs()) {      checkIv();    }  }  enableOrDisablePokeSpamBoxBasedOnSettings();}  }
class C{  public PhotosGetChatUploadServerQuery(VkApiClient client,UserActor actor,int chatId){  super(client,"photos.getChatUploadServer",GetChatUploadServerResponse.class);  accessToken(actor.getAccessToken());  chatId(chatId);}  }
class C{  public static IntBuffer createIntBuffer(int size){  IntBuffer buf=ByteBuffer.allocateDirect(4 * size).order(ByteOrder.nativeOrder()).asIntBuffer();  buf.clear();  if (trackDirectMemory) {    trackingHash.put(buf,ref);  }  return buf;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  IsBetweenImpl filter=null;  if ((parameterList == null) || (parameterList.size() != 3)) {    filter=new IsBetweenExtended();  } else {    filter=new IsBetweenExtended(parameterList.get(0),parameterList.get(1),parameterList.get(2));  }  return filter;}  }
class C{  BinarySearchTreeNode<E> remove(BinarySearchTreeNode<E> node,E comparable){  while (node != null) {    int diff=comparable.compareTo(node.comparable);    if (diff < 0) {      node=node.left;    } else     if (diff > 0) {      node=node.right;    } else {      if (node.comparable.equals(comparable)) {        this.removeNode(node);        return node;      } else {        return null;      }    }  }  return null;}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public void updateEnableStateFXItems(){  for (  MenuItem menuItem : menuItem2CommandFX.keySet()) {    ICommand command=menuItem2CommandFX.get(menuItem);    menuItem.setDisable(!command.isApplicable());    if (command instanceof ICheckBoxCommand) {      ((CheckMenuItem)menuItem).setSelected(((ICheckBoxCommand)command).isSelected());    }  }}  }
class C{  public void init(Object o,int depth,int traversal){  m_queue.clear();  m_depth=depth;  if (traversal < 0 || traversal >= Constants.TRAVERSAL_COUNT)   throw new IllegalArgumentException("Unrecognized traversal type: " + traversal);  m_traversal=traversal;  m_includeNodes=(traversal == Constants.NODE_TRAVERSAL || traversal == Constants.NODE_AND_EDGE_TRAVERSAL);  m_includeEdges=(traversal == Constants.EDGE_TRAVERSAL || traversal == Constants.NODE_AND_EDGE_TRAVERSAL);  if (m_includeNodes) {    if (o instanceof Node) {      m_queue.add(o,0);    } else {      Iterator tuples=(Iterator)o;      while (tuples.hasNext())       m_queue.add(tuples.next(),0);    }  } else {    if (o instanceof Node) {      Node n=(Node)o;      m_queue.visit(n,0);      Iterator edges=getEdges(n);      while (edges.hasNext()) {        Edge e=(Edge)edges.next();        Node nn=e.getAdjacentNode(n);        m_queue.visit(nn,1);        if (m_queue.getDepth(e) < 0)         m_queue.add(e,1);      }    } else {      Iterator tuples=(Iterator)o;      while (tuples.hasNext()) {        Node n=(Node)tuples.next();        m_queue.visit(n,0);        Iterator edges=getEdges(n);        while (edges.hasNext()) {          Edge e=(Edge)edges.next();          Node nn=e.getAdjacentNode(n);          m_queue.visit(nn,1);          if (m_queue.getDepth(e) < 0)           m_queue.add(e,1);        }      }    }  }}  }
class C{  public static int decrementExact(final int n) throws MathRuntimeException {  if (n == Integer.MIN_VALUE) {    throw new MathRuntimeException(LocalizedCoreFormats.OVERFLOW_IN_SUBTRACTION,n,1);  }  return n - 1;}  }
class C{  private void handleCRC16EncapResponse(SerialMessage serialMessage,int offset) throws ZWaveSerialMessageException {  logger.trace("Process CRC16 Encapsulation");  byte[] payload=serialMessage.getMessagePayload();  byte[] messageCrc=Arrays.copyOfRange(payload,payload.length - 2,payload.length);  byte[] tocheck=Arrays.copyOfRange(payload,offset - 2,payload.length - 2);  short calculatedCrc=crc_ccit(tocheck);  ByteBuffer byteBuffer=ByteBuffer.allocate(2);  byteBuffer.putShort(calculatedCrc);  if (!Arrays.equals(messageCrc,byteBuffer.array())) {    logger.error("NODE {}: CRC check failed message contains {} but should be {}",this.getNode().getNodeId(),SerialMessage.bb2hex(messageCrc),SerialMessage.bb2hex(byteBuffer.array()));    return;  }  CommandClass commandClass;  ZWaveCommandClass zwaveCommandClass;  int commandClassCode=serialMessage.getMessagePayloadByte(offset);  commandClass=CommandClass.getCommandClass(commandClassCode);  if (commandClass == null) {    logger.error(String.format("NODE %d: Unsupported command class 0x%02x",this.getNode().getNodeId(),commandClassCode));  } else {    zwaveCommandClass=this.getNode().getCommandClass(commandClass);    if (zwaveCommandClass == null) {      logger.debug(String.format("NODE %d: Command class %s (0x%02x) not found, trying to add it.",getNode().getNodeId(),commandClass.getLabel(),commandClass.getKey()));      zwaveCommandClass=ZWaveCommandClass.getInstance(commandClass.getKey(),getNode(),getController());      if (zwaveCommandClass != null) {        logger.debug(String.format("NODE %d: Adding command class %s (0x%02x)",getNode().getNodeId(),commandClass.getLabel(),commandClass.getKey()));        getNode().addCommandClass(zwaveCommandClass);      }    }    if (zwaveCommandClass == null) {      logger.error(String.format("NODE %d: CommandClass %s (0x%02x) not implemented.",this.getNode().getNodeId(),commandClass.getLabel(),commandClassCode));    } else {      logger.debug("NODE {}: Calling handleApplicationCommandRequest.",this.getNode().getNodeId());      zwaveCommandClass.handleApplicationCommandRequest(serialMessage,offset + 1,0);    }  }}  }
class C{  private static String byteToHex(byte[] digest){  StringBuilder builder=new StringBuilder();  for (  byte b : digest) {    String hex=Integer.toHexString(0xff & b);    if (hex.length() == 1) {      builder.append('0');    }    builder.append(hex);  }  return builder.toString();}  }
class C{  public CAS process(String text){  CAS cas=retrieve();  cas.setDocumentText(text);  try {    analysisEngine.process(cas);  } catch (  AnalysisEngineProcessException e) {    if (text != null && !text.isEmpty())     return process(text);    throw new RuntimeException(e);  }  return cas;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonTotem_ME_TO_B(String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200579,value0,skilltarget,skillname);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_WRONG_EXCHANGE_TARGET(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400554,value0,value1);}  }
class C{  public void loadingStarted(){  mLoadTracker.loadingStarted();}  }
class C{  public void testSettingInHighApiTheme(){  VirtualFile virtualFile=myFixture.copyFileToProject("themeEditor/apiTestBefore/stylesApi.xml","res/values/styles.xml");  myFixture.copyFileToProject("themeEditor/apiTestBefore/stylesApi-v14.xml","res/values-v14/styles.xml");  myFixture.copyFileToProject("themeEditor/apiTestBefore/stylesApi-v19.xml","res/values-v19/styles.xml");  myFixture.copyFileToProject("themeEditor/apiTestBefore/stylesApi-v21.xml","res/values-v21/styles.xml");  ConfigurationManager configurationManager=myFacet.getConfigurationManager();  Configuration configuration=configurationManager.getConfiguration(virtualFile);  ThemeResolver themeResolver=new ThemeResolver(configuration);  ConfiguredThemeEditorStyle theme=themeResolver.getTheme("Theme.MyOtherTheme");  assertNotNull(theme);  theme.setValue("android:windowIsFloating","holo_purple");  theme.setValue("android:actionBarDivider","myValue");  theme.setParent("android:Theme.Holo.Light.DarkActionBar");  myFixture.checkResultByFile("res/values/styles.xml","themeEditor/apiTestAfter8/stylesApi.xml",true);  myFixture.checkResultByFile("res/values-v14/styles.xml","themeEditor/apiTestAfter8/stylesApi-v14.xml",true);  myFixture.checkResultByFile("res/values-v19/styles.xml","themeEditor/apiTestAfter8/stylesApi-v19.xml",true);  myFixture.checkResultByFile("res/values-v21/styles.xml","themeEditor/apiTestAfter8/stylesApi-v21.xml",true);}  }
class C{  public double norm2(){  return (new SingularValueDecomposition(this).norm2());}  }
class C{  public AdsUpdateTargetGroupQuery(VkApiClient client,UserActor actor,int accountId,int targetGroupId,String name){  super(client,"ads.updateTargetGroup",OkResponse.class);  accessToken(actor.getAccessToken());  accountId(accountId);  targetGroupId(targetGroupId);  name(name);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  registrarID.writeBytes(out);}  }
class C{  public TPrimitiveHash(){  super();}  }
class C{  public Matrix refresh(Matrix newMatrix,View chart,boolean invalidate){  mMatrixTouch.set(newMatrix);  limitTransAndScale(mMatrixTouch,mContentRect);  if (invalidate)   chart.invalidate();  newMatrix.set(mMatrixTouch);  return newMatrix;}  }
class C{  private void drawMovieFrame(Canvas canvas){  mMovie.setTime(mCurrentAnimationTime);  canvas.save(Canvas.MATRIX_SAVE_FLAG);  canvas.scale(mScale,mScale);  mMovie.draw(canvas,mLeft / mScale,mTop / mScale);  canvas.restore();}  }
class C{  private int wordForwards(int offset){  int x=wordBI.following(offset);  if (x > offset + 15) {    x=offset;  }  return x;}  }
class C{  public void sort(){  Arrays.sort(_data,0,_pos);}  }
class C{  public static void i(String tag,String msg){  if (LOG_ENABLE) {    Log.i(tag,buildMsg(msg));  }}  }
class C{  @Transactional public List<TextUnitDTO> search(TextUnitSearcherParameters searchParameters){  Preconditions.checkNotNull(searchParameters,"Search parameters should not be null");  logger.debug("Creating the native criteria with joins");  NativeCriteria c=new NativeCriteria(new JpaQueryProvider(entityManager),"tm_text_unit","tu");  c.addJoin(NativeExps.crossJoin("locale","l"));  c.addJoin(NativeExps.innerJoin("asset","a","a.id","tu.asset_id"));  c.addJoin(NativeExps.innerJoin("repository","r","r.id","a.repository_id"));  NativeJunctionExp onClauseRepositoryLocale=NativeExps.conjunction();  onClauseRepositoryLocale.add(new NativeColumnEqExp("rl.locale_id","l.id"));  onClauseRepositoryLocale.add(new NativeColumnEqExp("rl.repository_id","r.id"));  if (searchParameters.isRootLocaleExcluded()) {    onClauseRepositoryLocale.add(new NativeIsNotNullExp("rl.parent_locale"));  }  c.addJoin(NativeExps.innerJoin("repository_locale","rl",onClauseRepositoryLocale));  NativeJunctionExp onClauseTMTextUnitCurrentVariant=NativeExps.conjunction();  onClauseTMTextUnitCurrentVariant.add(new NativeColumnEqExp("tu.id","tuvc.tm_text_unit_id"));  onClauseTMTextUnitCurrentVariant.add(new NativeColumnEqExp("l.id","tuvc.locale_id"));  c.addJoin(new NativeJoin("tm_text_unit_current_variant","tuvc",NativeJoin.JoinType.LEFT_OUTER,onClauseTMTextUnitCurrentVariant));  c.addJoin(NativeExps.leftJoin("tm_text_unit_variant","tuv","tuvc.tm_text_unit_variant_id","tuv.id"));  NativeJunctionExp onClauseAssetTextUnit=NativeExps.conjunction();  onClauseAssetTextUnit.add(new NativeColumnEqExp("map.tm_text_unit_id","tu.id"));  onClauseAssetTextUnit.add(new NativeColumnEqExp("a.last_successful_asset_extraction_id","map.asset_extraction_id"));  c.addJoin(new NativeJoin("asset_text_unit_to_tm_text_unit","map",NativeJoin.JoinType.LEFT_OUTER,onClauseAssetTextUnit));  c.addJoin(NativeExps.leftJoin("asset_text_unit","atu","atu.id","map.asset_text_unit_id"));  logger.debug("Set projections");  c.setProjection(NativeExps.projection().addProjection("tu.id","tmTextUnitId").addProjection("tuv.id","tmTextUnitVariantId").addProjection("l.id","localeId").addProjection("l.bcp47_tag","targetLocale").addProjection("tu.name","name").addProjection("tu.content","source").addProjection("tu.comment","comment").addProjection("tuv.content","target").addProjection("tuv.comment","targetComment").addProjection("tu.asset_id","assetId").addProjection("a.last_successful_asset_extraction_id","lastSuccessfulAssetExtractionId").addProjection("atu.asset_extraction_id","assetExtractionId").addProjection("tuvc.id","tmTextUnitCurrentVariantId").addProjection("tuv.status","status").addProjection("tuv.included_in_localized_file","includedInLocalizedFile").addProjection("tuv.created_date","createdDate").addProjection("a.deleted","assetDeleted"));  logger.debug("Add search filters");  NativeJunctionExp conjunction=NativeExps.conjunction();  if (searchParameters.getRepositoryIds() != null && !searchParameters.getRepositoryIds().isEmpty()) {    conjunction.add(NativeExps.in("r.id",searchParameters.getRepositoryIds()));  }  if (searchParameters.getName() != null) {    conjunction.add(getSearchTypeNativeExp(searchParameters.getSearchType(),"tu.name",searchParameters.getName()));  }  if (searchParameters.getSource() != null) {    conjunction.add(getSearchTypeNativeExp(searchParameters.getSearchType(),"tu.content","tu.content_md5",searchParameters.getSource()));  }  if (searchParameters.getMd5() != null) {    conjunction.add(NativeExps.eq("tu.md5",searchParameters.getMd5()));  }  if (searchParameters.getTarget() != null) {    conjunction.add(getSearchTypeNativeExp(searchParameters.getSearchType(),"tuv.content","tuv.content_md5",searchParameters.getTarget()));  }  if (searchParameters.getAssetId() != null) {    conjunction.add(NativeExps.eq("tu.asset_id",searchParameters.getAssetId()));  }  if (searchParameters.getLocaleTags() != null && !searchParameters.getLocaleTags().isEmpty()) {    conjunction.add(NativeExps.in("l.bcp47_tag",searchParameters.getLocaleTags()));  }  if (searchParameters.getLocaleId() != null) {    conjunction.add(NativeExps.eq("l.id",searchParameters.getLocaleId()));  }  if (searchParameters.getTmTextUnitId() != null) {    conjunction.add(NativeExps.eq("tu.id",searchParameters.getTmTextUnitId()));  }  if (searchParameters.getTmId() != null) {    conjunction.add(NativeExps.eq("tu.tm_id",searchParameters.getTmId()));  }  StatusFilter statusFilter=searchParameters.getStatusFilter();  if (statusFilter != null) {switch (statusFilter) {case ALL:      break;case NOT_REJECTED:    conjunction.add(NativeExps.eq("tuv.included_in_localized_file",Boolean.TRUE));  break;case REJECTED:conjunction.add(NativeExps.eq("tuv.included_in_localized_file",Boolean.FALSE));break;case REVIEW_NEEDED:conjunction.add(NativeExps.eq("tuv.status",TMTextUnitVariant.Status.REVIEW_NEEDED.toString()));break;case REVIEW_NOT_NEEDED:conjunction.add(NativeExps.notEq("tuv.status",TMTextUnitVariant.Status.REVIEW_NEEDED.toString()));break;case TRANSLATED:conjunction.add(NativeExps.isNotNull("tuv.id"));break;case TRANSLATED_AND_NOT_REJECTED:conjunction.add(NativeExps.isNotNull("tuv.id"));conjunction.add(NativeExps.eq("tuv.included_in_localized_file",Boolean.TRUE));break;case UNTRANSLATED:conjunction.add(NativeExps.isNull("tuv.id"));break;case FOR_TRANSLATION:conjunction.add(NativeExps.disjunction(Arrays.asList(NativeExps.isNull("tuv.id"),NativeExps.eq("tuv.status",TMTextUnitVariant.Status.TRANSLATION_NEEDED.toString()),NativeExps.eq("tuv.included_in_localized_file",Boolean.FALSE))));break;}}UsedFilter usedFilter=searchParameters.getUsedFilter();if (usedFilter != null) {if (UsedFilter.USED.equals(usedFilter)) {conjunction.add(NativeExps.isNotNull("atu.id"));conjunction.add(NativeExps.eq("a.deleted",Boolean.FALSE));} else {conjunction.add(NativeExps.disjunction(Arrays.asList(NativeExps.isNull("atu.id"),NativeExps.eq("a.deleted",Boolean.TRUE))));}}if (!conjunction.toSQL().isEmpty()) {c.add(conjunction);}if (searchParameters.getLimit() != null) {c.setLimit(searchParameters.getLimit());}if (searchParameters.getOffset() != null) {c.setOffset(searchParameters.getOffset());}if (ordered) {c.setOrder(NativeExps.order().add("tu.id",NativeOrderExp.OrderType.ASC).add("l.id",NativeOrderExp.OrderType.ASC));}logger.debug("Perform query");List<TextUnitDTO> resultAsList=c.criteriaResult(new TextUnitDTONativeObjectMapper());if (logger.isDebugEnabled()) {logger.debug("Query done, info: {}",c.getQueryInfo());}return resultAsList;}  }
class C{  public StatelessScrollableDataIterator(SQLQuery sqlQuery,SessionFactory sessionFactory,int fetchSize,boolean performOrderById,int from,int size){  super(sqlQuery,sessionFactory,fetchSize,performOrderById,from,size);}  }
class C{  public static Map<String,Object> addToSolr(DispatchContext dctx,Map<String,Object> context) throws GenericEntityException {  Map<String,Object> result;  LocalDispatcher dispatcher=dctx.getDispatcher();  Delegator delegator=dctx.getDelegator();  GenericValue productInstance=(GenericValue)context.get("instance");  String productId=(String)productInstance.get("productId");  boolean indexed=false;  Boolean webappInitPassed=null;  boolean skippedDueToWebappInit=false;  if (SolrUtil.isSolrEcaEnabled()) {    webappInitPassed=SolrUtil.isSolrEcaWebappInitCheckPassed();    if (webappInitPassed) {      Debug.logVerbose("Solr: addToSolr: Running indexing for productId '" + productId + "'",module);      try {        GenericValue product=delegator.findOne("Product",UtilMisc.toMap("productId",productId),false);        Map<String,Object> dispatchContext=ProductUtil.getProductContent(product,dctx,context);        dispatchContext.put("treatConnectErrorNonFatal",SolrUtil.isEcaTreatConnectErrorNonFatal());        Map<String,Object> runResult=dispatcher.runSync("addToSolrIndex",dispatchContext);        String runMsg=ServiceUtil.getErrorMessage(runResult);        if (UtilValidate.isEmpty(runMsg)) {          runMsg=null;        }        if (ServiceUtil.isError(runResult)) {          result=ServiceUtil.returnError(runMsg);        } else         if (ServiceUtil.isFailure(runResult)) {          result=ServiceUtil.returnFailure(runMsg);        } else {          result=ServiceUtil.returnSuccess();          indexed=true;        }      } catch (      Exception e) {        Debug.logError(e,e.getMessage(),module);        result=ServiceUtil.returnError(e.toString());      }    } else {      if (Debug.verboseOn()) {        final String statusMsg="Solr webapp not available; skipping indexing for productId '" + productId + "'";        Debug.logVerbose("Solr: addToSolr: " + statusMsg,module);      }      result=ServiceUtil.returnSuccess();      skippedDueToWebappInit=true;    }  } else {    if (Debug.verboseOn()) {      final String statusMsg="Solr ECA indexing disabled; skipping indexing for productId '" + productId + "'";      Debug.logVerbose("Solr: addToSolr: " + statusMsg,module);    }    result=ServiceUtil.returnSuccess();  }  if (!indexed && UtilProperties.getPropertyAsBoolean(SolrUtil.solrConfigName,"solr.eca.markDirty.enabled",false)) {    boolean markDirtyNoWebappCheck=UtilProperties.getPropertyAsBoolean(SolrUtil.solrConfigName,"solr.eca.markDirty.noWebappCheck",false);    if (!(markDirtyNoWebappCheck && skippedDueToWebappInit)) {      if (Debug.verboseOn()) {        final String statusMsg="Did not index productId '" + productId + "'; marking SOLR data as dirty (old)";        Debug.logVerbose("Solr: addToSolr: " + statusMsg,module);      }      SolrUtil.setSolrDataStatusId(delegator,"SOLR_DATA_OLD");    }  }  return result;}  }
class C{  public static MapWritable jsonStringToMapWritableWithArrayWritable(String jsonString,DataSchema dataSchema){  MapWritable value=new MapWritable();  JSONParser jsonParser=new JSONParser();  try {    JSONObject jsonObj=(JSONObject)jsonParser.parse(jsonString);    for (    Object key : jsonObj.keySet()) {      Text mapKey=new Text(key.toString());      if (jsonObj.get(key) != null) {        logger.debug("key = " + key.toString());        if (dataSchema.isArrayElement((String)key)) {          ArrayWritable mapValue=StringUtils.jsonArrayStringtoArrayWritable(jsonObj.get(key).toString());          value.put(mapKey,mapValue);        } else {          Text mapValue=new Text(jsonObj.get(key).toString());          value.put(mapKey,mapValue);        }      }    }  } catch (  ParseException e) {    logger.warn("Could not json-decode string: " + jsonString,e);  }catch (  NumberFormatException e) {    logger.warn("Could not parse field into number: " + jsonString,e);  }  return value;}  }
class C{  private void sendNotification(String messageBody){  Intent intent=new Intent(this,MainActivity.class);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  PendingIntent pendingIntent=PendingIntent.getActivity(this,0,intent,PendingIntent.FLAG_ONE_SHOT);  Uri defaultSoundUri=RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION);  NotificationCompat.Builder notificationBuilder=new NotificationCompat.Builder(this).setSmallIcon(R.mipmap.ic_launcher).setContentTitle("FCM Message").setContentText(messageBody).setAutoCancel(true).setSound(defaultSoundUri).setContentIntent(pendingIntent);  NotificationManager notificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  notificationManager.notify(0,notificationBuilder.build());}  }
class C{  public int errorCount(){  return errors;}  }
class C{  public TShortLongHashMap(TShortHashingStrategy strategy){  super(strategy);}  }
class C{  public void mark(int readlimit){  stream.mark(readlimit);  if (markSupported()) {    markpos=framePos;    markPushBackLen=pushBackLen;    if (markPushBackLen > 0) {      if (markPushBackBuffer == null) {        markPushBackBuffer=new byte[frameSize];      }      System.arraycopy(pushBackBuffer,0,markPushBackBuffer,0,markPushBackLen);    }  }}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public ProjectDTO toDTO(Project project,int depth){  if (project == null) {    return null;  }  ProjectDTO dto=new ProjectDTO();  dto.id=project.getId();  dto.name=project.getName();  dto.url=project.getUrl();  dto.openSource=project.getOpenSource();  if (depth-- > 0) {    dto.author=authorDTOService.toDTO(project.getAuthor(),depth);  }  return dto;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Slow_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200476,skilltarget);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_END_ME_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200475,skilltarget);}  }
class C{  @Override public void characters(XMLString text,Augmentations augs) throws XNIException {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_WeaponStatUp_A_TO_ME(String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200735,value0,skillcaster,skillname);}  }
class C{  @Override public Optional<Object> provideValue(Object pageObject,Field field,PageObjectContext context){  FramePath framePath=frameMap.get(pageObject);  By selector=PageObjectProviderHelper.getSelectorFromGenericPageObject(field);  SearchContext searchContext=getSearchContext(context,field);  PageObjectListInvocationHandler handler=new PageObjectListInvocationHandler(PageObjectProviderHelper.getGenericType(field),new SelectorElementLocator(searchContext,selector),injector,shouldCacheResults(field),framePath);  ClassLoader classLoader=PageObjectProviderHelper.getGenericType(field).getClassLoader();  Object proxyInstance=Proxy.newProxyInstance(classLoader,new Class[]{List.class},handler);  return Optional.of(proxyInstance);}  }
class C{  @Override public void shutdown(){  ExecutorServices.shutdown(executorService);}  }
class C{  public TapTarget textTypeface(Typeface typeface){  if (typeface == null)   throw new IllegalArgumentException("Cannot use a null typeface");  this.typeface=typeface;  return this;}  }
class C{  public static Map<GenericRecord,List<GenericRecord>> recordsByKey(List<GenericRecord> records,List<String> keyFieldNames){  Map<GenericRecord,List<GenericRecord>> recordsByKey=Maps.newHashMap();  if (records.size() > 0) {    Schema keySchema=RecordUtils.subsetSchema(records.get(0).getSchema(),keyFieldNames);    for (    GenericRecord record : records) {      GenericRecord key=RecordUtils.subsetRecord(record,keySchema);      if (!recordsByKey.containsKey(key)) {        recordsByKey.put(key,new ArrayList<GenericRecord>());      }      List<GenericRecord> rowsForKey=recordsByKey.get(key);      rowsForKey.add(record);    }  }  return recordsByKey;}  }
class C{  @Override public void ignorableWhitespace(XMLString text,Augmentations augs) throws XNIException {  if (!fIncludeIgnorableWhitespace || fFilterReject) {    return;  }  if (!fDeferNodeExpansion) {    Node child=fCurrentNode.getLastChild();    if (child != null && child.getNodeType() == Node.TEXT_NODE) {      Text textNode=(Text)child;      textNode.appendData(text.toString());    } else {      Text textNode=fDocument.createTextNode(text.toString());      if (fDocumentImpl != null) {        TextImpl textNodeImpl=(TextImpl)textNode;        textNodeImpl.setIgnorableWhitespace(true);      }      fCurrentNode.appendChild(textNode);    }  } else {    int txt=fDeferredDocumentImpl.createDeferredTextNode(text.toString(),true);    fDeferredDocumentImpl.appendChild(fCurrentNodeIndex,txt);  }}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  public CatchOptions withProbability(double probability){  this.probability=probability;  return this;}  }
class C{  public boolean isOrderingAsAdded(){  return mOrderingAsAdded;}  }
class C{  public WallGetQuery domain(String value){  return unsafeParam("domain",value);}  }
class C{  protected MarketSearchQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public static boolean isUrlUsable(String url){  if (CommonUtils.isEmpty(url)) {    return false;  }  URL urlTemp=null;  HttpURLConnection connt=null;  try {    urlTemp=new URL(url);    connt=(HttpURLConnection)urlTemp.openConnection();    connt.setRequestMethod("HEAD");    int returnCode=connt.getResponseCode();    if (returnCode == HttpURLConnection.HTTP_OK) {      return true;    }  } catch (  Exception e) {    return false;  } finally {    connt.disconnect();  }  return false;}  }
class C{  public boolean annotate(){  return soot.PhaseOptions.getBoolean(options,"annotate");}  }
class C{  private static void deleteRecursive(File f) throws CarbonUtilException {  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      File c : f.listFiles()) {        deleteRecursive(c);      }    }  }  if (f.exists() && !f.delete()) {    throw new CarbonUtilException("Error while deleting the folders and files");  }}  }
class C{  protected void failed(Throwable e,Description description){}  }
class C{  private static String fmt(double doubleValue){  if (doubleValue == (long)doubleValue) {    return String.format("%d",(long)doubleValue);  } else {    return String.format("%s",doubleValue);  }}  }
class C{  void show(){  if (mIsVisible)   return;  mIsVisible=true;  mHeightPx=Math.round(mDefaultHeightPx);  invalidate();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("rename attribute=");  final String attribute=np.getWordRespectCase();  np.matchIgnoreCase("newName=");  String newName=np.getWordRespectCase();  np.matchIgnoreCase(";");  final SamplesViewer viewer=(SamplesViewer)getDir().getViewerByClass(SamplesViewer.class);  viewer.getSamplesTable().renameAttribute(attribute,newName);}  }
class C{  @Override public void onPrepared(MediaPlayer vp){  Log_OC.v(TAG,"onPrepared");  mVideoPreview.seekTo(mSavedPlaybackPosition);  if (mAutoplay) {    mVideoPreview.start();  }  mMediaController.setEnabled(true);  mMediaController.updatePausePlay();  mPrepared=true;}  }
class C{  public static String sampaEnString2sampaDeString(String sEn){  StringBuilder result=new StringBuilder();  StringTokenizer st=new StringTokenizer(sEn,"-");  while (st.hasMoreTokens()) {    boolean stressed=false;    String syl=st.nextToken();    if (syl.startsWith("'")) {      result.append("'");      stressed=true;    }    Allophone[] phon=sampa(Locale.US).splitIntoAllophones(syl);    for (int i=0; i < phon.length; i++) {      String eng=phon[i].name();      String sDe=sampaEn2sampaDe(eng);      if (sDe.equals("6") && stressed) {        sDe="96";      }      result.append(sDe);    }    if (st.hasMoreTokens()) {      result.append("-");    }  }  return result.toString();}  }
class C{  void revalidateGrid(){  JScrollPane scrollPane=(JScrollPane)getParent().getParent();  Dimension bounds=scrollPane.getPreferredSize();  if (alignment != null)   setSize((int)(cellWidth * alignment.getGapColumnContractor().getLayoutLength() + 0.5) + 3,bounds.height - 4);  setPreferredSize(getSize());  revalidate();}  }
class C{  public boolean save(File file,boolean async){  this.file=file;  return save(async);}  }
class C{  public long writeTo(File fileOrDirectory) throws IOException {  long written=0;  OutputStream fileOut=null;  try {    if (fileName != null) {      File file;      if (fileOrDirectory.isDirectory()) {        file=new File(fileOrDirectory,fileName);      } else {        file=fileOrDirectory;      }      if (renamer != null) {        file=renamer.rename(file);        fileName=file.getName();      }      File parent=file.getParentFile();      if (!parent.exists()) {        if (!parent.mkdirs()) {          throw new WebException("Directory " + parent + " not exists and can not create directory.");        }      }      dir=parent;      fileOut=new BufferedOutputStream(new FileOutputStream(file));      written=write(fileOut);    }  }  finally {    if (fileOut != null)     fileOut.close();  }  return written;}  }
class C{  public ChangeSet decrement(String path,short delta){  return increment(path,-delta);}  }
class C{  public void paint(Graphics gc0){  super.paint(gc0);  final Graphics2D gc=(Graphics2D)gc0;  bottomMargin=50;  if (isShowXAxis()) {    double xAxisLabelHeight=computeXAxisLabelHeight(gc);    bottomMargin+=xAxisLabelHeight;    if (classLabelAngle > 0 && classLabelAngle < Math.PI / 2)     rightMargin=Math.max(75,(int)(0.8 * xAxisLabelHeight));  } else   bottomMargin+=20;  drawTitle(gc);  if (getChartData().getRangeX() == null || getChartData().getRangeY() == null)   return;  if (isLargeEnough()) {    if (gridStyle == GridStyle.BELOW) {    }    computeScrollBackReferenceRect();    drawChart(gc);    if (isShowXAxis())     drawXAxis(gc);    if (isShowYAxis())     drawYAxis(gc);    if (gridStyle == GridStyle.ABOVE) {    }  }}  }
class C{  public static Integer calcResultViewIndex(SolrDocumentList results,Integer viewSize){  Integer viewIndex=null;  if (results != null && viewSize != null && viewSize > 0) {    long start=results.getStart();    viewIndex=(int)(start / (long)viewSize);  }  return viewIndex;}  }
class C{  public static void i(String tag,String msg){  if (sLevel > LEVEL_INFO) {    return;  }  Log.i(tag,msg);}  }
class C{  public static void record(LogInfo logPhase){  try {    RLOG.get().info.add(logPhase);  } catch (  NullPointerException ignored) {    LOG.warn("Attempted to append log info while request log object was uninitialized: {}",logPhase.getClass().getSimpleName());  }}  }
class C{  public boolean isValidCountryCodeTld(String ccTld){  ccTld=unicodeToASCII(ccTld);  return Arrays.binarySearch(COUNTRY_CODE_TLDS,chompLeadingDot(ccTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  default String relationName(String type){  return String.format(RELATION,type);}  }
class C{  public boolean isOptional(){  return isOptional;}  }
class C{  public synchronized Vertex locateVertex(Vertex v){  return (Vertex)UniqueVertices.get(v.getLabel());}  }
class C{  public void submitJob(SelfCancalableJob SelfCancalableJob){  taskScheduler.schedule(SelfCancalableJob,SelfCancalableJob);}  }
class C{  public void saveRootCertificateAndKey(String keyStoreType,File file,String privateKeyAlias,String password){  CertificateAndKey certificateAndKey=generatedCertificateAndKey.get();  KeyStore keyStore=securityProviderTool.createRootCertificateKeyStore(keyStoreType,certificateAndKey,privateKeyAlias,password);  securityProviderTool.saveKeyStore(file,keyStore,password);}  }
class C{  @NotNull public static ResizePolicy horizontal(){  return ourHorizontal;}  }
class C{  public static void forceMkdir(File directory) throws IOException {  if (directory.exists()) {    if (!directory.isDirectory()) {      String message="File " + directory + " exists and is "+ "not a directory. Unable to create directory.";      throw new IOException(message);    }  } else {    if (!directory.mkdirs()) {      if (!directory.isDirectory()) {        String message="Unable to create directory " + directory;        throw new IOException(message);      }    }  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public NEExpr fullCopy(){  NEExpr tree=(NEExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  protected void addRecognizedParamsAndSetDefaults(XMLComponent component){  String[] recognizedFeatures=component.getRecognizedFeatures();  addRecognizedFeatures(recognizedFeatures);  String[] recognizedProperties=component.getRecognizedProperties();  addRecognizedProperties(recognizedProperties);  if (recognizedFeatures != null) {    for (int i=0; i < recognizedFeatures.length; ++i) {      String featureId=recognizedFeatures[i];      Boolean state=component.getFeatureDefault(featureId);      if (state != null) {        if (!fFeatures.containsKey(featureId)) {          fFeatures.put(featureId,state);          fConfigUpdated=true;        }      }    }  }  if (recognizedProperties != null) {    for (int i=0; i < recognizedProperties.length; ++i) {      String propertyId=recognizedProperties[i];      Object value=component.getPropertyDefault(propertyId);      if (value != null) {        if (!fProperties.containsKey(propertyId)) {          fProperties.put(propertyId,value);          fConfigUpdated=true;        }      }    }  }}  }
class C{  public static void sendEvent(final ReactContext context,final String eventName,final WritableMap params){  if (context.hasActiveCatalystInstance()) {    context.getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName,params);  } else {    Log.d(TAG,"Waiting for CatalystInstance before sending event");  }}  }
class C{  public static boolean parseBooleanTag(String tag,String s,boolean defaultValue){  if (s == null || s.startsWith("${"))   return defaultValue;  if (s.equalsIgnoreCase(Boolean.FALSE.toString()))   return false;  if (s.equalsIgnoreCase(Boolean.TRUE.toString()))   return true;  throw new IllegalArgumentException("Illegal boolean input string: \"" + s + "\" for tag: <"+ tag+ ">");}  }
class C{  public static void requestPermission(CordovaPlugin plugin,int requestCode,String permission){  PermissionHelper.requestPermissions(plugin,requestCode,new String[]{permission});}  }
class C{  public boolean isLimitEnabled(){  return this.limitEnabled;}  }
class C{  public CachedDocumentComparator(){  GraphImportance=0.5;}  }
class C{  public static Map<?,?> toMap(Object object){  return mapper.convertValue(object,Map.class);}  }
class C{  @PostConstruct public void invokeSlackWebhook(){  RestTemplate restTemplate=new RestTemplate();  RichMessage richMessage=new RichMessage("Just to test Slack's incoming webhooks.");  Attachment[] attachments=new Attachment[1];  attachments[0]=new Attachment();  attachments[0].setText("Some data relevant to your users.");  richMessage.setAttachments(attachments);  try {    logger.debug("Reply (RichMessage): {}",new ObjectMapper().writeValueAsString(richMessage));  } catch (  JsonProcessingException e) {    logger.debug("Error parsing RichMessage: ",e);  }  try {    restTemplate.postForEntity(slackIncomingWebhookUrl,richMessage.encodedMessage(),String.class);  } catch (  RestClientException e) {    logger.error("Error posting to Slack Incoming Webhook: ",e);  }}  }
class C{  public boolean isExplicit(){  return isInstance() || isStatic();}  }
class C{  private Map<String,List<TableBlockInfo>> mappedAndGetTaskIdToTableBlockInfo(Map<String,List<TableBlockInfo>> segmentToTableBlocksInfos){  Map<String,List<TableBlockInfo>> taskIdToTableBlockInfoMap=new ConcurrentHashMap<String,List<TableBlockInfo>>();  Iterator<Entry<String,List<TableBlockInfo>>> iterator=segmentToTableBlocksInfos.entrySet().iterator();  while (iterator.hasNext()) {    Entry<String,List<TableBlockInfo>> next=iterator.next();    List<TableBlockInfo> value=next.getValue();    for (    TableBlockInfo blockInfo : value) {      String taskNo=DataFileUtil.getTaskNo(blockInfo.getFilePath());      List<TableBlockInfo> list=taskIdToTableBlockInfoMap.get(taskNo);      if (null == list) {        list=new ArrayList<TableBlockInfo>();        taskIdToTableBlockInfoMap.put(taskNo,list);      }      list.add(blockInfo);    }  }  return taskIdToTableBlockInfoMap;}  }
class C{  @Nullable private Collection<NewDependencyInfo> collectFromCtorInjectedClass(TypeElement classElement){  Collection<NewDependencyInfo> result=new HashSet<>();  Preconditions.checkArgument(!Utils.hasAnonymousParentClass(classElement),String.format("class %s should not have anonymous ancestor.",classElement));  ExecutableElement ctor=Utils.findInjectedCtor(classElement,env);  if (ctor == null) {    return null;  }  Set<NewBindingKey> dependencies=getDependenciesFrom(ctor);  for (  Element element : classElement.getEnclosedElements()) {    if (element.getKind().equals(ElementKind.FIELD) && Utils.isInjected(element,env)) {      dependencies.add(NewBindingKey.get(element.asType(),Utils.getQualifier(element)));    }    if (element.getKind().equals(ElementKind.METHOD) && Utils.isInjected(element,env)) {      dependencies.addAll(getDependenciesFrom((ExecutableElement)element));    }  }  NewDependencyInfo dependenceInfo=new NewDependencyInfo(NewBindingKey.get(classElement),dependencies,classElement,Provides.Type.UNIQUE);  result.add(dependenceInfo);  return result;}  }
class C{  public static double[] lpc2lsf(double[] oneMinusA,int type){  int order=oneMinusA.length - 1;  double[] g1=new double[100];  double[] g2=new double[100];  double[] g1r=new double[100];  double[] g2r=new double[100];  boolean even;  int g1_order, g2_order;  int orderd2;  int i, j;  int swap;  double Factor;  even=(order & 1) == 0;  if (even)   g1_order=g2_order=order / 2; else {    g1_order=(order + 1) / 2;    g2_order=g1_order - 1;    throw new IllegalArgumentException("Odd order not implemented yet");  }  orderd2=(order + 1) / 2;  g1[orderd2]=oneMinusA[0];  for (i=1; i <= orderd2; i++)   g1[g1_order - i]=oneMinusA[i] + oneMinusA[order + 1 - i];  g2[orderd2]=oneMinusA[0];  for (i=1; i <= orderd2; i++)   g2[orderd2 - i]=oneMinusA[i] - oneMinusA[order + 1 - i];  if (even) {    for (i=1; i <= orderd2; i++)     g1[orderd2 - i]-=g1[orderd2 - i + 1];    for (i=1; i <= orderd2; i++)     g2[orderd2 - i]+=g2[orderd2 - i + 1];  } else {    for (i=2; i <= orderd2; i++)     g2[orderd2 - i]+=g2[orderd2 - i + 2];  }  if (type == 1) {    cheby1(g1,g1_order);    cheby1(g2,g2_order);    Factor=0.5;  } else   if (type == 2) {    cheby2(g1,g1_order);    cheby2(g2,g2_order);    Factor=0.5;  } else   if (type == 3) {    cheby3(g1,g1_order);    cheby3(g2,g2_order);    Factor=1.0;  } else   if (type == 4) {    kw(g1,g1_order);    kw(g2,g2_order);    Factor=0.5;  } else {    throw new IllegalArgumentException("valid type values are 1 to 4.\n");  }  cacm283(g1,g1_order,g1r);  cacm283(g2,g2_order,g2r);  double[] lsp=new double[order];  for (i=0, j=0; ; ) {    lsp[j++]=Math.acos(Factor * g1r[i]) / MathUtils.TWOPI;    if (j >= order)     break;    lsp[j++]=Math.acos(Factor * g2r[i]) / MathUtils.TWOPI;    if (j >= order)     break;    i++;  }  return lsp;}  }
class C{  protected VideoDeleteCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static ITemplateHolder createTemplateHolderForReplication(IServerTypeDesc typeDesc,IEntryPacket template,String uid,long expirationTime){  return new TemplateHolder(typeDesc,template,uid,expirationTime,null,SystemTime.timeMillis(),SpaceOperations.READ,null,0);}  }
class C{  public Call patch(String url,Map<String,String> params,Callback callback){  Request request=new Builder().url(url).patch(bodyFromMap(params)).build();  Call call=client.newCall(request);  call.enqueue(callback);  return call;}  }
class C{  @Override public void readCatalog(Catalog catalog,InputStream is) throws IOException {  catfile=is;  if (catfile == null) {    return;  }  Vector unknownEntry=null;  try {    while (true) {      String token=nextToken();      if (token == null) {        if (unknownEntry != null) {          catalog.unknownEntry(unknownEntry);          unknownEntry=null;        }        catfile.close();        catfile=null;        return;      }      String entryToken=null;      if (caseSensitive) {        entryToken=token;      } else {        entryToken=token.toUpperCase();      }      if (entryToken.equals("DELEGATE")) {        entryToken="DELEGATE_PUBLIC";      }      try {        int type=CatalogEntry.getEntryType(entryToken);        int numArgs=CatalogEntry.getEntryArgCount(type);        Vector args=new Vector();        if (unknownEntry != null) {          catalog.unknownEntry(unknownEntry);          unknownEntry=null;        }        for (int count=0; count < numArgs; count++) {          args.addElement(nextToken());        }        catalog.addEntry(new CatalogEntry(entryToken,args));      } catch (      CatalogException cex) {        if (cex.getExceptionType() == CatalogException.INVALID_ENTRY_TYPE) {          if (unknownEntry == null) {            unknownEntry=new Vector();          }          unknownEntry.addElement(token);        } else         if (cex.getExceptionType() == CatalogException.INVALID_ENTRY) {          catalog.getCatalogManager().debug.message(1,"Invalid catalog entry",token);          unknownEntry=null;        } else         if (cex.getExceptionType() == CatalogException.UNENDED_COMMENT) {          catalog.getCatalogManager().debug.message(1,cex.getMessage());        }      }    }  } catch (  CatalogException cex2) {    if (cex2.getExceptionType() == CatalogException.UNENDED_COMMENT) {      catalog.getCatalogManager().debug.message(1,cex2.getMessage());    }  }}  }
class C{  public boolean end(){  return true;}  }
class C{  void resume(){  paused.set(false);synchronized (pauseLock) {    pauseLock.notifyAll();  }}  }
class C{  private static int reduce0(InvocationConstraint[] constraints){  int i=0;  for (int j=0; j < constraints.length; j++) {    InvocationConstraint c=constraints[j];    if (!Constraint.contains(constraints,i,c)) {      constraints[i++]=c;    }  }  return i;}  }
class C{  private void loadButtonText(AbstractButton component,String text){  StringBuffer result=new StringBuffer();  boolean haveMnemonic=false;  char mnemonic='\0';  int mnemonicIndex=-1;  for (int i=0; i < text.length(); i++) {    if (text.charAt(i) == '&') {      i++;      if (i == text.length()) {        break;      }      if (!haveMnemonic && text.charAt(i) != '&') {        haveMnemonic=true;        mnemonic=text.charAt(i);        mnemonicIndex=result.length();      }    }    result.append(text.charAt(i));  }  component.setText(result.toString());  if (haveMnemonic) {    component.setMnemonic(mnemonic);    component.setDisplayedMnemonicIndex(mnemonicIndex);  }}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getDuplicateReadFlag()) {      return false;    }  } else {    if (!record.getDuplicateReadFlag()) {      return false;    }  }  return true;}  }
class C{  public void removeUnlocked(IObjectInfo<T> oi){  remove_impl((ObjectInfo<T>)oi);}  }
class C{  public AudioGetBroadcastListQuery filter(AudioGetBroadcastListFilter value){  return unsafeParam("filter",value);}  }
class C{  public Matrix(double vals[],int m){  this.m=m;  n=(m != 0 ? vals.length / m : 0);  if (m * n != vals.length) {    throw new IllegalArgumentException("Array length must be a multiple of m.");  }  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=vals[i + j * m];    }  }}  }
class C{  public void addExpressionListener(ExpressionUpdateInterface listener){  listenerList.add(listener);}  }
class C{  private void updateCheckSumAndEncryptBlock(byte[] in,int off){  byte l=checksum[BLOCK_LENGTH - 1];  for (int i=0; i < BLOCK_LENGTH; i++) {    byte b=in[off + i];    work[BLOCK_LENGTH + i]=b;    work[BLOCK_LENGTH * 2 + i]=(byte)(work[i] ^ b);    l=(byte)(checksum[i] ^ PI[(b ^ l) & 0xFF]);    checksum[i]=l;  }  byte t=0;  for (int i=0; i < 18; i++) {    for (int j=0; j < 3 * BLOCK_LENGTH; j++) {      t=(byte)(work[j] ^ PI[t & 0xFF]);      work[j]=t;    }    t=(byte)(t + i);  }}  }
class C{  public StorelessCovariance(final int dim,final boolean biasCorrected){  dimension=dim;  covMatrix=new StorelessBivariateCovariance[dimension * (dimension + 1) / 2];  initializeMatrix(biasCorrected);}  }
class C{  private boolean exceededBackupsThreshold(){  return files.size() > backup;}  }
class C{  public void addRenderscriptDirectory(@NotNull String path){  File directory=myFileStructure.createProjectDir(path);  myRenderscriptDirectories.add(directory);}  }
class C{  public boolean isCleared(){  return _cleared;}  }
class C{  public double maxValue(){  Iterator iIter=asTreeMap().values().iterator();  Double dMax=Double.NEGATIVE_INFINITY;  while (iIter.hasNext()) {    Double dVal=(Double)iIter.next();    dMax=(dVal > dMax) ? dVal : dMax;  }  return dMax;}  }
class C{  public static <E>Stream<DoubleSummaryStatistics> shiftingWindowSummarizingDouble(Stream<E> stream,int rollingFactor,ToDoubleFunction<? super E> mapper){  Objects.requireNonNull(stream);  Objects.requireNonNull(mapper);  DoubleStream doubleStream=stream.mapToDouble(mapper);  return shiftingWindowSummarizingLong(doubleStream,rollingFactor);}  }
class C{  public static final MediaFormat createSubtitleFormat(String title,String language){  MediaFormat format=new MediaFormat();  format.setString(KEY_TITLE,title);  format.setString(KEY_LANGUAGE,language);  return format;}  }
class C{  public boolean isDrawSlicesUnderHoleEnabled(){  return mDrawSlicesUnderHole;}  }
class C{  int cardinality(){  return Math.max(distinctAdds() - _deletes,1);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public BaseDataRequestHandler(ObjectMapper mapper){  this.mapper=mapper;  this.writer=mapper.writer();}  }
class C{  public static void main(final String[] args){  GlobalSettingsController.setup();  launch(args);}  }
class C{  public String queryString(int what){  return EGL14.eglQueryString(eGLDisplay,what);}  }
class C{  protected String readFromFile(String sFileName){  ByteArrayOutputStream bsOut=new ByteArrayOutputStream();  FileInputStream fiIn=null;  BufferedInputStream bIn=null;  String sDataString="";  try {    fiIn=new FileInputStream(sFileName);    bIn=new BufferedInputStream(fiIn);    int iData=0;    while ((iData=bIn.read()) > -1)     bsOut.write(iData);    sDataString=bsOut.toString();    fiIn.close();    bIn.close();  } catch (  IOException ioe) {    ioe.printStackTrace(System.err);  }  return sDataString;}  }
class C{  private void writeRequestBody(IBasicRequest request,OutputStream outputStream) throws IOException {  Logger.i("-------Send request data start-------");  OutputStream realOutputStream=IOUtils.toBufferedOutputStream(outputStream);  request.onWriteRequestBody(realOutputStream);  IOUtils.closeQuietly(realOutputStream);  Logger.i("-------Send request data end-------");}  }
class C{  public static Timestamp addBackward(GenericValue techDataCalendar,Timestamp dateFrom,long amount){  Timestamp dateTo=(Timestamp)dateFrom.clone();  long previousCapacity=capacityRemainingBackward(techDataCalendar,dateFrom);  if (amount <= previousCapacity) {    dateTo.setTime(dateTo.getTime() - amount);    amount=0;  } else   amount-=previousCapacity;  Map<String,Object> result=FastMap.newInstance();  while (amount > 0) {    result=endPreviousDay(techDataCalendar,dateTo);    dateTo=(Timestamp)result.get("dateTo");    previousCapacity=((Double)result.get("previousCapacity")).longValue();    if (amount <= previousCapacity) {      dateTo.setTime(dateTo.getTime() - amount);      amount=0;    } else     amount-=previousCapacity;  }  return dateTo;}  }
class C{  public static int densityDpi(Context context){  return displayMetrics(context).densityDpi;}  }
class C{  private String preprocessSLD(StyledLayerDescriptor sld){  if (sld == null) {    return null;  }  SLDWriterInterface sldWriter=SLDWriterFactory.createWriter(null);  DuplicatingStyleVisitor duplicator=new DuplicatingStyleVisitor();  sld.accept(duplicator);  StyledLayerDescriptor sldCopy=(StyledLayerDescriptor)duplicator.getCopy();  for (  StyledLayer styledLayer : sldCopy.layers()) {    if (styledLayer instanceof UserLayer) {      UserLayerImpl userLayer=(UserLayerImpl)styledLayer;      userLayer.setInlineFeatureDatastore(null);      userLayer.setInlineFeatureType(null);    }  }  String sldContents=sldWriter.encodeSLD(null,sldCopy);  return sldContents;}  }
class C{  public boolean field_based(){  return soot.PhaseOptions.getBoolean(options,"field-based");}  }
class C{  public PollsGetByIdQuery(VkApiClient client,UserActor actor,int pollId){  super(client,"polls.getById",Utils.buildParametrizedType(List.class,Poll.class));  accessToken(actor.getAccessToken());  pollId(pollId);}  }
class C{  public Expression(){}  }
class C{  protected void init(ModelEntity modelEntity){  assertIsMutable();  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  this.modelEntity=modelEntity;  this.entityName=modelEntity.getEntityName();  this.observable=new Observable();  if (this.entityName == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null entityName in the modelEntity parameter");  }}  }
class C{  public SingularValueDecomposition svd(){  return new SingularValueDecomposition(this);}  }
class C{  protected void updateActionBarTitleAndHomeButtonByString(String title){  String titleToSet=getString(R.string.app_name);  if (title != null) {    titleToSet=title;  }  ActionBar actionBar=getSupportActionBar();  actionBar.setTitle(titleToSet);  View actionBarTitleView=getWindow().getDecorView().findViewById(getResources().getIdentifier("action_bar_title","id","android"));  actionBar.setDisplayHomeAsUpEnabled(true);  actionBar.setDisplayShowTitleEnabled(true);}  }
class C{  private String createDashArrayString(List<Float> dashesArray){  StringBuilder sb=new StringBuilder();  if (dashesArray != null) {    int index=0;    for (    Float value : dashesArray) {      String str=Float.toString(value);      if (str.endsWith(".0")) {        sb.append(value.intValue());      } else {        sb.append(value);      }      if (index < dashesArray.size() - 1) {        sb.append(" ");      }      index++;    }  }  return sb.toString();}  }
class C{  public static void expandID(String numberString,WordRelation wordRelation){  int numberDigits=numberString.length();  if ((numberDigits == 4) && (numberString.charAt(2) == '0') && (numberString.charAt(3) == '0')) {    if (numberString.charAt(1) == '0') {      expandNumber(numberString,wordRelation);    } else {      expandNumber(numberString.substring(0,2),wordRelation);      wordRelation.addWord("hundred");    }  } else   if ((numberDigits == 2) && (numberString.charAt(0) == '0')) {    wordRelation.addWord("oh");    expandDigits(numberString.substring(1,2),wordRelation);  } else   if ((numberDigits == 4 && numberString.charAt(1) == '0') || numberDigits < 3) {    expandNumber(numberString,wordRelation);  } else   if (numberDigits % 2 == 1) {    String firstDigit=digit2num[numberString.charAt(0) - '0'];    wordRelation.addWord(firstDigit);    expandID(numberString.substring(1,numberDigits),wordRelation);  } else {    expandNumber(numberString.substring(0,2),wordRelation);    expandID(numberString.substring(2,numberDigits),wordRelation);  }}  }
class C{  private void drawBuilding(Canvas canvas){  final Matrix matrix=mMatrix;  matrix.reset();  float dragPercent=Math.min(1f,Math.abs(mPercent));  float buildingScale;  buildingScale=BUILDING_INITIAL_SCALE + (BUILDING_FINAL_SCALE - BUILDING_INITIAL_SCALE) * dragPercent;  matrix.preScale(buildingScale,buildingScale);  final float offsetX=mScreenWidth / 2 - mBuilding.getWidth() / 2 + (1f - buildingScale) * mBuilding.getWidth() / 2;  final float offsetY=mBuildingTopOffset;  matrix.postTranslate(offsetX,offsetY);  canvas.drawBitmap(mBuilding,matrix,null);}  }
class C{  public void rotateImage(RotateDegrees degrees){  rotateImage(degrees,mAnimationDurationMillis);}  }
class C{  @Override public boolean sameOrientationAs(final Hyperplane<Euclidean3D> other){  return (((Plane)other).w).dotProduct(w) > 0.0;}  }
class C{  @Nullable @Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){  rootView=(ViewGroup)inflater.inflate(R.layout.fragement,container,false);  initCurrentMonthInGridview();  if (Singleton.getInstance().getIsSwipeViewPager() == 2)   refreshDays();  return rootView;}  }
class C{  public void draw(Graphics2D gc,boolean centerLabelWidth,boolean centerLabelHeight){  if (centerLabelWidth || centerLabelHeight) {    Dimension labelSize=Basic.getStringSize(gc,label,gc.getFont()).getSize();    gc.drawString(label,(int)(x - (centerLabelWidth ? labelSize.getWidth() / 2 : 0)),(int)(y + (centerLabelHeight ? labelSize.getHeight() / 2 : 0)));  } else   gc.drawString(label,x,y);}  }
class C{  public static Map<String,Object> dom2Map(Document doc){  Map<String,Object> maproot=new HashMap<String,Object>();  if (doc == null)   return maproot;  Element root=doc.getRootElement();  List list1=root.elements();  for (  Object obj : list1) {    Element element=(Element)obj;    Map<String,Object> map=new HashMap<String,Object>();    element2Map(element,map);    maproot.put(element.getName(),map);  }  return maproot;}  }
class C{  public static boolean isSuccess(Map<String,? extends Object> results){  if (ServiceUtil.isError(results) || ServiceUtil.isFailure(results)) {    return false;  }  return true;}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  doGet(request,response);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GLBType fullCopy(){  GLBType tree=(GLBType)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public BoardCreateCommentQuery fromGroup(Boolean value){  return unsafeParam("from_group",value);}  }
class C{  public PhotosGetUserPhotosQuery userId(Integer value){  return unsafeParam("user_id",value);}  }
class C{  private int locatePoint(final T time,final FieldODEStateInterpolator<T> interval){  if (forward) {    if (time.subtract(interval.getPreviousState().getTime()).getReal() < 0) {      return -1;    } else     if (time.subtract(interval.getCurrentState().getTime()).getReal() > 0) {      return +1;    } else {      return 0;    }  }  if (time.subtract(interval.getPreviousState().getTime()).getReal() > 0) {    return -1;  } else   if (time.subtract(interval.getCurrentState().getTime()).getReal() < 0) {    return +1;  } else {    return 0;  }}  }
class C{  public static String keyOfIds(Class<?> clazz){  try {    return IDS_KEY_CACHE.get(clazz);  } catch (  ExecutionException e) {    throw new KeyException(e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_REJECT_PARTY(String value0){  return new SM_SYSTEM_MESSAGE(1300973,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Fear_END_A_TO_B(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200904,skilltarget);}  }
class C{  public byte[] unCompress(byte[] compInput){  try {    return Snappy.uncompress(compInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());  }  return compInput;}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  Set<Map.Entry<String,ColumnSchemaDetails>> entries=columnSchemaDetailsMap.entrySet();  Iterator<Map.Entry<String,ColumnSchemaDetails>> iterator=entries.iterator();  while (iterator.hasNext()) {    Map.Entry<String,ColumnSchemaDetails> entry=iterator.next();    builder.append(entry.getKey());    builder.append(CarbonCommonConstants.HASH_SPC_CHARACTER);    builder.append(entry.getValue().toString());    if (iterator.hasNext()) {      builder.append(CarbonCommonConstants.HASH_SPC_CHARACTER);    }  }  return builder.toString();}  }
class C{  public static List<String> readLines(InputStream input) throws IOException {  return readLines(input,Charset.defaultCharset());}  }
class C{  public SnapshotDescriptor(X snapshot,String name,String description,Image icon,int position,int autoExpansionPolicy){  super(snapshot,name,description,icon,position,autoExpansionPolicy);}  }
class C{  public static double pareto(){  return pareto(1.0);}  }
class C{  public IEntryHolder cancel(String entryUid,String classname,int objectType,boolean fromReplication,boolean origin,boolean isFromGateway) throws UnknownLeaseException {  return cancel(entryUid,classname,objectType,fromReplication,origin,false,null,isFromGateway);}  }
class C{  protected String dfp2string(){  char buffer[]=new char[mant.length * 4 + 20];  int p=1;  int q;  int e=exp;  boolean pointInserted=false;  buffer[0]=' ';  if (e <= 0) {    buffer[p++]='0';    buffer[p++]='.';    pointInserted=true;  }  while (e < 0) {    buffer[p++]='0';    buffer[p++]='0';    buffer[p++]='0';    buffer[p++]='0';    e++;  }  for (int i=mant.length - 1; i >= 0; i--) {    buffer[p++]=(char)((mant[i] / 1000) + '0');    buffer[p++]=(char)(((mant[i] / 100) % 10) + '0');    buffer[p++]=(char)(((mant[i] / 10) % 10) + '0');    buffer[p++]=(char)(((mant[i]) % 10) + '0');    if (--e == 0) {      buffer[p++]='.';      pointInserted=true;    }  }  while (e > 0) {    buffer[p++]='0';    buffer[p++]='0';    buffer[p++]='0';    buffer[p++]='0';    e--;  }  if (!pointInserted) {    buffer[p++]='.';  }  q=1;  while (buffer[q] == '0') {    q++;  }  if (buffer[q] == '.') {    q--;  }  while (buffer[p - 1] == '0') {    p--;  }  if (sign < 0) {    buffer[--q]='-';  }  return new String(buffer,q,p - q);}  }
class C{  @Override public boolean isSchemaLanguageSupported(String schemaLanguage){  if (schemaLanguage == null) {    throw new NullPointerException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),"SchemaLanguageNull",null));  }  if (schemaLanguage.length() == 0) {    throw new IllegalArgumentException(JAXPValidationMessageFormatter.formatMessage(fXMLSchemaLoader.getLocale(),"SchemaLanguageLengthZero",null));  }  return schemaLanguage.equals(XMLConstants.W3C_XML_SCHEMA_NS_URI);}  }
class C{  @Override public void startDocument() throws SAXException {  if (documentHandler != null) {    documentHandler.startDocument();  }}  }
class C{  private static boolean isFastMobileNetwork(Context context){  TelephonyManager telephonyManager=(TelephonyManager)context.getSystemService(Context.TELEPHONY_SERVICE);  if (telephonyManager == null) {    return false;  }switch (telephonyManager.getNetworkType()) {case TelephonyManager.NETWORK_TYPE_1xRTT:    return false;case TelephonyManager.NETWORK_TYPE_CDMA:  return false;case TelephonyManager.NETWORK_TYPE_EDGE:return false;case TelephonyManager.NETWORK_TYPE_EVDO_0:return true;case TelephonyManager.NETWORK_TYPE_EVDO_A:return true;case TelephonyManager.NETWORK_TYPE_GPRS:return false;case TelephonyManager.NETWORK_TYPE_HSDPA:return true;case TelephonyManager.NETWORK_TYPE_HSPA:return true;case TelephonyManager.NETWORK_TYPE_HSUPA:return true;case TelephonyManager.NETWORK_TYPE_UMTS:return true;case TelephonyManager.NETWORK_TYPE_EHRPD:return true;case TelephonyManager.NETWORK_TYPE_EVDO_B:return true;case TelephonyManager.NETWORK_TYPE_HSPAP:return true;case TelephonyManager.NETWORK_TYPE_IDEN:return false;case TelephonyManager.NETWORK_TYPE_LTE:return true;case TelephonyManager.NETWORK_TYPE_UNKNOWN:return false;default :return false;}}  }
class C{  public void unRegisterEvent(Object object){  if (noParamMap.containsKey(object)) {    noParamMap.remove(object);  }  if (hasParamMap.containsKey(object)) {    hasParamMap.remove(object);  }}  }
class C{  public static byte[] encryptSHA(byte[] bytes){  try {    MessageDigest md=MessageDigest.getInstance("SHA");    md.update(bytes);    return md.digest();  } catch (  NoSuchAlgorithmException e) {    e.printStackTrace();  }  return new byte[0];}  }
class C{  public int numVars(){  return derivatives.size();}  }
class C{  public void removeCandy(PokemonFamilyId family,int amount){  if (candies.containsKey(family)) {    if (candies.get(family) - amount < 0) {      candies.put(family,0);    } else {      candies.put(family,candies.get(family) - amount);    }  } else {    candies.put(family,0);  }}  }
class C{  private void callRedirect(String url,HttpServletResponse resp,HttpServletRequest req,String statusCodeString) throws RequestHandlerException {  if (Debug.infoOn())   Debug.logInfo("Sending redirect to: [" + url + "], sessionId="+ UtilHttp.getSessionId(req),module);  if (url == null || url.isEmpty()) {    Debug.logError("Scipio: Redirect URL is empty",module);    throw new RequestHandlerException("Scipio: Redirect URL is empty");  }  Enumeration<String> attributeNameEnum=UtilGenerics.cast(req.getAttributeNames());  Map<String,Object> reqAttrMap=new HashMap<String,Object>();  Integer statusCode;  try {    statusCode=Integer.valueOf(statusCodeString);  } catch (  NumberFormatException e) {    statusCode=303;  }  while (attributeNameEnum.hasMoreElements()) {    String name=attributeNameEnum.nextElement();    Object obj=req.getAttribute(name);    if (obj instanceof Serializable) {      reqAttrMap.put(name,obj);    }  }  if (reqAttrMap.size() > 0) {    reqAttrMap.remove("_REQUEST_HANDLER_");    byte[] reqAttrMapBytes=UtilObject.getBytes(reqAttrMap);    if (reqAttrMapBytes != null) {      req.getSession().setAttribute("_REQ_ATTR_MAP_",StringUtil.toHexString(reqAttrMapBytes));    }  }  try {    resp.setStatus(statusCode);    resp.setHeader("Location",url);    resp.setHeader("Connection","close");  } catch (  IllegalStateException ise) {    throw new RequestHandlerException(ise.getMessage(),ise);  }}  }
class C{  @Override public void clear(){  if (null != columnDictionaryInfo) {    columnDictionaryInfo.clear();    columnDictionaryInfo=null;  }}  }
class C{  @POST @Path("applications/{applicationName}/experiments/{experimentLabel}/users") @Consumes(APPLICATION_JSON) @Produces(APPLICATION_JSON) @Timed public Response recordUsersEvents(@PathParam("applicationName") final Application.Name applicationName,@PathParam("experimentLabel") final Experiment.Label experimentLabel,final Map<User.ID,List<Event>> eventList){  throw new UnsupportedOperationException("Not implemented");}  }
class C{  public Object interpret(FeatureVector fv){  return interpret(rootNode,fv);}  }
class C{  @Override public void write(byte[] bts,int st,int end) throws IOException {  try {    beforeWrite(end);    out.write(bts,st,end);    afterWrite(end);  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  public Builder buttonPressedBackgroundColor(int buttonPressedBackgroundColor){  this.buttonPressedBackgroundColor=buttonPressedBackgroundColor;  return this;}  }
class C{  public boolean isSetServiceName(){  return this.serviceName != null;}  }
class C{  String attemptToFormatAccruedDigits(){  for (  NumberFormat numberFormat : possibleFormats) {    Matcher m=regexCache.getPatternForRegex(numberFormat.getPattern()).matcher(nationalNumber);    if (m.matches()) {      shouldAddSpaceAfterNationalPrefix=NATIONAL_PREFIX_SEPARATORS_PATTERN.matcher(numberFormat.getNationalPrefixFormattingRule()).find();      String formattedNumber=m.replaceAll(numberFormat.getFormat());      return appendNationalNumber(formattedNumber);    }  }  return "";}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x110000];  int i=0;  int j=0;  while (i < 84) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public TContainsExtended(){  super(null,null);}  }
class C{  public static boolean isSolaris(){  return (OS.indexOf("sunos") >= 0);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public Cluster(){  points=new ArrayList<T>();}  }
class C{  @Override public void clear(){  sumX=0d;  sumXX=0d;  sumY=0d;  sumYY=0d;  sumXY=0d;  n=0;}  }
class C{  private Names(){}  }
class C{  public boolean hasPermissionsByInternalId(String internalId,String... permissions){  List<Permission> resolvedPermissions=Lists.newArrayListWithCapacity(permissions.length);  for (  String permission : permissions) {    resolvedPermissions.add(getPermissionResolver().resolvePermission(permission));  }  return hasPermissionsByInternalId(internalId,resolvedPermissions);}  }
class C{  private void badIndex(int index){  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  public ZWaveMeterTblMonitorCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public VideoGetCommentsQuery(VkApiClient client,UserActor actor,int videoId){  super(client,"video.getComments",GetCommentsResponse.class);  accessToken(actor.getAccessToken());  videoId(videoId);}  }
class C{  void STAR_encoding_diag2(){  int i, j, stripe, k;  char[] tmp;  tmp=new char[p * block_size];  for (stripe=0; stripe < block_nbr + 1; stripe++) {    for (i=0; i < data_disk_nbr; i++) {      for (j=0; j < block_size; j++) {        k=(stripe + i + p) % p;        if (k < block_nbr)         tmp[stripe * block_size + j]^=check_data[i][k * block_size + j];      }    }  }  for (i=0; i < block_nbr; i++) {    for (j=0; j < block_size; j++) {      tmp[i * block_size + j]^=tmp[block_nbr * block_size + j];    }  }  System.arraycopy(tmp,0,check_data[data_disk_nbr + 2],0,stripe_unit_size);}  }
class C{  public NewExpr newNewExpr(RefType type){  return new JNewExpr(type);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_CloseAerial_A_TO_SELF(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200801,skillcaster,skillname);}  }
class C{  @Override public synchronized XSObject item(int index){  if (fArray == null) {    getLength();    fArray=new XSObject[fLength];    int pos=0;    for (int i=0; i < fNSNum; i++) {      pos+=fMaps[i].getValues(fArray,pos);    }  }  if (index < 0 || index >= fLength) {    return null;  }  return fArray[index];}  }
class C{  public static MyServicePrx uncheckedCast(Ice.ObjectPrx __obj,String __facet){  return uncheckedCastImpl(__obj,__facet,MyServicePrx.class,MyServicePrxHelper.class);}  }
class C{  public static void createArchive(File directory,File archive){  ZipOutputStream zos=null;  FileInputStream fis=null;  File[] contents=directory.listFiles();  try {    zos=new ZipOutputStream(new FileOutputStream(archive));    for (    File file : contents) {      if (file.isFile()) {        zos.putNextEntry(new ZipEntry(file.getName()));        try {          fis=new FileInputStream(file);          int bytes;          byte[] packet=new byte[COPY_PACKET_SIZE];          while ((bytes=fis.read(packet,0,COPY_PACKET_SIZE)) != -1)           zos.write(packet,0,bytes);        }  finally {          try {            if (fis != null)             fis.close();          } catch (          Exception e) {            LOGGER.log(Level.SEVERE,"Problem closing archive entry stream",e);          }          if (zos != null)           zos.closeEntry();        }      } else {      }    }  } catch (  Exception e) {    LOGGER.log(Level.SEVERE,"Error creating archive",e);  } finally {    try {      if (zos != null)       zos.close();    } catch (    Exception e) {      LOGGER.log(Level.SEVERE,"Problem closing archive stream",e);    }  }}  }
class C{  protected PhotosDeleteCommentQuery commentId(int value){  return unsafeParam("comment_id",value);}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  private void stop(){  if (start == 0) {    LOG.warn("Tried to stop timer that has not been started: {}",name);    return;  }  duration+=System.nanoTime() - start;  REGISTRY.timer(name).update(duration,TimeUnit.NANOSECONDS);  start=0;}  }
class C{  @Override @Transactional(rollbackFor=Exception.class,propagation=Propagation.REQUIRED) public LoginResDto login(LoginReqDto reqDto){  LoginResDto resDto=new LoginResDto();  User queryUser=new User();  queryUser.setUserId(reqDto.getUserId());  queryUser.setValid(1);  List<User> userList=userDao.searchUser(queryUser);  if (userList == null || userList.isEmpty())   throw new RuntimeException(ERR_USER_NOT_EXIST);  User findUser=userList.get(0);  if (!findUser.getUserPwd().equals(reqDto.getPassword()))   throw new RuntimeException(ERR_PWD_WRONG);  LoginHistory loginHistory=new LoginHistory();  loginHistory.setUserId(reqDto.getUserId());  loginHistory.setDeviceId(reqDto.getDeviceId());  loginHistory.setPlatform(reqDto.getPlatform());  loginHistoryDao.addLoginHistory(loginHistory);  resDto.setMenuList(buildSystemMenus(reqDto.getUserId()));  List<String> roleList=userRoleDao.searchRoleByUserId(reqDto.getUserId());  String role=StringUtils.concatStrFromList(roleList,null);  resDto.setUserId(findUser.getUserId());  resDto.setUserName(findUser.getUserName());  resDto.setToken(generateAccessToken(reqDto,role));  return resDto;}  }
class C{  @Override public void paint(@NotNull Graphics2D gc){  myScreenView.getSize(myScreenViewSize);  mySizeRectangle.setBounds(myScreenView.getX(),myScreenView.getY(),myScreenViewSize.width,myScreenViewSize.height);  Rectangle2D.intersect(mySizeRectangle,gc.getClipBounds(),mySizeRectangle);  if (mySizeRectangle.isEmpty()) {    return;  }  NlModel myModel=myScreenView.getModel();  if (!myShowOnHover && showOnSelection) {    return;  }  if (myModel.getComponents().size() == 0) {    return;  }  NlComponent component=myModel.getComponents().get(0);  component=component.getRoot();  Graphics2D g=(Graphics2D)gc.create();  g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  if (drawComponent(g,component,false)) {    Dimension size=myScreenView.getSize();    if (size.width != 0 && size.height != 0) {      myDesignSurface.repaint(myScreenView.getX(),myScreenView.getY(),size.width,size.height);    } else {      myDesignSurface.repaint();    }  }  g.dispose();}  }
class C{  public LogSubject equalsNext(@Nullable MessageType type,String text){  return assertRegex(type,Pattern.quote(text));}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  if (parentObj != null) {    parentObj.dataChanged(changedField);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SLAYER_UP_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400143,value0);}  }
class C{  @NotNull public ListFaceListsAction listFaceLists(){  return new ListFaceListsAction(cognitiveContext);}  }
class C{  private boolean parseUnescapedField(int fieldUpto) throws ParseException {  int fieldStart=bufferUpto;  while (bufferUpto < chars.length) {    char c=chars[bufferUpto++];    if (c == delimChar) {      addOneField(fieldUpto,fieldStart,bufferUpto - fieldStart - 1);      return true;    } else     if (c == NEWLINE) {      addOneField(fieldUpto,fieldStart,bufferUpto - fieldStart - 1);      bufferUpto--;      return true;    }  }  return false;}  }
class C{  public PopupMessage(@Nonnull String caption,@Nonnull String message){  this.caption=Preconditions.checkNotNull(caption,"caption");  this.message=Preconditions.checkNotNull(message,"message");}  }
class C{  @Override public ISBNParsedResult parse(Result result){  BarcodeFormat format=result.getBarcodeFormat();  if (format != BarcodeFormat.EAN_13) {    return null;  }  String rawText=getMassagedText(result);  int length=rawText.length();  if (length != 13) {    return null;  }  if (!rawText.startsWith("978") && !rawText.startsWith("979")) {    return null;  }  return new ISBNParsedResult(rawText);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public PostDecExpr fullCopy(){  PostDecExpr tree=(PostDecExpr)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIND_POS_SUBZONE_FOUND_DEV(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400546,value0,value1);}  }
class C{  protected void readChangeLogVersionNode(XmlPullParser parser,ChangeLog changeLog) throws Exception {  if (parser == null)   return;  parser.require(XmlPullParser.START_TAG,null,TAG_CHANGELOGVERSION);  String versionName=parser.getAttributeValue(null,ATTRIBUTE_VERSIONNAME);  String versionCodeStr=parser.getAttributeValue(null,ATTRIBUTE_VERSIONCODE);  int versionCode=0;  if (versionCodeStr != null) {    try {      versionCode=Integer.parseInt(versionCodeStr);    } catch (    NumberFormatException ne) {      Log.w(TAG,"Error while parsing versionCode.It must be a numeric value. Check you file.");    }  }  String changeDate=parser.getAttributeValue(null,ATTRIBUTE_CHANGEDATE);  if (versionName == null)   throw new ChangeLogException("VersionName required in changeLogVersion node");  ChangeLogRowHeader row=new ChangeLogRowHeader();  row.setVersionName(versionName);  row.setChangeDate(changeDate);  changeLog.addRow(row);  while (parser.next() != XmlPullParser.END_TAG) {    if (parser.getEventType() != XmlPullParser.START_TAG) {      continue;    }    String tag=parser.getName();    if (mChangeLogTags.contains(tag)) {      readChangeLogRowNode(parser,changeLog,versionName,versionCode);    }  }}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("deselect series=all;");}  }
class C{  boolean hasFired(){  int status=getSequenceStatus();  return (status == SEQUENCE_FINISHED);}  }
class C{  public URI(String p_scheme,String p_schemeSpecificPart) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme!");  }  if (p_schemeSpecificPart == null || p_schemeSpecificPart.trim().length() == 0) {    throw new MalformedURIException("Cannot construct URI with null/empty scheme-specific part!");  }  setScheme(p_scheme);  setPath(p_schemeSpecificPart);}  }
class C{  public JoinOperator(QueryOperator leftSource,QueryOperator rightSource,String leftColumnName,String rightColumnName) throws QueryPlanException {  super(OperatorType.JOIN);  this.leftSource=leftSource;  this.rightSource=rightSource;  this.leftColumnName=leftColumnName;  this.rightColumnName=rightColumnName;  this.setOutputSchema(this.computeSchema());}  }
class C{  public Iterator<Record> execute() throws QueryPlanException, DatabaseException {  Iterator<Record> sourceIterator=this.getSource().execute();  List<Record> newRecords=new ArrayList<Record>();  MarkerRecord markerRecord=MarkerRecord.getMarker();  if (this.hasAggregate) {    boolean prevWasMarker=true;    List<DataType> baseValues=new ArrayList<DataType>();    while (sourceIterator.hasNext()) {      Record r=sourceIterator.next();      List<DataType> recordValues=r.getValues();      if (r == markerRecord) {        if (this.hasCount) {          int count=this.getAndResetCount();          baseValues.add(new IntDataType(count));        }        if (this.sumColumnIndex != -1) {          double sum=this.getAndResetSum();          if (this.sumIsFloat) {            baseValues.add(new FloatDataType((float)sum));          } else {            baseValues.add(new IntDataType((int)sum));          }        }        if (this.averageColumnIndex != -1) {          double average=(float)this.getAndResetAverage();          baseValues.add(new FloatDataType((float)average));        }        prevWasMarker=true;        newRecords.add(new Record(baseValues));        baseValues=new ArrayList<DataType>();      } else {        if (prevWasMarker) {          for (          int index : this.indices) {            baseValues.add(recordValues.get(index));          }          prevWasMarker=false;        }        if (this.hasCount) {          this.addToCount();        }        if (this.sumColumnIndex != -1) {          this.addToSum(r);        }        if (this.averageColumnIndex != -1) {          this.addToAverage(r);        }      }    }    if (this.hasCount) {      int count=this.getAndResetCount();      baseValues.add(new IntDataType(count));    }    if (this.sumColumnIndex != -1) {      double sum=this.getAndResetSum();      if (this.sumIsFloat) {        baseValues.add(new FloatDataType((float)sum));      } else {        baseValues.add(new IntDataType((int)sum));      }    }    if (this.averageColumnIndex != -1) {      double average=this.getAndResetAverage();      baseValues.add(new FloatDataType((float)average));    }    newRecords.add(new Record(baseValues));    baseValues=new ArrayList<DataType>();  } else {    while (sourceIterator.hasNext()) {      Record r=sourceIterator.next();      List<DataType> recordValues=r.getValues();      List<DataType> newValues=new ArrayList<DataType>();      if (r == markerRecord) {        newRecords.add(markerRecord);      } else {        for (        int index : this.indices) {          newValues.add(recordValues.get(index));        }        Record newRecord=new Record(newValues);        newRecords.add(newRecord);      }    }  }  return newRecords.iterator();}  }
class C{  public static Map<String,Object> createPartyRelationshipType(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_CREATE");  if (result.size() > 0)   return result;  GenericValue partyRelationshipType=delegator.makeValue("PartyRelationshipType",UtilMisc.toMap("partyRelationshipTypeId",context.get("partyRelationshipTypeId")));  partyRelationshipType.set("parentTypeId",context.get("parentTypeId"),false);  partyRelationshipType.set("hasTable",context.get("hasTable"),false);  partyRelationshipType.set("roleTypeIdValidFrom",context.get("roleTypeIdValidFrom"),false);  partyRelationshipType.set("roleTypeIdValidTo",context.get("roleTypeIdValidTo"),false);  partyRelationshipType.set("description",context.get("description"),false);  partyRelationshipType.set("partyRelationshipName",context.get("partyRelationshipName"),false);  try {    if ((EntityQuery.use(delegator).from(partyRelationshipType.getEntityName()).where(partyRelationshipType.getPrimaryKey()).queryOne()) != null) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeAlreadyExists",locale));    }  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeReadFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  try {    partyRelationshipType.create();  } catch (  GenericEntityException e) {    Debug.logWarning(e.getMessage(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyRelationshipTypeWriteFailure",UtilMisc.toMap("errorString",e.getMessage()),locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  public static double cos(double x){  int quadrant=0;  double xa=x;  if (x < 0) {    xa=-xa;  }  if (xa != xa || xa == Double.POSITIVE_INFINITY) {    return Double.NaN;  }  double xb=0;  if (xa > 3294198.0) {    double reduceResults[]=new double[3];    reducePayneHanek(xa,reduceResults);    quadrant=((int)reduceResults[0]) & 3;    xa=reduceResults[1];    xb=reduceResults[2];  } else   if (xa > 1.5707963267948966) {    final CodyWaite cw=new CodyWaite(xa);    quadrant=cw.getK() & 3;    xa=cw.getRemA();    xb=cw.getRemB();  }switch (quadrant) {case 0:    return cosQ(xa,xb);case 1:  return -sinQ(xa,xb);case 2:return -cosQ(xa,xb);case 3:return sinQ(xa,xb);default :return Double.NaN;}}  }
class C{  public String toString(cp_info constant_pool[]){  CONSTANT_Class_info cc=(CONSTANT_Class_info)(constant_pool[class_index]);  CONSTANT_NameAndType_info cn=(CONSTANT_NameAndType_info)(constant_pool[name_and_type_index]);  return cc.toString(constant_pool) + "." + cn.toString(constant_pool);}  }
class C{  @Override public void onViewStateRestored(Bundle savedInstanceState){  super.onViewStateRestored(savedInstanceState);  if (savedInstanceState != null) {    Log.d(TAG,"Retrieving saved state Pokemon.");    mPokeModel=new Gson().fromJson(savedInstanceState.getString(POKE_MODEL_STATE_KEY),PokeModel.class);    if (mPokeModel != null) {      loadSpriteAndPalettes(mPokeModel);      setPokemonData(mPokeModel);    } else {      Log.d(TAG,"Waiting for background thread to load Pokemon data.");    }  }}  }
class C{  static void appendModeInfo(Mode mode,BitArray bits){  bits.appendBits(mode.getBits(),4);}  }
class C{  synchronized public boolean unexport(Remote obj){  _unexport(obj);  _identityExportObjTable.remove(new WeakKey(obj));  return true;}  }
class C{  public boolean updateLayout(long time,long dt){  PerfTraceEvent.instant("StripLayoutHelper:updateLayout");  final boolean doneAnimating=onUpdateAnimation(time,false);  updateStrip(time,dt);  return doneAnimating;}  }
class C{  @SuppressWarnings("unused") public Hashtable batchGet(ObjectInfo objInfo,String[] keys,Map failKeys,int expires) throws MyException {  ServerInfo server;  ProtoCommon.PkgHeader header;  byte[] bsPackage;  int offset;  Iterator it;  Map.Entry entry;  String key;  String value;  byte[] bsKey;  byte[] bsValue;  int i;  Hashtable keyValues;  int key_count;  int key_len;  int value_len;  byte status;  header=new ProtoCommon.PkgHeader();  header.key_hash_code=objInfo.getHashCode();  server=this.serverGroup.getServer(header.key_hash_code);  if (server == null) {    this.status=2;    return null;  }  try {    header.body_len=objInfo.getPackLength() + 4;    header.cmd=ProtoCommon.FDHT_PROTO_CMD_BATCH_GET;    header.keep_alive=(byte)(this.serverGroup.keep_alive ? 1 : 0);    header.timestamp=(int)(System.currentTimeMillis() / 1000);    header.expires=expires;    for (i=0; i < keys.length; i++) {      header.body_len+=4 + keys[i].getBytes(ClientGlobal.g_charset).length;    }    bsPackage=new byte[ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE + header.body_len];    ProtoCommon.packHeader(header,bsPackage);    offset=objInfo.pack(bsPackage,ProtoCommon.FDHT_PROTO_PKG_HEADER_SIZE);    ProtoCommon.int2buff(keys.length,bsPackage,offset);    offset+=4;    for (i=0; i < keys.length; i++) {      bsKey=keys[i].getBytes(ClientGlobal.g_charset);      ProtoCommon.int2buff(bsKey.length,bsPackage,offset);      offset+=4;      System.arraycopy(bsKey,0,bsPackage,offset,bsKey.length);      offset+=bsKey.length;    }    OutputStream out=server.sock.getOutputStream();    out.write(bsPackage);    ProtoCommon.PkgInfo pkgInfo=ProtoCommon.recvPackage(server.sock.getInputStream(),ProtoCommon.FDHT_PROTO_CMD_RESP,-1);    this.status=pkgInfo.header.status;    if (this.status != 0) {      return null;    }    if (pkgInfo.body.length < 8 + 5 * keys.length) {      System.err.println("server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " body length: "+ pkgInfo.body.length+ " < "+ (8 + 5 * keys.length));      this.serverGroup.forceClose(server);      this.status=22;      return null;    }    key_count=ProtoCommon.buff2int(pkgInfo.body,0);    if (key_count != keys.length) {      System.err.println("server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " key count: "+ key_count+ " != "+ keys.length);      this.serverGroup.forceClose(server);      this.status=22;      return null;    }    offset=8;    failKeys.clear();    keyValues=new Hashtable(2 * keys.length,(float)0.50);    for (i=0; i < key_count; i++) {      key_len=ProtoCommon.buff2int(pkgInfo.body,offset);      offset+=4;      key=new String(pkgInfo.body,offset,key_len,ClientGlobal.g_charset);      status=pkgInfo.body[offset + key_len];      offset+=key_len + 1;      if (status == 0) {        value_len=ProtoCommon.buff2int(pkgInfo.body,offset);        offset+=4;        value=new String(pkgInfo.body,offset,value_len,ClientGlobal.g_charset);        keyValues.put(key,value);        offset+=value_len;      } else {        failKeys.put(key,new Integer(status));      }    }    return keyValues;  } catch (  IOException ex) {    System.err.println("server " + server.address.getAddress().getHostAddress() + ":"+ server.address.getPort()+ " IOException, error msg: "+ ex.getMessage());    this.serverGroup.forceClose(server);    this.status=5;    return null;  } finally {    this.serverGroup.closeServer(server);  }}  }
class C{  @Override public String toString(){  return Vector3DFormat.getInstance().format(toVector3D());}  }
class C{  public ArrayFieldVector(FieldVector<T> v1,T[] v2) throws NullArgumentException {  MathUtils.checkNotNull(v1);  MathUtils.checkNotNull(v2);  field=v1.getField();  final T[] v1Data=(v1 instanceof ArrayFieldVector) ? ((ArrayFieldVector<T>)v1).data : v1.toArray();  data=MathArrays.buildArray(field,v1Data.length + v2.length);  System.arraycopy(v1Data,0,data,0,v1Data.length);  System.arraycopy(v2,0,data,v1Data.length,v2.length);}  }
class C{  public void remove() throws UnsupportedOperationException {  if (this.lastIndex < 0) {    throw new IllegalStateException("No header to remove.");  }  this.allHeaders.remove(this.lastIndex);  this.lastIndex=-1;  this.currentIndex--;}  }
class C{  public Matrix(int m,int n,double s){  this.m=m;  this.n=n;  A=new double[m][n];  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=s;    }  }}  }
class C{  public void resetMove(){  if (owner.getAi2().isLogging()) {    AI2Logger.moveinfo(owner,"MC perform stop");  }  started.set(false);  targetDestX=0;  targetDestY=0;  targetDestZ=0;  pointX=0;  pointY=0;  pointZ=0;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  AbstractTagCacheObject cacheObject=(AbstractTagCacheObject)super.clone();  ReentrantReadWriteLock lock=new ReentrantReadWriteLock();  cacheObject.readLock=lock.readLock();  cacheObject.writeLock=lock.writeLock();  if (valueDictionary != null) {    cacheObject.valueDictionary=(DataTagValueDictionary)valueDictionary.clone();  }  if (dataTagQuality != null) {    cacheObject.dataTagQuality=(DataTagQuality)dataTagQuality.clone();  }  cacheObject.alarmIds=(ArrayList<Long>)((ArrayList<Long>)alarmIds).clone();  cacheObject.ruleIds=(ArrayList<Long>)((ArrayList<Long>)ruleIds).clone();  if (cacheTimestamp != null) {    cacheObject.cacheTimestamp=(Timestamp)cacheTimestamp.clone();  }  return cacheObject;}  }
class C{  @Override public void createMenus(JMenu mnTools){}  }
class C{  public CascadedTable(Table parent){  this(parent,null,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_JOIN_ERROR_MIN_LEVEL(String value0){  return new SM_SYSTEM_MESSAGE(1400438,value0);}  }
class C{  public boolean profiling(){  return soot.PhaseOptions.getBoolean(options,"profiling");}  }
class C{  @Override public void parse(XMLInputSource inputSource) throws XNIException, IOException {}  }
class C{  public AudioFormat(float sampleRate,int sampleSizeInBits,int channels,boolean signed,boolean bigEndian){  this((signed == true ? Encoding.PCM_SIGNED : Encoding.PCM_UNSIGNED),sampleRate,sampleSizeInBits,channels,(channels == AudioSystem.NOT_SPECIFIED || sampleSizeInBits == AudioSystem.NOT_SPECIFIED) ? AudioSystem.NOT_SPECIFIED : ((sampleSizeInBits + 7) / 8) * channels,sampleRate,bigEndian);}  }
class C{  @Override public boolean isNonSingular(){  double largestEigenvalueNorm=0.0;  for (int i=0; i < realEigenvalues.length; ++i) {    largestEigenvalueNorm=FastMath.max(largestEigenvalueNorm,eigenvalueNorm(i));  }  if (largestEigenvalueNorm == 0.0) {    return false;  }  for (int i=0; i < realEigenvalues.length; ++i) {    if (Precision.equals(eigenvalueNorm(i) / largestEigenvalueNorm,0,EPSILON)) {      return false;    }  }  return true;}  }
class C{  public Editor edit() throws IOException {  return DiskLruCache.this.edit(key,sequenceNumber);}  }
class C{  public void register(K key,Predicate<V> value){  getOrCreate(key).add(value);}  }
class C{  public void initGui(){  this.buttonList.clear();  this.buttonList.add(new GuiSmallButtonEx(VRSettings.VrOptions.HUD_HIDE.returnEnumOrdinal(),this.width / 2 - 78,this.height / 6 - 14,VRSettings.VrOptions.HUD_HIDE,this.guivrSettings.getKeyBinding(VRSettings.VrOptions.HUD_HIDE)));  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,"Reset To Defaults"));  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,"Done"));  VRSettings.VrOptions[] buttons=hudOptions;  for (int var12=2; var12 < buttons.length + 2; ++var12) {    VRSettings.VrOptions var8=buttons[var12 - 2];    int width=this.width / 2 - 155 + var12 % 2 * 160;    int height=this.height / 6 + 21 * (var12 / 2) - 10;    if (var8 == VRSettings.VrOptions.DUMMY)     continue;    if (var8.getEnumFloat()) {      float minValue=0.0f;      float maxValue=1.0f;      float increment=0.01f;      if (var8 == VRSettings.VrOptions.HUD_SCALE) {        minValue=0.35f;        maxValue=2.5f;        increment=0.01f;      } else       if (var8 == VRSettings.VrOptions.HUD_DISTANCE) {        minValue=0.25f;        maxValue=5.0f;        increment=0.01f;      } else       if (var8 == VRSettings.VrOptions.HUD_PITCH) {        minValue=-45f;        maxValue=45f;        increment=1f;      } else       if (var8 == VRSettings.VrOptions.HUD_YAW) {        minValue=-100f;        maxValue=100f;        increment=1f;      } else       if (var8 == VRSettings.VrOptions.HUD_OPACITY) {        minValue=0.15f;        maxValue=1.0f;        increment=0.05f;      }      this.buttonList.add(new GuiSliderEx(var8.returnEnumOrdinal(),width,height,var8,this.guivrSettings.getKeyBinding(var8),minValue,maxValue,increment,this.guivrSettings.getOptionFloatValue(var8)));    } else {      this.buttonList.add(new GuiSmallButtonEx(var8.returnEnumOrdinal(),width,height,var8,this.guivrSettings.getKeyBinding(var8)));    }  }}  }
class C{  public void add(ClosingAwareWebDriver driver){  drivers.add(driver);}  }
class C{  @Override public void close() throws IOException {  iterator.close();}  }
class C{  public AWSIotDevice(String thingName){  super(thingName);}  }
class C{  public void inc(){  count.add(1);}  }
class C{  public boolean equals(Object obj){  return ReferentUuids.compare(this,obj);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (undoRedoObject.getNewValue() instanceof String) {      String newValue=(String)undoRedoObject.getNewValue();      populateField(newValue);    }  }}  }
class C{  @Override public double[] makeCumulativeTestPoints(){  return new double[]{-2.226325228634938,-1.156887023657177,-0.643949578356075,-0.2027950777320613,0.305827808237559,6.42632522863494,5.35688702365718,4.843949578356074,4.40279507773206,3.89417219176244};}  }
class C{  private double smartAdd(double a,double b){  final double _a=FastMath.abs(a);  final double _b=FastMath.abs(b);  if (_a > _b) {    final double eps=_a * Precision.EPSILON;    if (_b > eps) {      return a + b;    }    return a;  } else {    final double eps=_b * Precision.EPSILON;    if (_a > eps) {      return a + b;    }    return b;  }}  }
class C{  @SuppressWarnings("unchecked") private void writeNSDecls() throws SAXException {  Enumeration<String> prefixes=(Enumeration<String>)nsSupport.getDeclaredPrefixes();  while (prefixes.hasMoreElements()) {    String prefix=prefixes.nextElement();    String uri=nsSupport.getURI(prefix);    if (uri == null) {      uri="";    }    write(' ');    if ("".equals(prefix)) {      write("xmlns=\"");    } else {      write("xmlns:");      write(prefix);      write("=\"");    }    writeEscUTF16(uri,0,uri.length(),true);    write('\"');  }}  }
class C{  public void drawChartTransposed(Graphics2D gc){  colorByClasses=false;  colorBySeries=true;  doDraw(gc);}  }
class C{  private static void interactiveMode(FreeTTSTime freetts){  try {    while (true) {      String time;      BufferedReader reader;      reader=new BufferedReader(new InputStreamReader(System.in));      System.out.print("Enter time: ");      System.out.flush();      time=reader.readLine();      if ((time == null) || (time.length() == 0) || time.equals("quit")) {        freetts.shutdown();        System.exit(0);      } else {        freetts.getVoice().startBatch();        freetts.safeTimeToSpeech(time);        freetts.getVoice().endBatch();      }    }  } catch (  IOException e) {  }}  }
class C{  protected void addContentSpecToElement(XMLElementDecl elementDecl){  if ((fDepth == 0 || (fDepth == 1 && elementDecl.type == XMLElementDecl.TYPE_MIXED)) && fNodeIndexStack != null) {    if (elementDecl.type == XMLElementDecl.TYPE_MIXED) {      int pcdata=addUniqueLeafNode(null);      if (fNodeIndexStack[0] == -1) {        fNodeIndexStack[0]=pcdata;      } else {        fNodeIndexStack[0]=addContentSpecNode(XMLContentSpec.CONTENTSPECNODE_CHOICE,pcdata,fNodeIndexStack[0]);      }    }    setContentSpecIndex(fCurrentElementIndex,fNodeIndexStack[fDepth]);  }}  }
class C{  private static MetricValue opt_duration_to_metricvalue_(Optional<Duration> duration){  return duration.map(null).orElse(MetricValue.EMPTY);}  }
class C{  public ColumnReverseDictionaryInfo(){  boolean useXXHash=Boolean.valueOf(CarbonProperties.getInstance().getProperty(CarbonCommonConstants.ENABLE_XXHASH,CarbonCommonConstants.ENABLE_XXHASH_DEFAULT));  if (useXXHash) {    xxHash32=XXHashFactory.fastestInstance().hash32();  }}  }
class C{  public MonsterAilmentCursor queryAilmentsFromMonster(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_AILMENT;  qh.Columns=null;  qh.Selection=S.COLUMN_AILMENT_MONSTER_ID + " = " + id;  qh.SelectionArgs=null;  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy=null;  qh.Limit=null;  return new MonsterAilmentCursor(wrapHelper(qh));}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  public static String makeWebServiceCall(String url,int requestmethod){  return makeWebServiceCall(url,requestmethod,null,false);}  }
class C{  @Ignore @Test public void testGetDockerClient(){  List<Container> shinyContainers=dockerService.getShinyContainers();  Assert.assertEquals(1,shinyContainers.size());}  }
class C{  public void finish(){  if (mAccountAuthenticatorResponse != null) {    if (mResultBundle != null) {      mAccountAuthenticatorResponse.onResult(mResultBundle);    } else {      mAccountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    mAccountAuthenticatorResponse=null;  }  super.finish();}  }
class C{  @Override public String toString(){  return toString(size(),false);}  }
class C{  public DynamicTemplateParameterContext addParameter(DynamicContextParameters param,String paramValue,ContextInfo contextInfo){  return addParameter(param,paramValue,false,contextInfo);}  }
class C{  public static boolean isLeaf(Object userObject){  boolean leaf=(userObject instanceof TextSymbolizer) || (userObject instanceof RasterSymbolizer) || showCheckbox(userObject);  return leaf;}  }
class C{  public Iterator<SootMethod> methodIterator(){  checkLevel(SIGNATURES);  return methodList.iterator();}  }
class C{  public Configuration(Sentence sentence,Stack<Integer> stack,Queue<Integer> queue){  this.sentence=sentence;  this.stack=stack;  this.queue=queue;  this.arcs=new ArrayList<Dependency>();}  }
class C{  private void displayResult(){  String result=Localisation.getString(ExpressionPanelv2.class,"FilterPanelv2.invalidResult");  if (rootNode instanceof FilterNode) {    overallFilter=addFilter((FilterNode)rootNode);    try {      result=CQL.toCQL(overallFilter);    } catch (    Exception e) {    }  }  textArea.setText(result);}  }
class C{  private Collection<Map<String,Object>> batchParse(String[] header,Collection<String[]> batch){  return batch.stream().map(null).collect(toList());}  }
class C{  public boolean hasThrowable(){  return observers.get() == TERMINATED && error != null;}  }
class C{  private void expandGroup(ExpandableListPosition listPosition){  expandableList.expandedGroupIndexes.put(listPosition.groupPos,true);  if (listener != null) {    listener.onGroupExpanded(expandableList.getFlattenedGroupIndex(listPosition) + 1,expandableList.groups.get(listPosition.groupPos).getItemCount());  }}  }
class C{  public void add(IResource[] resources,IProgressMonitor monitor) throws TeamException {  if (monitor == null) {    monitor=new NullProgressMonitor();  }  Map table=getProviderMapping(resources);  if (table.get(null) != null) {    throw new SVNException(Policy.bind("RepositoryManager.addErrorNotAssociated"));  }  Set keySet=table.keySet();  monitor.beginTask("",keySet.size() * 1000);  monitor.setTaskName(Policy.bind("RepositoryManager.adding"));  Iterator iterator=keySet.iterator();  while (iterator.hasNext()) {    IProgressMonitor subMonitor=new SubProgressMonitor(monitor,1000);    SVNTeamProvider provider=(SVNTeamProvider)iterator.next();    List list=(List)table.get(provider);    IResource[] providerResources=(IResource[])list.toArray(new IResource[list.size()]);    provider.add(providerResources,IResource.DEPTH_ZERO,subMonitor);  }}  }
class C{  public static void removeEmptys(List<String> list){  if (list != null && !list.isEmpty()) {    Iterator<String> iterator=list.iterator();    while (iterator.hasNext()) {      if (StringUtils.isEmpty(iterator.next())) {        iterator.remove();      }    }  }}  }
class C{  public static boolean isDirty(final ISVNLocalResource svnResource,LocalResourceStatus status){  try {    if (!svnResource.exists())     return false;    if (svnResource.getIResource().getType() == IResource.FILE) {      return ((status.isTextModified() || status.isPropModified() || status.isReplaced()|| status.isAdded()) && !status.isIgnored() && !svnResource.isIgnored());    } else {      return svnResource.isDirty();    }  } catch (  SVNException e) {    if (!e.operationInterrupted()) {      SVNUIPlugin.log(e.getStatus());    }    return true;  }}  }
class C{  public static DalvikMethodStruct of(Method method){  return new DalvikMethodStruct(method);}  }
class C{  public int safety(){  String s=soot.PhaseOptions.getString(options,"safety");  if (s.equalsIgnoreCase("safe"))   return safety_safe;  if (s.equalsIgnoreCase("medium"))   return safety_medium;  if (s.equalsIgnoreCase("unsafe"))   return safety_unsafe;  throw new RuntimeException("Invalid value " + s + " of phase option safety");}  }
class C{  @deprecated public UScriptRun(){  char[] nullChars=null;  reset(nullChars,0,0);}  }
class C{  private void readDexFile(Map<String,File> index,File dex){  try {    for (    String className : classesOfDex(dex)) {      index.put(className,dex);    }  } catch (  IOException e) {    G.v().out.println("Warning: IO error while processing dex file '" + dex + "'");    G.v().out.println("Exception: " + e);  }catch (  Exception e) {    G.v().out.println("Warning: exception while processing dex file '" + dex + "'");    G.v().out.println("Exception: " + e);  }}  }
class C{  private void checkSampleData(final double[] data) throws MathIllegalArgumentException, NullArgumentException {  MathUtils.checkNotNull(data,LocalizedCoreFormats.INPUT_ARRAY);  if (data.length < 2) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.INSUFFICIENT_DATA_FOR_T_STATISTIC,data.length,2,true);  }}  }
class C{  @Override public void write(int b){  ensureCapacity(1);  _buffer[_count++]=(byte)b;}  }
class C{  public CommandDirectories(String sourceDirectoryPathString){  this(sourceDirectoryPathString,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CAPTCHA_REMAIN_RESTRICT_TIME(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400273,durationtime0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FACTION_JOIN(String value0){  return new SM_SYSTEM_MESSAGE(1300524,value0);}  }
class C{  public DataSourceProperties(DataSourceConnectorInterface dsc){  this.dsc=dsc;}  }
class C{  public static void main(String[] args){  OkHttpClient http=new OkHttpClient();  CredentialProvider auth=null;  PokemonGo go=new PokemonGo(http);  try {    auth=new PtcCredentialProvider(http,ExampleLoginDetails.LOGIN,ExampleLoginDetails.PASSWORD);    go.login(auth);    go.setLocation(-32.011011,115.932831,0);    List<Pokemon> pokemons=go.getInventories().getPokebank().getPokemons();    Pokemon[] attackers=new Pokemon[6];    for (int i=0; i < 6; i++) {      attackers[i]=pokemons.get(i);    }    for (    Gym gym : go.getMap().getGyms()) {      if (gym.isAttackable()) {        Battle battle=gym.battle(attackers);        Result result=battle.start();        if (result == Result.SUCCESS) {          while (!battle.isConcluded()) {            System.out.println("attack:" + battle.attack(5));            Thread.sleep(500);          }          System.out.println("Battle result:" + battle.getOutcome());        } else {          System.out.println("FAILED:" + result);        }      }    }  } catch (  LoginFailedException|RemoteServerException|InterruptedException e) {    Log.e("Main","Failed to login or server issue: ",e);  }}  }
class C{  public PolyType(Class baseClass,String defaultClassName,PolyEntry... entries){  this.baseClass=baseClass;  this.defaultClassName=defaultClassName;  for (  PolyEntry e : entries) {    if (types.containsKey(e.name)) {      throw new IllegalArgumentException("name \"" + e.name + "\" appears more than once");    }    types.put(e.name,e);  }}  }
class C{  public VideoReportCommentQuery reason(ReportReason value){  return unsafeParam("reason",value);}  }
class C{  public static int isValidGradlePath(@NotNull String gradlePath){  return ILLEGAL_GRADLE_PATH_CHARS_MATCHER.indexIn(gradlePath);}  }
class C{  public void disconnectFromBroker(final MqttAsyncConnection connection){  try {    connection.disconnect(new MqttDisconnectionResultHandler());  } catch (  SpyException e) {    Platform.runLater(new MqttEventHandler(new MqttDisconnectionAttemptFailureEvent(connection,e)));    logger.error(e.getMessage(),e);  }}  }
class C{  @Override public boolean hasChildNodes(){  if (needsSyncChildren()) {    synchronizeChildren();  }  return firstChild != null;}  }
class C{  public void enablePanel(boolean enabled){  for (int index=0; index < this.getComponentCount(); index++) {    Component c=this.getComponent(index);    c.setEnabled(enabled);  }}  }
class C{  public void drawChartTransposed(Graphics2D gc){  SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  final int y0=getHeight() - bottomMargin;  final int y1=topMargin;  final String[] series=getChartData().getSeriesNames().toArray(new String[getChartData().getNumberOfSeries()]);  final double topY;  final double[] percentFactor;  if (scalingType == ChartViewer.ScalingType.PERCENT) {    percentFactor=computePercentFactorPerSampleForTransposedChart((DefaultChartData)getChartData(),series);    topY=computeMaxClassValueUsingPercentFactorPerSeries((DefaultChartData)getChartData(),series,percentFactor);  } else   if (scalingType == ChartViewer.ScalingType.LOG) {    topY=computeMaxYAxisValueLogScale(getMaxValue());    percentFactor=null;  } else   if (scalingType == ChartViewer.ScalingType.SQRT) {    topY=Math.sqrt(getMaxValue());    percentFactor=null;  } else {    topY=1.1 * getMaxValue();    percentFactor=null;  }  final double yFactor=(y0 - y1) / topY;  final int x0=leftMargin;  final int x1=getWidth() - rightMargin;  if (x0 >= x1)   return;  final int numberOfClasses=getChartData().getNumberOfClasses();  double xStep=(x1 - x0) / (2 * numberOfClasses);  final double bigSpace=Math.max(2,Math.min(10,xStep));  xStep=(x1 - x0 - bigSpace * numberOfClasses) / numberOfClasses;  Point[] previousPoint=new Point[getChartData().getNumberOfSeries()];  int c=0;  for (  String className : getChartData().getClassNames()) {    if (showXAxis) {      final double xLabel=x0 + bigSpace + c * bigSpace + (c + 0.5) * xStep;      Point2D apt=new Point2D.Double(xLabel,getHeight() - bottomMargin + 10);      final Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      if (classLabelAngle == 0) {        apt.setLocation(apt.getX() - labelSize.getWidth() / 2,apt.getY());      } else       if (classLabelAngle > Math.PI / 2) {        apt=Geometry.translateByAngle(apt,classLabelAngle,-labelSize.width);      }      if (getChartData().getChartSelection().isSelected(null,className)) {        gc.setColor(ProgramProperties.SELECTION_COLOR);        fillAndDrawRect(gc,apt.getX(),apt.getY(),labelSize.width,labelSize.height,classLabelAngle,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);      }      gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.DARK_GRAY));      if (sgc != null)       sgc.setCurrentItem(new String[]{null,className});      drawString(gc,className,apt.getX(),apt.getY(),classLabelAngle);      if (sgc != null)       sgc.clearCurrentItem();    }    int d=0;    for (int i=0; i < series.length; i++) {      final String seriesName=series[i];      double value=getChartData().getValueAsDouble(seriesName,className);switch (scalingType) {case PERCENT:{          value*=percentFactor[i];          break;        }case LOG:{        if (value == 1)         value=Math.log10(2) / 2; else         if (value > 0)         value=Math.log10(value);        break;      }case SQRT:{      if (value > 0)       value=Math.sqrt(value);      break;    }}final double xBar=x0 + bigSpace + c * bigSpace + c * xStep;final double height=value * yFactor;final Point aPt=new Point((int)Math.round(xBar + xStep / 2.0),(int)Math.round(y0 - height));boolean isSelected=getChartData().getChartSelection().isSelected(seriesName,null);final Color color=getChartColors().getSampleColor(seriesName);if (isSelected) {  gc.setColor(ProgramProperties.SELECTION_COLOR);  gc.setStroke(HEAVY_STROKE);} else gc.setColor(color);Point bPt=previousPoint[d];if (bPt != null) {  if (sgc != null)   sgc.setCurrentItem(new String[]{seriesName,className});  gc.drawLine(bPt.x,bPt.y,aPt.x,aPt.y);  if (sgc != null)   sgc.clearCurrentItem();}previousPoint[d]=aPt;if (!isSelected) {  isSelected=getChartData().getChartSelection().isSelected(seriesName,className);  if (isSelected) {    gc.setColor(ProgramProperties.SELECTION_COLOR);    gc.setStroke(HEAVY_STROKE);  }}if (!isSelected) {  gc.setColor(color.darker());  if (sgc != null)   sgc.setCurrentItem(new String[]{seriesName,className});  gc.drawOval(aPt.x - 1,aPt.y - 1,2,2);  if (sgc != null)   sgc.clearCurrentItem();} else {  gc.drawOval(aPt.x - 2,aPt.y - 2,4,4);  gc.setStroke(NORMAL_STROKE);}d++;if (showValues || isSelected) {  String label="" + (int)getChartData().getValueAsDouble(seriesName,className);  valuesList.add(new DrawableValue(label,aPt.x,aPt.y - 3,isSelected));}}c++;}if (valuesList.size() > 0) {gc.setFont(getFont(ChartViewer.FontKeys.ValuesFont.toString()));DrawableValue.drawValues(gc,valuesList,true,false);valuesList.clear();}}  }
class C{  AbstractMap.SimpleImmutableEntry<K,V> createSnapshot(){  V v=getValidValue();  if (v == null)   return null;  return new AbstractMap.SimpleImmutableEntry<K,V>(key,v);}  }
class C{  private static List<Class<?>> findClasses(File directory,String packageName,String classPrefix,String classSuffix,Class<? extends Annotation> methodAnnotation) throws ClassNotFoundException {  List<Class<?>> classes=new ArrayList<Class<?>>();  if (!directory.exists()) {    return classes;  }  File[] files=directory.listFiles();  for (  File file : files) {    if (file.isDirectory()) {      classes.addAll(findClasses(file,packageName + "." + file.getName(),classPrefix,classSuffix,methodAnnotation));    } else     if (file.getName().startsWith(classPrefix) && file.getName().endsWith(classSuffix + ".class")) {      Class<?> clazz=Class.forName(packageName + '.' + file.getName().substring(0,file.getName().length() - 6));      boolean classHasTest=false;      for (      Method method : clazz.getMethods()) {        if (method.getAnnotation(methodAnnotation) != null) {          classHasTest=true;          break;        }      }      if (classHasTest) {        classes.add(clazz);      }    }  }  return classes;}  }
class C{  public Pair<K,V> argMax(){  double maxCount=Double.NEGATIVE_INFINITY;  Pair<K,V> maxKey=null;  for (  Map.Entry<K,Counter<V>> entry : counterMap.entrySet()) {    Counter<V> counter=entry.getValue();    V localMax=counter.argMax();    if (counter.getCount(localMax) > maxCount || maxKey == null) {      maxKey=new Pair<>(entry.getKey(),localMax);      maxCount=counter.getCount(localMax);    }  }  return maxKey;}  }
class C{  public static Bitmap createIconBitmap(Bitmap icon,Context context){  int textureWidth=sIconTextureWidth;  int textureHeight=sIconTextureHeight;  int sourceWidth=icon.getWidth();  int sourceHeight=icon.getHeight();  if (sourceWidth > textureWidth && sourceHeight > textureHeight) {    return Bitmap.createBitmap(icon,(sourceWidth - textureWidth) / 2,(sourceHeight - textureHeight) / 2,textureWidth,textureHeight);  } else   if (sourceWidth == textureWidth && sourceHeight == textureHeight) {    return icon;  } else {    final Resources resources=context.getResources();    return createIconBitmap(new BitmapDrawable(resources,icon),context);  }}  }
class C{  public boolean isApplicable(){  return getViewer().isPCoATab() && getViewer().getDir().getDocument().getSampleAttributeTable().getNumericalAttributes(null).size() > 0;}  }
class C{  protected static Dfp cosInternal(Dfp a[]){  final Dfp one=a[0].getOne();  Dfp x=one;  Dfp y=one;  Dfp c=a[0].add(a[1]);  c=c.multiply(c);  Dfp fact=one;  Dfp py=new Dfp(y);  for (int i=2; i < 90; i+=2) {    x=x.multiply(c);    x=x.negate();    fact=fact.divide((i - 1) * i);    y=y.add(x.multiply(fact));    if (y.equals(py)) {      break;    }    py=new Dfp(y);  }  return y;}  }
class C{  public Matrix arrayRightDivideEquals(Matrix B){  checkMatrixDimensions(B);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      A[i][j]=A[i][j] / B.A[i][j];    }  }  return this;}  }
class C{  public Builder rangeColumns(String... columns){  return add(ReduceOp.Range,columns);}  }
class C{  @Override public void ignorableWhitespace(char[] ch,int start,int length) throws SAXException {  writeText4Links();  writeEscUTF16(new String(ch),start,length,false);  super.ignorableWhitespace(ch,start,length);}  }
class C{  @Override public Source resolve(String href,String base) throws TransformerException {  String uri=href;  String fragment=null;  int hashPos=href.indexOf("#");  if (hashPos >= 0) {    uri=href.substring(0,hashPos);    fragment=href.substring(hashPos + 1);  }  String result=null;  try {    result=catalog.resolveURI(href);  } catch (  Exception e) {  }  if (result == null) {    try {      URL url=null;      if (base == null) {        url=new URL(uri);        result=url.toString();      } else {        URL baseURL=new URL(base);        url=(href.length() == 0 ? baseURL : new URL(baseURL,uri));        result=url.toString();      }    } catch (    java.net.MalformedURLException mue) {      String absBase=makeAbsolute(base);      if (!absBase.equals(base)) {        return resolve(href,absBase);      } else {        throw new TransformerException("Malformed URL " + href + "(base "+ base+ ")",mue);      }    }  }  catalogManager.debug.message(2,"Resolved URI",href,result);  SAXSource source=new SAXSource();  source.setInputSource(new InputSource(result));  setEntityResolver(source);  return source;}  }
class C{  public JSONObject(String baseName,Locale locale) throws JSONException {  this();  ResourceBundle bundle=ResourceBundle.getBundle(baseName,locale,Thread.currentThread().getContextClassLoader());  Enumeration<String> keys=bundle.getKeys();  while (keys.hasMoreElements()) {    Object key=keys.nextElement();    if (key != null) {      String[] path=((String)key).split("\\.");      int last=path.length - 1;      JSONObject target=this;      for (int i=0; i < last; i+=1) {        String segment=path[i];        JSONObject nextTarget=target.optJSONObject(segment);        if (nextTarget == null) {          nextTarget=new JSONObject();          target.put(segment,nextTarget);        }        target=nextTarget;      }      target.put(path[last],bundle.getString((String)key));    }  }}  }
class C{  public DetectorResult detect() throws NotFoundException {  ResultPoint[] cornerPoints=rectangleDetector.detect();  ResultPoint pointA=cornerPoints[0];  ResultPoint pointB=cornerPoints[1];  ResultPoint pointC=cornerPoints[2];  ResultPoint pointD=cornerPoints[3];  List<ResultPointsAndTransitions> transitions=new ArrayList<>(4);  transitions.add(transitionsBetween(pointA,pointB));  transitions.add(transitionsBetween(pointA,pointC));  transitions.add(transitionsBetween(pointB,pointD));  transitions.add(transitionsBetween(pointC,pointD));  Collections.sort(transitions,new ResultPointsAndTransitionsComparator());  ResultPointsAndTransitions lSideOne=transitions.get(0);  ResultPointsAndTransitions lSideTwo=transitions.get(1);  Map<ResultPoint,Integer> pointCount=new HashMap<>();  increment(pointCount,lSideOne.getFrom());  increment(pointCount,lSideOne.getTo());  increment(pointCount,lSideTwo.getFrom());  increment(pointCount,lSideTwo.getTo());  ResultPoint maybeTopLeft=null;  ResultPoint bottomLeft=null;  ResultPoint maybeBottomRight=null;  for (  Map.Entry<ResultPoint,Integer> entry : pointCount.entrySet()) {    ResultPoint point=entry.getKey();    Integer value=entry.getValue();    if (value == 2) {      bottomLeft=point;    } else {      if (maybeTopLeft == null) {        maybeTopLeft=point;      } else {        maybeBottomRight=point;      }    }  }  if (maybeTopLeft == null || bottomLeft == null || maybeBottomRight == null) {    throw NotFoundException.getNotFoundInstance();  }  ResultPoint[] corners={maybeTopLeft,bottomLeft,maybeBottomRight};  ResultPoint.orderBestPatterns(corners);  ResultPoint bottomRight=corners[0];  bottomLeft=corners[1];  ResultPoint topLeft=corners[2];  ResultPoint topRight;  if (!pointCount.containsKey(pointA)) {    topRight=pointA;  } else   if (!pointCount.containsKey(pointB)) {    topRight=pointB;  } else   if (!pointCount.containsKey(pointC)) {    topRight=pointC;  } else {    topRight=pointD;  }  int dimensionTop=transitionsBetween(topLeft,topRight).getTransitions();  int dimensionRight=transitionsBetween(bottomRight,topRight).getTransitions();  if ((dimensionTop & 0x01) == 1) {    dimensionTop++;  }  dimensionTop+=2;  if ((dimensionRight & 0x01) == 1) {    dimensionRight++;  }  dimensionRight+=2;  BitMatrix bits;  ResultPoint correctedTopRight;  if (4 * dimensionTop >= 7 * dimensionRight || 4 * dimensionRight >= 7 * dimensionTop) {    correctedTopRight=correctTopRightRectangular(bottomLeft,bottomRight,topLeft,topRight,dimensionTop,dimensionRight);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    dimensionTop=transitionsBetween(topLeft,correctedTopRight).getTransitions();    dimensionRight=transitionsBetween(bottomRight,correctedTopRight).getTransitions();    if ((dimensionTop & 0x01) == 1) {      dimensionTop++;    }    if ((dimensionRight & 0x01) == 1) {      dimensionRight++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionTop,dimensionRight);  } else {    int dimension=Math.min(dimensionRight,dimensionTop);    correctedTopRight=correctTopRight(bottomLeft,bottomRight,topLeft,topRight,dimension);    if (correctedTopRight == null) {      correctedTopRight=topRight;    }    int dimensionCorrected=Math.max(transitionsBetween(topLeft,correctedTopRight).getTransitions(),transitionsBetween(bottomRight,correctedTopRight).getTransitions());    dimensionCorrected++;    if ((dimensionCorrected & 0x01) == 1) {      dimensionCorrected++;    }    bits=sampleGrid(image,topLeft,bottomLeft,bottomRight,correctedTopRight,dimensionCorrected,dimensionCorrected);  }  return new DetectorResult(bits,new ResultPoint[]{topLeft,bottomLeft,bottomRight,correctedTopRight});}  }
class C{  public static byte[] showNewEquip(Equip equip,long price,long oldPrice,int sucChance,int boomChance,boolean canDropStar,boolean chanceTime){  PacketWriter pw=new PacketWriter();  pw.writeShort(SendPacketOpcode.ITEM_UPGRADE_UI.getValue());  pw.write(EnhanceTypes.SHOW_STAR_FORCE.getValue());  pw.write(canDropStar);  pw.writeLong(price);  pw.writeLong(oldPrice);  pw.writeInt(sucChance);  pw.writeInt(boomChance);  pw.write(chanceTime);  Map<EnhanceStat,Short> addStats=equip.getEnhanceStats();  int mask=0;  for (  EnhanceStat key : addStats.keySet()) {    mask|=key.getValue();  }  pw.writeInt(mask);  if (addStats.containsKey(EnhanceStat.WATK)) {    pw.writeInt(addStats.get(EnhanceStat.WATK));  }  if (addStats.containsKey(EnhanceStat.MATK)) {    pw.writeInt(addStats.get(EnhanceStat.MATK));  }  if (addStats.containsKey(EnhanceStat.STR)) {    pw.writeInt(addStats.get(EnhanceStat.STR));  }  if (addStats.containsKey(EnhanceStat.DEX)) {    pw.writeInt(addStats.get(EnhanceStat.DEX));  }  if (addStats.containsKey(EnhanceStat.INT)) {    pw.writeInt(addStats.get(EnhanceStat.INT));  }  if (addStats.containsKey(EnhanceStat.LUK)) {    pw.writeInt(addStats.get(EnhanceStat.LUK));  }  if (addStats.containsKey(EnhanceStat.WDEF)) {    pw.writeInt(addStats.get(EnhanceStat.WDEF));  }  if (addStats.containsKey(EnhanceStat.MDEF)) {    pw.writeInt(addStats.get(EnhanceStat.MDEF));  }  if (addStats.containsKey(EnhanceStat.MHP)) {    pw.writeInt(addStats.get(EnhanceStat.MHP));  }  if (addStats.containsKey(EnhanceStat.MMP)) {    pw.writeInt(addStats.get(EnhanceStat.MMP));  }  if (addStats.containsKey(EnhanceStat.ACC)) {    pw.writeInt(addStats.get(EnhanceStat.ACC));  }  if (addStats.containsKey(EnhanceStat.AVOID)) {    pw.writeInt(addStats.get(EnhanceStat.AVOID));  }  if (addStats.containsKey(EnhanceStat.JUMP)) {    pw.writeInt(addStats.get(EnhanceStat.JUMP));  }  if (addStats.containsKey(EnhanceStat.SPEED)) {    pw.writeInt(addStats.get(EnhanceStat.SPEED));  }  return pw.getPacket();}  }
class C{  public static long dateToMilliseconds(Date date){  return date.getTime();}  }
class C{  public void clearDiskCache(){  checkConfiguration();  configuration.diskCache.clear();}  }
class C{  private void unravelCalculationStack(Stack<CalculationToken> calculationStack,OperationToken endOperationToken){  OperationToken operationToken;  Double doubleTokenNumber;  Double calculation=readNextNumber(calculationStack);  while (!calculationStack.isEmpty()) {    operationToken=(OperationToken)calculationStack.pop();    if (operationToken.getPriority() == OperationToken.BRACKET_PRIORITY) {      break;    }    if (operationToken.getPriority() == endOperationToken.getPriority()) {      calculationStack.push(operationToken);      break;    }    doubleTokenNumber=readNextNumber(calculationStack);    calculation=completeOperation(calculation,doubleTokenNumber,operationToken.getOperation());  }  calculationStack.push(new DoubleToken(calculation));  if (cIsArithmetic(endOperationToken.getOperation())) {    calculationStack.push(endOperationToken);  }}  }
class C{  @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH) @Override public void onBaseContextAttached(Context base){  super.onBaseContextAttached(base);  MultiDex.install(base);  SampleApplicationContext.application=getApplication();  SampleApplicationContext.context=getApplication();  TinkerManager.setTinkerApplicationLike(this);  TinkerManager.initFastCrashProtect();  TinkerManager.setUpgradeRetryEnable(true);  TinkerInstaller.setLogIml(new MyLogImp());  TinkerManager.installTinker(this);}  }
class C{  public AdsGetAdsLayoutQuery limit(Integer value){  return unsafeParam("limit",value);}  }
class C{  @Override public boolean heap_sensitive_intersection(IVarAbstraction qv){  int i, j;  HeapInsNode qn;  SegmentNode p, q, pt[], qt[];  qn=(HeapInsNode)qv;  for (Iterator<AllocNode> it=pt_objs.keySet().iterator(); it.hasNext(); ) {    AllocNode an=it.next();    if (an instanceof ClassConstantNode)     continue;    if (an instanceof StringConstantNode)     continue;    qt=qn.find_points_to(an);    if (qt == null)     continue;    pt=find_points_to(an);    for (i=0; i < HeapInsIntervalManager.Divisions; ++i) {      p=pt[i];      while (p != null) {        for (j=0; j < HeapInsIntervalManager.Divisions; ++j) {          q=qt[j];          while (q != null) {            if (quick_intersecting_test(p,q))             return true;            q=q.next;          }        }        p=p.next;      }    }  }  return false;}  }
class C{  public SimpleValueChecker(final double relativeThreshold,final double absoluteThreshold,final int maxIter){  super(relativeThreshold,absoluteThreshold);  if (maxIter <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,maxIter,0);  }  maxIterationCount=maxIter;}  }
class C{  @Override public boolean isEndOfStreamMarked() throws IOException {  checkClosedOrInError("isEndOfStreamMarked");  long lastTxId=FutureUtils.result(getLastLogRecordAsyncInternal(false,true)).getTransactionId();  return lastTxId == DistributedLogConstants.MAX_TXID;}  }
class C{  public synchronized void panTo(Point2D p){  m_itransform.transform(p,m_tmpPoint);  panToAbs(m_tmpPoint);}  }
class C{  public boolean equals(Object object){  return object == null || object == this;}  }
class C{  public static int findGlobalPeakLocation(double[] data){  double max=Double.NaN;  int imax=-1;  for (int i=0; i < data.length; i++) {    if (Double.isNaN(data[i]))     continue;    if (Double.isNaN(max) || data[i] > max) {      max=data[i];      imax=i;    }  }  return imax;}  }
class C{  public EnvVarPanel(ExpressionFilterInterface parent){  this.parent=parent;  createUI();}  }
class C{  private JMapPane createMapPane(){  JMapPane internal_mapPane=new JMapPane();  internal_mapPane.setBackground(PrefManager.getInstance().getPrefData().getBackgroundColour());  internal_mapPane.setBorder(BorderFactory.createLineBorder(Color.BLACK));  return internal_mapPane;}  }
class C{  public static CertChainKeyPair generateSigned(String fqdn,X509Certificate issuerCertificate,PrivateKey issuerPrivateKey){  try {    return generateCertificateAndSign(fqdn,issuerCertificate,issuerPrivateKey,getServerExtensions(issuerCertificate));  } catch (  CertificateException|OperatorCreationException|NoSuchAlgorithmException|IOException e) {    throw new RuntimeException(String.format("Failed to generate server certificate, reason: %s",e.getMessage()),e);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200402,num0,skillname);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_download_mange);}  }
class C{  private static void registerNumberFormat(List<ClassLoader> classLoadersList,ConversionData data){  logger.info("Number formats supported:");  Reflections reflections=new Reflections(new ConfigurationBuilder().setScanners(new SubTypesScanner(false),new ResourcesScanner()).setUrls(ClasspathHelper.forClassLoader(classLoadersList.toArray(new ClassLoader[0]))).filterInputsBy(new FilterBuilder().include(FilterBuilder.prefix("com.sldeditor.importdata.esri.numberformat"))));  Set<Class<? extends Object>> allClasses=reflections.getSubTypesOf(Object.class);  for (  Class<? extends Object> claszz : allClasses) {    try {      if (validClass(claszz,EsriNumberFormatInterface.class)) {        EsriNumberFormatInterface numberFormatObj=(EsriNumberFormatInterface)claszz.newInstance();        logger.info(numberFormatObj.getNumberFormatClass().getName());        data.addNumberFormat(numberFormatObj);      }    } catch (    InstantiationException e) {      e.printStackTrace();    }catch (    IllegalAccessException e) {      e.printStackTrace();    }  }}  }
class C{  public long count(){  MindmapsComputer computer=Mindmaps.factory(Mindmaps.DEFAULT_URI,keySpace).getGraphComputer();  ComputerResult result=computer.compute(new CountMapReduce(subtypes));  Map<String,Long> count=result.memory().get(MindmapsMapReduce.MAP_REDUCE_MEMORY_KEY);  return count.getOrDefault(CountMapReduce.MEMORY_KEY,0L);}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public BaseMultiItemQuickAdapter(List<T> data){  super(data);}  }
class C{  public FeatureDefinition(BufferedReader input,boolean readWeights) throws IOException {  String line=input.readLine();  if (line == null)   throw new IOException("Could not read from input");  while (line.matches("^\\s*#.*") || line.matches("\\s*")) {    line=input.readLine();  }  if (!line.trim().equals(BYTEFEATURES)) {    throw new IOException("Unexpected input: expected '" + BYTEFEATURES + "', read '"+ line+ "'");  }  List<String> byteFeatureLines=new ArrayList<String>();  while (true) {    line=input.readLine();    if (line == null)     throw new IOException("Could not read from input");    line=line.trim();    if (line.equals(SHORTFEATURES))     break;    byteFeatureLines.add(line);  }  List<String> shortFeatureLines=new ArrayList<String>();  while (true) {    line=input.readLine();    if (line == null)     throw new IOException("Could not read from input");    line=line.trim();    if (line.equals(CONTINUOUSFEATURES))     break;    shortFeatureLines.add(line);  }  List<String> continuousFeatureLines=new ArrayList<String>();  boolean readFeatureSimilarity=false;  while ((line=input.readLine()) != null) {    line=line.trim();    if (line.equals(FEATURESIMILARITY)) {      readFeatureSimilarity=true;      break;    } else     if (line.equals("")) {      break;    }    continuousFeatureLines.add(line);  }  numByteFeatures=byteFeatureLines.size();  numShortFeatures=shortFeatureLines.size();  numContinuousFeatures=continuousFeatureLines.size();  int total=numByteFeatures + numShortFeatures + numContinuousFeatures;  featureNames=new IntStringTranslator(total);  byteFeatureValues=new ByteStringTranslator[numByteFeatures];  shortFeatureValues=new ShortStringTranslator[numShortFeatures];  float sumOfWeights=0;  if (readWeights) {    featureWeights=new float[total];    floatWeightFuncts=new String[numContinuousFeatures];  }  for (int i=0; i < numByteFeatures; i++) {    line=byteFeatureLines.get(i);    String featureDef;    if (readWeights) {      int seppos=line.indexOf(WEIGHT_SEPARATOR);      if (seppos == -1)       throw new IOException("Weight separator '" + WEIGHT_SEPARATOR + "' not found in line '"+ line+ "'");      String weightDef=line.substring(0,seppos).trim();      featureDef=line.substring(seppos + 1).trim();      featureWeights[i]=Float.parseFloat(weightDef);      sumOfWeights+=featureWeights[i];      if (featureWeights[i] < 0)       throw new IOException("Negative weight found in line '" + line + "'");    } else {      featureDef=line;    }    String[] nameAndValues=featureDef.split("\\s+",2);    featureNames.set(i,nameAndValues[0]);    byteFeatureValues[i]=new ByteStringTranslator(nameAndValues[1].split("\\s+"));  }  for (int i=0; i < numShortFeatures; i++) {    line=shortFeatureLines.get(i);    String featureDef;    if (readWeights) {      int seppos=line.indexOf(WEIGHT_SEPARATOR);      if (seppos == -1)       throw new IOException("Weight separator '" + WEIGHT_SEPARATOR + "' not found in line '"+ line+ "'");      String weightDef=line.substring(0,seppos).trim();      featureDef=line.substring(seppos + 1).trim();      featureWeights[numByteFeatures + i]=Float.parseFloat(weightDef);      sumOfWeights+=featureWeights[numByteFeatures + i];      if (featureWeights[numByteFeatures + i] < 0)       throw new IOException("Negative weight found in line '" + line + "'");    } else {      featureDef=line;    }    String[] nameAndValues=featureDef.split("\\s+",2);    featureNames.set(numByteFeatures + i,nameAndValues[0]);    shortFeatureValues[i]=new ShortStringTranslator(nameAndValues[1].split("\\s+"));  }  for (int i=0; i < numContinuousFeatures; i++) {    line=continuousFeatureLines.get(i);    String featureDef;    if (readWeights) {      int seppos=line.indexOf(WEIGHT_SEPARATOR);      if (seppos == -1)       throw new IOException("Weight separator '" + WEIGHT_SEPARATOR + "' not found in line '"+ line+ "'");      String weightDef=line.substring(0,seppos).trim();      featureDef=line.substring(seppos + 1).trim();      String[] weightAndFunction=weightDef.split("\\s+",2);      featureWeights[numByteFeatures + numShortFeatures + i]=Float.parseFloat(weightAndFunction[0]);      sumOfWeights+=featureWeights[numByteFeatures + numShortFeatures + i];      if (featureWeights[numByteFeatures + numShortFeatures + i] < 0)       throw new IOException("Negative weight found in line '" + line + "'");      try {        floatWeightFuncts[i]=weightAndFunction[1];      } catch (      ArrayIndexOutOfBoundsException e) {        throw new RuntimeException("The string [" + weightDef + "] appears to be a badly formed"+ " weight plus weighting function definition.");      }    } else {      featureDef=line;    }    if (featureDef.endsWith("float")) {      String[] featureDefSplit=featureDef.split("\\s+",2);      featureNames.set(numByteFeatures + numShortFeatures + i,featureDefSplit[0]);    } else {      featureNames.set(numByteFeatures + numShortFeatures + i,featureDef);    }  }  if (readWeights) {    for (int i=0; i < total; i++) {      featureWeights[i]/=sumOfWeights;    }  }  if (readFeatureSimilarity) {    readFeatureSimilarityMatrices(input);  }}  }
class C{  public static String escape(String string){  char c;  String s=string.trim();  int length=s.length();  StringBuilder sb=new StringBuilder(length);  for (int i=0; i < length; i+=1) {    c=s.charAt(i);    if (c < ' ' || c == '+' || c == '%' || c == '=' || c == ';') {      sb.append('%');      sb.append(Character.forDigit((char)((c >>> 4) & 0x0f),16));      sb.append(Character.forDigit((char)(c & 0x0f),16));    } else {      sb.append(c);    }  }  return sb.toString();}  }
class C{  public AdsGetTargetGroupsQuery(VkApiClient client,UserActor actor,int accountId){  super(client,"ads.getTargetGroups",Utils.buildParametrizedType(List.class,TargetGroup.class));  accessToken(actor.getAccessToken());  accountId(accountId);}  }
class C{  @Override public void updateAndSyncGradle(){  if (!myContext.getDependencies().isEmpty()) {    try {      mergeDependenciesIntoGradle();    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  Project project=myContext.getProject();  if (myNeedsGradleSync && myContext.performGradleSync() && !project.isDefault()&& isBuildWithGradle(project)) {    myIO.requestGradleSync(project);  }}  }
class C{  protected void initSimulator(ForceSimulator fsim){  TupleSet ts=m_vis.getGroup(m_nodeGroup);  if (ts == null)   return;  try {    ts.addColumns(FORCEITEM_SCHEMA);  } catch (  IllegalArgumentException iae) {  }  float startX=(referrer == null ? 0f : (float)referrer.getX());  float startY=(referrer == null ? 0f : (float)referrer.getY());  startX=Float.isNaN(startX) ? 0f : startX;  startY=Float.isNaN(startY) ? 0f : startY;  Iterator iter=m_vis.visibleItems(m_nodeGroup);  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    ForceItem fitem=(ForceItem)item.get(FORCEITEM);    fitem.mass=getMassValue(item);    double x=item.getEndX();    double y=item.getEndY();    fitem.location[0]=(Double.isNaN(x) ? startX : (float)x);    fitem.location[1]=(Double.isNaN(y) ? startY : (float)y);    fsim.addItem(fitem);  }  if (m_edgeGroup != null) {    iter=m_vis.visibleItems(m_edgeGroup);    while (iter.hasNext()) {      EdgeItem e=(EdgeItem)iter.next();      NodeItem n1=e.getSourceItem();      ForceItem f1=(ForceItem)n1.get(FORCEITEM);      NodeItem n2=e.getTargetItem();      ForceItem f2=(ForceItem)n2.get(FORCEITEM);      float coeff=getSpringCoefficient(e);      float slen=getSpringLength(e);      fsim.addSpring(f1,f2,(coeff >= 0 ? coeff : -1.f),(slen >= 0 ? slen : -1.f));    }  }}  }
class C{  public Object[] internalGetChildren(Object o,IProgressMonitor monitor){  return new Object[0];}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  @Override public MapStack<K> standAloneChildStack(){  MapStack<K> standAloneChild=MapStack.create(this);  standAloneChild.push();  return standAloneChild;}  }
class C{  private static String names(Token[] tokens){  StringBuilder buf=new StringBuilder();  for (  Token token : tokens) {    if (isIgnored(token.type)) {      continue;    }    if (buf.length() > 0) {      buf.append(' ');    }    buf.append(token.type);  }  return buf.toString();}  }
class C{  @Override public void erasePageData(Application.Name applicationName,Experiment.ID experimentID){  ExperimentPageList experimentPageList=getExperimentPages(experimentID);  for (  ExperimentPage experimentPage : experimentPageList.getPages()) {    deletePage(applicationName,experimentID,experimentPage.getName());    LOGGER.debug("CassandraPagesRepository Removing page: {} from terminated experiment: {} for application: {}",experimentPage.getName(),experimentID,applicationName);  }}  }
class C{  public EigenDecomposition(final RealMatrix matrix) throws MathRuntimeException {  final double symTol=10 * matrix.getRowDimension() * matrix.getColumnDimension()* Precision.EPSILON;  isSymmetric=MatrixUtils.isSymmetric(matrix,symTol);  if (isSymmetric) {    transformToTridiagonal(matrix);    findEigenVectors(transformer.getQ().getData());  } else {    final SchurTransformer t=transformToSchur(matrix);    findEigenVectorsFromSchur(t);  }}  }
class C{  public static void debug(Object message){  Gdx.app.debug(TAG,String.valueOf(message));}  }
class C{  public EntityQuery filterByDate(String... filterByFieldName){  return this.filterByDate(null,filterByFieldName);}  }
class C{  public final void info(final Object o,final Throwable t){  log(Level.INFO,o,t);}  }
class C{  public static void dropTable(Database db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MY_COLLECTION\"";  db.execSQL(sql);}  }
class C{  public void close(){  thriftWriter.close();}  }
class C{  public Complex(double real,double imaginary){  this.real=real;  this.imaginary=imaginary;  isNaN=Double.isNaN(real) || Double.isNaN(imaginary);  isInfinite=!isNaN && (Double.isInfinite(real) || Double.isInfinite(imaginary));}  }
class C{  public static Boolean booleanValueVersatile(Object value){  if (value == null || value instanceof Boolean) {    return (Boolean)value;  } else   if ("true".equals(value) || "Y".equals(value)) {    return Boolean.TRUE;  } else   if ("false".equals(value) || "N".equals(value)) {    return Boolean.FALSE;  } else {    return null;  }}  }
class C{  public static boolean deleteFile(File deleteFile){  if (deleteFile != null) {    if (!deleteFile.exists()) {      return true;    }    if (deleteFile.isDirectory()) {      File[] files=deleteFile.listFiles();      if (null != files) {        for (        File file : files) {          deleteFile(file);        }      }      return deleteFile.delete();    } else {      return deleteFile.delete();    }  }  return false;}  }
class C{  @Override public XMLInputSource resolveEntity(XMLResourceIdentifier resourceIdentifier) throws XNIException, IOException {  if (fEntityResolver != null) {    String pubId=resourceIdentifier.getPublicId();    String sysId=resourceIdentifier.getLiteralSystemId();    String baseURI=resourceIdentifier.getBaseSystemId();    String name=null;    if (resourceIdentifier instanceof XMLDTDDescription) {      name="[dtd]";    } else     if (resourceIdentifier instanceof XMLEntityDescription) {      name=((XMLEntityDescription)resourceIdentifier).getEntityName();    }    if (pubId == null && sysId == null) {      return null;    }    try {      InputSource inputSource=fEntityResolver.resolveEntity(name,pubId,baseURI,sysId);      return (inputSource != null) ? createXMLInputSource(inputSource,baseURI) : null;    } catch (    SAXException e) {      Exception ex=e.getException();      if (ex == null) {        ex=e;      }      throw new XNIException(ex);    }  }  return null;}  }
class C{  protected DocsDeleteQuery docId(int value){  return unsafeParam("doc_id",value);}  }
class C{  public static Style cyan(){  final Style style=new Style();  style.color=PaletteUtils.getSolidColor(PaletteUtils.MATERIAL_CYAN);  return style;}  }
class C{  public static double clamp(double value,double min,double max){  if (value <= max && value >= min) {    return value;  } else   if (max < value) {    return max;  } else {    return min;  }}  }
class C{  public JsonTokener(String s){  this.myIndex=0;  this.mySource=s;}  }
class C{  private void initCreateUserinfoSchma() throws SQLException {  ResultSet rs;  rs=stmt.executeQuery("show tables from test like'userinformation'");  if (false == rs.next()) {    String sql="CREATE TABLE userinformation " + "(id varchar(10) not NULL, " + " password VARCHAR(10) not Null, "+ " PRIMARY KEY ( id )) Engine=Innodb default charset = utf8";    stmt.executeUpdate(sql);  }  rs=stmt.executeQuery("show tables from test like'useripandaccess'");  if (false == rs.next()) {    String sql="CREATE TABLE useripandaccess " + "(id varchar(10) not NULL, " + "ipaddress varchar(30) not NULL, "+ "accessAndTerminateTime datetime not null,"+ "type varchar(10)"+ ") Engine=Innodb default charset = utf8";    stmt.executeUpdate(sql);  }}  }
class C{  @Override public void undoAction(UndoInterface undoRedoObject){  String oldValueObj=(String)undoRedoObject.getOldValue();  filterComboBox.setSelectedItem(oldValueObj);}  }
class C{  public static boolean valid(String s,Type t){  return valid(s,t,false);}  }
class C{  public void putRequest(Context context,String url,JSONObject body,ApiListener apiListener){  request(context,Request.Method.PUT,url,body,apiListener);}  }
class C{  public static boolean incrementIfLessThan(AtomicInteger counter,int max){  while (true) {    int current=counter.intValue();    if (current < max) {      if (counter.compareAndSet(current,current + 1)) {        return true;      }    } else {      return false;    }  }}  }
class C{  public Speaker update(final Speaker speaker){  if (!this.speakers.keySet().contains(speaker.getId()))   throw new IllegalArgumentException("Speaker not found " + speaker.getId());  return this.speakers.put(speaker.getId(),speaker);}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Concurrent(Executor executor){  this.executor_=executor;}  }
class C{  private void clickByText(String text) throws UiObjectNotFoundException {  UiObject obj=new UiObject(new UiSelector().text(text));  obj.clickAndWaitForNewWindow();}  }
class C{  static Properties findAndSetCustomProperties(String propertiesName,SpaceURL spaceURL) throws IOException, ConfigurationException {  Properties customProperties=spaceURL.getCustomProperties();  if (!JSpaceUtilities.isEmpty(propertiesName)) {    Properties customPropertiesFile=ResourceLoader.findCustomPropertiesObj(propertiesName);    customProperties.putAll(customPropertiesFile);  }  if (customProperties != null) {    for (Enumeration keys=customProperties.keys(); keys.hasMoreElements(); ) {      String propKey=(String)keys.nextElement();      int spaceurlArgIndx=propKey.lastIndexOf(SpaceURL.PROPERTIES_SPACE_URL_ARG);      int spaceurlArgLineIndx=propKey.lastIndexOf(SpaceURL.PROPERTIES_SPACE_URL_ARGLINE);      int systemPropArg=propKey.lastIndexOf("-D");      if (systemPropArg != -1) {        String systemPropKey=propKey.substring(2);        String propValue=customProperties.getProperty(propKey);        if (!JSpaceUtilities.isEmpty(propValue))         propValue=JSpaceUtilities.removeInvertedCommas(propValue);        System.setProperty(systemPropKey,propValue);        if (_logger.isLoggable(Level.FINE)) {          _logger.fine("Key - [" + systemPropKey + "] Value - ["+ propValue+ "] was set as a System Property from Properties object.");        }      } else       if (spaceurlArgIndx != -1 && spaceurlArgLineIndx == -1) {        String spaceurlArg=propKey.substring(propKey.lastIndexOf('.') + 1);        if (SpaceURL.isUrlAttribute(spaceurlArg)) {          String propValue=customProperties.getProperty(propKey);          if (!JSpaceUtilities.isEmpty(propValue))           propValue=JSpaceUtilities.removeInvertedCommas(propValue);          if (propValue.trim().equals("") && SpaceURL.isBooleanUrlAttribute(spaceurlArg))           propValue="true";          spaceURL.setProperty(spaceurlArg.toLowerCase(),propValue);          if (_logger.isLoggable(Level.FINE)) {            _logger.fine("SpaceURL attribute - [" + spaceurlArg.toLowerCase() + "] Value - ["+ propValue+ "] was added to SpaceURL from Properties object.");          }        } else {          if (_logger.isLoggable(Level.FINE)) {            _logger.fine("A non valid SpaceURL attribute - [" + spaceurlArg.toLowerCase() + "] Value - ["+ customProperties.getProperty(propKey)+ "] was loaded from Properties object.");          }        }      } else       if (spaceurlArgLineIndx != -1) {        String spaceAttribArgLine=customProperties.getProperty(propKey);        spaceAttribArgLine=JSpaceUtilities.removeInvertedCommas(spaceAttribArgLine);        StringTokenizer st=new StringTokenizer(spaceAttribArgLine,"&");        if (propKey.indexOf("&") != -1)         st=new StringTokenizer(st.nextToken(),"&");        String attrName=null;        String attrValue=null;        for (int i=0; st.hasMoreTokens(); i++) {          try {            StringTokenizer stp=new StringTokenizer(st.nextToken(),"=");            attrName=stp.nextToken().toLowerCase();            if (SpaceURL.isUrlAttribute(attrName)) {              attrValue=stp.nextToken();              if (attrValue.trim().equals("") && SpaceURL.isBooleanUrlAttribute(attrName))               attrValue="true";              spaceURL.setProperty(attrName.toLowerCase(),attrValue);            }          } catch (          NoSuchElementException ex) {            if (SpaceURL.isBooleanUrlAttribute(attrName)) {              spaceURL.setProperty(attrName.toLowerCase(),"true");            }            attrValue=null;          }          if (_logger.isLoggable(Level.FINE)) {            if (attrValue != null) {              _logger.fine("SpaceURL attribute - [" + attrName.toLowerCase() + "] Value - ["+ attrValue+ "] was added to SpaceURL from Properties object.");            } else {              _logger.fine("SpaceURL attribute - [" + attrName.toLowerCase() + "] Value - [true] was added to SpaceURL from Properties object.");            }          }        }      }    }  }  return customProperties;}  }
class C{  public NewsfeedSearchQueryWithExtended startFrom(String value){  return unsafeParam("start_from",value);}  }
class C{  public QueryExpression(){  super();}  }
class C{  public boolean flip(){  return set(getMax(),getMin());}  }
class C{  protected void validateReplicationSettingsOnNamespace(NamespaceName namespace){  if (namespace.isGlobal()) {    String localCluster=pulsar().getConfiguration().getClusterName();    Policies policies;    try {      policies=pulsar().getConfigurationCache().policiesCache().get(AdminResource.path("policies",namespace.getProperty(),namespace.getCluster(),namespace.getLocalName()));      if (policies.replication_clusters.isEmpty()) {        String msg=String.format("Global namespace does not have any clusters configured : local_cluster=%s ns=%s",localCluster,namespace.toString());        log.warn(msg);        throw new RestException(Status.PRECONDITION_FAILED,msg);      }      if (!policies.replication_clusters.contains(localCluster)) {        String msg=String.format("Global namespace missing local cluster name in replication list : local_cluster=%s ns=%s repl_clusters=%s",localCluster,namespace.toString(),policies.replication_clusters);        log.warn(msg);        throw new RestException(Status.PRECONDITION_FAILED,msg);      }    } catch (    RestException re) {      throw re;    }catch (    Exception e) {      String msg=String.format("Failed to validate global cluster configuration : cluster=%s ns=%s  emsg=%s",localCluster,namespace,e.getMessage());      log.error(msg);      throw new RestException(e);    }  }}  }
class C{  public ViterbiDecoder(double[][] score){  this.score=score;}  }
class C{  public RequestHandle delete(String url,ResponseHandlerInterface responseHandler){  return delete(null,url,responseHandler);}  }
class C{  public static void populateConnectionDefaults(final MqttConnectionDetails connection){  if (connection.getProtocol() == null) {    connection.setProtocol(ProtocolVersionEnum.MQTT_DEFAULT);  }  if (connection.isWebSocket() == null) {    connection.setWebSocket(false);  }  if (connection.getName() == null || connection.getName().isEmpty()) {    connection.setName(ConnectionUtils.composeConnectionName(connection.getClientID(),connection.getServerURI()));  }  if (connection.isCleanSession() == null) {    connection.setCleanSession(MqttConnectOptions.CLEAN_SESSION_DEFAULT);  }  if (connection.getConnectionTimeout() == null) {    connection.setConnectionTimeout(MqttConnectOptions.CONNECTION_TIMEOUT_DEFAULT);  }  if (connection.getKeepAliveInterval() == null) {    connection.setKeepAliveInterval(MqttConnectOptions.KEEP_ALIVE_INTERVAL_DEFAULT);  }}  }
class C{  public void expandDataSource(DataSource dataSource){  expandNode(getNode(dataSource));}  }
class C{  public String formatText(String text){  text=StringEscapeUtils.escapeHtml(text);  return text.replaceAll(url,"$1<a rel='nofollow' href='$2' target='_blank'>$2</a>").replaceAll(tweep,"<a rel='nofollow' href='http://twitter.com/$1' target='_blank'>$1</a>").replaceAll(hashtag,"<a rel='nofollow' href='https://twitter.com/hashtag/$2' target='_blank'>$1</a>");}  }
class C{  public ObjectFactory(){}  }
class C{  public static void checkFlightPath(List<Coordinate> path,int width,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){  StatusService.checkFlightPath(path,width,takeOffPoint,types,ignoredTypes,showWeather,date,callback);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  TcNoteDao.createTable(db,ifNotExists);  CustomerDao.createTable(db,ifNotExists);}  }
class C{  public Cal now(){  dateTimeUnit=getCalendar().today();  return this;}  }
class C{  public boolean isLockSubject(){  return false;}  }
class C{  public static boolean isStandardRGBImage(BufferedImage bImage){  return bImage.getColorModel().getColorSpace().isCS_sRGB();}  }
class C{  private static void snapCheck(ConstraintAnchor source,ConstraintAnchor target,SnapCandidate candidate,int slope){  if (!target.isSnapCompatibleWith(source) || target.getOwner() == source.getOwner()) {    return;  }  ConstraintHandle handleSource=WidgetInteractionTargets.constraintHandle(source);  ConstraintHandle handleTarget=WidgetInteractionTargets.constraintHandle(target);  int anchorDistance=handleSource.getStraightDistanceFrom(handleTarget);  int minDistance=handleSource.getDistanceFrom(target.getOwner());  if (target.getOwner() instanceof Guideline) {    minDistance=0;  }  double distance=Math.sqrt(anchorDistance * anchorDistance + minDistance * minDistance);  boolean targetBelongsToParent=source.getOwner().getParent() == target.getOwner();  if (anchorDistance < slope && distance <= candidate.distance && (targetBelongsToParent || (distance < MAX_CONNECTION_DISTANCE))) {    if (candidate.target != null) {      boolean currentTargetBelongsToParent=source.getOwner().getParent() == candidate.target.getOwner();      if (currentTargetBelongsToParent) {        return;      }      if (candidate.distance == distance) {        if (!targetBelongsToParent && candidate.target.getSnapPriorityLevel() > target.getSnapPriorityLevel()) {          return;        }      }    }    candidate.distance=distance;    candidate.target=target;    candidate.source=source;  }}  }
class C{  private void removeColumns(List<String> removeColumnNames){  LogUtil.d(TAG,"do addColumn");  removeColumns(removeColumnNames,mTableModel.getTableName());  for (  String columnName : removeColumnNames) {    mTableModelDB.removeColumnModelByName(columnName);  }}  }
class C{  public void checkLevelIgnoreResolving(int level){  if (resolvingLevel < level) {    String hint="\nIf you are extending Soot, try to add the following call before calling soot.Main.main(..):\n" + "Scene.v().addBasicClass(" + getName() + ","+ levelToString(level)+ ");\n"+ "Otherwise, try whole-program mode (-w).";    throw new RuntimeException("This operation requires resolving level " + levelToString(level) + " but "+ name+ " is at resolving level "+ levelToString(resolvingLevel)+ hint);  }}  }
class C{  public DistributedLogManager createDistributedLogManager(String nameOfLogStream,ClientSharingOption clientSharingOption) throws InvalidStreamNameException, IOException {  Optional<DistributedLogConfiguration> streamConfiguration=Optional.absent();  Optional<DynamicDistributedLogConfiguration> dynamicStreamConfiguration=Optional.absent();  return createDistributedLogManager(nameOfLogStream,clientSharingOption,streamConfiguration,dynamicStreamConfiguration);}  }
class C{  public void searchMgcInCartTree(HTSModel m,FeatureVector fv,FeatureDefinition featureDef){  for (int s=0; s < numStates; s++) {    PdfLeafNode node=(PdfLeafNode)mgcTree[s].interpretToNode(fv,1);    m.setMcepMean(s,node.getMean());    m.setMcepVariance(s,node.getVariance());  }}  }
class C{  @Nullable public static Label createLabelFromRuleName(@Nullable BlazePackage blazePackage,@Nullable String ruleName){  if (blazePackage == null || ruleName == null) {    return null;  }  WorkspacePath packagePath=blazePackage.buildFile.getPackageWorkspacePath();  RuleName name=RuleName.createIfValid(ruleName);  if (packagePath == null || name == null) {    return null;  }  return new Label(packagePath,name);}  }
class C{  synchronized void dropObservable(UUID host,int id){  mCache.remove(new CacheKey(host,id));}  }
class C{  private List<byte[]> convertStringListToByteArray(List<String> valueList){  List<byte[]> byteArrayList=new ArrayList<>(valueList.size());  for (  String value : valueList) {    byteArrayList.add(value.getBytes(Charset.forName(CarbonCommonConstants.DEFAULT_CHARSET)));  }  return byteArrayList;}  }
class C{  public void patchLibraries(){  patchHandlerImplementation();  patchThreadImplementation();}  }
class C{  private AudioOption createOption1A(ChannelType... channels){  AudioOption option=new AudioOption();  option.add(createTrack(new Channel(FL.name(),channels[0]),new Channel(FR.name(),channels[1]),new Channel(FC.name(),channels[2]),new Channel(LFE.name(),channels[3]),new Channel(SL.name(),channels[4]),new Channel(SR.name(),channels[5])));  Stream.of(createTrack(new Channel(FL.name(),channels[6])),createTrack(new Channel(FR.name(),channels[7]))).forEach(null);  return option;}  }
class C{  @RequestMapping(value="/races",method=RequestMethod.PUT,produces=MediaType.APPLICATION_JSON_VALUE) @Timed public ResponseEntity<Race> updateRace(@RequestBody Race race) throws URISyntaxException {  log.debug("REST request to update Race : {}",race);  if (race.getRaceId() == null) {    return createRace(race);  }  Race result=raceRepository.save(race);  return ResponseEntity.ok().headers(HeaderUtil.createEntityUpdateAlert("race",race.getRaceId().toString())).body(result);}  }
class C{  public static float intPow(float b,int e){  if (e == 0) {    return 1;  }  float result=1;  float currPow=b;  do {    if ((e & 1) == 1)     result*=currPow;    currPow=currPow * currPow;    e>>=1;  } while (e > 0);  return result;}  }
class C{  public static byte[] toByteArray(Reader input,Charset encoding) throws IOException {  ByteArrayOutputStream output=new ByteArrayOutputStream();  copy(input,output,encoding);  return output.toByteArray();}  }
class C{  public boolean hasResult(){  return getResultOpt().getNumChild() != 0;}  }
class C{  public OrderByKey(){}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Paralyze_END_A_TO_SELF(String skilltarget){  return new SM_SYSTEM_MESSAGE(1200752,skilltarget);}  }
class C{  public static void formatFileHeader(String fileName,Transaction tx){  try {    tx.concurrencyMgr().modifyFile(fileName);  } catch (  LockAbortException e) {    tx.rollback();    throw e;  }  if (VanillaDb.fileMgr().size(fileName) == 0) {    FileHeaderFormatter fhf=new FileHeaderFormatter();    Buffer buff=tx.bufferMgr().pinNew(fileName,fhf);    tx.bufferMgr().unpin(buff);  }}  }
class C{  public SecureGetUserLevelQuery(VkApiClient client,ServiceActor actor,List<Integer> userIds){  super(client,"secure.getUserLevel",Utils.buildParametrizedType(List.class,Level.class));  accessToken(actor.getAccessToken());  userIds(userIds);}  }
class C{  @Override public synchronized void start(){  LOGGER.info("Starting the C2MON alive timer mechanism.");  timer=new Timer("C2MON-alive-timer");  timer.schedule(this,INITIAL_SCAN_DELAY,SCAN_INTERVAL);  running=true;}  }
class C{  public boolean parseBoolean(String text) throws DataParseException {  if (TRUE.equalsIgnoreCase(text)) {    return true;  } else   if (FALSE.equalsIgnoreCase(text)) {    return false;  } else {    throw new DataParseException("Input does not represent a boolean value: " + text);  }}  }
class C{  public ConsoleEntryList(int capacity,int trimSize){  entries=new LimitSizeEntryList(capacity,trimSize);  currentEntries=entries;  logDisabledTypesMask=0;}  }
class C{  private void applyCrop(){  if (isCropping || mBitmap == null) {    return;  }  isCropping=true;  final int width=mBitmap.getWidth();  final int height=mBitmap.getHeight();  String path=new File(getCacheDir(),CROPPED + System.currentTimeMillis() + FORMAT).getPath();  mBitmap=mCropView.getCroppedImage();  supportInvalidateOptionsMenu();  SavePhotoTask task=new SavePhotoTask.Builder().setAngle(mAngle).setSize(width,height).setRect(mCropView.getActualCropRect()).setContext(this).setOutPath(path).setCallback(this).setUri(mUri).build();  task.execute();}  }
class C{  public final static NameValuePair[] parseParameters(final String value,HeaderValueParser parser) throws ParseException {  if (value == null) {    throw new IllegalArgumentException("Value to parse may not be null");  }  if (parser == null)   parser=SaveHeaderValueParser.DEFAULT;  CharArrayBuffer buffer=new CharArrayBuffer(value.length());  buffer.append(value);  SaveParserCursor cursor=new SaveParserCursor(0,value.length());  return parser.parseParameters(buffer,cursor);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static boolean equals(CharSequence a,CharSequence b){  if (a == b)   return true;  int length;  if (a != null && b != null && (length=a.length()) == b.length()) {    if (a instanceof String && b instanceof String) {      return a.equals(b);    }    for (int i=0; i < length; i++) {      if (a.charAt(i) != b.charAt(i))       return false;    }    return true;  }  return false;}  }
class C{  @Override public Filter createFilter(List<Expression> parameterList){  return null;}  }
class C{  public void resetAll(Identity<?> identity){  strictPermission.values().forEach(null);}  }
class C{  public boolean hasNext() throws IOException {  int p=peeked;  if (p == PEEKED_NONE) {    p=doPeek();  }  return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;}  }
class C{  public MyDialog inInterpolator(Interpolator interpolator){  mInInterpolator=interpolator;  return this;}  }
class C{  private void overwriteDictionaryMetaFile(ColumnDictionaryChunkMeta firstDictionaryChunkMeta,String dictionaryFile) throws IOException {  ThriftWriter thriftMetaChunkWriter=new ThriftWriter(dictionaryFile,false);  try {    thriftMetaChunkWriter.open();    thriftMetaChunkWriter.write(firstDictionaryChunkMeta);  } catch (  IOException e) {  } finally {    thriftMetaChunkWriter.close();  }}  }
class C{  private Log validate(String logId,String projectName){  Log log=logRepository.findOne(logId);  expect(log,notNull()).verify(ErrorType.LOG_NOT_FOUND,logId);  final TestItem testItem=testItemRepository.findOne(log.getTestItemRef());  expect(testItem,not(Preconditions.IN_PROGRESS)).verify(ErrorType.TEST_ITEM_IS_NOT_FINISHED,formattedSupplier("Unable to delete log '{}' when test item '{}' in progress state",log.getId(),testItem.getId()));  final String expectedProjectName=launchRepository.findOne(testItem.getLaunchRef()).getProjectRef();  expect(expectedProjectName,equalTo(projectName)).verify(ErrorType.FORBIDDEN_OPERATION,formattedSupplier("Log '{}' not under specified '{}' project",logId,projectName));  return log;}  }
class C{  public void suspendEncoding() throws java.io.IOException {  flushBase64();  this.suspendEncoding=true;}  }
class C{  public String render(String combinedName,boolean asString) throws GeneralException, IOException, SAXException, ParserConfigurationException {  String resourceName=ScreenFactory.getResourceNameFromCombined(combinedName);  String screenName=ScreenFactory.getScreenNameFromCombined(combinedName);  return this.render(resourceName,screenName,asString);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  private static void resolveTernaryOperator(TernaryExpression objSubjectExpression,@Nullable Function objScope,PhpIndex objIndex,HashSet<String> objTypesSet){  if (null != objSubjectExpression.getTrueVariant()) {    resolveExpressionType(objSubjectExpression.getTrueVariant(),objScope,objIndex,objTypesSet);  }  if (null != objSubjectExpression.getFalseVariant()) {    resolveExpressionType(objSubjectExpression.getFalseVariant(),objScope,objIndex,objTypesSet);  }}  }
class C{  public PhotosEditQuery foursquareId(String value){  return unsafeParam("foursquare_id",value);}  }
class C{  public static final void emoteStartSinging(Npc owner){  owner.unsetState(CreatureState.NPC_IDLE);  owner.setState(CreatureState.ACTIVE);  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.EMOTE,113,0));}  }
class C{  public Builder keyboardPanOffset(Number keyboardPanOffset){  this.keyboardPanOffset=keyboardPanOffset;  return this;}  }
class C{  void addCodebaseComponents(URL[] jars){  if (jars == null)   return;  for (int i=0; i < jars.length; i++) {    if (!codebaseComponents.contains(jars[i]))     codebaseComponents.add(jars[i]);  }  addCommonJARs(jars);}  }
class C{  static void drawHorizontalZigZagLine(Graphics2D g,int x1,int x2,int y,int dY1,int dY2){  if (x2 < x1) {    int temp=x1;    x1=x2;    x2=temp;  }  int distance=x2 - x1;  int step=ZIGZAG * 2 + (dY2 > 0 ? ZIGZAG : 0);  int count=(distance / step) - 2;  int remainings=distance - (count * step);  int x=x1 + remainings / 2;  g.drawLine(x1,y,x,y);  for (int i=0; i < count; i++) {    g.drawLine(x,y,x + ZIGZAG,y + dY1);    g.drawLine(x + ZIGZAG,y + dY1,x + 2 * ZIGZAG,y - dY2);    if (dY2 != 0) {      g.drawLine(x + 2 * ZIGZAG,y - dY2,x + 3 * ZIGZAG,y);    }    x+=step;  }  g.drawLine(x,y,x2,y);}  }
class C{  private void addField(Class<?> localisationClass,Class<?> panelId,GroupConfig groupConfig,XMLFieldConfigData xmlFieldConfig){  FieldIdEnum id=xmlFieldConfig.getId();  String label=getLocalisedText(localisationClass,xmlFieldConfig.getLabel());  boolean valueOnly=xmlFieldConfig.isValueOnly();  String defaultValue=xmlFieldConfig.getDefault();  FieldConfigCommonData commonData=new FieldConfigCommonData(panelId,id,label,valueOnly,isRasterSymbol);  if (xmlFieldConfig instanceof XMLFieldConfigString) {    XMLFieldConfigString xmlStringFieldConfig=(XMLFieldConfigString)xmlFieldConfig;    FieldConfigString stringConfig=new FieldConfigString(commonData,getLocalisedText(localisationClass,xmlStringFieldConfig.getButtonText()));    groupConfig.addField(stringConfig);    String defaultValueObj=ConfigDefaultFactory.getString(defaultValue);    if (defaultValueObj != null) {      stringConfig.setDefaultValue(defaultValueObj);      defaultFieldMap.put(id,defaultValueObj);    }  } else   if (xmlFieldConfig instanceof XMLFieldConfigColourMap) {    FieldConfigColourMap colourMapConfig=new FieldConfigColourMap(commonData);    groupConfig.addField(colourMapConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigFeatureTypeConstraint) {    FieldConfigFeatureTypeConstraint stringConfig=new FieldConfigFeatureTypeConstraint(commonData);    groupConfig.addField(stringConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigGeometryField) {    FieldConfigGeometryField geometryFieldConfig=new FieldConfigGeometryField(commonData);    DataSourceInterface dataSource=DataSourceFactory.getDataSource();    if (dataSource != null) {      dataSource.addListener(geometryFieldConfig);    }    groupConfig.addField(geometryFieldConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigFont) {    FieldConfigFont fontConfig=new FieldConfigFont(commonData);    groupConfig.addField(fontConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigInlineFeature) {    FieldConfigInlineFeature inlineFeatureConfig=new FieldConfigInlineFeature(commonData);    groupConfig.addField(inlineFeatureConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigFontPreview) {    FieldConfigFontPreview fontPreviewConfig=new FieldConfigFontPreview(commonData);    groupConfig.addField(fontPreviewConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigTransformation) {    XMLFieldConfigTransformation xmlTransformationFieldConfig=(XMLFieldConfigTransformation)xmlFieldConfig;    FieldConfigTransformation transformationConfig=new FieldConfigTransformation(commonData,getLocalisedText(localisationClass,xmlTransformationFieldConfig.getEditButtonText()),getLocalisedText(localisationClass,xmlTransformationFieldConfig.getClearButtonText()));    groupConfig.addField(transformationConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigGeometry) {    XMLFieldConfigGeometry xmlGeometryFieldConfig=(XMLFieldConfigGeometry)xmlFieldConfig;    FieldConfigGeometry geometryConfig=new FieldConfigGeometry(commonData,getLocalisedText(localisationClass,xmlGeometryFieldConfig.getButtonText()));    groupConfig.addField(geometryConfig);    String defaultValueObj=ConfigDefaultFactory.getString(defaultValue);    if (defaultValueObj != null) {      geometryConfig.setDefaultValue(defaultValueObj);      defaultFieldMap.put(id,defaultValueObj);    }  } else   if (xmlFieldConfig instanceof XMLFieldConfigBoolean) {    FieldConfigBoolean boolConfig=new FieldConfigBoolean(commonData);    groupConfig.addField(boolConfig);    Boolean defaultValueObj=ConfigDefaultFactory.getBoolean(defaultValue);    if (defaultValueObj != null) {      boolConfig.setDefaultValue(defaultValueObj);      defaultFieldMap.put(id,defaultValueObj);    }  } else   if (xmlFieldConfig instanceof XMLFieldConfigDouble) {    FieldConfigDouble doubleConfig=new FieldConfigDouble(commonData);    XMLFieldConfigDouble xmlDouble=(XMLFieldConfigDouble)xmlFieldConfig;    doubleConfig.setDefaultValue(xmlDouble.getDefaultValue());    doubleConfig.setConfig(xmlDouble.getMinValue(),xmlDouble.getMaxValue(),xmlDouble.getStepSize(),xmlDouble.getNoOfDecimalPlaces());    groupConfig.addField(doubleConfig);    Double defaultValueObj=ConfigDefaultFactory.getDouble(defaultValue);    if (defaultValueObj != null) {      doubleConfig.setDefaultValue(defaultValueObj);      defaultFieldMap.put(id,defaultValueObj);    }  } else   if (xmlFieldConfig instanceof XMLFieldConfigInteger) {    XMLFieldConfigInteger xmlInteger=(XMLFieldConfigInteger)xmlFieldConfig;    FieldConfigInteger integerConfig=new FieldConfigInteger(commonData);    integerConfig.setDefaultValue(xmlInteger.getDefaultValue());    integerConfig.setConfig(xmlInteger.getMinValue(),xmlInteger.getMaxValue(),xmlInteger.getStepSize());    groupConfig.addField(integerConfig);    Integer defaultValueObj=ConfigDefaultFactory.getInteger(defaultValue);    if (defaultValueObj != null) {      integerConfig.setDefaultValue(defaultValueObj);      defaultFieldMap.put(id,defaultValueObj);    }  } else   if (xmlFieldConfig instanceof XMLFieldConfigColour) {    FieldConfigColour colourConfig=new FieldConfigColour(commonData);    groupConfig.addField(colourConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigSlider) {    XMLFieldConfigSlider xmlSlider=(XMLFieldConfigSlider)xmlFieldConfig;    FieldConfigSlider sliderConfig=new FieldConfigSlider(commonData);    sliderConfig.setDefaultValue(xmlSlider.getDefaultValue());    groupConfig.addField(sliderConfig);    Double defaultValueObj=ConfigDefaultFactory.getDouble(defaultValue);    if (defaultValueObj != null) {      sliderConfig.setDefaultValue(defaultValueObj);      defaultFieldMap.put(id,defaultValueObj);    }  } else   if (xmlFieldConfig instanceof XMLFieldConfigSymbolType) {    FieldConfigSymbolType fillSymbolConfig=new FieldConfigSymbolType(commonData);    groupConfig.addField(fillSymbolConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigEnum) {    FieldConfigEnum valueConfig=new FieldConfigEnum(commonData);    XMLFieldConfigEnumValueList valueList=((XMLFieldConfigEnum)xmlFieldConfig).getValueList();    List<SymbolTypeConfig> configList=readValueListConfig(localisationClass,panelId,valueList);    valueConfig.addConfig(configList);    String defaultValueObj=ConfigDefaultFactory.getString(defaultValue);    if (defaultValueObj != null) {      valueConfig.setDefaultValue(defaultValueObj);      defaultFieldMap.put(id,defaultValueObj);    }    groupConfig.addField(valueConfig);  } else   if (xmlFieldConfig instanceof XMLFieldConfigMapUnit) {    FieldConfigMapUnits valueConfig=new FieldConfigMapUnits(commonData);    String defaultValueObj=ConfigDefaultFactory.getString(defaultValue);    if (defaultValueObj != null) {      valueConfig.setDefaultValue(defaultValueObj);      defaultFieldMap.put(id,defaultValueObj);    }    groupConfig.addField(valueConfig);  }}  }
class C{  public boolean equals(Object o){  if (!(o instanceof LongWritable))   return false;  LongWritable other=(LongWritable)o;  return this.value == other.value;}  }
class C{  public MessageInfoBar(InfoBarListeners.Dismiss listener,int iconResourceId,CharSequence title){  super(listener,iconResourceId,null,title);}  }
class C{  public static double percentage(final double number,final double maximum){  return number / maximum;}  }
class C{  protected synchronized int assignDocumentNumber(){  return ++docAndDoctypeCounter;}  }
class C{  public NotificationsGetQuery(VkApiClient client,UserActor actor){  super(client,"notifications.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public static String colorize(Console console,String diffText){  StringBuilder sb=new StringBuilder();  for (  String line : Splitter.on("\n").split(diffText)) {    sb.append("\n");    if (line.startsWith("+")) {      sb.append(console.colorize(AnsiColor.GREEN,line));    } else     if (line.startsWith("-")) {      sb.append(console.colorize(AnsiColor.RED,line));    } else {      sb.append(line);    }  }  return sb.toString();}  }
class C{  public static double[] generateUniform(int l){  double[] ret=new double[l];  java.util.Random rgen=new java.util.Random();  for (int i=0; i < l; i++) {    ret[i]=rgen.nextDouble();  }  return ret;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ResurrectPositional_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200710,skillcaster,skillname);}  }
class C{  public PagesParseWikiQuery(VkApiClient client,UserActor actor,String text){  super(client,"pages.parseWiki",String.class);  accessToken(actor.getAccessToken());  text(text);}  }
class C{  @PreDestroy public void stop(){  if (leaderLock != null) {    leaderLock.release();  }  if (scheduler != null) {    scheduler.shutdownNow();  }  isLeader=false;}  }
class C{  private SegmentedListIterator<T> establishPos(SegmentedListIterator<T> res){  int startSegment=drawSegmentNumber(false);  res.setStartSegment((short)startSegment);  for (int seg=startSegment, i=0; i < getNumSegments(); i++, seg++) {    if (seg == getNumSegments())     seg=0;    res.setCurrentSegment((short)seg);    Segment<T> segment=_segments[seg];    segment.getLock().readLock().lock();    try {      if (segment.isEmpty())       continue;      for (ObjectInfo<T> oi=segment.getHead().getForwardRef(); oi != null; oi=oi.getForwardRef()) {        if (!oi.isDeleted() && oi.getSubject() != null) {          res.setCurrentOI(oi);          res.setSubject(oi.getSubject());          return res;        }      }    }  finally {      segment.getLock().readLock().unlock();    }  }  return null;}  }
class C{  public NelderMeadSimplex(final int n,final double rho,final double khi,final double gamma,final double sigma){  this(n,1d,rho,khi,gamma,sigma);}  }
class C{  public S2Point ortho(){  int k=largestAbsComponent();  S2Point temp;  if (k == 1) {    temp=new S2Point(1,0,0);  } else   if (k == 2) {    temp=new S2Point(0,1,0);  } else {    temp=new S2Point(0,0,1);  }  return S2Point.normalize(crossProd(this,temp));}  }
class C{  public static void assertEquals(String msg,double[] expected,double[] observed,double tolerance){  StringBuilder out=new StringBuilder(msg);  if (expected.length != observed.length) {    out.append("\n Arrays not same length. \n");    out.append("expected has length ");    out.append(expected.length);    out.append(" observed length = ");    out.append(observed.length);    Assert.fail(out.toString());  }  boolean failure=false;  for (int i=0; i < expected.length; i++) {    if (!Precision.equalsIncludingNaN(expected[i],observed[i],tolerance)) {      failure=true;      out.append("\n Elements at index ");      out.append(i);      out.append(" differ. ");      out.append(" expected = ");      out.append(expected[i]);      out.append(" observed = ");      out.append(observed[i]);    }  }  if (failure) {    Assert.fail(out.toString());  }}  }
class C{  static void checkRegistrantServiceID(ServiceID serviceID,Logger logger,Level level){  if (logger.isLoggable(level)) {    int variant=(int)(serviceID.getLeastSignificantBits() >> 62) & 0x3;    if (variant != 2) {      logger.log(level,"{0} has invalid variant {1}",new Object[]{serviceID,new Integer(variant)});    }    int version=(int)(serviceID.getMostSignificantBits() >> 12) & 0xF;    if (!(version == 1 || version == 4)) {      logger.log(level,"{0} has invalid version {1}",new Object[]{serviceID,new Integer(version)});    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_PLAYTIME_WITH_RESERVATION(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400048,value0,value1);}  }
class C{  public <T,Y>StaticScript broadcast(RemoteResultReducer<T,Y> reducer){  this.broadcast=true;  this.remoteResultReducer=reducer;  return this;}  }
class C{  public static final void sort(Object[] a,int[] b,int begin,int end,Comparator cmp){  mergesort(a,b,begin,end - 1,cmp);}  }
class C{  @GET public String reset(){  this.map.clear();  return "Reset endpoints";}  }
class C{  public Properties readSettings() throws ProxyException {  try {    Properties settings=settingsParser.parseSettings(profileScanner);    return settings;  } catch (  IOException e) {    throw new ProxyException("No Firefox installation found");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_USE_ITEM_MULTI(String value1,String value0s){  return new SM_SYSTEM_MESSAGE(1400448,value1,value0s);}  }
class C{  public DocumentType createDocumentType(String qualifiedName,String publicID,String systemID) throws DOMException {  return new DocumentTypeImpl(this,qualifiedName,publicID,systemID);}  }
class C{  public static Tuple median(Iterator tuples,String field){  return median(tuples,field,DefaultLiteralComparator.getInstance());}  }
class C{  public void minimizeButtons(){  mAlert.minimizeButtons();}  }
class C{  @Override public Filter createLogicFilter(List<Filter> filterList){  return null;}  }
class C{  public void unregister(ILeasedEntryCacheInfo leaseCacheInfo,long expiration){  boolean unregister;  if (leaseCacheInfo.isOffHeapEntry())   unregister=expiration != Long.MAX_VALUE && !_alwaysDisableEntriesLeases; else   unregister=leaseCacheInfo.isConnectedToLeaseManager();  if (unregister) {    if (!leaseCacheInfo.isOffHeapEntry()) {      leaseCacheInfo.getLeaseManagerListRef().remove(leaseCacheInfo.getLeaseManagerPosition());    } else {      Long expirationTime=((expiration / _expirationTimeInterval + 1) * _expirationTimeInterval);      Cell cell=_expirationList.get(expirationTime);      if (cell != null)       cell.unregisterByPos(leaseCacheInfo.getLeaseManagerPosition(),true);    }    leaseCacheInfo.setLeaseManagerListRefAndPosition(null,null);  }}  }
class C{  public void removeLimitLine(LimitLine l){  mLimitLines.remove(l);}  }
class C{  public int download_file(String group_name,String remote_filename,String local_filename) throws IOException, MyException {  final long file_offset=0;  final long download_bytes=0;  return this.download_file(group_name,remote_filename,file_offset,download_bytes,local_filename);}  }
class C{  private XmlOutputter(){}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  private void internal_populateBooleanField(Map<String,String> options,FieldIdEnum fieldId,String key){  if ((options != null) && options.containsKey(key)) {    String storedValue=options.get(key);    Boolean value=Boolean.valueOf(storedValue);    fieldConfigVisitor.populateBooleanField(fieldId,value);  } else {    setDefaultValue(fieldId);  }}  }
class C{  public LeadsCheckUserQuery testResult(Integer value){  return unsafeParam("test_result",value);}  }
class C{  public Builder collapsed(Boolean collapsed){  this.collapsed=collapsed;  return this;}  }
class C{  public String toStringAsBinarySequences(Taxa taxa){  StringBuilder buf=new StringBuilder();  for (Iterator it=taxa.iterator(); it.hasNext(); ) {    String name=(String)it.next();    int t=taxa.indexOf(name);    buf.append("> ").append(name).append("\n");    for (int s=1; s <= size(); s++) {      Split split=getSplit(s);      if (split.getA().get(t))       buf.append("1"); else       buf.append("0");    }    buf.append("\n");  }  return buf.toString();}  }
class C{  void handleSelectionChanged(String selection){  if (mDidExpandSelection) {    mSelectedText=selection;    mDidExpandSelection=false;    return;  }  if (selection == null || selection.isEmpty()) {    scheduleInvalidTapNotification();    if (mSelectionType == SelectionType.TAP) {      resetSelectionStates();      return;    }  }  if (!selection.isEmpty()) {    unscheduleInvalidTapNotification();  }  mSelectedText=selection;  if (mWasTapGestureDetected) {    mSelectionType=SelectionType.TAP;    handleSelection(selection,mSelectionType);    mWasTapGestureDetected=false;  } else {    mHandler.handleSelectionModification(selection,isValidSelection(selection),mX,mY);  }}  }
class C{  public static String formatDecimalNumber(double number,String pattern,Locale locale){  com.ibm.icu.text.NumberFormat nf=com.ibm.icu.text.NumberFormat.getNumberInstance(locale);  String nbParsing="";  ((com.ibm.icu.text.DecimalFormat)nf).applyPattern(pattern);  ((com.ibm.icu.text.DecimalFormat)nf).toPattern();  nbParsing=nf.format(number);  return nbParsing;}  }
class C{  public boolean isValid(String value){  if (value == null) {    return false;  }  for (int i=0; i < patterns.length; i++) {    if (patterns[i].matcher(value).matches()) {      return true;    }  }  return false;}  }
class C{  public Vector3 solve33(Vector3 b){  double det=this.determinant();  if (Math.abs(det) > Epsilon.E) {    det=1.0 / det;  }  Vector3 r=new Vector3();  double m00=this.m11 * this.m22 - this.m12 * this.m21;  double m01=-this.m01 * this.m22 + this.m21 * this.m02;  double m02=this.m01 * this.m12 - this.m11 * this.m02;  double m10=-this.m10 * this.m22 + this.m20 * this.m12;  double m11=this.m00 * this.m22 - this.m20 * this.m02;  double m12=-this.m00 * this.m12 + this.m10 * this.m02;  double m20=this.m10 * this.m21 - this.m20 * this.m11;  double m21=-this.m00 * this.m21 + this.m20 * this.m01;  double m22=this.m00 * this.m11 - this.m10 * this.m01;  r.x=det * (m00 * b.x + m01 * b.y + m02 * b.z);  r.y=det * (m10 * b.x + m11 * b.y + m12 * b.z);  r.z=det * (m20 * b.x + m21 * b.y + m22 * b.z);  return r;}  }
class C{  public static void openWirelessNetworkSettings(Context context){  if (android.os.Build.VERSION.SDK_INT > 10) {    context.startActivity(new Intent(android.provider.Settings.ACTION_SETTINGS));  } else {    context.startActivity(new Intent(android.provider.Settings.ACTION_WIRELESS_SETTINGS));  }}  }
class C{  public static String join(Iterable<String> paths){  return PATH_JOINER.join(paths);}  }
class C{  public static Aggregate<Map<String,Concept>,Number> sum(String varName){  return new SumAggregate(varName);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_ATTACK_MODE(int value0){  return new SM_SYSTEM_MESSAGE(1200008,calculateNameId(value0));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BackDashATK_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200489,num0,skilltarget,skillname);}  }
class C{  public void sendCrxRequest(HttpUriRequest request,String desiredMessage) throws IOException {  String result;  try (CloseableHttpResponse response=httpClient.execute(request)){    result=EntityUtils.toString(response.getEntity());  }   if (!result.contains(desiredMessage)) {    throw new IOException("crx request failure: " + result + " doesn't contain desired message: "+ desiredMessage);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_MagicCounterATK_INTERVAL_ME_TO_B(int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200531,num0,skilltarget,skillname);}  }
class C{  public PhotosGetAllQueryWithExtended count(Integer value){  return unsafeParam("count",value);}  }
class C{  @Nullable private static ModuleSearchResult containsSourceFile(@NotNull DataNode<ModuleData> moduleInfos,@NotNull File file,boolean selected){  DataNode<AndroidGradleModel> androidProjectNode=find(moduleInfos,ANDROID_MODEL);  if (androidProjectNode != null) {    AndroidGradleModel androidModel=androidProjectNode.getData();    SourceFileContainerInfo result=androidModel.containsSourceFile(file);    if (result != null) {      return new ModuleSearchResult(moduleInfos,result,selected);    }  }  DataNode<JavaProject> javaProjectNode=find(moduleInfos,JAVA_PROJECT);  if (javaProjectNode != null) {    JavaProject javaProject=javaProjectNode.getData();    if (javaProject.containsSourceFile(file)) {      return new ModuleSearchResult(moduleInfos,null,selected);    }  }  return null;}  }
class C{  public static void showOkDialog(final Activity activity,final String title,final String text){  showOkDialog(activity,title,text,null);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  public PhotosEditQuery(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.edit",OkResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);}  }
class C{  void young(){  mYoung=true;}  }
class C{  public AccountSaveProfileInfoQuery status(String value){  return unsafeParam("status",value);}  }
class C{  private boolean isPackageAboveVersion(String packageName,int minVersion){  return PackageUtils.getPackageVersion(mContext,packageName) >= minVersion;}  }
class C{  public static boolean isPrimitiveArray(Class clazz){  Assert.notNull(clazz,"Class must not be null");  return (clazz.isArray() && clazz.getComponentType().isPrimitive());}  }
class C{  @Override public void onPause(){  super.onPause();  mapView.onPause();  stopLocationUpdates();}  }
class C{  public FileWriterWithEncoding(File file,Charset encoding) throws IOException {  this(file,encoding,false);}  }
class C{  public CmpExpr newCmpExpr(Value op1,Value op2){  return new JCmpExpr(op1,op2);}  }
class C{  private void beforeUpdate(DataSupport baseObj,List<Field> supportedFields,ContentValues values) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  putFieldsValue(baseObj,supportedFields,values);  if (!ignoreAssociations) {    putForeignKeyValue(values,baseObj);    for (    String fkName : baseObj.getListToClearSelfFK()) {      values.putNull(fkName);    }  }}  }
class C{  void restoreLocationServicesState(@NonNull ContentResolver contentResolver){  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {    setLocationServicesStatePreKitKat(contentResolver,originalLocationProviders);  } else {    setLocationServicesState(contentResolver,originalLocationMode);  }}  }
class C{  public static void reverse(BlockGraph graph){  for (Iterator<Block> blocksIt=graph.getBlocks().iterator(); blocksIt.hasNext(); ) {    Block block=blocksIt.next();    List<Block> succs=block.getSuccs();    List<Block> preds=block.getPreds();    block.setSuccs(preds);    block.setPreds(succs);  }  List<Block> heads=graph.getHeads();  List<Block> tails=graph.getTails();  graph.mHeads=new ArrayList<Block>(tails);  graph.mTails=new ArrayList<Block>(heads);}  }
class C{  public double observationCount(boolean bOnlyValue){  if (bOnlyValue)   return hDistro.keySet().size(); else {    int iCnt=0;    Iterator iKeyIter=hDistro.keySet().iterator();    while (iKeyIter.hasNext()) {      Object oNextKey=iKeyIter.next();      iCnt+=((Double)hDistro.get(oNextKey));    }    return iCnt;  }}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  @Override public boolean isToTop(){  return toTop;}  }
class C{  public VideoGetQueryWithExtended videos(String... value){  return unsafeParam("videos",value);}  }
class C{  public ReducedAudioInputStream(AudioInputStream ais,float targetSampleRate){  super(ais,ais.getFormat(),ais.getFrameLength());  this.in=ais;  this.sourceFormat=ais.getFormat();  if (sourceFormat.getChannels() != 1 && sourceFormat.getChannels() != 2)   throw new IllegalArgumentException("audio input stream must have one or two channels");  reduceChannels=sourceFormat.getChannels() == 2;  if (sourceFormat.getEncoding() != AudioFormat.Encoding.PCM_SIGNED)   throw new IllegalArgumentException("encoding of audio input stream must be PCM_SIGNED");  if (sourceFormat.getSampleSizeInBits() != 16 && sourceFormat.getSampleSizeInBits() != 24 && sourceFormat.getSampleSizeInBits() != 32)   throw new IllegalArgumentException("sample size in bits of audio input stream must be 16, 24 or 32");  if (sourceFormat.getFrameRate() != sourceFormat.getSampleRate())   throw new IllegalArgumentException("frame rate and sample rate are not equal");  ratio=(int)Math.floor(sourceFormat.getSampleRate() / targetSampleRate);  frameSize=ratio * sourceFormat.getFrameSize();  sampleSize=sourceFormat.getSampleSizeInBits() / 8;  skipSize=frameSize - (sampleSize * sourceFormat.getChannels());  sampleShift=sourceFormat.getSampleSizeInBits() - 16;  if (ratio != format.getFrameRate() / targetSampleRate)   throw new IllegalArgumentException("the sample rate conversion ratio muste be a integer value");  targetFormat=new AudioFormat(sourceFormat.getEncoding(),targetSampleRate,sourceFormat.getSampleSizeInBits(),1,sourceFormat.getSampleSizeInBits() / 8,targetSampleRate,false);  if (ratio == 1 && sampleShift == 0 && sourceFormat.getChannels() == 2)   throw new IllegalArgumentException("using this wrapper is useless, since audio input stream is allready reduced");  inputBuffer=new byte[INITIAL_BUFFER_SIZE * frameSize];  if (sourceFormat.isBigEndian()) {    offsetHigh=0;    offsetLow=1;  } else {    offsetHigh=sampleSize - 1;    offsetLow=sampleSize - 2;  }}  }
class C{  public boolean isStatusBarTintEnabled(){  return mStatusBarTintEnabled;}  }
class C{  public boolean postRotate(float degrees,float px,float py){  double radians=Math.toRadians(degrees);  float sin=(float)Math.sin(radians);  float cos=(float)Math.cos(radians);  Matrix matrix=new Matrix();  matrix.setValues(new float[]{cos,-sin,-px * cos + py * sin + px,sin,cos,-px * sin - py * cos + py,0,0,1});  Matrix current=new Matrix();  current.setValues(MATRIX);  matrix.preConcat(current);  set(matrix);  return true;}  }
class C{  public CommandEvent(String[] args,ICommand command,ICommandSender sender){  this.args=args;  this.command=command;  this.sender=sender;}  }
class C{  public static void writeStringToFile(File file,String data,String encoding,boolean append) throws IOException {  writeStringToFile(file,data,Charsets.toCharset(encoding),append);}  }
class C{  public void decoding(){  int i, j, k, m, stripe;  int rs_nbr=0;  int rs_data_nbr=0;  int rs_check_nbr=0;  int rs_disk1=-1;  int rs_disk2=-1;  int rs_disk3=-1;  if (stripe_unit_size % block_nbr != 0) {    throw new RuntimeException(" Cannot  striping. wrong DATA_LENGTH!");  }  for (i=0; i < data_disk_nbr + 2; i++) {    if (restarts[i] == 1) {      rs_disk1=i;      break;    }  }  if (rs_disk1 != -1) {    for (i=rs_disk1 + 1; i < data_disk_nbr + 2; i++) {      if (restarts[i] == 1) {        rs_disk2=i;        break;      }    }  }  if (rs_disk2 != -1) {    for (i=rs_disk2 + 1; i < data_disk_nbr + 2; i++) {      if (restarts[i] == 1) {        rs_disk3=i;        break;      }    }  }  if (rs_disk1 != -1) {    Arrays.fill(check_data[rs_disk1],(char)0);  }  if (rs_disk2 != -1) {    Arrays.fill(check_data[rs_disk2],(char)0);  }  if (rs_disk3 != -1) {    Arrays.fill(check_data[rs_disk3],(char)0);  }  for (i=0; i <= data_disk_nbr + 2; i++)   rs_nbr+=restarts[i];  if (TOLERENCE < rs_nbr) {    throw new RuntimeException(" Too many error data!");  }  for (i=0; i < data_disk_nbr; i++)   rs_data_nbr+=restarts[i];  rs_check_nbr=rs_nbr - rs_data_nbr;  if (rs_data_nbr == 0) {    if (restarts[data_disk_nbr] == 1)     STAR_encoding_row();    if (restarts[data_disk_nbr + 1] == 1)     STAR_encoding_diag1();    if (restarts[data_disk_nbr + 2] == 1)     STAR_encoding_diag2();  }  if (rs_data_nbr == 1) {    if (rs_check_nbr <= 1) {      Evenodd_decoding(restarts);      if (restarts[data_disk_nbr + 2] == 1)       STAR_encoding_diag2();    }    if (rs_check_nbr == 2) {      if (restarts[data_disk_nbr] == 0) {        for (i=0; i < stripe_unit_size; i++) {          for (j=0; j <= data_disk_nbr; j++) {            if (j != rs_disk1)             check_data[rs_disk1][i]^=check_data[j][i];          }        }        STAR_encoding_diag1();        STAR_encoding_diag2();      }      if (restarts[data_disk_nbr] == 1) {        if (restarts[data_disk_nbr + 2] == 1) {          Evenodd_decoding(restarts);          STAR_encoding_diag2();        }        if (restarts[data_disk_nbr + 1] == 1) {          Evenodd_decoding_1(rs_disk1,rs_disk2);          STAR_encoding_diag1();        }      }    }  }  if (rs_data_nbr == 2) {    if (rs_check_nbr == 0) {      Evenodd_decoding(restarts);    } else {      if (restarts[data_disk_nbr] == 1) {        char[] tmp_for_s1s2;        tmp_for_s1s2=new char[block_size];        for (i=0; i < block_nbr; i++) {          for (j=0; j < block_size; j++) {            tmp_for_s1s2[j]^=check_data[data_disk_nbr + 1][i * block_size + j];            tmp_for_s1s2[j]^=check_data[data_disk_nbr + 2][i * block_size + j];          }        }        char[][] tmp;        tmp=new char[3][p * block_size];        for (i=0; i < stripe_unit_size; i++) {          for (j=0; j <= data_disk_nbr; j++) {            tmp[0][i]^=check_data[j][i];          }        }        for (stripe=0; stripe < block_nbr + 1; stripe++) {          for (i=0; i < data_disk_nbr; i++) {            for (j=0; j < block_size; j++) {              k=(stripe - i + p) % p;              if (k < block_nbr) {                tmp[1][stripe * block_size + j]^=check_data[i][k * block_size + j];              }            }          }        }        for (i=0; i < stripe_unit_size; i++) {          tmp[1][i]^=check_data[data_disk_nbr + 1][i];        }        for (stripe=0; stripe < block_nbr + 1; stripe++) {          for (i=0; i < data_disk_nbr; i++) {            for (j=0; j < block_size; j++) {              k=(stripe + i + p) % p;              if (k < block_nbr) {                tmp[2][stripe * block_size + j]^=check_data[i][k * block_size + j];              }            }          }        }        for (i=0; i < stripe_unit_size; i++) {          tmp[2][i]^=check_data[data_disk_nbr + 2][i];        }        char[][] tmp_for_xor;        tmp_for_xor=new char[p][block_size];        for (i=0; i < block_nbr + 1; i++) {          for (j=0; j < block_size; j++) {            tmp_for_xor[i][j]=(char)(tmp[0][i * block_size + j] ^ tmp[0][((rs_disk2 - rs_disk1 + i) % p) * block_size + j] ^ tmp[1][((rs_disk2 + p + i) % p) * block_size + j]^ tmp[2][((p - rs_disk1 + i) % p) * block_size + j]^ tmp_for_s1s2[j]);          }        }        k=p - 1 - (rs_disk2 - rs_disk1);        for (i=0; i < block_size; i++) {          check_data[data_disk_nbr][k * block_size + i]=tmp_for_xor[k][i];        }        m=block_nbr - 1;        while (0 != m) {          i=(k + rs_disk1 - rs_disk2 + p) % p;          for (j=0; j < block_size; j++) {            check_data[data_disk_nbr][i * block_size + j]=(char)(tmp_for_xor[i][j] ^ check_data[data_disk_nbr][k * block_size + j]);          }          k=i;          m--;        }        restarts[data_disk_nbr]=0;        Evenodd_decoding(restarts);      }    }    if (restarts[data_disk_nbr + 1] == 1) {      Evenodd_decoding_1(rs_disk1,rs_disk2);      STAR_encoding_diag1();    }    if (restarts[data_disk_nbr + 2] == 1) {      Evenodd_decoding(restarts);      STAR_encoding_diag2();    }  }  if (rs_data_nbr == 3) {    int r, s, t, u, v;    char[][] tmp;    tmp=new char[3][p * block_size];    char[] tmp_for_s1;    tmp_for_s1=new char[block_size];    char[] tmp_for_s2;    tmp_for_s2=new char[block_size];    char[][] tmp_for_xor;    tmp_for_xor=new char[p][block_size];    for (i=0; i < block_nbr; i++) {      for (j=0; j < block_size; j++) {        tmp_for_s1[j]^=check_data[data_disk_nbr][i * block_size + j];        tmp_for_s1[j]^=check_data[data_disk_nbr + 1][i * block_size + j];        tmp_for_s2[j]^=check_data[data_disk_nbr][i * block_size + j];        tmp_for_s2[j]^=check_data[data_disk_nbr + 2][i * block_size + j];      }    }    for (i=0; i < stripe_unit_size; i++) {      for (j=0; j <= data_disk_nbr; j++) {        tmp[0][i]^=check_data[j][i];      }    }    for (stripe=0; stripe < block_nbr + 1; stripe++) {      for (i=0; i < data_disk_nbr; i++) {        for (j=0; j < block_size; j++) {          k=(stripe - i + p) % p;          if (k < block_nbr) {            tmp[1][stripe * block_size + j]^=check_data[i][k * block_size + j];          }        }      }    }    for (i=0; i < block_nbr + 1; i++) {      for (j=0; j < block_size; j++) {        if (i < block_nbr)         tmp[1][i * block_size + j]^=(check_data[data_disk_nbr + 1][i * block_size + j] ^ tmp_for_s1[j]); else         tmp[1][i * block_size + j]^=tmp_for_s1[j];      }    }    for (stripe=0; stripe < block_nbr + 1; stripe++) {      for (i=0; i < data_disk_nbr; i++) {        for (j=0; j < block_size; j++) {          k=(stripe + i + p) % p;          if (k < block_nbr) {            tmp[2][stripe * block_size + j]^=check_data[i][k * block_size + j];          }        }      }    }    for (i=0; i < block_nbr + 1; i++) {      for (j=0; j < block_size; j++) {        if (i < block_nbr)         tmp[2][i * block_size + j]^=(check_data[data_disk_nbr + 2][i * block_size + j] ^ tmp_for_s2[j]); else         tmp[2][i * block_size + j]^=tmp_for_s2[j];      }    }    r=rs_disk1;    s=rs_disk2;    t=rs_disk3;    u=s - r;    v=t - s;    if (u == v) {      for (i=0; i < block_nbr + 1; i++) {        for (j=0; j < block_size; j++) {          tmp_for_xor[i][j]=(char)(tmp[0][i * block_size + j] ^ tmp[0][((t - r + i) % p) * block_size + j] ^ tmp[1][((t + p + i) % p) * block_size + j]^ tmp[2][((p - r + i) % p) * block_size + j]);        }      }      k=p - 1 - (t - r);      for (i=0; i < block_size; i++) {        check_data[s][k * block_size + i]=tmp_for_xor[k][i];      }      m=block_nbr - 1;      while (0 != m) {        i=(r - t + k + p) % p;        for (j=0; j < block_size; j++) {          check_data[s][i * block_size + j]=(char)(tmp_for_xor[i][j] ^ check_data[s][k * block_size + j]);        }        k=i;        m--;      }    } else     if (u != v) {      int d;      char[][] flag;      flag=new char[3][p];      for (d=0; d <= p; d++) {        if ((u + v * d) % p == 0) {          break;        }      }      for (i=0; i < d; i++) {        flag[0][(0 + i * v) % p]++;        flag[1][(s - r + i * v) % p]++;        flag[2][(t - r + i * v) % p]++;        flag[2][(0 + i * v) % p]++;        flag[1][(t - s + i * v) % p]++;        flag[0][(t - r + i * v) % p]++;      }      int[] count;      count=new int[p];      for (i=0; i < p; i++) {        for (j=0; j < 3; j++) {          if (flag[j][i] == 1)           count[i]++;        }      }      for (m=0; m < block_nbr + 1; m++) {        for (i=0; i < p; i++) {          if (count[i] == 2 || count[i] == 3) {            for (j=0; j < block_size; j++)             tmp_for_xor[m][j]^=tmp[0][((i + m) % p) * block_size + j];          }        }        for (i=0; i < d; i++) {          for (j=0; j < block_size; j++) {            tmp_for_xor[m][j]^=tmp[1][((t + p + 0+ i * v + m) % p) * block_size + j];            tmp_for_xor[m][j]^=tmp[2][((p - r + 0 + i * v + m) % p) * block_size + j];          }        }      }      i=u - 1;      k=(u + i) % p;      for (j=0; j < block_size; j++) {        check_data[s][k * block_size + j]=tmp_for_xor[i][j];      }      m=block_nbr - 1;      while (0 != m) {        i=(k + u) % p;        for (j=0; j < block_size; j++) {          check_data[s][((u + i) % p) * block_size + j]=(char)(tmp_for_xor[i][j] ^ check_data[s][k * block_size + j]);        }        k=(u + i) % p;        m--;      }    }    restarts[s]=0;    Evenodd_decoding(restarts);  }}  }
class C{  private void removeConsumedPacketsFromPendingPacketsQueue(){  if (_batchConsumedPacketsKeys.isEmpty())   return;  final Iterator<MultiSourceProcessLogPacket> pendingPacketsIterator=_pendingPacketsQueue.iterator();  for (  Long consumedPacketKey : _batchConsumedPacketsKeys) {    if (!pendingPacketsIterator.hasNext())     if (_pendingPacketsQueue.size() < 100 && _batchConsumedPacketsKeys.size() < 100) {      throw new IllegalStateException("Packets were consumed but are missing from pending packets queue [batchConsumedPacketsKeys=" + _batchConsumedPacketsKeys + ", pendingPacketsQueue="+ _pendingPacketsQueue+ "].");    } else {      throw new IllegalStateException("Packets were consumed but are missing from pending packets queue [batchConsumedPacketsKeys size=" + _batchConsumedPacketsKeys.size() + ", pendingPacketsQueue size="+ _pendingPacketsQueue.size()+ "].");    }    boolean packetFound=false;    while (pendingPacketsIterator.hasNext()) {      if (pendingPacketsIterator.next().getKey() == consumedPacketKey) {        pendingPacketsIterator.remove();        packetFound=true;        break;      }    }    if (!packetFound)     if (_pendingPacketsQueue.size() < 100 && _batchConsumedPacketsKeys.size() < 100) {      throw new IllegalStateException("Consumed packet [key=" + consumedPacketKey + "] was not found in pendingPacketsQueue [batchConsumedPacketsKeys="+ _batchConsumedPacketsKeys+ ", pendingPacketsQueue="+ _pendingPacketsQueue+ "].");    } else {      throw new IllegalStateException("Consumed packet [key=" + consumedPacketKey + "] was not found in pendingPacketsQueue [batchConsumedPacketsKeys size="+ _batchConsumedPacketsKeys.size()+ ", pendingPacketsQueue size="+ _pendingPacketsQueue.size()+ "].");    }  }  _batchConsumedPacketsKeys.clear();}  }
class C{  public JmsQueueListener(Delegator delegator,String jndiServer,String jndiName,String queueName,String userName,String password){  super(delegator);  this.jndiServer=jndiServer;  this.jndiName=jndiName;  this.queueName=queueName;  this.userName=userName;  this.password=password;}  }
class C{  public HttpUrl baseUrl(){  return baseUrl;}  }
class C{  public ComparableWeakReference(T referent){  super(referent);}  }
class C{  private void appendChecksum(byte[] raw,int offset,int length){  long chksum=0;  int count=length - 4;  long ecx;  int i;  for (i=offset; i < count; i+=4) {    ecx=raw[i] & 0xff;    ecx|=raw[i + 1] << 8 & 0xff00;    ecx|=raw[i + 2] << 0x10 & 0xff0000;    ecx|=raw[i + 3] << 0x18 & 0xff000000;    chksum^=ecx;  }  ecx=raw[i] & 0xff;  ecx|=raw[i + 1] << 8 & 0xff00;  ecx|=raw[i + 2] << 0x10 & 0xff0000;  ecx|=raw[i + 3] << 0x18 & 0xff000000;  raw[i]=(byte)(chksum & 0xff);  raw[i + 1]=(byte)(chksum >> 0x08 & 0xff);  raw[i + 2]=(byte)(chksum >> 0x10 & 0xff);  raw[i + 3]=(byte)(chksum >> 0x18 & 0xff);}  }
class C{  public Path relativizeWithTargetDirectory(Path path){  return targetDirectoryPath.relativize(path.toAbsolutePath());}  }
class C{  private void askToSaveCurrent() throws CanceledException {  if (ProgramProperties.isUseGUI()) {    if (!doc.getMeganFile().hasDataConnector() && doc.getNumberOfSamples() > 0 && doc.isDirty()) {      getFrame().toFront();      getFrame().setAlwaysOnTop(true);      try {        int result=JOptionPane.showConfirmDialog(getFrame(),"Document has been modified, save before " + (ProjectManager.isQuitting() ? "quitting?" : "closing?"),ProgramProperties.getProgramName() + " - Save Changes?",JOptionPane.YES_NO_CANCEL_OPTION);        if (result == JOptionPane.YES_OPTION) {          Boolean[] canceled=new Boolean[]{false};          getCommandManager().getCommand(SaveCommand.NAME).actionPerformed(new ActionEvent(canceled,0,"askToSave"));          if (canceled[0])           throw new CanceledException();          doc.setDirty(false);        } else         if (result == JOptionPane.NO_OPTION)         doc.setDirty(false); else         if (result == JOptionPane.CANCEL_OPTION) {          throw new CanceledException();        }      }  finally {        getFrame().setAlwaysOnTop(false);      }    }  }}  }
class C{  public static void registerFieldMapper(@NotNull String layoutParamsClassName,@NotNull Function<String,MappedField> mapper){  FIELD_MAPPERS.put(layoutParamsClassName,mapper);}  }
class C{  public boolean populateDirectories(boolean descend){  boolean addedNodes=false;  if (!isRoot || (isRoot && descend)) {    if (populated == false) {      if (interim == true) {        removeAllChildren();        interim=false;      }      List<Path> names=new ArrayList<Path>();      DirectoryStream<Path> stream=null;      try {        Path pathPath=Paths.get(path);        stream=Files.newDirectoryStream(pathPath);      } catch (      AccessDeniedException e) {      }catch (      NotDirectoryException e) {      }catch (      IOException e) {        ConsoleManager.getInstance().exception(this,e);      }      if (stream != null) {        for (        Path path : stream) {          names.add(path.getFileName());        }      }      for (      Path filename : names) {        Path d=Paths.get(path.toString(),filename.toString());        try {          if (Files.isDirectory(d)) {            addFolder(descend,filename.toString());            addedNodes=true;            if (descend == false) {              break;            }          } else           if (Files.isRegularFile(d)) {            if (validFile(filename.toString())) {              addFile(filename.toString());            }          }        } catch (        Throwable t) {        }      }      if (descend == true || addedNodes == false) {        populated=true;        if (isDir() && !fileWatcherSet) {          Path pathPath=Paths.get(path);          FileSystemWatcher.getInstance().addWatch(this,pathPath);          fileWatcherSet=true;        }      } else {        interim=true;      }    }  }  return addedNodes;}  }
class C{  public <R>Plan<R> then(Function7<T1,T2,T3,T4,T5,T6,T7,R> selector){  if (selector == null) {    throw new NullPointerException();  }  return new Plan7<T1,T2,T3,T4,T5,T6,T7,R>(this,selector);}  }
class C{  @Nullable public PsiElement resolveLabel(WorkspacePath packagePath,RuleName ruleName,boolean excludeRules){  File packageDir=resolvePackage(packagePath);  if (packageDir == null) {    return null;  }  if (!excludeRules) {    FuncallExpression target=findRule(packageDir,ruleName);    if (target != null) {      return target;    }  }  File fullFile=new File(packageDir,ruleName.toString());  if (FileAttributeProvider.getInstance().exists(fullFile)) {    return resolveFile(fullFile);  }  return null;}  }
class C{  public int sample(){  double val=this.rand.nextDouble() * this.sum;  int sample=0;  while (sample < this.likelihoods.length) {    val-=this.likelihoods[sample];    if (val < 0) {      return sample;    }    sample++;  }  return this.rand.nextInt(this.likelihoods.length);}  }
class C{  @deprecated public int hashCode(){  int result=0;  int increment=Math.min(3,this.values.length / 16);  for (int i=0; i < this.values.length; i+=increment) {    result=result * 37 + this.values[i];  }  return result;}  }
class C{  public LocalViewDetails(){}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public void draw(Canvas c,Rect bounds){  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mPaint.setColor(mCurrentColor);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);  if (mAlpha < 255) {    mCirclePaint.setColor(mBackgroundColor);    mCirclePaint.setAlpha(255 - mAlpha);    c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OpenAerial_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200923,skilltarget,skillcaster,skillname);}  }
class C{  public Request(Request parent,String name,JSONObject params,StructType type){  this.params=params;  this.type=type;  this.parent=parent;  this.name=name;}  }
class C{  public boolean isProxyAlive(){  return true;}  }
class C{  public boolean useToken(String tokenuid,String ip){  cleanExpiredTokens();  return true;}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  protected void addComponent(XMLComponent component){  if (fComponents.contains(component)) {    return;  }  fComponents.add(component);  addRecognizedParamsAndSetDefaults(component);}  }
class C{  public boolean success(){  return exited() && getExitCode() == 0;}  }
class C{  private CredentialsConfigurator supplyCredentials(Application application,ProxyClient proxyClient){  String displayName=application.getStorage().getCustomProperty(DataSourceDescriptor.PROPERTY_NAME);  if (displayName == null)   displayName=proxyClient.getUrl().toString();  CredentialsConfigurator jsc=CredentialsConfigurator.supplyCredentials(displayName);  if (jsc != null)   proxyClient.setCredentials(jsc.getUsername(),jsc.getPassword());  return jsc;}  }
class C{  public static void showLogin(Fragment fragment,int requestCode){  Intent intent=new Intent(fragment.getActivity(),LoginActivity.class);  fragment.startActivityForResult(intent,requestCode);}  }
class C{  private void fireFrameSaved(int frameNumber){  if (listenerList == null)   return;  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == FrameSavedListener.class) {      ((FrameSavedListener)listeners[i + 1]).frameSaved(frameNumber);    }  }}  }
class C{  public void addGroup(GroupConfig group){  this.groupList.add(group);}  }
class C{  @Override public int hashCode(){  int result=car.hashCode();  result=31 * result + (cdr != null ? cdr.hashCode() : 0);  return result;}  }
class C{  public void loadTableMetadata(TableInfo tableInfo){  CarbonTable carbonTable=tableInfoMap.get(convertToLowerCase(tableInfo.getTableUniqueName()));  if (null == carbonTable || carbonTable.getTableLastUpdatedTime() < tableInfo.getLastUpdatedTime()) {    carbonTable=new CarbonTable();    carbonTable.loadCarbonTable(tableInfo);    tableInfoMap.put(convertToLowerCase(tableInfo.getTableUniqueName()),carbonTable);  }}  }
class C{  public final static double max(double Num1,double Num2){  return (Num1 > Num2) ? Num1 : Num2;}  }
class C{  public WinHttpProxyInfo(Pointer pointer){  super(pointer);  read();}  }
class C{  public <T extends EntityCondition>EntityQuery where(List<T> andConditions){  this.whereEntityCondition=EntityCondition.makeCondition(andConditions);  return this;}  }
class C{  private Haval(int size,int rounds){  super("haval",size,BLOCK_SIZE);  if (size != HAVAL_128_BIT && size != HAVAL_160_BIT && size != HAVAL_192_BIT && size != HAVAL_224_BIT && size != HAVAL_256_BIT) {    throw new IllegalArgumentException("Invalid HAVAL output size");  }  if (rounds != HAVAL_3_ROUND && rounds != HAVAL_4_ROUND && rounds != HAVAL_5_ROUND) {    throw new IllegalArgumentException("Invalid HAVAL number of rounds");  }  this.rounds=rounds;}  }
class C{  public static boolean isAvailable(){  return taxonomyClassification != null;}  }
class C{  public PermissionCollection newPermissionCollection(){  return new AuthenticationPermissionCollection();}  }
class C{  protected boolean isOlderUpdate(final SourceDataTagQuality newSDQuality,final SourceDataTagQuality currentSDQuality,final long newTimestamp,final long currentTimestamp){  this.equipmentLogger.debug("isOlderUpdate - entering isOlderUpdate()");  if (newTimestamp < currentTimestamp) {    this.equipmentLogger.trace("isOlderUpdate - New timestamp is older or equal than current TS (" + newTimestamp + ", "+ currentTimestamp+ ")");    if (currentSDQuality.getQualityCode() == SourceDataTagQualityCode.DATA_UNAVAILABLE) {      if (newSDQuality.isValid()) {        this.equipmentLogger.trace("isOlderUpdate - The current value has DATA_UNAVAILABLE Quality but new value has Good Quality. Not filter");        return false;      } else {        this.equipmentLogger.trace("isOlderUpdate - The current value has DATA_UNAVAILABLE Quality and new value has Bad Quality. Filter out ");        return true;      }    } else {      this.equipmentLogger.trace("isOlderUpdate - The current value quality is different to DATA_UNAVAILABLE. Filter out ");      return true;    }  }  this.equipmentLogger.trace("isOlderUpdate - New timestamp is newer or equal than current TS. Not filter");  return false;}  }
class C{  public MonsterHabitatCursor queryHabitatLocation(long id){  QueryHelper qh=new QueryHelper();  qh.Distinct=true;  qh.Table=S.TABLE_HABITAT;  qh.Columns=null;  qh.Selection=S.COLUMN_HABITAT_LOCATION_ID + " = ?";  qh.SelectionArgs=new String[]{String.valueOf(id)};  qh.GroupBy=null;  qh.Having=null;  qh.OrderBy="m" + S.COLUMN_MONSTERS_SORT_NAME + " ASC";  qh.Limit=null;  return new MonsterHabitatCursor(wrapJoinHelper(builderHabitat(qh.Distinct),qh));}  }
class C{  public final boolean equals(Object oObj){  return Word.equals(((WordDefinition)oObj).Word);}  }
class C{  public Plane translate(final Vector3D translation){  final Plane plane=new Plane(origin.add(translation),w,tolerance);  plane.u=u;  plane.v=v;  return plane;}  }
class C{  public VideoAddToAlbumQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public IntFilePutter(File file,long limit,boolean inMemory) throws IOException {  super(file,4 * limit,inMemory ? Mode.CREATE_READ_WRITE_IN_MEMORY : Mode.CREATE_READ_WRITE);}  }
class C{  public static boolean isXML11Space(int c){  return (c < 0x10000 && (XML11CHARS[c] & MASK_XML11_SPACE) != 0);}  }
class C{  private void cancelRepeatingAlarm(){  Intent requestIntent=createRegisterRequestIntent(this);  PendingIntent pendingIntent=PendingIntent.getService(this,0,requestIntent,PendingIntent.FLAG_NO_CREATE);  if (pendingIntent != null) {    AlarmManager am=(AlarmManager)getSystemService(Context.ALARM_SERVICE);    am.cancel(pendingIntent);    pendingIntent.cancel();  }}  }
class C{  private void openSimulationAction() throws ParserConfigurationException, SAXException, IOException {  JFileChooser fileBrowser=new JFileChooser();  fileBrowser.setDialogTitle(Messages.getString("dialog.open.title"));  fileBrowser.setMultiSelectionEnabled(false);  if (this.directory != null) {    fileBrowser.setCurrentDirectory(this.directory);  }  int option=fileBrowser.showOpenDialog(this);  if (option == JFileChooser.APPROVE_OPTION) {    File file=fileBrowser.getSelectedFile();    if (file.exists() && file.isFile()) {      this.directory=file.getParentFile();      this.currentFileName=file.getName();      option=JOptionPane.showConfirmDialog(this,Messages.getString("dialog.open.warning.text"),MessageFormat.format(Messages.getString("dialog.open.warning.title"),file.getName()),JOptionPane.YES_NO_CANCEL_OPTION);      if (option == JOptionPane.YES_OPTION) {        String name=Simulation.DEFAULT_SIMULATION_NAME;        Simulation simulation=XmlReader.fromXml(file);synchronized (Simulation.LOCK) {          this.simulation=simulation;          name=this.simulation.getWorld().getUserData().toString();          this.pnlSimulation.setSimulation(this.simulation);          this.pnlContacts.setContactCounter(this.simulation.getContactCounter());        }        this.clearAllSnapshots();        this.setTitle(this.getWindowTitle() + " - " + name);        this.setCompiledSimulation(false);      }    } else {      JOptionPane.showMessageDialog(this,Messages.getString("dialog.open.selection.error.text"),Messages.getString("dialog.open.selection.error.title"),JOptionPane.ERROR_MESSAGE);    }  }}  }
class C{  public void createFile(String fileName){  System.out.println("Creating file " + fileName + "...");  try {    BufferedWriter out=new BufferedWriter(new FileWriter(fileName));    LinkedList currentList;    TreeSet currentSet;    Iterator iter=this.clusters.entrySet().iterator();    while (iter.hasNext()) {      Entry entry=(Entry)iter.next();      String name=(String)entry.getKey();      currentList=(LinkedList)entry.getValue();      Iterator iList=currentList.iterator();      while (iList.hasNext()) {        currentSet=(TreeSet)iList.next();        Iterator iSet=currentSet.iterator();        String docCluster="";        while (iSet.hasNext()) {          docCluster=docCluster + (String)iSet.next() + " ";        }        docCluster=docCluster + "# " + name;        out.write(docCluster + "\n");      }    }    out.close();    System.out.println("File created.");  } catch (  IOException ex) {    ex.printStackTrace();  }}  }
class C{  public AppsGetLeaderboardQuery global(Boolean value){  return unsafeParam("global",value);}  }
class C{  private void addCasting(InsertQueryExecutor insertQueryExecutor,Relation relation,VarAdmin.Casting casting){  VarAdmin roleVar=casting.getRoleType().orElseThrow(null);  RoleType roleType=insertQueryExecutor.getConcept(roleVar).asRoleType();  Instance roleplayer=insertQueryExecutor.getConcept(casting.getRolePlayer()).asInstance();  relation.putRolePlayer(roleType,roleplayer);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_OneTimeBoostSkillAttack_A_TO_ME(String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200691,skillcaster,skillname);}  }
class C{  protected void reconcileDefaultAttributes(){  if (attributes != null) {    NamedNodeMapImpl defaults=getDefaultAttributes();    attributes.reconcileDefaults(defaults);  }}  }
class C{  private static Map<String,Object> storePaymentApplication(Delegator delegator,GenericValue paymentApplication,Locale locale){  Map<String,Object> results=ServiceUtil.returnSuccess(UtilProperties.getMessage(resource,"AccountingSuccessful",locale));  boolean debug=true;  if (debug)   Debug.logInfo("Start updating the paymentApplication table ",module);  if (DECIMALS == -1 || ROUNDING == -1) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"AccountingAritmeticPropertiesNotConfigured",locale));  }  List<GenericValue> checkAppls=null;  try {    checkAppls=EntityQuery.use(delegator).from("PaymentApplication").where("invoiceId",paymentApplication.get("invoiceId"),"invoiceItemSeqId",paymentApplication.get("invoiceItemSeqId"),"billingAccountId",paymentApplication.get("billingAccountId"),"paymentId",paymentApplication.get("paymentId"),"toPaymentId",paymentApplication.get("toPaymentId"),"taxAuthGeoId",paymentApplication.get("taxAuthGeoId")).queryList();  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(e.getMessage());  }  if (checkAppls.size() > 0) {    if (debug)     Debug.logInfo(checkAppls.size() + " records already exist",module);    GenericValue checkAppl=checkAppls.get(0);    if (paymentApplication.get("paymentApplicationId") == null) {      checkAppl.set("amountApplied",paymentApplication.getBigDecimal("amountApplied").add(checkAppl.getBigDecimal("amountApplied")).setScale(DECIMALS,ROUNDING));      if (debug)       Debug.logInfo("Update paymentApplication record: " + checkAppl.getString("paymentApplicationId") + " with appliedAmount:"+ checkAppl.getBigDecimal("amountApplied"),module);      try {        checkAppl.store();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    } else     if (paymentApplication.getString("paymentApplicationId").equals(checkAppl.getString("paymentApplicationId"))) {      checkAppl.set("amountApplied",paymentApplication.getBigDecimal("amountApplied"));      if (debug)       Debug.logInfo("Update paymentApplication record: " + checkAppl.getString("paymentApplicationId") + " with appliedAmount:"+ checkAppl.getBigDecimal("amountApplied"),module);      try {        checkAppl.store();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    } else {      checkAppl.set("amountApplied",paymentApplication.getBigDecimal("amountApplied").add(checkAppl.getBigDecimal("amountApplied")).setScale(DECIMALS,ROUNDING));      if (debug)       Debug.logInfo("Delete paymentApplication record: " + paymentApplication.getString("paymentApplicationId") + " with appliedAmount:"+ paymentApplication.getBigDecimal("amountApplied"),module);      try {        paymentApplication.remove();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }      if (debug)       Debug.logInfo("Update paymentApplication record: " + checkAppl.getString("paymentApplicationId") + " with appliedAmount:"+ checkAppl.getBigDecimal("amountApplied"),module);      try {        checkAppl.store();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    }  } else {    if (debug)     Debug.logInfo("No records found with paymentId,invoiceid..etc probaly changed one of them...",module);    if (paymentApplication.get("paymentApplicationId") == null) {      paymentApplication.set("paymentApplicationId",delegator.getNextSeqId("PaymentApplication"));      if (debug)       Debug.logInfo("Create new paymentAppication record: " + paymentApplication.getString("paymentApplicationId") + " with appliedAmount:"+ paymentApplication.getBigDecimal("amountApplied"),module);      try {        paymentApplication.create();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    } else {      if (debug)       Debug.logInfo("Update existing paymentApplication record: " + paymentApplication.getString("paymentApplicationId") + " with appliedAmount:"+ paymentApplication.getBigDecimal("amountApplied"),module);      try {        paymentApplication.store();      } catch (      GenericEntityException e) {        return ServiceUtil.returnError(e.getMessage());      }    }  }  return results;}  }
class C{  public String lastError(){  try {    return response.jsonPath().get("error.message");  } catch (  IllegalArgumentException|JsonPathException e) {    return "";  }}  }
class C{  private static String preencode(String contents){  int length=contents.length();  if (length == 11) {    int sum=0;    for (int i=0; i < 11; ++i) {      sum+=(contents.charAt(i) - '0') * (i % 2 == 0 ? 3 : 1);    }    contents+=(1000 - sum) % 10;  } else   if (length != 12) {    throw new IllegalArgumentException("Requested contents should be 11 or 12 digits long, but got " + contents.length());  }  return '0' + contents;}  }
class C{  public boolean nextBoolean(float probability){  int y;  if (probability < 0.0f || probability > 1.0f)   throw new IllegalArgumentException("probability must be between 0.0 and 1.0 inclusive.");  if (probability == 0.0f)   return false; else   if (probability == 1.0f)   return true;  if (mti >= N) {    int kk;    final int[] mt=this.mt;    final int[] mag01=this.mag01;    for (kk=0; kk < N - M; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];    }    for (; kk < N - 1; kk++) {      y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);      mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];    }    y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);    mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];    mti=0;  }  y=mt[mti++];  y^=y >>> 11;  y^=(y << 7) & TEMPERING_MASK_B;  y^=(y << 15) & TEMPERING_MASK_C;  y^=(y >>> 18);  return (y >>> 8) / ((float)(1 << 24)) < probability;}  }
class C{  public boolean filterOut(final SAMRecord record){  if (include) {    if (record.getReadPairedFlag()) {      return false;    }  } else {    if (!record.getReadPairedFlag()) {      return false;    }  }  return true;}  }
class C{  private double brent(double lo,double hi,double fLo,double fHi){  double a=lo;  double fa=fLo;  double b=hi;  double fb=fHi;  double c=a;  double fc=fa;  double d=b - a;  double e=d;  final double t=getAbsoluteAccuracy();  final double eps=getRelativeAccuracy();  while (true) {    if (FastMath.abs(fc) < FastMath.abs(fb)) {      a=b;      b=c;      c=a;      fa=fb;      fb=fc;      fc=fa;    }    final double tol=2 * eps * FastMath.abs(b) + t;    final double m=0.5 * (c - b);    if (FastMath.abs(m) <= tol || Precision.equals(fb,0)) {      return b;    }    if (FastMath.abs(e) < tol || FastMath.abs(fa) <= FastMath.abs(fb)) {      d=m;      e=d;    } else {      double s=fb / fa;      double p;      double q;      if (a == c) {        p=2 * m * s;        q=1 - s;      } else {        q=fa / fc;        final double r=fb / fc;        p=s * (2 * m * q* (q - r) - (b - a) * (r - 1));        q=(q - 1) * (r - 1) * (s - 1);      }      if (p > 0) {        q=-q;      } else {        p=-p;      }      s=e;      e=d;      if (p >= 1.5 * m * q - FastMath.abs(tol * q) || p >= FastMath.abs(0.5 * s * q)) {        d=m;        e=d;      } else {        d=p / q;      }    }    a=b;    fa=fb;    if (FastMath.abs(d) > tol) {      b+=d;    } else     if (m > 0) {      b+=tol;    } else {      b-=tol;    }    fb=computeObjectiveValue(b);    if ((fb > 0 && fc > 0) || (fb <= 0 && fc <= 0)) {      c=a;      fc=fa;      d=b - a;      e=d;    }  }}  }
class C{  public void addControlListener(Control cl){  m_controls.add(cl);}  }
class C{  public InactivityConversationCanceller(Plugin plugin,int timeoutSeconds){  this.plugin=plugin;  this.timeoutSeconds=timeoutSeconds;}  }
class C{  public static Stream<LongSummaryStatistics> shiftingWindowSummarizingLong(LongStream longStream,int rollingFactor){  Objects.requireNonNull(longStream);  RollingOfLongSpliterator ofLongSpliterator=RollingOfLongSpliterator.of(longStream.spliterator(),rollingFactor);  return StreamSupport.stream(ofLongSpliterator,longStream.isParallel()).onClose(null).map(null);}  }
class C{  static <T>AnyVal<Object> anyHeadAnyTail(AnyVal<T> head,AnyVal<? extends List<? extends T>> tail){  return new AnyConsImpl(null,head,null,tail);}  }
class C{  @deprecated public char elementAt(char index){  int ix=(this.indices[(index >> '\005')] & 0xFFFF) + (index & 0x1F);  return ix >= this.values.length ? this.defaultValue : this.values[ix];}  }
class C{  public void addToClassification(Integer classId,int size,List<Long> positions) throws IOException {  numberOfClasses++;  classificationIndexTmpFileWriter.writeInt(classId);  if (size == positions.size())   classificationIndexTmpFileWriter.writeInt(size); else {    classificationIndexTmpFileWriter.writeInt(-size);    classificationIndexTmpFileWriter.writeInt(positions.size());  }  if (positions.size() > 0) {    classificationIndexTmpFileWriter.writeLong(io.getPosition());    for (    Long pos : positions) {      io.writeLong(pos);    }  } else {    classificationIndexTmpFileWriter.writeLong(-1);  }}  }
class C{  @Override public void write(int idx){}  }
class C{  public FloatBuffer toFloatBuffer(){  FloatBuffer fb=BufferUtils.createFloatBuffer(9);  fb.put(m00).put(m01).put(m02);  fb.put(m10).put(m11).put(m12);  fb.put(m20).put(m21).put(m22);  fb.rewind();  return fb;}  }
class C{  private static int calculateInSampleSizeByReqestedSize(int width,int height,int reqWidth,int reqHeight){  int inSampleSize=1;  if (height > reqHeight || width > reqWidth) {    while ((height / 2 / inSampleSize) > reqHeight && (width / 2 / inSampleSize) > reqWidth) {      inSampleSize*=2;    }  }  return inSampleSize;}  }
class C{  public Iterator<Record> execute() throws QueryPlanException, DatabaseException {  List<Record> newRecords=new ArrayList<Record>();  Iterator<Record> leftIterator=this.leftSource.execute();  while (leftIterator.hasNext()) {    Record leftRecord=leftIterator.next();    Iterator<Record> rightIterator=this.rightSource.execute();    while (rightIterator.hasNext()) {      Record rightRecord=rightIterator.next();      DataType leftJoinValue=leftRecord.getValues().get(this.leftColumnIndex);      DataType rightJoinValue=rightRecord.getValues().get(this.rightColumnIndex);      if (leftJoinValue.equals(rightJoinValue)) {        List<DataType> leftValues=new ArrayList<DataType>(leftRecord.getValues());        List<DataType> rightValues=new ArrayList<DataType>(rightRecord.getValues());        leftValues.addAll(rightValues);        newRecords.add(new Record(leftValues));      }    }  }  return newRecords.iterator();}  }
class C{  public FreeTTS(){  VoiceManager voiceManager=VoiceManager.getInstance();  voiceManager.getVoice("kevin16");}  }
class C{  public static Zmat nzmat(int m,int n) throws JampackException {  Zmat zm=new Zmat(m,n);  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      zm.re[i][j]=R.nextGaussian();      zm.im[i][j]=R.nextGaussian();    }  }  return zm;}  }
class C{  public IMethod findOverriddenMethodInType(IType overriddenType,IMethod overriding) throws JavaModelException {  int flags=overriding.getFlags();  if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overriding.isConstructor())   return null;  IMethod[] overriddenMethods=overriddenType.getMethods();  for (int i=0; i < overriddenMethods.length; i++) {    IMethod overridden=overriddenMethods[i];    flags=overridden.getFlags();    if (Flags.isPrivate(flags) || Flags.isStatic(flags) || overridden.isConstructor())     continue;    if (isSubsignature(overriding,overridden)) {      return overridden;    }  }  return null;}  }
class C{  public static String readFileToString(File file) throws IOException {  return readFileToString(file,Charset.defaultCharset());}  }
class C{  @NotNull public static List<AttributeSnapshot> createAttributesForTag(@NotNull XmlTag tag){  XmlAttribute[] psiAttributes=tag.getAttributes();  List<AttributeSnapshot> attributes=Lists.newArrayListWithExpectedSize(psiAttributes.length);  for (  XmlAttribute psiAttribute : psiAttributes) {    AttributeSnapshot attribute=createAttributeSnapshot(psiAttribute);    if (attribute != null) {      attributes.add(attribute);    }  }  return attributes;}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  LPCResult lpcResult;  int pitchmarks=0;  int uttSize=0;  int unitEntry;  int unitStart;  int unitEnd;  SampleSet sts=(SampleSet)utterance.getObject("sts_list");  lpcResult=new LPCResult();  for (Item unit=utterance.getRelation(Relation.UNIT).getHead(); unit != null; unit=unit.getNext()) {    unitEntry=unit.getFeatures().getInt("unit_entry");    unitStart=unit.getFeatures().getInt("unit_start");    unitEnd=unit.getFeatures().getInt("unit_end");    uttSize+=sts.getUnitSize(unitStart,unitEnd);    pitchmarks+=unitEnd - unitStart;    unit.getFeatures().setInt("target_end",uttSize);  }  lpcResult.resizeFrames(pitchmarks);  pitchmarks=0;  uttSize=0;  int[] targetTimes=lpcResult.getTimes();  for (Item unit=utterance.getRelation(Relation.UNIT).getHead(); unit != null; unit=unit.getNext()) {    unitEntry=unit.getFeatures().getInt("unit_entry");    unitStart=unit.getFeatures().getInt("unit_start");    unitEnd=unit.getFeatures().getInt("unit_end");    for (int i=unitStart; i < unitEnd; i++, pitchmarks++) {      uttSize+=sts.getSample(i).getResidualSize();      targetTimes[pitchmarks]=uttSize;    }  }  utterance.setObject("target_lpcres",lpcResult);}  }
class C{  public static SLDEditor createAndShowGUI(String filename,List<String> extensionArgList,boolean underTest){  underTestFlag=underTest;  frame=new JFrame(generateApplicationTitleString());  Controller.getInstance().setFrame(frame);  MapRender.setUnderTest(underTest);  frame.setDefaultCloseOperation(underTest ? JFrame.DISPOSE_ON_CLOSE : JFrame.EXIT_ON_CLOSE);  SLDEditor sldEditor=new SLDEditor(filename,extensionArgList);  frame.pack();  frame.setVisible(true);  return sldEditor;}  }
class C{  public ChangeSet increment(String path,double delta){  return add(new IncrementSpaceEntryMutator(path,delta));}  }
class C{  @RequestMapping(value="/{bookmarkId}",method=RequestMethod.DELETE) public ResponseEntity<Bookmark> deleteBookmark(@PathVariable(value="username") String username,@PathVariable(value="bookmarkId") int bookmarkId) throws BookmarkNotFoundException {  Optional<Bookmark> optional=bookmarksRepository.findByIdAndUserUsername(bookmarkId,username);  if (optional.isPresent()) {    bookmarksRepository.delete(optional.get());    return new ResponseEntity<>(optional.get(),HttpStatus.OK);  } else {    throw new BookmarkNotFoundException("Bookmark not found. id = " + bookmarkId);  }}  }
class C{  public void finalize(){  NDC.remove();}  }
class C{  private final boolean validateClientPacket(ByteBuffer buf){  return buf.getShort(0) == ~buf.getShort(3) && buf.get(2) == staticClientPacketCode;}  }
class C{  public void load(String fileName) throws IOException, MaryConfigurationException {  DataInputStream dis=null;  try {    dis=new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)));  } catch (  FileNotFoundException e) {    throw new RuntimeException("File [" + fileName + "] was not found.");  }  try {    hdr=new MaryHeader(dis);    if (hdr.getType() != MaryHeader.LISTENERUNITS) {      throw new RuntimeException("File [" + fileName + "] is not a valid Mary Units file.");    }    numberOfUnits=dis.readInt();    if (numberOfUnits < 0) {      throw new RuntimeException("File [" + fileName + "] has a negative number of units. Aborting.");    }    sampleRate=dis.readInt();    if (sampleRate < 0) {      throw new RuntimeException("File [" + fileName + "] has a negative number sample rate. Aborting.");    }    backchannelUnits=new VocalizationUnit[numberOfUnits];    for (int i=0; i < numberOfUnits; i++) {      int noOfUnits=dis.readInt();      Unit[] units=new Unit[noOfUnits];      String[] unitNames=new String[noOfUnits];      for (int j=0; j < noOfUnits; j++) {        long startTime=dis.readLong();        int duration=dis.readInt();        units[j]=new Unit(startTime,duration,j);        int charArraySize=dis.readInt();        char[] phoneChar=new char[charArraySize];        for (int k=0; k < charArraySize; k++) {          phoneChar[k]=dis.readChar();        }        unitNames[j]=new String(phoneChar);      }      long startBCTime=units[0].startTime;      int bcDuration=(((int)units[noOfUnits - 1].startTime + units[noOfUnits - 1].duration) - (int)units[0].startTime);      backchannelUnits[i]=new VocalizationUnit(startBCTime,bcDuration,i);      backchannelUnits[i].setUnits(units);      backchannelUnits[i].setUnitNames(unitNames);    }  } catch (  IOException e) {    throw new RuntimeException("Reading the Mary header from file [" + fileName + "] failed.",e);  }}  }
class C{  private void archiveReport(String configId,String xmlReport){  new File(reportDirectory).mkdirs();  try {    File outFile=new File(reportDirectory,"report_" + configId + "_"+ System.currentTimeMillis()+ ".xml");    FileWriter fileWriter;    fileWriter=new FileWriter(outFile);    BufferedWriter bufferedWriter=new BufferedWriter(fileWriter);    bufferedWriter.write(xmlReport);    bufferedWriter.close();  } catch (  Exception e) {    log.error("Exception caught while writing configuration report to directory: {}",reportDirectory,e);  }}  }
class C{  protected void prepareRollUpTable() throws SQLException {  String experimentId=experiment.id.replace("-","").toUpperCase();  String queryImpressionGroupByRedAndQAForTomorrow="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_impression where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' and bucket_label = '"+ RED+ "' and context = '"+ QA+ "'";  int[] countImpressionRedQATomorrow=getUserAndDistinctUserCount(connection,queryImpressionGroupByRedAndQAForTomorrow);  String queryActionGroupByRedAndQAForTomorrow="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_action where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' and bucket_label = '"+ RED+ "' and context = '"+ QA+ "'";  int[] countActionRedQATomorrow=getUserAndDistinctUserCount(connection,queryActionGroupByRedAndQAForTomorrow);  String queryImpressionGroupByBlueAndQAForTomorrow="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_impression where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' and bucket_label = '"+ BLUE+ "' and context = '"+ QA+ "'";  int[] countImpressionBlueQATomorrow=getUserAndDistinctUserCount(connection,queryImpressionGroupByBlueAndQAForTomorrow);  String queryActionGroupByBlueAndQAForTomorrow="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_action where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' and bucket_label = '"+ BLUE+ "' and context = '"+ QA+ "'";  int[] countActionBlueQATomorrow=getUserAndDistinctUserCount(connection,queryActionGroupByBlueAndQAForTomorrow);  String queryImpressionGroupByRedAndProdForTomorrow="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_impression where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' and bucket_label = '"+ RED+ "' and context = '"+ PROD+ "'";  int[] countImpressionRedProdTomorrow=getUserAndDistinctUserCount(connection,queryImpressionGroupByRedAndProdForTomorrow);  String queryActionGroupByRedAndProdForTomorrow="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_action where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' and bucket_label = '"+ RED+ "' and context = '"+ PROD+ "'";  int[] countActionRedProdTomorrow=getUserAndDistinctUserCount(connection,queryActionGroupByRedAndProdForTomorrow);  String queryImpressionGroupByBlueAndProdForTomorrow="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_impression where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' and bucket_label = '"+ BLUE+ "' and context = '"+ PROD+ "'";  int[] countImpressionBlueProdTomorrow=getUserAndDistinctUserCount(connection,queryImpressionGroupByBlueAndProdForTomorrow);  String queryActionGroupByBlueAndProdForTomorrow="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_action where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' and bucket_label = '"+ BLUE+ "' and context = '"+ PROD+ "'";  int[] countActionBlueProdTomorrow=getUserAndDistinctUserCount(connection,queryActionGroupByBlueAndProdForTomorrow);  String day=tomorrow.substring(0,10);  String rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "impression_count, impression_user_count, "+ "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',0,'"+ RED+ "','',"+ (countImpressionRedQATomorrow[0])+ ","+ (countImpressionRedQATomorrow[1])+ ","+ (countActionRedQATomorrow[0])+ ","+ (countActionRedQATomorrow[1])+ ",'"+ QA+ "')";  insertIntoRollUp(rollUpQuery);  rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "impression_count, impression_user_count, "+ "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',0,'"+ BLUE+ "','',"+ (countImpressionBlueQATomorrow[0])+ ","+ (countImpressionBlueQATomorrow[1])+ ","+ (countActionBlueQATomorrow[0])+ ","+ (countActionBlueQATomorrow[1])+ ",'"+ QA+ "')";  insertIntoRollUp(rollUpQuery);  rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "impression_count, impression_user_count, "+ "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',0,'"+ BLUE+ "','',"+ (countImpressionBlueProdTomorrow[0])+ ","+ (countImpressionBlueProdTomorrow[1])+ ","+ (countActionBlueProdTomorrow[0])+ ","+ (countActionBlueProdTomorrow[1])+ ",'"+ PROD+ "')";  insertIntoRollUp(rollUpQuery);  rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "impression_count, impression_user_count, "+ "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',0,'"+ RED+ "','',"+ (countImpressionRedProdTomorrow[0])+ ","+ (countImpressionRedProdTomorrow[1])+ ","+ (countActionRedProdTomorrow[0])+ ","+ (countActionRedProdTomorrow[1])+ ",'"+ PROD+ "')";  insertIntoRollUp(rollUpQuery);  String queryActionByBucketActionContext="SELECT bucket_label, action, context, COUNT(user_id) as user_count, " + " COUNT(DISTINCT user_id) as distinct_user_count " + " FROM event_action where hex(experiment_id) = '" + experimentId + "' and timestamp = '"+ this.tomorrow+ "' GROUP BY bucket_label, action ";  try (Statement statementActionByBucketActionContext=connection.createStatement();ResultSet resultActionByBucketActionContext=statementActionByBucketActionContext.executeQuery(queryActionByBucketActionContext)){    while (resultActionByBucketActionContext.next()) {      String bucket=resultActionByBucketActionContext.getString(BUCKET_LABEL);      String action=resultActionByBucketActionContext.getString(ACTION);      String context=resultActionByBucketActionContext.getString(CONTEXT);      int userCount=resultActionByBucketActionContext.getInt(USER_COUNT);      int distinctUserCount=resultActionByBucketActionContext.getInt(DISTINCT_USER_COUNT);      rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',0,'"+ bucket+ "','"+ action+ "',"+ userCount+ ","+ distinctUserCount+ ",'"+ context+ "')";      insertIntoRollUp(rollUpQuery);    }  }   String queryImpressionGroupByRedAndQAForTomorrowCumulative="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_impression where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' and bucket_label = '"+ RED+ "' and context = '"+ QA+ "'";  int[] countImpressionRedQATomorrowCumulative=getUserAndDistinctUserCount(connection,queryImpressionGroupByRedAndQAForTomorrowCumulative);  String queryActionGroupByRedAndQAForTomorrowCumulative="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_action where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' and bucket_label = '"+ RED+ "' and context = '"+ QA+ "'";  int[] countActionRedQATomorrowCumulative=getUserAndDistinctUserCount(connection,queryActionGroupByRedAndQAForTomorrowCumulative);  String queryImpressionGroupByBlueAndQAForTomorrowCumulative="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_impression where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' and bucket_label = '"+ BLUE+ "' and context = '"+ QA+ "'";  int[] countImpressionBlueQATomorrowCumulative=getUserAndDistinctUserCount(connection,queryImpressionGroupByBlueAndQAForTomorrowCumulative);  String queryActionGroupByBlueAndQAForTomorrowCumulative="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_action where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' and bucket_label = '"+ BLUE+ "' and context = '"+ QA+ "'";  int[] countActionBlueQATomorrowCumulative=getUserAndDistinctUserCount(connection,queryActionGroupByBlueAndQAForTomorrowCumulative);  String queryImpressionGroupByRedAndProdForTomorrowCumulative="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_impression where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' and bucket_label = '"+ RED+ "' and context = '"+ PROD+ "'";  int[] countImpressionRedProdTomorrowCumulative=getUserAndDistinctUserCount(connection,queryImpressionGroupByRedAndProdForTomorrowCumulative);  String queryActionGroupByRedAndProdForTomorrowCumulative="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_action where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' and bucket_label = '"+ RED+ "' and context = '"+ PROD+ "'";  int[] countActionRedProdTomorrowCumulative=getUserAndDistinctUserCount(connection,queryActionGroupByRedAndProdForTomorrowCumulative);  String queryImpressionGroupByBlueAndProdForTomorrowCumulative="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_impression where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' and bucket_label = '"+ BLUE+ "' and context = '"+ PROD+ "'";  int[] countImpressionBlueProdTomorrowCumulative=getUserAndDistinctUserCount(connection,queryImpressionGroupByBlueAndProdForTomorrowCumulative);  String queryActionGroupByBlueAndProdForTomorrowCumulative="Select " + "count(user_id) as user_count, count(distinct user_id) as distinct_user_count  " + "from event_action where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' and bucket_label = '"+ BLUE+ "' and context = '"+ PROD+ "'";  int[] countActionBlueProdTomorrowCumulative=getUserAndDistinctUserCount(connection,queryActionGroupByBlueAndProdForTomorrowCumulative);  rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "impression_count, impression_user_count, "+ "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',1,'"+ RED+ "','',"+ (countImpressionRedQATomorrowCumulative[0])+ ","+ (countImpressionRedQATomorrowCumulative[1])+ ","+ (countActionRedQATomorrowCumulative[0])+ ","+ (countActionRedQATomorrowCumulative[1])+ ",'"+ QA+ "')";  insertIntoRollUp(rollUpQuery);  rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "impression_count, impression_user_count, "+ "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',1,'"+ BLUE+ "','',"+ (countImpressionBlueQATomorrowCumulative[0])+ ","+ (countImpressionBlueQATomorrowCumulative[1])+ ","+ (countActionBlueQATomorrowCumulative[0])+ ","+ (countActionBlueQATomorrowCumulative[1])+ ",'"+ QA+ "')";  insertIntoRollUp(rollUpQuery);  rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "impression_count, impression_user_count, "+ "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',1,'"+ BLUE+ "','',"+ (countImpressionBlueProdTomorrowCumulative[0])+ ","+ (countImpressionBlueProdTomorrowCumulative[1])+ ","+ (countActionBlueProdTomorrowCumulative[0])+ ","+ (countActionBlueProdTomorrowCumulative[1])+ ",'"+ PROD+ "')";  insertIntoRollUp(rollUpQuery);  rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "impression_count, impression_user_count, "+ "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',1,'"+ RED+ "','',"+ (countImpressionRedProdTomorrowCumulative[0])+ ","+ (countImpressionRedProdTomorrowCumulative[1])+ ","+ (countActionRedProdTomorrowCumulative[0])+ ","+ (countActionRedProdTomorrowCumulative[1])+ ",'"+ PROD+ "')";  insertIntoRollUp(rollUpQuery);  String queryActionByBucketActionContextCumulative="SELECT bucket_label, action, context, COUNT(user_id) as user_count, " + " COUNT(DISTINCT user_id) as distinct_user_count " + " FROM event_action where hex(experiment_id) = '" + experimentId + "' and timestamp <= '"+ this.tomorrow+ "' GROUP BY bucket_label, action ";  try (Statement statementActionByBucketActionContextCumulative=connection.createStatement();ResultSet resultActionByBucketActionContextCumulative=statementActionByBucketActionContextCumulative.executeQuery(queryActionByBucketActionContextCumulative)){    while (resultActionByBucketActionContextCumulative.next()) {      String bucket=resultActionByBucketActionContextCumulative.getString(BUCKET_LABEL);      String action=resultActionByBucketActionContextCumulative.getString(ACTION);      String context=resultActionByBucketActionContextCumulative.getString(CONTEXT);      int userCount=resultActionByBucketActionContextCumulative.getInt(USER_COUNT);      int distinctUserCount=resultActionByBucketActionContextCumulative.getInt(DISTINCT_USER_COUNT);      rollUpQuery="REPLACE INTO experiment_rollup " + "(experiment_id, day, cumulative, bucket_label, action, " + "action_count, action_user_count,context) "+ "values(unhex('" + experimentId + "'),'"+ day+ "',1,'"+ bucket+ "','"+ action+ "',"+ userCount+ ","+ distinctUserCount+ ",'"+ context+ "')";      insertIntoRollUp(rollUpQuery);    }  } }  }
class C{  private static void readReceiverNodeId(IonReader reader,IapMessageFields iapMessageFields){  if (reader.fieldType == IonFieldTypes.KEY_SHORT) {    if (isReceiverNodeIdKey(reader)) {      reader.nextParse();      if (reader.fieldType == IonFieldTypes.BYTES) {        iapMessageFields.receiverNodeIdOffset=reader.index;        iapMessageFields.receiverNodeIdLength=reader.fieldLength;      }      reader.nextParse();    }  }}  }
class C{  @Override public void onValueSelected(int pickerIndex,int newValue,boolean autoAdvance){  if (pickerIndex == HOUR_INDEX) {    setHour(newValue,false);    String announcement=String.format("%d",newValue);    if (mAllowAutoAdvance && autoAdvance) {      setCurrentItemShowing(MINUTE_INDEX,true,true,false);      announcement+=". " + mSelectMinutes;    } else {      mTimePicker.setContentDescription(mHourPickerDescription + ": " + newValue);    }    Utils.tryAccessibilityAnnounce(mTimePicker,announcement);  } else   if (pickerIndex == MINUTE_INDEX) {    setMinute(newValue);    mTimePicker.setContentDescription(mMinutePickerDescription + ": " + newValue);  } else   if (pickerIndex == HALF_DAY_INDEX) {    updateHalfDay(newValue);  } else   if (pickerIndex == ENABLE_PICKER_INDEX) {    if (!isTypedTimeFullyLegal()) {      mTypedTimes.clear();    }    finishKbMode(true);  }}  }
class C{  public static void writeLines(File file,String encoding,Collection<?> lines,String lineEnding) throws IOException {  writeLines(file,encoding,lines,lineEnding,false);}  }
class C{  public void init$Children(){  children=new ASTNode[2];}  }
class C{  public static ExpectedCondition<Boolean> expandSection(final WebElement section){  return null;}  }
class C{  private void internal_readConfigFile(VendorOptionFactoryInterface vendorOptionFactory,Class<?> panelId,UpdateSymbolInterface parent,String filename,boolean useScrollFrame,boolean isRasterSymbol){  ReadPanelConfig readConfig=new ReadPanelConfig(vendorOptionFactory,isRasterSymbol);  readConfig.read(panelId,filename);  configureUI(parent,useScrollFrame,readConfig);}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public static java.util.Date toDate(String dateTime){  if (dateTime == null) {    return null;  }  String date=dateTime.substring(0,dateTime.indexOf(" "));  String time=dateTime.substring(dateTime.indexOf(" ") + 1);  return toDate(date,time);}  }
class C{  public boolean isEdgeUnit(){  return duration == -1;}  }
class C{  private void blockCompressAndIndex(String in,String bgzfOut,boolean deleteOnExit) throws IOException {  File inFile=new File(in);  File outFile=new File(bgzfOut);  LineIterator lin=IOUtils.openURIForLineIterator(inFile.getAbsolutePath());  BlockCompressedOutputStream writer=new BlockCompressedOutputStream(outFile);  long filePosition=writer.getFilePointer();  TabixIndexCreator indexCreator=new TabixIndexCreator(TabixFormat.BED);  BedLineCodec bedCodec=new BedLineCodec();  while (lin.hasNext()) {    String line=lin.next();    BedLine bed=bedCodec.decode(line);    if (bed == null)     continue;    writer.write(line.getBytes());    writer.write('\n');    indexCreator.addFeature(bed,filePosition);    filePosition=writer.getFilePointer();  }  writer.flush();  File tbi=new File(bgzfOut + TabixUtils.STANDARD_INDEX_EXTENSION);  if (tbi.exists() && tbi.isFile()) {    writer.close();    throw new RuntimeException("Index file exists: " + tbi);  }  Index index=indexCreator.finalizeIndex(writer.getFilePointer());  index.writeBasedOnFeatureFile(outFile);  writer.close();  if (deleteOnExit) {    outFile.deleteOnExit();    File idx=new File(outFile.getAbsolutePath() + TabixUtils.STANDARD_INDEX_EXTENSION);    idx.deleteOnExit();  }}  }
class C{  public VideoCreateCommentQuery createComment(UserActor actor,int videoId){  return new VideoCreateCommentQuery(getClient(),actor,videoId);}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {}  }
class C{  public static Document parseDocument(InputStream is,boolean validating) throws ParserConfigurationException, SAXException, IOException {  DocumentBuilder builder=createDocumentBuilder(validating);  return builder.parse(is);}  }
class C{  private static void extractPolyItem(SvgTree avg,SvgLeafNode child,Node currentGroupNode){  logger.log(Level.FINE,"Rect found" + currentGroupNode.getTextContent());  if (currentGroupNode.getNodeType() == Node.ELEMENT_NODE) {    NamedNodeMap a=currentGroupNode.getAttributes();    int len=a.getLength();    for (int itemIndex=0; itemIndex < len; itemIndex++) {      Node n=a.item(itemIndex);      String name=n.getNodeName();      String value=n.getNodeValue();      if (name.equals(SVG_STYLE)) {        addStyleToPath(child,value);      } else       if (presentationMap.containsKey(name)) {        child.fillPresentationAttributes(name,value);      } else       if (name.equals(SVG_POINTS)) {        PathBuilder builder=new PathBuilder();        String[] split=value.split("[\\s,]+");        float baseX=Float.parseFloat(split[0]);        float baseY=Float.parseFloat(split[1]);        builder.absoluteMoveTo(baseX,baseY);        for (int j=2; j < split.length; j+=2) {          float x=Float.parseFloat(split[j]);          float y=Float.parseFloat(split[j + 1]);          builder.relativeLineTo(x - baseX,y - baseY);          baseX=x;          baseY=y;        }        builder.relativeClose();        child.setPathData(builder.toString());      }    }  }}  }
class C{  public static boolean isZipFile(String file){  return "zip".equals(getExtension(file));}  }
class C{  public void startup(){  voice.allocate();  if (!getSilentMode()) {    if (audioFile != null) {      AudioFileFormat.Type type=getAudioType(audioFile);      if (type != null) {        if (multiAudio) {          audioPlayer=new MultiFileAudioPlayer(getBasename(audioFile),type);        } else         audioPlayer=new SingleFileAudioPlayer(getBasename(audioFile),type);      } else {        try {          audioPlayer=new RawFileAudioPlayer(audioFile);        } catch (        IOException ioe) {          System.out.println("Can't open " + audioFile + " "+ ioe);        }      }    } else     if (!streamingAudio) {      audioPlayer=new JavaClipAudioPlayer();    } else {      try {        audioPlayer=voice.getDefaultAudioPlayer();      } catch (      InstantiationException e) {        e.printStackTrace();      }    }  }  if (audioPlayer == null) {    audioPlayer=new NullAudioPlayer();  }  if (false) {    System.out.println("Using " + audioPlayer);  }  voice.setAudioPlayer(audioPlayer);}  }
class C{  static boolean isSystemWindows(){  return SYSTEM_SEPARATOR == WINDOWS_SEPARATOR;}  }
class C{  public JSONObject put(String key,double value) throws JSONException {  this.put(key,new Double(value));  return this;}  }
class C{  private String makeAbsolute(String uri){  if (uri == null) {    uri="";  }  try {    URL url=new URL(uri);    return url.toString();  } catch (  MalformedURLException mue) {    try {      URL fileURL=FileURL.makeURL(uri);      return fileURL.toString();    } catch (    MalformedURLException mue2) {      return uri;    }  }}  }
class C{  int onUpdate(DataSupport baseObj,long id) throws SecurityException, IllegalArgumentException, NoSuchMethodException, IllegalAccessException, InvocationTargetException {  List<Field> supportedFields=getSupportedFields(baseObj.getClassName());  ContentValues values=new ContentValues();  putFieldsValue(baseObj,supportedFields,values);  putFieldsToDefaultValue(baseObj,values);  if (values.size() > 0) {    return mDatabase.update(baseObj.getTableName(),values,"id = " + id,null);  }  return 0;}  }
class C{  @Override public String verifyToken(UserCredentials credentials,String token,RestoreType restoreType){  if (credentials == null) {    return "credentials_parameter_is_null";  }  if (token == null) {    return "token_parameter_is_null";  }  if (restoreType == null) {    return "restore_type_parameter_is_null";  }  RestoreOptions restoreOptions=RestoreOptions.getRestoreOptions(token);  if (restoreOptions == null) {    return "cannot_parse_restore_options";  }  if (restoreType != restoreOptions.getRestoreType()) {    return "wrong_prefix_for_restore_type";  }  String restoreToken=credentials.getRestoreToken();  if (restoreToken == null) {    return "could_not_verify_token";  }  boolean validToken=passwordManager.matches(token,restoreToken);  return validToken ? null : "restore_token_does_not_match_supplied_token";}  }
class C{  public void loadFromFile(String sFileName) throws FileNotFoundException, IOException {  FileReader frFile=new FileReader(sFileName);  String sText="";  int c=frFile.read();  while (c != -1) {    sText+=c;    c=frFile.read();  }  addText(sText);  frFile.close();}  }
class C{  public FieldRefNode findLocalFieldRefNode(Object baseValue,SparkField field){  VarNode base=findLocalVarNode(baseValue);  if (base == null)   return null;  return base.dot(field);}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public SnippetObject(Object obj,Pathway path,KindredSnippets[] snippets){  myObject=obj;  myPath=path;  mySnippets=snippets;}  }
class C{  private void cleanup(int imageType,Uri oldImage,Uri newImage,Bitmap bitmap){  if (bitmap != null) {    bitmap.recycle();  }  (new File(FileHelper.stripFileProtocol(oldImage.toString()))).delete();  checkForDuplicateImage(imageType);  if (this.saveToPhotoAlbum && newImage != null) {    this.scanForGallery(newImage);  }  System.gc();}  }
class C{  public SpaceTypeDescriptorBuilder idProperty(String idPropertyName,boolean autoGenerateId){  final SpaceIndexType indexType=autoGenerateId ? SpaceIndexType.NONE : SpaceIndexType.BASIC;  return idProperty(idPropertyName,autoGenerateId,indexType);}  }
class C{  public void dispose(){  m_table.getColumn(m_field).removeColumnListener(this);}  }
class C{  @Override public void processingInstruction(String target,XMLString data,Augmentations augs) throws XNIException {  try {    if (fDocumentHandler != null) {      fDocumentHandler.processingInstruction(target,data.toString());    }    if (fContentHandler != null) {      fContentHandler.processingInstruction(target,data.toString());    }  } catch (  SAXException e) {    throw new XNIException(e);  }}  }
class C{  protected void paintComponent(Graphics g){  super.paintComponent(g);  if (image == null) {    return;  }  if (scale == 0.0) {    initializeParams();  }  if (isHighQualityRendering()) {    Rectangle rect=getImageClipBounds();    if (rect == null || rect.width == 0 || rect.height == 0) {      return;    }    BufferedImage subimage=image.getSubimage(rect.x,rect.y,rect.width,rect.height);    Graphics2D g2=(Graphics2D)g;    g2.setRenderingHint(RenderingHints.KEY_INTERPOLATION,INTERPOLATION_TYPE);    g2.drawImage(subimage,Math.max(0,originX),Math.max(0,originY),Math.min((int)(subimage.getWidth() * scale),getWidth()),Math.min((int)(subimage.getHeight() * scale),getHeight()),null);  } else {    g.drawImage(image,originX,originY,getScreenImageWidth(),getScreenImageHeight(),null);  }  if (isNavigationImageEnabled()) {    g.drawImage(navigationImage,0,0,getScreenNavImageWidth(),getScreenNavImageHeight(),null);    drawZoomAreaOutline(g);  }}  }
class C{  public Builder bounceAtZoomLimits(Boolean bounceAtZoomLimits){  this.bounceAtZoomLimits=bounceAtZoomLimits;  return this;}  }
class C{  public boolean isHeader(int position){  return position >= 0 && position < mHeaderViews.size();}  }
class C{  private String base58encode(byte[] input){  if (input.length == 0) {    return "";  }  input=copyOfRange(input,0,input.length);  int zeroCount=0;  while (zeroCount < input.length && input[zeroCount] == 0) {    ++zeroCount;  }  byte[] temp=new byte[input.length * 2];  int j=temp.length;  int startAt=zeroCount;  while (startAt < input.length) {    byte mod=divmod58(input,startAt);    if (input[startAt] == 0) {      ++startAt;    }    temp[--j]=(byte)ALPHABET[mod];  }  while (j < temp.length && temp[j] == ALPHABET[0]) {    ++j;  }  while (--zeroCount >= 0) {    temp[--j]=(byte)ALPHABET[0];  }  byte[] output=copyOfRange(temp,j,temp.length);  try {    return new String(output,"US-ASCII");  } catch (  UnsupportedEncodingException e) {    throw new RuntimeException(e);  }}  }
class C{  public WallSearchQuery(VkApiClient client){  super(client,"wall.search",SearchResponse.class);}  }
class C{  public static void main(String[] sArgs){  if (sArgs.length > 0) {    SymbolicGraph sg=new SymbolicGraph(1,7);    sg.setDataString(sArgs[0]);    System.out.println(utils.graphToDot(sg,true));  } else   try {    SymbolicGraph sg=new SymbolicGraph(1,1);    sg.addEdge(new VertexImpl("a"),new VertexImpl("b"));    sg.addEdge(new VertexImpl("b"),new VertexImpl("c"));    sg.addEdge(new VertexImpl("b"),new VertexImpl("d"));    sg.addEdge(new VertexImpl("e"),new VertexImpl("d"));    sg.addEdge(new VertexImpl("f"),new VertexImpl("e"));    sg.addEdge(new VertexImpl("f"),new VertexImpl("g"));    sg.addEdge(new VertexImpl("f"),new VertexImpl("h"));    sg.addEdge(new VertexImpl("c"),new VertexImpl("h"));    for (int iCnt=0; iCnt < 100; iCnt++)     System.err.println(sg.getShortestLinkBetween(new VertexImpl("a"),new VertexImpl("h")));  } catch (  Exception ex) {    ex.printStackTrace(System.err);  }}  }
class C{  @Override public Iterator iterator(){  return new EntryIterator(set.iterator());}  }
class C{  public static boolean addSmiles(Context context,Spannable spannable){  boolean hasChanges=false;  for (  Entry<Pattern,Object> entry : emoticons.entrySet()) {    Matcher matcher=entry.getKey().matcher(spannable);    while (matcher.find()) {      boolean set=true;      for (      ImageSpan span : spannable.getSpans(matcher.start(),matcher.end(),ImageSpan.class))       if (spannable.getSpanStart(span) >= matcher.start() && spannable.getSpanEnd(span) <= matcher.end())       spannable.removeSpan(span); else {        set=false;        break;      }      if (set) {        hasChanges=true;        Object value=entry.getValue();        if (value instanceof String && !((String)value).startsWith("http")) {          File file=new File((String)value);          if (!file.exists() || file.isDirectory()) {            return false;          }          spannable.setSpan(new ImageSpan(context,Uri.fromFile(file)),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        } else {          spannable.setSpan(new ImageSpan(context,(Integer)value),matcher.start(),matcher.end(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);        }      }    }  }  return hasChanges;}  }
class C{  public JavaCommand(String javaBin,String className,ClassPath classPath,Map<String,String> systemProp,Argument[] jvmArgs,String... mainArgs){  this(className,classPath,systemProp,jvmArgs,mainArgs);  if (javaBin != null)   _javaBin=javaBin;}  }
class C{  public ScanStatus resubmitWorkflowTasks(String scanId){  ScanStatus status=_scanStatusDAO.getScanStatus(scanId);  if (status == null) {    return null;  }  if (status.getCompleteTime() == null) {    for (    ScanRangeStatus active : status.getActiveScanRanges()) {      _scanWorkflow.addScanRangeTask(scanId,active.getTaskId(),active.getPlacement(),active.getScanRange());    }    _scanWorkflow.scanStatusUpdated(scanId);  }  return status;}  }
class C{  public int send(OutputStream out) throws IOException {  long remainBytes=fileSize;  byte[] buff=new byte[256 * 1024];  int bytes;  while (remainBytes > 0) {    try {      if ((bytes=inputStream.read(buff,0,remainBytes > buff.length ? buff.length : (int)remainBytes)) < 0) {        return -1;      }    } catch (    IOException ex) {      ex.printStackTrace();      return -1;    }    out.write(buff,0,bytes);    remainBytes-=bytes;  }  return 0;}  }
class C{  public <E extends ProtoElement>Iterable<E> reachable(Iterable<E> elems){  return scoper.filter(elems);}  }
class C{  private void computeJacobian(){  if (jacobian == null) {    final double x=v.getX();    final double y=v.getY();    final double z=v.getZ();    final double rho2=x * x + y * y;    final double rho=FastMath.sqrt(rho2);    final double r2=rho2 + z * z;    jacobian=new double[3][3];    jacobian[0][0]=x / r;    jacobian[0][1]=y / r;    jacobian[0][2]=z / r;    jacobian[1][0]=-y / rho2;    jacobian[1][1]=x / rho2;    jacobian[2][0]=x * z / (rho * r2);    jacobian[2][1]=y * z / (rho * r2);    jacobian[2][2]=-rho / r2;  }}  }
class C{  private boolean findHeadsApposition(CTNode curr){  if (!curr.isConstituentTagAny(S_NOUN_PHRASE) || curr.containsChild(PTBLib.M_NNx))   return false;  CTNode fst=curr.getFirstChild(PTBLib.M_NP_NML);  while (fst != null && fst.containsChild(MT_POS))   fst=fst.getRightNearestSibling(PTBLib.M_NP_NML);  if (fst == null || fst.getC2DInfo().hasHead())   return false;  boolean hasAppo=false;  CTNode snd=fst;  while ((snd=snd.getRightSibling()) != null) {    if (snd.getC2DInfo().hasHead())     continue;    if ((snd.isConstituentTagAny(S_NOUN_PHRASE) && !hasAdverbialTag(snd)) || (snd.hasFunctionTagAny(PTBTag.F_HLN,PTBTag.F_TTL)) || (snd.isConstituentTag(PTBTag.C_RRC) && snd.containsChild(MT_NP_PRD))) {      snd.getC2DInfo().setHead(fst,DEPTagEn.DEP_APPOS);      hasAppo=true;    }  }  return hasAppo;}  }
class C{  public Builder intoTargetFiles(@Nullable Collection<File> targetFiles){  myTargetFiles=targetFiles;  return this;}  }
class C{  public static double readDouble(byte[] bytes,int start){  return Double.longBitsToDouble(readLong(bytes,start));}  }
class C{  private void downloadFile(String downloadKey){  mCurrentDownload=mPendingDownloads.get(downloadKey);  if (mCurrentDownload != null) {    if (AccountUtils.exists(mCurrentDownload.getAccount(),getApplicationContext())) {      Log_OC.d(TAG,"Account " + mCurrentDownload.getAccount().name + " exists");      notifyDownloadStart(mCurrentDownload);      RemoteOperationResult downloadResult=null;      try {        if (mCurrentAccount == null || !mCurrentAccount.equals(mCurrentDownload.getAccount())) {          mCurrentAccount=mCurrentDownload.getAccount();          mStorageManager=new FileDataStorageManager(mCurrentAccount,getContentResolver());        }        OwnCloudAccount ocAccount=new OwnCloudAccount(mCurrentAccount,this);        mDownloadClient=OwnCloudClientManagerFactory.getDefaultSingleton().getClientFor(ocAccount,this);        downloadResult=mCurrentDownload.execute(mDownloadClient);        if (downloadResult.isSuccess()) {          saveDownloadedFile();        }      } catch (      Exception e) {        Log_OC.e(TAG,"Error downloading",e);        downloadResult=new RemoteOperationResult(e);      } finally {        Pair<DownloadFileOperation,String> removeResult=mPendingDownloads.removePayload(mCurrentAccount.name,mCurrentDownload.getRemotePath());        notifyDownloadResult(mCurrentDownload,downloadResult);        sendBroadcastDownloadFinished(mCurrentDownload,downloadResult,removeResult.second);      }    } else {      Log_OC.d(TAG,"Account " + mCurrentDownload.getAccount().toString() + " doesn't exist");      cancelDownloadsForAccount(mCurrentDownload.getAccount());    }  }}  }
class C{  protected NewsfeedIgnoreItemQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public PieChartDrawer createInstance(){  final PieChartDrawer drawer=new PieChartDrawer();  drawer.setViewer(viewer);  drawer.setChartData(new DefaultChartData());  drawer.setClass2HigherClassMapper(class2HigherClassMapper);  drawer.setSeriesLabelGetter(seriesLabelGetter);  drawer.setExecutorService(executorService);  return drawer;}  }
class C{  @Override public void populateExpression(Object objValue){}  }
class C{  public Value subtract(Value num1,Value num2){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public SemiVariance(final boolean corrected,final Direction direction){  this.biasCorrected=corrected;  this.varianceDirection=direction;}  }
class C{  public static boolean isReservedStreamName(String name){  return name.startsWith(".");}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_PROCFPHeal_Instant_HEAL_A_TO_ME(int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200698,num0,skillcaster,skillname);}  }
class C{  public void newSampleData(double[] y,double[][] x) throws MathIllegalArgumentException {  validateSampleData(x,y);  newYSampleData(y);  newXSampleData(x);}  }
class C{  public final void addPropertyChangeListener(String propertyName,PropertyChangeListener listener){  getChangeSupport().addPropertyChangeListener(propertyName,listener);}  }
class C{  public UserAlreadyExistsException(Throwable cause){  super(cause);}  }
class C{  protected OrdersChangeStateQuery orderId(int value){  return unsafeParam("order_id",value);}  }
class C{  public final void writePos(final Point s){  writeShort(s.x);  writeShort(s.y);}  }
class C{  public boolean isSendInstallEvent(){  return mSendInstallEvent;}  }
class C{  private void init(){  LayoutInflater.from(context).inflate(R.layout.actioncardview,this,true);  this.title=(TextView)findViewById(R.id.card_title);  this.description=(TextView)findViewById(R.id.card_description);  this.buttonBar=(LinearLayout)findViewById(R.id.card_button_bar);  this.divider=findViewById(R.id.card_divider);}  }
class C{  private void insertIntermediateJoinTableValue(DataSupport baseObj,boolean isUpdate){  Map<String,Set<Long>> associatedIdsM2M=baseObj.getAssociatedModelsMapForJoinTable();  ContentValues values=new ContentValues();  for (  String associatedTableName : associatedIdsM2M.keySet()) {    String joinTableName=getIntermediateTableName(baseObj,associatedTableName);    if (isUpdate) {      mDatabase.delete(joinTableName,getWhereForJoinTableToDelete(baseObj),new String[]{String.valueOf(baseObj.getBaseObjId())});    }    Set<Long> associatedIdsM2MSet=associatedIdsM2M.get(associatedTableName);    for (    long associatedId : associatedIdsM2MSet) {      values.clear();      values.put(getForeignKeyColumnName(baseObj.getTableName()),baseObj.getBaseObjId());      values.put(getForeignKeyColumnName(associatedTableName),associatedId);      mDatabase.insert(joinTableName,null,values);    }  }}  }
class C{  private Object readResolve(){  return val ? YES : NO;}  }
class C{  private boolean isSelf(Player player,int targetObjId){  return player.sameObjectId(targetObjId);}  }
class C{  private BatchResponsePacket executeBatch(IJSpace space,Transaction transaction,PreparedValuesCollection preparedValuesCollection) throws SQLException {  int[] result=new int[preparedValuesCollection.size()];  ExternalEntry[] entriesToWrite=new ExternalEntry[preparedValuesCollection.size()];  try {    if (getSecurityInterceptor() != null) {      SpaceContext spaceContext=getSession().getConnectionContext().getSpaceContext();      SecurityContext securityContext=SpaceContextHelper.getSecurityContext(spaceContext);      getSecurityInterceptor().intercept(securityContext,SpacePrivilege.WRITE,getTableName());    }    ITypeDesc info=getTypeInfo();    String[] columnNames;    if (getQueryColumns() != null) {      columnNames=new String[getQueryColumns().size()];      getQueryColumns().toArray(columnNames);    } else {      columnNames=info.getPropertiesNames();      if (columnNames.length != values.size())       throw new SQLException("All values must be set","GSP",-126);    }    String myUid=null;    String[] types=new String[values.size()];    int batchIndex=0;    for (    Object[] preparedValues : preparedValuesCollection.getBatchValues()) {      Object[] literalValues=new Object[values.size()];      int preparedValueIndex=0;      for (int i=0; i < values.size(); i++) {        LiteralNode literalNode=values.get(i);        if (literalNode.isPreparedValue()) {          literalNode.setValue(preparedValues[preparedValueIndex++]);        }        types[i]=(literalNode.getValue() == null) ? info.getFixedProperty(i).getTypeName() : literalNode.getValue().getClass().getName();        if (literalNode.getValue() != null && (types[i].endsWith(".Blob") || types[i].endsWith(".Clob"))) {          if (myUid == null)           myUid=ClientUIDHandler.createUIDFromName(String.valueOf(Math.random()),types[i]);          ((ObjectWithUID)literalNode.getValue()).setEntryUID(myUid);          ((ObjectWithUID)literalNode.getValue()).setObjectIndex(i);        }        if (!info.getFixedProperty(columnNames[i]).getTypeName().equals(types[i])) {          try {            literalValues[i]=literalNode.getConvertedObject(info,columnNames[i]);          } catch (          Exception e) {            SQLException ex=new SQLException("Wrong type for given column " + info.getFixedProperty(i).getName() + " "+ info.getFixedProperty(i).getTypeName()+ " vs "+ types[i],"GSP",-127);            ex.initCause(e);            throw ex;          }        } else {          literalValues[i]=literalNode.getValue();        }      }      entriesToWrite[batchIndex]=new ExternalEntry(getTableName(),literalValues,columnNames);      entriesToWrite[batchIndex].m_FieldsTypes=types;      if (myUid != null)       entriesToWrite[batchIndex].setUID(myUid);      batchIndex++;    }  } catch (  Exception e) {    SQLException ex=new SQLException("Failed to insert; Cause: " + e,"GSP",-106);    ex.initCause(e);    throw ex;  }  try {    space.writeMultiple(entriesToWrite,transaction,QueryProcessor.getDefaultConfig().getWriteLease());    for (int i=0; i < result.length; i++) {      result[i]=1;    }  } catch (  WriteMultipleException e) {    for (int i=0; i < result.length; i++) {      result[i]=e.getResults()[i].isError() ? Statement.EXECUTE_FAILED : 1;    }    throw new BatchUpdateException(e.getMessage(),result);  }catch (  Exception e) {    for (int i=0; i < result.length; i++) {      result[i]=Statement.EXECUTE_FAILED;    }    throw new BatchUpdateException(e.getMessage(),result);  }  return new BatchResponsePacket(result);}  }
class C{  public static Pair<ZooKeeperServerShim,Integer> runZookeeperOnAnyPort(File zkDir) throws Exception {  return runZookeeperOnAnyPort((int)(Math.random() * 10000 + 7000),zkDir);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_PET_CONDITION_REWARD_GET(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400871,value0,value1);}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  public void add(GenomicCoords gc){  if (this.history.size() == 0 || !this.history.get(this.history.size() - 1).equalCoords(gc)) {    this.history.add((GenomicCoords)gc.clone());  }  this.positionTracker=this.history.size() - 1;}  }
class C{  @Override public String marshal(final BigDecimal v) throws Exception {  if (v != null) {    final DecimalFormatSymbols symbols=new DecimalFormatSymbols();    symbols.setDecimalSeparator('.');    return new DecimalFormat("0.00",symbols).format(v);  } else {    return null;  }}  }
class C{  public void resume(){  isPaused=false;}  }
class C{  protected XMLErrorReporter createErrorReporter(){  return new XMLErrorReporter();}  }
class C{  static VersionNumber identifyWindowsVersion(final String userAgent){  VersionNumber version=VersionNumber.UNKNOWN;  final List<Pattern> patterns=new ArrayList<Pattern>();  patterns.add(Pattern.compile("Windows NT\\s?((\\d+)((\\.\\d+)+)?)"));  patterns.add(Pattern.compile("Windows Phone OS ((\\d+)((\\.\\d+)+)?)"));  patterns.add(Pattern.compile("Windows CE ((\\d+)((\\.\\d+)+)?)"));  patterns.add(Pattern.compile("Windows 2000\\s?((\\d+)((\\.\\d+)+)?)"));  patterns.add(Pattern.compile("Windows XP\\s?((\\d+)((\\.\\d+)+)?)"));  patterns.add(Pattern.compile("Windows 7\\s?((\\d+)((\\.\\d+)+)?)"));  patterns.add(Pattern.compile("Win 9x ((\\d+)((\\.\\d+)+)?)"));  patterns.add(Pattern.compile("Windows ((\\d+)((\\.\\d+)+)?)"));  patterns.add(Pattern.compile("WebTV/((\\d+)((\\.\\d+)+)?)"));  for (  final Pattern pattern : patterns) {    final Matcher m=pattern.matcher(userAgent);    if (m.find()) {      version=parseFirstVersionNumber(m.group(MAJOR_INDEX));      break;    }  }  return version;}  }
class C{  public Value generalCaseExpression(Expression[] exp,Value val){  throw new RuntimeException("Unsupported operation.");}  }
class C{  public String createTag(String tagPath) throws RepositoryException {  String parentPath=TAGS_ROOT + substringBeforeLast(tagPath,SEPARATOR);  String tagName=substringAfterLast(tagPath,SEPARATOR);  String fullTagPath=parentPath + SEPARATOR + tagName;  Map<String,Pair<String,Integer>> properties=new HashMap<>();  properties.put(JCR_TITLE,new MutablePair<>(tagName,1));  jcrHelper.createNode(parentPath,tagName,CQ_TAG,properties);  conditions.verify(nodeExist(session,fullTagPath));  return fullTagPath;}  }
class C{  public Object[] toArray(){  Object[] elements=getArray();  return copyOf(elements,elements.length);}  }
class C{  public NavigatingFragmentDelegate(@NonNull DelegateCallback<S,U> callback,@NonNull NavigatingDelegateCallback<T> navigatingCallback,@NonNull Fragment delegatedFragment){  super(callback,delegatedFragment);  this.navigatingCallback=navigatingCallback;}  }
class C{  public static void validate(String s,Type t,boolean template){  int i=_valid(s,t,template);  if (i > -1) {    throw new IllegalArgumentException("The string '" + s + "' for the URI component "+ t+ " contains an invalid character, '"+ s.charAt(i)+ "', at index "+ i);  }}  }
class C{  public boolean removeHandler(String columnName){  if (m_overrides == null)   return false; else   return m_overrides.remove(columnName) != null;}  }
class C{  public AuthenticationToken(SessionId sessionId){  this.sessionId=sessionId;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_MENTOR_START_PARTYMSG(String value0){  return new SM_SYSTEM_MESSAGE(1400763,value0);}  }
class C{  public boolean isPaging(){  return page != null || pageSize != null;}  }
class C{  public void releaseScan(){  release();}  }
class C{  @Override public Lifecycle registerAsListener(final SupervisionListener supervisionListener,final int numberThreads,final int queueSize){  listenerLock.writeLock().lock();  try {    ThreadPoolExecutor threadPoolExecutor=new ThreadPoolExecutor(numberThreads,numberThreads,DEFAULT_THREAD_TIMEOUT,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>(queueSize),new ThreadPoolExecutor.AbortPolicy());    threadPoolExecutor.allowCoreThreadTimeOut(true);    executors.put(supervisionListener,threadPoolExecutor);    supervisionListeners.add(supervisionListener);    return new ExecutorLifecycleHandle(threadPoolExecutor);  }  finally {    listenerLock.writeLock().unlock();  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUMMON_STAY_MODE(String value0){  return new SM_SYSTEM_MESSAGE(1200007,value0);}  }
class C{  public M continueBest(IMoveGenerator<M,G> generator){  evaluationsPerformed=0;  try {    treeSearchLoop(generator);  } catch (  TimeoutException e) {  }  return returnCurrentBest(rootNodes.get(0).father.getGame().currentPlayer());}  }
class C{  public AuthRestoreQuery restore(String phone){  return new AuthRestoreQuery(getClient(),phone);}  }
class C{  public void addUserMessageListener(UserMessageListener userMessageListener){  userMessageListeners.add(userMessageListener);}  }
class C{  private void scheduleValueComputationTask(ValueComputationTask task){  if (executor.isTerminating())   return;  executor.execute(task);}  }
class C{  public void print(TorrentSessionState sessionState){  if (shutdown) {    return;  }  try {    long downloaded=sessionState.getDownloaded();    long uploaded=sessionState.getUploaded();    graphics.putString(0,2,getDurations(downloaded - this.downloaded,sessionState.getPiecesRemaining(),sessionState.getPiecesTotal()));    graphics.putString(0,3,getSessionInfo(sessionState.getConnectedPeers(),downloaded - this.downloaded,uploaded - this.uploaded));    graphics.putString(0,4,getProgressBar(sessionState.getPiecesTotal(),sessionState.getPiecesRemaining()));    if (sessionState.getPiecesRemaining() == 0) {      graphics.putString(0,5,"Download is complete. Press Ctrl-C to stop seeding and exit.");    }    screen.refresh(Screen.RefreshType.DELTA);    this.downloaded=downloaded;    this.uploaded=uploaded;  } catch (  Throwable e) {    LOGGER.error("Unexpected error when printing session state",e);    shutdown();  }}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public Builder doubleMathOp(String columnName,MathOp mathOp,double scalar){  return transform(new DoubleMathOpTransform(columnName,mathOp,scalar));}  }
class C{  public boolean isCritical(){  return true;}  }
class C{  public boolean isOutputFormat(OutputFormat format){  return this.outputFormat != null && this.outputFormat == format;}  }
class C{  synchronized void redo(RTEditText editor){  Stack<Operation> redoStack=getRedoStack(editor);  if (!redoStack.empty()) {    Stack<Operation> undoStack=getUndoStack(editor);    Operation op=redoStack.pop();    push(op,undoStack);    op.redo(editor);    while (!redoStack.empty() && op.canMerge(redoStack.peek())) {      op=redoStack.pop();      push(op,undoStack);      op.redo(editor);    }  }}  }
class C{  public static byte[] writeLTriad(int triad){  byte b1, b2, b3;  b3=(byte)(triad & 0xFF);  b2=(byte)((triad >> 8) & 0xFF);  b1=(byte)((triad >> 16) & 0xFF);  return new byte[]{b3,b2,b1};}  }
class C{  public void clear(){  isClear=true;}  }
class C{  protected TreeItem<WeakRef<Node>> insertIntoMap(Node node){  return insertWeakRefIntoMap(new WeakRef<Node>(node));}  }
class C{  public void createNewSLD(StyledLayerDescriptor newSLD){  this.sld=newSLD;}  }
class C{  public boolean isGlobalFindable(){  return true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_EDIT_CHAR_NAME_SUCCESS(String value0){  return new SM_SYSTEM_MESSAGE(1400157,value0);}  }
class C{  private static synchronized void populateNamespaceMap(){  if (namespaceMap == null) {    namespaceMap=new HashMap<String,String>();    namespaceMap.put(OGC_NAMESPACE_URL,OGC_NAMESPACE);    namespaceMap.put(SLD_NAMESPACE_URL,SLD_NAMESPACE);  }}  }
class C{  protected EventFlusher createEventFlusher(){  return null;}  }
class C{  public ParameterRef(Type paramType,int number){  this.n=number;  this.paramType=paramType;}  }
class C{  private View fillSpecific(int position,int top){  if (DEBUG)   Log.d("PLA_ListView","FillSpecific: " + position + ":"+ top);  View temp=makeAndAddView(position,top,true,false);  mFirstPosition=position;  final int dividerHeight=mDividerHeight;  if (!mStackFromBottom) {    fillUp(position - 1,temp.getTop() - dividerHeight);    adjustViewsUpOrDown();    fillDown(position + 1,temp.getBottom() + dividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooHigh(childCount);    }  } else {    fillDown(position + 1,temp.getBottom() + dividerHeight);    adjustViewsUpOrDown();    fillUp(position - 1,temp.getTop() - dividerHeight);    int childCount=getChildCount();    if (childCount > 0) {      correctTooLow(childCount);    }  }  return null;}  }
class C{  private Optional<Secret> prepareRenewalSecret(){  val expiryDate=LocalDate.now().minusDays(1);  val annotations=ImmutableMap.of(EXPIRY_ANNOTATION,expiryDate.toString());  val secretMeta=Mockito.mock(ObjectMeta.class);  when(secretMeta.getName()).thenReturn(RENEWAL_CERT);  when(secretMeta.getAnnotations()).thenReturn(annotations);  val secret=Mockito.mock(Secret.class);  when(secret.getMetadata()).thenReturn(secretMeta);  return Optional.of(secret);}  }
class C{  public Stream<Entry<Tags,MetricValue>> streamAsMap(Tags dfl){  return values_.map(null,null).mapCombine(null,null);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    setFocus();  }}  }
class C{  public int size(){  return 5;}  }
class C{  public static Object decodeToObject(String encodedObject) throws java.io.IOException, java.lang.ClassNotFoundException {  return decodeToObject(encodedObject,NO_OPTIONS,null);}  }
class C{  private void resetLastPrecacheMsIfDeviceRebooted(Context context){  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);  long lastElapsedTime=prefs.getLong(PREF_LAST_ELAPSED_TIME,0L);  long elapsedTime=getElapsedRealtimeOnSystem();  Editor editor=prefs.edit();  if (elapsedTime < lastElapsedTime) {    editor.remove(PREF_PRECACHE_LAST_TIME);  }  editor.putLong(PREF_LAST_ELAPSED_TIME,elapsedTime);  editor.apply();}  }
class C{  private void createUI(){  readConfigFile(null,this,"Stroke.xml");  fillFactory.populate(this,fieldConfigManager);}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set labelFillColor=");  Color color=null;  if (np.peekMatchIgnoreCase("null"))   np.matchIgnoreCase("null"); else   color=np.getColor();  np.matchIgnoreCase(";");  if (getViewer() instanceof GraphView) {    boolean changed=false;    GraphView viewer=(GraphView)getViewer();    for (    Node v : viewer.getSelectedNodes()) {      if (viewer.isLabelVisible(v)) {        viewer.setLabelBackgroundColor(v,color);        changed=true;      }    }    for (    Edge edge : viewer.getSelectedEdges()) {      if (viewer.isLabelVisible(edge)) {        viewer.setLabelBackgroundColor(edge,color);        changed=true;      }    }    if (changed) {      viewer.repaint();    }  }}  }
class C{  public EnvVar(EnvVar envVar,boolean predefined){  this.name=envVar.name;  this.type=envVar.type;  this.value=envVar.value;  this.predefined=predefined;}  }
class C{  private void check(){  if (descs.length == 0) {    throw new IllegalArgumentException("must have at least one descriptor");  }  for (int i=0; i < descs.length; i++) {    MethodDesc desc=descs[i];    String dname=desc.name;    if (dname == null) {      if (i < descs.length - 1) {        throw new IllegalArgumentException("default descriptor must be last");      }    } else     if (dname.charAt(0) == '*') {      int dlen=dname.length() + 1;      for (int j=0; j < i; j++) {        MethodDesc prev=descs[j];        String pname=prev.name;        if (pname.charAt(0) == '*' && pname.regionMatches(1,dname,dlen - pname.length(),pname.length() - 1)) {          check(prev,desc);        }      }    } else     if (dname.charAt(dname.length() - 1) == '*') {      for (int j=0; j < i; j++) {        MethodDesc prev=descs[j];        String pname=prev.name;        int plen=pname.length() - 1;        if (pname.charAt(plen) == '*' && pname.regionMatches(0,dname,0,plen)) {          check(prev,desc);        }      }    } else {      for (int j=0; j < i; j++) {        MethodDesc prev=descs[j];        String pname=prev.name;        int plen=pname.length() - 1;        if (pname.charAt(0) == '*') {          if (dname.regionMatches(dname.length() - plen,pname,1,plen)) {            check(prev,desc);          }        } else         if (pname.charAt(plen) == '*') {          if (dname.regionMatches(0,pname,0,plen)) {            check(prev,desc);          }        } else {          if (pname.equals(dname)) {            check(prev,desc);          }        }      }    }  }}  }
class C{  protected DatabaseGetChairsQuery facultyId(int value){  return unsafeParam("faculty_id",value);}  }
class C{  @SubscribeEvent public void randomRespawn(LivingDeathEvent event){  if (!BWConfig.hardcoreSpawn)   return;  if (!(event.getEntity() instanceof EntityPlayerMP))   return;  EntityPlayerMP player=(EntityPlayerMP)event.getEntity();  if (EntityPlayerExt.isSurvival(player)) {    int timeSinceDeath=player.getStatFile().readStat(StatList.TIME_SINCE_DEATH);    int spawnFuzz=timeSinceDeath >= HARDCORE_SPAWN_COOLDOWN ? HARDCORE_SPAWN_RADIUS : 100;    BlockPos newPos=getRespawnPoint(player,spawnFuzz);    player.setSpawnPoint(newPos,true);  }}  }
class C{  public AudioAddQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  public static void load(){  taxonomyClassification=ClassificationManager.get(Classification.Taxonomy,true);}  }
class C{  public double distSquared(double x,double y){  double distX=this.x - x;  double distY=this.y - y;  return distX * distX + distY * distY;}  }
class C{  public CmdLineParameters parseCmdOptions(String[] args) throws ParseException {  CommandLineParser parser=new DefaultParser();  CommandLine line=parser.parse(options,args);  if (line.hasOption(help.getLongOpt())) {    HelpFormatter formatter=new HelpFormatter();    formatter.setWidth(120);    formatter.printHelp("ttml-to-stl",options);    return null;  }  CmdLineParameters result=new CmdLineParameters();  for (  Option option : line.getOptions()) {    if (option.equals(ttmlFile)) {      TtmlInDescriptor ttmlInDescriptor=new TtmlInDescriptor();      try {        ttmlInDescriptor.setFile(option.getValue(0));        ttmlInDescriptor.setOffsetMS(parseTtmlParameter(option,1,"offsetMS"));        ttmlInDescriptor.setStartMS(parseTtmlParameter(option,2,"startMS"));        ttmlInDescriptor.setEndMS(parseTtmlParameter(option,3,"endMS"));      } catch (      IndexOutOfBoundsException e) {      }      if (ttmlInDescriptor.getFile() == null) {        throw new ParseException("--ttml parameter must have at least <file> attribute defined.");      }      result.getTtmlInDescriptors().add(ttmlInDescriptor);    }  }  if (result.getTtmlInDescriptors().isEmpty()) {    throw new ParseException("At least one input TTML file must be provided");  }  boolean doOutputTTML=line.hasOption(outputTtml.getLongOpt());  if (doOutputTTML) {    result.setDoOuputTtml(true);    result.setOutputTtmlFile(line.getOptionValue(outputTtml.getLongOpt()));  }  boolean doOutputScc=line.hasOption(outputScc.getLongOpt());  if (doOutputScc) {    result.setDoOutputScc(true);    result.setOutputSccFile(line.getOptionValue(outputScc.getLongOpt()));  }  return result;}  }
class C{  public void revertToDefaultValue(){  List<FieldConfigBase> fieldList=fieldConfigManager.getFields(null);  for (  FieldConfigBase field : fieldList) {    if (field != null) {      field.revertToDefaultValue();    }  }}  }
class C{  public void clear(){  internalMap.clear();}  }
class C{  public static String graphToCASCDot(CASCGraph gTree){  StringBuffer sb=new StringBuffer();  String sConnector;  sb.append("graph {\n");  sConnector="--";  Iterator iIter=gTree.getEdgeSet().iterator();  TreeSet tsDescribed=new TreeSet();  while (iIter.hasNext()) {    Edge e=(Edge)iIter.next();    if (!tsDescribed.contains(e.getVertexA().getLabel())) {      tsDescribed.add(e.getVertexA().getLabel());      if (gTree.getVertexType(e.getVertexA()) == gTree.NORMAL)       sb.append("\t" + e.getVertexA().getLabel() + " [label=\""+ e.getVertexA().getLabel()+ "\" shape=plaintext fontsize=24]\n"); else       sb.append("\t" + e.getVertexA().getLabel() + " [shape=point]\n");    }    if (!tsDescribed.contains(e.getVertexB().getLabel())) {      tsDescribed.add(e.getVertexB().getLabel());      if (gTree.getVertexType(e.getVertexB()) == gTree.NORMAL)       sb.append("\t" + e.getVertexB().getLabel() + " [label=\""+ e.getVertexB().getLabel()+ "\" shape=plaintext fontsize=24]\n"); else       sb.append("\t" + e.getVertexB().getLabel() + " [shape=point]\n");    }    if (e instanceof WeightedEdge)     sb.append("\t" + e.getVertexA() + " "+ sConnector+ " "+ e.getVertexB()+ " [weight="+ (int)(((WeightedEdge)e).getWeight() * 100)+ "]\n"); else     sb.append("\t" + e.getVertexA() + " "+ sConnector+ " "+ e.getVertexB()+ "\n");  }  sb.append("}");  return sb.toString();}  }
class C{  private MediaUtils(){}  }
class C{  public boolean isString(String key){  Object val=get(key);  return val instanceof String;}  }
class C{  @Override public int read() throws IOException {  try {    beforeRead(1);    int c=in.read();    afterRead(c != -1 ? 1 : -1);    return c;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  private synchronized boolean waitResume(){  return true;}  }
class C{  public void updateStyle(){  internalRenderStyle();}  }
class C{  public static TargetExpression allFromPackageRecursive(WorkspacePath localPackage){  if (localPackage.relativePath().isEmpty()) {    return new TargetExpression("//...:all");  }  return new TargetExpression("//" + localPackage.relativePath() + "/...:all");}  }
class C{  public static String formatQuantity(Integer quantity){  if (quantity == null)   return ""; else   return formatQuantity(quantity.doubleValue());}  }
class C{  public static List<BigInteger> partitionDataElement(QuerySchema qSchema,JSONObject jsonData,boolean embedSelector) throws PIRException {  List<BigInteger> parts=new ArrayList<>();  DataSchema dSchema=DataSchemaRegistry.get(qSchema.getDataSchemaName());  if (embedSelector) {    String selectorFieldName=qSchema.getSelectorName();    String type=dSchema.getElementType(selectorFieldName);    String selector=getSelectorByQueryTypeJSON(qSchema,jsonData);    parts.addAll(embeddedSelectorToPartitions(selector,type,dSchema.getPartitionerForElement(selectorFieldName)));    logger.debug("Added embedded selector for selector = " + selector + " type = "+ type+ " parts.size() = "+ parts.size());  }  List<String> dataFieldsToExtract=qSchema.getElementNames();  for (  String fieldName : dataFieldsToExtract) {    Object dataElement=null;    if (jsonData.containsKey(fieldName)) {      dataElement=jsonData.get(fieldName);    }    if (dSchema.isArrayElement(fieldName)) {      List<String> elementArray;      if (dataElement == null) {        elementArray=Collections.singletonList("0");      } else {        elementArray=StringUtils.jsonArrayStringToArrayList(dataElement.toString());      }      logger.debug("Adding parts for fieldName = " + fieldName + " type = "+ dSchema.getElementType(fieldName)+ " jsonData = "+ dataElement);      parts.addAll(dSchema.getPartitionerForElement(fieldName).arrayToPartitions(elementArray,dSchema.getElementType(fieldName)));    } else {      if (dataElement == null) {        dataElement="0";      }      logger.debug("Adding parts for fieldName = " + fieldName + " type = "+ dSchema.getElementType(fieldName)+ " jsonData = "+ dataElement);      parts.addAll(dSchema.getPartitionerForElement(fieldName).toPartitions(dataElement.toString(),dSchema.getElementType(fieldName)));    }  }  logger.debug("parts.size() = " + parts.size());  return parts;}  }
class C{  public void populateFilterResolvedInfo(DimColumnResolvedFilterInfo visitableObj,FilterResolverMetadata metadata) throws FilterUnsupportedException {  DimColumnFilterInfo resolvedFilterObject=null;  List<String> evaluateResultListFinal;  try {    evaluateResultListFinal=metadata.getExpression().evaluate(null).getListAsString();  } catch (  FilterIllegalMemberException e) {    throw new FilterUnsupportedException(e);  }  boolean isNotTimestampType=FilterUtil.checkIfDataTypeNotTimeStamp(metadata.getExpression());  resolvedFilterObject=getDirectDictionaryValKeyMemberForFilter(metadata.getTableIdentifier(),metadata.getColumnExpression(),evaluateResultListFinal,metadata.isIncludeFilter(),isNotTimestampType);  if (!metadata.isIncludeFilter() && null != resolvedFilterObject && !resolvedFilterObject.getFilterList().contains(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY)) {    resolvedFilterObject.getFilterList().add(CarbonCommonConstants.MEMBER_DEFAULT_VAL_SURROGATE_KEY);    Collections.sort(resolvedFilterObject.getFilterList());  }  visitableObj.setFilterValues(resolvedFilterObject);}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  String results;  for (Item syllable=utterance.getRelation(Relation.SYLLABLE).getHead(); syllable != null; syllable=syllable.getNext()) {    results=(String)accentCart.interpret(syllable);    if (!results.equals("NONE")) {      syllable.getFeatures().setString("accent",results);    }    results=(String)toneCart.interpret(syllable);    if (!results.equals("NONE")) {      syllable.getFeatures().setString("endtone",results);    }  }}  }
class C{  public EventReaderDelegate(XMLEventReader reader){  this.reader=reader;}  }
class C{  public MessagesDeleteQuery spam(Boolean value){  return unsafeParam("spam",value);}  }
class C{  private static void qsufsort(int[] arrayI,int[] arrayV,byte[] oldBuf,int oldsize){  int[] buckets=new int[256];  for (int i=0; i < oldsize; i++) {    buckets[oldBuf[i] & 0xff]++;  }  for (int i=1; i < 256; i++) {    buckets[i]+=buckets[i - 1];  }  for (int i=255; i > 0; i--) {    buckets[i]=buckets[i - 1];  }  buckets[0]=0;  for (int i=0; i < oldsize; i++) {    arrayI[++buckets[oldBuf[i] & 0xff]]=i;  }  arrayI[0]=oldsize;  for (int i=0; i < oldsize; i++) {    arrayV[i]=buckets[oldBuf[i] & 0xff];  }  arrayV[oldsize]=0;  for (int i=1; i < 256; i++) {    if (buckets[i] == buckets[i - 1] + 1) {      arrayI[buckets[i]]=-1;    }  }  arrayI[0]=-1;  for (int h=1; arrayI[0] != -(oldsize + 1); h+=h) {    int len=0;    int i;    for (i=0; i < oldsize + 1; ) {      if (arrayI[i] < 0) {        len-=arrayI[i];        i-=arrayI[i];      } else {        if (len != 0) {          arrayI[i - len]=-len;        }        len=arrayV[arrayI[i]] + 1 - i;        split(arrayI,arrayV,i,len,h);        i+=len;        len=0;      }    }    if (len != 0) {      arrayI[i - len]=-len;    }  }  for (int i=0; i < oldsize + 1; i++) {    arrayI[arrayV[i]]=i;  }}  }
class C{  public static SpawnTemplate addNewSingleTimeSpawn(int worldId,int npcId,float x,float y,float z,byte heading){  return addNewSpawn(worldId,npcId,x,y,z,heading,0);}  }
class C{  public static boolean log(String logName,Level level,String message,Throwable thrown){  LogManager logManager=LogManager.getLogManager();  Logger logger=logManager.getLogger(logName);  if (logger != null && logger.isLoggable(level)) {    logger.log(level,message,thrown);    return true;  }  String key=logName + ".level";  String levelOverride=System.getProperty(key,logManager.getProperty(key));  if (levelOverride != null) {    Level levelParsed=Level.parse(levelOverride);    if (level.intValue() < levelParsed.intValue() || level.equals(Level.OFF)) {      return false;    } else {      println(logName,level,message,thrown);    }  }  return false;}  }
class C{  public boolean containOnlyDigitalGoods(int shipGroupIdx){  CartShipInfo shipInfo=getShipInfo(shipGroupIdx);  for (  ShoppingCartItem cartItem : shipInfo.getShipItems()) {    GenericValue product=cartItem.getProduct();    try {      GenericValue productType=product.getRelatedOne("ProductType",true);      if (productType == null || !"N".equals(productType.getString("isPhysical"))) {        return false;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"Error looking up ProductType: " + e.toString(),module);      return false;    }  }  return true;}  }
class C{  public static void copy(byte[] input,OutputStream output) throws IOException {  output.write(input);}  }
class C{  @NotNull public ImageOverlayBuilder verify(@NotNull BufferedImage candidateImage,@NotNull VerificationSet verificationSet){  CognitiveJColourPalette verificationColor=verificationSet.getVerification().isIdentical ? CognitiveJColourPalette.GREEN : CognitiveJColourPalette.RED;  outlineFaceOnImage(verificationSet.getFirstFace(),RectangleType.CORNERED,BorderWeight.THICK,verificationColor);  OverlayRectangleFilter overlayRectangleFilter=new OverlayRectangleFilter(verificationSet.getSecondFace().faceRectangle.asAwtRectangle(),RectangleType.CORNERED,BorderWeight.THICK,verificationColor);  MergeImagesFilter mergeImagesFilter=new MergeImagesFilter(overlayRectangleFilter.applyFilter(candidateImage),SMALL_PADDING,MergeImagesFilter.Position.RIGHT);  LineJoinRectangleFilter lineJoinRectangleFilter=new LineJoinRectangleFilter(verificationSet.getFirstFace().faceRectangle.asAwtRectangle(),verificationSet.getSecondFace().faceRectangle.asAwtRectangle(),BorderWeight.THICK,verificationColor,bufferedImage.getWidth(),SMALL_PADDING);  Verification verification=verificationSet.getVerification();  ApplyCaptionOutsideImageFilter applyCaptionOutsideImageFilter=new ApplyCaptionOutsideImageFilter(PointLocations.BOTTOM_CENTER,DEFAULT_TEXT_FONT.deriveFont(80f).deriveFont(80f),verificationColor,verification.isIdentical ? String.format("Match (confidence %.3f)",verification.confidence) : String.format("No Match (confidence %.3f)",verification.confidence));  bufferedImage=applyCaptionOutsideImageFilter.applyFilter(lineJoinRectangleFilter.applyFilter(mergeImagesFilter.applyFilter(bufferedImage)));  return this;}  }
class C{  @Override public void addValue(Field field,boolean mayMatch,Object actualValue,short valueType,ShortList itemValueType){  int i;  for (i=fFieldCount - 1; i > -1; i--) {    if (fFields[i] == field) {      break;    }  }  if (i == -1) {    String code="UnknownField";    String eName=fIdentityConstraint.getElementName();    String cName=fIdentityConstraint.getIdentityConstraintName();    reportSchemaError(code,new Object[]{field.toString(),eName,cName});    return;  }  if (!mayMatch) {    String code="FieldMultipleMatch";    String cName=fIdentityConstraint.getIdentityConstraintName();    reportSchemaError(code,new Object[]{field.toString(),cName});  } else {    fValuesCount++;  }  fLocalValues[i]=actualValue;  fLocalValueTypes[i]=valueType;  fLocalItemValueTypes[i]=itemValueType;  if (fValuesCount == fFieldCount) {    checkDuplicateValues();    for (i=0; i < fFieldCount; i++) {      fValues.addElement(fLocalValues[i]);      addValueType(fLocalValueTypes[i]);      addItemValueType(fLocalItemValueTypes[i]);    }  }}  }
class C{  public boolean isMultiple(){  return partitions != null && partitions.size() > 1;}  }
class C{  public boolean isAddColumnSupported(){  return true;}  }
class C{  private void handleUnknownException(StreamOp op,final Throwable cause){  AsyncLogWriter oldWriter=null;  boolean statusChanged=false;synchronized (this) {    if (StreamStatus.INITIALIZED == status) {      oldWriter=setStreamStatus(StreamStatus.FAILED,StreamStatus.INITIALIZED,null,null,cause);      statusChanged=true;    }  }  if (statusChanged) {    Abortables.asyncAbort(oldWriter,false);    logger.error("Failed to write data into stream {} : ",name,cause);    scheduleTryAcquireOnce(0L);  }  op.fail(cause);}  }
class C{  public FriendsGetRequestsQuery sort(FriendsGetRequestsSort value){  return unsafeParam("sort",value);}  }
class C{  public AgeFileFilter(File cutoffReference){  this(cutoffReference,true);}  }
class C{  public String process(Item seg) throws ProcessException {  if (segCodaCtype(seg,"r").equals("0")) {    return segCodaCtype(seg,"l");  }  return "1";}  }
class C{  public static boolean hasDataTypeChanged(final ISourceDataTag sourceDataTag,final ISourceDataTag oldSourceDataTag){  return !sourceDataTag.getDataType().equals(oldSourceDataTag.getDataType());}  }
class C{  private static int computeCapacity(final int expectedSize){  if (expectedSize == 0) {    return 1;  }  final int capacity=(int)FastMath.ceil(expectedSize / LOAD_FACTOR);  final int powerOfTwo=Integer.highestOneBit(capacity);  if (powerOfTwo == capacity) {    return capacity;  }  return nextPowerOfTwo(capacity);}  }
class C{  public PollsCreateQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  public InSpacePredicate(Object... values){  _inValues=new HashSet<Object>();  for (  Object value : values) {    _inValues.add(value);  }}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public static void log(MethodMsg methodMsg){  if (methodMsg != null) {    treeMethods.add(methodMsg);  } else {    throw new NullPointerException("MethodMsg is null!");  }}  }
class C{  public ByteVector putUTF8(final String s){  int charLength=s.length();  if (length + 2 + charLength > data.length) {    enlarge(2 + charLength);  }  int len=length;  byte[] data=this.data;  data[len++]=(byte)(charLength >>> 8);  data[len++]=(byte)charLength;  for (int i=0; i < charLength; ++i) {    char c=s.charAt(i);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else {      int byteLength=i;      for (int j=i; j < charLength; ++j) {        c=s.charAt(j);        if (c >= '\001' && c <= '\177') {          byteLength++;        } else         if (c > '\u07FF') {          byteLength+=3;        } else {          byteLength+=2;        }      }      data[length]=(byte)(byteLength >>> 8);      data[length + 1]=(byte)byteLength;      if (length + 2 + byteLength > data.length) {        length=len;        enlarge(2 + byteLength);        data=this.data;      }      for (int j=i; j < charLength; ++j) {        c=s.charAt(j);        if (c >= '\001' && c <= '\177') {          data[len++]=(byte)c;        } else         if (c > '\u07FF') {          data[len++]=(byte)(0xE0 | c >> 12 & 0xF);          data[len++]=(byte)(0x80 | c >> 6 & 0x3F);          data[len++]=(byte)(0x80 | c & 0x3F);        } else {          data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);          data[len++]=(byte)(0x80 | c & 0x3F);        }      }      break;    }  }  length=len;  return this;}  }
class C{  private void initializeParameters(){  analysisParams=new HntmAnalyzerParams();  analysisParams.harmonicModel=HntmAnalyzerParams.HARMONICS_PLUS_NOISE;  analysisParams.noiseModel=HntmAnalyzerParams.WAVEFORM;  analysisParams.useHarmonicAmplitudesDirectly=true;  analysisParams.harmonicSynthesisMethodBeforeNoiseAnalysis=HntmSynthesizerParams.LINEAR_PHASE_INTERPOLATION;  analysisParams.regularizedCepstrumWarpingMethod=RegularizedCepstrumEstimator.REGULARIZED_CEPSTRUM_WITH_POST_MEL_WARPING;  synthesisParams=new HntmSynthesizerParams();  synthesisParams.harmonicPartSynthesisMethod=HntmSynthesizerParams.LINEAR_PHASE_INTERPOLATION;  synthesisParams.overlappingHarmonicPartSynthesis=false;  synthesisParams.harmonicSynthesisOverlapInSeconds=0.010f;  synthesisParams.writeHarmonicPartToSeparateFile=false;  synthesisParams.writeNoisePartToSeparateFile=false;  synthesisParams.writeTransientPartToSeparateFile=false;  synthesisParams.writeOriginalMinusHarmonicPartToSeparateFile=false;}  }
class C{  public void clearSounds(){  mSoundMap.clear();}  }
class C{  public static void sendVerificationToken(AirMapCallback<Void> listener){  String url=String.format(pilotSendVerifyUrl,AirMap.getUserId());  AirMap.getClient().post(url,new VoidCallback(listener));}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostDropRate_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200913,skilltarget,skillcaster,skillname);}  }
class C{  public Graph(Table nodes,Table edges,boolean directed){  this(nodes,edges,directed,DEFAULT_NODE_KEY,DEFAULT_SOURCE_KEY,DEFAULT_TARGET_KEY);}  }
class C{  public void addCatchablePokemons(Collection<MapPokemon> catchablePokemons){  if (catchablePokemons == null || catchablePokemons.isEmpty()) {    return;  }  complete=true;  this.catchablePokemons.addAll(catchablePokemons);}  }
class C{  public summaryEvaluator(Semaphore sOutputSemaphore,String sDo,int iWordMin,int iWordMax,int iWordDist,int iCharMin,int iCharMax,int iCharDist,int iThreads,String sOutFile,String sSummaryDir,String sModelDir,boolean bSilent,int iWeightMethod,boolean bProgress){  Do=sDo;  OutputSemaphore=sOutputSemaphore;  WordMin=iWordMin;  WordMax=iWordMax;  WordDist=iWordDist;  CharMin=iCharMin;  CharMax=iCharMax;  CharDist=iCharDist;  Threads=iThreads;  OutFile=sOutFile;  SummaryDir=sSummaryDir;  ModelDir=sModelDir;  Silent=bSilent;  WeightMethod=iWeightMethod;  Progress=bProgress;}  }
class C{  @Override public void startDocument() throws SAXException {  return;}  }
class C{  public PagesSaveQuery title(String value){  return unsafeParam("title",value);}  }
class C{  public ProperFractionFormat(NumberFormat format){  this(format,(NumberFormat)format.clone(),(NumberFormat)format.clone());}  }
class C{  @Override public String toString(){  return displayString;}  }
class C{  @Override public void emptyElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  Augmentations modifiedAugs=handleStartElement(element,attributes,augs);  fDefaultValue=null;  if (fElementDepth != -2)   modifiedAugs=handleEndElement(element,modifiedAugs);  if (fDocumentHandler != null) {    if (!fSchemaElementDefault || fDefaultValue == null) {      fDocumentHandler.emptyElement(element,attributes,modifiedAugs);    } else {      fDocumentHandler.startElement(element,attributes,modifiedAugs);      fDocumentHandler.characters(fDefaultValue,null);      fDocumentHandler.endElement(element,modifiedAugs);    }  }}  }
class C{  @Override public void revertToDefaultValue(){  internalSetValue(this.defaultValue);}  }
class C{  public static byte[] decodeWebSafe(byte[] source) throws Base64DecoderException {  return decodeWebSafe(source,0,source.length);}  }
class C{  public FriendsAreFriendsQuery(VkApiClient client,UserActor actor,List<Integer> userIds){  super(client,"friends.areFriends",Utils.buildParametrizedType(List.class,FriendStatus.class));  accessToken(actor.getAccessToken());  userIds(userIds);}  }
class C{  public ResourceLazyLoadingScript parameter(String name,Object value){  if (parameters == null) {    parameters=new HashMap<String,Object>();  }  parameters.put(name,value);  return this;}  }
class C{  public void init$Children(){}  }
class C{  public NewsfeedGetCommentsQuery fields(List<EnumParam> value){  return unsafeParam("fields",value);}  }
class C{  public static String md5(String str){  if (str == null) {    return null;  }  try {    MessageDigest messageDigest=MessageDigest.getInstance("MD5");    messageDigest.update(str.getBytes());    return new String(encodeHex(messageDigest.digest()));  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected Combo createCombo(Composite parent){  Combo combo=new Combo(parent,SWT.READ_ONLY);  GridData data=new GridData(GridData.FILL_HORIZONTAL);  data.widthHint=IDialogConstants.ENTRY_FIELD_WIDTH;  combo.setLayoutData(data);  return combo;}  }
class C{  public Fraction negate(){  if (numerator == Integer.MIN_VALUE) {    throw MathRuntimeException.createArithmeticException(OVERFLOW_MESSAGE,numerator,denominator);  }  return new Fraction(-numerator,denominator);}  }
class C{  public static void main(String[] args){  SymbolicGraph sg=new SymbolicGraph(1,6);  String s1=args.length > 0 ? args[0] : "smart";  String s2=args.length > 1 ? args[1] : "stupid";  String s3=args.length > 2 ? args[2] : "This is a pretty good day. Nice. It's really beautiful.";  sg.setDataString(s1 + " " + s2+ " "+ s3);  SemanticIndex si=new SemanticIndex(sg);  try {    si.MeaningExtractor=new LocalWordNetMeaningExtractor();  } catch (  IOException ex) {    Logger.getLogger(SemanticIndex.class.getName()).log(Level.SEVERE,null,ex);  }  WordDefinition wd1=si.getMeaning(s1);  WordDefinition wd2=si.getMeaning(s2);  if (wd1 == null) {    System.err.println("No definition found for:" + s1);    return;  }  if (wd2 == null) {    System.err.println("No definition found for:" + s2);    return;  }  System.out.println("Result of comparison between '" + s1 + "' and '"+ s2+ "':"+ SemanticIndex.compareWordDefinitions(wd1,wd2));  System.out.println(SemanticIndex.meaningToString(si.getMeaning(s3)));}  }
class C{  public void newSampleData(double[] y,double[][] x,double[][] covariance){  validateSampleData(x,y);  newYSampleData(y);  newXSampleData(x);  validateCovarianceData(x,covariance);  newCovarianceData(covariance);}  }
class C{  protected Definition parseWSDLDefinition() throws WSDLException {  WSDLFactory wsdlFactory=WSDLFactory.newInstance();  WSDLReader reader=wsdlFactory.newWSDLReader();  reader.setFeature("javax.wsdl.verbose",false);  reader.setFeature("javax.wsdl.importDocuments",true);  Definition definition=reader.readWSDL(this.wsdlLocation);  return definition;}  }
class C{  public void notifyRequestDialogObservers(Npc npc){  notifyObservers(ObserverType.NPCDIALOGREQUEST,npc);}  }
class C{  public synchronized ChangeReport onEquipmentConfigurationUpdate(final EquipmentConfigurationUpdate equipmentConfigurationUpdate){  long equipmentId=equipmentConfigurationUpdate.getEquipmentId();  ChangeReport changeReport=new ChangeReport(equipmentConfigurationUpdate);  ProcessConfiguration configuration=ProcessConfigurationHolder.getInstance();  try {    EquipmentConfiguration equipmentConfiguration=configuration.getEquipmentConfiguration(equipmentId);    if (equipmentConfiguration != null) {      EquipmentConfiguration clonedEquipmentConfiguration=equipmentConfiguration.clone();synchronized (equipmentConfiguration) {        configurationUpdater.updateEquipmentConfiguration(equipmentConfigurationUpdate,equipmentConfiguration);      }      IEquipmentConfigurationChanger equipmentConfigurationChanger=equipmentChangers.get(equipmentId);      equipmentConfigurationChanger.onUpdateEquipmentConfiguration(equipmentConfiguration,clonedEquipmentConfiguration,changeReport);      if (changeReport.getState().equals(CHANGE_STATE.SUCCESS)) {        List<ICoreEquipmentConfigurationChanger> coreChangers=coreEquipmentConfigurationChangers.get(equipmentId);        if (coreChangers != null) {          for (          ICoreEquipmentConfigurationChanger equipmentChanger : coreChangers) {            equipmentChanger.onUpdateEquipmentConfiguration(equipmentConfiguration,clonedEquipmentConfiguration,changeReport);          }        }        changeReport.appendInfo("Change fully applied.");      } else {        configuration.getEquipmentConfigurations().put(equipmentId,clonedEquipmentConfiguration);      }    } else {      changeReport.appendError("Equipment configuration with id: " + equipmentId + " not found.");    }  } catch (  Exception e) {    changeReport.appendError("Error while applying equipment changes: " + e.getMessage());  }  return changeReport;}  }
class C{  public WallGetCommentsQuery previewLength(Integer value){  return unsafeParam("preview_length",value);}  }
class C{  public <T>T until(ExpectedCondition<T> condition,long delay){  webDriver.manage().timeouts().implicitlyWait(IMPLICITLY_WAIT_TIME,TimeUnit.SECONDS);  final T result=new WebDriverWait(webDriver,timeOutInSeconds,delay * 1000L).until(condition);  webDriver.manage().timeouts().implicitlyWait(defaultTimeout,TimeUnit.SECONDS);  return result;}  }
class C{  @Override public void updateValue(String key,Color backgroundColour){  String value=String.format("%03d%s%03d%s%03d%s%03d",backgroundColour.getRed(),DELIMETER,backgroundColour.getGreen(),DELIMETER,backgroundColour.getBlue(),DELIMETER,backgroundColour.getAlpha());  updateValue(key,value);}  }
class C{  public static double angle2Radian(double angle){  return angle / 180 * Math.PI;}  }
class C{  private String rateLabels2RelativeValues(String rateAttribute){  if (rateAttribute.equals("x-slow")) {    return "-50%";  } else   if (rateAttribute.equals("slow")) {    return "-33.3%";  } else   if (rateAttribute.equals("medium")) {    return "+0%";  } else   if (rateAttribute.equals("fast")) {    return "+33%";  } else   if (rateAttribute.equals("x-fast")) {    return "+100%";  }  return "+0%";}  }
class C{  @Override public long recordsOutput(){  return (long)histogram().recordsOutput();}  }
class C{  private VersionData(Class<?> vendorOptionType,String name,int version){  this.isNotSet=false;  this.vendorOptionType=vendorOptionType;  this.versionString=name;  this.majorNumber=version;  this.minorNumber=version;  this.pointNumber=version;}  }
class C{  private void testUniqueProperty(UniqueVarProperty property){  getProperty(property.getClass()).filter(null).ifPresent(null);}  }
class C{  private void fillNonNullFields(final Object baseObject,final Object targetObject,final String... exceptions) throws IllegalAccessException, NoSuchFieldException {  fillNonNullFields(baseObject,targetObject,Arrays.asList(exceptions));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPHeal_INTERVAL_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200366,num0,skillname);}  }
class C{  public static String lowerFirstChar(String string){  if (string == null)   return null;  if (string.length() <= 1)   return string.toLowerCase();  StringBuilder sb=new StringBuilder(string);  sb.setCharAt(0,Character.toLowerCase(sb.charAt(0)));  return sb.toString();}  }
class C{  public static void replaceSystemOut(){  final ThreadPrintStream threadStdOut=new ThreadPrintStream();  System.setOut(threadStdOut);  System.setErr(threadStdOut);  threadStdOut.setThreadOut(stdout);}  }
class C{  public SubEquipmentUnitRemove(final Long changeId,final Long subEquipmentId,final Long parentId){  setChangeId(changeId);  setSubEquipmentId(subEquipmentId);  setParentEquipmentId(parentId);}  }
class C{  public double covariance(final double[] xArray,final double[] yArray) throws MathIllegalArgumentException {  return covariance(xArray,yArray,true);}  }
class C{  private void addPathCenteredConnectionOnSameAnchor(ViewTransform transform,Graphics2D g,boolean isSelected,ConnectionDrawing drawing,ConstraintHandle targetHandle,ConstraintWidget targetWidget){  float l=getOwner().getDrawX();  float t=getOwner().getDrawY();  float r=getOwner().getDrawRight();  float b=getOwner().getDrawBottom();  float w=getOwner().getDrawWidth();  float h=getOwner().getDrawHeight();  int radius=8;  float connectionX=l + w / 2f + radius;  float connectionY=t + h / 2f + radius;  int connectionRadius=16;  int curvature=2;  connectionX=Math.max(targetHandle.getDrawX() + ConnectionDraw.ARROW_SIDE + radius,connectionX);  connectionY=Math.max(targetHandle.getDrawY() + ConnectionDraw.ARROW_SIDE + radius,connectionY);  boolean rightConnection=true;  if (targetHandle.getAnchor().getType() == ConstraintAnchor.Type.LEFT) {    rightConnection=false;    connectionX=l + w / 2f - radius;    connectionX=Math.min(targetHandle.getDrawX() - ConnectionDraw.ARROW_SIDE - radius,connectionX);  }  boolean bottomConnection=true;  if (targetHandle.getAnchor().getType() == ConstraintAnchor.Type.TOP) {    bottomConnection=false;    connectionY=t + h / 2f - radius;    connectionY=Math.min(targetHandle.getDrawY() - ConnectionDraw.ARROW_SIDE - radius,connectionY);  }  float xt=targetHandle.getDrawX();  float yt=targetHandle.getDrawY();  if (mAnchor.getType() == ConstraintAnchor.Type.LEFT || mAnchor.getType() == ConstraintAnchor.Type.RIGHT) {    float x0=mX;    float y0=mY;    float x1=mX - radius;    float y1=mY - radius;    boolean isRightConnection=mAnchor.getType() == ConstraintAnchor.Type.RIGHT;    boolean isAboveConnection=(targetWidget.getDrawY() + targetWidget.getDrawHeight() / 2) < (getOwner().getDrawY() + getOwner().getDrawHeight() / 2);    drawing.mPath.moveTo(transform.getSwingFX(x0),transform.getSwingFY(y0));    if (isSelected) {      Stroke preStroke=g.getStroke();      g.setStroke(ConnectionDraw.sDashedStroke);      int centerX=transform.getSwingFX(l + w / 2f);      if (isAboveConnection) {        g.drawLine(centerX,transform.getSwingFY(t),centerX,transform.getSwingY(targetWidget.getDrawBottom()));      } else {        g.drawLine(centerX,transform.getSwingFY(b),centerX,transform.getSwingY(targetWidget.getDrawY()));      }      g.setStroke(preStroke);    }    if (isRightConnection) {      x1=mX + radius;    }    if (!isAboveConnection) {      y1=mY + radius;    }    addQuarterArc(drawing.mPath,transform.getSwingFX(x0),transform.getSwingFY(y0),transform.getSwingFX(x1),transform.getSwingFY(y1),curvature,false);    float x2=x1;    float y2=Math.min(t,y1);    float x3=mX;    float y3=Math.min(t - radius,y2 - radius);    if (!isAboveConnection) {      y2=Math.max(b,y1);      y3=Math.min(b + radius,y2 + radius);    }    drawing.mPath.lineTo(transform.getSwingFX(x2),transform.getSwingFY(y2));    addQuarterArc(drawing.mPath,transform.getSwingFX(x2),transform.getSwingFY(y2),transform.getSwingFX(x3),transform.getSwingFY(y3),curvature,true);    float x4=Math.max(x3,connectionX - connectionRadius);    if (isRightConnection) {      x4=Math.min(x3,connectionX + connectionRadius);    }    float y4=y3;    drawing.mPath.lineTo(transform.getSwingFX(x4),transform.getSwingFY(y4));    float x5=connectionX;    float y5=y4 - radius;    if (!isAboveConnection) {      y5=y4 + radius;    }    addQuarterArc(drawing.mPath,transform.getSwingFX(x4),transform.getSwingFY(y4),transform.getSwingFX(x5),transform.getSwingFY(y5),curvature,false);    float y6=yt + radius;    if (!isAboveConnection) {      y6=yt - radius;    }    drawing.mPath.lineTo(transform.getSwingFX(connectionX),transform.getSwingFY(y6));    int sxt=transform.getSwingFX(xt);    int syt=transform.getSwingFY(yt);    if (targetHandle.getAnchor().isConnected()) {      syt=t < yt ? syt - sConnectionOffset : syt + sConnectionOffset;    }    if (rightConnection) {      addQuarterArc(drawing.mPath,transform.getSwingFX(connectionX),transform.getSwingFY(y6),sxt + ConnectionDraw.ARROW_SIDE,syt,curvature,true);      drawing.setArrow(ConnectionDraw.getLeftArrow(),sxt,syt);    } else {      addQuarterArc(drawing.mPath,transform.getSwingFX(connectionX),transform.getSwingFY(y6),sxt - ConnectionDraw.ARROW_SIDE,syt,curvature,true);      drawing.setArrow(ConnectionDraw.getRightArrow(),sxt,syt);    }  } else   if (mAnchor.getType() == ConstraintAnchor.Type.TOP || mAnchor.getType() == ConstraintAnchor.Type.BOTTOM) {    float x0=mX;    float y0=mY;    float x1=mX - radius;    float y1=mY - radius;    boolean isBottomConnection=mAnchor.getType() == ConstraintAnchor.Type.BOTTOM;    boolean isLeftConnection=(targetWidget.getDrawX() + targetWidget.getDrawWidth() / 2) < (getOwner().getDrawX() + getOwner().getDrawWidth() / 2);    drawing.mPath.moveTo(transform.getSwingFX(x0),transform.getSwingFY(y0));    if (isSelected) {      Stroke preStroke=g.getStroke();      g.setStroke(ConnectionDraw.sDashedStroke);      int centerY=transform.getSwingFY(t + h / 2f);      if (isLeftConnection) {        g.drawLine(transform.getSwingFX(targetWidget.getDrawRight()),centerY,transform.getSwingFX(l),centerY);      } else {        g.drawLine(transform.getSwingFX(r),centerY,transform.getSwingFX(targetWidget.getDrawX()),centerY);      }      g.setStroke(preStroke);    }    if (isBottomConnection) {      y1=mY + radius;    }    if (!isLeftConnection) {      x1=mX + radius;    }    addQuarterArc(drawing.mPath,transform.getSwingFX(x0),transform.getSwingFY(y0),transform.getSwingFX(x1),transform.getSwingFY(y1),curvature,true);    float y2=y1;    float x2=Math.min(l,x1);    float y3=mY;    float x3=Math.min(l - radius,x2 - radius);    if (!isLeftConnection) {      x2=Math.max(r,x1);      x3=Math.min(r + radius,x2 + radius);    }    drawing.mPath.lineTo(transform.getSwingFX(x2),transform.getSwingFY(y2));    addQuarterArc(drawing.mPath,transform.getSwingFX(x2),transform.getSwingFY(y2),transform.getSwingFX(x3),transform.getSwingFY(y3),curvature,false);    float y4=Math.max(y3,connectionY - connectionRadius);    if (isBottomConnection) {      y4=Math.min(y3,connectionY + connectionRadius);    }    float x4=x3;    drawing.mPath.lineTo(transform.getSwingFX(x4),transform.getSwingFY(y4));    float y5=connectionY;    float x5=x4 - radius;    if (!isLeftConnection) {      x5=x4 + radius;    }    addQuarterArc(drawing.mPath,transform.getSwingFX(x4),transform.getSwingFY(y4),transform.getSwingFX(x5),transform.getSwingFY(y5),curvature,true);    float x6=xt + radius;    if (!isLeftConnection) {      x6=xt - radius;    }    drawing.mPath.lineTo(transform.getSwingFX(x6),transform.getSwingFY(connectionY));    int sxt=transform.getSwingFX(xt);    int syt=transform.getSwingFY(yt);    if (targetHandle.getAnchor().isConnected()) {      sxt=l < xt ? sxt - sConnectionOffset : sxt + sConnectionOffset;    }    if (bottomConnection) {      addQuarterArc(drawing.mPath,transform.getSwingFX(x6),transform.getSwingFY(connectionY),sxt,syt + ConnectionDraw.ARROW_SIDE,curvature,false);      drawing.setArrow(ConnectionDraw.getTopArrow(),sxt,syt);    } else {      addQuarterArc(drawing.mPath,transform.getSwingFX(x6),transform.getSwingFY(connectionY),sxt,syt - ConnectionDraw.ARROW_SIDE,curvature,false);      drawing.setArrow(ConnectionDraw.getBottomArrow(),sxt,syt);    }  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysParry_A_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200941,skilltarget,skillcaster,skillname);}  }
class C{  public static float buildFloat(int mant,int exp){  if (exp < -125 || mant == 0) {    return 0.0f;  }  if (exp >= 128) {    return (mant > 0) ? Float.POSITIVE_INFINITY : Float.NEGATIVE_INFINITY;  }  if (exp == 0) {    return mant;  }  if (mant >= (1 << 26)) {    mant++;  }  return (float)((exp > 0) ? mant * pow10[exp] : mant / pow10[-exp]);}  }
class C{  private void checkFloat(float expected,String string,int delta){  int expectedBits=Float.floatToRawIntBits(expected);  BytesRef bytes=getBytes(string);  final float v;  try {    v=MathUtil.parseFloat(bytes.bytes,bytes.offset,bytes.length);  } catch (  Throwable t) {    throw new AssertionError(string + " didn't parse to " + expected+ ", instead hit "+ t,t);  }  try {    int actualBits=Float.floatToRawIntBits(v);    int actualDelta=Math.abs(expectedBits - actualBits);    if (actualDelta > delta) {      throw new AssertionError("expected: <" + expectedBits + "> but was:<"+ actualBits+ ">");    }  } catch (  Throwable t) {    throw new AssertionError(string + " didn't parse to " + expected+ ", instead: "+ v,t);  }}  }
class C{  static TxnMgrAdminProxy create(TxnManager txnMgr,Uuid id){  if (txnMgr instanceof RemoteMethodControl) {    return new ConstrainableTxnMgrAdminProxy(txnMgr,id,null);  } else {    return new TxnMgrAdminProxy(txnMgr,id);  }}  }
class C{  public static void logBasePageProtocol(boolean isHttpBasePage){  RecordHistogram.recordEnumeratedHistogram("Search.ContextualSearchBasePageProtocol",isHttpBasePage ? PROTOCOL_IS_HTTP : PROTOCOL_NOT_HTTP,PROTOCOL_BOUNDARY);}  }
class C{  @Override protected final boolean processData(ByteBuffer data){  if (!decrypt(data)) {    return false;  }  AionClientPacket pck=AionPacketHandlerFactory.handle(data,this);  if ((pck != null) && pck.read()) {    processor.executePacket(pck);  }  return true;}  }
class C{  private CountingThreadPoolExecutor createExecutor(int numThreads){  return new CountingThreadPoolExecutor(numThreads,Integer.MAX_VALUE,30,TimeUnit.SECONDS,new LinkedBlockingQueue<Runnable>());}  }
class C{  public void copy(Matrix4f matrix){  if (null == matrix) {    loadIdentity();  } else {    m00=matrix.m00;    m01=matrix.m01;    m02=matrix.m02;    m03=matrix.m03;    m10=matrix.m10;    m11=matrix.m11;    m12=matrix.m12;    m13=matrix.m13;    m20=matrix.m20;    m21=matrix.m21;    m22=matrix.m22;    m23=matrix.m23;    m30=matrix.m30;    m31=matrix.m31;    m32=matrix.m32;    m33=matrix.m33;  }}  }
class C{  public void deepSort(String[] setFeatureSequence){  featureSequence=featureDefinition.getFeatureIndexArray(setFeatureSequence);  numberOfLeaves=0;  tree=new MaryNode(0,featureVectors.length);  sortNode(0,tree);}  }
class C{  public NumericHaving withValue(Number value){  return new NumericHaving(getType(),getAggregation(),value);}  }
class C{  public int compareTo(cp_info constant_pool[],cp_info cp,cp_info cp_constant_pool[]){  if (tag != cp.tag)   return tag - cp.tag;  CONSTANT_Class_info cu=(CONSTANT_Class_info)cp;  return ((CONSTANT_Utf8_info)(constant_pool[name_index])).compareTo(cp_constant_pool[cu.name_index]);}  }
class C{  public void delete(int key){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    if (mValues[i] != DELETED) {      mValues[i]=DELETED;      mGarbage=true;    }  }}  }
class C{  protected int applyDistinct(){  int numAutoSelections=0;  boolean distinct;  if (query.autoDistinct) {    distinct=query.autoDistinct && !query.autoGroupBy && backend.hasManyRootsFetchesOrJoins();    if (distinct) {      numAutoSelections=addOrderExpressionsToSelection();    }  } else {    distinct=query.distinct;  }  if (distinct) {    backend.distinct();  }  return numAutoSelections;}  }
class C{  public static boolean isUpdate(int mod){  return (mod & NOTIFY_UPDATE) != 0;}  }
class C{  public static void dataReductionProxyLoFiUIAction(int action){  assert action >= 0 && action < LOFI_ACTION_INDEX_BOUNDARY;  RecordHistogram.recordEnumeratedHistogram("DataReductionProxy.LoFi.UIAction",action,DataReductionProxyUma.LOFI_ACTION_INDEX_BOUNDARY);}  }
class C{  public boolean wantTag(Tag t){  return (t instanceof FieldWriteTag);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SpellATK_A_TO_B(String skillcaster,String skillname,String skilltarget){  return new SM_SYSTEM_MESSAGE(1201024,skillcaster,skillname,skilltarget);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ArrayInit fullCopy(){  ArrayInit tree=(ArrayInit)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  @Override public JSONArray format(Passage[] passages,String content){  assert passages.length == 1;  Passage passage=passages[0];  String[] chunks=content.split(Constants.INFORMATION_SEP_REGEX);  JSONArray result=new JSONArray();  int matchUpto=0;  int charOffset=0;  for (  String chunk : chunks) {    JSONArray part=new JSONArray();    result.add(part);    int pos=0;    int posEnd=chunk.length();    while (matchUpto < passage.getNumMatches()) {      int start=passage.getMatchStarts()[matchUpto] - charOffset;      if (start >= posEnd) {        break;      }      if (start > pos) {        part.add(chunk.substring(pos,start));        pos=start;      }      JSONObject match=new JSONObject();      part.add(match);      int end=passage.getMatchEnds()[matchUpto] - charOffset;      match.put("text",chunk.substring(start,end));      match.put("term",passage.getMatchTerms()[matchUpto].utf8ToString());      pos=end;      matchUpto++;    }    if (pos < chunk.length()) {      part.add(chunk.substring(pos));      pos=chunk.length();    }    charOffset+=chunk.length() + 1;  }  return result;}  }
class C{  public MessagesGetQuery(VkApiClient client,Actor actor){  super(client,"messages.get",GetResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  public SingleLinkClusterer(){  ClusteringsInTime=new ArrayList();  Hierarchy=new UniqueVertexGraph();}  }
class C{  @Override public void redo(Transaction tx){}  }
class C{  public void applyEffectDirectly(int skillId,Creature effector,Creature effected,int duration,boolean noRemoveAtDie){  SkillTemplate st=DataManager.SKILL_DATA.getSkillTemplate(skillId);  if (st == null) {    return;  }  final Effect ef=new Effect(effector,effected,st,st.getLvl(),duration);  ef.setIsForcedEffect(true);  ef.initialize();  if (duration > 0) {    ef.setForcedDuration(true);  }  ef.getSkillTemplate().setNoRemoveAtDie(noRemoveAtDie);  ef.applyEffect();}  }
class C{  MergedManifest(@NotNull Module module){  myModule=module;}  }
class C{  public static StatefulHash sha256(){  return Hashes.createStateful(SimpleHashParameters.SHA256);}  }
class C{  public synchronized void reset(){  initSeq=nextSeq;}  }
class C{  public void addLive(boolean live){  query.append(" +live:" + live);}  }
class C{  final public void error(Throwable e){  if (log.isErrorEnabled())   log.error(e.getMessage(),e);  StringWriter sw=new StringWriter();  PrintWriter out=new PrintWriter(sw);  e.printStackTrace(out);  String s=sw.toString();  if (isAjax()) {    JSON jo=JSON.create();    jo.put(X.STATE,HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    jo.put(X.MESSAGE,s);    this.response(jo);  } else {    this.set("me",this.getUser());    String lineSeparator=System.lineSeparator();    s=s.replaceAll(lineSeparator,"<br/>");    s=s.replaceAll(" ","&nbsp;");    s=s.replaceAll("\t","&nbsp;&nbsp;&nbsp;&nbsp;");    this.set("error",s);    this.show("/error.html");    setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);  }}  }
class C{  public Iterator<T> asIterator(){  return new BlockingIterator();}  }
class C{  private <T extends ClientRequestResult>Collection<T> executeNameRequest(final Collection<String> regexList,final Class<T> clazz,final ClientRequestReportListener reportListener,final String requestQueue){  LOGGER.debug("Initiating client request.");  ClientRequestImpl<T> clientRequest=new ClientRequestImpl<T>(clazz);  Iterator<String> it=regexList.iterator();  Collection<Future<Collection<T>>> results=new ArrayList<Future<Collection<T>>>();  int counter=0;  while (it.hasNext()) {    while (it.hasNext() && counter < maxRequestSize) {      clientRequest.addRegex(it.next());      counter++;    }    RequestValuesTask<T> task=new RequestValuesTask<T>(clientRequest,reportListener,requestQueue);    results.add(executor.submit(task));    clientRequest=new ClientRequestImpl<T>(clazz);    counter=0;  }  Collection<T> finalCollection=new ArrayList<T>();  for (  Future<Collection<T>> result : results) {    try {      finalCollection.addAll(result.get());    } catch (    InterruptedException e) {      LOGGER.error("InterruptedException caught while executing RequestValuesTask.",e);      throw new RuntimeException(e);    }catch (    ExecutionException e) {      LOGGER.error("ExecutionException caught while executing RequestValuesTask.",e);      throw new RuntimeException(e);    }  }  LOGGER.debug("Client request completed.");  return finalCollection;}  }
class C{  @Override public boolean accept(File directory,String fileName){  if (!super.accept(directory,fileName))   return false;  String[] firstLines=Basic.getFirstLinesFromFile(new File(fileName),2);  return firstLines != null && firstLines.length == 2 && firstLines[0].startsWith(">") && Basic.contains(firstLines[1],';',2) && !firstLines[1].toLowerCase().contains("root");}  }
class C{  public Builder bitmapTransformerFactory(@Nullable BitmapTransformer.Factory bitmapTransformerFactory){  this.bitmapTransformerFactory=bitmapTransformerFactory;  return this;}  }
class C{  private static boolean clientOverwriteableOverwrites(SootMethod m){  if (clientOverwriteable(m))   return true;  SootClass c=m.getDeclaringClass();  for (  SootClass cPrime : Scene.v().getFastHierarchy().getSubclassesOf(c)) {    SootMethod mPrime=cPrime.getMethodUnsafe(m.getSubSignature());    if (mPrime != null) {      if (clientOverwriteable(mPrime))       return true;    }  }  return false;}  }
class C{  public static boolean FlymeSetStatusBarLightMode(Window window,boolean dark){  boolean result=false;  if (window != null) {    try {      WindowManager.LayoutParams lp=window.getAttributes();      Field darkFlag=WindowManager.LayoutParams.class.getDeclaredField("MEIZU_FLAG_DARK_STATUS_BAR_ICON");      Field meizuFlags=WindowManager.LayoutParams.class.getDeclaredField("meizuFlags");      darkFlag.setAccessible(true);      meizuFlags.setAccessible(true);      int bit=darkFlag.getInt(null);      int value=meizuFlags.getInt(lp);      if (dark) {        value|=bit;      } else {        value&=~bit;      }      meizuFlags.setInt(lp,value);      window.setAttributes(lp);      result=true;    } catch (    Exception e) {    }  }  return result;}  }
class C{  public static Uuid create(long bits0,long bits1){  return new Impl(bits0,bits1);}  }
class C{  @Override public void attributeSelection(String field){}  }
class C{  protected void spawnHelpers(int npcId,float x,float y,float z,byte h,int count,int action){  if (isHome.equals(true) || isAlreadyDead()) {    return;  }  for (int i=0; i < count; i++) {    SpawnTemplate summon=SpawnEngine.addNewSingleTimeSpawn(getPosition().getMapId(),npcId,x,y,z,h);    VisibleObject npc=SpawnEngine.spawnObject(summon,getPosition().getInstanceId());    PacketSendUtility.broadcastPacket(getOwner(),new SM_NPC_INFO((Npc)npc,""));    addHelpersSpawn(npc.getObjectId());switch (action) {case 1:      moveToForward((Npc)npc,633.7391f,455.4411f,135.82466f,false);    break;case 2:  moveToForward((Npc)npc,639.51807f,455.4411f,135.82466f,false);break;case 3:moveToForward((Npc)npc,636.39575f,455.4411f,135.82466f,false);break;}}}  }
class C{  private Dict parseDict(NodeList elements) throws ParseException {  Dict dict=new Dict();  for (int i=0; i < elements.getLength(); i++) {    Node key=elements.item(i);    if (key.getNodeType() != Node.ELEMENT_NODE) {      continue;    }    if (!"key".equals(key.getNodeName())) {      throw new ParseException("Expected key but was " + key.getNodeName(),-1);    }    i++;    Node value=elements.item(i);    while (value.getNodeType() != Node.ELEMENT_NODE) {      i++;      value=elements.item(i);    }    Object o=parseElementRaw(value);    String dictName=getValue(key);    dict.children.put(dictName,o);  }  return dict;}  }
class C{  public static String pack_metadata(NameValuePair[] meta_list){  if (meta_list.length == 0) {    return "";  }  StringBuffer sb=new StringBuffer(32 * meta_list.length);  sb.append(meta_list[0].getName()).append(FDFS_FIELD_SEPERATOR).append(meta_list[0].getValue());  for (int i=1; i < meta_list.length; i++) {    sb.append(FDFS_RECORD_SEPERATOR);    sb.append(meta_list[i].getName()).append(FDFS_FIELD_SEPERATOR).append(meta_list[i].getValue());  }  return sb.toString();}  }
class C{  public void drawNodeAndLabel(Node v,boolean selected){  draw(v,selected);  drawLabel(v,selected);}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  private static void attemptRetryOnException(String logPrefix,Request<?> request,VolleyError exception) throws VolleyError {  RetryPolicy retryPolicy=request.getRetryPolicy();  int oldTimeout=request.getTimeoutMs();  try {    retryPolicy.retry(exception);  } catch (  VolleyError e) {    request.addMarker(String.format("%s-timeout-giveup [timeout=%s]",logPrefix,oldTimeout));    throw e;  }  request.addMarker(String.format("%s-retry [timeout=%s]",logPrefix,oldTimeout));}  }
class C{  @Override public void execute(JobExecutionContext context) throws JobExecutionException {  if (isEnabled() == false) {    return;  }  if (Singleton.getBackgroundJobsEnabled() == false) {    return;  }  Thread.currentThread().setPriority(Thread.MIN_PRIORITY);  while (CodeIndexer.shouldPauseAdding()) {    Singleton.getLogger().info("Pausing parser.");    return;  }  UniqueRepoQueue repoQueue=this.getNextQueuedRepo();  RepoResult repoResult=repoQueue.poll();  AbstractMap<String,Integer> runningIndexRepoJobs=Singleton.getRunningIndexRepoJobs();  if (repoResult != null && !runningIndexRepoJobs.containsKey(repoResult.getName())) {    Singleton.getLogger().info("File Indexer Indexing " + repoResult.getName());    try {      runningIndexRepoJobs.put(repoResult.getName(),(int)(System.currentTimeMillis() / 1000));      JobDataMap data=context.getJobDetail().getJobDataMap();      String repoName=repoResult.getName();      this.repoName=repoName;      String repoRemoteLocation=repoResult.getUrl();      String repoLocations=data.get("REPOLOCATIONS").toString();      this.LOWMEMORY=Boolean.parseBoolean(data.get("LOWMEMORY").toString());      Path docDir=Paths.get(repoRemoteLocation);      this.indexDocsByPath(docDir,repoName,repoLocations,repoRemoteLocation,true);    }  finally {      runningIndexRepoJobs.remove(repoResult.getName());    }  }}  }
class C{  public static int bestRoot(long size,Transaction tx){  int avail=tx.bufferMgr().available();  if (avail <= 1)   return 1;  int k=Integer.MAX_VALUE;  double i=1.0;  while (k > avail) {    i++;    k=(int)Math.ceil(Math.pow(size,1 / i));  }  return k;}  }
class C{  private void finishInteraction(@SwingCoordinate int x,@SwingCoordinate int y,int modifiers,boolean canceled){  if (myCurrentInteraction != null) {    myCurrentInteraction.end(x,y,modifiers,canceled);    if (myLayers != null) {      for (      Layer layer : myLayers) {        layer.dispose();      }      myLayers=null;    }    myCurrentInteraction=null;    ourLastStateMask=0;    updateCursor(x,y);    mySurface.repaint();  }}  }
class C{  private void postRecoveryActions(ISpaceSynchronizeReplicaState recoveryState) throws Exception {  changeSpaceState(ISpaceState.STARTING,true,true);  if (recoveryState != null) {    int replicationSynchronizationTimeout=5 * 60;    try {      long syncStartTime=SystemTime.timeMillis();      ISpaceSynchronizeResult synchronizeResult=recoveryState.waitForSynchronizeCompletion(replicationSynchronizationTimeout,TimeUnit.SECONDS);      if (synchronizeResult != null) {        if (synchronizeResult.isFailed()) {          if (_logger.isLoggable(Level.WARNING))           _logger.warning("Synchronization failed: " + synchronizeResult.getFailureReason());          throw synchronizeResult.getFailureReason();        }        if (getEngine().getReplicationNode() != null && getEngine().getReplicationNode().getDirectPesistencySyncHandler() != null) {          getEngine().getReplicationNode().getDirectPesistencySyncHandler().afterRecovery();          getEngine().getReplicationNode().setDirectPersistencyBackupSyncIteratorHandler(null);        }        if (getDirectPersistencyRecoveryHelper() != null && isBackup()) {          getDirectPersistencyRecoveryHelper().setPendingBackupRecovery(false);        }        if (_logger.isLoggable(Level.INFO)) {          long duration=SystemTime.timeMillis() - syncStartTime;          _logger.info("Synchronization completed [duration=" + JSpaceUtilities.formatMillis(duration) + "]");        }      }    } catch (    TimeoutException e) {      if (getEngine().getCacheManager().isOffHeapCachePolicy()) {        if (_logger.isLoggable(Level.SEVERE))         _logger.severe("Timeout occurred [" + replicationSynchronizationTimeout + " seconds] while waiting for replication to synchronize. Will shut down space since blobstore inconsistent space can't be started.");        throw e;      }      if (_logger.isLoggable(Level.WARNING))       _logger.warning("Timeout occurred [" + replicationSynchronizationTimeout + " seconds] while waiting for replication to synchronize. Starting the space without complete synchronization.");    }catch (    Exception e) {      changeSpaceState(ISpaceState.STARTING,true,false);      throw e;    }  }}  }
class C{  @Override public void endPrefixMapping(String prefix) throws SAXException {  if (saxParser != null) {    saxParser.endPrefixMapping(prefix);  }}  }
class C{  public void abortAnimation(){  mFinished=true;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_Recall_DONOT_ACCEPT_EFFECT(String value0){  return new SM_SYSTEM_MESSAGE(1400098,value0);}  }
class C{  public int prepare(Object xid) throws CannotCommitException, UnknownTransactionException, RemoteException {  if (operationsLogger.isLoggable(Level.FINER)) {    operationsLogger.entering(TxnManagerImpl.class.getName(),"prepare-xid",xid);  }  TxnManagerTransaction txntr=_txns.get(xid);  if (txntr == null)   throw new UnknownTransactionException("unknown transaction");  return txntr.prepare(Long.MAX_VALUE);}  }
class C{  public static void addStoneStats(Item item,ManaStone stone,CreatureGameStats<?> cgs){  List<StatFunction> modifiers=stone.getModifiers();  if (modifiers == null) {    return;  }  cgs.addEffect(stone,modifiers);}  }
class C{  public boolean checkRemove(DataSource removeRoot){  return true;}  }
class C{  public boolean isApplicable(){  return getViewer().getParentViewer() != null && getViewer().getParentViewer().hasComparableData() && getViewer().getParentViewer().getSelectedNodes().size() > 0;}  }
class C{  public Bitmap put(String key,Bitmap value){  return cache.put(key,value);}  }
class C{  public static JAXBContext createTtmlJaxbContext() throws JAXBException {  return JAXBContext.newInstance(TTML_PACKAGES);}  }
class C{  public TemplateDruidQuery withGranularity(ZonelessTimeGrain newTimeGrain){  return new TemplateDruidQuery(aggregations,postAggregations,nestedQuery,newTimeGrain);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UI_DISCOVERY_NEWZONE(String subzone){  return new SM_SYSTEM_MESSAGE(1300040,subzone);}  }
class C{  @Override public String toString(){  final StringBuilder builder=new StringBuilder(32);  builder.append("Functions []");  return builder.toString();}  }
class C{  public static MulticastAnnouncement decodeMulticastAnnouncement(ByteBuffer buf) throws IOException {  try {    long seq=buf.getLong();    String host=getUtf(buf);    int port=ushortToInt(buf.getShort());    String[] groups=new String[ushortToInt(buf.getShort())];    for (int i=0; i < groups.length; i++) {      groups[i]=getUtf(buf);    }    long idhi=buf.getLong();    long idlo=buf.getLong();    return new MulticastAnnouncement(seq,host,port,groups,new ServiceID(idhi,idlo));  } catch (  RuntimeException e) {    throw new DiscoveryProtocolException(null,e);  }}  }
class C{  public Object convertFieldValue(ModelField modelField,Object value,Delegator delegator,Map<String,? extends Object> context){  ModelFieldTypeReader modelFieldTypeReader=delegator.getModelFieldTypeReader(this);  return this.convertFieldValue(modelField,value,modelFieldTypeReader,context);}  }
class C{  private void sortDrawablesAZ(){  Sort.instance().sort(drawables,null);  refreshDrawableDisplay();}  }
class C{  public boolean isCyclic(){  return isCyclic;}  }
class C{  public RequestHandle put(String url,RequestParams params,ResponseHandlerInterface responseHandler){  return put(null,url,params,responseHandler);}  }
class C{  public static boolean isEmpty(String s){  return s == null || s.length() == 0;}  }
class C{  public static Map<String,Object> cdyneReturnCityState(DispatchContext dctx,Map<String,?> context){  String zipcode=(String)context.get("zipcode");  Locale locale=(Locale)context.get("locale");  String serviceUrl="http://ws.cdyne.com/psaddress/addresslookup.asmx/ReturnCityState?zipcode=" + zipcode + "&LicenseKey="+ licenseKey;  try {    String httpResponse=HttpClient.getUrlContent(serviceUrl);    Document addressDocument=UtilXml.readXmlDocument(httpResponse);    Element addressRootElement=addressDocument.getDocumentElement();    Map<String,Object> response=ServiceUtil.returnSuccess();    populateCdyneAddress(addressRootElement,response);    if ("true".equals(response.get("ServiceError"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneServiceError",UtilMisc.toMap("zipcode",zipcode),locale));    }    if ("true".equals(response.get("AddressError"))) {      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneAddressError",UtilMisc.toMap("zipcode",zipcode),locale));    }    return response;  } catch (  HttpClientException e) {    Debug.logError(e,"Error calling CDyne service at URL [" + serviceUrl + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneCallingError",UtilMisc.toMap("serviceUrl",serviceUrl,"errorString",e.toString()),locale));  }catch (  SAXException e) {    Debug.logError(e,"Error parsing XML result from CDyne service at URL [" + serviceUrl + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneParsingError",UtilMisc.toMap("serviceUrl",serviceUrl,"errorString",e.toString()),locale));  }catch (  ParserConfigurationException e) {    Debug.logError(e,"Error parsing XML result from CDyne service at URL [" + serviceUrl + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneParsingError",UtilMisc.toMap("serviceUrl",serviceUrl,"errorString",e.toString()),locale));  }catch (  IOException e) {    Debug.logError(e,"Error parsing XML result from CDyne service at URL [" + serviceUrl + "]: "+ e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"CommonCDyneParsingError",UtilMisc.toMap("serviceUrl",serviceUrl,"errorString",e.toString()),locale));  }}  }
class C{  public void endAddingQueries() throws IOException {  getFooterSectionRMA6().setEndReadsSection(readerWriter.getPosition());  getFooterSectionRMA6().setNumberOfReads(totalNumberOfReads);  getFooterSectionRMA6().setNumberOfMatches(totalNumberOfMatches);}  }
class C{  private void layoutChild(View child,int layoutDirection){  final LayoutParams lp=(LayoutParams)child.getLayoutParams();  final Rect parent=mTempRect1;  parent.set(getPaddingLeft() + lp.leftMargin,getPaddingTop() + lp.topMargin,getWidth() - getPaddingRight() - lp.rightMargin,getHeight() - getPaddingBottom() - lp.bottomMargin);  if (mLastInsets != null && ViewCompat.getFitsSystemWindows(this) && !ViewCompat.getFitsSystemWindows(child)) {    parent.left+=mLastInsets.getSystemWindowInsetLeft();    parent.top+=mLastInsets.getSystemWindowInsetTop();    parent.right-=mLastInsets.getSystemWindowInsetRight();    parent.bottom-=mLastInsets.getSystemWindowInsetBottom();  }  final Rect out=mTempRect2;  GravityCompat.apply(resolveGravity(lp.gravity),child.getMeasuredWidth(),child.getMeasuredHeight(),parent,out,layoutDirection);  child.layout(out.left,out.top,out.right,out.bottom);}  }
class C{  @Override public long limit(){  return fileLength;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXCHANGE_HE_REJECTED_EXCHANGE(String value0){  return new SM_SYSTEM_MESSAGE(1300354,value0);}  }
class C{  public static Prop use(String fileName){  return use(fileName,Constant.encoding);}  }
class C{  public byte[] compress(float[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  private void consumePreNestedScroll(int dx,int dy,int[] consumed){  if (mOverScrollEffect == OverScrollEffect.BOUNCE && mUnconsumedOverScrollOffset != 0) {    int destOffset=mUnconsumedOverScrollOffset - dy;    if (!MathUtils.sameSign(destOffset,mUnconsumedOverScrollOffset)) {      destOffset=0;    } else     if (Math.abs(destOffset) > Math.abs(mUnconsumedOverScrollOffset)) {      destOffset=mUnconsumedOverScrollOffset;    }    consumed[0]=0;    consumed[1]=mUnconsumedOverScrollOffset - destOffset;    mUnconsumedOverScrollOffset=destOffset;    setScrollingOffset(getUnconsumedScrollingOffset());  }}  }
class C{  public void startClassificationSection(String name) throws IOException {  currentName=name;  dumpStart=io.getPosition();  classificationIndexTmpFileWriter=new OutputWriter(rma2File.getClassificationIndexTmpFile());  numberOfClasses=0;}  }
class C{  protected static Map<String,String> convertHeaders(Header[] headers){  Map<String,String> result=new TreeMap<String,String>(String.CASE_INSENSITIVE_ORDER);  for (int i=0; i < headers.length; i++) {    result.put(headers[i].getName(),headers[i].getValue());  }  return result;}  }
class C{  public void copyResult(Object dst){  PurityGraph r=new PurityGraph();  Iterator it=graph.getTails().iterator();  while (it.hasNext()) {    Stmt stmt=(Stmt)it.next();    PurityGraphBox ref=(PurityGraphBox)getFlowAfter(stmt);    r.union(ref.g);  }  r.removeLocals();  ((PurityGraphBox)dst).g=r;}  }
class C{  public static <T extends RealFieldElement<T>>T angle(final FieldVector3D<T> v1,final FieldVector3D<T> v2) throws MathRuntimeException {  final T normProduct=v1.getNorm().multiply(v2.getNorm());  if (normProduct.getReal() == 0) {    throw new MathRuntimeException(LocalizedCoreFormats.ZERO_NORM);  }  final T dot=dotProduct(v1,v2);  final double threshold=normProduct.getReal() * 0.9999;  if ((dot.getReal() < -threshold) || (dot.getReal() > threshold)) {    FieldVector3D<T> v3=crossProduct(v1,v2);    if (dot.getReal() >= 0) {      return v3.getNorm().divide(normProduct).asin();    }    return v3.getNorm().divide(normProduct).asin().subtract(FastMath.PI).negate();  }  return dot.divide(normProduct).acos();}  }
class C{  public static Map<String,Integer> offsetMap(Schema sch){  int pos=0;  Map<String,Integer> offsetMap=new HashMap<String,Integer>();  for (  String fldname : sch.fields()) {    offsetMap.put(fldname,pos);    pos+=Page.maxSize(sch.type(fldname));  }  return offsetMap;}  }
class C{  private void initCachingHttpHeadersFilter(ServletContext servletContext,EnumSet<DispatcherType> disps){  log.debug("Registering Caching HTTP Headers Filter");  FilterRegistration.Dynamic cachingHttpHeadersFilter=servletContext.addFilter("cachingHttpHeadersFilter",new CachingHttpHeadersFilter(jHipsterProperties));  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/content/*");  cachingHttpHeadersFilter.addMappingForUrlPatterns(disps,true,"/app/*");  cachingHttpHeadersFilter.setAsyncSupported(true);}  }
class C{  public static Dfp log(Dfp a){  int lr;  Dfp x;  int ix;  int p2=0;  if (a.equals(a.getZero()) || a.lessThan(a.getZero()) || a.isNaN()) {    a.getField().setIEEEFlagsBits(DfpField.FLAG_INVALID);    return a.dotrap(DfpField.FLAG_INVALID,"ln",a,a.newInstance((byte)1,Dfp.QNAN));  }  if (a.classify() == Dfp.INFINITE) {    return a;  }  x=new Dfp(a);  lr=x.log10K();  x=x.divide(pow(a.newInstance(10000),lr));  ix=x.floor().intValue();  while (ix > 2) {    ix>>=1;    p2++;  }  Dfp[] spx=split(x);  Dfp[] spy=new Dfp[2];  spy[0]=pow(a.getTwo(),p2);  spx[0]=spx[0].divide(spy[0]);  spx[1]=spx[1].divide(spy[0]);  spy[0]=a.newInstance("1.33333");  while (spx[0].add(spx[1]).greaterThan(spy[0])) {    spx[0]=spx[0].divide(2);    spx[1]=spx[1].divide(2);    p2++;  }  Dfp[] spz=logInternal(spx);  spx[0]=a.newInstance(new StringBuilder().append(p2 + 4 * lr).toString());  spx[1]=a.getZero();  spy=splitMult(a.getField().getLn2Split(),spx);  spz[0]=spz[0].add(spy[0]);  spz[1]=spz[1].add(spy[1]);  spx[0]=a.newInstance(new StringBuilder().append(4 * lr).toString());  spx[1]=a.getZero();  spy=splitMult(a.getField().getLn5Split(),spx);  spz[0]=spz[0].add(spy[0]);  spz[1]=spz[1].add(spy[1]);  return a.newInstance(spz[0].add(spz[1]));}  }
class C{  public static String[] wrapString(@Nonnull String str,int maxWidth,@Nullable String[] output){  if (output == null) {    output=new String[(int)((str.length() / maxWidth) * 1.5d + 1)];  }  int lineStart=0;  int arrayIndex=0;  int i;  for (i=0; i < str.length(); i++) {    char c=str.charAt(i);    if (c == '\n') {      output=addString(output,str.substring(lineStart,i),arrayIndex++);      lineStart=i + 1;    } else     if (i - lineStart == maxWidth) {      output=addString(output,str.substring(lineStart,i),arrayIndex++);      lineStart=i;    }  }  if (lineStart != i || i == 0) {    output=addString(output,str.substring(lineStart),arrayIndex++,output.length + 1);  }  if (arrayIndex < output.length) {    output[arrayIndex]=null;  }  return output;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MASTER_NOT_MY_GUILD_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300272,value0);}  }
class C{  public static <K,V>ConcurrentHashMap<K,V> concurrentHashMap(int initialCapacity,float loadFactor){  return new ConcurrentHashMap<K,V>(initialCapacity);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_FPATK_INTERVAL_A_TO_B(String skilltarget,int num0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200975,skilltarget,num0,skillcaster,skillname);}  }
class C{  public void appendAudio(AudioInputStream audioToAppend){  if (this.audio == null)   setAudio(audioToAppend); else   if (this.audio instanceof AppendableSequenceAudioInputStream)   ((AppendableSequenceAudioInputStream)this.audio).append(audioToAppend); else   this.audio=new SequenceAudioInputStream(this.audio.getFormat(),Arrays.asList(this.audio,audioToAppend));}  }
class C{  public Zmat(double re[][],double im[][]) throws JampackException {  Parameters.BaseIndexNotChangeable=true;  basex=Parameters.BaseIndex;  nrow=re.length;  ncol=re[0].length;  if (nrow != im.length || ncol != im[0].length)   throw new JampackException("Inconsistent array dimensions");  getProperties();  this.re=new double[nr][nc];  this.im=new double[nr][nc];  for (int i=0; i < nr; i++)   for (int j=0; j < nc; j++) {    this.re[i][j]=re[i][j];    this.im[i][j]=im[i][j];  }}  }
class C{  private boolean interfacePreferred(PreferredClassLoader codebaseLoader,String[] interfaceNames,String codebase) throws ClassNotFoundException {  for (int p=0; p < interfaceNames.length; p++) {    try {      if (((PreferredClassLoader)codebaseLoader).isPreferredResource(interfaceNames[p],true)) {        return true;      }    } catch (    IOException e) {      ClassNotFoundException cnfe=new ClassNotFoundException(interfaceNames[p] + " (could not determine preferred setting;" + " original codebase: \""+ codebase+ "\")",e);      if (logger.isLoggable(Levels.FAILED)) {        LogUtil.logThrow(logger,Levels.FAILED,PreferredClassProvider.class,"loadProxyClass","class \"{0}\" not found, " + "could not obtain preferred value",new Object[]{interfaceNames[p]},cnfe);      }      throw cnfe;    }  }  return false;}  }
class C{  private FrameData(@NotNull DeviceData deviceData,@NotNull FrameData large){  myDeviceData=deviceData;  myDouble=large;  myOrientation=large.myOrientation;  myX=large.myX / 2;  myY=large.myY / 2;  myWidth=large.myWidth / 2;  myHeight=large.myHeight / 2;  myFrameWidth=large.myFrameWidth / 2;  myFrameHeight=large.myFrameHeight / 2;  myCropX1=0;  myCropY1=0;  myCropX2=myFrameWidth;  myCropY2=myFrameHeight;}  }
class C{  protected void nofityChange(){  if (observer != null) {    observer.onChange();  }}  }
class C{  @Provides @Singleton @SystemTablePlacement String provideSystemTablePlacement(DataStoreConfiguration config){  return config.getSystemTablePlacement();}  }
class C{  @Override @Timed public void removeIndexUserToBucket(User.ID userID,Experiment.ID experimentID,Context context,Bucket.Label bucketLabel){  final String CQL="delete from user_bucket_index " + "where experiment_id = ? and user_id = ? and context = ? and bucket_label = ?";  try {    PreparedCqlQuery<Application.Name,String> query=driver.getKeyspace().prepareQuery(keyspace.userExperimentIndexCF()).withCql(CQL).asPreparedStatement().withByteBufferValue(experimentID,ExperimentIDSerializer.get()).withByteBufferValue(userID,UserIDSerializer.get()).withStringValue(context.getContext()).withByteBufferValue(bucketLabel,BucketLabelSerializer.get());    query.execute();  } catch (  ConnectionException e) {    throw new RepositoryException("Could not delete index from user_bucket for user: " + userID + "to experiment: "+ experimentID,e);  }}  }
class C{  public void close() throws SQLException {  if (resultSet != null)   resultSet.close();}  }
class C{  public static void writeByte(PacketBuffer buf,byte value){  buf.writeByte(value);}  }
class C{  public static double interp(int scale,double val,double dist[]){switch (scale) {case Constants.LINEAR_SCALE:    return linearInterp(val,dist[0],dist[dist.length - 1]);case Constants.LOG_SCALE:  return logInterp(val,dist[0],dist[dist.length - 1]);case Constants.SQRT_SCALE:return sqrtInterp(val,dist[0],dist[dist.length - 1]);case Constants.QUANTILE_SCALE:return quantile(val,dist);}throw new IllegalArgumentException("Unrecognized scale value: " + scale);}  }
class C{  private boolean hasNewUniqueOrNotNullColumn(){  List<ColumnModel> columnModelList=mTableModel.getColumnModels();  for (  ColumnModel columnModel : columnModelList) {    ColumnModel columnModelDB=mTableModelDB.getColumnModelByName(columnModel.getColumnName());    if (columnModel.isUnique()) {      if (columnModelDB == null || !columnModelDB.isUnique()) {        return true;      }    }    if (columnModelDB != null && !columnModel.isNullable() && columnModelDB.isNullable()) {      return true;    }  }  return false;}  }
class C{  public void invalidate(String group){  Iterator items=items(group,ValidatedPredicate.TRUE);  while (items.hasNext()) {    VisualItem item=(VisualItem)items.next();    item.setValidated(false);  }}  }
class C{  public void inflateMenu(@MenuRes int resId){  mNavigationView.inflateMenu(resId);}  }
class C{  public static StructType structTypeForSchema(Schema schema){  List<StructField> fields=Lists.newArrayList();  for (  Field field : schema.getFields()) {    Type fieldType=field.schema().getType();    if (fieldType.equals(Type.UNION)) {      fieldType=field.schema().getTypes().get(1).getType();    }switch (fieldType) {case DOUBLE:      fields.add(DataTypes.createStructField(field.name(),DataTypes.DoubleType,true));    break;case FLOAT:  fields.add(DataTypes.createStructField(field.name(),DataTypes.FloatType,true));break;case INT:fields.add(DataTypes.createStructField(field.name(),DataTypes.IntegerType,true));break;case LONG:fields.add(DataTypes.createStructField(field.name(),DataTypes.LongType,true));break;case STRING:fields.add(DataTypes.createStructField(field.name(),DataTypes.StringType,true));break;case BOOLEAN:fields.add(DataTypes.createStructField(field.name(),DataTypes.BooleanType,true));break;default :throw new RuntimeException("Unsupported Avro field type: " + fieldType);}}return DataTypes.createStructType(fields);}  }
class C{  public static <S,K,V>Collector<S,?,LinkedHashMap<K,V>> toLinkedMap(Function<? super S,? extends K> keyMapper,Function<? super S,? extends V> valueMapper){  return Collectors.toMap(keyMapper,valueMapper,StreamUtils.throwingMerger(),null);}  }
class C{  public static boolean containsIgnoreCases(Collection<String> collection,String string){  if (collection == null) {    return false;  }  if (string == null) {    return collection.contains(null);  }  boolean contains=false;  for (  String element : collection) {    if (string.equalsIgnoreCase(element)) {      contains=true;      break;    }  }  return contains;}  }
class C{  private void needNewBuffer(int newcount){  if (currentBufferIndex < buffers.size() - 1) {    filledBufferSum+=currentBuffer.length;    currentBufferIndex++;    currentBuffer=buffers.get(currentBufferIndex);  } else {    int newBufferSize;    if (currentBuffer == null) {      newBufferSize=newcount;      filledBufferSum=0;    } else {      newBufferSize=Math.max(currentBuffer.length << 1,newcount - filledBufferSum);      filledBufferSum+=currentBuffer.length;    }    currentBufferIndex++;    currentBuffer=new byte[newBufferSize];    buffers.add(currentBuffer);  }}  }
class C{  private void scheduleFixedTasks(){  scheduler.scheduleTask(FileResourceCleanUpTask.KEY_TASK,fileResourceCleanUpTask,Scheduler.CRON_DAILY_2AM);  scheduler.scheduleTask(DataStatisticsTask.KEY_TASK,dataStatisticsTask,Scheduler.CRON_DAILY_2AM);}  }
class C{  public static int toInt(byte[] bytes){  int result=0;  byte abyte;  for (int i=0; i < bytes.length; i++) {    abyte=bytes[i];    result+=(abyte & 0xFF) << (8 * i);  }  return result;}  }
class C{  public FileRecordWriter(Configuration conf) throws FileNotFoundException {  setConf(conf);}  }
class C{  public Bundler putIntegerArrayList(String key,ArrayList<Integer> value){  bundle.putIntegerArrayList(key,value);  return this;}  }
class C{  public GroupsJoinQuery join(UserActor actor){  return new GroupsJoinQuery(getClient(),actor);}  }
class C{  public QueueReader newListener(){  return stream.reader();}  }
class C{  public static AudioInputStream convertSampleRate(AudioInputStream in,float sampleRate) throws IllegalArgumentException {  AudioInputStream converted;  AudioFormat sourceFormat, targetFormat;  if (in == null)   throw new IllegalArgumentException("the inputstream must not be null values");  if (sampleRate < 0 || sampleRate > in.getFormat().getSampleRate())   throw new IllegalArgumentException("the sample rate to convert to must be greater null and less or equal the sample rate of the input stream");  converted=in;  sourceFormat=in.getFormat();  targetFormat=new AudioFormat(AudioFormat.Encoding.PCM_SIGNED,sampleRate,sourceFormat.getSampleSizeInBits(),sourceFormat.getChannels(),sourceFormat.getFrameSize(),sampleRate,false);  if (sourceFormat.getSampleRate() != targetFormat.getSampleRate()) {    if (AudioSystem.isConversionSupported(targetFormat,sourceFormat))     converted=AudioSystem.getAudioInputStream(targetFormat,in); else     throw new IllegalArgumentException("Conversion to specified sample rate not supported.");  }  return converted;}  }
class C{  public static AirMap init(Context context,String authToken,boolean pinCertificates){  ourInstance=new AirMap(context,authToken,pinCertificates);  airMapTrafficService=new TrafficService(context);  airMapMapMappingService=new MappingService();  return ourInstance;}  }
class C{  public boolean put(int key,Object value){  int i=indexOfInsertion(key);  if (i < 0) {    i=-i - 1;    this.values[i]=value;    return false;  }  if (this.distinct > this.highWaterMark) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);    return put(key,value);  }  this.table[i]=key;  this.values[i]=value;  if (this.state[i] == FREE)   this.freeEntries--;  this.state[i]=FULL;  this.distinct++;  if (this.freeEntries < 1) {    int newCapacity=chooseGrowCapacity(this.distinct + 1,this.minLoadFactor,this.maxLoadFactor);    rehash(newCapacity);  }  return true;}  }
class C{  public SampleAttributeTable extractTable(Collection<String> samples){  SampleAttributeTable sampleAttributeTable=new SampleAttributeTable();  for (  String sample : getSampleOrder()) {    if (samples.contains(sample)) {      sampleAttributeTable.addSample(sample,getAttributesToValues(sample),true,true);    }  }  sampleAttributeTable.attributeOrder.clear();  sampleAttributeTable.attributeOrder.addAll(attributeOrder);  for (  String attribute : attribute2type.keySet()) {    sampleAttributeTable.attribute2type.put(attribute,attribute2type.get(attribute));  }  sampleAttributeTable.removeUndefinedAttributes();  return sampleAttributeTable;}  }
class C{  @Override public void addRow(){  EditSourceDialog input=showEditDialog(null);  if (input.isOK()) {    createSource(input.getUrl(),input.getUiName());  }}  }
class C{  public static byte sign(final byte x){  return (x == ZB) ? ZB : (x > ZB) ? PB : NB;}  }
class C{  public void addElem(AnnotationElem elem){  if (elems == null)   elems=new ArrayList<AnnotationElem>();  elems.add(elem);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();  if (subSignature.equals("java.lang.ClassLoader latestUserDefinedLoader()")) {    java_io_ObjectInputStream_latestUserDefinedLoader(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object allocateNewObject(java.lang.Class,java.lang.Class)")) {    java_io_ObjectInputStream_allocateNewObject(method,thisVar,returnVar,params);    return;  } else   if (subSignature.equals("java.lang.Object allocateNewArray(java.lang.Class,int)")) {    java_io_ObjectInputStream_allocateNewArray(method,thisVar,returnVar,params);    return;  } else {    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public double calcAngleBetweenLines(Entry start1,Entry end1,Entry start2,Entry end2){  double angle1=calcAngleWithRatios(start1,end1);  double angle2=calcAngleWithRatios(start2,end2);  return Math.abs(angle1 - angle2);}  }
class C{  private static String generateFilename(String layerName){  String fileExtension="";switch (outputFormat) {case YSLD:    fileExtension="ysld";  break;case SLD:default :fileExtension="sld";break;}return String.format("%s.%s",layerName,fileExtension);}  }
class C{  @RequestMapping(value="/complete",method=POST,produces=APPLICATION_JSON_VALUE) public ResponseEntity<List<ProjectDTO>> complete(@RequestBody AutoCompleteQuery acq) throws URISyntaxException {  List<ProjectDTO> results=projectDTOService.complete(acq.query,acq.maxResults);  return new ResponseEntity<>(results,new HttpHeaders(),HttpStatus.OK);}  }
class C{  public PhotosMakeCoverQuery albumId(Integer value){  return unsafeParam("album_id",value);}  }
class C{  private void Stitch_MedicSkills(){  if (getOwner().isCasting() || isAlreadyDead()) {    return;  }  int rand=Rnd.get(1,7);  if (getLifeStats().getHpPercentage() <= NextHeal) {    rand=Rnd.get(8,13);    NextHeal=getLifeStats().getHpPercentage() - (100 / 3);    NextHeal=(NextHeal > 0) ? NextHeal : 0;  }switch (rand) {case 1:    useSkill(17354);  break;case 2:useSkill(17355);break;case 3:useSkill(17356);break;case 4:useSkill(17357);break;case 5:useSkill(17359);break;case 6:useSkill(17360);break;case 7:useSkill(17367);break;case 8:useSkill(17361);break;case 9:useSkill(17362);break;case 10:useSkill(17363);break;case 11:useSkill(17364);break;case 12:useSkill(17365);break;case 13:useSkill(17366);break;}}  }
class C{  public static void release(Application app){  if (sLifecycleCallbacks != null) {    app.unregisterActivityLifecycleCallbacks(sLifecycleCallbacks);  }  hideProgressDialogsAll();}  }
class C{  public Matrix times(double s){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=s * A[i][j];    }  }  return X;}  }
class C{  public void notify(LeaseRenewalEvent leaseManagerEvent){  if (_logger.isLoggable(Level.FINE)) {    Throwable error=leaseManagerEvent.getException();    _logger.fine("LeaseRenewalManager cannot renew this lease <" + leaseManagerEvent.getLease().getExpiration() + ">"+ (error != null ? " - " + error.toString() : ""));  }}  }
class C{  public static void writeLines(File file,Collection<?> lines,boolean append) throws IOException {  writeLines(file,null,lines,null,append);}  }
class C{  public int replaceAll(String regularExpression,String replaceText,boolean selectionOnly){  System.err.println("not implemented");  return 0;}  }
class C{  public void addHalfEdges(int i,int j){  DoubleEdgeListVertex vertex1=this.vertices.get(i);  DoubleEdgeListVertex vertex2=this.vertices.get(j);  this.addHalfEdges(vertex1,vertex2);}  }
class C{  public void traverseExpressionTree(ExpNode root) throws SQLException {  if (root != null) {    Stack<ExpNode> stack=new Stack<ExpNode>();    Stack<ExpNode> stack2=new Stack<ExpNode>();    stack.push(root);    while (!stack.isEmpty()) {      ExpNode curr=stack.pop();      stack2.push(curr);      if (curr.getLeftChild() != null)       stack.push(curr.getLeftChild());      if (curr.getRightChild() != null)       stack.push(curr.getRightChild());    }    while (!stack2.isEmpty()) {      ExpNode node=stack2.pop();      node.accept(this);      if (node.getTemplate() == null) {        if (node.getLeftChild() != null && node.getLeftChild().getTemplate() != null)         node.getLeftChild().getTemplate().prepareForSpace(query.getTypeInfo());        if (node.getRightChild() != null && node.getRightChild().getTemplate() != null)         node.getRightChild().getTemplate().prepareForSpace(query.getTypeInfo());      } else       if (stack2.isEmpty()) {        node.getTemplate().prepareForSpace(query.getTypeInfo());      }    }  }  if (query.isJoined()) {    buildJoinInfo();  }}  }
class C{  @MediumTest public void testPreconditions(){  assertNotNull(mTextView1);  assertNotNull(mTextView2);}  }
class C{  public synchronized boolean commit(){  checkNotClosedOrEditingConcurrently();  close();  mIsClosed=true;  if (mHasErrors) {    mCache.abortEdit(mEntry);    mCache.remove(mEntry.getKey());    return false;  } else {    mCache.commitEdit(mEntry);    return true;  }}  }
class C{  public void testWriteReadEmpty() throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream(0);  ObjectOutputStream os=new ObjectOutputStream(out);  os.writeObject(empty);  ObjectInputStream is=new ObjectInputStream(new ByteArrayInputStream(out.toByteArray()));  LoadBalancingPolicy copy=(LoadBalancingPolicy)is.readObject();  is.close();  os.close();  assertTrue(helper.areEquals(empty,copy));}  }
class C{  void endStatement(){  tx.endStatement();}  }
class C{  public static String apiToMagic(int targetApiLevel){  String version;  if (targetApiLevel >= API_CURRENT) {    version=VERSION_CURRENT;  } else {    version=VERSION_FOR_API_13;  }  return MAGIC_PREFIX + version + MAGIC_SUFFIX;}  }
class C{  public boolean isAssignable(){  for (  MatchingPart part : _parts) {    if (!part.isAssignable()) {      return false;    }  }  return true;}  }
class C{  private void initPresenter(){  this.toolbarPresenter=new ToolbarImplementor();  this.pagerManagePresenter=new PagerManageImplementor(pagerManageModel,this);  this.popupManagePresenter=new PopupManageImplementor(this);  this.swipeBackManagePresenter=new SwipeBackManageImplementor(this);}  }
class C{  public NotesCreateCommentQuery guid(String value){  return unsafeParam("guid",value);}  }
class C{  private boolean lessThan(VersionData maximumVersion){  if (this.majorNumber < maximumVersion.majorNumber) {    return true;  } else   if (this.majorNumber == maximumVersion.majorNumber) {    if (this.minorNumber < maximumVersion.minorNumber) {      return true;    } else     if (this.minorNumber == maximumVersion.minorNumber) {      if (this.pointNumber <= maximumVersion.pointNumber) {        return true;      }    }  }  return false;}  }
class C{  @SuppressWarnings("ConstantConditions") public static void drawRectangleShadow(Graphics gc,int x,int y,int width,int height){  assert ShadowBottomLeft != null;  assert ShadowBottomRight.getWidth(null) == SHADOW_SIZE;  assert ShadowBottomRight.getHeight(null) == SHADOW_SIZE;  int blWidth=ShadowBottomLeft.getWidth(null);  int trHeight=ShadowTopRight.getHeight(null);  if (width < blWidth) {    return;  }  if (height < trHeight) {    return;  }  UIUtil.drawImage(gc,ShadowBottomLeft,x,y + height,null);  UIUtil.drawImage(gc,ShadowBottomRight,x + width,y + height,null);  UIUtil.drawImage(gc,ShadowTopRight,x + width,y,null);  ImageUtils.drawDipImage(gc,ShadowBottom,x + ShadowBottomLeft.getWidth(null),y + height,x + width,y + height + ShadowBottom.getHeight(null),0,0,ShadowBottom.getWidth(null),ShadowBottom.getHeight(null),null);  ImageUtils.drawDipImage(gc,ShadowRight,x + width,y + ShadowTopRight.getHeight(null),x + width + ShadowRight.getWidth(null),y + height,0,0,ShadowRight.getWidth(null),ShadowRight.getHeight(null),null);}  }
class C{  public BalloonTreeLayout(String group,int minRadius){  super(group);  m_minRadius=minRadius;}  }
class C{  protected EquipmentConfigurationUpdate configureCacheObject(Equipment equipment,Properties properties){  EquipmentCacheObject equipmentCacheObject=(EquipmentCacheObject)equipment;  EquipmentConfigurationUpdate configurationUpdate=setCommonProperties(equipmentCacheObject,properties);  String tmpStr=properties.getProperty("address");  if (tmpStr != null) {    equipmentCacheObject.setAddress(tmpStr);    configurationUpdate.setEquipmentAddress(tmpStr);  }  if ((tmpStr=properties.getProperty("processId")) != null) {    try {      equipmentCacheObject.setProcessId(Long.valueOf(tmpStr));    } catch (    NumberFormatException e) {      throw new ConfigurationException(ConfigurationException.INVALID_PARAMETER_VALUE,"NumberFormatException: Unable to convert parameter \"processId\" to Long: " + tmpStr);    }  }  return configurationUpdate;}  }
class C{  public void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;  }}  }
class C{  private void validateFields(){  if (folderNameText.getText().length() == 0) {    setErrorMessage(null);    setPageComplete(false);    return;  }  try {    new SVNUrl(Util.appendPath(urlParentText.getText(),folderNameText.getText()));  } catch (  MalformedURLException e) {    setErrorMessage(Policy.bind("NewRemoteFolderWizardMainPage.invalidUrl"));    setPageComplete(false);    return;  }  setErrorMessage(null);  setPageComplete(true);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  public XSSimpleTypeDecl newXSSimpleTypeDecl(){  return new XSSimpleTypeDecl();}  }
class C{  public MediaWrapper(Uri uri){  if (uri == null)   throw new NullPointerException("uri was null");  mUri=uri;  init(null);}  }
class C{  static public InputStream findClusterXML(String _clusterXML){  String schemaNameToBeUsed=_clusterXML;  InputStream schemaInputStream;  String schemaFilePath=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + schemaNameToBeUsed+ ClusterXML.CLUSTER_XML_FILE_SUFFIX;  schemaInputStream=getResourceStream(schemaFilePath);  if (schemaInputStream != null) {    if (_logger.isLoggable(Level.INFO)) {      _logger.info("Loaded the cluster XML < " + getResourceURL(schemaNameToBeUsed) + " > for the cluster config setup.");    }    return schemaInputStream;  } else {    String defaultSchemaFileName=Constants.Container.CONTAINER_CONFIG_DIRECTORY + "/" + Constants.Schemas.DEFAULT_SCHEMA+ ClusterXML.CLUSTER_XML_FILE_SUFFIX;    schemaInputStream=getResourceStream(defaultSchemaFileName);    if (schemaInputStream != null) {      if (_logger.isLoggable(Level.WARNING)) {        _logger.warning("Could not find the cluster xml file: " + schemaFilePath + ".\n Loaded the default cluster xml < "+ getResourceURL(defaultSchemaFileName)+ " > for the cluster config setup.");      }      return schemaInputStream;    } else {      if (_logger.isLoggable(Level.WARNING)) {        _logger.warning("The requested cluster xml file does not exist in the following path: " + defaultSchemaFileName);      }    }  }  return schemaInputStream;}  }
class C{  public void init$Children(){}  }
class C{  public static void renderTemplateAtLocation(String templateLocation,Map<String,Object> context,Appendable outWriter) throws MalformedURLException, TemplateException, IOException {  renderTemplate(templateLocation,context,outWriter);}  }
class C{  @GlobalCallback(PlayerGroupDisbandCallback.class) public static void disband(PlayerGroup group){  Preconditions.checkState(group.onlineMembers() <= 1,"Can't disband group with more than one online member");  groups.remove(group.getTeamId());  group.onEvent(new GroupDisbandEvent(group));}  }
class C{  public int locking_scheme(){  String s=soot.PhaseOptions.getString(options,"locking-scheme");  if (s.equalsIgnoreCase("medium-grained"))   return locking_scheme_medium_grained;  if (s.equalsIgnoreCase("coarse-grained"))   return locking_scheme_coarse_grained;  if (s.equalsIgnoreCase("single-static"))   return locking_scheme_single_static;  if (s.equalsIgnoreCase("leave-original"))   return locking_scheme_leave_original;  throw new RuntimeException("Invalid value " + s + " of phase option locking-scheme");}  }
class C{  public static int colorVariant(int color,float intensity){  float[] hsv=new float[3];  Color.colorToHSV(color,hsv);  hsv[2]*=intensity;  color=Color.HSVToColor(hsv);  return color;}  }
class C{  public static void main(final String[] args){  ConfigurationElementReport report=new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.ALARM,new Long(100000),ConfigConstants.Status.WARNING,"DOn't know why");  report.addSubReport(new ConfigurationElementReport(ConfigConstants.Action.CREATE,ConfigConstants.Entity.DATATAG,new Long(400)));  System.out.println(report.toXML());}  }
class C{  public boolean field_based(){  return soot.PhaseOptions.getBoolean(options,"field-based");}  }
class C{  public static void runOnUiThread(Runnable runnable){  HANDLER.post(runnable);}  }
class C{  public CatchmeBoardStatues(int tagNumber,int itemset){  super();  this.tagNumber=tagNumber;  this.itemset=itemset;}  }
class C{  public DatabaseGetFacultiesQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public void savePetMoodData(){  DAOManager.getDAO(PlayerPetsDAO.class).savePetMoodData(this);}  }
class C{  private static void decodeBase256Segment(BitSource bits,StringBuilder result,Collection<byte[]> byteSegments) throws FormatException {  int codewordPosition=1 + bits.getByteOffset();  int d1=unrandomize255State(bits.readBits(8),codewordPosition++);  int count;  if (d1 == 0) {    count=bits.available() / 8;  } else   if (d1 < 250) {    count=d1;  } else {    count=250 * (d1 - 249) + unrandomize255State(bits.readBits(8),codewordPosition++);  }  if (count < 0) {    throw FormatException.getFormatInstance();  }  byte[] bytes=new byte[count];  for (int i=0; i < count; i++) {    if (bits.available() < 8) {      throw FormatException.getFormatInstance();    }    bytes[i]=(byte)unrandomize255State(bits.readBits(8),codewordPosition++);  }  byteSegments.add(bytes);  try {    result.append(new String(bytes,"ISO8859_1"));  } catch (  UnsupportedEncodingException uee) {    throw new IllegalStateException("Platform does not support required encoding: " + uee);  }}  }
class C{  public void move(float delta){}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public DOMImplementationListImpl(Vector params){  fImplementations=new ArrayList(params);}  }
class C{  private String[] diff_halfMatchI(String longtext,String shorttext,int i){  String seed=longtext.substring(i,i + longtext.length() / 4);  int j=-1;  String best_common="";  String best_longtext_a="", best_longtext_b="";  String best_shorttext_a="", best_shorttext_b="";  while ((j=shorttext.indexOf(seed,j + 1)) != -1) {    int prefixLength=diff_commonPrefix(longtext.substring(i),shorttext.substring(j));    int suffixLength=diff_commonSuffix(longtext.substring(0,i),shorttext.substring(0,j));    if (best_common.length() < suffixLength + prefixLength) {      best_common=shorttext.substring(j - suffixLength,j) + shorttext.substring(j,j + prefixLength);      best_longtext_a=longtext.substring(0,i - suffixLength);      best_longtext_b=longtext.substring(i + prefixLength);      best_shorttext_a=shorttext.substring(0,j - suffixLength);      best_shorttext_b=shorttext.substring(j + prefixLength);    }  }  if (best_common.length() * 2 >= longtext.length()) {    return new String[]{best_longtext_a,best_longtext_b,best_shorttext_a,best_shorttext_b,best_common};  } else {    return null;  }}  }
class C{  void submit(ProcessAndDisplayImageTask task){  initExecutorsIfNeed();  taskExecutorForCachedImages.execute(task);}  }
class C{  private <T>Stream<Collection<T>> partitionedStream(Iterator<T> iterator){  return StreamSupport.stream(Spliterators.spliteratorUnknownSize(Iterators.partition(iterator,batchSize),Spliterator.ORDERED),false);}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_ITEM_CHARGE_FAIL_ALREADY_FULLY_CHARGED(String value0){  return new SM_SYSTEM_MESSAGE(1400908,value0);}  }
class C{  protected RegisterType mergePreRegisterTypeFromPredecessors(int registerNumber){  RegisterType mergedRegisterType=null;  for (  AnalyzedInstruction predecessor : predecessors) {    RegisterType predecessorRegisterType=predecessor.postRegisterMap[registerNumber];    assert predecessorRegisterType != null;    mergedRegisterType=predecessorRegisterType.merge(mergedRegisterType);  }  return mergedRegisterType;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_WeaponStatUp_A_TO_SELF(String skillcaster,String value0,String skillname){  return new SM_SYSTEM_MESSAGE(1200888,skillcaster,value0,skillname);}  }
class C{  public Fraction multiply(Fraction fraction){  if (fraction == null) {    throw MathRuntimeException.createIllegalArgumentException(NULL_FRACTION);  }  if (numerator == 0 || fraction.numerator == 0) {    return ZERO;  }  int d1=MathUtils.gcd(numerator,fraction.denominator);  int d2=MathUtils.gcd(fraction.numerator,denominator);  return getReducedFraction(MathUtils.mulAndCheck(numerator / d1,fraction.numerator / d2),MathUtils.mulAndCheck(denominator / d2,fraction.denominator / d1));}  }
class C{  public void insert(int offset,int value){  if (offset == _pos) {    add(value);    return;  }  ensureCapacity(_pos + 1);  System.arraycopy(_data,offset,_data,offset + 1,_pos - offset);  _data[offset]=value;  _pos++;}  }
class C{  public TOverlapsExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  static String byteArrayToBase64(byte[] a){  return byteArrayToBase64(a,false);}  }
class C{  public void alwaysFails() throws BrokenServiceException {  LOG.info("{} called",this.getClass().getSimpleName());  throw new BrokenServiceException("Provoked failure");}  }
class C{  @Override public void run(){  long time=0;  while (!isInterrupted()) {    try {      long nextTime=calcNextTime();      Thread.sleep(nextTime - time);      time=nextTime;      for (int i=0; i < _groups.length; i++) {        WatchdogGroup group=_groups[i];        if (group._doTimeout)         group.timeout();      }    } catch (    InterruptedException ie) {      if (_logger.isLoggable(Level.FINEST)) {        _logger.log(Level.FINEST,this.getName() + " interrupted.",ie);      }      interrupt();      break;    }catch (    Throwable t) {      if (_logger.isLoggable(Level.SEVERE)) {        _logger.log(Level.SEVERE,"Unexpected exception in watchdog thread.",t);      }    }  }}  }
class C{  public static void multInBuffer(Vector3f toMult,FloatBuffer buf,int index){  Vector3f tempVec3=Vector3f.newInstance();  populateFromBuffer(tempVec3,buf,index);  tempVec3.multLocal(toMult);  setInBuffer(tempVec3,buf,index);  Vector3f.recycle(tempVec3);}  }
class C{  public ShortArrayList top(int n){  ShortArrayList top=new ShortArrayList();  short[] values=data.toShortArray();  ShortArrays.parallelQuickSort(values,ReverseShortComparator.instance());  for (int i=0; i < n && i < values.length; i++) {    top.add(values[i]);  }  return top;}  }
class C{  private DefaultTextualExtensionRecognizer(){  BufferedReader r=null;  try {    r=new BufferedReader(new InputStreamReader(getClass().getResourceAsStream("textualexts")));    String line;    while ((line=r.readLine()) != null) {      StringTokenizer st=new StringTokenizer(line);      while (st.hasMoreTokens()) {        addExtension(st.nextToken());      }    }  } catch (  Exception e) {    ;  } finally {    if (r != null) {      try {        r.close();      } catch (      Throwable t) {        ;      }    }  }}  }
class C{  public void addContactMech(String contactMechPurposeTypeId,String contactMechId){  if (contactMechPurposeTypeId == null)   throw new IllegalArgumentException("You must specify a contactMechPurposeTypeId to add a ContactMech");  contactMechIdsMap.put(contactMechPurposeTypeId,contactMechId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SummonGroupGate_ME_TO_B(String value0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200576,value0,skilltarget,skillname);}  }
class C{  public GeExpr newGeExpr(Value op1,Value op2){  return new GGeExpr(op1,op2);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TObjectShortHashMap)) {    return false;  }  TObjectShortHashMap that=(TObjectShortHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  public static byte[] reverse(byte[] data){  for (int i=0, j=data.length - 1; i < data.length / 2; i++, j--) {    data[i]^=data[j];    data[j]^=data[i];    data[i]^=data[j];  }  return data;}  }
class C{  protected void drawXAxis(Graphics2D gc){  gc.setFont(getFont(ChartViewer.FontKeys.XAxisFont.toString()));  gc.setColor(getFontColor(ChartViewer.FontKeys.XAxisFont.toString(),Color.BLACK));  int x=5;  int y=getHeight() - bottomMargin + 25;  if (isTranspose())   gc.drawString(getChartData().getClassesLabel(),x,y); else   gc.drawString(getChartData().getSeriesLabel(),x,y);}  }
class C{  public static MatD makeScaleTranslationZupToYup(double scale,VecD t){  return new MatD(new double[]{scale,0,0,0,0,0,-scale,0,0,scale,0,0,scale * t.x,scale * t.z,-scale * t.y,1});}  }
class C{  public PagerManageObject(int initPosition){  this.pagePosition=initPosition;}  }
class C{  public int hashCode(){  return (ClientMinPrincipalType.class.hashCode() + Constraint.hash(classes));}  }
