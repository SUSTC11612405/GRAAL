class C{  public boolean hasNext(){  return (this.size() != 0);}  }
class C{  public InterruptedException(){  super();}  }
class C{  public String nextString(char quote) throws JSONException {  char c;  StringBuffer sb=new StringBuffer();  for (; ; ) {    c=next();switch (c) {case 0:case '\n':case '\r':      throw syntaxError("Unterminated string");case '\\':    c=next();switch (c) {case 'b':    sb.append('\b');  break;case 't':sb.append('\t');break;case 'n':sb.append('\n');break;case 'f':sb.append('\f');break;case 'r':sb.append('\r');break;case 'u':sb.append((char)Integer.parseInt(next(4),16));break;case '"':case '\'':case '\\':case '/':sb.append(c);break;default :throw syntaxError("Illegal escape.");}break;default :if (c == quote) {return sb.toString();}sb.append(c);}}}  }
class C{  protected void notifyListeners(AnnotationChangeEvent event){  Object[] listeners=this.listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AnnotationChangeListener.class) {      ((AnnotationChangeListener)listeners[i + 1]).annotationChanged(event);    }  }}  }
class C{  public List<Path> addLUN(String systemId,String targetPortId,String domainId,Map<String,String> deviceLunList,String model) throws Exception {  InputStream responseStream=null;  List<Path> pathList=new ArrayList<Path>();  try {    String addLUNQuery=constructAddLUNQuery(systemId,targetPortId,domainId,deviceLunList,pathList,model);    log.info("Query to addLUN Query: {}",addLUNQuery);    URI endpointURI=hdsApiClient.getBaseURI();    ClientResponse response=hdsApiClient.post(endpointURI,addLUNQuery);    if (HttpStatus.SC_OK == response.getStatus()) {      responseStream=response.getEntityInputStream();      JavaResult javaResult=SmooksUtil.getParsedXMLJavaResult(responseStream,HDSConstants.SMOOKS_CONFIG_FILE);      verifyErrorPayload(javaResult);      pathList=(List<Path>)javaResult.getBean(HDSConstants.PATHLIST_RESPONSE_BEANID);      if (pathList.isEmpty()) {        throw HDSException.exceptions.notAbleToAddVolumeToHSD(domainId,systemId);      }    } else {      throw HDSException.exceptions.invalidResponseFromHDS(String.format("Not able to add Volume to HostStorageDomain due to invalid response %1$s from server",response.getStatus()));    }  }  finally {    if (null != responseStream) {      try {        responseStream.close();      } catch (      IOException e) {        log.warn("IOException occurred while closing the response stream");      }    }  }  return pathList;}  }
class C{  public boolean isPrintPreview(){  return m_printPreview;}  }
class C{  public void readBIF(InputStream instream) throws BIFFormatException {  BIFParser bp=new BIFParser(instream,m_nodes,m_edges);  try {    graphID=bp.parse();  } catch (  BIFFormatException bf) {    System.out.println("BIF format error");    bf.printStackTrace();  }catch (  Exception ex) {    ex.printStackTrace();    return;  }  setAppropriateNodeSize();  if (m_le != null) {    m_le.setNodeSize(paddedNodeWidth,nodeHeight);  }  setAppropriateSize();}  }
class C{  public VerletPhysics2D addSpring(VerletSpring2D s){  if (getSpring(s.a,s.b) == null) {    springs.add(s);  }  return this;}  }
class C{  public Geo(double lat,double lon,boolean isDegrees){  if (isDegrees) {    initialize(lat,lon);  } else {    initializeRadians(lat,lon);  }}  }
class C{  public void testSystemProperty() throws Exception {  String random=UUID.randomUUID().toString();  File artifactDir=new File(getTestData().targetDir).getParentFile();  File artifactFile=new File(artifactDir,"systemproperty.war").getAbsoluteFile();  Copy copyTask=(Copy)new AntUtils().createProject().createTask("copy");  copyTask.setTofile(artifactFile);  copyTask.setFile(new File(getTestData().getTestDataFileFor("systemproperty-war")));  copyTask.execute();  Deployable war=new DefaultDeployableFactory().createDeployable(getContainer().getId(),artifactFile.getAbsolutePath(),DeployableType.WAR);  getLocalContainer().getConfiguration().addDeployable(war);  URL pingURL=new URL("http://localhost:" + getTestData().port + "/systemproperty/test?systemPropertyName=random");  getInstalledLocalContainer().getSystemProperties().put("random",random);  getLocalContainer().start();  assertEquals(State.STARTED,getContainer().getState());  PingUtils.assertPingTrue(pingURL.getPath() + " not started",random,pingURL,getLogger());  getLocalContainer().stop();  assertEquals(State.STOPPED,getContainer().getState());  PingUtils.assertPingFalse(pingURL.getPath() + " not stopped",pingURL,getLogger());}  }
class C{  public ElementMetadata<D,E> bind(MetadataContext context){  return schema.bind(parent,elemKey,context);}  }
class C{  public static boolean isLocalEscapedChar(int codePoint){  return Arrays.binarySearch(LOCAL_ESCAPED_CHARS,(char)codePoint) > -1;}  }
class C{  public PLTokenInfo(){  super();}  }
class C{  protected <T>T throwUnsupported(int type) throws IgniteCheckedException {  throw new IgniteCheckedException("Unsupported operation type: " + type);}  }
class C{  public void moveToCurrentRow() throws SQLException {  if (onInsertRow == false) {    return;  } else {    cursorPos=currentRow;    onInsertRow=false;  }}  }
class C{  private void trueOutliers(HilbertFeatures h){  n_star=0;  for (ObjectHeap.UnsortedIter<HilFeature> iter=h.out.unsortedIter(); iter.valid(); iter.advance()) {    HilFeature entry=iter.get();    if (entry.ubound >= omega_star && (entry.ubound - entry.lbound < 1E-10)) {      n_star++;    }  }}  }
class C{  void openBuffer(){  if (buffer == null) {    try {      buffer=input.map(MapMode.READ_ONLY,0,input.size());    } catch (    IOException e) {      throw new AbortException("Cannot map input bundle.",e);    }  }}  }
class C{  private static boolean isDeprecatedSSLProtocol(){  return ("com.sun.net.ssl.internal.www.protocol".equals(System.getProperty("java.protocol.handler.pkgs")));}  }
class C{  public static long[] copyOfRange(long[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      long[] copy=new long[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  @Override public String validate(Player player,RPAction action,ActionData data){  RPObject entity=data.getEntity();  if (entity == null) {    return null;  }  RPObject base=entity.getBaseContainer();  while (true) {    RPSlot slot=entity.getContainerSlot();    if (slot == null) {      return null;    }    RPObject container=entity.getContainer();    int flags=container.getRPClass().getDefinition(DefinitionClass.RPSLOT,slot.getName()).getFlags();    boolean visible=(((flags & Definition.PRIVATE) == 0) || base == player) && ((flags & Definition.HIDDEN) == 0);    if (!visible) {      logger.warn("Slot is not visible: " + slot);      return "You cannot look into that.";    }    entity=container;  }}  }
class C{  @RequestMapping(value="/account/sessions/{series}",method=RequestMethod.DELETE) @Timed public void invalidateSession(@PathVariable String series) throws UnsupportedEncodingException {  String decodedSeries=URLDecoder.decode(series,"UTF-8");  userRepository.findOneByLogin(SecurityUtils.getCurrentUserLogin()).ifPresent(null);}  }
class C{  public void orderMinionToMoveTo(int targetX,int targetY,int targetZ,boolean allowDropping){  currentTarget=new BlockPos(targetX,targetY,targetZ);  pathPlanner.getPath(doubleToInt(this.posX),doubleToInt(this.posY),doubleToInt(this.posZ),targetX,targetY,targetZ,allowDropping);}  }
class C{  public int accessFlags(int nth){  return ByteArray.readU16bit(get(),nth * 8 + 8);}  }
class C{  private boolean containsNumbersInRange(String[] a,int radix,int min,int max){  if (a == null || a.length != 3) {    return false;  }  try {    for (int i=0; i < 3; i++) {      int n=Integer.parseInt(a[i],radix);      if (n < min || n > max) {        return false;      }    }  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  public boolean isSuccess(){  for (Iterator<Entry<Text,Parse>> i=iterator(); i.hasNext(); ) {    Entry<Text,Parse> entry=i.next();    if (!entry.getValue().getData().getStatus().isSuccess()) {      return false;    }  }  return true;}  }
class C{  public DERSet(ASN1Encodable[] a){  super(a,true);}  }
class C{  public boolean isValid(){  return (Math.abs(lat.lo()) <= S2.M_PI_2 && Math.abs(lat.hi()) <= S2.M_PI_2 && lng.isValid() && lat.isEmpty() == lng.isEmpty());}  }
class C{  @Override public void onChangedRemoved(final RPObject object,final RPObject changes){  super.onChangedRemoved(object,changes);  if (changes.has("idea")) {    onIdea(null);    fireChange(PROP_IDEA);  }}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void fireAncestorAdded(JComponent source,int id,Container ancestor,Container ancestorParent){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == AncestorListener.class) {      AncestorEvent ancestorEvent=new AncestorEvent(source,id,ancestor,ancestorParent);      ((AncestorListener)listeners[i + 1]).ancestorAdded(ancestorEvent);    }  }}  }
class C{  public FilteredColdEmissionHandler(final double simulationEndTime,final int noOfTimeBins){  this(simulationEndTime,noOfTimeBins,null,null,null,null);  LOGGER.info("No filtering is used, result will include all links, persons from all user groups.");}  }
class C{  @Override public synchronized void clear(){  File[] files=mRootDirectory.listFiles();  if (files != null) {    for (    File file : files) {      file.delete();    }  }  mEntries.clear();  mTotalSize=0;  VinciLog.d("Cache cleared.");}  }
class C{  boolean approxEquals(S2Cap other,double maxError){  return (axis.aequal(other.axis,maxError) && Math.abs(height - other.height) <= maxError) || (isEmpty() && other.height <= maxError) || (other.isEmpty() && height <= maxError)|| (isFull() && other.height >= 2 - maxError)|| (other.isFull() && height >= 2 - maxError);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (trace_level_1: ");  result.append(trace_level_1);  result.append(')');  return result.toString();}  }
class C{  public BeanContextServiceRevokedEvent(BeanContextServices bcs,Class sc,boolean invalidate){  super((BeanContext)bcs);  serviceClass=sc;  invalidateRefs=invalidate;}  }
class C{  @Override public void close() throws ResourceException {  super.close();  try {    if (this.conn != null)     this.conn.close();  } catch (  JMSException err) {    throw new ResourceException(err.getMessage());  }}  }
class C{  public static PlatformAtomicReference createInstance(PlatformContext ctx,String name,long memPtr,boolean create){  assert ctx != null;  assert name != null;  Object initVal=null;  if (memPtr != 0) {    try (PlatformMemory mem=ctx.memory().get(memPtr)){      initVal=ctx.reader(mem).readObjectDetached();    }   }  GridCacheAtomicReferenceImpl atomicRef=(GridCacheAtomicReferenceImpl)ctx.kernalContext().grid().atomicReference(name,initVal,create);  if (atomicRef == null)   return null;  return new PlatformAtomicReference(ctx,atomicRef);}  }
class C{  public static void registerTurtleUpgrade(ITurtleUpgrade upgrade){  if (upgrade != null) {    findCC();    if (computerCraft_registerTurtleUpgrade != null) {      try {        computerCraft_registerTurtleUpgrade.invoke(null,upgrade);      } catch (      Exception e) {      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public Leaf(final String name){  if (name == null) {    throw new IllegalArgumentException("name is null");  }  this.name=name;}  }
class C{  public void query(double min,double max,ItemVisitor visitor){  init();  root.query(min,max,visitor);}  }
class C{  @Override public void notify(String msg){  Platform.runLater(null);}  }
class C{  public void addTextLabel(double x,String text){  addXTextLabel(x,text);}  }
class C{  static void appendTime(StringBuilder buff,long nanos,boolean alwaysAddMillis){  if (nanos < 0) {    buff.append('-');    nanos=-nanos;  }  long ms=nanos / 1000000;  nanos-=ms * 1000000;  long s=ms / 1000;  ms-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  StringUtils.appendZeroPadded(buff,2,h);  buff.append(':');  StringUtils.appendZeroPadded(buff,2,m);  buff.append(':');  StringUtils.appendZeroPadded(buff,2,s);  if (alwaysAddMillis || ms > 0 || nanos > 0) {    buff.append('.');    int start=buff.length();    StringUtils.appendZeroPadded(buff,3,ms);    if (nanos > 0) {      StringUtils.appendZeroPadded(buff,6,nanos);    }    for (int i=buff.length() - 1; i > start; i--) {      if (buff.charAt(i) != '0') {        break;      }      buff.deleteCharAt(i);    }  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return BYTE_THING;case 2:  return STRUCT_THING;case 3:return I32_THING;default :return null;}}  }
class C{  public Time(long time){  super(time);}  }
class C{  private boolean refine(int color){  int nrMotifNodes=motif.getNrMotifNodes();  int[][] degreesTop=new int[nrMotifNodes][];  List<Integer> topnodes=colorToTopMotifnode.get(color);  int[][] degreesBottom=new int[nrMotifNodes][];  List<Integer> bottomnodes=colorToBottomMotifnode.get(color);  int nrTypes=LinkType.getNrLinkTypes();  for (int i=0; i < nrMotifNodes; i++) {    degreesBottom[i]=new int[nrTypes * 2];    degreesTop[i]=new int[nrTypes * 2];  }  HashSet<Integer> reachedColors=new HashSet<Integer>();  for (  Integer integer : topnodes) {    MotifLink[] links=motif.getLinksOfMotifNode(integer);    int[] linksd=motif.getConnectionsOfMotifNode(integer);    for (int j=0; j < links.length; j++) {      int i=linksd[j];      MotifLink motifLink=links[j];      if (motifLink.linkType.getMotifLink() == motifLink) {        degreesTop[i][motifLink.linkType.getLinkTypeID()]++;        degreesTop[integer][nrTypes + motifLink.linkType.getLinkTypeID()]++;      } else {        degreesTop[integer][motifLink.linkType.getLinkTypeID()]++;        degreesTop[i][nrTypes + motifLink.linkType.getLinkTypeID()]++;      }      reachedColors.add(topMotifnodeToColor[i]);    }  }  for (  Integer integer : bottomnodes) {    MotifLink[] links=motif.getLinksOfMotifNode(integer);    int[] linksd=motif.getConnectionsOfMotifNode(integer);    for (int j=0; j < links.length; j++) {      int i=linksd[j];      MotifLink motifLink=links[j];      if (motifLink.linkType.getMotifLink() == motifLink) {        degreesBottom[i][motifLink.linkType.getLinkTypeID()]++;        degreesBottom[integer][nrTypes + motifLink.linkType.getLinkTypeID()]++;      } else {        degreesBottom[integer][motifLink.linkType.getLinkTypeID()]++;        degreesBottom[i][nrTypes + motifLink.linkType.getLinkTypeID()]++;      }    }  }  for (  Integer integer : reachedColors) {    List<Integer> nodesInColor=colorToTopMotifnode.get(integer);    HashMap<Integer,int[]> currentColorMapping=new HashMap<Integer,int[]>();    currentColorMapping.put(integer,degreesTop[nodesInColor.get(0)]);    ArrayList<Integer> startset=new ArrayList<Integer>();    startset.add(nodesInColor.get(0));    colorToTopMotifnode.put(integer,startset);    for (int i=1; i < nodesInColor.size(); i++) {      int node=nodesInColor.get(i);      int[] is=degreesTop[node];      boolean added=false;      for (      Map.Entry<Integer,int[]> entry : currentColorMapping.entrySet()) {        int[] connectionsColor=entry.getValue();        if (compareRows(connectionsColor,is) == true) {          colorToTopMotifnode.get(entry.getKey()).add(node);          topMotifnodeToColor[node]=entry.getKey();          added=true;          break;        }      }      if (!added) {        int newColor=getFreeColor();        colorsToRecheck.add(newColor);        colorsToRecheck.add(color);        ArrayList<Integer> newSet=new ArrayList<Integer>();        newSet.add(node);        currentColorMapping.put(newColor,is);        colorToTopMotifnode.put(newColor,newSet);        topMotifnodeToColor[node]=newColor;      }    }    List<Integer> nodesInBottomColor=colorToBottomMotifnode.get(integer);    colorToBottomMotifnode.remove(integer);    out:     for (int i=0; i < nodesInBottomColor.size(); i++) {      int nodeID=nodesInBottomColor.get(i);      int[] is=degreesBottom[nodeID];      for (      Map.Entry<Integer,int[]> entry : currentColorMapping.entrySet()) {        if (compareRows(entry.getValue(),is) == true) {          int colorForBottom=entry.getKey();          List<Integer> get=colorToBottomMotifnode.get(colorForBottom);          if (get == null) {            get=new ArrayList<Integer>();            colorToBottomMotifnode.put(colorForBottom,get);          }          get.add(nodeID);          continue out;        }      }    }    for (    Integer integer1 : colorToTopMotifnode.keySet()) {      List<Integer> bottomset=colorToBottomMotifnode.get(integer1);      List<Integer> topset=colorToTopMotifnode.get(integer1);      if (bottomset == null || topset.size() != bottomset.size()) {        return false;      }    }  }  return true;}  }
class C{  static void link(final FunctionBlock parent,final FunctionBlock child){  Preconditions.checkNotNull(parent,"Error: Parent argument can not be null");  Preconditions.checkNotNull(child,"Error: Child argument can not be null");  parent.m_children.add(child);  child.m_parents.add(parent);}  }
class C{  protected boolean canStartTransfer(){  if (this.getNrofMessages() == 0) {    return false;  }  if (this.getConnections().size() == 0) {    return false;  }  return true;}  }
class C{  public String toString(){  return super.toString() + "[" + index()+ "]";}  }
class C{  public void testDoTag() throws Exception {  System.out.println("doTag");  ForJavaScriptTag instance=new ForJavaScriptTag();  String value="\0'\"";  String expected="\\x00\\x27\\x22";  instance.setJspContext(_pageContext);  instance.setValue(value);  instance.doTag();  String results=_response.getContentAsString();  assertEquals(expected,results);}  }
class C{  public Rect(){}  }
class C{  public SocketTimeoutException(String detailMessage){  super(detailMessage);}  }
class C{  @RequestMethod("DELETE") public synchronized void deleteNote(int id){  notes.remove(id);}  }
class C{  public StepObject(){  super();}  }
class C{  public synchronized final int evictionCount(){  return evictionCount;}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public void print(){  for (int i=0; i < this.cards.length; i++) {    System.out.println(this.cards[i]);  }}  }
class C{  public LinkedList<Diff> diff_fromDelta(String text1,String delta) throws IllegalArgumentException {  LinkedList<Diff> diffs=new LinkedList<Diff>();  int pointer=0;  String[] tokens=delta.split("\t");  for (  String token : tokens) {    if (token.length() == 0) {      continue;    }    String param=token.substring(1);switch (token.charAt(0)) {case '+':      param=param.replace("+","%2B");    try {      param=URLDecoder.decode(param,"UTF-8");    } catch (    UnsupportedEncodingException e) {      throw new Error("This system does not support UTF-8.",e);    }catch (    IllegalArgumentException e) {      throw new IllegalArgumentException("Illegal escape in diff_fromDelta: " + param,e);    }  diffs.add(new Diff(Operation.INSERT,param));break;case '-':case '=':int n;try {n=Integer.parseInt(param);} catch (NumberFormatException e) {throw new IllegalArgumentException("Invalid number in diff_fromDelta: " + param,e);}if (n < 0) {throw new IllegalArgumentException("Negative number in diff_fromDelta: " + param);}String text;try {text=text1.substring(pointer,pointer+=n);} catch (StringIndexOutOfBoundsException e) {throw new IllegalArgumentException("Delta length (" + pointer + ") larger than source text length ("+ text1.length()+ ").",e);}if (token.charAt(0) == '=') {diffs.add(new Diff(Operation.EQUAL,text));} else {diffs.add(new Diff(Operation.DELETE,text));}break;default :throw new IllegalArgumentException("Invalid diff operation in diff_fromDelta: " + token.charAt(0));}}if (pointer != text1.length()) {throw new IllegalArgumentException("Delta length (" + pointer + ") smaller than source text length ("+ text1.length()+ ").");}return diffs;}  }
class C{  public StrBuilder insert(final int index,final int value){  return insert(index,String.valueOf(value));}  }
class C{  public NorwegianAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  void trigger(final String triggerEvent,final Envelope envelope){synchronized (bindings) {    for (    final Binding binding : bindings) {      if (binding.getEvent().equals(triggerEvent)) {        binding.getCallback().onMessage(envelope);        break;      }    }  }}  }
class C{  public boolean remove(Object o){  return removeElement(o);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.851 -0500",hash_original_method="31CA6A116339576A3C7E1C4293F4F7B1",hash_generated_method="DF869E7652593A82623D11D258A3372E") public InputEventConsistencyVerifier(Object caller,int flags,String logTag){  this.mCaller=caller;  this.mFlags=flags;  this.mLogTag=(logTag != null) ? logTag : "InputEventConsistencyVerifier";}  }
class C{  public static boolean isKeyPressed(int keycode){synchronized (keyLock) {    return keysDown.contains(keycode);  }}  }
class C{  public int hashCode(){  try {    byte[] b1=getEncodedInternal();    int r=b1.length;    for (int i=0; i < b1.length; i++) {      r+=(b1[i] & 0xff) * 37;    }    return r;  } catch (  InvalidKeyException e) {    return 0;  }}  }
class C{  public double[] computeLocalEntropy2UsingPreviousObservations(double states[][]){  return computeLocalEntropyFromPreviousObservations(states,2,false);}  }
class C{  public void tearDown(){  super.tearDown();}  }
class C{  @Deprecated @SuppressWarnings({"UnusedParameters"}) public BitmapDrawable(Resources res){  mBitmapState=new BitmapState((Bitmap)null);  mBitmapState.mTargetDensity=mTargetDensity;}  }
class C{  public Builder groupGauges(boolean groupGauges){  this.groupGauges=groupGauges;  return this;}  }
class C{  private XMLUtil(){}  }
class C{  public void init(){  lastMouse=null;  coords=new Vector<LatLonPoint>();  xypoints=new Vector<Point>();  profileLine=new OMPoly(setLLPoints(),OMGraphic.RADIANS,OMGraphic.LINETYPE_GREATCIRCLE);  profileLine.setLinePaint(toolColor);  graphics.add(profileLine);  stateMachine=new ProfileStateMachine(this);}  }
class C{  private void write(Kim kim,Huff huff) throws JSONException {  write(kim,0,kim.length,huff);}  }
class C{  public boolean isOnHotspot(int x,int y){  return (this.checkBox.getBounds().contains(x,y));}  }
class C{  public void close(){  flush();  out.println("</java> ");  out.close();}  }
class C{  public VoltageScorer(Hypergraph<V,E> g,Function<? super E,? extends Number> edge_weights,V source,V sink){  this(g,edge_weights,Collections.singletonMap(source,1.0),Collections.singletonList(sink));  initialize();}  }
class C{  public Long rpush(final byte[] key,final byte[]... strings){  checkIsInMulti();  client.rpush(key,strings);  return client.getIntegerReply();}  }
class C{  public KMLRegion popRegion(){  return this.regionStack.pop();}  }
class C{  public VdcPreCheckResponse syncVdcConfigPreCheck(VdcPreCheckParam checkParam,String vdcName) throws GeoException {  WebResource rRoot;  rRoot=createRequest(VDCCONFIG_PRECHECK_URI);  rRoot.accept(MediaType.APPLICATION_XML);  try {    return addSignature(rRoot).post(VdcPreCheckResponse.class,checkParam);  } catch (  UnauthorizedException e) {    throw GeoException.fatals.remoteVdcAuthorizationFailed(vdcName,e);  }catch (  GeoException e) {    throw e;  }catch (  Exception e) {    throw GeoException.fatals.failedToSendPreCheckRequest(vdcName,e);  }}  }
class C{  public DoSStatusFrame(){  initComponents();}  }
class C{  private void synchronizeData(ArrayList<Object> folderAndFiles,OwnCloudClient client) throws OperationCancelledException {  FileDataStorageManager storageManager=getStorageManager();  OCFile remoteFolder=FileStorageUtils.fillOCFile((RemoteFile)folderAndFiles.get(0));  remoteFolder.setParentId(mLocalFolder.getParentId());  remoteFolder.setFileId(mLocalFolder.getFileId());  Log_OC.d(TAG,"Remote folder " + mLocalFolder.getRemotePath() + " changed - starting update of local data ");  List<OCFile> updatedFiles=new Vector<OCFile>(folderAndFiles.size() - 1);  mFilesForDirectDownload.clear();  mFilesToSyncContents.clear();  if (mCancellationRequested.get()) {    throw new OperationCancelledException();  }  List<OCFile> localFiles=storageManager.getFolderContent(mLocalFolder);  Map<String,OCFile> localFilesMap=new HashMap<String,OCFile>(localFiles.size());  for (  OCFile file : localFiles) {    localFilesMap.put(file.getRemotePath(),file);  }  OCFile remoteFile, localFile, updatedFile;  RemoteFile r;  for (int i=1; i < folderAndFiles.size(); i++) {    r=(RemoteFile)folderAndFiles.get(i);    remoteFile=FileStorageUtils.fillOCFile(r);    updatedFile=FileStorageUtils.fillOCFile(r);    updatedFile.setParentId(mLocalFolder.getFileId());    localFile=localFilesMap.remove(remoteFile.getRemotePath());    updatedFile.setLastSyncDateForProperties(mCurrentSyncTime);    if (localFile != null) {      updatedFile.setFileId(localFile.getFileId());      updatedFile.setFavorite(localFile.isFavorite());      updatedFile.setLastSyncDateForData(localFile.getLastSyncDateForData());      updatedFile.setModificationTimestampAtLastSyncForData(localFile.getModificationTimestampAtLastSyncForData());      updatedFile.setStoragePath(localFile.getStoragePath());      updatedFile.setEtag(localFile.getEtag());      if (updatedFile.isFolder()) {        updatedFile.setFileLength(localFile.getFileLength());      } else       if (mRemoteFolderChanged && remoteFile.isImage() && remoteFile.getModificationTimestamp() != localFile.getModificationTimestamp()) {        updatedFile.setNeedsUpdateThumbnail(true);        Log.d(TAG,"Image " + remoteFile.getFileName() + " updated on the server");      }      updatedFile.setPublicLink(localFile.getPublicLink());      updatedFile.setShareViaLink(localFile.isSharedViaLink());      updatedFile.setShareWithSharee(localFile.isSharedWithSharee());      updatedFile.setEtagInConflict(localFile.getEtagInConflict());    } else {      updatedFile.setEtag("");    }    searchForLocalFileInDefaultPath(updatedFile);    if (remoteFile.isFolder()) {synchronized (mCancellationRequested) {        if (mCancellationRequested.get()) {          throw new OperationCancelledException();        }        startSyncFolderOperation(remoteFile.getRemotePath());      }    } else {      SynchronizeFileOperation operation=new SynchronizeFileOperation(localFile,remoteFile,mAccount,true,mContext);      mFilesToSyncContents.add(operation);    }    updatedFiles.add(updatedFile);  }  storageManager.saveFolder(remoteFolder,updatedFiles,localFilesMap.values());}  }
class C{  @Override public int hashCode(){  return getEndpoint().hashCode();}  }
class C{  public static ValueLobDb createTempBlob(InputStream in,long length,DataHandler handler){  try {    long remaining=Long.MAX_VALUE;    boolean compress=handler.getLobCompressionAlgorithm(Value.BLOB) != null;    if (length >= 0 && length < remaining) {      remaining=length;    }    int len=getBufferSize(handler,compress,remaining);    byte[] buff;    if (len >= Integer.MAX_VALUE) {      buff=IOUtils.readBytesAndClose(in,-1);      len=buff.length;    } else {      buff=DataUtils.newBytes(len);      len=IOUtils.readFully(in,buff,len);    }    if (len <= handler.getMaxLengthInplaceLob()) {      byte[] small=DataUtils.newBytes(len);      System.arraycopy(buff,0,small,0,len);      return ValueLobDb.createSmallLob(Value.BLOB,small,small.length);    }    ValueLobDb lob=new ValueLobDb(handler,buff,len,in,remaining);    return lob;  } catch (  IOException e) {    throw DbException.convertIOException(e,null);  }}  }
class C{  @Override public void process(final DM dm,final ReplyProcessor21 processor){  final boolean isDebugEnabled=logger.isTraceEnabled(LogMarker.DM);  final long startTime=getTimestamp();  if (isDebugEnabled) {    logger.trace(LogMarker.DM,"FetchEntryReplyMessage process invoking reply processor with processorId:{}",this.processorId);  }  if (processor == null) {    if (isDebugEnabled) {      logger.trace(LogMarker.DM,"FetchEntryReplyMessage processor not found");    }    return;  }  processor.process(this);  if (isDebugEnabled) {    logger.trace(LogMarker.DM,"{}  processed  {}",processor,this);  }  dm.getStats().incReplyMessageTime(NanoTimer.getTime() - startTime);}  }
class C{  public synchronized boolean isListening(){  return listening;}  }
class C{  public void start(@NonNull Activity activity,int requestCode){  activity.startActivityForResult(getIntent(activity),requestCode);}  }
class C{  public Period(long startInstant,long endInstant){  super(startInstant,endInstant,null,null);}  }
class C{  public void endElement(String ns,String localName,String name) throws org.xml.sax.SAXException {  m_elemStack.pop();  m_currentNode=m_elemStack.isEmpty() ? null : (Node)m_elemStack.peek();}  }
class C{  public UnsupportedClassVersionError(String s){  super(s);}  }
class C{  public void play() throws CastException, TransientNetworkDisconnectionException, NoConnectionException {  play(null);}  }
class C{  public void writeVarLong(long x){  while ((x & ~0x7f) != 0) {    data[pos++]=(byte)((x & 0x7f) | 0x80);    x>>>=7;  }  data[pos++]=(byte)x;}  }
class C{  @Override protected EClass eStaticClass(){  return ImPackage.Literals.SNIPPET;}  }
class C{  public boolean isDefined(Object key){  Object[] a=attributes;  int n=a.length;  for (int i=0; i < n; i+=2) {    if (key.equals(a[i])) {      return true;    }  }  return false;}  }
class C{  public void createMO(MWMInOutBoundLine boundline,MProduct product,BigDecimal qtySupply){  MPPOrder order=MPPOrder.forC_OrderLine_ID(boundline.getCtx(),boundline.getC_OrderLine_ID(),product.get_ID(),boundline.get_TrxName());  if (order == null) {    MPPProductBOM bom=MPPProductBOM.getDefault(product,get_TrxName());    if (bom != null) {      MPPProductPlanning pp=null;      if (bom == null) {        pp=MPPProductPlanning.find(getCtx(),boundline.getAD_Org_ID(),0,0,product.getM_Product_ID(),null);        if (pp != null) {          bom=(MPPProductBOM)pp.getPP_Product_BOM();        }      }      if (bom != null) {        final int plant_id=MPPProductPlanning.getPlantForWarehouse(boundline.getM_Warehouse_ID());        if (plant_id <= 0) {          throw new NoPlantForWarehouseException(boundline.getM_Warehouse_ID());        }        MWorkflow workflow=MWorkflow.get(getCtx(),MWorkflow.getWorkflowSearchKey(product));        if (workflow == null && pp != null) {          workflow=pp.getAD_Workflow();        }        if (plant_id > 0 && workflow != null) {          String description=Msg.translate(getCtx(),MWMInOutBound.COLUMNNAME_WM_InOutBound_ID) + " : " + boundline.getParent().getDocumentNo();          pp=new MPPProductPlanning(getCtx(),0,get_TrxName());          pp.setAD_Org_ID(boundline.getAD_Org_ID());          pp.setM_Product_ID(product.getM_Product_ID());          pp.setPlanner_ID(boundline.getParent().getSalesRep_ID());          pp.setPP_Product_BOM_ID(bom.getPP_Product_BOM_ID());          pp.setAD_Workflow_ID(workflow.getAD_Workflow_ID());          pp.setM_Warehouse_ID(boundline.getM_Warehouse_ID());          pp.setS_Resource_ID(plant_id);          order=MPPMRP.createMO(pp,boundline.getC_OrderLine_ID(),boundline.getM_AttributeSetInstance_ID(),qtySupply,boundline.getPickDate(),boundline.getShipDate(),description);          MOrderLine oline=new MOrderLine(getCtx(),boundline.getC_OrderLine_ID(),get_TrxName());          description="";          if (oline.getDescription() != null)           description=oline.getDescription();          description=description + " " + Msg.translate(oline.getCtx(),MPPOrder.COLUMNNAME_PP_Order_ID)+ " : "+ order.getDocumentNo();          oline.setDescription(description);          oline.saveEx();          String boundDescription="";          if (boundline.getDescription() != null)           boundDescription=boundline.getDescription();          boundDescription=boundDescription + " " + Msg.translate(getCtx(),MPPOrder.COLUMNNAME_PP_Order_ID)+ " : "+ order.getDocumentNo();          boundline.setDescription(boundDescription);        }      }    }  }  if (order != null) {    boundline.setProcessed(true);    boundline.saveEx();  }}  }
class C{  private void clearRemoteNotifications(){  Log.v(TAG,ACTION_CLEAR_REMOTE_NOTIFICATIONS);  GoogleApiClient googleApiClient=new GoogleApiClient.Builder(this).addApi(Wearable.API).build();  ConnectionResult connectionResult=googleApiClient.blockingConnect(Constants.GOOGLE_API_CLIENT_TIMEOUT_S,TimeUnit.SECONDS);  if (connectionResult.isSuccess() && googleApiClient.isConnected()) {    Iterator<String> itr=Utils.getNodes(googleApiClient).iterator();    while (itr.hasNext()) {      Wearable.MessageApi.sendMessage(googleApiClient,itr.next(),Constants.CLEAR_NOTIFICATIONS_PATH,null);    }    googleApiClient.disconnect();  }}  }
class C{  public static <E extends Enum<?>>EventMapper<E> empty(final Class<? extends E> enumClass){  return new EventMapper<>(enumClass);}  }
class C{  public int provideBlockThreshold(){  return 1000;}  }
class C{  public int length(){  return this.myArrayList.size();}  }
class C{  public final void testValidateSucceeds(){  NumberValidator numberValidator=new NumberValidator("foo");  assertTrue(numberValidator.validate("123"));  assertTrue(numberValidator.validate(""));}  }
class C{  @Override public void onGroupExpand(int groupPosition){}  }
class C{  public static void incrementCounter(Context context,String counterGroup,String counterName,long increment){  context.getCounter(counterGroup,counterName).increment(increment);}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (!(obj instanceof JavaField)) {    return false;  }  JavaField fld=(JavaField)obj;  if (fld.getDeclaringClass().equals(this.getDeclaringClass())) {    return false;  }  if (fld.isEnumConstant() == this.isEnumConstant()) {    return false;  }  return fld.getName().equals(this.getName());}  }
class C{  public StaticVisualizationInstance(VisualizationTask task,VisualizationPlot plot,double width,double height,Element element){  super(task,plot,width,height);  this.layer=element;}  }
class C{  public byte[] compress(int width,int[] previousFrame,List<Integer> colorPalette) throws IOException {  ByteArrayOutputStream outputArray=new ByteArrayOutputStream();  DataOutputStream output=new DataOutputStream(outputArray);  int rowCount=previousFrame.length / width;  for (int row=0; row < rowCount; row++) {    int offset=row * width;    for (int iter=offset; iter < offset + width; iter++) {      if (previousFrame[iter] != imageData[iter]) {        output.writeShort(row);        for (int rowIter=0; rowIter < width; rowIter++) {          output.writeByte(getPaletteIndex(colorPalette,imageData[offset + rowIter]));        }        break;      }    }  }  output.writeShort(-1);  output.close();  byte[] bytes=outputArray.toByteArray();  if (bytes.length < imageData.length / 10 * 7) {    return bytes;  }  return null;}  }
class C{  @Override public void onUpgrade(SQLiteDatabase db,ConnectionSource connectionSource,int oldVersion,int newVersion){  resetDatabase(db);}  }
class C{  public XMLEventParser allocate(XMLEventParserContext ctx,XMLEvent event){  if (ctx == null) {    String message=Logging.getMessage("nullValue.ParserContextIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  XMLEventParser parser=ctx.allocate(event);  if (parser != null)   parser.setParent(this);  return parser;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.156 -0500",hash_original_method="E27069CB33BE85EAA2A2A23BD0F575F7",hash_generated_method="6A98932C22C2CB8ABCF2AF613C907DAD") public final void tunnelTarget(boolean secure){  if (!this.connected) {    throw new IllegalStateException("No tunnel unless connected.");  }  if (this.proxyChain == null) {    throw new IllegalStateException("No tunnel without proxy.");  }  this.tunnelled=TunnelType.TUNNELLED;  this.secure=secure;}  }
class C{  public static IsNullValue merge(IsNullValue a,IsNullValue b){  if (a == b) {    return a;  }  if (a.equals(b)) {    return a;  }  int aKind=a.kind & 0xff;  int bKind=b.kind & 0xff;  int aFlags=a.getFlags();  int bFlags=b.getFlags();  int combinedFlags=aFlags & bFlags;  if (!(a.isNullOnSomePath() || a.isDefinitelyNull()) && b.isException()) {    combinedFlags|=EXCEPTION;  } else   if (!(b.isNullOnSomePath() || b.isDefinitelyNull()) && a.isException()) {    combinedFlags|=EXCEPTION;  }  if (aKind < bKind) {    int tmp=aKind;    aKind=bKind;    bKind=tmp;  }  assert aKind >= bKind;  int result=mergeMatrix[aKind][bKind];  IsNullValue resultValue=(result == NO_KABOOM_NN) ? noKaboomNonNullValue(a.locationOfKaBoom) : instanceByFlagsList[combinedFlags >> FLAG_SHIFT][result];  return resultValue;}  }
class C{  public VectorSwitchPreference(Context context){  super(context,null);}  }
class C{  public Add(){  super(Number.class,Number.class,Number.class);}  }
class C{  private static String property(String string){  int length=string.length();  if (length == 0) {    return "";  } else   if (length == 1) {    return string.toLowerCase();  } else {    return string.substring(0,1).toLowerCase() + string.substring(1);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  return (pluggy != null && sage.plugin.CorePluginManager.getInstance().isPluginInstalled(pluggy.getId())) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  protected void addOneWayConnection(final Territory t1,final Territory t2){  if (t1.equals(t2)) {    throw new IllegalArgumentException("Cannot connect a territory to itself");  }  if (!m_territories.contains(t1) || !m_territories.contains(t2)) {    throw new IllegalArgumentException("Map doesnt know about one of " + t1 + " "+ t2);  }  setConnection(t1,t2);}  }
class C{  public boolean isEmpty(){  return values.size() == 0;}  }
class C{  public double normInf(){  double f=0;  for (int i=0; i < m; i++) {    double s=0;    for (int j=0; j < n; j++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public void insertBefore(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=insn;  } else {    prev.next=insn;  }  location.prev=insn;  insn.next=location;  insn.prev=prev;  cache=null;  insn.index=0;}  }
class C{  public Node addRoot(){  return getNode(addRootRow());}  }
class C{  @Override public SmileGenerator createJsonGenerator(OutputStream out,JsonEncoding enc) throws IOException {  return createJsonGenerator(out);}  }
class C{  public static boolean hasInlinePragma(RVMMethod callee,CompilationState state){  if (callee.hasInlineAnnotation()) {    Inline ann=callee.getAnnotation(Inline.class);    if (ann == null) {      return true;    }switch (ann.value()) {case Always:      return true;case AllArgumentsAreConstant:{      boolean result=true;      Instruction s=state.getCallInstruction();      for (int i=0, n=Call.getNumberOfParams(s); i < n; i++) {        if (!Call.getParam(s,i).isConstant()) {          result=false;          break;        }      }      if (result) {        return true;      }      break;    }case ArgumentsAreConstant:{    boolean result=true;    Instruction s=state.getCallInstruction();    int[] args=ann.arguments();    for (    int arg : args) {      if (VM.VerifyAssertions) {        boolean biggerThanMin=arg >= 0;        boolean smallerThanMax=arg < Call.getNumberOfParams(s);        if (!(smallerThanMax && biggerThanMin)) {          String msg="argument is invalid: " + arg;          VM._assert(VM.NOT_REACHED,msg);        }      }      if (!Call.getParam(s,arg).isConstant()) {        result=false;        break;      }    }    if (result) {      return true;    }    break;  }case AssertionsDisabled:{  return !VM.VerifyAssertions;}}}if (callee == Entrypoints.sysArrayCopy) {Operand src=Call.getParam(state.getCallInstruction(),0);return src.getType() != TypeReference.JavaLangObject;}return false;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:35.075 -0500",hash_original_method="7A57313C9AA4F0F08ECFF99E7B6FC0B1",hash_generated_method="7FC8F5683070E7BCE8C028220B925CA2") public int compareTo(Object o){  DriverCall dc;  dc=(DriverCall)o;  if (index < dc.index) {    return -1;  } else   if (index == dc.index) {    return 0;  } else {    return 1;  }}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  depositosSeleccionados=new String[0];}  }
class C{  public void printLine(String data,String charset) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.printLine(String)");  writeLine(EncodingUtil.getBytes(data,charset));}  }
class C{  public static void showToast(Context context,String message){  Toast.makeText(context,message,Toast.LENGTH_SHORT).show();}  }
class C{  public boolean isNumeric(){  int max=end == -1 ? current : end;  for (int i=start; i < max; i++) {    char c=text[i];    if (!Character.isDigit(c) && c != '.' && c != ',')     return false;  }  return true;}  }
class C{  @Override public void messageArrived(String topic,MqttMessage message) throws Exception {  service.traceDebug(TAG,"messageArrived(" + topic + ",{"+ message.toString()+ "})");  String messageId=service.messageStore.storeArrived(clientHandle,topic,message);  Bundle resultBundle=messageToBundle(messageId,topic,message);  resultBundle.putString(MqttServiceConstants.CALLBACK_ACTION,MqttServiceConstants.MESSAGE_ARRIVED_ACTION);  resultBundle.putString(MqttServiceConstants.CALLBACK_MESSAGE_ID,messageId);  service.callbackToActivity(clientHandle,Status.OK,resultBundle);}  }
class C{  public boolean isWebStoreFeatured(){  Object oo=get_Value(COLUMNNAME_IsWebStoreFeatured);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int highestOneBit(int i){  i|=(i >> 1);  i|=(i >> 2);  i|=(i >> 4);  i|=(i >> 8);  i|=(i >> 16);  return (i & ~(i >>> 1));}  }
class C{  public boolean isList_1(){  return list_1;}  }
class C{  private void startIfReady(Animator dependencyAnimation){  if (mAnimatorSet.mTerminated) {    return;  }  Dependency dependencyToRemove=null;  int numDependencies=mNode.tmpDependencies.size();  for (int i=0; i < numDependencies; ++i) {    Dependency dependency=mNode.tmpDependencies.get(i);    if (dependency.rule == mRule && dependency.node.animation == dependencyAnimation) {      dependencyToRemove=dependency;      dependencyAnimation.removeListener(this);      break;    }  }  mNode.tmpDependencies.remove(dependencyToRemove);  if (mNode.tmpDependencies.size() == 0) {    mNode.animation.start();    mAnimatorSet.mPlayingSet.add(mNode.animation);  }}  }
class C{  public void reset(String classNameWithDots) throws IllegalArgumentException, IllegalStateException {  if (classNameWithDots == null || classNameWithDots.isEmpty()) {    throw new IllegalArgumentException("Empty class name in input");  }  if (loader == null) {    throw new IllegalStateException("No specified loader");  }  Method m=getResetMethod(classNameWithDots);  if (m == null) {    return;  }  boolean safe=Sandbox.isSafeToExecuteSUTCode();  assert !Sandbox.isSecurityManagerInitialized() || Sandbox.isOnAndExecutingSUTCode();  InstrumentingAgent.activate();  org.evosuite.runtime.Runtime.getInstance().resetRuntime();  boolean wasLoopCheckOn=LoopCounter.getInstance().isActivated();  try {    if (!safe) {      Sandbox.goingToExecuteUnsafeCodeOnSameThread();    }    LoopCounter.getInstance().setActive(false);    m.invoke(null,(Object[])null);  } catch (  IllegalAccessException|IllegalArgumentException e) {    logger.error("" + e,e);  }catch (  NoClassDefFoundError e) {    AtMostOnceLogger.error(logger,e.toString());  }catch (  InvocationTargetException e) {    Throwable cause=e.getCause();    if (cause instanceof TooManyResourcesException || cause instanceof NoClassDefFoundError) {      logWarn(classNameWithDots,e.toString() + ", caused by: " + cause.toString());    } else {      StringWriter errors=new StringWriter();      cause.printStackTrace(new PrintWriter(errors));      logWarn(classNameWithDots,e.toString() + ", caused by: " + cause.toString()+ "\n"+ errors.toString());    }  } finally {    if (!safe) {      Sandbox.doneWithExecutingUnsafeCodeOnSameThread();    }    LoopCounter.getInstance().setActive(wasLoopCheckOn);  }  InstrumentingAgent.deactivate();}  }
class C{  public void v(Object str){  if (debug) {    if (logLevel <= Log.VERBOSE) {      String name=getFunctionName();      if (name != null) {        Log.v(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.v(tag,str.toString());      }    }  }}  }
class C{  public void stopScroll(){  mHandler.removeCallbacks(mScrollRunnable);  mStopped=true;}  }
class C{  public final int length(){  return eigenPairs.size();}  }
class C{  public void java_lang_Class_getField0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getFieldObject());}  }
class C{  private void failTask(Throwable e){  MiscUtils.logError(RemoveDeploymentWorkflowService.this,e);  TaskUtils.sendSelfPatch(this,buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  private LocoNetMessage createGetGroupChannelPacketInt(){  int i;  LocoNetMessage m=new LocoNetMessage(LnConstants.RE_DPLX_OP_LEN);  i=0;  m.setElement(i++,LnConstants.OPC_PEER_XFER);  m.setElement(i++,LnConstants.RE_DPLX_OP_LEN);  m.setElement(i++,LnConstants.RE_DPLX_GP_CHAN_TYPE);  m.setElement(i++,LnConstants.RE_DPLX_OP_TYPE_QUERY);  for (; i < (LnConstants.RE_DPLX_OP_LEN - 1); i++) {    m.setElement(i,0);  }  return m;}  }
class C{  protected int waitFor(int counter){  if (counter > 100)   --counter; else   if (counter > 0) {    --counter;    Thread.yield();  } else {    LockSupport.parkNanos(1l);  }  return counter;}  }
class C{  public boolean isZero(){  return hi == 0.0 && lo == 0.0;}  }
class C{  public void destroy(){  log.info("destroy");}  }
class C{  protected int nextIntSlow(){  final double bound=Math.exp(-mean);  int count=0;  double product;  for (product=1.0; product >= bound && product > 0.0; count++) {    product*=randomGenerator.nextDouble();  }  if (product <= 0.0 && bound > 0.0)   return (int)Math.round(mean);  return count - 1;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:35.912 -0400",hash_original_method="51D4B09F0769DB498C88D93C1DD1D610",hash_generated_method="51243C913151924050D95A4116E417C8") public boolean showOverflowMenu(){  if (mReserveOverflow && !isOverflowMenuShowing() && mMenu != null && mMenuView != null && mPostedOpenRunnable == null) {    OverflowPopup popup=new OverflowPopup(mContext,mMenu,mOverflowButton,true);    mPostedOpenRunnable=new OpenOverflowRunnable(popup);    ((View)mMenuView).post(mPostedOpenRunnable);    super.onSubMenuSelected(null);    return true;  }  return false;}  }
class C{  @Override public void updateBlob(int columnIndex,InputStream x) throws SQLException {  updateBlob(columnIndex,x,-1);}  }
class C{  private void findPingDataMethod(){  transport=(TP)getProtocolStack().getTransport();  try {    setPingData=TP.class.getDeclaredMethod("setPingData",new Class<?>[]{PingData.class});    setPingData.setAccessible(true);  } catch (  NoSuchMethodException e) {    if (!warningLogged) {      log.warn("Unable to update JGroups address cache - this may affect performance",e);      warningLogged=true;    }  }}  }
class C{  public int[][] multiply(int[][] A,int[][] B){  int mA=A.length;  int nA=A[0].length;  int nB=B[0].length;  int[][] res=new int[mA][nB];  for (int i=0; i < mA; i++) {    for (int j=0; j < nA; j++) {      if (A[i][j] != 0) {        for (int k=0; k < nB; k++) {          if (B[j][k] != 0) {            res[i][k]+=A[i][j] * B[j][k];          }        }      }    }  }  return res;}  }
class C{  public void export() throws IOException, SailException, RDFHandlerException {  System.out.println("Effective output directory: " + kbdir);  prepare();  exportProperties();  exportData();}  }
class C{  public long writeResult(PlatformMemory mem,Object obj){  return writeResult(mem,obj,null);}  }
class C{  public void encode(OutputStream out) throws IOException {  if (notBefore == null || notAfter == null) {    throw new IOException("CertAttrSet:CertificateValidity:" + " null values to encode.\n");  }  DerOutputStream pair=new DerOutputStream();  if (notBefore.getTime() < YR_2050) {    pair.putUTCTime(notBefore);  } else   pair.putGeneralizedTime(notBefore);  if (notAfter.getTime() < YR_2050) {    pair.putUTCTime(notAfter);  } else {    pair.putGeneralizedTime(notAfter);  }  DerOutputStream seq=new DerOutputStream();  seq.write(DerValue.tag_Sequence,pair);  out.write(seq.toByteArray());}  }
class C{  protected String toString(String op){  if (m_clauses.size() == 1) {    return m_clauses.get(0).toString();  }  StringBuffer sbuf=new StringBuffer();  sbuf.append('(');  Iterator iter=m_clauses.iterator();  while (iter.hasNext()) {    sbuf.append(iter.next().toString());    if (iter.hasNext()) {      sbuf.append(" ");      sbuf.append(op);      sbuf.append(" ");    }  }  sbuf.append(')');  return sbuf.toString();}  }
class C{  @Inline public final ObjectReference pop(){  if (checkDequeue(1)) {    return uncheckedDequeue().toObjectReference();  } else {    return ObjectReference.nullReference();  }}  }
class C{  private double[] computeShortestPathLenghts(int pStartNode,double pShortestPathLengthSum,double pMaxPathLength,Set<Integer> pWasSource){  Set<Integer> alreadyExpanded=new HashSet<Integer>();  List<int[]> queue=new ArrayList<int[]>();  int[] innerList=new int[2];  innerList[0]=pStartNode;  innerList[1]=0;  queue.add(innerList);  while (!queue.isEmpty()) {    int[] queueElement=queue.get(0);    int currentNode=queueElement[0];    int distance=queueElement[1];    queue.remove(0);    if (!alreadyExpanded.contains(currentNode)) {      alreadyExpanded.add(currentNode);      if (!pWasSource.contains(currentNode)) {        pShortestPathLengthSum+=distance;        if (distance > pMaxPathLength) {          pMaxPathLength=distance;        }      }      Set<Integer> neighbors=getNeighbors(currentNode);      for (      int neighbor : neighbors) {        if (!alreadyExpanded.contains(neighbor)) {          int[] tmpList=new int[2];          tmpList[0]=neighbor;          tmpList[1]=(distance + 1);          queue.add(tmpList);        }      }    }  }  double returnArray[]={pShortestPathLengthSum,pMaxPathLength};  return returnArray;}  }
class C{  public HollowTrieDistributor(final Iterable<? extends T> elements,final int log2BucketSize,final TransformationStrategy<? super T> transformationStrategy) throws IOException {  this(elements,log2BucketSize,transformationStrategy,null);}  }
class C{  public static Interaction copyInteraction(JCas jCas,int begin,int end,Interaction annotation){  try {    final Interaction instance=annotation.getClass().getConstructor(JCas.class).newInstance(jCas);    instance.setBegin(begin);    instance.setEnd(end);    instance.setValue(annotation.getValue());    return instance;  } catch (  final Exception e) {    LOGGER.warn("Unable to copy entity",e);    return null;  }}  }
class C{  public static String utf2string(byte[] src,int sindex,int len){  char dst[]=new char[len];  int len1=utf2chars(src,sindex,dst,0,len);  return new String(dst,0,len1);}  }
class C{  public ShoppingCart(Delegator delegator,String productStoreId,String webSiteId,Locale locale,String currencyUom,String billToCustomerPartyId,String billFromVendorPartyId){  this.delegator=delegator;  this.delegatorName=delegator.getDelegatorName();  this.productStoreId=productStoreId;  this.webSiteId=webSiteId;  this.locale=(locale != null) ? locale : Locale.getDefault();  this.currencyUom=(currencyUom != null) ? currencyUom : EntityUtilProperties.getPropertyValue("general.properties","currency.uom.id.default","USD",delegator);  this.billToCustomerPartyId=billToCustomerPartyId;  this.billFromVendorPartyId=billFromVendorPartyId;  if (productStoreId != null) {    GenericValue productStore=ProductStoreWorker.getProductStore(productStoreId,delegator);    if (productStore == null) {      throw new IllegalArgumentException("Unable to locate ProductStore by ID [" + productStoreId + "]");    }    String storeViewCartOnAdd=productStore.getString("viewCartOnAdd");    if (storeViewCartOnAdd != null && "Y".equalsIgnoreCase(storeViewCartOnAdd)) {      this.viewCartOnAdd=true;    }    if (billFromVendorPartyId == null) {      this.billFromVendorPartyId=productStore.getString("payToPartyId");    }    this.facilityId=productStore.getString("inventoryFacilityId");  }}  }
class C{  @SuppressWarnings("unchecked") public void printType(Type type) throws IOException {  if (type instanceof Class<?>) {    printTypeClass((Class<?>)type);  } else   if (type instanceof ParameterizedType) {    ParameterizedType parameterizedType=(ParameterizedType)type;    printParameterizedType(parameterizedType);  } else   if (type instanceof WildcardType) {    WildcardType wildcardType=(WildcardType)type;    printWildcardType(wildcardType);  } else   if (type instanceof TypeVariable<?>) {    TypeVariable<? extends GenericDeclaration> typeVariable=(TypeVariable<? extends GenericDeclaration>)type;    printTypeVariable(typeVariable);  } else   if (type instanceof GenericArrayType) {    GenericArrayType genericArrayType=(GenericArrayType)type;    printType(genericArrayType.getGenericComponentType());    print("[]");  } else {    throw new UnsupportedOperationException(type.getClass().getName() + " " + String.valueOf(type));  }}  }
class C{  protected String doIt() throws Exception {  for (  MPPMRP mrp : getMRPRecords()) {    saveBrowseValues(mrp,"MRP");    if (p_Priority != null)     mrp.setPriority(p_Priority);    if (p_OrderType != null && !mrp.getOrderType().equals(p_OrderType)) {      createSupply(mrp,p_OrderType);      continue;    }    if (EXECUTION_MODE.equals(MPPMRP.ORDERTYPE_ManufacturingOrder))     executeManufacturingOrderApproval(mrp);    if (EXECUTION_MODE.equals(MPPMRP.ORDERTYPE_DistributionOrder))     executeDistributionOrderApproval(mrp);    if (EXECUTION_MODE.equals(MPPMRP.ORDERTYPE_MaterialRequisition)) {      if (p_C_BPartner_ID > 0)       mrp.setC_BPartner_ID(p_C_BPartner_ID);      executeRequisitionApproval(mrp);    }  }  return null;}  }
class C{  public URIChooser(JFrame f){  super(f);  initialize();}  }
class C{  public boolean isProvidedByRuntime(){  return this.isDeclaredProvidedByRuntime();}  }
class C{  public boolean isInteger(){  if (denominator == 1 || (denominator != 0 && (numerator % denominator == 0)) || (denominator == 0 && numerator == 0)) {    return true;  } else {    return false;  }}  }
class C{  public void onPull(float deltaDistance){  final long now=AnimationUtils.currentAnimationTimeMillis();  if (mState == STATE_PULL_DECAY && now - mStartTime < mDuration) {    return;  }  if (mState != STATE_PULL) {    mGlowScaleY=PULL_GLOW_BEGIN;  }  mState=STATE_PULL;  mStartTime=now;  mDuration=PULL_TIME;  mPullDistance+=deltaDistance;  float distance=Math.abs(mPullDistance);  mEdgeAlpha=mEdgeAlphaStart=Math.max(PULL_EDGE_BEGIN,Math.min(distance,MAX_ALPHA));  mEdgeScaleY=mEdgeScaleYStart=Math.max(HELD_EDGE_SCALE_Y,Math.min(distance * PULL_DISTANCE_EDGE_FACTOR,1.f));  mGlowAlpha=mGlowAlphaStart=Math.min(MAX_ALPHA,mGlowAlpha + (Math.abs(deltaDistance) * PULL_DISTANCE_ALPHA_GLOW_FACTOR));  float glowChange=Math.abs(deltaDistance);  if (deltaDistance > 0 && mPullDistance < 0) {    glowChange=-glowChange;  }  if (mPullDistance == 0) {    mGlowScaleY=0;  }  mGlowScaleY=mGlowScaleYStart=Math.min(MAX_GLOW_HEIGHT,Math.max(0,glowChange * PULL_DISTANCE_GLOW_FACTOR));  mEdgeAlphaFinish=mEdgeAlpha;  mEdgeScaleYFinish=mEdgeScaleY;  mGlowAlphaFinish=mGlowAlpha;  mGlowScaleYFinish=mGlowScaleY;}  }
class C{  @Override public void compactNodeNumbering(){  int number=0;  for (SpaceEffGraphNode n=_firstNode; n != null; n=n.getNext()) {    n.setNumber(number++);  }  numberOfNodes=number;}  }
class C{  @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.169 -0400",hash_original_method="3A2EB4D569355BA71C0E0FA5BABABA3C",hash_generated_method="2BDB5583EA646A9E298BAF5B29E076EC") private static void doCopyDirectory(File srcDir,File destDir,FileFilter filter,boolean preserveFileDate,List<String> exclusionList) throws IOException {  File[] srcFiles=filter == null ? srcDir.listFiles() : srcDir.listFiles(filter);  if (srcFiles == null) {    throw new IOException("Failed to list contents of " + srcDir);  }  if (destDir.exists()) {    if (destDir.isDirectory() == false) {      throw new IOException("Destination '" + destDir + "' exists but is not a directory");    }  } else {    if (!destDir.mkdirs() && !destDir.isDirectory()) {      throw new IOException("Destination '" + destDir + "' directory cannot be created");    }  }  if (destDir.canWrite() == false) {    throw new IOException("Destination '" + destDir + "' cannot be written to");  }  for (  File srcFile : srcFiles) {    File dstFile=new File(destDir,srcFile.getName());    if (exclusionList == null || !exclusionList.contains(srcFile.getCanonicalPath())) {      if (srcFile.isDirectory()) {        doCopyDirectory(srcFile,dstFile,filter,preserveFileDate,exclusionList);      } else {        doCopyFile(srcFile,dstFile,preserveFileDate);      }    }  }  if (preserveFileDate) {    destDir.setLastModified(srcDir.lastModified());  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.563 -0500",hash_original_method="1E01EF0F20C48DC869D8591ACBCB40DD",hash_generated_method="71B18765A1186C2AB489F063F2C7351C") private float drawRun(Canvas c,int start,int limit,boolean runIsRtl,float x,int top,int y,int bottom,boolean needWidth){  if ((mDir == Layout.DIR_LEFT_TO_RIGHT) == runIsRtl) {    float w=-measureRun(start,limit,limit,runIsRtl,null);    handleRun(start,limit,limit,runIsRtl,c,x + w,top,y,bottom,null,false);    return w;  }  return handleRun(start,limit,limit,runIsRtl,c,x,top,y,bottom,null,needWidth);}  }
class C{  public void finishPacketWithoutRelease(boolean logQuery) throws IOException {  if (buffer.position() > 4) {    checkPacketMaxSize(buffer.position() - 4);    if (useCompression) {      generatePacketWithCompression(logQuery);    } else {      generatePacket(logQuery);    }  }  this.lastSeq=(useCompression) ? this.compressSeqNo : this.seqNo;}  }
class C{  public Object resolveReference(String link){  if (link == null) {    String message=Logging.getMessage("nullValue.DocumentSourceIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  try {    String[] linkParts=link.split("#");    String linkBase=linkParts[0];    String linkRef=linkParts.length > 1 ? linkParts[1] : null;    if (WWUtil.isEmpty(linkBase) && !WWUtil.isEmpty(linkRef))     return this.getItemByID(linkRef);    String path=this.getSupportFilePath(linkBase);    if (path == null)     path=linkBase;    Object o=WorldWind.getSessionCache().get(path);    if (o != null && o instanceof ColladaRoot)     return linkRef != null ? ((ColladaRoot)o).getItemByID(linkRef) : o;    URL url=WWIO.makeURL(path);    if (url == null) {      o=this.resolveLocalReference(path,linkRef);    }    if (o == null)     o=this.resolveRemoteReference(path,linkRef);    if (o != null)     return o;    return this.getItemByID(link);  } catch (  Exception e) {    String message=Logging.getMessage("generic.UnableToResolveReference",link);    Logging.logger().warning(message);  }  return null;}  }
class C{  private Object lock(){  Document document=getDocument();  if (document instanceof AbstractDocument) {    ((AbstractDocument)document).readLock();    return document;  }  return null;}  }
class C{  private static void deleteSubscription(CalendarEntry calendar) throws IOException, ServiceException {  System.out.println("Deleting the subscription to the Doodles calendar");  calendar.delete();}  }
class C{  void paintHouseNumber(final float x,final float y,final Canvas canvas,final String featureKeyThin,final String houseNumber){  Paint paint2=DataStyle.getCurrent(featureKeyThin).getPaint();  canvas.drawCircle(x,y,houseNumberRadius,paint2);  canvas.drawText(houseNumber,x - (paint2.measureText(houseNumber) / 2),y + verticalNumberOffset,paint2);}  }
class C{  public HyperGraph(String location){  open(location);}  }
class C{  public static void test2(){  DataFlavor df=new DataFlavor("text/plain-test2",null);  String nat="native2";  DataFlavor extraDf=new DataFlavor("text/test",null);  List<String> natives=fm.getNativesForFlavor(df);  natives.add("Should not be here");  java.util.List nativesNew=fm.getNativesForFlavor(df);  if (natives.equals(nativesNew)) {    System.err.println("orig=" + natives);    System.err.println("new=" + nativesNew);    throw new RuntimeException("Test failed");  }  List<DataFlavor> flavors=fm.getFlavorsForNative(nat);  flavors.add(extraDf);  java.util.List flavorsNew=fm.getFlavorsForNative(nat);  if (flavors.equals(flavorsNew)) {    System.err.println("orig=" + flavors);    System.err.println("new=" + flavorsNew);    throw new RuntimeException("Test failed");  }}  }
class C{  protected void addNewImagesWithFileChooser(){  File startingPoint=new File(Environment.get("lastchosendirectory",System.getProperty("user.home")));  JFileChooser chooser=new JFileChooser(startingPoint);  String title=i18n.get(ImageTileLayer.class,"addImagesWindowTitle","Add Images");  chooser.setDialogTitle(title);  chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);  chooser.setFileFilter(new ImageLoaderFileFilter(imageReaderLoaders));  String acceptButtonText=i18n.get(ImageTileLayer.class,"acceptButtonText","Add");  int state=chooser.showDialog(null,acceptButtonText);  try {    if ((state != JFileChooser.CANCEL_OPTION) && (state != JFileChooser.ERROR_OPTION)) {      String newFile=chooser.getSelectedFile().getCanonicalPath();      int dirIndex=newFile.lastIndexOf(File.separator);      if (dirIndex >= 0) {        Environment.set("lastchosendirectory",newFile.substring(0,dirIndex));      }      OMGraphicList list=getList();      if (list == null) {        list=new OMGraphicList();        setList(list);      }      LoadImageThread lit=new LoadImageThread(newFile,list);      lit.start();    }  } catch (  IOException ioe) {    JOptionPane.showMessageDialog(null,ioe.getMessage(),"Error picking file",JOptionPane.ERROR_MESSAGE);    ioe.printStackTrace();  }}  }
class C{  public static RegionRequest createForCreateRoot(CacheInfo c,String name,RegionAttributes attrs){  RegionRequest m=new RegionRequest();  m.action=CREATE_VM_ROOT;  m.cacheId=c.getId();  m.newRegionName=name;  m.newRegionAttributes=new RemoteRegionAttributes(attrs);  RegionRequest.setFriendlyName(m);  return m;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public OnStateExitEvent(Object source,State<?,?> state){  super(source);  this.state=state;}  }
class C{  private IdentifierNode identifierNode(String simpleName,ObjectValue ns){  IdentifierNode id=ctx.getNodeFactory().identifier(simpleName);  id.ref=new ReferenceValue(ctx,null,id.name,ns);  return id;}  }
class C{  public boolean supportsConversion(Class<?> targetType,Object valueToConvert){  boolean rVal=false;  if (Money.class.equals(targetType)) {    rVal=true;  }  return (rVal);}  }
class C{  public address(span element){  addElement(element);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:48.252 -0500",hash_original_method="EB0F38C5E31652AF776348A02A47056B",hash_generated_method="74C06BE7072E312CD9B8F51DA0C39606") public int size(){  return this.dataSize;}  }
class C{  public void characters(char ch[],int start,int length) throws SAXException {  if (m_textPendingStart == -1) {    m_textPendingStart=m_chars.size();    m_coalescedTextType=m_textType;  } else   if (m_textType == DTM.TEXT_NODE) {    m_coalescedTextType=DTM.TEXT_NODE;  }  m_chars.append(ch,start,length);}  }
class C{  private void fillQueue(int size){  for (int i=1; i < size + 1; i++) {    store.add(getQueuedRequest(i));  }}  }
class C{  public void addError(String level,TableModel table,IndexModel index,String message){  if (level.equals(DBPlugin.LEVEL_ERROR)) {    this.errors.add(new DiagramError(table,createIndexMessage(table,index,message),level));    addErrorMessageToModel(table,ERROR_PREFIX + createIndexMessage(index,message));  } else   if (level.equals(DBPlugin.LEVEL_WARNING)) {    this.errors.add(new DiagramError(table,createIndexMessage(table,index,message),level));    addErrorMessageToModel(table,WARNING_PREFIX + createIndexMessage(index,message));  }}  }
class C{  public Builder withErrorCode(String errorCode){  if (exists(errorCode)) {    requestMessage.setErrorCode(errorCode);  }  return this;}  }
class C{  public static void copyToClipboard(BufferedImage img){  ClipboardHelper.copyToClipboard(img);}  }
class C{  public void addTable(int idx,Table table){  if (table != null) {    tables.add(idx,table);  }}  }
class C{  public Word xor(Word w2){  return new Word(value.xor(w2.value));}  }
class C{  public ToStringBuilder append(final String fieldName,final short value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  public void clear(){  List<String> l=new LinkedList<String>();  for (  String string : this)   l.add(string);  for (  String string : l)   removeEntry(string);}  }
class C{  public boolean containsFieldValues(Object[] fieldValues){  if (this.hasLimitIterator) {    Iterator fieldItr=this.fieldValuesIterator();    while (fieldItr.hasNext()) {      if (Arrays.equals((Object[])fieldItr.next(),fieldValues)) {        return true;      }    }    return false;  } else {    return super.contains(fieldValues);  }}  }
class C{  protected static void addParameter(StringBuilder body,String name,String value){  nonNull(body).append('&').append(nonNull(name)).append('=').append(nonNull(value));}  }
class C{  public boolean canAcceptNextCommand(){  return nextCommand;}  }
class C{  private void completePrologue(boolean isOutermost){  if (!isOutermost && requiresUnintMarker()) {    Instruction s=Empty.create(UNINT_BEGIN);    appendInstruction(prologue,s,PROLOGUE_BCI);  }  if (method.isForOsrSpecialization()) {  } else   if (method.isSynchronized() && !options.ESCAPE_INVOKEE_THREAD_LOCAL) {    Operand lockObject=getLockObject();    Instruction s=MonitorOp.create(MONITORENTER,lockObject,new TrueGuardOperand());    appendInstruction(prologue,s,SYNCHRONIZED_MONITORENTER_BCI);  }}  }
class C{  boolean workspaceExists(){  File workspaceDir=getWorkspaceDir();  return workspaceDir.isDirectory() && !FileMisc.list(workspaceDir).isEmpty();}  }
class C{  public void finish() throws Exception {}  }
class C{  public String[] parseSharedStrings(Operator op,Charset encoding) throws XMLStreamException, IOException, UserError {  boolean isCurrentTagText=false;  int numberOfItems=0;  int stringItemCounter=0;  String[] xlsxSharedStrings=null;  XMLStreamReader reader=null;  try (ZipFile zipFile=new ZipFile(xlsxFile)){    ZipEntry zipEntry=zipFile.getEntry(XlsxUtilities.XLSX_PATH_PREFIX + sharedStringsFilePath);    if (zipEntry == null) {      return new String[0];    }    InputStream inputStream=zipFile.getInputStream(zipEntry);    reader=xmlFactory.createXMLStreamReader(new InputStreamReader(inputStream,encoding));    while (reader.hasNext()) {switch (reader.next()) {case XMLStreamReader.START_ELEMENT:        Attributes attributes=XlsxUtilities.getAttributes(reader);      if (reader.getLocalName().equals(TAG_SHARED_STRING_TABLE)) {        String uniqueCount=attributes.getValue(ATT_SHARED_STRING_TABLE_UNIQUE_COUNT);        if (uniqueCount != null) {          numberOfItems=Integer.parseInt(uniqueCount);        } else {          String count=attributes.getValue(ATT_SHARED_STRING_TABLE_COUNT);          if (count != null) {            numberOfItems=Integer.parseInt(count);          }        }        xlsxSharedStrings=new String[numberOfItems];      } else       if (reader.getLocalName().equals(TAG_TEXT)) {        isCurrentTagText=true;      }    break;case XMLStreamReader.END_ELEMENT:  if (reader.getLocalName().equals(TAG_STRING_ITEM)) {    stringItemCounter++;  } else   if (reader.getLocalName().equals(TAG_TEXT)) {    isCurrentTagText=false;  }break;case XMLStreamReader.CHARACTERS:if (isCurrentTagText) {if (xlsxSharedStrings[stringItemCounter] == null) {  xlsxSharedStrings[stringItemCounter]=reader.getText();} else {  xlsxSharedStrings[stringItemCounter]+=reader.getText();}}break;case XMLStreamReader.END_DOCUMENT:if (stringItemCounter != numberOfItems) {throw new UserError(op,"xlsx_content_malformed");}break;default :break;}}}  finally {if (reader != null) {reader.close();}}return xlsxSharedStrings;}  }
class C{  public int bufferSizeInBytes(){  return this.bufferSizeInBytes;}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  private synchronized RepaintArea cloneAndReset(){  RepaintArea ra=new RepaintArea(this);  for (int i=0; i < RECT_COUNT; i++) {    paintRects[i]=null;  }  return ra;}  }
class C{  public static int roundUpInt(int x,int blockSizePowerOf2){  return (x + blockSizePowerOf2 - 1) & (-blockSizePowerOf2);}  }
class C{  public OsmImport(final Frame owner){  super(owner,true);  initComponents();  setupComponents();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.591 -0500",hash_original_method="5809CEAF07E4362D00D2201A47AD6598",hash_generated_method="4396A6EB8ADD6B1AE76CDB68A0E576C4") public static int green(int color){  return (color >> 8) & 0xFF;}  }
class C{  @OnClick(R.id.up_arrow) public void increaseRecharge(View view){  presenter.increaseAmount();}  }
class C{  private void populateData(Region region,Object[] data){  for (int j=0; j < data.length; j++) {    region.put(new Integer(j),data[j]);  }}  }
class C{  private void onUp(float x,float y){  final TouchedMenuItem touchedItem=getTouchedMenuItem(x,y);  if (!mMaybeSingleTap || (touchedItem.item == null) || touchedItem.isDirectTouch) {    onItemSelected(touchedItem.item);  }}  }
class C{  public static byte[] closeBox(byte[] header,byte[] plainText,byte[] random32,ActorBoxKey key) throws IntegrityException {  CBCHmacBox aesCipher=new CBCHmacBox(new AESFastEngine(key.getKeyAES()),new SHA256(),key.getMacAES());  CBCHmacBox kuzCipher=new CBCHmacBox(new KuznechikFastEngine(key.getKeyKuz()),new Streebog256(),key.getMacKuz());  int paddingSize=(plainText.length + 1) % 16;  byte[] paddedPlainText=new byte[plainText.length + 1 + paddingSize];  ByteStrings.write(paddedPlainText,0,plainText,0,plainText.length);  paddedPlainText[paddedPlainText.length - 1]=(byte)paddingSize;  PKCS7Padding padding=new PKCS7Padding();  padding.padding(paddedPlainText,plainText.length,paddingSize);  byte[] kuzIv=ByteStrings.substring(random32,0,16);  byte[] aesIv=ByteStrings.substring(random32,16,16);  byte[] kuzPackage=ByteStrings.merge(kuzIv,kuzCipher.encryptPackage(header,kuzIv,paddedPlainText));  return ByteStrings.merge(aesIv,aesCipher.encryptPackage(header,aesIv,kuzPackage));}  }
class C{  void removeSuborganizations(String organizationId,int pageSize) throws ServerException {  Page<OrganizationImpl> suborganizationsPage;  do {    suborganizationsPage=organizationDao.getByParent(organizationId,pageSize,0);    for (    OrganizationImpl suborganization : suborganizationsPage.getItems()) {      organizationDao.remove(suborganization.getId());    }  } while (suborganizationsPage.hasNextPage());}  }
class C{  public DataSortedTableModel(TableModel model){  super(model);}  }
class C{  public Node peek(){  return null;}  }
class C{  public JedisIcicle(final String hostAndPort){  this.jedisPool=jedisPoolFromServerAndPort(hostAndPort);}  }
class C{  public float normmax(){  float max=0.0f;  for (int i=0; i < length; i++) {    float a=Math.abs(get(i));    if (a > max) {      max=a;    }  }  return max;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void sendX10Sequence(X10Sequence s,SerialListener l){}  }
class C{  public LiteralItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public AutoCompleteDictionary createDefaultDictionary(){  return new StringTrieSet(true);}  }
class C{  public boolean open(String id){  map_id=id;  File mapFile=new File(levelDir.getAbsolutePath() + "/data/map_" + map_id+ ".dat");  if (!mapFile.exists())   return false;  try {    GZIPInputStream stream=new GZIPInputStream(new FileInputStream(mapFile));    root=(TAG_Compound)NBT_Tag.make(stream);    stream.close();  } catch (  FileNotFoundException e) {    return false;  }catch (  Exception e) {    Log.error("Error reading map.dat",e,false);    return false;  }  return true;}  }
class C{  public TextViewerAction(ITextViewer viewer,int operationCode){  fOperationCode=operationCode;  fOperationTarget=viewer.getTextOperationTarget();  update();}  }
class C{  @SuppressWarnings("unchecked") private void registerValueMethod(Class type,Method method){  executor.register(type,wrapValueMethod(method));}  }
class C{  public void determineRuntimeValues(){  try {synchronized (lock) {      Class<?> testClass=instrumentTest();      boolean enabled=ExecutionTracer.isEnabled();      ExecutionTracer.disable();      JUnitCore jUnitCore=new JUnitCore();      jUnitCore.addListener(this);      Result result=jUnitCore.run(testClass);      currentTest=null;      logger.info("Ran {} tests to determine runtime values.",result.getRunCount());      for (      Failure failure : result.getFailures()) {        if (failure.getDescription().getDisplayName().startsWith("initializationError")) {          failure.getException().printStackTrace();          throw new RuntimeException(failure.getException());        }      }      if (enabled) {        ExecutionTracer.enable();      }    }  } catch (  RuntimeException exc) {    if (exc.getCause() instanceof ClassNotFoundException) {      logger.error("Unable to load class. Will continue without execution.");    }  }}  }
class C{  private void addNavigationLinks(Element entry,Book book){  String filename;  if (!currentProfile.getGenerateCrossLinks()) {    return;  }  if (isSeriesCrossreferences(book)) {    Series serie=book.getSeries();    if (logger.isTraceEnabled())     logger.trace("addNavigationLinks: add the series link");    filename=SeriesSubCatalog.getSeriesFolderFilenameNoLevel(serie) + Constants.PAGE_ONE_XML;    entry.addContent(FeedHelper.getRelatedLink(CatalogManager.getCatalogFileUrl(filename,true),book.getSerieIndex() == 0 ? Localization.Main.getText("bookentry.seriesonly",serie.getName()) : Localization.Main.getText("bookentry.seriesindex",book.getSerieIndex(),serie.getName())));    serie.setReferenced();  }  String booksText=Localization.Main.getText("bookword.title");  if (isAuthorCrossReferences(book)) {    if (logger.isTraceEnabled())     logger.trace("addNavigationLinks: add the author page link(s)");    for (    Author author : book.getAuthors()) {      String authorName=author.getName();      if (authorName.toUpperCase().equals("UNKNOWN") || authorName.toUpperCase().equals("VARIOUS")) {        continue;      }      filename=AuthorsSubCatalog.getAuthorFolderFilenameNoLevel(author) + Constants.PAGE_ONE_XML;      entry.addContent(FeedHelper.getRelatedLink(CatalogManager.getCatalogFileUrl(filename,true),Localization.Main.getText("bookentry.author",booksText,authorName)));      author.setReferenced();    }  }  if (isTagCrossReferences(book)) {    if (logger.isTraceEnabled())     logger.trace("addNavigationLinks: add the tags links");    for (    final Tag tag : book.getTags()) {      if (!CatalogManager.getTagsToIgnore().contains(tag)) {        int nbBooks=DataModel.getMapOfBooksByTag().get(tag).size();        filename=TagsSubCatalog.getTagFolderFilenameNoLevel(tag) + Constants.PAGE_ONE_XML;        if (nbBooks > 1) {          entry.addContent(FeedHelper.getRelatedLink(CatalogManager.getCatalogFileUrl(filename,true),Localization.Main.getText("bookentry.tags",booksText,tag.getName())));          tag.setReferenced();        }      }    }  }  if (isRatingCrossReferences(book)) {    if (logger.isTraceEnabled())     logger.trace("addNavigationLinks: add the ratings links");    int nbBooks=DataModel.getMapOfBooksByRating().get(book.getRating()).size();    if (nbBooks > 1) {      BookRating rating=book.getRating();      filename=getCatalogBaseFolderFileNameId(Constants.RATED_TYPE,rating.getId().toString()) + Constants.PAGE_ONE_XML;      entry.addContent(FeedHelper.getRelatedLink(CatalogManager.getCatalogFileUrl(filename,true),Localization.Main.getText("bookentry.ratings",booksText,LocalizationHelper.getEnumConstantHumanName(rating))));      rating.setReferenced();    }  }}  }
class C{  public boolean readNextValue(List<byte[][]> values) throws IOException, QueryException {  int length=inputStream.readHeader();  if (length < 0x00ffffff) {    int read=inputStream.read() & 0xff;    if (logger.isTraceEnabled())     logger.trace("read packet data(part):0x" + Integer.valueOf(String.valueOf(read),16));    int remaining=length - 1;    if (read == 255) {      protocol.setActiveStreamingResult(null);      Buffer buffer=packetFetcher.getReusableBuffer(remaining,lastReusableArray);      ErrorPacket errorPacket=new ErrorPacket(buffer,false);      lastReusableArray=null;      throw new QueryException(errorPacket.getMessage(),errorPacket.getErrorNumber(),errorPacket.getSqlState());    }    if (read == 254 && remaining < 9) {      Buffer buffer=packetFetcher.getReusableBuffer(remaining,lastReusableArray);      protocol.setHasWarnings(((buffer.buf[0] & 0xff) + ((buffer.buf[1] & 0xff) << 8)) > 0);      protocol.setMoreResults(callableResult || (((buffer.buf[2] & 0xff) + ((buffer.buf[3] & 0xff) << 8)) & ServerStatus.MORE_RESULTS_EXISTS) != 0,isBinaryEncoded);      if (!protocol.hasMoreResults()) {        if (protocol.getActiveStreamingResult() == this)         protocol.setActiveStreamingResult(null);        protocol=null;        packetFetcher=null;        inputStream=null;      }      lastReusableArray=null;      isEof=true;      return false;    }    values.add(rowPacket.getRow(packetFetcher,inputStream,remaining,read));    return true;  }  Buffer buffer=packetFetcher.getReusableBuffer(length,lastReusableArray);  lastReusableArray=buffer.buf;  if (buffer.getByteAt(0) == Packet.ERROR) {    protocol.setActiveStreamingResult(null);    ErrorPacket errorPacket=new ErrorPacket(buffer);    lastReusableArray=null;    throw new QueryException(errorPacket.getMessage(),errorPacket.getErrorNumber(),errorPacket.getSqlState());  }  if ((buffer.getByteAt(0) == Packet.EOF && buffer.limit < 9)) {    if (protocol.getActiveStreamingResult() == this) {      protocol.setActiveStreamingResult(null);    }    protocol.setHasWarnings(((buffer.buf[1] & 0xff) + ((buffer.buf[2] & 0xff) << 8)) > 0);    protocol.setMoreResults(callableResult || (((buffer.buf[3] & 0xff) + ((buffer.buf[4] & 0xff) << 8)) & ServerStatus.MORE_RESULTS_EXISTS) != 0,isBinaryEncoded);    protocol=null;    packetFetcher=null;    inputStream=null;    isEof=true;    lastReusableArray=null;    return false;  }  values.add(rowPacket.getRow(packetFetcher,buffer));  return true;}  }
class C{  public SetTaskContainerMapping(CoordinatorStreamMessage message){  super(message.getKeyArray(),message.getMessageMap());}  }
class C{  protected void checkMethodSignature(Method mtd) throws IgniteCheckedException {  Class<?>[] paramTypes=mtd.getParameterTypes();  Collection<Integer> allowedParamIdxs=new LinkedList<>();  for (int i=0; i < paramTypes.length; i++) {    Class<?> paramType=paramTypes[i];    if (GridifyUtils.isMethodParameterTypeAllowed(paramType))     allowedParamIdxs.add(i);  }  if (allowedParamIdxs.isEmpty()) {    throw new IgniteCheckedException("Invalid method signature. Failed to get valid method parameter types " + "[mtdName=" + mtd.getName() + ", allowedTypes="+ GridifyUtils.getAllowedMethodParameterTypes()+ ']');  }  List<Integer> annParamIdxs=new LinkedList<>();  for (int i=0; i < paramTypes.length; i++) {    Class<?> paramType=paramTypes[i];    if (GridifyUtils.isMethodParameterTypeAnnotated(paramType.getDeclaredAnnotations()))     annParamIdxs.add(i);  }  if (annParamIdxs.size() > 1) {    throw new IgniteCheckedException("Invalid method signature. Only one method parameter can may annotated with @" + GridifyInput.class.getSimpleName() + "[mtdName="+ mtd.getName()+ ", allowedTypes="+ GridifyUtils.getAllowedMethodParameterTypes()+ ", annParamIdxs="+ annParamIdxs+ ']');  }  if (allowedParamIdxs.size() > 1 && annParamIdxs.isEmpty()) {    throw new IgniteCheckedException("Invalid method signature. Method parameter must be annotated with @" + GridifyInput.class.getSimpleName() + "[mtdName="+ mtd.getName()+ ", allowedTypes="+ GridifyUtils.getAllowedMethodParameterTypes()+ ", allowedParamIdxs="+ allowedParamIdxs+ ']');  }  if (!annParamIdxs.isEmpty() && !allowedParamIdxs.contains(annParamIdxs.get(0))) {    throw new IgniteCheckedException("Invalid method signature. Invalid annotated parameter " + "[mtdName=" + mtd.getName() + ", allowedTypes="+ GridifyUtils.getAllowedMethodParameterTypes()+ ", allowedParamIdxs="+ allowedParamIdxs+ ", annParamIdxs="+ annParamIdxs+ ']');  }}  }
class C{  protected AbstractAttrNS(){}  }
class C{  public static void main(String... argv){  SortedSet<String> keys=Sets.newTreeSet();  SortedSet<String> literals=Sets.newTreeSet();  for (  ImmutableMap.Entry<String,Property> e : DEFINITIONS.entrySet()) {    keys.add(e.getKey());    literals.addAll(e.getValue().literals);  }  System.out.println("# Below two blocks of tokens.\n" + "#\n" + "# First are all property names.\n"+ "# Those followed by an asterisk (*) are in the default white-list.\n"+ "#\n"+ "# Second are the literal tokens recognized in any defined property\n"+ "# value.\n");  for (  String key : keys) {    System.out.print(key);    if (DEFAULT_WHITELIST.contains(key)) {      System.out.print("*");    }    System.out.println();  }  System.out.println();  for (  String literal : literals) {    System.out.println(literal);  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.267 -0500",hash_original_method="3CA57F292A4B96862265187DF8ED7F28",hash_generated_method="B7D6D593ACA01293CE82D91E7B242D5B") private void parseFragment(InputStream in) throws IOException, SAXException {  byte[] buffer=new byte[BUFFER_SIZE];  int length;  while ((length=in.read(buffer)) != -1) {    try {      appendBytes(this.pointer,buffer,0,length);    } catch (    ExpatException e) {      throw new ParseException(e.getMessage(),this.locator);    }  }}  }
class C{  public static boolean stringLengthOK(String s){  if (s == null) {    throw new IllegalArgumentException("s is null");  }  Boolean b=stringLengthOKCached.get(s);  if (b != null) {    return b;  }  boolean retval=isOKLength(s);  stringLengthOKCached.put(s,retval);  return retval;}  }
class C{  public int hashCode(){  return shift_to().hashCode();}  }
class C{  public ExternalFolder(IProject project,IContainer parent,File file){  super(new Path(file.getAbsolutePath()),null);  this.file=file;  this.project=project;  this.parent=parent;}  }
class C{  @Deprecated public void reStart(List<String> urls,OnFileDownloadStatusListener onFileDownloadStatusListener){  DownloadStatusConfiguration.Builder builder=new Builder();  builder.addListenUrls(urls);  builder.configAutoRelease(true);  registerDownloadStatusListener(onFileDownloadStatusListener,builder.build());  reStart(urls);}  }
class C{  public static <T>boolean anySatisfy(Iterable<T> iterable,Predicate<? super T> predicate){  if (iterable instanceof RichIterable) {    return ((RichIterable<T>)iterable).anySatisfy(predicate);  }  if (iterable instanceof ArrayList) {    return ArrayListIterate.anySatisfy((ArrayList<T>)iterable,predicate);  }  if (iterable instanceof RandomAccess) {    return RandomAccessListIterate.anySatisfy((List<T>)iterable,predicate);  }  if (iterable != null) {    return IterableIterate.anySatisfy(iterable,predicate);  }  throw new IllegalArgumentException("Cannot perform an anySatisfy on null");}  }
class C{  public static <T>T max(T[] items){  return max((Iterable<T>)Arrays.asList(items));}  }
class C{  public UpdateRequest detectNoop(boolean detectNoop){  this.detectNoop=detectNoop;  return this;}  }
class C{  public static ComponentUI createUI(JComponent x){  return new SeaGlassMenuUI();}  }
class C{  public double innerProduct(DoubleVector v){  if (size() != v.size()) {    throw new IllegalArgumentException("sizes unmatch");  }  double p=0;  for (int i=0; i < size(); i++) {    p+=V[i] * v.V[i];  }  return p;}  }
class C{  public Writer writeTo(final Writer out) throws IOException {  return out;}  }
class C{  public boolean hasNextBoolean(){  return hasNext(boolPattern());}  }
class C{  public <T extends GeoVisibleResource>T queryObject(Class<T> clazz,URI id) throws Exception {  WebResource rRoot=createRequest(GEOVISIBLE_URI + clazz.getName() + "/object/"+ id);  rRoot.accept(MediaType.APPLICATION_OCTET_STREAM);  ClientResponse resp=addSignature(rRoot).get(ClientResponse.class);  InputStream input=resp.getEntityInputStream();  ObjectInputStream objInputStream=new ObjectInputStream(input);  @SuppressWarnings("unchecked") T obj=(T)objInputStream.readObject();  return obj;}  }
class C{  public MinimaxEvaluation(int ply){  this.ply=ply;}  }
class C{  public BaseDeltaRequest(final String requestUrl,final IOneDriveClient client,final List<Option> options,final String token){  super(requestUrl,client,options,BaseDeltaCollectionResponse.class,IDeltaCollectionPage.class);  if (token != null) {    addQueryOption(new QueryOption("token",token));  }}  }
class C{  public static final byte[] decode(BufferedReader reader) throws IOException, Base64DecodingException {  byte[] retBytes=null;  UnsyncByteArrayOutputStream baos=null;  try {    baos=new UnsyncByteArrayOutputStream();    String line;    while (null != (line=reader.readLine())) {      byte[] bytes=decode(line);      baos.write(bytes);    }    retBytes=baos.toByteArray();  }  finally {    baos.close();  }  return retBytes;}  }
class C{  @Override public void generateOptimizedBoolean(BlockScope currentScope,BranchLabel trueLabel,BranchLabel falseLabel,boolean valueRequired){  if ((this.constant != Constant.NotAConstant) && (this.constant.typeID() == T_boolean)) {    super.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);    return;  }  if (((this.bits & OperatorMASK) >> OperatorSHIFT) == NOT) {    this.expression.generateOptimizedBoolean(currentScope,falseLabel,trueLabel,valueRequired);  } else {    super.generateOptimizedBoolean(currentScope,trueLabel,falseLabel,valueRequired);  }}  }
class C{  public TemporalOMScalingIcon(Object id,int renderType,boolean interpolate){  this.id=id;  this.interpolate=interpolate;  setRenderType(renderType);  timeStamps=new TemporalPointSupport(renderType);}  }
class C{  public static double distance(Geometry g0,Geometry g1){  Distance3DOp distOp=new Distance3DOp(g0,g1);  return distOp.distance();}  }
class C{  public ObjectLink(int objectId,int objectInstanceId){  Validate.isTrue(0 <= objectId && objectId <= MAXID);  Validate.isTrue(0 <= objectInstanceId && objectInstanceId <= MAXID);  Validate.isTrue((objectId != MAXID && objectInstanceId != MAXID) || objectId == MAXID && objectInstanceId == MAXID);  this.objectId=objectId;  this.objectInstanceId=objectInstanceId;}  }
class C{  CachedSpans(CachedSpans cloneMe){  docId=cloneMe.docId;  cachedSpanList=cloneMe.cachedSpanList;}  }
class C{  public RSSMediaGroup(){  content=new java.util.Vector();}  }
class C{  public static boolean isPrime(int n){  if (n < 2) {    return false;  }  if (n == 2) {    return true;  }  if ((n & 1) == 0) {    return false;  }  if (n < 42) {    for (int i=0; i < SMALL_PRIMES.length; i++) {      if (n == SMALL_PRIMES[i]) {        return true;      }    }  }  if ((n % 3 == 0) || (n % 5 == 0) || (n % 7 == 0)|| (n % 11 == 0)|| (n % 13 == 0)|| (n % 17 == 0)|| (n % 19 == 0)|| (n % 23 == 0)|| (n % 29 == 0)|| (n % 31 == 0)|| (n % 37 == 0)|| (n % 41 == 0)) {    return false;  }  return BigInteger.valueOf(n).isProbablePrime(20);}  }
class C{  @Override public boolean containsKey(Object key){  if (key == null) {    return entryForNullKey != null;  }  int hash=key.hashCode();  hash^=(hash >>> 20) ^ (hash >>> 12);  hash^=(hash >>> 7) ^ (hash >>> 4);  HashMapEntry<K,V>[] tab=table;  for (HashMapEntry<K,V> e=tab[hash & (tab.length - 1)]; e != null; e=e.next) {    K eKey=e.key;    if (eKey == key || (e.hash == hash && key.equals(eKey))) {      return true;    }  }  return false;}  }
class C{  public BufferedImage renderXYScatterPlot(int width,int height,List<Instances> series,String xAxis,String yAxis,List<String> optionalArgs) throws Exception {  BufferedImage osi=new BufferedImage(width,height,BufferedImage.TYPE_INT_RGB);  String plotTitle="Scatter plot";  String userTitle=getOption(optionalArgs,"-title");  plotTitle=(userTitle != null) ? userTitle : plotTitle;  Plot2D offScreenPlot=new Plot2D();  offScreenPlot.setSize(width,height);  PlotData2D master=new PlotData2D(series.get(0));  master.setPlotName(plotTitle);  master.m_displayAllPoints=true;  offScreenPlot.setMasterPlot(master);  Instances masterInstances=series.get(0);  int xAx=getIndexOfAttribute(masterInstances,xAxis);  int yAx=getIndexOfAttribute(masterInstances,yAxis);  if (xAx < 0) {    xAx=0;  }  if (yAx < 0) {    yAx=0;  }  offScreenPlot.setXindex(xAx);  offScreenPlot.setYindex(yAx);  offScreenPlot.setCindex(masterInstances.numAttributes() - 1);  String colorAtt=getOption(optionalArgs,"-color");  int tempC=getIndexOfAttribute(masterInstances,colorAtt);  if (tempC >= 0) {    offScreenPlot.setCindex(tempC);  }  String hasErrors=getOption(optionalArgs,"-hasErrors");  if (hasErrors != null) {    int[] plotShapes=new int[masterInstances.numInstances()];    for (int i=0; i < plotShapes.length; i++) {      plotShapes[i]=Plot2D.ERROR_SHAPE;    }    master.setShapeType(plotShapes);  }  String shapeSize=getOption(optionalArgs,"-shapeSize");  if (shapeSize != null && shapeSize.length() > 0) {    int shapeSizeI=getIndexOfAttribute(masterInstances,shapeSize);    if (shapeSizeI >= 0) {      int[] plotSizes=new int[masterInstances.numInstances()];      for (int i=0; i < masterInstances.numInstances(); i++) {        plotSizes[i]=(int)masterInstances.instance(i).value(shapeSizeI);      }      master.setShapeSize(plotSizes);    }  }  if (series.size() > 1) {    for (    Instances plotI : series) {      PlotData2D plotD=new PlotData2D(plotI);      plotD.m_displayAllPoints=true;      offScreenPlot.addPlot(plotD);      if (shapeSize != null && shapeSize.length() > 0) {        int shapeSizeI=getIndexOfAttribute(plotI,shapeSize);        if (shapeSizeI >= 0) {          int[] plotSizes=new int[plotI.numInstances()];          for (int i=0; i < plotI.numInstances(); i++) {            plotSizes[i]=(int)plotI.instance(i).value(shapeSizeI);          }          plotD.setShapeSize(plotSizes);        }      }      if (hasErrors != null) {        int[] plotShapes=new int[plotI.numInstances()];        for (int i=0; i < plotShapes.length; i++) {          plotShapes[i]=Plot2D.X_SHAPE;        }        plotD.setShapeType(plotShapes);      }    }  }  java.awt.Graphics g=osi.getGraphics();  offScreenPlot.paintComponent(g);  return osi;}  }
class C{  public static <R,C,V>Cell<R,C,V> immutableCell(@Nullable R rowKey,@Nullable C columnKey,@Nullable V value){  return new ImmutableCell<R,C,V>(rowKey,columnKey,value);}  }
class C{  @Override public double classifyInstance(Instance inst) throws Exception {  if (m_isLeaf) {    if (m_nodeModel == null) {      throw new Exception("Classifier has not been built correctly.");    }    return m_nodeModel.classifyInstance(inst);  }  if (inst.value(m_splitAtt) <= m_splitValue) {    return m_left.classifyInstance(inst);  } else {    return m_right.classifyInstance(inst);  }}  }
class C{  public SessionParticipant(String relyingPartyUrl) throws NoSuchAlgorithmException {  Validate.notNull(relyingPartyUrl);  SecureRandomIdentifierGenerator generator=new SecureRandomIdentifierGenerator();  this.sessionId=generator.generateIdentifier();  this.relyingPartyUrl=relyingPartyUrl;}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  ((Expression)m_obj).fixupVariables(vars,globalsSize);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:49.460 -0400",hash_original_method="CF9437B3FC8CF6068DBA7C8A302960BB",hash_generated_method="5BF7DB8F1A9668F142E9E771D94C268C") private int handleS(String value,DoubleMetaphoneResult result,int index,boolean slavoGermanic){  if (contains(value,index - 1,3,"ISL","YSL")) {    index++;  } else   if (index == 0 && contains(value,index,5,"SUGAR")) {    result.append('X','S');    index++;  } else   if (contains(value,index,2,"SH")) {    if (contains(value,index + 1,4,"HEIM","HOEK","HOLM","HOLZ")) {      result.append('S');    } else {      result.append('X');    }    index+=2;  } else   if (contains(value,index,3,"SIO","SIA") || contains(value,index,4,"SIAN")) {    if (slavoGermanic) {      result.append('S');    } else {      result.append('S','X');    }    index+=3;  } else   if ((index == 0 && contains(value,index + 1,1,"M","N","L","W")) || contains(value,index + 1,1,"Z")) {    result.append('S','X');    index=contains(value,index + 1,1,"Z") ? index + 2 : index + 1;  } else   if (contains(value,index,2,"SC")) {    index=handleSC(value,result,index);  } else {    if (index == value.length() - 1 && contains(value,index - 2,2,"AI","OI")) {      result.appendAlternate('S');    } else {      result.append('S');    }    index=contains(value,index + 1,1,"S","Z") ? index + 2 : index + 1;  }  return index;}  }
class C{  private Set<StoragePort> filterRule17(Set<StoragePort> candidates,StoragePort allocatedPort,Set<String> allocatedPorts,Set<String> allocatedDirectors,PortAllocationContext context){  if (context._systemType != StorageSystem.Type.vmax) {    return candidates;  }  if (context._disableRule17) {    return candidates;  }  Set<String> rule17Directors=getRule17Directors(context);  Set<String> unpairedDirectors=new HashSet<String>();  for (  String directorKey : context._directorToStoragePortSet.keySet()) {    if (!rule17Directors.contains(directorKey)) {      unpairedDirectors.add(directorKey);    }  }  if (!unpairedDirectors.isEmpty()) {    _log.info("Disabling rule17 because the following directors are unpaired: " + unpairedDirectors.toString());    context._disableRule17=true;    return candidates;  }  if (allocatedPort == null) {    if (usedAllRule17Directors(allocatedDirectors,context)) {      _log.debug("rule17 clearing all allocated directors");      allocatedDirectors.clear();    }    _log.debug("allocated directors: " + allocatedDirectors);    context._previousRule17=null;    Set<StoragePort> newCandidates=andNotStoragePorts(getAllRule17Ports(candidates,context),allocatedPorts);    if (newCandidates.isEmpty() == false) {      if (allocatedDirectors.size() == 1) {        for (        String director : allocatedDirectors) {          Integer directorNumber=new Integer(director);          Integer pairDirector=i17 - directorNumber;          if (context._directorToStoragePortSet.get(pairDirector.toString()) != null) {            _log.info("rule 17 pair directors: " + directorNumber + " "+ pairDirector);            candidates=context._directorToStoragePortSet.get(pairDirector.toString());            context._previousRule17=pairDirector.toString();            return candidates;          }        }      }      _log.info("returning initial rule17 ports: " + portsToString(newCandidates));      return newCandidates;    } else {      _log.info("No pairs of director numbers == 17; ignoring VMAX rule17");      context._disableRule17=true;    }  } else {    if (context._previousRule17 == null) {      String director=context._storagePortToDirector.get(allocatedPort);      Integer directorNumber=new Integer(director);      Integer pairDirector=i17 - directorNumber;      if (context._directorToStoragePortSet.get(pairDirector.toString()) != null) {        _log.info("rule 17 pair directors: " + directorNumber + " "+ pairDirector);        Set<StoragePort> newCandidates=andNotStoragePorts(context._directorToStoragePortSet.get(pairDirector.toString()),allocatedPorts);        if (newCandidates.isEmpty() == false) {          candidates=newCandidates;          context._previousRule17=pairDirector.toString();        }      }    } else {      context._previousRule17=null;      if (usedAllRule17Directors(allocatedDirectors,context)) {        _log.info("Allocated all ports from each rule-17 director. Relaxing rule so as to use other directors");        _log.info("canidates: " + portsToString(candidates));        return candidates;      }      Set<StoragePort> rule17Ports=andNotStoragePorts(getAllRule17Ports(candidates,context),allocatedPorts);      if (rule17Ports.isEmpty() == false) {        candidates=filterCandidates(rule17Ports,allocatedDirectors,context._directorToStoragePortSet);        _log.info("filtered rule17 ports: " + portsToString(candidates));      } else {        _log.info("all rule 17 ports used, candidates: " + portsToString(candidates));      }    }  }  return candidates;}  }
class C{  public <T>Tuple4<A,B,C,T> extend(Function3<A,B,C,T> mapping){  return Tuple4.of(_1,_2,_3,mapping.apply(_1,_2,_3));}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public ActionList(Visualization vis){  super(vis);}  }
class C{  int next(){  ++resultNumber;  if (resultNumber > end) {    return 0;  }  anyMatches=true;  return resultNumber;}  }
class C{  public DiskDistributedNoAckSyncOverflowRegionDUnitTest(){  super();}  }
class C{  @Override public void onAction(final Player player,final RPAction action){  if (AWAY.equals(action.get(TYPE))) {    if (action.has(MESSAGE)) {      player.setAwayMessage(QuoteSpecials.quote("\"" + action.get(MESSAGE) + "\""));    } else {      player.setAwayMessage(null);      new ReadPostmanMessages().readMessages(player);    }    player.notifyWorldAboutChanges();  }}  }
class C{  public EventStore build(){  if (singleNodeAddress != null) {    settingsBuilder.nodeSettings(StaticNodeSettings.newBuilder().address(singleNodeAddress).build());  }  if (clusterNodeDiscoveryFromGossipSeeds != null && !clusterNodeDiscoveryFromGossipSeeds.isEmpty()) {    checkArgument(isNullOrEmpty(clusterNodeDiscoveryFromDns),"Usage of gossip-seed and DNS discoverer at once is not allowed.");    ClusterNodeSettings.BuilderForGossipSeedDiscoverer clusterNodeSettingsBuilder=ClusterNodeSettings.forGossipSeedDiscoverer();    clusterNodeSettingsBuilder.gossipSeeds(clusterNodeDiscoveryFromGossipSeeds);    clusterNodeSettingsBuilder.gossipTimeout(clusterNodeGossipTimeout);    clusterNodeSettingsBuilder.discoverAttemptInterval(clusterNodeDiscoverAttemptInterval);    if (clusterNodeMaxDiscoverAttempts != null) {      clusterNodeSettingsBuilder.maxDiscoverAttempts(clusterNodeMaxDiscoverAttempts);    }    settingsBuilder.nodeSettings(clusterNodeSettingsBuilder.build());  }  if (!isNullOrEmpty(clusterNodeDiscoveryFromDns)) {    checkArgument(clusterNodeDiscoveryFromGossipSeeds == null || clusterNodeDiscoveryFromGossipSeeds.isEmpty(),"Usage of gossip-seed and DNS discoverer at once is not allowed.");    ClusterNodeSettings.BuilderForDnsDiscoverer clusterNodeSettingsBuilder=ClusterNodeSettings.forDnsDiscoverer();    clusterNodeSettingsBuilder.clusterDns(clusterNodeDiscoveryFromDns);    if (clusterNodeDiscoveryFromDnsOnGosipPort != null) {      clusterNodeSettingsBuilder.externalGossipPort(clusterNodeDiscoveryFromDnsOnGosipPort);    }    clusterNodeSettingsBuilder.gossipTimeout(clusterNodeGossipTimeout);    clusterNodeSettingsBuilder.discoverAttemptInterval(clusterNodeDiscoverAttemptInterval);    if (clusterNodeMaxDiscoverAttempts != null) {      clusterNodeSettingsBuilder.maxDiscoverAttempts(clusterNodeMaxDiscoverAttempts);    }    settingsBuilder.nodeSettings(clusterNodeSettingsBuilder.build());  }  settingsBuilder.tcpSettings(tcpSettingsBuilder.build());  return new EventStoreImpl(settingsBuilder.build());}  }
class C{  public AnnotationVisitor visitTypeAnnotation(int typeRef,TypePath typePath,String desc,boolean visible){  if (api < Opcodes.ASM5) {    throw new RuntimeException();  }  if (fv != null) {    return fv.visitTypeAnnotation(typeRef,typePath,desc,visible);  }  return null;}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  int num=values.length;  writer.arrayValue(num);  for (int i=0; i < num; ++i)   values[i].write(writer);}  }
class C{  public void send(byte[] theBytes,String theAddress,int thePort){  try {    InetAddress myInetAddress=InetAddress.getByName(theAddress);    send(theBytes,myInetAddress,thePort);  } catch (  UnknownHostException e) {    Logger.printError("UdpClient.send","while sending to " + theAddress + " "+ e);  }}  }
class C{  public void removeDatatransferProgressListener(OnDatatransferProgressListener listener,Account account,OCFile file){  if (account == null || file == null || listener == null)   return;  Long fileId=file.getFileId();  if (mBoundListeners.get(fileId) == listener) {    mBoundListeners.remove(fileId);  }}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  public XCardDocument(String xml) throws SAXException {  this(XmlUtils.toDocument(xml));}  }
class C{  public static long reverseBits(final byte value){  return JBBPUtils.reverseBitsInByte(value);}  }
class C{  protected void sequence_CharacterClass(ISerializationContext context,CharacterClass semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public final boolean sendEmptyMessageAtTime(int what,long uptimeMillis){  return mExec.sendEmptyMessageAtTime(what,uptimeMillis);}  }
class C{  @Override public ODataResponse readEntityMedia(GetMediaResourceUriInfo uri_info,String content_type) throws ODataException {  String targetName=uri_info.getTargetEntitySet().getName();  return V1Model.getEntitySet(targetName).getEntityMedia(uri_info,this);}  }
class C{  void basicWithSomeCodec(String codec) throws IOException {  Path ncTFile=new Path(ROOT,"basic.tfile");  FSDataOutputStream fout=createFSOutput(ncTFile);  Writer writer=new Writer(fout,minBlockSize,codec,"memcmp",conf);  writeRecords(writer);  fout.close();  FSDataInputStream fin=fs.open(ncTFile);  Reader reader=new Reader(fs.open(ncTFile),fs.getFileStatus(ncTFile).getLen(),conf);  Scanner scanner=reader.createScanner();  readAllRecords(scanner);  scanner.seekTo(getSomeKey(50));  assertTrue("location lookup failed",scanner.seekTo(getSomeKey(50)));  byte[] readKey=readKey(scanner);  assertTrue("seeked key does not match",Arrays.equals(getSomeKey(50),readKey));  scanner.seekTo(new byte[0]);  byte[] val1=readValue(scanner);  scanner.seekTo(new byte[0]);  byte[] val2=readValue(scanner);  assertTrue(Arrays.equals(val1,val2));  scanner.lowerBound(getSomeKey(50));  assertTrue("locaton lookup failed",scanner.currentLocation.compareTo(reader.end()) < 0);  readKey=readKey(scanner);  assertTrue("seeked key does not match",Arrays.equals(readKey,getSomeKey(50)));  scanner.upperBound(getSomeKey(50));  assertTrue("location lookup failed",scanner.currentLocation.compareTo(reader.end()) < 0);  readKey=readKey(scanner);  assertTrue("seeked key does not match",Arrays.equals(readKey,getSomeKey(51)));  scanner.close();  scanner=reader.createScannerByKey(getSomeKey(10),getSomeKey(60));  readAndCheckbytes(scanner,10,50);  assertFalse(scanner.advance());  scanner.close();  reader.close();  fin.close();  fs.delete(ncTFile,true);}  }
class C{  public boolean hasSameAddress(WifiDisplay other){  return other != null && mDeviceAddress.equals(other.mDeviceAddress);}  }
class C{  @Override public boolean isBusy(){  return m_busy;}  }
class C{  public boolean isProduct(){  return TREETYPE_Product.equals(getTreeType());}  }
class C{  @Override protected void findNumBins(int index){  Instances toFilter=getInputFormat();  int numOfInstances=toFilter.numInstances();  for (int i=0; i < toFilter.numInstances(); i++) {    if (toFilter.instance(i).isMissing(index)) {      numOfInstances--;    }  }  m_NumBins=(int)(Math.sqrt(numOfInstances));  if (m_NumBins > 0) {    calculateCutPointsByEqualFrequencyBinning(index);  }}  }
class C{  public void tasks(){  garbageCollectPeers();}  }
class C{  private TransitSchedule mergeTouchingTransitRoutes(Scenario scenario,String outputDirectory){  final String UNDERLINE="__";  Logger log=Logger.getLogger(TransitScheduleSimplifier.class);  log.info("starting simplify method for given transit schedule...");  log.info("transit routes within a transit line that overlap at least at one stop facility will be merged...");  TransitScheduleFactoryImpl factory=new TransitScheduleFactoryImpl();  List<TransitRouteStop> stops=new ArrayList<TransitRouteStop>();  TransitSchedule schedule=scenario.getTransitSchedule();  Map<Id<TransitLine>,TransitLine> transitLines=schedule.getTransitLines();  int mergedRoutesCounter=0;  Iterator<TransitLine> transitLineIterator=transitLines.values().iterator();  while (transitLineIterator.hasNext()) {    TransitLine transitLine=transitLineIterator.next();    Map<Id<TransitRoute>,TransitRoute> transitRoutes=transitLine.getRoutes();    TransitRoute refTransitRoute=null;    TransitRoute mergedTransitRoute;    PriorityQueue<Id> uncheckedRoutes=new PriorityQueue<Id>();    uncheckedRoutes.addAll(transitRoutes.keySet());    List<TransitRouteStop> stopsEqual=new ArrayList<TransitRouteStop>();    while (uncheckedRoutes.size() > 0) {      stops.clear();      mergedTransitRoute=null;      refTransitRoute=transitRoutes.get(uncheckedRoutes.remove());      String id=refTransitRoute.getId().toString();      for (      Id transitRouteId : transitRoutes.keySet()) {        if (transitRouteId.equals(refTransitRoute.getId()))         continue;        TransitRoute transitRoute=transitRoutes.get(transitRouteId);        if ((stopsEqual=routeProfilesTouch(transitRoute,refTransitRoute)).size() > 0) {          id+=UNDERLINE + transitRoute.getId().toString();          uncheckedRoutes.remove(transitRoute.getId());        }        for (        TransitRouteStop stop : stopsEqual)         if (!stops.contains(stop))         stops.add(stop);      }      if (id.equals(refTransitRoute.getId().toString()))       continue;      String[] listOfRoutes=id.split(UNDERLINE);      while (stops.size() > 0) {        List<NetworkRoute> newRoutes=computeNetworkRoutesByTransitRouteStops(scenario.getNetwork(),transitRoutes,listOfRoutes);        for (        NetworkRoute networkRoute : newRoutes) {          List<TransitRouteStop> newStops=computeNewRouteProfile(factory,refTransitRoute,transitRoutes,listOfRoutes,networkRoute,stops);          TransitRouteStop start=newStops.get(0);          mergedTransitRoute=factory.createTransitRoute(Id.create("merged_" + mergedRoutesCounter,TransitRoute.class),networkRoute,newStops,TransportMode.pt);          mergedRoutesCounter++;          mergeDepartures(factory,transitRoutes,start,mergedTransitRoute,listOfRoutes);          transitLine.addRoute(mergedTransitRoute);        }      }      for (int i=0; i < listOfRoutes.length; i++)       transitLine.removeRoute(transitRoutes.get(Id.create(listOfRoutes[i],TransitRoute.class)));    }  }  log.info("writing simplified transit schedule to " + outputDirectory);  new TransitScheduleWriter(schedule).writeFile(outputDirectory);  log.info("... done.");  return null;}  }
class C{  @Ignore("this test relies on wall clock time and sometimes false fails") public void testExitableFilterIndexReader() throws Exception {  Directory directory=newDirectory();  IndexWriter writer=new IndexWriter(directory,newIndexWriterConfig(new MockAnalyzer(random())));  Document d1=new Document();  d1.add(newTextField("default","one two",Field.Store.YES));  writer.addDocument(d1);  Document d2=new Document();  d2.add(newTextField("default","one three",Field.Store.YES));  writer.addDocument(d2);  Document d3=new Document();  d3.add(newTextField("default","ones two four",Field.Store.YES));  writer.addDocument(d3);  writer.forceMerge(1);  writer.commit();  writer.close();  DirectoryReader directoryReader;  DirectoryReader exitableDirectoryReader;  IndexReader reader;  IndexSearcher searcher;  Query query=new PrefixQuery(new Term("default","o"));  directoryReader=DirectoryReader.open(directory);  exitableDirectoryReader=new ExitableDirectoryReader(directoryReader,new QueryTimeoutImpl(1000));  reader=new TestReader(getOnlyLeafReader(exitableDirectoryReader));  searcher=new IndexSearcher(reader);  searcher.search(query,10);  reader.close();  directoryReader=DirectoryReader.open(directory);  exitableDirectoryReader=new ExitableDirectoryReader(directoryReader,new QueryTimeoutImpl(1));  reader=new TestReader(getOnlyLeafReader(exitableDirectoryReader));  IndexSearcher slowSearcher=new IndexSearcher(reader);  expectThrows(ExitingReaderException.class,null);  reader.close();  directoryReader=DirectoryReader.open(directory);  exitableDirectoryReader=new ExitableDirectoryReader(directoryReader,new QueryTimeoutImpl(Long.MAX_VALUE));  reader=new TestReader(getOnlyLeafReader(exitableDirectoryReader));  searcher=new IndexSearcher(reader);  searcher.search(query,10);  reader.close();  directoryReader=DirectoryReader.open(directory);  exitableDirectoryReader=new ExitableDirectoryReader(directoryReader,new QueryTimeoutImpl(-189034L));  reader=new TestReader(getOnlyLeafReader(exitableDirectoryReader));  searcher=new IndexSearcher(reader);  searcher.search(query,10);  reader.close();  directory.close();}  }
class C{  public static Element drawCross(SVGPlot svgp,Projection2D proj,NumberVector mid,double radius){  final double[] v_mid=mid.toArray();  final long[] dims=proj.getVisibleDimensions2D();  SVGPath path=new SVGPath();  for (int dim=BitsUtil.nextSetBit(dims,0); dim >= 0; dim=BitsUtil.nextSetBit(dims,dim + 1)) {    v_mid[dim]+=radius;    double[] p1=proj.fastProjectDataToRenderSpace(v_mid);    v_mid[dim]-=radius;    path.moveTo(p1[0],p1[1]);    v_mid[dim]-=radius;    double[] p2=proj.fastProjectDataToRenderSpace(v_mid);    v_mid[dim]+=radius;    path.drawTo(p2[0],p2[1]);    path.close();  }  return path.makeElement(svgp);}  }
class C{  public static final <A>CollectionX<A> toLazyCollection(final Stream<A> stream){  return SeqUtils.toLazyCollection(stream.iterator());}  }
class C{  public static boolean validSystemNameFormat(String systemName,char type){  if ((systemName.charAt(0) != 'K') || (systemName.charAt(1) != type)) {    log.error("illegal character in header field of system name: " + systemName);    return (false);  }  try {    Integer.valueOf(systemName.substring(2)).intValue();  } catch (  Exception e) {    log.error("illegal character in number field of system name: " + systemName);    return false;  }  return true;}  }
class C{  public static SipRequest createRegister(SipDialogPath dialog,String[] featureTags,long expirePeriod,String instanceId,boolean announceKeepAlive) throws PayloadException {  try {    URI requestURI=SipUtils.ADDR_FACTORY.createURI(dialog.getTarget());    CallIdHeader callIdHeader=SipUtils.HEADER_FACTORY.createCallIdHeader(dialog.getCallId());    CSeqHeader cseqHeader=SipUtils.HEADER_FACTORY.createCSeqHeader(dialog.getCseq(),Request.REGISTER);    Address fromAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getLocalParty());    FromHeader fromHeader=SipUtils.HEADER_FACTORY.createFromHeader(fromAddress,IdGenerator.getIdentifier());    Address toAddress=SipUtils.ADDR_FACTORY.createAddress(dialog.getRemoteParty());    ToHeader toHeader=SipUtils.HEADER_FACTORY.createToHeader(toAddress,null);    List<ViaHeader> viaHeaders=dialog.getSipStack().getViaHeaders();    if (viaHeaders != null && !viaHeaders.isEmpty() && announceKeepAlive) {      ViaHeader viaHeader=viaHeaders.get(0);      viaHeader.setParameter(new NameValue("keep",null,true));    }    Request register=SipUtils.MSG_FACTORY.createRequest(requestURI,Request.REGISTER,callIdHeader,cseqHeader,fromHeader,toHeader,viaHeaders,SipUtils.buildMaxForwardsHeader());    ContactHeader contact=dialog.getSipStack().getLocalContact();    if (instanceId != null) {      contact.setParameter(SipUtils.SIP_INSTANCE_PARAM,instanceId);    }    register.addHeader(contact);    String supported;    if (instanceId != null) {      supported="path, gruu";    } else {      supported="path";    }    SupportedHeader supportedHeader=SipUtils.HEADER_FACTORY.createSupportedHeader(supported);    register.addHeader(supportedHeader);    if (featureTags.length != 0) {      SipUtils.setContactFeatureTags(register,featureTags);    }    SipUtils.buildAllowHeader(register);    ExpiresHeader expHeader=SipUtils.HEADER_FACTORY.createExpiresHeader((int)(expirePeriod / SECONDS_TO_MILLISECONDS_CONVERSION_RATE));    register.addHeader(expHeader);    register.addHeader(SipUtils.buildUserAgentHeader());    ViaHeader viaHeader=(ViaHeader)register.getHeader(ViaHeader.NAME);    viaHeader.setRPort();    return new SipRequest(register);  } catch (  ParseException|InvalidArgumentException e) {    throw new PayloadException("Can't create SIP message for instanceId : " + instanceId,e);  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case RegularExpressionPackage.QUANTIFIER__NON_GREEDY:    return nonGreedy != NON_GREEDY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public void onValueSelected(Entry e){  long challengeId=mShownChallenges.get(e.getXIndex());  TextView text=(TextView)mItemView.findViewById(R.id.challengeView);  text.setText(mChallengeDataSource.getById(challengeId).getQuestion());}  }
class C{  public void removeChangeListener(ChangeListener l){  m_ChangeListeners.remove(l);}  }
class C{  void error(JavaFileObject file,JCTree tree,String msg){  Messager messager=processingEnv.getMessager();  String text=file.getName() + ":" + getLine(file,tree)+ ": "+ msg;  messager.printMessage(Diagnostic.Kind.ERROR,text);}  }
class C{  public void putQuick(int column,int row,boolean value){  QuickBitVector.put(bits,row * columns + column,value);}  }
class C{  public boolean isLoaded(Object entity,String property){  return PersistenceHelper.isLoaded(entity,property);}  }
class C{  public void generateCode(Filer filer) throws IOException {  TypeSpec.Builder classBuilder=TypeSpec.classBuilder(generatedClassName).addJavadoc("Auto-generated Class by RepositoryCache library Processor").addModifiers(Modifier.PUBLIC,Modifier.FINAL).addSuperinterface(RepositoryProxyCache.class);  classBuilder.addField(FieldSpec.builder(RepositoryCacheManager.class,"repositoryCacheManager").addModifiers(Modifier.PRIVATE,Modifier.FINAL).build()).addField(FieldSpec.builder(File.class,"cacheDir").addModifiers(Modifier.PRIVATE).build()).addField(FieldSpec.builder(String.class,"fileName").addModifiers(Modifier.PRIVATE).build()).addField(FieldSpec.builder(String.class,"cacheKey").addModifiers(Modifier.PRIVATE).build()).addField(FieldSpec.builder(TypeName.LONG,"cacheTime").addModifiers(Modifier.PRIVATE).build());  MethodSpec.Builder constructor=MethodSpec.constructorBuilder().addModifiers(Modifier.PRIVATE).addParameter(File.class,"cacheDir").addParameter(String.class,"fileName").addParameter(TypeName.LONG,"cacheTime").addStatement("this.repositoryCacheManager = " + "RepositoryCacheManager.getInstance()").addStatement("this.cacheDir = cacheDir").addStatement("this.fileName = fileName").addStatement("this.cacheTime = cacheTime");  classBuilder.addMethod(constructor.build());  for (  AnnotatedMethod annotatedMethod : methodsMap.values()) {    MethodSpec.Builder method=MethodSpec.methodBuilder(annotatedMethod.getQualifiedMethodName()).addModifiers(Modifier.PUBLIC,Modifier.STATIC).addParameter(File.class,"cacheDir").returns(ClassName.get(packageName,generatedClassName));    String fileName=simpleClassName + "_" + annotatedMethod.getFullMethodName();    fileName=RepositoryCacheManager.hashMD5(fileName);    method.addStatement("return new $L(cacheDir, $S, $L)",generatedClassName,fileName,annotatedMethod.getAnnotation().value());    classBuilder.addMethod(method.build());  }  addProxyMethods(classBuilder);  TypeSpec typeSpec=classBuilder.build();  JavaFile.builder(packageName,typeSpec).build().writeTo(filer);}  }
class C{  public boolean isInvoker(){  return getResponsible().isInvoker();}  }
class C{  public SubscriptionsExtension(String nodeId,List<Subscription> subList){  super(PubSubElementType.SUBSCRIPTIONS,nodeId);  if (subList != null)   items=subList;}  }
class C{  public Object newTransport(HttpEngine httpEngine) throws IOException {  return (spdyConnection != null) ? new SpdyTransport(httpEngine,spdyConnection) : new HttpTransport(httpEngine,out,in);}  }
class C{  public Queue<Env<AttrContext>> attribute(Queue<Env<AttrContext>> envs){  ListBuffer<Env<AttrContext>> results=new ListBuffer<>();  while (!envs.isEmpty())   results.append(attribute(envs.remove()));  return stopIfError(CompileState.ATTR,results);}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  ChildTestIterator clone=(ChildTestIterator)super.cloneWithReset();  clone.m_traverser=m_traverser;  return clone;}  }
class C{  public static boolean isBitActivoInMarca(int posBit,int marca){  String marcaBinaryString=Integer.toBinaryString(marca);  if (posBit < 0 || posBit >= marcaBinaryString.length())   return false;  marcaBinaryString=StringUtils.reverse(marcaBinaryString);  return (marcaBinaryString.charAt(posBit) == BIT_ACTIVADO) ? true : false;}  }
class C{  public TypeSelectionPath(BaseType rootType,List<TypeMember> members){  this.rootType=rootType;  this.members=members;  containsUnion=rootType == null ? false : containsUnion(rootType,members);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiSliderUI();  return MultiLookAndFeel.createUIs(mui,((MultiSliderUI)mui).uis,a);}  }
class C{  private void processPatch(final State current){  try {switch (current.taskState.stage) {case STARTED:      processIpLeaseDocuments(current);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :this.failTask(new IllegalStateException(String.format("Un-expected stage: %s",current.taskState.stage)));}} catch (Throwable e) {failTask(e);}}  }
class C{  public static byte[] splitInteger(final int value,final boolean valueInLittleEndian,final byte[] buffer){  final byte[] result;  if (buffer == null || buffer.length < 4) {    result=new byte[4];  } else {    result=buffer;  }  int tmpvalue=value;  if (valueInLittleEndian) {    for (int i=0; i < 4; i++) {      result[i]=(byte)tmpvalue;      tmpvalue>>>=8;    }  } else {    for (int i=3; i >= 0; i--) {      result[i]=(byte)tmpvalue;      tmpvalue>>>=8;    }  }  return result;}  }
class C{  public static IPackageFragmentRoot addRTJar(IJavaProject jproject) throws CoreException {  return addRTJar15(jproject);}  }
class C{  static public ResourceState replicatorStateToResourceState(String state){  if (state.startsWith(REPLICATOR_STATE_ONLINE))   return ResourceState.ONLINE; else   if (state.startsWith(REPLICATOR_STATE_STOPPED)) {    return ResourceState.STOPPED;  } else   if (state.startsWith(REPLICATOR_STATE_OFFLINE)) {    if (state.equals(REPLICATOR_STATE_ERROR)) {      return ResourceState.SUSPECT;    } else     if (state.equals(REPLICATOR_STATE_BACKUP)) {      return ResourceState.BACKUP;    } else     if (state.equals(REPLICATOR_STATE_RESTORING)) {      return ResourceState.RESTORING;    } else {      return ResourceState.OFFLINE;    }  } else   if (state.contains(REPLICATOR_STATE_SYNCHRONIZING))   return ResourceState.SYNCHRONIZING; else   return ResourceState.UNKNOWN;}  }
class C{  @Override protected Object execute() throws Exception {  init();  if (!checkifEnabledRemotes()) {    return null;  }  File directoryToSend;  if (directory != null) {    directoryToSend=new File(directory);  } else {    directoryToSend=new File(new File("").getAbsolutePath());  }  String projectId=getProjectFromDirectory(directoryToSend);  if (projectId == null) {    return null;  }  UserProjectReference project=getMultiRemoteCodenvy().getProjectReference(projectId);  if (project == null) {    Ansi buffer=Ansi.ansi();    buffer.fg(RED);    buffer.a("The project of the specified directory is no longer existing in the connected remote directories. Unable to continue.");    buffer.reset();    System.out.println(buffer.toString());    return null;  }  final ProjectReference projectToPush=project.getInnerReference();  System.out.print("Pushing...");  final InputStream exportedZipInputStream=ZipUtils.getZipProjectStream(directoryToSend);  project.getCodenvy().project().importArchive(projectToPush.workspaceId(),projectToPush,exportedZipInputStream).execute();  System.out.println(" done !");  int deleteCount=0;  try (ZipInputStream zipInputStream=project.getCodenvy().project().exportResources(projectToPush,null).execute()){    ZipEntry zipEntry=zipInputStream.getNextEntry();    while (zipEntry != null) {      File path=new File(directoryToSend,zipEntry.getName());      new ConsoleReader().resetPromptLine("Pruning remote files...",String.valueOf(deleteCount).concat("removed. ".concat(" comparing :") + zipEntry.getName()),0);      if (!path.exists() && path.getParentFile().exists()) {        project.getCodenvy().project().deleteResources(projectToPush,zipEntry.getName()).execute();        deleteCount++;      }      zipEntry=zipInputStream.getNextEntry();    }    new ConsoleReader().resetPromptLine("Pruning remote files...","done",0);    System.out.println();  }   return null;}  }
class C{  static boolean shouldOutput(Configuration conf){  return conf.getBoolean(OUTPUT_FLAG,true);}  }
class C{  @Override protected void register(ContainerCapabilityFactory containerCapabilityFactory){  containerCapabilityFactory.registerContainerCapability("jo1x",ServletContainerCapability.class);}  }
class C{  public void actionPerformed(ActionEvent e){  JTextField edit=(JTextField)e.getSource();  dataSource.put(edit.getName(),edit.getText(),PvChangeEvent.PV_MANUAL_MOD);  edit.setBackground(changedColor);  Toolkit.getDefaultToolkit().beep();}  }
class C{  public MosaicDefinitionCreationTransaction(final TimeInstant timeStamp,final Account sender,final MosaicDefinition mosaicDefinition,final Account creationFeeSink,final Amount creationFee){  super(TransactionTypes.MOSAIC_DEFINITION_CREATION,1,timeStamp,sender);  this.mosaicDefinition=mosaicDefinition;  this.creationFeeSink=creationFeeSink;  this.creationFee=creationFee;  this.validate();}  }
class C{  public static void pipeAll(InputStream inStr,OutputStream outStr) throws IOException {  byte[] bs=new byte[BUFFER_SIZE];  int numRead;  while ((numRead=inStr.read(bs,0,bs.length)) >= 0) {    outStr.write(bs,0,numRead);  }}  }
class C{  public void authenticate(byte[] token){  try {    sService.authenticate(mPackageName,token);  } catch (  RemoteException e) {    attemptDeadServiceRecovery(e);  }}  }
class C{  public NotificationChain basicSetRight(Expression newRight,NotificationChain msgs){  Expression oldRight=right;  right=newRight;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.EXPRESSION__RIGHT,oldRight,newRight);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static List<ModuleDeploymentSource> createModuleDeploymentSources(@NotNull Project project){  AppEngineProjectService projectService=AppEngineProjectService.getInstance();  AppEngineAssetProvider assetProvider=AppEngineAssetProvider.getInstance();  List<ModuleDeploymentSource> moduleDeploymentSources=Lists.newArrayList();  boolean hasStandardModules=false;  for (  Module module : ModuleManager.getInstance(project).getModules()) {    XmlFile appEngineWebXml=assetProvider.loadAppEngineStandardWebXml(project,Collections.singletonList(module));    AppEngineEnvironment environment=projectService.getModuleAppEngineEnvironment(appEngineWebXml);    if (ModuleType.is(module,JavaModuleType.getModuleType()) && projectService.isJarOrWarMavenBuild(module)) {      moduleDeploymentSources.add(createMavenBuildDeploymentSource(project,module,environment));    }    if (environment.isStandard() || projectService.isFlexCompat(appEngineWebXml)) {      hasStandardModules=true;    }  }  if (!hasStandardModules) {    moduleDeploymentSources.add(createUserSpecifiedPathDeploymentSource(project));  }  return moduleDeploymentSources;}  }
class C{  public void addLogListener(ILogListener<T> listener){synchronized (instanceLock) {    logListeners.add(listener);    LogSniffer.log("AddLogListener: {0}",listener.toString());  }}  }
class C{  public boolean isInterestingToUserLocked(){  return visible || nowVisible || state == ActivityState.PAUSING || state == ActivityState.RESUMED;}  }
class C{  private void drawRightPart(final Point buttonSize){  this.gc.setForeground(this.selectedBackgroundColor);  this.gc.setBackground(this.selectedBackgroundColor);  if (this.round) {    this.gc.fillRoundRectangle(2,2,buttonSize.x,buttonSize.y,5,5);  } else {    this.gc.fillRectangle(2,2,buttonSize.x,buttonSize.y);  }  this.gc.setForeground(GamaColors.getTextColorForBackground(selectedBackgroundColor).color());  final Point textSize=this.gc.textExtent(this.textForSelect);  this.gc.drawString(this.textForSelect,(buttonSize.x / 2 - textSize.x) / 2 + 3,(buttonSize.y - textSize.y) / 2 + 3);}  }
class C{  public void removeSensor(final Sensor sensor){  sensors.remove(sensor);  parentWorld.fireSensorRemoved(sensor);}  }
class C{  public void println(PrintWriter w){  Printer.print(this,w);}  }
class C{  public AcelaMessage(String m){  super(m);}  }
class C{  private Properties readFileHashCacheFile(){  Properties props=new Properties();  Log log=getLog();  if (!this.targetDirectory.exists()) {    this.targetDirectory.mkdirs();  } else   if (!this.targetDirectory.isDirectory()) {    log.warn("Something strange here as the '" + this.targetDirectory.getPath() + "' supposedly target directory is not a directory.");    return props;  }  File cacheFile=new File(this.targetDirectory,CACHE_PROPERTIES_FILENAME);  if (!cacheFile.exists()) {    return props;  }  try (final BufferedInputStream stream=new BufferedInputStream(new FileInputStream(cacheFile))){    props.load(stream);  } catch (  IOException e) {    log.warn("Cannot load file hash cache properties file",e);  }  return props;}  }
class C{  public static Polygon[] fromGeoJSON(String geojson) throws ParseException {  return new SimpleGeoJSONPolygonParser(geojson).parse();}  }
class C{  void validateSettingsForUpgrading(VOSubscription current,VOService newProduct,VOPaymentInfo paymentInfo,VOBillingContact voBillingContact) throws ObjectNotFoundException, SubscriptionStateException, OperationNotPermittedException, ServiceChangedException, PriceModelException, PaymentInformationException, SubscriptionMigrationException {  Subscription subscription=manageBean.loadSubscription(current.getSubscriptionId(),0);  stateValidator.checkModifyAllowedForUpgrading(subscription);  PlatformUser currentUser=dataManager.getCurrentUser();  Organization organization=currentUser.getOrganization();  PermissionCheck.owns(subscription,organization,LOG);  Product currentProduct=subscription.getProduct();  Product targetProduct=dataManager.getReference(Product.class,newProduct.getKey());  checkIfProductIsUptodate(targetProduct,newProduct);  PriceModel targetPriceModel=targetProduct.getPriceModel();  if (targetPriceModel == null) {    PriceModelException mpme=new PriceModelException(PriceModelException.Reason.NOT_DEFINED);    LOG.logWarn(Log4jLogger.SYSTEM_LOG,mpme,LogMessageIdentifier.WARN_MIGRATE_PRODUCT_FAILED,Long.toString(targetProduct.getKey()));    throw mpme;  }  if (targetPriceModel.isChargeable() && !isPaymentInfoHidden()) {    PaymentDataValidator.validateNotNull(paymentInfo,voBillingContact);    PaymentInfo pi=dataManager.getReference(PaymentInfo.class,paymentInfo.getKey());    BillingContact bc=dataManager.getReference(BillingContact.class,voBillingContact.getKey());    PermissionCheck.owns(pi,organization,LOG);    PermissionCheck.owns(bc,organization,LOG);    PaymentDataValidator.validatePaymentTypeSupportedBySupplier(organization,targetProduct,pi.getPaymentType());    PaymentDataValidator.validatePaymentInfoDataForUsage(pi);  }  List<Product> compatibleProducts=currentProduct.getCompatibleProductsList();  compatibleProducts=replaceByCustomerSpecificProducts(compatibleProducts,currentProduct.getVendorKey(),organization);  boolean isCompatibleProduct=false;  for (  Product compatibleProduct : compatibleProducts) {    if (compatibleProduct.getKey() == targetProduct.getKey()) {      isCompatibleProduct=true;    }  }  if (!isCompatibleProduct) {    sessionCtx.setRollbackOnly();    SubscriptionMigrationException smf=new SubscriptionMigrationException("Migration of subscription failed",Reason.INCOMPATIBLE_SERVICES,new Object[]{subscription.getSubscriptionId(),targetProduct.getCleanProductId()});    LOG.logWarn(Log4jLogger.SYSTEM_LOG,smf,LogMessageIdentifier.WARN_MIGRATE_PRODUCT_FAILED_NOT_COMPATIBLE,Long.toString(currentUser.getKey()),Long.toString(subscription.getKey()),Long.toString(subscription.getOrganizationKey()),Long.toString(targetProduct.getKey()),Long.toString(subscription.getProduct().getKey()));    throw smf;  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public HashMap<String,Object> parseHeader(ImageInputStream iStream) throws IOException {  ArrayList<KeyValue> labelMap=parseObject(iStream);  return (mapMetadata(labelMap));}  }
class C{  public static boolean testSaveLocationExists(){  String sDCardStatus=Environment.getExternalStorageState();  boolean status;  if (sDCardStatus.equals(Environment.MEDIA_MOUNTED)) {    status=true;  } else {    status=false;  }  return status;}  }
class C{  public WriteCoilResponse(int reference,boolean b){  super();  setFunctionCode(Modbus.WRITE_COIL);  setDataLength(4);  setReference(reference);  setCoil(b);}  }
class C{  @Nullable public static Object unwrapOptionalAsNull(@Nullable Object o){  return o instanceof Optional<?> ? unwrap((Optional<?>)o) : o instanceof OptionalInt ? unwrap((OptionalInt)o) : o instanceof OptionalLong ? unwrap((OptionalLong)o) : o instanceof OptionalDouble ? unwrap((OptionalDouble)o) : o;}  }
class C{  public CPanel(boolean isDoubleBuffered){  super(isDoubleBuffered);  init();}  }
class C{  protected void drawLowFarOut(double aRadius,Graphics2D g2,double xx,double m){  double side=aRadius * 2;  g2.draw(new Line2D.Double(xx - side,m - side,xx + side,m - side));  g2.draw(new Line2D.Double(xx - side,m - side,xx,m));  g2.draw(new Line2D.Double(xx + side,m - side,xx,m));}  }
class C{  private static CellProcessor addLongMinMax(Long minValue,Long maxValue){  Long min=minValue == null ? LMinMax.MIN_LONG : minValue;  Long max=maxValue == null ? LMinMax.MAX_LONG : maxValue;  return new LMinMax(min,max);}  }
class C{  public Mapping(ISemIm semIm,Parameter parameter,TetradMatrix matrix,int i,int j){  if (semIm == null) {    throw new NullPointerException("SemIm must not be null.");  }  if (parameter == null) {    throw new NullPointerException("Parameter must not be null.");  }  if (matrix == null) {    throw new NullPointerException("Supplied array must not be null.");  }  if (i < 0 || j < 0) {    throw new IllegalArgumentException("Indices must be non-negative");  }  this.semIm=semIm;  this.parameter=parameter;  this.a=matrix;  this.i=i;  this.j=j;}  }
class C{  protected boolean RelativeLocationPath() throws javax.xml.transform.TransformerException {  if (!Step()) {    return false;  }  while (tokenIs('/')) {    nextToken();    if (!Step()) {      error(XPATHErrorResources.ER_EXPECTED_LOC_STEP,null);    }  }  return true;}  }
class C{  public static int indexOf(byte[] array,byte[] sub){  return indexOf(array,sub,0,array.length);}  }
class C{  public static void sendPushMessageAsync(String body,String deviceKey,boolean production,String googleAuthKey,String iosCertificateURL,String iosCertificatePassword,String bbUrl,String bbApp,String bbPass,String bbPort){  NetworkManager.getInstance().addToQueue(createPushMessage(body,deviceKey,production,googleAuthKey,iosCertificateURL,iosCertificatePassword,bbUrl,bbApp,bbPass,bbPort));}  }
class C{  private static void checkIndexForBinarySearch(int length,int start,int end){  if (start > end) {    throw new IllegalArgumentException();  }  if (length < end || 0 > start) {    throw new ArrayIndexOutOfBoundsException();  }}  }
class C{  public static void putPFStat(long id,Stat type,double s){  if (_disabled)   return;  if (!_pfstats.containsKey(id))   _pfstats.put(id,new HashMap<Stat,LinkedList<Double>>());  HashMap<Stat,LinkedList<Double>> allstats=_pfstats.get(id);  if (!allstats.containsKey(type))   allstats.put(type,new LinkedList<Double>());  LinkedList<Double> stats=allstats.get(type);  stats.addLast(s);}  }
class C{  public ProductImageNameStrategyImpl(final String relativeInternalRootDirectory,final GenericDAO<AttrValueProductSku,Long> attrValueProductSkuDao,final GenericDAO<AttrValueProduct,Long> attrValueProductDao,final LanguageService languageService){  super(Constants.PRODUCT_IMAGE_REPOSITORY_URL_PATTERN,relativeInternalRootDirectory,languageService);  this.attrValueEntityProductSkuDao=attrValueProductSkuDao;  this.attrValueEntityProductDao=attrValueProductDao;}  }
class C{  protected MosbySavedState createSavedState(Parcelable superState){  MosbySavedState state=new MosbySavedState(superState);  state.setMosbyViewId(viewId);  return state;}  }
class C{  public static void object(Object object){  printer.object(object);}  }
class C{  public ShapeData(DrawContext dc,Polygon shape){  super(dc,shape.minExpiryTime,shape.maxExpiryTime);  if (shape.boundaries.size() < 1) {    this.boundaries.add(new BoundaryInfo(new ArrayList<Position>()));    return;  }  for (  List<? extends Position> boundary : shape.boundaries) {    this.boundaries.add(new BoundaryInfo(boundary));  }}  }
class C{  public final String readLine() throws IOException {  StringBuilder input=new StringBuilder();  int c;  while (((c=read()) != -1) && (c != '\n')) {    input.append((char)c);  }  if ((c == -1) && (input.length() == 0)) {    return null;  }  return input.toString();}  }
class C{  public static int compare(String left,Date right) throws PageException {  return -compare(right,left);}  }
class C{  public boolean hasNext(){  return iterator.hasNext();}  }
class C{  public static String createCsvLine(String[] line){  if (line == null)   return null;  boolean isFirst=true;  StringBuffer csvLine=new StringBuffer("");  for (  String token : line) {    if (isFirst) {      isFirst=false;    } else {      csvLine.append(SEPARATOR);    }    csvLine.append(createCsvToken(token));  }  return csvLine.toString();}  }
class C{  @DataProvider(name="classProvider") protected Object[][] classprovider(){  return TESTING_CLASSES;}  }
class C{  public PresentationEntry(BaseEntry sourceEntry){  super(sourceEntry);}  }
class C{  public CallSpec<Void,HttpError> createProfileVisits(String userId){  return Resource.<Void,HttpError>newPostSpec(api,"v1/users/{user_id}/visits",false).responseAs(Void.class).pathParam("user_id",userId).build();}  }
class C{  public void testCloneArrays(){  final int[] ia={1,2,3};  final int[] cloned=cloner.deepClone(ia);  assertEquals(ia.length,cloned.length);  for (int i=0; i < ia.length; i++) {    assertEquals(ia[i],cloned[i]);  }  final double[] da={1,2,3};  final double[] dcloned=cloner.deepClone(da);  assertEquals(da.length,dcloned.length);  for (int i=0; i < ia.length; i++) {    assertEquals(da[i],dcloned[i]);  }}  }
class C{  public void testGetIndexedProperty(){  Object introspectedTarget=new Target();  Object hashedTarget=new ArbitraryTarget();  assertEquals(OLD_VALUE,Beans.getIndexedProperty(introspectedTarget,INDEXED_PROPERTY,0));  assertNull(Beans.getIndexedProperty(introspectedTarget,STRING_PROPERTY,0));  assertNull(Beans.getIndexedProperty(introspectedTarget,NOT_A_PROPERTY,0));  assertEquals(OLD_VALUE,Beans.getIndexedProperty(hashedTarget,INDEXED_PROPERTY,0));  assertNull(Beans.getIndexedProperty(hashedTarget,STRING_PROPERTY,0));  assertNull(Beans.getIndexedProperty(hashedTarget,NOT_A_PROPERTY,0));}  }
class C{  private double[][] CalcConstantCoef(Variogram variogarm,List<KrigingPoint> NNPoints){  int n=NNPoints.size();  double[][] mat=new double[n + 1][n + 1];  double dist=0.0;  for (int i=0; i < n; i++) {    for (int j=i; j < n; j++) {      dist=Math.sqrt(Math.abs(Math.pow(NNPoints.get(i).x - NNPoints.get(j).x,2)) + Math.abs(Math.pow(NNPoints.get(i).y - NNPoints.get(j).y,2)));      mat[i][j]=getTheoreticalSVValue(dist,variogarm);      mat[j][i]=mat[i][j];    }  }  for (int i=0; i < n; i++) {    mat[i][n]=1;    mat[n][i]=1;  }  return mat;}  }
class C{  @EventHandler(priority=EventPriority.LOWEST) public void onPlayerJoin(PlayerJoinEvent event){  event.setJoinMessage(null);  event.getPlayer().setGameMode(GameMode.ADVENTURE);  try {    core.getOriginObject().getServer().getScheduler().runTaskAsynchronously(core.getOriginObject(),null);  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static Gender male(){  return new Gender(MALE);}  }
class C{  public void testDisconnect_BlockWithServerServerClosed() throws IOException {  assertTrue(this.channel1.isBlocking());  connectLocalServer();  this.datagramSocket1.close();  assertTrue(this.channel1.isOpen());  assertTrue(this.channel1.isConnected());  disconnectAfterConnected();}  }
class C{  private Integer[] box(int[] ia){  Integer[] ret=new Integer[ia.length];  for (int i=0; i < ia.length; i++) {    ret[i]=new Integer(ia[i]);  }  return ret;}  }
class C{  public static Connection testDrive() throws SQLException {  if (initLatch.compareAndSet(false,true)) {    log.info("DEMO: Prepare in-memory H2 database...");    try {      Connection conn=DriverManager.getConnection("jdbc:h2:mem:demo-db;DB_CLOSE_DELAY=-1","sa","");      File sqlScript=resolvePath("demo/db-init.sql");      RunScript.execute(conn,new FileReader(sqlScript));      log.info("DEMO: Sample tables created.");      conn.close();      Server.createTcpServer("-tcpDaemon").start();      log.info("DEMO: TcpServer stared.");      log.info("DEMO: JDBC URL for test drive metadata load: jdbc:h2:mem:demo-db");    } catch (    SQLException e) {      log.error("DEMO: Failed to start test drive for metadata!",e);      throw e;    }catch (    FileNotFoundException|NullPointerException e) {      log.error("DEMO: Failed to find demo database init script file: demo/db-init.sql");      throw new SQLException("Failed to start demo for metadata",e);    }  }  return DriverManager.getConnection("jdbc:h2:mem:demo-db;DB_CLOSE_DELAY=-1","sa","");}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  char[] separator={'[',' '};  for (int i=0; i < components.length; i++) {    sb.append(separator);    sb.append(components[i]);    separator[0]=',';  }  sb.append(']');  return sb.toString();}  }
class C{  public Map<String,Object> retrieveInternal(boolean loadedOnly){  Map<String,Object> model=new HashMap<String,Object>();  Set<String> loadedModules=new HashSet<String>();  for (  Object val : getContext().getAttributes().values()) {    if ((val instanceof IFloodlightModule) || (val instanceof IFloodlightService)) {      String serviceImpl=val.getClass().getCanonicalName();      loadedModules.add(serviceImpl);    }  }  for (  String moduleName : FloodlightModuleLoader.moduleNameMap.keySet()) {    Map<String,Object> moduleInfo=new HashMap<String,Object>();    IFloodlightModule module=FloodlightModuleLoader.moduleNameMap.get(moduleName);    Collection<Class<? extends IFloodlightService>> deps=module.getModuleDependencies();    if (deps == null)     deps=new HashSet<Class<? extends IFloodlightService>>();    Map<String,Object> depsMap=new HashMap<String,Object>();    for (    Class<? extends IFloodlightService> service : deps) {      Object serviceImpl=getContext().getAttributes().get(service.getCanonicalName());      if (serviceImpl != null)       depsMap.put(service.getCanonicalName(),serviceImpl.getClass().getCanonicalName()); else       depsMap.put(service.getCanonicalName(),"<unresolved>");    }    moduleInfo.put("depends",depsMap);    Collection<Class<? extends IFloodlightService>> provides=module.getModuleServices();    if (provides == null)     provides=new HashSet<Class<? extends IFloodlightService>>();    Map<String,Object> providesMap=new HashMap<String,Object>();    for (    Class<? extends IFloodlightService> service : provides) {      providesMap.put(service.getCanonicalName(),module.getServiceImpls().get(service).getClass().getCanonicalName());    }    moduleInfo.put("provides",providesMap);    moduleInfo.put("loaded",false);    if (loadedModules.contains(module.getClass().getCanonicalName())) {      moduleInfo.put("loaded",true);    } else {      for (      Class<? extends IFloodlightService> service : provides) {        String modString=module.getServiceImpls().get(service).getClass().getCanonicalName();        if (loadedModules.contains(modString))         moduleInfo.put("loaded",true);      }    }    if ((Boolean)moduleInfo.get("loaded") || !loadedOnly)     model.put(moduleName,moduleInfo);  }  return model;}  }
class C{  public byte messageType(){  return isOneWay() ? TMessageType.ONEWAY : TMessageType.CALL;}  }
class C{  IonDecimalLite(ContainerlessContext context,boolean isNull){  super(context,isNull);}  }
class C{  public ObjectArrayList partFromTo(int from,int to){  if (size == 0)   return new ObjectArrayList(0);  checkRangeFromTo(from,to,size);  Object[] part=new Object[to - from + 1];  System.arraycopy(elements,from,part,0,to - from + 1);  return new ObjectArrayList(part);}  }
class C{  private void emitop(int op){  if (pendingJumps != null)   resolvePending();  if (alive) {    if (pendingStatPos != Position.NOPOS)     markStatBegin();    if (pendingStackMap) {      pendingStackMap=false;      emitStackMap();    }    if (debugCode)     System.err.println("emit@" + cp + " stack="+ state.stacksize+ ": "+ mnem(op));    emit1(op);  }}  }
class C{  public UpdatePodBuilder cluster(ClusterBartender cluster){  _cluster=(ClusterHeartbeat)cluster;  return this;}  }
class C{  protected static void processGUIEditorsProps(File propsFile,boolean verbose){  GenericObjectEditor.registerEditors();  try {    Properties editorProps=new Properties();    BufferedInputStream bi=new BufferedInputStream(new FileInputStream(propsFile));    editorProps.load(bi);    bi.close();    bi=null;    Enumeration<?> enm=editorProps.propertyNames();    while (enm.hasMoreElements()) {      String name=enm.nextElement().toString();      String value=editorProps.getProperty(name,"");      if (verbose) {        System.err.println("Registering " + name + " "+ value);      }      GenericObjectEditor.registerEditor(name,value);    }  } catch (  Exception ex) {  }}  }
class C{  public String[] split(CharSequence input,int limit){  int index=0;  boolean matchLimited=limit > 0;  ArrayList<String> matchList=new ArrayList<String>();  regexodus.Matcher m=new regexodus.Matcher(internal,input);  while (m.find()) {    if (!matchLimited || matchList.size() < limit - 1) {      String match=input.subSequence(index,m.start()).toString();      matchList.add(match);      index=m.end();    } else     if (matchList.size() == limit - 1) {      String match=input.subSequence(index,input.length()).toString();      matchList.add(match);      index=m.end();    }  }  if (index == 0)   return new String[]{input.toString()};  if (!matchLimited || matchList.size() < limit)   matchList.add(input.subSequence(index,input.length()).toString());  int resultSize=matchList.size();  if (limit == 0)   while (resultSize > 0 && matchList.get(resultSize - 1).equals(""))   resultSize--;  String[] result=new String[resultSize];  return matchList.subList(0,resultSize).toArray(result);}  }
class C{  private void emitSubroutine(final Instantiation instant,final List<Instantiation> worklist,final InsnList newInstructions,final List<TryCatchBlockNode> newTryCatchBlocks,final List<LocalVariableNode> newLocalVariables){  LabelNode duplbl=null;  if (LOGGING) {    log("--------------------------------------------------------");    log("Emitting instantiation of subroutine " + instant.subroutine);  }  for (int i=0, c=instructions.size(); i < c; i++) {    AbstractInsnNode insn=instructions.get(i);    Instantiation owner=instant.findOwner(i);    if (insn.getType() == AbstractInsnNode.LABEL) {      LabelNode ilbl=(LabelNode)insn;      LabelNode remap=instant.rangeLabel(ilbl);      if (LOGGING) {        log("Translating lbl #" + i + ':'+ ilbl+ " to "+ remap);      }      if (remap != duplbl) {        newInstructions.add(remap);        duplbl=remap;      }      continue;    }    if (owner != instant) {      continue;    }    if (LOGGING) {      log("Emitting inst #" + i);    }    if (insn.getOpcode() == RET) {      LabelNode retlabel=null;      for (Instantiation p=instant; p != null; p=p.previous) {        if (p.subroutine.get(i)) {          retlabel=p.returnLabel;        }      }      if (retlabel == null) {        throw new RuntimeException("Instruction #" + i + " is a RET not owned by any subroutine");      }      newInstructions.add(new JumpInsnNode(GOTO,retlabel));    } else     if (insn.getOpcode() == JSR) {      LabelNode lbl=((JumpInsnNode)insn).label;      BitSet sub=subroutineHeads.get(lbl);      Instantiation newinst=new Instantiation(instant,sub);      LabelNode startlbl=newinst.gotoLabel(lbl);      if (LOGGING) {        log(" Creating instantiation of subr " + sub);      }      newInstructions.add(new InsnNode(ACONST_NULL));      newInstructions.add(new JumpInsnNode(GOTO,startlbl));      newInstructions.add(newinst.returnLabel);      worklist.add(newinst);    } else {      newInstructions.add(insn.clone(instant));    }  }  for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {    TryCatchBlockNode trycatch=it.next();    if (LOGGING) {      log("try catch block original labels=" + trycatch.start + '-'+ trycatch.end+ "->"+ trycatch.handler);    }    final LabelNode start=instant.rangeLabel(trycatch.start);    final LabelNode end=instant.rangeLabel(trycatch.end);    if (start == end) {      if (LOGGING) {        log(" try catch block empty in this subroutine");      }      continue;    }    final LabelNode handler=instant.gotoLabel(trycatch.handler);    if (LOGGING) {      log(" try catch block new labels=" + start + '-'+ end+ "->"+ handler);    }    if (start == null || end == null || handler == null) {      throw new RuntimeException("Internal error!");    }    newTryCatchBlocks.add(new TryCatchBlockNode(start,end,handler,trycatch.type));  }  for (Iterator<LocalVariableNode> it=localVariables.iterator(); it.hasNext(); ) {    LocalVariableNode lvnode=it.next();    if (LOGGING) {      log("local var " + lvnode.name);    }    final LabelNode start=instant.rangeLabel(lvnode.start);    final LabelNode end=instant.rangeLabel(lvnode.end);    if (start == end) {      if (LOGGING) {        log("  local variable empty in this sub");      }      continue;    }    newLocalVariables.add(new LocalVariableNode(lvnode.name,lvnode.desc,lvnode.signature,start,end,lvnode.index));  }}  }
class C{  void checkForActiveUsageOfUserGroup(String domain,String label){  Set<URI> resourcesUsingUserGroup=new HashSet<URI>();  Set<URI> vdcURI=_permissionsHelper.checkForActiveVDCRoleAssignmentsUsingUserGroup(label);  if (!CollectionUtils.isEmpty(vdcURI)) {    resourcesUsingUserGroup.addAll(vdcURI);  }  Set<URI> tenantsURI=_permissionsHelper.checkForActiveTenantRoleAssignmentsUsingUserGroup(label);  if (!CollectionUtils.isEmpty(tenantsURI)) {    resourcesUsingUserGroup.addAll(tenantsURI);  }  Set<URI> userMappingsURI=_permissionsHelper.checkForActiveUserMappingUsingGroup(domain,label);  if (!CollectionUtils.isEmpty(userMappingsURI)) {    resourcesUsingUserGroup.addAll(userMappingsURI);  }  Set<URI> projectsURI=_permissionsHelper.checkForActiveProjectAclsUsingUserGroup(label);  if (!CollectionUtils.isEmpty(projectsURI)) {    resourcesUsingUserGroup.addAll(projectsURI);  }  Set<URI> catalogCategoriesURI=_permissionsHelper.checkForActiveCatalogCategoryAclsUsingUserGroup(label);  if (!CollectionUtils.isEmpty(catalogCategoriesURI)) {    resourcesUsingUserGroup.addAll(catalogCategoriesURI);  }  Set<URI> catalogServicesURI=_permissionsHelper.checkForActiveCatalogServiceAclsUsingUserGroup(label);  if (!CollectionUtils.isEmpty(catalogServicesURI)) {    resourcesUsingUserGroup.addAll(catalogServicesURI);  }  if (!CollectionUtils.isEmpty(resourcesUsingUserGroup)) {    throw APIException.badRequests.cannotDeleteOrEditUserGroup(resourcesUsingUserGroup.size(),resourcesUsingUserGroup);  }}  }
class C{  public void add(double x,double weight){  if (weight < 0)   throw new ArithmeticException("Can not add a negative weight"); else   if (weight == 0)   return;  double n1=n;  n+=weight;  double delta=x - mean;  double delta_n=delta * weight / n;  double delta_n2=delta_n * delta_n;  double term1=delta * delta_n * n1;  mean+=delta_n;  m4+=term1 * delta_n2 * (n * n - 3 * n + 3) + 6 * delta_n2 * m2 - 4 * delta_n * m3;  m3+=term1 * delta_n * (n - 2) - 3 * delta_n * m2;  m2+=weight * delta * (x - mean);  if (min == null)   min=max=x; else {    min=Math.min(min,x);    max=Math.max(max,x);  }}  }
class C{  public static void assertEquals(Set<? extends Object> expected,Set<? extends Object> actual){  assertEquals(null,expected,actual);}  }
class C{  public static <T extends Comparable<T>>void testOrder(final T[][] array,final boolean checkHash){  for (int i=0; i < array.length; i++) {    TestUtils.testEquivalent("" + i,array[i]);    Assert.assertFalse("Array element: " + i + " is null",array[i].equals(null));    for (int j=0; j < i; j++) {      TestUtils.testLess(j + ":" + i,array[j],array[i],checkHash);    }  }}  }
class C{  public List<JCCompilationUnit> enterTrees(List<JCCompilationUnit> roots){  if (!taskListener.isEmpty()) {    for (    JCCompilationUnit unit : roots) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,unit);      taskListener.started(e);    }  }  enter.main(roots);  if (!taskListener.isEmpty()) {    for (    JCCompilationUnit unit : roots) {      TaskEvent e=new TaskEvent(TaskEvent.Kind.ENTER,unit);      taskListener.finished(e);    }  }  if (needRootClasses || sourceOutput || stubOutput) {    ListBuffer<JCClassDecl> cdefs=new ListBuffer<>();    for (    JCCompilationUnit unit : roots) {      for (List<JCTree> defs=unit.defs; defs.nonEmpty(); defs=defs.tail) {        if (defs.head instanceof JCClassDecl)         cdefs.append((JCClassDecl)defs.head);      }    }    rootClasses=cdefs.toList();  }  for (  JCCompilationUnit unit : roots) {    inputFiles.add(unit.sourcefile);  }  return roots;}  }
class C{  protected Object newInitialFlow(){  BoundedFlowSet initSet=(BoundedFlowSet)emptySet.clone();  initSet.complement();  return initSet;}  }
class C{  public String toString(){  String hostAddress=getHostAddress();  if (hostAddress == null) {    hostAddress=getHostName();  }  StringBuilder bldr=new StringBuilder(hostAddress);  if (isIPv6())   bldr.insert(0,"[").append("]");  bldr.append(":").append(getPort());  bldr.append("/").append(getTransport());  return bldr.toString();}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    KeyStoreState currentState=history.getCurrentState();    String alias=kseFrame.getSelectedEntryAlias();    Password password=getEntryPassword(alias,currentState);    if (password == null) {      return;    }    KeyStore keyStore=currentState.getKeyStore();    PrivateKey privateKey=(PrivateKey)keyStore.getKey(alias,password.toCharArray());    DExportPrivateKeyType dExportPrivateKeyType=new DExportPrivateKeyType(frame);    dExportPrivateKeyType.setLocationRelativeTo(frame);    dExportPrivateKeyType.setVisible(true);    if (!dExportPrivateKeyType.exportTypeSelected()) {      return;    }    if (dExportPrivateKeyType.exportPkcs8()) {      exportAsPkcs8(privateKey,alias);    } else     if (dExportPrivateKeyType.exportPvk()) {      exportAsPvk(privateKey,alias);    } else {      exportAsOpenSsl(privateKey,alias);    }  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public boolean hasGeoRssBox(){  return hasExtension(GeoRssBox.class);}  }
class C{  public DateTime(int year,int monthOfYear,int dayOfMonth,int hourOfDay,int minuteOfHour){  super(year,monthOfYear,dayOfMonth,hourOfDay,minuteOfHour,0,0);}  }
class C{  public static List<Map.Entry<List<String>,List<double[]>>> sort(Map<List<String>,List<Double>> mapForSort,Map<List<String>,List<double[]>> valueMap,List<SortOption> sortOptions,int topN){  processIndex(sortOptions);  List<Map.Entry<List<String>,List<double[]>>> result=new ArrayList<Map.Entry<List<String>,List<double[]>>>();  SortedSet<Map.Entry<List<String>,List<Double>>> sortedSet=sortByValue(mapForSort,sortOptions);  for (  Map.Entry<List<String>,List<Double>> entry : sortedSet) {    List<String> key=entry.getKey();    List<double[]> value=valueMap.get(key);    if (value != null) {      Map.Entry<List<String>,List<double[]>> newEntry=new ImmutableEntry<List<String>,List<double[]>>(key,value);      result.add(newEntry);      if (topN > 0 && result.size() >= topN) {        break;      }    }  }  return result;}  }
class C{  public void testResourcesAvailable(){  new ArmenianAnalyzer().close();}  }
class C{  Object decodeXml(String xml) throws BillingException {  if (xml != null) {    try (XMLDecoder xmlDecoder=new XMLDecoder(new ByteArrayInputStream(xml.getBytes(StandardCharsets.UTF_8)))){      return xmlDecoder.readObject();    } catch (    Exception e) {      throw new BillingException("File application response decoding error.");    }  } else {    return null;  }}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  public SuperUserCommand(String command){  this(new String[]{command});}  }
class C{  public int size(){  return (tail - head) & (elements.length - 1);}  }
class C{  public StringBuilder(){  super(16);}  }
class C{  protected void configure(@NotNull Object o){}  }
class C{  public static String translateScaleToSeries(long scale){  if (scale == 0) {    return "Various    ";  } else   if (scale == 50000L) {    return "1:50K      ";  } else   if (scale == 100000L) {    return "1:100K     ";  } else   if (scale == 200000L) {    return "1:200K     ";  } else   if (scale == 250000L) {    return "1:250K     ";  } else   if (scale == 500000L) {    return "1:500K     ";  } else   if (scale == 1000000L) {    return "1:1M       ";  } else   if (scale == 2000000L) {    return "1:2M       ";  } else   if (scale == 5000000L) {    return "1:5M       ";  } else   if (scale == 66666L) {    return "10M         ";  } else   if (scale == 33333L) {    return "5M          ";  } else {    return (String)null;  }}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return zzCurrentPos >= s.offset + s.count;}  }
class C{  public synchronized void mark(int readlimit){  in.mark(readlimit);}  }
class C{  protected void propertyChange(PropertyChangeEvent e){  String name=e.getPropertyName();  if (name.equals(RSyntaxTextArea.SYNTAX_SCHEME_PROPERTY)) {    modelChanged();  } else {    super.propertyChange(e);  }}  }
class C{  public HistoryReferenceTableModel(COLUMN[] columns){  super();  this.columns=columns;  this.hrefList=new ArrayList<>();}  }
class C{  public XMLWriter(Writer writer){  init(writer);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:26.266 -0400",hash_original_method="688475050D9EB13B173156735A8487EC",hash_generated_method="F90EC3649C5AC8A1A6F2B99AB83215CB") @Override @SuppressWarnings("unchecked") public boolean remove(Object o){  if (o == null) {    return false;  }  for (int targetIndex=0; targetIndex < size; targetIndex++) {    if (o.equals(elements[targetIndex])) {      removeAt(targetIndex);      return true;    }  }  return false;}  }
class C{  public boolean makeReflective(Class clazz,Class metaobject,Class metaclass) throws CannotCompileException, NotFoundException {  return makeReflective(clazz.getName(),metaobject.getName(),metaclass.getName());}  }
class C{  public void info(){}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  protected <V extends DataObjectRestRep>boolean acceptId(URI id,ResourceFilter<V> filter){  if (id == null) {    return false;  }  if (filter != null) {    return filter.acceptId(id);  }  return true;}  }
class C{  public static void main(String a[]){  readFile(a[0]);  System.exit(0);}  }
class C{  public void add(String n,String string,int type){  next.put(type + "#" + n,string);}  }
class C{  public MyHashMap(int initialCapacity,float loadFactorThreshold){  if (initialCapacity > MAXIMUM_CAPACITY)   this.capacity=MAXIMUM_CAPACITY; else   this.capacity=trimToPowerOf2(initialCapacity);  this.loadFactorThreshold=loadFactorThreshold;  table=new ArrayList<>();  for (int i=0; i < capacity; i++)   table.add(null);}  }
class C{  public Closure<V> memoizeAtMost(final int maxCacheSize){  if (maxCacheSize < 0)   throw new IllegalArgumentException("A non-negative number is required as the maxCacheSize parameter for memoizeAtMost.");  return Memoize.buildMemoizeFunction(new LRUCache(maxCacheSize),this);}  }
class C{  public BoltServerAddress resolve() throws UnknownHostException {  String hostAddress=InetAddress.getByName(host).getHostAddress();  if (hostAddress.equals(host)) {    return this;  } else {    return new BoltServerAddress(hostAddress,port);  }}  }
class C{  public <R>R transactNewReadOnly(Work<R> work){  ReadOnlyWork<R> readOnlyWork=new ReadOnlyWork<>(work,getClock());  try {    ofy().transactNew(readOnlyWork);  } catch (  TransientFailureException|DatastoreTimeoutException|DatastoreFailureException e) {    return transactNewReadOnly(work);  }catch (  KillTransactionException e) {    return readOnlyWork.getResult();  }  throw new AssertionError();}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  if (addr != null)   for (int i=0; i < addr.length; ++i) {    int x=addr[i] & 0xFF;    result.append((x < 0x10 ? "0" : "") + Integer.toString(x,16));  }  result.append(':');  result.append(uid.toString());  return result.toString();}  }
class C{  protected void init(Delegator delegator,ModelEntity modelEntity,Map<String,? extends Object> fields){  assertIsMutable();  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  this.modelEntity=modelEntity;  this.entityName=modelEntity.getEntityName();  this.delegatorName=delegator.getDelegatorName();  this.internalDelegator=delegator;  this.observable=new Observable();  setFields(fields);  if (this.entityName == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null entityName in the modelEntity parameter");  }}  }
class C{  public void testCertStore17() throws NoSuchAlgorithmException, InvalidAlgorithmParameterException {  if (!initParams()) {    return;  }  CertStore certS;  for (int i=0; i < dValid.length; i++) {    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderCol);      assertEquals("Incorrect provider",certS.getProvider(),defaultProviderCol);    } catch (    IllegalArgumentException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }    try {      certS=CertStore.getInstance(dValid[i],dParams,defaultProviderColName);      assertEquals("Incorrect provider",certS.getProvider(),defaultProviderCol);    } catch (    NoSuchProviderException e) {      fail("Unexpected IllegalArgumentException " + e.getMessage());    }  }}  }
class C{  protected PlanNode toQueryForSelect(ResultSetNode resultSet,OrderByList orderByList,ValueNode offsetClause,ValueNode fetchFirstClause,boolean needResultSet) throws StandardException {  if (resultSet instanceof SelectNode)   return toQueryForSelect((SelectNode)resultSet,orderByList,offsetClause,fetchFirstClause); else   if (resultSet instanceof RowResultSetNode) {    List<ExpressionNode> row=toExpressionsRow(resultSet);    List<List<ExpressionNode>> rows=new ArrayList<>(1);    rows.add(row);    return newValues(rows,needResultSet,resultSet);  } else   if (resultSet instanceof RowsResultSetNode) {    List<List<ExpressionNode>> rows=new ArrayList<>();    for (    ResultSetNode row : ((RowsResultSetNode)resultSet).getRows()) {      rows.add(toExpressionsRow(row));    }    return newValues(rows,needResultSet,resultSet);  } else   if (resultSet instanceof UnionNode || resultSet instanceof IntersectOrExceptNode) {    return newSetOperation(resultSet,orderByList,offsetClause,fetchFirstClause);  } else   throw new UnsupportedSQLException("Unsupported query",resultSet);}  }
class C{  public void removeHttpSessionToken(String site,String token){  if (!site.contains(":")) {    site=site + (":80");  }  HttpSessionTokensSet siteTokens=sessionTokens.get(site);  if (siteTokens != null) {    siteTokens.removeToken(token);    if (siteTokens.isEmpty())     sessionTokens.remove(site);    this.getHttpSessionsSite(site).cleanupSessionToken(token);  }  if (isDefaultSessionToken(token))   markRemovedDefaultSessionToken(site,token);  log.info("Removed session token for site '" + site + "': "+ token);}  }
class C{  public static String isOutputBitFree(int bitNum){  if ((bitNum < 1) || (bitNum > 8000)) {    log.error("illegal bit number in free bit test - " + bitNum);    return ("");  }  jmri.Turnout t=null;  String sysName="";  sysName=makeSystemName("T",bitNum);  t=jmri.InstanceManager.turnoutManagerInstance().getBySystemName(sysName);  if (t != null) {    return (sysName);  }  if (bitNum > 1) {    sysName=makeSystemName("T",bitNum - 1);    t=jmri.InstanceManager.turnoutManagerInstance().getBySystemName(sysName);    if (t != null) {      if (t.getNumberOutputBits() == 2) {        return (sysName);      }    }  }  jmri.Light lgt=null;  sysName=makeSystemName("L",bitNum);  lgt=jmri.InstanceManager.lightManagerInstance().getBySystemName(sysName);  if (lgt != null) {    return (sysName);  }  return ("");}  }
class C{  public CSVTableWriter(boolean printHeader){  m_printHeader=printHeader;}  }
class C{  public void dropConstraints(TableDefinition tableDefinition) throws EclipseLinkException {  boolean usesBatchWriting=false;  if (getSession().getPlatform().usesBatchWriting()) {    usesBatchWriting=true;    getSession().getPlatform().setUsesBatchWriting(false);  }  try {    if (shouldWriteToDatabase()) {      tableDefinition.dropConstraintsOnDatabase(getSession());    } else {      tableDefinition.setCreateSQLFiles(createSQLFiles);      tableDefinition.dropConstraints(getSession(),getDropSchemaWriter());    }  }  finally {    if (usesBatchWriting) {      getSession().getPlatform().setUsesBatchWriting(true);    }  }}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedConcurrentMap(Map<K,V> map){  return new ByValueSortingConcurrentSkipListMap<>(ByValueComparator.create(map));}  }
class C{  protected static FontUIResource _getSubTextFont(){  if (smallFont == null) {    try {      smallFont=new FontUIResource(Font.getFont("swing.plaf.metal.smallFont",new Font(FONT_DEFAULT,Font.PLAIN,FONT_SIZE - 2)));    } catch (    Exception e) {      smallFont=new FontUIResource(FONT_DEFAULT,Font.PLAIN,FONT_SIZE - 2);    }  }  return smallFont;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String s=getString(stack);  if (s == null)   return null;  int idx=s.lastIndexOf('.');  if (idx == -1)   return ""; else   return s.substring(idx + 1);}  }
class C{  public void play(){  fan.play();}  }
class C{  FieldData dataAt(int index){  if (mGarbage) {    gc();  }  return mData[index];}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoSysRecO[");  buffer.append("m_maxBadCnts = ").append(m_maxBadCnts);  buffer.append(", m_pwdVp = ").append(m_pwdVp);  buffer.append(", m_pwdMinLen = ").append(m_pwdMinLen);  buffer.append("]");  return buffer.toString();}  }
class C{  public void disableGzip(){  mGzipEnabled=false;}  }
class C{  public void trace(String format,Object... argArray){  formatAndLog(Log.VERBOSE,format,argArray);}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public static SimpleDataSet read(Reader reader,int lines_to_skip,Set<Integer> cat_cols) throws IOException {  return read(reader,DEFAULT_DELIMITER,lines_to_skip,DEFAULT_COMMENT,cat_cols);}  }
class C{  public void save(Graph<V,E> g,String filename,Function<V,String> vs,Function<E,Number> nev) throws IOException {  save(g,new FileWriter(filename),vs,nev,null);}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){  return;}  }
class C{  public static AffineTransformation rotationInstance(double sinTheta,double cosTheta,double x,double y){  AffineTransformation trans=new AffineTransformation();  trans.setToRotation(sinTheta,cosTheta,x,y);  return trans;}  }
class C{  protected EIPModelImpl(){  super();}  }
class C{  public String toHuman(){  return name.toHuman() + ':' + descriptor.toHuman();}  }
class C{  @Override public double cloudletSubmit(Cloudlet cloudlet,double fileTransferTime){  ResCloudlet rcl=new ResCloudlet(cloudlet);  rcl.setCloudletStatus(Cloudlet.INEXEC);  for (int i=0; i < cloudlet.getNumberOfPes(); i++) {    rcl.setMachineAndPeId(0,i);  }  getCloudletExecList().add(rcl);  double extraSize=getCapacity(getCurrentMipsShare()) * fileTransferTime;  long length=(long)(cloudlet.getCloudletLength() + extraSize);  cloudlet.setCloudletLength(length);  return cloudlet.getCloudletLength() / getCapacity(getCurrentMipsShare());}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  protected void save(){  context.save();}  }
class C{  @Override public void exportGroupCreate(URI export,Map<URI,Integer> volumeMap,List<URI> initiatorURIs,String opId) throws ControllerException {  blockRMI("exportGroupCreate",export,volumeMap,initiatorURIs,opId);}  }
class C{  public Element store(Object o){  SE8cSignalHead p=(SE8cSignalHead)o;  Element element=new Element("signalhead");  element.setAttribute("class",this.getClass().getName());  element.addContent(new Element("systemName").addContent(p.getSystemName()));  element.setAttribute("systemName",p.getSystemName());  storeCommon(p,element);  element.addContent(addTurnoutElement(p.getLow(),"low"));  element.addContent(addTurnoutElement(p.getHigh(),"high"));  return element;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_BASE_TYPE:    if (resolve)     return getDelegationBaseType();  return basicGetDelegationBaseType();case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_SUPER_CLASS_STEPS:return getDelegationSuperClassSteps();case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET:if (resolve) return getDelegationTarget();return basicGetDelegationTarget();case ImPackage.DELEGATING_GETTER_DECLARATION__DELEGATION_TARGET_IS_ABSTRACT:return isDelegationTargetIsAbstract();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public TagElementProcessor(ElementProcessor parentProcessor,TagListener tagListener){  super(parentProcessor);  this.tagListener=tagListener;}  }
class C{  public static int defineTag(int ifdId,short tagId){  return (tagId & 0x0000ffff) | (ifdId << 16);}  }
class C{  private void registerRoutes(Router router,String root){  router.get(root).handler(null);  router.get(root + "/:uuid").handler(null);  router.delete(root + "/:uuid").handler(null);  router.route().handler(BodyHandler.create());  router.post(root).handler(null);  router.put(root + "/:uuid").handler(null);}  }
class C{  default SortedSetX<T> toSortedSetX(){  return SortedSetX.fromIterable(toList());}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof NumberUpSupported);}  }
class C{  private boolean areIvrZoneMembersInSameNetwork(List<IvrZoneMember> ivrZoneMembers){  boolean sameNetwork=true;  if (ivrZoneMembers != null && ivrZoneMembers.size() > 1) {    Integer baseVsan=ivrZoneMembers.get(0).getVsanId();    for (    IvrZoneMember ivrZoneMember : ivrZoneMembers) {      if (!baseVsan.equals(ivrZoneMember.getVsanId())) {        sameNetwork=false;        break;      }    }  }  return sameNetwork;}  }
class C{  public void writeCharacteristic(UUID uuid,byte[] value,ActionCallback callback){  try {    this.currentCallback=callback;    BluetoothGattCharacteristic chara=gatt.getService(Profile.UUID_SERVICE_MILI).getCharacteristic(uuid);    if (null == chara) {      this.onFail(-1,"BluetoothGattCharacteristic " + uuid + " doesn't exist");      return;    }    chara.setValue(value);    if (!this.gatt.writeCharacteristic(chara)) {      this.onFail(-1,"gatt.writeCharacteristic() return false");    } else {      onSuccess(chara);    }  } catch (  Throwable tr) {    Log.e(TAG,"writeCharacteristic",tr);    this.onFail(-1,tr.getMessage());  }}  }
class C{  public SAMLRedirectURLException(String message,ReasonEnum reason){  super(message);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.toString());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public NamedList normalize(NamedList input){  input.remove("avgRequestsPerSecond");  for (int i=0; i < input.size(); i++) {    Object v=input.getVal(i);    if (v instanceof NamedList) {      input.setVal(i,normalize((NamedList)v));    }  }  return input;}  }
class C{  public int link(final int size){  _currentFrameBottom=_frameTop;  _frameTop+=size;  if (_frameTop >= _stackFrames.length) {    XObject newsf[]=new XObject[_stackFrames.length + XPathContext.RECURSIONLIMIT + size];    System.arraycopy(_stackFrames,0,newsf,0,_stackFrames.length);    _stackFrames=newsf;  }  if (_linksTop + 1 >= _links.length) {    int newlinks[]=new int[_links.length + (CLEARLIMITATION * 2)];    System.arraycopy(_links,0,newlinks,0,_links.length);    _links=newlinks;  }  _links[_linksTop++]=_currentFrameBottom;  return _currentFrameBottom;}  }
class C{  public static String displayOutputs(Set<String> outputNames,LocalVariableMap symbolTable){  StringBuilder sb=new StringBuilder();  if (outputNames.isEmpty()) {    sb.append("None\n");  } else {    int count=0;    for (    String outputName : outputNames) {      sb.append("  [");      sb.append(++count);      sb.append("] ");      if (symbolTable.get(outputName) != null) {        sb.append("(");        sb.append(determineOutputTypeAsString(symbolTable,outputName));        sb.append(") ");      }      sb.append(outputName);      if (symbolTable.get(outputName) != null) {        sb.append(": ");        sb.append(symbolTable.get(outputName));      }      sb.append("\n");    }  }  return sb.toString();}  }
class C{  public UsedClass methodInC4(UsedClass p){  return p;}  }
class C{  public CallableStatementSpy(String sql,ConnectionSpy connectionSpy,CallableStatement realCallableStatement){  super(sql,connectionSpy,realCallableStatement);  this.realCallableStatement=realCallableStatement;}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  public Tuple2<Integer,T2> asTuple(){  return Tuple.tuple(v1,v2);}  }
class C{  public ValidationEngine(XMLReaderCreator xrc,ErrorHandler eh,boolean checkIdIdref,boolean compactSyntax){  this(xrc,eh,(checkIdIdref ? CHECK_ID_IDREF : 0) | (compactSyntax ? COMPACT_SYNTAX : 0));}  }
class C{  public void valueChange(ValueChangeEvent evt){  if (evt.getSource() instanceof WEditor) {    GridField changedField=((WEditor)evt.getSource()).getGridField();    if (changedField != null) {    }  }  String columnName="";  if (evt.getSource() instanceof WEditor) {    WEditor wEditor=(WEditor)evt.getSource();    columnName=wEditor.getGridField().getVO().Help;  }}  }
class C{  public void test_tx_begin_addStatement_commit() throws RepositoryException, MalformedQueryException, UpdateExecutionException {  if (true)   return;  assertFalse(cxn.isActive());  cxn.begin();  assertTrue(cxn.isActive());  final URI a=cxn.getValueFactory().createURI(DEFAULT_PREFIX + "a");  final URI b=cxn.getValueFactory().createURI(DEFAULT_PREFIX + "b");  final URI c=cxn.getValueFactory().createURI(DEFAULT_PREFIX + "c");  assertFalse(cxn.hasStatement(a,b,c,true));  cxn.add(cxn.getValueFactory().createStatement(a,b,c));  assertTrue(cxn.hasStatement(a,b,c,true));{    final BigdataSailRemoteRepositoryConnection cxn2=repo.getConnection();    try {      assertTrue(cxn2 != cxn);      assertFalse(cxn2.hasStatement(a,b,c,true));    }  finally {      cxn2.close();    }  }  cxn.commit();  assertFalse(cxn.isActive());}  }
class C{  public void bindingChanged(Element bindableElement,Element shadowTree){  BridgeUpdateHandler h=getBridgeUpdateHandler(bindableElement);  if (h instanceof SVG12BridgeUpdateHandler) {    SVG12BridgeUpdateHandler h12=(SVG12BridgeUpdateHandler)h;    try {      h12.handleBindingEvent(bindableElement,shadowTree);    } catch (    Exception e) {      userAgent.displayError(e);    }  }}  }
class C{  public Builder executor(Executor executor){  this.executor=executor;  return this;}  }
class C{  public static List<Resource> newObjectFromJSONArray(JSONArray dataArray,List<Resource> included) throws Exception {  ArrayList<Resource> objects=new ArrayList<>();  for (int i=0; i < dataArray.length(); i++) {    JSONObject jsonObject=null;    try {      jsonObject=dataArray.getJSONObject(i);    } catch (    JSONException e) {      Logger.debug("Was not able to get dataArray[" + i + "] as JSONObject.");    }    try {      objects.add(newObjectFromJSONObject(jsonObject,included));    } catch (    Exception e) {      throw e;    }  }  return objects;}  }
class C{  @Override public IBinder onBind(Intent intent){  return null;}  }
class C{  public String random(Object omin,Object omax){  int min=FunctionHandler.getInt(omin);  int max=FunctionHandler.getInt(omax);  if (max > min) {    return Integer.toString(rnd.nextInt(max - min) + min);  }  return "0";}  }
class C{  private static Event<RPEntity> createEventsForRPEntity(RPEntity entity,RPEvent rpevent){  String name=rpevent.getName();  Event<RPEntity> event=null;  if (name.equals(Events.PUBLIC_TEXT)) {    event=new PublicTextEvent();  } else   if (name.equals(Events.PRIVATE_TEXT)) {    event=new PrivateTextEvent();  } else   if (name.equals(Events.ATTACK)) {    event=new AttackEvent();  } else   if (name.equals(Events.TRADE_STATE_CHANGE)) {    event=new TradeStateChangeEvent();  } else   if (name.equals(Events.GROUP_CHANGE)) {    event=new GroupChangeEvent();  } else   if (name.equals(Events.GROUP_INVITE)) {    event=new GroupInviteEvent();  } else   if (name.equals(Events.PROGRESS_STATUS_CHANGE)) {    event=new ProgressStatusEvent();  } else   if (name.equals(Events.REACHED_ACHIEVEMENT)) {    event=new ReachedAchievementEvent();  }  if (event != null) {    event.init(entity,rpevent);  }  return event;}  }
class C{  public synchronized OMGraphicList prepare(){  Projection projection=getProjection();  if (projection == null) {    System.err.println("Link Layer needs to be added to the MapBean before it can get graphics!");    return new LinkOMGraphicList();  }  Debug.message("basic",getName() + "|BufferedLinkLayer.prepare(): doing it");  OMGraphicList omGraphics=getList();  if (omGraphics == null || omGraphics.isEmpty()) {    try {      ClientLink l=linkManager.getLink(true);      if (l == null) {        System.err.println("BufferedLinkLayer: unable to get link in prepare().");        return new LinkOMGraphicList();      }synchronized (l) {        omGraphics=getAllGraphics(l,projection);      }      linkManager.finLink();    } catch (    UnknownHostException uhe) {      System.err.println("BufferedLinkLayer: unknown host!");      omGraphics=new LinkOMGraphicList();    }catch (    java.io.IOException ioe) {      System.err.println("BufferedLinkLayer: IOException contacting server for map request!");      System.err.println(ioe);      linkManager.resetLink();      if (!quiet) {        fireRequestMessage("Communication error between " + getName() + " layer\nand Link Server: Host: "+ host+ ", Port: "+ port);      }      System.err.println("BufferedLinkLayer: Communication error between " + getName() + " layer\nand Link Server: Host: "+ host+ ", Port: "+ port);      omGraphics=new LinkOMGraphicList();    }  } else {    omGraphics.project(projection);  }  int size=0;  if (omGraphics != null) {    size=omGraphics.size();    if (Debug.debugging("basic")) {      System.out.println(getName() + "|BufferedLinkLayer.prepare(): finished with " + size+ " graphics");    }  } else {    Debug.message("basic",getName() + "|BufferedLinkLayer.prepare(): finished with null graphics list");  }  return omGraphics;}  }
class C{  private void notifyListeners(){  for (  final IGraphSearchFieldListener listener : m_listenerProvider) {    listener.searched();  }}  }
class C{  public void testSessionStateDefaults(){  UUID clientId=UUID.randomUUID();  ClientSessionState state=new ClientSessionState(clientId);  assertEquals(state.getClientId(),clientId);  assertEquals(state.getSessionId(),0);  assertEquals(state.getState(),Session.State.CLOSED);  assertEquals(state.getCommandRequest(),0);  assertEquals(state.getCommandResponse(),0);  assertEquals(state.getResponseIndex(),0);  assertEquals(state.getEventIndex(),0);}  }
class C{  public boolean isGranted(String permission){  return !isMarshmallow() || isGranted_(permission);}  }
class C{  public SimpleImmutableEntry(K key,V value){  this.key=key;  this.value=value;}  }
class C{  public static double checkHeading(final double newHeading){  double result=newHeading;  while (result < 0) {    result+=PRECISION;  }  while (result > 360) {    result-=PRECISION;  }  return result;}  }
class C{  public DelimitedTextTableReader(ParserFactory parserFactory){  this("\t",parserFactory);}  }
class C{  public void validateForPropertiesUpdate(Collection<IPropertyUpdate<?>> propertyUpdates) throws PropertyValidationException {  PropertyValidation propertyValidation=PropertyValidation.createFor(this);  for (  IGroupedProperyValidator groupedProperyValidator : validators) {    groupedProperyValidator.validateForPropertyUpdates(this,propertyUpdates,propertyValidation);  }  if (propertyValidation.hasErrors()) {    throw new PropertyValidationException(propertyValidation);  }}  }
class C{  public String globalInfo(){  return "The ScoreBasedSearchAlgorithm class supports Bayes net " + "structure search algorithms that are based on maximizing " + "scores (as opposed to for example conditional independence "+ "based search algorithms).";}  }
class C{  public void run(final String[] args){  parseArguments(args);  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  scenario.getConfig().addCoreModules();  scenario.getConfig().network().setInputFile(this.networkfile);  scenario.getConfig().plans().setInputFile(this.plansfileIN);  ScenarioUtils.loadScenario(scenario);  Network network=scenario.getNetwork();  final Population plans=(Population)scenario.getPopulation();  StreamingUtils.setIsStreaming(plans,true);  final MatsimReader plansReader=new PopulationReader(scenario);  final StreamingPopulationWriter plansWriter=new StreamingPopulationWriter(plans,network);  plansWriter.startStreaming(this.plansfileOUT);  StreamingUtils.addAlgorithm(plans,new org.matsim.core.population.algorithms.XY2Links(network,null));  StreamingUtils.addAlgorithm(plans,plansWriter);  plansReader.readFile(scenario.getConfig().plans().getInputFile());  PopulationUtils.printPlansCount(plans);  plansWriter.closeStreaming();  System.out.println("done.");}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (graph == null) {    throw new NullPointerException();  }}  }
class C{  static boolean isAddressAllowed(InetAddress address){  if (address.isLoopbackAddress()) {    return false;  }  boolean ret=true;  List<InetAddress> allowed=getAllowedAddresses();  List<InetAddress> blocked=getBlockedAddresses();  if (allowed != null)   ret=allowed.contains(address);  if (blocked != null)   ret=ret && !blocked.contains(address);  return ret;}  }
class C{  private static <T>void checkInputParameter(WsInfo info,Class<T> type){  if (info == null || type == null) {    String text="Error: missing input parameter";    logger.error(text);    throw new WebServiceException(text);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:56.381 -0500",hash_original_method="82F5809A27EA13ABE8A026DC04B05568",hash_generated_method="452ADD8EF65A743CE8FA60E253163698") public LayoutParams(int width,int height,int x,int y){  super(width,height);  this.x=x;  this.y=y;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case GamlPackage.VARIABLE_REF__REF:    setRef((VarDefinition)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public InlineQueryResultArticle.InlineQueryResultArticleBuilder title(String title){  this.title=title;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.433 -0400",hash_original_method="E817E461C2316DA2BC33C7CEFBA0F603",hash_generated_method="26E83CF656A96DD8E03F021807EDF6B7") public Class<? extends Annotation> annotationType(){  return annotationType;}  }
class C{  public static int size(){  return tableList.size();}  }
class C{  private boolean isAppInstalled(String appIdentifier){  boolean appInstalled=false;  ArrayList<DeviceAppInfo> apps=new ArrayList<>(applicationManager.getInstalledApps().values());  for (  DeviceAppInfo appInfo : apps) {    if (appIdentifier.trim().equals(appInfo.getPackagename())) {      appInstalled=true;    }  }  return appInstalled;}  }
class C{  @Before public void basicSetUp() throws Exception {  fbManager=createFBManager();  defaultDatabaseSetUp(fbManager);}  }
class C{  public float screenZ(float x,float y,float z){  showMissingWarning("screenZ");  return 0;}  }
class C{  protected InputStream openInputStream() throws IOException {  return StreamUtils.inputStream(file);}  }
class C{  protected void updateFileSystemStatus(DbClient dbClient,Operation.Status status){  try {    if (Operation.Status.ready.equals(status)) {      List<FileShare> fileshares=dbClient.queryObject(FileShare.class,getIds());      for (      FileShare fs : fileshares) {        fs.setMirrorStatus(getFileMirrorStatusForSuccess(fs));        fs.setAccessState(getFileShareAccessStateForSuccess(fs).name());      }      dbClient.updateObject(fileshares);      _logger.info("Updated Mirror status for fileshares: {}",getIds());    }  } catch (  Exception e) {    _logger.info("Not updating fileshare mirror link status for fileshares: {}",getIds(),e);  }}  }
class C{  public boolean isDynamic(){  return true;}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  private void upgradeIfNecessary(){  int userVersion=mUserVersion;  if (userVersion < 1) {    UserInfo user=mUsers.get(UserHandle.USER_OWNER);    if ("Primary".equals(user.name)) {      user.name=mContext.getResources().getString(com.android.internal.R.string.owner_name);      writeUserLocked(user);    }    userVersion=1;  }  if (userVersion < 2) {    UserInfo user=mUsers.get(UserHandle.USER_OWNER);    if ((user.flags & UserInfo.FLAG_INITIALIZED) == 0) {      user.flags|=UserInfo.FLAG_INITIALIZED;      writeUserLocked(user);    }    userVersion=2;  }  if (userVersion < USER_VERSION) {    Slog.w(LOG_TAG,"User version " + mUserVersion + " didn't upgrade as expected to "+ USER_VERSION);  } else {    mUserVersion=userVersion;    writeUserListLocked();  }}  }
class C{  public boolean seekTo(byte[] key,int keyOffset,int keyLen) throws IOException {  return seekTo(new ByteArray(key,keyOffset,keyLen),false);}  }
class C{  public static String withPrefixes(String str,Resource executable){  if (useGraphPrefixes) {    return ARQFactory.get().createPrefixDeclarations(executable.getModel()) + str;  } else {    StringBuffer sb=new StringBuffer();    PrefixMapping pm=new PrefixMappingImpl();    Set<Resource> reached=new HashSet<Resource>();    for (    Resource ontology : JenaUtil.getResourceProperties(executable,SH.prefixes)) {      String duplicate=collectPrefixes(ontology,pm,reached);      if (duplicate != null) {        throw new SHACLException("Duplicate prefix declaration for prefix " + duplicate);      }    }    for (    String prefix : pm.getNsPrefixMap().keySet()) {      sb.append("PREFIX ");      sb.append(prefix);      sb.append(": <");      sb.append(pm.getNsPrefixURI(prefix));      sb.append(">\n");    }    sb.append(str);    return sb.toString();  }}  }
class C{  public synchronized boolean isLocked(){  return (lock != null && !lock.isShared());}  }
class C{  private void assignOrganizationRole(Organization organization,OrganizationRoleType... roles) throws NonUniqueBusinessKeyException {  for (  OrganizationRoleType roleToSet : roles) {    OrganizationRole role=new OrganizationRole();    role.setRoleName(roleToSet);    role=(OrganizationRole)dm.find(role);    OrganizationToRole orgToRole=new OrganizationToRole();    orgToRole.setOrganization(organization);    orgToRole.setOrganizationRole(role);    dm.persist(orgToRole);  }}  }
class C{  public final void yyreset(java.io.Reader reader) throws java.io.IOException {  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  @SuppressWarnings("unchecked") private void mergeLo(int base1,int len1,int base2,int len2){  if (DEBUG)   assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  System.arraycopy(a,base1,tmp,0,len1);  int cursor1=0;  int cursor2=base2;  int dest=base1;  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      if (DEBUG)       assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    if (DEBUG)     assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    if (DEBUG)     assert len2 == 0;    if (DEBUG)     assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  private void assertContains(String haystack,String needle){  assertTrue("[" + haystack + "] does not contain ["+ needle+ "]",haystack.contains(needle));}  }
class C{  protected ApplicationUser createNewApplicationUser(){  return new ApplicationUser(this.getClass());}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  @Override public void zoomDomainAxes(double factor,PlotRenderingInfo state,Point2D source){}  }
class C{  @Override public void endSlice(){  cursor=queryIterator.getCursor();}  }
class C{  public <T>Flag(final Character flagChar,final String flagName,final String flagDescription,final int minCount,final int maxCount,final Class<T> paramType,final String paramDescription,final T paramDefault,final String category){  if (flagDescription == null) {    throw new NullPointerException();  }  if (flagName == null) {    if (paramType == null) {      throw new IllegalArgumentException();    }  } else {    if (flagName.startsWith("-")) {      throw new IllegalArgumentException("Long flag names cannot start with '-'");    }  }  setCategory(category);  mFlagName=flagName;  mFlagChar=flagChar;  mFlagDescription=flagDescription;  mParameterType=paramType;  mParameterDescription=(mParameterType == null) ? null : ((paramDescription == null) || (paramDescription.length() == 0)) ? autoDescription(mParameterType) : paramDescription.toUpperCase(Locale.getDefault());  if (mParameterType != null) {    setParameterDefault(paramDefault);  }  mMinCount=minCount;  mMaxCount=maxCount;  final String[] range=values(mParameterType);  if (range != null) {    setParameterRange(range);  }  if (mFlagName != null) {    if (mFlagName.startsWith(EXPERIMENTAL_FLAG_PREFIX)) {      mLevel=Level.EXPERIMENTAL;    } else     if (mFlagName.startsWith(EXTENDED_FLAG_PREFIX)) {      mLevel=Level.EXTENDED;    } else {      mLevel=Level.DEFAULT;    }  } else {    mLevel=Level.DEFAULT;  }}  }
class C{  public MinRowExpression add(Object object){  this.getChildren().add(new ConstantExpression(object));  return this;}  }
class C{  private float calcAngle(float value){  return value / mData.getYValueSum() * 360f;}  }
class C{  private Start start() throws Exception {  Start event=new Start(parser);  if (event.isEmpty()) {    return build(event);  }  return event;}  }
class C{  public ImageResizer(Context context,int imageSize){  super(context);  setImageSize(imageSize);}  }
class C{  public Boolean isDefaultIntraVmAffinity(){  return defaultIntraVmAffinity;}  }
class C{  public int read() throws IOException {  if (hasNextChar) {    hasNextChar=false;    write(nextChar);    return nextChar;  }  if (previousLine != lexer.getLine()) {    numUnicodeEscapesFoundOnCurrentLine=0;    previousLine=lexer.getLine();  }  int c=reader.read();  if (c != '\\') {    write(c);    return c;  }  c=reader.read();  if (c != 'u') {    hasNextChar=true;    nextChar=c;    write('\\');    return '\\';  }  int numberOfUChars=0;  do {    numberOfUChars++;    c=reader.read();  } while (c == 'u');  checkHexDigit(c);  StringBuilder charNum=new StringBuilder();  charNum.append((char)c);  for (int i=0; i < 3; i++) {    c=reader.read();    checkHexDigit(c);    charNum.append((char)c);  }  int rv=Integer.parseInt(charNum.toString(),16);  write(rv);  numUnicodeEscapesFound+=4 + numberOfUChars;  numUnicodeEscapesFoundOnCurrentLine+=4 + numberOfUChars;  return rv;}  }
class C{  public RapidBarPainter(final double g1,final double g2,final double g3){  this.g1=g1;  this.g2=g2;  this.g3=g3;}  }
class C{  public static boolean isNameStart(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0;}  }
class C{  public DefaultResultConverter(){  this(true);}  }
class C{  private void verifyStaleProtectionSet(){  ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,staleProtectionSetURI);  Assert.assertTrue("ProtectionSet  " + staleProtectionSetURI + " is stale and should have been removed.",(protectionSet == null || protectionSet.getInactive()));}  }
class C{  public void testCreate1(){  System.out.println("create from Audit");  Audit audit=EasyMock.createMock(Audit.class);  AuditServiceThreadFactoryImpl instance=initiliseAuditServiceThreadFactory();}  }
class C{  public T caseVersionConstraint(VersionConstraint object){  return null;}  }
class C{  public static JPanel stackWest(JComponent... components){  return stack(BorderLayout.WEST,components);}  }
class C{  public static void close(){  line.drain();  line.stop();}  }
class C{  public void addNonRemovableMetaClassRegistryChangeEventListener(MetaClassRegistryChangeEventListener listener){synchronized (changeListenerList) {    nonRemoveableChangeListenerList.add(listener);  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  protected void updateUndoPositions(Vector positions,int offset,int length){  int endOffset=offset + length;  int g1=getGapEnd();  int startIndex;  int endIndex=findMarkAdjustIndex(g1 + 1);  if (offset != 0) {    startIndex=findMarkAdjustIndex(g1);  } else {    startIndex=0;  }  for (int counter=positions.size() - 1; counter >= 0; counter--) {    UndoPosRef ref=(UndoPosRef)positions.elementAt(counter);    ref.resetLocation(endOffset,g1);  }  if (startIndex < endIndex) {    Object[] sorted=new Object[endIndex - startIndex];    int addIndex=0;    int counter;    if (offset == 0) {      for (counter=startIndex; counter < endIndex; counter++) {        MarkData mark=marks.elementAt(counter);        if (mark.index == 0) {          sorted[addIndex++]=mark;        }      }      for (counter=startIndex; counter < endIndex; counter++) {        MarkData mark=marks.elementAt(counter);        if (mark.index != 0) {          sorted[addIndex++]=mark;        }      }    } else {      for (counter=startIndex; counter < endIndex; counter++) {        MarkData mark=marks.elementAt(counter);        if (mark.index != g1) {          sorted[addIndex++]=mark;        }      }      for (counter=startIndex; counter < endIndex; counter++) {        MarkData mark=marks.elementAt(counter);        if (mark.index == g1) {          sorted[addIndex++]=mark;        }      }    }    marks.replaceRange(startIndex,endIndex,sorted);  }}  }
class C{  private int loadData(boolean loadParent){  if (!loadParent && m_info.IsParent)   return 0;  if (m_info.DisplayType == DisplayType.Search || m_info.IsCreadedUpdatedBy)   return 0;  log.fine(m_info.KeyColumn + ": start");  m_loader=new MLoader();  m_loader.start();  loadComplete();  log.fine(m_info.KeyColumn + ": #" + m_lookup.size());  return m_lookup.size();}  }
class C{  @Override public SignatureLibraryRelease parse() throws IOException {  final Map<String,String> records=parseFileToMap();  final Map<String,Signature> signatureMap=new HashMap<String,Signature>();  for (  String modelAc : records.keySet()) {    String signatureAc=records.get(modelAc);    Signature signature;    if (signatureMap.containsKey(signatureAc)) {      signature=signatureMap.get(signatureAc);    } else {      signature=new Signature(signatureAc);      signatureMap.put(signatureAc,signature);    }    signature.addModel(new Model(modelAc));  }  return new SignatureLibraryRelease(library,releaseVersion,new HashSet<Signature>(signatureMap.values()));}  }
class C{  protected void sequence_UnaryExpression(ISerializationContext context,UnaryExpression semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.UNARY_EXPRESSION__OP) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.UNARY_EXPRESSION__OP));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.UNARY_EXPRESSION__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.UNARY_EXPRESSION__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getUnaryExpressionAccess().getOpUnaryOperatorEnumRuleCall_1_1_0(),semanticObject.getOp());  feeder.accept(grammarAccess.getUnaryExpressionAccess().getExpressionUnaryExpressionParserRuleCall_1_2_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  public static Graph createMemoryGraph(){  return Factory.createDefaultGraph();}  }
class C{  protected Dimension calculateLabelSize(Dimension txtSize){  int gap=iconTextGap;  if (getIcon() == null || getText().equals(""))   gap=0;  Dimension d=new Dimension(0,0);  if (textPlacement == WEST || textPlacement == EAST) {    d.width=iconSize.width + gap + txtSize.width;    d.height=Math.max(iconSize.height,txtSize.height);  } else {    d.width=Math.max(iconSize.width,txtSize.width);    d.height=iconSize.height + gap + txtSize.height;  }  return d;}  }
class C{  public void testListOptions(){  if (!m_OptionTester.checkListOptions()) {    fail("Options cannot be listed via listOptions.");  }}  }
class C{  public final int[] toArray(){  int[] elements=new int[length];  int bite;  int copied=0;  while (copied < length) {    bite=Math.min(length - copied,0x400);    System.arraycopy(pages.get(copied >> 10),0,elements,copied,bite);    copied+=bite;  }  return elements;}  }
class C{  public RepositoryExpression withOption(String optionName,String optionValue){  return new RepositoryExpression(term.withOption(optionName,optionValue));}  }
class C{  public AttributesImpl atts(){  return theAtts;}  }
class C{  public FbetaScore(double beta){  super();  if (beta <= 0 || Double.isInfinite(beta) || Double.isNaN(beta))   throw new IllegalArgumentException("beta must be in (0, inf), not " + beta);  this.beta=beta;}  }
class C{  public static Transform makeScale(float x,float y,float z){  if (x == 1 && y == 1 && z == 1) {    return makeIdentity();  }  Transform out=new Transform(null);  out.scaleX=x;  out.scaleY=y;  out.scaleZ=z;  out.type=TYPE_SCALE;  return out;}  }
class C{  private static String matchablePath(String path){  if (path == null) {    return "/";  } else   if (path.endsWith("/")) {    return path;  } else {    return path + "/";  }}  }
class C{  private Object unmarshalElement(String uri,String name){  checkArgumentNotNull(name,"name cannot be null");  checkArgumentNotNull(uri,"uri cannot be null");  try {    if (isAtElement(uri,name)) {      Object element=unmarshaller.unmarshal(reader);      return element;    } else {      throw new IllegalStateException(String.format("Not at element %s:%s",uri,name));    }  } catch (  IllegalStateException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static void allowItemForRecycling(Object stack){  recyclingAllowed.add(ApiUtils.convertToValidRecipeInput(stack));}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  createBldgByCoords();}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (isClosed()) {      return;    }    Throwable thrown=null;    try {      flushInternal();    } catch (    Throwable e) {      thrown=e;    }    buf=null;    try {      out.close();    } catch (    Throwable e) {      if (thrown == null) {        thrown=e;      }    }    out=null;    if (thrown != null) {      SneakyThrow.sneakyThrow(thrown);    }  }}  }
class C{  public static void main(String[] args){  Deck deck;  System.out.println("Testing selection...");  deck=new Deck();  deck.shuffle();  deck.selectionSort();  checkSorted(deck);  System.out.println("Testing mergesort...");  deck=new Deck();  deck.shuffle();  deck=deck.mergeSort();  checkSorted(deck);  System.out.println("Testing insertion...");  deck=new Deck();  deck.shuffle();  deck.insertionSort();  checkSorted(deck);}  }
class C{  public int intValue(){  return (int)value;}  }
class C{  public boolean connected(int p,int q){  return find(p) == find(q);}  }
class C{  public TourGuide playOn(View view){  mHighlightedView=view;  setupView();  return this;}  }
class C{  private static boolean typeEquals(ParameterizedType from,ParameterizedType to,Map<String,Type> typeVarMap){  if (from.getRawType().equals(to.getRawType())) {    Type[] fromArgs=from.getActualTypeArguments();    Type[] toArgs=to.getActualTypeArguments();    for (int i=0; i < fromArgs.length; i++) {      if (!matches(fromArgs[i],toArgs[i],typeVarMap)) {        return false;      }    }    return true;  }  return false;}  }
class C{  public String write(CondensedView condensedView,boolean showFullInfo) throws IOException, TemplateException {  return write(condensedView,null,showFullInfo);}  }
class C{  private void install() throws Exception {  System.out.print("Installing pde " + release + "... ");  P2Model.DirectorApp directorApp=p2model().directorApp(getRootFolder(),"goomph-pde-bootstrap-" + release);  directorApp.bundlepool(GoomphCacheLocations.bundlePool());  directorApp.platform(SwtPlatform.getRunning());  directorApp.runUsingBootstrapper();  File bundleInfo=new File(getContentsEclipse(),"configuration/org.eclipse.equinox.simpleconfigurator/bundles.info");  Preconditions.checkArgument(bundleInfo.isFile(),"Needed to find the pde.build folder: %s",bundleInfo);  String pdeBuildLine=Files.readAllLines(bundleInfo.toPath()).stream().filter(null).findFirst().get();  String pdeBuildVersion=pdeBuildLine.split(",")[1];  pdeBuildFolder=new File(GoomphCacheLocations.bundlePool(),"plugins/org.eclipse.pde.build_" + pdeBuildVersion);  FileMisc.writeToken(getRootFolder(),TOKEN,pdeBuildFolder.getAbsolutePath());  System.out.println("Success.");}  }
class C{  public ExceptionalUnitGraph(Body body,ThrowAnalysis throwAnalysis,boolean omitExceptingUnitEdges){  super(body);  initialize(throwAnalysis,omitExceptingUnitEdges);}  }
class C{  public MarketplaceRemovedException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:33.474 -0500",hash_original_method="2AE095A71557CBF993C4F4933FD42467",hash_generated_method="3DABC7C5ED360ECCBE47B7A30DD7BCCC") private void parseEfSpdi(byte[] data){  SimTlv tlv=new SimTlv(data,0,data.length);  byte[] plmnEntries=null;  for (; tlv.isValidObject(); tlv.nextObject()) {    if (tlv.getTag() == TAG_SPDI) {      tlv=new SimTlv(tlv.getData(),0,tlv.getData().length);    }    if (tlv.getTag() == TAG_SPDI_PLMN_LIST) {      plmnEntries=tlv.getData();      break;    }  }  if (plmnEntries == null) {    return;  }  spdiNetworks=new ArrayList<String>(plmnEntries.length / 3);  for (int i=0; i + 2 < plmnEntries.length; i+=3) {    String plmnCode;    plmnCode=IccUtils.bcdToString(plmnEntries,i,3);    if (plmnCode.length() >= 5) {      log("EF_SPDI network: " + plmnCode);      spdiNetworks.add(plmnCode);    }  }}  }
class C{  public final boolean isProtected(){  return Modifier.isProtected(getModifiers());}  }
class C{  private void handleDoubleClick(final MouseEvent event){  final IFunctionTreeNode selectedNode=(IFunctionTreeNode)TreeHelpers.getNodeAt(this,event.getX(),event.getY());  if (selectedNode == null) {    return;  }  selectedNode.doubleClicked();}  }
class C{  public static void main(String[] args) throws Exception {  initFiles(new File(SRC_DIR),new File("."),"pkg");  TestCRLineSeparator tester=new TestCRLineSeparator();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void deleteGroup(){  throw new RuntimeException("Not implemented!");}  }
class C{  public void showLikeQuickAction(){  showLikeQuickAction(0,0);}  }
class C{  public void check(final int api){}  }
class C{  protected String convertCharEntity(String charEntity){  try {    return HTMLUtils.convertCharEntity(charEntity,false,userDefinedCharEntities);  } catch (  IllegalArgumentException iae) {    notifyError(ParserCallback.ERROR_UNRECOGNIZED_CHAR_ENTITY,null,null,null,"Unrecognized char entity: " + charEntity);    return new StringBuilder().append('&').append(charEntity).append(';').toString();  }}  }
class C{  XSLTElementDef(XSLTSchema schema,String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject,boolean has_required,boolean required){  this(schema,namespace,name,nameAlias,elements,attributes,contentHandler,classObject,has_required);  this.m_required=required;}  }
class C{  public void animateFlash(){  mAnimationManager.startFlashAnimation(mFlashOverlay);}  }
class C{  public void ensureCapacity(int minCapacity){  elements=cern.colt.Arrays.ensureCapacity(elements,minCapacity);}  }
class C{  private <T extends Request,U extends Response>void test(T request,Consumer<U> callback) throws Throwable {  clientCtx.execute(null);  await();}  }
class C{  private static boolean isSeparator(char ch){  return ch == UNIX_SEPARATOR || ch == WINDOWS_SEPARATOR;}  }
class C{  void expandCapacity(int minimumCapacity){  int newCapacity=value.length * 2 + 2;  if (newCapacity - minimumCapacity < 0)   newCapacity=minimumCapacity;  if (newCapacity < 0) {    if (minimumCapacity < 0)     throw new OutOfMemoryError();    newCapacity=Integer.MAX_VALUE;  }  value=Arrays.copyOf(value,newCapacity);}  }
class C{  private void mergeData() throws Exception {  log.info("mergeData");  String sql="SELECT rt.AD_Table_ID, rt.ReplicationType, t.TableName, rt.AD_ReplicationTable_ID " + "FROM AD_ReplicationTable rt" + " INNER JOIN AD_Table t ON (rt.AD_Table_ID=t.AD_Table_ID) "+ "WHERE rt.IsActive='Y' AND t.IsActive='Y'"+ " AND AD_ReplicationStrategy_ID=?"+ " AND rt.ReplicationType='M' "+ "ORDER BY t.LoadSeq";  RowSet rowset=getRowSet(sql,new Object[]{new Integer(m_replication.getAD_ReplicationStrategy_ID())});  try {    while (rowset.next())     mergeDataTable(rowset.getInt(1),rowset.getString(3),rowset.getInt(4));    rowset.close();    rowset=null;  } catch (  SQLException ex) {    log.log(Level.SEVERE,"mergeData",ex);    m_replicated=false;  }}  }
class C{  public boolean tenantHasUsageACL(URI tenantUri,ComputeVirtualPool computeVirtualPool){  if (_disabler != null) {    return true;  }  if (CollectionUtils.isEmpty(computeVirtualPool.getAcls())) {    return true;  }  Set<String> acls=computeVirtualPool.getAclSet(new PermissionsKey(PermissionsKey.Type.TENANT,tenantUri.toString(),computeVirtualPool.getSystemType()).toString());  if (acls != null && acls.contains(ACL.USE.toString())) {    return true;  }  return false;}  }
class C{  protected Element writeDoubleToXML(Element parent,double o,String name) throws Exception {  Element node;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  node=addElement(parent,name,Double.TYPE.getName(),true);  node.appendChild(node.getOwnerDocument().createTextNode(new Double(o).toString()));  return node;}  }
class C{  MultipartStream(InputStream input,byte[] boundary){  this(input,boundary,DEFAULT_BUFSIZE);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void ensureDirectory(String... filePaths){  if (filePaths != null) {    File file;    for (    String filePath : filePaths) {      file=new File(filePath);      if (file.exists() && !file.isDirectory()) {        throw new IllegalArgumentException("Given path is not a directory: " + file.getAbsolutePath());      } else       if (!file.exists()) {        if (!file.mkdirs()) {          throw new IllegalStateException("Could not create directory: " + file.getAbsolutePath());        }      }    }  }}  }
class C{  public boolean isStart(){switch (compareType) {case Comparison.EQUAL:case Comparison.EQUAL_NULL_SAFE:case Comparison.BIGGER_EQUAL:case Comparison.BIGGER:    return true;default :  return false;}}  }
class C{  public FilterJoinBuilder query(QueryBuilder query){  this.query=query;  return this;}  }
class C{  public void testPBEKeySpec1(){  try {    PBEKeySpec pbeks=new PBEKeySpec(null);    assertTrue("An empty char[] should be used in case of null " + "char array.",pbeks.getPassword().length == 0);  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }  char[] password=new char[]{'1','2','3','4','5'};  PBEKeySpec pbeks=new PBEKeySpec(password);  password[0]++;  assertFalse("The change of password specified in the constructor " + "should not cause the change of internal array.",password[0] == pbeks.getPassword()[0]);}  }
class C{  public void update(){  if (this.field_147670_k.isDead) {    this.donePlaying=true;  } else {    this.xPosF=(float)this.field_147670_k.posX;    this.yPosF=(float)this.field_147670_k.posY;    this.zPosF=(float)this.field_147670_k.posZ;    float f=MathHelper.sqrt_double(this.field_147670_k.motionX * this.field_147670_k.motionX + this.field_147670_k.motionZ * this.field_147670_k.motionZ);    if ((double)f >= 0.01D) {      this.field_147669_l=MathHelper.clamp_float(this.field_147669_l + 0.0025F,0.0F,1.0F);      this.volume=0.0F + MathHelper.clamp_float(f,0.0F,0.5F) * 0.7F;    } else {      this.field_147669_l=0.0F;      this.volume=0.0F;    }  }}  }
class C{  private void loadAdminUsersId(DbConnection dbConn) throws Exception {  DynamicTable tableInfo=new DynamicTable();  DynamicRows rowsInfo=new DynamicRows();  DynamicRow rowInfo=new DynamicRow();  LdapUsersTable table=new LdapUsersTable();  UsersTable usrTbl=new UsersTable();  int counter;  BasicUserImpl user;  String qual;  try {    if (_isLdap) {      tableInfo.setTableObject(table);      tableInfo.setClassName(LdapUsersTable.class.getName());      qual=table.getLoadAminUsersQual(UserDefs.PRODUCT_IDOC);    } else {      tableInfo.setTableObject(usrTbl);      tableInfo.setClassName(UsersTable.class.getName());      qual=usrTbl.getLoadAminUsersQual(UserDefs.PRODUCT_IDOC);    }    tableInfo.setTablesMethod("getUserAdminTableNames");    tableInfo.setColumnsMethod("getAdminUserColumnNames");    rowInfo=new DynamicRow();    rowsInfo=new DynamicRows();    rowInfo.setClassName(BasicUserImpl.class.getName());    rowInfo.setValuesMethod("loadValues");    rowsInfo.add(rowInfo);    DynamicFns.selectMultiple(dbConn,qual,true,tableInfo,rowsInfo);    for (counter=0; counter < rowInfo.getRowCount(); counter++) {      user=(BasicUserImpl)rowInfo.getRow(counter);      _adminUsers.add(user);    }  } catch (  Exception e) {    _logger.error(e);    throw e;  }}  }
class C{  public static void registerCompilerAdvice(List<CompilerAdviceAttribute> compilerAdviceList){  if (compilerAdviceList == null)   return;  hasAdvice=true;  ListIterator<CompilerAdviceAttribute> it=compilerAdviceList.listIterator();  while (it.hasNext()) {    CompilerAdviceAttribute attr=it.next();    attribMap.put(attr,attr);  }}  }
class C{  @Ignore @Test public void testAttendingtoQuestion1NotDoneQuestmessage(){  for (  final String playerSays : ConversationPhrases.QUEST_MESSAGES) {    final Player player=PlayerTestHelper.createPlayer("bob");    player.setQuest(QUEST_SLOT,"");    npcEngine.setCurrentState(ATTENDING);    npcEngine.step(player,playerSays);    assertThat(playerSays,getReply(npc),is("As you already know, I seek elvish #equipment."));    assertThat(playerSays,npcEngine.getCurrentState(),is(QUESTION_1));  }}  }
class C{  public void incEventsExpired(){  this._stats.incLong(_eventsExpiredId,1);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public void add(final int currentArticleID,final long startTime,final long endTime,final List<ArticleIndexData> infoList){  if (!infoList.isEmpty()) {    StringBuilder fullRevBuffer=new StringBuilder();    StringBuilder revCountBuffer=new StringBuilder();    boolean first=true;    ArticleIndexData info;    while (!infoList.isEmpty()) {      info=infoList.remove(0);      if (!first) {        fullRevBuffer.append(" ");        revCountBuffer.append(" ");      }      fullRevBuffer.append(info.getFullRevisionPrimaryKey());      revCountBuffer.append(info.getStartRevisionCount());      revCountBuffer.append(" ");      revCountBuffer.append(info.getEndRevisionCount());      first=false;    }    boolean sql=!insertStatement.isEmpty();    if (buffer.length() + fullRevBuffer.length() + revCountBuffer.length()+ 20 >= MAX_ALLOWED_PACKET) {      storeBuffer();    }    if (sql) {      if (buffer.length() > insertStatement.length()) {        buffer.append(",");      }      buffer.append("(");    }    buffer.append(currentArticleID);    buffer.append(",");    buffer.append(sql ? "\'" : "\"");    buffer.append(fullRevBuffer);    buffer.append(sql ? "\'" : "\"");    buffer.append(",");    buffer.append(sql ? "\'" : "\"");    buffer.append(revCountBuffer);    buffer.append(sql ? "\'" : "\"");    buffer.append(",");    buffer.append(startTime);    buffer.append(",");    buffer.append(endTime);    if (sql) {      buffer.append(")");    } else {      buffer.append("\n");    }  }}  }
class C{  public static boolean isLevelFine(){  return Level.FINE.intValue() >= s_currentLevel.intValue();}  }
class C{  public void test_Constructor_java_math_BigInteger_int(){  BigInteger value=new BigInteger("12345908");  BigDecimal big=new BigDecimal(value);  assertTrue("the BigDecimal value is not initialized properly",big.unscaledValue().equals(value) && big.scale() == 0);  BigInteger value2=new BigInteger("12334560000");  BigDecimal big2=new BigDecimal(value2,5);  assertTrue("the BigDecimal value is not initialized properly",big2.unscaledValue().equals(value2) && big2.scale() == 5);  assertTrue("the BigDecimal value is not represented properly",big2.toString().equals("123345.60000"));}  }
class C{  public MersenneTwister64(){  super();}  }
class C{  public static String xmlTransformFromTemplate(boolean includeSwfParent) throws Exception {  DocumentBuilder docb=DocumentBuilderFactory.newInstance().newDocumentBuilder();  Document doc=docb.parse(new File(model_file));  NodeList nl=null;  String justSwf=getSwfName(swffile,false);  String appid=justSwf.substring(0,justSwf.indexOf(".swf")).replace("_","");  String content=getSwfName(swffile,includeSwfParent);  nl=doc.getElementsByTagName("content");  if (nl.item(0).getFirstChild() == null) {    Text t=doc.createTextNode(content);    nl.item(0).appendChild(t);  } else   nl.item(0).getFirstChild().setNodeValue(content);  nl=doc.getElementsByTagName("filename");  if (nl.item(0).getFirstChild() == null) {    Text ft=doc.createTextNode(appid);    nl.item(0).appendChild(ft);  } else {    nl.item(0).getFirstChild().setNodeValue(appid);  }  nl=doc.getElementsByTagName("id");  if (nl.item(0).getFirstChild() == null) {    Text it=doc.createTextNode(appid);    nl.item(0).appendChild(it);  } else   nl.item(0).getFirstChild().setNodeValue(appid);  nl=doc.getElementsByTagName("versionNumber");  if (nl != null && nl.item(0) != null) {    if (nl.item(0).getFirstChild() == null) {      Text vit=doc.createTextNode("1.0.0");      nl.item(0).appendChild(vit);    } else {      nl.item(0).getFirstChild().setNodeValue("1.0.0");    }  }  if (deviceName != null) {    if (MobileUtil.getOSForDevice(deviceName).compareToIgnoreCase(MobileUtil.ANDROID_OS) == 0) {      nl=doc.getElementsByTagName("application");      Element el=doc.createElement("android");      Node el2=el.appendChild(doc.createElement("manifestAdditions"));      el2.appendChild(doc.createCDATASection("\n\t<manifest>" + "\n\t\t<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />" + "\n\t\t<uses-permission android:name=\"android.permission.INTERNET\" />"+ "\n\t\t<uses-permission android:name=\"android.permission.WAKE_LOCK\" />"+ "\n\t\t<uses-permission android:name=\"android.permission.DISABLE_KEYGUARD\" />"+ "\n\t\t<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />"+ "\n\t\t<uses-permission android:name=\"android.permission.READ_PHONE_STATE\" />"+ "\n\t\t<uses-permission android:name=\"android.permission.CAMERA\" />"+ "\n\t\t<uses-permission android:name=\"android.permission.RECORD_AUDIO\" />"+ "\n\t</manifest>\n"));      nl.item(0).appendChild(el);      Element colorDepth=doc.createElement("colorDepth");      Text colorDepthVal=doc.createTextNode("16bit");      colorDepth.appendChild(colorDepthVal);      el.appendChild(colorDepth);      Element softKeyboardBehavior=doc.createElement("softKeyboardBehavior");      Text softKeyboardBehaviorVal=doc.createTextNode("none");      softKeyboardBehavior.appendChild(softKeyboardBehaviorVal);      nl=doc.getElementsByTagName("initialWindow");      nl.item(0).appendChild(softKeyboardBehavior);    }  }  if (deviceName != null) {    if (MobileUtil.getOSForDevice(deviceName).compareToIgnoreCase(MobileUtil.IOS) == 0) {      Element fullScreen=doc.createElement("fullScreen");      Text fullScreenVal=doc.createTextNode("true");      fullScreen.appendChild(fullScreenVal);      Element autoOrients=doc.createElement("autoOrients");      Text autoOrientsVal=doc.createTextNode("true");      autoOrients.appendChild(autoOrientsVal);      Element aspectRatio=doc.createElement("aspectRatio");      Text aspectRatioVal=doc.createTextNode("portrait");      aspectRatio.appendChild(aspectRatioVal);      Element renderMode=doc.createElement("renderMode");      Text renderModeVal=doc.createTextNode("cpu");      renderMode.appendChild(renderModeVal);      nl=doc.getElementsByTagName("initialWindow");      nl.item(0).appendChild(fullScreen);      nl.item(0).appendChild(autoOrients);      nl.item(0).appendChild(aspectRatio);      nl.item(0).appendChild(renderMode);      nl=doc.getElementsByTagName("application");      Element el=doc.createElement("iPhone");      Node el2=el.appendChild(doc.createElement("InfoAdditions"));      el2.appendChild(doc.createCDATASection("\n\t<key>UIDeviceFamily</key>" + "\n\t\t<array>" + "\n\t\t\t<string>1</string>"+ "\n\t\t\t<string>2</string>"+ "\n\t\t</array>"+ "\n\t\t<key>UIStatusBarStyle</key>"+ "\n\t\t<string>UIStatusBarStyleBlackOpaque</string>"+ "\n\t\t<key>UIRequiresPersistentWiFi</key>"+ "\n\t\t<string>YES</string>"));      nl.item(0).appendChild(el);      nl=doc.getElementsByTagName("iPhone");      Element reqDisplayRes=doc.createElement("requestedDisplayResolution");      Text reqDisplayResVal=doc.createTextNode("high");      reqDisplayRes.appendChild(reqDisplayResVal);      nl.item(0).appendChild(reqDisplayRes);    }  }  if (deviceName != null) {    if (MobileUtil.getOSForDevice(deviceName).compareToIgnoreCase(MobileUtil.QNX) == 0) {      String appName=appid;      if (appName.length() > 25) {        appName=appName.substring(0,25);      }      nl=doc.getElementsByTagName("name");      if (nl.item(0).getFirstChild() == null) {        Text nameNode=doc.createTextNode(appName);        nl.item(0).appendChild(nameNode);      } else       nl.item(0).getFirstChild().setNodeValue(appName);    }  }  Element sysChrome=doc.createElement("systemChrome");  Text chrome=doc.createTextNode("none");  sysChrome.appendChild(chrome);  Element trans=doc.createElement("transparent");  Text transt=doc.createTextNode("true");  trans.appendChild(transt);  Element viz=doc.createElement("visible");  Text transv=doc.createTextNode("true");  viz.appendChild(transv);  nl=doc.getElementsByTagName("initialWindow");  nl.item(0).appendChild(sysChrome);  nl.item(0).appendChild(trans);  nl.item(0).appendChild(viz);  Transformer transformer=TransformerFactory.newInstance().newTransformer();  transformer.setOutputProperty(OutputKeys.INDENT,"yes");  StreamResult result=new StreamResult(new StringWriter());  DOMSource source=new DOMSource(doc);  transformer.transform(source,result);  String xmlString=result.getWriter().toString();  return xmlString;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.116 -0500",hash_original_method="D5E9C32F4CCF731A5E6B245C708DE511",hash_generated_method="7CAFCB792CC3B4196FB5C37A1486828D") public void gc(){}  }
class C{  public SimpleCache(String id,String file,long expireTime){  this.id=id;  this.file=Paths.get(file);  this.expireTime=expireTime;}  }
class C{  public int execute(String sql,CreateTable create,String index) throws SQLException {  String[] indexAndType=this.getIndexAndType(create.getName().toString(),sql,"table\\s+","\\s+\\(",index);  index=indexAndType[0];  String type=indexAndType[1];  if (index == null)   throw new SQLException("No index & type combination specified, please use 'CREATE TABLE [index.type]' ");  StringBuilder sb=new StringBuilder();  sb.append("{");  boolean templatesAdded=false;  if (create.getProperties().size() >= 0) {    Map<String,Expression> props=create.getProperties();    if (props.containsKey("dynamic_templates")) {      sb.append("dynamic_templates:" + removeEnclosingQuotes(props.get("dynamic_templates").toString()));      templatesAdded=true;    }  }  if (templatesAdded)   sb.append(", ");  sb.append("properties:{");  List<TableElement> fields=create.getElements();  for (int i=0; i < fields.size(); i++) {    TableElement field=fields.get(i);    if (field.getName().equals("_id") || field.getName().equals("_type"))     continue;    sb.append(field.getName() + ":{" + field.getType()+ "}");    if (i < fields.size() - 1)     sb.append(", ");  }  sb.append("}}");  String json=sb.toString().replaceAll("([\\[|{|,|:]\\s)*([\\w|\\-|\\*]+)(\\s*[\\]|}|:|,])","$1\"$2\"$3");  boolean indexExists=client.admin().indices().exists(new IndicesExistsRequest(index)).actionGet().isExists();  if (!indexExists) {    CreateIndexResponse response=client.admin().indices().prepareCreate(index).addMapping(type,json).get();    if (!response.isAcknowledged())     throw new SQLException("Table creation failed because database '" + index + "' could not be created");  } else {    PutMappingResponse response=client.admin().indices().preparePutMapping(index).setType(type).setSource(json).execute().actionGet();    if (!response.isAcknowledged())     throw new SQLException("Table creation failed due to unknown reason");  }  this.statement.getConnection().getTypeMap();  return 0;}  }
class C{  public Set possibleTypes(){  return types;}  }
class C{  public void focusLost(FocusEvent e){  if (e.isTemporary())   return;  log.info("PosSubProduct - focusLost");  findProduct();  p_posPanel.updateInfo();}  }
class C{  public RedirectEvent(String location){  super(Event.REDIRECT);  LOG.entering(CLASS_NAME,"<init>",new Object[]{type,location});  this.location=location;}  }
class C{  public void importRollbackHandler(Object[] args){  URI importVolumeURI=(URI)args[0];  URI createVolumeURI=(URI)args[1];  URI vplexVolumeURI=(URI)args[2];  Volume vplexVolume=_dbClient.queryObject(Volume.class,vplexVolumeURI);  if (importVolumeURI != null) {    _dbClient.markForDeletion(vplexVolume);  } else {  }}  }
class C{  public double eval(double params[]){  return (1.0 / params[0]);}  }
class C{  public boolean forEachKey(LongProcedure procedure){  for (int i=table.length; i-- > 0; ) {    if (state[i] == FULL)     if (!procedure.apply(table[i]))     return false;  }  return true;}  }
class C{  public Timeline takeTimelineMin(final Timeline.Order order,final int minsize,final int maxsize){  if (timelineSize() < minsize)   return new Timeline(order);  Timeline tl=new Timeline(order);  try {    while (this.pushToBackendTimeline.size() > 0) {      Timeline tl0=this.pushToBackendTimeline.take();      if (tl0 == null)       return tl;      tl.putAll(tl0);      if (tl.size() >= maxsize)       break;    }    return tl;  } catch (  InterruptedException e) {    return tl;  }}  }
class C{  public boolean remove(HDR obj){  if (hlist.size() == 0)   return false; else   return hlist.remove(obj);}  }
class C{  String readNumber(String source,int ofs,String token,boolean adjacent){  if (adjacent) {    return source.substring(ofs,ofs + token.length());  }  int len=source.length();  for (int i=ofs; i < len; i++) {    char ch=source.charAt(i);    if (isNumeric(ch) == false) {      if (i == 0) {        return null;      }      return source.substring(ofs,i);    }  }  return source.substring(ofs);}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  audio=(AudioManager)getSystemService(Context.AUDIO_SERVICE);  Intent intent=getIntent();  mScreenSizeMultiplier=1;  mExtraName=intent.getStringExtra("name");  mExtraHost=intent.getStringExtra("host");  mExtraUsername=intent.getStringExtra("username");  mExtraPassword=intent.getStringExtra("password");  mExtraColorMode=intent.getStringExtra("colormode");  mExtraViewerMode=intent.getBooleanExtra("viewonly",false);  prefFuseLength=PreferenceManager.getDefaultSharedPreferences(this).getInt("pref_fuseTimeout",1500);  prefShowEnvString=PreferenceManager.getDefaultSharedPreferences(this).getString("pref_showEnv","Home Theater");  prefShowEnv=false;  try {    String c=PreferenceManager.getDefaultSharedPreferences(this).getString("pref_bgColor","black");    bgColor=Color.parseColor(c);  } catch (  IllegalArgumentException e) {    bgColor=Color.parseColor("black");  }  mScreenDistance=1;  mScreenSize=1f;  mCurvedScreen=PreferenceManager.getDefaultSharedPreferences(this).getBoolean("pref_curvedScreen",true);  mMagnify=PreferenceManager.getDefaultSharedPreferences(this).getBoolean("pref_magnify",true);  r=Color.red(bgColor) / 255f;  g=Color.green(bgColor) / 255f;  b=Color.blue(bgColor) / 255f;  a=Color.alpha(bgColor) / 255f;  setContentView(R.layout.common_ui);  MyCardboardView cardboardView=(MyCardboardView)findViewById(R.id.cardboard_view);  cardboardView.setRestoreGLStateEnabled(false);  cardboardView.setRenderer(this);  setCardboardView(cardboardView);  engine=new Engine(getResources());  aimPoint=new Cursor(engine);  if (PreferenceManager.getDefaultSharedPreferences(this).getBoolean("pref_UseFuse",true))   fuseStart=-1;  if (prefShowEnv) {    bgEnv=new EnvironmentThing(engine);  }  buttonList=new ArrayList<>();  uiBackGround=new ButtonThing(engine);  uiBackGround.setName("bg");  magnifyButton=new ButtonThing(engine);  magnifyButton.setOnTriggerListener(this);  screenModeButton=new StateButton(engine);  screenModeButton.setOnTriggerListener(this);  exitButton=new ButtonThing(engine);  exitButton.setName("stop");  exitButton.setOnTriggerListener(this);  buttonList.add(exitButton);  buttonList.add(magnifyButton);  buttonList.add(screenModeButton);  mCamera=new float[16];  mView=new float[16];  mModelViewProjection=new float[16];  mModelView=new float[16];  mHeadViewSDK=new float[16];  mHeadViewUse=new float[16];  mOffsetView=new float[16];  Matrix.setIdentityM(mOffsetView,0);  Matrix.setIdentityM(mHeadViewSDK,0);  Matrix.setIdentityM(mHeadViewUse,0);  prefOrientationProviderString=PreferenceManager.getDefaultSharedPreferences(this).getString("pref_orientationProvider","0");  if (prefOrientationProviderString.equals("1"))   cardboardView.setUseManual(true); else {    SensorManager sensorManager=(SensorManager)getSystemService(this.SENSOR_SERVICE);    if (prefOrientationProviderString.equals("2")) {      orientationProvider=new ImprovedOrientationSensor2Provider(sensorManager);      Matrix.rotateM(mOffsetView,0,90,1,0,0);    } else     if (prefOrientationProviderString.equals("3")) {      orientationProvider=new CalibratedGyroscopeProvider(sensorManager);      Matrix.rotateM(mOffsetView,0,90,0,0,1);    }  }  mVibrator=(Vibrator)getSystemService(Context.VIBRATOR_SERVICE);  mOverlayView=(CardboardOverlayView)findViewById(R.id.overlay);  cameraPreview=new CameraScreen(engine,this);  Intent returnIntent=new Intent();  setResult(RESULT_OK,returnIntent);  mMetrics=getResources().getDisplayMetrics();}  }
class C{  private SnmpPduPacket makeGetSetResponsePdu(SnmpPduRequest req,Object userData){  if (req.varBindList == null) {    return newValidResponsePdu(req,null);  }  splitRequest(req);  int nbSubRequest=subs.size();  if (nbSubRequest == 1)   return turboProcessingGetSet(req,userData);  SnmpPduPacket result=executeSubRequest(req,userData);  if (result != null)   return result;  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINER)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINER,dbgTag,"makeGetSetResponsePdu","Build the unified response for request " + req.requestId);  }  return mergeResponses(req);}  }
class C{  private boolean readHeader(ReadStream is,int length,int flags,int streamId) throws IOException {  if (!onPeerOpen()) {    log.warning("peer-open failed " + this);    return false;  }  if (streamId <= 0) {    throw new IllegalStateException("Invalid stream: " + streamId);  }  ChannelHttp2 channel=_conn.getChannel(streamId);  InRequest request;  if (channel != null) {    request=channel.getRequest();  } else {    request=_inHandler.newInRequest();  }  if (!_inHeader.readHeaders(request,length,flags)) {    return false;  }  if (channel == null) {    channel=request.channel();    channel.init(_conn,streamId);  }  channel.onHeader(streamId);  channel.getInChannel().addReceiveCredit(_settings.initialWindowSize());  request.dispatch();  boolean isEndStream=(flags & Http2Constants.END_STREAM) != 0;  if (isEndStream) {    channel.closeRead();    if (onCloseStream() <= 0) {      _inHandler.onGoAway();    }  }  return true;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private static byte[] makeIvfFrameHeader(int size,long timestamp){  byte[] frameHeader=new byte[12];  lay32Bits(frameHeader,0,size);  lay64bits(frameHeader,4,timestamp);  return frameHeader;}  }
class C{  public void updateBoosts(String boostDef){  if (boostDef == null || boostDef.length() == 0)   return;  String[] bf=CommonPattern.COMMA.split(boostDef);  this.queryFields=null;  this.fieldBoosts.clear();  for (  String boost : bf) {    int p=boost.indexOf('^');    if (p < 0)     continue;    String boostkey=boost.substring(0,p);    try {      CollectionSchema field=CollectionSchema.valueOf(boostkey);      Float factor=Float.parseFloat(boost.substring(p + 1));      this.fieldBoosts.put(field,factor);    } catch (    IllegalArgumentException e) {      ConcurrentLog.warn("Ranking","unknwon boost key '" + boostkey + "'");    }  }}  }
class C{  @Override protected EClass findInstantiableCompatible(EClass eType){  if (!isInstantiatableSubType(eType,eType)) {    throw new IllegalStateException(String.valueOf(eType));  }  return eType;}  }
class C{  public static void main(String[] args){  jh61b.junit.textui.runClasses(TestGoalOne.class);}  }
class C{  private Response<Bitmap> doParse(NetworkResponse response){  byte[] data=response.data;  BitmapFactory.Options decodeOptions=new BitmapFactory.Options();  Bitmap bitmap=null;  if (mMaxWidth == 0 && mMaxHeight == 0) {    decodeOptions.inPreferredConfig=mDecodeConfig;    bitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);  } else {    decodeOptions.inJustDecodeBounds=true;    BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    int actualWidth=decodeOptions.outWidth;    int actualHeight=decodeOptions.outHeight;    int desiredWidth=getResizedDimension(mMaxWidth,mMaxHeight,actualWidth,actualHeight);    int desiredHeight=getResizedDimension(mMaxHeight,mMaxWidth,actualHeight,actualWidth);    decodeOptions.inJustDecodeBounds=false;    decodeOptions.inSampleSize=findBestSampleSize(actualWidth,actualHeight,desiredWidth,desiredHeight);    Bitmap tempBitmap=BitmapFactory.decodeByteArray(data,0,data.length,decodeOptions);    if (tempBitmap != null && (tempBitmap.getWidth() > desiredWidth || tempBitmap.getHeight() > desiredHeight)) {      bitmap=Bitmap.createScaledBitmap(tempBitmap,desiredWidth,desiredHeight,true);      tempBitmap.recycle();    } else {      bitmap=tempBitmap;    }  }  if (bitmap == null) {    return Response.error(new ParseError(response));  } else {    return Response.success(bitmap,HttpHeaderParser.parseCacheHeaders(response));  }}  }
class C{  public static long[] toLongArray(byte[] array){  long[] result=new long[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(long)array[i];  }  return result;}  }
class C{  private void writeTypicalAndMinimumActivityDurations(final String configFile){  Config config=new Config();  config.addCoreModules();  ConfigReader reader=new ConfigReader(config);  reader.readFile(configFile);  SortedMap<String,Double> act2TypDur=new TreeMap<>();  SortedMap<String,Double> act2MinDur=new TreeMap<>();  for (  String actTyp : config.planCalcScore().getActivityTypes()) {    act2TypDur.put(actTyp,config.planCalcScore().getActivityParams(actTyp).getTypicalDuration());    act2MinDur.put(actTyp,config.planCalcScore().getActivityParams(actTyp).getMinimalDuration());  }  String fileName=outputDir + "/analysis/actTyp2TypicalAndMinimumActDurations.txt";  BufferedWriter writer=IOUtils.getBufferedWriter(fileName);  try {    writer.write("actType \t typicalActDuration \t minimumActDuration \n");    for (    String actTyp : act2MinDur.keySet()) {      writer.write(actTyp + "\t" + act2TypDur.get(actTyp)+ "\t"+ act2MinDur.get(actTyp)+ "\n");    }    writer.close();  } catch (  Exception e) {    throw new RuntimeException("Data is not written. Reason - " + e);  }  ActivityType2DurationHandler.LOG.info("Data is written to file " + fileName);}  }
class C{  public boolean hasValue(){  return super.hasTextValue();}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  for (int k=0; k < segments.length; ++k) {    Segment<V> seg=segments[k];    seg.lock();    try {      HashEntry<V>[] tab=seg.table;      for (int i=0; i < tab.length; ++i) {        for (HashEntry<V> e=tab[i]; e != null; e=e.next) {          s.writeObject(e.key);          s.writeObject(e.value);        }      }    }  finally {      seg.unlock();    }  }  s.writeObject(null);  s.writeObject(null);}  }
class C{  @Override public String toString(){  String ifCmpString="??";  if ((ifCmpInstr != null) && (IfCmp.conforms(ifCmpInstr))) {    ifCmpString=IfCmp.getCond(ifCmpInstr).toString();  }  return ("// pred: " + predecessor + "\n"+ "loop : "+ initialIteratorValue+ ";\n"+ "head {"+ header+ "}:\n"+ "   "+ phiLoopIterator+ "=phi("+ initialIteratorValue+ ","+ carriedLoopIterator+ ");\n"+ "   "+ carriedLoopIterator+ "="+ phiLoopIterator+ "+"+ strideValue+ ";\n"+ "// blocks: "+ loop+ "\n"+ "exit {"+ exit+ "}:\n"+ "   if("+ carriedLoopIterator+ " "+ ifCmpString+ " "+ terminalIteratorValue+ ")\n"+ "      goto head;\n"+ "// succ: "+ successor+ "\n");}  }
class C{  public static int calcHash(char[] buffer,int start,int len){  int hash=(int)buffer[0];  for (int i=1; i < len; ++i) {    hash=(hash * 31) + (int)buffer[i];  }  return hash;}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 2:case 1:    return true;default :  break;}return false;}  }
class C{  public void run(){  try {    Debug.message("link","*** LinkListener starting up ***");    setListening(true);    listen();    Debug.message("link","...done listening");  } catch (  java.io.IOException ioe) {    if (Debug.debugging("link")) {      Debug.error(ioe.getMessage());    }    Debug.message("link","LinkListener: Server disconnected");  }  layer.setListener(null);}  }
class C{  public FloodlightModuleContext(FloodlightModuleLoader moduleLoader){  serviceMap=new HashMap<Class<? extends IFloodlightService>,IFloodlightService>();  configParams=new HashMap<Class<? extends IFloodlightModule>,Map<String,String>>();  this.moduleLoader=moduleLoader;}  }
class C{  public void close(){  if (m_PreparedStatement != null) {    try {      m_PreparedStatement.close();      m_PreparedStatement=null;    } catch (    Exception e) {    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean hasHoneycomb(){  return Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB;}  }
class C{  public boolean toggleAlwaysTranslateLanguageState(boolean value){  if (mOptions[NEVER_LANGUAGE] && value) {    return false;  }  return toggleState(ALWAYS_LANGUAGE,value);}  }
class C{  public ByteArrayOutputStream(){  this(32);}  }
class C{  public EquationDefinition basicGetRef(){  return ref;}  }
class C{  @Override public int size(){  return size;}  }
class C{  RangeMarkerWindow(@NotNull DocumentWindow documentWindow,RangeMarkerEx hostMarker,int startShift,int endShift){  myDocumentWindow=documentWindow;  myHostMarker=hostMarker;  myStartShift=startShift;  myEndShift=endShift;}  }
class C{  public int read() throws IOException {  return read(tempBuf,0,1) == -1 ? -1 : (tempBuf[0] & 0xFF);}  }
class C{  protected MimeBodyPart createTextMsg(Mail originalMail) throws MessagingException {  MimeBodyPart part1=new MimeBodyPart();  StringWriter sout=new StringWriter();  PrintWriter out=new PrintWriter(sout,true);  String machine;  try {    InetAddress me=InetAddress.getLocalHost();    machine=me.getHostName();  } catch (  Exception e) {    machine="[address unknown]";  }  StringBuilder bounceBuffer=new StringBuilder(128).append(messageString);  int m_idx_begin=messageString.indexOf(MACHINE_PATTERN);  if (m_idx_begin != -1) {    bounceBuffer.replace(m_idx_begin,m_idx_begin + MACHINE_PATTERN.length(),machine);  }  out.println(bounceBuffer.toString());  out.println("Failed recipient(s):");  for (  MailAddress mailAddress : originalMail.getRecipients()) {    out.println(mailAddress);  }  String ex=(String)originalMail.getAttribute("delivery-error");  out.println();  out.println("Error message:");  out.println(ex);  out.println();  part1.setText(sout.toString());  return part1;}  }
class C{  public MainPagePanel(){}  }
class C{  public static final double correlation(double y1[],double y2[],int n){  int i;  double av1=0.0, av2=0.0, y11=0.0, y22=0.0, y12=0.0, c;  if (n <= 1) {    return 1.0;  }  for (i=0; i < n; i++) {    av1+=y1[i];    av2+=y2[i];  }  av1/=n;  av2/=n;  for (i=0; i < n; i++) {    y11+=(y1[i] - av1) * (y1[i] - av1);    y22+=(y2[i] - av2) * (y2[i] - av2);    y12+=(y1[i] - av1) * (y2[i] - av2);  }  if (y11 * y22 == 0.0) {    c=1.0;  } else {    c=y12 / Math.sqrt(Math.abs(y11 * y22));  }  return c;}  }
class C{  private void createRasterizerTextures(){  this.positionTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,positionTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);  this.normalTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,normalTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA16F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  @Override public int hitcount(){  return this.hitcount;}  }
class C{  public TypeSerializer findPropertyTypeSerializer(JavaType baseType,SerializationConfig config,AnnotatedMember accessor,BeanProperty property) throws JsonMappingException {  AnnotationIntrospector ai=config.getAnnotationIntrospector();  TypeResolverBuilder<?> b=ai.findPropertyTypeResolver(config,accessor,baseType);  if (b == null) {    return createTypeSerializer(config,baseType,property);  }  Collection<NamedType> subtypes=config.getSubtypeResolver().collectAndResolveSubtypes(accessor,config,ai);  return b.buildTypeSerializer(config,baseType,subtypes,property);}  }
class C{  public static void saveLogToDB(ProcessInfo pi){  ProcessInfoLog[] logs=pi.getLogs();  if (logs == null || logs.length == 0) {    return;  }  if (pi.getAD_PInstance_ID() == 0) {    return;  }  for (int i=0; i < logs.length; i++) {    StringBuffer sql=new StringBuffer("INSERT INTO AD_PInstance_Log " + "(AD_PInstance_ID, Log_ID, P_Date, P_ID, P_Number, P_Msg)" + " VALUES (");    sql.append(pi.getAD_PInstance_ID()).append(",").append(logs[i].getLog_ID()).append(",");    if (logs[i].getP_Date() == null)     sql.append("NULL,"); else     sql.append(DB.TO_DATE(logs[i].getP_Date(),false)).append(",");    if (logs[i].getP_ID() == 0)     sql.append("NULL,"); else     sql.append(logs[i].getP_ID()).append(",");    if (logs[i].getP_Number() == null)     sql.append("NULL,"); else     sql.append(logs[i].getP_Number()).append(",");    if (logs[i].getP_Msg() == null)     sql.append("NULL)"); else     sql.append(DB.TO_STRING(logs[i].getP_Msg(),2000)).append(")");    DB.executeUpdate(sql.toString(),null);  }  pi.setLogList(null);}  }
class C{  public void put(Text key,ParseText text,ParseData data){  put(key.toString(),text,data);}  }
class C{  protected void afterBuildFinished(Notification notification,BuildTaskDescriptor descriptor,SubscriptionHandler<String> buildStatusHandler,SubscriptionHandler<String> buildOutputHandler,final String successMessage,final String errorMessage,final String prefixConsole,BuildFinishedCallback buildFinishedCallback){  try {    messageBus.unsubscribe(BuilderExtension.BUILD_STATUS_CHANNEL + descriptor.getTaskId(),buildStatusHandler);  } catch (  Exception e) {    Log.error(BuilderAgent.class,e);  }  try {    messageBus.unsubscribe(BuilderExtension.BUILD_OUTPUT_CHANNEL + descriptor.getTaskId(),buildOutputHandler);  } catch (  Exception e) {    Log.error(BuilderAgent.class,e);  }  if (descriptor.getStatus() == BuildStatus.SUCCESSFUL) {    buildSuccessful(notification,successMessage,prefixConsole);  } else   if (descriptor.getStatus() == BuildStatus.FAILED) {    notification.setMessage(errorMessage);    notification.setStatus(FINISHED);    notification.setType(ERROR);    console.print(prefixConsole + "::" + errorMessage);  }  importZipResult(descriptor,buildFinishedCallback,notification,errorMessage);}  }
class C{  public boolean isSetA(){  return EncodingUtils.testBit(__isset_bitfield,__A_ISSET_ID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:29.161 -0500",hash_original_method="54E7131A3C39BD59A18A0ED51B306BB3",hash_generated_method="D579B0D15373BD7654C8DE6DBEC8A9F4") public final void layerProtocol(boolean secure){  if (!this.connected) {    throw new IllegalStateException("No layered protocol unless connected.");  }  this.layered=LayerType.LAYERED;  this.secure=secure;}  }
class C{  public double abs(){  return Math.sqrt(Math.pow(a,2) + Math.pow(b,2));}  }
class C{  private void notifyWatcher() throws IOException {  if (streamOpen) {    super.close();    streamOpen=false;    if (watcher != null) {      watcher.responseConsumed();    }  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final int scrollRange,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,scrollRange,0,DEFAULT_OVERSCROLL_SCALE,isTouchEvent);}  }
class C{  @Override public String globalInfo(){  return "This Bayes Network learning algorithm uses the general purpose search method " + "of simulated annealing to find a well scoring network structure.\n\n" + "For more information see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  public boolean isPanYEnabled(){  return mPanYEnabled;}  }
class C{  @SubscribeEvent public static void registerAllModels(ModelRegistryEvent event){  INSTANCE.registerFluidModels();  INSTANCE.registerBlockModels();  INSTANCE.registerItemModels();}  }
class C{  public static int endsWith(String[] searchStrings,String text){  int index=-1;  for (int i=0; i < searchStrings.length; i++) {    if (text.endsWith(searchStrings[i])) {      if (index == -1 || searchStrings[i].length() > searchStrings[index].length())       index=i;    }  }  return index;}  }
class C{  public OptionSet removeUriQuery(String argument){  getUriQuery().remove(argument);  return this;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:05.454 -0500",hash_original_method="EAF50CB5C0E6A8C8743BB0867CC2AAFE",hash_generated_method="4C604BF9D7599B29FC764F1927B989FB") public void draw(Canvas canvas,RectF location){  addTaint(location.getTaint());  canvas.addTaint(getTaint());}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void counters(HadoopCounters counters){  this.counters=counters;}  }
class C{  @SafeVarargs public static <T>T firstNonNull(T... objs){  for (int i=0; i < objs.length; i++) {    if (objs[i] != null)     return objs[i];  }  assertFail();  return null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @NonNull public static Bitmap toBitmapWithExactSize(@NonNull Drawable source,@NonNull DisplayMetrics metrics,int widthPx,int heightPx,int fallbackWidthPx,int fallbackHeightPx){  Rect prevBounds=source.copyBounds();  if (heightPx == 0 || widthPx == 0) {    int intrinsicWidth=source.getIntrinsicWidth();    int intrinsicHeight=source.getIntrinsicHeight();    intrinsicWidth=intrinsicWidth > 0 ? intrinsicWidth : prevBounds.width();    intrinsicHeight=intrinsicHeight > 0 ? intrinsicHeight : prevBounds.height();    if (heightPx == 0 && widthPx > 0 && intrinsicWidth > 0) {      heightPx=widthPx * intrinsicHeight / intrinsicWidth;    } else     if (heightPx >= 0 && widthPx == 0 && intrinsicHeight > 0) {      widthPx=heightPx * intrinsicWidth / intrinsicHeight;    }  }  int width=widthPx > 0 ? widthPx : fallbackWidthPx;  int height=heightPx > 0 ? heightPx : fallbackHeightPx;  Bitmap result=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  Canvas canvas=new Canvas(result);  canvas.setDensity(metrics.densityDpi);  source.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  source.draw(canvas);  source.setBounds(prevBounds);  return result;}  }
class C{  private <R>void visit(String prefix,Visitor<T,R> visitor,RadixTreeNode<T> parent,RadixTreeNode<T> node){  int numberOfMatchingCharacters=node.getNumberOfMatchingCharacters(prefix);  if (numberOfMatchingCharacters == prefix.length() && numberOfMatchingCharacters == node.getKey().length()) {    visitor.visit(prefix,parent,node);  } else   if (node.getKey().equals("") == true || (numberOfMatchingCharacters < prefix.length() && numberOfMatchingCharacters >= node.getKey().length())) {    String newText=prefix.substring(numberOfMatchingCharacters,prefix.length());    for (    RadixTreeNode<T> child : node.getChildern()) {      if (child.getKey().startsWith(newText.charAt(0) + "")) {        visit(newText,visitor,node,child);        break;      }    }  }}  }
class C{  public static void subtractInPlaceUnsafe(double[] x,double[] y){  for (int i=0; i < x.length; ++i) {    if (Double.isNaN(x[i] - y[i])) {      continue;    }    x[i]-=y[i];  }}  }
class C{  public void appendInt(int x){  elems=ArrayUtils.ensureCapacity(elems,length + 3);  elems[length]=(byte)((x >> 24) & 0xFF);  elems[length + 1]=(byte)((x >> 16) & 0xFF);  elems[length + 2]=(byte)((x >> 8) & 0xFF);  elems[length + 3]=(byte)((x) & 0xFF);  length=length + 4;}  }
class C{  public void redo(){  EditItem edit=mEditHistory.getNext();  if (edit == null) {    return;  }  Editable text=mEditText.getEditableText();  int start=edit.mmStart;  int end=start + (edit.mmBefore != null ? edit.mmBefore.length() : 0);  mIsUndoOrRedo=true;  text.replace(start,end,edit.mmAfter);  mIsUndoOrRedo=false;  for (  Object o : text.getSpans(0,text.length(),UnderlineSpan.class)) {    text.removeSpan(o);  }  Selection.setSelection(text,edit.mmAfter == null ? start : (start + edit.mmAfter.length()));}  }
class C{  public final void backSolveLUD(GMatrix LU,GVector b,GVector permutation){  int size=LU.nRow * LU.nCol;  double[] temp=new double[size];  double[] result=new double[size];  int[] row_perm=new int[b.size()];  int i, j;  if (LU.nRow != b.size()) {    throw new MatrixSizeException();  }  if (LU.nRow != permutation.size()) {    throw new MatrixSizeException();  }  if (LU.nRow != LU.nCol) {    throw new MatrixSizeException();  }  for (i=0; i < LU.nRow; i++) {    for (j=0; j < LU.nCol; j++) {      temp[i * LU.nCol + j]=LU.values[i][j];    }  }  for (i=0; i < LU.nRow; i++) {    result[i * LU.nCol]=b.values[i];  }  for (i=0; i < LU.nCol; i++) {    row_perm[i]=(int)permutation.values[i];  }  GMatrix.backSubstituteLU(LU.nRow,temp,row_perm,result);  for (i=0; i < LU.nRow; i++) {    this.values[i]=result[i * LU.nCol];  }}  }
class C{  private void convertFile(String traceFileName,String javaClassName,String script) throws IOException {  LineNumberReader reader=new LineNumberReader(IOUtils.getBufferedReader(FileUtils.newInputStream(traceFileName)));  PrintWriter javaWriter=new PrintWriter(IOUtils.getBufferedWriter(FileUtils.newOutputStream(javaClassName + ".java",false)));  PrintWriter scriptWriter=new PrintWriter(IOUtils.getBufferedWriter(FileUtils.newOutputStream(script,false)));  javaWriter.println("import java.io.*;");  javaWriter.println("import java.sql.*;");  javaWriter.println("import java.math.*;");  javaWriter.println("import java.util.Calendar;");  String cn=javaClassName.replace('\\','/');  int idx=cn.lastIndexOf('/');  if (idx > 0) {    cn=cn.substring(idx + 1);  }  javaWriter.println("public class " + cn + " {");  javaWriter.println("    public static void main(String... args) " + "throws Exception {");  javaWriter.println("        Class.forName(\"org.h2.Driver\");");  while (true) {    String line=reader.readLine();    if (line == null) {      break;    }    if (line.startsWith("/**/")) {      line="        " + line.substring(4);      javaWriter.println(line);    } else     if (line.startsWith("/*SQL")) {      int end=line.indexOf("*/");      String sql=line.substring(end + "*/".length());      sql=StringUtils.javaDecode(sql);      line=line.substring("/*SQL".length(),end);      if (line.length() > 0) {        String statement=sql;        int count=0;        long time=0;        line=line.trim();        if (line.length() > 0) {          StringTokenizer tk=new StringTokenizer(line," :");          while (tk.hasMoreElements()) {            String token=tk.nextToken();            if ("l".equals(token)) {              int len=Integer.parseInt(tk.nextToken());              statement=sql.substring(0,len) + ";";            } else             if ("#".equals(token)) {              count=Integer.parseInt(tk.nextToken());            } else             if ("t".equals(token)) {              time=Long.parseLong(tk.nextToken());            }          }        }        addToStats(statement,count,time);      }      scriptWriter.println(sql);    }  }  javaWriter.println("    }");  javaWriter.println('}');  reader.close();  javaWriter.close();  if (stats.size() > 0) {    scriptWriter.println("-----------------------------------------");    scriptWriter.println("-- SQL Statement Statistics");    scriptWriter.println("-- time: total time in milliseconds (accumulated)");    scriptWriter.println("-- count: how many times the statement ran");    scriptWriter.println("-- result: total update count or row count");    scriptWriter.println("-----------------------------------------");    scriptWriter.println("-- self accu    time   count  result sql");    int accumTime=0;    ArrayList<Stat> list=New.arrayList(stats.values());    Collections.sort(list);    if (timeTotal == 0) {      timeTotal=1;    }    for (    Stat stat : list) {      accumTime+=stat.time;      StringBuilder buff=new StringBuilder(100);      buff.append("-- ").append(padNumberLeft(100 * stat.time / timeTotal,3)).append("% ").append(padNumberLeft(100 * accumTime / timeTotal,3)).append('%').append(padNumberLeft(stat.time,8)).append(padNumberLeft(stat.executeCount,8)).append(padNumberLeft(stat.resultCount,8)).append(' ').append(removeNewlines(stat.sql));      scriptWriter.println(buff.toString());    }  }  scriptWriter.close();}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public CDebuggerNodeComponent(final DebuggerTemplate debugger){  super(new BorderLayout());  m_debugger=Preconditions.checkNotNull(debugger,"IE01967: Debugger argument can't be null");  m_nameTextField=new CHelpSaveField(debugger.getName(),new CNameHelp());  m_hostTextField=new CHelpSaveField(debugger.getHost(),new CHostHelp());  m_portTextField=new CHelpSaveFormattedField(new CDecFormatter(5),new CPortHelp());  m_portTextField.setText(String.valueOf(debugger.getPort()));  m_debugger.addListener(m_listener);  createGui();  final UpdateListener updateListener=new UpdateListener();  m_nameTextField.getDocument().addDocumentListener(updateListener);  m_hostTextField.getDocument().addDocumentListener(updateListener);  m_portTextField.getDocument().addDocumentListener(updateListener);  updateGui();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean withinMethod(Tree.Declaration decl){  return withinMethod(decl.getDeclarationModel());}  }
class C{  public void read(BiConsumer<InteractionDefinition,Collection<String>> consumer) throws IOException {  try (CSVParser parser=new CSVParser(new FileReader(inputFilename),CSVFormat.RFC4180)){    StreamSupport.stream(parser.spliterator(),false).forEach(null);  } }  }
class C{  public boolean attempt(Word old,Word value,Offset offset){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public void init(boolean encrypting,CipherParameters params){  this.encrypting=encrypting;  if (params instanceof RC2Parameters) {    RC2Parameters param=(RC2Parameters)params;    workingKey=generateWorkingKey(param.getKey(),param.getEffectiveKeyBits());  } else   if (params instanceof KeyParameter) {    byte[] key=((KeyParameter)params).getKey();    workingKey=generateWorkingKey(key,key.length * 8);  } else {    throw new IllegalArgumentException("invalid parameter passed to RC2 init - " + params.getClass().getName());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:22.098 -0500",hash_original_method="A0FB6099859E19ABD2EE706082DAECC3",hash_generated_method="4D5C1DA14952ABC721903A1467465FE7") public static TextEncodingDetails calculateLength(CharSequence msgBody,boolean use7bitOnly){  TextEncodingDetails ted=GsmAlphabet.countGsmSeptets(msgBody,use7bitOnly);  if (ted == null) {    ted=new TextEncodingDetails();    int octets=msgBody.length() * 2;    ted.codeUnitCount=msgBody.length();    if (octets > MAX_USER_DATA_BYTES) {      ted.msgCount=(octets + (MAX_USER_DATA_BYTES_WITH_HEADER - 1)) / MAX_USER_DATA_BYTES_WITH_HEADER;      ted.codeUnitsRemaining=((ted.msgCount * MAX_USER_DATA_BYTES_WITH_HEADER) - octets) / 2;    } else {      ted.msgCount=1;      ted.codeUnitsRemaining=(MAX_USER_DATA_BYTES - octets) / 2;    }    ted.codeUnitSize=ENCODING_16BIT;  }  return ted;}  }
class C{  public static CcdRunner2 serializableInstance(){  return new CcdRunner2(Dag.serializableInstance(),new Parameters());}  }
class C{  @SuppressWarnings("unused") public void finish(){  if (accountAuthenticatorResponse != null) {    if (resultBundle != null) {      accountAuthenticatorResponse.onResult(resultBundle);    } else {      accountAuthenticatorResponse.onError(AccountManager.ERROR_CODE_CANCELED,"canceled");    }    accountAuthenticatorResponse=null;  } else {    if (resultBundle != null && resultBundle.containsKey(AccountManager.KEY_ACCOUNT_NAME)) {      Intent intent=new Intent();      intent.putExtras(resultBundle);      setResult(RESULT_OK,intent);    } else {      setResult(RESULT_CANCELED);    }  }  super.finish();}  }
class C{  @Override public void loadGraphML(final String file) throws Exception {  this.repo.getRemoteRepository().postGraphML(file);}  }
class C{  @SuppressWarnings("unused") public void testMissingNode() throws Exception {  String JSON="[ { }, [ ] ]";  ObjectMapper mapper=new ObjectMapper();  JsonNode result=mapper.readTree(new StringReader(JSON));  assertTrue(result.isContainerNode());  assertTrue(result.isArray());  assertEquals(2,result.size());  int count=0;  for (  JsonNode node : result) {    ++count;  }  assertEquals(2,count);  Iterator<JsonNode> it=result.iterator();  JsonNode onode=it.next();  assertTrue(onode.isContainerNode());  assertTrue(onode.isObject());  assertEquals(0,onode.size());  assertFalse(onode.isMissingNode());  assertNull(onode.getTextValue());  assertNull(onode.get(0));  JsonNode dummyNode=onode.path(0);  assertNotNull(dummyNode);  assertTrue(dummyNode.isMissingNode());  assertNull(dummyNode.get(3));  assertNull(dummyNode.get("whatever"));  JsonNode dummyNode2=dummyNode.path(98);  assertNotNull(dummyNode2);  assertTrue(dummyNode2.isMissingNode());  JsonNode dummyNode3=dummyNode.path("field");  assertNotNull(dummyNode3);  assertTrue(dummyNode3.isMissingNode());  JsonNode anode=it.next();  assertTrue(anode.isContainerNode());  assertTrue(anode.isArray());  assertFalse(anode.isMissingNode());  assertEquals(0,anode.size());  assertNull(anode.get(0));  dummyNode=anode.path(0);  assertNotNull(dummyNode);  assertTrue(dummyNode.isMissingNode());  assertNull(dummyNode.get(0));  assertNull(dummyNode.get("myfield"));  dummyNode2=dummyNode.path(98);  assertNotNull(dummyNode2);  assertTrue(dummyNode2.isMissingNode());  dummyNode3=dummyNode.path("f");  assertNotNull(dummyNode3);  assertTrue(dummyNode3.isMissingNode());}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public SQLiteCustomFunction(String name,int numArgs,SQLiteDatabase.CustomFunction callback){  if (name == null) {    throw new IllegalArgumentException("name must not be null.");  }  this.name=name;  this.numArgs=numArgs;  this.callback=callback;}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 2) {    System.out.println("\nUsage: " + DataSource.class.getName() + " <input-file> <output-file>\n");    System.exit(1);  }  Instances data=DataSource.read(args[0]);  DataSink.write(args[1],data);}  }
class C{  public RenderTextFilter(){}  }
class C{  public NotificationContainerItem(final Notification notification,@NotNull Resources resources){  notification.addObserver(this);  this.resources=resources;  this.notification=notification;  iconPanel=new SimplePanel();  FlowPanel contentWrapper=new FlowPanel();  contentWrapper.add(titlePanel=createTitleWidget());  contentWrapper.add(messagePanel=createContentWidget());  contentWrapper.ensureDebugId(CONTENT_DBG_ID + notification.getId());  contentWrapper.setStyleName(resources.notificationCss().notificationContentWrapper());  FlowPanel notificationWrapper=new FlowPanel();  notificationWrapper.add(iconPanel=createIconWidget());  notificationWrapper.add(contentWrapper);  notificationWrapper.add(createCloseWidget());  notificationWrapper.ensureDebugId(NOTIFICATION_WRAPPER_DBG_ID + notification.getId());  notificationWrapper.setStyleName(resources.notificationCss().notification());  update();  sinkEvents(Event.ONCLICK | Event.ONDBLCLICK);  initWidget(notificationWrapper);}  }
class C{  public static void add(HeartbeatListener artery){  aorta.addConcurrent(artery);  checkActive();}  }
class C{  private static boolean isHex(char p_char){  return (isDigit(p_char) || (p_char >= 'a' && p_char <= 'f') || (p_char >= 'A' && p_char <= 'F'));}  }
class C{  public DSystemProperties(JDialog parent){  this(parent,res.getString("DSystemProperties.Title"),ModalityType.DOCUMENT_MODAL);}  }
class C{  protected void sequence_BindingProperty(ISerializationContext context,BindingProperty semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.ENUMERATION_TYPE__ENUMERATOR:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getEnumerator()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  protected ClassNode inferReturnTypeGenerics(ClassNode receiver,MethodNode method,Expression arguments,GenericsType[] explicitTypeHints){  ClassNode returnType=method.getReturnType();  if (method instanceof ExtensionMethodNode && (isUsingGenericsOrIsArrayUsingGenerics(returnType))) {    ExtensionMethodNode emn=(ExtensionMethodNode)method;    MethodNode dgmMethod=emn.getExtensionMethodNode();    ClassNode dc=emn.getDeclaringClass();    ArgumentListExpression argList=new ArgumentListExpression();    VariableExpression vexp=new VariableExpression("$foo",receiver);    vexp.setNodeMetaData(ExtensionMethodDeclaringClass.class,dc);    argList.addExpression(vexp);    if (arguments instanceof ArgumentListExpression) {      List<Expression> expressions=((ArgumentListExpression)arguments).getExpressions();      for (      Expression arg : expressions) {        argList.addExpression(arg);      }    } else {      argList.addExpression(arguments);    }    return inferReturnTypeGenerics(receiver,dgmMethod,argList);  }  if (!isUsingGenericsOrIsArrayUsingGenerics(returnType))   return returnType;  if (getGenericsWithoutArray(returnType) == null)   return returnType;  Map<String,GenericsType> resolvedPlaceholders=resolvePlaceHoldersFromDeclaration(receiver,getDeclaringClass(method,arguments),method,method.isStatic());  if (!receiver.isGenericsPlaceHolder()) {    GenericsUtils.extractPlaceholders(receiver,resolvedPlaceholders);  }  resolvePlaceholdersFromExplicitTypeHints(method,explicitTypeHints,resolvedPlaceholders);  if (resolvedPlaceholders.isEmpty()) {    return boundUnboundedWildcards(returnType);  }  Map<String,GenericsType> placeholdersFromContext=extractGenericsParameterMapOfThis(typeCheckingContext.getEnclosingMethod());  applyGenericsConnections(placeholdersFromContext,resolvedPlaceholders);  Parameter[] parameters=method.getParameters();  boolean isVargs=isVargs(parameters);  ArgumentListExpression argList=InvocationWriter.makeArgumentList(arguments);  List<Expression> expressions=argList.getExpressions();  int paramLength=parameters.length;  if (expressions.size() >= paramLength) {    for (int i=0; i < paramLength; i++) {      boolean lastArg=i == paramLength - 1;      ClassNode type=parameters[i].getType();      ClassNode actualType=getType(expressions.get(i));      while (!type.isUsingGenerics() && type.isArray() && actualType.isArray()) {        type=type.getComponentType();        actualType=actualType.getComponentType();      }      if (isUsingGenericsOrIsArrayUsingGenerics(type)) {        if (implementsInterfaceOrIsSubclassOf(actualType,CLOSURE_TYPE) && isSAMType(type)) {          Map<String,GenericsType> pholders=applyGenericsContextToParameterClass(resolvedPlaceholders,type);          actualType=convertClosureTypeToSAMType(expressions.get(i),actualType,type,pholders);        }        if (isVargs && lastArg && actualType.isArray()) {          actualType=actualType.getComponentType();        }        if (isVargs && lastArg && type.isArray()) {          type=type.getComponentType();        }        actualType=wrapTypeIfNecessary(actualType);        Map<String,GenericsType> connections=new HashMap<String,GenericsType>();        extractGenericsConnections(connections,actualType,type);        extractGenericsConnectionsForSuperClassAndInterfaces(resolvedPlaceholders,connections);        applyGenericsConnections(connections,resolvedPlaceholders);      }    }  }  return applyGenericsContext(resolvedPlaceholders,returnType);}  }
class C{  public static TestSuite suite() throws Exception {  Class testClass=ClassLoader.getSystemClassLoader().loadClass("org.w3c.domts.level3.xpath.alltests");  Constructor testConstructor=testClass.getConstructor(new Class[]{DOMTestDocumentBuilderFactory.class});  DOMTestDocumentBuilderFactory factory=new JAXPDOMTestDocumentBuilderFactory(null,JAXPDOMTestDocumentBuilderFactory.getConfiguration2());  Object test=testConstructor.newInstance(new Object[]{factory});  return new JUnitTestSuiteAdapter((DOMTestSuite)test);}  }
class C{  public static Node toNode(Document doc,Object o,short type) throws PageException {  if (Node.TEXT_NODE == type)   toText(doc,o); else   if (Node.ATTRIBUTE_NODE == type)   toAttr(doc,o); else   if (Node.COMMENT_NODE == type)   toComment(doc,o); else   if (Node.ELEMENT_NODE == type)   toElement(doc,o);  throw new ExpressionException("invalid node type definition");}  }
class C{  @Override public void processIncoming(DistributionManager dm,String adviseePath,boolean removeProfile,boolean exchangeProfiles,final List<Profile> replyProfiles){  final GemFireCacheImpl cache=GemFireCacheImpl.getInstance();  if (cache != null && !cache.isClosed()) {    handleDistributionAdvisee(cache,removeProfile,exchangeProfiles,replyProfiles);  }}  }
class C{  private void maybeStartBiometricUnlock(){  if (DEBUG)   Log.d(TAG,"maybeStartBiometricUnlock()");  if (mBiometricUnlock != null) {    KeyguardUpdateMonitor monitor=KeyguardUpdateMonitor.getInstance(mContext);    final boolean backupIsTimedOut=(monitor.getFailedUnlockAttempts() >= LockPatternUtils.FAILED_ATTEMPTS_BEFORE_TIMEOUT);    PowerManager powerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);    boolean isShowing;synchronized (mIsShowingLock) {      isShowing=mIsShowing;    }    if (!powerManager.isScreenOn() || !isShowing) {      mBiometricUnlock.stop();      return;    }    if (monitor.getPhoneState() == TelephonyManager.CALL_STATE_IDLE && monitor.isAlternateUnlockEnabled() && !monitor.getMaxBiometricUnlockAttemptsReached() && !backupIsTimedOut) {      mBiometricUnlock.start();    } else {      mBiometricUnlock.stopAndShowBackup();    }  }}  }
class C{  public static void main(final String[] args){  final StackedBarChartExample demo=new StackedBarChartExample("Stacked Bar Chart Demo 4");  demo.pack();  RefineryUtilities.centerFrameOnScreen(demo);  demo.setVisible(true);}  }
class C{  public void testLoadContent_WebResource(){  System.out.println("loadContent");  WebResource mockWebResource=EasyMock.createMock(WebResource.class);  ContentDataService mockContentDataService=EasyMock.createMock(ContentDataService.class);  Downloader mockDownloader=EasyMock.createMock(Downloader.class);  DownloaderFactory mockDownloaderFactory=EasyMock.createMock(DownloaderFactory.class);  ContentLoaderFactory mockContentLoaderFactory=EasyMock.createMock(ContentLoaderFactory.class);  ContentLoader mockContentLoader=EasyMock.createMock(ContentLoader.class);  DateFactory mockDateFactory=EasyMock.createMock(DateFactory.class);  EasyMock.expect(mockDownloaderFactory.create()).andReturn(mockDownloader).once();  EasyMock.expect(mockContentLoaderFactory.create(mockContentDataService,mockDownloader,mockDateFactory,null)).andReturn(mockContentLoader).once();  mockContentLoader.setWebResource(mockWebResource);  EasyMock.expectLastCall().once();  mockContentLoader.run();  EasyMock.expectLastCall().once();  List<Content> contentList=new ArrayList<>();  Content mockContent=EasyMock.createMock(Content.class);  contentList.add(mockContent);  EasyMock.expect(mockContentLoader.getResult()).andReturn(contentList).once();  EasyMock.replay(mockContent);  EasyMock.replay(mockContentDataService);  EasyMock.replay(mockContentLoader);  EasyMock.replay(mockContentLoaderFactory);  EasyMock.replay(mockDownloader);  EasyMock.replay(mockDownloaderFactory);  EasyMock.replay(mockDateFactory);  ContentLoaderServiceImpl instance=new ContentLoaderServiceImpl();  instance.setContentDataService(mockContentDataService);  instance.setContentLoaderFactory(mockContentLoaderFactory);  instance.setDownloaderFactory(mockDownloaderFactory);  instance.setDateFactory(mockDateFactory);  assertEquals(contentList,instance.loadContent(mockWebResource));  EasyMock.verify(mockContent);  EasyMock.verify(mockContentDataService);  EasyMock.verify(mockContentLoader);  EasyMock.verify(mockContentLoaderFactory);  EasyMock.verify(mockDownloader);  EasyMock.verify(mockDownloaderFactory);  EasyMock.verify(mockDateFactory);}  }
class C{  public boolean removeAll(){  lock.lock();  try {    if (cookieJar.isEmpty()) {      return false;    }    cookieJar.clear();    domainIndex.clear();    uriIndex.clear();  }  finally {    lock.unlock();  }  return true;}  }
class C{  public void afterLast() throws SQLException {synchronized (checkClosed().getConnectionMutex()) {    if (this.onInsertRow) {      this.onInsertRow=false;    }    if (this.doingUpdates) {      this.doingUpdates=false;    }    if (this.thisRow != null) {      this.thisRow.closeOpenStreams();    }    if (this.rowData.size() != 0) {      this.rowData.afterLast();      this.thisRow=null;    }    setRowPositionValidity();  }}  }
class C{  public Instant earliestWatermarkHold(){  Instant minimum=null;  for (  State storage : inMemoryState.values()) {    if (storage instanceof WatermarkHoldState) {      Instant hold=((WatermarkHoldState<?>)storage).read();      if (minimum == null || (hold != null && hold.isBefore(minimum))) {        minimum=hold;      }    }  }  return minimum;}  }
class C{  public Iter(BitVector bv){  this.init(bv);}  }
class C{  public Token(int kind,String image){  this.kind=kind;  this.image=image;}  }
class C{  public Test(TestCase testCase,int testIndex,String description,String operation,String geometryIndex,List arguments,Result expectedResult,double tolerance){  this.tolerance=tolerance;  this.description=description;  this.operation=operation;  this.expectedResult=expectedResult;  this.testIndex=testIndex;  this.geometryIndex=geometryIndex;  this.arguments=new ArrayList(arguments);  this.testCase=testCase;}  }
class C{  private void keysSetTester(Region pr,boolean keySet){  assertEquals(Collections.EMPTY_SET,(keySet ? pr.keySet() : pr.keys()));  pr.put(new Integer(1),"won");  pr.put(new Integer(2),"to");  pr.put(new Integer(3),"free");  pr.put(new Integer(5),"hive");  final Set ks=(keySet ? pr.keySet() : pr.keys());  assertEquals(4,ks.size());  try {    ks.clear();    fail("Expected key set to be read only");  } catch (  Exception expected) {  }  try {    ks.add("foo");    fail("Expected key set to be read only");  } catch (  Exception expected) {  }  try {    ks.addAll(Arrays.asList(new String[]{"one","two","three"}));    fail("Expected key set to be read only");  } catch (  Exception expected) {  }  try {    ks.remove("boom");    fail("Expected key set to be read only");  } catch (  Exception expected) {  }  try {    ks.removeAll(Arrays.asList(new Integer[]{new Integer(1),new Integer(2)}));    fail("Expected key set to be read only");  } catch (  Exception expected) {  }  try {    ks.retainAll(Arrays.asList(new Integer[]{new Integer(3),new Integer(5)}));    fail("Expected key set to be read only");  } catch (  Exception expected) {  }  final Iterator ksI=ks.iterator();  for (int i=0; i < 4; i++) {    try {      ksI.remove();      fail("Expected key set iterator to be read only");    } catch (    Exception expected) {    }    assertTrue(ksI.hasNext());    Object key=ksI.next();    assertEquals(Integer.class,key.getClass());  }  try {    ksI.remove();    fail("Expected key set iterator to be read only");  } catch (  Exception expected) {  }  try {    ksI.next();    fail("Expected no such element exception");  } catch (  NoSuchElementException expected) {  }}  }
class C{  public ImException(Throwable cause){  super(cause);}  }
class C{  public static void sortSeqs(List<String> seqs){  Collections.sort(seqs,null);}  }
class C{  public void keyPressed(KeyEvent e){synchronized (keyLock) {    keysDown.add(e.getKeyCode());  }}  }
class C{  public static Object fromAddress(long address){  Object[] array=new Object[]{null};  long baseOffset=unsafe.arrayBaseOffset(Object[].class);  unsafe.putLong(array,baseOffset,address);  return array[0];}  }
class C{  protected Keymap createKeymap(){  Keymap map=JTextComponent.getKeymap(RTEXTAREA_KEYMAP_NAME);  if (map == null) {    Keymap parent=JTextComponent.getKeymap(JTextComponent.DEFAULT_KEYMAP);    map=JTextComponent.addKeymap(RTEXTAREA_KEYMAP_NAME,parent);    map.setDefaultAction(new RTextAreaEditorKit.DefaultKeyTypedAction());  }  return map;}  }
class C{  public void callGCTraceAdded(GCTrace gcTrace){  ArgumentChecking.notNull(gcTrace,"gcTrace");  for (  GCTraceSetListener listener : listeners()) {    listener.gcTraceAdded(gcTrace);  }}  }
class C{  public static void print(String[] list,int n){  System.out.println();  for (int i=0; i < list.length; i++)   System.out.print(((i + 1) % n == 0) ? list[i] + "\n" : list[i]);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static Token newToken(int ofKind,String image){switch (ofKind) {default :    return new Token(ofKind,image);}}  }
class C{  public Expression copyInline(Context ctx){  UnaryExpression e=(UnaryExpression)clone();  if (right != null) {    e.right=right.copyInline(ctx);  }  return e;}  }
class C{  private void readObject(){}  }
class C{  protected void parseDefineButtonSound(InStream in) throws IOException {  int id=in.readUI16();  int rollOverSoundId=in.readUI16();  SoundInfo rollOverSoundInfo=(rollOverSoundId == 0) ? null : new SoundInfo(in);  int rollOutSoundId=in.readUI16();  SoundInfo rollOutSoundInfo=(rollOutSoundId == 0) ? null : new SoundInfo(in);  int pressSoundId=in.readUI16();  SoundInfo pressSoundInfo=(pressSoundId == 0) ? null : new SoundInfo(in);  int releaseSoundId=in.readUI16();  SoundInfo releaseSoundInfo=(releaseSoundId == 0) ? null : new SoundInfo(in);  tagtypes.tagDefineButtonSound(id,rollOverSoundId,rollOverSoundInfo,rollOutSoundId,rollOutSoundInfo,pressSoundId,pressSoundInfo,releaseSoundId,releaseSoundInfo);}  }
class C{  public void addSentencePreviousMeta(Relationship relationship,Vertex questionInput,Vertex previousQuestionInput,Map<Vertex,Vertex> variables,Network network){  if (previousQuestionInput != null) {    Vertex previousQuestion=previousQuestionInput.getRelationship(Primitive.INPUT);    if (previousQuestion != null) {      Vertex meta=network.createMeta(relationship);      Vertex newQuotient=createTemplate(questionInput,previousQuestionInput,variables,network);      if (newQuotient == null) {        newQuotient=previousQuestion;      }      meta.addRelationship(Primitive.PREVIOUS,newQuotient);    }  }}  }
class C{  public void testSynonymsPhrase() throws Exception {  MultiPhraseQuery.Builder expectedBuilder=new MultiPhraseQuery.Builder();  expectedBuilder.add(new Term("field","old"));  expectedBuilder.add(new Term[]{new Term("field","dogs"),new Term("field","dog")});  QueryBuilder builder=new QueryBuilder(new MockSynonymAnalyzer());  assertEquals(expectedBuilder.build(),builder.createPhraseQuery("field","old dogs"));}  }
class C{  @Override public String requestInput(final Object[] args){  if (showMessage) {    System.out.println("input requested - parameters passed in (String or components");  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean specifiesMirroring(){  return (continuousCopies != null && continuousCopies.getMaxMirrors() != null && continuousCopies.getMaxMirrors() != VirtualPoolProtectionMirrorParam.MAX_DISABLED);}  }
class C{  public double optDouble(String key,double defaultValue){  try {    return this.getDouble(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void start(){  mStarted=true;  mSecondsTextValue=-1;  long seconds=TimeUnit.MILLISECONDS.toSeconds(mTicksLeft * mMillisTickDuration);  if (seconds >= 6) {    animationStarted=false;    mViewCountdown.clearAnimation();    mViewCountdown.setTextColor(Color.WHITE);    mViewCountdown.setTypeface(Typeface.DEFAULT);  }}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public void populateInventory(List<Resource> resources){  List<DatasetItem> items=Lists.newArrayList();  for (  Resource r : resources) {    DatasetItem item=new DatasetItem();    item.setTitle(Strings.nullToEmpty(r.getTitle()));    item.setType(Strings.nullToEmpty(r.getCoreType()));    item.setRecords(r.getRecordsPublished());    item.setLastPublished(r.getLastPublished());    item.setGbifKey(r.getKey().toString());    item.setEml(cfg.getResourceEmlUrl(r.getShortname()));    item.setDwca(cfg.getResourceArchiveUrl(r.getShortname()));    for (    Extension extension : r.getMappedExtensions()) {      if (!extension.isCore()) {        item.getExtensions().add(extension.getRowType());      }    }    items.add(item);  }  setInventory(items);}  }
class C{  private void destroyLocation(Entity en,int loc){  en.setArmor(IArmorState.ARMOR_DESTROYED,loc,false);  en.setInternal(IArmorState.ARMOR_DESTROYED,loc);  if (en.hasRearArmor(loc)) {    en.setArmor(IArmorState.ARMOR_DESTROYED,loc,true);  }  for (  Mounted mounted : en.getEquipment()) {    if (mounted.getLocation() == loc) {      mounted.setDestroyed(true);    }  }  for (int i=0; i < en.getNumberOfCriticals(loc); i++) {    final CriticalSlot cs=en.getCritical(loc,i);    if (cs != null) {      cs.setDestroyed(true);    }  }}  }
class C{  private int computeFields(int fieldMask,int tzMask){  int zoneOffset=0;  TimeZone tz=getZone();  if (zoneOffsets == null) {    zoneOffsets=new int[2];  }  if (tzMask != (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) {    if (tz instanceof ZoneInfo) {      zoneOffset=((ZoneInfo)tz).getOffsets(time,zoneOffsets);    } else {      zoneOffset=tz.getOffset(time);      zoneOffsets[0]=tz.getRawOffset();      zoneOffsets[1]=zoneOffset - zoneOffsets[0];    }  }  if (tzMask != 0) {    if (isFieldSet(tzMask,ZONE_OFFSET)) {      zoneOffsets[0]=internalGet(ZONE_OFFSET);    }    if (isFieldSet(tzMask,DST_OFFSET)) {      zoneOffsets[1]=internalGet(DST_OFFSET);    }    zoneOffset=zoneOffsets[0] + zoneOffsets[1];  }  long fixedDate=zoneOffset / ONE_DAY;  int timeOfDay=zoneOffset % (int)ONE_DAY;  fixedDate+=time / ONE_DAY;  timeOfDay+=(int)(time % ONE_DAY);  if (timeOfDay >= ONE_DAY) {    timeOfDay-=ONE_DAY;    ++fixedDate;  } else {    while (timeOfDay < 0) {      timeOfDay+=ONE_DAY;      --fixedDate;    }  }  fixedDate+=EPOCH_OFFSET;  if (fixedDate != cachedFixedDate || fixedDate < 0) {    jcal.getCalendarDateFromFixedDate(jdate,fixedDate);    cachedFixedDate=fixedDate;  }  int era=getEraIndex(jdate);  int year=jdate.getYear();  internalSet(ERA,era);  internalSet(YEAR,year);  int mask=fieldMask | (ERA_MASK | YEAR_MASK);  int month=jdate.getMonth() - 1;  int dayOfMonth=jdate.getDayOfMonth();  if ((fieldMask & (MONTH_MASK | DAY_OF_MONTH_MASK | DAY_OF_WEEK_MASK)) != 0) {    internalSet(MONTH,month);    internalSet(DAY_OF_MONTH,dayOfMonth);    internalSet(DAY_OF_WEEK,jdate.getDayOfWeek());    mask|=MONTH_MASK | DAY_OF_MONTH_MASK | DAY_OF_WEEK_MASK;  }  if ((fieldMask & (HOUR_OF_DAY_MASK | AM_PM_MASK | HOUR_MASK| MINUTE_MASK| SECOND_MASK| MILLISECOND_MASK)) != 0) {    if (timeOfDay != 0) {      int hours=timeOfDay / ONE_HOUR;      internalSet(HOUR_OF_DAY,hours);      internalSet(AM_PM,hours / 12);      internalSet(HOUR,hours % 12);      int r=timeOfDay % ONE_HOUR;      internalSet(MINUTE,r / ONE_MINUTE);      r%=ONE_MINUTE;      internalSet(SECOND,r / ONE_SECOND);      internalSet(MILLISECOND,r % ONE_SECOND);    } else {      internalSet(HOUR_OF_DAY,0);      internalSet(AM_PM,AM);      internalSet(HOUR,0);      internalSet(MINUTE,0);      internalSet(SECOND,0);      internalSet(MILLISECOND,0);    }    mask|=(HOUR_OF_DAY_MASK | AM_PM_MASK | HOUR_MASK| MINUTE_MASK| SECOND_MASK| MILLISECOND_MASK);  }  if ((fieldMask & (ZONE_OFFSET_MASK | DST_OFFSET_MASK)) != 0) {    internalSet(ZONE_OFFSET,zoneOffsets[0]);    internalSet(DST_OFFSET,zoneOffsets[1]);    mask|=(ZONE_OFFSET_MASK | DST_OFFSET_MASK);  }  if ((fieldMask & (DAY_OF_YEAR_MASK | WEEK_OF_YEAR_MASK | WEEK_OF_MONTH_MASK| DAY_OF_WEEK_IN_MONTH_MASK)) != 0) {    int normalizedYear=jdate.getNormalizedYear();    boolean transitionYear=isTransitionYear(jdate.getNormalizedYear());    int dayOfYear;    long fixedDateJan1;    if (transitionYear) {      fixedDateJan1=getFixedDateJan1(jdate,fixedDate);      dayOfYear=(int)(fixedDate - fixedDateJan1) + 1;    } else     if (normalizedYear == MIN_VALUES[YEAR]) {      CalendarDate dx=jcal.getCalendarDate(Long.MIN_VALUE,getZone());      fixedDateJan1=jcal.getFixedDate(dx);      dayOfYear=(int)(fixedDate - fixedDateJan1) + 1;    } else {      dayOfYear=(int)jcal.getDayOfYear(jdate);      fixedDateJan1=fixedDate - dayOfYear + 1;    }    long fixedDateMonth1=transitionYear ? getFixedDateMonth1(jdate,fixedDate) : fixedDate - dayOfMonth + 1;    internalSet(DAY_OF_YEAR,dayOfYear);    internalSet(DAY_OF_WEEK_IN_MONTH,(dayOfMonth - 1) / 7 + 1);    int weekOfYear=getWeekNumber(fixedDateJan1,fixedDate);    if (weekOfYear == 0) {      long fixedDec31=fixedDateJan1 - 1;      long prevJan1;      LocalGregorianCalendar.Date d=getCalendarDate(fixedDec31);      if (!(transitionYear || isTransitionYear(d.getNormalizedYear()))) {        prevJan1=fixedDateJan1 - 365;        if (d.isLeapYear()) {          --prevJan1;        }      } else       if (transitionYear) {        if (jdate.getYear() == 1) {          if (era > HEISEI) {            CalendarDate pd=eras[era - 1].getSinceDate();            if (normalizedYear == pd.getYear()) {              d.setMonth(pd.getMonth()).setDayOfMonth(pd.getDayOfMonth());            }          } else {            d.setMonth(LocalGregorianCalendar.JANUARY).setDayOfMonth(1);          }          jcal.normalize(d);          prevJan1=jcal.getFixedDate(d);        } else {          prevJan1=fixedDateJan1 - 365;          if (d.isLeapYear()) {            --prevJan1;          }        }      } else {        CalendarDate cd=eras[getEraIndex(jdate)].getSinceDate();        d.setMonth(cd.getMonth()).setDayOfMonth(cd.getDayOfMonth());        jcal.normalize(d);        prevJan1=jcal.getFixedDate(d);      }      weekOfYear=getWeekNumber(prevJan1,fixedDec31);    } else {      if (!transitionYear) {        if (weekOfYear >= 52) {          long nextJan1=fixedDateJan1 + 365;          if (jdate.isLeapYear()) {            nextJan1++;          }          long nextJan1st=LocalGregorianCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,getFirstDayOfWeek());          int ndays=(int)(nextJan1st - nextJan1);          if (ndays >= getMinimalDaysInFirstWeek() && fixedDate >= (nextJan1st - 7)) {            weekOfYear=1;          }        }      } else {        LocalGregorianCalendar.Date d=(LocalGregorianCalendar.Date)jdate.clone();        long nextJan1;        if (jdate.getYear() == 1) {          d.addYear(+1);          d.setMonth(LocalGregorianCalendar.JANUARY).setDayOfMonth(1);          nextJan1=jcal.getFixedDate(d);        } else {          int nextEraIndex=getEraIndex(d) + 1;          CalendarDate cd=eras[nextEraIndex].getSinceDate();          d.setEra(eras[nextEraIndex]);          d.setDate(1,cd.getMonth(),cd.getDayOfMonth());          jcal.normalize(d);          nextJan1=jcal.getFixedDate(d);        }        long nextJan1st=LocalGregorianCalendar.getDayOfWeekDateOnOrBefore(nextJan1 + 6,getFirstDayOfWeek());        int ndays=(int)(nextJan1st - nextJan1);        if (ndays >= getMinimalDaysInFirstWeek() && fixedDate >= (nextJan1st - 7)) {          weekOfYear=1;        }      }    }    internalSet(WEEK_OF_YEAR,weekOfYear);    internalSet(WEEK_OF_MONTH,getWeekNumber(fixedDateMonth1,fixedDate));    mask|=(DAY_OF_YEAR_MASK | WEEK_OF_YEAR_MASK | WEEK_OF_MONTH_MASK| DAY_OF_WEEK_IN_MONTH_MASK);  }  return mask;}  }
class C{  @SuppressWarnings("deprecation") protected void stopAssociator(){  if (m_RunThread != null) {    m_RunThread.interrupt();    m_RunThread.stop();  }}  }
class C{  public void testSortAndLabels(){  performTest(getFilter(false,"__blah,__blubber"));}  }
class C{  protected void paint(SynthContext context,Graphics g){  Rectangle clip=g.getClipBounds();  Rectangle bounds=table.getBounds();  bounds.x=bounds.y=0;  if (table.getRowCount() <= 0 || table.getColumnCount() <= 0 || !bounds.intersects(clip)) {    paintDropLines(context,g);    return;  }  boolean ltr=table.getComponentOrientation().isLeftToRight();  Point upperLeft=clip.getLocation();  Point lowerRight=new Point(clip.x + clip.width - 1,clip.y + clip.height - 1);  int rMin=table.rowAtPoint(upperLeft);  int rMax=table.rowAtPoint(lowerRight);  if (rMin == -1) {    rMin=0;  }  if (rMax == -1) {    rMax=table.getRowCount() - 1;  }  int cMin=table.columnAtPoint(ltr ? upperLeft : lowerRight);  int cMax=table.columnAtPoint(ltr ? lowerRight : upperLeft);  if (cMin == -1) {    cMin=0;  }  if (cMax == -1) {    cMax=table.getColumnCount() - 1;  }  paintCells(context,g,rMin,rMax,cMin,cMax);  paintGrid(context,g,rMin,rMax,cMin,cMax);  paintDropLines(context,g);}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  public MockingComponentFactory register(Class<?> componentClass,Class<?> mockClass){  classMap.put(componentClass,mockClass);  return this;}  }
class C{  @Override public void execute(StepInstance stepInstance,String temporaryFileDirectory){  delayForNfs();  final String fileName=stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory,coilsOutputFileNameTemplate);  InputStream is=null;  ParseCoilsMatch represantiveRawMatch=null;  int count=0;  try {    is=new FileInputStream(fileName);    Set<ParseCoilsMatch> matches=parser.parse(is,fileName);    for (    ParseCoilsMatch parseCoilsMatch : matches) {      count+=1;      if (represantiveRawMatch == null) {        represantiveRawMatch=parseCoilsMatch;      }    }    matchDAO.persist(matches);    Long now=System.currentTimeMillis();    if (count > 0) {      int waitTimeFactor=Utilities.getWaitTimeFactor(count).intValue();      if (represantiveRawMatch != null) {        Utilities.verboseLog("represantiveRawMatch :" + represantiveRawMatch.toString());        Utilities.sleep(waitTimeFactor * 1000);      } else {        LOGGER.warn("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);        Utilities.verboseLog("Check if Raw matches committed " + count + " rm: "+ represantiveRawMatch);      }      Long timeTaken=System.currentTimeMillis() - now;      Utilities.verboseLog("ParseStep: count: " + count + " represantiveRawMatch : "+ represantiveRawMatch.toString()+ " time taken: "+ timeTaken);    }  } catch (  IOException e) {    throw new IllegalStateException("IOException thrown when attempting to parse Coils file " + fileName,e);  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {        LOGGER.error("Unable to close connection to the Coils output file located at " + fileName,e);        throw new IllegalStateException("IOException thrown when attempting to close the InputStream from the Coils output file.",e);      }    }  }}  }
class C{  protected int resolveLevelForType(char[] simpleNamePattern,char[] qualificationPattern,TypeBinding binding){  char[] qualifiedPattern=getQualifiedPattern(simpleNamePattern,qualificationPattern);  int level=resolveLevelForType(qualifiedPattern,binding);  if (level == ACCURATE_MATCH || binding == null || !binding.isValidBinding())   return level;  TypeBinding type=binding instanceof ArrayBinding ? ((ArrayBinding)binding).leafComponentType : binding;  char[] sourceName=null;  if (type.isMemberType() || type.isLocalType()) {    if (qualificationPattern != null) {      sourceName=getQualifiedSourceName(binding);    } else {      sourceName=binding.sourceName();    }  } else   if (qualificationPattern == null) {    sourceName=getQualifiedSourceName(binding);  }  if (sourceName == null)   return IMPOSSIBLE_MATCH;switch (this.matchMode) {case SearchPattern.R_PREFIX_MATCH:    if (CharOperation.prefixEquals(qualifiedPattern,sourceName,this.isCaseSensitive)) {      return ACCURATE_MATCH;    }  break;case SearchPattern.R_CAMELCASE_MATCH:if ((qualifiedPattern.length > 0 && sourceName.length > 0 && qualifiedPattern[0] == sourceName[0])) {  if (CharOperation.camelCaseMatch(qualifiedPattern,sourceName,false)) {    return ACCURATE_MATCH;  }  if (!this.isCaseSensitive && CharOperation.prefixEquals(qualifiedPattern,sourceName,false)) {    return ACCURATE_MATCH;  }}break;case SearchPattern.R_CAMELCASE_SAME_PART_COUNT_MATCH:if ((qualifiedPattern.length > 0 && sourceName.length > 0 && qualifiedPattern[0] == sourceName[0])) {if (CharOperation.camelCaseMatch(qualifiedPattern,sourceName,true)) {return ACCURATE_MATCH;}}break;default :if (CharOperation.match(qualifiedPattern,sourceName,this.isCaseSensitive)) {return ACCURATE_MATCH;}}return IMPOSSIBLE_MATCH;}  }
class C{  protected void init(Delegator delegator,ModelEntity modelEntity,Object singlePkValue){  assertIsMutable();  if (modelEntity == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null modelEntity parameter");  }  if (modelEntity.getPksSize() != 1) {    throw new IllegalArgumentException("Cannot create a GenericEntity with more than one primary key field");  }  this.modelEntity=modelEntity;  this.entityName=modelEntity.getEntityName();  this.delegatorName=delegator.getDelegatorName();  this.internalDelegator=delegator;  this.observable=new Observable();  set(modelEntity.getOnlyPk().getName(),singlePkValue);  if (this.entityName == null) {    throw new IllegalArgumentException("Cannot create a GenericEntity with a null entityName in the modelEntity parameter");  }}  }
class C{  public Counts call(){  double myObjective=0;  myDerivatives=new double[dimension];  unparsableTrees=0;  incorrectLLTrees=0;  if (myConstraints == null)   loadConstraints();  int i=-1;  int block=0;  double totalBias=0;  for (  Tree<StateSet> stateSetTree : myTrees) {    i++;    List<StateSet> yield=stateSetTree.getYield();    boolean noSmoothing=false, debugOutput=false;    boolean[][][][] cons=null;    if (consName != null) {      cons=myConstraints[i];      if (cons.length != yield.size()) {        System.out.println("My ID: " + myID + ", block: "+ block+ ", sentence: "+ i);        System.out.println("Sentence length (" + yield.size() + ") and constraints length ("+ cons.length+ ") do not match!");        System.exit(-1);      }    }    double allLL=eParser.doConstrainedInsideOutsideScores(yield,cons,noSmoothing,null,null,false);    double goldLL=(ConditionalTrainer.Options.hierarchicalChart) ? eParser.doInsideOutsideScores(stateSetTree,noSmoothing,debugOutput,eParser.spanScores) : gParser.doInsideOutsideScores(stateSetTree,noSmoothing,debugOutput,eParser.spanScores);    if (i % 500 == 0)     System.out.print(".");    if (!sanityCheckLLs(goldLL,allLL,stateSetTree)) {      myObjective+=-1000;      continue;    }    if (false) {      double[] myExpectedCounts=new double[myDerivatives.length];      eParser.incrementExpectedCounts(linearizer,myExpectedCounts,yield);      double[] myExactExpectedCounts=new double[myDerivatives.length];      double exactLL=eParser.doConstrainedInsideOutsideScores(yield,null,noSmoothing,null,null,false);      eParser.incrementExpectedCounts(linearizer,myExactExpectedCounts,yield);      double bias=0;      for (int ii=0; ii < myDerivatives.length; ii++) {        double diff=myExpectedCounts[ii] - myExactExpectedCounts[ii];        bias+=diff * diff;      }      totalBias+=bias;      System.out.println(allLL + "\t" + exactLL+ "\t"+ bias);    }    eParser.incrementExpectedCounts(linearizer,myDerivatives,yield);    if (ConditionalTrainer.Options.hierarchicalChart)     eParser.incrementExpectedGoldCounts(linearizer,myDerivatives,stateSetTree); else     gParser.incrementExpectedGoldCounts(linearizer,myDerivatives,stateSetTree);    myObjective+=(goldLL - allLL);  }  myCounts=new Counts(myObjective,myDerivatives,unparsableTrees,incorrectLLTrees);  totalBias/=myTrees.size();  System.out.println("\nAverage bias: " + totalBias + "\n");  System.out.print(" " + myID + " ");  return myCounts;}  }
class C{  protected boolean afterSave(boolean newRecord,boolean success){  return true;}  }
class C{  public void enableDashedLine(float lineLength,float spaceLength,float phase){  mDashPathEffect=new DashPathEffect(new float[]{lineLength,spaceLength},phase);}  }
class C{  public Builder with(String apiKey){  if (apiKey == null) {    throw new IllegalArgumentException("SoundCloud api can't be null");  }  this.apiKey=apiKey;  return this;}  }
class C{  private static boolean IsSameObject(JNIEnvironment env,int obj1JREF,int obj2JREF){  if (traceJNI)   VM.sysWrite("JNI called: IsSameObject  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj1=env.getJNIRef(obj1JREF);    Object obj2=env.getJNIRef(obj2JREF);    return obj1 == obj2;  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(null);    env.recordException(unexpected);    return false;  }}  }
class C{  protected static List<AvaticaParameter> parameters(ParameterMetaData metaData) throws SQLException {  if (metaData == null) {    return Collections.emptyList();  }  final List<AvaticaParameter> params=new ArrayList<>();  for (int i=1; i <= metaData.getParameterCount(); i++) {    params.add(new AvaticaParameter(metaData.isSigned(i),metaData.getPrecision(i),metaData.getScale(i),metaData.getParameterType(i),metaData.getParameterTypeName(i),metaData.getParameterClassName(i),"?" + i));  }  return params;}  }
class C{  @SuppressWarnings("unchecked") final boolean matchesStatusFilter(Map<String,Object> collectionState,Set<String> liveNodes){  if (filterType != FilterType.status || filter == null || filter.length() == 0)   return true;  boolean isHealthy=true;  boolean hasDownedShard=false;  boolean replicaInRecovery=false;  Map<String,Object> shards=(Map<String,Object>)collectionState.get("shards");  for (  String shardId : shards.keySet()) {    boolean hasActive=false;    Map<String,Object> shard=(Map<String,Object>)shards.get(shardId);    Map<String,Object> replicas=(Map<String,Object>)shard.get("replicas");    for (    String replicaId : replicas.keySet()) {      Map<String,Object> replicaState=(Map<String,Object>)replicas.get(replicaId);      Replica.State coreState=Replica.State.getState((String)replicaState.get(ZkStateReader.STATE_PROP));      String nodeName=(String)replicaState.get("node_name");      if (!liveNodes.contains(nodeName))       coreState=Replica.State.DOWN;      if (coreState == Replica.State.ACTIVE) {        hasActive=true;      } else {        if (coreState == Replica.State.RECOVERING) {          replicaInRecovery=true;        }        isHealthy=false;      }    }    if (!hasActive)     hasDownedShard=true;  }  if ("healthy".equals(filter)) {    return isHealthy;  } else   if ("degraded".equals(filter)) {    return !hasDownedShard && !isHealthy;  } else   if ("downed_shard".equals(filter)) {    return hasDownedShard;  } else   if (Replica.State.getState(filter) == Replica.State.RECOVERING) {    return !isHealthy && replicaInRecovery;  }  return true;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.476 -0500",hash_original_method="C3AAC0183A1B956AD55E80A8556AFB71",hash_generated_method="B7766A00144A1C85BA9AD9A626B68D86") public Intent putExtra(String name,CharSequence value){  mExtras.put(name,value);  return this;}  }
class C{  public void testSessionRegisterUnregister() throws Throwable {  ClientConnection connection=mock(ClientConnection.class);  when(connection.reset()).thenReturn(connection);  when(connection.servers()).thenReturn(Collections.singletonList(new Address("localhost",5000)));  when(connection.send(any(RegisterRequest.class))).thenReturn(CompletableFuture.completedFuture(RegisterResponse.builder().withSession(1).withLeader(new Address("localhost",5000)).withMembers(Arrays.asList(new Address("localhost",5000),new Address("localhost",5001),new Address("localhost",5002))).withTimeout(1000).build()));  ClientSessionState state=new ClientSessionState(UUID.randomUUID());  ThreadContext context=mock(ThreadContext.class);  Executor executor=new MockExecutor();  when(context.executor()).thenReturn(executor);  ClientSessionManager manager=new ClientSessionManager(connection,state,context,ConnectionStrategies.EXPONENTIAL_BACKOFF);  manager.open().join();  assertEquals(state.getSessionId(),1);  assertEquals(state.getState(),Session.State.OPEN);  verify(connection).reset(new Address("localhost",5000),Arrays.asList(new Address("localhost",5000),new Address("localhost",5001),new Address("localhost",5002)));  when(connection.send(any(UnregisterRequest.class))).thenReturn(CompletableFuture.completedFuture(UnregisterResponse.builder().withStatus(Response.Status.OK).build()));  manager.close().join();  assertEquals(state.getState(),Session.State.CLOSED);}  }
class C{  public boolean exists(){  SecurityManager security=System.getSecurityManager();  if (security != null) {    security.checkRead(path);  }  if (isInvalid()) {    return false;  }  return ((fs.getBooleanAttributes(this) & FileSystem.BA_EXISTS) != 0);}  }
class C{  public String mapMethodName(String owner,String name,String desc){  return name;}  }
class C{  static boolean isOptionsVisible(){  return OPTIONS_MEDIATOR != null && OPTIONS_MEDIATOR.isOptionsVisible();}  }
class C{  public List<ExpectedPartitionValueEntity> createExpectedPartitionValueProcessDatesForApril2014(String partitionKeyGroupName){  return createExpectedPartitionValueProcessDates(partitionKeyGroupName,new GregorianCalendar(2014,3,1),new GregorianCalendar(2014,3,30));}  }
class C{  public void checkAndRetry(final Iterable<? extends T> iterable,final LongIterable values) throws IOException {  final RandomGenerator random=new XorShift1024StarRandomGenerator();  int duplicates=0;  for (; ; )   try {    check();    break;  } catch (  DuplicateException e) {    if (duplicates++ > 3)     throw new IllegalArgumentException("The input list contains duplicates");    LOGGER.warn("Found duplicate. Recomputing triples...");    reset(random.nextLong());    addAll(iterable.iterator(),values.iterator());  }  checkedForDuplicates=true;}  }
class C{  public static void wtf(String msg,Throwable thr){  log(LEVEL.ASSERT,null,msg,thr);}  }
class C{  public TechnicalServiceMultiSubscriptions(Object[] params){  super(params);}  }
class C{  protected TinkerGraph.DefaultIdManager selectIdMakerFromGraphData(final LoadGraphWith.GraphData loadGraphWith){  if (null == loadGraphWith)   return TinkerGraph.DefaultIdManager.ANY;  if (loadGraphWith.equals(LoadGraphWith.GraphData.CLASSIC))   return TinkerGraph.DefaultIdManager.INTEGER; else   if (loadGraphWith.equals(LoadGraphWith.GraphData.MODERN))   return TinkerGraph.DefaultIdManager.INTEGER; else   if (loadGraphWith.equals(LoadGraphWith.GraphData.CREW))   return TinkerGraph.DefaultIdManager.INTEGER; else   if (loadGraphWith.equals(LoadGraphWith.GraphData.GRATEFUL))   return TinkerGraph.DefaultIdManager.INTEGER; else   throw new IllegalStateException(String.format("Need to define a new %s for %s",TinkerGraph.IdManager.class.getName(),loadGraphWith.name()));}  }
class C{  private static Vector<MappingPair> cloneMappingPairVector(Vector<MappingPair> vec){  Vector<MappingPair> result=new Vector<OldDecomposeProofHandler.MappingPair>();  for (int i=0; i < vec.size(); i++) {    result.add(vec.elementAt(i).clone());  }  return result;}  }
class C{  public boolean openFile(){  boolean retOpenFile=false;  ExampleFileFilter filter=new ExampleFileFilter(new String[]{"*"},"All Files");  m_fileChooser.addChoosableFileFilter(filter);  if (null != getDirName()) {    m_fileChooser.setSelectedFile(new File(getDirName() + "//" + getFileName()));  } else {    m_fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));  }  int returnVal=m_fileChooser.showOpenDialog(this.getRootPane());  if (returnVal == JFileChooser.APPROVE_OPTION) {    if (m_fileChooser.getSelectedFile().exists()) {      setFileName(m_fileChooser.getSelectedFile().getPath());      setCurrentDirectory(m_fileChooser.getCurrentDirectory().toString());      retOpenFile=openFileReader(getFileName());    }  } else {    retOpenFile=false;  }  return retOpenFile;}  }
class C{  private static boolean possiblyMonotoneWithNext(Featurizable<IString,String> nextF){  if (nextF.prior == null)   return false;  Featurizable<IString,String> currentF=nextF.prior;  if (fStart(nextF) <= fEnd(currentF)) {    if (fEnd(nextF) >= fStart(currentF)) {    }    return false;  }  CoverageSet fCoverage=nextF.derivation.sourceCoverage;  for (int i=fEnd(currentF) + 1; i < fStart(nextF); ++i)   if (fCoverage.get(i))   return false;  return true;}  }
class C{  public static String leftPad(String s,int length){  StringBuffer sb=new StringBuffer();  for (int i=length - s.length(); i > 0; i--)   sb.append(" ");  sb.append(s);  return sb.toString();}  }
class C{  private String removeEnding(String word){  int length=word.length();  int el=11;  while (el > 0) {    if (length - el > 1) {      String ending=word.substring(length - el);      String conditionCode=null;switch (el) {case 11:        conditionCode=(String)m_l11.get(ending);      break;case 10:    conditionCode=(String)m_l10.get(ending);  break;case 9:conditionCode=(String)m_l9.get(ending);break;case 8:conditionCode=(String)m_l8.get(ending);break;case 7:conditionCode=(String)m_l7.get(ending);break;case 6:conditionCode=(String)m_l6.get(ending);break;case 5:conditionCode=(String)m_l5.get(ending);break;case 4:conditionCode=(String)m_l4.get(ending);break;case 3:conditionCode=(String)m_l3.get(ending);break;case 2:conditionCode=(String)m_l2.get(ending);break;case 1:conditionCode=(String)m_l1.get(ending);break;default :}if (conditionCode != null) {switch (conditionCode.charAt(0)) {case 'A':return word.substring(0,length - el);case 'B':if (length - el > 2) {return word.substring(0,length - el);}break;case 'C':if (length - el > 3) {return word.substring(0,length - el);}break;case 'D':if (length - el > 4) {return word.substring(0,length - el);}break;case 'E':if (word.charAt(length - el - 1) != 'e') {return word.substring(0,length - el);}break;case 'F':if ((length - el > 2) && (word.charAt(length - el - 1) != 'e')) {return word.substring(0,length - el);}break;case 'G':if ((length - el > 2) && (word.charAt(length - el - 1) == 'f')) {return word.substring(0,length - el);}break;case 'H':if ((word.charAt(length - el - 1) == 't') || ((word.charAt(length - el - 1) == 'l') && (word.charAt(length - el - 2) == 'l'))) {return word.substring(0,length - el);}break;case 'I':if ((word.charAt(length - el - 1) != 'o') && (word.charAt(length - el - 1) != 'e')) {return word.substring(0,length - el);}break;case 'J':if ((word.charAt(length - el - 1) != 'a') && (word.charAt(length - el - 1) != 'e')) {return word.substring(0,length - el);}break;case 'K':if ((length - el > 2) && ((word.charAt(length - el - 1) == 'l') || (word.charAt(length - el - 1) == 'i') || ((word.charAt(length - el - 1) == 'e') && (word.charAt(length - el - 3) == 'u')))) {return word.substring(0,length - el);}break;case 'L':if ((word.charAt(length - el - 1) != 'u') && (word.charAt(length - el - 1) != 'x') && ((word.charAt(length - el - 1) != 's') || (word.charAt(length - el - 2) == 'o'))) {return word.substring(0,length - el);}break;case 'M':if ((word.charAt(length - el - 1) != 'a') && (word.charAt(length - el - 1) != 'c') && (word.charAt(length - el - 1) != 'e')&& (word.charAt(length - el - 1) != 'm')) {return word.substring(0,length - el);}break;case 'N':if ((length - el > 3) || ((length - el == 3) && ((word.charAt(length - el - 3) != 's')))) {return word.substring(0,length - el);}break;case 'O':if ((word.charAt(length - el - 1) == 'l') || (word.charAt(length - el - 1) == 'i')) {return word.substring(0,length - el);}break;case 'P':if (word.charAt(length - el - 1) != 'c') {return word.substring(0,length - el);}break;case 'Q':if ((length - el > 2) && (word.charAt(length - el - 1) != 'l') && (word.charAt(length - el - 1) != 'n')) {return word.substring(0,length - el);}break;case 'R':if ((word.charAt(length - el - 1) == 'n') || (word.charAt(length - el - 1) == 'r')) {return word.substring(0,length - el);}break;case 'S':if (((word.charAt(length - el - 1) == 'r') && (word.charAt(length - el - 2) == 'd')) || ((word.charAt(length - el - 1) == 't') && (word.charAt(length - el - 2) != 't'))) {return word.substring(0,length - el);}break;case 'T':if ((word.charAt(length - el - 1) == 's') || ((word.charAt(length - el - 1) == 't') && (word.charAt(length - el - 2) != 'o'))) {return word.substring(0,length - el);}break;case 'U':if ((word.charAt(length - el - 1) == 'l') || (word.charAt(length - el - 1) == 'm') || (word.charAt(length - el - 1) == 'n')|| (word.charAt(length - el - 1) == 'r')) {return word.substring(0,length - el);}break;case 'V':if (word.charAt(length - el - 1) == 'c') {return word.substring(0,length - el);}break;case 'W':if ((word.charAt(length - el - 1) != 's') && (word.charAt(length - el - 1) != 'u')) {return word.substring(0,length - el);}break;case 'X':if ((word.charAt(length - el - 1) == 'l') || (word.charAt(length - el - 1) == 'i') || ((length - el > 2) && (word.charAt(length - el - 1) == 'e') && (word.charAt(length - el - 3) == 'u'))) {return word.substring(0,length - el);}break;case 'Y':if ((word.charAt(length - el - 1) == 'n') && (word.charAt(length - el - 2) == 'i')) {return word.substring(0,length - el);}break;case 'Z':if (word.charAt(length - el - 1) != 'f') {return word.substring(0,length - el);}break;case 'a':if ((word.charAt(length - el - 1) == 'd') || (word.charAt(length - el - 1) == 'f') || (((word.charAt(length - el - 1) == 'h') && (word.charAt(length - el - 2) == 'p')))|| (((word.charAt(length - el - 1) == 'h') && (word.charAt(length - el - 2) == 't')))|| (word.charAt(length - el - 1) == 'l')|| (((word.charAt(length - el - 1) == 'r') && (word.charAt(length - el - 2) == 'e')))|| (((word.charAt(length - el - 1) == 'r') && (word.charAt(length - el - 2) == 'o')))|| (((word.charAt(length - el - 1) == 's') && (word.charAt(length - el - 2) == 'e')))|| (word.charAt(length - el - 1) == 't')) {return word.substring(0,length - el);}break;case 'b':if (m_CompMode) {if (((length - el == 3) && (!((word.charAt(length - el - 1) == 't') && (word.charAt(length - el - 2) == 'e') && (word.charAt(length - el - 3) == 'm')))) || ((length - el > 3) && (!((word.charAt(length - el - 1) == 't') && (word.charAt(length - el - 2) == 's') && (word.charAt(length - el - 3) == 'y')&& (word.charAt(length - el - 4) == 'r'))))) {return word.substring(0,length - el);}} else {if ((length - el > 2) && (!((word.charAt(length - el - 1) == 't') && (word.charAt(length - el - 2) == 'e') && (word.charAt(length - el - 3) == 'm'))) && ((length - el < 4) || (!((word.charAt(length - el - 1) == 't') && (word.charAt(length - el - 2) == 's') && (word.charAt(length - el - 3) == 'y')&& (word.charAt(length - el - 4) == 'r'))))) {return word.substring(0,length - el);}}break;case 'c':if (word.charAt(length - el - 1) == 'l') {return word.substring(0,length - el);}break;default :throw new IllegalArgumentException("Fatal error.");}}}el--;}return word;}  }
class C{  private void notifyPhaseListeners(FacesContext context,PhaseId phaseId,boolean isBefore){  PhaseEvent event=createPhaseEvent(context,phaseId);  MethodExpression beforePhase=getBeforePhaseListener();  MethodExpression afterPhase=getAfterPhaseListener();  boolean hasPhaseMethodExpression=(isBefore && (null != beforePhase)) || (!isBefore && (null != afterPhase) && !beforeMethodException);  MethodExpression expression=isBefore ? beforePhase : afterPhase;  if (hasPhaseMethodExpression) {    try {      expression.invoke(context.getELContext(),new Object[]{event});      skipPhase=context.getResponseComplete() || context.getRenderResponse();    } catch (    Exception e) {      if (isBefore) {        beforeMethodException=true;      }      if (LOGGER.isLoggable(Level.SEVERE)) {        LOGGER.log(Level.SEVERE,"severe.component.unable_to_process_expression",new Object[]{expression.getExpressionString(),(isBefore ? "beforePhase" : "afterPhase")});      }      if (context.getAttributes().containsKey(VIEWROOT_PHASE_LISTENER_QUEUES_EXCEPTIONS_PARAM_NAME)) {        ExceptionQueuedEventContext extx=new ExceptionQueuedEventContext(context,e);        String booleanKey=isBefore ? ExceptionQueuedEventContext.IN_BEFORE_PHASE_KEY : ExceptionQueuedEventContext.IN_AFTER_PHASE_KEY;        extx.getAttributes().put(booleanKey,Boolean.TRUE);        context.getApplication().publishEvent(context,ExceptionQueuedEvent.class,extx);      }      return;    }  }  if (phaseListenerIterator != null && !beforeMethodException) {    while ((isBefore) ? phaseListenerIterator.hasNext() : phaseListenerIterator.hasPrevious()) {      PhaseListener curListener=((isBefore) ? phaseListenerIterator.next() : phaseListenerIterator.previous());      if (phaseId == curListener.getPhaseId() || PhaseId.ANY_PHASE == curListener.getPhaseId()) {        try {          if (isBefore) {            curListener.beforePhase(event);          } else {            curListener.afterPhase(event);          }          skipPhase=context.getResponseComplete() || context.getRenderResponse();        } catch (        Exception e) {          if (isBefore && phaseListenerIterator.hasPrevious()) {            phaseListenerIterator.previous();          }          if (LOGGER.isLoggable(Level.SEVERE)) {            LOGGER.log(Level.SEVERE,"severe.component.uiviewroot_error_invoking_phaselistener",curListener.getClass().getName());          }          if (context.getAttributes().containsKey(VIEWROOT_PHASE_LISTENER_QUEUES_EXCEPTIONS_PARAM_NAME) && (Boolean)context.getAttributes().get(VIEWROOT_PHASE_LISTENER_QUEUES_EXCEPTIONS_PARAM_NAME)) {            ExceptionQueuedEventContext extx=new ExceptionQueuedEventContext(context,e);            String booleanKey=isBefore ? ExceptionQueuedEventContext.IN_BEFORE_PHASE_KEY : ExceptionQueuedEventContext.IN_AFTER_PHASE_KEY;            extx.getAttributes().put(booleanKey,Boolean.TRUE);            context.getApplication().publishEvent(context,ExceptionQueuedEvent.class,extx);          }          return;        }      }    }  }}  }
class C{  public SessionFailedEvent(final String sessionId,final String comment){  super(sessionId);  this.comment=fromNullable(comment);}  }
class C{  public static byte[] encode(BufferedImage image,String format,float quality) throws IOException {  ImageEncoder imageEncoder=ImageEncoderFactory.newInstance(format,quality);  return imageEncoder.encode(image);}  }
class C{  @Override public int hashCode(){  int hash=5;  hash=HashUtilities.hashCode(hash,this.autoWidth);  hash=HashUtilities.hashCode(hash,this.intervalPositionFactor);  hash=HashUtilities.hashCode(hash,this.fixedIntervalWidth);  return hash;}  }
class C{  public void request(HttpMethod method,String path,String data,Handler<ExtendedAsyncResult<String>> fut){  String url=this.okapiUrl + path;  logger.debug("OkapiClient: " + method.toString() + " request to "+ url);  HttpClientRequest req=httpClient.requestAbs(method,url,null);  req.exceptionHandler(null);  for (  String hdr : headers.keySet()) {    logger.debug("OkapiClient: adding header " + hdr + ": "+ headers.get(hdr));  }  req.headers().addAll(headers);  req.end(data);}  }
class C{  public void stopSounds() throws IOException {  writeCode(STOP_SOUNDS);}  }
class C{  private void markDirty(){  if (!dirty) {    dirty=true;    managedForm.dirtyStateChanged();  }}  }
class C{  Role(){}  }
class C{  public final void join() throws java.lang.InterruptedException {  return;}  }
class C{  private boolean deleteFile(String filepath){  try {    if (filepath != null) {      File file=new File(filepath);      if (file.exists()) {        if (file.delete()) {          logger.debug("Deleted: " + file.getPath());          return true;        } else {          logger.warn("Delete failed: " + file.getPath());        }      } else {        logger.warn("Delete failed, file does NOT exist: " + file.getPath());        return true;      }    }  } catch (  Exception e) {    logger.error(e);  }  return false;}  }
class C{  private void encodePaste(final DiffPart part) throws EncodingException {  data.writeBit(1);  data.writeBit(1);  data.writeBit(0);  data.writeValue(codecData.getBlocksizeS(),part.getStart());  data.writeValue(codecData.getBlocksizeB(),Integer.parseInt(part.getText()));  data.writeFillBits();}  }
class C{  public void removeUpdate(DocumentEvent changes,Shape a,ViewFactory f){  updateDamage(changes,a,f);}  }
class C{  NamedBeanHandle<Turnout> loadTurnout(Object o){  Element e=(Element)o;  String name=e.getText();  try {    Turnout t=InstanceManager.turnoutManagerInstance().provideTurnout(name);    return jmri.InstanceManager.getDefault(jmri.NamedBeanHandleManager.class).getNamedBeanHandle(name,t);  } catch (  IllegalArgumentException ex) {    log.warn("Failed to provide Turnout \"{}\" in loadTurnout",name);    return null;  }}  }
class C{  public int compareTo(XMLDateTime otherDT){  XMLDateTime thisDT=this;  if (thisDT.hoursTimezone != null && (thisDT.iHoursTimezone != 0 || thisDT.iMinutesTimezone != 0)) {    thisDT=(XMLDateTime)thisDT.clone();    thisDT.normalize();  }  if (otherDT.hoursTimezone != null && (otherDT.iHoursTimezone != 0 || otherDT.iMinutesTimezone != 0)) {    otherDT=(XMLDateTime)otherDT.clone();    otherDT.normalize();  }  if (thisDT.isNegativeYear && !otherDT.isNegativeYear) {    return -1;  } else   if (!thisDT.isNegativeYear && otherDT.isNegativeYear) {    return 1;  }  int result=0;  if (thisDT.iYear != otherDT.iYear) {    result=thisDT.iYear - otherDT.iYear;  } else   if (thisDT.iMonths != otherDT.iMonths) {    result=thisDT.iMonths - otherDT.iMonths;  } else   if (thisDT.iDays != otherDT.iDays) {    result=thisDT.iDays - otherDT.iDays;  } else   if (thisDT.iHours != otherDT.iHours) {    result=thisDT.iHours - otherDT.iHours;  } else   if (thisDT.iMinutes != otherDT.iMinutes) {    result=thisDT.iMinutes - otherDT.iMinutes;  } else   if (thisDT.iSeconds != otherDT.iSeconds) {    result=thisDT.iSeconds - otherDT.iSeconds;  } else   if (thisDT.iFractionalSeconds != otherDT.iFractionalSeconds) {    result=(thisDT.iFractionalSeconds < otherDT.iFractionalSeconds) ? -1 : 1;  }  if (thisDT.isNegativeYear) {    result=-result;  }  return result;}  }
class C{  public boolean isReviewEnabled(){  return reviewEnabled;}  }
class C{  protected void showExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de showExecuteLogic");  saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS,request);  request.setAttribute(DescripcionConstants.LISTAS_DESCRIPTORAS_KEY,getGestionDescripcionBI(request).getListasDescriptorasExt());  ActionErrors errores=(ActionErrors)getFromTemporalSession(request,DescripcionConstants.ERRORES_KEY);  if ((errores != null) && !errores.isEmpty()) {    obtenerErrores(request,true).add(errores);    removeInTemporalSession(request,DescripcionConstants.ERRORES_KEY);  }  setReturnActionFordward(request,mapping.findForward("ver_listas_descriptoras"));}  }
class C{  default LazyOperations<T> lazyOperations(){  return new LazyOperations<T>(ReactiveSeq.fromIterable(traversable()));}  }
class C{  private void appendTimeZone(StringBuffer buffer,int count,boolean generalTimeZone){  if (generalTimeZone) {    TimeZone tz=calendar.getTimeZone();    boolean daylight=(calendar.get(Calendar.DST_OFFSET) != 0);    int style=count < 4 ? TimeZone.SHORT : TimeZone.LONG;    if (!formatData.customZoneStrings) {      buffer.append(tz.getDisplayName(daylight,style,formatData.locale));      return;    }    String custom=TimeZoneNames.getDisplayName(formatData.zoneStrings,tz.getID(),daylight,style);    if (custom != null) {      buffer.append(custom);      return;    }  }  appendNumericTimeZone(buffer,count,generalTimeZone);}  }
class C{  public synchronized String _append(String str){  if (offset + size + 1 > arr.length)   enlargeCapacity(size + 1);  arr[offset + size]=str;  size++;  return str;}  }
class C{  private void mapMouseToPlane(Simple1DOFCamera camera,Point point2d,double[] vec){  camera.unproject(point2d.x,point2d.y,-100.,far);  camera.unproject(point2d.x,point2d.y,1.,near);  VMath.minusEquals(far,near);  if (near[2] < 0 || near[2] > 0) {    double a=far[2] / near[2];    vec[0]=far[0] - a * near[0];    vec[1]=far[1] - a * near[1];    vec[2]=0;  }}  }
class C{  public void testBug76187() throws Exception {  DatabaseMetaData meta=this.conn.getMetaData();  this.rs=meta.getTypeInfo();  while (this.rs.next()) {    if (this.rs.getString("TYPE_NAME").equals("VARCHAR")) {      if (versionMeetsMinimum(5,0,3)) {        assertEquals(65535,this.rs.getInt("PRECISION"));      } else {        assertEquals(255,this.rs.getInt("PRECISION"));      }    }  }}  }
class C{  public double localScore(int i){  throw new UnsupportedOperationException();}  }
class C{  public void niceText(String fontSize){  String font=OS.getNative().winMacLinux("Consolas","Monaco","Monospace");  extension.workspaceProp(".metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.workbench.prefs",null);  extension.workspaceProp(".metadata/.plugins/org.eclipse.core.runtime/.settings/org.eclipse.ui.editors.prefs",null);}  }
class C{  public void testGetLinkTravelTime_CarAnalyzedModes(){  Network network=NetworkUtils.createNetwork();  TravelTimeCalculatorConfigGroup config=new TravelTimeCalculatorConfigGroup();  config.setTraveltimeBinSize(900);  config.setAnalyzedModes(TransportMode.car);  config.setFilterModes(true);  TravelTimeCalculator ttc=new TravelTimeCalculator(network,config);  Node n1=network.getFactory().createNode(Id.create(1,Node.class),new Coord(0,0));  Node n2=network.getFactory().createNode(Id.create(2,Node.class),new Coord(1000,0));  Node n3=network.getFactory().createNode(Id.create(3,Node.class),new Coord(2000,0));  network.addNode(n1);  network.addNode(n2);  network.addNode(n3);  Link link1=network.getFactory().createLink(Id.create(1,Link.class),n1,n2);  Link link2=network.getFactory().createLink(Id.create(2,Link.class),n2,n3);  network.addLink(link1);  network.addLink(link2);  Id<Person> agId1=Id.create(1510,Person.class);  Id<Person> agId2=Id.create(1511,Person.class);  Id<Vehicle> vehId1=Id.create(1980,Vehicle.class);  Id<Vehicle> vehId2=Id.create(1981,Vehicle.class);  ttc.handleEvent(new VehicleEntersTrafficEvent(90,agId1,link1.getId(),vehId1,TransportMode.car,1.0));  ttc.handleEvent(new VehicleEntersTrafficEvent(100,agId2,link1.getId(),vehId2,TransportMode.walk,1.0));  ttc.handleEvent(new LinkLeaveEvent(100,vehId1,link1.getId()));  ttc.handleEvent(new LinkEnterEvent(100,vehId1,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(110,vehId2,link1.getId()));  ttc.handleEvent(new LinkEnterEvent(110,vehId2,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(200,vehId1,link2.getId()));  ttc.handleEvent(new LinkLeaveEvent(410,vehId2,link2.getId()));  Assert.assertEquals("Only transport mode has been registered to be analyzed, therefore no walk agent should be counted",100.0,ttc.getLinkTravelTimes().getLinkTravelTime(link2,200,null,null),1e-8);}  }
class C{  boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  public static int[] indexOfRegion(String string,String leftBoundary,String rightBoundary,int offset){  int ndx=offset;  int[] res=new int[4];  ndx=string.indexOf(leftBoundary,ndx);  if (ndx == -1) {    return null;  }  res[0]=ndx;  ndx+=leftBoundary.length();  res[1]=ndx;  ndx=string.indexOf(rightBoundary,ndx);  if (ndx == -1) {    return null;  }  res[2]=ndx;  res[3]=ndx + rightBoundary.length();  return res;}  }
class C{  private static void reportObsoletedSwcSources(CompilerSwcContext swcContext,LocalizationManager l10n,Logger logger){  for (  Entry<Source,String> entry : swcContext.getObsoletedSources().entrySet()) {    Source obsoletedSource=entry.getKey();    String obsoletedSourceName=obsoletedSource.getName();    String newLocation=entry.getValue();    String message=l10n.getLocalizedTextString(new SwcDefinitionObsoleted(newLocation));    logger.needsCompilation(obsoletedSourceName,message);  }}  }
class C{  CompletableFuture<Void> connect(LocalConnection connection){  LocalConnection localConnection=new LocalConnection(listener.context,connections);  connections.add(localConnection);  connection.connect(localConnection);  localConnection.connect(connection);  return CompletableFuture.runAsync(null,listener.context.executor());}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  public static String _(String text){  String language=threadLocal.get();  String res=null;  Map<String,String> map=texts.get(language);  if (map != null) {    res=map.get(text);  }  if (res == null) {    res=text;  }  return res;}  }
class C{  private String iconIntersectsBlock(PortalIcon icon,OBlock block){  java.util.List<Positionable> list=_parent.getCircuitIcons(block);  if (list == null || list.size() == 0) {    return Bundle.getMessage("needIcons",block.getDisplayName(),Bundle.getMessage("editCircuitItem"));  }  Rectangle rect=new Rectangle();  Rectangle iconRect=icon.getBounds(new Rectangle());  for (int i=0; i < list.size(); i++) {    Positionable comp=list.get(i);    if (CircuitBuilder.isTrack(comp)) {      rect=list.get(i).getBounds(rect);      if (iconRect.intersects(rect)) {        return null;      }    }  }  return Bundle.getMessage("iconNotOnBlock",block.getDisplayName(),icon.getNameString());}  }
class C{  public static java.sql.Date next(java.sql.Date self){  return new java.sql.Date(next((Date)self).getTime());}  }
class C{  protected void addBackupsToRestoreRequestBuffer(FbService service,ServiceRequestBuffer restoreSPB){  restoreSPB.addArgument(isc_spb_bkp_file,"stdin");}  }
class C{  @Override public List refreshTicks(Graphics2D g2,AxisState state,Rectangle2D dataArea,RectangleEdge edge){  return Collections.EMPTY_LIST;}  }
class C{  public MicroBurlapInput(InputStream is){  init(is);}  }
class C{  protected Tokens.Comment processComment(int pos,int endPos,CommentStyle style){  if (scannerDebug)   System.out.println("processComment(" + pos + ","+ endPos+ ","+ style+ ")=|"+ new String(reader.getRawCharacters(pos,endPos))+ "|");  char[] buf=reader.getRawCharacters(pos,endPos);  return new BasicComment<UnicodeReader>(new UnicodeReader(fac,buf,buf.length),style);}  }
class C{  protected void emit_TStructMemberList___CommaKeyword_1_1_1_or_SemicolonKeyword_1_1_0__q(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public void resetSyntax(){  for (int i=ctype.length; --i >= 0; )   ctype[i]=0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.520 -0400",hash_original_method="461960E755FB4E28A3B792846EE26E3A",hash_generated_method="DF63A57225FF6A484EBE9F5BACEC30CF") public FilenameUtils(){  super();}  }
class C{  public final boolean isPrivate(){  return (this.modifiers & ClassFileConstants.AccPrivate) != 0;}  }
class C{  public static void main(String[] args){  System.out.println();  System.out.println("Reacitve Sum. Type 'a: <number>' and 'b: <number>' to try it.");  new ReactiveSumV1().run();}  }
class C{  public EnumeratedData(DataSource original){  this(original,0,1);}  }
class C{  public static UTMPoint LLtoUTM(LatLonPoint llpoint,UTMPoint utmpoint){  return LLtoUTM(llpoint,Ellipsoid.WGS_84,utmpoint);}  }
class C{  public void onThrowable(Throwable cause){  this.cause=cause;  getSelf().tell(RequestWorkerMsgType.PROCESS_ON_EXCEPTION,getSelf());}  }
class C{  public DeferredSubscriptionSubscriber(Subscriber<? super O> subscriber,long initialRequest){  if (initialRequest < 0) {    throw new IllegalArgumentException("initialRequest >= required but it was " + initialRequest);  }  this.subscriber=Objects.requireNonNull(subscriber,"subscriber");  setInitialRequest(initialRequest);}  }
class C{  public void paint(Graphics g,JComponent c){  super.paint(g,c);  CompiereUtils.paint3Deffect((Graphics2D)g,c,CompiereLookAndFeel.ROUND,true);}  }
class C{  public ConcurrentWeakValueCache(final IHardReferenceQueue<V> queue,final int initialCapacity,final float loadFactor,final int concurrencyLevel,final boolean removeClearedReferences){  this.queue=queue;  map=new ConcurrentHashMap<K,WeakReference<V>>(initialCapacity,loadFactor,concurrencyLevel);  if (removeClearedReferences) {    referenceQueue=new ReferenceQueue<V>();  } else {    referenceQueue=null;  }}  }
class C{  XYZChemModel(InputStream is) throws Exception {  this();  StreamTokenizer st=new StreamTokenizer(new BufferedReader(new InputStreamReader(is,"UTF-8")));  st.eolIsSignificant(true);  st.commentChar('#');  try {    scan:     while (true) {switch (st.nextToken()) {case StreamTokenizer.TT_EOF:        break scan;default :      break;case StreamTokenizer.TT_WORD:    String name=st.sval;  double x=0, y=0, z=0;if (st.nextToken() == StreamTokenizer.TT_NUMBER) {  x=st.nval;  if (st.nextToken() == StreamTokenizer.TT_NUMBER) {    y=st.nval;    if (st.nextToken() == StreamTokenizer.TT_NUMBER) {      z=st.nval;    }  }}addVert(name,(float)x,(float)y,(float)z);while (st.ttype != StreamTokenizer.TT_EOL && st.ttype != StreamTokenizer.TT_EOF) {st.nextToken();}}}is.close();} catch (IOException e) {}if (st.ttype != StreamTokenizer.TT_EOF) {throw new Exception(st.toString());}}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  private static CharSequence requireEndUnescaped(CharSequence s){  int n=s.length();  int nBackslashes=0;  while (nBackslashes < n && '\\' == s.charAt(n - nBackslashes - 1)) {    ++nBackslashes;  }  if ((nBackslashes & 1) == 1) {    return s + "\\";  }  return s;}  }
class C{  public void updateErrorTemplate(int statusCode,String template) throws SecurityException {  checkWriteAccess();  boolean hasAccess=ConfigWebUtil.hasAccess(config,SecurityManager.TYPE_DEBUGGING);  if (!hasAccess)   throw new SecurityException("no access to change error settings");  Element error=_getRootElement("error");  error.setAttribute("template-" + statusCode,template);}  }
class C{  public boolean contains(Object o){synchronized (children) {    return children.containsKey(o);  }}  }
class C{  public static String replaceElementText(String xmlFile,String elementTag,List values,boolean overwrite) throws DOMException {  File file=null;  FileWriter fw=null;  Document doc=null;  if ((xmlFile == null) || (elementTag == null) || (elementTag.trim().equals(""))|| (values == null))   return null;  try {    doc=_docBuilder.parse(xmlFile);    String xmlStr=print(doc,false,false);    NodeList nodes=doc.getDocumentElement().getElementsByTagName(elementTag);    int limit=nodes.getLength() < values.size() ? nodes.getLength() : values.size();    for (int i=0; i < limit; i++) {      Node element=nodes.item(i);      element=removeChildren(element);      Text textNode=doc.createTextNode((String)values.get(i));      element.appendChild(textNode);    }    if (values.size() > nodes.getLength()) {      Element parent=(Element)nodes.item(0).getParentNode();      for (int i=nodes.getLength(); i < values.size(); i++) {        if ((values.get(i) != null) && (!((String)values.get(i)).trim().equals(""))) {          Element newElement=doc.createElement(elementTag);          Text textNode=doc.createTextNode((String)values.get(i));          newElement.appendChild(textNode);          parent.appendChild(newElement);        }      }    }    String newXMLStr=print(doc,false,false);    if (overwrite) {      file=new File(xmlFile);      file.renameTo(new File(xmlFile + ".bak"));      fw=new FileWriter(file);      fw.write(newXMLStr);      fw.flush();    }    return newXMLStr;  } catch (  Exception ex) {    ex.printStackTrace();    throw new DOMException(DOMException.INVALID_MODIFICATION_ERR,"Error replacing Element text " + ex.toString());  } finally {    try {      if (fw != null)       fw.close();    } catch (    IOException ex) {    }    file=null;    fw=null;    doc=null;  }}  }
class C{  protected Long addToConflationMap(Conflatable event,Long newPosition){  String r=event.getRegionToConflate();  ConcurrentMap latestIndexesForRegion=(ConcurrentMap)this.indexes.get(r);  if (latestIndexesForRegion == null) {synchronized (HARegionQueue.this) {      if ((latestIndexesForRegion=(ConcurrentMap)this.indexes.get(r)) == null) {        latestIndexesForRegion=createConcurrentMap();        Map newMap=new HashMap(this.indexes);        newMap.put(r,latestIndexesForRegion);        this.indexes=Collections.unmodifiableMap(newMap);      }    }  }  Object key=event.getKeyToConflate();  Long previousPosition=(Long)latestIndexesForRegion.put(key,newPosition);  return previousPosition;}  }
class C{  private int computeVisualLength(CharSequence indent){  final int tabSize=fPrefs.prefTabSize;  int length=0;  for (int i=0; i < indent.length(); i++) {    char ch=indent.charAt(i);switch (ch) {case '\t':      if (tabSize > 0) {        int reminder=length % tabSize;        length+=tabSize - reminder;      }    break;case ' ':  length++;break;}}return length;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:45.009 -0500",hash_original_method="6313F45FC494FF406CD3064C58B63747",hash_generated_method="C370A03C37745247C8F94146A819EC26") public AttributesImpl(){  length=0;  data=null;}  }
class C{  private String sql_select(String vendorName,String catalogName,String schemaName,String tableName,String tableAlias,ArrayList<String> columnNames,ArrayList<String> aliasNames,ArrayList<String> conditions,ArrayList<String> sortColumns,boolean isDistinct){  return sql_select(vendorName,catalogName,schemaName,tableName,tableAlias,columnNames,aliasNames,null,null,null,null,conditions,sortColumns,isDistinct);}  }
class C{  @Override public int hashCode(){  return packageName.hashCode();}  }
class C{  public boolean mousePressed(Minecraft mc,int p_146116_2_,int p_146116_3_){  return this.enabled && this.visible && p_146116_2_ >= posX && p_146116_3_ >= posY && p_146116_2_ < posX + width && p_146116_3_ < posY + height;}  }
class C{  public RecurrenceRule(Recurrence recur){  super(recur);}  }
class C{  public boolean equals(Object other){  if (!(other instanceof RouteList))   return false;  RouteList that=(RouteList)other;  if (this.size() != that.size())   return false;  ListIterator<Route> it=this.listIterator();  ListIterator<Route> it1=that.listIterator();  while (it.hasNext()) {    Route route=(Route)it.next();    Route route1=(Route)it1.next();    if (!route.equals(route1))     return false;  }  return true;}  }
class C{  public static Integer number(final String text){  if (text.equals("no") || text.equals("zero")) {    return 0;  } else   if (text.equals("a") || text.equals("an")) {    return 1;  } else   if (text.equals("one")) {    return 1;  } else   if (text.equals("two")) {    return 2;  } else   if (text.equals("three")) {    return 3;  } else   if (text.equals("four")) {    return 4;  } else   if (text.equals("five")) {    return 5;  } else   if (text.equals("six")) {    return 6;  } else   if (text.equals("seven")) {    return 7;  } else   if (text.equals("eight")) {    return 8;  } else   if (text.equals("nine")) {    return 9;  } else   if (text.equals("ten")) {    return 10;  } else   if (text.equals("eleven")) {    return 11;  } else   if (text.equals("twelve")) {    return 12;  } else {    return null;  }}  }
class C{  public Builder withButtonSize(int size){  size=convertToPixels(size,scale);  params=new FrameLayout.LayoutParams(size,size);  return this;}  }
class C{  @Subscribe(thread=EventThread.IMMEDIATE,tags={@Tag(Constants.EventType.TAG_STORY)}) public void heardFromMouse(String mouseWar){  Timber.e("Just heard from mouse: " + mouseWar + " from "+ Thread.currentThread());}  }
class C{  public NetworkSystemRestRep deregister(URI id){  return client.post(NetworkSystemRestRep.class,getIdUrl() + "/deregister",id);}  }
class C{  private void canonicalizeXPathNodeSet(Node currentNode) throws XMLSignatureException, IOException {  int currentNodeType=currentNode.getNodeType();switch (currentNodeType) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.ATTRIBUTE_NODE:    throw new XMLSignatureException("empty");case Node.DOCUMENT_NODE:  this.writer.write(HTMLPrefix);for (Node currentChild=currentNode.getFirstChild(); currentChild != null; currentChild=currentChild.getNextSibling()) {  this.canonicalizeXPathNodeSet(currentChild);}this.writer.write(HTMLSuffix);break;case Node.COMMENT_NODE:if (this.xpathNodeSet.contains(currentNode)) {this.writer.write(HTMLIncludePrefix);} else {this.writer.write(HTMLExcludePrefix);}int position=getPositionRelativeToDocumentElement(currentNode);if (position == NODE_AFTER_DOCUMENT_ELEMENT) {this.writer.write("\n");}this.outputCommentToWriter((Comment)currentNode);if (position == NODE_BEFORE_DOCUMENT_ELEMENT) {this.writer.write("\n");}this.writer.write(HTMLIncludeOrExcludeSuffix);break;case Node.PROCESSING_INSTRUCTION_NODE:if (this.xpathNodeSet.contains(currentNode)) {this.writer.write(HTMLIncludePrefix);} else {this.writer.write(HTMLExcludePrefix);}position=getPositionRelativeToDocumentElement(currentNode);if (position == NODE_AFTER_DOCUMENT_ELEMENT) {this.writer.write("\n");}this.outputPItoWriter((ProcessingInstruction)currentNode);if (position == NODE_BEFORE_DOCUMENT_ELEMENT) {this.writer.write("\n");}this.writer.write(HTMLIncludeOrExcludeSuffix);break;case Node.TEXT_NODE:case Node.CDATA_SECTION_NODE:if (this.xpathNodeSet.contains(currentNode)) {this.writer.write(HTMLIncludePrefix);} else {this.writer.write(HTMLExcludePrefix);}outputTextToWriter(currentNode.getNodeValue());for (Node nextSibling=currentNode.getNextSibling(); (nextSibling != null) && ((nextSibling.getNodeType() == Node.TEXT_NODE) || (nextSibling.getNodeType() == Node.CDATA_SECTION_NODE)); nextSibling=nextSibling.getNextSibling()) {this.outputTextToWriter(nextSibling.getNodeValue());}this.writer.write(HTMLIncludeOrExcludeSuffix);break;case Node.ELEMENT_NODE:Element currentElement=(Element)currentNode;if (this.xpathNodeSet.contains(currentNode)) {this.writer.write(HTMLIncludePrefix);} else {this.writer.write(HTMLExcludePrefix);}this.writer.write("&lt;");this.writer.write(currentElement.getTagName());this.writer.write(HTMLIncludeOrExcludeSuffix);NamedNodeMap attrs=currentElement.getAttributes();int attrsLength=attrs.getLength();Attr attrs2[]=new Attr[attrsLength];for (int i=0; i < attrsLength; i++) {attrs2[i]=(Attr)attrs.item(i);}Arrays.sort(attrs2,ATTR_COMPARE);Object attrs3[]=attrs2;for (int i=0; i < attrsLength; i++) {Attr a=(Attr)attrs3[i];boolean included=this.xpathNodeSet.contains(a);boolean inclusive=this.inclusiveNamespaces.contains(a.getName());if (included) {if (inclusive) {this.writer.write(HTMLIncludedInclusiveNamespacePrefix);} else {this.writer.write(HTMLIncludePrefix);}} else {if (inclusive) {this.writer.write(HTMLExcludedInclusiveNamespacePrefix);} else {this.writer.write(HTMLExcludePrefix);}}this.outputAttrToWriter(a.getNodeName(),a.getNodeValue());this.writer.write(HTMLIncludeOrExcludeSuffix);}if (this.xpathNodeSet.contains(currentNode)) {this.writer.write(HTMLIncludePrefix);} else {this.writer.write(HTMLExcludePrefix);}this.writer.write("&gt;");this.writer.write(HTMLIncludeOrExcludeSuffix);for (Node currentChild=currentNode.getFirstChild(); currentChild != null; currentChild=currentChild.getNextSibling()) {this.canonicalizeXPathNodeSet(currentChild);}if (this.xpathNodeSet.contains(currentNode)) {this.writer.write(HTMLIncludePrefix);} else {this.writer.write(HTMLExcludePrefix);}this.writer.write("&lt;/");this.writer.write(currentElement.getTagName());this.writer.write("&gt;");this.writer.write(HTMLIncludeOrExcludeSuffix);break;case Node.DOCUMENT_TYPE_NODE:default :break;}}  }
class C{  @Override protected void doAction(){  KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();  KeyStoreHistory[] histories=kseFrame.getKeyStoreHistories();  while (histories.length > 1) {    int activeIndex=kseFrame.findKeyStoreIndex(history.getCurrentState().getKeyStore());    int nextCloseIndex=(activeIndex == 0) ? 1 : 0;    if (!closeKeyStore(histories[nextCloseIndex])) {      break;    }    histories=kseFrame.getKeyStoreHistories();  }}  }
class C{  public ParkingOccupancyBins(){  init();}  }
class C{  @ValidationErrorPage(value=INDEX) @Action(value="/receipts/collectionsWorkflow-submitCollections") public String submitCollections(){  wfAction=CollectionConstants.WF_ACTION_SUBMIT;  return updateReceiptWorkflowStatus(wfAction,remarks);}  }
class C{  public ScatterPlotDisplayPanelOld(ScatterPlotOld scatterPlot){  this.scatterPlot=scatterPlot;  if (scatterPlot == null) {    throw new NullPointerException("Given scatter plot must be null");  }  this.addMouseMotionListener(new MouseMovementListener());  this.setToolTipText(" ");}  }
class C{  protected void verBuscadorExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  saveCurrentInvocation(KeysClientsInvocations.DESCRIPCION_LISTAS_DESCRIPTORAS_DESCRIPTOR_BUSQ,request);  request.setAttribute(DescripcionConstants.LISTAS_DESCRIPTORAS_KEY,getGestionDescripcionBI(request).getListasDescriptoras());  setReturnActionFordward(request,mapping.findForward("resultado_busqueda_descriptores"));}  }
class C{  public void update(byte[] buffer){  update(buffer,0,buffer.length);}  }
class C{  public boolean worldReadable(){  return mWorldReadable;}  }
class C{  public static boolean isNull(final Object model,final String columnName){  if (model == null) {    return true;  } else   if (GridTabWrapper.isHandled(model)) {    return GridTabWrapper.isNull(model,columnName);  } else   if (POWrapper.isHandled(model)) {    return POWrapper.isNull(model,columnName);  } else {    throw new AdempiereException("Model wrapping is not supported for " + model + " (class:"+ model.getClass()+ ")");  }}  }
class C{  public long nrBits(){  return this.nrBits;}  }
class C{  protected synchronized void pageSelectionChanged(IWorkbenchPart part,ISelection selection){  if (!(selection instanceof IStructuredSelection)) {    return;  }  Object firstSelection=((IStructuredSelection)selection).getFirstElement();  CnATreeElement selectedElement=(CnATreeElement)firstSelection;  if (LOG.isDebugEnabled()) {    LOG.debug("Selection changed, selected element: " + selectedElement);  }  if (firstSelection instanceof CnATreeElement) {    if (this.element != null && selectedElement == this.element) {      return;    }    this.element=selectedElement;    drawChart();  }}  }
class C{  public void onCorruption(SQLiteDatabase dbObj){  Log.e(TAG,"Corruption reported by sqlite on database: " + dbObj.getPath());  if (SQLiteDatabase.hasCodec())   return;  if (!dbObj.isOpen()) {    deleteDatabaseFile(dbObj.getPath());    return;  }  List<Pair<String,String>> attachedDbs=null;  try {    try {      attachedDbs=dbObj.getAttachedDbs();    } catch (    SQLiteException e) {    }    try {      dbObj.close();    } catch (    SQLiteException e) {    }  }  finally {    if (attachedDbs != null) {      for (      Pair<String,String> p : attachedDbs) {        deleteDatabaseFile(p.second);      }    } else {      deleteDatabaseFile(dbObj.getPath());    }  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void fireDataSourceAdded(final int index){  if (listenerList == null) {    listenerList=new ArrayList<ChartListener>();  }  for (  ChartListener listener : listenerList) {    listener.dataSourceAdded(index);  }}  }
class C{  private PriorityQueue<FacilityChargingPrice> updateChargingPrice(PriorityQueue<FacilityChargingPrice> chargingPrice){  while (lastChargingPriceParkingIndex < maxChargableEnergy.size() && getMinimumEnergyThatNeedsToBeCharged() <= 0) {    chargingPrice=addNewParkingChargingPrices(lastChargingPriceParkingIndex,chargingPrice);    lastChargingPriceParkingIndex++;  }  return chargingPrice;}  }
class C{  public JSONArray put(double value) throws JSONException {  Double d=new Double(value);  JSONObject.testValidity(d);  put(d);  return this;}  }
class C{  @SuppressWarnings("unchecked") @Override public void buildAssociations(Instances instances) throws Exception {  double[] confidences, supports;  int[] indices;  ArrayList<Object>[] sortedRuleSet;  double necSupport=0;  instances=new Instances(instances);  if (m_removeMissingCols) {    instances=removeMissingColumns(instances);  }  if (m_car && m_metricType != CONFIDENCE) {    throw new Exception("For CAR-Mining metric type has to be confidence!");  }  if (m_car) {    if (m_classIndex == -1) {      instances.setClassIndex(instances.numAttributes() - 1);    } else     if (m_classIndex <= instances.numAttributes() && m_classIndex > 0) {      instances.setClassIndex(m_classIndex - 1);    } else {      throw new Exception("Invalid class index.");    }  }  getCapabilities().testWithFail(instances);  m_cycles=0;  double lowerBoundMinSupportToUse=(m_lowerBoundMinSupport * instances.numInstances() < 1.0) ? 1.0 / instances.numInstances() : m_lowerBoundMinSupport;  if (m_car) {    m_instances=LabeledItemSet.divide(instances,false);    m_onlyClass=LabeledItemSet.divide(instances,true);  } else {    m_instances=instances;  }  if (m_car && m_numRules == Integer.MAX_VALUE) {    m_minSupport=lowerBoundMinSupportToUse;  } else {    m_minSupport=1.0 - m_delta;    m_minSupport=(m_minSupport < lowerBoundMinSupportToUse) ? lowerBoundMinSupportToUse : m_minSupport;  }  do {    m_Ls=new ArrayList<ArrayList<Object>>();    m_hashtables=new ArrayList<Hashtable<ItemSet,Integer>>();    m_allTheRules=new ArrayList[6];    m_allTheRules[0]=new ArrayList<Object>();    m_allTheRules[1]=new ArrayList<Object>();    m_allTheRules[2]=new ArrayList<Object>();    m_allTheRules[3]=new ArrayList<Object>();    m_allTheRules[4]=new ArrayList<Object>();    m_allTheRules[5]=new ArrayList<Object>();    sortedRuleSet=new ArrayList[6];    sortedRuleSet[0]=new ArrayList<Object>();    sortedRuleSet[1]=new ArrayList<Object>();    sortedRuleSet[2]=new ArrayList<Object>();    sortedRuleSet[3]=new ArrayList<Object>();    sortedRuleSet[4]=new ArrayList<Object>();    sortedRuleSet[5]=new ArrayList<Object>();    if (!m_car) {      findLargeItemSets();      if (m_significanceLevel != -1 || m_metricType != CONFIDENCE) {        findRulesBruteForce();      } else {        findRulesQuickly();      }    } else {      findLargeCarItemSets();      findCarRulesQuickly();    }    if (m_upperBoundMinSupport < 1.0) {      pruneRulesForUpperBoundSupport();    }    int j=m_allTheRules[2].size() - 1;    supports=new double[m_allTheRules[2].size()];    for (int i=0; i < (j + 1); i++) {      supports[j - i]=((double)((ItemSet)m_allTheRules[1].get(j - i)).support()) * (-1);    }    indices=Utils.stableSort(supports);    for (int i=0; i < (j + 1); i++) {      sortedRuleSet[0].add(m_allTheRules[0].get(indices[j - i]));      sortedRuleSet[1].add(m_allTheRules[1].get(indices[j - i]));      sortedRuleSet[2].add(m_allTheRules[2].get(indices[j - i]));      if (!m_car) {        sortedRuleSet[3].add(m_allTheRules[3].get(indices[j - i]));        sortedRuleSet[4].add(m_allTheRules[4].get(indices[j - i]));        sortedRuleSet[5].add(m_allTheRules[5].get(indices[j - i]));      }    }    m_allTheRules[0].clear();    m_allTheRules[1].clear();    m_allTheRules[2].clear();    m_allTheRules[3].clear();    m_allTheRules[4].clear();    m_allTheRules[5].clear();    confidences=new double[sortedRuleSet[2].size()];    int sortType=2 + m_metricType;    for (int i=0; i < sortedRuleSet[2].size(); i++) {      confidences[i]=((Double)sortedRuleSet[sortType].get(i)).doubleValue();    }    indices=Utils.stableSort(confidences);    for (int i=sortedRuleSet[0].size() - 1; (i >= (sortedRuleSet[0].size() - m_numRules)) && (i >= 0); i--) {      m_allTheRules[0].add(sortedRuleSet[0].get(indices[i]));      m_allTheRules[1].add(sortedRuleSet[1].get(indices[i]));      m_allTheRules[2].add(sortedRuleSet[2].get(indices[i]));      if (!m_car) {        m_allTheRules[3].add(sortedRuleSet[3].get(indices[i]));        m_allTheRules[4].add(sortedRuleSet[4].get(indices[i]));        m_allTheRules[5].add(sortedRuleSet[5].get(indices[i]));      }    }    if (m_verbose) {      if (m_Ls.size() > 1) {        System.out.println(toString());      }    }    if (m_minSupport == lowerBoundMinSupportToUse || m_minSupport - m_delta > lowerBoundMinSupportToUse) {      m_minSupport-=m_delta;    } else {      m_minSupport=lowerBoundMinSupportToUse;    }    necSupport=Math.rint(m_minSupport * m_instances.numInstances());    m_cycles++;  } while ((m_allTheRules[0].size() < m_numRules) && (Utils.grOrEq(m_minSupport,lowerBoundMinSupportToUse)) && (necSupport >= 1));  m_minSupport+=m_delta;}  }
class C{  private void copy(final WritableByteChannel target,final byte[] boundary,final ReadableByteChannel body) throws IOException {  int match=0;  boolean cont=true;  while (cont) {    if (!this.buffer.hasRemaining()) {      this.buffer.clear();      for (int idx=0; idx < match; ++idx) {        this.buffer.put(boundary[idx]);      }      match=0;      if (body.read(this.buffer) == -1) {        break;      }      this.buffer.flip();    }    final ByteBuffer btarget=this.buffer.slice();    final int offset=this.buffer.position();    btarget.limit(0);    while (this.buffer.hasRemaining()) {      final byte data=this.buffer.get();      if (data == boundary[match]) {        ++match;      } else       if (data == boundary[0]) {        match=1;      } else {        match=0;        btarget.limit(this.buffer.position() - offset);      }      if (match == boundary.length) {        cont=false;        break;      }    }    target.write(btarget);  }}  }
class C{  public Body addBody(String language,String body){  language=determineLanguage(language);  Body messageBody=new Body(language,body);  bodies.add(messageBody);  return messageBody;}  }
class C{  @Override public void write(int oneByte) throws IOException {  mSingleByteArray[0]=(byte)(0xff & oneByte);  write(mSingleByteArray);}  }
class C{  WebContents takePrerenderedUrl(IBinder session,String url,String referrer){  ThreadUtils.assertOnUiThread();  if (mPrerender == null || session == null || !session.equals(mPrerender.mSession)) {    return null;  }  WebContents webContents=mPrerender.mWebContents;  String prerenderedUrl=mPrerender.mUrl;  String prerenderReferrer=mPrerender.mReferrer;  if (referrer == null)   referrer="";  mPrerender=null;  if (TextUtils.equals(prerenderedUrl,url) && TextUtils.equals(prerenderReferrer,referrer)) {    return webContents;  }  mExternalPrerenderHandler.cancelCurrentPrerender();  webContents.destroy();  return null;}  }
class C{  public String request(String pathAndParams,String body) throws Exception {  String path=null;  SolrParams params=null;  int idx=pathAndParams.indexOf('?');  if (idx > 0) {    path=pathAndParams.substring(0,idx);    params=SolrRequestParsers.parseQueryString(pathAndParams.substring(idx + 1));  } else {    path=pathAndParams;    params=new MapSolrParams(new HashMap<String,String>());  }  return request(path,params,body);}  }
class C{  private String[] split(String to_split){  if (to_split == null || to_split.length() == 0) {    String[] array=new String[0];    return array;  }  StringBuffer sb=new StringBuffer(to_split.length() + 50);  StringCharacterIterator sci=new StringCharacterIterator(to_split);  int length=0;  for (char c=sci.first(); c != CharacterIterator.DONE; c=sci.next()) {    if (String.valueOf(c).equals(" "))     length++; else     if (sci.getEndIndex() - 1 == sci.getIndex())     length++;  }  String[] array=new String[length];  length=0;  String tmp=new String();  for (char c=sci.first(); c != CharacterIterator.DONE; c=sci.next()) {    if (String.valueOf(c).equals(" ")) {      array[length]=tmp;      tmp=new String();      length++;    } else     if (sci.getEndIndex() - 1 == sci.getIndex()) {      tmp=tmp + String.valueOf(sci.last());      array[length]=tmp;      tmp=new String();      length++;    } else     tmp+=String.valueOf(c);  }  return (array);}  }
class C{  public void enable(RichFormatterFeature feature){  features.add(feature);}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @POST public APIAuthenticationResult createToken(@FormParam("username") String username,@FormParam("password") String password,@FormParam("token") String token,@Context HttpServletRequest consumedRequest,MultivaluedMap<String,String> parameters) throws GuacamoleException {  HttpServletRequest request=new APIRequest(consumedRequest,parameters);  Credentials credentials=getCredentials(request,username,password);  token=authenticationService.authenticate(credentials,token);  GuacamoleSession session=authenticationService.getGuacamoleSession(token);  if (session == null)   throw new GuacamoleResourceNotFoundException("No such token.");  List<UserContext> userContexts=session.getUserContexts();  List<String> authProviderIdentifiers=new ArrayList<String>(userContexts.size());  for (  UserContext userContext : userContexts)   authProviderIdentifiers.add(userContext.getAuthenticationProvider().getIdentifier());  AuthenticatedUser authenticatedUser=session.getAuthenticatedUser();  return new APIAuthenticationResult(token,authenticatedUser.getIdentifier(),authenticatedUser.getAuthenticationProvider().getIdentifier(),authProviderIdentifiers);}  }
class C{  public final boolean sendEmptyMessage(int what){  return mExec.sendEmptyMessage(what);}  }
class C{  public static MPOSTerminal createPOSTerminal(Properties ctx,int orgId,String name,int cashbookId,int bankAccountId,int poPriceListId,int soPriceListid,int warehouseId,int cashBPartnerId,int salesRepId,String trxName) throws OperationException {  MPOSTerminal terminal=new MPOSTerminal(ctx,0,trxName);  terminal.setAD_Org_ID(orgId);  terminal.setName(name);  terminal.setC_CashBook_ID(cashbookId);  terminal.setM_Warehouse_ID(warehouseId);  terminal.setPO_PriceList_ID(poPriceListId);  terminal.setSO_PriceList_ID(soPriceListid);  terminal.setCard_BankAccount_ID(bankAccountId);  terminal.setCheck_BankAccount_ID(bankAccountId);  terminal.setC_CashBPartner_ID(cashBPartnerId);  terminal.setCashBookTransferType(MPOSTerminal.CASHBOOKTRANSFERTYPE_BankAccount);  terminal.setCashTransferBankAccount_ID(bankAccountId);  PoManager.save(terminal);  return terminal;}  }
class C{  private String toString(InputStream in,String charset) throws IOException {  InputStreamReader reader=new InputStreamReader(in,charset);  StringBuilder buffer=new StringBuilder();  char[] chars=new char[1024];  int n;  while ((n=reader.read(chars,0,chars.length)) != -1) {    buffer.append(chars,0,n);  }  return buffer.toString();}  }
class C{  @Override public void onHandleIntent(Intent intent){  assert Looper.myLooper() != Looper.getMainLooper();  if (!sEnableCommunication) {    Log.v(TAG,"Disabled.  Ignoring intent.");    return;  }  if (mGenerator == null) {    Log.e(TAG,"No request generator set.  Ignoring intent.");    return;  }  if (!mStateHasBeenRestored) {    restoreState();  }  if (ACTION_INITIALIZE.equals(intent.getAction())) {    handleInitialize();  } else   if (ACTION_REGISTER_REQUEST.equals(intent.getAction())) {    handleRegisterRequest(intent);  } else   if (ACTION_POST_REQUEST.equals(intent.getAction())) {    handlePostRequestIntent(intent);  } else {    Log.e(TAG,"Got unknown action from intent: " + intent.getAction());  }}  }
class C{  @Override public boolean supportsTransactionIsolationLevel(int level) throws SQLException {  debugCodeCall("supportsTransactionIsolationLevel");  if (level == Connection.TRANSACTION_READ_UNCOMMITTED) {    PreparedStatement prep=conn.prepareAutoCloseStatement("SELECT VALUE FROM INFORMATION_SCHEMA.SETTINGS WHERE NAME=?");    prep.setString(1,"MULTI_THREADED");    ResultSet rs=prep.executeQuery();    if (rs.next() && rs.getString(1).equals("1")) {      return false;    }  }  return true;}  }
class C{  private boolean checkAssignmentType(String assignmentType){  boolean result=false;  if (this.getAssignmentType().equals(assignmentType)) {    result=true;  }  return result;}  }
class C{  public PKCS9Attributes(ObjectIdentifier[] permittedAttributes,DerInputStream in) throws IOException {  if (permittedAttributes != null) {    this.permittedAttributes=new Hashtable<ObjectIdentifier,ObjectIdentifier>(permittedAttributes.length);    for (int i=0; i < permittedAttributes.length; i++)     this.permittedAttributes.put(permittedAttributes[i],permittedAttributes[i]);  } else {    this.permittedAttributes=null;  }  derEncoding=decode(in);}  }
class C{  public Bitmap decodeBestRegion(int requiredWidth,int requiredHeight){  return decodeBestRegion(requiredWidth,requiredHeight,Gravity.CENTER);}  }
class C{  static void parseWrapper(String clazz,ModuleCandidate candidate){  try {    Class c=Class.forName(clazz);    if (RobotBase.class.isAssignableFrom(c) && classLoadable(c) && !Toast.class.isAssignableFrom(c)) {      log.debug("WPILib Class Found: " + clazz + " for candidate: "+ candidate.getModuleFile()+ "... wrapping...");      ModuleWrapper wrapper=new ModuleWrapper(candidate.getModuleFile(),c,candidate);      getContainers().add(new ModuleContainer(wrapper,candidate));    }  } catch (  Throwable e) {    log.debug("Could not parse wrapper class: " + clazz);    log.debugException(e);  }}  }
class C{  @Override public String toString(){  return block + ":" + dominators;}  }
class C{  private void debugPostGlobal(IR ir,boolean dumpFixedPointResults,boolean dumpFinalMaps,boolean dumpFinalLiveIntervals){  if (DEBUG) {    System.out.println(" .... Completed global live computation ....");    if (VERBOSE) {      System.out.println(" .... CFG:");      System.out.println(ir.cfg);    }  }  if (dumpFixedPointResults) {    printFixedPointResults(ir);  }}  }
class C{  public final void loadInterproceduralDatabases(){  loadPropertyDatabase(getFieldStoreTypeDatabase(),FieldStoreTypeDatabase.DEFAULT_FILENAME,"field store type database");  loadPropertyDatabase(getUnconditionalDerefParamDatabase(),UNCONDITIONAL_DEREF_DB_FILENAME,"unconditional param deref database");  loadPropertyDatabase(getReturnValueNullnessPropertyDatabase(),NONNULL_RETURN_DB_FILENAME,"nonnull return db database");}  }
class C{  public boolean contains(String key){  return get(key) != null;}  }
class C{  public void appendODataToken(final int position,final ODataToken.ODataTokenKind kind,final String uriLiteral){  ODataToken token=new ODataToken(kind,position,uriLiteral);  this.tokens.add(token);}  }
class C{  public String next(){  model.setReadOnlyParams(true);  return BaseBean.OUTCOME_SERVICE_SUBSCRIBE;}  }
class C{  private void sendToSubscriptionAddedMail(Subscription subscription,List<UsageLicense> usageLicenses){  if (subscription.getStatus() != SubscriptionStatus.ACTIVE) {    return;  }  EmailType emailType=useAccessInfo(subscription) ? EmailType.SUBSCRIPTION_USER_ADDED_ACCESSTYPE_DIRECT : EmailType.SUBSCRIPTION_USER_ADDED;  Long marketplaceKey=null;  if (subscription.getMarketplace() != null) {    marketplaceKey=Long.valueOf(subscription.getMarketplace().getKey());  }  SendMailPayload payload=new SendMailPayload();  for (  UsageLicense usageLicense : usageLicenses) {    String accessInfo=getAccessInfo(subscription,usageLicense.getUser());    if (isUsableAWSAccessInfo(accessInfo)) {      payload.addMailObjectForUser(usageLicense.getUser().getKey(),EmailType.SUBSCRIPTION_USER_ADDED_ACCESSINFO,new Object[]{subscription.getSubscriptionId(),getPublicDNS(accessInfo),getIPAddress(accessInfo),getKeyPairName(accessInfo)},marketplaceKey);    } else {      payload.addMailObjectForUser(usageLicense.getUser().getKey(),emailType,new Object[]{subscription.getSubscriptionId(),accessInfo},marketplaceKey);    }  }  TaskMessage message=new TaskMessage(SendMailHandler.class,payload);  tqs.sendAllMessages(Collections.singletonList(message));}  }
class C{  @Override public void skip(final long itemsCount) throws IOException {}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  this.flag=true;}  }
class C{  public int updateRaw(DatabaseConnection connection,String statement,String[] arguments) throws SQLException {  logger.debug("running raw update statement: {}",statement);  if (arguments.length > 0) {    logger.trace("update arguments: {}",(Object)arguments);  }  CompiledStatement compiledStatement=connection.compileStatement(statement,StatementType.UPDATE,noFieldTypes,DatabaseConnection.DEFAULT_RESULT_FLAGS);  try {    assignStatementArguments(compiledStatement,arguments);    return compiledStatement.runUpdate();  }  finally {    compiledStatement.close();  }}  }
class C{  @SuppressWarnings("ConstantConditions") public void testUpdateParentRoot() throws Exception {  if (!propertiesSupported())   return;  Map<String,String> props=properties("owner","group","0555");  create(igfs,paths(DIR),null);  igfs.update(DIR,props);  if (dual)   assertEquals(props,igfsSecondary.properties(DIR.toString()));  assertEquals(props,igfs.info(DIR).properties());}  }
class C{  protected String concatFields(SolrInputDocument doc){  StringBuilder sb=new StringBuilder(getExpectedSize(doc,inputFields));  for (  String fieldName : inputFields) {    log.debug("Appending field " + fieldName);    if (doc.containsKey(fieldName)) {      Collection<Object> fieldValues=doc.getFieldValues(fieldName);      if (fieldValues != null) {        for (        Object content : fieldValues) {          if (content instanceof String) {            String stringContent=(String)content;            if (stringContent.length() > maxFieldValueChars) {              sb.append(stringContent.substring(0,maxFieldValueChars));            } else {              sb.append(stringContent);            }            sb.append(" ");            if (sb.length() > maxTotalChars) {              sb.setLength(maxTotalChars);              break;            }          } else {            log.warn("Field " + fieldName + " not a String value, not including in detection");          }        }      }    }  }  return sb.toString();}  }
class C{  public boolean isReference(){  return false;}  }
class C{  private void handleNamedSubqueryClause(final ASTQuery astQuery,final QueryBase queryRoot) throws VisitorException {{    final ASTNamedSubquery aNamedSubquery=(ASTNamedSubquery)astQuery.jjtGetChild(ASTNamedSubquery.class);    if (aNamedSubquery == null) {      return;    }  }  if (!(queryRoot instanceof QueryRoot))   throw new VisitorException("WITH SubSelect AS %namedSet only allowed for top-level query.");  final NamedSubqueriesNode namedSubqueries=new NamedSubqueriesNode();  ((QueryRoot)queryRoot).setNamedSubqueries(namedSubqueries);  final int nchildren=astQuery.jjtGetNumChildren();  for (int i=0; i < nchildren; i++) {    final Node aChild=astQuery.jjtGetChild(i);    if (!(aChild instanceof ASTNamedSubquery))     continue;    final ASTNamedSubquery aNamedSubquery=(ASTNamedSubquery)aChild;    final SubqueryRoot subquery=(SubqueryRoot)aNamedSubquery.jjtAccept(this,queryRoot);    final NamedSubqueryRoot namedSubquery=new NamedSubqueryRoot(subquery.getQueryType(),aNamedSubquery.getName());    namedSubqueries.add(namedSubquery);    for (    BOp arg : subquery.args()) {      namedSubquery.addArg(arg);    }    namedSubquery.copyAll(subquery.annotations());  }}  }
class C{  @NotNull public PsiQuery filter(@NotNull final Class<? extends PsiNamedElement> clazz,@NotNull final String name){  final Set<PsiElement> result=new HashSet<PsiElement>(Arrays.asList(myPsiElements));  for (  final PsiElement element : myPsiElements) {    final PsiNamedElement namedElement=PyUtil.as(element,clazz);    if ((namedElement == null) || (!name.equals(namedElement.getName()))) {      result.remove(element);    }  }  return new PsiQuery(result.toArray(new PsiElement[result.size()]));}  }
class C{  @Override public boolean isInboundDone(){  return isInboundDone || engine_was_closed;}  }
class C{  protected void handleException(Throwable e){  if (endTime == 0) {    endTime=System.currentTimeMillis();  }  Log.logger.log(Level.SEVERE,"Uncaught exception.",e);  status|=sERROR;  ControlThread.signalShutdown();  done=true;}  }
class C{  protected void addDependenciesAndStore(Map<Step,List<StepInstance>> stepToStepInstances){  for (  Step step : stepToStepInstances.keySet()) {    for (    StepInstance stepInstance : stepToStepInstances.get(step)) {      final List<Step> dependsUpon=stepInstance.getStep(jobs).getDependsUpon();      if (dependsUpon != null) {        for (        Step stepRequired : dependsUpon) {          List<StepInstance> candidateStepInstances=stepToStepInstances.get(stepRequired);          if (candidateStepInstances != null) {            for (            StepInstance candidate : candidateStepInstances) {              if (stepInstance.proteinBoundsOverlap(candidate)) {                stepInstance.addDependentStepInstance(candidate);              }            }          }        }      }    }    if (LOGGER.isDebugEnabled()) {      LOGGER.debug("Persisting " + stepToStepInstances.get(step).size() + " StepInstances for Step "+ step.getId());    }  }  stepInstanceDAO.insert(stepToStepInstances);}  }
class C{  private void addDecoration(Decoration d,int index){  if (decorations != null) {    decorationStarts=addToVector(d,index,decorations,decorationStarts);  } else   if (decoration == null) {    decoration=d;  } else {    if (!decoration.equals(d)) {      decorations=new Vector<Decoration>(INITIAL_SIZE);      decorations.addElement(decoration);      decorations.addElement(d);      decorationStarts=new int[INITIAL_SIZE];      decorationStarts[0]=0;      decorationStarts[1]=index;    }  }}  }
class C{  protected void verify(String errorPrefix,String errorSuffix,List<String> requiredDirs,List<String> requiredFiles){  for (  String dir : requiredDirs) {    if (!getFileHandler().exists(dir)) {      throw new ContainerException(errorPrefix + "The [" + dir+ "] directory doesn't exist. "+ errorSuffix);    }    if (!getFileHandler().isDirectory(dir)) {      throw new ContainerException(errorPrefix + "The [" + dir+ "] path should be a directory. "+ errorSuffix);    }    if (getFileHandler().isDirectoryEmpty(dir)) {      throw new ContainerException(errorPrefix + "The [" + dir+ "] directory is empty and it shouldn't be. "+ errorSuffix);    }  }  for (  String file : requiredFiles) {    if (!getFileHandler().exists(file)) {      throw new ContainerException(errorPrefix + "The [" + file+ "] file doesn't exist. "+ errorSuffix);    }  }}  }
class C{  @SuppressWarnings("NullableProblems") @Nullable @Override public AlertDialog show(){  if (!isKeyInPrefs(getContext(),prefsKey)) {    super.show();    markShown();  }  return null;}  }
class C{  public final Vec3D addSelf(Vec3D v){  x+=v.x;  y+=v.y;  z+=v.z;  return this;}  }
class C{  public void savePressed(boolean restartRequired){  if (!checkPortNames()) {    return;  }  if (!checkDups()) {    if (!(JOptionPane.showConfirmDialog(null,rb.getString("MessageLongDupsWarning"),rb.getString("MessageShortDupsWarning"),JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)) {      return;    }  }  saveContents();  final UserPreferencesManager p;  p=InstanceManager.getDefault(UserPreferencesManager.class);  p.resetChangeMade();  if (restartRequired && !InstanceManager.getDefault(ShutDownManager.class).isShuttingDown()) {    JLabel question=new JLabel(MessageFormat.format(rb.getString("MessageLongQuitWarning"),Application.getApplicationName()));    Object[] options={rb.getString("RestartNow"),rb.getString("RestartLater")};    int retVal=JOptionPane.showOptionDialog(this,question,MessageFormat.format(rb.getString("MessageShortQuitWarning"),Application.getApplicationName()),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,options,null);switch (retVal) {case JOptionPane.YES_OPTION:      dispose();    Apps.handleRestart();  break;case JOptionPane.NO_OPTION:break;default :break;}}if (getTopLevelAncestor() != null) {getTopLevelAncestor().setVisible(false);}}  }
class C{  public boolean isStoreAttachmentsOnFileSystem(){  Object oo=get_Value(COLUMNNAME_StoreAttachmentsOnFileSystem);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append(Constants.INDENT);  buffer.append("label: ");  buffer.append(new String(label));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("manufacturerID: ");  buffer.append(new String(manufacturerID));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("model: ");  buffer.append(new String(model));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("serialNumber: ");  buffer.append(new String(serialNumber));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("flags: ");  buffer.append(Functions.tokenInfoFlagsToString(flags));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulMaxSessionCount: ");  buffer.append((ulMaxSessionCount == PKCS11Constants.CK_EFFECTIVELY_INFINITE) ? "CK_EFFECTIVELY_INFINITE" : (ulMaxSessionCount == PKCS11Constants.CK_UNAVAILABLE_INFORMATION) ? "CK_UNAVAILABLE_INFORMATION" : String.valueOf(ulMaxSessionCount));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulSessionCount: ");  buffer.append((ulSessionCount == PKCS11Constants.CK_UNAVAILABLE_INFORMATION) ? "CK_UNAVAILABLE_INFORMATION" : String.valueOf(ulSessionCount));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulMaxRwSessionCount: ");  buffer.append((ulMaxRwSessionCount == PKCS11Constants.CK_EFFECTIVELY_INFINITE) ? "CK_EFFECTIVELY_INFINITE" : (ulMaxRwSessionCount == PKCS11Constants.CK_UNAVAILABLE_INFORMATION) ? "CK_UNAVAILABLE_INFORMATION" : String.valueOf(ulMaxRwSessionCount));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulRwSessionCount: ");  buffer.append((ulRwSessionCount == PKCS11Constants.CK_UNAVAILABLE_INFORMATION) ? "CK_UNAVAILABLE_INFORMATION" : String.valueOf(ulRwSessionCount));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulMaxPinLen: ");  buffer.append(String.valueOf(ulMaxPinLen));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulMinPinLen: ");  buffer.append(String.valueOf(ulMinPinLen));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulTotalPublicMemory: ");  buffer.append((ulTotalPublicMemory == PKCS11Constants.CK_UNAVAILABLE_INFORMATION) ? "CK_UNAVAILABLE_INFORMATION" : String.valueOf(ulTotalPublicMemory));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulFreePublicMemory: ");  buffer.append((ulFreePublicMemory == PKCS11Constants.CK_UNAVAILABLE_INFORMATION) ? "CK_UNAVAILABLE_INFORMATION" : String.valueOf(ulFreePublicMemory));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulTotalPrivateMemory: ");  buffer.append((ulTotalPrivateMemory == PKCS11Constants.CK_UNAVAILABLE_INFORMATION) ? "CK_UNAVAILABLE_INFORMATION" : String.valueOf(ulTotalPrivateMemory));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("ulFreePrivateMemory: ");  buffer.append((ulFreePrivateMemory == PKCS11Constants.CK_UNAVAILABLE_INFORMATION) ? "CK_UNAVAILABLE_INFORMATION" : String.valueOf(ulFreePrivateMemory));  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("hardwareVersion: ");  buffer.append(hardwareVersion.toString());  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("firmwareVersion: ");  buffer.append(firmwareVersion.toString());  buffer.append(Constants.NEWLINE);  buffer.append(Constants.INDENT);  buffer.append("utcTime: ");  buffer.append(new String(utcTime));  return buffer.toString();}  }
class C{  public String optString(int index){  return optString(index,"");}  }
class C{  public static FloatRange fixed(float num){  return new FloatRange(num,num);}  }
class C{  public TraceStateEnteredItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private static int[] add(int[] x,long val){  int[] y;  long sum=0;  int xIndex=x.length;  int[] result;  int highWord=(int)(val >>> 32);  if (highWord == 0) {    result=new int[xIndex];    sum=(x[--xIndex] & LONG_MASK) + val;    result[xIndex]=(int)sum;  } else {    if (xIndex == 1) {      result=new int[2];      sum=val + (x[0] & LONG_MASK);      result[1]=(int)sum;      result[0]=(int)(sum >>> 32);      return result;    } else {      result=new int[xIndex];      sum=(x[--xIndex] & LONG_MASK) + (val & LONG_MASK);      result[xIndex]=(int)sum;      sum=(x[--xIndex] & LONG_MASK) + (highWord & LONG_MASK) + (sum >>> 32);      result[xIndex]=(int)sum;    }  }  boolean carry=(sum >>> 32 != 0);  while (xIndex > 0 && carry)   carry=((result[--xIndex]=x[xIndex] + 1) == 0);  while (xIndex > 0)   result[--xIndex]=x[xIndex];  if (carry) {    int bigger[]=new int[result.length + 1];    System.arraycopy(result,0,bigger,1,result.length);    bigger[0]=0x01;    return bigger;  }  return result;}  }
class C{  public void start(final IN input){  final TimerHandle handle=new TimerHandle(this,input,delay,interval,repeatCount);  handle.start();}  }
class C{  public static float calculateHeight(float left,float right,float targetAspectRatio){  final float width=right - left;  final float height=width / targetAspectRatio;  return height;}  }
class C{  public ExtensionDescription(Class<? extends Extension> extensionClass,XmlNamespace namespace,String localName){  this(extensionClass,namespace,localName,false,false,false);}  }
class C{  public ArrayVal(Collection<Double> values){  array=values.stream().mapToDouble(null).toArray();  hashcode=Arrays.hashCode(array);}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public int write(Writer writer,ResultSet rs) throws SQLException {  this.output=writer;  return writeResultSet(rs);}  }
class C{  public void removeQValue(){  removeParameter("q");}  }
class C{  Iterator<HeapOperand<Object>> iterateHeapUses(HeapVariable<Object> A){  HashSet<HeapOperand<Object>> u=UseChain.get(A);  return u.iterator();}  }
class C{  public long dataSizeUpToWindow(long windowId){  lock.readLock().lock();  try {    long totalSize=0;    for (    long winId : windowToBlockIds.keySet()) {      totalSize+=dataSizeOfWindow(winId);    }    return totalSize;  }  finally {    lock.readLock().unlock();  }}  }
class C{  public static void e(String msg){  if (BuildConfig.DEBUG)   android.util.Log.e(TAG,buildMessage(msg));}  }
class C{  void handleError(@NotNull Throwable exception,String commandName){  if (getErrorCode(exception) == ErrorCodes.UNABLE_GET_PRIVATE_SSH_KEY) {    dialogFactory.createMessageDialog(commandName,constant.messagesUnableGetSshKey(),null).show();    return;  }  String errorMessage=exception.getMessage();  if (errorMessage == null) {switch (commandName) {case BRANCH_CREATE_COMMAND_NAME:      errorMessage=constant.branchCreateFailed();    break;case BRANCH_DELETE_COMMAND_NAME:  errorMessage=constant.branchDeleteFailed();break;case BRANCH_LIST_COMMAND_NAME:errorMessage=constant.branchesListFailed();break;case BRANCH_RENAME_COMMAND_NAME:errorMessage=constant.branchRenameFailed();break;case BRANCH_CHECKOUT_COMMAND_NAME:errorMessage=constant.branchCheckoutFailed();break;}}GitOutputConsole console=gitOutputConsoleFactory.create(commandName);printGitMessage(errorMessage,console);consolesPanelPresenter.addCommandOutput(appContext.getDevMachine().getId(),console);notificationManager.notify(errorMessage,FAIL,FLOAT_MODE);}  }
class C{  public static int toAscii(char c){  if (c <= 0xFF) {    return c;  } else {    return 0x3F;  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__LIST_1:    setList_1(LIST_1_EDEFAULT);  return;case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__NAME_1:setName_1(NAME_1_EDEFAULT);return;case UmplePackage.ANONYMOUS_COMPLEX_ATTRIBUTE_1__TYPE_1:setType_1(TYPE_1_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public String loginComplete(int AD_Client_ID,int AD_Org_ID,int AD_Role_ID,int AD_User_ID){  for (int i=0; i < m_validators.size(); i++) {    ModelValidator validator=(ModelValidator)m_validators.get(i);    if (AD_Client_ID == validator.getAD_Client_ID() || m_globalValidators.contains(validator)) {      String error=validator.login(AD_Org_ID,AD_Role_ID,AD_User_ID);      if (error != null && error.length() > 0)       return error;    }  }  List<MRule> loginRules=MRule.getModelValidatorLoginRules(Env.getCtx());  if (loginRules != null) {    for (    MRule loginRule : loginRules) {      if (loginRule.getRuleType().equals(MRule.RULETYPE_JSR223ScriptingAPIs) && loginRule.getEventType().equals(MRule.EVENTTYPE_ModelValidatorLoginEvent)) {        String error;        try {          ScriptEngine engine=loginRule.getScriptEngine();          MRule.setContext(engine,Env.getCtx(),0);          engine.put(MRule.ARGUMENTS_PREFIX + "Ctx",Env.getCtx());          engine.put(MRule.ARGUMENTS_PREFIX + "AD_Client_ID",AD_Client_ID);          engine.put(MRule.ARGUMENTS_PREFIX + "AD_Org_ID",AD_Org_ID);          engine.put(MRule.ARGUMENTS_PREFIX + "AD_Role_ID",AD_Role_ID);          engine.put(MRule.ARGUMENTS_PREFIX + "AD_User_ID",AD_User_ID);          Object retval=engine.eval(loginRule.getScript());          error=(retval == null ? "" : retval.toString());        } catch (        Exception e) {          e.printStackTrace();          error=e.toString();        }        if (error != null && error.length() > 0)         return error;      }    }  }  if (AD_User_ID == 0 && AD_Role_ID == 0)   ; else   if (missingModelValidationMessage != null) {    MSystem system=MSystem.get(Env.getCtx());    if (system.isFailOnMissingModelValidator())     return missingModelValidationMessage;  }  return null;}  }
class C{  private void doQueryComputeResources(ComputeDescriptionService.ComputeDescription desc,ResourceAllocationTaskState currentState,Collection<String> computeDescriptionLinks){  if (currentState.computeType == null) {    throw new IllegalArgumentException("computeType not set");  }  String kind=computeDescriptionLinks == null ? Utils.buildKind(ComputeDescriptionService.ComputeDescription.class) : Utils.buildKind(ComputeService.ComputeState.class);  QueryTask.Query kindClause=new QueryTask.Query().setTermPropertyName(ServiceDocument.FIELD_NAME_KIND).setTermMatchValue(kind);  QueryTask q=new QueryTask();  q.querySpec=new QueryTask.QuerySpecification();  q.querySpec.query.addBooleanClause(kindClause);  q.tenantLinks=currentState.tenantLinks;  if (computeDescriptionLinks == null) {    q.taskInfo.isDirect=true;    QueryTask.Query hostTypeClause=new QueryTask.Query().setTermPropertyName(QueryTask.QuerySpecification.buildCollectionItemName(ComputeDescriptionService.ComputeDescription.FIELD_NAME_SUPPORTED_CHILDREN)).setTermMatchValue(currentState.computeType);    q.querySpec.query.addBooleanClause(hostTypeClause);    if (desc.zoneId != null && !desc.zoneId.isEmpty()) {      QueryTask.Query zoneIdClause=new QueryTask.Query().setTermPropertyName(ComputeDescriptionService.ComputeDescription.FIELD_NAME_ZONE_ID).setTermMatchValue(desc.zoneId);      q.querySpec.query.addBooleanClause(zoneIdClause);    }  } else {    q.taskInfo.isDirect=false;    q.documentExpirationTimeMicros=currentState.documentExpirationTimeMicros;    QueryTask.Query resourcePoolClause=new QueryTask.Query().setTermPropertyName(ComputeService.ComputeState.FIELD_NAME_RESOURCE_POOL_LINK).setTermMatchValue(currentState.resourcePoolLink);    q.querySpec.query.addBooleanClause(resourcePoolClause);    QueryTask.Query descriptionLinkClause=new QueryTask.Query();    for (    String cdLink : computeDescriptionLinks) {      QueryTask.Query cdClause=new QueryTask.Query().setTermPropertyName(ComputeService.ComputeState.FIELD_NAME_DESCRIPTION_LINK).setTermMatchValue(cdLink);      cdClause.occurance=Occurance.SHOULD_OCCUR;      descriptionLinkClause.addBooleanClause(cdClause);      if (computeDescriptionLinks.size() == 1) {        descriptionLinkClause=cdClause;        descriptionLinkClause.occurance=Occurance.MUST_OCCUR;      }    }    q.querySpec.query.addBooleanClause(descriptionLinkClause);  }  Operation.CompletionHandler c=null;  Operation postQuery=Operation.createPost(this,ServiceUriPaths.CORE_QUERY_TASKS).setBody(q).setCompletion(c);  sendRequest(postQuery);}  }
class C{  public PrintException(Exception e){  super(e);}  }
class C{  protected String parseEmergencyManagementSymCode(String symCode){  StringBuilder sb=new StringBuilder();  String s=symCode.substring(0,1);  if (s != null && s.equalsIgnoreCase(SymbologyConstants.SCHEME_EMERGENCY_MANAGEMENT))   this.setScheme(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.scheme"));  s=symCode.substring(1,2);  if (SymbologyConstants.STANDARD_IDENTITY_ALL.contains(s.toUpperCase()))   this.setStandardIdentity(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.standardIdentity"));  s=symCode.substring(2,3);  if (SymbologyConstants.CATEGORY_ALL_EMERGENCY_MANAGEMENT.contains(s.toUpperCase()))   this.setCategory(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.category"));  s=symCode.substring(3,4);  if (SymbologyConstants.STATUS_ALL_UEI_SIGINT_SO_EM.contains(s.toUpperCase()))   this.setStatus(s); else   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.status"));  s=symCode.substring(4,10);  if (!"------".equals(s))   this.setFunctionId(s);  s=symCode.substring(10,12);  if (SymbologyConstants.INSTALLATION_ALL.contains(s.toUpperCase()) || SymbologyConstants.MOBILITY_ALL.contains(s.toUpperCase())) {    this.setSymbolModifier(s);  } else   if (!"--".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.symbolModifier"));  s=symCode.substring(12,14);  if (!"--".equals(s))   this.setCountryCode(s);  s=symCode.substring(14,15);  if (SymbologyConstants.ORDER_OF_BATTLE_ALL_UEI_SIGINT_SO_EM.contains(s.toUpperCase()))   this.setOrderOfBattle(s); else   if (!"-".equals(s))   sb.append(sb.length() > 0 ? ", " : "").append(Logging.getMessage("term.orderOfBattle"));  return sb.length() > 0 ? Logging.getMessage("Symbology.SymbolCodeFieldsUnrecognized",sb.toString(),symCode) : null;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.PARENTHESIZED_EXPRESSION__EXPRESSION:    setExpression((Expression)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  void syncProgress(SeekBar seekBar){  int progress=seekBar.getProgress();  if (progress != mProgress) {    if (callChangeListener(progress)) {      setProgress(progress,false);    } else {      seekBar.setProgress(mProgress);    }  }}  }
class C{  public UndoableEditEvent(Object source,UndoableEdit edit){  super(source);  myEdit=edit;}  }
class C{  private static int addSuppressWarningsProposalIfPossible(ICompilationUnit cu,ASTNode node,String warningToken,int relevance,Collection<ICommandAccess> proposals){  ChildListPropertyDescriptor property;  String name;  boolean isLocalVariable=false;switch (node.getNodeType()) {case ASTNode.SINGLE_VARIABLE_DECLARATION:    property=SingleVariableDeclaration.MODIFIERS2_PROPERTY;  name=((SingleVariableDeclaration)node).getName().getIdentifier();isLocalVariable=true;break;case ASTNode.VARIABLE_DECLARATION_STATEMENT:property=VariableDeclarationStatement.MODIFIERS2_PROPERTY;name=getFirstFragmentName(((VariableDeclarationStatement)node).fragments());isLocalVariable=true;break;case ASTNode.VARIABLE_DECLARATION_EXPRESSION:property=VariableDeclarationExpression.MODIFIERS2_PROPERTY;name=getFirstFragmentName(((VariableDeclarationExpression)node).fragments());isLocalVariable=true;break;case ASTNode.TYPE_DECLARATION:property=TypeDeclaration.MODIFIERS2_PROPERTY;name=((TypeDeclaration)node).getName().getIdentifier();break;case ASTNode.ANNOTATION_TYPE_DECLARATION:property=AnnotationTypeDeclaration.MODIFIERS2_PROPERTY;name=((AnnotationTypeDeclaration)node).getName().getIdentifier();break;case ASTNode.ENUM_DECLARATION:property=EnumDeclaration.MODIFIERS2_PROPERTY;name=((EnumDeclaration)node).getName().getIdentifier();break;case ASTNode.FIELD_DECLARATION:property=FieldDeclaration.MODIFIERS2_PROPERTY;name=getFirstFragmentName(((FieldDeclaration)node).fragments());break;case ASTNode.METHOD_DECLARATION:property=MethodDeclaration.MODIFIERS2_PROPERTY;name=((MethodDeclaration)node).getName().getIdentifier() + "()";break;case ASTNode.ANNOTATION_TYPE_MEMBER_DECLARATION:property=AnnotationTypeMemberDeclaration.MODIFIERS2_PROPERTY;name=((AnnotationTypeMemberDeclaration)node).getName().getIdentifier() + "()";break;case ASTNode.ENUM_CONSTANT_DECLARATION:property=EnumConstantDeclaration.MODIFIERS2_PROPERTY;name=((EnumConstantDeclaration)node).getName().getIdentifier();break;default :return relevance;}String label=Messages.format(CorrectionMessages.SuppressWarningsSubProcessor_suppress_warnings_label,new String[]{warningToken,BasicElementLabels.getJavaElementName(name)});ASTRewriteCorrectionProposal proposal=new SuppressWarningsProposal(warningToken,label,cu,node,property,relevance);proposals.add(proposal);return isLocalVariable ? relevance - 1 : 0;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(!((Agent)stack.pop()).isReRunsOnly());}  }
class C{  @Override public void write(String value) throws IOException {  write(value.getBytes(defaultCharset));}  }
class C{  public X509CRLHolder(byte[] crlEncoding) throws IOException {  this(parseStream(new ByteArrayInputStream(crlEncoding)));}  }
class C{  public static String removeJava2IANAMapping(String javaEncoding){  return fJava2IANAMap.remove(javaEncoding);}  }
class C{  public AttackByFirePosition(String sidc){  super(sidc);}  }
class C{  public static Thread makeMainThread(){  return new MainThread();}  }
class C{  protected N4EnumLiteralImpl(){  super();}  }
class C{  public OutputPropertiesBuilder(){}  }
class C{  public void printReturn(Vertex equation,Writer writer,String indent,Set<Vertex> elements,Network network,long start,long timeout) throws IOException {  Vertex result=equation.getRelationship(Primitive.RETURN);  writer.write(indent);  writer.write("return");  if (result != null) {    writer.write(" ");    printElement(result,writer,indent,null,null,elements,network);  }  Collection<Relationship> arguments=equation.getRelationships(Primitive.ARGUMENT);  if (arguments != null) {    writer.write(" with (");    for (Iterator<Relationship> iterator=arguments.iterator(); iterator.hasNext(); ) {      Relationship argument=iterator.next();      printElement(argument.getTarget(),writer,indent,null,null,elements,network);      if (iterator.hasNext()) {        writer.write(", ");      }    }    writer.write(")");  }  writer.write(";\r\n\r\n");}  }
class C{  private void addCSSClasses(){  if (!svgp.getCSSClassManager().contains(CSS_MARKER)) {    final CSSClass cls=new CSSClass(this,CSS_MARKER);    cls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_BLUE_VALUE);    cls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,"0.2");    svgp.addCSSClassOrLogError(cls);  }  if (!svgp.getCSSClassManager().contains(CSS_RANGEMARKER)) {    final CSSClass rcls=new CSSClass(this,CSS_RANGEMARKER);    rcls.setStatement(SVGConstants.CSS_FILL_PROPERTY,SVGConstants.CSS_RED_VALUE);    rcls.setStatement(SVGConstants.CSS_OPACITY_PROPERTY,"0.2");    svgp.addCSSClassOrLogError(rcls);  }}  }
class C{  public static CCSprite sprite(String filepath,CGRect rect){  return new CCSprite(filepath,rect);}  }
class C{  @Override protected int sizeOf(String key,Bitmap bitmap){  final int bitmapSize=getBitmapSize(bitmap) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public void error(TranscoderException ex) throws TranscoderException {  System.err.println("ERROR: " + ex.getMessage());}  }
class C{  public boolean isLocked(){  return false;}  }
class C{  public static <Item extends IItem>void handleStates(FastAdapter<Item> fastAdapter,int startPosition,int endPosition){  for (int i=endPosition; i >= startPosition; i--) {    Item updateItem=fastAdapter.getItem(i);    if (updateItem != null) {      if (updateItem.isSelected()) {        fastAdapter.getSelections().add(i);      } else       if (fastAdapter.getSelections().contains(i)) {        fastAdapter.getSelections().remove(i);      }      if (updateItem instanceof IExpandable) {        if (((IExpandable)updateItem).isExpanded() && fastAdapter.getExpanded().indexOfKey(i) < 0) {          fastAdapter.expand(i);        }      }    }  }}  }
class C{  private void processStart(final State current){  try {    if (!isFinalStage(current)) {      sendStageProgressPatch(current,current.taskState.stage);    }  } catch (  Throwable e) {    failTask(e);  }}  }
class C{  public NotificationChain basicSetTypeSpecifier(TypeSpecifier newTypeSpecifier,NotificationChain msgs){  TypeSpecifier oldTypeSpecifier=typeSpecifier;  typeSpecifier=newTypeSpecifier;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TYPE_ALIAS__TYPE_SPECIFIER,oldTypeSpecifier,newTypeSpecifier);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private double betafunction(double[] x){  int dim=x.length;  if (dType == 1) {    double beta=0;    for (int i=0; i < dim; i++) {      beta+=x[i] * x[i];    }    return 2.0 * beta / dim;  } else   if (dType == 2) {    double beta=0;    for (int i=0; i < dim; i++) {      beta+=Math.sqrt(i + 1) * x[i] * x[i];    }    return 2.0 * beta / dim;  } else   if (dType == 3) {    double sum=0;    double xx;    for (int i=0; i < dim; i++) {      xx=2 * x[i];      sum+=(xx * xx - Math.cos(4 * Math.PI * xx) + 1);    }    return 2.0 * sum / dim;  } else   if (dType == 4) {    double sum=0;    double prod=1;    double xx;    for (int i=0; i < dim; i++) {      xx=2 * x[i];      sum+=xx * xx;      prod*=Math.cos(10 * Math.PI * xx / Math.sqrt(i + 1));    }    return 2.0 * (sum - 2 * prod + 2) / dim;  } else {    throw new IllegalStateException();  }}  }
class C{  private final String msgStackToString(ParseException e){  StringBuffer msg;  msg=new StringBuffer("***Parse Error***\n");  if (!expecting.equals(emptyString)) {    msg.append("Was expecting \"");    msg.append(expecting);    msg.append("\"\n");  }  msg.append(e.getShortMessage());  msg.append("\n\nResidual stack trace follows:\n");  int last=msgStackCurrentSize - 10;  if (last < 0)   last=0;  for (int lvi=msgStackCurrentSize; lvi > last; lvi-=2) {    msg.append((String)msgStack[lvi - 2]);    msg.append(" starting at line ");    Token t=(Token)msgStack[lvi - 1];    msg.append(t.beginLine);    msg.append(", column ");    msg.append(t.beginColumn);    msg.append(".\n");  }  return msg.toString();}  }
class C{  public boolean validate(ResponseHeaders networkResponse){  if (networkResponse.headers.getResponseCode() == HttpURLConnection.HTTP_NOT_MODIFIED) {    return true;  }  if (lastModified != null && networkResponse.lastModified != null && networkResponse.lastModified.getTime() < lastModified.getTime()) {    return true;  }  return false;}  }
class C{  public static SteppedPrice toSteppedPrice(VOSteppedPrice voSteppedPrice) throws ValidationException {  SteppedPrice steppedPrice=new SteppedPrice();  validateSteppedPrice(voSteppedPrice);  copyAttributes(voSteppedPrice,steppedPrice);  return steppedPrice;}  }
class C{  protected AbstractMatrix3D vDice(int axis0,int axis1,int axis2){  super.vDice(axis0,axis1,axis2);  int[][] offsets=new int[3][];  offsets[0]=this.sliceOffsets;  offsets[1]=this.rowOffsets;  offsets[2]=this.columnOffsets;  this.sliceOffsets=offsets[axis0];  this.rowOffsets=offsets[axis1];  this.columnOffsets=offsets[axis2];  return this;}  }
class C{  public QueryStringQueryBuilder defaultField(String defaultField){  this.defaultField=defaultField;  return this;}  }
class C{  public static String cutSurrounding(String string,String prefix,String suffix){  int start=0;  int end=string.length();  if (string.startsWith(prefix)) {    start=prefix.length();  }  if (string.endsWith(suffix)) {    end-=suffix.length();  }  return string.substring(start,end);}  }
class C{  public static void parseActionString(OFFlowMod flowMod,String actionstr,Logger log){  List<OFAction> actions=new LinkedList<OFAction>();  int actionsLength=0;  if (actionstr != null) {    actionstr=actionstr.toLowerCase();    for (    String subaction : actionstr.split(",")) {      String action=subaction.split("[=:]")[0];      SubActionStruct subaction_struct=null;      if (action.equals("output")) {        subaction_struct=decode_output(subaction,log);      } else       if (action.equals("enqueue")) {        subaction_struct=decode_enqueue(subaction,log);      } else       if (action.equals("strip-vlan")) {        subaction_struct=decode_strip_vlan(subaction,log);      } else       if (action.equals("set-vlan-id")) {        subaction_struct=decode_set_vlan_id(subaction,log);      } else       if (action.equals("set-vlan-priority")) {        subaction_struct=decode_set_vlan_priority(subaction,log);      } else       if (action.equals("set-src-mac")) {        subaction_struct=decode_set_src_mac(subaction,log);      } else       if (action.equals("set-dst-mac")) {        subaction_struct=decode_set_dst_mac(subaction,log);      } else       if (action.equals("set-tos-bits")) {        subaction_struct=decode_set_tos_bits(subaction,log);      } else       if (action.equals("set-src-ip")) {        subaction_struct=decode_set_src_ip(subaction,log);      } else       if (action.equals("set-dst-ip")) {        subaction_struct=decode_set_dst_ip(subaction,log);      } else       if (action.equals("set-src-port")) {        subaction_struct=decode_set_src_port(subaction,log);      } else       if (action.equals("set-dst-port")) {        subaction_struct=decode_set_dst_port(subaction,log);      } else {        log.error("Unexpected action '{}', '{}'",action,subaction);      }      if (subaction_struct != null) {        actions.add(subaction_struct.action);        actionsLength+=subaction_struct.len;      }    }  }  log.debug("action {}",actions);  flowMod.setActions(actions);  flowMod.setLengthU(OFFlowMod.MINIMUM_LENGTH + actionsLength);}  }
class C{  public void testDoConfigureSetsPort() throws Exception {  configuration.setProperty(ServletPropertySet.PORT,"123");  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("123","//Server/@ListenPort",config);}  }
class C{  private StructImpl store(Class clazz){  Field[] fieldsArr=clazz.getFields();  StructImpl fieldsMap=new StructImpl();  for (int i=0; i < fieldsArr.length; i++) {    storeField(fieldsArr[i],fieldsMap);  }  map.put(clazz,fieldsMap);  return fieldsMap;}  }
class C{  private void unsupportedOptionMessage(final String optionName){  if (!areJavaClassesCompiled()) {    log("The option " + optionName + " is not supported by InstrumentIdeaExtensions task",Project.MSG_ERR);  }}  }
class C{  public void testFailure(Failure failure) throws Exception {  System.out.println(JUnitUtilities.failureToString(failure));  mostRecentTestPassed=false;}  }
class C{  private void createWorkbookJXL() throws BiffException, IOException {  File file=getFile();  WorkbookSettings workbookSettings=new WorkbookSettings();  if (encoding != null) {    workbookSettings.setEncoding(encoding.name());  }  workbookJXL=Workbook.getWorkbook(file,workbookSettings);}  }
class C{  public SimplifySpanBuild appendMultiClickableSpecialUnitToFirst(SpecialClickableUnit specialClickableUnit,Object... specialUnitOrStrings){  processMultiClickableSpecialUnit(true,specialClickableUnit,specialUnitOrStrings);  return this;}  }
class C{  private static IdUrlPair bestSchedulerInfoMatchGivenPartialId(String partialSchedulerInfoId,String schedulerInfoIdField){  IdUrlPair schedulerInfoPair;  schedulerInfoPair=bestSchedulerInfoMatchLikeValue(partialSchedulerInfoId,schedulerInfoIdField);  if (schedulerInfoPair == null && ElephantContext.instance().getGeneralConf().getBoolean(SEARCH_MATCHES_PARTIAL_CONF,true)) {    schedulerInfoPair=bestSchedulerInfoMatchLikeValue(String.format("%s%%",partialSchedulerInfoId),schedulerInfoIdField);  }  if (schedulerInfoPair == null) {    schedulerInfoPair=new IdUrlPair(partialSchedulerInfoId,"");  }  return schedulerInfoPair;}  }
class C{  public DeserializationContext(final SimpleAccountLookup accountLookup){  this.accountLookup=accountLookup;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:12.318 -0500",hash_original_method="0A6EBDDF0EE93BAA660A9D5D941C1EF5",hash_generated_method="88CB13882D0A251122308F5D591C75C0") private void println(String message){  Log.println(level,tag,message);}  }
class C{  public boolean isSenderAutoConnect(){  return senderAutoConnect;}  }
class C{  private void drawBar(Canvas canvas,float xMin,float yMin,float xMax,float yMax,int scale,int seriesIndex,Paint paint){  float temp;  if (xMin > xMax) {    temp=xMin;    xMin=xMax;    xMax=temp;  }  if (yMin > yMax) {    temp=yMin;    yMin=yMax;    yMax=temp;  }  SimpleSeriesRenderer renderer=mRenderer.getSeriesRendererAt(seriesIndex);  if (renderer.isGradientEnabled()) {    float minY=(float)toScreenPoint(new double[]{0,renderer.getGradientStopValue()},scale)[1];    float maxY=(float)toScreenPoint(new double[]{0,renderer.getGradientStartValue()},scale)[1];    float gradientMinY=Math.max(minY,Math.min(yMin,yMax));    float gradientMaxY=Math.min(maxY,Math.max(yMin,yMax));    int gradientMinColor=renderer.getGradientStopColor();    int gradientMaxColor=renderer.getGradientStartColor();    int gradientStartColor=gradientMaxColor;    int gradientStopColor=gradientMinColor;    if (yMin < minY) {      paint.setColor(gradientMinColor);      canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(gradientMinY),paint);    } else {      gradientStopColor=getGradientPartialColor(gradientMinColor,gradientMaxColor,(maxY - gradientMinY) / (maxY - minY));    }    if (yMax > maxY) {      paint.setColor(gradientMaxColor);      canvas.drawRect(Math.round(xMin),Math.round(gradientMaxY),Math.round(xMax),Math.round(yMax),paint);    } else {      gradientStartColor=getGradientPartialColor(gradientMaxColor,gradientMinColor,(gradientMaxY - minY) / (maxY - minY));    }    GradientDrawable gradient=new GradientDrawable(Orientation.BOTTOM_TOP,new int[]{gradientStartColor,gradientStopColor});    gradient.setBounds(Math.round(xMin),Math.round(gradientMinY),Math.round(xMax),Math.round(gradientMaxY));    gradient.draw(canvas);  } else {    if (Math.abs(yMin - yMax) < 1) {      if (yMin < yMax) {        yMax=yMin + 1;      } else {        yMax=yMin - 1;      }    }    canvas.drawRect(Math.round(xMin),Math.round(yMin),Math.round(xMax),Math.round(yMax),paint);  }}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  private Ref[] functionArg(String name,boolean checkLibrary,FunctionLibFunction flf,char end) throws PageException {  checkLibrary=checkLibrary && flf != null;  ArrayList arr=new ArrayList();  ArrayList arrFuncLibAtt=null;  int libLen=0;  if (checkLibrary) {    arrFuncLibAtt=flf.getArg();    libLen=arrFuncLibAtt.size();  }  int count=0;  Ref ref;  do {    cfml.next();    cfml.removeSpace();    if (cfml.isCurrent(end))     break;    boolean isDynamic=false;    int max=-1;    if (checkLibrary) {      isDynamic=isDynamic(flf);      max=flf.getArgMax();      if (isDynamic) {        if (max != -1 && max <= count)         throw new InterpreterException("too many Attributes in function [" + name + "]");      } else {        if (libLen <= count)         throw new InterpreterException("too many Attributes in function [" + name + "]");      }    }    if (checkLibrary && !isDynamic) {      FunctionLibFunctionArg funcLibAtt=(FunctionLibFunctionArg)arrFuncLibAtt.get(count);      short type=CFTypes.toShort(funcLibAtt.getTypeAsString(),false,CFTypes.TYPE_UNKNOW);      if (type == CFTypes.TYPE_VARIABLE_STRING) {        arr.add(functionArgDeclarationVarString());      } else {        ref=functionArgDeclaration();        arr.add(new Casting(funcLibAtt.getTypeAsString(),type,ref));      }    } else {      arr.add(functionArgDeclaration());    }    cfml.removeSpace();    count++;  } while (cfml.isCurrent(','));  if (!cfml.forwardIfCurrent(end)) {    if (name.startsWith("_json"))     throw new InterpreterException("Invalid Syntax Closing [" + end + "] not found");    throw new InterpreterException("Invalid Syntax Closing [" + end + "] for function ["+ name+ "] not found");  }  if (checkLibrary && flf.getArgMin() > count)   throw new InterpreterException("to less Attributes in function [" + name + "]");  cfml.removeSpace();  return (Ref[])arr.toArray(new Ref[arr.size()]);}  }
class C{  public ImportOperation(IPath containerPath,Object source,IImportStructureProvider provider,IOverwriteQuery overwriteImplementor){  super();  this.destinationPath=containerPath;  this.source=source;  this.provider=provider;  overwriteCallback=overwriteImplementor;}  }
class C{  public boolean isPrimitivesDefaultedForNullValue(){  return this.primitivesDefaultedForNullValue;}  }
class C{  public PoliticalStateOverview(final GameData data,final IUIContext uiContext,final boolean editable){  m_uic=uiContext;  m_data=data;  m_editable=editable;  drawPoliticsUI();}  }
class C{  private FileBuffers(){}  }
class C{  public void XtestFilteringPerformance() throws Exception {  int indexSize=19999;  float fractionCovered=.1f;  String l=t(0);  String u=t((int)(indexSize * 10 * fractionCovered));  SolrQueryRequest req=lrf.makeRequest();  QParser parser=QParser.getParser("foomany_s:[" + l + " TO "+ u+ "]",req);  Query rangeQ=parser.getQuery();  List<Query> filters=new ArrayList<>();  filters.add(rangeQ);  req.close();  parser=QParser.getParser("{!dismax qf=t10_100_ws pf=t10_100_ws ps=20}" + t(0) + ' '+ t(1)+ ' '+ t(2),req);  Query q=parser.getQuery();  createIndex2(indexSize,"foomany_s","t10_100_ws");  doListGen(500,q,filters,false,true);  req.close();}  }
class C{  public boolean hasHiddenAttributes(){  for (  AttributeValue value : this.attributes.values()) {    if (value.isHidden()) {      return true;    }  }  return false;}  }
class C{  private static boolean isNalStartCode(byte[] data,int index){  if (data.length - index <= NAL_START_CODE.length) {    return false;  }  for (int j=0; j < NAL_START_CODE.length; j++) {    if (data[index + j] != NAL_START_CODE[j]) {      return false;    }  }  return true;}  }
class C{  public static boolean checkIfCanInstrument(String className){  for (  String s : getPackagesShouldNotBeInstrumented()) {    if (className.startsWith(s)) {      return false;    }  }  return true;}  }
class C{  public Texture(int width,int height,int pixelFormat) throws Exception {  this.id=glGenTextures();  this.width=width;  this.height=height;  glBindTexture(GL_TEXTURE_2D,this.id);  glTexImage2D(GL_TEXTURE_2D,0,GL_DEPTH_COMPONENT,this.width,this.height,0,pixelFormat,GL_FLOAT,(ByteBuffer)null);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MIN_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_MAG_FILTER,GL_NEAREST);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_S,GL_CLAMP_TO_EDGE);  glTexParameteri(GL_TEXTURE_2D,GL_TEXTURE_WRAP_T,GL_CLAMP_TO_EDGE);}  }
class C{  public void addToRpcSecret(Manager manager,RPC.Secret secret,CRITICAL critical,String userId) throws MitroServletException, SQLException {  DBAudit.ACTION type=critical == CRITICAL.INCLUDE_CRITICAL_DATA ? DBAudit.ACTION.GET_SECRET_WITH_CRITICAL : DBAudit.ACTION.GET_SECRET_WITHOUT_CRITICAL;  secret.encryptedClientData=getClientVisibleDataEncrypted();  Set<Integer> groups=Sets.newHashSet();  Set<Integer> hiddenGroups=Sets.newHashSet();  Set<String> users=Sets.newTreeSet();  secret.groupIdToPublicKeyMap=new HashMap<>();  secret.groupNames=new HashMap<>();  secret.groupMap=new HashMap<>();  final DBServerVisibleSecret svs=getServerVisibleSecret();  secret.king=svs.getKing() == null ? null : svs.getKing().getName();  secret.isViewable=svs.isViewable();  for (  DBGroupSecret dbGroupSecret : svs.getGroupSecrets()) {    DBGroup group=dbGroupSecret.getGroup();    secret.groupIdToPublicKeyMap.put(group.getId(),group.getPublicKeyString());    if (dbGroupSecret.getGroup().isAutoDelete()) {      hiddenGroups.add(dbGroupSecret.getGroup().getId());      for (      DBAcl acl : dbGroupSecret.getGroup().getAcls()) {        if (null != acl.getMemberIdentityId()) {          DBIdentity identity=acl.loadMemberIdentity(manager.identityDao);          users.add(identity.getName());          continue;        }      }    } else {      groups.add(group.getId());      secret.groupNames.put(group.getId(),group.getName());      GroupInfo groupInfo=new GroupInfo();      groupInfo.groupId=group.getId();      groupInfo.name=group.getName();      groupInfo.autoDelete=group.isAutoDelete();      groupInfo.isTopLevelOrg=group.isTopLevelOrganization();      secret.groupMap.put(group.getId(),groupInfo);      if (null == secret.owningOrgId && groupInfo.isTopLevelOrg) {        secret.owningOrgId=groupInfo.groupId;      }      groupInfo.isOrgPrivateGroup=group.isPrivateUserGroup() && (groupInfo.owningOrgId != null);      groupInfo.isNonOrgPrivateGroup=group.isPrivateUserGroup() && (groupInfo.owningOrgId == null);    }  }  secret.hiddenGroups=Lists.newLinkedList(hiddenGroups);  secret.users=Lists.newLinkedList(users);  secret.groups=Lists.newLinkedList(groups);  manager.addAuditLog(type,null,null,null,this.getServerVisibleSecret(),null);  if (CRITICAL.INCLUDE_CRITICAL_DATA_FOR_DISPLAY == critical || CRITICAL.INCLUDE_CRITICAL_DATA == critical) {    secret.encryptedCriticalData=getCriticalDataEncrypted();  } else {    secret.encryptedCriticalData=null;  }  secret.secretId=getServerVisibleSecret().getId();}  }
class C{  public static void shiftValueIntoFlags(final ITranslationEnvironment environment,final long offset,final String value,final OperandSize size,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(value,"Error: Argument value can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final String pfInLsb=environment.getNextVariableString();  final String afInLsb=environment.getNextVariableString();  final String zfInLsb=environment.getNextVariableString();  final String sfInLsb=environment.getNextVariableString();  final String ofInLsb=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(offset,size,value,size,"1",OperandSize.BYTE,Helpers.CARRY_FLAG));  instructions.add(ReilHelpers.createBsh(offset + 1,size,value,size,"-2",size,pfInLsb));  instructions.add(ReilHelpers.createAnd(offset + 2,size,pfInLsb,size,"1",OperandSize.BYTE,Helpers.PARITY_FLAG));  instructions.add(ReilHelpers.createBsh(offset + 3,size,value,size,"-4",size,afInLsb));  instructions.add(ReilHelpers.createAnd(offset + 4,size,afInLsb,size,"1",OperandSize.BYTE,Helpers.AUXILIARY_FLAG));  instructions.add(ReilHelpers.createBsh(offset + 5,size,value,size,"-6",size,zfInLsb));  instructions.add(ReilHelpers.createAnd(offset + 6,size,zfInLsb,size,"1",OperandSize.BYTE,Helpers.ZERO_FLAG));  instructions.add(ReilHelpers.createBsh(offset + 7,size,value,size,"-7",size,sfInLsb));  instructions.add(ReilHelpers.createAnd(offset + 8,size,sfInLsb,size,"1",OperandSize.BYTE,Helpers.SIGN_FLAG));  instructions.add(ReilHelpers.createBsh(offset + 9,size,value,size,"-11",size,ofInLsb));  instructions.add(ReilHelpers.createAnd(offset + 10,size,ofInLsb,size,"1",OperandSize.BYTE,Helpers.OVERFLOW_FLAG));}  }
class C{  public Builder<T> keys(final Iterable<? extends T> keys){  this.keys=keys;  return this;}  }
class C{  public void testTrackPointsTableUpdate(){  Capture<ContentObserver> contentObserverCapture=new Capture<ContentObserver>();  dataSource.registerContentObserver(eq(TrackPointsColumns.CONTENT_URI),capture(contentObserverCapture));  FixedSizeLocationIterator locationIterator=new FixedSizeLocationIterator(1,10,5);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(10L);  trackDataListener1.clearTrackPoints();  locationIterator.expectLocationsDelivered(trackDataListener1);  trackDataListener1.onNewTrackPointsDone();  replay();  trackDataHub.start();  trackDataHub.loadTrack(TRACK_ID);  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE));  verifyAndReset();  locationIterator=new FixedSizeLocationIterator(1,10,5);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(10L);  trackDataListener2.clearTrackPoints();  locationIterator.expectLocationsDelivered(trackDataListener2);  trackDataListener2.onNewTrackPointsDone();  replay();  trackDataHub.registerTrackDataListener(trackDataListener2,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE));  verifyAndReset();  ContentObserver contentObserver=contentObserverCapture.getValue();  locationIterator=new FixedSizeLocationIterator(11,10,1);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(11L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(20L);  locationIterator.expectLocationsDelivered(trackDataListener1);  locationIterator.expectLocationsDelivered(trackDataListener2);  trackDataListener1.onNewTrackPointsDone();  trackDataListener2.onNewTrackPointsDone();  replay();  contentObserver.onChange(false);  verifyAndReset();  locationIterator=new FixedSizeLocationIterator(101,10);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID + 1),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID + 1)).andReturn(110L);  trackDataListener2.clearTrackPoints();  locationIterator.expectLocationsDelivered(trackDataListener2);  trackDataListener2.onNewTrackPointsDone();  replay();  trackDataHub.unregisterTrackDataListener(trackDataListener1);  trackDataHub.loadTrack(TRACK_ID + 1);  verifyAndReset();}  }
class C{  private void LoadELFModuleInfo(ByteBuffer f,SceModule module,int baseAddress,Elf32 elf,int elfOffset) throws IOException {  Elf32ProgramHeader phdr=elf.getProgramHeader(0);  Elf32SectionHeader shdr=elf.getSectionHeader(".rodata.sceModuleInfo");  int moduleInfoAddr;  if (!elf.getHeader().isPRXDetected() && shdr == null) {    log.warn("ELF is not PRX, but has no section headers!");    moduleInfoAddr=(int)(phdr.getP_vaddr() + (phdr.getP_paddr() & 0x7FFFFFFFL) - phdr.getP_offset());    log.warn("Manually locating ModuleInfo at address: 0x" + Integer.toHexString(moduleInfoAddr));    PSPModuleInfo moduleInfo=new PSPModuleInfo();    moduleInfo.read(Memory.getInstance(),moduleInfoAddr);    module.copy(moduleInfo);  } else   if (elf.getHeader().isPRXDetected()) {    moduleInfoAddr=(int)(baseAddress + (phdr.getP_paddr() & 0x7FFFFFFFL) - phdr.getP_offset());    PSPModuleInfo moduleInfo=new PSPModuleInfo();    moduleInfo.read(Memory.getInstance(),moduleInfoAddr);    module.copy(moduleInfo);  } else   if (shdr != null) {    moduleInfoAddr=shdr.getSh_addr(baseAddress);    ;    PSPModuleInfo moduleInfo=new PSPModuleInfo();    moduleInfo.read(Memory.getInstance(),moduleInfoAddr);    module.copy(moduleInfo);  } else {    log.error("ModuleInfo not found!");    return;  }  if (log.isInfoEnabled()) {    log.info(String.format("Found ModuleInfo at 0x%08X, name:'%s', version: %02X%02X, attr: 0x%08X, gp: 0x%08X",moduleInfoAddr,module.modname,module.version[1],module.version[0],module.attribute,module.gp_value));  }  if ((module.attribute & SceModule.PSP_MODULE_KERNEL) != 0) {    log.warn("Kernel mode module detected");  }  if ((module.attribute & SceModule.PSP_MODULE_VSH) != 0) {    log.warn("VSH mode module detected");  }}  }
class C{  public static int parseStatusCode(Hashtable<String,String> headers){  final String status=headers.get(MsrpConstants.HEADER_STATUS);  if (status == null || status.startsWith("000 ")) {    return INVALID_STATUS_RESPONSE;  }  String[] parts=status.split(" ");  if (parts.length < 2) {    return INVALID_STATUS_RESPONSE;  }  try {    return Integer.parseInt(parts[1]);  } catch (  NumberFormatException e) {    return INVALID_STATUS_RESPONSE;  }}  }
class C{  public static Matcher<PrintableResult> isSuccessful(){  return failureCountIs(0);}  }
class C{  protected Instances dataFromXML(Instances header) throws Exception {  Instances result;  Element node;  Vector<Element> list;  list=getChildTags(m_Document.getDocumentElement(),TAG_BODY);  node=list.get(0);  list=getChildTags(node,TAG_INSTANCES);  node=list.get(0);  result=createInstances(header,node);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.347 -0500",hash_original_method="0E5EFEE954A1F8E1BF28B3DC3574519C",hash_generated_method="350A6E6B222DD9E41B1BE938B448060F") public static void cursorLongToContentValues(Cursor cursor,String field,ContentValues values,String key){  int colIndex=cursor.getColumnIndex(field);  if (!cursor.isNull(colIndex)) {    Long value=Long.valueOf(cursor.getLong(colIndex));    values.put(key,value);  } else {    values.put(key,(Long)null);  }}  }
class C{  public boolean isWardenServiceEnabled(){  return _serviceManagementRecordService.isServiceEnabled(Service.WARDEN);}  }
class C{  protected AnnotatableElementImpl(){  super();}  }
class C{  @Override protected GemFireHealth createGemFireHealth(GfManagerAgent system) throws org.apache.geode.admin.AdminException {  if (system == null) {    throw new IllegalStateException(LocalizedStrings.AdminDistributedSystemJmxImpl_GFMANAGERAGENT_MUST_NOT_BE_NULL.toLocalizedString());  }  return new GemFireHealthJmxImpl(system,this);}  }
class C{  public boolean hasStream(){  return hasStream;}  }
class C{  public List<AuditEvent> convertToAuditEvent(Iterable<PersistentAuditEvent> persistentAuditEvents){  if (persistentAuditEvents == null) {    return Collections.emptyList();  }  List<AuditEvent> auditEvents=new ArrayList<>();  for (  PersistentAuditEvent persistentAuditEvent : persistentAuditEvents) {    AuditEvent auditEvent=new AuditEvent(persistentAuditEvent.getAuditEventDate().toDate(),persistentAuditEvent.getPrincipal(),persistentAuditEvent.getAuditEventType(),convertDataToObjects(persistentAuditEvent.getData()));    auditEvents.add(auditEvent);  }  return auditEvents;}  }
class C{  public static int intersectLineLine(double a1x,double a1y,double a2x,double a2y,double b1x,double b1y,double b2x,double b2y,Point2D intersect){  double ua_t=(b2x - b1x) * (a1y - b1y) - (b2y - b1y) * (a1x - b1x);  double ub_t=(a2x - a1x) * (a1y - b1y) - (a2y - a1y) * (a1x - b1x);  double u_b=(b2y - b1y) * (a2x - a1x) - (b2x - b1x) * (a2y - a1y);  if (u_b != 0) {    double ua=ua_t / u_b;    double ub=ub_t / u_b;    if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {      intersect.setLocation(a1x + ua * (a2x - a1x),a1y + ua * (a2y - a1y));      return 1;    } else {      return NO_INTERSECTION;    }  } else {    return (ua_t == 0 || ub_t == 0 ? COINCIDENT : PARALLEL);  }}  }
class C{  private static boolean isEqual(Object obj1,Object obj2){  Object a=obj1;  Object b=obj2;  if (b != null && !(b.toString().contains(" ")) && (NullColumnValueGetter.isNullValue(b.toString()) || (b instanceof String && b.equals(NONE)) || (b instanceof Number && ((Number)b).equals(new Integer(0))))) {    b=null;  }  if (a != null && !(a.toString().contains(" ")) && (NullColumnValueGetter.isNullValue(a.toString()) || (a instanceof String && a.equals(NONE)) || (a instanceof Number && ((Number)a).equals(new Integer(0))))) {    a=null;  }  if (a == null && b == null) {    return true;  }  if (a != null && b != null) {    return a.equals(b);  }  return false;}  }
class C{  public static void run(AdExchangeSeller adExchangeSeller) throws Exception {  System.out.println("=================================================================");  System.out.println("Listing all preferred deals on account");  System.out.println("=================================================================");  PreferredDeals deals=adExchangeSeller.preferreddeals().list().execute();  if (deals.getItems() != null && !deals.getItems().isEmpty()) {    for (    PreferredDeal deal : deals.getItems()) {      System.out.printf("Deal id \"%s\" ",deal.getId());      if (deal.getAdvertiserName() != null) {        System.out.printf("for advertiser \"%s\" ",deal.getAdvertiserName());      }      if (deal.getBuyerNetworkName() != null) {        System.out.printf("on network \"%s\" ",deal.getBuyerNetworkName());      }      System.out.println("was found.");    }  } else {    System.out.println("No preferred deals found.");  }  System.out.println();}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 190) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public static boolean isDot(char a){  return (a == '.' || a == '\u3002' || a == '\uFF0E' || a == '\uFF61');}  }
class C{  public Record process(GenericData.Record record,String topic) throws Exception {  if (record != null) {    Logger.debug("Processing Metadata Change Event record. ");    final GenericData.Record auditHeader=(GenericData.Record)record.get("auditHeader");    if (auditHeader == null || auditHeader.get("time") == null) {      Logger.info("MetadataChangeEvent without auditHeader, abort process. " + record.toString());      return null;    }    final GenericData.Record datasetIdentifier=(GenericData.Record)record.get("datasetIdentifier");    final GenericData.Record datasetProperties=(GenericData.Record)record.get("datasetProperties");    final String urn=String.valueOf(record.get("urn"));    if (urn == null && (datasetProperties == null || datasetProperties.get("uri") == null) && datasetIdentifier == null) {      Logger.info("Can't identify dataset from uri/urn/datasetIdentifier, abort process. " + record.toString());      return null;    }    final JsonNode rootNode=new ObjectMapper().readTree(record.toString());    for (    String itemName : CHANGE_ITEMS) {      if (record.get(itemName) == null) {        continue;      }switch (itemName) {case "schema":        try {          DatasetInfoDao.updateDatasetSchema(rootNode);        } catch (        Exception ex) {          Logger.debug("Metadata change exception: schema ",ex);        }      break;case "owners":    try {      DatasetInfoDao.updateDatasetOwner(rootNode);    } catch (    Exception ex) {      Logger.debug("Metadata change exception: owner ",ex);    }  break;case "datasetProperties":try {  DatasetInfoDao.updateDatasetCaseSensitivity(rootNode);} catch (Exception ex) {  Logger.debug("Metadata change exception: case sensitivity ",ex);}break;case "references":try {DatasetInfoDao.updateDatasetReference(rootNode);} catch (Exception ex) {Logger.debug("Metadata change exception: reference ",ex);}break;case "partitionSpec":try {DatasetInfoDao.updateDatasetPartition(rootNode);} catch (Exception ex) {Logger.debug("Metadata change exception: partition ",ex);}break;case "deploymentInfo":try {DatasetInfoDao.updateDatasetDeployment(rootNode);} catch (Exception ex) {Logger.debug("Metadata change exception: deployment ",ex);}break;case "tags":try {DatasetInfoDao.updateDatasetTags(rootNode);} catch (Exception ex) {Logger.debug("Metadata change exception: tag ",ex);}break;case "constraints":try {DatasetInfoDao.updateDatasetConstraint(rootNode);} catch (Exception ex) {Logger.debug("Metadata change exception: constraint ",ex);}break;case "indices":try {DatasetInfoDao.updateDatasetIndex(rootNode);} catch (Exception ex) {Logger.debug("Metadata change exception: index ",ex);}break;case "capacity":try {DatasetInfoDao.updateDatasetCapacity(rootNode);} catch (Exception ex) {Logger.debug("Metadata change exception: capacity ",ex);}break;case "securitySpec":try {DatasetInfoDao.updateDatasetSecurity(rootNode);} catch (Exception ex) {Logger.debug("Metadata change exception: security ",ex);}break;default :break;}}}return null;}  }
class C{  protected int expandCluster(final int clusterid,final WritableIntegerDataStore clusterids,final KNNQuery<O> knnq,final DBIDs neighbors,final double maxkdist,final FiniteProgress progress){  int clustersize=1;  final ArrayModifiableDBIDs activeSet=DBIDUtil.newArray();  activeSet.addDBIDs(neighbors);  DBIDVar id=DBIDUtil.newVar();  while (!activeSet.isEmpty()) {    activeSet.pop(id);    final int oldclus=clusterids.intValue(id);    if (oldclus == NOISE) {      clustersize+=1;      clusterids.putInt(id,-clusterid);    } else     if (oldclus == UNPROCESSED) {      clustersize+=1;      final KNNList newneighbors=knnq.getKNNForDBID(id,k);      if (newneighbors.getKNNDistance() <= maxkdist) {        activeSet.addDBIDs(newneighbors);      }      clusterids.putInt(id,clusterid);      LOG.incrementProcessed(progress);    }  }  return clustersize;}  }
class C{  public boolean generateAndSort(final Iterator<long[]> iterator,final long seed){  final int[] d=this.d;  final int[] e=new int[3];  cleanUpIfNecessary();  for (int k=0; k < numEdges; k++) {    tripleToEdge(iterator.next(),seed,numVertices,partSize,e);    xorEdge(k,e[0],e[1],e[2],false);    d[e[0]]++;    d[e[1]]++;    d[e[2]]++;  }  if (iterator.hasNext())   throw new IllegalStateException("This " + HypergraphSorter.class.getSimpleName() + " has "+ numEdges+ " edges, but the provided iterator returns more");  return sort();}  }
class C{  private Object executeExpression(PageContext pc,SQL sql,Query qr,ZExpression expression,int row) throws PageException {  String op=StringUtil.toLowerCase(expression.getOperator());  int count=expression.nbOperands();  if (op.equals("and"))   return executeAnd(pc,sql,qr,expression,row); else   if (op.equals("or"))   return executeOr(pc,sql,qr,expression,row);  if (count == 0 && op.equals("?")) {    int pos=sql.getPosition();    if (sql.getItems().length <= pos)     throw new DatabaseException("invalid syntax for SQL Statement",null,sql,null);    sql.setPosition(pos + 1);    return sql.getItems()[pos].getValueForCF();  } else   if (count == 1) {    Object value=executeExp(pc,sql,qr,expression.getOperand(0),row);switch (op.charAt(0)) {case 'a':      if (op.equals("abs"))       return new Double(MathUtil.abs(Caster.toDoubleValue(value)));    if (op.equals("acos"))     return new Double(Math.acos(Caster.toDoubleValue(value)));  if (op.equals("asin"))   return new Double(Math.asin(Caster.toDoubleValue(value)));if (op.equals("atan")) return new Double(Math.atan(Caster.toDoubleValue(value)));break;case 'c':if (op.equals("ceiling")) return new Double(Math.ceil(Caster.toDoubleValue(value)));if (op.equals("cos")) return new Double(Math.cos(Caster.toDoubleValue(value)));break;case 'e':if (op.equals("exp")) return new Double(Math.exp(Caster.toDoubleValue(value)));break;case 'f':if (op.equals("floor")) return new Double(Math.floor(Caster.toDoubleValue(value)));break;case 'i':if (op.equals("is not null")) return Boolean.valueOf(value != null);if (op.equals("is null")) return Boolean.valueOf(value == null);break;case 'u':if (op.equals("upper") || op.equals("ucase")) return Caster.toString(value).toUpperCase();break;case 'l':if (op.equals("lower") || op.equals("lcase")) return Caster.toString(value).toLowerCase();if (op.equals("ltrim")) return StringUtil.ltrim(Caster.toString(value),null);if (op.equals("length")) return new Double(Caster.toString(value).length());break;case 'r':if (op.equals("rtrim")) return StringUtil.rtrim(Caster.toString(value),null);break;case 's':if (op.equals("sign")) return new Double(MathUtil.sgn(Caster.toDoubleValue(value)));if (op.equals("sin")) return new Double(Math.sin(Caster.toDoubleValue(value)));if (op.equals("soundex")) return StringUtil.soundex(Caster.toString(value));if (op.equals("sin")) return new Double(Math.sqrt(Caster.toDoubleValue(value)));break;case 't':if (op.equals("tan")) return new Double(Math.tan(Caster.toDoubleValue(value)));if (op.equals("trim")) return Caster.toString(value).trim();break;}} else if (count == 2) {if (op.equals("=") || op.equals("in")) return executeEQ(pc,sql,qr,expression,row); else if (op.equals("!=") || op.equals("<>")) return executeNEQ(pc,sql,qr,expression,row); else if (op.equals("<")) return executeLT(pc,sql,qr,expression,row); else if (op.equals("<=")) return executeLTE(pc,sql,qr,expression,row); else if (op.equals(">")) return executeGT(pc,sql,qr,expression,row); else if (op.equals(">=")) return executeGTE(pc,sql,qr,expression,row); else if (op.equals("-")) return executeMinus(pc,sql,qr,expression,row); else if (op.equals("+")) return executePlus(pc,sql,qr,expression,row); else if (op.equals("/")) return executeDivide(pc,sql,qr,expression,row); else if (op.equals("*")) return executeMultiply(pc,sql,qr,expression,row); else if (op.equals("^")) return executeExponent(pc,sql,qr,expression,row);Object left=executeExp(pc,sql,qr,expression.getOperand(0),row);Object right=executeExp(pc,sql,qr,expression.getOperand(1),row);switch (op.charAt(0)) {case 'a':if (op.equals("atan2")) return new Double(Math.atan2(Caster.toDoubleValue(left),Caster.toDoubleValue(right)));break;case 'b':if (op.equals("bitand")) return new Double(Operator.bitand(Caster.toDoubleValue(left),Caster.toDoubleValue(right)));if (op.equals("bitor")) return new Double(Operator.bitor(Caster.toDoubleValue(left),Caster.toDoubleValue(right)));break;case 'c':if (op.equals("concat")) return Caster.toString(left).concat(Caster.toString(right));break;case 'l':if (op.equals("like")) return executeLike(pc,sql,qr,expression,row);break;case 'm':if (op.equals("mod")) return new Double(Operator.modulus(Caster.toDoubleValue(left),Caster.toDoubleValue(right)));break;}throw new DatabaseException("unsopprted sql statement [" + op + "]",null,sql,null);} else if (count == 3) {if (op.equals("between")) return executeBetween(pc,sql,qr,expression,row);}if (op.equals("in")) return executeIn(pc,sql,qr,expression,row);throw new DatabaseException("unsopprted sql statement (op-count:" + expression.nbOperands() + ";operator:"+ op+ ") ",null,sql,null);}  }
class C{  public VertexInfo(int previous){  this(previous,true);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tSpecify the random number seed (default 1)","S",1,"-S <num>"));  result.addElement(new Option("\tThe size of the output dataset - number of instances\n" + "\t(default 100)","Z",1,"-Z <num>"));  return result.elements();}  }
class C{  @Bean public WebAccountsService accountsService(){  return new WebAccountsService(ACCOUNTS_SERVICE_URL);}  }
class C{  public static void reverse(Coordinate[] coord){  int last=coord.length - 1;  int mid=last / 2;  for (int i=0; i <= mid; i++) {    Coordinate tmp=coord[i];    coord[i]=coord[last - i];    coord[last - i]=tmp;  }}  }
class C{  public MockCli(){  this(null);}  }
class C{  public boolean validSystemNameConfig(String systemName){  return (AcelaAddress.validSystemNameConfig(systemName,'T',_memo));}  }
class C{  private static ResultPoint[] findVertices180(BitMatrix matrix,boolean tryHarder){  int height=matrix.getHeight();  int width=matrix.getWidth();  int halfWidth=width >> 1;  ResultPoint[] result=new ResultPoint[8];  boolean found=false;  int[] counters=new int[START_PATTERN_REVERSE.length];  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));  for (int i=height - 1; i > 0; i-=rowStep) {    int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);    if (loc != null) {      result[0]=new ResultPoint(loc[1],i);      result[4]=new ResultPoint(loc[0],i);      found=true;      break;    }  }  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,halfWidth,i,halfWidth,true,START_PATTERN_REVERSE,counters);      if (loc != null) {        result[1]=new ResultPoint(loc[1],i);        result[5]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  counters=new int[STOP_PATTERN_REVERSE.length];  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);      if (loc != null) {        result[2]=new ResultPoint(loc[0],i);        result[6]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,halfWidth,false,STOP_PATTERN_REVERSE,counters);      if (loc != null) {        result[3]=new ResultPoint(loc[0],i);        result[7]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  return found ? result : null;}  }
class C{  public Vector4i sub(Vector4i v,Vector4i dest){  dest.x=x - v.x;  dest.y=y - v.y;  dest.z=z - v.z;  dest.w=w - v.w;  return dest;}  }
class C{  public static double milesToFeet(double miles){  return miles * FEET_PER_MILE;}  }
class C{  private OptimizingCompiler(){}  }
class C{  static ByteBuf doEncode(ByteBufAllocator byteBufAllocator,MqttMessage message){switch (message.fixedHeader().messageType()) {case CONNECT:    return encodeConnectMessage(byteBufAllocator,(MqttConnectMessage)message);case CONNACK:  return encodeConnAckMessage(byteBufAllocator,(MqttConnAckMessage)message);case PUBLISH:return encodePublishMessage(byteBufAllocator,(MqttPublishMessage)message);case SUBSCRIBE:return encodeSubscribeMessage(byteBufAllocator,(MqttSubscribeMessage)message);case UNSUBSCRIBE:return encodeUnsubscribeMessage(byteBufAllocator,(MqttUnsubscribeMessage)message);case SUBACK:return encodeSubAckMessage(byteBufAllocator,(MqttSubAckMessage)message);case UNSUBACK:case PUBACK:case PUBREC:case PUBREL:case PUBCOMP:return encodeMessageWithOnlySingleByteFixedHeaderAndPacketId(byteBufAllocator,message);case PINGREQ:case PINGRESP:case DISCONNECT:return encodeMessageWithOnlySingleByteFixedHeader(byteBufAllocator,message);default :throw new IllegalArgumentException("Unknown message type: " + message.fixedHeader().messageType().value());}}  }
class C{  public static void startTimer(String name){  if (openTimers.containsKey(name)) {    throw new IllegalArgumentException("timer already exists");  }  openTimers.put(name,System.nanoTime());}  }
class C{  public StateMachineHandler(Class<?> beanClass,Object target,Method method,T metaAnnotation,Annotation annotation){  this(beanClass,metaAnnotation,annotation,new MethodInvokingStateMachineRuntimeProcessor<T,S,E>(target,method));}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private void addChart(){  JFreeChart chart=ChartFactory.createBarChart3D(getTitle(),null,"Time" + unitSuffix(),dataset,PlotOrientation.VERTICAL,true,true,false);  chart.addProgressListener(locker);  CategoryPlot plot=(CategoryPlot)chart.getPlot();  CategoryItemRenderer renderer=plot.getRenderer();  renderer.setToolTipGenerator(dataset);  mainPanel().add(BorderLayout.CENTER,new ChartPanel(chart));}  }
class C{  public byte[] array(int index){  return buffers[index];}  }
class C{  public SnapshotException(String message){  super(message);}  }
class C{  private static long signFromBit_antiCyclic(final double value){  return Double.doubleToRawLongBits(value) >> 62 | 1;}  }
class C{  public Builder connectionTimeOutInMs(int timeOut){  this.innerZkConnectionTimeoutInMs=timeOut;  return this;}  }
class C{  public void notifyTabsDataChanged(AbstractExplorerTab source,Instances data){  m_Data=data;  for (  AbstractExplorerTab tab : m_Tabs) {    if ((source != null) && (tab == source))     continue;    tab.setData(data);  }}  }
class C{  public static void main(String[] args){  double[][] matrix=getMatrix();  double[][] sortedMatrix=sortColumns(matrix);  System.out.println("\nThe column-sorted array is");  for (int i=0; i < sortedMatrix.length; i++) {    for (int j=0; j < sortedMatrix.length; j++) {      System.out.print(sortedMatrix[i][j] + " ");    }    System.out.println();  }}  }
class C{  public boolean isFirst(){  return first;}  }
class C{  public void reset(){  try {synchronized (lock.validated()) {      remote.reset();    }  } catch (  Throwable t) {    Util.handleException(t);  }}  }
class C{  public UnsupportedAudioFileException(){  super();}  }
class C{  public DiskAccessException(Throwable cause){  super(cause);}  }
class C{  public boolean pad(int factor) throws JSONException {  try {    return this.bitreader.pad(factor);  } catch (  Throwable e) {    throw new JSONException(e);  }}  }
class C{  public URL find(String classname){  ClassPathList list=pathList;  URL url=null;  while (list != null) {    url=list.path.find(classname);    if (url == null)     list=list.next; else     return url;  }  return null;}  }
class C{  public boolean isSystemMaintained(){  int id=getAD_EntityType_ID();  return id < s_maxAD_EntityType_ID;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:32.168 -0500",hash_original_method="CC03AC9F84902D02E7C98FF0D9B3A071",hash_generated_method="1BB18586428AA9D56B3090422507B482") public void update(int val){  crc=updateByteImpl((byte)val,crc);}  }
class C{  public static boolean nameMatch(@NotNull String s,@NotNull String t){  if (s.length() == 0 || t.length() == 0)   return false;  t=t.toLowerCase();  s=s.toLowerCase();  int i, j=0;  int minLen;  if (s.length() < t.length()) {    String tmp=s;    s=t;    t=tmp;  }  for (i=0; i < s.length(); i++) {    if (s.charAt(i) == t.charAt(j)) {      j++;      if (j == t.length())       return true;    }  }  return false;}  }
class C{  public void destroy(){  consumersInContext=NamedWindowUtil.createConsumerMap(tailView.isPrioritized());}  }
class C{  @Scheduled(cron="0 0 0 * * ?") public void removeOldPersistentTokens(){}  }
class C{  public static QuickTheory qt(Supplier<Strategy> strategy){  return new QuickTheory(strategy);}  }
class C{  public void closeSim(){  if (simDone) {    System.exit(0);  }  this.world.cancelSim();  this.simCancelled=true;}  }
class C{  public static void createUTFForCFromString(String str,Address copyBuffer,int len){  ByteBuffer bbuf=java.nio.JikesRVMSupport.newDirectByteBuffer(copyBuffer,len);  final boolean USE_LIBRARY_CODEC=false;  if (USE_LIBRARY_CODEC) {    char[] strChars=java.lang.JikesRVMSupport.getBackingCharArray(str);    int strOffset=java.lang.JikesRVMSupport.getStringOffset(str);    int strLen=java.lang.JikesRVMSupport.getStringLength(str);    CharBuffer cbuf=CharBuffer.wrap(strChars,strOffset,strLen);    CharsetEncoder cse=Charset.forName("UTF8").newEncoder();    cse.encode(cbuf,bbuf,true);  } else {    UTF8Convert.toUTF8(str,bbuf);  }  copyBuffer.store((byte)0,Offset.fromIntZeroExtend(len - 1));}  }
class C{  public DailyCalendar(TimeZone timeZone,long rangeStartingTimeInMillis,long rangeEndingTimeInMillis){  super(timeZone);  setTimeRange(rangeStartingTimeInMillis,rangeEndingTimeInMillis);}  }
class C{  public static CryptoEngine ed25519Engine(){  return ED25519_ENGINE;}  }
class C{  public byte[] readRawBytes(final int numberOfBytes){  final byte[] tmpArr=new byte[numberOfBytes];  System.arraycopy(buf,position,tmpArr,0,numberOfBytes);  position+=numberOfBytes;  return tmpArr;}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public void testGetTextElementBuilder(){  LOGGER.debug("getTextElementBuilder");  TextPertinenceChecker instance=new TextPertinenceChecker(true,new TextAttributeOfElementBuilder(AttributeStore.ALT_ATTR),"blacklistNomenclature",TestSolution.NEED_MORE_INFO,"notPertinent","manualCheck");  TextElementBuilder result=instance.getTextElementBuilder();  assertTrue(result instanceof SimpleTextElementBuilder);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public FatalPeerException(final String message){  super(message);}  }
class C{  public static String toString(int[] self){  return InvokerHelper.toString(self);}  }
class C{  private void activateCatalog(String file){  Log.d(TAG,"Activating " + new File(file).getName());  SharedPreferences sharedPref=getContext().getSharedPreferences(Preferences.KEY_CATALOG_FILE,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=sharedPref.edit();  editor.putString(Preferences.KEY_CATALOG_FILE,new File(file).getName());  editor.apply();}  }
class C{  protected FullTypeReferenceImpl(){  super();}  }
class C{  public static void write(int x1,int y1,int w,int h,float s,float e,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.ARC_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_ARC);  dos.writeByte(RENDERTYPE_XY);  dos.writeInt(x1);  dos.writeInt(y1);  dos.writeInt(w);  dos.writeInt(h);  dos.writeFloat(s);  dos.writeFloat(e);  properties.write(dos);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.DERIVED_ATTRIBUTE___MODIFIER_1:    return getModifier_1();case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_11:  return getAnonymous_derivedAttribute_1_1();case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_21:return getAnonymous_derivedAttribute_2_1();case UmplePackage.DERIVED_ATTRIBUTE___CODE_1:return getCode_1();case UmplePackage.DERIVED_ATTRIBUTE___ANONYMOUS_DERIVED_ATTRIBUTE_31:return getAnonymous_derivedAttribute_3_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static double triangular(double min,double med,double max){  double y=raw();  double x=(y < ((med - min) / (max - min))) ? (min + Math.sqrt(y * (max - min) * (med - min))) : (max - Math.sqrt((1 - y) * (max - min) * (max - med)));  return x;}  }
class C{  private void addDatasetDescriptions(Document doc,Resource resource) throws DocumentException {  Paragraph p=new Paragraph();  p.setAlignment(Element.ALIGN_JUSTIFIED);  p.setFont(font);  Eml eml=resource.getEml();  if (resource.hasMappedData()) {    p.add(new Phrase(getText("rtf.datasets"),fontTitle));    p.add(Chunk.NEWLINE);    p.add(Chunk.NEWLINE);    p.add(new Phrase(getText("rtf.datasets.description"),fontTitle));    p.add(Chunk.NEWLINE);    p.add(new Phrase(getText("rtf.datasets.object") + ": ",fontTitle));    p.add(getText("rtf.datasets.dwca") + " " + eml.getTitle());    p.add(Chunk.NEWLINE);    p.add(new Phrase(getText("rtf.datasets.character") + ": ",fontTitle));    p.add("UTF-8");    p.add(Chunk.NEWLINE);    p.add(new Phrase(getText("rtf.datasets.format") + ": ",fontTitle));    p.add(getText("rtf.datasets.dwca.format"));    p.add(Chunk.NEWLINE);    p.add(new Phrase(getText("rtf.datasets.format.version") + ": ",fontTitle));    p.add("1.0");    p.add(Chunk.NEWLINE);    p.add(new Phrase(getText("rtf.datasets.distribution") + ": ",fontTitle));    String dwcaLink=appConfig.getBaseUrl() + "/archive.do?r=" + resource.getShortname();    Anchor distributionLink=new Anchor(dwcaLink,fontLink);    distributionLink.setReference(dwcaLink);    p.add(distributionLink);    p.add(Chunk.NEWLINE);    if (exists(eml.getPubDate())) {      p.add(new Phrase(getText("rtf.publication") + ": ",fontTitle));      SimpleDateFormat f=new SimpleDateFormat("yyyy-MM-dd");      p.add(f.format(eml.getPubDate()));      p.add(Chunk.NEWLINE);    }    VocabularyConcept vocabConcept=vocabManager.get(Constants.VOCAB_URI_LANGUAGE).findConcept(eml.getLanguage());    p.add(new Phrase(getText("rtf.language") + ": ",fontTitle));    if (exists(vocabConcept)) {      p.add(vocabConcept.getPreferredTerm(DEFAULT_LANGUAGE).getTitle());    } else {      p.add(getText("rtf.unknown"));    }    p.add(Chunk.NEWLINE);    addLicense(p,eml);    doc.add(p);  } else {    if (!eml.getPhysicalData().isEmpty()) {      p.add(new Phrase(getText("rtf.datasets"),fontTitle));      p.add(Chunk.NEWLINE);      p.add(Chunk.NEWLINE);      p.add(new Phrase(getText("rtf.datasets.description"),fontTitle));      p.add(Chunk.NEWLINE);      p.add(getText("rtf.datasets.noPublished"));      p.add(Chunk.NEWLINE);      VocabularyConcept vocabConcept=vocabManager.get(Constants.VOCAB_URI_LANGUAGE).findConcept(eml.getLanguage());      p.add(new Phrase(getText("rtf.language") + ": ",fontTitle));      if (exists(vocabConcept)) {        p.add(vocabConcept.getPreferredTerm(DEFAULT_LANGUAGE).getTitle());      } else {        p.add(getText("rtf.unknown"));      }      p.add(Chunk.NEWLINE);      addLicense(p,eml);      doc.add(p);    }  }  addExternalLinks(doc,eml);  p.clear();}  }
class C{  File convert(Path path){  checkPath(path);  if (path.isAbsolute())   return new File(path.toUri().getPath());  return new File(getWorkingDirectory().toUri().getPath(),path.toUri().getPath());}  }
class C{  public void parsePushByteCode(TextStream stream,DataOutputStream dataStream,Map<String,Map<String,Vertex>> elements,boolean debug,Network network) throws IOException {  stream.nextWord();  dataStream.writeLong(network.createVertex(Primitive.PUSH).getId());  parseElementByteCode(stream,dataStream,elements,debug,network);  ensureNext(';',stream);}  }
