class C{  public void compact(){  if (!isCompact) {    int limitCompacted=0;    int iBlockStart=0;    short iUntouched=-1;    for (int i=0; i < indices.length; ++i, iBlockStart+=BLOCKCOUNT) {      indices[i]=-1;      boolean touched=blockTouched(i);      if (!touched && iUntouched != -1) {        indices[i]=iUntouched;      } else {        int jBlockStart=0;        int j=0;        for (j=0; j < limitCompacted; ++j, jBlockStart+=BLOCKCOUNT) {          if (hashes[i] == hashes[j] && arrayRegionMatches(values,iBlockStart,values,jBlockStart,BLOCKCOUNT)) {            indices[i]=(short)jBlockStart;            break;          }        }        if (indices[i] == -1) {          System.arraycopy(values,iBlockStart,values,jBlockStart,BLOCKCOUNT);          indices[i]=(short)jBlockStart;          hashes[j]=hashes[i];          ++limitCompacted;          if (!touched) {            iUntouched=(short)jBlockStart;          }        }      }    }    int newSize=limitCompacted * BLOCKCOUNT;    byte[] result=new byte[newSize];    System.arraycopy(values,0,result,0,newSize);    values=result;    isCompact=true;    hashes=null;  }}  }
class C{  public BoundedHashMap(int capacity,boolean accessOrder){  super(getInitialCapacity(capacity,DEFAULT_LOAD_FACTOR),DEFAULT_LOAD_FACTOR,accessOrder);  this.capacity=capacity;}  }
class C{  public PreserveAspectRatioParser(){  preserveAspectRatioHandler=DefaultPreserveAspectRatioHandler.INSTANCE;}  }
class C{  public static List<ErrorLogger.ErrorObject> isVirtualTrackInCPLConformed(PayloadRecord cplPayloadRecord,VirtualTrack virtualTrack,List<PayloadRecord> essencesHeaderPartitionPayloads) throws IOException {  List<VirtualTrack> virtualTracks=new ArrayList<>();  IMFErrorLogger imfErrorLogger=new IMFErrorLoggerImpl();  virtualTracks.add(virtualTrack);  imfErrorLogger.addAllErrors(checkVirtualTrackAndEssencesHeaderPartitionPayloadRecords(virtualTracks,essencesHeaderPartitionPayloads));  if (imfErrorLogger.hasFatalErrors()) {    return imfErrorLogger.getErrors();  }  imfErrorLogger.addAllErrors(conformVirtualTracksInCPL(cplPayloadRecord,essencesHeaderPartitionPayloads,false));  return imfErrorLogger.getErrors();}  }
class C{  public void aggregators(Aggregator[] aggregators){  this.aggregators=aggregators;}  }
class C{  public static void loggerInit(Level level,boolean isRedirectStdOutErr) throws IOException {  loggerInit(level,isRedirectStdOutErr,DEFAULT_FORMAT);}  }
class C{  public long maxSize(){  return maxSize;}  }
class C{  public static Process execute(final String[] commandArray,final List envp,final File dir) throws IOException {  return Runtime.getRuntime().exec(commandArray,stringify(envp),dir);}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,ReplyException exception,ReplySender dm,boolean internal){  Assert.assertTrue(recipient != null,"Sending a ReplyMessage to ALL");  ReplyMessage m=new ReplyMessage();  m.processorId=processorId;  if (exception != null) {    m.returnValue=exception;    m.returnValueIsException=true;  }  if (exception != null && logger.isDebugEnabled()) {    if (exception.getCause() != null && (exception.getCause() instanceof EntryNotFoundException)) {      logger.debug("Replying with entry-not-found: {}",exception.getCause().getMessage());    } else     if (exception.getCause() != null && (exception.getCause() instanceof ConcurrentCacheModificationException)) {      logger.debug("Replying with concurrent-modification-exception");    } else {      logger.debug("Replying with exception: " + m,exception);    }  }  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  public static PropertyValuesHolder ofObject(String propertyName,TypeEvaluator evaluator,Object... values){  PropertyValuesHolder pvh=new PropertyValuesHolder(propertyName);  pvh.setObjectValues(values);  pvh.setEvaluator(evaluator);  return pvh;}  }
class C{  Action(ModeUsage modeUsage){  this.modeUsage=modeUsage;}  }
class C{  public void loadFiles(final MyLoadStats totals,final int depth,final File file,final String baseURI,final RDFFormat rdfFormat,final String defaultGraph,final FilenameFilter filter,final boolean endOfBatch) throws IOException {  if (file.isDirectory()) {    if (log.isDebugEnabled())     log.debug("loading directory: " + file);    final File[] files=(filter != null ? file.listFiles(filter) : file.listFiles());    Arrays.sort(files);    for (int i=0; i < files.length; i++) {      final File f=files[i];      loadFiles(totals,depth + 1,f,baseURI,rdfFormat,defaultGraph,filter,(depth == 0 && i < (files.length - 1) ? false : endOfBatch));    }    return;  }  final String n=file.getName();  RDFFormat fmt=RDFFormat.forFileName(n);  if (fmt == null && n.endsWith(".zip")) {    fmt=RDFFormat.forFileName(n.substring(0,n.length() - 4));  }  if (fmt == null && n.endsWith(".gz")) {    fmt=RDFFormat.forFileName(n.substring(0,n.length() - 3));  }  if (fmt == null)   fmt=rdfFormat;  InputStream is=null;  if (log.isInfoEnabled())   log.info("Loading next file: " + file + " now...");  try {    is=new FileInputStream(file);    if (n.endsWith(".gz")) {      is=new GZIPInputStream(is,getGzipBuffer());    } else     if (n.endsWith(".zip")) {      is=new ZipInputStream(new BufferedInputStream(is,getGzipBuffer()));    }    final Reader reader=new BufferedReader(new InputStreamReader(is));    try {      final String s=baseURI != null ? baseURI : file.toURI().toString();      loadData4_ParserErrors_Not_Trapped(totals,reader,file.toString(),file,s,fmt,defaultGraph,endOfBatch);      return;    } catch (    RDFParseException ex) {      if (ignoreInvalidFiles) {        log.error("Parser error - skipping source: source=" + file,ex);      } else       throw new RuntimeException("Could not parse file: " + file,ex);    }catch (    Exception ex) {      if (ex instanceof RuntimeException)       throw (RuntimeException)ex;      if (ex instanceof IOException)       throw (IOException)ex;      throw new RuntimeException("While loading: " + file,ex);    } finally {      reader.close();    }  }  finally {    if (is != null)     is.close();  }}  }
class C{  public <T>T safeGet(List<T> list,int index){  if (list != null && index < list.size()) {    return list.get(index);  }  return null;}  }
class C{  public void trim(Collection<String> headVars){  Map<Assignment,double[]> matrix2=new HashMap<Assignment,double[]>();  for (  Entry<Assignment,double[]> e : matrix.entrySet()) {    Assignment a=e.getKey();    a.trim(headVars);    double[] val=e.getValue();    matrix2.put(a,val);  }  matrix=matrix2;}  }
class C{  public BinaryExpression popEnclosingBinaryExpression(){  return enclosingBinaryExpressions.removeFirst();}  }
class C{  @CanIgnoreReturnValue public Builder<C> add(Range<C> range){  if (range.isEmpty()) {    throw new IllegalArgumentException("range must not be empty, but was " + range);  } else   if (!rangeSet.complement().encloses(range)) {    for (    Range<C> currentRange : rangeSet.asRanges()) {      checkArgument(!currentRange.isConnected(range) || currentRange.intersection(range).isEmpty(),"Ranges may not overlap, but received %s and %s",currentRange,range);    }    throw new AssertionError("should have thrown an IAE above");  }  rangeSet.add(range);  return this;}  }
class C{  public static List<BaseMqttMessage> readAndConvertMessageLog(final File selectedFile) throws SpyException {  final List<String> lines=FileUtils.readFileAsLines(selectedFile);  logger.info("Message audit log - read {} messages from {}",lines.size(),selectedFile.getAbsoluteFile());  return processMessageLog(parseMessageLog(lines,null,0,0),null,0,0);}  }
class C{  public void ensureCapacity(int minCapacity){  this.elements.ensureCapacity(minCapacity);}  }
class C{  private void init(){  createListViewAndHolder();  createHolderImageAndHolderText();}  }
class C{  public static List propertyDescriptors(int apiLevel){  return PROPERTY_DESCRIPTORS;}  }
class C{  protected Literal createNumericLiteral(Number number,IRI datatype){  if (number instanceof BigDecimal) {    return new DecimalLiteral((BigDecimal)number,datatype);  }  if (number instanceof BigInteger) {    return new IntegerLiteral((BigInteger)number,datatype);  }  return new NumericLiteral(number,datatype);}  }
class C{  public static void resetOutputMatix(MatrixIndexes in1Ix,MatrixBlock in1Val,MatrixIndexes outIx,MatrixBlock outVal,AggregateUnaryOperator uaggOp){  if (uaggOp.indexFn instanceof ReduceCol) {    outIx.setIndexes(in1Ix.getRowIndex(),1);    outVal.reset(in1Val.getNumRows(),2,false);  } else   if (uaggOp.indexFn instanceof ReduceRow) {    outIx.setIndexes(1,in1Ix.getColumnIndex());    outVal.reset(2,in1Val.getNumColumns(),false);  } else   if (uaggOp.indexFn instanceof ReduceAll) {    outIx.setIndexes(1,1);    outVal.reset(1,2,false);  }}  }
class C{  public CodenvyCompilationUnitResolver(INameEnvironment environment,IErrorHandlingPolicy policy,CompilerOptions compilerOptions,ICompilerRequestor requestor,IProblemFactory problemFactory,IProgressMonitor monitor,boolean fromJavaProject){  super(environment,policy,compilerOptions,requestor,problemFactory,monitor,fromJavaProject);}  }
class C{  public boolean isSetDeleted(){  return EncodingUtils.testBit(__isset_bitfield,__DELETED_ISSET_ID);}  }
class C{  public static void registerJdbcType(Class<?> fieldType,Integer jdbcType){  _classJdbcType.put(fieldType,jdbcType);}  }
class C{  public static int listFindNoCaseIgnoreEmpty(String list,String value,char delimiter){  if (list == null)   return -1;  int len=list.length();  if (len == 0)   return -1;  int last=0;  int count=0;  for (int i=0; i < len; i++) {    if (list.charAt(i) == delimiter) {      if (last < i) {        if (list.substring(last,i).equalsIgnoreCase(value))         return count;        count++;      }      last=i + 1;    }  }  if (last < len) {    if (list.substring(last).equalsIgnoreCase(value))     return count;  }  return -1;}  }
class C{  @Override public int hashCode(){  return totalSeconds;}  }
class C{  GradleException formatViolationsFor(Formatter formatter,List<File> problemFiles) throws IOException {  return new GradleException(DiffMessageFormatter.messageFor(this,formatter,problemFiles));}  }
class C{  @Override public synchronized void addInstanceListener(InstanceListener tsl){  m_instanceListeners.addElement(tsl);}  }
class C{  public static long toLong(byte[] bytes){  return toLong(bytes[0],bytes[1],bytes[2],bytes[3],bytes[4],bytes[5],bytes[6],bytes[7]);}  }
class C{  public QueryWrapperFilter(Query query){  if (query == null)   throw new NullPointerException("Query may not be null");  this.query=query;}  }
class C{  public boolean isWebStart(){  return this.isWebStart;}  }
class C{  protected void addTrailerToOutput(byte[] msg,int offset,AbstractMRMessage m){  currentAddr=((SerialMessage)m).getAddr();  return;}  }
class C{  public int viewToModel(float fx,float fy,Shape a,Position.Bias[] bias){  return super.viewToModel(fx,fy,adjustAllocation(a),bias);}  }
class C{  public static <K,V>SolidMap<K,V> map(K key,V value,Object... pairs){  if (pairs.length % 2 != 0)   throw new IllegalArgumentException("SolidMap.map(...) takes even number of arguments");  LinkedHashMap<K,V> m=new LinkedHashMap<>();  m.put(key,value);  for (int i=0; i < pairs.length; i+=2)   m.put((K)pairs[i],(V)pairs[i + 1]);  return new SolidMap<>(m);}  }
class C{  public TempCluster resetAggregate(){  aggregate=totalElements() / dist;  return this;}  }
class C{  @Override protected void initialize(){  m_Data=null;  m_CurrentFile=null;  m_MenuBar=null;  m_Tabs=new ArrayList<>();  m_FileChooser=GUIHelper.newConverterFileChooser();  m_Undo=new ArrayList<>();}  }
class C{  boolean inSubroutine(final long id){  if ((status & Label.VISITED) != 0) {    return (srcAndRefPositions[(int)(id >>> 32)] & (int)id) != 0;  }  return false;}  }
class C{  public boolean isSetErrorCode(){  return EncodingUtils.testBit(__isset_bitfield,__ERRORCODE_ISSET_ID);}  }
class C{  @SuppressWarnings("unchecked") public static List<Integer> toList(int[] array){  return DefaultTypeTransformation.primitiveArrayToList(array);}  }
class C{  public void addVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.addVetoableChangeListener(propertyName,in_vcl);}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  float xT=event.getX();  float yT=event.getY();  int xV=circleShape.getPoint().x;  int yV=circleShape.getPoint().y;  int radius=circleShape.getRadius();  double dx=Math.pow(xT - xV,2);  double dy=Math.pow(yT - yV,2);  boolean isTouchOnFocus=(dx + dy) <= Math.pow(radius,2);switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    if (isTouchOnFocus && isPerformClick) {      targetView.getView().setPressed(true);      targetView.getView().invalidate();    }  return true;case MotionEvent.ACTION_UP:if (isTouchOnFocus || dismissOnTouch) dismiss();if (isTouchOnFocus && isPerformClick) {targetView.getView().performClick();targetView.getView().setPressed(true);targetView.getView().invalidate();targetView.getView().setPressed(false);targetView.getView().invalidate();}return true;default :break;}return super.onTouchEvent(event);}  }
class C{  private static final void prettyPrint(Node xml,OutputStream out) throws Exception {  TransformerFactory tFactory=TransformerFactory.newInstance();  Transformer tf=tFactory.newTransformer();  tf.setOutputProperty(OutputKeys.OMIT_XML_DECLARATION,"yes");  tf.setOutputProperty(OutputKeys.ENCODING,"UTF-8");  tf.setOutputProperty(OutputKeys.INDENT,"yes");  tf.setOutputProperty(OutputKeys.METHOD,"xml");  tf.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","5");  StreamResult result=new StreamResult(new OutputStreamWriter(out,"UTF-8"));  tf.transform(new DOMSource(xml),result);}  }
class C{  public static void openView(MethodModel inputElement){  IWorkbenchPage activePage=Activator.getDefault().getWorkbench().getActiveWorkbenchWindow().getActivePage();  ValueViewPart view=(ValueViewPart)activePage.findView(VIEW_ID);  if (view == null) {    try {      view=(ValueViewPart)activePage.showView(VIEW_ID);    } catch (    PartInitException e) {      e.printStackTrace();    }  }  view.setInputElement(inputElement);  activePage.activate(view);}  }
class C{  protected void initialize(Operation operation,Object resultObj,Map<String,Object> keyMap){  _keyMap=keyMap;  _dbClient=(DbClient)keyMap.get(Constants.dbClient);  _vplexPortInitiators=(Set<URI>)_keyMap.get(Constants.UNMANAGED_EXPORT_MASKS_VPLEX_INITS_SET);  if (_vplexPortInitiators == null) {    _vplexPortInitiators=VPlexUtil.getBackendPortInitiators(_dbClient);    _keyMap.put(Constants.UNMANAGED_EXPORT_MASKS_VPLEX_INITS_SET,_vplexPortInitiators);  }  _rpPortInitiators=(Set<URI>)_keyMap.get(Constants.UNMANAGED_EXPORT_MASKS_RECOVERPOINT_INITS_SET);  if (_rpPortInitiators == null) {    _rpPortInitiators=RPHelper.getBackendPortInitiators(_dbClient);    _keyMap.put(Constants.UNMANAGED_EXPORT_MASKS_RECOVERPOINT_INITS_SET,_rpPortInitiators);  }}  }
class C{  public void loadGlyphs(String chars) throws NoGlyphException {  char[] chs=chars.toCharArray();  for (int i=0; i < chs.length; i++) {    getGlyph(chs[i],null);  }}  }
class C{  private void closeAnimate(View view,int position){  if (opened.get(position)) {    generateRevealAnimate(view,true,false,position);  }}  }
class C{  public int checkThreadID(int uid){  if (uid == 0) {    log.warn("checkThreadID illegal thread uid=0");    throw new SceKernelErrorException(ERROR_KERNEL_ILLEGAL_THREAD);  }  return checkThreadIDAllow0(uid);}  }
class C{  public void call(String name,@DelegatesTo(StreamingJsonDelegate.class) Closure value) throws IOException {  if (generator.isExcludingFieldsNamed(name)) {    return;  }  writeName(name);  verifyValue();  writer.write(JsonOutput.OPEN_BRACE);  StreamingJsonDelegate.cloneDelegateAndGetContent(writer,value,true,generator);  writer.write(JsonOutput.CLOSE_BRACE);}  }
class C{  public static void closeKeyboard(Context context,View field){  try {    InputMethodManager imm=(InputMethodManager)context.getSystemService(Context.INPUT_METHOD_SERVICE);    imm.hideSoftInputFromWindow(field.getWindowToken(),0);  } catch (  Exception ex) {    Log.e("PercolateAndroidUtils","Error occurred trying to hide the keyboard.  Exception=" + ex);  }}  }
class C{  public static ThreadDump create(){  ThreadDump threadDump=_threadDumpRef.get();  if (threadDump == null) {    threadDump=new ThreadDumpPro();    _threadDumpRef.compareAndSet(null,threadDump);    threadDump=_threadDumpRef.get();  }  return threadDump;}  }
class C{  private TextAnnotation parseSingleACEFile(String section,String fileName){  ACEDocument doc;  ReadACEAnnotation.is2004mode=this.is2004mode;  try {    File sectionDir=new File(this.aceCorpusHome + File.separator + section);    doc=fileProcessor.processAceEntry(sectionDir,fileName);  } catch (  Exception ex) {    logger.warn("Error while reading document - " + fileName,ex);    return null;  }  logger.info("Parsing file - " + fileName);  String textId=fileName.substring(fileName.indexOf(section + File.separator));  TextAnnotation ta=taBuilder.createTextAnnotation(this.corpusId,textId,doc.contentRemovingTags);  if (doc.metadata != null) {    for (    String metadataKey : doc.metadata.keySet()) {      String value=doc.metadata.get(metadataKey);      if (!value.isEmpty()) {        ta.addAttribute(metadataKey,value);      }    }  }  File file=new File(fileName);  this.addEntityViews(ta,doc.aceAnnotation,file);  this.addEntityRelations(ta,doc.aceAnnotation,file);  return ta;}  }
class C{  public void removePhoneNumber(PhoneNumberEntity phoneNumber){  phoneNumbers.remove(phoneNumber);}  }
class C{  protected static void cutSteps(int hilliness,int width,int height,int elevationMap[][]){  Point p1, p2;  int sideA, sideB;  int type;  p1=new Point(0,0);  p2=new Point(0,0);  for (int step=0; step < hilliness * 20; step++) {    sideA=(Compute.randomInt(2) == 0) ? -1 : 1;    sideB=-sideA;    type=Compute.randomInt(6);switch (type) {case 0:      p1.setLocation(0,Compute.randomInt(height));    p2.setLocation(Compute.randomInt(width),height - 1);  markSides(p1,p2,sideB,sideA,elevationMap,height);markRect(p2.x,width,sideA,elevationMap,height);break;case 1:p1.setLocation(Compute.randomInt(width),0);p2.setLocation(Compute.randomInt(width),height - 1);if (p1.x < p2.x) {markSides(p1,p2,sideA,sideB,elevationMap,height);} else {markSides(p2,p1,sideB,sideA,elevationMap,height);}markRect(0,p1.x,sideA,elevationMap,height);markRect(p2.x,width,sideB,elevationMap,height);break;case 2:p1.setLocation(Compute.randomInt(width),height - 1);p2.setLocation(width,Compute.randomInt(height));markSides(p1,p2,sideB,sideA,elevationMap,height);markRect(0,p1.x,sideA,elevationMap,height);break;case 3:p1.setLocation(0,Compute.randomInt(height));p2.setLocation(width,Compute.randomInt(height));markSides(p1,p2,sideA,sideB,elevationMap,height);break;case 4:p1.setLocation(0,Compute.randomInt(height));p2.setLocation(Compute.randomInt(width),0);markSides(p1,p2,sideB,sideA,elevationMap,height);markRect(p2.x,width,sideB,elevationMap,height);break;case 5:p1.setLocation(Compute.randomInt(width),0);p2.setLocation(width,Compute.randomInt(height));markSides(p1,p2,sideB,sideA,elevationMap,height);markRect(0,p1.x,sideB,elevationMap,height);break;}}}  }
class C{  public void reset(){synchronized (lock) {    count=0;  }}  }
class C{  private int toTMId(IString word){  return word.id < sys2TM.length ? sys2TM[word.id] : Vocabulary.UNKNOWN_ID;}  }
class C{  private void fireChangedAdded(final RPObject object,final RPSlot cslot){  final String slotName=cslot.getName();  RPSlot slot;  if (object.hasSlot(slotName)) {    slot=object.getSlot(slotName);  } else {    slot=null;  }  for (  final RPObject schanges : cslot) {    final RPObject.ID id=schanges.getID();    if ((slot != null) && slot.has(id)) {      final RPObject sobject=slot.get(id);      listener.onSlotChangedAdded(object,slotName,sobject,schanges);      userListener.onSlotChangedAdded(object,slotName,sobject,schanges);      fireChangedAdded(sobject,schanges);    } else {      if (!schanges.isContained()) {        logger.warn("!!! Not contained! - " + schanges);      }      fireAdded(object,slotName,schanges);    }  }}  }
class C{  public void removeJDIListener(JDIListener jl){  jdiListeners.remove(jl);}  }
class C{  public static String formatDateForApi(int year,int month,int day){  return String.format("%04d",year) + "-" + String.format("%02d",month + 1)+ "-"+ String.format("%02d",day);}  }
class C{  protected void downloadFile() throws Exception {  NetworkStats pre_test_stats=fetchDataFromProc(mUid);  String ts=Long.toString(System.currentTimeMillis());  String targetUrl=BandwidthTestUtil.buildDownloadUrl(mTestServer,FILE_SIZE,mDeviceId,ts);  TrafficStats.startDataProfiling(mContext);  File tmpSaveFile=new File(BASE_DIR + File.separator + TMP_FILENAME);  assertTrue(BandwidthTestUtil.DownloadFromUrl(targetUrl,tmpSaveFile));  NetworkStats prof_stats=TrafficStats.stopDataProfiling(mContext);  Log.d(LOG_TAG,prof_stats.toString());  NetworkStats post_test_stats=fetchDataFromProc(mUid);  NetworkStats proc_stats=post_test_stats.subtract(pre_test_stats);  Bundle results=new Bundle();  results.putString("device_id",mDeviceId);  results.putString("timestamp",ts);  results.putInt("size",FILE_SIZE);  AddStatsToResults(PROF_LABEL,prof_stats,results);  AddStatsToResults(PROC_LABEL,proc_stats,results);  getInstrumentation().sendStatus(INSTRUMENTATION_IN_PROGRESS,results);  assertTrue(cleanUpFile(tmpSaveFile));}  }
class C{  public MGRSGraticuleLayer(){  initRenderingParams();  this.metricScaleSupport.setScaleModulo((int)100e3);  this.setName(Logging.getMessage("layers.Earth.MGRSGraticule.Name"));}  }
class C{  public final double[] toArray4(double[] array,int offset){  if (array == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return toDoubleArray(array,offset,4);}  }
class C{  private AbstractState createState(CopycatServer.State state){switch (state) {case INACTIVE:    return new InactiveState(this);case RESERVE:  return new ReserveState(this);case PASSIVE:return new PassiveState(this);case FOLLOWER:return new FollowerState(this);case CANDIDATE:return new CandidateState(this);case LEADER:return new LeaderState(this);default :throw new AssertionError();}}  }
class C{  public static void openSettings(Context context,String action){  if (!StringUtils.isEmpty(action)) {    Intent intent=new Intent(action);    context.startActivity(intent);  } else {    openSettings(context);  }}  }
class C{  protected void remove(String key,Map<String,String> params){  params.remove(key);}  }
class C{  @AwaitsFix(bugUrl="https://issues.apache.org/jira/browse/LUCENE-5575") public void testRandomHugeStrings() throws Exception {  Random random=random();  checkRandomData(random,a,100 * RANDOM_MULTIPLIER,8192);}  }
class C{  static private String decodePercent(final String str) throws UnsupportedEncodingException {  return URLDecoder.decode(str,UTF8);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:19.276 -0500",hash_original_method="0F24D42BACA619E1B4D2A14C838DE427",hash_generated_method="9376876B8BA8AD4F52F5BDE11BD4D48B") private boolean matchesMobile3gLower(NetworkIdentity ident){  if (ident.mType == TYPE_WIMAX) {    return false;  } else   if (matchesMobile(ident)) {switch (getNetworkClass(ident.mSubType)) {case NETWORK_CLASS_UNKNOWN:case NETWORK_CLASS_2_G:case NETWORK_CLASS_3_G:      return true;  }}return false;}  }
class C{  public Collection<GridClientTopologyListener> topologyListeners(){  return Collections.unmodifiableCollection(topLsnrs);}  }
class C{  public static <T1,T2,T3,T4,T5,T6,R>QuintFunction<T2,T3,T4,T5,T6,R> partial6(final T1 t1,final HexFunction<T1,T2,T3,T4,T5,T6,R> hexFunc){  return null;}  }
class C{  private static void recycleMediumWeightPopup(MediumWeightPopup popup){synchronized (MediumWeightPopup.class) {    List<MediumWeightPopup> mediumPopupCache=getMediumWeightPopupCache();    if (mediumPopupCache.size() < MAX_CACHE_SIZE) {      mediumPopupCache.add(popup);    }  }}  }
class C{  public final static double wrapLongitudeDeg(double lon){  if ((lon < -DATELINE_DEG_D) || (lon > DATELINE_DEG_D)) {    lon+=DATELINE_DEG_D;    lon%=LON_RANGE_DEG_D;    lon+=(lon < 0) ? DATELINE_DEG_D : -DATELINE_DEG_D;  }  return lon;}  }
class C{  public MultisigAggregateModificationTransaction(final TimeInstant timeStamp,final Account sender,final Collection<MultisigCosignatoryModification> cosignatoryModifications,final MultisigMinCosignatoriesModification minCosignatoriesModification){  this(CURRENT_VERSION,timeStamp,sender,cosignatoryModifications,minCosignatoriesModification);}  }
class C{  public OpMapVector(int blocksize,int increaseSize,int lengthPos){  m_blocksize=increaseSize;  m_mapSize=blocksize;  m_lengthPos=lengthPos;  m_map=new int[blocksize];}  }
class C{  public CoapResponse delete(){  return synchronous(newDelete().setURI(uri));}  }
class C{  private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {  int start=position;  StringBuilder result=null;  if (returnText && text != null) {    result=new StringBuilder();    result.append(text);  }  search:   while (true) {    if (position + delimiter.length > limit) {      if (start < position && returnText) {        if (result == null) {          result=new StringBuilder();        }        result.append(buffer,start,position - start);      }      if (!fillBuffer(delimiter.length)) {        checkRelaxed(UNEXPECTED_EOF);        type=COMMENT;        return null;      }      start=position;    }    for (int i=0; i < delimiter.length; i++) {      if (buffer[position + i] != delimiter[i]) {        position++;        continue search;      }    }    break;  }  int end=position;  position+=delimiter.length;  if (!returnText) {    return null;  } else   if (result == null) {    return stringPool.get(buffer,start,end - start);  } else {    result.append(buffer,start,end - start);    return result.toString();  }}  }
class C{  static void writeShort(final byte[] b,final int index,final int s){  b[index]=(byte)(s >>> 8);  b[index + 1]=(byte)s;}  }
class C{  public void init() throws ServletException {}  }
class C{  public static String shiftFlagsIntoValue(final ITranslationEnvironment environment,final long offset,final OperandSize size,final List<ReilInstruction> instructions) throws IllegalArgumentException {  Preconditions.checkNotNull(environment,"Error: Argument environment can't be null");  Preconditions.checkNotNull(size,"Error: Argument size can't be null");  Preconditions.checkNotNull(instructions,"Error: Argument instructions can't be null");  final String startValue=environment.getNextVariableString();  final String afterCf=environment.getNextVariableString();  final String shiftedPf=environment.getNextVariableString();  final String afterPf=environment.getNextVariableString();  final String shiftedAf=environment.getNextVariableString();  final String afterAf=environment.getNextVariableString();  final String shiftedZf=environment.getNextVariableString();  final String afterZf=environment.getNextVariableString();  final String shiftedSf=environment.getNextVariableString();  final String afterSf=environment.getNextVariableString();  final String shiftedOf=environment.getNextVariableString();  final String afterOf=environment.getNextVariableString();  instructions.add(ReilHelpers.createStr(offset,size,"2",size,startValue));  instructions.add(ReilHelpers.createOr(offset + 1,size,startValue,OperandSize.BYTE,Helpers.CARRY_FLAG,size,afterCf));  instructions.add(ReilHelpers.createBsh(offset + 2,OperandSize.BYTE,Helpers.PARITY_FLAG,OperandSize.BYTE,"2",size,shiftedPf));  instructions.add(ReilHelpers.createOr(offset + 3,size,afterCf,size,shiftedPf,size,afterPf));  instructions.add(ReilHelpers.createBsh(offset + 4,OperandSize.BYTE,Helpers.AUXILIARY_FLAG,OperandSize.BYTE,"4",size,shiftedAf));  instructions.add(ReilHelpers.createOr(offset + 5,size,afterPf,size,shiftedAf,size,afterAf));  instructions.add(ReilHelpers.createBsh(offset + 6,OperandSize.BYTE,Helpers.ZERO_FLAG,OperandSize.BYTE,"6",size,shiftedZf));  instructions.add(ReilHelpers.createOr(offset + 7,size,afterAf,size,shiftedZf,size,afterZf));  instructions.add(ReilHelpers.createBsh(offset + 8,OperandSize.BYTE,Helpers.SIGN_FLAG,OperandSize.BYTE,"7",size,shiftedSf));  instructions.add(ReilHelpers.createOr(offset + 9,size,afterZf,size,shiftedSf,size,afterSf));  instructions.add(ReilHelpers.createBsh(offset + 10,OperandSize.BYTE,Helpers.OVERFLOW_FLAG,OperandSize.BYTE,"11",size,shiftedOf));  instructions.add(ReilHelpers.createOr(offset + 11,size,afterSf,size,shiftedOf,size,afterOf));  return afterOf;}  }
class C{  public double downsideVariance(){  return regret(0.0);}  }
class C{  private void advanceRunState(int targetState){  for (; ; ) {    int c=ctl.get();    if (runStateAtLeast(c,targetState) || ctl.compareAndSet(c,ctlOf(targetState,workerCountOf(c))))     break;  }}  }
class C{  public void onServiceDisconnected(ReasonCode error){  displayServiceBinding(false);}  }
class C{  public DownloadData download(String packageName,int versionCode,int offerType) throws IOException {  BuyResponse buyResponse=purchase(packageName,versionCode,offerType);  return new DownloadData(this,buyResponse.getPurchaseStatusResponse().getAppDeliveryData());}  }
class C{  @Override public int compareTo(SiftFeature f){  return scale < f.scale ? 1 : scale == f.scale ? 0 : -1;}  }
class C{  public static double KullbackLeibler(double[] dist,double[] reference){  double distance=0;  Preconditions.checkArgument(dist.length == reference.length,"input arrays must be of the same length");  for (int i=0; i < dist.length; i++) {    if (dist[i] > 0 && reference[i] > 0)     distance+=dist[i] * Math.log(dist[i] / reference[i]);  }  return distance;}  }
class C{  protected static int extractByteValue(ByteArrayInputStream pduDataStream){  assert (null != pduDataStream);  int temp=pduDataStream.read();  assert (-1 != temp);  return temp & 0xFF;}  }
class C{  public static String replaceUnicodeDigits(String number){  StringBuilder normalizedDigits=new StringBuilder(number.length());  for (  char c : number.toCharArray()) {    int digit=Character.digit(c,10);    if (digit != -1) {      normalizedDigits.append(digit);    } else {      normalizedDigits.append(c);    }  }  return normalizedDigits.toString();}  }
class C{  public GeneHistory(Initializer initializer,UpdateFunction updateFunction){  if (initializer == null) {    throw new NullPointerException("Initializer cannot be null.");  }  if (updateFunction == null) {    throw new NullPointerException("Updater cannot be null.");  }  this.initializer=initializer;  this.updateFunction=updateFunction;  updatePeriods=new int[updateFunction.getNumFactors()];  for (int i=0; i < updatePeriods.length; i++) {    updatePeriods[i]=1;  }}  }
class C{  public static <T,R>Function<T,R> transform(Class<T> from,Class<R> to){  return REGISTRY.transformFor(from,to);}  }
class C{  public int hashCode(){  return getClass().hashCode() ^ modeUsage.hashCode();}  }
class C{  public SwitchInsn(Rop opcode,SourcePosition position,RegisterSpec result,RegisterSpecList sources,IntList cases){  super(opcode,position,result,sources);  if (opcode.getBranchingness() != Rop.BRANCH_SWITCH) {    throw new IllegalArgumentException("bogus branchingness");  }  if (cases == null) {    throw new NullPointerException("cases == null");  }  this.cases=cases;}  }
class C{  public boolean rejectIt(){  log.info(toString());  setIsApproved(false);  return true;}  }
class C{  private void dfs(int u,int[] parent,List<Integer> searchOrder,boolean[] isVisited){  searchOrder.add(u);  isVisited[u]=true;  for (  Edge e : neighbors.get(u)) {    if (!isVisited[e.v]) {      parent[e.v]=u;      dfs(e.v,parent,searchOrder,isVisited);    }  }}  }
class C{  public DeleteSnapshotRequestBuilder(ElasticsearchClient client,DeleteSnapshotAction action){  super(client,action,new DeleteSnapshotRequest());}  }
class C{  public void identity(){  this.a=1;  this.b=0;  this.c=0;  this.d=1;  this.tx=0;  this.ty=0;}  }
class C{  @Override public IMessageEditorTab createNewInstance(IMessageEditorController controller,boolean editable){  return new InputTab(controller,editable);}  }
class C{  public Plane(int firstAxis,int secondAxis){  super();  this.firstAxis=firstAxis;  this.secondAxis=secondAxis;  theta=Double.NaN;}  }
class C{  public void returnAndExpireConnection(Object connectionObject){  connPoolCache.expirePooledConnection(connectionObject);}  }
class C{  public synchronized void reinit(){  shutdown();  init();}  }
class C{  public static void addErrors(List<String> targetList,Map<String,Object> targetMap,Map<String,? extends Object> callResult){  List<String> newList;  Map<String,Object> errorMsgMap;  if (callResult.containsKey(ModelService.ERROR_MESSAGE)) {    targetList.add((String)callResult.get(ModelService.ERROR_MESSAGE));  }  if (callResult.containsKey(ModelService.ERROR_MESSAGE_LIST)) {    newList=UtilGenerics.checkList(callResult.get(ModelService.ERROR_MESSAGE_LIST));    targetList.addAll(newList);  }  if (callResult.containsKey(ModelService.ERROR_MESSAGE_MAP)) {    errorMsgMap=UtilGenerics.checkMap(callResult.get(ModelService.ERROR_MESSAGE_MAP));    targetMap.putAll(errorMsgMap);  }}  }
class C{  protected boolean isValidQName(String prefix,String local,boolean xml11Version){  if (local == null)   return false;  boolean validNCName=false;  if (!xml11Version) {    validNCName=(prefix == null || XMLChar.isValidNCName(prefix)) && XMLChar.isValidNCName(local);  } else {    validNCName=(prefix == null || XML11Char.isXML11ValidNCName(prefix)) && XML11Char.isXML11ValidNCName(local);  }  return validNCName;}  }
class C{  @Override public State readNotNull(AppContext ctx,StatePK id){  return ds.readNotNull(ctx,type,id);}  }
class C{  public boolean exist(String name){  return tags.containsKey(name);}  }
class C{  public EntityVisitor(final Iterator<? extends Entity> iterator,final EntityFunction function){  checkNotNull(iterator);  checkNotNull(function);  this.function=function;  this.iterator=iterator;}  }
class C{  public WorkerDocument(){  super();  ConfigurableLineTracker lineTracker=new ConfigurableLineTracker(delimeters);  setTextStore(new CopyOnWriteTextStore(new GapTextStore()));  setLineTracker(lineTracker);  completeInitialization();}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public final AssertSubscriber<T> assertFusionRejected(){  if (establishedFusionMode != Fuseable.NONE) {    throw new AssertionError("Fusion was granted");  }  return this;}  }
class C{  public void testIntValuePositive2(){  byte aBytes[]={12,56,100};  int resInt=800868;  int aNumber=new BigInteger(aBytes).intValue();  assertTrue(aNumber == resInt);}  }
class C{  public void testLoaderWithStream(){  Instances data;  try {    m_Saver.setInstances(m_Instances);    m_Saver.setFile(new File(m_ExportFilename));    m_Saver.writeBatch();    m_Loader.setSource(new FileInputStream(new File(m_ExportFilename)));    data=m_Loader.getDataSet();    try {      if (m_Instances.classIndex() != data.classIndex()) {        data.setClassIndex(m_Instances.classIndex());      }      compareDatasets(m_Instances,data);    } catch (    Exception e) {      fail("File stream loading failed (datasets differ): " + e.toString());    }  } catch (  Exception e) {    e.printStackTrace();    fail("File stream loading failed: " + e.toString());  }}  }
class C{  @Override public Resource generateID(Set<URI> types){  return new MemValueFactory().createURI("urn:anno4j:" + UUID.randomUUID());}  }
class C{  public CharsetString(char charsetChars[],int offset,int length,FontDescriptor fontDescriptor){  this.charsetChars=charsetChars;  this.offset=offset;  this.length=length;  this.fontDescriptor=fontDescriptor;}  }
class C{  void testOK(String input,String cmd) throws Exception {  try {    test(input,cmd);  } catch (  Exception e) {    afterFail(input,cmd,"OK");    throw e;  }}  }
class C{  public void undeploy(String path,String version) throws TomcatManagerException, IOException {  StringBuilder buffer=new StringBuilder("/undeploy");  buffer.append("?path=").append(URLEncoder.encode(path,this.charset));  if (version != null) {    buffer.append("&version=").append(URLEncoder.encode(version,this.charset));  }  invoke(buffer.toString());}  }
class C{  @Override public int eBaseStructuralFeatureID(int derivedFeatureID,Class<?> baseClass){  if (baseClass == StructuralTypeRef.class) {switch (derivedFeatureID) {case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__AST_STRUCTURAL_MEMBERS:      return TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__STRUCTURAL_TYPE:    return TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__GEN_STRUCTURAL_MEMBERS:  return TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS;case TypeRefsPackage.PARAMETERIZED_TYPE_REF_STRUCTURAL__POSTPONED_SUBSTITUTIONS:return TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS;default :return -1;}}return super.eBaseStructuralFeatureID(derivedFeatureID,baseClass);}  }
class C{  public CertificateSerialNumber(InputStream in) throws IOException {  serial=new SerialNumber(in);}  }
class C{  private void loadImage(){  URL src=getImageURL();  Image newImage=null;  if (src != null) {    Dictionary cache=(Dictionary)getDocument().getProperty(IMAGE_CACHE_PROPERTY);    if (cache != null) {      newImage=(Image)cache.get(src);    } else {      newImage=Toolkit.getDefaultToolkit().createImage(src);      if (newImage != null && getLoadsSynchronously()) {        ImageIcon ii=new ImageIcon();        ii.setImage(newImage);      }    }  }  image=newImage;}  }
class C{  public static TypeElement enclosingClass(final Element elem){  Element result=elem;  while (result != null && !result.getKind().isClass() && !result.getKind().isInterface()) {    Element encl=result.getEnclosingElement();    result=encl;  }  return (TypeElement)result;}  }
class C{  public Object clone(){  ZoneInfo zi=(ZoneInfo)super.clone();  zi.lastRule=null;  return zi;}  }
class C{  public int lookAhead(){  return lookAhead(0);}  }
class C{  public ChildrenFilterParser(FilterModule filterModule,Match match,Element element) throws FilterException {  if (element.getChildren().size() == 0) {    throw new MissingFilterChildException("",element);  }  children=Lists.newArrayList();  for (  Element child : element.getChildren()) {    children.add(filterModule.getFilter(match,child));  }}  }
class C{  public DependencyVisitor(Map<String,ClassReader> zipClasses,Map<String,ClassReader> inKeep,Map<String,ClassReader> outKeep,Map<String,ClassReader> inDeps,Map<String,ClassReader> outDeps){  super(Opcodes.ASM4);  mZipClasses=zipClasses;  mInKeep=inKeep;  mOutKeep=outKeep;  mInDeps=inDeps;  mOutDeps=outDeps;}  }
class C{  private int updateLastTokensBelow(int line,int numLines,int previousTokenType){  int firstLine=line;  int end=numLines;  while (line < end) {    setSharedSegment(line);    int oldTokenType=lastTokensOnLines.get(line);    int newTokenType=tokenMaker.getLastTokenTypeOnLine(s,previousTokenType);    if (oldTokenType == newTokenType) {      fireChangedUpdate(new DefaultDocumentEvent(firstLine,line,DocumentEvent.EventType.CHANGE));      return line;    }    lastTokensOnLines.setUnsafe(line,newTokenType);    previousTokenType=newTokenType;    line++;  }  if (line > firstLine) {    fireChangedUpdate(new DefaultDocumentEvent(firstLine,line,DocumentEvent.EventType.CHANGE));  }  return line;}  }
class C{  public void kill() throws Exception {  Process killProc=U.isWindows() ? Runtime.getRuntime().exec(new String[]{"taskkill","/pid",pid,"/f","/t"}) : Runtime.getRuntime().exec(new String[]{"kill","-9",pid});  killProc.waitFor();  int exitVal=killProc.exitValue();  if (exitVal != 0)   log.info(String.format("Abnormal exit value of %s for pid %s",exitVal,pid));  if (procKilledC != null)   procKilledC.apply();  U.interrupt(osGrabber);  U.interrupt(esGrabber);  U.join(osGrabber,log);  U.join(esGrabber,log);}  }
class C{  @SuppressWarnings("unchecked") protected Result prepare(UpdateRequest request,final GetResult getResult){  long getDateNS=System.nanoTime();  if (!getResult.isExists()) {    if (request.upsertRequest() == null && !request.docAsUpsert()) {      throw new DocumentMissingException(new ShardId(request.index(),request.shardId()),request.type(),request.id());    }    IndexRequest indexRequest=request.docAsUpsert() ? request.doc() : request.upsertRequest();    Long ttl=indexRequest.ttl();    if (request.scriptedUpsert() && request.script() != null) {      IndexRequest upsert=request.upsertRequest();      Map<String,Object> upsertDoc=upsert.sourceAsMap();      Map<String,Object> ctx=new HashMap<>(2);      ctx.put("op","create");      ctx.put("_source",upsertDoc);      ctx=executeScript(request,ctx);      if (ttl < 0) {        ttl=getTTLFromScriptContext(ctx);      }      String scriptOpChoice=(String)ctx.get("op");      if (!"create".equals(scriptOpChoice)) {        if (!"none".equals(scriptOpChoice)) {          logger.warn("Used upsert operation [{}] for script [{}], doing nothing...",scriptOpChoice,request.script.getScript());        }        UpdateResponse update=new UpdateResponse(getResult.getIndex(),getResult.getType(),getResult.getId(),getResult.getVersion(),false);        update.setGetResult(getResult);        return new Result(update,Operation.NONE,upsertDoc,XContentType.JSON);      }      indexRequest.source((Map)ctx.get("_source"));    }    indexRequest.index(request.index()).type(request.type()).id(request.id()).create(true).ttl(ttl == null || ttl < 0 ? null : ttl).refresh(request.refresh()).routing(request.routing()).parent(request.parent()).consistencyLevel(request.consistencyLevel());    if (request.versionType() != VersionType.INTERNAL) {      indexRequest.version(request.version()).versionType(request.versionType());    }    return new Result(indexRequest,Operation.UPSERT,null,null);  }  long updateVersion=getResult.getVersion();  if (request.versionType() != VersionType.INTERNAL) {    assert request.versionType() == VersionType.FORCE;    updateVersion=request.version();  }  if (getResult.internalSourceRef() == null) {    throw new DocumentSourceMissingException(new ShardId(request.index(),request.shardId()),request.type(),request.id());  }  Tuple<XContentType,Map<String,Object>> sourceAndContent=XContentHelper.convertToMap(getResult.internalSourceRef(),true);  String operation=null;  String timestamp=null;  Long ttl=null;  final Map<String,Object> updatedSourceAsMap;  final XContentType updateSourceContentType=sourceAndContent.v1();  String routing=getResult.getFields().containsKey(RoutingFieldMapper.NAME) ? getResult.field(RoutingFieldMapper.NAME).getValue().toString() : null;  String parent=getResult.getFields().containsKey(ParentFieldMapper.NAME) ? getResult.field(ParentFieldMapper.NAME).getValue().toString() : null;  if (request.script() == null && request.doc() != null) {    IndexRequest indexRequest=request.doc();    updatedSourceAsMap=sourceAndContent.v2();    if (indexRequest.ttl() > 0) {      ttl=indexRequest.ttl();    }    timestamp=indexRequest.timestamp();    if (indexRequest.routing() != null) {      routing=indexRequest.routing();    }    if (indexRequest.parent() != null) {      parent=indexRequest.parent();    }    boolean noop=!XContentHelper.update(updatedSourceAsMap,indexRequest.sourceAsMap(),request.detectNoop());    if (request.detectNoop() && noop) {      operation="none";    }  } else {    Map<String,Object> ctx=new HashMap<>(16);    Long originalTtl=getResult.getFields().containsKey(TTLFieldMapper.NAME) ? (Long)getResult.field(TTLFieldMapper.NAME).getValue() : null;    Long originalTimestamp=getResult.getFields().containsKey(TimestampFieldMapper.NAME) ? (Long)getResult.field(TimestampFieldMapper.NAME).getValue() : null;    ctx.put("_index",getResult.getIndex());    ctx.put("_type",getResult.getType());    ctx.put("_id",getResult.getId());    ctx.put("_version",getResult.getVersion());    ctx.put("_routing",routing);    ctx.put("_parent",parent);    ctx.put("_timestamp",originalTimestamp);    ctx.put("_ttl",originalTtl);    ctx.put("_source",sourceAndContent.v2());    ctx=executeScript(request,ctx);    operation=(String)ctx.get("op");    Object fetchedTimestamp=ctx.get("_timestamp");    if (fetchedTimestamp != null) {      timestamp=fetchedTimestamp.toString();    } else     if (originalTimestamp != null) {      timestamp=originalTimestamp.toString();    }    ttl=getTTLFromScriptContext(ctx);    updatedSourceAsMap=(Map<String,Object>)ctx.get("_source");  }  if (ttl == null) {    ttl=getResult.getFields().containsKey(TTLFieldMapper.NAME) ? (Long)getResult.field(TTLFieldMapper.NAME).getValue() : null;    if (ttl != null) {      ttl=ttl - TimeValue.nsecToMSec(System.nanoTime() - getDateNS);    }  }  if (operation == null || "index".equals(operation)) {    final IndexRequest indexRequest=Requests.indexRequest(request.index()).type(request.type()).id(request.id()).routing(routing).parent(parent).source(updatedSourceAsMap,updateSourceContentType).version(updateVersion).versionType(request.versionType()).consistencyLevel(request.consistencyLevel()).timestamp(timestamp).ttl(ttl).refresh(request.refresh());    return new Result(indexRequest,Operation.INDEX,updatedSourceAsMap,updateSourceContentType);  } else   if ("delete".equals(operation)) {    DeleteRequest deleteRequest=Requests.deleteRequest(request.index()).type(request.type()).id(request.id()).routing(routing).parent(parent).version(updateVersion).versionType(request.versionType()).consistencyLevel(request.consistencyLevel());    return new Result(deleteRequest,Operation.DELETE,updatedSourceAsMap,updateSourceContentType);  } else   if ("none".equals(operation)) {    UpdateResponse update=new UpdateResponse(getResult.getIndex(),getResult.getType(),getResult.getId(),getResult.getVersion(),false);    update.setGetResult(extractGetResult(request,request.index(),getResult.getVersion(),updatedSourceAsMap,updateSourceContentType,getResult.internalSourceRef()));    return new Result(update,Operation.NONE,updatedSourceAsMap,updateSourceContentType);  } else {    logger.warn("Used update operation [{}] for script [{}], doing nothing...",operation,request.script.getScript());    UpdateResponse update=new UpdateResponse(getResult.getIndex(),getResult.getType(),getResult.getId(),getResult.getVersion(),false);    return new Result(update,Operation.NONE,updatedSourceAsMap,updateSourceContentType);  }}  }
class C{  public TransformW(float[] flatmatrix){  m00=flatmatrix[0];  m10=flatmatrix[1];  m01=flatmatrix[2];  m11=flatmatrix[3];  if (flatmatrix.length > 5) {    m02=flatmatrix[4];    m12=flatmatrix[5];  }  updateState();}  }
class C{  public GemFireHealthEvaluator(GemFireHealthConfig config,DistributionManager dm){  if (config == null) {    throw new NullPointerException(LocalizedStrings.GemFireHealthEvaluator_NULL_GEMFIREHEALTHCONFIG.toLocalizedString());  }  this.config=config;  this.memberHealth=new MemberHealthEvaluator(config,dm);  this.cacheHealth=new CacheHealthEvaluator(config,dm);  this.okayDiagnoses=new ArrayList();  this.poorDiagnoses=new ArrayList();}  }
class C{  public static int startDownloadServiceIfRequired(Context context,PendingIntent notificationClient,Class<?> serviceClass) throws NameNotFoundException {  return DownloaderService.startDownloadServiceIfRequired(context,notificationClient,serviceClass);}  }
class C{  protected void engineInit(int opmode,Key key,SecureRandom random) throws InvalidKeyException {  try {    core.init(opmode,key,(AlgorithmParameterSpec)null,random);  } catch (  InvalidAlgorithmParameterException ie) {    InvalidKeyException ike=new InvalidKeyException("requires PBE parameters");    ike.initCause(ie);    throw ike;  }}  }
class C{  public void loadUrl(String url){  if (_webview != null) {    _webview.loadUrl(url);  }}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  try {    return super.onInterceptTouchEvent(ev);  } catch (  Exception e) {    Logger.e("ViewPager",e);    return false;  }}  }
class C{  private static boolean isNumeric(String text){  text=text.trim();  int tlen=text.length();  for (int i=0; i < tlen; i++) {    if (Character.isDigit(text.charAt(i)) == false) {      return false;    }  }  return true;}  }
class C{  private void sendHandshakeSetConfig(){  OFSetConfig configSet=factory.buildSetConfig().setXid(handshakeTransactionIds--).setMissSendLen(0xffff).build();  OFBarrierRequest barrier=factory.buildBarrierRequest().setXid(handshakeTransactionIds--).build();  OFGetConfigRequest configReq=factory.buildGetConfigRequest().setXid(handshakeTransactionIds--).build();  List<OFMessage> msgList=ImmutableList.<OFMessage>of(configSet,barrier,configReq);  mainConnection.write(msgList);}  }
class C{  private void copySignerToNewLocation(){  String tenantLduDn=getLduDn();  ILdapMessage credsObjects=null;  try {    credsObjects=getTenantCredentials(tenantLduDn);    int maxIndex=getCurrMaxIndex(TRUSTED_CRED_OBJECT_CLASS,null) + 1;    String cn=getTenantCredentialCn(maxIndex);    ILdapEntry lastSigner=getLastSigner(credsObjects);    List<LdapMod> modValues=createAtts(lastSigner);    LdapValue[] values={new LdapValue(cn)};    LdapMod mod=new LdapMod(LdapModOperation.ADD,"cn",values);    modValues.add(mod);    String baseDn=String.format("CN=%s,CN=Tenants,CN=IdentityManager,CN=Services,%s",tenantName,this.rootDn);    String newDn="CN=" + cn + ","+ baseDn;    connection.addObject(newDn,modValues.toArray(new LdapMod[]{}));  }  finally {    closeMessage(credsObjects);  }}  }
class C{  private float makeNoise(double priority,int sharedFriends,int myFriends){  if (USE_SIMPLE_NOISE) {    return (float)(priority + Utils.makeNoise(MEAN,VAR));  } else {    return (float)computeNewPriority_sigmoidFractionOfFriends(priority,sharedFriends,myFriends);  }}  }
class C{  public void addSetting(String choice,String varName,VariableValue variable,String value){  SettingList s=choiceHash.get(choice);  s.addSetting(varName,variable,value);  if (variable != null) {    variables.add(variable);    if (!variable.label().equals(varName)) {      log.warn("Unexpected label /" + variable.label() + "/ for varName /"+ varName+ "/ during addSetting");    }  } else {    log.error("Variable pointer null when varName=" + varName + " in choice "+ choice+ "; ignored");  }}  }
class C{  @Override public int size(){  return mCount;}  }
class C{  private boolean updateInvoiceTax(boolean oldTax){  MInvoiceTax tax=MInvoiceTax.get(this,getPrecision(),oldTax,get_TrxName());  if (tax != null) {    if (!tax.calculateTaxFromLines())     return false;    if (tax.getTaxAmt().signum() != 0) {      if (!tax.save(get_TrxName()))       return false;    } else {      if (!tax.is_new() && !tax.delete(false,get_TrxName()))       return false;    }  }  return true;}  }
class C{  public String toStringDetail(){  StringBuffer sb=new StringBuffer(m_apps_host);  sb.append("{").append(m_db_host).append("-").append(m_db_name).append("-").append(m_db_uid).append("}");  Connection conn=getConnection(true,Connection.TRANSACTION_READ_COMMITTED);  if (conn != null) {    try {      DatabaseMetaData dbmd=conn.getMetaData();      sb.append("\nDatabase=" + dbmd.getDatabaseProductName() + " - "+ dbmd.getDatabaseProductVersion());      sb.append("\nDriver  =" + dbmd.getDriverName() + " - "+ dbmd.getDriverVersion());      if (isDataSource())       sb.append(" - via DS");      conn.close();    } catch (    Exception e) {    }  }  conn=null;  return sb.toString();}  }
class C{  public static void removePlayer(final String playerName){  final Player player=MockStendhalRPRuleProcessor.get().getPlayer(playerName);  if (player != null) {    removePlayer(player);  }}  }
class C{  public static void printError(int errorCode,String[] parameters){  recorder.record(errorCode,(Object[])parameters);  DebugPrinter.print("entering printError(int, String[]) with errorCode " + errorCode);  ToolIO.out.println(getMessage(ERROR,errorCode,parameters));  DebugPrinter.print("leaving printError(int, String[])");}  }
class C{  private static short CallNonvirtualShortMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualShortMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Short,true);    return Reflection.unwrapShort(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public boolean isNotCompatible(@NonNull List<NonCompatibleDevice> nonCompatibleDevices){  for (  NonCompatibleDevice device : nonCompatibleDevices) {    if (Build.MANUFACTURER.equalsIgnoreCase(device.getManufacturer())) {      if (device.ignoreModel()) {        return true;      }      if (Build.DEVICE.equalsIgnoreCase(device.getModel())) {        return true;      }    }  }  return false;}  }
class C{  @Override public void endDrawingLayers(){  sceneBuffer.endUpdatingScene();  getSurface().invalidateVisibleRegions();}  }
class C{  public void addSoundEvent(State event,int resId){  mSoundMap.put(event,resId);}  }
class C{  public Space S(ExpressionAST expression) throws ScopeException {  IDomain image=expression.getImageDomain();  if (image.isInstanceOf(IDomain.OBJECT)) {    Object adapter=image.getAdapter(Domain.class);    if (adapter != null && adapter instanceof Domain) {      Domain target=(Domain)adapter;      if (expression instanceof Compose) {        Compose compose=(Compose)expression;        Space result=null;        for (        ExpressionAST part : compose.getBody()) {          if (result == null) {            if (part instanceof DomainReference) {              DomainReference ref=(DomainReference)part;              result=S(ref.getDomain());            } else {              throw new ScopeException("Invalid expression");            }          } else {            if (part instanceof RelationReference) {              RelationReference ref=(RelationReference)part;              result=result.S(ref.getRelation());            } else {              throw new ScopeException("Invalid expression");            }          }        }        return result;      } else {        return S(target);      }    }  }  throw new ScopeException("Invalid expression type, must be a Domain Object");}  }
class C{  public CDeleteProjectAction(final JFrame parent,final IDatabase database,final INaviProject[] projects,final ITreeUpdater updater){  super("Delete Project");  m_parent=Preconditions.checkNotNull(parent,"IE01882: Parent argument can't be null");  m_database=Preconditions.checkNotNull(database,"IE01883: Database argument can't be null");  m_projects=Preconditions.checkNotNull(projects,"IE01884: Projects argument can't be null").clone();  m_updater=Preconditions.checkNotNull(updater,"IE02339: updater argument can not be null");  for (  final INaviProject project : projects) {    Preconditions.checkNotNull(project,"IE01885: Projects list contains a null-element");  }  putValue(ACCELERATOR_KEY,HotKeys.DELETE_HK.getKeyStroke());  putValue(MNEMONIC_KEY,(int)"HK_MENU_DELETE_PROJECT".charAt(0));}  }
class C{  @SuppressWarnings({"unchecked","OverriddenMethodCallDuringObjectConstruction"}) @Override protected Object clone() throws CloneNotSupportedException {  GridListSet<V> clone=(GridListSet<V>)super.clone();  clone.vals=(LinkedList<V>)vals.clone();  clone.comp=comp;  clone.strict=strict;  return clone;}  }
class C{  public void destroy(){  m_bfish.cleanUp();}  }
class C{  public static Test suite(){  return new TestSuite(TestRevealEvaluator.class);}  }
class C{  public Task<FileShareRestRep> deleteExport(URI id,Boolean allDir,String subDir){  UriBuilder builder=client.uriBuilder(getExportUrl());  if (subDir != null) {    builder.queryParam(SUBDIR_PARAM,subDir);  }  URI targetUri=builder.build(id);  return deleteTaskURI(targetUri);}  }
class C{  public StringSendPacket send(String str){  return send(str,null);}  }
class C{  public void flush() throws IOException {  writer.flush();}  }
class C{  @Override public void insert(String txt,int p){  if (jtext != null) {    boolean doScroll=(p >= jtext.getDocument().getLength() && jtext.getDocument().getLength() != 0);    jtext.insert(txt,p);    textPane.validate();    if (doScroll) {      JScrollBar bar=textPane.getVerticalScrollBar();      if (bar != null) {        bar.setValue(bar.getMaximum() - bar.getVisibleAmount());      }    }  }}  }
class C{  public Transition createTransition(){  TransitionImpl transition=new TransitionImpl();  return transition;}  }
class C{  public static TextContent plainText(String text){  TextContent content=new TextContent();  content.setText(text);  return content;}  }
class C{  public double localScore(int i){  double sum=0.0;  int count=0;  for (  SemBicScore score : semBicScores) {    double _score=score.localScore(i);    if (!Double.isNaN(_score)) {      sum+=_score;      count++;    }  }  return sum / count;}  }
class C{  public static void pop(){  Thread t=Thread.currentThread();  if (t.getClass() == CODE) {    CodenameOneThread c=(CodenameOneThread)t;    c.popStack();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:40.858 -0500",hash_original_method="04872214ED3EAFCD92368D9E52854C64",hash_generated_method="CA1183EF66099C44D7F5D167214BE7A5") public boolean hasVerticalScrollBar(){  return computeVerticalScrollRange() > computeVerticalScrollExtent();}  }
class C{  public static void deleteDocument(VerificationHost host,String documentToDelete) throws Throwable {  host.testStart(1);  host.send(Operation.createDelete(UriUtils.buildUri(host,documentToDelete)).setBody(new ServiceDocument()).setCompletion(host.getCompletion()));  host.testWait();}  }
class C{  public Bundler putBundle(String key,Bundle value){  bundle.putBundle(key,value);  return this;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getActiveDefinition_();}  }
class C{  public static void showScriptingDialog(final JFrame parent){  final String defaultLanguage=ConfigManager.instance().getGeneralSettings().getDefaultScriptingLanguage();  final CScriptingDialog dlg=new CScriptingDialog(parent,defaultLanguage,PluginInterface.instance());  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);  GuiHelper.applyWindowFix(dlg);}  }
class C{  public static String calculateFileDigest(final String algorithm,final Path file){  try (final InputStream input=Files.newInputStream(file)){    return calculateStreamDigest(algorithm,input,Files.size(file));  } catch (  final IOException ie) {    LEnv.LOGGER.debug("Failed to read file: " + file,ie);    return "";  }}  }
class C{  @Override public void close(){  isOpen=false;  fileMap.clear();}  }
class C{  public void ancestorAdded(final AncestorEvent event){  final Container ancestor=event.getComponent();  final Window owningWindow=SwingUtilities.getWindowAncestor(ancestor);  if (owningWindow != null) {    owningWindow.removeWindowListener(this);    owningWindow.addWindowListener(this);  }  final JComponent comp=event.getComponent();  if (comp instanceof JRootPane) {    final JRootPane rp=(JRootPane)comp;    if (rp.isEnabled() && rp.getDefaultButton() != null) {      updateDefaultButton((JRootPane)comp);    }  }}  }
class C{  public static void fill(double[] array,double value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public E peek(){  if (isEmpty()) {    return null;  }  return elements[0];}  }
class C{  public int size(){  return keywords.size();}  }
class C{  public Settings(Properties mapping){  explicitSettings=new HashSet<String>();  fillSettings(XMLUtils.extractMapping(SETTINGS_FILE));  explicitSettings.clear();  fillSettings(mapping);}  }
class C{  protected void initialize(Operation operation,Object resultObj,Map<String,Object> keyMap){  _keyMap=keyMap;  _dbClient=(DbClient)keyMap.get(Constants.dbClient);  _profile=(AccessProfile)keyMap.get(Constants.ACCESSPROFILE);}  }
class C{  @Override public void updateApp(String marathonJson){  String marathonEndpoint=getServiceUrl().toString();  JSONObject marathonObject=new JSONObject(marathonJson);  String id=marathonObject.getString("id");  HttpRequestWithBody httpRequest=Unirest.put(marathonEndpoint + END_POINT_EXT + "/"+ id);  deployOrUpdateApp(marathonJson,httpRequest,HttpStatus.SC_OK);}  }
class C{  public static <T>Function<T,T> identity(){  return null;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("unchecked") @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case SGraphPackage.STATECHART__REGIONS:    return ((InternalEList<InternalEObject>)(InternalEList<?>)getRegions()).basicAdd(otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public static ByteOrder nativeOrder(){  return Bits.byteOrder();}  }
class C{  public TableLayoutConstraintEditor(com.codename1.ui.table.TableLayout l,com.codename1.ui.table.TableLayout.Constraint con){  this.l=l;  initComponents();  if (con == null) {    row.setModel(new SpinnerNumberModel(-1,-1,1000,1));    column.setModel(new SpinnerNumberModel(-1,-1,1000,1));    width.setModel(new SpinnerNumberModel(-2,-1,100,1));    height.setModel(new SpinnerNumberModel(-1,-1,100,1));    hspan.setModel(new SpinnerNumberModel(1,1,20,1));    vspan.setModel(new SpinnerNumberModel(1,1,20,1));  } else {    row.setModel(new SpinnerNumberModel(con.getRow(),-1,l.getRows() - 1,1));    column.setModel(new SpinnerNumberModel(con.getColumn(),-1,l.getColumns() - 1,1));    width.setModel(new SpinnerNumberModel(con.getWidthPercentage(),-2,100,1));    height.setModel(new SpinnerNumberModel(con.getHeightPercentage(),-1,100,1));    hspan.setModel(new SpinnerNumberModel(con.getHorizontalSpan(),1,20,1));    vspan.setModel(new SpinnerNumberModel(con.getVerticalSpan(),1,20,1));    for (int iter=0; iter < ALIGN.length; iter++) {      if (ALIGN[iter] == con.getHorizontalAlign()) {        align.setSelectedIndex(iter);        break;      }    }    for (int iter=0; iter < VALIGN.length; iter++) {      if (VALIGN[iter] == con.getVerticalAlign()) {        valign.setSelectedIndex(iter);        break;      }    }  }}  }
class C{  public SchemeRegistry(){  super();  registeredSchemes=new LinkedHashMap<String,Scheme>();}  }
class C{  public void waitAllSitesDbStable(){  String prefix="Waiting for DB cluster become stable on all sites ...";  log.info(prefix);  DbJmxClient geoInstance=getJmxClient(LOCALHOST);  List<URI> vdcIdIter=queryByType(VirtualDataCenter.class,true);  for (  URI vdcId : vdcIdIter) {    log.info("loop db status check on {}",vdcId.toString());    VirtualDataCenter vdc=queryObject(VirtualDataCenter.class,vdcId);    if (!shouldCheckDbStatus(vdc)) {      log.error("ignore vdc for db status check {}",vdcId);      continue;    }    if (vdc.getConnectionStatus() != ConnectionStatus.DISCONNECTED) {      Site activeSite=drUtil.getActiveSite(vdc.getShortId());      waitDbNodesStable(geoInstance,vdc.getShortId(),activeSite.getNodeCount());    }  }}  }
class C{  private void actionExportExcel(){  RModel model=m_data.query();  if (model == null) {    return;  }  try {    String path=System.getProperty("java.io.tmpdir");    String prefix=makePrefix(this.getTitle());    if (prefix.equals(""))     prefix=makePrefix(Msg.getMsg(Env.getCtx(),"InfoAccount"));    if (log.isLoggable(Level.FINE)) {      log.log(Level.FINE,"Path=" + path + " Prefix="+ prefix);    }    File file=File.createTempFile(prefix,".xls",new File(path));    RModelExcelExporter exporter=new RModelExcelExporter((RModel)model);    exporter.export(file,null,false);    Filedownload.save(file,"application/msexcel");  } catch (  Exception e) {    FDialog.error(0,this,"LoadError",e.getLocalizedMessage());    if (CLogMgt.isLevelFinest())     e.printStackTrace();  }}  }
class C{  @Override protected int sizeOf(String key,BitmapDrawable value){  final int bitmapSize=getBitmapSize(value) / 1024;  return bitmapSize == 0 ? 1 : bitmapSize;}  }
class C{  public void onCancel(){}  }
class C{  public static void requireNonNulls(Object o0,Object o1,Object o2){  if (o0 == null) {    throw new NullPointerException(FIRST_ARG_IS_NULL);  }  if (o1 == null) {    throw new NullPointerException(SECOND_ARG_IS_NULL);  }  if (o2 == null) {    throw new NullPointerException(THIRD_ARG_IS_NULL);  }}  }
class C{  public File outFile(final String name){  return file(mZip ? name + FileUtils.GZ_SUFFIX : name);}  }
class C{  protected void causeToXContent(XContentBuilder builder,Params params) throws IOException {  final Throwable cause=getCause();  if (cause != null && params.paramAsBoolean(REST_EXCEPTION_SKIP_CAUSE,REST_EXCEPTION_SKIP_CAUSE_DEFAULT) == false) {    builder.field("caused_by");    builder.startObject();    toXContent(builder,params,cause);    builder.endObject();  }}  }
class C{  private void delete(EnumerationContext ctx){  CompletionHandler completionHandler=null;  QueryTask.Query query=QueryTask.Query.Builder.create().addKindFieldClause(ComputeState.class).addFieldClause(ComputeState.FIELD_NAME_RESOURCE_POOL_LINK,ctx.enumRequest.resourcePoolLink).addFieldClause(ComputeState.FIELD_NAME_PARENT_LINK,ctx.enumRequest.resourceLink()).addRangeClause(ComputeState.FIELD_NAME_UPDATE_TIME_MICROS,NumericRange.createLessThanRange(ctx.enumerationStartTimeInMicros)).build();  QueryTask q=QueryTask.Builder.createDirectTask().addOption(QueryOption.EXPAND_CONTENT).setResultLimit(QUERY_RESULT_LIMIT).setQuery(query).build();  q.tenantLinks=ctx.computeHostDesc.tenantLinks;  logFine("Querying compute resources for deletion");  sendRequest(Operation.createPost(this,ServiceUriPaths.CORE_QUERY_TASKS).setConnectionSharing(true).setBody(q).setCompletion(completionHandler));}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] newArray(Class<T> type,int length){  return (T[])Array.newInstance(type,length);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public boolean isExists(){  return exists;}  }
class C{  public ClaimBuilder object(String key){  ClaimBuilder subBuilder=new ClaimBuilder();  data.put(key,subBuilder.data);  return subBuilder;}  }
class C{  private static float calculateScore(final int[] playCounts){  if (playCounts == null) {    return 0;  }  float score=0;  for (int i=0; i < Math.min(playCounts.length,NUM_WEEKS); i++) {    score+=playCounts[i] * getScoreMultiplierForWeek(i);  }  return score;}  }
class C{  void drawFrame(PShape frame){  pushMatrix();  scale(32);  translate(0,0,-.5f);  shape(frame);  popMatrix();}  }
class C{  public boolean isZero(){  return getValue() == 0;}  }
class C{  public static void writeTestMatrix(String file,double[][] matrix,boolean isR){  try {    DataOutputStream out=null;    if (!isR) {      FileSystem fs=FileSystem.get(conf);      out=fs.create(new Path(file),true);    } else {      out=new DataOutputStream(new FileOutputStream(file));    }    BufferedWriter pw=new BufferedWriter(new OutputStreamWriter(out));    if (isR) {      pw.append("%%MatrixMarket matrix coordinate real general\n");      pw.append("" + matrix.length + " "+ matrix[0].length+ " "+ matrix.length * matrix[0].length + "\n");    }    StringBuilder sb=new StringBuilder();    boolean emptyOutput=true;    for (int i=0; i < matrix.length; i++) {      for (int j=0; j < matrix[i].length; j++) {        if (matrix[i][j] == 0)         continue;        sb.append(i + 1);        sb.append(' ');        sb.append(j + 1);        sb.append(' ');        sb.append(matrix[i][j]);        sb.append('\n');        pw.append(sb.toString());        sb.setLength(0);        emptyOutput=false;      }    }    if (emptyOutput)     pw.append("1 1 " + matrix[0][0]);    pw.close();    out.close();  } catch (  IOException e) {    fail("unable to write test matrix (" + file + "): "+ e.getMessage());  }}  }
class C{  protected void printIssueAndComments(String issueId) throws IOException, ServiceException {  printIssueAndComments(getIssueEntry(issueId));}  }
class C{  public void test_type_casts_long() throws Exception {  new TestHelper("type_cast_long","type_cast_long.rq","empty.trig","type_cast_long.srx").runTest();}  }
class C{  public void declareExtensions(ExtensionProfile extProfile){}  }
class C{  final public int loadSigned8(int addr){  try {    if (logMemoryMessages)     System.err.println("LoadS8 address: 0x" + Integer.toHexString(addr) + " val: "+ readableMemory[getPTE(addr)][getOffset(addr)]);    byte[] pageData=readableMemory[getPTE(addr)];    if (pageData == null) {      map(truncateToPage(addr),PAGE_SIZE,true,true,true);      pageData=readableMemory[getPTE(addr)];    }    return pageData[getOffset(addr)];  } catch (  NullPointerException e) {    System.err.println("Null pointer exception at address: 0x" + Integer.toHexString(addr));    throw e;  }}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRasterInfo image;  WhiteboxRaster output;  int cols, rows, col, row, a, progress;  double noData;  String inputHeader;  String outputHeader;  double[] data;  double reclassInterval=0;  double startingValue=0;  double endingValue=Float.POSITIVE_INFINITY;  double z;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  reclassInterval=Double.parseDouble(args[2]);  startingValue=Double.parseDouble(args[3]);  if (!args[4].isEmpty() && !args[4].toLowerCase().contains("not specified")) {    endingValue=Double.parseDouble(args[4]);  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    image=new WhiteboxRasterInfo(inputHeader);    noData=image.getNoDataValue();    rows=image.getNumberRows();    cols=image.getNumberColumns();    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          if (isBetween(data[col],startingValue,endingValue)) {            z=Math.floor(data[col] / reclassInterval) * reclassInterval;            output.setValue(row,col,z);          } else {            output.setValue(row,col,data[col]);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(row * 100.0 / rows);      updateProgress(progress);    }    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @POST @Path("/{id}/cancel") @Consumes({MediaType.APPLICATION_JSON,MediaType.APPLICATION_XML}) public Response cancelScheduledEvent(@PathParam("id") String id){  ScheduledEvent scheduledEvent=queryResource(uri(id));  ArgValidator.checkEntity(scheduledEvent,uri(id),true);  StorageOSUser user=getUserFromContext();  verifyAuthorizedInTenantOrg(uri(scheduledEvent.getTenant()),user);  if (!(scheduledEvent.getEventStatus().equals(ScheduledEventStatus.APPROVAL) || scheduledEvent.getEventStatus().equals(ScheduledEventStatus.APPROVED) || scheduledEvent.getEventStatus().equals(ScheduledEventStatus.REJECTED))) {    throw APIException.badRequests.unexpectedValueForProperty(ScheduledEvent.EVENT_STATUS,"APPROVAL|APPROVED|REJECTED",scheduledEvent.getEventStatus().name());  }  Order order=client.orders().findById(scheduledEvent.getLatestOrderId());  ArgValidator.checkEntity(order,uri(id),true);  order.setOrderStatus(OrderStatus.CANCELLED.name());  client.save(order);  scheduledEvent.setEventStatus(ScheduledEventStatus.CANCELLED);  client.save(scheduledEvent);  try {    log.info("Cancelled a scheduledEvent {}:{}",scheduledEvent.getId(),ScheduleInfo.deserialize(org.apache.commons.codec.binary.Base64.decodeBase64(scheduledEvent.getScheduleInfo().getBytes(UTF_8))).toString());  } catch (  Exception e) {    log.error("Failed to parse scheduledEvent.");  }  return Response.ok().build();}  }
class C{  public boolean isSetStoreName(){  return this.storeName != null;}  }
class C{  @Override public Token nextToken(){  Token t=super.nextToken();  while (t.getType() == STLexer.NEWLINE || t.getType() == STLexer.INDENT) {    t=super.nextToken();  }  return t;}  }
class C{  public Style(Color fg,Color bg){  this(fg,bg,DEFAULT_FONT);}  }
class C{  public static <T,U extends Collection<T>>Map<String,U> mergeCollectionMaps(Collection<ActionType> actionTypes,Function<ActionType,Map<String,U>> transformFunction){  Collection<Map<String,U>> values=Collections2.transform(actionTypes,transformFunction);  Map<String,U> result=new HashMap<>();  for (  Map<String,U> map : values) {    for (    Map.Entry<String,U> entry : map.entrySet()) {      if (!result.containsKey(entry.getKey())) {        result.put(entry.getKey(),entry.getValue());      } else {        result.get(entry.getKey()).addAll(entry.getValue());      }    }  }  return result;}  }
class C{  public void addCallbackPull(ICallback callback){  callbacksPull.add(callback);}  }
class C{  public String numFoldsTipText(){  return "Determines the amount of data used for reduced-error pruning. " + " One fold is used for pruning, the rest for growing the rules.";}  }
class C{  public boolean isAlertDefinitionCreated(StatAlertDefinition alertDefinition){synchronized (ALERT_DEFINITIONS) {    return ALERT_DEFINITIONS.containsKey(Integer.valueOf(alertDefinition.getId()));  }}  }
class C{  public OutlierResult run(Database database,Relation<O> relation){  StepProgress stepprog=LOG.isVerbose() ? new StepProgress(5) : null;  Pair<KNNQuery<O>,KNNQuery<O>> pair=getKNNQueries(database,relation,stepprog);  KNNQuery<O> knnComp=pair.getFirst();  KNNQuery<O> knnReach=pair.getSecond();  if (knnComp == null) {    throw new AbortException("No kNN queries supported by database for comparison distance function.");  }  if (knnReach == null) {    throw new AbortException("No kNN queries supported by database for density estimation distance function.");  }  WritableDoubleDataStore pdists=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_DB);  LOG.beginStep(stepprog,3,"Computing pdists");  computePDists(relation,knnReach,pdists);  WritableDoubleDataStore plofs=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_HOT | DataStoreFactory.HINT_TEMP);  LOG.beginStep(stepprog,4,"Computing PLOF");  double nplof=computePLOFs(relation,knnComp,pdists,plofs);  DoubleMinMax mm=new DoubleMinMax();{    LOG.beginStep(stepprog,5,"Computing LoOP scores");    FiniteProgress progressLOOPs=LOG.isVerbose() ? new FiniteProgress("LoOP for objects",relation.size(),LOG) : null;    final double norm=1. / (nplof * MathUtil.SQRT2);    for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {      double loop=NormalDistribution.erf((plofs.doubleValue(iditer) - 1.) * norm);      plofs.putDouble(iditer,loop);      mm.put(loop);      LOG.incrementProcessed(progressLOOPs);    }    LOG.ensureCompleted(progressLOOPs);  }  LOG.setCompleted(stepprog);  DoubleRelation scoreResult=new MaterializedDoubleRelation("Local Outlier Probabilities","loop-outlier",plofs,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new ProbabilisticOutlierScore(mm.getMin(),mm.getMax(),0.);  return new OutlierResult(scoreMeta,scoreResult);}  }
class C{  public CSearchTableAction(final Window parent,final JTable table){  super("Search");  m_parent=Preconditions.checkNotNull(parent,"IE01922: Parent argument can't be null");  m_table=Preconditions.checkNotNull(table,"IE01923: Table argument can't be null");  putValue(ACCELERATOR_KEY,HotKeys.SEARCH_HK.getKeyStroke());}  }
class C{  public Folder(Context context,AttributeSet attrs){  super(context,attrs);  setAlwaysDrawnWithCacheEnabled(false);  mInputMethodManager=(InputMethodManager)getContext().getSystemService(Context.INPUT_METHOD_SERVICE);  Resources res=getResources();  mExpandDuration=res.getInteger(R.integer.config_folderExpandDuration);  mMaterialExpandDuration=res.getInteger(R.integer.config_materialFolderExpandDuration);  mMaterialExpandStagger=res.getInteger(R.integer.config_materialFolderExpandStagger);  if (sDefaultFolderName == null) {    sDefaultFolderName=res.getString(R.string.folder_name);  }  if (sHintText == null) {    sHintText=res.getString(R.string.folder_hint_text);  }  mLauncher=(Launcher)context;  setFocusableInTouchMode(true);}  }
class C{  private void importRecords(){  for (  X_I_Product_BOM importBOM : getRecords(false,m_IsImportOnlyNoErrors)) {    isImported=false;    MPPProductBOM bom=getMPPProductBOM(importBOM);    MPPProductBOMLine bomLine=null;    if (bom != null)     bomLine=importBOMLine(bom,importBOM);    if (bomLine != null) {      importBOM.setPP_Product_BOMLine_ID(bomLine.getPP_Product_BOMLine_ID());      importBOM.setPP_Product_BOM_ID(bom.get_ID());      imported++;      isImported=true;    }    importBOM.setI_IsImported(isImported);    importBOM.setProcessed(isImported);    importBOM.saveEx();  }}  }
class C{  @Override public boolean containsKey(Object key){  return _map.containsKey(unwrapKey(key));}  }
class C{  public void init(@Nullable AffinityTopologyVersion topVer){  AffinityTopologyVersion lockedTopVer=cctx.shared().lockedTopologyVersion(null);  if (lockedTopVer != null) {    canRemap=false;    map(keys,Collections.<ClusterNode,LinkedHashMap<KeyCacheObject,Boolean>>emptyMap(),lockedTopVer);  } else {    AffinityTopologyVersion mapTopVer=topVer;    if (mapTopVer == null) {      mapTopVer=tx == null ? (canRemap ? cctx.affinity().affinityTopologyVersion() : cctx.shared().exchange().readyAffinityVersion()) : tx.topologyVersion();    }    map(keys,Collections.<ClusterNode,LinkedHashMap<KeyCacheObject,Boolean>>emptyMap(),mapTopVer);  }  markInitialized();}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  buffer.append("UasDaoSysRecO[");  buffer.append("m_maxBadCnts = ").append(m_maxBadCnts);  buffer.append(", m_pwdVp = ").append(m_pwdVp);  buffer.append(", m_pwdMinLen = ").append(m_pwdMinLen);  buffer.append("]");  return buffer.toString();}  }
class C{  public void undoableEditHappened(UndoableEditEvent evt){  undoManager.addEdit(evt.getEdit());}  }
class C{  @Override public void initialize(){  experiment.setBoardSize(simPaneCtrl.getParamAsInt(PARAM_BOARD_SIZE));  Object strategy=simPaneCtrl.getParamValue(PARAM_STRATEGY);  Config config;  if (Arrays.asList("Depth-First Search","Breadth-First Search","Genetic Algorithm").contains(strategy))   config=Config.EMPTY; else   if (simPaneCtrl.getParamValue(PARAM_INIT_CONFIG).equals("Random"))   config=Config.QUEEN_IN_EVERY_COL; else   config=Config.QUEENS_IN_FIRST_ROW;  experiment.initExperiment(config);  stateViewCtrl.update(experiment.getBoard());}  }
class C{  protected boolean isTransactionActive(){  return this.transactionActive;}  }
class C{  private double calculateBBands(BigDecimal numberOfSTD,LinkedList<Double> yyValues,Double sum){  if (this.isUpper) {    return ((sum / this.getLength()) + (standardDeviation(yyValues,sum) * this.getNumberOfSTD().doubleValue()));  } else {    return ((sum / this.getLength()) - (standardDeviation(yyValues,sum) * this.getNumberOfSTD().doubleValue()));  }}  }
class C{  public static boolean isNextWindow(URI id){  return NEXT.equals(id);}  }
class C{  public DefaultChartEditorFactory(){}  }
class C{  public DefaultChildSelector(Selector ancestor,SimpleSelector simple){  super(ancestor,simple);}  }
class C{  protected synchronized void openFile() throws IOException {  if (isOpen()) {    close();  }  final File file=getFile().getCanonicalFile();  final File parent=file.getParentFile();  if (null != parent && !parent.exists()) {    parent.mkdirs();  }  final FileOutputStream outputStream=new FileOutputStream(file.getPath(),m_append);  setOutputStream(outputStream);  open();}  }
class C{  public MetadataItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private Set<URI> andUriSet(Set<URI> set1,Set<URI> set2){  HashSet<URI> resultSet=new HashSet<URI>();  for (  URI uri : set1) {    if (set2.contains(uri)) {      resultSet.add(uri);    }  }  return resultSet;}  }
class C{  public static final void run(DBIDs ids,Processor... procs){  ParallelCore core=ParallelCore.getCore();  core.connect();  try {    ArrayDBIDs aids=DBIDUtil.ensureArray(ids);    final int size=aids.size();    int numparts=core.getParallelism();    numparts=(size > numparts * numparts * 16) ? numparts * Math.max(1,numparts - 1) : numparts;    final int blocksize=(size + (numparts - 1)) / numparts;    List<Future<ArrayDBIDs>> parts=new ArrayList<>(numparts);    for (int i=0; i < numparts; i++) {      final int start=i * blocksize;      final int end=(start + blocksize < size) ? start + blocksize : size;      Callable<ArrayDBIDs> run=new BlockArrayRunner(aids,start,end,procs);      parts.add(core.submit(run));    }    for (    Future<ArrayDBIDs> fut : parts) {      fut.get();    }  } catch (  ExecutionException e) {    throw new RuntimeException("Processor execution failed.",e);  }catch (  InterruptedException e) {    throw new RuntimeException("Parallel execution interrupted.");  } finally {    core.disconnect();  }}  }
class C{  public void add(Assignment singleAssign){  if (singleAssign.isEmpty()) {    return;  }  if (groundings.stream().anyMatch(null)) {    return;  }  groundings.add(singleAssign);  if (!isEmpty()) {    groundings.remove(new Assignment());  }}  }
class C{  public static void reduceToBiggestCluster(Network network,Map<Id<Node>,Node> biggestCluster){  List<Node> allNodes2=new ArrayList<>(network.getNodes().values());  for (  Node node : allNodes2) {    if (!biggestCluster.containsKey(node.getId())) {      network.removeNode(node.getId());    }  }  log.info("  resulting network contains " + network.getNodes().size() + " nodes and "+ network.getLinks().size()+ " links.");  log.info("done.");}  }
class C{  public final boolean checkTag(int identifier){  return this.id == identifier;}  }
class C{  public void add(int id,String name,String val){  FolderTokenExtFld fld;  fld=new FolderTokenExtFld(id,name,val);  m_extFlds.add(fld);}  }
class C{  public static IntegerOrPercentage valueOf(final String s){  return new IntegerOrPercentage(s);}  }
class C{  public TableIterator iterator(IntIterator rows){  return new TableIterator(this,rows);}  }
class C{  public void testValueOfLongPositive2(){  long longVal=58930018L;  BigInteger aNumber=BigInteger.valueOf(longVal);  byte rBytes[]={3,-125,51,98};  byte resBytes[]=new byte[rBytes.length];  resBytes=aNumber.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,aNumber.signum());}  }
class C{  public void applyFormat(){  if (isValidFormat()) {    m_Format=new SimpleDateFormat(m_FormatText.getText());    m_propSupport.firePropertyChange(null,null,null);  } else {    throw new IllegalArgumentException("Date format '" + m_FormatText.getText() + "' is invalid! Cannot execute applyFormat!");  }}  }
class C{  public static boolean isWhiteSpace(char ch){  return (ch == 0x20) || (ch == 0x09) || (ch == 0xD)|| (ch == 0xA);}  }
class C{  public boolean isSysCall(){  return (getType() == TypeReference.SysCall) || ((resolvedMember != null) && (resolvedMember.isSysCall()));}  }
class C{  public void close(){  if (cache != null) {    CloseableUtils.closeQuietly(cache);  }  if (serviceDiscovery != null) {    CloseableUtils.closeQuietly(serviceDiscovery);  }}  }
class C{  public void enableLogArgumentNames(){  mBuilderConfig|=GLDebugHelper.CONFIG_LOG_ARGUMENT_NAMES;}  }
class C{  public double pdf(int k){  return Math.exp(k * Math.log(this.mean) - Arithmetic.logFactorial(k) - this.mean);}  }
class C{  public final boolean isPrimaryWithWait(){  if (this.isPrimary()) {    return true;  }  InternalDistributedMember primary=waitForNewPrimary();  if (primary != null) {    return true;  }  return false;}  }
class C{  private void drawNotebookPaperBackground(Canvas canvas,Paint paint){  int i=0;  boolean doneV=false;  while (!(doneV)) {    if (i < canvas.getHeight())     canvas.drawLine(0,i,canvas.getWidth(),i,paint); else     doneV=true;    i+=75;  }  paint.setColor(NOTEBOOK_LEFT_LINE_COLOR);  canvas.drawLine(NOTEBOOK_LEFT_LINE_PADDING,0,NOTEBOOK_LEFT_LINE_PADDING,canvas.getHeight(),paint);}  }
class C{  public SimpleSGD(){}  }
class C{  public T caseForStatement(ForStatement object){  return null;}  }
class C{  public static Customer fromJson(String json){  Gson gson=BuyClientUtils.createDefaultGson(Customer.class);  Customer customer=gson.fromJson(json,Customer.class);  customer.tagSet=new HashSet<>();  if (!TextUtils.isEmpty(customer.tags)) {    for (    String tag : customer.tags.split(",")) {      String myTag=tag.trim();      customer.tagSet.add(myTag);    }  }  return customer;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public RequestPrepare(final byte[] data){  this.data=data;}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  protected synchronized void sync(){  if (byteBuffer != null) {    byteBuffer.force();  }}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case FIELD:    return isSetField();}throw new IllegalStateException();}  }
class C{  public List<A> toList(){  Heap<A> current=root;  List<A> list=List.empty();  int sz=size;  while (!current.isEmpty()) {    list=list.plus(current.value);    current=current.pop(comparator,sz--);  }  return list.reverse();}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public boolean hasEulerianCycle(){  return cycle != null;}  }
class C{  public static int convert(final ExpressionType type){switch (type) {case EXPRESSION_LIST:    return IOperandTree.NODE_TYPE_SYMBOL_ID;case IMMEDIATE_FLOAT:  return IOperandTree.NODE_TYPE_IMMEDIATE_FLOAT_ID;case IMMEDIATE_INTEGER:return IOperandTree.NODE_TYPE_IMMEDIATE_INT_ID;case MEMDEREF:return IOperandTree.NODE_TYPE_DEREFERENCE_ID;case OPERATOR:return IOperandTree.NODE_TYPE_OPERATOR_ID;case REGISTER:return IOperandTree.NODE_TYPE_REGISTER_ID;case SIZE_PREFIX:return IOperandTree.NODE_TYPE_SIZE_PREFIX_ID;case SYMBOL:return IOperandTree.NODE_TYPE_SYMBOL_ID;default :throw new IllegalStateException(String.format("IE00225: Unknown expression type '%s'",type));}}  }
class C{  public void subtract(IOIterator<? extends SequenceNameLocus> reader) throws IOException {  while (reader.hasNext()) {    subtract(reader.next());  }}  }
class C{  protected boolean checkNodeAddress(int address){  return (address >= 0) && (address < 256);}  }
class C{  public String globalInfo(){  return "Implements the Moore's method to split a node of a ball tree.\n\n" + "For more information please see section 2 of the 1st and 3.2.3 of " + "the 2nd:\n\n"+ getTechnicalInformation().toString();}  }
class C{  @Override public synchronized void engineSetEntry(String alias,KeyStore.Entry entry,KeyStore.ProtectionParameter protParam) throws KeyStoreException {  if (protParam != null && !(protParam instanceof KeyStore.PasswordProtection)) {    throw new KeyStoreException("unsupported protection parameter");  }  KeyStore.PasswordProtection pProtect=null;  if (protParam != null) {    pProtect=(KeyStore.PasswordProtection)protParam;  }  if (entry instanceof KeyStore.TrustedCertificateEntry) {    if (protParam != null && pProtect.getPassword() != null) {      throw new KeyStoreException("trusted certificate entries are not password-protected");    } else {      KeyStore.TrustedCertificateEntry tce=(KeyStore.TrustedCertificateEntry)entry;      setCertEntry(alias,tce.getTrustedCertificate(),tce.getAttributes());      return;    }  } else   if (entry instanceof KeyStore.PrivateKeyEntry) {    if (pProtect == null || pProtect.getPassword() == null) {      throw new KeyStoreException("non-null password required to create PrivateKeyEntry");    } else {      KeyStore.PrivateKeyEntry pke=(KeyStore.PrivateKeyEntry)entry;      setKeyEntry(alias,pke.getPrivateKey(),pProtect,pke.getCertificateChain(),pke.getAttributes());      return;    }  } else   if (entry instanceof KeyStore.SecretKeyEntry) {    if (pProtect == null || pProtect.getPassword() == null) {      throw new KeyStoreException("non-null password required to create SecretKeyEntry");    } else {      KeyStore.SecretKeyEntry ske=(KeyStore.SecretKeyEntry)entry;      setKeyEntry(alias,ske.getSecretKey(),pProtect,(Certificate[])null,ske.getAttributes());      return;    }  }  throw new KeyStoreException("unsupported entry type: " + entry.getClass().getName());}  }
class C{  protected void tearDown() throws Exception {  super.tearDown();}  }
class C{  public void scale(float x,float y){  Matrix2f tmp=new Matrix2f();  tmp.loadScale(x,y);  multiply(tmp);}  }
class C{  public void registerAboveContentView(View v,LayoutParams params){  if (!mBroadcasting)   mViewAbove=v;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void paint(Graphics graphics,int index,SymbolEvent symbol){  Graphics2D g2=(Graphics2D)graphics;  g2.setColor(getForeground());  Path2D.Float polyline=new Path2D.Float(Path2D.Float.WIND_EVEN_ODD,mSamples.size());  float middleY=((float)getHeight() / 2.0f);  float indexWidth=(float)(getWidth()) / (float)mSampleCount;  float startX=(float)index * indexWidth;  float stopX=(float)(index + 1) * indexWidth;  float fivePercent=indexWidth * .05f;  float leftX=startX + fivePercent;  float rightX=stopX - fivePercent;  polyline.moveTo(startX,middleY);  polyline.lineTo(leftX,middleY);  float y=(symbol.getDecision() ? (middleY - (middleY * 0.5f)) : (middleY + (middleY * 0.5f)));  polyline.lineTo(leftX,y);  polyline.lineTo(rightX,y);  polyline.lineTo(rightX,middleY);  polyline.lineTo(stopX,middleY);  g2.draw(polyline);  String bit=symbol.getDecision() ? "1" : "0";  FontMetrics fontMetrics=graphics.getFontMetrics(this.getFont());  Rectangle2D label=fontMetrics.getStringBounds(bit,graphics);  float offsetX=(float)label.getWidth() / 2.0f;  float offsetY=(float)label.getHeight() / 2.0f;  float middleX=startX + (indexWidth / 2.0f);  graphics.drawString(bit,(int)(middleX - offsetX),(int)(middleY - ((middleY < y) ? offsetY : -(2.0f * offsetY))));  float sampleWidth=(rightX - leftX) / (float)(symbol.getSamplesPerSymbol() + 1);  g2.setColor(Color.GREEN);  for (int x=0; x < symbol.getSamplesPerSymbol(); x++) {    Path2D.Float line=new Path2D.Float(Path2D.Float.WIND_EVEN_ODD,2);    float sampleX=leftX + ((x + 1) * sampleWidth);    line.moveTo(sampleX,(symbol.getBitSet().get(x) ? middleY - (middleY * .05f) : middleY + (middleY * .05f)));    float sampleY=(symbol.getBitSet().get(x) ? (middleY - (middleY * 0.45f)) : (middleY + (middleY * 0.45f)));    line.lineTo(sampleX,sampleY);    g2.draw(line);    graphics.drawString(symbol.getShift().getLabel(),(int)(middleX - offsetX),(int)(y - ((y < middleY) ? offsetY : -(2.0f * offsetY))));  }}  }
class C{  private InfoKind(String str,boolean sensitive){  this.sensitive=sensitive;  this.name=str;}  }
class C{  public AccountInfo(final Address address,final Amount balance,final Amount vestedBalance,final BlockAmount numHarvestedBlocks,final String label,final double importance){  this(address,balance,vestedBalance,numHarvestedBlocks,label,importance,null);}  }
class C{  public RuleGrounding(Collection<Assignment> assigns){  this();  extend(assigns);}  }
class C{  private void init(String host,int mask){  if ((mask & ALL) != mask)   throw new IllegalArgumentException("invalid actions mask");  this.mask=mask | RESOLVE;  int rb=0;  int start=0, end=0;  int sep=-1;  String hostport=host;  if (host.charAt(0) == '[') {    start=1;    rb=host.indexOf(']');    if (rb != -1) {      host=host.substring(start,rb);    } else {      throw new IllegalArgumentException("invalid host/port: " + host);    }    sep=hostport.indexOf(':',rb + 1);  } else {    start=0;    sep=host.indexOf(':',rb);    end=sep;    if (sep != -1) {      host=host.substring(start,end);    }  }  if (sep != -1) {    String port=hostport.substring(sep + 1);    try {      portrange=parsePort(port);    } catch (    Exception e) {      throw new IllegalArgumentException("invalid port range: " + port);    }  } else {    portrange=new int[]{PORT_MIN,PORT_MAX};  }  hostname=host;  if (host.lastIndexOf('*') > 0) {    throw new IllegalArgumentException("invalid host wildcard specification");  } else   if (host.startsWith("*")) {    wildcard=true;    if (host.equals("*")) {      cname="";    } else     if (host.startsWith("*.")) {      cname=host.substring(1).toLowerCase();    } else {      throw new IllegalArgumentException("invalid host wildcard specification");    }    return;  } else {    if (host.length() > 0) {      char ch=host.charAt(0);      if (ch == ':' || Character.digit(ch,16) != -1) {        byte ip[]=IPAddressUtil.textToNumericFormatV4(host);        if (ip == null) {          ip=IPAddressUtil.textToNumericFormatV6(host);        }        if (ip != null) {          try {            addresses=new InetAddress[]{InetAddress.getByAddress(ip)};            init_with_ip=true;          } catch (          UnknownHostException uhe) {            invalid=true;          }        }      }    }  }}  }
class C{  static String access_string(int af,String separator){  boolean hasone=false;  String s="";  if ((af & ACC_PUBLIC) != 0) {    s="public";    hasone=true;  }  if ((af & ACC_PRIVATE) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "private";  }  if ((af & ACC_PROTECTED) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "protected";  }  if ((af & ACC_STATIC) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "static";  }  if ((af & ACC_FINAL) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "final";  }  if ((af & ACC_SUPER) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "super";  }  if ((af & ACC_VOLATILE) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "volatile";  }  if ((af & ACC_TRANSIENT) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "transient";  }  if ((af & ACC_INTERFACE) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "interface";  }  if ((af & ACC_ABSTRACT) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "abstract";  }  if ((af & ACC_STRICT) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "strict";  }  if ((af & ACC_ANNOTATION) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "annotation";  }  if ((af & ACC_ENUM) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "enum";  }  if ((af & ACC_UNKNOWN) != 0) {    if (hasone)     s=s + separator; else     hasone=true;    s=s + "unknown";  }  return s;}  }
class C{  public Vector2(){}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(new Integer(myUID),this);  if (body != null)   body.walkGraph(semNodesTable);  for (int i=0; i < params.length; i++) {    params[i].walkGraph(semNodesTable);  }  ;}  }
class C{  private int parseUTF8Char() throws IOException {  int ch=read();  if (ch < 0x80)   return ch; else   if ((ch & 0xe0) == 0xc0) {    int ch1=read();    int v=((ch & 0x1f) << 6) + (ch1 & 0x3f);    return v;  } else   if ((ch & 0xf0) == 0xe0) {    int ch1=read();    int ch2=read();    int v=((ch & 0x0f) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);    return v;  } else   throw error("bad utf-8 encoding at " + codeName(ch));}  }
class C{  public NeighborJoiningTree(DistanceMatrix distanceMatrix){  super(distanceMatrix,3);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public void paintInternalFrameBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private static void extractFileFromZip(ZipInputStream inStream,byte[] buffer,File outputFile) throws FileNotFoundException, IOException {  int nrBytesRead;  if (!outputFile.getParentFile().exists()) {    outputFile.getParentFile().mkdirs();  }  OutputStream outStream=new FileOutputStream(outputFile);  try {    while ((nrBytesRead=inStream.read(buffer)) > 0) {      outStream.write(buffer,0,nrBytesRead);    }  }  finally {    if (outStream != null) {      outStream.close();    }  }}  }
class C{  protected void paintText(Graphics g,AbstractButton b,Rectangle textRect,String text){  WindowsGraphicsUtils.paintText(g,b,textRect,text,getTextShiftOffset());}  }
class C{  public Builder<T> le(T value){  end=value;  excludeUpper=false;  return this;}  }
class C{  @Override public void updateDouble(String columnLabel,double x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateDouble(" + quote(columnLabel) + ", "+ x+ "d);");    }    update(columnLabel,ValueDouble.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  protected static ModelRecord findModelForLine(String line,int lineNum,ModelDataFile modelDataFile) throws DataFileException {  ModelRecord modelRecord=null;  for (  ModelRecord curModelRecord : modelDataFile.records) {    if (curModelRecord.tcPosition < 0) {      modelRecord=curModelRecord;      break;    }    String typeCode=line.substring(curModelRecord.tcPosition,curModelRecord.tcPosition + curModelRecord.tcLength);    if (curModelRecord.typeCode.length() > 0) {      if (typeCode != null && typeCode.equals(curModelRecord.typeCode)) {        modelRecord=curModelRecord;        break;      }    } else     if (curModelRecord.tcMin.length() > 0 || curModelRecord.tcMax.length() > 0) {      if (curModelRecord.tcIsNum) {        long typeCodeNum=Long.parseLong(typeCode);        if ((curModelRecord.tcMinNum < 0 || typeCodeNum >= curModelRecord.tcMinNum) && (curModelRecord.tcMaxNum < 0 || typeCodeNum <= curModelRecord.tcMaxNum)) {          modelRecord=curModelRecord;          break;        }      } else {        if ((typeCode.compareTo(curModelRecord.tcMin) >= 0) && (typeCode.compareTo(curModelRecord.tcMax) <= 0)) {          modelRecord=curModelRecord;          break;        }      }    }  }  if (modelRecord == null) {    throw new DataFileException("Could not find record definition for line " + lineNum + "; first bytes: "+ line.substring(0,(line.length() > 5) ? 5 : line.length()));  }  return modelRecord;}  }
class C{  public String TO_CHAR(String columnName,int displayType,String AD_Language){  StringBuffer retValue=new StringBuffer("CAST (");  retValue.append(columnName);  retValue.append(" AS Char)");  return retValue.toString();}  }
class C{  public void testEmptyCase() throws Exception {  String file="EmptyTestCase.java";  assertEquals(NO_WARNINGS,lintFiles(file));}  }
class C{  @Override public boolean pruneValues(double threshold){  Map<Value,Double> newTable=new HashMap<Value,Double>();  boolean changed=false;  for (  Value row : table.keySet()) {    double prob=table.get(row);    if (prob >= threshold) {      newTable.put(row,prob);    } else {      changed=true;    }  }  if (changed) {    table=InferenceUtils.normalise(newTable);  }  intervals=null;  return changed;}  }
class C{  private static String toHexString(byte[] keyData){  if (keyData == null) {    return null;  }  int expectedStringLen=keyData.length * 2;  StringBuilder sb=new StringBuilder(expectedStringLen);  for (int i=0; i < keyData.length; i++) {    String hexStr=Integer.toString(keyData[i] & 0x00FF,16);    if (hexStr.length() == 1) {      hexStr="0" + hexStr;    }    sb.append(hexStr);  }  return sb.toString();}  }
class C{  public boolean isHasRegion(){  Object oo=get_Value(COLUMNNAME_HasRegion);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void dynamicDisplay(){  Component[] comps=centerPanel.getComponents();  for (int i=0; i < comps.length; i++) {    Component comp=comps[i];    String columnName=comp.getName();    if (columnName != null && columnName.length() > 0) {      int index=getIndex(columnName);      if (m_mFields.get(index) != null) {        if (m_mFields.get(index).isDisplayed(true)) {          if (!comp.isVisible()) {            comp.setVisible(true);            if (m_mFields.get(index).getVO().isRange)             m_separators.get(index).setText(" - ");          }          boolean rw=m_mFields.get(index).isEditablePara(true);          m_vEditors.get(index).setReadWrite(rw);          if (m_mFields.get(index).getVO().isRange)           m_vEditors2.get(index).setReadWrite(rw);        } else {          if (comp.isVisible()) {            comp.setVisible(false);            if (m_mFields.get(index).getVO().isRange)             m_separators.get(index).setText("");          }        }      }    }  }}  }
class C{  @Uninterruptible public static void initializeHeader(Object obj,TIB tib,int size,boolean isScalar){  if (GENERATE_GC_TRACE) {    Address ref=Magic.objectAsAddress(obj);    ref.store(oid,OBJECT_OID_OFFSET);    ref.store(time,OBJECT_DEATH_OFFSET);    oid=oid.plus(Word.fromIntSignExtend((size - GC_TRACING_HEADER_BYTES) >> LOG_BYTES_IN_ADDRESS));  }}  }
class C{  public static void markToReformat(final ASTNode node,boolean value){  if (ALLOW_TO_MARK_NODES_TO_REFORMAT.get()) {    node.putCopyableUserData(REFORMAT_KEY,value ? true : null);  }}  }
class C{  public static PathImpl lookupNative(String url,Map<String,Object> attr){  return getPwd().lookupNative(url,attr);}  }
class C{  public boolean isPostActual(){  Object oo=get_Value(COLUMNNAME_PostActual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static LookupTable createReverseTable(){  byte[] data=new byte[256];  for (int i=0; i < 256; i++) {    data[i]=(byte)(255 - i);  }  return new ByteLookupTable(0,data);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:21.144 -0500",hash_original_method="F65239B395BF4DB687722F10CCB87FAF",hash_generated_method="935E7B794D5252EC3D3F1E2EB6C97A6E") private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  @Override public Long zrank(final byte[] key,final byte[] member){  checkIsInMultiOrPipeline();  client.zrank(key,member);  return client.getIntegerReply();}  }
class C{  @Override public ConnectionProtocol newConnection(ConnectionTcp connTcp){  return new ConnectionHttp(this,connTcp,_sequence.incrementAndGet());}  }
class C{  @Override public int compareTo(MessageStats in){  final DateTime inDateTime=new DateTime(in.getLastAdded());  final DateTime thisDateTime=new DateTime(getLastAdded());  int days=Days.daysBetween(inDateTime,thisDateTime).getDays();  if (m_numberOfDaysToConsiderCleanupPriority >= Math.abs(days)) {    days=0;  }  if (days > 0) {    return 1;  } else   if (days < 0) {    return -1;  } else {    if (getOccurred() > in.getOccurred()) {      return 1;    } else     if (getOccurred() < in.getOccurred()) {      return -1;    } else {      return 0;    }  }}  }
class C{  public InvalidPropetiesException(String message){  super(message);}  }
class C{  public RepositoryWrapper(){}  }
class C{  public synchronized void reset(){  keys=null;  values=null;  nkeys=0;  grow();}  }
class C{  public static void delete(final Context context){  Log.w(MapTileFilesystemProvider.DEBUGTAG,"Deleting database " + DATABASE_NAME);  context.deleteDatabase(DATABASE_NAME);}  }
class C{  public Instance placeSymbol(Symbol symbol,int x,int y){  return placeSymbol(symbol,new Transform(x,y),null,-1,-1);}  }
class C{  private static MessageConsole findConsole(String name){  if (name == null) {    throw new IllegalArgumentException("Console name must be not null");  }  IConsoleManager consoleManager=ConsolePlugin.getDefault().getConsoleManager();  IConsole[] existing=consoleManager.getConsoles();  for (int i=0; i < existing.length; i++) {    if (name.equals(existing[i].getName())) {      return (MessageConsole)existing[i];    }  }  MessageConsole myConsole=new MessageConsole(name,null);  consoleManager.addConsoles(new IConsole[]{myConsole});  return myConsole;}  }
class C{  private LayoutManager createLayout(){  return new TitlePaneLayout();}  }
class C{  public InlineQueryResultVoice.InlineQueryResultVoiceBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public SailConnectionWrapper(SailConnection wrappedCon){  this.wrappedCon=wrappedCon;}  }
class C{  @Override public void receive(Metadata metadata){  if (metadata.isReset()) {    reset();  } else {    Metadata existing=mMetadata.get(metadata.getMetadataType());    if (existing == null || !existing.equals(metadata)) {      mMetadata.put(metadata.getMetadataType(),metadata);      processMetadata(metadata);      setUpdated(true);    }  }  mUpdated=true;}  }
class C{  public void printStackTrace(Throwable e,PrintWriter os){  CharArrayWriter writer=new CharArrayWriter();  PrintWriter pw=new PrintWriter(writer);  e.printStackTrace(pw);  pw.close();  char[] array=writer.toCharArray();  CharBuffer cb=filter(array);  if (os != null)   os.print(cb.toString()); else   System.out.println(cb);}  }
class C{  public void handleNotification(Notification e,Object handback){  if (e.getType().equals(XOperations.OPERATION_INVOCATION_EVENT)) {    final Object message;    if (handback == null) {      JTextArea textArea=new JTextArea("null");      textArea.setEditable(false);      textArea.setEnabled(true);      textArea.setRows(textArea.getLineCount());      message=textArea;    } else {      Component comp=mbeansTab.getDataViewer().createOperationViewer(handback,mbean);      if (comp == null) {        JTextArea textArea=new JTextArea(handback.toString());        textArea.setEditable(false);        textArea.setEnabled(true);        textArea.setRows(textArea.getLineCount());        JScrollPane scrollPane=new JScrollPane(textArea);        Dimension d=scrollPane.getPreferredSize();        if (d.getWidth() > 400 || d.getHeight() > 250) {          scrollPane.setPreferredSize(new Dimension(400,250));        }        message=scrollPane;      } else {        if (!(comp instanceof JScrollPane)) {          comp=new JScrollPane(comp);        }        Dimension d=comp.getPreferredSize();        if (d.getWidth() > 400 || d.getHeight() > 250) {          comp.setPreferredSize(new Dimension(400,250));        }        message=comp;      }    }    new ThreadDialog((Component)e.getSource(),message,Messages.OPERATION_RETURN_VALUE,JOptionPane.INFORMATION_MESSAGE).run();  } else   if (e.getType().equals(XMBeanNotifications.NOTIFICATION_RECEIVED_EVENT)) {    DefaultMutableTreeNode emitter=(DefaultMutableTreeNode)handback;    Long received=(Long)e.getUserData();    updateReceivedNotifications(emitter,received.longValue(),true);  }}  }
class C{  public static boolean lengthValueWrite(OutputStream outputStream,Message m){  if (outputStream == null || m == null) {    return false;  }  try {    byte[] encodedMessage=Exchange.lengthValueEncode(m).array();    outputStream.write(encodedMessage);    return true;  } catch (  IOException e) {    Log.e(TAG,"Length/value write failed with exception: " + e);    return false;  }}  }
class C{  public void calculateExcessCollection(final Map<String,BigDecimal> dmdRsnAmt,final String rsn,final EgDemandDetails oldDmndDtls,final EgDemandDetails newDmndDtls){  if (newDmndDtls != null && oldDmndDtls != null) {    newDmndDtls.setAmtCollected(newDmndDtls.getAmtCollected().add(oldDmndDtls.getAmtCollected()));    newDmndDtls.setAmtRebate(newDmndDtls.getAmtRebate().add(oldDmndDtls.getAmtRebate()));  } else   if (newDmndDtls != null && oldDmndDtls == null) {    newDmndDtls.setAmtCollected(ZERO);    newDmndDtls.setAmtRebate(ZERO);  }  if (newDmndDtls != null && !rsn.equalsIgnoreCase(PropertyTaxConstants.DEMANDRSN_CODE_ADVANCE)) {    final BigDecimal extraCollAmt=newDmndDtls.getAmtCollected().subtract(newDmndDtls.getAmount());    if (extraCollAmt.compareTo(BigDecimal.ZERO) > 0) {      dmdRsnAmt.put(rsn,extraCollAmt);      newDmndDtls.setAmtCollected(newDmndDtls.getAmtCollected().subtract(extraCollAmt));    }  }  if (oldDmndDtls != null && newDmndDtls == null)   if (oldDmndDtls.getAmtCollected().compareTo(BigDecimal.ZERO) > 0)   dmdRsnAmt.put(rsn,oldDmndDtls.getAmtCollected());}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void initSchemaPartition() throws Exception {  SchemaPartition schemaPartition=service.getSchemaService().getSchemaPartition();  LdifPartition ldifPartition=new LdifPartition();  String workingDirectory=service.getWorkingDirectory().getPath();  ldifPartition.setWorkingDirectory(workingDirectory + "/schema");  File schemaRepository=new File(workingDirectory,"schema");  SchemaLdifExtractor extractor=new DefaultSchemaLdifExtractor(new File(workingDirectory));  extractor.extractOrCopy(true);  schemaPartition.setWrappedPartition(ldifPartition);  SchemaLoader loader=new LdifSchemaLoader(schemaRepository);  SchemaManager schemaManager=new DefaultSchemaManager(loader);  service.setSchemaManager(schemaManager);  schemaManager.loadAllEnabled();  schemaPartition.setSchemaManager(schemaManager);  List<Throwable> errors=schemaManager.getErrors();  if (errors.size() != 0) {    throw new Exception("Schema load failed : " + errors);  }}  }
class C{  public boolean isBaselineAligned(){  return mBaselineAligned;}  }
class C{  public void updateUI(){  boolean hadUI=(ui != null);  setUI((DesktopIconUI)UIManager.getUI(this));  invalidate();  Dimension r=getPreferredSize();  setSize(r.width,r.height);  if (internalFrame != null && internalFrame.getUI() != null) {    SwingUtilities.updateComponentTreeUI(internalFrame);  }}  }
class C{  public GeographicImageInterpolator(Dimension gridSize,float[] xs,float[] ys,int depth,int cellSize){  super(gridSize,xs,ys,depth,cellSize);}  }
class C{  public NotificationChain basicSetRhs(Expression newRhs,NotificationChain msgs){  Expression oldRhs=rhs;  rhs=newRhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.ADDITIVE_EXPRESSION__RHS,oldRhs,newRhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void updateMetrics(int recursiveDepth){  int maxRdepth=metrics.getInt(METRIC_MAX_RECURSIVE_DEPTH);  if (recursiveDepth > maxRdepth) {    metrics.set(METRIC_MAX_RECURSIVE_DEPTH,recursiveDepth);  }}  }
class C{  private void checkUnpairedAccessorConsumption(MemberMatrix mm,N4ClassifierDefinition definition){  if (!mm.hasOwned() && mm.hasInherited() && mm.hasImplemented()) {    boolean getterConsumed=false;    boolean setterConsumed=false;    TMember consumedAccessor=null;    for (    TMember implementedMember : mm.implemented()) {      if (implementedMember.isAccessor() && mm.isConsumed(implementedMember)) {        if (implementedMember.getMemberType() == MemberType.GETTER) {          getterConsumed=true;        } else {          setterConsumed=true;        }        consumedAccessor=implementedMember;      }    }    if ((getterConsumed != setterConsumed) && mm.hasAccessorPair() && null != consumedAccessor) {      messageMissingOwnedAccessorCorrespondingConsumedAccessor((FieldAccessor)consumedAccessor,definition);    }  }}  }
class C{  public static double sample(Random rd,double min,double max){  if (min >= max) {    throw new IllegalArgumentException("Maximum must be greater than the minimum.");  }  return (rd.nextDouble() * (max - min)) + min;}  }
class C{  void put(final ByteVector out){  int n=0;  int size=2;  AnnotationWriter aw=this;  AnnotationWriter last=null;  while (aw != null) {    ++n;    size+=aw.bv.length;    aw.visitEnd();    aw.prev=last;    last=aw;    aw=aw.next;  }  out.putInt(size);  out.putShort(n);  aw=last;  while (aw != null) {    out.putByteArray(aw.bv.data,0,aw.bv.length);    aw=aw.prev;  }}  }
class C{  @DELETE @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public POSTResultEntityBase deleteEntityByEncodedRowkey(@QueryParam("table") String table,@QueryParam("cf") String columnFamily,List<TaggedLogAPIEntity> entities){  GenericDeleter deleter=new GenericDeleter(table,columnFamily);  POSTResultEntityBase result=new POSTResultEntityBase();  try {    deleter.delete(entities);  } catch (  Exception ex) {    LOG.error("Fail deleting entity " + table + ":"+ columnFamily,ex);    result.setSuccess(false);    result.setException(ex.getMessage());    return result;  }  result.setSuccess(true);  return result;}  }
class C{  private void resetCostsLLForLLC0(){  List<Object> params=new ArrayList<Object>();  StringBuffer productWhereClause=new StringBuffer();  productWhereClause.append("AD_Client_ID=? AND " + MProduct.COLUMNNAME_LowLevel + "=?");  params.add(getAD_Client_ID());  params.add(0);  if (p_M_Product_ID > 0) {    productWhereClause.append(" AND ").append(MProduct.COLUMNNAME_M_Product_ID).append("=?");    params.add(p_M_Product_ID);  } else   if (p_M_Product_Category_ID > 0) {    productWhereClause.append(" AND ").append(MProduct.COLUMNNAME_M_Product_Category_ID).append("=?");    params.add(p_M_Product_Category_ID);  }  final String sql="UPDATE M_Cost c SET " + MCost.COLUMNNAME_CurrentCostPriceLL + "=0"+ " WHERE EXISTS (SELECT 1 FROM M_Product p WHERE p.M_Product_ID=c.M_Product_ID"+ " AND "+ productWhereClause+ ")";  int no=DB.executeUpdateEx(sql,params.toArray(),get_TrxName());  log.info("Updated #" + no);}  }
class C{  public MultiSortedSetDocValues(SortedSetDocValues values[],int docStarts[],OrdinalMap mapping,long totalCost) throws IOException {  assert docStarts.length == values.length + 1;  this.values=values;  this.docStarts=docStarts;  this.mapping=mapping;  this.totalCost=totalCost;}  }
class C{  public synchronized int compare(String source,String target){  if (source == null || target == null) {    throw new NullPointerException();  }  int result=Collator.EQUAL;  if (sourceCursor == null) {    sourceCursor=getCollationElementIterator(source);  } else {    sourceCursor.setText(source);  }  if (targetCursor == null) {    targetCursor=getCollationElementIterator(target);  } else {    targetCursor.setText(target);  }  int sOrder=0, tOrder=0;  boolean initialCheckSecTer=getStrength() >= Collator.SECONDARY;  boolean checkSecTer=initialCheckSecTer;  boolean checkTertiary=getStrength() >= Collator.TERTIARY;  boolean gets=true, gett=true;  while (true) {    if (gets)     sOrder=sourceCursor.next(); else     gets=true;    if (gett)     tOrder=targetCursor.next(); else     gett=true;    if ((sOrder == CollationElementIterator.NULLORDER) || (tOrder == CollationElementIterator.NULLORDER))     break;    int pSOrder=CollationElementIterator.primaryOrder(sOrder);    int pTOrder=CollationElementIterator.primaryOrder(tOrder);    if (sOrder == tOrder) {      if (tables.isFrenchSec() && pSOrder != 0) {        if (!checkSecTer) {          checkSecTer=initialCheckSecTer;          checkTertiary=false;        }      }      continue;    }    if (pSOrder != pTOrder) {      if (sOrder == 0) {        gett=false;        continue;      }      if (tOrder == 0) {        gets=false;        continue;      }      if (pSOrder == 0) {        if (checkSecTer) {          result=Collator.GREATER;          checkSecTer=false;        }        gett=false;      } else       if (pTOrder == 0) {        if (checkSecTer) {          result=Collator.LESS;          checkSecTer=false;        }        gets=false;      } else {        if (pSOrder < pTOrder) {          return Collator.LESS;        } else {          return Collator.GREATER;        }      }    } else {      if (checkSecTer) {        short secSOrder=CollationElementIterator.secondaryOrder(sOrder);        short secTOrder=CollationElementIterator.secondaryOrder(tOrder);        if (secSOrder != secTOrder) {          result=(secSOrder < secTOrder) ? Collator.LESS : Collator.GREATER;          checkSecTer=false;        } else {          if (checkTertiary) {            short terSOrder=CollationElementIterator.tertiaryOrder(sOrder);            short terTOrder=CollationElementIterator.tertiaryOrder(tOrder);            if (terSOrder != terTOrder) {              result=(terSOrder < terTOrder) ? Collator.LESS : Collator.GREATER;              checkTertiary=false;            }          }        }      }    }  }  if (sOrder != CollationElementIterator.NULLORDER) {    do {      if (CollationElementIterator.primaryOrder(sOrder) != 0) {        return Collator.GREATER;      } else       if (CollationElementIterator.secondaryOrder(sOrder) != 0) {        if (checkSecTer) {          result=Collator.GREATER;          checkSecTer=false;        }      }    } while ((sOrder=sourceCursor.next()) != CollationElementIterator.NULLORDER);  } else   if (tOrder != CollationElementIterator.NULLORDER) {    do {      if (CollationElementIterator.primaryOrder(tOrder) != 0)       return Collator.LESS; else       if (CollationElementIterator.secondaryOrder(tOrder) != 0) {        if (checkSecTer) {          result=Collator.LESS;          checkSecTer=false;        }      }    } while ((tOrder=targetCursor.next()) != CollationElementIterator.NULLORDER);  }  if (result == 0 && getStrength() == IDENTICAL) {    int mode=getDecomposition();    Normalizer.Form form;    if (mode == CANONICAL_DECOMPOSITION) {      form=Normalizer.Form.NFD;    } else     if (mode == FULL_DECOMPOSITION) {      form=Normalizer.Form.NFKD;    } else {      return source.compareTo(target);    }    String sourceDecomposition=Normalizer.normalize(source,form);    String targetDecomposition=Normalizer.normalize(target,form);    return sourceDecomposition.compareTo(targetDecomposition);  }  return result;}  }
class C{  @Override public void flush(){}  }
class C{  public static boolean isEmptyDirectory(Resource res,ResourceFilter filter){  if (res.isDirectory()) {    Resource[] children=filter == null ? res.listResources() : res.listResources(filter);    if (children == null || children.length == 0)     return true;    for (int i=0; i < children.length; i++) {      if (children[i].isFile())       return false;      if (children[i].isDirectory() && !isEmptyDirectory(children[i],filter))       return false;    }  }  return true;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public int lookup(Object obj){  int idx=hash(obj) % spine.length;  if (size > 0) {    for (int i=spine[idx]; i >= 0; i=next[i])     if (objs[i] == obj)     return i;  }  if (size >= next.length)   growEntries();  if (size >= threshold) {    growSpine();    idx=hash(obj) % spine.length;  }  insert(obj,size,idx);  size++;  return -1;}  }
class C{  private void trimRequest(BusinessObjectDataInvalidateUnregisteredRequest businessObjectDataInvalidateUnregisteredRequest){  businessObjectDataInvalidateUnregisteredRequest.setNamespace(businessObjectDataInvalidateUnregisteredRequest.getNamespace().trim());  businessObjectDataInvalidateUnregisteredRequest.setBusinessObjectDefinitionName(businessObjectDataInvalidateUnregisteredRequest.getBusinessObjectDefinitionName().trim());  businessObjectDataInvalidateUnregisteredRequest.setBusinessObjectFormatUsage(businessObjectDataInvalidateUnregisteredRequest.getBusinessObjectFormatUsage().trim());  businessObjectDataInvalidateUnregisteredRequest.setBusinessObjectFormatFileType(businessObjectDataInvalidateUnregisteredRequest.getBusinessObjectFormatFileType().trim());  businessObjectDataInvalidateUnregisteredRequest.setPartitionValue(businessObjectDataInvalidateUnregisteredRequest.getPartitionValue().trim());  businessObjectDataInvalidateUnregisteredRequest.setStorageName(businessObjectDataInvalidateUnregisteredRequest.getStorageName().trim());  List<String> subPartitionValues=businessObjectDataInvalidateUnregisteredRequest.getSubPartitionValues();  if (subPartitionValues != null) {    for (int i=0; i < subPartitionValues.size(); i++) {      String subPartitionValue=subPartitionValues.get(i);      subPartitionValues.set(i,subPartitionValue.trim());    }  }}  }
class C{  public void removeDeviceGroups(final StorageSystem system,final URI sourceURI,final URI targetURI,TaskCompleter completer){  log.info("START removing device groups");  RemoteDirectorGroup group=null;  StorageSystem targetSystem=null;  Volume source=null;  Volume target=null;  try {    if (null == completer) {      completer=new SRDFTaskCompleter(sourceURI,targetURI,"remove volume from device group");    }    source=dbClient.queryObject(Volume.class,sourceURI);    target=dbClient.queryObject(Volume.class,targetURI);    targetSystem=dbClient.queryObject(StorageSystem.class,target.getStorageController());    group=dbClient.queryObject(RemoteDirectorGroup.class,target.getSrdfGroup());    BlockConsistencyGroup targetCG=dbClient.queryObject(BlockConsistencyGroup.class,target.getConsistencyGroup());    BlockConsistencyGroup sourceCG=dbClient.queryObject(BlockConsistencyGroup.class,source.getConsistencyGroup());    boolean cgSourceCleanUpRequired=removeFromDeviceGroups(system,system,source,sourceCG);    boolean cgTargetCleanUpRequired=removeFromDeviceGroups(targetSystem,system,target,targetCG);    if (cgSourceCleanUpRequired || cgTargetCleanUpRequired) {      if (null != targetCG) {        log.info("Set target {}-->{} as inactive",targetCG.getLabel(),targetCG.getId());        targetCG.setInactive(true);        dbClient.persistObject(targetCG);      }      if (null != sourceCG) {        log.info("Clearing properties of source CG {}-->{}",sourceCG.getLabel(),sourceCG.getId());        if (null != sourceCG.getTypes()) {          sourceCG.getTypes().remove(Types.SRDF.name());        }        sourceCG.addConsistencyGroupTypes(Types.LOCAL.name());        StringSetMap systemConsistencyGroups=sourceCG.getSystemConsistencyGroups();        if (systemConsistencyGroups != null) {          StringSet systemCGNames=systemConsistencyGroups.get(system.getId().toString());          if (systemCGNames != null && systemCGNames.size() > 1) {            systemCGNames.remove(sourceCG.getLabel());          } else {            systemConsistencyGroups.remove(system.getId().toString());          }        }        dbClient.persistObject(sourceCG);      }    }  } catch (  Exception e) {    String msg=format(FAILURE_MSG_FMT,"remove srdf replication groups for ",sourceURI,targetURI);    log.warn(msg,e);  } finally {    if (group.getVolumes() != null) {      group.getVolumes().remove(source.getNativeGuid());      group.getVolumes().remove(target.getNativeGuid());    }    if (group.getVolumes() == null || group.getVolumes().isEmpty()) {      if (NullColumnValueGetter.isNotNullValue(group.getSourceReplicationGroupName())) {        group.setSourceReplicationGroupName(NullColumnValueGetter.getNullStr());        group.setTargetReplicationGroupName(NullColumnValueGetter.getNullStr());        group.setSupportedCopyMode(SupportedCopyModes.ALL.toString());      }      if (targetSystem.getTargetCgs() != null && !targetSystem.getTargetCgs().isEmpty()) {        URI cgUri=source.getConsistencyGroup();        if (cgUri != null) {          targetSystem.getTargetCgs().remove(cgUri.toString());          dbClient.persistObject(targetSystem);        }      }    }    dbClient.updateAndReindexObject(group);    completer.ready(dbClient);  }}  }
class C{  public static void main(String[] args){  try {    System.out.println(new PlaceholderReplacer("X**a1**Y","A**a1**B").replaceExactlyOnce("-XmY-"));    System.out.println(new PlaceholderReplacer("rulePrimaryExpression.java.replacement"));    System.out.println(new PlaceholderReplacer("ruleNoLineTerminator.java.replacement"));  } catch (  Throwable t) {    t.printStackTrace();  }}  }
class C{  private void initUi(){  setContentView(R.layout.host_activity);  final boolean keepScreenOn=mPrefs.getBoolean(Preferences.KEY_KEEP_SCREEN_ON,false);  ActivityUtils.setKeepScreenOn(this,keepScreenOn);  final FragmentManager fm=getFragmentManager();  mActionBar=getSupportActionBar();  getSupportActionBar().setDisplayShowHomeEnabled(true);  getSupportActionBar().setDisplayShowTitleEnabled(true);  mActionBar.setNavigationMode(ActionBar.NAVIGATION_MODE_TABS);  mPager=(SelectiveScrollViewPager)findViewById(R.id.pager);  mPager.setOffscreenPageLimit(0);  final CustomViewPagerAdapter mTabsAdapter=new CustomViewPagerAdapter(this,mPager);  mTabsAdapter.addTab(mActionBar.newTab().setText(getResources().getString(R.string.overview)),StatsActivity.class,null);  mTabsAdapter.addTab(mActionBar.newTab().setText(getResources().getString(R.string.wifis)),WifiListContainer.class,null);  mTabsAdapter.addTab(mActionBar.newTab().setText(getResources().getString(R.string.cells)),CellsListContainer.class,null);  mTabsAdapter.addTab(mActionBar.newTab().setText(getResources().getString(R.string.map)),MapViewActivity.class,null);}  }
class C{  public long nextLongFromTo(long from,long to){  if (from >= 0 && to < Long.MAX_VALUE) {    return from + (long)(nextDoubleFromTo(0.0,to - from + 1));  }  double diff=((double)to) - (double)from + 1.0;  if (diff <= Long.MAX_VALUE) {    return from + (long)(nextDoubleFromTo(0.0,diff));  }  long random;  if (from == Long.MIN_VALUE) {    if (to == Long.MAX_VALUE) {      int i1=nextIntFromTo(Integer.MIN_VALUE,Integer.MAX_VALUE);      int i2=nextIntFromTo(Integer.MIN_VALUE,Integer.MAX_VALUE);      return ((i1 & 0xFFFFFFFFL) << 32) | (i2 & 0xFFFFFFFFL);    }    random=Math.round(nextDoubleFromTo(from,to + 1));    if (random > to)     random=from;  } else {    random=Math.round(nextDoubleFromTo(from - 1,to));    if (random < from)     random=to;  }  return random;}  }
class C{  public final double doOperation(){  final int index=MathUtils.nextInt(parameter.getDimension());  final Bounds<Double> bounds=parameter.getBounds();  final double lower=(lowerBound == null ? bounds.getLowerLimit(index) : Math.max(bounds.getLowerLimit(index),lowerBound));  final double upper=(upperBound == null ? bounds.getUpperLimit(index) : Math.min(bounds.getUpperLimit(index),upperBound));  final double newValue=(MathUtils.nextDouble() * (upper - lower)) + lower;  parameter.setParameterValue(index,newValue);  return 0.0;}  }
class C{  protected void init(MuxServer server,int channel) throws IOException {  this.server=server;  this.channel=channel;  this.url=null;  chunkLength=0;}  }
class C{  public final void closePdfFile(){  try {    objectReader.closeFile();    if (pdf_datafile != null) {      pdf_datafile.close();    }    if (tempFileName != null) {      final File fileToDelete=new File(tempFileName);      fileToDelete.delete();      tempFileName=null;    }  } catch (  final Exception e) {    LogWriter.writeLog("Exception " + e + " closing file");  }}  }
class C{  public NorwegianMinimalStemmer(int flags){  if (flags <= 0 || flags > BOKMAAL + NYNORSK) {    throw new IllegalArgumentException("invalid flags");  }  useBokmaal=(flags & BOKMAAL) != 0;  useNynorsk=(flags & NYNORSK) != 0;}  }
class C{  java.sql.Time toSqlTime(Calendar calendar){  return new java.sql.Time(getTimeInMillis(calendar));}  }
class C{  public void playTogether(Animator... items){  if (items != null) {    mNeedsSort=true;    Builder builder=play(items[0]);    for (int i=1; i < items.length; ++i) {      builder.with(items[i]);    }  }}  }
class C{  public PasswordEditText(Context context){  this(context,null);}  }
class C{  public DistributedLogManager createDistributedLogManager(String nameOfLogStream,ClientSharingOption clientSharingOption) throws InvalidStreamNameException, IOException {  Optional<DistributedLogConfiguration> streamConfiguration=Optional.absent();  Optional<DynamicDistributedLogConfiguration> dynamicStreamConfiguration=Optional.absent();  return createDistributedLogManager(nameOfLogStream,clientSharingOption,streamConfiguration,dynamicStreamConfiguration);}  }
class C{  public Pair<Boolean,String> dataMatch(SolrCore replica){  Pair<Boolean,String> dataMatchToReasonPair=new Pair<Boolean,String>(true,"");  boolean success=true;  String reason="";  if (!this.available) {    reason="DataMatch-Failed: this core not available: " + this.toString();    success=false;  }  if (!replica.available) {    reason="DataMatch-Failed: replica core not available: " + replica.toString();    success=false;  }  if (this.version > replica.version) {    reason=("DataMatch-Failed: Version mismatch: this:" + this.version + " replica:"+ replica.version);    success=false;  }  if (StringUtils.isBlank(this.lastModified) || StringUtils.isBlank(replica.lastModified)) {    logger.warn("Either replica or source last index update time is unkown, will not do the timestamp check, source: " + this.host + " "+ this.name+ " replica: "+ replica.host+ " "+ replica.name);  } else {    String solrTimeFormat="yyyy-MM-dd'T'HH:mm:ss.SSS'Z'";    try {      DateFormat format=new SimpleDateFormat(solrTimeFormat);      Date sourceDate=format.parse(this.lastModified);      Date replicaDate=format.parse(replica.lastModified);      long delta=Math.abs(sourceDate.getTime() - replicaDate.getTime());      logger.info("this is the delta: " + delta + " souce: "+ this.name+ "replica: "+ replica.name);      if (delta > 60 * 60 * 1000) {        reason+="  last index update time between source and replica are different more than 60 minutes: source: " + this.lastModified + " replica: "+ replica.lastModified;        success=false;      }    } catch (    Exception e) {      logger.warn("Can't parse the date of last index update date, skipping last update time check, source: " + this.host + " "+ this.name+ " "+ this.lastModified+ " replica: "+ replica.host+ " "+ replica.name+ replica.lastModified);      logger.warn("ST: " + ExceptionUtils.getFullStackTrace(e));    }  }  dataMatchToReasonPair.setLhs(success);  dataMatchToReasonPair.setRhs(reason);  return dataMatchToReasonPair;}  }
class C{  private void checkForNight(final ZonedDateTime TIME){  int hour=TIME.getHour();  int minute=TIME.getMinute();  if (0 <= hour && minute >= 0 && hour <= 5 && minute <= 59 || 17 <= hour && minute <= 59 && hour <= 23 && minute <= 59) {    if (isNightMode())     return;    setNightMode(true);  } else {    if (!isNightMode())     return;    setNightMode(false);  }}  }
class C{  public synchronized void addPropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    changeSupport=new SwingPropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(listener);}  }
class C{  protected String sanitize(String s){  String result;  result=s;  result=result.replaceAll("&","&amp;");  result=result.replaceAll("<","&lt;");  result=result.replaceAll(">","&gt;");  result=result.replaceAll("\"","&quot;");  return result;}  }
class C{  protected void writeNodeText(Node node) throws IOException {  String text=node.getText();  if ((text != null) && (text.length() > 0)) {    if (escapeText) {      text=escapeElementEntities(text);    }    lastOutputNodeType=Node.TEXT_NODE;    writer.write(text);  }}  }
class C{  public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public TObjectLongHashMap(){  super();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:54:55.360 -0500",hash_original_method="3BD03A3FDC86F025553E39D4B6A63060",hash_generated_method="1CB22F75567C416919AFB0E86A4E8F65") private String encodeProduct(){  StringBuffer tokens=new StringBuffer();  ListIterator it=productTokens.listIterator();  while (it.hasNext()) {    tokens.append((String)it.next());    if (it.hasNext())     tokens.append('/'); else     break;  }  return tokens.toString();}  }
class C{  public void pageSetupDialog(PrinterJob job){  log.info("");  if (m_paper.pageSetupDialog(job)) {    setPaper(m_paper);    layout();  }}  }
class C{  @Override public void draw(Graphics2D g2,Rectangle2D area,Point2D anchor,PlotState parentState,PlotRenderingInfo info){  if (info != null) {    info.setPlotArea(area);  }  RectangleInsets insets=getInsets();  insets.trim(area);  AxisSpace space=new AxisSpace();  space=this.domainAxis.reserveSpace(g2,this,area,RectangleEdge.BOTTOM,space);  space=this.rangeAxis.reserveSpace(g2,this,area,RectangleEdge.LEFT,space);  Rectangle2D dataArea=space.shrink(area,null);  if (info != null) {    info.setDataArea(dataArea);  }  drawBackground(g2,dataArea);  AxisState domainAxisState=this.domainAxis.draw(g2,dataArea.getMaxY(),area,dataArea,RectangleEdge.BOTTOM,info);  AxisState rangeAxisState=this.rangeAxis.draw(g2,dataArea.getMinX(),area,dataArea,RectangleEdge.LEFT,info);  drawDomainGridlines(g2,dataArea,domainAxisState.getTicks());  drawRangeGridlines(g2,dataArea,rangeAxisState.getTicks());  Shape originalClip=g2.getClip();  Composite originalComposite=g2.getComposite();  g2.clip(dataArea);  g2.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER,getForegroundAlpha()));  render(g2,dataArea,info,null);  g2.setClip(originalClip);  g2.setComposite(originalComposite);  drawOutline(g2,dataArea);}  }
class C{  public static boolean isContained(String[] array,String s){  for (  String string : array) {    if (string.equals(s)) {      return true;    }  }  return false;}  }
class C{  protected void fireHandlerGroupEventListeners(NodeEventTarget node,AbstractEvent e,boolean useCapture,HashSet stoppedGroups,HashSet toBeStoppedGroups){  NodeList defs=((NodeXBL)node).getXblDefinitions();  for (int j=0; j < defs.getLength(); j++) {    Node n=defs.item(j).getFirstChild();    while (n != null && !(n instanceof XBLOMHandlerGroupElement)) {      n=n.getNextSibling();    }    if (n == null) {      continue;    }    node=(NodeEventTarget)n;    String type=e.getType();    EventSupport support=node.getEventSupport();    if (support == null) {      continue;    }    EventListenerList list=support.getEventListeners(type,useCapture);    if (list == null) {      return;    }    EventListenerList.Entry[] listeners=list.getEventListeners();    fireEventListeners(node,e,listeners,stoppedGroups,toBeStoppedGroups);  }}  }
class C{  void push(Reader in) throws IOException {  stack.push(new Integer(ln));  stack.push(new Integer(ch));  stack.push(this.in);  this.in=in;  ch=in.read();}  }
class C{  @Override public int hashCode(){  return printer.hashCode();}  }
class C{  public void startManagingActivity() throws Exception {  final boolean isDebugEnabled=logger.isDebugEnabled();  Set<DistributedMember> members=cache.getDistributionManager().getOtherDistributionManagerIds();  Iterator<DistributedMember> it=members.iterator();  DistributedMember member;  List<GIITask> giiTaskList=new ArrayList<GIITask>();  List<Future<DistributedMember>> futureTaskList;  while (it.hasNext()) {    member=it.next();    giiTaskList.add(new GIITask(member));  }  try {    if (isDebugEnabled) {      logger.debug("Management Resource creation started  : ");    }    futureTaskList=pooledMembershipExecutor.invokeAll(giiTaskList);    for (    Future<DistributedMember> futureTask : futureTaskList) {      String memberId=null;      try {        DistributedMember returnedMember=futureTask.get();        if (returnedMember != null) {          memberId=returnedMember.getId();        }        if (futureTask.isDone()) {          if (isDebugEnabled) {            logger.debug("Monitoring Resource Created for : {}",memberId);          }        }        if (futureTask.isCancelled()) {          if (isDebugEnabled) {            logger.debug("Monitoring resource Creation Failed for : {}",memberId);          }        }      } catch (      ExecutionException e) {        if (isDebugEnabled) {          logger.debug("ExecutionException during Management GII: {}",e.getMessage(),e);        }      }catch (      CancellationException e) {        if (isDebugEnabled) {          ManagementException mgEx=new ManagementException(e.fillInStackTrace());          logger.debug("InterruptedException while creating Monitoring resource with error : {}",mgEx.getMessage(),mgEx);        }      }    }  } catch (  InterruptedException e) {    if (isDebugEnabled) {      ManagementException mgEx=new ManagementException(e.fillInStackTrace());      logger.debug("InterruptedException while creating Monitoring resource with error : ",mgEx.getMessage(),mgEx);    }  } finally {    if (isDebugEnabled) {      logger.debug("Management Resource creation completed");    }  }}  }
class C{  private boolean enlist() throws AtomikosSQLException {  boolean ret=false;  try {    if (LOGGER.isTraceEnabled())     LOGGER.logTrace(this + ": notifyBeforeUse " + sessionHandleState);    CompositeTransaction ct=null;    CompositeTransactionManager ctm=getCompositeTransactionManager();    if (ctm != null) {      ct=ctm.getCompositeTransaction();      sessionHandleState.notifyBeforeUse(ct);      if (ct != null && ct.getProperty(TransactionManagerImp.JTA_PROPERTY_NAME) != null) {        ret=true;        if (LOGGER.isTraceEnabled())         LOGGER.logTrace(this + ": detected transaction " + ct);        if (ct.getState().equals(TxState.ACTIVE))         ct.registerSynchronization(new JdbcRequeueSynchronization(this,ct)); else         AtomikosSQLException.throwAtomikosSQLException("The transaction has timed out - try increasing the timeout if needed");      }    }  } catch (  InvalidSessionHandleStateException ex) {    AtomikosSQLException.throwAtomikosSQLException(ex.getMessage(),ex);  }  return ret;}  }
class C{  private boolean hasUniqueID(MouseHandlerFX handler){  for (  MouseHandlerFX h : this.availableMouseHandlers) {    if (handler.getID().equals(h.getID())) {      return false;    }  }  for (  MouseHandlerFX h : this.auxiliaryMouseHandlers) {    if (handler.getID().equals(h.getID())) {      return false;    }  }  return true;}  }
class C{  private byte[] assembleRTCPReceptionReport(){  byte reportBlock[]=new byte[0];  RtpSource source=rtcpSession.getMySource();  ReceptionReport rr=source.generateReceptionReport();  byte SSRC[]=RtcpPacketUtils.longToBytes((long)rr.getSsrc(),4);  byte fraction_lost[]=RtcpPacketUtils.longToBytes((long)rr.getFractionLost(),1);  byte pkts_lost[]=RtcpPacketUtils.longToBytes((long)rr.getCumulativeNumberOfPacketsLost(),3);  byte last_seq[]=RtcpPacketUtils.longToBytes((long)rr.getExtendedHighestSequenceNumberReceived(),4);  byte jitter[]=RtcpPacketUtils.longToBytes((long)rr.getInterarrivalJitter(),4);  byte lst[]=RtcpPacketUtils.longToBytes((long)rr.getLastSenderReport(),4);  byte dlsr[]=RtcpPacketUtils.longToBytes((long)rr.getDelaySinceLastSenderReport(),4);  reportBlock=RtcpPacketUtils.append(reportBlock,SSRC);  reportBlock=RtcpPacketUtils.append(reportBlock,fraction_lost);  reportBlock=RtcpPacketUtils.append(reportBlock,pkts_lost);  reportBlock=RtcpPacketUtils.append(reportBlock,last_seq);  reportBlock=RtcpPacketUtils.append(reportBlock,jitter);  reportBlock=RtcpPacketUtils.append(reportBlock,lst);  reportBlock=RtcpPacketUtils.append(reportBlock,dlsr);  return reportBlock;}  }
class C{  public TechnicalServiceOperationException(String message){  super(message);}  }
class C{  public void attribute(String elemName,String attrName,String type,String value){  ElementType e=getElementType(elemName);  if (e == null) {    throw new Error("Attribute " + attrName + " specified for unknown element type "+ elemName);  }  e.setAttribute(attrName,type,value);}  }
class C{  protected void validateFsUniqueId(java.lang.String[] param){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:59.003 -0500",hash_original_method="8841F2E44383E41481F2ECC220E4B721",hash_generated_method="8571C7E45CC46B8D5860C4127F049779") final synchronized void _sendByte(int b) throws IOException {  _output_.write(b);  _spyWrite(b);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  protected void init(){  _names[META_RECORDNAME_COLUMN_NUMBER]=i18n.get(MetaDbfTableModel.class,"Column_Name","Column Name");  _names[META_TYPE_COLUMN_NUMBER]=i18n.get(MetaDbfTableModel.class,"Type_of_Data","Type of Data");  _names[META_LENGTH_COLUMN_NUMBER]=i18n.get(MetaDbfTableModel.class,"Length_of_Field","Length of Field");  _names[META_PLACES_COLUMN_NUMBER]=i18n.get(MetaDbfTableModel.class,"Decimal_Places","Decimal Places");  for (int i=0; i < 4; i++) {    _lengths[i]=(byte)12;    _decimalCounts[i]=(byte)0;    byte type;    if (i < 2) {      type=DBF_TYPE_CHARACTER.byteValue();    } else {      type=DBF_TYPE_NUMERIC.byteValue();    }    _types[i]=type;  }}  }
class C{  public boolean build(Train train){  this._train=train;  try {    build();    return true;  } catch (  BuildFailedException e) {    buildFailed(e);    return false;  }}  }
class C{  public boolean hasScores(){  return !gameData.getScores().isEmpty();}  }
class C{  public DHParameters generateParameters(){  BigInteger[] safePrimes=DHParametersHelper.generateSafePrimes(size,certainty,random);  BigInteger p=safePrimes[0];  BigInteger q=safePrimes[1];  BigInteger g=DHParametersHelper.selectGenerator(p,q,random);  return new DHParameters(p,g,q,TWO,null);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.writeObject(mapType);  out.writeInt(num);  for (  Entry e : this) {    out.writeObject(e.getKey());    out.writeObject(e.getValue());  }}  }
class C{  public final void removeMessages(int what,Object object){  mExec.removeMessages(what,object);}  }
class C{  public void unexpectedException(Thread t,Exception e){  System.err.println(t.getName() + ": ERROR: unexpected exception: " + e);  incAndGetFailCnt();}  }
class C{  private boolean read(){  int magic=endianSwap32(read32());  if (magic != RCO_MAGIC) {    log.warn(String.format("Invalid RCO magic 0x%08X",magic));    return false;  }  int version=read32();  if (log.isDebugEnabled()) {    log.debug(String.format("RCO version 0x%X",version));  }  skip32();  int compression=read32();  int umdFlag=compression & 0x0F;  int headerCompression=(compression & 0xF0) >> 4;  if (log.isDebugEnabled()) {    log.debug(String.format("umdFlag=0x%X, headerCompression=0x%X",umdFlag,headerCompression));  }  int pMainTable=read32();  pVSMXTable=read32();  int pTextTable=read32();  int pSoundTable=read32();  int pModelTable=read32();  int pImgTable=read32();  skip32();  int pFontTable=read32();  int pObjTable=read32();  int pAnimTable=read32();  pTextData=read32();  lTextData=read32();  pLabelData=read32();  lLabelData=read32();  int pEventData=read32();  int lEventData=read32();  int pTextPtrs=read32();  int lTextPtrs=read32();  int pImgPtrs=read32();  int lImgPtrs=read32();  int pModelPtrs=read32();  int lModelPtrs=read32();  int pSoundPtrs=read32();  int lSoundPtrs=read32();  int pObjPtrs=read32();  int lObjPtrs=read32();  int pAnimPtrs=read32();  int lAnimPtrs=read32();  pImgData=read32();  lImgData=read32();  int pSoundData=read32();  int lSoundData=read32();  int pModelData=read32();  int lModelData=read32();  skip32();  skip32();  skip32();  if (log.isDebugEnabled()) {    log.debug(String.format("pMainTable=0x%X, pVSMXTable=0x%X, pTextTable=0x%X, pSoundTable=0x%X, pModelTable=0x%X, pImgTable=0x%X, pFontTable=0x%X, pObjTable=0x%X, pAnimTable=0x%X",pMainTable,pVSMXTable,pTextTable,pSoundTable,pModelTable,pImgTable,pFontTable,pObjTable,pAnimTable));    log.debug(String.format("TextData=0x%X[0x%X], LabelData=0x%X[0x%X], EventData=0x%X[0x%X]",pTextData,lTextData,pLabelData,lLabelData,pEventData,lEventData));    log.debug(String.format("TextPtrs=0x%X[0x%X], ImgPtrs=0x%X[0x%X], ModelPtrs=0x%X[0x%X], SoundPtrs=0x%X[0x%X], ObjPtrs=0x%X[0x%X], AnimPtrs=0x%X[0x%X]",pTextPtrs,lTextPtrs,pImgPtrs,lImgPtrs,pModelPtrs,lModelPtrs,pSoundPtrs,lSoundPtrs,pObjPtrs,lObjPtrs,pAnimPtrs,lAnimPtrs));    log.debug(String.format("ImgData=0x%X[0x%X], SoundData=0x%X[0x%X], ModelData=0x%X[0x%X]",pImgData,lImgData,pSoundData,lSoundData,pModelData,lModelData));  }  if (headerCompression != 0) {    int lenPacked=read32();    int lenUnpacked=read32();    int lenLongestText=read32();    byte[] packedBuffer=readBytes(lenPacked);    byte[] unpackedBuffer=new byte[lenUnpacked];    int result;    if (headerCompression == RCO_DATA_COMPRESSION_RLZ) {      result=LZR.decompress(unpackedBuffer,lenUnpacked,packedBuffer);    } else {      log.warn(String.format("Unimplemented compression %d",headerCompression));      result=-1;    }    if (log.isTraceEnabled()) {      log.trace(String.format("Unpack header longestText=0x%X, result=0x%X: %s",lenLongestText,result,Utilities.getMemoryDump(unpackedBuffer,0,lenUnpacked)));    }    if (pTextData != RCO_NULL_PTR && lTextData > 0) {      seek(pTextData);      int nextOffset;      do {        int textLang=read16();        skip16();        nextOffset=read32();        int textLenPacked=read32();        int textLenUnpacked=read32();        byte[] textPackedBuffer=readBytes(textLenPacked);        byte[] textUnpackedBuffer=new byte[textLenUnpacked];        if (headerCompression == RCO_DATA_COMPRESSION_RLZ) {          result=LZR.decompress(textUnpackedBuffer,textLenUnpacked,textPackedBuffer);        } else {          log.warn(String.format("Unimplemented compression %d",headerCompression));          result=-1;        }        if (log.isTraceEnabled()) {          log.trace(String.format("Unpack text lang=%d, result=0x%X: %s",textLang,result,Utilities.getMemoryDump(textUnpackedBuffer,0,textLenUnpacked)));        }        if (result >= 0) {          compressedTextDataOffset=extend(compressedTextDataOffset,textLang + 1);          compressedTextDataOffset[textLang]=unpackedBuffer.length + RCO_HEADER_SIZE;          unpackedBuffer=append(unpackedBuffer,textUnpackedBuffer);        }        if (nextOffset == 0) {          break;        }        skip(nextOffset - 16 - textLenPacked);      } while (nextOffset != 0);    }    if (result >= 0) {      buffer=append(buffer,RCO_HEADER_SIZE,unpackedBuffer);    }  }  events=new HashMap<Integer,String>();  if (pEventData != RCO_NULL_PTR && lEventData > 0) {    seek(pEventData);    while (tell() < pEventData + lEventData) {      int index=tell() - pEventData;      String s=readString();      if (s != null && s.length() > 0) {        events.put(index,s);      }    }  }  entries=new HashMap<Integer,RCO.RCOEntry>();  images=new HashMap<Integer,BufferedImage>();  objects=new HashMap<Integer,BaseObject>();  mainTable=readRCOEntry(pMainTable);  if (log.isDebugEnabled()) {    log.debug(String.format("mainTable: %s",mainTable));  }  if (pObjPtrs != RCO_NULL_PTR) {    seek(pObjPtrs);    for (int i=0; i < lObjPtrs; i+=4) {      int objPtr=read32();      if (objPtr != 0 && !objects.containsKey(objPtr)) {        log.warn(String.format("Object 0x%X not read",objPtr));      }    }  }  if (pImgPtrs != RCO_NULL_PTR) {    seek(pImgPtrs);    for (int i=0; i < lImgPtrs; i+=4) {      int imgPtr=read32();      if (imgPtr != 0 && !images.containsKey(imgPtr)) {        log.warn(String.format("Image 0x%X not read",imgPtr));      }    }  }  RCOContext context=new RCOContext(null,0,events,images,objects);  for (  BaseObject object : objects.values()) {    object.init(context);  }  return true;}  }
class C{  public boolean hasCycle(){  return cycle != null;}  }
class C{  public Line(int offset,int end,String delimiter){  this.offset=offset;  this.length=(end - offset) + 1;  this.delimiter=delimiter;}  }
class C{  public Source<Float> allFloats(){  return Compositions.combineWithValues(fromNegativeInfinityToPositiveInfinity(),Float.NaN);}  }
class C{  public Polynomial minus(Polynomial B){  Polynomial retval=new Polynomial(Math.max(order,B.order));  for (int i=0; i <= order; i++)   retval.a[i]=a[i];  for (int i=0; i <= B.order; i++)   retval.a[i]-=B.a[i];  return retval;}  }
class C{  public ClientResponse post(URI url,String body){  return _client.resource(url).type(MediaType.APPLICATION_JSON).post(ClientResponse.class,body);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  protected void sqrtLayout(VisualTable labels){  Rectangle2D b=getLayoutBounds();  double breadth=getBreadth(b);  double span=m_hi - m_lo;  double splo=MathLib.safeSqrt(m_prevlo);  double spspan=MathLib.safeSqrt(m_prevhi) - splo;  double vlo=Math.pow(10,Math.floor(MathLib.safeLog10(m_lo)));  double slo=MathLib.safeSqrt(m_lo);  double sspan=MathLib.safeSqrt(m_hi) - slo;  Iterator iter=labels.tuples();  while (iter.hasNext()) {    VisualItem item=(VisualItem)iter.next();    reset(item);    double v=item.getDouble(VALUE);    double x=span == 0 ? 0 : ((MathLib.safeSqrt(v) - slo) / sspan) * breadth;    set(item,x,b);  }  Index index=labels.index(VALUE);  double step=getLinearStep(span,breadth / span);  if (step == 0)   step=1;  int r;  for (double x, v=vlo; v <= m_hi; v+=step) {    x=((MathLib.safeSqrt(v) - slo) / sspan) * breadth;    if (x < -0.5) {      continue;    } else     if ((r=index.get(v)) >= 0) {      VisualItem item=labels.getItem(r);      item.setVisible(true);      item.setEndVisible(true);    } else {      VisualItem item=labels.addItem();      item.set(LABEL,m_nf.format(v));      item.setDouble(VALUE,v);      double f=spspan == 0 ? 0 : ((MathLib.safeSqrt(v) - splo) / spspan);      if (f <= 0 || f >= 1.0) {        item.setStartVisible(true);      }      set(item,f * breadth,b);      set(item,x,b);    }  }}  }
class C{  private static boolean isValidLocataion(String parameter){  try {    if (parameter != null) {      File f=new File(parameter);      if (!(f.exists())) {        log.error("Location not found! " + f.getCanonicalPath());        return false;      }    } else {      log.error("Location not initialized!");      return false;    }  } catch (  IOException e) {  }  return true;}  }
class C{  boolean matches(long token){  return this.token == token;}  }
class C{  protected final void SSE2_CONV(Operator op,Instruction s,Operand result,Operand value){  if (VM.VerifyAssertions)   opt_assert(result.isRegister());  EMIT(MIR_Unary.mutate(s,op,result,value));}  }
class C{  public BoundedSize(Size basis,Size lowerBound,Size upperBound){  this.basis=checkNotNull(basis,"The basis must not be null.");  this.lowerBound=lowerBound;  this.upperBound=upperBound;  if (lowerBound == null && upperBound == null) {    throw new IllegalArgumentException("A bounded size must have a non-null lower or upper bound.");  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tRandom number seed for cross validation\n" + "\t(default = 1)","S",1,"-S <seed>"));  newVector.addElement(new Option("\tNumber of folds for cross validation\n" + "\t(default = 10)","F",1,"-F <folds>"));  newVector.addElement(new Option("\tUse training data for evaluation rather than cross validaton","D",0,"-D"));  newVector.addElement(new Option("\tMinimum number of objects in a bucket\n" + "\t(passed on to " + "OneR, default = 6)","B",1,"-B <minimum bucket size>"));  return newVector.elements();}  }
class C{  ApacheHTTPResponse(final HttpClient client,final BOSHClientConfig cfg,final CMSessionParams params,final AbstractBody request){  super();  this.client=client;  this.context=new BasicHttpContext();  this.post=new HttpPost(cfg.getURI().toString());  this.sent=false;  try {    String xml=request.toXML();    byte[] data=xml.getBytes(CHARSET);    String encoding=null;    if (cfg.isCompressionEnabled() && params != null) {      AttrAccept accept=params.getAccept();      if (accept != null) {        if (accept.isAccepted(ZLIBCodec.getID())) {          encoding=ZLIBCodec.getID();          data=ZLIBCodec.encode(data);        } else         if (accept.isAccepted(GZIPCodec.getID())) {          encoding=GZIPCodec.getID();          data=GZIPCodec.encode(data);        }      }    }    ByteArrayEntity entity=new ByteArrayEntity(data);    entity.setContentType(CONTENT_TYPE);    if (encoding != null) {      entity.setContentEncoding(encoding);    }    post.setEntity(entity);    if (cfg.isCompressionEnabled()) {      post.setHeader(ACCEPT_ENCODING,ACCEPT_ENCODING_VAL);    }  } catch (  Exception e) {    toThrow=new BOSHException("Could not generate request",e);  }}  }
class C{  public FloatMatrix maxi(FloatMatrix other){  return maxi(other,this);}  }
class C{  public void testShare(){  EndToEndTestUtils.resetAllSettings(activityMyTracks,false);  EndToEndTestUtils.createTrackIfEmpty(0,false);  EndToEndTestUtils.findMenuItem(activityMyTracks.getString(R.string.menu_share),true);  if (EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.send_google_no_account_title),1,EndToEndTestUtils.VERY_SHORT_WAIT_TIME)) {    EndToEndTestUtils.SOLO.clickOnText(activityMyTracks.getString(R.string.generic_ok));    return;  }  boolean isAccount2Bound=false;  if (EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.send_google_choose_account_title),1,EndToEndTestUtils.SHORT_WAIT_TIME)) {    if (EndToEndTestUtils.SOLO.waitForText(GoogleUtils.ACCOUNT_2,1,EndToEndTestUtils.VERY_SHORT_WAIT_TIME)) {      isAccount2Bound=true;    }    EndToEndTestUtils.SOLO.clickOnText(GoogleUtils.ACCOUNT_1);    EndToEndTestUtils.getButtonOnScreen(activityMyTracks.getString(R.string.generic_ok),true,true);  }  assertTrue(EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.share_track_title)));  ArrayList<CheckBox> checkBoxs=EndToEndTestUtils.SOLO.getCurrentViews(CheckBox.class);  for (int i=0; i < checkBoxs.size(); i++) {    if (!checkBoxs.get(i).isChecked()) {      EndToEndTestUtils.SOLO.clickOnView(checkBoxs.get(i));      instrumentation.waitForIdleSync();    }  }  assertTrue(EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.share_track_emails_hint)));  EndToEndTestUtils.enterTextAvoidSoftKeyBoard(0,GoogleUtils.ACCOUNT_2);  EndToEndTestUtils.getButtonOnScreen(activityMyTracks.getString(R.string.generic_ok),true,true);  while (EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.generic_progress_title),1,EndToEndTestUtils.SHORT_WAIT_TIME)) {  }  assertTrue(EndToEndTestUtils.SOLO.waitForText(EndToEndTestUtils.SOLO.getString(R.string.share_track_share_url_title)));  EndToEndTestUtils.SOLO.goBack();  if (isAccount2Bound) {    EndToEndTestUtils.SOLO.goBack();    SyncTestUtils.enableSync(GoogleUtils.ACCOUNT_2);    EndToEndTestUtils.findMenuItem(EndToEndTestUtils.trackListActivity.getString(R.string.menu_sync_now),true);    assertTrue(EndToEndTestUtils.SOLO.waitForText(activityMyTracks.getString(R.string.track_list_shared_with_me),1,EndToEndTestUtils.SUPER_LONG_WAIT_TIME));    assertTrue(EndToEndTestUtils.SOLO.waitForText(EndToEndTestUtils.trackName,1,EndToEndTestUtils.SUPER_LONG_WAIT_TIME));  }}  }
class C{  public Object parse(URL url,Map params){  return parseURL(url,params);}  }
class C{  public PatternReplaceFilter(TokenStream in,Pattern p,String replacement,boolean all){  super(in);  this.replacement=(null == replacement) ? "" : replacement;  this.all=all;  this.m=p.matcher(termAtt);}  }
class C{  private String trim(String value){  if (value != null)   return value.trim(); else   return value;}  }
class C{  public static TaskContext current(){  final Deque<TaskContext> stack=contextStacks.get();  if (stack == null) {    return null;  }  return stack.peekLast();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.240 -0500",hash_original_method="58B711F614C57C81491E703600BC8F27",hash_generated_method="B00A61178886376BB0ED507E42165532") @Override public void send(HandshakeIODataStream out){  out.write(server_version);  out.write(random);  out.writeUint8(session_id.length);  out.write(session_id);  out.write(cipher_suite.toBytes());  out.write(compression_method);  length=38 + session_id.length;}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  private void fillCompatible(int precision,char[] digits,int nDigits,int exp,boolean isNegative){  int startIndex=isNegative ? 1 : 0;  if (exp > 0 && exp < 8) {    if (nDigits < exp) {      int extraZeros=exp - nDigits;      mantissa=create(isNegative,nDigits + extraZeros + 2);      System.arraycopy(digits,0,mantissa,startIndex,nDigits);      Arrays.fill(mantissa,startIndex + nDigits,startIndex + nDigits + extraZeros,'0');      mantissa[startIndex + nDigits + extraZeros]='.';      mantissa[startIndex + nDigits + extraZeros+ 1]='0';    } else     if (exp < nDigits) {      int t=Math.min(nDigits - exp,precision);      mantissa=create(isNegative,exp + 1 + t);      System.arraycopy(digits,0,mantissa,startIndex,exp);      mantissa[startIndex + exp]='.';      System.arraycopy(digits,exp,mantissa,startIndex + exp + 1,t);    } else {      mantissa=create(isNegative,nDigits + 2);      System.arraycopy(digits,0,mantissa,startIndex,nDigits);      mantissa[startIndex + nDigits]='.';      mantissa[startIndex + nDigits + 1]='0';    }  } else   if (exp <= 0 && exp > -3) {    int zeros=Math.max(0,Math.min(-exp,precision));    int t=Math.max(0,Math.min(nDigits,precision + exp));    if (zeros > 0) {      mantissa=create(isNegative,zeros + 2 + t);      mantissa[startIndex]='0';      mantissa[startIndex + 1]='.';      Arrays.fill(mantissa,startIndex + 2,startIndex + 2 + zeros,'0');      if (t > 0) {        System.arraycopy(digits,0,mantissa,startIndex + 2 + zeros,t);      }    } else     if (t > 0) {      mantissa=create(isNegative,zeros + 2 + t);      mantissa[startIndex]='0';      mantissa[startIndex + 1]='.';      System.arraycopy(digits,0,mantissa,startIndex + 2,t);    } else {      this.mantissa=create(isNegative,1);      this.mantissa[startIndex]='0';    }  } else {    if (nDigits > 1) {      mantissa=create(isNegative,nDigits + 1);      mantissa[startIndex]=digits[0];      mantissa[startIndex + 1]='.';      System.arraycopy(digits,1,mantissa,startIndex + 2,nDigits - 1);    } else {      mantissa=create(isNegative,3);      mantissa[startIndex]=digits[0];      mantissa[startIndex + 1]='.';      mantissa[startIndex + 2]='0';    }    int e, expStartIntex;    boolean isNegExp=(exp <= 0);    if (isNegExp) {      e=-exp + 1;      expStartIntex=1;    } else {      e=exp - 1;      expStartIntex=0;    }    if (e <= 9) {      exponent=create(isNegExp,1);      exponent[expStartIntex]=(char)(e + '0');    } else     if (e <= 99) {      exponent=create(isNegExp,2);      exponent[expStartIntex]=(char)(e / 10 + '0');      exponent[expStartIntex + 1]=(char)(e % 10 + '0');    } else {      exponent=create(isNegExp,3);      exponent[expStartIntex]=(char)(e / 100 + '0');      e%=100;      exponent[expStartIntex + 1]=(char)(e / 10 + '0');      exponent[expStartIntex + 2]=(char)(e % 10 + '0');    }  }}  }
class C{  public OutlierResult run(Database database,Relation<V> relation){  emClustering.setSoft(true);  Clustering<?> emresult=emClustering.run(database,relation);  Relation<double[]> soft=null;  for (Iter<Result> iter=emresult.getHierarchy().iterChildren(emresult); iter.valid(); iter.advance()) {    if (!(iter.get() instanceof Relation)) {      continue;    }    if (((Relation<?>)iter.get()).getDataTypeInformation() == EM.SOFT_TYPE) {      @SuppressWarnings("unchecked") Relation<double[]> rel=(Relation<double[]>)iter.get();      soft=rel;    }  }  double globmax=0.0;  WritableDoubleDataStore emo_score=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP | DataStoreFactory.HINT_HOT);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double maxProb=Double.POSITIVE_INFINITY;    double[] probs=soft.get(iditer);    for (    double prob : probs) {      maxProb=Math.min(1. - prob,maxProb);    }    emo_score.putDouble(iditer,maxProb);    globmax=Math.max(maxProb,globmax);  }  DoubleRelation scoreres=new MaterializedDoubleRelation("EM outlier scores","em-outlier",emo_score,relation.getDBIDs());  OutlierScoreMeta meta=new ProbabilisticOutlierScore(0.0,globmax);  OutlierResult result=new OutlierResult(meta,scoreres);  result.addChildResult(emresult);  return result;}  }
class C{  private Set<AnnotationMirror> findGreatestTypes(Set<AnnotationMirror> inset){  Set<AnnotationMirror> outset=AnnotationUtils.createAnnotationSet();  outset.addAll(inset);  for (  AnnotationMirror a1 : inset) {    Iterator<AnnotationMirror> outit=outset.iterator();    while (outit.hasNext()) {      AnnotationMirror a2=outit.next();      if (a1 != a2 && isSubtype(a2,a1)) {        outit.remove();      }    }  }  return outset;}  }
class C{  public static <E>E parse(InputStream is,ParameterizedType<E> jsonObjectType) throws IOException {  return mapperFor(jsonObjectType).parse(is);}  }
class C{  public boolean hasDetails(String sku){  return mSkuMap.containsKey(sku);}  }
class C{  @SuppressWarnings("restriction") @Test public void test2() throws IOException {  final int maxLineLen=76 - 1;  final int maxDataBlockLen=maxLineLen * 3 / 4;  final sun.misc.BASE64Encoder sunEncoder=new sun.misc.BASE64Encoder();  final sun.misc.BASE64Decoder sunDecoder=new sun.misc.BASE64Decoder();  final Random rnd=new Random(0x538afb92);  for (int i=0; i < 100; i++) {    final int len=rnd.nextInt(maxDataBlockLen + 1);    final byte[] b0=new byte[len];    rnd.nextBytes(b0);    final String e1=new String(Base64Coder.encode(b0));    final String e2=sunEncoder.encode(b0);    assertEquals("test2",e2,e1);    final byte[] b1=Base64Coder.decode(e1);    final byte[] b2=sunDecoder.decodeBuffer(e2);    assertArrayEquals(b0,b1);    assertArrayEquals(b0,b2);  }}  }
class C{  public SheetEvent(JSheet source,URIChooser chooser,int option,@Nullable Object value){  super(source);  this.pane=chooser;  this.option=option;  this.value=value;}  }
class C{  @PrePersist @PreUpdate protected void preUpdate(){  this.modifiedDate=new Date();  if (this.createdDate == null) {    this.createdDate=this.modifiedDate;  }}  }
class C{  public TestResult(final TestStatus testStatus){  this.testStatus=testStatus;}  }
class C{  @Override public void initialize(CeylonTool mainTool){  this.inited=true;}  }
class C{  public boolean drain() throws InterruptedException {  logger.info("Draining consumer.");  Path file;  boolean stopped;  draining.acquire();  this.stopped.set(false);  try {    while (!(stopped=this.stopped.get()) && null != (file=poll())) {      stopped=this.stopped.get();      if (stopped) {        queue.add(file);        break;      } else {        accept(file);      }    }  }  finally {    draining.release();  }  if (stopped) {    logger.info("Draining stopped.");    return false;  } else {    logger.info("Queue drained.");    return true;  }}  }
class C{  public List<Expression> extractAllLocalActionsForEventType(State state,Class<? extends EventSpec> eventType){  List<Reaction> localReactions=new ArrayList<Reaction>(state.getLocalReactions());  List<Expression> resultActions=new ArrayList<Expression>();  for (  Reaction reaction : localReactions) {    if (!(reaction.getEffect() instanceof ReactionEffect) || !(reaction.getTrigger() instanceof ReactionTrigger)) {      continue;    }    ReactionTrigger reactionTrigger=(ReactionTrigger)reaction.getTrigger();    ReactionEffect reactionEffect=(ReactionEffect)reaction.getEffect();    List<EventSpec> triggers=new ArrayList<EventSpec>(reactionTrigger.getTriggers());    if (containsOnlyEventsOfType(triggers,eventType)) {      EList<Expression> entryActions=reactionEffect.getActions();      resultActions.addAll(entryActions);      EcoreUtil.remove(reaction);    } else     if (containsAtLeastOneEventOfType(triggers,eventType)) {      EList<Expression> entryActions=reactionEffect.getActions();      resultActions.addAll(entryActions);      deleteAllEventsOfType(triggers,eventType);    }  }  return resultActions;}  }
class C{  public void doHttpFilter(HttpServletRequest servletRequest,HttpServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {  if (securityHelper.isSecurityEnabled(servletRequest)) {    ApplicationUser applicationUserNoRoles;    try {      applicationUserNoRoles=applicationUserBuilder.buildNoRoles(servletRequest);    } catch (    Exception ex) {      applicationUserNoRoles=null;    }    if (applicationUserNoRoles == null) {      processUserNotLoggedIn(servletRequest);    } else {      LOGGER.debug("Current user Id: " + applicationUserNoRoles.getUserId() + ", Session Init Time: "+ applicationUserNoRoles.getSessionInitTime());      LOGGER.debug("User is logged in.");      invalidateUser(servletRequest,false);      authenticateUser(servletRequest);    }  }  filterChain.doFilter(servletRequest,servletResponse);}  }
class C{  public void testGetAuthor(AbstractDosPlugin instance){  String result=instance.getAuthor();  assertTrue(result.length() > 0);}  }
class C{  public RegionDestroyedException(String msg,String regionFullPath){  super(msg);  this.regionFullPath=regionFullPath;}  }
class C{  public void load(){  log.debug("Loading cores into CoreContainer [instanceDir={}]",loader.getInstancePath());  String libDir=cfg.getSharedLibDirectory();  if (libDir != null) {    Path libPath=loader.getInstancePath().resolve(libDir);    try {      loader.addToClassLoader(SolrResourceLoader.getURLs(libPath));      loader.reloadLuceneSPI();    } catch (    IOException e) {      if (!libDir.equals("lib")) {        log.warn("Couldn't add files from {} to classpath: {}",libPath,e.getMessage());      }    }  }  shardHandlerFactory=ShardHandlerFactory.newInstance(cfg.getShardHandlerFactoryPluginInfo(),loader);  updateShardHandler=new UpdateShardHandler(cfg.getUpdateShardHandlerConfig());  solrCores.allocateLazyCores(cfg.getTransientCacheSize(),loader);  logging=LogWatcher.newRegisteredLogWatcher(cfg.getLogWatcherConfig(),loader);  hostName=cfg.getNodeName();  zkSys.initZooKeeper(this,solrHome,cfg.getCloudConfig());  if (isZooKeeperAware())   pkiAuthenticationPlugin=new PKIAuthenticationPlugin(this,zkSys.getZkController().getNodeName());  MDCLoggingContext.setNode(this);  ZkStateReader.ConfigData securityConfig=isZooKeeperAware() ? getZkController().getZkStateReader().getSecurityProps(false) : new ZkStateReader.ConfigData(EMPTY_MAP,-1);  initializeAuthorizationPlugin((Map<String,Object>)securityConfig.data.get("authorization"));  initializeAuthenticationPlugin((Map<String,Object>)securityConfig.data.get("authentication"));  this.backupRepoFactory=new BackupRepositoryFactory(cfg.getBackupRepositoryPlugins());  containerHandlers.put(ZK_PATH,new ZookeeperInfoHandler(this));  securityConfHandler=new SecurityConfHandler(this);  collectionsHandler=createHandler(cfg.getCollectionsHandlerClass(),CollectionsHandler.class);  containerHandlers.put(COLLECTIONS_HANDLER_PATH,collectionsHandler);  infoHandler=createHandler(cfg.getInfoHandlerClass(),InfoHandler.class);  containerHandlers.put(INFO_HANDLER_PATH,infoHandler);  coreAdminHandler=createHandler(cfg.getCoreAdminHandlerClass(),CoreAdminHandler.class);  containerHandlers.put(CORES_HANDLER_PATH,coreAdminHandler);  configSetsHandler=createHandler(cfg.getConfigSetsHandlerClass(),ConfigSetsHandler.class);  containerHandlers.put(CONFIGSETS_HANDLER_PATH,configSetsHandler);  containerHandlers.put(AUTHZ_PATH,securityConfHandler);  containerHandlers.put(AUTHC_PATH,securityConfHandler);  if (pkiAuthenticationPlugin != null)   containerHandlers.put(PKIAuthenticationPlugin.PATH,pkiAuthenticationPlugin.getRequestHandler());  coreConfigService=ConfigSetService.createConfigSetService(cfg,loader,zkSys.zkController);  containerProperties.putAll(cfg.getSolrProperties());  ExecutorService coreLoadExecutor=ExecutorUtil.newMDCAwareFixedThreadPool(cfg.getCoreLoadThreadCount(isZooKeeperAware()),new DefaultSolrThreadFactory("coreLoadExecutor"));  final List<Future<SolrCore>> futures=new ArrayList<>();  try {    List<CoreDescriptor> cds=coresLocator.discover(this);    if (isZooKeeperAware()) {      CoreSorter coreComparator=new CoreSorter().init(this);      cds=new ArrayList<>(cds);      Collections.sort(cds,null);    }    checkForDuplicateCoreNames(cds);    for (    final CoreDescriptor cd : cds) {      if (cd.isTransient() || !cd.isLoadOnStartup()) {        solrCores.putDynamicDescriptor(cd.getName(),cd);      } else       if (asyncSolrCoreLoad) {        solrCores.markCoreAsLoading(cd);      }      if (cd.isLoadOnStartup()) {        futures.add(coreLoadExecutor.submit(null));      }    }    backgroundCloser=new CloserThread(this,solrCores,cfg);    backgroundCloser.start();  }  finally {    if (asyncSolrCoreLoad && futures != null) {      coreContainerWorkExecutor.submit((Runnable)null);    } else {      ExecutorUtil.shutdownAndAwaitTermination(coreLoadExecutor);    }  }  if (isZooKeeperAware()) {    zkSys.getZkController().checkOverseerDesignate();  }}  }
class C{  public String beforeEdit(){  List<FundFlowBean> openingBalnaceAllList=new ArrayList<FundFlowBean>();  openingBalnaceAllList=getCurrentDayOpeningBalance(asOnDate,fund);  if (openingBalnaceAllList == null || openingBalnaceAllList.size() == 0)   throw new ValidationException(Arrays.asList(new ValidationError("fundflow.report.not.generated","Fund Flow report is not Generated for the Date and Fund. open in create Mode")));  receiptList=fundFlowService.getAllReceiptAccounts(fund);  final List<FundFlowBean> btbPaymentList=fundFlowService.getContraPaymentsForTheDay(asOnDate,fund);  if (LOGGER.isDebugEnabled())   LOGGER.debug("all Bank accounts ------" + receiptList.size());  for (  final FundFlowBean fall : receiptList)   for (  final FundFlowBean ftemp : btbPaymentList)   if (fall.getAccountNumber().equalsIgnoreCase(ftemp.getAccountNumber()))   fall.setBtbPayment(ftemp.getBtbPayment());  final List<FundFlowBean> btbReceiptList=fundFlowService.getContraReceiptsForTheDay(asOnDate,fund);  for (  final FundFlowBean fall : receiptList)   for (  final FundFlowBean ftemp : btbReceiptList)   if (fall.getAccountNumber().equalsIgnoreCase(ftemp.getAccountNumber()))   fall.setBtbReceipt(ftemp.getBtbReceipt());  paymentList=fundFlowService.getAllpaymentAccounts(fund);  for (  final FundFlowBean fall : paymentList)   for (  final FundFlowBean ftemp : btbReceiptList)   if (fall.getAccountNumber().equalsIgnoreCase(ftemp.getAccountNumber()))   fall.setBtbReceipt(ftemp.getBtbReceipt());  final List<FundFlowBean> btbReceipt_PaymentList=fundFlowService.getContraPaymentsForTheDayFromPaymentBanks(asOnDate,fund);  if (LOGGER.isDebugEnabled())   LOGGER.debug("all Bank accounts ------" + receiptList.size());  for (  final FundFlowBean fall : paymentList)   for (  final FundFlowBean ftemp : btbReceipt_PaymentList)   if (fall.getAccountNumber().equalsIgnoreCase(ftemp.getAccountNumber()))   fall.setBtbPayment(ftemp.getBtbPayment());  for (  final FundFlowBean fBean : receiptList)   for (  final FundFlowBean fop : openingBalnaceAllList)   if (fBean.getAccountNumber().equalsIgnoreCase(fop.getAccountNumber())) {    fBean.setOpeningBalance(fop.getOpeningBalance());    fBean.setCurrentReceipt(fop.getCurrentReceipt());    fBean.setBankAccountId(fop.getBankAccountId());    fBean.setId(fop.getId());  }  for (  final FundFlowBean fBean : paymentList)   for (  final FundFlowBean fop : openingBalnaceAllList)   if (fBean.getAccountNumber().equalsIgnoreCase(fop.getAccountNumber())) {    fBean.setOpeningBalance(fop.getOpeningBalance());    fBean.setCurrentReceipt(fop.getCurrentReceipt());    fBean.setBankAccountId(fop.getBankAccountId());    fBean.setId(fop.getId());  }  concurrancePaymentList=fundFlowService.getConcurrancePayments(asOnDate,fund);  for (  final FundFlowBean fBean : paymentList)   for (  final FundFlowBean fop : concurrancePaymentList)   if (fBean.getAccountNumber().equalsIgnoreCase(fop.getAccountNumber()))   fBean.setConcurranceBPV(fop.getConcurranceBPV());  for (  final FundFlowBean fBean : receiptList)   for (  final FundFlowBean fop : concurrancePaymentList)   if (fBean.getAccountNumber().equalsIgnoreCase(fop.getAccountNumber()))   fBean.setConcurranceBPV(fop.getConcurranceBPV());  outStandingPaymentList=fundFlowService.getOutStandingPayments(asOnDate,fund);  for (  final FundFlowBean fBean : paymentList)   for (  final FundFlowBean fop : outStandingPaymentList)   if (fBean.getAccountNumber().equalsIgnoreCase(fop.getAccountNumber()))   fBean.setOutStandingBPV(fop.getOutStandingBPV());  for (  final FundFlowBean fBean : receiptList)   for (  final FundFlowBean fop : outStandingPaymentList)   if (fBean.getAccountNumber().equalsIgnoreCase(fop.getAccountNumber()))   fBean.setOutStandingBPV(fop.getOutStandingBPV());  setFundsAvailableTotalPay();  setFundsAvailableTotalRep();  return EDIT;}  }
class C{  private void showPopups(Rectangle[] rects,Rectangle bds,Rectangle visible,JComponent comp,JScrollPane view){  boolean shown=false;  for (int i=0; i < rects.length; i++) {    Rectangle sect=rects[i];    sect.translate(-bds.x,-bds.y);    ImgComp part=painter.getPartial(sect,bds.x + rects[i].x < visible.x);    Point pos=new Point(bds.x + rects[i].x,bds.y + rects[i].y);    SwingUtilities.convertPointToScreen(pos,comp);    if (comp instanceof JList) {      pos.y--;    }    if (pos.x > 0) {      popups[i]=getPopupFactory().getPopup(view,part,pos.x,pos.y);      popups[i].show();      shown=true;    }  }  if (shown) {    setHideComponent(comp,view);  } else {    setHideComponent(null,null);  }}  }
class C{  public void addRadioButtons(){  ButtonGroup group=new ButtonGroup();  tab.addTab(getString("ButtonDemo.radiobuttons"),radioButtonPanel);  radioButtonPanel.setLayout(new BoxLayout(radioButtonPanel,BoxLayout.X_AXIS));  radioButtonPanel.setBorder(border0);  JPanel p1=createVerticalPanel(true);  p1.setAlignmentY(TOP_ALIGNMENT);  radioButtonPanel.add(p1);  p1.add(Box.createHorizontalGlue());  JPanel jb2011p=new JPanel();  jb2011p.setLayout(new BoxLayout(jb2011p,BoxLayout.Y_AXIS));  JPanel p2=createHorizontalPanel(false);  createHorizonalHintBox(jb2011p,p2,getString("ButtonDemo.textradiobuttons"));  p1.add(jb2011p);  radio=(JRadioButton)p2.add(new JRadioButton(getString("ButtonDemo.radio1")));  group.add(radio);  radiobuttons.add(radio);  p2.add(Box.createRigidArea(HGAP10));  radio=(JRadioButton)p2.add(new JRadioButton(getString("ButtonDemo.radio2")));  group.add(radio);  radiobuttons.add(radio);  p2.add(Box.createRigidArea(HGAP10));  radio=(JRadioButton)p2.add(new JRadioButton(getString("ButtonDemo.radio3")));  group.add(radio);  radiobuttons.add(radio);  group=new ButtonGroup();  p1.add(Box.createRigidArea(VGAP30));  jb2011p=new JPanel();  jb2011p.setLayout(new BoxLayout(jb2011p,BoxLayout.Y_AXIS));  JPanel p3=createHorizontalPanel(false);  createHorizonalHintBox(jb2011p,p3,getString("ButtonDemo.imageradiobuttons"));  p1.add(jb2011p);  String description=getString("ButtonDemo.customradio");  String text=getString("ButtonDemo.radio1");  radio=new JRadioButton(text,createImageIcon("buttons/rb.gif",description));  radio.setPressedIcon(createImageIcon("buttons/rbp.gif",description));  radio.setRolloverIcon(createImageIcon("buttons/rbr.gif",description));  radio.setRolloverSelectedIcon(createImageIcon("buttons/rbrs.gif",description));  radio.setSelectedIcon(createImageIcon("buttons/rbs.gif",description));  radio.setMargin(new Insets(0,0,0,0));  group.add(radio);  p3.add(radio);  radiobuttons.add(radio);  p3.add(Box.createRigidArea(HGAP20));  text=getString("ButtonDemo.radio2");  radio=new JRadioButton(text,createImageIcon("buttons/rb.gif",description));  radio.setPressedIcon(createImageIcon("buttons/rbp.gif",description));  radio.setRolloverIcon(createImageIcon("buttons/rbr.gif",description));  radio.setRolloverSelectedIcon(createImageIcon("buttons/rbrs.gif",description));  radio.setSelectedIcon(createImageIcon("buttons/rbs.gif",description));  radio.setMargin(new Insets(0,0,0,0));  group.add(radio);  p3.add(radio);  radiobuttons.add(radio);  p3.add(Box.createRigidArea(HGAP20));  text=getString("ButtonDemo.radio3");  radio=new JRadioButton(text,createImageIcon("buttons/rb.gif",description));  radio.setPressedIcon(createImageIcon("buttons/rbp.gif",description));  radio.setRolloverIcon(createImageIcon("buttons/rbr.gif",description));  radio.setRolloverSelectedIcon(createImageIcon("buttons/rbrs.gif",description));  radio.setSelectedIcon(createImageIcon("buttons/rbs.gif",description));  radio.setMargin(new Insets(0,0,0,0));  group.add(radio);  radiobuttons.add(radio);  p3.add(radio);  p1.add(Box.createVerticalGlue());  radioButtonPanel.add(Box.createHorizontalStrut(10));  currentControls=radiobuttons;  radioButtonPanel.add(createControls());}  }
class C{  public String decode(String value) throws DecoderException {  if (value == null) {    return null;  }  try {    return decodeText(value);  } catch (  UnsupportedEncodingException e) {    throw new DecoderException(e.getMessage());  }}  }
class C{  public int affinityFunctionPartition(long ptr,long memPtr){  enter();  try {    return PlatformCallbackUtils.affinityFunctionPartition(envPtr,ptr,memPtr);  }  finally {    leave();  }}  }
class C{  public void rename(String url,String newFileName,boolean includedSuffix,OnRenameDownloadFileListener onRenameDownloadFileListener){  getDownloadRenameManager().rename(url,newFileName,includedSuffix,onRenameDownloadFileListener);}  }
class C{  public List<NamedRelatedResourceRep> listByStorageSystem(URI storageSystemId){  return getList(PathConstants.VIRTUAL_NAS_SERVER_BY_STORAGE_SYSTEM_URL,storageSystemId);}  }
class C{  public String printQueue(){  StringBuilder result=new StringBuilder();  result.append("[");  LirsEntry e=queueFront();  if (e != null) {    result.append(e);    for (e=e.nextInQueue; e != header; e=e.nextInQueue) {      result.append(", " + e);    }  }  result.append("]");  return result.toString();}  }
class C{  public void start() throws Exception {  log.debug("Initiating embedded Kafka cluster startup");  log.debug("Starting a ZooKeeper instance...");  zookeeper=new ZooKeeperEmbedded();  log.debug("ZooKeeper instance is running at {}",zookeeper.connectString());  Properties effectiveBrokerConfig=effectiveBrokerConfigFrom(brokerConfig,zookeeper);  log.debug("Starting a Kafka instance on port {} ...",effectiveBrokerConfig.getProperty(KafkaConfig$.MODULE$.PortProp()));  broker=new KafkaEmbedded(effectiveBrokerConfig);  log.debug("Kafka instance is running at {}, connected to ZooKeeper at {}",broker.brokerList(),broker.zookeeperConnect());  schemaRegistry=new RestApp(InstanceSpec.getRandomPort(),zookeeperConnect(),KAFKA_SCHEMAS_TOPIC,AVRO_COMPATIBILITY_TYPE);  schemaRegistry.start();}  }
class C{  public void put(String name,Scriptable start,Object value){}  }
class C{  public List<Tradestrategy> findAllTradestrategies() throws PersistentModelException {  return m_tradestrategyHome.findAll();}  }
class C{  public WritableRaster createWritableTranslatedChild(int childMinX,int childMinY){  return createWritableChild(minX,minY,width,height,childMinX,childMinY,null);}  }
class C{  public void and(BitMatrix other){  checkDimensionCompatibility(other);  toBitVector().and(other.toBitVector());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.TESTED_PROJECT__VERSION_CONSTRAINT:    setVersionConstraint((VersionConstraint)newValue);  return;case N4mfPackage.TESTED_PROJECT__DECLARED_SCOPE:setDeclaredScope((ProjectDependencyScope)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @SuppressWarnings("unchecked") ItemsAuxiliary(final ItemsSketch<T> qs){  final int k=qs.getK();  final long n=qs.getN();  final long bitPattern=qs.getBitPattern();  final Object[] combinedBuffer=qs.getCombinedBuffer();  final int baseBufferCount=qs.getBaseBufferCount();  final int numSamples=qs.getRetainedItems();  final Object[] itemsArr=new Object[numSamples];  final long[] cumWtsArr=new long[numSamples + 1];  populateFromQuantilesSketch(k,n,bitPattern,(T[])combinedBuffer,baseBufferCount,numSamples,(T[])itemsArr,cumWtsArr,qs.getComparator());  ItemsUtil.blockyTandemMergeSort((T[])itemsArr,cumWtsArr,numSamples,k,qs.getComparator());  long subtot=0;  for (int i=0; i < numSamples + 1; i++) {    final long newSubtot=subtot + cumWtsArr[i];    cumWtsArr[i]=subtot;    subtot=newSubtot;  }  assert subtot == n;  auxN_=n;  auxSamplesArr_=itemsArr;  auxCumWtsArr_=cumWtsArr;}  }
class C{  public static String convertToUnicode(byte[] b,boolean includesNull){  if (b == null || b.length == 0) {    return null;  }  int arrayLength=b.length;  if (!((arrayLength % 2) == 0)) {    throw new IllegalArgumentException("Byte array not of a valid form");  }  arrayLength=(arrayLength >> 1);  if (includesNull) {    arrayLength-=1;  }  char[] c=new char[arrayLength];  for (int i=0; i < arrayLength; i++) {    int upper=b[2 * i];    int lower=b[(2 * i) + 1];    if (upper < 0) {      upper+=256;    }    if (lower < 0) {      lower+=256;    }    if (upper == 0 && lower == 0) {      return new String(c,0,i);    }    c[i]=(char)((upper << 8) | lower);  }  return new String(c);}  }
class C{  static public void packLong(DataOutput out,long value) throws IOException {  int shift=63 - Long.numberOfLeadingZeros(value);  shift-=shift % 7;  while (shift != 0) {    out.writeByte((byte)((value >>> shift) & 0x7F));    shift-=7;  }  out.writeByte((byte)((value & 0x7F) | 0x80));}  }
class C{  private void populateAvailableRulesTable(IProject project){  List<DetectorFactory> allAvailableList=new ArrayList<DetectorFactory>();  factoriesToBugAbbrev=new HashMap<DetectorFactory,String>();  Iterator<DetectorFactory> iterator=DetectorFactoryCollection.instance().factoryIterator();  while (iterator.hasNext()) {    DetectorFactory factory=iterator.next();    if (factory.isHidden() && !isHiddenVisible()) {      continue;    }    allAvailableList.add(factory);    addBugsAbbreviation(factory);  }  availableFactoriesTableViewer.setInput(allAvailableList);  TableItem[] itemList=availableFactoriesTableViewer.getTable().getItems();  UserPreferences userPreferences=getCurrentProps();  for (int i=0; i < itemList.length; i++) {    DetectorFactory rule=(DetectorFactory)itemList[i].getData();    if (userPreferences.isDetectorEnabled(rule)) {      itemList[i].setChecked(true);    }  }}  }
class C{  XSLTElementDef(){}  }
class C{  public void removeViewer(HumanEntity viewer){  viewers.remove(viewer);}  }
class C{  @Deprecated public SimpleTriggerImpl(String name,Date startTime){  this(name,null,startTime);}  }
class C{  private static boolean startsWith(final String str,final String prefix,final boolean ignoreCase){  if (str == null || prefix == null) {    return str == null && prefix == null;  }  if (prefix.length() > str.length()) {    return false;  }  return str.regionMatches(ignoreCase,0,prefix,0,prefix.length());}  }
class C{  public void disconnect(View view){  finish();}  }
class C{  protected IType createTypeHandle(String simpleTypeName){  Openable openable=this.currentPossibleMatch.openable;  if (openable instanceof CompilationUnit)   return ((CompilationUnit)openable).getType(simpleTypeName);  IType binaryType=((ClassFile)openable).getType();  String binaryTypeQualifiedName=binaryType.getTypeQualifiedName();  if (simpleTypeName.equals(binaryTypeQualifiedName))   return binaryType;  String classFileName=simpleTypeName.length() == 0 ? binaryTypeQualifiedName : simpleTypeName;  IClassFile classFile=binaryType.getPackageFragment().getClassFile(classFileName + SuffixConstants.SUFFIX_STRING_class);  return classFile.getType();}  }
class C{  public String commandId(String sensorId,String commandId){  return sensorId + "." + commandId;}  }
class C{  public Object[] executeQueriesWithoutDistinct(String qarr[]){  QueryService qs=cache.getQueryService();  Object[] result=new Object[qarr.length];  String query=null;  int j=0;  for (int i=0; i < qarr.length; i++) {    query=queries.get(qarr[i]);    if (query.indexOf("distinct") > -1)     query=query.replace("distinct","");    if (query.indexOf("DISTINCT") > -1)     query=query.replace("DISTINCT","");    try {      result[j++]=qs.newQuery(query).execute();    } catch (    Exception e) {      throw new RuntimeException(e);    }  }  return result;}  }
class C{  protected SelectedDenseDoubleMatrix3D(double[] elements,int[] sliceOffsets,int[] rowOffsets,int[] columnOffsets,int offset){  int slices=sliceOffsets.length;  int rows=rowOffsets.length;  int columns=columnOffsets.length;  setUp(slices,rows,columns);  this.elements=elements;  this.sliceOffsets=sliceOffsets;  this.rowOffsets=rowOffsets;  this.columnOffsets=columnOffsets;  this.offset=offset;  this.isNoView=false;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  System.out.print("Enter a string: ");  String value=input.next();  reverseDisplay(value);}  }
class C{  public int hashCode(){  int hash=0;  for (int i=0; i < entries.size(); i++) {    hash+=entries.get(i).hashCode();  }  return hash;}  }
class C{  public int size(){  return handle.length * 2;}  }
class C{  private boolean hasThumbnail(){  return mItem.thumbnails != null && mItem.thumbnails.getCurrentPage() != null && !mItem.thumbnails.getCurrentPage().isEmpty() && mItem.thumbnails.getCurrentPage().get(0).small != null && mItem.thumbnails.getCurrentPage().get(0).small.url != null;}  }
class C{  private void unread(){  _index--;}  }
class C{  public static long[] ones(int bits){  long[] v=new long[((bits - 1) >>> LONG_LOG2_SIZE) + 1];  final int fillWords=bits >>> LONG_LOG2_SIZE;  final int fillBits=bits & LONG_LOG2_MASK;  Arrays.fill(v,0,fillWords,LONG_ALL_BITS);  if (fillWords < v.length) {    v[v.length - 1]=(1L << fillBits) - 1;  }  return v;}  }
class C{  public boolean contains(Entry e){  for (  T set : mDataSets) {    if (set.contains(e))     return true;  }  return false;}  }
class C{  private void validateResult(TriggerDefinition result){  assertNotNull(result);  assertEquals(Boolean.valueOf(false),Boolean.valueOf(result.isSuspendProcess()));  assertEquals("voTarget",result.getTarget());  assertEquals(TriggerTargetType.WEB_SERVICE,result.getTargetType());  assertEquals(TriggerType.ACTIVATE_SERVICE,result.getType());  assertEquals(0,result.getVersion());  assertEquals(DISPLAY_NAME,result.getDataContainer().getName());}  }
class C{  public Map<String,Object> toMapData(){  final Map<String,Object> thisTransactionData=new LinkedHashMap<>();  final EnumOptionData transactionType=ClientEnumerations.clientTransactionType(this.typeOf);  Boolean accountingEnabledForAtleastOneCharge=false;  thisTransactionData.put("id",getId());  thisTransactionData.put("clientId",getClientId());  thisTransactionData.put("officeId",this.office.getId());  thisTransactionData.put("type",transactionType);  thisTransactionData.put("reversed",Boolean.valueOf(this.reversed));  thisTransactionData.put("date",getTransactionDate());  thisTransactionData.put("currencyCode",this.currencyCode);  thisTransactionData.put("amount",this.amount);  if (this.paymentDetail != null) {    thisTransactionData.put("paymentTypeId",this.paymentDetail.getPaymentType().getId());  }  if (!this.clientChargePaidByCollection.isEmpty()) {    final List<Map<String,Object>> clientChargesPaidData=new ArrayList<>();    for (    final ClientChargePaidBy clientChargePaidBy : this.clientChargePaidByCollection) {      final Map<String,Object> clientChargePaidData=new LinkedHashMap<>();      clientChargePaidData.put("chargeId",clientChargePaidBy.getClientCharge().getCharge().getId());      clientChargePaidData.put("isPenalty",clientChargePaidBy.getClientCharge().getCharge().isPenalty());      clientChargePaidData.put("clientChargeId",clientChargePaidBy.getClientCharge().getId());      clientChargePaidData.put("amount",clientChargePaidBy.getAmount());      GLAccount glAccount=clientChargePaidBy.getClientCharge().getCharge().getAccount();      if (glAccount != null) {        accountingEnabledForAtleastOneCharge=true;        clientChargePaidData.put("incomeAccountId",glAccount.getId());      }      clientChargesPaidData.add(clientChargePaidData);    }    thisTransactionData.put("clientChargesPaid",clientChargesPaidData);  }  thisTransactionData.put("accountingEnabled",accountingEnabledForAtleastOneCharge);  return thisTransactionData;}  }
class C{  public static mat4 createScale(vec3 v){  mat4 result=new mat4();  result.m[0]=v.m[0];  result.m[5]=v.m[1];  result.m[10]=v.m[2];  return result;}  }
class C{  public static QueryResultsProcessor create(Operation op){  QueryTask task=op.getBody(QueryTask.class);  if (Objects.equals(task.documentKind,QueryTask.KIND)) {    ServiceDocumentQueryResult r=op.getBody(ServiceDocumentQueryResult.class);    if (Objects.equals(task.documentKind,ODataFactoryQueryResult.KIND) || Objects.equals(task.documentKind,ServiceDocumentQueryResult.KIND)) {      return new QueryResultsProcessor(null,r);    } else {      throw new IllegalArgumentException("Cannot create QueryResultsProcessor from a " + r.documentKind + " document");    }  } else {    return new QueryResultsProcessor(task,task.results);  }}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  void applyTransformForChildAtIndex(View child,int relativeIndex){}  }
class C{  public static Parcel byteToParcel(@NonNull byte[] bytes){  Parcel parcel=Parcel.obtain();  parcel.unmarshall(bytes,0,bytes.length);  parcel.setDataPosition(0);  return parcel;}  }
class C{  public void executePlan(Workflow workflow) throws WorkflowException {  InterProcessLock lock=null;  try {    if (!workflow.getStepMap().isEmpty()) {      _log.info("Executing workflow plan: " + workflow.getWorkflowURI() + " "+ workflow.getOrchTaskId());      workflow.setWorkflowState(WorkflowState.RUNNING);      suspendStepsMatchingProperty(workflow);      persistWorkflow(workflow);      for (      Step step : workflow.getStepMap().values()) {        persistWorkflowStep(workflow,step);      }      if (checkSuspendedSteps(workflow)) {        _log.info("Workflow is suspended: " + workflow.getWorkflowURI());        for (        Step step : workflow.getStepMap().values()) {          if (step.status.state == StepState.SUSPENDED_NO_ERROR) {            completerStepSuspendedNoError(step.stepId);          }        }      } else {        lock=lockWorkflow(workflow);        for (        Step step : workflow.getStepMap().values()) {          if (step.status.state == StepState.CREATED) {            queueWorkflowStep(workflow,step);          }        }      }    } else {      _log.info("Workflow executed with no steps: " + workflow.getWorkflowURI());      releaseAllWorkflowLocks(workflow);      if (workflow._taskCompleter != null) {        workflow._taskCompleter.ready(_dbClient);      }    }  }  finally {    unlockWorkflow(workflow,lock);  }}  }
class C{  private void assertMoneyLeft(int exactAmount){  if (exactAmount > 0) {    assertTrue(player.isEquipped(ITEM_MONEY,exactAmount));  }  assertFalse(player.isEquipped(ITEM_MONEY,exactAmount + 1));}  }
class C{  protected MaterialSection newSection(final String title,final Fragment target,final boolean bottom,MaterialMenu menu,final int position,final boolean refreshMenu){  MaterialSection section=new MaterialSection(MaterialSection.TARGET_FRAGMENT,false,changeListener,new MaterialSectionBind<customTextView>());  additionalSection(section);  section.setTitle(title);  section.setTarget(target);  section.setOnClickListener(clickListener);  menu.addItem(section,position);  if (refreshMenu)   reloadMenu();  return section;}  }
class C{  protected void addTab(Tab tab){  super.addTab(tab.getName(),null,tab,tab.getTooltip());}  }
class C{  public static QueryStorageLunsResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  QueryStorageLunsResponse object=new QueryStorageLunsResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"queryStorageLunsResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (QueryStorageLunsResponse)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    java.util.ArrayList list1=new java.util.ArrayList();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        list1.add(null);        reader.next();      } else {        list1.add(StorageLun.Factory.parse(reader));      }      boolean loopDone1=false;      while (!loopDone1) {        while (!reader.isEndElement()) {          reader.next();        }        reader.next();        while (!reader.isStartElement() && !reader.isEndElement()) {          reader.next();        }        if (reader.isEndElement()) {          loopDone1=true;        } else {          if (new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","return").equals(reader.getName())) {            nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");            if ("true".equals(nillableValue) || "1".equals(nillableValue)) {              list1.add(null);              reader.next();            } else {              list1.add(StorageLun.Factory.parse(reader));            }          } else {            loopDone1=true;          }        }      }      object.set_return((StorageLun[])org.apache.axis2.databinding.utils.ConverterUtil.convertToArray(StorageLun.class,list1));    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public static void insertBreakpoint(int lineNumber){  if (breakpoints.containsKey(lineNumber)) {    breakpoints.get(lineNumber).setBPInstructionStatus(BPINSTRUCTION_STATUS.INVISIBLE);  } else {    breakpoints.put(lineNumber,new BreakPointInstruction(BPINSTRUCTION_STATUS.INVISIBLE));  }}  }
class C{  public void add(int field,int amount){  if (amount == 0) {    return;  }  if (field < 0 || field >= ZONE_OFFSET) {    throw new IllegalArgumentException();  }  complete();  if (field == YEAR) {    LocalGregorianCalendar.Date d=(LocalGregorianCalendar.Date)jdate.clone();    d.addYear(amount);    pinDayOfMonth(d);    set(ERA,getEraIndex(d));    set(YEAR,d.getYear());    set(MONTH,d.getMonth() - 1);    set(DAY_OF_MONTH,d.getDayOfMonth());  } else   if (field == MONTH) {    LocalGregorianCalendar.Date d=(LocalGregorianCalendar.Date)jdate.clone();    d.addMonth(amount);    pinDayOfMonth(d);    set(ERA,getEraIndex(d));    set(YEAR,d.getYear());    set(MONTH,d.getMonth() - 1);    set(DAY_OF_MONTH,d.getDayOfMonth());  } else   if (field == ERA) {    int era=internalGet(ERA) + amount;    if (era < 0) {      era=0;    } else     if (era > eras.length - 1) {      era=eras.length - 1;    }    set(ERA,era);  } else {    long delta=amount;    long timeOfDay=0;switch (field) {case HOUR:case HOUR_OF_DAY:      delta*=60 * 60 * 1000;    break;case MINUTE:  delta*=60 * 1000;break;case SECOND:delta*=1000;break;case MILLISECOND:break;case WEEK_OF_YEAR:case WEEK_OF_MONTH:case DAY_OF_WEEK_IN_MONTH:delta*=7;break;case DAY_OF_MONTH:case DAY_OF_YEAR:case DAY_OF_WEEK:break;case AM_PM:delta=amount / 2;timeOfDay=12 * (amount % 2);break;}if (field >= HOUR) {setTimeInMillis(time + delta);return;}long fd=cachedFixedDate;timeOfDay+=internalGet(HOUR_OF_DAY);timeOfDay*=60;timeOfDay+=internalGet(MINUTE);timeOfDay*=60;timeOfDay+=internalGet(SECOND);timeOfDay*=1000;timeOfDay+=internalGet(MILLISECOND);if (timeOfDay >= ONE_DAY) {fd++;timeOfDay-=ONE_DAY;} else if (timeOfDay < 0) {fd--;timeOfDay+=ONE_DAY;}fd+=delta;int zoneOffset=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);setTimeInMillis((fd - EPOCH_OFFSET) * ONE_DAY + timeOfDay - zoneOffset);zoneOffset-=internalGet(ZONE_OFFSET) + internalGet(DST_OFFSET);if (zoneOffset != 0) {setTimeInMillis(time + zoneOffset);long fd2=cachedFixedDate;if (fd2 != fd) {setTimeInMillis(time - zoneOffset);}}}}  }
class C{  private void cmd_end(boolean exit){  boolean exitSystem=false;  if (!cmd_save(false))   return;  if (exit && ADialog.ask(m_curWindowNo,this,"ExitApplication?"))   exitSystem=true;  Env.getFrame(this).dispose();  if (exitSystem)   AEnv.exit(0);}  }
class C{  public final void printClusters(PrintWriter out,List<ClusterData> clusterData,int[] matIndexToMsgInternalId) throws AdeException {  if (m_finalClusters == null) {    updateClusters(clusterData,matIndexToMsgInternalId);  }  for (  Map.Entry<String,Collection<Integer>> entry : m_finalClusters.entrySet()) {    final String n=entry.getKey();    final Collection<Integer> c=entry.getValue();    out.printf("%s\t",n);    for (    int m : c) {      out.printf("%d\t",matIndexToMsgInternalId[m]);    }    out.println();  }}  }
class C{  @Override @Deprecated public Condition duplicate(){  return this;}  }
class C{  public int size(){  return encodedNames.size();}  }
class C{  public static String toHumanSize(long sizeInBytes){  if (sizeInBytes < 0) {    throw new IllegalArgumentException(String.format("Negative size: %d",sizeInBytes));  }  if (sizeInBytes < K) {    return String.format("%d B",sizeInBytes);  }  float size=0.0f;  String suffix="PB";  for (int i=0, l=SIZE_UNITS.length; i < l; i++) {    Pair<Long,String> sizeUnit=SIZE_UNITS[i];    if (sizeInBytes >= sizeUnit.first) {      size=(float)sizeInBytes / sizeUnit.first;      suffix=sizeUnit.second;      break;    }  }  return String.format((size % 1.0f == 0) ? "%.0f %s" : "%.1f %s",size,suffix);}  }
class C{  public float influenceAtBlock(int x,int y){  float chunkX=(x + 8) / 16.0f;  float chunkY=(y + 8) / 16.0f;  float adjustedX=(this.chunkX - chunkX) * 2 + X_ADJUSTMENT;  float adjustedY=(this.chunkY - chunkY) * 2 + Y_ADJUSTMENT;  return getResult(adjustedX * adjustedX + adjustedY * adjustedY);}  }
class C{  public static void start(final String title,final MTask task){  new WTask(title,task);}  }
class C{  protected void updateStats(Instance updateInstance,boolean delete){  if (m_attStats == null) {    m_attStats=new AttributeStats[m_numAttributes];    for (int i=0; i < m_numAttributes; i++) {      m_attStats[i]=new AttributeStats();      if (m_clusterInstances.attribute(i).isNominal()) {        m_attStats[i].nominalCounts=new int[m_clusterInstances.attribute(i).numValues()];      } else {        m_attStats[i].numericStats=new Stats();      }    }  }  for (int i=0; i < m_numAttributes; i++) {    if (!updateInstance.isMissing(i)) {      double value=updateInstance.value(i);      if (m_clusterInstances.attribute(i).isNominal()) {        m_attStats[i].nominalCounts[(int)value]+=(delete) ? (-1.0 * updateInstance.weight()) : updateInstance.weight();        m_attStats[i].totalCount+=(delete) ? (-1.0 * updateInstance.weight()) : updateInstance.weight();      } else {        if (delete) {          m_attStats[i].numericStats.subtract(value,updateInstance.weight());        } else {          m_attStats[i].numericStats.add(value,updateInstance.weight());        }      }    }  }  m_totalInstances+=(delete) ? (-1.0 * updateInstance.weight()) : (updateInstance.weight());}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypeRefsPackage.BOUND_THIS_TYPE_REF__AST_STRUCTURAL_MEMBERS:    return astStructuralMembers != null && !astStructuralMembers.isEmpty();case TypeRefsPackage.BOUND_THIS_TYPE_REF__STRUCTURAL_TYPE:  return structuralType != null;case TypeRefsPackage.BOUND_THIS_TYPE_REF__GEN_STRUCTURAL_MEMBERS:return genStructuralMembers != null && !genStructuralMembers.isEmpty();case TypeRefsPackage.BOUND_THIS_TYPE_REF__POSTPONED_SUBSTITUTIONS:return postponedSubstitutions != null && !postponedSubstitutions.isEmpty();case TypeRefsPackage.BOUND_THIS_TYPE_REF__ACTUAL_THIS_TYPE_REF:return actualThisTypeRef != null;case TypeRefsPackage.BOUND_THIS_TYPE_REF__DEFINED_TYPING_STRATEGY:return definedTypingStrategy != DEFINED_TYPING_STRATEGY_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  private double[] calculateLosses(Credit[] portfolio,int horizon,int num){  double[] losses=new double[num];  for (int i=0; i < num; i++)   for (  Credit crd : portfolio) {    int remDays=Math.min(crd.getRemainingTerm(),horizon);    if (rndGen.nextDouble() >= 1 - crd.getDefaultProbability(remDays))     losses[i]+=(1 + crd.getAnnualRate() * Math.min(horizon,crd.getRemainingTerm()) / 365) * crd.getRemainingAmount(); else     losses[i]-=crd.getAnnualRate() * Math.min(horizon,crd.getRemainingTerm()) / 365 * crd.getRemainingAmount();  }  return losses;}  }
class C{  public FastUtilFloatIterator(float[] primitiveArray){  super(primitiveArray);}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  @Override public V putIfAbsent(K key,V value){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.POINT__Z:    setZ((Expression)null);  return;}super.eUnset(featureID);}  }
class C{  public IGameMove bestMove(IGameState s,IPlayer player,IPlayer opponent){  state=s.copy();  numStates++;  MoveEvaluation me=alphabeta(ply,player,opponent,MoveEvaluation.minimum(),MoveEvaluation.maximum());  return me.move;}  }
class C{  public void onResolved(HealthIssue healthIssue){synchronized (mIssuesLock) {    if (!mActiveIssues.remove(healthIssue)) {      LOG.w("Attempted to remove health issue '%1$s' that the troubleshooter was not " + "previously aware of.",healthIssue.toString());    }  }  postTroubleshootingEvents(healthIssue);}  }
class C{  private void $$$setupUI$$$(){  contentPanel=new JPanel();  contentPanel.setLayout(new GridLayoutManager(5,1,new Insets(0,0,0,0),-1,-1));  nameLabel=new JLabel();  this.$$$loadLabelText$$$(nameLabel,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CreateBranchDialog.NameLabel"));  contentPanel.add(nameLabel,new GridConstraints(0,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  remoteBranchComboBox=new JComboBox();  contentPanel.add(remoteBranchComboBox,new GridConstraints(3,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  nameTextField=new JTextField();  contentPanel.add(nameTextField,new GridConstraints(1,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,new Dimension(150,-1),null,0,false));  basedOn=new JLabel();  this.$$$loadLabelText$$$(basedOn,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CreateBranchDialog.BasedOn"));  contentPanel.add(basedOn,new GridConstraints(2,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_FIXED,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));  checkoutBranch=new JCheckBox();  checkoutBranch.setSelected(true);  this.$$$loadButtonText$$$(checkoutBranch,ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("CreateBranchDialog.CheckoutBranch"));  contentPanel.add(checkoutBranch,new GridConstraints(4,0,1,1,GridConstraints.ANCHOR_WEST,GridConstraints.FILL_NONE,GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0,false));}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets;  clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(ComputeEngineSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/ " + "into compute-engine-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(httpTransport,JSON_FACTORY,clientSecrets,SCOPES).setDataStoreFactory(dataStoreFactory).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public void disconnect(String clientHandle,String invocationContext,String activityToken){  MqttConnection client=getConnection(clientHandle);  client.disconnect(invocationContext,activityToken);  connections.remove(clientHandle);  stopSelf();}  }
class C{  private RealMatrix newIdentityMatrix(){  RealMatrix identity=MatrixUtils.createRealMatrix(dimension,dimension);  for (int i=0; i < dimension; i++) {    identity.setEntry(i,i,1.0);  }  return identity;}  }
class C{  public synchronized void close() throws SQLException {  if (this.physicalConn != null) {    this.physicalConn.close();    this.physicalConn=null;  }  if (this.connectionEventListeners != null) {    this.connectionEventListeners.clear();    this.connectionEventListeners=null;  }}  }
class C{  public boolean isAddUserClasses(){  return addUserClasses;}  }
class C{  public boolean isInvalid(){  return status == INVALID;}  }
class C{  public GeoBoundingBoxQueryBuilder bottomLeft(double lat,double lon){  box[BOTTOM]=lat;  box[LEFT]=lon;  return this;}  }
class C{  protected EnumMappingModelImpl(){  super();}  }
class C{  public void addToken(Segment segment,int start,int end,int tokenType,int startOffset){switch (tokenType) {case Token.IDENTIFIER:    int value=wordsToHighlight.get(segment,start,end);  if (value != -1)   tokenType=value;break;case Token.WHITESPACE:case Token.SEPARATOR:case Token.OPERATOR:case Token.LITERAL_NUMBER_DECIMAL_INT:case Token.LITERAL_STRING_DOUBLE_QUOTE:case Token.LITERAL_CHAR:case Token.LITERAL_BACKQUOTE:case Token.COMMENT_EOL:case Token.PREPROCESSOR:case Token.VARIABLE:break;default :new Exception("Unknown tokenType: '" + tokenType + "'").printStackTrace();tokenType=Token.IDENTIFIER;break;}super.addToken(segment,start,end,tokenType,startOffset);}  }
class C{  @Override public Iterator<WeakReference<V>> iterator(){  return map.values().iterator();}  }
class C{  public boolean isPedantic(){  return this.pedantic;}  }
class C{  public final int length(){  return array.length;}  }
class C{  public Matrix4x3d rotationXYZ(double angleX,double angleY,double angleZ){  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double m_sinX=-sinX;  double m_sinY=-sinY;  double m_sinZ=-sinZ;  double nm11=cosX;  double nm12=sinX;  double nm21=m_sinX;  double nm22=cosX;  double nm00=cosY;  double nm01=nm21 * m_sinY;  double nm02=nm22 * m_sinY;  m20=sinY;  m21=nm21 * cosY;  m22=nm22 * cosY;  m00=nm00 * cosZ;  m01=nm01 * cosZ + nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m10=nm00 * m_sinZ;  m11=nm01 * m_sinZ + nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  m30=0.0;  m31=0.0;  m32=0.0;  properties=0;  return this;}  }
class C{  @Deprecated public int _time(){  return _time;}  }
class C{  public void stop(){  Preconditions.checkNotNull(logger,"Error: Logger is already stopped");  logger.stop();  logger=null;}  }
class C{  private HolidayManager instantiateManagerImpl(String managerImplClassName){  try {    Class<?> managerImplClass=classLoadingUtil.loadClass(managerImplClassName);    Object managerImplObject=managerImplClass.newInstance();    return HolidayManager.class.cast(managerImplObject);  } catch (  Exception e) {    throw new IllegalStateException("Cannot create manager class " + managerImplClassName,e);  }}  }
class C{  public InvalidRequestException(String message,String param){  super(message);  this.param=param;}  }
class C{  public void advance(){  moveToNextIndex();}  }
class C{  public Vertex createTemplate(Vertex questionInput,Vertex responseInput,Map<Vertex,Vertex> variables,Network network){  Vertex response=responseInput.getRelationship(Primitive.INPUT);  if (response == null || (!response.instanceOf(Primitive.SENTENCE)) || !response.hasRelationship(Primitive.WORD)) {    return null;  }  log("Checking template",Level.FINER,questionInput,responseInput);  boolean isTemplate=false;  List<Vertex> templateWords=new ArrayList<Vertex>();  Vertex inputVariable=variables.get(questionInput);  Vertex speaker=questionInput.getRelationship(Primitive.SPEAKER);  if (speaker != null) {    Vertex speakerVariable=inputVariable.getRelationship(Primitive.SPEAKER);    Collection<Relationship> words=speaker.getRelationships(Primitive.WORD);    if ((words != null) && (speakerVariable != null)) {      for (      Relationship word : words) {        variables.put(word.getTarget(),speakerVariable);      }    }  }  Vertex target=questionInput.getRelationship(Primitive.TARGET);  if (target != null) {    Vertex targetVariable=inputVariable.getRelationship(Primitive.TARGET);    Collection<Relationship> words=target.getRelationships(Primitive.WORD);    if ((words != null) && (targetVariable != null)) {      for (      Relationship word : words) {        variables.put(word.getTarget(),targetVariable);      }    }  }  for (  Map.Entry<Vertex,Vertex> entry : new HashMap<Vertex,Vertex>(variables).entrySet()) {    if (!(entry.getKey() instanceof Vertex)) {      continue;    }    Vertex word=entry.getKey();    Vertex variable=entry.getValue();    if (word.instanceOf(Primitive.WORD) && variable.instanceOf(Primitive.VARIABLE)) {      Vertex meaning=variable.mostConscious(Primitive.MEANING);      if ((meaning != null) && !meaning.instanceOf(Primitive.VARIABLE)) {        variables.put(meaning,meaning);      }    }  }  for (  Vertex word : response.orderedRelations(Primitive.WORD)) {    Vertex variable=variables.get(word);    if (variable != null) {      log("Template defined",Level.FINER,questionInput,word,variable);      isTemplate=true;      templateWords.add(variable);    } else {      boolean match=false;      for (      Map.Entry<Vertex,Vertex> entry : variables.entrySet()) {        if (!(entry.getKey() instanceof Vertex)) {          continue;        }        Vertex value=entry.getKey();        variable=entry.getValue();        if (!value.instanceOf(Primitive.VARIABLE) && !value.instanceOf(Primitive.WORD) && !value.instanceOf(Primitive.SENTENCE)) {          Collection<Relationship> words=value.getRelationships(Primitive.WORD);          if (words != null) {            for (            Relationship valueWord : words) {              if (word == valueWord) {                log("Template defined",Level.FINER,questionInput,word,variable);                match=true;                isTemplate=true;                templateWords.add(variable);                break;              }            }          }          for (          Map.Entry<Vertex,Vertex> typeEntry : variables.entrySet()) {            if (!(typeEntry.getKey() instanceof Vertex)) {              continue;            }            Vertex associateType=typeEntry.getKey();            if (associateType != value && !associateType.instanceOf(Primitive.WORD) && !associateType.instanceOf(Primitive.VARIABLE) && !associateType.instanceOf(Primitive.SENTENCE)) {              Collection<Relationship> associations=value.getRelationships(associateType);              if (associations != null) {                for (                Relationship association : associations) {                  if (!association.getTarget().instanceOf(Primitive.SENTENCE)) {                    words=association.getTarget().getRelationships(Primitive.WORD);                    if (words != null) {                      for (                      Relationship valueWord : words) {                        if (word == valueWord) {                          Vertex expression=network.createInstance(Primitive.EXPRESSION);                          expression.addRelationship(Primitive.OPERATOR,Primitive.GET);                          expression.addRelationship(Primitive.ARGUMENT,variable);                          expression.addRelationship(Primitive.ARGUMENT,typeEntry.getValue());                          match=true;                          log("Template defined",Level.FINER,questionInput,word,expression);                          isTemplate=true;                          templateWords.add(expression);                          break;                        }                      }                    }                  }                  if (match) {                    break;                  }                }              }            }            if (match) {              break;            }          }        }      }      if (!match) {        for (        Map.Entry<Vertex,Vertex> entry : variables.entrySet()) {          if (!(entry.getKey() instanceof Vertex)) {            continue;          }          Vertex value=entry.getKey();          variable=entry.getValue();          if (!value.instanceOf(Primitive.VARIABLE) && !value.instanceOf(Primitive.WORD) && !value.instanceOf(Primitive.SENTENCE)) {            Iterator<Relationship> relationships=value.allRelationships();            while (relationships.hasNext()) {              Relationship relation=relationships.next();              if (!relation.isInverse() && !relation.getTarget().instanceOf(Primitive.SENTENCE)) {                Collection<Relationship> words=relation.getTarget().getRelationships(Primitive.WORD);                if (words != null) {                  for (                  Relationship valueWord : words) {                    if (word == valueWord.getTarget()) {                      Vertex expression=network.createInstance(Primitive.EXPRESSION);                      expression.addRelationship(Primitive.OPERATOR,Primitive.GET);                      expression.addRelationship(Primitive.ARGUMENT,variable);                      expression.addRelationship(Primitive.ARGUMENT,relation.getType());                      match=true;                      log("Template defined",Level.FINER,questionInput,word,expression);                      isTemplate=true;                      templateWords.add(expression);                      break;                    }                  }                }              }              if (match) {                break;              }            }          }        }      }      if (!match) {        templateWords.add(word);      }    }  }  if (isTemplate) {    Vertex template=network.createInstance(Primitive.FORMULA);    template.addRelationship(Primitive.INSTANTIATION,Primitive.SENTENCE);    template.addRelationship(Primitive.SENTENCE,response);    int index=0;    for (    Vertex word : templateWords) {      template.addRelationship(Primitive.WORD,word,index);      index++;    }    template=SelfDecompiler.getDecompiler().createUniqueTemplate(template,network);    return template;  }  log("Not a template",Level.FINER,questionInput,responseInput);  return null;}  }
class C{  public static long selectExcludingZeros(final long[] arr,final int nonZeros,final int pivot){  if (pivot > nonZeros) {    return 0L;  }  int arrSize=arr.length;  int zeros=arrSize - nonZeros;  int adjK=(pivot + zeros) - 1;  return select(arr,0,arrSize - 1,adjK);}  }
class C{  public void addTags(Set<String> tags){  for (  String s : tags) {    if (s != null && !s.isEmpty())     this.keywords.add(s);  }}  }
class C{  public WearableListConfig build(){  return new WearableListConfig(mBundle);}  }
class C{  public void init(int size,int certainty,SecureRandom random){  this.size=size;  this.certainty=certainty;  this.random=random;}  }
class C{  public SerializationHandler createSerializationHandler(Result outputTarget) throws TransformerException {  SerializationHandler xoh=createSerializationHandler(outputTarget,getOutputFormat());  return xoh;}  }
class C{  public BluetoothLEPeerNetwork(BluetoothDevice bluetoothDevice){  this.mBluetoothLEDevice=bluetoothDevice;}  }
class C{  public static void main(String[] args){  JFrame frame=new JFrame(OptionPaneDemo.class.getAnnotation(DemoProperties.class).value());  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().add(new OptionPaneDemo());  frame.setPreferredSize(new Dimension(800,600));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  protected static boolean contains(String value,int start,int length,String[] criteria){  boolean result=false;  if (start >= 0 && start + length <= value.length()) {    String target=value.substring(start,start + length);    for (int i=0; i < criteria.length; i++) {      if (target.equals(criteria[i])) {        result=true;        break;      }    }  }  return result;}  }
class C{  private void root(Annotation label){  if (label != null) {    Root value=(Root)label;    String real=type.getSimpleName();    String text=real;    if (value != null) {      text=value.name();      if (isEmpty(text)) {        text=Reflector.getName(real);      }      strict=value.strict();      root=value;      name=text;    }  }}  }
class C{  public Boolean isEvacuatePoweredOffVms(){  return evacuatePoweredOffVms;}  }
class C{  public static Vec4 fromArray3(double[] array,int offset){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  return fromDoubleArray(array,offset,3);}  }
class C{  public static String validateCreditCardExp(String mmyy){  String exp=checkNumeric(mmyy);  if (exp.length() != 4)   return "CreditCardExpFormat";  String mmStr=exp.substring(0,2);  String yyStr=exp.substring(2,4);  int mm=0;  int yy=0;  try {    mm=Integer.parseInt(mmStr);    yy=Integer.parseInt(yyStr);  } catch (  Exception e) {    return "CreditCardExpFormat";  }  return validateCreditCardExp(mm,yy);}  }
class C{  public EmbeddedServletOptions(ServletConfig config,ServletContext context){  try {    if (Float.parseFloat(System.getProperty("java.specification.version")) > 1.4) {      compilerSourceVM=compilerTargetVM="1.5";    } else {      compilerSourceVM=compilerTargetVM="1.4";    }  } catch (  NumberFormatException e) {  }  Enumeration enumeration=config.getInitParameterNames();  while (enumeration.hasMoreElements()) {    String k=(String)enumeration.nextElement();    String v=config.getInitParameter(k);    setProperty(k,v);  }  String validating=config.getInitParameter("validating");  if ("true".equals(validating)) {    isValidationEnabled=true;  }  validating=config.getInitParameter("enableTldValidation");  if ("true".equals(validating)) {    isValidationEnabled=true;  }  keepGenerated=getBoolean(config,!isJDK6(),"keepgenerated");  saveBytecode=getBoolean(config,saveBytecode,"saveBytecode");  trimSpaces=getBoolean(config,trimSpaces,"trimSpaces");  isPoolingEnabled=getBoolean(config,isPoolingEnabled,"enablePooling");  mappedFile=getBoolean(config,mappedFile,"mappedfile");  sendErrorToClient=getBoolean(config,sendErrorToClient,"sendErrToClient");  classDebugInfo=getBoolean(config,classDebugInfo,"classdebuginfo");  development=getBoolean(config,development,"development");  isSmapSuppressed=getBoolean(config,isSmapSuppressed,"suppressSmap");  isSmapDumped=getBoolean(config,isSmapDumped,"dumpSmap");  genStringAsCharArray=getBoolean(config,genStringAsCharArray,"genStrAsCharArray");  genStringAsByteArray=getBoolean(config,genStringAsByteArray,"genStrAsByteArray");  defaultBufferNone=getBoolean(config,defaultBufferNone,"defaultBufferNone");  errorOnUseBeanInvalidClassAttribute=getBoolean(config,errorOnUseBeanInvalidClassAttribute,"errorOnUseBeanInvalidClassAttribute");  fork=getBoolean(config,fork,"fork");  xpoweredBy=getBoolean(config,xpoweredBy,"xpoweredBy");  String checkIntervalStr=config.getInitParameter("checkInterval");  if (checkIntervalStr != null) {    parseCheckInterval(checkIntervalStr);  }  String modificationTestIntervalStr=config.getInitParameter("modificationTestInterval");  if (modificationTestIntervalStr != null) {    parseModificationTestInterval(modificationTestIntervalStr);  }  String ieClassId=config.getInitParameter("ieClassId");  if (ieClassId != null)   this.ieClassId=ieClassId;  String classpath=config.getInitParameter("classpath");  if (classpath != null)   this.classpath=classpath;  String sysClassPath=config.getInitParameter("com.sun.appserv.jsp.classpath");  if (sysClassPath != null)   this.sysClassPath=sysClassPath;  String dir=config.getInitParameter("scratchdir");  if (dir != null) {    scratchDir=new File(dir);  } else {    scratchDir=(File)context.getAttribute(Constants.TMP_DIR);    if (scratchDir == null) {      dir=System.getProperty("java.io.tmpdir");      if (dir != null)       scratchDir=new File(dir);    }  }  if (this.scratchDir == null) {    log.severe(Localizer.getMessage("jsp.error.no.scratch.dir"));    return;  }  if (scratchDir.exists() && !(scratchDir.canRead() && scratchDir.canWrite() && scratchDir.isDirectory()))   log.severe(Localizer.getMessage("jsp.error.bad.scratch.dir",scratchDir.getAbsolutePath()));  this.compiler=config.getInitParameter("compiler");  String compilerTargetVM=config.getInitParameter("compilerTargetVM");  if (compilerTargetVM != null) {    this.compilerTargetVM=compilerTargetVM;  }  String compilerSourceVM=config.getInitParameter("compilerSourceVM");  if (compilerSourceVM != null) {    this.compilerSourceVM=compilerSourceVM;  }  String javaEncoding=config.getInitParameter("javaEncoding");  if (javaEncoding != null) {    this.javaEncoding=javaEncoding;  }  String reloadIntervalString=config.getInitParameter("reload-interval");  if (reloadIntervalString != null) {    int reloadInterval=0;    try {      reloadInterval=Integer.parseInt(reloadIntervalString);    } catch (    NumberFormatException e) {      if (log.isLoggable(Level.WARNING)) {        log.warning(Localizer.getMessage("jsp.warning.reloadInterval"));      }    }    if (reloadInterval == -1) {      this.development=false;      this.checkInterval=0;    } else {      parseCheckInterval(reloadIntervalString);      parseModificationTestInterval(reloadIntervalString);    }  }  String usePrecompiled=config.getInitParameter("usePrecompiled");  if (usePrecompiled == null) {    usePrecompiled=config.getInitParameter("use-precompiled");  }  if (usePrecompiled != null) {    if (usePrecompiled.equalsIgnoreCase("true")) {      this.usePrecompiled=true;    } else     if (usePrecompiled.equalsIgnoreCase("false")) {      this.usePrecompiled=false;    } else {      if (log.isLoggable(Level.WARNING)) {        log.warning(Localizer.getMessage("jsp.warning.usePrecompiled"));      }    }  }  String capacity=config.getInitParameter("initialCapacity");  if (capacity == null) {    capacity=config.getInitParameter("initial-capacity");  }  if (capacity != null) {    try {      initialCapacity=Integer.parseInt(capacity);      int value=Constants.DEFAULT_INITIAL_CAPACITY;      while (value < initialCapacity) {        value*=2;      }      initialCapacity=value;    } catch (    NumberFormatException nfe) {      if (log.isLoggable(Level.WARNING)) {        String msg=Localizer.getMessage("jsp.warning.initialcapacity");        msg=MessageFormat.format(msg,new Object[]{capacity,Integer.valueOf(Constants.DEFAULT_INITIAL_CAPACITY)});        log.warning(msg);      }    }  }  String jspCompilerPlugin=config.getInitParameter("javaCompilerPlugin");  if (jspCompilerPlugin != null) {    if ("org.apache.jasper.compiler.JikesJavaCompiler".equals(jspCompilerPlugin)) {      this.compiler="jikes";    } else     if ("org.apache.jasper.compiler.SunJava14Compiler".equals(jspCompilerPlugin)) {    } else {      if (log.isLoggable(Level.WARNING)) {        String msg=Localizer.getMessage("jsp.warning.unsupportedJavaCompiler");        msg=MessageFormat.format(msg,new Object[]{jspCompilerPlugin});        log.warning(msg);      }    }  }  tldScanner=new TldScanner(context,isValidationEnabled);  jspConfig=new JspConfig(context);  tagPluginManager=new TagPluginManager(context);}  }
class C{  public String type(Properties ctx,int WindowNo,GridTab mTab,GridField mField,Object value){  String colName=mField.getColumnName();  log.info(colName + "=" + value);  mTab.setValue("R_Status_ID",null);  if (value == null)   return "";  int R_RequestType_ID=((Integer)value).intValue();  if (R_RequestType_ID == 0)   return "";  MRequestType rt=MRequestType.get(ctx,R_RequestType_ID);  int R_Status_ID=rt.getDefaultR_Status_ID();  if (R_Status_ID != 0)   mTab.setValue("R_Status_ID",new Integer(R_Status_ID));  return "";}  }
class C{  public NonUniqueBusinessKeyException(ClassEnum classEnum,String businessKey){  super(generateMessage(classEnum,businessKey),classEnum,businessKey);}  }
class C{  public final int hashCode(){  if (toString() == null) {    return 0;  }  return toString().hashCode();}  }
class C{  public CUdevprop(){}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public VersionException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  public void remove(int childIndex){  TreeStateNode node=(TreeStateNode)getChildAt(childIndex);  node.removeFromMapping();  super.remove(childIndex);}  }
class C{  public void firePan(int direction){  firePan(direction,1f);}  }
class C{  public String toString(int radix){  final char[] HEX_CHARS={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  final String[] BIN_CHARS={"0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"};  String res;  int i;  res=new String();  if (radix == 16) {    for (i=blocks - 1; i >= 0; i--) {      res+=HEX_CHARS[(value[i] >>> 28) & 0x0f];      res+=HEX_CHARS[(value[i] >>> 24) & 0x0f];      res+=HEX_CHARS[(value[i] >>> 20) & 0x0f];      res+=HEX_CHARS[(value[i] >>> 16) & 0x0f];      res+=HEX_CHARS[(value[i] >>> 12) & 0x0f];      res+=HEX_CHARS[(value[i] >>> 8) & 0x0f];      res+=HEX_CHARS[(value[i] >>> 4) & 0x0f];      res+=HEX_CHARS[(value[i]) & 0x0f];      res+=" ";    }  } else {    for (i=blocks - 1; i >= 0; i--) {      res+=BIN_CHARS[(value[i] >>> 28) & 0x0f];      res+=BIN_CHARS[(value[i] >>> 24) & 0x0f];      res+=BIN_CHARS[(value[i] >>> 20) & 0x0f];      res+=BIN_CHARS[(value[i] >>> 16) & 0x0f];      res+=BIN_CHARS[(value[i] >>> 12) & 0x0f];      res+=BIN_CHARS[(value[i] >>> 8) & 0x0f];      res+=BIN_CHARS[(value[i] >>> 4) & 0x0f];      res+=BIN_CHARS[(value[i]) & 0x0f];      res+=" ";    }  }  return res;}  }
class C{  public Builder withTcpKeepAlive(boolean tcpKeepAlive){  properties.setProperty(NettyOptions.TCP_KEEP_ALIVE,String.valueOf(tcpKeepAlive));  return this;}  }
class C{  public static short toShortAccessValue(String accessValue,short defaultValue){  accessValue=accessValue.trim().toLowerCase();  if (accessValue.equals("no"))   return VALUE_NO; else   if (accessValue.equals("yes"))   return VALUE_YES; else   if (accessValue.equals("all"))   return VALUE_ALL; else   if (accessValue.equals("local"))   return VALUE_LOCAL; else   if (accessValue.equals("none"))   return VALUE_NONE; else   if (accessValue.equals("1"))   return VALUE_1; else   if (accessValue.equals("2"))   return VALUE_2; else   if (accessValue.equals("3"))   return VALUE_3; else   if (accessValue.equals("4"))   return VALUE_4; else   if (accessValue.equals("5"))   return VALUE_5; else   if (accessValue.equals("6"))   return VALUE_6; else   if (accessValue.equals("7"))   return VALUE_7; else   if (accessValue.equals("8"))   return VALUE_8; else   if (accessValue.equals("9"))   return VALUE_9; else   if (accessValue.equals("10"))   return VALUE_10; else   if (accessValue.equals("0"))   return VALUE_NO; else   if (accessValue.equals("-1"))   return VALUE_YES; else   return defaultValue;}  }
class C{  public void icbi(){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  sb.append(Utils.padLeft("Type",4)).append(Utils.padLeft("Nom",5));  sb.append(Utils.padLeft("Int",5)).append(Utils.padLeft("Real",5));  sb.append(Utils.padLeft("Missing",12));  sb.append(Utils.padLeft("Unique",12));  sb.append(Utils.padLeft("Dist",6));  if (nominalCounts != null) {    sb.append(' ');    for (int i=0; i < nominalCounts.length; i++) {      sb.append(Utils.padLeft("C[" + i + "]",5));    }  }  sb.append('\n');  long percent;  percent=Math.round(100.0 * intCount / totalCount);  if (nominalCounts != null) {    sb.append(Utils.padLeft("Nom",4)).append(' ');    sb.append(Utils.padLeft("" + percent,3)).append("% ");    sb.append(Utils.padLeft("" + 0,3)).append("% ");  } else {    sb.append(Utils.padLeft("Num",4)).append(' ');    sb.append(Utils.padLeft("" + 0,3)).append("% ");    sb.append(Utils.padLeft("" + percent,3)).append("% ");  }  percent=Math.round(100.0 * realCount / totalCount);  sb.append(Utils.padLeft("" + percent,3)).append("% ");  sb.append(Utils.padLeft("" + missingCount,5)).append(" /");  percent=Math.round(100.0 * missingCount / totalCount);  sb.append(Utils.padLeft("" + percent,3)).append("% ");  sb.append(Utils.padLeft("" + uniqueCount,5)).append(" /");  percent=Math.round(100.0 * uniqueCount / totalCount);  sb.append(Utils.padLeft("" + percent,3)).append("% ");  sb.append(Utils.padLeft("" + distinctCount,5)).append(' ');  if (nominalCounts != null) {    for (int i=0; i < nominalCounts.length; i++) {      sb.append(Utils.padLeft("" + nominalCounts[i],5));    }  }  sb.append('\n');  return sb.toString();}  }
class C{  private static double snapScale(double scaleRaw){  double scale=snapScaleToSingleDigitPrecision(scaleRaw);  return scale;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static String u8(long v){  char[] result=new char[16];  for (int i=0; i < 16; i++) {    result[15 - i]=Character.forDigit((int)v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public static String u8(long v){  char[] result=new char[16];  for (int i=0; i < 16; i++) {    result[15 - i]=Character.forDigit((int)v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public Throwable thrownException(){  return fThrownException;}  }
class C{  public SdfId(long id){  mSdfUuid=new UUID(0,0);  mSdfId=id;  mHasUuid=false;  mLongHash=Long.valueOf(mSdfId).hashCode();}  }
class C{  public HotspotPeerNetwork(){}  }
class C{  public void switchCamera() throws Exception {  if (session != null) {    getPreview(session.getDescriptor()).setVisibility(View.INVISIBLE);    switchPending=true;    stop();  }}  }
class C{  public void unsetKeepAliveForConnection(StorageSystem storageSystem){  _connectionManager.unpinConnection(storageSystem.getSmisProviderIP(),storageSystem.getSmisPortNumber());}  }
class C{  public static double nextDouble(double value,boolean increment){  return increment ? nextDouble(value) : previousDouble(value);}  }
class C{  public static InExpression notIn(String property,Object... values){  return new InExpression(getPropExpr(property),true,values);}  }
class C{  public E remove(){  return removeFirst();}  }
class C{  public List<PoiType> loadPoiTypesByDefault(){  InputStreamReader reader=null;  try {    reader=new InputStreamReader(application.getAssets().open("h2geo.json"));    return loadPoiTypesFromStream(reader);  } catch (  Exception e) {    Timber.e(e,"Error while loading POI Types from assets");    throw new RuntimeException(e);  } finally {    CloseableUtils.closeQuietly(reader);  }}  }
class C{  public HttpClient(URL url,Map<String,Object> parameters){  this.url=url.toExternalForm();  this.parameters=parameters;}  }
class C{  protected final void storeState(){  storedLikelihoodKnown=likelihoodKnown;  storedLogLikelihood=logLikelihood;}  }
class C{  public void testPortInUseAndDontContinue() throws CoreException, InterruptedException, ExecutionException, TimeoutException, IOException {  assertFalse(checkPortConflictUI("No"));}  }
class C{  final public void print(String s){  Writer out=this.out;  if (out == null)   return;  try {    if (s == null)     out.write(_nullChars,0,_nullChars.length); else     out.write(s,0,s.length());  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public LabelBlock(String text,Font font){  this(text,font,DEFAULT_PAINT);}  }
class C{  public void testEquals() throws Exception {  XorOnlyAttribute xor2=new XorOnlyAttribute();  assertEquals("equals() failes for XorOnly",xorOnly,xor2);  MappedAddressAttribute maatt=new MappedAddressAttribute();  maatt.decodeAttributeBody(msgFixture.mappedAddress,(char)0,(char)msgFixture.mappedAddress.length);  assertFalse("equals failed to see a difference",xorOnly.equals(maatt));  assertFalse("equals failed for null",xorOnly.equals(null));}  }
class C{  public void actionPerformed(ActionEvent e){  JEditorPane editor=getEditor(e);  if (editor != null) {    int a=this.a;    if ((e != null) && (e.getSource() == editor)) {      String s=e.getActionCommand();      try {        a=Integer.parseInt(s,10);      } catch (      NumberFormatException nfe) {      }    }    MutableAttributeSet attr=new SimpleAttributeSet();    StyleConstants.setAlignment(attr,a);    setParagraphAttributes(editor,attr,false);  }}  }
class C{  @Override public boolean load(final Player player,final List<String> args){  groovyBinding.setVariable("player",player);  if (args != null) {    groovyBinding.setVariable("args",args.toArray(new String[args.size()]));  } else {    groovyBinding.setVariable("args",new String[0]);  }  final GroovyShell interp=new GroovyShell(groovyBinding);  boolean ret=true;  preExecute(player,args);  try {    final File f=new File(groovyScript);    interp.evaluate(f);  } catch (  final Exception e) {    logger.error("Exception while sourcing file " + groovyScript,e);    setMessage(e.getMessage());    ret=false;  }catch (  final Error e) {    logger.error("Exception while sourcing file " + groovyScript,e);    setMessage(e.getMessage());    ret=false;  }  postExecute(player,args,ret);  return (ret);}  }
class C{  protected final void requestDeferred(){  long r=REQUESTED.getAndSet(this,0L);  if (r != 0L) {    s.request(r);  }}  }
class C{  public DellSCProvisioning(){  this.connectionManager=DellSCConnectionManager.getInstance();  this.util=DellSCUtil.getInstance();}  }
class C{  public NotificationChain basicSetTypeRef(TypeRef newTypeRef,NotificationChain msgs){  TypeRef oldTypeRef=typeRef;  typeRef=newTypeRef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,TypesPackage.TFORMAL_PARAMETER__TYPE_REF,oldTypeRef,newTypeRef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  private void addIntersectionNodes(Iterator<?> nodeIterator,GeomVectorField intersections){  GeometryFactory fact=new GeometryFactory();  Coordinate coord=null;  Point point=null;  int counter=0;  while (nodeIterator.hasNext()) {    Node node=(Node)nodeIterator.next();    coord=node.getCoordinate();    point=fact.createPoint(coord);    junctions.addGeometry(new MasonGeometry(point));    counter++;  }}  }
class C{  public byte[] toByteArray(){  if (this.sign == 0) {    return new byte[]{0};  }  TBigInteger temp=this;  int bitLen=bitLength();  int iThis=getFirstNonzeroDigit();  int bytesLen=(bitLen >> 3) + 1;  byte[] bytes=new byte[bytesLen];  int firstByteNumber=0;  int highBytes;  int digitIndex=0;  int bytesInInteger=4;  int digit;  int hB;  if (bytesLen - (numberLength << 2) == 1) {    bytes[0]=(byte)((sign < 0) ? -1 : 0);    highBytes=4;    firstByteNumber++;  } else {    hB=bytesLen & 3;    highBytes=(hB == 0) ? 4 : hB;  }  digitIndex=iThis;  bytesLen-=iThis << 2;  if (sign < 0) {    digit=-temp.digits[digitIndex];    digitIndex++;    if (digitIndex == numberLength) {      bytesInInteger=highBytes;    }    for (int i=0; i < bytesInInteger; i++, digit>>=8) {      bytes[--bytesLen]=(byte)digit;    }    while (bytesLen > firstByteNumber) {      digit=~temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  } else {    while (bytesLen > firstByteNumber) {      digit=temp.digits[digitIndex];      digitIndex++;      if (digitIndex == numberLength) {        bytesInInteger=highBytes;      }      for (int i=0; i < bytesInInteger; i++, digit>>=8) {        bytes[--bytesLen]=(byte)digit;      }    }  }  return bytes;}  }
class C{  public void connect(View view){  EditText text=(EditText)findViewById(R.id.userText);  String user=text.getText().toString().trim();  text=(EditText)findViewById(R.id.passwordText);  String password=text.getText().toString().trim();  UserConfig config=new UserConfig();  config.user=user;  config.password=password;  HttpConnectAction action=new HttpConnectAction(this,config,true);  action.execute();}  }
class C{  public void force(){  try {    Method method=MappedByteBuffer.class.getDeclaredMethod("force0",FileDescriptor.class,long.class,long.class);    method.setAccessible(true);    method.invoke(dummyMbbInstance_,randomAccessFile_.getFD(),nativeRawStartAddress_,capacityBytes_);  } catch (  Exception e) {    throw new RuntimeException(String.format("Encountered %s exception in force",e.getClass()));  }}  }
class C{  public void testConfigureSetsWebappsDirectory() throws Exception {  configuration.setProperty(TomcatPropertySet.WEBAPPS_DIRECTORY,"some_directory");  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/conf/server.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo("some_directory","//Host/@appBase",config);}  }
class C{  public static byte[] remove(byte[] buffer,int offset,int length){  int len2=buffer.length - length;  byte temp[]=new byte[len2];  System.arraycopy(buffer,0,temp,0,offset);  System.arraycopy(buffer,offset + length,temp,offset,len2 - offset);  return temp;}  }
class C{  private void addToMapIfNotExist(Map<String,UserAttributeParam> userAttributeParamMap,Map.Entry<String,UserAttributeParam> addAttribute){  if (CollectionUtils.isEmpty(userAttributeParamMap)) {    _log.info("Invalid map to add the entries");    return;  }  UserAttributeParam userAttributeParam=userAttributeParamMap.get(addAttribute.getKey());  if (userAttributeParam == null) {    userAttributeParamMap.put(addAttribute.getKey(),addAttribute.getValue());  } else {    userAttributeParam.setValues(addAttribute.getValue().getValues());  }}  }
class C{  public CharClassException(){}  }
class C{  public void addToFilters(Filter filter){  if (filters == null) {    filters=new HashMap();  }  filters.put(filter.getName(),filter);}  }
class C{  public void rollback() throws QueryException {  cmdPrologue();  lock.lock();  try {    if (inTransaction()) {      executeQuery("ROLLBACK");    }  } catch (  Exception e) {  } finally {    lock.unlock();  }}  }
class C{  public ASCIIKeyBuilderFactory(){}  }
class C{  protected Solution findSolutionWithMinimumDistance(List<Solution> solutions,double[] weight){  double minDistance=Double.POSITIVE_INFINITY;  Solution minSolution=null;  for (int i=0; i < solutions.size(); i++) {    double[] objectives=(double[])solutions.get(i).getAttribute(NORMALIZED_OBJECTIVES);    double distance=pointLineDistance(weight,objectives);    if (distance < minDistance) {      minDistance=distance;      minSolution=solutions.get(i);    }  }  return minSolution;}  }
class C{  @Override public int hashCode(){  int hc=13 * sort;  if (sort >= ARRAY) {    for (int i=off, end=i + len; i < end; i++) {      hc=17 * (hc + buf[i]);    }  }  return hc;}  }
class C{  public static Item constructElectricEnergyStorageItem(String aUnlocalized,String aEnglish,int aCharge,int aTransfer,int aTier,int aEmptyID,int aFullID){  try {    return (Item)Class.forName("gregtechmod.api.items.GT_EnergyStoreIC_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aCharge,aTransfer,aTier,aEmptyID,aFullID);  } catch (  Throwable e) {  }  try {    return (Item)Class.forName("gregtechmod.api.items.GT_EnergyStore_Item").getConstructors()[0].newInstance(aUnlocalized,aEnglish,aCharge,aTransfer,aTier,aEmptyID,aFullID);  } catch (  Throwable e) {  }  return new gregtech.api.items.GT_Generic_Item(aUnlocalized,aEnglish,"Doesn't work as intended, this is a Bug",false);}  }
class C{  public BinaryFile(File f) throws IOException {  inputReader=new FileInputReader(f);  classCount++;  openCount++;}  }
class C{  public void testIds() throws Exception {  Directory d=newDirectory();  IndexWriter w=new IndexWriter(d,newIndexWriterConfig(new MockAnalyzer(random())));  w.addDocument(new Document());  w.close();  SegmentInfos sis=SegmentInfos.readLatestCommit(d);  byte[] id1=sis.getId();  assertNotNull(id1);  assertEquals(StringHelper.ID_LENGTH,id1.length);  byte[] id2=sis.info(0).info.getId();  assertNotNull(id2);  assertEquals(StringHelper.ID_LENGTH,id2.length);  ByteArrayOutputStream bos=new ByteArrayOutputStream(1024);  CheckIndex checker=new CheckIndex(d);  checker.setCrossCheckTermVectors(false);  checker.setInfoStream(new PrintStream(bos,false,IOUtils.UTF_8),false);  CheckIndex.Status indexStatus=checker.checkIndex(null);  String s=bos.toString(IOUtils.UTF_8);  checker.close();  assertTrue(s,indexStatus != null && indexStatus.clean);  assertTrue("missing id=" + StringHelper.idToString(id1) + " in:\n"+ s,s.contains("id=" + StringHelper.idToString(id1)));  assertTrue("missing id=" + StringHelper.idToString(id1) + " in:\n"+ s,s.contains("id=" + StringHelper.idToString(id1)));  d.close();  Set<String> ids=new HashSet<>();  for (int i=0; i < 100000; i++) {    String id=StringHelper.idToString(StringHelper.randomId());    assertFalse("id=" + id + " i="+ i,ids.contains(id));    ids.add(id);  }}  }
class C{  public void flush(){  buffer.flushLocal();}  }
class C{  public synchronized void remove(Object listener){  if (listener == null)   throw new IllegalArgumentException();  int oldSize=listeners.length;  for (int i=0; i < oldSize; ++i) {    Object listener2=listeners[i];    if (identity ? listener == listener2 : listener.equals(listener2)) {      if (oldSize == 1) {        listeners=EmptyArray;      } else {        Object[] newListeners=new Object[oldSize - 1];        System.arraycopy(listeners,0,newListeners,0,i);        System.arraycopy(listeners,i + 1,newListeners,i,oldSize - i - 1);        this.listeners=newListeners;      }      return;    }  }}  }
class C{  private void onTrigger4FocusLost(){  final CharSequence targetName=mAppsAdapter.getLabel(TARGET_POSITION);  addInstruction(R.string.accessibility_tutorial_lesson_1_text_5_exited,true,targetName);  mAllApps.setAccessibilityDelegate(mTargetIconFocusDelegate);}  }
class C{  public void close() throws IOException {  DatagramSocket s=_s;  _s=null;  OutputStream os=_os;  _os=null;  InputStream is=_is;  _is=null;  try {    if (os != null)     os.close();    if (is != null)     is.close();  }  finally {    if (s != null)     s.close();  }}  }
class C{  @Override public void writeVertex(final OutputStream outputStream,final Vertex v) throws IOException {  throw Io.Exceptions.writerFormatIsForFullGraphSerializationOnly(this.getClass());}  }
class C{  protected void deleteExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  ActionErrors errors=null;  FormatoFichasForm formatoFichasForm=(FormatoFichasForm)form;  if ((errors=validateFormParaEliminarFormatoFicha(formatoFichasForm)) == null) {    String idFormatosABorrar[]=formatoFichasForm.getFormatosABorrar();    GestionDescripcionBI descripcionService=getGestionDescripcionBI(request);    descripcionService.deleteFormatos(idFormatosABorrar);  } else {    ErrorsTag.saveErrors(request,errors);  }  goLastClientExecuteLogic(mapping,form,request,response);}  }
class C{  void readSlot(int position,int[] buffer){{    position*=slotsize;    int chunkpos=position >> lowbits;    int slotpos=(position & lowmask);    if (chunkpos > chunks.size() - 1)     chunks.addElement(new int[chunkalloc]);    int[] chunk=chunks.elementAt(chunkpos);    System.arraycopy(chunk,slotpos,buffer,0,slotsize);  }}  }
class C{  public long value(){  return val;}  }
class C{  @Override protected void writeNdefSuccess(){  toast(getString(R.string.ndefWriteSuccess));}  }
class C{  private void writeJournal(ParcelFileDescriptor newState,Journal journal){  try {    FileOutputStream outStream=new FileOutputStream(newState.getFileDescriptor());    final byte[] journalBytes=writeCheckedBytes(journal);    outStream.write(journalBytes);    if (VERBOSE)     Log.v(TAG,"wrote " + journalBytes.length + " bytes of journal");  } catch (  IOException e) {    Log.w(TAG,"failed to write backup journal",e);  }}  }
class C{  public SettingEvent(EventType type,Setting setting){  if (type == null) {    throw new NullPointerException("EventType is null");  }  if (setting == null) {    throw new NullPointerException("Setting is null");  }  this.type=type;  this.setting=setting;}  }
class C{  @Override public void onAction(final ActionType at){  if (at == null) {    super.onAction(null);    return;  }switch (at) {case SET_OUTFIT:    j2DClient.get().chooseOutfit();  break;case WALK_START:case WALK_STOP:case WHERE:case LEAVE_SHEEP:case LEAVE_PET:at.send(at.fillTargetInfo(entity));break;default :super.onAction(at);break;}}  }
class C{  public GuardExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  static String removeWSandReplace(String str,String symbol,String replace){  StringBuilder sb=new StringBuilder();  int i=0;  int l=0;  int k;  for (int j=0; (k=str.indexOf(symbol,j)) >= 0; j=k + 1) {    l+=countQuotes(str,j,k);    if ((k > 0) && (str.charAt(k - 1) != '\\') && (l % 2) == 0) {      sb.append(trim(str.substring(i,k)) + replace);      i=k + 1;      l=0;    }  }  sb.append(trim(str.substring(i)));  return sb.toString();}  }
class C{  public Text replace(CharSet charSet,java.lang.CharSequence replacement){  if (_data != null) {    int i=indexOfAny(charSet);    return (i < 0) ? this : subtext(0,i).concat(Text.valueOf(replacement)).concat(subtext(i + 1).replace(charSet,replacement));  } else {    return _head.replace(charSet,replacement).concat(_tail.replace(charSet,replacement));  }}  }
class C{  public synchronized void resume(){  if (!_isRunning || !_isPaused) {    return;  }  s_logger.info("Resuming Listener.");  _isPaused=false;  while (!_queue.isEmpty()) {    CimQueuedIndication element=_queue.remove();    String url=element.getURL();    CIMInstance indication=element.getIndication();    indicationOccured(url,indication,true);  }}  }
class C{  private void ok(){  Filter filter=null;  try {    filter=filterEditor.createFilter();  } catch (  FilterEditorException e) {    JOptionPane.showInternalMessageDialog(this,"Cannot create filter",e.getMessage(),JOptionPane.ERROR_MESSAGE);    filters.requestFocus();  }  sensor.setFilter(filter);  setVisible(false);}  }
class C{  public static Phrasal loadDecoder(Map<String,List<String>> config){  return loadDecoder(config,null);}  }
class C{  @SuppressWarnings("unused") @Test public void testSourceSiblingEnterExclusion(){  Statechart sc=_createStatechart("sc");{    InterfaceScope s_scope=_createInterfaceScope("Interface",sc);    VariableDefinition v1=_createVariableDefinition("v1",TYPE_INTEGER,s_scope);    Region r=_createRegion("r",sc);{      Entry r_entry=_createEntry(EntryKind.INITIAL,null,r);      State s1=_createState("s1",r);{        Region r2=_createRegion("r2",s1);{          Entry r2_entry=_createEntry(EntryKind.INITIAL,null,r2);          State s2=_createState("s2",r2);          _createTransition(r2_entry,s2);        }        Region r3=_createRegion("r3",s1);{          Entry r3_entry=_createEntry(EntryKind.INITIAL,null,r3);          State s3=_createState("s3",r3);{            Region r3a=_createRegion("r3a",s3);{              Entry r3a_entry=_createEntry(EntryKind.INITIAL,null,r3a);              State s3a=_createState("s3a",r3a);              _createTransition(r3a_entry,s3a);            }            Region r3b=_createRegion("r3b",s3);{              Entry r3b_entry=_createEntry(EntryKind.INITIAL,null,r3b);              State s3b=_createState("s3b",r3b);              State s3b2=_createState("s3b2",r3b);              _createTransition(r3b_entry,s3b);            }            Region r3c=_createRegion("r3c",s3);{              Entry r3c_entry=_createEntry(EntryKind.INITIAL,null,r3c);              State s3c=_createState("s3c",r3c);              _createTransition(r3c_entry,s3c);            }          }          State s3z=_createState("s3z",r3);          _createEntryAssignment(v1,s3,42);          _createTransition(r3_entry,s3);        }        Region r4=_createRegion("r4",s1);{          Entry r4_entry=_createEntry(EntryKind.INITIAL,null,r4);          State s4=_createState("s4",r4);          _createTransition(r4_entry,s4);        }      }      _createTransition(r_entry,s1);      State s5=_createState("s5",r);      _createTransition(findState(sc,"s3z"),findState(sc,"s3b2"));    }  }  ExecutionFlow flow=sequencer.transform(sc);  ExecutionState _s2=flow.getStates().get(1);  assertEquals("sc.r.s1.r2.s2",_s2.getName());  ExecutionState _s3=flow.getStates().get(2);  assertEquals("sc.r.s1.r3.s3",_s3.getName());  ExecutionState _s3a=flow.getStates().get(3);  assertEquals("sc.r.s1.r3.s3.r3a.s3a",_s3a.getName());  ExecutionState _s3b=flow.getStates().get(4);  assertEquals("sc.r.s1.r3.s3.r3b.s3b",_s3b.getName());  ExecutionState _s3b2=flow.getStates().get(5);  assertEquals("sc.r.s1.r3.s3.r3b.s3b2",_s3b2.getName());  ExecutionState _s3c=flow.getStates().get(6);  assertEquals("sc.r.s1.r3.s3.r3c.s3c",_s3c.getName());  ExecutionState _s3z=flow.getStates().get(7);  assertEquals("sc.r.s1.r3.s3z",_s3z.getName());  ExecutionState _s4=flow.getStates().get(8);  assertEquals("sc.r.s1.r4.s4",_s4.getName());  ExecutionState _s5=flow.getStates().get(9);  assertEquals("sc.r.s5",_s5.getName());  Reaction _t=_s3z.getReactions().get(0);  assertTrue(_t.isTransition());  Sequence _effect=(Sequence)_t.getEffect();  assertEquals("wrong sequence: " + stepListAsString(_effect),5,_effect.getSteps().size());  assertCall(_effect,0,_s3z.getExitSequence());  assertCall(_effect,1,_s3.getEntryAction());  assertCall(_effect,2,_s3a.getSuperScope().getEnterSequences().get(0));  Sequence r3a_entryReactSequence=flow.getNodes().get(3).getReactSequence();  assertCall(_s3a.getSuperScope().getEnterSequences().get(0),0,r3a_entryReactSequence);  assertCall(((Sequence)firstStep(firstStep(r3a_entryReactSequence))),0,_s3a.getEnterSequences().get(0));  assertCall(_effect,3,_s3b2.getEnterSequences().get(0));  assertCall(_effect,4,_s3c.getSuperScope().getEnterSequences().get(0));  Sequence r3c_entryReactSequence=flow.getNodes().get(5).getReactSequence();  assertCall(_s3c.getSuperScope().getEnterSequences().get(0),0,r3c_entryReactSequence);  assertCall(((Sequence)firstStep(firstStep(r3c_entryReactSequence))),0,_s3c.getEnterSequences().get(0));  assertTrue(_s3c.getEnterSequences().get(0).getSteps().get(0).getClass().getSimpleName(),_s3c.getEnterSequences().get(0).getSteps().get(0) instanceof EnterState);}  }
class C{  static public int floorPositive(float x){  return (int)x;}  }
class C{  public long create_chunk_offset_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  chunks=new Vector<Long>();  entryCount=(int)bitstream.readBytes(4);  readed+=4;  for (int i=0; i < entryCount; i++) {    long chunkOffset=bitstream.readBytes(4);    chunks.addElement(Long.valueOf(chunkOffset));    readed+=4;  }  return readed;}  }
class C{  public Reference<? extends T> poll(){  if (head == null)   return null;synchronized (lock) {    return reallyPoll();  }}  }
class C{  private void showFeedback(String feedback){  if (myHost != null) {    myHost.showFeedback(feedback);  } else {    System.out.println(feedback);  }}  }
class C{  public void removeValueAt(int index){  data.remove(index);}  }
class C{  public void testBasics() throws IOException {  Analyzer a=new SwedishAnalyzer();  checkOneTerm(a,"jaktkarlarne","jaktkarl");  checkOneTerm(a,"jaktkarlens","jaktkarl");  assertAnalyzesTo(a,"och",new String[]{});  a.close();}  }
class C{  public void registerInput(String varName,RDD<String> rdd,String format,long rlen,long clen,long nnz) throws DMLRuntimeException {  registerInput(varName,rdd.toJavaRDD().mapToPair(new ConvertStringToLongTextPair()),format,rlen,clen,nnz,null);}  }
class C{  protected void updateMenu(){  boolean fileOpen;  boolean isChanged;  boolean canUndo;  fileOpen=(getCurrentPanel() != null);  isChanged=fileOpen && (getCurrentPanel().isChanged());  canUndo=fileOpen && (getCurrentPanel().canUndo());  menuFileOpen.setEnabled(true);  menuFileSave.setEnabled(isChanged);  menuFileSaveAs.setEnabled(fileOpen);  menuFileClose.setEnabled(fileOpen);  menuFileCloseAll.setEnabled(fileOpen);  menuFileProperties.setEnabled(fileOpen);  menuFileExit.setEnabled(true);  menuEditUndo.setEnabled(canUndo);  menuEditCopy.setEnabled(fileOpen);  menuEditSearch.setEnabled(fileOpen);  menuEditClearSearch.setEnabled(fileOpen);  menuEditAttributeAsClass.setEnabled(fileOpen);  menuEditRenameAttribute.setEnabled(fileOpen);  menuEditDeleteAttribute.setEnabled(fileOpen);  menuEditDeleteAttributes.setEnabled(fileOpen);  menuEditDeleteInstance.setEnabled(fileOpen);  menuEditDeleteInstances.setEnabled(fileOpen);  menuEditSortInstances.setEnabled(fileOpen);  menuViewAttributes.setEnabled(fileOpen);  menuViewValues.setEnabled(fileOpen);  menuViewOptimalColWidths.setEnabled(fileOpen);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.127 -0500",hash_original_method="3ECF3BA7E150644C3EFC98E620B12B73",hash_generated_method="BDE185F16C00F265DD04B71A3ED3CA39") private void readEntityDeclaration() throws IOException, XmlPullParserException {  read(START_ENTITY);  boolean generalEntity=true;  skip();  if (peekCharacter() == '%') {    generalEntity=false;    position++;    skip();  }  String name=readName();  skip();  int quote=peekCharacter();  String entityValue;  if (quote == '"' || quote == '\'') {    position++;    entityValue=readValue((char)quote,true,false,ValueContext.ENTITY_DECLARATION);    position++;  } else   if (readExternalId(true,false)) {    entityValue="";    skip();    if (peekCharacter() == NDATA[0]) {      read(NDATA);      skip();      readName();    }  } else {    throw new XmlPullParserException("Expected entity value or external ID",this,null);  }  if (generalEntity && processDocDecl) {    if (documentEntities == null) {      documentEntities=new HashMap<String,char[]>();    }    documentEntities.put(name,entityValue.toCharArray());  }  skip();  read('>');}  }
class C{  public void writeToFile(Path file,Charset charset,OpenOption... options){  markupDocBuilder.writeToFile(file,charset,options);}  }
class C{  public WindowDragger(Window window,Component component){  fWindow=window;  fComponent=component;  mouseListener=createMouseListener();  mouseMotionListener=createMouseMotionListener();  fComponent.addMouseListener(mouseListener);  fComponent.addMouseMotionListener(mouseMotionListener);}  }
class C{  public void finish() throws IOException {  if (!def.finished()) {    def.finish();    while (!def.finished()) {      int len=def.deflate(buf,0,buf.length);      if (def.finished() && len <= buf.length - TRAILER_SIZE) {        writeTrailer(buf,len);        len=len + TRAILER_SIZE;        out.write(buf,0,len);        return;      }      if (len > 0)       out.write(buf,0,len);    }    byte[] trailer=new byte[TRAILER_SIZE];    writeTrailer(trailer,0);    out.write(trailer);  }}  }
class C{  public boolean dispatchKeyEvent(KeyEvent event){  if ((mOnKeyListener != null) && (mOnKeyListener.onKey(this,event.getKeyCode(),event))) {    return true;  }  if (mWindow.superDispatchKeyEvent(event)) {    return true;  }  return event.dispatch(this,mDecor != null ? mDecor.getKeyDispatcherState() : null,this);}  }
class C{  public void lockAddress(final int addr){  if (m_lockAddresses.putIfAbsent(addr,System.currentTimeMillis()) != null) {    throw new IllegalStateException("address already locked, logical: " + addr + ", physical: "+ physicalAddress(addr,true));  }}  }
class C{  private void resetTargetCountDetails(){  final long totalTargetsCount=getTotalTargetsCount();  managementUIState.setTargetsCountAll(totalTargetsCount);  Collection<TargetUpdateStatus> status=null;  Boolean overdueState=null;  String[] targetTags=null;  Long distributionId=null;  String searchText=null;  Long pinnedDistId=null;  if (isFilteredByTags()) {    targetTags=managementUIState.getTargetTableFilters().getClickedTargetTags().toArray(new String[0]);  }  if (isFilteredByStatus()) {    status=managementUIState.getTargetTableFilters().getClickedStatusTargetTags();  }  if (managementUIState.getTargetTableFilters().isOverdueFilterEnabled()) {    overdueState=managementUIState.getTargetTableFilters().isOverdueFilterEnabled();  }  if (managementUIState.getTargetTableFilters().getDistributionSet().isPresent()) {    distributionId=managementUIState.getTargetTableFilters().getDistributionSet().get().getId();  }  if (isFilteredByText()) {    searchText=String.format("%%%s%%",managementUIState.getTargetTableFilters().getSearchText().get());  }  final boolean noTagClicked=managementUIState.getTargetTableFilters().isNoTagSelected();  if (managementUIState.getTargetTableFilters().getPinnedDistId().isPresent()) {    pinnedDistId=managementUIState.getTargetTableFilters().getPinnedDistId().get();  }  final long size=getTargetsCountWithFilter(totalTargetsCount,pinnedDistId,new FilterParams(distributionId,status,overdueState,searchText,noTagClicked,targetTags));  if (size > SPUIDefinitions.MAX_TABLE_ENTRIES) {    managementUIState.setTargetsTruncated(size - SPUIDefinitions.MAX_TABLE_ENTRIES);  }}  }
class C{  public void testCloning(){  LogFormat f1=new LogFormat(10.0,"10",true);  LogFormat f2=(LogFormat)f1.clone();  assertTrue(f1 != f2);  assertTrue(f1.getClass() == f2.getClass());  assertTrue(f1.equals(f2));}  }
class C{  public boolean isEnd(){  return true;}  }
class C{  public static int EL2NSYNC(){  return 45;}  }
class C{  public void clearReadTime(){  _readTime=0;}  }
class C{  public static EncodedOSRMap makeMap(VariableMap varMap,MachineCodeOffsets mcOffsets){  if (varMap.getNumberOfElements() > 0) {    return new EncodedOSRMap(varMap,mcOffsets);  } else {    return emptyMap;  }}  }
class C{  public String limitLen(int maxlen,String string){  return limitLen(maxlen,string,"...");}  }
class C{  public int hashCode(){  return _header;}  }
class C{  public Intent putExtra(String name,int value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putInt(name,value);  return this;}  }
class C{  public LayerCreationPanel(final HashMap<String,NeuronUpdateRule> neuronTypeMap,final String label,final int numNeurons){  this.neuronTypeMap=neuronTypeMap;  numNeuronsField=new JTextField();  numNeuronsField.setColumns(2);  numNeuronsField.setText("" + numNeurons);  neuronTypeComboBox=new JComboBox<String>(neuronTypeMap.keySet().toArray(new String[neuronTypeMap.size()]));  Box component=Box.createHorizontalBox();  component.setAlignmentX(Box.LEFT_ALIGNMENT);  JLabel firstLabel=new JLabel(label);  firstLabel.setPreferredSize(new Dimension(100,10));  component.add(firstLabel);  component.add(new JSeparator(SwingConstants.VERTICAL));  component.add(Box.createHorizontalStrut(20));  JLabel numNeuronsLabel=new JLabel("Number of neurons:");  component.add(numNeuronsLabel);  numNeuronsField.setText("5");  component.add(numNeuronsField);  component.add(Box.createHorizontalStrut(15));  JLabel typeLabel=new JLabel("Neuron type:");  component.add(typeLabel);  component.add(neuronTypeComboBox);  this.setLayout(new FlowLayout(FlowLayout.LEFT));  add(component);}  }
class C{  public void record(int time_sec){  this.count++;  this.total_time_sec+=time_sec;  if (this.min_time_sec < 0)   this.min_time_sec=time_sec; else   this.min_time_sec=Math.min(this.min_time_sec,time_sec);  this.max_time_sec=Math.max(this.max_time_sec,time_sec);}  }
class C{  static boolean bitIsSet(int bitPattern,int optLevel){  int newPattern=1;  newPattern=newPattern << optLevel;  return (newPattern & bitPattern) > 0;}  }
class C{  public static int typefaceCodeFromAttribute(final Context context,final AttributeSet attrs){  int typefaceCode=-1;  final TypedArray typedArray=context.obtainStyledAttributes(attrs,FONT_STYLE_ATTRS);  if (typedArray != null) {    try {      typefaceCode=typedArray.getInt(0,-1);    } catch (    Exception ignore) {    } finally {      typedArray.recycle();    }  }  return typefaceCode;}  }
class C{  private Atom templateMethodName(int pattern){switch (pattern) {case 1:    return Names.scalarRNNNNN;case 2:  return Names.scalarNRNNNN;case 3:return Names.scalarRRNNNN;case 4:return Names.scalarNNRNNN;case 5:return Names.scalarRNRNNN;case 6:return Names.scalarNRRNNN;case 7:return Names.scalarRRRNNN;case 8:return Names.scalarNNNRNN;case 9:return Names.scalarRNNRNN;case 10:return Names.scalarNRNRNN;case 11:return Names.scalarRRNRNN;case 12:return Names.scalarNNRRNN;case 13:return Names.scalarRNRRNN;case 14:return Names.scalarNRRRNN;case 15:return Names.scalarRRRRNN;case 16:return Names.scalarNNNNRN;case 17:return Names.scalarRNNNRN;case 18:return Names.scalarNRNNRN;case 19:return Names.scalarRRNNRN;case 20:return Names.scalarNNRNRN;case 21:return Names.scalarRNRNRN;case 22:return Names.scalarNRRNRN;case 23:return Names.scalarRRRNRN;case 24:return Names.scalarNNNRRN;case 25:return Names.scalarRNNRRN;case 26:return Names.scalarNRNRRN;case 27:return Names.scalarRRNRRN;case 28:return Names.scalarNNRRRN;case 29:return Names.scalarRNRRRN;case 30:return Names.scalarNRRRRN;case 31:return Names.scalarRRRRRN;case 32:return Names.scalarNNNNNR;case 33:return Names.scalarRNNNNR;case 34:return Names.scalarNRNNNR;case 35:return Names.scalarRRNNNR;case 36:return Names.scalarNNRNNR;case 37:return Names.scalarRNRNNR;case 38:return Names.scalarNRRNNR;case 39:return Names.scalarRRRNNR;case 40:return Names.scalarNNNRNR;case 41:return Names.scalarRNNRNR;case 42:return Names.scalarNRNRNR;case 43:return Names.scalarRRNRNR;case 44:return Names.scalarNNRRNR;case 45:return Names.scalarRNRRNR;case 46:return Names.scalarNRRRNR;case 47:return Names.scalarRRRRNR;case 48:return Names.scalarNNNNRR;case 49:return Names.scalarRNNNRR;case 50:return Names.scalarNRNNRR;case 51:return Names.scalarRRNNRR;case 52:return Names.scalarNNRNRR;case 53:return Names.scalarRNRNRR;case 54:return Names.scalarNRRNRR;case 55:return Names.scalarRRRNRR;case 56:return Names.scalarNNNRRR;case 57:return Names.scalarRNNRRR;case 58:return Names.scalarNRNRRR;case 59:return Names.scalarRRNRRR;case 60:return Names.scalarNNRRRR;case 61:return Names.scalarRNRRRR;case 62:return Names.scalarNRRRRR;case 63:return Names.scalarRRRRRR;case NULL_PATTERN:return Names.noReferences;case REFARRAY_PATTERN:return Names.referenceArray;case FALLBACK_PATTERN:default :return Names.scalar;}}  }
class C{  SubTable(Table original){  super(original.name(),original.emptyCopy().columns().toArray(new Column[original.columnCount()]));}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer("CharClasses:");  result.append(Out.NL);  for (int i=0; i < classes.size(); i++)   result.append("class " + i + ":"+ Out.NL+ classes.elementAt(i)+ Out.NL);  return result.toString();}  }
class C{  public Subscription register(Object mBean,MBeanDescription description){  return register(mBean,description.getMBeanName(getNextId()));}  }
class C{  public void testPolygonBogus(){  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("must be equal length"));}  }
class C{  public int optInt(int index,int defaultValue){  try {    return getInt(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public static void main(String[] args){  runEvaluator(new OneRAttributeEval(),args);}  }
class C{  public boolean equals(Object other){  if (this == other) {    return true;  }  if (other instanceof AlgorithmId) {    return equals((AlgorithmId)other);  } else   if (other instanceof ObjectIdentifier) {    return equals((ObjectIdentifier)other);  } else {    return false;  }}  }
class C{  public static String quote(String string){  if (string == null || string.length() == 0) {    return "\"\"";  }  char b;  char c=0;  int i;  int len=string.length();  StringBuffer sb=new StringBuffer(len + 4);  String t;  sb.append('"');  for (i=0; i < len; i+=1) {    b=c;    c=string.charAt(i);switch (c) {case '\\':case '"':      sb.append('\\');    sb.append(c);  break;case '/':if (b == '<') {  sb.append('\\');}sb.append(c);break;case '\b':sb.append("\\b");break;case '\t':sb.append("\\t");break;case '\n':sb.append("\\n");break;case '\f':sb.append("\\f");break;case '\r':sb.append("\\r");break;default :if (c < ' ' || (c >= '\u0080' && c < '\u0100') || (c >= '\u2000' && c < '\u2100')) {t="000" + Integer.toHexString(c);sb.append("\\u" + t.substring(t.length() - 4));} else {sb.append(c);}}}sb.append('"');return sb.toString();}  }
class C{  public byte[] toBytecode() throws IOException, CannotCompileException {  ByteArrayOutputStream barray=new ByteArrayOutputStream();  DataOutputStream out=new DataOutputStream(barray);  try {    toBytecode(out);  }  finally {    out.close();  }  return barray.toByteArray();}  }
class C{  @Deprecated public static String HTMLEnc(String s){  return XMLEncNA(s);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'USER'";  db.execSQL(sql);}  }
class C{  protected void generateFields(){  StringBuilder injection=new StringBuilder();  if (!mContext.isActivity() && !mContext.getFieldNameList().contains("rootView")) {    injection.delete(0,injection.length());    injection.append("protected View rootView;");    getPsiClass().add(mFactory.createFieldFromText(injection.toString(),getPsiClass()));  }  for (  Element element : mElements) {    if (element.isDeclared) {      continue;    }    injection.delete(0,injection.length());    injection.append("protected ");    injection.append(getFieldTypeName(element));    injection.append(" ");    injection.append(element.fieldName);    injection.append(";");    getPsiClass().add(mFactory.createFieldFromText(injection.toString(),getPsiClass()));  }}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  @Deprecated public int length(){  return d;}  }
class C{  private static void processRemoveMask(final IPair<String,Object> removeMask,final List<Integer[]> selection){  if (removeMask == null)   return;switch (removeMask.getValue1()) {case "ZeroIndices":{      final Integer[] indices=(Integer[])removeMask.getValue2();      if (indices.length == 0)       selection.clear(); else {        final List<Integer[]> retained=new ArrayList<>(indices.length);        for (        final int index : indices)         if (index < selection.size())         retained.add(selection.get(index));        selection.clear();        selection.addAll(retained);      }      break;    }case "OneIndices":{    final Integer[] indices=(Integer[])removeMask.getValue2();    for (int i=indices.length - 1; i >= 0; i--) {      final int index=indices[i];      if (index < selection.size())       selection.remove(index);    }    break;  }case "Mask":{  processDeselectionMap((IBitArray)removeMask.getValue2(),selection);  break;}case "None":break;}}  }
class C{  @Nullable public static IgnoreDescriptor forMethod(Class cls,Method mthd){  if (mthd.isAnnotationPresent(IgniteIgnore.class)) {    IgniteIgnore ignore=mthd.getAnnotation(IgniteIgnore.class);    String reason=ignore.value();    if (F.isEmpty(reason))     throw new IllegalArgumentException("Reason is not set for ignored test [class=" + cls.getName() + ", method="+ mthd.getName()+ ']');    return new IgnoreDescriptor(reason,ignore.forceFailure());  } else   return null;}  }
class C{  public void addChild(KeyValueNode<K,V> aNode){  children.add(aNode);}  }
class C{  public int count() throws DBException {  return aggregate("*",AGGREGATE_COUNT).intValue();}  }
class C{  private void pop(final int elements){  if (outputStackTop >= elements) {    outputStackTop-=elements;  } else {    owner.inputStackTop-=elements - outputStackTop;    outputStackTop=0;  }}  }
class C{  static final int nextSecondarySeed(){  int r;  Thread t=Thread.currentThread();  if ((r=UNSAFE.getInt(t,SECONDARY)) != 0) {    r^=r << 13;    r^=r >>> 17;    r^=r << 5;  } else {    localInit();    if ((r=(int)UNSAFE.getLong(t,SEED)) == 0)     r=1;  }  UNSAFE.putInt(t,SECONDARY,r);  return r;}  }
class C{  private void register(RegisterAttempt attempt){  state.getLogger().debug("Registering session: attempt {}",attempt.attempt);  RegisterRequest request=RegisterRequest.builder().withClient(state.getClientId()).build();  state.getLogger().debug("Sending {}",request);  connection.reset().<RegisterRequest,RegisterResponse>send(request).whenComplete(null);}  }
class C{  public void adjustPosition(){  if (mReferenceView == null) {    return;  }  mReferenceView.getLocationInWindow(mLocation);  int refCenterX=mLocation[0] + mReferenceView.getWidth() / 2;  int refTopY=mLocation[1];  int left=refCenterX - getWidth() / 2;  int top=refTopY - getHeight();  getLocationInWindow(mLocation);  int currentLeft=mLocation[0] - (int)getTranslationX();  int currentTop=mLocation[1] - (int)getTranslationY();  setTranslationX(left - currentLeft);  setTranslationY(top - currentTop);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  long formatMe=getLong(stack);  Object firstArg=stack.pop();  if (firstArg == null)   return (Sage.durFormatPretty(formatMe)); else {    boolean hasDays=false, hasHours=false, hasMins=false, hasSecs=false;    String formStr=firstArg.toString();    for (int i=0; i < formStr.length(); i++) {      char c=formStr.charAt(i);      if (c == '%') {        i++;        boolean req=false;        if (formStr.charAt(i) == 'r') {          req=true;          i++;        }        c=formStr.charAt(i);        int x=0;        if (c == 'd')         hasDays=true; else         if (c == 'h')         hasHours=true; else         if (c == 'm')         hasMins=true; else         if (c == 's')         hasSecs=true;      }    }    StringBuffer sb=new StringBuffer();    boolean skipCurrentField=false;    long formVal=Math.abs(formatMe);    if (formatMe < 0)     sb.append("-");    for (int i=0; i < formStr.length(); i++) {      char c=formStr.charAt(i);      if (c == '%') {        i++;        boolean req=false;        if (formStr.charAt(i) == 'r') {          req=true;          i++;        }        c=formStr.charAt(i);        long x=0;        if (c == 'd') {          x=formVal / Sage.MILLIS_PER_DAY;        } else         if (c == 'h') {          x=formVal / Sage.MILLIS_PER_HR;          if (hasDays)           x%=24;        } else         if (c == 'm') {          x=formVal / 60000;          if (hasHours)           x%=60;        } else         if (c == 's') {          x=formVal / 1000;          if (hasMins)           x%=60;        }        if (req || x != 0) {          skipCurrentField=false;          if (sb.length() > 0 && x < 10 && c != 'd') {            sb.append("0");          }          sb.append(x);        } else         if (!req)         skipCurrentField=true;      } else       if (!skipCurrentField)       sb.append(c);    }    Object rv=sb.toString();    return (rv);  }}  }
class C{  private void prepareStreams(Socket socket) throws IOException {  try {    if (dataInputStream != null) {      dataInputStream.close();    }    if (dataOutputStream != null) {      dataOutputStream.close();    }  } catch (  IOException x) {  }  dataInputStream=new DataInputStream(new BufferedInputStream(socket.getInputStream()));  dataOutputStream=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream()));}  }
class C{  private String fetchCoreByReplicaSymmetry(Map<String,String> sourceCoreToNodeMap,String sourceCore,String destinationCore){  if (!sourceCoreToNodeMap.containsKey(sourceCore)) {    logger.info("Dest core: " + destinationCore + " SrcCore: "+ sourceCore+ " missing in source");    logger.info("Trying to check for replica asymmetry");    String[] splits=sourceCore.split("_replica");    String shardKey=splits[0];    logger.info("Using " + shardKey + " as the shard key for checking other replicas..");    String firstReplicaforCurrentShard=shardKey + "_replica1";    if (!sourceCoreToNodeMap.containsKey(firstReplicaforCurrentShard)) {      logger.info("No Replica1 exist for this shard... Trying on Replica2 " + firstReplicaforCurrentShard);      String secondReplicaforCurrentShard=shardKey + "_replica2";      if (!sourceCoreToNodeMap.containsKey(secondReplicaforCurrentShard)) {        logger.info("No Replica exists for this shard... Skipping " + secondReplicaforCurrentShard);      } else {        logger.info("Success finding an Asymetric Replica...");        logger.info(destinationCore + " is not found on the Source Cluster  but I managed to find another Replica and I am going to use it. Found Replica " + secondReplicaforCurrentShard);        sourceCore=secondReplicaforCurrentShard;      }    } else {      logger.info("Success finding an Asymetric Replica...");      logger.info(destinationCore + " is not found on the Source Cluster  but I managed to find another Replica and I am going to use it. Found Replica " + firstReplicaforCurrentShard);      sourceCore=firstReplicaforCurrentShard;    }  } else {    logger.info("Found " + sourceCore + "in the source Map itself...");  }  return sourceCore;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void resolveFunction(final Window parent,final IDatabase database,final INaviFunction function){  final CFunctionSelectionDialog dlg=new CFunctionSelectionDialog(parent,database);  GuiHelper.centerChildToParent(parent,dlg,true);  dlg.setVisible(true);  final INaviFunction selectedFunction=dlg.getSelectedFunction();  if (selectedFunction != null) {    try {      function.setForwardedFunction(selectedFunction);    } catch (    final CouldntSaveDataException e) {      CUtilityFunctions.logException(e);    }  }}  }
class C{  public boolean isLeaf(){  return !hasChildren();}  }
class C{  public void addItem(Item item){synchronized (items) {    items.add(item);  }}  }
class C{  private Object readResolve(){  return ToStringStyle.MULTI_LINE_STYLE;}  }
class C{  protected void configurePopup(){  setLayout(new BoxLayout(this,BoxLayout.Y_AXIS));  setBorderPainted(true);  setBorder(TREE_BORDER);  setOpaque(false);  add(scroller);  setDoubleBuffered(true);  setFocusable(false);}  }
class C{  public void runFinalization(){  return;}  }
class C{  public FlowControlParams(){}  }
class C{  @Override public void connect(){  try {    if (cluster == null)     buildCluster();    session=cluster.connect();    logger.debug("Cassandra connection Success");  } catch (  DriverException ex) {    throw new RuntimeException("closing database resource",ex);  }catch (  Throwable t) {    DTThrowable.rethrow(t);  }}  }
class C{  public static ByteList Interfaces(ByteList bytes,IntList interfaces){  for (int i=0, n=interfaces.size(); i < n; i++) {    bytes=Int(bytes,interfaces.get(i));  }  return bytes;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void think(){}  }
class C{  public static List<String> parseCsv(String csv,char separator){  final char QC='"';  List<String> list=new ArrayList<>();  StringBuilder field=new StringBuilder();  boolean inQuote=false;  for (int i=0; i < csv.length(); i++) {    char c=csv.charAt(i);    if (c == QC) {      if (i + 1 < csv.length() && csv.charAt(i + 1) == QC) {        i++;        field.append(QC);        continue;      } else {        inQuote=!inQuote;        if (inQuote) {          for (int j=0; j < field.length(); j++) {            if (field.charAt(j) != QC)             break;          }        } else {          if (!inQuote) {            if (i + 1 == csv.length() || csv.charAt(i + 1) == separator)             ; else {              inQuote=true;              break;            }          }        }      }    } else     if (c == separator) {      if (inQuote) {        field.append(c);      } else {        list.add(field.toString());        field.setLength(0);      }    } else {      field.append(c);    }  }  if (inQuote)   throw new IllegalArgumentException("malformed csv string: unbalanced quotes in csv: " + csv);  if (field.length() != 0) {    list.add(field.toString());  }  return list;}  }
class C{  public static int unescapeAt(String s,int[] offset16){  int c;  int result=0;  int n=0;  int minDig=0;  int maxDig=0;  int bitsPerDigit=4;  int dig;  int i;  boolean braces=false;  int offset=offset16[0];  int length=s.length();  if (offset < 0 || offset >= length) {    return -1;  }  c=UTF16.charAt(s,offset);  offset+=UTF16.getCharCount(c);switch (c) {case 'u':    minDig=maxDig=4;  break;case 'U':minDig=maxDig=8;break;case 'x':minDig=1;if (offset < length && UTF16.charAt(s,offset) == 0x7B) {++offset;braces=true;maxDig=8;} else {maxDig=2;}break;default :dig=UCharacter.digit(c,8);if (dig >= 0) {minDig=1;maxDig=3;n=1;bitsPerDigit=3;result=dig;}break;}if (minDig != 0) {while (offset < length && n < maxDig) {c=UTF16.charAt(s,offset);dig=UCharacter.digit(c,(bitsPerDigit == 3) ? 8 : 16);if (dig < 0) {break;}result=(result << bitsPerDigit) | dig;offset+=UTF16.getCharCount(c);++n;}if (n < minDig) {return -1;}if (braces) {if (c != 0x7D) {return -1;}++offset;}if (result < 0 || result >= 0x110000) {return -1;}if (offset < length && UTF16.isLeadSurrogate((char)result)) {int ahead=offset + 1;c=s.charAt(offset);if (c == '\\' && ahead < length) {int o[]=new int[]{ahead};c=unescapeAt(s,o);ahead=o[0];}if (UTF16.isTrailSurrogate((char)c)) {offset=ahead;result=UCharacterProperty.getRawSupplementary((char)result,(char)c);}}offset16[0]=offset;return result;}for (i=0; i < UNESCAPE_MAP.length; i+=2) {if (c == UNESCAPE_MAP[i]) {offset16[0]=offset;return UNESCAPE_MAP[i + 1];} else if (c < UNESCAPE_MAP[i]) {break;}}if (c == 'c' && offset < length) {c=UTF16.charAt(s,offset);offset16[0]=offset + UTF16.getCharCount(c);return 0x1F & c;}offset16[0]=offset;return c;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(domimplementationhasfeature02.class,args);}  }
class C{  @Override public boolean continueBuffering(long positionUs) throws IOException {  Assertions.checkState(state == STATE_PREPARED);  this.downstreamPositionUs=positionUs;  discardSamplesForDisabledTracks(this.extractor,downstreamPositionUs);  int read=this.extractor.read(this.dataSource);  int c=0;  while (!haveSamplesForEnabledTracks(this.extractor) && read > 0) {    read=this.extractor.read(this.dataSource);  }  boolean haveSamples=haveSamplesForEnabledTracks(this.extractor);  return haveSamples;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  super.reset(mapping,request);  tiposDocumentos=new String[0];  estados=new String[0];}  }
class C{  private void updateExistingTables(final DBTransaction transaction) throws SQLException {  if (!transaction.doesColumnExist("kills","day")) {    transaction.execute("ALTER TABLE kills ADD COLUMN (day DATE);",null);  }  if (!transaction.doesColumnExist("npcs","image")) {    transaction.execute("ALTER TABLE npcs ADD COLUMN (image VARCHAR(255));",null);  }  if (!transaction.doesColumnExist("character_stats","lastseen")) {    transaction.execute("ALTER TABLE character_stats ADD COLUMN (lastseen TIMESTAMP);",null);  }  if (!transaction.doesColumnExist("postman","messagetype")) {    transaction.execute("ALTER TABLE postman ADD COLUMN (messagetype CHAR(1));",null);  }  if (!transaction.doesColumnExist("achievement","base_score")) {    transaction.execute("ALTER TABLE achievement ADD COLUMN (base_score INTEGER);",null);  }  if (transaction.doesColumnExist("achievement","description")) {    if (transaction.getColumnLength("achievement","description") < 254) {      transaction.execute("CREATE TABLE tmp_achievement_description (id INTEGER, description VARCHAR(254));",null);      transaction.execute("INSERT INTO tmp_achievement_description (id, description) SELECT id, description FROM achievement;",null);      transaction.execute("ALTER TABLE achievement DROP description",null);      transaction.execute("ALTER TABLE achievement ADD description VARCHAR(254);",null);      transaction.execute("UPDATE achievement SET description=(SELECT tmp_achievement_description.description FROM tmp_achievement_description WHERE achievement.id=tmp_achievement_description.id);",null);      transaction.execute("DROP TABLE tmp_achievement_description;",null);    }  }  if (!transaction.doesColumnExist("character_stats","finger")) {    transaction.execute("ALTER TABLE character_stats ADD COLUMN (finger VARCHAR(32));",null);  }  if (!transaction.doesColumnExist("postman","deleted")) {    transaction.execute("ALTER TABLE postman ADD COLUMN (deleted CHAR(1) DEFAULT 'N');",null);  }  transaction.execute("DELETE FROM achievement WHERE identifier in ('age.day.one', " + "'age.week.one', 'age.month.one', 'age.month.two', 'age.month.three', " + "'age.month.four', 'age.month.five', 'age.month.six', 'age.month.seven', "+ "'age.month.eight', 'age.month.nine', 'age.month.ten', 'age.month.eleven', "+ "'age.year.one', 'quest.special.dm.025', 'quest.special.susi', 'item.produce.flour',"+ "'quest.special.santa', 'quest.special.bunny')",null);  transaction.execute("UPDATE achievement SET identifier='xp.level.010' WHERE identifier='xp.level.10'",null);  transaction.execute("UPDATE achievement SET identifier='xp.level.050' WHERE identifier='xp.level.50'",null);  if (!transaction.doesColumnExist("achievement","active")) {    transaction.execute("ALTER TABLE achievement ADD COLUMN (active INTEGER);",null);    transaction.execute("UPDATE achievement SET active = 1 WHERE active IS NULL;",null);  }  if (!transaction.doesColumnExist("character_stats","outfit_colors")) {    transaction.execute("ALTER TABLE character_stats ADD COLUMN (outfit_colors VARCHAR(100));",null);    transaction.execute("UPDATE character_stats SET outfit_colors = '' WHERE outfit_colors IS NULL;",null);  }  if (transaction.doesTableExist("itemid")) {    int id=transaction.querySingleCellInt("SELECT last_id FROM itemid",null);    logger.warn("Migrating from itemid-table to item-table. last_id: " + id);    String sql="INSERT INTO item (id, name, timedate) " + " SELECT itemid, param1, timedate FROM itemlog WHERE event='register' AND timedate>='2011-10-01' ORDER BY timedate";    transaction.execute(sql,null);    int count=transaction.querySingleCellInt("SELECT count(id) FROM item",null);    if (count == 0) {      transaction.execute("INSERT INTO item (id) VALUES (" + id + ")",null);    } else {      int itemid=transaction.querySingleCellInt("SELECT id FROM item ORDER BY id DESC LIMIT 1",null);      if (itemid < id) {        transaction.execute("INSERT INTO item (id) VALUES (" + id + ")",null);      }    }    transaction.execute("DROP TABLE itemid",null);  }  if (!transaction.doesColumnExist("character_stats","zone")) {    transaction.execute("ALTER TABLE character_stats ADD COLUMN (zone VARCHAR(50));",null);  }  if (!transaction.doesColumnExist("buddy","relationtype")) {    transaction.execute("ALTER TABLE buddy ADD COLUMN (relationtype VARCHAR(7));",null);    transaction.execute("UPDATE buddy SET relationtype = 'buddy' WHERE relationtype IS NULL",null);  }}  }
class C{  public CharSegment toLowerCase(){  char[] buffer=_buffer;  int len=_length;  int offset=_offset;  while (--len >= 0)   buffer[offset + len]=Character.toLowerCase(buffer[offset + len]);  return this;}  }
class C{  public boolean isOpaque(){  return opaque;}  }
class C{  public String toString(){  return "HttpReceive" + socket.toString();}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SynthToolTipUI();}  }
class C{  public void removeCommand(String notificationName){  controller.removeCommand(notificationName);}  }
class C{  public void wakeUpUpdateThread(){synchronized (runLock) {    runLock.notifyAll();  }}  }
class C{  private void fireAgentDestroyed(String n){synchronized (baseListeners) {    Iterator i=baseListeners.iterator();    while (i.hasNext())     ((IBaseListener)i.next()).agentDestroyed(n);  }}  }
class C{  public SignatureChecker withSignature(String signature){  this.signature=signature;  return this;}  }
class C{  private static void try_success(String s,String e){  print(">    " + s + "success\n");  if (e != "") {    print(">      Message: " + e + "\n");  }}  }
class C{  public static List<Envelope> SpatialKnnQuery(RectangleRDD objectRDD,Point queryCenter,Integer k){  @SuppressWarnings("serial") JavaRDD<Envelope> tmp=objectRDD.getRawRectangleRDD().mapPartitions(new RectangleKnnJudgement(queryCenter,k));  return tmp.takeOrdered(k,new RectangleDistanceComparator(queryCenter));}  }
class C{  public void deleteStack(PropertyHandler ph) throws HeatException, APPlatformException {  logger.debug("HeatProcessor.deleteStack() stackname: " + ph.getStackName());  createHeatClient(ph).deleteStack(ph.getStackName());}  }
class C{  @Override public void addInformation(ItemStack itemStack,EntityPlayer par2EntityPlayer,List par3List,boolean par4){  super.addInformation(itemStack,par2EntityPlayer,par3List,par4);  par3List.add(LangUtils.localize("info.misc.freq") + " " + this.getFrequency(itemStack));}  }
class C{  public boolean equals(Object thatObject){  if (!(thatObject instanceof MimeType)) {    return false;  }  MimeType that=(MimeType)thatObject;  boolean isIt=((this.primaryType.equals(that.primaryType)) && (this.subType.equals(that.subType)) && (this.parameters.equals(that.parameters)));  return isIt;}  }
class C{  public void ifCmp(final Type type,final int mode,final Label label){switch (type.getSort()) {case Type.LONG:    mv.visitInsn(Opcodes.LCMP);  break;case Type.DOUBLE:mv.visitInsn(mode == GE || mode == GT ? Opcodes.DCMPL : Opcodes.DCMPG);break;case Type.FLOAT:mv.visitInsn(mode == GE || mode == GT ? Opcodes.FCMPL : Opcodes.FCMPG);break;case Type.ARRAY:case Type.OBJECT:switch (mode) {case EQ:mv.visitJumpInsn(Opcodes.IF_ACMPEQ,label);return;case NE:mv.visitJumpInsn(Opcodes.IF_ACMPNE,label);return;}throw new IllegalArgumentException("Bad comparison for type " + type);default :int intOp=-1;switch (mode) {case EQ:intOp=Opcodes.IF_ICMPEQ;break;case NE:intOp=Opcodes.IF_ICMPNE;break;case GE:intOp=Opcodes.IF_ICMPGE;break;case LT:intOp=Opcodes.IF_ICMPLT;break;case LE:intOp=Opcodes.IF_ICMPLE;break;case GT:intOp=Opcodes.IF_ICMPGT;break;}mv.visitJumpInsn(intOp,label);return;}mv.visitJumpInsn(mode,label);}  }
class C{  public static String format(double[] d,String sep,NumberFormat nf){  return d == null ? "null" : (d.length == 0) ? "" : formatTo(new StringBuilder(),d,sep,nf).toString();}  }
class C{  public CreateIndexRequest cause(String cause){  this.cause=cause;  return this;}  }
class C{  public void init() throws ServletException {}  }
class C{  public void mul(){  RatPoly top=pop();  RatPoly next=pop();  push(top.mul(next));}  }
class C{  public Thread startNewServer(Socket socket){  return (new TestLinkServer(socket));}  }
class C{  @Override public void merge(final AddressSettings merged){  if (maxDeliveryAttempts == null) {    maxDeliveryAttempts=merged.maxDeliveryAttempts;  }  if (dropMessagesWhenFull == null) {    dropMessagesWhenFull=merged.dropMessagesWhenFull;  }  if (maxSizeBytes == null) {    maxSizeBytes=merged.maxSizeBytes;  }  if (pageMaxCache == null) {    pageMaxCache=merged.pageMaxCache;  }  if (pageSizeBytes == null) {    pageSizeBytes=merged.getPageSizeBytes();  }  if (messageCounterHistoryDayLimit == null) {    messageCounterHistoryDayLimit=merged.messageCounterHistoryDayLimit;  }  if (redeliveryDelay == null) {    redeliveryDelay=merged.redeliveryDelay;  }  if (redeliveryMultiplier == null) {    redeliveryMultiplier=merged.redeliveryMultiplier;  }  if (maxRedeliveryDelay == null) {    maxRedeliveryDelay=merged.maxRedeliveryDelay;  }  if (deadLetterAddress == null) {    deadLetterAddress=merged.deadLetterAddress;  }  if (expiryAddress == null) {    expiryAddress=merged.expiryAddress;  }  if (expiryDelay == null) {    expiryDelay=merged.expiryDelay;  }  if (redistributionDelay == null) {    redistributionDelay=merged.redistributionDelay;  }  if (sendToDLAOnNoRoute == null) {    sendToDLAOnNoRoute=merged.sendToDLAOnNoRoute;  }  if (addressFullMessagePolicy == null) {    addressFullMessagePolicy=merged.addressFullMessagePolicy;  }  if (slowConsumerThreshold == null) {    slowConsumerThreshold=merged.slowConsumerThreshold;  }  if (slowConsumerCheckPeriod == null) {    slowConsumerCheckPeriod=merged.slowConsumerCheckPeriod;  }  if (slowConsumerPolicy == null) {    slowConsumerPolicy=merged.slowConsumerPolicy;  }  if (autoCreateJmsQueues == null) {    autoCreateJmsQueues=merged.autoCreateJmsQueues;  }  if (autoDeleteJmsQueues == null) {    autoDeleteJmsQueues=merged.autoDeleteJmsQueues;  }  if (autoCreateJmsTopics == null) {    autoCreateJmsTopics=merged.autoCreateJmsTopics;  }  if (autoDeleteJmsTopics == null) {    autoDeleteJmsTopics=merged.autoDeleteJmsTopics;  }  if (managementBrowsePageSize == null) {    managementBrowsePageSize=merged.managementBrowsePageSize;  }  if (queuePrefetch == null) {    queuePrefetch=merged.queuePrefetch;  }  if (maxSizeBytesRejectThreshold == null) {    maxSizeBytesRejectThreshold=merged.maxSizeBytesRejectThreshold;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:25.979 -0500",hash_original_method="5AE1DA121FD737E8D77F265AA9EE4792",hash_generated_method="FBA23CB8D0C8962C2F06E9D44D4C7408") public boolean isOrderingAsAdded(){  return mOrderingAsAdded;}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  Cursor old=super.swapCursor(newCursor);  resetMappings();  return old;}  }
class C{  private int readStringIndex(ByteInput bs) throws IOException {  int offsetIndex=Leb128Utils.readUnsignedLeb128(bs);  return offsetIndex - 1;}  }
class C{  public static void main(String[] args) throws Exception {  checkArguments(args);  String pathAppMasterJar=args[0];  ClusterProperties props=ClusterProperties.from(args.length == 2 ? args[1] : null);  YarnConfiguration conf=new YarnConfiguration();  YarnClient yarnClient=YarnClient.createYarnClient();  yarnClient.init(conf);  yarnClient.start();  YarnClientApplication app=yarnClient.createApplication();  FileSystem fs=FileSystem.get(conf);  Path ignite;  if (props.ignitePath() == null)   ignite=getIgnite(props,fs); else   ignite=new Path(props.ignitePath());  Path appJar=IgniteYarnUtils.copyLocalToHdfs(fs,pathAppMasterJar,props.igniteWorkDir() + File.separator + IgniteYarnUtils.JAR_NAME);  ContainerLaunchContext amContainer=Records.newRecord(ContainerLaunchContext.class);  amContainer.setCommands(Collections.singletonList(Environment.JAVA_HOME.$() + "/bin/java -Xmx512m " + ApplicationMaster.class.getName()+ IgniteYarnUtils.SPACE+ ignite.toUri()+ IgniteYarnUtils.YARN_LOG_OUT));  LocalResource appMasterJar=IgniteYarnUtils.setupFile(appJar,fs,LocalResourceType.FILE);  amContainer.setLocalResources(Collections.singletonMap(IgniteYarnUtils.JAR_NAME,appMasterJar));  Map<String,String> appMasterEnv=props.toEnvs();  setupAppMasterEnv(appMasterEnv,conf);  amContainer.setEnvironment(appMasterEnv);  if (UserGroupInformation.isSecurityEnabled()) {    Credentials creds=new Credentials();    String tokRenewer=conf.get(YarnConfiguration.RM_PRINCIPAL);    if (tokRenewer == null || tokRenewer.length() == 0)     throw new IOException("Master Kerberos principal for the RM is not set.");    log.info("Found RM principal: " + tokRenewer);    final Token<?> tokens[]=fs.addDelegationTokens(tokRenewer,creds);    if (tokens != null)     log.info("File system delegation tokens: " + Arrays.toString(tokens));    amContainer.setTokens(IgniteYarnUtils.createTokenBuffer(creds));  }  Resource capability=Records.newRecord(Resource.class);  capability.setMemory(512);  capability.setVirtualCores(1);  ApplicationSubmissionContext appContext=app.getApplicationSubmissionContext();  appContext.setApplicationName("ignition");  appContext.setAMContainerSpec(amContainer);  appContext.setResource(capability);  appContext.setQueue("default");  ApplicationId appId=appContext.getApplicationId();  yarnClient.submitApplication(appContext);  log.log(Level.INFO,"Submitted application. Application id: {0}",appId);  ApplicationReport appReport=yarnClient.getApplicationReport(appId);  YarnApplicationState appState=appReport.getYarnApplicationState();  while (appState == YarnApplicationState.NEW || appState == YarnApplicationState.NEW_SAVING || appState == YarnApplicationState.SUBMITTED || appState == YarnApplicationState.ACCEPTED) {    TimeUnit.SECONDS.sleep(1L);    appReport=yarnClient.getApplicationReport(appId);    if (appState != YarnApplicationState.ACCEPTED && appReport.getYarnApplicationState() == YarnApplicationState.ACCEPTED)     log.log(Level.INFO,"Application {0} is ACCEPTED.",appId);    appState=appReport.getYarnApplicationState();  }  log.log(Level.INFO,"Application {0} is {1}.",new Object[]{appId,appState});}  }
class C{  public static void readIgniteConfiguration(BinaryRawReaderEx in,IgniteConfiguration cfg){  if (in.readBoolean())   cfg.setClientMode(in.readBoolean());  int[] eventTypes=in.readIntArray();  if (eventTypes != null)   cfg.setIncludeEventTypes(eventTypes);  if (in.readBoolean())   cfg.setMetricsExpireTime(in.readLong());  if (in.readBoolean())   cfg.setMetricsHistorySize(in.readInt());  if (in.readBoolean())   cfg.setMetricsLogFrequency(in.readLong());  if (in.readBoolean())   cfg.setMetricsUpdateFrequency(in.readLong());  if (in.readBoolean())   cfg.setNetworkSendRetryCount(in.readInt());  if (in.readBoolean())   cfg.setNetworkSendRetryDelay(in.readLong());  if (in.readBoolean())   cfg.setNetworkTimeout(in.readLong());  String workDir=in.readString();  if (workDir != null)   cfg.setWorkDirectory(workDir);  String localHost=in.readString();  if (localHost != null)   cfg.setLocalHost(localHost);  if (in.readBoolean())   cfg.setDaemon(in.readBoolean());  if (in.readBoolean())   cfg.setLateAffinityAssignment(in.readBoolean());  readCacheConfigurations(in,cfg);  readDiscoveryConfiguration(in,cfg);  if (in.readBoolean()) {    TcpCommunicationSpi comm=new TcpCommunicationSpi();    comm.setAckSendThreshold(in.readInt());    comm.setConnectTimeout(in.readLong());    comm.setDirectBuffer(in.readBoolean());    comm.setDirectSendBuffer(in.readBoolean());    comm.setIdleConnectionTimeout(in.readLong());    comm.setLocalAddress(in.readString());    comm.setLocalPort(in.readInt());    comm.setLocalPortRange(in.readInt());    comm.setMaxConnectTimeout(in.readLong());    comm.setMessageQueueLimit(in.readInt());    comm.setReconnectCount(in.readInt());    comm.setSelectorsCount(in.readInt());    comm.setSlowClientQueueLimit(in.readInt());    comm.setSocketReceiveBuffer(in.readInt());    comm.setSocketSendBuffer(in.readInt());    comm.setTcpNoDelay(in.readBoolean());    comm.setUnacknowledgedMessagesBufferSize(in.readInt());    cfg.setCommunicationSpi(comm);  }  if (in.readBoolean()) {    if (cfg.getBinaryConfiguration() == null)     cfg.setBinaryConfiguration(new BinaryConfiguration());    cfg.getBinaryConfiguration().setCompactFooter(in.readBoolean());  }  int attrCnt=in.readInt();  if (attrCnt > 0) {    Map<String,Object> attrs=new HashMap<>(attrCnt);    for (int i=0; i < attrCnt; i++)     attrs.put(in.readString(),in.readObject());    cfg.setUserAttributes(attrs);  }  if (in.readBoolean()) {    AtomicConfiguration atomic=new AtomicConfiguration();    atomic.setAtomicSequenceReserveSize(in.readInt());    atomic.setBackups(in.readInt());    atomic.setCacheMode(CacheMode.fromOrdinal(in.readInt()));    cfg.setAtomicConfiguration(atomic);  }  if (in.readBoolean()) {    TransactionConfiguration tx=new TransactionConfiguration();    tx.setPessimisticTxLogSize(in.readInt());    tx.setDefaultTxConcurrency(TransactionConcurrency.fromOrdinal(in.readInt()));    tx.setDefaultTxIsolation(TransactionIsolation.fromOrdinal(in.readInt()));    tx.setDefaultTxTimeout(in.readLong());    tx.setPessimisticTxLogLinger(in.readInt());    cfg.setTransactionConfiguration(tx);  }}  }
class C{  public void replaceBytes(int offset,int len,byte[] bytes){  if (len == 1) {    len=0;  }  table.replaceBytes(offset,len,bytes);  table.changeSelectionByOffset(table.anchorSelectionIndex,false);  int count=bytes == null ? 0 : bytes.length;  table.setSelectionByOffsets(offset,offset + count - 1);}  }
class C{  public static Set<String> createCharGramsShingles(String text){  Set<String> shingles=new HashSet<>();  for (int i=0; i < text.length() - CHAR_GRAM_LENGTH + 1; i++) {    String shingle=text.substring(i,i + CHAR_GRAM_LENGTH);    shingles.add(shingle);  }  return shingles;}  }
class C{  public static String tabString(String s,int tabSize){  return tabString(s,tabSize,Setup.isTabEnabled());}  }
class C{  @Override protected void createChildren(){  if (m_database.isLoaded()) {    for (    final INaviProject project : m_database.getContent().getProjects()) {      add(new CProjectNode(getProjectTree(),this,m_database,project,new CProjectContainer(m_database,project)));    }  }}  }
class C{  public static int indexOfIgnoreCase(String str,String substring,Locale locale){  return str.toLowerCase(locale).indexOf(substring.toLowerCase(locale));}  }
class C{  private String deleteSRDFMirrorSteps(final Workflow workflow,String waitFor,final List<VolumeDescriptor> sourceDescriptors){  log.info("START delete SRDF mirrors workflow");  Map<URI,Volume> sourcesVolumeMap=queryVolumes(sourceDescriptors);  StorageSystem system=null;  StorageSystem targetSystem=null;  List<URI> targetVolumeURIs=new ArrayList<URI>();  acquireWorkflowLockOrThrow(workflow,generateLocks(sourceDescriptors,sourcesVolumeMap));  if (canRemoveSrdfCg(sourcesVolumeMap)) {    log.info("Invoking SRDF Consistency Group Deletion with all its volumes");    return deleteAllSrdfVolumesInCG(sourcesVolumeMap,workflow,waitFor,sourceDescriptors);  }  Map<URI,RemoteDirectorGroup> srdfGroupMap=new HashMap<URI,RemoteDirectorGroup>();  Map<URI,List<URI>> srdfGroupToSourceVolumeMap=new HashMap<URI,List<URI>>();  Map<URI,List<URI>> srdfGroupToTargetVolumeMap=new HashMap<URI,List<URI>>();  Map<URI,String> srdfGroupToTargetVolumeAccessState=new HashMap<URI,String>();  Map<URI,String> srdfGroupToLastWaitFor=new HashMap<URI,String>();  for (  Volume source : sourcesVolumeMap.values()) {    StringSet srdfTargets=source.getSrdfTargets();    for (    String srdfTarget : srdfTargets) {      log.info("suspend and detach: source:{}, target:{}",source.getId(),srdfTarget);      URI targetURI=URI.create(srdfTarget);      Volume target=dbClient.queryObject(Volume.class,targetURI);      if (null == target) {        log.warn("Target volume {} not available for SRDF source vol {}",source.getId(),targetURI);        return waitFor;      }      log.info("target Volume {} with srdf group {}",target.getNativeGuid(),target.getSrdfGroup());      RemoteDirectorGroup group=dbClient.queryObject(RemoteDirectorGroup.class,target.getSrdfGroup());      system=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri());      targetSystem=dbClient.queryObject(StorageSystem.class,group.getRemoteStorageSystemUri());      boolean activeMode=target.getSrdfCopyMode() != null && target.getSrdfCopyMode().equals(Mode.ACTIVE.toString());      boolean consExempt=true;      if (activeMode) {        consExempt=false;      }      if (!source.hasConsistencyGroup()) {        Workflow.Method suspendMethod=suspendSRDFLinkMethod(system.getId(),source.getId(),targetURI,consExempt);        String suspendStep=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,SUSPEND_SRDF_MIRRORS_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),suspendMethod,null,null);        Workflow.Method detachMethod=detachVolumePairMethod(system.getId(),source.getId(),targetURI);        String detachStep=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,DETACH_SRDF_MIRRORS_STEP_DESC,suspendStep,system.getId(),system.getSystemType(),getClass(),detachMethod,null,null);        waitFor=detachStep;        if (activeMode) {          URI groupId=group.getId();          srdfGroupMap.put(groupId,group);          if (srdfGroupToSourceVolumeMap.get(groupId) == null) {            srdfGroupToSourceVolumeMap.put(groupId,new ArrayList<URI>());          }          if (srdfGroupToTargetVolumeMap.get(groupId) == null) {            srdfGroupToTargetVolumeMap.put(groupId,new ArrayList<URI>());          }          srdfGroupToSourceVolumeMap.get(groupId).add(source.getId());          srdfGroupToTargetVolumeMap.get(groupId).add(targetURI);          srdfGroupToLastWaitFor.put(groupId,waitFor);          srdfGroupToTargetVolumeAccessState.put(groupId,target.getAccessState());        }      } else {        targetVolumeURIs.add(targetURI);        Workflow.Method suspendPairMethod=suspendSRDFLinkMethod(system.getId(),source.getId(),targetURI,consExempt);        Workflow.Method resumePairMethod=resumeSyncPairMethod(system.getId(),source.getId(),targetURI);        if (activeMode) {          waitFor=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,SUSPEND_SRDF_MIRRORS_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),suspendPairMethod,resumePairMethod,null);        }        Workflow.Method removePairFromGroupMethod=removePairFromGroup(system.getId(),source.getId(),targetURI,true);        String removePairFromGroupWorkflowDesc=String.format(REMOVE_SRDF_PAIR_STEP_DESC,target.getSrdfCopyMode());        waitFor=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,removePairFromGroupWorkflowDesc,waitFor,system.getId(),system.getSystemType(),getClass(),removePairFromGroupMethod,rollbackMethodNullMethod(),null);        if (!activeMode) {          waitFor=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,SUSPEND_SRDF_MIRRORS_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),suspendPairMethod,null,null);        }        String detachVolumePairWorkflowDesc=String.format(DETACH_SRDF_PAIR_STEP_DESC,target.getSrdfCopyMode());        Workflow.Method detachPairMethod=detachVolumePairMethod(system.getId(),source.getId(),targetURI);        waitFor=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,detachVolumePairWorkflowDesc,waitFor,system.getId(),system.getSystemType(),getClass(),detachPairMethod,rollbackMethodNullMethod(),null);        if (activeMode) {          waitFor=workflow.createStep(RESUME_SRDF_MIRRORS_STEP_GROUP,RESUME_SRDF_MIRRORS_STEP_DESC,waitFor,system.getId(),system.getSystemType(),getClass(),resumePairMethod,rollbackMethodNullMethod(),null);        }      }    }  }  String lastDeleteSRDFMirrorStep=waitFor;  if (!srdfGroupMap.isEmpty()) {    for (    URI srdfGroupURI : srdfGroupMap.keySet()) {      RemoteDirectorGroup group=srdfGroupMap.get(srdfGroupURI);      if (srdfGroupToTargetVolumeAccessState.get(srdfGroupURI).equals(Volume.VolumeAccessState.NOT_READY.name())) {        log.info("Srdf group {} {} was already in a suspended state hence skipping resume on this group.",srdfGroupURI,group.getNativeGuid());        continue;      }      List<URI> sourceVolumes=srdfGroupToSourceVolumeMap.get(srdfGroupURI);      List<URI> targetVolumes=srdfGroupToTargetVolumeMap.get(srdfGroupURI);      String lastWaitFor=srdfGroupToLastWaitFor.get(srdfGroupURI);      system=dbClient.queryObject(StorageSystem.class,group.getSourceStorageSystemUri());      Workflow.Method resumeSRDFGroupMethod=resumeSRDFGroupMethod(system.getId(),group,sourceVolumes,targetVolumes);      lastDeleteSRDFMirrorStep=workflow.createStep(DELETE_SRDF_MIRRORS_STEP_GROUP,RESUME_SRDF_MIRRORS_STEP_DESC,lastWaitFor,system.getId(),system.getSystemType(),getClass(),resumeSRDFGroupMethod,null,null);    }  }  if (null != targetSystem) {    addStepToRefreshSystem(DELETE_SRDF_MIRRORS_STEP_GROUP,targetSystem,targetVolumeURIs,lastDeleteSRDFMirrorStep,workflow);  }  return DELETE_SRDF_MIRRORS_STEP_GROUP;}  }
class C{  public void writeBlocks(ByteBuf output) throws Exception {  int bitsPerBlock=4;  while (palette.size() > 1 << bitsPerBlock) {    bitsPerBlock+=1;  }  long maxEntryValue=(1L << bitsPerBlock) - 1;  output.writeByte(bitsPerBlock);  Type.VAR_INT.write(output,palette.size());  for (  int mappedId : palette) {    Type.VAR_INT.write(output,mappedId);  }  int length=(int)Math.ceil(SIZE * bitsPerBlock / 64.0);  Type.VAR_INT.write(output,length);  long[] data=new long[length];  for (int index=0; index < blocks.length; index++) {    int value=blocks[index];    int bitIndex=index * bitsPerBlock;    int startIndex=bitIndex / 64;    int endIndex=((index + 1) * bitsPerBlock - 1) / 64;    int startBitSubIndex=bitIndex % 64;    data[startIndex]=data[startIndex] & ~(maxEntryValue << startBitSubIndex) | ((long)value & maxEntryValue) << startBitSubIndex;    if (startIndex != endIndex) {      int endBitSubIndex=64 - startBitSubIndex;      data[endIndex]=data[endIndex] >>> endBitSubIndex << endBitSubIndex | ((long)value & maxEntryValue) >> endBitSubIndex;    }  }  for (  long l : data) {    Type.LONG.write(output,l);  }}  }
class C{  public static JPanel createRadiobox(String boxlabel,String[] buttons,int initiallySelected,ActionListener al){  JPanel jp=createPaletteJPanel(boxlabel);  ButtonGroup buttongroup=new ButtonGroup();  for (int j=0; j < buttons.length; j++) {    JRadioButton jrb=new JRadioButton(buttons[j]);    jrb.setActionCommand("" + j);    jp.add(jrb);    buttongroup.add(jrb);    if (al != null) {      jrb.addActionListener(al);    }    if (j == initiallySelected) {      jrb.setSelected(true);    } else {      jrb.setSelected(false);    }  }  return jp;}  }
class C{  public void doUndo(){  hexEditControl.undo();}  }
class C{  private static boolean containsOnlyInheritDoc(Reader reader,int length){  char[] content=new char[length];  try {    reader.read(content,0,length);  } catch (  IOException e) {    return false;  }  return new String(content).trim().equals("{@inheritDoc}");}  }
class C{  public static String createSigningString(String method,String md5,String mediaType,Date date,URI uri){  StringBuilder sb=new StringBuilder();  sb.append(method).append("\n");  sb.append(md5).append("\n");  sb.append(mediaType).append("\n");  sb.append(getHttpFormattedDate(date)).append("\n");  sb.append(uri);  return sb.toString();}  }
class C{  public Builder addUnicodeLocaleAttribute(String attribute){  try {    localeBuilder.addUnicodeLocaleAttribute(attribute);  } catch (  LocaleSyntaxException e) {    throw new IllformedLocaleException(e.getMessage(),e.getErrorIndex());  }  return this;}  }
class C{  @Override protected boolean initialize(){  Integer ival=(Integer)metadata.get("IMAGE.LINES");  if (ival == null) {    ival=(Integer)metadata.get("UNCOMPRESSED_FILE.IMAGE.LINES");  }  if (ival == null) {    System.err.println("LINES parameter missing.");    return (false);  }  rasterLength=ival;  ival=(Integer)metadata.get("IMAGE.LINE_SAMPLES");  if (ival == null) {    ival=(Integer)metadata.get("UNCOMPRESSED_FILE.IMAGE.LINE_SAMPLES");  }  if (ival == null) {    System.err.println("LINE_SAMPLES parameter missing");    return (false);  }  rasterWidth=ival;  ival=(Integer)metadata.get("IMAGE.BANDS");  if (ival == null) {    ival=(Integer)metadata.get("UNCOMPRESSED_FILE.IMAGE.BANDS");  }  if (ival == null)   ival=new Integer(1);  samplesPerPixel=ival;  ival=(Integer)metadata.get("IMAGE.SAMPLE_BITS");  if (ival == null) {    ival=(Integer)metadata.get("UNCOMPRESSED_FILE.IMAGE.SAMPLE_BITS");  }  if (ival == null) {    System.err.println("SAMPLE_BITS parameter missing.");    return (false);  }  byteOrder=ByteOrder.nativeOrder();  String type=(String)metadata.get("IMAGE.SAMPLE_TYPE");  if (type == null) {    type=(String)metadata.get("UNCOMPRESSED_FILE.IMAGE.SAMPLE_TYPE");  }  if (type == null) {    System.err.println("SAMPLE_TYPE parameter missing.");    return (false);  }  if (type.equals("PC_REAL")) {    dataType=DataType.Float;    bytesPerSample=4;  } else {    boolean unsigned=type.contains("UNSIGNED");    if (type.startsWith("LSB_")) {      byteOrder=ByteOrder.LITTLE_ENDIAN;    } else     if (type.startsWith("MSB_")) {      byteOrder=ByteOrder.BIG_ENDIAN;    }    if (ival == 32) {      if (unsigned) {        dataType=DataType.UnsignedInteger;      } else {        dataType=DataType.Integer;      }      bytesPerSample=4;    } else     if (ival == 16) {      if (unsigned) {        dataType=DataType.UnsignedShort;      } else {        dataType=DataType.Short;      }      bytesPerSample=2;    } else     if (ival == 8) {      if (unsigned) {        dataType=DataType.UnsignedByte;      } else {        dataType=DataType.Byte;      }      bytesPerSample=1;    } else {      System.err.println("Cannot determine data type from SAMPLE_TYPE=" + type + ", SAMPLE_BITS="+ ival+ ".");      dataType=DataType.Unknown;    }  }  bandStorageType=(String)metadata.get("IMAGE.BAND_STORAGE_TYPE");  if (bandStorageType == null) {    bandStorageType=(String)metadata.get("UNCOMPRESSED_FILE.IMAGE.BAND_STORAGE_TYPE");  }  String str=properties.getProperty("PDS.MinimumValueKey","IMAGE.VALID_MINIMUM");  String[] minList=str.split(",");  for (int i=0; i < minList.length; ++i) {    Float fval=(Float)metadata.get(minList[i]);    if ((fval == null) && minList[i].startsWith("IMAGE.")) {      fval=(Float)metadata.get("UNCOMPRESSED_FILE." + minList[i]);    }    if (fval != null) {      minimum=new double[samplesPerPixel];      for (int j=0; j < samplesPerPixel; ++j) {        minimum[j]=fval;      }      break;    }  }  str=properties.getProperty("PDS.MaximumValueKey","IMAGE.VALID_MAXIMUM");  String[] maxList=str.split(",");  for (int i=0; i < maxList.length; ++i) {    Float fval=(Float)metadata.get(maxList[i]);    if ((fval == null) && maxList[i].startsWith("IMAGE.")) {      fval=(Float)metadata.get("UNCOMPRESSED_FILE." + maxList[i]);    }    if (fval != null) {      maximum=new double[samplesPerPixel];      for (int j=0; j < samplesPerPixel; ++j) {        maximum[j]=fval;      }      break;    }  }  str=properties.getProperty("PDS.MissingValueKey","IMAGE.MISSING_CONSTANT");  String[] missList=str.split(",");  missing=Float.NaN;  for (int i=0; i < missList.length; ++i) {    Float fval=(Float)metadata.get(missList[i]);    if ((fval == null) && missList[i].startsWith("IMAGE.")) {      fval=(Float)metadata.get("UNCOMPRESSED_FILE." + missList[i]);    }    if (fval != null) {      missing=fval;      break;    }  }  String imgPtr=(String)metadata.get("^IMAGE");  if (imgPtr == null) {    imgPtr=(String)metadata.get("UNCOMPRESSED_FILE.^IMAGE");    if (imgPtr == null) {      System.err.println("^IMAGE parameter missing.");      return (false);    }    imageStart=0;    dataFilePath=new File(new File(filePath).getParent(),imgPtr).getAbsolutePath();  } else {    imageStart=parser.getLong(imgPtr);    Long recordBytes=(Long)metadata.get("RECORD_BYTES");    if (recordBytes != null) {      imageStart=recordBytes * (imageStart - 1);    }    dataFilePath=filePath;  }  Float sF=(Float)metadata.get("IMAGE.SCALING_FACTOR");  if (sF == null)   sF=(Float)metadata.get("UNCOMPRESSED_FILE.IMAGE.SCALING_FACTOR");  if (sF != null)   scalingFactor=sF;  getProjectionInfo();  System.out.println("Initialized " + filePath);  System.out.println("Width = " + rasterWidth + ", Length = "+ rasterLength+ ", SamplesPerPixel = "+ samplesPerPixel+ ", Data Type = "+ dataType+ ", Scaling Factor = "+ scalingFactor);  System.out.println("Minimum Sample Value = " + (minimum == null ? "Unknown" : minimum[0]) + ", Maximum Sample Value = "+ (maximum == null ? "Unknown" : maximum[0])+ ", Missing Value = "+ missing);  System.out.println(projInfo);  if (dataType == DataType.Unknown) {    System.err.println("Unknown data type.");    return (false);  }  initialized=true;  return (true);}  }
class C{  public JUnit4(Class<?> klass) throws InitializationError {  super(klass);}  }
class C{  public Link(double lat1,double lon1,double lat2,double lon2,String details){  if (logger.isLoggable(Level.FINE)) {    logger.fine("Link(" + lat1 + ", "+ lon1+ ", "+ lat2+ ", "+ lon2+ ", "+ details+ ")");  }  this.lat=lat1;  this.lon=lon1;  this.lat2=lat2;  this.lon2=lon2;  if (details != null) {    this.details=details;  } else {    this.details="";  }  OMLine link=new OMLine(lat1,lon1,lat2,lon2,OMGraphic.LINETYPE_GREATCIRCLE);  setLocationMarker(link);}  }
class C{  public void paintComponent(Graphics g){  super.paintComponent(g);  paint((Graphics2D)g);}  }
class C{  public TextTable(final Set<String> dictionary){  init(dictionary.size(),1);  int i=0;  for (  String string : dictionary) {    setLogicalValue(i,0,string,false);    i++;  }  fireTableDataChanged();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.266 -0500",hash_original_method="99279A6650B0C93FCFD173D39A34CB97",hash_generated_method="BDA53A6D76765E123EF8FE96139CAA8D") public static final void readExceptionFromParcel(Parcel reply){  int code=reply.readExceptionCode();  if (code == 0)   return;  String msg=reply.readString();  DatabaseUtils.readExceptionFromParcel(reply,msg,code);}  }
class C{  public static void execute(ExecutablePool pool,String region,Object key,int interestType,boolean isClosing,boolean keepAlive){  AbstractOp op=new UnregisterInterestOpImpl(region,key,interestType,isClosing,keepAlive);  pool.executeOnAllQueueServers(op);}  }
class C{  public Value sample(){  int index=sampler.nextInt(actionValues.size());  if (actionValuesAsArray == null) {    actionValuesAsArray=actionValues.toArray(new Value[actionValues.size()]);  }  return actionValuesAsArray[index];}  }
class C{  @Override public boolean doIsEquals(NormalAnnotationExpr first,NormalAnnotationExpr second){  boolean equals=true;  if (!first.getName().equals(second.getName()))   equals=false;  if (equals == true) {    if (first.getPairs() == null)     return second.getPairs() == null;    if (!isSmallerHasEqualsInBigger(first.getPairs(),second.getPairs(),true))     return false;  }  return equals;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public String generateFailAssertion(AbstractStatement statement,Throwable exception){  Class<?> ex=getExceptionClassToUse(exception);  String stmt=" fail(\"Expecting exception: " + getClassName(ex) + "\");"+ NEWLINE;  if (isTestUnstable()) {    stmt="// " + stmt + getUnstableTestComment();  }  return NEWLINE + " " + stmt;}  }
class C{  public void startVideoCastControllerActivity(Context context,Bundle mediaWrapper,int position,boolean shouldStart,JSONObject customData){  Intent intent=new Intent(context,VideoCastControllerActivity.class);  intent.putExtra(EXTRA_MEDIA,mediaWrapper);  intent.putExtra(EXTRA_START_POINT,position);  intent.putExtra(EXTRA_SHOULD_START,shouldStart);  if (customData != null) {    intent.putExtra(EXTRA_CUSTOM_DATA,customData.toString());  }  setFlagForStartCastControllerActivity();  context.startActivity(intent);}  }
class C{  public void testDifferentRange(){  ((MergeNominalValues)m_Filter).setAttributeIndices("1,3");  ((MergeNominalValues)m_Filter).setInvertSelection(true);  Instances result=useFilter();  assertEquals(m_Instances.numAttributes(),result.numAttributes());  assertEquals(m_Instances.numInstances(),result.numInstances());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.258 -0500",hash_original_method="F2F101D23D8556E25BBA4D0A405F0CD3",hash_generated_method="EE9270B7DA4BE02B4DA14C8FE019870C") public void translate(int dx,int dy,Region dst){  addTaintLocal(dx);  addTaintLocal(dy);  if (dst != null)   addTaintLocal(dst.getTaintInt());}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static boolean parseMinusBareword(PsiBuilder b,int l){  assert b instanceof PerlBuilder;  if (((PerlBuilder)b).isStringify() && (b.getTokenType() == OPERATOR_MINUS || b.getTokenType() == OPERATOR_MINUS_MINUS) && b.lookAhead(1) == IDENTIFIER) {    PsiBuilder.Marker m=b.mark();    b.advanceLexer();    if (!PerlSubUtil.isBuiltIn(b.getTokenText())) {      b.advanceLexer();      m.collapse(STRING_CONTENT);      return true;    }    m.drop();  }  return false;}  }
class C{  public ToastingBurstFacadeDecorator(BurstFacade facadeToDecorate,BurstToaster toaster){  mBurstFacade=facadeToDecorate;  mToaster=toaster;}  }
class C{  public WallForce(float gravConst,float x1,float y1,float x2,float y2){  params=new float[]{gravConst};  minValues=new float[]{DEFAULT_MIN_GRAV_CONSTANT};  maxValues=new float[]{DEFAULT_MAX_GRAV_CONSTANT};  this.x1=x1;  this.y1=y1;  this.x2=x2;  this.y2=y2;  dx=x2 - x1;  dy=y2 - y1;  float r=(float)Math.sqrt(dx * dx + dy * dy);  if (dx != 0.0)   dx/=r;  if (dy != 0.0)   dy/=r;}  }
class C{  public boolean installBinary(Context context,int sourceId,String destName,String mode){  Installer installer;  try {    installer=new Installer(context);  } catch (  IOException ex) {    if (RootTools.debugMode) {      ex.printStackTrace();    }    return false;  }  return (installer.installBinary(sourceId,destName,mode));}  }
class C{  @Override public boolean isStealthOn(){  for (  Mounted mEquip : getMisc()) {    MiscType mtype=(MiscType)mEquip.getType();    if (mtype.hasFlag(MiscType.F_STEALTH)) {      if (mEquip.curMode().equals("On")) {        return true;      }    }  }  return false;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  @Override public int size(){  return size;}  }
class C{  public E last(){  return backingMap.lastKey();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DatatypePackage.ENUM_LITERAL__NAME:    return getName();case DatatypePackage.ENUM_LITERAL__DESCRIPTION:  return getDescription();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public void removeNotify(Drawing drawing){  if (getStartConnector() != null && getEndConnector() != null) {    handleDisconnect(getStartConnector(),getEndConnector());  }  super.removeNotify(drawing);}  }
class C{  RegularPolygon(int newN,double newSide,double newX,double newY){  n=newN;  side=newSide;  x=newX;  y=newY;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void addView(TextAnnotation record) throws AnnotatorException {  if (!record.hasView(tokensfield) && !record.hasView(sentencesfield)) {    throw new AnnotatorException("Record must be tokenized and sentence split first");  }  long startTime=System.currentTimeMillis();  List<Token> input=LBJavaUtils.recordToLBJTokens(record);  List<Constituent> tokens=record.getView(ViewNames.TOKENS).getConstituents();  TokenLabelView posView=new TokenLabelView(ViewNames.POS,getAnnotatorName(),record,1.0);  int tcounter=0;  for (  Token lbjtoken : input) {    tagger.discreteValue(lbjtoken);    Constituent token=tokens.get(tcounter);    Constituent label=new Constituent(tagger.discreteValue(lbjtoken),ViewNames.POS,record,token.getStartSpan(),token.getEndSpan());    posView.addConstituent(label);    tcounter++;  }  long endTime=System.currentTimeMillis();  logger.debug("Tagged input in {}ms",endTime - startTime);  record.addView(ViewNames.POS,posView);}  }
class C{  public X509Certificate generate(PrivateKey key,SecureRandom random) throws CertificateEncodingException, IllegalStateException, NoSuchAlgorithmException, SignatureException, InvalidKeyException {  TBSCertificate tbsCert=tbsGen.generateTBSCertificate();  byte[] signature;  try {    signature=X509Util.calculateSignature(sigOID,signatureAlgorithm,key,random,tbsCert);  } catch (  IOException e) {    throw new ExtCertificateEncodingException("exception encoding TBS cert",e);  }  return generateJcaObject(tbsCert,signature);}  }
class C{  public static void copyEntityProperties(Object source,Object target){  org.springframework.beans.BeanUtils.copyProperties(source,target,COPY_IGNORED_PROPERTIES);}  }
class C{  boolean needsCompilation(Hashtable check,ClassDeclaration c){switch (c.getStatus()) {case CS_UNDEFINED:    if (tracing)     dtEnter("needsCompilation: UNDEFINED " + c.getName());  loadDefinition(c);return needsCompilation(check,c);case CS_UNDECIDED:if (tracing) dtEnter("needsCompilation: UNDECIDED " + c.getName());if (check.get(c) == null) {check.put(c,c);BinaryClass bin=(BinaryClass)c.getClassDefinition();for (Enumeration e=bin.getDependencies(); e.hasMoreElements(); ) {ClassDeclaration dep=(ClassDeclaration)e.nextElement();if (needsCompilation(check,dep)) {  c.setDefinition(bin,CS_SOURCE);  if (tracing)   dtExit("needsCompilation: YES (source) " + c.getName());  return true;}}}if (tracing) dtExit("needsCompilation: NO (undecided) " + c.getName());return false;case CS_BINARY:if (tracing) {dtEnter("needsCompilation: BINARY " + c.getName());dtExit("needsCompilation: NO (binary) " + c.getName());}return false;}if (tracing) dtExit("needsCompilation: YES " + c.getName());return true;}  }
class C{  protected JavaClassConverter(final Mapper mapper){  this.mapper=mapper;}  }
class C{  private void cleanupMinidumpFile(){  if (!CrashFileManager.tryMarkAsUploaded(mFileToUpload)) {    Log.w(TAG,"Unable to mark " + mFileToUpload + " as uploaded.");    if (!mFileToUpload.delete()) {      Log.w(TAG,"Cannot delete " + mFileToUpload);    }  }}  }
class C{  public void uninitialize(){  for (  TabModel model : mTabModelSelector.getModels()) {    model.removeObserver(mTabModelObserver);  }  mTabModelSelector.removeObserver(mTabModelSelectorObserver);}  }
class C{  private int decodePulses(Pulse pulse,int swbOffset[],int numSwb){  pulse.numPulse=br.read(2) + 1;  int pulseSwb=br.read(6);  if (pulseSwb >= numSwb) {    return -1;  }  pulse.pos[0]=swbOffset[pulseSwb];  pulse.pos[0]+=br.read(5);  if (pulse.pos[0] >= swbOffset[numSwb]) {    return -1;  }  pulse.amp[0]=br.read(4);  for (int i=1; i < pulse.numPulse; i++) {    pulse.pos[i]=br.read(5) + pulse.pos[i - 1];    if (pulse.pos[i] >= swbOffset[numSwb]) {      return -1;    }    pulse.amp[i]=br.read(4);  }  return 0;}  }
class C{  public static String changeIndent(String code,int codeIndentLevel,int tabWidth,int indentWidth,String newIndent,String lineDelim){  return IndentManipulation.changeIndent(code,codeIndentLevel,tabWidth,indentWidth,newIndent,lineDelim);}  }
class C{  public boolean isFileTransferAutoAccepted(){  return readBoolean(RcsSettingsData.AUTO_ACCEPT_FILE_TRANSFER);}  }
class C{  public ThermometerPlot(ValueDataset dataset){  super();  this.padding=new RectangleInsets(UnitType.RELATIVE,0.05,0.05,0.05,0.05);  this.dataset=dataset;  if (dataset != null) {    dataset.addChangeListener(this);  }  NumberAxis axis=new NumberAxis(null);  axis.setStandardTickUnits(NumberAxis.createIntegerTickUnits());  axis.setAxisLineVisible(false);  axis.setPlot(this);  axis.addChangeListener(this);  this.rangeAxis=axis;  setAxisRange();}  }
class C{  public boolean isOmitNullAttributes(){  return omitNullAttributes;}  }
class C{  @Override public int indexOf(Object o){  Integer index=indexes.get(o);  if (index == null)   return -1;  return index;}  }
class C{  public Poi queryForId(Long id){  Poi poi=poiDao.queryForId(id);  if (poi == null) {    return null;  }  poiTypeDao.refresh(poi.getType());  poi.setTags(loadLazyForeignCollection(poi.getTags()));  poi.getType().setTags(loadLazyForeignCollection(poi.getType().getTags()));  return poi;}  }
class C{  public static IStatus validatePackageName(String name,String sourceLevel,String complianceLevel){  if (name == null) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.INSTANCE.convention_package_nullName(),null);  }  if (!NameUtils.checkFileName(name)) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,"Package name not valid (only latin and digits)",null);  }  int length;  if ((length=name.length()) == 0) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.INSTANCE.convention_package_emptyName(),null);  }  if (name.charAt(0) == DOT || name.charAt(length - 1) == DOT) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.INSTANCE.convention_package_dotName(),null);  }  if (CharOperation.isWhitespace(name.charAt(0)) || CharOperation.isWhitespace(name.charAt(name.length() - 1))) {    return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.INSTANCE.convention_package_nameWithBlanks(),null);  }  int dot=0;  while (dot != -1 && dot < length - 1) {    if ((dot=name.indexOf(DOT,dot + 1)) != -1 && dot < length - 1 && name.charAt(dot + 1) == DOT) {      return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.INSTANCE.convention_package_consecutiveDotsName(),null);    }  }  String[] split=name.split("\\.");  boolean firstToken=true;  IStatus warningStatus=null;  for (  String typeName : split) {    typeName=typeName.trim();    char[] scannedID=scannedIdentifier(typeName,sourceLevel,complianceLevel);    if (scannedID == null) {      return new Status(IStatus.ERROR,JavaCore.PLUGIN_ID,-1,Messages.INSTANCE.convention_illegalIdentifier(typeName),null);    }    if (firstToken && scannedID.length > 0 && ScannerHelper.isUpperCase(scannedID[0])) {      if (warningStatus == null) {        warningStatus=new Status(IStatus.WARNING,JavaCore.PLUGIN_ID,-1,Messages.INSTANCE.convention_package_uppercaseName(),null);      }    }    firstToken=false;  }  if (warningStatus != null) {    return warningStatus;  }  return VERIFIED_OK;}  }
class C{  public GenerateRoutes(EObject model,File targetFolder,List<? extends Object> arguments) throws IOException {  initialize(model,targetFolder,arguments);}  }
class C{  public final CC maxHeight(String size){  ver.setSize(LayoutUtil.derive(ver.getSize(),null,null,ConstraintParser.parseUnitValue(size,false)));  return this;}  }
class C{  private boolean isErodedCompletely(LinearRing ring,double bufferDistance){  Coordinate[] ringCoord=ring.getCoordinates();  double minDiam=0.0;  if (ringCoord.length < 4)   return bufferDistance < 0;  if (ringCoord.length == 4)   return isTriangleErodedCompletely(ringCoord,bufferDistance);  Envelope env=ring.getEnvelopeInternal();  double envMinDimension=Math.min(env.getHeight(),env.getWidth());  if (bufferDistance < 0.0 && 2 * Math.abs(bufferDistance) > envMinDimension)   return true;  return false;}  }
class C{  private void fillIDValues() throws SQLException {  for (  X_I_Forecast ifl : getRecords(false,m_IsImportOnlyNoErrors)) {    int M_Forecast_ID=0;    if (ifl.getM_Forecast_ID() > 0)     M_Forecast_ID=getID(MForecast.Table_Name,"M_Forecast_ID = ?",ifl.getM_Forecast_ID());    int AD_Org_ID=0;    if (ifl.getAD_Org_ID() > 0)     AD_Org_ID=getID(MOrg.Table_Name,"AD_Org_ID = ?",ifl.getAD_Org_ID());    if (AD_Org_ID <= 0 && ifl.getOrgValue() != null) {      AD_Org_ID=getID(MOrg.Table_Name,"Value = ?",ifl.getOrgValue());      ifl.setAD_Org_ID(AD_Org_ID);    } else     ifl.setAD_Org_ID(AD_Org_ID);    int SalesRep_ID=0;    if (ifl.getSalesRep_ID() > 0)     SalesRep_ID=getID(MUser.Table_Name,"AD_User_ID = ?",ifl.getSalesRep_ID());    if (SalesRep_ID <= 0 && ifl.getSalesRep_Name() != null) {      SalesRep_ID=getID(MUser.Table_Name,"Name = ?",ifl.getSalesRep_Name());      ifl.setSalesRep_ID(SalesRep_ID);    } else     ifl.setSalesRep_ID(SalesRep_ID);    int M_Product_ID=0;    if (ifl.getM_Product_ID() > 0)     M_Product_ID=getID(MProduct.Table_Name,"M_Product_ID = ?",ifl.getM_Product_ID());    if (M_Product_ID <= 0 && ifl.getProductValue() != null) {      M_Product_ID=getID(MProduct.Table_Name,"Value = ?",ifl.getProductValue());      ifl.setM_Product_ID(M_Product_ID);    } else     ifl.setM_Product_ID(M_Product_ID);    int M_Warehouse_ID=0;    if (ifl.getM_Warehouse_ID() > 0)     M_Warehouse_ID=getID(MWarehouse.Table_Name,"M_Warehouse_ID = ?",ifl.getM_Warehouse_ID());    if (M_Warehouse_ID <= 0 && ifl.getWarehouseValue() != null) {      M_Warehouse_ID=getID(MWarehouse.Table_Name,"Value = ?",ifl.getWarehouseValue());      ifl.setM_Warehouse_ID(M_Warehouse_ID);    } else     ifl.setM_Warehouse_ID(M_Warehouse_ID);    ifl.saveEx();    StringBuffer err=new StringBuffer("");    if (ifl.getM_Forecast_ID() <= 0)     err.append(" @M_Forecast_ID@ @NotFound@,");    if (ifl.getAD_Org_ID() <= 0)     err.append(" @AD_Org_ID@ @NotFound@,");    if (ifl.getM_Product_ID() <= 0)     err.append(" @M_Product_ID@ @NotFound@,");    if (ifl.getM_Warehouse_ID() <= 0)     err.append(" @M_Warehouse_ID@ @NotFound@,");    if (ifl.getDatePromised() == null)     err.append(" @DatePromised@ @NotFound@,");    if (err.toString() != null && err.toString().length() > 0) {      notimported++;      ifl.setI_ErrorMsg(Msg.parseTranslation(getCtx(),err.toString()));      ifl.saveEx();    }    ifl.saveEx();    commitEx();  }}  }
class C{  public BetweenQueryExp(ValueExp v1,ValueExp v2,ValueExp v3){  exp1=v1;  exp2=v2;  exp3=v3;}  }
class C{  public InvalidServiceAddress(){  requestFileName="getstate.query";}  }
class C{  public static Date parse(String date,ParsePosition pos) throws ParseException {  Exception fail=null;  try {    int offset=pos.getIndex();    int year=parseInt(date,offset,offset+=4);    if (checkOffset(date,offset,'-')) {      offset+=1;    }    int month=parseInt(date,offset,offset+=2);    if (checkOffset(date,offset,'-')) {      offset+=1;    }    int day=parseInt(date,offset,offset+=2);    int hour=0;    int minutes=0;    int seconds=0;    int milliseconds=0;    boolean hasT=checkOffset(date,offset,'T');    if (!hasT && (date.length() <= offset)) {      Calendar calendar=new GregorianCalendar(year,month - 1,day);      pos.setIndex(offset);      return calendar.getTime();    }    if (hasT) {      hour=parseInt(date,offset+=1,offset+=2);      if (checkOffset(date,offset,':')) {        offset+=1;      }      minutes=parseInt(date,offset,offset+=2);      if (checkOffset(date,offset,':')) {        offset+=1;      }      if (date.length() > offset) {        char c=date.charAt(offset);        if (c != 'Z' && c != '+' && c != '-') {          seconds=parseInt(date,offset,offset+=2);          if (seconds > 59 && seconds < 63)           seconds=59;          if (checkOffset(date,offset,'.')) {            offset+=1;            int endOffset=indexOfNonDigit(date,offset + 1);            int parseEndOffset=Math.min(endOffset,offset + 3);            int fraction=parseInt(date,offset,parseEndOffset);switch (parseEndOffset - offset) {case 2:              milliseconds=fraction * 10;            break;case 1:          milliseconds=fraction * 100;        break;default :      milliseconds=fraction;  }  offset=endOffset;}}}}if (date.length() <= offset) {throw new IllegalArgumentException("No time zone indicator");}TimeZone timezone=null;char timezoneIndicator=date.charAt(offset);if (timezoneIndicator == 'Z') {timezone=TIMEZONE_UTC;offset+=1;} else if (timezoneIndicator == '+' || timezoneIndicator == '-') {String timezoneOffset=date.substring(offset);timezoneOffset=timezoneOffset.length() >= 5 ? timezoneOffset : timezoneOffset + "00";offset+=timezoneOffset.length();if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {timezone=TIMEZONE_UTC;} else {String timezoneId="GMT" + timezoneOffset;timezone=TimeZone.getTimeZone(timezoneId);String act=timezone.getID();if (!act.equals(timezoneId)) {String cleaned=act.replace(":","");if (!cleaned.equals(timezoneId)) {  throw new IndexOutOfBoundsException("Mismatching time zone indicator: " + timezoneId + " given, resolves to "+ timezone.getID());}}}} else {throw new IndexOutOfBoundsException("Invalid time zone indicator '" + timezoneIndicator + "'");}Calendar calendar=new GregorianCalendar(timezone);calendar.setLenient(false);calendar.set(Calendar.YEAR,year);calendar.set(Calendar.MONTH,month - 1);calendar.set(Calendar.DAY_OF_MONTH,day);calendar.set(Calendar.HOUR_OF_DAY,hour);calendar.set(Calendar.MINUTE,minutes);calendar.set(Calendar.SECOND,seconds);calendar.set(Calendar.MILLISECOND,milliseconds);pos.setIndex(offset);return calendar.getTime();} catch (IndexOutOfBoundsException e) {fail=e;}catch (NumberFormatException e) {fail=e;}catch (IllegalArgumentException e) {fail=e;}String input=(date == null) ? null : ('"' + date + "'");String msg=fail.getMessage();if (msg == null || msg.isEmpty()) {msg="(" + fail.getClass().getName() + ")";}ParseException ex=new ParseException("Failed to parse date [" + input + "]: "+ msg,pos.getIndex());ex.initCause(fail);throw ex;}  }
class C{  @Override public String toString(){  String clientMembership="JOINED";switch (this.eventType) {case LEFT:    clientMembership="LEFT";  break;case CRASHED:clientMembership="CRASHED and left";break;default :break;}return "Client with Id: " + this.clientId + " running on host: "+ this.clientHost+ " "+ clientMembership+ " the server: "+ this.getSender();}  }
class C{  private void createGui(){  final Graph2DView view=new ZyGraph2DView(new Graph2D());  view.setScrollBarPolicy(ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);  final DefaultBackgroundRenderer backgroundRenderer=new DefaultBackgroundRenderer(view);  backgroundRenderer.setImage(BACKGROUND_IMAGE);  backgroundRenderer.setMode(DefaultBackgroundRenderer.CENTERED);  backgroundRenderer.setColor(Color.white);  view.setBackgroundRenderer(backgroundRenderer);  add(view,BorderLayout.CENTER);}  }
class C{  public void reset(){  npoints=0;  bounds=null;  path=new GeneralPath();  closedPath=null;}  }
class C{  @Override @Action(value="/reports/collectionSummaryHeadWise-criteria") public String criteria(){  addRelatedEntity("department",Department.class,"name");  addDropdownData("servicetypeList",collectionsUtil.getBillingServiceList());  setupDropdownDataExcluding();  setReportParam(EGOV_FROM_DATE,new Date());  setReportParam(EGOV_TO_DATE,new Date());  addDropdownData("receiptStatuses",getPersistenceService().findAllByNamedQuery(CollectionConstants.STATUS_OF_RECEIPTS));  addDropdownData("revenueHeads",chartOfAccountsHibernateDAO.getActiveAccountsForTypes(CollectionConstants.REVENUEHEADS));  return INDEX;}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public static Shape layoutGlyphVector(GlyphVector glyphs,Shape path){  return layoutGlyphVector(glyphs,path,ALIGN_START);}  }
class C{  public JvmLauncherRequest(boolean server,Loggable loggable,boolean ssh){  if (loggable == null) {    throw new IllegalArgumentException("JVM launch loggable missing");  }  this.server=server;  this.loggable=loggable;  this.ssh=ssh;}  }
class C{  public boolean parseTerm(PerlBuilder b,int l){  return false;}  }
class C{  public PipedInputStream(PipedOutputStream src,int pipeSize) throws IOException {  initPipe(pipeSize);  connect(src);}  }
class C{  private String createWorkflowStepForDetachNativeFullCopy(Workflow workflow,StorageSystem nativeSystem,List<URI> nativeFullCopyURIs,String waitFor,Workflow.Method rollbackMethod){  URI nativeSystemURI=nativeSystem.getId();  Workflow.Method detachFullCopyMethod=new Workflow.Method(DETACH_FC_METHOD_NAME,nativeSystemURI,nativeFullCopyURIs);  workflow.createStep(DETACH_FULL_COPY_STEP,String.format("Detach native full copies: %s",nativeFullCopyURIs),waitFor,nativeSystemURI,nativeSystem.getSystemType(),BlockDeviceController.class,detachFullCopyMethod,rollbackMethod,null);  _log.info("Created workflow step to detach native full copies {}",nativeFullCopyURIs);  return DETACH_FULL_COPY_STEP;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:45.100 -0500",hash_original_method="DAC212856E10133D124E798AA1F9AF10",hash_generated_method="635313FC4207BD4AE0842E8F92D92CBE") public boolean handleSslErrorRequest(SslError error){  if (DebugFlags.LOAD_LISTENER) {    Log.v(LOGTAG,"LoadListener.handleSslErrorRequest(): url:" + url() + " primary error: "+ error.getPrimaryError()+ " certificate: "+ error.getCertificate());  }  if (Network.getInstance(mContext).checkSslPrefTable(this,error)) {    return true;  }  if (isSynchronous()) {    mRequestHandle.handleSslErrorResponse(false);    return true;  }  sendMessageInternal(obtainMessage(MSG_SSL_ERROR,error));  if (!mCancelled) {    mSslErrorRequestHandle=mRequestHandle;  }  return !mCancelled;}  }
class C{  public static void main(String[] args) throws AuthenticationException {  SimpleCommandLineParser parser=new SimpleCommandLineParser(args);  String username=parser.getValue("username","user","u");  String password=parser.getValue("password","pass","p");  boolean help=parser.containsKey("help","h");  if (help || username == null || password == null) {    usage();    System.exit(1);  }  ListDemo demo=new ListDemo(new SpreadsheetService("List Demo"),System.out);  demo.run(username,password);}  }
class C{  public static long elevationAtTick(GeoTimeSerie gts,long tick){  if (null == gts.elevations) {    return GeoTimeSerie.NO_ELEVATION;  }  sort(gts,false);  int idx=Arrays.binarySearch(gts.ticks,0,gts.values,tick);  if (idx < 0) {    return GeoTimeSerie.NO_ELEVATION;  } else {    return gts.elevations[idx];  }}  }
class C{  public VNXeCommandJob deleteLunAsync(String lunId,boolean isForceSnapDeletion) throws VNXeException {  BlockLunRequests req=new BlockLunRequests(_client);  VNXeLun lun=req.getLun(lunId);  if (lun == null) {    String error="Could not find lun: " + lunId;    _logger.error(error);    throw VNXeException.exceptions.vnxeCommandFailed(error);  }  return deleteResourceAsync(lunId,isForceSnapDeletion);}  }
class C{  public static <T>ListView<T> list(String tip,Callback<T,ObservableValue<Boolean>> cb){  ListView lst=new ListView<>();  lst.setCellFactory(CheckBoxListCell.forListView(cb));  lst.setMinHeight(70);  lst.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);  tooltip(lst,tip);  return lst;}  }
class C{  private String addUiObject(UiObject obj){  String key=UUID.randomUUID().toString();  uiObjects.put(key,obj);  Timer clearTimer=new Timer();  clearTimer.schedule(new ClearUiObjectTimerTask(key),60000);  return key;}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder("CollectionCertStoreParameters: [\ncollection: ");  sb.append(getCollection().toString());  sb.append("\n]");  return sb.toString();}  }
class C{  private static void stackMoveHelper(Assembler asm,GPR dest,Offset off){  if (WORDSIZE == 4) {    if (off.isZero()) {      asm.emitMOV_Reg_RegInd(dest,SP);    } else {      asm.emitMOV_Reg_RegDisp(dest,SP,off);    }  } else {    if (off.isZero()) {      asm.emitMOV_Reg_RegInd_Quad(dest,SP);    } else {      asm.emitMOV_Reg_RegDisp_Quad(dest,SP,off);    }  }}  }
class C{  @Deprecated public final SourceSection createSection(int startLine,int startColumn,int charIndex,int length){  checkRange(charIndex,length);  return createSectionImpl(startLine,startColumn,charIndex,length);}  }
class C{  public static byte[] readFullyNoClose(InputStream in) throws IOException {  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  byte[] buffer=new byte[1024];  int count;  while ((count=in.read(buffer)) != -1) {    bytes.write(buffer,0,count);  }  return bytes.toByteArray();}  }
class C{  public void testFullProb() throws Exception {  runTestPoiSelection(new double[]{1.0,0.0,0.0},0);  runTestPoiSelection(new double[]{0.0,1.0,0.0},0);  runTestPoiSelection(new double[]{0.0,0.0,1.0},0);  runTestPoiSelection(new double[]{0.0,0.0,0.0},0);}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState.stage != startState.taskState.stage) {    ServiceUtils.logInfo(this,"Moving to stage %s",patchState.taskState.stage);    startState.taskState=patchState.taskState;  }  return startState;}  }
class C{  public Random(){  this(false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:25.316 -0500",hash_original_method="6381C04E2A4A8813FA59E1834CF9FF37",hash_generated_method="6B324AC588614E8743A9A4197A1A32C3") public Builder(SipProfile profile){  if (profile == null)   throw new NullPointerException();  try {    mProfile=(SipProfile)profile.clone();  } catch (  CloneNotSupportedException e) {    throw new RuntimeException("should not occur",e);  }  mProfile.mAddress=null;  mUri=profile.getUri();  mUri.setUserPassword(profile.getPassword());  mDisplayName=profile.getDisplayName();  mProxyAddress=profile.getProxyAddress();  mProfile.mPort=profile.getPort();}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableBooleanValue res;  if (result == null) {    res=new AnimatableBooleanValue(target);  } else {    res=(AnimatableBooleanValue)result;  }  boolean newValue;  if (to != null && interpolation >= 0.5) {    AnimatableBooleanValue toValue=(AnimatableBooleanValue)to;    newValue=toValue.value;  } else {    newValue=value;  }  if (res.value != newValue) {    res.value=newValue;    res.hasChanged=true;  }  return res;}  }
class C{  public void commit() throws SQLException {  conn.commit();}  }
class C{  public void close(){  LOG.trace("enter HttpConnection.close()");  closeSocketAndStreams();}  }
class C{  private static void reflectionAppend(final Object lhs,final Object rhs,final Class<?> clazz,final CompareToBuilder builder,final boolean useTransients,final String[] excludeFields){  final Field[] fields=clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,true);  for (int i=0; i < fields.length && builder.comparison == 0; i++) {    final Field f=fields[i];    if (!ArrayUtils.contains(excludeFields,f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {      try {        builder.append(f.get(lhs),f.get(rhs));      } catch (      final IllegalAccessException e) {        throw new InternalError("Unexpected IllegalAccessException");      }    }  }}  }
class C{  public void closeDiskCacheAsync(){  if (DEBUG) {    Log.d(TAG,"closeDiskCacheAsync");  }  new FileCacheTask(FileCacheTaskType.close_cache).execute();}  }
class C{  public StrBuilder delete(final int startIndex,int endIndex){  endIndex=validateRange(startIndex,endIndex);  final int len=endIndex - startIndex;  if (len > 0) {    deleteImpl(startIndex,endIndex,len);  }  return this;}  }
class C{  @Nullable public static GlobalSearchScope determineSearchScope(@NotNull PsiElement psiElement){  VirtualFile classVirtualFile=getVirtualFile(psiElement);  if (classVirtualFile == null) {    return null;  }  Module module=findModuleForPsiElement(psiElement);  if (module == null) {    return null;  }  Project project=psiElement.getProject();  ProjectRootManager projectRootManager=ProjectRootManager.getInstance(project);  boolean includeTestClasses=projectRootManager.getFileIndex().isInTestSourceContent(classVirtualFile);  return module.getModuleWithDependenciesAndLibrariesScope(includeTestClasses);}  }
class C{  public void addProperties(URL urlToProperties){  getPropertyHandler().addProperties(urlToProperties);}  }
class C{  public <T>T findUnique(@NotNull Class<T> cl,@NotNull SqlQuery query){  return executeQuery(rowMapperForClass(cl).unique(),query);}  }
class C{  @Override public int size(){  return points.length;}  }
class C{  public static XMLTree from(java.io.File file) throws IOException {  return from(file.toPath());}  }
class C{  @Deprecated @Override public void refreshTree(final ITreeNode<CTag> tag){  final List<DefaultMutableTreeNode> lastNodes=TreeHelpers.getLastExpandedNodes(m_tagsTree);  final List<Integer> lastNodeIds=new ArrayList<Integer>();  if ((tag != null) && (tag.getParent() != null)) {    lastNodeIds.add(tag.getParent().getObject().getId());  }  for (  final DefaultMutableTreeNode lastNode : lastNodes) {    if (lastNode.getUserObject() instanceof Integer) {      final int tagId=(Integer)lastNode.getUserObject();      lastNodeIds.add(tagId);    }  }  deleteChildren();  createChildren();  final Enumeration<?> bfn=breadthFirstEnumeration();  while (bfn.hasMoreElements()) {    final Object node=bfn.nextElement();    int tagId=-1;    TreePath path=null;    if (node instanceof CRootTagTreeNode) {      final CRootTagTreeNode rootNode=(CRootTagTreeNode)node;      tagId=m_rootTag.getObject().getId();      path=new TreePath(rootNode.getPath());    } else     if (node instanceof CTagTreeNode) {      final CTagTreeNode treeNode=(CTagTreeNode)node;      tagId=treeNode.getTag().getObject().getId();      path=new TreePath(treeNode.getPath());    } else     if (node instanceof CTaggedGraphNodesContainerNode) {      final CTaggedGraphNodesContainerNode containerNode=(CTaggedGraphNodesContainerNode)node;      tagId=-containerNode.getTag().getObject().getId();      path=new TreePath(containerNode.getPath());    }    if (lastNodeIds.contains(tagId)) {      m_tagsTree.expandPath(path);    }  }}  }
class C{  public LowPassBuilder order(int order){  mOrder=order;  return this;}  }
class C{  @ObjectiveCName("findAllDocsWithPeer:") public Command<List<MessageSearchEntity>> findAllDocs(Peer peer){  return null;}  }
class C{  public void initMouseEvent(String typeArg,boolean canBubbleArg,boolean cancelableArg,AbstractView viewArg,int detailArg,int screenXArg,int screenYArg,int clientXArg,int clientYArg,boolean ctrlKeyArg,boolean altKeyArg,boolean shiftKeyArg,boolean metaKeyArg,short buttonArg,EventTarget relatedTargetArg){  initUIEvent(typeArg,canBubbleArg,cancelableArg,viewArg,detailArg);  this.screenX=screenXArg;  this.screenY=screenYArg;  this.clientX=clientXArg;  this.clientY=clientYArg;  if (ctrlKeyArg) {    modifierKeys.add(DOMKeyboardEvent.KEY_CONTROL);  }  if (altKeyArg) {    modifierKeys.add(DOMKeyboardEvent.KEY_ALT);  }  if (shiftKeyArg) {    modifierKeys.add(DOMKeyboardEvent.KEY_SHIFT);  }  if (metaKeyArg) {    modifierKeys.add(DOMKeyboardEvent.KEY_META);  }  this.button=buttonArg;  this.relatedTarget=relatedTargetArg;}  }
class C{  private synchronized void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  init(getName());}  }
class C{  public void documentAboutToBeChanged(DocumentEvent event){  documentLastModified=System.currentTimeMillis();}  }
class C{  public void assertAtLeastMessagesReceived(int messageCount){  int actual=getMessageCount();  assertTrue("at least: " + messageCount + " messages received. Actual: "+ actual,actual >= messageCount);}  }
class C{  @SuppressWarnings("try") public void testParseExamples() throws Exception {  boolean foundFiles=false;  final Path examplesDir=Paths.get(ConfLoader.class.getResource(".").toURI());  try (DirectoryStream<Path> stream=Files.newDirectoryStream(examplesDir,"*.alg")){    for (    Path path : stream) {      Config config=new Config(Files.newBufferedReader(path,StandardCharsets.UTF_8));      String contentSource=config.get("content.source",null);      if (contentSource != null) {        Class.forName(contentSource);      }      config.set("work.dir",createTempDir(LuceneTestCase.getTestClass().getSimpleName()).toAbsolutePath().toString());      config.set("content.source",MockContentSource.class.getName());      String dir=config.get("content.source",null);      if (dir != null) {        Class.forName(dir);      }      config.set("directory",RAMDirectory.class.getName());      if (config.get("line.file.out",null) != null) {        config.set("line.file.out",createTempFile("linefile",".txt").toAbsolutePath().toString());      }      if (config.get("query.maker",null) != null) {        Class.forName(config.get("query.maker",null));        config.set("query.maker",MockQueryMaker.class.getName());      }      PerfRunData data=new PerfRunData(config);      try (Algorithm algo=new Algorithm(data)){      }       foundFiles=true;    }  }   if (!foundFiles) {    fail("could not find any .alg files!");  }}  }
class C{  public T caseDocumentedElement(DocumentedElement object){  return null;}  }
class C{  @Override @Transactional public void logout(HttpServletRequest request,HttpServletResponse response,Authentication authentication){  String rememberMeCookie=extractRememberMeCookie(request);  if (rememberMeCookie != null && rememberMeCookie.length() != 0) {    try {      String[] cookieTokens=decodeCookie(rememberMeCookie);      PersistentToken token=getPersistentToken(cookieTokens);      persistentTokenRepository.delete(token);    } catch (    InvalidCookieException ice) {      log.info("Invalid cookie, no persistent token could be deleted");    }catch (    RememberMeAuthenticationException rmae) {      log.debug("No persistent token found, so no token could be deleted");    }  }  super.logout(request,response,authentication);}  }
class C{  public static Integer[] toIntegerArray(final int[] array){  final Integer[] integerArray=new Integer[array == null ? 0 : array.length];  if (array != null) {    for (int index=0; index < array.length; index++) {      integerArray[index]=array[index];    }  }  return integerArray;}  }
class C{  private List<List<Model>> createModels(List<Pair<SceneView,SceneView>> imgList){  List<List<Model>> modelList=new ArrayList<>();  for (  Pair<SceneView,SceneView> p : imgList) {    modelList.add(TwoViewReconstructor.getPossibleModels(camera,p.a,p.b,false));  }  return modelList;}  }
class C{  public static AsymmetricKeyParameter createKey(InputStream inStr) throws IOException {  return createKey(PrivateKeyInfo.getInstance(new ASN1InputStream(inStr).readObject()));}  }
class C{  public Integer read(String value){  return Integer.valueOf(value);}  }
class C{  @Override public void refreshRow() throws SQLException {  try {    debugCodeCall("refreshRow");    checkClosed();    if (insertRow != null) {      throw DbException.get(ErrorCode.NO_DATA_AVAILABLE);    }    checkOnValidRow();    patchCurrentRow(getUpdatableRow().readRow(result.currentRow()));    updateRow=null;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  @Override public int read() throws java.io.IOException {  if (position < 0) {    if (encode) {      byte[] b3=new byte[3];      int numBinaryBytes=0;      for (int i=0; i < 3; i++) {        int b=in.read();        if (b >= 0) {          b3[i]=(byte)b;          numBinaryBytes++;        } else {          break;        }      }      if (numBinaryBytes > 0) {        encode3to4(b3,0,numBinaryBytes,buffer,0,options);        position=0;        numSigBytes=4;      } else {        return -1;      }    } else {      byte[] b4=new byte[4];      int i=0;      for (i=0; i < 4; i++) {        int b=0;        do {          b=in.read();        } while (b >= 0 && decodabet[b & 0x7f] <= WHITE_SPACE_ENC);        if (b < 0) {          break;        }        b4[i]=(byte)b;      }      if (i == 4) {        numSigBytes=decode4to3(b4,0,buffer,0,options);        position=0;      } else       if (i == 0) {        return -1;      } else {        throw new java.io.IOException("Improperly padded Base64 input.");      }    }  }  if (position >= 0) {    if (position >= numSigBytes) {      return -1;    }    if (encode && breakLines && lineLength >= MAX_LINE_LENGTH) {      lineLength=0;      return '\n';    } else {      lineLength++;      int b=buffer[position++];      if (position >= bufferLength) {        position=-1;      }      return b & 0xFF;    }  } else {    throw new java.io.IOException("Error in Base64 code reading stream.");  }}  }
class C{  public WebResource createRequest(Client client,String baseURI,String requestPath){  return createRequest(client,URI.create(baseURI),URI.create(requestPath));}  }
class C{  public void testMultiStatements() throws Exception {  if (versionMeetsMinimum(4,1)) {    Connection multiStmtConn=null;    Statement multiStmt=null;    try {      Properties props=new Properties();      props.setProperty("allowMultiQueries","true");      multiStmtConn=getConnectionWithProps(props);      multiStmt=multiStmtConn.createStatement();      multiStmt.executeUpdate("DROP TABLE IF EXISTS testMultiStatements");      multiStmt.executeUpdate("CREATE TABLE testMultiStatements (field1 VARCHAR(255), field2 INT, field3 DOUBLE)");      multiStmt.executeUpdate("INSERT INTO testMultiStatements VALUES ('abcd', 1, 2)");      multiStmt.execute("SELECT field1 FROM testMultiStatements WHERE field1='abcd';UPDATE testMultiStatements SET field3=3;" + "SELECT field3 FROM testMultiStatements WHERE field3=3");      this.rs=multiStmt.getResultSet();      assertTrue(this.rs.next());      assertTrue("abcd".equals(this.rs.getString(1)));      this.rs.close();      assertTrue(!multiStmt.getMoreResults());      assertTrue("Update count was " + multiStmt.getUpdateCount() + ", expected 1",multiStmt.getUpdateCount() == 1);      assertTrue(multiStmt.getMoreResults());      this.rs=multiStmt.getResultSet();      assertTrue(this.rs.next());      assertTrue(this.rs.getDouble(1) == 3);      assertTrue(!multiStmt.getMoreResults());      assertTrue(multiStmt.getUpdateCount() == -1);    }  finally {      if (multiStmt != null) {        multiStmt.executeUpdate("DROP TABLE IF EXISTS testMultiStatements");        multiStmt.close();      }      if (multiStmtConn != null) {        multiStmtConn.close();      }    }  }}  }
class C{  private DocumentInfo[] sortDocuments(DocumentInfo[] facesDocuments,FacesConfigInfo webInfFacesConfig){  int len=(webInfFacesConfig.isWebInfFacesConfig() ? facesDocuments.length - 1 : facesDocuments.length);  List<String> absoluteOrdering=webInfFacesConfig.getAbsoluteOrdering();  if (len > 1) {    List<DocumentOrderingWrapper> list=new ArrayList<>();    for (int i=1; i < len; i++) {      list.add(new DocumentOrderingWrapper(facesDocuments[i]));    }    DocumentOrderingWrapper[] ordering=list.toArray(new DocumentOrderingWrapper[list.size()]);    if (absoluteOrdering == null) {      DocumentOrderingWrapper.sort(ordering);      for (int i=1; i < len; i++) {        facesDocuments[i]=ordering[i - 1].getDocument();      }      return facesDocuments;    } else {      DocumentOrderingWrapper[] result=DocumentOrderingWrapper.sort(ordering,absoluteOrdering);      DocumentInfo[] ret=new DocumentInfo[((webInfFacesConfig.isWebInfFacesConfig()) ? (result.length + 2) : (result.length + 1))];      for (int i=1; i < len; i++) {        ret[i]=result[i - 1].getDocument();      }      ret[0]=facesDocuments[0];      if (webInfFacesConfig.isWebInfFacesConfig()) {        ret[ret.length - 1]=facesDocuments[facesDocuments.length - 1];      }      return ret;    }  }  return facesDocuments;}  }
class C{  public static double[] select(double[] data,int fromIndex,int length){  double[] returnData=new double[length];  System.arraycopy(data,fromIndex,returnData,0,length);  return returnData;}  }
class C{  public Params(){  initial=DEFAULT_INITIAL_MILLIS;  multiplier=DEFAULT_MULTIPLIER;  maximum=DEFAULT_MAXIMUM_MILLIS;}  }
class C{  public void testConstrLongMathContext(){  long a=4576578677732546982L;  int precision=5;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String res="45766";  int resScale=-14;  BigDecimal result=new BigDecimal(a,mc);  assertEquals("incorrect value",res,result.unscaledValue().toString());  assertEquals("incorrect scale",resScale,result.scale());  BigDecimal bd;  mc=new MathContext(15,RoundingMode.UP);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.89012345678902E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.89012345678902E+16",bd.toString());  mc=new MathContext(12,RoundingMode.DOWN);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.89012345678E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.89012345678E+16",bd.toString());  mc=new MathContext(15,RoundingMode.CEILING);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.89012345678902E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.89012345678901E+16",bd.toString());  mc=new MathContext(12,RoundingMode.FLOOR);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.89012345678E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.89012345679E+16",bd.toString());  mc=new MathContext(16,RoundingMode.HALF_EVEN);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.890123456789012E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.890123456789012E+16",bd.toString());  bd=new BigDecimal(-78901234567890135L,mc);  assertEquals("incorrect value","-7.890123456789014E+16",bd.toString());  mc=new MathContext(16,RoundingMode.HALF_UP);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.890123456789013E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.890123456789013E+16",bd.toString());  mc=new MathContext(16,RoundingMode.HALF_DOWN);  bd=new BigDecimal(78901234567890125L,mc);  assertEquals("incorrect value","7.890123456789012E+16",bd.toString());  bd=new BigDecimal(-78901234567890125L,mc);  assertEquals("incorrect value","-7.890123456789012E+16",bd.toString());  mc=new MathContext(8,RoundingMode.UNNECESSARY);  try {    bd=new BigDecimal(78901234567890125L,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }  try {    bd=new BigDecimal(-78901234567890125L,mc);    fail("No ArithmeticException for RoundingMode.UNNECESSARY");  } catch (  ArithmeticException e) {  }}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  void addMouseInputListener(final MouseInputListener listener){  TABLE.addMouseListener(listener);  TABLE.addMouseMotionListener(listener);}  }
class C{  public MinimumClearance(Geometry geom){  inputGeom=geom;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.398 -0400",hash_original_method="0EB66BA5E965B83E191719250E0A82FF",hash_generated_method="0D841C721535905DD0E9F7FAE6757EB9") @Override public String toString(){  return name;}  }
class C{  public boolean skipField(final int tag) throws IOException {switch (WireFormatNano.getTagWireType(tag)) {case WireFormatNano.WIRETYPE_VARINT:    readInt32();  return true;case WireFormatNano.WIRETYPE_FIXED64:readRawLittleEndian64();return true;case WireFormatNano.WIRETYPE_LENGTH_DELIMITED:skipRawBytes(readRawVarint32());return true;case WireFormatNano.WIRETYPE_START_GROUP:skipMessage();checkLastTagWas(WireFormatNano.makeTag(WireFormatNano.getTagFieldNumber(tag),WireFormatNano.WIRETYPE_END_GROUP));return true;case WireFormatNano.WIRETYPE_END_GROUP:return false;case WireFormatNano.WIRETYPE_FIXED32:readRawLittleEndian32();return true;default :throw InvalidProtocolBufferNanoException.invalidWireType();}}  }
class C{  @Override public Type LIST(){  return listType;}  }
class C{  public void sendToCuboid(IMessage message,AxisAlignedBB cuboid,int dimId){  MinecraftServer server=MinecraftServer.getServer();  if (server != null && cuboid != null) {    for (    EntityPlayerMP player : (List<EntityPlayerMP>)server.getConfigurationManager().playerEntityList) {      if (player.dimension == dimId && cuboid.isVecInside(Vec3.createVectorHelper(player.posX,player.posY,player.posZ))) {        sendTo(message,player);      }    }  }}  }
class C{  public TvShowUpdateDatasourceTask(List<File> tvShowFolders){  super(BUNDLE.getString("update.datasource"));  tvShowList=TvShowList.getInstance();  dataSources=new ArrayList<>(0);  this.tvShowFolders.addAll(tvShowFolders);}  }
class C{  private static String sanitize(String id){  id=id.replace("@","_");  id=id.replace("/","_");  id=id.replace("^","_");  id=id.replace(":","_");  return id.replaceAll("_+","_");}  }
class C{  private void modify(StoragePort port,String portNetworkId){  port.setPortNetworkId(portNetworkId);  dbClient.persistObject(port);  modifiedStoragePortsList.add(port);}  }
class C{  public int typicalIndsProduced(){  return numInds;}  }
class C{  public static boolean isValidPPromotionStrict(String san){  if (san.length() == 3) {    return FILES.indexOf(san.charAt(0)) != -1 && RANKS.indexOf(san.charAt(1)) != -1 && PROMOTIONS.indexOf(san.charAt(2)) != -1;  } else {    return false;  }}  }
class C{  public void writeV4(final String filename){  new org.matsim.core.population.io.PopulationWriter(transformation,this.population,this.network).writeV4(filename);}  }
class C{  public static void showContactsOnMap(Context ctx,Set<ContactId> contacts){  HashMap<String,Geoloc> mapContactGeoloc=new HashMap<>();  RcsContactUtil rcsContactUtil=RcsContactUtil.getInstance(ctx);  for (  ContactId contact : contacts) {    Geoloc geoloc=getLastGeoloc(ctx,contact);    if (geoloc != null) {      mapContactGeoloc.put(rcsContactUtil.getDisplayName(contact),geoloc);    }  }  Geoloc myGeoloc=getMyLastGeoloc(ctx);  if (myGeoloc != null) {    mapContactGeoloc.put(ctx.getString(R.string.label_me),myGeoloc);  }  if (mapContactGeoloc.isEmpty()) {    Utils.displayLongToast(ctx,ctx.getString(R.string.label_geoloc_not_found));    return;  }  Intent intent=new Intent(ctx,DisplayGeoloc.class);  intent.putExtra(DisplayGeoloc.EXTRA_GEOLOC,mapContactGeoloc);  ctx.startActivity(intent);}  }
class C{  Agent(Connection connection,String workgroupJID){  this.connection=connection;  this.workgroupJID=workgroupJID;}  }
class C{  @Override protected void onPreDrawChart(ArrayList<ChartSet> data){  if (data.get(0).size() == 1) {    style.barSpacing=0;    calculateBarsWidth(data.size(),0,this.getInnerChartBottom() - this.getInnerChartTop() - super.verController.borderSpacing * 2);  } else   calculateBarsWidth(data.size(),data.get(0).getEntry(1).getY(),data.get(0).getEntry(0).getY());  calculatePositionOffset(data.size());}  }
class C{  public static boolean isMissingGt(String gt){  return !isNonMissingGt(gt);}  }
class C{  public boolean authenticateUserSignature(String username,String timestamp,String signature) throws DataAccessException {  UserInfo user=getUserInfo(username);  if (user == null) {    return false;  }  String computedSignature=Utilities.sign(timestamp,user.getHashedPassword());  return Utilities.slowStringComparison(signature,computedSignature);}  }
class C{  @Override public int hashCode(){  int result;  long temp;  temp=Double.doubleToLongBits(this.x1);  result=(int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.x2);  result=29 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.y1);  result=29 * result + (int)(temp ^ (temp >>> 32));  temp=Double.doubleToLongBits(this.y2);  result=29 * result + (int)(temp ^ (temp >>> 32));  return result;}  }
class C{  public static boolean hasNoPrefix(final AnnotatedTypeMirror annoType){  if (annoType == null) {    return true;  }  for (  AnnotationMirror mirror : annoType.getAnnotations()) {    if (!hasNoPrefix(mirror)) {      return false;    }  }  return true;}  }
class C{  public SSLGuacamoleSocket(String hostname,int port) throws GuacamoleException {  SocketFactory socket_factory=SSLSocketFactory.getDefault();  try {    logger.debug("Connecting to guacd at {}:{} via SSL/TLS.",hostname,port);    SocketAddress address=new InetSocketAddress(InetAddress.getByName(hostname),port);    sock=socket_factory.createSocket();    sock.connect(address,SOCKET_TIMEOUT);    sock.setSoTimeout(SOCKET_TIMEOUT);    reader=new ReaderGuacamoleReader(new InputStreamReader(sock.getInputStream(),"UTF-8"));    writer=new WriterGuacamoleWriter(new OutputStreamWriter(sock.getOutputStream(),"UTF-8"));  } catch (  IOException e) {    throw new GuacamoleServerException(e);  }}  }
class C{  public void tryParseColor(int intoIndex,String textParameter){  int c=parse(textParameter);  if (c != 0)   mCurrentColors[intoIndex]=c;}  }
class C{  private int[] toIntArray(String str){  int[] retVal=new int[4];  str=str + ",";  int rlen=retVal.length;  for (int i=0; i < rlen; i++) {    retVal[i]=Integer.parseInt(str.substring(0,str.indexOf(",")));    str=str.substring(str.indexOf(",") + 1,str.length());  }  return retVal;}  }
class C{  public static <T>int size(@Nullable Collection<? extends T> c,@Nullable IgnitePredicate<? super T>... p){  return c == null || c.isEmpty() ? 0 : isEmpty(p) || isAlwaysTrue(p) ? c.size() : size(c.iterator(),p);}  }
class C{  public void put(Triple triple,String text,Node cls,Node rule){  texts.put(triple,text);  classes.put(triple,cls);  if (rule != null) {    rules.put(triple,rule);  }}  }
class C{  public void addCompletions(CompletionParameters parameters,CompletionResultSet result){  String prefix=computeTemplateKeyWithoutContextChecking(new CustomTemplateCallback(parameters.getEditor(),parameters.getOriginalFile()));  if (prefix != null) {    result.withPrefixMatcher(result.getPrefixMatcher().cloneWithPrefix(prefix)).addAllElements(getLookupElements(parameters.getOriginalFile(),parameters.getEditor(),parameters.getOffset()));  }}  }
class C{  private void outlierMetaToJSON(JSONBuffer re,OutlierScoreMeta meta){  re.appendKeyHash("meta");  re.appendKeyValue("min",meta.getActualMinimum());  re.appendKeyValue("max",meta.getActualMaximum());  re.appendKeyValue("tmin",meta.getTheoreticalMinimum());  re.appendKeyValue("tmax",meta.getTheoreticalMaximum());  re.appendKeyValue("base",meta.getTheoreticalBaseline());  re.appendKeyValue("type",meta.getClass().getSimpleName());  re.closeHash();  if (LOG.isDebuggingFiner()) {    re.appendNewline();  }}  }
class C{  public boolean isValidCountryCodeTld(String ccTld){  ccTld=unicodeToASCII(ccTld);  return Arrays.binarySearch(COUNTRY_CODE_TLDS,chompLeadingDot(ccTld.toLowerCase(Locale.ENGLISH))) >= 0;}  }
class C{  protected Device findDestByEntity(IEntityClass reference,Entity dstEntity){  Long deviceKey=primaryIndex.findByEntity(dstEntity);  if (deviceKey == null) {    ClassState classState=getClassState(reference);    if (classState.classIndex == null) {      return null;    }    deviceKey=classState.classIndex.findByEntity(dstEntity);  }  if (deviceKey == null)   return null;  return deviceMap.get(deviceKey);}  }
class C{  public LogLoss(double nudge){  if (nudge < 0 || nudge >= 0.1)   throw new IllegalArgumentException("nudge must be a small non-negative value in [0, 0.1) not " + nudge);  this.nudge=nudge;}  }
class C{  public static JPanel createRow(final String text,final String toolTip,final JComponent theComponent){  JPanel retPanel=new JPanel();  retPanel.setLayout(new BoxLayout(retPanel,BoxLayout.X_AXIS));  JLabel theLabel=new JLabel(text);  theLabel.setToolTipText(toolTip);  retPanel.add(theLabel);  retPanel.add(Box.createHorizontalGlue());  retPanel.add(Box.createRigidArea(new Dimension(8,0)));  retPanel.add(Box.createHorizontalGlue());  if (theComponent instanceof JTextField) {    ((JTextField)theComponent).setCaretPosition(0);  }  theComponent.setMinimumSize(new Dimension(120,22));  theComponent.setPreferredSize(new Dimension(120,22));  theComponent.setMaximumSize(new Dimension(120,22));  retPanel.add(theComponent);  return retPanel;}  }
class C{  public void testTestBitException(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=1;  int number=-7;  BigInteger aNumber=new BigInteger(aSign,aBytes);  try {    aNumber.testBit(number);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public void load() throws CouldntLoadDataException {  if (isLoaded()) {    return;  }  try {    m_project.load();  } catch (  com.google.security.zynamics.binnavi.Database.Exceptions.CouldntLoadDataException|LoadCancelledException e) {    throw new CouldntLoadDataException(e);  }}  }
class C{  public static void track(Window window){  Preferences prefs=node().node("Windows");  String bounds=prefs.get(window.getName() + ".bounds",null);  if (bounds != null) {    Rectangle rect=(Rectangle)ConverterRegistry.instance().convert(Rectangle.class,bounds);    window.setBounds(rect);  }  window.addComponentListener(windowDimension);}  }
class C{  private MPPProductBOMLine importBOMLine(MPPProductBOM bom,X_I_Product_BOM importBOM){  MPPProductBOMLine bomLine=getProductBOMLine(bom,importBOM);  MProduct component=new MProduct(Env.getCtx(),importBOM.getM_BOMProduct_ID(),get_TrxName());  if (bomLine == null) {    bomLine=new MPPProductBOMLine(Env.getCtx(),0,get_TrxName());    bomLine.setAD_Org_ID(importBOM.getAD_Org_ID());    bomLine.setPP_Product_BOM_ID(bom.get_ID());    bomLine.setM_Product_ID(importBOM.getM_BOMProduct_ID());  }  bomLine.setComponentType(importBOM.getComponentType());  bomLine.setQtyBOM(importBOM.getQtyBOM());  bomLine.setQtyBatch(importBOM.getQtyBatch());  bomLine.setIssueMethod(importBOM.getIssueMethod());  bomLine.setIsQtyPercentage(importBOM.isQtyPercentage());  bomLine.setValidFrom(importBOM.getValidFrom());  bomLine.setM_ChangeNotice_ID(importBOM.getM_ChangeNotice_ID());  bomLine.setIsCritical(importBOM.isCritical());  bomLine.setCostAllocationPerc(importBOM.getCostAllocationPerc());  bomLine.setScrap(importBOM.getScrap());  bomLine.setAssay(importBOM.getAssay());  bomLine.setBackflushGroup(importBOM.getBackflushGroup());  bomLine.setLeadTimeOffset(importBOM.getLeadTimeOffset());  if (importBOM.getC_UOM_ID() > 0)   bomLine.setC_UOM_ID(importBOM.getC_UOM_ID()); else   bomLine.setC_UOM_ID(component.getC_UOM_ID());  bomLine.saveEx();  return bomLine;}  }
class C{  public RecursiveZipHandler(List<String> subResourceNames,String collectionName,DeltaHandler<ResourceNode> parentHandler){  this.parentHandler=parentHandler;  this.collectionName=collectionName;  processCount=new AtomicInteger(subResourceNames.size());  nodes=new ArrayList<>();  xDeltaResponseNumber=new AtomicInteger(0);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (key: ");  result.append(key);  result.append(", values: ");  result.append(values);  result.append(')');  return result.toString();}  }
class C{  public void close() throws IOException {  super.close();  out.close();}  }
class C{  @Override public boolean canBeCollidedWith(){  return false;}  }
class C{  public PercentLayout(){  this(HORIZONTAL,0);}  }
class C{  public static Intent createOpenMapIntent(double latitude,double longitude){  return createGeoUriIntent("geo:" + latitude + ","+ longitude);}  }
class C{  public static <Req,Res>void loadTestThroughput(final IntervalGenerator intervalGen,final int warmupRequests,final ReceivePort<Req> requests,final RequestExecutor<Req,Res> executor,final SendPort<TimingEvent<Res>> eventChannel,final StrandFactory strandFactory) throws InterruptedException, SuspendExecution {  loadTestThroughput(intervalGen,warmupRequests,requests,executor,eventChannel,null,strandFactory);}  }
class C{  public void loadProject(String arg) throws IOException {  Project newProject=Project.readProject(arg);  newProject.setConfiguration(project.getConfiguration());  project=newProject;  projectLoadedFromFile=true;}  }
class C{  public void successHandling(String result,boolean displayToast){  if (result.equalsIgnoreCase(DomoticzValues.Result.ERROR))   Toast.makeText(getActivity(),R.string.action_failed,Toast.LENGTH_SHORT).show(); else   if (result.equalsIgnoreCase(DomoticzValues.Result.OK)) {    if (displayToast)     Toast.makeText(getActivity(),R.string.action_success,Toast.LENGTH_SHORT).show();  } else {    if (displayToast)     Toast.makeText(getActivity(),R.string.action_unknown,Toast.LENGTH_SHORT).show();  }  if (debug)   addDebugText("- Result: " + result);}  }
class C{  public boolean changeWorkerCount(int number) throws Exception {  if (number == 0) {    return true;  }  int workerCount=getWorkers().size();  setNumWorkers(workerCount + number);  if (number > 0) {    return startWorkers(null);  } else {    setNumWorkers(workerCount + number);    return true;  }}  }
class C{  public static MessageRange from(MessageUid from){  return new MessageRange(Type.FROM,from,MessageUid.MAX_VALUE);}  }
class C{  public int lastIndexOf(String string){  return lastIndexOf(string,length());}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void paintToolBarBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public void sendMessage(String message){  checkSocket();  this.socket.sendTextMessage(message);}  }
class C{  public boolean hasActiveDownloads(){  for (  Component c : this.monitorPanel.getComponents()) {    if (c instanceof DownloadMonitorPanel)     if (((DownloadMonitorPanel)c).thread.isAlive())     return true;  }  return false;}  }
class C{  public MappedPropertyParseResult(String className,String methodName,String argString){  this.className=className;  this.methodName=methodName;  this.argString=argString;}  }
class C{  public static Map<String,Integer> events(){  return mEvents;}  }
class C{  public final void testIsSatisfiedWhenConstraintIsNotSatisfied(){  Constraint<Object> constraint=new ConstraintImplementation(false);  NegateConstraint<Object> negateConstraint=NegateConstraint.create(constraint);  assertTrue(negateConstraint.isSatisfied(new Object()));}  }
class C{  private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  count.set(0);  last=head=new Node<E>(null);  for (; ; ) {    @SuppressWarnings("unchecked") E item=(E)s.readObject();    if (item == null)     break;    add(item);  }}  }
class C{  private static void globalSubstitute() throws Exception {  Pattern p=Pattern.compile("(ab)(c*)");  Matcher m=p.matcher("abccczzzabcczzzabccc");  if (!m.replaceAll("test").equals("testzzztestzzztest"))   failCount++;  m.reset("zzzabccczzzabcczzzabccczzz");  if (!m.replaceAll("test").equals("zzztestzzztestzzztestzzz"))   failCount++;  m.reset("zzzabccczzzabcczzzabccczzz");  String result=m.replaceAll("$1");  if (!result.equals("zzzabzzzabzzzabzzz"))   failCount++;  p=Pattern.compile(toSupplementaries("(ab)(c*)"));  m=p.matcher(toSupplementaries("abccczzzabcczzzabccc"));  if (!m.replaceAll(toSupplementaries("test")).equals(toSupplementaries("testzzztestzzztest")))   failCount++;  m.reset(toSupplementaries("zzzabccczzzabcczzzabccczzz"));  if (!m.replaceAll(toSupplementaries("test")).equals(toSupplementaries("zzztestzzztestzzztestzzz")))   failCount++;  m.reset(toSupplementaries("zzzabccczzzabcczzzabccczzz"));  result=m.replaceAll("$1");  if (!result.equals(toSupplementaries("zzzabzzzabzzzabzzz")))   failCount++;  report("Global Substitution");}  }
class C{  protected void addChildPages(){  addChild(new LInstalledExtModsPage());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:40.848 -0500",hash_original_method="FB80BE45A1B322D49A7CF30AB5AC4B14",hash_generated_method="A97519A74DDBEA07EFB9EEC2EB14A877") @Override protected void onSelectionChanged(int selStart,int selEnd){  if (mSettingExtractedText == 0 && mIME != null && selStart >= 0 && selEnd >= 0) {    mIME.onExtractedSelectionChanged(selStart,selEnd);  }}  }
class C{  private BusinessObjectDefinitionColumnEntity createBusinessObjectDefinitionColumnEntity(BusinessObjectDefinitionEntity businessObjectDefinitionEntity,BusinessObjectDefinitionColumnCreateRequest request){  BusinessObjectDefinitionColumnEntity businessObjectDefinitionColumnEntity=new BusinessObjectDefinitionColumnEntity();  businessObjectDefinitionColumnEntity.setBusinessObjectDefinition(businessObjectDefinitionEntity);  businessObjectDefinitionColumnEntity.setName(request.getBusinessObjectDefinitionColumnKey().getBusinessObjectDefinitionColumnName());  businessObjectDefinitionColumnEntity.setDescription(request.getDescription());  return businessObjectDefinitionColumnEntity;}  }
class C{  public boolean visit(MultiTextEdit edit){  return visitNode(edit);}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(new AccelerateDecelerateInterpolator()).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  private static void sendFailureSelfPatch(StatefulService service,Throwable e){  StatefulTaskDocument body=new StatefulTaskDocument();  body.taskInfo=new TaskState();  body.taskInfo.stage=TaskStage.FAILED;  body.taskInfo.failure=Utils.toServiceErrorResponse(e);  service.logWarning("Operation failed: %s",Utils.toString(e));  sendPatch(service,body);}  }
class C{  public static boolean isLocal(Tree.Declaration decl){  return isLocal(decl.getDeclarationModel());}  }
class C{  public static LosEffects calculateLos(IGame game,int attackerId,Targetable target){  return calculateLos(game,attackerId,target,false);}  }
class C{  public void configure(){  JMRIClientTrafficController control=new JMRIClientTrafficController();  control.connectPort(this);  this.getSystemConnectionMemo().setJMRIClientTrafficController(control);  this.getSystemConnectionMemo().configureManagers();}  }
class C{  public void write(int c) throws IOException {  out.write(c);}  }
class C{  @Override public int hashCode(){  int result=dataType != null ? dataType.hashCode() : 0;  result=31 * result + (data != null ? data.hashCode() : 0);  return result;}  }
class C{  public void removeTrackingIcon(GutterIconInfo tag){  iconArea.removeTrackingIcon(tag);}  }
class C{  @Uninterruptible public static void takeCBSMethodSample(int whereFrom,Address yieldpointServiceMethodFP){  Address ypTakenInFP=Magic.getCallerFramePointer(yieldpointServiceMethodFP);  int ypTakenInCMID=Magic.getCompiledMethodID(ypTakenInFP);  Address ypTakenInCallerFP=Magic.getCallerFramePointer(ypTakenInFP);  int ypTakenInCallerCMID=Magic.getCompiledMethodID(ypTakenInCallerFP);  CompiledMethod ypTakenInCM=CompiledMethods.getCompiledMethod(ypTakenInCMID);  if (ypTakenInCallerCMID == StackFrameLayout.getInvisibleMethodID() || ypTakenInCM.getMethod().getDeclaringClass().hasBridgeFromNativeAnnotation()) {    ypTakenInCallerCMID=-1;  }  for (  MethodListener methodListener : cbsMethodListeners) {    if (methodListener.isActive()) {      methodListener.update(ypTakenInCMID,ypTakenInCallerCMID,whereFrom);    }  }}  }
class C{  Builder reencodeForUri(){  for (int i=0, size=encodedPathSegments.size(); i < size; i++) {    String pathSegment=encodedPathSegments.get(i);    encodedPathSegments.set(i,canonicalize(pathSegment,PATH_SEGMENT_ENCODE_SET_URI,true,false,true));  }  if (encodedQueryNamesAndValues != null) {    for (int i=0, size=encodedQueryNamesAndValues.size(); i < size; i++) {      String component=encodedQueryNamesAndValues.get(i);      if (component != null) {        encodedQueryNamesAndValues.set(i,canonicalize(component,QUERY_COMPONENT_ENCODE_SET_URI,true,true,true));      }    }  }  if (encodedFragment != null) {    encodedFragment=canonicalize(encodedFragment,FRAGMENT_ENCODE_SET_URI,true,false,false);  }  return this;}  }
class C{  public void onResult(UUID nodeId,GridDhtAtomicUpdateResponse updateRes){  if (log.isDebugEnabled())   log.debug("Received DHT atomic update future result [nodeId=" + nodeId + ", updateRes="+ updateRes+ ']');  if (updateRes.error() != null)   this.updateRes.addFailedKeys(updateRes.failedKeys(),updateRes.error());  if (!F.isEmpty(updateRes.nearEvicted())) {    for (    KeyCacheObject key : updateRes.nearEvicted()) {      GridDhtCacheEntry entry=nearReadersEntries.get(key);      try {        entry.removeReader(nodeId,updateRes.messageId());      } catch (      GridCacheEntryRemovedException e) {        if (log.isDebugEnabled())         log.debug("Entry with evicted reader was removed [entry=" + entry + ", err="+ e+ ']');      }    }  }  registerResponse(nodeId);}  }
class C{  public TranslucentPopup(){}  }
class C{  public void write(ByteCodeWriter out) throws IOException {  out.writeUTF8Const(getName());  TempOutputStream ts=new TempOutputStream();  ByteCodeWriter o2=new ByteCodeWriter(ts,out.getJavaClass());  o2.writeShort(_exceptions.size());  for (int i=0; i < _exceptions.size(); i++) {    String exn=_exceptions.get(i);    o2.writeClass(exn);  }  ts.close();  out.writeInt(ts.getLength());  TempBuffer ptr=ts.getHead();  for (; ptr != null; ptr=ptr.next())   out.write(ptr.buffer(),0,ptr.length());  ts.destroy();}  }
class C{  public static double tTest(double t,double nu){  double a=nu / 2.0;  double b=0.5;  double x=nu / (nu + t * t);  return 1.0 - betai(a,b,x);}  }
class C{  public Seq<CharSeq> scan(String regex){  Pattern pat=Pattern.compile(regex);  Matcher m=pat.matcher(str);  MutableSeq<CharSeq> charSeq=Seqs.newMutableSeq();  while (m.find()) {    charSeq.appendInPlace(CharSeq.of(m.group()));  }  return charSeq;}  }
class C{  public void stopUsingGPS(){  if (locationManager != null) {    locationManager.removeUpdates(GPStracker.this);  }}  }
class C{  protected AbstractGraph(){}  }
class C{  protected static void enableHibernateSearchListeners(boolean enabled){  System.setProperty(HS_SEARCH_LISTENERS,Boolean.toString(enabled));}  }
class C{  public Statement copyInline(Context ctx,boolean valNeeded){  DeclarationStatement s=(DeclarationStatement)clone();  if (type != null) {    s.type=type.copyInline(ctx);  }  s.args=new Statement[args.length];  for (int i=0; i < args.length; i++) {    if (args[i] != null) {      s.args[i]=args[i].copyInline(ctx,valNeeded);    }  }  return s;}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CODE_INJECTION___BEFORE_CODE_1:    getBeforeCode_1().clear();  getBeforeCode_1().addAll((Collection<? extends BeforeCode_>)newValue);return;case UmplePackage.CODE_INJECTION___AFTER_CODE_1:getAfterCode_1().clear();getAfterCode_1().addAll((Collection<? extends AfterCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public boolean isRaw(){  return (this.isGeneric() && (this.getTypeArgs().size() < this.getDeclaredType().getTypeVars().size()));}  }
class C{  public void paint(java.awt.Graphics g){  super.paint(g);  if (location != null)   location.render(g);  location=null;}  }
class C{  public Vec4 toHomogeneousPoint3(){  if (this.w == 1.0)   return this;  return new Vec4(this.x,this.y,this.z,1.0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void writeTo(Path path) throws IOException {  Files.write(path,getBytes());}  }
class C{  TemplateSubPatternAssociation(ElemTemplate template,StepPattern pattern,String pat){  m_pattern=pat;  m_template=template;  m_stepPattern=pattern;  m_targetString=m_stepPattern.getTargetString();  m_wild=m_targetString.equals("*");}  }
class C{  @Override public synchronized void updateNull(String columnName) throws SQLException {  updateNull(findColumn(columnName));}  }
class C{  public void registerCustomRenderer(RenderAccountOnFileInterface renderer){  if (renderer == null) {    throw new InvalidParameterException("Error setting custom renderer, renderer may not be null");  }  this.renderer=renderer;}  }
class C{  public static short toShort(byte[] bytes,int start){  return toShort(bytes[start],bytes[start + 1]);}  }
class C{  public static String padRight(String text,int size){  return String.format("%1$-" + size + "s",text);}  }
class C{  private static void arcToBezier(Path p,double cx,double cy,double a,double b,double e1x,double e1y,double theta,double start,double sweep){  int numSegments=(int)Math.ceil(Math.abs(sweep * 4 / Math.PI));  double eta1=start;  double cosTheta=Math.cos(theta);  double sinTheta=Math.sin(theta);  double cosEta1=Math.cos(eta1);  double sinEta1=Math.sin(eta1);  double ep1x=(-a * cosTheta * sinEta1) - (b * sinTheta * cosEta1);  double ep1y=(-a * sinTheta * sinEta1) + (b * cosTheta * cosEta1);  double anglePerSegment=sweep / numSegments;  for (int i=0; i < numSegments; i++) {    double eta2=eta1 + anglePerSegment;    double sinEta2=Math.sin(eta2);    double cosEta2=Math.cos(eta2);    double e2x=cx + (a * cosTheta * cosEta2) - (b * sinTheta * sinEta2);    double e2y=cy + (a * sinTheta * cosEta2) + (b * cosTheta * sinEta2);    double ep2x=-a * cosTheta * sinEta2 - b * sinTheta * cosEta2;    double ep2y=-a * sinTheta * sinEta2 + b * cosTheta * cosEta2;    double tanDiff2=Math.tan((eta2 - eta1) / 2);    double alpha=Math.sin(eta2 - eta1) * (Math.sqrt(4 + (3 * tanDiff2 * tanDiff2)) - 1) / 3;    double q1x=e1x + alpha * ep1x;    double q1y=e1y + alpha * ep1y;    double q2x=e2x - alpha * ep2x;    double q2y=e2y - alpha * ep2y;    p.cubicTo((float)q1x,(float)q1y,(float)q2x,(float)q2y,(float)e2x,(float)e2y);    eta1=eta2;    e1x=e2x;    e1y=e2y;    ep1x=ep2x;    ep1y=ep2y;  }}  }
class C{  public ProcessBuilder command(String... command){  return command(new ArrayList<String>(Arrays.asList(command)));}  }
class C{  public CommsIdentifier_Type(JCas jcas,Type casType){  super(jcas,casType);  casImpl.getFSClassRegistry().addGeneratorForType((TypeImpl)this.casType,getFSGenerator());}  }
class C{  public static String normalizeMimeType(String type){  if (type == null) {    return null;  }  type=type.trim().toLowerCase(Locale.US);  final int semicolonIndex=type.indexOf(';');  if (semicolonIndex != -1) {    type=type.substring(0,semicolonIndex);  }  return type;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Override public synchronized void logMessage(String message){  m_logPanel.logMessage(message);}  }
class C{  public void rotateZ(double degrees){  Transform3D other=new Transform3D();  other.rotZ(degrees * Math.PI / 180);  transform(other);}  }
class C{  private void drawAutoHit(Graphics g,Coords hex){  int baseX=(hex.getX() * (hexSide[zoom] + hexSideBySin30[zoom])) + leftMargin + hexSide[zoom];  int baseY=(((2 * hex.getY()) + 1 + (hex.getX() % 2)) * hexSideByCos30[zoom]) + topMargin;  Color alt=g.getColor();  g.setColor(Color.RED);  g.drawOval(baseX - (unitSize - 1),baseY - (unitSize - 1),(2 * unitSize) - 2,(2 * unitSize) - 2);  g.drawLine(baseX - unitSize - 1,baseY,(baseX - unitSize) + 3,baseY);  g.drawLine(baseX + unitSize + 1,baseY,(baseX + unitSize) - 3,baseY);  g.drawLine(baseX,baseY - unitSize - 1,baseX,(baseY - unitSize) + 3);  g.drawLine(baseX,baseY + unitSize + 1,baseX,(baseY + unitSize) - 3);  g.setColor(alt);}  }
class C{  public boolean isCommentingEnabled(){  return commentStart != null;}  }
class C{  @Override public boolean isAttributeSpecified(int index){  log.log(Level.FINE,"isAttributeSpecified({0})",index);  if (event != ATTRIBUTE && event != START_ELEMENT) {    throw new IllegalStateException("isAttributeSpecified called in another state!");  } else {    return elementIndex.currentElement.attributesSize() > index;  }}  }
class C{  public void renameAllTempFiles() throws IOException {  ensureRefCount();  store.renameTempFilesSafe(tempFileNames);}  }
class C{  private static boolean checkEscapesThread(RegisterOperand use,IR ir,Set<Register> visited){  Instruction inst=use.instruction;switch (inst.getOpcode()) {case INT_ASTORE_opcode:case LONG_ASTORE_opcode:case FLOAT_ASTORE_opcode:case DOUBLE_ASTORE_opcode:case BYTE_ASTORE_opcode:case SHORT_ASTORE_opcode:case REF_ASTORE_opcode:    Operand value=AStore.getValue(inst);  return value == use;case GETFIELD_opcode:case GETSTATIC_opcode:case INT_ALOAD_opcode:case LONG_ALOAD_opcode:case FLOAT_ALOAD_opcode:case DOUBLE_ALOAD_opcode:case BYTE_ALOAD_opcode:case UBYTE_ALOAD_opcode:case BYTE_LOAD_opcode:case UBYTE_LOAD_opcode:case SHORT_ALOAD_opcode:case USHORT_ALOAD_opcode:case SHORT_LOAD_opcode:case USHORT_LOAD_opcode:case REF_ALOAD_opcode:case INT_LOAD_opcode:case LONG_LOAD_opcode:case FLOAT_LOAD_opcode:case DOUBLE_LOAD_opcode:case REF_LOAD_opcode:Operand result=ResultCarrier.getResult(inst);return result == use;case PUTFIELD_opcode:value=PutField.getValue(inst);return value == use;case PUTSTATIC_opcode:value=PutStatic.getValue(inst);return value == use;case BYTE_STORE_opcode:case SHORT_STORE_opcode:case REF_STORE_opcode:case INT_STORE_opcode:case LONG_STORE_opcode:case FLOAT_STORE_opcode:case DOUBLE_STORE_opcode:value=Store.getValue(inst);return value == use;case BOUNDS_CHECK_opcode:case MONITORENTER_opcode:case MONITOREXIT_opcode:case NULL_CHECK_opcode:case ARRAYLENGTH_opcode:case REF_IFCMP_opcode:case INT_IFCMP_opcode:case IG_PATCH_POINT_opcode:case IG_CLASS_TEST_opcode:case IG_METHOD_TEST_opcode:case BOOLEAN_CMP_INT_opcode:case BOOLEAN_CMP_ADDR_opcode:case OBJARRAY_STORE_CHECK_opcode:case OBJARRAY_STORE_CHECK_NOTNULL_opcode:case GET_OBJ_TIB_opcode:case GET_TYPE_FROM_TIB_opcode:case NEW_opcode:case NEWARRAY_opcode:case NEWOBJMULTIARRAY_opcode:case NEW_UNRESOLVED_opcode:case NEWARRAY_UNRESOLVED_opcode:case INSTANCEOF_opcode:case INSTANCEOF_NOTNULL_opcode:case INSTANCEOF_UNRESOLVED_opcode:case MUST_IMPLEMENT_INTERFACE_opcode:case GET_CAUGHT_EXCEPTION_opcode:case IR_PROLOGUE_opcode:return false;case RETURN_opcode:return !ir.isParameter(use);case CALL_opcode:MethodOperand mop=Call.getMethod(inst);if (mop == null) {return true;}if (!mop.hasPreciseTarget()) {return true;}if (mop.getTarget().isPure()) {return false;}if (mop.getTarget().isNative()) {return true;}MethodSummary summ=getMethodSummaryIfAvailable(mop.getTarget(),ir.options);if (summ == null) {return true;}if (use == Call.getResult(inst)) {return summ.resultMayEscapeThread();}int p=getParameterIndex(use,inst);return summ.parameterMayEscapeThread(p);case CHECKCAST_opcode:case CHECKCAST_NOTNULL_opcode:case CHECKCAST_UNRESOLVED_opcode:case REF_MOVE_opcode:{Register copy=ResultCarrier.getResult(inst).getRegister();if (!copy.isSSA()) {return true;} else {if (visited == null) {visited=new HashSet<Register>();}visited.add(use.getRegister());if (visited.contains(copy)) {return false;} else {return checkIfUseEscapesThread(copy,ir,visited);}}}case ATHROW_opcode:case PREPARE_INT_opcode:case PREPARE_ADDR_opcode:case PREPARE_LONG_opcode:case ATTEMPT_LONG_opcode:case ATTEMPT_INT_opcode:case ATTEMPT_ADDR_opcode:case INT_MOVE_opcode:case INT_ADD_opcode:case REF_ADD_opcode:case INT_MUL_opcode:case INT_DIV_opcode:case INT_REM_opcode:case INT_NEG_opcode:case INT_ZERO_CHECK_opcode:case INT_OR_opcode:case INT_AND_opcode:case INT_XOR_opcode:case REF_OR_opcode:case REF_AND_opcode:case REF_XOR_opcode:case INT_SUB_opcode:case REF_SUB_opcode:case INT_SHL_opcode:case INT_SHR_opcode:case INT_USHR_opcode:case SYSCALL_opcode:case REF_SHL_opcode:case REF_SHR_opcode:case REF_USHR_opcode:case SET_CAUGHT_EXCEPTION_opcode:case PHI_opcode:case INT_2LONG_opcode:case REF_COND_MOVE_opcode:case INT_COND_MOVE_opcode:case INT_2ADDRSigExt_opcode:case INT_2ADDRZerExt_opcode:case ADDR_2INT_opcode:case ADDR_2LONG_opcode:case LONG_OR_opcode:case LONG_AND_opcode:case LONG_XOR_opcode:case LONG_SUB_opcode:case LONG_SHL_opcode:case LONG_ADD_opcode:case LONG_SHR_opcode:case LONG_USHR_opcode:case LONG_NEG_opcode:case LONG_MOVE_opcode:case LONG_2ADDR_opcode:case YIELDPOINT_OSR_opcode:return true;default :if (VM.BuildForPowerPC) {switch (inst.getOpcode()) {case DCBST_opcode:case DCBT_opcode:case DCBTST_opcode:case DCBZ_opcode:case DCBZL_opcode:case ICBI_opcode:return false;}} else {switch (inst.getOpcode()) {case PREFETCH_opcode:return false;}}throw new OptimizingCompilerException("SimpleEscapge: Unexpected " + inst);}}  }
class C{  private static void proseedWithNoGui(File systemFolder,boolean sign,boolean zipalign,boolean createZip,boolean fromdevice){  boolean valid=FilesUtils.isAValideSystemDir(systemFolder,logger);  if (!valid) {    System.exit(3);  }  if (fromdevice) {    AdbUtils.extractSystem(systemFolder,logger);  }  SessionCfg.setSign(sign);  SessionCfg.setZipalign(zipalign);  int jobs=1;  try {    jobs=Cfg.getMaxJobs();  } catch (  Exception e) {    e.printStackTrace();    jobs=(HostInfo.availableCpus() >= 4 ? 4 : (HostInfo.availableCpus() >= 2 ? 2 : 1));  }  logger.addLog("[INFO] About to start task :");  if (!fromdevice)   logger.addLog("[INFO] System Folder : " + systemFolder); else   logger.addLog("[INFO] System Folder : will be extracted from device");  logger.addLog("[INFO] Max Jobs : " + jobs);  logger.addLog("[INFO] Will zipalign ? : " + (zipalign ? "YES" : "NO"));  logger.addLog("[INFO] Will reSign ? : " + (sign ? "YES" : "NO"));  logger.addLog("[INFO] Will create flashable zip ? : " + (createZip ? "YES" : "NO"));  MainWorker mainWorker=new MainWorker(systemFolder,logger,jobs,new CommandLineWorker(createZip));  Thread t=new Thread(mainWorker);  t.start();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.TRY_STATEMENT__BLOCK:    return getBlock();case N4JSPackage.TRY_STATEMENT__CATCH:  return getCatch();case N4JSPackage.TRY_STATEMENT__FINALLY:return getFinally();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SList(){  size=0;  sentinel=new Node(null,null);}  }
class C{  public NotificationChain basicSetRhs(Expression newRhs,NotificationChain msgs){  Expression oldRhs=rhs;  rhs=newRhs;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.EQUALITY_EXPRESSION__RHS,oldRhs,newRhs);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public boolean isEmpty(){  return mCapabilities.isEmpty();}  }
class C{  public int hashCode(){  int retval=0;  for (int i=1; i < this.key.length; i++) {    retval+=this.key[i] * i;  }  return (retval^="des".hashCode());}  }
class C{  public static String truncate(String text,int truncatedLength){  if (text == null) {    return null;  }  if ((truncatedLength < 0) || (truncatedLength > text.length())) {    return text;  }  return text.substring(0,truncatedLength);}  }
class C{  public void testRemoveAll(){  for (int i=1; i < SIZE; ++i) {    LinkedBlockingDeque q=populatedDeque(SIZE);    LinkedBlockingDeque p=populatedDeque(i);    assertTrue(q.removeAll(p));    assertEquals(SIZE - i,q.size());    for (int j=0; j < i; ++j) {      Integer I=(Integer)(p.remove());      assertFalse(q.contains(I));    }  }}  }
class C{  public final boolean isFinished(){  return mScrollerX.mFinished && mScrollerY.mFinished;}  }
class C{  public void start(){  jlbhOptions.jlbhTask.init(this);  OSJitterMonitor osJitterMonitor=new OSJitterMonitor();  List<double[]> percentileRuns=new ArrayList<>();  Map<String,List<double[]>> additionalPercentileRuns=new TreeMap<>();  if (jlbhOptions.recordOSJitter) {    osJitterMonitor.setDaemon(true);    osJitterMonitor.start();  }  long warmupStart=System.currentTimeMillis();  for (int i=0; i < jlbhOptions.warmUpIterations; i++) {    jlbhOptions.jlbhTask.run(System.nanoTime());  }  AffinityLock lock=Affinity.acquireLock();  try {    for (int run=0; run < jlbhOptions.runs; run++) {      long runStart=System.currentTimeMillis();      long startTimeNs=System.nanoTime();      for (int i=0; i < jlbhOptions.iterations; i++) {        if (i == 0 && run == 0) {          while (!warmUpComplete.get()) {            Jvm.pause(2000);            System.out.println("Complete: " + noResultsReturned);          }          System.out.println("Warm up complete (" + jlbhOptions.warmUpIterations + " iterations took "+ ((System.currentTimeMillis() - warmupStart) / 1000.0)+ "s)");          if (jlbhOptions.pauseAfterWarmupMS != 0) {            System.out.println("Pausing after warmup for " + jlbhOptions.pauseAfterWarmupMS + "ms");            Jvm.pause(jlbhOptions.pauseAfterWarmupMS);          }          runStart=System.currentTimeMillis();          startTimeNs=System.nanoTime();        } else         if (jlbhOptions.accountForCoordinatedOmission) {          startTimeNs+=rate;          if (waitTimeMillis > 0) {            Jvm.pause(waitTimeMillis);          }          Jvm.busyWaitUntil(startTimeNs);        } else {          if (waitTimeMillis > 0) {            long end=System.nanoTime() + rate;            Jvm.pause(waitTimeMillis);            Jvm.busyWaitUntil(end);          } else {            Jvm.busyWaitMicros(rate / 1000);          }          startTimeNs=System.nanoTime();        }        jlbhOptions.jlbhTask.run(startTimeNs);      }      while (endToEndHistogram.totalCount() < jlbhOptions.iterations) {        Thread.yield();      }      long totalRunTime=System.currentTimeMillis() - runStart;      percentileRuns.add(endToEndHistogram.getPercentiles());      System.out.println("-------------------------------- BENCHMARK RESULTS (RUN " + (run + 1) + ") --------------------------------------------------------");      System.out.println("Run time: " + totalRunTime / 1000.0 + "s");      System.out.println("Correcting for co-ordinated:" + jlbhOptions.accountForCoordinatedOmission);      System.out.println("Target throughput:" + jlbhOptions.throughput + "/"+ timeUnitToString(jlbhOptions.throughputTimeUnit)+ " = 1 message every "+ (rate / 1000)+ "us");      System.out.printf("%-48s",String.format("End to End: (%,d)",endToEndHistogram.totalCount()));      System.out.println(endToEndHistogram.toMicrosFormat());      if (additionHistograms.size() > 0) {        additionHistograms.entrySet().stream().forEach(null);      }      if (jlbhOptions.recordOSJitter) {        System.out.printf("%-48s",String.format("OS Jitter (%,d)",osJitterHistogram.totalCount()));        System.out.println(osJitterHistogram.toMicrosFormat());      }      System.out.println("-------------------------------------------------------------------------------------------------------------------");      noResultsReturned=0;      endToEndHistogram.reset();      additionHistograms.values().stream().forEach(null);      osJitterMonitor.reset();    }  }  finally {    Jvm.pause(5);    lock.release();    Jvm.pause(5);  }  printPercentilesSummary("end to end",percentileRuns);  if (additionalPercentileRuns.size() > 0) {    additionalPercentileRuns.entrySet().stream().forEach(null);  }  jlbhOptions.jlbhTask.complete();}  }
class C{  public Builder deleteAddress(Address address){  Address deleteAddress=new Address.Builder(address).setOperation(DELETE).build();  addresses.add(deleteAddress);  return this;}  }
class C{  public List<V> values(){  ArrayList<V> list=new ArrayList<V>();  for (  long k : keySet()) {    V value=find(k).value;    if (value != null) {      list.add(value);    }  }  return list;}  }
class C{  private Map<String,List<String>> generateCampaigns(){  int numCampaigns=100;  int numAdsPerCampaign=10;  Map<String,List<String>> adsByCampaign=new LinkedHashMap<>();  for (int i=0; i < numCampaigns; i++) {    String campaign=UUID.randomUUID().toString();    ArrayList<String> ads=new ArrayList<>();    adsByCampaign.put(campaign,ads);    for (int j=0; j < numAdsPerCampaign; j++) {      ads.add(UUID.randomUUID().toString());    }  }  return adsByCampaign;}  }
class C{  public void testCompare23To22() throws Exception {  assertTrue(WebXmlVersion.V2_3.compareTo(WebXmlVersion.V2_2) > 0);}  }
class C{  public void increaseFlowOfPath(Id<TtPath> pathId,double flow){  this.totalFlow+=flow;  this.paths.get(pathId).increaseFlow(flow);}  }
class C{  public void printPush(Vertex equation,Writer writer,String indent,Set<Vertex> elements,Network network,long start,long timeout) throws IOException {  Vertex state=equation.getRelationship(Primitive.ARGUMENT);  List<Vertex> localElements=new ArrayList<Vertex>();  writer.write(indent);  writer.write("push ");  if (!elements.contains(state)) {    localElements.add(state);    elements.add(state);  }  printElement(state,writer,indent,null,null,elements,network);  writer.write(";\r\n\r\n");  for (  Vertex element : localElements) {    if (element.instanceOf(Primitive.VARIABLE)) {      printVariable(element,writer,indent,elements,network);    } else     if (element.instanceOf(Primitive.STATE)) {      printState(element,writer,indent,elements,network,start,timeout);    }  }}  }
class C{  private void parseCompressedXml(){  int word0;  while (mParserOffset < mData.length) {    word0=getLEWord(mParserOffset);switch (word0) {case WORD_START_DOCUMENT:      parseStartDocument();    break;case WORD_STRING_TABLE:  parseStringTable();break;case WORD_RES_TABLE:parseResourceTable();break;case WORD_START_NS:parseNamespace(true);break;case WORD_END_NS:parseNamespace(false);break;case WORD_START_TAG:parseStartTag();break;case WORD_END_TAG:parseEndTag();break;case WORD_TEXT:parseText();break;case WORD_EOS:mListener.endDocument();break;default :mParserOffset+=WORD_SIZE;Log.w(TAG,"Unknown word 0x" + Integer.toHexString(word0) + " @"+ mParserOffset);break;}}mListener.endDocument();}  }
class C{  private void emitUnsignedLeb128(int n) throws IOException {  if (n < 0) {    throw new RuntimeException("Signed value where unsigned required: " + n);  }  output.writeUleb128(n);}  }
class C{  public void test2(){  final JPanel panel=new JPanel(new GridLayoutManager(1,3,new Insets(0,0,0,0),7,0));  final JTextField field1=new JTextField();  field1.setPreferredSize(new Dimension(100,20));  final JTextField field2=new JTextField();  field2.setPreferredSize(new Dimension(100,20));  panel.add(field1,new GridConstraints(0,0,1,2,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  panel.add(field2,new GridConstraints(0,2,1,1,GridConstraints.ANCHOR_CENTER,GridConstraints.FILL_HORIZONTAL,GridConstraints.SIZEPOLICY_WANT_GROW,GridConstraints.SIZEPOLICY_FIXED,null,null,null,0));  final Dimension preferredSize=panel.getPreferredSize();  assertEquals(207,preferredSize.width);  panel.setSize(panel.getPreferredSize());  panel.doLayout();  if (SystemInfo.isMac) {    assertEquals(new Rectangle(0,0,100,28),field1.getBounds());    assertEquals(new Rectangle(107,0,100,28),field2.getBounds());  } else {    assertEquals(new Rectangle(0,0,100,20),field1.getBounds());    assertEquals(new Rectangle(107,0,100,20),field2.getBounds());  }}  }
class C{  @Override public void run(){  amIActive=true;  String accumHeader=null;  String outputHeader=null;  int row, col;  int progress=0;  int i;  double channelizationThreshold=0;  double backValue=0;  boolean flag=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      accumHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      channelizationThreshold=Double.parseDouble(args[i]);    } else     if (i == 3) {      if (args[i].toLowerCase().equals("nodata")) {        flag=true;      } else {        backValue=Double.parseDouble(args[i]);      }    }  }  if ((accumHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(accumHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (flag) {      backValue=noData;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",accumHeader,WhiteboxRaster.DataType.FLOAT,0);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    double[] data=null;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] > channelizationThreshold && data[col] != noData) {          output.setValue(row,col,1);        } else {          output.setValue(row,col,backValue);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void init(ServletConfig config) throws ServletException {  super.init(config);  if (!WebEnv.initWeb(config))   throw new ServletException("WLookup.init");}  }
class C{  private void changeChannel(String channel){  status.setText("");  game.setText("");  this.currentChannel=channel;  Long lastCommercialTemp=lastCommercial.get(channel);  if (lastCommercialTemp != null) {    lastCommercialRun=lastCommercialTemp;  } else {    lastCommercialRun=0;    lastCommercialInfo.setText(null);  }  clearScheduledCommercial();  getChannelInfo();  setCommercialResult("");  update();}  }
class C{  @Override public void respond(String response){  getBot().sendRaw().rawLine(response);}  }
class C{  public StampedLock(){  state=ORIGIN;}  }
class C{  public static double blackFormulaImpliedStdDev(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@Real final double blackPrice){  return blackFormulaImpliedStdDev(payoff,strike,forward,blackPrice,1.0,Double.NaN,1.0e-6,0.0);}  }
class C{  public InetGuacamoleSocket(String hostname,int port) throws GuacamoleException {  try {    logger.debug("Connecting to guacd at {}:{}.",hostname,port);    SocketAddress address=new InetSocketAddress(InetAddress.getByName(hostname),port);    sock=new Socket();    sock.connect(address,SOCKET_TIMEOUT);    sock.setSoTimeout(SOCKET_TIMEOUT);    reader=new ReaderGuacamoleReader(new InputStreamReader(sock.getInputStream(),"UTF-8"));    writer=new WriterGuacamoleWriter(new OutputStreamWriter(sock.getOutputStream(),"UTF-8"));  } catch (  SocketTimeoutException e) {    throw new GuacamoleUpstreamTimeoutException("Connection timed out.",e);  }catch (  IOException e) {    throw new GuacamoleServerException(e);  }}  }
class C{  public void resetFilters(){  resetFilters(Boolean.TRUE);}  }
class C{  @Override public int compareTo(Object object){  if (object instanceof TickUnit) {    TickUnit other=(TickUnit)object;    if (this.size > other.getSize()) {      return 1;    } else     if (this.size < other.getSize()) {      return -1;    } else {      return 0;    }  } else {    return -1;  }}  }
class C{  public QuickAdapter(Context context,int layoutResId,List<T> data){  super(context,layoutResId,data);}  }
class C{  void readString(StringBuilder sb) throws IOException {  while (true) {    int ch=read();    int len;switch (ch) {default :      _peek=ch;    return;case 0x00:case 0x01:case 0x02:case 0x03:case 0x04:case 0x05:case 0x06:case 0x07:case 0x08:case 0x09:case 0x0a:case 0x0b:case 0x0c:case 0x0d:case 0x0e:case 0x0f:case 0x10:case 0x11:case 0x12:case 0x13:case 0x14:case 0x15:case 0x16:case 0x17:case 0x18:case 0x19:case 0x1a:case 0x1b:case 0x1c:case 0x1d:case 0x1e:case 0x1f:  len=ch - 0x00;readString(sb,len);return;case 0x30:case 0x31:case 0x32:case 0x33:len=((ch - 0x30) << 8) + read();readString(sb,len);return;case 'S':len=readShort();readString(sb,len);return;case 'R':len=readShort();readString(sb,len);break;}}}  }
class C{  void calcBins4Sec(double Range){  int ad=0;  if (Range % this.LagSize == 0) {    ad=0;  }  if (!this.Anisotropic) {    bins=new bin[(int)Math.ceil(Range / this.LagSize) + ad][1];    int r=0;    for (int i=0; i < Pairs.size(); i++) {      if (Pairs.get(i).Distance < Range && Pairs.get(i).HorDistance >= 0) {        r=(int)Math.floor(Pairs.get(i).Distance / LagSize);        if (bins[r][0] == null) {          bin bb=new bin();          bins[r][0]=bb;        }        bins[r][0].Distance+=Pairs.get(i).Distance;        bins[r][0].Value+=Pairs.get(i).MomentI;        bins[r][0].Size++;      }    }    for (int i=0; i < bins.length; i++) {      if (bins[i][0] == null) {        bin bb=new bin();        bins[i][0]=bb;      }      bins[i][0].Distance=bins[i][0].Distance / bins[i][0].Size;      bins[i][0].Value=bins[i][0].Value / bins[i][0].Size;    }  }}  }
class C{  static public void lowerBound(int arg,int min,String argName){  if (!(arg >= min)) {    throw new IllegalArgumentException(String.format("%s (%d) smaller than the lower bound",argName,arg));  }}  }
class C{  public static boolean isBetween(float x,float down,float up){  return x >= down && x <= up;}  }
class C{  public AuthenticatorException(String msg){  super(msg);}  }
class C{  private void heapifyUp(int twopos,Object cur){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    Object par=twoheap[parent];    if (comparator.compare(cur,par) <= 0) {      break;    }    twoheap[twopos]=par;    twopos=parent;  }  twoheap[twopos]=cur;}  }
class C{  public String optString(String key,String defaultValue){  Object object=this.opt(key);  return NULL.equals(object) ? defaultValue : object.toString();}  }
class C{  public SimpleArrayMap(int capacity){  if (capacity == 0) {    mHashes=EMPTY_INTS;    mArray=EMPTY_OBJECTS;  } else {    allocArrays(capacity);  }  mSize=0;}  }
class C{  public void considerPointXRegions(GeoPoint p,Collection regions){  Iterator rit;  if (regions instanceof ExtentIndex) {    rit=((ExtentIndex)regions).iterator(p);  } else {    rit=regions.iterator();  }  while (rit.hasNext()) {    GeoExtent extent=(GeoExtent)rit.next();    if (filter.preConsider(p,extent)) {      if (extent instanceof GeoRegion) {        GeoRegion region=(GeoRegion)extent;        if (considerPointXRegion(p,region)) {          collector.collect(p,region);        }      } else       if (extent instanceof GeoPath) {        GeoPath path=(GeoPath)extent;        if (isPointNearPoly(p.getPoint(),path.getPoints(),filter.getHRange())) {          collector.collect(p,path);        }      } else {        BoundingCircle bc=extent.getBoundingCircle();        if (p.getPoint().distance(bc.getCenter()) <= bc.getRadius() + filter.getHRange()) {          collector.collect(p,extent);        }      }    }  }}  }
class C{  private String checkTrainId(){  String msg=null;  if (_warrant.getRunMode() != Warrant.MODE_NONE) {    msg=_warrant.getRunModeMessage();    return msg;  }  List<BlockOrder> orders=getOrders();  if (orders.size() == 0) {    msg=Bundle.getMessage("NoRouteSet",_origin.getBlockName(),_destination.getBlockName());    return msg;  }  msg=_warrant.setRoute(0,orders);  if (msg != null) {    return msg;  }  msg=checkLocoAddress();  return msg;}  }
class C{  public boolean matches(){  return matcher.matches();}  }
class C{  public static _ProcessTemplateType fromString(final String value) throws SOAPSerializationException {  return (_ProcessTemplateType)Enumeration.fromString(value,_ProcessTemplateType.VALUES_TO_INSTANCES);}  }
class C{  public Attribute export(JavaClass source,JavaClass target){  ConstantPool cp=target.getConstantPool();  cp.addUTF8(getName());  CodeAttribute attr=new CodeAttribute(getName());  attr._maxStack=_maxStack;  attr._maxLocals=_maxLocals;  byte[] code=new byte[_code.length];  System.arraycopy(_code,0,code,0,_code.length);  attr._code=code;  for (int i=0; i < _exceptions.size(); i++) {    ExceptionItem exn=_exceptions.get(i);    int type=exn.getType();    if (type != 0)     type=cp.addClass(source.getConstantPool().getClass(type).getName()).getIndex();    ExceptionItem newExn=new ExceptionItem(type,exn.getStart(),exn.getEnd(),exn.getHandler());    attr._exceptions.add(newExn);  }  for (int i=0; i < _attributes.size(); i++) {    Attribute codeAttr=_attributes.get(i);    attr.addAttribute(codeAttr.export(source,target));  }  try {    attr.exportCode(source,target);  } catch (  Exception e) {    throw new RuntimeException(e);  }  return attr;}  }
class C{  protected void adjustRow(FlowView fv,int rowIndex,int desiredSpan,int x){}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void createTestMenuItems(JMenu menu){  JMenu dTests=new JMenu(Messages.getString("menu.tests.declarative"));  JMenu cTests=new JMenu(Messages.getString("menu.tests.compiled"));  menu.add(dTests);  menu.add(cTests);  ResourceBundle bundle=ResourceBundle.getBundle("org.dyn4j.sandbox.tests.list");  List<String> keys=Collections.list(bundle.getKeys());  Collections.sort(keys);  for (  String key : keys) {    String value=bundle.getString(key);    JMenuItem mnuTest=new JMenuItem(key);    mnuTest.setActionCommand("test+" + value);    mnuTest.addActionListener(this);    if (value.contains(".xml")) {      dTests.add(mnuTest);    } else {      cTests.add(mnuTest);    }  }}  }
class C{  private void copyPoints(int argIndex){  for (Iterator i=arg[argIndex].getNodeIterator(); i.hasNext(); ) {    Node graphNode=(Node)i.next();    Node newNode=graph.addNode(graphNode.getCoordinate());    newNode.setLabel(argIndex,graphNode.getLabel().getLocation(argIndex));  }}  }
class C{  @Override public void onDeleteComplete(int taskId,Object cookie,int deleteCount){}  }
class C{  public String createNewScript(){  conversation.begin();  return "success";}  }
class C{  public MapIterator<K,V> mapIterator(){  if (size == 0) {    return EmptyMapIterator.INSTANCE;  }  return new HashMapIterator<K,V>(this);}  }
class C{  public static Test suite(){  return new TestSuite(TestSessionEditorWorkbench.class);}  }
class C{  public ReadValueId clone(){  ReadValueId result=new ReadValueId();  result.NodeId=NodeId;  result.AttributeId=AttributeId;  result.IndexRange=IndexRange;  result.DataEncoding=DataEncoding;  return result;}  }
class C{  public void testRemainderMathContextHALF_UP(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=45;  String b="134432345432345748766876876723342238476237823787879183470";  int bScale=10;  int precision=15;  RoundingMode rm=RoundingMode.HALF_UP;  MathContext mc=new MathContext(precision,rm);  String res="3736186567876.876578956958765675671119238118911893939591735";  int resScale=45;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.remainder(bNumber,mc);  assertEquals("incorrect quotient value",res,result.toString());  assertEquals("incorrect quotient scale",resScale,result.scale());}  }
class C{  public void validatePKClassId(String attributeName,String actualType){  if (m_pkClassIDs.containsKey(attributeName)) {    String expectedType=m_pkClassIDs.get(attributeName);    if (expectedType.equals(actualType)) {      m_pkClassIDs.remove(attributeName);    } else {      throw ValidationException.invalidCompositePKAttribute(getJavaClassName(),getPKClassName(),attributeName,expectedType,actualType);    }  }}  }
class C{  public TVMap(Functionality<T> keyFunc,Functionality<V> valueFunc,int expectedSize){  this.keyFunc=keyFunc;  this.valueFunc=valueFunc;  this.mapType=MapType.HASH_TABLE;  this.locked=false;  this.num=0;  allocate(getCapacity(num,false));  this.numCollisions=0;}  }
class C{  public static ExprDouble toExprDouble(Expression expr){  if (expr instanceof ExprDouble)   return (ExprDouble)expr;  if (expr instanceof Literal) {    Double dbl=((Literal)expr).getDouble(null);    if (dbl != null)     return expr.getFactory().createLitDouble(dbl.doubleValue(),expr.getStart(),expr.getEnd());  }  return new CastDouble(expr);}  }
class C{  public void exit(long t){  if (mRingRadius.isActive()) {    mRingRadius.stop();  }  mFocusState=FocusState.STATE_FADE_OUT;  mExitStartMillis=computeExitStartTimeMs(t,mExitDurationMillis);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-17 12:29:24.939 -0500",hash_original_method="DC93441AA7886210FB8B7D4BBF66C0C2",hash_generated_method="EB3C4F6178448668E0C639C5053E90B8") @DSVerified @DSSafe(DSCat.ANDROID_CALLBACK) @Override public void onContentChanged(){  super.onContentChanged();  View emptyView=findViewById(com.android.internal.R.id.empty);  mList=(ExpandableListView)findViewById(com.android.internal.R.id.list);  if (mList == null) {    throw new RuntimeException("Your content must have a ExpandableListView whose id attribute is " + "'android.R.id.list'");  }  if (emptyView != null) {    mList.setEmptyView(emptyView);  }  mList.setOnChildClickListener(this);  mList.setOnGroupExpandListener(this);  mList.setOnGroupCollapseListener(this);  if (mFinishedStart) {    setListAdapter(mAdapter);  }  mFinishedStart=true;}  }
class C{  public HostIdentifier(VmIdentifier vmid){  StringBuilder sb=new StringBuilder();  String scheme=vmid.getScheme();  String host=vmid.getHost();  String authority=vmid.getAuthority();  if ((scheme != null) && (scheme.compareTo("file") == 0)) {    try {      uri=new URI("file://localhost");    } catch (    URISyntaxException e) {    }    ;    return;  }  if ((host != null) && (host.compareTo(authority) == 0)) {    host=null;  }  if (scheme == null) {    if (host == null) {      scheme="local";    } else {      scheme="rmi";    }  }  sb.append(scheme).append("://");  if (host == null) {    sb.append("localhost");  } else {    sb.append(host);  }  int port=vmid.getPort();  if (port != -1) {    sb.append(":").append(port);  }  String path=vmid.getPath();  if ((path != null) && (path.length() != 0)) {    sb.append(path);  }  String query=vmid.getQuery();  if (query != null) {    sb.append("?").append(query);  }  String frag=vmid.getFragment();  if (frag != null) {    sb.append("#").append(frag);  }  try {    uri=new URI(sb.toString());  } catch (  URISyntaxException e) {    throw new RuntimeException("Internal Error",e);  }}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawCenteredString(fontRendererObj,"Wurst Options",width / 2,40,0xffffff);  drawCenteredString(fontRendererObj,"Settings",width / 2 - 104,height / 4 + 24 - 28,0xcccccc);  drawCenteredString(fontRendererObj,"Managers",width / 2,height / 4 + 24 - 28,0xcccccc);  drawCenteredString(fontRendererObj,"Online",width / 2 + 104,height / 4 + 24 - 28,0xcccccc);  super.drawScreen(par1,par2,par3);  for (int i=0; i < buttonList.size(); i++) {    GuiButton button=(GuiButton)buttonList.get(i);    if (button.isMouseOver() && !toolTips[button.id].isEmpty()) {      drawHoveringText(Arrays.asList(toolTips[button.id].split("\n")),par1,par2);      break;    }  }}  }
class C{  public static String createAssignmentMessage(final String tagName,final AssignmentResult<? extends NamedEntity> result,final I18N i18n){  final StringBuilder formMsg=new StringBuilder();  final int assignedCount=result.getAssigned();  final int alreadyAssignedCount=result.getAlreadyAssigned();  final int unassignedCount=result.getUnassigned();  if (assignedCount == 1) {    formMsg.append(i18n.get("message.target.assigned.one",new Object[]{result.getAssignedEntity().get(0).getName(),tagName})).append("<br>");  } else   if (assignedCount > 1) {    formMsg.append(i18n.get("message.target.assigned.many",new Object[]{assignedCount,tagName})).append("<br>");    if (alreadyAssignedCount > 0) {      final String alreadyAssigned=i18n.get("message.target.alreadyAssigned",new Object[]{alreadyAssignedCount});      formMsg.append(alreadyAssigned).append("<br>");    }  }  if (unassignedCount == 1) {    formMsg.append(i18n.get("message.target.unassigned.one",new Object[]{result.getUnassignedEntity().get(0).getName(),tagName})).append("<br>");  } else   if (unassignedCount > 1) {    formMsg.append(i18n.get("message.target.unassigned.many",new Object[]{unassignedCount,tagName})).append("<br>");  }  return formMsg.toString();}  }
class C{  @Override public Object toObject(ByteBuffer content,Type targetType) throws BeanConversionException {  try {    String str=Charset.defaultCharset().decode(content).toString();    Object object=gson.fromJson(str,targetType);    if (object == null) {      throw new BeanConversionException("Unable to perform json to object conversion");    }    return object;  } catch (  JsonSyntaxException ex) {    throw new BeanConversionException("Unable to perform json to object conversion",ex);  }}  }
class C{  public LuceneDictionary(IndexReader reader,String field){  this.reader=reader;  this.field=field;}  }
class C{  String writeToTmpFile(String... data) throws IOException {  return writeToNamedTmpFile("tmp_file",data);}  }
class C{  public int tileYToY(int ty){  return ty * tileHeight + tileGridYOffset;}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public static int rest(long p,int q){  long p1=p;  if (q == 0) {    System.err.println("Error: to be divided by 0");    return 0;  }  long q1=q & 0x00000000ffffffffL;  while ((p1 >>> 32) != 0) {    p1^=q1 << (degree(p1) - degree(q1));  }  int result=(int)(p1 & 0xffffffff);  while (degree(result) >= degree(q)) {    result^=q << (degree(result) - degree(q));  }  return result;}  }
class C{  public ExecutionChoiceItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public static int populateCombo(final Combo combo,final String[] values,final String initialValue){  Check.notNull(combo,"combo");  Check.notNull(values,"values");  if (values.length == 0) {    return -1;  }  int selectedIndex=0;  for (int i=0; i < values.length; i++) {    final String value=values[i];    if (value.equals(initialValue)) {      selectedIndex=i;    }    combo.add(value);  }  combo.select(selectedIndex);  setVisibleItemCount(combo);  return selectedIndex;}  }
class C{  private void removeInvalidServices(Map<ServiceKey,Service> map){  for (Iterator<Map.Entry<ServiceKey,Service>> t=map.entrySet().iterator(); t.hasNext(); ) {    Service s=t.next().getValue();    if (s.isValid() == false) {      t.remove();    }  }}  }
class C{  private void initializeVolumeFields(){  log.info("Updating full copy volume replica state.");  DbClient dbClient=this.getDbClient();  List<URI> volumeURIs=dbClient.queryByType(Volume.class,false);  Iterator<Volume> volumes=dbClient.queryIterativeObjects(Volume.class,volumeURIs);  while (volumes.hasNext()) {    Volume volume=volumes.next();    log.info("Examining Volume (id={}) for upgrade",volume.getId().toString());    if (!NullColumnValueGetter.isNullURI(volume.getAssociatedSourceVolume())) {      volume.setReplicaState(ReplicationState.DETACHED.name());    }    dbClient.persistObject(volume);  }}  }
class C{  @Override public String toString(){  return String.valueOf(value);}  }
class C{  protected Node deepExport(Node n,AbstractDocument d){  super.deepExport(n,d);  AbstractElement ae=(AbstractElement)n;  if (attributes != null) {    NamedNodeMap map=attributes;    for (int i=map.getLength() - 1; i >= 0; i--) {      AbstractAttr aa=(AbstractAttr)map.item(i);      if (aa.getSpecified()) {        Attr attr=(Attr)aa.deepExport(aa.cloneNode(false),d);        if (aa instanceof AbstractAttrNS) {          ae.setAttributeNodeNS(attr);        } else {          ae.setAttributeNode(attr);        }      }    }  }  return n;}  }
class C{  public boolean scheduleComplete(){synchronized (lock) {    return queue.isEmpty();  }}  }
class C{  public static void uninstall(){  final PopupFactory factory=PopupFactory.getSharedInstance();  if (!(factory instanceof ShadowPopupFactory)) {    return;  }  final PopupFactory stored=((ShadowPopupFactory)factory).storedFactory;  PopupFactory.setSharedInstance(stored);}  }
class C{  private void paintCharts(final Graphics2D g){  if (chartList.isEmpty())   return;  final int chartWidth=getWidth() - INSETS.left - INSETS.right;  final int chartVSpace=getHeight() / chartList.size();  final int chartHeight=chartVSpace - INSETS.top - INSETS.bottom;  if (chartHeight <= 0)   return;  final Rect visibleRect=new Rect(getVisibleRect());  final Rectangle oldClipBounds=g.getClipBounds();  int y=0;  for (  final Chart<?> chart : chartList) {    final Rect r=new Rect(INSETS.left,y + INSETS.top,chartWidth,chartHeight);    g.setClip(oldClipBounds);    g.clipRect(r.x1,r.y1,r.width,r.height);    chart.paint(g,r,visibleRect.intersection(r));    y+=chartVSpace;  }  g.setClip(oldClipBounds);}  }
class C{  public void restore(SharedPreferences prefs){  String entries=prefs.getString(KEY_SONGS,null);  if (entries != null) {    try {      JSONArray array=new JSONArray(entries);      final int len=array.length();      for (int i=0; i < len; ++i) {        JSONObject obj=array.getJSONObject(i);        String ref=obj.getString("r");        String provider=obj.getString("p");        Song song=ProviderAggregator.getDefault().retrieveSong(ref,ProviderIdentifier.fromSerialized(provider));        if (song != null) {          addSong(song,false);        } else {          Log.e(TAG,"Cannot retrieve song " + ref + " from "+ provider);        }      }    } catch (    JSONException e) {      Log.e(TAG,"Cannot restore playback queue entry",e);    }  }}  }
class C{  public synchronized void updateElevation(QuadTree quadTree){  FloatBuffer vertex=_meshData.getVertexBuffer();  int n=vertex.limit();  Landscape landscape=Landscape.getInstance();  for (int i=0; i < n; i+=3) {    float x=vertex.get(i);    float y=vertex.get(i + 1);    double z=landscape.getZ(x,y) + 0.1;    if (!Double.isNaN(z)) {      vertex.put(i + 2,(float)z);    }  }}  }
class C{  public static ColtDataSet deepCopy(ColtDataSet ds){  List<Node> vars=new ArrayList<>(ds.getNumColumns());  for (  Node n : ds.getVariables()) {    if (n instanceof ContinuousVariable)     vars.add(new ContinuousVariable((ContinuousVariable)n)); else     if (n instanceof DiscreteVariable)     vars.add(new DiscreteVariable((DiscreteVariable)n)); else     throw new IllegalArgumentException("Variable type of node " + n + "could not be determined");  }  ColtDataSet out=ColtDataSet.makeData(vars,ds.getDoubleData());  return out;}  }
class C{  public static void main(String[] args){  MMRandom rng=null;  int count=2;  int sides=6;  int start=1;  int whichRNG=MMRandom.R_DEFAULT;  try {    if (null == args || 0 == args.length) {      count=2;    } else     if (1 == args.length) {      count=Integer.parseInt(args[0]);    } else     if (2 == args.length) {      count=Integer.parseInt(args[0]);      sides=Integer.parseInt(args[1]);      start=0;    } else {      count=Integer.parseInt(args[0]);      sides=Integer.parseInt(args[1]);      start=Integer.parseInt(args[2]);    }    if (count < 1) {      System.err.println("You must specify at least one roll.");      System.exit(2);    }    if (sides < 2) {      System.err.println("You must specify at least two faces.");      System.exit(3);    }  } catch (  NumberFormatException nfe) {    System.err.println("You must only supply integers.");    System.err.println(nfe.getMessage());    System.exit(1);  }  count=2;  rng=MMRandom.generate(whichRNG);  MMRoll roll=new MMRoll(rng,sides,start);  for (int loop=1; loop < count; loop++)   roll.addRoll(rng);  Roll.output(roll);  MMRoll roll2=new MMRoll(rng,sides,start);  for (int loop=1; loop < count; loop++)   roll2.addRoll(rng);  Roll.output(roll2);}  }
class C{  @Override protected void initListeners(){}  }
class C{  public void removeLatestUpdate(Password password) throws PageException {  _removeUpdate(password,true);}  }
class C{  public boolean isValid(Validator validator,ExceptionMessageListener receiver){  return validator.isValid(m_value,m_invalidValue,null,receiver);}  }
class C{  @Override protected void doRender(KMLTraversalContext tc,DrawContext dc){  KMLRenderable r=this.getRenderable();  if (r != null) {    r.render(tc,dc);  }  this.renderBalloon(tc,dc);}  }
class C{  public static List<Assignment> createDefinitionList(ModuleNode moduleNode){  OpDefNode[] operatorDefinitions=moduleNode.getOpDefs();  Vector<Assignment> operations=new Vector<Assignment>(operatorDefinitions.length);  for (int i=0; i < operatorDefinitions.length; i++) {    String[] params=new String[operatorDefinitions[i].getNumberOfArgs()];    Arrays.fill(params,"");    Assignment assign=new Assignment(operatorDefinitions[i].getName().toString(),params,"");    operations.add(assign);  }  return operations;}  }
class C{  public ReactiveSeq<T> stream(String key){  if (!pipes.get(key).isPresent())   pipes.register(key,factory.build());  return pipes.reactiveSeq(key).get();}  }
class C{  protected String generateIdentityKey(){  if (mRequest.getImageReuseInfo() == null) {    return getIdentityUrl();  } else {    return joinSizeTagToKey(getIdentityUrl(),mRequest.getImageReuseInfo().getIdentitySize());  }}  }
class C{  @Override public PLRect clone(){  return new PLRect(leftTop.x,leftTop.y,leftTop.z,rightBottom.x,rightBottom.y,rightBottom.z);}  }
class C{  @Override public void ack(Object jobId){}  }
class C{  public boolean visitStep(ExpressionOwner owner,NodeTest step){  return true;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  executionContextEClass=createEClass(EXECUTION_CONTEXT);  createEReference(executionContextEClass,EXECUTION_CONTEXT__ACTIVE_STATES);  createEReference(executionContextEClass,EXECUTION_CONTEXT__EXECUTED_ELEMENTS);  createEReference(executionContextEClass,EXECUTION_CONTEXT__SUSPENDED_ELEMENTS);  createEAttribute(executionContextEClass,EXECUTION_CONTEXT__SNAPSHOT);  executionEventEClass=createEClass(EXECUTION_EVENT);  createEAttribute(executionEventEClass,EXECUTION_EVENT__RAISED);  createEAttribute(executionEventEClass,EXECUTION_EVENT__SCHEDULED);  createEAttribute(executionEventEClass,EXECUTION_EVENT__DIRECTION);  executionSlotEClass=createEClass(EXECUTION_SLOT);  createEAttribute(executionSlotEClass,EXECUTION_SLOT__VALUE);  createEAttribute(executionSlotEClass,EXECUTION_SLOT__FQ_NAME);  createEAttribute(executionSlotEClass,EXECUTION_SLOT__WRITABLE);  createEReference(executionSlotEClass,EXECUTION_SLOT__TYPE);  executionVariableEClass=createEClass(EXECUTION_VARIABLE);  compositeSlotEClass=createEClass(COMPOSITE_SLOT);  createEReference(compositeSlotEClass,COMPOSITE_SLOT__SLOTS);  referenceSlotEClass=createEClass(REFERENCE_SLOT);  createEReference(referenceSlotEClass,REFERENCE_SLOT__REFERENCE);  eventDirectionEEnum=createEEnum(EVENT_DIRECTION);  javaObjectEDataType=createEDataType(JAVA_OBJECT);}  }
class C{  public static boolean isStoreInventoryRequiredAndAvailable(ServletRequest request,GenericValue product,BigDecimal quantity,Boolean wantRequired,Boolean wantAvailable){  GenericValue productStore=getProductStore(request);  if (productStore == null) {    Debug.logWarning("No ProductStore found, return false for inventory check",module);    return false;  }  if (product == null) {    Debug.logWarning("No Product passed, return false for inventory check",module);    return false;  }  if (quantity == null)   quantity=BigDecimal.ONE;  String productStoreId=productStore.getString("productStoreId");  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  try {    Boolean requiredOkay=null;    if (wantRequired != null) {      Map<String,Object> invReqResult=dispatcher.runSync("isStoreInventoryRequired",UtilMisc.toMap("productStoreId",productStoreId,"productId",product.get("productId"),"product",product,"productStore",productStore));      if (ServiceUtil.isError(invReqResult)) {        Debug.logError("Error calling isStoreInventoryRequired service, result is: " + invReqResult,module);        return false;      }      requiredOkay=Boolean.valueOf(wantRequired.booleanValue() == "Y".equals(invReqResult.get("requireInventory")));    }    Boolean availableOkay=null;    if (wantAvailable != null) {      Map<String,Object> invAvailResult=dispatcher.runSync("isStoreInventoryAvailable",UtilMisc.toMap("productStoreId",productStoreId,"productId",product.get("productId"),"product",product,"productStore",productStore,"quantity",quantity));      if (ServiceUtil.isError(invAvailResult)) {        Debug.logError("Error calling isStoreInventoryAvailable service, result is: " + invAvailResult,module);        return false;      }      availableOkay=Boolean.valueOf(wantAvailable.booleanValue() == "Y".equals(invAvailResult.get("available")));    }    if ((requiredOkay == null || requiredOkay.booleanValue()) && (availableOkay == null || availableOkay.booleanValue())) {      return true;    } else {      return false;    }  } catch (  GenericServiceException e) {    String errMsg="Fatal error calling inventory checking services: " + e.toString();    Debug.logError(e,errMsg,module);    return false;  }}  }
class C{  protected byte[] computeSHAdigest(final byte[] value){  try {    return MessageDigest.getInstance("SHA").digest(value);  } catch (  Exception e) {    throw new UnsupportedOperationException(e.toString());  }}  }
class C{  protected int index(int rank){  return offset + offsets[zero + rank * stride];}  }
class C{  public static void drawButtonBorder(AbstractButton b,Graphics g,Shape shape){  Graphics2D g2=(Graphics2D)g;  g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  if (b.isEnabled()) {    if (b.hasFocus()) {      g2.setColor(Colors.BUTTON_BORDER_FOCUS);    } else {      g2.setColor(Colors.BUTTON_BORDER);    }  } else {    g2.setColor(Colors.BUTTON_BORDER_DISABLED);  }  g2.draw(shape);}  }
class C{  public mxCellMarker(mxGraphComponent graphComponent){  this(graphComponent,mxConstants.DEFAULT_VALID_COLOR);}  }
class C{  private boolean isParameterToBeSaved(boolean isDirectAccess,VOParameter parameter,ParameterDefinition paramDef){  return (!GenericValidator.isBlankOrNull(parameter.getValue()) || parameter.isConfigurable()) && !(isDirectAccess && (PlatformParameterIdentifiers.CONCURRENT_USER.equals(paramDef.getParameterId()) || PlatformParameterIdentifiers.NAMED_USER.equals(paramDef.getParameterId())));}  }
class C{  public static List<String> readStringSubKeys(int hkey,String key) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {  if (hkey == HKEY_LOCAL_MACHINE) {    return readStringSubKeys(systemRoot,hkey,key);  } else   if (hkey == HKEY_CURRENT_USER) {    return readStringSubKeys(userRoot,hkey,key);  } else {    throw new IllegalArgumentException("hkey=" + hkey);  }}  }
class C{  protected void mouseClicked(MouseEvent e){  if (e.getSource() instanceof JTree) {    if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() > 0) {      int selRow=tree.getRowForLocation(e.getX(),e.getY());      if (selRow != -1) {        MTreeNode tn=(MTreeNode)tree.getPathForLocation(e.getX(),e.getY()).getLastPathComponent();        setSelectedNode(tn);      }    } else     if ((m_editable || m_hasBar) && SwingUtilities.isRightMouseButton(e)) {      int selRow=tree.getRowForLocation(e.getX(),e.getY());      if (selRow != -1) {        tree.setSelectionRow(selRow);      }      if (tree.getSelectionPath() != null) {        MTreeNode nd=(MTreeNode)tree.getSelectionPath().getLastPathComponent();        if (nd.isLeaf())         mBarAdd.setEnabled(true); else         mBarAdd.setEnabled(false);        Rectangle r=tree.getPathBounds(tree.getSelectionPath());        popMenuTree.show(tree,(int)r.getMaxX(),(int)r.getY());      }    }  } else   if (e.getSource() instanceof JButton) {    if (SwingUtilities.isRightMouseButton(e)) {      m_buttonSelected=(CButton)e.getSource();      popMenuBar.show(m_buttonSelected,e.getX(),e.getY());    }  }}  }
class C{  public XMLSignatureInput(InputStream inputOctetStream){  this.inputOctetStreamProxy=inputOctetStream;}  }
class C{  public String passwordTipText(){  return "The password to use for connecting to the database.";}  }
class C{  void onDragEnter(){  mDragging=true;}  }
class C{  public void _setRefreshInterval(int refreshInterval){  boolean isRegistered=MBeanUtil.isRefreshNotificationRegistered(this,RefreshNotificationType.SYSTEM_MEMBER_CONFIG);  if (isRegistered && (getRefreshInterval() == refreshInterval))   return;  this.refreshInterval=Helper.setAndReturnRefreshInterval(this,refreshInterval);}  }
class C{  public void addSeconds(int seconds){  super.addField(DurationFieldType.seconds(),seconds);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    double multiplier=Math.PI / 180;    if (inputFile.getZUnits().toLowerCase().contains("rad")) {      multiplier=1;    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.tan(z * multiplier));        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  public static String execute(String[] commandArray,String[] searchFor,boolean caseSensitive){  log.debug("Executing: {}",Arrays.toString(commandArray));  BufferedReader stdInput=null;  try {    Process p=Runtime.getRuntime().exec(commandArray,envp);    stdInput=new BufferedReader(new InputStreamReader(p.getInputStream(),Charsets.UTF_8));    String s;    while ((s=stdInput.readLine()) != null) {      if (searchFor == null) {        return s.trim();      }      for (      String search : searchFor) {        if (caseSensitive) {          if (s.contains(search.trim())) {            return s.trim();          }        } else {          if (s.toLowerCase().contains(search.toLowerCase().trim())) {            return s.trim();          }        }      }    }  } catch (  IOException ex) {    log.error("IOException executing: {} envp: {}",Arrays.toString(commandArray),Arrays.toString(envp),ex);  } finally {    if (stdInput != null) {      try {        stdInput.close();      } catch (      Exception ignore) {      }    }  }  return "";}  }
