class C{  String readSessionId(String url){  int idx=url.indexOf("jsessionid=");  String id=url.substring(idx + "jsessionid=".length());  for (int i=0; i < id.length(); i++) {    char ch=id.charAt(i);    if (!Character.isLetterOrDigit(ch)) {      id=id.substring(0,i);      break;    }  }  this.sessionId=id;  return id;}  }
class C{  public DisplayEdge(Edge modelEdge,DisplayNode node1,DisplayNode node2){  if (modelEdge == null) {    throw new NullPointerException("Model edge must not be null.");  }  if (node1 == null) {    throw new NullPointerException("Node1 must not be null.");  }  if (node2 == null) {    throw new NullPointerException("Node2 must not be null.");  }  this.modelEdge=modelEdge;  this.node1=node1;  this.node2=node2;  this.mode=ANCHORED_UNSELECTED;  node1.addComponentListener(compHandler);  node2.addComponentListener(compHandler);  node1.addPropertyChangeListener(propertyChangeHandler);  node2.addPropertyChangeListener(propertyChangeHandler);  resetBounds();}  }
class C{  public Element writeBeanConnection(Element parent,Object o,String name) throws Exception {  Element node;  BeanConnection beanconn;  int source;  int target;  int sourcePos;  int targetPos;  if (DEBUG) {    trace(new Throwable(),name);  }  m_CurrentNode=parent;  beanconn=(BeanConnection)o;  node=null;  sourcePos=m_BeanInstances.indexOf(beanconn.getSource());  targetPos=m_BeanInstances.indexOf(beanconn.getTarget());  if ((sourcePos > -1) && (targetPos > -1)) {    source=m_BeanInstancesID.get(sourcePos).intValue();    target=m_BeanInstancesID.get(targetPos).intValue();  } else {    source=-1;    target=-1;  }  if ((source > -1) && (target > -1)) {    node=addElement(parent,name,beanconn.getClass().getName(),false);    writeIntToXML(node,source,VAL_SOURCEID);    writeIntToXML(node,target,VAL_TARGETID);    invokeWriteToXML(node,beanconn.getEventName(),VAL_EVENTNAME);    writeBooleanToXML(node,beanconn.isHidden(),VAL_HIDDEN);  }  return node;}  }
class C{  public XYSeriesTransition(ChartComponent chart,XYSeries series){  super(chart);  this.series=series;}  }
class C{  public void deleteFileTransfer(String transferId) throws RcsPersistentStorageException, RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteFileTransfer(transferId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public ServiceEndpoint(String name,String endpoint,String binding){  ValidateUtil.validateNotEmpty(endpoint,"endpoint");  ValidateUtil.validateNotEmpty(binding,"binding");  if (name == null || name.isEmpty()) {    name=endpoint;  }  this.name=name;  this.endpoint=endpoint;  this.binding=binding;}  }
class C{  @RequestMapping(value="/reset_password",method=RequestMethod.POST,produces=MediaType.TEXT_PLAIN_VALUE) @Timed @Transactional public ResponseEntity<?> changePassword(@RequestBody PasswordResetDTO passwordReset){  log.debug("REST request to reset password");  if (StringUtils.isEmpty(passwordReset.getNewPassword()) || StringUtils.isEmpty(passwordReset.getKey())) {    return new ResponseEntity<>("Missing parameters",HttpStatus.BAD_REQUEST);  }  return userEmailActivationRepository.findByActivationKey(passwordReset.getKey()).map(null).orElseGet(null);}  }
class C{  public void superOp(UserHostmask user){  if (user == null)   throw new IllegalArgumentException("Can't set super op on null user");  setMode("+a " + user.getNick());}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException();}  }
class C{  private void save(){  if (copyCheckBox.isSelected() && JOptionPane.showConfirmDialog(this,MessageFormat.format(Bundle.getMessage("CopyCarType"),new Object[]{typeComboBox.getSelectedItem(),textCarType.getText()}),Bundle.getMessage("CopyCarTypeTitle"),JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {    return;  }  log.debug("Save {} trains",trainList.size());  removePropertyChangeTrains();  for (int i=0; i < trainList.size(); i++) {    JCheckBox cb=trainList.get(i);    Train train=manager.getTrainById(cb.getName());    if (cb.isSelected()) {      train.addTypeName((String)typeComboBox.getSelectedItem());    } else {      train.deleteTypeName((String)typeComboBox.getSelectedItem());    }  }  OperationsXml.save();  updateTrains();  if (Setup.isCloseWindowOnSaveEnabled()) {    dispose();  }}  }
class C{  @Override public URI rdfLabel(){  return label;}  }
class C{  protected CommandSession prepare(AbsCommand command,DummyCodenvyClient codenvyClient){  CommandSession commandSession=Mockito.mock(CommandSession.class);  Preferences globalPreferences=Mockito.mock(Preferences.class);  Preferences remotesPreferences=Mockito.mock(Preferences.class);  Map<String,String> preferencesMap=new HashMap<>();  preferencesMap.put("default","default");  doReturn(preferencesMap).when(globalPreferences).get("remotes",Map.class);  doReturn(remotesPreferences).when(globalPreferences).path("remotes");  Remote defaultRemote=Mockito.mock(Remote.class);  doReturn(defaultRemote).when(remotesPreferences).get("default",Remote.class);  RemoteCredentials defaultRemoteCredentials=Mockito.mock(RemoteCredentials.class);  doReturn("defaultToken").when(defaultRemoteCredentials).getToken();  doReturn(defaultRemoteCredentials).when(remotesPreferences).get(eq("default"),eq(RemoteCredentials.class));  doReturn("http://default").when(defaultRemote).getUrl();  doReturn(true).when(defaultRemote).isDefaultRemote();  doReturn("username").when(defaultRemoteCredentials).getUsername();  MultiRemoteCodenvy multiRemoteCodenvy=new MultiRemoteCodenvy(codenvyClient,globalPreferences,commandSession);  command.setCodenvyClient(codenvyClient);  doReturn(multiRemoteCodenvy).when(commandSession).get(MultiRemoteCodenvy.class.getName());  doReturn(globalPreferences).when(commandSession).get(Preferences.class.getName());  doReturn(codenvyClient).when(commandSession).get(DummyCodenvyClient.class.getName());  return commandSession;}  }
class C{  public FolderControl populateTreeUsingServerRoot(){  treeViewer.setInput(new Object());  return this;}  }
class C{  public GridUrlConnection(URL url,GridDeploymentManager mgr){  super(url);  assert mgr != null;  this.mgr=mgr;}  }
class C{  public void assertParseable(Geometry originalGeom) throws ParseException {  Geometry parsedGeom=GeoParseUtils.getGeometry(genericStatement(originalGeom,schemaToTest,encodeMethod));  assertTrue("Parsed should equal original: " + originalGeom + " parsed: "+ parsedGeom,originalGeom.equalsNorm(parsedGeom));}  }
class C{  public boolean isInvalid(){  return createException != null;}  }
class C{  private void writeObject(final java.io.ObjectOutputStream out) throws IOException {  out.writeBoolean(useOnOffSwith);  out.writeObject(markerColors);}  }
class C{  public void onNativeLibraryReady(){  mRegularTabModel.initializeNative();  mIncognitoTabModel.initializeNative();}  }
class C{  void stop(){  if (context instanceof Application) {    ((Application)context).unregisterActivityLifecycleCallbacks(callbacks);    callbacksIsRegistered=false;  }}  }
class C{  public void shutdown(){  shutdown(true);}  }
class C{  public static int cs_tdfs(int j,int k,int[] head,int head_offset,int[] next,int next_offset,int[] post,int post_offset,int[] stack,int stack_offset){  int i, p, top=0;  if (head == null || next == null || post == null || stack == null)   return (-1);  stack[stack_offset + 0]=j;  while (top >= 0) {    p=stack[stack_offset + top];    i=head[head_offset + p];    if (i == -1) {      top--;      post[post_offset + (k++)]=p;    } else {      head[head_offset + p]=next[next_offset + i];      stack[stack_offset + (++top)]=i;    }  }  return (k);}  }
class C{  private LinkedList<Diff> diff_bisectSplit(String text1,String text2,int x,int y,long deadline){  String text1a=text1.substring(0,x);  String text2a=text2.substring(0,y);  String text1b=text1.substring(x);  String text2b=text2.substring(y);  LinkedList<Diff> diffs=diff_main(text1a,text2a,false,deadline);  LinkedList<Diff> diffsb=diff_main(text1b,text2b,false,deadline);  diffs.addAll(diffsb);  return diffs;}  }
class C{  public void removeCompressedThumbnail(){  mData.setCompressedThumbnail(null);}  }
class C{  public void hide(){  LayoutParams lp=(LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  private void startTracking(final int session){  if (session != RadioBeacon.SESSION_NOT_TRACKING) {    Log.d(TAG,"Preparing session " + session);    mSession=session;    resumeSession(session);  } else {    Log.d(TAG,"Preparing new session");    mSession=setupNewSession();  }  bindAll();  showNotification();}  }
class C{  public boolean isVisible(String locator){  boolean found=false;  try {    WebElement element=findElement(locator);    if (element.isDisplayed()) {      logger.info("INFO: Element " + locator + " found and is visible");      found=true;    }  } catch (  NoSuchElementException err) {  }  return found;}  }
class C{  @Override public void requestLocationSuccess(String locationName){  weatherUtils.requestWeather(locationName,this);  getLocation().realLocation=locationName;  DatabaseHelper.getInstance(this).insertLocation(getLocation());}  }
class C{  @SuppressWarnings("unchecked") public final E next(){  if (q[index] == null)   throw new NoSuchElementException();  if (index == q.length - 1) {    q=(E[])q[index];    index=0;    if (q[index] == null)     throw new NoSuchElementException();  }  E ret=q[index];  if (ret == ChunkedQueue.NULL_CONST)   ret=null;  index++;  return ret;}  }
class C{  void resizeReceiveBuffer(int new_size){  short scale_factor=0;  while (new_size > 0xFFFF) {    ++scale_factor;    new_size>>=1;  }  new_size<<=scale_factor;  boolean result=m_rbuf.setCapacity(new_size);  assert result;  m_rbuf_len=new_size;  m_rwnd_scale=scale_factor;  m_ssthresh=new_size;  int available_space=m_rbuf.getWriteRemaining();  m_rcv_wnd=available_space;}  }
class C{  public int next(){  int node=_currentNode;  if (DTM.NULL != node)   _currentNode=getNextNamespaceNode(_startNode,node,false);  return returnNode(node);}  }
class C{  private boolean isInGroups(List<Group> groups,int groupId){  for (  Group group : groups) {    if (group != null && (group.getUid() == groupId)) {      return true;    }  }  return false;}  }
class C{  public String readFixedLengthString(int length) throws EOFException, FormatException {  byte foo[]=readBytes(length,false);  return new String(foo,0,length);}  }
class C{  public void registerPopout(JDialog popout){  popouts.put(popout,null);  addHotkeys(popout.getRootPane());}  }
class C{  protected static String bytesToHexa(final byte[] b){  char hexDigit[]={'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};  StringBuilder buffer=new StringBuilder();  for (int i=0; i < b.length; i++) {    buffer.append(hexDigit[(b[i] >> 4) & 0x0f]);    buffer.append(hexDigit[b[i] & 0x0f]);  }  return buffer.toString();}  }
class C{  public Severity put(PrinterStateReason reason,Severity severity){  if (reason == null) {    throw new NullPointerException("reason is null");  }  if (severity == null) {    throw new NullPointerException("severity is null");  }  return super.put(reason,severity);}  }
class C{  ConnectionManager connections(){  return connections;}  }
class C{  public void cleanup() throws SyncException {  for (  SynchronizingStorageEngine store : storeRegistry.values()) {    store.cleanupTask();  }}  }
class C{  public static List URIMutator(List<String> uripaths){  List<String> modifiedPaths=new ArrayList<>();  modifiedPaths.addAll(uripaths);  for (int i=0; i < uripaths.size(); i+=1) {    modifiedPaths.set(i,"/" + uripaths.get(i));  }  return modifiedPaths;}  }
class C{  public boolean updateFileListing(File configDir,boolean zipOnly){  if (resources.isEmpty())   return true;  FileListing fl=new FileListing(configDir);  if (!fl.load())   Log.warning("Could not load file listing; trying to overwrite...");  if (!zipOnly) {    for (    Resource r : resources)     fl.addFile(r.getFileName());  }  boolean allOk=true;  for (  String r : extract) {    File rf=Resource.getLocationOf(r);    if (rf.exists()) {      if (!fl.addZip(rf.getAbsolutePath()))       allOk=false;    }  }  return fl.save() && allOk;}  }
class C{  public Builder systemStreamAcl(StreamAcl systemStreamAcl){  this.systemStreamAcl=systemStreamAcl;  return this;}  }
class C{  public static Paint newCornerPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_CORNER_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint cornerPaint=new Paint();  cornerPaint.setColor(DEFAULT_CORNER_COLOR);  cornerPaint.setStrokeWidth(lineThicknessPx);  cornerPaint.setStyle(Paint.Style.STROKE);  return cornerPaint;}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,double value){  buffer.append(value);}  }
class C{  @SuppressWarnings("deprecation") public static void unbindDrawables(View view){  if (null == view) {    return;  }  if (view.getBackground() != null) {    view.getBackground().setCallback(null);    if (Build.VERSION.SDK_INT >= 16)     view.setBackground(null); else     view.setBackgroundDrawable(null);  }  if (view instanceof ImageView) {    ImageView imageView=(ImageView)view;    if (imageView.getDrawable() != null) {      imageView.getDrawable().setCallback(null);      imageView.setImageDrawable(null);    }  }  if (view instanceof ViewGroup) {    for (int i=0; i < ((ViewGroup)view).getChildCount(); i++) {      unbindDrawables(((ViewGroup)view).getChildAt(i));    }    if (!(view instanceof AdapterView<?>)) {      ((ViewGroup)view).removeAllViews();    }  }}  }
class C{  static public void writeText(Writer out,char[] buff,String text) throws IOException {  int buffLength=buff.length;  int buffIndex=0;  int length=text.length();  for (int i=0; i < length; i++) {    char ch=text.charAt(i);    if (ch < 0xA0) {      if (ch >= 0x3f) {        buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);      } else       if (ch >= 0x27) {        if (ch < 0x3c) {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        } else         if (ch == '<') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&lt;");        } else         if (ch == '>') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&gt;");        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      } else {        if (ch == '&') {          buffIndex=flushBuffer(out,buff,buffIndex);          out.write("&amp;");        } else {          buffIndex=addToBuffer(out,buff,buffIndex,buffLength,ch);        }      }    } else {      buffIndex=flushBuffer(out,buff,buffIndex);      _writeDecRef(out,ch);    }  }  flushBuffer(out,buff,buffIndex);}  }
class C{  private void flushBuffer() throws IOException {  if (bpos > 0) {    internalWrite(buffer,0,bpos,false);    bpos=0;  }}  }
class C{  @Override public Object process(org.apache.hadoop.hive.ql.lib.Node nd,Stack<org.apache.hadoop.hive.ql.lib.Node> stack,NodeProcessorCtx procCtx,Object... nodeOutputs) throws SemanticException {  inputTableList=new UniqueList<String>();  outputTableList=new UniqueList<String>();  functionList=new UniqueList<String>();  columnList=new UniqueList<String>();  inTableNodes=new UniqueList<Table>();  outTableNodes=new UniqueList<Table>();  inColumnNodes=new UniqueList<Column>();  outColumnNodes=new UniqueList<Column>();  functions=new ArrayList<Function>();  relations=new ArrayList<Relation>();  constants=new ArrayList<Constant>();  ASTNode pt=(ASTNode)nd;switch (pt.getToken().getType()) {case HiveParser.TOK_QUERY:    LOGGER.info("\nQuery " + ++subquerySeq + " parsed");  getTableLineage(pt);for (String inputTable : inputTableList) {  LOGGER.info("inputTable = " + inputTable);}if (outputTableList.isEmpty()) {String outputTable="TEMP_" + UUID.randomUUID();outputTableList.add(outputTable);if (outTableNodes.isEmpty()) {  Table table=new Table(outputTable,defaultHiveDbName,null,EntityType.OUTTYPE,false);  outTableNodes.add(table);  LOGGER.info("Output temp Table added : " + table.getTableName());}}for (String outputTable : outputTableList) {if (outputTable == null || outputTable.equalsIgnoreCase("<EOF>")) {if (outputTableList.remove(null) || outputTableList.remove("<EOF>")) {  outputTable="TEMP_" + UUID.randomUUID();  outputTableList.add(outputTable);}if (outTableNodes.isEmpty()) {  Table table=new Table(outputTable,defaultHiveDbName,null,EntityType.OUTTYPE,false);  outTableNodes.add(table);  LOGGER.info("Output temp Table added : " + table.getTableName());}}LOGGER.info("outputTable = " + outputTable);}Table.populateOutputTableColumns(inTableNodes,outTableNodes,inColumnNodes,outColumnNodes,functions,constants,relations);Column.updateInputColumns(inTableNodes,outTableNodes,inColumnNodes,outColumnNodes,functions,constants,relations);Function.updateFunctions(inTableNodes,outTableNodes,inColumnNodes,outColumnNodes,functions,constants,relations);Constant.updateConstants(inTableNodes,outTableNodes,inColumnNodes,outColumnNodes,functions,constants,relations);Relation.updateRelations(inTableNodes,outTableNodes,inColumnNodes,outColumnNodes,functions,constants,relations);break;}finalInTableNodes.addAll(inTableNodes);finalOutTableNodes.addAll(outTableNodes);finalInColumnNodes.addAll(inColumnNodes);finalOutColumnNodes.addAll(outColumnNodes);finalFunctions.addAll(functions);finalConstants.addAll(constants);finalRelations.addAll(relations);return null;}  }
class C{  private int sumProduct(int[] firstIndices,int[] secondIndices){  int firstLength=firstIndices.length;  int secondLength=secondIndices.length;  int length=secondLength > firstLength ? firstLength : secondLength;  int product=0;  for (int i=0; i < length; i++) {    product+=firstIndices[i] * secondIndices[i];  }  return product;}  }
class C{  public synchronized void reply(SpeedoReply l){  count=l.getCount();  series=l.getSeries();  if (count > 0) {switch (series) {case 4:      circ=12.5664F;    readerLabel.setText(rb.getString("Reader40"));  break;case 5:circ=18.8496F;readerLabel.setText(rb.getString("Reader50"));break;case 6:circ=50.2655F;readerLabel.setText(rb.getString("Reader60"));break;default :speedTextField.setText(rb.getString("ReaderErr"));log.error("Invalid reader type");break;}calcSpeed();}if (timerRunning == false) {startReplyTimer();startDisplayTimer();startFastDisplayTimer();timerRunning=true;} else {replyTimer.restart();}}  }
class C{  protected void printStat(){  System.out.println("!!! -------------------------------------------------------");  System.out.println("!!! Puts: cache = " + cache.localMetrics().getCachePuts() + ", offheap = "+ cache.localMetrics().getOffHeapPuts()+ ", swap = "+ cache.localMetrics().getSwapPuts());  System.out.println("!!! Gets: cache = " + cache.localMetrics().getCacheGets() + ", offheap = "+ cache.localMetrics().getOffHeapGets()+ ", swap = "+ cache.localMetrics().getSwapGets());  System.out.println("!!! Removes: cache = " + cache.localMetrics().getCacheRemovals() + ", offheap = "+ cache.localMetrics().getOffHeapRemovals()+ ", swap = "+ cache.localMetrics().getSwapRemovals());  System.out.println("!!! Evictions: cache = " + cache.localMetrics().getCacheEvictions() + ", offheap = "+ cache.localMetrics().getOffHeapEvictions()+ ", swap = none");  System.out.println("!!! Hits: cache = " + cache.localMetrics().getCacheHits() + ", offheap = "+ cache.localMetrics().getOffHeapHits()+ ", swap = "+ cache.localMetrics().getSwapHits());  System.out.println("!!! Hit(%): cache = " + cache.localMetrics().getCacheHitPercentage() + ", offheap = "+ cache.localMetrics().getOffHeapHitPercentage()+ ", swap = "+ cache.localMetrics().getSwapHitPercentage());  System.out.println("!!! Misses: cache = " + cache.localMetrics().getCacheMisses() + ", offheap = "+ cache.localMetrics().getOffHeapMisses()+ ", swap = "+ cache.localMetrics().getSwapMisses());  System.out.println("!!! Miss(%): cache = " + cache.localMetrics().getCacheMissPercentage() + ", offheap = "+ cache.localMetrics().getOffHeapMissPercentage()+ ", swap = "+ cache.localMetrics().getSwapMissPercentage());  System.out.println("!!! Entries: cache = " + cache.localMetrics().getSize() + ", offheap = "+ cache.localMetrics().getOffHeapEntriesCount()+ ", swap = "+ cache.localMetrics().getSwapEntriesCount());  System.out.println("!!! Size: cache = none" + ", offheap = " + cache.localMetrics().getOffHeapAllocatedSize() + ", swap = "+ cache.localMetrics().getSwapSize());  System.out.println();}  }
class C{  public UnderSea(){  super();}  }
class C{  public void stop(){  stopped=true;}  }
class C{  public boolean isShowLegendItem(){  return mShowLegendItem;}  }
class C{  public Interval toInterval(){  return toInterval(null);}  }
class C{  private static boolean hasBody(final int statusCode){  if ((statusCode >= 100 && statusCode < 200) || statusCode == 204 || statusCode == 304) {    return false;  }  return true;}  }
class C{  private static void add(String optionsKey,Map<String,List<Object>> map,String key,List<Object> values){  if (key != null) {    if (values == null) {      add(map,optionsKey,key);    } else {      List<Object> old=map.get(key);      if (old == null) {        map.put(key,values);      } else {        old.addAll(values);      }    }  }}  }
class C{  public static <T>T withReader(Reader reader,@ClosureParams(FirstParam.class) Closure<T> closure) throws IOException {  try {    T result=closure.call(reader);    Reader temp=reader;    reader=null;    temp.close();    return result;  }  finally {    closeWithWarning(reader);  }}  }
class C{  public void initializeBaseForDP(List<Datum> data){  int dimension=data.get(0).metrics().getDimension();  baseNu=dimension;  double[][] boundingBox=AlgebraUtils.getBoundingBox(data);  double[] midpoints=new double[dimension];  double[] dimensionWidth=new double[dimension];  double R=0;  for (int i=0; i < dimension; i++) {    dimensionWidth[i]=boundingBox[i][1] - boundingBox[i][0];    midpoints[i]=boundingBox[i][0] + dimensionWidth[i];    if (dimensionWidth[i] > R) {      R=dimensionWidth[i];    }  }  baseBeta=Math.pow(R,-2);  baseLoc=new ArrayRealVector(midpoints);  baseOmegaInverse=MatrixUtils.createRealIdentityMatrix(dimension);}  }
class C{  public Collection<Layer> build(){  return layers;}  }
class C{  @Override public void registerChunkAutoReclaim(MemChunkHolder<A> mholder){  m_chunkcollector.register(mholder);}  }
class C{  void commitFreeSlab(int index){  if (freeSlabIndex >= MAX_SLABS) {    VM.assertions.fail("All free slabs used: virtual address space is exhausled.");  }  VM.barriers.objectArrayStoreNoGCBarrier(slabTable,index,freeSlabs[freeSlabIndex]);  VM.barriers.objectArrayStoreNoGCBarrier(freeSlabs,freeSlabIndex,null);  freeSlabIndex++;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Set<String> selectIDsToDelete(List<String> inputLines) throws IOException {  Set<TreeSet<Document>> clusters=linesToClusters(inputLines);  Set<Document> toBeDeleted=getDocumentsToBeDeleted(clusters);  return collectIDsOfDeletedRecords(toBeDeleted);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  int num=getInt(stack);  String remoteName=getString(stack);  int portNum=getInt(stack);  SFIRTuner tun=ExternalTuningManager.getIRTunerPlugin(getString(stack),portNum);  if (tun != null) {synchronized (tun) {      tun.getRemoteInfo(remoteName);      tun.setSequenceDelay(num);      tun.saveChanges();    }  }  return null;}  }
class C{  @Override public void displayAcceptedOffer(Offer offer){  this.acceptedOffers.add(offer);  if (offer.getType() == PlanConstants.TALK) {    talkAdapter.addCardOffer(offer);  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void showToolbar(){  showing=true;  hideShowMotion=Motion.createSplineMotion(getY(),initialY,300);  getComponentForm().registerAnimated(this);  hideShowMotion.start();}  }
class C{  @Override public void customize(ConfigurableEmbeddedServletContainer container){}  }
class C{  public boolean batchLogin(){  return batchLogin(new java.sql.Timestamp(System.currentTimeMillis()));}  }
class C{  public static ParameterInfo createInfoForAddedParameter(String type,String name){  ParameterInfo info=new ParameterInfo("","",INDEX_FOR_ADDED);  info.setNewTypeName(type);  info.setNewName(name);  info.setResolve(false);  return info;}  }
class C{  public void update(com.bbn.openmap.corba.CSpecialist.CirclePackage.CF_update update){  needToRegenerate=true;switch (update.discriminator().value()) {case com.bbn.openmap.corba.CSpecialist.CirclePackage.settableFields._CF_ll1:    LLPoint ll=update.ll1();  setLatLon(ll.lat,ll.lon);break;case com.bbn.openmap.corba.CSpecialist.CirclePackage.settableFields._CF_p1:XYPoint pt1=update.p1();setX(pt1.x);setY(pt1.y);break;case com.bbn.openmap.corba.CSpecialist.CirclePackage.settableFields._CF_major:setRadius(update.major());break;case com.bbn.openmap.corba.CSpecialist.CirclePackage.settableFields._CF_minor:setRadius(update.minor());break;case com.bbn.openmap.corba.CSpecialist.CirclePackage.settableFields._CF_height:setHeight(update.height());break;case com.bbn.openmap.corba.CSpecialist.CirclePackage.settableFields._CF_width:setWidth(update.width());break;default :System.err.println("JCircle.update: invalid circle update");break;}}  }
class C{  public String TO_CHAR(String columnName,int displayType,String AD_Language){  StringBuffer retValue=new StringBuffer("TRIM(TO_CHAR(");  retValue.append(columnName);  if (DisplayType.isNumeric(displayType)) {    if (displayType == DisplayType.Amount)     retValue.append(",'999G999G999G990D00'"); else     retValue.append(",'TM9'");    if (!Language.isDecimalPoint(AD_Language))     retValue.append(",'NLS_NUMERIC_CHARACTERS='',.'''");  } else   if (DisplayType.isDate(displayType)) {    retValue.append(",'").append(Language.getLanguage(AD_Language).getDBdatePattern()).append("'");  }  retValue.append("))");  return retValue.toString();}  }
class C{  public boolean isDominatedBy(BasicBlock bb){  return dominators.get(bb.getNumber());}  }
class C{  public static boolean isAlphanumeric(String str){  if (str == null) {    return false;  }  int sz=str.length();  for (int i=0; i < sz; i++) {    if (Character.isLetterOrDigit(str.charAt(i)) == false) {      return false;    }  }  return true;}  }
class C{  public static void onRequestPermissionsResult(Activity activity,int requestCode,String[] permissions,int[] grantResults){  requestResult(activity,requestCode,permissions,grantResults);}  }
class C{  public static boolean isPhoenixProcess(Context context){  int currentPid=Process.myPid();  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  ActivityManager.RunningAppProcessInfo processInfo : manager.getRunningAppProcesses()) {    if (processInfo.pid == currentPid && processInfo.processName.endsWith(":phoenix")) {      return true;    }  }  return false;}  }
class C{  public FDBigInteger leftInplaceSub(FDBigInteger subtrahend){  assert this.size() >= subtrahend.size() : "result should be positive";  FDBigInteger minuend;  if (this.isImmutable) {    minuend=new FDBigInteger(this.data.clone(),this.offset);  } else {    minuend=this;  }  int offsetDiff=subtrahend.offset - minuend.offset;  int[] sData=subtrahend.data;  int[] mData=minuend.data;  int subLen=subtrahend.nWords;  int minLen=minuend.nWords;  if (offsetDiff < 0) {    int rLen=minLen - offsetDiff;    if (rLen < mData.length) {      System.arraycopy(mData,0,mData,-offsetDiff,minLen);      Arrays.fill(mData,0,-offsetDiff,0);    } else {      int[] r=new int[rLen];      System.arraycopy(mData,0,r,-offsetDiff,minLen);      minuend.data=mData=r;    }    minuend.offset=subtrahend.offset;    minuend.nWords=minLen=rLen;    offsetDiff=0;  }  long borrow=0L;  int mIndex=offsetDiff;  for (int sIndex=0; sIndex < subLen && mIndex < minLen; sIndex++, mIndex++) {    long diff=(mData[mIndex] & LONG_MASK) - (sData[sIndex] & LONG_MASK) + borrow;    mData[mIndex]=(int)diff;    borrow=diff >> 32;  }  for (; borrow != 0 && mIndex < minLen; mIndex++) {    long diff=(mData[mIndex] & LONG_MASK) + borrow;    mData[mIndex]=(int)diff;    borrow=diff >> 32;  }  assert borrow == 0L : borrow;  minuend.trimLeadingZeros();  return minuend;}  }
class C{  private void parseTextForSTL(Caption currentCaption,byte[] textField,int justification,TimedTextObject tto){  boolean italics=false;  boolean underline=false;  String color="white";  Style style;  String text="";  for (int i=0; i < textField.length; i++) {    if (textField[i] < 0) {      if (textField[i] <= -113) {        if (i + 1 < textField.length && textField[i] == textField[i + 1])         i++;switch (textField[i]) {case -128:          italics=true;        break;case -127:      italics=false;    break;case -126:  underline=true;break;case -125:underline=false;break;case -124:break;case -123:break;case -118:currentCaption.content+=text + "<br />";text="";break;case -113:currentCaption.content+=text;text="";if (underline) color+="U";if (italics) color+="I";style=tto.styling.get(color);if (justification == 1) {color+="L";if (tto.styling.get(color) == null) {style=new Style(color,style);style.textAlign="bottom-left";tto.styling.put(color,style);} else style=tto.styling.get(color);} else if (justification == 3) {color+="R";if (tto.styling.get(color) == null) {style=new Style(color,style);style.textAlign="bottom-rigth";tto.styling.put(color,style);} else style=tto.styling.get(color);}currentCaption.style=style;int key=currentCaption.start.mseconds;while (tto.captions.containsKey(key)) key++;tto.captions.put(key,currentCaption);i=textField.length;break;default :}} else {}} else if (textField[i] < 32) {if (i + 1 < textField.length && textField[i] == textField[i + 1]) i++;switch (textField[i]) {case 7:color="white";break;case 2:color="green";break;case 4:color="blue";break;case 6:color="cyan";break;case 1:color="red";break;case 3:color="yellow";break;case 5:color="magenta";break;case 0:color="black";break;default :}} else {byte[] x={textField[i]};text+=new String(x);}}}  }
class C{  public void validate(@NonNull Object object) throws RaveException {  validate(object,EMPTY_EXCLUSION);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public static <K,V>boolean putMapNotNullKeyAndValue(Map<K,V> map,K key,V value){  if (map == null || key == null || value == null) {    return false;  }  map.put(key,value);  return true;}  }
class C{  public WrappedSunJDKParser(BufferedReader bis,Map threadStore,int lineCounter,boolean withCurrentTimeStamp,int startCounter,DateMatcher dm){  super(bis,threadStore,lineCounter,withCurrentTimeStamp,startCounter,dm);}  }
class C{  public SampleVcpcFastRunner(Graph graph,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(graph,params,knowledgeBoxModel);}  }
class C{  public MultipartContent addPart(Part part){  parts.add(Preconditions.checkNotNull(part));  return this;}  }
class C{  public T caseSequence(Sequence object){  return null;}  }
class C{  public void makePrimary(ClientProxyMembershipID proxyId,boolean isClientReady){  CacheClientProxy proxy=getClientProxy(proxyId);  if (proxy != null) {    proxy.setPrimary(true);    if (isClientReady || !proxy.isDurable()) {      if (logger.isDebugEnabled()) {        logger.debug("CacheClientNotifier: Notifying proxy to start dispatcher for: {}",proxy);      }      proxy.startOrResumeMessageDispatcher(false);    }  } else {    throw new InternalGemFireError("No cache client proxy on this node for proxyId " + proxyId);  }}  }
class C{  public void add(Coordinate pt){  ptCount+=1;  centSum.x+=pt.x;  centSum.y+=pt.y;}  }
class C{  @Override public boolean supportsOpenCursorsAcrossRollback(){  debugCodeCall("supportsOpenCursorsAcrossRollback");  return false;}  }
class C{  private void startArg(){  insideAttribute=true;  arg=new FunctionLibFunctionArg();}  }
class C{  public DoubleMatrix jblas_solvePositive(double[][] B){  return org.jblas.Solve.solvePositive(new DoubleMatrix(this.getArray()),new DoubleMatrix(B));}  }
class C{  public void unregisterComponent(JComponent component){  component.removeMouseListener(this);  component.removeMouseMotionListener(moveBeforeEnterListener);  component.removeKeyListener(accessibilityKeyListener);}  }
class C{  private CPluginOutputDialog(){  super((JFrame)null,"Global Plugin Log");  new CDialogEscaper(this);  setLayout(new BorderLayout());  m_textArea.setEditable(false);  m_textArea.setFont(GuiHelper.MONOSPACED_FONT);  add(new JScrollPane(m_textArea));  final JPanel bottomPanel=new JPanel(new BorderLayout());  bottomPanel.add(new JButton(new ClearAction()),BorderLayout.WEST);  bottomPanel.add(new JButton(new CloseAction()),BorderLayout.EAST);  add(bottomPanel,BorderLayout.SOUTH);  setAlwaysOnTop(true);  setJMenuBar(new CLogConsoleMenuBar());  m_textArea.addMouseListener(new InternalMouseListener());  setSize(600,400);}  }
class C{  public static String generateUserPasswordLine(User user,String realm){  MessageDigest md5;  try {    md5=MessageDigest.getInstance("md5");  } catch (  NoSuchAlgorithmException e) {    throw new CargoException("Cannot get the MD5 digest for generating the JBoss user properties files",e);  }  String toHash=user.getName() + ":" + realm+ ":"+ user.getPassword();  byte[] hash;  try {    hash=md5.digest(toHash.getBytes("UTF-8"));  } catch (  UnsupportedEncodingException e) {    throw new CargoException("Cannot encode one line for the " + "application-users.properties file",e);  }  StringBuilder sb=new StringBuilder();  sb.append(user.getName());  sb.append("=");  for (  byte hashByte : hash) {    sb.append(String.format("%02x",hashByte));  }  sb.append('\n');  return sb.toString();}  }
class C{  public static boolean isIrix(){  return osName.indexOf("Irix") > -1;}  }
class C{  public <T extends Enum<T>>boolean isValidEnum(String value,Class<T> enumClass){  for (  T e : enumClass.getEnumConstants()) {    if (e.name().equalsIgnoreCase(value)) {      return true;    }  }  return false;}  }
class C{  public ControlLetterEscapeSequence createControlLetterEscapeSequence(){  ControlLetterEscapeSequenceImpl controlLetterEscapeSequence=new ControlLetterEscapeSequenceImpl();  return controlLetterEscapeSequence;}  }
class C{  private void skipToTagHeader(ExtractorInput input) throws IOException, InterruptedException {  input.skipFully(bytesToNextTagHeader);  bytesToNextTagHeader=0;  parserState=STATE_READING_TAG_HEADER;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.FUNCTION_DECLARATION__BODY:    return basicSetBody(null,msgs);case N4JSPackage.FUNCTION_DECLARATION__LOK:  return basicSet_lok(null,msgs);case N4JSPackage.FUNCTION_DECLARATION__FPARS:return ((InternalEList<?>)getFpars()).basicRemove(otherEnd,msgs);case N4JSPackage.FUNCTION_DECLARATION__RETURN_TYPE_REF:return basicSetReturnTypeRef(null,msgs);case N4JSPackage.FUNCTION_DECLARATION__TYPE_VARS:return ((InternalEList<?>)getTypeVars()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  protected String elapsedTimeAsString(long runTime){  return NumberFormat.getInstance().format((double)runTime / 1000);}  }
class C{  public BiolinguaDigraph(String fname) throws FileNotFoundException, IOException {  super(fname);}  }
class C{  public DomainObjectException(String message,ClassEnum classEnum,String businessKey){  super(message,new Object[]{businessKey});  setDomainObjectClassEnum(classEnum);}  }
class C{  @Override public void processEndElement() throws ParseException {  if (value == null) {    value="";  }  html=value;  lang=xmlLang;}  }
class C{  public boolean handleMobileCellScroll(Rect r){  int offset=computeVerticalScrollOffset();  int height=getHeight();  int extent=computeVerticalScrollExtent();  int range=computeVerticalScrollRange();  int hoverViewTop=r.top;  int hoverHeight=r.height();  if (hoverViewTop <= 0 && offset > 0) {    smoothScrollBy(-mSmoothScrollAmountAtEdge,0);    return true;  }  if (hoverViewTop + hoverHeight >= height && (offset + extent) < range) {    smoothScrollBy(mSmoothScrollAmountAtEdge,0);    return true;  }  return false;}  }
class C{  @SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){  T[] array=list.toArray((T[])new Object[list.size()]);  Arrays.sort(array,comparator);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(array[i++]);  }}  }
class C{  private void showListSendingStrategyValidationMessage(){  sendingValueDecoration.setDescriptionText("List sending strategy must define a list size greater than zero.");}  }
class C{  public static void i(String message){  if (BuildConfig.DEBUG)   Log.i(TAG,buildLogMsg(message));}  }
class C{  public static String atomMarshall(Object entityDto,ODataUri serviceUri) throws ODataException, UnsupportedEncodingException {  ODataResponse.Builder builder=new ODataResponse.Builder().setStatus(OK);  new AtomRenderer().render(buildODataContext("",ATOM_XML,serviceUri),QueryResult.from(entityDto),builder);  return builder.build().getBodyText(StandardCharsets.UTF_8.name());}  }
class C{  public void fireTableDataChanged(){  fireTableChanged(new TableModelEvent(this));}  }
class C{  public void lock(Object o){  getLock(o).lock();}  }
class C{  private boolean predictsFalseIndependence(Set<IonIndependenceFacts> associations,Graph pag){  for (  IonIndependenceFacts assocFact : associations)   for (  List<Node> conditioningSet : assocFact.getZ())   if (pag.isDSeparatedFrom(assocFact.getX(),assocFact.getY(),conditioningSet))   return true;  return false;}  }
class C{  public boolean isAssignableTo(Class cl){  return _rawClass.isAssignableTo(cl);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case SGraphPackage.IMPORT_DECLARATION__DECLARATION:    setDeclaration((Declaration)null);  return;}super.eUnset(featureID);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4mfPackage.MODULE_FILTER_SPECIFIER__MODULE_SPECIFIER_WITH_WILDCARD:    setModuleSpecifierWithWildcard((String)newValue);  return;case N4mfPackage.MODULE_FILTER_SPECIFIER__SOURCE_PATH:setSourcePath((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  void initConstants(EvolutionState state){  constants=new float[numConstants];  for (int i=0; i < numConstants; i++)   constants[i]=constantMin + state.random[0].nextFloat() * (constantMax - constantMin);}  }
class C{  public void addInvokevirtual(int clazz,String name,String desc){  add(INVOKEVIRTUAL);  addIndex(constPool.addMethodrefInfo(clazz,name,desc));  growStack(Descriptor.dataSize(desc) - 1);}  }
class C{  public static boolean invertM(float[] mInv,int mInvOffset,float[] m,int mOffset){  final float src0=m[mOffset + 0];  final float src4=m[mOffset + 1];  final float src8=m[mOffset + 2];  final float src12=m[mOffset + 3];  final float src1=m[mOffset + 4];  final float src5=m[mOffset + 5];  final float src9=m[mOffset + 6];  final float src13=m[mOffset + 7];  final float src2=m[mOffset + 8];  final float src6=m[mOffset + 9];  final float src10=m[mOffset + 10];  final float src14=m[mOffset + 11];  final float src3=m[mOffset + 12];  final float src7=m[mOffset + 13];  final float src11=m[mOffset + 14];  final float src15=m[mOffset + 15];  final float atmp0=src10 * src15;  final float atmp1=src11 * src14;  final float atmp2=src9 * src15;  final float atmp3=src11 * src13;  final float atmp4=src9 * src14;  final float atmp5=src10 * src13;  final float atmp6=src8 * src15;  final float atmp7=src11 * src12;  final float atmp8=src8 * src14;  final float atmp9=src10 * src12;  final float atmp10=src8 * src13;  final float atmp11=src9 * src12;  final float dst0=(atmp0 * src5 + atmp3 * src6 + atmp4 * src7) - (atmp1 * src5 + atmp2 * src6 + atmp5 * src7);  final float dst1=(atmp1 * src4 + atmp6 * src6 + atmp9 * src7) - (atmp0 * src4 + atmp7 * src6 + atmp8 * src7);  final float dst2=(atmp2 * src4 + atmp7 * src5 + atmp10 * src7) - (atmp3 * src4 + atmp6 * src5 + atmp11 * src7);  final float dst3=(atmp5 * src4 + atmp8 * src5 + atmp11 * src6) - (atmp4 * src4 + atmp9 * src5 + atmp10 * src6);  final float dst4=(atmp1 * src1 + atmp2 * src2 + atmp5 * src3) - (atmp0 * src1 + atmp3 * src2 + atmp4 * src3);  final float dst5=(atmp0 * src0 + atmp7 * src2 + atmp8 * src3) - (atmp1 * src0 + atmp6 * src2 + atmp9 * src3);  final float dst6=(atmp3 * src0 + atmp6 * src1 + atmp11 * src3) - (atmp2 * src0 + atmp7 * src1 + atmp10 * src3);  final float dst7=(atmp4 * src0 + atmp9 * src1 + atmp10 * src2) - (atmp5 * src0 + atmp8 * src1 + atmp11 * src2);  final float btmp0=src2 * src7;  final float btmp1=src3 * src6;  final float btmp2=src1 * src7;  final float btmp3=src3 * src5;  final float btmp4=src1 * src6;  final float btmp5=src2 * src5;  final float btmp6=src0 * src7;  final float btmp7=src3 * src4;  final float btmp8=src0 * src6;  final float btmp9=src2 * src4;  final float btmp10=src0 * src5;  final float btmp11=src1 * src4;  final float dst8=(btmp0 * src13 + btmp3 * src14 + btmp4 * src15) - (btmp1 * src13 + btmp2 * src14 + btmp5 * src15);  final float dst9=(btmp1 * src12 + btmp6 * src14 + btmp9 * src15) - (btmp0 * src12 + btmp7 * src14 + btmp8 * src15);  final float dst10=(btmp2 * src12 + btmp7 * src13 + btmp10 * src15) - (btmp3 * src12 + btmp6 * src13 + btmp11 * src15);  final float dst11=(btmp5 * src12 + btmp8 * src13 + btmp11 * src14) - (btmp4 * src12 + btmp9 * src13 + btmp10 * src14);  final float dst12=(btmp2 * src10 + btmp5 * src11 + btmp1 * src9) - (btmp4 * src11 + btmp0 * src9 + btmp3 * src10);  final float dst13=(btmp8 * src11 + btmp0 * src8 + btmp7 * src10) - (btmp6 * src10 + btmp9 * src11 + btmp1 * src8);  final float dst14=(btmp6 * src9 + btmp11 * src11 + btmp3 * src8) - (btmp10 * src11 + btmp2 * src8 + btmp7 * src9);  final float dst15=(btmp10 * src10 + btmp4 * src8 + btmp9 * src9) - (btmp8 * src9 + btmp11 * src10 + btmp5 * src8);  final float det=src0 * dst0 + src1 * dst1 + src2 * dst2 + src3 * dst3;  if (det == 0.0f) {    return false;  }  final float invdet=1.0f / det;  mInv[mInvOffset]=dst0 * invdet;  mInv[1 + mInvOffset]=dst1 * invdet;  mInv[2 + mInvOffset]=dst2 * invdet;  mInv[3 + mInvOffset]=dst3 * invdet;  mInv[4 + mInvOffset]=dst4 * invdet;  mInv[5 + mInvOffset]=dst5 * invdet;  mInv[6 + mInvOffset]=dst6 * invdet;  mInv[7 + mInvOffset]=dst7 * invdet;  mInv[8 + mInvOffset]=dst8 * invdet;  mInv[9 + mInvOffset]=dst9 * invdet;  mInv[10 + mInvOffset]=dst10 * invdet;  mInv[11 + mInvOffset]=dst11 * invdet;  mInv[12 + mInvOffset]=dst12 * invdet;  mInv[13 + mInvOffset]=dst13 * invdet;  mInv[14 + mInvOffset]=dst14 * invdet;  mInv[15 + mInvOffset]=dst15 * invdet;  return true;}  }
class C{  public long maxSegmentSize(){  return maxSegmentSize;}  }
class C{  public void release(){  if (pipeline != null) {    pipeline.release(this);    pipeline=null;  }}  }
class C{  @Benchmark public void instrument() throws InterruptedException, IOException {  ClassReader classReader=new ClassReader(clazz);  LoaderAwareClassWriter classWriter=new LoaderAwareClassWriter(classReader,ClassWriter.COMPUTE_FRAMES,null);  ClassInstrumenter classInstrumenter=new ClassInstrumenter(INSTRUMENTER_FACTORY,classWriter,new ArrayList<MethodInstrumentationConfig>(configs),enhancedExceptionSensor);  classReader.accept(classInstrumenter,ClassReader.SKIP_FRAMES | ClassReader.SKIP_DEBUG);}  }
class C{  public boolean isHighlightEnabled(){  for (  DataSet<?> set : mDataSets) {    if (!set.isHighlightEnabled())     return false;  }  return true;}  }
class C{  public static Notification warn(String title,String message,boolean clear){  return show(title,message,MessageType.WARNING,clear ? 5000 : 0);}  }
class C{  public ModelBuilder add(String subject,String predicate,Object object){  return add(mapToIRI(subject),mapToIRI(predicate),object);}  }
class C{  public void moveRight(double units){  mTempVec.setAll(WorldParameters.RIGHT_AXIS);  mTempVec.rotateBy(mOrientation).normalize();  mTempVec.multiply(units);  mPosition.add(mTempVec);  if (mLookAtValid) {    mLookAt.add(mTempVec);    resetToLookAt();  }  markModelMatrixDirty();}  }
class C{  public void updatePosition(Particle particle,long elapsedTime){  Vector3f speed=particle.getSpeed();  float delta=elapsedTime / 1000.0f;  float dx=speed.x * delta;  float dy=speed.y * delta;  float dz=speed.z * delta;  Vector3f pos=particle.getPosition();  particle.setPosition(pos.x + dx,pos.y + dy,pos.z + dz);}  }
class C{  protected void engineInitSign(Key signingKey,AlgorithmParameterSpec algorithmParameterSpec) throws XMLSignatureException {  throw new XMLSignatureException("algorithms.CannotUseAlgorithmParameterSpecOnDSA");}  }
class C{  public void startElement(StylesheetHandler handler,String uri,String localName,String rawName,Attributes attributes) throws org.xml.sax.SAXException {  m_outputProperties=new OutputProperties();  m_outputProperties.setDOMBackPointer(handler.getOriginatingNode());  m_outputProperties.setLocaterInfo(handler.getLocator());  m_outputProperties.setUid(handler.nextUid());  setPropertiesFromAttributes(handler,rawName,attributes,this);  String entitiesFileName=(String)m_outputProperties.getProperties().get(OutputPropertiesFactory.S_KEY_ENTITIES);  if (null != entitiesFileName) {    try {      String absURL=SystemIDResolver.getAbsoluteURI(entitiesFileName,handler.getBaseIdentifier());      m_outputProperties.getProperties().put(OutputPropertiesFactory.S_KEY_ENTITIES,absURL);    } catch (    TransformerException te) {      handler.error(te.getMessage(),te);    }  }  handler.getStylesheet().setOutput(m_outputProperties);  ElemTemplateElement parent=handler.getElemTemplateElement();  parent.appendChild(m_outputProperties);  m_outputProperties=null;}  }
class C{  public Heap(){}  }
class C{  public SqlCommitSeqnoAccessor(Table commitSeqnoTable,SqlConnectionManager connectionManager){  this.commitSeqnoTable=commitSeqnoTable;  this.connectionManager=connectionManager;}  }
class C{  static public DirectoryDownloaderImpl createDirectoryDownloader(TorConfig config,TorInitializationTracker initializationTracker){  return new DirectoryDownloaderImpl(config,initializationTracker);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.369 -0500",hash_original_method="2281C8F6C464FE0E4D053A790D9731B4",hash_generated_method="CE146E0B7925136CBDE7DB6C7441BE7C") public ViolationInfo(Parcel in){  this(in,false);}  }
class C{  void sendMessage(int message){  DMessage dm=DMessageCache.alloc(0);  dm.setType(message);  sendMessage(dm);}  }
class C{  static public NodeModel parse(File f) throws SAXException, IOException, ParserConfigurationException {  return parse(f,true,true);}  }
class C{  public int partition(){  return part;}  }
class C{  public void detach(){  valid=false;}  }
class C{  public void test_finishConnect() throws Exception {  SocketAddress address=new InetSocketAddress("localhost",0);  ServerSocketChannel theServerChannel=ServerSocketChannel.open();  ServerSocket serversocket=theServerChannel.socket();  serversocket.setReuseAddress(true);  serversocket.bind(address);  boolean doneNonBlockingConnect=false;  while (!doneNonBlockingConnect) {    channel1=SocketChannel.open();    channel1.configureBlocking(false);    boolean connected=channel1.connect(new InetSocketAddress("localhost",serversocket.getLocalPort()));    if (!connected) {      channel1.configureBlocking(true);      doneNonBlockingConnect=channel1.finishConnect();    }    if (doneNonBlockingConnect) {      tryFinish();    }    channel1.close();  }  if (!serversocket.isClosed()) {    serversocket.close();  }}  }
class C{  public boolean match(PrimitiveType node,Object other){  if (!(other instanceof PrimitiveType)) {    return false;  }  PrimitiveType o=(PrimitiveType)other;  return (node.getPrimitiveTypeCode() == o.getPrimitiveTypeCode());}  }
class C{  public boolean isExpiredDelivery(){  Boolean expiredDelivery=mMessagingLog.isFileTransferExpiredDelivery(mFileTransferId);  if (expiredDelivery == null) {    throw new ServerApiPersistentStorageException("Expired Delivery not found for file transfer " + mFileTransferId);  }  return expiredDelivery;}  }
class C{  public Object invokeMethod(Object thiz,String name,Object... args) throws ScriptException, NoSuchMethodException {  if (!(thiz instanceof bsh.This))   throw new ScriptException("Illegal objec type: " + thiz.getClass());  bsh.This bshObject=(bsh.This)thiz;  try {    return bshObject.invokeMethod(name,args);  } catch (  ParseException e) {    throw new ScriptException(e.toString(),e.getErrorSourceFile(),e.getErrorLineNumber());  }catch (  TargetError e) {    ScriptException se=new ScriptException(e.toString(),e.getErrorSourceFile(),e.getErrorLineNumber());    se.initCause(e.getTarget());    throw se;  }catch (  EvalError e) {    throw new ScriptException(e.toString(),e.getErrorSourceFile(),e.getErrorLineNumber());  }catch (  InterpreterError e) {    throw new ScriptException(e.toString());  }}  }
class C{  private void internalCreateEObjectDescription(Type type,IAcceptor<IEObjectDescription> acceptor){  final String exportedName=type.getExportedName();  final String typeName=exportedName != null ? exportedName : type.getName();  if (typeName != null && typeName.length() != 0) {    QualifiedName qualifiedName=qualifiedNameProvider.getFullyQualifiedName(type);    if (qualifiedName != null) {      Map<String,String> userData=Collections.singletonMap(ACCESS_MODIFIERY_KEY,String.valueOf(type.getTypeAccessModifier().ordinal()));      if (type instanceof TClass) {        final TClass tClass=(TClass)type;        userData=newHashMap(userData);        if (tClass.isExported()) {          userData.put(EXPORTED_CLASS_KEY,Boolean.toString(tClass.isExported()));        }        userData.put(ABSTRACT_KEY,Boolean.toString(tClass.isAbstract()));        userData.put(FINAL_KEY,Boolean.toString(tClass.isFinal()));        userData.put(POLYFILL_KEY,Boolean.toString(tClass.isPolyfill()));        userData.put(STATIC_POLYFILL_KEY,Boolean.toString(tClass.isStaticPolyfill()));        userData.put(TEST_CLASS_KEY,Boolean.toString(tClass.getOwnedMembers().stream().filter(null).anyMatch(null)));      }      IEObjectDescription eod=EObjectDescription.create(qualifiedName,type,userData);      acceptor.accept(eod);    }  }}  }
class C{  private void loadSoundClip(){  if (GUIPreferences.getInstance().getSoundBingFilename() == null) {    return;  }  try {    File file=new File(GUIPreferences.getInstance().getSoundBingFilename());    if (!file.exists()) {      System.err.println("Failed to load audio file: " + GUIPreferences.getInstance().getSoundBingFilename());      return;    }    bingClip=Applet.newAudioClip(file.toURI().toURL());  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public static void waitForCallback(){  final long maxWaitTime=60000;  final long start=System.currentTimeMillis();  for (; ; ) {    if (!PoolImpl.BEFORE_SENDING_CLIENT_ACK_CALLBACK_FLAG) {      break;    }    assertTrue("Waited over " + maxWaitTime + "to send an ack from client : ",(System.currentTimeMillis() - start) < maxWaitTime);    sleep(2000);  }}  }
class C{  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {  if (nameValueBlock.size() % 2 != 0) {    throw new IllegalArgumentException("Unexpected name value block: " + nameValueBlock);  }  String status=null;  String version=null;  RawHeaders result=new RawHeaders();  for (int i=0; i < nameValueBlock.size(); i+=2) {    String name=nameValueBlock.get(i);    String values=nameValueBlock.get(i + 1);    for (int start=0; start < values.length(); ) {      int end=values.indexOf('\0',start);      if (end == -1) {        end=values.length();      }      String value=values.substring(start,end);      if (":status".equals(name)) {        status=value;      } else       if (":version".equals(name)) {        version=value;      } else {        result.namesAndValues.add(name);        result.namesAndValues.add(value);      }      start=end + 1;    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  if (version == null)   throw new ProtocolException("Expected ':version' header not present");  result.setStatusLine(version + " " + status);  return result;}  }
class C{  private void generateInvoice_complete(ProcessInfo pi){  tabbedPane.setSelectedIndex(1);  ProcessInfoUtil.setLogFromDB(pi);  iText.append("<b>").append(pi.getSummary()).append("</b><br>(").append(Msg.getMsg(Env.getCtx(),"InvGenerateInfo")).append(")<br>").append(pi.getLogInfo(true));  info.setText(iText.toString());  int[] ids=pi.getIDs();  if (ids == null || ids.length == 0)   return;  confirmPanelGen.getOKButton().setEnabled(false);  if (ADialog.ask(m_WindowNo,this,"PrintInvoices")) {    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));    int retValue=ADialogDialog.A_CANCEL;    do {      for (int i=0; i < ids.length; i++) {        int C_Invoice_ID=ids[i];        ReportCtl.startDocumentPrint(ReportEngine.INVOICE,C_Invoice_ID,this,Env.getWindowNo(this),true);      }      ADialogDialog d=new ADialogDialog(m_frame,Env.getHeader(Env.getCtx(),m_WindowNo),Msg.getMsg(Env.getCtx(),"PrintoutOK?"),JOptionPane.QUESTION_MESSAGE);      retValue=d.getReturnCode();    } while (retValue == ADialogDialog.A_CANCEL);    setCursor(Cursor.getDefaultCursor());  }  confirmPanelGen.getOKButton().setEnabled(true);}  }
class C{  public TSIG(Name algorithm,String name,String key){  this.key=base64.fromString(key);  if (this.key == null)   throw new IllegalArgumentException("Invalid TSIG key string");  try {    this.name=Name.fromString(name,Name.root);  } catch (  TextParseException e) {    throw new IllegalArgumentException("Invalid TSIG key name");  }  this.alg=algorithm;  getDigest();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.FIELD_ACCESSOR__DECLARED_ABSTRACT:    return isDeclaredAbstract();case TypesPackage.FIELD_ACCESSOR__DECLARED_THIS_TYPE:  return getDeclaredThisType();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(VolleyLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  @Check(CheckType.FAST) public void finalStateWithOutgoingTransition(FinalState finalState){  if ((finalState.getOutgoingTransitions().size() > 0)) {    warning(ISSUE_FINAL_STATE_OUTGOING_TRANSITION,finalState,null,-1);  }}  }
class C{  public Object finish(Map settings) throws WizardException {  return impl.finish(settings);}  }
class C{  public static NotFound parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  NotFound object=new NotFound();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"NotFound".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (NotFound)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  PreviousWordAction(String nm,boolean select){  super(nm);  this.select=select;}  }
class C{  public IndependenceTest indTestSubset(List<Node> vars){  if (vars.isEmpty()) {    throw new IllegalArgumentException("Subset may not be empty.");  }  for (  Node var : vars) {    if (!variables.contains(var)) {      throw new IllegalArgumentException("All vars must be original vars");    }  }  int[] indices=new int[vars.size()];  for (int i=0; i < indices.length; i++) {    indices[i]=variables.indexOf(vars.get(i));  }  double alphaNew=getAlpha();  return new IndTestHsic(this.dataSet.subsetColumns(indices),alphaNew);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.writeObject(mapType);  out.writeInt(num);  for (  Entry e : this) {    out.writeObject(e.getKey());    out.writeDouble(e.getValue());  }}  }
class C{  public void printStackTrace(PrintWriter s){  super.printStackTrace(s);  if (cause != null) {    cause.printStackTrace(s);  }}  }
class C{  public boolean isFirmwareUpgrade(){  return firmwareUpgrade;}  }
class C{  public BitemporalConditionBuilder vtTo(Object vtTo){  this.vtTo=vtTo;  return this;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.029 -0500",hash_original_method="30C014872AED120D5788F672204C6D56",hash_generated_method="45EE4D8B4D5F40C0EC03A5329F4F79C2") public PointerCoords(){}  }
class C{  private static void reverse(int[] array,int start,int end){  for (int i=start, j=end; i < --j; ++i) {    int t=array[i];    array[i]=array[j];    array[j]=t;  }}  }
class C{  public void addLinkSensor(final Id<Link> id){  this.linkCountMap.put(id,ZERO);}  }
class C{  public void createConfirmation(){  MDocType dt=MDocType.get(getCtx(),getC_DocType_ID());  boolean pick=dt.isPickQAConfirm();  boolean ship=dt.isShipConfirm();  if (!pick && !ship) {    log.fine("No need");    return;  }  if (pick && ship) {    boolean havePick=false;    boolean haveShip=false;    MInOutConfirm[] confirmations=getConfirmations(false);    for (int i=0; i < confirmations.length; i++) {      MInOutConfirm confirm=confirmations[i];      if (MInOutConfirm.CONFIRMTYPE_PickQAConfirm.equals(confirm.getConfirmType())) {        if (!confirm.isProcessed()) {          log.fine("Unprocessed: " + confirm);          return;        }        havePick=true;      } else       if (MInOutConfirm.CONFIRMTYPE_ShipReceiptConfirm.equals(confirm.getConfirmType()))       haveShip=true;    }    if (!havePick) {      MInOutConfirm.create(this,MInOutConfirm.CONFIRMTYPE_PickQAConfirm,false);      return;    }    if (!haveShip) {      MInOutConfirm.create(this,MInOutConfirm.CONFIRMTYPE_ShipReceiptConfirm,false);      return;    }    return;  }  if (pick)   MInOutConfirm.create(this,MInOutConfirm.CONFIRMTYPE_PickQAConfirm,true); else   if (ship)   MInOutConfirm.create(this,MInOutConfirm.CONFIRMTYPE_ShipReceiptConfirm,true);}  }
class C{  public char[] quoteAsString(String input){  TextBuffer textBuffer=_textBuffer;  if (textBuffer == null) {    _textBuffer=textBuffer=new TextBuffer(null);  }  char[] outputBuffer=textBuffer.emptyAndGetCurrentSegment();  final int[] escCodes=CharTypes.get7BitOutputEscapes();  final int escCodeCount=escCodes.length;  int inPtr=0;  final int inputLen=input.length();  int outPtr=0;  outer_loop:   while (inPtr < inputLen) {    tight_loop:     while (true) {      char c=input.charAt(inPtr);      if (c < escCodeCount && escCodes[c] != 0) {        break tight_loop;      }      if (outPtr >= outputBuffer.length) {        outputBuffer=textBuffer.finishCurrentSegment();        outPtr=0;      }      outputBuffer[outPtr++]=c;      if (++inPtr >= inputLen) {        break outer_loop;      }    }    char d=input.charAt(inPtr++);    int escCode=escCodes[d];    int length=(escCode < 0) ? _appendNumericEscape(d,_quoteBuffer) : _appendNamedEscape(escCode,_quoteBuffer);    ;    if ((outPtr + length) > outputBuffer.length) {      int first=outputBuffer.length - outPtr;      if (first > 0) {        System.arraycopy(_quoteBuffer,0,outputBuffer,outPtr,first);      }      outputBuffer=textBuffer.finishCurrentSegment();      int second=length - first;      System.arraycopy(_quoteBuffer,first,outputBuffer,0,second);      outPtr=second;    } else {      System.arraycopy(_quoteBuffer,0,outputBuffer,outPtr,length);      outPtr+=length;    }  }  textBuffer.setCurrentLength(outPtr);  return textBuffer.contentsAsArray();}  }
class C{  public Operation sendRequestAndWait(Operation op,ServiceHost host) throws Throwable {  return ServiceHostUtils.sendRequestAndWait(host,op,"test-host");}  }
class C{  public void removeNotification(@NotNull Notification notification){  int index=notifications.indexOf(notification);  if (index >= 0) {    nGrid.removeRow(index);    notifications.remove(index);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:11.227 -0500",hash_original_method="889DAC0CA7DB345B55EE52B7B465C4DD",hash_generated_method="0E19E4903F836B50DBACF794C244FAE0") static public Font create(RenderScript rs,Resources res,String familyName,Style fontStyle,float pointSize){  String fileName=getFontFileName(familyName,fontStyle);  String fontPath=Environment.getRootDirectory().getAbsolutePath();  fontPath+="/fonts/" + fileName;  return createFromFile(rs,res,fontPath,pointSize);}  }
class C{  public EMail createEMail(Properties ctx,int AD_Client_ID,String to,String subject,String message){  MClient client=MClient.get(ctx,AD_Client_ID);  boolean html=false;  if (message != null && message.startsWith(EMail.HTML_MAIL_MARKER)) {    html=true;    message=message.substring(EMail.HTML_MAIL_MARKER.length());  }  return client.createEMail(to,subject,message,html);}  }
class C{  protected TokenizerFactory tokenizerFactory(String name,Version matchVersion,ResourceLoader loader,String... keysAndValues) throws Exception {  return (TokenizerFactory)analysisFactory(TokenizerFactory.lookupClass(name),matchVersion,loader,keysAndValues);}  }
class C{  public ScopedClassPool createScopedClassPool(ClassLoader cl,ClassPool src){  return factory.create(cl,src,this);}  }
class C{  public String formatCommand(String command){  if (!containsOption(command)) {    return command;  }  this.formatted=new StringBuilder();  List<String> strings=split(command);  for (  String string : strings) {    if (string.contains(EQUAL_HYPHEN)) {      int indexOfEquals=string.indexOf(EQUAL);      formatted.append(string.substring(0,indexOfEquals + 1));      formatted.append(QUOTE);      formatted.append(string.substring(indexOfEquals + 1));      formatted.append(QUOTE);    } else {      formatted.append(string);    }    formatted.append(SPACE);  }  return formatted.toString().trim();}  }
class C{  @Override public List<AppEntry> loadInBackground(){  List<ApplicationInfo> apps=mPm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);  if (apps == null) {    apps=new ArrayList<>();  }  final Context context=getContext();  List<AppEntry> entries=new ArrayList<>(apps.size());  for (int i=0; i < apps.size(); i++) {    AppEntry entry=new AppEntry(this,apps.get(i));    entry.loadLabel(context);    entries.add(entry);  }  Collections.sort(entries,ALPHA_COMPARATOR);  return entries;}  }
class C{  public boolean isShowThunkFunctions(){  return m_thunkFunctionCheckbox.isSelected();}  }
class C{  public static int hash(int seed,long aLong){  return (PRIME * seed) + (int)(aLong ^ (aLong >>> 32));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:16.140 -0500",hash_original_method="8A280093AAE5F90F3CD44950672A326E",hash_generated_method="4DC12AF268E33FE37E8AC90DCD50580C") public ProtocolException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public BasicLTMatrix(String fname) throws FileNotFoundException, IOException {  File f=new File(fname);  BufferedReader in=new BufferedReader(new FileReader(f));  StreamTokenizer strmTok=new StreamTokenizer(in);  strmTok.slashStarComments(true);  strmTok.slashSlashComments(true);  strmTok.parseNumbers();  strmTok.wordChars('_','_');  int nt=strmTok.nextToken();  if ((strmTok.sval == null) || (strmTok.sval.toUpperCase().indexOf("LTMATRIX") < 0)) {    throw new IllegalArgumentException("First token does not contain 'LTMATRIX': " + strmTok.sval);  }  nt=strmTok.nextToken();  this.name=strmTok.sval;  nt=strmTok.nextToken();  if (nt != strmTok.TT_NUMBER) {    throw new IllegalArgumentException("Error parsing # of rows: " + strmTok.sval);  }  this.n=(int)strmTok.nval;  if (this.n <= 0) {    throw new IllegalArgumentException("Invalid # nodes " + this.n);  }  this.initMatrixStorage();  int row=0;  int col=0;  while (true) {    try {      nt=strmTok.nextToken();    } catch (    IOException e) {      break;    }    if (nt == strmTok.TT_EOF) {      break;    }    if (nt == strmTok.TT_NUMBER) {      this.setDoubleValue(row,col,strmTok.nval);      if (col < row) {        col++;      } else {        col=0;        row++;      }    } else {      throw new IllegalArgumentException("Error parsing element (" + row + ","+ col+ "): "+ strmTok.sval);    }  }  in.close();}  }
class C{  public boolean equals(Object object){  return (super.equals(object) && object instanceof JobName);}  }
class C{  public static Properties initTest(boolean isClient){  if (!Adempiere.startupEnvironment(true))   System.exit(1);  Properties ctx=Env.getCtx();  Login login=new Login(ctx);  KeyNamePair[] roles=login.getRoles(CConnection.get(),"System","System",true);  if (roles != null && roles.length > 0) {    KeyNamePair[] clients=login.getClients(roles[0]);    if (clients != null && clients.length > 0) {      KeyNamePair[] orgs=login.getOrgs(clients[0]);      if (orgs != null && orgs.length > 0) {        KeyNamePair[] whs=login.getWarehouses(orgs[0]);        login.loadPreferences(orgs[0],null,null,null);      }    }  }  Env.setContext(ctx,"#Date","2000-01-01");  return ctx;}  }
class C{  private int parseUTF8Char() throws IOException {  int ch=_offset < _length ? (_buffer[_offset++] & 0xff) : read();  if (ch < 0x80)   return ch; else   if ((ch & 0xe0) == 0xc0) {    int ch1=read();    int v=((ch & 0x1f) << 6) + (ch1 & 0x3f);    return v;  } else   if ((ch & 0xf0) == 0xe0) {    int ch1=read();    int ch2=read();    int v=((ch & 0x0f) << 12) + ((ch1 & 0x3f) << 6) + (ch2 & 0x3f);    return v;  } else   throw error("bad utf-8 encoding at " + codeName(ch));}  }
class C{  public FloatMatrix sortColumnsi(){  for (int i=0; i < length; i+=rows) {    Arrays.sort(data,i,i + rows);  }  return this;}  }
class C{  public String KNNTipText(){  return "The number of neighbours to use.";}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.196 -0500",hash_original_method="650F081790BC185B19FA56BA8A79A45A",hash_generated_method="D5439BB5B45E268FEFC3CCEEDFFC3DC6") private int initialize(String encoding,boolean namespacesEnabled){  addTaint(encoding.getTaint());  addTaint(namespacesEnabled);  return getTaintInt();}  }
class C{  final List<LexicalScope> computeLexicalScopes(AncestorChain<?> root){  LexicalScope globalScope=new LexicalScope(root,null);  initScope(globalScope);  List<LexicalScope> scopes=Lists.newArrayList(globalScope);  computeLexicalScopes(root,globalScope,scopes);  return scopes;}  }
class C{  private void releaseReadLockOnUsedIndex(PlanInfo planInfo){  List inds=planInfo.indexes;  for (  Object obj : inds) {    Index index=(Index)obj;    Index prIndex=((AbstractIndex)index).getPRIndex();    if (prIndex != null) {      ((PartitionedIndex)prIndex).releaseIndexReadLockForRemove();    } else {      ((AbstractIndex)index).releaseIndexReadLockForRemove();    }  }}  }
class C{  @Override public boolean canRead(){  return _is != null || _s != null;}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Before public void onBefore(){  knownLG=new LocationGroup(KNOWN_LG);  entityManager.persist(knownLG);  entityManager.flush();  entityManager.clear();}  }
class C{  protected Varargs execute(String command){  return varargsOf(NIL,valueOf("exit"),ONE);}  }
class C{  public StorageSystemRestRep deregister(URI id){  return client.post(StorageSystemRestRep.class,getIdUrl() + "/deregister",id);}  }
class C{  private void insertCCLNFA(RegExp regExp,int start,int end){switch (regExp.type) {case sym.BAR:    RegExp2 r=(RegExp2)regExp;  insertCCLNFA(r.r1,start,end);insertCCLNFA(r.r2,start,end);return;case sym.CCLASS:insertClassNFA((Vector)((RegExp1)regExp).content,start,end);return;case sym.CCLASSNOT:insertNotClassNFA((Vector)((RegExp1)regExp).content,start,end);return;case sym.CHAR:insertLetterNFA(false,((Character)((RegExp1)regExp).content).charValue(),start,end);return;case sym.CHAR_I:insertLetterNFA(true,((Character)((RegExp1)regExp).content).charValue(),start,end);return;case sym.MACROUSE:insertCCLNFA(macros.getDefinition((String)((RegExp1)regExp).content),start,end);return;}throw new Error("Unknown expression type " + regExp.type + " in NFA construction");}  }
class C{  private InstructionLine extractLine(final ICodeNodeProvider dataset) throws ParserException {  if (dataset.isAfterLast()) {    return null;  }  final InstructionLine row=createLine(dataset);  OperandTree tree=new OperandTree(dataset.getExpressionTreeId());  int operandPositionCounter=0;  do {    final IAddress currentAddress=dataset.getInstructionAddress();    if (!row.getAddress().equals(currentAddress) || (row.getBasicBlock() != dataset.getNodeId())) {      break;    }    final Integer position=dataset.getOperandPosition();    if ((position == null) || (position != operandPositionCounter)) {      if (tree.getNodes().size() != 0) {        row.getOperands().add(tree);      }      tree=new OperandTree(dataset.getExpressionTreeId());      operandPositionCounter=position == null ? 0 : position;    }    if (position != null) {      final int moduleId=dataset.getModule();      final INaviModule module=modules.get(moduleId);      tree.getNodes().add(createNewOperand(module,dataset));    }  } while (dataset.next());  if (tree.getNodes().size() != 0) {    row.getOperands().add(tree);  }  return row;}  }
class C{  public boolean canUpdate(int AD_Client_ID,int AD_Org_ID,int AD_Table_ID,int Record_ID,boolean createError){  String userLevel=getUserLevel();  if (userLevel.indexOf('S') != -1)   return true;  boolean retValue=true;  String whatMissing="";  if (AD_Client_ID == 0 && AD_Org_ID == 0 && userLevel.charAt(0) != 'S') {    retValue=false;    whatMissing+="S";  } else   if (AD_Client_ID != 0 && AD_Org_ID == 0 && userLevel.charAt(1) != 'C') {    if (userLevel.charAt(2) == 'O' && isOrgAccess(AD_Org_ID,true))     ; else {      retValue=false;      whatMissing+="C";    }  } else   if (AD_Client_ID != 0 && AD_Org_ID != 0 && userLevel.charAt(2) != 'O') {    retValue=false;    whatMissing+="O";  }  if (retValue) {    retValue=isClientAccess(AD_Client_ID,true);  }  if (retValue) {    retValue=isOrgAccess(AD_Org_ID,true);    whatMissing="W";  }  if (retValue)   retValue=isTableAccess(AD_Table_ID,false);  if (retValue && Record_ID != 0)   retValue=isRecordAccess(AD_Table_ID,Record_ID,false);  if (!retValue && createError) {    log.saveWarning("AccessTableNoUpdate","AD_Client_ID=" + AD_Client_ID + ", AD_Org_ID="+ AD_Org_ID+ ", UserLevel="+ userLevel+ " => missing="+ whatMissing);    log.warning(toString());  }  return retValue;}  }
class C{  public void updateFondo(final FondoVO fondoVO){  StringBuffer qual=new StringBuffer(" WHERE ").append(DBUtils.generateEQTokenField(CAMPO_ID,fondoVO.getId()));  updateVO(qual.toString(),TABLE_NAME_FONDO,COLS_DEFS_FONDO,fondoVO);}  }
class C{  public static int hash(int seed,double aDouble){  return hash(seed,Double.doubleToLongBits(aDouble));}  }
class C{  protected void computeCOBMatrix(GF2nField B1){  if (mDegree != B1.mDegree) {    throw new IllegalArgumentException("GF2nField.computeCOBMatrix: B1 has a " + "different degree and thus cannot be coverted to!");  }  int i, j;  GF2nElement[] gamma;  GF2nElement u;  GF2Polynomial[] COBMatrix=new GF2Polynomial[mDegree];  for (i=0; i < mDegree; i++) {    COBMatrix[i]=new GF2Polynomial(mDegree);  }  do {    u=B1.getRandomRoot(fieldPolynomial);  } while (u.isZero());  gamma=new GF2nPolynomialElement[mDegree];  gamma[0]=(GF2nElement)u.clone();  for (i=1; i < mDegree; i++) {    gamma[i]=gamma[i - 1].square();  }  for (i=0; i < mDegree; i++) {    for (j=0; j < mDegree; j++) {      if (gamma[i].testBit(j)) {        COBMatrix[mDegree - j - 1].setBit(mDegree - i - 1);      }    }  }  fields.addElement(B1);  matrices.addElement(COBMatrix);  B1.fields.addElement(this);  B1.matrices.addElement(invertMatrix(COBMatrix));}  }
class C{  protected Instruction decodeInstruction(BinaryInputBuffer bytesArray,boolean operandSize,boolean addrSize,X86InstructionFactory factory){  Operand op1=getOperand1(bytesArray,operandSize,addrSize);  Operand op2=getOperand2(bytesArray,operandSize,addrSize);  Operand op3=getOperand3(bytesArray,operandSize,addrSize);  int size=byteIndex - instrStartIndex;  return factory.newGeneralInstruction(name,op1,op2,op3,size,prefixes);}  }
class C{  public static <S>TableColumn<S,String> textColumn(String colName,String propName,String tip,TextColumnValidator<S> validator){  TableColumn<S,String> col=tableColumn(colName,propName,tip,100,0,true);  col.setCellFactory(TextFieldTableCellEx.cellFactory(validator));  return col;}  }
class C{  public boolean isEnum(){  return type.isEnum();}  }
class C{  @SuppressWarnings("unused") private void testResetLegacyAlgorithms(){  String legacyAlgorithmsBefore=CipherFactory.getLegacyAlgorithmsSilently();  assertEquals("Failed assumption: jdk.tls.legacyAlgorithms" + " has been modified from its initial setting",CipherFactory.DEFAULT_LEGACY_ALGORITHMS,legacyAlgorithmsBefore);  CipherFactory.removeAnonFromLegacyAlgorithms();  CipherFactory.resetDefaultLegacyAlgorithms();  String legacyAlgorithmsAfter=CipherFactory.getLegacyAlgorithmsSilently();  assertEquals(CipherFactory.DEFAULT_LEGACY_ALGORITHMS,legacyAlgorithmsAfter);}  }
class C{  protected boolean isViewAvailable(){  Tab currentTab=mTabModelSelector.getCurrentTab();  return currentTab != null && currentTab.getContentViewCore() != null;}  }
class C{  public void extractAndApply(){  addAnnotationsFromElement(typeVariable,useElem.getAnnotationMirrors());  ElementAnnotationApplier.apply(typeVariable,declarationElem,typeFactory);  final List<Attribute.TypeCompound> annotations=getAnnotations(useElem,declarationElem);  final List<Attribute.TypeCompound> typeVarAnnotations;  if (arrayType != null) {    typeVarAnnotations=removeComponentAnnotations(arrayType,annotations);    annotateViaTypeAnnoPosition(arrayType,annotations);  } else {    typeVarAnnotations=annotations;  }  for (  final Attribute.TypeCompound annotation : typeVarAnnotations) {    typeVariable.removeAnnotationInHierarchy(annotation);    typeVariable.addAnnotation(annotation);    final List<? extends AnnotatedTypeMirror> upperBounds;    if (typeVariable.getUpperBound() instanceof AnnotatedIntersectionType) {      upperBounds=typeVariable.getUpperBound().directSuperTypes();    } else {      upperBounds=Arrays.asList(typeVariable.getUpperBound());    }    for (    final AnnotatedTypeMirror bound : upperBounds) {      bound.removeAnnotationInHierarchy(annotation);      bound.addAnnotation(annotation);    }  }}  }
class C{  public void push(final Handle handle){  mv.visitLdcInsn(handle);}  }
class C{  public static Integer[] transformIntArray(int[] source){  Integer[] destin=new Integer[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public boolean removeNetworkConnection(NetworkConnection networkConnection){  return networkConnections.remove(networkConnection);}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer renderer,float yAxisValue,int seriesIndex,int startIndex){  float lineWidth=paint.getStrokeWidth();  paint.setStrokeWidth(renderer.getLineWidth());  final FillOutsideLine[] fillOutsideLine=renderer.getFillOutsideLine();  for (  FillOutsideLine fill : fillOutsideLine) {    if (fill.getType() != FillOutsideLine.Type.NONE) {      paint.setColor(fill.getColor());      List<Float> fillPoints=new ArrayList<Float>();      int[] range=fill.getFillRange();      if (range == null) {        fillPoints.addAll(points);      } else {        fillPoints.addAll(points.subList(range[0] * 2,range[1] * 2));      }      final float referencePoint;switch (fill.getType()) {case BOUNDS_ALL:        referencePoint=yAxisValue;      break;case BOUNDS_BELOW:    referencePoint=yAxisValue;  break;case BOUNDS_ABOVE:referencePoint=yAxisValue;break;case BELOW:referencePoint=canvas.getHeight();break;case ABOVE:referencePoint=0;break;default :throw new RuntimeException("You have added a new type of filling but have not implemented.");}if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW) {List<Float> boundsPoints=new ArrayList<Float>();boolean add=false;if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && fillPoints.get(1) < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && fillPoints.get(1) > referencePoint) {boundsPoints.add(fillPoints.get(0));boundsPoints.add(fillPoints.get(1));add=true;}for (int i=3; i < fillPoints.size(); i+=2) {float prevValue=fillPoints.get(i - 2);float value=fillPoints.get(i);if (prevValue < referencePoint && value > referencePoint || prevValue > referencePoint && value < referencePoint) {float prevX=fillPoints.get(i - 3);float x=fillPoints.get(i - 1);boundsPoints.add(prevX + (x - prevX) * (referencePoint - prevValue) / (value - prevValue));boundsPoints.add(referencePoint);if (fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value > referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value < referencePoint) {i+=2;add=false;} else {boundsPoints.add(x);boundsPoints.add(value);add=true;}} else {if (add || fill.getType() == FillOutsideLine.Type.BOUNDS_ABOVE && value < referencePoint || fill.getType() == FillOutsideLine.Type.BOUNDS_BELOW && value > referencePoint) {boundsPoints.add(fillPoints.get(i - 1));boundsPoints.add(value);}}}fillPoints.clear();fillPoints.addAll(boundsPoints);}int length=fillPoints.size();fillPoints.set(0,fillPoints.get(0) + 1);fillPoints.add(fillPoints.get(length - 2));fillPoints.add(referencePoint);fillPoints.add(fillPoints.get(0));fillPoints.add(fillPoints.get(length + 1));for (int i=0; i < length + 4; i+=2) {if (fillPoints.get(i + 1) < 0) {fillPoints.set(i + 1,0f);}}paint.setStyle(Style.FILL);drawPath(canvas,fillPoints,paint,true);}}paint.setColor(renderer.getColor());paint.setStyle(Style.STROKE);drawPath(canvas,points,paint,false);paint.setStrokeWidth(lineWidth);}  }
class C{  private static int computeDimension(ResultPoint topLeft,ResultPoint topRight,ResultPoint bottomLeft,ResultPoint bottomRight,float moduleWidth){  int topRowDimension=MathUtils.round(ResultPoint.distance(topLeft,topRight) / moduleWidth);  int bottomRowDimension=MathUtils.round(ResultPoint.distance(bottomLeft,bottomRight) / moduleWidth);  return ((((topRowDimension + bottomRowDimension) >> 1) + 8) / 17) * 17;}  }
class C{  @Transactional public String addVerifycode(final JSONObject requestJSONObject) throws ServiceException {  try {    return verifycodeRepository.add(requestJSONObject);  } catch (  final RepositoryException e) {    final String msg="Adds verifycode failed";    LOGGER.log(Level.ERROR,msg,e);    throw new ServiceException(msg);  }}  }
class C{  public void resume(){  if (!mAborted && mPaused) {    mPaused=false;    final Intent pauseAction=new Intent(DfuBaseService.BROADCAST_ACTION);    pauseAction.putExtra(DfuBaseService.EXTRA_ACTION,DfuBaseService.ACTION_RESUME);    mBroadcastManager.sendBroadcast(pauseAction);  }}  }
class C{  public void fail(Throwable throwable){  if (throwable != null) {    PrintWriter pw=null;    try {      StringWriter sw=new StringWriter();      pw=new PrintWriter(new StringWriter());      throwable.printStackTrace(pw);      pw.flush();      this.setException(sw.toString());      if (LOGGER.isDebugEnabled()) {        LOGGER.debug("Exception StackTrace recorded by the failed StepExecution, to be returned to the Master and stored: " + this.getException());      }    }  finally {      if (pw != null) {        pw.close();      }    }  }  state=StepExecutionState.STEP_EXECUTION_FAILED;  completedTime=new Date();}  }
class C{  public MemcacheClientBuilder(final Transcoder<V> valueTranscoder){  this.valueTranscoder=valueTranscoder;}  }
class C{  public boolean incrementAppOpenedCount(){  initAndEdit();  final int appOpenedCount=getAppOpenedCount();  if (enableLog) {    Log.d(tag,"Count before updating " + appOpenedCount);  }  mEditor.putInt(KEYS.OPENED_TIMES_COUNT,(appOpenedCount + 1));  return commit();}  }
class C{  private DateTimeParser requireParser(){  DateTimeParser parser=iParser;  if (parser == null) {    throw new UnsupportedOperationException("Parsing not supported");  }  return parser;}  }
class C{  public FieldInfo fieldInfo(int fieldNumber){  if (fieldNumber < 0) {    throw new IllegalArgumentException("Illegal field number: " + fieldNumber);  }  if (byNumberTable != null) {    if (fieldNumber >= byNumberTable.length) {      return null;    }    return byNumberTable[fieldNumber];  } else {    return byNumberMap.get(fieldNumber);  }}  }
class C{  public DistanceCapacityInterface(Settings s){  super(s);  transmitSpeeds=s.getCsvInts(TRANSMIT_SPEEDS_S);}  }
class C{  @Override public void IASTORE(Object conc_array,int conc_index){  IntegerValue symb_value=env.topFrame().operandStack.popBv32();  IntegerValue symb_index=env.topFrame().operandStack.popBv32();  ReferenceExpression array_ref=env.topFrame().operandStack.popRef();  env.heap.initializeReference(conc_array,array_ref);  if (nullReferenceViolation(array_ref,conc_array)) {    return;  }  if (negativeIndexViolation(conc_index,symb_index)) {    return;  }  ReferenceExpression symb_array=array_ref;  int conc_array_length=Array.getLength(conc_array);  IntegerValue symb_array_length=env.heap.getField("",ARRAY_LENGTH,conc_array,symb_array,conc_array_length);  if (indexTooBigViolation(conc_index,symb_index,conc_array_length,symb_array_length))   return;  env.heap.array_store(conc_array,symb_array,conc_index,symb_value);}  }
class C{  public void checkLocalsAverageCorrectly(int algNumber,String numThreads) throws Exception {  MutualInfoCalculatorMultiVariateKraskov miCalc=getNewCalc(algNumber);  String kraskov_K="4";  miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_K,kraskov_K);  miCalc.setProperty(MutualInfoCalculatorMultiVariateKraskov.PROP_NUM_THREADS,numThreads);  super.testLocalsAverageCorrectly(miCalc,2,10000);}  }
class C{  @Override public void updateSQLXML(int columnIndex,SQLXML xmlObject) throws SQLException {  throw unsupported("SQLXML");}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node rootNode;  boolean state;  doc=(Document)load("staff",false);  rootNode=doc.getDocumentElement();  state=rootNode.isSupported("core","2.0");  assertTrue("throw_True",state);}  }
class C{  public static Variant identifierToGameType(String identifier){  Variant result=null;  if (identifier.indexOf(SUICIDE_IDENTIFIER) != -1) {    result=Variant.suicide;  } else   if (identifier.indexOf(BUGHOUSE_IDENTIFIER) != -1) {    result=Variant.bughouse;  } else   if (identifier.indexOf(CRAZYHOUSE_IDENTIFIER) != -1) {    result=Variant.crazyhouse;  } else   if (identifier.indexOf(STANDARD_IDENTIFIER) != -1) {    result=Variant.standard;  } else   if (identifier.indexOf(FISCHER_RANDOM_IDENTIFIER) != -1) {    result=Variant.fischerRandom;  } else   if (identifier.indexOf(WILD_IDENTIFIER) != -1) {    result=Variant.wild;  } else   if (identifier.indexOf(LIGHTNING_IDENTIFIER) != -1) {    result=Variant.lightning;  } else   if (identifier.indexOf(BLITZ_IDENTIFIER) != -1) {    result=Variant.blitz;  } else   if (identifier.indexOf(ATOMIC_IDENTIFIER) != -1) {    result=Variant.atomic;  } else   if (identifier.indexOf(LOSERS_IDENTIFIER) != -1) {    result=Variant.losers;  } else   if (identifier.indexOf(UNTIMED_IDENTIFIER) != -1) {    result=Variant.classic;  } else {    LOG.warn("Unknown identifier " + identifier + " encountered. Assuming its classic.");    result=Variant.classic;  }  return result;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYTitleAnnotation)) {    return false;  }  XYTitleAnnotation that=(XYTitleAnnotation)obj;  if (this.coordinateType != that.coordinateType) {    return false;  }  if (this.x != that.x) {    return false;  }  if (this.y != that.y) {    return false;  }  if (this.maxWidth != that.maxWidth) {    return false;  }  if (this.maxHeight != that.maxHeight) {    return false;  }  if (!ObjectUtilities.equal(this.title,that.title)) {    return false;  }  if (!this.anchor.equals(that.anchor)) {    return false;  }  return super.equals(obj);}  }
class C{  public V put(K key,V value,int memory){  int hash=getHash(key);  return getSegment(hash).put(key,hash,value,memory);}  }
class C{  public void print(Object obj){  print(String.valueOf(obj));}  }
class C{  public GSSContextImpl(GSSManagerImpl gssManager,GSSName peer,Oid mech,GSSCredential myCred,int lifetime) throws GSSException {  if ((peer == null) || !(peer instanceof GSSNameImpl)) {    throw new GSSException(GSSException.BAD_NAME);  }  if (mech == null)   mech=ProviderList.DEFAULT_MECH_OID;  this.gssManager=gssManager;  this.myCred=(GSSCredentialImpl)myCred;  reqLifetime=lifetime;  targName=(GSSNameImpl)peer;  this.mechOid=mech;  initiator=true;}  }
class C{  private int doRegister(int registrations){  long adjust=((long)registrations << PARTIES_SHIFT) | registrations;  final Phaser parent=this.parent;  int phase;  for (; ; ) {    long s=(parent == null) ? state : reconcileState();    int counts=(int)s;    int parties=counts >>> PARTIES_SHIFT;    int unarrived=counts & UNARRIVED_MASK;    if (registrations > MAX_PARTIES - parties)     throw new IllegalStateException(badRegister(s));    phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     break;    if (counts != EMPTY) {      if (parent == null || reconcileState() == s) {        if (unarrived == 0)         root.internalAwaitAdvance(phase,null); else         if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s + adjust))         break;      }    } else     if (parent == null) {      long next=((long)phase << PHASE_SHIFT) | adjust;      if (UNSAFE.compareAndSwapLong(this,stateOffset,s,next))       break;    } else {synchronized (this) {        if (state == s) {          phase=parent.doRegister(1);          if (phase < 0)           break;          while (!UNSAFE.compareAndSwapLong(this,stateOffset,s,((long)phase << PHASE_SHIFT) | adjust)) {            s=state;            phase=(int)(root.state >>> PHASE_SHIFT);          }          break;        }      }    }  }  return phase;}  }
class C{  public WriteRequest(final int objectId,final int objectInstanceId,final int resourceId,double value){  this(ContentFormat.TLV,objectId,objectInstanceId,resourceId,value);}  }
class C{  private Entry checkOldName(String baseName){  Entry e=name2entry.get(baseName);  if (e == null) {    throw new IllegalArgumentException("Unknown filter name:" + baseName);  }  return e;}  }
class C{  @Override @SuppressWarnings("rawtypes") public void init(NamedList args){  try {    loadData();  } catch (  Exception e) {    throw new RuntimeException("Couldn't load profile data, will return empty languages always!",e);  }  if (args != null) {    Object o;    o=args.get("defaults");    if (o != null && o instanceof NamedList) {      defaults=SolrParams.toSolrParams((NamedList)o);    } else {      defaults=SolrParams.toSolrParams(args);    }    o=args.get("appends");    if (o != null && o instanceof NamedList) {      appends=SolrParams.toSolrParams((NamedList)o);    }    o=args.get("invariants");    if (o != null && o instanceof NamedList) {      invariants=SolrParams.toSolrParams((NamedList)o);    }  }}  }
class C{  public final boolean member(LiveExprNode e){  for (int i=0; i < this.size(); i++) {    if (e.equals(this.exprAt(i))) {      return true;    }  }  return false;}  }
class C{  public void invalidate(JMenuItemRecentFile jmirfOld){  int index=findRecentFile(jmirfOld.getFile());  if (index == -1) {    return;  }  removeAllRecentFiles();  for (int i=index; i < jmiRecentFiles.length; i++) {    if (i < (jmiRecentFiles.length - 1)) {      jmiRecentFiles[i]=jmiRecentFiles[i + 1];      if (jmiRecentFiles[i + 1] != null) {        jmiRecentFiles[i].setPosition(i + 1);      }    } else {      jmiRecentFiles[i]=null;    }  }  addAllRecentFiles();}  }
class C{  int readCorner4(int numRows,int numColumns){  int currentByte=0;  if (readModule(numRows - 3,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 2,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(numRows - 1,0,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 2,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(0,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(1,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(2,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  currentByte<<=1;  if (readModule(3,numColumns - 1,numRows,numColumns)) {    currentByte|=1;  }  return currentByte;}  }
class C{  public Object pop(){  int numObjs=this.numObjs;  if (numObjs <= 0)   return null;  Object ret=objs[--numObjs];  objs[numObjs]=null;  this.numObjs=numObjs;  return ret;}  }
class C{  public AuthorizationServiceDiscovery(@NonNull JSONObject discoveryDoc) throws JSONException, MissingArgumentException {  this.docJson=checkNotNull(discoveryDoc);  for (  String mandatory : MANDATORY_METADATA) {    if (!this.docJson.has(mandatory) || this.docJson.get(mandatory) == null) {      throw new MissingArgumentException(mandatory);    }  }}  }
class C{  @Override public int hashCode(){  int hash=7;  hash=61 * hash + (this.bitset != null ? this.bitset.hashCode() : 0);  hash=61 * hash + this.expectedNumberOfFilterElements;  hash=61 * hash + this.bitSetSize;  hash=61 * hash + this.k;  return hash;}  }
class C{  public static String printMean(String prefix,double... values){  double sum=0;  for (  double x : values) {    sum+=x;  }  return prefix + ": " + (int)(sum / values.length);}  }
class C{  private void addRequestHeaders(State state,HttpURLConnection conn){  for (  Pair<String,String> header : originalDownloadInfo.getHeaders()) {    conn.addRequestProperty(header.first,header.second);  }  if (conn.getRequestProperty("User-Agent") == null) {    conn.addRequestProperty("User-Agent",userAgent());  }  conn.setRequestProperty("Accept-Encoding","identity");  if (state.continuingDownload) {    if (state.headerETag != null) {      conn.addRequestProperty("If-Match",state.headerETag);    }    conn.addRequestProperty("Range","bytes=" + state.currentBytes + "-");  }}  }
class C{  public void fireEntityChanged(final OdorWorldEntity entity){  for (  WorldListener listener : listenerList) {    listener.entityChanged(entity);  }}  }
class C{  public CProjectModulesTable(final JTree projectTree,final IDatabase database,final INaviAddressSpace addressSpace){  super(projectTree,new CProjectModulesModel(addressSpace),new CModulesTableHelp());  m_database=Preconditions.checkNotNull(database,"IE02868: database argument can not be null");  m_addressSpace=Preconditions.checkNotNull(addressSpace,"IE02869: addressSpace argument can not be null");  setDefaultRenderer(Object.class,new ModuleLoadedRenderer());  final InputMap windowImap=getInputMap(JComponent.WHEN_FOCUSED);  windowImap.put(HotKeys.LOAD_HK.getKeyStroke(),"LOAD");  getActionMap().put("LOAD",CActionProxy.proxy(new LoadModuleAction()));}  }
class C{  public BufferedStreamFeeder(InputStream is){  this(is,DEFAULTSIZE);}  }
class C{  public DefaultRetryPolicy(){  this(DEFAULT_TIMEOUT_MS,DEFAULT_MAX_RETRIES,DEFAULT_BACKOFF_MULT);}  }
class C{  private String parse(String text){  if (text.indexOf('@') == -1)   return text;  text=parse(text,m_user);  text=parse(text,m_bpartner);  text=parse(text,m_po);  return text;}  }
class C{  public SWFActions tagDefineButton2(int id,boolean trackAsMenu,List buttonRecord2s) throws IOException {  startTag(TAG_DEFINEBUTTON2,id,true);  out.writeUI8(trackAsMenu ? 1 : 0);  return new ButtonActionWriter(this,version,buttonRecord2s);}  }
class C{  private MovieSubtitleChooserModel(){  name=BUNDLE.getString("chooser.nothingfound");}  }
class C{  public void put(String key,String value){  mValues.put(key,value);}  }
class C{  public static void main(String[] args) throws Exception {  new ExtractData().start(args);}  }
class C{  public SymbolTableEntryInternal steFor_N4Class(){  return getSymbolTableEntryInternal("N4Class",true);}  }
class C{  public void testServPrepStmtSetObjectAndNewSupportedTypes() throws Exception {  createTable("testSetObjectSPS1","(id INT, d DATE, t TIME, dt DATETIME, ts TIMESTAMP)");  Connection testConn=getConnectionWithProps("useServerPrepStmts=true");  this.pstmt=testConn.prepareStatement("INSERT INTO testSetObjectSPS1 VALUES (?, ?, ?, ?, ?)");  validateTestDataLocalDTTypes("testSetObjectSPS1",insertTestDataLocalDTTypes(this.pstmt));  createTable("testSetObjectSPS2","(id INT, ot1 VARCHAR(100), ot2 BLOB, odt1 VARCHAR(100), odt2 BLOB)");  this.pstmt=testConn.prepareStatement("INSERT INTO testSetObjectSPS2 VALUES (?, ?, ?, ?, ?)");  validateTestDataOffsetDTTypes("testSetObjectSPS2",insertTestDataOffsetDTTypes(this.pstmt));}  }
class C{  public static String pad(Object obj,int totalChars){  return pad(obj.toString(),totalChars);}  }
class C{  @Override public UpdateResponse add(SolrInputDocument doc,int commitWithinMs) throws SolrServerException, IOException {  UpdateResponse ur=null;  if (this.solr0 != null)   ur=this.solr0.add(doc,commitWithinMs);  if (this.solr1 != null)   ur=this.solr1.add(doc,commitWithinMs);  return ur;}  }
class C{  public void testBasics() throws IOException {  assertAnalyzesTo(sentence,"The acronym for United States is U.S. but this doesn't end a sentence",new String[]{"The acronym for United States is U.S. but this doesn't end a sentence"});  assertAnalyzesTo(sentence,"He said, \"Are you going?\" John shook his head.",new String[]{"He said, \"Are you going?\" ","John shook his head."});}  }
class C{  private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {  in.defaultReadObject();  boolean isValid=maxOffset >= -1 && formats.length > maxOffset && offsets.length > maxOffset && argumentNumbers.length > maxOffset;  if (isValid) {    int lastOffset=pattern.length() + 1;    for (int i=maxOffset; i >= 0; --i) {      if ((offsets[i] < 0) || (offsets[i] > lastOffset)) {        isValid=false;        break;      } else {        lastOffset=offsets[i];      }    }  }  if (!isValid) {    throw new InvalidObjectException("Could not reconstruct MessageFormat from corrupt stream.");  }}  }
class C{  @Override public boolean isPinned(){  return (pinned);}  }
class C{  public void notifyRegistration(){synchronized (mLock) {    mRcsServiceRegistrationEventBroadcaster.broadcastServiceRegistered();  }}  }
class C{  private void removeFromMatchers(PathMatcherTerm object){  int index=getElementIndex(object);  pathMatchers.remove(object);  if (index < pathMatchers.getTable().getItemCount()) {    pathMatchers.getTable().setSelection(index);  } else {    pathMatchers.getTable().setSelection(index - 1);  }}  }
class C{  public static byte[] toBytes(final boolean b){  return new byte[]{b ? (byte)-1 : (byte)0};}  }
class C{  public Pointer(Platform plat,Layer root,boolean bubble){  super(plat);  events.connect(new Dispatcher(root,bubble));}  }
class C{  public KernelGaussian(DataSet dataset,Node node){  setMedianBandwidth(dataset,node);}  }
class C{  public void browserIntent(String url){  if (!url.startsWith("https://") && !url.startsWith("http://")) {    url="http://" + url;  }  mContext.startActivity(new Intent(Intent.ACTION_VIEW).setData(Uri.parse(url)).addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));}  }
class C{  private void uploadContacts(Context context,ContentProviderClient cp) throws RemoteException {  String[] proj={_ID,Contacts.GLOBAL_ID,Contacts.EMAIL_HASH,Contacts.FOLLOWING,Contacts.STATUS_ID,Contacts.DIRTY,Contacts.VERSION};  String sel=Contacts.DIRTY + " = 1";  List<User> users=Contacts.from(cp.query(CONTACTS_URI,proj,sel,null,null));  if (users != null) {    LocalBroadcastManager bm=LocalBroadcastManager.getInstance(context);    bm.sendBroadcast(new Intent(ACTION_CONTACTS_SYNCING));    response(Server.syncContacts(users),cp,CONTACTS_URI);    bm.sendBroadcast(new Intent(ACTION_CONTACTS_SYNCED));  }}  }
class C{  private void putEntry(String key,CacheHeader entry){  if (!mEntries.containsKey(key)) {    mTotalSize+=entry.size;  } else {    CacheHeader oldEntry=mEntries.get(key);    mTotalSize+=(entry.size - oldEntry.size);  }  mEntries.put(key,entry);}  }
class C{  public void insert(String table,Object... columns) throws IllegalArgumentException, SQLException {  if (columns.length % 2 != 0) {    throw new IllegalArgumentException("Must specify values to insert as pairs of column name " + "followed by values");  }  StringBuilder builder=new StringBuilder();  builder.append("INSERT INTO ");  builder.append(quoteCaseSensitive(table));  builder.append(" (");  for (int i=0; i < columns.length; i+=2) {    if (i > 0) {      builder.append(", ");    }    builder.append(quoteCaseSensitive(columns[i].toString()));  }  builder.append(") VALUES(");  for (int i=1; i < columns.length; i+=2) {    if (i > 1) {      builder.append(", ");    }    builder.append(formatLiteral(columns[i]));  }  builder.append(")");  execute(builder.toString());}  }
class C{  private static int commonPrefixLength(final CharSequence first,final CharSequence second){  final int result=getCommonPrefix(first.toString(),second.toString()).length();  return result > 4 ? 4 : result;}  }
class C{  static Record createRecord(String name,String address,String type,JsonObject metadata){  Objects.requireNonNull(name);  Objects.requireNonNull(address);  Record record=new Record().setName(name).setType(TYPE).setLocation(new JsonObject().put(Record.ENDPOINT,address));  if (metadata != null) {    record.setMetadata(metadata);  }  if (type != null) {    record.setMetadata(new JsonObject().put("message.type",type));  }  return record;}  }
class C{  public void log(String message,Throwable e){  if (e == null)   log.warning(message);  log.log(Level.SEVERE,message,e);}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public void init() throws ServletException {}  }
class C{  public DoubleMatrix3D assign(DoubleMatrix3D source){  if (!(source instanceof DenseDoubleMatrix3D)) {    return super.assign(source);  }  DenseDoubleMatrix3D other=(DenseDoubleMatrix3D)source;  if (other == this)   return this;  checkShape(other);  if (haveSharedCells(other)) {    DoubleMatrix3D c=other.copy();    if (!(c instanceof DenseDoubleMatrix3D)) {      return super.assign(source);    }    other=(DenseDoubleMatrix3D)c;  }  if (this.isNoView && other.isNoView) {    System.arraycopy(other.elements,0,this.elements,0,this.elements.length);    return this;  }  return super.assign(other);}  }
class C{  private static void cleanDirectoryOnExit(File directory) throws IOException {  if (!directory.exists()) {    String message=directory + " does not exist";    throw new IllegalArgumentException(message);  }  if (!directory.isDirectory()) {    String message=directory + " is not a directory";    throw new IllegalArgumentException(message);  }  File[] files=directory.listFiles();  if (files == null) {    throw new IOException("Failed to list contents of " + directory);  }  IOException exception=null;  for (  File file : files) {    try {      forceDeleteOnExit(file);    } catch (    IOException ioe) {      exception=ioe;    }  }  if (null != exception) {    throw exception;  }}  }
class C{  public void buildClassifier(Instances data) throws Exception {  getCapabilities().testWithFail(data);  m_data=new Instances(data);  m_data.deleteWithMissingClass();  super.buildClassifier(m_data);  if (!(m_Classifier instanceof Randomizable)) {    throw new IllegalArgumentException("Base learner must implement Randomizable!");  }  m_Classifiers=AbstractClassifier.makeCopies(m_Classifier,m_NumIterations);  Random random=m_data.getRandomNumberGenerator(m_Seed);  if (!(m_Classifier instanceof WeightedInstancesHandler)) {    m_data=m_data.resampleWithWeights(random);  }  for (int j=0; j < m_Classifiers.length; j++) {    ((Randomizable)m_Classifiers[j]).setSeed(random.nextInt());  }  buildClassifiers();  m_data=null;}  }
class C{  private static void updateExportMaskStoragePortsMap(ExportMask exportMask,Map<URI,List<URI>> exportMasksToUpdateOnDeviceWithStoragePorts,Map<URI,List<URI>> assignments,URI initiatorURI){  if (exportMasksToUpdateOnDeviceWithStoragePorts.get(exportMask.getId()) != null) {    exportMasksToUpdateOnDeviceWithStoragePorts.get(exportMask.getId()).addAll(assignments.get(initiatorURI));  } else {    exportMasksToUpdateOnDeviceWithStoragePorts.put(exportMask.getId(),assignments.get(initiatorURI));  }}  }
class C{  public CipherParameters encrypt(byte[] out,int outOff,int keyLen) throws IllegalArgumentException {  if (!(key instanceof ECPublicKeyParameters)) {    throw new IllegalArgumentException("Public key required for encryption");  }  ECPublicKeyParameters ecPubKey=(ECPublicKeyParameters)key;  ECDomainParameters ecParams=ecPubKey.getParameters();  ECCurve curve=ecParams.getCurve();  BigInteger n=ecParams.getN();  BigInteger h=ecParams.getH();  BigInteger r=BigIntegers.createRandomInRange(ONE,n,rnd);  BigInteger rPrime=CofactorMode ? r.multiply(h).mod(n) : r;  ECMultiplier basePointMultiplier=createBasePointMultiplier();  ECPoint[] ghTilde=new ECPoint[]{basePointMultiplier.multiply(ecParams.getG(),r),ecPubKey.getQ().multiply(rPrime)};  curve.normalizeAll(ghTilde);  ECPoint gTilde=ghTilde[0], hTilde=ghTilde[1];  byte[] C=gTilde.getEncoded(false);  System.arraycopy(C,0,out,outOff,C.length);  byte[] PEH=hTilde.getAffineXCoord().getEncoded();  return deriveKey(keyLen,C,PEH);}  }
class C{  public Vertex evaluateWHILE(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,1,network)) {    return network.createVertex(Primitive.NULL);  }  int depth=0;  boolean condition=true;  List<Relationship> doEquations=expression.orderedRelationships(Primitive.DO);  Vertex result=network.createVertex(Primitive.NULL);  while (condition && depth < Language.MAX_STACK) {    Vertex first=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);    if (arguments.size() == 1) {      condition=first.is(Primitive.TRUE);    }    if (condition) {      for (      Relationship doEquation : doEquations) {        result=evaluateExpression(doEquation.getTarget(),variables,network,startTime,maxTime,stack);        if (variables.containsKey(network.createVertex(Primitive.RETURN))) {          return result;        } else         if (result.is(Primitive.BREAK)) {          return result;        } else         if (result.is(Primitive.CONTINUE)) {          break;        }      }    }    depth++;  }  if (depth >= Language.MAX_STACK) {    network.getBot().log(this,"Max stack exceeded on while loop",Level.WARNING,Language.MAX_STACK);  }  return result;}  }
class C{  private void fillFieldValues(){  if (isCreationPanel) {    phrase.setText("" + Hearing.DEFAULT_PHRASE);    outputAmount.setText("" + Hearing.DEFAULT_OUTPUT_AMOUNT);  } else {    phrase.setText("" + hearingSensor.getPhrase());    outputAmount.setText("" + hearingSensor.getOutputAmount());  }}  }
class C{  private ByteBuffer clientHandshakePacket(){  ByteBuffer res=ByteBuffer.allocate(6);  res.put(new byte[]{IGNITE_HANDSHAKE_FLAG,5,0,0,0,0});  res.flip();  return res;}  }
class C{  public static List<Product> listEnabled(Store store,String code){  List<Product> list=new LinkedList<>();  for (  Product p : store.products().values()) {    if (!p.available() && p.purchased() && p.enabled(code)) {      list.add(p);    }  }  return list;}  }
class C{  public static StorageImage create(String fileName,int width,int height,boolean keep){  return new StorageImage(fileName,width,height,keep);}  }
class C{  public static void stopRecording(boolean isSave){  View stopButton=SOLO.getCurrentActivity().findViewById(R.id.track_controller_stop);  if (stopButton != null && stopButton.isShown()) {    SOLO.clickOnView(stopButton);    if (isSave) {      SOLO.waitForText(trackListActivity.getString(R.string.generic_save),1,5000);      long currentMillis=System.currentTimeMillis();      trackName=TRACK_NAME_PREFIX + currentMillis;      trackDescription=TRACK_DESCRIPTION_PREFIX + currentMillis;      SOLO.sendKey(KeyEvent.KEYCODE_DEL);      enterTextAvoidSoftKeyBoard(0,trackName);      enterTextAvoidSoftKeyBoard(1,activityType);      enterTextAvoidSoftKeyBoard(2,trackDescription);      SOLO.clickOnText(trackListActivity.getString(R.string.generic_save));      instrumentation.waitForIdleSync();    } else {      instrumentation.waitForIdleSync();    }  }}  }
class C{  WelcomeWindow(SetupManager manager,boolean partial){  super(manager,I18n.tr("Welcome"),partial ? I18n.tr("Welcome to the FrostWire setup wizard. FrostWire has recently added new features that require your configuration. FrostWire will guide you through a series of steps to configure these new features.") : I18n.tr("Welcome to the FrostWire setup wizard. FrostWire will guide you through a series of steps to configure FrostWire for optimum performance."));}  }
class C{  public void add(HighlightView hv){  mHighlightViews.clear();  mHighlightViews.add(hv);  invalidate();}  }
class C{  public sub addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public static void writeInteger(OutputStream theOs,long theValue) throws IOException {  if (theValue < 128) {    writeShortInteger(theOs,(int)theValue);  } else {    writeLongInteger(theOs,theValue);  }}  }
class C{  private static ResultPoint[] findVertices(BitMatrix matrix,boolean tryHarder){  int height=matrix.getHeight();  int width=matrix.getWidth();  ResultPoint[] result=new ResultPoint[8];  boolean found=false;  int[] counters=new int[START_PATTERN.length];  int rowStep=Math.max(1,height >> (tryHarder ? 9 : 7));  for (int i=0; i < height; i+=rowStep) {    int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters);    if (loc != null) {      result[0]=new ResultPoint(loc[0],i);      result[4]=new ResultPoint(loc[1],i);      found=true;      break;    }  }  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,START_PATTERN,counters);      if (loc != null) {        result[1]=new ResultPoint(loc[0],i);        result[5]=new ResultPoint(loc[1],i);        found=true;        break;      }    }  }  counters=new int[STOP_PATTERN.length];  if (found) {    found=false;    for (int i=0; i < height; i+=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters);      if (loc != null) {        result[2]=new ResultPoint(loc[1],i);        result[6]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  if (found) {    found=false;    for (int i=height - 1; i > 0; i-=rowStep) {      int[] loc=findGuardPattern(matrix,0,i,width,false,STOP_PATTERN,counters);      if (loc != null) {        result[3]=new ResultPoint(loc[1],i);        result[7]=new ResultPoint(loc[0],i);        found=true;        break;      }    }  }  return found ? result : null;}  }
class C{  public IOContainer(){  this(new IOObject[0]);}  }
class C{  public UserProperty(){}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();case VALUES:  return isSetValues();case ERROR:return isSetError();}throw new IllegalStateException();}  }
class C{  public synchronized boolean hasCookies(){  throw new MustOverrideException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:43.393 -0500",hash_original_method="ADD8A6D3E398AE84BB2395E77CB3DD25",hash_generated_method="6DA260BB897D74B8F53EF5A21360381C") public void startCDATA(){  theNextState=S_CDATA;}  }
class C{  public static Block createBlock(){  return createBlock(Utils.generateRandomAccount());}  }
class C{  private static boolean isASCIISuperset(String encoding) throws Exception {  String chkS="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyz-_.!~*'();/?:@&=+$,";  byte[] chkB={48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,45,95,46,33,126,42,39,40,41,59,47,63,58,64,38,61,43,36,44};  byte[] b=chkS.getBytes(encoding);  return java.util.Arrays.equals(b,chkB);}  }
class C{  private int findIndex(Object key,Object[] array){  int length=array.length;  int index=getModuloHash(key,length);  int last=(index + length - 2) % length;  while (index != last) {    if (array[index] == key || (array[index] == null)) {      break;    }    index=(index + 2) % length;  }  return index;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  int progress=0;  int a;  int filterSize=3;  double n;  double sum;  int dX[];  int dY[];  int midPoint;  int numPixelsInFilter;  double[] filterShape;  boolean reflectAtBorders=true;  double centreValue=0;  double neighbourhoodDist=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  neighbourhoodDist=Double.parseDouble(args[2]);  if (inputHeader.isEmpty() || outputHeader.isEmpty()) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    DEM.isReflectedAtEdges=reflectAtBorders;    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("grey.pal");    filterSize=(int)(neighbourhoodDist / ((DEM.getCellSizeX() + DEM.getCellSizeY()) / 2));    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      filterSize++;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    double bSqr=midPoint * midPoint;    a=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[a]=col - midPoint;        dY[a]=row - midPoint;        z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;        if (z > 1) {          filterShape[a]=0;        } else {          filterShape[a]=1;        }        a++;      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        centreValue=DEM.getValue(row,col);        if (centreValue != noData) {          n=0;          sum=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            if ((x != midPoint) && (y != midPoint)) {              z=DEM.getValue(y,x);              if (z != noData) {                n+=filterShape[a];                sum+=z * filterShape[a];              }            }          }          z=centreValue - sum / n;          output.setValue(row,col,z);        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean forEachEntry(TObjectFloatProcedure<K> procedure){  K[] keys=(K[])_set;  float[] values=_values;  for (int i=keys.length; i-- > 0; ) {    if (keys[i] != null && keys[i] != REMOVED && !procedure.execute(keys[i],values[i])) {      return false;    }  }  return true;}  }
class C{  public void store(long val,Offset offset){  this.plus(offset).store(val);}  }
class C{  public boolean hasNext(){  try {switch (modus) {case INIT:      return queryArticle();case ITERATE_WITH_MAPPING:    if (chronoIterator.hasNext()) {      return true;    }  reset();if (resultArticles.next()) {  this.currentArticleID=resultArticles.getInt(1);  return (this.lastArticleID == -1) || (this.currentArticleID <= this.lastArticleID);}resultArticles.close();return queryArticle();case ITERATE_WITHOUT_MAPPING:if (revisionIterator.hasNext()) {return true;}reset();if (resultArticles.next()) {this.currentArticleID=resultArticles.getInt(1);return (this.lastArticleID == -1) || (this.currentArticleID <= this.lastArticleID);}resultArticles.close();return queryArticle();default :throw new RuntimeException("Illegal mode");}} catch (SQLException e) {throw new RuntimeException(e);}}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return DPID;case 2:  return PORT;default :return null;}}  }
class C{  public int height(){  return height(root);}  }
class C{  private String formatValue(BigDecimal data){  if (data == null)   return ""; else {    DecimalFormat frm=new DecimalFormat("###,###,###,##0.00");    return frm.format(data.setScale(2,BigDecimal.ROUND_HALF_UP));  }}  }
class C{  public String paramString(){  String typeStr;switch (id) {case TEXT_VALUE_CHANGED:    typeStr="TEXT_VALUE_CHANGED";  break;default :typeStr="unknown type";}return typeStr;}  }
class C{  @Nullable private Figure readSwitchElement(IXMLElement elem) throws IOException {  for (  IXMLElement child : elem.getChildren()) {    String[] requiredFeatures=toWSOrCommaSeparatedArray(readAttribute(child,"requiredFeatures",""));    String[] requiredExtensions=toWSOrCommaSeparatedArray(readAttribute(child,"requiredExtensions",""));    String[] systemLanguage=toWSOrCommaSeparatedArray(readAttribute(child,"systemLanguage",""));    String[] requiredFormats=toWSOrCommaSeparatedArray(readAttribute(child,"requiredFormats",""));    String[] requiredFonts=toWSOrCommaSeparatedArray(readAttribute(child,"requiredFonts",""));    boolean isMatch;    isMatch=supportedFeatures.containsAll(Arrays.asList(requiredFeatures)) && requiredExtensions.length == 0 && requiredFormats.length == 0 && requiredFonts.length == 0;    if (isMatch && systemLanguage.length > 0) {      isMatch=false;      Locale locale=LocaleUtil.getDefault();      for (      String lng : systemLanguage) {        int p=lng.indexOf('-');        if (p == -1) {          if (locale.getLanguage().equals(lng)) {            isMatch=true;            break;          }        } else {          if (locale.getLanguage().equals(lng.substring(0,p)) && locale.getCountry().toLowerCase().equals(lng.substring(p + 1))) {            isMatch=true;            break;          }        }      }    }    if (isMatch) {      Figure figure=readElement(child);      if (readAttribute(child,"visibility","visible").equals("visible") && !readAttribute(child,"display","inline").equals("none")) {        return figure;      } else {        return null;      }    }  }  return null;}  }
class C{  private Frame padFrameRight(Frame originalFrame,int newWidth){  Frame.Metadata metadata=originalFrame.getMetadata();  int width=metadata.getWidth();  int height=metadata.getHeight();  Log.i(TAG,"Padded image from: " + width + "x"+ height+ " to "+ newWidth+ "x"+ height);  ByteBuffer origBuffer=originalFrame.getGrayscaleImageData();  int origOffset=origBuffer.arrayOffset();  byte[] origBytes=origBuffer.array();  ByteBuffer paddedBuffer=ByteBuffer.allocateDirect(newWidth * height);  int paddedOffset=paddedBuffer.arrayOffset();  byte[] paddedBytes=paddedBuffer.array();  Arrays.fill(paddedBytes,(byte)0);  for (int y=0; y < height; ++y) {    int origStride=origOffset + y * width;    int paddedStride=paddedOffset + y * newWidth;    System.arraycopy(origBytes,origStride,paddedBytes,paddedStride,width);  }  return new Frame.Builder().setImageData(paddedBuffer,newWidth,height,ImageFormat.NV21).setId(metadata.getId()).setRotation(metadata.getRotation()).setTimestampMillis(metadata.getTimestampMillis()).build();}  }
class C{  protected Messages(){}  }
class C{  public double pow(double x,int n){  if (n == 0)   return 1;  if (n < 0) {    n=-n;    x=1 / x;  }  double res=1;  for (double f=x; n > 0; n=n >> 1) {    if (n % 2 == 1)     res*=f;    f=f * f;  }  return res;}  }
class C{  static public SerialTrafficController instance(){  if (self == null) {    if (log.isDebugEnabled()) {      log.debug("creating a new SerialTrafficController object");    }    self=new SerialTrafficController();  }  return self;}  }
class C{  public DiskStoreAttributesCreation(DiskStoreAttributes attrs){  this.name=attrs.getName();  this.autoCompact=attrs.getAutoCompact();  this.compactionThreshold=attrs.getCompactionThreshold();  this.allowForceCompaction=attrs.getAllowForceCompaction();  this.maxOplogSizeInBytes=attrs.getMaxOplogSizeInBytes();  this.timeInterval=attrs.getTimeInterval();  this.writeBufferSize=attrs.getWriteBufferSize();  this.queueSize=attrs.getQueueSize();  this.diskDirs=attrs.getDiskDirs();  this.diskDirSizes=attrs.getDiskDirSizes();  setDiskUsageWarningPercentage(attrs.getDiskUsageWarningPercentage());  setDiskUsageCriticalPercentage(attrs.getDiskUsageCriticalPercentage());  if (attrs instanceof UserSpecifiedDiskStoreAttributes) {    UserSpecifiedDiskStoreAttributes nonDefault=(UserSpecifiedDiskStoreAttributes)attrs;    initHasFields(nonDefault);  } else {    setAllHasFields(true);  }}  }
class C{  protected static URI dockerDaemonUri(final boolean isLinux,@NotNull final Map<String,String> env){  String host=env.get(DOCKER_HOST_PROPERTY);  if (host != null) {    URI userURI;    try {      userURI=new URI(host);    } catch (    URISyntaxException e) {      LOG.error(String.format("Unable to parse environment variable %s with the following value - %s",DOCKER_HOST_PROPERTY,host),e);      return isLinux ? UNIX_SOCKET_URI : DEFAULT_DOCKER_MACHINE_URI;    }    String tls=env.get(DOCKER_TLS_VERIFY_PROPERTY);    String protocol="1".equals(tls) ? "https" : "http";    try {      return new URI(protocol,null,userURI.getHost(),userURI.getPort(),null,null,null);    } catch (    URISyntaxException e) {      LOG.error(String.format("Unable to create URI from %s environment variable with value %s " + "and TLS environment variable %s with value %s",DOCKER_HOST_PROPERTY,host,DOCKER_TLS_VERIFY_PROPERTY,tls),e);      return DEFAULT_DOCKER_MACHINE_URI;    }  }  return isLinux ? UNIX_SOCKET_URI : DEFAULT_DOCKER_MACHINE_URI;}  }
class C{  public void initializeSeed(byte[] seedIn){  System.arraycopy(seedIn,0,this.seedNext,0,this.messDigestTree.getDigestSize());  this.seedInitialized=true;}  }
class C{  public ExtensionHandler(ExtensionProfile profile,Class<? extends ExtensionPoint> extendedClass){  this(profile,extendedClass,null);}  }
class C{  public void assertSplit(long suggestedStart,long suggestedLen,long expStart,long expLen,byte[] data) throws Exception {  write(data);  IgfsNewLineRecordResolver rslvr=resolver();  IgfsFileRange split;  try (IgfsInputStream is=read()){    split=rslvr.resolveRecords(igfs,is,split(suggestedStart,suggestedLen));  }   assert split != null : "Split is null.";  assert split.start() == expStart : "Incorrect start [expected=" + expStart + ", actual="+ split.start()+ ']';  assert split.length() == expLen : "Incorrect length [expected=" + expLen + ", actual="+ split.length()+ ']';}  }
class C{  private Topic configureMQTopic(MQTopic topic) throws JMSException {  if (durable) {    if (useUniqueQ) {      topic.setBrokerDurSubQueue("SYSTEM.JMS.D.SUB.*");    }  }  if (Config.parms.getBoolean("jf")) {    setPutAsyncAllowed(topic);  }  if (Config.parms.getBoolean("jy")) {    setReadAheadAllowed(topic);  }  configureMQDestination(topic);  return topic;}  }
class C{  public boolean isVariable(long arc){switch ((int)arc) {case 33:case 32:case 31:case 133:case 132:case 131:case 13:case 12:case 11:case 10:case 112:case 111:case 110:case 5:case 4:case 3:case 2:case 23:case 1:case 22:case 21:    return true;default :  break;}return false;}  }
class C{  public static Group createGroup(Composite parent,String text,int columns,int hspan,int fill){  Group g=new Group(parent,SWT.NONE);  g.setLayout(new GridLayout(columns,false));  g.setText(text);  g.setFont(parent.getFont());  GridData gd=new GridData(fill);  gd.horizontalSpan=hspan;  g.setLayoutData(gd);  return g;}  }
class C{  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {  String refClassName=in.readUTF();  if (refClassName == null || refClassName.length() == 0) {    ref=(RemoteRef)in.readObject();  } else {    String internalRefClassName=RemoteRef.packagePrefix + "." + refClassName;    Class<?> refClass=Class.forName(internalRefClassName);    try {      ref=(RemoteRef)refClass.newInstance();    } catch (    InstantiationException e) {      throw new ClassNotFoundException(internalRefClassName,e);    }catch (    IllegalAccessException e) {      throw new ClassNotFoundException(internalRefClassName,e);    }catch (    ClassCastException e) {      throw new ClassNotFoundException(internalRefClassName,e);    }    ref.readExternal(in);  }}  }
class C{  public int size(){  return this.tokenToStateMap.size();}  }
class C{  public ColladaFloatArray(String ns){  super(ns);}  }
class C{  @Override public void clearLastTraversedText(){  device.clearLastTraversedText();}  }
class C{  public static @Nullable Pair<Integer,Integer> decodeDimensions(InputStream is){  Preconditions.checkNotNull(is);  ByteBuffer byteBuffer=DECODE_BUFFERS.acquire();  if (byteBuffer == null) {    byteBuffer=ByteBuffer.allocate(DECODE_BUFFER_SIZE);  }  BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  try {    options.inTempStorage=byteBuffer.array();    BitmapFactory.decodeStream(is,null,options);    return (options.outWidth == -1 || options.outHeight == -1) ? null : new Pair(options.outWidth,options.outHeight);  }  finally {    DECODE_BUFFERS.release(byteBuffer);  }}  }
class C{  protected SpiderScanResult(String uri,String method){  super();  this.uri=uri;  this.method=method;}  }
class C{  public void addActionListener(ActionListener l){  listenerList.add(ActionListener.class,l);  m_text.addActionListener(l);}  }
class C{  private boolean eval(final int value,final int threshold){  LOGGER.debug("eval: " + value + ", "+ threshold);  if (threshold < 0) {    LOGGER.debug(value < Math.abs(threshold));    return value < Math.abs(threshold);  } else {    LOGGER.debug(value >= Math.abs(threshold));    return value >= threshold;  }}  }
class C{  public InvitationObject(InvitationObject parent){  this.id=parent.getId();  this.userId=parent.getUserId();  this.token=parent.getToken();  this.created=parent.getCreated();  this.email=parent.getEmail();  this.companyId=parent.getCompanyId();}  }
class C{  public synchronized void prepareCommit(Session session,String transaction){  log.prepareCommit(session,transaction);}  }
class C{  public boolean isSetParent_id(){  return EncodingUtils.testBit(__isset_bitfield,__PARENT_ID_ISSET_ID);}  }
class C{  public void periodicProcessing() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Execute re-publish");  }  mDialogPath=createDialogPath();  SipRequest publish=SipMessageFactory.createPublish(createDialogPath(),mExpirePeriod,mEntityTag,null);  sendPublish(publish);}  }
class C{  public Builder withReceiveBufferSize(int receiveBufferSize){  properties.setProperty(NettyOptions.RECEIVE_BUFFER_SIZE,String.valueOf(Assert.argNot(receiveBufferSize,receiveBufferSize <= 0,"buffer size must be positive")));  return this;}  }
class C{  public void navigateOut(final TeamExplorerNavigationItemConfig currentNavItem){  Check.isTrue(currentItemBufferIndex >= 0,"currentItemBufferIndex >= 0");  final List<TeamExplorerNavigationItemConfig> navItemsToRemove=new ArrayList<TeamExplorerNavigationItemConfig>();  for (  final TeamExplorerNavigationItemConfig item : navigationBuffer) {    if (item.equals(currentNavItem)) {      navItemsToRemove.add(item);    }  }  navigationBuffer.removeAll(navItemsToRemove);  currentItemBufferIndex=navigationBuffer.size() - 1;  nextNavigation=null;  fireNavigationBufferChangedEvent();  doNavigation(getCurrentItem());}  }
class C{  public AccessControlTest(TestSpecification specification){  this.specification=specification;}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  private void handleResponse(int response,ResponseData rawData){  mPolicy.processServerResponse(response,rawData);  if (mPolicy.allowAccess()) {    mCallback.allow(response);  } else {    mCallback.dontAllow(response);  }}  }
class C{  public Truncate(double min,double max){  super(Number.class,Number.class);  this.min=min;  this.max=max;}  }
class C{  public static int dp2px(Context context,int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());}  }
class C{  public SkipMeException(){  super();}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  @Override public void unconfigureSlider(JSlider slider){  if (slider.getClientProperty("colorSliderModel") == this) {    slider.setModel(new DefaultBoundedRangeModel());    slider.putClientProperty("colorSliderModel",null);    slider.putClientProperty("colorComponentIndex",null);    removeColorSlider(slider);  }}  }
class C{  public boolean created(URI storageSystemUri){  if (storageSystemUri != null && systemConsistencyGroups != null && !systemConsistencyGroups.isEmpty()) {    StringSet cgNames=systemConsistencyGroups.get(storageSystemUri.toString());    if (cgNames != null && !cgNames.isEmpty()) {      return true;    }  }  return false;}  }
class C{  public CustomSwitchPreference(Context context){  super(context,null);}  }
class C{  public ServiceSchemeException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public static Number div(Character left,Character right){  return div(Integer.valueOf(left),right);}  }
class C{  private static IgniteNamedInstance start0(GridStartContext startCtx,boolean failIfStarted) throws IgniteCheckedException {  assert startCtx != null;  String name=startCtx.config().getGridName();  if (name != null && name.isEmpty())   throw new IgniteCheckedException("Non default grid instances cannot have empty string name.");  IgniteNamedInstance grid=new IgniteNamedInstance(name);  IgniteNamedInstance old;  if (name != null)   old=grids.putIfAbsent(name,grid); else {synchronized (dfltGridMux) {      old=dfltGrid;      if (old == null)       dfltGrid=grid;    }  }  if (old != null)   if (failIfStarted) {    if (name == null)     throw new IgniteCheckedException("Default Ignite instance has already been started."); else     throw new IgniteCheckedException("Ignite instance with this name has already been started: " + name);  } else   return old;  if (startCtx.config().getWarmupClosure() != null)   startCtx.config().getWarmupClosure().apply(startCtx.config());  startCtx.single(grids.size() == 1);  boolean success=false;  try {    try {      grid.start(startCtx);    } catch (    IgniteInterruptedCheckedException e) {      if (grid.starterThreadInterrupted)       Thread.interrupted();      throw e;    }    notifyStateChange(name,STARTED);    success=true;  }  finally {    if (!success) {      if (name != null)       grids.remove(name,grid); else {synchronized (dfltGridMux) {          if (dfltGrid == grid)           dfltGrid=null;        }      }      grid=null;    }  }  if (grid == null)   throw new IgniteCheckedException("Failed to start grid with provided configuration.");  return grid;}  }
class C{  @DSComment("Refelction/class loader") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:14.188 -0500",hash_original_method="4375560191FF9AF2AD66AAFC6EDA1910",hash_generated_method="403419D6FE97EEEE4440D238B61372F5") public static Object newProxyInstance(ClassLoader loader,Class<?>[] interfaces,InvocationHandler h) throws IllegalArgumentException {  if (h == null) {    throw new NullPointerException();  }  try {    return getProxyClass(loader,interfaces).getConstructor(new Class<?>[]{InvocationHandler.class}).newInstance(new Object[]{h});  } catch (  NoSuchMethodException ex) {    throw (InternalError)(new InternalError(ex.toString()).initCause(ex));  }catch (  IllegalAccessException ex) {    throw (InternalError)(new InternalError(ex.toString()).initCause(ex));  }catch (  InstantiationException ex) {    throw (InternalError)(new InternalError(ex.toString()).initCause(ex));  }catch (  InvocationTargetException ex) {    Throwable target=ex.getTargetException();    throw (InternalError)(new InternalError(target.toString()).initCause(target));  }}  }
class C{  public PopupMenuSetActiveSession(){  super(Constant.messages.getString("httpsessions.popup.session.active.set"));  initialize();}  }
class C{  protected void drawGeometry(DrawContext dc,int mode,int count,int type,Buffer elementBuffer,ShapeData shapeData,int face){  if (elementBuffer == null) {    String message="nullValue.ElementBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Geometry mesh=shapeData.getMesh(face);  if (mesh.getBuffer(Geometry.VERTEX) == null) {    String message="nullValue.VertexBufferIsNull";    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  GL2 gl=dc.getGL().getGL2();  int size, glType, stride;  Buffer vertexBuffer, normalBuffer;  size=mesh.getSize(Geometry.VERTEX);  glType=mesh.getGLType(Geometry.VERTEX);  stride=mesh.getStride(Geometry.VERTEX);  vertexBuffer=mesh.getBuffer(Geometry.VERTEX);  normalBuffer=null;  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      normalBuffer=mesh.getBuffer(Geometry.NORMAL);      if (normalBuffer == null) {        gl.glDisableClientState(GL2.GL_NORMAL_ARRAY);      } else {        glType=mesh.getGLType(Geometry.NORMAL);        stride=mesh.getStride(Geometry.NORMAL);        gl.glNormalPointer(glType,stride,normalBuffer);      }    }  }  gl.glEnable(GL.GL_CULL_FACE);  gl.glFrontFace(GL.GL_CCW);  if (this.shouldUseVBOs(dc) && (this.getVboIds(getSubdivisions(),dc)) != null) {    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,getVboIds(getSubdivisions(),dc)[2 * face]);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,this.getVboIds(getSubdivisions(),dc)[2 * face + 1]);    gl.glVertexPointer(size,glType,stride,0);    gl.glDrawElements(mode,count,type,0);    gl.glBindBuffer(GL.GL_ARRAY_BUFFER,0);    gl.glBindBuffer(GL.GL_ELEMENT_ARRAY_BUFFER,0);  } else {    gl.glVertexPointer(size,glType,stride,vertexBuffer.rewind());    gl.glDrawElements(mode,count,type,elementBuffer);  }  gl.glDisable(GL2.GL_RESCALE_NORMAL);  gl.glDisable(GL.GL_CULL_FACE);  if (!dc.isPickingMode()) {    if (mustApplyLighting(dc,null)) {      if (normalBuffer == null)       gl.glEnableClientState(GL2.GL_NORMAL_ARRAY);    }  }}  }
class C{  public PrincipalImpl(String hostName) throws UnknownHostException {  if ((hostName.equals("localhost")) || (hostName.equals("127.0.0.1"))) {    add=new InetAddress[1];    add[0]=java.net.InetAddress.getByName(hostName);  } else   add=java.net.InetAddress.getAllByName(hostName);}  }
class C{  @SafeVarargs public CCombinedFilter(final IFilter<T>... filters){  for (  final IFilter<T> filter : filters) {    m_filters.add(filter);  }}  }
class C{  public static void cursorStringToContentValues(Cursor cursor,String field,ContentValues values,String key){  values.put(key,cursor.getString(cursor.getColumnIndexOrThrow(field)));}  }
class C{  private static final void usage(){  System.err.println("Usage: convert-wm <template.wm | directory>");  System.exit(1);}  }
class C{  public static void fillPaintedShape(Graphics2D graphics,Shape shape,Paint paint,Rectangle2D paintBounds){  if (shape == null) {    return;  }  if (paintBounds == null) {    paintBounds=shape.getBounds2D();  }  AffineTransform txOrig=graphics.getTransform();  graphics.translate(paintBounds.getX(),paintBounds.getY());  graphics.scale(paintBounds.getWidth(),paintBounds.getHeight());  Paint paintOld=null;  if (paint != null) {    paintOld=graphics.getPaint();    graphics.setPaint(paint);  }  AffineTransform tx=AffineTransform.getScaleInstance(1.0 / paintBounds.getWidth(),1.0 / paintBounds.getHeight());  tx.translate(-paintBounds.getX(),-paintBounds.getY());  graphics.fill(tx.createTransformedShape(shape));  if (paintOld != null) {    graphics.setPaint(paintOld);  }  graphics.setTransform(txOrig);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void noNewStreams(){  deallocate(true,false,false);}  }
class C{  private static int nextID(Connection conn,int AD_Sequence_ID,boolean adempiereSys){  if (conn == null || AD_Sequence_ID == 0)   return -3;  int retValue=-1;  String sqlUpdate="{call nextID(?,?,?)}";  CallableStatement cstmt=null;  try {    cstmt=conn.prepareCall(sqlUpdate,ResultSet.TYPE_FORWARD_ONLY,ResultSet.CONCUR_READ_ONLY);    cstmt.setInt(1,AD_Sequence_ID);    cstmt.setString(2,adempiereSys ? "Y" : "N");    cstmt.registerOutParameter(3,Types.INTEGER);    if (DB.getDatabase().isQueryTimeoutSupported()) {      cstmt.setQueryTimeout(QUERY_TIME_OUT);    }    cstmt.execute();    retValue=cstmt.getInt(3);  } catch (  Exception e) {    s_log.log(Level.SEVERE,e.toString());  } finally {    DB.close(cstmt);  }  return retValue;}  }
class C{  @Override public synchronized void updateObject(String columnLabel,Object x) throws SQLException {  super.updateObject(columnLabel,JDBC42Helper.convertJavaTimeToJavaSql(x));}  }
class C{  public long nextIndex(){  return lastIndex() + 1;}  }
class C{  protected void debugCode(String text){  if (trace.isDebugEnabled()) {    trace.debugCode(getTraceObjectName() + "." + text);  }}  }
class C{  public Synapse(final Network newParent,Synapse synapse){  this(synapse);  parentNetwork=newParent;}  }
class C{  public boolean remove(final Player player){  final String playerName=player.getName();  if (playerName != null) {    return players.remove(playerName.toLowerCase()) != null;  } else {    throw new IllegalArgumentException("can't remove player without name");  }}  }
class C{  public int[] toArray(){  int[] result=new int[size()];  int[] set=_set;  byte[] states=_states;  for (int i=states.length, j=0; i-- > 0; ) {    if (states[i] == FULL) {      result[j++]=set[i];    }  }  return result;}  }
class C{  private Attendees(){}  }
class C{  public void nullPasswords(){  if (password != null) {    password.nullPassword();  }  for (  String alias : entryPasswords.keySet()) {    entryPasswords.get(alias).nullPassword();  }}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  public static Sail openSail(final String file){  return openSail(file,false);}  }
class C{  public Date parse(String text,String format,Locale locale) throws ParserException {  SimpleDateFormat dateFormat=getDateFormat(format,locale);  try {    return dateFormat.parse(text.trim());  } catch (  ParseException e) {    throw new ParserException("Error when parsing date(" + dateFormat.toPattern() + ") from "+ text,e);  }}  }
class C{  private Job randomizeManyInputFiles(Configuration baseConfig,Path fullInputList,Path outputStep2Dir,int numLinesPerSplit) throws IOException {  Job job2=Job.getInstance(baseConfig);  job2.setJarByClass(getClass());  job2.setJobName(getClass().getName() + "/" + Utils.getShortClassName(LineRandomizerMapper.class));  job2.setInputFormatClass(NLineInputFormat.class);  NLineInputFormat.addInputPath(job2,fullInputList);  NLineInputFormat.setNumLinesPerSplit(job2,numLinesPerSplit);  job2.setMapperClass(LineRandomizerMapper.class);  job2.setReducerClass(LineRandomizerReducer.class);  job2.setOutputFormatClass(TextOutputFormat.class);  FileOutputFormat.setOutputPath(job2,outputStep2Dir);  job2.setNumReduceTasks(1);  job2.setOutputKeyClass(LongWritable.class);  job2.setOutputValueClass(Text.class);  return job2;}  }
class C{  public void visitBaseType(char descriptor){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:47.938 -0500",hash_original_method="0C89C3F43D481EBAFC32AEEAE6183BD3",hash_generated_method="C6765A4C1D0FFCCF53B54DBAA06615CD") private void removeExpiredTimestamps(){  long beginCheckPeriod=System.currentTimeMillis() - mCheckPeriod;synchronized (mSmsStamp) {    Iterator<Map.Entry<String,ArrayList<Long>>> iter=mSmsStamp.entrySet().iterator();    while (iter.hasNext()) {      Map.Entry<String,ArrayList<Long>> entry=iter.next();      ArrayList<Long> oldList=entry.getValue();      if (oldList.isEmpty() || oldList.get(oldList.size() - 1) < beginCheckPeriod) {        iter.remove();      }    }  }}  }
class C{  public static MySQLPacket readPacket(InputStream in,long timeoutMillis){  try {    int mask=0xff;    int packetLen1=in.read();    int packetLen2=in.read();    int packetLen3=in.read();    int packetLen=(packetLen1 & mask) | (packetLen2 & mask) << 8 | (packetLen3 & mask) << 16;    int packetNumber=in.read();    if (packetLen1 == -1) {      logger.debug("Reached end of input stream while reading packet");      return null;    }    if (packetLen2 == -1 || packetLen3 == -1 || packetNumber == -1) {      throw new EOFException("Reached end of input stream.");    }    byte[] packetData=new byte[packetLen + HEADER_LENGTH];    packetData[0]=(byte)packetLen1;    packetData[1]=(byte)packetLen2;    packetData[2]=(byte)packetLen3;    packetData[3]=(byte)packetNumber;    boolean deterministicAvailability=true;    if (in instanceof WrappedInputStream) {      deterministicAvailability=((WrappedInputStream)in).isDeterministic();    }    int n=0;    while (n < packetLen) {      if (deterministicAvailability && in.available() == 0) {        long readStartTime=System.currentTimeMillis();        long delay=-1;        while (in.available() == 0) {          try {            Thread.sleep(10);          } catch (          InterruptedException e) {            return null;          }          delay=System.currentTimeMillis() - readStartTime;          if (delay > timeoutMillis) {            break;          }        }        if (delay > (timeoutMillis / 10)) {          logger.info("Paused to allow packet data to appear on the network: delay=" + (delay / 1000.0) + " timeout="+ (timeoutMillis / 1000.0)+ " packetNumber="+ packetNumber+ " packetlen="+ packetLen+ " bytesRead="+ n);        }      }      int count=in.read(packetData,HEADER_LENGTH + n,packetLen - n);      if (count < 0) {        throw new EOFException("Reached end of input stream: packetNumber=" + packetNumber + " packetlen="+ packetLen+ " bytesRead="+ n);      }      n+=count;    }    MySQLPacket p=new MySQLPacket(packetLen,packetData,(byte)packetNumber);    p.setInputStream(in);    return p;  } catch (  SocketTimeoutException e) {    logger.warn("Socket timeout expired, closing connection");  }catch (  IOException e) {    logger.error("I/O error while reading from client socket",e);  }  return null;}  }
class C{  private void attemptClaimDrag(){  if (mParent != null) {    mParent.requestDisallowInterceptTouchEvent(true);  }}  }
class C{  protected void removeTemplateElementListeners(XBLOMTemplateElement template,ImportRecord ir){  XBLEventSupport es=(XBLEventSupport)template.initializeEventSupport();  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMAttrModified",ir.templateMutationListener,false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeInserted",ir.templateMutationListener,false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMNodeRemoved",ir.templateMutationListener,false);  es.removeImplementationEventListenerNS(XMLConstants.XML_EVENTS_NAMESPACE_URI,"DOMCharacterDataModified",ir.templateMutationListener,false);}  }
class C{  private void expandOnCheck(){  if (chkExpand.isChecked())   expandAll(); else   collapseAll();}  }
class C{  private boolean isProduceTuple(){  return collector.isOutQueuesAvailable() && topologyState.equals(TopologyAPI.TopologyState.RUNNING);}  }
class C{  public UnweightedGraph(int[][] edges,int numberOfVertices){  super(edges,numberOfVertices);}  }
class C{  private void assertFilesIdentical(Directory dir,String golden,String sorted) throws IOException {  long numBytes=dir.fileLength(golden);  assertEquals(numBytes,dir.fileLength(sorted));  byte[] buf1=new byte[64 * 1024];  byte[] buf2=new byte[64 * 1024];  try (IndexInput in1=dir.openInput(golden,IOContext.READONCE);IndexInput in2=dir.openInput(sorted,IOContext.READONCE)){    long left=numBytes;    while (left > 0) {      int chunk=(int)Math.min(buf1.length,left);      left-=chunk;      in1.readBytes(buf1,0,chunk);      in2.readBytes(buf2,0,chunk);      for (int i=0; i < chunk; i++) {        assertEquals(buf1[i],buf2[i]);      }    }  } }  }
class C{  private void parseText(String text){  this.progressText="";  this.progressAddValue=false;  if (text != null) {    if (text.contains("#VAL#")) {      text=text.replace("#VAL#","%2.0f");      this.progressAddValue=true;    }    this.progressText=text;  }  this.paint.getTextBounds(this.progressText,0,this.progressText.length(),this.textBounds);}  }
class C{  public void addRectShape(float[] v,float[] v1,float[] v2,float[] v3,float[] v4,float[] v5,float[] v6,float[] v7,int w,int h,int d,float[] qParam){  PositionTextureVertex[] verts=new PositionTextureVertex[8];  TexturedPolygon[] poly=new TexturedPolygon[6];  PositionTextureVertex positionTexturevertex=new PositionTextureVertex(v[0],v[1],v[2],0.0F,0.0F);  PositionTextureVertex positionTexturevertex1=new PositionTextureVertex(v1[0],v1[1],v1[2],0.0F,8F);  PositionTextureVertex positionTexturevertex2=new PositionTextureVertex(v2[0],v2[1],v2[2],8F,8F);  PositionTextureVertex positionTexturevertex3=new PositionTextureVertex(v3[0],v3[1],v3[2],8F,0.0F);  PositionTextureVertex positionTexturevertex4=new PositionTextureVertex(v4[0],v4[1],v4[2],0.0F,0.0F);  PositionTextureVertex positionTexturevertex5=new PositionTextureVertex(v5[0],v5[1],v5[2],0.0F,8F);  PositionTextureVertex positionTexturevertex6=new PositionTextureVertex(v6[0],v6[1],v6[2],8F,8F);  PositionTextureVertex positionTexturevertex7=new PositionTextureVertex(v7[0],v7[1],v7[2],8F,0.0F);  verts[0]=positionTexturevertex;  verts[1]=positionTexturevertex1;  verts[2]=positionTexturevertex2;  verts[3]=positionTexturevertex3;  verts[4]=positionTexturevertex4;  verts[5]=positionTexturevertex5;  verts[6]=positionTexturevertex6;  verts[7]=positionTexturevertex7;  poly[0]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex5,positionTexturevertex1,positionTexturevertex2,positionTexturevertex6},textureOffsetX + d + w,textureOffsetY + d,textureOffsetX + d + w+ d,textureOffsetY + d + h,1F,qParam[7],qParam[10] * qParam[7],qParam[10]);  poly[1]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex,positionTexturevertex4,positionTexturevertex7,positionTexturevertex3},textureOffsetX,textureOffsetY + d,textureOffsetX + d,textureOffsetY + d + h,qParam[9] * qParam[6],qParam[9],1F,qParam[6]);  poly[2]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex5,positionTexturevertex4,positionTexturevertex,positionTexturevertex1},textureOffsetX + d,textureOffsetY,textureOffsetX + d + w,textureOffsetY + d,1F,qParam[8],qParam[1] * qParam[8],qParam[1]);  poly[3]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex2,positionTexturevertex3,positionTexturevertex7,positionTexturevertex6},textureOffsetX + d + w,textureOffsetY,textureOffsetX + d + w+ w,textureOffsetY + d,qParam[3],qParam[3] * qParam[11],qParam[11],1F);  poly[4]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex1,positionTexturevertex,positionTexturevertex3,positionTexturevertex2},textureOffsetX + d,textureOffsetY + d,textureOffsetX + d + w,textureOffsetY + d + h,qParam[0],qParam[0] * qParam[4],qParam[4],1F);  poly[5]=addPolygonReturn(new PositionTextureVertex[]{positionTexturevertex4,positionTexturevertex5,positionTexturevertex6,positionTexturevertex7},textureOffsetX + d + w+ d,textureOffsetY + d,textureOffsetX + d + w+ d+ w,textureOffsetY + d + h,qParam[2] * qParam[5],qParam[2],1F,qParam[5]);  if (mirror ^ flip) {    for (    TexturedPolygon aPoly : poly) {      aPoly.flipFace();    }  }  copyTo(verts,poly);}  }
class C{  public static IFn var(Object qualifiedName){  Symbol s=asSym(qualifiedName);  return var(s.getNamespace(),s.getName());}  }
class C{  protected N4FieldAccessorImpl(){  super();}  }
class C{  private static boolean hasFCInitiators(List<Initiator> initiators){  for (  Initiator initiator : initiators) {    if (HostInterface.Protocol.FC.toString().equals(initiator.getProtocol())) {      return true;    }  }  return false;}  }
class C{  public ConditionalMutualInfoCalculatorMultiVariateGaussian(){  normalise=false;}  }
class C{  protected StatsDClient createStatsDClient(){  if (kafkaProducerConfiguration.getStatsDConfiguration() != null) {    final String prefix=kafkaProducerConfiguration.getStatsDConfiguration().getPrefix();    final String host=kafkaProducerConfiguration.getStatsDConfiguration().getHost();    final int port=kafkaProducerConfiguration.getStatsDConfiguration().getPort();    return new NonBlockingStatsDClient(prefix,host,port);  } else {    return new NoOpStatsDClient();  }}  }
class C{  public void initUI(){  FontMetrics fontMetrics=getFontMetrics(FontSizer.INSTANCE.getAdjustedDefaultFont());  if (mainFrame != null) {    int minimumHeight=fontMetrics.getHeight() * 11 + HEIGHT_DELTA;    int minimumWidth=Math.max(fontMetrics.stringWidth(MultiBitFrame.EXAMPLE_LONG_FIELD_TEXT),fontMetrics.stringWidth(controller.getLocaliser().getString("sendBitcoinConfirmView.message"))) + WIDTH_DELTA;    setMinimumSize(new Dimension(minimumWidth,minimumHeight));    positionDialogRelativeToParent(this,0.5D,0.47D);  }  sendBitcoinConfirmPanel=new SendBitcoinConfirmPanel(this.bitcoinController,mainFrame,this,sendRequest);  sendBitcoinConfirmPanel.setOpaque(false);  setLayout(new BorderLayout());  add(sendBitcoinConfirmPanel,BorderLayout.CENTER);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean hasTaskOfTypeInProgress(@NotNull ExternalSystemTaskType type,@NotNull Project project){  String projectId=ExternalSystemTaskId.getProjectId(project);  for (  ExternalSystemTaskId id : myTasksInProgress.keySet()) {    if (type.equals(id.getType()) && projectId.equals(id.getIdeProjectId())) {      return true;    }  }  return false;}  }
class C{  public DefaultClause createDefaultClause(){  DefaultClauseImpl defaultClause=new DefaultClauseImpl();  return defaultClause;}  }
class C{  public String wchan() throws IOException {  return read("wchan");}  }
class C{  @Override public void run(int connId,String[] args){  if (server.getGame().getOptions().booleanOption("double_blind") && server.getGame().getOptions().booleanOption("disable_local_save")) {    server.sendServerChat("Local Save only outside double blind games.");  } else {    String fileName="savegame.sav";    String localPath="savegames" + File.separator;    if (args.length > 1) {      fileName=args[1];    }    if (args.length > 2) {      localPath=args[2];    }    server.sendSaveGame(connId,fileName,localPath);  }}  }
class C{  public static String[] buildInput(int n){  String[] strings=new String[n];  for (int i=0; i < n; i++) {    StringBuffer mixed=new StringBuffer(baseString);    for (int s=0; s < elementSize; s++) {      int j;      char c, d;      j=1 + (int)(elementSize * Math.random());      j%=elementSize;      c=mixed.charAt(s);      d=mixed.charAt(j);      mixed.replace(s,s + 1,"" + d);      mixed.replace(j,j + 1,"" + c);    }    strings[i]=new String(mixed);  }  return strings;}  }
class C{  public void testAskSubquery02(){  final String anonFilterVar1="--exists-1";  final String[] filterVars1=new String[]{"x1"};  final String anonFilterVar2="--not-exists-1";  final String[] filterVars2=new String[]{"y1","y2","y3"};  final JoinGroupNode optJG=joinGroupWithVars("y1","y3");  optJG.setOptional(true);  new Helper(){{      given=select(varNode(x),where(filterExistsWithVars(anonFilterVar1,filterVars1),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar1,filterVars1),filterExistsWithVars(anonFilterVar2,filterVars2),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar2,filterVars2),stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),joinGroupWithVars("y1","y2"),optJG,joinGroupWithVars("y1","y3"),joinGroupWithVars("y2","y3")));      expected=select(varNode(x),where(stmtPatternWithVar("x1"),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar1,filterVars1),filterExistsWithVars(anonFilterVar1,filterVars1),stmtPatternWithVarOptional("y1"),joinGroupWithVars("y1","y2"),optJG,joinGroupWithVars("y1","y3"),filterExistsOrNotExistsSubqueryWithVars(anonFilterVar2,filterVars2),filterExistsWithVars(anonFilterVar2,filterVars2),joinGroupWithVars("y2","y3")));    }  }.testWhileIgnoringExplainHints();}  }
class C{  @SuppressWarnings("unchecked") public static <T>Fuseable.QueueSubscription<T> as(Subscription s){  if (s instanceof Fuseable.QueueSubscription) {    return (Fuseable.QueueSubscription<T>)s;  }  return null;}  }
class C{  private void run() throws Exception {  DevelopmentProvider tp=new DevelopmentProvider();  Topology t=tp.newTopology("mqttSampleSubscriber");  MqttConfig mqttConfig=createMqttConfig();  MqttStreams mqtt=new MqttStreams(t,null);  TStream<String> msgs=mqtt.subscribe(topic,0);  msgs.sink(null);  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(t);}  }
class C{  RegisteredProject(FolderEntry folder,ProjectConfig config,boolean updated,boolean detected,ProjectTypeRegistry projectTypeRegistry) throws NotFoundException, ProjectTypeConstraintException, ServerException, ValueStorageException {  problems=new ArrayList<>();  attributes=new HashMap<>();  Path path;  if (folder != null) {    path=folder.getPath();  } else   if (config != null) {    path=Path.of(config.getPath());  } else {    throw new ServerException("Invalid Project Configuration. Path undefined.");  }  this.folder=folder;  this.config=(config == null) ? new NewProjectConfig(path) : config;  this.updated=updated;  this.detected=detected;  if (folder == null || folder.isFile()) {    problems.add(new Problem(10,"No project folder on file system " + this.config.getPath()));  }  if (config == null) {    problems.add(new Problem(11,"No project configured in workspace " + this.config.getPath()));  }  this.types=new ProjectTypes(this.config.getPath(),this.config.getType(),this.config.getMixins(),projectTypeRegistry,problems);  types.addTransient(folder);  initAttributes();}  }
class C{  static void printXUsageMessage(boolean printToStderr){  initOutput(printToStderr);  ostream.println(getLocalizedMessage("java.launcher.X.usage",File.pathSeparator));  if (System.getProperty("os.name").contains("OS X")) {    ostream.println(getLocalizedMessage("java.launcher.X.macosx.usage",File.pathSeparator));  }}  }
class C{  public void createSubUsageScenario12() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(5.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails perUnitServiceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO12_PERUNIT_MONTH_SERVICE",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(perUnitServiceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO12_PRORATA_MONTH",perUnitServiceDetails,basicSetup.getCustomerUser1(),role);  VOServiceDetails proRataService=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO12_PRORATA_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,technicalService,supplierMarketplace);  serviceSetup.registerCompatibleServices(basicSetup.getSupplierAdminKey(),perUnitServiceDetails,proRataService);  long usageUpgradeTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.daysToMillis(10);  BillingIntegrationTestBase.setDateFactoryInstance(usageUpgradeTime);  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,proRataService);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") + DateTimeHandling.daysToMillis(5.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO12_PRORATA_MONTH",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO12_PRORATA_MONTH",upgradedSubDetails);}  }
class C{  public static InvalidArgument parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InvalidArgument object=new InvalidArgument();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"InvalidArgument".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InvalidArgument)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","Exception").equals(reader.getName())) {      object.setException(org.apache.axis2.databinding.utils.ConverterUtil.getAnyTypeObject(reader,ExtensionMapper.class));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public NodeELResolver(){  XPathFactory factory=XPathFactory.newInstance();  xpath=factory.newXPath();}  }
class C{  @Override public Type INTEGER(){  return integerType;}  }
class C{  public List<JSONValue> values(){  return Collections.unmodifiableList(values);}  }
class C{  public void clear(){  removeAll(false);}  }
class C{  boolean disableSis(){  String volumePath="/vol/" + name;  NaElement elem=new NaElement("sis-disable");  elem.addNewChild("path",volumePath);  try {    server.invokeElem(elem);    return true;  } catch (  Exception e) {    String msg="Failed to disable SIS on volume: " + name;    log.error(msg,e);    throw new NetAppException(msg,e);  }}  }
class C{  protected void printBorder(Graphics g){  paintBorder(g);}  }
class C{  public void onClickClearView(NotificationBoard board,View clearView){  if (DBG)   Log.v(TAG,"onClickClearView");}  }
class C{  public void flush(){  mBroadcaster.receive(mMessage);  mComplete=true;}  }
class C{  public void deleteExportPolicy(String policyName,String fsName){  NaElement ruleElem=null;  NaElement result=null;  try {    ruleElem=new NaElement("export-policy-destroy");    ruleElem.addNewChild("policy-name",policyName);    result=server.invokeElem(ruleElem);  } catch (  IllegalArgumentException e) {    String msg="Failed to delete export policy for file system: " + fsName;    log.error(msg,e);    throw new NetAppCException(msg,e);  }catch (  Exception e) {    String msg="Failed to create export policy for file system: " + fsName;    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  public void testBasicRangeQuery(){  assertQ("Collated RangeQ: ",req("fl","id","q","sort_de:[tone TO tp]","sort","id asc"),"//*[@numFound='2']","//result/doc[1]/int[@name='id'][.=4]","//result/doc[2]/int[@name='id'][.=7]");}  }
class C{  final void fireHiddenSide(){  myDispatcher.getMulticaster().hiddenSide(this);}  }
class C{  public final DataSet filter(DataSet dataSet){  return expand(dataSet);}  }
class C{  public static int run(final String cmd,final String stdoutFileName,final int timeout,final String workingDirectory){  final ExternalExecutor myExecutor=new ExternalExecutor(cmd,stdoutFileName,workingDirectory);  return waitForFinish(myExecutor,timeout);}  }
class C{  public static Map<String,Object> prodFindAssociatedByType(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  String productId=(String)context.get("productId");  String productIdTo=(String)context.get("productIdTo");  String type=(String)context.get("type");  Locale locale=(Locale)context.get("locale");  String errMsg=null;  Boolean cvaBool=(Boolean)context.get("checkViewAllow");  boolean checkViewAllow=(cvaBool == null ? false : cvaBool);  String prodCatalogId=(String)context.get("prodCatalogId");  Boolean bidirectional=(Boolean)context.get("bidirectional");  bidirectional=bidirectional == null ? false : bidirectional;  Boolean sortDescending=(Boolean)context.get("sortDescending");  sortDescending=sortDescending == null ? false : sortDescending;  if (productId == null && productIdTo == null) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.both_productId_and_productIdTo_cannot_be_null",locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  if (productId != null && productIdTo != null) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.both_productId_and_productIdTo_cannot_be_defined",locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  productId=productId == null ? productIdTo : productId;  GenericValue product=null;  try {    product=EntityQuery.use(delegator).from("Product").where("productId",productId).cache().queryOne();  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problems_reading_product_entity",messageMap,locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  if (product == null) {    errMsg=UtilProperties.getMessage(resourceError,"productservices.problems_getting_product_entity",locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  try {    List<GenericValue> productAssocs=null;    List<String> orderBy=FastList.newInstance();    if (sortDescending) {      orderBy.add("sequenceNum DESC");    } else {      orderBy.add("sequenceNum");    }    if (bidirectional) {      EntityCondition cond=EntityCondition.makeCondition(UtilMisc.toList(EntityCondition.makeCondition("productId",productId),EntityCondition.makeCondition("productIdTo",productId)),EntityJoinOperator.OR);      productAssocs=EntityQuery.use(delegator).from("ProductAssoc").where(EntityCondition.makeCondition(cond,EntityCondition.makeCondition("productAssocTypeId",type))).orderBy(orderBy).cache(true).queryList();    } else {      if (productIdTo == null) {        productAssocs=product.getRelated("MainProductAssoc",UtilMisc.toMap("productAssocTypeId",type),orderBy,true);      } else {        productAssocs=product.getRelated("AssocProductAssoc",UtilMisc.toMap("productAssocTypeId",type),orderBy,true);      }    }    productAssocs=EntityUtil.filterByDate(productAssocs);    if (checkViewAllow && prodCatalogId != null && UtilValidate.isNotEmpty(productAssocs)) {      String viewProductCategoryId=CatalogWorker.getCatalogViewAllowCategoryId(delegator,prodCatalogId);      if (viewProductCategoryId != null) {        if (productIdTo == null) {          productAssocs=CategoryWorker.filterProductsInCategory(delegator,productAssocs,viewProductCategoryId,"productIdTo");        } else {          productAssocs=CategoryWorker.filterProductsInCategory(delegator,productAssocs,viewProductCategoryId,"productId");        }      }    }    result.put("assocProducts",productAssocs);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  } catch (  GenericEntityException e) {    Map<String,String> messageMap=UtilMisc.toMap("errMessage",e.getMessage());    errMsg=UtilProperties.getMessage(resourceError,"productservices.problems_product_association_relation_error",messageMap,locale);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,errMsg);    return result;  }  return result;}  }
class C{  public void done(){  output.println();}  }
class C{  private NotEqualsRule(final String field,final String value){  super();  if (!RESOLVER.isField(field)) {    throw new IllegalArgumentException("Invalid NOT EQUALS rule - " + field + " is not a supported field");  }  this.field=field;  this.value=value;}  }
class C{  public static boolean isEmpty(CharSequence str){  if (str == null || str.length() == 0) {    return true;  } else {    return false;  }}  }
class C{  public boolean joinSegments(Point2D.Double join,double tolerance){  int i=findSegment(join,tolerance);  if (i != -1 && i > 1) {    removeNode(i);    return true;  }  return false;}  }
class C{  @Override public void handleClick(int x,int y,PlotRenderingInfo info){  Rectangle2D dataArea=info.getDataArea();  if (dataArea.contains(x,y)) {    for (int i=0; i < this.subplots.size(); i++) {      XYPlot subplot=(XYPlot)this.subplots.get(i);      PlotRenderingInfo subplotInfo=info.getSubplotInfo(i);      subplot.handleClick(x,y,subplotInfo);    }  }}  }
class C{  public static RepaintManager currentManager(Component c){  return currentManager(AppContext.getAppContext());}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (getClass() != obj.getClass()) {    return false;  }  DefaultCredentials other=(DefaultCredentials)obj;  if (password == null) {    if (other.password != null) {      return false;    }  } else   if (!password.equals(other.password)) {    return false;  }  if (token == null) {    if (other.token != null) {      return false;    }  } else   if (!token.equals(other.token)) {    return false;  }  if (username == null) {    if (other.username != null) {      return false;    }  } else   if (!username.equals(other.username)) {    return false;  }  return true;}  }
class C{  @DSComment("From safe class list") @DSSpec(DSCat.SPEC_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:15.168 -0500",hash_original_method="1DA5795546617F35E1E74BDB5F5DDD58",hash_generated_method="878D85E66666C4CA6A7F7C1FFC6D09CD") public int availableProcessors(){  return (int)Libcore.os.sysconf(_SC_NPROCESSORS_ONLN);}  }
class C{  private void printShipments(){  if (m_ids == null)   return;  if (!ADialog.ask(m_WindowNo,this,"PrintShipments"))   return;  m_messageText.append("<p>").append(Msg.getMsg(Env.getCtx(),"PrintShipments")).append("</p>");  message.setText(m_messageText.toString());  int retValue=ADialogDialog.A_CANCEL;  do {    for (int i=0; i < m_ids.length; i++) {      int M_InOut_ID=m_ids[i];      ReportCtl.startDocumentPrint(ReportEngine.SHIPMENT,M_InOut_ID,this,Env.getWindowNo(this),true);    }    ADialogDialog d=new ADialogDialog(this,Env.getHeader(Env.getCtx(),m_WindowNo),Msg.getMsg(Env.getCtx(),"PrintoutOK?"),JOptionPane.QUESTION_MESSAGE);    retValue=d.getReturnCode();  } while (retValue == ADialogDialog.A_CANCEL);}  }
class C{  @Override protected Void doTask() throws Exception {  final IDistributedTransactionService txService=(IDistributedTransactionService)resourceManager.getLiveJournal().getLocalTransactionManager().getTransactionService();  prepare();  final long commitTime=txService.prepared(tx,dataServiceUUID);  lockJournal();  try {    commit(commitTime);    boolean success=false;    try {      success=txService.committed(tx,dataServiceUUID);    }  finally {      if (!success) {        rollback();      }    }  }  finally {    unlockJournal();  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + String.valueOf(progress) + "%");  }  previousProgress=progress;}  }
class C{  public void clearCdns(){  cdnSrcHostInfos.clear();}  }
class C{  public ThumbnailParameterBuilder region(Region sourceRegion){  this.sourceRegion=sourceRegion;  return this;}  }
class C{  private E awaitMatch(Node s,Node pred,E e,boolean timed,long nanos){  final long deadline=timed ? System.nanoTime() + nanos : 0L;  Thread w=Thread.currentThread();  int spins=-1;  ThreadLocalRandom randomYields=null;  for (; ; ) {    Object item=s.item;    if (item != e) {      s.forgetContents();      return LinkedTransferQueue.<E>cast(item);    }    if ((w.isInterrupted() || (timed && nanos <= 0)) && s.casItem(e,s)) {      unsplice(pred,s);      return e;    }    if (spins < 0) {      if ((spins=spinsFor(pred,s.isData)) > 0)       randomYields=ThreadLocalRandom.current();    } else     if (spins > 0) {      --spins;      if (randomYields.nextInt(CHAINED_SPINS) == 0)       Thread.yield();    } else     if (s.waiter == null) {      s.waiter=w;    } else     if (timed) {      nanos=deadline - System.nanoTime();      if (nanos > 0L)       LockSupport.parkNanos(this,nanos);    } else {      LockSupport.park(this);    }  }}  }
class C{  private Object readObject(ObjectInput in) throws IOException, ClassNotFoundException {  Object obj=in.readObject();  return NULL_OBJECT.equals(obj) ? null : obj;}  }
class C{  public void keyTyped(KeyEvent e){}  }
class C{  private void startResin21x(String[] args) throws Exception {  Class resinClass=Class.forName("com.caucho.server.http.ResinServer");  Constructor constructor=resinClass.getConstructor(new Class[]{args.getClass(),boolean.class});  this.resinServer=constructor.newInstance(new Object[]{args,Boolean.TRUE});  Method initMethod=this.resinServer.getClass().getMethod("init",new Class[]{ArrayList.class});  initMethod.invoke(this.resinServer,new Object[]{null});}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  private String adjustOutputToHandleOpenJDKJavacOutputDifference(String antOutput){  if (!antOutput.contains("java.util.ArrayList") && antOutput.contains("ArrayList")) {    antOutput=antOutput.replace("ArrayList","java.util.ArrayList");  }  if (!antOutput.contains("java.lang.String") && antOutput.contains("String")) {    antOutput=antOutput.replace("String","java.lang.String");  }  return antOutput;}  }
class C{  public RemoveSkuFromCartCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService,final ProductQuantityStrategy productQuantityStrategy){  super(registry,priceService,pricingPolicyProvider,productService,shopService);  this.productQuantityStrategy=productQuantityStrategy;}  }
class C{  public void flip(int fromIndex,int toIndex){  if (fromIndex < 0)   throw new IndexOutOfBoundsException("fromIndex < 0: " + fromIndex);  if (toIndex < 0)   throw new IndexOutOfBoundsException("toIndex < 0: " + toIndex);  if (fromIndex > toIndex) {    throw new IndexOutOfBoundsException("fromIndex: " + fromIndex + " > toIndex: "+ toIndex);  }  int endUnitIndex=unitIndex(toIndex);  int unitsRequired=endUnitIndex + 1;  if (unitsInUse < unitsRequired) {    ensureCapacity(unitsRequired);    unitsInUse=unitsRequired;  }  int startUnitIndex=unitIndex(fromIndex);  if (startUnitIndex == endUnitIndex) {    long bitMask=(1L << (toIndex & BIT_INDEX_MASK)) - (1L << (fromIndex & BIT_INDEX_MASK));    bits[startUnitIndex]^=bitMask;    if (bits[unitsInUse - 1] == 0)     recalculateUnitsInUse();    return;  }  long bitMask=bitsLeftOf(fromIndex & BIT_INDEX_MASK);  bits[startUnitIndex]^=bitMask;  if (endUnitIndex - startUnitIndex > 1) {    for (int i=startUnitIndex + 1; i < endUnitIndex; i++)     bits[i]^=WORD_MASK;  }  bitMask=bitsRightOf(toIndex & BIT_INDEX_MASK);  bits[endUnitIndex]^=bitMask;  if (bits[unitsInUse - 1] == 0)   recalculateUnitsInUse();}  }
class C{  public void testCFII_ServerClosedAfterFinish_Block() throws Exception {  connectServerBlock();  ensureServerClosed();  assertTrue(this.channel1.isOpen());  this.channel1.close();  statusChannelClosed();}  }
class C{  public boolean isMuted(){  return (false);}  }
class C{  public static boolean isEmpty(Collection<?> collection){  return isNull(collection) || collection.isEmpty();}  }
class C{  @Override protected EClass eStaticClass(){  return SGraphPackage.Literals.REGULAR_STATE;}  }
class C{  public boolean verify(boolean followManifests) throws MissingResourceFailureException, XMLSecurityException {  return super.verifyReferences(followManifests);}  }
class C{  public Assignment(){  map=new HashMap<String,Value>();}  }
class C{  protected ShiftExpressionImpl(){  super();}  }
class C{  public void close(){  Thread current=thread;  thread=null;  if (current != null) {    current.interrupt();    try {      current.join();    } catch (    InterruptedException e) {    }  }}  }
class C{  protected Arithmetic(){}  }
class C{  protected void appendFieldsIn(final Class<?> clazz){  if (clazz.isArray()) {    this.reflectionAppendArray(this.getObject());    return;  }  final Field[] fields=clazz.getDeclaredFields();  AccessibleObject.setAccessible(fields,true);  for (  final Field field : fields) {    final String fieldName=field.getName();    if (this.accept(field)) {      try {        final Object fieldValue=this.getValue(field);        this.append(fieldName,fieldValue);      } catch (      final IllegalAccessException ex) {        throw new InternalError("Unexpected IllegalAccessException: " + ex.getMessage());      }    }  }}  }
class C{  public void add(E element){  for (int x=0; x < k; x++) {    final int hashvalue=h.hash(element,x);    bitset.set(hashvalue);  }  numberOfAddedElements++;}  }
class C{  public boolean isCollected(String statsName){  return statsData.get(statsName) != null;}  }
class C{  public void background(PImage image){  if ((image.width != width) || (image.height != height)) {    throw new RuntimeException(ERROR_BACKGROUND_IMAGE_SIZE);  }  if ((image.format != RGB) && (image.format != ARGB)) {    throw new RuntimeException(ERROR_BACKGROUND_IMAGE_FORMAT);  }  backgroundColor=0;  backgroundImpl(image);}  }
class C{  public static Reader createXMLDocumentReader(InputStream is) throws IOException {  PushbackInputStream pbis=new PushbackInputStream(is,128);  byte[] buf=new byte[4];  int len=pbis.read(buf);  if (len > 0) {    pbis.unread(buf,0,len);  }  if (len == 4) {switch (buf[0] & 0x00FF) {case 0:      if (buf[1] == 0x003c && buf[2] == 0x0000 && buf[3] == 0x003f) {        return new InputStreamReader(pbis,"UnicodeBig");      }    break;case '<':switch (buf[1] & 0x00FF) {case 0:    if (buf[2] == 0x003f && buf[3] == 0x0000) {      return new InputStreamReader(pbis,"UnicodeLittle");    }  break;case '?':if (buf[2] == 'x' && buf[3] == 'm') {  Reader r=createXMLDeclarationReader(pbis,"UTF8");  String enc=getXMLDeclarationEncoding(r,"UTF8");  return new InputStreamReader(pbis,enc);}}break;case 0x004C:if (buf[1] == 0x006f && (buf[2] & 0x00FF) == 0x00a7 && (buf[3] & 0x00FF) == 0x0094) {Reader r=createXMLDeclarationReader(pbis,"CP037");String enc=getXMLDeclarationEncoding(r,"CP037");return new InputStreamReader(pbis,enc);}break;case 0x00FE:if ((buf[1] & 0x00FF) == 0x00FF) {return new InputStreamReader(pbis,"Unicode");}break;case 0x00FF:if ((buf[1] & 0x00FF) == 0x00FE) {return new InputStreamReader(pbis,"Unicode");}}}return new InputStreamReader(pbis,"UTF8");}  }
class C{  public DefaultDescendantSelector(Selector ancestor,SimpleSelector simple){  super(ancestor,simple);}  }
class C{  protected void curveVertexSegment(float x1,float y1,float z1,float x2,float y2,float z2,float x3,float y3,float z3,float x4,float y4,float z4){  float x0=x2;  float y0=y2;  float z0=z2;  PMatrix3D draw=curveDrawMatrix;  float xplot1=draw.m10 * x1 + draw.m11 * x2 + draw.m12 * x3 + draw.m13 * x4;  float xplot2=draw.m20 * x1 + draw.m21 * x2 + draw.m22 * x3 + draw.m23 * x4;  float xplot3=draw.m30 * x1 + draw.m31 * x2 + draw.m32 * x3 + draw.m33 * x4;  float yplot1=draw.m10 * y1 + draw.m11 * y2 + draw.m12 * y3 + draw.m13 * y4;  float yplot2=draw.m20 * y1 + draw.m21 * y2 + draw.m22 * y3 + draw.m23 * y4;  float yplot3=draw.m30 * y1 + draw.m31 * y2 + draw.m32 * y3 + draw.m33 * y4;  int savedCount=curveVertexCount;  float zplot1=draw.m10 * z1 + draw.m11 * z2 + draw.m12 * z3 + draw.m13 * z4;  float zplot2=draw.m20 * z1 + draw.m21 * z2 + draw.m22 * z3 + draw.m23 * z4;  float zplot3=draw.m30 * z1 + draw.m31 * z2 + draw.m32 * z3 + draw.m33 * z4;  vertex(x0,y0,z0);  for (int j=0; j < curveDetail; j++) {    x0+=xplot1;    xplot1+=xplot2;    xplot2+=xplot3;    y0+=yplot1;    yplot1+=yplot2;    yplot2+=yplot3;    z0+=zplot1;    zplot1+=zplot2;    zplot2+=zplot3;    vertex(x0,y0,z0);  }  curveVertexCount=savedCount;}  }
class C{  public void intersect(Rect bounds){  int size=list.size();  ObjectPool.Entry<ArrayList<ObjectPool.Entry<Rect>>> listEntry=listRectsPool.reserve();  ArrayList<ObjectPool.Entry<Rect>> newList=listEntry.get();  newList.clear();  for (int i=0; i < size; i++) {    ObjectPool.Entry<Rect> entry=list.get(i);    Rect rect=entry.get();    if (rect.intersect(bounds)) {      newList.add(entry);    } else     pool.release(entry);  }  list.clear();  size=newList.size();  for (int i=0; i < size; i++) {    recursiveAdd(newList.get(i),0);  }  listRectsPool.release(listEntry);}  }
class C{  public static void releaseUnpooled(long memPtr){  assert !isExternal(memPtr) : "Attempt to release external memory chunk directly: " + memPtr;  assert !isPooled(memPtr) : "Attempt to release pooled memory chunk directly: " + memPtr;  GridUnsafe.freeMemory(data(memPtr));  GridUnsafe.freeMemory(memPtr);}  }
class C{  private void sendMessage(SIPMessage message,boolean retry) throws IOException {  Socket sock=this.sipStack.ioHandler.sendBytes(this.getMessageProcessor().getIpAddress(),this.peerAddress,this.peerPort,this.peerProtocol,message,retry,this);  if (sock != mySock && sock != null) {    try {      if (mySock != null)       mySock.close();    } catch (    IOException ex) {    }    mySock=sock;    this.myClientInputStream=mySock.getInputStream();    Thread thread=new Thread(this);    thread.setDaemon(true);    thread.setName("TLSMessageChannelThread");    thread.start();  }}  }
class C{  public boolean isRoot(Class<?> entityClass){  return bindEntityRoots.contains(entityClass);}  }
class C{  protected final void handleVariableChangedEvent(Variable variable,int index,Parameter.ChangeType type){}  }
class C{  public boolean hasNickservCredentials(){  return nickservPassword != null && nickservPassword.length() > 0;}  }
class C{  public void resetLabels(){  AbstractInsnNode insn=first;  while (insn != null) {    if (insn instanceof LabelNode) {      ((LabelNode)insn).resetLabel();    }    insn=insn.next;  }}  }
class C{  public boolean deleteBackupPackage(final SlingHttpServletRequest request,final String packageName){  return deletePackage(request,BACKUP_GROUP,packageName,BACKUP_VERSION);}  }
class C{  public AccountManager(Connection connection){  this.connection=connection;}  }
class C{  public static List<Point2D> divideConquerBrownianBridge(double D,double t0,double y0,double t1,double y1,int depth,SpaceTimeRejector1D rejector){  return divideConquerBrownianBridge(D,new Point2D.Double(t0,y0),new Point2D.Double(t1,y1),depth,rejector);}  }
class C{  public Iterator<Label> iterator(){  return values().iterator();}  }
class C{  public TextAttributeConverter(){  super(TextAttribute.class);}  }
class C{  protected void executeQuery(final BigdataSailRepository repo,final int n,final int k) throws RepositoryException, MalformedQueryException, QueryEvaluationException, RDFParseException, IOException, UpdateExecutionException {  final BigdataSailRepositoryConnection conn=repo.getConnection();  conn.setAutoCommit(false);  conn.clear();  try {    StringBuilder data=new StringBuilder();    for (int i=0; i < n; i++) {      data.append("_:s").append(i % k).append(" <http://p> _:o").append(i).append(" <http://c> .\n");    }    conn.add(new ByteArrayInputStream(data.toString().getBytes()),"",RDFFormat.NQUADS);    conn.commit();    final String query="prefix h: <http://>\r\n" + "\r\n" + "INSERT { \r\n"+ "    GRAPH h:c { ?s h:p1 ?o }\r\n"+ "}\r\n"+ "WHERE\r\n"+ "  { GRAPH h:c {?s h:p ?o }\r\n"+ "}";    final Update q=conn.prepareUpdate(QueryLanguage.SPARQL,query);    q.execute();    assertEquals(n * 2,conn.getTripleStore().getStatementCount(true));  }  finally {    conn.close();  }}  }
class C{  @Override public void onMouseDragged(final MapMouseEvent ev){  if (!isTriggerMouseButton(ev)) {    return;  }  dragged=true;}  }
class C{  @SuppressWarnings("unchecked") public <T extends AbstractEffectList>T clear(){  effects.clear();  return (T)this;}  }
class C{  public DTEDFrameCacheLayer create(){  com.bbn.openmap.dataAccess.dted.DTEDFrameCache dfc=new com.bbn.openmap.dataAccess.dted.DTEDFrameCache();  for (  DTEDDirectoryHandler dHandler : dirHandlers) {    if (nTranslator != null) {      dHandler.setTranslator(nTranslator);    }    dfc.addDTEDDirectoryHandler(dHandler);  }  DTEDFrameCacheLayer layer=new DTEDFrameCacheLayer(dfc);  com.bbn.openmap.dataAccess.dted.DTEDFrameCacheHandler dfcHandler=layer.getCache();  if (!loaders.isEmpty()) {    dfcHandler.setGeneratorLoaders(loaders);  } else {    dfcHandler.addGeneratorLoader(new SlopeGeneratorLoader());  }  dfcHandler.setActiveGeneratorLoader(dfcHandler.getGeneratorLoaders().get(0).getPrettyName());  return layer;}  }
class C{  public static void v(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_VERBOSE) {    return;  }  Log.v(tag,msg,throwable);}  }
class C{  static <T>Collection<T> cast(Iterable<T> iterable){  return (Collection<T>)iterable;}  }
class C{  Word2VecModel train(Log log,TrainingProgressListener listener,Iterable<List<String>> sentences) throws InterruptedException {  try (ProfilingTimer timer=ProfilingTimer.createLoggingSubtasks(log,"Training word2vec")){    final Multiset<String> counts;    try (AC ac=timer.start("Acquiring word frequencies")){      listener.update(Stage.ACQUIRE_VOCAB,0.0);      counts=(vocab.isPresent()) ? vocab.get() : count(Iterables.concat(sentences));    }     final ImmutableMultiset<String> vocab;    try (AC ac=timer.start("Filtering and sorting vocabulary")){      listener.update(Stage.FILTER_SORT_VOCAB,0.0);      vocab=filterAndSort(counts);    }     final Map<String,HuffmanNode> huffmanNodes;    try (AC task=timer.start("Create Huffman encoding")){      huffmanNodes=new HuffmanCoding(vocab,listener).encode();    }     final NeuralNetworkModel model;    try (AC task=timer.start("Training model %s",neuralNetworkConfig)){      model=neuralNetworkConfig.createTrainer(vocab,huffmanNodes,listener).train(sentences);    }     return new Word2VecModel(vocab.elementSet(),model.layerSize(),Doubles.concat(model.vectors()));  } }  }
class C{  DecodingException(final Throwable cause){  super(cause);}  }
class C{  private static boolean isSystemClass(String name,List<String> packageList){  boolean result=false;  if (packageList != null) {    String canonicalName=ClassLoaderUtil.canonicalizeClassOrResource(name);    for (    String c : packageList) {      boolean shouldInclude=true;      if (c.startsWith("-")) {        c=c.substring(1);        shouldInclude=false;      }      if (canonicalName.startsWith(c)) {        if (c.endsWith(".") || canonicalName.length() == c.length() || canonicalName.length() > c.length() && canonicalName.charAt(c.length()) == '$') {          if (shouldInclude) {            result=true;          } else {            return false;          }        }      }    }  }  return result;}  }
class C{  private void stopHadoopFsDaemons(ClassLoader ldr) throws Exception {  Class<?> daemonCls=ldr.loadClass(HadoopClassLoader.CLS_DAEMON);  Method m=daemonCls.getMethod("dequeueAndStopAll");  m.invoke(null);}  }
class C{  public DestroyRegionOperation(RegionEventImpl event,boolean notifyOfRegionDeparture){  super(event);  this.notifyOfRegionDeparture=notifyOfRegionDeparture;}  }
class C{  @Override public void updateByte(int columnIndex,byte x) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateByte(" + columnIndex + ", "+ x+ ");");    }    update(columnIndex,ValueByte.get(x));  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public static org.smpte_ra.schemas.st0429_8_2007.PKL.PackingListType constructPackingListType_2007(){  org.smpte_ra.schemas.st0429_8_2007.PKL.PackingListType pklType_2007=new org.smpte_ra.schemas.st0429_8_2007.PKL.PackingListType();  IMFDocumentsObjectFieldsFactory.constructObjectFields(pklType_2007);  return pklType_2007;}  }
class C{  public void changeSettings(Settings settings){  this.settings.fillSettings(settings.getSpecifiedMapping());  for (  Class<Module> toAttach : settings.modules) {    if (getModule(toAttach) == null) {      log.fine("Attaching module: " + toAttach.getSimpleName());      attachModule(toAttach);    }  }}  }
class C{  public void createInitialPopulation(){  int width=populationDensityGrid.getGridWidth();  int height=populationDensityGrid.getGridHeight();  int length=width * height;  double total=0;  double cumul[]=new double[length];  int k=0;  for (int j=0; j < height; j++) {    for (int i=0; i < width; i++) {      total+=((IntGrid2D)populationDensityGrid.getGrid()).field[i][j];      cumul[k++]=total;    }  }  agents.clear();  for (int i=0; i < numberOfAgents; i++) {    double val=random.nextDouble() * total;    int index=linearSearch(cumul,val);    if (index == -1) {      System.out.println("ERROR: population sampling range failure.");      continue;    }    int x=index % width;    int y=index / width;    Turkanian t=new Turkanian(this,x,y);    t.energy=random.nextDouble() * birthEnergy;    agents.add(t);    agentGrid.setObjectLocation(t,x,y);  }}  }
class C{  public MetadataManagerConfigurer metadataFilter(MetadataFilter filter){  metadataFilter=filter;  return this;}  }
class C{  private void raiseHighWater(int blocks){  Extent growExtent=Conversions.pagesToBytes(pagesPerBlock * blocks);  if (highWater.EQ(limit)) {    Log.write("limit=");    Log.write(limit);    Log.write(", highWater=");    Log.write(highWater);    Log.write(", growExtent=");    Log.writeln(growExtent);    VM.assertions.fail("Attempt to grow FreeList beyond limit");  }  if (highWater.plus(growExtent).GT(limit)) {    growExtent=highWater.diff(limit).toWord().toExtent();  }  mmap(highWater,growExtent);  highWater=highWater.plus(growExtent);}  }
class C{  public Label(){}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case MAP_FIELD:    return isSetMap_field();}throw new IllegalStateException();}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  void advance(){  Moment m=stack.peek();  while (m != null) {    if (m.phase == done) {      stack.pop();      if (stack.isEmpty()) {        break;      }      m=stack.peek();      m.phase=advancePhase(m.phase);    } else     if (m.phase == left) {      if (m.node.above != null) {        m=new Moment(m.node.above,left);        stack.push(m);      } else {        m.phase=advancePhase(m.phase);      }    } else     if (m.phase == self) {      m.phase=advancePhase(m.phase);      break;    } else {      if (m.node.below != null) {        m=new Moment(m.node.below,left);        stack.push(m);      } else {        m.phase=advancePhase(m.phase);      }    }  }}  }
class C{  public boolean isDescending(){  return isDescending;}  }
class C{  public void showLikeQuickAction(int xOffset,int yOffset){  preShow();  window.setAnimationStyle(R.style.Animations_PopUpMenu_Center);  int[] location=new int[2];  anchor.getLocationOnScreen(location);  Rect anchorRect=new Rect(location[0],location[1],location[0] + anchor.getWidth(),location[1] + anchor.getHeight());  root.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT));  root.measure(LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT);  int rootWidth=root.getMeasuredWidth();  int rootHeight=root.getMeasuredHeight();  int screenWidth=windowManager.getDefaultDisplay().getWidth();  int xPos=((screenWidth - rootWidth) / 2) + xOffset;  int yPos=anchorRect.top - rootHeight + yOffset;  if (rootHeight > anchorRect.top) {    yPos=anchorRect.bottom + yOffset;    window.setAnimationStyle(R.style.Animations_PopDownMenu_Center);  }  window.showAtLocation(anchor,Gravity.NO_GRAVITY,xPos,yPos);}  }
class C{  @Override public void actionPerformed(final ActionEvent event){  m_isCaretVisible=!m_isCaretVisible;  notifyListeners();}  }
class C{  public static Object newInstance(Class<?> cl,int dim){  return Array.newInstance(cl,dim);}  }
class C{  public Comparator<Point2D> atan2Order(){  return new Atan2Order();}  }
class C{  public static FloatMatrix randn(int rows,int columns){  FloatMatrix m=new FloatMatrix(rows,columns);  for (int i=0; i < rows * columns; i++) {    m.data[i]=(float)Random.nextGaussian();  }  return m;}  }
class C{  private static void appendPathElements(Document doc,String elementType,Element libraryElement,String[] paths){  if (paths.length > 0) {    Element child=doc.createElement(elementType);    libraryElement.appendChild(child);    for (int i=0; i < paths.length; i++) {      String path=paths[i];      Element entry=doc.createElement("entry");      child.appendChild(entry);      entry.setAttribute("path",path);    }  }}  }
class C{  @SuppressWarnings("unchecked") private void augmentFeatures(Featurizable<TK,FV> f,List<FeatureValue<FV>> featureValues){  String[] genres=(String[])f.sourceInputProperties.get(InputProperty.Domain);  if (genres == null)   genres=NO_GENRE;  if (featureAugmentationMode < 4) {    for (int i=0, sz=featureValues.size(); i < sz; ++i) {      FeatureValue<FV> fv=featureValues.get(i);      if (featureAugmentationMode == 0 || featureAugmentationMode == 3 || (featureAugmentationMode == 1 && fv.isDenseFeature) || (featureAugmentationMode == 2 && !fv.isDenseFeature)) {        for (        String genre : genres) {          String featureValue="aug-" + genre + "-"+ fv.name.toString();          featureValues.add(new FeatureValue<>((FV)featureValue,fv.value,fv.isDenseFeature));        }      }    }  }  if (featureAugmentationMode >= 3) {    for (int i=0, sz=featureValues.size(); i < sz; ++i) {      FeatureValue<FV> fv=featureValues.get(i);      final boolean inPrefix=f.targetSequence != null && f.derivation != null && f.derivation.insertionPosition < f.derivation.prefixLength;      final boolean straddle=inPrefix && f.derivation.length > f.derivation.prefixLength;      final boolean afterPrefix=f.derivation != null && f.derivation.prefixLength > 0 && !inPrefix;      if (inPrefix) {        String featureValue=getAugFeatureName(fv.name.toString(),prefixFeatMap,PREFIX);        featureValues.add(new FeatureValue<>((FV)featureValue,fv.value,fv.isDenseFeature));      } else       if (afterPrefix) {        String featureValue=getAugFeatureName(fv.name.toString(),afterPrefixFeatMap,AFTER_PREFIX);        featureValues.add(new FeatureValue<>((FV)featureValue,fv.value,fv.isDenseFeature));      }      if (straddle) {        String featureValue=getAugFeatureName(fv.name.toString(),straddleFeatMap,PREFIX_BOUNDARY_STRADDLE);        featureValues.add(new FeatureValue<>((FV)featureValue,fv.value,fv.isDenseFeature));      }    }  }}  }
class C{  public static Future<?> submit(Runnable task){  if (THREAD_POOL.isShutdown() || THREAD_POOL.isTerminated()) {    THREAD_POOL=Executors.newCachedThreadPool(new CustomThreadFactory(new CustomExceptionHandler()));  }  return THREAD_POOL.submit(task);}  }
class C{  public FrameBuffer captured(){  if (enabled && hasCaptured) {    return composite.getResultBuffer();  }  return null;}  }
class C{  public static void inZoom(final IdocScanInterface ui){  loadImageZoom(ui,0.1f);}  }
class C{  public static <T>Instantiator<T> of(Class<T> type){  if (Modifier.isAbstract(type.getModifiers())) {    return new Instantiator<>(giveDynamicSubclass(type));  }  return new Instantiator<>(type);}  }
class C{  public void expandAcronym(final String acronym){  if (mAsyncTask != null)   mAsyncTask.cancel(true);  mAsyncTask=new GenericAsyncTask<>(this);  mAsyncTask.execute(acronym);}  }
class C{  public static boolean isOfflineMode(){  return getNetworkStatus().isOfflineMode();}  }
class C{  public int parseInto(ReadWritablePeriod period,String text,int position){  checkParser();  checkPeriod(period);  return getParser().parseInto(period,text,position,iLocale);}  }
class C{  public void calculateLogLikelihoods(BigDecimal[] partials,double[] frequencies,double[] outLogLikelihoods){  BigDecimal[] freqs=new BigDecimal[frequencies.length];  for (int i=0; i < freqs.length; i++) {    freqs[i]=new BigDecimal(frequencies[i],precision);  }  int v=0;  for (int k=0; k < patternCount; k++) {    BigDecimal sum=BigDecimal.ZERO;    for (int i=0; i < stateCount; i++) {      sum=sum.add(freqs[i].multiply(partials[v],precision),precision);      v++;    }    double scale=sum.scale();    double value=sum.unscaledValue().doubleValue();    outLogLikelihoods[k]=Math.log(value) - (scale * Math.log(10));  }}  }
class C{  ByteVector put12(final int b,final int s){  int length=this.length;  if (length + 3 > data.length) {    enlarge(3);  }  byte[] data=this.data;  data[length++]=(byte)b;  data[length++]=(byte)(s >>> 8);  data[length++]=(byte)s;  this.length=length;  return this;}  }
class C{  public CompanyApplicationObject(int id){  this.id=id;}  }
class C{  public void startTracking(){  if (isTracking) {    return;  }  if (this.session == null) {    addBroadcastReceiver();  }  if (getSession() != null) {    getSession().addCallback(callback);  }  isTracking=true;}  }
class C{  public void handleDiskCreation(DiskStore disk) throws ManagementException {  if (!isServiceInitialised("handleDiskCreation")) {    return;  }  DiskStoreMBeanBridge bridge=new DiskStoreMBeanBridge(disk);  DiskStoreMXBean diskStoreMBean=new DiskStoreMBean(bridge);  ObjectName diskStoreMBeanName=MBeanJMXAdapter.getDiskStoreMBeanName(cacheImpl.getDistributedSystem().getDistributedMember(),disk.getName());  ObjectName changedMBeanName=service.registerInternalMBean(diskStoreMBean,diskStoreMBeanName);  service.federate(changedMBeanName,DiskStoreMXBean.class,true);  Notification notification=new Notification(JMXNotificationType.DISK_STORE_CREATED,memberSource,SequenceNumber.next(),System.currentTimeMillis(),ManagementConstants.DISK_STORE_CREATED_PREFIX + disk.getName());  memberLevelNotifEmitter.sendNotification(notification);  memberMBeanBridge.addDiskStore(disk);}  }
class C{  public void transformValues(TIntFunction function){  byte[] states=_states;  int[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL) {      values[i]=function.execute(values[i]);    }  }}  }
class C{  @Override public AxisState draw(Graphics2D g2,double cursor,Rectangle2D plotArea,Rectangle2D dataArea,RectangleEdge edge,PlotRenderingInfo plotState){  if (!isVisible()) {    return new AxisState(cursor);  }  CategoryPlot plot=(CategoryPlot)getPlot();  Rectangle2D adjustedDataArea=new Rectangle2D.Double();  if (plot.getRenderer() instanceof Effect3D) {    Effect3D e3D=(Effect3D)plot.getRenderer();    double adjustedX=dataArea.getMinX();    double adjustedY=dataArea.getMinY();    double adjustedW=dataArea.getWidth() - e3D.getXOffset();    double adjustedH=dataArea.getHeight() - e3D.getYOffset();    if (edge == RectangleEdge.LEFT || edge == RectangleEdge.BOTTOM) {      adjustedY+=e3D.getYOffset();    } else     if (edge == RectangleEdge.RIGHT || edge == RectangleEdge.TOP) {      adjustedX+=e3D.getXOffset();    }    adjustedDataArea.setRect(adjustedX,adjustedY,adjustedW,adjustedH);  } else {    adjustedDataArea.setRect(dataArea);  }  if (isAxisLineVisible()) {    drawAxisLine(g2,cursor,adjustedDataArea,edge);  }  AxisState state=new AxisState(cursor);  if (isTickMarksVisible()) {    drawTickMarks(g2,cursor,adjustedDataArea,edge,state);  }  state=drawCategoryLabels(g2,plotArea,adjustedDataArea,edge,state,plotState);  if (getAttributedLabel() != null) {    state=drawAttributedLabel(getAttributedLabel(),g2,plotArea,dataArea,edge,state);  } else {    state=drawLabel(getLabel(),g2,plotArea,dataArea,edge,state);  }  return state;}  }
class C{  @Override public String toString(){  return toString(true,false);}  }
class C{  public Map<String,String> formData(String accessKey,String secretKey) throws NoSuchAlgorithmException, InvalidKeyException {  ArrayList<String[]> conditions=new ArrayList<>();  Map<String,String> formData=new HashMap<>();  conditions.add(new String[]{"eq","$bucket",this.bucketName});  formData.put("bucket",this.bucketName);  if (this.startsWith) {    conditions.add(new String[]{"starts-with","$key",this.objectName});    formData.put("key",this.objectName);  } else {    conditions.add(new String[]{"eq","$key",this.objectName});    formData.put("key",this.objectName);  }  if (this.contentType != null) {    conditions.add(new String[]{"eq","$Content-Type",this.contentType});    formData.put("Content-Type",this.contentType);  }  if (this.contentRangeStart > 0 && this.contentRangeEnd > 0) {    conditions.add(new String[]{"content-length-range",Long.toString(this.contentRangeStart),Long.toString(this.contentRangeEnd)});  }  conditions.add(new String[]{"eq","$x-amz-algorithm",ALGORITHM});  formData.put("x-amz-algorithm",ALGORITHM);  DateTime date=new DateTime();  String region=BucketRegionCache.INSTANCE.region(this.bucketName);  String credential=Signer.credential(accessKey,date,region);  conditions.add(new String[]{"eq","$x-amz-credential",credential});  formData.put("x-amz-credential",credential);  String amzDate=date.toString(DateFormat.AMZ_DATE_FORMAT);  conditions.add(new String[]{"eq","$x-amz-date",amzDate});  formData.put("x-amz-date",amzDate);  String policybase64=BaseEncoding.base64().encode(this.marshalJson(conditions));  String signature=Signer.postPresignV4(policybase64,secretKey,date,region);  formData.put("policy",policybase64);  formData.put("x-amz-signature",signature);  return formData;}  }
class C{  private int resolveAllFunctions(){  int counter=0;  for (  final INaviModule currentModule : m_targetModules) {    for (    final INaviFunction currentFunction : currentModule.getContent().getFunctionContainer().getFunctions()) {      final String originalName=currentFunction.getOriginalModulename();      if (!originalName.equalsIgnoreCase(currentModule.getConfiguration().getName()) && !originalName.equalsIgnoreCase("")) {        for (        final INaviModule targetModule : m_sourceModules) {          final String targetModuleName=targetModule.getConfiguration().getName();          if (targetModuleName.toUpperCase().contains(originalName.toUpperCase()) && CFunctionHelpers.isForwardableFunction(currentFunction) && (currentFunction.getForwardedFunctionModuleId() == 0)) {            String currentFunctionName=currentFunction.getName();            if (currentFunctionName.startsWith("__imp_")) {              currentFunctionName=currentFunctionName.substring("__imp_".length());            }            try {              final INaviFunction targetFunction=targetModule.getContent().getFunctionContainer().getFunction(currentFunctionName);              currentFunction.setForwardedFunction(targetFunction);              ++counter;            } catch (            final MaybeNullException exception) {            }catch (            final CouldntSaveDataException exception) {              CUtilityFunctions.logException(exception);            }          }        }      }    }  }  return counter;}  }
class C{  public synchronized void renameSchemaObject(Session session,SchemaObject obj,String newName){  obj.getSchema().rename(obj,newName);}  }
class C{  public void loadFile(File f) throws org.jdom2.JDOMException, java.io.IOException {  root=rootFromFile(f);}  }
class C{  public StorageCenter findStorageCenter(String ssn) throws StorageCenterAPIException {  StorageCenter[] scs=getStorageCenterInfo();  for (  StorageCenter sc : scs) {    if (ssn.equals(sc.scSerialNumber)) {      return sc;    }  }  throw new StorageCenterAPIException(String.format("Unable to locate Storage Center %s",ssn));}  }
class C{  public MajorityLabelsetUpdateableTest(String name){  super(name);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof XYLine3DRenderer)) {    return false;  }  XYLine3DRenderer that=(XYLine3DRenderer)obj;  if (this.xOffset != that.xOffset) {    return false;  }  if (this.yOffset != that.yOffset) {    return false;  }  if (!PaintUtilities.equal(this.wallPaint,that.wallPaint)) {    return false;  }  return super.equals(obj);}  }
class C{  private void updateParamsForAuth(String[] authNames,List<Pair> queryParams,Map<String,String> headerParams){  for (  String authName : authNames) {    Authentication auth=authentications.get(authName);    if (auth == null)     throw new RuntimeException("Authentication undefined: " + authName);    auth.applyToParams(queryParams,headerParams);  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  private static String initialise(Token currentToken,int[][] expectedTokenSequences,String[] tokenImage){  String eol=System.getProperty("line.separator","\n");  StringBuilder expected=new StringBuilder();  int maxSize=0;  for (int i=0; i < expectedTokenSequences.length; i++) {    if (maxSize < expectedTokenSequences[i].length) {      maxSize=expectedTokenSequences[i].length;    }    for (int j=0; j < expectedTokenSequences[i].length; j++) {      expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');    }    if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1] != 0) {      expected.append("...");    }    expected.append(eol).append("    ");  }  String retval="Encountered \"";  Token tok=currentToken.next;  for (int i=0; i < maxSize; i++) {    if (i != 0)     retval+=" ";    if (tok.kind == 0) {      retval+=tokenImage[0];      break;    }    retval+=" " + tokenImage[tok.kind];    retval+=" \"";    retval+=add_escapes(tok.image);    retval+=" \"";    tok=tok.next;  }  retval+="\" at line " + currentToken.next.beginLine + ", column "+ currentToken.next.beginColumn;  retval+="." + eol;  if (expectedTokenSequences.length == 1) {    retval+="Was expecting:" + eol + "    ";  } else {    retval+="Was expecting one of:" + eol + "    ";  }  retval+=expected.toString();  return retval;}  }
class C{  public static <E extends Comparable<? super E>,L extends List<E>>L sort(L list){  Collections.sort(list);  return list;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANG_1:    return ((InternalEList<?>)getCodeLang_1()).basicRemove(otherEnd,msgs);case UmplePackage.ANONYMOUS_CONCRETE_METHOD_DECLARATION_1__CODE_LANGS_1:  return ((InternalEList<?>)getCodeLangs_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private static void addVars(List<JCStatement> stats,Scope switchScope){  for (; stats.nonEmpty(); stats=stats.tail) {    JCTree stat=stats.head;    if (stat.hasTag(VARDEF))     switchScope.enter(((JCVariableDecl)stat).sym);  }}  }
class C{  private void initialize(){  time_low=0;  time_mid=0;  time_hi_and_version=0;  clock_seq_low=0;  clock_seq_hi_and_reserved=0;  for (int j=0; j < node.length; j++) {    node[j]=0x00;  }}  }
class C{  private void write(char ch) throws Exception {  buffer.write(result);  buffer.clear();  result.write(ch);}  }
class C{  int next() throws IOException, UnterminatedCommentException {  int c=get();  if (c == '/') {switch (peek()) {case '/':      for (; ; ) {        c=get();        if (c <= '\n') {          break;        }      }    break;case '*':  get();while (c != ' ') {switch (get()) {case '*':    if (peek() == '/') {      get();      c=' ';    }  break;case EOF:throw new UnterminatedCommentException();}}break;}}theY=theX;theX=c;return c;}  }
class C{  public static XObject eval(Node contextNode,String str,Node namespaceNode) throws TransformerException {  XPathContext xpathSupport=new XPathContext(false);  PrefixResolverDefault prefixResolver=new PrefixResolverDefault((namespaceNode.getNodeType() == Node.DOCUMENT_NODE) ? ((Document)namespaceNode).getDocumentElement() : namespaceNode);  XPath xpath=new XPath(str,null,prefixResolver,XPath.SELECT,null);  int ctxtNode=xpathSupport.getDTMHandleFromNode(contextNode);  return xpath.execute(xpathSupport,ctxtNode,prefixResolver);}  }
class C{  QName constructQNameFromString(Context cx,String localName){  if (localName == null)   throw new IllegalArgumentException();  String uri;  String prefix;  if ("*".equals(localName)) {    uri=null;    prefix=null;  } else {    Namespace ns=getDefaultNamespace(cx);    uri=ns.uri();    prefix=ns.prefix();  }  return new QName(this,uri,localName,prefix);}  }
class C{  @Override public String toSummaryString(){  return "Number of leaves: " + m_root.numLeaves() + "\n"+ "Size of the tree: "+ m_root.numNodes()+ "\n";}  }
class C{  public static Plane constructNormalizedYPlane(final Vector... planePoints){  double bestDistance=0.0;  Vector bestPoint=null;  for (  final Vector point : planePoints) {    final double pointDist=point.x * point.x + point.z * point.z;    if (pointDist > bestDistance) {      bestDistance=pointDist;      bestPoint=point;    }  }  return constructNormalizedYPlane(bestPoint.x,bestPoint.z,0.0);}  }
class C{  public boolean withPreloaded(){  return this == PRELOADED;}  }
class C{  @Override public String findToken(){  IRequestInfo iri=super.getCallbacks().getHelpers().analyzeRequest(super.getMessage());  List<IParameter> list=iri.getParameters();  String id="Not Found!";  for (  IParameter p : list) {    if (p.getName().equals("state")) {      id=p.getValue();      continue;    }    if (p.getName().equals(ID)) {      id=p.getValue();    }  }  if (id.equals("Not Found!")) {    String response=getHelpers().bytesToString(getMessage().getResponse());    Pattern pat=Pattern.compile("client_id=(.*?)\\\\u0026");    Matcher m=pat.matcher(response);    if (m.find()) {      id=m.group(1);    }  }  if (id.equals("Not Found!")) {    String request=getHelpers().bytesToString(getMessage().getRequest());    Pattern pat=Pattern.compile("state=(.*?)&");    Matcher m=pat.matcher(request);    if (m.find()) {      id=m.group(1);    }  }  return id;}  }
class C{  public InlineQueryResultPhoto.InlineQueryResultPhotoBuilder id(String id){  this.id=id;  return this;}  }
class C{  public boolean hasRel(){  return getRel() != null;}  }
class C{  public static void main(String[] args){  try {    ProgressDialog frame=new ProgressDialog();    frame.setVisible(true);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public JSONObject fetchRecentChanges(Date nextStartTime,int batchSize) throws RetryableException {  URI uri=uris.recentChanges(nextStartTime,batchSize);  log.debug("Polling for changes from {}",uri);  try {    return checkApi(getJson(new HttpGet(uri)));  } catch (  UnknownHostException|SocketException e) {    throw new RuntimeException(e);  }catch (  IOException|ParseException e) {    throw new RetryableException("Error fetching recent changes",e);  }}  }
class C{  public final void remove() throws UnsupportedOperationException {  throw new UnsupportedOperationException("Removing tokens is not supported.");}  }
class C{  public Document[] parseOldWordDoc(final DigestURL location,final String mimeType,final POIFSFileSystem poifs) throws Failure {  final Word6Extractor extractor;  try {    extractor=new Word6Extractor(poifs);  } catch (  final Exception e) {    throw new Parser.Failure("error in docParser, WordTextExtractorFactory: " + e.getMessage(),location);  }  final StringBuilder contents=new StringBuilder(80);  try {    contents.append(extractor.getText());  } catch (  final Exception e) {    throw new Parser.Failure("error in docParser, getText: " + e.getMessage(),location);  }  String title=(contents.length() > 240) ? contents.substring(0,240) : contents.toString().trim();  title=title.replaceAll("\r"," ").replaceAll("\n"," ").replaceAll("\t"," ").trim();  if (title.length() > 80)   title=title.substring(0,80);  int l=title.length();  while (true) {    title=title.replaceAll("  "," ");    if (title.length() == l)     break;    l=title.length();  }  final String keywords=extractor.getSummaryInformation().getKeywords();  final String[] keywlist;  if (keywords != null && !keywords.isEmpty()) {    keywlist=CommonPattern.COMMA.split(keywords);  } else {    keywlist=null;  }  final String subject=extractor.getSummaryInformation().getSubject();  List<String> descriptions=new ArrayList<String>();  if (subject != null && !subject.isEmpty())   descriptions.add(subject);  Document[] docs;  docs=new Document[]{new Document(location,mimeType,StandardCharsets.UTF_8.name(),this,null,keywlist,singleList(title),extractor.getSummaryInformation().getAuthor(),extractor.getDocSummaryInformation().getCompany(),null,descriptions,0.0d,0.0d,contents.toString(),null,null,null,false,extractor.getSummaryInformation().getLastSaveDateTime())};  return docs;}  }
class C{  SolrInputDocument processAdd(final String chain,final SolrInputDocument docIn) throws IOException {  SolrCore core=h.getCore();  UpdateRequestProcessorChain pc=core.getUpdateProcessingChain(chain);  assertNotNull("No Chain named: " + chain,pc);  SolrQueryResponse rsp=new SolrQueryResponse();  SolrQueryRequest req=new LocalSolrQueryRequest(core,new ModifiableSolrParams());  try {    SolrRequestInfo.setRequestInfo(new SolrRequestInfo(req,rsp));    AddUpdateCommand cmd=new AddUpdateCommand(req);    cmd.solrDoc=docIn;    UpdateRequestProcessor processor=pc.createProcessor(req,rsp);    processor.processAdd(cmd);    return cmd.solrDoc;  }  finally {    SolrRequestInfo.clearRequestInfo();    req.close();  }}  }
class C{  public boolean isRepeatFinished() throws IllegalAccessException {  return mRepeatFinished.getBoolean(mRepeatWrapper);}  }
class C{  protected void countObjectAccess(){  if (objaccess != null) {    objaccess.increment();  }}  }
class C{  public Map<Id<Node>,Path> calcLeastCostPath(final Node fromNode,final Set<Node> toNodes,final double startTime,final Person person){  Map<Id<Node>,Double> arrivalTimes=new HashMap<Id<Node>,Double>();  boolean stillSearching=true;  int finishedNodes=0;  augmentIterationId();  this.person=person;  if (this.pruneDeadEnds == true) {    for (    Node toNode : toNodes)     deadEndEntryNodes.add(getPreProcessData(toNode).getDeadEndEntryNode());  }  PseudoRemovePriorityQueue<Node> pendingNodes=new PseudoRemovePriorityQueue<Node>(500);  initFromNode(fromNode,startTime,pendingNodes);  while (stillSearching) {    Node outNode=pendingNodes.poll();    if (outNode == null) {      log.warn("No route was found from node " + fromNode.getId() + " to all nodes: "+ finishedNodes+ " of "+ toNodes.size());      stillSearching=false;    } else {      if (toNodes.contains(outNode)) {        DijkstraNodeData outData=getData(outNode);        arrivalTimes.put(outNode.getId(),outData.getTime());        finishedNodes++;      }      relaxNode(outNode,pendingNodes);      if (finishedNodes == toNodes.size())       stillSearching=false;    }  }  return constructPaths(fromNode,toNodes,startTime,arrivalTimes);}  }
class C{  public Matrix dhtRows(){  DenseDoubleMatrix2D dm=new DenseDoubleMatrix2D(getArray());  dm.dhtRows();  return new Matrix(dm.toArray());}  }
class C{  public RemoveMissingValueCasesWrapper(DataWrapper data,Parameters params){  if (data == null) {    throw new NullPointerException("The givan data must not be null");  }  DataModel model=data.getSelectedDataModel();  if ((!(model instanceof DataSet))) {    throw new IllegalArgumentException("Data must be tabular");  }  RemoveMissingCasesDataFilter filter=new RemoveMissingCasesDataFilter();  this.setDataModel(filter.filter((DataSet)model));  this.setSourceGraph(data.getSourceGraph());  LogDataUtils.logDataModelList("Parent data in which cases with missing values have been removed",getDataModelList());}  }
class C{  void visitSubroutine(final Label JSR,final long id,final int nbSubroutines){  Label stack=this;  while (stack != null) {    Label l=stack;    stack=l.next;    l.next=null;    if (JSR != null) {      if ((l.status & VISITED2) != 0) {        continue;      }      l.status|=VISITED2;      if ((l.status & RET) != 0) {        if (!l.inSameSubroutine(JSR)) {          Edge e=new Edge();          e.info=l.inputStackTop;          e.successor=JSR.successors.successor;          e.next=l.successors;          l.successors=e;        }      }    } else {      if (l.inSubroutine(id)) {        continue;      }      l.addToSubroutine(id,nbSubroutines);    }    Edge e=l.successors;    while (e != null) {      if ((l.status & Label.JSR) == 0 || e != l.successors.next) {        if (e.successor.next == null) {          e.successor.next=stack;          stack=e.successor;        }      }      e=e.next;    }  }}  }
class C{  protected void drawHole(Canvas c){  if (mChart.isDrawHoleEnabled()) {    float transparentCircleRadius=mChart.getTransparentCircleRadius();    float holeRadius=mChart.getHoleRadius();    float radius=mChart.getRadius();    PointF center=mChart.getCenterCircleBox();    if (transparentCircleRadius > holeRadius) {      int alpha=mTransparentCirclePaint.getAlpha();      mTransparentCirclePaint.setAlpha((int)((float)alpha * mAnimator.getPhaseX() * mAnimator.getPhaseY()));      mBitmapCanvas.drawCircle(center.x,center.y,radius / 100 * transparentCircleRadius,mTransparentCirclePaint);      mTransparentCirclePaint.setAlpha(alpha);    }    mBitmapCanvas.drawCircle(center.x,center.y,radius / 100 * holeRadius,mHolePaint);  }}  }
class C{  public void init() throws ServletException {}  }
class C{  @Override public int parse(char[] buf,int start,int end,T data){  int left_hit=left.parse(buf,start,end,data);  if (left_hit != NO_MATCH) {    int right_hit=right.parse(buf,start + left_hit,end,data);    if (right_hit != NO_MATCH) {      return left_hit + right_hit;    }  }  return NO_MATCH;}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  boolean forceAllocate(long size){  final AllocationOutcome outcome=allocate(size,true,true);  return outcome.isOk();}  }
class C{  @Before public void copyFiles() throws IOException {  URL largeXMLUrl=this.getClass().getResource("/" + CATALOG_LARGE_XML_FILE_NAME);  URL smallXMLUrl=this.getClass().getResource("/" + CATALOG_SMALL_XML_FILE_NAME);  FileUtils.copyFile(new File(largeXMLUrl.getFile()),new File(sourceFolder,CATALOG_LARGE_XML_FILE_NAME));  FileUtils.copyFile(new File(smallXMLUrl.getFile()),new File(sourceFolder,CATALOG_SMALL_XML_FILE_NAME));}  }
class C{  private boolean useSpheroidAtmosphere(IGame game,Entity en){  if (!(en instanceof Aero)) {    return false;  }  if (game.getBoard().inSpace()) {    return false;  }  if (!((Aero)en).isSpheroid() && !game.getPlanetaryConditions().isVacuum()) {    return false;  }  return en.isAirborne();}  }
class C{  public String status(final ObjectName namePattern,final String pidAttribute,final String statusMethod,final String[] attributes,final Object[] values) throws ConnectionFailedException, IOException, MBeanInvocationFailedException, PidUnavailableException {  return invokeOperationOnTargetMBean(namePattern,pidAttribute,statusMethod,attributes,values).toString();}  }
class C{  @Override public boolean onCreate(){  Log.d(TAG,"onCreate, current thread:" + Thread.currentThread().getName());  mContext=getContext();  initProviderData();  return true;}  }
class C{  public void actionPerformed(ActionEvent e){  JTextComponent target=getTextComponent(e);  if ((target != null) && (e != null)) {    if ((!target.isEditable()) || (!target.isEnabled())) {      UIManager.getLookAndFeel().provideErrorFeedback(target);      return;    }    String content=e.getActionCommand();    if (content != null) {      target.replaceSelection(content);    } else {      UIManager.getLookAndFeel().provideErrorFeedback(target);    }  }}  }
class C{  private String upload(HttpServletRequest request) throws ServletException, IOException {  final int MAX_KB=250;  int formDataLength=request.getContentLength();  String contentType=request.getContentType();  int index=contentType.lastIndexOf('=');  String boundary=contentType.substring(index + 1);  log.fine(formDataLength + " - " + boundary);  int sizeKB=formDataLength / 1024;  if (sizeKB > MAX_KB) {    log.warning("File too large " + sizeKB);    return "File too large = " + sizeKB + "kB - Allowed = "+ MAX_KB+ "kB";  }  DataInputStream in=new DataInputStream(request.getInputStream());  byte[] data=new byte[formDataLength];  int bytesRead=0;  int totalBytesRead=0;  while (totalBytesRead < formDataLength) {    bytesRead=in.read(data,totalBytesRead,formDataLength);    totalBytesRead+=bytesRead;  }  m_requestDataString=new String(data,"ISO-8859-1");  if (m_requestDataString.length() != data.length)   return "Internal conversion Error";  index=m_requestDataString.indexOf("filename=\"");  m_fileName=m_requestDataString.substring(index + 10);  index=m_fileName.indexOf('"');  if (index < 1)   return "No File Name";  m_fileName=m_fileName.substring(0,index);  log.fine("upload - " + m_fileName);  int posStart=m_requestDataString.indexOf("filename=\"");  posStart=m_requestDataString.indexOf("\n",posStart) + 1;  posStart=m_requestDataString.indexOf("\n",posStart) + 1;  posStart=m_requestDataString.indexOf("\n",posStart) + 1;  int posEnd=m_requestDataString.indexOf(boundary,posStart) - 4;  int length=posEnd - posStart;  log.fine("uploadFile - Start=" + posStart + ", End="+ posEnd+ ", Length="+ length);  m_data=new byte[length];  for (int i=0; i < length; i++)   m_data[i]=data[posStart + i];  return null;}  }
class C{  private void processPi(Instruction s){  Register result=GuardedUnary.getResult(s).getRegister();  ValueGraphVertex v=findOrCreateVertex(result);  Operand val=GuardedUnary.getVal(s);  val=bypassMoves(val);  v.copyVertex(findOrCreateVertex(val));}  }
class C{  synchronized protected void throttleTimeout(){  jmri.InstanceManager.throttleManagerInstance().cancelThrottleRequest(profileAddress,profileIsLong,this);  state=ProfileState.IDLE;  log.error("Timeout waiting for throttle");}  }
class C{  private void downloadUpdateProp(final boolean initialDownload){  if (bootProp != null) {    serverFolder=bootProp.getProperty("server.folder-1.20",ClientGameConfiguration.get("UPDATE_SERVER_FOLDER")) + "/";    String updatePropertiesFile=bootProp.getProperty("server.update-prop-1.20",serverFolder + "update-1.20.properties");    final HttpClient httpClient=new HttpClient(updatePropertiesFile,initialDownload);    updateProp=httpClient.fetchProperties();    if (updateProp != null && updateProp.containsKey("init.version")) {      return;    }  }  String updatePropertiesFile=ClientGameConfiguration.get("UPDATE_SERVER_FOLDER") + "/update-1.20.properties";  HttpClient httpClient=new HttpClient(updatePropertiesFile,initialDownload);  updateProp=httpClient.fetchProperties();  if (updateProp != null && updateProp.containsKey("init.version")) {    return;  }  updatePropertiesFile=ClientGameConfiguration.get("UPDATE_SERVER_FOLDER_FALLBACK") + "/update-1.20.properties";  httpClient=new HttpClient(updatePropertiesFile,initialDownload);  updateProp=httpClient.fetchProperties();}  }
class C{  @Override public void flush() throws IOException {  checkState(timeSeriesBuffer.size() <= 200,FLUSH_OVERFLOW_ERROR);  if (timeSeriesBuffer.isEmpty()) {    logger.fine("Attempted to flush with no pending points, doing nothing");    return;  }  ImmutableList<TimeSeries> timeSeriesList=ImmutableList.copyOf(timeSeriesBuffer);  timeSeriesBuffer.clear();  CreateTimeSeriesRequest request=new CreateTimeSeriesRequest().setTimeSeries(timeSeriesList);  rateLimiter.acquire();  monitoringClient.projects().timeSeries().create(projectResource,request).execute();  for (  TimeSeries timeSeries : timeSeriesList) {    pushedPoints.increment(timeSeries.getMetricKind(),timeSeries.getValueType());  }  logger.info(String.format("Flushed %d metrics to Stackdriver",timeSeriesList.size()));}  }
class C{  public void addUncheckedStandardDefaults(Iterable<? extends AnnotationMirror> tops,Iterable<? extends AnnotationMirror> bottoms){  for (  TypeUseLocation loc : standardUncheckedDefaultsTop) {    for (    AnnotationMirror top : tops) {      if (!conflictsWithExistingDefaults(uncheckedCodeDefaults,top,loc)) {        addUncheckedCodeDefault(top,loc);      }    }  }  for (  TypeUseLocation loc : standardUncheckedDefaultsBottom) {    for (    AnnotationMirror bottom : bottoms) {      if (!conflictsWithExistingDefaults(uncheckedCodeDefaults,bottom,loc)) {        addUncheckedCodeDefault(bottom,loc);      }    }  }}  }
class C{  public void popSAXLocator(){  m_saxLocations.pop();}  }
class C{  public static String formattingFinishedPercentage(final RolloutGroup rolloutGroup,final float finishedPercentage){  float tmpFinishedPercentage=0;switch (rolloutGroup.getStatus()) {case READY:case SCHEDULED:case ERROR:    tmpFinishedPercentage=0.0F;  break;case FINISHED:tmpFinishedPercentage=100.0F;break;case RUNNING:tmpFinishedPercentage=finishedPercentage;break;default :break;}return String.format("%.1f",tmpFinishedPercentage);}  }
class C{  public static void execute(ExecutablePool pool,Object[] holders,EventID eventId){  AbstractOp op=new RegisterInstantiatorsOpImpl(holders,eventId);  pool.execute(op,Integer.MAX_VALUE);}  }
class C{  public void updateBitmapShader(){  if (image == null)   return;  shader=new BitmapShader(image,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);  if (canvasSize != image.getWidth() || canvasSize != image.getHeight()) {    Matrix matrix=new Matrix();    float scale=(float)canvasSize / (float)image.getWidth();    matrix.setScale(scale,scale);    shader.setLocalMatrix(matrix);  }}  }
class C{  public void createPictScenario11() throws Exception {  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 00:00:00"));  String supplierAdminId="Pict11Supplier";  VOOrganization supplier=orgSetup.createOrganization(basicSetup.getPlatformOperatorUserKey(),supplierAdminId,"Pict11SupplierOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_DE,OrganizationRoleType.TECHNOLOGY_PROVIDER,OrganizationRoleType.SUPPLIER);  VOUser supplierAdmin=orgSetup.getUser(supplierAdminId,true);  paymentSetup.createPaymentForSupplier(basicSetup.getPlatformOperatorUserKey(),supplierAdmin.getKey(),supplier);  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  serviceSetup.importTechnicalServices(BaseAdmUmTest.TECHNICAL_SERVICE_EXAMPLE2_XML);  VOTechnicalService example2TechService=serviceSetup.getTechnicalService(VOTechServiceFactory.TECH_SERVICE_EXAMPLE2_ID);  setCutOffDay(supplierAdmin.getKey(),1);  String customerAdminId="Pict11DiscountedCustomer";  VOOrganization customer=orgSetup.registerCustomer("Pict11DiscountedCustomerOrg",TestOrganizationSetup.ORGANIZATION_DOMICILE_UK,customerAdminId,supplierMarketplace.getMarketplaceId(),supplier.getOrganizationId());  VOUser customerAdmin=orgSetup.getUser(customerAdminId,true);  orgSetup.updateCustomerDiscount(customer,new BigDecimal("10.00"),DateTimeHandling.calculateMillis("2013-08-02 00:00:00"),DateTimeHandling.calculateMillis("2013-08-12 00:00:00"));  orgSetup.saveAllVats(supplierAdmin.getKey(),VOVatRateFactory.newVOVatRate(new BigDecimal("13.00")),Arrays.asList(VOVatRateFactory.newVOCountryVatRate(new BigDecimal("20.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_UK),VOVatRateFactory.newVOCountryVatRate(new BigDecimal("19.00"),TestOrganizationSetup.ORGANIZATION_DOMICILE_DE)),null);  orgSetup.createMarketingPermission(supplierAdmin.getKey(),supplier.getOrganizationId(),example2TechService);  VOServiceDetails unitServTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT11_UNIT_WEEK_SERVICE",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplierMarketplace);  VOServiceDetails serviceUnitDetails=serviceSetup.savePriceModelForCustomer(unitServTemplate,TestPriceModel.EXAMPLE_PICT11_UNIT_WEEK,customer);  VOServiceDetails freeTemplate=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT11_FREE",TestService.EXAMPLE2,TestPriceModel.EXAMPLE_PICT11_UNIT_WEEK,example2TechService,supplierMarketplace);  VOServiceDetails serviceFreeDetails=serviceSetup.savePriceModelForCustomer(freeTemplate,TestPriceModel.FREE,customer);  VOServiceDetails unitServTemplate2=serviceSetup.createAndPublishMarketableService(supplierAdmin.getKey(),"PICT11_2_UNIT_MONTH_SERVICE",TestService.EXAMPLE2,TestPriceModel.FREE,example2TechService,supplierMarketplace);  VOServiceDetails serviceUnitDetails2=serviceSetup.savePriceModelForCustomer(unitServTemplate2,TestPriceModel.EXAMPLE_PICT11_2_UNIT_WEEK,customer);  unitServTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),unitServTemplate,freeTemplate);  freeTemplate=serviceSetup.registerCompatibleServices(supplierAdmin.getKey(),freeTemplate,unitServTemplate2);  serviceUnitDetails=serviceSetup.activateMarketableService(serviceUnitDetails);  serviceFreeDetails=serviceSetup.activateMarketableService(serviceFreeDetails);  serviceUnitDetails2=serviceSetup.activateMarketableService(serviceUnitDetails2);  VORoleDefinition role=VOServiceFactory.getRole(serviceUnitDetails,"USER");  serviceUnitDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceUnitDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("PICT_TEST_11",serviceUnitDetails,customerAdmin,role);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-01 01:00:00"),"BOOLEAN_PARAMETER","true");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long roleChangeTime=DateTimeHandling.calculateMillis("2013-08-01 02:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(roleChangeTime);  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceUnitDetails,"ADMIN"),subDetails.getSubscriptionId());  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 01:00:00"));  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails.setSubscriptionId("PICT_TEST_11" + "_SubID2");  subDetails=subscrSetup.modifySubscription(subDetails,null);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 02:00:00"));  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  paymentSetup.deleteCustomerPaymentTypes(customer);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-01 03:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-12 12:00:00"));  paymentSetup.reassignCustomerPaymentTypes(customer);  subDetails=subscrSetup.getSubscriptionDetails(customerAdmin.getKey(),subDetails.getSubscriptionId());  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER,ROLE_TECHNOLOGY_MANAGER);  subscrSetup.recordEventForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-12 12:30:00"),"FILE_UPLOAD",10);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-13 00:00:00"),"BOOLEAN_PARAMETER","false");  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,DateTimeHandling.calculateMillis("2013-08-14 00:00:00"),"BOOLEAN_PARAMETER","true");  container.login(supplierAdmin.getKey(),ROLE_SERVICE_MANAGER);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 01:00:00"));  VOPriceModel newSubPriceModel=VOPriceModelFactory.modifyPriceModelPeriodFee(subDetails.getPriceModel(),new BigDecimal("4.00"));  subscrSetup.savePriceModelForSubscription(supplierAdmin.getKey(),subDetails,newSubPriceModel,customer);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-14 02:00:00"));  subDetails=subscrSetup.modifyUserRole(subDetails.getUsageLicenses().get(0),VOServiceFactory.getRole(serviceUnitDetails,"USER"),subDetails.getSubscriptionId());  serviceFreeDetails=serviceSetup.getServiceDetails(supplierAdmin.getKey(),serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-15 00:00:00"));  VOSubscriptionDetails upgradedSubDetails=subscrSetup.upgradeSubscription(subDetails,serviceFreeDetails);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  BillingIntegrationTestBase.setDateFactoryInstance(DateTimeHandling.calculateMillis("2013-08-20 00:00:00"));  VOSubscriptionDetails upgradedSubDetails2=subscrSetup.upgradeSubscription(upgradedSubDetails,serviceUnitDetails2);  container.login(customerAdmin.getKey(),ROLE_ORGANIZATION_ADMIN);  long userterminateTime=DateTimeHandling.calculateMillis("2013-08-22 00:00:00");  BillingIntegrationTestBase.setDateFactoryInstance(userterminateTime);  subscrSetup.unsubscribeToService(upgradedSubDetails2.getSubscriptionId());  resetCutOffDay(supplierAdmin.getKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_11",subDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_11",upgradedSubDetails);  BillingIntegrationTestBase.updateSubscriptionListForTests("PICT_TEST_11",upgradedSubDetails2);  BillingIntegrationTestBase.updateCustomerListForTests("PICT_TEST_11",customer);}  }
class C{  private static void sendToPlayer(IPigSpawner pigSpawner,EntityPlayerMP player,EnumHand hand){  if (pigSpawner instanceof IPigSpawnerFinite) {    final IPigSpawnerFinite pigSpawnerFinite=(IPigSpawnerFinite)pigSpawner;    Logger.debug(LOG_MARKER,DebugUtil.getStackTrace(10),"Sending finite pig spawner to client. Player: %s - NumPigs: %d",player.getDisplayNameString(),pigSpawnerFinite.getNumPigs());    TestMod3.network.sendTo(new MessageUpdateHeldPigSpawnerFinite(pigSpawnerFinite,hand),player);  }}  }
class C{  public List<Integer> emit(List<Object> tuple){  return emit(tuple,null);}  }
class C{  @Override public void scan(AccessProfile accessProfile) throws BaseCollectionException {  _logger.info("Scanning started for provider: {}",accessProfile.getSystemId());  StorageProvider storageProvider=_dbClient.queryObject(StorageProvider.class,accessProfile.getSystemId());  String username=storageProvider.getUserName();  String password=storageProvider.getPassword();  String hostName=storageProvider.getIPAddress();  StringMap providerKeys=storageProvider.getKeys();  if (providerKeys == null) {    providerKeys=new StringMap();  }  updateKeyInProvider(providerKeys,CinderConstants.KEY_CINDER_HOST_NAME,hostName);  Integer portNumber=storageProvider.getPortNumber();  ArrayList<Section> sections=new ArrayList<Section>();  String volume_driver="";  String auth_strategy="unknown";  ChannelSftp sftp=null;  Session session=null;  try {    JSch jsch=new JSch();    session=jsch.getSession(username,hostName,portNumber);    session.setPassword(password);    Hashtable<String,String> config=new Hashtable<String,String>();    config.put("StrictHostKeyChecking","no");    session.setConfig(config);    session.connect(timeout);    _logger.debug("Session Connected...");    Channel channel=session.openChannel("sftp");    sftp=(ChannelSftp)channel;    InputStream ins;    sftp.connect(connectTimeout);    if (sftp.isConnected()) {      _logger.debug("SFTP Connected");      ins=sftp.get(CONFFILE);      BufferedReader b=new BufferedReader(new InputStreamReader(ins));      int next_section_index=0;      String section_title="";      Boolean auth_section=false;      while (!sftp.isEOF()) {        String line=b.readLine();        if (line == null) {          _logger.debug("End of buffer -- break");          break;        }        if (isComment(line)) {          continue;        }        if (isSection(line)) {          section_title=line.substring(line.indexOf('[') + 1,line.indexOf(']'));          Section section=new Section();          section.index=next_section_index;          section.title=section_title;          sections.add(section);          next_section_index++;          _logger.debug("Section {}: Title: {}",section.index,section.title);          auth_section=section_title.startsWith(auth_strategy);          continue;        }        if (!line.contains("=")) {          continue;        }        String[] splits=line.split("=");        if (splits.length == 2) {          String parameter=splits[0].trim();          String value=splits[1].trim();          if (auth_section) {            if (parameter.equalsIgnoreCase("admin_user") || parameter.equalsIgnoreCase("username")) {              updateKeyInProvider(providerKeys,CinderConstants.KEY_CINDER_REST_USER,value);              _logger.debug("REST user name = {}",value);            } else             if (parameter.equalsIgnoreCase("admin_password") || parameter.equalsIgnoreCase("password")) {              updateKeyInProvider(providerKeys,CinderConstants.KEY_CINDER_REST_PASSWORD,value);              _logger.debug("REST password = {}",value);            } else             if (parameter.equalsIgnoreCase("admin_tenant_name") || parameter.equalsIgnoreCase("project_name")) {              updateKeyInProvider(providerKeys,CinderConstants.KEY_CINDER_TENANT_NAME,value);              _logger.debug("Tenant name = {}",value);            } else             if (parameter.equalsIgnoreCase("auth_uri")) {              updateKeyInProvider(providerKeys,CinderConstants.KEY_CINDER_REST_URI_BASE,value);              _logger.info("REST uri = {}",value);            }          } else {            _logger.debug("Storage section: parameter = {},  value = {}",parameter,value);            if (parameter.equalsIgnoreCase("auth_strategy")) {              auth_strategy=value.trim();              _logger.info("Auth strategy = {}",auth_strategy);            } else             if (parameter.equalsIgnoreCase("volume_driver")) {              volume_driver=value.trim();              sections.get(next_section_index - 1).volume_driver=volume_driver;              _logger.debug("Volume driver = {}",volume_driver);            } else             if (parameter.equalsIgnoreCase("volume_backend_name")) {              String volume_backend_name=value.trim();              _logger.debug("Volume backend_name = {}",volume_backend_name);              sections.get(next_section_index - 1).volume_backend_name=volume_backend_name;            }          }        }      }      b.close();    }    storageProvider.setConnectionStatus(ConnectionStatus.CONNECTED.name());  } catch (  Exception e) {    storageProvider.setConnectionStatus(ConnectionStatus.NOTCONNECTED.name());    _logger.error("Exception occurred while scanning provider {}",accessProfile.getSystemId(),e);  } finally {    fillStorageSystemCache(accessProfile,sections);    if (storageProvider.getKeys() == null) {      storageProvider.setKeys(providerKeys);    }    _dbClient.persistObject(storageProvider);    if (sftp != null) {      sftp.disconnect();    }    if (session != null) {      session.disconnect();    }  }  _logger.info("Scanning ended for provider: {}",accessProfile.getSystemId());}  }
class C{  @Override public Object createFromString(EDataType eDataType,String initialValue){switch (eDataType.getClassifierID()) {case TypesPackage.DIRECTION:    return createDirectionFromString(eDataType,initialValue);default :  throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");}}  }
class C{  protected SpiderController(Spider spider,List<SpiderParser> customParsers){  super();  this.spider=spider;  this.fetchFilters=new LinkedList<>();  this.parseFilters=new LinkedList<>();  this.visitedGet=new HashSet<>();  this.visitedPost=new HashMap<String,ArrayList<String>>();  prepareDefaultParsers();  for (  SpiderParser parser : customParsers) {    this.addSpiderParser(parser);  }}  }
class C{  public ChoiceData(S source,S target,Guard<S,E> guard){  this.source=source;  this.target=target;  this.guard=guard;}  }
class C{  public void unlockDevice(org.wso2.emm.agent.beans.Operation operation){  if (getApplicationManager().isPackageInstalled(Constants.SERVICE_PACKAGE_NAME)) {    boolean isLocked=Preference.getBoolean(context,Constants.IS_LOCKED);    if (isLocked) {      Preference.putBoolean(context,Constants.IS_LOCKED,false);      CommonUtils.callSystemApp(getContext(),Constants.Operation.DEVICE_UNLOCK,null,null);    }    if (Constants.DEBUG_MODE_ENABLED) {      Log.d(TAG,"Device unlocked");    }    operation.setStatus(resources.getString(R.string.operation_value_completed));  } else {    operation.setStatus(resources.getString(R.string.operation_value_error));    operation.setOperationResponse("System service is not available.");    Log.e(TAG,"System service is not available");  }  resultBuilder.build(operation);}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public boolean localStorePrimaryOnly(){  return locStorePrimaryOnly;}  }
class C{  private void populateComments(TaskRepository repository,List<ReviewCommentResult> comments,TaskData taskData,long reviewTimestamp){  int commentCount=1;  long maxCommentTimestamp=reviewTimestamp;  for (  ReviewCommentResult comment : comments) {    TaskCommentMapper commentMapper=new TaskCommentMapper();    ReviewComment commentData=comment.getComment();    if (commentData.getAuthor() != null) {      commentMapper.setAuthor(createPerson(commentData.getAuthor(),repository));    }    Date timestamp=new Date(commentData.getTimestamp() * 1000);    commentMapper.setCreationDate(timestamp);    maxCommentTimestamp=Math.max(maxCommentTimestamp,commentData.getTimestamp());    if (commentData.getDescription() != null) {      commentMapper.setText(commentData.getDescription());    } else {      commentMapper.setText("");    }    commentMapper.setCommentId("" + commentCount);    commentMapper.setNumber(commentCount);    TaskAttribute commentAttribute=taskData.getRoot().createAttribute(TaskAttribute.PREFIX_COMMENT + commentCount);    if (commentData.getResolved() != null) {      TaskAttribute resolvedAttribute=commentAttribute.createAttribute(AppraiseReviewTaskSchema.COMMENT_RESOLVED_ATTRIBUTE);      setAttributeValue(resolvedAttribute,Boolean.toString(commentData.getResolved()));    }    TaskAttribute idAttribute=commentAttribute.createAttribute(AppraiseReviewTaskSchema.COMMENT_ID_ATTRIBUTE);    setAttributeValue(idAttribute,comment.getId());    if (commentData.getParent() != null) {      TaskAttribute parentAttribute=commentAttribute.createAttribute(AppraiseReviewTaskSchema.COMMENT_PARENT_ATTRIBUTE);      setAttributeValue(parentAttribute,commentData.getParent());    }    if (commentData.getLocation() != null) {      TaskAttribute locationFileAttr=commentAttribute.createAttribute(AppraiseReviewTaskSchema.COMMENT_LOCATION_FILE);      setAttributeValue(locationFileAttr,commentData.getLocation().getPath());      TaskAttribute locationLineAttr=commentAttribute.createAttribute(AppraiseReviewTaskSchema.COMMENT_LOCATION_LINE);      if (commentData.getLocation().getRange() != null) {        setAttributeValue(locationLineAttr,"" + commentData.getLocation().getRange().getStartLine());      }      TaskAttribute locationCommitAttr=commentAttribute.createAttribute(AppraiseReviewTaskSchema.COMMENT_LOCATION_COMMIT);      setAttributeValue(locationCommitAttr,commentData.getLocation().getCommit());    }    commentMapper.applyTo(commentAttribute);    commentCount++;  }  Date date=new Date(maxCommentTimestamp * 1000);  setAttributeValue(taskData,schema.MODIFIED,Long.toString(date.getTime()));}  }
class C{  private void processUnreleasedEntityLocks(final State current){  if (current.nextPageLink == null) {    finishTask(current);    return;  }  Operation getFirstPageOfEntityLocks=Operation.createGet(UriUtils.buildUri(getHost(),current.nextPageLink));  getFirstPageOfEntityLocks.setCompletion(null).sendWith(this);}  }
class C{  public void doneWithParameters(){  if (info.parameterCount == VAR_ARGS) {    int len=varArgs.size();    checkParameterCount(len);    args=new Expression[len];    varArgs.toArray(args);    varArgs=null;  } else {    int len=args.length;    if (len > 0 && args[len - 1] == null) {      throw DbException.get(ErrorCode.INVALID_PARAMETER_COUNT_2,info.name,"" + len);    }  }}  }
class C{  public SendMessageResult sendMessage(String queueUrl,String messageBody) throws AmazonServiceException, AmazonClientException {  return amazonSqsToBeExtended.sendMessage(queueUrl,messageBody);}  }
class C{  public void search(SearchEvent theSearch){  if (theSearch != null) {    if (!theSearch.query.isLocal() && !MemoryControl.shortStatus()) {      Set<AbstractFederateSearchConnector> picklist=getBest(theSearch.getQuery());      for (      AbstractFederateSearchConnector fsc : picklist) {        fsc.search(theSearch);      }    }  }}  }
class C{  public final double pctCorrect(){  return m_delegate.pctCorrect();}  }
class C{  private static boolean isDelimiter(char ch,char[] delimiters){  if (delimiters == null) {    return Character.isWhitespace(ch);  }  for (int i=0, isize=delimiters.length; i < isize; i++) {    if (ch == delimiters[i]) {      return true;    }  }  return false;}  }
class C{  public static void run(String scheduleFile,String networkFile,String crs,String outputFolder){  TransitSchedule schedule=ScheduleTools.readTransitSchedule(scheduleFile);  Network network=NetworkTools.readNetwork(networkFile);  ScheduleShapeFileWriter s2s=new ScheduleShapeFileWriter(schedule,network,crs);  s2s.routes2Polylines(outputFolder + "transitRoutes.shp");  s2s.stopFacilities2Shapes(outputFolder + "stopFacilities.shp","refLinks.shp");}  }
class C{  public SessionWrapper(Session session){  if (session == null) {    throw new NullPointerException("Session must not be null.");  }  this.session=session;  this.session.addSessionListener(getSessionHandler());}  }
class C{  public String connectString(){  return server.getConnectString();}  }
class C{  private StringBuilder appendTaxonName(Taxon taxon,StringBuilder builder){  String name=taxon.getId();  if (!name.matches(SPECIAL_CHARACTERS_REGEX)) {    name=name.replace("\'","\'\'");    builder.append("\'").append(name).append("\'");    return builder;  }  return builder.append(name);}  }
class C{  public void error(Object source,long where,String err,Object arg1,Object arg2,Object arg3){  env.error(source,where,err,arg1,arg2,arg3);}  }
class C{  public void load(){}  }
class C{  public MethodNotSupportedException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private static List<INaviEdge> collectEdges(final INaviView view,final Quad<Integer,IAddress,Integer,IAddress> refEdgeData) throws MaybeNullException {  final List<INaviEdge> edgelist=new ArrayList<INaviEdge>();  if (view.isLoaded()) {    for (    final INaviEdge otherEdge : view.getGraph().getEdges()) {      final Quad<Integer,IAddress,Integer,IAddress> edgeData=getEdgeData(otherEdge);      if (isEdgeDataValid(edgeData) && edgeData.equals(refEdgeData)) {        edgelist.add(otherEdge);      }    }  }  return edgelist;}  }
class C{  public Key max(){  if (isEmpty())   throw new NoSuchElementException("Priority queue underflow");  return pq[1];}  }
class C{  public JSONTokener(String s){  this(new StringReader(s));}  }
class C{  @Override public int compareTo(CfId<Long> other){  if (type < other.getType()) {    return -1;  } else   if (type > other.getType()) {    return 1;  } else   if (id == null && other.getId() != null) {    return 1;  } else {    return id.compareTo(other.getId());  }}  }
class C{  @SuppressWarnings("signedness") public static String toUnsignedString(@Unsigned byte b){  return Long.toString(toUnsignedLong(b));}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  private int nextIndex(Collection<Integer> started){  assert started.contains(0);  for (int i=1; i < 10000; i++) {    if (!started.contains(i))     return i;  }  throw new IllegalStateException();}  }
class C{  @Override public Data execute(Data in1,double in2) throws DMLRuntimeException {  CM_COV_Object cm1=(CM_COV_Object)in1;  if (cm1.isCMAllZeros()) {    cm1.w=1;    cm1.mean.set(in2,0);    cm1.m2.set(0,0);    cm1.m3.set(0,0);    cm1.m4.set(0,0);    return cm1;  }switch (_type) {case COUNT:{      cm1.w=cm1.w + 1;      break;    }case MEAN:{    double w=cm1.w + 1;    double d=in2 - cm1.mean._sum;    cm1.mean=(KahanObject)_plus.execute(cm1.mean,d / w);    cm1.w=w;    break;  }case CM2:{  double w=cm1.w + 1;  double d=in2 - cm1.mean._sum;  cm1.mean=(KahanObject)_plus.execute(cm1.mean,d / w);  double t1=cm1.w / w * d;  double lt1=t1 * d;  _buff2.set(cm1.m2);  _buff2=(KahanObject)_plus.execute(_buff2,lt1);  cm1.m2.set(_buff2);  cm1.w=w;  break;}case CM3:{double w=cm1.w + 1;double d=in2 - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,d / w);double t1=cm1.w / w * d;double t2=-1 / cm1.w;double lt1=t1 * d;double lt2=Math.pow(t1,3) * (1.0 - Math.pow(t2,2));double f2=1.0 / w;_buff2.set(cm1.m2);_buff2=(KahanObject)_plus.execute(_buff2,lt1);_buff3.set(cm1.m3);_buff3=(KahanObject)_plus.execute(_buff3,lt2 - 3 * cm1.m2._sum * f2* d);cm1.m2.set(_buff2);cm1.m3.set(_buff3);cm1.w=w;break;}case CM4:{double w=cm1.w + 1;double d=in2 - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,d / w);double t1=cm1.w / w * d;double t2=-1 / cm1.w;double lt1=t1 * d;double lt2=Math.pow(t1,3) * (1.0 - Math.pow(t2,2));double lt3=Math.pow(t1,4) * (1.0 - Math.pow(t2,3));double f2=1.0 / w;_buff2.set(cm1.m2);_buff2=(KahanObject)_plus.execute(_buff2,lt1);_buff3.set(cm1.m3);_buff3=(KahanObject)_plus.execute(_buff3,lt2 - 3 * cm1.m2._sum * f2* d);cm1.m4=(KahanObject)_plus.execute(cm1.m4,6 * cm1.m2._sum * Math.pow(-f2 * d,2) + lt3 - 4 * cm1.m3._sum * f2* d);cm1.m2.set(_buff2);cm1.m3.set(_buff3);cm1.w=w;break;}case VARIANCE:{double w=cm1.w + 1;double d=in2 - cm1.mean._sum;cm1.mean=(KahanObject)_plus.execute(cm1.mean,d / w);double t1=cm1.w / w * d;double lt1=t1 * d;cm1.m2=(KahanObject)_plus.execute(cm1.m2,lt1);cm1.w=w;break;}default :throw new DMLRuntimeException("Unsupported operation type: " + _type);}return cm1;}  }
class C{  public void updatePropertyValue(String pn,AnimatableValue val){  CSSStyleDeclaration over=getOverrideStyle();  if (val == null) {    over.removeProperty(pn);  } else {    over.setProperty(pn,val.getCssText(),"");  }}  }
class C{  public static void assertTrue(boolean b){  if (!b) {    throwError(null);  }}  }
class C{  public GlowServerIcon(BufferedImage image) throws Exception {  checkNotNull(image,"Image must not be null");  checkArgument(image.getWidth() == 64,"Must be 64 pixels wide");  checkArgument(image.getHeight() == 64,"Must be 64 pixels high");  ByteBuf png=Unpooled.buffer();  ImageIO.write(image,"PNG",new ByteBufOutputStream(png));  ByteBuf encoded=Base64.encode(png);  png.release();  data="data:image/png;base64," + encoded.toString(Charsets.UTF_8);  encoded.release();}  }
class C{  private String token(String tenant,String user){  JsonObject payload=new JsonObject().put("sub",user).put("tenant",tenant);  String encodedpl=payload.encode();  logger.debug("test-auth: payload: " + encodedpl);  byte[] bytes=encodedpl.getBytes();  byte[] pl64bytes=Base64.getEncoder().encode(bytes);  String pl64=new String(pl64bytes);  String token="dummyJwt." + pl64 + ".sig";  logger.debug("test-auth: token: " + token);  return token;}  }
class C{  public void bindFramebuffer(int framebufferId){  if (this.framebufferId != framebufferId) {    this.framebufferId=framebufferId;    GLES20.glBindFramebuffer(GLES20.GL_FRAMEBUFFER,framebufferId);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:54:53.864 -0400",hash_original_method="90E92362AB1D9096EC0423D1327115A2",hash_generated_method="90E92362AB1D9096EC0423D1327115A2") ProcessedData(byte[] data,String accountId){  mData=data;  mAccountId=accountId;}  }
class C{  private ComputeState createComputeHost() throws Throwable {  ComputeState computeState=new ComputeState();  computeState.id=UUID.randomUUID().toString();  computeState.name=this.computeHostDescription.name;  computeState.documentSelfLink=computeState.id;  computeState.descriptionLink=this.computeHostDescription.documentSelfLink;  computeState.adapterManagementReference=getAdapterManagementReference();  ComputeState returnState=TestUtils.doPost(this.host,computeState,ComputeState.class,UriUtils.buildUri(this.host,ComputeService.FACTORY_LINK));  return returnState;}  }
class C{  @DSComment("data structure class") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:37.413 -0500",hash_original_method="519D763DA29CBC7E3659F73066396076",hash_generated_method="8B8E1E074EA3F65B4B1F9E5DDE6B2927") public void put(String key,Integer value){  mValues.put(key,value);}  }
class C{  @Override protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  m_Cols.setUpper(inputFormat.numAttributes() - 1);  return new Instances(inputFormat);}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  public void expandAllPaths(TreePath path){  cancelEditing();  expandAllPaths(path,getModel());}  }
class C{  @SuppressWarnings("unchecked") public SearchSourceBuilder aggregations(Map aggregations){  try {    XContentBuilder builder=XContentFactory.contentBuilder(Requests.CONTENT_TYPE);    builder.map(aggregations);    return aggregations(builder);  } catch (  IOException e) {    throw new ElasticsearchGenerationException("Failed to generate [" + aggregations + "]",e);  }}  }
class C{  public IconicsDrawable contourWidthPx(int contourWidth){  mContourWidth=contourWidth;  mContourPaint.setStrokeWidth(mContourWidth);  drawContour(true);  invalidateSelf();  return this;}  }
class C{  public void start(){  units.start();  volume.start();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Long addOrganisation(Long user_level,String orgname,long user_id){  try {    if (authLevelManagement.checkAdminLevel(user_level)) {      Long orgId=this.addOrganisation(orgname,user_id);      return orgId;    }  } catch (  Exception err) {    log.error("addOrganisation",err);  }  return null;}  }
class C{  public boolean isValid(){  return valid;}  }
class C{  protected NullLiteralImpl(){  super();}  }
class C{  public SafeCalendar endDate(){  return endDate;}  }
class C{  @Override public int hashCode(){  return -paramId.hashCode() + dimension;}  }
class C{  public static Table eliminateEmptyStructures(Table t){  for (int i=t.nrOfTableElements() - 1; i >= 0; i--) {    TableElement te=t.getTableElement(i);    eliminateEmptyStructures(te);    if (te.empty())     t.removeTableElement(te);  }  return t;}  }
class C{  public static void connectToService(Context context,ServiceConnection connection){  Intent intent=new Intent(context,QuasselService.class);  context.bindService(intent,connection,Context.BIND_IMPORTANT);}  }
class C{  protected boolean saveChanges(boolean showCancel){  int button;  boolean result;  if (!isPanelSelected()) {    return true;  }  result=!getCurrentPanel().isChanged();  if (getCurrentPanel().isChanged()) {    try {      if (showCancel) {        button=ComponentHelper.showMessageBox(this,"Changed","The file is not saved - Do you want to save it?",JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);      } else {        button=ComponentHelper.showMessageBox(this,"Changed","The file is not saved - Do you want to save it?",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);      }    } catch (    Exception e) {      button=JOptionPane.CANCEL_OPTION;    }switch (button) {case JOptionPane.YES_OPTION:      saveFile();    result=!getCurrentPanel().isChanged();  break;case JOptionPane.NO_OPTION:result=true;break;case JOptionPane.CANCEL_OPTION:result=false;break;}}return result;}  }
class C{  public void send(Object message,boolean sent) throws RemotingException {  super.send(message,sent);  boolean success=true;  int timeout=0;  try {    ChannelFuture future=channel.write(message);    if (sent) {      timeout=getUrl().getPositiveParameter(Constants.TIMEOUT_KEY,Constants.DEFAULT_TIMEOUT);      success=future.await(timeout);    }    Throwable cause=future.getCause();    if (cause != null) {      throw cause;    }  } catch (  Throwable e) {    throw new RemotingException(this,"Failed to send message " + message + " to "+ getRemoteAddress()+ ", cause: "+ e.getMessage(),e);  }  if (!success) {    throw new RemotingException(this,"Failed to send message " + message + " to "+ getRemoteAddress()+ "in timeout("+ timeout+ "ms) limit");  }}  }
class C{  private int checkZoneLink(SpannableStringBuilder out,String in,int start){  int pos=start + 3;  StringBuilder temp=new StringBuilder();  String targetString=in.substring(pos,Math.min(in.length(),pos + 20));  boolean prevIsDash=false;  for (int i=0; i < targetString.length(); i++) {    char c=targetString.charAt(i);    if ((c >= 'a' && c <= 'z') || (c >= '0' && c <= '9')) {      temp.append(c);      prevIsDash=false;    } else     if (c == '-') {      if (i == 0) {        return -1;      }      if (prevIsDash) {        temp.deleteCharAt(temp.length() - 1);        break;      }      temp.append(c);      prevIsDash=true;    } else {      if (prevIsDash) {        temp.deleteCharAt(temp.length() - 1);      }      break;    }  }  String zone=temp.toString();  if (zone.length() < 3 || zone.equalsIgnoreCase("null")) {    return -1;  }  out.append(zone);  return pos + zone.length() - 1;}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);}  }
class C{  public Object read(File file) throws Exception {  return fromXML(m_Document.read(file));}  }
class C{  public void close(){  m_module.close();}  }
class C{  public void save(){  if (tabIndex >= projectBean.getWorkload().getTestPlans().size()) {    tabIndex=0;  }  this.setCurrentTestPlan(projectBean.getWorkload().getTestPlans().get(tabIndex));}  }
class C{  public void trace(String msg,Object arg0,Object arg1,Object arg2){  innerLog(Level.TRACE,null,msg,arg0,arg1,arg2,null);}  }
class C{  public static int mixStereo(int value1,int value2){  return getStereoWithoutClamp(mixMono(getLeftStereo(value1),getLeftStereo(value2)),mixMono(getRightStereo(value1),getRightStereo(value2)));}  }
class C{  public String toIndexer(final Response response){  assert response != null;  if (response == null) {    if (this.log.isFine()) {      this.log.fine("deQueue: queue entry is null");    }    return "queue entry is null";  }  if (response.profile() == null) {    if (this.log.isFine()) {      this.log.fine("deQueue: profile is null");    }    return "profile is null";  }  String noIndexReason="unspecified indexing error";  if (response.processCase(this.peers.mySeed().hash) == EventOrigin.PROXY_LOAD) {    noIndexReason=response.shallIndexCacheForProxy();  } else {    noIndexReason=response.shallIndexCacheForCrawler();  }  if (noIndexReason == null) {    noIndexReason=TextParser.supports(response.url(),response.getMimeType());  }  if (noIndexReason == null && response.requestProhibitsIndexing()) {    noIndexReason="X-YACY-Index-Control header prohibits indexing";  }  if (noIndexReason == null) {    noIndexReason=this.crawlStacker.urlInAcceptedDomain(response.url());  }  if (noIndexReason != null) {    this.crawlQueues.errorURL.push(response.url(),response.depth(),response.profile(),FailCategory.FINAL_PROCESS_CONTEXT,noIndexReason,-1);    return "not allowed: " + noIndexReason;  }  this.indexingDocumentProcessor.enQueue(new IndexingQueueEntry(response,null,null));  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.084 -0500",hash_original_method="55F163F814F53ECA11AC218202D49EB2",hash_generated_method="B6DAA9FC39B574ED3B96CB9CCFCDE9BA") public void postUrl(String url,byte[] data){  mLoadInitFromJava=true;  nativePostUrl(url,data);  mLoadInitFromJava=false;}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#comment: " + start + ", "+ length);  if (null != m_lexicalHandler) {    m_lexicalHandler.comment(ch,start,length);  }}  }
class C{  public CBlockNode(final INaviBasicBlock block){  m_block=Preconditions.checkNotNull(block,"IE01231: Block argument can not be null");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static void writeLine(BufferedWriter writer,String line) throws IOException {  writer.write(line);  writer.newLine();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSSink({DSSinkKind.CONTACT_INFORMATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:58.739 -0500",hash_original_method="FEC4E6BC08FD10A2C518984DAAD113C7",hash_generated_method="1588BDF5754148DC78081AD24F221FCD") Connection dial(String dialString,int clirMode) throws CallStateException {  clearDisconnected();  if (!canDial()) {    throw new CallStateException("cannot dial in current state");  }  String inEcm=SystemProperties.get(TelephonyProperties.PROPERTY_INECM_MODE,"false");  boolean isPhoneInEcmMode=inEcm.equals("true");  boolean isEmergencyCall=PhoneNumberUtils.isLocalEmergencyNumber(dialString,phone.getContext());  if (isPhoneInEcmMode && isEmergencyCall) {    handleEcmTimer(phone.CANCEL_ECM_TIMER);  }  foregroundCall.setGeneric(false);  if (foregroundCall.getState() == CdmaCall.State.ACTIVE) {    return dialThreeWay(dialString);  }  pendingMO=new CdmaConnection(phone.getContext(),dialString,this,foregroundCall);  hangupPendingMO=false;  if (pendingMO.address == null || pendingMO.address.length() == 0 || pendingMO.address.indexOf(PhoneNumberUtils.WILD) >= 0) {    pendingMO.cause=Connection.DisconnectCause.INVALID_NUMBER;    pollCallsWhenSafe();  } else {    setMute(false);    disableDataCallInEmergencyCall(dialString);    if (!isPhoneInEcmMode || (isPhoneInEcmMode && isEmergencyCall)) {      cm.dial(pendingMO.address,clirMode,obtainCompleteMessage());    } else {      phone.exitEmergencyCallbackMode();      phone.setOnEcbModeExitResponse(this,EVENT_EXIT_ECM_RESPONSE_CDMA,null);      pendingCallClirMode=clirMode;      pendingCallInEcm=true;    }  }  updatePhoneState();  phone.notifyPreciseCallStateChanged();  return pendingMO;}  }
class C{  public boolean isLimitEnabled(){  return this.limitEnabled;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int interpretFloat(int pos,float[] genome){  return Util.scale(genome[pos],computeMaxGene(pos,genome) + 1);}  }
class C{  public static <T extends Annotation>T of(Class<T> type,Object value){  Method best=null;  for (  Method method : type.getDeclaredMethods()) {    String methodName=method.getName();    Object def=method.getDefaultValue();    if (methodName.equals("value") && (def == null)) {      return of(type,Map.of("value",value));    }    if (def == null) {      best=method;    }  }  if (best != null) {    return of(type,Map.of(best.getName(),value));  }  return of(type,Map.of("value",value));}  }
class C{  public void testSinglePolygonManyPointsManyHolesRoundTrip() throws SAXException, IOException, ParserConfigurationException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setGenerationAlgorithm(PolygonGenerator.BOX);  pg.setNumberPoints(100);  pg.setNumberHoles(100);  Polygon pt=(Polygon)pg.create();  checkRoundTrip(pt);}  }
class C{  private void faultInFromOldOplog(){  put100Int();  putTillOverFlow(region);  region.put(new Integer(200),new Integer(200));  region.put(new Integer(201),new Integer(201));  region.forceRolling();  if (!(region.get(new Integer(2)).equals(new Integer(2)))) {    fail(" fault in value not correct");  }}  }
class C{  public FPSTextureView addChild(@NonNull DisplayBase DisplayObject){  DisplayObject.setUp(mFps);  mDisplayList.add(DisplayObject);  return this;}  }
class C{  public Instances generate() throws Exception {  return generate("");}  }
class C{  private void checkKeyType(Object[] key){  if ((key == null) || (key.length == 0)) {    throw new NullPointerException("Argument key cannot be null or empty.");  }  if (key.length != this.indexNamesArray.length) {    throw new InvalidKeyException("Argument key's length=" + key.length + " is different from the number of item values, which is "+ indexNamesArray.length+ ", specified for the indexing rows in this TabularData instance.");  }  OpenType<?> keyElementType;  for (int i=0; i < key.length; i++) {    keyElementType=tabularType.getRowType().getType(this.indexNamesArray[i]);    if ((key[i] != null) && (!keyElementType.isValue(key[i]))) {      throw new InvalidKeyException("Argument element key[" + i + "] is not a value for the open type expected for "+ "this element of the index, whose name is \""+ indexNamesArray[i]+ "\" and whose open type is "+ keyElementType);    }  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Joiner pushUris(String alias){  if (mapBuilder == null) {    mapBuilder=new MapBuilder(this);  }  mapBuilder.addTerm(MapBuilderTermType.URI,lookupAlias(alias),alias);  return this;}  }
class C{  public void updateNClob(String columnName,NClob nClob) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  public static <T>Predicate<T> some(final T value){  return eq(value);}  }
class C{  public boolean isRemovable(){  return removable;}  }
class C{  protected final int returnNode(final int node){  _position++;  return node;}  }
class C{  protected SymbolTableEntryImpl(){  super();}  }
class C{  public void addTransition(int source,int dest,int label){  addTransition(source,dest,label,label);}  }
class C{  @Override public UpdateSettingsRequest indices(String... indices){  this.indices=indices;  return this;}  }
class C{  public String toString(){  return "(" + x + ","+ y+ ")";}  }
class C{  public boolean isCachedFile(){  return false;}  }
class C{  private void processDocument(WebDocument document){  TextDocument textDocument=document.createTextDocumentView();  ArticleExtractor.INSTANCE.process(textDocument,candidateTitles);  mStatisticsInfo.setWordCount(TextDocumentStatistics.countWordsInContent(textDocument));  textDocument.applyToModel();}  }
class C{  public static void register(JobEventPublisher jobEventPublisher){  if (JobEvents.jobEventPublisherThreadLocal.get() != null) {    throw new IllegalStateException("JobEventPublisher has already been initialised. " + "Either you forgot to call destroy(deregister) or you called register(JobEventPublisher) twice");  }  JobEvents.jobEventPublisherThreadLocal.set(jobEventPublisher);}  }
class C{  public static void readFully(InputStream in,byte[] dst) throws IOException {  readFully(in,dst,0,dst.length);}  }
class C{  private static JFreeChart createChart(){  XYSeries series1=new XYSeries("Series 1");  series1.add(1.0,1.0);  series1.add(2.0,2.0);  series1.add(3.0,3.0);  XYDataset dataset=new XYSeriesCollection(series1);  return ChartFactory.createScatterPlot("Scatter Plot","Domain","Range",dataset);}  }
class C{  public boolean isNumeralPunctuation(String input){  for (int i=0; i < input.length(); i++) {    if (!isNumeralPunctuation(input.charAt(i))) {      return false;    }  }  return true;}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  fireModelChanged();  if (model == treeModel) {    if (object instanceof TreeModel.TreeChangedEvent) {      if (((TreeModel.TreeChangedEvent)object).isNodeChanged()) {        updateNodeAndChildren(((TreeModel.TreeChangedEvent)object).getNode());        updateRestrictedNodePartials=true;      } else       if (((TreeModel.TreeChangedEvent)object).isTreeChanged()) {        updateAllNodes();        updateRestrictedNodePartials=true;      } else {      }    }  } else   if (model == branchRateModel) {    if (index == -1) {      updateAllNodes();    } else {      updateNode(treeModel.getNode(index));    }  } else   if (model == branchModel) {    if (index == -1) {      updateSubstitutionModel=true;      updateAllNodes();    } else {      updateNode(treeModel.getNode(index));    }  } else   if (model == siteRateModel) {    updateSiteModel=true;    updateAllNodes();  } else   if (model == tipStatesModel) {    if (object instanceof Taxon) {      for (int i=0; i < treeModel.getNodeCount(); i++)       if (treeModel.getNodeTaxon(treeModel.getNode(i)) != null && treeModel.getNodeTaxon(treeModel.getNode(i)).getId().equalsIgnoreCase(((Taxon)object).getId()))       updateNode(treeModel.getNode(i));    } else     if (object instanceof Parameter) {    } else {      updateAllNodes();    }  } else {    throw new RuntimeException("Unknown componentChangedEvent");  }  super.handleModelChangedEvent(model,object,index);}  }
class C{  private void createDepCheckBox(Composite container){  depCheck=new Button(container,SWT.CHECK);  GridData gridData=new GridData();  gridData.grabExcessHorizontalSpace=true;  gridData.horizontalIndent=10;  gridData.verticalIndent=10;  gridData.horizontalSpan=2;  gridData.horizontalAlignment=SWT.FILL;  depCheck.setText(Messages.depChkBox);  depCheck.setLayoutData(gridData);}  }
class C{  public Scanner(String s) throws ParseException {  try {    reader=new StringNormalizingReader(s);    current=nextChar();  } catch (  IOException e) {    throw new ParseException(e);  }}  }
class C{  @Override public void removeLayoutComponent(Component comp){  m_ComponentToConstraint.remove(comp);}  }
class C{  public void removeMouseMode(String id){  for (  MapMouseMode med : mouseModes) {    if (id.equals(med.getID())) {      removeMouseMode(med);      break;    }  }}  }
class C{  public T next(final PseudoRandom prng,int step){  return prngToValue.next(prng,step);}  }
class C{  public Object remove(String key){  return this.map.remove(key);}  }
class C{  private AuthenticationFilter<AuthnRequestState> chooseAuthenticator(HttpServletRequest request){  AuthenticationFilter<AuthnRequestState> retval=this.getCookieAuthenticator();  if (request != null) {    String castleAuthType=request.getParameter(Shared.REQUEST_AUTH_PARAM);    if (castleAuthType != null) {      if (castleAuthType.startsWith(Shared.KERB_AUTH_PREFIX)) {        retval=this.getKerbAuthenticator();        logger.debug("Kerb authenticator chosen");      } else       if (castleAuthType.startsWith(Shared.PASSWORD_AUTH_PREFIX)) {        retval=this.getPasswordAuthenticator();        logger.debug("Password authenticator chosen");      } else       if (castleAuthType.startsWith(Shared.RSAAM_AUTH_PREFIX)) {        retval=this.getRsaAmAuthenticator();        logger.debug("Rsa am authenticator chosen");      } else       if (castleAuthType.startsWith(Shared.TLSCLIENT_AUTH_PREFIX)) {        retval=this.getTlsClientAuthenticator();        logger.debug("TLSClient authenticator chosen");      }    }  }  return retval;}  }
class C{  public boolean isEmpty(){  return (count == 0);}  }
class C{  public void testDoCheckWithNullTextToCheckAndDetectionResultOverridenByConstructor(){  LOGGER.debug("doCheckWithNullTextToCheckAndDetectionResultOverridenByConstructor");  elements.add(element);  mockTestSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);  expectLastCall().once();  expect(mockTextElementBuilder.buildTextFromElement(element)).andReturn(null);  TextNotIdenticalToAttributeChecker instance=new TextNotIdenticalToAttributeChecker(mockTextElementBuilder,new TextAttributeOfElementBuilder(AttributeStore.ALT_ATTR),new ImmutablePair(TestSolution.NOT_APPLICABLE,DETECTION_MSG),new ImmutablePair(TestSolution.PASSED,""));  replay(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);  instance.doCheck(mockSSPHandler,elements,mockTestSolutionHandler);  verify(mockTextElementBuilder,mockSSPHandler,mockTestSolutionHandler);}  }
class C{  public void populateExif(Optional<TaskImageContainer.TaskImage> image,Optional<CaptureResultProxy> captureResult,Optional<Location> location){  addExifVersionToExif();  addTimestampToExif();  addMakeAndModelToExif();  if (image.isPresent()) {    addImageDataToExif(image.get());  }  if (captureResult.isPresent()) {    addCaptureResultToExif(captureResult.get());  }  if (location.isPresent()) {    addLocationToExif(location.get());  }}  }
class C{  public static float normalize(float val,float min,float max){  if (Float.isInfinite(val) || Float.isNaN(val)) {    return 0f;  }  float range=max - min;  while (val > max) {    val-=range;  }  while (val < min) {    val+=range;  }  return val;}  }
class C{  public static void register(){  CommandCenter.register(OWN,new OwnAction());}  }
class C{  public static DateTimeFormatter weekDate(){  return weekyearWeekDay();}  }
class C{  protected void doPrintClassification(Classifier classifier,Instance inst,int index) throws Exception {  double[] d=classifier.distributionForInstance(inst);  doPrintClassification(d,inst,index);}  }
class C{  public CAddressSpace(final int addressSpaceId,final String name,final String description,final Date creationDate,final Date modificationDate,final Map<INaviModule,IAddress> imageBases,final DebuggerTemplate debuggerTemplate,final SQLProvider provider,final INaviProject project){  Preconditions.checkArgument(addressSpaceId > 0,"IE00023: ID argument must be positive");  Preconditions.checkNotNull(name,"IE00024: Name argument can not be null");  Preconditions.checkNotNull(description,"IE00025: Description argument can not be null");  Preconditions.checkNotNull(creationDate,"IE00026: Creation date argument can not be null");  Preconditions.checkNotNull(modificationDate,"IE00027: Modification date argument can not be null");  Preconditions.checkNotNull(imageBases,"IE00028: Image bases argument can not be null");  m_provider=Preconditions.checkNotNull(provider,"IE00029: Provider argument can not be null");  m_project=Preconditions.checkNotNull(project,"IE01790: project argument can not be null");  m_configuration=new CAddressSpaceConfiguration(this,provider,addressSpaceId,name,description,creationDate,modificationDate,debuggerTemplate);  m_moduleCount=imageBases.size();}  }
class C{  void dumpBlock(BasicBlock block){  if (block == header) {    VM.sysWrite("Header ");  }  if (block == exit) {    VM.sysWrite("Exit ");  }  VM.sysWrite("Block #" + block.getNumber() + ":\n");  IREnumeration.AllInstructionsEnum instructions=new IREnumeration.AllInstructionsEnum(ir,block);  while (instructions.hasMoreElements()) {    Instruction instr=instructions.nextElement();    dumpInstruction(ir,instr);  }}  }
class C{  @SuppressWarnings("unused") public RepositoryQuery resolveQuery(Method method,RepositoryMetadata metadata,NamedQueries namedQueries){  QueryLookupStrategy queryLookupStrategy=Factory.super.getQueryLookupStrategy(key,evaluationContextProvider);  Method resolveQuery=findMethod(QueryLookupStrategy.class,"resolveQuery",Method.class,RepositoryMetadata.class,NamedQueries.class);  try {    RepositoryQuery query=(RepositoryQuery)resolveQuery.invoke(queryLookupStrategy,method,metadata,namedQueries);    return wrapQuery(method,metadata,query);  } catch (  IllegalAccessException|IllegalArgumentException|InvocationTargetException e) {    throw new RuntimeException(e);  }}  }
class C{  public ThreadMonitor(){  this.tmbean=getThreadMXBean();}  }
class C{  public void init(boolean forSigning,CipherParameters parameters){  this.forSigning=forSigning;  AsymmetricKeyParameter k;  if (parameters instanceof ParametersWithRandom) {    k=(AsymmetricKeyParameter)((ParametersWithRandom)parameters).getParameters();  } else {    k=(AsymmetricKeyParameter)parameters;  }  if (forSigning && !k.isPrivate()) {    throw new IllegalArgumentException("signing requires private key");  }  if (!forSigning && k.isPrivate()) {    throw new IllegalArgumentException("verification requires public key");  }  reset();  engine.init(forSigning,parameters);}  }
class C{  public DateTimeFormatterBuilder appendLiteral(char c){  return append0(new CharacterLiteral(c));}  }
class C{  final public void evictAll(final boolean clearRefs){  if (clearRefs) {    while (!isEmpty()) {      evict();    }  } else {    final int size=size();    for (int n=0; n < size; n++) {      final T ref=get(n);      if (listener != null) {        listener.evicted(this,ref);      }    }  }}  }
class C{  public boolean processCC() throws IllegalArgumentException {  log.fine(p_mpp.getHostAddress() + " " + p_mpp.getHostPort()+ ", Timeout="+ getTimeout()+ "; Proxy="+ p_mpp.getProxyAddress()+ " "+ p_mpp.getProxyPort()+ " "+ p_mpp.getProxyLogon()+ " "+ p_mpp.getProxyPassword());  if (p_mpp.getC_Currency_ID() != 0 && p_mpp.getC_Currency_ID() != p_mp.getC_Currency_ID())   throw new IllegalArgumentException("Payment currency not supported by processor.");  if (p_mpp.getMinimumAmt().compareTo(p_mp.getPayAmt()) > 0)   throw new IllegalArgumentException("Payment amount is less than minimum accepted.");  if (p_mpp.isRequireVV() && Util.isEmpty(p_mp.getCreditCardVV(),true))   throw new IllegalArgumentException("Credit card verification code required.");  StringBuffer param=new StringBuffer();  if (p_mp.getTrxType().equals(MPayment.TRXTYPE_Sales))   param.append("TRXTYPE=").append(p_mp.getTrxType()); else   throw new IllegalArgumentException("PP_PayFlowPro TrxType not supported - " + p_mp.getTrxType());  param.append("&TENDER=C").append("&ACCT=").append(MPaymentValidate.checkNumeric(p_mp.getCreditCardNumber()));  param.append("&EXPDATE=");  String month=String.valueOf(p_mp.getCreditCardExpMM());  if (month.length() == 1)   param.append("0");  param.append(month);  int expYY=p_mp.getCreditCardExpYY();  if (expYY > 2000)   expYY-=2000;  String year=String.valueOf(expYY);  if (year.length() == 1)   param.append("0");  param.append(year);  int precision=2;  I_C_Currency currency=null;  currency=p_mp.getC_Currency();  if (currency != null) {    precision=currency.getStdPrecision();    param.append(createPair("&CURRENCY",currency.getISO_Code(),3));  }  param.append("&AMT=").append(p_mp.getPayAmt().setScale(precision,RoundingMode.HALF_UP));  param.append(createPair("&AUTHCODE",p_mp.getVoiceAuthCode(),6));  param.append(createPair("&ORIGID",p_mp.getOrig_TrxID(),12));  param.append(createPair("&CVV2",p_mp.getCreditCardVV(),4));  param.append(createPair("&NAME",p_mp.getA_Name(),30));  param.append(createPair("&STREET",p_mp.getA_Street(),30));  param.append(createPair("&ZIP",p_mp.getA_Zip(),9));  param.append(createPair("&EMAIL",p_mp.getA_EMail(),64));  param.append(createPair("&SHIPTOZIP",p_mp.getA_Zip(),6));  param.append(createPair("&TAXAMT",p_mp.getTaxAmt(),10));  param.append(createPair("&INVNUM",p_mp.getC_Invoice_ID(),9));  param.append(createPair("&COMMENT1",p_mp.getC_Payment_ID(),128));  param.append(createPair("&COMMENT2",p_mp.getC_BPartner_ID(),128));  return process(param.toString());}  }
class C{  public float distanceSquared(float otherX,float otherY){  double dx=x - otherX;  double dy=y - otherY;  return (float)(dx * dx + dy * dy);}  }
class C{  public byte[] decode(byte[] bytes) throws DecoderException {  return decodeUrl(bytes);}  }
class C{  public NewGLMNET(){  this(1);}  }
class C{  private static long periodEnd(long now,long period,LocalDateTime cal){  if (period < 0)   return Long.MAX_VALUE; else   if (period == 0)   return now;  if (period < 30 * DAY) {    long localTime=cal.toEpochSecond(ZoneOffset.UTC) * 1000;    localTime=localTime + (period - (localTime + 4 * DAY) % period);    return cal.toEpochSecond(ZoneOffset.UTC) * 1000;  }  if (period % (30 * DAY) == 0) {    int months=(int)(period / (30 * DAY));    long year=cal.getYear();    int month=cal.getMonthValue();    cal.withMonth(month + months);    cal.withDayOfMonth(1);    return cal.toEpochSecond(ZoneOffset.UTC) * 1000;  }  if (period % (365 * DAY) == 0) {    long years=(period / (365 * DAY));    long year=cal.getYear();    long newYear=year + (years - year % years);    cal.withYear((int)newYear);    cal.withMonth(1);    cal.withDayOfMonth(1);    return cal.toEpochSecond(ZoneOffset.UTC) * 1000;  }  return cal.toEpochSecond(ZoneOffset.UTC) * 1000;}  }
class C{  public AtomicFile(File baseName){  mBaseName=baseName;  mBackupName=new File(baseName.getPath() + ".bak");}  }
class C{  public void increment(int position,double weight){  leftLabelWeights[position]+=weight;  rightLabelWeights[position]-=weight;  leftWeight+=weight;  rightWeight-=weight;}  }
class C{  private String makePretty(double number){  String r=mFormat.format(number);  r=r.replaceAll("E[0-9]",SUFFIX[Character.getNumericValue(r.charAt(r.length() - 1)) / 3]);  while (r.length() > MAX_LENGTH || r.matches("[0-9]+\\.[a-z]")) {    r=r.substring(0,r.length() - 2) + r.substring(r.length() - 1);  }  return r;}  }
class C{  public NotificationChain basicSetBlock(Block newBlock,NotificationChain msgs){  Block oldBlock=block;  block=newBlock;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,GamlPackage.STANDALONE_BLOCK__BLOCK,oldBlock,newBlock);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public static <T>T requireNonNull(T obj,String message){  if (obj == null)   throw new NullPointerException(message);  return obj;}  }
class C{  public ParseProblem(ParseProblem.Type type,String message,String sourceName,int offset,int length){  setType(type);  setMessage(message);  setSourceName(sourceName);  setFileOffset(offset);  setLength(length);}  }
class C{  public void incResultsReturned(){  this._stats.incInt(_resultsSentToResultCollectorId,1);}  }
class C{  public HadoopV1Counter(HadoopLongCounter cntr){  this.cntr=cntr;}  }
class C{  @Override public void process(V tuple){  Sum.this.process(tuple);  tupleAvailable=true;}  }
class C{  @Override public GraphQuery hasNot(final String key,final Object value){  criteria.add(new HasNot(key,value));  return this;}  }
class C{  public static double cosineSimilarity(final double[] v1,final double[] v2){  return dotProduct(v1,v2) / (norm(v1) * norm(v2));}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String badSubstring;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("address");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      badSubstring=child.substringData(10,-3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void mutableMultiply(double c,double d){  double newR=this.real * c - this.imag * d;  double newI=this.imag * c + this.real * d;  this.real=newR;  this.imag=newI;}  }
class C{  public void appendBits(int value,int numBits){  if (numBits < 0 || numBits > 32) {    throw new IllegalArgumentException("Num bits must be between 0 and 32");  }  ensureCapacity(size + numBits);  for (int numBitsLeft=numBits; numBitsLeft > 0; numBitsLeft--) {    appendBit(((value >> (numBitsLeft - 1)) & 0x01) == 1);  }}  }
class C{  synchronized void establishConnection() throws IOException {  if (isConnected) {    throw new IOException("Pipe already connected");  }  if (isClosed) {    throw new IOException("Pipe is closed");  }  if (buffer == null) {    buffer=new char[PIPE_SIZE];  }  isConnected=true;}  }
class C{  protected void cleanTable(Connection dbConnection) throws SQLException {  Statement stmt=dbConnection.createStatement();  stmt.execute("ALTER TABLE platformuser DROP COLUMN useridcnt");  stmt.execute("ALTER TABLE platformuser DROP COLUMN olduserid");  stmt.close();}  }
class C{  private void validatePatch(State current,State patch){  ValidationUtils.validatePatch(current,patch);  ValidationUtils.validateTaskStageProgression(current.taskState,patch.taskState);}  }
class C{  public void testGROOVY_6582(){  String script="" + "abstract class DeclaredBaseScript extends Script {\n" + "   def v = { it * 2 }\n"+ "   def z = { it * 3 }\n"+ "   def getProperty(String n) { n == 'c' ? v : super.getProperty(n) }\n"+ "}\n"+ "@groovy.transform.BaseScript DeclaredBaseScript baseScript\n"+ "assert c(2) == 4\n"+ "assert z(2) == 6";  GroovyShell shell=new GroovyShell();  shell.evaluate(script);}  }
class C{  public static boolean isOperationInProgress(URI id,String opId,DataObject resource){  OpStatusMap ops=resource.getOpStatus();  Set<Map.Entry<String,Operation>> opSet=ops.entrySet();  Iterator<Map.Entry<String,Operation>> opItr=opSet.iterator();  while (opItr.hasNext()) {    Map.Entry<String,Operation> entry=opItr.next();    if (entry.getValue().getStatus().equals(Operation.Status.pending.toString())) {      if (entry.getKey().equals(opId)) {        continue;      }      return true;    }  }  return false;}  }
class C{  protected final void fireChildrenRemoved(BeanContextMembershipEvent event){  Object listeners[];synchronized (bcmListeners) {    listeners=bcmListeners.toArray();  }  for (int i=0; i < listeners.length; i++) {    BeanContextMembershipListener l=(BeanContextMembershipListener)listeners[i];    l.childrenRemoved(event);  }}  }
class C{  public byte[] generateSignature() throws CryptoException, DataLengthException {  if (!forSigning) {    throw new IllegalStateException("RSADigestSigner not initialised for signature generation.");  }  byte[] hash=new byte[digest.getDigestSize()];  digest.doFinal(hash,0);  try {    byte[] data=derEncode(hash);    return rsaEngine.processBlock(data,0,data.length);  } catch (  IOException e) {    throw new CryptoException("unable to encode signature: " + e.getMessage(),e);  }}  }
class C{  public static void write(float latPoint,float lonPoint,float radius,LinkProperties properties,DataOutputStream dos) throws IOException {  LinkCircle.write(latPoint,lonPoint,radius,-1,-1,properties,dos);}  }
class C{  private double initalVKNormCompute(int k,int M,double[] vk,double[] A_k){  double vkNorm=0.0;  for (int i=k + 1; i < M; i++) {    vk[i]=A_k[i];    vkNorm+=vk[i] * vk[i];  }  return vkNorm;}  }
class C{  public Object opt(int index){  return (index < 0 || index >= this.length()) ? null : this.list.get(index);}  }
class C{  static int addOrSubtract(int a,int b){  return a ^ b;}  }
class C{  public List<String> collectionImageFilterQuery(){  final ArrayList<String> fqs=new ArrayList<>();  fqs.add(CollectionSchema.httpstatus_i.getSolrFieldName() + ":200");  fqs.add(CollectionSchema.content_type.getSolrFieldName() + ":(image/*) OR " + CollectionSchema.images_urlstub_sxt.getSolrFieldName()+ AbstractSolrConnector.CATCHALL_DTERM);  return fqs;}  }
class C{  public <T extends ServiceDocument>T selectedDocument(String selfLink,Class<T> type){  if (this.results == null || this.results.selectedDocuments == null) {    return null;  }  Object o=this.results.selectedDocuments.get(selfLink);  return convert(type,o);}  }
class C{  public static SendPingResponse parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  SendPingResponse object=new SendPingResponse();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"sendPingResponse".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (SendPingResponse)org.oscm.xsd.ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement() && new javax.xml.namespace.QName("","return").equals(reader.getName())) {      java.lang.String content=reader.getElementText();      object.set_return(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(content));      reader.next();    } else {    }    while (!reader.isStartElement() && !reader.isEndElement())     reader.next();    if (reader.isStartElement())     throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  @Nonnull public BugInstance addVisitedField(PreorderVisitor visitor){  FieldAnnotation f=FieldAnnotation.fromVisitedField(visitor);  addField(f);  return this;}  }
class C{  public Identity identity() throws IOException {  final Iterator<String> headers=new RqHeaders.Base(this).header(this.header).iterator();  final Identity user;  if (headers.hasNext()) {    user=new CcPlain().decode(new Utf8String(headers.next()).bytes());  } else {    user=Identity.ANONYMOUS;  }  return user;}  }
class C{  public SFTPv3FileHandle createFile(String fileName,SFTPv3FileAttributes attr) throws IOException {  return openFile(fileName,0x00000008 | 0x00000003,attr);}  }
class C{  public void close(){  renderer.close();  if (mLogger.isActivated()) {    mLogger.debug("Media renderer stream closed");  }}  }
class C{  void createExtents(List<VPlexStorageVolumeInfo> storageVolumeInfoList) throws VPlexApiException {  ClientResponse response=null;  try {    URI requestURI=_vplexApiClient.getBaseURI().resolve(VPlexApiConstants.URI_CREATE_EXTENT);    s_logger.info("Create extent URI is {}",requestURI.toString());    StringBuilder volumePathsBuilder=new StringBuilder();    Iterator<VPlexStorageVolumeInfo> volumeInfoIter=storageVolumeInfoList.iterator();    while (volumeInfoIter.hasNext()) {      volumePathsBuilder.append(volumeInfoIter.next().getPath());      if (volumeInfoIter.hasNext()) {        volumePathsBuilder.append(",");      }    }    s_logger.info("Creating extents on storage volumes {}",volumePathsBuilder.toString());    Map<String,String> argsMap=new HashMap<String,String>();    argsMap.put(VPlexApiConstants.ARG_DASH_D,volumePathsBuilder.toString());    JSONObject postDataObject=VPlexApiUtils.createPostData(argsMap,false);    s_logger.info("Create extent POST data is {}",postDataObject.toString());    response=_vplexApiClient.post(requestURI,postDataObject.toString());    String responseStr=response.getEntity(String.class);    s_logger.info("Create extent response is {}",responseStr);    if (response.getStatus() != VPlexApiConstants.SUCCESS_STATUS) {      if (response.getStatus() == VPlexApiConstants.ASYNC_STATUS) {        s_logger.info("Extent creation completing asyncronously");        _vplexApiClient.waitForCompletion(response);      } else {        String cause=VPlexApiUtils.getCauseOfFailureFromResponse(responseStr);        throw VPlexApiException.exceptions.createExtentFailureStatus(String.valueOf(response.getStatus()),cause);      }    }    s_logger.info("Extent creation successful");  } catch (  VPlexApiException vae) {    throw vae;  }catch (  Exception e) {    throw VPlexApiException.exceptions.failedCreateExtent(e);  } finally {    if (response != null) {      response.close();    }  }}  }
class C{  public void concat(List<E> list){  if (list == null || list.size == 0) {    return;  }  if (head == null) {    head=list.head;    tail=list.tail;    size+=list.size;    return;  }  Node<E> newTail=list.tail;  tail.next=list.head;  tail=newTail;  size+=list.size;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  if (Sage.userLocale == null)   return Boolean.FALSE;  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().isShowingDVDMenu());}  }
class C{  public boolean hasStatement(final Resource s,final URI p,final Value o,final boolean includeInferred,final Resource... contexts) throws RepositoryException, SailException {  final AbstractTripleStore tripleStore=getTripleStore();  final boolean fastRangeCountOk;  if (isIsolatable()) {    fastRangeCountOk=false;  } else {    if (includeInferred) {      fastRangeCountOk=true;    } else     if (tripleStore.getAxioms().getClass() == NoAxioms.class) {      fastRangeCountOk=true;    } else {      fastRangeCountOk=false;    }  }  if (fastRangeCountOk) {    if (contexts.length == 0) {      return tripleStore.hasStatement(s,p,o,(Resource)null);    } else     if (contexts.length == 1 && contexts[0] == null) {      return tripleStore.hasStatement(s,p,o,quads ? NULL_GRAPH : null);    } else {      boolean found=false;      for (      Resource c : contexts) {        found=tripleStore.hasStatement(s,p,o,(c == null && quads) ? NULL_GRAPH : c);        if (found)         return true;      }    }  }  final CloseableIteration<? extends Statement,SailException> itr=getStatements(s,p,o,includeInferred,contexts);  try {    return itr.hasNext();  }  finally {    itr.close();  }}  }
class C{  public ConnectException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  public UpdateInventory csvToObject(String csv){  String[] lines=csv.split(",");  if (lines == null || lines.length != 4) {    throw new IllegalArgumentException("CSV line is not valid: " + csv);  }  String supplierId=lines[0];  String partId=lines[1];  String name=lines[2];  String amount=lines[3];  return new UpdateInventory(supplierId,partId,name,amount);}  }
class C{  public static void putBooleanValue(ContentResolver cr,long providerId,String name,boolean value){  ContentValues v=new ContentValues(3);  v.put(PROVIDER,providerId);  v.put(NAME,name);  v.put(VALUE,Boolean.toString(value));  cr.insert(CONTENT_URI,v);}  }
class C{  public static void registerMbeans(MBeanServer mBeanServer){  try {    mBeanServer.registerMBean(new Log4jMXBeanImp(),Log4jMXBeanImp.getObjectName());    mBeanServer.registerMBean(new ExceptionMXBeanImp(),ExceptionMXBeanImp.getObjectName());    mBeanServer.registerMBean(new ExceptionDeltaMXBeanImp(),ExceptionDeltaMXBeanImp.getObjectName());    mBeanServer.registerMBean(new Log4jDeltaMXBeanImp(),Log4jDeltaMXBeanImp.getObjectName());    mBeanServer.registerMBean(new JamonMXBeanImp(),JamonMXBeanImp.getObjectName());    mBeanServer.registerMBean(new HttpStatusMXBeanImp(),HttpStatusMXBeanImp.getObjectName());    mBeanServer.registerMBean(new HttpStatusDeltaMXBeanImp(),HttpStatusDeltaMXBeanImp.getObjectName());    registerGcMXBean(mBeanServer);    registerMbeansFromPropsFile(mBeanServer);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public Dentist(){  super();}  }
class C{  public HostStateChange(Host target,URI oldClusterURI,URI newClusterURI,Collection<Initiator> oldInitiators,Collection<Initiator> addedInitiators,URI oldDatacenterURI,URI newDatacenterURI){  this.host=target;  this.oldInitiators=Sets.newHashSet();  this.newInitiators=Sets.newHashSet();  this.oldCluster=oldClusterURI;  this.newCluster=newClusterURI;  Collection<URI> oldInitiatorIds=Lists.newArrayList(Collections2.transform(oldInitiators,CommonTransformerFunctions.fctnDataObjectToID()));  Collection<URI> addedInitiatorIds=Lists.newArrayList(Collections2.transform(addedInitiators,CommonTransformerFunctions.fctnDataObjectToID()));  this.oldInitiators.addAll(oldInitiatorIds);  this.newInitiators.addAll(addedInitiatorIds);  this.oldDatacenterURI=oldDatacenterURI;  this.newDatacenterURI=newDatacenterURI;}  }
class C{  @Nullable @ObjectiveCName("editMyAboutCommandWithNick:") public Command<Boolean> editMyAbout(final String newAbout){  return null;}  }
class C{  public void startElement(String namespaceURI,String localName,String qName,Attributes atts){  if (log.isDebugEnabled()) {    StringBuffer sb=new StringBuffer("StartElement:" + qName + ":");    for (int i=0; i < atts.getLength(); i++) {      sb.append(atts.getQName(i) + "=" + atts.getValue(i)+ ",");    }    log.debug(sb.toString());  }  int tagID=getTagID(qName);  try {switch (tagID) {case TAG_ID_PROCESSVAR:      if (currPv != null) {        pvStack.push(new Object[]{currPv,currAttrib});      }    currPv=(ProcessVar)Class.forName(atts.getValue(PvXMLWriter.ATTR_TYPE)).newInstance();  currPv.setKeyValue(atts.getValue(PvXMLWriter.ATTR_KEY));break;case TAG_ID_PVATTRIBUTE:currAttrib=atts.getValue(PvXMLWriter.ATTR_NAME);break;}} catch (Exception e) {e.printStackTrace();}}  }
class C{  public void nullInsteadOfClone(final Class<?>... c){  for (  final Class<?> cl : c) {    nullInstead.add(cl);  }}  }
class C{  @Override void recordFailure(){  throw new CircuitBreakerOpenException(String.format("CircuitBreaker '%s' is open",stateMachine.getName()));}  }
class C{  private void createRaytracingTexture(){  this.raytraceTexture=glGenTextures();  glBindTexture(GL_TEXTURE_2D,raytraceTexture);  glTexStorage2D(GL_TEXTURE_2D,1,GL_RGBA32F,width,height);  glBindTexture(GL_TEXTURE_2D,0);}  }
class C{  public static String s8(long v){  char[] result=new char[17];  if (v < 0) {    result[0]='-';    v=-v;  } else {    result[0]='+';  }  for (int i=0; i < 16; i++) {    result[16 - i]=Character.forDigit((int)v & 0x0f,16);    v>>=4;  }  return new String(result);}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  private DockerSlave provisionWithWait(DockerSlaveTemplate template) throws IOException, Descriptor.FormException {  final DockerContainerLifecycle dockerContainerLifecycle=template.getDockerContainerLifecycle();  final String imageId=dockerContainerLifecycle.getImage();  dockerContainerLifecycle.getPullImage().exec(getClient(),imageId);  LOG.info("Trying to run container for {}",imageId);  final String containerId=runContainer(template);  InspectContainerResponse ir;  try {    ir=getClient().inspectContainerCmd(containerId).exec();  } catch (  ProcessingException ex) {    LOG.error("Failed to run container for {}, clean-up container",imageId);    dockerContainerLifecycle.getRemoveContainer().exec(getClient(),containerId);    throw ex;  }  String nodeDescription="Docker Node [" + imageId + " on ";  try {    nodeDescription+=getDisplayName();  } catch (  Exception ex) {    nodeDescription+="???";  }  nodeDescription+="]";  String slaveName=String.format("%s-%s",getDisplayName(),containerId.substring(0,12));  if (template.getLauncher().waitUp(getDisplayName(),template,ir)) {    LOG.debug("Container {} is ready for ssh slave connection",containerId);  } else {    LOG.error("Container {} is not ready for ssh slave connection.",containerId);  }  final ComputerLauncher launcher=template.getLauncher().getPreparedLauncher(getDisplayName(),template,ir);  return new DockerSlave(slaveName,nodeDescription,launcher,containerId,template,getDisplayName());}  }
class C{  public ManagementException(String message,Throwable cause){  super(message,cause);}  }
class C{  public boolean canMapMemory(){  return targetInformation.getDebuggerOptions().canMemmap();}  }
class C{  public void removeSurroundingEmptyLines(){  if (this.lines != null) {    this.removeTrailingEmptyLines();    this.removeLeadingEmptyLines();  }}  }
class C{  public void e(Exception ex){  if (debug) {    if (logLevel <= Log.ERROR) {      Log.e(tag,"error",ex);    }  }}  }
class C{  public void makeMapping(Vector<Vector<MappingObject>> mapVec){  this.mapping=new MappingObject[mapVec.size()][];  for (int i=0; i < this.mapping.length; i++) {    Vector<MappingObject> line=mapVec.elementAt(i);    this.mapping[i]=new MappingObject[line.size()];    for (int j=0; j < line.size(); j++) {      this.mapping[i][j]=line.elementAt(j);    }  }  return;}  }
class C{  private void removeListeners(){  m_node.removeListener(m_listener);}  }
class C{  public ListFeatureExtractor(String name,Collection<String> list,boolean caseSensitive){  this.listName=DiscreteFeature.create(name);  this.list=new LinkedHashSet<>();  this.caseSensitive=caseSensitive;  for (  String l : list)   if (caseSensitive)   this.list.add(l); else   this.list.add(l.toLowerCase());}  }
class C{  public static RecyclerViewLicenseFragment newInstance(){  return (RecyclerViewLicenseFragment)onNewInstance(new RecyclerViewLicenseFragment());}  }
class C{  private static byte[] readFully(InputStream is) throws IOException {  final byte[] buf=new byte[8192];  try (ByteArrayOutputStream baos=new ByteArrayOutputStream()){    int read;    while ((read=is.read(buf,0,buf.length)) > 0) {      baos.write(buf,0,read);    }    return baos.toByteArray();  } }  }
class C{  public static String load(File file){  StringBuffer result;  BufferedReader reader;  String line;  String newLine;  result=new StringBuffer();  newLine=System.getProperty("line.separator");  reader=null;  try {    reader=new BufferedReader(new FileReader(file));    while ((line=reader.readLine()) != null) {      result.append(line);      result.append(newLine);    }  } catch (  Exception e) {    e.printStackTrace();    result=null;  } finally {    if (reader != null) {      try {        reader.close();      } catch (      Exception e) {      }    }  }  return ((result != null) ? result.toString() : null);}  }
class C{  public void deletePoiTagDelayed(PoiTypeTag item,Snackbar snackbar,OnClickListener undoAction){  Timber.d("Delaying poi tag %d removal",item.getId());  displayNewUndoSnackbar(snackbar,undoAction,new DeleteTaskCallback(new InternalRemovePoiTagEvent(item)));}  }
class C{  public void readDocs(Document[] docs,DocList ids) throws IOException {  readDocs(docs,ids,null);}  }
class C{  protected void tessellatePolygon(ShapeData shapeData,Vec4 normal){  GLUTessellatorSupport glts=new GLUTessellatorSupport();  shapeData.cb=new GLUTessellatorSupport.CollectIndexListsCallback();  glts.beginTessellation(shapeData.cb,normal);  try {    double[] coords=new double[3];    GLU.gluTessBeginPolygon(glts.getGLUtessellator(),null);    int k=0;    for (    BoundaryInfo boundary : shapeData) {      GLU.gluTessBeginContour(glts.getGLUtessellator());      FloatBuffer vBuf=boundary.vertexBuffer;      for (int i=0; i < boundary.positions.size(); i++) {        coords[0]=vBuf.get(i * 3);        coords[1]=vBuf.get(i * 3 + 1);        coords[2]=vBuf.get(i * 3 + 2);        GLU.gluTessVertex(glts.getGLUtessellator(),coords,0,k++);      }      GLU.gluTessEndContour(glts.getGLUtessellator());    }    GLU.gluTessEndPolygon(glts.getGLUtessellator());  }  finally {    glts.endTessellation();  }}  }
class C{  static String internalToBinaryClassName(String className){  if (className == null) {    return null;  } else {    return className.replace('/','.');  }}  }
class C{  public static BinaryMessage decode(BinaryMessage message,int messageStart,int messageSize,long polynomial,int crcSize){  for (int i=message.nextSetBit(messageStart); i >= messageStart && i < messageSize; i=message.nextSetBit(i + 1)) {    BinaryMessage polySet=new BinaryMessage(crcSize + i + 1);    polySet.load(i,crcSize + 1,polynomial);    message.xor(polySet);  }  return message;}  }
class C{  protected void mergeTempList(){  int[] retSet=sparseSet;  if (tmpIndex > 0) {    int[] sortedSet=sortEncodedSet(tmpSet,tmpIndex);    retSet=merge(sparseSet,sortedSet);    tmpIndex=0;  }  sparseSet=retSet == null ? new int[0] : retSet;}  }
class C{  @Override public boolean tryTakeItem(IItemHandler.Action action,EntityPlayer player,ItemStack onHand){  if (IItemHandler.Action.RIGHT != action)   return false;  final ItemStack stack=outputInventorySlot.yank();  if (stack != null) {    ItemUtils.addStackToPlayer(stack,player,false);    return true;  }  return false;}  }
class C{  protected void selectPattern(){  String pattern=JOptionPane.showInputDialog(m_PatternBut.getParent(),"Enter a Perl regular expression ('.*' for all)",m_PatternRegEx);  if (pattern != null) {    try {      Pattern.compile(pattern);      m_PatternRegEx=pattern;      m_List.clearSelection();      for (int i=0; i < m_List.getModel().getSize(); i++) {        if (Pattern.matches(pattern,m_List.getModel().getElementAt(i).toString()))         m_List.addSelectionInterval(i,i);      }    } catch (    Exception ex) {      JOptionPane.showMessageDialog(m_PatternBut.getParent(),"'" + pattern + "' is not a valid Perl regular expression!\n"+ "Error: "+ ex,"Error in Pattern...",JOptionPane.ERROR_MESSAGE);    }  }}  }
class C{  public VMwareHost addHostSystem(List<DynamicProperty> properties){  if (properties == null || properties.size() == 0) {    return null;  }  VMwareHost result=new VMwareHost(this);  for (  DynamicProperty dp : properties) {    String key=dp.getName();    if ("name".equals(key) && dp.getVal() != null) {      result.setName(dp.getVal().toString());    } else     if ("summary.hardware.memorySize".equals(key) && dp.getVal() != null) {      result.setMemorySizeMB(VMwareValue.fromBytes(Long.parseLong(dp.getVal().toString())).getValue(Unit.MB));    } else     if ("summary.hardware.numCpuCores".equals(key) && dp.getVal() != null) {      result.setCpuCores(Integer.parseInt(dp.getVal().toString()));    }  }  hostsSystems.put(result.getName(),result);  return result;}  }
class C{  @Nullable private static PsiFile addCandidatesFromExistingImports(PyElement node,String refText,AutoImportQuickFix fix,Set<String> seenFileNames){  PsiFile existingImportFile=null;  PsiFile file=node.getContainingFile();  if (file instanceof PyFile) {    PyFile pyFile=(PyFile)file;    for (    PyImportElement importElement : pyFile.getImportTargets()) {      existingImportFile=addImportViaElement(refText,fix,seenFileNames,existingImportFile,importElement,importElement.resolve());    }    for (    PyFromImportStatement fromImportStatement : pyFile.getFromImports()) {      if (!(fromImportStatement.isStarImport()) && fromImportStatement.getImportElements().length > 0) {        PsiElement source=fromImportStatement.resolveImportSource();        existingImportFile=addImportViaElement(refText,fix,seenFileNames,existingImportFile,fromImportStatement.getImportElements()[0],source);      }    }  }  return existingImportFile;}  }
class C{  public CTagContainerNodeMenuBuilder(final JTree projectTree,final IDatabase database){  super(projectTree);  m_database=database;}  }
class C{  private void initialize(){  try {    transportPlugin.initializeExchange(backend.getBackendConfiguration().getExchange(),backend.getBackendConfiguration().getExchangeType());    transportPlugin.initializeExchange(backend.getEngineConfiguration().getExchange(),backend.getEngineConfiguration().getExchangeType());  } catch (  TransportPluginException e) {  }}  }
class C{  public DefaultLmlParser(final LmlData data,final LmlSyntax syntax,final LmlTemplateReader templateReader,final LmlStyleSheet styleSheet){  super(data,syntax,templateReader,styleSheet,true);}  }
class C{  public TourGuide motionType(MotionType motionType){  mMotionType=motionType;  return this;}  }
class C{  protected Response serveFile(String uri,final Map<String,String> header,final File homeDir,final boolean allowDirectoryListing){  if (!homeDir.isDirectory())   return new Response(HTTP_INTERNALERROR,MIME_TEXT_PLAIN,"INTERNAL ERRROR: serveFile(): given homeDir is not a directory.");  uri=uri.trim().replace(File.separatorChar,'/');  if (uri.indexOf('?') >= 0)   uri=uri.substring(0,uri.indexOf('?'));  if (uri.startsWith("..") || uri.endsWith("..") || uri.indexOf("../") >= 0)   return new Response(HTTP_FORBIDDEN,MIME_TEXT_PLAIN,"FORBIDDEN: Won't serve ../ for security reasons.");  File f=new File(homeDir,uri);  if (!f.exists())   return new Response(HTTP_NOTFOUND,MIME_TEXT_PLAIN,"Error 404, file not found.");  if (f.isDirectory()) {    if (!uri.endsWith("/")) {      uri+="/";      Response r=new Response(HTTP_REDIRECT,MIME_TEXT_HTML,"<html><body>Redirected: <a href=\"" + uri + "\">"+ uri+ "</a></body></html>");      r.addHeader("Location",uri);      return r;    }    if (new File(f,"index.html").exists())     f=new File(homeDir,uri + "/index.html"); else     if (new File(f,"index.htm").exists())     f=new File(homeDir,uri + "/index.htm"); else     if (allowDirectoryListing) {      final String[] files=f.list();      String msg="<html><body><h1>Directory " + uri + "</h1><br/>";      if (uri.length() > 1) {        final String u=uri.substring(0,uri.length() - 1);        final int slash=u.lastIndexOf('/');        if (slash >= 0 && slash < u.length())         msg+="<b><a href=\"" + uri.substring(0,slash + 1) + "\">..</a></b><br/>";      }      for (int i=0; i < files.length; ++i) {        final File curFile=new File(f,files[i]);        final boolean dir=curFile.isDirectory();        if (dir) {          msg+="<b>";          files[i]+="/";        }        msg+="<a href=\"" + encodeUri(uri + files[i]) + "\">"+ files[i]+ "</a>";        if (curFile.isFile()) {          long len=curFile.length();          msg+=" &nbsp;<font size=2>(";          if (len < 1024)           msg+=curFile.length() + " bytes"; else           if (len < 1024 * 1024)           msg+=curFile.length() / 1024 + "." + (curFile.length() % 1024 / 10 % 100) + " KB"; else           msg+=curFile.length() / (1024 * 1024) + "." + curFile.length() % (1024 * 1024) / 10 % 100 + " MB";          msg+=")</font>";        }        msg+="<br/>";        if (dir)         msg+="</b>";      }      return new Response(HTTP_OK,MIME_TEXT_HTML,msg);    } else {      return new Response(HTTP_FORBIDDEN,MIME_TEXT_PLAIN,"FORBIDDEN: No directory listing.");    }  }  try {    String mime=null;    final int dot=f.getCanonicalPath().lastIndexOf('.');    if (dot >= 0)     mime=(String)theMimeTypes.get(f.getCanonicalPath().substring(dot + 1).toLowerCase());    if (mime == null)     mime=MIME_DEFAULT_BINARY;    long startFrom=0;    String range=header.get("Range");    if (range != null) {      if (range.startsWith("bytes=")) {        range=range.substring("bytes=".length());        int minus=range.indexOf('-');        if (minus > 0)         range=range.substring(0,minus);        try {          startFrom=Long.parseLong(range);        } catch (        NumberFormatException nfe) {        }      }    }    final FileInputStream fis=new FileInputStream(f);    fis.skip(startFrom);    final Response r=new Response(HTTP_OK,mime,fis);    r.addHeader("Content-length","" + (f.length() - startFrom));    r.addHeader("Content-range","" + startFrom + "-"+ (f.length() - 1)+ "/"+ f.length());    return r;  } catch (  IOException ioe) {    return new Response(HTTP_FORBIDDEN,MIME_TEXT_PLAIN,"FORBIDDEN: Reading file failed.");  }}  }
class C{  public boolean isDiscountCorrectsTax(){  Object oo=get_Value(COLUMNNAME_IsDiscountCorrectsTax);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private String generateScreenOnOrOffUtternace(int feedbackIndex){  int resourceId=(feedbackIndex == INDEX_SCREEN_ON) ? R.string.template_screen_on : R.string.template_screen_off;  String template=mContext.getString(resourceId);  int currentRingerVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_RING);  int maxRingerVolume=mAudioManager.getStreamMaxVolume(AudioManager.STREAM_RING);  int volumePercent=(100 / maxRingerVolume) * currentRingerVolume;  int adjustment=volumePercent % 10;  if (adjustment < 5) {    volumePercent-=adjustment;  } else   if (adjustment > 5) {    volumePercent+=(10 - adjustment);  }  return String.format(template,volumePercent);}  }
class C{  public static String encode(final String s){  boolean inUnicode=false;  int l=s.length();  StringBuilder sb=new StringBuilder(l);  sb.append("\"");  for (int x=0; x < l; x++) {    char c=s.charAt(x);    if (c >= 32 && c < 127 && c != '\\' && c != '"') {      if (inUnicode) {        sb.append("\\u");        inUnicode=false;      }      sb.append(c);    } else {      if (c == '\b') {        if (inUnicode) {          sb.append("\\u");          inUnicode=false;        }        sb.append("\\b");      } else       if (c == '\n') {        if (inUnicode) {          sb.append("\\u");          inUnicode=false;        }        sb.append("\\n");      } else       if (c == '\t') {        if (inUnicode) {          sb.append("\\u");          inUnicode=false;        }        sb.append("\\t");      } else       if (c == '"') {        if (inUnicode) {          sb.append("\\u");          inUnicode=false;        }        sb.append("\\\"");      } else       if (c == '\\') {        if (inUnicode) {          sb.append("\\u");          inUnicode=false;        }        sb.append("\\\\");      } else       if (c == '\0') {        if (inUnicode) {          sb.append("\\u");          inUnicode=false;        }        sb.append("\\0");      } else {        if (!inUnicode) {          sb.append("\\u");          inUnicode=true;        }        String ss=Integer.toHexString((int)c);switch (ss.length()) {case 1:          sb.append("000" + ss);        break;case 2:      sb.append("00" + ss);    break;case 3:  sb.append("0" + ss);break;case 4:sb.append(ss);break;default :throw new RuntimeException("Default case should never occur");}}}}if (inUnicode) sb.append("\\u");sb.append("\"");return sb.toString();}  }
class C{  public String stacktrace(){  return stacktrace;}  }
class C{  public final void printSubpopulationForHumans(final EvolutionState state,final int log,final int verbosity){  printSubpopulationForHumans(state,log);}  }
class C{  public void runTest() throws Throwable {  Document doc;  DocumentFragment docFragment;  Element newOne;  Node domesticNode;  NamedNodeMap domesticAttr;  Attr attrs;  String attrName;  Node appendedChild;  doc=(Document)load("staff",true);  docFragment=doc.createDocumentFragment();  newOne=doc.createElement("newElement");  newOne.setAttribute("newdomestic","Yes");  appendedChild=docFragment.appendChild(newOne);  domesticNode=docFragment.getFirstChild();  domesticAttr=domesticNode.getAttributes();  attrs=(Attr)domesticAttr.item(0);  attrName=attrs.getName();  assertEquals("attrCreateDocumentFragmentAssert","newdomestic",attrName);}  }
class C{  public Dos2UnixResource(TextResource baseResource){  this.baseResource=baseResource;}  }
class C{  public boolean computeScrollOffset(){  if (mFinished) {    return false;  }  int timePassed=(int)(AnimationUtils.currentAnimationTimeMillis() - mStartTime);  if (timePassed < mDuration) {switch (mMode) {case SCROLL_MODE:      float x=timePassed * mDurationReciprocal;    if (mInterpolator == null)     x=viscousFluid(x); else     x=mInterpolator.getInterpolation(x);  mCurrX=mStartX + Math.round(x * mDeltaX);mCurrY=mStartY + Math.round(x * mDeltaY);break;case FLING_MODE:final float t=(float)timePassed / mDuration;final int index=(int)(NB_SAMPLES * t);float distanceCoef=1.f;float velocityCoef=0.f;if (index < NB_SAMPLES) {final float t_inf=(float)index / NB_SAMPLES;final float t_sup=(float)(index + 1) / NB_SAMPLES;final float d_inf=SPLINE_POSITION[index];final float d_sup=SPLINE_POSITION[index + 1];velocityCoef=(d_sup - d_inf) / (t_sup - t_inf);distanceCoef=d_inf + (t - t_inf) * velocityCoef;}mCurrVelocity=velocityCoef * mDistance / mDuration * 1000.0f;mCurrX=mStartX + Math.round(distanceCoef * (mFinalX - mStartX));mCurrX=Math.min(mCurrX,mMaxX);mCurrX=Math.max(mCurrX,mMinX);mCurrY=mStartY + Math.round(distanceCoef * (mFinalY - mStartY));mCurrY=Math.min(mCurrY,mMaxY);mCurrY=Math.max(mCurrY,mMinY);if (mCurrX == mFinalX && mCurrY == mFinalY) {mFinished=true;}break;}} else {mCurrX=mFinalX;mCurrY=mFinalY;mFinished=true;}return true;}  }
class C{  public void removePropertyChangeListener(PropertyChangeListener listener){  super.removePropertyChangeListener(listener);}  }
class C{  public OffsetTimeSource(long startTimeMillis,TimeSource parentTimeSource){  if (parentTimeSource == null)   throw new NullPointerException("parentTimeSource must not be null");  this.parentTimeSource=parentTimeSource;  this.offsetMillis=startTimeMillis - parentTimeSource.millis();}  }
class C{  public void finer(String msg){  throw new RuntimeException();}  }
class C{  public void fromData(DataInput in) throws IOException, ClassNotFoundException {  boolean isBagSetView=in.readBoolean();  if (isBagSetView) {    this.base=(Set)InternalDataSerializer.readSet(in);  } else {    this.base=(Collection)DataSerializer.readObject(in);  }  this.collectionType=(CollectionType)DataSerializer.readObject(in);  this.modifiable=in.readBoolean();}  }
class C{  @Override public UsageViewHolder newViewHolder(ViewGroup viewGroup){  View usageView=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.incoming_outgoing,viewGroup,false);  return new UsageViewHolder(usageView);}  }
class C{  public DoubleMatrix2D like(int rows,int columns){  return new SparseDoubleMatrix2D(rows,columns);}  }
class C{  public boolean isAdditionalJournalRequiredForRPCopy(String journalPolicy,BlockConsistencyGroup cg,String size,Integer volumeCount,String copyName){  boolean additionalJournalRequired=false;  if (journalPolicy != null && (journalPolicy.endsWith("x") || journalPolicy.endsWith("X"))) {    List<Volume> cgVolumes=RPHelper.getAllCgVolumes(cg.getId(),_dbClient);    List<Volume> journalVolumes=RPHelper.findExistingJournalsForCopy(_dbClient,cg.getId(),copyName);    Long cgJournalSize=0L;    Long cgJournalSizeInBytes=0L;    for (    Volume journalVolume : journalVolumes) {      cgJournalSize+=journalVolume.getProvisionedCapacity();    }    cgJournalSizeInBytes=SizeUtil.translateSize(String.valueOf(cgJournalSize));    _log.info(String.format("Cumulative total journal/metadata size for RP Copy [%s] : %s GB ",copyName,SizeUtil.translateSize(cgJournalSizeInBytes,SizeUtil.SIZE_GB)));    Long cgVolumeSize=0L;    Long cgVolumeSizeInBytes=0L;    for (    Volume cgVolume : cgVolumes) {      if (!cgVolume.checkPersonality(Volume.PersonalityTypes.METADATA.name()) && copyName.equalsIgnoreCase(cgVolume.getRpCopyName()) && !cgVolume.checkInternalFlags(Flag.INTERNAL_OBJECT)) {        cgVolumeSize+=cgVolume.getProvisionedCapacity();      }    }    cgVolumeSizeInBytes=SizeUtil.translateSize(String.valueOf(cgVolumeSize));    _log.info(String.format("Cumulative RP Copy [%s] size : %s GB",copyName,SizeUtil.translateSize(cgVolumeSizeInBytes,SizeUtil.SIZE_GB)));    Long newCgVolumeSizeInBytes=cgVolumeSizeInBytes + (Long.valueOf(SizeUtil.translateSize(size)) * volumeCount);    _log.info(String.format("New cumulative RP Copy [%s] size after the operation would be : %s GB",copyName,SizeUtil.translateSize(newCgVolumeSizeInBytes,SizeUtil.SIZE_GB)));    Float multiplier=Float.valueOf(journalPolicy.substring(0,journalPolicy.length() - 1)).floatValue();    _log.info(String.format("Based on VirtualPool's journal policy, journal capacity required is : %s",(SizeUtil.translateSize(newCgVolumeSizeInBytes,SizeUtil.SIZE_GB) * multiplier)));    _log.info(String.format("Current allocated journal capacity : %s GB",SizeUtil.translateSize(cgJournalSizeInBytes,SizeUtil.SIZE_GB)));    if (cgJournalSizeInBytes < (newCgVolumeSizeInBytes * multiplier)) {      additionalJournalRequired=true;    }  }  StringBuilder msg=new StringBuilder();  msg.append(String.format("RP Copy [%s]: ",copyName));  if (additionalJournalRequired) {    msg.append("Additional journal required");  } else {    msg.append("Additional journal NOT required");  }  _log.info(msg.toString());  return additionalJournalRequired;}  }
class C{  @Override public boolean containsKey(Object key){  int hash=hash(key);  return segmentFor(hash).containsKey(key,hash);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  GreenrxnewsDao.createTable(db,ifNotExists);}  }
class C{  private Pair<Individuum,Individuum> recombineOptimized(Individuum parent1,Individuum parent2){  Pair<Individuum,Individuum> recombinePair;  TIntArrayList Q=new TIntArrayList(dim);  TIntArrayList R=new TIntArrayList(dim);  for (int i=0; i < dim; i++) {    if ((parent1.getGene()[i] == DONT_CARE) && (parent2.getGene()[i] != DONT_CARE)) {      Q.add(i);    }    if ((parent1.getGene()[i] != DONT_CARE) && (parent2.getGene()[i] == DONT_CARE)) {      Q.add(i);    }    if ((parent1.getGene()[i] != DONT_CARE) && (parent2.getGene()[i] != DONT_CARE)) {      R.add(i);    }  }  Individuum best=combineRecursive(R,0,Individuum.nullIndividuum(dim).getGene(),parent1,parent2);  short[] b=best.getGene();  int count=k - R.size();  TIntIterator q=Q.iterator();  while (count > 0) {    short[] l1=b.clone();    short[] l2=b.clone();    while (q.hasNext()) {      int next=q.next();{        boolean s1Null=(parent1.getGene()[next] == DONT_CARE);        boolean s2Null=(parent1.getGene()[next] == DONT_CARE);        l1[next]=parent1.getGene()[next];        l2[next]=parent2.getGene()[next];        final double sparsityL1=sparsity(computeSubspaceForGene(l1,ranges).size(),dbsize,k,phi);        final double sparsityL2=sparsity(computeSubspaceForGene(l2,ranges).size(),dbsize,k,phi);        if (sparsityL1 <= sparsityL2) {          b=l1.clone();          if (s1Null) {            count--;          }        } else {          b=l2.clone();          if (s2Null) {            count--;          }        }      }    }  }  short[] comp=new short[dim];  for (int i=0; i < dim; i++) {    if (b[i] == parent1.getGene()[i]) {      comp[i]=parent2.getGene()[i];    } else {      comp[i]=parent2.getGene()[i];    }  }  final Individuum i1=makeIndividuum(b);  final Individuum i2=makeIndividuum(comp);  recombinePair=new Pair<>(i1,i2);  return recombinePair;}  }
class C{  public ActionErrors validate(ActionMapping mapping,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if ((id == null || id.length() == 0) && (bldgId == null || bldgId.length() == 0)) {    errors.add("Building",new ActionMessage("errors.required","Building"));  }  if (name == null || name.equalsIgnoreCase("")) {    errors.add("Name",new ActionMessage("errors.required","Name"));  }  if (!room && name != null && name.length() > 0) {    Debug.info("checking location regex 2");    String nonUniversityLocationRegex=ApplicationProperty.NonUniversityLocationPattern.value();    String nonUniversityLocationInfo=ApplicationProperty.NonUniversityLocationPatternInfo.value();    if (nonUniversityLocationRegex != null && nonUniversityLocationRegex.trim().length() > 0) {      try {        Pattern pattern=Pattern.compile(nonUniversityLocationRegex);        Matcher matcher=pattern.matcher(name);        if (!matcher.find()) {          errors.add("nonUniversityLocation",new ActionMessage("errors.generic",nonUniversityLocationInfo));        }      } catch (      Exception e) {        errors.add("nonUniversityLocation",new ActionMessage("errors.generic","Non University Location cannot be matched to regular expression: " + nonUniversityLocationRegex + ". Reason: "+ e.getMessage()));      }    } else {      if (!WebTextValidation.isTextValid(name,true)) {        errors.add("nonUniversityLocation",new ActionMessage("errors.invalidCharacters","Name"));      }    }  }  if (room && name != null && name.length() > 0) {    if (id == null || id.length() == 0) {      if (bldgId != null && bldgId.length() > 0) {        try {          Room room=Room.findByBldgIdRoomNbr(Long.valueOf(bldgId),name,getSessionContext(request.getSession()).getUser().getCurrentAcademicSessionId());          if (room != null)           errors.add("Name",new ActionMessage("errors.exists",room.getLabel()));        } catch (        Exception e) {          e.printStackTrace();        }      }    } else {      try {        Room room=Room.findByBldgIdRoomNbr(new RoomDAO().get(Long.valueOf(id)).getBuilding().getUniqueId(),name,getSessionContext(request.getSession()).getUser().getCurrentAcademicSessionId());        if (room != null && !room.getUniqueId().toString().equals(id))         errors.add("Name",new ActionMessage("errors.exists",room.getLabel()));      } catch (      Exception e) {      }    }  }  if (capacity == null || capacity.equalsIgnoreCase("")) {    errors.add("Capacity",new ActionMessage("errors.required","Capacity"));  }  boolean exams=false;  for (  Boolean x : examEnabled.values())   if (x) {    exams=true;    break;  }  if (exams) {    if (examCapacity == null || examCapacity.equalsIgnoreCase("")) {      errors.add("examCapacity",new ActionMessage("errors.required","Examination Seating Capacity"));    }  }  return errors;}  }
class C{  @Override public int hashCode(){  if (hashCode == 0) {    int hash=0, multiplier=1;    for (int i=offset + count - 1; i >= offset; i--) {      hash+=value[i] * multiplier;      int shifted=multiplier << 5;      multiplier=shifted - multiplier;    }    hashCode=hash;  }  return hashCode;}  }
class C{  private StringBuffer createReusingIndent(StringBuffer buffer,int additional){  int refLength=computeVisualLength(buffer);  int addLength=fPrefs.prefIndentationSize * additional;  int totalLength=Math.max(0,refLength + addLength);  int minLength=Math.min(totalLength,refLength);  int tabSize=fPrefs.prefTabSize;  int maxCopyLength=tabSize > 0 ? minLength - minLength % tabSize : minLength;  stripExceedingChars(buffer,maxCopyLength);  int missing=totalLength - maxCopyLength;  final int tabs, spaces;  if (JavaCore.SPACE.equals(fPrefs.prefTabChar)) {    tabs=0;    spaces=missing;  } else   if (JavaCore.TAB.equals(fPrefs.prefTabChar)) {    tabs=tabSize > 0 ? missing / tabSize : 0;    spaces=tabSize > 0 ? missing % tabSize : missing;  } else   if (DefaultCodeFormatterConstants.MIXED.equals(fPrefs.prefTabChar)) {    tabs=tabSize > 0 ? missing / tabSize : 0;    spaces=tabSize > 0 ? missing % tabSize : missing;  } else {    Assert.isTrue(false);    return null;  }  for (int i=0; i < tabs; i++)   buffer.append('\t');  for (int i=0; i < spaces; i++)   buffer.append(' ');  return buffer;}  }
class C{  public AbstractPreferencesAction(Application app){  super(app);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.app.Labels");  labels.configureAction(this,ID);}  }
class C{  public Response createSystemProperty(SystemProperty property){  return restClient.post("system/properties",property,new HashMap<String,String>());}  }
class C{  public KnowledgeGraph(IKnowledge knowledge){  if (knowledge == null) {    throw new NullPointerException();  }  this.knowledge=knowledge;}  }
class C{  public void drawResultBitmap(Bitmap barcode){  resultBitmap=barcode;  invalidate();}  }
class C{  public void fillHeaderAndFooter(final HttpServletRequest request,final HttpServletResponse response,final Map<String,Object> dataModel) throws Exception {  fillHeader(request,response,dataModel);  fillFooter(dataModel);}  }
class C{  static double calculateNewMeanNonFinite(double previousMean,double value){  if (isFinite(previousMean)) {    return value;  } else   if (isFinite(value) || previousMean == value) {    return previousMean;  } else {    return NaN;  }}  }
class C{  private SignatureExtension(){}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (getClass() != obj.getClass())   return false;  NdefRecord other=(NdefRecord)obj;  if (!Arrays.equals(mId,other.mId))   return false;  if (!Arrays.equals(mPayload,other.mPayload))   return false;  if (mTnf != other.mTnf)   return false;  return Arrays.equals(mType,other.mType);}  }
class C{  public void normalize(){  normalizeTime();  normalizeDate();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_METHOD_BODY_2__POSTCONDITION_1:    getPostcondition_1().clear();  getPostcondition_1().addAll((Collection<? extends Postcondition_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  private boolean Routine_L51(){  ++gj;  idir=4;  if (gj > jee)   return true;  if (funcArray[gj - 1][gi - 1] <= cont) {    doInterpolation();    return true;  }  fij=funcArray[gj - 1][gi - 1];  return false;}  }
class C{  void start(){  thread.start();}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int col, row, numImages, x, y;  int cols, rows;  int a=0;  double noData;  double z, zn;  int progress=0;  String progressMessage="";  String inputFilesString=null;  String[] imageFiles;  long[] n;  double[] mean;  String[] shortNames;  String[] units;  double[] I;  double[] stdDev;  double totalDeviation;  int[] dX;  int[] dY;  double numerator, W;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (args[1].toLowerCase().contains("bishop")) {    dX=new int[]{1,1,-1,-1};    dY=new int[]{-1,1,1,-1};  } else   if (args[1].toLowerCase().contains("queen") || args[1].toLowerCase().contains("king")) {    dX=new int[]{1,1,1,0,-1,-1,-1,0};    dY=new int[]{-1,0,1,1,1,0,-1,-1};  } else {    dX=new int[]{1,0,-1,0};    dY=new int[]{0,1,0,-1};  }  try {    double sigmaZ;    n=new long[numImages];    mean=new double[numImages];    I=new double[numImages];    shortNames=new String[numImages];    units=new String[numImages];    stdDev=new double[numImages];    double[] E_I=new double[numImages];    double[] varNormality=new double[numImages];    double[] varRandomization=new double[numImages];    double[] zN=new double[numImages];    double[] zR=new double[numImages];    double[] pValueN=new double[numImages];    double[] pValueR=new double[numImages];    double[] data;    NormalDistribution distribution=new NormalDistribution(0,1);    for (a=0; a < numImages; a++) {      progressMessage="Image " + (a + 1) + " of "+ numImages;      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      if (!image.getZUnits().toLowerCase().equals("not specified")) {        units[a]=image.getZUnits();      } else {        units[a]="";      }      sigmaZ=0;      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            sigmaZ+=data[col];            n[a]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress(progressMessage,progress);      }      mean[a]=sigmaZ / n[a];      E_I[a]=-1.0 / (n[a] - 1);      totalDeviation=0;      W=0;      numerator=0;      double S2=0;      double wij;      int numNeighbours=dX.length;      double k=0;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          z=image.getValue(row,col);          if (z != noData) {            totalDeviation+=(z - mean[a]) * (z - mean[a]);            k+=(z - mean[a]) * (z - mean[a]) * (z - mean[a])* (z - mean[a]);            wij=0;            for (int i=0; i < numNeighbours; i++) {              x=col + dX[i];              y=row + dY[i];              zn=image.getValue(y,x);              if (zn != noData) {                W+=1.0;                numerator+=(z - mean[a]) * (zn - mean[a]);                wij+=1;              }            }            S2+=wij * wij;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress(progressMessage,progress);      }      double S1=4 * W;      S2=S2 * 4;      stdDev[a]=Math.sqrt(totalDeviation / (n[a] - 1));      I[a]=n[a] * numerator / (totalDeviation * W);      varNormality[a]=(n[a] * n[a] * S1 - n[a] * S2 + 3 * W * W) / ((W * W) * (n[a] * n[a] - 1));      zN[a]=(I[a] - E_I[a]) / (Math.sqrt(varNormality[a]));      pValueN[a]=2d * (1.0 - distribution.cumulativeProbability(Math.abs(zN[a])));      k=k / (n[a] * stdDev[a] * stdDev[a]* stdDev[a]* stdDev[a]);      varRandomization[a]=(n[a] * ((n[a] * n[a] - 3 * n[a] + 3) * S1 - n[a] * S2 + 3 * W * W) - k * (n[a] * n[a] - n[a]) * S1 - 2 * n[a] * S1 + 6 * W * W) / ((n[a] - 1) * (n[a] - 2) * (n[a] - 3)* W* W);      zR[a]=(I[a] - E_I[a]) / (Math.sqrt(varRandomization[a]));      pValueR[a]=2d * (1.0 - distribution.cumulativeProbability(Math.abs(zR[a])));      image.close();      progress=(int)(100f * (a + 1) / numImages);      updateProgress(progressMessage,progress);    }    StringBuilder retstr=new StringBuilder();    DecimalFormat df1=new DecimalFormat("###,###,###,###");    DecimalFormat df2=new DecimalFormat("0.0000");    retstr.append("SPATIAL AUTOCORRELATION\n");    for (a=0; a < numImages; a++) {      retstr.append("\n");      retstr.append("Input image:\t\t\t").append(shortNames[a]).append("\n");      retstr.append("Number of cells included:\t\t").append(df1.format(n[a])).append("\n");      if (units[a].equals("")) {        retstr.append("Mean of cells included:\t\t").append(df2.format(mean[a])).append("\n");      } else {        retstr.append("Mean of cells included:\t\t").append(df2.format(mean[a])).append(" ").append(units[a]).append("\n");      }      retstr.append("Spatial autocorrelation (Moran's I):\t").append(df2.format(I[a])).append("\n");      retstr.append("Expected value:\t\t").append(df2.format(E_I[a])).append("\n");      retstr.append("Variance of I (normality assumption):\t").append(df2.format(varNormality[a])).append("\n");      retstr.append("z test stat (normality assumption):\t").append(df2.format(zN[a])).append("\n");      retstr.append("p-value (normality assumption):\t").append(df2.format(pValueN[a])).append("\n");      retstr.append("Variance of I (randomization assumption):\t").append(df2.format(varRandomization[a])).append("\n");      retstr.append("z test stat (randomization assumption):\t").append(df2.format(zR[a])).append("\n");      retstr.append("p-value (randomization assumption):\t").append(df2.format(pValueR[a])).append("\n");    }    returnData(retstr.toString());  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public String directionalvectorfile(){  return directionalvectorfile;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:22.959 -0400",hash_original_method="51BAA3E17EE281D8C69C752DD3177A5C",hash_generated_method="762D67DB16D12CF9875B7202BDE6AA91") public Phaser(Phaser parent,int parties){  if (parties >>> PARTIES_SHIFT != 0)   throw new IllegalArgumentException("Illegal number of parties");  int phase=0;  this.parent=parent;  if (parent != null) {    final Phaser root=parent.root;    this.root=root;    this.evenQ=root.evenQ;    this.oddQ=root.oddQ;    if (parties != 0)     phase=parent.doRegister(1);  } else {    this.root=this;    this.evenQ=new AtomicReference<QNode>();    this.oddQ=new AtomicReference<QNode>();  }  this.state=(parties == 0) ? (long)EMPTY : ((long)phase << PHASE_SHIFT) | ((long)parties << PARTIES_SHIFT) | ((long)parties);}  }
class C{  public void present(Name name){  newPrereq(Record.newRecord(name,Type.ANY,DClass.ANY,0));}  }
class C{  public static CreateParticipant[] loadCreateParticipants(RefactoringStatus status,RefactoringProcessor processor,Object element,CreateArguments arguments,IParticipantDescriptorFilter filter,String affectedNatures[],SharableParticipants shared){  RefactoringParticipant[] participants=fgCreateInstance.getParticipants(status,processor,element,arguments,filter,affectedNatures,shared);  CreateParticipant[] result=new CreateParticipant[participants.length];  System.arraycopy(participants,0,result,0,participants.length);  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:51.187 -0400",hash_original_method="07EFFB45F13A753402042D39C7BA0023",hash_generated_method="F80CE9C4BB951ECBCF976BE9E62F662F") public static void write(File file,CharSequence data,String encoding) throws IOException {  write(file,data,encoding,false);}  }
class C{  public XATransactionDataSourceOnStandaloneConfigurationTest(String testName,EnvironmentTestData testData) throws Exception {  super(testName,testData);}  }
class C{  void push(){  ToHitData toHit=PushAttackAction.toHit(clientgui.getClient().getGame(),cen,target);  String title=Messages.getString("PhysicalDisplay.PushDialog.title",new Object[]{target.getDisplayName()});  String message=Messages.getString("PhysicalDisplay.PushDialog.message",new Object[]{toHit.getValueAsString(),new Double(Compute.oddsAbove(toHit.getValue(),ce().getCrew().getOptions().booleanOption(OptionsConstants.PILOT_APTITUDE_PILOTING))),toHit.getDesc()});  if (clientgui.doYesNoDialog(title,message)) {    disableButtons();    if (GUIPreferences.getInstance().getAutoDeclareSearchlight()) {      doSearchlight();    }    attacks.addElement(new PushAttackAction(cen,target.getTargetType(),target.getTargetId(),target.getPosition()));    ready();  }}  }
class C{  public boolean preserve_source_annotations(){  return soot.PhaseOptions.getBoolean(options,"preserve-source-annotations");}  }
class C{  public synchronized void cancel(){  cancelled=true;  tasks.reset();  this.notify();}  }
class C{  void fwd_state(Method m,Map<Integer,Integer> locals,SetMap<Block,Edge> pred,SetMap<Block,Expr> liveout,Map<Block,Deque<Expr>> stkout,Map<Block,Deque<Expr>> scpout,PriorityQueue<Block> work,Block b,Set<Expr> live,Deque<Expr> stk,Deque<Expr> scp,Deque<Object> verbose,Deque<Expr> out,Set<Expr> phis){  TreeMap<Block,Deque<Expr>> stkout2=new TreeMap<Block,Deque<Expr>>(stkout);  for (  Edge p : pred.get(b)) {    Block f=p.from;    Deque<Expr> stk2=clone_stk(phis,stk,p);    if (!stkout2.containsKey(f)) {      stkout2.put(f,stk2);    } else {      int prefix=stacks_equal(stk2,stkout2.get(f));      assert (stk.size() >= prefix);      while (stk.size() > prefix)       loadTOS(m,stk,scp,out,verbose,live,locals);    }  }  showstate(live,stk,scp,verbose);  for (  Edge p : pred.get(b)) {    Block f=p.from;    Set<Expr> live2=clone_live(phis,live,p);    if (liveout.get(f).addAll(live2))     work.add(f);    Deque<Expr> stk2=clone_stk(phis,stk,p);    if (!stkout.containsKey(f)) {      stkout.put(f,stk2);    } else {      int prefix=stacks_equal(stk2,stkout.get(f));      assert (stk2.size() == prefix && stkout.get(f).size() >= prefix);      if (stkout.get(f).size() > prefix) {        stkout.put(f,stk2);        work.add(f);        for (        Edge s : f.succ())         if (s.to != b)         work.add(s.to);      }    }  }}  }
class C{  public boolean rewriteExif(String filename,Collection<ExifTag> tags) throws FileNotFoundException, IOException {  RandomAccessFile file=null;  InputStream is=null;  boolean ret;  try {    File temp=new File(filename);    is=new BufferedInputStream(new FileInputStream(temp));    ExifParser parser=null;    try {      parser=ExifParser.parse(is,this);    } catch (    ExifInvalidFormatException e) {      throw new IOException("Invalid exif format : ",e);    }    long exifSize=parser.getOffsetToExifEndFromSOF();    is.close();    is=null;    file=new RandomAccessFile(temp,"rw");    long fileLength=file.length();    if (fileLength < exifSize) {      throw new IOException("Filesize changed during operation");    }    ByteBuffer buf=file.getChannel().map(MapMode.READ_WRITE,0,exifSize);    ret=rewriteExif(buf,tags);  } catch (  IOException e) {    closeSilently(file);    throw e;  } finally {    closeSilently(is);  }  file.close();  return ret;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageHeaders=null;  String outputHeader=null;  String outputSuffix=null;  int row, col;  double z;  double noData;  int progress;  int i, bin;  int numImages=0;  double minVal, maxVal;  int numBins=1024;  double clipPercentage=1.0;  String whichTailsToClip="both";  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputSuffix=" " + args[1].trim().replace(".dep","") + ".dep";  clipPercentage=Double.parseDouble(args[2]);  whichTailsToClip=args[3].toLowerCase();  numBins=Integer.parseInt(args[4]);  if ((inputFilesString == null) || (outputSuffix == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageHeaders=inputFilesString.split(";");    numImages=imageHeaders.length;    for (i=0; i < numImages; i++) {      WhiteboxRaster image=new WhiteboxRaster(imageHeaders[i],"r");      int nRows=image.getNumberRows();      int nCols=image.getNumberColumns();      noData=image.getNoDataValue();      double[] data=null;      double inputImageMin=image.getMinimumValue();      double inputImageMax=image.getMaximumValue();      int inputImageBins=(int)(inputImageMax - inputImageMin + 1);      double inputImageRange=inputImageMax - inputImageMin;      double[] histo=new double[inputImageBins];      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            bin=(int)(data[col] - inputImageMin);            if (bin < 0) {              bin=0;            }            if (bin > (inputImageBins - 1)) {              bin=(inputImageBins - 1);            }            histo[bin]++;          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Calculating clip values:",progress);      }      for (int a=1; a < inputImageBins; a++) {        histo[a]=histo[a] + histo[a - 1];      }      for (int a=0; a < inputImageBins; a++) {        histo[a]=histo[a] / histo[inputImageBins - 1] * 100;      }      boolean lowerTailFound=false;      boolean upperTailFound=false;      minVal=-1;      maxVal=-1;      if (whichTailsToClip.contains("both")) {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= clipPercentage && !lowerTailFound) {            minVal=(a - 1 + inputImageMin) + (clipPercentage - histo[a - 1]) / (histo[a] - histo[a - 1]);            lowerTailFound=true;          }          if (histo[a] >= (100 - clipPercentage) && !upperTailFound) {            maxVal=(a - 1 + inputImageMin) + ((100 - clipPercentage) - histo[a - 1]) / (histo[a] - histo[a - 1]);            upperTailFound=true;            break;          }        }      } else       if (whichTailsToClip.contains("lower")) {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= clipPercentage && !lowerTailFound) {            minVal=(a - 1 + inputImageMin) + (clipPercentage - histo[a - 1]) / (histo[a] - histo[a - 1]);            lowerTailFound=true;            break;          }        }        maxVal=inputImageMax;      } else {        for (int a=1; a < inputImageBins; a++) {          if (histo[a] >= (100 - clipPercentage) && !upperTailFound) {            maxVal=(a - 1 + inputImageMin) + ((100 - clipPercentage) - histo[a - 1]) / (histo[a] - histo[a - 1]);            upperTailFound=true;            break;          }        }        minVal=inputImageMin;      }      double scaleFactor=numBins / (maxVal - minVal);      outputHeader=imageHeaders[i].replace(".dep",outputSuffix);      WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageHeaders[i],WhiteboxRaster.DataType.INTEGER,noData);      output.setPreferredPalette(image.getPreferredPalette());      for (row=0; row < nRows; row++) {        data=image.getRowValues(row);        for (col=0; col < nCols; col++) {          if (data[col] != noData) {            z=(int)(data[col] - minVal) * scaleFactor;            if (z < 0) {              z=0;            }            if (z > (numBins - 1)) {              z=(numBins - 1);            }            output.setValue(row,col,z);          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      }      image.close();      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      output.close();    }    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void test_addSubjectAlternativeNameLintLjava_lang_String2() throws Exception {  GeneralName san6=new GeneralName(6,"http://uniform.Resource.Id");  GeneralName san2=new GeneralName(2,"dNSName");  GeneralNames sans1=new GeneralNames();  sans1.addName(san6);  sans1.addName(san2);  X509CertSelector selector=new X509CertSelector();  selector.addSubjectAlternativeName(6,"http://uniform.Resource.Id");  selector.addSubjectAlternativeName(2,"dNSName");  GeneralNames sans2=new GeneralNames();  sans2.addName(san2);  TestCert cert1=new TestCert(sans1);  TestCert cert2=new TestCert(sans2);  assertTrue(selector.match(cert1));  assertFalse(selector.match(cert2));  selector.setSubjectAlternativeNames(null);  GeneralName name=new GeneralName(new Name("O=Android"));  try {    selector.addSubjectAlternativeName(0,(name.toString()));  } catch (  IOException e) {  }}  }
class C{  public void carriagReturn(){  int rows=getRows();  int cols=getCols();  if (attributes.print == DTVCCDirection.LEFT_TO_RIGHT) {    penX=0;  } else   if (attributes.print == DTVCCDirection.RIGHT_TO_LEFT) {    penX=cols - 1;  } else   if (attributes.print == DTVCCDirection.TOP_TO_BOTTOM) {    penY=0;  } else   if (attributes.print == DTVCCDirection.BOTTOM_TO_TOP) {    penY=rows - 1;  }  if (attributes.scroll == DTVCCDirection.TOP_TO_BOTTOM) {    if (penY - 1 < 0) {      if (visible && ccSubtitleHandler != null)       ccSubtitleHandler.addRollupRect(id,attributes.scroll);      dirty=true;      for (int x=rows - 2; x >= 0; x--) {        System.arraycopy(buffer[x],0,buffer[x + 1],0,cols);        System.arraycopy(cellFormat[x],0,cellFormat[x + 1],0,cols);      }      for (int x=0; x < cols; x++) {        buffer[0][x]=0;        cellFormat[0][x]=currentFormatFill;      }    } else {      penY--;    }  } else   if (attributes.scroll == DTVCCDirection.BOTTOM_TO_TOP) {    if (penY + 1 >= rows) {      if (visible && ccSubtitleHandler != null)       ccSubtitleHandler.addRollupRect(id,attributes.scroll);      dirty=true;      for (int x=1; x < rows; x++) {        System.arraycopy(buffer[x],0,buffer[x - 1],0,cols);        System.arraycopy(cellFormat[x],0,cellFormat[x - 1],0,cols);      }      for (int x=0; x < cols; x++) {        buffer[rows - 1][x]=0;        cellFormat[rows - 1][x]=currentFormatFill;      }    } else {      penY++;    }  } else   if (attributes.scroll == DTVCCDirection.LEFT_TO_RIGHT) {    if (penX - 1 < 0) {      if (visible && ccSubtitleHandler != null)       ccSubtitleHandler.addRollupRect(id,attributes.scroll);      dirty=true;      for (int x=cols - 2; x >= 0; x--) {        for (int i=0; i < rows; i++) {          buffer[i][x + 1]=buffer[i][x];          cellFormat[i][x + 1]=cellFormat[i][x];        }      }      for (int x=0; x < rows; x++) {        buffer[x][0]=0;        cellFormat[x][0]=currentFormatFill;      }    } else {      penX--;    }  } else   if (attributes.scroll == DTVCCDirection.RIGHT_TO_LEFT) {    if (penX + 1 >= rows) {      if (visible && ccSubtitleHandler != null)       ccSubtitleHandler.addRollupRect(id,attributes.scroll);      dirty=true;      for (int x=1; x < cols; x++) {        for (int i=0; i < rows; i++) {          buffer[i][x]=buffer[i][x - 1];          cellFormat[i][x]=cellFormat[i][x - 1];        }      }      for (int x=0; x < rows; x++) {        buffer[x][cols - 1]=0;        cellFormat[x][cols - 1]=currentFormatFill;      }    } else {      penX++;    }  }  possiblyFlush();}  }
class C{  public static boolean isDoubleClick(MouseEvent e){  return ((e.getButton() == MouseEvent.BUTTON1) && (e.getClickCount() == 2));}  }
class C{  public void clear(){  throwExceptionIfLocked();  state.value=null;  state.attributes=null;  state.elements=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void testLoad() throws Exception {  Puzzle puz=IO.loadNative(new DataInputStream(IOTest.class.getResourceAsStream("/test.puz")));  System.out.println("Loaded.");  Box[][] boxes=puz.getBoxes();  for (int x=0; x < boxes.length; x++) {    for (int y=0; y < boxes[x].length; y++) {      System.out.print(boxes[x][y] == null ? "_ " : boxes[x][y].getSolution() + " ");    }    System.out.println();  }  System.out.println("One across: " + puz.findAcrossClue(1));  System.out.println("14  across: " + puz.findAcrossClue(14));  System.out.println("18  down  : " + puz.findDownClue(18));  System.out.println("2 down: " + puz.findDownClue(2));}  }
class C{  protected int examineExample(int i2) throws Exception {  double alpha2=m_alpha[i2];  double alpha2Star=m_alphaStar[i2];  double C2=m_C;  double C2Star=m_C;  double phi2=m_error[i2];  double phi2b=phi2 - m_b;  if ((phi2b > m_epsilon && alpha2Star < C2Star) || (phi2b < m_epsilon && alpha2Star > 0) || (-phi2b > m_epsilon && alpha2 < C2)|| (-phi2b > m_epsilon && alpha2 > 0)) {    int i1=secondChoiceHeuristic(i2);    if (i1 >= 0 && (takeStep(i1,i2,alpha2,alpha2Star,phi2) > 0)) {      return 1;    }    for (i1=0; i1 < m_target.length; i1++) {      if ((m_alpha[i1] > 0 && m_alpha[i1] < m_C) || (m_alphaStar[i1] > 0 && m_alphaStar[i1] < m_C)) {        if (takeStep(i1,i2,alpha2,alpha2Star,phi2) > 0) {          return 1;        }      }    }    for (i1=0; i1 < m_target.length; i1++) {      if (takeStep(i1,i2,alpha2,alpha2Star,phi2) > 0) {        return 1;      }    }  }  return 0;}  }
class C{  public SmallDocSet union(SmallDocSet other){  SmallDocSet bigger;  SmallDocSet smaller;  if (other.intSet.size() > this.intSet.size()) {    bigger=other;    smaller=this;  } else {    bigger=this;    smaller=other;  }  for (  int v : smaller.intSet.keys) {    if (v == smaller.intSet.emptyVal)     continue;    bigger.set(v);  }  return bigger;}  }
class C{  public void firePropertyChange(final PropertyChangeEvent evt){  propertySupport.firePropertyChange(evt);}  }
class C{  private boolean allMatch(final Request request) throws IOException {  boolean success=true;  for (  final Pass pass : this.all) {    if (!pass.enter(request).has()) {      success=false;      break;    }  }  return success;}  }
class C{  public static DocAttributeSet unmodifiableView(DocAttributeSet attributeSet){  if (attributeSet == null) {    throw new NullPointerException();  }  return new UnmodifiableDocAttributeSet(attributeSet);}  }
class C{  public void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle){  DebugGraphicsInfo info=info();  if (debugLog()) {    info().log(toShortString() + " Drawing arc: " + new Rectangle(x,y,width,height)+ " startAngle: "+ startAngle+ " arcAngle: "+ arcAngle);  }  if (isDrawingBuffer()) {    if (debugBuffered()) {      Graphics debugGraphics=debugGraphics();      debugGraphics.drawArc(x,y,width,height,startAngle,arcAngle);      debugGraphics.dispose();    }  } else   if (debugFlash()) {    Color oldColor=getColor();    int i, count=(info.flashCount * 2) - 1;    for (i=0; i < count; i++) {      graphics.setColor((i % 2) == 0 ? info.flashColor : oldColor);      graphics.drawArc(x,y,width,height,startAngle,arcAngle);      Toolkit.getDefaultToolkit().sync();      sleep(info.flashTime);    }    graphics.setColor(oldColor);  }  graphics.drawArc(x,y,width,height,startAngle,arcAngle);}  }
class C{  public MessageServiceException(Throwable rootCause){  super(String.valueOf(rootCause));  _rootCause=rootCause;}  }
class C{  protected static SampleModel fixSampleModel(CachableRed src){  SampleModel sm=src.getSampleModel();  ColorModel cm=src.getColorModel();  boolean alpha=false;  if (cm != null)   alpha=cm.hasAlpha(); else {switch (sm.getNumBands()) {case 1:case 3:      alpha=false;    break;default :  alpha=true;break;}}if (alpha) return new SinglePixelPackedSampleModel(DataBuffer.TYPE_INT,sm.getWidth(),sm.getHeight(),new int[]{0xFF0000,0xFF00,0xFF,0xFF000000}); else return new SinglePixelPackedSampleModel(DataBuffer.TYPE_INT,sm.getWidth(),sm.getHeight(),new int[]{0xFF0000,0xFF00,0xFF});}  }
class C{  public void testNonStandardConnectionCollation() throws Exception {  if (versionMeetsMinimum(4,1)) {    String collationToSet="utf8_bin";    String characterSet="utf-8";    Properties props=new Properties();    props.setProperty("connectionCollation",collationToSet);    props.setProperty("characterEncoding",characterSet);    Connection collConn=null;    Statement collStmt=null;    ResultSet collRs=null;    try {      collConn=getConnectionWithProps(props);      collStmt=collConn.createStatement();      collRs=collStmt.executeQuery("SHOW VARIABLES LIKE 'collation_connection'");      assertTrue(collRs.next());      assertTrue(collationToSet.equalsIgnoreCase(collRs.getString(2)));    }  finally {      if (collConn != null) {        collConn.close();      }    }  }}  }
class C{  protected void afterAddInstance(KDTreeNode node){  node.m_Start++;  node.m_End++;  if (!node.isALeaf()) {    afterAddInstance(node.m_Left);    afterAddInstance(node.m_Right);  }}  }
class C{  public static String toQueryString(Map<String,List<String>> parameterMap){  StringBuilder queryString=new StringBuilder();  for (  Entry<String,List<String>> entry : parameterMap.entrySet()) {    String name=encodeURL(entry.getKey());    for (    String value : entry.getValue()) {      if (queryString.length() > 0) {        queryString.append("&");      }      queryString.append(name).append("=").append(encodeURL(value));    }  }  return queryString.toString();}  }
class C{  public StreamHandler(OutputStream out,Formatter formatter){  sealed=false;  configure();  setFormatter(formatter);  setOutputStream(out);  sealed=true;}  }
class C{  public static void main(String[] args){  TemplateComplete tester=new TemplateComplete();  int actualExitCode=run(tester,ARGS,TEST,NEGATED_TEST);  tester.checkExitCode(EXPECTED_EXIT_CODE,actualExitCode);  tester.runDiffs(FILES_TO_DIFF,false);  tester.printSummary();}  }
class C{  public boolean isValid(String domain){  if (domain == null) {    return false;  }  domain=unicodeToASCII(domain);  if (domain.length() > 253) {    return false;  }  String[] groups=domainRegex.match(domain);  if (groups != null && groups.length > 0) {    return isValidTld(groups[0]);  }  return allowLocal && hostnameRegex.isValid(domain);}  }
class C{  private LinkedList createServerList(File data) throws Exception {  Digester digester=new Digester();  digester.setUseContextClassLoader(true);  digester.addObjectCreate("config",LinkedList.class);  digester.addObjectCreate("config/server",null,"className");  digester.addSetProperties("config/server");  digester.addObjectCreate("config/server/rule",null,"className");  digester.addSetProperties("config/server/rule");  digester.addSetNext("config/server/rule","setRule");  digester.addObjectCreate("config/server/composite-rule",null,"className");  digester.addSetProperties("config/server/composite-rule");  digester.addObjectCreate("config/server/composite-rule/rule",null,"className");  digester.addSetProperties("config/server/composite-rule/rule");  digester.addSetNext("config/server/composite-rule/rule","addRule");  digester.addSetNext("config/server/composite-rule","setRule");  digester.addSetNext("config/server","add");  digester.addObjectCreate("config/cluster-server",null,"className");  digester.addSetProperties("config/cluster-server");  digester.addCallMethod("config/cluster-server/server","addServer",2);  digester.addCallParam("config/cluster-server/server",0,"domainName");  digester.addCallParam("config/cluster-server/server",1,"path");  digester.addObjectCreate("config/cluster-server/rule",null,"className");  digester.addSetProperties("config/cluster-server/rule");  digester.addSetNext("config/cluster-server/rule","setRule");  digester.addObjectCreate("config/cluster-server/composite-rule",null,"className");  digester.addSetProperties("config/cluster-server/composite-rule");  digester.addObjectCreate("config/cluster-server/composite-rule/rule",null,"className");  digester.addSetProperties("config/cluster-server/composite-rule/rule");  digester.addSetNext("config/cluster-server/composite-rule/rule","addRule");  digester.addSetNext("config/cluster-server/composite-rule","setRule");  digester.addSetNext("config/cluster-server","add");  return (LinkedList)digester.parse(data);}  }
class C{  private Ed25519GroupElement precomputedAdd(final Ed25519GroupElement g){  if (this.coordinateSystem != CoordinateSystem.P3) {    throw new UnsupportedOperationException();  }  if (g.coordinateSystem != CoordinateSystem.PRECOMPUTED) {    throw new IllegalArgumentException();  }  final Ed25519FieldElement YPlusX;  final Ed25519FieldElement YMinusX;  final Ed25519FieldElement A;  final Ed25519FieldElement B;  final Ed25519FieldElement C;  final Ed25519FieldElement D;  YPlusX=this.Y.add(this.X);  YMinusX=this.Y.subtract(this.X);  A=YPlusX.multiply(g.X);  B=YMinusX.multiply(g.Y);  C=g.Z.multiply(this.T);  D=this.Z.add(this.Z);  return p1xp1(A.subtract(B),A.add(B),D.add(C),D.subtract(C));}  }
class C{  protected Object invokeCallback(Object[] params){  return invokeCallback(params,DEFAULT_EXCEPTION_INFO);}  }
class C{  public TIntObjectHashMap(){  _hashingStrategy=this;}  }
class C{  public AnnotationVisitor visitAnnotation(String desc,boolean visible){  if (cv != null) {    return cv.visitAnnotation(desc,visible);  }  return null;}  }
class C{  protected static int intProperty(String name,int dflt){  String val=property(name);  return val != null ? Integer.parseInt(val) : dflt;}  }
class C{  public static AnimatablePaintValue createURIPaintValue(AnimationTarget target,String uri){  AnimatablePaintValue v=new AnimatablePaintValue(target);  v.uri=uri;  v.paintType=PAINT_URI;  return v;}  }
class C{  private void scrollPage(ScrollDirection direction){  int inc=direction == ScrollDirection.DOWN ? 1 : -1;  int y=mScrollView.getScrollY();  int n=mPageBreaks.size();  for (int i=(inc > 0) ? 0 : n - 1; i >= 0 && i < n; i+=inc) {    int deltaY=mPageBreaks.get(i) - y;    if (inc * deltaY > 0) {      mScrollView.smoothScrollTo(0,y + deltaY);      break;    }  }}  }
class C{  public ListTypeVersioningV2(ListTypeVersioningV2 other){  if (other.isSetStrings()) {    List<String> __this__strings=new ArrayList<String>(other.strings);    this.strings=__this__strings;  }  if (other.isSetHello()) {    this.hello=other.hello;  }}  }
class C{  private void fillBuf() throws IOException {  int result=in.read(buf,0,buf.length);  if (result == -1) {    throw new EOFException();  }  pos=0;  end=result;}  }
class C{  public BeanDescriptor(Class<?> beanClass){  this(beanClass,null);}  }
class C{  public CramerShoupParameters generateParameters(){  BigInteger[] safePrimes=ParametersHelper.generateSafePrimes(size,certainty,random);  BigInteger q=safePrimes[1];  BigInteger g1=ParametersHelper.selectGenerator(q,random);  BigInteger g2=ParametersHelper.selectGenerator(q,random);  while (g1.equals(g2)) {    g2=ParametersHelper.selectGenerator(q,random);  }  return new CramerShoupParameters(q,g1,g2,new SHA256Digest());}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public void resetMultiInfoCoherenceCalculator(){  miCalc.initialise(numSources + 1);}  }
class C{  public List<Instruction> reduceInstructions(final List<Instruction> instructions){  lock.lock();  try {    this.instructions=instructions;    stackSizeSimulator.buildStackSizes(instructions);    return reduceInstructionsInternal(instructions);  }  finally {    lock.unlock();  }}  }
class C{  protected final static long addMod3(final long x,final long y){  final long xy=x | y;  long mask=(xy << 1) & xy;  mask|=x & y;  mask&=0x5555555555555555L << 1;  mask|=mask >>> 1;  return x + y - mask;}  }
class C{  public void updateInventory(UpdateInventoryInput input) throws Exception {  int sleep=ran.nextInt(1000);  Thread.sleep(sleep);  System.out.println("Inventory " + input.getPartId() + " updated");}  }
class C{  public void fireIndexedPropertyChange(String propertyName,int index,int oldValue,int newValue){  if (oldValue != newValue) {    fireIndexedPropertyChange(propertyName,index,Integer.valueOf(oldValue),Integer.valueOf(newValue));  }}  }
class C{  long adjustBillingPeriodEnd(PriceModelHistory pmHistory){  if (pmHistory.getType() == org.oscm.internal.types.enumtypes.PriceModelType.PER_UNIT) {    return PricingPeriodDateConverter.getStartTime(billingInput.getBillingPeriodEnd(),pmHistory.getPeriod()).getTimeInMillis();  } else {    return billingInput.getBillingPeriodEnd();  }}  }
class C{  public void zoomToFitPage(boolean forceZoom){  PCamera camera=canvas.getCamera();  if ((autoZoomMode && editMode.isSelection()) || forceZoom) {    PBounds filtered=new PBounds();    Iterator iterator=canvas.getLayer().getChildrenIterator();    while (iterator.hasNext()) {      PNode node=(PNode)iterator.next();      if (node.getVisible()) {        filtered.add(node.getFullBounds());      }    }    PBounds adjustedFiltered=new PBounds(filtered.getX() - 10,filtered.getY() - 10,filtered.getWidth() + 20,filtered.getHeight() + 20);    camera.setViewBounds(adjustedFiltered);  }}  }
class C{  public void changedUpdate(DocumentEvent e,Shape a,ViewFactory f){  updateChildren(e,a);}  }
class C{  public VNXeCommandResult attachSnap(String snapId){  _logger.info("attaching snap:",snapId);  SnapRequests req=new SnapRequests(_khClient);  return req.attachSnapSync(snapId);}  }
class C{  public static SAXParser newSAXParser(String schemaLanguage,boolean namespaceAware,boolean validating,Source... schemas) throws SAXException, ParserConfigurationException {  SAXParserFactory factory=SAXParserFactory.newInstance();  factory.setValidating(validating);  factory.setNamespaceAware(namespaceAware);  if (schemas.length != 0) {    SchemaFactory schemaFactory=SchemaFactory.newInstance(schemaLanguage);    factory.setSchema(schemaFactory.newSchema(schemas));  }  SAXParser saxParser=factory.newSAXParser();  if (schemas.length == 0) {    saxParser.setProperty("http://java.sun.com/xml/jaxp/properties/schemaLanguage",schemaLanguage);  }  return saxParser;}  }
class C{  public static String toString(final InputStream input,final Charset encoding) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  IOUtils.copy(input,sw,encoding);  return sw.toString();}  }
class C{  final ActivityRecord topRunningActivityLocked(IBinder token,int taskId){  int i=mHistory.size() - 1;  while (i >= 0) {    ActivityRecord r=mHistory.get(i);    if (!r.finishing && (token != r.appToken) && (taskId != r.task.taskId)&& okToShow(r)) {      return r;    }    i--;  }  return null;}  }
class C{  private String lines(int startLine,String s){  String lines[]=s.split("\\r?\\n");  return linesToString(startLine,lines);}  }
class C{  public BindableElement(String prefix,AbstractDocument owner,String ns,String ln){  super(prefix,owner);  namespaceURI=ns;  localName=ln;}  }
class C{  private int parseFrameContentLength(final byte[] b,final int off) throws ParseException {  frameContentLength_=PrimitivesParser.parseInt(b,off);  if (frameContentLength_ < 0) {    throw new BadCiphertextException("Invalid frame length in ciphertext");  }  return Integer.SIZE / Byte.SIZE;}  }
class C{  public void init(Controller c){  super.init(c);  display=new Display3D(600,600,this,1);  display.attach(cellPortrayal,"HyperCycle Cells");  cellPortrayal.valueName="HyperCycle Cells";  HyperCycleSimulation hcsState=(HyperCycleSimulation)state;  HyperCycleParameters p=hcsState.getParameters();  display.translate((p.getWidth() - 1) / -2.0,(p.getHeight() - 1) / -2.0,0);  display.scale(1.0 / Math.max(p.getWidth(),p.getHeight()));  displayFrame=display.createFrame();  c.registerFrame(displayFrame);  displayFrame.setVisible(true);}  }
class C{  public synchronized void addUnencodedNativeForFlavor(DataFlavor flav,String nat){  Objects.requireNonNull(nat,"Null native not permitted");  Objects.requireNonNull(flav,"Null flavor not permitted");  LinkedHashSet<String> natives=getFlavorToNative().get(flav);  if (natives == null) {    natives=new LinkedHashSet<>(1);    getFlavorToNative().put(flav,natives);  }  natives.add(nat);  nativesForFlavorCache.remove(flav);}  }
class C{  public void show(String toast){  Toast.makeText(context,toast,Toast.LENGTH_SHORT).show();}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(0);  newVector.addElement(new Option("\tInitial structure is empty (instead of Naive Bayes)","N",0,"-N"));  newVector.addElement(new Option("\tMaximum number of parents","P",1,"-P <nr of parents>"));  newVector.addElement(new Option("\tRandom order.\n" + "\t(default false)","R",0,"-R"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  @Override public boolean check(final CertificateToken certificateToken){  if (certificateToken == null) {    throw new NullPointerException();  }  List<String> contextPolicyIdentifiers=DSSASN1Utils.getPolicyIdentifiers(certificateToken);  return contextPolicyIdentifiers.contains(policyOid);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private void adjustRight(RectF rect,float right,RectF bounds,int viewWidth,float snapMargin,float aspectRatio,boolean topMoves,boolean bottomMoves){  float newRight=right;  if (newRight > viewWidth) {    newRight=viewWidth + (newRight - viewWidth) / 1.05f;    mTouchOffset.x-=(newRight - viewWidth) / 1.1f;  }  if (newRight > bounds.right) {    mTouchOffset.x-=(newRight - bounds.right) / 2f;  }  if (bounds.right - newRight < snapMargin) {    newRight=bounds.right;  }  if (newRight - rect.left < mMinCropWidth) {    newRight=rect.left + mMinCropWidth;  }  if (newRight - rect.left > mMaxCropWidth) {    newRight=rect.left + mMaxCropWidth;  }  if (bounds.right - newRight < snapMargin) {    newRight=bounds.right;  }  if (aspectRatio > 0) {    float newHeight=(newRight - rect.left) / aspectRatio;    if (newHeight < mMinCropHeight) {      newRight=Math.min(bounds.right,rect.left + mMinCropHeight * aspectRatio);      newHeight=(newRight - rect.left) / aspectRatio;    }    if (newHeight > mMaxCropHeight) {      newRight=Math.min(bounds.right,rect.left + mMaxCropHeight * aspectRatio);      newHeight=(newRight - rect.left) / aspectRatio;    }    if (topMoves && bottomMoves) {      newRight=Math.min(newRight,Math.min(bounds.right,rect.left + bounds.height() * aspectRatio));    } else {      if (topMoves && rect.bottom - newHeight < bounds.top) {        newRight=Math.min(bounds.right,rect.left + (rect.bottom - bounds.top) * aspectRatio);        newHeight=(newRight - rect.left) / aspectRatio;      }      if (bottomMoves && rect.top + newHeight > bounds.bottom) {        newRight=Math.min(newRight,Math.min(bounds.right,rect.left + (bounds.bottom - rect.top) * aspectRatio));      }    }  }  rect.right=newRight;}  }
class C{  public static Observable<Boolean> observeInternetConnectivity(final int initialIntervalInMs,final int intervalInMs,final String host,final int port,final int timeoutInMs){  return observeInternetConnectivity(initialIntervalInMs,intervalInMs,host,port,timeoutInMs,new DefaultSocketErrorHandler());}  }
class C{  public static double toDoubleValue(boolean b){  return b ? 1 : 0;}  }
class C{  static void put(long ptr,long[] arr){  for (int i=0; i < arr.length; i++, ptr+=getLongSize()) {    putLong(ptr,arr[i]);  }}  }
class C{  public Sha256Hash hashForSignature(int inputIndex,byte[] connectedScript,byte sigHashType){  try {    Transaction tx=this.params.getDefaultSerializer().makeTransaction(this.bitcoinSerialize());    for (int i=0; i < tx.inputs.size(); i++) {      tx.inputs.get(i).clearScriptBytes();    }    connectedScript=Script.removeAllInstancesOfOp(connectedScript,ScriptOpCodes.OP_CODESEPARATOR);    TransactionInput input=tx.inputs.get(inputIndex);    input.setScriptBytes(connectedScript);    if ((sigHashType & 0x1f) == SigHash.NONE.value) {      tx.outputs=new ArrayList<TransactionOutput>(0);      for (int i=0; i < tx.inputs.size(); i++)       if (i != inputIndex)       tx.inputs.get(i).setSequenceNumber(0);    } else     if ((sigHashType & 0x1f) == SigHash.SINGLE.value) {      if (inputIndex >= tx.outputs.size()) {        return Sha256Hash.wrap("0100000000000000000000000000000000000000000000000000000000000000");      }      tx.outputs=new ArrayList<TransactionOutput>(tx.outputs.subList(0,inputIndex + 1));      for (int i=0; i < inputIndex; i++)       tx.outputs.set(i,new TransactionOutput(tx.params,tx,Coin.NEGATIVE_SATOSHI,new byte[]{}));      for (int i=0; i < tx.inputs.size(); i++)       if (i != inputIndex)       tx.inputs.get(i).setSequenceNumber(0);    }    if ((sigHashType & SigHash.ANYONECANPAY.value) == SigHash.ANYONECANPAY.value) {      tx.inputs=new ArrayList<TransactionInput>();      tx.inputs.add(input);    }    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(tx.length == UNKNOWN_LENGTH ? 256 : tx.length + 4);    tx.bitcoinSerialize(bos);    uint32ToByteStreamLE(0x000000ff & sigHashType,bos);    Sha256Hash hash=Sha256Hash.twiceOf(bos.toByteArray());    bos.close();    return hash;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public String convertChoiceKindToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public static List<URL> lsResources(Class clazz,String path) throws URISyntaxException, IOException {  URL dirURL=clazz.getResource(path);  if (dirURL == null) {    ClassLoader loader=Thread.currentThread().getContextClassLoader();    dirURL=loader.getResource(path);  }  if (dirURL == null) {    return new ArrayList<>();  }  String dirPath=dirURL.getPath();  if (dirURL.getProtocol().equals("file")) {    String[] list=new File(dirURL.toURI()).list();    List<URL> urls=new ArrayList<>();    if (list == null) {      urls.add(dirURL);    } else {      for (      String l : list) {        URL url=(new File(dirPath + File.separator + l)).toURI().toURL();        urls.add(url);      }    }    return urls;  }  if (dirURL.getProtocol().equals("jar")) {    int exclamation=dirPath.indexOf("!");    String jarPath=dirPath.substring(5,exclamation);    String jarRoot=dirPath.substring(0,exclamation + 1);    JarFile jar=new JarFile(URLDecoder.decode(jarPath,"UTF-8"));    Enumeration<JarEntry> entries=jar.entries();    List<URL> urls=new ArrayList<>();    while (entries.hasMoreElements()) {      JarEntry element=entries.nextElement();      String name=element.getName();      if (name.startsWith(path) && !name.equals(path + "/")) {        URL url=new URL("jar:" + jarRoot + "/"+ name);        urls.add(url);      }    }    return urls;  }  throw new UnsupportedOperationException("Cannot list files for URL " + dirURL);}  }
class C{  private void readChatWhatsappMessages() throws IOException {  if (Cfg.DEBUG) {    Check.log(TAG + " (readChatMessages)");  }  if (!readChatSemaphore.tryAcquire()) {    if (Cfg.DEBUG) {      Check.log(TAG + " (readChatMessages), semaphore red");    }    return;  }  try {    long lastWhatsapp=markup.unserialize(new Long(0));    boolean updateMarkup=false;    String dbDir=M.e("/data/data/com.whatsapp/databases");    String dbFile=M.e("/msgstore.db");    if (Path.unprotect(dbDir,dbFile,true)) {      if (Cfg.DEBUG) {        Check.log(TAG + " (readChatWhatsappMessages): can read DB");      }      GenericSqliteHelper helper=GenericSqliteHelper.openCopy(dbDir,dbFile);      if (helper == null) {        if (Cfg.DEBUG) {          Check.log(TAG + " (readChatWhatsappMessages) Error, file not readable: " + dbFile);        }        return;      }      try {        SQLiteDatabase db=helper.getReadableDatabase();        ArrayList<String> changedConversations=fetchConversation(db,lastWhatsapp);        long newLastRead=lastWhatsapp;        for (        String conversation : changedConversations) {          if (groups.isGroup(conversation) && !groups.hasMemoizedGroup(conversation)) {            fetchGroup(helper,conversation);          }          newLastRead=fetchMessages(db,conversation,lastWhatsapp);          if (Cfg.DEBUG) {            Check.log(TAG + " (readChatMessages): fetchMessages " + conversation+ " newLastRead "+ newLastRead);          }          updateMarkup=true;        }        if (updateMarkup) {          if (Cfg.DEBUG) {            Check.log(TAG + " (readChatMessages): updating markup");          }          markup.writeMarkupSerializable(newLastRead);        }      }  finally {        helper.disposeDb();      }    } else {      if (Cfg.DEBUG) {        Check.log(TAG + " (readChatMessages) Error, file not readable: " + dbFile);      }    }  }  finally {    readChatSemaphore.release();  }}  }
class C{  public void put(int[] data){  final int l=data.length;  int i=0;  while (i < l) {    final int val=data[l];    min=val < min ? val : min;    max=val > max ? val : max;  }}  }
class C{  @Override protected void onDraw(Canvas canvas){  super.onDraw(canvas);  drawDimmedLayer(canvas);  drawCropGrid(canvas);}  }
class C{  public void mouseReleased(MouseEvent e){  startDrag=true;}  }
class C{  public void removeCheckConstraint(){  checkConstraint=null;  checkConstraintSQL=null;}  }
class C{  public ComputeTaskTimeoutCheckedException(String msg,@Nullable Throwable cause){  super(msg,cause);}  }
class C{  protected void drawPoints(Canvas canvas,Paint paint,List<Float> pointsList,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  if (isRenderPoints(seriesRenderer)) {    ScatterChart pointsChart=getPointsChart();    if (pointsChart != null) {      int length=(int)mPathMeasure.getLength();      int pointsLength=pointsList.size();      float[] coords=new float[2];      for (int i=0; i < length; i++) {        mPathMeasure.getPosTan(i,coords,null);        double prevDiff=Double.MAX_VALUE;        boolean ok=true;        for (int j=0; j < pointsLength && ok; j+=2) {          double diff=Math.abs(pointsList.get(j) - coords[0]);          if (diff < 1) {            pointsList.set(j + 1,coords[1]);            prevDiff=diff;          }          ok=prevDiff > diff;        }      }      pointsChart.drawSeries(canvas,paint,pointsList,seriesRenderer,yAxisValue,seriesIndex,startIndex);    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NamedNodeMap entities;  DocumentType docType;  Node retval;  doc=(Document)load("hc_staff",true);  docType=doc.getDoctype();  if (!(("text/html".equals(getContentType())))) {    assertNotNull("docTypeNotNull",docType);    entities=docType.getEntities();    assertNotNull("entitiesNotNull",entities);    try {      retval=entities.removeNamedItemNS("http://www.w3.org/1999/xhtml","alpha");      fail("throw_NO_MOD_OR_NOT_FOUND_ERR");    } catch (    DOMException ex) {switch (ex.code) {case 7:        break;case 8:      break;default :    throw ex;}}}}  }
class C{  public static void main(String[] args){  try {    int serverPort=Integer.parseInt(System.getProperty("net.floodlightcontroller.packetstreamer.port","9090"));    TTransport transport;    transport=new TFramedTransport(new TSocket("localhost",serverPort));    transport.open();    TProtocol protocol=new TBinaryProtocol(transport);    PacketStreamer.Client client=new PacketStreamer.Client(protocol);    sendPackets(client,(short)2,OFMessageType.PACKET_IN,true);    log.debug("Terminate session1");    client.terminateSession("session1");    transport.close();  } catch (  TException x) {    x.printStackTrace();  }}  }
class C{  public boolean clean(){  StorageManager storage=new StorageManager();  return storage.clean();}  }
class C{  public boolean isSerNoMandatory(){  Object oo=get_Value(COLUMNNAME_IsSerNoMandatory);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static int unixTimestamp(java.sql.Timestamp timestamp){  return (int)(timestamp.getTime() / 1000L);}  }
class C{  public static void drawStringUnderlineCharAt(JComponent c,Graphics g,String text,int underlinedIndex,int x,int y){  invokeSwingUtilities2StaticMethod("drawStringUnderlineCharAt",new Class[]{JComponent.class,Graphics.class,String.class,int.class,int.class,int.class},new Object[]{c,g,text,underlinedIndex,x,y});}  }
class C{  String rrToString(){  StringBuffer sb=new StringBuffer();  sb.append(hashAlg);  sb.append(' ');  sb.append(flags);  sb.append(' ');  sb.append(iterations);  sb.append(' ');  if (salt == null)   sb.append('-'); else   sb.append(base16.toString(salt));  sb.append(' ');  sb.append(b32.toString(next));  if (!types.empty()) {    sb.append(' ');    sb.append(types.toString());  }  return sb.toString();}  }
class C{  public static PageRankNode create(DataInput in) throws IOException {  PageRankNode m=new PageRankNode();  m.readFields(in);  return m;}  }
class C{  public T animate(int animId){  return animate(animId,null);}  }
class C{  protected LazyJavaCompletionProposal createRequiredTypeCompletionProposal(CompletionProposal completionProposal,JavaContentAssistInvocationContext invocationContext){  return (LazyJavaCompletionProposal)new FillArgumentNamesCompletionProposalCollector(invocationContext).createJavaCompletionProposal(completionProposal);}  }
class C{  public static void toDo(@Scope int scope,String tag){  List<Long> tagSeenList=tagLastSeenMap.get(tag);  if (tagSeenList.isEmpty()) {    toDoSet.put(tag);    return;  }  Long tagLastSeen=tagSeenList.get(tagSeenList.size() - 1);  if (scope == THIS_APP_VERSION && tagLastSeen <= lastAppUpdatedTime) {    toDoSet.put(tag);  }}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static String escapeFilterParameter(String parameter){  return parameter.replace("\\","\\\\").replace(",","\\,");}  }
class C{  public void commitChanges(){  layoutPanel.commitChanges();}  }
class C{  public boolean isOperator(char character){  for (int index=0; index < JAVA_OPERATORS.length; index++) {    if (JAVA_OPERATORS[index] == character)     return true;  }  return false;}  }
class C{  public void test_twoJar_diff_directGetResourceAsStream() throws Exception {  test_directGetResourceAsStream(Configuration.TWO_JAR,"test2/Resource2.txt","Who doesn't like a good biscuit?\n");}  }
class C{  private static int uariminLe(double value,double[] bv,int[] bvi,BinaryOperator bOp) throws DMLRuntimeException {  int ixMin=1;  if (value < bv[0] || value > bv[bv.length - 1])   return ixMin;  int ix=Arrays.binarySearch(bv,value);  if (ix < 0)   ix=Math.abs(ix) - 1;  ixMin=bvi[ix] + 1;  return ixMin;}  }
class C{  public static QuestionResponse askQuestion(final Display display,final Input input,final QuestionType questionType,final String question){  Check.notNull(display,"display");  Check.notNull(input,"input");  Check.notNull(questionType,"questionType");  Check.notNull(question,"question");  while (true) {    display.print(question);    display.print(" ");    display.print(questionSuffixes.get(questionType));    display.flush();    final BufferedReader reader=new BufferedReader(new InputStreamReader(input.getInputStream()));    try {      final String response=reader.readLine();      if (response == null) {        return null;      }      if (response.toLowerCase().startsWith(questionResponses.get(QuestionResponse.YES).toLowerCase())) {        return QuestionResponse.YES;      } else       if (response.toLowerCase().startsWith(questionResponses.get(QuestionResponse.NO).toLowerCase())) {        return QuestionResponse.NO;      } else       if ((questionType == QuestionType.YES_NO_ALL || questionType == QuestionType.YES_NO_ALL_CANCEL) && response.toLowerCase().startsWith(questionResponses.get(QuestionResponse.ALL).toLowerCase())) {        return QuestionResponse.ALL;      } else       if ((questionType == QuestionType.YES_NO_CANCEL || questionType == QuestionType.YES_NO_ALL_CANCEL) && response.toLowerCase().startsWith(questionResponses.get(QuestionResponse.CANCEL).toLowerCase())) {        return QuestionResponse.CANCEL;      } else {        display.printLine(Messages.getString("Prompt.InvalidResponse"));      }    } catch (    final IOException e) {      return null;    }  }}  }
class C{  protected ListSelectionModel createSelectionModel(){  return new DefaultListSelectionModel();}  }
class C{  public Bag clear(){  indexOutInHash=buildMap(ANY_SIZE);  Bag retval=allNodes;  allNodes=new Bag();  return retval;}  }
class C{  public void testAddIssuerNameLjava_lang_String03(){  X509CRLSelector selector=new X509CRLSelector();  String iss1="O=First Org.";  String iss2="O=Second Org.";  TestCRL crl1=new TestCRL(new X500Principal(iss1));  TestCRL crl2=new TestCRL(new X500Principal(iss2));  try {    selector.addIssuerName(iss1);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl1));  assertFalse("The CRL should not match the selection criteria.",selector.match(crl2));  try {    selector.addIssuerName(iss2);  } catch (  IOException e) {    e.printStackTrace();    fail("Unexpected IOException was thrown.");  }  assertTrue("The CRL should match the selection criteria.",selector.match(crl2));}  }
class C{  public static Vector3d interpolateTriangle(double v0X,double v0Y,double f0X,double f0Y,double f0Z,double v1X,double v1Y,double f1X,double f1Y,double f1Z,double v2X,double v2Y,double f2X,double f2Y,double f2Z,double x,double y,Vector3d dest){  Vector3d t=dest;  interpolationFactorsTriangle(v0X,v0Y,v1X,v1Y,v2X,v2Y,x,y,t);  return dest.set(t.x * f0X + t.y * f1X + t.z * f2X,t.x * f0Y + t.y * f1Y + t.z * f2Y,t.x * f0Z + t.y * f1Z + t.z * f2Z);}  }
class C{  public static String toCallerIDMinMatch(String phoneNumber){  String np=extractNetworkPortionAlt(phoneNumber);  return internalGetStrippedReversed(np,MIN_MATCH);}  }
class C{  @Benchmark public void limitedSynchronizedWeakCache(){  run();}  }
class C{  protected final String _handleUnusualFieldName(int i) throws IOException, JsonParseException {  if (i == INT_APOSTROPHE && isEnabled(Feature.ALLOW_SINGLE_QUOTES)) {    return _parseApostropheFieldName();  }  if (!isEnabled(Feature.ALLOW_UNQUOTED_FIELD_NAMES)) {    _reportUnexpectedChar(i,"was expecting double-quote to start field name");  }  final int[] codes=CharTypes.getInputCodeLatin1JsNames();  final int maxCode=codes.length;  boolean firstOk;  if (i < maxCode) {    firstOk=(codes[i] == 0) && (i < INT_0 || i > INT_9);  } else {    firstOk=Character.isJavaIdentifierPart((char)i);  }  if (!firstOk) {    _reportUnexpectedChar(i,"was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name");  }  int ptr=_inputPtr;  int hash=0;  final int inputLen=_inputEnd;  if (ptr < inputLen) {    do {      int ch=_inputBuffer[ptr];      if (ch < maxCode) {        if (codes[ch] != 0) {          int start=_inputPtr - 1;          _inputPtr=ptr;          return _symbols.findSymbol(_inputBuffer,start,ptr - start,hash);        }      } else       if (!Character.isJavaIdentifierPart((char)ch)) {        int start=_inputPtr - 1;        _inputPtr=ptr;        return _symbols.findSymbol(_inputBuffer,start,ptr - start,hash);      }      hash=(hash * 31) + ch;      ++ptr;    } while (ptr < inputLen);  }  int start=_inputPtr - 1;  _inputPtr=ptr;  return _parseUnusualFieldName2(start,hash,codes);}  }
class C{  private static Uri formatNullUri(final Uri uri){  if (null == uri) {    return sDummyUri;  }  return uri;}  }
class C{  private void dependentFraction(Fraction fraction){  this.dependentFractions.add(fraction);}  }
class C{  private int findPointOnScale(float value,float scale,float offset){  float newvalue=(value - offset) * scale;  return (int)newvalue;}  }
class C{  @Override public int hashCode(){  return (getName().hashCode() ^ getActions().hashCode());}  }
class C{  private static void hideView(){  getAppFrame().setState(Frame.ICONIFIED);  if (OSUtils.supportsTray() && ResourceManager.instance().isTrayIconAvailable()) {    GUIMediator.setAppVisible(false);  }}  }
class C{  private void maybeProposePropertyRead(IJavaProject project,IMethod method,String propertyName,int invocationOffset,int indentationUnits,boolean isStatic,List<ICompletionProposal> proposals,int numCharsFilled,int numCharsToOverwrite) throws JavaModelException {  String[] parameterNames=method.getParameterNames();  if (parameterNames.length == 0 && propertyName.length() > 0) {    String expression="return " + createJsPropertyReadExpression(propertyName,isStatic);    String code=createJsniBlock(project,expression,indentationUnits);    proposals.add(createProposal(method.getFlags(),code,invocationOffset,numCharsFilled,numCharsToOverwrite,expression));  }}  }
class C{  public static void assertNotEquals(float expected,float actual,float delta){  try {    Verify.assertNotEquals("float",expected,actual,delta);  } catch (  AssertionError e) {    Verify.throwMangledException(e);  }}  }
class C{  public int available() throws IOException {  ensureOpen();  if (reachEOF) {    return 0;  } else {    return 1;  }}  }
class C{  public static UpdateStatement produce(CharSequence table){  return produce(table,null);}  }
class C{  public static void updateToolbarHeight(Context context,Toolbar toolbar){  toolbar.getLayoutParams().height=context.getResources().getDimensionPixelSize(R.dimen.abc_action_bar_default_height_material);}  }
class C{  public void add(MessageListener listener){  this.listeners.add(MessageListener.class,listener);}  }
class C{  private static void textQuery(IgniteCache<BinaryObject,BinaryObject> cache){  TextQuery<BinaryObject,BinaryObject> qry=new TextQuery<>(Employee.class,"TX");  QueryCursor<Cache.Entry<BinaryObject,BinaryObject>> employees=cache.query(qry);  System.out.println();  System.out.println(">>> Employees living in Texas:");  for (  Cache.Entry<BinaryObject,BinaryObject> e : employees.getAll())   System.out.println(">>>     " + e.getValue().deserialize());}  }
class C{  @SuppressWarnings("try") protected InstalledCode compileAndInstallMethod(ResolvedJavaMethod method){  try (Scope s=Debug.scope("compileAndInstallMethod",new DebugDumpScope(String.valueOf(compilationId.incrementAndGet()),true))){    StructuredGraph graph=new StructuredGraph(method,AllowAssumptions.YES);    PhaseSuite<HighTierContext> graphBuilderSuite=backend.getSuites().getDefaultGraphBuilderSuite();    Suites suites=backend.getSuites().getDefaultSuites();    LIRSuites lirSuites=backend.getSuites().getDefaultLIRSuites();    OptimisticOptimizations optimisticOpts=OptimisticOptimizations.ALL;    ProfilingInfo profilingInfo=graph.getProfilingInfo(method);    CompilationResult compilationResult=new CompilationResult();    CompilationResultBuilderFactory factory=CompilationResultBuilderFactory.Default;    GraalCompiler.compileGraph(graph,method,providers,backend,graphBuilderSuite,optimisticOpts,profilingInfo,suites,lirSuites,compilationResult,factory);    return backend.addInstalledCode(method,compilationResult);  } catch (  Throwable ex) {    throw Debug.handle(ex);  }}  }
class C{  public <U extends T,A,B>InitialMatching2<T,U,A,B> when(DecomposableMatchBuilder2<U,A,B> decomposableMatchBuilder){  return new InitialMatching2<>(decomposableMatchBuilder.build(),value);}  }
class C{  public Out(String s){  try {    OutputStream os=new FileOutputStream(s);    OutputStreamWriter osw=new OutputStreamWriter(os,CHARSET_NAME);    out=new PrintWriter(osw,true);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void expire(){  expire(-1);}  }
class C{  public void scrollUp(){  setIdleTime(0,false);  if (!(chatScroll >= (messages.size() - max_nbr_rows))) {    chatScroll++;    computeScrollBarOffset();  }}  }
class C{  public TokenMap(boolean ignoreCase){  this(DEFAULT_TOKEN_MAP_SIZE,ignoreCase);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void loadPaths(ArrayList<PathImpl> paths,PathImpl dir){  try {    for (    String fileName : dir.list()) {      PathImpl path=dir.lookup(fileName);      if (fileName.endsWith(".jar") || fileName.endsWith(".zip")) {        paths.add(path);      } else       if (path.isDirectory()) {        loadPaths(paths,path);      }    }  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public boolean exportTypeSelected(){  return exportTypeSelected;}  }
class C{  public Object childrenAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  for (  Node childNode : children) {    data=childNode.jjtAccept(visitor,data);  }  return data;}  }
class C{  @Override public void start(){  if (true)   throw new UnsupportedOperationException();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.560 -0400",hash_original_method="1E761CCD4DDE3C2CB8242721D590B88B",hash_generated_method="2F7B8A982A5FF60A8EC05A3E25C5A5B9") @Override public String toString(){  StringBuilder buffer=new StringBuilder();  buffer.append(super.toString());  buffer.append("(");  if (fileFilters != null) {    for (int i=0; i < fileFilters.size(); i++) {      if (i > 0) {        buffer.append(",");      }      Object filter=fileFilters.get(i);      buffer.append(filter == null ? "null" : filter.toString());    }  }  buffer.append(")");  return buffer.toString();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String lookupName=getString(stack);  Object val=stack.pop();  String name=getString(stack);  PseudoMenu ui=stack.getUIMgrSafe().getCurrUI();  if (ui != null) {    ZPseudoComp rvContext=ui.getCompForVariable(name,val,stack.getUIComponent());    if (rvContext != null) {      if ("Focused".equals(lookupName))       return Boolean.valueOf(rvContext.isFocused()); else       if ("FocusedChild".equals(lookupName))       return Boolean.valueOf(rvContext.doesHierarchyHaveFocus()); else       return rvContext.getRelatedContext().get(lookupName);    }  }  return null;}  }
class C{  protected Instances inputFormatPeek(){  return m_InputFormat;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:57.597 -0500",hash_original_method="2872C03C93E375E914CDE964569312B4",hash_generated_method="A7D0ACF98BAE1CA91A85DD756277A723") public static Reader newReader(ReadableByteChannel channel,String charsetName){  if (charsetName == null) {    throw new NullPointerException();  }  return newReader(channel,Charset.forName(charsetName).newDecoder(),-1);}  }
class C{  public void testJavaTypeTablesMatch() throws Exception {  FieldDescriptor.JavaType[] values1=FieldDescriptor.JavaType.values();  WireFormat.JavaType[] values2=WireFormat.JavaType.values();  assertEquals(values1.length,values2.length);  for (int i=0; i < values1.length; i++) {    assertEquals(values1[i].toString(),values2[i].toString());  }}  }
class C{  public void play(Activity activity){  play(activity,null);}  }
class C{  public static void decorateElementWithNavigationLinks(Element feed,Breadcrumbs breadcrumbs,String title,String catalogFilename,boolean isEntry){  if (feed == null)   return;  assert breadcrumbs != null;  assert catalogFilename != null;  assert catalogFilename.endsWith(Constants.XML_EXTENSION) || catalogFilename.endsWith(Constants.HTML_EXTENSION) : "Program Error: url should end with .xml extension";  if (catalogFilename.contains("custom")) {    int dummy=1;  }  int pos=0;  while (catalogFilename.substring(pos).contains(Constants.FOLDER_SEPARATOR))   pos=catalogFilename.indexOf(Constants.FOLDER_SEPARATOR,pos) + 1;  String filename=catalogFilename.substring(pos);  String folder=catalogFilename.substring(0,pos);  pos=folder.indexOf(Constants.CURRENT_PATH_PREFIX);  if (pos != -1)   folder=folder.substring(pos + Constants.CURRENT_PATH_PREFIX.length());  feed.addContent(getLinkElement(Constants.CURRENT_PATH_PREFIX + filename,isEntry ? LINKTYPE_FULLENTRY : LINKTYPE_NAVIGATION,RELATION_SELF,title));  String startUrl=(folder.length() == 0 ? Constants.CURRENT_PATH_PREFIX : Constants.PARENT_PATH_PREFIX) + CatalogManager.getInitialUr() + Constants.XML_EXTENSION;  feed.addContent(getLinkElement(startUrl,LINKTYPE_NAVIGATION,RELATION_START,ConfigurationManager.getCurrentProfile().getCatalogTitle()));  Breadcrumb breadcrumb=breadcrumbs.firstElement();  feed.addContent(getLinkElement(startUrl,LINKTYPE_NAVIGATION,"breadcrumb",breadcrumb.title));  for (int i=1; i < breadcrumbs.size(); i++) {    breadcrumb=breadcrumbs.elementAt(i);    String breadcrumbUrl=breadcrumb.url;    while (breadcrumbUrl.substring(pos).contains(Constants.FOLDER_SEPARATOR))     pos=breadcrumbUrl.indexOf(Constants.FOLDER_SEPARATOR,pos) + 1;    String breadcrumbFilename=breadcrumbUrl.substring(pos);    String breadcrumbFolder=breadcrumbUrl.substring(0,pos);    pos=breadcrumbFolder.indexOf(Constants.CURRENT_PATH_PREFIX);    if (pos != -1)     breadcrumbFolder=breadcrumbFolder.substring(pos + Constants.CURRENT_PATH_PREFIX.length());    feed.addContent(getLinkElement((breadcrumbFolder.equals(folder) ? Constants.CURRENT_PATH_PREFIX : Constants.PARENT_PATH_PREFIX + breadcrumbFolder) + breadcrumbFilename,LINKTYPE_NAVIGATION,"breadcrumb",breadcrumb.title));  }}  }
class C{  public NavigationDrawerAccountsHandler enableSmallAccountsLayout(){  mUseSmallAccountsLayout=true;  return this;}  }
class C{  public Matrix3f invert(Matrix3f store){  if (store == null) {    store=new Matrix3f();  }  float det=determinant();  if (FastMath.abs(det) <= FastMath.FLT_EPSILON) {    return store.zero();  }  store.m00=m11 * m22 - m12 * m21;  store.m01=m02 * m21 - m01 * m22;  store.m02=m01 * m12 - m02 * m11;  store.m10=m12 * m20 - m10 * m22;  store.m11=m00 * m22 - m02 * m20;  store.m12=m02 * m10 - m00 * m12;  store.m20=m10 * m21 - m11 * m20;  store.m21=m01 * m20 - m00 * m21;  store.m22=m00 * m11 - m01 * m10;  store.multLocal(1f / det);  return store;}  }
class C{  public Integer remove(Double key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  protected void updateModel(){  LOG.assertTrue(SwingUtilities.isEventDispatchThread());  setItems(getItemsForSuite(myCurrentSuite));}  }
class C{  @Override public double skewness(){  QL.require(sampleNumber_ > 2,UNSUFFICIENT_SAMPLE_NUMBER_2);  double s=standardDeviation();  if (s == 0.0)   return 0.0;  double m=mean();  double result=cubicSum_ / sampleWeight_;  result-=3.0 * m * (quadraticSum_ / sampleWeight_);  result+=2.0 * m * m* m;  result/=s * s * s;  result*=sampleNumber_ / (sampleNumber_ - 1.0);  result*=sampleNumber_ / (sampleNumber_ - 2.0);  return result;}  }
class C{  public void save(){  saved_pos=pos;  saved_end=end;}  }
class C{  void cleanupNonDirtyEntries(LocalRegion r){  if (!this.entryMods.isEmpty()) {    Iterator it=this.entryMods.entrySet().iterator();    while (it.hasNext()) {      Map.Entry me=(Map.Entry)it.next();      TXEntryState txes=(TXEntryState)me.getValue();      if (txes.cleanupNonDirty(r)) {        it.remove();      }    }  }}  }
class C{  private static boolean containsUnsupportedUse(IR ir,Register reg,RVMClass klass,Set<Register> visited){  for (RegisterOperand use=reg.useList; use != null; use=use.getNext()) {switch (use.instruction.getOpcode()) {case MUST_IMPLEMENT_INTERFACE_opcode:case REF_IFCMP_opcode:      return true;case CHECKCAST_opcode:case CHECKCAST_NOTNULL_opcode:case CHECKCAST_UNRESOLVED_opcode:{      TypeReference lhsType=TypeCheck.getType(use.instruction).getTypeRef();      byte ans=ClassLoaderProxy.includesType(lhsType,klass.getTypeRef());      if (ans == MAYBE) {        return true;      } else       if (ans == YES) {        if (visited == null) {          visited=new HashSet<Register>();        }        Register copy=TypeCheck.getResult(use.instruction).getRegister();        if (!visited.contains(copy)) {          visited.add(copy);          if (containsUnsupportedUse(ir,copy,klass,visited)) {            return true;          }        }      }    }  break;case INSTANCEOF_opcode:case INSTANCEOF_NOTNULL_opcode:case INSTANCEOF_UNRESOLVED_opcode:{  TypeReference lhsType=InstanceOf.getType(use.instruction).getTypeRef();  if (ClassLoaderProxy.includesType(lhsType,klass.getTypeRef()) == MAYBE) {    return true;  }}break;case REF_MOVE_opcode:if (visited == null) {visited=new HashSet<Register>();}Register copy=Move.getResult(use.instruction).getRegister();if (!visited.contains(copy)) {visited.add(copy);if (containsUnsupportedUse(ir,copy,klass,visited)) {return true;}}break;case BOOLEAN_CMP_INT_opcode:case BOOLEAN_CMP_ADDR_opcode:case LONG_STORE_opcode:throw new OptimizingCompilerException("Unexpected use of reference considered for replacement: " + use.instruction + " in "+ ir.method);}}return false;}  }
class C{  public void writeImage(BufferedImage img,TranscoderOutput output) throws TranscoderException {  OutputStream ostream=output.getOutputStream();  ostream=new OutputStreamWrapper(ostream);  if (ostream == null) {    throw new TranscoderException(Messages.formatMessage("jpeg.badoutput",null));  }  try {    float quality;    if (hints.containsKey(KEY_QUALITY)) {      quality=((Float)hints.get(KEY_QUALITY)).floatValue();    } else {      TranscoderException te;      te=new TranscoderException(Messages.formatMessage("jpeg.unspecifiedQuality",null));      handler.error(te);      quality=0.75f;    }    ImageWriter writer=ImageWriterRegistry.getInstance().getWriterFor("image/jpeg");    ImageWriterParams params=new ImageWriterParams();    params.setJPEGQuality(quality,true);    float PixSzMM=userAgent.getPixelUnitToMillimeter();    int PixSzInch=(int)(25.4 / PixSzMM + 0.5);    params.setResolution(PixSzInch);    writer.writeImage(img,ostream,params);    ostream.flush();  } catch (  IOException ex) {    throw new TranscoderException(ex);  }}  }
class C{  public FluxMapSignal(Publisher<? extends T> source,Function<? super T,? extends R> mapperNext,Function<Throwable,? extends R> mapperError,Supplier<? extends R> mapperComplete){  super(source);  if (mapperNext == null && mapperError == null && mapperComplete == null) {    throw new NullPointerException("Map Signal needs at least one valid mapper");  }  this.mapperNext=mapperNext;  this.mapperError=mapperError;  this.mapperComplete=mapperComplete;}  }
class C{  public static boolean hasAllPermissionsGranted(@NonNull int[] grantResults){  if (isPermissionRequestCancelled(grantResults)) {    return false;  }  for (  int grantResult : grantResults) {    if (grantResult == PackageManager.PERMISSION_DENIED) {      return false;    }  }  return true;}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,ObjectStreamClass[] descs,int ncycles) throws Exception {  int ndescs=descs.length;  for (int i=0; i < ncycles; i++) {    sbuf.reset();    oout.reset();    for (int j=0; j < ndescs; j++) {      oout.writeObject(descs[j]);    }    oout.flush();    for (int j=0; j < ndescs; j++) {      oin.readObject();    }  }}  }
class C{  public boolean adjustEntry(E entry){  final SpatialDirectoryEntry se=(SpatialDirectoryEntry)entry;  final ModifiableHyperBoundingBox mbr=computeMBR();  boolean changed=false;  if (se.hasMBR()) {    final int dim=se.getDimensionality();    for (int i=0; i < dim; i++) {      if (Math.abs(se.getMin(i) - mbr.getMin(i)) > Float.MIN_NORMAL) {        changed=true;        break;      }      if (Math.abs(se.getMax(i) - mbr.getMax(i)) > Float.MIN_NORMAL) {        changed=true;        break;      }    }  } else {    changed=true;  }  if (changed) {    se.setMBR(mbr);  }  return changed;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.015 -0500",hash_original_method="FBB19954C139B496BF770D1E0B9BA455",hash_generated_method="35C319B42F18EB8B04D25696B3275EEF") public static void closeQuietly(Socket socket){}  }
class C{  public BaseMatcher(final NetworkConfig config){  if (config == null) {    throw new NullPointerException("Config must not be null");  } else {    this.config=config;  }}  }
class C{  public MultiFields(Fields[] subs,ReaderSlice[] subSlices){  this.subs=subs;  this.subSlices=subSlices;}  }
class C{  public int failedShards(){  return totalShards - successfulShards;}  }
class C{  private void flushInternal() throws IOException {  if (count > 0) {    out.write(buf,0,count);    count=0;  }}  }
class C{  public void removeAllZeppelinConnections(){  for (  Map.Entry<String,Session> entry : zeppelinConnectionMap.entrySet()) {    if (isSessionOpen(entry.getValue())) {      entry.getValue().close();    }    zeppelinConnectionMap.remove(entry.getKey());  }  LOG.info("Removed all Zeppelin ws connections");}  }
class C{  public void afterCutDownAndExpansionOfSingleIndexResult(Collection finalResult){}  }
class C{  @Override public void enlarge(int metres){  LatLong centre=box.center();  for (  LatLong latLng : points) {    latLng.moveTowards(centre,-metres);  }  calcBoundingBox();}  }
class C{  public static double logcdf(double val,double k,double theta){  if (val < 0) {    return Double.NEGATIVE_INFINITY;  }  double vt=val * theta;  return (val == Double.POSITIVE_INFINITY) ? 0. : logregularizedGammaP(k,vt);}  }
class C{  public TurnoutTableAction(String actionName){  super(actionName);  if (turnManager == null) {    setEnabled(false);  }  defaultThrownSpeedText=(Bundle.getMessage("UseGlobal","Global") + " " + turnManager.getDefaultThrownSpeed());  defaultClosedSpeedText=(Bundle.getMessage("UseGlobal","Global") + " " + turnManager.getDefaultClosedSpeed());  useBlockSpeed=Bundle.getMessage("UseGlobal","Block Speed");  speedListClosed.add(defaultClosedSpeedText);  speedListThrown.add(defaultThrownSpeedText);  speedListClosed.add(useBlockSpeed);  speedListThrown.add(useBlockSpeed);  java.util.Vector<String> _speedMap=jmri.InstanceManager.getDefault(SignalSpeedMap.class).getValidSpeedNames();  for (int i=0; i < _speedMap.size(); i++) {    if (!speedListClosed.contains(_speedMap.get(i))) {      speedListClosed.add(_speedMap.get(i));    }    if (!speedListThrown.contains(_speedMap.get(i))) {      speedListThrown.add(_speedMap.get(i));    }  }}  }
class C{  protected void load(final InputStream in) throws SAXException, IOException {  final Document doc=XMLUtil.parse(in);  final String regex=System.getProperty("stendhal.zone.regex",".*");  for (  final Element element : XMLUtil.getElements(doc.getDocumentElement(),"zone")) {    final ZoneDesc zdesc=readZone(element);    if (zdesc == null) {      continue;    }    final String name=zdesc.getName();    if (!name.matches(regex) && !name.equals("int_semos_townhall") && !name.equals("int_semos_guard_house")) {      continue;    }    logger.info("Loading zone: " + name);    try {      final StendhalMapStructure zonedata=TMXLoader.load(StendhalRPWorld.MAPS_FOLDER + zdesc.getFile());      if (verifyMap(zdesc,zonedata)) {        final StendhalRPZone zone=load(zdesc,zonedata);        final Iterator<SetupDescriptor> diter=zdesc.getDescriptors();        while (diter.hasNext()) {          diter.next().setup(zone);        }        zone.calculateDangerLevel();      }    } catch (    final Exception ex) {      logger.error("Error loading zone: " + name,ex);    }  }}  }
class C{  public Enumeration<Permission> elements(){synchronized (this) {    return Collections.enumeration(perms);  }}  }
class C{  public static void collectGarbage(long timeout){  try {    System.gc();    Thread.sleep(timeout);    System.runFinalization();    Thread.sleep(timeout);  } catch (  InterruptedException ex) {    ex.printStackTrace();  }}  }
class C{  public void saveSettingsToDB(String songId){  if (mApp.getDBAccessHelper().hasEqualizerSettings(songId) == false) {    mApp.getDBAccessHelper().addSongEQValues(songId,mFiftyHertzLevel,mOneThirtyHertzLevel,mThreeTwentyHertzLevel,mEightHundredHertzLevel,mTwoKilohertzLevel,mFiveKilohertzLevel,mTwelvePointFiveKilohertzLevel,mVirtualizerLevel,mBassBoostLevel,mReverbSetting);  } else {    mApp.getDBAccessHelper().updateSongEQValues(songId,mFiftyHertzLevel,mOneThirtyHertzLevel,mThreeTwentyHertzLevel,mEightHundredHertzLevel,mTwoKilohertzLevel,mFiveKilohertzLevel,mTwelvePointFiveKilohertzLevel,mVirtualizerLevel,mBassBoostLevel,mReverbSetting);  }}  }
class C{  public boolean isConnectorUseSSL(){  return connectorUseSSL;}  }
class C{  public Vec3D intersectsRay(Ray3D ray,float minDist,float maxDist){  Vec3D invDir=ray.getDirection().reciprocal();  boolean signDirX=invDir.x < 0;  boolean signDirY=invDir.y < 0;  boolean signDirZ=invDir.z < 0;  Vec3D bbox=signDirX ? max : min;  float tmin=(bbox.x - ray.x) * invDir.x;  bbox=signDirX ? min : max;  float tmax=(bbox.x - ray.x) * invDir.x;  bbox=signDirY ? max : min;  float tymin=(bbox.y - ray.y) * invDir.y;  bbox=signDirY ? min : max;  float tymax=(bbox.y - ray.y) * invDir.y;  if ((tmin > tymax) || (tymin > tmax)) {    return null;  }  if (tymin > tmin) {    tmin=tymin;  }  if (tymax < tmax) {    tmax=tymax;  }  bbox=signDirZ ? max : min;  float tzmin=(bbox.z - ray.z) * invDir.z;  bbox=signDirZ ? min : max;  float tzmax=(bbox.z - ray.z) * invDir.z;  if ((tmin > tzmax) || (tzmin > tmax)) {    return null;  }  if (tzmin > tmin) {    tmin=tzmin;  }  if (tzmax < tmax) {    tmax=tzmax;  }  if ((tmin < maxDist) && (tmax > minDist)) {    return ray.getPointAtDistance(tmin);  }  return null;}  }
class C{  @Override public void onCreate(SQLiteDatabase db){  final String SQL_CREATE_ACRONYM_TABLE="CREATE TABLE " + AcronymEntry.TABLE_NAME + " ("+ AcronymEntry._ID+ " INTEGER PRIMARY KEY, "+ AcronymEntry.COLUMN_ACRONYM+ " TEXT NOT NULL, "+ AcronymEntry.COLUMN_LONG_FORM+ " TEXT NOT NULL, "+ AcronymEntry.COLUMN_FREQUENCY+ " INTEGER NOT NULL, "+ AcronymEntry.COLUMN_SINCE+ " INTEGER NOT NULL, "+ AcronymEntry.COLUMN_EXPIRATION_TIME+ " INTEGER NOT NULL "+ " );";  db.execSQL(SQL_CREATE_ACRONYM_TABLE);}  }
class C{  public void installUI(JComponent a){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).installUI(a);  }}  }
class C{  private void prepareFields(View view){  nameInputWrapper=(TextInputLayout)view.findViewById(R.id.order_create_name_wrapper);  streetInputWrapper=(TextInputLayout)view.findViewById(R.id.order_create_street_wrapper);  houseNumberInputWrapper=(TextInputLayout)view.findViewById(R.id.order_create_houseNumber_wrapper);  cityInputWrapper=(TextInputLayout)view.findViewById(R.id.order_create_city_wrapper);  zipInputWrapper=(TextInputLayout)view.findViewById(R.id.order_create_zip_wrapper);  phoneInputWrapper=(TextInputLayout)view.findViewById(R.id.order_create_phone_wrapper);  emailInputWrapper=(TextInputLayout)view.findViewById(R.id.order_create_email_wrapper);  noteInputWrapper=(TextInputLayout)view.findViewById(R.id.order_create_note_wrapper);  User user=SettingsMy.getActiveUser();  if (user != null) {    Utils.setTextToInputLayout(nameInputWrapper,user.getName());    Utils.setTextToInputLayout(streetInputWrapper,user.getStreet());    Utils.setTextToInputLayout(houseNumberInputWrapper,user.getHouseNumber());    Utils.setTextToInputLayout(cityInputWrapper,user.getCity());    Utils.setTextToInputLayout(zipInputWrapper,user.getZip());    Utils.setTextToInputLayout(emailInputWrapper,user.getEmail());    Utils.setTextToInputLayout(phoneInputWrapper,user.getPhone());  } else {    LoginExpiredDialogFragment loginExpiredDialogFragment=new LoginExpiredDialogFragment();    loginExpiredDialogFragment.show(getFragmentManager(),MSG_LOGIN_EXPIRED_DIALOG_FRAGMENT);  }}  }
class C{  public java.sql.Statement createStatement(int resultSetType,int resultSetConcurrency) throws SQLException {  checkClosed();  try {    return StatementWrapper.getInstance(this,this.pooledConnection,this.mc.createStatement(resultSetType,resultSetConcurrency));  } catch (  SQLException sqlException) {    checkAndFireConnectionError(sqlException);  }  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int threads(){  final String value=this.map.get("threads");  final int threads;  if (value == null) {    threads=Runtime.getRuntime().availableProcessors() << 2;  } else {    threads=Integer.parseInt(value);  }  return threads;}  }
class C{  public static void openDatabase(final JTree projectTree,final IDatabase database){  openDatabaseThreaded(SwingUtilities.getWindowAncestor(projectTree),projectTree,database);}  }
class C{  @Override public void drawDomainGridline(Graphics2D g2,CategoryPlot plot,Rectangle2D dataArea,double value){  Line2D line1=null;  Line2D line2=null;  PlotOrientation orientation=plot.getOrientation();  if (orientation == PlotOrientation.HORIZONTAL) {    double y0=value;    double y1=value - getYOffset();    double x0=dataArea.getMinX();    double x1=x0 + getXOffset();    double x2=dataArea.getMaxX();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x2,y1);  } else   if (orientation == PlotOrientation.VERTICAL) {    double x0=value;    double x1=value + getXOffset();    double y0=dataArea.getMaxY();    double y1=y0 - getYOffset();    double y2=dataArea.getMinY();    line1=new Line2D.Double(x0,y0,x1,y1);    line2=new Line2D.Double(x1,y1,x1,y2);  }  Paint paint=plot.getDomainGridlinePaint();  Stroke stroke=plot.getDomainGridlineStroke();  g2.setPaint(paint != null ? paint : Plot.DEFAULT_OUTLINE_PAINT);  g2.setStroke(stroke != null ? stroke : Plot.DEFAULT_OUTLINE_STROKE);  g2.draw(line1);  g2.draw(line2);}  }
class C{  private void handleReceivedPointerUp(int pointerIndex,MotionEvent event){  final int pointerId=event.getPointerId(pointerIndex);  final int pointerFlag=(1 << pointerId);  mLastReceivedUpPointerId=pointerId;  mLastReceivedUpPointerDownTime=getReceivedPointerDownTime(pointerId);  mLastReceivedUpPointerActive=isActivePointer(pointerId);  mLastReceivedUpPointerDownX=mReceivedPointerDownX[pointerId];  mLastReceivedUpPointerDownY=mReceivedPointerDownY[pointerId];  mReceivedPointersDown&=~pointerFlag;  mActivePointers&=~pointerFlag;  mReceivedPointerDownX[pointerId]=0;  mReceivedPointerDownY[pointerId]=0;  mReceivedPointerDownTime[pointerId]=0;  if (mActivePointers == 0) {    mHasMovingActivePointer=false;  }  if (mPrimaryActivePointerId == pointerId) {    mPrimaryActivePointerId=INVALID_POINTER_ID;  }}  }
class C{  public final void testGetCertPath() throws Exception {  TrustAnchor ta=TestUtils.getTrustAnchor();  if (ta == null) {    fail(getName() + ": not performed (could not create test TrustAnchor)");  }  CertPath cp=new MyCertPath(testEncoding);  CertPathBuilderResult r=new PKIXCertPathBuilderResult(cp,ta,TestUtils.getPolicyTree(),testPublicKey);  assertSame(cp,r.getCertPath());}  }
class C{  public void testProxyConnection_Not_Found_Response() throws Throwable {  setUpStoreProperties();  ServerSocket ss=new ServerSocket(0);  TestHostnameVerifier hnv=new TestHostnameVerifier();  HttpsURLConnection.setDefaultHostnameVerifier(hnv);  URL url=new URL("https://localhost:" + ss.getLocalPort());  HttpsURLConnection connection=(HttpsURLConnection)url.openConnection(new Proxy(Proxy.Type.HTTP,new InetSocketAddress("localhost",ss.getLocalPort())));  connection.setSSLSocketFactory(getContext().getSocketFactory());  try {    doInteraction(connection,ss,NOT_FOUND_CODE);    fail("Expected exception was not thrown.");  } catch (  FileNotFoundException e) {    if (DO_LOG) {      System.out.println("Expected exception was thrown: " + e.getMessage());    }  }}  }
class C{  public void addComponent(T component){  components.add(component);}  }
class C{  private void compareTables(Table sortedTable,Table compareWith){  assertEquals("both tables have the same number of rows",sortedTable.rowCount(),compareWith.rowCount());  int maxRows=sortedTable.rowCount();  int numberOfColumns=sortedTable.columnCount();  for (int rowIndex=0; rowIndex < maxRows; rowIndex++) {    for (int columnIndex=0; columnIndex < numberOfColumns; columnIndex++) {      assertEquals("cells[" + rowIndex + ", "+ columnIndex+ "]  match",sortedTable.get(rowIndex,columnIndex),compareWith.get(rowIndex,columnIndex));    }  }}  }
class C{  public static int visit(int x){  lastVisited=x;  return x;}  }
class C{  public static <T>BiFunction<T,CloseableHttpResponse,T> inputOn200(){  return inputOn(HttpStatus.SC_OK);}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public Integer mapThrowable(final Throwable throwable){  Throwable throwableToCheck=throwable;  int depthToGo=20;  while (true) {    Integer resId=mapThrowableFlat(throwableToCheck);    if (resId != null) {      return resId;    } else {      throwableToCheck=throwableToCheck.getCause();      depthToGo--;      if (depthToGo <= 0 || throwableToCheck == throwable || throwableToCheck == null) {        Log.d(EventBus.TAG,"No specific message ressource ID found for " + throwable);        return null;      }    }  }}  }
class C{  public int count(){  return intersectionCount;}  }
class C{  private static int select(int[] array,int[] index,int left,int right,int k){  if (left == right) {    return left;  } else {    int middle=partition(array,index,left,right);    if ((middle - left + 1) >= k) {      return select(array,index,left,middle,k);    } else {      return select(array,index,middle + 1,right,k - (middle - left + 1));    }  }}  }
class C{  private void updatePurchasedItem(String productId,int quantity){  if (quantity == 0) {    mDb.delete(PURCHASED_ITEMS_TABLE_NAME,PURCHASED_PRODUCT_ID_COL + "=?",new String[]{productId});    return;  }  ContentValues values=new ContentValues();  values.put(PURCHASED_PRODUCT_ID_COL,productId);  values.put(PURCHASED_QUANTITY_COL,quantity);  mDb.replace(PURCHASED_ITEMS_TABLE_NAME,null,values);}  }
class C{  public void addOrient(Node from,Node to){  orients.add(new NodePair(from,to));}  }
class C{  public ActionErrors validateForm(NivelesCuadroForm nivelCuadroForm,HttpServletRequest request){  ActionErrors errors=new ActionErrors();  if (StringUtils.isEmpty(nivelCuadroForm.getNombre())) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_NOMBRE,request.getLocale())));  }  if (nivelCuadroForm.getTipoNivel() == 0) {    errors.add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_REQUIRED,Messages.getString(Constants.ETIQUETA_TIPO_NIVEL,request.getLocale())));  }  return errors;}  }
class C{  @SuppressWarnings("unchecked") private void readObject(java.io.ObjectInputStream s) throws java.io.IOException, ClassNotFoundException {  s.defaultReadObject();  int cap=MIN_SEGMENT_TABLE_CAPACITY;  final Segment<K,V>[] segments=this.segments;  for (int k=0; k < segments.length; ++k) {    Segment<K,V> seg=segments[k];    if (seg != null) {      seg.threshold=(int)(cap * seg.loadFactor);      seg.table=(HashEntry<K,V>[])new HashEntry<?,?>[cap];    }  }  for (; ; ) {    K key=(K)s.readObject();    V value=(V)s.readObject();    if (key == null)     break;    put(key,value);  }}  }
class C{  public Output compile(Context context) throws CompilationException {  Objects.requireNonNull(context,"Parameter context must not be null");  if (context instanceof FileContext) {    return compile((FileContext)context);  }  if (context instanceof StringContext) {    return compile((StringContext)context);  }  throw new UnsupportedContextException(context);}  }
class C{  private static boolean hasEulerianPath(Digraph G){  if (G.E() == 0)   return true;  int deficit=0;  for (int v=0; v < G.V(); v++)   if (G.outdegree(v) > G.indegree(v))   deficit+=(G.outdegree(v) - G.indegree(v));  if (deficit > 1)   return false;  Graph H=new Graph(G.V());  for (int v=0; v < G.V(); v++)   for (  int w : G.adj(v))   H.addEdge(v,w);  int s=nonIsolatedVertex(G);  BreadthFirstPaths bfs=new BreadthFirstPaths(H,s);  for (int v=0; v < G.V(); v++)   if (H.degree(v) > 0 && !bfs.hasPathTo(v))   return false;  return true;}  }
class C{  public cudaGraphicsResource(){}  }
class C{  @SuppressWarnings("unchecked") private void startPhraseBasedErrorRecovery() throws IOException, EndOfInputstreamException, MissingErrorRecoveryException {  if (DEBUG)   System.out.println("Recover: PBER");  LRParserState handleState;  LinkedList<Object> popped_values=new LinkedList<Object>();  LinkedList<ScannerToken<? extends Object>> popped_tokens=new LinkedList<ScannerToken<? extends Object>>();  LinkedList<ScannerToken<? extends Object>> read_tokens=new LinkedList<ScannerToken<? extends Object>>();  List<Terminal> expected_terminals=new ArrayList<Terminal>();  ScannerToken<? extends Object> crash_token;  int beginLine=-2;  int beginColumn=-2;  if (lastError_sync_size > 0) {    if (DEBUG)     System.out.println("Previous error is still unsynchronized (sync:" + lastError_sync_size + ")! Combining errors...");    if (saveTokens) {      int parsedTokensOffset=parsedTokens.size() - (lastError_start_sync_size - lastError_sync_size);      for (int i=parsedTokensOffset; i < parsedTokens.size(); i++)       read_tokens.add(parsedTokens.get(i));    }    stack=lastError_stateStack;    tokenCountStack=lastError_tokenCountStack;    handleState=stack.pop();    ErrorInformation oldErrInfo=(ErrorInformation)valueStack.pop();    beginLine=oldErrInfo.getBeginLine();    beginColumn=oldErrInfo.getBeginColumn();    crash_token=oldErrInfo.getCrashToken();    if (!saveTokens) {      tokenCountStack=null;      parsedTokens=null;    } else     tokenCountStack.pop();    for (    Object x : oldErrInfo.getPoppedValues())     popped_values.add(x);    if (saveTokens) {      for (      ScannerToken<? extends Object> x : oldErrInfo.getCorrectTokens())       popped_tokens.add(x);      for (int i=oldErrInfo.getBadTokens().length - 1; i >= 0; i--)       read_tokens.addFirst(oldErrInfo.getBadTokens()[i]);    }    expected_terminals=Arrays.asList(oldErrInfo.getExpectedTerminals());    if (lastError_sync_size == lastError_start_sync_size) {      if (currentToken.getSymbol() != SpecialTerminals.EndOfInputStream) {        read_tokens.add(currentToken);      }      currentToken=readNextToken();    }  } else {    crash_token=currentToken;    for (    Terminal t : table.getActionTable().getColumns()) {      if (t == SpecialTerminals.Error)       continue;      if (table.getActionTable().getWithNull(currentState,t) != null)       expected_terminals.add(t);    }    LRAction handleAction;    try {      LRParserState catchState=stack.peek();      handleAction=table.getActionTable().get(catchState,SpecialTerminals.Error);      int parsedTokensOffset=0;      beginColumn=currentToken.getColumn();      beginLine=currentToken.getLine();      while (!(handleAction instanceof Shift)) {        beginColumn=catchState.beginColumn;        beginLine=catchState.beginLine;        @SuppressWarnings("unused") LRParserState popped_state=stack.pop();        Object pop=valueStack.pop();        if (pop == null || !pop.equals(NoValue))         popped_values.addFirst(pop);        if (saveTokens) {          int cnt=tokenCountStack.pop();          int end=parsedTokens.size() + parsedTokensOffset;          for (int i=end - 1; i >= end - cnt; i--)           popped_tokens.addFirst(parsedTokens.get(i));          parsedTokensOffset-=cnt;        }        catchState=stack.peek();        handleAction=table.getActionTable().get(catchState,SpecialTerminals.Error);      }      if (DEBUG) {        System.out.println("Found error-catching state  : " + catchState);        System.out.println("  with popped values        : " + popped_values);        System.out.println("  and popped tokens      : " + popped_tokens);      }    } catch (    java.util.EmptyStackException e) {      ErrorInformation errInf=new ErrorInformation(crash_token,false,popped_values.toArray(),popped_tokens.toArray(new ScannerToken[]{}),read_tokens.toArray(new ScannerToken[]{}),expected_terminals.toArray(new Terminal[]{}),crash_token.getLine(),crash_token.getColumn(),crash_token.getLine(),crash_token.getColumn());      doNotifyObserversAbout(errInf);      if (currentToken.getSymbol() == SpecialTerminals.EndOfInputStream) {        if (DEBUG)         System.out.println("End of input during error-recovery :(");        throw new EndOfInputstreamException("Input does not match grammar, recovery was not possible.",currentState,currentToken);      }      if (DEBUG)       System.out.println("No production for phrase-based error-recovery found :(");      throw new MissingErrorRecoveryException("Input does not match grammar. Grammar does not provide error-correction for current parsing.",currentState,currentToken,errInf);    }    handleState=((Shift)handleAction).getState();    if (DEBUG)     System.out.println("  Error-shifting to state   : " + handleState);  }  while (table.getActionTable().get(handleState,currentToken.getSymbol()) instanceof ErrorAction || currentToken.getSymbol() == SpecialTerminals.EndOfInputStream) {    if (currentToken.getSymbol() == SpecialTerminals.EndOfInputStream) {      doNotifyObserversAbout(new ErrorInformation(crash_token,false,popped_values.toArray(),popped_tokens.toArray(new ScannerToken[]{}),read_tokens.toArray(new ScannerToken[]{}),expected_terminals.toArray(new Terminal[]{}),beginLine,beginColumn,currentToken.getLine(),currentToken.getColumn()));      if (DEBUG)       System.out.println("End of input during error-recovery :(");      throw new EndOfInputstreamException("Input does not match grammar, recovery was not possible.",handleState,currentToken);    }    if (saveTokens)     read_tokens.addLast(currentToken);    currentToken=readNextToken();  }  LRParserState s=(LRParserState)handleState.clone();  s.beginColumn=beginColumn;  s.beginLine=beginLine;  stack.push(s);  lastErrorInformation=new ErrorInformation(crash_token,true,popped_values.toArray(),popped_tokens.toArray(new ScannerToken[]{}),read_tokens.toArray(new ScannerToken[]{}),expected_terminals.toArray(new Terminal[]{}),beginLine,beginColumn,currentToken.getLine(),currentToken.getColumn());  valueStack.push(lastErrorInformation);  if (saveTokens)   tokenCountStack.push(lastErrorInformation.getTokens().length);  lastError_stateStack=(Stack<LRParserState>)stack.clone();  lastError_sync_size=table.getParserInterface().getErrorSyncSize();  if (lastError_sync_size < 0)   lastError_sync_size=0;  if (saveTokens)   lastError_tokenCountStack=(Stack<Integer>)tokenCountStack.clone(); else   if (lastError_sync_size != 0)   parsedTokens=new ArrayList<ScannerToken<? extends Object>>();  lastError_start_sync_size=lastError_sync_size;  dryRun_savedActions=new ArrayList<LRAction>();  if (DEBUG)   System.out.println("Switching to dry-run mode for " + lastError_sync_size + " tokens.");}  }
class C{  private void refreshContacts(Context context,ContentProviderClient cp) throws RemoteException {  String[] proj={Email.ADDRESS,ContactsContract.Contacts.LOOKUP_KEY,RawContacts.CONTACT_ID,ContactsContract.Contacts.DISPLAY_NAME};  String sel=Email.IN_VISIBLE_GROUP + " = 1 AND " + Email.ADDRESS+ " <> ?";  String[] args={Accounts.selected().name};  EasyCursor sys=new EasyCursor(cr().query(Email.CONTENT_URI,proj,sel,args,Email.ADDRESS));  proj=new String[]{Contacts.EMAIL,Contacts.ANDROID_LOOKUP_KEY,Contacts.ANDROID_ID,Contacts.NAME,_ID,Contacts.FOLLOWING,Contacts.STATUS_ID};  sel=Contacts.EMAIL + " IS NOT NULL";  EasyCursor app=new EasyCursor(cp.query(CONTACTS_URI,proj,sel,null,Contacts.EMAIL));  ContentValues vals=new ContentValues();  for (  CursorJoiner.Result result : new CursorJoiner(sys,new String[]{Email.ADDRESS},app,new String[]{Contacts.EMAIL})) {switch (result) {case LEFT:      String email=sys.getString(Email.ADDRESS);    String hash=BaseEncoding.base64().encode(Hashing.sha512().hashString(email.toLowerCase(ENGLISH),UTF_8).asBytes());  long id=Contacts.idForHash(hash);vals.put(Contacts.ANDROID_LOOKUP_KEY,sys.getString(ContactsContract.Contacts.LOOKUP_KEY));vals.put(Contacts.ANDROID_ID,sys.getLong(RawContacts.CONTACT_ID));String name=sys.getString(ContactsContract.Contacts.DISPLAY_NAME);vals.put(Contacts.NAME,name);vals.put(Contacts.NORMALISED_NAME,SQLite.normalise(name));vals.put(Contacts.EMAIL,email);if (id <= 0) {vals.put(Contacts.EMAIL_HASH,hash);vals.put(Contacts.COLOR,Contacts.defaultColor());id=ContentUris.parseId(cp.insert(CONTACTS_URI,vals));} else {cp.update(ContentUris.withAppendedId(CONTACTS_URI,id),vals,null,null);}if (id > 0) {context.startService(new Intent(context,FriendColorService.class).putExtra(FriendColorService.EXTRA_ID,id));}break;case RIGHT:if (app.getInt(Contacts.FOLLOWING) == 0 && app.getInt(Contacts.STATUS_ID) == ACTIVE.id) {vals.put(Contacts.STATUS_ID,DELETED.id);vals.put(Contacts.DIRTY,1);cp.update(Uris.appendId(CONTACTS_URI,app),vals,null,null);}break;case BOTH:String s=sys.getString(ContactsContract.Contacts.LOOKUP_KEY);if (!s.equals(app.getString(Contacts.ANDROID_LOOKUP_KEY))) {vals.put(Contacts.ANDROID_LOOKUP_KEY,s);}long l=sys.getLong(RawContacts.CONTACT_ID);if (l != app.getLong(Contacts.ANDROID_ID)) {vals.put(Contacts.ANDROID_ID,l);}s=sys.getString(ContactsContract.Contacts.DISPLAY_NAME);if (!s.equals(app.getString(Contacts.NAME))) {vals.put(Contacts.NAME,s);vals.put(Contacts.NORMALISED_NAME,SQLite.normalise(s));}if (app.getInt(Contacts.STATUS_ID) == DELETED.id) {vals.put(Contacts.STATUS_ID,ACTIVE.id);vals.put(Contacts.DIRTY,1);}if (vals.size() > 0) {cp.update(Uris.appendId(CONTACTS_URI,app),vals,null,null);context.startService(new Intent(context,FriendColorService.class).putExtra(FriendColorService.EXTRA_ID,app.getLong(_ID)));}break;}vals.clear();}sys.close();app.close();}  }
class C{  public static boolean onKeyDown(KeyEvent event,ChromeActivity activity,boolean isCurrentTabVisible,boolean tabSwitchingEnabled){  int keyCode=event.getKeyCode();  if (event.getRepeatCount() != 0 || KeyEvent.isModifierKey(keyCode))   return false;  if (KeyEvent.isGamepadButton(keyCode)) {    if (isGamepadAPIActive(activity))     return false;  } else   if (!event.isCtrlPressed() && !event.isAltPressed() && keyCode != KeyEvent.KEYCODE_F3 && keyCode != KeyEvent.KEYCODE_F5 && keyCode != KeyEvent.KEYCODE_FORWARD) {    return false;  }  TabModel curModel=activity.getCurrentTabModel();  int count=curModel.getCount();  int metaState=getMetaState(event);  int keyCodeAndMeta=keyCode | metaState;switch (keyCodeAndMeta) {case CTRL | KeyEvent.KEYCODE_T:    activity.onMenuOrKeyboardAction(curModel.isIncognito() ? R.id.new_incognito_tab_menu_id : R.id.new_tab_menu_id,false);  return true;case CTRL | KeyEvent.KEYCODE_N:activity.onMenuOrKeyboardAction(R.id.new_tab_menu_id,false);return true;case CTRL | SHIFT | KeyEvent.KEYCODE_N:activity.onMenuOrKeyboardAction(R.id.new_incognito_tab_menu_id,false);return true;case CTRL | SHIFT | KeyEvent.KEYCODE_B:case CTRL | KeyEvent.KEYCODE_H:String url=keyCode == KeyEvent.KEYCODE_B ? UrlConstants.BOOKMARKS_URL : UrlConstants.HISTORY_URL;Tab currentTab=TabModelUtils.getCurrentTab(curModel);if (currentTab != null && isCurrentTabVisible) {currentTab.loadUrl(new LoadUrlParams(url,PageTransition.AUTO_BOOKMARK));} else {TabCreator tabCreator=activity.getCurrentTabCreator();if (tabCreator != null) {tabCreator.launchUrl(url,TabLaunchType.FROM_KEYBOARD);}}return true;case ALT | KeyEvent.KEYCODE_F:case KeyEvent.KEYCODE_BUTTON_Y:activity.onMenuOrKeyboardAction(R.id.show_menu,false);return true;}if (isCurrentTabVisible) {if (tabSwitchingEnabled && (metaState == CTRL || metaState == ALT)) {int numCode=keyCode - KeyEvent.KEYCODE_0;if (numCode > 0 && numCode <= Math.min(count,8)) {TabModelUtils.setIndex(curModel,numCode - 1);return true;} else if (numCode == 9 && count != 0) {TabModelUtils.setIndex(curModel,count - 1);return true;}}switch (keyCodeAndMeta) {case CTRL | KeyEvent.KEYCODE_TAB:case CTRL | KeyEvent.KEYCODE_PAGE_DOWN:case KeyEvent.KEYCODE_BUTTON_R1:if (tabSwitchingEnabled && count > 1) {TabModelUtils.setIndex(curModel,(curModel.index() + 1) % count);}return true;case CTRL | SHIFT | KeyEvent.KEYCODE_TAB:case CTRL | KeyEvent.KEYCODE_PAGE_UP:case KeyEvent.KEYCODE_BUTTON_L1:if (tabSwitchingEnabled && count > 1) {TabModelUtils.setIndex(curModel,(curModel.index() + count - 1) % count);}return true;case CTRL | KeyEvent.KEYCODE_W:case CTRL | KeyEvent.KEYCODE_F4:case KeyEvent.KEYCODE_BUTTON_B:TabModelUtils.closeCurrentTab(curModel);return true;case CTRL | KeyEvent.KEYCODE_F:case CTRL | KeyEvent.KEYCODE_G:case CTRL | SHIFT | KeyEvent.KEYCODE_G:case KeyEvent.KEYCODE_F3:case SHIFT | KeyEvent.KEYCODE_F3:activity.onMenuOrKeyboardAction(R.id.find_in_page_id,false);return true;case CTRL | KeyEvent.KEYCODE_L:case ALT | KeyEvent.KEYCODE_D:case KeyEvent.KEYCODE_BUTTON_X:activity.onMenuOrKeyboardAction(R.id.focus_url_bar,false);return true;case KeyEvent.KEYCODE_BOOKMARK:case CTRL | KeyEvent.KEYCODE_D:activity.onMenuOrKeyboardAction(R.id.bookmark_this_page_id,false);return true;case CTRL | KeyEvent.KEYCODE_P:activity.onMenuOrKeyboardAction(R.id.print_id,false);return true;case CTRL | KeyEvent.KEYCODE_PLUS:case CTRL | KeyEvent.KEYCODE_EQUALS:case CTRL | SHIFT | KeyEvent.KEYCODE_PLUS:case CTRL | SHIFT | KeyEvent.KEYCODE_EQUALS:case KeyEvent.KEYCODE_ZOOM_IN:ContentViewCore cvc=activity.getCurrentContentViewCore();if (cvc != null) cvc.zoomIn();return true;case CTRL | KeyEvent.KEYCODE_MINUS:case KeyEvent.KEYCODE_ZOOM_OUT:cvc=activity.getCurrentContentViewCore();if (cvc != null) cvc.zoomOut();return true;case CTRL | KeyEvent.KEYCODE_0:cvc=activity.getCurrentContentViewCore();if (cvc != null) cvc.zoomReset();return true;case CTRL | KeyEvent.KEYCODE_R:case KeyEvent.KEYCODE_F5:Tab tab=activity.getActivityTab();if (tab != null) tab.reload();return true;case ALT | KeyEvent.KEYCODE_DPAD_LEFT:tab=activity.getActivityTab();if (tab != null && tab.canGoBack()) tab.goBack();return true;case ALT | KeyEvent.KEYCODE_DPAD_RIGHT:case KeyEvent.KEYCODE_FORWARD:case KeyEvent.KEYCODE_BUTTON_START:tab=activity.getActivityTab();if (tab != null && tab.canGoForward()) tab.goForward();return true;case CTRL | SHIFT | KeyEvent.KEYCODE_SLASH:activity.onMenuOrKeyboardAction(R.id.help_id,false);return true;}}return false;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void applyDataSetSettings(PieDataSet dataset,StatisticType type){  dataset.setSliceSpace(SLICE_SPACE);  dataset.setValueTextSize(VALUE_TEXT_SIZE);  dataset.setSelectionShift(SELECTION_SHIFT);  if (type == StatisticType.TYPE_STAGE) {    dataset.setColors(mColorsetStage);  } else   if (type == StatisticType.TYPE_DUE) {    dataset.setColors(mColorsetDue);  } else {    dataset.setColors(mColorsetPlayed);  }  dataset.setValueFormatter(new CustomizedFormatter());}  }
class C{  public RangePredicate(Expression middle,Expression left,Expression right){  this(IN_IN,middle,left,right,DefaultLiteralComparator.getInstance());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Airing a=getAir(stack);  java.util.ArrayList rv=new java.util.ArrayList();  Agent[] favs=Wizard.getInstance().getFavorites();  StringBuffer sbCache=new StringBuffer();  for (int i=0; i < favs.length; i++) {    if (favs[i].followsTrend(a,false,sbCache))     rv.add(favs[i]);  }  return (Agent[])rv.toArray(new Agent[0]);}  }
class C{  public void testDoubleMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",-1.3));  doc.add(newStringField("value","-1.3",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",4.2333333333333));  doc.add(newStringField("value","4.2333333333333",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoubleDocValuesField("value",4.2333333333332));  doc.add(newStringField("value","4.2333333333332",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  SortField sortField=new SortField("value",SortField.Type.DOUBLE);  sortField.setMissingValue(Double.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[3].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static void addLightSource(IDynamicLightSource lightToAdd){  if (lightToAdd.getAttachmentEntity() != null) {    if (lightToAdd.getAttachmentEntity().isEntityAlive()) {      DynamicLightSourceContainer newLightContainer=new DynamicLightSourceContainer(lightToAdd);      ConcurrentLinkedQueue<DynamicLightSourceContainer> lightList=instance.worldLightsMap.get(lightToAdd.getAttachmentEntity().worldObj);      if (lightList != null) {        if (!lightList.contains(newLightContainer)) {          lightList.add(newLightContainer);        } else {          System.out.println("Cannot add Dynamic Light: Attachment Entity is already registered!");        }      } else {        lightList=new ConcurrentLinkedQueue<DynamicLightSourceContainer>();        lightList.add(newLightContainer);        instance.worldLightsMap.put(lightToAdd.getAttachmentEntity().worldObj,lightList);      }    } else {      System.err.println("Cannot add Dynamic Light: Attachment Entity is dead!");    }  } else {    System.err.println("Cannot add Dynamic Light: Attachment Entity is null!");  }}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public boolean isReadWrite(int index){  if (auxillary != null)   return auxillary.isReadWrite(index);  if (index < 0 || index >= numProperties())   return false;  if (isComposite(index))   return false;  return (setMethods.get(index) != null);}  }
class C{  public static void writeMetricHistory(List<? extends Host> hosts,PowerVmAllocationPolicyMigrationAbstract vmAllocationPolicy,String outputPath){  for (int j=0; j < 10; j++) {    Host host=hosts.get(j);    if (!vmAllocationPolicy.getTimeHistory().containsKey(host.getId())) {      continue;    }    File file=new File(outputPath + "_" + host.getId()+ ".csv");    try {      file.createNewFile();    } catch (    IOException e1) {      e1.printStackTrace();      System.exit(0);    }    try {      BufferedWriter writer=new BufferedWriter(new FileWriter(file));      List<Double> timeData=vmAllocationPolicy.getTimeHistory().get(host.getId());      List<Double> utilizationData=vmAllocationPolicy.getUtilizationHistory().get(host.getId());      List<Double> metricData=vmAllocationPolicy.getMetricHistory().get(host.getId());      for (int i=0; i < timeData.size(); i++) {        writer.write(String.format("%.2f,%.2f,%.2f\n",timeData.get(i),utilizationData.get(i),metricData.get(i)));      }      writer.close();    } catch (    IOException e) {      e.printStackTrace();      System.exit(0);    }  }}  }
class C{  private void launchAnimBackup(){  if (!backupRoundTripFirstLaunched) {    if (backupRoundTrip.getLevel() == 1) {      backupRoundTrip.setLevel(0);    } else {      backupRoundTrip.setLevel(1);    }  } else {    backupRoundTripFirstLaunched=false;  }  currentBackupDrawable=(AnimatedVectorDrawable)backupRoundTrip.getCurrent();  currentBackupDrawable.start();}  }
class C{  private static CalendarEntry createCalendar(CalendarService service) throws IOException, ServiceException {  System.out.println("Creating a secondary calendar");  CalendarEntry calendar=new CalendarEntry();  calendar.setTitle(new PlainTextConstruct("Little League Schedule"));  calendar.setSummary(new PlainTextConstruct("This calendar contains the practice schedule and game times."));  calendar.setTimeZone(new TimeZoneProperty("America/Los_Angeles"));  calendar.setHidden(HiddenProperty.FALSE);  calendar.setColor(new ColorProperty(BLUE));  calendar.addLocation(new Where("","","Oakland"));  return service.insert(owncalendarsFeedUrl,calendar);}  }
class C{  public boolean hasNavigtionBar(){  return mHasNavigationBar;}  }
class C{  public InlineQueryResultArticle.InlineQueryResultArticleBuilder inputMessageContent(InputMessageContent inputMessageContent){  this.input_message_content=inputMessageContent;  return this;}  }
class C{  private void processDataLinks(List<CWLDataLink> dataLinks,ApplicationPort port,CWLJob job,boolean strip){  for (  CWLDataLink dataLink : dataLinks) {    String source=dataLink.getSource();    String destination=dataLink.getDestination();    String scatter=null;    if (job.getId().contains(DOT_SEPARATOR)) {      String mod=job.getId().substring(job.getId().indexOf(DOT_SEPARATOR) + 1);      if (strip) {        mod=mod.substring(mod.indexOf(DOT_SEPARATOR) + 1);      }      scatter=mod + SLASH_SEPARATOR + CWLSchemaHelper.normalizeId(port.getId());    } else {      scatter=port.getId();    }    if ((source.equals(scatter) || destination.equals(scatter)) && (dataLink.getScattered() == null || !dataLink.getScattered())) {      dataLink.setScattered(port.getScatter());    }  }}  }
class C{  public XPathProcessorException(String message,Exception e){  super(message,e);}  }
class C{  public ImageEffectEvent(String image,int x,int y){  this(image,false);  put(X_ATTR,x);  put(Y_ATTR,y);}  }
class C{  public static BetweenExpression range(Expression datapoint,Expression lowBoundary,Expression highBoundary,boolean isLowIncluded,boolean isHighIncluded){  return new BetweenExpression(datapoint,lowBoundary,highBoundary,isLowIncluded,isHighIncluded,false);}  }
class C{  private boolean isMinorVersionUpgrade(String currentVersion,String targetVersion){  String currentDbSchemaVersion=VdcUtil.getDbSchemaVersion(currentVersion);  if (currentDbSchemaVersion == null) {    return false;  }  return currentDbSchemaVersion.equals(VdcUtil.getDbSchemaVersion(targetVersion));}  }
class C{  private StoragePort findStoragePortByNativeId(StorageSystem system,String nativeId){  StoragePort storagePort=null;  String portNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,nativeId,NativeGUIDGenerator.PORT);  URIQueryResultList resultSetList=new URIQueryResultList();  _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortByNativeGuidConstraint(portNativeGuid),resultSetList);  StoragePort port=null;  for (  URI portUri : resultSetList) {    port=_dbClient.queryObject(StoragePort.class,portUri);    if (port != null) {      if (port.getStorageDevice().equals(system.getId()) && !port.getInactive()) {        storagePort=port;        break;      }    }  }  return storagePort;}  }
class C{  public int eval(BitVectorIndividual ind){  boolean tmp;  int x;  for (int i=0; i < variables.length; i++) {    x=variables[i];    if (x < 0)     tmp=!ind.genome[-x - 1]; else     tmp=ind.genome[x - 1];    if (tmp)     return 1;  }  return 0;}  }
class C{  @Path("copy") @POST @Consumes(MediaType.APPLICATION_JSON) @Produces({MediaType.APPLICATION_JSON,MediaType.TEXT_PLAIN}) @RolesAllowed("workspace/developer") public CLIOutputResponse copy(final CopyRequest request) throws ServerException, IOException {  request.setProjectPath(getRealPath(request.getProjectPath()));  return this.subversionApi.copy(request);}  }
class C{  private boolean checkPopConsistency(){  log.info("Checking consistency of trip chains.");  unusableTripChains=new HashSet<Id>();  nonHouseholdTripChains=new HashSet<Id>();  chainsWithNoZones=new HashSet<Id>();  personsWithMixedModeTrips=new HashSet<Id>();  for (  Person P : scenario.getPopulation().getPersons().values()) {    ArrayList<Trip> pTrips=new ArrayList<CreatePlansFromTrips.Trip>();    for (    Id i : personTripsMap.get(P.getId()))     pTrips.add(trips.get(i));    sortTrips(pTrips);    for (    Trip T : pTrips) {      if (T.type.equals("2")) {        personsWithMixedModeTrips.add(P.getId());        continue;      }    }    int state=checkTripChain(pTrips);    if (state == 5) {      chainsWithNoZones.add(P.getId());    } else     if (state == 4 || state == 3 || state == 2) {      unusableTripChains.add(P.getId());      continue;    } else     if (state == 1) {      nonHouseholdTripChains.add(P.getId());    } else     if (state == 0) {    } else {      log.error("CheckTripConsistency returned an unrecognized value!");    }  }  int total=this.scenario.getPopulation().getPersons().size();  int badChains=unusableTripChains.size();  int nonHHChains=nonHouseholdTripChains.size();  int noZoneChains=chainsWithNoZones.size();  int goodChains=total - badChains - nonHHChains- noZoneChains;  int pctBC=(badChains * 100 / total);  int pctNHH=(nonHHChains * 100 / total);  int pctNZC=(noZoneChains * 100 / total);  int pctGC=(goodChains * 100 / total);  String summary="POPULATION CONSISTENCY SUMMARY\n" + "*********************************************\n\n" + "Good chains: " + goodChains + " ("+ pctGC+ "%)\n"+ "Chains with no home: "+ nonHHChains+ " ("+ pctNHH+ "%)\n"+ "Chains with an unsuable zone: "+ noZoneChains+ " ("+ pctNZC+ "%)\n"+ "Inconsistent chains:"+ badChains+ " ("+ pctBC+ "%)\n"+ "TOTAL: "+ total+ "\n\n"+ "Inconsistent trip chains and chains with\n"+ "an unusable zone will be omitted from\n"+ "the plan creation procedure.\n\n"+ "Proceed?";  int state=new JOptionPane().showOptionDialog(null,summary,"Summary",JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE,null,null,null);  if (state == JOptionPane.YES_OPTION)   return true; else   return false;}  }
class C{  public String createMessage(SsoRuntimeException e){  return createMessage(e.getMessageKey(),e.getMessageDetails(),e.getMessage());}  }
class C{  public void addTradeOrder(TradeOrder tradeOrders){  this.tradeOrders.add(tradeOrders);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  boolean thumb=evalBool(stack.pop());  Person p=getPerson(stack);  SeriesInfo si=getSeriesInfo(stack);  if (si == null || p == null)   return null;  String imageURL=si.getActorInCharacterImageURL(p,thumb);  if (imageURL == null || imageURL.length() == 0)   return null; else   return MetaImage.getMetaImage(imageURL,stack.getUIComponent());}  }
