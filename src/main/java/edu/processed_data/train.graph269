class C{  public byte[] messageEncrypt(byte[] input){  GF2Vector m=computeMessageRepresentative(input);  GF2Vector z=new GF2Vector(n,t,sr);  GF2Matrix g=((McEliecePublicKeyParameters)key).getG();  Vector mG=g.leftMultiply(m);  GF2Vector mGZ=(GF2Vector)mG.add(z);  return mGZ.getEncoded();}  }
class C{  private static void s_uacvar(SparseBlock a,double[] c,int m,int n,CM_COV_Object cbuff,CM cm,int rl,int ru) throws DMLRuntimeException {  Arrays.fill(c,n * 2,n * 3,ru - rl);  if (a.isContiguous()) {    countDisAgg(a.values(rl),c,a.indexes(rl),a.pos(rl),n * 2,(int)a.size(rl,ru));  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       countDisAgg(a.values(i),c,a.indexes(i),a.pos(i),n * 2,a.size(i));    }  }  if (a.isContiguous()) {    varAgg(a.values(rl),c,a.indexes(rl),a.pos(rl),(int)a.size(rl,ru),n,cbuff,cm);  } else {    for (int i=rl; i < ru; i++) {      if (!a.isEmpty(i))       varAgg(a.values(i),c,a.indexes(i),a.pos(i),a.size(i),n,cbuff,cm);    }  }}  }
class C{  public PropertiesManager(File staticPropertiesFile,File dynamicPropertiesFile,File dynamicRoleFile){  this.staticPropertiesFile=staticPropertiesFile;  this.dynamicPropertiesFile=dynamicPropertiesFile;  this.dynamicRoleFile=dynamicRoleFile;}  }
class C{  public final void signal(){  if (!isHeldExclusively())   throw new IllegalMonitorStateException();  Node first=firstWaiter;  if (first != null)   doSignal(first);}  }
class C{  public void initialise(int dimensions,int base,int dimensionsCond){  condMi=0.0;  miComputed=false;  continuousDataX=null;  discreteData=null;  this.base=base;  dimensionsContinuous=dimensions;  dimensionsConditional=dimensionsCond;}  }
class C{  protected void rewriteSetFusedDataPartitioningExecution(OptNode pn,double M,boolean flagLIX,HashMap<String,PDataPartitionFormat> partitionedMatrices,LocalVariableMap vars) throws DMLRuntimeException {  if (pn.getNodeType() != NodeType.PARFOR)   LOG.warn(getOptMode() + " OPT: Fused data partitioning and execution is only applicable for a ParFor node.");  boolean apply=false;  String partitioner=pn.getParam(ParamType.DATA_PARTITIONER);  PDataPartitioner REMOTE_DP=OptimizerUtils.isSparkExecutionMode() ? PDataPartitioner.REMOTE_SPARK : PDataPartitioner.REMOTE_MR;  PExecMode REMOTE_DPE=OptimizerUtils.isSparkExecutionMode() ? PExecMode.REMOTE_SPARK_DP : PExecMode.REMOTE_MR_DP;  if ((pn.getExecType() == ExecType.MR || pn.getExecType() == ExecType.SPARK) && M < _rm2 && partitioner != null && partitioner.equals(REMOTE_DP.toString()) && partitionedMatrices.size() == 1) {    ParForProgramBlock pfpb=(ParForProgramBlock)OptTreeConverter.getAbstractPlanMapping().getMappedProg(pn.getID())[1];    String moVarname=partitionedMatrices.keySet().iterator().next();    PDataPartitionFormat moDpf=partitionedMatrices.get(moVarname);    MatrixObject mo=(MatrixObject)vars.get(moVarname);    String iterVarname=pfpb.getIterablePredicateVars()[0];    if (rIsAccessByIterationVariable(pn,moVarname,iterVarname) && ((moDpf == PDataPartitionFormat.ROW_WISE && mo.getNumRows() == _N) || (moDpf == PDataPartitionFormat.COLUMN_WISE && mo.getNumColumns() == _N))) {      int k=(int)Math.min(_N,_rk2);      pn.addParam(ParamType.DATA_PARTITIONER,REMOTE_DPE.toString() + "(fused)");      pn.setK(k);      pfpb.setExecMode(REMOTE_DPE);      pfpb.setDataPartitioner(PDataPartitioner.NONE);      pfpb.enableColocatedPartitionedMatrix(moVarname);      pfpb.setDegreeOfParallelism(k);      apply=true;    }  }  LOG.debug(getOptMode() + " OPT: rewrite 'set fused data partitioning and execution' - result=" + apply);}  }
class C{  public boolean addNode(@Nullable N node,int replicas){  if (node == null)   return false;  long seed=affSeed.hashCode() * 31 + hash(node);  rw.writeLock().lock();  try {    if (!nodes.add(node))     return false;    int hash=hash(seed);    SortedSet<N> set=circle.get(hash);    if (set == null)     circle.put(hash,set=new TreeSet<>(nodesComp));    set.add(node);    for (int i=1; i <= replicas; i++) {      seed=seed * affSeed.hashCode() + i;      hash=hash(seed);      set=circle.get(hash);      if (set == null)       circle.put(hash,set=new TreeSet<>(nodesComp));      set.add(node);    }    return true;  }  finally {    rw.writeLock().unlock();  }}  }
class C{  public Intent(String action,Uri uri){  setAction(action);  mData=uri;}  }
class C{  public void stop(String path) throws TomcatManagerException, IOException {  invoke("/stop?path=" + URLEncoder.encode(path,this.charset));}  }
class C{  public boolean timeout(){  return (timer.getTime() > timeout);}  }
class C{  public ConfModule(final String moduleType,final JSONObject jmodule){  super(moduleType,jmodule);}  }
class C{  public boolean hasNext(){  return this.fileCounter > 0;}  }
class C{  public static Type appliedType(TypeDeclaration declaration,Type typeArgument){  if (declaration == null)   return null;  return declaration.appliedType(null,singletonList(typeArgument));}  }
class C{  private boolean vplexAddUnexportVolumeWfSteps(Workflow subWorkflow,String waitFor,List<URI> uris,List<URI> exportGroupTracker) throws Exception {  boolean workflowStepsAdded=false;  Map<URI,Map<URI,List<URI>>> exportStorageVolumeMap=new HashMap<URI,Map<URI,List<URI>>>();  for (  URI uri : uris) {    _log.info("Volume URI is {}",uri);    Volume volume=_dbClient.queryObject(Volume.class,uri);    if (volume == null || volume.getInactive()) {      continue;    }    URI sourceSystemURI=volume.getStorageController();    _log.info("Storage system URI is {}",sourceSystemURI);    List<ExportGroup> sourceExportGroups=getExportGroupsForVolume(volume);    for (    ExportGroup sourceExportGroup : sourceExportGroups) {      URI sourceExportGroupURI=sourceExportGroup.getId();      _log.info("Export group URI is {}",sourceExportGroupURI);      if (exportGroupTracker != null) {        exportGroupTracker.add(sourceExportGroupURI);      }      Map<URI,List<URI>> storageToVolumes=exportStorageVolumeMap.get(sourceExportGroupURI);      if (storageToVolumes == null) {        storageToVolumes=new HashMap<URI,List<URI>>();        exportStorageVolumeMap.put(sourceExportGroupURI,storageToVolumes);      }      List<URI> volumeURIs=storageToVolumes.get(sourceSystemURI);      if (volumeURIs == null) {        volumeURIs=new ArrayList<URI>();        storageToVolumes.put(sourceSystemURI,volumeURIs);      }      volumeURIs.add(uri);    }  }  for (  URI exportGroupURI : exportStorageVolumeMap.keySet()) {    for (    URI storageURI : exportStorageVolumeMap.get(exportGroupURI).keySet()) {      StorageSystem storage=_dbClient.queryObject(StorageSystem.class,storageURI);      List<URI> volumes=exportStorageVolumeMap.get(exportGroupURI).get(storageURI);      if (volumes.isEmpty()) {        _log.info(String.format("Not generating workflow steps to unexport backend volumes in ExportGroup %s because no volumes were found",exportGroupURI.toString()));        continue;      }      VPlexBackendManager backendMgr=new VPlexBackendManager(_dbClient,this,_blockDeviceController,_blockScheduler,_networkDeviceController,null,null,_vplexApiLockManager,coordinator);      boolean stepsAdded=backendMgr.addWorkflowStepsToRemoveBackendVolumes(subWorkflow,waitFor,storage,exportGroupURI,volumes);      if (stepsAdded) {        workflowStepsAdded=true;      }    }  }  return workflowStepsAdded;}  }
class C{  public NSString(byte[] bytes,String encoding) throws UnsupportedEncodingException {  this(bytes,0,bytes.length,encoding);}  }
class C{  protected String add_escapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  private Protocol(){}  }
class C{  public boolean addLocalCandidate(LocalCandidate candidate){  Agent agent=getParentStream().getParentAgent();  agent.getFoundationsRegistry().assignFoundation(candidate);  candidate.computePriority();synchronized (localCandidates) {    LocalCandidate redundantCandidate=findRedundant(candidate);    if (redundantCandidate != null) {      return false;    }    localCandidates.add(candidate);    Collections.sort(localCandidates);    return true;  }}  }
class C{  protected void checkResultByText(@NonNls @NotNull String fileText){  checkResultByText(null,fileText,false,null);}  }
class C{  protected V entryValue(final HashEntry<K,V> entry){  return entry.getValue();}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  mSettings.getWebStorageSizeManager().onExceededDatabaseQuota(url,databaseIdentifier,currentQuota,estimatedSize,totalUsedQuota,quotaUpdater);}  }
class C{  public ToStringBuilder(Object object,ToStringStyle style){  this(object,style,null);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.PROGRAM___ANONYMOUS_PROGRAM_11:    return getAnonymous_program_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public NetSearchExpirationCalculator(LocalRegion region,Object key,int ttl,int idleTime){  super(region,null);  idleAttr=new ExpirationAttributes(idleTime,ExpirationAction.INVALIDATE);  ttlAttr=new ExpirationAttributes(ttl,ExpirationAction.INVALIDATE);}  }
class C{  public static JSONArray toJSONArray(String string) throws JSONException {  return toJSONArray(new JSONTokener(string));}  }
class C{  public void clear(){  valueToName.clear();  nameToCount.clear();}  }
class C{  public void addRotation(float x,float y,float z){  this.rotationX+=x;  this.rotationY+=y;  this.rotationZ+=z;}  }
class C{  protected void init(int minNode,int maxNode){  this.minNode=minNode;  this.maxNode=maxNode;  nodeArray=new AbstractNode[this.maxNode + 1];  mustInit=new boolean[this.maxNode + 1];  for (int i=0; i <= this.maxNode; i++) {    mustInit[i]=true;  }}  }
class C{  private void createShape(){  if (shape == null) {    float firstItemMargin=noxConfig.getNoxItemMargin();    float firstItemSize=noxConfig.getNoxItemSize();    int viewHeight=getMeasuredHeight();    int viewWidth=getMeasuredWidth();    int numberOfElements=noxItemCatalog.size();    ShapeConfig shapeConfig=new ShapeConfig(numberOfElements,viewWidth,viewHeight,firstItemSize,firstItemMargin);    shape=ShapeFactory.getShapeByKey(defaultShapeKey,shapeConfig);  } else {    shape.setNumberOfElements(noxItemCatalog.size());  }  shape.calculate();}  }
class C{  private String createStepsForFullCopyImport(Workflow workflow,URI vplexURI,List<VolumeDescriptor> vplexVolumeDescriptors,List<VolumeDescriptor> assocVolumeDescriptors,String waitFor){  StorageSystem vplexSystem=getDataObject(StorageSystem.class,vplexURI,_dbClient);  _log.info("Got VPLEX {}",vplexURI);  URI projectURI=null;  URI tenantURI=null;  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_BLOCK_VOLUME);  for (  VolumeDescriptor vplexVolumeDescriptor : vplexVolumeDescriptors) {    _log.info("Creating step for VPLEX volume copy {}",vplexVolumeDescriptor.getVolumeURI());    List<VolumeDescriptor> descriptorsForImport=new ArrayList<VolumeDescriptor>();    descriptorsForImport.add(vplexVolumeDescriptor);    URI vplexVolumeURI=vplexVolumeDescriptor.getVolumeURI();    List<VolumeDescriptor> assocDescriptors=getDescriptorsForAssociatedVolumes(vplexVolumeURI,assocVolumeDescriptors);    descriptorsForImport.addAll(assocDescriptors);    if (projectURI == null) {      Volume vplexVol=_dbClient.queryObject(Volume.class,vplexVolumeURI);      if (vplexVol != null && !vplexVol.getInactive()) {        projectURI=vplexVol.getProject().getURI();        tenantURI=vplexVol.getTenant().getURI();      }    }    _log.info("Added descriptors for the copy's associated volumes");    String stepId=workflow.createStepId();    Workflow.Method executeMethod=createImportCopyMethod(vplexURI,descriptorsForImport,projectURI,tenantURI);    Workflow.Method rollbackMethod=rollbackImportCopyMethod(vplexVolumeDescriptor,assocDescriptors);    workflow.createStep(IMPORT_COPY_STEP,String.format("Importing copied volume to create VPLEX volume %s",vplexVolumeDescriptor.getVolumeURI()),waitFor,vplexURI,vplexSystem.getSystemType(),this.getClass(),executeMethod,rollbackMethod,stepId);    _log.info("Added import workflow step to create VPLEX volume copy");    for (    VolumeDescriptor assocDescriptor : assocDescriptors) {      if (assocDescriptor.getType().equals(VolumeDescriptor.Type.BLOCK_DATA)) {        op=_dbClient.createTaskOpStatus(Volume.class,assocDescriptor.getVolumeURI(),stepId,op);      }    }  }  return IMPORT_COPY_STEP;}  }
class C{  private <T>T read(T value,InputNode node,Context context) throws Exception {  return (T)new Traverser(context).read(node,value);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:28.918 -0500",hash_original_method="9397D6B2A6748EB9B0D75013A7674AB7",hash_generated_method="8441653A556B6D938EDE0D9BE061E5BE") public boolean containsKey(final int key){  if (isValidKey(key) && mKeyObjectMap.containsKey(key)) {    return true;  }  return false;}  }
class C{  protected static ZipLong toDosTime(Calendar time){  int year=time.get(Calendar.YEAR);  int month=time.get(Calendar.MONTH) + 1;  if (year < 1980) {    return DOS_TIME_MIN;  }  long value=((year - 1980) << 25) | (month << 21) | (time.get(Calendar.DAY_OF_MONTH) << 16)| (time.get(Calendar.HOUR_OF_DAY) << 11)| (time.get(Calendar.MINUTE) << 5)| (time.get(Calendar.SECOND) >> 1);  byte[] result=new byte[4];  result[0]=(byte)((value & 0xFF));  result[1]=(byte)((value & 0xFF00) >> 8);  result[2]=(byte)((value & 0xFF0000) >> 16);  result[3]=(byte)((value & 0xFF000000L) >> 24);  return new ZipLong(result);}  }
class C{  public void pln(Object o) throws IOException {  p(o.toString());  pln();}  }
class C{  public SpeakerNPC remove(final String name){  return contents.remove(name.toLowerCase());}  }
class C{  @Override public void writeCharacters(char[] text,int start,int len) throws XMLStreamException {  log.log(Level.FINE,"writeCharacters({0}, {1}, {2})",new Object[]{text,start,len});  writeCharsInternal(new String(text,start,len),skipSpaces);}  }
class C{  @Override public boolean evaluate(DF_LatticeCell[] operands){  ArrayCell lhs=(ArrayCell)operands[0];  if (lhs.isBOTTOM()) {    return false;  }  ArrayCell rhs=(ArrayCell)operands[1];  ValueNumberPair[] oldNumbers=null;  boolean lhsWasTOP=lhs.isTOP();  if (!lhsWasTOP)   oldNumbers=lhs.copyValueNumbers();  lhs.clear();  if (rhs.isTOP()) {    throw new OptimizingCompilerException("Unexpected lattice operation");  }  ValueNumberPair[] numbers=rhs.copyValueNumbers();  if (numbers != null) {    for (    ValueNumberPair number : numbers) {      lhs.add(number.v1,number.v2);    }  }  lhs.add(v.v1,v.v2);  if (lhsWasTOP) {    return true;  }  ValueNumberPair[] newNumbers=lhs.copyValueNumbers();  return ArrayCell.setsDiffer(oldNumbers,newNumbers);}  }
class C{  public void addStateValueAsString(String name,String value){  addStateValueAsString(null,name,value,false);}  }
class C{  public XAtom(){}  }
class C{  private static BigInteger multiplyKaratsuba(BigInteger x,BigInteger y){  int xlen=x.mag.length;  int ylen=y.mag.length;  int half=(Math.max(xlen,ylen) + 1) / 2;  BigInteger xl=x.getLower(half);  BigInteger xh=x.getUpper(half);  BigInteger yl=y.getLower(half);  BigInteger yh=y.getUpper(half);  BigInteger p1=xh.multiply(yh);  BigInteger p2=xl.multiply(yl);  BigInteger p3=xh.add(xl).multiply(yh.add(yl));  BigInteger result=p1.shiftLeft(32 * half).add(p3.subtract(p1).subtract(p2)).shiftLeft(32 * half).add(p2);  if (x.signum != y.signum) {    return result.negate();  } else {    return result;  }}  }
class C{  private final IStatus runCommand(final Command command,final IProgressMonitor progressMonitor){  final CommandExecutor commandExecutor=new CommandExecutor(progressMonitor);  return commandExecutor.execute(command);}  }
class C{  public void tryVibrate(){  if (mVibrator != null && mIsGloballyEnabled) {    long now=SystemClock.uptimeMillis();    if (now - mLastVibrate >= VIBRATE_DELAY_MS) {      mVibrator.vibrate(VIBRATE_LENGTH_MS);      mLastVibrate=now;    }  }}  }
class C{  public SVGOMFEFuncBElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public Y asc(){  criteria.addOrderByAsc(getColumnName());  return criteria;}  }
class C{  public synchronized void flush() throws IOException {  if (sink != null) {    if (sink.closedByReader || closed) {      throw new IOException("Pipe closed");    }synchronized (sink) {      sink.notifyAll();    }  }}  }
class C{  public LUDecomposition lu(){  return new LUDecomposition(this);}  }
class C{  public static String formatObject(int width,ObjectReference object){  String base=getString(object);  return base.substring(Math.max(base.length() - width,0));}  }
class C{  public final BeanEventType createBeanTypeDefaultName(Class clazz){  return createBeanType(clazz.getName(),clazz,false,false,false);}  }
class C{  public int subtreeDepth() throws UnsupportedOperationException {  throw new UnsupportedOperationException("subtreeDepth() not supported for EDIPartyName");}  }
class C{  public LinearRegression regression(Matrix y,double ridge){  return new LinearRegression(this,y,ridge);}  }
class C{  @Override public void broadcast(final Serializable msg){  final MessageHeader header=new MessageHeader(node,msg);  forwardBroadcast(header);}  }
class C{  public BasicBroParserTest() throws Exception {  broParser=new BasicBroParser();  jsonParser=new JSONParser();}  }
class C{  public static char readChar(){  scanner.useDelimiter(EMPTY_PATTERN);  String ch=scanner.next();  assert ch.length() == 1 : "Internal (Std)In.readChar() error!" + " Please contact the authors.";  scanner.useDelimiter(WHITESPACE_PATTERN);  return ch.charAt(0);}  }
class C{  public int padding(){  return this.padding;}  }
class C{  public DoubleMatrix2D random(int rows,int columns){  return make(rows,columns).assign(cern.jet.math.Functions.random());}  }
class C{  public NotificationChain basicSetOwner(N4ClassifierDefinition newOwner,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newOwner,N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER,msgs);  return msgs;}  }
class C{  private void createAndSendMessage(ClientMembershipEvent event,int type){  InternalDistributedSystem ds=null;  Cache cacheInstance=AbstractCacheServer.this.cache;  if (cacheInstance != null && !(cacheInstance instanceof CacheCreation)) {    ds=(InternalDistributedSystem)cacheInstance.getDistributedSystem();  } else {    ds=InternalDistributedSystem.getAnyInstance();  }  if (ds != null && ds.isConnected()) {    DM dm=ds.getDistributionManager();    Set adminMemberSet=dm.getAdminMemberSet();    if (!adminMemberSet.isEmpty()) {      DistributedMember member=event.getMember();      ClientMembershipMessage msg=new ClientMembershipMessage(event.getMemberId(),member == null ? null : member.getHost(),type);      msg.setRecipients(adminMemberSet);      dm.putOutgoing(msg);    }  }}  }
class C{  protected TreeViewer doCreateTreeViewer(Composite parent,int style){  return new NotifyingTreeViewer(parent,style);}  }
class C{  public boolean isNotIn(){  return notIn;}  }
class C{  public DataSet simulateData(int sampleSize,boolean latentDataSaved){  if (getBayesPm().getDag().isTimeLagModel()) {    return simulateTimeSeries(sampleSize);  }  return simulateDataHelper(sampleSize,latentDataSaved);}  }
class C{  public IPermissionRequest buildRequest(final List<Option> options){  return new PermissionRequest(getRequestUrl(),getClient(),options);}  }
class C{  public GZipOutputStreamRandomAccess(OutputStream out,int size) throws IOException {  super(out,new Deflater(Deflater.DEFAULT_COMPRESSION,true),size,true);  writeHeader();  crc.reset();}  }
class C{  private Properties buildProperties(String pathInfo,String... keys){  pathInfo=pathInfo.replaceFirst("/","");  String[] parts=pathInfo.split("/");  if (parts.length != keys.length) {    throw new IllegalArgumentException("Wrong number of path parameters.");  }  Properties properties=new Properties();  for (int i=0; i < keys.length; i++) {    properties.put(keys[i],parts[i]);  }  properties.put(KEY_TABLE_NAME,String.format(Locale.ENGLISH,"T_IOT_%1$s",properties.getProperty(KEY_MESSAGE_TYPE_ID).toUpperCase(Locale.ENGLISH)));  return properties;}  }
class C{  private void grow(){  int oldCapacity=queue.length;  int newCapacity=oldCapacity + (oldCapacity >> 1);  if (newCapacity < 0)   newCapacity=Integer.MAX_VALUE;  queue=Arrays.copyOf(queue,newCapacity);}  }
class C{  static int[] encode(ExceptionHandlerMap emap,int[] bytecodeMap){  int[] startPCs=emap.getStartPC();  int[] endPCs=emap.getEndPC();  int[] handlerPCs=emap.getHandlerPC();  TypeReference[] exceptionTypes=emap.getExceptionTypes();  int tableSize=startPCs.length;  int[] eTable=new int[tableSize * 4];  for (int i=0; i < tableSize; i++) {    eTable[i * 4 + TRY_START]=bytecodeMap[startPCs[i]] << ArchConstants.getLogInstructionWidth();    eTable[i * 4 + TRY_END]=bytecodeMap[endPCs[i]] << ArchConstants.getLogInstructionWidth();    eTable[i * 4 + CATCH_START]=bytecodeMap[handlerPCs[i]] << ArchConstants.getLogInstructionWidth();    try {      eTable[i * 4 + EX_TYPE]=exceptionTypes[i].resolve().getId();    } catch (    NoClassDefFoundError except) {      VM.sysWriteln("Trouble resolving a caught exception at compile time:");      except.printStackTrace();      VM.sysFail("Unable to resolve caught exception type at compile time");    }  }  return eTable;}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  double[] result=new double[instance.numClasses()];switch (m_CombinationRule) {case AVERAGE_RULE:    result=distributionForInstanceAverage(instance);  break;case PRODUCT_RULE:result=distributionForInstanceProduct(instance);break;case MAJORITY_VOTING_RULE:result=distributionForInstanceMajorityVoting(instance);break;case MIN_RULE:result=distributionForInstanceMin(instance);break;case MAX_RULE:result=distributionForInstanceMax(instance);break;case MEDIAN_RULE:result[0]=classifyInstance(instance);break;default :throw new IllegalStateException("Unknown combination rule '" + m_CombinationRule + "'!");}if (!instance.classAttribute().isNumeric() && (Utils.sum(result) > 0)) {Utils.normalize(result);}return result;}  }
class C{  private void executeScriptFile(final File scriptFile){  final List<Pair<String,Object>> bindings=toPairList(m_bindings);  final ScriptEngineManager manager=new ScriptEngineManager();  final ScriptEngine engine=manager.getEngineByExtension(FileUtils.getFileExtension(scriptFile));  final IScriptConsole console=new ConsoleWriter(new StringWriter());  engine.getContext().setWriter(console.getWriter());  bindings.add(new Pair<String,Object>("SCRIPT_CONSOLE",console));  final ScriptThread thread=new ScriptThread(engine,scriptFile,bindings);  CProgressDialog.showEndless(getOwner(),String.format("Executing '%s'",scriptFile.getAbsolutePath()),thread);  if (thread.getException() != null) {    CUtilityFunctions.logException(thread.getException());    final String message="E00108: " + "Script file could not be executed";    final String description=CUtilityFunctions.createDescription(String.format("The script file '%s' could not be executed.",scriptFile.getAbsolutePath()),new String[]{"The script file is in use by another program and can not be read.","You do not have sufficient rights to read the file","The script contains a bug that caused an exception."},new String[]{"BinNavi can not read the script file."});    NaviErrorDialog.show(CScriptingDialog.this,message,description,thread.getException());  }  final IScriptPanel panel=(IScriptPanel)scriptTab.getSelectedComponent();  panel.setOutput(console.getOutput());  toFront();}  }
class C{  public BringToFrontAction(DrawingEditor editor){  super(editor);  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");  labels.configureAction(this,ID);  updateEnabledState();}  }
class C{  private void computeSteps(){  int totalSteps=data.length;  for (int step=0; step < totalSteps; ++step) {    float pos=(float)step / (float)totalSteps;    float red=computeColor(definition[0],pos);    float green=computeColor(definition[1],pos);    float blue=computeColor(definition[2],pos);    float alpha=computeColor(definition[3],pos);    data[step]=new Color(red,green,blue,alpha);  }}  }
class C{  static int addressSize(){  return unsafe.addressSize();}  }
class C{  public void close(){}  }
class C{  public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_Means == null) {    Instances input=getInputFormat();    m_Means=new double[input.numAttributes()];    m_StdDevs=new double[input.numAttributes()];    for (int i=0; i < input.numAttributes(); i++) {      if (input.attribute(i).isNumeric() && (input.classIndex() != i)) {        m_Means[i]=input.meanOrMode(i);        m_StdDevs[i]=Math.sqrt(input.variance(i));      }    }    for (int i=0; i < input.numInstances(); i++) {      convertInstance(input.instance(i));    }  }  flushInput();  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public InlineQueryResultMpeg4Gif.InlineQueryResultMpeg4GifBuilder mpeg4Url(URL mpeg4Url){  this.mpeg4_url=mpeg4Url;  return this;}  }
class C{  public void login(String username,String password) throws AuthenticationException {  service.setUserCredentials(username,password);}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  public final void writeFieldsToNative(StructObject struct){  desc.build();  if (!desc.hasFieldFields)   return;  try {    for (    StructFieldDescription fd : desc.fields) {      if (fd.field == null)       continue;      if (fd.isArray)       continue;      Object value=fd.field.get(struct);      if (value instanceof NativeObject) {        if (value != null)         BridJ.writeToNative((NativeObject)value);        continue;      }      Pointer ptr=struct.peer.offset(fd.byteOffset);      Type tpe=fd.isNativeObject || fd.isArray ? fd.nativeTypeOrPointerTargetType : fd.field.getGenericType();      ptr=ptr.as(tpe);      ptr=fixIntegralTypeIOToMatchLength(ptr,fd.byteLength,fd.arrayLength);      if (fd.isCLong && CLong.SIZE == 4 || fd.isSizeT && SizeT.SIZE == 4)       value=(int)(long)(Long)value;      ptr.set(value);    }  } catch (  Throwable th) {    throw new RuntimeException("Unexpected error while writing fields from struct " + Utils.toString(desc.structType) + " ("+ getPointer(struct)+ ")",th);  }}  }
class C{  @SuppressWarnings(SUPPRESS_UNCHECKED) public static void checkForErrors(Object xmlRpcResponse) throws LivingDocServerException {  if (xmlRpcResponse instanceof Vector) {    Vector<?> temp=(Vector<?>)xmlRpcResponse;    if (!temp.isEmpty()) {      checkErrors(temp.elementAt(0));    }  } else   if (xmlRpcResponse instanceof Hashtable) {    Hashtable<String,?> table=(Hashtable<String,?>)xmlRpcResponse;    if (!table.isEmpty()) {      checkForErrors(table.get(LivingDocServerErrorKey.ERROR));    }  } else {    checkErrors(xmlRpcResponse);  }}  }
class C{  public RC2ParameterSpec(int effectiveKeyBits,byte[] iv,int offset){  if (iv == null) {    throw new IllegalArgumentException("iv == null");  }  if (iv.length - offset < 8) {    throw new IllegalArgumentException("iv.length - offset < 8");  }  this.effectiveKeyBits=effectiveKeyBits;  this.iv=new byte[8];  System.arraycopy(iv,offset,this.iv,0,8);}  }
class C{  private void paintGrid(Graphics g,Color fg,Color bg){  Rectangle clipRect=g.getClipBounds();  g.setColor(bg);  g.fillRect(clipRect.x,clipRect.y,clipRect.width,clipRect.height);  g.setColor(fg);  g.translate(clipRect.x,clipRect.y);  int width=clipRect.width;  int height=clipRect.height;  int xCounter=clipRect.x % 2;  for (int end=width - height; xCounter < end; xCounter+=2) {    g.drawLine(xCounter,0,xCounter + height,height);  }  for (int end=width; xCounter < end; xCounter+=2) {    g.drawLine(xCounter,0,width,width - xCounter);  }  int yCounter=((clipRect.x % 2) == 0) ? 2 : 1;  for (int end=height - width; yCounter < end; yCounter+=2) {    g.drawLine(0,yCounter,width,yCounter + width);  }  for (int end=height; yCounter < end; yCounter+=2) {    g.drawLine(0,yCounter,height - yCounter,height);  }  g.translate(-clipRect.x,-clipRect.y);}  }
class C{  boolean isTOP(){  return TOP;}  }
class C{  @Override public void onLowMemory(){  super.onLowMemory();  mFragments.dispatchLowMemory();}  }
class C{  @Override public List<NoteInfo> list(AuthenticationInfo subject) throws IOException {  return getRepo(0).list(subject);}  }
class C{  public NotificationChain basicSetDef(StatechartSpecification newDef,NotificationChain msgs){  StatechartSpecification oldDef=def;  def=newDef;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,StextPackage.STATECHART_ROOT__DEF,oldDef,newDef);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public Object[] toArray(){  return Arrays.copyOf(elementData,size);}  }
class C{  public void readAndDumpPersons2CSV(final ActivityFacilitiesImpl parcels,final Network network){  String filename=module.getMATSim4OpusTemp() + InternalConstants.URBANSIM_PERSON_DATASET_TABLE + this.year+ InternalConstants.FILE_TYPE_TAB;  log.info("Starting to read persons table from " + filename);  Map<Id,SpatialReferenceObject> personLocations=new ConcurrentHashMap<Id,SpatialReferenceObject>();  Map<Id,AggregationObject> personClusterMap=new ConcurrentHashMap<Id,AggregationObject>();  try {    BufferedReader reader=IOUtils.getBufferedReader(filename);    String line=reader.readLine();    Map<String,Integer> idxFromKey=HeaderParser.createIdxFromKey(line,InternalConstants.TAB_SEPERATOR);    final int indexParcelID_HOME=idxFromKey.get(InternalConstants.PARCEL_ID_HOME);    final int indexPersonID=idxFromKey.get(InternalConstants.PERSON_ID);    while ((line=reader.readLine()) != null) {      String[] parts=line.split(InternalConstants.TAB_SEPERATOR);      if (Integer.parseInt(parts[indexParcelID_HOME]) >= 0) {        Id<Person> personId=Id.create(parts[indexPersonID],Person.class);        Id<ActivityFacility> homeParcelId=Id.create(parts[indexParcelID_HOME],ActivityFacility.class);        ActivityFacility homeLocation=parcels.getFacilities().get(homeParcelId);        if (homeLocation != null) {          personLocations.put(personId,new SpatialReferenceObject(personId,homeParcelId,null,homeLocation.getCoord()));{            assert (homeLocation.getCoord() != null);            Node nearestNode=NetworkUtils.getNearestNode(((Network)network),homeLocation.getCoord());            assert (nearestNode != null);            if (personClusterMap.containsKey(nearestNode.getId())) {              AggregationObject co=personClusterMap.get(nearestNode.getId());              co.addObject(personId,0.);            } else {              personClusterMap.put(nearestNode.getId(),new AggregationObject(personId,homeParcelId,null,nearestNode,0.));            }          }        }      }    }    AnalysisPopulationCSVWriter.writePopulationData2CSV(personLocations,module);    AnalysisPopulationCSVWriter.writeAggregatedPopulationData2CSV(personClusterMap,module);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  private static void cleanupAfterKilledLocator(File directory){  try {    if (ManagerInfo.getLocatorStatusCode(directory) == ManagerInfo.KILLED_STATUS_CODE) {      File infoFile=ManagerInfo.getLocatorInfoFile(directory);      if (infoFile.exists()) {        if (!infoFile.delete() && infoFile.exists()) {          System.out.println("WARNING: unable to delete " + infoFile.getAbsolutePath());        }        if (!quiet) {          System.out.println(LocalizedStrings.SystemAdmin_CLEANED_UP_ARTIFACTS_LEFT_BY_THE_PREVIOUS_KILLED_LOCATOR.toLocalizedString());        }      }    }  } catch (  GemFireException ignore) {  }}  }
class C{  public void outputBody(PrintWriter out){  m_body.output(out);}  }
class C{  private Argon2Factory(){}  }
class C{  public boolean isTimedOut(){  return this.timedOut;}  }
class C{  private DisplayUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public boolean visit(CharacterLiteral node){  return true;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected final void firePropertyChange(String propertyName,float oldValue,float newValue){  firePropertyChange(propertyName,Float.valueOf(oldValue),Float.valueOf(newValue));}  }
class C{  public Long remove(Integer key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public Long updateRoomWithModeration(String SID,Long room_id,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom){  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      return roommanagement.updateRoomInternal(room_id,roomtypes_id,name,ispublic,comment,numberOfPartizipants,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,true,false,false,"","","",null,null,null,false,false,false,false,false,false,false,false);    }  } catch (  Exception err) {    log.error("[updateRoomWithModeration] ",err);  }  return new Long(-1);}  }
class C{  public Single<TAccessToken> grantNewAccessToken(OAuth2Grant<TAccessToken> grant,Calendar calendar){  if (grant == null) {    throw new IllegalArgumentException("Grant MUST NOT be null.");  }  if (mTokenSingle == null) {    mTokenSingle=grant.grantNewAccessToken().doOnSuccess(null).toObservable().cache().toSingle();  }  return mTokenSingle;}  }
class C{  public Transaction(String who,Date when,double amount){  if (Double.isNaN(amount) || Double.isInfinite(amount))   throw new IllegalArgumentException("Amount cannot be NaN or infinite");  this.who=who;  this.when=when;  this.amount=amount;}  }
class C{  public int moveAllSolvesToHistory(String type,String subtype){  SQLiteDatabase db=this.getWritableDatabase();  ContentValues values=new ContentValues();  values.put(KEY_HISTORY,true);  return db.update(TABLE_TIMES,values,KEY_TYPE + " = ? AND " + KEY_SUBTYPE+ " =?",new String[]{type,subtype});}  }
class C{  public int hashCode(){  return p.hashCode();}  }
class C{  public boolean checkUtil(String util){  if (RootTools.findBinary(util)) {    List<String> binaryPaths=new ArrayList<String>();    binaryPaths.addAll(RootTools.lastFoundBinaryPaths);    for (    String path : binaryPaths) {      Permissions permissions=RootTools.getFilePermissionsSymlinks(path + "/" + util);      if (permissions != null) {        String permission;        if (Integer.toString(permissions.getPermissions()).length() > 3) {          permission=Integer.toString(permissions.getPermissions()).substring(1);        } else {          permission=Integer.toString(permissions.getPermissions());        }        if (permission.equals("755") || permission.equals("777") || permission.equals("775")) {          RootTools.utilPath=path + "/" + util;          return true;        }      }    }  }  return false;}  }
class C{  protected void tagHandlerPrefix() throws Exception {  writeCopyright();  writer.write('\n');  writePackage();  writer.write('\n');  writeImports();  writer.write("\n\n");  writer.writeBlockComment("******* GENERATED CODE - DO NOT EDIT *******");  writer.write("\n\n");  writeClassDocumentation();  writeClassDeclaration();  writer.write('\n');  writer.indent();}  }
class C{  public FastDoubleBuffer append(double element){  if ((currentBuffer == null) || (offset == currentBuffer.length)) {    needNewBuffer(size + 1);  }  currentBuffer[offset]=element;  offset++;  size++;  return this;}  }
class C{  private static final PublicKey constructPublicKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {  PublicKey key=null;  try {    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm,SunJCE.getInstance());    X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);    key=keyFactory.generatePublic(keySpec);  } catch (  NoSuchAlgorithmException nsae) {    try {      KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);      X509EncodedKeySpec keySpec=new X509EncodedKeySpec(encodedKey);      key=keyFactory.generatePublic(keySpec);    } catch (    NoSuchAlgorithmException nsae2) {      throw new NoSuchAlgorithmException("No installed providers " + "can create keys for the " + encodedKeyAlgorithm + "algorithm");    }catch (    InvalidKeySpecException ikse2) {      InvalidKeyException ike=new InvalidKeyException("Cannot construct public key");      ike.initCause(ikse2);      throw ike;    }  }catch (  InvalidKeySpecException ikse) {    InvalidKeyException ike=new InvalidKeyException("Cannot construct public key");    ike.initCause(ikse);    throw ike;  }  return key;}  }
class C{  public long sum(){  long sum=base;  Cell[] as=cells;  if (as != null) {    int n=as.length;    for (int i=0; i < n; ++i) {      Cell a=as[i];      if (a != null)       sum+=a.value;    }  }  return sum;}  }
class C{  public static void main(String[] args){  Context cx=Context.enter();  try {    cx.setLanguageVersion(Context.VERSION_1_2);    Scriptable scope=cx.initStandardObjects();    Object result=cx.evaluateString(scope,"obj = {a:1, b:['x','y']}","MySource",1,null);    Scriptable obj=(Scriptable)scope.get("obj",scope);    System.out.println("obj " + (obj == result ? "==" : "!=") + " result");    System.out.println("obj.a == " + obj.get("a",obj));    Scriptable b=(Scriptable)obj.get("b",obj);    System.out.println("obj.b[0] == " + b.get(0,b));    System.out.println("obj.b[1] == " + b.get(1,b));    Function fn=(Function)ScriptableObject.getProperty(obj,"toString");    System.out.println(fn.call(cx,scope,obj,new Object[0]));  }  finally {    Context.exit();  }}  }
class C{  protected SVGOMPolylineElement(){}  }
class C{  public FilteredNavigationRecordImpl(final String name,final String code,final String value,final int count){  this.name=name;  this.code=code;  this.value=value;  this.count=count;}  }
class C{  public TDoubleHash(int initialCapacity,TDoubleHashingStrategy strategy){  super(initialCapacity);  _hashingStrategy=strategy;}  }
class C{  public Builder superscript(){  this.superscript=true;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.879 -0400",hash_original_method="47354C26538F258C78E4A849697295D5",hash_generated_method="E05071016999648EF49EC2C942E47BB4") public static IOFileFilter ageFileFilter(Date cutoffDate,boolean acceptOlder){  return new AgeFileFilter(cutoffDate,acceptOlder);}  }
class C{  public static void ansibleStreamLogger(final InputStream in,final Listener out) throws IOException {  InputStreamReader isr=new InputStreamReader(in);  LineNumberReader lines=new LineNumberReader(isr);  String line;  while ((line=lines.readLine()) != null) {    out.output(line);  }}  }
class C{  public void receiveResultcreateServiceSession(org.oscm.example.client.SessionServiceStub.CreateServiceSessionResponseE result){}  }
class C{  public void rotate(PointF p1,PointF p2,float angle){  float px=p1.x;  float py=p1.y;  float ox=p2.x;  float oy=p2.y;  p1.x=(FloatMath.cos(angle) * (px - ox) - FloatMath.sin(angle) * (py - oy) + ox);  p1.y=(FloatMath.sin(angle) * (px - ox) + FloatMath.cos(angle) * (py - oy) + oy);}  }
class C{  public void tryToDeleteImageSharings(ContactId contact){  mImageSharingDeleteOperationHandler.post(new ImageSharingDeleteTask(mImageSharingService,this,mLocalContentResolver,contact));}  }
class C{  public void connectKNNInput(SharedObject<? extends KNNList> input){  this.input=input;}  }
class C{  private List<Pair<String,Boolean>> searchAttrs(int[] attrs){  List<Pair<String,Boolean>> results=new ArrayList<Pair<String,Boolean>>(attrs.length);  for (int i=0; i < attrs.length; i++) {    Pair<ResourceType,String> resolvedResource=Bridge.resolveResourceId(attrs[i]);    boolean isFramework=false;    if (resolvedResource != null) {      isFramework=true;    } else {      resolvedResource=mProjectCallback.resolveResourceId(attrs[i]);    }    if (resolvedResource != null) {      results.add(Pair.of(resolvedResource.getSecond(),isFramework));    } else {      results.add(null);    }  }  return results;}  }
class C{  private void addFilesParameter(DaemonParameters parameters,String parameterName,String filePrefix,Map<String,String> files){  StringBuilder propertiesJSON=new StringBuilder();  propertiesJSON.append("[");  int fileId=0;  for (  Map.Entry<String,String> entry : files.entrySet()) {    String relativePath=entry.getKey();    String absolutePath=entry.getValue();    if (fileId != 0) {      propertiesJSON.append(",");    }    propertiesJSON.append("\"" + relativePath + "\"");    parameters.setFile(filePrefix + fileId,absolutePath);    fileId++;  }  propertiesJSON.append("]");  parameters.setParameter(parameterName,propertiesJSON.toString());}  }
class C{  public static <T>FutureW<T> of(final CompletableFuture<T> f){  return new FutureW<>(f);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void commit(){  try {    conn.commit();  } catch (  SQLException e) {    throw convert(e);  }}  }
class C{  public boolean excludeEntry(int AD_Column_ID,boolean isSOTrx){  if (m_excludes == null) {    final String whereClause=X_M_AttributeSetExclude.COLUMNNAME_M_AttributeSet_ID + "=?";    List<X_M_AttributeSetExclude> list=new Query(getCtx(),X_M_AttributeSetExclude.Table_Name,whereClause,null).setParameters(get_ID()).setOnlyActiveRecords(true).list();    m_excludes=new X_M_AttributeSetExclude[list.size()];    list.toArray(m_excludes);  }  if (m_excludes != null && m_excludes.length > 0) {    MColumn column=MColumn.get(getCtx(),AD_Column_ID);    for (int i=0; i < m_excludes.length; i++) {      if (m_excludes[i].getAD_Table_ID() == column.getAD_Table_ID() && m_excludes[i].isSOTrx() == isSOTrx)       return true;    }  }  return false;}  }
class C{  public boolean isExhaustiveQualifier(){  return isExhaustive;}  }
class C{  final public int numProcessors(){  return m_processors;}  }
class C{  public Paragraph addParagraph(){  Paragraph p=new Paragraph(this,this,factory);  setParagraphMagic(p,paragraphs.size());synchronized (paragraphs) {    paragraphs.add(p);  }  if (noteEventListener != null) {    noteEventListener.onParagraphCreate(p);  }  return p;}  }
class C{  public TableViewerColumnBuilder columnBuilder(String headerText,int style){  return new TableViewerColumnBuilder(this,headerText,style);}  }
class C{  @Override public boolean canBeAttackedWithItem(){  return false;}  }
class C{  public boolean extend(SpatialComparable obj){  final int dim=min.length;  assert (!LoggingConfiguration.DEBUG || (obj.getDimensionality() == dim));  boolean extended=false;  for (int i=0; i < dim; i++) {    final double omin=obj.getMin(i);    final double omax=obj.getMax(i);    if (omin < min[i]) {      min[i]=omin;      extended=true;    }    if (omax > max[i]) {      max[i]=omax;      extended=true;    }  }  return extended;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public IteratingTupleQueryResult(List<String> bindingNames,Iterable<? extends BindingSet> bindingSets){  this(bindingNames,bindingSets.iterator());}  }
class C{  public static Boolean checkIsReadOnly(){  String state=Environment.getExternalStorageState();  if (Environment.MEDIA_MOUNTED_READ_ONLY.equals(state)) {    return true;  } else {    return false;  }}  }
class C{  public static void main(String[] args){  runClassifier(new NaiveBayesMultinomialText(),args);}  }
class C{  public T caseScope(Scope object){  return null;}  }
class C{  public Column fullName(String fullName){  this.fullName=fullName;  return this;}  }
class C{  protected void error(Exception ex){}  }
class C{  public MoneyRegex(){  super(MONEY_REGEX,false,1.0f);}  }
class C{  public FoldingAnnotation(boolean isCollapsed){  super(isCollapsed);  visible=false;}  }
class C{  public void testBug8812() throws Exception {  String tableName="testBug8812";  try {    createTable(tableName,"(field1 INT, field2 INT, INDEX(field1), UNIQUE INDEX(field2))");    DatabaseMetaData dbmd=this.conn.getMetaData();    this.rs=dbmd.getIndexInfo(this.conn.getCatalog(),null,tableName,true,false);    assertTrue(this.rs.next());    assertEquals(this.rs.getBoolean("NON_UNIQUE"),false);    this.rs=dbmd.getIndexInfo(this.conn.getCatalog(),null,tableName,false,false);    assertTrue(this.rs.next());    assertEquals(this.rs.getBoolean("NON_UNIQUE"),false);    assertTrue(this.rs.next());    assertEquals(this.rs.getBoolean("NON_UNIQUE"),true);  }  finally {    dropTable(tableName);  }}  }
class C{  private JSONObject createJSONObject(MotionEvent motionEvent,int pos,int pointerIndex){  PointF screenXY, pageXY;  if (pos == CUR_EVENT) {    pageXY=getEventLocInPageCoordinate(motionEvent,pointerIndex);    screenXY=getEventLocInScreenCoordinate(motionEvent,pointerIndex);  } else {    pageXY=getEventLocInPageCoordinate(motionEvent,pointerIndex,pos);    screenXY=getEventLocInScreenCoordinate(motionEvent,pointerIndex,pos);  }  return createJSONObject(screenXY,pageXY,(float)motionEvent.getPointerId(pointerIndex));}  }
class C{  private FailoverConnectionProxy(List<String> hosts,Properties props) throws SQLException {  super(hosts,props);  ConnectionPropertiesImpl connProps=new ConnectionPropertiesImpl();  connProps.initializeProperties(props);  this.secondsBeforeRetryPrimaryHost=connProps.getSecondsBeforeRetryMaster();  this.queriesBeforeRetryPrimaryHost=connProps.getQueriesBeforeRetryMaster();  this.failoverReadOnly=connProps.getFailOverReadOnly();  this.retriesAllDown=connProps.getRetriesAllDown();  this.enableFallBackToPrimaryHost=this.secondsBeforeRetryPrimaryHost > 0 || this.queriesBeforeRetryPrimaryHost > 0;  pickNewConnection();  this.explicitlyAutoCommit=this.currentConnection.getAutoCommit();}  }
class C{  public static final IV ceiling(final IV iv){  throw new UnsupportedOperationException();}  }
class C{  protected void convertNeighbors(DBIDRange ids,DBIDRef ix,boolean square,KNNList neighbours,DoubleArray dist,IntegerArray ind){  for (DoubleDBIDListIter iter=neighbours.iter(); iter.valid(); iter.advance()) {    if (DBIDUtil.equal(iter,ix)) {      continue;    }    double d=iter.doubleValue();    dist.add(square ? (d * d) : d);    ind.add(ids.getOffset(iter));  }}  }
class C{  @Override public void write(byte[] b,int off,int len) throws IOException {  if (stack.size() == 0 || standaloneMarkers.contains(stack.peek().marker)) {    writeStuffed(b,off,len);  } else {    writeNonstuffed(b,off,len);  }}  }
class C{  protected void writeMetaDataForKnownTID(long tid){  hub.writeMetaDataForKnownTID(tid,hub.outWire(),csp,cid);}  }
class C{  public void testGetF14Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF14Momentary();  assertEquals(expResult,result);}  }
class C{  private static <T>T stringToEnum(Class<?> cls,String value){  return (T)Enum.valueOf((Class<Enum>)cls,value);}  }
class C{  public TaskResourceRep addInitiatorDecline(URI initiator,URI eventId){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:47.413 -0400",hash_original_method="85D28131980ACA042D133B2C5AC1F447",hash_generated_method="E23111992F62ACC60B383CFBF8677273") private void handleFlawedDiscovery(String logAdapterClassName,ClassLoader classLoader,Throwable discoveryFlaw){  if (isDiagnosticsEnabled()) {    logDiagnostic("Could not instantiate Log '" + logAdapterClassName + "' -- "+ discoveryFlaw.getClass().getName()+ ": "+ discoveryFlaw.getLocalizedMessage());  }  if (!allowFlawedDiscovery) {    throw new LogConfigurationException(discoveryFlaw);  }}  }
class C{  public Matrix4f m22(float m22){  this.m22=m22;  properties&=~(PROPERTY_IDENTITY | PROPERTY_TRANSLATION);  return this;}  }
class C{  public boolean isAutoArchive(){  String aa=getAutoArchive();  return aa != null && !aa.equals(AUTOARCHIVE_None);}  }
class C{  @Deprecated public ParserConfig(boolean verifyData,boolean stopAtFirstError,boolean preserveBNodeIDs,DatatypeHandling datatypeHandling){  this();  this.set(BasicParserSettings.PRESERVE_BNODE_IDS,preserveBNodeIDs);  if (!stopAtFirstError) {    Set<RioSetting<?>> nonFatalErrors=new HashSet<RioSetting<?>>();    nonFatalErrors.add(TriXParserSettings.FAIL_ON_TRIX_INVALID_STATEMENT);    nonFatalErrors.add(TriXParserSettings.FAIL_ON_TRIX_MISSING_DATATYPE);    nonFatalErrors.add(NTriplesParserSettings.FAIL_ON_NTRIPLES_INVALID_LINES);    if (verifyData) {      nonFatalErrors.add(BasicParserSettings.VERIFY_RELATIVE_URIS);      if (datatypeHandling == DatatypeHandling.IGNORE) {        nonFatalErrors.add(BasicParserSettings.FAIL_ON_UNKNOWN_DATATYPES);        nonFatalErrors.add(BasicParserSettings.VERIFY_DATATYPE_VALUES);        nonFatalErrors.add(BasicParserSettings.NORMALIZE_DATATYPE_VALUES);      } else       if (datatypeHandling == DatatypeHandling.VERIFY) {        nonFatalErrors.add(BasicParserSettings.NORMALIZE_DATATYPE_VALUES);      } else {      }    }    setNonFatalErrors(nonFatalErrors);  }}  }
class C{  static void runUtilWithArgs(final String[] args) throws Exception {  String utilClass=args[0];  ConfProxyUtil util=createUtilInstance(utilClass);  Options opts=util.getOptions();  CommandLine commandLine=cmdLineGnuParser.parse(opts,args);  util.execute(commandLine);}  }
class C{  public Matrix copy(){  Matrix X=new Matrix(m,n);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[i][j]=A[i][j];    }  }  return X;}  }
class C{  public T caseEffect(Effect object){  return null;}  }
class C{  private DefaultMutableTreeNode createSubDnNode(Dn dn,Token token){  DefaultMutableTreeNode node=new ComparableDefaultMutableTreeNode();  String label=isKeyValueView() ? token.getTokenValue() : token.getValue();  XNodeInfo userObject=new XNodeInfo(Type.NONMBEAN,label,label,token.getTokenValue());  node.setUserObject(userObject);  return node;}  }
class C{  public Vector3(Vector3 clone){  this(clone.getX(),clone.getY(),clone.getZ());}  }
class C{  public static void silentCloseInputStream(InputStream is){  try {    if (is != null) {      is.close();    }  } catch (  IOException e) {    Log.w(LOG_TAG,"Cannot close input stream",e);  }}  }
class C{  private static BigInteger valueOf(int val[]){  return (val[0] > 0 ? new BigInteger(val,1) : new BigInteger(val));}  }
class C{  public EllipticalOrbitAnimation3D(Vector3 focalPoint,Vector3 periapsis,double eccentricity,double angle,OrbitDirection direction){  this(focalPoint,periapsis,Vector3.getAxisVector(Axis.Y),eccentricity,angle,direction);}  }
class C{  public ThumbnailParameter(Dimension thumbnailSize,Region sourceRegion,boolean keepAspectRatio,String outputFormat,String outputFormatType,float outputQuality,int imageType,List<ImageFilter> filters,ResizerFactory resizerFactory,boolean fitWithinDimensions,boolean useExifOrientation){  this(thumbnailSize,Double.NaN,Double.NaN,sourceRegion,keepAspectRatio,outputFormat,outputFormatType,outputQuality,imageType,filters,resizerFactory,fitWithinDimensions,useExifOrientation);  validateThumbnailSize();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.129 -0500",hash_original_method="4A4FFE02A853DD2A3546008C7FB43A41",hash_generated_method="D2EF5E3F94CC76C228A9615A051CDD44") public SocketInputStream(Socket socket,InputStream stream){  super(stream);  __socket=socket;}  }
class C{  @Override public String toString(){  return Objects.toStringHelper(this).add("player",player).toString();}  }
class C{  public void collideHorizontal(){  behavior.collisionX();  collision=true;}  }
class C{  private void removeParserNotices(Parser parser){  if (noticesToHighlights != null) {    RSyntaxTextAreaHighlighter h=(RSyntaxTextAreaHighlighter)textArea.getHighlighter();    for (Iterator i=noticesToHighlights.entrySet().iterator(); i.hasNext(); ) {      Map.Entry entry=(Map.Entry)i.next();      ParserNotice notice=(ParserNotice)entry.getKey();      if (notice.getParser() == parser && entry.getValue() != null) {        h.removeParserHighlight(entry.getValue());        i.remove();      }    }  }}  }
class C{  @PostConstruct void init(){  super.init(dsTableHeader,dsTable,distributionDetails);}  }
class C{  protected boolean isRootPaneCheckingEnabled(){  return rootPaneCheckingEnabled;}  }
class C{  protected void insertNewline(){  final Document doc=textPane.getDocument();  try {    doc.insertString(doc.getLength(),"\r\n",getStyle(Color.black,"normal"));  } catch (  final BadLocationException e) {    logger.error("Couldn't insert initial text.",e);  }}  }
class C{  public void testWriteTrack() throws Exception {  Location[] locations={new Location("fake0"),new Location("fake1"),new Location("fake2"),new Location("fake3"),new Location("fake4"),new Location("fake5")};  fillLocations(locations);  locations[2].setLatitude(100.0);  assertEquals(locations.length,myTracksProviderUtils.bulkInsertTrackPoint(locations,locations.length,TRACK_ID));  Waypoint[] waypoints={new Waypoint(),new Waypoint(),new Waypoint()};  for (int i=0; i < waypoints.length; i++) {    Waypoint waypoint=waypoints[i];    waypoint.setTrackId(TRACK_ID);    assertNotNull(myTracksProviderUtils.insertWaypoint(waypoint));    waypoint.setId(i + 1);  }  trackWriter.prepare(outputStream);  trackWriter.writeHeader(tracks);  trackWriter.writeBeginWaypoints(tracks[0]);  trackWriter.writeWaypoint(waypointEq(waypoints[1]));  trackWriter.writeWaypoint(waypointEq(waypoints[2]));  trackWriter.writeEndWaypoints();  trackWriter.writeBeginTracks();  trackWriter.writeBeginTrack(trackEq(tracks[0]),locationEq(locations[0]));  trackWriter.writeOpenSegment();  trackWriter.writeLocation(locationEq(locations[0]));  trackWriter.writeLocation(locationEq(locations[1]));  trackWriter.writeCloseSegment();  trackWriter.writeOpenSegment();  trackWriter.writeLocation(locationEq(locations[3]));  trackWriter.writeLocation(locationEq(locations[4]));  trackWriter.writeLocation(locationEq(locations[5]));  trackWriter.writeCloseSegment();  trackWriter.writeEndTrack(trackEq(tracks[0]),locationEq(locations[5]));  trackWriter.writeEndTracks();  trackWriter.writeFooter();  trackWriter.close();  mocksControl.replay();  assertTrue(fileTrackExporter.writeTrack(outputStream));  mocksControl.verify();}  }
class C{  @Override public void markerChanged(MarkerChangeEvent event){  this.lastEvent=event;}  }
class C{  public Map<String,Object> update(final JsonCommand jsonCommand){  final Map<String,Object> actualChanges=new LinkedHashMap<>();  if (jsonCommand.isChangeInStringParameterNamed(ReportMailingJobConstants.NAME_PARAM_NAME,this.name)) {    final String name=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.NAME_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.NAME_PARAM_NAME,name);    this.name=name;  }  if (jsonCommand.isChangeInStringParameterNamed(ReportMailingJobConstants.DESCRIPTION_PARAM_NAME,this.description)) {    final String description=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.DESCRIPTION_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.DESCRIPTION_PARAM_NAME,description);    this.description=description;  }  if (jsonCommand.isChangeInStringParameterNamed(ReportMailingJobConstants.RECURRENCE_PARAM_NAME,this.recurrence)) {    final String recurrence=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.RECURRENCE_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.RECURRENCE_PARAM_NAME,recurrence);    this.recurrence=recurrence;  }  if (jsonCommand.isChangeInBooleanParameterNamed(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME,this.isActive)) {    final boolean isActive=jsonCommand.booleanPrimitiveValueOfParameterNamed(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.IS_ACTIVE_PARAM_NAME,isActive);    this.isActive=isActive;  }  if (jsonCommand.isChangeInStringParameterNamed(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME,this.emailRecipients)) {    final String emailRecipients=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.EMAIL_RECIPIENTS_PARAM_NAME,emailRecipients);    this.emailRecipients=emailRecipients;  }  if (jsonCommand.isChangeInStringParameterNamed(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME,this.emailSubject)) {    final String emailSubject=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.EMAIL_SUBJECT_PARAM_NAME,emailSubject);    this.emailSubject=emailSubject;  }  if (jsonCommand.isChangeInStringParameterNamed(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME,this.emailMessage)) {    final String emailMessage=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.EMAIL_MESSAGE_PARAM_NAME,emailMessage);    this.emailMessage=emailMessage;  }  if (jsonCommand.isChangeInStringParameterNamed(ReportMailingJobConstants.STRETCHY_REPORT_PARAM_MAP_PARAM_NAME,this.stretchyReportParamMap)) {    final String stretchyReportParamMap=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.STRETCHY_REPORT_PARAM_MAP_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.STRETCHY_REPORT_PARAM_MAP_PARAM_NAME,stretchyReportParamMap);    this.stretchyReportParamMap=stretchyReportParamMap;  }  final ReportMailingJobEmailAttachmentFileFormat emailAttachmentFileFormat=ReportMailingJobEmailAttachmentFileFormat.newInstance(this.emailAttachmentFileFormat);  if (jsonCommand.isChangeInIntegerParameterNamed(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME,emailAttachmentFileFormat.getId())) {    final Integer emailAttachmentFileFormatId=jsonCommand.integerValueOfParameterNamed(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.EMAIL_ATTACHMENT_FILE_FORMAT_ID_PARAM_NAME,emailAttachmentFileFormatId);    final ReportMailingJobEmailAttachmentFileFormat newEmailAttachmentFileFormat=ReportMailingJobEmailAttachmentFileFormat.newInstance(emailAttachmentFileFormatId);    this.emailAttachmentFileFormat=newEmailAttachmentFileFormat.getValue();  }  final String newStartDateTimeString=jsonCommand.stringValueOfParameterNamed(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME);  if (!StringUtils.isEmpty(newStartDateTimeString)) {    final DateTimeFormatter dateTimeFormatter=DateTimeFormat.forPattern(jsonCommand.dateFormat()).withLocale(jsonCommand.extractLocale());    final LocalDateTime newStartDateTime=LocalDateTime.parse(newStartDateTimeString,dateTimeFormatter);    final LocalDateTime oldStartDateTime=(this.startDateTime != null) ? new LocalDateTime(this.startDateTime) : null;    if ((oldStartDateTime != null) && !newStartDateTime.equals(oldStartDateTime)) {      actualChanges.put(ReportMailingJobConstants.START_DATE_TIME_PARAM_NAME,newStartDateTimeString);      this.startDateTime=newStartDateTime.toDate();    }  }  Long currentStretchyReportId=null;  if (this.stretchyReport != null) {    currentStretchyReportId=this.stretchyReport.getId();  }  if (jsonCommand.isChangeInLongParameterNamed(ReportMailingJobConstants.STRETCHY_REPORT_ID_PARAM_NAME,currentStretchyReportId)) {    final Long updatedStretchyReportId=jsonCommand.longValueOfParameterNamed(ReportMailingJobConstants.STRETCHY_REPORT_ID_PARAM_NAME);    actualChanges.put(ReportMailingJobConstants.STRETCHY_REPORT_ID_PARAM_NAME,updatedStretchyReportId);  }  return actualChanges;}  }
class C{  public void destroy(){  super.destroy();}  }
class C{  public EventNode next() throws Exception {  EventNode next=peek;  if (next == null) {    next=read();  } else {    peek=null;  }  return next;}  }
class C{  protected static String nonceCountToHex(int count){  String str=Integer.toHexString(count);  StringBuffer pad=new StringBuffer();  if (str.length() < 8) {    for (int i=0; i < 8 - str.length(); i++) {      pad.append("0");    }  }  return pad.toString() + str;}  }
class C{  public void handleEvent(Event evt){  evt=EventSupport.getUltimateOriginalEvent(evt);  listener.subtreeModified((Node)evt.getTarget());}  }
class C{  private Status waitOnOperationComplete(Class<? extends DataObject> clazz,URI uri,String taskId){  Status status=Status.pending;  do {    DataObject dobj=_dbClient.queryObject(uri);    if (dobj == null || dobj.getInactive() || dobj.getOpStatus() == null || !dobj.getOpStatus().containsKey(taskId)) {      return Status.error;    }    Operation operation=dobj.getOpStatus().get(taskId);    status=Status.toStatus(operation.getStatus());  } while (status == Status.pending);  return status;}  }
class C{  @Override public void output(Vertex output){}  }
class C{  void moveCursorToFolder(Cursor cursor,long folderToFind,int idIndex) throws AssertionError {  if (!cursor.moveToFirst()) {    throw new AssertionError("No folders in the database!");  }  long folder;  do {    folder=cursor.getLong(idIndex);  } while (folder != folderToFind && cursor.moveToNext());  if (cursor.isAfterLast()) {    throw new AssertionError("Folder(id=" + folderToFind + ") holding this bookmark does not exist!");  }}  }
class C{  public BigInteger[] generateSignature(byte[] message){  BigInteger n=key.getParameters().getN();  BigInteger e=calculateE(n,message);  BigInteger r=null;  BigInteger s=null;  do {    BigInteger k=null;    int nBitLength=n.bitLength();    do {      do {        k=new BigInteger(nBitLength,random);      } while (k.equals(ZERO) || k.compareTo(n) >= 0);      ECPoint p=key.getParameters().getG().multiply(k);      BigInteger x=p.getX().toBigInteger();      r=x.mod(n);    } while (r.equals(ZERO));    BigInteger d=((ECPrivateKeyParameters)key).getD();    s=k.modInverse(n).multiply(e.add(d.multiply(r))).mod(n);  } while (s.equals(ZERO));  BigInteger[] res=new BigInteger[2];  res[0]=r;  res[1]=s;  return res;}  }
class C{  public static void fill(Object[] a,int fromIndex,int toIndex,Object val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  @Override public void onWebSocketError(Throwable cause){  super.onWebSocketError(cause);  log.info("Socket error: ",cause);  store.unsubscribe(handle);}  }
class C{  public void executeASync(ProcessInfo pi){  log.config("-");}  }
class C{  private void paragraphInit(byte aBaseline,CoreMetrics lm,Map<? extends Attribute,?> paragraphAttrs,char[] text){  baseline=aBaseline;  baselineOffsets=TextLine.getNormalizedOffsets(lm.baselineOffsets,baseline);  justifyRatio=AttributeValues.getJustification(paragraphAttrs);  NumericShaper shaper=AttributeValues.getNumericShaping(paragraphAttrs);  if (shaper != null) {    shaper.shape(text,0,text.length);  }}  }
class C{  public void updateRoomObject(Rooms room){  log.debug("updateRoomObject " + room.getIsClosed());  try {    if (room.getRooms_id() == null) {      em.persist(room);    } else {      if (!em.contains(room)) {        em.merge(room);      }    }  } catch (  Exception e) {    log.error("Error updateRoomObject : ",e);  }}  }
class C{  public SaaSApplicationException(Throwable cause){  super(cause);  init();  this.setCauseStackTrace(cause);}  }
class C{  private static int calculateDelayForSuccess(){  float errorPercent=VARIANCE_PCT / 100f;  float lowerBound=1f - errorPercent;  float upperBound=1f + errorPercent;  float bound=upperBound - lowerBound;  float delayPercent=(random.nextFloat() * bound) + lowerBound;  return (int)(DELAY_MS * delayPercent);}  }
class C{  public static void generateDebug(final String errCode,final Logger logger){  generateDebug(errCode,null,logger,null);}  }
class C{  public void fillArc(int x,int y,int width,int height,int startAngle,int arcAngle){  impl.fillArc(nativeGraphics,xTranslate + x,yTranslate + y,width,height,startAngle,arcAngle);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void doubleHeadway(){  log.info("DoubleHeadway ...");  TransitSchedule schedule=this.scenario.getTransitSchedule();  newVehiclesMap=new TreeMap<Id,Vehicle>();  vehicleNumber=0;  for (  TransitLine line : schedule.getTransitLines().values()) {    for (    TransitRoute route : line.getRoutes().values()) {      Map<Id<Departure>,Departure> departures=route.getDepartures();      if (departures == null)       continue;      newDepartures=new TreeMap<Double,Departure>();      departuresTimes=new TreeMap<Double,Departure>();      for (      Departure departure : departures.values()) {        departuresTimes.put(departure.getDepartureTime(),departure);        old_NrOfDepartures++;      }      implDeparture=departuresTimes.firstKey();      Id vehicleId=departuresTimes.get(implDeparture).getVehicleId();      currentVehicle=scenario.getTransitVehicles().getVehicles().get(vehicleId);      copyFirstDeparture();      if (departures.size() >= 2) {        considerHeadwayAdaption();      }      this.removeDepartures((TransitRouteImpl)route);      this.copyNewDepartures(route);    }  }  this.removeVehicles();  this.copyNewVehicles();  log.info("DoubleHeadway ... done");}  }
class C{  public Task<VirtualDataCenterRestRep> disconnect(URI id){  return postTask(getDisconnectUrl(),id);}  }
class C{  static int gTypeGeomType(int gType){  return gType % 100;}  }
class C{  public MutabilityControl(){  mutable=true;}  }
class C{  public static long millisecondsToRun(Runnable runnable){  return TimeKeeper.nanosecondsToRun(runnable) / (long)MILLIS_TO_NANOS;}  }
class C{  private static long parseDurationFromSeconds(String durationSeconds){  long duration=0;  try {    duration=Long.parseLong(durationSeconds);    duration=duration * 1_000;  } catch (  NumberFormatException e) {    Timber.w("Error in parseDuration");    Timber.w(e.getMessage());  }  return duration;}  }
class C{  public MyString1 substring(int begin,int end){  char[] ch=new char[end - begin];  for (int i=begin, j=0; i < end; i++, j++) {    ch[j]=chars[i];  }  return new MyString1(ch);}  }
class C{  private static void quadMult(final double a[],final double b[],final double result[]){  final double xs[]=new double[2];  final double ys[]=new double[2];  final double zs[]=new double[2];  split(a[0],xs);  split(b[0],ys);  splitMult(xs,ys,zs);  result[0]=zs[0];  result[1]=zs[1];  split(b[1],ys);  splitMult(xs,ys,zs);  double tmp=result[0] + zs[0];  result[1]-=tmp - result[0] - zs[0];  result[0]=tmp;  tmp=result[0] + zs[1];  result[1]-=tmp - result[0] - zs[1];  result[0]=tmp;  split(a[1],xs);  split(b[0],ys);  splitMult(xs,ys,zs);  tmp=result[0] + zs[0];  result[1]-=tmp - result[0] - zs[0];  result[0]=tmp;  tmp=result[0] + zs[1];  result[1]-=tmp - result[0] - zs[1];  result[0]=tmp;  split(a[1],xs);  split(b[1],ys);  splitMult(xs,ys,zs);  tmp=result[0] + zs[0];  result[1]-=tmp - result[0] - zs[0];  result[0]=tmp;  tmp=result[0] + zs[1];  result[1]-=tmp - result[0] - zs[1];  result[0]=tmp;}  }
class C{  public void removeEdge(String factor,LaggedFactor laggedFactor){  if (existsEdge(factor,laggedFactor)) {    try {      lagGraph.removeEdge(factor,laggedFactor);      getPropertyChangeManager().firePropertyChange("edgeRemoved",new LaggedEdge(factor,laggedFactor),null);    } catch (    Exception e) {    }  }}  }
class C{  public static void checkAndSetBooleanParam(Element context,AVList params,String paramKey,String paramName,XPath xpath){  if (context == null) {    String message=Logging.getMessage("nullValue.ElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (params == null) {    String message=Logging.getMessage("nullValue.ParametersIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramKey == null) {    String message=Logging.getMessage("nullValue.ParameterKeyIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (paramName == null) {    String message=Logging.getMessage("nullValue.ParameterNameIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Object o=params.getValue(paramKey);  if (o == null) {    Boolean d=getBoolean(context,paramName,xpath);    if (d != null)     params.setValue(paramKey,d);  }}  }
class C{  public static ThreadSafeFrame[] wrapArray(Object syncObj,Frame[] frames){  ThreadSafeFrame[] threadSafeFrames=new ThreadSafeFrame[frames.length];  for (int i=0; i < frames.length; ++i) {    threadSafeFrames[i]=wrap(syncObj,frames[i]);  }  return threadSafeFrames;}  }
class C{  public GenericObjectEditorDialog(Frame owner,String title,boolean modal){  super(owner,title,modal);}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  public T threshold(int threshold){  this.threshold=threshold;  return self();}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  private Notification buildNotification(PendingIntent invitation,String title,String message){  NotificationCompat.Builder notif=new NotificationCompat.Builder(this);  notif.setContentIntent(invitation);  notif.setSmallIcon(R.drawable.ri_notif_chat_icon);  notif.setWhen(System.currentTimeMillis());  notif.setAutoCancel(true);  notif.setOnlyAlertOnce(true);  notif.setSound(RingtoneManager.getDefaultUri(RingtoneManager.TYPE_NOTIFICATION));  notif.setDefaults(Notification.DEFAULT_VIBRATE);  notif.setContentTitle(title);  notif.setContentText(message);  return notif.build();}  }
class C{  public static ArrayList<ByteString> byteArraysToStrings(ArrayList<byte[]> byteArrays){  if (byteArrays == null) {    return null;  }  ArrayList<ByteString> byteStrings=new ArrayList<ByteString>();  for (  byte[] bytes : byteArrays) {    byteStrings.add(ByteString.of(bytes));  }  return byteStrings;}  }
class C{  @NotNull public final PsiQuery childrenStringLiterals(@NotNull final Class<? extends PyStringLiteralExpression> clazz,@NotNull final String expectedText){  final List<PsiElement> result=new ArrayList<PsiElement>();  for (  final PyStringLiteralExpression element : getChildrenElements(clazz)) {    if (element.getStringValue().equals(expectedText)) {      result.add(element);    }  }  return new PsiQuery(result.toArray(new PsiElement[result.size()]));}  }
class C{  public int addXObjects() throws IOException {  if (imageList.size() > 0) {    PDFDictionary xobj=pdf.openDictionary("XObjects");    for (Iterator<Entry> i=imageList.iterator(); i.hasNext(); ) {      Entry entry=(Entry)i.next();      xobj.entry(entry.name,pdf.ref(entry.name));      if (entry.maskName != null)       xobj.entry(entry.maskName,pdf.ref(entry.maskName));    }    pdf.close(xobj);  }  return imageList.size();}  }
class C{  private void checkValidInterval(Duration pollingInterval,int retries,long timeSleptMillis){  long highSum=0;  long lowSum=0;  for (int i=0; i < retries; i++) {    double currentInterval=pollingInterval.getMillis() * Math.pow(DataflowPipelineJob.DEFAULT_BACKOFF_EXPONENT,i);    double randomOffset=0.5 * currentInterval;    highSum+=Math.round(currentInterval + randomOffset);    lowSum+=Math.round(currentInterval - randomOffset);  }  assertThat(timeSleptMillis,allOf(greaterThanOrEqualTo(lowSum),lessThanOrEqualTo(highSum)));}  }
class C{  public CActionShowProximityBrowsingSettingsDialog(final JFrame parent,final ZyGraphViewSettings settings){  super("Proximity Browsing Settings");  m_parent=parent;  m_settings=settings;}  }
class C{  public EditorType readPref(final EditorPreferences editorPreferences){  if (editorPreferences == null || editorPreferences.getDefaultEditor() == null) {    return this.defaultEditorType;  }  final String editorKey=editorPreferences.getDefaultEditor();  final EditorType editorType=EditorType.getInstance(editorKey);  if (editorType != null) {    return editorType;  } else {    return this.defaultEditorType;  }}  }
class C{  public Enumeration<GrantEntry> grantElements(){  return grantEntries.elements();}  }
class C{  @RequestMapping(value={"/{cg}/{k}","{cg}/{k}/"},method=RequestMethod.GET) @ResponseBody public RestWrapper listUsingKey(@PathVariable("cg") String configGroup,@PathVariable("k") String key,Principal principal){  RestWrapper restWrapper=null;  GetGeneralConfig getGeneralConfig=new GetGeneralConfig();  GeneralConfig generalConfig=getGeneralConfig.byConigGroupAndKey(configGroup,key);  if (generalConfig.getRequired() == 2) {    restWrapper=new RestWrapper("Object with specified config_group and key not found",RestWrapper.ERROR);  } else {    restWrapper=new RestWrapper(generalConfig,RestWrapper.OK);    LOGGER.info("Record with config group: " + configGroup + " and key:"+ key+ "selected from General Config by User:"+ principal.getName());  }  return restWrapper;}  }
class C{  public static final void drawRectangleFromCenter(GL2 gl,double cx,double cy,double w,double h,boolean points){  double w2=w * 0.5;  double h2=h * 0.5;  gl.glBegin(GL.GL_LINE_LOOP);  gl.glVertex2d(cx - w2,cy + h2);  gl.glVertex2d(cx + w2,cy + h2);  gl.glVertex2d(cx + w2,cy - h2);  gl.glVertex2d(cx - w2,cy - h2);  gl.glEnd();  if (points) {    gl.glBegin(GL.GL_POINTS);    gl.glVertex2d(cx - w2,cy + h2);    gl.glVertex2d(cx + w2,cy + h2);    gl.glVertex2d(cx + w2,cy - h2);    gl.glVertex2d(cx - w2,cy - h2);    gl.glEnd();  }}  }
class C{  private Sort sortByLastNameAsc(){  return new Sort(Sort.Direction.DESC,"date");}  }
class C{  public boolean accept(Document doc){  if (doc == null) {    String message=Logging.getMessage("nullValue.DocumentIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (doc.getDocumentElement() == null) {    String message=Logging.getMessage("nullValue.DocumentElementIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  return this.accept(doc.getDocumentElement());}  }
class C{  private void showProgress(){  findViewById(R.id.progress_bar).setVisibility(View.VISIBLE);  setViewsEnabled(false,R.id.button_load_credentials,R.id.button_load_hint,R.id.button_save_credential,R.id.button_delete_loaded_credential);}  }
class C{  public LogDiscretizer(double base,double upperBound){  this(base,upperBound,1.0);}  }
class C{  public void remove(){  if (m_table.removeRow(m_cur))   modify();}  }
class C{  public static KpcRunner serializableInstance(){  return new KpcRunner(Dag.serializableInstance(),new Parameters());}  }
class C{  public void write(ByteBuffer src,int srcStart,int srcLength) throws IOException {  final int bufferPosition=checkOffset(position,srcLength);  final long destAddress=PlatformDependent.directBufferAddress(lastMapped) + bufferPosition;  if (src.isDirect()) {    final long srcAddress=PlatformDependent.directBufferAddress(src) + srcStart;    PlatformDependent.copyMemory(srcAddress,destAddress,srcLength);  } else {    final byte[] srcArray=src.array();    PlatformDependent.copyMemory(srcArray,srcStart,destAddress,srcLength);  }  position+=srcLength;  if (position > this.length) {    this.length=position;  }}  }
class C{  public void unbindTree(Container ui){  int componentCount=ui.getComponentCount();  for (int iter=0; iter < componentCount; iter++) {    Component c=ui.getComponentAt(iter);    if (c instanceof Container) {      unbindTree((Container)c);      continue;    }    String bind=c.getCloudBoundProperty();    if (bind != null && bind.length() > 0) {      String attributeName=c.getCloudDestinationProperty();      if (attributeName != null) {        unbindProperty(c,bind);      }    }  }}  }
class C{  private static URI toUri(String path,boolean isUnc,boolean addSlash){  String uriHost;  String uriPath;  if (isUnc) {    int slash=path.indexOf('\\',2);    uriHost=path.substring(2,slash);    uriPath=path.substring(slash).replace('\\','/');    if (uriHost.endsWith(IPV6_LITERAL_SUFFIX)) {      uriHost=uriHost.substring(0,uriHost.length() - IPV6_LITERAL_SUFFIX.length()).replace('-',':').replace('s','%');    }  } else {    uriHost="";    uriPath="/" + path.replace('\\','/');  }  if (addSlash)   uriPath+="/";  try {    return new URI("file",uriHost,uriPath,null);  } catch (  URISyntaxException x) {    if (!isUnc)     throw new AssertionError(x);  }  uriPath="//" + path.replace('\\','/');  if (addSlash)   uriPath+="/";  try {    return new URI("file",null,uriPath,null);  } catch (  URISyntaxException x) {    throw new AssertionError(x);  }}  }
class C{  @Inline public static boolean tryCompareAndSwap(Object base,Offset offset,Address testValue,Address newValue){  if (Barriers.NEEDS_ADDRESS_PUTFIELD_BARRIER || Barriers.NEEDS_ADDRESS_GETFIELD_BARRIER) {    return Barriers.addressTryCompareAndSwap(base,offset,testValue,newValue);  } else {    if (VM.BuildForIA32) {      return Magic.attemptAddress(base,offset,testValue,newValue);    } else {      Address oldValue;      do {        oldValue=Magic.prepareAddress(base,offset);        if (oldValue.NE(testValue))         return false;      } while (!Magic.attemptAddress(base,offset,oldValue,newValue));      return true;    }  }}  }
class C{  public void retain(int newCapacity){  this.capacity=newCapacity;  if (this.size() > newCapacity) {    Counter<T> toRemoved;    for (int i=0, n=this.size() - newCapacity; i < n; i++) {      toRemoved=counterList.pollLast();      this.counterMap.remove(toRemoved.item);    }  }}  }
class C{  @Override public void onPanelClosed(int featureId,Menu menu){switch (featureId) {case Window.FEATURE_OPTIONS_PANEL:    mFragments.dispatchOptionsMenuClosed(menu);  break;}super.onPanelClosed(featureId,menu);}  }
class C{  public ReverseAdapterFactoryContentProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private void checkFieldOrArrayAccess(ExpressionTree accessTree,Tree treeToReportErrorAt,Node expressionNode){  AnnotatedTypeMirror atmOfReceiver=atypeFactory.getReceiverType(accessTree);  if (treeToReportErrorAt != null && atmOfReceiver != null) {    AnnotationMirror gb=atmOfReceiver.getEffectiveAnnotationInHierarchy(atypeFactory.GUARDEDBYUNKNOWN);    if (gb == null) {      ErrorReporter.errorAbort("LockVisitor.checkFieldOrArrayAccess: gb cannot be null");    }    if (AnnotationUtils.areSameByClass(gb,checkerGuardedByClass)) {      Set<PreOrPostcondition> preconditions=generatePreconditionsBasedOnGuards(atmOfReceiver);      checkPreconditions(treeToReportErrorAt,expressionNode,preconditions);    } else     if (AnnotationUtils.areSameByClass(gb,checkerGuardSatisfiedClass)) {    } else {      checker.report(Result.failure("cannot.dereference",accessTree.toString(),AnnotationUtils.annotationSimpleName(gb)),accessTree);    }  }}  }
class C{  public static <T>boolean contains(T[] objectArray,T value){  return ArrayIterate.anySatisfyWith(objectArray,Predicates2.equal(),value);}  }
class C{  public void uncolorizeAll(final int level){  m_coloredRanges[level].clear();  repaint();}  }
class C{  Segment(long maxMemory,int stackMoveDistance,int len,int nonResidentQueueSize){  setMaxMemory(maxMemory);  this.stackMoveDistance=stackMoveDistance;  this.nonResidentQueueSize=nonResidentQueueSize;  mask=len - 1;  stack=new Entry<V>();  stack.stackPrev=stack.stackNext=stack;  queue=new Entry<V>();  queue.queuePrev=queue.queueNext=queue;  queue2=new Entry<V>();  queue2.queuePrev=queue2.queueNext=queue2;  @SuppressWarnings("unchecked") Entry<V>[] e=new Entry[len];  entries=e;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String key=getString(stack);  String store=getString(stack);  if (key == null || store == null || key.length() == 0 || store.length() == 0)   return null;  return Wizard.getInstance().addUserRecord(store,key);}  }
class C{  public GliderImage(String imageSource,Iterable<? extends LatLon> corners,double altitude){  this(imageSource,imageSource,corners,altitude);}  }
class C{  @Provides @Singleton SettingsDataSource provideSettingsDataSource(DaoSession session){  return new SettingsDataSource(session);}  }
class C{  public static void saveActiveUser(@NotNull String user){  Preferences prefs=getPrefs();  prefs.put(ACTIVE_USER,user);  flushPrefs(prefs);}  }
class C{  public void checkThrownMsgSent() throws InterruptedException {synchronized (this) {    this.wait(LnTurnout.METERINTERVAL + 25);  }  Assert.assertTrue("just two messages",lnis.outbound.size() == 2);  Assert.assertEquals(lnis.outbound.elementAt(lnis.outbound.size() - 2).toString(),"B0 14 10 00");  Assert.assertEquals(lnis.outbound.elementAt(lnis.outbound.size() - 1).toString(),"B0 14 00 00");  Assert.assertTrue(t.getCommandedState() == jmri.Turnout.THROWN);}  }
class C{  private boolean checkStrategyOptionsForDROnActive(Map<String,String> strategyOptions){  boolean changed=false;  for (  Site site : drUtil.listSites()) {    String dcId=drUtil.getCassandraDcId(site);    if (site.getState().equals(SiteState.STANDBY_PAUSED) && strategyOptions.containsKey(dcId)) {      _log.info("Remove dc {} from strategy options",dcId);      strategyOptions.remove(dcId);      changed=true;    }  }  return changed;}  }
class C{  public AuthenticationInfo loadSecurityProperties_keystoreWithAlias() throws ConfigurationException {  AuthenticationInfo authInfo=SecurityHelper.loadAuthenticationInformation("sample.security.multiple.aliases.properties");  if (authInfo == null) {    throw new ServerRuntimeException("Unable to locate security information; ensure security.properties file is configured");  }  return authInfo;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.PRIMITIVE_VALUE_EXPRESSION__VALUE:    setValue((Literal)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public Element store(Object o){  Element sections=new Element("sections");  setStoreElementClass(sections);  SectionManager tm=(SectionManager)o;  if (tm != null) {    java.util.Iterator<String> iter=tm.getSystemNameList().iterator();    if (!iter.hasNext()) {      return null;    }    while (iter.hasNext()) {      String sname=iter.next();      if (sname == null) {        log.error("System name null during store");      } else {        log.debug("Section system name is " + sname);        Section x=tm.getBySystemName(sname);        if (x.getSectionType() != Section.DYNAMICADHOC) {          Element elem=new Element("section").setAttribute("systemName",sname);          storeCommon(x,elem);          String txt="userdefined";          if (x.getSectionType() == Section.SIGNALMASTLOGIC) {            txt="signalmastlogic";          }          elem.setAttribute("creationtype",txt);          txt=x.getForwardStoppingSensorName();          if ((txt != null) && (!txt.equals(""))) {            elem.setAttribute("fstopsensorname",txt);          }          txt=x.getReverseStoppingSensorName();          if ((txt != null) && (!txt.equals(""))) {            elem.setAttribute("rstopsensorname",txt);          }          txt=x.getForwardBlockingSensorName();          if ((txt != null) && (!txt.equals(""))) {            elem.setAttribute("fsensorname",txt);          }          txt=x.getReverseBlockingSensorName();          if ((txt != null) && (!txt.equals(""))) {            elem.setAttribute("rsensorname",txt);          }          if (x.getSectionType() == Section.USERDEFINED) {            int index=0;            Block b=x.getBlockBySequenceNumber(index);            Element bElem=null;            while (b != null) {              bElem=new Element("blockentry");              bElem.setAttribute("sName",b.getSystemName());              bElem.setAttribute("order",Integer.toString(index));              elem.addContent(bElem);              index++;              b=x.getBlockBySequenceNumber(index);            }            List<EntryPoint> epList=x.getEntryPointList();            Element epElem=null;            EntryPoint ep=null;            for (int i=0; i < epList.size(); i++) {              ep=epList.get(i);              if (ep != null) {                epElem=new Element("entrypoint");                if (ep.getFromBlock() == null) {                  log.error("Unexpected null getFromBlock while storing ep " + i + " in Section "+ sname+ ", skipped");                  break;                }                epElem.setAttribute("fromblock",ep.getFromBlock().getSystemName());                if (ep.getBlock() == null) {                  log.error("Unexpected null getBlock while storing ep " + i + " in Section "+ sname+ ", skipped");                  break;                }                epElem.setAttribute("toblock",ep.getBlock().getSystemName());                epElem.setAttribute("direction",Integer.toString(ep.getDirection()));                epElem.setAttribute("fixed","" + (ep.isFixed() ? "yes" : "no"));                epElem.setAttribute("fromblockdirection","" + ep.getFromBlockDirection());                elem.addContent(epElem);              }            }          }          sections.addContent(elem);        }      }    }  }  return (sections);}  }
class C{  private int request(ImplDiscordAPI api,String channelId,String messageId,boolean before,int limit) throws Exception {  if (limit <= 0) {    return 0;  }  logger.debug("Requesting part of message history (channel id: {}, message id: {}, before: {}, limit: {}",channelId,messageId == null ? "none" : messageId,before,limit);  String link=messageId == null ? "https://discordapp.com/api/channels/" + channelId + "/messages?&limit="+ limit : "https://discordapp.com/api/channels/" + channelId + "/messages?&"+ (before ? "before" : "after")+ "="+ messageId+ "&limit="+ limit;  HttpResponse<JsonNode> response=Unirest.get(link).header("authorization",api.getToken()).asJson();  api.checkResponse(response);  api.checkRateLimit(response,RateLimitType.UNKNOWN,null);  JSONArray messages=response.getBody().getArray();  for (int i=0; i < messages.length(); i++) {    JSONObject messageJson=messages.getJSONObject(i);    String id=messageJson.getString("id");    Message message=api.getMessageById(id);    if (message == null) {      message=new ImplMessage(messageJson,api,null);    }    if (newestMessage == null || message.compareTo(newestMessage) > 0) {      newestMessage=message;    }    if (oldestMessage == null || message.compareTo(oldestMessage) < 0) {      oldestMessage=message;    }    this.messages.put(id,message);  }  return messages.length();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4mfPackage.INIT_MODULES__INIT_MODULES:    getInitModules().clear();  return;}super.eUnset(featureID);}  }
class C{  public static void main(String[] args){  doLoop(WaterWorld.class,args);  System.exit(0);}  }
class C{  private void init(Context context,TypedArray attributes,int pagePosition,OnSlidePageChangeListener pageListener){  if (!isInEditMode()) {    this.mPagePosition=pagePosition;    this.mUserPageListener=pageListener;    this.mAttributes=attributes;    LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);    mBinding=DataBindingUtil.inflate(inflater,R.layout.view_slide,this,true);    mAnimationSet=new AnimatorSet();    injectViews();    setListeners();    loadStyledAttributes(attributes);  }}  }
class C{  public com.wipro.ats.bdre.imcrawler.mr.Contents.Builder clearDomain(){  domain=null;  fieldSetFlags()[2]=false;  return this;}  }
class C{  public MTree(Properties ctx,int AD_Tree_ID,boolean editable,boolean clientTree,String trxName){  this(ctx,AD_Tree_ID,editable,clientTree,false,trxName);}  }
class C{  protected void removeListeners(Component c,int eventID){switch (eventID) {case EventID.ACTION:    try {      removeActionMethod=c.getClass().getMethod("removeActionListener",actionListeners);      try {        removeActionMethod.invoke(c,actionArgs);      } catch (      java.lang.reflect.InvocationTargetException e) {        System.out.println("Exception: " + e.toString());      }catch (      IllegalAccessException e) {        System.out.println("Exception: " + e.toString());      }    } catch (    NoSuchMethodException e) {    }catch (    SecurityException e) {      System.out.println("Exception: " + e.toString());    }  break;case EventID.ADJUSTMENT:if (c instanceof Adjustable) {  ((Adjustable)c).removeAdjustmentListener(this);}break;case EventID.COMPONENT:c.removeComponentListener(this);break;case EventID.ITEM:try {removeItemMethod=c.getClass().getMethod("removeItemListener",itemListeners);try {removeItemMethod.invoke(c,itemArgs);} catch (java.lang.reflect.InvocationTargetException e) {System.out.println("Exception: " + e.toString());}catch (IllegalAccessException e) {System.out.println("Exception: " + e.toString());}} catch (NoSuchMethodException e) {}catch (SecurityException e) {System.out.println("Exception: " + e.toString());}break;case EventID.KEY:c.removeKeyListener(this);break;case EventID.MOUSE:c.removeMouseListener(this);break;case EventID.MOTION:c.removeMouseMotionListener(this);break;case EventID.TEXT:try {removeTextMethod=c.getClass().getMethod("removeTextListener",textListeners);try {removeTextMethod.invoke(c,textArgs);} catch (java.lang.reflect.InvocationTargetException e) {System.out.println("Exception: " + e.toString());}catch (IllegalAccessException e) {System.out.println("Exception: " + e.toString());}} catch (NoSuchMethodException e) {}catch (SecurityException e) {System.out.println("Exception: " + e.toString());}break;case EventID.WINDOW:try {removeWindowMethod=c.getClass().getMethod("removeWindowListener",windowListeners);try {removeWindowMethod.invoke(c,windowArgs);} catch (java.lang.reflect.InvocationTargetException e) {System.out.println("Exception: " + e.toString());}catch (IllegalAccessException e) {System.out.println("Exception: " + e.toString());}} catch (NoSuchMethodException e) {}catch (SecurityException e) {System.out.println("Exception: " + e.toString());}break;default :return;}if (c instanceof Container) {int count=((Container)c).getComponentCount();for (int i=0; i < count; i++) {removeListeners(((Container)c).getComponent(i),eventID);}}}  }
class C{  public Boolean isNoRTSPStreaming(){  return noRTSPStreaming;}  }
class C{  public static void backgroundMusicStop(Context mContext){  mContext.stopService(new Intent(mContext,BackgroundMusicService.class));}  }
class C{  @Override public SparseVertex createVertex(){  return new SparseVertex();}  }
class C{  protected void writeToRowFromAggregateWithChangeRecord(AbstractRecord record,ChangeRecord changeRecord,ObjectChangeSet objectChangeSet,AbstractSession session,WriteType writeType) throws DescriptorException {  if (objectChangeSet == null) {    if (this.isNullAllowed) {      writeNullReferenceRow(record);    } else {      Object object=((ObjectChangeSet)changeRecord.getOwner()).getUnitOfWorkClone();      throw DescriptorException.nullForNonNullAggregate(object,this);    }  } else   if (!session.isClassReadOnly(objectChangeSet.getClassType(session))) {    getReferenceDescriptor(objectChangeSet.getClassType(session),session).getObjectBuilder().buildRowWithChangeSet(record,objectChangeSet,session,writeType);  }}  }
class C{  public static void toFile(File file,JpegSegmentData segmentData) throws IOException {  ObjectOutputStream outputStream=null;  try {    outputStream=new ObjectOutputStream(new FileOutputStream(file));    outputStream.writeObject(segmentData);  }  finally {    if (outputStream != null)     outputStream.close();  }}  }
class C{  protected void init(Table nodes,Table edges,boolean directed,String nodeKey,String sourceKey,String targetKey){  if ((nodeKey != null && !TypeLib.isIntegerType(nodes.getColumnType(nodeKey))) || !TypeLib.isIntegerType(edges.getColumnType(sourceKey)) || !TypeLib.isIntegerType(edges.getColumnType(targetKey))) {    throw new IllegalArgumentException("Incompatible column types for graph keys");  }  removeAllSets();  super.addSet(EDGES,edges);  super.addSet(NODES,nodes);  m_directed=directed;  m_nkey=nodeKey;  m_skey=sourceKey;  m_tkey=targetKey;  if (nodeKey != null) {    if (nodes.getColumnType(nodeKey) == long.class)     m_longKey=true;    nodes.index(nodeKey);    m_nidx=nodes.getIndex(nodeKey);  }  if (m_nodeTuples == null)   m_nodeTuples=new TupleManager(nodes,this,TableNode.class);  m_edgeTuples=new TupleManager(edges,this,TableEdge.class);  initLinkTable();  if (m_listener == null)   m_listener=new Listener();  nodes.addTableListener(m_listener);  edges.addTableListener(m_listener);  m_listener.setEdgeTable(edges);}  }
class C{  public int compareTo(Account account){  return getSequenceNumber() - account.getSequenceNumber();}  }
class C{  TextIndicator(final String text,final NotificationType type){  this.text=text;  this.type=type;}  }
class C{  private void addDataPoint(){  double newXValue;  if (!concatenate_data)   traceData.clear();  if (chronological) {    if (xAxisDateEnabled) {      if (updateMode != UpdateMode.TRIGGER)       newXValue=currentYDataTimestamp; else       newXValue=Calendar.getInstance().getTimeInMillis();    } else {      if (traceData.size() == 0)       newXValue=0; else       newXValue=traceData.getTail().getXValue() + 1;    }  } else {    newXValue=currentXData;  }  traceData.add(new Sample(newXValue,currentYData));  currentXDataChanged=false;  currentYDataChanged=false;  fireDataChange();}  }
class C{  public static <T>T create(Properties ctx,final String tableName,int id,Class<T> cl,String trxName){  if (id < 0)   return null;  Check.assumeNotNull(tableName,"tableName not null");  PO po=MTable.get(ctx,tableName).getPO(id,trxName);  if (po == null || po.get_ID() != id) {    return null;  }  return create(po,cl);}  }
class C{  protected AbstractIntegerAttr(final int val) throws BOSHException {  super(Integer.valueOf(val));}  }
class C{  public void write(File file,Object o) throws Exception {  toXML(o).write(file);}  }
class C{  public MissingFormatArgumentException(String s){  if (s == null)   throw new NullPointerException();  this.s=s;}  }
class C{  public Min(){  super(Number.class,Number.class,Number.class);}  }
class C{  protected void findBiconnectedComponents(UndirectedGraph<V,E> g,V v,Set<Set<V>> bicomponents){  int v_dfs_num=converse_depth;  dfs_num.put(v,v_dfs_num);  converse_depth--;  high.put(v,v_dfs_num);  for (  V w : g.getNeighbors(v)) {    int w_dfs_num=dfs_num.get(w).intValue();    E vw=g.findEdge(v,w);    if (w_dfs_num == 0) {      parents.put(w,v);      stack.push(vw);      findBiconnectedComponents(g,w,bicomponents);      int w_high=high.get(w).intValue();      if (w_high <= v_dfs_num) {        Set<V> bicomponent=new HashSet<V>();        E e;        do {          e=stack.pop();          bicomponent.addAll(g.getIncidentVertices(e));        } while (e != vw);        bicomponents.add(bicomponent);      }      high.put(v,Math.max(w_high,high.get(v).intValue()));    } else     if (w != parents.get(v))     high.put(v,Math.max(w_dfs_num,high.get(v).intValue()));  }}  }
class C{  public String seedTipText(){  return "The random number seed to be used.";}  }
class C{  public EdgeWeightMatrix(int size,EdgeWeightFormat format){  super();  this.size=size;  this.format=format;  matrix=new double[size][size];}  }
class C{  public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public DownloadQueue(int threadPoolSize){  mDispatchers=new DownloadDispatcher[threadPoolSize];}  }
class C{  public static void verifyCategoryForValue(Class<?> category,Attribute attribute){  if (!category.equals(attribute.getCategory())) {    throw new IllegalArgumentException();  }}  }
class C{  public JSONArray put(Map<String,Object> value){  this.put(new JSONObject(value));  return this;}  }
class C{  public CAbstractTagTreeNode(final Integer uniqueNodeId,final ZyGraph graph){  super(uniqueNodeId);  m_graph=Preconditions.checkNotNull(graph,"IE01795: Graph can not be null.");}  }
class C{  public Document(){}  }
class C{  public CConnectionDialog(CConnection cc){  super((Frame)null,true);  try {    jbInit();    setConnection(cc);  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  AdempierePLAF.showCenterScreen(this);}  }
class C{  public static synchronized void resetSingleton(){  singleton.beingUsed=false;  singleton.data=new ArrayList<Byte>();  singleton.counter=new AtomicInteger(0);  singleton.endReached=false;  System.setIn(defaultIn);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case MappingPackage.INFOMODEL_SOURCE__MODEL:    setModel((InformationModel)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public BigInteger optBigInteger(int index,BigInteger defaultValue){  try {    return this.getBigInteger(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  setContentView(R.layout.activity_proxy);  BrainPhaserApplication application=(BrainPhaserApplication)getApplication();  if (mUserManager.logInLastUser()) {    Intent intent=new Intent(getApplicationContext(),MainActivity.class);    intent.putExtra(MainActivity.EXTRA_SHOW_LOGGEDIN_SNACKBAR,true);    startActivity(intent);    finish();  } else {    if (mChallengeDataSource.getAll().size() == 0) {      InputStream is=getResources().openRawResource(R.raw.challenges);      try {        FileImport.importBPC(is,application);      } catch (      Exception e) {        throw new RuntimeException("An unexpected error has occured when trying to add " + "example challenges!");      }    }    startActivity(new Intent(Intent.ACTION_INSERT,Uri.EMPTY,getApplicationContext(),CreateUserActivity.class));    finish();  }}  }
class C{  @Override public ServiceManagerBuilderAmp journalDelay(long timeout){  _journalDelay=timeout;  return this;}  }
class C{  public Spinner(@NonNull final Context context){  super(context);  initialize(null);}  }
class C{  BenchInfo(Benchmark benchmark,String name,float weight,String[] args){  this.benchmark=benchmark;  this.name=name;  this.weight=weight;  this.args=args;  this.time=-1;}  }
class C{  static boolean renderImageWithOp(SunGraphics2D sg,BufferedImage img,BufferedImageOp biop,int x,int y){  if (biop instanceof ConvolveOp) {    if (!isConvolveOpValid((ConvolveOp)biop)) {      return false;    }  } else   if (biop instanceof RescaleOp) {    if (!isRescaleOpValid((RescaleOp)biop,img)) {      return false;    }  } else   if (biop instanceof LookupOp) {    if (!isLookupOpValid((LookupOp)biop,img)) {      return false;    }  } else {    return false;  }  SurfaceData dstData=sg.surfaceData;  if (!(dstData instanceof D3DSurfaceData) || (sg.interpolationType == AffineTransformOp.TYPE_BICUBIC) || (sg.compositeState > SunGraphics2D.COMP_ALPHA)) {    return false;  }  SurfaceData srcData=dstData.getSourceSurfaceData(img,sg.TRANSFORM_ISIDENT,CompositeType.SrcOver,null);  if (!(srcData instanceof D3DSurfaceData)) {    srcData=dstData.getSourceSurfaceData(img,sg.TRANSFORM_ISIDENT,CompositeType.SrcOver,null);    if (!(srcData instanceof D3DSurfaceData)) {      return false;    }  }  D3DSurfaceData d3dSrc=(D3DSurfaceData)srcData;  D3DGraphicsDevice gd=(D3DGraphicsDevice)d3dSrc.getDeviceConfiguration().getDevice();  if (d3dSrc.getType() != D3DSurfaceData.TEXTURE || !gd.isCapPresent(CAPS_LCD_SHADER)) {    return false;  }  int sw=img.getWidth();  int sh=img.getHeight();  D3DBlitLoops.IsoBlit(srcData,dstData,img,biop,sg.composite,sg.getCompClip(),sg.transform,sg.interpolationType,0,0,sw,sh,x,y,x + sw,y + sh,true);  return true;}  }
class C{  boolean inOpenRange(K key,K least,K fence){  if (key == null)   throw new NullPointerException();  return ((least == null || compare(key,least) >= 0) && (fence == null || compare(key,fence) <= 0));}  }
class C{  public QueryExecutionLowMemoryException(String msg){  super(msg);}  }
class C{  public double toImaginary(){  return _imag;}  }
class C{  public DualECSP800DRBG(DualECPoints[] pointSet,Digest digest,int securityStrength,EntropySource entropySource,byte[] personalizationString,byte[] nonce){  _digest=digest;  _entropySource=entropySource;  _securityStrength=securityStrength;  if (Utils.isTooLarge(personalizationString,MAX_PERSONALIZATION_STRING / 8)) {    throw new IllegalArgumentException("Personalization string too large");  }  if (entropySource.entropySize() < securityStrength || entropySource.entropySize() > MAX_ENTROPY_LENGTH) {    throw new IllegalArgumentException("EntropySource must provide between " + securityStrength + " and "+ MAX_ENTROPY_LENGTH+ " bits");  }  byte[] entropy=entropySource.getEntropy();  byte[] seedMaterial=Arrays.concatenate(entropy,nonce,personalizationString);  for (int i=0; i != pointSet.length; i++) {    if (securityStrength <= pointSet[i].getSecurityStrength()) {      if (Utils.getMaxSecurityStrength(digest) < pointSet[i].getSecurityStrength()) {        throw new IllegalArgumentException("Requested security strength is not supported by digest");      }      _seedlen=pointSet[i].getSeedLen();      _outlen=pointSet[i].getMaxOutlen() / 8;      _P=pointSet[i].getP();      _Q=pointSet[i].getQ();      break;    }  }  if (_P == null) {    throw new IllegalArgumentException("security strength cannot be greater than 256 bits");  }  _s=Utils.hash_df(_digest,seedMaterial,_seedlen);  _sLength=_s.length;  _reseedCounter=0;}  }
class C{  public static String formatPercent(double value){  if (Double.isNaN(value)) {    return "?";  }  String percentDigitsString=ParameterService.getParameterValue(RapidMiner.PROPERTY_RAPIDMINER_GENERAL_FRACTIONDIGITS_PERCENT);  int percentDigits=2;  try {    if (percentDigitsString != null) {      percentDigits=Integer.parseInt(percentDigitsString);    }  } catch (  NumberFormatException e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.tools.Tools.bad_integer_for_property");  }  PERCENT_FORMAT.setMaximumFractionDigits(percentDigits);  PERCENT_FORMAT.setMinimumFractionDigits(percentDigits);  return PERCENT_FORMAT.format(value);}  }
class C{  public static SECIdType newInstance(String value){  final SECIdType returnInstance=new SECIdType();  returnInstance.setValue(value);  return returnInstance;}  }
class C{  @Override public String toString(){  if (m_bGenerateNet) {    return toXMLBIF03();  }  return m_Instances.toString();}  }
class C{  public JulianDate(int julian){  this.julian=julian;}  }
class C{  public byte byteValue(){  return 0;}  }
class C{  public BitwiseAndExpression createBitwiseAndExpression(){  BitwiseAndExpressionImpl bitwiseAndExpression=new BitwiseAndExpressionImpl();  return bitwiseAndExpression;}  }
class C{  public OrientedPortrayal2D(SimplePortrayal2D child,Paint paint){  this(child,DEFAULT_OFFSET,DEFAULT_SCALE,paint);}  }
class C{  private NSObject parseObject() throws ParseException {switch (data[index]) {case ARRAY_BEGIN_TOKEN:{      return parseArray();    }case DICTIONARY_BEGIN_TOKEN:{    return parseDictionary();  }case DATA_BEGIN_TOKEN:{  return parseData();}case QUOTEDSTRING_BEGIN_TOKEN:{String quotedString=parseQuotedString();if (quotedString.length() == 20 && quotedString.charAt(4) == DATE_DATE_FIELD_DELIMITER) {  try {    return new NSDate(quotedString);  } catch (  Exception ex) {    return new NSString(quotedString);  }} else {  return new NSString(quotedString);}}default :{if (data[index] > 0x2F && data[index] < 0x3A) {return parseDateString();} else {String parsedString=parseString();return new NSString(parsedString);}}}}  }
class C{  protected String doIt() throws Exception {  StringBuffer sql=null;  int no=0;  String clientCheck=" AND AD_Client_ID=" + m_AD_Client_ID;  int m_discountschema_id=DB.getSQLValue(get_TrxName(),"SELECT MIN(M_DiscountSchema_ID) FROM M_DiscountSchema WHERE DiscountType='P' AND IsActive='Y' AND AD_Client_ID=?",m_AD_Client_ID);  if (m_discountschema_id <= 0)   throw new AdempiereUserError("Price List Schema not configured");  if (m_deleteOldImported) {    sql=new StringBuffer("DELETE I_PriceList " + "WHERE I_IsImported='Y'").append(clientCheck);    no=DB.executeUpdate(sql.toString(),get_TrxName());    log.info("Delete Old Impored =" + no);  }  sql=new StringBuffer("UPDATE I_PriceList " + "SET AD_Client_ID = COALESCE (AD_Client_ID, ").append(m_AD_Client_ID).append(")," + " AD_Org_ID = COALESCE (AD_Org_ID, 0)," + " IsActive = COALESCE (IsActive, 'Y'),"+ " Created = COALESCE (Created, SysDate),"+ " CreatedBy = COALESCE (CreatedBy, 0),"+ " Updated = COALESCE (Updated, SysDate),"+ " UpdatedBy = COALESCE (UpdatedBy, 0),"+ " EnforcePriceLimit = COALESCE (EnforcePriceLimit, 'N'),"+ " IsSOPriceList = COALESCE (IsSOPriceList, 'N'),"+ " IsTaxIncluded = COALESCE (IsTaxIncluded, 'N'),"+ " PricePrecision = COALESCE (PricePrecision, 2),"+ " I_ErrorMsg = ' ',"+ " I_IsImported = 'N' "+ "WHERE I_IsImported<>'Y' OR I_IsImported IS NULL");  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Reset=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET C_BPartner_ID=(SELECT C_BPartner_ID FROM C_BPartner p" + " WHERE I_PriceList.BPartner_Value=p.Value AND I_PriceList.AD_Client_ID=p.AD_Client_ID) "+ "WHERE C_BPartner_ID IS NULL AND BPartner_Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("BPartner=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid BPartner,' " + "WHERE C_BPartner_ID IS NULL AND BPartner_Value IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid BPartner=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET M_Product_ID=(SELECT MAX(M_Product_ID) FROM M_Product p" + " WHERE I_PriceList.ProductValue=p.Value AND I_PriceList.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_Product_ID IS NULL AND ProductValue IS NOT NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Product from Value=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Invalid Product, ' " + "WHERE M_Product_ID IS NULL AND (ProductValue IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Product=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET M_PriceList_ID=(SELECT M_PriceList_ID FROM M_PriceList p" + " WHERE I_PriceList.Name=p.Name AND I_PriceList.AD_Client_ID=p.AD_Client_ID) "+ "WHERE M_PriceList_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Price List Existing Value=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET M_PriceList_Version_ID=(SELECT M_PriceList_Version_ID FROM M_PriceList_Version p" + " WHERE I_PriceList.ValidFrom=p.ValidFrom AND I_PriceList.M_PriceList_ID=p.M_PriceList_ID) "+ "WHERE M_PriceList_ID IS NOT NULL AND M_PriceList_Version_ID IS NULL"+ " AND I_IsImported='N'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("Price List Version Existing Value=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET ISO_Code=(SELECT ISO_Code FROM C_Currency c" + " INNER JOIN C_AcctSchema a ON (a.C_Currency_ID=c.C_Currency_ID)"+ " INNER JOIN AD_ClientInfo ci ON (a.C_AcctSchema_ID=ci.C_AcctSchema1_ID)"+ " WHERE ci.AD_Client_ID=I_PriceList.AD_Client_ID) "+ "WHERE C_Currency_ID IS NULL AND ISO_Code IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.fine("Set Currency Default=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET C_Currency_ID=(SELECT C_Currency_ID FROM C_Currency c" + " WHERE I_PriceList.ISO_Code=c.ISO_Code AND c.AD_Client_ID IN (0,I_PriceList.AD_Client_ID)) "+ "WHERE C_Currency_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  log.info("doIt- Set Currency=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Currency,' " + "WHERE C_Currency_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("Invalid Currency=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Mandatory Name or PriceListID,' " + "WHERE Name IS NULL AND M_PriceList_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory Name=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=Mandatory ValidFrom or PriceListVersionID,' " + "WHERE ValidFrom IS NULL AND M_PriceList_Version_ID IS NULL"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory ValidFrom=" + no);  sql=new StringBuffer("UPDATE I_PriceList " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||'ERR=No Mandatory BreakValue,' " + "WHERE BreakValue IS NULL AND (C_BPartner_ID IS NOT NULL OR BPartner_Value IS NOT NULL)"+ " AND I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  if (no != 0)   log.warning("No Mandatory BreakValue=" + no);  commitEx();  int noInsertpp=0;  int noUpdatepp=0;  int noInsertppvb=0;  int noUpdateppvb=0;  int noInsertpl=0;  int noInsertplv=0;  log.fine("start inserting/updating ...");  sql=new StringBuffer("SELECT * FROM I_PriceList WHERE I_IsImported='N'").append(clientCheck);  PreparedStatement pstmt_setImported=null;  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt_setImported=DB.prepareStatement("UPDATE I_PriceList SET I_IsImported='Y', M_PriceList_ID=?, M_PriceList_Version_ID=?, " + "Updated=SysDate, Processed='Y' WHERE I_PriceList_ID=?",get_TrxName());    pstmt=DB.prepareStatement(sql.toString(),get_TrxName());    rs=pstmt.executeQuery();    while (rs.next()) {      X_I_PriceList imp=new X_I_PriceList(getCtx(),rs,get_TrxName());      int I_PriceList_ID=imp.getI_PriceList_ID();      int M_PriceList_ID=imp.getM_PriceList_ID();      if (M_PriceList_ID == 0) {        M_PriceList_ID=DB.getSQLValue(get_TrxName(),"SELECT M_PriceList_ID FROM M_PriceList WHERE IsActive='Y' AND AD_Client_ID=? AND Name=?",m_AD_Client_ID,imp.getName());        if (M_PriceList_ID < 0)         M_PriceList_ID=0;      }      boolean newPriceList=M_PriceList_ID == 0;      log.fine("I_PriceList_ID=" + I_PriceList_ID + ", M_PriceList_ID="+ M_PriceList_ID);      MPriceList pricelist=null;      if (newPriceList) {        pricelist=new MPriceList(imp);        if (pricelist.save()) {          M_PriceList_ID=pricelist.getM_PriceList_ID();          log.finer("Insert Price List");          noInsertpl++;        } else {          StringBuffer sql0=new StringBuffer("UPDATE I_PriceList i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert Price List failed")).append("WHERE I_PriceList_ID=").append(I_PriceList_ID);          DB.executeUpdate(sql0.toString(),get_TrxName());          continue;        }      } else {        pricelist=new MPriceList(getCtx(),M_PriceList_ID,get_TrxName());      }      int M_PriceList_Version_ID=imp.getM_PriceList_Version_ID();      if (M_PriceList_Version_ID == 0) {        M_PriceList_Version_ID=DB.getSQLValue(get_TrxName(),"SELECT M_PriceList_Version_ID FROM M_PriceList_Version WHERE IsActive='Y' AND ValidFrom=? AND M_PriceList_ID=?",new Object[]{imp.getValidFrom(),M_PriceList_ID});        if (M_PriceList_Version_ID < 0)         M_PriceList_Version_ID=0;      }      boolean newPriceListVersion=M_PriceList_Version_ID == 0;      log.fine("I_PriceList_ID=" + I_PriceList_ID + ", M_PriceList_Version_ID="+ M_PriceList_Version_ID);      MPriceListVersion pricelistversion=null;      if (newPriceListVersion) {        pricelistversion=new MPriceListVersion(pricelist);        pricelistversion.setValidFrom(imp.getValidFrom());        pricelistversion.setName(pricelist.getName() + " " + imp.getValidFrom());        pricelistversion.setM_DiscountSchema_ID(m_discountschema_id);        if (pricelistversion.save()) {          M_PriceList_Version_ID=pricelistversion.getM_PriceList_Version_ID();          log.finer("Insert Price List Version");          noInsertplv++;        } else {          StringBuffer sql0=new StringBuffer("UPDATE I_PriceList i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert Price List Version failed")).append("WHERE I_PriceList_ID=").append(I_PriceList_ID);          DB.executeUpdate(sql0.toString(),get_TrxName());          continue;        }      } else {        pricelistversion=new MPriceListVersion(getCtx(),M_PriceList_Version_ID,get_TrxName());      }      if (imp.getC_BPartner_ID() > 0) {        int M_ProductPriceVendorBreak_ID=DB.getSQLValue(get_TrxName(),"SELECT M_ProductPriceVendorBreak_ID " + "FROM M_ProductPriceVendorBreak " + "WHERE M_PriceList_Version_ID=? AND "+ "IsActive='Y' AND "+ "C_BPartner_ID=? AND "+ "M_Product_ID=? AND "+ "BreakValue=?",new Object[]{pricelistversion.getM_PriceList_Version_ID(),imp.getC_BPartner_ID(),imp.getM_Product_ID(),imp.getBreakValue()});        if (M_ProductPriceVendorBreak_ID < 0)         M_ProductPriceVendorBreak_ID=0;        X_M_ProductPriceVendorBreak ppvb=new X_M_ProductPriceVendorBreak(getCtx(),M_ProductPriceVendorBreak_ID,get_TrxName());        boolean isInsert=false;        if (M_ProductPriceVendorBreak_ID == 0) {          ppvb.setM_PriceList_Version_ID(pricelistversion.getM_PriceList_Version_ID());          ppvb.setC_BPartner_ID(imp.getC_BPartner_ID());          ppvb.setM_Product_ID(imp.getM_Product_ID());          ppvb.setBreakValue(imp.getBreakValue());          isInsert=true;        }        if (p_importPriceLimit)         ppvb.setPriceLimit(imp.getPriceLimit());        if (p_importPriceList)         ppvb.setPriceList(imp.getPriceList());        if (p_importPriceStd)         ppvb.setPriceStd(imp.getPriceStd());        if (ppvb.save()) {          if (isInsert)           noInsertppvb++; else           noUpdateppvb++;          log.finer("Insert/Update Product Price Vendor Break");        } else {          StringBuffer sql0=new StringBuffer("UPDATE I_PriceList i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert/Update Product Price Vendor Break Version failed")).append("WHERE I_PriceList_ID=").append(I_PriceList_ID);          DB.executeUpdate(sql0.toString(),get_TrxName());          continue;        }      } else {        MProductPrice pp=MProductPrice.get(getCtx(),pricelistversion.getM_PriceList_Version_ID(),imp.getM_Product_ID(),get_TrxName());        boolean isInsert=false;        if (pp != null) {          if (p_importPriceLimit)           pp.setPriceLimit(imp.getPriceLimit());          if (p_importPriceList)           pp.setPriceList(imp.getPriceList());          if (p_importPriceStd)           pp.setPriceStd(imp.getPriceStd());        } else {          pp=new MProductPrice(pricelistversion,imp.getM_Product_ID(),p_importPriceList ? imp.getPriceList() : Env.ZERO,p_importPriceStd ? imp.getPriceStd() : Env.ZERO,p_importPriceLimit ? imp.getPriceLimit() : Env.ZERO);          isInsert=true;        }        if (pp.save()) {          log.finer("Insert/Update Product Price");          if (isInsert)           noInsertpp++; else           noUpdatepp++;        } else {          StringBuffer sql0=new StringBuffer("UPDATE I_PriceList i " + "SET I_IsImported='E', I_ErrorMsg=I_ErrorMsg||").append(DB.TO_STRING("Insert/Update Product Price failed")).append("WHERE I_PriceList_ID=").append(I_PriceList_ID);          DB.executeUpdate(sql0.toString(),get_TrxName());          continue;        }      }      pstmt_setImported.setInt(1,M_PriceList_ID);      pstmt_setImported.setInt(2,M_PriceList_Version_ID);      pstmt_setImported.setInt(3,I_PriceList_ID);      no=pstmt_setImported.executeUpdate();      commitEx();    }  }  finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;    DB.close(pstmt_setImported);    pstmt_setImported=null;  }  sql=new StringBuffer("UPDATE I_PriceList " + "SET I_IsImported='N', Updated=SysDate " + "WHERE I_IsImported<>'Y'").append(clientCheck);  no=DB.executeUpdate(sql.toString(),get_TrxName());  addLog(0,null,new BigDecimal(no),"@Errors@");  addLog(0,null,new BigDecimal(noInsertpl),"@M_PriceList_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noInsertplv),"@M_PriceList_Version_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noInsertpp),"Product Price: @Inserted@");  addLog(0,null,new BigDecimal(noUpdatepp),"Product Price: @Updated@");  addLog(0,null,new BigDecimal(noInsertppvb),"@M_ProductPriceVendorBreak_ID@: @Inserted@");  addLog(0,null,new BigDecimal(noUpdateppvb),"@M_ProductPriceVendorBreak_ID@: @Updated@");  return "";}  }
class C{  public void close() throws IOException {  if (server != null) {    OutputStream os=getOutputStream();    this.os=null;    MuxServer server=this.server;    this.server=null;    server.close(channel);  }}  }
class C{  private void _run_on_ui_thread(Runnable r){  Activity activity=getActivity();  if (activity != null) {    activity.runOnUiThread(r);  }}  }
class C{  @Override public void discover(AccessProfile accessProfile) throws BaseCollectionException {  if ((null != accessProfile.getnamespace()) && (accessProfile.getnamespace().equals(StorageSystem.Discovery_Namespaces.UNMANAGED_VOLUMES.toString()))) {    discoverUnManagedVolumes(accessProfile);  } else {    _logger.info("Discovery started for system {}",accessProfile.getSystemId());    List<StoragePool> newPools=new ArrayList<StoragePool>();    List<StoragePool> updatePools=new ArrayList<StoragePool>();    List<StoragePool> allPools=new ArrayList<StoragePool>();    String token="";    StorageSystem system=null;    StorageProvider provider=null;    String detailedStatusMessage="Unknown Status";    try {      String hostName=null;      String restuserName=null;      String restPassword=null;      String restBaseUri=null;      String tenantName=null;      String oldToken=null;      String tenantId=null;      system=_dbClient.queryObject(StorageSystem.class,accessProfile.getSystemId());      system.setReachableStatus(true);      addPorts(system);      URI providerUri=system.getActiveProviderURI();      provider=_dbClient.queryObject(StorageProvider.class,providerUri);      if (null != provider.getKeys()) {        StringMap providerKeys=provider.getKeys();        oldToken=providerKeys.get(CinderConstants.KEY_CINDER_REST_TOKEN);        hostName=providerKeys.get(CinderConstants.KEY_CINDER_HOST_NAME);        restuserName=providerKeys.get(CinderConstants.KEY_CINDER_REST_USER);        restPassword=providerKeys.get(CinderConstants.KEY_CINDER_REST_PASSWORD);        restBaseUri=providerKeys.get(CinderConstants.KEY_CINDER_REST_URI_BASE);        tenantName=providerKeys.get(CinderConstants.KEY_CINDER_TENANT_NAME);        tenantId=providerKeys.get(CinderConstants.KEY_CINDER_TENANT_ID);      }      if (null == endPointInfo) {        endPointInfo=new CinderEndPointInfo(hostName,restuserName,restPassword,tenantName);        if (restBaseUri.startsWith(CinderConstants.HTTP_URL)) {          endPointInfo.setCinderBaseUriHttp(restBaseUri);        } else {          endPointInfo.setCinderBaseUriHttps(restBaseUri);        }        endPointInfo.setCinderToken(oldToken);        endPointInfo.setCinderTenantId(tenantId);      }      CinderApi api=_cinderApiFactory.getApi(providerUri,endPointInfo);      _logger.debug("discover : Got the cinder api factory for provider with id: {}",providerUri);      if (null == oldToken || (isTokenExpired(oldToken))) {        token=api.getAuthToken(restBaseUri + "/tokens");        if (null != token) {          _logger.debug("Got new token : {}",token);          provider.addKey(CinderConstants.KEY_CINDER_REST_TOKEN,token);          provider.addKey(CinderConstants.KEY_CINDER_TENANT_ID,endPointInfo.getCinderTenantId());        }      } else {        token=oldToken;        _logger.debug("Using the old token : {}",token);      }      if (token.length() > 1) {        VolumeTypes types=api.getVolumeTypes();        if (types != null) {          _logger.info("Got {} Volume Type(s)",types.volume_types.length);          boolean isDefaultStoragePoolCreated=false;          for (int i=0; i < types.volume_types.length; i++) {            boolean isNew=false;            String poolName=types.volume_types[i].name;            String nativeGuid=types.volume_types[i].id;            _logger.info("Storage Pool name = {}, id = {}",poolName,nativeGuid);            Map<String,String> extra_specs=types.volume_types[i].extra_specs;            String system_title=extra_specs.get(VOLUME_BACKEND_NAME);            boolean isThickPool=Boolean.parseBoolean(extra_specs.get(VIPR_THICK_POOL));            if (system_title == null) {              system_title=CinderConstants.DEFAULT;            }            if (system.getNativeGuid().toUpperCase().contains(system_title.toUpperCase())) {              if (system.getNativeGuid().toUpperCase().startsWith(CinderConstants.DEFAULT)) {                isDefaultStoragePoolCreated=true;              }              _logger.info("Found association between system {} and pool {}",system_title,poolName);              StoragePool pool=checkPoolExistsInDB(nativeGuid);              if (null == pool) {                isNew=true;                pool=createPoolforStorageSystem(system,nativeGuid,poolName,isThickPool);                newPools.add(pool);              }              pool.setPoolName(poolName);              pool.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());              pool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());              if (!isNew) {                updatePools.add(pool);              }            } else {              _logger.info("Pool {} doesn't belong to storage system {}",poolName,system.getLabel());            }          }          if (system.getNativeGuid().toUpperCase().startsWith(CinderConstants.DEFAULT) && !isDefaultStoragePoolCreated) {            _logger.debug("Creating defual pool for default storage system");            String nativeGuid="DefaultPool";            StoragePool pool=checkPoolExistsInDB(nativeGuid);            String poolName="DefaultPool";            if (null != pool) {              updatePools.add(pool);            } else {              pool=createPoolforStorageSystem(system,nativeGuid,poolName,false);              newPools.add(pool);            }            pool.setPoolName(poolName);            pool.setCompatibilityStatus(CompatibilityStatus.COMPATIBLE.name());            pool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());          }          StoragePoolAssociationHelper.setStoragePoolVarrays(system.getId(),newPools,_dbClient);          allPools.addAll(newPools);          allPools.addAll(updatePools);          StringBuffer errorMessage=new StringBuffer();          ImplicitPoolMatcher.matchModifiedStoragePoolsWithAllVpool(allPools,_dbClient,_coordinator,accessProfile.getSystemId(),errorMessage);          _logger.info("New pools size: {}",newPools.size());          _logger.info("updatePools size: {}",updatePools.size());          DiscoveryUtils.checkStoragePoolsNotVisible(allPools,_dbClient,system.getId());          _dbClient.createObject(newPools);          _dbClient.persistObject(updatePools);          detailedStatusMessage=String.format("Discovery completed successfully for OpenStack: %s",accessProfile.getSystemId());        } else {          _logger.error("Error in getting volume types from cinder");        }      } else {        _logger.error("Error in getting token from keystone");      }    } catch (    Exception e) {      if (null != system) {        cleanupDiscovery(system);      }      detailedStatusMessage=String.format("Discovery failed for Storage System: %s because %s",system.toString(),e.getLocalizedMessage());      _logger.error(detailedStatusMessage,e);      throw new CinderColletionException(false,ServiceCode.DISCOVERY_ERROR,null,detailedStatusMessage,null,null);    } finally {      try {        if (system != null) {          system.setLastDiscoveryStatusMessage(detailedStatusMessage);          _dbClient.persistObject(system);        }        if (null != provider) {          _dbClient.persistObject(provider);        }      } catch (      DatabaseException e) {        _logger.error("Failed to persist cinder storage system to Database, Reason: {}",e.getMessage(),e);      }    }    _logger.info("Discovery Ended for system {}",accessProfile.getSystemId());  }}  }
class C{  public KleinbergSmallWorldGenerator(Supplier<? extends Graph<V,E>> graphFactory,Supplier<V> vertexFactory,Supplier<E> edgeFactory,int row_count,int col_count,double clusteringExponent,boolean isToroidal){  super(graphFactory,vertexFactory,edgeFactory,row_count,col_count,isToroidal);  clustering_exponent=clusteringExponent;  initialize();}  }
class C{  private void onWifiP2pDiscoveryChanged(Context context,Intent intent){  int discoveryStateCode=intent.getIntExtra(WifiP2pManager.EXTRA_DISCOVERY_STATE,-1);  if (discoveryStateCode == WifiP2pManager.WIFI_P2P_DISCOVERY_STARTED) {    Log.d(TAG,"Device is seeking Wifi Direct peers.");    setSeeking(true);  } else   if (discoveryStateCode == WifiP2pManager.WIFI_P2P_DISCOVERY_STOPPED) {    Log.d(TAG,"Device is NOT seeking Wifi Direct peers.");    setSeeking(false);  } else {    Log.wtf(TAG,"Discovery changed event didn't have an EXTRA_DISCOVERY_STATE?!");  }}  }
class C{  private void append(String text){  FacesContext context=FacesContext.getCurrentInstance();  String message=(String)context.getExternalContext().getRequestMap().get("message");  if (message == null) {    message="";  }  message+="<li>" + text + "</li>";  context.getExternalContext().getRequestMap().put("message",message);}  }
class C{  private void drawCircle(Canvas canvas,Paint paint,float x,float y,float radius){  canvas.drawCircle(x,y,radius,paint);}  }
class C{  protected void sendMail(Mail mail) throws MessagingException {  getMailQueue().enQueue(mail);  if (!isLeave())   setMessageDeleted();  if (isMarkSeen())   setMessageSeen();  StringBuilder messageBuffer=new StringBuilder("Spooled message to recipients: ");  for (  MailAddress address : mail.getRecipients()) {    messageBuffer.append(address);    messageBuffer.append(' ');  }  messageBuffer.append('.');  logStatusInfo(messageBuffer.toString());}  }
class C{  public static byte readByte(InputStream sckInputStream) throws IOException {  int _byte=sckInputStream.read();  if (_byte == -1) {    MeshLog.i(DEBUG,USE_LOG4J,CLASS,"readByte() -1, throw IOException");    throw new IOException();  }  return (byte)_byte;}  }
class C{  @Override public void updateScreen(){  tokenBox.updateCursorCounter();}  }
class C{  public boolean isComposing(){  return composing;}  }
class C{  private URL makeUrl(URL url,String spreadsheetKey,String parentResourceId,String visibility,String projection) throws MalformedURLException {  if (spreadsheetKey == null) {    throw new NullPointerException("spreadsheetKey is null");  }  if (parentResourceId == null) {    throw new NullPointerException("worksheetId is null");  }  String path=encode(spreadsheetKey) + "/" + encode(parentResourceId);  return makeUrl(url,path,visibility,projection);}  }
class C{  public JsonObjectRequest(int method,String url,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,listener,errorListener);}  }
class C{  public static SumProjectionExpression sumDistinct(String propertyName){  return new SumProjectionExpression(getPropExpr(propertyName),true);}  }
class C{  public void usingNegate(){  BiPredicate<Employee,Manager> notAManagerPredicate=empManagerPredicate.negate();}  }
class C{  public GroupChatMessageDeleteTask(ChatServiceImpl chatService,InstantMessagingService imService,LocalContentResolver contentResolver,String chatId,String messageId){  super(contentResolver,MessageData.CONTENT_URI,MessageData.KEY_MESSAGE_ID,MessageData.KEY_CHAT_ID,null,messageId);  mChatService=chatService;  mImService=imService;}  }
class C{  public static Distribution guessSigma(DataSet d){  return RBFKernel.guessSigma(d);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public void updateNavigationDrawerStyleHandler(NavigationDrawerStyleHandler navigationDrawerStyleHandler){  if (navigationDrawerStyleHandler != null) {    int backgroundResource=navigationDrawerStyleHandler.getBackgroundResource();    if (backgroundResource != 0)     mDrawerLeft.setBackgroundResource(backgroundResource); else     mDrawerLeft.setBackgroundColor(Color.WHITE);  }}  }
class C{  public static void writeByteArrayToFile(File file,byte[] data) throws IOException {  OutputStream out=null;  try {    out=openOutputStream(file);    out.write(data);  }  finally {    ParseIOUtils.closeQuietly(out);  }}  }
class C{  public void onNewIntent(Intent intent){}  }
class C{  public static Days daysBetween(ReadableInstant start,ReadableInstant end){  int amount=BaseSingleFieldPeriod.between(start,end,DurationFieldType.days());  return Days.days(amount);}  }
class C{  public JSONArray names(){  JSONArray ja=new JSONArray();  Iterator<String> keys=this.keys();  while (keys.hasNext()) {    ja.put(keys.next());  }  return ja.length() == 0 ? null : ja;}  }
class C{  public void paint(Graphics g){  if (dynamic || testImage == null || getWidth() != testW || getHeight() != testH) {    runTest(g);  }  if (testImage != null) {    g.drawImage(testImage,0,0,this);  }}  }
class C{  @After public void tearDown() throws Exception {  deleteData();  if (tWSBrokerModel.isConnected())   tWSBrokerModel.onDisconnect();  if (((Math.floor(testCaseGrandTotal / 58d) == (testCaseGrandTotal / 58d)) && (testCaseGrandTotal > 0)) && tWSBrokerModel.isConnected()) {    timerRunning=new AtomicInteger(0);    timer.start();synchronized (lockCoreUtilsTest) {      while (timerRunning.get() / 1000 < 601) {        if ((timerRunning.get() % 60000) == 0) {          String message="Please wait " + (10 - (timerRunning.get() / 1000 / 60)) + " minutes as there are more than 60 data requests.";          _log.warn(message);        }        lockCoreUtilsTest.wait();      }    }    timer.stop();  }}  }
class C{  public double compute(double... dataset){  return computeInPlace(dataset.clone());}  }
class C{  default B generation(final int generation){  this.meta().setGeneration(generation);  return this.getBuilder();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static void main(String args[]) throws IOException {  ImageViewerPerfTest test=new ImageViewerPerfTest(args);  File inFile=test.getInputURL(args);  String ext=test.getEncodingExt(args);  File outDir=test.getOuputDir(args);  boolean recursive=test.isRecursive(args);  serverObjects post=test.makePostParams(args);  outDir.mkdirs();  File[] inFiles;  if (inFile.isFile()) {    inFiles=new File[1];    inFiles[0]=inFile;    System.out.println("Measuring  render with file : " + inFile.getAbsolutePath() + " encoded To : "+ ext);  } else   if (inFile.isDirectory()) {    inFiles=inFile.listFiles();    System.out.println("Measuring  render with files in folder : " + inFile.getAbsolutePath() + " encoded To : "+ ext);  } else {    inFiles=new File[0];  }  if (inFiles.length == 0) {    throw new IllegalArgumentException(inFile.getAbsolutePath() + " is not a valid file or folder url.");  }  System.out.println("Rendered images will be written in dir : " + outDir.getAbsolutePath());  List<File> processedFiles=new ArrayList<File>();  Map<String,Throwable> failures=new TreeMap<>();  try {    long time=System.nanoTime();    test.processFiles(ext,recursive,outDir,post,inFiles,processedFiles,failures);    time=System.nanoTime() - time;    test.displayResults(processedFiles,failures,time,outDir);  }  finally {    ConcurrentLog.shutdown();  }}  }
class C{  @Override public void onPurchaseResponse(final PurchaseResponse purchaseResponse){  Log.v(TAG,"onPurchaseResponse recieved");  Log.v(TAG,"PurchaseRequestStatus:" + purchaseResponse.getPurchaseRequestStatus());  new PurchaseAsyncTask().execute(purchaseResponse);}  }
class C{  public float loadFloat(){  return 0;}  }
class C{  public static String cutFromIndexOf(String string,char c){  int i=string.indexOf(c);  if (i != -1) {    string=string.substring(i);  }  return string;}  }
class C{  public String orderTipText(){  return "The order of the Minkowski distance ('1' is Manhattan distance and " + "'2' the Euclidean distance).";}  }
class C{  void moveToPrimary(){  ensureNotFrozen();  version++;  if (primary) {    throw new IllegalShardRoutingStateException(this,"Already primary, can't move to primary");  }  primary=true;}  }
class C{  public static <T>T[] newArray(T[] reference,int length){  Class<?> type=reference.getClass().getComponentType();  return (T[])Array.newInstance(type,length);}  }
class C{  public void dateTest(boolean useLegacy) throws SQLException {  Assume.assumeFalse(sharedIsRewrite());  Connection connection=null;  try {    connection=setConnection("&useLegacyDatetimeCode=" + useLegacy + "&serverTimezone=+5:00&maximizeMysqlCompatibility=false&useServerPrepStmts=true");    setSessionTimeZone(connection,"+5:00");    createTable("date_test","id int not null primary key auto_increment, d_test date,dt_test datetime, " + "t_test time");    Statement stmt=connection.createStatement();    Date date=Date.valueOf("2009-01-17");    Timestamp timestamp=Timestamp.valueOf("2009-01-17 15:41:01");    Time time=Time.valueOf("23:59:59");    PreparedStatement ps=connection.prepareStatement("insert into date_test (d_test, dt_test, t_test) " + "values (?,?,?)");    ps.setDate(1,date);    ps.setTimestamp(2,timestamp);    ps.setTime(3,time);    ps.executeUpdate();    ResultSet rs=stmt.executeQuery("select d_test, dt_test, t_test from date_test");    assertEquals(true,rs.next());    Date date2=rs.getDate(1);    Date date3=rs.getDate("d_test");    Time time2=rs.getTime(3);    assertEquals(date.toString(),date2.toString());    assertEquals(date.toString(),date3.toString());    assertEquals(time.toString(),time2.toString());    Time time3=rs.getTime("t_test");    assertEquals(time.toString(),time3.toString());    Timestamp timestamp2=rs.getTimestamp(2);    assertEquals(timestamp.toString(),timestamp2.toString());    Timestamp timestamp3=rs.getTimestamp("dt_test");    assertEquals(timestamp.toString(),timestamp3.toString());  }  finally {    connection.close();  }}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public final void remove(){  throw new UnsupportedOperationException();}  }
class C{  @Override public void doGet(HttpServletRequest request,HttpServletResponse response) throws IOException, ServletException {  response.setContentType("text/html");  PrintWriter writer=response.getWriter();  writer.println("<html>");  writer.println("<head>");  writer.println("<title>Sample Application Servlet Page</title>");  writer.println("</head>");  writer.println("<body bgcolor=white>");  writer.println("<table border=\"0\">");  writer.println("<tr>");  writer.println("<td>");  writer.println("<img src=\"images/tomcat.gif\">");  writer.println("</td>");  writer.println("<td>");  writer.println("<h1>Sample Application Servlet</h1>");  writer.println("This is the output of a servlet that is part of");  writer.println("the Hello, World application.");  writer.println("</td>");  writer.println("</tr>");  writer.println("</table>");  writer.println("</body>");  writer.println("</html>");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.274 -0400",hash_original_method="E93907B75ED7A65211A3C3477C909B28",hash_generated_method="66CEAFC8E05C8AAC050CE9D359E72F60") public ConcurrentSkipListMap(Comparator<? super K> comparator){  this.comparator=comparator;  initialize();}  }
class C{  final void updateRouteAndMouseShadowUnits(final Route route){  routeCached=route;  getMap().setRoute(route,mouseSelectedPoint,mouseCurrentPoint,currentCursorImage);  if (route == null) {    getMap().setMouseShadowUnits(null);  } else {    getMap().setMouseShadowUnits(unitsThatCanMoveOnRoute);  }}  }
class C{  @Override public void removeAll(){  getPopupMenu().removeAll();}  }
class C{  public void debugFiner(CharSequence message,Throwable e){  log(Level.FINER,message,e);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild5.class,args);}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  protected WindowSupport createWindowSupport(){  return new ScrollPaneWindowSupport(getGUI(),getName());}  }
class C{  public static void main(String[] args){  MarkdownTextPane pane=new MarkdownTextPane();  pane.setText("# Markdown test\n\n* item 1\n* item 2\n\n## Other stuff\n*italic* __bold__");  JFrame frame=new JFrame("Markdown test");  frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(pane,BorderLayout.CENTER);  frame.setSize(600,400);  frame.setLocationRelativeTo(null);  frame.setVisible(true);}  }
class C{  public TColor(ReadonlyTColor c){  this();  float[] buffer=c.toCMYKAArray(null);  cmyk[0]=buffer[0];  cmyk[1]=buffer[1];  cmyk[2]=buffer[2];  cmyk[3]=buffer[3];  c.toHSVAArray(buffer);  hsv[0]=buffer[0];  hsv[1]=buffer[1];  hsv[2]=buffer[2];  c.toRGBAArray(buffer);  rgb[0]=buffer[0];  rgb[1]=buffer[1];  rgb[2]=buffer[2];  this.alpha=c.alpha();}  }
class C{  public void addPolicyPanel(AbstractParamPanel panel){  this.additionalPanels.add(panel);  addParamPanel(ROOT,panel.getName(),panel,true);}  }
class C{  public static <T>OrderBy orderBy(final Property<T> property){  return orderBy(property,OrderBy.Order.ASCENDING);}  }
class C{  IgniteTxMap seal(){  sealed=true;  return this;}  }
class C{  public void manualTestFailedOldMasterDoesntBlockNewConnections() throws Exception {  FabricMySQLConnection conn1=(FabricMySQLConnection)this.ds.getConnection(this.username,this.password);  conn1.setServerGroupName("ha_config1_group");  Statement s=conn1.createStatement();  try {    while (true) {      s.executeUpdate("set @x = 1");      try {        Thread.sleep(500);      } catch (      Exception ex) {      }    }  } catch (  SQLException ex) {    System.err.println("Failure encountered: " + ex.getMessage());    System.err.println("Waiting 10 seconds before trying a new connection");    try {      Thread.sleep(10 * 1000);    } catch (    Exception ex2) {    }  }  conn1=(FabricMySQLConnection)this.ds.getConnection(this.username,this.password);  conn1.setServerGroupName("ha_config1_group");  ResultSet rs=conn1.createStatement().executeQuery("SELECT CONCAT(@@hostname, ':', @@port) AS 'Value'");  rs.next();  System.err.println("New master: " + rs.getString(1));  rs.close();  conn1.close();}  }
class C{  public static String dump(final InterfaceDescriptor descriptor){  return String.format("Interface Descriptor:%n" + "  bLength %18d%n" + "  bDescriptorType %10d%n"+ "  bInterfaceNumber %9d%n"+ "  bAlternateSetting %8d%n"+ "  bNumEndpoints %12d%n"+ "  bInterfaceClass %10d %s%n"+ "  bInterfaceSubClass %7d%n"+ "  bInterfaceProtocol %7d%n"+ "  iInterface %15d%n",descriptor.bLength(),descriptor.bDescriptorType(),descriptor.bInterfaceNumber() & 0xff,descriptor.bAlternateSetting() & 0xff,descriptor.bNumEndpoints() & 0xff,descriptor.bInterfaceClass() & 0xff,getUSBClassName(descriptor.bInterfaceClass()),descriptor.bInterfaceSubClass() & 0xff,descriptor.bInterfaceProtocol() & 0xff,descriptor.iInterface() & 0xff);}  }
class C{  private float[] calcScorePerSlice(int chartSlices[],float[] scores){  float[] scoresPerSlice=new float[chartSlices.length];  for (int i=0; i < scoresPerSlice.length; i++) {    scoresPerSlice[i]=0;  }  int maxRange=0;  int minRange=0;  for (int i=0; i < chartSlices.length; i++) {    if (i == 0) {      maxRange=100;      minRange=chartSlices[0];    } else {      maxRange=chartSlices[i - 1] - 1;      minRange=chartSlices[i];    }    for (int j=0; j < scores.length; j++) {      if (scores[j] >= minRange && scores[j] <= maxRange) {        scoresPerSlice[i]=scoresPerSlice[i] + 1;      }    }  }  return scoresPerSlice;}  }
class C{  private DSAParameters generateParameters_FIPS186_3(){  Digest d=digest;  int outlen=d.getDigestSize() * 8;  int seedlen=N;  byte[] seed=new byte[seedlen / 8];  int n=(L - 1) / outlen;  int b=(L - 1) % outlen;  byte[] output=new byte[d.getDigestSize()];  for (; ; ) {    random.nextBytes(seed);    hash(d,seed,output);    BigInteger U=new BigInteger(1,output).mod(ONE.shiftLeft(N - 1));    BigInteger q=ONE.shiftLeft(N - 1).add(U).add(ONE).subtract(U.mod(TWO));    if (!q.isProbablePrime(certainty)) {      continue;    }    byte[] offset=Arrays.clone(seed);    int counterLimit=4 * L;    for (int counter=0; counter < counterLimit; ++counter) {      BigInteger W=ZERO;      for (int j=0, exp=0; j <= n; ++j, exp+=outlen) {        inc(offset);        hash(d,offset,output);        BigInteger Vj=new BigInteger(1,output);        if (j == n) {          Vj=Vj.mod(ONE.shiftLeft(b));        }        W=W.add(Vj.shiftLeft(exp));      }      BigInteger X=W.add(ONE.shiftLeft(L - 1));      BigInteger c=X.mod(q.shiftLeft(1));      BigInteger p=X.subtract(c.subtract(ONE));      if (p.bitLength() != L) {        continue;      }      if (p.isProbablePrime(certainty)) {        if (usageIndex >= 0) {          BigInteger g=calculateGenerator_FIPS186_3_Verifiable(d,p,q,seed,usageIndex);          if (g != null) {            return new DSAParameters(p,q,g,new DSAValidationParameters(seed,counter,usageIndex));          }        }        BigInteger g=calculateGenerator_FIPS186_3_Unverifiable(p,q,random);        return new DSAParameters(p,q,g,new DSAValidationParameters(seed,counter));      }    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:50.371 -0500",hash_original_method="9B7C20934D3E00C37812C7E94DAAB15E",hash_generated_method="8D6BEA9AE61E0A5A192D26A24FF1BFC1") protected void enforceNotSealed(){  if (isSealed()) {    throw new IllegalStateException("Cannot perform this " + "action on an sealed instance.");  }}  }
class C{  public static String stringFor(int n){  if (n == 0) {    return "CU_STREAM_DEFAULT";  }  String result="";  if ((n & CU_STREAM_NON_BLOCKING) != 0)   result+="CU_STREAM_NON_BLOCKING ";  return result;}  }
class C{  private void init(){  acceptableMethods=new ArrayList<>();  acceptableMethods.add(new NoAuthenticationRequiredMethod());  acceptableMethods.add(new GssApiMethod());  acceptableMethods.add(new UsernamePasswordMethod());}  }
class C{  @Override public int bulkInsert(Uri uri,ContentValues[] cvsArray){  return mImpl.bulkInsert(uri,cvsArray);}  }
class C{  protected void prepare(){  for (  ProcessInfoParameter para : getParameter()) {    String name=para.getParameterName();    if (para.getParameter() == null)     ; else     if (name.equals("AD_Org_ID"))     p_AD_Org_ID=para.getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para.getParameterAsInt(); else     if (name.equals("C_BP_Group_ID"))     p_C_BP_Group_ID=para.getParameterAsInt(); else     if (name.equals("C_Invoice_ID"))     p_C_Invoice_ID=para.getParameterAsInt(); else     if (name.equals("InvoiceCollectionType"))     p_InvoiceCollectionType=(String)para.getParameter(); else     if (name.equals("C_DunningLevel_ID"))     p_C_DunningLevel_ID=para.getParameterAsInt(); else     if (name.equals("MaxInvWriteOffAmt"))     p_MaxInvWriteOffAmt=(BigDecimal)para.getParameter(); else     if (name.equals("APAR"))     p_APAR=(String)para.getParameter(); else     if (name.equals("DateInvoiced")) {      p_DateInvoiced_From=(Timestamp)para.getParameter();      p_DateInvoiced_To=(Timestamp)para.getParameter_To();    } else     if (name.equals("DateAcct"))     p_DateAcct=(Timestamp)para.getParameter(); else     if (name.equals("CreatePayment"))     p_CreatePayment="Y".equals(para.getParameter()); else     if (name.equals("C_BankAccount_ID"))     p_C_BankAccount_ID=para.getParameterAsInt(); else     if (name.equals("IsSimulation"))     p_IsSimulation="Y".equals(para.getParameter()); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);  }}  }
class C{  public String toString(){  try {    return new String(blobContent,StandardCharsets.UTF_8);  } catch (  Exception e) {    throw new AssertionError(e);  }}  }
class C{  public void clearMap(){  if (jobMap != null) {    jobMap.clear();    iterator=jobMap.values().iterator();  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public int hashCode(){  int hash=super.hashCode();  hash=hash + (this.getContract() == null ? 0 : this.getContract().hashCode());  hash=hash + (this.getStrategy() == null ? 0 : this.getStrategy().hashCode());  hash=hash + (this.getPortfolio() == null ? 0 : this.getPortfolio().hashCode());  hash=hash + (this.getTradingday() == null ? 0 : this.getTradingday().hashCode());  hash=hash + (this.getBarSize() == null ? 0 : this.getBarSize().hashCode());  hash=hash + (this.getChartDays() == null ? 0 : this.getChartDays().hashCode());  return hash;}  }
class C{  public ObjectConstantOperand(Object v,Offset i){  if (VM.VerifyAssertions)   VM._assert(v != null);  value=v;  offset=i;  movable=!VM.runningVM || !MemoryManager.willNeverMove(v);}  }
class C{  public <T>JSONAPIDocument<T> readDocument(InputStream dataStream,Class<T> clazz){  try {    resourceCache.init();    JsonNode rootNode=objectMapper.readTree(dataStream);    ValidationUtils.ensureNotError(objectMapper,rootNode);    ValidationUtils.ensureObject(rootNode);    resourceCache.cache(parseIncluded(rootNode));    JsonNode dataNode=rootNode.get(DATA);    JSONAPIDocument<T> result;    if (!dataNode.isNull()) {      T resourceObject=readObject(dataNode,clazz,true);      result=new JSONAPIDocument<>(resourceObject,objectMapper);    } else {      result=new JSONAPIDocument<>();    }    if (rootNode.has(META)) {      result.setMeta(mapMeta(rootNode.get(META)));    }    if (rootNode.has(LINKS)) {      result.setLinks(new Links(mapLinks(rootNode.get(LINKS))));    }    return result;  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  } finally {    resourceCache.clear();  }}  }
class C{  @Override protected void doAction(final String command){  ActionType action=ActionType.getbyRep(command);  if (action == null) {    LOGGER.error("Unknown command: '" + command + "'");    return;  }  view.onAction(ActionType.getbyRep(command));}  }
class C{  public InflaterInputStream(InputStream in,Inflater inf,int size){  super(in);  if (in == null || inf == null) {    throw new NullPointerException();  } else   if (size <= 0) {    throw new IllegalArgumentException("buffer size <= 0");  }  this.inf=inf;  buf=new byte[size];}  }
class C{  public boolean contains(int x,int y){  return left < right && top < bottom && x >= left && x < right && y >= top && y < bottom;}  }
class C{  public String toString(){  return String.format("element %s",getName());}  }
class C{  public static void checkListMatchesSearchQuery(String query,int listSize,int resourceId){  onView(allOf(withId(resourceId),isDisplayed())).check(matches(Matchers.withOnlyMatchingDataItems(Matchers.withItemContent(containsString(query)))));  onView(allOf(withId(resourceId),isDisplayed())).check(matches(Matchers.withAdapterSize(listSize)));}  }
class C{  public void morphFromFab(View fab,long showSheetDuration,long showSheetColorDuration,AnimationListener listener){  sheet.setVisibility(View.VISIBLE);  revealSheetWithFab(fab,getFabRevealRadius(fab),getSheetRevealRadius(),showSheetDuration,fabColor,sheetColor,showSheetColorDuration,listener);}  }
class C{  public String toString(){  int len=this.name.length();  if (this.value != null)   len+=1 + this.value.length();  CharArrayBuffer buffer=new CharArrayBuffer(len);  buffer.append(this.name);  if (this.value != null) {    buffer.append("=");    buffer.append(this.value);  }  return buffer.toString();}  }
class C{  public void paint(Graphics g){  if (projection != null) {    drawProjectionBackground(g);  }  if (this.getComponentCount() > 0) {    paintChildren(g,null);  }  paintPainters(g);  paintBorder(g);}  }
class C{  @DSComment("not sensitive, memory stream") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:51.337 -0500",hash_original_method="04777FE12371C5E12A689BB328BF05B3",hash_generated_method="81559B248840B4A8460F72A02952056A") @Override public void close() throws IOException {  super.close();}  }
class C{  public synchronized TableDetails findTableDetails(Context context,Class<?> object){  if (!cache.containsKey(object)) {    try {      cache.put(object,ReflectionHelper.getTableDetails(context,object));    } catch (    Exception ex) {      throw new IllegalArgumentException("Failed load table details for object " + object.getSimpleName(),ex);    }    if (!cache.containsKey(object))     throw new IllegalArgumentException("No table details could be found for supplied object: " + object.getSimpleName());  }  return cache.get(object);}  }
class C{  private Set<InfoKind> test(Set<VAModel> values,Map<Object,InfoKind> possibleFlows){  Set<InfoKind> kindsFound=new LinkedHashSet<InfoKind>();  for (  VAModel value : values) {    for (    Entry<Object,InfoKind> flowTest : possibleFlows.entrySet()) {      boolean testTrue=false;      logger.info("** Testing: %s (%s) and %s (%s)\n",value,value.getClass(),flowTest.getKey(),flowTest.getKey().getClass());      if (value instanceof StringVAModel && flowTest.getKey() instanceof String) {        for (        Object stringValue : ((StringVAModel)value).getValues()) {          testTrue=((String)stringValue).contains((String)flowTest.getKey());          if (testTrue)           break;        }      } else {        testTrue=value.equals(flowTest.getKey());      }      if (testTrue)       kindsFound.add(flowTest.getValue());    }  }  return kindsFound;}  }
class C{  public boolean isCollectCash(){  Object oo=get_Value(COLUMNNAME_IsCollectCash);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Matrix3 transpose(){  double[] m=this.m;  double tmp=m[1];  m[1]=m[3];  m[3]=tmp;  tmp=m[2];  m[2]=m[6];  m[6]=tmp;  tmp=m[5];  m[5]=m[7];  m[7]=tmp;  return this;}  }
class C{  public KMLTimeSpan(String namespaceURI){  super(namespaceURI);}  }
class C{  private PlogLCRTag readRawLCRTag() throws IOException {  PlogLCRTag tag=new PlogLCRTag();  tag.length=readSwappedInteger(plogStream);  tag.id=readSwappedInteger(plogStream);  tag.rawData=new int[tag.length - 2];  for (int i=0; i < tag.length - 2; i++)   tag.rawData[i]=readSwappedInteger(plogStream);  return tag;}  }
class C{  public boolean isLoaded(){  try {    Method m=ClassLoader.class.getDeclaredMethod("findLoadedClass",new Class[]{String.class});    m.setAccessible(true);    ClassLoader cl=ClassLoader.getSystemClassLoader();    Object obj=m.invoke(cl,className);    return obj != null;  } catch (  Exception e) {    log.error("Failed to check if the class {} is loaded e=",className,e);  }  return false;}  }
class C{  private String translatePattern(String pattern,String from,String to){  StringBuilder result=new StringBuilder();  boolean inQuote=false;  for (int i=0; i < pattern.length(); ++i) {    char c=pattern.charAt(i);    if (inQuote) {      if (c == '\'') {        inQuote=false;      }    } else {      if (c == '\'') {        inQuote=true;      } else       if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {        int ci=from.indexOf(c);        if (ci >= 0) {          if (ci < to.length()) {            c=to.charAt(ci);          }        } else {          throw new IllegalArgumentException("Illegal pattern " + " character '" + c + "'");        }      }    }    result.append(c);  }  if (inQuote) {    throw new IllegalArgumentException("Unfinished quote in pattern");  }  return result.toString();}  }
class C{  static synchronized void counterTripped(int id){  counts[id]=0x7fffffff;  if (processed[id])   return;  processed[id]=true;  CompiledMethod cm=CompiledMethods.getCompiledMethod(id);  if (cm == null)   return;  if (VM.VerifyAssertions)   VM._assert(cm.getCompilerType() == CompiledMethod.BASELINE);  NormalMethod m=(NormalMethod)cm.getMethod();  CompilationPlan compPlan=new CompilationPlan(m,_optPlan,null,_options);  ControllerPlan cp=new ControllerPlan(compPlan,Controller.controllerClock,id,2.0,2.0,2.0);  cp.execute();}  }
class C{  public CompetitiveGroup(final Network root,final int numNeurons){  super(root);  for (int i=0; i < numNeurons; i++) {    addNeuron(new Neuron(root,new LinearRule()));  }  setLabel("Competitive Group");}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  public OrgTitle(){  super(KEY);}  }
class C{  public static double score(AddressWrapper wrapper){  int runs=1000;  int bits=8192;  Double[] scores=new Double[runs];  for (int t=0; t < runs; t++) {    int[] bitFlipCount=new int[64];    long[] hashs=new long[bits];    byte[] init=new byte[hashs.length / 8];    NativeBytes b=NativeBytes.nativeBytes(init.length);    SecureRandom rand=new SecureRandom();    rand.nextBytes(init);    if (t % 2 == 0) {      byte[] init2=new byte[hashs.length / 8];      rand.nextBytes(init2);      for (int i=0; i < init.length; i++)       init[i]&=init2[i];    }    wrapper.setAddress(b.address(0),b.realCapacity());    b.clear();    b.write(init);    for (int i=0; i < hashs.length; i++) {      int index=i >> 6 << 3;      long prev=b.readLong(index);      b.writeLong(index,prev ^ (1L << i));      b.readLimit(hashs.length / 8);      hashs[i]=wrapper.hash();      b.writeLong(index,prev);    }    for (int i=0; i < hashs.length - 1; i++) {      long diff=hashs[i + 1] ^ hashs[i];      for (int k=0; k < 64; k++) {        bitFlipCount[k]+=(int)((diff >>> k) & 1);      }    }    long tests=bits - 1;    double sum=0;    for (int i=0; i < bitFlipCount.length; i++) {      int count=bitFlipCount[i];      double bitScore=10000L * count / tests / 100.0;      double err=Math.abs(bitScore - 50);      sum+=err;    }    scores[t]=sum / bitFlipCount.length;  }  Arrays.sort(scores);  double score=scores[runs * 99 / 100];  System.out.printf("Avalanche: The 99%%tile of the drift from 50%% was %.2f%%%n",score);  return score;}  }
class C{  public void allPeriodic(){  if (allFirstRun) {    System.out.println("NerdyIterativeRobot IterativeRobot.allPeriodic() method... Overload me!");  }}  }
class C{  public void stopThread(){  flag=false;  awake();}  }
class C{  public static Status fromString(String type){  if (type == null) {    return null;  }  type=type.toLowerCase();  if (OPEN.toString().equals(type)) {    return OPEN;  } else   if (ACTIVE.toString().equals(type)) {    return ACTIVE;  } else   if (CLOSED.toString().equals(type)) {    return CLOSED;  } else {    return null;  }}  }
class C{  public synchronized StringBuffer append(char[] chars,int start,int length){  append0(chars,start,length);  return this;}  }
class C{  private <T extends DiscoveredSystemObject>boolean isDataCollectionScanJobSchedulingNeeded(long lastScanTime,boolean inProgress){  long systemTime=System.currentTimeMillis();  long refreshInterval=getRefreshInterval(ControllerServiceImpl.SCANNER);  if (inProgress) {    return false;  }  if (lastScanTime > 0 && (systemTime - lastScanTime < refreshInterval * 1000)) {    _logger.info("Skipping scanner job; attempt to schedule faster than refresh interval allows");    return false;  }  return true;}  }
class C{  public boolean logModified(Logger log){  for (int i=_dependencyList.size() - 1; i >= 0; i--) {    Dependency dependency=_dependencyList.get(i);    if (dependency.logModified(log))     return true;  }  return false;}  }
class C{  public Builder newBuilder(){  return new Builder(this);}  }
class C{  @Override public void mouseMoved(MouseEvent e){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.382 -0500",hash_original_method="A4A9BAD50031A130761CE8D0E963613C",hash_generated_method="04803B384C02AE9AAB58419BB2A08A22") public static char toTitleCase(char c){  return (char)toTitleCaseImpl(c);}  }
class C{  public static void systemExit(int status){  System.exit(status);}  }
class C{  public void resolveClasspathEntries(List<ClasspathEntryDto> entries){  libs=new HashSet<>();  containers=new HashSet<>();  sources=new HashSet<>();  projects=new HashSet<>();  for (  ClasspathEntryDto entry : entries) {switch (entry.getEntryKind()) {case ClasspathEntryKind.LIBRARY:      libs.add(entry.getPath());    break;case ClasspathEntryKind.CONTAINER:  containers.add(entry);break;case ClasspathEntryKind.SOURCE:sources.add(entry.getPath());break;case ClasspathEntryKind.PROJECT:projects.add(WORKSPACE_PATH + entry.getPath());break;default :}}}  }
class C{  protected boolean hasTitleArea(){  return titleText != null || showDialogMenu;}  }
class C{  public static void init(int poolSize){  mPool=new ByteArrayPool(poolSize);}  }
class C{  private static byte[] createShort(int value){  assert (value >= Short.MIN_VALUE && value <= Short.MAX_VALUE) : String.format("Value \"%d\" outside range of short",value);  return datatypeCoder.encodeShort(value);}  }
class C{  public static boolean looksLikeAFontStyle(String val){  return FONT_STYLES.indexOf(val) >= 0;}  }
class C{  @Entrypoint public static void unresolvedInvokeinterfaceImplementsTest(int mid,Object rhsObject) throws IncompatibleClassChangeError {  RVMMethod sought=MemberReference.getMemberRef(mid).asMethodReference().resolveInterfaceMethod();  RVMClass LHSclass=sought.getDeclaringClass();  if (!LHSclass.isResolved()) {    LHSclass.resolve();  }  if (rhsObject != null) {    TIB RHStib=ObjectModel.getTIB(rhsObject);    if (LHSclass.isInterface() && DynamicTypeCheck.instanceOfInterface(LHSclass,RHStib))     return;    throw new IncompatibleClassChangeError();  }}  }
class C{  protected String doIt() throws Exception {  MRfQ rfq=new MRfQ(getCtx(),p_C_RfQ_ID,get_TrxName());  log.info("doIt - " + rfq + ", Send="+ p_IsSendRfQ);  String error=rfq.checkQuoteTotalAmtOnly();  if (error != null && error.length() > 0)   throw new Exception(error);  int counter=0;  int sent=0;  int notSent=0;  MRfQResponse[] responses=rfq.getResponses(false,false);  MRfQTopic topic=new MRfQTopic(getCtx(),rfq.getC_RfQ_Topic_ID(),get_TrxName());  MRfQTopicSubscriber[] subscribers=topic.getSubscribers();  for (int i=0; i < subscribers.length; i++) {    MRfQTopicSubscriber subscriber=subscribers[i];    boolean skip=false;    for (int r=0; r < responses.length; r++) {      if (subscriber.getC_BPartner_ID() == responses[r].getC_BPartner_ID() && subscriber.getC_BPartner_Location_ID() == responses[r].getC_BPartner_Location_ID()) {        skip=true;        break;      }    }    if (skip)     continue;    MRfQResponse response=new MRfQResponse(rfq,subscriber);    if (response.get_ID() == 0)     continue;    counter++;    if (p_IsSendRfQ) {      commitEx();      if (response.sendRfQ())       sent++; else       notSent++;    }  }  String retValue="@Created@ " + counter;  if (p_IsSendRfQ)   retValue+=" - @IsSendRfQ@=" + sent + " - @Error@="+ notSent;  return retValue;}  }
class C{  public String replace(String text){  for (int i=stack.size(); --i >= 0; ) {    String value=stack.get(i).replace(text);    if (value != null) {      return value;    }  }  return null;}  }
class C{  public void add(int index,Object element){  content.beforeInsert(index,value(element));  modCount++;}  }
class C{  public void show(int x,int y){  hide();  updateActions();  lockLayer=new MenuLockLayer(this);  popupMenu=new PopupMenu(actions,actionManager,managerProvider,presentationFactory,lockLayer,this,keyBindingAgent,"contextMenu");  lockLayer.add(popupMenu);  calculatePosition(popupMenu,x,y);}  }
class C{  public void removed(java.awt.Container cont){  OMGraphicList rasters=getList();  if (rasters != null) {    rasters.clear();  }}  }
class C{  public static List<String> parseCsv(String csv){  return parseCsv(csv,',');}  }
class C{  public void removeChild(int idx){  if (idx < childCount) {    PShape child=children[idx];    for (int i=idx; i < childCount - 1; i++) {      children[i]=children[i + 1];    }    childCount--;    if (child.getName() != null && nameTable != null) {      nameTable.remove(child.getName());    }  }}  }
class C{  @Nullable public static PsiFile findFileByPath(@NotNull FilePath filePath,@NotNull PsiDirectory rootDirectory,@NotNull Project project){  if (filePath.getFileName().matches("[a-zA-Z]+:")) {    while (rootDirectory.getParent() != null) {      rootDirectory=rootDirectory.getParent();    }    filePath=filePath.getChild();    if (filePath == null) {      return null;    }  } else {    while (filePath.fileNameIsDotDot()) {      if (rootDirectory.getParent() == null) {        return null;      }      rootDirectory=rootDirectory.getParent();      filePath=filePath.getChild();      if (filePath == null) {        return null;      }    }  }  PsiDirectory matched=rootDirectory.findSubdirectory(filePath.getFileName());  if (matched != null) {    if (filePath.getChild() == null) {      return rootDirectory.findFile(filePath.getFileName());    } else {      return findFileByPath(filePath.getChild(),matched,project);    }  } else {    if (filePath.getChild() == null) {      return rootDirectory.findFile(filePath.getFileName());    }  }  return null;}  }
class C{  public void testLegacyMigration(){  try {    Configuration configuration=new Configuration.Builder(getContext()).setDatabaseName("migration.db").setDatabaseVersion(2).create();    DatabaseHelper helper=new DatabaseHelper(configuration);    SQLiteDatabase db=helper.getWritableDatabase();    helper.onUpgrade(db,1,2);    fail("Should not be able to parse the SQL script.");  } catch (  SQLException e) {    final String message=e.getMessage();    assertNotNull(message);    assertTrue(message.contains("syntax error"));    assertTrue(message.contains("near \"MockMigration\""));  }}  }
class C{  public T caseTraceReactionWillFire(TraceReactionWillFire object){  return null;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public String t2TipText(){  return "The T2 distance to use. Values < 0 indicate that this should be set using " + "a heuristic based on attribute standard deviation (note that this only" + "works when batch training)";}  }
class C{  public void init(){  LOG.d(TAG,"init()");  isInitialized=true;  this.onPause(false);  this.onDestroy();  pluginMap.clear();  this.startupPlugins();}  }
class C{  @Override public void endWindow(){  HashMap<K,Integer> tuple=new HashMap<>();  for (  K key : inputSet) {    tuple.put(key,map.get(key).toInteger());  }  count.emit(tuple);  if (!cumulative) {    map.clear();  }  inputSet.clear();}  }
class C{  public NotificationRemote remote(){  return (NotificationRemote)CENTER.get(REMOTE);}  }
class C{  public TaskCallbackImpl updateCallback(TaskCallbackImpl callback,boolean success){  TaskCallbackImpl callbackToCommit=null;  if (success) {    callbackToCommit=completeCallbacks.update(callback);  }  int count=pendingCount.decrementAndGet();  metrics.messagesInFlight().set(count);  return callbackToCommit;}  }
class C{  void executeQuery(){  if (m_worker != null && m_worker.isAlive())   return;  m_worker=new Worker();  m_worker.start();}  }
class C{  public final void writeInt(int val) throws IOException {  Memory.pokeInt(scratch,0,val,ByteOrder.BIG_ENDIAN);  write(scratch,0,SizeOf.INT);}  }
class C{  public ConnectionTool(ConnectionFigure prototype){  this(prototype,null,null);}  }
class C{  public ALMA2(double alpha){  setAlpha(alpha);}  }
class C{  public static int bytesToInt(byte[] bytes){  return bytesToInt(bytes,0);}  }
class C{  private static Set<String> loadVerbStemSet(final String[] verbStems){  final Set<String> set=new HashSet<>(verbStems.length);  for (int i=0; i < verbStems.length; i++) {    set.add(verbStems[i]);  }  return set;}  }
class C{  private Object parseObject() throws PDFParseException {  final Tok t=nextToken();switch (t.type) {case Tok.NUM:    return new Double(tok.value);case Tok.STR:case Tok.NAME:  return tok.name;case Tok.BRKB:{  final HashMap<String,PDFObject> hm=new HashMap<String,PDFObject>();  String name=null;  for (Object obj=null; (obj=parseObject()) != null; ) {    if (name == null) {      name=(String)obj;    } else {      hm.put(name,new PDFObject(obj));      name=null;    }  }  if (tok.type != Tok.BRKE) {    throw new PDFParseException("Inline dict should have ended with '>>'");  }  return hm;}case Tok.ARYB:{final ArrayList<Object> ary=new ArrayList<Object>();for (Object obj=null; (obj=parseObject()) != null; ) {  ary.add(obj);}if (tok.type != Tok.ARYE) {  throw new PDFParseException("Expected ']'");}return ary.toArray();}case Tok.CMD:return t;}if (!RELEASE) {debug("**** WARNING! parseObject unknown token! (t.type=" + t.type + ") *************************",4);}return null;}  }
class C{  @Override public void stop(ShutdownModeAmp mode) throws Exception {  super.stop(mode);  Alarm alarm=_alarm;  _alarm=null;  if (alarm != null) {    alarm.dequeue();  }  for (  PortTcp port : _ports) {    try {      port.close();    } catch (    Throwable e) {      log.log(Level.WARNING,e.toString(),e);    }  }}  }
class C{  public void paintSliderThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  if (context.getComponent().getClientProperty("Slider.paintThumbArrowShape") == Boolean.TRUE) {    if (orientation == JSlider.HORIZONTAL) {      orientation=JSlider.VERTICAL;    } else {      orientation=JSlider.HORIZONTAL;    }    paintBackground(context,g,x,y,w,h,orientation);  } else {    paintBackground(context,g,x,y,w,h,orientation);  }}  }
class C{  int checkComponentPermission(String permission,int pid,int uid,int owningUid,boolean exported){  Identity tlsIdentity=sCallerIdentity.get();  if (tlsIdentity != null) {    Slog.d(TAG,"checkComponentPermission() adjusting {pid,uid} to {" + tlsIdentity.pid + ","+ tlsIdentity.uid+ "}");    uid=tlsIdentity.uid;    pid=tlsIdentity.pid;  }  if (pid == MY_PID) {    return PackageManager.PERMISSION_GRANTED;  }  return ActivityManager.checkComponentPermission(permission,uid,owningUid,exported);}  }
class C{  public void stop() throws ExtractorException {  String stopMessage="0";  if (connected)   throw new OracleExtractException("Cannot stop already connected");  if (logger.isInfoEnabled()) {    logger.info("Stopping listener on host " + hostName + " (port="+ portNumber+ ")");  }  try {    listenerSocket=SocketChannel.open(new InetSocketAddress(hostName,portNumber));  } catch (  UnknownHostException e) {    throw new OracleExtractException("IP address could not be determined (" + hostName + ":"+ portNumber+ ")",e);  }catch (  IOException e) {    throw new OracleExtractException("An I/O error occurs when creating the socket (" + hostName + ":"+ portNumber+ ")",e);  }  try {    out=new PrintWriter(listenerSocket.socket().getOutputStream(),true);  } catch (  IOException e) {    throw new OracleExtractException("An I/O error occurs when creating the output stream",e);  }  if (logger.isInfoEnabled()) {    logger.info("Connected.");  }  connected=true;  if (logger.isInfoEnabled()) {    logger.info("Now stopping...");  }  try {    send(Const.MessageControl,stopMessage);  } catch (  InterruptedException e) {    throw new ExtractorException(e);  }  if (logger.isInfoEnabled()) {    logger.info("Stopped.");  }}  }
class C{  public boolean inRegion(float n,float s,float e,float w){  if ((s > northlat) || (n < southlat)) {    return false;  }  if (e < w) {    e+=360.0f;  }  if ((w > eastlon) || (e < westlon)) {    return false;  }  return true;}  }
class C{  public boolean hasPrimary(){  return super.hasAttribute(PRIMARY);}  }
class C{  public void enable(boolean enable){  params.isEnabled=enable;}  }
class C{  @Override public boolean inputThrottled(OFMessage ofm){  if (ofm.getType() != OFType.PACKET_IN) {    return false;  }  ctrSwitchPktin.updateCounterNoFlush();  messageCount++;  if (messageCount % 1000 == 0) {    long now=System.currentTimeMillis();    if (now != lastMessageTime) {      currentRate=(int)(1000000 / (now - lastMessageTime));      lastMessageTime=now;    } else {      currentRate=Integer.MAX_VALUE;    }  }  if (!packetInThrottleEnabled) {    if (currentRate <= packetInRateThresholdHigh) {      return false;    }    enablePacketInThrottle();  } else   if (currentRate < packetInRateThresholdLow) {    disablePacketInThrottle();    return false;  }  OFPacketIn pin=(OFPacketIn)ofm;  OFMatch match=new OFMatch();  match.loadFromPacket(pin.getPacketData(),pin.getInPort());  if (ofMatchCache.update(match)) {    ctrSwitchPktinDrops.updateCounterNoFlush();    return true;  }  messageCountUniqueOFMatch++;  if ((messageCountUniqueOFMatch % packetInRatePerMacThreshold) == 1) {    checkPerSourceMacRate(pin);  }  if ((messageCountUniqueOFMatch % packetInRatePerPortThreshold) == 1) {    checkPerPortRate(pin);  }  return false;}  }
class C{  public boolean isWinXP(){  return System.getProperty("os.name").toLowerCase().indexOf("xp") >= 0;}  }
class C{  public void testPointIntSetBoxed() throws Exception {  assertEquals(IntPoint.newSetQuery("foo",1,2,3),IntPoint.newSetQuery("foo",Arrays.asList(1,2,3)));  assertEquals(FloatPoint.newSetQuery("foo",1F,2F,3F),FloatPoint.newSetQuery("foo",Arrays.asList(1F,2F,3F)));  assertEquals(LongPoint.newSetQuery("foo",1L,2L,3L),LongPoint.newSetQuery("foo",Arrays.asList(1L,2L,3L)));  assertEquals(DoublePoint.newSetQuery("foo",1D,2D,3D),DoublePoint.newSetQuery("foo",Arrays.asList(1D,2D,3D)));}  }
class C{  public SamFilterParamsBuilder maxMatedAlignmentScore(final IntegerOrPercentage val){  mMaxASMatedValue=val;  return this;}  }
class C{  public int addHistogramPlot(String name,Color color,double[] sample,double... bounds){  return ((Plot2DCanvas)plotCanvas).addHistogramPlot(name,color,sample,bounds);}  }
class C{  public boolean isPreclosed(){  return preclosed;}  }
class C{  public void run() throws IOException {  try {    int op, id, length;    MultiplexConnectionInfo info;    while (true) {      op=dataIn.readUnsignedByte();switch (op) {case OPEN:        id=dataIn.readUnsignedShort();      if (multiplexLog.isLoggable(Log.VERBOSE)) {        multiplexLog.log(Log.VERBOSE,"operation  OPEN " + id);      }    info=connectionTable.get(id);  if (info != null)   throw new IOException("OPEN: Connection ID already exists");info=new MultiplexConnectionInfo(id);info.in=new MultiplexInputStream(this,info,2048);info.out=new MultiplexOutputStream(this,info,2048);synchronized (connectionTable) {connectionTable.put(id,info);++numConnections;}sun.rmi.transport.Connection conn;conn=new TCPConnection(channel,info.in,info.out);channel.acceptMultiplexConnection(conn);break;case CLOSE:id=dataIn.readUnsignedShort();if (multiplexLog.isLoggable(Log.VERBOSE)) {multiplexLog.log(Log.VERBOSE,"operation  CLOSE " + id);}info=connectionTable.get(id);if (info == null) throw new IOException("CLOSE: Invalid connection ID");info.in.disconnect();info.out.disconnect();if (!info.closed) sendCloseAck(info);synchronized (connectionTable) {connectionTable.remove(id);--numConnections;}break;case CLOSEACK:id=dataIn.readUnsignedShort();if (multiplexLog.isLoggable(Log.VERBOSE)) {multiplexLog.log(Log.VERBOSE,"operation  CLOSEACK " + id);}info=connectionTable.get(id);if (info == null) throw new IOException("CLOSEACK: Invalid connection ID");if (!info.closed) throw new IOException("CLOSEACK: Connection not closed");info.in.disconnect();info.out.disconnect();synchronized (connectionTable) {connectionTable.remove(id);--numConnections;}break;case REQUEST:id=dataIn.readUnsignedShort();info=connectionTable.get(id);if (info == null) throw new IOException("REQUEST: Invalid connection ID");length=dataIn.readInt();if (multiplexLog.isLoggable(Log.VERBOSE)) {multiplexLog.log(Log.VERBOSE,"operation  REQUEST " + id + ": "+ length);}info.out.request(length);break;case TRANSMIT:id=dataIn.readUnsignedShort();info=connectionTable.get(id);if (info == null) throw new IOException("SEND: Invalid connection ID");length=dataIn.readInt();if (multiplexLog.isLoggable(Log.VERBOSE)) {multiplexLog.log(Log.VERBOSE,"operation  TRANSMIT " + id + ": "+ length);}info.in.receive(length,dataIn);break;default :throw new IOException("Invalid operation: " + Integer.toHexString(op));}}}  finally {shutDown();}}  }
class C{  public JCas createCurationCas(Project aProject,AnnotationDocument randomAnnotationDocument,Map<String,JCas> jCases,List<AnnotationLayer> aAnnotationLayers) throws IOException, UIMAException {  User userLoggedIn=userRepository.get(SecurityContextHolder.getContext().getAuthentication().getName());  JCas mergeJCas=repository.readAnnotationCas(randomAnnotationDocument);  jCases.put(CurationPanel.CURATION_USER,mergeJCas);  List<Type> entryTypes=getEntryTypes(mergeJCas,aAnnotationLayers,annotationService);  DiffResult diff=CasDiff2.doDiffSingle(annotationService,aProject,entryTypes,LinkCompareBehavior.LINK_ROLE_AS_LABEL,jCases,0,mergeJCas.getDocumentText().length());  mergeJCas=MergeCas.geMergeCas(diff,jCases);  repository.writeCurationCas(mergeJCas,randomAnnotationDocument.getDocument(),userLoggedIn);  return mergeJCas;}  }
class C{  public boolean hasLang(){  return getLang() != null;}  }
class C{  public GuacamoleResourceConflictException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void adjustCell(int row,JLabel cell,Font boldFont){  if (configuration.hasHeaderRow() && row == configuration.getHeaderRow()) {    cell.setBackground(Color.LIGHT_GRAY);    cell.setFont(boldFont);    cell.setForeground(Color.BLACK);  } else   if (row < configuration.getStartingRow()) {    cell.setForeground(Color.LIGHT_GRAY);  } else {    cell.setForeground(Color.BLACK);  }}  }
class C{  private void processFailureMsg(){  onlinePaymentReceiptHeader.setStatus(collectionsUtil.getReceiptStatusForCode(CollectionConstants.RECEIPT_STATUS_CODE_FAILED));  final EgwStatus paymentStatus=collectionsUtil.getStatusForModuleAndCode(CollectionConstants.MODULE_NAME_ONLINEPAYMENT,CollectionConstants.ONLINEPAYMENT_STATUS_CODE_FAILURE);  onlinePaymentReceiptHeader.getOnlinePayment().setStatus(paymentStatus);  onlinePaymentReceiptHeader.getOnlinePayment().setAuthorisationStatusCode(paymentResponse.getAuthStatus());  receiptHeaderService.persist(onlinePaymentReceiptHeader);  LOGGER.debug("Cancelled receipt after receiving failure message from the payment gateway");  addActionError(getText(onlinePaymentReceiptHeader.getOnlinePayment().getService().getCode().toLowerCase() + ".pgi." + onlinePaymentReceiptHeader.getService().getCode().toLowerCase()+ "."+ paymentResponse.getAuthStatus()));  receiptResponse="FAILURE|NA";}  }
class C{  void removeTrailingSlashes(StringBuffer url){  while (url.length() > 0 && url.charAt(url.length() - 1) == '/') {    url.replace(url.length() - 1,url.length(),"");  }}  }
class C{  private boolean findNodeFromTail(Node node){  Node t=tail;  for (; ; ) {    if (t == node)     return true;    if (t == null)     return false;    t=t.prev;  }}  }
class C{  public BulkUserImportException(Reason reason,Exception cause,int lineNumber){  super("Parsing failed at line " + lineNumber,cause,new Object[]{"" + lineNumber});  bean.setReason(reason);  setMessageKey(initMessageKey(reason));}  }
class C{  public boolean maybeDirty(){  return !_mainHashShared;}  }
class C{  public String toString(){  return method.toGenericString();}  }
class C{  private void incCounter(int[] counter,int[] counterMaxs){  int decToInc=0;  for (int i=0; i < counter.length; i++) {    if (counter[i] < counterMaxs[i] - 1) {      decToInc=i;      break;    } else {      decToInc++;    }  }  counter[decToInc]++;  for (int i=0; i < decToInc; i++) {    counter[i]=0;  }}  }
class C{  public BoolExpr_ createBoolExpr_(){  BoolExpr_Impl boolExpr_=new BoolExpr_Impl();  return boolExpr_;}  }
class C{  public void addFromQuestStateString(final String str){  addFromQuestStateString(str,0);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public EMailTest(String name){  super(name);}  }
class C{  public void storeLocal(final int local,final Type type){  setLocalType(local,type);  storeInsn(type,local);}  }
class C{  public long count(){  return count;}  }
class C{  public void println(int x){  return;}  }
class C{  public static <T>T choice(List<T> list){  if (list.isEmpty())   return null;  int position=random.nextInt(list.size());  return list.get(position);}  }
class C{  public static InvalidLoginE parse(javax.xml.stream.XMLStreamReader reader) throws java.lang.Exception {  InvalidLoginE object=new InvalidLoginE();  int event;  java.lang.String nillableValue=null;  java.lang.String prefix="";  java.lang.String namespaceuri="";  try {    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");    if ("true".equals(nillableValue) || "1".equals(nillableValue)) {      while (!reader.isEndElement()) {        reader.next();      }      return null;    }    if (reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type") != null) {      java.lang.String fullTypeName=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","type");      if (fullTypeName != null) {        java.lang.String nsPrefix=null;        if (fullTypeName.indexOf(":") > -1) {          nsPrefix=fullTypeName.substring(0,fullTypeName.indexOf(":"));        }        nsPrefix=nsPrefix == null ? "" : nsPrefix;        java.lang.String type=fullTypeName.substring(fullTypeName.indexOf(":") + 1);        if (!"InvalidLogin".equals(type)) {          java.lang.String nsUri=reader.getNamespaceContext().getNamespaceURI(nsPrefix);          return (InvalidLoginE)ExtensionMapper.getTypeObject(nsUri,type,reader);        }      }    }    java.util.Vector handledAttributes=new java.util.Vector();    reader.next();    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement() && new javax.xml.namespace.QName("http://com.vmware.vim.vasa/1.0/xsd","InvalidLogin").equals(reader.getName())) {      nillableValue=reader.getAttributeValue("http://www.w3.org/2001/XMLSchema-instance","nil");      if ("true".equals(nillableValue) || "1".equals(nillableValue)) {        object.setInvalidLogin(null);        reader.next();        reader.next();      } else {        object.setInvalidLogin(InvalidLogin.Factory.parse(reader));        reader.next();      }    } else {    }    while (!reader.isStartElement() && !reader.isEndElement()) {      reader.next();    }    if (reader.isStartElement()) {      throw new org.apache.axis2.databinding.ADBException("Unexpected subelement " + reader.getLocalName());    }  } catch (  javax.xml.stream.XMLStreamException e) {    throw new java.lang.Exception(e);  }  return object;}  }
class C{  public int readOffset(byte[] dst_buff,int dst_buff_offset,int count,int offset){  int read_offset=(this.read_pos + offset) % array.length;  readOp(dst_buff,dst_buff_offset,count,array,read_offset,array.length);  return count;}  }
class C{  @Override protected double nov(I i){  throw new UnsupportedOperationException("Using an alternative item novelty aggregation model");}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ExpressionsPackage.BOOL_LITERAL__VALUE:    setValue((Boolean)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public ColorBlock(Paint paint,double width,double height){  ParamChecks.nullNotPermitted(paint,"paint");  this.paint=paint;  setWidth(width);  setHeight(height);}  }
class C{  private void readCentralDir() throws IOException {  long scanOffset=raf.length() - ENDHDR;  if (scanOffset < 0) {    throw new ZipException("File too short to be a zip file: " + raf.length());  }  raf.seek(0);  final int headerMagic=Integer.reverseBytes(raf.readInt());  if (headerMagic != LOCSIG) {    throw new ZipException("Not a zip archive");  }  long stopOffset=scanOffset - 65536;  if (stopOffset < 0) {    stopOffset=0;  }  while (true) {    raf.seek(scanOffset);    if (Integer.reverseBytes(raf.readInt()) == ENDSIG) {      break;    }    scanOffset--;    if (scanOffset < stopOffset) {      throw new ZipException("End Of Central Directory signature not found");    }  }  byte[] eocd=new byte[ENDHDR - 4];  raf.readFully(eocd);  BufferIterator it=HeapBufferIterator.iterator(eocd,0,eocd.length,ByteOrder.LITTLE_ENDIAN);  int diskNumber=it.readShort() & 0xffff;  int diskWithCentralDir=it.readShort() & 0xffff;  int numEntries=it.readShort() & 0xffff;  int totalNumEntries=it.readShort() & 0xffff;  it.skip(4);  long centralDirOffset=((long)it.readInt()) & 0xffffffffL;  int commentLength=it.readShort() & 0xffff;  if (numEntries != totalNumEntries || diskNumber != 0 || diskWithCentralDir != 0) {    throw new ZipException("Spanned archives not supported");  }  if (commentLength > 0) {    byte[] commentBytes=new byte[commentLength];    raf.readFully(commentBytes);    comment=new String(commentBytes,0,commentBytes.length,StandardCharsets.UTF_8);  }  RAFStream rafStream=new RAFStream(raf,centralDirOffset);  BufferedInputStream bufferedStream=new BufferedInputStream(rafStream,4096);  byte[] hdrBuf=new byte[CENHDR];  for (int i=0; i < numEntries; ++i) {    ZipEntry newEntry=new ZipEntry(hdrBuf,bufferedStream);    if (newEntry.localHeaderRelOffset >= centralDirOffset) {      throw new ZipException("Local file header offset is after central directory");    }    String entryName=newEntry.getName();    if (entries.put(entryName,newEntry) != null) {      throw new ZipException("Duplicate entry name: " + entryName);    }  }}  }
class C{  public Dimension minimumLayoutSize(Container parent){  JScrollPane scrollPane=(JScrollPane)parent;  vsbPolicy=scrollPane.getVerticalScrollBarPolicy();  hsbPolicy=scrollPane.getHorizontalScrollBarPolicy();  Insets insets=parent.getInsets();  int minWidth=insets.left + insets.right;  int minHeight=insets.top + insets.bottom;  if (viewport != null) {    Dimension size=viewport.getMinimumSize();    minWidth+=size.width;    minHeight+=size.height;  }  Border viewportBorder=scrollPane.getViewportBorder();  if (viewportBorder != null) {    Insets vpbInsets=viewportBorder.getBorderInsets(parent);    minWidth+=vpbInsets.left + vpbInsets.right;    minHeight+=vpbInsets.top + vpbInsets.bottom;  }  if ((rowHead != null) && rowHead.isVisible()) {    Dimension size=rowHead.getMinimumSize();    minWidth+=size.width;    minHeight=Math.max(minHeight,size.height);  }  if ((colHead != null) && colHead.isVisible()) {    Dimension size=colHead.getMinimumSize();    minWidth=Math.max(minWidth,size.width);    minHeight+=size.height;  }  if ((vsb != null) && (vsbPolicy != VERTICAL_SCROLLBAR_NEVER)) {    Dimension size=vsb.getMinimumSize();    minWidth+=size.width;    minHeight=Math.max(minHeight,size.height);  }  if ((hsb != null) && (hsbPolicy != HORIZONTAL_SCROLLBAR_NEVER)) {    Dimension size=hsb.getMinimumSize();    minWidth=Math.max(minWidth,size.width);    minHeight+=size.height;  }  return new Dimension(minWidth,minHeight);}  }
class C{  public void addHeader(final Header header){  headers.add(header);}  }
class C{  public UISigWrapAttack(){  initComponents();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(processinginstructiongettarget.class,args);}  }
class C{  private int calculateCorner(Window w,int x,int y){  Insets insets=w.getInsets();  int xPosition=calculatePosition(x - insets.left,w.getWidth() - insets.left - insets.right);  int yPosition=calculatePosition(y - insets.top,w.getHeight() - insets.top - insets.bottom);  if (xPosition == -1 || yPosition == -1) {    return -1;  }  return yPosition * 5 + xPosition;}  }
class C{  public TabbedInspector(SimpleProperties properties,GUIState state,String name,String[][] propertyNames,String[] tabNames,String extraTab){  buildTabbedInspector(properties,state,name,propertyNames,tabNames,extraTab);}  }
class C{  public SharedPreferences.Editor putStringNoEncrypted(String key,String value){  mEditor.putString(SecurePreferences.encrypt(key),value);  return this;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so,false);}  }
class C{  public void deleteTag(final Tag tag) throws CouldntDeleteException {  Preconditions.checkNotNull(tag,"Error: Tag argument can not be null");  try {    m_manager.deleteTag(tag.getNative());  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntDeleteException e) {    throw new CouldntDeleteException(e);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.741 -0500",hash_original_method="C68A0319865C468C0B8527915CD85227",hash_generated_method="E3173E7117B23FE62E9483F9170C1A4F") protected int estimateParametersLen(final NameValuePair[] nvps){  if ((nvps == null) || (nvps.length < 1))   return 0;  int result=(nvps.length - 1) * 2;  for (int i=0; i < nvps.length; i++) {    result+=estimateNameValuePairLen(nvps[i]);  }  return result;}  }
class C{  static long millisOfSequenceTime(long sequenceTime){  return sequenceTime >> SUB_MILLI_BITS;}  }
class C{  public void forResult(int requestCode){  if (engine == null)   throw new ExceptionInInitializerError(LoadEngine.INITIALIZE_ENGINE_ERROR);  Activity activity=getActivity();  if (activity == null) {    return;  }  mSelectionSpec.setMimeTypeSet(mMimeType);  mSelectionSpec.setEngine(engine);  Intent intent=new Intent(activity,ImageSelectActivity.class);  intent.putExtra(ImageSelectActivity.EXTRA_SELECTION_SPEC,mSelectionSpec);  intent.putParcelableArrayListExtra(ImageSelectActivity.EXTRA_RESUME_LIST,(ArrayList<? extends android.os.Parcelable>)mResumeList);  Fragment fragment=getFragment();  if (fragment != null) {    fragment.startActivityForResult(intent,requestCode);  } else {    activity.startActivityForResult(intent,requestCode);  }  hasInitPicker=false;}  }
class C{  public boolean isPanEnabled(){  return isPanXEnabled() || isPanYEnabled();}  }
class C{  private void computeRawStackMap(){  SuperBlock prev=superBlocks[0];  int[] prevLocals=prev.getTrimmedLocals();  int prevOffset=-1;  for (int i=1; i < superBlocks.length; i++) {    SuperBlock current=superBlocks[i];    int[] currentLocals=current.getTrimmedLocals();    int[] currentStack=current.getStack();    int offsetDelta=current.getStart() - prevOffset - 1;    if (currentStack.length == 0) {      int last=prevLocals.length > currentLocals.length ? currentLocals.length : prevLocals.length;      int delta=Math.abs(prevLocals.length - currentLocals.length);      int j;      for (j=0; j < last; j++) {        if (prevLocals[j] != currentLocals[j]) {          break;        }      }      if (j == currentLocals.length && delta == 0) {        writeSameFrame(currentLocals,offsetDelta);      } else       if (j == currentLocals.length && delta <= 3) {        writeChopFrame(delta,offsetDelta);      } else       if (j == prevLocals.length && delta <= 3) {        writeAppendFrame(currentLocals,delta,offsetDelta);      } else {        writeFullFrame(currentLocals,currentStack,offsetDelta);      }    } else     if (currentStack.length == 1) {      if (Arrays.equals(prevLocals,currentLocals)) {        writeSameLocalsOneStackItemFrame(currentLocals,currentStack,offsetDelta);      } else {        writeFullFrame(currentLocals,currentStack,offsetDelta);      }    } else {      writeFullFrame(currentLocals,currentStack,offsetDelta);    }    prev=current;    prevLocals=currentLocals;    prevOffset=current.getStart();  }}  }
class C{  public static String quoteIfJavaKeyword(String name){  if (isJavaKeyword(name))   return quote(name);  return name;}  }
class C{  private static int normalize(int value,int min,int max){  return value < min ? min : value > max ? max : value;}  }
class C{  public MariaDbStatement clone() throws CloneNotSupportedException {  MariaDbStatement clone=(MariaDbStatement)super.clone();  clone.connection=connection;  clone.protocol=protocol;  clone.timerTaskFuture=null;  clone.batchQueries=new ArrayList<>();  clone.executionResult=null;  clone.closed=false;  clone.warningsCleared=true;  clone.fetchSize=0;  clone.maxRows=0;  return clone;}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) public synchronized void sendVars(ArrayList whiteboardObjParam){  try {    Map whiteboardObj=new HashMap();    int i=0;    for (Iterator iter=whiteboardObjParam.iterator(); iter.hasNext(); ) {      Object obj=iter.next();      whiteboardObj.put(i,obj);      i++;    }    IConnection current=Red5.getConnectionLocal();    RoomClient currentClient=this.clientListManager.getClientByStreamId(current.getClient().getId());    if (currentClient == null) {      return;    }    Long room_id=currentClient.getRoom_id();    String action=whiteboardObj.get(2).toString();    if (action != null && action.equals("whiteboardObj")) {      List actionObject=(List)whiteboardObj.get(3);      WhiteboardManagement.getInstance().updateWhiteboardObject(room_id,actionObject);    } else     if (action != null && action.equals("moveMap")) {      List actionObject=(List)whiteboardObj.get(3);      WhiteboardManagement.getInstance().updateWhiteboardObjectPos(room_id,actionObject);    } else {      WhiteboardManagement.getInstance().addWhiteBoardObject(room_id,whiteboardObj);    }    boolean showDrawStatus=getWhiteboardDrawStatus();    Collection<Set<IConnection>> conCollection=current.getScope().getConnections();    for (    Set<IConnection> conset : conCollection) {      for (      IConnection conn : conset) {        if (conn != null) {          if (conn instanceof IServiceCapableConnection) {            if (conn.getClient().getId().equals(current.getClient().getId())) {              continue;            }            RoomClient rcl=this.clientListManager.getSyncClientByStreamId(conn.getClient().getId());            if (rcl == null) {              continue;            }            if (!currentClient.getStreamid().equals(rcl.getStreamid())) {              ((IServiceCapableConnection)conn).invoke("sendVarsToWhiteboard",new Object[]{(showDrawStatus ? currentClient : null),whiteboardObj},this);            }          }        }      }    }  } catch (  Exception err) {    log.error("[sendVars]",err);  }}  }
class C{  public VectorClock(){  this(new ArrayList<ClockEntry>(0),System.currentTimeMillis());}  }
class C{  public void logMessage(final FormattedMqttMessage receivedMessage){  if (!MessageLogEnum.DISABLED.equals(connectionSettings.getMessageLog().getValue())) {    messageQueue.add(receivedMessage);  }}  }
class C{  public void actualizarDetalle(DetalleVO detalle){  String qual=new StringBuffer(" WHERE ").append(DBUtils.generateEQTokenField(IDSOLICITUD_FIELD,detalle.getIdsolicitud())).append(" AND ").append(DBUtils.generateEQTokenField(IDUDOC_FIELD,detalle.getIdudoc())).append(" AND ").append(DBUtils.generateEQTokenField(SIGNATURAUDOC_FIELD,detalle.getSignaturaudoc())).append(" AND ").append(DBUtils.generateEQTokenField(TIPOSOLICITUD_FIELD,detalle.getTiposolicitud())).toString();  updateVO(qual,TABLE_NAME,TABLE_COLUMNS,detalle);}  }
class C{  public ClearCacheRequest(Cache cache,Runnable callback){  super(Method.GET,null,null);  mCache=cache;  mCallback=callback;}  }
class C{  public static boolean verify(PublicKey publicKey,String signedData,String signature){  Signature sig;  try {    sig=Signature.getInstance(SIGNATURE_ALGORITHM);    sig.initVerify(publicKey);    sig.update(signedData.getBytes());    if (!sig.verify(Base64.decode(signature))) {      Log.e(TAG,"Signature verification failed.");      return false;    }    return true;  } catch (  NoSuchAlgorithmException e) {    Log.e(TAG,"NoSuchAlgorithmException.");  }catch (  InvalidKeyException e) {    Log.e(TAG,"Invalid key specification.");  }catch (  SignatureException e) {    Log.e(TAG,"Signature exception.");  }catch (  Base64DecoderException e) {    Log.e(TAG,"Base64 decoding failed.");  }  return false;}  }
class C{  public static boolean isEncoded(final HttpEntity entity){  Header h=entity.getContentType();  if (h != null) {    HeaderElement[] elems=h.getElements();    if (elems.length > 0) {      String contentType=elems[0].getName();      return contentType.equalsIgnoreCase(CONTENT_TYPE);    } else {      return false;    }  } else {    return false;  }}  }
class C{  @Override public void queueTasks(){synchronized (lock) {    paused=true;  }}  }
class C{  public char first(){  if (start == end) {    return DONE;  }  offset=start;  return string.charAt(offset);}  }
class C{  @Override public Object[] toArray(){  Object[] o=new Object[_size];  int i=0;  for (TLinkable link=_head; link != null; link=link.getNext()) {    o[i++]=link;  }  return o;}  }
class C{  protected void finalize() throws Throwable {  this.entities.clear();  this.entities=null;  super.finalize();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean isShowCustomTextGridY(){  return mShowCustomTextGridY;}  }
class C{  public SBitmap(short x1,short y1,short width,short height,byte[] bits,short x_hot,short y_hot){  super(GraphicType.GT_Bitmap,RenderType.RT_XY,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint(x1,y1);  ll1_=new LLPoint(0f,0f);  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  bits_=bits;  bmref_=null;}  }
class C{  public ListSavesCommand(Server server){  super(server,"listSaves","List all saved games in the saved games directory.");}  }
class C{  public String minNumTipText(){  return "The minimum total weight of the instances in a leaf.";}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection<Object>)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map<String,Object>)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  private void tryToGetAudioFocus(){  LogUtils.d(TAG,"tryToGetAudioFocus");  if (mAudioFocus != AUDIO_FOCUSED) {    int result=mAudioManager.requestAudioFocus(this,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);    if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {      mAudioFocus=AUDIO_FOCUSED;    }  }}  }
class C{  public RecyclerDivider(String dividerText){  this.dividerText=dividerText;  this.dividerBGcolor=-1;}  }
class C{  public List<GenericEntry> retrieveAllAccountInfoRequests(Date fromDate) throws AppsForYourDomainException, IOException, ServiceException {  String url=BASE_URL + "account/" + domain;  if (fromDate != null) {    url+="?fromDate=" + DATE_FORMAT.format(fromDate);  }  return getAllPages(new URL(url),GenericFeed.class);}  }
class C{  public String minMetricTipText(){  return "Minimum metric score. Consider only rules with scores higher than " + "this value.";}  }
class C{  public RefQueueWorker(ReferenceQueue<?> queue,RefQueueHandler handler){  if (queue == null) {    throw new IllegalArgumentException("Queue must not be null.");  }  if (handler == null) {    throw new IllegalArgumentException("Handler must not be null.");  }  refQueue=queue;  refHandler=handler;}  }
class C{  public void addEdge(T sourceElement,T destinationElement){  if (sourceElement.equals(destinationElement)) {    return;  }  if (hasEdge(sourceElement,destinationElement)) {    return;  }  nodes.get(sourceElement).addEdge(destinationElement);}  }
class C{  protected Collection<InternetAddress> replaceInternetAddresses(Mail mail,Collection<InternetAddress> list) throws MessagingException {  Collection<InternetAddress> newList=new HashSet<InternetAddress>(list.size());  for (  InternetAddress internetAddress : list) {    MailAddress mailAddress=new MailAddress(internetAddress);    if (!mailAddress.getDomain().equalsIgnoreCase("address.marker")) {      newList.add(internetAddress);    } else     if (internetAddress.equals(SpecialAddress.SENDER.toInternetAddress())) {      MailAddress sender=mail.getSender();      if (sender != null) {        newList.add(sender.toInternetAddress());      }    } else     if (internetAddress.equals(SpecialAddress.REVERSE_PATH.toInternetAddress())) {      MailAddress reversePath=mail.getSender();      if (reversePath != null) {        newList.add(reversePath.toInternetAddress());      }    } else     if (internetAddress.equals(SpecialAddress.FROM.toInternetAddress())) {      try {        InternetAddress[] fromArray=(InternetAddress[])mail.getMessage().getFrom();        if (fromArray != null) {          Collections.addAll(newList,fromArray);        } else {          MailAddress reversePath=mail.getSender();          if (reversePath != null) {            newList.add(reversePath.toInternetAddress());          }        }      } catch (      MessagingException me) {        log("Unable to parse the \"FROM\" header in the original message; ignoring.");      }    } else     if (internetAddress.equals(SpecialAddress.REPLY_TO.toInternetAddress())) {      try {        InternetAddress[] replyToArray=(InternetAddress[])mail.getMessage().getReplyTo();        if (replyToArray != null) {          Collections.addAll(newList,replyToArray);        } else {          MailAddress reversePath=mail.getSender();          if (reversePath != null) {            newList.add(reversePath.toInternetAddress());          }        }      } catch (      MessagingException me) {        log("Unable to parse the \"REPLY_TO\" header in the original message; ignoring.");      }    } else     if (internetAddress.equals(SpecialAddress.TO.toInternetAddress()) || internetAddress.equals(SpecialAddress.RECIPIENTS.toInternetAddress())) {      try {        String[] toHeaders=mail.getMessage().getHeader(RFC2822Headers.TO);        if (toHeaders != null) {          for (          String toHeader : toHeaders) {            try {              InternetAddress[] originalToInternetAddresses=InternetAddress.parse(toHeader,false);              Collections.addAll(newList,originalToInternetAddresses);            } catch (            MessagingException ae) {              log("Unable to parse a \"TO\" header address in the original message: " + toHeader + "; ignoring.");            }          }        }      } catch (      MessagingException ae) {        log("Unable to parse the \"TO\" header  in the original message; ignoring.");      }    } else     if (internetAddress.equals(SpecialAddress.UNALTERED.toInternetAddress())) {    } else     if (internetAddress.equals(SpecialAddress.NULL.toInternetAddress())) {    } else {      newList.add(internetAddress);    }  }  return newList;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public void rootToLeafPaths(BinaryNode<E> node,List<E> pathList){  if (node == null)   return;  pathList.add(node.value);  if (node.left == null && node.right == null) {    int i;    for (i=0; i < pathList.size() - 1; i++) {      out.print(pathList.get(i) + " -> ");    }    out.println(pathList.get(i));  } else {    rootToLeafPaths(node.left,new ArrayList<>(pathList));    rootToLeafPaths(node.right,new ArrayList<>(pathList));  }}  }
class C{  private void updateHeartbeatTime(MemberState member,Throwable error){  if (heartbeatFuture == null) {    return;  }  if (error != null && member.getHeartbeatStartTime() == heartbeatTime) {    int votingMemberSize=context.getClusterState().getActiveMemberStates().size() + (context.getCluster().member().type() == Member.Type.ACTIVE ? 1 : 0);    int quorumSize=(int)Math.floor(votingMemberSize / 2) + 1;    if (member.getMember().type() == Member.Type.ACTIVE && ++heartbeatFailures > votingMemberSize - quorumSize) {      heartbeatFuture.completeExceptionally(new InternalException("Failed to reach consensus"));      completeHeartbeat();    }  } else {    member.setHeartbeatTime(System.currentTimeMillis());    if (heartbeatTime <= heartbeatTime()) {      heartbeatFuture.complete(null);      completeHeartbeat();    }  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Ministry.getInstance().getJobSourceFile(getInt(stack));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public void awake(){  getBot().log(this,"Awake",Bot.FINE);}  }
class C{  public static boolean referenceEquals(Object x,Object y){  return x == y;}  }
class C{  public void onJobFinished(){  while (!this.workerList.isEmpty()) {    this.setWorkerFree(this.workerList.get(0));  }  isFinished=true;}  }
class C{  public void removeRow(int row){  data.remove(row);}  }
class C{  public static boolean isNonNull(ComparableWord that){  return that.notEqual(nullPointer());}  }
class C{  public void readXML(@WillClose InputStream in,File base) throws IOException, DocumentException {  try {    doReadXML(in,base);  }  finally {    in.close();  }}  }
class C{  public final void testValidateUppercaseNotAllowingSpacesSucceeds(){  char[] allowedCharacters=new char[]{'-'};  LetterValidator characterValidator=new LetterValidator("foo",Case.UPPERCASE,false,allowedCharacters);  assertTrue(characterValidator.validate("ABC-"));}  }
class C{  public JSONArray put(int index,Collection value) throws JSONException {  this.put(index,new JSONArray(value));  return this;}  }
class C{  public void test_updateLjava_nio_ByteBuffer() throws Exception {  Signature sig=Signature.getInstance("DSA");  ByteBuffer buffer=ByteBuffer.allocate(10);  try {    sig.update(buffer);    fail();  } catch (  SignatureException expected) {  }  sig.initSign(getDsaKeys().getPrivate());  sig.update(buffer);}  }
class C{  static void printMethodRefs(ClassRef[] classes){  out.println("\nMethods:");  for (int i=0; i < classes.length; i++) {    MethodRef[] methods=classes[i].getMethodArray();    for (int j=0; j < methods.length; j++) {      MethodRef ref=methods[j];      out.println(descriptorToDot(ref.getDeclClassName()) + "." + ref.getName()+ " : "+ ref.getDescriptor());    }  }}  }
class C{  @Override public void genNCollisions(int numberAttributes,StringBuilder sb,boolean useNamespace){  Scanner scanner=null;  try {    InputStream is=CollisionDJBX.class.getResourceAsStream("/RubyCollisions/RubyCollisions.txt");    scanner=new Scanner(is,Charset.defaultCharset().name());    String prefix="";    if (useNamespace == true) {      prefix="xmlns:";    }    for (int i=0; i < numberAttributes; i++) {      String collision=scanner.nextLine();      sb.append(prefix).append(collision).append("=\"").append(collision).append("\" ");    }  } catch (  Exception e) {    e.printStackTrace();  } finally {    if (scanner != null) {      scanner.close();    }  }}  }
class C{  public void downloadImageToFileSystem(String file,SuccessCallback<Image> onSuccess,boolean useCache){  downloadImageToFileSystem(file,onSuccess,new CallbackAdapter<Image>(),useCache);}  }
class C{  public User(final String username){  this.username=username;}  }
class C{  private void initSpikeResponderType(){  List<SpikeResponder> srList=SpikeResponder.getResponderList(synapseList);  boolean consistent=srList.size() == synapseList.size();  if (!consistent || !NetworkUtils.isConsistent(srList,SpikeResponder.class,"getType")) {    cbResponderType.addItem(SimbrainConstants.NULL_STRING);    cbResponderType.setSelectedIndex(cbResponderType.getItemCount() - 1);    spikeResponderPanel=new EmptySpikeResponsePanel();  } else {    String spikeResponderName=srList.get(0).getDescription();    spikeResponderPanel=AbstractSpikeResponsePanel.RESPONDER_MAP.get(spikeResponderName).deepCopy();    spikeResponderPanel.fillFieldValues(srList);    cbResponderType.setSelectedItem(spikeResponderName);  }}  }
class C{  public CommandAPDU(int cla,int ins,int p1,int p2,byte[] data,int dataOffset,int dataLength){  this(cla,ins,p1,p2,data,dataOffset,dataLength,0);}  }
class C{  @Override public MemBufferHolder<NonVolatileMemAllocator> createBuffer(long size,boolean autoreclaim){  MemBufferHolder<NonVolatileMemAllocator> ret=null;  ByteBuffer bb=m_nvmasvc.createByteBuffer(m_nid,size);  if (null == bb && m_activegc) {    m_bufcollector.waitReclaimCoolDown(m_gctimeout);    bb=m_nvmasvc.createByteBuffer(m_nid,size);  }  if (null != bb) {    ret=new MemBufferHolder<NonVolatileMemAllocator>(this,bb);    ret.setCollector(m_bufcollector);    if (autoreclaim) {      m_bufcollector.register(ret);    }  }  return ret;}  }
class C{  public void sendList(){  if (listeners == null) {    return;  }  if (canBuildList) {    buildList(manager);  }  if (sysNameList.isEmpty()) {    return;  }  StringBuilder list=new StringBuilder("PRL");  for (  String sysName : sysNameList) {    Route r=manager.getBySystemName(sysName);    list.append("]\\[" + sysName);    list.append("}|{");    if (r.getUserName() != null) {      list.append(r.getUserName());    }    list.append("}|{");    String turnoutsAlignedSensor=r.getTurnoutsAlignedSensor();    if (!turnoutsAlignedSensor.equals("")) {      try {        Sensor routeAligned=InstanceManager.sensorManagerInstance().provideSensor(turnoutsAlignedSensor);        list.append(routeAligned.getKnownState());      } catch (      IllegalArgumentException ex) {        log.warn("Failed to provide turnoutsAlignedSensor \"{}\" in sendList",turnoutsAlignedSensor);      }    }  }  String message=list.toString();  for (  ControllerInterface listener : listeners) {    listener.sendPacketToDevice(message);  }}  }
class C{  @Override public void connect(SocketAddress endpoint) throws IOException {  super.connect(endpoint);  init();}  }
class C{  public void zoneRollback(URI exportGroupURI,String contextKey,String taskId) throws DeviceControllerException {  _networkDeviceController.zoneRollback(exportGroupURI,contextKey,taskId);}  }
class C{  public boolean isNamespaceAware(){  return parser.mIsNSAware;}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  AllowAction(ModeUsage modeUsage){  super(modeUsage);}  }
class C{  public long readUnsignedLongToLong(){  long result=readLong();  if (result < 0) {    throw new IllegalStateException("Top bit not zero: " + result);  }  return result;}  }
class C{  public static final double[] transposeTimes(final double[][] m1,final double[] v2){  final int columndimension=getColumnDimensionality(m1);  assert (v2.length == m1.length) : ERR_MATRIX_INNERDIM;  final double[] re=new double[columndimension];  for (int i=0; i < columndimension; i++) {    double s=0;    for (int k=0; k < m1.length; k++) {      s+=m1[k][i] * v2[k];    }    re[i]=s;  }  return re;}  }
class C{  public String filterTipText(){  return "The filter to be used.";}  }
class C{  public SyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  super(fixNoHttpResponseException,httpPort,httpsPort);}  }
class C{  public static <T>T buildComponent(Class<T> componentClass,Object... dependencies){  buildMethodsCache(componentClass);  String fqn=componentClass.getName();  String packageName=componentClass.getPackage().getName();  String simpleName=fqn.substring(packageName.length() + 1);  String generatedName=(packageName + ".Dagger" + simpleName).replace('$','_');  try {    Class<?> generatedClass=Class.forName(generatedName);    Object builder=generatedClass.getMethod("builder").invoke(null);    for (    Method method : builder.getClass().getMethods()) {      Class<?>[] params=method.getParameterTypes();      if (params.length == 1) {        Class<?> dependencyClass=params[0];        for (        Object dependency : dependencies) {          if (dependencyClass.isAssignableFrom(dependency.getClass())) {            method.invoke(builder,dependency);            break;          }        }      }    }    return (T)builder.getClass().getMethod("build").invoke(builder);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  protected void onReleaseResources(List<T> datas){}  }
class C{  private void moveSubtree(int n,double o){  Edge e;  Node r=m_groups[n].m_p;  for (int noa=0; (e=r.getChild(noa)) != null; noa++) {    if (e.getTarget().getParent(0) == e) {      e.getTarget().adjustCenter(o);    }  }  m_groups[n].m_left+=o;  m_groups[n].m_right+=o;  if (m_groups[n].m_start != -1) {    for (int noa=m_groups[n].m_start; noa <= m_groups[n].m_end; noa++) {      moveSubtree(noa,o);    }  }}  }
class C{  @Override public final void addBezierCurveC(final float x,final float y,final float x2,final float y2,final float x3,final float y3){  elements.add(new CubicCurveTo(x,y,x2,y2,x3,y3));  currentPos[0]=x3;  currentPos[1]=y3;}  }
class C{  static void addTopLevelWindow(Component c){  Container parent;  if (c == null) {    return;  }  if (!(c instanceof Window)) {    addTopLevelWindow(c.getParent());    return;  }  if ((c instanceof Dialog) || (c instanceof Window)) {    parent=(Container)c;  } else {    parent=c.getParent();    if (parent != null) {      addTopLevelWindow(parent);      return;    }  }  if (parent == null) {    parent=(Container)c;  }synchronized (topLevelWindows) {    if ((parent != null) && !topLevelWindows.contains(parent)) {      topLevelWindows.addElement(parent);      if (topLevelWindowListener != null) {        topLevelWindowListener.topLevelWindowCreated((Window)parent);      }    }  }}  }
class C{  protected void destroyEntry(HashEntry entry){  entry.next=null;  entry.key=null;  entry.value=null;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ZipShort(byte[] bytes){  this(bytes,0);}  }
class C{  public String typeName(){  return "nameandtype";}  }
class C{  private void populateLastCollectionTimeFromPersistenceStore(SingleResourceStatsCollectionTaskState currentState,ComputeStatsRequest computeStatsRequest,URI patchUri,List<String> tenantLinks){  String statsAdapterLink=getAdapterLinkFromURI(patchUri);  String lastSuccessfulRunMetricKey=getLastCollectionMetricKeyForAdapterLink(statsAdapterLink,false);  String metricSelfLink=StatsUtil.getMetricKey(currentState.computeLink,lastSuccessfulRunMetricKey);  Query.Builder builder=Query.Builder.create();  builder.addKindFieldClause(ResourceMetric.class);  builder.addFieldClause(ServiceDocument.FIELD_NAME_SELF_LINK,UriUtils.buildUriPath(ResourceMetricService.FACTORY_LINK,metricSelfLink));  QueryTask task=QueryTask.Builder.createDirectTask().addOption(QueryOption.BROADCAST).addOption(QueryOption.EXPAND_CONTENT).setQuery(builder.build()).build();  task.tenantLinks=tenantLinks;  Operation.createPost(getHost(),ServiceUriPaths.CORE_QUERY_TASKS).setBody(task).setConnectionSharing(true).setCompletion(null).sendWith(this);}  }
class C{  public static void registerHandler(Handler target,int what){  mHandlers.put(target,what);}  }
class C{  private synchronized final void reset(SimState state){  state.schedule.reset();  resetQueues();}  }
class C{  private void deselectSpan(){  final HighlightedClickableSpan selectedSpan=highlightedClickableSpan;  if (selectedSpan != null && selectedSpan.isSelected()) {    selectedSpan.select(false);    highlightedClickableSpan=null;    invalidate();  }}  }
class C{  public IllegalReceiveException(String msg){  super(msg);}  }
class C{  public void addLayoutComponent(String name,Component comp){}  }
class C{  public void testClassicTokenizer() throws Exception {  Reader reader=new StringReader("What's this thing do?");  Tokenizer stream=tokenizerFactory("Classic").create(newAttributeFactory());  stream.setReader(reader);  assertTokenStreamContents(stream,new String[]{"What's","this","thing","do"});}  }
class C{  public static void initQualityFormatFlag(CFlags flags){  final Flag qualFormatFlag=flags.registerOptional('q',QUALITY_FLAG,String.class,"FORMAT","format of quality data for fastq files (use sanger for Illumina 1.8+)").setCategory(CommonFlagCategories.INPUT_OUTPUT);  qualFormatFlag.setParameterRange(QUALITY_FORMAT_OPTIONS);}  }
class C{  ProblemBuilder withProblem(String problemName){  this.problemName=problemName;  this.problemClass=null;  return this;}  }
class C{  public void applyParams(){  mVertexShader.setColor(mColor);  mVertexShader.setTime(mTime);  mVertexShader.applyParams();  mFragmentShader.setColorInfluence(mColorInfluence);  mFragmentShader.applyParams();}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TENUM___GET_TYPE_VARS:    return getTypeVars();}return super.eInvoke(operationID,arguments);}  }
class C{  private void actionAcctSchema(){  KeyNamePair kp=(KeyNamePair)selAcctSchema.getSelectedItem();  if (kp == null)   return;  m_data.C_AcctSchema_ID=kp.getKey();  m_data.ASchema=MAcctSchema.get(Env.getCtx(),m_data.C_AcctSchema_ID);  log.info(m_data.ASchema.toString());  sortBy1.removeAllItems();  sortBy2.removeAllItems();  sortBy3.removeAllItems();  sortBy4.removeAllItems();  sortAddItem(new ValueNamePair("",""));  sortAddItem(new ValueNamePair("DateAcct",Msg.translate(Env.getCtx(),"DateAcct")));  sortAddItem(new ValueNamePair("DateTrx",Msg.translate(Env.getCtx(),"DateTrx")));  sortAddItem(new ValueNamePair("C_Period_ID",Msg.translate(Env.getCtx(),"C_Period_ID")));  CLabel[] labels=new CLabel[]{lsel1,lsel2,lsel3,lsel4,lsel5,lsel6,lsel7,lsel8};  CButton[] buttons=new CButton[]{sel1,sel2,sel3,sel4,sel5,sel6,sel7,sel8};  int selectionIndex=0;  MAcctSchemaElement[] elements=m_data.ASchema.getAcctSchemaElements();  for (int i=0; i < elements.length && selectionIndex < labels.length; i++) {    MAcctSchemaElement acctSchemaElement=elements[i];    String columnName=acctSchemaElement.getColumnName();    String displayColumnName=acctSchemaElement.getDisplayColumnName();    if (columnName.equals("User1_ID") || columnName.equals("User2_ID"))     displayColumnName=acctSchemaElement.getName(); else     displayColumnName=acctSchemaElement.getDisplayColumnName();    sortAddItem(new ValueNamePair(columnName,Msg.translate(Env.getCtx(),displayColumnName)));    if (!acctSchemaElement.isElementType(X_C_AcctSchema_Element.ELEMENTTYPE_Organization) && !acctSchemaElement.isElementType(X_C_AcctSchema_Element.ELEMENTTYPE_Account)) {      labels[selectionIndex].setText(Msg.translate(Env.getCtx(),displayColumnName));      labels[selectionIndex].setVisible(true);      buttons[selectionIndex].setActionCommand(columnName);      buttons[selectionIndex].addActionListener(this);      buttons[selectionIndex].setIcon(m_iFind);      buttons[selectionIndex].setText("");      buttons[selectionIndex].setVisible(true);      selectionIndex++;    }  }  while (selectionIndex < labels.length) {    labels[selectionIndex].setVisible(false);    buttons[selectionIndex++].setVisible(false);  }}  }
class C{  private static char[] yy_unpack_cmap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 86) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void invoke(RemoteCall call) throws Exception {  try {    clientRefLog.log(Log.VERBOSE,"execute call");    call.executeCall();  } catch (  RemoteException e) {    clientRefLog.log(Log.BRIEF,"exception: ",e);    free(call,false);    throw e;  }catch (  Error e) {    clientRefLog.log(Log.BRIEF,"error: ",e);    free(call,false);    throw e;  }catch (  RuntimeException e) {    clientRefLog.log(Log.BRIEF,"exception: ",e);    free(call,false);    throw e;  }catch (  Exception e) {    clientRefLog.log(Log.BRIEF,"exception: ",e);    free(call,true);    throw e;  }}  }
class C{  public boolean isFailSilently(){  return failSilently;}  }
class C{  public String process(final String content){  if (isEmpty(content)) {    return StringUtils.EMPTY;  }  try {synchronized (this) {      return engineInitializer.get().eval(buildUpdateScript(content)).toString();    }  } catch (  final ScriptException e) {    throw new WroRuntimeException(e.getMessage(),e);  }}  }
class C{  public AcceptSecContextToken(Krb5Context context,KrbApReq apReq) throws KrbException, IOException, GSSException {  boolean useSubkey=AccessController.doPrivileged(new GetBooleanAction("sun.security.krb5.acceptor.subkey"));  boolean useSequenceNumber=true;  EncryptionKey subKey=null;  if (useSubkey) {    subKey=new EncryptionKey(apReq.getCreds().getSessionKey());    context.setKey(Krb5Context.ACCEPTOR_SUBKEY,subKey);  }  apRep=new KrbApRep(apReq,useSequenceNumber,subKey);  context.resetMySequenceNumber(apRep.getSeqNumber().intValue());}  }
class C{  public PaintCellRenderer(){  panel=new JPanel();  panel.setOpaque(true);}  }
class C{  public void ignoreTrailingBlanks(boolean t){  this.ignoreTrailingBlanks=t;}  }
class C{  private void validate(InputNode node,LabelMap map,Object source) throws Exception {  Class expect=context.getType(type,source);  Position line=node.getPosition();  for (  Label label : map) {    if (label.isRequired() && revision.isEqual()) {      throw new ValueRequiredException("Unable to satisfy %s for %s at %s",label,expect,line);    }    Object value=label.getEmpty(context);    if (value != null) {      criteria.set(label,value);    }  }}  }
class C{  public String toString(){  StringBuilder sb=new StringBuilder();  for (int r=0; r <= MaxR; r++) {    for (int c=0; c <= MaxC; c++) {      if (board[r][c] == EmptyMark) {        sb.append(' ');      } else {        sb.append(board[r][c]);      }    }    sb.append('\n');  }  return sb.toString();}  }
class C{  private void initializeLiveAttributes(){  in=createLiveAnimatedString(null,SVG_IN_ATTRIBUTE);}  }
class C{  private static void validateRange(String name,Object value,Integer min,Integer max){  if (min != null) {    Validation.min(name,value,min);  }  if (max != null) {    Validation.max(name,value,max);  }}  }
class C{  public static final double labelCardinality(Instances D){  return labelCardinality(D,D.classIndex());}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().checkPCCode(getString(stack)));}  }
class C{  @Override public void processChallenge(final String challenge) throws MalformedChallengeException {  super.processChallenge(challenge);  if (getParameter("realm") == null) {    throw new MalformedChallengeException("missing realm in challange");  }  if (getParameter("nonce") == null) {    throw new MalformedChallengeException("missing nonce in challange");  }  boolean unsupportedQop=false;  final String qop=getParameter("qop");  if (qop != null) {    final StringTokenizer tok=new StringTokenizer(qop,",");    while (tok.hasMoreTokens()) {      final String variant=tok.nextToken().trim();      if (variant.equals("auth")) {        qopVariant=QOP_AUTH;        break;      } else       if (variant.equals("auth-int")) {        qopVariant=QOP_AUTH_INT;      } else {        unsupportedQop=true;        LOG.warn("Unsupported qop detected: " + variant);      }    }  }  if (unsupportedQop && (qopVariant == QOP_MISSING)) {    throw new MalformedChallengeException("None of the qop methods is supported");  }  cnonce=createCnonce();  complete=true;}  }
class C{  public GridAtomicInteger(int initVal){  super(initVal);}  }
class C{  public final void debug(Object message){  if (isLevelEnabled(SimpleLog.LOG_LEVEL_DEBUG)) {    log(SimpleLog.LOG_LEVEL_DEBUG,message,null);  }}  }
class C{  public DefinitionRecord(String ns,String ln,XBLOMDefinitionElement def,XBLOMTemplateElement t,Element imp){  namespaceURI=ns;  localName=ln;  definition=def;  template=t;  importElement=imp;}  }
class C{  private boolean isDateTimeValueParameterSpecialCase(VCardDataType defaultDataType,VCardDataType dataType){  return defaultDataType == VCardDataType.DATE_AND_OR_TIME && (dataType == VCardDataType.DATE || dataType == VCardDataType.DATE_TIME || dataType == VCardDataType.TIME);}  }
class C{  public void onFailure(IMqttToken token,Throwable exception){  int numberOfURIs=comms.getNetworkModules().length;  int index=comms.getNetworkModuleIndex();  if ((index + 1) < numberOfURIs || (originalMqttVersion == MqttConnectOptions.MQTT_VERSION_DEFAULT && options.getMqttVersion() == MqttConnectOptions.MQTT_VERSION_3_1_1)) {    if (originalMqttVersion == MqttConnectOptions.MQTT_VERSION_DEFAULT) {      if (options.getMqttVersion() == MqttConnectOptions.MQTT_VERSION_3_1_1) {        options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1);      } else {        options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_3_1_1);        comms.setNetworkModuleIndex(index + 1);      }    } else {      comms.setNetworkModuleIndex(index + 1);    }    try {      connect();    } catch (    MqttPersistenceException e) {      onFailure(token,e);    }  } else {    if (originalMqttVersion == MqttConnectOptions.MQTT_VERSION_DEFAULT) {      options.setMqttVersion(MqttConnectOptions.MQTT_VERSION_DEFAULT);    }    MqttException ex;    if (exception instanceof MqttException) {      ex=(MqttException)exception;    } else {      ex=new MqttException(exception);    }    userToken.internalTok.markComplete(null,ex);    userToken.internalTok.notifyComplete();    userToken.internalTok.setClient(this.client);    if (userCallback != null) {      userToken.setUserContext(userContext);      userCallback.onFailure(userToken,exception);    }  }}  }
class C{  public synchronized void collectiveUpdated(ContributionBox peer){  if (peer == null)   return;  lastPeer=peer;  Collection commands=DRM.getCommands();  int oldSize=executedCommands.size();synchronized (commands) {    Iterator i=commands.iterator();    while (i.hasNext()) {      Object o=i.next();      if ((o instanceof NodeCommand) && !executedCommands.contains(o)) {        executedCommands.add(o);      }    }  }  commands=null;  for (int i=oldSize; i < executedCommands.size(); ++i) {    invokeCommandLocally((NodeCommand)executedCommands.get(i));  }  while (executedCommands.size() > Collective.MAX_COMMANDS_SIZE)   executedCommands.remove(0);}  }
class C{  public void testGetConfDir(){  String expected=this.fileHandler.append(CONFIGURATION_HOME,"conf");  assertEquals(expected,this.container.getConfDir(this.container.getConfiguration().getPropertyValue(JBossPropertySet.CONFIGURATION)));}  }
class C{  protected void processVmMigrate(SimEvent ev,boolean ack){  Object tmp=ev.getData();  if (!(tmp instanceof Map<?,?>)) {    throw new ClassCastException("The data object must be Map<String, Object>");  }  @SuppressWarnings("unchecked") Map<String,Object> migrate=(HashMap<String,Object>)tmp;  Vm vm=(Vm)migrate.get("vm");  Host host=(Host)migrate.get("host");  getVmAllocationPolicy().deallocateHostForVm(vm);  host.removeMigratingInVm(vm);  boolean result=getVmAllocationPolicy().allocateHostForVm(vm,host);  if (!result) {    Log.printLine("[Datacenter.processVmMigrate] VM allocation to the destination host failed");    System.exit(0);  }  if (ack) {    int[] data=new int[3];    data[0]=getId();    data[1]=vm.getId();    if (result) {      data[2]=CloudSimTags.TRUE;    } else {      data[2]=CloudSimTags.FALSE;    }    sendNow(ev.getSource(),CloudSimTags.VM_CREATE_ACK,data);  }  Log.formatLine("%.2f: Migration of VM #%d to Host #%d is completed",CloudSim.clock(),vm.getId(),host.getId());  vm.setInMigration(false);}  }
class C{  public static boolean equals(char[] array1,char[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  public static long Extend(long fp,char[] chars,int start,int len){  final long[] mod=ByteModTable_7;  int end=start + len;  for (int i=start; i < end; i++) {    fp=((fp >>> 8) ^ (mod[(((int)chars[i]) ^ ((int)fp)) & 0xFF]));  }  return fp;}  }
class C{  public static String[] toHeaders(Map<String,String> headers){  String[] result=null;  if (headers != null && !headers.isEmpty()) {    result=new String[headers.size()];    int i=0;    for (    Map.Entry<String,String> h : headers.entrySet()) {      result[i++]=h.getKey() + ": " + h.getValue();    }  }  return result;}  }
class C{  public static boolean[] trimToCapacity(boolean[] array,int maxCapacity){  if (array.length > maxCapacity) {    boolean oldArray[]=array;    array=new boolean[maxCapacity];    System.arraycopy(oldArray,0,array,0,maxCapacity);  }  return array;}  }
class C{  public Shape createStrokedShape(Shape s){  sun.java2d.pipe.RenderingEngine re=sun.java2d.pipe.RenderingEngine.getInstance();  return re.createStrokedShape(s,width,cap,join,miterlimit,dash,dash_phase);}  }
class C{  public void createServer(VM server,boolean accessor){  createServer(server,0,accessor,0);}  }
class C{  @Override public Cursor swapCursor(Cursor newCursor){  mAlphabetIndexer.setCursor(newCursor);  return super.swapCursor(newCursor);}  }
class C{  public void parse(int samples) throws Exception {  boolean headlineFound=false;  int datalineCount=0;  String[] lines=output.split(Utils.NEW_LINE);  for (  String line : lines) {    line=line.replaceAll("\\s+"," ").trim();    String[] valueArray=line.split(" ");    if (!headlineFound) {      headlineFound=GcStatistics.isHeadline(valueArray);      continue;    }    GcStatistics.verify(valueArray);    datalineCount++;  }  assertTrue(headlineFound,"No or invalid headline found, expected: " + Utils.NEW_LINE + Arrays.toString(GcStatistics.values()).replaceAll(","," "));  assertEquals(samples,datalineCount,"Expected " + samples + " samples, got "+ datalineCount);}  }
class C{  @Ignore @Test public void testParallelism() throws Exception {  Config conf=new Config();  conf.setNumWorkers(2);  TopologyBuilder topologyBuilder=new TopologyBuilder();  topologyBuilder.setSpout("blue-spout",new BlueSpout(),2);  topologyBuilder.setBolt("green-bolt",new GreenBolt(),2).setNumTasks(4).shuffleGrouping("blue-spout");  topologyBuilder.setBolt("yellow-bolt",new YellowBolt(),6).shuffleGrouping("green-bolt");  LocalCluster cluster=new LocalCluster();  cluster.submitTopology("mytopology",new HashMap(),topologyBuilder.createTopology());  while (true) {    try {      Thread.sleep(1000);    } catch (    Exception e) {      e.printStackTrace();    }  }}  }
class C{  public void preclose(){  preclosed=true;}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append("SingleResponse:  \n");  sb.append(certId);  sb.append("\nCertStatus: " + certStatus + "\n");  if (certStatus == CertStatus.REVOKED) {    sb.append("revocationTime is " + revocationTime + "\n");    sb.append("revocationReason is " + revocationReason + "\n");  }  sb.append("thisUpdate is " + thisUpdate + "\n");  if (nextUpdate != null) {    sb.append("nextUpdate is " + nextUpdate + "\n");  }  return sb.toString();}  }
class C{  @Deprecated public Spider(ExtensionSpider extension,SpiderParam spiderParam,ConnectionParam connectionParam,Model model,Context scanContext){  this("?",extension,spiderParam,connectionParam,model,scanContext);}  }
class C{  private static void reverseDisplay(int value){  if (value < 10)   System.out.println(value); else {    System.out.print(value % 10);    reverseDisplay(value / 10);  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  @Override public void input(Object input,Network network){  if (!isEnabled()) {    return;  }  try {    if (input instanceof Post) {      Post post=(Post)input;      log("Processing post",Bot.FINE,post.getCaption(),post.getId());      if ((System.currentTimeMillis() - post.getCreatedTime().getTime()) > DAY) {        log("Day old post",Bot.FINE,post.getId(),post.getCreatedTime().getTime());        return;      }      if (this.processedPosts.contains(post.getId())) {        log("Already processed post",Bot.FINE,post.getCaption(),post.getMessage(),post.getId());        return;      }      this.processedPosts.add(post.getId());      String name=post.getFrom() == null ? "anonymous" : post.getFrom().getName();      String message=post.getMessage();      if (message == null || message.isEmpty()) {        message=post.getCaption();      }      if (message == null || message.isEmpty()) {        log("Empty post",Bot.FINE,post.getCaption(),post.getMessage(),post.getId());        return;      }      String text=message.trim();      log("Input post",Level.FINE,post.getMessage(),name);      this.postsProcessed++;      String target=null;      if (this.wallPosts.contains(post.getId())) {        target=this.userName;      }      inputSentence(text,name,target,post.getId(),post.getCreatedTime().getTime(),network);    } else     if (input instanceof Comment) {      Comment comment=(Comment)input;      log("Processing post comment",Bot.FINE,comment.getMessage(),comment.getId());      if ((System.currentTimeMillis() - comment.getCreatedTime().getTime()) > DAY) {        log("Day old post commentt",Bot.FINE,comment.getId(),comment.getCreatedTime().getTime());        return;      }      if (this.processedPosts.contains(comment)) {        log("Already processed post comment",Bot.FINE,comment.getMessage(),comment.getId());        return;      }      this.processedPosts.add(comment.getId());      String name=comment.getFrom() == null ? "anonymous" : comment.getFrom().getName();      String text=comment.getMessage().trim();      log("Input post comment",Level.FINE,comment.getMessage(),name);      this.postsProcessed++;      String id=comment.getId();      if (comment.getParent() != null) {        id=comment.getParent().getId();      }      inputSentence(text,name,this.userName,id,comment.getCreatedTime().getTime(),network);    }  } catch (  Exception exception) {    log(exception);  }}  }
class C{  public boolean isWildcard(){  return getValueExpression().isWildcard();}  }
class C{  public ElementIterator(Element root){  this.root=root;}  }
class C{  private TrustAnchor findTrustAnchorBySubjectAndPublicKey(X509Certificate cert){  TrustAnchor trustAnchor=trustedCertificateIndex.findBySubjectAndPublicKey(cert);  if (trustAnchor != null) {    return trustAnchor;  }  if (trustedCertificateStore == null) {    return null;  }  if (trustedCertificateStore.isTrustAnchor(cert)) {    return trustedCertificateIndex.index(cert);  }  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypesPackage.ANNOTATABLE_ELEMENT__ANNOTATIONS:    getAnnotations().clear();  return;}super.eUnset(featureID);}  }
class C{  public void addTask(Future task){  taskSet.add(task);}  }
class C{  @Override public String globalInfo(){  return "A Conditional Dependency Trellis. Like CDN, but with a trellis structure (like CT) rather than a fully connected network." + "For more information see:\n" + getTechnicalInformation().toString();}  }
class C{  public WMSException(String message,String code){  super();  Message=message;  Code=code;  try {    DocumentBuilder builder=DocumentBuilderFactory.newInstance().newDocumentBuilder();    Document doc=builder.newDocument();    Element root=doc.createElement("ServiceExceptionReport");    root.setAttribute("version","1.1.0");    Element ex=doc.createElement("ServiceException");    ex.appendChild(doc.createTextNode(Message));    if (Code != null)     ex.setAttribute("code",Code);    root.appendChild(ex);    doc.appendChild(root);    StringWriter strWriter=new StringWriter();    Transformer tr=TransformerFactory.newInstance().newTransformer();    tr.setOutputProperty(OutputKeys.INDENT,"yes");    tr.setOutputProperty(OutputKeys.METHOD,"xml");    tr.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    tr.setOutputProperty(OutputKeys.VERSION,"1.0");    tr.setOutputProperty(OutputKeys.ENCODING,"UTF-8");    tr.transform(new DOMSource(doc),new StreamResult(strWriter));    this.XML=strWriter.toString();    strWriter.close();  } catch (  Exception ex) {    Debug.output("WMSException Internal Error !\n[");    ex.printStackTrace();    Debug.output("]");    this.XML=INTERNALERROR;  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:50.792 -0500",hash_original_method="297E5C10002C80959BC209EA8C0A1D06",hash_generated_method="D969800986D3E41FCEFAFED18B3D4C66") private static boolean startSystemServer() throws MethodAndArgsCaller, RuntimeException {  String args[]={"--setuid=1000","--setgid=1000","--setgroups=1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1018,3001,3002,3003,3006,3007","--capabilities=130104352,130104352","--runtime-init","--nice-name=system_server","com.android.server.SystemServer"};  ZygoteConnection.Arguments parsedArgs=null;  int pid;  try {    parsedArgs=new ZygoteConnection.Arguments(args);    ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);    ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);    pid=Zygote.forkSystemServer(parsedArgs.uid,parsedArgs.gid,parsedArgs.gids,parsedArgs.debugFlags,null,parsedArgs.permittedCapabilities,parsedArgs.effectiveCapabilities);  } catch (  IllegalArgumentException ex) {    throw new RuntimeException(ex);  }  if (pid == 0) {    handleSystemServerProcess(parsedArgs);  }  return true;}  }
class C{  public boolean reverseAccrualIt(){  log.info("reverseAccrualIt - " + toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return false;}  }
class C{  ZoneOffsetTransitionRule(Month month,int dayOfMonthIndicator,DayOfWeek dayOfWeek,LocalTime time,boolean timeEndOfDay,TimeDefinition timeDefnition,ZoneOffset standardOffset,ZoneOffset offsetBefore,ZoneOffset offsetAfter){  this.month=month;  this.dom=(byte)dayOfMonthIndicator;  this.dow=dayOfWeek;  this.time=time;  this.timeEndOfDay=timeEndOfDay;  this.timeDefinition=timeDefnition;  this.standardOffset=standardOffset;  this.offsetBefore=offsetBefore;  this.offsetAfter=offsetAfter;}  }
class C{  @Override public void onErrorResponse(VolleyError error){  showToast(error.getMessage());  Log.d("GsonRequest",error.getMessage());}  }
class C{  private byte[] maskGeneratorFunction1(byte[] Z,int zOff,int zLen,int length){  byte[] mask=new byte[length];  byte[] hashBuf=new byte[mgf1Hash.getDigestSize()];  byte[] C=new byte[4];  int counter=0;  mgf1Hash.reset();  while (counter < (length / hashBuf.length)) {    ItoOSP(counter,C);    mgf1Hash.update(Z,zOff,zLen);    mgf1Hash.update(C,0,C.length);    mgf1Hash.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hashBuf.length,hashBuf.length);    counter++;  }  if ((counter * hashBuf.length) < length) {    ItoOSP(counter,C);    mgf1Hash.update(Z,zOff,zLen);    mgf1Hash.update(C,0,C.length);    mgf1Hash.doFinal(hashBuf,0);    System.arraycopy(hashBuf,0,mask,counter * hashBuf.length,mask.length - (counter * hashBuf.length));  }  return mask;}  }
class C{  private List<String> checkAndFilterAddEndpoints(Network network,List<String> endpoints){  List<String> addedEp=new ArrayList<String>();  if (endpoints != null) {    for (    String endpoint : endpoints) {      if (network.getEndpointsMap() == null || !network.getEndpointsMap().containsKey(endpoint)) {        if (network.getTransportType().equals(StorageProtocol.Transport.FC.name()) && !EndpointUtility.isValidEndpoint(endpoint,EndpointType.WWN)) {          throw APIException.badRequests.invalidEndpointExpectedFC(endpoint);        }        if (!network.getTransportType().equals(StorageProtocol.Transport.FC.name()) && EndpointUtility.isValidEndpoint(endpoint,EndpointType.WWN)) {          throw APIException.badRequests.invalidEndpointExpectedNonFC(endpoint);        }        addedEp.add(endpoint);      }    }    Map<String,Network> networkMap=NetworkAssociationHelper.getNetworksMap(addedEp,_dbClient);    checkNotAddingDiscoveredEndpoints(networkMap,network);    checkEndPointsForExports(networkMap.keySet());    handleRemoveFromOldNetworks(networkMap,network);  }  return addedEp;}  }
class C{  public SourcePosition(File file,JCTree sourceElement,int startLine,int startColumn,int endLine,int endColumn){  super();  this.file=file;  this.startPosition=new Position(startLine,startColumn);  this.endPosition=new Position(endLine,endColumn);  this.sourceElement=sourceElement;}  }
class C{  public void unhighlight(OMGraphic omg){}  }
class C{  public static void addURL(URL u) throws IOException {  if (!(ClassLoader.getSystemClassLoader() instanceof URLClassLoader)) {    return;  }  URLClassLoader sysLoader=(URLClassLoader)ClassLoader.getSystemClassLoader();  URL[] urls=sysLoader.getURLs();  for (int i=0; i < urls.length; i++) {    if (StringUtils.equalsIgnoreCase(urls[i].toString(),u.toString())) {      if (log.isDebugEnabled()) {        log.debug("URL " + u + " is already in the CLASSPATH");      }      return;    }  }  Class<URLClassLoader> sysclass=URLClassLoader.class;  try {    Method method=sysclass.getDeclaredMethod("addURL",parameters);    method.setAccessible(true);    method.invoke(sysLoader,new Object[]{u});  } catch (  Throwable t) {    t.printStackTrace();    throw new IOException("Error, could not add URL to system classloader");  }}  }
class C{  private static long CallLongMethodV(JNIEnvironment env,int objJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallLongMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Long,false);    return Reflection.unwrapLong(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  protected int processPath(int source,int sink){  int increment=Integer.MAX_VALUE;  int v=sink;  while (previous[v] != -1) {    int unit=capacity[previous[v]][v] - flow[previous[v]][v];    if (unit < increment) {      increment=unit;    }    v=previous[v];  }  v=sink;  while (previous[v] != -1) {    flow[previous[v]][v]+=increment;    flow[v][previous[v]]-=increment;    v=previous[v];  }  return increment;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.169 -0400",hash_original_method="7D51B5398616853043F614A681821157",hash_generated_method="F39B23A87C07499AAE06B433F9702026") public static double random(){  return Math.random();}  }
class C{  public IntParameter(OptionID optionID){  super(optionID);}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  m_inCData=false;}  }
class C{  public static Cache.Entry makeRandomCacheEntry(byte[] data,boolean isExpired,boolean needsRefresh){  Random random=new Random();  Cache.Entry entry=new Cache.Entry();  if (data != null) {    entry.data=data;  } else {    entry.data=new byte[random.nextInt(1024)];  }  entry.etag=String.valueOf(random.nextLong());  entry.lastModified=random.nextLong();  entry.ttl=isExpired ? 0 : Long.MAX_VALUE;  entry.softTtl=needsRefresh ? 0 : Long.MAX_VALUE;  return entry;}  }
class C{  public void testGetKeyLength(){  char[] password=new char[]{'1','2','3','4','5'};  byte[] salt=new byte[]{1,2,3,4,5};  int iterationCount=10;  int keyLength=10;  PBEKeySpec pbeks=new PBEKeySpec(password,salt,iterationCount,keyLength);  assertTrue("The returned keyLength is not equal to the value specified " + "in the constructor.",pbeks.getKeyLength() == keyLength);  pbeks=new PBEKeySpec(password);  assertTrue("The getKeyLength() method should return 0 " + "if the keyLength is not specified.",pbeks.getKeyLength() == 0);}  }
class C{  public String type(){  return this.type;}  }
class C{  public void runWarrant(int RunMode){  setRoute(0,null);  setRunMode(RunMode,null,null,null,false);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:35.214 -0500",hash_original_method="86830002AFDFBC8C0790A0C80E395F68",hash_generated_method="5BBC0ADA5FC6500FBA53DE1267B5D0C6") public boolean hideSubMenus(){  if (mActionButtonPopup != null) {    mActionButtonPopup.dismiss();    return true;  }  return false;}  }
class C{  public static String[] parsePath(String path) throws CharacterCodingException {  return parsePath(path,true);}  }
class C{  public static CipherParameters makePBEParameters(BCPBEKey pbeKey,AlgorithmParameterSpec spec,String targetAlgorithm){  if ((spec == null) || !(spec instanceof PBEParameterSpec)) {    throw new IllegalArgumentException("Need a PBEParameter spec with a PBE key.");  }  PBEParameterSpec pbeParam=(PBEParameterSpec)spec;  PBEParametersGenerator generator=makePBEGenerator(pbeKey.getType(),pbeKey.getDigest());  byte[] key=pbeKey.getEncoded();  CipherParameters param;  if (pbeKey.shouldTryWrongPKCS12()) {    key=new byte[2];  }  generator.init(key,pbeParam.getSalt(),pbeParam.getIterationCount());  if (pbeKey.getIvSize() != 0) {    param=generator.generateDerivedParameters(pbeKey.getKeySize(),pbeKey.getIvSize());  } else {    param=generator.generateDerivedParameters(pbeKey.getKeySize());  }  if (targetAlgorithm.startsWith("DES")) {    if (param instanceof ParametersWithIV) {      KeyParameter kParam=(KeyParameter)((ParametersWithIV)param).getParameters();      DESParameters.setOddParity(kParam.getKey());    } else {      KeyParameter kParam=(KeyParameter)param;      DESParameters.setOddParity(kParam.getKey());    }  }  for (int i=0; i != key.length; i++) {    key[i]=0;  }  return param;}  }
class C{  public Rental(){  super();}  }
class C{  @Bean @Profile("!" + Constants.SPRING_PROFILE_FAST) public Docket swaggerSpringfoxDocket(JHipsterProperties jHipsterProperties){  log.debug("Starting Swagger");  StopWatch watch=new StopWatch();  watch.start();  ApiInfo apiInfo=new ApiInfo(jHipsterProperties.getSwagger().getTitle(),jHipsterProperties.getSwagger().getDescription(),jHipsterProperties.getSwagger().getVersion(),jHipsterProperties.getSwagger().getTermsOfServiceUrl(),jHipsterProperties.getSwagger().getContact(),jHipsterProperties.getSwagger().getLicense(),jHipsterProperties.getSwagger().getLicenseUrl());  Docket docket=new Docket(DocumentationType.SWAGGER_2).apiInfo(apiInfo).genericModelSubstitutes(ResponseEntity.class).forCodeGeneration(true).genericModelSubstitutes(ResponseEntity.class).ignoredParameterTypes(Pageable.class).directModelSubstitute(java.time.LocalDate.class,String.class).directModelSubstitute(java.time.ZonedDateTime.class,Date.class).directModelSubstitute(java.time.LocalDateTime.class,Date.class).select().paths(regex(DEFAULT_INCLUDE_PATTERN)).build();  watch.stop();  log.debug("Started Swagger in {} ms",watch.getTotalTimeMillis());  return docket;}  }
class C{  public static InputStream toInputStream(String input,Charset encoding){  return new ByteArrayInputStream(StringCodingUtils.getBytes(input,Charsets.toCharset(encoding)));}  }
class C{  public void testDescriptorCopy(){  SegmentDescriptor descriptor=SegmentDescriptor.builder().withId(2).withVersion(3).withIndex(1025).withMaxSegmentSize(1024 * 1024).withMaxEntries(2048).build();  long time=System.currentTimeMillis();  descriptor.update(time);  descriptor.lock();  descriptor=descriptor.copyTo(FileBuffer.allocate(file,SegmentDescriptor.BYTES));  Assert.assertEquals(descriptor.id(),2);  Assert.assertEquals(descriptor.version(),3);  Assert.assertEquals(descriptor.index(),1025);  Assert.assertEquals(descriptor.maxSegmentSize(),1024 * 1024);  Assert.assertEquals(descriptor.maxEntries(),2048);  Assert.assertEquals(descriptor.updated(),time);  Assert.assertTrue(descriptor.locked());}  }
class C{  public LuaValue play(U audio,Varargs varargs){  final String uriOrName=LuaUtil.getString(varargs,2);  final Integer loopTimes=LuaUtil.getInt(varargs,2,3);  return audio.play(uriOrName,loopTimes);}  }
class C{  private static String generatePath(NameParser nameParser){  String name=nameParser.getOriginalName();  String s=name;  int colonAt=name.indexOf(':');  if (colonAt > 1 && !name.startsWith("Actions for")) {    if (name.charAt(colonAt + 1) == ' ')     s=name.substring(colonAt + 2);  } else   if (name.indexOf('.') > -1 && name.charAt(0) != '<') {    s=nameParser.recombine();  } else {    s="";  }  return s.trim();}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  public RequestLine parseRequestLine(final CharArrayBuffer buffer,final ParserCursor cursor) throws ParseException {  if (buffer == null) {    throw new IllegalArgumentException("Char array buffer may not be null");  }  if (cursor == null) {    throw new IllegalArgumentException("Parser cursor may not be null");  }  int indexFrom=cursor.getPos();  int indexTo=cursor.getUpperBound();  try {    skipWhitespace(buffer,cursor);    int i=cursor.getPos();    int blank=buffer.indexOf(' ',i,indexTo);    if (blank < 0) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    String method=buffer.substringTrimmed(i,blank);    cursor.updatePos(blank);    skipWhitespace(buffer,cursor);    i=cursor.getPos();    blank=buffer.indexOf(' ',i,indexTo);    if (blank < 0) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    String uri=buffer.substringTrimmed(i,blank);    cursor.updatePos(blank);    ProtocolVersion ver=parseProtocolVersion(buffer,cursor);    skipWhitespace(buffer,cursor);    if (!cursor.atEnd()) {      throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));    }    return createRequestLine(method,uri,ver);  } catch (  IndexOutOfBoundsException e) {    throw new ParseException("Invalid request line: " + buffer.substring(indexFrom,indexTo));  }}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  public static void scheduleMutator(Schedulable item){  model.scheduleMutator(item);}  }
class C{  static void notifcation(Context context,String messageString,Intent intent,int notificationTitle){  String ns=Context.NOTIFICATION_SERVICE;  NotificationManager mNotificationManager=(NotificationManager)context.getSystemService(ns);  Calendar.getInstance().getTime().toString();  long when=System.currentTimeMillis();  CharSequence contentTitle=context.getString(notificationTitle);  String ticker=contentTitle + " " + messageString;  PendingIntent pendingIntent=PendingIntent.getActivity(context,0,intent,0);  Builder notificationCompat=new Builder(context);  notificationCompat.setAutoCancel(true).setContentTitle(contentTitle).setContentIntent(pendingIntent).setContentText(messageString).setTicker(ticker).setWhen(when).setSmallIcon(R.mipmap.ic_launcher);  Notification notification=notificationCompat.build();  mNotificationManager.notify(MessageID,notification);  MessageID++;}  }
class C{  public static float ulp(final float value){  if (USE_JDK_MATH) {    return Math.ulp(value);  }  final int exponent=getExponent(value);  if (exponent >= MIN_FLOAT_NORMAL_EXPONENT + 23) {    if (exponent == MAX_FLOAT_EXPONENT + 1) {      return Math.abs(value);    }    return Float.intBitsToFloat(exponent + MAX_FLOAT_EXPONENT - 23 << 23);  } else {    if (exponent == MIN_FLOAT_NORMAL_EXPONENT - 1) {      return Float.MIN_VALUE;    }    return Float.intBitsToFloat(1 << exponent - MIN_FLOAT_NORMAL_EXPONENT);  }}  }
class C{  public CF10(int numberOfVariables){  super(numberOfVariables,3,1);}  }
class C{  public byte[] encode(OdbcResponse msg){  assert msg != null;  BinaryWriterExImpl writer=marsh.writer(new BinaryHeapOutputStream(INIT_CAP));  writer.writeByte((byte)msg.status());  if (msg.status() != OdbcResponse.STATUS_SUCCESS) {    writer.writeString(msg.error());    return writer.array();  }  Object res0=msg.response();  if (res0 == null)   return writer.array();  if (res0 instanceof OdbcHandshakeResult) {    OdbcHandshakeResult res=(OdbcHandshakeResult)res0;    if (log.isDebugEnabled())     log.debug("Handshake result: " + (res.accepted() ? "accepted" : "rejected"));    verConfirmed=res.accepted();    if (res.accepted()) {      verConfirmed=true;      writer.writeBoolean(true);    } else {      writer.writeBoolean(false);      writer.writeString(res.protocolVersionSince());      writer.writeString(res.currentVersion());    }  } else   if (res0 instanceof OdbcQueryExecuteResult) {    OdbcQueryExecuteResult res=(OdbcQueryExecuteResult)res0;    if (log.isDebugEnabled())     log.debug("Resulting query ID: " + res.getQueryId());    writer.writeLong(res.getQueryId());    Collection<OdbcColumnMeta> metas=res.getColumnsMetadata();    assert metas != null;    writer.writeInt(metas.size());    for (    OdbcColumnMeta meta : metas)     meta.write(writer);  } else   if (res0 instanceof OdbcQueryFetchResult) {    OdbcQueryFetchResult res=(OdbcQueryFetchResult)res0;    if (log.isDebugEnabled())     log.debug("Resulting query ID: " + res.queryId());    writer.writeLong(res.queryId());    Collection<?> items0=res.items();    assert items0 != null;    writer.writeBoolean(res.last());    writer.writeInt(items0.size());    for (    Object row0 : items0) {      if (row0 != null) {        Collection<?> row=(Collection<?>)row0;        writer.writeInt(row.size());        for (        Object obj : row) {          if (obj instanceof java.sql.Timestamp)           writer.writeTimestamp((java.sql.Timestamp)obj); else           if (obj instanceof java.util.Date)           writer.writeDate((java.util.Date)obj); else           writer.writeObjectDetached(obj);        }      }    }  } else   if (res0 instanceof OdbcQueryCloseResult) {    OdbcQueryCloseResult res=(OdbcQueryCloseResult)res0;    if (log.isDebugEnabled())     log.debug("Resulting query ID: " + res.getQueryId());    writer.writeLong(res.getQueryId());  } else   if (res0 instanceof OdbcQueryGetColumnsMetaResult) {    OdbcQueryGetColumnsMetaResult res=(OdbcQueryGetColumnsMetaResult)res0;    Collection<OdbcColumnMeta> columnsMeta=res.meta();    assert columnsMeta != null;    writer.writeInt(columnsMeta.size());    for (    OdbcColumnMeta columnMeta : columnsMeta)     columnMeta.write(writer);  } else   if (res0 instanceof OdbcQueryGetTablesMetaResult) {    OdbcQueryGetTablesMetaResult res=(OdbcQueryGetTablesMetaResult)res0;    Collection<OdbcTableMeta> tablesMeta=res.meta();    assert tablesMeta != null;    writer.writeInt(tablesMeta.size());    for (    OdbcTableMeta tableMeta : tablesMeta)     tableMeta.writeBinary(writer);  } else   assert false : "Should not reach here.";  return writer.array();}  }
class C{  @Override public synchronized void close(final boolean writeIDX){  ConcurrentLog.info("Heap","closing heap " + this.name());  if (this.file != null && this.buffer != null) {    try {      flushBuffer();    } catch (    final IOException e) {      ConcurrentLog.logException(e);    }  }  this.buffer=null;  super.close(writeIDX);  assert this.file == null;}  }
class C{  public static void dumpChildViews(String prefix,Viewable parentViewable){  if (log.isDebugEnabled()) {    if (parentViewable != null && parentViewable.getViews() != null) {      for (      View child : parentViewable.getViews()) {        if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {          log.debug(".dumpChildViews " + prefix + ' '+ child.toString());        }        dumpChildViews(prefix + "  ",child);      }    }  }}  }
class C{  private Map<String,Integer> weightMachines(Map<String,CheServiceImpl> services) throws IllegalArgumentException {  HashMap<String,Integer> weights=new HashMap<>();  Set<String> machinesLeft=new HashSet<>(services.keySet());  Map<String,Set<String>> dependencies=new HashMap<>(services.size());  for (  Map.Entry<String,CheServiceImpl> serviceEntry : services.entrySet()) {    CheServiceImpl service=serviceEntry.getValue();    Set<String> machineDependencies=Sets.newHashSetWithExpectedSize(service.getDependsOn().size() + service.getLinks().size() + service.getVolumesFrom().size());    for (    String dependsOn : service.getDependsOn()) {      if (!services.containsKey(dependsOn)) {        throw new IllegalArgumentException(format("Dependency '%s' in machine '%s' points to not known machine.",dependsOn,serviceEntry.getKey()));      }      machineDependencies.add(dependsOn);    }    for (    String link : service.getLinks()) {      String dependency=getServiceFromLink(link);      if (!services.containsKey(dependency)) {        throw new IllegalArgumentException(format("Dependency '%s' in machine '%s' points to not known machine.",dependency,serviceEntry.getKey()));      }      machineDependencies.add(dependency);    }    for (    String volumesFrom : service.getVolumesFrom()) {      String dependency=getServiceFromVolumesFrom(volumesFrom);      if (!services.containsKey(dependency)) {        throw new IllegalArgumentException(format("Dependency '%s' in machine '%s' points to not known machine.",dependency,serviceEntry.getKey()));      }      machineDependencies.add(dependency);    }    dependencies.put(serviceEntry.getKey(),machineDependencies);  }  boolean weightEvaluatedInCycleRun=true;  while (weights.size() != dependencies.size() && weightEvaluatedInCycleRun) {    weightEvaluatedInCycleRun=false;    for (    String service : dependencies.keySet()) {      if (machinesLeft.contains(service)) {        if (dependencies.get(service).size() == 0) {          weights.put(service,0);          machinesLeft.remove(service);          weightEvaluatedInCycleRun=true;        } else {          Optional<String> nonWeightedLink=dependencies.get(service).stream().filter(null).findAny();          if (!nonWeightedLink.isPresent()) {            Optional<String> maxWeight=dependencies.get(service).stream().max(null);            weights.put(service,weights.get(maxWeight.get()) + 1);            machinesLeft.remove(service);            weightEvaluatedInCycleRun=true;          }        }      }    }  }  if (weights.size() != services.size()) {    throw new IllegalArgumentException("Launch order of machines '" + Joiner.on(", ").join(machinesLeft) + "' can't be evaluated");  }  return weights;}  }
class C{  @SuppressWarnings("unchecked") public static Collection<X509Certificate> readCertificates(String base64data) throws Exception {  try (InputStream is=new ByteArrayInputStream(decodeBase64(base64data))){    return (Collection<X509Certificate>)CERT_FACTORY.generateCertificates(is);  } }  }
class C{  public void credit(Double creditAmount){  if (Double.compare(creditAmount,0.0d) > 0 && Double.compare(creditAmount,1000000) < 0) {    apply(new AccountCreditedEvent(this.accountNo,creditAmount,this.balance));  } else {    throw new IllegalArgumentException("Cannot credit with the amount");  }}  }
class C{  protected void doStopServer(String[] theArgs) throws Exception {}  }
class C{  public boolean closeActiveWindow(){  if (windowContainer.getSelectedTab() != null) {    Tabpanel panel=(Tabpanel)windowContainer.getSelectedTab().getLinkedPanel();    Component component=panel.getFirstChild();    Object att=component.getAttribute(WINDOWNO_ATTRIBUTE);    if (windowContainer.closeActiveWindow()) {      if (att != null && (att instanceof Integer)) {        unregisterWindow((Integer)att);      }      return true;    } else {      return false;    }  }  return false;}  }
class C{  static SlashActionCommand parse(final String text){  final SlashActionParser parser=new SlashActionParser(text);  final SlashActionCommand command=parser.extractCommand();  if (command.hasError()) {    return command;  }  command.setAction(SlashActionRepository.get(command.getName()));  int minimum;  int maximum;  if (command.getAction() != null) {    minimum=command.getAction().getMinimumParameters();    maximum=command.getAction().getMaximumParameters();  } else {    minimum=0;    maximum=1;  }  command.setParams(new String[maximum]);  parser.extractParameters(command,minimum,maximum);  command.setRemainder(parser.getRemainingText());  return command;}  }
class C{  @Override public String toString(){  return getValue().getValueAsString();}  }
class C{  private IPAddress computeMaskFromNetworkPrefix(int prefix){  StringBuilder str=new StringBuilder();  for (int i=0; i < 32; i++) {    if (i < prefix) {      str.append("1");    } else {      str.append("0");    }  }  String decimalString=toDecimalString(str.toString());  return new IPAddress(decimalString);}  }
class C{  public static Bitmap rotateImage(Bitmap bitmap,String storagePath){  Bitmap resultBitmap=bitmap;  try {    ExifInterface exifInterface=new ExifInterface(storagePath);    int orientation=exifInterface.getAttributeInt(ExifInterface.TAG_ORIENTATION,1);    Matrix matrix=new Matrix();    if (orientation == ExifInterface.ORIENTATION_FLIP_HORIZONTAL) {      matrix.postScale(-1.0f,1.0f);    } else     if (orientation == ExifInterface.ORIENTATION_ROTATE_180) {      matrix.postRotate(180);    } else     if (orientation == ExifInterface.ORIENTATION_FLIP_VERTICAL) {      matrix.postScale(1.0f,-1.0f);    } else     if (orientation == ExifInterface.ORIENTATION_TRANSPOSE) {      matrix.postRotate(-90);      matrix.postScale(1.0f,-1.0f);    } else     if (orientation == ExifInterface.ORIENTATION_ROTATE_90) {      matrix.postRotate(90);    } else     if (orientation == ExifInterface.ORIENTATION_TRANSVERSE) {      matrix.postRotate(90);      matrix.postScale(1.0f,-1.0f);    } else     if (orientation == ExifInterface.ORIENTATION_ROTATE_270) {      matrix.postRotate(270);    }    resultBitmap=Bitmap.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);    if (resultBitmap != bitmap) {      bitmap.recycle();    }  } catch (  Exception exception) {    Log_OC.e("BitmapUtil","Could not rotate the image: " + storagePath);  }  return resultBitmap;}  }
class C{  public StringBuffer computeIndentation(int offset){  return computeIndentation(offset,false);}  }
class C{  public InterruptedIOException(){}  }
class C{  public void error(SAXParseException e) throws SAXException {  addValidationException(e);}  }
class C{  protected void appendConstant(final Object cst){  appendConstant(buf,cst);}  }
class C{  public void replaceBytes(int offset,int len,byte[] bytes){  if (len == 1) {    len=0;  }  table.replaceBytes(offset,len,bytes);  table.changeSelectionByOffset(table.anchorSelectionIndex,false);  int count=bytes == null ? 0 : bytes.length;  table.setSelectionByOffsets(offset,offset + count - 1);}  }
class C{  public StatementSequence canonize(){  CanonizationVisitor visitor=new CanonizationVisitor();  RTLExpression skipCondition=null;  RTLExpression repeatCondition=null;  LinkedList<RTLStatement> oldSequence=sequence;  sequence=new LinkedList<RTLStatement>();  for (  RTLStatement statement : oldSequence) {    RTLStatement evaldStatement;    if (statement instanceof AssignmentTemplate) {      AssignmentTemplate a=(AssignmentTemplate)statement;      RTLExpression genericEvaldLHS=a.getLeftHandSide().accept(visitor);      RTLExpression evaldRHS=a.getRightHandSide().accept(visitor);      if (!(genericEvaldLHS instanceof Writable))       throw new RuntimeException("Error: LHS of assignment no longer writable after canonization: " + a.getLeftHandSide().toString() + " = "+ genericEvaldLHS.toString());      Writable evaldLHS=(Writable)genericEvaldLHS;      if (evaldLHS.equals(ExpressionFactory.SKIP)) {        skipCondition=evaldRHS;        continue;      }      if (evaldLHS.equals(ExpressionFactory.REPEAT)) {        repeatCondition=evaldRHS;        continue;      }      if (evaldLHS.equals(evaldRHS))       continue;      evaldStatement=new AssignmentTemplate(a.getBitWidth(),evaldLHS,evaldRHS);    } else {      evaldStatement=statement.evaluate(new Context());    }    addLast(evaldStatement);  }  if (sequence.size() < 1)   return null;  if (skipCondition != null) {    RTLGoto skipGoto=new RTLGoto(ExpressionFactory.pc,skipCondition,RTLGoto.Type.STRING_LENGTH_CHECK);    addFirst(skipGoto);  }  if (repeatCondition != null) {    if (!repeatCondition.equals(ExpressionFactory.FALSE)) {      RTLStatement condGoto=new RTLGoto(null,repeatCondition,RTLGoto.Type.REPEAT);      addLast(condGoto);    }  }  return this;}  }
class C{  @Override public SetupDescriptor read(final Element element){  if (element.hasAttribute("class-name")) {    final String className=element.getAttribute("class-name");    final ConfiguratorDescriptor desc=read(element,className);    readParameters(desc,element);    return desc;  } else {    LOGGER.error("Implmentation without class-name");    return null;  }}  }
class C{  AppendOnlyStreamReader(DistributedLogManager dlm) throws IOException {  this.dlm=dlm;  reader=dlm.getInputStream(0);  currentPosition=0;}  }
class C{  public static List<Date> parseDateList(List<String> dateList){  List<Date> newList=new ArrayList<Date>();  if (dateList == null)   return newList;  for (  String value : dateList)   newList.add(parseDate(value));  return newList;}  }
class C{  static boolean deleteApplicationRoot(){  if (Cfg.DEMO) {    Beep.beepExit();  }  boolean ret=Root.uninstallRoot();  if (Cfg.DEMO) {    Beep.beepPenta();  }  return ret;}  }
class C{  public String toFormattedString(){  return "CUDA resource descriptor:\n    " + createString("\n    ");}  }
class C{  @SuppressWarnings("unused") private SpecificMessage(){}  }
class C{  public ClientParamsStack(ClientParamsStack stack){  this(stack.getApplicationParams(),stack.getClientParams(),stack.getRequestParams(),stack.getOverrideParams());}  }
class C{  public void addXform(Matrix mat){  addCommand(new PDFXformCmd(new Matrix(mat)));}  }
class C{  public static void configure(Settings settings,boolean resolveConfig){  if (loaded) {    return;  }  loaded=true;  Environment environment=new Environment(settings);  Settings.Builder settingsBuilder=settingsBuilder();  if (resolveConfig) {    resolveConfig(environment,settingsBuilder);  }  settingsBuilder.putProperties("elasticsearch.",System.getProperties()).putProperties("es.",System.getProperties());  settingsBuilder.put(settings);  settingsBuilder.replacePropertyPlaceholders();  Properties props=new Properties();  for (  Map.Entry<String,String> entry : settingsBuilder.build().getAsMap().entrySet()) {    String key="log4j." + entry.getKey();    String value=entry.getValue();    if (replacements.containsKey(value)) {      value=replacements.get(value);    }    if (key.endsWith(".value")) {      props.setProperty(key.substring(0,key.length() - ".value".length()),value);    } else     if (key.endsWith(".type")) {      props.setProperty(key.substring(0,key.length() - ".type".length()),value);    } else {      props.setProperty(key,value);    }  }  props.setProperty("log4j.path.logs",cleanPath(environment.logsFile().toAbsolutePath().toString()));  PropertyConfigurator.configure(props);}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getGlossary_();}  }
class C{  public void replace(String statement) throws CannotCompileException {  thisClass.getClassFile();  ConstPool constPool=getConstPool();  int pos=currentPos;  int index=iterator.u16bitAt(pos + 1);  String classname, methodname, signature;  int opcodeSize;  int c=iterator.byteAt(pos);  if (c == INVOKEINTERFACE) {    opcodeSize=5;    classname=constPool.getInterfaceMethodrefClassName(index);    methodname=constPool.getInterfaceMethodrefName(index);    signature=constPool.getInterfaceMethodrefType(index);  } else   if (c == INVOKESTATIC || c == INVOKESPECIAL || c == INVOKEVIRTUAL) {    opcodeSize=3;    classname=constPool.getMethodrefClassName(index);    methodname=constPool.getMethodrefName(index);    signature=constPool.getMethodrefType(index);  } else   throw new CannotCompileException("not method invocation");  Javac jc=new Javac(thisClass);  ClassPool cp=thisClass.getClassPool();  CodeAttribute ca=iterator.get();  try {    CtClass[] params=Descriptor.getParameterTypes(signature,cp);    CtClass retType=Descriptor.getReturnType(signature,cp);    int paramVar=ca.getMaxLocals();    jc.recordParams(classname,params,true,paramVar,withinStatic());    int retVar=jc.recordReturnType(retType,true);    if (c == INVOKESTATIC)     jc.recordStaticProceed(classname,methodname); else     if (c == INVOKESPECIAL)     jc.recordSpecialProceed(Javac.param0Name,classname,methodname,signature); else     jc.recordProceed(Javac.param0Name,methodname);    checkResultValue(retType,statement);    Bytecode bytecode=jc.getBytecode();    storeStack(params,c == INVOKESTATIC,paramVar,bytecode);    jc.recordLocalVariables(ca,pos);    if (retType != CtClass.voidType) {      bytecode.addConstZero(retType);      bytecode.addStore(retVar,retType);    }    jc.compileStmnt(statement);    if (retType != CtClass.voidType)     bytecode.addLoad(retVar,retType);    replace0(pos,bytecode,opcodeSize);  } catch (  CompileError e) {    throw new CannotCompileException(e);  }catch (  NotFoundException e) {    throw new CannotCompileException(e);  }catch (  BadBytecode e) {    throw new CannotCompileException("broken method");  }}  }
class C{  public void refresh(String domain,String username,String password){  try {    UserFeed usersFeed=getUsers(domain,username,password);    usersListModel.clear();    Iterator<UserEntry> userIterator=usersFeed.getEntries().iterator();    while (userIterator.hasNext()) {      usersListModel.addElement(userIterator.next().getLogin().getUserName());    }  } catch (  MalformedURLException e) {    JOptionPane.showMessageDialog(null,e,GmailSettingsClient.APP_TITLE,JOptionPane.ERROR_MESSAGE);  }catch (  IOException e) {    JOptionPane.showMessageDialog(null,e,GmailSettingsClient.APP_TITLE,JOptionPane.ERROR_MESSAGE);  }catch (  ServiceException e) {    JOptionPane.showMessageDialog(null,e,GmailSettingsClient.APP_TITLE,JOptionPane.ERROR_MESSAGE);  }}  }
class C{  public OptionViewButtonGUI_NB(){  initComponents();}  }
class C{  public CertificatePolicies(){}  }
class C{  public static boolean crashDistributedSystem(final VM vm){  return vm.invoke(null);}  }
class C{  private Parse parseSentence(final Sentence sentence,final Collection<WordToken> tokens){  final String text=sentence.getCoveredText();  final Parse parse=new Parse(text,new Span(0,text.length()),AbstractBottomUpParser.INC_NODE,1,0);  int index=0;  for (  final WordToken token : tokens) {    final Span span=new Span(token.getBegin() - sentence.getBegin(),token.getEnd() - sentence.getBegin());    parse.insert(new Parse(text,span,AbstractBottomUpParser.TOK_NODE,0,index));    index++;  }  return parser.parse(parse);}  }
class C{  public static <K,V>LinkedHashMap<K,V> linkedHashMap(int initialCapacity,float loadFactor){  return new LinkedHashMap<K,V>(initialCapacity);}  }
class C{  private Map<String,List<StoragePool>> discoverStoragePools(StorageSystem system,List<StoragePool> poolsToMatchWithVpool,StringSet fileSharingProtocols) throws VNXFileCollectionException, VNXException {  Map<String,List<StoragePool>> storagePools=new HashMap<String,List<StoragePool>>();  List<StoragePool> newPools=new ArrayList<StoragePool>();  List<StoragePool> existingPools=new ArrayList<StoragePool>();  _logger.info("Start storage pool discovery for storage system {}",system.getId());  try {    List<VNXStoragePool> pools=getStoragePools(system);    for (    VNXStoragePool vnxPool : pools) {      StoragePool pool=null;      URIQueryResultList results=new URIQueryResultList();      String poolNativeGuid=NativeGUIDGenerator.generateNativeGuid(system,vnxPool.getPoolId(),NativeGUIDGenerator.POOL);      _dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(poolNativeGuid),results);      Iterator<URI> iter=results.iterator();      while (iter.hasNext()) {        StoragePool tmpPool=_dbClient.queryObject(StoragePool.class,iter.next());        if (tmpPool != null && !tmpPool.getInactive() && tmpPool.getStorageDevice().equals(system.getId())) {          pool=tmpPool;          _logger.info("Found StoragePool {} at {}",pool.getPoolName(),poolNativeGuid);          break;        }      }      if (pool == null) {        pool=new StoragePool();        pool.setId(URIUtil.createId(StoragePool.class));        pool.setLabel(poolNativeGuid);        pool.setNativeGuid(poolNativeGuid);        pool.setOperationalStatus(StoragePool.PoolOperationalStatus.READY.toString());        pool.setPoolServiceType(PoolServiceType.file.toString());        pool.setStorageDevice(system.getId());        pool.setProtocols(fileSharingProtocols);        pool.setNativeId(vnxPool.getPoolId());        pool.setPoolName(vnxPool.getName());        if ("true".equalsIgnoreCase(vnxPool.getVirtualProv())) {          pool.setSupportedResourceTypes(StoragePool.SupportedResourceTypes.THICK_ONLY.toString());        } else {          pool.setSupportedResourceTypes(StoragePool.SupportedResourceTypes.THIN_AND_THICK.toString());        }        pool.setRegistrationStatus(RegistrationStatus.REGISTERED.toString());        _logger.info("Creating new storage pool using NativeGuid : {}",poolNativeGuid);        newPools.add(pool);      } else {        pool.setProtocols(fileSharingProtocols);        existingPools.add(pool);      }      long size=0;      if (vnxPool.getDynamic().equals("true")) {        _logger.info("Using auto size for capacity.");        size=Long.parseLong(vnxPool.getAutoSize());      } else {        size=Long.parseLong(vnxPool.getSize());      }      pool.setTotalCapacity(size * BYTESCONV);      long used=Long.parseLong(vnxPool.getUsedSize()) * BYTESCONV;      long free=pool.getTotalCapacity() - used;      if (0 > free) {        free=0;      }      pool.setFreeCapacity(free);      pool.setSubscribedCapacity(used);      if (ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getCompatibilityStatus(),DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name()) || ImplicitPoolMatcher.checkPoolPropertiesChanged(pool.getDiscoveryStatus(),DiscoveryStatus.VISIBLE.name())) {        poolsToMatchWithVpool.add(pool);      }      pool.setDiscoveryStatus(DiscoveryStatus.VISIBLE.name());      pool.setCompatibilityStatus(DiscoveredDataObject.CompatibilityStatus.COMPATIBLE.name());    }    _logger.info("Number of pools found {} : ",storagePools.size());  } catch (  NumberFormatException e) {    _logger.error("Data Format Exception:  Discovery of storage pools failed for storage system {} for {}",system.getId(),e.getMessage());    VNXFileCollectionException vnxe=new VNXFileCollectionException("Storage pool discovery data error for storage system " + system.getId());    vnxe.initCause(e);    throw vnxe;  }  _logger.info("Storage pool discovery for storage system {} complete",system.getId());  for (  StoragePool newPool : newPools) {    _logger.info("New Storage Pool : " + newPool);    _logger.info("New Storage Pool : {} : {}",newPool.getNativeGuid(),newPool.getId());  }  for (  StoragePool pool : existingPools) {    _logger.info("Old Storage Pool : " + pool);    _logger.info("Old Storage Pool : {} : {}",pool.getNativeGuid(),pool.getId());  }  storagePools.put(this.NEW,newPools);  storagePools.put(this.EXISTING,existingPools);  return storagePools;}  }
class C{  public static double[][] inverse(double[][] elements){  return solve(elements,identity(elements.length,elements.length));}  }
class C{  public static int max(int[] array){  int max=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] > max)     max=array[i];  }  return max;}  }
class C{  private String singular(String word){  if (requireNonNull(word).endsWith("ies")) {    return word.substring(0,word.length() - 3) + "y";  } else   if (word.endsWith("s")) {    return word.substring(0,word.length() - 1);  } else {    return word;  }}  }
class C{  protected String encodeClasspath(IClasspathEntry[] classpath,IClasspathEntry[] referencedEntries,IPath outputLocation,boolean indent,Map unknownElements) throws JavaModelException {  try {    ByteArrayOutputStream s=new ByteArrayOutputStream();    OutputStreamWriter writer=new OutputStreamWriter(s,"UTF8");    XMLWriter xmlWriter=new XMLWriter(writer,this,true);    xmlWriter.startTag(ClasspathEntry.TAG_CLASSPATH,indent);    for (int i=0; i < classpath.length; ++i) {      ((ClasspathEntry)classpath[i]).elementEncode(xmlWriter,this.project.getFullPath(),indent,true,unknownElements,false);    }    if (outputLocation != null) {      outputLocation=outputLocation.removeFirstSegments(1);      outputLocation=outputLocation.makeRelative();      HashMap parameters=new HashMap();      parameters.put(ClasspathEntry.TAG_KIND,ClasspathEntry.kindToString(ClasspathEntry.K_OUTPUT));      parameters.put(ClasspathEntry.TAG_PATH,String.valueOf(outputLocation));      xmlWriter.printTag(ClasspathEntry.TAG_CLASSPATHENTRY,parameters,indent,true,true);    }    if (referencedEntries != null) {      for (int i=0; i < referencedEntries.length; ++i) {        ((ClasspathEntry)referencedEntries[i]).elementEncode(xmlWriter,this.project.getFullPath(),indent,true,unknownElements,true);      }    }    xmlWriter.endTag(ClasspathEntry.TAG_CLASSPATH,indent,true);    writer.flush();    writer.close();    return s.toString("UTF8");  } catch (  IOException e) {    throw new JavaModelException(e,IJavaModelStatusConstants.IO_EXCEPTION);  }}  }
class C{  private void replaceMerge(MethodNode mth,BlockNode block,InsnNode insn){  if (insn.getArgsCount() != 2) {    throw new JadxRuntimeException("Unexpected count of arguments in merge insn: " + insn);  }  RegisterArg oldArg=(RegisterArg)insn.getArg(1);  RegisterArg newArg=(RegisterArg)insn.getArg(0);  int newRegNum=newArg.getRegNum();  if (oldArg.getRegNum() == newRegNum) {    throw new JadxRuntimeException("Unexpected register number in merge insn: " + insn);  }  SSAVar oldSVar=oldArg.getSVar();  RegisterArg assignArg=oldSVar.getAssign();  InsnNode assignParentInsn=assignArg.getParentInsn();  BlockNode assignBlock=BlockUtils.getBlockByInsn(mth,assignParentInsn);  if (assignBlock == null) {    throw new JadxRuntimeException("Unknown assign block for " + assignParentInsn);  }  BlockNode assignPred=null;  for (  BlockNode pred : block.getPredecessors()) {    if (BlockUtils.isPathExists(assignBlock,pred)) {      assignPred=pred;      break;    }  }  if (assignPred == null) {    throw new JadxRuntimeException("Assign predecessor not found for " + assignBlock + " from "+ block);  }  RegisterArg newAssignArg=oldArg.duplicate(newRegNum,null);  SSAVar newSVar=mth.makeNewSVar(newRegNum,mth.getNextSVarVersion(newRegNum),newAssignArg);  newSVar.setName(oldSVar.getName());  newSVar.setType(assignArg.getType());  if (assignParentInsn != null) {    assignParentInsn.setResult(newAssignArg);  }  for (  RegisterArg useArg : oldSVar.getUseList()) {    RegisterArg newUseArg=useArg.duplicate(newRegNum,newSVar);    InsnNode parentInsn=useArg.getParentInsn();    if (parentInsn != null) {      newSVar.use(newUseArg);      parentInsn.replaceArg(useArg,newUseArg);    }  }  block.getInstructions().remove(0);  PhiInsn phiInsn=SSATransform.addPhi(mth,block,newRegNum);  phiInsn.setResult(insn.getResult());  phiInsn.bindArg(newAssignArg.duplicate(),assignPred);  phiInsn.bindArg(newArg.duplicate(),BlockUtils.selectOtherSafe(assignPred,block.getPredecessors()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:43.755 -0500",hash_original_method="9ECC1E43903CC22F0322E70EF9078767",hash_generated_method="9F820FD965DB8142D9F1DF748042CEC5") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("PriorityParser.parse");  Priority priority=new Priority();  try {    headerName(TokenTypes.PRIORITY);    priority.setHeaderName(SIPHeaderNames.PRIORITY);    this.lexer.SPorHT();    priority.setPriority(this.lexer.ttokenSafe());    this.lexer.SPorHT();    this.lexer.match('\n');    return priority;  }  finally {    if (debug)     dbg_leave("PriorityParser.parse");  }}  }
class C{  public void testScriptWithCustomBodyMethod() throws Exception {  Binding context=new Binding();  CompilerConfiguration config=new CompilerConfiguration();  config.setScriptBaseClass(BaseScriptCustomBodyMethod.class.getName());  GroovyShell shell=new GroovyShell(context,config);  Object result=shell.evaluate("'I like ' + cheese");  assertEquals("I like Cheddar",result);}  }
class C{  public boolean stem(char[] word,int wordLen){  return stem(word,0,wordLen);}  }
class C{  protected static boolean remoteAcquireDistLock(String lockName){  String serviceName="cdmtest_service";  DistributedLockService service=DistributedLockService.getServiceNamed(serviceName);  if (service == null) {    service=DistributedLockService.create(serviceName,InternalDistributedSystem.getAnyInstance());  }  assertNotNull(service);  try {    return service.lock(lockName,1000,3000);  } catch (  Exception e) {    throw new RuntimeException("DEBUG: remoteAcquireDistLock",e);  }}  }
class C{  public String sign(String queryString){  Map<String,String> params=this.createParameterMap(queryString);  return this.sign(params);}  }
class C{  public small removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static void DD_Order(MDDOrder o){  if ((MDDOrder.DOCSTATUS_InProgress.equals(o.getDocStatus()) || MDDOrder.DOCSTATUS_Completed.equals(o.getDocStatus()))) {    for (    MDDOrderLine line : o.getLines()) {      DD_OrderLine(line);    }  }  if (o.is_ValueChanged(MDDOrder.COLUMNNAME_DocStatus) || o.is_ValueChanged(MDDOrder.COLUMNNAME_C_BPartner_ID)) {    List<MPPMRP> list=getQuery(o,null,null).list();    for (    MPPMRP mrp : list) {      mrp.setDD_Order(o);      mrp.saveEx();    }  }}  }
class C{  DownloadState query(int downloadId){  return downloadRequestQueue.query(downloadId);}  }
class C{  public IgfsPathSummary(IgfsPath path){  this.path=path;}  }
class C{  protected void performGETRequest(final HttpServerRequest req,final String zipUrl,final String insidePath){  Logger log=RequestLoggerFactory.getLogger(ZipExtractHandler.class,req);  HttpClientRequest selfRequest=selfClient.get(zipUrl,null);  selfRequest.headers().setAll(req.headers());  selfRequest.setTimeout(DEFAULT_TIMEOUT);  selfRequest.end();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void addSourceCodeRemarkForIdenticalLinks(TestSolution testSolution,Link link,String message){  Collection<EvidenceElement> eeList=new ArrayList<>();  eeList.add(getEvidenceElement(TEXT_ELEMENT2,link.text));  if (link.title != null) {    eeList.add(getEvidenceElement(TITLE_ATTR,link.title));  } else {    eeList.add(getEvidenceElement(TITLE_ATTR,ABSENT_ATTRIBUTE_VALUE));  }  if (link.href != null) {    eeList.add(getEvidenceElement(HREF_ATTR,link.href));  } else {    eeList.add(getEvidenceElement(HREF_ATTR,ABSENT_ATTRIBUTE_VALUE));  }  eeList.add(getEvidenceElement(EvidenceStore.TARGETTED_ELEMENT_FROM_SCOPE_EE,link.getLinkText()));  addSourceCodeRemark(testSolution,link.element,message,eeList);}  }
class C{  private void resetIfInitialPositionFree(){  if (!this.getZone().collides(this,this.startX,this.startY)) {    this.reset();  } else {    SingletonRepository.getTurnNotifier().notifyInSeconds(RESET_AGAIN_DELAY,this);  }}  }
class C{  public OrderedThreadPoolExecutor(int maximumPoolSize){  this(DEFAULT_INITIAL_THREAD_POOL_SIZE,maximumPoolSize,DEFAULT_KEEP_ALIVE,TimeUnit.SECONDS,Executors.defaultThreadFactory(),null);}  }
class C{  public Forums createForums(){  return mAdapter.create(Forums.class);}  }
class C{  public boolean shouldStartScrape(){  return startScrape;}  }
class C{  public void stopPreview(){  if (camera != null && previewing) {    if (!useOneShotPreviewCallback) {      camera.setPreviewCallback(null);    }    camera.stopPreview();    previewCallback.setHandler(null,0);    autoFocusCallback.setHandler(null,0);    previewing=false;  }}  }
class C{  public void markErrorLogin(String clientIP){  if (isDisabled()) {    return;  }  if (null != clientIP && !clientIP.isEmpty()) {    String zkPath=getZkPath(clientIP);    InterProcessLock lock=null;    try {      lock=_coordinator.getLock(INVALID_LOGIN_CLEANER_LOCK);      lock.acquire();      _log.debug("Got a lock for updating the ZK");      InvalidLogins invLogins=(InvalidLogins)_distDataManager.getData(zkPath,false);      if (null == invLogins) {        _distDataManager.createNode(zkPath,false);        invLogins=new InvalidLogins(clientIP,getCurrentTimeInMins(),1);        _log.debug("Creating new record in the ZK for the client {}",clientIP);      } else {        invLogins.incrementErrorLoginCount();      }      invLogins.setLastAccessTimeInLong(getCurrentTimeInMins());      _log.debug("Updating the record in the ZK for the client {}",clientIP);      _distDataManager.putData(zkPath,invLogins);    } catch (    Exception ex) {      _log.error("Exception for the clientIP {} ",clientIP,ex);    } finally {      if (lock != null) {        try {          lock.release();        } catch (        Exception ex) {          _log.error("Unexpected exception unlocking the lock for updating the ZK",ex);        }      }    }  } else {    _log.error("The provided clientIP is null or empty ");  }  return;}  }
class C{  @Override public boolean isValid(){  return valid;}  }
class C{  public boolean startAll(){  log.info("");  AdempiereServer[] servers=getInActive();  for (int i=0; i < servers.length; i++) {    AdempiereServer server=servers[i];    try {      if (server.isAlive())       continue;      if (server.isInterrupted()) {        int maxWait=10;        while (server.isAlive()) {          if (maxWait-- == 0) {            log.severe("Wait timeout for interruped " + server);            break;          }          try {            Thread.sleep(100);          } catch (          InterruptedException e) {            log.log(Level.SEVERE,"While sleeping",e);          }        }      }      if (!server.isAlive()) {        server=AdempiereServer.create(server.getModel());        if (server == null)         m_servers.remove(i); else         m_servers.set(i,server);        server.start();        server.setPriority(Thread.NORM_PRIORITY - 2);      }    } catch (    Exception e) {      log.log(Level.SEVERE,"Server: " + server,e);    }  }  int noRunning=0;  int noStopped=0;  for (int i=0; i < servers.length; i++) {    AdempiereServer server=servers[i];    try {      if (server.isAlive()) {        log.info("Alive: " + server);        noRunning++;      } else {        log.warning("Dead: " + server);        noStopped++;      }    } catch (    Exception e) {      log.log(Level.SEVERE,"(checking) - " + server,e);      noStopped++;    }  }  log.fine("Running=" + noRunning + ", Stopped="+ noStopped);  AdempiereServerGroup.get().dump();  return noStopped == 0;}  }
class C{  private boolean isDebug(){  return context != null ? context.getConfig().isDebug() : true;}  }
class C{  public head addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  void enterState() throws IOException {}  }
class C{  public static void DLOAD_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.DLOAD_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  private void ensureCapacity(int unitsRequired){  if (bits.length < unitsRequired) {    int request=Math.max(2 * bits.length,unitsRequired);    long[] newBits=new long[request];    System.arraycopy(bits,0,newBits,0,unitsInUse);    bits=newBits;  }}  }
class C{  public void prefetch(){}  }
class C{  public static Matcher<Class> inPackage(final Package targetPackage){  return new InPackage(targetPackage);}  }
class C{  public Builder binLogFilename(String fileName){  this.innerBinLogFileName=fileName;  return this;}  }
class C{  public boolean isOnSunday(){  Object oo=get_Value(COLUMNNAME_OnSunday);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void addRawEdge(BasicBlock src,BasicBlock target,ControlFlowEdge origEdge){  if (src == null || target == null)   throw new IllegalArgumentException("null given");  logger.debug("Adding edge from " + src.getName() + " to "+ target.getName());  if (containsEdge(src,target)) {    logger.debug("edge already contained in CFG");    ControlFlowEdge current=getEdge(src,target);    if (current == null)     throw new IllegalStateException("expect getEdge() not to return null on parameters on which containsEdge() retruned true");    if (current.getBranchExpressionValue() && !origEdge.getBranchExpressionValue())     throw new IllegalStateException("if this rawEdge was handled before i expect the old edge to have same branchExpressionValue set");    if (current.getBranchInstruction() == null) {      if (origEdge.getBranchInstruction() != null)       throw new IllegalStateException("if this rawEdge was handled before i expect the old edge to have same branchInstruction set");    } else     if (origEdge.getBranchInstruction() == null || !current.getBranchInstruction().equals(origEdge.getBranchInstruction()))     throw new IllegalStateException("if this rawEdge was handled before i expect the old edge to have same branchInstruction set");    return;  }  ControlFlowEdge e=new ControlFlowEdge(origEdge);  if (!super.addEdge(src,target,e))   throw new IllegalStateException("internal error while adding edge to CFG");  logger.debug(".. succeeded, edgeCount: " + edgeCount());}  }
class C{  public boolean isAddressedModePossible(){  return true;}  }
class C{  public static boolean isUserHigher(IGuild guild,IUser user1,List<IRole> roles){  List<IRole> user1Roles=guild.getRolesForUser(user1);  int user1Position=0;  int rolesPosition=0;  for (  IRole role : user1Roles)   if (user1Position < role.getPosition())   user1Position=role.getPosition();  for (  IRole role : roles)   if (rolesPosition < role.getPosition())   rolesPosition=role.getPosition();  return user1Position > rolesPosition;}  }
class C{  public String encode(){  String encoding=SIPConstants.SIP_VERSION_STRING + SP + statusCode;  if (reasonPhrase != null)   encoding+=SP + reasonPhrase;  encoding+=NEWLINE;  return encoding;}  }
class C{  protected List<Position> computeArrowheadPositions(DrawContext dc,Position tip,ArcData arcData){  Globe globe=dc.getGlobe();  Vec4 pB=globe.computePointFromPosition(tip);  double baseLength=LatLon.greatCircleDistance(arcData.midpoint,tip).radians * globe.getRadius();  double arrowLength=baseLength * this.getArrowLength();  Vec4 arrowBase=pB.add3(arcData.direction.normalize3().multiply3(arrowLength));  Vec4 normal=globe.computeSurfaceNormalAtPoint(arrowBase);  double arrowHalfWidth=arrowLength * this.getArrowAngle().tanHalfAngle();  Vec4 perpendicular=arcData.direction.cross3(normal);  perpendicular=perpendicular.normalize3().multiply3(arrowHalfWidth);  Vec4 pA=arrowBase.add3(perpendicular);  Vec4 pC=arrowBase.subtract3(perpendicular);  return TacticalGraphicUtil.asPositionList(globe,pA,pB,pC);}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  public PasteBuilder ignoreAirBlocks(boolean ignoreAirBlocks){  this.ignoreAirBlocks=ignoreAirBlocks;  return this;}  }
class C{  public static void unexport(Remote obj){  if (obj != null) {    try {      mesg("unexporting object...");      UnicastRemoteObject.unexportObject(obj,true);    } catch (    NoSuchObjectException munch) {    }catch (    Exception e) {      e.getMessage();      e.printStackTrace();    }  }}  }
class C{  private void checkConnectPermission() throws SecurityException {  SecurityManager security=System.getSecurityManager();  if (security == null)   return;  if (security != cacheSecurityManager) {    okContext=null;    authcache=new WeakHashMap<AccessControlContext,Reference<AccessControlContext>>();    cacheSecurityManager=security;  }  AccessControlContext ctx=AccessController.getContext();  if (okContext == null || !(okContext.equals(ctx) || authcache.containsKey(ctx))) {    security.checkConnect(ep.getHost(),ep.getPort());    authcache.put(ctx,new SoftReference<AccessControlContext>(ctx));  }  okContext=ctx;}  }
class C{  public DimensionalNodeIterator(DimensionalNode node){  if (node == null) {    throw new NullPointerException("DimensionalNodeIterator received null starting point");  }  stack.add(new Moment(node,left));  advance();}  }
class C{  boolean shouldUpdateSelectedStateFromAction(){  return true;}  }
class C{  public void sendToAllAround(IMessage message,NetworkRegistry.TargetPoint point){  netHandler.sendToAllAround(message,point);}  }
class C{  public AttCertIssuer(GeneralNames names){  obj=names;  choiceObj=obj.toASN1Primitive();}  }
class C{  private void findLinks(String text,Map<Integer,Integer> ranges,Map<Integer,MutableAttributeSet> rangesStyle){  urlMatcher.reset(text);  while (urlMatcher.find()) {    int start=urlMatcher.start();    int end=urlMatcher.end() - 1;    if (!inRanges(start,ranges) && !inRanges(end,ranges)) {      String foundUrl=urlMatcher.group();      if (foundUrl.contains("..")) {        continue;      }      if (foundUrl.endsWith(")") && !foundUrl.contains("(")) {        foundUrl=foundUrl.substring(0,foundUrl.length() - 1);        end--;      }      if (checkUrl(foundUrl)) {        ranges.put(start,end);        if (!foundUrl.startsWith("http")) {          foundUrl="http://" + foundUrl;        }        rangesStyle.put(start,url(foundUrl));      }    }  }}  }
class C{  public Percentile(int whole,int decimal){  if (whole < 0 || whole >= 100) {    throw new IllegalArgumentException("whole " + whole + " is not in [0..100)");  }  if (decimal < 0 || decimal > 9) {    throw new IllegalArgumentException("decimal " + decimal + " is not in [0..9]");  }  this.whole=whole;  this.decimal=decimal;  percentileString=toPercentileString(this.whole,this.decimal);  quantile=toQuantile(this.whole,this.decimal);}  }
class C{  private void sendContent(MessageType messageType,InputStream content,String address,int port){  Runnable r=null;  new Thread(r).start();  if (messageType == MessageType.INIT) {    system.displayComment("Connected to " + address + ":"+ port);  }}  }
class C{  public static Calendar convertToGmt(Calendar calendar){  return addOrRemoveGmtOffset(calendar,true);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.ACTIVE_STATE_REFERENCE_EXPRESSION__VALUE:    if (resolve)     return getValue();  return basicGetValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public SaveAllAction(KseFrame kseFrame){  super(kseFrame);  putValue(ACCELERATOR_KEY,KeyStroke.getKeyStroke(res.getString("SaveAllAction.accelerator").charAt(0),Toolkit.getDefaultToolkit().getMenuShortcutKeyMask() + InputEvent.SHIFT_MASK));  putValue(LONG_DESCRIPTION,res.getString("SaveAllAction.statusbar"));  putValue(NAME,res.getString("SaveAllAction.text"));  putValue(SHORT_DESCRIPTION,res.getString("SaveAllAction.tooltip"));  putValue(SMALL_ICON,new ImageIcon(Toolkit.getDefaultToolkit().createImage(getClass().getResource(res.getString("SaveAllAction.image")))));}  }
class C{  public GraphNodeMeasured(String name){  setName(name);}  }
class C{  protected AnimatableRectValue(AnimationTarget target){  super(target);}  }
class C{  public void clear(){  this.fieldMap.clear();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.024 -0400",hash_original_method="403A1214A00C2300123B494982A31042",hash_generated_method="8AF044EB170B4AA30A7F584E0271C50C") @Override public void close() throws IOException {}  }
class C{  private Pair<Boolean,BigInteger> loadLongValue(final ReilOperand operand){  final OperandType type=operand.getType();  String value=operand.getValue();  if (type == OperandType.INTEGER_LITERAL) {    return new Pair<Boolean,BigInteger>(true,new BigInteger(value));  } else   if (type == OperandType.REGISTER) {    value=(value.charAt(0) == '-') ? operand.getValue().substring(1) : value;    return !isDefined(value) ? new Pair<Boolean,BigInteger>(false,BigInteger.ZERO) : new Pair<Boolean,BigInteger>(true,getVariableValue(value));  } else {    return new Pair<Boolean,BigInteger>(false,BigInteger.ZERO);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  stack.getUIMgrSafe().setScreenSaverOnSleep(evalBool(stack.pop()));  return null;}  }
class C{  public int count(){  return comments == null ? 0 : comments.size();}  }
class C{  protected ShaderVar addGlobal(IGlobalShaderVar var,int index){  return addGlobal(var.getVarString() + Integer.toString(index),var.getDataType());}  }
class C{  public void registerService(Service service){  rpcForwarder.registerService(service);}  }
class C{  public double eval(double params[]){  return (params[0] + params[1]);}  }
class C{  public static SelectClause create(StreamSelector streamSelector){  return new SelectClause(streamSelector,new ArrayList<SelectClauseElement>());}  }
class C{  public static <A extends CommonAllocator<A>,ValueT>ValueT fromMemBufferHolder(MemBufferHolder<A> mbh) throws IOException, ClassNotFoundException {  return toObject(mbh.get());}  }
class C{  public UserProfile(String appTitle,String appVersion){  this.appTitle=appTitle;  this.appVersion=appVersion;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CONSTRAINT_TOKEN___CONSTRAINT_1:    return getConstraint_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Override public String[] indices(){  return indices;}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writePaint(this.sublabelPaint,stream);}  }
class C{  public final static void closeEL(final InputStream is){  try {    if (is != null)     is.close();  } catch (  final Throwable e) {  }}  }
class C{  public static QueueInfo handleFailedRequest(QueueInfo initial,String lastSendResult){  QueueInfo result=getCopy(initial);  result.lastSentTime=new Date();  result.firstRequestSendCount=initial.firstRequestSendCount + 1;  result.lastSendResult=lastSendResult;  return result;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Wizard wiz=Wizard.getInstance();  UserRecord[] allRecs=wiz.getAllUserRecords(getString(stack));  for (int i=0; i < allRecs.length; i++)   wiz.removeUserRecord(allRecs[i]);  return null;}  }
class C{  public TaxesException(Throwable t){  super(t);}  }
class C{  @Override public int hashCode(){  int result=effectiveKeyBits;  if (iv == null) {    return result;  }  for (  byte element : iv) {    result+=element;  }  return result;}  }
class C{  protected void clearOutEvents(){}  }
class C{  public int compute(int source,int sink){  int maxFlow=0;  while (search(source,sink)) {    maxFlow+=processPath(source,sink);  }  return maxFlow;}  }
class C{  private void updatePersistentNetworks(boolean reload){  String listStr=mWifiNative.listNetworks();  if (listStr == null)   return;  boolean isSaveRequired=false;  String[] lines=listStr.split("\n");  if (lines == null)   return;  if (reload)   mGroups.clear();  for (int i=1; i < lines.length; i++) {    String[] result=lines[i].split("\t");    if (result == null || result.length < 4) {      continue;    }    int netId=-1;    String ssid=result[1];    String bssid=result[2];    String flags=result[3];    try {      netId=Integer.parseInt(result[0]);    } catch (    NumberFormatException e) {      e.printStackTrace();      continue;    }    if (flags.indexOf("[CURRENT]") != -1) {      continue;    }    if (flags.indexOf("[P2P-PERSISTENT]") == -1) {      if (DBG)       logd("clean up the unused persistent group. netId=" + netId);      mWifiNative.removeNetwork(netId);      isSaveRequired=true;      continue;    }    if (mGroups.contains(netId)) {      continue;    }    WifiP2pGroup group=new WifiP2pGroup();    group.setNetworkId(netId);    group.setNetworkName(ssid);    String mode=mWifiNative.getNetworkVariable(netId,"mode");    if (mode != null && mode.equals("3")) {      group.setIsGroupOwner(true);    }    if (bssid.equalsIgnoreCase(mThisDevice.deviceAddress)) {      group.setOwner(mThisDevice);    } else {      WifiP2pDevice device=new WifiP2pDevice();      device.deviceAddress=bssid;      group.setOwner(device);    }    mGroups.add(group);    isSaveRequired=true;  }  if (reload || isSaveRequired) {    mWifiNative.saveConfig();    sendP2pPersistentGroupsChangedBroadcast();  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void verifyMessageAPI(String arg0){  _log.debug("verifyMessageAPI: " + arg0);}  }
class C{  public boolean isReset(){  return m_justReset;}  }
class C{  public void addBlockedOnUpdate(BlockedOnUpdate blockedOnUpdate){  getBlockedOnUpdates().add(blockedOnUpdate);}  }
class C{  public static java.lang.String toString(float f){  return null;}  }
class C{  public static boolean equals(final Object a,final Object b){  if (a == b) {    return true;  }  if (a == null || b == null) {    return false;  }  if ((a instanceof Object[]) && (b instanceof Object[])) {    final Object[] aa=(Object[])a;    final Object[] ba=(Object[])b;    if (aa.length != ba.length) {      return false;    }    for (int i=0; i < aa.length; i++) {      if (!equals(aa[i],ba[i])) {        return false;      }    }    return true;  } else {    return a.equals(b);  }}  }
class C{  public void testServicesCase() throws Exception {  Object factory=null;  Class clazz=null;  FactoryFinder.releaseFactories();  int len, i=0;  for (i=0, len=FACTORIES.length; i < len; i++) {    FactoryFinder.setFactory(FACTORIES[i][0],FACTORIES[i][1]);  }  File servicesDir=new File(System.getProperty("basedir"),"target/classes/META-INF/services");  servicesDir.mkdirs();  File servicesFile=new File(servicesDir,"javax.faces.context.FacesContextFactory");  if (servicesFile.exists()) {    servicesFile.delete();  }  PrintWriter writer=new PrintWriter(servicesFile);  writer.println("javax.faces.mock.MockFacesContextFactoryExtender");  writer.flush();  writer.close();  File cServicesDir=new File(System.getProperty("basedir"),"target/generated-classes/cobertura/META-INF/services");  cServicesDir.mkdirs();  File cServicesFile=new File(cServicesDir,"javax.faces.context.FacesContextFactory");  if (cServicesFile.exists()) {    cServicesFile.delete();  }  PrintWriter cWriter=new PrintWriter(cServicesFile);  cWriter.println("javax.faces.mock.MockFacesContextFactoryExtender");  cWriter.flush();  cWriter.close();  for (i=0, len=FACTORIES.length; i < len; i++) {    clazz=Class.forName(FACTORIES[i][0]);    factory=FactoryFinder.getFactory(FACTORIES[i][0]);    assertTrue("Factory for " + clazz.getName() + " not of expected type.",clazz.isAssignableFrom(factory.getClass()));    clazz=Class.forName(FACTORIES[i][1]);    assertTrue("Factory " + FACTORIES[i][1] + " not of expected type",clazz.isAssignableFrom(factory.getClass()));  }  assertTrue(System.getProperty(FACTORIES[2][0]).equals("javax.faces.mock.MockFacesContextFactoryExtender"));  assertTrue(System.getProperty("oldImpl").equals("com.sun.faces.mock.MockFacesContextFactory"));  servicesFile.delete();  cServicesFile.delete();}  }
class C{  public static boolean isVoiceMailNumber(String number){  String vmNumber;  try {    if (MSimTelephonyManager.getDefault().isMultiSimEnabled()) {      int subscription=MSimTelephonyManager.getDefault().getPreferredVoiceSubscription();      vmNumber=MSimTelephonyManager.getDefault().getVoiceMailNumber(subscription);    } else {      vmNumber=TelephonyManager.getDefault().getVoiceMailNumber();    }  } catch (  SecurityException ex) {    return false;  }  number=extractNetworkPortionAlt(number);  return !TextUtils.isEmpty(number) && compare(number,vmNumber);}  }
class C{  @Override public final void perform(IR ir){  if (ir.options.getOptLevel() < ir.options.PRINT_IR_LEVEL) {    return;  }  if (!ir.options.hasMETHOD_TO_PRINT() || ir.options.fuzzyMatchMETHOD_TO_PRINT(ir.method.toString())) {    dumpIR(ir,msg);  }}  }
class C{  public void onConstruct(){  StateTracker.addTicker(this);  StateTracker.addTransition(this);}  }
class C{  private int calculateTranslation(View view){  int height=view.getHeight();  ViewGroup.MarginLayoutParams params=(ViewGroup.MarginLayoutParams)view.getLayoutParams();  int margins=params.topMargin + params.bottomMargin;  return height + margins;}  }
class C{  public int longestValidParenthesesC(String s){  Stack<Integer> st=new Stack<Integer>();  int len=s.length();  int longest=0;  for (int i=0; i < len; i++) {    if (s.charAt(i) == '(')     st.push(i); else     if (s.charAt(i) == ')' && !st.isEmpty() && s.charAt(st.peek()) == '(')     st.pop(); else     st.push(i);  }  if (st.isEmpty())   return len;  int a=len, b=0;  while (!st.isEmpty()) {    b=st.pop();    longest=Math.max(longest,a - b - 1);    a=b;  }  longest=Math.max(longest,a);  return longest;}  }
class C{  @Override public void write(int theByte) throws java.io.IOException {  if (suspendEncoding) {    this.out.write(theByte);    return;  }  if (encode) {    buffer[position++]=(byte)theByte;    if (position >= bufferLength) {      this.out.write(encode3to4(b4,buffer,bufferLength,options));      lineLength+=4;      if (breakLines && lineLength >= MAX_LINE_LENGTH) {        this.out.write(NEW_LINE);        lineLength=0;      }      position=0;    }  } else {    if (decodabet[theByte & 0x7f] > WHITE_SPACE_ENC) {      buffer[position++]=(byte)theByte;      if (position >= bufferLength) {        int len=Base64.decode4to3(buffer,0,b4,0,options);        out.write(b4,0,len);        position=0;      }    } else     if (decodabet[theByte & 0x7f] != WHITE_SPACE_ENC) {      throw new java.io.IOException("Invalid character in Base64 data.");    }  }}  }
class C{  public Commitment commit(byte[] message){  if (message.length > byteLength / 2) {    throw new DataLengthException("Message to be committed to too large for digest.");  }  byte[] w=new byte[byteLength - message.length];  random.nextBytes(w);  return new Commitment(w,calculateCommitment(w,message));}  }
class C{  private void removeEmotes(String room){  EmoticonUpdate update=new EmoticonUpdate(null,Emoticon.Type.FFZ,Emoticon.SubType.EVENT,room);  listener.channelEmoticonsReceived(update);}  }
class C{  private void reCreateDBSchema(){  s_logger.log(Level.FINE,"recreateDBSchema",new Object[]{getSchema(),getDirection()});  connectDatabaseSystem();  dropDBSchema();  createDBSchema();  connectDatabase();  s_logger.log(Level.FINE,"dbSchemaRecreated",getSchema());  s_logger.flush();}  }
class C{  protected void fireCreationEvent(){  fireEvent(new DebugEvent(this,DebugEvent.CREATE));}  }
class C{  public void removeCell(int x,int y){  Map<Integer,Cell<C>> xCol=cellLookup.get(x);  if (null != xCol) {    cells.remove(xCol.remove(y));  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:28.458 -0500",hash_original_method="F1240C06AF1BA9E648B2E780B8155F1C",hash_generated_method="F25A5C2CD89FC9EEA36613EED4E803A6") public boolean isValid(){  return getTaintBoolean();}  }
class C{  public synchronized boolean isIdle(){  return idleStartTimeNs != 0L;}  }
class C{  public static int size(Container self){  return self.getComponentCount();}  }
class C{  public static CLabel createWrapCLabel(Composite parent,String text,Image image,int hspan,int wrapwidth){  CLabel label=new CLabel(parent,SWT.NONE | SWT.WRAP);  label.setFont(parent.getFont());  if (text != null) {    label.setText(text);  }  if (image != null) {    label.setImage(image);  }  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  gd.widthHint=wrapwidth;  label.setLayoutData(gd);  return label;}  }
class C{  public static void quietAndWarn(IgniteLogger log,Object msg){  quietAndWarn(log,msg,msg);}  }
class C{  protected void respondWithError(HttpServletResponse resp,int statusCode,String message) throws IOException {  resp.sendError(statusCode,message);}  }
class C{  private void processPhiUse(SsaInsn use,EscapeSet escSet,ArrayList<RegisterSpec> regWorklist){  int setIndex=findSetIndex(use.getResult());  if (setIndex != latticeValues.size()) {    EscapeSet mergeSet=latticeValues.get(setIndex);    if (mergeSet != escSet) {      escSet.replaceableArray=false;      escSet.regSet.or(mergeSet.regSet);      if (escSet.escape.compareTo(mergeSet.escape) < 0) {        escSet.escape=mergeSet.escape;      }      replaceNode(escSet,mergeSet);      latticeValues.remove(setIndex);    }  } else {    escSet.regSet.set(use.getResult().getReg());    regWorklist.add(use.getResult());  }}  }
class C{  @Override public void onAlterTable(AlterTableEvent event) throws MetaException {  try {    Set<ReadEntity> readEntities=new HashSet<>();    readEntities.add(new ReadEntity(new Table(event.getOldTable())));    Set<WriteEntity> writeEntities=new HashSet<>();    writeEntities.add(new WriteEntity(new Table(event.getNewTable()),WriteType.INSERT));    run(readEntities,writeEntities,HiveOperation.THRIFT_ALTER_TABLE);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public void onSessionEnded(final long sessionDurationSeconds){  if (ENABLED) {    track("Session Ended",mPropsGenerator.makeDurationProps(sessionDurationSeconds));  }}  }
class C{  protected void updateOverlayColor(@WorldWind.NavigatorAction int eventAction){  int color=(eventAction == WorldWind.NAVIGATOR_STOPPED) ? 0xA0FFFF00 : Color.YELLOW;  latView.setTextColor(color);  lonView.setTextColor(color);  altView.setTextColor(color);}  }
class C{  public void stateChanged(ChangeEvent e){  if (centerPane.getSelectedIndex() == m_tabActivities) {    wfActivity.loadActivities();  }}  }
class C{  JavacScope(Env<AttrContext> env){  env.getClass();  this.env=env;}  }
class C{  public BST(){}  }
class C{  public int successfulShards(){  return successfulShards;}  }
class C{  private void initSubstitutionModel(SubstitutionModel model){  DataType dataType=model.getDataType();  int stateCount=dataType.getStateCount();  iTrans=new double[iTau.length][stateCount][stateCount];  double[] transProb=new double[stateCount * stateCount];  int count;  for (int i=0; i < iTau.length; i++) {    model.getTransitionProbabilities(iTau[i],transProb);    count=0;    for (int j=0; j < stateCount; j++) {      for (int k=0; k < stateCount; k++) {        iTrans[i][j][k]=transProb[count];        count+=1;      }    }  }  iEquil=new double[stateCount];  for (int k=0; k < stateCount; k++) {    iEquil[k]=model.getFrequencyModel().getFrequency(k);  }}  }
class C{  public void addFileTransferInvitationRejected(ContactId contact,MmContent content,MmContent fileIcon,ReasonCode reasonCode,long timestamp,long timestampSent){  String fileTransferId=IdGenerator.generateMessageID();  mMessagingLog.addOneToOneFileTransfer(fileTransferId,contact,Direction.INCOMING,content,fileIcon,State.REJECTED,reasonCode,timestamp,timestampSent,FileTransferData.UNKNOWN_EXPIRATION,FileTransferData.UNKNOWN_EXPIRATION);  mOneToOneFileTransferBroadcaster.broadcastInvitation(fileTransferId);}  }
class C{  public TeXParser(boolean isPartial,String parseString,TeXFormula formula,boolean firstpass){  this.formula=formula;  this.isPartial=isPartial;  if (parseString != null) {    this.parseString=new StringBuffer(parseString);    this.len=parseString.length();    this.pos=0;    if (firstpass) {      firstpass();    }  } else {    this.parseString=null;    this.pos=0;    this.len=0;  }}  }
class C{  public static void main(String[] args){  runFileSaver(new SVMLightSaver(),args);}  }
class C{  private void schedWait(){  schedulerIsAwake=false;  assert Thread.currentThread() == scheduler;  while (!schedulerIsAwake) {    try {      scheduler.wait(1);    } catch (    InterruptedException e) {    }  }}  }
class C{  public static RuntimeException throwInternalError(){  return throwInternalError("Unexpected code path");}  }
class C{  @Override public String toString(){  return "Action: " + this.action;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:13.133 -0500",hash_original_method="4EDA0197C585E6B2A33216D89691E993",hash_generated_method="47998B70C2658DBDED4D069DD5945833") private boolean isTouchCandidate(int x,int y,Rect destRect,int direction){  if (DroidSafeAndroidRuntime.control)   throw new IllegalArgumentException("direction must be one of " + "{FOCUS_UP, FOCUS_DOWN, FOCUS_LEFT, FOCUS_RIGHT}.");  return (((x + y + destRect.getTaintInt()+ direction)) == 1);}  }
class C{  @Override public void close(){  if (clientHandle == null) {    clientHandle=mqttService.getClient(serverURI,clientId,myContext.getApplicationInfo().packageName,persistence);  }  mqttService.close(clientHandle);}  }
class C{  public int indexOf(Object o){  int index=0;  for (Entry e=header.next; e != header; e=e.next) {    if (o == e.element) {      return index;    }    index++;  }  return -1;}  }
class C{  private void removeListeners(){  if (server != null) {    final VersionControlEventEngine vcEventEngine=server.getConnection().getVersionControlClient().getEventEngine();    vcEventEngine.removeWorkspaceCreatedListener(workspaceListener);    vcEventEngine.removeWorkspaceDeletedListener(workspaceListener);    vcEventEngine.removeWorkspaceUpdatedListener(workspaceListener);    final WorkItemEventEngine wiEventEngine=server.getConnection().getWorkItemClient().getEventEngine();    wiEventEngine.removeWorkItemSaveListener(workItemSaveListener);  }  if (repository != null) {    repository.getPendingChangeCache().removeListener(pendingChangeCacheListener);  }  if (workspace != null) {    final VersionControlEventEngine vcEventEngine=workspace.getClient().getEventEngine();    vcEventEngine.removePendingChangesChangedListener(corePendingChangeListener);    vcEventEngine.removePendingChangeCandidatesChangedListener(coreCandidateListener);    vcEventEngine.removeLocalWorkspaceScanListener(coreLocalWorkspaceScanListener);  }}  }
class C{  private boolean feedToCrawler(){  int added=0;  if (!this.urlstack.isEmpty()) {    final CrawlProfile profile=sb.crawler.defaultTextSnippetGlobalProfile;    for (    DigestURL url : this.urlstack) {      final Request request=sb.loader.request(url,true,true);      String acceptedError=sb.crawlStacker.checkAcceptanceChangeable(url,profile,0);      if (!includefailed && acceptedError == null) {        acceptedError=sb.crawlStacker.checkAcceptanceInitially(url,profile);      }      if (acceptedError != null) {        ConcurrentLog.info(THREAD_NAME,"addToCrawler: cannot load " + url.toNormalform(true) + ": "+ acceptedError);        continue;      }      final String s;      s=sb.crawlQueues.noticeURL.push(NoticedURL.StackType.LOCAL,request,profile,sb.robots);      if (s != null) {        ConcurrentLog.info(THREAD_NAME,"addToCrawler: failed to add " + url.toNormalform(true) + ": "+ s);      } else {        added++;      }    }    this.urlstack.clear();  }  return (added > 0);}  }
class C{  public InputMethodContext(){  super();}  }
class C{  protected static void checkIndexColumnTypes(IndexColumn[] columns){  for (  IndexColumn c : columns) {    int type=c.column.getType();    if (type == Value.CLOB || type == Value.BLOB) {      throw DbException.getUnsupportedException("Index on BLOB or CLOB column: " + c.column.getCreateSQL());    }  }}  }
class C{  public ResourceAndInfo buildResourceAndInfo(IResource resource,Repository repository) throws CoreException, IOException {  return buildResourceAndInfo(resource,repository,false);}  }
class C{  private static Map<String,Integer> optionArgDefs(){  Map<String,Integer> optionMap=new HashMap<>(32);  optionMap.put("uw",0);  optionMap.put("rw",0);  optionMap.put("e",1);  optionMap.put("o",1);  optionMap.put("of",1);  optionMap.put("m",1);  optionMap.put("mf",1);  optionMap.put("n",1);  optionMap.put("r",1);  optionMap.put("bw",0);  optionMap.put("a",0);  optionMap.put("b",1);  optionMap.put("ef",1);  optionMap.put("wi",1);  optionMap.put("fmc",1);  optionMap.put("tmp",1);  optionMap.put("p",1);  optionMap.put("s",0);  optionMap.put("rand",1);  optionMap.put("localTM",0);  optionMap.put("localTMout",1);  optionMap.put("seq",0);  optionMap.put("niw",1);  optionMap.put("sb",0);  optionMap.put("pt",1);  optionMap.put("ifw",1);  return optionMap;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.ENTRY_POINT_SPEC__ENTRYPOINT:    return getEntrypoint();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @Before public void cleanUpDb(){  CassandraTokenManager tokenManagerCleanup=new CassandraTokenManager();  tokenManagerCleanup.setDbClient(_dbClient);  tokenManagerCleanup.setCoordinator(_coordinator);  RequestedTokenHelper requestedTokenMapHelper=new RequestedTokenHelper();  requestedTokenMapHelper.setDbClient(_dbClient);  requestedTokenMapHelper.setCoordinator(_coordinator);  tokenManagerCleanup.setTokenMapHelper(requestedTokenMapHelper);  tokenManagerCleanup.deleteAllTokensForUser("user1",true);}  }
class C{  public static void releaseSharedSegment(Segment segment){  getSharedInstance().releaseSegment(segment);}  }
class C{  public static void close(ResultSet rs){  try {    if (rs != null)     rs.close();  } catch (  SQLException e) {    ;  }}  }
class C{  public double falsePositiveRate(int classindex){  int fp=falsePositives(classindex);  int tn=trueNegatives(classindex);  return ((double)fp) / ((double)(fp + tn));}  }
class C{  public S_Reflex createS_Reflex(){  S_ReflexImpl s_Reflex=new S_ReflexImpl();  return s_Reflex;}  }
class C{  public void stopFrameHandlerUpdate(){  doit=false;}  }
class C{  public void add(P preImage,I image){  I img=map.get(preImage);  if (img != null) {    inverse.remove(img);  }  map.put(preImage,image);  inverse.put(image,preImage);}  }
class C{  public boolean isColumnCollapsed(int columnIndex){  return mCollapsedColumns.get(columnIndex);}  }
class C{  public final void testGetParams(){  assertEquals("wrong params value",params,ecpks.getParams());}  }
class C{  public LogArchiveWriter(Path outputPath,LogArchiveBase archiveBase){  this.outputPath=outputPath;  this.archiveBase=archiveBase;  this.linkingInfoBuilder=new LinkingInfoBuilder(MessageLogProperties.getHashAlg(),archiveBase);  this.logArchiveCache=new LogArchiveCache(null,linkingInfoBuilder);}  }
class C{  void scrapActiveViews(){  final View[] activeViews=this.activeViews;  final int[] activeViewTypes=this.activeViewTypes;  final boolean multipleScraps=viewTypeCount > 1;  SparseArray<View> scrapViews=currentScrapViews;  final int count=activeViews.length;  for (int i=count - 1; i >= 0; i--) {    final View victim=activeViews[i];    if (victim != null) {      int whichScrap=activeViewTypes[i];      activeViews[i]=null;      activeViewTypes[i]=-1;      if (!shouldRecycleViewType(whichScrap)) {        continue;      }      if (multipleScraps) {        scrapViews=this.scrapViews[whichScrap];      }      scrapViews.put(i,victim);      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {        victim.setAccessibilityDelegate(null);      }    }  }  pruneScrapViews();}  }
class C{  public Iterator<Key> iterator(){  return st.keySet().iterator();}  }
class C{  ContentModel parseContentModel() throws IOException {  ContentModel m=null;switch (ch) {case '(':    ch=in.read();  skipParameterSpace();ContentModel e=parseContentModel();if (ch != ')') {m=new ContentModel(ch,e);do {  ch=in.read();  skipParameterSpace();  e.next=parseContentModel();  if (e.next.type == m.type) {    e.next=(ContentModel)e.next.content;  }  for (; e.next != null; e=e.next)   ;} while (ch == m.type);} else {m=new ContentModel(',',e);}expect(')');break;case '#':ch=in.read();if (parseIdentifier(true)) {m=new ContentModel('*',new ContentModel(dtd.getElement("#" + getString(0))));} else {error("invalid","content model");}break;default :if (parseIdentifier(true)) {m=new ContentModel(dtd.getElement(getString(0)));} else {error("invalid","content model");}break;}switch (ch) {case '?':case '*':case '+':m=new ContentModel(ch,m);ch=in.read();break;}skipParameterSpace();return m;}  }
class C{  private void removeChunk(final MemoryChunk chunk){  Preconditions.checkNotNull(chunk,"Error: Memory chunk can't be null");  m_chunks.remove(chunk);}  }
class C{  public boolean isFail(String testPath){  for (  String prefix : getPrefixes(testPath)) {    if (mFailList.contains(prefix)) {      return true;    }  }  return false;}  }
class C{  public void resetYRotations(){  rotateAngleY=initRotateAngleY;}  }
class C{  public boolean requiresFullScan(){  return usesRelevance() || usesSorting() || refresh && isEmpty();}  }
class C{  public TextEditor indent(int spaces){  StringBuffer sb=new StringBuffer(spaces);  for (int i=0; i < spaces; i++) {    sb.append(' ');  }  return replaceAll("^",sb.toString());}  }
class C{  public String toString(){  StringBuffer result=new StringBuffer();  for (int i=0; i < value.length; i++) {    byte b=value[i];    int n=(b >= 0) ? b : b + 256;    result.append(Character.forDigit(n / 16,16));    result.append(Character.forDigit(n % 16,16));  }  return result.toString();}  }
class C{  private synchronized static void log(int logType,String tag,String message,int methodCount){  if (settings.logLevel == LogLevel.NONE) {    return;  }  logTopBorder(logType,tag);  logHeaderContent(logType,tag,methodCount);  byte[] bytes=message.getBytes();  int length=bytes.length;  if (length <= CHUNK_SIZE) {    if (methodCount > 0) {      logDivider(logType,tag);    }    logContent(logType,tag,message);    logBottomBorder(logType,tag);    return;  }  if (methodCount > 0) {    logDivider(logType,tag);  }  for (int i=0; i < length; i+=CHUNK_SIZE) {    int count=Math.min(length - i,CHUNK_SIZE);    logContent(logType,tag,new String(bytes,i,count));  }  logBottomBorder(logType,tag);}  }
class C{  public boolean hasConnectionParam(){  return this.hasConnectionParam;}  }
class C{  public boolean isProductionBOM(){  return m_productionBOM;}  }
class C{  public static EdgeListGraph serializableInstance(){  return new EdgeListGraph();}  }
class C{  public HTTPLSServer(java.nio.ByteBuffer bb,java.nio.channels.SocketChannel sake){  this.readBuf=bb;  this.sake=sake;  timeout=Sage.getLong("http_timeout",30000);  Pooler.execute(this,"HTTPRequest",Thread.NORM_PRIORITY);  writeBuf=java.nio.ByteBuffer.allocate(65536);  String bwOptions=Sage.get("httpls_bandwidth_options","160,320,864,64");  java.util.StringTokenizer toker=new java.util.StringTokenizer(bwOptions,",");  bandwidths=new int[toker.countTokens()];  int i=0;  while (toker.hasMoreTokens()) {    try {      bandwidths[i++]=Integer.parseInt(toker.nextToken()) * 1000;    } catch (    NumberFormatException nfe) {      if (Sage.DBG)       System.out.println("Invalid HTTPLS bandwidth specified: " + nfe);      bandwidths[i++]=320;    }  }  partDur=Sage.getInt("httpls_part_duration_sec",5);synchronized (cleanerLock) {    if (!builtCleaner) {      builtCleaner=true;      Thread t=new Thread(new HTTPLSCleaner(),"HTTPLSCleaner");      t.setDaemon(true);      t.setPriority(Thread.MIN_PRIORITY);      t.start();    }  }}  }
class C{  static void initControler(MatsimConfigType matsim4urbansimConfigPart1,Config config){  log.info("Setting ControlerConfigGroup to config...");  int firstIteration=matsim4urbansimConfigPart1.getFirstIteration().intValue();  int lastIteration=matsim4urbansimConfigPart1.getLastIteration().intValue();  ControlerConfigGroup controlerCG=config.controler();  controlerCG.setFirstIteration(firstIteration);  controlerCG.setLastIteration(lastIteration);  UrbanSimParameterConfigModuleV3 module=getUrbanSimParameterConfigAndPossiblyConvert(config);  controlerCG.setOutputDirectory(module.getMATSim4OpusOutput());  controlerCG.setWriteSnapshotsInterval(0);  controlerCG.setMobsim(QSimConfigGroup.GROUP_NAME);  log.info("...done!");}  }
class C{  public void stepCompleted(StepEvent event){  failure("Got StepEvent which was deleted");}  }
class C{  public void testMovePointRightPosGreater(){  String a="1231212478987482988429808779810457634781384756794987";  int aScale=28;  int shift=18;  int resScale=10;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=aNumber.movePointRight(shift);  assertTrue("incorrect scale",bNumber.scale() == resScale);  assertTrue("incorrect value",bNumber.unscaledValue().toString().equals(a));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:33.484 -0500",hash_original_method="545A7868DCB44F353BBAB91C69F027BF",hash_generated_method="B42758890B055B88E8A59DAD553803B2") public boolean isCspPlmnEnabled(){  return mCspPlmnEnabled;}  }
class C{  public int size(){  return mLayers.size();}  }
class C{  @POST public ExternalType createObject(ExternalType object) throws GuacamoleException {  if (object == null)   throw new GuacamoleClientException("Data must be submitted when creating objects.");  directory.add(translator.toInternalObject(object));  return object;}  }
class C{  @Override protected void paintTabBorder(Graphics g,int tabPlacement,int tabIndex,int x,int y,int w,int h,boolean isSelected){  g.setColor(isSelected ? darkShadow : shadow);switch (tabPlacement) {case LEFT:    g.drawLine(x + 1,y + h - 2,x + 1,y + h - 2);  g.drawLine(x,y + 2,x,y + h - 3);g.drawLine(x + 1,y + 1,x + 1,y + 1);g.drawLine(x + 2,y,x + w - 1,y);g.drawLine(x + 2,y + h - 2,x + w - 1,y + h - 2);g.drawLine(x + 2,y + h - 1,x + w - 1,y + h - 1);break;case RIGHT:g.drawLine(x,y,x + w - 3,y);g.drawLine(x,y + h - 2,x + w - 3,y + h - 2);g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 3);g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1);g.drawLine(x + w - 2,y + h - 2,x + w - 2,y + h - 2);g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 3);g.drawLine(x,y + h - 1,x + w - 3,y + h - 1);break;case BOTTOM:g.drawLine(x,y,x,y + h - 2);g.drawLine(x + 1,y + h - 2,x + w - 1,y + h - 2);g.drawLine(x + w - 1,y,x + w - 1,y + h - 2);break;case TOP:default :g.drawLine(x,y + 2,x,y + h - 1);g.drawLine(x + 1,y + 1,x + 1,y + 1);g.drawLine(x + 2,y,x + w - 3,y);g.drawLine(x + w - 2,y + 2,x + w - 2,y + h - 1);g.drawLine(x + w - 1,y + 2,x + w - 1,y + h - 1);g.drawLine(x + w - 2,y + 1,x + w - 2,y + 1);}}  }
class C{  public static void showProgress(View view){  pool.showProgress(view);}  }
class C{  public void testMaxTokenLength() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Capitalization","maxTokenLength","2").create(stream);  assertTokenStreamContents(stream,new String[]{"this","is","A","test"});}  }
class C{  private List<EnumConstantDeclaration> generateEnumConstantDeclarations(){  return declaratorList.stream().map(null).collect(Collectors.toList());}  }
class C{  public V put(K key,V value){synchronized (this) {    Map<K,V> newMap=new HashMap<K,V>(internalMap);    V val=newMap.put(key,value);    internalMap=newMap;    return val;  }}  }
class C{  private void generate(CacheTransactionManager txMgr) throws SAXException {  if (this.version.compareTo(CacheXmlVersion.GEMFIRE_4_0) < 0) {    return;  }  if (txMgr == null) {    return;  }  if (!generateDefaults() && txMgr.getWriter() == null && txMgr.getListeners().length == 0) {    return;  }  handler.startElement("",TRANSACTION_MANAGER,TRANSACTION_MANAGER,EMPTY);{    TransactionListener[] listeners=txMgr.getListeners();    for (int i=0; i < listeners.length; i++) {      generate(TRANSACTION_LISTENER,listeners[i]);    }    if (txMgr.getWriter() != null) {      generate(TRANSACTION_WRITER,txMgr.getWriter());    }  }  handler.endElement("",TRANSACTION_MANAGER,TRANSACTION_MANAGER);}  }
class C{  private void testOrderedIndexes() throws SQLException {  deleteDb("optimizations");  Connection conn=getConnection("optimizations");  Statement stat=conn.createStatement();  stat.execute("CREATE TABLE my_table(K1 INT, K2 INT, " + "VAL VARCHAR, PRIMARY KEY(K1, K2))");  stat.execute("CREATE INDEX my_index ON my_table(K1, VAL)");  ResultSet rs=stat.executeQuery("EXPLAIN PLAN FOR SELECT * FROM my_table WHERE K1=7 " + "ORDER BY K1, VAL");  rs.next();  assertContains(rs.getString(1),"/* PUBLIC.MY_INDEX: K1 = 7 */");  stat.execute("DROP TABLE my_table");  stat.execute("CREATE TABLE my_table(K1 INT, K2 INT, VAL VARCHAR)");  stat.execute("CREATE INDEX my_index1 ON my_table(K1, K2)");  stat.execute("CREATE INDEX my_index2 ON my_table(K1, K2, VAL)");  rs=stat.executeQuery("EXPLAIN PLAN FOR SELECT * FROM my_table WHERE K1=7 " + "ORDER BY K1, K2, VAL");  rs.next();  assertContains(rs.getString(1),"/* PUBLIC.MY_INDEX2: K1 = 7 */");  conn.close();}  }
class C{  public TInput(String type,String name,TOutput output){  super(type,name);  this.connectedOutput=output;}  }
class C{  public static void dumpCursor(Cursor cursor,StringBuilder sb){  sb.append(">>>>> Dumping cursor " + cursor + "\n");  if (cursor != null) {    int startPos=cursor.getPosition();    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      dumpCurrentRow(cursor,sb);    }    cursor.moveToPosition(startPos);  }  sb.append("<<<<<\n");}  }
class C{  public void destroy() throws SailException, InterruptedException, ExecutionException {  shutDown();  AbstractApiTask.submitApiTask(indexManager,new DestroyKBTask(namespace)).get();}  }
class C{  public int size(){  return size;}  }
class C{  public boolean hasReturnOverall(){  return getReturnOverall() != null;}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","hut");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public ClipDescription(ClipDescription o){  mLabel=o.mLabel;  mMimeTypes=o.mMimeTypes;}  }
class C{  public static RelationalOpExpression neq(Expression left,Expression right){  return new RelationalOpExpression(left,"!=",right);}  }
class C{  private void initIpReconfig(ClusterIpInfo clusterIpInfo,String postOperation) throws Exception {  ClusterIpInfo ipinfo=new ClusterIpInfo(clusterIpInfo.getIpv4Setting(),clusterIpInfo.getIpv6Setting());  log.info("Initiating ip reconfiguraton procedure {}",ipinfo.toString());  ConfigurationImpl cfg=new ConfigurationImpl();  cfg.setKind(IpReconfigConstants.CONFIG_KIND);  cfg.setId(IpReconfigConstants.CONFIG_ID);  cfg.setConfig(IpReconfigConstants.CONFIG_IPINFO_KEY,new String(Base64.encodeBase64(ipinfo.serialize()),UTF_8));  cfg.setConfig(IpReconfigConstants.CONFIG_STATUS_KEY,ClusterNetworkReconfigStatus.Status.STARTED.toString());  for (int i=1; i <= ipinfo.getIpv4Setting().getNetworkAddrs().size(); i++) {    String nodestatus_key=String.format(IpReconfigConstants.CONFIG_NODESTATUS_KEY,i);    cfg.setConfig(nodestatus_key,IpReconfigConstants.NodeStatus.None.toString());  }  expiration_time=System.currentTimeMillis() + IPRECONFIG_TIMEOUT;  cfg.setConfig(IpReconfigConstants.CONFIG_EXPIRATION_KEY,String.valueOf(expiration_time));  cfg.setConfig(IpReconfigConstants.CONFIG_POST_OPERATION_KEY,postOperation);  config=cfg;  _coordinator.getCoordinatorClient().persistServiceConfiguration(config);}  }
class C{  @Override public PortTcp port(){  return _port;}  }
class C{  public void clearDirty(int index){  dirty[index - firstIndex]=Integer.MIN_VALUE;}  }
class C{  public static float[] toPrimitive(Float[] array){  if (array == null) {    return null;  } else   if (array.length == 0) {    return EMPTY_FLOAT_ARRAY;  }  final float[] result=new float[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].floatValue();  }  return result;}  }
class C{  public static Properties propertiesDecode(String data){  String result=null;  try {    result=URLDecoder.decode(data,WebEnv.ENCODING);  } catch (  UnsupportedEncodingException e) {    log.log(Level.SEVERE,"decode" + WebEnv.ENCODING,e);    String enc=System.getProperty("file.encoding");    try {      result=URLEncoder.encode(data,enc);      log.log(Level.SEVERE,"decode: " + enc);    } catch (    Exception ex) {      log.log(Level.SEVERE,"decode",ex);    }  }  ByteArrayInputStream bis=new ByteArrayInputStream(result.getBytes());  Properties pp=new Properties();  try {    pp.load(bis);  } catch (  IOException e) {    log.log(Level.SEVERE,"load",e);  }  return pp;}  }
class C{  public CUevent(){}  }
class C{  public boolean isTypeWildcard(){  return getType().equals("*");}  }
class C{  public void delete(String name) throws IOException {  if (name.equalsIgnoreCase(DN_NAME)) {    dnName=null;    dnPrincipal=null;  } else {    throw new IOException("Attribute name not recognized by " + "CertAttrSet:CertificateIssuerName.");  }}  }
class C{  public Type peek(){  if (top < 1)   throw new IndexOutOfBoundsException("Stack is empty");  return stack[top - 1];}  }
class C{  public static String charAt(String source,int posIndex){  if (source == null || source.length() == 0 || posIndex < 0 || posIndex >= source.length())   return null;  try {    return (source.substring(posIndex + 1,posIndex + 2));  } catch (  Exception e) {  }  return null;}  }
class C{  public void deleteVideoSharing(String sharingId) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    mApi.deleteVideoSharing(sharingId);  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static final Move UCIstringToMove(String move){  Move m=null;  if ((move.length() < 4) || (move.length() > 5))   return m;  int fromSq=TextIO.getSquare(move.substring(0,2));  int toSq=TextIO.getSquare(move.substring(2,4));  if ((fromSq < 0) || (toSq < 0)) {    return m;  }  char prom=' ';  boolean white=true;  if (move.length() == 5) {    prom=move.charAt(4);    if (Position.getY(toSq) == 7) {      white=true;    } else     if (Position.getY(toSq) == 0) {      white=false;    } else {      return m;    }  }  int promoteTo;switch (prom) {case ' ':    promoteTo=Piece.EMPTY;  break;case 'q':promoteTo=white ? Piece.WQUEEN : Piece.BQUEEN;break;case 'r':promoteTo=white ? Piece.WROOK : Piece.BROOK;break;case 'b':promoteTo=white ? Piece.WBISHOP : Piece.BBISHOP;break;case 'n':promoteTo=white ? Piece.WKNIGHT : Piece.BKNIGHT;break;default :return m;}m=new Move(fromSq,toSq,promoteTo);return m;}  }
class C{  private static void copyToVOAttributes(ConfigurationSetting domObj,VOConfigurationSetting voObj){  voObj.setInformationId(domObj.getInformationId());  voObj.setValue(domObj.getValue());  voObj.setContextId(domObj.getContextId());}  }
class C{  public TransactionMetaData(final BlockHeight blockHeight,final Long id,final Hash hash,final Hash innerHash){  this.height=blockHeight;  this.id=id;  this.hash=hash;  this.innerHash=innerHash;}  }
class C{  public T object(String value){  return attr("object",value);}  }
class C{  public static String typeToString(int type){  String result;switch (type) {case NUMERIC:    result="numeric";  break;case NOMINAL:result="nominal";break;case STRING:result="string";break;case DATE:result="date";break;case RELATIONAL:result="relational";break;default :result="unknown(" + type + ")";}return result;}  }
class C{  public NotificationChain basicSetDoclet(Doclet newDoclet,NotificationChain msgs){  msgs=eBasicSetContainer((InternalEObject)newDoclet,DomPackage.LINE_TAG__DOCLET,msgs);  return msgs;}  }
class C{  @Override protected void handleConnectionClose(){}  }
class C{  public static double decodeLatitude(byte[] src,int offset){  return decodeLatitude(NumericUtils.sortableBytesToInt(src,offset));}  }
class C{  public static int convertToColorInt(String argb) throws NumberFormatException {  if (argb.startsWith("#")) {    argb=argb.replace("#","");  }  int alpha=-1, red=-1, green=-1, blue=-1;  if (argb.length() == 8) {    alpha=Integer.parseInt(argb.substring(0,2),16);    red=Integer.parseInt(argb.substring(2,4),16);    green=Integer.parseInt(argb.substring(4,6),16);    blue=Integer.parseInt(argb.substring(6,8),16);  } else   if (argb.length() == 6) {    alpha=255;    red=Integer.parseInt(argb.substring(0,2),16);    green=Integer.parseInt(argb.substring(2,4),16);    blue=Integer.parseInt(argb.substring(4,6),16);  }  return Color.argb(alpha,red,green,blue);}  }
class C{  public AnnotationType annotationType(Attribute.Compound a,Symbol s){  Attribute.Compound atTarget=a.type.tsym.attribute(syms.annotationTargetType.tsym);  if (atTarget == null) {    return inferTargetMetaInfo(a,s);  }  Attribute atValue=atTarget.member(names.value);  if (!(atValue instanceof Attribute.Array)) {    Assert.error("annotationType(): bad @Target argument " + atValue + " ("+ atValue.getClass()+ ")");    return AnnotationType.DECLARATION;  }  Attribute.Array arr=(Attribute.Array)atValue;  boolean isDecl=false, isType=false;  for (  Attribute app : arr.values) {    if (!(app instanceof Attribute.Enum)) {      Assert.error("annotationType(): unrecognized Attribute kind " + app + " ("+ app.getClass()+ ")");      isDecl=true;      continue;    }    Attribute.Enum e=(Attribute.Enum)app;    if (e.value.name == names.TYPE) {      if (s.kind == Kinds.TYP)       isDecl=true;    } else     if (e.value.name == names.FIELD) {      if (s.kind == Kinds.VAR && s.owner.kind != Kinds.MTH)       isDecl=true;    } else     if (e.value.name == names.METHOD) {      if (s.kind == Kinds.MTH && !s.isConstructor())       isDecl=true;    } else     if (e.value.name == names.PARAMETER) {      if (s.kind == Kinds.VAR && s.owner.kind == Kinds.MTH && (s.flags() & Flags.PARAMETER) != 0)       isDecl=true;    } else     if (e.value.name == names.CONSTRUCTOR) {      if (s.kind == Kinds.MTH && s.isConstructor())       isDecl=true;    } else     if (e.value.name == names.LOCAL_VARIABLE) {      if (s.kind == Kinds.VAR && s.owner.kind == Kinds.MTH && (s.flags() & Flags.PARAMETER) == 0)       isDecl=true;    } else     if (e.value.name == names.ANNOTATION_TYPE) {      if (s.kind == Kinds.TYP && (s.flags() & Flags.ANNOTATION) != 0)       isDecl=true;    } else     if (e.value.name == names.PACKAGE) {      if (s.kind == Kinds.PCK)       isDecl=true;    } else     if (e.value.name == names.TYPE_USE) {      if (s.kind == Kinds.TYP || s.kind == Kinds.VAR || (s.kind == Kinds.MTH && !s.isConstructor() && !s.type.getReturnType().hasTag(TypeTag.VOID)) || (s.kind == Kinds.MTH && s.isConstructor()))       isType=true;    } else     if (e.value.name == names.TYPE_PARAMETER) {    } else {      Assert.error("annotationType(): unrecognized Attribute name " + e.value.name + " ("+ e.value.name.getClass()+ ")");      isDecl=true;    }  }  if (isDecl && isType) {    return AnnotationType.BOTH;  } else   if (isType) {    return AnnotationType.TYPE;  } else {    return AnnotationType.DECLARATION;  }}  }
class C{  private RDOParameter findOrCreateParameter(List<RDOParameter> parameterList,String parameterId,int parentEntryNr){  for (  RDOParameter parameter : parameterList) {    if (parameter.getId().equals(parameterId)) {      return parameter;    }  }  RDOParameter parameter=new RDOParameter();  parameter.setParentEntryNr(parentEntryNr);  parameter.setEntryNr(sequence.nextValue());  parameter.setId(parameterId);  parameterList.add(parameter);  return parameter;}  }
class C{  public CategoryAxis(String label){  super(label);  this.lowerMargin=DEFAULT_AXIS_MARGIN;  this.upperMargin=DEFAULT_AXIS_MARGIN;  this.categoryMargin=DEFAULT_CATEGORY_MARGIN;  this.maximumCategoryLabelLines=1;  this.maximumCategoryLabelWidthRatio=0.0f;  this.categoryLabelPositionOffset=4;  this.categoryLabelPositions=CategoryLabelPositions.STANDARD;  this.tickLabelFontMap=new HashMap();  this.tickLabelPaintMap=new HashMap();  this.categoryLabelToolTips=new HashMap();  this.categoryLabelURLs=new HashMap();}  }
class C{  public RepAnalyzerPage newRepAnalyzerPage(final Path file,final boolean select){  final RepAnalyzerPage ra=new RepAnalyzerPage(file);  if (ra.repProc == null) {    GuiUtils.showErrorMsg("Could not parse replay file:",file.toString());    return null;  }  addChild(ra);  Env.MAIN_FRAME.rebuildMainPageTree();  if (select)   Env.MAIN_FRAME.multiPageComp.selectPage(ra);  return ra;}  }
class C{  public frameset addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public Criteria(Criteria criteria){  mHorizontalAccuracy=criteria.mHorizontalAccuracy;  mVerticalAccuracy=criteria.mVerticalAccuracy;  mSpeedAccuracy=criteria.mSpeedAccuracy;  mBearingAccuracy=criteria.mBearingAccuracy;  mPowerRequirement=criteria.mPowerRequirement;  mAltitudeRequired=criteria.mAltitudeRequired;  mBearingRequired=criteria.mBearingRequired;  mSpeedRequired=criteria.mSpeedRequired;  mCostAllowed=criteria.mCostAllowed;}  }
class C{  @SuppressWarnings("ConstantConditions") private static void dumpIgfs(IgniteFileSystem igfs,IgfsPath path) throws Exception {  IgfsFile file=igfs.info(path);  assert file != null;  System.out.println(file.path());  if (file.isDirectory()) {    for (    IgfsPath child : igfs.listPaths(path))     dumpIgfs(igfs,child);  } else {    try (BufferedReader br=new BufferedReader(new InputStreamReader(igfs.open(path)))){      String line=br.readLine();      while (line != null) {        System.out.println(line);        line=br.readLine();      }    }   }}  }
class C{  public long optLong(String key,long defaultValue){  try {    return this.getLong(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public Builder updateRole(Role oldRole,Role newRole){  deleteRole(oldRole);  addRole(newRole);  return this;}  }
class C{  public void search(String fullTextSearchString) throws IOException, ServiceException {  CellQuery query=new CellQuery(cellFeedUrl);  query.setFullTextQuery(fullTextSearchString);  CellFeed feed=service.query(query,CellFeed.class);  out.println("Results for [" + fullTextSearchString + "]");  for (  CellEntry entry : feed.getEntries()) {    printCell(entry);  }}  }
class C{  protected static void zdemo4(){  double[] values1={0,1,2,3};  double[] values2={0,2,4,6};  DoubleMatrix1D matrix1=new DenseDoubleMatrix1D(values1);  DoubleMatrix1D matrix2=new DenseDoubleMatrix1D(values2);  System.out.println("m1:" + matrix1);  System.out.println("m2:" + matrix2);  matrix1.assign(matrix2,cern.jet.math.Functions.pow);  System.out.println("applied:" + matrix1);}  }
class C{  public final boolean postAtFrontOfQueue(Runnable r){  return mExec.postAtFrontOfQueue(wrapRunnable(r));}  }
class C{  public AsyncHttpClient(boolean fixNoHttpResponseException,int httpPort,int httpsPort){  this(getDefaultSchemeRegistry(fixNoHttpResponseException,httpPort,httpsPort));}  }
class C{  public synchronized void removeDropTargetListener(DropTargetListener dtl){  if (dtl != null && dtListener != null) {    if (dtListener.equals(dtl))     dtListener=null; else     throw new IllegalArgumentException("listener mismatch");  }}  }
class C{  public boolean hasReturn1w(){  return getReturn1w() != null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.984 -0500",hash_original_method="FDDC66476559B51E1C65BE36B03CFE74",hash_generated_method="A720B7259EAC4DB25E0D2344508477F8") protected boolean scrollLineStart(TextView widget,Spannable buffer){  final int minScrollX=getScrollBoundsLeft(widget);  int scrollX=widget.getScrollX();  if (scrollX > minScrollX) {    widget.scrollTo(minScrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public static String convertUPCEtoUPCA(String upce){  char[] upceChars=new char[6];  upce.getChars(1,7,upceChars,0);  StringBuilder result=new StringBuilder(12);  result.append(upce.charAt(0));  char lastChar=upceChars[5];switch (lastChar) {case '0':case '1':case '2':    result.append(upceChars,0,2);  result.append(lastChar);result.append("0000");result.append(upceChars,2,3);break;case '3':result.append(upceChars,0,3);result.append("00000");result.append(upceChars,3,2);break;case '4':result.append(upceChars,0,4);result.append("00000");result.append(upceChars[4]);break;default :result.append(upceChars,0,5);result.append("0000");result.append(lastChar);break;}result.append(upce.charAt(7));return result.toString();}  }
class C{  public boolean isDurable(){  return durable;}  }
class C{  void fireMarkedOccurrencesChanged(){  firePropertyChange(RSyntaxTextArea.MARKED_OCCURRENCES_CHANGED_PROPERTY,null,null);}  }
class C{  public String resolve(CustomConfigType configTemplate,StringMap scope,String value,DataSource dataSource){  IllegalCharsConstraint illegalCharConstraint=null;  for (  CustomConfigConstraint constraint : configTemplate.getConstraints()) {    if (constraint instanceof IllegalCharsConstraint) {      illegalCharConstraint=(IllegalCharsConstraint)constraint;      break;    }  }  String systemType=CustomConfigConstants.DEFAULT_KEY;  if (scope != null) {    systemType=scope.get(CustomConfigConstants.SYSTEM_TYPE_SCOPE);    if (systemType == null) {      systemType=scope.get(CustomConfigConstants.HOST_TYPE_SCOPE);    }  }  String subExp=getMostNestedExpression(value);  String methodsRegex=getRegexWithMethodNames(METHODS_EXPRESSION);  int loopCounter=0;  while (subExp != null && loopCounter < MAX_LOOP) {    loopCounter++;    String fullExpression=value;    logger.info("subExp is " + subExp);    String subExpFull="(" + subExp + ")";    Pattern p=Pattern.compile("(" + Pattern.quote(subExpFull) + "("+ methodsRegex+ "))");    Matcher m=p.matcher(value);    List<String> methods=new ArrayList<String>();    if (m.find()) {      fullExpression=m.group(1);      logger.info("full expression is " + fullExpression);      String[] tokens=m.group(2).split(DOT_EXPRESSION);      int size=tokens.length;      if (size > 1) {        methods.add(" ");        for (int i=1; i < size; i++) {          methods.add(tokens[i]);        }      }    }    String rsubExp=resolveSubExpression(subExp,dataSource,illegalCharConstraint,systemType);    subExp=processStringMethods(methods.toArray(new String[methods.size()]),rsubExp);    value=value.replace(fullExpression,subExp);    subExp=getMostNestedExpression(value);  }  value=resolveSubExpression(value,dataSource,illegalCharConstraint,systemType);  if (StringUtils.isEmpty(value.trim())) {    throw CustomConfigControllerException.exceptions.resolvedCustomNameEmpty(configTemplate.getName());  }  return value;}  }
class C{  public int high(){  return mHi;}  }
class C{  static public void testWebServiceCall(HttpServletRequest request,HttpServletResponse response,ServletContext servletContext) throws ServletException, IOException {  PrintWriter out=response.getWriter();  out.println("<b>OSCM web service call test</b></br></br>");  getWebServiceClientProperties(out);  try {    createServiceProxy().getSubscriptionKeysForSessionId("xxxx");    out.println("Request SOAP message: </br>" + VersionHandler.getMessage() + "</br>");    out.println("OSCM web service call was successful.");  } catch (  Exception e) {    out.println("Error calling OSCM web service:</br></br>");    out.println(e.getMessage() + "</br>");    if (e.getCause() != null) {      out.println(e.getCause().getMessage() + "</br>");    }  }}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.500 -0500",hash_original_method="CEC6E945D8554F36BF71D2D38B61B7EF",hash_generated_method="5294EA3365F0D553D067410AB35C1AA8") public Intent putExtra(String name,char[] value){  mExtras.put(name,value);  return this;}  }
class C{  private final void addOrder(int ch,int anOrder){  int order=mapping.elementAt(ch);  if (order >= RBCollationTables.CONTRACTCHARINDEX) {    int length=1;    if (Character.isSupplementaryCodePoint(ch)) {      length=Character.toChars(ch,keyBuf,0);    } else {      keyBuf[0]=(char)ch;    }    addContractOrder(new String(keyBuf,0,length),anOrder);  } else {    mapping.setElementAt(ch,anOrder);  }}  }
class C{  public static Workflow.Method rollbackCreateVolumesMethod(URI systemURI,List<URI> volumeURIs){  return new Workflow.Method("rollBackCreateVolumes",systemURI,volumeURIs);}  }
class C{  public void addNode(Node t){  contents.add(t);  t.setBlock(this);}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:50.195 -0500",hash_original_method="561B574EC53AB1A329985993E495C9F0",hash_generated_method="1DCBA1D03F3F996ED1B58E40CD13370A") public NdefRecord(byte[] data) throws FormatException {  mFlags=0;  mTnf=0;  mType=null;  mId=null;  mPayload=null;  if (parseNdefRecord(data) == -1) {    throw new FormatException("Error while parsing NDEF record");  }}  }
class C{  public void readUTCTime() throws IOException {  if (tag == ASN1Constants.TAG_UTCTIME) {switch (length) {case ASN1UTCTime.UTC_HM:case ASN1UTCTime.UTC_HMS:      break;case ASN1UTCTime.UTC_LOCAL_HM:case ASN1UTCTime.UTC_LOCAL_HMS:    throw new ASN1Exception("ASN.1 UTCTime: local time format is not supported");default :  throw new ASN1Exception("ASN.1 UTCTime: wrong length, identifier at " + tagOffset);}readContent();if (buffer[offset - 1] != 'Z') {throw new ASN1Exception("ASN.1 UTCTime wrongly encoded at [" + contentOffset + ']');}if (times == null) {times=new int[7];}times[0]=strToInt(contentOffset,2);if (times[0] > 49) {times[0]+=1900;} else {times[0]+=2000;}times[1]=strToInt(contentOffset + 2,2);times[2]=strToInt(contentOffset + 4,2);times[3]=strToInt(contentOffset + 6,2);times[4]=strToInt(contentOffset + 8,2);if (length == ASN1UTCTime.UTC_HMS) {times[5]=strToInt(contentOffset + 10,2);}} else if (tag == ASN1Constants.TAG_C_UTCTIME) {throw new ASN1Exception("Decoding constructed ASN.1 UTCTime type is not supported");} else {throw expected("UTCTime");}}  }
class C{  public GapStatistic(KClusterer base,boolean PCSampling){  this(base,PCSampling,10,new EuclideanDistance());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:16.689 -0400",hash_original_method="50333EAEF25ABACD223EFF4E6540624C",hash_generated_method="A7CC44F3CCCA58ECDD2A49DEA1ADD697") public boolean match(Certificate certificate){  if (!(certificate instanceof X509Certificate)) {    return false;  }  X509Certificate cert=(X509Certificate)certificate;  if ((certificateEquals != null) && !certificateEquals.equals(cert)) {    return false;  }  if ((serialNumber != null) && !serialNumber.equals(cert.getSerialNumber())) {    return false;  }  if ((issuer != null) && !issuer.equals(cert.getIssuerX500Principal())) {    return false;  }  if ((subject != null) && !subject.equals(cert.getSubjectX500Principal())) {    return false;  }  if ((subjectKeyIdentifier != null) && !Arrays.equals(subjectKeyIdentifier,getExtensionValue(cert,"2.5.29.14"))) {    return false;  }  if ((authorityKeyIdentifier != null) && !Arrays.equals(authorityKeyIdentifier,getExtensionValue(cert,"2.5.29.35"))) {    return false;  }  if (certificateValid != null) {    try {      cert.checkValidity(certificateValid);    } catch (    CertificateExpiredException e) {      return false;    }catch (    CertificateNotYetValidException e) {      return false;    }  }  if (privateKeyValid != null) {    try {      byte[] bytes=getExtensionValue(cert,"2.5.29.16");      if (bytes == null) {        return false;      }      PrivateKeyUsagePeriod pkup=(PrivateKeyUsagePeriod)PrivateKeyUsagePeriod.ASN1.decode(bytes);      Date notBefore=pkup.getNotBefore();      Date notAfter=pkup.getNotAfter();      if ((notBefore == null) && (notAfter == null)) {        return false;      }      if ((notBefore != null) && notBefore.compareTo(privateKeyValid) > 0) {        return false;      }      if ((notAfter != null) && notAfter.compareTo(privateKeyValid) < 0) {        return false;      }    } catch (    IOException e) {      return false;    }  }  if (subjectPublicKeyAlgID != null) {    try {      byte[] encoding=cert.getPublicKey().getEncoded();      AlgorithmIdentifier ai=((SubjectPublicKeyInfo)SubjectPublicKeyInfo.ASN1.decode(encoding)).getAlgorithmIdentifier();      if (!subjectPublicKeyAlgID.equals(ai.getAlgorithm())) {        return false;      }    } catch (    IOException e) {      e.printStackTrace();      return false;    }  }  if (subjectPublicKey != null) {    if (!Arrays.equals(subjectPublicKey,cert.getPublicKey().getEncoded())) {      return false;    }  }  if (keyUsage != null) {    boolean[] ku=cert.getKeyUsage();    if (ku != null) {      int i=0;      int min_length=(ku.length < keyUsage.length) ? ku.length : keyUsage.length;      for (; i < min_length; i++) {        if (keyUsage[i] && !ku[i]) {          return false;        }      }      for (; i < keyUsage.length; i++) {        if (keyUsage[i]) {          return false;        }      }    }  }  if (extendedKeyUsage != null) {    try {      List keyUsage=cert.getExtendedKeyUsage();      if (keyUsage != null) {        if (!keyUsage.containsAll(extendedKeyUsage)) {          return false;        }      }    } catch (    CertificateParsingException e) {      return false;    }  }  if (pathLen != -1) {    int p_len=cert.getBasicConstraints();    if ((pathLen < 0) && (p_len >= 0)) {      return false;    }    if ((pathLen > 0) && (pathLen > p_len)) {      return false;    }  }  if (subjectAltNames != null) {    PASSED:     try {      byte[] bytes=getExtensionValue(cert,"2.5.29.17");      if (bytes == null) {        return false;      }      List<GeneralName> sans=((GeneralNames)GeneralNames.ASN1.decode(bytes)).getNames();      if ((sans == null) || (sans.size() == 0)) {        return false;      }      boolean[][] map=new boolean[9][];      for (int i=0; i < 9; i++) {        map[i]=(subjectAltNames[i] == null) ? EmptyArray.BOOLEAN : new boolean[subjectAltNames[i].size()];      }      for (      GeneralName name : sans) {        int tag=name.getTag();        for (int i=0; i < map[tag].length; i++) {          if (subjectAltNames[tag].get(i).equals(name)) {            if (!matchAllNames) {              break PASSED;            }            map[tag][i]=true;          }        }      }      if (!matchAllNames) {        return false;      }      for (int tag=0; tag < 9; tag++) {        for (int name=0; name < map[tag].length; name++) {          if (!map[tag][name]) {            return false;          }        }      }    } catch (    IOException e) {      e.printStackTrace();      return false;    }  }  if (nameConstraints != null) {    if (!nameConstraints.isAcceptable(cert)) {      return false;    }  }  if (policies != null) {    byte[] bytes=getExtensionValue(cert,"2.5.29.32");    if (bytes == null) {      return false;    }    if (policies.size() == 0) {      return true;    }    PASSED:     try {      List<PolicyInformation> policyInformations=((CertificatePolicies)CertificatePolicies.ASN1.decode(bytes)).getPolicyInformations();      for (      PolicyInformation policyInformation : policyInformations) {        if (policies.contains(policyInformation.getPolicyIdentifier())) {          break PASSED;        }      }      return false;    } catch (    IOException e) {      return false;    }  }  if (pathToNames != null) {    byte[] bytes=getExtensionValue(cert,"2.5.29.30");    if (bytes != null) {      NameConstraints nameConstraints;      try {        nameConstraints=(NameConstraints)NameConstraints.ASN1.decode(bytes);      } catch (      IOException e) {        return false;      }      if (!nameConstraints.isAcceptable(pathToNames)) {        return false;      }    }  }  return true;}  }
class C{  public static BlockSnapshotSession querySnapshotSession(URI snapSessionURI,UriInfo uriInfo,DbClient dbClient,boolean checkInactive){  ArgValidator.checkUri(snapSessionURI);  BlockSnapshotSession snapSession=dbClient.queryObject(BlockSnapshotSession.class,snapSessionURI);  ArgValidator.checkEntity(snapSession,snapSessionURI,BlockServiceUtils.isIdEmbeddedInURL(snapSessionURI,uriInfo),checkInactive);  return snapSession;}  }
class C{  public ElemTemplateElement appendChild(ElemTemplateElement elem){  if (m_selectPattern != null) {    error(XSLTErrorResources.ER_CANT_HAVE_CONTENT_AND_SELECT,new Object[]{"xsl:" + this.getNodeName()});    return null;  }  return super.appendChild(elem);}  }
class C{  public File[] listFiles(String dir) throws IOException {  String content=list(dir);  String[] list=StringUtils.arraySplit(content.trim(),'\n',true);  File[] files=new File[list.length];  for (int i=0; i < files.length; i++) {    String s=list[i];    while (true) {      String s2=StringUtils.replaceAll(s,"  "," ");      if (s2.equals(s)) {        break;      }      s=s2;    }    String[] tokens=StringUtils.arraySplit(s,' ',true);    boolean directory=tokens[0].charAt(0) == 'd';    long length=Long.parseLong(tokens[4]);    String name=tokens[8];    File f=new FtpFile(name,directory,length);    files[i]=f;  }  return files;}  }
class C{  public List<GenericDataDB> _queryGenericDataDirectoryDB_Datas(long directoryId){synchronized (this) {    if (genericDataDirectoryDB_DatasQuery == null) {      QueryBuilder<GenericDataDB> queryBuilder=queryBuilder();      queryBuilder.where(Properties.DirectoryId.eq(null));      genericDataDirectoryDB_DatasQuery=queryBuilder.build();    }  }  Query<GenericDataDB> query=genericDataDirectoryDB_DatasQuery.forCurrentThread();  query.setParameter(0,directoryId);  return query.list();}  }
class C{  private void decryptBlock(byte[] in,int inOff,byte[] out,int outOff){  X3=wKey[131] ^ bytesToWord(in,inOff);  X2=wKey[130] ^ bytesToWord(in,inOff + 4);  X1=wKey[129] ^ bytesToWord(in,inOff + 8);  X0=wKey[128] ^ bytesToWord(in,inOff + 12);  ib7(X0,X1,X2,X3);  X0^=wKey[124];  X1^=wKey[125];  X2^=wKey[126];  X3^=wKey[127];  inverseLT();  ib6(X0,X1,X2,X3);  X0^=wKey[120];  X1^=wKey[121];  X2^=wKey[122];  X3^=wKey[123];  inverseLT();  ib5(X0,X1,X2,X3);  X0^=wKey[116];  X1^=wKey[117];  X2^=wKey[118];  X3^=wKey[119];  inverseLT();  ib4(X0,X1,X2,X3);  X0^=wKey[112];  X1^=wKey[113];  X2^=wKey[114];  X3^=wKey[115];  inverseLT();  ib3(X0,X1,X2,X3);  X0^=wKey[108];  X1^=wKey[109];  X2^=wKey[110];  X3^=wKey[111];  inverseLT();  ib2(X0,X1,X2,X3);  X0^=wKey[104];  X1^=wKey[105];  X2^=wKey[106];  X3^=wKey[107];  inverseLT();  ib1(X0,X1,X2,X3);  X0^=wKey[100];  X1^=wKey[101];  X2^=wKey[102];  X3^=wKey[103];  inverseLT();  ib0(X0,X1,X2,X3);  X0^=wKey[96];  X1^=wKey[97];  X2^=wKey[98];  X3^=wKey[99];  inverseLT();  ib7(X0,X1,X2,X3);  X0^=wKey[92];  X1^=wKey[93];  X2^=wKey[94];  X3^=wKey[95];  inverseLT();  ib6(X0,X1,X2,X3);  X0^=wKey[88];  X1^=wKey[89];  X2^=wKey[90];  X3^=wKey[91];  inverseLT();  ib5(X0,X1,X2,X3);  X0^=wKey[84];  X1^=wKey[85];  X2^=wKey[86];  X3^=wKey[87];  inverseLT();  ib4(X0,X1,X2,X3);  X0^=wKey[80];  X1^=wKey[81];  X2^=wKey[82];  X3^=wKey[83];  inverseLT();  ib3(X0,X1,X2,X3);  X0^=wKey[76];  X1^=wKey[77];  X2^=wKey[78];  X3^=wKey[79];  inverseLT();  ib2(X0,X1,X2,X3);  X0^=wKey[72];  X1^=wKey[73];  X2^=wKey[74];  X3^=wKey[75];  inverseLT();  ib1(X0,X1,X2,X3);  X0^=wKey[68];  X1^=wKey[69];  X2^=wKey[70];  X3^=wKey[71];  inverseLT();  ib0(X0,X1,X2,X3);  X0^=wKey[64];  X1^=wKey[65];  X2^=wKey[66];  X3^=wKey[67];  inverseLT();  ib7(X0,X1,X2,X3);  X0^=wKey[60];  X1^=wKey[61];  X2^=wKey[62];  X3^=wKey[63];  inverseLT();  ib6(X0,X1,X2,X3);  X0^=wKey[56];  X1^=wKey[57];  X2^=wKey[58];  X3^=wKey[59];  inverseLT();  ib5(X0,X1,X2,X3);  X0^=wKey[52];  X1^=wKey[53];  X2^=wKey[54];  X3^=wKey[55];  inverseLT();  ib4(X0,X1,X2,X3);  X0^=wKey[48];  X1^=wKey[49];  X2^=wKey[50];  X3^=wKey[51];  inverseLT();  ib3(X0,X1,X2,X3);  X0^=wKey[44];  X1^=wKey[45];  X2^=wKey[46];  X3^=wKey[47];  inverseLT();  ib2(X0,X1,X2,X3);  X0^=wKey[40];  X1^=wKey[41];  X2^=wKey[42];  X3^=wKey[43];  inverseLT();  ib1(X0,X1,X2,X3);  X0^=wKey[36];  X1^=wKey[37];  X2^=wKey[38];  X3^=wKey[39];  inverseLT();  ib0(X0,X1,X2,X3);  X0^=wKey[32];  X1^=wKey[33];  X2^=wKey[34];  X3^=wKey[35];  inverseLT();  ib7(X0,X1,X2,X3);  X0^=wKey[28];  X1^=wKey[29];  X2^=wKey[30];  X3^=wKey[31];  inverseLT();  ib6(X0,X1,X2,X3);  X0^=wKey[24];  X1^=wKey[25];  X2^=wKey[26];  X3^=wKey[27];  inverseLT();  ib5(X0,X1,X2,X3);  X0^=wKey[20];  X1^=wKey[21];  X2^=wKey[22];  X3^=wKey[23];  inverseLT();  ib4(X0,X1,X2,X3);  X0^=wKey[16];  X1^=wKey[17];  X2^=wKey[18];  X3^=wKey[19];  inverseLT();  ib3(X0,X1,X2,X3);  X0^=wKey[12];  X1^=wKey[13];  X2^=wKey[14];  X3^=wKey[15];  inverseLT();  ib2(X0,X1,X2,X3);  X0^=wKey[8];  X1^=wKey[9];  X2^=wKey[10];  X3^=wKey[11];  inverseLT();  ib1(X0,X1,X2,X3);  X0^=wKey[4];  X1^=wKey[5];  X2^=wKey[6];  X3^=wKey[7];  inverseLT();  ib0(X0,X1,X2,X3);  wordToBytes(X3 ^ wKey[3],out,outOff);  wordToBytes(X2 ^ wKey[2],out,outOff + 4);  wordToBytes(X1 ^ wKey[1],out,outOff + 8);  wordToBytes(X0 ^ wKey[0],out,outOff + 12);}  }
class C{  public EvalTextArea(SwingGui debugGui){  this.debugGui=debugGui;  history=Collections.synchronizedList(new ArrayList<String>());  Document doc=getDocument();  doc.addDocumentListener(this);  addKeyListener(this);  setLineWrap(true);  setFont(new Font("Monospaced",0,12));  append("% ");  outputMark=doc.getLength();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.089 -0500",hash_original_method="FE36B1316A593126EBA1AA2EF5942205",hash_generated_method="FE36B1316A593126EBA1AA2EF5942205") String saveWebArchive(String basename,boolean autoname){  return nativeSaveWebArchive(basename,autoname);}  }
class C{  protected void loadChildren(ViewFactory f){}  }
class C{  protected AbstractMRReply newReply(){  SpecificReply reply=new SpecificReply(memo.getTrafficController());  return reply;}  }
class C{  public Set<String> keySet(){  return propMap.keySet();}  }
class C{  public void testEngineGenerateCertPathLjava_io_InputStream02(){  CertificateFactorySpi certFactorySpi=new extCertificateFactorySpi();  ByteArrayInputStream bais=new ByteArrayInputStream(new byte[0]);  DataInputStream dis=new DataInputStream(bais);  try {    certFactorySpi.engineGenerateCertPath(dis);    fail("UnsupportedOperationException expected");  } catch (  UnsupportedOperationException e) {  }catch (  CertificateException e) {    fail("Unexpected CertificateException " + e.getMessage());  }}  }
class C{  public void connected(){}  }
class C{  public static final byte[] encodeQuotedPrintable(BitSet printable,byte[] bytes){  if (bytes == null) {    return null;  }  if (printable == null) {    printable=PRINTABLE_CHARS;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b < 0) {      b=256 + b;    }    if (printable.get(b)) {      buffer.write(b);    } else {      encodeQuotedPrintable(b,buffer);    }  }  return buffer.toByteArray();}  }
class C{  public static AztecCode encode(byte[] data,int minECCPercent,int userSpecifiedLayers){  BitArray bits=new HighLevelEncoder(data).encode();  int eccBits=bits.getSize() * minECCPercent / 100 + 11;  int totalSizeBits=bits.getSize() + eccBits;  boolean compact;  int layers;  int totalBitsInLayer;  int wordSize;  BitArray stuffedBits;  if (userSpecifiedLayers != DEFAULT_AZTEC_LAYERS) {    compact=userSpecifiedLayers < 0;    layers=Math.abs(userSpecifiedLayers);    if (layers > (compact ? MAX_NB_BITS_COMPACT : MAX_NB_BITS)) {      throw new IllegalArgumentException(String.format("Illegal value %s for layers",userSpecifiedLayers));    }    totalBitsInLayer=totalBitsInLayer(layers,compact);    wordSize=WORD_SIZE[layers];    int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);    stuffedBits=stuffBits(bits,wordSize);    if (stuffedBits.getSize() + eccBits > usableBitsInLayers) {      throw new IllegalArgumentException("Data to large for user specified layer");    }    if (compact && stuffedBits.getSize() > wordSize * 64) {      throw new IllegalArgumentException("Data to large for user specified layer");    }  } else {    wordSize=0;    stuffedBits=null;    for (int i=0; ; i++) {      if (i > MAX_NB_BITS) {        throw new IllegalArgumentException("Data too large for an Aztec code");      }      compact=i <= 3;      layers=compact ? i + 1 : i;      totalBitsInLayer=totalBitsInLayer(layers,compact);      if (totalSizeBits > totalBitsInLayer) {        continue;      }      if (wordSize != WORD_SIZE[layers]) {        wordSize=WORD_SIZE[layers];        stuffedBits=stuffBits(bits,wordSize);      }      int usableBitsInLayers=totalBitsInLayer - (totalBitsInLayer % wordSize);      if (compact && stuffedBits.getSize() > wordSize * 64) {        continue;      }      if (stuffedBits.getSize() + eccBits <= usableBitsInLayers) {        break;      }    }  }  BitArray messageBits=generateCheckWords(stuffedBits,totalBitsInLayer,wordSize);  int messageSizeInWords=stuffedBits.getSize() / wordSize;  BitArray modeMessage=generateModeMessage(compact,layers,messageSizeInWords);  int baseMatrixSize=compact ? 11 + layers * 4 : 14 + layers * 4;  int[] alignmentMap=new int[baseMatrixSize];  int matrixSize;  if (compact) {    matrixSize=baseMatrixSize;    for (int i=0; i < alignmentMap.length; i++) {      alignmentMap[i]=i;    }  } else {    matrixSize=baseMatrixSize + 1 + 2 * ((baseMatrixSize / 2 - 1) / 15);    int origCenter=baseMatrixSize / 2;    int center=matrixSize / 2;    for (int i=0; i < origCenter; i++) {      int newOffset=i + i / 15;      alignmentMap[origCenter - i - 1]=center - newOffset - 1;      alignmentMap[origCenter + i]=center + newOffset + 1;    }  }  BitMatrix matrix=new BitMatrix(matrixSize);  for (int i=0, rowOffset=0; i < layers; i++) {    int rowSize=compact ? (layers - i) * 4 + 9 : (layers - i) * 4 + 12;    for (int j=0; j < rowSize; j++) {      int columnOffset=j * 2;      for (int k=0; k < 2; k++) {        if (messageBits.get(rowOffset + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + k],alignmentMap[i * 2 + j]);        }        if (messageBits.get(rowOffset + rowSize * 2 + columnOffset + k)) {          matrix.set(alignmentMap[i * 2 + j],alignmentMap[baseMatrixSize - 1 - i * 2 - k]);        }        if (messageBits.get(rowOffset + rowSize * 4 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - k],alignmentMap[baseMatrixSize - 1 - i * 2 - j]);        }        if (messageBits.get(rowOffset + rowSize * 6 + columnOffset + k)) {          matrix.set(alignmentMap[baseMatrixSize - 1 - i * 2 - j],alignmentMap[i * 2 + k]);        }      }    }    rowOffset+=rowSize * 8;  }  drawModeMessage(matrix,compact,matrixSize,modeMessage);  if (compact) {    drawBullsEye(matrix,matrixSize / 2,5);  } else {    drawBullsEye(matrix,matrixSize / 2,7);    for (int i=0, j=0; i < baseMatrixSize / 2 - 1; i+=15, j+=16) {      for (int k=(matrixSize / 2) & 1; k < matrixSize; k+=2) {        matrix.set(matrixSize / 2 - j,k);        matrix.set(matrixSize / 2 + j,k);        matrix.set(k,matrixSize / 2 - j);        matrix.set(k,matrixSize / 2 + j);      }    }  }  AztecCode aztec=new AztecCode();  aztec.setCompact(compact);  aztec.setSize(matrixSize);  aztec.setLayers(layers);  aztec.setCodeWords(messageSizeInWords);  aztec.setMatrix(matrix);  return aztec;}  }
class C{  private String fillUp(String s,int len){  while (s.length() < len) {    s+=" ";  }  return s;}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.679 -0400",hash_original_method="F5A2FF58A48B2EE55066C0DB2B9AC980",hash_generated_method="65B7E972E19D306244BB98798323AA70") @Override public int read() throws IOException {  try {    beforeRead(1);    int c=in.read();    afterRead(c != -1 ? 1 : -1);    return c;  } catch (  IOException e) {    handleIOException(e);    return -1;  }}  }
class C{  public VALUE put(int key,VALUE value){  int hash=hash(key);  int i=indexFor(hash,table.length);  for (IntEntry<VALUE> e=table[i]; e != null; e=e.next) {    if (e.hash == hash && key == e.key) {      VALUE oldValue=e.value;      e.value=value;      return oldValue;    }  }  modCount++;  addEntry(hash,key,value,i);  return null;}  }
class C{  public void testGeneralPunctuationCategory(){  String[] s={",","!","\"","#","%","&","'","(",")","-",".","/"};  String regexp="\\p{P}";  for (int i=0; i < s.length; i++) {    Pattern pattern=Pattern.compile(regexp);    Matcher matcher=pattern.matcher(s[i]);    assertTrue(matcher.find());  }}  }
class C{  public void writeTo(OutputStream out,Writer humanOut,boolean verbose) throws IOException {  boolean annotate=(humanOut != null);  ByteArrayAnnotatedOutput result=toDex0(annotate,verbose);  if (out != null) {    out.write(result.getArray());  }  if (annotate) {    result.writeAnnotationsTo(humanOut);  }}  }
class C{  public void remove(T object){synchronized (mutex) {    ParseRelationOperation<T> operation=new ParseRelationOperation<>(null,Collections.singleton(object));    targetClass=operation.getTargetClass();    getParent().performOperation(key,operation);    knownObjects.remove(object);  }}  }
class C{  private void fireOperatorMenuWillOpen(final JPopupMenu m,final Operator op){  List<ProcessInteractionListener> copy=new LinkedList<>(processInteractionListeners);  for (  ProcessInteractionListener l : copy) {    l.operatorContextMenuWillOpen(m,op);  }}  }
class C{  public static void dumpApplicationInfoList(String tag,String label,ArrayList<AppInfo> list){  Log.d(tag,label + " size=" + list.size());  for (  AppInfo info : list) {    Log.d(tag,"   title=\"" + info.title + "\" iconBitmap="+ info.iconBitmap+ " componentName="+ info.componentName.getPackageName());  }}  }
class C{  public void readTree(final EvolutionState state,final LineNumberReader reader) throws IOException {  int linenumber=reader.getLineNumber();  String s=reader.readLine();  if (s == null)   state.output.fatal("Reading Line " + linenumber + ": "+ "No Tree found."); else {    GPInitializer initializer=((GPInitializer)state.initializer);    child=GPNode.readRootedTree(linenumber,new DecodeReturn(s),constraints(initializer).treetype,constraints(initializer).functionset,this,0,state);  }}  }
class C{  public static String generateUpdateString(String fieldList){  String fields[]=fieldList.split("\\s*,\\s*");  StringBuilder out=new StringBuilder();  for (int i=0; i < fields.length; i++) {    out.append(fields[i]).append(" = ?");    if (i < fields.length - 1) {      out.append(",");    }  }  return out.toString();}  }
class C{  public static String nullSafeToString(long[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  @Override public void agg(Object newVal){  if (newVal instanceof byte[]) {    ByteBuffer buffer=ByteBuffer.wrap((byte[])newVal);    buffer.rewind();    while (buffer.hasRemaining()) {      aggVal+=buffer.getLong();      count+=buffer.getDouble();      firstTime=false;    }    return;  }  aggVal+=(Long)newVal;  count++;  firstTime=false;}  }
class C{  private void deinterleave(BinaryMessage buffer,int offset){  if (buffer.size() < sMESSAGE_LENGTH + offset) {    throw new IllegalArgumentException("MDCMessageProcessor - " + "cannot deinterleave message - message buffer too short");  }  BinaryMessage deinterleaved=new BinaryMessage(112);  int deinterleavedPointer=0;  for (int column=0; column < 16; column++) {    for (int row=0; row < 7; row++) {      if (buffer.get((row * 16) + column + offset)) {        deinterleaved.set(deinterleavedPointer);      }      deinterleavedPointer++;    }  }  buffer.clear(offset,offset + sMESSAGE_LENGTH);  for (int x=0; x < sMESSAGE_LENGTH; x++) {    if (deinterleaved.get(x)) {      buffer.set(x + offset);    } else {      buffer.clear(x + offset);    }  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSecondFloor(zone);}  }
class C{  public Component add(Component comp){  addComponent(comp);  return comp;}  }
class C{  private static void createOutputMap(Map<String,List<Distributable>> outputMap,int blocksPerNode,Set<Distributable> uniqueBlocks,Map<String,List<Distributable>> nodeAndBlockMapping,List<String> activeNodes){  ArrayList<NodeMultiBlockRelation> multiBlockRelations=new ArrayList<>(nodeAndBlockMapping.size());  for (  Map.Entry<String,List<Distributable>> entry : nodeAndBlockMapping.entrySet()) {    multiBlockRelations.add(new NodeMultiBlockRelation(entry.getKey(),entry.getValue()));  }  Collections.sort(multiBlockRelations);  Set<String> validActiveNodes=new HashSet<String>();  for (  NodeMultiBlockRelation nodeMultiBlockRelation : multiBlockRelations) {    String nodeName=nodeMultiBlockRelation.getNode();    if (null != activeNodes && isActiveExecutor(activeNodes,nodeName)) {      validActiveNodes.add(nodeName);    }  }  for (  NodeMultiBlockRelation nodeMultiBlockRelation : multiBlockRelations) {    String nodeName=nodeMultiBlockRelation.getNode();    if (!validActiveNodes.isEmpty() && !validActiveNodes.contains(nodeName)) {      continue;    }    int nodeCapacity=0;    for (    Distributable block : nodeMultiBlockRelation.getBlocks()) {      if (uniqueBlocks.contains(block)) {        if (null == outputMap.get(nodeName)) {          List<Distributable> list=new ArrayList<Distributable>(CarbonCommonConstants.DEFAULT_COLLECTION_SIZE);          outputMap.put(nodeName,list);        }        if (nodeCapacity < blocksPerNode) {          List<Distributable> infos=outputMap.get(nodeName);          infos.add(block);          nodeCapacity++;          uniqueBlocks.remove(block);        } else {          break;        }      }    }  }}  }
class C{  public LoggerImpl(){  doRedirects();}  }
class C{  @Override public String toString(){  return String.format("View Edge [%s -> %s]",super.getSource().getName(),super.getTarget().getName());}  }
class C{  MemberHealthConfigImpl(){}  }
class C{  protected SVGOMGradientElement(){}  }
class C{  Iterator<C> createColumnKeyIterator(){  return new ColumnKeyIterator();}  }
class C{  public void testLocalTransaction() throws Exception {  if (!versionMeetsMinimum(5,0)) {    return;  }  createTable("testLocalTransaction","(field1 int) ENGINE=InnoDB");  Connection conn1=null;  XAConnection xaConn1=null;  try {    xaConn1=getXAConnection();    XAResource xaRes1=xaConn1.getXAResource();    conn1=xaConn1.getConnection();    assertEquals(true,conn1.getAutoCommit());    conn1.setAutoCommit(true);    conn1.createStatement().executeUpdate("INSERT INTO testLocalTransaction VALUES (1)");    assertEquals("1",getSingleIndexedValueWithQuery(conn1,1,"SELECT field1 FROM testLocalTransaction").toString());    conn1.createStatement().executeUpdate("TRUNCATE TABLE testLocalTransaction");    conn1.setAutoCommit(false);    conn1.createStatement().executeUpdate("INSERT INTO testLocalTransaction VALUES (2)");    assertEquals("2",getSingleIndexedValueWithQuery(conn1,1,"SELECT field1 FROM testLocalTransaction").toString());    conn1.rollback();    assertEquals(0,getRowCount("testLocalTransaction"));    conn1.createStatement().executeUpdate("INSERT INTO testLocalTransaction VALUES (3)");    assertEquals("3",getSingleIndexedValueWithQuery(conn1,1,"SELECT field1 FROM testLocalTransaction").toString());    conn1.commit();    assertEquals("3",getSingleIndexedValueWithQuery(conn1,1,"SELECT field1 FROM testLocalTransaction").toString());    conn1.commit();    Savepoint sp=conn1.setSavepoint();    conn1.rollback(sp);    sp=conn1.setSavepoint("abcd");    conn1.rollback(sp);    Savepoint spSaved=sp;    Xid xid=createXid();    xaRes1.start(xid,XAResource.TMNOFLAGS);    try {      try {        conn1.setAutoCommit(true);      } catch (      SQLException sqlEx) {        assertEquals("2D000",sqlEx.getSQLState());      }      try {        conn1.commit();      } catch (      SQLException sqlEx) {        assertEquals("2D000",sqlEx.getSQLState());      }      try {        conn1.rollback();      } catch (      SQLException sqlEx) {        assertEquals("2D000",sqlEx.getSQLState());      }      try {        sp=conn1.setSavepoint();      } catch (      SQLException sqlEx) {        assertEquals("2D000",sqlEx.getSQLState());      }      try {        conn1.rollback(spSaved);      } catch (      SQLException sqlEx) {        assertEquals("2D000",sqlEx.getSQLState());      }      try {        sp=conn1.setSavepoint("abcd");      } catch (      SQLException sqlEx) {        assertEquals("2D000",sqlEx.getSQLState());      }      try {        conn1.rollback(spSaved);      } catch (      SQLException sqlEx) {        assertEquals("2D000",sqlEx.getSQLState());      }    }  finally {      xaRes1.forget(xid);    }  }  finally {    if (xaConn1 != null) {      try {        xaConn1.close();      } catch (      SQLException sqlEx) {      }    }  }}  }
class C{  public void release(){  if (mSoundPool != null) {    mSoundPool.release();    mSoundPool=null;  }}  }
class C{  private void handleP2pEvents(String dataString){  if (dataString.startsWith(P2P_DEVICE_FOUND_STR)) {    mStateMachine.sendMessage(P2P_DEVICE_FOUND_EVENT,new WifiP2pDevice(dataString));  } else   if (dataString.startsWith(P2P_DEVICE_LOST_STR)) {    mStateMachine.sendMessage(P2P_DEVICE_LOST_EVENT,new WifiP2pDevice(dataString));  } else   if (dataString.startsWith(P2P_FIND_STOPPED_STR)) {    mStateMachine.sendMessage(P2P_FIND_STOPPED_EVENT);  } else   if (dataString.startsWith(P2P_GO_NEG_REQUEST_STR)) {    mStateMachine.sendMessage(P2P_GO_NEGOTIATION_REQUEST_EVENT,new WifiP2pConfig(dataString));  } else   if (dataString.startsWith(P2P_GO_NEG_SUCCESS_STR)) {    mStateMachine.sendMessage(P2P_GO_NEGOTIATION_SUCCESS_EVENT);  } else   if (dataString.startsWith(P2P_GO_NEG_FAILURE_STR)) {    mStateMachine.sendMessage(P2P_GO_NEGOTIATION_FAILURE_EVENT,p2pError(dataString));  } else   if (dataString.startsWith(P2P_GROUP_FORMATION_SUCCESS_STR)) {    mStateMachine.sendMessage(P2P_GROUP_FORMATION_SUCCESS_EVENT);  } else   if (dataString.startsWith(P2P_GROUP_FORMATION_FAILURE_STR)) {    mStateMachine.sendMessage(P2P_GROUP_FORMATION_FAILURE_EVENT,p2pError(dataString));  } else   if (dataString.startsWith(P2P_GROUP_STARTED_STR)) {    mStateMachine.sendMessage(P2P_GROUP_STARTED_EVENT,new WifiP2pGroup(dataString));  } else   if (dataString.startsWith(P2P_GROUP_REMOVED_STR)) {    mStateMachine.sendMessage(P2P_GROUP_REMOVED_EVENT,new WifiP2pGroup(dataString));  } else   if (dataString.startsWith(P2P_INVITATION_RECEIVED_STR)) {    mStateMachine.sendMessage(P2P_INVITATION_RECEIVED_EVENT,new WifiP2pGroup(dataString));  } else   if (dataString.startsWith(P2P_INVITATION_RESULT_STR)) {    mStateMachine.sendMessage(P2P_INVITATION_RESULT_EVENT,p2pError(dataString));  } else   if (dataString.startsWith(P2P_PROV_DISC_PBC_REQ_STR)) {    mStateMachine.sendMessage(P2P_PROV_DISC_PBC_REQ_EVENT,new WifiP2pProvDiscEvent(dataString));  } else   if (dataString.startsWith(P2P_PROV_DISC_PBC_RSP_STR)) {    mStateMachine.sendMessage(P2P_PROV_DISC_PBC_RSP_EVENT,new WifiP2pProvDiscEvent(dataString));  } else   if (dataString.startsWith(P2P_PROV_DISC_ENTER_PIN_STR)) {    mStateMachine.sendMessage(P2P_PROV_DISC_ENTER_PIN_EVENT,new WifiP2pProvDiscEvent(dataString));  } else   if (dataString.startsWith(P2P_PROV_DISC_SHOW_PIN_STR)) {    mStateMachine.sendMessage(P2P_PROV_DISC_SHOW_PIN_EVENT,new WifiP2pProvDiscEvent(dataString));  } else   if (dataString.startsWith(P2P_PROV_DISC_FAILURE_STR)) {    mStateMachine.sendMessage(P2P_PROV_DISC_FAILURE_EVENT);  } else   if (dataString.startsWith(P2P_SERV_DISC_RESP_STR)) {    List<WifiP2pServiceResponse> list=WifiP2pServiceResponse.newInstance(dataString);    if (list != null) {      mStateMachine.sendMessage(P2P_SERV_DISC_RESP_EVENT,list);    } else {      Log.e(TAG,"Null service resp " + dataString);    }  }}  }
class C{  public synchronized boolean isShutdown(){  return shutdown;}  }
class C{  public void initComponents(){  setTitle(rb.getString("WindowTitle"));  setDefaultCloseOperation(JDialog.HIDE_ON_CLOSE);  Container contentPane=getContentPane();  contentPane.setLayout(new BoxLayout(contentPane,BoxLayout.Y_AXIS));  p=new AlignTablePane(this);  p.initComponents();  contentPane.add(p);  addHelpMenu("package.jmri.jmrix.rps.aligntable.AlignTableFrame",true);  setShutDownTask();  pack();}  }
class C{  private boolean insertInStore(long bucketId,long timeBucket,Slice keySlice,Slice valueSlice){  long timeBucketId=store.getTimeBucketAssigner().getTimeBucketAndAdjustBoundaries(timeBucket);  if (timeBucketId != -1) {    store.putInBucket(bucketId,timeBucketId,keySlice,valueSlice);    return true;  }  return false;}  }
class C{  public BasicHDU<?> readHDU() throws FitsException, IOException {  if (this.dataStr == null || this.atEOF) {    if (this.dataStr == null) {      LOG.warning("trying to read a hdu, without an input source!");    }    return null;  }  if (this.dataStr instanceof RandomAccess && this.lastFileOffset > 0) {    FitsUtil.reposition(this.dataStr,this.lastFileOffset);  }  Header hdr=Header.readHeader(this.dataStr);  if (hdr == null) {    this.atEOF=true;    return null;  }  Data data=hdr.makeData();  try {    data.read(this.dataStr);  } catch (  PaddingException e) {    e.updateHeader(hdr);    throw e;  }  this.lastFileOffset=FitsUtil.findOffset(this.dataStr);  BasicHDU<Data> nextHDU=FitsFactory.hduFactory(hdr,data);  this.hduList.add(nextHDU);  return nextHDU;}  }
class C{  @Override public boolean shouldCreateDatabaseSchema(Set<String> createdDatabaseSchemas){  return hasDatabaseSchema() && !createdDatabaseSchemas.contains(getDatabaseSchema());}  }
class C{  public boolean isSelf(){  return getServerBartender().isSelf();}  }
class C{  public void clear(String className,String methodName){  int numBranches=0;  if (branchMap.containsKey(className)) {    if (branchMap.get(className).containsKey(methodName))     numBranches=branchMap.get(className).get(methodName).size();    branchMap.get(className).remove(methodName);  }  if (branchlessMethods.containsKey(className))   branchlessMethods.get(className).remove(methodName);  logger.info("Resetting branchCounter from " + branchCounter + " to "+ (branchCounter - numBranches));  branchCounter-=numBranches;}  }
class C{  public NumberTickUnit(double size,NumberFormat formatter,int minorTickCount){  super(size,minorTickCount);  ParamChecks.nullNotPermitted(formatter,"formatter");  this.formatter=formatter;}  }
class C{  public static IJavaElement handleToElement(final WorkingCopyOwner owner,final String project,final String handle,final boolean check){  IJavaElement element=null;  if (owner != null)   element=JavaCore.create(handle,owner); else   element=JavaCore.create(handle);  if (element == null && project != null) {    final IJavaProject javaProject=JavaCore.create(ResourcesPlugin.getWorkspace().getRoot()).getJavaProject(project);    final String identifier=javaProject.getHandleIdentifier();    if (owner != null)     element=JavaCore.create(identifier + handle,owner); else     element=JavaCore.create(identifier + handle);  }  if (check && element instanceof IMethod) {    final IMethod method=(IMethod)element;    final IMethod[] methods=method.getDeclaringType().findMethods(method);    if (methods != null && methods.length > 0)     element=methods[0];  }  if (element != null && (!check || element.exists()))   return element;  return null;}  }
class C{  public static void addEnrichmentChamberRecipe(ItemStack input,ItemStack output){  addRecipe(Recipe.ENRICHMENT_CHAMBER,new EnrichmentRecipe(input,output));}  }
class C{  @Override protected void finalize() throws Throwable {  mListeners.clear();  mListeners=null;  super.finalize();}  }
class C{  public void messageReceived(final T message){  formattingManager.formatMessage(message,getFormatter());  final boolean allTopicsShown=!browsingFiltersEnabled();  final boolean topicAlreadyExists=allTopics.contains(message.getTopic());  allTopics.add(message.getTopic());  final T removed=storeMessage(message);  if (!filteredStore.filterMessage(message,true) && (allTopicsShown || filteredStore.getBrowsedTopics().contains(message.getTopic()))) {    filteredStore.getFilteredMessages().add(message);    uiEventQueue.add(this,new BrowseReceivedMessageEvent<T>(filteredStore.getFilteredMessages(),message));  }  if (allTopicsShown && !topicAlreadyExists) {    filteredStore.applyTopicFilter(message.getTopic(),false);  }  if (removed != null) {    uiEventQueue.add(this,new TopicSummaryRemovedMessageEvent<T>(super.getMessageList(),removed));  }  uiEventQueue.add(this,new TopicSummaryNewMessageEvent<T>(super.getMessageList(),message,allTopicsShown && !topicAlreadyExists));}  }
class C{  public float polarAngle(){  return (float)Math.toDegrees(angle());}  }
class C{  private int answerQuestion(IAnswerData data){  return mFormEntryController.answerQuestion(data);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMFlowSpanElement(prefix,(AbstractDocument)doc);}  }
class C{  public Builder addSignature(WebResource webResource,SecretKey key){  long timestamp=System.currentTimeMillis();  return webResource.header(AbstractHMACAuthFilter.INTERNODE_HMAC,getSignature(webResource,timestamp,key)).header(AbstractHMACAuthFilter.INTERNODE_TIMESTAMP,timestamp);}  }
class C{  public boolean execute(INode state){  SmallPuzzle tp=(SmallPuzzle)state;  tp.s[0]/=2;  tp.s[1]/=2;  return true;}  }
class C{  public static List<org.oscm.internal.vo.VOCategory> convertToUpVOCategory(List<org.oscm.vo.VOCategory> oldVO){  if (oldVO == null) {    return null;  }  List<org.oscm.internal.vo.VOCategory> newVO=new ArrayList<org.oscm.internal.vo.VOCategory>();  for (  org.oscm.vo.VOCategory tmp : oldVO) {    newVO.add(convertToUp(tmp));  }  return newVO;}  }
class C{  public DoubleMatrix2D assign(double value){  if (value == 0) {    indexes.clear();    values.clear();    for (int i=starts.length; --i >= 0; )     starts[i]=0;  } else   super.assign(value);  return this;}  }
class C{  public void endVisit(TypeParameter node){}  }
class C{  public ProblemException(Problem problem){  super();  this.problem=problem;}  }
class C{  @Override public Bundle addAccount(AccountAuthenticatorResponse response,String accountType,String authTokenType,String[] requiredFeatures,Bundle options) throws NetworkErrorException {  Bundle reply=new Bundle();  System.out.println(reply);  Account panboxAccount=getPanboxAccount(context);  if (panboxAccount != null) {    handler.sendEmptyMessage(0);  } else   createPanboxAccount(context);  return reply;}  }
class C{  public DomainLoadStoreParameter(URI configuration,Map<String,ProtectionParameter> protectionParams){  if (configuration == null || protectionParams == null) {    throw new NullPointerException("invalid null input");  }  this.configuration=configuration;  this.protectionParams=Collections.unmodifiableMap(new HashMap<>(protectionParams));}  }
class C{  public ExtrudedPolygon(Iterable<? extends LatLon> corners,double height,Iterable<?> imageSources){  this(corners,height);  if (imageSources != null) {    this.sideTextures=new ArrayList<List<WWTexture>>();    this.sideTextures.add(this.fillImageList(imageSources));  }}  }
class C{  public static void generate(Cache cache,PrintWriter pw,boolean useSchema,boolean includeKeysValues){  (new CacheXmlGenerator(cache,true,VERSION_LATEST,includeKeysValues)).generate(pw);}  }
class C{  protected static Boolean tryLock(String serviceName,Object name,Long wait){  DLockService service=DLockService.getInternalServiceNamed(serviceName);  boolean locked=service.lock(name,wait.longValue(),-1,true);  return Boolean.valueOf(locked);}  }
class C{  public void highlight(OMGraphic omg){}  }
class C{  protected Instances determineOutputFormat(Instances inputFormat) throws Exception {  double cumulative;  ArrayList<Attribute> attributes;  int i;  int j;  StringBuffer attName;  double[] coeff_mags;  int num_attrs;  int[] coeff_inds;  double coeff_value;  int numAttsLowerBound;  if (m_Eigenvalues == null) {    return inputFormat;  }  if (m_MaxAttributes > 0) {    numAttsLowerBound=m_NumAttribs - m_MaxAttributes;  } else {    numAttsLowerBound=0;  }  if (numAttsLowerBound < 0) {    numAttsLowerBound=0;  }  cumulative=0.0;  attributes=new ArrayList<Attribute>();  for (i=m_NumAttribs - 1; i >= numAttsLowerBound; i--) {    attName=new StringBuffer();    coeff_mags=new double[m_NumAttribs];    for (j=0; j < m_NumAttribs; j++) {      coeff_mags[j]=-Math.abs(m_Eigenvectors[j][m_SortedEigens[i]]);    }    num_attrs=(m_MaxAttrsInName > 0) ? Math.min(m_NumAttribs,m_MaxAttrsInName) : m_NumAttribs;    if (m_NumAttribs > 0) {      coeff_inds=Utils.sort(coeff_mags);    } else {      coeff_inds=new int[m_NumAttribs];      for (j=0; j < m_NumAttribs; j++) {        coeff_inds[j]=j;      }    }    for (j=0; j < num_attrs; j++) {      coeff_value=m_Eigenvectors[coeff_inds[j]][m_SortedEigens[i]];      if (j > 0 && coeff_value >= 0) {        attName.append("+");      }      attName.append(Utils.doubleToString(coeff_value,5,3) + inputFormat.attribute(coeff_inds[j]).name());    }    if (num_attrs < m_NumAttribs) {      attName.append("...");    }    attributes.add(new Attribute(attName.toString()));    cumulative+=m_Eigenvalues[m_SortedEigens[i]];    if ((cumulative / m_SumOfEigenValues) >= m_CoverVariance) {      break;    }  }  if (m_HasClass) {    attributes.add((Attribute)m_TrainCopy.classAttribute().copy());  }  Instances outputFormat=new Instances(m_TrainCopy.relationName() + "_principal components",attributes,0);  if (m_HasClass) {    outputFormat.setClassIndex(outputFormat.numAttributes() - 1);  }  m_OutputNumAtts=outputFormat.numAttributes();  return outputFormat;}  }
class C{  public Grammar loadGrammar(String fileName){  GrammarRootAST grammarRootAST=parseGrammar(fileName);  final Grammar g=createGrammar(grammarRootAST);  g.fileName=fileName;  process(g,false);  return g;}  }
class C{  public void testTrackPointsTableUpdate_resampling(){  Capture<ContentObserver> observerCapture=new Capture<ContentObserver>();  dataSource.registerContentObserver(eq(TrackPointsColumns.CONTENT_URI),capture(observerCapture));  FixedSizeLocationIterator locationIterator=new FixedSizeLocationIterator(1,30,5);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(30L);  trackDataListener1.clearTrackPoints();  locationIterator.expectLocationsDelivered(trackDataListener1);  trackDataListener1.onNewTrackPointsDone();  replay();  trackDataHub.start();  trackDataHub.loadTrack(TRACK_ID);  trackDataHub.registerTrackDataListener(trackDataListener1,EnumSet.of(TrackDataType.SAMPLED_IN_TRACK_POINTS_TABLE));  verifyAndReset();  ContentObserver observer=observerCapture.getValue();  locationIterator=new FixedSizeLocationIterator(31,30);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(31L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(60L);  locationIterator.expectSampledLocationsDelivered(trackDataListener1,2,false);  trackDataListener1.onNewTrackPointsDone();  replay();  observer.onChange(false);  verifyAndReset();  locationIterator=new FixedSizeLocationIterator(1,90);  expect(myTracksProviderUtils.getTrackPointLocationIterator(eq(TRACK_ID),eq(0L),eq(false),isA(LocationFactory.class))).andReturn(locationIterator);  expect(myTracksProviderUtils.getLastTrackPointId(TRACK_ID)).andReturn(90L);  trackDataListener1.clearTrackPoints();  locationIterator.expectSampledLocationsDelivered(trackDataListener1,2,false);  trackDataListener1.onNewTrackPointsDone();  replay();  observer.onChange(false);  verifyAndReset();}  }
class C{  public static <T1,T2,T3,R>TriFunction<T1,T2,T3,R> memoizeTriFunction(final TriFunction<T1,T2,T3,R> fn,final Cacheable<R> cache){  val memoise2=memoizeFunction(null,cache);  return null;}  }
class C{  private static boolean LTEq(PCalLocation locA,PCalLocation locB){  if (locA.getLine() == locB.getLine()) {    return locA.getColumn() <= locB.getColumn();  }  return locA.getLine() < locB.getLine();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public String graph() throws Exception {  if (m_Classifier != null && m_Classifier instanceof Drawable) {    return ((Drawable)m_Classifier).graph();  } else {    throw new Exception("Classifier: " + getClassifierSpec() + " cannot be graphed");  }}  }
class C{  private JPanel createCustomizationPanel(){  final int numButtons=5;  JCheckBox[] checkBoxes=new JCheckBox[numButtons];  JButton beginGenerateButton;  checkBoxes[0]=new JCheckBox("(TOS) The Original Series");  checkBoxes[1]=new JCheckBox("(TNG) The Next Generation");  checkBoxes[2]=new JCheckBox("(DS9) Deep Space Nine");  checkBoxes[3]=new JCheckBox("(VOY) Voyager");  checkBoxes[4]=new JCheckBox("(ENT) Enterprise");  for (  JCheckBox jcb : checkBoxes) {    jcb.setSelected(true);  }  ArrayList<Series> shows=new ArrayList<>();  beginGenerateButton=new JButton("Begin Generating");  beginGenerateButton.addActionListener(null);  JPanel box=new JPanel();  JLabel label=new JLabel(customizationPanelDescription);  box.setLayout(new BoxLayout(box,BoxLayout.PAGE_AXIS));  box.add(label);  for (  JCheckBox checkBox : checkBoxes)   box.add(checkBox);  JPanel pane=new JPanel(new BorderLayout());  pane.add(box,BorderLayout.PAGE_START);  inputForCustom=new TextForm("Generator Seed: ",20);  pane.add(inputForCustom);  pane.add(beginGenerateButton,BorderLayout.PAGE_END);  return pane;}  }
class C{  public static void main(String... args) throws Exception {  Class.forName("org.h2.Driver");  String url="jdbc:h2:data/simple";  String user="sam";  char[] password={'t','i','a','E','T','r','p'};  Properties prop=new Properties();  prop.setProperty("user",user);  prop.put("password",password);  Connection conn=DriverManager.getConnection(url,prop);  Statement stat=conn.createStatement();  stat.execute("drop table account if exists");  stat.execute("create table account(" + "name varchar primary key, " + "salt binary default secure_rand(16), "+ "hash binary)");  PreparedStatement prep;  prep=conn.prepareStatement("insert into account(name) values(?)");  prep.setString(1,"Joe");  prep.execute();  prep.close();  prep=conn.prepareStatement("update account set " + "hash=hash('SHA256', stringtoutf8(salt||?), 10) " + "where name=?");  prep.setString(1,"secret");  prep.setString(2,"Joe");  prep.execute();  prep.close();  prep=conn.prepareStatement("select * from account " + "where name=? " + "and hash=hash('SHA256', stringtoutf8(salt||?), 10)");  prep.setString(1,"Joe");  prep.setString(2,"secret");  ResultSet rs=prep.executeQuery();  while (rs.next()) {    System.out.println(rs.getString("name"));  }  rs.close();  prep.close();  stat.close();  conn.close();}  }
class C{  @Unpreemptible("Deliver exception trying to avoid preemption") private static void deliverException(Throwable exceptionObject,AbstractRegisters exceptionRegisters){  if (VM.TraceExceptionDelivery) {    VM.sysWriteln("RuntimeEntrypoints.deliverException() entered; just got an exception object.");  }  if (VM.TraceExceptionDelivery) {    VM.sysWrite("Hunting for a catch block...");  }  RVMType exceptionType=Magic.getObjectType(exceptionObject);  Address fp=exceptionRegisters.getInnermostFramePointer();  Address hijackedCalleeFp=RVMThread.getCurrentThread().getHijackedReturnCalleeFp();  boolean leapfroggedReturnBarrier=false;  if (VM.VerifyAssertions)   VM._assert(hijackedCalleeFp.isZero() || hijackedCalleeFp.GE(fp));  while (Magic.getCallerFramePointer(fp).NE(StackFrameLayout.getStackFrameSentinelFP())) {    if (!hijackedCalleeFp.isZero() && hijackedCalleeFp.LE(fp)) {      leapfroggedReturnBarrier=true;    }    int compiledMethodId=Magic.getCompiledMethodID(fp);    if (compiledMethodId != StackFrameLayout.getInvisibleMethodID()) {      CompiledMethod compiledMethod=CompiledMethods.getCompiledMethod(compiledMethodId);      ExceptionDeliverer exceptionDeliverer=compiledMethod.getExceptionDeliverer();      Address ip=exceptionRegisters.getInnermostInstructionAddress();      Offset ipOffset=compiledMethod.getInstructionOffset(ip);      int catchBlockOffset=compiledMethod.findCatchBlockForInstruction(ipOffset,exceptionType);      if (catchBlockOffset >= 0) {        if (VM.TraceExceptionDelivery) {          VM.sysWriteln("found one; delivering.");        }        if (leapfroggedReturnBarrier) {          RVMThread t=RVMThread.getCurrentThread();          if (RVMThread.DEBUG_STACK_TRAMPOLINE)           VM.sysWriteln("leapfrogged...");          t.deInstallStackTrampoline();        }        Address catchBlockStart=compiledMethod.getInstructionAddress(Offset.fromIntSignExtend(catchBlockOffset));        exceptionDeliverer.deliverException(compiledMethod,catchBlockStart,exceptionObject,exceptionRegisters);        if (VM.VerifyAssertions)         VM._assert(NOT_REACHED);      }      exceptionDeliverer.unwindStackFrame(compiledMethod,exceptionRegisters);    } else {      unwindInvisibleStackFrame(exceptionRegisters);    }    fp=exceptionRegisters.getInnermostFramePointer();  }  if (VM.TraceExceptionDelivery) {    VM.sysWriteln("Nope.");    VM.sysWriteln("RuntimeEntrypoints.deliverException() found no catch block.");  }  if (RVMThread.DEBUG_STACK_TRAMPOLINE && leapfroggedReturnBarrier)   VM.sysWriteln("Leapfrogged, and unhandled!");  handleUncaughtException(exceptionObject);}  }
class C{  protected AbstractBean(){  pcs=new PropertyChangeSupport(this);  vcs=new VetoableChangeSupport(this);}  }
class C{  private static void checkDir(Path self) throws FileNotFoundException, IllegalArgumentException {  if (!Files.exists(self))   throw new FileNotFoundException(self.toAbsolutePath().toString());  if (!Files.isDirectory(self))   throw new IllegalArgumentException("The provided Path object is not a directory: " + self.toAbsolutePath());}  }
class C{  protected void showTabs(){  if (getPageCount() > 1) {    setPageText(0,getString("_UI_SelectionPage_label"));    if (getContainer() instanceof CTabFolder) {      ((CTabFolder)getContainer()).setTabHeight(SWT.DEFAULT);      Point point=getContainer().getSize();      getContainer().setSize(point.x,point.y - 6);    }  }}  }
class C{  public T caseExecutionFlow(ExecutionFlow object){  return null;}  }
class C{  public boolean isLeaveRemoteRecipient(){  return fieldLeaveRemoteRecipient;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.806 -0500",hash_original_method="FCD38A0808C3727AA87EA7F46AEF4310",hash_generated_method="F26790F22821D61009FE216920170AE3") public MalformedChunkCodingException(){  super();}  }
class C{  public boolean input(Instance instance){  if (getInputFormat() == null)   throw new IllegalStateException("No input instance format defined");  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_Means == null) {    bufferInput(instance);    return false;  } else {    convertInstance(instance);    return true;  }}  }
class C{  @Nullable private Color toColor(IXMLElement elem,String value) throws IOException {  String str=value;  if (str == null) {    return null;  }  str=str.trim().toLowerCase();  if (str.equals("currentcolor")) {    String currentColor=readInheritAttribute(elem,"color","black");    if (currentColor == null || currentColor.trim().toLowerCase().equals("currentColor")) {      return null;    } else {      return toColor(elem,currentColor);    }  } else   if (SVG_COLORS.containsKey(str)) {    return SVG_COLORS.get(str);  } else   if (str.startsWith("#") && str.length() == 7) {    return new Color(Integer.decode(str));  } else   if (str.startsWith("#") && str.length() == 4) {    int th=Integer.decode(str);    return new Color((th & 0xf) | ((th & 0xf) << 4) | ((th & 0xf0) << 4)| ((th & 0xf0) << 8)| ((th & 0xf00) << 8)| ((th & 0xf00) << 12));  } else   if (str.startsWith("rgb")) {    try {      StringTokenizer tt=new StringTokenizer(str,"() ,");      tt.nextToken();      String r=tt.nextToken();      String g=tt.nextToken();      String b=tt.nextToken();      Color c=new Color(r.endsWith("%") ? (int)(Integer.decode(r.substring(0,r.length() - 1)) * 2.55) : Integer.decode(r),g.endsWith("%") ? (int)(Integer.decode(g.substring(0,g.length() - 1)) * 2.55) : Integer.decode(g),b.endsWith("%") ? (int)(Integer.decode(b.substring(0,b.length() - 1)) * 2.55) : Integer.decode(b));      return c;    } catch (    Exception e) {      if (DEBUG) {        System.out.println("SVGInputFormat.toColor illegal RGB value " + str);      }      return null;    }  } else   if (str.startsWith("url")) {    if (DEBUG) {      System.out.println("SVGInputFormat.toColor not implemented for " + str);    }    return null;  } else {    return null;  }}  }
class C{  long lowMask(){  return _lowMask;}  }
class C{  protected void adjustTextSpacing(){  if (spacingApplied)   return;  if (!layoutApplied)   doExplicitGlyphLayout();  aci.first();  Boolean customSpacing=(Boolean)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.CUSTOM_SPACING);  if ((customSpacing != null) && customSpacing.booleanValue()) {    advance=doSpacing((Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.KERNING),(Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.LETTER_SPACING),(Float)aci.getAttribute(GVTAttributedCharacterIterator.TextAttribute.WORD_SPACING));    layoutApplied=false;  }  applyStretchTransform(!adjSpacing);  spacingApplied=true;  pathApplied=false;}  }
class C{  public CorsServiceBuilder preflightResponseHeader(final AsciiString name,final Object... values){  requireNonNull(name,"name");  requireNonNull(values,"values");  for (int i=0; i < values.length; i++) {    if (values[i] == null) {      throw new NullPointerException("values[" + i + ']');    }  }  if (values.length == 1) {    preflightResponseHeaders.put(name,new ConstantValueSupplier(values[0]));  } else {    preflightResponseHeader(name,Arrays.asList(values));  }  return this;}  }
class C{  public ViewPropertyAnimator scaleXBy(float value){  animatePropertyBy(SCALE_X,value);  return this;}  }
class C{  public static DownloadQueue newDownloadQueue(int threadPoolSize){  DownloadQueue downloadQueue=new DownloadQueue(threadPoolSize);  downloadQueue.start();  return downloadQueue;}  }
class C{  public int size(){  return size(root);}  }
class C{  public void bindService(){  if (!isServiceConnected()) {    FileDownloadServiceProxy.getImpl().bindStartByContext(FileDownloadHelper.getAppContext());  }}  }
class C{  public static void init(int poolSize){  mPool=new ByteArrayPool(poolSize);}  }
class C{  public static DoubleMatrix1D negate(DoubleMatrix1D A){  return A.assign(F.mult(-1));}  }
class C{  public void save(OutputStream out) throws IOException {  reset();  try {    if (doctype != null) {      OutputStreamWriter w=new OutputStreamWriter(out,"UTF8");      w.write("<!DOCTYPE ");      w.write(doctype);      w.write(">\n");      w.flush();    }    Transformer t=TransformerFactory.newInstance().newTransformer();    t.transform(new DOMSource(document),new StreamResult(out));  } catch (  TransformerException e) {    IOException error=new IOException(e.getMessage());    error.initCause(e);    throw error;  }}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearStatus(){  fieldSetFlags()[1]=false;  return this;}  }
class C{  public void train(String savename) throws IOException {  System.out.println("Starting GU-MLT-LT Train");  System.out.println("Tweets: " + tweetList.size());  Tagger tagger=new Tagger();  tagger.loadModel("resources/tagger/model.20120919.txt");  Map<String,Double> sentiWordNet=this.loadSentiWordNet();  int featurecount=0;  Map<String,Integer> nGramMap=new HashMap<String,Integer>();  Map<String,Integer> stemMap=new HashMap<String,Integer>();  Map<String,Integer> clusterMap=new HashMap<String,Integer>();  ArrayList<Attribute> attributeList=new ArrayList<Attribute>();  for (  Tweet tweet : tweetList) {    this.preProcessTweet(tweet);    this.tokenizeAndTag(tagger,tweet);    this.negate(tweet);    Set<String> nGramSet=this.getNGrams(tweet,1);    for (    String nGram : nGramSet) {      if (!nGramMap.containsKey(nGram)) {        nGramMap.put(nGram,featurecount++);        attributeList.add(new Attribute("NGRAM_" + nGram));      }    }    Set<String> stemSet=this.getStems(tweet);    for (    String stem : stemSet) {      if (!stemMap.containsKey(stem)) {        stemMap.put(stem,featurecount++);        attributeList.add(new Attribute("STEM_" + stem));      }    }    Set<String> clusterSet=this.getGUMLTLTClusters(tweet);    for (    String cluster : clusterSet) {      if (!clusterMap.containsKey(cluster)) {        clusterMap.put(cluster,featurecount++);        attributeList.add(new Attribute("CLUSTER_" + cluster));      }    }  }  Attribute sentiWordNetPos=new Attribute("sentiWordNetPos");  attributeList.add(sentiWordNetPos);  featurecount++;  Attribute sentiWordNetNeg=new Attribute("sentiWordNetNeg");  attributeList.add(sentiWordNetNeg);  featurecount++;  ArrayList<String> fvClassVal=new ArrayList<String>();  fvClassVal.add("positive");  fvClassVal.add("neutral");  fvClassVal.add("negative");  Attribute classAttribute=new Attribute("Class",fvClassVal);  attributeList.add(classAttribute);  featurecount++;  Instances trainingSet=new Instances("test",attributeList,tweetList.size());  trainingSet.setClassIndex(classAttribute.index());  for (  Tweet tweet : tweetList) {    SparseInstance instance=new SparseInstance(0);    Set<String> nGramSet=tweet.getnGramList();    for (    String nGram : nGramSet) {      Integer index=nGramMap.get(nGram);      if (index != null) {        instance.setValue(index,1);      }    }    Set<String> stemSet=tweet.getStemList();    for (    String stem : stemSet) {      Integer index=stemMap.get(stem);      if (index != null) {        instance.setValue(index,1);      }    }    Set<String> clusterSet=tweet.getClusterList();    for (    String cluster : clusterSet) {      Integer index=clusterMap.get(cluster);      if (index != null) {        instance.setValue(index,1);      }    }    instance.setValue(sentiWordNetPos,this.getSentiWordNetScore("+",sentiWordNet,tweet.getCollapsedWordList()));    instance.setValue(sentiWordNetNeg,this.getSentiWordNetScore("-",sentiWordNet,tweet.getCollapsedWordList()));    instance.setValue(classAttribute,tweet.getSentiment());    trainingSet.add(instance);  }  ArffSaver saver=new ArffSaver();  saver.setInstances(trainingSet);  saver.setFile(new File("resources/arff/Trained-Features-GUMLTLT" + savename + ".arff"));  saver.writeBatch();  System.out.println("Trained-Features-GUMLTLT" + savename + " saved");}  }
class C{  public boolean isPlotable(double lat,double lon){  lat=ProjMath.degToRad(lat);  return ((lat < NORTH_LIMIT) && (lat > SOUTH_LIMIT));}  }
class C{  public String html_popup(String short_txt,String popup_txt,String popup_title){  String popup=String.format("<div class='hide' id=popup%d title='%s'>%s</div>\n",popupId,popup_title,popup_txt);  String txt=String.format("<a class=popup href=popup id=uppop%d>%s</a>",popupId++,short_txt);  return txt + "\n" + popup;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:48.967 -0500",hash_original_method="5A39796CA8340A67B1FFF4D32268D0FF",hash_generated_method="519CB9D5598641D49CD5C6D24A5E2D01") private void badIndex(int index) throws ArrayIndexOutOfBoundsException {  String msg="Attempt to modify attribute at illegal index: " + index;  throw new ArrayIndexOutOfBoundsException(msg);}  }
class C{  public void updateProjectionMatrix(int width,int height){  mCamera.setProjectionMatrix(width,height);}  }
class C{  public LocationRequestBuilder addRequestLocation(@NonNull String provider,@Nullable LocationTime timeOut){  return addRequestLocation(provider,timeOut,null);}  }
class C{  protected KeyListener createKeyListener(){  return null;}  }
class C{  public static boolean volumeDetachedFromFullCopies(Volume volume,DbClient dbClient){  boolean detached=true;  StringSet fullCopyIds=volume.getFullCopies();  if ((fullCopyIds != null) && (!fullCopyIds.isEmpty())) {    Iterator<String> fullCopyIdsIter=fullCopyIds.iterator();    while (fullCopyIdsIter.hasNext()) {      String fullCopyId=fullCopyIdsIter.next();      Volume fullCopyVolume=dbClient.queryObject(Volume.class,URI.create(fullCopyId));      if (!isFullCopyDetached(fullCopyVolume,dbClient)) {        detached=false;      }    }  }  return detached;}  }
class C{  public static BigqueryJobFailureException create(GoogleJsonError error){  return new BigqueryJobFailureException(error.getMessage(),null,null,error);}  }
class C{  public boolean http(){  return this.http;}  }
class C{  public Property year(){  return new Property(this,YEAR);}  }
class C{  public SearchSourceBuilder aggregations(XContentBuilder aggs){  return aggregations(aggs.bytes());}  }
class C{  public NbtTagLong(){}  }
class C{  public FBSimpleDataSource(GDSType type){  mcf=new FBManagedConnectionFactory(type);}  }
class C{  default String fromURI(final URI uri){  final String s=uri.stringValue();  return s.substring(s.lastIndexOf(':') + 1);}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.PRAGMA;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:47.378 -0500",hash_original_method="290368D57FB4A6E462380F5F8D42DA38",hash_generated_method="7E57AB4A89952934B3D3F2D586FF19C1") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("CallInfoParser.parse");  CallInfoList list=new CallInfoList();  try {    headerName(TokenTypes.CALL_INFO);    while (lexer.lookAhead(0) != '\n') {      CallInfo callInfo=new CallInfo();      callInfo.setHeaderName(SIPHeaderNames.CALL_INFO);      this.lexer.SPorHT();      this.lexer.match('<');      URLParser urlParser=new URLParser((Lexer)this.lexer);      GenericURI uri=urlParser.uriReference(true);      callInfo.setInfo(uri);      this.lexer.match('>');      this.lexer.SPorHT();      super.parse(callInfo);      list.add(callInfo);      while (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();        callInfo=new CallInfo();        this.lexer.SPorHT();        this.lexer.match('<');        urlParser=new URLParser((Lexer)this.lexer);        uri=urlParser.uriReference(true);        callInfo.setInfo(uri);        this.lexer.match('>');        this.lexer.SPorHT();        super.parse(callInfo);        list.add(callInfo);      }    }    return list;  }  finally {    if (debug)     dbg_leave("CallInfoParser.parse");  }}  }
class C{  public void connect(Context srcContext,Handler srcHandler,Handler dstHandler){  connect(srcContext,srcHandler,new Messenger(dstHandler));}  }
