class C{  public static void main(String[] args){  ArrayList<Double> assistant=new ArrayList<>();  ArrayList<Double> associate=new ArrayList<>();  ArrayList<Double> full=new ArrayList<>();  try {    java.net.URL url=new java.net.URL("http://cs.armstrong.edu/liang/data/Salary.txt");    Scanner input=new Scanner(url.openStream());    while (input.hasNext()) {      String[] line=(input.nextLine()).split(" ");      processData(assistant,associate,full,line[2],new Double(line[3]));    }  } catch (  java.net.MalformedURLException ex) {    System.out.println("Invalid URL");    System.exit(0);  }catch (  java.io.IOException ex) {    System.out.println("I/O Errors: no such file");    System.exit(1);  }  double totalAssistant=getTotal(assistant);  double totalAssociate=getTotal(associate);  double totalFull=getTotal(full);  double totalFaculty=(totalAssistant + totalAssociate + totalFull);  System.out.println("\n   Total salary");  System.out.println("---------------------");  System.out.printf("Assistant professors: $%.2f\n",totalAssistant);  System.out.printf("Associate professors: $%.2f\n",totalAssociate);  System.out.printf("Full professors:      $%.2f\n",totalFull);  System.out.printf("All faculty:          $%.2f\n",totalFaculty);  System.out.println("\n   Average salary");  System.out.println("---------------------");  System.out.printf("Assistant professors: $%.2f\n",(totalAssistant / assistant.size()));  System.out.printf("Associate professors: $%.2f\n",(totalAssociate / associate.size()));  System.out.printf("Full professors:      $%.2f\n",(totalFull / full.size()));  System.out.printf("All faculty:          $%.2f\n",(totalFaculty / (assistant.size() + associate.size() + full.size())));}  }
class C{  public void changeScrollPeriod(int duration){  this.mScrollPeriod=duration;}  }
class C{  protected void deleteTokenInternal(Token token){  URI userId=token.getUserId();  _dbClient.removeObject(token);  List<Token> tokens=getTokensForUserId(userId);  List<ProxyToken> pTokens=getProxyTokensForUserId(userId);  if (CollectionUtils.isEmpty(tokens) && CollectionUtils.isEmpty(pTokens)) {    _log.info("There are no more tokens referring to the user id {}, marking it inactive");    StorageOSUserDAO userDAO=_dbClient.queryObject(StorageOSUserDAO.class,userId);    _dbClient.markForDeletion(userDAO);  }}  }
class C{  @Inject public SimpleServiceNode(CuratorFramework zkClient,@Assisted String serviceName,@Assisted InetSocketAddress address){  super(zkClient,serviceName,address);}  }
class C{  static void checkUnqualifiedName(int version,final String name,final String msg){  if ((version & 0xFFFF) < Opcodes.V1_5) {    checkIdentifier(name,msg);  } else {    for (int i=0; i < name.length(); ++i) {      if (".;[/".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }  }}  }
class C{  public Oasis(){  super();}  }
class C{  public Enumeration postorderEnumeration(){  return new PostorderEnumeration(this);}  }
class C{  public void add(TrayIcon trayIcon) throws AWTException {  if (trayIcon == null) {    throw new NullPointerException("adding null TrayIcon");  }  TrayIcon[] oldArray=null, newArray=null;  Vector<TrayIcon> icons=null;synchronized (this) {    oldArray=systemTray.getTrayIcons();    icons=(Vector<TrayIcon>)AppContext.getAppContext().get(TrayIcon.class);    if (icons == null) {      icons=new Vector<TrayIcon>(3);      AppContext.getAppContext().put(TrayIcon.class,icons);    } else     if (icons.contains(trayIcon)) {      throw new IllegalArgumentException("adding TrayIcon that is already added");    }    icons.add(trayIcon);    newArray=systemTray.getTrayIcons();    trayIcon.setID(++currentIconID);  }  try {    trayIcon.addNotify();  } catch (  AWTException e) {    icons.remove(trayIcon);    throw e;  }  firePropertyChange("trayIcons",oldArray,newArray);}  }
class C{  protected PSource(String pSrcName){  if (pSrcName == null) {    throw new NullPointerException("pSource algorithm is null");  }  this.pSrcName=pSrcName;}  }
class C{  private void loadDateValues(){  addValues(descripcionBI.getValues(tipoFicha,ValorCampoGenericoVO.TIPO_FECHA,id));}  }
class C{  public static void printUsage(){  System.out.println("\nUsage: ExampleClient [options] (<root-dir> | -list | -download [<n>]\n" + "                                | -cancel [<n>])\n" + "<root-dir> The directory which contains all programs\n"+ "Options are:\n"+ " -user <username>  Sets the username (required).\n"+ " -pass <password>  Sets the password (required).\n"+ " -l <language>     (Language) Programming language.\n"+ "                   (\"-l ?\" for supported and default languages.\n"+ "                   Also lists default suffixes and minimum match length)\n"+ " -S <dir>          Look in directories <root-dir>/*/<dir> for programs.\n"+ "                   (default: <root-dir>/*)\n"+ " -s                (Subdirs) Look at files in subdirs, too. (default: disabled)\n"+ " -p <suffixes>     <suffixes> is a comma-separated list of filename suffixes\n"+ "                   to be included. (default: language specific)\n"+ " -t <n>            (Token) Set the minimum match length in tokens.\n"+ "                   A smaller <n> increases the sensitivity of the comparison.\n"+ " -m <n>            (Matches) Number of matches that will be saved. (default:20)\n"+ " -m <p>%           Saves all matches with more than <p>% average similitarity.\n"+ " -bc <dir>         Name of the directory containing the basecode\n"+ "                   (common framework).\n"+ " -r <dir>          (Result) Name of directory where the result pages will\n"+ "                   be stored. (default: result)\n"+ " -title <title>    Title of this submission (default: submission-<date>)\n"+ " -cl <locale>      (Country language) Language the result files will\n"+ "                   be written in.\n"+ "                   (\"-cl ?\" for supported country languages and default)\n"+ " -list             Lists all submissions on the server belonging to the user.\n"+ " -download [<n>]   Downloads the <n>-th submission from server.\n"+ "                   The <n>-th submission must be \"done\".\n"+ "                   All non required options except \"-r <dir>\" will be ignored.\n"+ " -cancel [<n>]     Cancels the <n>-th submission on server.\n"+ "                   All non required options will be ignored.\n");}  }
class C{  public RangeBarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer,type);}  }
class C{  private static int findTrueIndex(String match,StringBuilder content){  int index=content.indexOf(match);  int length=match.length();  if (index + length >= content.length()) {    return index;  }  char c=content.charAt(index + length);  if (c == '\n') {    return index;  }  content.replace(index,index + length,getPlaceHolder(match));  return findTrueIndex(match,content);}  }
class C{  public void addConnection(CimConnectionInfo connectionInfo) throws ConnectionManagerException {  connectionLock.lock();  try {    if (connectionInfo == null) {      throw new ConnectionManagerException("Passed connection information is null.");    }    if (_listener == null) {      createIndicationListener(connectionInfo);    }    String hostAndPort=generateConnectionCacheKey(connectionInfo.getHost(),connectionInfo.getPort());    if (isConnected(hostAndPort)) {      s_logger.info("There is already a connection to the CIM provider on host/port {}",hostAndPort);      return;    }    try {      s_logger.info("Attempting to connect to the provider on host/port {}",hostAndPort);      _listener.pause();      String connectionType=connectionInfo.getType();      if (connectionType.equals(CimConstants.CIM_CONNECTION_TYPE)) {        createCimConnection(connectionInfo);      } else       if (connectionType.equals(CimConstants.ECOM_CONNECTION_TYPE)) {        createECOMConnection(connectionInfo);      } else       if (connectionType.equals(CimConstants.ECOM_FILE_CONNECTION_TYPE)) {        createCelerraConnection(connectionInfo);      } else {        throw new ConnectionManagerException(MessageFormatter.format("Unsupported connection type {}",connectionType).getMessage());      }      _listener.getClientCertificate(connectionInfo);    } catch (    ConnectionManagerException e) {      throw e;    }catch (    Exception e) {      throw new ConnectionManagerException(MessageFormatter.format("Failed establishing a connection to the provider on host/port {}",hostAndPort).getMessage(),e);    } finally {      _listener.resume();    }  }  finally {    connectionLock.unlock();  }}  }
class C{  private double normalKernel(double x){  Matrix thisPoint=new Matrix(1,2);  thisPoint.set(0,0,x);  thisPoint.set(0,1,m_ConstDelta);  return Math.exp(-thisPoint.times(m_CovarianceInverse).times(thisPoint.transpose()).get(0,0) / 2) / (Math.sqrt(TWO_PI) * m_Determinant);}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double slopeExponentValue=0;  double SCAExponent=0;  double z=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      SCAExponent=Double.parseDouble(args[i]);    } else     if (i == 4) {      slopeExponentValue=Double.parseDouble(args[i]);    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (SCAExponent < 0.1) {      SCAExponent=0.1;    }    if (SCAExponent > 20) {      SCAExponent=20;    }    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("spectrum.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          z=(SCAExponent + 1) * Math.pow((area[col] / 22.13),SCAExponent) * Math.pow((Math.sin(Math.toRadians(slope[col])) / 0.0896),slopeExponentValue);          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public void onConnected(Bundle bundle){  final Uri dataItemUri=new Uri.Builder().scheme(WEAR_URI_SCHEME).path(NotificationConstants.TAKEOFF_PATH).build();  Log.d(TAG,"Deleting Uri: " + dataItemUri.toString());  Wearable.DataApi.deleteDataItems(mGoogleApiClient,dataItemUri).setResultCallback(this);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:35.680 -0500",hash_original_method="A28646D8654C968065CCEE80C360B171",hash_generated_method="5BDF40E1FD876DCB9A201D9F7020DAE4") @Override public void onDestroyView(){  super.onDestroyView();  if (mDialog != null) {    mViewDestroyed=true;    mDialog.dismiss();    mDialog=null;  }}  }
class C{  public Partial withFieldAdded(DurationFieldType fieldType,int amount){  int index=indexOfSupported(fieldType);  if (amount == 0) {    return this;  }  int[] newValues=getValues();  newValues=getField(index).add(this,index,newValues,amount);  return new Partial(this,newValues);}  }
class C{  public boolean addAll(int index,Collection<C> controllers){  controllerNodeMap.putAll(controllers.stream().collect(Collectors.toMap(Function.identity(),null)));  return addAllNodesToObservable(index,(List<N>)controllers.stream().map(null).collect(Collectors.toList()));}  }
class C{  public Feature(){}  }
class C{  @Override public V put(K key,V value){  V result=putImpl(key,value);  if (removeEldestEntry(head)) {    remove(head.key);  }  return result;}  }
class C{  public void paintCurrentValue(Graphics g,Rectangle bounds,boolean hasFocus){  ListCellRenderer renderer=comboBox.getRenderer();  Component c;  if (hasFocus && !isPopupVisible(comboBox)) {    c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,true,false);  } else {    c=renderer.getListCellRendererComponent(listBox,comboBox.getSelectedItem(),-1,false,false);    c.setBackground(UIManager.getColor("ComboBox.background"));  }  c.setFont(comboBox.getFont());  if (hasFocus && !isPopupVisible(comboBox)) {    c.setForeground(listBox.getSelectionForeground());    c.setBackground(listBox.getSelectionBackground());  } else {    if (comboBox.isEnabled()) {      c.setForeground(comboBox.getForeground());      c.setBackground(comboBox.getBackground());    } else {      c.setForeground(DefaultLookup.getColor(comboBox,this,"ComboBox.disabledForeground",null));      c.setBackground(DefaultLookup.getColor(comboBox,this,"ComboBox.disabledBackground",null));    }  }  boolean shouldValidate=false;  if (c instanceof JPanel) {    shouldValidate=true;  }  int x=bounds.x, y=bounds.y, w=bounds.width, h=bounds.height;  if (padding != null) {    x=bounds.x + padding.left;    y=bounds.y + padding.top;    w=bounds.width - (padding.left + padding.right);    h=bounds.height - (padding.top + padding.bottom);  }  currentValuePane.paintComponent(g,c,comboBox,x,y,w,h,shouldValidate);}  }
class C{  private void resetMatrix(){  if (suppMatrix == null) {    return;  }  suppMatrix.reset();  setImageMatrix(getDisplayMatrix());}  }
class C{  public Signer(final KeyPair keyPair,final CryptoEngine engine){  this(engine.createDsaSigner(keyPair));}  }
class C{  static String[] concatStringArrays(String[] array1,String[] array2){  String[] result=new String[array1.length + array2.length];  for (int i=0; i < array1.length; i++) {    result[i]=array1[i];  }  for (int i=0; i < array2.length; i++) {    result[i + array1.length]=array2[i];  }  return result;}  }
class C{  private void destroyRing(SlotOwner container,final WeddingRing ring,final RPSlot slot){  informNearbyPlayers(ring);  RPEntity player=null;  if (container instanceof RPEntity) {    player=(RPEntity)container;  }  new ItemLogger().destroy(player,slot,ring,"another ring");  ring.removeFromWorld();  logger.info("Destroyed a wedding ring: " + ring);}  }
class C{  public Javac(Bytecode b,CtClass thisClass){  gen=new JvstCodeGen(b,thisClass,thisClass.getClassPool());  stable=new SymbolTable();  bytecode=b;}  }
class C{  public Gobble(File file){  this(file,null,null);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  private static Set<Integer> determineConsiderableObjects(DefUseCoverageTestFitness goal,ExecutionTrace trace){  String goalVariable=goal.getGoalVariable();  Definition goalDefinition=goal.getGoalDefinition();  Set<Integer> objectPool=new HashSet<Integer>();  if (trace.getPassedUses(goalVariable) == null)   return objectPool;  if (trace.getPassedDefinitions(goalVariable) != null)   objectPool.addAll(trace.getPassedDefinitions(goalVariable).keySet());  if (goalDefinition == null || goalDefinition.isStaticDefUse()) {    objectPool.addAll(trace.getPassedUses(goalVariable).keySet());    if (DEBUG)     logger.debug("Static-goalVariable! Using all known Objects");  } else {    int oldSize=objectPool.size();    objectPool.retainAll(trace.getPassedUses(goalVariable).keySet());    if (DEBUG) {      logger.debug("NON-Static-goalVariable " + goalVariable);      logger.debug("#unused objects: " + (oldSize - objectPool.size()));      Set<Integer> discardedObjects=new HashSet<Integer>();      discardedObjects.addAll(trace.getPassedDefinitions(goalVariable).keySet());      discardedObjects.removeAll(trace.getPassedUses(goalVariable).keySet());      for (      Integer id : discardedObjects) {        logger.debug("  discarded object " + id);      }    }  }  if (DEBUG) {    logger.debug("#considered objects: " + objectPool.size());    for (    Integer id : objectPool) {      logger.debug("  object " + id);    }  }  return objectPool;}  }
class C{  public void clearClientProperties(){  if (clientProperties != null) {    clientProperties.clear();    clientProperties=null;  }}  }
class C{  public static ClusterFactory createClusterFactory(Configuration conf){  String clusterFactoryClassName=conf.get(ConfigurationKeys.BATCH_JOB_CLUSTER_FACTORY_CLASS);  if (clusterFactoryClassName != null) {    ClusterFactory factory=null;    try {      factory=(ClusterFactory)Class.forName(clusterFactoryClassName).newInstance();    } catch (    InstantiationException|IllegalAccessException|ClassNotFoundException e) {      throw new RuntimeException(e);    }    return factory;  } else {    ConfiguredClusterFactory configuredClusterFactory=new ConfiguredClusterFactory();    configuredClusterFactory.setConf(conf);    return configuredClusterFactory;  }}  }
class C{  public void validate(){}  }
class C{  public static MarketBias newInstance(){  final MarketBias returnInstance=new MarketBias();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  private static void removeWindow(int WindowNo){  if (WindowNo < s_windows.size())   s_windows.set(WindowNo,null);}  }
class C{  public double[] estimateL2DistanceSquared(Datum queryDatum){  RealVector vector=queryDatum.metrics();  double[] estimates=new double[2];  for (int i=0; i < k; i++) {    double deltaLo=vector.getEntry(i) - this.boundaries[i][0];    double deltaHi=this.boundaries[i][1] - vector.getEntry(i);    double sqDeltaLo=deltaLo * deltaLo;    double sqDeltaHi=deltaHi * deltaHi;    if (deltaLo < 0 || deltaHi < 0) {      if (sqDeltaHi < sqDeltaLo) {        estimates[0]+=sqDeltaHi;        estimates[1]+=sqDeltaLo;      } else {        estimates[0]+=sqDeltaLo;        estimates[1]+=sqDeltaHi;      }    } else {      estimates[1]+=Math.max(sqDeltaHi,sqDeltaLo);    }  }  return estimates;}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  if (NO_CACHING) {    reconstructTree=true;    updateAllNodes();  }  if (model == treeModel) {    if (object instanceof ARGModel.TreeChangedEvent) {      ARGModel.TreeChangedEvent event=(ARGModel.TreeChangedEvent)object;      if (event.isSizeChanged()) {        updateAllNodes();        reconstructTree=true;      } else       if (event.isNodeChanged()) {        NodeRef treeNode=mapARGNodesToTreeNodes.get(event.getNode());        if (treeNode != null) {          if (event.isHeightChanged() || event.isRateChanged()) {            updateNodeAndChildren(treeNode);          } else {            reconstructTree=true;            updateAllNodes();          }        }      } else       if (event.isTreeChanged()) {        reconstructTree=true;        updateAllNodes();      } else {        throw new RuntimeException("Another tree event has occured (possibly a trait change).");      }    } else     if (object instanceof ARGPartitioningOperator.PartitionChangedEvent) {      final boolean[] updatePartition=((ARGPartitioningOperator.PartitionChangedEvent)object).getUpdatedPartitions();      if (updatePartition[partition]) {        reconstructTree=true;        updateAllNodes();      }    } else     if (object instanceof Parameter) {    } else     throw new RuntimeException("Unexpected ARGModel update " + object.getClass());  } else   if (model == branchRateModel) {    updateAllNodes();  } else   if (model == frequencyModel) {    updateAllNodes();  } else   if (model instanceof SiteModel) {    updateAllNodes();  } else {    throw new RuntimeException("Unknown componentChangedEvent");  }  super.handleModelChangedEvent(model,object,index);}  }
class C{  public void releaseAll(){  applyDelta(Integer.MIN_VALUE);}  }
class C{  static void createVbo(){  int vbo=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,vbo);  ByteBuffer bb=BufferUtils.createByteBuffer(boxes.length * 4 * (3 + 3)* 6* 6);  FloatBuffer fv=bb.asFloatBuffer();  for (int i=0; i < boxes.length; i+=2) {    DemoUtils.triangulateBox(boxes[i],boxes[i + 1],fv);  }  glBufferData(GL_ARRAY_BUFFER,bb,GL_STATIC_DRAW);  glEnableVertexAttribArray(0);  glVertexAttribPointer(0,3,GL_FLOAT,false,4 * (3 + 3),0L);  glEnableVertexAttribArray(1);  glVertexAttribPointer(1,3,GL_FLOAT,false,4 * (3 + 3),4 * 3);  glBindBuffer(GL_ARRAY_BUFFER,0);}  }
class C{  private String buildCookieHeader(List<String> cookies){  if (cookies.size() == 1)   return cookies.get(0);  StringBuilder sb=new StringBuilder();  for (int i=0; i < cookies.size(); i++) {    if (i > 0)     sb.append("; ");    sb.append(cookies.get(i));  }  return sb.toString();}  }
class C{  public boolean isSwipeActivated(){  return swipeActivated;}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> CacheLoadOnlyStoreExample started.");    ProductLoader productLoader=new ProductLoader("examples/src/main/resources/person.csv");    productLoader.setThreadsCount(2);    productLoader.setBatchSize(10);    productLoader.setBatchQueueSize(1);    try (IgniteCache<Long,Person> cache=ignite.getOrCreateCache(cacheConfiguration(productLoader))){      cache.loadCache(null);      System.out.println(">>> Loaded number of items: " + cache.size(CachePeekMode.PRIMARY));      System.out.println(">>> Data for the person by id1: " + cache.get(1L));    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  CaptureDeviceInput conn=getCapDevInput(stack);  return new Integer(conn == null ? 0 : conn.getContrast());}  }
class C{  public DefaultVcfWriter(VcfHeader header,OutputStream out){  if (out == null) {    throw new NullPointerException("output stream cannot be null");  }  if (header == null) {    throw new NullPointerException("header cannot be null");  }  mIndexer=null;  mOut=out;  mHeader=header;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public final void testAddAllHelperTextsFromArray(){  CharSequence helperText1="helperText1";  CharSequence helperText2="helperText2";  CharSequence[] helperTexts1=new CharSequence[2];  helperTexts1[0]=helperText1;  helperTexts1[1]=helperText2;  PasswordEditText passwordEditText=new PasswordEditText(getContext());  passwordEditText.addAllHelperTexts(helperTexts1);  passwordEditText.addAllHelperTexts(helperTexts1);  Collection<CharSequence> helperTexts2=passwordEditText.getHelperTexts();  assertEquals(helperTexts1.length,helperTexts2.size());  Iterator<CharSequence> iterator=helperTexts2.iterator();  assertEquals(helperText1,iterator.next());  assertEquals(helperText2,iterator.next());}  }
class C{  public void fillFieldValues(final ArrayList<Randomizer> randomizers){  Randomizer rand=(Randomizer)randomizers.get(0);  ParameterGetter<Randomizer,Double> p1Getter=null;  if (NetworkUtils.isConsistent(randomizers,p1Getter)) {    tfParam1.setText(Double.toString(rand.getParam1()));  } else {    tfParam1.setText(SimbrainConstants.NULL_STRING);  }  ParameterGetter<Randomizer,Double> p2Getter=null;  if (NetworkUtils.isConsistent(randomizers,p2Getter)) {    tfParam2.setText(Double.toString(rand.getParam2()));  } else {    tfParam2.setText(SimbrainConstants.NULL_STRING);  }  if (!pdf.equals(ProbDistribution.UNIFORM)) {    ParameterGetter<Randomizer,Double> lbGetter=null;    if (NetworkUtils.isConsistent(randomizers,lbGetter)) {      tfLowBound.setText(Double.toString(rand.getLowerBound()));    } else {      tfLowBound.setText(SimbrainConstants.NULL_STRING);    }    ParameterGetter<Randomizer,Double> ubGetter=null;    if (NetworkUtils.isConsistent(randomizers,ubGetter)) {      tfUpBound.setText(Double.toString(rand.getUpperBound()));    } else {      tfUpBound.setText(SimbrainConstants.NULL_STRING);    }    ParameterGetter<Randomizer,Boolean> clippingGetter=null;    if (NetworkUtils.isConsistent(randomizers,clippingGetter)) {      tsClipping.setSelected(rand.getClipping());    } else {      tsClipping.setNull();    }  }}  }
class C{  public boolean attempt(Word old,Word val,Offset offset){  return this.plus(offset).attempt(old,val);}  }
class C{  public Object remove(Object old){  return oldNewMap.remove(old);}  }
class C{  private void doNegativeTest(String hint){  myFixture.configureByFile("intentions/before" + getTestName(false) + ".py");  List<IntentionAction> ints=myFixture.filterAvailableIntentions(hint);  assertEmpty(ints);}  }
class C{  public SslNormalMessage(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  @Override public boolean afterSampling(Sampler<?,?,?> sampler,SampledVertexDecorator<?> vertex){  return true;}  }
class C{  public CSVWriter(Writer writer){  this(writer,DEFAULT_SEPARATOR);}  }
class C{  private int selectedItemCount(){  int count=0;  SparseBooleanArray sba=getListView().getCheckedItemPositions();  for (int i=0; i < getListView().getCount(); i++) {    if (sba.get(i,false)) {      count++;    }  }  return count;}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.TRACE_FOR___TRACE_FOR_1:    return TRACE_FOR_1_EDEFAULT == null ? trace_for_1 != null : !TRACE_FOR_1_EDEFAULT.equals(trace_for_1);}return super.eIsSet(featureID);}  }
class C{  public static void generateExtensionManager(File rootFolder) throws IOException {  File extManager=new File(rootFolder,EXT_MANAGER_PATH);  StringBuilder builder=new StringBuilder();  builder.append("package org.eclipse.che.ide.client;\n\n");  generateImports(builder);  generateClass(builder);  FileUtils.writeStringToFile(extManager,builder.toString());}  }
class C{  public void resetData(List<double[]> data,List<String> names){  this.data=data;  this.dataNames=names;  redraw();}  }
class C{  public static JBBPOut BeginBin(final int initialSize){  return new JBBPOut(new ByteArrayOutputStream(initialSize),DEFAULT_BYTE_ORDER,DEFAULT_BIT_ORDER);}  }
class C{  public List<ShardRouting> ignored(){  return Collections.unmodifiableList(ignored);}  }
class C{  public boolean isMultiSelection(){  return this.isMultiple();}  }
class C{  public synchronized int length(){  return value.size();}  }
class C{  public void error(Throwable ex){  error(ex,false);}  }
class C{  public void initialise(int k,int k_tau,int l,int l_tau,int delay) throws Exception {  if (delay < 0) {    throw new Exception("Cannot compute TE with source-destination delay < 0");  }  this.k=k;  this.k_tau=k_tau;  this.l=l;  this.l_tau=l_tau;  this.delay=delay;  setStartTimeForFirstDestEmbedding();  vectorOfSourceTimeSeries=null;  vectorOfDestinationTimeSeries=null;  vectorOfValidityOfSource=null;  vectorOfValidityOfDestination=null;  separateNumObservations=new int[]{};}  }
class C{  public IceControllingAttribute(){  super(true);}  }
class C{  public static String writeGeometry(Geometry geometry,double z,int precision,boolean extrude,String altitudeMode){  KMLWriter writer=new KMLWriter();  writer.setZ(z);  writer.setPrecision(precision);  writer.setExtrude(extrude);  writer.setAltitudeMode(altitudeMode);  return writer.write(geometry);}  }
class C{  public static void liftingFromBottom(View view,float baseRotation,int duration){  ViewHelper.setRotationX(view,baseRotation);  ViewHelper.setTranslationY(view,view.getHeight() / 3);  ViewPropertyAnimator.animate(view).setInterpolator(ACCELERATE_DECELERATE).setDuration(duration).rotationX(0).translationY(0).start();}  }
class C{  private static int textCompaction(int[] codewords,int codeIndex,StringBuilder result){  int[] textCompactionData=new int[codewords[0] << 1];  int[] byteCompactionData=new int[codewords[0] << 1];  int index=0;  boolean end=false;  while ((codeIndex < codewords[0]) && !end) {    int code=codewords[codeIndex++];    if (code < TEXT_COMPACTION_MODE_LATCH) {      textCompactionData[index]=code / 30;      textCompactionData[index + 1]=code % 30;      index+=2;    } else {switch (code) {case TEXT_COMPACTION_MODE_LATCH:        textCompactionData[index++]=TEXT_COMPACTION_MODE_LATCH;      break;case BYTE_COMPACTION_MODE_LATCH:    codeIndex--;  end=true;break;case NUMERIC_COMPACTION_MODE_LATCH:codeIndex--;end=true;break;case MODE_SHIFT_TO_BYTE_COMPACTION_MODE:textCompactionData[index]=MODE_SHIFT_TO_BYTE_COMPACTION_MODE;code=codewords[codeIndex++];byteCompactionData[index]=code;index++;break;case BYTE_COMPACTION_MODE_LATCH_6:codeIndex--;end=true;break;}}}decodeTextCompaction(textCompactionData,byteCompactionData,index,result);return codeIndex;}  }
class C{  @Override public boolean canConvert(final Class<?> type){  return (this.type == null || this.type == type) && beanProvider.canInstantiate(type);}  }
class C{  void checkType(int type){  if (!typeSet.contains(type)) {    trace("Unsupported type: " + type);  }}  }
class C{  public static List<String> makeFeatureIdListFromPrefixed(Map<String,Object> parameters){  List<String> featureIdList=FastList.newInstance();  if (parameters == null)   return featureIdList;  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {    String parameterName=entry.getKey();    if (parameterName.startsWith("SEARCH_FEAT")) {      String productFeatureId=(String)entry.getValue();      if (UtilValidate.isNotEmpty(productFeatureId)) {        featureIdList.add(productFeatureId);      }    }  }  return featureIdList;}  }
class C{  public double normalizeLatitude(double lat){  if (lat > NORTH_POLE) {    return NORTH_POLE;  } else   if (lat < SOUTH_POLE) {    return SOUTH_POLE;  }  return lat;}  }
class C{  protected boolean shell(double parent_query_dist,double child_parent_dist,double upper_bound){  return parent_query_dist - child_parent_dist <= upper_bound;}  }
class C{  public PasswordResetCommandImpl(final ShoppingCartCommandRegistry registry,final CustomerService customerService,final ShopService shopService){  super(registry);  this.customerService=customerService;  this.shopService=shopService;}  }
class C{  public int size(){  return rdns.size();}  }
class C{  public Builder dismissCallback(SnackbarDismissCallback callback){  dismissCallback=callback;  return this;}  }
class C{  @Retained public static Object _getValueRetain(@Retained @Unretained OffHeapRegionEntry re,boolean decompress,RegionEntryContext context){  int retryCount=0;  @Retained long addr=re.getAddress();  while (isOffHeap(addr)) {    if (OffHeapStoredObject.retain(addr)) {      @Unretained long addr2=re.getAddress();      if (addr != addr2) {        retryCount=0;        OffHeapStoredObject.release(addr);        addr=addr2;      } else {        return addressToObject(addr,decompress,context);      }    } else {      long addr2=re.getAddress();      retryCount++;      if (retryCount > 100) {        throw new IllegalStateException("retain failed addr=" + addr + " addr2="+ addr+ " 100 times"+ " history="+ ReferenceCountHelper.getFreeRefCountInfo(addr));      }      addr=addr2;    }  }  return addressToObject(addr,decompress,context);}  }
class C{  protected boolean translateCommand(StringBuilder buf,String pattern,int index,boolean oldInside){  char firstChar=pattern.charAt(index);  boolean newInside=oldInside;  if (firstChar == 'O' || firstChar == 'E') {    if (index + 1 < pattern.length()) {      newInside=translateCommand(buf,pattern,index + 1,oldInside);    } else {      buf.append(quote("%" + firstChar,oldInside));    }  } else {    String command=translate.get(String.valueOf(firstChar));    if (command == null) {      buf.append(quote("%" + firstChar,oldInside));    } else {      if (oldInside) {        buf.append('\'');      }      buf.append(command);      newInside=false;    }  }  return newInside;}  }
class C{  public int size(){  return valueMap.size();}  }
class C{  private double computeFromDistribution(ProbabilityDistributionCode dcode,HashMap<String,String> params,boolean inverse) throws MathArithmeticException, DMLRuntimeException {  double val=Double.parseDouble(params.get("target"));  boolean lowertail=true;  if (params.get("lower.tail") != null) {    lowertail=Boolean.parseBoolean(params.get("lower.tail"));  }  AbstractRealDistribution distFunction=null;switch (dcode) {case NORMAL:    double mean=0.0, sd=1.0;  String mean_s=params.get("mean"), sd_s=params.get("sd");if (mean_s != null) mean=Double.parseDouble(mean_s);if (sd_s != null) sd=Double.parseDouble(sd_s);if (sd <= 0) throw new DMLRuntimeException("Standard deviation for Normal distribution must be positive (" + sd + ")");distFunction=new NormalDistribution(mean,sd);break;case EXP:double exp_rate=1.0;if (params.get("rate") != null) exp_rate=Double.parseDouble(params.get("rate"));if (exp_rate <= 0) {throw new DMLRuntimeException("Rate for Exponential distribution must be positive (" + exp_rate + ")");}distFunction=new ExponentialDistribution(1.0 / exp_rate);break;case CHISQ:if (params.get("df") == null) {throw new DMLRuntimeException("" + "Degrees of freedom must be specified for chi-squared distribution " + "(e.g., q=qchisq(0.5, df=20); p=pchisq(target=q, df=1.2))");}int df=UtilFunctions.parseToInt(params.get("df"));if (df <= 0) {throw new DMLRuntimeException("Degrees of Freedom for chi-squared distribution must be positive (" + df + ")");}distFunction=new ChiSquaredDistribution(df);break;case F:if (params.get("df1") == null || params.get("df2") == null) {throw new DMLRuntimeException("" + "Degrees of freedom must be specified for F distribution " + "(e.g., q = qf(target=0.5, df1=20, df2=30); p=pf(target=q, df1=20, df2=30))");}int df1=UtilFunctions.parseToInt(params.get("df1"));int df2=UtilFunctions.parseToInt(params.get("df2"));if (df1 <= 0 || df2 <= 0) {throw new DMLRuntimeException("Degrees of Freedom for F distribution must be positive (" + df1 + ","+ df2+ ")");}distFunction=new FDistribution(df1,df2);break;case T:if (params.get("df") == null) {throw new DMLRuntimeException("" + "Degrees of freedom is needed to compute probabilities from t distribution " + "(e.g., q = qt(target=0.5, df=10); p = pt(target=q, df=10))");}int t_df=UtilFunctions.parseToInt(params.get("df"));if (t_df <= 0) {throw new DMLRuntimeException("Degrees of Freedom for t distribution must be positive (" + t_df + ")");}distFunction=new TDistribution(t_df);break;default :throw new DMLRuntimeException("Invalid distribution code: " + dcode);}double ret=Double.NaN;if (inverse) {ret=distFunction.inverseCumulativeProbability(val);} else if (lowertail) {ret=distFunction.cumulativeProbability(val);} else {ret=1.0 - distFunction.cumulativeProbability(val);}return ret;}  }
class C{  public XMLException(String systemID,int lineNr,Exception e,String msg,boolean reportParams){  super(XMLException.buildMessage(systemID,lineNr,e,msg,reportParams));  this.systemID=systemID;  this.lineNr=lineNr;  this.encapsulatedException=e;  this.msg=XMLException.buildMessage(systemID,lineNr,e,msg,reportParams);}  }
class C{  public AddNodesResult clone(){  AddNodesResult result=new AddNodesResult();  result.StatusCode=StatusCode;  result.AddedNodeId=AddedNodeId;  return result;}  }
class C{  protected void createRipple(double x,double y){  rippler.setGeneratorCenterX(x);  rippler.setGeneratorCenterY(y);  rippler.createRipple();}  }
class C{  public void cd(String dir){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.cd"),dir);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());}  }
class C{  public boolean isEffectEdge(double bump){  return bump > 0;}  }
class C{  protected void fillOrg(Listbox cb){  KeyNamePair pp=new KeyNamePair(0,"");  cb.appendItem(pp.getName(),pp);  String sql="SELECT AD_Org_ID, Name FROM AD_Org WHERE AD_Client_ID=? ORDER BY Value";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,AD_Client_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      KeyNamePair key=new KeyNamePair(rs.getInt(1),rs.getString(2));      cb.appendItem(key.getName(),key);    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  public DefaultPositionUpdater(String category){  fCategory=category;}  }
class C{  public static Object deepClone(Object array){  Class<?> componentType=getComponentType(array.getClass());  int dims[]=getArrayLengths(array);  Object[] elements=(Object[])muxArray(array,dims,componentType);  try {    Object[] args=new Object[0];    for (int i=0; i < elements.length; i++) {      Object element=elements[i];      try {        if (element == null)         continue;        Method clone=element.getClass().getMethod("clone");        clone.setAccessible(true);        elements[i]=clone.invoke(element,args);      } catch (      NoSuchMethodException e) {      }    }  } catch (  SecurityException e) {    throw new RuntimeException(e);  }catch (  IllegalArgumentException e) {    throw new RuntimeException(e);  }catch (  IllegalAccessException e) {    throw new RuntimeException(e);  }catch (  InvocationTargetException e) {    throw new RuntimeException(e);  }  return demuxArray(elements,dims,componentType);}  }
class C{  public void verifyVisibilityOfElement(WebElement element){  try {    WebDriverWait wait=(WebDriverWait)new WebDriverWait(appiumDriver,maxWaitTime,500);    wait.until(ExpectedConditions.visibilityOf(element));  } catch (  Throwable t) {    captureScreenshot();    throw t;  }}  }
class C{  public GeoShapeQueryBuilder indexedShapePath(String indexedShapePath){  this.indexedShapePath=indexedShapePath;  return this;}  }
class C{  public byte ID(){  return 5;}  }
class C{  public void add(Con con){  Node current=getLastNode();  Tribit input=INPUT_FROM_CONSTELLATION_MAP.get(con)[current.getState().getValue()];  if (input != null) {    add(new Node(mNodes.size(),input,con));  } else {    Con[] constellations=current.getState().getType() == Type.EVEN ? EVEN_CONSTELLATIONS : ODD_CONSTELLATIONS;    for (int x=0; x < 8; x++) {      Tribit tribit=INPUT_FROM_CONSTELLATION_MAP.get(constellations[x])[current.getState().getValue()];      Node candidate=new Node(mNodes.size(),tribit,constellations[x]);      if (this.getPathMetric() + candidate.getBranchMetric() >= mPathMetrics.getMetric(tribit)) {        if (x == 7) {          add(candidate);        } else {          Path path=this.copyOf();          path.add(candidate);          mNewPaths.add(path);        }      }    }  }}  }
class C{  private void dumpEvent(MotionEvent event){  String[] names={"DOWN","UP","MOVE","CANCEL","OUTSIDE","POINTER_DOWN","POINTER_UP","7?","8?","9?"};  StringBuilder sb=new StringBuilder();  int action=event.getAction();  int actionCode=action & MotionEvent.ACTION_MASK;  sb.append("event ACTION_").append(names[actionCode]);  if (actionCode == MotionEvent.ACTION_POINTER_DOWN || actionCode == MotionEvent.ACTION_POINTER_UP) {    sb.append("(pid ").append(action >> MotionEvent.ACTION_POINTER_ID_SHIFT);    sb.append(")");  }  sb.append("[");  for (int i=0; i < event.getPointerCount(); i++) {    sb.append("#").append(i);    sb.append("(pid ").append(event.getPointerId(i));    sb.append(")=").append((int)event.getX(i));    sb.append(",").append((int)event.getY(i));    if (i + 1 < event.getPointerCount())     sb.append(";");  }  sb.append("]");  Log.d("tourguide",sb.toString());}  }
class C{  private void applyKitKatTranslucency(){  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {    setTranslucentStatus(true);    SystemBarTintManager mTintManager=new SystemBarTintManager(this);    mTintManager.setStatusBarTintEnabled(true);    mTintManager.setNavigationBarTintEnabled(true);    mTintManager.setTintDrawable(UIElementsHelper.getGeneralActionBarBackground(this));    getActionBar().setBackgroundDrawable(UIElementsHelper.getGeneralActionBarBackground(this));  }}  }
class C{  public void paintCheckBoxMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @Override public TopicSubscriber createDurableSubscriber(final Topic topic,final String name,final String messageSelector,final boolean noLocal) throws JMSException {  lock();  try {    Session session=getSessionInternal();    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createDurableSubscriber " + session + " topic="+ topic+ " name="+ name+ " selector="+ messageSelector+ " noLocal="+ noLocal);    }    TopicSubscriber result=session.createDurableSubscriber(topic,name,messageSelector,noLocal);    result=new ActiveMQRATopicSubscriber(result,this);    if (ActiveMQRASession.trace) {      ActiveMQRALogger.LOGGER.trace("createdDurableSubscriber " + session + " ActiveMQTopicSubscriber="+ result);    }    addConsumer(result);    return result;  }  finally {    unlock();  }}  }
class C{  @SuppressWarnings("deprecation") @Deprecated public static void dumpStack(Thread t){  dumpStack(t,System.err);}  }
class C{  @Override public void cancel(){  session.cancelStatement(id);}  }
class C{  public static TextEdit reformat(int kind,String source,int offset,int length,int indentationLevel,String lineSeparator,Map<String,String> options){  if (offset < 0 || length < 0 || offset + length > source.length()) {    throw new IllegalArgumentException("offset or length outside of string. offset: " + offset + ", length: "+ length+ ", string size: "+ source.length());  }  return ToolFactory.createCodeFormatter(options,ToolFactory.M_FORMAT_EXISTING).format(kind,source,offset,length,indentationLevel,lineSeparator);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            curv=(Zxx * Zx2 + 2 * Zxy * Zx* Zy + Zyy * Zy2) / (p * Math.pow(q,1.5));            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected String firstChunkId(){  return "IHDR";}  }
class C{  public void addOrUpdateExtensionValue(ExtensionFieldValueEntity extensionValue){  if (extensionValue == null) {    throw new IllegalArgumentException("extensionValue must not be null");  }  if (extensionFieldValues.contains(extensionValue)) {    extensionFieldValues.remove(extensionValue);  }  extensionFieldValues.add(extensionValue);}  }
class C{  @Override public int delete(Uri uri,String selection,String[] selectionArgs){  if (uri == null) {    LogUtils.log(this,Log.WARN,NULL_URI_FORMAT_STRING);    return 0;  }switch (sUriMatcher.match(uri)) {case LABELS_ID:    initializeDatabaseIfNull();  final String labelIdString=uri.getLastPathSegment();final int labelId;try {labelId=Integer.parseInt(labelIdString);} catch (NumberFormatException e) {LogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);return 0;}final String where=String.format("%s = %d",LabelsTable.KEY_ID,labelId);final int result=mDatabase.delete(LabelsTable.TABLE_NAME,combineSelectionAndWhere(selection,where),selectionArgs);getContext().getContentResolver().notifyChange(uri,null);return result;default :LogUtils.log(this,Log.WARN,UNKNOWN_URI_FORMAT_STRING,uri);return 0;}}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.PARAMETER_LIST___PARAMETER_1:    return getParameter_1();case UmplePackage.PARAMETER_LIST___ANONYMOUS_PARAMETER_LIST_11:  return getAnonymous_parameterList_1_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public IntArray(){  this(10);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ErrorState(DownloadInfoRunnable downloadInfoRunnable,EnumDownloadFailReason errorMessage){  super(downloadInfoRunnable);  mErrorMessage=errorMessage;}  }
class C{  public final boolean hasMessages(int what){  return mExec.hasMessages(what);}  }
class C{  public Vertex evaluateNOTEQUALS(Vertex expression,List<Relationship> arguments,Map<Vertex,Vertex> variables,Network network,long startTime,long maxTime,int stack){  if (!checkArguments(expression,arguments,2,network)) {    return network.createVertex(Primitive.NULL);  }  Vertex left=evaluateExpression(arguments.get(0).getTarget(),variables,network,startTime,maxTime,stack);  Vertex right=evaluateExpression(arguments.get(1).getTarget(),variables,network,startTime,maxTime,stack);  Boolean matches=left.matches(right,variables);  if (matches == null) {    matches=false;  }  if (!matches) {    return network.createVertex(Primitive.TRUE);  } else {    return network.createVertex(Primitive.FALSE);  }}  }
class C{  public String readString(String key){  String value=(String)mCache.get(key);  if (value == null && !mCache.containsKey(key)) {    value=readParameter(key);    mCache.put(key,value);  }  return value;}  }
class C{  public String buildCommandLine(Draft2Job job,File workingDir,FilePathMapper filePathMapper) throws BindingException {  Draft2CommandLineTool commandLineTool=(Draft2CommandLineTool)job.getApp();  List<Object> commandLineParts=buildCommandLineParts(job,workingDir,filePathMapper);  StringBuilder builder=new StringBuilder();  for (  Object commandLinePart : commandLineParts) {    builder.append(commandLinePart).append(PART_SEPARATOR);  }  String stdin=null;  try {    stdin=commandLineTool.getStdin(job);  } catch (  Draft2ExpressionException e) {    logger.error("Failed to extract standard input.",e);    throw new BindingException("Failed to extract standard input.",e);  }  if (!StringUtils.isEmpty(stdin)) {    builder.append(PART_SEPARATOR).append("<").append(PART_SEPARATOR).append(stdin);  }  String stdout=null;  try {    stdout=commandLineTool.getStdout(job);  } catch (  Draft2ExpressionException e) {    logger.error("Failed to extract standard output.",e);    throw new BindingException("Failed to extract standard outputs.",e);  }  if (!StringUtils.isEmpty(stdout)) {    builder.append(PART_SEPARATOR).append(">").append(PART_SEPARATOR).append(stdout);  }  String commandLine=normalizeCommandLine(builder.toString());  logger.info("Command line built. CommandLine = {}",commandLine);  return commandLine;}  }
class C{  @Override public void readFromNBT(NBTTagCompound par1NBTTagCompound){  super.readFromNBT(par1NBTTagCompound);  this.explosiveID=par1NBTTagCompound.getInteger("explosiveID");  this.nbtData=par1NBTTagCompound.getCompoundTag("data");}  }
class C{  public boolean queryAfterZeroResults(){  return mQueryAfterZeroResults;}  }
class C{  private static boolean isSymbolic(SmtExpr left,SmtExpr right,List<SmtExpr> others){  if (left.isSymbolic() || right.isSymbolic()) {    return true;  }  for (  SmtExpr smtExpr : others) {    if (smtExpr.isSymbolic()) {      return true;    }  }  return false;}  }
class C{  public void fireVetoableChange(String name,Object oldValue,Object newValue) throws PropertyVetoException {  super.fireVetoableChange(name,oldValue,newValue);  beanContextChildSupport.fireVetoableChange(name,oldValue,newValue);}  }
class C{  public void testSampleMappings(){  Object[] keys=getSampleKeys();  Object[] values=getSampleValues();  Object[] newValues=getNewSampleValues();  assertTrue("failure in test: Must have keys returned from " + "getSampleKeys.",keys != null);  assertTrue("failure in test: Must have values returned from " + "getSampleValues.",values != null);  assertEquals("failure in test: not the same number of sample " + "keys and values.",keys.length,values.length);  assertEquals("failure in test: not the same number of values and new values.",values.length,newValues.length);  for (int i=0; i < keys.length - 1; i++) {    for (int j=i + 1; j < keys.length; j++) {      assertTrue("failure in test: duplicate null keys.",(keys[i] != null || keys[j] != null));      assertTrue("failure in test: duplicate non-null key.",(keys[i] == null || keys[j] == null || (!keys[i].equals(keys[j]) && !keys[j].equals(keys[i]))));    }    assertTrue("failure in test: found null key, but useNullKey " + "is false.",keys[i] != null || useNullKey());    assertTrue("failure in test: found null value, but useNullValue " + "is false.",values[i] != null || useNullValue());    assertTrue("failure in test: found null new value, but useNullValue " + "is false.",newValues[i] != null || useNullValue());    assertTrue("failure in test: values should not be the same as new value",values[i] != newValues[i] && (values[i] == null || !values[i].equals(newValues[i])));  }}  }
class C{  private void debugBegining(IR ir,boolean createGCMaps,boolean dumpFixedPointResults,boolean dumpFinalMaps,boolean dumpFinalLiveIntervals){  if (dumpFixedPointResults || dumpFinalMaps || dumpFinalLiveIntervals) {    System.out.print("\n ====>  Performing liveness analysis ");    if (createGCMaps) {      System.out.print("and GC Maps ");    }    System.out.println("for method: " + ir.method.getName() + " in class: "+ ir.method.getDeclaringClass()+ "\n");    System.out.println("  method has " + ir.cfg.numberOfNodes() + " basic blocks");  }  if (dumpFinalMaps) {    System.out.println("**** START OF IR for method: " + ir.method.getName() + " in class: "+ ir.method.getDeclaringClass());    ir.printInstructions();    System.out.println("**** END   OF IR INSTRUCTION DUMP ****");  }}  }
class C{  public boolean onKeyUp(int keyCode,KeyEvent event){  if (keyCode == KeyEvent.KEYCODE_BACK && mSlidingMenu.isMenuShowing()) {    showContent();    return true;  }  return false;}  }
class C{  @Deprecated public HasChildQueryBuilder scoreType(String scoreMode){  this.scoreMode=scoreMode;  return this;}  }
class C{  private ImageUtils(){}  }
class C{  String binaryToInternalClassName(String className){  if (className == null) {    return null;  } else {    return className.replace('.','/');  }}  }
class C{  @Override public void updateNCharacterStream(String columnLabel,Reader x,long length) throws SQLException {  try {    if (isDebugEnabled()) {      debugCode("updateNCharacterStream(" + quote(columnLabel) + ", x, "+ length+ "L);");    }    checkClosed();    Value v=conn.createClob(x,length);    update(columnLabel,v);  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public FileReader(File file) throws FileNotFoundException {  super(new FileInputStream(file));}  }
class C{  public static int compare(double lhs,double rhs){  if (lhs < rhs) {    return -1;  }  if (lhs > rhs) {    return +1;  }  long lhsBits=Double.doubleToLongBits(lhs);  long rhsBits=Double.doubleToLongBits(rhs);  if (lhsBits == rhsBits) {    return 0;  }  if (lhsBits < rhsBits) {    return -1;  } else {    return +1;  }}  }
class C{  public MetadataIndexCheckpoint(IndexMetadata metadata,Checkpoint oldCheckpoint){  super(metadata,oldCheckpoint);  nextPartitionId=((MetadataIndexCheckpoint)oldCheckpoint).nextPartitionId;}  }
class C{  public FloatMatrix put(int r,int[] indices,float v){  for (int i=0; i < indices.length; i++) {    put(r,indices[i],v);  }  return this;}  }
class C{  public float min(int dim){  return minMax[dim + dim];}  }
class C{  public double nextDouble(double alpha,double lambda){  double a=alpha;  double aa=-1.0, aaa=-1.0, b=0.0, c=0.0, d=0.0, e, r, s=0.0, si=0.0, ss=0.0, q0=0.0, q1=0.0416666664, q2=0.0208333723, q3=0.0079849875, q4=0.0015746717, q5=-0.0003349403, q6=0.0003340332, q7=0.0006053049, q8=-0.0004701849, q9=0.0001710320, a1=0.333333333, a2=-0.249999949, a3=0.199999867, a4=-0.166677482, a5=0.142873973, a6=-0.124385581, a7=0.110368310, a8=-0.112750886, a9=0.104089866, e1=1.000000000, e2=0.499999994, e3=0.166666848, e4=0.041664508, e5=0.008345522, e6=0.001353826, e7=0.000247453;  double gds, p, q, t, sign_u, u, v, w, x;  double v1, v2, v12;  if (a <= 0.0)   throw new IllegalArgumentException();  if (lambda <= 0.0)   throw new IllegalArgumentException();  if (a < 1.0) {    b=1.0 + 0.36788794412 * a;    for (; ; ) {      p=b * randomGenerator.nextDouble();      if (p <= 1.0) {        gds=Math.exp(Math.log(p) / a);        if (Math.log(randomGenerator.nextDouble()) <= -gds)         return (gds / lambda);      } else {        gds=-Math.log((b - p) / a);        if (Math.log(randomGenerator.nextDouble()) <= ((a - 1.0) * Math.log(gds)))         return (gds / lambda);      }    }  } else {    if (a != aa) {      ss=a - 0.5;      s=Math.sqrt(ss);      d=5.656854249 - 12.0 * s;    }    do {      v1=2.0 * randomGenerator.nextDouble() - 1.0;      v2=2.0 * randomGenerator.nextDouble() - 1.0;      v12=v1 * v1 + v2 * v2;    } while (v12 > 1.0);    t=v1 * Math.sqrt(-2.0 * Math.log(v12) / v12);    x=s + 0.5 * t;    gds=x * x;    if (t >= 0.0)     return (gds / lambda);    u=randomGenerator.nextDouble();    if (d * u <= t * t * t)     return (gds / lambda);    if (a != aaa) {      r=1.0 / a;      q0=((((((((q9 * r + q8) * r + q7) * r + q6) * r + q5) * r + q4) * r + q3) * r + q2) * r + q1) * r;      if (a > 3.686) {        if (a > 13.022) {          b=1.77;          si=0.75;          c=0.1515 / s;        } else {          b=1.654 + 0.0076 * ss;          si=1.68 / s + 0.275;          c=0.062 / s + 0.024;        }      } else {        b=0.463 + s - 0.178 * ss;        si=1.235;        c=0.195 / s - 0.079 + 0.016 * s;      }    }    if (x > 0.0) {      v=t / (s + s);      if (Math.abs(v) > 0.25) {        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);      } else {        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;      }      if (Math.log(1.0 - u) <= q)       return (gds / lambda);    }    for (; ; ) {      do {        e=-Math.log(randomGenerator.nextDouble());        u=randomGenerator.nextDouble();        u=u + u - 1.0;        sign_u=(u > 0) ? 1.0 : -1.0;        t=b + (e * si) * sign_u;      } while (t <= -0.71874483771719);      v=t / (s + s);      if (Math.abs(v) > 0.25) {        q=q0 - s * t + 0.25 * t * t + (ss + ss) * Math.log(1.0 + v);      } else {        q=q0 + 0.5 * t * t* ((((((((a9 * v + a8) * v + a7) * v + a6) * v + a5) * v + a4) * v + a3) * v + a2) * v + a1)* v;      }      if (q <= 0.0)       continue;      if (q > 0.5) {        w=Math.exp(q) - 1.0;      } else {        w=((((((e7 * q + e6) * q + e5) * q + e4) * q + e3) * q + e2) * q + e1) * q;      }      if (c * u * sign_u <= w * Math.exp(e - 0.5 * t * t)) {        x=s + 0.5 * t;        return (x * x / lambda);      }    }  }}  }
class C{  public void resetInteraction(){  chatTab.reset();  addComment("Reinitialising interaction...");  system.changeDomain(system.getDomain());  refresh();  stateMonitorTab.reset(system.getState());}  }
class C{  public void finishBuilding() throws Exception {  nodes=new byte[getNodesCount()][];  if (inputs.size() < 2) {    return;  }  maxIndex=nodes.length + inputs.size();  hashInputs();  hashNodes();  fixTree(ROOT_IDX);}  }
class C{  public long timestamp(){  if (version != 1) {    throw new UnsupportedOperationException();  }  return timestamp;}  }
class C{  public final SecretKey generateSecret(KeySpec keySpec) throws InvalidKeySpecException {  if (serviceIterator == null) {    return spi.engineGenerateSecret(keySpec);  }  Exception failure=null;  SecretKeyFactorySpi mySpi=spi;  do {    try {      return mySpi.engineGenerateSecret(keySpec);    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi);    }  } while (mySpi != null);  if (failure instanceof InvalidKeySpecException) {    throw (InvalidKeySpecException)failure;  }  throw new InvalidKeySpecException("Could not generate secret key",failure);}  }
class C{  public void deregister(){  final AgentClient agent=consul.agentClient();  if (!agent.isRegistered(serviceId)) {    LOGGER.info("No service registered with ID \"{}\"",serviceId);    return;  }  LOGGER.info("Deregistering service ID \"{}\"",serviceId);  try {    consul.agentClient().deregister(serviceId);  } catch (  ConsulException e) {    LOGGER.error("Failed to deregister service from Consul",e);  }}  }
class C{  public int size(){  return pmap.size();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.089 -0400",hash_original_method="B7A28C61A846EBE9286148203C13F859",hash_generated_method="5A744421AE0A165279C10CC209A57682") char[] DigestCalcResponse(char[] HA1,String serverNonce,String nonceCount,String clientNonce,String qop,String method,String digestUri,boolean clientResponseFlag) throws SaslException {  byte[] HA2;  byte[] respHash;  char[] HA2Hex;  try {    MessageDigest md=MessageDigest.getInstance("MD5");    if (clientResponseFlag)     md.update(method.getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    md.update(digestUri.getBytes("UTF-8"));    if ("auth-int".equals(qop)) {      md.update(":".getBytes("UTF-8"));      md.update("00000000000000000000000000000000".getBytes("UTF-8"));    }    HA2=md.digest();    HA2Hex=convertToHex(HA2);    md.update(new String(HA1).getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    md.update(serverNonce.getBytes("UTF-8"));    md.update(":".getBytes("UTF-8"));    if (qop.length() > 0) {      md.update(nonceCount.getBytes("UTF-8"));      md.update(":".getBytes("UTF-8"));      md.update(clientNonce.getBytes("UTF-8"));      md.update(":".getBytes("UTF-8"));      md.update(qop.getBytes("UTF-8"));      md.update(":".getBytes("UTF-8"));    }    md.update(new String(HA2Hex).getBytes("UTF-8"));    respHash=md.digest();  } catch (  NoSuchAlgorithmException e) {    throw new SaslException("No provider found for MD5 hash",e);  }catch (  UnsupportedEncodingException e) {    throw new SaslException("UTF-8 encoding not supported by platform.",e);  }  return convertToHex(respHash);}  }
class C{  public String displayName(){  return displayName;}  }
class C{  @Override protected Object onGetDefaultValue(TypedArray a,int index){  int colorInt;  String mHexDefaultValue=a.getString(index);  if (mHexDefaultValue != null && mHexDefaultValue.startsWith("#")) {    colorInt=convertToColorInt(mHexDefaultValue);    return colorInt;  } else {    return a.getColor(index,Color.BLACK);  }}  }
class C{  public RenderKitsITCase(String name){  super(name);}  }
class C{  void incCount(){  this.count++;}  }
class C{  public void save(File keyStore,String type,char[] password,char[] keyPassword,String caAlias) throws GeneralSecurityException, IOException {  KeyStore store=KeyStore.getInstance(type);  store.load(null,password);  store.setKeyEntry(caAlias,caKey,keyPassword,caCerts);  OutputStream out=new FileOutputStream(keyStore);  try {    store.store(out,password);  } catch (  IOException ioe) {    ioe.printStackTrace();  } finally {    out.close();  }}  }
class C{  @SuppressWarnings("deprecation") public EditSession createEditSession(Player player){  checkNotNull(player);  BlockBag blockBag=getBlockBag(player);  EditSession editSession=WorldEdit.getInstance().getEditSessionFactory().getEditSession(player.isPlayer() ? player.getWorld() : null,getBlockChangeLimit(),blockBag,player);  editSession.setFastMode(fastMode);  Request.request().setEditSession(editSession);  if (mask != null) {    editSession.setMask(mask);  }  if (transform != null) {    editSession.addTransform(transform);  }  return editSession;}  }
class C{  public Long moveFile(String SID,Long fileExplorerItemId,Long newParentFileExplorerItemId,Long room_id,Boolean isOwner,Boolean moveToHome,Long owner_id) throws AxisFault {  try {    Long webservice_users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(webservice_users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      log.debug("deleteFileOrFolder " + fileExplorerItemId);      fileExplorerItemDao.moveFile(fileExplorerItemId,newParentFileExplorerItemId,room_id,isOwner,owner_id);      FileExplorerItem fileExplorerItem=fileExplorerItemDao.getFileExplorerItemsById(fileExplorerItemId);      if (moveToHome) {        fileUtils.setFileToOwnerOrRoomByParent(fileExplorerItem,owner_id,null);      } else {        fileUtils.setFileToOwnerOrRoomByParent(fileExplorerItem,null,room_id);      }    }  } catch (  Exception err) {    log.error("[moveFile] ",err);  }  return null;}  }
class C{  public void visitVarInsn(int opcode,int var){  if (mv != null) {    mv.visitVarInsn(opcode,var);  }}  }
class C{  protected final void addValidator(String name,String validatorId,Class type){  this.factories.put(name,new UserValidatorHandlerFactory(validatorId,type));}  }
class C{  @Override public void process(K tuple){  processTuple(tuple);}  }
class C{  public boolean canModify(Object element,String property){  if (RiskHandlingPage.CHOICE_COLUMN_ID.equals(property)) {    return true;  }  return false;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public boolean isRootBean(){  return rootBean;}  }
class C{  public boolean isQtyPercentage(){  Object oo=get_Value(COLUMNNAME_IsQtyPercentage);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testRefresh_AllowsMultipleSequentialSyncsAfterFailure(){  mController.init();  mController.onRefreshRequested();  mFakeEventBus.post(new SyncFailedEvent());  mController.onRefreshRequested();  verify(mMockSyncManager,times(2)).startFullSync();}  }
class C{  public static Builder builder(){  return new Builder();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String toString(){  if (exception != null) {    return super.toString() + "\n" + exception.toString();  } else {    return super.toString();  }}  }
class C{  public void addSplit(String splitLabel){  if (mDisabled)   return;  long now=SystemClock.elapsedRealtime();  mSplits.add(now);  mSplitLabels.add(splitLabel);}  }
class C{  private void mergeNotMatchingItems(boolean staticItems){  Collections.sort(notMatching);  int firstIndexOfOrderItem=getFirstIndexOfOrderItem(notMatching,staticItems);  int indexOfOrderItem=0;  for (  String notMatchingItem : notMatching) {    if (!matchesStatic(staticItems,notMatchingItem)) {      continue;    }    boolean isOrderItem=isOrderItem(notMatchingItem,staticItems);    if (isOrderItem) {      indexOfOrderItem=template.indexOf(notMatchingItem);    } else {      if (indexOfOrderItem == 0 && firstIndexOfOrderItem != 0) {        template.add(firstIndexOfOrderItem,notMatchingItem);        firstIndexOfOrderItem++;      } else       if (firstIndexOfOrderItem == 0) {        if (template.size() > 0 && (template.get(template.size() - 1).startsWith("static"))) {          template.add(ImportSorterStep.N);        }        template.add(notMatchingItem);      } else {        template.add(indexOfOrderItem + 1,notMatchingItem);        indexOfOrderItem++;      }    }  }}  }
class C{  public void init(Controller c){  super.init(c);  display=new Display3D(ForagingHoneyBeeSimulation.WIDTH,ForagingHoneyBeeSimulation.HEIGHT,this,1);  display.attach(vidPortrayal,"Agents");  display.translate(-ForagingHoneyBeeSimulation.MIDDLE_WIDTH,-ForagingHoneyBeeSimulation.MIDDLE_HEIGHT,-ForagingHoneyBeeSimulation.MIDDLE_LENGTH);  display.scale(1.0 / Math.max(ForagingHoneyBeeSimulation.WIDTH,ForagingHoneyBeeSimulation.HEIGHT));  displayFrame=display.createFrame();  displayFrame.setTitle("Honey bee playground");  c.registerFrame(displayFrame);  displayFrame.setVisible(true);  display.setInterval(5);  initGraphDisplays(c);}  }
class C{  private void configureCGAndReplicationGroup(VirtualPool rootVpool,VirtualPoolCapabilityValuesWrapper vPoolCapabilities,BlockConsistencyGroup backendCG,Volume volume){  if (volume.checkForSRDF()) {    return;  }  if (VirtualPool.vPoolSpecifiesHighAvailabilityDistributed(rootVpool) && !VirtualPool.getRemoteProtectionSettings(rootVpool,_dbClient).isEmpty() && !volume.checkForSRDF()) {    if (volume.getConsistencyGroup() != null) {      volume.setConsistencyGroup(NullColumnValueGetter.getNullURI());    }    return;  }  final BlockConsistencyGroup consistencyGroup=vPoolCapabilities.getBlockConsistencyGroup() == null ? null : _dbClient.queryObject(BlockConsistencyGroup.class,vPoolCapabilities.getBlockConsistencyGroup());  String rpPersonality=vPoolCapabilities.getPersonality();  boolean isRPTargetOrJournal=false;  if (rpPersonality != null && (rpPersonality.equals(PersonalityTypes.TARGET.name()) || rpPersonality.equals(PersonalityTypes.METADATA.name()))) {    s_logger.info("{} {} is RP target or journal volume",volume.getLabel(),volume.getId());    isRPTargetOrJournal=true;  }  StorageSystem backendSystem=_dbClient.queryObject(StorageSystem.class,volume.getStorageController());  boolean isXIO3xVersion=StorageSystem.Type.xtremio.name().equalsIgnoreCase(backendSystem.getSystemType()) && !XtremIOProvUtils.is4xXtremIOModel(backendSystem.getFirmwareVersion());  if (backendCG != null && backendCG.getArrayConsistency() && !isRPTargetOrJournal && !isXIO3xVersion) {    String repGroupInstance=consistencyGroup.getCgNameOnStorageSystem(volume.getStorageController());    if (NullColumnValueGetter.isNullValue(repGroupInstance)) {      repGroupInstance=consistencyGroup.getLabel();    }    volume.setReplicationGroupInstance(repGroupInstance);  }  if (consistencyGroup != null) {    volume.setConsistencyGroup(consistencyGroup.getId());  }}  }
class C{  public static <T>DecomposableMatchBuilder0<List<T>> nil(){  List<Matcher<Object>> matchers=Lists.of();  return new DecomposableMatchBuilder0<List<T>>(matchers,new ListConsNilFieldExtractor<>());}  }
class C{  public void addRoundRectangleStraightLeft(final float x,final float y,final float width,final float height,final float arcWidth,final float arcHeight){  if (this.isDisposed()) {    SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);  }  moveTo(x,y);  lineTo(x + width - arcWidth,y);  this.cubicTo(x + width,y,x + width,y,x + width - arcWidth,y);  this.cubicTo(x + width,y,x + width,y,x + width,y + arcHeight);  this.cubicTo(x + width,y + height,x + width,y + height,x + width,y + height - arcHeight);  this.cubicTo(x + width,y + height,x + width,y + height,x + width - arcWidth,y + height);  lineTo(x,y + height);  lineTo(x,y);}  }
class C{  private static void sendCallback(PluginResult.Status status,String message){  if (!Thread.currentThread().isInterrupted()) {    final PluginResult result=new PluginResult(status,message);    result.setKeepCallback(true);    _callbackContext.sendPluginResult(result);  }}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  protected Long wrapValue(long k){  return new Long(k);}  }
class C{  public static void main(String[] args) throws Exception {  DocumentDiffTest ddt=new DocumentDiffTest();  if (args.length == 2) {    DocumentDiffTest.generateTestFile(args[0],args[1],500,500);  } else {    ddt.generateDiffs(new File("tests/diff"),500,500);  }}  }
class C{  public static String[] parseListDefString(String colType,String definition){  String keyword=colType + "(";  int iA=definition.toLowerCase().indexOf(keyword);  int iB=definition.lastIndexOf(')');  String list=definition.substring(iA + keyword.length(),iB);  String[] listArray=list.split(",");  String[] elements=new String[listArray.length];  for (int i=0; i < listArray.length; i++) {    String elementQuoted=listArray[i];    String element=elementQuoted.substring(1,elementQuoted.length() - 1);    elements[i]=element;  }  return elements;}  }
class C{  protected void calculateStatesStatesPruning(int[] states1,double[] matrices1,int[] states2,double[] matrices2,double[] partials3){  int v=0;  int u=0;  for (int j=0; j < matrixCount; j++) {    for (int k=0; k < patternCount; k++) {      int w=u;      int state1=states1[k];      int state2=states2[k];      if (state1 < 20 && state2 < 20) {        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices1[w + state1] * matrices2[w + state2];        v++;        w+=20;      } else       if (state1 < 20) {        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;        partials3[v]=matrices1[w + state1];        v++;        w+=20;      } else       if (state2 < 20) {        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;        partials3[v]=matrices2[w + state2];        v++;        w+=20;      } else {        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;        partials3[v]=1.0;        v++;      }    }    u+=matrixSize;  }}  }
class C{  public ServiceCall<Void> deleteCustomVoiceModel(CustomVoiceModel model){  Validator.notEmpty(model.getId(),"model id must not be empty");  final Request request=RequestBuilder.delete(String.format(PATH_CUSTOMIZATION,model.getId())).build();  return createServiceCall(request,ResponseConverterUtils.getVoid());}  }
class C{  public IconicsDrawable icon(IIcon icon){  mIcon=icon;  ITypeface typeface=icon.getTypeface();  mIconPaint.setTypeface(typeface.getTypeface(mContext));  invalidateSelf();  return this;}  }
class C{  public void afterRegionLoss(SystemMemberRegionEvent event){  adminDS.handleRegionLossEvent(event);}  }
class C{  public static int removeModifier(int modifiers,int mod){  return modifiers & ~mod;}  }
class C{  public AsyncResult FindServersAsync(RequestHeader RequestHeader,String EndpointUrl,String[] LocaleIds,String... ServerUris){  FindServersRequest req=new FindServersRequest(RequestHeader,EndpointUrl,LocaleIds,ServerUris);  return channel.serviceRequestAsync(req);}  }
class C{  private Sequence<IString> toSequence(int[] tmTokens){  final IString[] tokens=new IString[tmTokens.length];  for (int i=0; i < tmTokens.length; ++i) {    assert tmTokens[i] < tm2Sys.length;    int systemId=tm2Sys[tmTokens[i]];    tokens[i]=new IString(systemId);  }  return new ArraySequence<>(true,tokens);}  }
class C{  protected SVGOMTextContentElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  @Override protected void doAction(){  try {    KeyStoreHistory history=kseFrame.getActiveKeyStoreHistory();    if (history == null) {      new NewAction(kseFrame).actionPerformed(null);      history=kseFrame.getActiveKeyStoreHistory();      if (history == null) {        return;      }    }    KeyStoreState currentState=history.getCurrentState();    KeyStoreState newState=currentState.createBasisForNextState(this);    KeyStore keyStore=newState.getKeyStore();    X509Certificate trustCert=null;    if (trustCertFromConstructor == null) {      trustCert=showFileSelectionDialog();      if (trustCert == null) {        return;      }    } else {      trustCert=trustCertFromConstructor;    }    if (applicationSettings.getEnableImportTrustedCertTrustCheck()) {      String matchAlias=X509CertUtil.matchCertificate(keyStore,trustCert);      if (matchAlias != null) {        int selected=JOptionPane.showConfirmDialog(frame,MessageFormat.format(res.getString("ImportTrustedCertificateAction.TrustCertExistsConfirm.message"),matchAlias),res.getString("ImportTrustedCertificateAction.ImportTrustCert.Title"),JOptionPane.YES_NO_OPTION);        if (selected != JOptionPane.YES_OPTION) {          return;        }      }      KeyStore caCertificates=getCaCertificates();      KeyStore windowsTrustedRootCertificates=getWindowsTrustedRootCertificates();      ArrayList<KeyStore> compKeyStores=new ArrayList<KeyStore>();      compKeyStores.add(keyStore);      if (caCertificates != null) {        compKeyStores.add(caCertificates);      }      if (windowsTrustedRootCertificates != null) {        compKeyStores.add(windowsTrustedRootCertificates);      }      if (X509CertUtil.establishTrust(trustCert,compKeyStores.toArray(new KeyStore[compKeyStores.size()])) == null) {        if (certFile != null) {          JOptionPane.showMessageDialog(frame,res.getString("ImportTrustedCertificateAction.NoTrustPathCertConfirm.message"),res.getString("ImportTrustedCertificateAction.ImportTrustCert.Title"),JOptionPane.INFORMATION_MESSAGE);          DViewCertificate dViewCertificate=new DViewCertificate(frame,MessageFormat.format(res.getString("ImportTrustedCertificateAction.CertDetailsFile.Title"),certFile.getName()),new X509Certificate[]{trustCert},null,DViewCertificate.NONE);          dViewCertificate.setLocationRelativeTo(frame);          dViewCertificate.setVisible(true);        }        int selected=JOptionPane.showConfirmDialog(frame,res.getString("ImportTrustedCertificateAction.AcceptTrustCert.message"),res.getString("ImportTrustedCertificateAction.ImportTrustCert.Title"),JOptionPane.YES_NO_OPTION);        if (selected != JOptionPane.YES_OPTION) {          return;        }      }    }    DGetAlias dGetAlias=new DGetAlias(frame,res.getString("ImportTrustedCertificateAction.TrustCertEntryAlias.Title"),X509CertUtil.getCertificateAlias(trustCert));    dGetAlias.setLocationRelativeTo(frame);    dGetAlias.setVisible(true);    String alias=dGetAlias.getAlias();    if (alias == null) {      return;    }    if (keyStore.containsAlias(alias)) {      String message=MessageFormat.format(res.getString("ImportTrustedCertificateAction.OverWriteEntry.message"),alias);      int selected=JOptionPane.showConfirmDialog(frame,message,res.getString("ImportTrustedCertificateAction.ImportTrustCert.Title"),JOptionPane.YES_NO_OPTION);      if (selected != JOptionPane.YES_OPTION) {        return;      }      keyStore.deleteEntry(alias);      newState.removeEntryPassword(alias);    }    keyStore.setCertificateEntry(alias,trustCert);    currentState.append(newState);    kseFrame.updateControls(true);    JOptionPane.showMessageDialog(frame,res.getString("ImportTrustedCertificateAction.ImportTrustCertSuccessful.message"),res.getString("ImportTrustedCertificateAction.ImportTrustCert.Title"),JOptionPane.INFORMATION_MESSAGE);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public boolean hasName(){  return name != null;}  }
class C{  public final boolean isProtected(){  return Modifier.isProtected(getModifiers());}  }
class C{  int[] findNearestVacantArea(int pixelX,int pixelY,int spanX,int spanY,View ignoreView,int[] result){  return findNearestArea(pixelX,pixelY,spanX,spanY,ignoreView,true,result);}  }
class C{  public static String helper(ArrayList<Integer> nums,int n,int k){  if (n == 1)   return nums.get(0).toString();  int index=k / factorial(n - 1);  String digit=nums.get(index).toString();  nums.remove(index);  k=k % factorial(n - 1);  return digit + helper(nums,n - 1,k);}  }
class C{  public String nextTo(char delimiter) throws JSONException {  StringBuffer sb=new StringBuffer();  for (; ; ) {    char c=this.next();    if (c == delimiter || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  private static BooleanField bool(String key,boolean defaultValue){  return new BooleanField(key,defaultValue);}  }
class C{  public Assignment removeValues(Value toRemove){  Assignment a=new Assignment();  for (  String var : map.keySet()) {    Value v=map.get(var);    if (!v.equals(toRemove)) {      a.addPair(var,v);    }  }  cachedHash=0;  return a;}  }
class C{  public long index(GTSEncoder encoder){  if (0 == this.depth) {    return indexLKP(encoder);  }  long now=System.currentTimeMillis();  long lastchunk=now / this.depth;  long firstchunk=lastchunk - this.chunks + 1;synchronized (this) {    if (this.index.size() > this.chunks) {      Set<Long> indexChunks=new HashSet<Long>();      indexChunks.addAll(this.index.keySet());      for (      long chunk : indexChunks) {        if (chunk < firstchunk || chunk > lastchunk) {          this.index.remove(chunk);        }      }    }  }  GTSDecoder decoder=encoder.getDecoder(true);  GeoBloomFilter filter=null;  Map<String,GeoBloomFilter> lastindex=null;  Map<String,GeoBloomFilter> chunkIndex=null;  long previousChunk=Long.MIN_VALUE;  String gtsId=GTSHelper.gtsIdToString(encoder.getClassId(),encoder.getLabelsId(),false);  long indexed=0L;  while (decoder.next()) {    long location=decoder.getLocation();    if (GeoTimeSerie.NO_LOCATION == location) {      continue;    }    long ts=decoder.getTimestamp() / Constants.TIME_UNITS_PER_MS;    long chunk=ts / this.depth;    if (chunk < firstchunk || chunk > lastchunk) {      continue;    }synchronized (this) {      if (chunk != previousChunk) {        chunkIndex=this.index.get(chunk);        if (null == chunkIndex) {          this.index.put(chunk,new HashMap<String,GeoBloomFilter>());        }        chunkIndex=this.index.get(chunk);        previousChunk=chunk;      }    }synchronized (this) {      if (chunkIndex != lastindex) {        filter=chunkIndex.get(gtsId);        if (null == filter) {          filter=new GeoBloomFilter(this.resolution,null,null,6,true);          chunkIndex.put(gtsId,filter);        }      }      lastindex=chunkIndex;    }    filter.add(location);    indexed++;  }  return indexed;}  }
class C{  public static void main(String[] args){  if (!GLFW.glfwInit()) {    System.exit(1);  }  GLFW.glfwTerminate();  if (!glfwInit()) {    exit(1);  }  glfwTerminate();  System.out.println("Fin.");}  }
class C{  public Boolean isSplit(){  return split;}  }
class C{  public SimpleFragmentIntent<F> putExtra(String name,String value){  if (extras == null) {    extras=new Bundle();  }  extras.putString(name,value);  return this;}  }
class C{  private void ensureCapacity(int additionalData){  if ((this.position + additionalData) > this.byteBuffer.length) {    int newLength=(int)(this.byteBuffer.length * 1.25);    if (newLength < (this.byteBuffer.length + additionalData)) {      newLength=this.byteBuffer.length + (int)(additionalData * 1.25);    }    if (newLength < this.byteBuffer.length) {      newLength=this.byteBuffer.length + additionalData;    }    byte[] newBytes=new byte[newLength];    System.arraycopy(this.byteBuffer,0,newBytes,0,this.byteBuffer.length);    this.byteBuffer=newBytes;  }}  }
class C{  public void doBuildIndexSegmentAndCompare(final BTree btree) throws Exception {  try {    final int branchingFactors[]=new int[]{3,btree.getBranchingFactor(),257,512,4196,8196};    for (int i=0; i < branchingFactors.length; i++) {      final int m=branchingFactors[i];      for (      BuildEnum buildEnum : BuildEnum.values()) {        doBuildIndexSegmentAndCompare(getName(),btree,m,buildEnum,true);        doBuildIndexSegmentAndCompare(getName(),btree,m,buildEnum,false);      }    }  }  finally {    btree.getStore().destroy();    if (log.isInfoEnabled())     log.info("Closed journal.");  }}  }
class C{  public Builder defaultDescriptionTypefacePath(String typefacePath){  this.defaultDescriptionTypefacePath=typefacePath;  return this;}  }
class C{  private static boolean isInvalidoContenidoZip(InformeForm informeForm,String path){  boolean result=true;  try {    String name=System.currentTimeMillis() + "." + InformesKeys.ZIP;    String fileTxt=path + "//" + InformesKeys.TEMP+ "//"+ name;    File f=new File(path + "//" + InformesKeys.TEMP);    if (!(f.exists())) {      f.mkdir();    }    byte[] archivo=informeForm.getInformeFile().getFileData();    OutputStream out=new FileOutputStream(fileTxt);    out.write(archivo);    out.close();    ZipFile zip;    f=new File(fileTxt);    zip=new ZipFile(f);    Enumeration e=zip.entries();    while (e.hasMoreElements()) {      ZipEntry zen=(ZipEntry)e.nextElement();      if (zen.isDirectory()) {        continue;      }      InputStream zis=zip.getInputStream(zen);      String extractfile=zen.getName();      String el[]=extractfile.split("\\.");      String extension=el[el.length - 1].toLowerCase();      if (extension.toLowerCase().equals(InformesKeys.JRXML)) {        result=false;      }      zis.close();    }    zip.close();    f.delete();    return result;  } catch (  Exception ex) {    result=true;    return result;  }}  }
class C{  static String clean(String str){  if (str == null || str.length() == 0) {    return str;  }  int len=str.length();  char[] chars=new char[len];  int count=0;  for (int i=0; i < len; i++) {    if (Character.isLetter(str.charAt(i))) {      chars[count++]=str.charAt(i);    }  }  if (count == len) {    return str.toUpperCase();  }  return new String(chars,0,count).toUpperCase();}  }
class C{  public static int EBADR(){  return 53;}  }
class C{  public ALMA2K(KernelTrick kernel,double alpha){  setKernelTrick(kernel);  setAlpha(alpha);}  }
class C{  public double computeAverageEntropyOfObservation2(){  double entropy=0.0;  for (int b=0; b < totalObservations; b++) {    double prob=(double)discCounts[discObservations[b]] / (double)totalObservations;    double cont=0.0;    if (prob > 0.0) {      cont=-Math.log(prob);    }    entropy+=cont;    if (debug) {      System.out.println(b + ": " + prob+ " -> "+ cont / Math.log(2.0) + " -> sum: " + (entropy / Math.log(2.0)));    }  }  return entropy / (double)totalObservations / Math.log(2.0);}  }
class C{  @SuppressWarnings("unchecked") public static <K,V>Map<K,V> newKnownMap(Object map){  Class<?> cls=map == null ? null : map.getClass();  if (cls == HashMap.class)   return U.newHashMap(((Map)map).size()); else   if (cls == LinkedHashMap.class)   return U.newLinkedHashMap(((Map)map).size()); else   if (!wrapTrees() && cls == TreeMap.class)   return new TreeMap<>(((TreeMap<Object,Object>)map).comparator()); else   if (cls == ConcurrentHashMap8.class)   return new ConcurrentHashMap8<>(U.capacity(((Map)map).size())); else   if (cls == ConcurrentHashMap.class)   return new ConcurrentHashMap<>(U.capacity(((Map)map).size()));  return null;}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public static void truncateFile(Path path) throws IOException {  FileChannel.open(path,StandardOpenOption.WRITE).truncate(0).close();}  }
class C{  @Override public void onInflate(Activity activity,AttributeSet attrs,Bundle savedInstanceState){  super.onInflate(activity,attrs,savedInstanceState);  TypedArray a=activity.obtainStyledAttributes(attrs,R.styleable.FragmentArguments);  mLabel=a.getText(R.styleable.FragmentArguments_android_label);  a.recycle();}  }
class C{  protected void send(ComposableBody body) throws BOSHException {  if (!connected) {    throw new IllegalStateException("Not connected to a server!");  }  if (body == null) {    throw new NullPointerException("Body mustn't be null!");  }  if (sessionID != null) {    body=body.rebuild().setAttribute(BodyQName.create(BOSH_URI,"sid"),sessionID).build();  }  client.send(body);}  }
class C{  @ExceptionHandler(Exception.class) public ModelAndView handleException(Exception ex){  LOGGER.error("An error occurred in a UI controller.",ex);  return getDisplayErrorModelAndView();}  }
class C{  private void requestGroupByUri(final String requestUri,final RequestBuilder requestBuilder,final FilterChain chain) throws Exception {  victim.init(mockFilterConfig);  doFilter(requestUri,requestBuilder,chain);}  }
class C{  public static boolean isValidSetId(DispatchContext ctx,Map<String,?> context){  GenericValue userLogin=(GenericValue)context.get("userLogin");  if (userLogin == null) {    return false;  }  String currentUserLoginId=userLogin.getString("userLoginId");  String userLoginIdArg=(String)context.get(LOGINID_PARAMETER_NAME);  if (!currentUserLoginId.equals(userLoginIdArg) && userLoginIdArg != null) {    Security security=ctx.getSecurity();    return security.hasPermission(ADMIN_PERMISSION,userLogin);  }  return true;}  }
class C{  final public void write(char[] buf,int offset,int length){  Writer out=this.out;  if (out == null)   return;  try {    out.write(buf,offset,length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  public int substringStartEnd(String s){  if (s == null || s.length() == 0)   return 0;  int count=0;  for (int i=s.length() - 1; i >= 0; i--)   if (s.charAt(i) == '1')   count++;  return count * (count - 1) / 2;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public static <T>LazyIterable<T> concatenate(Iterable<T>... iterables){  return CompositeIterable.with(iterables);}  }
class C{  public void consider(Object a,Object b){  if (b instanceof Collection) {    if (a instanceof GeoRegion) {      considerRegionXRegions((GeoRegion)a,(Collection)b);    } else     if (a instanceof GeoPath) {      considerPathXRegions((GeoPath)a,(Collection)b);    } else     if (a instanceof GeoPoint) {      considerPointXRegions((GeoPoint)a,(Collection)b);    }  } else   if (b instanceof GeoRegion) {    if (a instanceof GeoRegion) {      considerRegionXRegion((GeoRegion)a,(GeoRegion)b);    } else     if (a instanceof GeoPath) {      considerPathXRegion((GeoPath)a,(GeoRegion)b);    } else     if (a instanceof GeoPoint) {      considerPointXRegion((GeoPoint)a,(GeoRegion)b);    }  }}  }
class C{  public boolean publish(final String publicationTopic,final String payload,final int qos){  return publish(publicationTopic,ConversionUtils.stringToArray(payload),qos,false);}  }
class C{  private long findHoverEntry(Point p){  double smallestDistance=HOVER_RADIUS;  long foundHoverEntry=-1;  for (  Point point : locations.keySet()) {    double distance=p.distance(point);    if (distance < HOVER_RADIUS) {      if (distance < smallestDistance) {        foundHoverEntry=locations.get(point);        smallestDistance=distance;      }    }  }  return foundHoverEntry;}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  extProfile.declareArbitraryXmlExtension(GoogleBaseFeed.class);  extProfile.declareFeedExtension(GoogleBaseAttributesExtension.DESCRIPTION);  super.declareExtensions(extProfile);}  }
class C{  public SVGOMLineElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  private void filterByContextTenant(List<VirtualArrayRestRep> inputArrays,List<VirtualArrayRestRep> virtualArraysByTenant){  Iterator<VirtualArrayRestRep> iterator=inputArrays.iterator();  while (iterator.hasNext()) {    VirtualArrayRestRep rep=iterator.next();    if (!contains(rep.getId(),virtualArraysByTenant)) {      iterator.remove();    }  }}  }
class C{  public boolean isQuotation(){  return DOCSUBTYPESO_Quotation.equals(getDocSubTypeSO()) && DOCBASETYPE_SalesOrder.equals(getDocBaseType());}  }
class C{  protected void onCreate(){}  }
class C{  public void removeDownloadListener(DownloadTaskListener listener){  if (listener != null) {    listeners.remove(listener);  }}  }
class C{  public LazyPSetX<T> with(int i,T element){  return stream(Fluxes.insertAt(Fluxes.deleteBetween(flux(),i,i + 1),i,element));}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset){  super.addToken(array,start,end,tokenType,startOffset);  zzStartRead=zzMarkedPos;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ImPackage.SYMBOL_TABLE__ENTRIES:    getEntries().clear();  return;}super.eUnset(featureID);}  }
class C{  public boolean isEmpty(){  return mostUsedValues.isEmpty();}  }
class C{  public boolean isBillingDataAvailable(){  return billingData != null;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(BigBrother.getLatestWatch(getAir(stack)));}  }
class C{  public GenericFeed retrieveNextPage(Link next) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return service.getFeed(new URL(next.getHref()),GenericFeed.class);}  }
class C{  public void log(Level level,Throwable throwable,String msg,Object arg0,Object arg1,Object arg2){  innerLog(level,throwable,msg,arg0,arg1,arg2,null);}  }
class C{  public Variable[] findFieldVariables(String clazz){  List<Variable> matches=new ArrayList<Variable>();  for (ListIterator<Variable> iterator=fFields.listIterator(fFields.size()); iterator.hasPrevious(); ) {    Variable localVariable=iterator.previous();    if (localVariable.isSubtypeOf(clazz))     matches.add(localVariable);  }  return matches.toArray(new Variable[matches.size()]);}  }
class C{  private void checkCallStackSanity(Stack<MethodCall> callStack,BytecodeInstruction code){  if (!callStack.peek().getCalledMethodName().equals(code.getMethodName())) {    for (    MethodCall mc : callStack) {      System.out.println("  " + mc.toString());    }    throw new IllegalStateException("insane callStack: peek is in method " + callStack.peek().getCalledMethodName() + " and i encountered code of method "+ code.getMethodName());  }}  }
class C{  private void wrapItunesSectionWithBorder(){  Node itunesSectionBorder=Borders.wrap(itunesSectionVBox).etchedBorder().title("Itunes import options").build().build();  parentVBox.getChildren().remove(itunesSectionVBox);  parentVBox.getChildren().add(itunesSectionBorder);}  }
class C{  public boolean isDrawLabel(){  return drawLabel;}  }
class C{  public static List<Class<?>> annotatedClasses() throws LoadingFileException, IOException, ClassNotFoundException {  List<Class<?>> annotatedClasses=new ArrayList<Class<?>>();  for (  File javaFile : annotatedFiles()) {    String fileName=javaFile.getName().substring(0,javaFile.getName().length() - ".java".length());    annotatedClasses.add(Class.forName(getPackage(javaFile) + "." + fileName));  }  return annotatedClasses;}  }
class C{  public Polygon2D(Polygon pol){  if (pol == null) {    throw new IndexOutOfBoundsException("null Polygon");  }  this.npoints=pol.npoints;  this.xpoints=new float[pol.npoints];  this.ypoints=new float[pol.npoints];  for (int i=0; i < pol.npoints; i++) {    xpoints[i]=pol.xpoints[i];    ypoints[i]=pol.ypoints[i];  }  calculatePath();}  }
class C{  public XSTR(long seed){  this.seed=seed;}  }
class C{  protected List<Instances> splitToClasses(Instances insts,int classIndex){  List<Instances> newSeries=new ArrayList<Instances>();  Instances[] classes=new Instances[insts.attribute(classIndex).numValues()];  for (int i=0; i < classes.length; i++) {    classes[i]=new Instances(insts,0);    classes[i].setRelationName(insts.attribute(classIndex).value(i));  }  for (int i=0; i < insts.numInstances(); i++) {    Instance current=insts.instance(i);    classes[(int)current.value(classIndex)].add((Instance)current.copy());  }  for (int i=0; i < classes.length; i++) {    newSeries.add(classes[i]);  }  return newSeries;}  }
class C{  final DialogOption showYesNoOtherMessage(String message,IntSetting defValue,String otherName){  final String[] options={DialogOption.YES.getText(),DialogOption.NO.getText(),otherName};  DialogOption ret=DialogOption.parseInt(defValue.getValue());  if (ret == DialogOption.YES || ret == DialogOption.NO)   return ret;  int option;  try {    option=JOptionPane.showOptionDialog(getParentComponent(),alwaysUseThisAnswerLabel(message,defValue),I18n.tr("Message"),0,JOptionPane.WARNING_MESSAGE,null,options,DialogOption.YES.getText());  } catch (  ArrayIndexOutOfBoundsException aioobe) {    option=JOptionPane.CLOSED_OPTION;  }catch (  InternalError ie) {    option=JOptionPane.CLOSED_OPTION;  }  if (option == 0)   ret=DialogOption.YES; else   if (option == 1)   ret=DialogOption.NO; else   if (option == 2)   ret=DialogOption.OTHER; else   ret=DialogOption.CANCEL;  if (defValue.getValue() == REMEMBER_ANSWER && ret != DialogOption.OTHER && ret != DialogOption.CANCEL)   defValue.setValue(ret.toInt()); else   defValue.setValue(FORGET_ANSWER);  return ret;}  }
class C{  public static void writeSeptets(OutputStream os,String msg) throws IOException {  byte[] bytes=stringToUnencodedSeptets(msg);  os.write(septetStream2octetStream(bytes));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public OMGrid(int x,int y,double vResolution,double hResolution,GridData data){  setRenderType(RENDERTYPE_XY);  set(0.0f,0.0f,x,y,vResolution,hResolution,data);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.TAGGED_TEMPLATE_STRING__TARGET:    return basicSetTarget(null,msgs);case N4JSPackage.TAGGED_TEMPLATE_STRING__TEMPLATE:  return basicSetTemplate(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private synchronized void buildEntityManagerFactory(){  if (entityManagerFactory != null) {    return;  }  registerShutdownHook(this);  Map<String,Object> configOverrides=new HashMap<String,Object>();  String dbPath=dbDirectory.getAbsolutePath();  configOverrides.put("hibernate.search.default.indexBase",dbPath);  configOverrides.put("hibernate.connection.url","jdbc:h2:" + dbPath + File.separator+ "db"+ ";LOCK_MODE=1"+ ";DB_CLOSE_DELAY=-1");  entityManagerFactory=Persistence.createEntityManagerFactory("manager",configOverrides);}  }
class C{  public static Exponential serializableInstance(){  return new Exponential(.5);}  }
class C{  public void markLines(ObjectReference object){  Address address=VM.objectModel.objectStartRef(object);  Line.mark(address,lineMarkState);  if (ObjectHeader.isStraddlingObject(object))   Line.markMultiLine(address,object,lineMarkState);}  }
class C{  public boolean equalsIgnoreCase(Reference otherRef){  return (otherRef != null) && _localColumnName.equalsIgnoreCase(otherRef._localColumnName) && _foreignColumnName.equalsIgnoreCase(otherRef._foreignColumnName);}  }
class C{  public void testDoubleValue(){  LongAdder ai=new LongAdder();  assertEquals(0.0,ai.doubleValue());  ai.increment();  assertEquals(1.0,ai.doubleValue());}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public int next(){  int eType;  int node=_currentNode;  int nodeType=_nodeType;  if (nodeType >= DTM.NTYPES) {    while (node != DTM.NULL && _exptype(node) != nodeType) {      node=_nextsib(node);    }  } else {    while (node != DTM.NULL) {      eType=_exptype(node);      if (eType < DTM.NTYPES) {        if (eType == nodeType) {          break;        }      } else       if (m_expandedNameTable.getType(eType) == nodeType) {        break;      }      node=_nextsib(node);    }  }  if (node == DTM.NULL) {    _currentNode=DTM.NULL;    return DTM.NULL;  } else {    _currentNode=_nextsib(node);    return returnNode(makeNodeHandle(node));  }}  }
class C{  @Override public MemBufferHolder<BigDataMemAllocator> createBuffer(long size,boolean autoreclaim){  MemBufferHolder<BigDataMemAllocator> ret=null;  ByteBuffer bb=m_vmasvc.createByteBuffer(m_nid,size);  if (null == bb && m_activegc) {    forceGC();    bb=m_vmasvc.createByteBuffer(m_nid,size);  }  if (null != bb) {    ret=new MemBufferHolder<BigDataMemAllocator>(this,bb);    ret.setCollector(m_bufcollector);    if (autoreclaim) {      m_bufcollector.register(ret);    }  }  return ret;}  }
class C{  public int g_korland(){  int a=1;switch (a) {case 1:    return 1;case 2:  return 2;}throw new IllegalArgumentException();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:59.609 -0500",hash_original_method="BCA4FB51D104561172D0471430841C22",hash_generated_method="2A1260E6CCD1B80DCF11F08A821E4B48") @Deprecated public static InputStream openContactPhotoInputStream(ContentResolver cr,Uri person){  Uri photoUri=Uri.withAppendedPath(person,Contacts.Photos.CONTENT_DIRECTORY);  Cursor cursor=cr.query(photoUri,new String[]{Photos.DATA},null,null,null);  try {    if (cursor == null || !cursor.moveToNext()) {      return null;    }    byte[] data=cursor.getBlob(0);    if (data == null) {      return null;    }    return new ByteArrayInputStream(data);  }  finally {    if (cursor != null)     cursor.close();  }}  }
class C{  MessageInstanceImpl(String sourceId,Date date,String messageId,String messageText,String component,Severity severity,int count,int countFailed){  this(sourceId,date,messageId,messageText,component,severity);  m_count=count;  m_countFailed=countFailed;}  }
class C{  public MakeActiveEffect(List<Integer> metalBlocks){  super(metalBlocks);}  }
class C{  public byte[] serializeToBuffer(Object o) throws IOException {  ByteArrayOutputStream bufOut=new ByteArrayOutputStream();  try {    serialize(bufOut,o);    bufOut.flush();    return bufOut.toByteArray();  }  finally {    bufOut.close();  }}  }
class C{  private void tryBackgroundEnter(boolean focused){  if (mBackground == null) {    mBackground=new RippleBackground(this,mHotspotBounds);  }  mBackground.setup(mState.mMaxRadius,mDensity);  mBackground.enter(focused);}  }
class C{  public void saveFolderInDB(){  if (mCreateFullPath && getStorageManager().getFileByPath(FileStorageUtils.getParentPath(mRemotePath)) == null) {    String[] subFolders=mRemotePath.split("/");    String composedRemotePath="/";    for (    String subFolder : subFolders) {      if (!subFolder.isEmpty()) {        composedRemotePath=composedRemotePath + subFolder + "/";        mRemotePath=composedRemotePath;        saveFolderInDB();      }    }  } else {    OCFile newDir=new OCFile(mRemotePath);    newDir.setMimetype("DIR");    long parentId=getStorageManager().getFileByPath(FileStorageUtils.getParentPath(mRemotePath)).getFileId();    newDir.setParentId(parentId);    newDir.setModificationTimestamp(System.currentTimeMillis());    getStorageManager().saveFile(newDir);    Log_OC.d(TAG,"Create directory " + mRemotePath + " in Database");  }}  }
class C{  public Constraint createConstraint(int row,int column){  Constraint c=createConstraint();  c.row=row;  c.column=column;  return c;}  }
class C{  public static void reallocate(long memPtr,int cap){  int flags=flags(memPtr);  if (isPooled(flags))   reallocatePooled(memPtr,cap); else {    assert !isExternal(flags);    reallocateUnpooled(memPtr,cap);  }}  }
class C{  private void stopDemoService(){  if (getMode() == MODE.DEMO) {    ElmProt.runDemo=false;    Toast.makeText(this,getString(R.string.demo_stopped),Toast.LENGTH_SHORT).show();  }}  }
class C{  protected void logAndAddLogRec(String s){  addLogRec(s);  log(s);}  }
class C{  public int genID(){  int uid=this.hashCode();  if (uid < 0) {    uid=Math.abs(uid);    uid=uid * 15551;  }  return uid;}  }
class C{  private Integer insertAllContacts(Iterator<String> contactsIter){  final ArrayList<ContentProviderOperation> batchOperation=new ArrayList<ContentProviderOperation>();  while (contactsIter.hasNext())   addContact(contactsIter.next(),batchOperation);  try {    ContentProviderResult[] results=mContentResolver.applyBatch(ContactsContract.AUTHORITY,batchOperation);    return results.length / 2;  } catch (  RemoteException e) {    e.printStackTrace();  }catch (  OperationApplicationException e) {    e.printStackTrace();  }  return 0;}  }
class C{  @Override public int compareTo(Value o){  return toString().compareTo(o.toString());}  }
class C{  public static CollectionId parse(String str){  String[] parts=str.split("[\\" + '.' + "]");  if (parts.length < 3)   return null;  return new CollectionId(parts[0],parts[1],parts[2]);}  }
class C{  public static int sumCounts(HashMap<LabelSet,Integer> map){  int c=0;  for (  Integer c_ : map.values()) {    c=c + c_;  }  return c;}  }
class C{  public Builder host(String host){  this.innerHost=host;  return this;}  }
class C{  public void cleanTemporalSession(HttpServletRequest request){  getInvocationStack(request).cleanSession(request);}  }
class C{  public static final double footPoundsToNewtonMeters(double footPound){  return footPound * FOOT_POUND_TO_NEWTON_METER;}  }
class C{  private void assertNotInDebug(QueryResponse response,String key){  assertNotNull("debug map is null",response.getDebugMap());  assertFalse("debug map contains: " + key,response.getDebugMap().containsKey(key));}  }
class C{  public static double atan2(double y,double x){  final double epsilon=1E-128;  if (MathLib.abs(x) > epsilon) {    double temp=MathLib.atan(MathLib.abs(y) / MathLib.abs(x));    if (x < 0.0)     temp=PI - temp;    if (y < 0.0)     temp=TWO_PI - temp;    return temp;  } else   if (y > epsilon)   return HALF_PI; else   if (y < -epsilon)   return 3 * HALF_PI; else   return 0.0;}  }
class C{  public LightPortrayal3D(Color color,Double3D direction){  light=new DirectionalLight(new Color3f(color),double3DToVector3f(direction));  light.setInfluencingBounds(new BoundingSphere(new Point3d(0,0,0),Double.POSITIVE_INFINITY));}  }
class C{  public static void deallocateSingleDBID(DBID id){  DBIDFactory.FACTORY.deallocateSingleDBID(id);}  }
class C{  public Corpse(final String clazz,final int x,final int y){  setRPClass("corpse");  put("type","corpse");  setEntityClass(clazz);  setPosition(x,y);  stage=0;  put("stage",stage);  put(ATTR_IMAGE,"player");  put(ATTR_HARMLESS_IMAGE,"harmless_player");  setResistance(calculateResistance());  final RPSlot slot=new LootableSlot(this);  addSlot(slot);}  }
class C{  public static final void drawVector(GL2 gl,double sx,double sy,double dx,double dy,double l){  gl.glBegin(GL.GL_LINES);  gl.glVertex2d(sx,sy);  gl.glVertex2d(sx + dx * l,sy + dy * l);  gl.glEnd();}  }
class C{  public short red(){  return self.red;}  }
class C{  public <T>T withTransaction(@NotNull TransactionSettings settings,@NotNull TransactionCallback<T> callback){  return transactionManager.withTransaction(settings,callback,dialect);}  }
class C{  public MobSpawnerLogicBetweenlands rotatedSpawner(World world,int x,int y,int z,int offsetX,int offsetY,int offsetZ,int rotation,String mob){  BlockPos pos=(new BlockPos(x,y,z)).add(-(width / 2),0,-(depth / 2));  IBlockState spawner=BlockRegistry.MOB_SPAWNER.getDefaultState();switch (rotation) {case 0:    pos=pos.add(offsetX,offsetY,offsetZ);  world.setBlockState(pos,spawner);BlockMobSpawnerBetweenlands.setMob(world,pos,mob);return BlockMobSpawnerBetweenlands.getLogic(world,pos);case 1:pos=pos.add(offsetZ,offsetY,depth - offsetX - 1);world.setBlockState(pos,spawner);BlockMobSpawnerBetweenlands.setMob(world,pos,mob);return BlockMobSpawnerBetweenlands.getLogic(world,pos);case 2:pos=pos.add(width - offsetX - 1,offsetY,depth - offsetZ - 1);world.setBlockState(pos,spawner);BlockMobSpawnerBetweenlands.setMob(world,pos,mob);return BlockMobSpawnerBetweenlands.getLogic(world,pos);default :case 3:pos=pos.add(width - offsetZ - 1,offsetY,offsetX);world.setBlockState(pos,spawner);BlockMobSpawnerBetweenlands.setMob(world,pos,mob);return BlockMobSpawnerBetweenlands.getLogic(world,pos);}}  }
class C{  public static CliDiagnosticListener initializeLogs(final String[] args,final PrintStream err,final LogStream initLog){  if (initLog != null) {    Diagnostic.setLogStream(initLog);    Diagnostic.logEnvironment();  } else {    Diagnostic.setLogStream();  }  Diagnostic.userLog("Command line arguments:" + Arrays.toString(args));  final CliDiagnosticListener listener=new CliDiagnosticListener(err);  Diagnostic.addListener(listener);  return listener;}  }
class C{  private GridCacheAdapter dataCache(Ignite node) throws Exception {  return ((IgniteKernal)node).internalCache(DATA_CACHE_NAME);}  }
class C{  public static String chomp(String str,String sep){  int idx=str.lastIndexOf(sep);  if (idx != -1) {    return str.substring(0,idx);  } else {    return str;  }}  }
class C{  public void environmentBind(EnvironmentClassLoader loader){}  }
class C{  public void updateAsciiStream(int columnIndex,java.io.InputStream x,int length) throws SQLException {  checkState();  checkTypeConcurrency();  rs.updateAsciiStream(columnIndex,x,length);}  }
class C{  public static String padRight(String inString,int length){  return fixStringLength(inString,length,true);}  }
class C{  private void handleLoadSessionException(final String sesId,final int tryCnt,final RuntimeException e){  if (log.isDebugEnabled())   log.debug(e.getMessage());  if (tryCnt == retries - 1)   throw new IgniteException("Failed to handle request [session= " + sesId + "]",e); else {    if (log.isDebugEnabled())     log.debug("Failed to handle request (will retry): " + sesId);    handleCacheOperationException(e);  }}  }
class C{  static public void zipFolder(File srcFolder,File destZipFile,String includesdir){  Zip zipper=new Zip();  zipper.setDestFile(destZipFile);  zipper.setBasedir(srcFolder);  zipper.setIncludes(includesdir);  zipper.setUpdate(true);  zipper.setCompress(true);  zipper.setCaseSensitive(false);  zipper.setFilesonly(false);  zipper.setTaskName("zip");  zipper.setTaskType("zip");  zipper.setProject(new Project());  zipper.setOwningTarget(new Target());  zipper.execute();  System.out.println(destZipFile);}  }
class C{  public boolean containsKey(K key){  return map.containsKey(key);}  }
class C{  public void replaceFromToWithFrom(int from,int to,AbstractByteList other,int otherFrom){  if (!(other instanceof ByteArrayList)) {    super.replaceFromToWithFrom(from,to,other,otherFrom);    return;  }  int length=to - from + 1;  if (length > 0) {    checkRangeFromTo(from,to,size());    checkRangeFromTo(otherFrom,otherFrom + length - 1,other.size());    System.arraycopy(((ByteArrayList)other).elements,otherFrom,elements,from,length);  }}  }
class C{  public static Capitalization toCapitalization(Boolean up1,Boolean up2){  if (up1 == null) {    return Capitalization.CAPITALIZE;  } else   if (up2 == null) {    return up1 ? Capitalization.UPPERCASE : Capitalization.LOWERCASE;  } else   if (up1) {    return up2 ? Capitalization.UPPERCASE : Capitalization.CAPITALIZE;  } else {    return Capitalization.LOWERCASE;  }}  }
class C{  private String readFileAsString(File file) throws java.io.IOException {  StringBuilder fileData=new StringBuilder(1000);  try (BufferedReader reader=new BufferedReader(ReaderFactory.newReader(file,this.encoding))){    char[] buf=new char[1024];    int numRead=0;    while ((numRead=reader.read(buf)) != -1) {      String readData=String.valueOf(buf,0,numRead);      fileData.append(readData);      buf=new char[1024];    }  }   return fileData.toString();}  }
class C{  public void convertToString() throws IOException {  writeCode(CONVERT_TO_STRING);}  }
class C{  public final synchronized void connect(String hostname,int port) throws IOException, IrcException, NickAlreadyInUseException {  this.connect(hostname,port,null);}  }
class C{  @Override public void connect(ChannelHandlerContext ctx,SocketAddress remoteAddress,SocketAddress localAddress,ChannelPromise promise) throws Exception {  ctx.connect(remoteAddress,localAddress,promise);}  }
class C{  public double distanceTo(Individual otherInd){  if (!(otherInd instanceof BitVectorIndividual))   return super.distanceTo(otherInd);  BitVectorIndividual other=(BitVectorIndividual)otherInd;  boolean[] otherGenome=other.genome;  double hammingDistance=0;  for (int i=0; i < other.genomeLength(); i++) {    if (genome[i] ^ otherGenome[i])     hammingDistance++;  }  return hammingDistance;}  }
class C{  public void describe(Individual ind,EvolutionState state,int subpopulation,int threadnum,int log,int verbosity){}  }
class C{  void build(String namespace,String name,String nameAlias,XSLTElementDef[] elements,XSLTAttributeDef[] attributes,XSLTElementProcessor contentHandler,Class classObject){  this.m_namespace=namespace;  this.m_name=name;  this.m_nameAlias=nameAlias;  this.m_elements=elements;  this.m_attributes=attributes;  setElementProcessor(contentHandler);  this.m_classObject=classObject;  if (hasRequired() && m_elements != null) {    int n=m_elements.length;    for (int i=0; i < n; i++) {      XSLTElementDef def=m_elements[i];      if (def != null && def.getRequired()) {        if (m_requiredFound == null)         m_requiredFound=new Hashtable();        m_requiredFound.put(def.getName(),"xsl:" + def.getName());      }    }  }}  }
class C{  protected void mergeItemIcons(KMLListStyle sourceStyle){  List<KMLItemIcon> itemIconsCopy=new ArrayList<KMLItemIcon>(this.getItemIcons().size());  Collections.copy(itemIconsCopy,this.getItemIcons());  for (  KMLItemIcon sourceItemIcon : sourceStyle.getItemIcons()) {    String id=sourceItemIcon.getId();    if (!WWUtil.isEmpty(id)) {      for (      KMLItemIcon existingItemIcon : itemIconsCopy) {        String currentId=existingItemIcon.getId();        if (!WWUtil.isEmpty(currentId) && currentId.equals(id)) {          this.getItemIcons().remove(existingItemIcon);        }      }    }    this.getItemIcons().add(sourceItemIcon);  }}  }
class C{  public double op(final double x){  double xs=a * (-x + 1);  xs=Math.abs(xs * xs);  final double rs=Math.sqrt(1 - xs);  final double asr=-(bs / xs + hk) / 2;  if (asr > -100.0) {    return (a * Math.exp(asr) * (Math.exp(-hk * (1 - rs) / (2 * (1 + rs))) / rs - (1 + c * xs * (1 + d * xs))));  }  return 0.0;}  }
class C{  public boolean contains(Node s){  runTo(-1);  if (null == m_map)   return false;  for (int i=0; i < m_firstFree; i++) {    Node node=m_map[i];    if ((null != node) && node.equals(s))     return true;  }  return false;}  }
class C{  public static void copy(List dest,List src){  int srcSize=src.size();  if (srcSize > dest.size()) {    throw new IndexOutOfBoundsException("Source does not fit in dest");  }  if (srcSize < COPY_THRESHOLD || (src instanceof RandomAccess && dest instanceof RandomAccess)) {    for (int i=0; i < srcSize; i++)     dest.set(i,src.get(i));  } else {    ListIterator di=dest.listIterator(), si=src.listIterator();    for (int i=0; i < srcSize; i++) {      di.next();      di.set(si.next());    }  }}  }
class C{  public int size(){  return this.values.size();}  }
class C{  public BNetwork(BNode... nodes){  this();  addNodes(Arrays.asList(nodes));}  }
class C{  private ProgressLogController(){}  }
class C{  public static <T>CopyOnWriteArraySet<T> copyOnWriteArraySet(){  return new CopyOnWriteArraySet<T>();}  }
class C{  @AntDoc("The name of a test to run. If no `<test>`s are given then all " + "tests in the given `<module>`/`<moduleset>`/`<sourcemodule>`") @OptionEquivalent public void addTest(Test test){  this.tests.add(test);}  }
class C{  public static boolean hasDependency(Expression expr){  ColumnCollector cc=new ColumnCollector(false);  expr.visit(cc);  return cc.getColumnCount() > 0;}  }
class C{  public static boolean hasUTF8Bom(@NotNull byte[] bom){  return ArrayUtil.startsWith(bom,UTF8_BOM);}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean wasReversed(SolrQueryParser qp,String query) throws Exception {  Query q=qp.parse(query);  if (!(q instanceof AutomatonQuery)) {    return false;  }  Automaton automaton=((AutomatonQuery)q).getAutomaton();  String prefix=Operations.getCommonPrefix(Operations.determinize(automaton,Operations.DEFAULT_MAX_DETERMINIZED_STATES));  return prefix.length() > 0 && prefix.charAt(0) == '\u0001';}  }
class C{  private boolean indentLine(IDocument document,int line,int caret,TypeScriptIndenter indenter,JavaHeuristicScanner scanner,boolean multiLine) throws BadLocationException {  IRegion currentLine=document.getLineInformation(line);  int offset=currentLine.getOffset();  int wsStart=offset;  String indent=null;  if (offset < document.getLength()) {    ITypedRegion partition=TextUtilities.getPartition(document,IJavaScriptPartitions.JAVA_PARTITIONING,offset,true);    ITypedRegion startingPartition=TextUtilities.getPartition(document,IJavaScriptPartitions.JAVA_PARTITIONING,offset,false);    String type=partition.getType();    if (type.equals(IJavaScriptPartitions.JAVA_DOC) || type.equals(IJavaScriptPartitions.JAVA_MULTI_LINE_COMMENT)) {      indent=computeJavadocIndent(document,line,scanner,startingPartition);    } else     if (!fIsTabAction && startingPartition.getOffset() == offset && startingPartition.getType().equals(IJavaScriptPartitions.JAVA_SINGLE_LINE_COMMENT)) {      int max=document.getLength() - offset;      int slashes=2;      while (slashes < max - 1 && document.get(offset + slashes,2).equals("//"))       slashes+=2;      wsStart=offset + slashes;      StringBuffer computed=indenter.computeIndentation(offset);      if (computed == null)       computed=new StringBuffer(0);      int tabSize=getTabSize();      while (slashes > 0 && computed.length() > 0) {        char c=computed.charAt(0);        if (c == '\t')         if (slashes > tabSize)         slashes-=tabSize; else         break; else         if (c == ' ')         slashes--; else         break;        computed.deleteCharAt(0);      }      indent=document.get(offset,wsStart - offset) + computed;    }  }  if (indent == null) {    StringBuffer computed=indenter.computeIndentation(offset);    if (computed != null)     indent=computed.toString(); else     indent="";  }  int lineLength=currentLine.getLength();  int end=scanner.findNonWhitespaceForwardInAnyPartition(wsStart,offset + lineLength);  if (end == JavaHeuristicScanner.NOT_FOUND) {    end=offset + lineLength;    if (multiLine && !indentEmptyLines())     indent="";  }  int length=end - offset;  String currentIndent=document.get(offset,length);  if (fIsTabAction && caret == end && whiteSpaceLength(currentIndent) >= whiteSpaceLength(indent)) {    String tab=getTabEquivalent();    document.replace(caret,0,tab);    fCaretOffset=caret + tab.length();    return true;  }  if (caret >= offset && caret <= end)   fCaretOffset=offset + indent.length(); else   fCaretOffset=-1;  if (!indent.equals(currentIndent)) {    document.replace(offset,length,indent);    return true;  } else   return false;}  }
class C{  void processDisplayedChainChanged(){  List<ExecutionUnit> processes;  OperatorChain op=model.getDisplayedChain();  if (op == null) {    processes=Collections.<ExecutionUnit>emptyList();  } else {    processes=new LinkedList<>(op.getSubprocesses());  }  model.setProcesses(processes);  model.fireProcessesChanged();  if (view.isShowing()) {    autoFit();  }}  }
class C{  @Override public MemChunkHolder<BigDataPMemAllocator> resizeChunk(MemChunkHolder<BigDataPMemAllocator> mholder,long size){  MemChunkHolder<BigDataPMemAllocator> ret=null;  boolean ac=null != mholder.getRefId();  if (size > 0) {    Long addr=m_nvmasvc.reallocate(m_nid,mholder.get(),size,true);    if (0 == addr && m_activegc) {      forceGC();      addr=m_nvmasvc.reallocate(m_nid,mholder.get(),size,true);    }    if (0 != addr) {      mholder.clear();      mholder.destroy();      ret=new MemChunkHolder<BigDataPMemAllocator>(this,addr,size);      if (ac) {        m_chunkcollector.register(ret);      }    }  }  return ret;}  }
class C{  public Object clone(){  IntArrayList clone=new IntArrayList((int[])elements.clone());  clone.setSizeRaw(size);  return clone;}  }
class C{  public boolean taxApplies(){  boolean taxApplies=false;  for (  ShoppingCartItem item : this) {    if (item.taxApplies()) {      taxApplies=true;      break;    }  }  return taxApplies;}  }
class C{  @Override public void update(BasicCamera camera){  if (quadTree != null) {    quadTree.update(camera);    for (int i=0; i <= baseMapLevel; ++i) {      quadTree.stitch(i);    }  }}  }
class C{  protected void checkStartTxSuccess(final IgniteInternalCache<Object,Object> cache) throws Exception {  try (final IgniteInternalTx tx=CU.txStartInternal(cache.context(),cache,PESSIMISTIC,READ_COMMITTED)){    assert tx != null;    sleepForTxFailure();    cache.put("key","val");    tx.commit();  }   assert cache.containsKey("key");  cache.clear();}  }
class C{  private static int[][] calculateBlackPoints(byte[] luminances,int subWidth,int subHeight,int width,int height){  int[][] blackPoints=new int[subHeight][subWidth];  for (int y=0; y < subHeight; y++) {    int yoffset=y << BLOCK_SIZE_POWER;    int maxYOffset=height - BLOCK_SIZE;    if (yoffset > maxYOffset) {      yoffset=maxYOffset;    }    for (int x=0; x < subWidth; x++) {      int xoffset=x << BLOCK_SIZE_POWER;      int maxXOffset=width - BLOCK_SIZE;      if (xoffset > maxXOffset) {        xoffset=maxXOffset;      }      int sum=0;      int min=0xFF;      int max=0;      for (int yy=0, offset=yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset+=width) {        for (int xx=0; xx < BLOCK_SIZE; xx++) {          int pixel=luminances[offset + xx] & 0xFF;          sum+=pixel;          if (pixel < min) {            min=pixel;          }          if (pixel > max) {            max=pixel;          }        }        if (max - min > MIN_DYNAMIC_RANGE) {          for (yy++, offset+=width; yy < BLOCK_SIZE; yy++, offset+=width) {            for (int xx=0; xx < BLOCK_SIZE; xx++) {              sum+=luminances[offset + xx] & 0xFF;            }          }        }      }      int average=sum >> (BLOCK_SIZE_POWER * 2);      if (max - min <= MIN_DYNAMIC_RANGE) {        average=min >> 1;        if (y > 0 && x > 0) {          int averageNeighborBlackPoint=(blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) >> 2;          if (min < averageNeighborBlackPoint) {            average=averageNeighborBlackPoint;          }        }      }      blackPoints[y][x]=average;    }  }  return blackPoints;}  }
class C{  public boolean isMonitorDurationEnd(){  long startTime=PreferenceManager.getDefaultSharedPreferences(BlockCanaryContext.get().provideContext()).getLong("BlockCanary_StartTime",0);  return startTime != 0 && System.currentTimeMillis() - startTime > BlockCanaryContext.get().provideMonitorDuration() * 3600 * 1000;}  }
class C{  public static String convertToRGB(int color){  String red=Integer.toHexString(Color.red(color));  String green=Integer.toHexString(Color.green(color));  String blue=Integer.toHexString(Color.blue(color));  if (red.length() == 1) {    red="0" + red;  }  if (green.length() == 1) {    green="0" + green;  }  if (blue.length() == 1) {    blue="0" + blue;  }  return "#" + red + green+ blue;}  }
class C{  public void onWakeLockReleased(int flags,String tag,int ownerUid,int ownerPid,WorkSource workSource){  if (DEBUG) {    Slog.d(TAG,"onWakeLockReleased: flags=" + flags + ", tag=\""+ tag+ "\", ownerUid="+ ownerUid+ ", ownerPid="+ ownerPid+ ", workSource="+ workSource);  }  try {    final int monitorType=getBatteryStatsWakeLockMonitorType(flags);    if (workSource != null) {      mBatteryStats.noteStopWakelockFromSource(workSource,ownerPid,tag,monitorType);    } else {      mBatteryStats.noteStopWakelock(ownerUid,ownerPid,tag,monitorType);    }  } catch (  RemoteException ex) {  }}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  private int socksGetServerPort(){  InetSocketAddress addr=(InetSocketAddress)proxy.address();  return addr.getPort();}  }
class C{  public EaseOutIn(){  this(DEFAULT_OVERSHOOT_AMOUNT);}  }
class C{  public static Pattern compile(String regex){  return new Pattern(regex,0);}  }
class C{  public double predict(double x){  return beta * x + alpha;}  }
class C{  public String buildEmrClusterName(String namespaceCd,String emrDefinitionName,String clusterName){  String tokenDelimiter=configurationHelper.getProperty(ConfigurationValue.TEMPLATE_TOKEN_DELIMITER);  String namespaceToken=tokenDelimiter + "namespace" + tokenDelimiter;  String emrDefinitionToken=tokenDelimiter + "emrDefinitionName" + tokenDelimiter;  String clusterNameToken=tokenDelimiter + "clusterName" + tokenDelimiter;  Map<String,String> pathToTokenValueMap=new HashMap<>();  pathToTokenValueMap.put(namespaceToken,namespaceCd);  pathToTokenValueMap.put(emrDefinitionToken,emrDefinitionName);  pathToTokenValueMap.put(clusterNameToken,clusterName);  String defaultClusterNameTemplate=namespaceToken + "." + emrDefinitionToken+ "."+ clusterNameToken;  String emrClusterName=configurationHelper.getProperty(ConfigurationValue.EMR_CLUSTER_NAME_TEMPLATE);  if (emrClusterName == null) {    emrClusterName=defaultClusterNameTemplate;  }  for (  Map.Entry<String,String> mapEntry : pathToTokenValueMap.entrySet()) {    emrClusterName=emrClusterName.replaceAll(mapEntry.getKey(),mapEntry.getValue());  }  return emrClusterName;}  }
class C{  public Script parse(Reader in) throws CompilationFailedException {  return parse(in,generateScriptName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:44.591 -0500",hash_original_method="1826BAE4A7A25490C40F3DF9456EC509",hash_generated_method="0536068E09AA97B2F65BC6D788B4F18D") public void attribute(String elemName,String attrName,String type,String value){  ElementType e=getElementType(elemName);  if (e == null) {    throw new Error("Attribute " + attrName + " specified for unknown element type "+ elemName);  }  e.setAttribute(attrName,type,value);}  }
class C{  public void update(){  fireContentsChanged(this,0,getSize() + 1);}  }
class C{  private void releaseWifiLock(){  if (mWifiLock != null && mWifiLock.isHeld()) {    mWifiLock.release();    mWifiLock=null;  }}  }
class C{  public static String toJson(Object obj,boolean pretty){  return pretty ? gsonPretty.toJson(obj) : gson.toJson(obj);}  }
class C{  public void reads(int reads){  this.reads=reads;}  }
class C{  private void initializeLiveAttributes(){  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);}  }
class C{  public void adjustBeginLineColumn(int newLine,int newCol){  int start=tokenBegin;  int len;  if (bufpos >= tokenBegin) {    len=bufpos - tokenBegin + inBuf + 1;  } else {    len=bufsize - tokenBegin + bufpos + 1 + inBuf;  }  int i=0, j=0, k=0;  int nextColDiff=0, columnDiff=0;  while (i < len && bufline[j=start % bufsize] == bufline[k=++start % bufsize]) {    bufline[j]=newLine;    nextColDiff=columnDiff + bufcolumn[k] - bufcolumn[j];    bufcolumn[j]=newCol + columnDiff;    columnDiff=nextColDiff;    i++;  }  if (i < len) {    bufline[j]=newLine++;    bufcolumn[j]=newCol + columnDiff;    while (i++ < len) {      if (bufline[j=start % bufsize] != bufline[++start % bufsize])       bufline[j]=newLine++; else       bufline[j]=newLine;    }  }  line=bufline[j];  column=bufcolumn[j];}  }
class C{  public boolean isEncrypted(){  String s=getIsEncrypted();  return "Y".equals(s);}  }
class C{  private void initH2Console(ServletContext servletContext){  log.debug("Initialize H2 console");  ServletRegistration.Dynamic h2ConsoleServlet=servletContext.addServlet("H2Console",new org.h2.server.web.WebServlet());  h2ConsoleServlet.addMapping("/h2-console/*");  h2ConsoleServlet.setInitParameter("-properties","src/main/resources/");  h2ConsoleServlet.setLoadOnStartup(1);}  }
class C{  public synchronized void put(K key,V value){  map.put(key,value);}  }
class C{  public SelectClause distinct(boolean distinct){  this.distinct=distinct;  return this;}  }
class C{  public Stoppable scheduleRepeating(final double time,final int ordering,final Steppable event){  return scheduleRepeating(time,ordering,event,1.0);}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static void main(final String[] args){  banner();}  }
class C{  private static Pair<String,String> offsetImm(final long offset,final ITranslationEnvironment environment,final List<ReilInstruction> instructions,final String registerNodeValue,final String immediateNodeValue){  final String address=environment.getNextVariableString();  final String tmpVar1=environment.getNextVariableString();  long baseOffset=offset;  instructions.add(ReilHelpers.createAdd(baseOffset++,dw,registerNodeValue,dw,immediateNodeValue,dw,tmpVar1));  instructions.add(ReilHelpers.createAnd(baseOffset++,dw,tmpVar1,dw,dWordBitMask,dw,address));  return new Pair<String,String>(address,registerNodeValue);}  }
class C{  private CGraphGrouper(){}  }
class C{  public Shape modelToView(int pos,Shape a,Position.Bias b) throws BadLocationException {  Rectangle r=a.getBounds();  View v=getViewAtPosition(pos,r);  if ((v != null) && (!v.getElement().isLeaf())) {    return super.modelToView(pos,a,b);  }  r=a.getBounds();  int height=r.height;  int y=r.y;  Shape loc=super.modelToView(pos,a,b);  r=loc.getBounds();  r.height=height;  r.y=y;  return r;}  }
class C{  @Override public void draw(Graphics2D g2){  if (coords == null) {    return;  }  g2.setColor(PATH_COLOR);  Coord prev=coords.get(0);  for (int i=1, n=coords.size(); i < n; i++) {    Coord next=coords.get(i);    g2.drawLine(scale(prev.getX()),scale(prev.getY()),scale(next.getX()),scale(next.getY()));    prev=next;  }}  }
class C{  protected void drawFirstPassShape(Graphics2D g2,int pass,int series,int item,Shape shape){  g2.setStroke(getItemStroke(series,item));  g2.setPaint(getItemPaint(series,item));  g2.draw(shape);}  }
class C{  @Override public void run(){  long readSeqno=restartSeqno;  try {    if (!connection.seek(restartSeqno)) {      throw new THLException("Unable to locate starting seqno in log: seqno=" + restartSeqno + " store="+ thl.getName()+ " taskId="+ taskId);    }    while (!cancelled) {      THLEvent thlEvent=connection.next();      readSeqno=thlEvent.getSeqno();      if (lowWaterMark.get() == 0)       lowWaterMark.set(readSeqno);      readCount.incrementAndGet();      if (logger.isDebugEnabled()) {        logger.debug("Read event from THL: seqno=" + thlEvent.getSeqno() + " fragno="+ thlEvent.getFragno()+ " lastFrag="+ thlEvent.getLastFrag()+ " deserialized="+ (thlEvent.getReplEvent() != null));      }      headSeqnoCounter.waitSeqnoGreaterEqual(thlEvent.getSeqno());      if (logger.isDebugEnabled()) {        logger.debug("Adding event to parallel queue:  taskId=" + taskId + " seqno="+ thlEvent.getSeqno()+ " fragno="+ thlEvent.getFragno());      }      readQueue.post(thlEvent);    }  } catch (  InterruptedException e) {    if (!cancelled)     logger.warn("Unexpected interrupt before reader thread was cancelled");  }catch (  Throwable e) {    throwable=e;    try {      String msg="Read failed on transaction log: seqno=" + readSeqno + " taskId="+ taskId;      logger.error(msg,e);      dispatcher.put(new ErrorNotification(msg,e));    } catch (    InterruptedException e1) {      logger.warn("Task cancelled while posting error notification",null);    }catch (    Throwable t1) {      logger.warn("Failure while attempting to log an error: " + e,t1);    }  }  logger.info("Terminating parallel reader thread: seqno=" + readSeqno + " store="+ thl.getName()+ " taskId="+ taskId);}  }
class C{  public Bytes root(){  return root;}  }
class C{  public static MouseShortcut parseMouseShortcut(String keystrokeString) throws InvalidDataException {  int button=-1;  int modifiers=0;  int clickCount=1;  for (StringTokenizer tokenizer=new StringTokenizer(keystrokeString); tokenizer.hasMoreTokens(); ) {    String token=tokenizer.nextToken();    if (SHIFT.equals(token)) {      modifiers|=InputEvent.SHIFT_DOWN_MASK;    } else     if (CONTROL.equals(token) || CTRL.equals(token)) {      modifiers|=InputEvent.CTRL_DOWN_MASK;    } else     if (META.equals(token)) {      modifiers|=InputEvent.META_DOWN_MASK;    } else     if (ALT.equals(token)) {      modifiers|=InputEvent.ALT_DOWN_MASK;    } else     if (ALT_GRAPH.equals(token)) {      modifiers|=InputEvent.ALT_GRAPH_DOWN_MASK;    } else     if (token.startsWith("button") && token.length() > 6) {      try {        button=Integer.parseInt(token.substring(6));      } catch (      NumberFormatException e) {        throw new InvalidDataException("unparseable token: " + token);      }    } else     if (DOUBLE_CLICK.equals(token)) {      clickCount=2;    } else {      throw new InvalidDataException("unknown token: " + token);    }  }  return new MouseShortcut(button,modifiers,clickCount);}  }
class C{  public CCTMXObjectGroup groupNamed(String groupName){  return objectGroupNamed(groupName);}  }
class C{  public int compare(String as,String bs){  return as.compareTo(bs);}  }
class C{  public void onConfigurationChanged(){  int curFirst=pager.getCurrentScreen() * PAGE_SIZE;  calPageSize();  int newPage=curFirst / PAGE_SIZE;  removeViewAt(1);  afterPlatformListGot();  pager.setCurrentScreen(newPage);}  }
class C{  private static String bytesToEncoding(final byte[] ba,final String encoding){  if (ba == null) {    return null;  }  try {    return new String(ba,encoding);  } catch (  final UnsupportedEncodingException e) {    throw new Error(encoding + " not supported! Original exception: " + e);  }}  }
class C{  public boolean isVerbose(){  return verbose;}  }
class C{  public static RdapSearchPattern create(String pattern,boolean allowSuffix){  String initialString;  boolean hasWildcard;  String suffix;  int wildcardPos=pattern.indexOf('*');  if (wildcardPos < 0) {    initialString=pattern;    hasWildcard=false;    suffix=null;  } else   if (pattern.indexOf('*',wildcardPos + 1) >= 0) {    throw new UnprocessableEntityException("Only one wildcard allowed");  } else {    hasWildcard=true;    if (pattern.length() > wildcardPos + 1) {      if (!allowSuffix) {        throw new UnprocessableEntityException("Suffix not allowed after wildcard");      }      if ((pattern.length() == wildcardPos + 2) || (pattern.charAt(wildcardPos + 1) != '.')) {        throw new UnprocessableEntityException("Suffix after wildcard must be one or more domain" + " name labels, e.g. exam*.tld, ns*.example.tld");      }      suffix=pattern.substring(wildcardPos + 2);    } else {      suffix=null;    }    initialString=pattern.substring(0,wildcardPos);    if (initialString.length() < 2) {      throw new UnprocessableEntityException("At least two characters must be specified");    }    if (initialString.startsWith(ACE_PREFIX) && (initialString.length() < 7)) {      throw new UnprocessableEntityException("At least seven characters must be specified for punycode domain searches");    }  }  return new RdapSearchPattern(initialString,hasWildcard,suffix);}  }
class C{  @Nullable private GridMessageListener listenerGet0(Object topic){  if (topic instanceof GridTopic)   return sysLsnrs[systemListenerIndex(topic)]; else   return lsnrMap.get(topic);}  }
class C{  public Container removeAllChildren(){  mDisplayList.clear();  return this;}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] imageFiles=null;  String outputHeader=null;  WhiteboxRasterInfo[] images=null;  WhiteboxRaster ouptut=null;  int nCols=0;  int nRows=0;  double z;  int numClasses;  int numImages;  int progress=0;  int col, row;  int a, i, j;  double[][] data;  double noData=-32768;  double[][] classCentres;  double[][] imageMetaData;  long[] numPixelsInEachClass;  int maxIterations=100;  double dist, minDist;  int whichClass;  double minAdjustment=10;  byte initializationMode=0;  long numCellsChanged=0;  long totalNumCells=0;  boolean totalNumCellsCounted=false;  double percentChanged=0;  double percentChangedThreshold=1.0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputHeader=args[1];  numClasses=Integer.parseInt(args[2]);  maxIterations=Integer.parseInt(args[3]);  percentChangedThreshold=Double.parseDouble(args[4]);  if (args[5].toLowerCase().contains("random")) {    initializationMode=1;  } else {    initializationMode=0;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    images=new WhiteboxRasterInfo[numImages];    imageMetaData=new double[numImages][3];    for (i=0; i < numImages; i++) {      images[i]=new WhiteboxRasterInfo(imageFiles[i]);      if (i == 0) {        nCols=images[i].getNumberColumns();        nRows=images[i].getNumberRows();        noData=images[i].getNoDataValue();      } else {        if (images[i].getNumberColumns() != nCols || images[i].getNumberRows() != nRows) {          showFeedback("All input images must have the same dimensions (rows and columns).");          return;        }      }      imageMetaData[i][0]=images[i].getNoDataValue();      imageMetaData[i][1]=images[i].getMinimumValue();      imageMetaData[i][2]=images[i].getMaximumValue();    }    data=new double[numImages][];    numPixelsInEachClass=new long[numImages];    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",imageFiles[0],WhiteboxRaster.DataType.INTEGER,0);    output.setDataScale(DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (initializationMode == 1) {      Random generator=new Random();      double range;      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          classCentres[a][i]=imageMetaData[i][1] + generator.nextDouble() * range;        }      }    } else {      double range, spacing;      classCentres=new double[numClasses][numImages];      for (a=0; a < numClasses; a++) {        for (i=0; i < numImages; i++) {          range=imageMetaData[i][2] - imageMetaData[i][1];          spacing=range / numClasses;          classCentres[a][i]=imageMetaData[i][1] + spacing * a;        }      }    }    j=0;    whichClass=0;    do {      j++;      updateProgress("Loop " + j,1);      double[][] classCentreData=new double[numClasses][numImages];      numPixelsInEachClass=new long[numClasses];      numCellsChanged=0;      for (row=0; row < nRows; row++) {        for (i=0; i < numImages; i++) {          data[i]=images[i].getRowValues(row);        }        for (col=0; col < nCols; col++) {          if (data[0][col] != noData) {            if (!totalNumCellsCounted) {              totalNumCells++;            }            minDist=Double.POSITIVE_INFINITY;            for (a=0; a < numClasses; a++) {              dist=0;              for (i=0; i < numImages; i++) {                dist+=(data[i][col] - classCentres[a][i]) * (data[i][col] - classCentres[a][i]);              }              if (dist < minDist) {                minDist=dist;                whichClass=a;              }            }            z=output.getValue(row,col);            if ((int)z != whichClass) {              numCellsChanged++;            }            output.setValue(row,col,whichClass);            numPixelsInEachClass[whichClass]++;            for (i=0; i < numImages; i++) {              classCentreData[whichClass][i]+=data[i][col];            }          } else {            output.setValue(row,col,noData);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress("Loop " + j,progress);      }      totalNumCellsCounted=true;      for (a=0; a < numClasses; a++) {        if (numPixelsInEachClass[a] > 0) {          double[] newClassCentre=new double[numImages];          for (i=0; i < numImages; i++) {            newClassCentre[i]=classCentreData[a][i] / numPixelsInEachClass[a];          }          for (i=0; i < numImages; i++) {            classCentres[a][i]=newClassCentre[i];          }        }      }      percentChanged=(double)numCellsChanged / totalNumCells * 100;    } while ((percentChanged > percentChangedThreshold) && (j < maxIterations));    double[] totalDeviations=new double[numClasses];    for (row=0; row < nRows; row++) {      for (i=0; i < numImages; i++) {        data[i]=images[i].getRowValues(row);      }      for (col=0; col < nCols; col++) {        if (data[0][col] != noData) {          whichClass=(int)(output.getValue(row,col));          dist=0;          for (i=0; i < numImages; i++) {            dist+=(data[i][col] - classCentres[whichClass][i]) * (data[i][col] - classCentres[whichClass][i]);          }          totalDeviations[whichClass]+=dist;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (nRows - 1));      updateProgress("Loop " + j,progress);    }    double[] standardDeviations=new double[numClasses];    for (a=0; a < numClasses; a++) {      standardDeviations[a]=Math.sqrt(totalDeviations[a] / (numPixelsInEachClass[a] - 1));    }    DecimalFormat df;    df=new DecimalFormat("0.00");    String retStr="k-Means Classification Report\n\n";    retStr+="     \tCentroid Vector\n";    retStr+="     \t";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + "\t";    }    retStr+="SD\tPixels\t% Area\n";    for (a=0; a < numClasses; a++) {      String str="";      for (i=0; i < numImages; i++) {        str+=df.format(classCentres[a][i]) + "\t";      }      retStr+="Cluster " + a + "\t"+ str+ df.format(standardDeviations[a])+ "\t"+ numPixelsInEachClass[a]+ "\t"+ df.format((double)numPixelsInEachClass[a] / totalNumCells * 100)+ "\n";    }    retStr+="\n";    for (i=0; i < numImages; i++) {      retStr+="Image" + (i + 1) + " = "+ images[i].getShortHeaderFile()+ "\n";    }    retStr+="\nCluster Centroid Distance Analysis:\n";    for (a=0; a < numClasses; a++) {      retStr+="\tClus. " + a;    }    retStr+="\n";    for (a=0; a < numClasses; a++) {      retStr+="Cluster " + a;      for (int b=0; b < numClasses; b++) {        if (b >= a) {          dist=0;          for (i=0; i < numImages; i++) {            dist+=(classCentres[a][i] - classCentres[b][i]) * (classCentres[a][i] - classCentres[b][i]);          }          retStr+="\t" + df.format(Math.sqrt(dist));        } else {          retStr+="\t";        }      }      retStr+="\n";    }    returnData(retStr);    Dendrogram plot=new Dendrogram(classCentres,numPixelsInEachClass);    returnData(plot);    for (i=0; i < numImages; i++) {      images[i].close();    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void testGetUnknownFileName() throws Exception {  String pId="-//BEA Systems, Inc.//DTD Web Application 6.1//EN";  String sId="http://www.bea.com/servers/wls610/dtd/weblogic610-web-jar.dtd";  XmlEntityResolver resolver=new XmlEntityResolver();  String file=resolver.getDtdFileName(pId,sId);  assertEquals(file,"weblogic610-web-jar.dtd");}  }
class C{  public XYSeries(String title){  this(title,0);}  }
class C{  public Builder cloneFrom(DisplayImageOptions options){  imageResOnLoading=options.imageResOnLoading;  imageResForEmptyUri=options.imageResForEmptyUri;  imageResOnFail=options.imageResOnFail;  imageOnLoading=options.imageOnLoading;  imageForEmptyUri=options.imageForEmptyUri;  imageOnFail=options.imageOnFail;  resetViewBeforeLoading=options.resetViewBeforeLoading;  cacheInMemory=options.cacheInMemory;  cacheOnDisk=options.cacheOnDisk;  imageScaleType=options.imageScaleType;  decodingOptions=options.decodingOptions;  delayBeforeLoading=options.delayBeforeLoading;  considerExifParams=options.considerExifParams;  extraForDownloader=options.extraForDownloader;  preProcessor=options.preProcessor;  postProcessor=options.postProcessor;  displayer=options.displayer;  handler=options.handler;  isSyncLoading=options.isSyncLoading;  return this;}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  subjectAreaId=null;  instrOfferingId=null;  ctrlCrsOfferingId=null;  readOnlyCrsOfferingId=null;  instrOfferingName=null;  courseOfferingIds=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  courseOfferingNames=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  ownedCourse=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  resvId=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  limits=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  requested=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  projected=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  lastTerm=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  canDelete=DynamicList.getInstance(new ArrayList(),factoryCourseOfferings);  originalOfferings="";  ioLimit=null;  unlimited=null;}  }
class C{  private void writeEntries(int groupCount,String line1Base,String line2Base){  for (int i=0; i < groupCount; i++) {    final String line1=line1Base + i;    final String line2=line2Base + i;    mSearchHelper.saveRecentQuery(line1,line2);    mSearchHelper.waitForSave();  }}  }
class C{  public void testBigIntsRoundTrip(){  for (int i=0; i < 10000; i++) {    BigInteger value=TestUtil.nextBigInteger(random(),16);    int length=value.toByteArray().length;    int maxLength=TestUtil.nextInt(random(),length,length + 3);    byte[] encoded=new byte[maxLength];    NumericUtils.bigIntToSortableBytes(value,maxLength,encoded,0);    assertEquals(value,NumericUtils.sortableBytesToBigInt(encoded,0,maxLength));  }}  }
class C{  public void loadScale(float x,float y){  loadIdentity();  mMat[0]=x;  mMat[4]=y;}  }
class C{  @SuppressWarnings("unchecked") public final void testValidateWhenAllValidatorsSucceed(){  Validator<Object> validator1=new AbstractValidatorImplementation("foo",true);  Validator<Object> validator2=new AbstractValidatorImplementation("bar",true);  Validator<Object>[] validators=new Validator[2];  validators[0]=validator1;  validators[1]=validator2;  DisjunctiveValidator<Object> disjunctiveValidator=new DisjunctiveValidator<>("foo",validators);  assertTrue(disjunctiveValidator.validate(new Object()));}  }
class C{  public DataTypeParser register(int jdbcType,String grammar){  Objects.requireNonNull(grammar,"the data type grammar must be specified");  DataTypePattern pattern=parser.parse(jdbcType,grammar);  pattern.forEachFirstToken(null);  return this;}  }
class C{  public static int[] regionToLocation(IDocument document,IRegion region,boolean singleLine) throws BadLocationException {  if (!singleLine) {    throw new IllegalArgumentException("Not implemented");  }  int[] coordinates=new int[4];  int offset=region.getOffset();  int length=region.getLength();  coordinates[0]=document.getLineOfOffset(offset) + 1;  coordinates[2]=document.getLineOfOffset(offset) + 1;  IRegion line=document.getLineInformationOfOffset(offset);  coordinates[1]=offset - line.getOffset();  coordinates[3]=coordinates[1] + length;  return coordinates;}  }
class C{  public CreateIndexRequestBuilder addMapping(String type,Map<String,Object> source){  request.mapping(type,source);  return this;}  }
class C{  public ConstantGeneration(double prob,RandomGenerator random){  this.prob=prob;  this.random=random;}  }
class C{  public boolean isEndSession(){  return endSession;}  }
class C{  protected void removeBlock(OBlock block){  java.util.List<Positionable> list=_circuitMap.get(block);  if (list != null) {    for (int i=0; i < list.size(); i++) {      Positionable pos=list.get(i);      if (pos instanceof IndicatorTrack) {        ((IndicatorTrack)pos).setOccBlockHandle(null);      } else       if (pos instanceof PortalIcon) {        pos.remove();      }      _darkTrack.add(pos);    }  }  _circuitMap.remove(block);  block.dispose();}  }
class C{  boolean isPublicAccess(AuthorizationRequestData rdo,HttpServletRequest request){  if (rdo.isLandingPage()) {    LandingpageConfigurationService service=lookupLandingpageConfigurationService(request);    try {      LandingpageType type=service.loadLandingpageType(rdo.getMarketplaceId());      return type.isDefault();    } catch (    Exception e) {      return false;    }  }  return rdo.isPublicURL(publicUrlPattern);}  }
class C{  public SQLNonTransientException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  private String extractUnifiedObjectName(String objectName){  Path p=new Path(objectName);  if (objectName.indexOf("-" + HADOOP_ATTEMPT) > 0) {    String attempt=objectName.substring(objectName.lastIndexOf("-") + 1);    try {      TaskAttemptID.forName(attempt);      return p.getParent().toString();    } catch (    IllegalArgumentException e) {      return objectName;    }  } else   if (objectName.indexOf(HADOOP_SUCCESS) > 0) {    return p.getParent().toString();  }  return objectName;}  }
class C{  static void installAudioActionMap(ActionMap map){  LookAndFeel laf=UIManager.getLookAndFeel();  if (laf instanceof BasicLookAndFeel) {    map.setParent(((BasicLookAndFeel)laf).getAudioActionMap());  }}  }
class C{  public boolean needsScores(){  for (  SortField sortField : fields) {    if (sortField.needsScores()) {      return true;    }  }  return false;}  }
class C{  public void addListener(final ITagTreeManagerListener listener){  m_listeners.addListener(listener);}  }
class C{  public void put(IntegerMinMax val){  min=val.min < min ? val.min : min;  max=val.max > max ? val.max : max;}  }
class C{  protected PlainAccessOfNamespacedImportDescription(IEObjectDescription delegate,String namespacedName){  super(delegate);  this.namespacedName=namespacedName;}  }
class C{  public void write(PrintWriter output,Janitor janitor){  String name=source.getName();  int line=getCause().getStartLine();  int column=getCause().getStartColumn();  String sample=source.getSample(line,column,janitor);  output.print(name + ": " + line+ ": "+ getCause().getMessage());  if (sample != null) {    output.println();    output.print(sample);    output.println();  }}  }
class C{  public GameSplashScreen(){  getContentPane().setBackground(Color.CYAN);  setBounds(100,100,658,549);  getContentPane().setLayout(null);  JLabel lblNewLabel=new JLabel("");  lblNewLabel.setIcon(icon);  lblNewLabel.setBounds(31,32,601,311);  getContentPane().add(lblNewLabel);  progressBar.setForeground(Color.MAGENTA);  progressBar.setStringPainted(true);  progressBar.setBounds(21,433,580,50);  getContentPane().add(progressBar);  lblGame.setHorizontalAlignment(SwingConstants.CENTER);  lblGame.setFont(new Font("Tahoma",Font.BOLD,18));  lblGame.setBounds(170,354,254,68);  getContentPane().add(lblGame);  doProgress();}  }
class C{  public void removeTradestrategyTradeOrders(final Tradestrategy tradestrategy) throws PersistentModelException {  try {    Tradestrategy transientInstance=m_tradestrategyHome.findById(tradestrategy.getIdTradeStrategy());    transientInstance.setStatus(null);    m_aspectHome.persist(transientInstance);    Hashtable<Integer,TradePosition> tradePositions=new Hashtable<Integer,TradePosition>();    for (    TradeOrder tradeOrder : transientInstance.getTradeOrders()) {      if (tradeOrder.hasTradePosition())       tradePositions.put(tradeOrder.getTradePosition().getIdTradePosition(),tradeOrder.getTradePosition());      if (null != tradeOrder.getIdTradeOrder()) {        m_aspectHome.remove(tradeOrder);      }    }    for (    TradePosition tradePosition : tradePositions.values()) {      tradePosition=this.findTradePositionById(tradePosition.getIdTradePosition());      if (tradePosition.equals(transientInstance.getContract().getTradePosition())) {        transientInstance.getContract().setTradePosition(null);        m_aspectHome.persist(transientInstance.getContract());      }      m_aspectHome.remove(tradePosition);    }    transientInstance.getTradeOrders().clear();  } catch (  OptimisticLockException ex1) {    throw new PersistentModelException("Error removing Tradestrategy TradePositions. Please refresh before remove.");  }catch (  Exception ex) {    throw new PersistentModelException("Error removing Tradestrategy TradePositions: " + tradestrategy.getContract().getSymbol() + "\n Msg: "+ ex.getMessage());  }}  }
class C{  public void release(){  if (hProgram >= 0)   GLES20.glDeleteProgram(hProgram);  hProgram=-1;}  }
class C{  public void addController(Controller controller){  if (!controllers.contains(controller)) {    controllers.add(controller);  }}  }
class C{  public void clear(){  final Object[] keys=_keys;  final int[] values=_values;  for (int i=keys.length - 1; i >= 0; i--) {    keys[i]=null;    values[i]=0;  }  _size=0;}  }
class C{  @Override protected void doAction(){  DSystemInformation dSystemInformation=new DSystemInformation(frame);  dSystemInformation.setLocationRelativeTo(frame);  dSystemInformation.setVisible(true);}  }
class C{  public static Object sum(Iterable items){  return DefaultGroovyMethods.sum(items);}  }
class C{  public boolean isEmpty(){  return internalMap.isEmpty();}  }
class C{  public T caseParameterizedPropertyAccessExpression(ParameterizedPropertyAccessExpression object){  return null;}  }
class C{  public void pvChanged(PvChangeEvent event){  updateColumnWidths();}  }
class C{  public String query(String request) throws Exception {  return getResponse(new HttpGet(getBaseURL() + request));}  }
class C{  void writeTo(byte[] b,int off){  System.arraycopy(buf,0,b,off,count);}  }
class C{  public void paintInternalFrameTitlePaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private void removeWaiter(WaitNode node){  if (node != null) {    node.thread=null;    retry:     for (; ; ) {      for (WaitNode pred=null, q=waiters, s; q != null; q=s) {        s=q.next;        if (q.thread != null)         pred=q; else         if (pred != null) {          pred.next=s;          if (pred.thread == null)           continue retry;        } else         if (!UNSAFE.compareAndSwapObject(this,waitersOffset,q,s))         continue retry;      }      break;    }  }}  }
class C{  private void doGetStmts(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (!isReadable(getServletContext(),req,resp)) {    return;  }  final boolean includeInferred=getBooleanValue(req,INCLUDE_INFERRED,true);  final Resource s;  final URI p;  final Value o;  final Resource[] c;  final Enumeration<String> mimeTypes;  try {    s=EncodeDecodeValue.decodeResource(req.getParameter("s"));    p=EncodeDecodeValue.decodeURI(req.getParameter("p"));    o=EncodeDecodeValue.decodeValue(req.getParameter("o"));    c=decodeContexts(req,"c");    mimeTypes=req.getHeaders(ConnectOptions.ACCEPT_HEADER);  } catch (  IllegalArgumentException ex) {    buildAndCommitResponse(resp,HTTP_BADREQUEST,MIME_TEXT_PLAIN,ex.getLocalizedMessage());    return;  }  if (log.isInfoEnabled())   log.info("GETSTMTS: access path: (includeInferred=" + includeInferred + ", s="+ s+ ", p="+ p+ ", o="+ o+ ", c="+ Arrays.toString(c)+ ")");  try {    submitApiTask(new GetStmtsTask(req,resp,getNamespace(req),getTimestamp(req),includeInferred,s,p,o,c,mimeTypes)).get();  } catch (  Throwable t) {    launderThrowable(t,resp,"GETSTMTS: access path: (includeInferred=" + includeInferred + ", s="+ s+ ", p="+ p+ ", o="+ o+ ", c="+ Arrays.toString(c)+ ")");  }}  }
class C{  public MainViewComponent(){  this(new EntityView());}  }
class C{  public List<VideoItem> queryAll(){  return queryAll(VideoDataQuery.CONTENT_URI,FilmstripItemBase.QUERY_ALL_MEDIA_ID);}  }
class C{  InverseDistanceWeighting(SpatialGrid sg){  this.sg=sg;}  }
class C{  public Binding(final IVariable var,final IConstant val){  if (var == null) {    throw new IllegalArgumentException();  }  if (val == null) {    throw new IllegalArgumentException();  }  this.var=var;  this.val=val;}  }
class C{  @Override public StreamImpl openReadImpl() throws IOException {  StreamImpl stream=getBestPath().openReadImpl();  return stream;}  }
class C{  private static byte[] byteCopy(byte[] source,int offset,int count,byte[] target){  for (int i=offset, j=0; i < offset + count; i++, j++) {    target[j]=source[i];  }  return target;}  }
class C{  public boolean remove(INode n){  INode state=contains(n);  if (state == null) {    return false;  }  return closed.remove(state);}  }
class C{  public final Key translateKey(Key key) throws InvalidKeyException {  if (serviceIterator == null) {    return spi.engineTranslateKey(key);  }  Exception failure=null;  KeyFactorySpi mySpi=spi;  do {    try {      return mySpi.engineTranslateKey(key);    } catch (    Exception e) {      if (failure == null) {        failure=e;      }      mySpi=nextSpi(mySpi);    }  } while (mySpi != null);  if (failure instanceof RuntimeException) {    throw (RuntimeException)failure;  }  if (failure instanceof InvalidKeyException) {    throw (InvalidKeyException)failure;  }  throw new InvalidKeyException("Could not translate key",failure);}  }
class C{  public static short[] longToShortArray(final long src,final int srcPos,final short[] dst,final int dstPos,final int nShorts){  if (0 == nShorts) {    return dst;  }  if ((nShorts - 1) * 16 + srcPos >= 64) {    throw new IllegalArgumentException("(nShorts-1)*16+srcPos is greather or equal to than 64");  }  int shift=0;  for (int i=0; i < nShorts; i++) {    shift=i * 16 + srcPos;    dst[dstPos + i]=(short)(0xffff & (src >> shift));  }  return dst;}  }
class C{  private StringBuilder generateParameters(){  StringBuilder parameters=new StringBuilder();  if (filterMap == null && expandParameters == null) {    return parameters;  }  parameters.append('?');  int filterParameterCounter=0;  if (filterMap != null && !filterMap.isEmpty()) {    parameters.append(FILTER_PREFIX);    for (    Map.Entry<String,String> filterEntry : filterMap.entrySet()) {      parameters.append(String.format("%s eq '%s'",filterEntry.getKey(),filterEntry.getValue()));      if (++filterParameterCounter < filterMap.size()) {        parameters.append(" and ");      }    }    if (expandParameters != null) {      parameters.append("&");    }  }  if (expandParameters != null) {    parameters.append(EXPAND_PREFIX);    Iterator iterator=expandParameters.iterator();    parameters.append(String.format("%s",iterator.next()));    while (iterator.hasNext()) {      parameters.append(String.format(",%s",iterator.next()));    }  }  return parameters;}  }
class C{  static String encodeStub(RMIServer rmiServer,Map<String,?> env) throws IOException {  if (IIOPHelper.isStub(rmiServer))   return "/ior/" + encodeIIOPStub(rmiServer,env); else   return "/stub/" + encodeJRMPStub(rmiServer,env);}  }
class C{  protected JvmThreadInstanceEntryMeta createJvmThreadInstanceEntryMetaNode(String snmpEntryName,String tableName,SnmpMib mib,MBeanServer server){  return new JvmThreadInstanceEntryMeta(mib,objectserver);}  }
class C{  public double weightValue(int n){  if (n >= m_numInputs || n < -1) {    return Double.NaN;  }  return m_weights[n + 1];}  }
class C{  public final void removeCaretListener(CaretListener listener){  listenerList.remove(CaretListener.class,listener);}  }
class C{  public static void println(PrintStream stream,AST ast){  print(stream,ast);  stream.println();}  }
class C{  void recordFailure(){  try {    state.get().recordFailure();  }  finally {    currentExecutions.decrementAndGet();  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == TypeRef.class) {switch (baseOperationID) {case TypeRefsPackage.TYPE_REF___GET_DECLARED_TYPE:      return ImPackage.PARAMETERIZED_TYPE_REF_IM___GET_DECLARED_TYPE;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == ReferencingElement_IM.class) {switch (baseOperationID) {case ImPackage.REFERENCING_ELEMENT_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET:  return ImPackage.PARAMETERIZED_TYPE_REF_IM___GET_ORIGINAL_TARGET_OF_REWIRED_TARGET;default :return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public static <E,R>R ifelse(Optional<E> condition,Function<E,R> trueMap,R falseValue){  if (condition.isPresent()) {    return trueMap.apply(condition.get());  } else {    return falseValue;  }}  }
class C{  public MapBinaryHeap(Collection<T> c,Comparator<T> comp){  this(comp);  addAll(c);}  }
class C{  static public boolean isAllowedToAbortGeolocSharingSession(GeolocSharing geolocSharing) throws RcsPersistentStorageException, RcsGenericException {switch (geolocSharing.getState()) {case STARTED:case INITIATING:case ACCEPTING:case RINGING:    return true;default :  return false;}}  }
class C{  public void tradeOrderStatusChanged(TradeOrder tradeOrder){}  }
class C{  public static boolean hasAppEngineFacet(IFacetedProject project){  FacetedProjectHelper facetedProjectHelper=new FacetedProjectHelper();  return facetedProjectHelper.projectHasFacet(project,ID);}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public void rotateAround(Vector3 axis,double angle){  rotateAround(axis,angle,true);}  }
class C{  public void run(){  if (!isOnline()) {    status=ERROR;    thr=new IOException("Base is offline");    m=null;    return;  }  Connection c=null;  try {    c=new Connection(m.getRecipient(),group,MESSAGE,getContextClassLoader());    c.oos.writeObject(m.recipient.name);    c.oos.flush();    byte b=c.ois.readByte();    if (b == OK) {      c.oos.writeObject(m);      c.oos.flush();      b=c.ois.readByte();      if (b == MESSAGE) {        reply=c.ois.readObject();        b=OK;      }    }    if (b != OK)     status=ERROR;  } catch (  Throwable e) {    if (e instanceof ConnectException)     Logger.debug(getClass().getName(),"Message not delivered. Destination unreachable.\n" + m); else     Logger.error(getClass().getName(),"Message not delivered.\n" + m,e);    thr=e;    status=ERROR;  }  try {    if (c != null)     c.close();  } catch (  IOException e) {    Logger.error(getClass().getName(),"Exception when closing a connection to " + m.getRecipient() + ": ",e);    thr=e;    status=ERROR;  }  if (status != ERROR)   status=DONE;  m=null;}  }
class C{  @Override protected EClass eStaticClass(){  return TypeRefsPackage.Literals.EXISTENTIAL_TYPE_REF;}  }
class C{  public Integer executeUpdate(PreparedStatement stmt,boolean useInlineSavepoint){  if (isSource())   return null;  if (s_dbEngine.isDBError())   return null;  if (stmt == null)   return null;  setDoNotInterrupt(true);  Integer result=null;  String sqlCommand=stmt.toString();  Savepoint spInline=null;  if (useInlineSavepoint)   spInline=setSavepoint("pstmtInline");  try {    s_logger.log(Level.FINER,sqlCommand);    int recordsUpdated=stmt.executeUpdate();    result=new Integer(recordsUpdated);  } catch (  SQLException e) {    s_dbEngine.setTransactionErrors(1);    s_logger.log(Level.SEVERE,this.getClass().getSimpleName(),Thread.currentThread().getStackTrace()[2].getMethodName(),"executeUpdatePreparedStatementError",new Object[]{sqlCommand,e.getMessage()});    result=null;  }  releaseSavepoint(spInline);  return result;}  }
class C{  private boolean isConfigured(String bssid){  List<IEspDevice> list=mUser.getDeviceList();  for (  IEspDevice userDevice : list) {    if (userDevice.getDeviceState().isStateDeleted()) {      continue;    }    if (BSSIDUtil.isEqualIgnore2chars(userDevice.getBssid(),bssid)) {      return true;    }  }  return false;}  }
class C{  private void initSurface(){  if (getActivity() != null && myView == null) {    relativeLayout=new RelativeLayout(getActivity());    relativeLayout.setLayoutParams(new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.FILL_PARENT,RelativeLayout.LayoutParams.FILL_PARENT));    relativeLayout.setFocusable(false);    getActivity().getWindow().setBackgroundDrawable(null);    if (asyncView) {      if (android.os.Build.VERSION.SDK_INT < 14) {        myView=new AndroidSurfaceView(getActivity(),AndroidImplementation.this);      } else {        int hardwareAcceleration=16777216;        getActivity().getWindow().setFlags(hardwareAcceleration,hardwareAcceleration);        myView=new AndroidAsyncView(getActivity(),AndroidImplementation.this);      }    } else {      int hardwareAcceleration=16777216;      getActivity().getWindow().setFlags(hardwareAcceleration,hardwareAcceleration);      superPeerMode=true;      myView=new AndroidAsyncView(getActivity(),AndroidImplementation.this);    }    myView.getAndroidView().setVisibility(View.VISIBLE);    relativeLayout.addView(myView.getAndroidView());    myView.getAndroidView().setVisibility(View.VISIBLE);    int id=getActivity().getResources().getIdentifier("main","layout",getActivity().getApplicationInfo().packageName);    RelativeLayout root=(RelativeLayout)LayoutInflater.from(getActivity()).inflate(id,null);    if (viewAbove != null) {      RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);      lp.addRule(RelativeLayout.ALIGN_PARENT_TOP);      lp.addRule(RelativeLayout.CENTER_HORIZONTAL);      RelativeLayout.LayoutParams lp2=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT);      lp2.setMargins(0,0,aboveSpacing,0);      relativeLayout.setLayoutParams(lp2);      root.addView(viewAbove,lp);    }    root.addView(relativeLayout);    if (viewBelow != null) {      RelativeLayout.LayoutParams lp=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.WRAP_CONTENT,RelativeLayout.LayoutParams.WRAP_CONTENT);      lp.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);      lp.addRule(RelativeLayout.CENTER_HORIZONTAL);      RelativeLayout.LayoutParams lp2=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.MATCH_PARENT);      lp2.setMargins(0,0,0,belowSpacing);      relativeLayout.setLayoutParams(lp2);      root.addView(viewBelow,lp);    }    getActivity().setContentView(root);    myView.getAndroidView().requestFocus();  }}  }
class C{  public boolean isDirect(){  return (X_C_Order.PAYMENTRULE_DirectDeposit.equals(getPaymentRule()) || X_C_Order.PAYMENTRULE_DirectDebit.equals(getPaymentRule()));}  }
class C{  public static void warn(int windowNo,String adMessage,String title){  warn(windowNo,null,adMessage,null,title);}  }
class C{  public void disableOkButton(){  okButton.setEnabled(false);}  }
class C{  public void testSingleWildcard() throws Exception {  Collection<File> res=parse(wildcard(DIR_1));  assert res.size() == 2;  assert res.contains(FILE_1_1);  assert res.contains(FILE_1_2);  res=parse(wildcard(MISSING_DIR));  assert res.size() == 0;}  }
class C{  public boolean isPublic(){  Object oo=get_Value(COLUMNNAME_IsPublic);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private GridCollections(){}  }
class C{  public String outputFileTipText(){  return "File to save to. Use '-' to write to standard out.";}  }
class C{  public boolean isConflict(){  return conflict;}  }
class C{  @Bean ItemProcessor<StudentDTO,StudentDTO> excelStudentProcessor(){  return new LoggingStudentProcessor();}  }
class C{  @Override public void writeStatement(Statement oldStat){  if (null == oldStat) {    System.err.println("java.lang.Exception: XMLEncoder: discarding statement null");    System.err.println("Continuing...");    return;  }  recordStatement(oldStat);  super.writeStatement(oldStat);}  }
class C{  @Override public long skip(long n) throws IOException {  long nr=in.skip(n);  incrementValue((int)nr);  return nr;}  }
class C{  static TBigInteger multiplyPAP(TBigInteger a,TBigInteger b){  int aLen=a.numberLength;  int bLen=b.numberLength;  int resLength=aLen + bLen;  int resSign=(a.sign != b.sign) ? -1 : 1;  if (resLength == 2) {    long val=unsignedMultAddAdd(a.digits[0],b.digits[0],0,0);    int valueLo=(int)val;    int valueHi=(int)(val >>> 32);    return ((valueHi == 0) ? new TBigInteger(resSign,valueLo) : new TBigInteger(resSign,2,new int[]{valueLo,valueHi}));  }  int[] aDigits=a.digits;  int[] bDigits=b.digits;  int resDigits[]=new int[resLength];  multArraysPAP(aDigits,aLen,bDigits,bLen,resDigits);  TBigInteger result=new TBigInteger(resSign,resLength,resDigits);  result.cutOffLeadingZeroes();  return result;}  }
class C{  public static UserAgent valueOf(String name){  if (name == null)   throw new NullPointerException("Name is null");  String[] elements=name.split("-");  if (elements.length == 2) {    OperatingSystem operatingSystem=OperatingSystem.valueOf(elements[0]);    Browser browser=Browser.valueOf(elements[1]);    return new UserAgent(operatingSystem,browser);  }  throw new IllegalArgumentException("Invalid string for userAgent " + name);}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  public static short[] generateLogTable(int polynomial){  short[] result=new short[FIELD_SIZE];  for (int i=0; i < FIELD_SIZE; i++) {    result[i]=-1;  }  int b=1;  for (int log=0; log < FIELD_SIZE - 1; log++) {    if (result[b] != -1) {      throw new RuntimeException("BUG: duplicate logarithm (bad polynomial?)");    }    result[b]=(short)log;    b=(b << 1);    if (FIELD_SIZE <= b) {      b=((b - FIELD_SIZE) ^ polynomial);    }  }  return result;}  }
class C{  public boolean isIncludeNullsProduct(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsProduct);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  protected void growTree(World world,BlockPos pos){}  }
class C{  public boolean isInvoked(){  return isInvoked;}  }
class C{  public void testGetTag(){  ParallaxRfidProtocol instance=new ParallaxRfidProtocol();  assertEquals("7800656EB6",instance.getTag(msgStandalone));}  }
class C{  public static Range findStackedRangeBounds(CategoryDataset dataset){  return findStackedRangeBounds(dataset,0.0);}  }
class C{  public void init(){  if (!_initialized) {    super.init();    _detectPanel=new DetectionPanel(this);    JPanel panel=new JPanel();    panel.setLayout(new BoxLayout(panel,BoxLayout.Y_AXIS));    panel.add(Box.createVerticalGlue());    panel.add(_detectPanel);    add(panel,0);  }}  }
class C{  private void writeObject(ObjectOutputStream s) throws IOException {  s.defaultWriteObject();  if (getUIClassID().equals(uiClassID)) {    byte count=JComponent.getWriteObjCounter(this);    JComponent.setWriteObjCounter(this,--count);    if (count == 0 && ui != null) {      ui.installUI(this);    }  }}  }
class C{  synchronized void removeMergeThread(){  Thread currentThread=Thread.currentThread();  for (int i=0; i < mergeThreads.size(); i++) {    if (mergeThreads.get(i) == currentThread) {      mergeThreads.remove(i);      return;    }  }  assert false : "merge thread " + currentThread + " was not found";}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  } else {    System.out.println(progress + "%");  }  previousProgress=progress;}  }
class C{  protected void performFileMoveImpl(CompleteUploadSingleParamsDto completeUploadSingleParamsDto){  S3FileCopyRequestParamsDto params=new S3FileCopyRequestParamsDto();  params.setSourceBucketName(completeUploadSingleParamsDto.getSourceBucketName());  params.setTargetBucketName(completeUploadSingleParamsDto.getTargetBucketName());  params.setSourceObjectKey(completeUploadSingleParamsDto.getSourceFilePath());  params.setTargetObjectKey(completeUploadSingleParamsDto.getTargetFilePath());  params.setKmsKeyId(completeUploadSingleParamsDto.getKmsKeyId());  params.setHttpProxyHost(completeUploadSingleParamsDto.getAwsParams().getHttpProxyHost());  params.setHttpProxyPort(completeUploadSingleParamsDto.getAwsParams().getHttpProxyPort());  String targetStatus;  try {    s3Dao.copyFile(params);    targetStatus=BusinessObjectDataStatusEntity.VALID;  } catch (  Exception e) {    LOGGER.error("Failed to copy the upload single file. s3Key=\"{}\" sourceS3BucketName=\"{}\" targetS3BucketName=\"{}\" " + "sourceBusinessObjectDataKey={} targetBusinessObjectDataKey={}",completeUploadSingleParamsDto.getSourceFilePath(),completeUploadSingleParamsDto.getSourceBucketName(),completeUploadSingleParamsDto.getTargetBucketName(),jsonHelper.objectToJson(completeUploadSingleParamsDto.getSourceBusinessObjectDataKey()),jsonHelper.objectToJson(completeUploadSingleParamsDto.getTargetBusinessObjectDataKey()),e);    targetStatus=BusinessObjectDataStatusEntity.INVALID;  }  completeUploadSingleParamsDto.setTargetOldStatus(completeUploadSingleParamsDto.getTargetNewStatus());  completeUploadSingleParamsDto.setTargetNewStatus(targetStatus);}  }
class C{  public boolean processEvents(List<AsyncEvent> events){  System.out.println("hitesh got event");synchronized (eventsMap) {    for (    AsyncEvent event : events) {      this.eventsMap.put(event.getKey(),event.getDeserializedValue());    }  }  return true;}  }
class C{  public WrongHttpMethodServerProxy(){  requestFileName="getstate.query";  httpMethod="GET";  url="http://127.0.0.1:" + PortNumbers.PROXY_PORT;}  }
class C{  public void removePort(){  sentBy.removePort();}  }
class C{  public void formatChanged(){  m_FormatText.setText(m_Format.toPattern());  m_propSupport.firePropertyChange(null,null,null);}  }
class C{  public void deposit(double amount){  balance+=amount;}  }
class C{  public ShardId shardId(){  return this.shardId;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:49.839 -0500",hash_original_method="76183B88EF41C33999366984D15A43B8",hash_generated_method="E42E5828FE7CEF906AC34B480078F837") public AnrInfo(){}  }
class C{  public boolean isBalanceSheet(){  String accountType=getAccountType();  return (MElementValue.ACCOUNTTYPE_Asset.equals(accountType) || MElementValue.ACCOUNTTYPE_Liability.equals(accountType) || MElementValue.ACCOUNTTYPE_OwnerSEquity.equals(accountType));}  }
class C{  public void text(char c,float x,float y,float z){  g.text(c,x,y,z);}  }
class C{  protected int readBlock(){  blockSize=read();  int n=0;  if (blockSize > 0) {    try {      int count;      while (n < blockSize) {        count=blockSize - n;        rawData.get(block,n,count);        n+=count;      }    } catch (    final Exception e) {      Log.w(TAG,"Error Reading Block",e);      status=STATUS_FORMAT_ERROR;    }  }  return n;}  }
class C{  public static void readInputsFromFile(String fin_inputs,GateLibrary gate_library){  ArrayList<ArrayList<String>> inputs_list=Util.fileTokenizer(fin_inputs);  ArrayList<String> input_names=new ArrayList<String>();  gate_library.get_INPUTS_ON().clear();  gate_library.get_INPUTS_OFF().clear();  for (int i=inputs_list.size() - 1; i >= 0; --i) {    if (inputs_list.get(i).get(0).substring(0,1).equals("#")) {      continue;    }    String name=inputs_list.get(i).get(0);    Double off_rpu=Double.valueOf(inputs_list.get(i).get(1));    Double on_rpu=Double.valueOf(inputs_list.get(i).get(2));    String promoter_seq=inputs_list.get(i).get(3);    gate_library.get_INPUTS_OFF().put(name,off_rpu);    gate_library.get_INPUTS_ON().put(name,on_rpu);    gate_library.get_INPUTS_SEQ().put(name,promoter_seq);    input_names.add(name);  }  for (int i=0; i < input_names.size(); ++i) {    gate_library.get_INPUT_NAMES()[i]=input_names.get(i);  }}  }
class C{  private View makeAndAddHorizontalView(int position,int offset,int x,boolean fromLeft){  View child;  if (!mDataChanged) {    child=mRecycler.get(position);    if (child != null) {      int childLeft=child.getLeft();      mRightMost=Math.max(mRightMost,childLeft + child.getMeasuredWidth());      mLeftMost=Math.min(mLeftMost,childLeft);      setUpHorizontalChild(child,offset,x,fromLeft);      return child;    }  }  child=mAdapter.getView(position,null,this);  setUpHorizontalChild(child,offset,x,fromLeft);  return child;}  }
class C{  public FileUtil(String file,String filter,String action,String p1,String p2){  this(new File(file),filter,action,p1,p2);}  }
class C{  public final void doExport(final String trackName,final File target,int verbosity) throws IOException {  Log.i(TAG,"Exporting gpx file" + target.getAbsolutePath());  mDbHelper=new DatabaseHelper(mContext.getApplicationContext());  final BufferedWriter bw=new BufferedWriter(new FileWriter(target));  bw.write(XML_HEADER);  bw.write(TAG_GPX);  if (verbosity == VERBOSITY_TRACK_AND_WAYPOINTS || verbosity == VERBOSITY_WAYPOINTS_ONLY || verbosity == VERBOSITY_ALL) {    writeWaypoints(bw);  }  if (verbosity == VERBOSITY_TRACK_AND_WAYPOINTS || verbosity == VERBOSITY_ALL) {    writeTrackpoints(trackName,bw);  }  bw.flush();  if (verbosity == VERBOSITY_ALL) {    writeWifis(bw);    bw.flush();    writeCells(bw);    bw.flush();  }  bw.write(TAG_GPX_CLOSE);  bw.close();  mDbHelper.close();  Log.i(TAG,"Finished building gpx file");}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFileTmp),Util.US_ASCII));  try {    writer.write(MAGIC);    writer.write("\n");    writer.write(VERSION_1);    writer.write("\n");    writer.write(Integer.toString(appVersion));    writer.write("\n");    writer.write(Integer.toString(valueCount));    writer.write("\n");    writer.write("\n");    for (    Entry entry : lruEntries.values()) {      if (entry.currentEditor != null) {        writer.write(DIRTY + ' ' + entry.key+ '\n');      } else {        writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');      }    }  }  finally {    writer.close();  }  if (journalFile.exists()) {    renameTo(journalFile,journalFileBackup,true);  }  renameTo(journalFileTmp,journalFile,false);  journalFileBackup.delete();  journalWriter=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(journalFile,true),Util.US_ASCII));}  }
class C{  public Instance reduceDimensionality(Instance in) throws Exception {  if (m_attributeFilter == null) {    throw new Exception("No feature selection has been performed yet!");  }  if (m_transformer != null) {    in=m_transformer.convertInstance(in);  }  m_attributeFilter.input(in);  m_attributeFilter.batchFinished();  Instance result=m_attributeFilter.output();  return result;}  }
class C{  public Element rootFromURL(URL url) throws JDOMException, IOException {  if (log.isDebugEnabled()) {    log.debug("reading xml from URL: " + url.toString());  }  return getRoot(verify,url.openConnection().getInputStream());}  }
class C{  public static long pop_xor(long[] arr1,long[] arr2,int wordOffset,int numWords){  long popCount=0;  for (int i=wordOffset, end=wordOffset + numWords; i < end; ++i) {    popCount+=Long.bitCount(arr1[i] ^ arr2[i]);  }  return popCount;}  }
class C{  public double filterLevel(double level){  return level;}  }
class C{  public void endCDATA() throws org.xml.sax.SAXException {  if (m_cdataTagOpen)   closeCDATA();  m_cdataStartCalled=false;}  }
class C{  public void addAddDeleteButtons(){  JButton deleteButton=new JButton("Delete");  deleteButton.setAction(TimeSeriesPlotActions.getRemoveSourceAction(this));  JButton addButton=new JButton("Add");  addButton.setAction(TimeSeriesPlotActions.getAddSourceAction(this));  buttonPanel.add(deleteButton);  buttonPanel.add(addButton);}  }
class C{  public GaussianFilter(){  this(2);}  }
class C{  @Override public Document build(Reader stream,String uri) throws ParsingException, ValidityException, IOException {  InputSource is=new InputSource(stream);  is.setSystemId(uri);  return build(is);}  }
class C{  public FBXAException(int errorCode){  super(errorCode);}  }
class C{  public GridClientCacheRequest(GridCacheOperation op){  this.op=op;}  }
class C{  @Dev public EnableFeatureAction(final String feature,final String value){  this.feature=checkNotNull(feature);  this.value=value;}  }
class C{  public boolean readyToFinalize(ObjectReference object){  return !isLive(object);}  }
class C{  public KeySelectorException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,int options){  if (source == null) {    throw new NullPointerException("Source array was null.");  }  if (destination == null) {    throw new NullPointerException("Destination array was null.");  }  if (srcOffset < 0 || srcOffset + 3 >= source.length) {    throw new IllegalArgumentException(String.format("Source array with length %d cannot have offset of %d and still process four bytes.",source.length,srcOffset));  }  if (destOffset < 0 || destOffset + 2 >= destination.length) {    throw new IllegalArgumentException(String.format("Destination array with length %d cannot have offset of %d and still store three bytes.",destination.length,destOffset));  }  byte[] DECODABET=getDecodabet(options);  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TimePeriodValuesCollection)) {    return false;  }  TimePeriodValuesCollection that=(TimePeriodValuesCollection)obj;  if (this.domainIsPointsInTime != that.domainIsPointsInTime) {    return false;  }  if (this.xPosition != that.xPosition) {    return false;  }  if (!ObjectUtilities.equal(this.data,that.data)) {    return false;  }  return true;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){switch (event.getAction()) {case MotionEvent.ACTION_DOWN:    this.onActionDown(event);  break;case MotionEvent.ACTION_MOVE:this.onActionMove(event);break;case MotionEvent.ACTION_UP:this.onActionUp(event);break;default :break;}this.invalidate();return true;}  }
class C{  public static double stddevp(double[] a){  return Math.sqrt(varp(a));}  }
class C{  private void discoverAccessZones(StorageSystem storageSystem){  URI storageSystemId=storageSystem.getId();  VirtualNAS virtualNAS=null;  PhysicalNAS physicalNAS=null;  List<VirtualNAS> newvNASList=new ArrayList<VirtualNAS>();  List<VirtualNAS> existingvNASList=new ArrayList<VirtualNAS>();  List<PhysicalNAS> newPhysicalNASList=new ArrayList<PhysicalNAS>();  List<PhysicalNAS> existingPhysicalNASList=new ArrayList<PhysicalNAS>();  List<VirtualNAS> discoveredVNASList=new ArrayList<VirtualNAS>();  try {    _log.info("discoverAccessZones for storage system {} - start",storageSystemId);    IsilonApi isilonApi=getIsilonDevice(storageSystem);    List<IsilonAccessZone> accessZoneList=isilonApi.getAccessZones(null);    if (accessZoneList == null || accessZoneList.isEmpty()) {      IsilonCollectionException ice=new IsilonCollectionException("discoverAccessZones failed. No Zones defined");      throw ice;    }    List<IsilonNetworkPool> isilonNetworkPoolsSysAZ=new ArrayList<>();    List<IsilonNetworkPool> isilonNetworkPoolList=discoverNetworkPools(storageSystem);    for (    IsilonNetworkPool isilonNetworkPool : isilonNetworkPoolList) {      if (isilonNetworkPool.getAccess_zone().equalsIgnoreCase(SYSTEM_ACCESS_ZONE_NAME)) {        isilonNetworkPoolsSysAZ.add(isilonNetworkPool);      }    }    StringSet protocols=new StringSet();    protocols.add(CIFS);    boolean isNfsV4Enabled=isilonApi.nfsv4Enabled(storageSystem.getFirmwareVersion());    if (VersionChecker.verifyVersionDetails(ONEFS_V7_2,storageSystem.getFirmwareVersion()) >= 0) {      protocols.add(NFS);      if (isNfsV4Enabled) {        protocols.add(NFSv4);      }    }    List<IsilonNetworkPool> isilonNetworkPools=null;    for (    IsilonAccessZone isilonAccessZone : accessZoneList) {      isilonNetworkPools=null;      if (isilonAccessZone.isSystem() == false) {        _log.info("Process the user defined access zone {} ",isilonAccessZone.toString());        isilonNetworkPools=new ArrayList<IsilonNetworkPool>();        for (        IsilonNetworkPool eachNetworkPool : isilonNetworkPoolList) {          if (eachNetworkPool.getAccess_zone().equalsIgnoreCase(isilonAccessZone.getName())) {            isilonNetworkPools.add(eachNetworkPool);          }        }        virtualNAS=findvNasByNativeId(storageSystem,isilonAccessZone.getZone_id().toString());        if (virtualNAS == null) {          if (isilonNetworkPools != null && !isilonNetworkPools.isEmpty()) {            virtualNAS=createVirtualNas(storageSystem,isilonAccessZone);            newvNASList.add(virtualNAS);          }        } else {          copyUpdatedPropertiesInVNAS(storageSystem,isilonAccessZone,virtualNAS);          existingvNASList.add(virtualNAS);        }        setCifsServerMapForNASServer(isilonAccessZone,virtualNAS);        if (virtualNAS != null) {          virtualNAS.setProtocols(protocols);        }        setStoragePortsForNASServer(isilonNetworkPools,storageSystem,virtualNAS);      } else {        _log.info("Process the System access zone {} ",isilonAccessZone.toString());        StringSet protocolSet=new StringSet();        protocolSet.add(CIFS);        protocolSet.add(NFS);        if (isNfsV4Enabled) {          protocolSet.add(NFSv4);        }        physicalNAS=findPhysicalNasByNativeId(storageSystem,isilonAccessZone.getZone_id().toString());        if (physicalNAS == null) {          physicalNAS=createPhysicalNas(storageSystem,isilonAccessZone);          physicalNAS.setProtocols(protocolSet);          newPhysicalNASList.add(physicalNAS);        } else {          setMaxDbMetricsAz(storageSystem,physicalNAS.getMetrics());          existingPhysicalNASList.add(physicalNAS);        }        setCifsServerMapForNASServer(isilonAccessZone,physicalNAS);        setStoragePortsForNASServer(isilonNetworkPoolsSysAZ,storageSystem,physicalNAS);      }    }    if (newvNASList != null && !newvNASList.isEmpty()) {      if (physicalNAS != null) {        for (        VirtualNAS vNas : newvNASList) {          vNas.setParentNasUri(physicalNAS.getId());        }      }      _log.info("New Virtual NAS servers size {}",newvNASList.size());      _dbClient.createObject(newvNASList);      discoveredVNASList.addAll(newvNASList);    }    if (existingvNASList != null && !existingvNASList.isEmpty()) {      _log.info("Modified Virtual NAS servers size {}",existingvNASList.size());      _dbClient.updateObject(existingvNASList);      discoveredVNASList.addAll(existingvNASList);    }    if (existingPhysicalNASList != null && !existingPhysicalNASList.isEmpty()) {      _log.info("Modified Physical NAS servers size {}",existingPhysicalNASList.size());      _dbClient.updateObject(existingPhysicalNASList);    }    if (newPhysicalNASList != null && !newPhysicalNASList.isEmpty()) {      _log.info("New Physical NAS servers size {}",newPhysicalNASList.size());      _dbClient.createObject(newPhysicalNASList);    }    DiscoveryUtils.checkVirtualNasNotVisible(discoveredVNASList,_dbClient,storageSystemId);  } catch (  Exception e) {    _log.error("discoverAccessZones failed. Storage system: {}",storageSystemId,e);    IsilonCollectionException ice=new IsilonCollectionException("discoverAccessZones failed. Storage system: " + storageSystemId);    throw ice;  }}  }
class C{  private Pair<Integer,Integer> readImageSize(){  InputStream inputStream=null;  Pair<Integer,Integer> dimensions=null;  try {    inputStream=getInputStream();    dimensions=BitmapUtil.decodeDimensions(inputStream);    if (dimensions != null) {      mWidth=dimensions.first;      mHeight=dimensions.second;    }  }  finally {    if (inputStream != null) {      try {        inputStream.close();      } catch (      IOException e) {      }    }  }  return dimensions;}  }
class C{  public static String executeQuery(String[] cmd) throws IOException, InterruptedException {  return Command.execute(cmd).getOutput();}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.211 -0500",hash_original_method="50A11AE3C5EDA3B4603E1C2204F22ED8",hash_generated_method="F9A31F84ADBCA19B6043EA35A5DF9513") public final boolean readBoolean() throws IOException {  int temp=this.read();  if (temp < 0) {    throw new EOFException();  }  return ((temp + 0) == 1);}  }
class C{  public void save(){  projectBean.getJobConfiguration().getDataFileIds().clear();  projectBean.getJobConfiguration().getDataFileIds().addAll(getDataFileIds(selectionModel.getTarget()));}  }
class C{  public void addSink(TilePipe tilePipe,TileEntity tile,ForgeDirection dir){  networks.get(tilePipe.getNetworkID()).addSink(tile,dir.getOpposite());}  }
class C{  public void removePropertyChangeListener(String propertyName,PropertyChangeListener in_pcl){  beanContextChildSupport.removePropertyChangeListener(propertyName,in_pcl);}  }
class C{  public void mouseDragged(MouseEvent e){  if (down == null)   return;  VisualizationViewer<?,?> vv=(VisualizationViewer<?,?>)e.getSource();  boolean accepted=checkModifiers(e);  if (accepted) {    if (vv instanceof SatelliteVisualizationViewer) {      VisualizationViewer<?,?> vvMaster=((SatelliteVisualizationViewer<?,?>)vv).getMaster();      MutableTransformer modelTransformerMaster=vvMaster.getRenderContext().getMultiLayerTransformer().getTransformer(Layer.LAYOUT);      vv.setCursor(cursor);      Point2D center=vv.getRenderContext().getMultiLayerTransformer().transform(vvMaster.getRenderContext().getMultiLayerTransformer().inverseTransform(vvMaster.getCenter()));      Point2D q=down;      Point2D p=e.getPoint();      Point2D v1=new Point2D.Double(center.getX() - p.getX(),center.getY() - p.getY());      Point2D v2=new Point2D.Double(center.getX() - q.getX(),center.getY() - q.getY());      double theta=angleBetween(v1,v2);      modelTransformerMaster.rotate(-theta,vvMaster.getRenderContext().getMultiLayerTransformer().inverseTransform(Layer.VIEW,vvMaster.getCenter()));      down.x=e.getX();      down.y=e.getY();    }    e.consume();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:07.699 -0500",hash_original_method="092EDC6A6C17B41B7BF7C969F19C771C",hash_generated_method="C8C109FB41D5F2E9226B52F3558A6543") public ClientHello(HandshakeIODataStream in) throws IOException {  if (in.readUint8() != 1) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello");  }  client_version=new byte[2];  client_version[0]=(byte)in.readUint8();  client_version[1]=(byte)in.readUint8();  int cipher_spec_length=in.readUint16();  if (in.readUint16() != 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, cannot be used for resuming");  }  int challenge_length=in.readUint16();  if (challenge_length < 16) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, short challenge data");  }  session_id=EmptyArray.BYTE;  cipher_suites=new CipherSuite[cipher_spec_length / 3];  for (int i=0; i < cipher_suites.length; i++) {    byte b0=(byte)in.read();    byte b1=(byte)in.read();    byte b2=(byte)in.read();    cipher_suites[i]=CipherSuite.getByCode(b0,b1,b2);  }  compression_methods=new byte[]{0};  if (challenge_length < 32) {    Arrays.fill(random,0,32 - challenge_length,(byte)0);    System.arraycopy(in.read(challenge_length),0,random,32 - challenge_length,challenge_length);  } else   if (challenge_length == 32) {    System.arraycopy(in.read(32),0,random,0,32);  } else {    System.arraycopy(in.read(challenge_length),challenge_length - 32,random,0,32);  }  if (in.available() > 0) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect V2ClientHello, extra data");  }  this.length=38 + session_id.length + (cipher_suites.length << 1)+ compression_methods.length;}  }
class C{  public void remove(SchemaObject obj){  String objName=obj.getName();  Map<String,SchemaObject> map=getMap(obj.getType());  if (SysProperties.CHECK && !map.containsKey(objName)) {    DbException.throwInternalError("not found: " + objName);  }  map.remove(objName);  freeUniqueName(objName);}  }
class C{  public static void interconnect(Pin pinA,Pin pinB){  if (pinA != null)   pinA.setConnectedPin(pinB);  if (pinB != null)   pinB.setConnectedPin(pinA);}  }
class C{  public void testEmptySingletonNFAConcatenate(){  Automaton singleton=Automata.makeString("");  Automaton expandedSingleton=singleton;  Automaton nfa=Operations.union(Automata.makeString("this"),Automata.makeString("three"));  Automaton concat1=Operations.concatenate(expandedSingleton,nfa);  Automaton concat2=Operations.concatenate(singleton,nfa);  assertFalse(concat2.isDeterministic());  assertTrue(Operations.sameLanguage(Operations.determinize(concat1,100),Operations.determinize(concat2,100)));  assertTrue(Operations.sameLanguage(Operations.determinize(nfa,100),Operations.determinize(concat1,100)));  assertTrue(Operations.sameLanguage(Operations.determinize(nfa,100),Operations.determinize(concat2,100)));}  }
class C{  public static boolean inVisualRange(IGame game,Entity ae,Targetable target){  return inVisualRange(game,null,ae,target);}  }
class C{  @SuppressWarnings({"UnusedDeclaration"}) private void requestStart(String requestUri){}  }
class C{  @Override public void run(){  amIActive=true;  String areaHeader=null;  String slopeHeader=null;  String outputHeader=null;  int i;  int progress;  int row, col;  double slopeExponentValue=0;  double SCAExponent=0;  double z=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      areaHeader=args[i];    } else     if (i == 1) {      slopeHeader=args[i];    } else     if (i == 2) {      outputHeader=args[i];    } else     if (i == 3) {      SCAExponent=Double.parseDouble(args[i]);    } else     if (i == 4) {      slopeExponentValue=Double.parseDouble(args[i]);    }  }  if ((areaHeader == null) || (slopeHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (SCAExponent < 0.1) {      SCAExponent=0.1;    }    if (SCAExponent > 20) {      SCAExponent=20;    }    WhiteboxRaster slopeImage=new WhiteboxRaster(slopeHeader,"r");    int rows=slopeImage.getNumberRows();    int cols=slopeImage.getNumberColumns();    double slopeNoData=slopeImage.getNoDataValue();    WhiteboxRaster areaImage=new WhiteboxRaster(areaHeader,"r");    if (areaImage.getNumberRows() != rows || areaImage.getNumberColumns() != cols) {      showFeedback("The input images must be of the same dimensions.");      return;    }    double areaNoData=areaImage.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",areaHeader,WhiteboxRaster.DataType.FLOAT,areaNoData);    output.setPreferredPalette("spectrum.pal");    double[] area;    double[] slope;    for (row=0; row < rows; row++) {      area=areaImage.getRowValues(row);      slope=slopeImage.getRowValues(row);      for (col=0; col < cols; col++) {        if (area[col] != areaNoData && slope[col] != slopeNoData) {          z=(SCAExponent + 1) * Math.pow((area[col] / 22.13),SCAExponent) * Math.pow((Math.sin(Math.toRadians(slope[col])) / 0.0896),slopeExponentValue);          output.setValue(row,col,z);        } else {          output.setValue(row,col,areaNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    slopeImage.close();    areaImage.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public DTMIterator createDTMIterator(Object xpathCompiler,int pos){  return m_dtmManager.createDTMIterator(xpathCompiler,pos);}  }
class C{  ByteVector put11(final int b1,final int b2){  int length=this.length;  if (length + 2 > data.length) {    enlarge(2);  }  byte[] data=this.data;  data[length++]=(byte)b1;  data[length++]=(byte)b2;  this.length=length;  return this;}  }
class C{  static void appendLengthInfo(int numLetters,Version version,Mode mode,BitArray bits) throws WriterException {  int numBits=mode.getCharacterCountBits(version);  if (numLetters >= (1 << numBits)) {    throw new WriterException(numLetters + " is bigger than " + ((1 << numBits) - 1));  }  bits.appendBits(numLetters,numBits);}  }
class C{  public static boolean openUrls(List<String> urls){  boolean result=true;  for (  String url : urls) {    if (!openUrl(url)) {      result=false;    }  }  return result;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof GradientXYBarPainter)) {    return false;  }  GradientXYBarPainter that=(GradientXYBarPainter)obj;  if (this.g1 != that.g1) {    return false;  }  if (this.g2 != that.g2) {    return false;  }  if (this.g3 != that.g3) {    return false;  }  return true;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.139 -0500",hash_original_method="06A44958C70A8BD5DE7481C49C8C3731",hash_generated_method="26D03B2C4B8F57D7342AC8DE6B9B6539") private int peekType(boolean inDeclaration) throws IOException, XmlPullParserException {  if (position >= limit && !fillBuffer(1)) {    return END_DOCUMENT;  }switch (buffer[position]) {case '&':    return ENTITY_REF;case '<':  if (position + 3 >= limit && !fillBuffer(4)) {    throw new XmlPullParserException("Dangling <",this,null);  }switch (buffer[position + 1]) {case '/':  return END_TAG;case '?':if ((position + 5 < limit || fillBuffer(6)) && (buffer[position + 2] == 'x' || buffer[position + 2] == 'X') && (buffer[position + 3] == 'm' || buffer[position + 3] == 'M')&& (buffer[position + 4] == 'l' || buffer[position + 4] == 'L')&& (buffer[position + 5] == ' ')) {  return XML_DECLARATION;} else {  return PROCESSING_INSTRUCTION;}case '!':switch (buffer[position + 2]) {case 'D':return DOCDECL;case '[':return CDSECT;case '-':return COMMENT;case 'E':switch (buffer[position + 3]) {case 'L':return ELEMENTDECL;case 'N':return ENTITYDECL;}break;case 'A':return ATTLISTDECL;case 'N':return NOTATIONDECL;}throw new XmlPullParserException("Unexpected <!",this,null);default :return START_TAG;}case '%':return inDeclaration ? PARAMETER_ENTITY_REF : TEXT;default :return TEXT;}}  }
class C{  @RequestMapping(value=BUSINESS_OBJECT_DEFINITION_COLUMNS_URI_PREFIX + "/namespaces/{namespace}" + "/businessObjectDefinitionNames/{businessObjectDefinitionName}"+ "/businessObjectDefinitionColumnNames/{businessObjectDefinitionColumnName}",method=RequestMethod.PUT,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_BUSINESS_OBJECT_DEFINITION_COLUMNS_PUT) public BusinessObjectDefinitionColumn updateBusinessObjectDefinitionColumn(@PathVariable("namespace") String namespace,@PathVariable("businessObjectDefinitionName") String businessObjectDefinitionName,@PathVariable("businessObjectDefinitionColumnName") String businessObjectDefinitionColumnName,@RequestBody BusinessObjectDefinitionColumnUpdateRequest request){  return businessObjectDefinitionColumnService.updateBusinessObjectDefinitionColumn(new BusinessObjectDefinitionColumnKey(namespace,businessObjectDefinitionName,businessObjectDefinitionColumnName),request);}  }
class C{  public void timesEquals(Polynomial B){  double[] b=B.a;  double[] prod=new double[order + B.order + 1];  Arrays.fill(prod,0.0);  for (int i=0; i <= B.order; i++) {    for (int j=0; j <= order; j++) {      prod[i + j]+=b[i] * a[j];    }  }  a=prod;  order+=B.order;}  }
class C{  public void clearCoRoutine(boolean callDoTerminate){  if (null != m_incrementalSAXSource) {    if (callDoTerminate)     m_incrementalSAXSource.deliverMoreNodes(false);    m_incrementalSAXSource=null;  }}  }
class C{  public void removeAllProxies(DistributedMember member,Region<String,Object> monitoringRegion){  Set<Entry<String,Object>> entries=monitoringRegion.entrySet();  Iterator<Entry<String,Object>> entriesIt=entries.iterator();  if (logger.isDebugEnabled()) {    logger.debug("Removing {} proxies for member {}",entries.size(),member.getId());  }  while (entriesIt.hasNext()) {    String key=null;    Object val=null;    try {      Entry<String,Object> entry=entriesIt.next();      key=entry.getKey();      val=entry.getValue();      ObjectName mbeanName=ObjectName.getInstance(key);      removeProxy(member,mbeanName,val);    } catch (    Exception e) {      if (!(e.getCause() instanceof InstanceNotFoundException)) {        logger.warn("Remove Proxy failed for {} due to {}",key,e.getMessage(),e);      }      continue;    }  }}  }
class C{  public static final boolean even(int x){  return ((x & 0x1) == 0);}  }
class C{  public boolean tryEnterLock(long id,long timeout) throws InterruptedException {  return timeout == -1 ? lock(id).tryLock() : lock(id).tryLock(timeout,TimeUnit.MILLISECONDS);}  }
class C{  public long updateTtl(long elapsedTime){  this.ttl-=elapsedTime;  this.currentAnimTimeMillis+=elapsedTime;  if (this.currentAnimTimeMillis >= this.getUpdateTextureMillis() && this.animFrames > 0) {    this.currentAnimTimeMillis=0;    int pos=this.getTextPos();    pos++;    if (pos < this.animFrames) {      this.setTextPos(pos);    } else {      this.setTextPos(0);    }  }  return this.ttl;}  }
class C{  String removeProperty(String key,String defaultValue){  if (SysProperties.CHECK && !isKnownSetting(key)) {    DbException.throwInternalError(key);  }  Object x=prop.remove(key);  return x == null ? defaultValue : x.toString();}  }
class C{  public static boolean asBoolean(short[] array){  return array.length > 0;}  }
class C{  @Override public boolean test(@Nonnull final Notification notification){  if (notification != null && notification.getId().isPresent() && checkCategory(notification) && !isFull() && checkDuration(notification) && checkMatch(notification)) {    return notifications.add(notification);  }  return false;}  }
class C{  public static void main(String[] args){  Scanner input=new Scanner(System.in);  Account[] accounts=new Account[10];  initialBalance(accounts);  do {    System.out.print("Enter an id: ");    int id=input.nextInt();    if (isValidID(id,accounts)) {      int choice;      do {        choice=displayMainMenu(input);        if (isTransaction(choice)) {          executeTransaction(choice,accounts,id,input);        }      } while (choice != 4);    }  } while (true);}  }
class C{  private static String property(String string){  int length=string.length();  if (length == 0) {    return "";  } else   if (length == 1) {    return string.toLowerCase();  } else {    return string.substring(0,1).toLowerCase() + string.substring(1);  }}  }
class C{  public void highLight(int iNode){  Graphics2D g=(Graphics2D)this.getGraphics();  RenderingHints rh=new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);  rh.put(RenderingHints.KEY_RENDERING,RenderingHints.VALUE_RENDER_SPEED);  g.setRenderingHints(rh);  g.setPaintMode();  g.scale(m_fScale,m_fScale);  drawNode(g,iNode,HIGHLIGHTED);}  }
class C{  public boolean isPalindrome(ListNode head){  if (head == null || head.next == null) {    return true;  }  ListNode slow=head;  ListNode fast=head;  while (fast != null && fast.next != null) {    slow=slow.next;    fast=fast.next.next;  }  if (fast != null)   slow=slow.next;  slow=reverseList(slow);  while (slow != null && head.val == slow.val) {    head=head.next;    slow=slow.next;  }  return slow == null;}  }
class C{  public static Population readPopulation(String path2Population){  Scenario scenario=ScenarioUtils.createScenario(ConfigUtils.createConfig());  new PopulationReader(scenario).readFile(path2Population);  return scenario.getPopulation();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.146 -0500",hash_original_method="D60840A90A5B0A49A8865BA4D2E3CCDB",hash_generated_method="2A08F84E8DDA7BA51CCFD77423024341") public boolean isUsbMassStorageEnabled(){  try {    return mMountService.isUsbMassStorageEnabled();  } catch (  RemoteException rex) {    Log.e(TAG,"Failed to get UMS enable state",rex);  }  return false;}  }
class C{  public static String formatDurationWords(final long durationMillis,final boolean suppressLeadingZeroElements,final boolean suppressTrailingZeroElements){  String duration=formatDuration(durationMillis,"d' days 'H' hours 'm' minutes 's' seconds'");  if (suppressLeadingZeroElements) {    duration=" " + duration;    String tmp=StringUtils.replaceOnce(duration," 0 days","");    if (tmp.length() != duration.length()) {      duration=tmp;      tmp=StringUtils.replaceOnce(duration," 0 hours","");      if (tmp.length() != duration.length()) {        duration=tmp;        tmp=StringUtils.replaceOnce(duration," 0 minutes","");        duration=tmp;        if (tmp.length() != duration.length()) {          duration=StringUtils.replaceOnce(tmp," 0 seconds","");        }      }    }    if (duration.length() != 0) {      duration=duration.substring(1);    }  }  if (suppressTrailingZeroElements) {    String tmp=StringUtils.replaceOnce(duration," 0 seconds","");    if (tmp.length() != duration.length()) {      duration=tmp;      tmp=StringUtils.replaceOnce(duration," 0 minutes","");      if (tmp.length() != duration.length()) {        duration=tmp;        tmp=StringUtils.replaceOnce(duration," 0 hours","");        if (tmp.length() != duration.length()) {          duration=StringUtils.replaceOnce(tmp," 0 days","");        }      }    }  }  duration=" " + duration;  duration=StringUtils.replaceOnce(duration," 1 seconds"," 1 second");  duration=StringUtils.replaceOnce(duration," 1 minutes"," 1 minute");  duration=StringUtils.replaceOnce(duration," 1 hours"," 1 hour");  duration=StringUtils.replaceOnce(duration," 1 days"," 1 day");  return duration.trim();}  }
class C{  public ConstraintImplementation(final boolean result){  this.result=result;}  }
class C{  public void receive(boolean bit1,boolean bit2){  mBits=Long.rotateLeft(mBits,1);  mBits&=mMask;  if (bit1) {    mBits+=1;  }  mBits=Long.rotateLeft(mBits,1);  mBits&=mMask;  if (bit2) {    mBits+=1;  }  for (  ISyncProcessor processor : mSyncProcessors) {    processor.checkSync(mBits);  }}  }
class C{  @GET @Path("{name}") public String sayHello(@PathParam("name") String name){  return "Hello " + name + "!";}  }
class C{  public int addItemToEnd(String productId,BigDecimal amount,BigDecimal quantity,BigDecimal unitPrice,Timestamp reservStart,BigDecimal reservLength,BigDecimal reservPersons,String accommodationMapId,String accommodationSpotId,HashMap<String,GenericValue> features,HashMap<String,Object> attributes,String prodCatalogId,String itemType,LocalDispatcher dispatcher,Boolean triggerExternalOps,Boolean triggerPriceRules,Boolean skipInventoryChecks,Boolean skipProductChecks) throws CartItemModifyException, ItemNotFoundException {  return addItemToEnd(ShoppingCartItem.makeItem(null,productId,amount,quantity,unitPrice,reservStart,reservLength,reservPersons,accommodationMapId,accommodationSpotId,null,null,features,attributes,prodCatalogId,null,itemType,null,dispatcher,this,triggerExternalOps,triggerPriceRules,null,skipInventoryChecks,skipProductChecks));}  }
class C{  public Polygon2D removeDuplicates(float tolerance){  Vec2D prev=null;  for (Iterator<Vec2D> iv=vertices.iterator(); iv.hasNext(); ) {    Vec2D p=iv.next();    if (p.equalsWithTolerance(prev,tolerance)) {      iv.remove();    } else {      prev=p;    }  }  int num=vertices.size();  if (num > 0) {    Vec2D last=vertices.get(num - 1);    if (last.equalsWithTolerance(vertices.get(0),tolerance)) {      vertices.remove(last);    }  }  return this;}  }
class C{  public void reset(){  count=0;}  }
class C{  public static double angleDense(NumberVector v1,NumberVector v2){  final int dim1=v1.getDimensionality(), dim2=v2.getDimensionality();  final int mindim=(dim1 <= dim2) ? dim1 : dim2;  double cross=0, l1=0, l2=0;  for (int k=0; k < mindim; k++) {    final double r1=v1.doubleValue(k);    final double r2=v2.doubleValue(k);    cross+=r1 * r2;    l1+=r1 * r1;    l2+=r2 * r2;  }  for (int k=mindim; k < dim1; k++) {    final double r1=v1.doubleValue(k);    l1+=r1 * r1;  }  for (int k=mindim; k < dim2; k++) {    final double r2=v2.doubleValue(k);    l2+=r2 * r2;  }  final double a=(cross == 0.) ? 0. : (l1 == 0. || l2 == 0.) ? 1. : Math.sqrt((cross / l1) * (cross / l2));  return (a < 1.) ? a : 1.;}  }
class C{  public int emitJump(int opcode){  if (fatcode) {    if (opcode == goto_ || opcode == jsr) {      emitop4(opcode + goto_w - goto_,0);    } else {      emitop2(negate(opcode),8);      emitop4(goto_w,0);      alive=true;      pendingStackMap=needStackMap;    }    return cp - 5;  } else {    emitop2(opcode,0);    return cp - 3;  }}  }
class C{  public void close() throws IOException {  closeStartIfNecessary();  writer.close();}  }
class C{  public FacebookAuthorizationException(Throwable throwable){  super(throwable);}  }
class C{  @PUT @Path("/authorizedkey2") @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) public Response updateAuthorizedkey2(SSHKeyUpdateParam sshkey){  checkSecurityContext();  String authorizedkey2=sshkey.getSshKey();  if (!((StorageOSUser)_sc.getUserPrincipal()).isLocal()) {    throw APIException.forbidden.nonLocalUserNotAllowed();  } else {    if ((authorizedkey2 == null) || authorizedkey2.isEmpty()) {      throw new WebApplicationException(Response.status(Status.BAD_REQUEST).entity("Bad form paramters\n").build());    }    String username=_sc.getUserPrincipal().getName();    _logger.info("update authorizedkey2 for user {}",username);    try {      _passwordHandler.setUserAuthorizedkey2(username,authorizedkey2);    } catch (    Exception e) {      _logger.error("updateAuthorizedkey2",e);      throw APIException.internalServerErrors.updateObjectError("authorized key",e);    }    auditPassword(OperationTypeEnum.CHANGE_LOCAL_AUTHUSER_AUTHKEY,AuditLogManager.AUDITLOG_SUCCESS,null,username);    return Response.ok("Authorized Key Changed for = " + _sc.getUserPrincipal().getName() + "\n").build();  }}  }
class C{  private void updateBackgroundColorBasedOnTime(){  float mBackgroundColor=map(sunlightRatio,sunlightRatioMin,sunlightRatioMax,0.96f,0.29f);  float[] hsv={0.0f,0.0f,mBackgroundColor};  mCanvasPaint.setColor(Color.HSVToColor(hsv));}  }
class C{  public void addTimezonedDate(String tzid,ICalProperty property,ICalDate date){  timezonedDates.put(tzid,new TimezonedDate(date,property));}  }
class C{  public static void fillTaxonomy(TaxonomyWriter tw) throws IOException {  for (int i=0; i < categories.length; i++) {    int ordinal=tw.addCategory(new FacetLabel(categories[i]));    int expectedOrdinal=expectedPaths[i][expectedPaths[i].length - 1];    if (ordinal != expectedOrdinal) {      fail("For category " + showcat(categories[i]) + " expected ordinal "+ expectedOrdinal+ ", but got "+ ordinal);    }  }}  }
class C{  public void addArgument(String key,String[] value){  String[] v=new String[value.length];  if (post) {    int vlen=value.length;    for (int iter=0; iter < vlen; iter++) {      v[iter]=Util.encodeBody(value[iter]);    }    addArg(Util.encodeBody(key),v);  } else {    int vlen=value.length;    for (int iter=0; iter < vlen; iter++) {      v[iter]=Util.encodeUrl(value[iter]);    }    addArg(Util.encodeUrl(key),v);  }}  }
class C{  public GitlabMilestone updateMilestone(Serializable projectId,GitlabMilestone edited,String stateEvent) throws IOException {  return updateMilestone(projectId,edited.getId(),edited.getTitle(),edited.getDescription(),edited.getDueDate(),stateEvent);}  }
class C{  public void writeGraphFile(String filename){  int iterations=this.iterations.entrySet().size();  Map<String,double[]> arrayMap=new HashMap<String,double[]>();  for (  String identifier : this.operations)   arrayMap.put(identifier,new double[iterations]);  int iter=0;  for (  Entry<Integer,Map<String,Long>> entry : this.iterations.entrySet()) {    Map<String,Long> data=entry.getValue();    Map<String,List<String>> childrenMap=this.children.get(entry.getKey());    for (    String identifier : this.operations) {      Long startTime=data.get("BEGIN " + identifier);      Long endTime=data.get("END " + identifier);      if (startTime != null && endTime != null) {        double diff=(endTime.longValue() - startTime.longValue());        for (        String child : childrenMap.get(identifier)) {          Long childStartTime=data.get("BEGIN " + child);          Long childEndTime=data.get("END " + child);          diff-=(childEndTime.longValue() - childStartTime.longValue());        }        arrayMap.get(identifier)[iter]=diff / 1000.0;      } else       arrayMap.get(identifier)[iter]=0.0;    }    iter++;  }  String title="Computation time distribution per iteration";  String xAxisLabel="iteration";  String yAxisLabel="seconds";  String[] categories=new String[this.iterations.size()];  int index=0;  for (  int iteration : this.iterations.keySet()) {    categories[index]=String.valueOf(iteration);    index++;  }  StackedBarChart chart=new StackedBarChart(title,xAxisLabel,yAxisLabel,categories);  chart.addMatsimLogo();  chart.getChart().getCategoryPlot().getDomainAxis().setCategoryLabelPositions(CategoryLabelPositions.UP_90);  double[] iterationData=null;  for (  String operation : this.operations) {    double[] data=arrayMap.get(operation);    if (operation.equals(AbstractController.OPERATION_ITERATION)) {      iterationData=data;      continue;    } else {      chart.addSeries(operation,data);    }  }  if (iterationData != null) {    double[] otherData=new double[iterations];    System.arraycopy(iterationData,0,otherData,0,iterations);    chart.addSeries(OPERATION_OTHER,otherData);  }  chart.saveAsPng(filename + ".png",1024,768);}  }
class C{  public static Statement produce(Object... columns){  QueryStatement queryStmt=new QueryStatement();  queryStmt.statement.append("SELECT");  return queryStmt.processColumns(columns);}  }
class C{  public void put(long key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=ArrayUtils.idealIntArraySize(mSize + 1);      long[] nkeys=new long[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  public static Object distRejectEvent(String sessionID,String eventId,ScrDistreg scrDistReg,String entidad) throws DistributionException, SessionException, ValidationException {  Object result=null;  if (log.isDebugEnabled()) {    log.debug("distributionEx eventId [" + eventId + "]");  }  Validator.validate_String_NotNull_LengthMayorZero(sessionID,ValidationException.ATTRIBUTE_SESSION);  try {    CacheBag cacheBag=CacheFactory.getCacheInterface().getCacheEntry(sessionID);    AuthenticationUser user=(AuthenticationUser)cacheBag.get(HIBERNATE_Iuseruserhdr);    ScrOfic scrofic=(ScrOfic)cacheBag.get(HIBERNATE_ScrOfic);    RuleContext ruleCtx=new RuleContext();    ruleCtx=new RuleContext();    ruleCtx.setUsuario(user.getId().toString());    ruleCtx.setSessionId(sessionID);    ruleCtx.setEventId(eventId);    ruleCtx.setLibro(new Integer(scrDistReg.getIdArch()));    ruleCtx.setRegistro(new Integer(scrDistReg.getIdFdr()));    if (scrofic != null) {      ruleCtx.setOficina(scrofic.getId());    }    ruleCtx.setEntidad(entidad);    result=EventsFactory.getCurrentEvent(ruleCtx.getEventId()).execute(ruleCtx);  } catch (  EventException ee) {    log.error("Se ha producido un error durante la ejecucion del evento de rechazo de la distribucion [" + scrDistReg.getId() + "]");    throw ee;  }catch (  SessionException e) {    throw e;  }catch (  Exception e) {    log.error("Impossible to launch event for externe distribution for the session [" + sessionID + "]",e);    throw new DistributionException(DistributionException.ERROR_CANNOT_ACCEPT_DISTRIBUTION);  }  return result;}  }
class C{  public static float randGaussian(MersenneTwisterFast rand,float mean,float std){  return mean + std * (float)rand.nextGaussian();}  }
class C{  private String createDigest(final Credentials credentials) throws AuthenticationException {  String uri=getParameter("uri");  String realm=getParameter("realm");  String nonce=getParameter("nonce");  String method=getParameter("methodname");  String algorithm=getParameter("algorithm");  if (uri == null) {    throw new IllegalStateException("URI may not be null");  }  if (realm == null) {    throw new IllegalStateException("Realm may not be null");  }  if (nonce == null) {    throw new IllegalStateException("Nonce may not be null");  }  if (algorithm == null) {    algorithm="MD5";  }  String charset=getParameter("charset");  if (charset == null) {    charset="ISO-8859-1";  }  if (qopVariant == QOP_AUTH_INT) {    throw new AuthenticationException("Unsupported qop in HTTP Digest authentication");  }  MessageDigest md5Helper=createMessageDigest("MD5");  String uname=credentials.getUserPrincipal().getName();  String pwd=credentials.getPassword();  StringBuilder tmp=new StringBuilder(uname.length() + realm.length() + pwd.length()+ 2);  tmp.append(uname);  tmp.append(':');  tmp.append(realm);  tmp.append(':');  tmp.append(pwd);  String a1=tmp.toString();  if (algorithm.equalsIgnoreCase("MD5-sess")) {    String cnonce=getCnonce();    String tmp2=encode(md5Helper.digest(EncodingUtils.getBytes(a1,charset)));    StringBuilder tmp3=new StringBuilder(tmp2.length() + nonce.length() + cnonce.length()+ 2);    tmp3.append(tmp2);    tmp3.append(':');    tmp3.append(nonce);    tmp3.append(':');    tmp3.append(cnonce);    a1=tmp3.toString();  } else   if (!algorithm.equalsIgnoreCase("MD5")) {    throw new AuthenticationException("Unhandled algorithm " + algorithm + " requested");  }  String md5a1=encode(md5Helper.digest(EncodingUtils.getBytes(a1,charset)));  String a2=null;  if (qopVariant == QOP_AUTH_INT) {  } else {    a2=method + ':' + uri;  }  String md5a2=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(a2)));  String serverDigestValue;  if (qopVariant == QOP_MISSING) {    StringBuilder tmp2=new StringBuilder(md5a1.length() + nonce.length() + md5a2.length());    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  } else {    String qopOption=getQopVariantString();    String cnonce=getCnonce();    StringBuilder tmp2=new StringBuilder(md5a1.length() + nonce.length() + NC.length()+ cnonce.length()+ qopOption.length()+ md5a2.length()+ 5);    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(NC);    tmp2.append(':');    tmp2.append(cnonce);    tmp2.append(':');    tmp2.append(qopOption);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  }  String serverDigest=encode(md5Helper.digest(EncodingUtils.getAsciiBytes(serverDigestValue)));  return serverDigest;}  }
class C{  public MariaDbStatement(MariaDbConnection connection,int resultSetScrollType){  this.protocol=connection.getProtocol();  this.connection=connection;  this.resultSetScrollType=resultSetScrollType;  this.lock=this.connection.lock;  this.options=this.protocol.getOptions();}  }
class C{  private ODGFigure createPathFigure(BezierPath[] paths,Map<AttributeKey,Object> a) throws IOException {  ODGPathFigure figure=new ODGPathFigure();  figure.removeAllChildren();  for (  BezierPath p : paths) {    ODGBezierFigure bezier=new ODGBezierFigure();    bezier.setBezierPath(p);    figure.add(bezier);  }  figure.setAttributes(a);  return figure;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  float x=event.getX();  float y=event.getY();switch (event.getAction()) {case MotionEvent.ACTION_DOWN:{      return true;    }case MotionEvent.ACTION_UP:{    if (mButtonRegion.contains((int)x,(int)y)) {      if (onClickListener != null)       onClickListener.onClick(this);    }  }break;default :break;}return super.onTouchEvent(event);}  }
class C{  public void deleteEntities(List<? extends TaggedLogAPIEntity> entities,EntityDefinition entityDef) throws Exception {  final List<byte[]> rowkeys=RowkeyHelper.getRowkeysByEntities(entities,entityDef);  deleteRowkeys(rowkeys);}  }
class C{  public boolean isAsync(){  return getHeader().isAsync();}  }
class C{  public String globalInfo(){  return "Voted ML-HARAM. " + "For more information see:\n" + getTechnicalInformation().toString();}  }
class C{  public final ByteArrayBuilder append(byte[] bytes){  for (  byte b : bytes) {    buffer.add(b);  }  return this;}  }
class C{  @DSComment("Potential intent to trigger other processing") @DSSafe(DSCat.INTENT_EXCHANGE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:09.514 -0500",hash_original_method="5B5979B9E2BB6EA8D0974FC96788F02A",hash_generated_method="9CF7F62F974438343F82E84474D2AC00") public Intent putExtra(String name,CharSequence[] value){  mExtras.put(name,value);  return this;}  }
class C{  public String normalizeSystemName(String systemName){  return (AcelaAddress.normalizeSystemName(systemName));}  }
class C{  public boolean isBracket(char character){  for (int index=0; index < JAVA_BRACKETS.length; index++) {    if (JAVA_BRACKETS[index] == character)     return true;  }  return false;}  }
class C{  @Override void decode(final byte[] in,int inPos,final int inAvail,final Context context){  if (context.eof) {    return;  }  if (inAvail < 0) {    context.eof=true;  }  for (int i=0; i < inAvail; i++) {    final byte[] buffer=ensureBufferSize(decodeSize,context);    final byte b=in[inPos++];    if (b == pad) {      context.eof=true;      break;    } else {      if (b >= 0 && b < DECODE_TABLE.length) {        final int result=DECODE_TABLE[b];        if (result >= 0) {          context.modulus=(context.modulus + 1) % BYTES_PER_ENCODED_BLOCK;          context.ibitWorkArea=(context.ibitWorkArea << BITS_PER_ENCODED_BYTE) + result;          if (context.modulus == 0) {            buffer[context.pos++]=(byte)((context.ibitWorkArea >> 16) & MASK_8BITS);            buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);            buffer[context.pos++]=(byte)(context.ibitWorkArea & MASK_8BITS);          }        }      }    }  }  if (context.eof && context.modulus != 0) {    final byte[] buffer=ensureBufferSize(decodeSize,context);switch (context.modulus) {case 1:      break;case 2:    context.ibitWorkArea=context.ibitWorkArea >> 4;  buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;case 3:context.ibitWorkArea=context.ibitWorkArea >> 2;buffer[context.pos++]=(byte)((context.ibitWorkArea >> 8) & MASK_8BITS);buffer[context.pos++]=(byte)((context.ibitWorkArea) & MASK_8BITS);break;default :throw new IllegalStateException("Impossible modulus " + context.modulus);}}}  }
class C{  public void close(){  if (open) {    open=false;  }}  }
class C{  private void raiseIOException(String host,int port,String protocol){  IOExceptionEvent ioError=new IOExceptionEvent(this,host,port,protocol);  sipProvider.handleEvent(ioError,null);  setState(SIPDialog.TERMINATED_STATE);}  }
class C{  public AppContext createCustomer(AUTH_MODE authMode,String customerName,String defaultLocale,String salt,String userLogin,String userPassword,String userEmail,List<Client> clients){  Customer customer=new Customer(customerName);  customer.setDefaultLocale(defaultLocale);  customer.setMD5Salt(salt);  customer.setAuthMode(authMode);  if (StringUtils.isEmpty(userLogin)) {    if (!StringUtils.isEmpty(userEmail)) {      userLogin=userEmail;    } else {      throw new IllegalArgumentException("user email and login cannot be both empty");    }  }  return createCustomer(customer,userLogin,userPassword,userEmail,clients);}  }
class C{  public final void quit(){  encoderDone.set(true);}  }
class C{  public Assignment(String var,double[] val){  this();  map.put(var,ValueFactory.create(val));}  }
class C{  private ArchivedDesktopComponent(final ArchivedComponent parent,final org.simbrain.workspace.gui.GuiComponent<?> dc){  this.className=dc.getClass().getCanonicalName();  this.format=dc.getWorkspaceComponent().getDefaultFormat();  this.uri="guis/" + parent.id + '_'+ parent.name.replaceAll("\\s","_")+ '.'+ format;}  }
class C{  public static NodeResponse send(InternalDistributedMember recipient,PartitionedRegion r,int bucketId,int bucketSize,boolean forceCreation) throws ForceReattemptException {  Assert.assertTrue(recipient != null,"ManageBucketMessage NULL recipient");  NodeResponse p=new NodeResponse(r.getSystem(),recipient);  ManageBucketMessage m=new ManageBucketMessage(recipient,r.getPRId(),p,bucketId,bucketSize,forceCreation);  p.enableSevereAlertProcessing();  Set failures=r.getDistributionManager().putOutgoing(m);  if (failures != null && failures.size() > 0) {    throw new ForceReattemptException(LocalizedStrings.ManageBucketMessage_FAILED_SENDING_0.toLocalizedString(m));  }  return p;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void accept(final ClassVisitor cv){  String[] exceptions=new String[this.exceptions.size()];  this.exceptions.toArray(exceptions);  MethodVisitor mv=cv.visitMethod(access,name,desc,signature,exceptions);  if (mv != null) {    accept(mv);  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void removeDataSource(String name) throws ExpressionException, SecurityException {  checkWriteAccess();  if (name == null || name.length() == 0)   throw new ExpressionException("name for Datasource Connection can be a empty value");  Element datasources=_getRootElement("data-sources");  Element[] children=XMLConfigWebFactory.getChildren(datasources,"data-source");  for (int i=0; i < children.length; i++) {    String n=children[i].getAttribute("name");    if (n != null && n.equalsIgnoreCase(name)) {      datasources.removeChild(children[i]);    }  }}  }
class C{  protected void restoreResourceAttributes(IResource resource) throws CoreException {  if (modificationStamp != IResource.NULL_STAMP) {    resource.revertModificationStamp(modificationStamp);  }  if (localTimeStamp != IResource.NULL_STAMP) {    resource.setLocalTimeStamp(localTimeStamp);  }  if (resourceAttributes != null) {    resource.setResourceAttributes(resourceAttributes);  }  if (markerDescriptions != null) {    for (int i=0; i < markerDescriptions.length; i++) {      if (markerDescriptions[i].resource.exists())       markerDescriptions[i].createMarker();    }  }}  }
class C{  public void removeEffector(Effector effector){  data.remove(effector);  fireTableDataChanged();}  }
class C{  public static void loadTestEngine() throws Exception {  long testEngine=NativeCrypto.ENGINE_by_id(TEST_ENGINE_ID);  if (testEngine != 0) {    NativeCrypto.ENGINE_finish(testEngine);    return;  }  NativeCrypto.ENGINE_load_dynamic();  long dynEngine=NativeCrypto.ENGINE_by_id("dynamic");  try {    ClassLoader loader=NativeCryptoTest.class.getClassLoader();    final String libraryPaths;    libraryPaths=System.getProperty("java.library.path");    assertNotNull(libraryPaths);    String[] libraryPathArray=libraryPaths.split(":");    for (    String path : libraryPathArray) {      assertEquals(1,NativeCrypto.ENGINE_ctrl_cmd_string(dynEngine,"DIR_ADD",path,0));    }    assertEquals(1,NativeCrypto.ENGINE_ctrl_cmd_string(dynEngine,"LIST_ADD","2",0));    assertEquals(1,NativeCrypto.ENGINE_ctrl_cmd_string(dynEngine,"ID",TEST_ENGINE_ID,0));    assertEquals(1,NativeCrypto.ENGINE_ctrl_cmd_string(dynEngine,"LOAD",null,0));  }  finally {    NativeCrypto.ENGINE_finish(dynEngine);  }  testEngine=NativeCrypto.ENGINE_by_id(TEST_ENGINE_ID);  if (testEngine == 0) {    fail("could not load test engine");  }  NativeCrypto.ENGINE_finish(testEngine);}  }
class C{  public EmptyTransition(){}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void append(StringBuffer buffer,String fieldName,Object[] array,Boolean fullDetail){  appendFieldStart(buffer,fieldName);  if (array == null) {    appendNullText(buffer,fieldName);  } else   if (isFullDetail(fullDetail)) {    appendDetail(buffer,fieldName,array);  } else {    appendSummary(buffer,fieldName,array);  }  appendFieldEnd(buffer,fieldName);}  }
class C{  private static URL toURL(String url,int port) throws MalformedURLException {  URL u=HTTPUtil.toURL(url,true);  if (port == -1)   return u;  return new URL(u.getProtocol(),u.getHost(),port,u.getFile());}  }
class C{  JapaneseImperialCalendar(TimeZone zone,Locale aLocale){  super(zone,aLocale);  jdate=jcal.newCalendarDate(zone);  setTimeInMillis(System.currentTimeMillis());}  }
class C{  private void initialize(){  this.setTitle(Constant.messages.getString("filter.changeua.title"));  this.setContentPane(getJPanel());  if (Model.getSingleton().getOptionsParam().getViewParam().getWmUiHandlingOption() == 0) {    this.setSize(375,173);  }  this.setPreferredSize(new Dimension(375,173));  for (int i=0; i < FilterChangeUserAgent.userAgentName.length; i++) {    cmbUserAgent.addItem(FilterChangeUserAgent.userAgentName[i]);  }  this.pack();}  }
class C{  public T caseFeatureCall(FeatureCall object){  return null;}  }
class C{  public String authority(){  String authority=this.authority;  if (authority != null) {    return authority;  }  if (isGroup()) {    authority="group:" + groupName;  } else   if (port != 0) {    authority=host() + ':' + port;  } else {    authority=host();  }  return this.authority=authority;}  }
class C{  public Prototype loadFunction(LuaString p) throws IOException {  Prototype f=new Prototype();  f.linedefined=loadInt();  f.lastlinedefined=loadInt();  f.numparams=is.readUnsignedByte();  f.is_vararg=is.readUnsignedByte();  f.maxstacksize=is.readUnsignedByte();  f.code=loadIntArray();  loadConstants(f);  loadUpvalues(f);  loadDebug(f);  return f;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:05.365 -0500",hash_original_method="F505CF72442DFA261366294723957A53",hash_generated_method="2DF82D557CA317A548AA78057765CD2E") public boolean startWifi(){  try {    mService.startWifi();    return true;  } catch (  RemoteException e) {    return false;  }}  }
class C{  static void checkUnqualifiedName(int version,final String name,final String msg){  if ((version & 0xFFFF) < Opcodes.V1_5) {    checkIdentifier(name,msg);  } else {    for (int i=0; i < name.length(); ++i) {      if (".;[/".indexOf(name.charAt(i)) != -1) {        throw new IllegalArgumentException("Invalid " + msg + " (must be a valid unqualified name): "+ name);      }    }  }}  }
class C{  public JobInfo createJob(String sobjectType,BulkConnection bulkConnection,OperationEnum operation) throws AsyncApiException {  JobInfo job=new JobInfo();  job.setObject(sobjectType);  job.setOperation(operation);  job.setContentType(ContentType.CSV);  job=bulkConnection.createJob(job);  return job;}  }
class C{  protected boolean isFalseOrUnknown(ConditionExpression expr){  if (expr instanceof ConstantExpression) {    Boolean value=getBooleanObject((ConstantExpression)expr);    return ((value == null) || (value == Boolean.FALSE));  } else   if (expr instanceof LogicalFunctionCondition) {    LogicalFunctionCondition lfun=(LogicalFunctionCondition)expr;    String fname=lfun.getFunction();    if ("and".equals(fname)) {      return (isFalseOrUnknown(lfun.getLeft()) || isFalseOrUnknown(lfun.getRight()));    } else     if ("or".equals(fname)) {      return (isFalseOrUnknown(lfun.getLeft()) && isFalseOrUnknown(lfun.getRight()));    } else     if ("not".equals(fname)) {      return isTrueOrUnknown(lfun.getOperand());    }  } else   if (expr instanceof AnyCondition) {    ExpressionNode inner=getSubqueryColumn(((AnyCondition)expr).getSubquery());    if (inner instanceof ConditionExpression)     return isFalseOrUnknown((ConditionExpression)inner);  }  return false;}  }
class C{  public void delete(Long projectId){  Project targetProject=Project.find.byId(projectId);  targetProject.webhooks.remove(this);  targetProject.update();  super.delete();}  }
class C{  private Set<String> fetchTieringPoliciesForHDS(StorageSystem device){  Set<String> policyNameSet=new HashSet<String>();  URIQueryResultList tieringPolicyResult=new URIQueryResultList();  _objectCache.getDbClient().queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceFASTPolicyConstraint(device.getId()),tieringPolicyResult);  Iterator<URI> tieringPolicyItr=tieringPolicyResult.iterator();  while (tieringPolicyItr.hasNext()) {    AutoTieringPolicy tierPolicy=_objectCache.queryObject(AutoTieringPolicy.class,tieringPolicyItr.next());    if (null != tierPolicy && tierPolicy.getPolicyEnabled()) {      policyNameSet.add(tierPolicy.getPolicyName());    }  }  return policyNameSet;}  }
class C{  @Nullable private Object toObject(Class cls,int idx) throws ClassNotFoundException {  String arg=argument(idx);  if (cls == Collection.class || cls == Set.class) {    Class<?> itemsCls=Class.forName(arg);    Collection<Object> res=cls == Collection.class ? new ArrayList<>() : new HashSet<>();    String items=argument(idx + 1);    if (items != null) {      for (      String item : items.split(";"))       res.add(toSimpleObject(itemsCls,item));    }    return res;  }  if (cls == IgniteBiTuple.class) {    Class<?> keyCls=Class.forName(arg);    String valClsName=argument(idx + 1);    assert valClsName != null;    Class<?> valCls=Class.forName(valClsName);    return new IgniteBiTuple<>(toSimpleObject(keyCls,(String)argument(idx + 2)),toSimpleObject(valCls,(String)argument(idx + 3)));  }  if (cls == Map.class) {    Class<?> keyCls=Class.forName(arg);    String valClsName=argument(idx + 1);    assert valClsName != null;    Class<?> valCls=Class.forName(valClsName);    Map<Object,Object> res=new HashMap<>();    String entries=argument(idx + 2);    if (entries != null) {      for (      String entry : entries.split(";")) {        if (entry.length() > 0) {          String[] values=entry.split("=");          assert values.length >= 1;          res.put(toSimpleObject(keyCls,values[0]),values.length > 1 ? toSimpleObject(valCls,values[1]) : null);        }      }    }    return res;  }  if (cls == GridTuple3.class) {    String v2ClsName=argument(idx + 1);    String v3ClsName=argument(idx + 2);    assert v2ClsName != null;    assert v3ClsName != null;    Class<?> v1Cls=Class.forName(arg);    Class<?> v2Cls=Class.forName(v2ClsName);    Class<?> v3Cls=Class.forName(v3ClsName);    return new GridTuple3<>(toSimpleObject(v1Cls,(String)argument(idx + 3)),toSimpleObject(v2Cls,(String)argument(idx + 4)),toSimpleObject(v3Cls,(String)argument(idx + 5)));  }  return toSimpleObject(cls,arg);}  }
class C{  public void writeTimerReport(XMLWriter writer){  writer.writeOpenTag("report");  writer.writeOpenTag("property",new Attribute.Default<String>("name","timer"));  writer.writeIDref("mcmc","mcmc");  writer.writeCloseTag("property");  writer.writeCloseTag("report");}  }
class C{  public long blocked(){  return Long.parseLong(fields[31]);}  }
class C{  @Override public V put(K key,V value){  Object _key=key;  Object _value=value;  if (_key == null) {    _key=NULL_OBJECT;  }  if (_value == null) {    _value=NULL_OBJECT;  }  int index=findIndex(_key,elementData);  if (elementData[index] != _key) {    modCount++;    if (++size > threshold) {      rehash();      index=findIndex(_key,elementData);    }    elementData[index]=_key;    elementData[index + 1]=null;  }  Object result=elementData[index + 1];  elementData[index + 1]=_value;  return massageValue(result);}  }
class C{  public static ColorMatrixRable buildSaturate(float s){  ColorMatrixRable8Bit filter=new ColorMatrixRable8Bit();  filter.type=TYPE_SATURATE;  filter.matrix=new float[][]{{0.213f + 0.787f * s,0.715f - 0.715f * s,0.072f - 0.072f * s,0,0},{0.213f - 0.213f * s,0.715f + 0.285f * s,0.072f - 0.072f * s,0,0},{0.213f - 0.213f * s,0.715f - 0.715f * s,0.072f + 0.928f * s,0,0},{0,0,0,1,0}};  return filter;}  }
class C{  public static String BinToChar(String bin){  char value[]=new char[bin.length() / 8];  int binLength=value.length;  for (int i=0; i < binLength; i++)   value[i]=(char)Integer.parseInt(bin.substring(8 * i,8 * i + 8),2);  return new String(value);}  }
class C{  public void testPropertySubsets() throws Exception {  TungstenProperties superSet=new TungstenProperties();  superSet.setString("a.keep.s1","string 1");  superSet.setString("a.remove.s2","string 2");  superSet.setString("a.keepString1","foo");  superSet.setString("a.string1.keep","bar");  TungstenProperties subset0=superSet.subset("a.keep..",false);  TungstenProperties subset1=superSet.subset("a.keep.",false);  TungstenProperties subset2=superSet.subset("a.keep.",true);  TungstenProperties subset3=superSet.subset("a.",true);  Assert.assertEquals("subset 0 has no properties",0,subset0.size());  Assert.assertEquals("subset 1 has 1 property",1,subset1.size());  Assert.assertEquals("subset 1 key untruncated","string 1",subset1.getString("a.keep.s1"));  Assert.assertEquals("subset 2 has 1 property",1,subset2.size());  Assert.assertEquals("subset 2 key truncated","string 1",subset2.getString("s1"));  Assert.assertEquals("subset 3 has 4 properties",4,subset3.size());  Assert.assertEquals("subset 3 key truncated","string 1",subset3.getString("keep.s1"));  subset3.subset("remove",true,true);  assertEquals("subset 3 has 3 properties left",3,subset3.size());  subset3.subset("",false,true);  assertTrue("subset 3 should be empty",subset3.isEmpty());}  }
class C{  private static boolean isDominated(SortingObject i1,SortingObject i2){  double[] pv1=i1.values;  double[] pv2=i2.values;  double[][] performances=new double[pv1.length][2];  for (int p=0; p < performances.length; p++) {    performances[p][0]=pv1[p];    performances[p][1]=pv2[p];  }  boolean dominated=true;  for (int p=0; p < performances.length; p++) {    dominated&=(performances[p][1] >= performances[p][0]);  }  boolean oneActuallyBetter=false;  for (int p=0; p < performances.length; p++) {    oneActuallyBetter|=(performances[p][1] > performances[p][0]);  }  dominated&=oneActuallyBetter;  return dominated;}  }
class C{  public void showPopupDialog(Component c){  Rectangle componentPos=c.getSelectedRect();  componentPos.setX(componentPos.getX() - c.getScrollX());  componentPos.setY(componentPos.getY() - c.getScrollY());  showPopupDialog(componentPos);}  }
class C{  void init() throws SSLException {  if (sslEngine != null) {    return;  }  LOGGER.debug("{} Initializing the SSL Handler",sslFilter.getSessionInfo(session));  InetSocketAddress peer=(InetSocketAddress)session.getAttribute(SslFilter.PEER_ADDRESS);  if (peer == null) {    sslEngine=sslFilter.sslContext.createSSLEngine();  } else {    sslEngine=sslFilter.sslContext.createSSLEngine(peer.getHostName(),peer.getPort());  }  sslEngine.setUseClientMode(sslFilter.isUseClientMode());  if (!sslEngine.getUseClientMode()) {    if (sslFilter.isWantClientAuth()) {      sslEngine.setWantClientAuth(true);    }    if (sslFilter.isNeedClientAuth()) {      sslEngine.setNeedClientAuth(true);    }  }  if (sslFilter.getEnabledCipherSuites() != null) {    sslEngine.setEnabledCipherSuites(sslFilter.getEnabledCipherSuites());  }  if (sslFilter.getEnabledProtocols() != null) {    sslEngine.setEnabledProtocols(sslFilter.getEnabledProtocols());  }  sslEngine.beginHandshake();  handshakeStatus=sslEngine.getHandshakeStatus();  writingEncryptedData=false;  firstSSLNegociation=true;  handshakeComplete=false;  if (LOGGER.isDebugEnabled()) {    LOGGER.debug("{} SSL Handler Initialization done.",sslFilter.getSessionInfo(session));  }}  }
class C{  private SystemManagementService init(){  try {    this.localManager=new LocalManager(repo,system,this,cache);    this.localManager.startManager();    this.listener=new ManagementMembershipListener(this);    system.getDistributionManager().addMembershipListener(listener);    isStarted=true;    return this;  } catch (  CancelException e) {    throw e;  }catch (  Exception e) {    logger.error(e.getMessage(),e);    throw new ManagementException(e);  }}  }
class C{  public static String doubleArrayToString(final double[] data){  String ret=new String(" ");  for (int i=0; i < data.length; i++) {    String num=round(data[i],2);    if (i == 0) {      ret=ret + num;    } else {      ret=ret + ", " + num;    }  }  return ret;}  }
class C{  public static int compare(double left,String right){  return -compare(right,left);}  }
class C{  private void handleHttpMessageEvent(MessageEvent messageEvent){  String nodeId=messageEvent.getSourceNodeId();  DataMap dataMap=DataMap.fromByteArray(messageEvent.getData());  String requestId=dataMap.get(WearHttpHelper.KEY_REQUEST_ID);  String url=dataMap.get(WearHttpHelper.KEY_URL);  String method=dataMap.get(WearHttpHelper.KEY_METHOD_TYPE);  String charset=dataMap.get(WearHttpHelper.KEY_CHARSET);  if (TextUtils.isEmpty(method)) {    method=WearHttpHelper.METHOD_GET;  }  String query=dataMap.get(WearHttpHelper.KEY_QUERY_PARAMS);  for (  WearConsumer consumer : mWearConsumers) {    consumer.onWearableHttpRequestReceived(url,method,query,charset,nodeId,requestId);  }}  }
class C{  public Map<String,String> headers(){  if (_headers == null)   parseHead();  return _headers;}  }
class C{  public SVGFeBlendElementBridge(){}  }
class C{  private void insertDbLog4JConfigurationFromResourceLocation(String resourceLocation,int monitorInterval,Path outputPath,String log4jConfigurationColumn,String configEntityKey) throws Exception {  String log4JFileContents=IOUtils.toString(resourceLoader.getResource(resourceLocation).getInputStream());  log4JFileContents=log4JFileContents.replace(LOG4J_FILENAME_TOKEN,outputPath.toAbsolutePath().toString().replace("\\","/"));  log4JFileContents=log4JFileContents.replace("monitorInterval=\"0\"","monitorInterval=\"" + String.valueOf(monitorInterval) + "\"");  String sql=String.format("INSERT INTO %s (%s, %s) VALUES (?,?)",ConfigurationEntity.TABLE_NAME,ConfigurationEntity.COLUMN_KEY,log4jConfigurationColumn);  executePreparedStatement(sql,configEntityKey,log4JFileContents);}  }
class C{  public String(byte[] data){  this(data,0,data.length);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public void invDctNxN(double[][] dcts,int[][] pixels){  int u=0;  int v=0;  double two_over_sqrtncolsnrows=2.0 / Math.sqrt((double)this.N * this.M);  double[][] tmp=null;  tmp=new double[this.N][this.N];  for (u=0; u < this.N; u++) {    for (v=0; v < this.M; v++) {      tmp[u][v]=dcts[u][v];    }  }  for (u=0; u <= this.M - 1; u++) {    invFctNoScale(tmp[u]);  }  for (v=0; v <= this.N - 1; v++) {    for (u=0; u <= this.M - 1; u++) {      this.nxnTmp[u]=tmp[u][v];    }    invFctNoScale(this.nxnTmp);    for (u=0; u <= this.M - 1; u++) {      tmp[u][v]=this.nxnTmp[u] * two_over_sqrtncolsnrows;    }  }  for (u=0; u < this.N; u++) {    for (v=0; v < this.M; v++) {      pixels[u][v]=ImageUtil.pixelRange((int)(tmp[u][v] + 128.5));    }  }  tmp=null;}  }
class C{  private static boolean anchorIsTarget(TrustAnchor anchor,CertSelector sel){  X509Certificate anchorCert=anchor.getTrustedCert();  if (anchorCert != null) {    return sel.match(anchorCert);  }  return false;}  }
class C{  protected boolean isDescendant(int identity){  return (_parent(identity) >= _startNode) || (_startNode == identity);}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public static Number rightShiftUnsigned(Number self,Number operand){  return NumberMath.rightShiftUnsigned(self,operand);}  }
class C{  void verify(){  byte[] d=digest.digest();  if (!MessageDigest.isEqual(d,Base64.decode(hash,Base64.DEFAULT))) {    throw invalidDigest(JarFile.MANIFEST_NAME,name,jarName);  }  verifiedEntries.put(name,certificates);}  }
class C{  public static AlteredCharSequence make(CharSequence source,char[] sub,int substart,int subend){  if (source instanceof Spanned)   return new AlteredSpanned(source,sub,substart,subend); else   return new AlteredCharSequence(source,sub,substart,subend);}  }
class C{  public void handleHREF(Image image,Element imageElement,SVGGeneratorContext generatorContext) throws SVGGraphics2DIOException {  if (image == null)   throw new SVGGraphics2DRuntimeException(ERR_IMAGE_NULL);  int width=image.getWidth(null);  int height=image.getHeight(null);  if (width == 0 || height == 0) {    handleEmptyImage(imageElement);  } else {    if (image instanceof RenderedImage) {      handleHREF((RenderedImage)image,imageElement,generatorContext);    } else {      BufferedImage buf=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);      Graphics2D g=buf.createGraphics();      g.drawImage(image,0,0,null);      g.dispose();      handleHREF((RenderedImage)buf,imageElement,generatorContext);    }  }}  }
class C{  private void updateZoomScale(boolean centerView){  double scale=((SpinnerNumberModel)zoomSelector.getModel()).getNumber().doubleValue();  if (centerView) {    Coord center=gui.getCenterViewCoord();    this.pf.setScale(scale);    gui.centerViewAt(center);  } else {    this.pf.setScale(scale);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public ChunkedInputStream(InputStream in,boolean raw) throws IOException {  super(in);  this.raw=raw;  readChunk();}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  public boolean absolute(int row) throws SQLException {  return crsInternal.absolute(row);}  }
class C{  void concurrentModification(){  FacesContext ctx=FacesContext.getCurrentInstance();  ctx.getApplication().getNavigationHandler().handleNavigation(ctx,"",CONCURRENT_MODIFICATION_ERROR);  ctx.responseComplete();}  }
class C{  public ImmutableClassToInstanceMap<B> build(){  ImmutableMap<Class<? extends B>,B> map=mapBuilder.build();  if (map.isEmpty()) {    return of();  } else {    return new ImmutableClassToInstanceMap<B>(map);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:50.905 -0500",hash_original_method="73ADE766083E21B57FB910CFDB1C7433",hash_generated_method="91229CCB0E4F2ABB90EF56194A1717B7") public void readContent() throws IOException {  if (offset + length > buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    offset+=length;  } else {    int bytesRead=in.read(buffer,offset,length);    if (bytesRead != length) {      int c=bytesRead;      do {        if (c < 1 || bytesRead > length) {          throw new ASN1Exception("Failed to read encoded content");        }        c=in.read(buffer,offset + bytesRead,length - bytesRead);        bytesRead+=c;      } while (bytesRead != length);    }    offset+=length;  }}  }
class C{  public boolean isHighlighted(){  return mHighlighted;}  }
class C{  public void decommission() throws InterruptedException {  getProbe().decommission();}  }
class C{  public TLongFloatIterator(TLongFloatHashMap map){  super(map);  _map=map;}  }
class C{  public void releaseTargetInfoLock(){  log.info("Start releasing target version lock");  coordinatorClientExt.releaseTargetVersionLock();  log.info("Release the target version lock.");}  }
class C{  public Map<String,Object> makeValid(Map<String,? extends Object> source,String mode,boolean includeInternal,List<Object> errorMessages,Locale locale){  return makeValid(source,mode,includeInternal,errorMessages,null,locale);}  }
class C{  private DateFormatter(){}  }
class C{  public ServiceConfigurationError(String message){  super(message);}  }
class C{  public void replaceAnnFile(Reader readerAnnFile){  m_pathAnnFile=null;  m_readerAnnFile=readerAnnFile;  m_isUpdateAnnFile=true;  if (!isModified())   setEditFlag(FolderEditFlag.UPDATE);}  }
class C{  public void replyToMessage(Message srcMsg,Message dstMsg){  try {    dstMsg.replyTo=mSrcMessenger;    srcMsg.replyTo.send(dstMsg);  } catch (  RemoteException e) {    log("TODO: handle replyToMessage RemoteException" + e);    e.printStackTrace();  }}  }
class C{  public CertificateSerialNumber(DerValue val) throws IOException {  serial=new SerialNumber(val);}  }
class C{  public synchronized void addZoomListener(ZoomListener listener){  mZoomListeners.add(listener);}  }
class C{  public String toString(){  return this.getClass().getName() + "(" + alpha+ ","+ beta+ ")";}  }
class C{  private static void doCreateSuperForwarder(ClassNode targetNode,MethodNode forwarderMethod,ClassNode[] interfacesToGenerateForwarderFor,Map<String,ClassNode> genericsSpec){  Parameter[] parameters=forwarderMethod.getParameters();  Parameter[] superForwarderParams=new Parameter[parameters.length];  for (int i=0; i < parameters.length; i++) {    Parameter parameter=parameters[i];    ClassNode originType=parameter.getOriginType();    superForwarderParams[i]=new Parameter(correctToGenericsSpecRecurse(genericsSpec,originType),parameter.getName());  }  for (int i=0; i < interfacesToGenerateForwarderFor.length; i++) {    final ClassNode current=interfacesToGenerateForwarderFor[i];    final ClassNode next=i < interfacesToGenerateForwarderFor.length - 1 ? interfacesToGenerateForwarderFor[i + 1] : null;    String forwarderName=Traits.getSuperTraitMethodName(current,forwarderMethod.getName());    if (targetNode.getDeclaredMethod(forwarderName,superForwarderParams) == null) {      ClassNode returnType=correctToGenericsSpecRecurse(genericsSpec,forwarderMethod.getReturnType());      Statement delegate=next == null ? createSuperFallback(forwarderMethod,returnType) : createDelegatingForwarder(forwarderMethod,next);      MethodNode methodNode=targetNode.addMethod(forwarderName,Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC,returnType,superForwarderParams,ClassNode.EMPTY_ARRAY,delegate);      methodNode.setGenericsTypes(forwarderMethod.getGenericsTypes());    }  }}  }
class C{  public synchronized void close(){  if (!this.mIsClosed) {    this.mSocket.close();    this.mIsClosed=true;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:57.959 -0500",hash_original_method="99A2FC579527B2CEA9AC5A41AD01795F",hash_generated_method="825533999D7EA8EAEDCD7568EFF8EDFC") protected boolean scrollLeft(TextView widget,Spannable buffer,int amount){  final int minScrollX=getScrollBoundsLeft(widget);  int scrollX=widget.getScrollX();  if (scrollX > minScrollX) {    scrollX=Math.max(scrollX - getCharacterWidth(widget) * amount,minScrollX);    widget.scrollTo(scrollX,widget.getScrollY());    return true;  }  return false;}  }
class C{  public boolean equals(DatabaseField field){  if (this == field) {    return true;  }  if (field != null) {    if (getQualifiedName().equals(field.getQualifiedName())) {      return true;    }    if (DatabasePlatform.shouldIgnoreCaseOnFieldComparisons()) {      if (this.name.equalsIgnoreCase(field.name)) {        if ((!hasTableName()) || (!field.hasTableName())) {          return true;        }        return (this.table.equals(field.table));      }    } else {      String ourNameToCompare;      String fieldNameToCompare;      if (field.shouldUseDelimiters() || shouldUseDelimiters()) {        ourNameToCompare=this.name;        fieldNameToCompare=field.name;      } else {        ourNameToCompare=getNameForComparisons();        fieldNameToCompare=field.getNameForComparisons();      }      if (this.name.equals(field.name) || ourNameToCompare.equals(fieldNameToCompare)) {        if ((!hasTableName()) || (!field.hasTableName())) {          return true;        }        return (this.table.equals(field.table));      }    }  }  return false;}  }
class C{  public DateConverter(){  super();}  }
class C{  public BooksSubCatalog(List<Object> stuffToFilterOut,List<Book> books){  super(stuffToFilterOut,books);}  }
class C{  @Nullable public User authenticate(@Nonnull String userName,@Nonnull String password){  User user=findByUserName(userName);  User result=null;  if (user != null) {    if (PasswordEncoder.validatePassword(password,user.getPassword())) {      result=user;    }  }  return result;}  }
class C{  public double simulateForward(double value,double time){  double D=diffusionRateParameter.getParameterValue(0);  double delta=MathUtils.nextGaussian();  delta*=Math.sqrt(D * time);  delta+=getBias() * time;  return value + delta;}  }
class C{  public final double SFPriorEntropy(){  if (m_NoPriors || !m_ComplexityStatisticsAvailable) {    return Double.NaN;  }  return m_SumPriorEntropy;}  }
class C{  public PowerPCConditionOperand flipOperands(){switch (value) {case EQUAL:    value=NOT_EQUAL;  break;case NOT_EQUAL:value=EQUAL;break;case LESS:value=GREATER;break;case LESS_EQUAL:value=GREATER_EQUAL;break;case GREATER:value=LESS;break;case GREATER_EQUAL:value=LESS_EQUAL;break;case OVERFLOW:value=NOT_OVERFLOW;break;case NOT_OVERFLOW:value=OVERFLOW;break;}return this;}  }
class C{  public void loadIcons(SkinSpecification skin){  iconsLoaded=true;  if (!skin.hasBorder()) {    iconsLoaded=false;    insets=new Insets(5,5,5,5);    return;  }  try {    leftStaticSpace=rightStaticSpace=0;    topStaticSpace=bottomStaticSpace=0;    leftNumTiledIcons=rightNumTiledIcons=0;    topNumTiledIcons=bottomNumTiledIcons=0;    java.net.URI imgURL;    File file;    tlCorner=loadIcon(skin.tl_corner);    trCorner=loadIcon(skin.tr_corner);    blCorner=loadIcon(skin.bl_corner);    brCorner=loadIcon(skin.br_corner);    leftLine=new ArrayList<ImageIcon>();    leftShouldTile=new ArrayList<Boolean>();    for (int i=0; i < skin.leftEdge.size(); i++) {      file=new File(Configuration.widgetsDir(),skin.leftEdge.get(i));      imgURL=file.toURI();      if (!file.exists()) {        System.err.println("MegaMekBorder Error: icon doesn't exist: " + file.getAbsolutePath());        iconsLoaded=false;      }      leftLine.add(new ImageIcon(imgURL.toURL()));      leftShouldTile.add(skin.leftShouldTile.get(i));      if (!leftShouldTile.get(i)) {        leftStaticSpace+=leftLine.get(i).getIconHeight();      } else {        leftNumTiledIcons++;      }    }    rightLine=new ArrayList<ImageIcon>();    rightShouldTile=new ArrayList<Boolean>();    for (int i=0; i < skin.rightEdge.size(); i++) {      file=new File(Configuration.widgetsDir(),skin.rightEdge.get(i));      imgURL=file.toURI();      if (!file.exists()) {        System.err.println("MegaMekBorder Error: icon doesn't exist: " + file.getAbsolutePath());        iconsLoaded=false;      }      rightLine.add(new ImageIcon(imgURL.toURL()));      rightShouldTile.add(skin.rightShouldTile.get(i));      if (!rightShouldTile.get(i)) {        rightStaticSpace+=rightLine.get(i).getIconHeight();      } else {        rightNumTiledIcons++;      }    }    topLine=new ArrayList<ImageIcon>();    topShouldTile=new ArrayList<Boolean>();    for (int i=0; i < skin.topEdge.size(); i++) {      file=new File(Configuration.widgetsDir(),skin.topEdge.get(i));      imgURL=file.toURI();      if (!file.exists()) {        System.err.println("MegaMekBorder Error: icon doesn't exist: " + file.getAbsolutePath());        iconsLoaded=false;      }      topLine.add(new ImageIcon(imgURL.toURL()));      topShouldTile.add(skin.topShouldTile.get(i));      if (!topShouldTile.get(i)) {        topStaticSpace+=topLine.get(i).getIconWidth();      } else {        topNumTiledIcons++;      }    }    bottomLine=new ArrayList<ImageIcon>();    bottomShouldTile=new ArrayList<Boolean>();    for (int i=0; i < skin.bottomEdge.size(); i++) {      file=new File(Configuration.widgetsDir(),skin.bottomEdge.get(i));      imgURL=file.toURI();      if (!file.exists()) {        System.err.println("MegaMekBorder Error: icon doesn't exist: " + file.getAbsolutePath());        iconsLoaded=false;      }      bottomLine.add(new ImageIcon(imgURL.toURL()));      bottomShouldTile.add(skin.bottomShouldTile.get(i));      if (!bottomShouldTile.get(i)) {        bottomStaticSpace+=bottomLine.get(i).getIconWidth();      } else {        bottomNumTiledIcons++;      }    }    if (iconsLoaded) {      insets=new Insets(0,0,0,0);      insets.top=Math.min(tlCorner.getIconHeight(),trCorner.getIconHeight());      for (      ImageIcon icon : topLine) {        insets.top=Math.min(insets.top,icon.getIconHeight());      }      insets.bottom=Math.min(blCorner.getIconHeight(),brCorner.getIconHeight());      for (      ImageIcon icon : bottomLine) {        insets.bottom=Math.min(insets.bottom,icon.getIconHeight());      }      insets.left=Math.min(tlCorner.getIconWidth(),blCorner.getIconWidth());      for (      ImageIcon icon : leftLine) {        insets.left=Math.min(insets.left,icon.getIconWidth());      }      insets.right=Math.min(trCorner.getIconWidth(),brCorner.getIconWidth());      for (      ImageIcon icon : rightLine) {        insets.right=Math.min(insets.right,icon.getIconWidth());      }    } else {      insets=new Insets(5,5,5,5);    }  } catch (  Exception e) {    System.out.println("Error: loading icons for " + "a MegamekBorder!");    e.printStackTrace();    iconsLoaded=false;  }}  }
class C{  public static boolean isExplicitTrue(String value){  return value != null && (value.equals("true") || value.equals("1") || value.equals("on")|| value.equals("yes"));}  }
class C{  private void doContexts(final HttpServletRequest req,final HttpServletResponse resp) throws IOException {  if (!isReadable(getServletContext(),req,resp)) {    return;  }  try {    submitApiTask(new RestApiGetContextsTask(req,resp,getNamespace(req),getTimestamp(req))).get();  } catch (  Throwable t) {    launderThrowable(t,resp,"GET-CONTEXTS");  }}  }
class C{  public _QueueStatus(final _QueueStatus_Flag[] flags){  super(flags);}  }
class C{  public Filter removeAttribute(String name){  try {    this.remove(name);  } catch (  Exception e) {  }  return this;}  }
class C{  public static PolicyDefinition createSingleMetricSamplePolicy(){  String definePolicy="from sampleStream_1[name == \"cpu\" and value > 50.0] select name, host, flag, value insert into outputStream;";  PolicyDefinition policyDefinition=new PolicyDefinition();  policyDefinition.setName("SamplePolicyForTest");  policyDefinition.setInputStreams(Arrays.asList("sampleStream_1"));  policyDefinition.setOutputStreams(Arrays.asList("outputStream"));  policyDefinition.setDefinition(new PolicyDefinition.Definition(PolicyStreamHandlers.SIDDHI_ENGINE,definePolicy));  policyDefinition.setPartitionSpec(Arrays.asList(createSampleStreamGroupbyPartition("sampleStream_1",Arrays.asList("name"))));  return policyDefinition;}  }
class C{  public TSink<String> publish(TStream<String> stream,String topic){  return publish(stream,null,null,null,null);}  }
class C{  @NotNull public <T>List<T> findAll(@NotNull Class<T> cl,@NotNull SqlQuery query){  return executeQuery(resultProcessorForClass(cl),query);}  }
class C{  public void addFinalFields(Collection<String> newFinalFields){  for (  String finalField : newFinalFields) {    if (!finalFields.contains(finalField)) {      logger.debug("Adding new field to ModifiedTargetStaticFields:" + newFinalFields);      finalFields.add(finalField);    }  }}  }
class C{  public static boolean isFullAccessibleField(JField field,JClassType clazz){  return field.isPublic() || hasGetAndSetMethods(field,clazz);}  }
class C{  private State applyPatch(State startState,State patchState){  if (patchState.taskState != null) {    if (patchState.taskState.stage != startState.taskState.stage || patchState.taskState.subStage != startState.taskState.subStage) {      ServiceUtils.logInfo(this,"Moving to stage %s:%s",patchState.taskState.stage,patchState.taskState.subStage);      startState.taskState=patchState.taskState;    }  }  return startState;}  }
class C{  private void exhaustInputStream() throws IOException {  while (this.is.read() > 0) {  }}  }
class C{  public boolean contentEquals(CharSequence cs){  if (cs == null) {    throw new NullPointerException();  }  int len=cs.length();  if (len != count) {    return false;  }  if (len == 0 && count == 0) {    return true;  }  return regionMatches(0,cs.toString(),0,len);}  }
class C{  public boolean isIncludeNullsUserElement2(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsUserElement2);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:40.155 -0500",hash_original_method="4E134EAC713EA4116B151015A8D49950",hash_generated_method="1A2047A58DB966745764F4E01AEDCBEC") private long backRefToValue(ContentProviderResult[] backRefs,int numBackRefs,Integer backRefIndex){  if (backRefIndex >= numBackRefs) {    Log.e(TAG,this.toString());    throw new ArrayIndexOutOfBoundsException("asked for back ref " + backRefIndex + " but there are only "+ numBackRefs+ " back refs");  }  ContentProviderResult backRef=backRefs[backRefIndex];  long backRefValue;  if (backRef.uri != null) {    backRefValue=ContentUris.parseId(backRef.uri);  } else {    backRefValue=backRef.count;  }  return backRefValue;}  }
class C{  public ISO9797Alg3Mac(BlockCipher cipher){  this(cipher,cipher.getBlockSize() * 8,null);}  }
class C{  @Override public void commit() throws IOException {  try {    super.commit();    Iterator<Entry> it=this.entryIterator();    for (SchemaConfiguration.Entry etr=it.next(); it.hasNext(); etr=it.next()) {      try {        SchemaDeclaration f=WebgraphSchema.valueOf(etr.key());        f.setSolrFieldName(etr.getValue());      } catch (      final IllegalArgumentException e) {        continue;      }    }  } catch (  final IOException e) {  }}  }
class C{  public SystemMessage(){}  }
class C{  public void removeValue(String name){  if (name == null) {    throw new IllegalArgumentException("name == null");  }  Object old=values.remove(name);  if (old instanceof SSLSessionBindingListener) {    SSLSessionBindingListener listener=(SSLSessionBindingListener)old;    listener.valueUnbound(new SSLSessionBindingEvent(this,name));  }}  }
class C{  public void computeTaskComplete(long taskPtr,long memPtr){  enter();  try {    PlatformCallbackUtils.computeTaskComplete(envPtr,taskPtr,memPtr);  }  finally {    leave();  }}  }
class C{  public OSArrayTag(int type,byte[] data){  this(type,ByteBuffer.wrap(data));}  }
class C{  public static void main(final String[] args) throws Exception {  try {    actorSystem=ActorSystem.create("ConfigurationProxy",ConfigFactory.load().getConfig("configuration-proxy"));    SignerClient.init(actorSystem);    ConfProxyProperties conf=new ConfProxyProperties("PROXY1");    ConfProxyHelper.purgeOutdatedGenerations(conf);    ConfigurationDirectory confDir=new ConfigurationDirectory(conf.getConfigurationDownloadPath());    OutputBuilder output=new OutputBuilder(confDir,conf);    output.buildSignedDirectory();    output.moveAndCleanup();  } catch (  Exception ex) {    log.error("Error when executing configuration-proxy",ex);  } finally {    actorSystem.shutdown();  }}  }
class C{  public void keyReleased(final KeyEvent k){}  }
class C{  public SearchRequestBuilder addIndexBoost(String index,float indexBoost){  sourceBuilder().indexBoost(index,indexBoost);  return this;}  }
class C{  public Matrix4f rotationYXZ(float angleY,float angleX,float angleZ){  float cosY=(float)Math.cos(angleY);  float sinY=(float)Math.sin(angleY);  float cosX=(float)Math.cos(angleX);  float sinX=(float)Math.sin(angleX);  float cosZ=(float)Math.cos(angleZ);  float sinZ=(float)Math.sin(angleZ);  float m_sinY=-sinY;  float m_sinX=-sinX;  float m_sinZ=-sinZ;  float nm00=cosY;  float nm02=m_sinY;  float nm20=sinY;  float nm22=cosY;  float nm10=nm20 * sinX;  float nm11=cosX;  float nm12=nm22 * sinX;  this._m20(nm20 * cosX);  this._m21(m_sinX);  this._m22(nm22 * cosX);  this._m23(0.0f);  this._m00(nm00 * cosZ + nm10 * sinZ);  this._m01(nm11 * sinZ);  this._m02(nm02 * cosZ + nm12 * sinZ);  this._m03(0.0f);  this._m10(nm00 * m_sinZ + nm10 * cosZ);  this._m11(nm11 * cosZ);  this._m12(nm02 * m_sinZ + nm12 * cosZ);  this._m13(0.0f);  this._m30(0.0f);  this._m31(0.0f);  this._m32(0.0f);  this._m33(1.0f);  _properties(PROPERTY_AFFINE);  return this;}  }
class C{  public static int binarySearch(Card[] cards,Card target,int low,int high){  System.out.println(low + ", " + high);  if (high < low) {    return -1;  }  int mid=(low + high) / 2;  int comp=cards[mid].compareTo(target);  if (comp == 0) {    return mid;  } else   if (comp < 0) {    return binarySearch(cards,target,mid + 1,high);  } else {    return binarySearch(cards,target,low,mid - 1);  }}  }
class C{  private double tau(){  int numCondVars=getIndices().length - 2;switch (numCondVars) {case 0:    return tau0();case 1:  return tau1();case 2:return tau2();case 3:return tau3();case 4:return tau4();default :throw new IllegalStateException("Only taus for up to " + "four conditioning variables were hardcoded: " + numCondVars);}}  }
class C{  public ElementRule(Class type,String description,int min,int max){  this(type,description,null,min,max);}  }
class C{  public void configure(PropertyInfo propertyInfo){  connectionLock.lock();  try {    if (configured) {      return;    }    s_logger.info("Configuring ConnectionManager");    Long maxTTLSeconds=0L;    String maxTTLString=propertyInfo.getProperty(CIM_CONNECTION_MAX_INACTIVE_TIME);    if (maxTTLString != null && maxTTLString.matches("\\d+")) {      maxTTLSeconds=Long.valueOf(maxTTLString);      maxConnectionTTL=maxTTLSeconds * MS_IN_SECONDS;    }    if (maxTTLSeconds != 0) {      executorService.scheduleAtFixedRate(new CimConnectionReaper(),INITIAL_DELAY,ONE_MINUTE,TimeUnit.MINUTES);      s_logger.info("ConnectionManager config: CimConnections that have been inactive for more than {} seconds will be reaped",maxTTLSeconds);    } else {      s_logger.info("ConnectionManager config: {} was set to {}, CIMConnection reaper is disabled",CIM_CONNECTION_MAX_INACTIVE_TIME,maxTTLString);    }    configured=true;  }  finally {    connectionLock.unlock();  }}  }
class C{  public static void writeImageMap(PrintWriter writer,String name,ChartRenderingInfo info,ToolTipTagFragmentGenerator toolTipTagFragmentGenerator,URLTagFragmentGenerator urlTagFragmentGenerator) throws IOException {  writer.println(ImageMapUtilities.getImageMap(name,info,toolTipTagFragmentGenerator,urlTagFragmentGenerator));}  }
class C{  public Description(String description){  super(description);}  }
class C{  public void refreshTheme(){  refreshTheme(true);}  }
class C{  protected boolean canBeEquivalent(V v1,V v2){  return true;}  }
class C{  public static void checkClassSignature(final String signature){  int pos=0;  if (getChar(signature,0) == '<') {    pos=checkFormalTypeParameters(signature,pos);  }  pos=checkClassTypeSignature(signature,pos);  while (getChar(signature,pos) == 'L') {    pos=checkClassTypeSignature(signature,pos);  }  if (pos != signature.length()) {    throw new IllegalArgumentException(signature + ": error at index " + pos);  }}  }
class C{  public Dependency addExclusion(Exclusion exclusion){  requireNonNull(exclusion,"Required not null exclusion");  exclusions().add(exclusion);  if (!isNew()) {    if (dependencyElement.hasSingleChild("exclusions")) {      dependencyElement.getSingleChild("exclusions").appendChild(exclusion.asXMLElement());    } else {      dependencyElement.appendChild(createElement("exclusions",exclusion.asXMLElement()));    }    exclusion.exclusionElement=dependencyElement.getSingleChild("exclusions").getLastChild();  }  return this;}  }
class C{  static void checkAccess(RVMMember member,RVMClass accessingClass) throws IllegalAccessException {  RVMClass declaringClass=member.getDeclaringClass();  if (member.isPrivate()) {    if (accessingClass == declaringClass)     return;  } else   if (member.isProtected()) {    if (declaringClass.getClassLoader() == accessingClass.getClassLoader() && declaringClass.getPackageName().equals(accessingClass.getPackageName()))     return;    for (RVMClass cls=accessingClass; cls != null; cls=cls.getSuperClass()) {      if (accessingClass == declaringClass)       return;    }  } else {    if (declaringClass.getClassLoader() == accessingClass.getClassLoader() && declaringClass.getPackageName().equals(accessingClass.getPackageName()))     return;  }  throwNewIllegalAccessException(member,accessingClass);}  }
class C{  private void loadList(){  if (mPlayMusicManager == null)   return;  MusicContainerListFragment musicTrackListFragment=(MusicContainerListFragment)getSupportFragmentManager().findFragmentById(R.id.fragment_main);switch (mViewType) {case Album:    AlbumDataSource dataSourceAlbum=new AlbumDataSource(mPlayMusicManager);  dataSourceAlbum.setOfflineOnly(true);dataSourceAlbum.setSerchKey(mSearchKeyword);musicTrackListFragment.setMusicTrackList(dataSourceAlbum.getAll());break;case Artist:ArtistDataSource dataSourceArtist=new ArtistDataSource(mPlayMusicManager);dataSourceArtist.setOfflineOnly(true);dataSourceArtist.setSerchKey(mSearchKeyword);musicTrackListFragment.setMusicTrackList(dataSourceArtist.getAll());break;case Playlist:PlaylistDataSource dataSourcePlaylist=new PlaylistDataSource(mPlayMusicManager);dataSourcePlaylist.setOfflineOnly(true);dataSourcePlaylist.setSerchKey(mSearchKeyword);musicTrackListFragment.setMusicTrackList(dataSourcePlaylist.getAll());break;case Rated:AlbumDataSource dataSourceRatedAlbum=new AlbumDataSource(mPlayMusicManager);dataSourceRatedAlbum.setOfflineOnly(true);dataSourceRatedAlbum.setRatedOnly(true);dataSourceRatedAlbum.setSerchKey(mSearchKeyword);musicTrackListFragment.setMusicTrackList(dataSourceRatedAlbum.getAll());break;}}  }
class C{  public Node create(Reader t){  m_nodes=new Vector<InfoObject>(50,50);  m_edges=new Vector<InfoObject>(50,50);  m_grObj=new InfoObject("graph");  m_noObj=new InfoObject("node");  m_edObj=new InfoObject("edge");  m_st=new StreamTokenizer(new BufferedReader(t));  setSyntax();  graph();  Node top=generateStructures();  return top;}  }
class C{  public void appendToFsb(org.apache.xml.utils.FastStringBuffer fsb){  XString xstring=(XString)xstr();  xstring.appendToFsb(fsb);}  }
class C{  protected void openButton(){  if (locoBox.getSelectedRosterEntries().length != 0) {    openKnownLoco();  } else   if (isDecoderSelected()) {    openNewLoco();  } else {    log.error("openButton with neither combobox nonzero");  }}  }
class C{  @Override final protected boolean isForViewType(@NonNull Object items,int position){  return true;}  }
class C{  private DataSource.Factory buildDataSourceFactory(boolean useBandwidthMeter){  return buildDataSourceFactory(useBandwidthMeter ? BANDWIDTH_METER : null);}  }
class C{  @Override public boolean isOpen(){  return fileAccess.isOpen();}  }
class C{  public static boolean isSameLength(final char[] array1,final char[] array2){  if (array1 == null && array2 != null && array2.length > 0 || array2 == null && array1 != null && array1.length > 0 || array1 != null && array2 != null && array1.length != array2.length) {    return false;  }  return true;}  }
class C{  public JSONObject put(String key,int value){  super.put(key,new Integer(value));  return this;}  }
class C{  private boolean crossCheckDiagonal(int startI,int centerJ,int maxCount,int originalStateCountTotal){  int[] stateCount=getCrossCheckStateCount();  int i=0;  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i)) {    stateCount[2]++;    i++;  }  if (startI < i || centerJ < i) {    return false;  }  while (startI >= i && centerJ >= i && !image.get(centerJ - i,startI - i) && stateCount[1] <= maxCount) {    stateCount[1]++;    i++;  }  if (startI < i || centerJ < i || stateCount[1] > maxCount) {    return false;  }  while (startI >= i && centerJ >= i && image.get(centerJ - i,startI - i) && stateCount[0] <= maxCount) {    stateCount[0]++;    i++;  }  if (stateCount[0] > maxCount) {    return false;  }  int maxI=image.getHeight();  int maxJ=image.getWidth();  i=1;  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i)) {    stateCount[2]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && !image.get(centerJ + i,startI + i) && stateCount[3] < maxCount) {    stateCount[3]++;    i++;  }  if (startI + i >= maxI || centerJ + i >= maxJ || stateCount[3] >= maxCount) {    return false;  }  while (startI + i < maxI && centerJ + i < maxJ && image.get(centerJ + i,startI + i) && stateCount[4] < maxCount) {    stateCount[4]++;    i++;  }  if (stateCount[4] >= maxCount) {    return false;  }  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal && foundPatternCross(stateCount);}  }
class C{  public DD(DD dd){  init(dd);}  }
class C{  public FluxFirstEmitting<T> ambAdditionalSource(Publisher<? extends T> source){  if (array != null) {    int n=array.length;    @SuppressWarnings("unchecked") Publisher<? extends T>[] newArray=new Publisher[n + 1];    System.arraycopy(array,0,newArray,0,n);    newArray[n]=source;    return new FluxFirstEmitting<>(newArray);  }  return null;}  }
class C{  public MersenneTwisterRNG(final byte[] seed){  if (seed == null || seed.length != SEED_SIZE_BYTES) {    throw new IllegalArgumentException("Mersenne Twister RNG requires a 128-bit (16-byte) seed.");  }  this.seed=seed.clone();  final int[] seedInts=convertBytesToInts(this.seed);  mt[0]=BOOTSTRAP_SEED;  for (mtIndex=1; mtIndex < N; mtIndex++) {    mt[mtIndex]=BOOTSTRAP_FACTOR * (mt[mtIndex - 1] ^ mt[mtIndex - 1] >>> 30) + mtIndex;  }  int i=1;  int j=0;  for (int k=Math.max(N,seedInts.length); k > 0; k--) {    mt[i]=(mt[i] ^ (mt[i - 1] ^ mt[i - 1] >>> 30) * SEED_FACTOR1) + seedInts[j] + j;    i++;    j++;    if (i >= N) {      mt[0]=mt[N - 1];      i=1;    }    if (j >= seedInts.length) {      j=0;    }  }  for (int k=N - 1; k > 0; k--) {    mt[i]=(mt[i] ^ (mt[i - 1] ^ mt[i - 1] >>> 30) * SEED_FACTOR2) - i;    i++;    if (i >= N) {      mt[0]=mt[N - 1];      i=1;    }  }  mt[0]=UPPER_MASK;}  }
class C{  public static Long add(SolrClient client,SolrInputDocument sdoc,ModifiableSolrParams params) throws Exception {  if (client == null) {    Long version=addAndGetVersion(sdoc,params);    return version;  } else {    UpdateRequest updateRequest=new UpdateRequest();    if (params != null) {      updateRequest.setParams(params);    }    updateRequest.add(sdoc);    UpdateResponse rsp=updateRequest.process(client);    return null;  }}  }
class C{  public void testIsMultiValued(){  Metadata meta=new Metadata();  assertFalse(meta.isMultiValued("key"));  meta.add("key","value1");  assertFalse(meta.isMultiValued("key"));  meta.add("key","value2");  assertTrue(meta.isMultiValued("key"));}  }
class C{  public ObjectFactory(){}  }
class C{  public MonetaryFormat negativeSign(char negativeSign){  checkArgument(!Character.isDigit(negativeSign));  checkArgument(negativeSign > 0);  if (negativeSign == this.negativeSign)   return this; else   return new MonetaryFormat(negativeSign,positiveSign,zeroDigit,decimalMark,minDecimals,decimalGroups,shift,roundingMode,codes,codeSeparator,codePrefixed);}  }
class C{  public static int samplesToMs(int samples,int sampleRate,int channels){  return (int)(1000L * samples / (sampleRate * channels));}  }
class C{  protected void doReadObject(ObjectInputStream input) throws IOException, ClassNotFoundException {  loadFactor=input.readFloat();  int capacity=input.readInt();  int size=input.readInt();  init();  threshold=calculateThreshold(capacity,loadFactor);  data=new HashEntry[capacity];  for (int i=0; i < size; i++) {    Object key=input.readObject();    Object value=input.readObject();    put(key,value);  }}  }
class C{  public static void insertBreakpoint(BreakPointInstruction breakpoint,int lineNumber){  if (breakpoints.containsKey(lineNumber)) {    if (breakpoints.get(lineNumber).getBPInstructionStatus() != BPINSTRUCTION_STATUS.INVISIBLE)     System.out.format("Breakpoint updated at %s, line, %d.\n",breakpoint.getBPInstructionLocation(),lineNumber); else     System.out.format("Breakpoint added at %s, line %d.\n",breakpoint.getBPInstructionLocation(),lineNumber);    breakpoints.put(lineNumber,breakpoint);  }}  }
class C{  public static Dag serializableInstance(){  Dag dag=new Dag();  GraphNode node1=new GraphNode("X");  dag.addNode(node1);  return dag;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  localizableSupport=new LocalizableSupport(RESOURCES,getClass().getClassLoader());}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildSmallBoyNPC(zone);}  }
class C{  public void replace(int position,int length,String text){  this.replace(position,length,text == null ? null : text.toCharArray());}  }
class C{  CallerInfo markAsEmergency(Context context){  phoneNumber=context.getString(com.android.internal.R.string.emergency_call_dialog_number_for_display);  photoResource=com.android.internal.R.drawable.picture_emergency;  mIsEmergency=true;  return this;}  }
class C{  public static Paint newCornerPaint(Context context){  final float lineThicknessPx=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,DEFAULT_CORNER_THICKNESS_DP,context.getResources().getDisplayMetrics());  final Paint cornerPaint=new Paint();  cornerPaint.setColor(DEFAULT_CORNER_COLOR);  cornerPaint.setStrokeWidth(lineThicknessPx);  cornerPaint.setStyle(Paint.Style.STROKE);  return cornerPaint;}  }
class C{  public static double regularizedGammaQ(final double a,final double x){  if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0)|| (x < 0.0)) {    return Double.NaN;  }  if (x == 0.0) {    return 1.0;  }  if (x < a + 1.0) {    return 1.0 - regularizedGammaP(a,x);  }  final double FPMIN=Double.MIN_VALUE / NUM_PRECISION;  double b=x + 1 - a;  double c=1.0 / FPMIN;  double d=1.0 / b;  double fac=d;  for (int i=1; i < MAX_ITERATIONS; i++) {    double an=i * (a - i);    b+=2;    d=an * d + b;    if (Math.abs(d) < FPMIN) {      d=FPMIN;    }    c=b + an / c;    if (Math.abs(c) < FPMIN) {      c=FPMIN;    }    d=1 / d;    double del=d * c;    fac*=del;    if (Math.abs(del - 1.0) <= NUM_PRECISION) {      break;    }  }  return fac * Math.exp(-x + a * Math.log(x) - logGamma(a));}  }
class C{  public void testDistributionNominal(){  performTest(false,false,true,false,false);}  }
class C{  public static MultiTaskListener instance(Context context){  MultiTaskListener instance=context.get(taskListenerKey);  if (instance == null)   instance=new MultiTaskListener(context);  return instance;}  }
class C{  public void removeAction(int tag,CCNode target){  assert tag != CCAction.kCCActionTagInvalid : "Invalid tag";  HashElement element=targets.get(target);  if (element != null) {synchronized (element.actions) {      int limit=element.actions.size();      for (int i=0; i < limit; i++) {        CCAction a=element.actions.get(i);        if (a.getTag() == tag && a.getOriginalTarget() == target)         removeAction(i,element);      }    }  } else {  }}  }
class C{  public final void write(char buf[]) throws IOException {  write(buf,0,buf.length);}  }
class C{  public MP4TextSubtitleHandler(byte[] configInfo,boolean isTX3G){  super(null);  this.isTX3G=isTX3G;  processHeaderInfo(configInfo);}  }
class C{  @Override public void yield(){  Clock.stop();  if (isRunning()) {    if (current.yieldPolicy()) {      Trace.trace(Item.YIELD,"%d: Yieldpoint",Thread.currentThread().getId());      yield(runQueue);    } else {      Trace.trace(Item.YIELD,"%d: Yieldpoint - not taken",Thread.currentThread().getId());    }  }  Clock.start();}  }
class C{  @Override public Long del(final byte[]... keys){  checkIsInMultiOrPipeline();  client.del(keys);  return client.getIntegerReply();}  }
class C{  public void changeVacation(List<String> users,boolean enable,String subject,String message,boolean contactsOnly) throws IllegalArgumentException, ServiceException, MalformedURLException, IOException {  if (users.size() == 0) {    throw new IllegalArgumentException();  }  GenericEntry entry=new GenericEntry();  if (enable) {    entry.addProperty(Constants.ENABLE,Constants.TRUE);    entry.addProperty(Constants.SUBJECT,subject);    entry.addProperty(Constants.MESSAGE,message);    entry.addProperty(Constants.CONTACTS_ONLY,String.valueOf(contactsOnly));  } else {    entry.addProperty(Constants.ENABLE,Constants.FALSE);  }  for (  String user : users) {    if (enable) {      logger.log(Level.INFO,"Updating vacation-responder settings ( " + "enable: " + enable + ", subject: "+ subject+ ", message: "+ message+ ", contactsOnly: "+ contactsOnly+ " ) for user "+ user+ " ...");    } else {      logger.log(Level.INFO,"Updating vacation-responder settings ( " + "enable: false ) for user " + user + " ...");    }    updateSettings(user,entry,Constants.VACATION);    logger.log(Level.INFO,"Successfully updated vacation-responder settings.");  }}  }
class C{  public FillFilter(int color){  this.fillColor=color;}  }
class C{  static public void main(String args[]){  Debug.init();  ArgParser ap=new ArgParser("TimeFrameApp");  ap.add("properties","A resource, file path or URL to properties file\n Ex: http://myhost.com/xyz.props or file:/myhome/abc.pro\n See Java Documentation for java.net.URL class for more details",1);  ap.parse(args);  String propArgs=null;  String[] arg=ap.getArgValues("properties");  if (arg != null) {    propArgs=arg[0];  }  new TimeFrameApp(configurePropertyHandler(propArgs));}  }
class C{  protected void fillKernelOrdinates(ComplexArray ordinates,double bandWidth){  final int length=ordinates.length;  final double a=1.0 / (Math.sqrt(2.0 * Math.PI) * bandWidth);  final double precision=-0.5 / (bandWidth * bandWidth);  for (int i=0; i < length; i++) {    final double x=ordinates.real[i];    ordinates.real[i]=a * Math.exp(x * x * precision);  }}  }
class C{  public List<String> listQueryIds(final FluoClient fluo){  checkNotNull(fluo);  final List<String> queryIds=new ArrayList<>();  try (Snapshot snap=fluo.newSnapshot()){    final CellScanner cellScanner=snap.scanner().fetch(FluoQueryColumns.QUERY_ID).build();    for (    RowColumnValue rcv : cellScanner) {      queryIds.add(rcv.getsValue());    }  }   Collections.sort(queryIds);  return queryIds;}  }
class C{  public void testSplitAndJoinMultiplePropertiesOnPipe(){  Properties inner=PropertyUtils.splitPropertiesOnPipe(ONE_PIPE_TWO);  assertEquals("hello",inner.getProperty("inner-1"));  assertEquals("goodbye",inner.getProperty("inner-2"));  assertEquals(2,inner.size());  try {    assertEquals(ONE_PIPE_TWO,PropertyUtils.joinOnPipe(PropertyUtils.toMap(inner)));  } catch (  ComparisonFailure e) {    assertEquals(TWO_PIPE_ONE,PropertyUtils.joinOnPipe(PropertyUtils.toMap(inner)));  }}  }
class C{  public boolean visit(SuperConstructorInvocation node){  return true;}  }
class C{  public void subAnd(LongPolynomial2 b,int mask){  long longMask=(((long)mask) << 24) + mask;  for (int i=0; i < b.coeffs.length; i++) {    coeffs[i]=(0x0800000800000L + coeffs[i] - b.coeffs[i]) & longMask;  }}  }
class C{  public void testDestroyFailedException01(){  DestroyFailedException dfE=new DestroyFailedException();  assertNull("getMessage() must return null.",dfE.getMessage());  assertNull("getCause() must return null",dfE.getCause());}  }
class C{  public void boot(String user){  checkSocket();  this.socket.sendTextMessage("boot: " + user);}  }
class C{  public String createUrl(boolean createDB){  boolean useService=serviceName != null && serviceName.trim().length() > 0;  if (url != null)   return url;  StringBuffer sb=new StringBuffer();  if (jdbcHeader == null)   if (useService)   sb.append("jdbc:oracle:thin:@//"); else   sb.append("jdbc:oracle:thin:@"); else   sb.append(jdbcHeader);  sb.append(host);  sb.append(":");  sb.append(port);  if (useService) {    sb.append("/");    sb.append(serviceName);  } else   if (sid != null && sid.length() > 0) {    sb.append(":");    sb.append(sid);  }  if (urlOptions != null && urlOptions.length() > 0) {    if (!urlOptions.startsWith("?"))     sb.append("?");    sb.append(urlOptions);  }  return sb.toString();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:40.936 -0500",hash_original_method="CAF32B6D436555758214A0AC3F1F5894",hash_generated_method="6C81B083B68686955D287B63805BA3F2") private static String toHexString(byte b[]){  int pos=0;  char[] c=new char[b.length * 2];  for (int i=0; i < b.length; i++) {    c[pos++]=toHex[(b[i] >> 4) & 0x0F];    c[pos++]=toHex[b[i] & 0x0f];  }  return new String(c);}  }
class C{  private void generateUniformExamples(Instances format,int numInstances,SubspaceClusterDefinition cl,String cName){  Instance example=null;  int numAtts=m_NumAttributes;  if (getClassFlag()) {    numAtts++;  }  example=new DenseInstance(numAtts);  example.setDataset(format);  boolean[] attributes=cl.getAttributes();  double[] minValue=cl.getMinValue();  double[] maxValue=cl.getMaxValue();  double[] diff=new double[minValue.length];  for (int i=0; i < minValue.length; i++) {    diff[i]=(maxValue[i] - minValue[i]);  }  for (int j=0; j < numInstances; j++) {    int num=-1;    for (int i=0; i < m_NumAttributes; i++) {      if (attributes[i]) {        num++;        double value=minValue[num] + (diff[num] * ((double)j / (double)(numInstances - 1)));        example.setValue(i,value);      } else {        example.setMissing(i);      }    }    if (getClassFlag()) {      example.setClassValue(cName);    }    format.add(example);  }}  }
class C{  private Map<URI,Map<URI,Map<String,List<URI>>>> createDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors,List<VolumeDescriptor> removeDescriptors){  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=new HashMap<URI,Map<URI,Map<String,List<URI>>>>();  for (  VolumeDescriptor descr : addDescriptors) {    URI deviceURI=descr.getDeviceURI();    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);    if (volumesToUpdateByCG == null) {      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);    }    URI consistencyGroupURI=descr.getConsistencyGroupURI();    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);    if (volumesToUpdate == null) {      volumesToUpdate=new HashMap<String,List<URI>>();      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);    }    List<URI> volumesToAdd=volumesToUpdate.get(ADD_VOLUMES_TO_CG_KEY);    if (volumesToAdd == null) {      volumesToAdd=new ArrayList<URI>();      volumesToUpdate.put(ADD_VOLUMES_TO_CG_KEY,volumesToAdd);    }    volumesToAdd.add(descr.getVolumeURI());  }  for (  VolumeDescriptor descr : removeDescriptors) {    URI deviceURI=descr.getDeviceURI();    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceToCGMap.get(deviceURI);    if (volumesToUpdateByCG == null) {      volumesToUpdateByCG=new HashMap<URI,Map<String,List<URI>>>();      deviceToCGMap.put(deviceURI,volumesToUpdateByCG);    }    URI consistencyGroupURI=descr.getConsistencyGroupURI();    Map<String,List<URI>> volumesToUpdate=volumesToUpdateByCG.get(consistencyGroupURI);    if (volumesToUpdate == null) {      volumesToUpdate=new HashMap<String,List<URI>>();      volumesToUpdateByCG.put(consistencyGroupURI,volumesToUpdate);    }    List<URI> volumesToRemove=volumesToUpdate.get(REMOVE_VOLUMES_FROM_CG_KEY);    if (volumesToRemove == null) {      volumesToRemove=new ArrayList<URI>();      volumesToUpdate.put(REMOVE_VOLUMES_FROM_CG_KEY,volumesToRemove);    }    volumesToRemove.add(descr.getVolumeURI());  }  return deviceToCGMap;}  }
class C{  private void update(){  GUIPreferences gs=GUIPreferences.getInstance();  IClientPreferences cs=PreferenceManager.getClientPreferences();  gs.setShowDamageLevel(showDamageLevel.isSelected());  gs.setEntityOwnerLabelColor(entityOwnerColor.isSelected());  gs.setMinimapEnabled(minimapEnabled.isSelected());  gs.setAutoEndFiring(autoEndFiring.isSelected());  gs.setAutoDeclareSearchlight(autoDeclareSearchlight.isSelected());  gs.setDefaultWeaponSortOrder(defaultWeaponSortOrder.getSelectedIndex());  gs.setNagForMASC(nagForMASC.isSelected());  gs.setNagForPSR(nagForPSR.isSelected());  gs.setNagForNoAction(nagForNoAction.isSelected());  gs.setShowMoveStep(animateMove.isSelected());  gs.setShowWrecks(showWrecks.isSelected());  gs.setSoundMute(soundMute.isSelected());  gs.setShowMapHexPopup(showMapHexPopup.isSelected());  gs.setShowWpsinTT(showWpsinTT.isSelected());  gs.setTooltipDelay(Integer.parseInt(tooltipDelay.getText()));  gs.setTooltipDismissDelay(Integer.parseInt(tooltipDismissDelay.getText()));  cs.setUnitStartChar(((String)unitStartChar.getSelectedItem()).charAt(0));  gs.setMouseWheelZoom(mouseWheelZoom.isSelected());  gs.setMouseWheelZoomFlip(mouseWheelZoomFlip.isSelected());  cs.setMaxPathfinderTime(Integer.parseInt(maxPathfinderTime.getText()));  gs.setGetFocus(getFocus.isSelected());  cs.setKeepGameLog(keepGameLog.isSelected());  cs.setGameLogFilename(gameLogFilename.getText());  cs.setStampFilenames(stampFilenames.isSelected());  cs.setStampFormat(stampFormat.getText());  cs.setDefaultAutoejectDisabled(defaultAutoejectDisabled.isSelected());  cs.setUseAverageSkills(useAverageSkills.isSelected());  cs.setGenerateNames(generateNames.isSelected());  cs.setShowUnitId(showUnitId.isSelected());  if ((clientgui != null) && (clientgui.bv != null)) {    clientgui.bv.updateEntityLabels();  }  cs.setLocale(CommonSettingsDialog.LOCALE_CHOICES[displayLocale.getSelectedIndex()]);  gs.setShowMapsheets(showMapsheets.isSelected());  gs.setAOHexShadows(aOHexShadows.isSelected());  gs.setFloatingIso(floatingIso.isSelected());  gs.setMmSymbol(mmSymbol.isSelected());  gs.setLevelHighlight(levelhighlight.isSelected());  gs.setShadowMap(shadowMap.isSelected());  gs.setValue("SOFTCENTER",useSoftCenter.isSelected());  if ((gs.getAntiAliasing() != chkAntiAliasing.isSelected()) && ((clientgui != null) && (clientgui.bv != null))) {    clientgui.bv.clearHexImageCache();    clientgui.bv.repaint();  }  gs.setAntiAliasing(chkAntiAliasing.isSelected());  String newSkinFile=(String)skinFiles.getSelectedItem();  String oldSkinFile=gs.getSkinFile();  if (!oldSkinFile.equals(newSkinFile)) {    boolean success=SkinXMLHandler.initSkinXMLHandler(newSkinFile);    if (!success) {      SkinXMLHandler.initSkinXMLHandler(oldSkinFile);      String title=Messages.getString("CommonSettingsDialog.skinFileFail.title");      String msg=Messages.getString("CommonSettingsDialog.skinFileFail.msg");      JOptionPane.showMessageDialog(owner,msg,title,JOptionPane.ERROR_MESSAGE);    } else {      gs.setSkinFile(newSkinFile);    }  }  if (tileSetChoice.getSelectedIndex() >= 0) {    if (!cs.getMapTileset().equals(tileSets[tileSetChoice.getSelectedIndex()]) && (clientgui != null) && (clientgui.bv != null)) {      clientgui.bv.clearShadowMap();    }    cs.setMapTileset(tileSets[tileSetChoice.getSelectedIndex()].getName());  }  ToolTipManager.sharedInstance().setInitialDelay(GUIPreferences.getInstance().getTooltipDelay());  if (GUIPreferences.getInstance().getTooltipDismissDelay() > 0) {    ToolTipManager.sharedInstance().setDismissDelay(GUIPreferences.getInstance().getTooltipDismissDelay());  }  boolean bindsChanged=false;  for (  KeyCommandBind kcb : KeyCommandBind.values()) {    JTextField txtModifiers=cmdModifierMap.get(kcb.cmd);    JCheckBox repeatable=cmdRepeatableMap.get(kcb.cmd);    Integer keyCode=cmdKeyMap.get(kcb.cmd);    if (txtModifiers == null || keyCode == null || repeatable == null) {      continue;    }    int modifiers=0;    if (txtModifiers.getText().contains(KeyEvent.getKeyModifiersText(KeyEvent.SHIFT_MASK))) {      modifiers|=KeyEvent.SHIFT_MASK;    }    if (txtModifiers.getText().contains(KeyEvent.getKeyModifiersText(KeyEvent.ALT_MASK))) {      modifiers|=KeyEvent.ALT_MASK;    }    if (txtModifiers.getText().contains(KeyEvent.getKeyModifiersText(KeyEvent.CTRL_MASK))) {      modifiers|=KeyEvent.CTRL_MASK;    }    if (kcb.modifiers != modifiers) {      bindsChanged=true;      kcb.modifiers=modifiers;    }    if (kcb.key != keyCode) {      bindsChanged=true;      kcb.key=keyCode;    }    if (kcb.isRepeatable != repeatable.isSelected()) {      bindsChanged=true;      kcb.isRepeatable=repeatable.isSelected();    }  }  if (bindsChanged) {    KeyBindParser.writeKeyBindings();  }  ButtonOrderPreferences bop=ButtonOrderPreferences.getInstance();  boolean buttonOrderChanged=false;  for (int i=0; i < movePhaseCommands.getSize(); i++) {    StatusBarPhaseDisplay.PhaseCommand cmd=movePhaseCommands.get(i);    if (cmd.getPriority() != i) {      cmd.setPriority(i);      bop.setValue(cmd.getCmd(),i);      buttonOrderChanged=true;    }  }  if (buttonOrderChanged && (clientgui != null)) {    clientgui.updateButtonPanel(IGame.Phase.PHASE_MOVEMENT);  }  buttonOrderChanged=false;  for (int i=0; i < deployPhaseCommands.getSize(); i++) {    StatusBarPhaseDisplay.PhaseCommand cmd=deployPhaseCommands.get(i);    if (cmd.getPriority() != i) {      cmd.setPriority(i);      bop.setValue(cmd.getCmd(),i);      buttonOrderChanged=true;    }  }  if (buttonOrderChanged && (clientgui != null)) {    clientgui.updateButtonPanel(IGame.Phase.PHASE_DEPLOYMENT);  }  buttonOrderChanged=false;  for (int i=0; i < firingPhaseCommands.getSize(); i++) {    StatusBarPhaseDisplay.PhaseCommand cmd=firingPhaseCommands.get(i);    if (cmd.getPriority() != i) {      cmd.setPriority(i);      bop.setValue(cmd.getCmd(),i);      buttonOrderChanged=true;    }  }  if (buttonOrderChanged && (clientgui != null)) {    clientgui.updateButtonPanel(IGame.Phase.PHASE_FIRING);  }  buttonOrderChanged=false;  for (int i=0; i < physicalPhaseCommands.getSize(); i++) {    StatusBarPhaseDisplay.PhaseCommand cmd=physicalPhaseCommands.get(i);    if (cmd.getPriority() != i) {      cmd.setPriority(i);      bop.setValue(cmd.getCmd(),i);      buttonOrderChanged=true;    }  }  if (buttonOrderChanged && (clientgui != null)) {    clientgui.updateButtonPanel(IGame.Phase.PHASE_PHYSICAL);  }  buttonOrderChanged=false;  for (int i=0; i < targetingPhaseCommands.getSize(); i++) {    StatusBarPhaseDisplay.PhaseCommand cmd=targetingPhaseCommands.get(i);    if (cmd.getPriority() != i) {      cmd.setPriority(i);      bop.setValue(cmd.getCmd(),i);      buttonOrderChanged=true;    }  }  if (buttonOrderChanged && (clientgui != null)) {    clientgui.updateButtonPanel(IGame.Phase.PHASE_TARGETING);  }  setVisible(false);}  }
class C{  AnimatedIcon(Sprite baseSprite,int delay){  setOpaque(false);  int height=baseSprite.getHeight();  int frames=baseSprite.getWidth() / height;  this.sprite=new Sprite[frames];  timer=new Timer(delay,timerTask);  setBorder(BorderFactory.createEmptyBorder(0,2,0,2));  final SpriteStore store=SpriteStore.get();  for (int i=0; i < frames; i++) {    sprite[i]=store.getTile(baseSprite,i * height,0,height,height);  }}  }
class C{  private void startMulticast(Attributes atts){  DistributedSystemConfig config=(DistributedSystemConfig)stack.peek();  String port=atts.getValue(PORT);  config.setMcastPort(parseInt(port));  String address=atts.getValue(ADDRESS);  if (address != null) {    config.setMcastAddress(address);  }}  }
class C{  public static boolean canRead(String path){  return new File(path).canRead();}  }
class C{  public static int maxAbsPcm(byte[] pcmBuf,int offset,int length){  int max=0;  for (int i=0; i < length; i++) {    int pcm=(0xff & pcmBuf[offset++]) + (pcmBuf[offset++] << 8);    if (pcm < 0)     pcm=-pcm;    if (pcm > max)     max=pcm;  }  return max;}  }
class C{  @Deprecated public String(byte[] data,int high,int start,int length){  if (data != null) {    if (start >= 0 && 0 <= length && length <= data.length - start) {      offset=0;      value=new char[length];      count=length;      high<<=8;      for (int i=0; i < count; i++) {        value[i]=(char)(high + (data[start++] & 0xff));      }    } else {      throw new StringIndexOutOfBoundsException();    }  } else {    throw new NullPointerException();  }}  }
class C{  public NondominatedPopulation(DuplicateMode duplicateMode){  this(new ParetoDominanceComparator(),duplicateMode);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-08-13 13:14:13.164 -0400",hash_original_method="BA79D83B122D58D4EE7197B9C667D235",hash_generated_method="D3F693D2609AC15B904C2B9E1FD69898") public static long min(long l1,long l2){  return Math.min(l1,l2);}  }
class C{  public static int toChars(int codePoint,char[] dst,int dstIndex){  if (!isValidCodePoint(codePoint)) {    throw new IllegalArgumentException();  }  if (dst == null) {    throw new NullPointerException();  }  if (dstIndex < 0 || dstIndex >= dst.length) {    throw new IndexOutOfBoundsException();  }  if (isSupplementaryCodePoint(codePoint)) {    if (dstIndex == dst.length - 1) {      throw new IndexOutOfBoundsException();    }    int cpPrime=codePoint - 0x10000;    int high=0xD800 | ((cpPrime >> 10) & 0x3FF);    int low=0xDC00 | (cpPrime & 0x3FF);    dst[dstIndex]=(char)high;    dst[dstIndex + 1]=(char)low;    return 2;  }  dst[dstIndex]=(char)codePoint;  return 1;}  }
class C{  private void addEdge(int id1,int id2){  if ((id1 < 1) || (id1 > size)) {    throw new IllegalArgumentException("no node with identifier " + id1);  }  if ((id2 < 1) || (id2 > size)) {    throw new IllegalArgumentException("no node with identifier " + id2);  }  edges.add(new Edge(id1,id2));}  }
class C{  public DMSLatLonPoint(){}  }
class C{  public EnumRowStatus(String x) throws IllegalArgumentException {  super(x);}  }
class C{  public List<IComment> appendLocalInstructionComment(final Instruction instruction,final String comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException, com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException {  try {    return m_node.getComments().appendLocalInstructionComment(instruction.getNative(),comment);  } catch (  final CouldntSaveDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }catch (  final CouldntLoadDataException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntLoadDataException(exception);  }}  }
class C{  public ContributorsBuilder withActivityTheme(int activityTheme){  this.activityTheme=activityTheme;  return this;}  }
class C{  public DepthChoiceGenerator(int a,int depth){  if ((a < 0) || depth < -1) {    throw new IllegalArgumentException();  }  this.a=a;  this.b=0;  this.depth=depth;  effectiveDepth=depth;  if (depth == -1)   effectiveDepth=a;  if (depth > a)   effectiveDepth=a;  initialize();}  }
class C{  public Builder(){  version=FIXVersion.FIX_4_2;  senderCompId="";  targetCompId="";  heartBtInt=30;  incomingMsgSeqNum=1;  outgoingMsgSeqNum=1;  maxFieldCount=64;  fieldCapacity=64;  rxBufferCapacity=1024;  txBufferCapacity=1024;}  }
class C{  protected String signJWTWithRSA(JWTClaimsSet jwtClaimsSet,OAuthTokenReqMessageContext request) throws IdentityOAuth2Exception {  try {    String tenantDomain=request.getAuthorizedUser().getTenantDomain();    int tenantId=IdentityTenantUtil.getTenantId(tenantDomain);    Key privateKey;    if (!(privateKeys.containsKey(tenantId))) {      KeyStoreManager tenantKSM=KeyStoreManager.getInstance(tenantId);      if (!tenantDomain.equals(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME)) {        String ksName=tenantDomain.trim().replace(".","-");        String jksName=ksName + Constants.KEY_STORE_EXTENSION;        privateKey=tenantKSM.getPrivateKey(jksName,tenantDomain);      } else {        try {          privateKey=tenantKSM.getDefaultPrivateKey();        } catch (        Exception e) {          throw new IdentityOAuth2Exception("Error while obtaining private key for super tenant",e);        }      }      privateKeys.put(tenantId,privateKey);    } else {      privateKey=privateKeys.get(tenantId);    }    JWSSigner signer=new RSASSASigner((RSAPrivateKey)privateKey);    SignedJWT signedJWT=null;    if (signatureAlgorithm instanceof JWSAlgorithm) {      signedJWT=new SignedJWT(new JWSHeader((JWSAlgorithm)signatureAlgorithm),jwtClaimsSet);      signedJWT.sign(signer);      return signedJWT.serialize();    }  } catch (  JOSEException e) {    throw new IdentityOAuth2Exception("Error occurred while signing JWT",e);  }  return null;}  }
class C{  public String removeUnusedTipText(){  return "If true then unused attributes (ones that are not covered by any " + "of the ranges) will be removed from the output.";}  }
class C{  private static UidCriterion findConjugatedUidCriterion(List<Criterion> crits){  for (  Criterion crit : crits) {    if (crit instanceof UidCriterion) {      return (UidCriterion)crit;    } else     if (crit instanceof ConjunctionCriterion) {      return findConjugatedUidCriterion(((ConjunctionCriterion)crit).getCriteria());    }  }  return null;}  }
class C{  private boolean isPrimaryServer(ServerHeartbeat server,UpdatePod update){  int index=getServerIndex(server,update);  if (index < 0) {    return false;  }  for (int i=0; i < update.getNodeCount(); i++) {    UpdateNode node=update.getNode(i);    int primary=node.getServers()[0];    if (index == primary) {      return true;    }  }  return false;}  }
class C{  public AbstractValidator(@NonNull final Context context,@StringRes final int resourceId){  setErrorMessage(context,resourceId);}  }
class C{  public void scanForIgnoredSections(String originalXml){  this.originalXml=originalXml;  SortpomPiScanner sortpomPiScanner=new SortpomPiScanner(logger);  sortpomPiScanner.scan(originalXml);  if (sortpomPiScanner.isScanError()) {    throw new FailureException(sortpomPiScanner.getFirstError());  }  containsIgnoredSections=sortpomPiScanner.containsIgnoredSections();}  }
class C{  public int doFinal(byte[] out,int outOff) throws DataLengthException, IllegalStateException, InvalidCipherTextException {  int blockSize=cipher.getBlockSize();  int resultLen=0;  if (forEncryption) {    if (bufOff == blockSize) {      if ((outOff + 2 * blockSize) > out.length) {        throw new DataLengthException("output buffer too short");      }      resultLen=cipher.processBlock(buf,0,out,outOff);      bufOff=0;    }    byte code=(byte)(blockSize - bufOff);    while (bufOff < blockSize) {      buf[bufOff]=code;      bufOff++;    }    resultLen+=cipher.processBlock(buf,0,out,outOff + resultLen);  } else {    if (bufOff == blockSize) {      resultLen=cipher.processBlock(buf,0,buf,0);      bufOff=0;    } else {      throw new DataLengthException("last block incomplete in decryption");    }    int count=buf[blockSize - 1] & 0xff;    if ((count < 0) || (count > blockSize)) {      throw new InvalidCipherTextException("pad block corrupted");    }    resultLen-=count;    System.arraycopy(buf,0,out,outOff,resultLen);  }  reset();  return resultLen;}  }
class C{  public PcStableRunner(GraphWrapper graphWrapper,Parameters params){  super(graphWrapper.getGraph(),params);}  }
class C{  @Override public synchronized void reset() throws IOException {  if (buf == null) {    throw new IOException("Stream is closed");  }  if (-1 == markpos) {    throw new IOException("Mark has been invalidated.");  }  pos=markpos;}  }
class C{  private boolean isTemplateNamePart(char ch){  return !Character.isWhitespace(ch) && ch != '(' && ch != ')' && ch != '{' && ch != '}' && ch != ';';}  }
class C{  @SuppressLint("NewApi") private void executeSqlBatch(String dbname,String[] queryarr,JSONArray[] jsonparams,String[] queryIDs,CallbackContext cbc){  SQLiteDatabase mydb=getDatabase(dbname);  if (mydb == null) {    cbc.error("database has been closed");    return;  }  String query;  String query_id;  int len=queryarr.length;  JSONArray batchResults=new JSONArray();  for (int i=0; i < len; i++) {    int rowsAffectedCompat=0;    boolean needRowsAffectedCompat=false;    query_id=queryIDs[i];    JSONObject queryResult=null;    String errorMessage="unknown";    try {      boolean needRawQuery=true;      query=queryarr[i];      QueryType queryType=getQueryType(query);      if (queryType == QueryType.update || queryType == QueryType.delete) {        if (android.os.Build.VERSION.SDK_INT >= 11) {          SQLiteStatement myStatement=mydb.compileStatement(query);          if (jsonparams != null) {            bindArgsToStatement(myStatement,jsonparams[i]);          }          int rowsAffected=-1;          try {            rowsAffected=myStatement.executeUpdateDelete();            needRawQuery=false;          } catch (          SQLiteException ex) {            ex.printStackTrace();            errorMessage=ex.getMessage();            Log.v("executeSqlBatch","SQLiteStatement.executeUpdateDelete(): Error=" + errorMessage);            needRawQuery=false;          }catch (          Exception ex) {          }          if (rowsAffected != -1) {            queryResult=new JSONObject();            queryResult.put("rowsAffected",rowsAffected);          }        } else {          rowsAffectedCompat=countRowsAffectedCompat(queryType,query,jsonparams,mydb,i);          needRowsAffectedCompat=true;        }      }      if (queryType == QueryType.insert && jsonparams != null) {        needRawQuery=false;        SQLiteStatement myStatement=mydb.compileStatement(query);        bindArgsToStatement(myStatement,jsonparams[i]);        long insertId;        try {          insertId=myStatement.executeInsert();          queryResult=new JSONObject();          if (insertId != -1) {            queryResult.put("insertId",insertId);            queryResult.put("rowsAffected",1);          } else {            queryResult.put("rowsAffected",0);          }        } catch (        SQLiteException ex) {          ex.printStackTrace();          errorMessage=ex.getMessage();          Log.v("executeSqlBatch","SQLiteDatabase.executeInsert(): Error=" + errorMessage);        }      }      if (queryType == QueryType.begin) {        needRawQuery=false;        try {          mydb.beginTransaction();          queryResult=new JSONObject();          queryResult.put("rowsAffected",0);        } catch (        SQLiteException ex) {          ex.printStackTrace();          errorMessage=ex.getMessage();          Log.v("executeSqlBatch","SQLiteDatabase.beginTransaction(): Error=" + errorMessage);        }      }      if (queryType == QueryType.commit) {        needRawQuery=false;        try {          mydb.setTransactionSuccessful();          mydb.endTransaction();          queryResult=new JSONObject();          queryResult.put("rowsAffected",0);        } catch (        SQLiteException ex) {          ex.printStackTrace();          errorMessage=ex.getMessage();          Log.v("executeSqlBatch","SQLiteDatabase.setTransactionSuccessful/endTransaction(): Error=" + errorMessage);        }      }      if (queryType == QueryType.rollback) {        needRawQuery=false;        try {          mydb.endTransaction();          queryResult=new JSONObject();          queryResult.put("rowsAffected",0);        } catch (        SQLiteException ex) {          ex.printStackTrace();          errorMessage=ex.getMessage();          Log.v("executeSqlBatch","SQLiteDatabase.endTransaction(): Error=" + errorMessage);        }      }      if (needRawQuery) {        queryResult=this.executeSqlStatementQuery(mydb,query,jsonparams[i],cbc);        if (needRowsAffectedCompat) {          queryResult.put("rowsAffected",rowsAffectedCompat);        }      }    } catch (    Exception ex) {      ex.printStackTrace();      errorMessage=ex.getMessage();      Log.v("executeSqlBatch","SQLitePlugin.executeSql[Batch](): Error=" + errorMessage);    }    try {      if (queryResult != null) {        JSONObject r=new JSONObject();        r.put("qid",query_id);        r.put("type","success");        r.put("result",queryResult);        batchResults.put(r);      } else {        JSONObject r=new JSONObject();        r.put("qid",query_id);        r.put("type","error");        JSONObject er=new JSONObject();        er.put("message",errorMessage);        r.put("result",er);        batchResults.put(r);      }    } catch (    JSONException ex) {      ex.printStackTrace();      Log.v("executeSqlBatch","SQLitePlugin.executeSql[Batch](): Error=" + ex.getMessage());    }  }  cbc.success(batchResults);}  }
class C{  public static void openPlayStore(Context context,String packageName){  try {    Intent i=createOldPlayStoreIntent(packageName);    checkContext(context,i);    context.startActivity(i);  } catch (  ActivityNotFoundException e) {    Intent i=createPlayStoreIntent(packageName);    checkContext(context,i);    context.startActivity(i);  }}  }
class C{  private void initResourcesIfNecessary(){  if (centerDrawable == null) {    centerDrawable=getContext().getResources().getDrawable(wheelForeground);  }  if (topShadow == null) {    topShadow=new GradientDrawable(Orientation.TOP_BOTTOM,SHADOWS_COLORS);  }  if (bottomShadow == null) {    bottomShadow=new GradientDrawable(Orientation.BOTTOM_TOP,SHADOWS_COLORS);  }  setBackgroundResource(wheelBackground);}  }
class C{  public ContextNotEmptyException(){  super();}  }
class C{  private static boolean slowEquals(byte[] a,byte[] b){  int diff=a.length ^ b.length;  for (int i=0; i < a.length && i < b.length; i++)   diff|=a[i] ^ b[i];  return diff == 0;}  }
class C{  private void checkDBOfflineInfo(){  Configuration config=_coordinator.queryConfiguration(_coordinator.getSiteId(),Constants.DB_DOWNTIME_TRACKER_CONFIG,_serviceInfo.getName());  DbOfflineEventInfo dbOfflineEventInfo=new DbOfflineEventInfo(config);  String localNodeId=_coordinator.getInetAddessLookupMap().getNodeId();  Long lastActiveTimestamp=dbOfflineEventInfo.geLastActiveTimestamp(localNodeId);  long zkTimeStamp=(lastActiveTimestamp == null) ? TimeUtils.getCurrentTime() : lastActiveTimestamp;  File localDbDir=new File(dbDir);  Date lastModified=getLastModified(localDbDir);  boolean isDirEmpty=lastModified == null || localDbDir.list().length == 0;  long localTimeStamp=(isDirEmpty) ? TimeUtils.getCurrentTime() : lastModified.getTime();  _log.info("Service timestamp in ZK is {}, local file is: {}",zkTimeStamp,localTimeStamp);  long diffTime=(zkTimeStamp > localTimeStamp) ? (zkTimeStamp - localTimeStamp) : 0;  if (diffTime >= MAX_SERVICE_OUTAGE_TIME) {    String errMsg=String.format("We detect database files on local disk are more than %s days older " + "than last time it was seen in the cluster. It may bring stale data into the database, " + "so the service cannot continue to boot. It may be the result of a VM snapshot rollback. "+ "Please contact with EMC support engineer for solution.",diffTime / TimeUtils.DAYS);    alertLog.error(errMsg);    throw new IllegalStateException(errMsg);  }  Long offlineTime=dbOfflineEventInfo.getOfflineTimeInMS(localNodeId);  if (!isDirEmpty && offlineTime != null && offlineTime >= MAX_SERVICE_OUTAGE_TIME) {    String errMsg=String.format("This node is offline for more than %s days. It may bring stale data into " + "database, so the service cannot continue to boot. Please poweroff this node and follow our " + "node recovery procedure to recover this node",offlineTime / TimeUtils.DAYS);    alertLog.error(errMsg);    throw new IllegalStateException(errMsg);  }}  }
class C{  public void updateBottomNavigationItems(boolean addItems){  if (useMenuResource) {    if (addItems) {      navigationAdapter=new AHBottomNavigationAdapter(this,R.menu.bottom_navigation_menu_5);      navigationAdapter.setupWithBottomNavigation(bottomNavigation,tabColors);      bottomNavigation.setNotification("1",3);    } else {      navigationAdapter=new AHBottomNavigationAdapter(this,R.menu.bottom_navigation_menu_3);      navigationAdapter.setupWithBottomNavigation(bottomNavigation,tabColors);    }  } else {    if (addItems) {      AHBottomNavigationItem item4=new AHBottomNavigationItem(getString(R.string.tab_4),ContextCompat.getDrawable(this,R.drawable.ic_maps_local_bar),ContextCompat.getColor(this,R.color.color_tab_4));      AHBottomNavigationItem item5=new AHBottomNavigationItem(getString(R.string.tab_5),ContextCompat.getDrawable(this,R.drawable.ic_maps_place),ContextCompat.getColor(this,R.color.color_tab_5));      bottomNavigation.addItem(item4);      bottomNavigation.addItem(item5);      bottomNavigation.setNotification("1",3);    } else {      bottomNavigation.removeAllItems();      bottomNavigation.addItems(bottomNavigationItems);    }  }}  }
class C{  private void storeNameAndAddress(String name,String address){  if (name != null) {    Settings.Secure.putString(mContentResolver,SECURE_SETTINGS_BLUETOOTH_NAME,name);    mName=name;    if (DBG)     Log.d(TAG,"Stored Bluetooth name: " + Settings.Secure.getString(mContentResolver,SECURE_SETTINGS_BLUETOOTH_NAME));  }  if (address != null) {    Settings.Secure.putString(mContentResolver,SECURE_SETTINGS_BLUETOOTH_ADDRESS,address);    mAddress=address;    if (DBG)     Log.d(TAG,"Stored Bluetoothaddress: " + Settings.Secure.getString(mContentResolver,SECURE_SETTINGS_BLUETOOTH_ADDRESS));  }  if ((name != null) && (address != null)) {    Settings.Secure.putInt(mContentResolver,SECURE_SETTINGS_BLUETOOTH_ADDR_VALID,1);  }}  }
class C{  protected JavaElementDelta find(IJavaElement e){  if (equalsAndSameParent(this.changedElement,e)) {    return this;  } else {    for (int i=0; i < this.affectedChildren.length; i++) {      JavaElementDelta delta=((JavaElementDelta)this.affectedChildren[i]).find(e);      if (delta != null) {        return delta;      }    }  }  return null;}  }
class C{  public void emitNext(){  out.print(line[pos++]);}  }
class C{  private String createSpokenTextMomentXml(String momentId,String nextMomentId,String textToSpeak){  String xml="";  xml+=createStartMomentXml("spoken_text",momentId);  xml+=createNextMomentXml(nextMomentId);  xml+="<text_to_speak>" + textToSpeak + "</text_to_speak>";  xml+=createEndMomentXml();  return xml;}  }
class C{  public static void main(final String[] args) throws Exception {  if ((args.length < 4)) {    System.err.println("java " + UpdatePropUpdater.class.getName() + " oldFile newFile oldVersion newVersion folder files");    System.exit(1);  }  List<String> files=new LinkedList<String>();  for (int i=5; i < args.length; i++) {    files.add(args[i]);  }  UpdatePropUpdater updater=new UpdatePropUpdater(args[0],args[1],args[2],args[3],args[4],files);  updater.process();  System.err.println("Check and update parameter init.file-list.");}  }
class C{  public void importPackage(long pos,IdentifierToken t){  imports.addPackage(t);}  }
class C{  public static Interval oneTo(int count){  return Interval.oneToBy(count,1);}  }
class C{  protected void processSequenceDefinitions(boolean createSequenceTables,boolean createSequences,boolean replaceSequences) throws EclipseLinkException {  Sequencing sequencing=getSession().getSequencing();  if (sequencing != null && sequencing.whenShouldAcquireValueForAll() != Sequencing.AFTER_INSERT) {    HashSet<SequenceDefinition> sequenceDefinitions=buildSequenceDefinitions();    boolean shouldLogExceptionStackTrace=session.getSessionLog().shouldLogExceptionStackTrace();    session.getSessionLog().setShouldLogExceptionStackTrace(false);    HashSet<String> createdSequenceTableNames=new HashSet();    HashSet<String> droppedSequenceTableNames=new HashSet();    for (    SequenceDefinition sequenceDefinition : sequenceDefinitions) {      processSequenceDefinition(sequenceDefinition,createSequenceTables,createSequences,replaceSequences,createdSequenceTableNames,droppedSequenceTableNames);    }    session.getSessionLog().setShouldLogExceptionStackTrace(shouldLogExceptionStackTrace);  }}  }
class C{  public JCheckBox(Icon icon){  this(null,icon,false);}  }
class C{  public void testWriteWholePackedFieldsMessage() throws Exception {  TestPackedTypes message=TestUtil.getPackedSet();  byte[] rawBytes=message.toByteArray();  assertEqualBytes(TestUtil.getGoldenPackedFieldsMessage().toByteArray(),rawBytes);}  }
class C{  public boolean showInfoMessage(String message){  TextView infoMessageTv=(TextView)findViewById(R.id.flying_message);  if (infoMessageTv != null) {    infoMessageTv.setText(message);    animateLayouts(infoMessageTv);    return true;  } else {    logger.warn("TextView not available, so couldn't show flying message");  }  return false;}  }
class C{  protected boolean beforeSave(boolean newRecord){  log.fine("New=" + newRecord);  if (newRecord && getParent().isComplete()) {    log.saveError("ParentComplete",Msg.translate(getCtx(),"C_InvoiceLine"));    return false;  }  setInvoice(getParent());  if (getC_Charge_ID() != 0) {    if (getM_Product_ID() != 0)     setM_Product_ID(0);  } else {    if (!m_priceSet && Env.ZERO.compareTo(getPriceActual()) == 0 && Env.ZERO.compareTo(getPriceList()) == 0)     setPrice();  }  if (getC_Tax_ID() == 0)   setTax();  if (getLine() == 0) {    String sql="SELECT COALESCE(MAX(Line),0)+10 FROM C_InvoiceLine WHERE C_Invoice_ID=?";    int ii=DB.getSQLValue(get_TrxName(),sql,getC_Invoice_ID());    setLine(ii);  }  if (getC_UOM_ID() == 0) {    int C_UOM_ID=MUOM.getDefault_UOM_ID(getCtx());    if (C_UOM_ID > 0)     setC_UOM_ID(C_UOM_ID);  }  if (newRecord || is_ValueChanged("QtyEntered"))   setQtyEntered(getQtyEntered());  if (newRecord || is_ValueChanged("QtyInvoiced"))   setQtyInvoiced(getQtyInvoiced());  setLineNetAmt();  if (m_IsSOTrx || getTaxAmt().compareTo(Env.ZERO) == 0)   setTaxAmt();  return true;}  }
class C{  public static void deleteInvisibleNodes(final ZyGraph graph){  Preconditions.checkNotNull(graph,"IE01729: Graph argument can not be null");  graph.deleteNodes(NodeFunctions.getInvisibleNodes(graph));}  }
class C{  private double computeAverageFanOut(Iterable<Page> pages){  Set<Integer> pageIDs=new HashSet<Integer>();  while (pages.iterator().hasNext()) {    pageIDs.add(pages.iterator().next().getPageId());  }  if (pageIDs == null) {    logger.error("Cannot compute average fan-out of an empty page set.");    return 0.0;  }  int fanOutCounter=0;  Session session=this.wiki.__getHibernateSession();  session.beginTransaction();  Iterator results=session.createQuery("select page.outLinks, page.pageId from Page as page").list().iterator();  while (results.hasNext()) {    Object[] row=(Object[])results.next();    Set outLinks=(Set)row[0];    Integer pageId=(Integer)row[1];    if (pageIDs.contains(pageId)) {      fanOutCounter+=outLinks.size();    }  }  session.getTransaction().commit();  return (double)fanOutCounter / this.getNumberOfPages();}  }
class C{  protected static int convertType(Element e,BridgeContext ctx){  String s=e.getAttributeNS(null,SVG_TYPE_ATTRIBUTE);  if (s.length() == 0) {    throw new BridgeException(ctx,e,ERR_ATTRIBUTE_MISSING,new Object[]{SVG_TYPE_ATTRIBUTE});  }  if (SVG_DISCRETE_VALUE.equals(s)) {    return ComponentTransferFunction.DISCRETE;  }  if (SVG_IDENTITY_VALUE.equals(s)) {    return ComponentTransferFunction.IDENTITY;  }  if (SVG_GAMMA_VALUE.equals(s)) {    return ComponentTransferFunction.GAMMA;  }  if (SVG_LINEAR_VALUE.equals(s)) {    return ComponentTransferFunction.LINEAR;  }  if (SVG_TABLE_VALUE.equals(s)) {    return ComponentTransferFunction.TABLE;  }  throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_TYPE_ATTRIBUTE,s});}  }
class C{  public static void main(String[] args){  TestValueTag tester=new TestValueTag();  run(tester,ARGS,TEST,NEGATED_TEST);  tester.printSummary();}  }
class C{  public void testMoveFileSourceAndDestinationMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR,DIR_NEW),null);  igfs.rename(FILE,SUBDIR_NEW);  checkExist(igfs,SUBDIR,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  double zConvFactor=1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  zConvFactor=Double.parseDouble(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    double[] N=new double[8];    float progress=0;    int[] Dy={-1,0,1,1,1,0,-1,-1};    int[] Dx={1,1,1,0,-1,-1,-1,0};    final double radToDeg=180 / Math.PI;    double Zx, Zy, Zxx, Zyy, Zxy, Zx2, Zy2, p, q;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=true;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double gridRes=inputFile.getCellSizeX();    double gridResTimes2=gridRes * 2;    double gridResSquared=gridRes * gridRes;    double fourTimesGridResSquared=gridResSquared * 4;    double curv;    double noData=inputFile.getNoDataValue();    if (inputFile.getXYUnits().toLowerCase().contains("deg") || inputFile.getProjection().toLowerCase().contains("geog")) {      double midLat=(inputFile.getNorth() - inputFile.getSouth()) / 2.0;      if (midLat <= 90 && midLat >= -90) {        zConvFactor=1.0 / (113200 * Math.cos(Math.toRadians(midLat)));      }    }    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette("blue_white_red.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          for (int i=0; i < 8; i++) {            N[i]=inputFile.getValue(row + Dy[i],col + Dx[i]);            if (N[i] != noData) {              N[i]=N[i] * zConvFactor;            } else {              N[i]=z * zConvFactor;            }          }          Zx=(N[1] - N[5]) / gridResTimes2;          Zy=(N[7] - N[3]) / gridResTimes2;          Zxx=(N[1] - 2 * z + N[5]) / gridResSquared;          Zyy=(N[7] - 2 * z + N[3]) / gridResSquared;          Zxy=(-N[6] + N[0] + N[4] - N[2]) / fourTimesGridResSquared;          Zx2=Zx * Zx;          Zy2=Zy * Zy;          p=Zx2 + Zy2;          q=p + 1;          if (p > 0) {            curv=(Zxx * Zx2 + 2 * Zxy * Zx* Zy + Zyy * Zy2) / (p * Math.pow(q,1.5));            outputFile.setValue(row,col,curv * radToDeg * 100);          } else {            outputFile.setValue(row,col,noData);          }        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean isLogUpToDate() throws InterruptedException {  if (peer == null) {    return cmember.sentRid.index > 0 && cmember.sentRid.index == cmember.getSavedIndex();  } else {    return cmember.sentRid.index > 0 && cmember.sentRid.index == peer.matchIndex;  }}  }
class C{  protected InputContext(){  InputMethodManager imm=InputMethodManager.getInstance();synchronized (InputContext.class) {    if (!inputMethodSelectionKeyInitialized) {      inputMethodSelectionKeyInitialized=true;      if (imm.hasMultipleInputMethods()) {        initializeInputMethodSelectionKey();      }    }  }  selectInputMethod(imm.getDefaultKeyboardLocale());}  }
class C{  public float[] ToArray(){  return points;}  }
class C{  private void killWolves(StendhalRPZone zone){  if (Rand.throwCoin() == 1) {    for (    RPObject obj : zone) {      if (obj instanceof Creature) {        Creature wolf=(Creature)obj;        if ("wolf".equals(wolf.get("subclass")) && getPen(zone).contains(wolf)) {          wolf.onDamaged(this,wolf.getHP());          return;        }      }    }  }}  }
class C{  public Promise<Void> replaceOwnStream(CountedReference<WebRTCMediaStream> stream){  return ask(new PeerNodeActor.ReplaceOwnStream(stream.acquire()));}  }
class C{  public TPS filter(final long fromTime,final long toTime,final INameFilter filter){  if (fromTime < MIN_TIMESTAMP)   throw new IllegalArgumentException();  if (toTime <= fromTime)   throw new IllegalArgumentException();  if (log.isDebugEnabled()) {    log.debug("fromTime=" + fromTime + ", toTime="+ toTime+ ", filter="+ filter+ ", preFilter="+ this);  }  final TPS tps=new TPS(this.schema,this.writeTime);  final Iterator<Map.Entry<TP,ITPV>> itr=tuples.entrySet().iterator();  while (itr.hasNext()) {    final Map.Entry<TP,ITPV> entry=itr.next();    final TP tp=entry.getKey();    if (tp.timestamp < fromTime || tp.timestamp >= toTime) {      if (log.isDebugEnabled()) {        log.debug("rejecting on timestamp: " + tp);      }      continue;    }    if (filter != null && !filter.accept(tp.name)) {      if (log.isDebugEnabled()) {        log.debug("rejecting on filter: " + tp);      }      continue;    }    tps.tuples.put(tp,entry.getValue());  }  if (log.isDebugEnabled()) {    log.debug("postFilter: " + tps);  }  return tps;}  }
class C{  public static boolean isMagic(String path){  return COMMIT_MSG.equals(path) || MERGE_LIST.equals(path);}  }
class C{  public static void isSecurityInfo(String question,String answer) throws ValidationException {  BLValidator.isDescription("securityQuestion",question,false);  BLValidator.isDescription("securityAnswer",answer,false);  if (!GenericValidator.isBlankOrNull(question) || !GenericValidator.isBlankOrNull(answer)) {    if (GenericValidator.isBlankOrNull(question) || GenericValidator.isBlankOrNull(answer)) {      ValidationException vf=new ValidationException(ReasonEnum.SECURITY_INFO,null,null);      logValidationFailure(vf);      throw vf;    }  }}  }
class C{  public void enqueueEntries(final byte[] initiator,final String profileHandle,final List<AnchorURL> hyperlinks,final boolean replace,final int timezoneOffset){  byte[] handle=UTF8.getBytes(profileHandle);  final CrawlProfile profile=this.crawler.get(handle);  if (profile == null) {    String error;    if (hyperlinks.size() == 1) {      error="Rejected URL : " + hyperlinks.get(0).toNormalform(false) + ". Reason : LOST STACKER PROFILE HANDLE '"+ profileHandle+ "'";    } else {      error="Rejected " + hyperlinks.size() + " crawl entries. Reason : LOST STACKER PROFILE HANDLE '"+ profileHandle+ "'";    }    CrawlStacker.log.info(error);    throw new IllegalCrawlProfileException("Profile " + profileHandle + " is no more active");  }  if (replace) {    Set<String> hosthashes=new HashSet<String>();    for (    final AnchorURL url : hyperlinks) {      if (url == null)       continue;      final byte[] urlhash=url.hash();      byte[] hosthash=new byte[6];      System.arraycopy(urlhash,6,hosthash,0,6);      hosthashes.add(ASCII.String(hosthash));    }    this.nextQueue.errorURL.removeHosts(hosthashes);  }  for (  final AnchorURL url : hyperlinks) {    if (url == null)     continue;    final byte[] urlhash=url.hash();    if (replace) {      this.indexSegment.fulltext().remove(urlhash);      String u=url.toNormalform(true);      if (u.endsWith("/")) {        u=u + "index.html";      } else       if (!u.contains(".")) {        u=u + "/index.html";      }      try {        final byte[] uh=new DigestURL(u).hash();        this.indexSegment.fulltext().remove(uh);        this.nextQueue.noticeURL.removeByURLHash(uh);      } catch (      final MalformedURLException e1) {      }    }    if (url.getProtocol().equals("ftp")) {      String userInfo=url.getUserInfo();      int p=userInfo == null ? -1 : userInfo.indexOf(':');      String user=userInfo == null ? FTPClient.ANONYMOUS : userInfo.substring(0,p);      String pw=userInfo == null || p == -1 ? "anomic" : userInfo.substring(p + 1);      enqueueEntriesFTP(initiator,profileHandle,url.getHost(),url.getPort(),user,pw,replace,timezoneOffset);    } else {      enqueueEntry(new Request(initiator,url,null,url.getNameProperty(),new Date(),profileHandle,0,timezoneOffset));    }  }}  }
class C{  @Override public boolean isInteractive(){  return true;}  }
class C{  private static void weakHashLength32WithSeeds(byte[] bytes,int offset,long seedA,long seedB,long[] output){  long part1=load64(bytes,offset);  long part2=load64(bytes,offset + 8);  long part3=load64(bytes,offset + 16);  long part4=load64(bytes,offset + 24);  seedA+=part1;  seedB=rotateRight(seedB + seedA + part4,21);  long c=seedA;  seedA+=part2;  seedA+=part3;  seedB+=rotateRight(seedA,44);  output[0]=seedA + part4;  output[1]=seedB + c;}  }
class C{  public boolean isPaintBoundaryLines(){  Object oo=get_Value(COLUMNNAME_IsPaintBoundaryLines);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public NameStaticPair(TMember member){  this(member.getName(),member.isStatic());}  }
class C{  CacheClusterMetricsMXBeanImpl(GridCacheAdapter<?,?> cache){  assert cache != null;  this.cache=cache;}  }
class C{  private void addSharingProfiles(Collection<SharingProfile> sharingProfiles) throws GuacamoleException {  for (  SharingProfile sharingProfile : sharingProfiles) {    String primaryConnectionIdentifier=sharingProfile.getPrimaryConnectionIdentifier();    APIConnection primaryConnection=retrievedConnections.get(primaryConnectionIdentifier);    if (primaryConnection != null) {      Collection<APISharingProfile> children=primaryConnection.getSharingProfiles();      if (children == null) {        children=new ArrayList<APISharingProfile>();        primaryConnection.setSharingProfiles(children);      }      children.add(new APISharingProfile(sharingProfile));    } else     logger.debug("Sharing profile \"{}\" cannot be added to the " + "tree: primary connection \"{}\" does not actually " + "exist.",sharingProfile.getIdentifier(),primaryConnectionIdentifier);  }}  }
class C{  public PixelMatrixEditorException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  private void windowingAndMdctLtp(float out[],float in[],IndividualChannelStream ics){  final float lwindow[]=ics.useKbWindow[0] ? ff_aac_kbd_long_1024 : ff_sine_1024;  final float swindow[]=ics.useKbWindow[0] ? ff_aac_kbd_short_128 : ff_sine_128;  final float lwindowPrev[]=ics.useKbWindow[1] ? ff_aac_kbd_long_1024 : ff_sine_1024;  final float swindowPrev[]=ics.useKbWindow[1] ? ff_aac_kbd_short_128 : ff_sine_128;  if (ics.windowSequence[0] != LONG_STOP_SEQUENCE) {    FloatDSP.vectorFmul(in,0,in,0,lwindowPrev,0,1024);  } else {    Arrays.fill(in,0,448,0f);    FloatDSP.vectorFmul(in,448,in,448,swindowPrev,0,128);  }  if (ics.windowSequence[0] != LONG_START_SEQUENCE) {    FloatDSP.vectorFmulReverse(in,1024,in,1024,lwindow,0,1024);  } else {    FloatDSP.vectorFmulReverse(in,1024 + 448,in,1024 + 448,swindow,0,128);    Arrays.fill(in,1024 + 576,1024 + 576 + 448,0f);  }  ac.mdctLtp.mdctCalc(out,0,in,0);}  }
class C{  @SuppressWarnings({"unchecked"}) public List<Object> convert(List<Object> tuple){  Map<String,Object> m=(Map<String,Object>)tuple.get(1);  String streamName=cachedSelector.getStreamName(m);  if (!metadata.getActiveStreamNames().contains(streamName)) {    if (LOG.isDebugEnabled()) {      LOG.debug("streamName {} is not within activeStreamNames {}",streamName,metadata.getActiveStreamNames());    }    return null;  }  Object timeObject=m.get(metadata.getTimestampColumn());  long timestamp=0L;  if (timeObject == null) {    if (LOG.isDebugEnabled()) {      LOG.debug("continue with current timestamp since no timestamp column specified! Metadata : {} ",metadata);    }    timestamp=System.currentTimeMillis();  } else   if (timeObject instanceof Number) {    timestamp=((Number)timeObject).longValue();  } else {    String timestampFieldValue=(String)m.get(metadata.getTimestampColumn());    String dateFormat=metadata.getTimestampFormat();    if (Strings.isNullOrEmpty(dateFormat)) {      if (LOG.isDebugEnabled()) {        LOG.debug("continue with current timestamp becuase no data format sepcified! Metadata : {} ",metadata);      }      timestamp=System.currentTimeMillis();    } else {      try {        SimpleDateFormat sdf=new SimpleDateFormat(metadata.getTimestampFormat());        timestamp=sdf.parse(timestampFieldValue).getTime();      } catch (      Exception ex) {        LOG.error("continue with current timestamp because error happens while parsing timestamp column " + metadata.getTimestampColumn() + " with format "+ metadata.getTimestampFormat());        timestamp=System.currentTimeMillis();      }    }  }  return Arrays.asList(tuple.get(0),streamName,timestamp,tuple.get(1));}  }
class C{  public void redraw(){  invalidate();  requestLayout();}  }
class C{  public int totalShards(){  return totalShards;}  }
class C{  public void decl(char[] buff,int offset,int length) throws SAXException {  String s=new String(buff,offset,length);  String name=null;  String systemid=null;  String publicid=null;  String[] v=split(s);  if (v.length > 0 && "DOCTYPE".equals(v[0])) {    if (theDoctypeIsPresent)     return;    theDoctypeIsPresent=true;    if (v.length > 1) {      name=v[1];      if (v.length > 3 && "SYSTEM".equals(v[2])) {        systemid=v[3];      } else       if (v.length > 3 && "PUBLIC".equals(v[2])) {        publicid=v[3];        if (v.length > 4) {          systemid=v[4];        } else {          systemid="";        }      }    }  }  publicid=trimquotes(publicid);  systemid=trimquotes(systemid);  if (name != null) {    publicid=cleanPublicid(publicid);    theLexicalHandler.startDTD(name,publicid,systemid);    theLexicalHandler.endDTD();    theDoctypeName=name;    theDoctypePublicId=publicid;    if (theScanner instanceof Locator) {      theDoctypeSystemId=((Locator)theScanner).getSystemId();      try {        theDoctypeSystemId=new URL(new URL(theDoctypeSystemId),systemid).toString();      } catch (      Exception e) {      }    }  }}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawDefaultBackground();  drawCenteredString(fontRendererObj,"Server Finder",width / 2,20,16777215);  drawCenteredString(fontRendererObj,"This will search for servers with similar IPs",width / 2,40,10526880);  drawCenteredString(fontRendererObj,"to the IP you type into the field below.",width / 2,50,10526880);  drawCenteredString(fontRendererObj,"The servers it finds will be added to your server list.",width / 2,60,10526880);  drawString(fontRendererObj,"Server address:",width / 2 - 100,height / 4 + 24,10526880);  ipBox.drawTextBox();  drawString(fontRendererObj,"Max. threads:",width / 2 - 100,height / 4 + 60,10526880);  maxThreadsBox.drawTextBox();  drawCenteredString(fontRendererObj,state.toString(),width / 2,height / 4 + 73,10526880);  drawString(fontRendererObj,"Checked: " + checked + " / 1792",width / 2 - 100,height / 4 + 84,10526880);  drawString(fontRendererObj,"Working: " + working,width / 2 - 100,height / 4 + 94,10526880);  super.drawScreen(par1,par2,par3);}  }
class C{  public int lastPageIndex(){  return isRtl() ? 0 : pages.size() - 1;}  }
class C{  protected List<List<Coord>> parseMultilinestring() throws IOException {  List<List<Coord>> list=new ArrayList<List<Coord>>();  String multiContents=readNestedContents(reader);  StringReader r2=new StringReader(multiContents);  String lineString=readNestedContents(r2);  while (lineString.length() > 0) {    list.add(parseLineString(lineString));    lineString=readNestedContents(r2);  }  return list;}  }
class C{  public synchronized void dump(){  Iterator<Map.Entry<Thread,ThreadStatus>> i=mThreadStatus.entrySet().iterator();  while (i.hasNext()) {    Map.Entry<Thread,ThreadStatus> entry=i.next();    Log.v(TAG,"[Dump] Thread " + entry.getKey() + " ("+ entry.getKey().getId()+ ")'s status is "+ entry.getValue());  }}  }
class C{  private ClassifierTree son(int index){  return m_sons[index];}  }
class C{  public static KNNHeap newHeap(KNNList exist){  return DBIDFactory.FACTORY.newHeap(exist);}  }
class C{  public static void main(String[] args) throws IOException, DMLException {  Configuration conf=new Configuration(ConfigurationManager.getCachedJobConf());  String[] otherArgs=new GenericOptionsParser(conf,args).getRemainingArgs();  try {    DMLScript.executeScript(conf,otherArgs);  } catch (  ParseException pe) {    System.err.println(pe.getMessage());  }catch (  DMLScriptException e) {    System.err.println(e.getMessage());  }}  }
class C{  private static <T>T retry(File input,Throwing.Function<File,T> function){  long start=System.currentTimeMillis();  Throwable lastException;  do {    try {      return function.apply(input);    } catch (    Throwable e) {      lastException=e;      Errors.suppress().run(null);    }  } while (System.currentTimeMillis() - start < MS_RETRY);  throw Errors.asRuntime(lastException);}  }
class C{  public HashCode append(final char value){  iTotal=iTotal * iConstant + value;  return this;}  }
class C{  public ReindexServiceImpl(final TaskExecutor executor,final ClusterService clusterService,final NodeService nodeService){  super(executor);  this.clusterService=clusterService;  this.nodeService=nodeService;}  }
class C{  private boolean isMaskingFirst(StorageSystem array){  return (array.getSystemType().equals(DiscoveredDataObject.Type.vnxblock.name()) || array.getSystemType().equals(DiscoveredDataObject.Type.vnxe.name()) || array.getSystemType().equals(DiscoveredDataObject.Type.unity.name())|| array.getSystemType().equals(DiscoveredDataObject.Type.openstack.name()));}  }
class C{  public static boolean isMinimumCopiesComplete(ImageReplicatorService.State state,int batchSize){  checkArgument(batchSize > 0,"batchSize needs to be greater than 0.");  if (state.finishedCopies != null && state.finishedCopies >= batchSize) {    return true;  }  return false;}  }
class C{  @Override public int hashCode(){  return System.identityHashCode(this);}  }
class C{  public void go(OutputStream out) throws IOException {  go(new JCalWriter(out,wrapInArray()));}  }
class C{  public void compute(){  checksum=0xff & checksum;  checksum=0xff - checksum;  log.debug("computed checksum is " + ByteUtils.formatByte(checksum));}  }
class C{  protected HideShowPanel(){}  }
class C{  private void sendStageProgressPatch(TaskState.TaskStage stage){  ServiceUtils.logInfo(this,"Sending stage progress path %s",stage);  TaskUtils.sendSelfPatch(this,buildPatch(stage,null));}  }
class C{  public Object remove(int index){  return index >= 0 && index < this.length() ? this.myArrayList.remove(index) : null;}  }
class C{  public static ThreadFactory customThreadFactory(String namePrefix){  return new CustomThreadFactory(namePrefix);}  }
class C{  @LogMessageDoc(level="INFO",message="Listening for internal floodlight RPC on {port}",explanation="The internal RPC service is ready for connections") protected void startServer(ChannelPipelineFactory pipelineFactory){  final ServerBootstrap bootstrap=new ServerBootstrap(new NioServerSocketChannelFactory(bossExecutor,workerExecutor));  bootstrap.setOption("reuseAddr",true);  bootstrap.setOption("child.keepAlive",true);  bootstrap.setOption("child.tcpNoDelay",true);  bootstrap.setOption("child.sendBufferSize",SEND_BUFFER_SIZE);  bootstrap.setOption("child.receiveBufferSize",SEND_BUFFER_SIZE);  bootstrap.setPipelineFactory(pipelineFactory);  serverBootstrap=bootstrap;  int port=syncManager.getClusterConfig().getNode().getPort();  InetSocketAddress sa;  String listenAddress=syncManager.getClusterConfig().getListenAddress();  if (listenAddress != null)   sa=new InetSocketAddress(listenAddress,port); else   sa=new InetSocketAddress(port);  cg.add(bootstrap.bind(sa));  logger.info("Listening for internal floodlight RPC on {}",sa);}  }
class C{  public TypeResolver(ImportList importList){  this.imports=importList;}  }
class C{  public byte[] makeTile(double uvx,double uvy,int zoomLevel,List<Layer> layers,Proj proj,Paint background){  Point2D center=tileUVToLatLon(new Point2D.Double(uvx + .5,uvy + .5),zoomLevel);  proj.setScale(mtcTransform.getScaleForZoom(zoomLevel));  proj.setCenter(center);  proj.setHeight(TILE_SIZE);  proj.setWidth(TILE_SIZE);  return createImageFromLayers(proj,-1,-1,layers,background);}  }
class C{  @Override public void initialize(final RPObject object){  super.initialize(object);  open=object.has("open");}  }
class C{  @ReactMethod public void rGetIDs(Callback errorCallback,Callback successCallback){  try {    ArrayList<Integer> ids=mNotificationManager.getIDs();    WritableArray rids=new WritableNativeArray();    for (    Integer id : ids) {      rids.pushInt(id);    }    successCallback.invoke((ReadableArray)rids);  } catch (  Exception e) {    errorCallback.invoke(e.getMessage());    Log.e("ReactSystemNotification","NotificationModule: rGetIDs Error: " + Log.getStackTraceString(e));  }}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length > 1) {    BufferedImage firstImage=ImageIO.read(new File(args[0]));    ImageOutputStream output=new FileImageOutputStream(new File(args[args.length - 1]));    GifSequenceWriter writer=new GifSequenceWriter(output,firstImage.getType(),1,false);    writer.writeToSequence(firstImage);    for (int i=1; i < args.length - 1; i++) {      BufferedImage nextImage=ImageIO.read(new File(args[i]));      writer.writeToSequence(nextImage);    }    writer.close();    output.close();  } else {    System.out.println("Usage: java GifSequenceWriter [list of gif files] [output file]");  }}  }
class C{  Pair<RexNode,Map<String,Integer>> lookupExp(SqlQualified qualified){  if (nameToNodeMap != null && qualified.prefixLength == 1) {    RexNode node=nameToNodeMap.get(qualified.identifier.names.get(0));    if (node == null) {      throw Util.newInternal("Unknown identifier '" + qualified.identifier + "' encountered while expanding expression");    }    return Pair.of(node,null);  }  int[] offsets={-1};  final SqlValidatorScope[] ancestorScopes={null};  SqlValidatorNamespace foundNs=scope.resolve(qualified.prefix(),ancestorScopes,offsets);  if (foundNs == null) {    return null;  }  SqlValidatorScope ancestorScope=ancestorScopes[0];  boolean isParent=ancestorScope != scope;  if ((inputs != null) && !isParent) {    int offset=offsets[0];    final LookupContext rels=new LookupContext(this,inputs,systemFieldList.size());    final RexNode node=lookup(offset,rels);    if (node == null) {      return null;    } else {      return Pair.of(node,null);    }  } else {    DeferredLookup lookup=new DeferredLookup(this,qualified.identifier.names.get(0));    final CorrelationId correlId=cluster.createCorrel();    mapCorrelToDeferred.put(correlId,lookup);    if (offsets[0] < 0) {      return Pair.of(rexBuilder.makeCorrel(foundNs.getRowType(),correlId),null);    } else {      final RelDataTypeFactory.FieldInfoBuilder builder=typeFactory.builder();      final ListScope ancestorScope1=(ListScope)ancestorScopes[0];      final ImmutableMap.Builder<String,Integer> fields=ImmutableMap.builder();      int i=0;      int offset=0;      for (      SqlValidatorNamespace c : ancestorScope1.getChildren()) {        builder.addAll(c.getRowType().getFieldList());        if (i == offsets[0]) {          for (          RelDataTypeField field : c.getRowType().getFieldList()) {            fields.put(field.getName(),field.getIndex() + offset);          }        }        ++i;        offset+=c.getRowType().getFieldCount();      }      final RexNode c=rexBuilder.makeCorrel(builder.uniquify().build(),correlId);      return Pair.<RexNode,Map<String,Integer>>of(c,fields.build());    }  }}  }
class C{  public void move(int from,int to,int count){  if (!valid()) {    return;  }  invalidateLineMapAfter(Math.min(from,to));  Point[] itemsToMove=new Point[count];  for (int i=from; i < from + count; i++) {    itemsToMove[i - from]=sizeMap.get(i);  }  boolean movingForward=from - to > 0;  int itemsToShift=Math.abs(from - to);  if (!movingForward) {    itemsToShift-=count;  }  int shiftIndex=movingForward ? from - 1 : from + count;  int shiftIndexStep=movingForward ? -1 : 1;  int shifted=0;  while (shifted < itemsToShift) {    sizeMap.put(shiftIndex - (shiftIndexStep) * count,sizeMap.get(shiftIndex));    shiftIndex+=shiftIndexStep;    shifted++;  }  int setIndex=to;  if (!movingForward) {    setIndex=from + itemsToShift;  }  for (  Point item : itemsToMove) {    sizeMap.put(setIndex++,item);  }  refreshLineMap();}  }
class C{  public CMSSignedData generate(CMSProcessable content,Provider sigProvider) throws NoSuchAlgorithmException, CMSException {  return generate(content,false,sigProvider);}  }
class C{  public void analyzeLastItAndWriteResults(){  calculateLastItResults();  writeLastItAnalysis();}  }
class C{  public JavaLogger(boolean init){  impl=Logger.getLogger("");  if (init) {    configure(null);    quiet=quiet0;  } else   quiet=true;}  }
class C{  public static JUnitCommandLineParseResult parse(String[] args){  JUnitCommandLineParseResult result=new JUnitCommandLineParseResult();  result.parseArgs(args);  return result;}  }
class C{  private static void addScreen(String screeName){  if (history.size() >= MAX_HISTORY) {    history.remove(0);  }  history.add(screeName);}  }
class C{  private static int patternMatchVariance(int[] counters,int[] pattern,int maxIndividualVariance){  int numCounters=counters.length;  int total=0;  int patternLength=0;  for (int i=0; i < numCounters; i++) {    total+=counters[i];    patternLength+=pattern[i];  }  if (total < patternLength) {    return Integer.MAX_VALUE;  }  int unitBarWidth=(total << INTEGER_MATH_SHIFT) / patternLength;  maxIndividualVariance=(maxIndividualVariance * unitBarWidth) >> 8;  int totalVariance=0;  for (int x=0; x < numCounters; x++) {    int counter=counters[x] << INTEGER_MATH_SHIFT;    int scaledPattern=pattern[x] * unitBarWidth;    int variance=counter > scaledPattern ? counter - scaledPattern : scaledPattern - counter;    if (variance > maxIndividualVariance) {      return Integer.MAX_VALUE;    }    totalVariance+=variance;  }  return totalVariance / total;}  }
class C{  private static void edit(NetworkForm network){  renderArgs.put("virtualArrayOptions",dataObjectOptions(VirtualArrayUtils.getVirtualArrays()));  renderArgs.put(VIRTUAL_ARRAY_PARAM,params.get(VIRTUAL_ARRAY_PARAM));  renderArgs.put("dataTable",NetworkEndpointDataTable.createDataTable(network.type));  render("@edit",network);}  }
class C{  private boolean invokeLongClickMethod(Object handler,String methodName,Object... params){  if (handler == null)   return false;  Method method=null;  try {    method=handler.getClass().getDeclaredMethod(methodName,View.class);    if (method != null) {      Object obj=method.invoke(handler,params);      return obj == null ? false : Boolean.valueOf(obj.toString());    } else     throw new AbAppException("no such method:" + methodName);  } catch (  Exception e) {    e.printStackTrace();  }  return false;}  }
class C{  private void removeNPC(String name){  SpeakerNPC npc=NPCList.get().get(name);  if (npc == null) {    return;  }  npc.getZone().remove(npc);}  }
class C{  public void loadArgs(final int arg,final int count){  int index=getArgIndex(arg);  for (int i=0; i < count; ++i) {    Type t=argumentTypes[arg + i];    loadInsn(t,index);    index+=t.getSize();  }}  }
class C{  public static void resetThreadsBeginN(){  THREADS_BEGIN_N_1D=32768;  THREADS_BEGIN_N_2D=65536;  THREADS_BEGIN_N_3D=65536;}  }
class C{  public static <Type>ConjunctiveConstraint<Type> create(@NonNull final Constraint<Type>[] constraints){  return new ConjunctiveConstraint<>(constraints);}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public p addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public ScriptNotFoundException(){  super();}  }
class C{  public void removeComponent(File includeSource){  sources.remove(new LocalFile(includeSource));}  }
class C{  private Builder(){  super(com.linkedin.camus.example.records.DummyLog2.SCHEMA$);}  }
class C{  @Override public synchronized boolean containsAll(Collection<?> collection){  return super.containsAll(collection);}  }
class C{  private int runClientSide(String args[],String serviceUrlStr) throws Exception {  System.out.println("SecurityTest::runClientSide: Start");  List<String> opts=buildCommandLine(args);  opts.add("-serviceUrl");  opts.add(serviceUrlStr);  int exitCode=0;  String[] optsArray=opts.toArray(new String[0]);  ProcessBuilder pb=new ProcessBuilder(optsArray);  Process p=ProcessTools.startProcess("SecurityTest$ClientSide",pb);  try {    exitCode=p.waitFor();    if (exitCode != 0) {      System.out.println("Subprocess unexpected exit value of [" + exitCode + "]. Expected 0.\n");    }  } catch (  InterruptedException e) {    System.out.println("Parent process interrupted with exception : \n " + e + " :");    p.destroyForcibly();    throw new RuntimeException("Parent process interrupted with exception : \n " + e + " :");  } finally {    if (p.isAlive()) {      p.destroyForcibly();    }    System.out.println("SecurityTest::runClientSide: Done");    return exitCode;  }}  }
class C{  public JTextArea(){  this(null,null,0,0);}  }
class C{  private Node enq(final Node node){  for (; ; ) {    Node t=tail;    if (t == null) {      if (compareAndSetHead(new Node()))       tail=head;    } else {      node.prev=t;      if (compareAndSetTail(t,node)) {        t.next=node;        return t;      }    }  }}  }
class C{  public void addActionListener(ActionListener listener){  listenerList.add(ActionListener.class,listener);}  }
class C{  public int[] rowTrue(int i){  return actuals.get(i);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_RECORD_ENTITY_2__TRACE_RECORD_1:    setTrace_record_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public boolean login() throws LoginException {  if (refreshKrb5Config) {    try {      if (debug) {        System.out.println("Refreshing Kerberos configuration");      }      sun.security.krb5.Config.refresh();    } catch (    KrbException ke) {      LoginException le=new LoginException(ke.getMessage());      le.initCause(ke);      throw le;    }  }  String principalProperty=System.getProperty("sun.security.krb5.principal");  if (principalProperty != null) {    krb5PrincName=new StringBuffer(principalProperty);  } else {    if (princName != null) {      krb5PrincName=new StringBuffer(princName);    }  }  validateConfiguration();  if (krb5PrincName != null && krb5PrincName.toString().equals("*")) {    unboundServer=true;  }  if (tryFirstPass) {    try {      attemptAuthentication(true);      if (debug)       System.out.println("\t\t[Krb5LoginModule] " + "authentication succeeded");      succeeded=true;      cleanState();      return true;    } catch (    LoginException le) {      cleanState();      if (debug) {        System.out.println("\t\t[Krb5LoginModule] " + "tryFirstPass failed with:" + le.getMessage());      }    }  } else   if (useFirstPass) {    try {      attemptAuthentication(true);      succeeded=true;      cleanState();      return true;    } catch (    LoginException e) {      if (debug) {        System.out.println("\t\t[Krb5LoginModule] " + "authentication failed \n" + e.getMessage());      }      succeeded=false;      cleanState();      throw e;    }  }  try {    attemptAuthentication(false);    succeeded=true;    cleanState();    return true;  } catch (  LoginException e) {    if (debug) {      System.out.println("\t\t[Krb5LoginModule] " + "authentication failed \n" + e.getMessage());    }    succeeded=false;    cleanState();    throw e;  }}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  public boolean isLRU(){  return this.isLRUEntry() || this.isLRUMemory() || this.isLRUHeap();}  }
class C{  public IMatrix<?> _opAppendVertically(final IScope scope,final IMatrix<?> b){  final GamaObjectMatrix a=this;  final Object[] ma=a.getMatrix();  final Object[] mb=((GamaObjectMatrix)b).getMatrix();  final Object[] mab=ArrayUtils.addAll(ma,mb);  final IType<?> newContentsType=GamaType.findCommonType(getType().getContentType(),b.getType().getContentType());  final IMatrix<?> fl=new GamaObjectMatrix(a.getCols(scope),a.getRows(scope) + b.getRows(scope),mab,newContentsType);  return fl;}  }
class C{  void pushSpaceHandling(Attributes attrs) throws org.xml.sax.SAXParseException {  String value=attrs.getValue("xml:space");  if (null == value) {    m_spacePreserveStack.push(m_spacePreserveStack.peekOrFalse());  } else   if (value.equals("preserve")) {    m_spacePreserveStack.push(true);  } else   if (value.equals("default")) {    m_spacePreserveStack.push(false);  } else {    SAXSourceLocator locator=getLocator();    ErrorListener handler=m_stylesheetProcessor.getErrorListener();    try {      handler.error(new TransformerException(XSLMessages.createMessage(XSLTErrorResources.ER_ILLEGAL_XMLSPACE_VALUE,null),locator));    } catch (    TransformerException te) {      throw new org.xml.sax.SAXParseException(te.getMessage(),locator,te);    }    m_spacePreserveStack.push(m_spacePreserveStack.peek());  }}  }
class C{  @Override public void start(){  super.start();}  }
class C{  public Object lookup(String name){  return serverManager.getRegistry().lookup(name);}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == Literal.class) {switch (baseOperationID) {case N4JSPackage.LITERAL___GET_VALUE_AS_STRING:      return N4JSPackage.BOOLEAN_LITERAL___GET_VALUE_AS_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private static String makeOptions(boolean debugExec){  String options=" -Dsun.rmi.server.activation.debugExec=" + debugExec;  if (!TestParams.testSrc.equals("")) {    options+=" -Dtest.src=" + TestParams.testSrc + " ";  }  options+=" -Dtest.classes=" + TestParams.testClasses + " -Djava.rmi.server.logLevel=v ";  options+=" -Dsun.rmi.activation.execTimeout=60000";  return options;}  }
class C{  public void addActor(MovieActor obj){  if (StringUtils.isBlank(obj.getEntityRoot())) {    obj.setEntityRoot(getPathNIO().toString());  }  actors.add(obj);  firePropertyChange(ACTORS,null,this.getActors());}  }
class C{  public MType build(){  isClean=true;  return getMessage();}  }
class C{  private static InputStream transform(final InputStream origin,final URIResolver resolver) throws IOException {  try {    final TransformerFactory factory=TransformerFactory.newInstance();    factory.setURIResolver(resolver);    return RsXslt.transform(factory,origin);  } catch (  final TransformerException ex) {    throw new IOException(ex);  }}  }
class C{  public void testRefresh_RequestsSync(){  mController.init();  mController.onRefreshRequested();  verify(mMockSyncManager).startFullSync();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @PostConstruct public void init(){  if (!_isSkipInit) {    initImpl();  }}  }
class C{  public boolean checkValidSpecMethod(){  return API.v().isSupportedMethod(sootMethod);}  }
class C{  public static boolean removeTable(Table t){  try {    tableList.remove(t);  } catch (  Exception e) {    return false;  }  return true;}  }
class C{  private void verifyDomainsIsNotInUse(StringSet domains){  checkForActiveTenantsUsingDomains(domains);  checkForVdcRolesUsingDomains(domains);  checkForTenantRolesUsingDomains(domains);  checkForUserGroupsUsingDomains(domains);}  }
class C{  public DTEDFrameCacheHandler(DTEDFrameCache dfc){  setFrameCache(dfc);}  }
class C{  public static double oddsAbove(int n,boolean dropLowest){  if (n <= 2) {    return 100.0;  } else   if (n > 12) {    return 0;  }  if (dropLowest) {    final double[] odds={100.0,100.0,100.0,99.54,98.15,94.91,89.35,80.56,68.06,52.32,35.65,19.91,7.41,0};    return odds[n];  } else {    final double[] odds={100.0,100.0,100.0,97.2,91.6,83.3,72.2,58.3,41.6,27.7,16.6,8.3,2.78,0};    return odds[n];  }}  }
class C{  public HeaderParser subsequence(int start,int end){  if (start == 0 && end == nkeys) {    return this;  }  if (start < 0 || start >= end || end > nkeys)   throw new IllegalArgumentException("invalid start or end");  HeaderParser n=new HeaderParser();  n.tab=new String[asize][2];  n.asize=asize;  System.arraycopy(tab,start,n.tab,0,(end - start));  n.nkeys=(end - start);  return n;}  }
class C{  protected void angularObjectClientUnbind(NotebookSocket conn,HashSet<String> userAndRoles,Notebook notebook,Message fromMessage) throws Exception {  String noteId=fromMessage.getType("noteId");  String varName=fromMessage.getType("name");  String paragraphId=fromMessage.getType("paragraphId");  Note note=notebook.getNote(noteId);  if (paragraphId == null) {    throw new IllegalArgumentException("target paragraph not specified for " + "angular value unBind");  }  if (note != null) {    final InterpreterGroup interpreterGroup=findInterpreterGroupForParagraph(note,paragraphId);    final AngularObjectRegistry registry=interpreterGroup.getAngularObjectRegistry();    if (registry instanceof RemoteAngularObjectRegistry) {      RemoteAngularObjectRegistry remoteRegistry=(RemoteAngularObjectRegistry)registry;      removeAngularFromRemoteRegistry(noteId,paragraphId,varName,remoteRegistry,interpreterGroup.getId(),conn);    } else {      removeAngularObjectFromLocalRepo(noteId,paragraphId,varName,registry,interpreterGroup.getId(),conn);    }  }}  }
class C{  public boolean hasProducesMismatch(){  return !this.partialMatches.stream().filter(null).findAny().isPresent();}  }
class C{  public static final JIPList create(final Vector<JIPTerm> termList){  JIPList list=null;  for (  JIPTerm term : termList) {    list=JIPList.create(term,list);  }  return list != null ? list.reverse() : NIL;}  }
class C{  public void sub(final Modulo3Equation equation,final int mul){  if (mul == 1) {    c=(c + 2 * equation.c) % 3;    subMod3(equation.bits);  } else {    c=(c + equation.c) % 3;    addMod3(equation.bits);  }}  }
class C{  @Override public void generateCode(BlockScope currentScope,boolean valueRequired){}  }
class C{  public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(8);  newVector.addElement(new Option("\tThe index of the class attribute.\n" + "\t(default last)","c",1,"-c <class index>"));  newVector.addElement(new Option("\tTurn on debugging output.","D",0,"-D"));  newVector.addElement(new Option("\tThe number of times each instance is classified.\n" + "\t(default 10)","l",1,"-l <num>"));  newVector.addElement(new Option("\tThe average proportion of instances common between any two training sets","p",1,"-p <proportion of objects in common>"));  newVector.addElement(new Option("\tThe random number seed used.","s",1,"-s <seed>"));  newVector.addElement(new Option("\tThe name of the arff file used for the decomposition.","t",1,"-t <name of arff file>"));  newVector.addElement(new Option("\tThe number of instances in the training set.","T",1,"-T <number of instances in training set>"));  newVector.addElement(new Option("\tFull class name of the learner used in the decomposition.\n" + "\teg: weka.classifiers.bayes.NaiveBayes","W",1,"-W <classifier class name>"));  if ((m_Classifier != null) && (m_Classifier instanceof OptionHandler)) {    newVector.addElement(new Option("","",0,"\nOptions specific to learner " + m_Classifier.getClass().getName() + ":"));    newVector.addAll(Collections.list(((OptionHandler)m_Classifier).listOptions()));  }  return newVector.elements();}  }
class C{  public SettingsGroupManagerEvent(EventType type,SettingsGroupManager manager,SettingsGroup group){  if (type == null) {    throw new NullPointerException("EventType is null");  }  if (manager == null) {    throw new NullPointerException("SettingsGroupManager is null");  }  this.type=type;  this.manager=manager;  this.group=group;}  }
class C{  public void merge(Intersection other){  for (Enumeration e=other.getRoads(); e.hasMoreElements(); ) {    Road road=(Road)e.nextElement();    road.changeIntersection(other,this);    addRoad(road);  }  other.clear();  setModified(true);}  }
class C{  public static void drawBounds(Canvas canvas,Paint paint,float size,float x1,float y1,float x2,float y2){  canvas.drawLine(x1,y1,x1 + size,y1,paint);  canvas.drawLine(x1,y1,x1,y1 + size,paint);  canvas.drawLine(x2 - size,y1,x2,y1,paint);  canvas.drawLine(x2,y1,x2,y1 + size,paint);  canvas.drawLine(x2 - size,y2,x2,y2,paint);  canvas.drawLine(x2,y2 - size,x2,y2,paint);  canvas.drawLine(x1,y2,x1 + size,y2,paint);  canvas.drawLine(x1,y2 - size,x1,y2,paint);  float cX=(x1 + x2) / 2;  float cY=(y1 + y2) / 2;  float halfSize=size / 2;  canvas.drawLine(cX - halfSize,cY,cX + halfSize,cY,paint);  canvas.drawLine(cX,cY - halfSize,cX,cY + halfSize,paint);}  }
class C{  public void applySettings(boolean loadCoreComponents) throws ApplySettingsException {}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  public HTMStream<T> resetOn(ResetFunction<T> resetFunction){  inferenceStreamBuilder.resetOn(clean(resetFunction));  return this;}  }
class C{  public SerializedObject(Object toStore) throws Exception {  this(toStore,false);}  }
class C{  private static boolean findActivity(List<LauncherActivityInfoCompat> apps,ComponentName component){  for (  LauncherActivityInfoCompat info : apps) {    if (info.getComponentName().equals(component)) {      return true;    }  }  return false;}  }
class C{  private static void removeNonUsedPatientChildNodes(Element patientNode){  for (int index=0; index < patientNode.getChildCount(); index++) {    if (patientNode.getType(index) != Element.ELEMENT)     continue;    Element child=(Element)patientNode.getChild(index);    if (!child.getName().equalsIgnoreCase("patient.patient_id")) {      patientNode.removeChild(index);      index-=1;    }  }}  }
class C{  protected DocumentBuilderFactory createDocumentBuilderFactory(){  final DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  try {    factory.setFeature("http://apache.org/xml/features/disallow-doctype-decl",true);  } catch (  final ParserConfigurationException e) {    throw new StreamException(e);  }  return factory;}  }
class C{  @Override public void memberOffline(InternalDistributedMember member,PersistentMemberID persistentID){  if (logger.isDebugEnabled()) {    Set<String> onlineMembers=new HashSet<String>();    Set<PersistentMemberID> members=new HashSet<PersistentMemberID>();    members.addAll(PersistenceAdvisorImpl.this.advisor.adviseInitializedPersistentMembers().values());    members.remove(persistentID);    TransformUtils.transform(members,onlineMembers,TransformUtils.persistentMemberIdToLogEntryTransformer);    logger.info(LocalizedMessage.create(LocalizedStrings.PersistenceAdvisorImpl_PERSISTENT_VIEW,new Object[]{PersistenceAdvisorImpl.this.regionPath,TransformUtils.persistentMemberIdToLogEntryTransformer.transform(persistentID),onlineMembers}));  }}  }
class C{  public Set<File> extraClasspath(){  return extraClasspath;}  }
class C{  public double contentsAsDouble() throws NumberFormatException {  return NumberInput.parseDouble(contentsAsString());}  }
class C{  public static String hex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int j=0; j < bytes.length; j++) {    int v=bytes[j] & 0xFF;    hexChars[j * 2]=HEXES_SMALL[v >>> 4];    hexChars[j * 2 + 1]=HEXES_SMALL[v & 0x0F];  }  return new String(hexChars);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  Item newLong(final long value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(LONG).putLong(value);    result=new Item(index,key);    index+=2;    put(result);  }  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.392 -0500",hash_original_method="6F70DC22D940915BC069D6212605A1EF",hash_generated_method="BEA5EA638AFD1B864D7F6CBC205605AF") public static char toUpperCase(char c){  return (char)toUpperCase((int)c);}  }
class C{  public Artifact(final String url) throws JAXBException {  _dsDispatcher=new DSDispatcher();  _uriBuilder=new UriBuilder();  List<String> _matrixParamSet;  _matrixParamSet=_uriBuilder.addPathSegment(url);  _matrixParamSet=_uriBuilder.addPathSegment("search");  _matrixParamSet=_uriBuilder.addPathSegment("artifact");  _templateAndMatrixParameterValues=new HashMap<String,Object>();}  }
class C{  private void reconfigure(ManagedObjectReference vm) throws Exception {  VirtualMachineConfigSpec spec=new VirtualMachineConfigSpec();  spec.setNumCPUs((int)this.state.description.cpuCount);  spec.setMemoryMB(toMb(this.state.description.totalMemoryBytes));  ManagedObjectReference reconfigTask=getVimPort().reconfigVMTask(vm,spec);  TaskInfo taskInfo=VimUtils.waitTaskEnd(this.connection,reconfigTask);  if (taskInfo.getState() == TaskInfoState.ERROR) {    VimUtils.rethrow(taskInfo.getError());  }}  }
class C{  public void allocateMemory(int memorySize){  this.memorySize=memorySize;  memory=new PairDblInt[memorySize][numLabels];  for (int i=0; i < memorySize; i++) {    for (int j=0; j < numLabels; j++) {      memory[i][j]=new PairDblInt();    }  }}  }
class C{  public static boolean addLiquidTransposerEmptyRecipe(ItemStack aFullContainer,FluidStack aLiquid,ItemStack aEmptyContainer,int aMJ){  aEmptyContainer=GT_OreDictUnificator.get(true,aEmptyContainer);  if (aFullContainer == null || aEmptyContainer == null || aLiquid == null)   return false;  if (!GregTech_API.sRecipeFile.get(ConfigCategories.Machines.liquidtransposeremptying,aFullContainer,true))   return false;  try {    ThermalExpansion.addTransposerExtract(aMJ * 10,aFullContainer,aEmptyContainer,aLiquid,100,false);  } catch (  Throwable e) {  }  return true;}  }
class C{  public AddSmellSourceAction(final OdorWorldPanel component,OdorWorldEntity entity){  super("Add smell source...");  this.entity=entity;  if (component == null) {    throw new IllegalArgumentException("Desktop component must not be null");  }  this.component=component;  putValue(SHORT_DESCRIPTION,"Add a smell source to this object...");}  }
class C{  protected FilterParam createFilterParam(String inclusionList,String exclusionList){  String[] inclusionListArray=inclusionList.split(";");  String[] exclusionListArray=exclusionList.split(";");  return new FilterParam(inclusionListArray,exclusionListArray);}  }
class C{  public static String dateString(final Date date){synchronized (SimpleFormatter) {    return SimpleFormatter.format(date);  }}  }
class C{  public CollectionResult<DistanceEntry> run(Database database,Relation<O> relation){  DistanceQuery<O> distFunc=database.getDistanceQuery(relation,getDistanceFunction());  final int size=relation.size();  Collection<DistanceEntry> r=new ArrayList<>(size * (size + 1) >> 1);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    for (DBIDIter iditer2=relation.iterDBIDs(); iditer2.valid(); iditer2.advance()) {      if (DBIDUtil.compare(iditer2,iditer) > 0) {        continue;      }      double d=distFunc.distance(iditer,iditer2);      r.add(new DistanceEntry(DBIDUtil.newPair(iditer,iditer2),d));    }  }  return new CollectionResult<>("Distance Matrix","distance-matrix",r);}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  public static Dcsd cs_dmperm(Dcs A,int seed){  int m, n, i, j, k, cnz, nc, jmatch[], imatch[], wi[], wj[], pinv[], Cp[], Ci[], ps[], rs[], nb1, nb2, p[], q[], cc[], rr[], r[], s[];  boolean ok;  Dcs C;  Dcsd D, scc;  if (!Dcs_util.CS_CSC(A))   return (null);  m=A.m;  n=A.n;  D=Dcs_util.cs_dalloc(m,n);  if (D == null)   return (null);  p=D.p;  q=D.q;  r=D.r;  s=D.s;  cc=D.cc;  rr=D.rr;  jmatch=Dcs_maxtrans.cs_maxtrans(A,seed);  imatch=jmatch;  int imatch_offset=m;  if (jmatch == null)   return (null);  wi=r;  wj=s;  for (j=0; j < n; j++)   wj[j]=-1;  for (i=0; i < m; i++)   wi[i]=-1;  cs_bfs(A,n,wi,wj,q,imatch,imatch_offset,jmatch,0,1);  ok=cs_bfs(A,m,wj,wi,p,jmatch,0,imatch,imatch_offset,3);  if (!ok)   return (null);  cs_unmatched(n,wj,q,cc,0);  cs_matched(n,wj,imatch,imatch_offset,p,q,cc,rr,1,1);  cs_matched(n,wj,imatch,imatch_offset,p,q,cc,rr,2,-1);  cs_matched(n,wj,imatch,imatch_offset,p,q,cc,rr,3,3);  cs_unmatched(m,wi,p,rr,3);  jmatch=null;  pinv=Dcs_pinv.cs_pinv(p,m);  if (pinv == null)   return (null);  C=Dcs_permute.cs_permute(A,pinv,q,false);  pinv=null;  if (C == null)   return (null);  Cp=C.p;  nc=cc[3] - cc[2];  if (cc[2] > 0)   for (j=cc[2]; j <= cc[3]; j++)   Cp[j - cc[2]]=Cp[j];  C.n=nc;  if (rr[2] - rr[1] < m) {    Dcs_fkeep.cs_fkeep(C,new Cs_rprune(),rr);    cnz=Cp[nc];    Ci=C.i;    if (rr[1] > 0)     for (k=0; k < cnz; k++)     Ci[k]-=rr[1];  }  C.m=nc;  scc=Dcs_scc.cs_scc(C);  if (scc == null)   return (null);  ps=scc.p;  rs=scc.r;  nb1=scc.nb;  for (k=0; k < nc; k++)   wj[k]=q[ps[k] + cc[2]];  for (k=0; k < nc; k++)   q[k + cc[2]]=wj[k];  for (k=0; k < nc; k++)   wi[k]=p[ps[k] + rr[1]];  for (k=0; k < nc; k++)   p[k + rr[1]]=wi[k];  nb2=0;  r[0]=s[0]=0;  if (cc[2] > 0)   nb2++;  for (k=0; k < nb1; k++) {    r[nb2]=rs[k] + rr[1];    s[nb2]=rs[k] + cc[2];    nb2++;  }  if (rr[2] < m) {    r[nb2]=rr[2];    s[nb2]=cc[3];    nb2++;  }  r[nb2]=m;  s[nb2]=n;  D.nb=nb2;  return D;}  }
class C{  public void write(ByteCodeWriter out) throws IOException {  out.writeUTF8Const(getName());  out.writeInt(2);  out.writeUTF8Const(_signature);}  }
class C{  public DateMidnight withYear(int year){  return withMillis(getChronology().year().set(getMillis(),year));}  }
class C{  public JARArchiveImpl(Archive<?> delegate){  super(JARArchive.class,delegate);}  }
class C{  public long loadLong(Offset offset){  return 0L;}  }
class C{  public TupleQueryResultHandlerException(String msg){  super(msg);}  }
class C{  public void generateRss(XmlWriter w,ExtensionProfile extProfile) throws IOException {  XmlNamespace openSearchNs=Namespaces.getOpenSearchNs();  Vector<XmlNamespace> nsDecls=new Vector<XmlNamespace>();  nsDecls.add(Namespaces.atomNs);  nsDecls.add(openSearchNs);  nsDecls.addAll(extProfile.getNamespaceDecls());  w.startElement(Namespaces.rssNs,"rss",rssHeaderAttrs,nsDecls);  generateStartElement(w,Namespaces.rssNs,"channel",null,null);  if (srcState.id != null) {    w.simpleElement(Namespaces.atomNs,"id",null,srcState.id);  }  if (xmlBlob != null) {    String lang=xmlBlob.getLang();    if (lang != null) {      w.simpleElement(Namespaces.rssNs,"language",null,lang);    }  }  if (srcState.updated != null) {    w.simpleElement(Namespaces.rssNs,"lastBuildDate",null,srcState.updated.toStringRfc822());  }  w.startRepeatingElement();  for (  Category cat : srcState.categories) {    cat.generateRss(w);  }  w.endRepeatingElement();  if (srcState.title != null) {    srcState.title.generateRss(w,"title",TextConstruct.RssFormat.PLAIN_TEXT);  }  if (srcState.subtitle != null) {    srcState.subtitle.generateRss(w,"description",TextConstruct.RssFormat.FULL_HTML);  } else {    w.simpleElement(Namespaces.rssNs,"description",null,null);  }  Link htmlLink=getHtmlLink();  if (htmlLink != null) {    w.simpleElement(Namespaces.rssNs,"link",null,htmlLink.getHref());  }  if (srcState.logo != null || srcState.icon != null) {    w.startElement(Namespaces.rssNs,"image",null,null);    w.simpleElement(Namespaces.rssNs,"url",null,srcState.logo != null ? srcState.logo : srcState.icon);    if (srcState.title != null) {      srcState.title.generateRss(w,"title",TextConstruct.RssFormat.PLAIN_TEXT);    }    if (htmlLink != null) {      w.simpleElement(Namespaces.rssNs,"link",null,htmlLink.getHref());    }    w.endElement(Namespaces.rssNs,"image");  }  if (srcState.rights != null) {    srcState.rights.generateRss(w,"copyright",TextConstruct.RssFormat.PLAIN_TEXT);  }  if (srcState.authors.size() > 0) {    srcState.authors.get(0).generateRss(w,"managingEditor");  }  if (srcState.generator != null) {    String name=srcState.generator.getName();    if (name != null) {      w.simpleElement(Namespaces.rssNs,"generator",null,name);    }  }  if (getTotalResults() != Query.UNDEFINED) {    w.simpleElement(openSearchNs,"totalResults",null,String.valueOf(feedState.totalResults));  }  if (getStartIndex() != Query.UNDEFINED) {    w.simpleElement(openSearchNs,"startIndex",null,String.valueOf(feedState.startIndex));  }  if (getItemsPerPage() != Query.UNDEFINED) {    w.simpleElement(openSearchNs,"itemsPerPage",null,String.valueOf(feedState.itemsPerPage));  }  generateExtensions(w,extProfile);  w.startRepeatingElement();  for (  E entry : entries) {    entry.generateRss(w,extProfile);  }  w.endRepeatingElement();  w.endElement(Namespaces.rssNs,"channel");  w.endElement(Namespaces.rssNs,"rss");}  }
class C{  public static void load(GlowEntity entity,CompoundTag compound){  EntityStore<?> store=find(entity.getClass(),"load");  World world=NbtSerialization.readWorld(entity.getServer(),compound);  if (world == null) {    world=entity.getWorld();  }  Location location=NbtSerialization.listTagsToLocation(world,compound);  if (location != null) {    entity.teleport(location);  }  getBaseStore(store).load(entity,compound);}  }
class C{  protected void relaxNode(final Node outNode,final PseudoRemovePriorityQueue<Node> pendingNodes){  DijkstraNodeData outData=getData(outNode);  double currTime=outData.getTime();  double currCost=outData.getCost();  if (this.pruneDeadEnds) {    PreProcessDijkstra.DeadEndData ddOutData=getPreProcessData(outNode);    for (    Link l : outNode.getOutLinks().values()) {      relaxNodeLogic(l,pendingNodes,currTime,currCost,ddOutData);    }  } else {    for (    Link l : outNode.getOutLinks().values()) {      relaxNodeLogic(l,pendingNodes,currTime,currCost,null);    }  }}  }
class C{  public void doSaveAs(){  IEditorPart editor=getEditor(0);  editor.doSaveAs();  setPageText(0,editor.getTitle());  setInput(editor.getEditorInput());}  }
class C{  public static void writeDataRow(String data,String outputPath){  File file=new File(outputPath);  try {    file.createNewFile();  } catch (  IOException e1) {    e1.printStackTrace();    System.exit(0);  }  try {    BufferedWriter writer=new BufferedWriter(new FileWriter(file));    writer.write(data);    writer.close();  } catch (  IOException e) {    e.printStackTrace();    System.exit(0);  }}  }
class C{  public static ExpirationAction fromOrdinal(int ordinal){  return VALUES[ordinal];}  }
class C{  @Override public int hashCode(){  List<A> l=this;  int h=1;  while (l.tail != null) {    h=h * 31 + (l.head == null ? 0 : l.head.hashCode());    l=l.tail;  }  return h;}  }
class C{  public boolean isReverseAxes(){  return m_iterator.isReverse();}  }
class C{  public static boolean idEquals(RelatedResourceRep first,RelatedResourceRep second){  return equals(id(first),id(second));}  }
class C{  public SpiderPanelTableModel(){  super();  scanResults=new ArrayList<>();}  }
class C{  public void selectNone(boolean notifyDataSetChanged){  for (int i=0; i < getCount(); i++)   getItem(i).setSelected(false);  if (notifyDataSetChanged)   notifyDataSetChanged();}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:59.578 -0500",hash_original_method="BD9B4D3E21457DCFC8705065705F7747",hash_generated_method="4D8300DC52435F7C51CE1BCC47D4B828") public TransformerConfigurationException(){  super("Configuration Error");}  }
class C{  public FixedRateBond(final int settlementDays,final double faceAmount,final Schedule schedule,final double[] coupons,final DayCounter accrualDayCounter){  this(settlementDays,faceAmount,schedule,coupons,accrualDayCounter,BusinessDayConvention.Following,100.0,new Date());}  }
class C{  public Boolean isAutoAssignUserEnabled(){  return autoAssignUserEnabled;}  }
class C{  private void appendType(Type genericType,final StringBuilder builder){  builder.append(getImplName(genericType,false));}  }
class C{  public ArrayType newArrayType(Type componentType){  ArrayType result=new ArrayType(this);  result.setComponentType(componentType);  return result;}  }
class C{  public static MosaicProperties createMosaicProperties(final Long initialSupply,final Integer divisibility,final Boolean isSupplyMutable,final Boolean isTransferable){  final Properties properties=new Properties();  if (null != initialSupply) {    properties.put("initialSupply",Long.toString(initialSupply));  }  if (null != divisibility) {    properties.put("divisibility",Long.toString(divisibility));  }  if (null != isSupplyMutable) {    properties.put("supplyMutable",Boolean.toString(isSupplyMutable));  }  if (null != isTransferable) {    properties.put("transferable",Boolean.toString(isTransferable));  }  return new DefaultMosaicProperties(properties);}  }
class C{  protected void findMapSize(){  Iterator<Rect2D> areaIterator=map.getAreaBoundaries();  Iterator<Rect2D> obstacleIterator=map.getObstacleBoundaries();  double minX=Double.POSITIVE_INFINITY;  double maxX=Double.NEGATIVE_INFINITY;  double minY=Double.POSITIVE_INFINITY;  double maxY=Double.NEGATIVE_INFINITY;  while (areaIterator.hasNext()) {    Rect2D rect=areaIterator.next();    minX=minX > rect.getLowerLeft().getX() ? rect.getLowerLeft().getX() : minX;    minY=minY > rect.getLowerLeft().getY() ? rect.getLowerLeft().getY() : minY;    maxX=maxX < rect.getUpperRight().getX() ? rect.getUpperRight().getX() : maxX;    maxY=maxY < rect.getUpperRight().getY() ? rect.getUpperRight().getY() : maxY;  }  while (obstacleIterator.hasNext()) {    Rect2D rect=obstacleIterator.next();    minX=minX > rect.getLowerLeft().getX() ? rect.getLowerLeft().getX() : minX;    minY=minY > rect.getLowerLeft().getY() ? rect.getLowerLeft().getY() : minY;    maxX=maxX < rect.getUpperRight().getX() ? rect.getUpperRight().getX() : maxX;    maxY=maxY < rect.getUpperRight().getY() ? rect.getUpperRight().getY() : maxY;  }  mapWidth=maxX - minX;  mapHeight=maxY - minY;  final double mapBorder=0.1d * mapWidth > mapHeight ? mapWidth : mapHeight;  translateX=-minX + mapBorder;  translateY=-minY + mapBorder;  mapWidth+=2 * mapBorder;  mapHeight+=2 * mapBorder;}  }
class C{  private void discard(float x,float y,float amountX,float amountY){  if (mStackTabs == null || (mOverviewAnimationType != OverviewAnimationType.NONE && mOverviewAnimationType != OverviewAnimationType.DISCARD && mOverviewAnimationType != OverviewAnimationType.DISCARD_ALL && mOverviewAnimationType != OverviewAnimationType.UNDISCARD)) {    return;  }  if (mDiscardingTab == null) {    if (!mInSwipe) {      mDiscardingTab=getTabAtPositon(x,y);    } else {      if (mTabModel.index() < 0)       return;      mDiscardingTab=mStackTabs[mTabModel.index()];    }    if (mDiscardingTab != null) {      cancelDiscardScrollingAnimation();      RectF target=mDiscardingTab.getLayoutTab().getClickTargetBounds();      float distanceToEdge;      float edgeToEdge;      if (mCurrentMode == Orientation.PORTRAIT) {        mDiscardDirection=1.0f;        distanceToEdge=Math.max(target.left - x,x - target.right);        edgeToEdge=target.width();      } else {        mDiscardDirection=2.0f - 4.0f * (x / mLayout.getWidth());        mDiscardDirection=MathUtils.clamp(mDiscardDirection,-1.0f,1.0f);        distanceToEdge=Math.max(target.top - y,y - target.bottom);        edgeToEdge=target.height();      }      float scaledDiscardX=x - mDiscardingTab.getLayoutTab().getX();      float scaledDiscardY=y - mDiscardingTab.getLayoutTab().getY();      mDiscardingTab.setDiscardOriginX(scaledDiscardX / mDiscardingTab.getScale());      mDiscardingTab.setDiscardOriginY(scaledDiscardY / mDiscardingTab.getScale());      mDiscardingTab.setDiscardFromClick(false);      if (Math.abs(distanceToEdge) < DISCARD_SAFE_SELECTION_PCTG * edgeToEdge) {        mDiscardingTab=null;      }    }  }  if (mDiscardingTab != null) {    float deltaAmount=mCurrentMode == Orientation.PORTRAIT ? amountX : amountY;    mDiscardingTab.addToDiscardAmount(deltaAmount);  }}  }
class C{  @Override public void validate(final FacesContext facesContext,final UIComponent component,final Object value) throws ValidatorException {  if (value == null) {    return;  }  String password="";  String password2="";  String clientId=component.getClientId(facesContext);  String clientId2=clientId;  boolean check2=false;  if (clientId != null) {    if (clientId.endsWith("2")) {      clientId=clientId.substring(0,clientId.length() - 1);      password2=value.toString();      check2=true;      UIInput passwordInput=(UIInput)facesContext.getViewRoot().findComponent(clientId);      if (passwordInput != null) {        if (passwordInput.getSubmittedValue() != null) {          password=(String)passwordInput.getSubmittedValue();        } else {          password=(String)passwordInput.getValue();        }      }    } else {      clientId2=clientId + "2";      password=value.toString();      UIInput passwordInput=(UIInput)facesContext.getViewRoot().findComponent(clientId2);      if (passwordInput != null) {        if (passwordInput.getSubmittedValue() != null) {          password2=(String)passwordInput.getSubmittedValue();        } else {          password2=(String)passwordInput.getValue();        }      }    }    if (!check2 && !validPasswordLength(password)) {      ((UIInput)component).setValid(false);      String text=JSFUtils.getText(BaseBean.ERROR_USER_PWD_LENGTH,null,facesContext);      throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));    }    if (!passwordsAreEqual(password,password2)) {      ((UIInput)component).setValid(false);      String text=JSFUtils.getText(BaseBean.ERROR_USER_PWD_MATCH,null,facesContext);      throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));    }    if (check2 && !validPasswordLength(password2)) {      ((UIInput)component).setValid(false);      String text=JSFUtils.getText(BaseBean.ERROR_USER_PWD_LENGTH,null,facesContext);      throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,text,null));    }  }}  }
class C{  public synchronized void flush(Session session){synchronized (session) {    flushInternal(session);  }}  }
class C{  public boolean isXFA(){  return hasXFA;}  }
class C{  public void sort(Comparator c) throws BasicException {  saveData();  m_bd.sort(c);  baseMoveTo(0);}  }
class C{  public boolean isLandingPage(URL url){  if (url.getQuery() != null) {    return false;  } else {    return landingPageSuffix(url) != "";  }}  }
class C{  private ArrayList<DenseDoubleMatrix3D> extractMatrices(){  log.info("Extracting activity count matrices from vehicles.");  ArrayList<DenseDoubleMatrix3D> result=new ArrayList<DenseDoubleMatrix3D>(2);  String withinMatrixFilename=root + studyArea + "/"+ studyArea+ "WithinMatrixFile.txt";  File withinMatrixFile=new File(withinMatrixFilename);  String throughMatrixFilename=root + studyArea + "/"+ studyArea+ "ThroughMatrixFile.txt";  File throughMatrixFile=new File(throughMatrixFilename);  MyXmlConverter xmlConverter=new MyXmlConverter(false);  DenseDoubleMatrix3D withinMatrix=null;  DenseDoubleMatrix3D throughMatrix=null;  if (withinMatrixFile.exists() && throughMatrixFile.exists()) {    log.info("Matrix files found. Reading from files.");    Object objectWithin=xmlConverter.readObjectFromFile(withinMatrixFilename);    if (objectWithin instanceof DenseDoubleMatrix3D) {      withinMatrix=(DenseDoubleMatrix3D)objectWithin;    } else {      log.warn("The read 'within' object was not of type DenseDoubleMatrix3D!!");    }    Object objectThrough=xmlConverter.readObjectFromFile(throughMatrixFilename);    if (objectThrough instanceof DenseDoubleMatrix3D) {      throughMatrix=(DenseDoubleMatrix3D)objectThrough;    } else {      log.warn("The read 'through' object was not of type DenseDoubleMatrix3D!!");    }    log.info("Matrices read sucessfully.");  } else {    log.info("Matric files not found. Extracting from vehicle XML file.");    ArrayList<DenseDoubleMatrix3D> matrices=extractChainProperties();    withinMatrix=matrices.get(0);    try {      xmlConverter.writeObjectToFile(matrices.get(0),withinMatrixFilename);      throughMatrix=matrices.get(1);      xmlConverter.writeObjectToFile(matrices.get(1),throughMatrixFilename);    } catch (    IOException e) {      throw new RuntimeException(e);    }    log.info("Matrix files created and written successfully.");  }  result.add(withinMatrix);  result.add(throughMatrix);  log.info("Matrices extracted successfully.");  return result;}  }
class C{  public static double binomialCdf(int k,int n,double p){  double da, db, dp;  if (k < 0) {    dp=0.0;  } else   if (k >= n) {    dp=1.0;  } else   if (p == 0.0) {    dp=(k < 0) ? 0.0 : 1.0;  } else   if (p == 1.0) {    dp=(k < n) ? 0.0 : 1.0;  } else {    da=(double)k + 1.0;    db=(double)(n - k);    dp=1.0 - betaCdf(p,da,db);  }  return dp;}  }
class C{  private Object writeReplace() throws java.io.ObjectStreamException {  return new KeyRep(KeyRep.Type.SECRET,getAlgorithm(),getFormat(),getEncoded());}  }
class C{  private double CADRG_y_pix_constant(double adrgscale){  final int CADRG_ARC_B=400384;  double y_pix=(double)adrgscale * CADRG_ARC_B / 512.0;  y_pix=Math.ceil(y_pix);  y_pix*=0.33333;  y_pix=Math.round(y_pix);  return y_pix * 256.0;}  }
class C{  public static Thread newManagedThread(Runnable r){  return FACTORY.newThread(r);}  }
class C{  public int copyTo(OutputStream os) throws IOException {  return this.array.copyTo(os,this.boundOffset(0),this.length());}  }
class C{  public MoveMethodDescriptor(){  super(IJavaRefactorings.MOVE_METHOD);}  }
class C{  public boolean isEmpty(){  return hlist.isEmpty();}  }
class C{  public static <E>List<E> of(E e1,E e2,E e3,E e4){  return new ImmutableCollections.ListN<E>(e1,e2,e3,e4);}  }
class C{  public void testSerialization() throws IOException, ClassNotFoundException {  final IHAWriteMessage msg1=new HAWriteMessage(UUID.randomUUID(),12L,13L,14L,15,16,StoreTypeEnum.RW,17L,18L,19L);  final byte[] ser1=serialized(msg1);  final IHAWriteMessage msg2=(IHAWriteMessage)SerializerUtil.deserialize(ser1);  assertTrue(msg1.equals(msg2));  final byte[] ser2=serialized(msg2);  assertTrue(BytesUtil.bytesEqual(ser1,ser2));}  }
class C{  public SplittableRandom(long seed){  this(seed,GOLDEN_GAMMA);}  }
class C{  public FXGException(int lineNumber,int columnNumber){  super();  arguments=null;  message=null;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  public static File forceGeneratorDir(){  lock.readLock().lock();  try {    return (force_generator_dir != null) ? force_generator_dir : new File(dataDir(),DEFAULT_DIR_NAME_FORCE_GENERATOR);  }  finally {    lock.readLock().unlock();  }}  }
class C{  public Triangle(Coordinate p0,Coordinate p1,Coordinate p2){  this.p0=p0;  this.p1=p1;  this.p2=p2;}  }
class C{  public static Path2D generateBorderBounds(Rectangle bounds,BorderPropertySet border,boolean inside){  Path2D path=generateBorderShape(bounds,TOP,border,false,inside ? 1 : 0,1);  path.append(generateBorderShape(bounds,RIGHT,border,false,inside ? 1 : 0,1),true);  path.append(generateBorderShape(bounds,BOTTOM,border,false,inside ? 1 : 0,1),true);  path.append(generateBorderShape(bounds,LEFT,border,false,inside ? 1 : 0,1),true);  return path;}  }
class C{  private int epochDayToEpochMonth(int epochDay){  int ndx=Arrays.binarySearch(hijrahEpochMonthStartDays,epochDay);  if (ndx < 0) {    ndx=-ndx - 2;  }  return ndx;}  }
class C{  public void insert(int index,List<Node> rootNodes){  insert(roots,index,rootNodes);}  }
class C{  public CompositeByteArrayRelativeReader(CompositeByteArray cba,boolean autoFree){  super(cba);  this.autoFree=autoFree;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:35.936 -0500",hash_original_method="F61560D6410770019EFCEB5BB2747D12",hash_generated_method="0BD637A5C843FA735D6186DCA29E94AF") static int[] convertMidTerms(int[] k){  int[] res=new int[3];  if (k.length == 1) {    res[0]=k[0];  } else {    if (k.length != 3) {      throw new IllegalArgumentException("Only Trinomials and pentanomials supported");    }    if (k[0] < k[1] && k[0] < k[2]) {      res[0]=k[0];      if (k[1] < k[2]) {        res[1]=k[1];        res[2]=k[2];      } else {        res[1]=k[2];        res[2]=k[1];      }    } else     if (k[1] < k[2]) {      res[0]=k[1];      if (k[0] < k[2]) {        res[1]=k[0];        res[2]=k[2];      } else {        res[1]=k[2];        res[2]=k[0];      }    } else {      res[0]=k[2];      if (k[0] < k[1]) {        res[1]=k[0];        res[2]=k[1];      } else {        res[1]=k[1];        res[2]=k[0];      }    }  }  return res;}  }
class C{  protected synchronized void incrementFinished(){}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  private synchronized void rebuildJournal() throws IOException {  if (journalWriter != null) {    journalWriter.close();  }  Writer writer=new BufferedWriter(new FileWriter(journalFileTmp),IO_BUFFER_SIZE);  writer.write(MAGIC);  writer.write("\n");  writer.write(VERSION_1);  writer.write("\n");  writer.write(Integer.toString(appVersion));  writer.write("\n");  writer.write(Integer.toString(valueCount));  writer.write("\n");  writer.write("\n");  for (  Entry entry : lruEntries.values()) {    if (entry.currentEditor != null) {      writer.write(DIRTY + ' ' + entry.key+ '\n');    } else {      writer.write(CLEAN + ' ' + entry.key+ entry.getLengths()+ '\n');    }  }  writer.close();  journalFileTmp.renameTo(journalFile);  journalWriter=new BufferedWriter(new FileWriter(journalFile,true),IO_BUFFER_SIZE);}  }
class C{  public boolean isRenderAsPoints(){  return this.renderAsPoints;}  }
class C{  public String findGitRevision(){  return _gitRevision;}  }
class C{  public CtClass makeClass(InputStream classfile) throws IOException, RuntimeException {  return makeClass(classfile,true);}  }
class C{  public static void copyData(BufferedImage src,BufferedImage dst){  Rectangle srcRect=new Rectangle(0,0,src.getWidth(),src.getHeight());  copyData(src,srcRect,dst,new Point(0,0));}  }
class C{  public void waitForPresent(){  waitForPresent(EXPLICIT_WAIT_TIME_OUT);}  }
class C{  public static MinimumBatteryLevel valueOf(int value){  MinimumBatteryLevel entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + MinimumBatteryLevel.class.getName() + ""+ value);}  }
class C{  private void addView(ViewGroup view,View toAdd){  if (view != null && toAdd != null) {    if (toAdd.getParent() != null) {      ((ViewGroup)toAdd.getParent()).removeView(toAdd);    }    view.removeAllViews();    view.addView(toAdd);  }  updateShownColor();}  }
class C{  public DTMAxisIterator reset(){  m_ancestorsPos=m_size - 1;  _currentNode=(m_ancestorsPos >= 0) ? m_ancestors[m_ancestorsPos] : DTM.NULL;  return resetPosition();}  }
class C{  public static int minIndex(double[][] matrix,int column){  double min=matrix[0][column];  int minIndex=0;  for (int i=1; i < matrix.length; i++) {    if (Double.isNaN(min) || (matrix[i][column] < min)) {      min=matrix[i][column];      minIndex=i;    }  }  return minIndex;}  }
class C{  @SuppressWarnings("UnusedDeclaration") private UUID[] idsForKeys(boolean primaryOnly,int... keys){  List<UUID> res=new ArrayList<>();  if (cacheMode == LOCAL) {    for (    int key : keys)     res.add(ids[0]);  } else   if (cacheMode == PARTITIONED) {    for (    int key : keys) {      for (int i=0; i < GRID_CNT; i++) {        if (primary(i,key) || (!primaryOnly && backup(i,key)))         res.add(ids[i]);      }    }  } else   if (cacheMode == REPLICATED) {    for (    int key : keys) {      if (primaryOnly)       res.add(grid(0).affinity(CACHE_NAME).mapKeyToNode(key).id()); else       res.addAll(Arrays.asList(ids));    }  }  return res.toArray(new UUID[res.size()]);}  }
class C{  public static <T,R>Future<List<R>> processList(List<T> collection,Function<T,Future<R>> processFunc,@Nullable ExecutorService callbackExecutor){  ListFutureProcessor<T,R> processor=new ListFutureProcessor<T,R>(collection,processFunc,callbackExecutor);  if (null != callbackExecutor) {    callbackExecutor.submit(processor);  } else {    processor.run();  }  return processor.promise;}  }
class C{  public void sortPlayers(){  Collections.sort(teamQBs,new PlayerComparator());  Collections.sort(teamRBs,new PlayerComparator());  Collections.sort(teamWRs,new PlayerComparator());  Collections.sort(teamKs,new PlayerComparator());  Collections.sort(teamOLs,new PlayerComparator());  Collections.sort(teamCBs,new PlayerComparator());  Collections.sort(teamSs,new PlayerComparator());  Collections.sort(teamF7s,new PlayerComparator());  Collections.sort(teamRSs,new PlayerComparator());  Collections.sort(teamFRs,new PlayerComparator());  Collections.sort(teamSOs,new PlayerComparator());  Collections.sort(teamJRs,new PlayerComparator());  Collections.sort(teamSRs,new PlayerComparator());}  }
class C{  public LineWriter lineWriter(){  return mWriter;}  }
class C{  public void skipValue() throws IOException {  skipping=true;  try {    int count=0;    do {      JsonToken token=advance();      if (token == JsonToken.BEGIN_ARRAY || token == JsonToken.BEGIN_OBJECT) {        count++;      } else       if (token == JsonToken.END_ARRAY || token == JsonToken.END_OBJECT) {        count--;      }    } while (count != 0);  }  finally {    skipping=false;  }}  }
class C{  public AbLetterFilterListView(Context context,AttributeSet attrs,int defStyle){  super(context,attrs,defStyle);  init(context);}  }
class C{  public void doPreGameStartDataModifications(final PlayerListing playerListing){  final Set<PlayerID> playersWhoShouldBeRemoved=new HashSet<>();  final Map<String,Boolean> playersEnabledListing=playerListing.getPlayersEnabledListing();  playerList.getPlayers().stream().filter(null).forEach(null);  if (!playersWhoShouldBeRemoved.isEmpty()) {    removePlayerStepsFromSequence(playersWhoShouldBeRemoved);  }}  }
class C{  void writeBlocks(int prefixLength,int count) throws IOException {  assert count > 0;  assert prefixLength > 0 || count == pending.size();  int lastSuffixLeadLabel=-1;  boolean hasTerms=false;  boolean hasSubBlocks=false;  int start=pending.size() - count;  int end=pending.size();  int nextBlockStart=start;  int nextFloorLeadLabel=-1;  for (int i=start; i < end; i++) {    PendingEntry ent=pending.get(i);    int suffixLeadLabel;    if (ent.isTerm) {      PendingTerm term=(PendingTerm)ent;      if (term.termBytes.length == prefixLength) {        assert lastSuffixLeadLabel == -1 : "i=" + i + " lastSuffixLeadLabel="+ lastSuffixLeadLabel;        suffixLeadLabel=-1;      } else {        suffixLeadLabel=term.termBytes[prefixLength] & 0xff;      }    } else {      PendingBlock block=(PendingBlock)ent;      assert block.prefix.length > prefixLength;      suffixLeadLabel=block.prefix.bytes[block.prefix.offset + prefixLength] & 0xff;    }    if (suffixLeadLabel != lastSuffixLeadLabel) {      int itemsInBlock=i - nextBlockStart;      if (itemsInBlock >= minItemsInBlock && end - nextBlockStart > maxItemsInBlock) {        boolean isFloor=itemsInBlock < count;        newBlocks.add(writeBlock(prefixLength,isFloor,nextFloorLeadLabel,nextBlockStart,i,hasTerms,hasSubBlocks));        hasTerms=false;        hasSubBlocks=false;        nextFloorLeadLabel=suffixLeadLabel;        nextBlockStart=i;      }      lastSuffixLeadLabel=suffixLeadLabel;    }    if (ent.isTerm) {      hasTerms=true;    } else {      hasSubBlocks=true;    }  }  if (nextBlockStart < end) {    int itemsInBlock=end - nextBlockStart;    boolean isFloor=itemsInBlock < count;    newBlocks.add(writeBlock(prefixLength,isFloor,nextFloorLeadLabel,nextBlockStart,end,hasTerms,hasSubBlocks));  }  assert newBlocks.isEmpty() == false;  PendingBlock firstBlock=newBlocks.get(0);  assert firstBlock.isFloor || newBlocks.size() == 1;  firstBlock.compileIndex(newBlocks,scratchBytes,scratchIntsRef);  pending.subList(pending.size() - count,pending.size()).clear();  pending.add(firstBlock);  newBlocks.clear();}  }
class C{  protected CertificateFactory(CertificateFactorySpi certFacSpi,Provider provider,String type){  this.certFacSpi=certFacSpi;  this.provider=provider;  this.type=type;}  }
class C{  public void stop(){}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.TYPED_ELEMENT__DECLARED_TYPE_REF:    setDeclaredTypeRef((TypeRef)null);  return;case N4JSPackage.TYPED_ELEMENT__BOGUS_TYPE_REF:setBogusTypeRef((TypeRef)null);return;}super.eUnset(featureID);}  }
class C{  @Override public String toString(){  String result="RandomSplitResultProducer: ";  result+=getCompatibilityState();  if (m_Instances == null) {    result+=": <null Instances>";  } else {    result+=": " + Utils.backQuoteChars(m_Instances.relationName());  }  return result;}  }
class C{  protected void recycleTopLevelGroup(){  recycleTopLevelGroup(true);}  }
class C{  public boolean canContain(Element other){  return theType.canContain(other.theType);}  }
class C{  public Editor edit() throws IOException {  return LruDiskCache.this.editByDiskKey(diskKey,sequenceNumber);}  }
class C{  public int size(){  return entries.size();}  }
class C{  public boolean isCountHighMovement(){  Object oo=get_Value(COLUMNNAME_CountHighMovement);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private File copyFormat(int AD_PrintFormat_ID,int To_Client_ID,HttpServletRequest request,GridTab m_curTab,MQuery m_query){  WebSessionCtx wsc=WebSessionCtx.get(request);  MPrintFormat pf=MPrintFormat.copyToClient(wsc.ctx,AD_PrintFormat_ID,To_Client_ID);  File file=launchReport(pf,request,m_curTab,m_query);  return file;}  }
class C{  public SendableVideoMessage.SendableVideoMessageBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public int nextObjectId(){  return objectId++;}  }
class C{  public RDFObject createObject(String uri,Set<URI> types){  if (connection == null)   throw new IllegalStateException("No ObjectConnection");  ValueFactory vf=connection.getValueFactory();  return createObject(vf.createURI(uri),types);}  }
class C{  public static float toFloat(final String value){  return Float.parseFloat(value);}  }
class C{  @Override public boolean matches(InventoryCrafting var1,World world){  final Map<IMultiFluidStacks,Integer> aggregateFluids=new HashMap<IMultiFluidStacks,Integer>();  for (  IMultiFluidStacks fluid : fluids) {    aggregateFluids.put(fluid,fluid.getAmount());  }  final ArrayList<IMultiItemStacks> required=new ArrayList<IMultiItemStacks>(input);  for (int x=0; x < var1.getSizeInventory(); x++) {    final ItemStack slot=var1.getStackInSlot(x);    if (slot != null) {      boolean inRecipe=false;      final Iterator<IMultiItemStacks> req=required.iterator();      while (req.hasNext()) {        boolean match=false;        final IMultiItemStacks next=req.next();        final Iterator<ItemStack> itr=next.getItemStacks().iterator();        while (itr.hasNext() && !match) {          match=OreDictionary.itemMatches(itr.next(),slot,false);        }        if (match) {          inRecipe=true;          required.remove(next);          break;        }      }      if (!inRecipe) {        boolean fluidConsumed=false;        if (FluidContainerRegistry.isFilledContainer(slot)) {          final FluidStack containerFluid=FluidContainerRegistry.getFluidForFilledItem(slot).copy();          for (          IMultiFluidStacks fluidStacks : fluids) {            final int aggregateAmount=aggregateFluids.containsKey(fluidStacks) ? aggregateFluids.get(fluidStacks) : 0;            if (fluidStacks.containsFluidStack(containerFluid) && aggregateAmount > 0) {              final int leftover=Math.max(0,aggregateAmount - containerFluid.amount);              if (leftover <= 1) {                aggregateFluids.remove(fluidStacks);              } else {                aggregateFluids.put(fluidStacks,leftover);              }              fluidConsumed=true;            }          }        }        if (!fluidConsumed) {          return false;        }      }    }  }  return required.isEmpty() && aggregateFluids.isEmpty();}  }
class C{  private Collection<Integer> findAbsentKeys(Ignite workerNode,Collection<Integer> keys){  Collection<Integer> ret=new ArrayList<>(keys.size());  IgniteCache<Object,Object> cache=workerNode.cache(CACHE_NAME);  for (  Integer key : keys) {    if (cache.get(key) == null)     ret.add(key);  }  return ret;}  }
class C{  public static boolean isBodyAsleepColorEnabled(){  return bodyAsleepColorEnabled;}  }
class C{  public static <T>T eachLine(InputStream stream,String charset,int firstLine,@ClosureParams(value=FromString.class,options={"String","String,Integer"}) Closure<T> closure) throws IOException {  return eachLine(new InputStreamReader(stream,charset),firstLine,closure);}  }
class C{  public void warning(String msg){  log(Level.WARNING,msg);}  }
class C{  public boolean isEmpty(){  return size == 0;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:54.835 -0500",hash_original_method="24B49B0CD5ACD1DC256CEA429DC25DA6",hash_generated_method="BC23817EC7C8DFCF50BD1B83AA72EB21") protected static long decodeNtpHexString(String s) throws NumberFormatException {  if (s == null) {    throw new NumberFormatException("null");  }  int ind=s.indexOf('.');  if (ind == -1) {    if (s.length() == 0)     return 0;    return Long.parseLong(s,16) << 32;  }  return Long.parseLong(s.substring(0,ind),16) << 32 | Long.parseLong(s.substring(ind + 1),16);}  }
class C{  protected Node export(Node n,AbstractDocument d){  super.export(n,d);  AbstractEntity ae=(AbstractEntity)n;  ae.nodeName=nodeName;  ae.publicId=publicId;  ae.systemId=systemId;  return n;}  }
class C{  static void checkInternalName(final String name,final String msg){  if (name == null || name.length() == 0) {    throw new IllegalArgumentException("Invalid " + msg + " (must not be null or empty)");  }  if (name.charAt(0) == '[') {    checkDesc(name,false);  } else {    checkInternalName(name,0,-1,msg);  }}  }
class C{  public void cannotProcessConfigResourceStream() throws Exception {  when(mockRequest.getRequestURI()).thenReturn("");  victim.doFilter(mockRequest,mockResponse,mockFilterChain);  verifyChainIsCalled(mockFilterChain);}  }
class C{  public final double[] toArray(){  double[][] field=this.field;  double[] fieldx=null;  final int width=this.width;  final int height=this.height;  double[] vals=new double[width * height];  int i=0;  for (int x=0; x < width; x++) {    fieldx=field[x];    for (int y=0; y < height; y++) {      vals[i++]=fieldx[y];    }  }  return vals;}  }
class C{  public DatePickerSettings copySettings(){  DatePickerSettings result=new DatePickerSettings();  result.allowEmptyDates=this.allowEmptyDates;  result.allowKeyboardEditing=this.allowKeyboardEditing;  if (this.borderPropertiesList == null) {    result.borderPropertiesList=null;  } else {    result.borderPropertiesList=new ArrayList<CalendarBorderProperties>(this.borderPropertiesList.size());    for (    CalendarBorderProperties borderProperty : this.borderPropertiesList) {      result.borderPropertiesList.add(borderProperty.clone());    }  }  result.colorBackgroundWeekNumberLabels=this.colorBackgroundWeekNumberLabels;  result.colorBackgroundWeekdayLabels=this.colorBackgroundWeekdayLabels;  if (this.colors == null) {    result.colors=null;  } else {    result.colors=new HashMap<DateArea,Color>(this.colors);  }  result.firstDayOfWeek=this.firstDayOfWeek;  result.fontInvalidDate=this.fontInvalidDate;  result.fontValidDate=this.fontValidDate;  result.fontVetoedDate=this.fontVetoedDate;  result.formatForDatesBeforeCommonEra=this.formatForDatesBeforeCommonEra;  result.formatForDatesCommonEra=this.formatForDatesCommonEra;  result.formatForTodayButton=this.formatForTodayButton;  result.formatsForParsing=(this.formatsForParsing == null) ? null : (ArrayList<DateTimeFormatter>)this.formatsForParsing.clone();  result.gapBeforeButtonPixels=this.gapBeforeButtonPixels;  result.isVisibleClearButton=this.isVisibleClearButton;  result.isVisibleMonthMenuButton=this.isVisibleMonthMenuButton;  result.isVisibleNextMonthButton=this.isVisibleNextMonthButton;  result.isVisibleNextYearButton=this.isVisibleNextYearButton;  result.isVisiblePreviousMonthButton=this.isVisiblePreviousMonthButton;  result.isVisiblePreviousYearButton=this.isVisiblePreviousYearButton;  result.isVisibleTodayButton=this.isVisibleTodayButton;  result.isVisibleYearMenuButton=this.isVisibleYearMenuButton;  result.locale=(Locale)this.locale.clone();  result.sizeDatePanelMinimumHeight=this.sizeDatePanelMinimumHeight;  result.sizeDatePanelMinimumWidth=this.sizeDatePanelMinimumWidth;  result.sizeTextFieldMinimumWidth=this.sizeTextFieldMinimumWidth;  result.sizeTextFieldMinimumWidthDefaultOverride=this.sizeTextFieldMinimumWidthDefaultOverride;  result.translationArrayStandaloneLongMonthNames=this.translationArrayStandaloneLongMonthNames.clone();  result.translationArrayStandaloneShortMonthNames=this.translationArrayStandaloneShortMonthNames.clone();  result.translationClear=this.translationClear;  result.translationToday=this.translationToday;  result.weekNumberRules=this.weekNumberRules;  result.weekNumbersDisplayed=this.weekNumbersDisplayed;  result.weekNumbersWillOverrideFirstDayOfWeek=this.weekNumbersWillOverrideFirstDayOfWeek;  result.zSkipDrawIndependentCalendarPanelIfNeeded=false;  return result;}  }
class C{  private void handleSubmitListButton(){  int selected=worksheetListBox.getSelectedIndex();  if (worksheetEntries != null && selected >= 0) {    ListBasedSpreadsheetPanel.createWindow(service,worksheetEntries.get(selected).getListFeedUrl());  }}  }
class C{  public static void main(String[] args){  try {    File rootFolder=GeneratorUtils.getRootFolder(args);    System.out.println(" ------------------------------------------------------------------------ ");    System.out.println("Searching for DTO");    System.out.println(" ------------------------------------------------------------------------ ");    findDtoFactoryVisitors();    generateExtensionManager(rootFolder);  } catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(1);  }}  }
class C{  public static boolean exists(String name){  try {    getDatastoreService().get(Key.create(getCrossTldKey(),PremiumList.class,name).getRaw());    return true;  } catch (  EntityNotFoundException e) {    return false;  }}  }
class C{  public void testFictionalProgressErrorHandling(){  String xml="";  xml+=createStartMissionXml("start","Name");  xml+=createTimerMomentWithFictionalProgressXML("start",null,1.0,"");  xml+=createEndMissionXml();  InputStream momentInputStream=new ByteArrayInputStream(xml.getBytes());  mMission=new Mission(mMissionData);  boolean didMissionParseFail=false;  try {    mMission.readMoments(momentInputStream);  } catch (  MissionParseException e) {    didMissionParseFail=true;  }  Assert.assertEquals(true,didMissionParseFail);}  }
class C{  private int readEpoch(File epochFile){  int epoch=-1;  if (!epochFile.exists()) {    return epoch;  }  try {    Scanner scanner=new Scanner(epochFile);    epoch=scanner.nextInt();    log.debug("Got epoch {} from file {}",epoch,epochFile.getName());  } catch (  IOException e) {    log.error("read epoch from file({}) failed. e=",epochFile.getName(),e);  }  return epoch;}  }
class C{  public Builder borderFormatter(BorderFormatter borderFormatter){  this.borderFormatter=borderFormatter;  return this;}  }
class C{  public void removeSources(){  sources=new Vector();}  }
class C{  public void startBlockChainDownload(PeerEventListener listener){  lock.lock();  try {    if (downloadPeer != null && this.downloadListener != null)     downloadPeer.removeEventListener(this.downloadListener);    this.downloadListener=listener;    if (!peers.isEmpty()) {      startBlockChainDownloadFromPeer(peers.iterator().next());    }  }  finally {    lock.unlock();  }}  }
class C{  public boolean checkParity(){  int len=getNumDataElements();  int chksum=0x00;  int loop;  for (loop=0; loop < len - 1; loop++) {    chksum^=getElement(loop);  }  return ((chksum & 0xFF) == getElement(len - 1));}  }
