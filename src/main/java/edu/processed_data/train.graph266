class C{  public static String[] lineToArray(String line){  String[] splitArray=null;  splitArray=line.split(" ");  return splitArray;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static List<List<String>> combine(int n,int k){  List<List<String>> res=new ArrayList<List<String>>();  combine(n,k,new ArrayList<String>(),res);  return res;}  }
class C{  public SearchSourceBuilder fieldDataField(String name){  if (fieldDataFields == null) {    fieldDataFields=new ArrayList<>();  }  fieldDataFields.add(name);  return this;}  }
class C{  private PriorityQueue<USField> createQueue(String fieldName,Map<String,Flt> words) throws IOException {  int numDocs=ir.numDocs();  FreqQ res=new FreqQ(words.size());  for (  String word : words.keySet()) {    float tf=words.get(word).x;    if (minTermFreq > 0 && tf < minTermFreq) {      continue;    }    int docFreq=ir.docFreq(new Term(fieldName,word));    if (minDocFreq > 0 && docFreq < minDocFreq) {      continue;    }    if (docFreq == 0 || docFreq > maxDocFreq) {      continue;    }    float idf=similarity.idf(docFreq,numDocs);    float score=0;    if (isLogTf()) {      score=(float)(Math.log(tf + 1) * idf);    } else {      score=tf * idf;    }    USField mltField;    if (isPayloadField(fieldName)) {      mltField=new USField(word,fieldName,score,tf,idf,docFreq,1.01f);    } else {      mltField=new USField(word,fieldName,score,tf,idf,docFreq);    }    res.insertWithOverflow(mltField);  }  return res;}  }
class C{  private void run() throws Exception {  DevelopmentProvider tp=new DevelopmentProvider();  Topology t=tp.newTopology("kafkaSampleSubscriber");  Map<String,Object> kafkaConfig=createKafkaConfig();  KafkaConsumer kafka=new KafkaConsumer(t,null);  TStream<String> msgs=kafka.subscribe(null,topic);  msgs.sink(null);  System.out.println("Console URL for the job: " + tp.getServices().getService(HttpServer.class).getConsoleUrl());  tp.submit(t);}  }
class C{  public KMLExtrudedPolygonImpl(KMLTraversalContext tc,KMLPlacemark placemark,KMLAbstractGeometry geom){  if (tc == null) {    String msg=Logging.getMessage("nullValue.TraversalContextIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (placemark == null) {    String msg=Logging.getMessage("nullValue.ParentIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  this.parent=placemark;  KMLPolygon polygon=(KMLPolygon)geom;  this.setEnableSides(polygon.isExtrude());  this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND);  String altMode=polygon.getAltitudeMode();  if (!WWUtil.isEmpty(altMode)) {    if ("clampToGround".equals(altMode))     this.setAltitudeMode(WorldWind.CLAMP_TO_GROUND); else     if ("relativeToGround".equals(altMode))     this.setAltitudeMode(WorldWind.RELATIVE_TO_GROUND); else     if ("absolute".equals(altMode))     this.setAltitudeMode(WorldWind.ABSOLUTE);  }  KMLLinearRing outerBoundary=polygon.getOuterBoundary();  if (outerBoundary != null) {    Position.PositionList coords=outerBoundary.getCoordinates();    if (coords != null && coords.list != null)     this.setOuterBoundary(outerBoundary.getCoordinates().list);  }  Iterable<? extends KMLLinearRing> innerBoundaries=polygon.getInnerBoundaries();  if (innerBoundaries != null) {    for (    KMLLinearRing ring : innerBoundaries) {      Position.PositionList coords=ring.getCoordinates();      if (coords != null && coords.list != null)       this.addInnerBoundary(ring.getCoordinates().list);    }  }  if (placemark.getName() != null)   this.setValue(AVKey.DISPLAY_NAME,placemark.getName());  if (placemark.getDescription() != null)   this.setValue(AVKey.DESCRIPTION,placemark.getDescription());  if (placemark.getSnippetText() != null)   this.setValue(AVKey.SHORT_DESCRIPTION,placemark.getSnippetText());  this.setValue(AVKey.CONTEXT,this.parent);}  }
class C{  public int mult(int a,int b){  return PolynomialRingGF2.modMultiply(a,b,polynomial);}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>();  if (m_SplitEvaluator instanceof AdditionalMeasureProducer) {    Enumeration<String> en=((AdditionalMeasureProducer)m_SplitEvaluator).enumerateMeasures();    while (en.hasMoreElements()) {      String mname=en.nextElement();      newVector.add(mname);    }  }  return newVector.elements();}  }
class C{  private String nestingSuffix(Declaration decl,final boolean forSelf){  String suffix="";  if (decl instanceof TypeDeclaration && (forSelf || !decl.isAnonymous()) && !TypeUtils.isConstructor(decl)) {    StringBuilder sb=new StringBuilder();    Scope scope=originalDeclaration(decl).getContainer();    while (scope instanceof TypeDeclaration) {      sb.append('$');      sb.append(((TypeDeclaration)scope).getName().replaceAll("#",""));      scope=scope.getContainer();    }    suffix=sb.toString();  }  return suffix;}  }
class C{  public void accept(final ClassVisitor cv){  FieldVisitor fv=cv.visitField(access,name,desc,signature,value);  if (fv == null) {    return;  }  int i, n;  n=visibleAnnotations == null ? 0 : visibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=visibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,true));  }  n=invisibleAnnotations == null ? 0 : invisibleAnnotations.size();  for (i=0; i < n; ++i) {    AnnotationNode an=invisibleAnnotations.get(i);    an.accept(fv.visitAnnotation(an.desc,false));  }  n=visibleTypeAnnotations == null ? 0 : visibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=visibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,true));  }  n=invisibleTypeAnnotations == null ? 0 : invisibleTypeAnnotations.size();  for (i=0; i < n; ++i) {    TypeAnnotationNode an=invisibleTypeAnnotations.get(i);    an.accept(fv.visitTypeAnnotation(an.typeRef,an.typePath,an.desc,false));  }  n=attrs == null ? 0 : attrs.size();  for (i=0; i < n; ++i) {    fv.visitAttribute(attrs.get(i));  }  fv.visitEnd();}  }
class C{  public T caseMethodBody_(MethodBody_ object){  return null;}  }
class C{  @NotNull public static Builder builder(@NotNull List<ColumnMetadata> columns){  return new Builder(columns);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.EVENT_RAISING_EXPRESSION__EVENT:    setEvent((Expression)newValue);  return;case StextPackage.EVENT_RAISING_EXPRESSION__VALUE:setValue((Expression)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public Message receiveOobResponse(OobResponse msg){  if (msg.getCorrelationId() != correlationId) {    log.info("Correlation mismatch client " + correlationId + " OobResponse "+ msg.getCorrelationId());    return null;  }  if (onOobResponsePrototype != null && onOobResponseFunction != null) {    Message onMsg=null;    try {      onMsg=onOobResponsePrototype.newBuilderForType().mergeFrom(msg.getMessageBytes()).build();      onOobResponseFunction.run(onMsg);      return onMsg;    } catch (    InvalidProtocolBufferException e) {      String errorMessage="Invalid OobResponse Protobuf for correlationId " + correlationId;      log.warn(errorMessage,e);    }  } else {    if (log.isDebugEnabled()) {      log.debug("No onOobResponseCallbackFunction registered for correlationId " + correlationId);    }  }  return null;}  }
class C{  public int hashCode(){  return this.path.hashCode();}  }
class C{  public static void putString2bytes(byte[] destbytes,String srcString,int destOffset,int srcOffset,int count){  for (int i=0; i < count; i++) {    destbytes[count + i]=srcString.getBytes()[i];  }}  }
class C{  public void translateAndAppendPending(int backoff) throws UnsupportedEncodingException {  int bufferEnd=current - backoff;  int len=bufferEnd - complete;  output.append(new String(input,offset + complete,len,charset));  complete=bufferEnd;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(2);  newVector.addElement(new Option("\ttreat missing values as a seperate " + "value.","M",0,"-M"));  newVector.addElement(new Option("\tjust binarize numeric attributes instead \n" + "\tof properly discretizing them.","B",0,"-B"));  return newVector.elements();}  }
class C{  public static boolean validSystemNameConfig(String systemName,char type){  if (!validSystemNameFormat(systemName,type)) {    return false;  }  int bit=getBitFromSystemName(systemName);  if ((type == 'T') || (type == 'L')) {    if ((bit <= 0) || (bit > OutputBits.getNumOutputBits())) {      return false;    }  } else   if (type == 'S') {    if ((bit <= 0) || (bit > InputBits.getNumInputBits())) {      return false;    }  } else {    log.error("Invalid type specification in validSystemNameConfig call");    return false;  }  return true;}  }
class C{  @Override public int read(byte[] buffer,int offset,int length) throws IOException {  int b=-1;  if (_isPartDone)   return -1;  int i=0;  while (_peekOffset + 1 < _peekLength && length > 0) {    buffer[offset + i++]=_peek[_peekOffset++];    length--;  }  while (i < length && (b=read()) >= 0) {    boolean hasCr=false;    if (b == '\r') {      hasCr=true;      b=read();      if (b != '\n') {        buffer[offset + i++]=(byte)'\r';        _peek[0]=(byte)b;        _peekOffset=0;        _peekLength=1;        continue;      }    } else     if (b != '\n') {      buffer[offset + i++]=(byte)b;      continue;    }    int j;    for (j=0; j < _boundaryLength && (b=read()) >= 0 && _boundaryBuffer[j] == b; j++) {    }    if (j == _boundaryLength) {      _isPartDone=true;      if ((b=read()) == '-') {        if ((b=read()) == '-') {          _isDone=true;          _isComplete=true;        }      }      for (; b > 0 && b != '\r' && b != '\n'; b=read()) {      }      if (b == '\r' && (b=read()) != '\n') {        _peek[0]=(byte)b;        _peekOffset=0;        _peekLength=1;      }      return i > 0 ? i : -1;    }    _peekLength=0;    if (hasCr && i + 1 < length) {      buffer[offset + i++]=(byte)'\r';      buffer[offset + i++]=(byte)'\n';    } else     if (hasCr) {      buffer[offset + i++]=(byte)'\r';      _peek[_peekLength++]=(byte)'\n';    } else {      buffer[offset + i++]=(byte)'\n';    }    int k=0;    while (k < j && i + 1 < length)     buffer[offset + i++]=_boundaryBuffer[k++];    while (k < j)     _peek[_peekLength++]=_boundaryBuffer[k++];    _peek[_peekLength++]=(byte)b;    _peekOffset=0;  }  if (i <= 0) {    _isPartDone=true;    if (b < 0)     _isDone=true;    return -1;  } else {    return i;  }}  }
class C{  public static void main(String[] args){  System.err.println(new Americanize());  System.err.println();  for (  String arg : args) {    System.out.println(arg + " --> " + americanize(arg));  }}  }
class C{  public AudioStreamSequence(Enumeration e){  super(e);}  }
class C{  public static double[][] extractSelectedTimePointsReusingArrays(double[][] data,int[] timePoints){  double[][] extracted=new double[timePoints.length][];  for (int t=0; t < timePoints.length; t++) {    extracted[t]=data[timePoints[t]];  }  return extracted;}  }
class C{  public String toString(){  return ("SerialNumber: [" + Debug.toHexString(serialNum) + "]");}  }
class C{  public static int numOfSets(int n,int p) throws Exception {  long counter=n;  long numSets=1;  for (int x=1; x <= p; x++) {    numSets*=counter;    numSets/=x;    if (numSets > Integer.MAX_VALUE) {      throw new Exception("nCp causes integer overflow");    }    counter--;  }  return (int)numSets;}  }
class C{  public OIDCTokens acquireTokensBySecurID(String username,String passcode,SecurIDRetriever securIdRetriever,TokenSpec tokenSpec) throws OIDCClientException, OIDCServerException, TokenValidationException, SSLConnectionException {  Validate.notEmpty(username,"username");  Validate.notEmpty(passcode,"passcode");  Validate.notNull(securIdRetriever,"securIdRetriever");  Validate.notNull(tokenSpec,"tokenSpec");  HttpResponse httpResponse=OIDCClientUtils.handleSecurIDMultiLeggedGrant(username,passcode,securIdRetriever,tokenSpec,getTokenEndpointURI(),this.clientId,this.holderOfKeyConfig,this.keyStore);  return OIDCClientUtils.parseTokenResponse(httpResponse,this.providerPublicKey,this.issuer,this.clientId,this.clockToleranceInSeconds);}  }
class C{  public void initialize(){  factory=new QuadTreeFactory(source,baseLayer,layerList,pixelScale);  factory.setSurfaceColor(surfaceColor);  quadTree=factory.getQuadTree("",null,new Vector3(0,0,0),worldWidth / tileWidth,worldLength / tileLength,0,-1,false);  if (quadTree == null) {    throw new IllegalStateException("Root quadTree is empty or invalid.");  }  quadTree.enabled=true;  quadTree.updateWorldBound(true);  materialState=new MaterialState();  materialState.setColorMaterial(MaterialState.ColorMaterial.AmbientAndDiffuse);  materialState.setEnabled(true);  materialState.setColorMaterialFace(MaterialFace.Front);  quadTree.setRenderState(materialState);  if (layerManager.shadingFromSurface) {    quadTree.getSceneHints().setLightCombineMode(LightCombineMode.Inherit);  } else {    quadTree.getSceneHints().setLightCombineMode(LightCombineMode.Off);  }  LayerEffects layerEffects=layerManager.getLayerEffects();  quadTree.setRenderState(layerEffects);  quadTree.markDirty(DirtyType.RenderState);  contents=new Node("_contents");  contents.setTranslation(0,0,-minZ * pixelScale);  contents.attachChild(quadTree);  attachChild(contents);  updateGeometricState(0,true);}  }
class C{  private synchronized void makeCompositeBuilder() throws InvalidObjectException {  if (compositeBuilder != null)   return;  Class targetClass=(Class<?>)getTargetType();  CompositeBuilder[][] builders={{new CompositeBuilderViaFrom(targetClass,itemNames)},{new CompositeBuilderViaConstructor(targetClass,itemNames)},{new CompositeBuilderCheckGetters(targetClass,itemNames,getterConverters),new CompositeBuilderViaSetters(targetClass,itemNames),new CompositeBuilderViaProxy(targetClass,itemNames)}};  CompositeBuilder foundBuilder=null;  StringBuilder whyNots=new StringBuilder();  Throwable possibleCause=null;  find:   for (  CompositeBuilder[] relatedBuilders : builders) {    for (int i=0; i < relatedBuilders.length; i++) {      CompositeBuilder builder=relatedBuilders[i];      String whyNot=builder.applicable(getters);      if (whyNot == null) {        foundBuilder=builder;        break find;      }      Throwable cause=builder.possibleCause();      if (cause != null)       possibleCause=cause;      if (whyNot.length() > 0) {        if (whyNots.length() > 0)         whyNots.append("; ");        whyNots.append(whyNot);        if (i == 0)         break;      }    }  }  if (foundBuilder == null) {    String msg="Do not know how to make a " + targetClass.getName() + " from a CompositeData: "+ whyNots;    if (possibleCause != null)     msg+=". Remaining exceptions show a POSSIBLE cause.";    throw invalidObjectException(msg,possibleCause);  }  compositeBuilder=foundBuilder;}  }
class C{  public void testConnectorSecuritySettingsSSL_alias(){  resetSecuritySystemProperties();  AuthenticationInfo authInfo=null;  try {    authInfo=SecurityHelper.loadAuthenticationInformation("test.ssl.alias.security.properties",true,TUNGSTEN_APPLICATION_NAME.CONNECTOR);  } catch (  ServerRuntimeException e) {    assertTrue("There should not be any exception thrown",false);  }catch (  ConfigurationException e) {    assertFalse("That should not be this kind of Exception being thrown",true);  }  resetSecuritySystemProperties();}  }
class C{  @Transactional public int deleteAll(){  List<T> allEntities=retrieveAll();  for (  T entity : allEntities) {    delete(entity);  }  return allEntities.size();}  }
class C{  private void initBPShipmentDetails(int C_BPartner_ID){  log.config("C_BPartner_ID" + C_BPartner_ID);  shipmentField.removeActionListener(this);  shipmentField.removeAllItems();  KeyNamePair pp=new KeyNamePair(0,"");  shipmentField.addItem(pp);  ArrayList<KeyNamePair> list=loadShipmentData(C_BPartner_ID);  for (  KeyNamePair knp : list)   shipmentField.addItem(knp);  shipmentField.setSelectedIndex(0);  shipmentField.addActionListener(this);}  }
class C{  public void check(SnmpGenericMetaServer meta,ObjectName name,SnmpValue x,long id,Object data) throws SnmpStatusException {  meta.checkSetAccess(x,id,data);  try {    final String attname=meta.getAttributeName(id);    final Object attvalue=meta.buildAttributeValue(id,x);    final Object[] params=new Object[1];    final String[] signature=new String[1];    params[0]=attvalue;    signature[0]=attvalue.getClass().getName();    server.invoke(name,"check" + attname,params,signature);  } catch (  SnmpStatusException e) {    throw e;  }catch (  InstanceNotFoundException i) {    throw new SnmpStatusException(SnmpStatusException.snmpRspInconsistentName);  }catch (  ReflectionException r) {  }catch (  MBeanException m) {    Exception t=m.getTargetException();    if (t instanceof SnmpStatusException)     throw (SnmpStatusException)t;    throw new SnmpStatusException(SnmpStatusException.noAccess);  }catch (  Exception e) {    throw new SnmpStatusException(SnmpStatusException.noAccess);  }}  }
class C{  public KMLPlacemark(String namespaceURI){  super(namespaceURI);}  }
class C{  public static String build(Map<String,List<String>> domains){  StringBuilder sb=new StringBuilder();  sb.append("[libdefaults]\n");  if (!domains.isEmpty()) {    String defaultRealm=domains.keySet().iterator().next();    sb.append("default_realm = ").append(defaultRealm.toUpperCase()).append("\n\n");  }  sb.append("[realms]\n");  for (  Map.Entry<String,List<String>> entry : domains.entrySet()) {    sb.append(entry.getKey().toUpperCase()).append(" = {\n");    for (    String kdcAddress : entry.getValue()) {      sb.append("    kdc = ").append(kdcAddress).append("\n");    }    sb.append("\n}\n");  }  sb.append("\n");  sb.append("[domain_realm]\n");  for (  Map.Entry<String,List<String>> entry : domains.entrySet()) {    String domain=entry.getKey();    sb.append('.').append(domain.toLowerCase()).append(" = ").append(domain.toUpperCase()).append("\n");  }  sb.append("\n");  return sb.toString();}  }
class C{  public Matrix4f reflect(float nx,float ny,float nz,float px,float py,float pz){  return reflect(nx,ny,nz,px,py,pz,this);}  }
class C{  @SuppressWarnings("unchecked") private void mergeAt(int i){  if (DEBUG)   assert stackSize >= 2;  if (DEBUG)   assert i >= 0;  if (DEBUG)   assert i == stackSize - 2 || i == stackSize - 3;  int base1=runBase[i];  int len1=runLen[i];  int base2=runBase[i + 1];  int len2=runLen[i + 1];  if (DEBUG)   assert len1 > 0 && len2 > 0;  if (DEBUG)   assert base1 + len1 == base2;  runLen[i]=len1 + len2;  if (i == stackSize - 3) {    runBase[i + 1]=runBase[i + 2];    runLen[i + 1]=runLen[i + 2];  }  stackSize--;  int k=gallopRight((Comparable<Object>)a[base2],a,base1,len1,0);  if (DEBUG)   assert k >= 0;  base1+=k;  len1-=k;  if (len1 == 0)   return;  len2=gallopLeft((Comparable<Object>)a[base1 + len1 - 1],a,base2,len2,len2 - 1);  if (DEBUG)   assert len2 >= 0;  if (len2 == 0)   return;  if (len1 <= len2)   mergeLo(base1,len1,base2,len2); else   mergeHi(base1,len1,base2,len2);}  }
class C{  public GraphDocument(GraphModel graph,List<SourcePlugin> analyzers){  this(graph,analyzers.get(0));  for (  SourcePlugin analyzer : analyzers) {    addAnalysis(analyzer);  }}  }
class C{  public static Word prepareAvailableBits(Object o){  return JavaHeader.prepareAvailableBits(o);}  }
class C{  public DenseVector(double[] array){  this(array,0,array.length);}  }
class C{  public DefaultGenerator(DependencyManager mgr,TransformFactory... factories){  this.factories=Arrays.asList(requireNonNullElements(factories));  this.mgr=requireNonNull(mgr);  this.renderStack=new DefaultRenderStack();}  }
class C{  @Override public String toString(){  return nodeId + ": " + actionValues.toString();}  }
class C{  public boolean isData(){  return label.isData();}  }
class C{  protected Anonymous_derivedAttribute_2_Impl(){  super();}  }
class C{  public static boolean isTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;}  }
class C{  public double entropy(int g,int lag){  double h=0.0;  int n=cases.length - lag;  double ln2=Math.log(2.0);  int n0=0;  for (int i=0; i < n; i++) {    if (cases[i + lag][g] == 0) {      n0++;    }  }  double p;  if (n0 == 0 || n0 == n) {    return h;  } else {    p=(double)n0 / (double)n;    h=-(p * Math.log(p) + (1.0 - p) * Math.log(1.0 - p)) / ln2;  }  return h;}  }
class C{  public void score(int s){  score=s;}  }
class C{  public void onActivityResult(int requestCode,int resultCode,Intent data,FacebookDialog.Callback facebookDialogCallback){  Session session=Session.getActiveSession();  if (session != null) {    session.onActivityResult(activity,requestCode,resultCode,data);  }  handleFacebookDialogActivityResult(requestCode,resultCode,data,facebookDialogCallback);}  }
class C{  public ValidateMemoryParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_VALID_MEMORY_SUCCESS);}  }
class C{  public AddSkuToCartEventCommandImpl(final ShoppingCartCommandRegistry registry,final PriceService priceService,final PricingPolicyProvider pricingPolicyProvider,final ProductService productService,final ShopService shopService,final ProductQuantityStrategy productQuantityStrategy){  super(registry,priceService,pricingPolicyProvider,productService,shopService);  this.productQuantityStrategy=productQuantityStrategy;}  }
class C{  public boolean hasSplitTokenBy(){  return !splitTokenBy.isEmpty();}  }
class C{  private static Pointer computePointer(LongBuffer buffer){  Pointer result=null;  if (buffer.isDirect()) {    int oldPosition=buffer.position();    buffer.position(0);    result=Pointer.to(buffer.slice()).withByteOffset(oldPosition * Sizeof.LONG);    buffer.position(oldPosition);  } else   if (buffer.hasArray()) {    LongBuffer t=LongBuffer.wrap(buffer.array());    int elementOffset=buffer.position() + buffer.arrayOffset();    result=Pointer.to(t).withByteOffset(elementOffset * Sizeof.LONG);  }  return result;}  }
class C{  @CacheEvict(value={"shopService-shopByCode","shopService-shopById","shopService-shopByDomainName","shopService-allShops","shopService-shopWarehouses","shopService-shopWarehousesIds","web.addressBookFacade-allCountries","mailSenderBuilder-buildJavaMailSender"},allEntries=true) public void updateAttributeValue(final long shopId,final String attributeKey,final String attributeValue){  final Shop shop=shopDao.findById(shopId);  if (shop != null) {    AttrValueShop attrValueShop=shop.getAttributeByCode(attributeKey);    if (attrValueShop == null) {      final Attribute attribute=attributeService.findByAttributeCode(attributeKey);      attrValueShop=getGenericDao().getEntityFactory().getByIface(AttrValueShop.class);      attrValueShop.setVal(attributeValue);      attrValueShop.setAttribute(attribute);      attrValueShop.setShop(shop);      shop.getAttributes().add(attrValueShop);    } else {      attrValueShop.setVal(attributeValue);    }    shopDao.update(shop);  }}  }
class C{  private static byte[] generateConcatenatedKeyStream(List<byte[]> S_i,long lengthM){  byte[] concatenatedS_i=new byte[0];  int numRounds=(int)(Math.ceil(lengthM / (double)BLOCK_SIZE));  for (int i=1; i <= numRounds; i++) {    concatenatedS_i=ByteArrayUtils.concatenate(concatenatedS_i,S_i.get(i));  }  return concatenatedS_i;}  }
class C{  private void isValidOutstandingAmount(Object outStandingAmount,Object expectedAmount){  Assert.assertEquals((float)outStandingAmount,expectedAmount);}  }
class C{  public static CommandResult execCommand(List<String> commands,boolean isRoot,boolean isNeedResultMsg){  return execCommand(commands == null ? null : commands.toArray(new String[]{}),isRoot,isNeedResultMsg);}  }
class C{  public static void main(String[] args){  junit.textui.TestRunner.run(suite());}  }
class C{  public void flip(long startIndex,long endIndex){  assert startIndex >= 0 && startIndex < numBits;  assert endIndex >= 0 && endIndex <= numBits;  if (endIndex <= startIndex) {    return;  }  int startWord=(int)(startIndex >> 6);  int endWord=(int)((endIndex - 1) >> 6);  long startmask=-1L << startIndex;  long endmask=-1L >>> -endIndex;  if (startWord == endWord) {    bits[startWord]^=(startmask & endmask);    return;  }  bits[startWord]^=startmask;  for (int i=startWord + 1; i < endWord; i++) {    bits[i]=~bits[i];  }  bits[endWord]^=endmask;}  }
class C{  public void inputSentence(String text,String userName,List<String> targetUserNames,Network network){  Vertex input=createInputSentence(text.trim(),network);  input.addRelationship(Primitive.INSTANTIATION,Primitive.CHAT);  Vertex user=network.createSpeaker(userName);  input.addRelationship(Primitive.SPEAKER,user);  Set<String> uniqueTargetUserNames=new HashSet<String>();  for (  String targetUserName : targetUserNames) {    if (!targetUserName.equals(userName) && !uniqueTargetUserNames.contains(targetUserName)) {      uniqueTargetUserNames.add(targetUserName);      Vertex targetUser=null;      if (targetUserName.equals(getNick()) || targetUserName.equals(getNickAlt())) {        targetUser=network.createVertex(Primitive.SELF);      } else {        targetUser=network.createSpeaker(targetUserName);      }      input.addRelationship(Primitive.TARGET,targetUser);    }  }  user.addRelationship(Primitive.INPUT,input);  Vertex conversation=getConversation(network);  if (conversation == null) {    conversation=network.createInstance(Primitive.CONVERSATION);    conversation.addRelationship(Primitive.TYPE,Primitive.CHAT);    setConversation(conversation);    conversation.addRelationship(Primitive.SPEAKER,Primitive.SELF);    for (    String eachUser : getUsers()) {      conversation.addRelationship(Primitive.SPEAKER,network.createSpeaker(eachUser));    }  }  Language.addToConversation(input,conversation);  network.save();  getBot().memory().addActiveMemory(input);}  }
class C{  public static <T>T callFunction(String name,Map<String,?> params) throws ParseException {  return ParseTaskUtils.wait(ParseCloud.<T>callFunctionInBackground(name,params));}  }
class C{  public DotChart(Lattice<Token> input,Grammar grammar,Chart chart){  this.dotChart=chart;  this.pGrammar=grammar;  this.input=input;  this.sentLen=input.size();  this.dotcells=new ChartSpan<>(sentLen,null);  seed();}  }
class C{  private int startFrame(final int offset,final int nLocal,final int nStack){  int n=3 + nLocal + nStack;  if (frame == null || frame.length < n) {    frame=new int[n];  }  frame[0]=offset;  frame[1]=nLocal;  frame[2]=nStack;  return 3;}  }
class C{  @SuppressWarnings("unchecked") protected void notifyTestSetAvailable(TestSetEvent e){  Vector<TestSetListener> l;synchronized (this) {    l=(Vector<TestSetListener>)m_testSetListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptTestSet(e);    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:51.763 -0500",hash_original_method="2E6509BB2E24DB9AA8C338F19EA4BC2D",hash_generated_method="ED28D68FDCA718D798635F39E97C71BD") public void info(Object message,Throwable exception){  log(Level.INFO,String.valueOf(message),exception);}  }
class C{  public void config(String msg){  log(Level.CONFIG,msg);}  }
class C{  public NotDirectoryException(String file){  super(file);}  }
class C{  public static int tokenizeAndSubmitBlock(WordMap map,final byte[] inputBuffer,int startIndex,int length){  int tokenStartIndex=0;  int endIndex=startIndex + length;  map.rehash();  byte[][] keys=map.keys;  int[] values=map.values;  int size=map.size;  int tableMask=map.tableMask;  for (int i=startIndex; i < endIndex; i++) {    byte b=inputBuffer[i];    if (b == BYTE_SPACE || b == BYTE_NEWLINE || b == BYTE_TAB) {      if (i != tokenStartIndex) {        size+=submitWord(keys,values,tableMask,inputBuffer,tokenStartIndex,i - tokenStartIndex);        tokenStartIndex=i;      }      tokenStartIndex++;    }  }  map.size=size;  int residualSize=endIndex - tokenStartIndex;  if (residualSize > 0) {    System.arraycopy(inputBuffer,tokenStartIndex,inputBuffer,0,residualSize);    return residualSize;  }  return 0;}  }
class C{  private DeviceStatusUtils(){  throw new Error("Do not need instantiate!");}  }
class C{  public static void mergeSort(float[] a,int fromIndex,int toIndex,FloatComparator c){  rangeCheck(a.length,fromIndex,toIndex);  float aux[]=(float[])a.clone();  mergeSort1(aux,a,fromIndex,toIndex,c);}  }
class C{  private Object readAttribute(InputNode node,String name) throws Exception {  if (name != null) {    name=style.getAttribute(name);    node=node.getAttribute(name);  }  if (node == null) {    return null;  }  return root.read(node);}  }
class C{  private int computeShortestPathLenghts(int pStartNode,CategoryGraph catGraph){  int shortestPathLengthSum=0;  Set<Integer> alreadyExpanded=new HashSet<Integer>();  List<int[]> queue=new ArrayList<int[]>();  int[] innerList=new int[2];  innerList[0]=pStartNode;  innerList[1]=0;  queue.add(innerList);  while (!queue.isEmpty()) {    int[] queueElement=queue.get(0);    int currentNode=queueElement[0];    int distance=queueElement[1];    queue.remove(0);    if (!alreadyExpanded.contains(currentNode)) {      alreadyExpanded.add(currentNode);      shortestPathLengthSum+=distance;      Set<Integer> neighbors=catGraph.getNeighbors(currentNode);      for (      int neighbor : neighbors) {        if (!alreadyExpanded.contains(neighbor)) {          int[] tmpList=new int[2];          tmpList[0]=neighbor;          tmpList[1]=(distance + 1);          queue.add(tmpList);        }      }    }  }  return shortestPathLengthSum;}  }
class C{  private boolean showRockyShores(long chunkX,long chunkY){  return (chunkX * chunkX + chunkY * chunkY) > 4096;}  }
class C{  public String toString(){  return ((namespaceURI == emptyString) ? localPart : '{' + namespaceURI + '}'+ localPart);}  }
class C{  public String title(){  return mTitle;}  }
class C{  public GroupMembershipType accessTokenGroupsRequested(){  return this.accessTokenGroupsRequested;}  }
class C{  public void addInstruction(String instruction){synchronized (instructions) {    instructions.add(instruction);  }}  }
class C{  public void runSample(String[] args){  CommandLine line=null;  try {    CommandLineParser parser=new DefaultParser();    line=parser.parse(getOptions(),args);    String sample=line.getOptionValue("s");    String operation=line.getOptionValue("o");    String payload=line.getOptionValue("p");    for (    SampleHandler handler : handlers) {      if (handler.getType().equalsIgnoreCase(sample)) {        handler.callSample(operation,payload);      }    }  } catch (  ParseException e) {    log.fatal("Error in parsing commands",e);  }}  }
class C{  public static void deployModules(final Vertx vertx,Class verticleClass,Map<String,Object> props,final Handler<Boolean> handler){  final Logger log=LoggerFactory.getLogger(verticleClass);  String redisHost=(String)props.get("redis.host");  Integer redisPort=(Integer)props.get("redis.port");  log.info("deploying redis module with host:" + redisHost + " port:"+ redisPort);  vertx.deployVerticle("org.swisspush.redisques.RedisQues",new DeploymentOptions().setConfig(RunConfig.buildRedisquesConfig()).setInstances(4),null);}  }
class C{  public void updateMRU(final String shelveSetName){  if (this.shelvesetNameComboMRUSet.add(shelveSetName)) {    new MRUPreferenceSerializer(TFSCommonUIClientPlugin.getDefault().getPreferenceStore()).write(this.shelvesetNameComboMRUSet,UIPreferenceConstants.SHELVE_DIALOG_NAME_MRU_PREFIX);  }}  }
class C{  private StrBuilder replaceImpl(StrMatcher matcher,String replaceStr,int from,int to,int replaceCount){  if (matcher == null || size == 0) {    return this;  }  int replaceLen=(replaceStr == null ? 0 : replaceStr.length());  char[] buf=buffer;  for (int i=from; i < to && replaceCount != 0; i++) {    int removeLen=matcher.isMatch(buf,i,from,to);    if (removeLen > 0) {      replaceImpl(i,i + removeLen,removeLen,replaceStr,replaceLen);      to=to - removeLen + replaceLen;      i=i + replaceLen - 1;      if (replaceCount > 0) {        replaceCount--;      }    }  }  return this;}  }
class C{  public Relationship matchPattern(Vertex sentence,Vertex previousResponse,Vertex input,Map<Vertex,Vertex> variables,Network network,float percentage){  List<Relationship> wordRelations=sentence.orderedRelationships(Primitive.WORD);  if (wordRelations == null) {    return null;  }  long startTime=System.currentTimeMillis();  Map<Vertex,Integer> matches=new HashMap<Vertex,Integer>();  long processTime=this.maxResponseMatchProcess;  List<Vertex> deferred=new ArrayList<Vertex>();  for (  Relationship wordRelation : wordRelations) {    long currentTime=System.currentTimeMillis();    if ((currentTime - startTime) > processTime) {      log("Pattern search time limit reached",Level.INFO,processTime,matches.size());      break;    }    Vertex word=wordRelation.getTarget();    recordPatternValues(word,sentence,matches,network,deferred);    Vertex lowercase=null;    if (!(word.getData() instanceof String)) {      return null;    }    String text=(String)word.getData();    if (Utils.isCaps(text) || Utils.isCapitalized(text)) {      lowercase=network.findByData(((String)word.getData()).toLowerCase());    } else {      lowercase=network.findByData(Utils.capitalize((String)word.getData()));    }    if ((lowercase != null) && (lowercase != word)) {      recordPatternValues(lowercase,sentence,matches,network,deferred);    }  }  for (  Vertex word : deferred) {    long currentTime=System.currentTimeMillis();    if ((currentTime - startTime) > processTime) {      log("Pattern search time limit reached",Level.INFO,processTime,matches.size());      break;    }    recordPatternValues(word,sentence,matches,network,null);  }  Map.Entry<Vertex,Integer> bestMatch=null;  Relationship bestResponse=null;  boolean bestHasUnderscore=false;  startTime=System.currentTimeMillis();  log("Found possible patterns",Level.FINE,matches.size());  if (!matches.isEmpty()) {    Vertex previousQuestionInput=input.getRelationship(Primitive.QUESTION);    Vertex previousQuestion=null;    if (previousQuestionInput != null) {      previousQuestion=previousQuestionInput.getRelationship(Primitive.INPUT);    }    Vertex conversation=input.getRelationship(Primitive.CONVERSATION);    Vertex currentTopic=null;    if (conversation != null) {      currentTopic=conversation.mostConscious(Primitive.TOPIC);    }    Set<String> questionWords=new HashSet<String>();    Collection<Relationship> wordRelationships=sentence.getRelationships(Primitive.WORD);    if (wordRelationships != null) {      for (      Relationship relationship : wordRelationships) {        questionWords.add(relationship.getTarget().getDataValue().toLowerCase());      }    }    for (    Map.Entry<Vertex,Integer> entry : matches.entrySet()) {      long currentTime=System.currentTimeMillis();      if ((currentTime - startTime) > processTime) {        log("Pattern process time limit reached",Level.INFO,processTime,matches.size());        break;      }      if (sentence == entry.getKey()) {        continue;      }      if (bestMatch == null) {        if (!evaluatePattern(entry.getKey(),sentence,Primitive.WILDCARD,variables,network)) {          continue;        }        bestResponse=bestResponse(percentage,input,entry.getKey(),sentence,previousResponse,false,false,previousQuestion,questionWords,currentTopic,network);        if (bestResponse != null) {          bestMatch=entry;          bestHasUnderscore=entry.getKey().hasRelationship(Primitive.WORD,Primitive.UNDERSCORE) || entry.getKey().hasRelationship(Primitive.WORD,Primitive.POUNDWILDCARD) || entry.getKey().hasRelationship(Primitive.TYPE,Primitive.PRECEDENCE);        }      } else {        boolean hasUnderscore=entry.getKey().hasRelationship(Primitive.WORD,Primitive.UNDERSCORE) || entry.getKey().hasRelationship(Primitive.WORD,Primitive.POUNDWILDCARD) || entry.getKey().hasRelationship(Primitive.TYPE,Primitive.PRECEDENCE);        if (entry.getValue() > bestMatch.getValue() || (hasUnderscore && !bestHasUnderscore)) {          if (!evaluatePattern(entry.getKey(),sentence,Primitive.WILDCARD,variables,network)) {            continue;          }          Relationship response=bestResponse(percentage,input,entry.getKey(),sentence,previousResponse,false,false,previousQuestion,questionWords,currentTopic,network);          if (response != null) {            bestResponse=response;            if (bestResponse != null) {              bestMatch=entry;              bestHasUnderscore=hasUnderscore;            }          }        }      }    }  }  if (bestResponse == null) {    log("No valid pattern",Level.FINE);    return null;  }  log("Pattern match",Level.FINE,bestMatch.getKey(),bestResponse);  return bestResponse;}  }
class C{  public List<String> hostClusterChangeDeclineDetails(URI hostId,URI clusterId,URI vCenterDataCenterId,boolean isVcenter){  Host host=_dbClient.queryObject(Host.class,hostId);  return Lists.newArrayList(ComputeSystemDialogProperties.getMessage("ComputeSystem.hostClusterChangeDeclineDetails",host.getLabel()));}  }
class C{  private String[] parsePropertyName(String name){  List<String> propName=new ArrayList<String>(5);  StringTokenizer tokenizer=new StringTokenizer(name,".");  while (tokenizer.hasMoreTokens()) {    propName.add(tokenizer.nextToken());  }  return propName.toArray(new String[propName.size()]);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  void loadNext(Long minPosition,Callback<TimelineResult<T>> cb){  if (withinMaxCapacity()) {    if (timelineStateHolder.startTimelineRequest()) {      timeline.next(minPosition,cb);    } else {      cb.failure(new TwitterException("Request already in flight"));    }  } else {    cb.failure(new TwitterException("Max capacity reached"));  }}  }
class C{  protected void events0(VisorNodeDataCollectorJobResult res,String evtOrderKey,String evtThrottleCntrKey,final boolean all){  res.events().addAll(collectEvents(ignite,evtOrderKey,evtThrottleCntrKey,all,compatibleWith(VER_1_7_2) ? EVT_MAPPER_V2 : EVT_MAPPER));}  }
class C{  public final double doOperation() throws OperatorFailedException {  final int dim=parameter.getDimension();  final int dim1=MathUtils.nextInt(dim);  int dim2=dim1;  while (dim1 == dim2) {    dim2=MathUtils.nextInt(dim);  }  double scalar1=parameter.getParameterValue(dim1);  double scalar2=parameter.getParameterValue(dim2);  if (isIntegerOperator) {    int d=MathUtils.nextInt((int)Math.round(delta)) + 1;    if (parameterWeights[dim1] != parameterWeights[dim2])     throw new RuntimeException();    scalar1=Math.round(scalar1 - d);    scalar2=Math.round(scalar2 + d);  } else {    final double d=MathUtils.nextDouble() * delta;    scalar1-=d;    if (parameterWeights[dim1] != parameterWeights[dim2]) {      scalar2+=d * (double)parameterWeights[dim1] / (double)parameterWeights[dim2];    } else {      scalar2+=d;    }  }  Bounds<Double> bounds=parameter.getBounds();  if (scalar1 < bounds.getLowerLimit(dim1) || scalar1 > bounds.getUpperLimit(dim1) || scalar2 < bounds.getLowerLimit(dim2) || scalar2 > bounds.getUpperLimit(dim2)) {    throw new OperatorFailedException("proposed values out of range!");  }  parameter.setParameterValue(dim1,scalar1);  parameter.setParameterValue(dim2,scalar2);  return 0.0;}  }
class C{  public void removeExtension(String oid){  if (criticalExtensions.containsKey(oid)) {    criticalExtensions.remove(oid);  } else   if (nonCriticalExtensions.containsKey(oid)) {    nonCriticalExtensions.remove(oid);  }}  }
class C{  public void removeFocusListener(FocusListener l){  if (focusListeners == null) {    return;  }  focusListeners.removeListener(l);}  }
class C{  protected boolean isRelevant(String term){  return term.length() >= 3 && matches(characterPattern,term);}  }
class C{  public boolean isEquivalentTo(TypeBinding otherType){  if (this == otherType)   return true;  if (otherType == null)   return false;switch (otherType.kind()) {case Binding.WILDCARD_TYPE:case Binding.INTERSECTION_TYPE:    return ((WildcardBinding)otherType).boundCheck(this);case Binding.PARAMETERIZED_TYPE:case Binding.RAW_TYPE:  return otherType.erasure() == this;}return false;}  }
class C{  public OfflinerQueryHandler(Context context){  super(context.getContentResolver());  this.mDebug=false;  this.mPackageName=context.getPackageName();}  }
class C{  public static void mailRegister(Context context,String productKey,String vendorKey,String mail,String password,AsyncHttpResponseHandler responseHandler){  List<Header> headerList=new ArrayList<Header>();  if (!TextUtils.isEmpty(productKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.PRODUCT_KEY,productKey));  }  if (!TextUtils.isEmpty(vendorKey)) {    headerList.add(new BasicHeader(ApiKey.HeadKey.VENDOR_KEY,vendorKey));  }  try {    String jsonParams=new JSONStringer().object().key(ApiKey.MAIL).value(mail).key(ApiKey.PASSWORD).value(password).endObject().toString();    if (DEBUG) {      LogUtils.d(jsonParams);    }    post(context,getApiServerUrl() + USER_REGISTER,headerList,jsonParams,responseHandler);  } catch (  JSONException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }catch (  UnsupportedEncodingException e) {    e.printStackTrace();    responseHandler.onFailure(INNER_ERROR_CODE,null,null,e);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public static Iterator<BOp> preOrderIterator(final BOp op){  return new Striterator(new SingleValueIterator(op)).append(preOrderIterator2(0,op));}  }
class C{  public ManageSieveException(String message){  super(message);}  }
class C{  public void clearProperty(String key){  props.remove(this.prefix + key);}  }
class C{  public NumberUp(int value){  super(value,1,Integer.MAX_VALUE);}  }
class C{  @NonNull protected static String sortableTitle(@Nullable String title){  if (title == null) {    return "";  }  title=title.toLowerCase();  if (title.startsWith("the ")) {    return title.substring(4);  } else   if (title.startsWith("a ")) {    return title.substring(2);  } else {    return title;  }}  }
class C{  public boolean removeSubject(Subject subject){  return subjects.remove(subject);}  }
class C{  private int[] doBidiReorder(int[] charIndices,int[] charLevels,int numChars,int highestLevel){  if (highestLevel == 0)   return charIndices;  int currentIndex=0;  while (currentIndex < numChars) {    while ((currentIndex < numChars) && (charLevels[currentIndex] < highestLevel)) {      currentIndex++;    }    if (currentIndex == numChars) {      break;    }    int startIndex=currentIndex;    currentIndex++;    while ((currentIndex < numChars) && (charLevels[currentIndex] == highestLevel)) {      currentIndex++;    }    int endIndex=currentIndex - 1;    int middle=((endIndex - startIndex) >> 1) + 1;    for (int i=0; i < middle; i++) {      int tmp=charIndices[startIndex + i];      charIndices[startIndex + i]=charIndices[endIndex - i];      charIndices[endIndex - i]=tmp;      charLevels[startIndex + i]=highestLevel - 1;      charLevels[endIndex - i]=highestLevel - 1;    }  }  return doBidiReorder(charIndices,charLevels,numChars,highestLevel - 1);}  }
class C{  public void replaceDefaultTables(boolean createSequenceTables,boolean generateFKConstraints) throws EclipseLinkException {  replaceDefaultTables(createSequenceTables,false,generateFKConstraints);}  }
class C{  public static Range iterateZBounds(XYZDataset dataset){  return iterateZBounds(dataset,true);}  }
class C{  public void usage(){  info(StringUtils.wrap(helpMap.get("launcher"),80,"\t"));  info("\n\nSTART\n\n");  help(Command.START);  info("STATUS\n\n");  help(Command.STATUS);  info("STOP\n\n");  help(Command.STOP);}  }
class C{  public ValidatableTokenMock(boolean invalidSignature){  this(invalidSignature,TestConstants.ISSUER);}  }
class C{  static HttpClient createHttpClient(long connTimeout,long idleTimeout){  HttpClient httpClient=new HttpClient();  httpClient.setUserAgentField(new HttpField(HttpHeader.USER_AGENT,"HTracedSpanReceiver"));  httpClient.setConnectTimeout(connTimeout);  httpClient.setIdleTimeout(idleTimeout);  return httpClient;}  }
class C{  public Date calculateHighestVisibleTickValue(DateTickUnit unit){  return previousStandardDate(getMaximumDate(),unit);}  }
class C{  public static void main(String[] args){  Billiards simulation=new Billiards();  simulation.run();}  }
class C{  public static List<String> splitLines(String s){  ArrayList ret=new ArrayList();  String[] split=s.split("!n");  ret.addAll(Arrays.asList(split));  return ret;}  }
class C{  public final double SFSchemeEntropy(){  return m_delegate.SFSchemeEntropy();}  }
class C{  public void surfaceWindowFocusChanged(boolean hasFocus){  focused=hasFocus;  if (focused) {    focusGained();  } else {    focusLost();  }}  }
class C{  public int transform(CtClass clazz,int pos,CodeIterator iterator,ConstPool cp) throws CannotCompileException {  int index;  int c=iterator.byteAt(pos);  if (c == NEW) {    index=iterator.u16bitAt(pos + 1);    if (cp.getClassInfo(index).equals(classname)) {      if (iterator.byteAt(pos + 3) != DUP)       throw new CannotCompileException("NEW followed by no DUP was found");      iterator.writeByte(NOP,pos);      iterator.writeByte(NOP,pos + 1);      iterator.writeByte(NOP,pos + 2);      iterator.writeByte(NOP,pos + 3);      ++nested;      StackMapTable smt=(StackMapTable)iterator.get().getAttribute(StackMapTable.tag);      if (smt != null)       smt.removeNew(pos);      StackMap sm=(StackMap)iterator.get().getAttribute(StackMap.tag);      if (sm != null)       sm.removeNew(pos);    }  } else   if (c == INVOKESPECIAL) {    index=iterator.u16bitAt(pos + 1);    int typedesc=cp.isConstructor(classname,index);    if (typedesc != 0 && nested > 0) {      int methodref=computeMethodref(typedesc,cp);      iterator.writeByte(INVOKESTATIC,pos);      iterator.write16bit(methodref,pos + 1);      --nested;    }  }  return pos;}  }
class C{  public static double geometricPdf(int k,double p){  if (k < 0)   throw new IllegalArgumentException();  return p * Math.pow(1 - p,k);}  }
class C{  private boolean processRunNowParameter(HttpServletRequest request) throws ServletException, IOException {  String serverID=WebUtil.getParameter(request,"RunNow");  if (serverID == null || serverID.length() == 0)   return false;  log.info("ServerID=" + serverID);  AdempiereServer server=m_serverMgr.getServer(serverID);  if (server == null) {    m_message=new p();    m_message.addElement(new strong("Server not found: "));    m_message.addElement(serverID);    return false;  }  server.runNow();  return true;}  }
class C{  public void copyFieldCameras(String src,String dest) throws IOException {  File inDir=new File(src,fieldCameraDirectory);  File outDir=new File(dest,fieldCameraDirectory);  if (!outDir.exists()) {    outDir.mkdir();  }  String[] files=inDir.list();  if (files == null) {    files=new String[0];  }  for (int i=0; i < files.length; ++i) {    if (files[i].endsWith(".properties")) {      File inFile=new File(inDir,files[i]);      File outFile=new File(outDir,files[i]);      FileHelper.copyFile(inFile,outFile);    }  }}  }
class C{  protected void updateChartLayout(){  chartContainer.removeAll();  List<String> selectedMetrics=getSelectedMetrics();  if (selectedMetrics.size() > 0) {    if (selectedMetrics.size() <= 1) {      chartContainer.setLayout(new GridLayout(1,1));    } else     if (selectedMetrics.size() <= 2) {      chartContainer.setLayout(new GridLayout(2,1));    } else     if (selectedMetrics.size() <= 4) {      chartContainer.setLayout(new GridLayout(2,2));    } else     if (selectedMetrics.size() <= 6) {      chartContainer.setLayout(new GridLayout(3,2));    } else {      chartContainer.setLayout(new GridLayout((int)Math.ceil(selectedMetrics.size() / 3.0),3));    }    GridLayout layout=(GridLayout)chartContainer.getLayout();    int spaces=layout.getRows() * layout.getColumns();    for (int i=0; i < Math.max(spaces,selectedMetrics.size()); i++) {      if (i < selectedMetrics.size()) {        chartContainer.add(createChart(selectedMetrics.get(i)));      } else {        chartContainer.add(new EmptyPlot(this));      }    }  }  chartContainer.revalidate();}  }
class C{  public HttpAsyncHandler(HttpWorker httpWorker){  this.httpWorker=httpWorker;}  }
class C{  @Override public boolean ownDeletesAreVisible(int type){  debugCodeCall("ownDeletesAreVisible",type);  return false;}  }
class C{  public String format(int number,int decimalPlaces){  StringBuilder sb=new StringBuilder();  int paddingRequired=decimalPlaces - (String.valueOf(number).length());  for (int x=0; x < paddingRequired; x++) {    sb.append("0");  }  sb.append(number);  return sb.toString();}  }
class C{  public void addNearKey(KeyCacheObject key,GridCacheSharedContext ctx) throws IgniteCheckedException {  nearKeys.add(key);}  }
class C{  @Override public void updateUI(){  super.updateUI();  setForeground(null);  setBackground(null);}  }
class C{  @Override public boolean onInterceptTouchEvent(MotionEvent ev){  if (!isEnabled() || !canSlide()) {    return false;  }  final int action=MotionEventCompat.getActionMasked(ev);switch (action) {case MotionEvent.ACTION_CANCEL:case MotionEvent.ACTION_UP:    dragHelper.cancel();  return false;case MotionEvent.ACTION_DOWN:int index=MotionEventCompat.getActionIndex(ev);activePointerId=MotionEventCompat.getPointerId(ev,index);if (activePointerId == INVALID_POINTER) {return false;}default :return dragHelper.shouldInterceptTouchEvent(ev);}}  }
class C{  private void fillOpenClosingAnimations(boolean isCloseAnimation,List<Animator> textAnimations,List<Animator> imageAnimations,int wrapperPosition){  AnimatorSet textAnimatorSet=new AnimatorSet();  Animator textAppearance=isCloseAnimation ? AnimatorUtils.alfaDisappear(mTextWrapper.getChildAt(wrapperPosition)) : AnimatorUtils.alfaAppear(mTextWrapper.getChildAt(wrapperPosition));  Animator textTranslation=isCloseAnimation ? AnimatorUtils.translationRight(mTextWrapper.getChildAt(wrapperPosition),mContext.getResources().getDimension(R.dimen.text_right_translation)) : AnimatorUtils.translationLeft(mTextWrapper.getChildAt(wrapperPosition),mContext.getResources().getDimension(R.dimen.text_right_translation));  textAnimatorSet.playTogether(textAppearance,textTranslation);  textAnimations.add(textAnimatorSet);  Animator imageRotation=isCloseAnimation ? wrapperPosition == 0 ? AnimatorUtils.rotationCloseToRight(mMenuWrapper.getChildAt(wrapperPosition)) : AnimatorUtils.rotationCloseVertical(mMenuWrapper.getChildAt(wrapperPosition)) : wrapperPosition == 0 ? AnimatorUtils.rotationOpenFromRight(mMenuWrapper.getChildAt(wrapperPosition)) : AnimatorUtils.rotationOpenVertical(mMenuWrapper.getChildAt(wrapperPosition));  imageAnimations.add(imageRotation);}  }
class C{  private static void add(char c){  getLog().addToBuffer(c);}  }
class C{  protected void count_and_yield(boolean moreExpected) throws SAXException {  if (!moreExpected)   eventcounter=0;  if (--eventcounter <= 0) {    co_yield(true);    eventcounter=frequency;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:10.154 -0500",hash_original_method="7AF5A4434AA58EF13D06038DF32CDF19",hash_generated_method="E790735BA5A7D8C4474CBC6F75D30A60") @Override public int length(){  return 0;}  }
class C{  private static String arrayToString(float[] array){  StringBuilder result=new StringBuilder("[");  for (int index=0; index < array.length - 1; ++index) {    result.append(array[index]).append(",");  }  if (array.length > 0) {    result.append(array[array.length - 1]);  }  result.append("]");  return result.toString();}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private static byte[] generateSecretKey(){  final byte[] rawKey=generateRawKey();  byte[] secretKey=new byte[16];  for (int i=0; i < 16; i++) {    if (rawKey != null && rawKey.length >= 16) {      secretKey[i]=rawKey[i];    } else {      secretKey[i]='0';    }  }  return secretKey;}  }
class C{  @NotNull public static TypeConversion identity(){  return new TypeConversion(Function.identity());}  }
class C{  public RTextScrollPane(RTextArea textArea,boolean lineNumbers){  this(textArea,lineNumbers,Color.GRAY);}  }
class C{  private CUserManager(final SQLProvider provider,final List<IUser> users){  this.provider=Preconditions.checkNotNull(provider,"IE02716: provider argument can not be null.");  this.users.addAll(users);  this.provider.addListener(providerListener);}  }
class C{  public void initializeAttributes(AbstractElement elt){  for (int i=length - 1; i >= 2; i-=3) {    resetAttribute(elt,keys[i - 2],keys[i - 1],keys[i]);  }}  }
class C{  private void readCode(final MethodVisitor mv,final Context context,int u){  byte[] b=this.b;  char[] c=context.buffer;  int maxStack=readUnsignedShort(u);  int maxLocals=readUnsignedShort(u + 2);  int codeLength=readInt(u + 4);  u+=8;  int codeStart=u;  int codeEnd=u + codeLength;  Label[] labels=context.labels=new Label[codeLength + 2];  readLabel(codeLength + 1,labels);  while (u < codeEnd) {    int offset=u - codeStart;    int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:case ClassWriter.IMPLVAR_INSN:      u+=1;    break;case ClassWriter.LABEL_INSN:  readLabel(offset + readShort(u + 1),labels);u+=3;break;case ClassWriter.LABELW_INSN:readLabel(offset + readInt(u + 1),labels);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {u+=6;} else {u+=4;}break;case ClassWriter.TABL_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 8) - readInt(u + 4) + 1; i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=4;}u+=12;break;case ClassWriter.LOOK_INSN:u=u + 4 - (offset & 3);readLabel(offset + readInt(u),labels);for (int i=readInt(u + 4); i > 0; --i) {readLabel(offset + readInt(u + 12),labels);u+=8;}u+=8;break;case ClassWriter.VAR_INSN:case ClassWriter.SBYTE_INSN:case ClassWriter.LDC_INSN:u+=2;break;case ClassWriter.SHORT_INSN:case ClassWriter.LDCW_INSN:case ClassWriter.FIELDORMETH_INSN:case ClassWriter.TYPE_INSN:case ClassWriter.IINC_INSN:u+=3;break;case ClassWriter.ITFMETH_INSN:case ClassWriter.INDYMETH_INSN:u+=5;break;default :u+=4;break;}}for (int i=readUnsignedShort(u); i > 0; --i) {Label start=readLabel(readUnsignedShort(u + 2),labels);Label end=readLabel(readUnsignedShort(u + 4),labels);Label handler=readLabel(readUnsignedShort(u + 6),labels);String type=readUTF8(items[readUnsignedShort(u + 8)],c);mv.visitTryCatchBlock(start,end,handler,type);u+=8;}u+=2;int[] tanns=null;int[] itanns=null;int tann=0;int itann=0;int ntoff=-1;int nitoff=-1;int varTable=0;int varTypeTable=0;boolean zip=true;boolean unzip=(context.flags & EXPAND_FRAMES) != 0;int stackMap=0;int stackMapSize=0;int frameCount=0;Context frame=null;Attribute attributes=null;for (int i=readUnsignedShort(u); i > 0; --i) {String attrName=readUTF8(u + 2,c);if ("LocalVariableTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {varTable=u + 8;for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}label+=readUnsignedShort(v + 12);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}v+=10;}}} else if ("LocalVariableTypeTable".equals(attrName)) {varTypeTable=u + 8;} else if ("LineNumberTable".equals(attrName)) {if ((context.flags & SKIP_DEBUG) == 0) {for (int j=readUnsignedShort(u + 8), v=u; j > 0; --j) {int label=readUnsignedShort(v + 10);if (labels[label] == null) {readLabel(label,labels).status|=Label.DEBUG;}Label l=labels[label];while (l.line > 0) {if (l.next == null) {l.next=new Label();}l=l.next;}l.line=readUnsignedShort(v + 12);v+=4;}}} else if (ANNOTATIONS && "RuntimeVisibleTypeAnnotations".equals(attrName)) {tanns=readTypeAnnotations(mv,context,u + 8,true);ntoff=tanns.length == 0 || readByte(tanns[0]) < 0x43 ? -1 : readUnsignedShort(tanns[0] + 1);} else if (ANNOTATIONS && "RuntimeInvisibleTypeAnnotations".equals(attrName)) {itanns=readTypeAnnotations(mv,context,u + 8,false);nitoff=itanns.length == 0 || readByte(itanns[0]) < 0x43 ? -1 : readUnsignedShort(itanns[0] + 1);} else if (FRAMES && "StackMapTable".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else if (FRAMES && "StackMap".equals(attrName)) {if ((context.flags & SKIP_FRAMES) == 0) {zip=false;stackMap=u + 10;stackMapSize=readInt(u + 4);frameCount=readUnsignedShort(u + 8);}} else {for (int j=0; j < context.attrs.length; ++j) {if (context.attrs[j].type.equals(attrName)) {Attribute attr=context.attrs[j].read(this,u + 8,readInt(u + 4),c,codeStart - 8,labels);if (attr != null) {attr.next=attributes;attributes=attr;}}}}u+=6 + readInt(u + 4);}u+=2;if (FRAMES && stackMap != 0) {frame=context;frame.offset=-1;frame.mode=0;frame.localCount=0;frame.localDiff=0;frame.stackCount=0;frame.local=new Object[maxLocals];frame.stack=new Object[maxStack];if (unzip) {getImplicitFrame(context);}for (int i=stackMap; i < stackMap + stackMapSize - 2; ++i) {if (b[i] == 8) {int v=readUnsignedShort(i + 1);if (v >= 0 && v < codeLength) {if ((b[codeStart + v] & 0xFF) == Opcodes.NEW) {readLabel(v,labels);}}}}}u=codeStart;while (u < codeEnd) {int offset=u - codeStart;Label l=labels[offset];if (l != null) {Label next=l.next;l.next=null;mv.visitLabel(l);if ((context.flags & SKIP_DEBUG) == 0 && l.line > 0) {mv.visitLineNumber(l.line,l);while (next != null) {mv.visitLineNumber(next.line,l);next=next.next;}}}while (FRAMES && frame != null && (frame.offset == offset || frame.offset == -1)) {if (frame.offset != -1) {if (!zip || unzip) {mv.visitFrame(Opcodes.F_NEW,frame.localCount,frame.local,frame.stackCount,frame.stack);} else {mv.visitFrame(frame.mode,frame.localDiff,frame.local,frame.stackCount,frame.stack);}}if (frameCount > 0) {stackMap=readFrame(stackMap,zip,unzip,frame);--frameCount;} else {frame=null;}}int opcode=b[u] & 0xFF;switch (ClassWriter.TYPE[opcode]) {case ClassWriter.NOARG_INSN:mv.visitInsn(opcode);u+=1;break;case ClassWriter.IMPLVAR_INSN:if (opcode > Opcodes.ISTORE) {opcode-=59;mv.visitVarInsn(Opcodes.ISTORE + (opcode >> 2),opcode & 0x3);} else {opcode-=26;mv.visitVarInsn(Opcodes.ILOAD + (opcode >> 2),opcode & 0x3);}u+=1;break;case ClassWriter.LABEL_INSN:mv.visitJumpInsn(opcode,labels[offset + readShort(u + 1)]);u+=3;break;case ClassWriter.LABELW_INSN:mv.visitJumpInsn(opcode - 33,labels[offset + readInt(u + 1)]);u+=5;break;case ClassWriter.WIDE_INSN:opcode=b[u + 1] & 0xFF;if (opcode == Opcodes.IINC) {mv.visitIincInsn(readUnsignedShort(u + 2),readShort(u + 4));u+=6;} else {mv.visitVarInsn(opcode,readUnsignedShort(u + 2));u+=4;}break;case ClassWriter.TABL_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int min=readInt(u + 4);int max=readInt(u + 8);Label[] table=new Label[max - min + 1];u+=12;for (int i=0; i < table.length; ++i) {table[i]=labels[offset + readInt(u)];u+=4;}mv.visitTableSwitchInsn(min,max,labels[label],table);break;}case ClassWriter.LOOK_INSN:{u=u + 4 - (offset & 3);int label=offset + readInt(u);int len=readInt(u + 4);int[] keys=new int[len];Label[] values=new Label[len];u+=8;for (int i=0; i < len; ++i) {keys[i]=readInt(u);values[i]=labels[offset + readInt(u + 4)];u+=8;}mv.visitLookupSwitchInsn(labels[label],keys,values);break;}case ClassWriter.VAR_INSN:mv.visitVarInsn(opcode,b[u + 1] & 0xFF);u+=2;break;case ClassWriter.SBYTE_INSN:mv.visitIntInsn(opcode,b[u + 1]);u+=2;break;case ClassWriter.SHORT_INSN:mv.visitIntInsn(opcode,readShort(u + 1));u+=3;break;case ClassWriter.LDC_INSN:mv.visitLdcInsn(readConst(b[u + 1] & 0xFF,c));u+=2;break;case ClassWriter.LDCW_INSN:mv.visitLdcInsn(readConst(readUnsignedShort(u + 1),c));u+=3;break;case ClassWriter.FIELDORMETH_INSN:case ClassWriter.ITFMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];boolean itf=b[cpIndex - 1] == ClassWriter.IMETH;String iowner=readClass(cpIndex,c);cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);if (opcode < Opcodes.INVOKEVIRTUAL) {mv.visitFieldInsn(opcode,iowner,iname,idesc);} else {mv.visitMethodInsn(opcode,iowner,iname,idesc,itf);}if (opcode == Opcodes.INVOKEINTERFACE) {u+=5;} else {u+=3;}break;}case ClassWriter.INDYMETH_INSN:{int cpIndex=items[readUnsignedShort(u + 1)];int bsmIndex=context.bootstrapMethods[readUnsignedShort(cpIndex)];Handle bsm=(Handle)readConst(readUnsignedShort(bsmIndex),c);int bsmArgCount=readUnsignedShort(bsmIndex + 2);Object[] bsmArgs=new Object[bsmArgCount];bsmIndex+=4;for (int i=0; i < bsmArgCount; i++) {bsmArgs[i]=readConst(readUnsignedShort(bsmIndex),c);bsmIndex+=2;}cpIndex=items[readUnsignedShort(cpIndex + 2)];String iname=readUTF8(cpIndex,c);String idesc=readUTF8(cpIndex + 2,c);mv.visitInvokeDynamicInsn(iname,idesc,bsm,bsmArgs);u+=5;break;}case ClassWriter.TYPE_INSN:mv.visitTypeInsn(opcode,readClass(u + 1,c));u+=3;break;case ClassWriter.IINC_INSN:mv.visitIincInsn(b[u + 1] & 0xFF,b[u + 2]);u+=3;break;default :mv.visitMultiANewArrayInsn(readClass(u + 1,c),b[u + 3] & 0xFF);u+=4;break;}while (tanns != null && tann < tanns.length && ntoff <= offset) {if (ntoff == offset) {int v=readAnnotationTarget(context,tanns[tann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),true));}ntoff=++tann >= tanns.length || readByte(tanns[tann]) < 0x43 ? -1 : readUnsignedShort(tanns[tann] + 1);}while (itanns != null && itann < itanns.length && nitoff <= offset) {if (nitoff == offset) {int v=readAnnotationTarget(context,itanns[itann]);readAnnotationValues(v + 2,c,true,mv.visitInsnAnnotation(context.typeRef,context.typePath,readUTF8(v,c),false));}nitoff=++itann >= itanns.length || readByte(itanns[itann]) < 0x43 ? -1 : readUnsignedShort(itanns[itann] + 1);}}if (labels[codeLength] != null) {mv.visitLabel(labels[codeLength]);}if ((context.flags & SKIP_DEBUG) == 0 && varTable != 0) {int[] typeTable=null;if (varTypeTable != 0) {u=varTypeTable + 2;typeTable=new int[readUnsignedShort(varTypeTable) * 3];for (int i=typeTable.length; i > 0; ) {typeTable[--i]=u + 6;typeTable[--i]=readUnsignedShort(u + 8);typeTable[--i]=readUnsignedShort(u);u+=10;}}u=varTable + 2;for (int i=readUnsignedShort(varTable); i > 0; --i) {int start=readUnsignedShort(u);int length=readUnsignedShort(u + 2);int index=readUnsignedShort(u + 8);String vsignature=null;if (typeTable != null) {for (int j=0; j < typeTable.length; j+=3) {if (typeTable[j] == start && typeTable[j + 1] == index) {vsignature=readUTF8(typeTable[j + 2],c);break;}}}mv.visitLocalVariable(readUTF8(u + 4,c),readUTF8(u + 6,c),vsignature,labels[start],labels[start + length],index);u+=10;}}if (tanns != null) {for (int i=0; i < tanns.length; ++i) {if ((readByte(tanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,tanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),true));}}}if (itanns != null) {for (int i=0; i < itanns.length; ++i) {if ((readByte(itanns[i]) >> 1) == (0x40 >> 1)) {int v=readAnnotationTarget(context,itanns[i]);v=readAnnotationValues(v + 2,c,true,mv.visitLocalVariableAnnotation(context.typeRef,context.typePath,context.start,context.end,context.index,readUTF8(v,c),false));}}}while (attributes != null) {Attribute attr=attributes.next;attributes.next=null;mv.visitAttribute(attributes);attributes=attr;}mv.visitMaxs(maxStack,maxLocals);}  }
class C{  public void dispose(){  m_module.removeListener(m_moduleListener);  m_provider.dispose();}  }
class C{  public void morphAndWait(Component source,Component destination,int duration){  morph(source,destination,duration,true,null);}  }
class C{  public BasicMemoryCache(long loWater,long capacity){  this.entries=new java.util.concurrent.ConcurrentHashMap<Object,CacheEntry>();  this.listeners=new java.util.concurrent.CopyOnWriteArrayList<MemoryCache.CacheListener>();  this.capacity.set(capacity);  this.lowWater=loWater;  this.currentUsedCapacity.set((long)0);}  }
class C{  @Deprecated public static void dragQuarterScreenDown(ActivityInstrumentationTestCase test){  dragQuarterScreenDown(test,test.getActivity());}  }
class C{  public boolean isNegated(){  return typeString.contains(SUFFIX_NEGATED);}  }
class C{  private static void registerVariants(){  for (  String name : calendarProperties.stringPropertyNames()) {    if (name.startsWith(PROP_PREFIX)) {      String id=name.substring(PROP_PREFIX.length());      if (id.indexOf('.') >= 0) {        continue;      }      if (id.equals(INSTANCE.getId())) {        continue;      }      try {        HijrahChronology chrono=new HijrahChronology(id);        AbstractChronology.registerChrono(chrono);      } catch (      DateTimeException ex) {        PlatformLogger logger=PlatformLogger.getLogger("java.time.chrono");        logger.severe("Unable to initialize Hijrah calendar: " + id,ex);      }    }  }}  }
class C{  @Override public void actionPerformed(ActionEvent ae){  searchMetrics=null;  if (ae == null || ae.getSource() == clearButton)   currState=game.getInitialState(); else   if (!game.isTerminal(currState)) {    if (ae.getSource() == proposeButton)     proposeMove(); else {      for (int i=0; i < 9; i++)       if (ae.getSource() == squares[i])       currState=game.getResult(currState,new XYLocation(i % 3,i / 3));    }  }  for (int i=0; i < 9; i++) {    String val=currState.getValue(i % 3,i / 3);    if (val == TicTacToeState.EMPTY)     val="";    squares[i].setText(val);  }  updateStatus();}  }
class C{  private void updateBackground(){  Color bg=UIManager.getColor("Panel.background");  if (bg == null) {    bg=new JPanel().getBackground();  }  setBackground(bg);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:10.439 -0500",hash_original_method="42CAAAC2E67437069EA69BA0A3B8DA56",hash_generated_method="76E424DC49D42A2D893E882C0F5ED6C6") private WebHistoryItem(WebHistoryItem item){  mUrl=item.mUrl;  mTitle=item.mTitle;  mFlattenedData=item.mFlattenedData;  mFavicon=item.mFavicon;  mId=item.mId;}  }
class C{  protected Component createStatusbar(){  status=new StatusBar();  return status;}  }
class C{  default B clearStoredEnchants(){  this.meta().removeStoredEnchants();  return this.getBuilder();}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(ChartChangeEventType.GENERAL)) {    return ChartChangeEventType.GENERAL;  } else   if (this.equals(ChartChangeEventType.NEW_DATASET)) {    return ChartChangeEventType.NEW_DATASET;  } else   if (this.equals(ChartChangeEventType.DATASET_UPDATED)) {    return ChartChangeEventType.DATASET_UPDATED;  }  return null;}  }
class C{  public static void moveFolder(final File sourceLocation,final File targetLocation) throws IOException {  Log.i(TAG,"Moving folder content " + sourceLocation + " to "+ targetLocation);  if (sourceLocation.isDirectory()) {    if (!targetLocation.exists() && !targetLocation.mkdirs()) {      throw new IOException("Cannot create dir " + targetLocation.getAbsolutePath());    }    final String[] children=sourceLocation.list();    for (int i=0; i < children.length; i++) {      moveFolder(new File(sourceLocation,children[i]),new File(targetLocation,children[i]));    }  } else {    final File directory=targetLocation.getParentFile();    if (directory != null && !directory.exists() && !directory.mkdirs()) {      throw new IOException("Cannot create dir " + directory.getAbsolutePath());    }    final boolean good=sourceLocation.renameTo(targetLocation);    if (!good) {      Log.e(TAG,"Error moving " + sourceLocation + " to "+ targetLocation);    }  }}  }
class C{  public Iterator<String> iterator(){  return list.iterator();}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  public static Option createList(String description){  return new Option(Type.LIST,"",UNLIMITED_LENGTH,description);}  }
class C{  public static Document parseAndValidate(InputStream in,URI schemaURL,String sourceName) throws XMLException, IOException {  XMLErrorHandler errorHandler=new XMLErrorHandler(sourceName);  Document doc;  try {    doc=createDocumentBuilder().parse(in);  } catch (  SAXException e) {    throw new XMLException(errorHandler.toString(),e);  }  Source source=new DOMSource(doc);  DOMResult result=new DOMResult();  Validator validator=getValidator(schemaURL);  validator.setErrorHandler(errorHandler);  try {    validator.validate(source,result);  } catch (  SAXException e) {    throw new XMLException(errorHandler.toString(),e);  }  if (errorHandler.hasErrors()) {    throw new XMLException(errorHandler.toString());  }  return (Document)result.getNode();}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public AndrewsCurves(PlotterConfigurationModel settings,DataTable dataTable){  this(settings);  setDataTable(dataTable);}  }
class C{  public boolean matchComparator(String dbschema,String codeschema){  if (!codeschema.startsWith(COMPARATOR_PACKAGE)) {    codeschema=COMPARATOR_PACKAGE + codeschema;  }  return dbschema.equals(codeschema);}  }
class C{  public String write(Integer indent){  return write(indent,null);}  }
class C{  public static long firstFieldOffset(Class clazz){  long minSize=roundUpTo8(headerSize(clazz));  while (clazz != Object.class) {    for (    Field f : clazz.getDeclaredFields()) {      if ((f.getModifiers() & Modifier.STATIC) == 0) {        long offset=unsafe.objectFieldOffset(f);        if (offset < minSize) {          minSize=offset;        }      }    }    clazz=clazz.getSuperclass();  }  return minSize;}  }
class C{  public void removeActionsFor(int entityId){  Vector<EntityAction> toKeep=new Vector<EntityAction>(actions.size());  for (  EntityAction ea : actions) {    if (ea.getEntityId() != entityId) {      toKeep.addElement(ea);    }  }  actions=toKeep;}  }
class C{  private void ensureCapacity(int n){  if (n <= 0) {    return;  }  int max;  if (data == null || data.length == 0) {    max=25;  } else   if (data.length >= n * 5) {    return;  } else {    max=data.length;  }  while (max < n * 5) {    max*=2;  }  String newData[]=new String[max];  if (length > 0) {    System.arraycopy(data,0,newData,0,length * 5);  }  data=newData;}  }
class C{  public char first(){  pos=begin;  return current();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public Matrix4x3f translationRotate(float tx,float ty,float tz,Quaternionfc quat){  float dqx=quat.x() + quat.x();  float dqy=quat.y() + quat.y();  float dqz=quat.z() + quat.z();  float q00=dqx * quat.x();  float q11=dqy * quat.y();  float q22=dqz * quat.z();  float q01=dqx * quat.y();  float q02=dqx * quat.z();  float q03=dqx * quat.w();  float q12=dqy * quat.z();  float q13=dqy * quat.w();  float q23=dqz * quat.w();  m00=1.0f - (q11 + q22);  m01=q01 + q23;  m02=q02 - q13;  m10=q01 - q23;  m11=1.0f - (q22 + q00);  m12=q12 + q03;  m20=q02 + q13;  m21=q12 - q03;  m22=1.0f - (q11 + q00);  m30=tx;  m31=ty;  m32=tz;  properties=0;  return this;}  }
class C{  public boolean hasRerolled(){  return rerolled;}  }
class C{  public Entity(MacAddress macAddress,VlanVid vlan,IPv4Address ipv4Address,DatapathId switchDPID,OFPort switchPort,Date lastSeenTimestamp){  this.macAddress=macAddress;  this.ipv4Address=ipv4Address;  this.vlan=vlan;  this.switchDPID=switchDPID;  this.switchPort=switchPort;  this.lastSeenTimestamp=lastSeenTimestamp;  this.activeSince=lastSeenTimestamp;}  }
class C{  @Override public byte[] encode(){  byte binValue[]=new byte[HEADER_LENGTH + DATA_LENGTH];  binValue[0]=(byte)(getAttributeType() >> 8);  binValue[1]=(byte)(getAttributeType() & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  binValue[4]=transportProtocol;  binValue[5]=0x00;  binValue[6]=0x00;  binValue[7]=0x00;  return binValue;}  }
class C{  void start(){  if (!mRunning) {    mTriggerPercentage=0;    mStartTime=AnimationUtils.currentAnimationTimeMillis();    mRunning=true;    mParent.postInvalidate();  }}  }
class C{  public boolean isColorMaskRedEnabled(){  return mColorMaskR;}  }
class C{  public byte[] booleanRepresentation(int ind,int n){  byte[] rep=new byte[n];  for (int i=0; i < n; i++) {    rep[i]=(byte)0;  }  for (int i=0; i < n; i++) {    int rem=ind % 2;    if (rem == 1) {      rep[n - i - 1]=(byte)1;      ind-=1;    }    ind/=2;  }  return rep;}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(getTitle());  int length=getItemCount();  for (int k=0; k < length; k++) {    xySeries.add(k + 1,getMinimumValue(k));    xySeries.add(k + 1.000001,getMaximumValue(k));  }  return xySeries;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addElement(new Option("\tThe significance level (default: 0.05).\n","-L",1,"-L <double>"));  result.addElement(new Option("\tSets list of attributes to act on (or its inverse). 'first and 'last' are accepted as well.'\n" + "\tE.g.: first-5,7,9,20-last\n" + "\t(default: first-last)","R",1,"-R <range>"));  result.addElement(new Option("\tInvert matching sense (i.e. act on all attributes not specified in list)","V",0,"-V"));  result.addElement(new Option("\tUse short identifiers for merged subsets.","O",0,"-O"));  result.addAll(Collections.list(super.listOptions()));  return result.elements();}  }
class C{  public EscapeSequenceCharacterPattern(){  finMap.put('A',KeyType.ArrowUp);  finMap.put('B',KeyType.ArrowDown);  finMap.put('C',KeyType.ArrowRight);  finMap.put('D',KeyType.ArrowLeft);  finMap.put('E',KeyType.Unknown);  finMap.put('G',KeyType.Unknown);  finMap.put('H',KeyType.Home);  finMap.put('F',KeyType.End);  finMap.put('P',KeyType.F1);  finMap.put('Q',KeyType.F2);  finMap.put('R',KeyType.F3);  finMap.put('S',KeyType.F4);  finMap.put('Z',KeyType.ReverseTab);  stdMap.put(1,KeyType.Home);  stdMap.put(2,KeyType.Insert);  stdMap.put(3,KeyType.Delete);  stdMap.put(4,KeyType.End);  stdMap.put(5,KeyType.PageUp);  stdMap.put(6,KeyType.PageDown);  stdMap.put(11,KeyType.F1);  stdMap.put(12,KeyType.F2);  stdMap.put(13,KeyType.F3);  stdMap.put(14,KeyType.F4);  stdMap.put(15,KeyType.F5);  stdMap.put(16,KeyType.F5);  stdMap.put(17,KeyType.F6);  stdMap.put(18,KeyType.F7);  stdMap.put(19,KeyType.F8);  stdMap.put(20,KeyType.F9);  stdMap.put(21,KeyType.F10);  stdMap.put(23,KeyType.F11);  stdMap.put(24,KeyType.F12);  stdMap.put(25,KeyType.F13);  stdMap.put(26,KeyType.F14);  stdMap.put(28,KeyType.F15);  stdMap.put(29,KeyType.F16);  stdMap.put(31,KeyType.F17);  stdMap.put(32,KeyType.F18);  stdMap.put(33,KeyType.F19);}  }
class C{  public SourceRange cspCases(List<JCCase> trees){  if ((trees == null) || !(trees.nonEmpty()))   return null;  SourceRange list_sr=new SourceRange();  for (List<JCCase> l=trees; l.nonEmpty(); l=l.tail) {    list_sr.mergeWith(csp(l.head));  }  positions.put(trees,list_sr);  return list_sr;}  }
class C{  private static void loadModelClassesFromConfig(SessionNode sessionNode){  String nodeName=sessionNode.getBoxType();  if (nodeName != null) {    String baseName=extractBase(nodeName);    Class[] newModelClasses=modelClasses(baseName);    if (newModelClasses != null) {      sessionNode.setModelClasses(newModelClasses);    } else {      throw new RuntimeException("Model classes for this session " + "node were not set in the configuration.");    }  }}  }
class C{  public TripsToLegsModule(Provider<TripRouter> tripRouterProvider,GlobalConfigGroup globalConfigGroup){  this(null,tripRouterProvider,globalConfigGroup);}  }
class C{  public void error(CharSequence message){  log(Level.SEVERE,message);}  }
class C{  public void doTask(String code){switch (code) {case Constants.Operation.GET_APP_DOWNLOAD_PROGRESS:    String downloadingApp=Preference.getString(context,context.getResources().getString(R.string.current_downloading_app));  JSONObject result=new JSONObject();ApplicationManager applicationManager=new ApplicationManager(context);if (applicationManager.isPackageInstalled(Constants.AGENT_PACKAGE_NAME)) {IntentFilter filter=new IntentFilter(Constants.AGENT_APP_ACTION_RESPONSE);filter.addCategory(Intent.CATEGORY_DEFAULT);AgentServiceResponseReceiver receiver=new AgentServiceResponseReceiver();registerReceiver(receiver,filter);CommonUtils.callAgentApp(context,Constants.Operation.GET_APP_DOWNLOAD_PROGRESS,null,null);} else {try {  result.put(INTENT_KEY_APP,downloadingApp);  result.put(INTENT_KEY_PROGRESS,Preference.getString(context,context.getResources().getString(R.string.app_download_progress)));} catch (JSONException e) {  Log.e(TAG,"Result object creation failed" + e);  sendBroadcast(Constants.Status.INTERNAL_SERVER_ERROR,null);}sendBroadcast(Constants.Status.SUCCESSFUL,result.toString());}break;default :Log.e(TAG,"Invalid operation code received");break;}}  }
class C{  public DependencyGraph findLongestCallChain(){  int depth=0;  DependencyGraph deepest=null;  for (  Object dep : vertices.keySet()) {    int itsDepth=getDepth(dep);    if (itsDepth > depth) {      deepest=getSubGraph(dep);      depth=itsDepth;    }  }  return deepest;}  }
class C{  @Override protected void onStartUp(){  controller.startApp(this);}  }
class C{  public void testBasics() throws IOException {  Analyzer a=new BasqueAnalyzer();  checkOneTerm(a,"zaldi","zaldi");  checkOneTerm(a,"zaldiak","zaldi");  assertAnalyzesTo(a,"izan",new String[]{});  a.close();}  }
class C{  public static boolean deleteQuietly(File file){  if (file == null) {    return false;  }  try {    if (file.isDirectory()) {      cleanDirectory(file);    }  } catch (  Exception e) {  }  try {    return file.delete();  } catch (  Exception e) {    return false;  }}  }
class C{  public OdbcResponse(int status,@Nullable String err){  assert status != STATUS_SUCCESS;  this.status=status;  this.obj=null;  this.err=err;}  }
class C{  public static void serializeActions(JsonGenerator jsonGenerator,List<OFAction> actions) throws IOException, JsonProcessingException {  if (actions.isEmpty()) {    jsonGenerator.writeStringField("none","drop");  }  for (  OFAction a : actions) {switch (a.getType()) {case OUTPUT:      jsonGenerator.writeStringField(ActionUtils.STR_OUTPUT,((OFActionOutput)a).getPort().toString());    break;case SET_VLAN_VID:  jsonGenerator.writeNumberField(ActionUtils.STR_VLAN_SET_VID,((OFActionSetVlanVid)a).getVlanVid().getVlan());break;case SET_VLAN_PCP:jsonGenerator.writeNumberField(ActionUtils.STR_VLAN_SET_PCP,((OFActionSetVlanPcp)a).getVlanPcp().getValue());break;case SET_QUEUE:jsonGenerator.writeNumberField(ActionUtils.STR_QUEUE_SET,((OFActionSetQueue)a).getQueueId());break;case SET_DL_SRC:jsonGenerator.writeStringField(ActionUtils.STR_DL_SRC_SET,((OFActionSetDlSrc)a).getDlAddr().toString());break;case SET_DL_DST:jsonGenerator.writeStringField(ActionUtils.STR_DL_DST_SET,((OFActionSetDlDst)a).getDlAddr().toString());break;case SET_NW_SRC:jsonGenerator.writeStringField(ActionUtils.STR_NW_SRC_SET,((OFActionSetNwSrc)a).getNwAddr().toString());break;case SET_NW_DST:jsonGenerator.writeStringField(ActionUtils.STR_NW_DST_SET,((OFActionSetNwDst)a).getNwAddr().toString());break;case SET_NW_TOS:jsonGenerator.writeNumberField(ActionUtils.STR_NW_TOS_SET,((OFActionSetNwTos)a).getNwTos());break;case SET_TP_SRC:jsonGenerator.writeNumberField(ActionUtils.STR_TP_SRC_SET,((OFActionSetTpSrc)a).getTpPort().getPort());break;case SET_TP_DST:jsonGenerator.writeNumberField(ActionUtils.STR_TP_DST_SET,((OFActionSetTpDst)a).getTpPort().getPort());break;case ENQUEUE:jsonGenerator.writeNumberField(ActionUtils.STR_ENQUEUE,((OFActionEnqueue)a).getPort().getPortNumber());break;case GROUP:jsonGenerator.writeStringField(ActionUtils.STR_GROUP,((OFActionGroup)a).getGroup().toString());break;case STRIP_VLAN:jsonGenerator.writeString(ActionUtils.STR_VLAN_STRIP);break;case PUSH_VLAN:jsonGenerator.writeNumberField(ActionUtils.STR_VLAN_PUSH,((OFActionPushVlan)a).getEthertype().getValue());break;case PUSH_MPLS:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_PUSH,((OFActionPushMpls)a).getEthertype().getValue());break;case PUSH_PBB:jsonGenerator.writeNumberField(ActionUtils.STR_PBB_PUSH,((OFActionPushPbb)a).getEthertype().getValue());break;case POP_VLAN:jsonGenerator.writeString(ActionUtils.STR_VLAN_POP);break;case POP_MPLS:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_POP,((OFActionPopMpls)a).getEthertype().getValue());break;case POP_PBB:jsonGenerator.writeString(ActionUtils.STR_PBB_POP);break;case COPY_TTL_IN:jsonGenerator.writeString(ActionUtils.STR_TTL_IN_COPY);break;case COPY_TTL_OUT:jsonGenerator.writeString(ActionUtils.STR_TTL_OUT_COPY);break;case DEC_NW_TTL:jsonGenerator.writeString(ActionUtils.STR_NW_TTL_DEC);break;case DEC_MPLS_TTL:jsonGenerator.writeString(ActionUtils.STR_MPLS_TTL_DEC);break;case SET_MPLS_LABEL:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_LABEL_SET,((OFActionSetMplsLabel)a).getMplsLabel());break;case SET_MPLS_TC:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_TC_SET,((OFActionSetMplsTc)a).getMplsTc());break;case SET_MPLS_TTL:jsonGenerator.writeNumberField(ActionUtils.STR_MPLS_TTL_SET,((OFActionSetMplsTtl)a).getMplsTtl());break;case SET_NW_ECN:jsonGenerator.writeNumberField(ActionUtils.STR_NW_ECN_SET,((OFActionSetNwEcn)a).getNwEcn().getEcnValue());break;case SET_NW_TTL:jsonGenerator.writeNumberField(ActionUtils.STR_NW_TTL_SET,((OFActionSetNwTtl)a).getNwTtl());break;case EXPERIMENTER:jsonGenerator.writeNumberField(ActionUtils.STR_EXPERIMENTER,((OFActionExperimenter)a).getExperimenter());break;case SET_FIELD:if (((OFActionSetField)a).getField() instanceof OFOxmArpOp) {jsonGenerator.writeNumberField(MatchUtils.STR_ARP_OPCODE,((OFOxmArpOp)((OFActionSetField)a).getField()).getValue().getOpcode());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSha) {jsonGenerator.writeStringField(MatchUtils.STR_ARP_SHA,((OFOxmArpSha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTha) {jsonGenerator.writeStringField(MatchUtils.STR_ARP_DHA,((OFOxmArpTha)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpSpa) {jsonGenerator.writeStringField(MatchUtils.STR_ARP_SPA,((OFOxmArpSpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmArpTpa) {jsonGenerator.writeStringField(MatchUtils.STR_ARP_DPA,((OFOxmArpTpa)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdSll) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_ND_SSL,((OFOxmIpv6NdSll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTll) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_ND_TTL,((OFOxmIpv6NdTll)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6NdTarget) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_ND_TARGET,((OFOxmIpv6NdTarget)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthType) {jsonGenerator.writeNumberField(MatchUtils.STR_DL_TYPE,((OFOxmEthType)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthSrc) {jsonGenerator.writeStringField(MatchUtils.STR_DL_SRC,((OFOxmEthSrc)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmEthDst) {jsonGenerator.writeStringField(MatchUtils.STR_DL_DST,((OFOxmEthDst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanVid) {jsonGenerator.writeNumberField(MatchUtils.STR_DL_VLAN,((OFOxmVlanVid)((OFActionSetField)a).getField()).getValue().getVlan());} else if (((OFActionSetField)a).getField() instanceof OFOxmVlanPcp) {} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Code) {jsonGenerator.writeNumberField(MatchUtils.STR_ICMP_CODE,((OFOxmIcmpv4Code)((OFActionSetField)a).getField()).getValue().getCode());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv4Type) {jsonGenerator.writeNumberField(MatchUtils.STR_ICMP_TYPE,((OFOxmIcmpv4Type)((OFActionSetField)a).getField()).getValue().getType());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Code) {jsonGenerator.writeNumberField(MatchUtils.STR_ICMPV6_CODE,((OFOxmIcmpv6Code)((OFActionSetField)a).getField()).getValue().getRaw());} else if (((OFActionSetField)a).getField() instanceof OFOxmIcmpv6Type) {jsonGenerator.writeNumberField(MatchUtils.STR_ICMPV6_TYPE,((OFOxmIcmpv6Type)((OFActionSetField)a).getField()).getValue().getRaw());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpProto) {jsonGenerator.writeNumberField(MatchUtils.STR_NW_PROTO,((OFOxmIpProto)((OFActionSetField)a).getField()).getValue().getIpProtocolNumber());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Src) {jsonGenerator.writeStringField(MatchUtils.STR_NW_SRC,((OFOxmIpv4Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv4Dst) {jsonGenerator.writeStringField(MatchUtils.STR_NW_DST,((OFOxmIpv4Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Src) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_SRC,((OFOxmIpv6Src)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Dst) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_DST,((OFOxmIpv6Dst)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpv6Flabel) {jsonGenerator.writeStringField(MatchUtils.STR_IPV6_FLOW_LABEL,((OFOxmIpv6Flabel)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpEcn) {jsonGenerator.writeNumberField(MatchUtils.STR_NW_ECN,((OFOxmIpEcn)((OFActionSetField)a).getField()).getValue().getEcnValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmIpDscp) {jsonGenerator.writeNumberField(MatchUtils.STR_NW_DSCP,((OFOxmIpDscp)((OFActionSetField)a).getField()).getValue().getDscpValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpSrc) {jsonGenerator.writeNumberField(MatchUtils.STR_TCP_SRC,((OFOxmTcpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmTcpDst) {jsonGenerator.writeNumberField(MatchUtils.STR_TCP_DST,((OFOxmTcpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpSrc) {jsonGenerator.writeNumberField(MatchUtils.STR_UDP_SRC,((OFOxmUdpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmUdpDst) {jsonGenerator.writeNumberField(MatchUtils.STR_UDP_DST,((OFOxmUdpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpSrc) {jsonGenerator.writeNumberField(MatchUtils.STR_SCTP_SRC,((OFOxmSctpSrc)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmSctpDst) {jsonGenerator.writeNumberField(MatchUtils.STR_SCTP_DST,((OFOxmSctpDst)((OFActionSetField)a).getField()).getValue().getPort());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsLabel) {jsonGenerator.writeNumberField(MatchUtils.STR_MPLS_LABEL,((OFOxmMplsLabel)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsTc) {jsonGenerator.writeNumberField(MatchUtils.STR_MPLS_TC,((OFOxmMplsTc)((OFActionSetField)a).getField()).getValue().getValue());} else if (((OFActionSetField)a).getField() instanceof OFOxmMplsBos) {jsonGenerator.writeStringField(MatchUtils.STR_MPLS_TC,((OFOxmMplsBos)((OFActionSetField)a).getField()).getValue().toString());} else if (((OFActionSetField)a).getField() instanceof OFOxmMetadata) {jsonGenerator.writeNumberField(MatchUtils.STR_METADATA,((OFOxmMetadata)((OFActionSetField)a).getField()).getValue().getValue().getValue());} else {logger.error("Could not decode Set-Field action field: {}",((OFActionSetField)a));}}}}  }
class C{  public void clearMacros(){  this.getMacroHandler().clear();}  }
class C{  private static Reflect on(Method method,Object object,Object... args) throws ReflectException {  try {    accessible(method);    if (method.getReturnType() == void.class) {      method.invoke(object,args);      return on(object);    } else {      return on(method.invoke(object,args));    }  } catch (  Exception e) {    throw new ReflectException(e);  }}  }
class C{  public AssertingSpanWeight(IndexSearcher searcher,SpanWeight in) throws IOException {  super((SpanQuery)in.getQuery(),searcher,null,1f);  this.in=in;}  }
class C{  public void runTest(){  try {    assureResultsDirectoryExists(RESULTS_DIR);    Template template1=RuntimeSingleton.getTemplate(getFileName(null,"template/test1",TMPL_FILE_EXT));    Template template2=RuntimeSingleton.getTemplate(getFileName(null,"template/test2",TMPL_FILE_EXT));    FileOutputStream fos1=new FileOutputStream(getFileName(RESULTS_DIR,"test1",RESULT_FILE_EXT));    FileOutputStream fos2=new FileOutputStream(getFileName(RESULTS_DIR,"test2",RESULT_FILE_EXT));    Writer writer1=new BufferedWriter(new OutputStreamWriter(fos1));    Writer writer2=new BufferedWriter(new OutputStreamWriter(fos2));    VelocityContext context=new VelocityContext();    template1.merge(context,writer1);    writer1.flush();    writer1.close();    template2.merge(context,writer2);    writer2.flush();    writer2.close();    if (!isMatch(RESULTS_DIR,COMPARE_DIR,"test1",RESULT_FILE_EXT,CMP_FILE_EXT) || !isMatch(RESULTS_DIR,COMPARE_DIR,"test2",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output is incorrect!");    }  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  private static boolean isBase64(byte octect){  if (octect == PAD) {    return true;  } else   if (base64Alphabet[octect] == -1) {    return false;  } else {    return true;  }}  }
class C{  private void resolveSmoke(){  IBoard board=game.getBoard();  int windDir=game.getPlanetaryConditions().getWindDirection();  int windStr=game.getPlanetaryConditions().getWindStrength();  if (game.getOptions().booleanOption("breeze") && (windStr == PlanetaryConditions.WI_NONE)) {    windStr=PlanetaryConditions.WI_LIGHT_GALE;  }  ArrayList<Coords> smokeToAdd;  HashMap<SmokeCloud,ArrayList<Coords>> smokeCloudData=new HashMap<SmokeCloud,ArrayList<Coords>>();  for (  SmokeCloud cloud : server.getSmokeCloudList()) {    smokeToAdd=new ArrayList<Coords>();    for (    Coords currentCoords : cloud.getCoordsList()) {      Coords smokeCoords=driftAddSmoke(currentCoords,windDir,windStr);      if (smokeCoords == null) {        Report r=new Report(5220,Report.PUBLIC);        r.add(currentCoords.getBoardNum());        vPhaseReport.addElement(r);        r=new Report(5222,Report.PUBLIC);        vPhaseReport.addElement(r);      } else       if (board.contains(smokeCoords) && !currentCoords.equals(smokeCoords)) {        smokeToAdd.add(smokeCoords);        cloud.setDrift(true);      } else       if (!board.contains(smokeCoords)) {        Report r=new Report(5230,Report.PUBLIC);        r.add(currentCoords.getBoardNum());        vPhaseReport.addElement(r);      }    }    if (smokeToAdd.size() > 0) {      smokeCloudData.put(cloud,smokeToAdd);    }  }  for (  SmokeCloud cloud : smokeCloudData.keySet()) {    smokeToAdd=smokeCloudData.get(cloud);    server.updateSmoke(cloud,smokeToAdd);  }  for (  SmokeCloud cloud : server.getSmokeCloudList()) {    int roll=Compute.d6(2);    boolean dissipated=driftSmokeDissipate(cloud,roll,windStr);    if (dissipated || cloud.didDrift()) {      driftSmokeReport(cloud,dissipated);      if (dissipated) {        cloud.reduceSmokeLevel();      }    }    cloud.setDrift(false);  }}  }
class C{  public static org.oscm.vo.VOInstanceInfo convertToApi(org.oscm.internal.vo.VOInstanceInfo oldVO){  if (oldVO == null) {    return null;  }  org.oscm.vo.VOInstanceInfo newVO=new org.oscm.vo.VOInstanceInfo();  newVO.setInstanceId(oldVO.getInstanceId());  newVO.setAccessInfo(oldVO.getAccessInfo());  newVO.setBaseUrl(oldVO.getBaseUrl());  newVO.setLoginPath(oldVO.getLoginPath());  return newVO;}  }
class C{  public boolean isRepeatable(){  return false;}  }
class C{  public void cull(){  geomNode.getSceneHints().setCullHint(CullHint.Always);  geomNode.updateGeometricState(0);  lineSegment.getSceneHints().setCullHint(CullHint.Always);  lineSegment.updateGeometricState(0);}  }
class C{  @Override public V waitForValue() throws ExecutionException {  if (computedReference == UNSET) {    boolean interrupted=false;    try {synchronized (this) {        while (computedReference == UNSET) {          try {            wait();          } catch (          InterruptedException ie) {            interrupted=true;          }        }      }    }  finally {      if (interrupted) {        Thread.currentThread().interrupt();      }    }  }  return computedReference.waitForValue();}  }
class C{  public static <K,V>void forEachKeyValue(Map<K,V> map,Procedure2<? super K,? super V> procedure,Executor executor){  ParallelMapIterate.forEachKeyValue(map,procedure,2,map.size(),executor);}  }
class C{  public boolean empty(){  return size == 0;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Object requestToServer(InetAddress addr,int port,Object request,int timeout,boolean replyExpected) throws IOException, ClassNotFoundException {  InetSocketAddress ipAddr;  if (addr == null) {    ipAddr=new InetSocketAddress(port);  } else {    ipAddr=new InetSocketAddress(addr,port);  }  long giveupTime=System.currentTimeMillis() + timeout;  short serverVersion=getServerVersion(ipAddr,timeout).shortValue();  if (serverVersion > Version.CURRENT_ORDINAL) {    serverVersion=Version.CURRENT_ORDINAL;  }  int gossipVersion=TcpServer.getCurrentGossipVersion();  if (Version.GFE_71.compareTo(serverVersion) > 0) {    gossipVersion=TcpServer.getOldGossipVersion();  }  long newTimeout=giveupTime - System.currentTimeMillis();  if (newTimeout <= 0) {    return null;  }  logger.debug("TcpClient sending {} to {}",request,ipAddr);  Socket sock=socketCreator.connect(ipAddr.getAddress(),ipAddr.getPort(),(int)newTimeout,null,false);  sock.setSoTimeout((int)newTimeout);  DataOutputStream out=null;  try {    out=new DataOutputStream(sock.getOutputStream());    if (serverVersion < Version.CURRENT_ORDINAL) {      out=new VersionedDataOutputStream(out,Version.fromOrdinalNoThrow(serverVersion,false));    }    out.writeInt(gossipVersion);    if (gossipVersion > TcpServer.getOldGossipVersion()) {      out.writeShort(serverVersion);    }    DataSerializer.writeObject(request,out);    out.flush();    if (replyExpected) {      DataInputStream in=new DataInputStream(sock.getInputStream());      in=new VersionedDataInputStream(in,Version.fromOrdinal(serverVersion,false));      try {        Object response=DataSerializer.readObject(in);        logger.debug("received response: {}",response);        return response;      } catch (      EOFException ex) {        throw new EOFException("Locator at " + ipAddr + " did not respond. This is normal if the locator was shutdown. If it wasn't check its log for exceptions.");      }    } else {      return null;    }  } catch (  UnsupportedVersionException ex) {    if (logger.isDebugEnabled()) {      logger.debug("Remote TcpServer version: " + serverVersion + " is higher than local version: "+ Version.CURRENT_ORDINAL+ ". This is never expected as remoteVersion");    }    return null;  } finally {    try {      if (replyExpected) {        if (!sock.isClosed() && !socketCreator.useSSL()) {          sock.setSoLinger(true,0);        }      }      sock.close();    } catch (    Exception e) {      logger.error("Error closing socket ",e);    }    if (out != null) {      out.close();    }  }}  }
class C{  public V remove(A arg){  Future<V> future=cache.remove(arg);  V res=null;  if (future != null) {    try {      res=future.get();    } catch (    InterruptedException|ExecutionException ignore) {    }  }  return res;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:06.125 -0500",hash_original_method="4EDEC57C2297C20220D48BA90CD455C6",hash_generated_method="2DDEA071AADB70B9000C80626B498058") public boolean equals(Object other){  if (other instanceof CSeqHeader) {    final CSeqHeader o=(CSeqHeader)other;    return this.getSeqNumber() == o.getSeqNumber() && this.getMethod().equals(o.getMethod());  }  return false;}  }
class C{  public static String readAsciiLine(InputStream in) throws IOException {  StringBuilder result=new StringBuilder(80);  while (true) {    int c=in.read();    if (c == -1) {      throw new EOFException();    } else     if (c == '\n') {      break;    }    result.append((char)c);  }  int length=result.length();  if (length > 0 && result.charAt(length - 1) == '\r') {    result.setLength(length - 1);  }  return result.toString();}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  private void applyAnalyses(SolrQueryRequest req,Iterable<ChronixAnalysis> analyses,JoinFunction key,long queryStart,long queryEnd,Map.Entry<String,List<SolrDocument>> docs,MetricTimeSeries timeSeries,FunctionValueMap analysisAndValues) throws ParseException, IOException {  final MetricTimeSeries transformedTimeSeries=timeSeries;  for (  ChronixAnalysis analysis : analyses) {    if (analysis.needSubquery()) {      String modifiedSubQuery=subQueryDateRangeParser.replaceRangeQueryTerms(analysis.getSubquery());      Map<String,List<SolrDocument>> subQueryDocuments=collectDocuments(modifiedSubQuery,req,key);      subQueryDocuments.entrySet().parallelStream().forEach(null);    } else {      analysis.execute(timeSeries,analysisAndValues);    }  }}  }
class C{  public void updateCoordinatorWithLicenseText(License license) throws CoordinatorClientException {  LicenseTextInfo licenseTextInfo=new LicenseTextInfo();  licenseTextInfo.setLicenseText(license.getLicenseText());  _coordinator.setTargetInfo(licenseTextInfo);}  }
class C{  public static void createJar(String dest,String... files) throws IOException {  createJar(dest,null,files);}  }
class C{  @Override public ExampleSet apply(ExampleSet eSet) throws OperatorException {  int minPtsLowerBound=0;  int minPtsUpperBound=0;  int minPtsLB=this.getParameterAsInt(PARAMETER_MINIMAL_POINTS_LOWER_BOUND);  int minPtsUB=this.getParameterAsInt(PARAMETER_MINIMAL_POINTS_UPPER_BOUND);  int kindOfDistance=this.getParameterAsInt(PARAMETER_DISTANCE_FUNCTION);  if (minPtsLB <= minPtsUB) {    minPtsLowerBound=minPtsLB;    minPtsUpperBound=minPtsUB;  } else {    minPtsLowerBound=minPtsUB;    minPtsUpperBound=minPtsLB;  }  Iterator<Example> reader=eSet.iterator();  int searchSpaceDimension=eSet.getAttributes().size();  SearchSpace sr=new SearchSpace(searchSpaceDimension,minPtsLowerBound,minPtsUpperBound + 1);  int counter=0;  while (reader.hasNext()) {    Example example=reader.next();    SearchObject so=new SearchObject(searchSpaceDimension,"object" + counter,minPtsLowerBound,minPtsUpperBound);    counter++;    int i=0;    for (    Attribute attribute : eSet.getAttributes()) {      so.setVektor(i++,example.getValue(attribute));    }    sr.addObject(so);    checkForStop();  }  sr.resetOutlierStatus();  sr.findAllKdContainers(kindOfDistance,this);  sr.computeLOF(minPtsLowerBound,minPtsUpperBound,this);  Attribute outlierAttribute=AttributeFactory.createAttribute(Attributes.OUTLIER_NAME,Ontology.REAL);  eSet.getExampleTable().addAttribute(outlierAttribute);  eSet.getAttributes().setOutlier(outlierAttribute);  counter=0;  Iterator<Example> reader2=eSet.iterator();  while (reader2.hasNext()) {    Example example=reader2.next();    SearchObject sobj=sr.getSearchObjects().elementAt(counter);    example.setValue(outlierAttribute,sobj.getOutlierFactor());    counter++;  }  return eSet;}  }
class C{  public final void add(@NotNull AnAction action,@NotNull ActionManager actionManager){  add(action,Constraints.LAST,actionManager);}  }
class C{  @Inject public RedisCacheService(SystemConfiguration config){  super(config);  _config=config;  poolConfig=new GenericObjectPoolConfig();  poolConfig.setMaxTotal(Integer.parseInt(_config.getValue(Property.REDIS_SERVER_MAX_CONNECTIONS.getName(),Property.REDIS_SERVER_MAX_CONNECTIONS.getDefaultValue())));  String[] hostsPorts=_config.getValue(Property.REDIS_CLUSTER.getName(),Property.REDIS_CLUSTER.getDefaultValue()).split(",");  jedisClusterNodes=new HashSet<HostAndPort>();  for (  String hostPort : hostsPorts) {    String[] hostPortPair=hostPort.split(":");    jedisClusterNodes.add(new HostAndPort(hostPortPair[0],Integer.parseInt(hostPortPair[1])));  }  jc=new JedisCluster(jedisClusterNodes,poolConfig);}  }
class C{  private void init(String publicId,String systemId,int lineNumber,int columnNumber){  this.publicId=publicId;  this.systemId=systemId;  this.lineNumber=lineNumber;  this.columnNumber=columnNumber;}  }
class C{  public Boolean isIgnoreSatisfiability(){  return ignoreSatisfiability;}  }
class C{  public static byte[] readStream(InputStream is) throws IOException {  ByteQueue q=new ByteQueue();  byte[] buf=new byte[1024];  for (; ; ) {    int bytesRead=is.read(buf);    if (bytesRead == -1)     break;    q.put(buf,0,bytesRead);  }  byte[] result=new byte[(int)q.getBytesWritten()];  q.get(result);  return result;}  }
class C{  public static JSONObject JsonPost(String url,String bssid,int serial,JSONObject postJSON,HeaderPair... headers){  int port=EspProxyServerImpl.getInstance().getEspProxyServerPort();  HeaderPair jsonHeader=new HeaderPair(HEADER_PROTO_TYPE,"" + EspProxyTask.M_PROTO_JSON);  HeaderPair serialHeader=new HeaderPair(HEADER_TASK_SERIAL,"" + serial);  HeaderPair[] hps=newDstHeaders(headers,jsonHeader,serialHeader);  return executeHttpRequest(url,port,METHOD_POST,bssid,postJSON,false,hps);}  }
class C{  private void doSepsetClosure(SepsetMapDci sepset,Graph graph){  List<Node> nodes=graph.getNodes();  List<NodePair> pairs=allNodePairs(nodes);  int p=1;  for (  NodePair pair : pairs) {    List<Node> possibleNodes=new ArrayList<>(nodes);    Node x=pair.getFirst();    Node y=pair.getSecond();    possibleNodes.remove(x);    possibleNodes.remove(y);    possibleNodes.addAll(graph.getAdjacentNodes(x));    possibleNodes.addAll(graph.getAdjacentNodes(y));    int c=1;    int ps=(int)Math.pow(2,possibleNodes.size());    for (    Set<Node> condSet : new PowerSet<>(possibleNodes)) {      System.out.println("Getting closure set... " + c + " of "+ ps+ "("+ p+ " of "+ pairs.size()+ " remaining)");      if (graph.isDSeparatedFrom(x,y,new ArrayList<>(condSet))) {        sepset.set(x,y,new ArrayList<>(condSet));      }      c++;    }    p++;  }}  }
class C{  private static int calculateMedian(List<Operation> operations){  int size=operations.size();  if (size == 0) {    return 0;  }  int[] times=new int[size];  for (int i=0; i < size; i++) {    times[i]=operations.get(i).exclusiveTimeMicros();  }  Arrays.sort(times);  int middle=size / 2;  if (size % 2 == 1) {    return times[middle];  } else {    return (times[middle - 1] + times[middle]) / 2;  }}  }
class C{  @Override public byte byteValue(){  return value;}  }
class C{  private void initializeMBean() throws org.apache.geode.admin.AdminException {  this.mbeanName=new StringBuffer("GemFire.Member:id=").append(MBeanUtil.makeCompliantMBeanNameProperty(getId())).append(",type=").append(MBeanUtil.makeCompliantMBeanNameProperty(getType().getName())).toString();  this.objectName=MBeanUtil.createMBean(this,addDynamicAttributes(MBeanUtil.lookupManagedBean(this)));  AdminDistributedSystemJmxImpl sysJmx=(AdminDistributedSystemJmxImpl)system;  if (sysJmx.getRefreshInterval() > 0)   this.refreshInterval=sysJmx.getRefreshInterval();}  }
class C{  public EqualsResult append(final double lhs,final double rhs){  if (!isEqual) {    return this;  }  return append(Double.doubleToLongBits(lhs),Double.doubleToLongBits(rhs));}  }
class C{  public static <T>Callable<T> memoizeCallable(final Callable<T> s){  final Map<Object,T> lazy=new ConcurrentHashMap<>();  return null;}  }
class C{  @DSComment("Data structure/no action") @DSSafe(DSCat.DATA_STRUCTURE) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:51.991 -0500",hash_original_method="BBEF4BC19B4322B516FB3983E945CAF6",hash_generated_method="F197DE3582D7DA20C6044E50A654B0C1") public boolean isEnabled(){  return getBooleanProperty(PROPERTY_ENABLED);}  }
class C{  @Override public MeasureColumnDataChunk[] readMeasureChunks(FileHolder fileReader,int... blockIndexes){  MeasureColumnDataChunk[] datChunk=new MeasureColumnDataChunk[values.length];  for (int i=0; i < blockIndexes.length; i++) {    datChunk[blockIndexes[i]]=readMeasureChunk(fileReader,blockIndexes[i]);  }  return datChunk;}  }
class C{  public Boolean isEagerlyScrub(){  return eagerlyScrub;}  }
class C{  public void addRotation(int axis1,int axis2,double angle){  if (trans == null) {    trans=new AffineTransformation(dim);  }  trans.addRotation(axis1,axis2,angle);}  }
class C{  public MockApplicationPreference(String key){  super(key);}  }
class C{  public void addLoadConstant(float k){  add(ByteCode.LDC,itsConstantPool.addConstant(k));}  }
class C{  public void list(PrintStream out){  out.println("-- listing properties --");  Hashtable<String,Object> h=new Hashtable<>();  enumerate(h);  for (Enumeration<String> e=h.keys(); e.hasMoreElements(); ) {    String key=e.nextElement();    String val=(String)h.get(key);    if (val.length() > 40) {      val=val.substring(0,37) + "...";    }    out.println(key + "=" + val);  }}  }
class C{  public MaxPQ(){  this(1);}  }
class C{  @Override protected void drawLabels(Canvas c,float pos){  float[] position=new float[]{0f,0f};  BarData bd=mChart.getData();  int step=bd.getDataSetCount();  for (int i=0; i < mXAxis.getValues().size(); i+=mXAxis.mAxisLabelModulus) {    position[1]=i * step + i * bd.getGroupSpace() + bd.getGroupSpace() / 2f;    if (step > 1) {      position[1]+=((float)step - 1f) / 2f;    }    mTrans.pointValuesToPixel(position);    if (mViewPortHandler.isInBoundsY(position[1])) {      String label=mXAxis.getValues().get(i);      c.drawText(label,pos,position[1] + mXAxis.mLabelHeight / 2f,mAxisLabelPaint);    }  }}  }
class C{  public IndTestSepset(SepsetMapDci sepset,List<Node> nodes){  if (sepset == null) {    throw new NullPointerException();  }  this.sepset=sepset;  this.nodesToVariables=new HashMap<>();  this.variablesToNodes=new HashMap<>();  for (  Node node : nodes) {    this.nodesToVariables.put(node,node);    this.variablesToNodes.put(node,node);  }  this.observedVars=calcObservedVars(nodes);}  }
class C{  private static void decodeTextCompaction(int[] textCompactionData,int[] byteCompactionData,int length,StringBuilder result){  Mode subMode=Mode.ALPHA;  Mode priorToShiftMode=Mode.ALPHA;  int i=0;  while (i < length) {    int subModeCh=textCompactionData[i];    char ch=0;switch (subMode) {case ALPHA:      if (subModeCh < 26) {        ch=(char)('A' + subModeCh);      } else {        if (subModeCh == 26) {          ch=' ';        } else         if (subModeCh == LL) {          subMode=Mode.LOWER;        } else         if (subModeCh == ML) {          subMode=Mode.MIXED;        } else         if (subModeCh == PS) {          priorToShiftMode=subMode;          subMode=Mode.PUNCT_SHIFT;        } else         if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {          result.append((char)byteCompactionData[i]);        } else         if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {          subMode=Mode.ALPHA;        }      }    break;case LOWER:  if (subModeCh < 26) {    ch=(char)('a' + subModeCh);  } else {    if (subModeCh == 26) {      ch=' ';    } else     if (subModeCh == AS) {      priorToShiftMode=subMode;      subMode=Mode.ALPHA_SHIFT;    } else     if (subModeCh == ML) {      subMode=Mode.MIXED;    } else     if (subModeCh == PS) {      priorToShiftMode=subMode;      subMode=Mode.PUNCT_SHIFT;    } else     if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {      result.append((char)byteCompactionData[i]);    } else     if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {      subMode=Mode.ALPHA;    }  }break;case MIXED:if (subModeCh < PL) {ch=MIXED_CHARS[subModeCh];} else {if (subModeCh == PL) {  subMode=Mode.PUNCT;} else if (subModeCh == 26) {  ch=' ';} else if (subModeCh == LL) {  subMode=Mode.LOWER;} else if (subModeCh == AL) {  subMode=Mode.ALPHA;} else if (subModeCh == PS) {  priorToShiftMode=subMode;  subMode=Mode.PUNCT_SHIFT;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {  result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {  subMode=Mode.ALPHA;}}break;case PUNCT:if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case ALPHA_SHIFT:subMode=priorToShiftMode;if (subModeCh < 26) {ch=(char)('A' + subModeCh);} else {if (subModeCh == 26) {ch=' ';} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;case PUNCT_SHIFT:subMode=priorToShiftMode;if (subModeCh < PAL) {ch=PUNCT_CHARS[subModeCh];} else {if (subModeCh == PAL) {subMode=Mode.ALPHA;} else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) {result.append((char)byteCompactionData[i]);} else if (subModeCh == TEXT_COMPACTION_MODE_LATCH) {subMode=Mode.ALPHA;}}break;}if (ch != 0) {result.append(ch);}i++;}}  }
class C{  private void configureFormatter(NumberFormat formatter){  formatter.setGroupingUsed(groupingUsed);  if (isMaxIntegerDigitsSet()) {    formatter.setMaximumIntegerDigits(maxIntegerDigits);  }  if (isMinIntegerDigitsSet()) {    formatter.setMinimumIntegerDigits(minIntegerDigits);  }  if (isMaxFractionDigitsSet()) {    formatter.setMaximumFractionDigits(maxFractionDigits);  }  if (isMinFractionDigitsSet()) {    formatter.setMinimumFractionDigits(minFractionDigits);  }}  }
class C{  public boolean paint(JComponent paintingComponent,JComponent bufferComponent,Graphics g,int x,int y,int w,int h){  boolean paintCompleted=false;  Image offscreen;  if (repaintManager.useVolatileDoubleBuffer() && (offscreen=getValidImage(repaintManager.getVolatileOffscreenBuffer(bufferComponent,w,h))) != null) {    VolatileImage vImage=(java.awt.image.VolatileImage)offscreen;    GraphicsConfiguration gc=bufferComponent.getGraphicsConfiguration();    for (int i=0; !paintCompleted && i < RepaintManager.VOLATILE_LOOP_MAX; i++) {      if (vImage.validate(gc) == VolatileImage.IMAGE_INCOMPATIBLE) {        repaintManager.resetVolatileDoubleBuffer(gc);        offscreen=repaintManager.getVolatileOffscreenBuffer(bufferComponent,w,h);        vImage=(java.awt.image.VolatileImage)offscreen;      }      paintDoubleBuffered(paintingComponent,vImage,g,x,y,w,h);      paintCompleted=!vImage.contentsLost();    }  }  if (!paintCompleted && (offscreen=getValidImage(repaintManager.getOffscreenBuffer(bufferComponent,w,h))) != null) {    paintDoubleBuffered(paintingComponent,offscreen,g,x,y,w,h);    paintCompleted=true;  }  return paintCompleted;}  }
class C{  public String createHash(char[] password){  SecureRandom random=new SecureRandom();  byte[] salt=new byte[saltBytes];  random.nextBytes(salt);  byte[] hash=pbkdf2(password,salt,pbkdf2Iterations,hashBytes);  return pbkdf2Iterations + ":" + toHex(salt)+ ":"+ toHex(hash);}  }
class C{  public int length(){  return end - start;}  }
class C{  @Override public boolean isEmpty(){  return size() == 0;}  }
class C{  public void execute(File assembleDir) throws MergeException {  InputStream is=(InputStream)this.next.performMerge();  if (is == null) {    return;  }  File outputFile=new File(assembleDir.getAbsolutePath() + File.separator + this.resource);  outputFile.getParentFile().mkdir();  FileOutputStream fos=null;  try {    fos=new FileOutputStream(outputFile);    byte[] buffer=new byte[1024];    int count;    while ((count=is.read(buffer)) > 0) {      fos.write(buffer,0,count);    }  } catch (  Exception e) {    throw new MergeException("Problem executing merge",e);  } finally {    try {      if (is != null) {        is.close();      }      if (fos != null) {        fos.close();      }    } catch (    Exception e) {      throw new MergeException("Problem when closing files used in merge",e);    }  }}  }
class C{  public static final double[][] appendColumns(final double[][] m1,final double[][] m2){  final int columndimension=getColumnDimensionality(m1);  final int ccolumndimension=getColumnDimensionality(m2);  assert (m1.length == m2.length) : "m.getRowDimension() != column.getRowDimension()";  final int rcolumndimension=columndimension + ccolumndimension;  final double[][] result=new double[m1.length][rcolumndimension];  for (int i=0; i < rcolumndimension; i++) {    if (i < columndimension) {      setCol(result,i,getCol(m1,i));    } else {      setCol(result,i,getCol(m2,i - columndimension));    }  }  return result;}  }
class C{  public IndTestCorrelationT(DataSet dataSet,double alpha){  if (!(dataSet.isContinuous())) {    throw new IllegalArgumentException("Data set must be continuous.");  }  this.covMatrix=new CovarianceMatrix(dataSet);  this._covMatrix=covMatrix.getMatrix();  List<Node> nodes=covMatrix.getVariables();  this.variables=Collections.unmodifiableList(nodes);  this.indexMap=indexMap(variables);  this.nameMap=mapNames(variables);  setAlpha(alpha);  this.dataSet=DataUtils.center(dataSet);  tDistribution=new TDistribution(dataSet.getNumRows() - 2);}  }
class C{  public static String encodeId(final String idValueToEncode,final String seoUri){  if (StringUtils.isNotBlank(seoUri)) {    return seoUri;  } else {    return idValueToEncode;  }}  }
class C{  public void testCmp5CaseRaw() throws ParseException {  checkIntersection(new Coordinate[]{new Coordinate(4348433.262114629,5552595.478385733),new Coordinate(4348440.849387404,5552599.272022122),new Coordinate(4348433.26211463,5552595.47838573),new Coordinate(4348440.8493874,5552599.27202212)},1,new Coordinate[]{new Coordinate(4348440.8493874,5552599.27202212)},0);}  }
class C{  private Link createLinkFromExistent(Link source,double distRelation,Id<Link> id,Node from,Node to){  final Id<Link> id1=id;  final Node from1=from;  final Node to1=to;  final Network network=net;  NetworkFactory r=net.getFactory();  return NetworkUtils.createLink(id1,from1,to1,network,source.getLength() * distRelation,source.getFreespeed(),source.getCapacity(),source.getNumberOfLanes());}  }
class C{  public JavaPairRDD<Envelope,HashSet<Point>> SpatialJoinQuery(PointRDD pointRDD,RectangleRDD rectangleRDD){  if (pointRDD.gridPointRDD == null) {    throw new NullPointerException("Need to do spatial partitioning first, gridedSRDD is null");  }  JavaPairRDD<Integer,Tuple2<Iterable<Point>,Iterable<Envelope>>> cogroupResult=pointRDD.gridPointRDD.cogroup(this.rectangleRDD.gridRectangleRDD);  JavaPairRDD<Envelope,HashSet<Point>> joinResultWithDuplicates=cogroupResult.flatMapToPair(new PointByRectangleJudgement(pointRDD.grids.size()));  JavaPairRDD<Envelope,HashSet<Point>> joinListResultAfterAggregation=aggregateJoinResultPointByRectangle(joinResultWithDuplicates);  return joinListResultAfterAggregation;}  }
class C{  private static String scrubJdiffParamType(String paramType){  return paramType.replace("<? extends java.lang.Object>","<?>");}  }
class C{  public static Point toSwtPoint(final java.awt.geom.Point2D p){  return new Point((int)Math.round(p.getX()),(int)Math.round(p.getY()));}  }
class C{  public synchronized List subList(int fromIndex,int toIndex){  Object[] elements=getArray();  int len=elements.length;  if (fromIndex < 0 || toIndex > len || fromIndex > toIndex)   throw new IndexOutOfBoundsException();  return new COWSubList(this,fromIndex,toIndex);}  }
class C{  public void testComplexOptimization02(){  new Helper(){{      given=select(varNode(x),where(alpNodeWithVars("x1","x2"),joinGroupWithVars("x1","x2"),stmtPatternWithVar("x1"),stmtPatternWithVarOptional("y1"),unionWithVars("y2","y1","y2"),subqueryWithVars("y1","y4","y5"),stmtPatternWithVar("y1"),bindingsClauseWithVars("x1","z1"),assignmentWithVar("bound","y1")));      expected=select(varNode(x),where(bindingsClauseWithVars("x1","z1"),stmtPatternWithVar("x1"),joinGroupWithVars("x1","x2"),alpNodeWithVars("x1","x2"),stmtPatternWithVarOptional("y1"),stmtPatternWithVar("y1"),unionWithVars("y2","y1","y2"),subqueryWithVars("y1","y4","y5"),assignmentWithVar("bound","y1")));    }  }.testWhileIgnoringExplainHints();}  }
class C{  public void testExceptionsOnSubMapSetValue(){  TreeMap<String,String> map=new TreeMap<String,String>();  map.put("A","a");  map.put("B","b");  map.put("C","c");  map.put("D","d");  assertAllEntryMethodsReturnImmutableEntries(map.subMap("A",true,"C",true));}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:50.683 -0500",hash_original_method="610901F49ED75C22083B75E1795D8046",hash_generated_method="41B172D6B8FA1C771110E3FCBAEF085C") public static void shuffle(List<?> list,Random random){  @SuppressWarnings("unchecked") final List<Object> objectList=(List<Object>)list;  if (list instanceof RandomAccess) {    for (int i=objectList.size() - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      objectList.set(index,objectList.set(i,objectList.get(index)));    }  } else {    Object[] array=objectList.toArray();    for (int i=array.length - 1; i > 0; i--) {      int index=random.nextInt(i + 1);      Object temp=array[i];      array[i]=array[index];      array[index]=temp;    }    int i=0;    ListIterator<Object> it=objectList.listIterator();    while (it.hasNext()) {      it.next();      it.set(array[i++]);    }  }}  }
class C{  public InvalidityDate(byte[] encoding) throws IOException {  super(encoding);  date=(Date)ASN1.decode(encoding);}  }
class C{  public void updateAllGroups(){  if (getGroupList() != null) {    for (    Group group : getGroupList()) {      group.update();    }  }}  }
class C{  public SQLRecoverableException(String reason,Throwable cause){  super(reason,cause);}  }
class C{  private void removeProgressView(){  if (progressView == null)   return;  removeView(progressView);  TurbolinksLog.d("Progress view removed");}  }
class C{  public ProjectDependencies createProjectDependencies(){  ProjectDependenciesImpl projectDependencies=new ProjectDependenciesImpl();  return projectDependencies;}  }
class C{  public VPFBasicFeatureClassFactory(){}  }
class C{  public MutablePeriod copy(){  return (MutablePeriod)clone();}  }
class C{  public StorageOSUser clone(){  StorageOSUser clone=new StorageOSUser(this._userName,this._tenantId);  clone._local=this._local;  clone._isProxied=this._isProxied;  clone._id=this._id;  clone._proxyToken=this._proxyToken;  clone._token=this._token;  StringSet attributes=new StringSet();  Iterator<String> itAttr=_attributes.iterator();  while (itAttr.hasNext()) {    attributes.add(itAttr.next());  }  clone._attributes=attributes;  StringSet groups=new StringSet();  Iterator<String> itGroup=_groups.iterator();  while (itGroup.hasNext()) {    groups.add(itGroup.next());  }  clone._groups=groups;  return clone;}  }
class C{  public final void testRead06() throws IOException {  InputStream is=new ByteArrayInputStream(myMessage);  DigestInputStream dis=new DigestInputStream(is,null);  dis.on(false);  for (int i=0; i < MY_MESSAGE_LEN; i++) {    assertTrue((byte)dis.read() == myMessage[i]);  }}  }
class C{  public SLMapServerInfo(){  this("http://maps.joshy.net/tiles/bmng_tiles_3");}  }
class C{  public Boolean isProvisioningNicSelectionSupported(){  return provisioningNicSelectionSupported;}  }
class C{  private void createPartitionRegion(List vmList,int startIndexForRegion,int endIndexForRegion,int localMaxMemory,int redundancy,boolean evict){  Iterator nodeIterator=vmList.iterator();  while (nodeIterator.hasNext()) {    VM vm=(VM)nodeIterator.next();    vm.invoke(createMultiplePartitionRegion(prPrefix,startIndexForRegion,endIndexForRegion,redundancy,localMaxMemory,evict));  }}  }
class C{  @SuppressWarnings("unchecked") private static void handleSuperClasses(CallGraph callGraph,ClassNode targetClass){  String superClassName=targetClass.superName;  if (superClassName == null || superClassName.isEmpty())   return;  if (superClassName.equals("java/lang/Object"))   return;  logger.debug("Creating calltree for superclass: " + superClassName);  ClassNode superClass=DependencyAnalysis.getClassNode(superClassName);  List<MethodNode> methods=superClass.methods;  for (  MethodNode mn : methods) {    logger.debug("Method: " + mn.name);    if (mn.name.equals("<init>"))     continue;    if (mn.name.equals("<clinit>"))     continue;    if ((mn.access & Opcodes.ACC_ABSTRACT) == Opcodes.ACC_ABSTRACT)     continue;    if ((mn.access & Opcodes.ACC_PUBLIC) == Opcodes.ACC_PUBLIC) {      if (!isOverridden(mn.name + mn.desc)) {        handleMethodNode(callGraph,superClass,mn,0);      }    }  }  handleSuperClasses(callGraph,superClass);}  }
class C{  public void doCircularLayout(){  m_graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.CIRCULAR);  m_graph.doLayout();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public CReference(final IAddress target,final ReferenceType type){  m_type=type;  m_target=target;}  }
class C{  private boolean removeElement(int s){  int at=indexOf(s,0);  if (at < 0)   return false;  removeElementAt(at);  return true;}  }
class C{  public void scale(float x,float y,float z){  Matrix4f tmp=new Matrix4f();  tmp.loadScale(x,y,z);  multiply(tmp);}  }
class C{  public ComponentBuilder strikethrough(boolean strikethrough){  current.setStrikethrough(strikethrough);  return this;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  private CIMObjectPath createDeviceGroup(final StorageSystem system,final StorageSystem forProvider,final List<? extends BlockObject> volumes,final DbClient dbClient) throws Exception {  URI cgUri=volumes.get(0).getConsistencyGroup();  if (cgUri == null) {    findOrCreateTargetBlockConsistencyGroup(volumes);    cgUri=volumes.get(0).getConsistencyGroup();  }  BlockConsistencyGroup cgObj=dbClient.queryObject(BlockConsistencyGroup.class,cgUri);  String cgName=cgObj.getAlternateLabel();  if (null == cgName) {    cgName=cgObj.getLabel();  }  Collection<String> nativeIds=transform(volumes,fctnBlockObjectToNativeID());  CIMObjectPath repSvcPath=cimPath.getControllerReplicationSvcPath(system);  CIMArgument[] cgOutArgs=new CIMArgument[5];  CIMObjectPath groupPath=helper.checkDeviceGroupExists(cgName,forProvider,system);  if (null != groupPath) {    Set<String> deviceNativeGuids=getVolumesPartOfRG(groupPath,forProvider,system);    if (deviceNativeGuids.isEmpty()) {      log.info("Found empty group with same name, adding Volumes to it.");      CIMArgument[] inArgs=helper.getAddMembersInputArguments(groupPath,cimPath.getVolumePaths(system,nativeIds.toArray(new String[nativeIds.size()])));      helper.invokeMethod(forProvider,repSvcPath,ADD_MEMBERS,inArgs,cgOutArgs);    } else {      Collection<String> nativeGuids=transform(volumes,fctnBlockObjectToNativeGuid());      if (deviceNativeGuids.containsAll(nativeGuids)) {        log.info("Requested volumes {} are already part of the group {}",Joiner.on(", ").join(nativeGuids),cgName);      } else {        throw DeviceControllerException.exceptions.srdfConsistencyGroupAlreadyExistsWithVolume(cgName);      }    }  } else {    CIMArgument[] cgInArgs=helper.getCreateReplicationGroupCreateInputArguments(system,cgName,cimPath.getVolumePaths(system,nativeIds.toArray(new String[nativeIds.size()])));    helper.invokeMethod(forProvider,repSvcPath,CREATE_GROUP,cgInArgs,cgOutArgs);    groupPath=cimPath.getCimObjectPathFromOutputArgs(cgOutArgs,CP_REPLICATION_GROUP);  }  cgObj.addSystemConsistencyGroup(system.getId().toString(),cgName);  cgObj.getRequestedTypes().add(Types.SRDF.toString());  cgObj.getTypes().add(Types.SRDF.toString());  cgObj.setStorageController(system.getId());  dbClient.persistObject(cgObj);  return groupPath;}  }
class C{  public boolean isEqual(AttributeSet attr){  return attributes.isEqual(attr);}  }
class C{  private void process(){  ArrayList<Point2D> pList=new ArrayList<Point2D>();  ArrayList<Color> cList=new ArrayList<Color>();  while (reader.getPointer() < reader.getTotalBitLen()) {    Point2D p=getPointCoords();    pList.add(p);    float[] cc={1f,1f,1f,1f};    for (int z=0; z < colCompCount; z++) {      cc[z]=reader.getFloat(bitsPerComponent);    }    Color c=new Color(cc[0],cc[1],cc[2],cc[3]);    cList.add(c);  }  int totalRows=pList.size() / verticesPerRow;  for (int mm=0; mm < (totalRows - 1); mm++) {    int mRows=mm * totalRows;    for (int nn=0; nn < (verticesPerRow - 1); nn++) {      int nm=nn + mRows;      int[] t=new int[6];      t[0]=nm;      t[1]=t[3]=nm + 1;      t[2]=t[4]=nm + verticesPerRow;      t[5]=nm + verticesPerRow + 1;      for (int z=0; z < t.length; z++) {        triangles.add(pList.get(t[z]));        triColors.add(cList.get(t[z]));      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int nextInt(){  return nextInt(this.my_N,this.my_s,this.my_n,this.randomGenerator);}  }
class C{  protected void reduceError() throws IOException, InterruptedException {  HadoopErrorSimulator.instance().onReduce();}  }
class C{  public void removeInitiatorsFromStorageView(String viewName,String clusterName,List<PortInfo> initiatorPortInfo) throws VPlexApiException {  s_logger.info("Request to remove initiators from storage view on VPlex at {}",_baseURI);  _exportMgr.removeInitiatorsFromStorageView(viewName,clusterName,initiatorPortInfo);}  }
class C{  protected StateListDrawable createFillDrawable(RectF circleRect){  StateListDrawable drawable=new StateListDrawable();  drawable.addState(new int[]{android.R.attr.state_pressed},createAlphaDrawble(circleRect,mColorPressed,mAlpha_press));  drawable.addState(new int[]{},createAlphaDrawble(circleRect,mColorNormal,mAlpha_normal));  return drawable;}  }
class C{  public void testExtFunc(){  try {    evaluate(false);    System.out.println("testExtFunc: OK");  } catch (  XPathFactoryConfigurationException e) {    fail(e.getMessage());  }catch (  XPathExpressionException e) {    fail(e.getMessage());  }}  }
class C{  public T build(Application application) throws IOException {  this.application=application;  if (handler == null) {    throw new IllegalArgumentException("handler == null");  }  if (constructorArgTypes.length != constructorArgValues.length) {    throw new IllegalArgumentException("constructorArgValues.length != constructorArgTypes.length");  }  Class<? extends T> proxyClass=buildProxyClass();  if (proxyClass == null) {    return null;  }  Constructor<? extends T> constructor=null;  try {    constructor=proxyClass.getConstructor(constructorArgTypes);  } catch (  NoSuchMethodException e) {    Constructor[] constructors=proxyClass.getConstructors();    for (    Constructor constructor2 : constructors) {      if (constructor2.getGenericParameterTypes().length == constructorArgTypes.length) {        constructor=constructor2;        break;      }    }  }  T result;  try {    result=constructor.newInstance(constructorArgValues);  } catch (  InstantiationException e) {    throw new AssertionError(e);  }catch (  IllegalAccessException e) {    throw new AssertionError(e);  }catch (  InvocationTargetException e) {    throw launderCause(e);  }  setHandlerInstanceField(result,handler);  return result;}  }
class C{  public static boolean isEncodingCanonical(byte[] signature){  if (signature.length < 9 || signature.length > 73)   return false;  int hashType=(signature[signature.length - 1] & 0xff) & ~Transaction.SigHash.ANYONECANPAY.value;  if (hashType < Transaction.SigHash.ALL.value || hashType > Transaction.SigHash.SINGLE.value)   return false;  if ((signature[0] & 0xff) != 0x30 || (signature[1] & 0xff) != signature.length - 3)   return false;  int lenR=signature[3] & 0xff;  if (5 + lenR >= signature.length || lenR == 0)   return false;  int lenS=signature[5 + lenR] & 0xff;  if (lenR + lenS + 7 != signature.length || lenS == 0)   return false;  if (signature[4 - 2] != 0x02 || (signature[4] & 0x80) == 0x80)   return false;  if (lenR > 1 && signature[4] == 0x00 && (signature[4 + 1] & 0x80) != 0x80)   return false;  if (signature[6 + lenR - 2] != 0x02 || (signature[6 + lenR] & 0x80) == 0x80)   return false;  if (lenS > 1 && signature[6 + lenR] == 0x00 && (signature[6 + lenR + 1] & 0x80) != 0x80)   return false;  return true;}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public static boolean unpackStaticFiles(String staticFolder) throws Exception {  List<String> staticResources=find(staticFolder);  if (staticResources.size() == 0) {    return false;  }  for (  String staticFile : staticResources) {    try (InputStream is=JarUtil.class.getResourceAsStream("/" + staticFile)){      Path newStaticFile=ServerProperties.getFileInCurrentDir(staticFile);      Files.deleteIfExists(newStaticFile);      Files.createDirectories(newStaticFile);      Files.copy(is,newStaticFile,StandardCopyOption.REPLACE_EXISTING);    }   }  return true;}  }
class C{  public void add(final T o) throws IOException {  add(o,filteredSize);}  }
class C{  public void visitBinaryProduction(Nonterminal a,BinaryProduction p){  try {    Nonterminal arg1=p.getNonterminal1();    Nonterminal arg2=p.getNonterminal2();    if (isRecursive(arg1)) {      throw new RuntimeException("Binary production arg1 is recursive!");    }    if (isRecursive(arg2)) {      throw new RuntimeException("Binary production arg2 is recursive!");    }    RE re1=getRE(arg1);    RE re2=getRE(arg2);    RE cur=RE.mkBinOp(p.getOperation(),re1,re2);    addTerm(cur);  } catch (  InterruptedException e) {    throw new RuntimeException();  }}  }
class C{  public G load(String filename,G g) throws IOException {  if (g == null)   throw new IllegalArgumentException("Graph provided must be non-null");  return load(new FileReader(filename),g);}  }
class C{  private static DroidsafeExecutionStatus afterTransform(IDroidsafeProgressMonitor monitor,boolean recordTime,Map<String,String> opts){  Scene.v().releaseActiveHierarchy();  driverMsg("Running PTA...");  monitor.subTask("Running PTA");  StopWatch timer=new StopWatch();  timer.start();  PTABridge.release();  PTABridge.run(Config.v().POINTS_TO_ANALYSIS_PACKAGE,opts);  monitor.worked(1);  if (monitor.isCanceled()) {    return DroidsafeExecutionStatus.CANCEL_STATUS;  }  logger.info("Caching Jimple Hierarchy Relationships...");  monitor.subTask("Caching Jimple Hierarchy Relationships...");  JimpleRelationships.reset();  JimpleRelationships.v();  monitor.worked(1);  if (monitor.isCanceled()) {    return DroidsafeExecutionStatus.CANCEL_STATUS;  }  timer.stop();  driverMsg("Finished PTA: " + timer);  return DroidsafeExecutionStatus.OK_STATUS;}  }
class C{  public Class<? extends DocumentTokenSource> bindDocumentTokenSource(){  return ParserBasedDocumentTokenSource.class;}  }
class C{  public Simulator(DialogueSystem system,String simulatorDomain){  this(system,extractDomain(simulatorDomain));}  }
class C{  private void printStatusMessages(AbstractTestSuiteChromosome<? extends ExecutableChromosome> suite,int coveredGoals,double fitness){  if (coveredGoals > maxCoveredGoals) {    logger.info("(Input Goals) Best individual covers " + coveredGoals + "/"+ totalGoals+ " input goals");    maxCoveredGoals=coveredGoals;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }  if (fitness < bestFitness) {    logger.info("(Fitness) Best individual covers " + coveredGoals + "/"+ totalGoals+ " input goals");    bestFitness=fitness;    logger.info("Fitness: " + fitness + ", size: "+ suite.size()+ ", length: "+ suite.totalLengthOfTestCases());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:59.755 -0500",hash_original_method="9DAB45081F29D4D9259EECD11A475A04",hash_generated_method="F03AC4D8BE1EF4472303AAEAE6D16334") public TextKeyListener(Capitalize cap,boolean autotext){  mAutoCap=cap;  mAutoText=autotext;}  }
class C{  private void addLoyaltyCards(int cardsToAdd){  for (int index=cardsToAdd; index > 0; index--) {    String storeName=String.format("store, \"%4d",index);    String note=String.format("note, \"%4d",index);    boolean result=db.insertLoyaltyCard(storeName,note,BARCODE_DATA,BARCODE_TYPE);    assertTrue(result);  }  assertEquals(cardsToAdd,db.getLoyaltyCardCount());}  }
class C{  public List<JCCase> translateCases(List<JCCase> trees){  for (List<JCCase> l=trees; l.nonEmpty(); l=l.tail)   l.head=translate(l.head);  return trees;}  }
class C{  private void unificarDescriptorUDocEnDivisionFS(DescriptorVO descriptor,String[] idsDescriptores){  List listaUdocs=unidadDocumentalFSDBEntity.getUdocsByInfoDescriptor(idsDescriptores);  if (!ListUtils.isEmpty(listaUdocs)) {    Iterator it=listaUdocs.listIterator();    while (it.hasNext()) {      UDocEnFraccionSerieVO uDoc=(UDocEnFraccionSerieVO)it.next();      ValoresFicha valoresFicha=ValoresFicha.getInstance(getServiceSession(),uDoc.getIdUDoc(),TipoFicha.FICHA_UDOCFS,uDoc);      Map mapValoresDescripcion=valoresFicha.getListaValores();      boolean conCambios=false;      if (uDoc != null && uDoc.getXinfo() != null) {        if (uDoc.getXinfo().getProductor() != null && uDoc.getXinfo().getProductor().getId() != null) {          String id=uDoc.getXinfo().getProductor().getId();          if (ArrayUtils.contains(idsDescriptores,id)) {            conCambios=true;            uDoc.getXinfo().getProductor().setId(descriptor.getId());            uDoc.getXinfo().getProductor().setNombre(descriptor.getNombre());          }        }        conCambios=modificarValores(conCambios,mapValoresDescripcion,descriptor,idsDescriptores);        if (conCambios) {          String xmlInfo=uDoc.asXMLWithValores(valoresFicha);          unidadDocumentalFSDBEntity.updateXmlInfo(uDoc.getIdUDoc(),xmlInfo);        }      }    }  }}  }
class C{  public ComboBox(Vector<T> items){  this(new DefaultListModel(items));}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case TypesPackage.TSTRUCT_GETTER__DEFINED_MEMBER:    if (resolve)     return getDefinedMember();  return basicGetDefinedMember();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @SuppressWarnings("unchecked") public static <T>T blindCast(Object object){  return (T)object;}  }
class C{  public DefaultListCellRenderer(boolean showNumbers){  this();  showNumbersForce=true;  this.showNumbers=showNumbers;}  }
class C{  public Panel(LayoutManager layout){  setLayout(layout);}  }
class C{  public static void moveTop(JList list){  int[] indices;  int diff;  if (canMoveUp(list)) {    indices=list.getSelectedIndices();    diff=indices[0];    moveItems(list,diff,MOVE_UP);  }}  }
class C{  private void validatePrivateElement(String localName,boolean startElement){  if (!startElement) {    if (inMaskAfterPrivateElement && localName.equals(FXGConstants.FXG_MASK_ELEMENT))     inMaskAfterPrivateElement=false;    return;  }  if (localName.equals(FXGConstants.FXG_PRIVATE_ELEMENT)) {    if (seenPrivateElement) {      throw new FXGException("PrivateElementMultipleOccurrences",startLine,startColumn);    } else {      if ((!inSkippedElement()) && stack.size() == 1)       seenPrivateElement=true; else       throw new FXGException("PrivateElementNotChildOfGraphic",startLine,startColumn);    }  } else {    if (seenPrivateElement && (!inSkippedElement())) {      if ((!inMaskAfterPrivateElement) && (localName.equals(FXGConstants.FXG_MASK_ELEMENT))) {        inMaskAfterPrivateElement=true;      } else {        if (!inMaskAfterPrivateElement)         throw new FXGException("PrivateElementNotLast",startLine,startColumn);      }    }  }}  }
class C{  public boolean isNavigationAtBottom(){  return (mSmallestWidthDp >= 600 || mInPortrait);}  }
class C{  public static void startCollecting(){  binaryLongReferences=new CopyOnWriteArraySet<>();}  }
class C{  public Coordinate(double x,double y){  this(x,y,NULL_ORDINATE);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MCRR");  long baseOffset=ReilHelpers.nextReilAddress(instruction,instructions);  instructions.add(ReilHelpers.createUnknown(baseOffset++));}  }
class C{  public void addDataPoint(double value){  if (this.data.size() == dataPointLimit) {    this.data.poll();  }  this.data.add(new DataPoint(value));  if (value > this.max)   this.max=value;}  }
class C{  public GuacamoleUnauthorizedException(Throwable cause){  super(cause);}  }
class C{  private void configureDeployment(){  if (isEdit()) {    IJavaProject proj1=JavaCore.create(ACSFilterUtil.getSelectedProject());    IClasspathEntry[] entries;    try {      entries=proj1.getRawClasspath();      IClasspathEntry[] newentries=new IClasspathEntry[entries.length];      for (int i=0; i < entries.length; i++) {        if (entries[i].toString().contains(Messages.sdkContainer)) {          if (depCheck.getSelection()) {            IClasspathAttribute[] attr=new IClasspathAttribute[1];            attr[0]=JavaCore.newClasspathAttribute(Messages.jstDep,"/WEB-INF/lib");            newentries[i]=JavaCore.newContainerEntry(entry,null,attr,true);          } else {            newentries[i]=JavaCore.newContainerEntry(entry);          }        } else {          newentries[i]=entries[i];        }      }      proj1.setRawClasspath(newentries,null);    } catch (    Exception e) {      Activator.getDefault().log(e.getMessage(),e);    }  }  ACSFilterHandler handler=null;  try {    IProject proj=ACSFilterUtil.getSelectedProject();    if (proj.getFile(xmlPath).exists()) {      handler=new ACSFilterHandler(proj.getFile(xmlPath).getLocation().toOSString());      handler.setAcsFilterParams(Messages.acsAttr,acsTxt.getText());      handler.setAcsFilterParams(Messages.relAttr,relTxt.getText());      if (!embedCertCheck.getSelection()) {        handler.setAcsFilterParams(Messages.certAttr,certTxt.getText());        if (getEmbeddedCertInfo() != null)         removeEmbedCert(ACSFilterUtil.getSelectedProject());      } else {        handler.removeParamsIfExists(Messages.certAttr);        if (!certTxt.getText().isEmpty()) {          String srcLoc=ACSFilterUtil.getSelectedProject().getFolder(certificateLocation).getLocation().toOSString();          String certLoc=String.format("%s%s%s",srcLoc,File.separator,Messages.acsCertLoc);          File destination=new File(certLoc);          if (!destination.getParentFile().exists())           destination.getParentFile().mkdir();          copy(new File(CerPfxUtil.getCertificatePath(certTxt.getText())),destination);        }      }      handler.setAcsFilterParams(Messages.secretKeyAttr,generateKey());      handler.setAcsFilterParams(Messages.allowHTTPAttr,requiresHttpsCheck.getSelection() ? "false" : "true");    } else {      boolean choice=MessageDialog.openQuestion(this.getShell(),Messages.depDescTtl,Messages.depDescMsg);      if (choice) {        String path=createWebXml(depDirLoc);        if (embedCertCheck.getSelection()) {          String srcLoc=ACSFilterUtil.getSelectedProject().getFolder(certificateLocation).getLocation().toOSString();          String certLoc=String.format("%s%s%s",srcLoc,File.separator,Messages.acsCertLoc);          File destination=new File(certLoc);          if (!destination.getParentFile().exists())           destination.getParentFile().mkdir();          copy(new File(CerPfxUtil.getCertificatePath(certTxt.getText())),destination);        }        handler=new ACSFilterHandler(path);        handler.setAcsFilterParams(Messages.acsAttr,acsTxt.getText());        handler.setAcsFilterParams(Messages.relAttr,relTxt.getText());        if (!embedCertCheck.getSelection()) {          handler.setAcsFilterParams(Messages.certAttr,certTxt.getText());          if (getEmbeddedCertInfo() != null)           removeEmbedCert(ACSFilterUtil.getSelectedProject());        }        handler.setAcsFilterParams(Messages.secretKeyAttr,generateKey());        handler.setAcsFilterParams(Messages.allowHTTPAttr,requiresHttpsCheck.getSelection() ? "false" : "true");      } else {        finishVal=true;        return;      }    }  } catch (  Exception e) {    MessageDialog.openError(this.getShell(),Messages.acsErrTtl,Messages.acsErrMsg);    finishVal=false;    Activator.getDefault().log(e.getMessage(),e);  }  try {    handler.save();    IWorkspace workspace=ResourcesPlugin.getWorkspace();    IWorkspaceRoot root=workspace.getRoot();    root.refreshLocal(IResource.DEPTH_INFINITE,null);  } catch (  Exception e) {    Activator.getDefault().log(e.getMessage(),e);    MessageDialog.openError(this.getShell(),Messages.acsErrTtl,Messages.saveErrMsg);    finishVal=false;  }}  }
class C{  private void removeAllShareCards(){  for (Iterator<Offer> iterator=offers.iterator(); iterator.hasNext(); ) {    Offer offer=iterator.next();    if (offer.isShareCard()) {      iterator.remove();    }  }  notifyDataSetChanged();}  }
class C{  public Textifier visitAnnotation(final String desc,final boolean visible){  buf.setLength(0);  buf.append(tab).append('@');  appendDescriptor(FIELD_DESCRIPTOR,desc);  buf.append('(');  text.add(buf.toString());  Textifier t=createTextifier();  text.add(t.getText());  text.add(visible ? ")\n" : ") // invisible\n");  return t;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private InputStream openCustomSortOrderFile() throws IOException {  InputStream inputStream;  try {    inputStream=new FileInputStream(customSortOrderFile);  } catch (  FileNotFoundException ex) {    try {      URL resource=this.getClass().getClassLoader().getResource(customSortOrderFile);      if (resource == null) {        throw new IOException("Cannot find resource");      }      inputStream=resource.openStream();    } catch (    IOException e1) {      throw new FileNotFoundException(String.format("Could not find %s or %s in classpath",new File(customSortOrderFile).getAbsolutePath(),customSortOrderFile));    }  }  return inputStream;}  }
class C{  protected CCTMXLayer(CCTMXTilesetInfo tilesetInfo,CCTMXLayerInfo layerInfo,CCTMXMapInfo mapInfo){  super(tilesetInfo == null ? null : CCTextureCache.sharedTextureCache().addImage(tilesetInfo.sourceImage),(int)((layerInfo.layerSize.width * layerInfo.layerSize.height) * 0.35f + 1));  layerName=layerInfo.name;  layerSize=layerInfo.layerSize;  tiles=layerInfo.tiles;  minGID_=layerInfo.minGID;  maxGID_=layerInfo.maxGID;  opacity_=layerInfo.opacity;  properties=new HashMap<String,String>(layerInfo.properties);  tileset=tilesetInfo;  mapTileSize=mapInfo.tileSize;  layerOrientation_=mapInfo.orientation;  CGPoint offset=calculateLayerOffset(layerInfo.offset);  setPosition(offset);  atlasIndexArray_=new ArrayList<Integer>();  int totalNumberOfTiles=(int)((layerInfo.layerSize.width * layerInfo.layerSize.height) * 0.35f + 1);  atlasIndexArray_.ensureCapacity(totalNumberOfTiles);  setContentSize(CGSize.make(layerSize.width * mapTileSize.width,layerSize.height * mapTileSize.height));  useAutomaticVertexZ_=false;  vertexZvalue_=0;  alphaFuncValue_=0;}  }
class C{  public Vector3 cross(Vector3 that){  return Vector3.cross(this,that);}  }
class C{  private void updateItems(){  final List itemNodeList=new ArrayList();  final List itemTitleList=new ArrayList();  final List itemPathList=new ArrayList();  if (project != null && treeType != null) {    final Node projectNode=new ProjectNodeAdapter();    itemNodeList.add(projectNode);    itemTitleList.add(project.getName());    itemPathList.add(project.getName());    updateItemsRecursive(itemNodeList,itemTitleList,itemPathList,1,projectNode.getChildNodes().getNodes());  }  itemNodes=(Node[])itemNodeList.toArray(new Node[itemNodeList.size()]);  itemTitles=(String[])itemTitleList.toArray(new String[itemTitleList.size()]);  combo.setItems(itemTitles);  ComboHelper.setVisibleItemCount(combo);}  }
class C{  private Hop processMultipleReturnBuiltinFunctionExpression(BuiltinFunctionExpression source,ArrayList<DataIdentifier> targetList,HashMap<String,Hop> hops) throws ParseException {  ArrayList<Hop> inputs=new ArrayList<Hop>();  inputs.add(processExpression(source.getFirstExpr(),null,hops));  if (source.getSecondExpr() != null)   inputs.add(processExpression(source.getSecondExpr(),null,hops));  if (source.getThirdExpr() != null)   inputs.add(processExpression(source.getThirdExpr(),null,hops));  FunctionType ftype=FunctionType.MULTIRETURN_BUILTIN;  String nameSpace=DMLProgram.INTERNAL_NAMESPACE;  ArrayList<Hop> outputs=new ArrayList<Hop>();  Hop currBuiltinOp=null;switch (source.getOpCode()) {case QR:case LU:case EIGEN:    String[] outputNames=new String[targetList.size()];  for (int i=0; i < targetList.size(); i++) {    outputNames[i]=((DataIdentifier)targetList.get(i)).getName();    Hop output=new DataOp(outputNames[i],DataType.MATRIX,ValueType.DOUBLE,inputs.get(0),DataOpTypes.FUNCTIONOUTPUT,outputNames[i]);    outputs.add(output);  }FunctionOp fcall=new FunctionOp(ftype,nameSpace,source.getOpCode().toString(),inputs,outputNames,outputs);currBuiltinOp=fcall;break;default :throw new ParseException("Invaid Opcode in DMLTranslator:processMultipleReturnBuiltinFunctionExpression(): " + source.getOpCode());}for (int i=0; i < source.getOutputs().length; i++) {setIdentifierParams(outputs.get(i),source.getOutputs()[i]);outputs.get(i).setAllPositions(source.getBeginLine(),source.getBeginColumn(),source.getEndLine(),source.getEndColumn());}currBuiltinOp.setAllPositions(source.getBeginLine(),source.getBeginColumn(),source.getEndLine(),source.getEndColumn());return currBuiltinOp;}  }
class C{  OverrideChecker(Tree overriderTree,AnnotatedExecutableType overrider,AnnotatedTypeMirror overridingType,AnnotatedTypeMirror overridingReturnType,AnnotatedExecutableType overridden,AnnotatedDeclaredType overriddenType,AnnotatedTypeMirror overriddenReturnType){  this.overriderTree=overriderTree;  this.overrider=overrider;  this.overridingType=overridingType;  this.overridden=overridden;  this.overriddenType=overriddenType;  this.overriddenReturnType=overriddenReturnType;  this.overridingReturnType=overridingReturnType;  overriderMeth=overrider.toString();  if (overridingType.getKind() == TypeKind.DECLARED) {    DeclaredType overriderTypeMirror=((AnnotatedDeclaredType)overridingType).getUnderlyingType();    overriderTyp=overriderTypeMirror.asElement().toString();  } else {    overriderTyp=overridingType.toString();  }  overriddenMeth=overridden.toString();  overriddenTyp=overriddenType.getUnderlyingType().asElement().toString();  this.methodReference=overriderTree.getKind() == Tree.Kind.MEMBER_REFERENCE;}  }
class C{  public static double[] calculateSpread(double[] values,double addition,double[] normalizer){  double[] result=new double[values.length];  double[] calcBase=new double[values.length];  if (values.length > 0) {    for (int i=0; i < values.length; i++) {      double factor=normalizer.length >= i + 1 ? normalizer[i] : 1;      calcBase[i]=values[i] / (factor > 0 ? factor : 1);    }    for (int i=0; i < calcBase.length; i++) {      double factor=normalizer.length >= i + 1 ? normalizer[i] : 1;      double normalizedAddition=addition / (factor > 0 ? factor : 1);      calcBase[i]+=normalizedAddition;      result[i]=spread(calcBase);      calcBase[i]-=normalizedAddition;    }  }  return result;}  }
class C{  public IncidentScenario(){  super();  setEntity(new Entity(TYPE_ID));  getEntity().initDefaultValues(getTypeFactory());}  }
class C{  public BaseProgramBuilder addTexture(TextureType texType,String texName) throws IllegalArgumentException {  if (mTextureCount >= MAX_TEXTURE) {    throw new IllegalArgumentException("Max texture count exceeded.");  }  mTextureTypes[mTextureCount]=texType;  mTextureNames[mTextureCount]=texName;  mTextureCount++;  return this;}  }
class C{  public final double doOperation(){  final int dim=hParameter.getDimension();  double logq=0.0;  int rep=MathUtils.nextInt(4);  for (int repete=0; repete < rep + 1; repete++) {    if (usesPriorOnSum) {      for (int i=0; i < dim; i++) {      }    }    final int pos=MathUtils.nextInt(dim);    int value=(int)hParameter.getParameterValue(pos);    if (value == 0) {      hParameter.setParameterValue(pos,1.0);    } else     if (value == 1) {      hParameter.setParameterValue(pos,0.0);    } else {      throw new RuntimeException("expected 1 or 0");    }    for (int j=0; j < Nstrata; j++) {      value=(int)strataParameters[j].getParameterValue(pos);      if (value == 0) {        strataParameters[j].setParameterValue(pos,1.0);      } else       if (value == 1) {        strataParameters[j].setParameterValue(pos,0.0);      } else {        throw new RuntimeException("expected 1 or 0");      }    }  }  return logq;}  }
class C{  public void println(){  newline();}  }
class C{  private void resetStrategyComboBox(DAODecodeComboBoxEditor editorComboBox) throws ValueTypeException {  Vector<Decode> codesNew=((new DAOStrategy()).getCodesDecodes());  DefaultComboBoxModel<Decode> model=new DefaultComboBoxModel<Decode>(codesNew);  editorComboBox.setModel(model);  editorComboBox.setRenderer(new DecodeComboBoxRenderer());}  }
class C{  public static KeyStore loadPKCS12KeyStore(String file,String password){  return loadKeyStore("pkcs12",file,password);}  }
class C{  public RoundedTransformationBuilder cornerRadiusBottomRightDp(float radiusDp){  mCornerRadius[3]=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,radiusDp,mDisplayMetrics);  return this;}  }
class C{  public void fireUpdateEvent(){  for (  WorldListener listener : listenerList) {    listener.updated();  }}  }
class C{  public Workflow.Method rollbackImportCopyMethod(VolumeDescriptor vplexVolumeDescriptor,List<VolumeDescriptor> assocVolumeDescrs){  return new Workflow.Method("rollbackImportCopy",vplexVolumeDescriptor,assocVolumeDescrs);}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  GroupAudioDao.createTable(db,ifNotExists);}  }
class C{  public Object netSearch(final boolean doNetLoad) throws CacheLoaderException, TimeoutException {  if (this.region.getAttributes().getScope().isLocal()) {    throw new CacheLoaderException(NET_SEARCH_LOCAL.toLocalizedString());  }  boolean removeSearcher=false;  if (searcher == null) {    searcher=SearchLoadAndWriteProcessor.getProcessor();    removeSearcher=true;  }  try {    if (removeSearcher) {      searcher.initialize((LocalRegion)this.region,this.key,this.aCallbackArgument);    }    Object obj=null;    if (this.netSearchAllowed) {      obj=searcher.doNetSearch();      if (searcher.resultIsSerialized()) {        obj=EntryEventImpl.deserialize((byte[])obj);      }    }    if (doNetLoad && obj == null && this.netLoadAllowed) {      obj=searcher.doNetLoad();      if (searcher.resultIsSerialized()) {        obj=EntryEventImpl.deserialize((byte[])obj);      }    }    return obj;  }  finally {    if (removeSearcher) {      searcher.remove();    }  }}  }
class C{  public static boolean isBinary(DataSet data,int column){  Node node=data.getVariable(column);  int size=data.getNumRows();  if (node instanceof DiscreteVariable) {    for (int i=0; i < size; i++) {      int value=data.getInt(i,column);      if (value != 1 && value != 0) {        return false;      }    }  } else   if (node instanceof ContinuousVariable) {    for (int i=0; i < size; i++) {      double value=data.getDouble(i,column);      if (value != 1.0 && value != 0.0) {        return false;      }    }  } else {    throw new IllegalArgumentException("The given column is not discrete or continuous");  }  return true;}  }
class C{  static void propertiesToTextUTF8(String source,String target) throws Exception {  if (!new File(source).exists()) {    return;  }  Properties prop=SortedProperties.loadProperties(source);  FileOutputStream out=new FileOutputStream(target);  PrintWriter writer=new PrintWriter(new OutputStreamWriter(out,"UTF-8"));  for (Enumeration<Object> en=prop.keys(); en.hasMoreElements(); ) {    String key=(String)en.nextElement();    String value=prop.getProperty(key,null);    writer.print("@" + key + "\n");    writer.print(value + "\n\n");  }  writer.close();}  }
class C{  private void scanTlds() throws JasperException {  mappings=new HashMap<String,String[]>();  jarTldCacheLocal.putAll(jarTldCache);  try {    processWebDotXml();    scanJars();    processTldsInFileSystem("/WEB-INF/");  } catch (  JasperException ex) {    throw ex;  }catch (  Exception ex) {    throw new JasperException(Localizer.getMessage("jsp.error.internal.tldinit"),ex);  }}  }
class C{  @Override public boolean isValid(int playerId,Entity entity,IGame game){  return ((null != entity) && (entity.getOwnerId() == playerId) && isValidEntity(entity,game));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void init(Animator animator,Effect parentEffect){  Effect targetEffect=(parentEffect == null) ? this : parentEffect;  PropertySetter ps;  ps=new PropertySetter(targetEffect,"location",startLocation,new Point(getEnd().getX(),getEnd().getY()));  animator.addTarget(ps);  super.init(animator,parentEffect);}  }
class C{  public void sort(DTMIterator v,Vector keys,XPathContext support) throws javax.xml.transform.TransformerException {  m_keys=keys;  int n=v.getLength();  Vector nodes=new Vector();  for (int i=0; i < n; i++) {    NodeCompareElem elem=new NodeCompareElem(v.item(i));    nodes.addElement(elem);  }  Vector scratchVector=new Vector();  mergesort(nodes,scratchVector,0,n - 1,support);  for (int i=0; i < n; i++) {    v.setItem(((NodeCompareElem)nodes.elementAt(i)).m_node,i);  }  v.setCurrentPos(0);}  }
class C{  public BatteryElectricVehicleImpl(EnergyConsumptionModel ecm,double usableBatteryCapacityInJoules,Id<Vehicle> vehicleId){  this.electricDriveEnergyConsumptionModel=ecm;  this.usableBatteryCapacityInJoules=usableBatteryCapacityInJoules;  this.socInJoules=usableBatteryCapacityInJoules;  this.vehicleId=vehicleId;}  }
class C{  public Matrix4x3d mul(Matrix4x3fc right){  return mul(right,this);}  }
class C{  public void comprobardisponibilidadExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  AppUser appUser=getAppUser(request);  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(appUser));  GestionPrestamosBI prestamosService=services.lookupGestionPrestamosBI();  PrestamoVO prestamo_VO=prestamosService.getPrestamo(request.getParameter("idprestamo"));  if (prestamo_VO != null) {    Collection detallesPrestamos=prestamosService.obtenerDetallesPrestamoByUsuario(prestamo_VO);    prestamosService.comprobarDisponibilidadDetallesPrestamo(prestamo_VO,detallesPrestamos);    PrestamosUtils.establecerVistas(prestamo_VO,appUser,request,prestamosService,detallesPrestamos);    setInTemporalSession(request,PrestamosConstants.DETALLE_PRESTAMO_KEY,detallesPrestamos);    request.setAttribute(PrestamosConstants.VER_COLUMNA_DISPONIBILIDAD,new Boolean(true));    request.setAttribute(PrestamosConstants.METHOD,METHOD_COMPROBARDISPONIBILIDAD);  }  verPrestamo(mappings,form,request,response);}  }
class C{  public static DiscreteDiscretizationSpec serializableInstance(){  return new DiscreteDiscretizationSpec(new int[0],new ArrayList<String>());}  }
class C{  protected String composeSymCode(){  String scheme=this.getScheme();  if (SymbologyConstants.SCHEME_WARFIGHTING.equalsIgnoreCase(scheme)) {    return this.composeWarfightingSymCode();  } else   if (SymbologyConstants.SCHEME_TACTICAL_GRAPHICS.equalsIgnoreCase(scheme)) {    return this.composeTacticalGraphicsSymCode();  } else   if (SymbologyConstants.SCHEME_METOC.equalsIgnoreCase(scheme)) {    return this.composeMetocSymCode();  } else   if (SymbologyConstants.SCHEME_INTELLIGENCE.equalsIgnoreCase(scheme)) {    return this.composeIntelligenceSymCode();  } else   if (SymbologyConstants.SCHEME_STABILITY_OPERATIONS.equalsIgnoreCase(scheme)) {    return this.composeStabilityOperationsSymCode();  } else   if (SymbologyConstants.SCHEME_EMERGENCY_MANAGEMENT.equalsIgnoreCase(scheme)) {    return this.composeEmergencyManagementSymCode();  } else {    return this.composeUnrecognizedSymCode();  }}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  public static Map<String,Object> deactivateAssocs(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  String contentIdTo=(String)context.get("contentIdTo");  String mapKey=(String)context.get("mapKey");  String contentAssocTypeId=(String)context.get("contentAssocTypeId");  String activeContentId=(String)context.get("activeContentId");  String contentId=(String)context.get("contentId");  Timestamp fromDate=(Timestamp)context.get("fromDate");  Locale locale=(Locale)context.get("locale");  Timestamp nowTimestamp=UtilDateTime.nowTimestamp();  String sequenceNum=null;  Map<String,Object> results=FastMap.newInstance();  try {    GenericValue activeAssoc=null;    if (fromDate != null) {      activeAssoc=EntityQuery.use(delegator).from("ContentAssoc").where("contentId",activeContentId,"contentIdTo",contentIdTo,"fromDate",fromDate,"contentAssocTypeId",contentAssocTypeId).queryOne();      if (activeAssoc == null) {        return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ContentAssocNotFound",UtilMisc.toMap("activeContentId",activeContentId,"contentIdTo",contentIdTo,"contentAssocTypeId",contentAssocTypeId,"fromDate",fromDate),locale));      }      sequenceNum=(String)activeAssoc.get("sequenceNum");    }    List<EntityCondition> exprList=FastList.newInstance();    exprList.add(EntityCondition.makeCondition("mapKey",EntityOperator.EQUALS,mapKey));    if (sequenceNum != null) {      exprList.add(EntityCondition.makeCondition("sequenceNum",EntityOperator.EQUALS,sequenceNum));    }    exprList.add(EntityCondition.makeCondition("mapKey",EntityOperator.EQUALS,mapKey));    exprList.add(EntityCondition.makeCondition("thruDate",EntityOperator.EQUALS,null));    exprList.add(EntityCondition.makeCondition("contentIdTo",EntityOperator.EQUALS,contentIdTo));    exprList.add(EntityCondition.makeCondition("contentAssocTypeId",EntityOperator.EQUALS,contentAssocTypeId));    if (UtilValidate.isNotEmpty(activeContentId)) {      exprList.add(EntityCondition.makeCondition("contentId",EntityOperator.NOT_EQUAL,activeContentId));    }    if (UtilValidate.isNotEmpty(contentId)) {      exprList.add(EntityCondition.makeCondition("contentId",EntityOperator.EQUALS,contentId));    }    EntityConditionList<EntityCondition> assocExprList=EntityCondition.makeCondition(exprList,EntityOperator.AND);    List<GenericValue> relatedAssocs=EntityQuery.use(delegator).from("ContentAssoc").where(assocExprList).orderBy("fromDate").filterByDate().queryList();    for (    GenericValue val : relatedAssocs) {      val.set("thruDate",nowTimestamp);      val.store();    }    results.put("deactivatedList",relatedAssocs);  } catch (  GenericEntityException e) {    return ServiceUtil.returnError(e.getMessage());  }  return results;}  }
class C{  public Object object(){  return str();}  }
class C{  public void lookupInstruction(int id,BytecodeInstruction instruction){  lastAccessedNode=instruction.getASMNode();  if (instruction.isBranch()) {    Branch branch=BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getBranchForInstruction(instruction);    branches.add(branch);  } else   if (instruction.isReturn() || instruction.isThrow() || instruction.isGoto()) {    if (Properties.STRATEGY != Strategy.EVOSUITE && !BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).isKnownAsBranch(instruction)) {      instruction.forceBranch();      BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).registerAsBranch(instruction);      logger.info("Registering new branch");    }    Branch branch=BranchPool.getInstance(TestGenerationContext.getInstance().getClassLoaderForSUT()).getBranchForInstruction(instruction);    branches.add(branch);  }}  }
class C{  public static ActiveMQDestination createDestination(String name,byte defaultType){  if (name.startsWith(QUEUE_QUALIFIED_PREFIX)) {    return new ActiveMQQueue(name.substring(QUEUE_QUALIFIED_PREFIX.length()));  } else   if (name.startsWith(TOPIC_QUALIFIED_PREFIX)) {    return new ActiveMQTopic(name.substring(TOPIC_QUALIFIED_PREFIX.length()));  } else   if (name.startsWith(TEMP_QUEUE_QUALIFED_PREFIX)) {    return new ActiveMQQueue(name.substring(TEMP_QUEUE_QUALIFED_PREFIX.length()),true);  } else   if (name.startsWith(TEMP_TOPIC_QUALIFED_PREFIX)) {    return new ActiveMQTopic(name.substring(TEMP_TOPIC_QUALIFED_PREFIX.length()),true);  }switch (defaultType) {case QUEUE_TYPE:    return new ActiveMQQueue(name);case TOPIC_TYPE:  return new ActiveMQTopic(name);case TEMP_QUEUE_TYPE:return new ActiveMQQueue(name,true);case TEMP_TOPIC_TYPE:return new ActiveMQTopic(name,true);default :throw new IllegalArgumentException("Invalid default destination type: " + defaultType);}}  }
class C{  @Override public final void readFully(byte ba[]) throws IOException {  dis.readFully(ba,0,ba.length);}  }
class C{  protected int slotNum(int row){  int slotNum;  int n=-1;  int nMin=0;  int nMax=SprogConstants.MAX_SLOTS;  for (slotNum=nMin; slotNum < nMax; slotNum++) {    SprogSlot s=_memo.getCommandStation().slot(slotNum);    if (_allSlots || s.slotStatus() != SprogConstants.SLOT_FREE) {      n++;    }    if (n == row) {      break;    }  }  return slotNum;}  }
class C{  public void findAndUndo(Object someObj){  if (someObj instanceof MapPanelChild && someObj instanceof Component) {    if (Debug.debugging("basic")) {      Debug.output("MapPanel: removing " + someObj.getClass().getName());    }    remove((Component)someObj);    invalidate();  }  if (someObj instanceof MenuList && menuList == someObj) {    menuList=null;  }  if (this.equals(someObj)) {    dispose();  }}  }
class C{  public boolean hasItem(){  return (hasSlot(OFFER_ITEM_SLOT_NAME) && getSlot(OFFER_ITEM_SLOT_NAME).size() != 0);}  }
class C{  public static Node toNode(Object o,Node defaultValue){  return toXML(o,defaultValue);}  }
class C{  static boolean checkLiteral(IXMLReader reader,String literal) throws IOException, XMLParseException {  for (int i=0; i < literal.length(); i++) {    if (reader.read() != literal.charAt(i)) {      return false;    }  }  return true;}  }
class C{  public EquirippleHalfBand(int N,double OmegaP){  EquirippleHalfBandPrototype EHBP=new EquirippleHalfBandPrototype(N,2 * OmegaP);  double[] c=EHBP.getCoefficients();  coefficients=new double[2 * c.length - 1];  for (int i=0; i < c.length; i++) {    coefficients[2 * i]=0.5f * c[i];  }  coefficients[c.length - 1]=0.5f;}  }
class C{  private void invalidSurrogate(int uuuuu) throws UTFDataFormatException {  throw new UTFDataFormatException(Localizer.getMessage("jsp.error.xml.invalidHighSurrogate",Integer.toHexString(uuuuu)));}  }
class C{  public boolean del(final String label){  return (engine.remove(label));}  }
class C{  private static void testPS(){  PrintService ps=getDefaultPrintService();  ServiceUIFactory factory=ps.getServiceUIFactory();  System.out.println(factory);  if (factory != null) {    System.out.println("Factory");    JPanel p0=(JPanel)factory.getUI(ServiceUIFactory.ABOUT_UIROLE,ServiceUIFactory.JDIALOG_UI);    p0.setVisible(true);    JPanel p1=(JPanel)factory.getUI(ServiceUIFactory.ADMIN_UIROLE,ServiceUIFactory.JDIALOG_UI);    p1.setVisible(true);    JPanel p2=(JPanel)factory.getUI(ServiceUIFactory.MAIN_UIROLE,ServiceUIFactory.JDIALOG_UI);    p2.setVisible(true);  }  System.out.println("1----------");  PrinterJob pj=PrinterJob.getPrinterJob();  PrintRequestAttributeSet pratts=getDefaultPrintRequestAttributes();  PageFormat pf=pj.pageDialog(pratts);  System.out.println("Pratts Size = " + pratts.size());  Attribute[] atts=pratts.toArray();  for (int i=0; i < atts.length; i++)   System.out.println(atts[i].getName() + " = " + atts[i]+ " - "+ atts[i].getCategory());  System.out.println("PageFormat h=" + pf.getHeight() + ",w="+ pf.getWidth()+ " - x="+ pf.getImageableX()+ ",y="+ pf.getImageableY()+ " - ih="+ pf.getImageableHeight()+ ",iw="+ pf.getImageableWidth()+ " - Orient="+ pf.getOrientation());  ps=pj.getPrintService();  System.out.println("PrintService = " + ps.getName());  System.out.println("2----------");  pj.printDialog(pratts);  System.out.println("Pratts Size = " + pratts.size());  atts=pratts.toArray();  for (int i=0; i < atts.length; i++)   System.out.println(atts[i].getName() + " = " + atts[i]+ " - "+ atts[i].getCategory());  pf=pj.defaultPage();  System.out.println("PageFormat h=" + pf.getHeight() + ",w="+ pf.getWidth()+ " - x="+ pf.getImageableX()+ ",y="+ pf.getImageableY()+ " - ih="+ pf.getImageableHeight()+ ",iw="+ pf.getImageableWidth()+ " - Orient="+ pf.getOrientation());  ps=pj.getPrintService();  System.out.println("PrintService= " + ps.getName());  System.out.println("3----------");  try {    pj.setPrintService(ps);  } catch (  PrinterException pe) {    System.out.println(pe);  }  pf=pj.validatePage(pf);  System.out.println("PageFormat h=" + pf.getHeight() + ",w="+ pf.getWidth()+ " - x="+ pf.getImageableX()+ ",y="+ pf.getImageableY()+ " - ih="+ pf.getImageableHeight()+ ",iw="+ pf.getImageableWidth()+ " - Orient="+ pf.getOrientation());  ps=pj.getPrintService();  System.out.println("PrintService= " + ps.getName());  System.out.println("4----------");  pj.printDialog();}  }
class C{  public static String randomAlphabetic(int count){  return random(count,true,false);}  }
class C{  private MainFrame mf(){  return GUIMediator.instance().getMainFrame();}  }
class C{  public ECFieldElement sqrt(){  int[] x1=this.x;  if (Nat.isZero(17,x1) || Nat.isOne(17,x1)) {    return this;  }  int[] t1=Nat.create(17);  int[] t2=Nat.create(17);  SecP521R1Field.squareN(x1,519,t1);  SecP521R1Field.square(t1,t2);  return Nat.eq(17,x1,t2) ? new SecP521R1FieldElement(t1) : null;}  }
class C{  public static CloseWatcher register(Object o,Closeable closeable,boolean stackTrace){  ReferenceQueue<Object> q=queue;  if (q == null) {    q=new ReferenceQueue<Object>();    queue=q;  }  CloseWatcher cw=new CloseWatcher(o,q,closeable);  if (stackTrace) {    Exception e=new Exception("Open Stack Trace");    StringWriter s=new StringWriter();    e.printStackTrace(new PrintWriter(s));    cw.openStackTrace=s.toString();  }  if (refs == null) {    refs=createSet();  }  refs.add(cw);  return cw;}  }
class C{  public static String capitalize(String s){  if (s.charAt(0) >= 'a') {    return ((char)(s.charAt(0) + ('A' - 'a')) + s.substring(1));  } else {    return s;  }}  }
class C{  public NegativeBinomial(int n,double p,MersenneTwisterFast randomGenerator){  setRandomGenerator(randomGenerator);  setNandP(n,p);  this.gamma=new Gamma(n,1.0,randomGenerator);  this.poisson=new Poisson(0.0,randomGenerator);}  }
class C{  protected void showSnackbar(android.support.design.widget.Snackbar snackbar){  snackbar.show();}  }
class C{  MarkerSegment findMarkerSegment(Class cls,boolean first){  if (first) {    Iterator iter=markerSequence.iterator();    while (iter.hasNext()) {      MarkerSegment seg=(MarkerSegment)iter.next();      if (cls.isInstance(seg)) {        return seg;      }    }  } else {    ListIterator iter=markerSequence.listIterator(markerSequence.size());    while (iter.hasPrevious()) {      MarkerSegment seg=(MarkerSegment)iter.previous();      if (cls.isInstance(seg)) {        return seg;      }    }  }  return null;}  }
class C{  public static int poissonRand(double xm){  double sqrt2xm, logxm, expxm, g;  double t, y;  int k;  if (xm < 12.0) {    expxm=Math.exp(-xm);    k=-1;    t=1.0;    do {      k++;      t*=uniformRand();    } while (t > expxm);  } else {    sqrt2xm=Math.sqrt(2.0 * xm);    logxm=Math.log(xm);    g=xm * logxm - lngamma(xm + 1.0);    do {      do {        y=Math.tan(Math.PI * uniformRand());        k=(int)Math.floor(sqrt2xm * y + xm);      } while (k < 0);      t=0.9 * (1.0 + y * y) * Math.exp(k * logxm - lngamma((double)k + 1.0) - g);    } while (uniformRand() > t);  }  return (k);}  }
class C{  public boolean equals(Object o){  if (o == null || !(o instanceof PreferenceLevel))   return false;  return getPrefId().intValue() == ((PreferenceLevel)o).getPrefId().intValue();}  }
class C{  public static MethodDeclaration findParentMethodDeclaration(ASTNode node){  while (node != null) {    if (node.getNodeType() == ASTNode.METHOD_DECLARATION) {      return (MethodDeclaration)node;    }    if (node instanceof AbstractTypeDeclaration || node instanceof AnonymousClassDeclaration) {      return null;    }    node=node.getParent();  }  return null;}  }
class C{  private void showSystemMenu(){  Insets insets=rootPane.getInsets();  windowMenu.show(menuButton,getX() - insets.left - insets.right,getY() + this.getPreferredSize().height);}  }
class C{  public void testSubmitForkJoinTask() throws Throwable {  ForkJoinPool p=new ForkJoinPool(1);  PoolCleaner cleaner=null;  try {    cleaner=cleaner(p);    ForkJoinTask<Integer> f=p.submit(new FibTask(8));    assertEquals(21,(int)f.get());  }  finally {    if (cleaner != null) {      cleaner.close();    }  }}  }
class C{  public boolean isKey(){  return (this.interestType == TP_KEY);}  }
class C{  public static double moment(DoubleArrayList data,int k,double c){  return sumOfPowerDeviations(data,k,c) / data.size();}  }
class C{  public LimeTransferHandler(int supportedActions){  this.supportedActions=supportedActions;}  }
class C{  private void _serializeArray(String name,Array array,StringBuilder sb,Set<Object> done) throws ConverterException {  _serializeList(name,array.toList(),sb,done);}  }
class C{  public static String conllline(String tag,int num,String word){  return String.format("%s\t0\t%s\tO\tO\t%s\tx\tx\t0",tag,num,word);}  }
class C{  public void println(double x){  out.println(x);}  }
class C{  public void revalidate(){  validationError.clear();  logger.info("revalidate: hasValidator -> {}",hasValidator());  if (!hasValidator())   return;  revalidationService.setHeader(header);  revalidationService.setRows(rows);  revalidationService.setValidator(validator);  revalidationService.setOnSucceeded(null);  revalidationService.setOnFailed(null);  revalidationService.restart();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.462 -0500",hash_original_method="728E8165442E638E6B663EFB1CAFAD98",hash_generated_method="C2147FA41BB5E19B403DAA3AAD03D883") public Builder(RenderScript rs){  mRS=rs;  mCount=0;  mElements=new Element[8];  mElementNames=new String[8];  mArraySizes=new int[8];}  }
class C{  public code addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  private void validateStoragePolicyTransition(StoragePolicyTransition storagePolicyTransition) throws IllegalArgumentException {  Assert.notNull(storagePolicyTransition,"A storage policy transition must be specified.");  Assert.hasText(storagePolicyTransition.getDestinationStorageName(),"A destination storage name must be specified.");  storagePolicyTransition.setDestinationStorageName(storagePolicyTransition.getDestinationStorageName().trim());}  }
class C{  @Override public IBlockState onBlockPlaced(World worldIn,BlockPos pos,EnumFacing facing,float hitX,float hitY,float hitZ,int meta,EntityLivingBase placer){  return func_181088_a(worldIn,pos,facing.getOpposite()) ? this.getDefaultState().withProperty(FACING,facing) : this.getDefaultState().withProperty(FACING,EnumFacing.DOWN);}  }
class C{  public static void main(String args[]){  Logger.getLogger("aimax.osm").setLevel(Level.FINEST);  Logger.getLogger("").getHandlers()[0].setLevel(Level.FINE);  OsmAgentApp demo=new OsmAgentApp();  demo.startApplication();}  }
class C{  private void startFunction(){  function=new FunctionLibFunction();  insideFunction=true;}  }
class C{  @Override protected void onNewIntent(Intent intent){  super.onNewIntent(intent);  handleIntent(intent);}  }
class C{  public List<CharsRef> stem(String word){  return stem(word.toCharArray(),word.length());}  }
class C{  public void testUnsizedLongsCountSeq(){  LongAdder counter=new LongAdder();  SplittableRandom r=new SplittableRandom();  long size=100;  r.longs().limit(size).forEach(null);  assertEquals(size,counter.sum());}  }
class C{  public void clear(){  tableLeft.clear();  tableRight.clear();}  }
class C{  public Builder updateLocale(String locale){  this.locale=locale;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:47.733 -0500",hash_original_method="8E6899628E610E70351C174244187E71",hash_generated_method="2C8CCAE7A2B508498E08DCE1D812D971") protected int estimateHeaderElementLen(final HeaderElement elem){  if (elem == null)   return 0;  int result=elem.getName().length();  final String value=elem.getValue();  if (value != null) {    result+=3 + value.length();  }  final int parcnt=elem.getParameterCount();  if (parcnt > 0) {    for (int i=0; i < parcnt; i++) {      result+=2 + estimateNameValuePairLen(elem.getParameter(i));    }  }  return result;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private void fill() throws IOException {  int dst;  if (markedChar <= UNMARKED) {    dst=0;  } else {    int delta=nextChar - markedChar;    if (delta >= readAheadLimit) {      markedChar=INVALIDATED;      readAheadLimit=0;      dst=0;    } else {      if (readAheadLimit <= cb.length) {        System.arraycopy(cb,markedChar,cb,0,delta);        markedChar=0;        dst=delta;      } else {        char ncb[]=new char[readAheadLimit];        System.arraycopy(cb,markedChar,ncb,0,delta);        cb=ncb;        markedChar=0;        dst=delta;      }      nextChar=nChars=delta;    }  }  int n;  do {    n=in.read(cb,dst,cb.length - dst);  } while (n == 0);  if (n > 0) {    nChars=dst + n;    nextChar=dst;  }}  }
class C{  public void testGridPointsRoundTrip() throws SQLException {  GridGenerator grid=new GridGenerator();  grid.setGeometryFactory(geometryFactory);  grid.setBoundingBox(new Envelope(0,10,0,10));  grid.setNumberColumns(10);  grid.setNumberRows(10);  Point[] pt=new Point[100];  STRUCT[] st=new STRUCT[100];  PointGenerator pg=new PointGenerator();  pg.setGeometryFactory(geometryFactory);  OraWriter ow=new OraWriter();  int i=0;  while (grid.canCreate() && i < 100) {    pg.setBoundingBox(grid.createEnv());    pt[i]=(Point)pg.create();    st[i]=ow.write(pt[i],getConnection());    i++;  }  OraReader or=new OraReader();  i=0;  while (i < 100 && pt[i] != null) {    Point pt2=(Point)or.read(st[i]);    assertTrue("The input Point is not the same as the output Point",pt[i].equals(pt2));    i++;  }}  }
class C{  public String toString(){  return "Order Id: " + this.getTradeOrder().getIdTradeOrder() + " OrderKey: "+ this.getTradeOrder().getOrderKey()+ " Trade Order Version: "+ this.getTradeOrder().getVersion()+ " Order Fill Id: "+ this.getIdTradeOrderFill()+ " Order Fill Version: "+ this.getVersion()+ " Quantity: "+ this.getQuantity()+ " Avg Price: "+ new Money(this.getAveragePrice())+ " Cum Qty: "+ this.getCumulativeQuantity()+ " Price: "+ new Money(this.getPrice())+ " Exchange: "+ this.getExchange()+ " Side: "+ this.getSide()+ " Time: "+ this.getTime();}  }
class C{  public CAbstractAndExpression(final List<IAbstractNode> children){  m_children=new ArrayList<IAbstractNode>(children);}  }
class C{  private void notifyCollisions(){  for (Iterator<CollisionPair> it=collisions.iterator(); it.hasNext(); ) {    CollisionPair pair=it.next();    if (!pair.getA().isActive() || !pair.getB().isActive() || !isCollidable(pair.getA())|| !isCollidable(pair.getB())) {      it.remove();      pooler.put(pair);      continue;    }    pair.collision();  }}  }
class C{  public ComponentBuilder append(BaseComponent component){  this.parts.addExtra(this.current);  this.current=component;  return this;}  }
class C{  public final Vec2 addLocal(Vec2 v){  x+=v.x;  y+=v.y;  return this;}  }
class C{  @Override public synchronized Object[] toArray(){  Object[] result=new Object[elementCount];  System.arraycopy(elementData,0,result,0,elementCount);  return result;}  }
class C{  protected void transcode(Document document,String uri,TranscoderOutput output) throws TranscoderException {  if (!(document instanceof SVGOMDocument)) {    throw new TranscoderException(Messages.formatMessage("notsvg",null));  }  BridgeContext ctx=new BridgeContext(userAgent);  SVGOMDocument svgDoc=(SVGOMDocument)document;  GraphicsNode gvtRoot=buildGVT(ctx,svgDoc);  width=(int)(ctx.getDocumentSize().getWidth() + 0.5);  height=(int)(ctx.getDocumentSize().getHeight() + 0.5);  SpriteGraphics2D swf2d=new SpriteGraphics2D(width,height);  gvtRoot.paint(swf2d);  tags=swf2d.getTags();  Rect bounds=swf2d.getBounds();  width=(int)Math.rint((bounds.xMax - bounds.xMin) / 20.0);  height=(int)Math.rint((bounds.yMax - bounds.yMin) / 20.0);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Automaton makeDecimalInterval(int min,int max,int digits) throws IllegalArgumentException {  String x=Integer.toString(min);  String y=Integer.toString(max);  if (min > max || (digits > 0 && y.length() > digits)) {    throw new IllegalArgumentException();  }  int d;  if (digits > 0)   d=digits; else   d=y.length();  StringBuilder bx=new StringBuilder();  for (int i=x.length(); i < d; i++) {    bx.append('0');  }  bx.append(x);  x=bx.toString();  StringBuilder by=new StringBuilder();  for (int i=y.length(); i < d; i++) {    by.append('0');  }  by.append(y);  y=by.toString();  Automaton.Builder builder=new Automaton.Builder();  if (digits <= 0) {    builder.createState();  }  Collection<Integer> initials=new ArrayList<>();  between(builder,x,y,0,initials,digits <= 0);  Automaton a1=builder.finish();  if (digits <= 0) {    a1.addTransition(0,0,'0');    for (    int p : initials) {      a1.addEpsilon(0,p);    }    a1.finishState();  }  return a1;}  }
class C{  public DateTime withDayOfYear(int dayOfYear){  return withMillis(getChronology().dayOfYear().set(getMillis(),dayOfYear));}  }
class C{  public boolean removeEdge(int edge){  return getEdgeTable().removeRow(edge);}  }
class C{  public HttpServer(int port,boolean asDaemon) throws IOException {  this.port=port;  listeners=new Vector();  listen_socket=new ServerSocket(port);  this.setDaemon(asDaemon);}  }
class C{  public Pattern urlMustNotMatchPattern(){  if (this.crawlerurlmustnotmatch == null) {    final String r=get(CrawlAttribute.CRAWLER_URL_MUSTNOTMATCH.key);    try {      this.crawlerurlmustnotmatch=(r == null || r.equals(CrawlProfile.MATCH_NEVER_STRING)) ? CrawlProfile.MATCH_NEVER_PATTERN : Pattern.compile(r,Pattern.CASE_INSENSITIVE);    } catch (    final PatternSyntaxException e) {      this.crawlerurlmustnotmatch=CrawlProfile.MATCH_NEVER_PATTERN;    }  }  return this.crawlerurlmustnotmatch;}  }
class C{  public void removePointerReleasedListener(ActionListener l){  if (pointerReleasedListeners != null) {    pointerReleasedListeners.removeListener(l);  }}  }
class C{  private int findCongruenceMatch(ArrayList<GVCongruenceClass> vector,ValueGraphVertex v){  for (  GVCongruenceClass klass : vector) {    if (checkCongruence(v,klass)) {      return klass.getValueNumber();    }  }  return -1;}  }
class C{  public static void validatePRTXInCacheListener() throws ClassNotFoundException {  PartitionedRegion customerPartitionedregion=null;  PartitionedRegion orderPartitionedregion=null;  try {    customerPartitionedregion=(PartitionedRegion)basicGetCache().getRegion(Region.SEPARATOR + CustomerPartitionedRegionName);    orderPartitionedregion=(PartitionedRegion)basicGetCache().getRegion(Region.SEPARATOR + OrderPartitionedRegionName);  } catch (  Exception e) {    Assert.fail("validateAfterPutPartitionedRegion : failed while getting the region",e);  }  assertNotNull(customerPartitionedregion);  assertNotNull(orderPartitionedregion);  customerPartitionedregion.getDataStore().dumpEntries(false);  orderPartitionedregion.getDataStore().dumpEntries(false);  Iterator custIterator=customerPartitionedregion.getDataStore().getEntries().iterator();  LogWriterUtils.getLogWriter().info("Found " + customerPartitionedregion.getDataStore().getEntries().size() + " Customer entries in the partition");  Region.Entry custEntry=null;  while (custIterator.hasNext()) {    custEntry=(Entry)custIterator.next();    CustId custid=(CustId)custEntry.getKey();    Customer cust=(Customer)custEntry.getValue();    Iterator orderIterator=orderPartitionedregion.getDataStore().getEntries().iterator();    LogWriterUtils.getLogWriter().info("Found " + orderPartitionedregion.getDataStore().getEntries().size() + " Order entries in the partition");    int orderPerCustomer=0;    Region.Entry orderEntry=null;    while (orderIterator.hasNext()) {      orderEntry=(Entry)orderIterator.next();      OrderId orderId=(OrderId)orderEntry.getKey();      Order order=(Order)orderEntry.getValue();      if (custid.equals(orderId.getCustId())) {        orderPerCustomer++;      }    }    assertEquals(10,orderPerCustomer);  }}  }
class C{  public BigDecimalConverter(final Object defaultValue){  super(true,defaultValue);}  }
class C{  public String group(String groupName){  int idx=groupIndex(groupName);  if (idx < 0) {    throw new IndexOutOfBoundsException("No group \"" + groupName + "\"");  }  return group(idx);}  }
class C{  private void applyCat(CustomCategory cat){  cat.setName(settingsPanel.name.getText());  DefaultListModel dlm=((DefaultListModel)settingsPanel.catFilters.getModel());  cat.resetFilters();  for (int i=0; i < dlm.getSize(); i++) {    cat.addToFilters((Filter)dlm.elementAt(i));  }}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  @VisibleForTesting void configureBounds(){  Drawable underlyingDrawable=getCurrent();  Rect bounds=getBounds();  int viewWidth=bounds.width();  int viewHeight=bounds.height();  int underlyingWidth=mUnderlyingWidth=underlyingDrawable.getIntrinsicWidth();  int underlyingHeight=mUnderlyingHeight=underlyingDrawable.getIntrinsicHeight();  if (underlyingWidth <= 0 || underlyingHeight <= 0) {    underlyingDrawable.setBounds(bounds);    mDrawMatrix=null;    return;  }  if (underlyingWidth == viewWidth && underlyingHeight == viewHeight) {    underlyingDrawable.setBounds(bounds);    mDrawMatrix=null;    return;  }  if (mScaleType == ScalingUtils.ScaleType.FIT_XY) {    underlyingDrawable.setBounds(bounds);    mDrawMatrix=null;    return;  }  underlyingDrawable.setBounds(0,0,underlyingWidth,underlyingHeight);  ScalingUtils.getTransform(mTempMatrix,bounds,underlyingWidth,underlyingHeight,(mFocusPoint != null) ? mFocusPoint.x : 0.5f,(mFocusPoint != null) ? mFocusPoint.y : 0.5f,mScaleType);  mDrawMatrix=mTempMatrix;}  }
class C{  public static void drawString(final String string){  if (API.fontRendererAPI != null)   API.fontRendererAPI.drawString(string);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static int hashCode(double[] field){  return field == null || field.length == 0 ? 0 : Arrays.hashCode(field);}  }
class C{  public void releaseNewVersionLock(){  try {    if (_newVersionLock != null) {      _newVersionLock.release();    }  } catch (  Exception e) {    _log.error("Can not release new version lock",e);  }}  }
class C{  private void processJournal() throws IOException {  deleteIfExists(journalFileTmp);  for (Iterator<Entry> i=lruEntries.values().iterator(); i.hasNext(); ) {    Entry entry=i.next();    if (entry.currentEditor == null) {      for (int t=0; t < valueCount; t++) {        size+=entry.lengths[t];      }    } else {      entry.currentEditor=null;      for (int t=0; t < valueCount; t++) {        deleteIfExists(entry.getCleanFile(t));        deleteIfExists(entry.getDirtyFile(t));      }      i.remove();    }  }}  }
class C{  public boolean isRepeated(){  return count > 1;}  }
class C{  public static void removeObjectAtOffset(Object[] sourceArray,Object[] destinationArray,Object o){  int off=indexOf(sourceArray,o);  removeObjectAtOffset(sourceArray,destinationArray,off);}  }
class C{  public static int[] copy(int[] arr){  if (arr == null) {    return null;  }  int[] copy=new int[arr.length];  System.arraycopy(arr,0,copy,0,arr.length);  return copy;}  }
class C{  public final ArrayList<Object>[] generateRulesBruteForce(double minMetric,int metricType,ArrayList<Hashtable<ItemSet,Integer>> hashtables,int numItemsInSet,int numTransactions,double significanceLevel) throws Exception {  ArrayList<Object> premises=new ArrayList<Object>(), consequences=new ArrayList<Object>(), conf=new ArrayList<Object>(), lift=new ArrayList<Object>(), lev=new ArrayList<Object>(), conv=new ArrayList<Object>();  @SuppressWarnings("unchecked") ArrayList<Object>[] rules=new ArrayList[6];  AprioriItemSet premise, consequence;  Hashtable<ItemSet,Integer> hashtableForPremise, hashtableForConsequence;  int numItemsInPremise, help, max, consequenceUnconditionedCounter;  double[][] contingencyTable=new double[2][2];  double metric, chiSquared=0;  max=(int)Math.pow(2,numItemsInSet);  for (int j=1; j < max; j++) {    numItemsInPremise=0;    help=j;    while (help > 0) {      if (help % 2 == 1) {        numItemsInPremise++;      }      help/=2;    }    if (numItemsInPremise < numItemsInSet) {      hashtableForPremise=hashtables.get(numItemsInPremise - 1);      hashtableForConsequence=hashtables.get(numItemsInSet - numItemsInPremise - 1);      premise=new AprioriItemSet(m_totalTransactions);      consequence=new AprioriItemSet(m_totalTransactions);      premise.m_items=new int[m_items.length];      consequence.m_items=new int[m_items.length];      consequence.m_counter=m_counter;      help=j;      for (int i=0; i < m_items.length; i++) {        if (m_items[i] != -1) {          if (help % 2 == 1) {            premise.m_items[i]=m_items[i];            consequence.m_items[i]=-1;          } else {            premise.m_items[i]=-1;            consequence.m_items[i]=m_items[i];          }          help/=2;        } else {          premise.m_items[i]=-1;          consequence.m_items[i]=-1;        }      }      premise.m_counter=hashtableForPremise.get(premise).intValue();      consequenceUnconditionedCounter=hashtableForConsequence.get(consequence).intValue();      if (significanceLevel != -1) {        contingencyTable[0][0]=(consequence.m_counter);        contingencyTable[0][1]=(premise.m_counter - consequence.m_counter);        contingencyTable[1][0]=(consequenceUnconditionedCounter - consequence.m_counter);        contingencyTable[1][1]=(numTransactions - premise.m_counter - consequenceUnconditionedCounter + consequence.m_counter);        chiSquared=ContingencyTables.chiSquared(contingencyTable,false);      }      if (metricType == 0) {        metric=confidenceForRule(premise,consequence);        if ((!(metric < minMetric)) && (significanceLevel == -1 || !(chiSquared > significanceLevel))) {          premises.add(premise);          consequences.add(consequence);          conf.add(new Double(metric));          lift.add(new Double(liftForRule(premise,consequence,consequenceUnconditionedCounter)));          lev.add(new Double(leverageForRule(premise,consequence,premise.m_counter,consequenceUnconditionedCounter)));          conv.add(new Double(convictionForRule(premise,consequence,premise.m_counter,consequenceUnconditionedCounter)));        }      } else {        double tempConf=confidenceForRule(premise,consequence);        double tempLift=liftForRule(premise,consequence,consequenceUnconditionedCounter);        double tempLev=leverageForRule(premise,consequence,premise.m_counter,consequenceUnconditionedCounter);        double tempConv=convictionForRule(premise,consequence,premise.m_counter,consequenceUnconditionedCounter);switch (metricType) {case 1:          metric=tempLift;        break;case 2:      metric=tempLev;    break;case 3:  metric=tempConv;break;default :throw new Exception("ItemSet: Unknown metric type!");}if (!(metric < minMetric) && (significanceLevel == -1 || !(chiSquared > significanceLevel))) {premises.add(premise);consequences.add(consequence);conf.add(new Double(tempConf));lift.add(new Double(tempLift));lev.add(new Double(tempLev));conv.add(new Double(tempConv));}}}}rules[0]=premises;rules[1]=consequences;rules[2]=conf;rules[3]=lift;rules[4]=lev;rules[5]=conv;return rules;}  }
class C{  public void addListener(ATabbedPaneListener listener){  listeners.add(listener);}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  public Long addRoomWithModerationQuestionsAudioTypeAndHideOptions(String SID,String name,Long roomtypes_id,String comment,Long numberOfPartizipants,Boolean ispublic,Boolean appointment,Boolean isDemoRoom,Integer demoTime,Boolean isModeratedRoom,Boolean allowUserQuestions,Boolean isAudioOnly,Boolean hideTopBar,Boolean hideChat,Boolean hideActivitiesAndActions,Boolean hideFilesExplorer,Boolean hideActionsMenu,Boolean hideScreenSharing,Boolean hideWhiteboard) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    return roommanagement.addRoom(user_level,name,roomtypes_id,comment,numberOfPartizipants,ispublic,null,appointment,isDemoRoom,demoTime,isModeratedRoom,null,allowUserQuestions,isAudioOnly,false,"","","",null,null,null,hideTopBar,hideChat,hideActivitiesAndActions,hideFilesExplorer,hideActionsMenu,hideScreenSharing,hideWhiteboard,false);  } catch (  Exception err) {    log.error("[addRoomWithModerationQuestionsAudioTypeAndHideOptions] ",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public void compileProjects(List<File> pProjectRoots,List<File> projectLocationsToCompile) throws N4JSCompileException {  compileProjects(pProjectRoots,projectLocationsToCompile,new DismissingIssueAcceptor());}  }
class C{  public static void arraycopy(char[] src,int srcPos,char[] dest,int destPos,int length){  java.lang.System.arraycopy(src,srcPos,dest,destPos,length);}  }
class C{  public void clear(){  if (states != null) {    states.removeAllElements();  }}  }
class C{  private CategoryDataset createDataset(){  DefaultCategoryDataset result=new DefaultCategoryDataset();  result.addValue(20.3,"Product 1 (US)","Jan 04");  result.addValue(27.2,"Product 1 (US)","Feb 04");  result.addValue(19.7,"Product 1 (US)","Mar 04");  result.addValue(19.4,"Product 1 (Europe)","Jan 04");  result.addValue(10.9,"Product 1 (Europe)","Feb 04");  result.addValue(18.4,"Product 1 (Europe)","Mar 04");  result.addValue(16.5,"Product 1 (Asia)","Jan 04");  result.addValue(15.9,"Product 1 (Asia)","Feb 04");  result.addValue(16.1,"Product 1 (Asia)","Mar 04");  result.addValue(13.2,"Product 1 (Middle East)","Jan 04");  result.addValue(14.4,"Product 1 (Middle East)","Feb 04");  result.addValue(13.7,"Product 1 (Middle East)","Mar 04");  result.addValue(23.3,"Product 2 (US)","Jan 04");  result.addValue(16.2,"Product 2 (US)","Feb 04");  result.addValue(28.7,"Product 2 (US)","Mar 04");  result.addValue(12.7,"Product 2 (Europe)","Jan 04");  result.addValue(17.9,"Product 2 (Europe)","Feb 04");  result.addValue(12.6,"Product 2 (Europe)","Mar 04");  result.addValue(15.4,"Product 2 (Asia)","Jan 04");  result.addValue(21.0,"Product 2 (Asia)","Feb 04");  result.addValue(11.1,"Product 2 (Asia)","Mar 04");  result.addValue(23.8,"Product 2 (Middle East)","Jan 04");  result.addValue(23.4,"Product 2 (Middle East)","Feb 04");  result.addValue(19.3,"Product 2 (Middle East)","Mar 04");  result.addValue(11.9,"Product 3 (US)","Jan 04");  result.addValue(31.0,"Product 3 (US)","Feb 04");  result.addValue(22.7,"Product 3 (US)","Mar 04");  result.addValue(15.3,"Product 3 (Europe)","Jan 04");  result.addValue(14.4,"Product 3 (Europe)","Feb 04");  result.addValue(25.3,"Product 3 (Europe)","Mar 04");  result.addValue(23.9,"Product 3 (Asia)","Jan 04");  result.addValue(19.0,"Product 3 (Asia)","Feb 04");  result.addValue(10.1,"Product 3 (Asia)","Mar 04");  result.addValue(13.2,"Product 3 (Middle East)","Jan 04");  result.addValue(15.5,"Product 3 (Middle East)","Feb 04");  result.addValue(10.1,"Product 3 (Middle East)","Mar 04");  return result;}  }
class C{  public static Sha256Hash create(byte[] contents){  try {    MessageDigest digest=MessageDigest.getInstance("SHA-256");    return new Sha256Hash(digest.digest(contents));  } catch (  NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  private void pruneIfNeeded(int neededSpace){  if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes) {    return;  }  Loger.debug("Pruning old cache entries.");  long before=mTotalSize;  int prunedFiles=0;  long startTime=SystemClock.elapsedRealtime();  Iterator<Map.Entry<String,CacheHeader>> iterator=mEntries.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<String,CacheHeader> entry=iterator.next();    CacheHeader e=entry.getValue();    boolean deleted=getFileForKey(e.key).delete();    if (deleted) {      mTotalSize-=e.size;    } else {      Loger.debug(String.format("Could not delete cache entry for key=%s, filename=%s",e.key,getFilenameForKey(e.key)));    }    iterator.remove();    prunedFiles++;    if ((mTotalSize + neededSpace) < mMaxCacheSizeInBytes * HYSTERESIS_FACTOR) {      break;    }  }  Loger.debug(String.format("pruned %d files, %d bytes, %d ms",prunedFiles,(mTotalSize - before),SystemClock.elapsedRealtime() - startTime));}  }
class C{  private void addContentIdentifier(final CAdESSignatureParameters parameters,final ASN1EncodableVector signedAttributes){  if (!padesUsage) {    final BLevelParameters bLevelParameters=parameters.bLevel();    final String contentIdentifierPrefix=parameters.getContentIdentifierPrefix();    if (StringUtils.isNotBlank(contentIdentifierPrefix)) {      final String contentIdentifierSuffix;      if (StringUtils.isBlank(parameters.getContentIdentifierSuffix())) {        final Date now=new Date();        final String asn1GeneralizedTimeString=new ASN1GeneralizedTime(now).getTimeString();        final long randomNumber=new Random(now.getTime()).nextLong();        contentIdentifierSuffix=asn1GeneralizedTimeString + randomNumber;        parameters.setContentIdentifierSuffix(contentIdentifierSuffix);      } else {        contentIdentifierSuffix=parameters.getContentIdentifierSuffix();      }      final String contentIdentifierString=contentIdentifierPrefix + contentIdentifierSuffix;      final ContentIdentifier contentIdentifier=new ContentIdentifier(contentIdentifierString.getBytes());      final DERSet attrValues=new DERSet(contentIdentifier);      final Attribute attribute=new Attribute(id_aa_contentIdentifier,attrValues);      signedAttributes.add(attribute);    }  }}  }
class C{  private List<Map<String,Object>> parameterListMap(ParameterList plist,Declaration from){  if (plist == null) {    return null;  }  List<Parameter> parms=plist.getParameters();  if (parms.size() > 0) {    List<Map<String,Object>> p=new ArrayList<>(parms.size());    for (    Parameter parm : parms) {      Map<String,Object> pm=new HashMap<>();      pm.put(KEY_NAME,parm.getName());      pm.put(KEY_METATYPE,METATYPE_PARAMETER);      if (parm.isSequenced()) {        pm.put("seq",1);      }      if (parm.isDefaulted()) {        pm.put(KEY_DEFAULT,1);      }      if (parm.isAtLeastOne()) {        pm.put("$min1",1);      }      final FunctionOrValue parmtype=parm.getModel();      if (parmtype != null && parmtype.getDeclarationKind() == DeclarationKind.TYPE_PARAMETER) {        pm.put(KEY_TYPE,parmtype.getName());      } else {        pm.put(KEY_TYPE,typeMap(parm.getType(),from));      }      if (parm.isHidden()) {        pm.put("$hdn",1);      }      if (parmtype instanceof Function) {        pm.put("$pt","f");        List<List<Map<String,Object>>> _paramLists=new ArrayList<>(((Function)parmtype).getParameterLists().size());        for (        ParameterList subplist : ((Function)parmtype).getParameterLists()) {          List<Map<String,Object>> params=parameterListMap(subplist,from);          if (params == null) {            params=Collections.emptyList();          }          _paramLists.add(params);        }        if (_paramLists.size() > 1 || !_paramLists.get(0).isEmpty()) {          pm.put(KEY_PARAMS,_paramLists);        }      }      encodeAnnotations(parm.getModel().getAnnotations(),parm.getModel(),pm);      p.add(pm);    }    return p;  }  return null;}  }
class C{  public DoubleMatrix jblas_SPDValues(double[][] Aimag){  return org.jblas.Singular.SVDValues(new ComplexDoubleMatrix(new DoubleMatrix(this.getArray()),new DoubleMatrix(Aimag)));}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Matrix4 multiplyByScale(double xScale,double yScale,double zScale){  double[] m=this.m;  m[0]*=xScale;  m[4]*=xScale;  m[8]*=xScale;  m[12]*=xScale;  m[1]*=yScale;  m[5]*=yScale;  m[9]*=yScale;  m[13]*=yScale;  m[2]*=zScale;  m[6]*=zScale;  m[10]*=zScale;  m[14]*=zScale;  return this;}  }
class C{  public <V>StrSubstitutor(final Map<String,V> valueMap){  this(StrLookup.mapLookup(valueMap),DEFAULT_PREFIX,DEFAULT_SUFFIX,DEFAULT_ESCAPE);}  }
class C{  public void addPage(Page page){  pages.put(page.pageNum,page);}  }
class C{  public void runDownloadMultipleAirplaneModeEnableDisable() throws Exception {  String filename=DOWNLOAD_5MB_FILENAME;  long filesize=DOWNLOAD_5MB_FILESIZE;  doCommonDownloadSetup();  String localDownloadDirectory=Environment.getExternalStorageDirectory().getPath();  File downloadedFile=new File(localDownloadDirectory,filename);  long dlRequest=-1;  try {    downloadedFile.delete();    removeAllCurrentDownloads();    Uri remoteUri=getExternalFileUri(filename);    Request request=new Request(remoteUri);    Uri localUri=Uri.fromFile(downloadedFile);    Log.i(LOG_TAG,"setting localUri to: " + localUri.getPath());    request.setDestinationUri(localUri);    request.setAllowedNetworkTypes(Request.NETWORK_WIFI);    dlRequest=mDownloadManager.enqueue(request);    waitForDownloadToStart(dlRequest);    waitForFileToGrow(downloadedFile);    Log.i(LOG_TAG,"Turning on Airplane mode...");    setAirplaneModeOn(true);    Thread.sleep(60 * 1000);    Log.i(LOG_TAG,"Turning off Airplane mode...");    setAirplaneModeOn(false);    waitForFileToGrow(downloadedFile);    Log.i(LOG_TAG,"Turning on Airplane mode again...");    setAirplaneModeOn(true);    Thread.sleep(20 * 1000);    Log.i(LOG_TAG,"Turning off Airplane mode again...");    setAirplaneModeOn(false);    Log.i(LOG_TAG,"Waiting up to 3 minutes for donwload to complete...");    waitForDownloadsOrTimeout(dlRequest,180 * 1000);    ParcelFileDescriptor pfd=mDownloadManager.openDownloadedFile(dlRequest);    verifyFileSize(pfd,filesize);  }  finally {    Log.i(LOG_TAG,"Cleaning up files...");    if (dlRequest != -1) {      mDownloadManager.remove(dlRequest);    }    downloadedFile.delete();  }}  }
class C{  public KernelCount[][] computeMatchesForEachObservations(boolean giveListOfCorrelatedPoints) throws Exception {  KernelCount[][] counts=new KernelCount[totalObservations][4];  for (int b=0; b < totalObservations; b++) {    counts[b][0]=mvkeDestinationPast.getCompleteKernelCount(destPastVectors[b],b,giveListOfCorrelatedPoints);    counts[b][1]=mvkeDestinationNextPast.getCompleteKernelCount(destNextPastVectors[b],b,giveListOfCorrelatedPoints);    counts[b][2]=mvkeDestinationPastSource.getCompleteKernelCount(destPastSourceVectors[b],b,giveListOfCorrelatedPoints);    counts[b][3]=mvkeDestinationNextPastSource.getCompleteKernelCount(destNextPastSourceVectors[b],b,giveListOfCorrelatedPoints);  }  return counts;}  }
class C{  public void commandAction(Command c,Displayable d){  if (d.equals(configPanel)) {    if (c.equals(connect)) {      gauge.setLabel("Connecting...");      gauge.start();      Display.getDisplay(this).setCurrent(gaugePanel);      state=CONNECTING;      new Thread(this).start();    } else {      try {        destroyApp(true);      } catch (      Exception e) {      }    }  } else   if (d.equals(logPanel)) {    gauge.setLabel("Disconnecting...");    state=DISCONNECTING;    gauge.start();    Display.getDisplay(this).setCurrent(gaugePanel);    new Thread(this).start();  }}  }
class C{  public double pessimisticErrors(double numberOfExamples,double errorRate,double confidenceLevel){  if (errorRate < 1E-6) {    return errorRate + numberOfExamples * (1.0 - Math.exp(Math.log(confidenceLevel) / numberOfExamples));  } else   if (errorRate + 0.5 >= numberOfExamples) {    return errorRate + 0.67 * (numberOfExamples - errorRate);  } else {    double coefficient=MathFunctions.normalInverse(1 - confidenceLevel);    coefficient*=coefficient;    double pessimisticRate=(errorRate + 0.5 + coefficient / 2.0d + Math.sqrt(coefficient * ((errorRate + 0.5) * (1 - (errorRate + 0.5) / numberOfExamples) + coefficient / 4.0d))) / (numberOfExamples + coefficient);    return numberOfExamples * pessimisticRate;  }}  }
class C{  public static boolean isNullOrEmpty(@Nullable Collection collection){  return isNull(collection) || collection.isEmpty();}  }
class C{  protected DistributedSystemHealthConfigImpl(){}  }
class C{  protected String doIt() throws Exception {  for (  MDDOrder order : getRecords())   generate(order);  return result;}  }
class C{  public SQLIntegrityConstraintViolationException(String reason,String sqlState){  super(reason,sqlState,0);}  }
class C{  boolean validateUserPasswordHash(byte[] userPasswordHash){  return true;}  }
class C{  public String format(){  if (result == null) {    return "(null)";  } else   if (result instanceof Map) {    return format((Map<?,?>)result);  } else   if (result instanceof TungstenProperties) {    return format(((TungstenProperties)result).map());  } else {    return format(result);  }}  }
class C{  @Override protected boolean afterSave(boolean newRecord,boolean success){  if (!success)   return success;  return true;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.808 -0500",hash_original_method="B04849E47B71B5E874F7B8DA72F507BD",hash_generated_method="8D16EEF172DB5C8EF289B80B245CA74A") public Result timeToValues(int msec,float[] values){  if (values != null && values.length < mValueCount) {    throw new ArrayStoreException();  }switch (nativeTimeToValues(native_instance,msec,values)) {case 0:    return Result.NORMAL;case 1:  return Result.FREEZE_START;default :return Result.FREEZE_END;}}  }
class C{  private void writeObject(ObjectOutputStream stream) throws IOException {  stream.defaultWriteObject();  SerialUtilities.writeShape(this.chartArea,stream);}  }
class C{  public ApplicationDefinition addApplicationDefinition(ApplicationDefinition appDefinition) throws BusinessException {  return addApplicationDefinition(appDefinition,applicationDefinitions.size());}  }
class C{  public void start(){  _log.info("start GC {}",gcExecutorLoop.getClass().getSimpleName());  gcExecutorLoop.setDependencyTracker(_dataObjectScanner.getDependencyTracker());  gcExecutorLoop.setDbServiceId(dbServiceId);  _executor.scheduleWithFixedDelay(gcExecutorLoop,1,_gcRunInterval,TimeUnit.MINUTES);}  }
class C{  public void writeField(final String name,final long value) throws java.io.IOException {  writeField(name,Long.toString(value));}  }
class C{  public static Date parseDate(String dateValue,String[] dateFormats,Date startDate) throws DateParseException {  if (dateValue == null) {    throw new IllegalArgumentException("dateValue is null");  }  if (dateFormats == null) {    dateFormats=DEFAULT_PATTERNS;  }  if (startDate == null) {    startDate=DEFAULT_TWO_DIGIT_YEAR_START;  }  if (dateValue.length() > 1 && dateValue.startsWith("'") && dateValue.endsWith("'")) {    dateValue=dateValue.substring(1,dateValue.length() - 1);  }  for (  String dateFormat : dateFormats) {    SimpleDateFormat dateParser=DateFormatHolder.formatFor(dateFormat);    dateParser.set2DigitYearStart(startDate);    try {      return dateParser.parse(dateValue);    } catch (    ParseException pe) {    }  }  throw new DateParseException("Unable to parse the date " + dateValue);}  }
class C{  private boolean evaluateTrigger(Trigger trigger,Metric metric,BigInteger historyId,Notification notification,EntityManager em,Alert alert){  Long triggerFiredTime=getTriggerFiredDatapointTime(trigger,metric);  if (triggerFiredTime != null) {    sendNotification(trigger,metric,historyId,notification,em,alert,triggerFiredTime);    return true;  } else {    String logMessage=MessageFormat.format("The trigger {0} was evaluated against metric {1} and it is not fired for the notification {2}.",trigger.getName(),getMetricExpression(metric),notification.getName());    _logger.info(logMessage);    _historyService.appendMessageAndUpdate(historyId,logMessage,null,0,0);  }  return false;}  }
class C{  private static final int[] findLineAndColumn(final int idx,final String message){  int[] val={-1,-1,message.length()};  int beginIndex=message.indexOf("line ",idx);  int offset=5;  if (beginIndex != idx) {    beginIndex=-1;  }  if (beginIndex == -1) {    beginIndex=message.indexOf(" line ",idx);    offset=6;  }  if (beginIndex != -1) {    beginIndex=beginIndex + offset;    while ((beginIndex < message.length()) && !Character.isDigit(message.charAt(beginIndex))) {      beginIndex++;    }    int endIndex=beginIndex + 1;    while ((endIndex < message.length()) && Character.isDigit(message.charAt(endIndex))) {      endIndex++;    }    if (beginIndex < message.length()) {      try {        val[0]=Integer.parseInt(message.substring(beginIndex,endIndex));      } catch (      Exception e) {        val[0]=-1;      }      beginIndex=message.indexOf(" column ",endIndex);      int colOffset=0;      if (beginIndex != -1) {        colOffset=8;      }      int otherIndex=message.indexOf(" col ",endIndex);      if ((otherIndex != -1) && ((beginIndex == -1) || (otherIndex < beginIndex))) {        beginIndex=otherIndex;        colOffset=5;      }      if (beginIndex != -1) {        beginIndex=beginIndex + colOffset;        while ((beginIndex < message.length()) && !Character.isDigit(message.charAt(beginIndex))) {          beginIndex++;        }        endIndex=beginIndex + 1;        while ((endIndex < message.length()) && Character.isDigit(message.charAt(endIndex))) {          endIndex++;        }        if (beginIndex < message.length()) {          try {            val[1]=Integer.parseInt(message.substring(beginIndex,endIndex));          } catch (          Exception e) {            val[1]=-1;          }          val[2]=endIndex;        }      }    }  }  return val;}  }
class C{  public boolean hasTheme(){  return hasExtension(Theme.class);}  }
class C{  public void write(NbtTag tag) throws IOException {  this.writeByte(tag.getTagID());  tag.write(this,false);}  }
class C{  public ApplySettingsException(){  super();}  }
class C{  public AbstractHttpClient createHTTPClient(int useConnectionTimeout,int useConnectionReadTimeout) throws AuthenticationException, GeneralSecurityException, RuntimeException {  return createRawHTTPClient(useConnectionTimeout,useConnectionReadTimeout);}  }
class C{  public SendableVenueMessage.SendableVenueMessageBuilder title(String title){  this.title=title;  return this;}  }
class C{  private void waitForAddressCompletion(){  InternalDistributedMember myAddr=this.owner.getConduit().getLocalAddress();synchronized (myAddr) {    while ((!owner.getConduit().getCancelCriterion().isCancelInProgress()) && myAddr.getInetAddress() == null && myAddr.getVmViewId() < 0) {      try {        myAddr.wait(100);      } catch (      InterruptedException ie) {        Thread.currentThread().interrupt();        this.owner.getConduit().getCancelCriterion().checkCancelInProgress(ie);      }    }    Assert.assertTrue(myAddr.getDirectChannelPort() == this.owner.getConduit().getPort());  }}  }
class C{  public DenseVector(Vec toCopy){  this(toCopy.length());  for (  IndexValue iv : toCopy)   set(iv.getIndex(),iv.getValue());}  }
class C{  public void layoutContainer(Container target){synchronized (target.getTreeLock()) {    Insets insets=target.getInsets();    int top=insets.top;    int bottom=target.height - insets.bottom;    int left=insets.left;    int right=target.width - insets.right;    boolean ltr=target.getComponentOrientation().isLeftToRight();    Component c=null;    if ((c=getChild(NORTH,ltr)) != null) {      c.setSize(right - left,c.height);      Dimension d=c.getPreferredSize();      c.setBounds(left,top,right - left,d.height);      top+=d.height + vgap;    }    if ((c=getChild(SOUTH,ltr)) != null) {      c.setSize(right - left,c.height);      Dimension d=c.getPreferredSize();      c.setBounds(left,bottom - d.height,right - left,d.height);      bottom-=d.height + vgap;    }    if ((c=getChild(EAST,ltr)) != null) {      c.setSize(c.width,bottom - top);      Dimension d=c.getPreferredSize();      c.setBounds(right - d.width,top,d.width,bottom - top);      right-=d.width + hgap;    }    if ((c=getChild(WEST,ltr)) != null) {      c.setSize(c.width,bottom - top);      Dimension d=c.getPreferredSize();      c.setBounds(left,top,d.width,bottom - top);      left+=d.width + hgap;    }    if ((c=getChild(CENTER,ltr)) != null) {      c.setBounds(left,top,right - left,bottom - top);    }  }}  }
class C{  public static boolean isOpen(String l){  return l == "OPEN";}  }
class C{  public static void addWhiteListEntry(String origin,boolean subdomains){  if (parser == null) {    Log.e(TAG,"Config was not initialised. Did you forget to Config.init(this)?");    return;  }  parser.getInternalWhitelist().addWhiteListEntry(origin,subdomains);}  }
class C{  public void addMutualEdges(Object from,Object to,int weight){  addEdge(from,to,weight);  addEdge(to,from,-weight);}  }
class C{  private ProtectionSet queryProtectionSetResource(URI id){  if (id == null) {    return null;  }  ProtectionSet ret=_permissionsHelper.getObjectById(id,ProtectionSet.class);  ArgValidator.checkEntityNotNull(ret,id,isIdEmbeddedInURL(id));  return ret;}  }
class C{  private void autoSelectAuthHandler(final HttpProxyResponse response) throws ProxyAuthException {  List<String> values=response.getHeaders().get("Proxy-Authenticate");  ProxyIoSession proxyIoSession=getProxyIoSession();  if (values == null || values.size() == 0) {    authHandler=HttpAuthenticationMethods.NO_AUTH.getNewHandler(proxyIoSession);  } else   if (getProxyIoSession().getPreferedOrder() == null) {    int method=-1;    for (    String proxyAuthHeader : values) {      proxyAuthHeader=proxyAuthHeader.toLowerCase();      if (proxyAuthHeader.contains("ntlm")) {        method=HttpAuthenticationMethods.NTLM.getId();        break;      } else       if (proxyAuthHeader.contains("digest") && method != HttpAuthenticationMethods.NTLM.getId()) {        method=HttpAuthenticationMethods.DIGEST.getId();      } else       if (proxyAuthHeader.contains("basic") && method == -1) {        method=HttpAuthenticationMethods.BASIC.getId();      }    }    if (method != -1) {      try {        authHandler=HttpAuthenticationMethods.getNewHandler(method,proxyIoSession);      } catch (      Exception ex) {        logger.debug("Following exception occured:",ex);      }    }    if (authHandler == null) {      authHandler=HttpAuthenticationMethods.NO_AUTH.getNewHandler(proxyIoSession);    }  } else {    for (    HttpAuthenticationMethods method : proxyIoSession.getPreferedOrder()) {      if (authHandler != null) {        break;      }      if (method == HttpAuthenticationMethods.NO_AUTH) {        authHandler=HttpAuthenticationMethods.NO_AUTH.getNewHandler(proxyIoSession);        break;      }      for (      String proxyAuthHeader : values) {        proxyAuthHeader=proxyAuthHeader.toLowerCase();        try {          if (proxyAuthHeader.contains("basic") && method == HttpAuthenticationMethods.BASIC) {            authHandler=HttpAuthenticationMethods.BASIC.getNewHandler(proxyIoSession);            break;          } else           if (proxyAuthHeader.contains("digest") && method == HttpAuthenticationMethods.DIGEST) {            authHandler=HttpAuthenticationMethods.DIGEST.getNewHandler(proxyIoSession);            break;          } else           if (proxyAuthHeader.contains("ntlm") && method == HttpAuthenticationMethods.NTLM) {            authHandler=HttpAuthenticationMethods.NTLM.getNewHandler(proxyIoSession);            break;          }        } catch (        Exception ex) {          logger.debug("Following exception occured:",ex);        }      }    }  }  if (authHandler == null) {    throw new ProxyAuthException("Unknown authentication mechanism(s): " + values);  }}  }
class C{  public static boolean canExtractFluids(Object extractor,World world,int i,int j,int k){  for (  IExtractionHandler handler : extractionHandlers) {    if (!handler.canExtractFluids(extractor,world,i,j,k)) {      return false;    }  }  return true;}  }
class C{  public JarModifier(File jarFile) throws JarException, IOException {  this.jarFile=jarFile;  JarFile jar=new JarFile(jarFile);  Enumeration<? extends JarEntry> enumerator=jar.entries();  while (enumerator.hasMoreElements()) {    JarEntry currentEntry=(JarEntry)enumerator.nextElement();    JarEntry resetEntry=new JarEntry(currentEntry.getName());    jarEntries.put(currentEntry.getName(),resetEntry);  }  String manifestPath=META_INF + SEPERATOR + "MANIFEST.MF";  JarEntry jarEntry=jar.getJarEntry(manifestPath);  if (jarEntry != null) {    Enumeration<JarEntry> entries=jar.entries();    while (entries.hasMoreElements()) {      jarEntry=(JarEntry)entries.nextElement();      if (manifestPath.equalsIgnoreCase(jarEntry.getName())) {        break;      } else {        jarEntry=null;      }    }  }  Manifest manifest=new Manifest();  if (jarEntry != null) {    manifest.read(jar.getInputStream(jarEntry));  }  this.manifest=manifest;  jar.close();}  }
class C{  public NumberFormatException(){}  }
class C{  public boolean isZero(){  if (VM.VerifyAssertions && VM.runningVM)   VM._assert(VM.NOT_REACHED);  return EQ(zero());}  }
class C{  public View create(Element elem){  RTextArea c=getRTextArea();  if (c instanceof RSyntaxTextArea) {    RSyntaxTextArea area=(RSyntaxTextArea)c;    View v;    if (area.getLineWrap())     v=new WrappedSyntaxView(elem); else     v=new SyntaxView(elem);    return v;  }  return null;}  }
class C{  public static <T>RemoveQuery<T> finish(T query,long correlationId,String type){  return new RemoveQuery<>(RequestData.builder().query(query).correlationId(correlationId).type(type).build());}  }
class C{  public void environmentStop(EnvironmentClassLoader loader){  Method stop=getStopMethod(_resource.getClass());  if (stop == null)   return;  try {    stop.invoke(_resource);  } catch (  Throwable e) {    log.log(Level.WARNING,e.toString(),e);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!super.equals(obj)) {    return false;  }  if (!(obj instanceof XYDrawableAnnotation)) {    return false;  }  XYDrawableAnnotation that=(XYDrawableAnnotation)obj;  if (this.x != that.x) {    return false;  }  if (this.y != that.y) {    return false;  }  if (this.displayWidth != that.displayWidth) {    return false;  }  if (this.displayHeight != that.displayHeight) {    return false;  }  if (this.drawScaleFactor != that.drawScaleFactor) {    return false;  }  if (!ObjectUtilities.equal(this.drawable,that.drawable)) {    return false;  }  return true;}  }
class C{  public void addCountryListener(CountryListener listener,Looper looper){synchronized (mListeners) {    if (!mListeners.containsKey(listener)) {      ListenerTransport transport=new ListenerTransport(listener,looper);      mService.addCountryListener(transport);      mListeners.put(listener,transport);    }  }}  }
class C{  static public IString[] toIStringArray(int[] ids){  IString[] istrs=new IString[ids.length];  for (int i=0; i < istrs.length; i++) {    istrs[i]=new IString(ids[i]);  }  return istrs;}  }
class C{  public Builder initializeAsNew(IndexMetaData indexMetaData){  return initializeEmpty(indexMetaData,new UnassignedInfo(UnassignedInfo.Reason.INDEX_CREATED,null));}  }
class C{  public static GeoTimeSerie onlybuckets(GeoTimeSerie gts){  GeoTimeSerie clone=gts.clone();  if (!isBucketized(gts)) {    return clone;  }  boolean setLocations=gts.locations != null;  boolean setElevations=gts.elevations != null;  int i=0;  while (i < clone.values) {    long q=(gts.lastbucket - gts.ticks[i]) / gts.bucketspan;    long r=(gts.lastbucket - gts.ticks[i]) % gts.bucketspan;    if (0 == r && q >= 0 && q < gts.bucketcount) {      i++;    } else {      q=(gts.lastbucket - gts.ticks[clone.values - 1]) / gts.bucketspan;      r=(gts.lastbucket - gts.ticks[clone.values - 1]) % gts.bucketspan;      while (clone.values - 1 > i && !(0 == r && q >= 0 && q < gts.bucketcount)) {        clone.values--;        q=(gts.lastbucket - gts.ticks[clone.values - 1]) / gts.bucketspan;        r=(gts.lastbucket - gts.ticks[clone.values - 1]) % gts.bucketspan;      }      if (clone.values - 1 == i) {        clone.values--;      } else {        clone.ticks[i]=clone.ticks[clone.values - 1];        if (setLocations) {          clone.locations[i]=clone.locations[clone.values - 1];        }        if (setElevations) {          clone.elevations[i]=clone.elevations[clone.values - 1];        }switch (clone.type) {case LONG:          clone.longValues[i]=clone.longValues[clone.values - 1];        break;case DOUBLE:      clone.doubleValues[i]=clone.doubleValues[clone.values - 1];    break;case STRING:  clone.stringValues[i]=clone.stringValues[clone.values - 1];break;case BOOLEAN:clone.booleanValues.set(i,clone.booleanValues.get(clone.values - 1));break;}clone.values--;i++;}}}if (gts.values - clone.values > 1000) {GTSHelper.shrink(clone);}return clone;}  }
class C{  public String fetchNodeName(String replicaFQName){  String nodeName=replicaFQName.split("_solr")[0].split(":")[0];  if (localRun) {    if (zkClusterData.getPrivateIpToPublicHostNameMap() != null) {      nodeName=zkClusterData.getPrivateIpToPublicHostNameMap().get(nodeName);    } else {      throw new RuntimeException("Trying to do Private to Public host Ip mapping is failed for host " + nodeName);    }  }  return nodeName;}  }
class C{  public DateTime toDateTime(TimeOfDay time){  return toDateTime(time,null);}  }
class C{  public static IDownloaderClient CreateProxy(Messenger msg){  return new Proxy(msg);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ENTITY___CLASS_DEFINITION_1:    return classDefinition_1 != null && !classDefinition_1.isEmpty();case UmplePackage.ENTITY___INTERFACE_DEFINITION_1:  return interfaceDefinition_1 != null && !interfaceDefinition_1.isEmpty();case UmplePackage.ENTITY___EXTERNAL_DEFINITION_1:return externalDefinition_1 != null && !externalDefinition_1.isEmpty();case UmplePackage.ENTITY___ASSOCIATION_DEFINITION_1:return associationDefinition_1 != null && !associationDefinition_1.isEmpty();case UmplePackage.ENTITY___ASSOCIATION_CLASS_DEFINITION_1:return associationClassDefinition_1 != null && !associationClassDefinition_1.isEmpty();case UmplePackage.ENTITY___STATE_MACHINE_DEFINITION_1:return stateMachineDefinition_1 != null && !stateMachineDefinition_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:27.480 -0500",hash_original_method="102B5DD63D8812CA09E006716DE254FA",hash_generated_method="8F6F3C9693BC4D9B4767F4CC00A265E3") public ProtocolVersion forVersion(int major,int minor){  if ((major == this.major) && (minor == this.minor)) {    return this;  }  if (major == 1) {    if (minor == 0) {      return HTTP_1_0;    }    if (minor == 1) {      return HTTP_1_1;    }  }  if ((major == 0) && (minor == 9)) {    return HTTP_0_9;  }  return new HttpVersion(major,minor);}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public AccountHeaderBuilder withSavedInstance(Bundle savedInstance){  this.mSavedInstance=savedInstance;  return this;}  }
class C{  public static void sendMessageInBackground(String message,ParseQuery<ParseInstallation> query,SendCallback callback){  ParseTaskUtils.callbackOnMainThreadAsync(sendMessageInBackground(message,query),callback);}  }
class C{  public void clear(int i){  int addr=i >> ADDRESS_BITS;  if (addr >= data.length) {    return;  }  data[addr]&=~getBitMask(i);}  }
class C{  public ChangeDelta(Chunk<T> original,Chunk<T> revised){  super(original,revised);}  }
class C{  public void reset(ActionMapping mapping,HttpServletRequest request){  courseOfferingId="";  subjectArea="";  courseNumber="";  itype="";  limit=0;  op="";  unlimited=new Boolean(false);  configCount=new Integer(0);  configId=new Long(0);  name=null;  catalogLinkLabel=null;  catalogLinkLocation=null;  durationType=null;  durationTypeDefault=null;  durationTypeEditable=false;  instructionalMethod=null;}  }
class C{  @Deprecated public Handle(int tag,String owner,String name,String desc){  this(tag,owner,name,desc,tag == Opcodes.H_INVOKEINTERFACE);}  }
class C{  public RemoteChunk(){}  }
class C{  public String toString(){  int tabCount=getTabCount();  StringBuilder buffer=new StringBuilder("[ ");  for (int counter=0; counter < tabCount; counter++) {    if (counter > 0)     buffer.append(" - ");    buffer.append(getTab(counter).toString());  }  buffer.append(" ]");  return buffer.toString();}  }
class C{  public int size(){  this.buildIfNeededMap();  return map.size();}  }
class C{  public static JPanel createPaletteJPanel(String title){  JPanel panel=new JPanel();  if (title != null) {    panel.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(),title));  } else {    panel.setBorder(BorderFactory.createEtchedBorder());  }  panel.setLayout(new GridLayout(0,1));  return panel;}  }
class C{  public APIUserCredentials(UserCredentials userCredentials){  this.expected=userCredentials.getFields();  this.values=userCredentials.getValues();}  }
class C{  public static Message newUpdate(Name zone){  return new Update(zone);}  }
class C{  public static void run(String scheduleFile,String networkFile,String coordinateSystem,String outputFolder){  setLogLevels();  log.info("Reading schedule...");  TransitSchedule schedule=ScheduleTools.readTransitSchedule(scheduleFile);  log.info("Reading network...");  Network network=NetworkTools.readNetwork(networkFile);  log.info("Run TransitScheduleValidator...");  TransitScheduleValidator.ValidationResult v=TransitScheduleValidator.validateAll(schedule,network);  TransitScheduleValidator.printResult(v);  log.info("Start plausibility check...");  PlausibilityCheck check=new PlausibilityCheck(schedule,network,coordinateSystem);  check.runCheck();  if (!outputFolder.endsWith("/")) {    outputFolder=outputFolder + "/";  }  new File(outputFolder).mkdir();  new File(outputFolder + "shp/").mkdir();  new File(outputFolder + "shp/schedule/").mkdir();  new File(outputFolder + "shp/warnings/").mkdir();  check.writeCsv(outputFolder + "allPlausibilityWarnings.csv");  check.writeResultShapeFiles(outputFolder + "shp/warnings/");  ScheduleShapeFileWriter schedule2shp=new ScheduleShapeFileWriter(schedule,network,coordinateSystem);  schedule2shp.routes2Polylines(outputFolder + "shp/schedule/TransitRoutes.shp");  schedule2shp.stopFacilities2Shapes(outputFolder + "shp/schedule/StopFacilities.shp",outputFolder + "shp/schedule/StopFacilities_refLinks.shp");  StopFacilityHistogram histogram=new StopFacilityHistogram(schedule);  histogram.createCsv(outputFolder + "stopfacilities.csv");  histogram.createPng(outputFolder + "stopfacilities_histogram.png");}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node employeeNode;  NodeList childList;  DocumentFragment newdocFragment;  Node newChild1;  Node newChild2;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  Node appendedChild;  int nodeType;  java.util.List expected=new java.util.ArrayList();  expected.add("em");  expected.add("strong");  expected.add("code");  expected.add("sup");  expected.add("var");  expected.add("acronym");  expected.add("br");  expected.add("b");  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("p");  employeeNode=elementList.item(1);  childList=employeeNode.getChildNodes();  newdocFragment=doc.createDocumentFragment();  newChild1=doc.createElement("br");  newChild2=doc.createElement("b");  appendedChild=newdocFragment.appendChild(newChild1);  appendedChild=newdocFragment.appendChild(newChild2);  appendedChild=employeeNode.appendChild(newdocFragment);  for (int indexN100A2=0; indexN100A2 < childList.getLength(); indexN100A2++) {    child=(Node)childList.item(indexN100A2);    nodeType=(int)child.getNodeType();    if (equals(1,nodeType)) {      childName=child.getNodeName();      result.add(childName);    }  }  assertEqualsAutoCase("element","nodeNames",expected,result);}  }
class C{  public LocationManager on(Activity activity){  this.activity=activity;  return this;}  }
class C{  @SuppressWarnings("unchecked") public static <T>void sort(List<T> list,Comparator<? super T> comparator){  T[] array=list.toArray((T[])new Object[list.size()]);  Arrays.sort(array,comparator);  int i=0;  ListIterator<T> it=list.listIterator();  while (it.hasNext()) {    it.next();    it.set(array[i++]);  }}  }
class C{  private void init(){  stateMachine.init(executor);}  }
class C{  public void displayState(){  log.debug("displayState");  if (namedMemory == null) {    return;  }  _model.setSelectedItem(getMemory().getValue());}  }
class C{  public Object nextMeta() throws JSONException {  char c;  char q;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped meta tag");case '<':  return XML.LT;case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return Boolean.TRUE;}}default :for (; ; ) {c=next();if (Character.isWhitespace(c)) {return Boolean.TRUE;}switch (c) {case 0:case '<':case '>':case '/':case '=':case '!':case '?':case '"':case '\'':back();return Boolean.TRUE;}}}}  }
class C{  public Individual newIndividual(final EvolutionState state,final DataInput dataInput) throws IOException {  Individual newind=(Individual)(i_prototype.clone());  newind.fitness=(Fitness)(f_prototype.clone());  newind.evaluated=false;  newind.species=this;  newind.readIndividual(state,dataInput);  return newind;}  }
class C{  public Element store(Object o){  MemoryInputIcon p=(MemoryInputIcon)o;  Element element=new Element("memoryInputIcon");  element.setAttribute("colWidth","" + p.getNumColumns());  element.setAttribute("memory",p.getNamedMemory().getName());  storeCommonAttributes(p,element);  storeTextInfo(p,element);  element.setAttribute("class","jmri.jmrit.display.configurexml.MemoryInputIconXml");  return element;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public ScriptException(String message,String fileName,int lineNumber){  super(message);  this.fileName=fileName;  this.lineNumber=lineNumber;  this.columnNumber=-1;}  }
class C{  @Override public void compileAndExecute(IHyracksClientConnection hcc,IHyracksDataset hdc,ResultDelivery resultDelivery) throws Exception {  compileAndExecute(hcc,hdc,resultDelivery,new Stats());}  }
class C{  public Matrix3d m21(double m21){  this.m21=m21;  return this;}  }
class C{  @Override public boolean onOptionsItemSelected(final MenuItem item){  if (item.getItemId() == android.R.id.home) {    Intent intent=new Intent(getApplication(),MainActivity.class);    intent.addFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);    NavUtils.navigateUpTo(this,intent);    return true;  }  return super.onOptionsItemSelected(item);}  }
class C{  public static void overScrollBy(final com.handmark.pulltorefresh.library.PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public static boolean isWhiteSpace(String s){  if (null != s) {    int n=s.length();    for (int i=0; i < n; i++) {      if (!isWhiteSpace(s.charAt(i)))       return false;    }  }  return true;}  }
class C{  public void write(String s) throws IOException {  int n=s.length();  for (int i=0; i < n; i++) {    m_os.write(s.charAt(i));  }}  }
class C{  public Pkcs12SignatureToken(char[] password,String pkcs12FilePath){  this(password,new File(pkcs12FilePath));}  }
class C{  public void testBug16277() throws Exception {  createTable("testBug16277","(field1 BIGINT, field2 BIGINT UNSIGNED)");  ResultSetMetaData rsmd=this.stmt.executeQuery("SELECT field1, field2 FROM testBug16277").getMetaData();  assertEquals("java.lang.Long",rsmd.getColumnClassName(1));  assertEquals("java.math.BigInteger",rsmd.getColumnClassName(2));}  }
class C{  private void processAnnotations(){  try {    Map<String,String> annotations=AnnotationUtil.parseAnnotations(job_comment);    if (annotations.containsKey(JobAnnotations.JOB_TIMEOUT.name())) {      job_timeout=AnnotationUtil.parseValue(JobAnnotations.JOB_TIMEOUT,annotations.get(JobAnnotations.JOB_TIMEOUT.name()),Long.class);    }    if (annotations.containsKey(JobAnnotations.EMAIL_ON.name())) {      for (      String email_on_string : AnnotationUtil.parseValue(JobAnnotations.EMAIL_ON,annotations.get(JobAnnotations.EMAIL_ON.name()),String.class).split(";")) {        email_on.add(JobStatus.valueOf(email_on_string));      }    }    if (annotations.containsKey(JobAnnotations.EMAIL_TO.name())) {      email_to=AnnotationUtil.parseValue(JobAnnotations.EMAIL_TO,annotations.get(JobAnnotations.EMAIL_TO.name()),String.class).split(";");    }    if (annotations.containsKey(JobAnnotations.EMAIL_SUBJECT.name())) {      email_subject=AnnotationUtil.parseValue(JobAnnotations.EMAIL_SUBJECT,annotations.get(JobAnnotations.EMAIL_SUBJECT.name()),String.class);    }    if (annotations.containsKey(JobAnnotations.EMAIL_BODY.name())) {      email_body=AnnotationUtil.parseValue(JobAnnotations.EMAIL_BODY,annotations.get(JobAnnotations.EMAIL_BODY.name()),String.class);    }  } catch (  Exception e) {    Config.INSTANCE.logger.error("An issue with the annotations on job_id: " + job_id + " has stopped them from being processed.");  }}  }
class C{  public int add(final String code){  return addHelper(code,null);}  }
class C{  protected void error(String msg,Object[] args) throws javax.xml.transform.TransformerException {  String fmsg=XSLMessages.createXPATHMessage(msg,args);{    throw new XPathException(fmsg,this);  }}  }
class C{  private Consumer<ExampleTaskServiceState> subStageSetter(SubStage subStage){  return null;}  }
class C{  public Ed25519GroupElement toP3(){  return this.toCoordinateSystem(CoordinateSystem.P3);}  }
class C{  public static void v(String tag,String s){  if (LOG.VERBOSE >= LOGLEVEL)   Log.v(tag,s);}  }
class C{  public void testRemoveNamedItemNS1() throws Throwable {  Document doc;  NamedNodeMap attributes;  Node element;  Attr attribute;  NodeList elementList;  doc=(Document)load("staffNS",builder);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  element=elementList.item(1);  attributes=element.getAttributes();  attribute=(Attr)attributes.removeNamedItemNS("http://www.nist.gov","domestic");  attribute=(Attr)attributes.getNamedItemNS("http://www.nist.gov","domestic");  assertNull("namednodemapremovenameditemns01",attribute);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case FunctionblockPackage.PARAM__MULTIPLICITY:    setMultiplicity((Boolean)newValue);  return;case FunctionblockPackage.PARAM__NAME:setName((String)newValue);return;case FunctionblockPackage.PARAM__DESCRIPTION:setDescription((String)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public int compareTo(Role o){  if ((o == null) || !(o instanceof InternalRole)) {    throw new ClassCastException(LocalizedStrings.InternalRole_INTERNALROLECOMPARETO_COMPARISON_BETWEEN_DIFFERENT_CLASSES.toLocalizedString());  }  InternalRole other=(InternalRole)o;  return this.name.compareTo(other.name);}  }
class C{  public EventConsumerTask(InMemoryTransactionalQueue queue,long expectedEvents){  this.queue=queue;  this.expectedEvents=expectedEvents;}  }
class C{  public Allele allele(){  return mVariant.allele(mAlleleId);}  }
class C{  public Stream<Tuple2od<U>> similarUsers(U u){  return similarUsers(user2uidx(u)).map(null);}  }
class C{  @Override public boolean storesLowerCaseIdentifiers() throws SQLException {  debugCodeCall("storesLowerCaseIdentifiers");  String m=getMode();  return m.equals("MySQL");}  }
class C{  private long createDiscount(Organization organization,BigDecimal value,Long startTime,Long endTime) throws Exception {  Discount discount=new Discount();  organization=mgr.getReference(Organization.class,organization.getKey());  discount.setValue(value);  discount.setStartTime(startTime);  discount.setEndTime(endTime);  discount.setOrganizationReference(organization.getSources().get(0));  mgr.persist(discount);  final long key=discount.getKey();  return key;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.EXPORTED_VARIABLE_DECLARATION__DEFINED_VARIABLE:    setDefinedVariable((TVariable)null);  return;}super.eUnset(featureID);}  }
class C{  public boolean isQuoteSensitive(){  return quoteSensitive;}  }
class C{  public static void openUrl(String url){  if (StringUtils.isNotBlank(url)) {    if (Raptor.getInstance().getPreferences().getBoolean(PreferenceKeys.APP_OPEN_LINKS_IN_EXTERNAL_BROWSER)) {      openExternalUrl(url);    } else {      openInternalUrl(url);    }  }}  }
class C{  public void delete() throws IOException {  cache.delete();}  }
class C{  public int hashCode(){  int total=0;  Iterator it=createEntrySetIterator();  while (it.hasNext()) {    total+=it.next().hashCode();  }  return total;}  }
class C{  public String prettyPrint(){  return prettyPrint(null);}  }
class C{  private Multiplication(){}  }
class C{  private static final boolean compareAndSetNext(Node node,Node expect,Node update){  return unsafe.compareAndSwapObject(node,nextOffset,expect,update);}  }
class C{  private DataSource lookupDataSource(String key) throws NamingException {  final InitialContext ctx=new InitialContext();  if (key != null) {    return (DataSource)ctx.lookup(key);  }  return null;}  }
class C{  public SwingTerminalFrame(String title,TerminalEmulatorDeviceConfiguration deviceConfiguration,SwingTerminalFontConfiguration fontConfiguration,TerminalEmulatorColorConfiguration colorConfiguration,TerminalEmulatorAutoCloseTrigger... autoCloseTriggers){  this(title,null,deviceConfiguration,fontConfiguration,colorConfiguration,autoCloseTriggers);}  }
class C{  @Override public boolean isWritable(int column) throws SQLException {  try {    debugCodeCall("isWritable",column);    checkColumnIndex(column);    return true;  } catch (  Exception e) {    throw logAndConvert(e);  }}  }
class C{  public void hide(){  if (popupMenu != null) {    popupMenu.removeFromParent();    popupMenu=null;  }  if (lockLayer != null) {    lockLayer.removeFromParent();    lockLayer=null;  }}  }
class C{  @Override public double computeLeftNeighborContribution(int leftNodeDegree){  return 1.0;}  }
class C{  public void encodeSnmpPdu(SnmpPdu pdu,int maxDataLength) throws SnmpStatusException, SnmpTooBigException {  SnmpPduPacket pdupacket=(SnmpPduPacket)pdu;  version=pdupacket.version;  community=pdupacket.community;  address=pdupacket.address;  port=pdupacket.port;  data=new byte[maxDataLength];  try {    BerEncoder benc=new BerEncoder(data);    benc.openSequence();    encodeVarBindList(benc,pdupacket.varBindList);switch (pdupacket.type) {case pduGetRequestPdu:case pduGetNextRequestPdu:case pduInformRequestPdu:case pduGetResponsePdu:case pduSetRequestPdu:case pduV2TrapPdu:case pduReportPdu:      SnmpPduRequest reqPdu=(SnmpPduRequest)pdupacket;    benc.putInteger(reqPdu.errorIndex);  benc.putInteger(reqPdu.errorStatus);benc.putInteger(reqPdu.requestId);break;case pduGetBulkRequestPdu:SnmpPduBulk bulkPdu=(SnmpPduBulk)pdupacket;benc.putInteger(bulkPdu.maxRepetitions);benc.putInteger(bulkPdu.nonRepeaters);benc.putInteger(bulkPdu.requestId);break;case pduV1TrapPdu:SnmpPduTrap trapPdu=(SnmpPduTrap)pdupacket;benc.putInteger(trapPdu.timeStamp,SnmpValue.TimeticksTag);benc.putInteger(trapPdu.specificTrap);benc.putInteger(trapPdu.genericTrap);if (trapPdu.agentAddr != null) benc.putOctetString(trapPdu.agentAddr.byteValue(),SnmpValue.IpAddressTag); else benc.putOctetString(new byte[0],SnmpValue.IpAddressTag);benc.putOid(trapPdu.enterprise.longValue());break;default :throw new SnmpStatusException("Invalid pdu type " + String.valueOf(pdupacket.type));}benc.closeSequence(pdupacket.type);dataLength=benc.trim();} catch (ArrayIndexOutOfBoundsException x) {throw new SnmpTooBigException();}}  }
class C{  private void addBulletinsToInstance(){  Bulletin bulletin=mock(Bulletin.class);  when(bulletin.getTimestamp()).thenReturn(new Date(1464019245000L));  when(bulletin.getMessage()).thenReturn("Bulletin message");  List<Bulletin> bulletinList=new ArrayList<>();  bulletinList.add(bulletin);  when(bulletinRepo.findBulletinsForController()).thenReturn(bulletinList);}  }
class C{  public ChainingXmlWriter xmlVersion(String xmlVersion){  outputProperties.setXmlVersion(xmlVersion);  return this;}  }
class C{  @Override public int graphType(){  return Drawable.BayesNet;}  }
class C{  protected double groupDelay(double omega){  if (T == null)   computeTransferFunction();  return T.groupDelay(omega);}  }
class C{  public void testDelimitedMigration(){  Configuration configuration=new Configuration.Builder(getContext()).setSqlParser(Configuration.SQL_PARSER_DELIMITED).setDatabaseName("migration.db").setDatabaseVersion(2).create();  DatabaseHelper helper=new DatabaseHelper(configuration);  SQLiteDatabase db=helper.getWritableDatabase();  helper.onUpgrade(db,1,2);}  }
class C{  public boolean isReadOnly(){  Object oo=get_Value(COLUMNNAME_IsReadOnly);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void testSetBitNegativeInside2(){  byte aBytes[]={1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int number=44;  byte rBytes[]={-2,127,-57,-101,1,75,-90,-46,-92,-4,14,-36,-26};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.setBit(number);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  public void dropConstraints(AbstractSession session,Writer schemaWriter) throws EclipseLinkException {  if (schemaWriter == null) {    dropConstraintsOnDatabase(session);  } else {    if (session.getPlatform().supportsForeignKeyConstraints()) {      for (      ForeignKeyConstraint foreignKey : getForeignKeyMap().values()) {        buildConstraintDeletionWriter(session,foreignKey,schemaWriter);        writeLineSeperator(session,schemaWriter);      }    }    if (session.getPlatform().supportsUniqueKeyConstraints() && (!session.getPlatform().requiresUniqueConstraintCreationOnTableCreate())) {      for (      UniqueKeyConstraint uniqueKey : getUniqueKeys()) {        buildUniqueConstraintDeletionWriter(session,uniqueKey,schemaWriter);        writeLineSeperator(session,schemaWriter);      }    }  }}  }
class C{  protected void drawRangeCrosshair(Graphics2D g2,Rectangle2D dataArea,PlotOrientation orientation,double value,ValueAxis axis,Stroke stroke,Paint paint){  if (!axis.getRange().contains(value)) {    return;  }  Object saved=g2.getRenderingHint(RenderingHints.KEY_STROKE_CONTROL);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,RenderingHints.VALUE_STROKE_NORMALIZE);  Line2D line;  if (orientation == PlotOrientation.HORIZONTAL) {    double xx=axis.valueToJava2D(value,dataArea,RectangleEdge.BOTTOM);    line=new Line2D.Double(xx,dataArea.getMinY(),xx,dataArea.getMaxY());  } else {    double yy=axis.valueToJava2D(value,dataArea,RectangleEdge.LEFT);    line=new Line2D.Double(dataArea.getMinX(),yy,dataArea.getMaxX(),yy);  }  g2.setStroke(stroke);  g2.setPaint(paint);  g2.draw(line);  g2.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL,saved);}  }
class C{  public Object object(){  if (m_DTMXRTreeFrag.getXPathContext() != null)   return new org.apache.xml.dtm.ref.DTMNodeIterator((DTMIterator)(new org.apache.xpath.NodeSetDTM(m_dtmRoot,m_DTMXRTreeFrag.getXPathContext().getDTMManager()))); else   return super.object();}  }
class C{  public Matrix4x3d translationRotateScale(Vector3fc translation,Quaternionfc quat,Vector3fc scale){  return translationRotateScale(translation.x(),translation.y(),translation.z(),quat.x(),quat.y(),quat.z(),quat.w(),scale.x(),scale.y(),scale.z());}  }
class C{  public HttpsConfigurator(SSLContext context){  if (context == null) {    throw new NullPointerException("null SSLContext");  }  this.context=context;}  }
class C{  public int stepToOuterScreenEvent(){  FormIndex index=stepIndexOut(getFormIndex());  int currentEvent=getEvent();  while (index != null && getEvent(index) == FormEntryController.EVENT_GROUP) {    index=stepIndexOut(index);  }  if (index == null) {    jumpToIndex(FormIndex.createBeginningOfFormIndex());  } else {    if (currentEvent == FormEntryController.EVENT_REPEAT) {      jumpToIndex(index);    } else {      index=stepIndexOut(index);      if (index == null) {        jumpToIndex(FormIndex.createBeginningOfFormIndex());      } else {        jumpToIndex(index);      }    }  }  return getEvent();}  }
class C{  private void addEmptyRows(List<String> rawItems){  List<String> emptyRows=Arrays.asList(EMPTY_STRING,EMPTY_STRING);  List<String> items=new ArrayList<String>();  items.addAll(emptyRows);  items.addAll(rawItems);  items.addAll(emptyRows);  this.items=items;}  }
class C{  private void push(JSONObject jo) throws JSONException {  if (this.top >= maxdepth) {    throw new JSONException("Nesting too deep.");  }  this.stack[this.top]=jo;  this.mode=jo == null ? 'a' : 'k';  this.top+=1;}  }
class C{  public TaskBuilder delay(long delay){  this.delay=delay;  return this;}  }
class C{  public static <T>LazyPSetX<T> fromIterable(Iterable<T> it){  return fromIterable(Reducers.toPSet(),it);}  }
class C{  public final short readShort() throws IOException {  int ch1=in.read();  int ch2=in.read();  if ((ch1 | ch2) < 0)   throw new EOFException();  return (short)((ch1 << 8) + (ch2 << 0));}  }
class C{  public static CCJumpBy action(float time,CGPoint pos,float height,int jumps){  return new CCJumpBy(time,pos,height,jumps);}  }
class C{  @PostConstruct public void initialize(){  LOGGER.debug("SampleController @PostConstruct");  try {    platformService=APPlatformServiceFactory.getInstance();  } catch (  IllegalStateException e) {    LOGGER.error(e.getMessage());    throw e;  }}  }
class C{  public void call() throws IOException {  writeCode(CALL);  out.writeUI16(0);}  }
class C{  public float length(){  return FastMath.sqrt(lengthSquared());}  }
class C{  public MarkdownDialog(Dialog owner){  super(owner);}  }
class C{  public Layer createLayerFromGeoJSON(GeoJSONObject object){  if (object == null) {    String message=Logging.getMessage("nullValue.ObjectIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  RenderableLayer layer=new RenderableLayer();  addGeoJSONGeometryToLayer(object,layer);  return layer;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-25 14:38:21.780 -0400",hash_original_method="D8BB1AB0E92CDF8DD026A00C992F4645",hash_generated_method="C913745F5E264D78361CBE26507A8D30") public void resetAcousticState(){  SR_AcousticStateReset(mRecognizer);}  }
class C{  public static LineString[] toLineStringArray(Collection lineStrings){  LineString[] lineStringArray=new LineString[lineStrings.size()];  return (LineString[])lineStrings.toArray(lineStringArray);}  }
class C{  @Override public <T extends ServiceDocument>List<String> queryDocumentsForLinks(Class<T> documentType,ImmutableMap<String,String> terms) throws BadRequestException, DocumentNotFoundException, TimeoutException, InterruptedException {  checkNotNull(documentType,"Cannot query documents with null documentType");  QueryTask.QuerySpecification spec=QueryTaskUtils.buildQuerySpec(documentType,terms);  Operation result=postToBroadcastQueryService(spec);  Set<String> documentLinks=QueryTaskUtils.getBroadcastQueryDocumentLinks(result);  if (documentLinks.size() <= 0) {    return ImmutableList.of();  }  return ImmutableList.copyOf(documentLinks);}  }
class C{  public static String replaceHtmlEntities(final String s){  final StringBuilder t=new StringBuilder();  for (int i=0, n=s.length(); i < n; i++) {    final char c=s.charAt(i);    if (c == '&') {      final int j=s.indexOf(';',i);      if (j >= 0) {        final Character unicode=HTML_ENTITY_TO_UNICODE_MAP.get(s.substring(i + 1,j));        if (unicode != null) {          t.append((char)unicode);          i=j;          continue;        }      }    }    t.append(c);  }  return t.toString();}  }
class C{  public static void checkRegistration(final ISetting<?> setting,final JComponent settingComponent){  if (setting.getViewHints().isEditRequiresRegistration() && !LEnv.REG_MANAGER.isOk()) {    settingComponent.setEnabled(false);    settingComponent.setToolTipText("Editing / changing this field requires registration!");  }}  }
class C{  public static String translateScriptProtect(int scriptProtect){  if (scriptProtect == ApplicationContext.SCRIPT_PROTECT_NONE)   return "none";  if (scriptProtect == ApplicationContext.SCRIPT_PROTECT_ALL)   return "all";  Array arr=new ArrayImpl();  if ((scriptProtect & ApplicationContext.SCRIPT_PROTECT_CGI) > 0)   arr.appendEL("cgi");  if ((scriptProtect & ApplicationContext.SCRIPT_PROTECT_COOKIE) > 0)   arr.appendEL("cookie");  if ((scriptProtect & ApplicationContext.SCRIPT_PROTECT_FORM) > 0)   arr.appendEL("form");  if ((scriptProtect & ApplicationContext.SCRIPT_PROTECT_URL) > 0)   arr.appendEL("url");  try {    return ListUtil.arrayToList(arr,",");  } catch (  PageException e) {    return "none";  }}  }
class C{  private boolean isValidSelection(){  ITextSelection selection=getSelection();  if (selection.isEmpty())   return false;  int offset=selection.getOffset();  int length=selection.getLength();  IDocument document=getDocument();  if (document == null)   return false;  try {    IRegion firstLine=document.getLineInformationOfOffset(offset);    int lineOffset=firstLine.getOffset();    if (length == 0)     return document.get(lineOffset,offset - lineOffset).trim().length() == 0; else     return false;  } catch (  BadLocationException e) {  }  return false;}  }
class C{  public BaseFilterView(final String id,final String code,final String head,final List<Pair<Pair<String,Integer>,PageParameters>> linkList,final int recordLimit){  super(id);  this.linkList=cutTheTail(linkList,recordLimit);  this.code=code;  this.head=head;}  }
class C{  protected void deleteMRP(int AD_Client_ID,int AD_Org_ID,int S_Resource_ID,int M_Warehouse_ID,int M_Product_ID,String trxName) throws SQLException {  StringBuilder sql=new StringBuilder("DELETE FROM AD_Note WHERE ");  sql.append(getDeleteSQLWhere("mrp","mrp." + MPPMRP.COLUMNNAME_PP_MRP_ID + " = Record_ID AND AD_Table_ID="+ MPPMRP.Table_ID,AD_Client_ID,AD_Org_ID,null,null,M_Product_ID,null)).append(" AND (Reference LIKE '%M_Warehouse_ID->" + M_Warehouse_ID + "%') OR  (Reference LIKE '%M_Product_ID->"+ M_Product_ID+ "%' )");  ArrayList<Object> myParameters=new ArrayList(parameters);  DB.executeUpdateEx(sql.toString(),myParameters.toArray(),trxName);  StringBuilder whereClause=new StringBuilder(getDeleteSQLWhere(MPPMRP.Table_Name,"mrp." + MPPMRP.COLUMNNAME_PP_MRP_ID + " = "+ MPPMRP.COLUMNNAME_PP_MRP_ID,AD_Client_ID,AD_Org_ID,M_Warehouse_ID,S_Resource_ID,M_Product_ID,null));  myParameters=new ArrayList(parameters);  sql=new StringBuilder();  sql.append("DELETE FROM PP_MRP WHERE ").append(whereClause.toString()).append(" AND ").append(MPPMRP.COLUMNNAME_OrderType).append("=? ").append("AND ").append(MPPMRP.COLUMNNAME_DocStatus).append("=? ");  myParameters.add(MPPMRP.ORDERTYPE_ManufacturingOrder);  myParameters.add(MPPMRP.DOCSTATUS_Closed);  DB.executeUpdateEx(sql.toString(),myParameters.toArray(),trxName);  String where=getDeleteSQLWhere(MPPOrder.Table_Name,"mrp." + MPPMRP.COLUMNNAME_PP_Order_ID + " = "+ MPPMRP.COLUMNNAME_PP_Order_ID+ " AND mrp."+ MPPMRP.COLUMNNAME_PP_Order_BOMLine_ID+ " IS NULL ",AD_Client_ID,AD_Org_ID,M_Warehouse_ID,S_Resource_ID,M_Product_ID,null) + " AND DocStatus=?";  myParameters=new ArrayList(parameters);  myParameters.add(MPPMRP.DOCSTATUS_Drafted);  deletePO(MPPOrder.Table_Name,where,trxName,myParameters.toArray());  whereClause=new StringBuilder(getDeleteSQLWhere(MPPMRP.Table_Name,"mrp." + MPPMRP.COLUMNNAME_PP_MRP_ID + " = "+ MPPMRP.COLUMNNAME_PP_MRP_ID,AD_Client_ID,AD_Org_ID,M_Warehouse_ID,null,M_Product_ID,null));  myParameters=new ArrayList(parameters);  sql=new StringBuilder();  sql.append("DELETE FROM PP_MRP WHERE ").append(whereClause.toString()).append(" AND ").append(MPPMRP.COLUMNNAME_OrderType).append("=? ").append("AND ").append(MPPMRP.COLUMNNAME_DocStatus).append("=? ");  myParameters.add(MPPMRP.ORDERTYPE_PurchaseOrder);  myParameters.add(MPPMRP.DOCSTATUS_Closed);  DB.executeUpdateEx(sql.toString(),myParameters.toArray(),trxName);  where=getDeleteSQLWhere(MRequisitionLine.Table_Name,"mrp." + MPPMRP.COLUMNNAME_M_RequisitionLine_ID + " = "+ MPPMRP.COLUMNNAME_M_RequisitionLine_ID,AD_Client_ID,AD_Org_ID,M_Warehouse_ID,null,M_Product_ID,null) + " AND EXISTS (SELECT 1 FROM M_Requisition r WHERE r.M_Requisition_ID = M_Requisition_ID AND DocStatus = ?)";  myParameters=new ArrayList(parameters);  myParameters.add(MPPMRP.DOCSTATUS_Drafted);  deletePO(MRequisitionLine.Table_Name,where,trxName,myParameters.toArray());  if (isSynchronize()) {    where=getDeleteSQLWhere(MDDOrderLine.Table_Name,"mrp." + MPPMRP.COLUMNNAME_DD_OrderLine_ID + " = "+ MPPMRP.COLUMNNAME_DD_OrderLine_ID,AD_Client_ID,AD_Org_ID,null,null,M_Product_ID,MPPMRP.TYPEMRP_Supply) + " AND EXISTS (SELECT 1 FROM  M_Locator l WHERE l.M_Locator_ID=M_LocatorTo_ID AND l.M_Warehouse_ID=? ) " + " AND EXISTS (SELECT 1 FROM  DD_Order o WHERE o.DD_Order_ID=DD_OrderLine.DD_Order_ID AND DocStatus = ?)";    myParameters=new ArrayList(parameters);    myParameters.add(M_Warehouse_ID);    myParameters.add(MPPMRP.DOCSTATUS_Drafted);    deletePO(MDDOrderLine.Table_Name,where,trxName,myParameters.toArray());  }  whereClause=new StringBuilder(getDeleteSQLWhere(MPPMRP.Table_Name,"mrp." + MPPMRP.COLUMNNAME_PP_MRP_ID + " = "+ MPPMRP.COLUMNNAME_PP_MRP_ID,AD_Client_ID,AD_Org_ID,M_Warehouse_ID,null,M_Product_ID,MPPMRP.TYPEMRP_Supply));  sql=new StringBuilder();  sql.append("UPDATE PP_MRP SET IsAvailable ='Y' WHERE ").append(whereClause.toString());  DB.executeUpdateEx(sql.toString(),parameters.toArray(),trxName);  sql=new StringBuilder("DELETE FROM PP_MRP_Detail WHERE NOT EXISTS (SELECT 1 FROM PP_MRP WHERE PP_MRP_ID=PP_MRP_Detail.MRP_Supply_ID)");  DB.executeUpdateEx(sql.toString(),trxName);}  }
class C{  public void testCase5(){  byte aBytes[]={-127,100,56,7,98,-1,39,-128,127};  byte bBytes[]={-127,100,56,7,98,-1,39,-128,127,1,2,3,4,5};  int aSign=-1;  int bSign=1;  byte rBytes[]={0};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.divide(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",0,result.signum());}  }
class C{  protected void sequence_TAnonymousFormalParameterList_TStructMethod(ISerializationContext context,TStructMethod semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  public static RedeemData of(ECKey key,Script program){  checkArgument(program.isSentToAddress() || program.isSentToRawPubKey());  return key != null ? new RedeemData(Collections.singletonList(key),program) : null;}  }
class C{  public synchronized Class defineClass(String name,byte[] bytecode,ProtectionDomain domain){  inDefine=true;  Class c=defineClass(name,bytecode,0,bytecode.length,domain);  loadedClasses.put(name,c);  resolveClass(c);  inDefine=false;  return c;}  }
class C{  @JsonValue public String value(){  return this.toString();}  }
class C{  public void removeVetoableChangeListener(String propertyName,VetoableChangeListener in_vcl){  beanContextChildSupport.removeVetoableChangeListener(propertyName,in_vcl);}  }
class C{  public int size(){  return _myMessageSize;}  }
class C{  public static Text createText(Composite parent,int style,int hspan,String text){  Text t=new Text(parent,style);  t.setFont(parent.getFont());  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  t.setLayoutData(gd);  t.setText(text);  return t;}  }
class C{  public static void applyPinchZoomImage(ImageView mImageView){  mImageView.setOnTouchListener(new PinchZoom());}  }
class C{  public boolean addToPendingList(DownloadInfoRunnable downloadInfoRunnable){  Logger.d("download-trace","added to pendingList: " + downloadInfoRunnable.getDownload().getName());  return mPendingList.add(downloadInfoRunnable);}  }
class C{  public static boolean mayBeAliased(LocationOperand op1,LocationOperand op2){  if (op1 == null || op2 == null)   return true;  if (op1.type != op2.type)   return false;  if (op1.fieldRef != null) {    return !op1.fieldRef.definitelyDifferent(op2.fieldRef);  } else {    return arrayMayBeAliased(op1.arrayElementType,op2.arrayElementType) && (op1.JTOCoffset.EQ(op2.JTOCoffset)) && (op1.spillOffset == op2.spillOffset);  }}  }
class C{  public void readyForEvents(ClientProxyMembershipID proxyId){  CacheClientProxy proxy=getClientProxy(proxyId);  if (proxy == null) {  } else {    proxy.startOrResumeMessageDispatcher(false);  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case TypeRefsPackage.STRUCTURAL_TYPE_REF__AST_STRUCTURAL_MEMBERS:    getAstStructuralMembers().clear();  return;case TypeRefsPackage.STRUCTURAL_TYPE_REF__STRUCTURAL_TYPE:setStructuralType((TStructuralType)null);return;case TypeRefsPackage.STRUCTURAL_TYPE_REF__GEN_STRUCTURAL_MEMBERS:getGenStructuralMembers().clear();return;case TypeRefsPackage.STRUCTURAL_TYPE_REF__POSTPONED_SUBSTITUTIONS:getPostponedSubstitutions().clear();return;}super.eUnset(featureID);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.440 -0400",hash_original_method="4AD28164B3ED3B60A2412B4E7DEDB826",hash_generated_method="7B97829D7327FE16832AC140D8159784") @Override public int read(char[] chars) throws IOException {  return read(chars,0,chars.length);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @Override public void printVariable(Vertex variable,Writer writer,String indent,Set<Vertex> elements,Network network) throws IOException {  String name=variable.getName();  if (name != null && (name.equals("input") || name.equals("sentence") || name.equals("conversation")|| name.equals("speaker")|| name.equals("target"))) {    return;  }  boolean hasComments=printComments(variable,writer,indent,false,network);  Iterator<Relationship> iterator=variable.allRelationships();  if (!hasComments && variable.totalRelationships() <= 1) {    return;  }  List<Vertex> localElements=new ArrayList<Vertex>();  writer.write(indent);  writer.write("var ");  printElement(variable,writer,indent,null,null,elements,network);  writer.write(" {\r\n");  writer.write(indent);  while (iterator.hasNext()) {    Relationship relationship=iterator.next();    Vertex type=relationship.getType();    Vertex target=relationship.getTarget();    if ((type.is(Primitive.INSTANTIATION) && (target.is(Primitive.VARIABLE)))) {      continue;    }    if (type.is(Primitive.COMMENT)) {      continue;    }    if (target.instanceOf(Primitive.VARIABLE) && !elements.contains(target)) {      localElements.add(target);      elements.add(target);    }    if (type.is(Primitive.EQUALS)) {      writer.write("\t");      if (relationship.isInverse()) {        writer.write(" : ! ");      } else {        writer.write(" : ");      }      printElement(target,writer,indent,null,null,elements,network);    } else {      writer.write("\t");      if (type.isPrimitive()) {        writer.write(((Primitive)type.getData()).getIdentity());      } else {        printElement(type,writer,indent,null,null,elements,network);      }      if (relationship.isInverse()) {        writer.write(" : ! ");      } else {        writer.write(" : ");      }      printElement(target,writer,indent,null,null,elements,network);    }    writer.write(";\r\n");    writer.write(indent);  }  writer.write("}\r\n");  writer.write("\r\n");  for (  Vertex element : localElements) {    printVariable(element,writer,indent,elements,network);  }}  }
class C{  public final boolean hasResponseBody(){  int responseCode=responseHeaders.getHeaders().getResponseCode();  if (method.equals("HEAD")) {    return false;  }  if ((responseCode < HTTP_CONTINUE || responseCode >= 200) && responseCode != HttpURLConnectionImpl.HTTP_NO_CONTENT && responseCode != HttpURLConnectionImpl.HTTP_NOT_MODIFIED) {    return true;  }  if (responseHeaders.getContentLength() != -1 || responseHeaders.isChunked()) {    return true;  }  return false;}  }
class C{  private void updateButtons(){  btnDelColumn.setEnabled(false);  btnUpColumn.setEnabled(false);  btnDownColumn.setEnabled(false);  int index=tblColumns.getSelectionIndex();  if (index >= 0) {    btnDelColumn.setEnabled(true);    if (index > 0) {      btnUpColumn.setEnabled(true);    }    if (index < columnModels.size() - 1) {      btnDownColumn.setEnabled(true);    }  }}  }
class C{  @Override protected void doAction(){  try {    DCryptoStrength dCryptoStrength=new DCryptoStrength(frame);    dCryptoStrength.setLocationRelativeTo(frame);    dCryptoStrength.setVisible(true);  } catch (  Exception ex) {    DError.displayError(frame,ex);  }}  }
class C{  public boolean isExecuting(){  return this.numExecutions > this.getNumCompletions();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public String generateWorkflowStepToToRemoveVolumesFromExportMask(Workflow workflow,String previousStep,ExportGroup exportGroup,ExportMask exportMask,List<URI> volumesToRemove,ExportTaskCompleter completer){  URI exportGroupURI=exportGroup.getId();  String stepId=workflow.createStepId();  ExportTaskCompleter exportTaskCompleter;  if (completer != null) {    exportTaskCompleter=completer;    exportTaskCompleter.setOpId(stepId);  } else {    exportTaskCompleter=new ExportMaskRemoveVolumeCompleter(exportGroupURI,exportMask.getId(),volumesToRemove,stepId);  }  Workflow.Method removeVolumesFromExportMaskExecuteMethod=new Workflow.Method("doExportGroupToCleanVolumesInExportMask",exportGroupURI,exportMask.getId(),volumesToRemove,exportTaskCompleter);  stepId=workflow.createStep(EXPORT_MASK_CLEANUP_TASK,String.format("ExportMask to removeVolumes %s (%s)",exportMask.getMaskName(),exportMask.getId().toString()),previousStep,NullColumnValueGetter.getNullURI(),"storage-system",MaskingWorkflowEntryPoints.class,removeVolumesFromExportMaskExecuteMethod,null,stepId);  return stepId;}  }
class C{  public static BigInteger factorial(int n){  if (n < 0) {    throw new IllegalArgumentException(n + "<0");  } else   if (n < 2) {    return BigInteger.ONE;  }  BigInteger x=new BigInteger("" + n);  BigInteger result=x;  for (int i=n - 1; i >= 2; i--) {    x=x.subtract(BigInteger.ONE);    result=result.multiply(x);  }  return result;}  }
class C{  private void updatePreviousNode(){  if ((previousNodeAddress == null) || !myBreakpoints.contains(previousNodeAddress)) {    return;  }  final ViewNode node=nodeMap.get(previousNodeAddress);  final int count=breakpointCounter.get(previousNodeAddress);  if (count < 5) {    node.setColor(COLOR_FEW_HITS);  } else   if (count < 10) {    node.setColor(COLOR_SEVERAL_HITS);  } else {    node.setColor(COLOR_MANY_HITS);    final BreakpointManager breakpointManager=debugger.getBreakpointManager();    if (breakpointManager.hasBreakpoint(null,previousNodeAddress)) {      breakpointManager.removeBreakpoint(null,previousNodeAddress);      myBreakpoints.remove(previousNodeAddress);    }  }  try {    java.lang.Thread.sleep(100);  } catch (  final InterruptedException e) {    java.lang.Thread.currentThread().interrupt();  }}  }
class C{  public static void removeWhitelistedBlock(Block block){  whitelist.remove(block);}  }
class C{  public String toFormattedString(){  return "CUDA resource descriptor:\n    " + createString("\n    ");}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentgetelementsbytagnameNS01.class,args);}  }
class C{  public void removeAnimation(int reactTag,int animationID){  assertViewExists(reactTag,"removeAnimation");  mOperationsQueue.enqueueRemoveAnimation(animationID);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void disconnectAll(){  for (  final MqttAsyncConnection connection : getMqttConnections()) {    disconnectFromBroker(connection);  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:24.188 -0500",hash_original_method="08191F20EE47B985A8EBB31C0BB98A5A",hash_generated_method="D632B6A54660D3E9782C6BB45A6F40D1") ExpatParser(String encoding,ExpatReader xmlReader,boolean processNamespaces,String publicId,String systemId){  this.publicId=publicId;  this.systemId=systemId;  this.xmlReader=xmlReader;  this.encoding=encoding == null ? DEFAULT_ENCODING : encoding;  this.pointer=initialize(this.encoding,processNamespaces);}  }
class C{  public ScatterPlotOld(DataSet dataSet,ContinuousVariable yVariable,ContinuousVariable xVariable){  setDrawRegLine(false);  if (xVariable != null)   this.xVariable=xVariable; else {    for (int i=0; i < dataSet.getNumColumns(); i++) {      if (dataSet.getVariable(i) instanceof ContinuousVariable) {        this.xVariable=(ContinuousVariable)dataSet.getVariable(i);        break;      }    }  }  if (yVariable != null)   this.setyVariable(yVariable); else {    for (int i=0; i < dataSet.getNumColumns(); i++) {      if (dataSet.getVariable(i) instanceof ContinuousVariable) {        this.setyVariable((ContinuousVariable)dataSet.getVariable(i));        break;      }    }  }  int yIndex=dataSet.getColumn(yVariable);  int xIndex=dataSet.getColumn(xVariable);  if (yIndex == -1)   yIndex=0;  if (xIndex == -1)   xIndex=0;  setxData(new double[dataSet.getNumRows()]);  setyData(new double[dataSet.getNumRows()]);  xMin=Double.MAX_VALUE;  xMax=Double.MIN_VALUE;  yMin=Double.MAX_VALUE;  yMax=Double.MIN_VALUE;  for (int i=0; i < dataSet.getNumRows(); i++) {    getyData()[i]=dataSet.getDouble(i,yIndex);    getxData()[i]=dataSet.getDouble(i,xIndex);    if (getyData()[i] < yMin)     yMin=getyData()[i];    if (getyData()[i] > yMax)     yMax=getyData()[i];    if (getxData()[i] < xMin)     xMin=getxData()[i];    if (getxData()[i] > xMax)     xMax=getxData()[i];  }  this.setDataSet(dataSet);  setIndexSet(new Vector());  setComplementIndexSet(new Vector());  for (int i=0; i < dataSet.getNumRows(); i++)   getIndexSet().add(i);}  }
class C{  private static boolean canUseOpenInfo(Type type){  if (type instanceof GenericArrayType) {    return canUseOpenInfo(((GenericArrayType)type).getGenericComponentType());  } else   if (type instanceof Class<?> && ((Class<?>)type).isArray()) {    return canUseOpenInfo(((Class<?>)type).getComponentType());  }  return (!(type instanceof Class<?> && ((Class<?>)type).isPrimitive()));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.284 -0500",hash_original_method="528BFFCDF2670C473C5EA8B806C4B8BC",hash_generated_method="C00E472BAE58224EBBCCC1ED36C0A685") public static void cursorFillWindow(final Cursor cursor,int position,final CursorWindow window){  if (position < 0 || position >= cursor.getCount()) {    return;  }  window.acquireReference();  try {    final int oldPos=cursor.getPosition();    final int numColumns=cursor.getColumnCount();    window.clear();    window.setStartPosition(position);    window.setNumColumns(numColumns);    if (cursor.moveToPosition(position)) {      do {        if (!window.allocRow()) {          break;        }        for (int i=0; i < numColumns; i++) {          final int type=cursor.getType(i);          final boolean success;switch (type) {case Cursor.FIELD_TYPE_NULL:            success=window.putNull(position,i);          break;case Cursor.FIELD_TYPE_INTEGER:        success=window.putLong(cursor.getLong(i),position,i);      break;case Cursor.FIELD_TYPE_FLOAT:    success=window.putDouble(cursor.getDouble(i),position,i);  break;case Cursor.FIELD_TYPE_BLOB:{  final byte[] value=cursor.getBlob(i);  success=value != null ? window.putBlob(value,position,i) : window.putNull(position,i);  break;}default :case Cursor.FIELD_TYPE_STRING:{final String value=cursor.getString(i);success=value != null ? window.putString(value,position,i) : window.putNull(position,i);break;}}if (!success) {window.freeLastRow();break;}}position+=1;} while (cursor.moveToNext());}cursor.moveToPosition(oldPos);} catch (IllegalStateException e) {} finally {window.releaseReference();}}  }
class C{  @Override public Object replace(Object original,Object target,Object owner) throws HibernateException {  return original;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_CONSTRAINT_1__CONSTRAINT_BODY_1:    getConstraintBody_1().clear();  return;}super.eUnset(featureID);}  }
class C{  public int vsCircumcircle(DelaunayVertex[] simplex){  DelaunayVertex[] matrix=new DelaunayVertex[simplex.length + 1];  for (int i=0; i < simplex.length; i++) {    matrix[i]=simplex[i].extend(1,simplex[i].dot(simplex[i]));  }  matrix[simplex.length]=this.extend(1,this.dot(this));  double d=determinant(matrix);  int result=(d < 0) ? -1 : ((d > 0) ? +1 : 0);  if (content(simplex) < 0) {    result=-result;  }  return result;}  }
class C{  public static void replaceParametersWithArguments(GrCallExpression call,GrMethod method) throws IncorrectOperationException {  GrParameter[] parameters=method.getParameters();  if (parameters.length == 0)   return;  GrArgumentList argumentList=call.getArgumentList();  if (argumentList == null) {    setDefaultValuesToParameters(method,null,call);    return;  }  Project project=call.getProject();  final GroovyResolveResult resolveResult=call.advancedResolve();  GrClosureSignature signature=GrClosureSignatureUtil.createSignature(method,resolveResult.getSubstitutor());  if (signature == null) {    return;  }  GrClosureSignatureUtil.ArgInfo<PsiElement>[] infos=GrClosureSignatureUtil.mapParametersToArguments(signature,call.getNamedArguments(),call.getExpressionArguments(),call.getClosureArguments(),call,true,false);  if (infos == null)   return;  for (int i=0; i < infos.length; i++) {    GrClosureSignatureUtil.ArgInfo<PsiElement> argInfo=infos[i];    GrParameter parameter=parameters[i];    final GrExpression arg=inferArg(signature,parameters,parameter,argInfo,project);    if (arg != null) {      replaceAllOccurrencesWithExpression(method,call,arg,parameter);    }  }}  }
class C{  public SuggestionsAdapter(Context context,final List<KeywordSuggestionsResponseModel.Keywords> suggestions){  mContext=context;  mSuggestionsMaster=suggestions;  mSuggestionsFilter=new SuggestionFilter(this);  mDisplaySuggestions=true;}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  public void addInvitationListener(WorkgroupInvitationListener invitationListener){synchronized (invitationListeners) {    if (!invitationListeners.contains(invitationListener)) {      invitationListeners.add(invitationListener);    }  }}  }
class C{  private void sendData(){  final ByteBuf data=Unpooled.buffer();  data.writeShort(input);  data.writeShort(output);  getCasing().sendData(getFace(),data,DATA_TYPE_UPDATE);}  }
class C{  public static String slurpURL(URL u,String encoding) throws IOException {  String lineSeparator=System.getProperty("line.separator");  URLConnection uc=u.openConnection();  uc.setReadTimeout(30000);  InputStream is;  try {    is=uc.getInputStream();  } catch (  SocketTimeoutException e) {    System.err.println("Time out. Return empty string");    return "";  }  BufferedReader br=new BufferedReader(new InputStreamReader(is,encoding));  String temp;  StringBuffer buff=new StringBuffer(16000);  while ((temp=br.readLine()) != null) {    buff.append(temp);    buff.append(lineSeparator);  }  br.close();  return buff.toString();}  }
class C{  @Override public MemBufferHolder<?> put(KeyT k,MemBufferHolder<?> v){  return put(k,v,null,null);}  }
class C{  public SwingSet2(SwingSet2Applet applet){  this(applet,null);}  }
class C{  private void tryScrollBackToTopAbortRefresh(){  tryScrollBackToTop();}  }
class C{  private byte[] parseTypes(Collection<String> rules){  SortedMap<Character,Byte> typeMap=new TreeMap<>();  for (  String rule : rules) {    Matcher m=typePattern.matcher(rule);    if (!m.find())     throw new RuntimeException("Invalid Mapping Rule : [" + rule + "]");    String lhs=parseString(m.group(1).trim());    Byte rhs=parseType(m.group(2).trim());    if (lhs.length() != 1)     throw new RuntimeException("Invalid Mapping Rule : [" + rule + "]. Only a single character is allowed.");    if (rhs == null)     throw new RuntimeException("Invalid Mapping Rule : [" + rule + "]. Illegal type.");    typeMap.put(lhs.charAt(0),rhs);  }  byte types[]=new byte[Math.max(typeMap.lastKey() + 1,WordDelimiterIterator.DEFAULT_WORD_DELIM_TABLE.length)];  for (int i=0; i < types.length; i++)   types[i]=WordDelimiterIterator.getType(i);  for (  Map.Entry<Character,Byte> mapping : typeMap.entrySet())   types[mapping.getKey()]=mapping.getValue();  return types;}  }
class C{  private static String buildMessage(String format,Object... args){  String msg=(args == null) ? format : String.format(Locale.US,format,args);  StackTraceElement[] trace=new Throwable().fillInStackTrace().getStackTrace();  String caller="<unknown>";  for (int i=2; i < trace.length; i++) {    Class<?> clazz=trace[i].getClass();    if (!clazz.equals(BlinkLog.class)) {      String callingClass=trace[i].getClassName();      callingClass=callingClass.substring(callingClass.lastIndexOf('.') + 1);      callingClass=callingClass.substring(callingClass.lastIndexOf('$') + 1);      caller=callingClass + "." + trace[i].getMethodName();      break;    }  }  return String.format(Locale.US,"[%d] %s: %s",Thread.currentThread().getId(),caller,msg);}  }
class C{  private void initReservedOrderedTab(boolean reserved){  if (reserved && m_modelReserved != null)   return;  if (!reserved && m_modelOrdered != null)   return;  Vector<String> columnNames=new Vector<String>();  columnNames.add(Msg.translate(Env.getCtx(),m_C_BPartner_ID == 0 ? "C_BPartner_ID" : "M_Product_ID"));  columnNames.add(Msg.translate(Env.getCtx(),"PriceActual"));  columnNames.add(Msg.translate(Env.getCtx(),reserved ? "QtyReserved" : "QtyOrdered"));  columnNames.add(Msg.translate(Env.getCtx(),"Discount"));  columnNames.add(Msg.translate(Env.getCtx(),"DocumentNo"));  columnNames.add(Msg.translate(Env.getCtx(),"DateOrdered"));  columnNames.add(Msg.translate(Env.getCtx(),"M_Warehouse_ID"));  Vector<Vector<Object>> data=null;  if (m_C_BPartner_ID == 0) {    String sql="SELECT bp.Name, ol.PriceActual,ol.PriceList,ol.QtyReserved," + "o.DateOrdered,dt.PrintName || ' ' || o.DocumentNo As DocumentNo, " + "w.Name,"+ "ol.Discount, 0 "+ "FROM C_Order o"+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN C_BPartner bp  ON (o.C_BPartner_ID=bp.C_BPartner_ID) "+ "WHERE ol.QtyReserved<>0"+ " AND ol.M_Product_ID=?"+ " AND o.IsSOTrx=" + (reserved ? "'Y'" : "'N'") + " ORDER BY o.DateOrdered";    data=fillTable(sql,m_M_Product_ID);  } else {    String sql="SELECT p.Name, ol.PriceActual,ol.PriceList,ol.QtyReserved," + "o.DateOrdered,dt.PrintName || ' ' || o.DocumentNo As DocumentNo, " + "w.Name,"+ "ol.Discount, 0 "+ "FROM C_Order o"+ " INNER JOIN C_OrderLine ol ON (o.C_Order_ID=ol.C_Order_ID)"+ " INNER JOIN C_DocType dt ON (o.C_DocType_ID=dt.C_DocType_ID)"+ " INNER JOIN M_Warehouse w ON (ol.M_Warehouse_ID=w.M_Warehouse_ID)"+ " INNER JOIN M_Product p  ON (ol.M_Product_ID=p.M_Product_ID) "+ "WHERE ol.QtyReserved<>0"+ " AND o.C_BPartner_ID=?"+ " AND o.IsSOTrx=" + (reserved ? "'Y'" : "'N'") + " ORDER BY o.DateOrdered";    data=fillTable(sql,m_C_BPartner_ID);  }  if (reserved) {    m_modelReserved=new ListModelTable(data);    m_tableReserved.setData(m_modelReserved,columnNames);    m_tableReserved.setColumnClass(0,String.class,true);    m_tableReserved.setColumnClass(1,BigDecimal.class,true);    m_tableReserved.setColumnClass(2,Double.class,true);    m_tableReserved.setColumnClass(3,BigDecimal.class,true);    m_tableReserved.setColumnClass(4,String.class,true);    m_tableReserved.setColumnClass(5,Timestamp.class,true);    m_tableReserved.setColumnClass(6,String.class,true);    m_tableReserved.autoSize();  } else {    m_modelOrdered=new ListModelTable(data);    m_tableOrdered.setData(m_modelOrdered,columnNames);    m_tableOrdered.setColumnClass(0,String.class,true);    m_tableOrdered.setColumnClass(1,BigDecimal.class,true);    m_tableOrdered.setColumnClass(2,Double.class,true);    m_tableOrdered.setColumnClass(3,BigDecimal.class,true);    m_tableOrdered.setColumnClass(4,String.class,true);    m_tableOrdered.setColumnClass(5,Timestamp.class,true);    m_tableOrdered.setColumnClass(6,String.class,true);    m_tableOrdered.autoSize();  }}  }
class C{  public static Collection<Action<String,String>> resolveTransitionActions(Transition transition,StateMachineComponentResolver<String,String> resolver){  ArrayList<Action<String,String>> actions=new ArrayList<Action<String,String>>();  Action<String,String> action=resolveTransitionAction(transition,resolver);  if (action != null) {    actions.add(action);  }  return actions;}  }
class C{  public void run(String args[]){  if (args.length == 0) {    run();    return;  }  for (int i=0; i < args.length; i++) {    final String errStr=testConfigurationFile(args[i]);    if (errStr != null) {      throw new RuntimeException(errStr);    }  }}  }
class C{  public WriteRequest(final int objectId,final int objectInstanceId,final int resourceId,byte[] value){  this(ContentFormat.TLV,objectId,objectInstanceId,resourceId,value);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_nodegetfirstchild.class,args);}  }
class C{  public void addNamespaceDeclaration(String nsPrefix,String nsURI){  if (nsDeclarations == null) {    nsDeclarations=new TreeMap<String,String>();  }  nsDeclarations.put(nsPrefix,nsURI);}  }
class C{  @Deactivate protected void deactivate(ComponentContext ctx){}  }
class C{  protected boolean includesRulerLine(Position position,IDocument document){  if (position != null && ruler != null) {    try {      int markerLine=document.getLineOfOffset(position.getOffset());      int line=ruler.getLineOfLastMouseButtonActivity();      if (line == markerLine) {        return true;      }    } catch (    BadLocationException x) {      FindbugsPlugin.getDefault().logException(x,"Error getting marker line");    }  }  return false;}  }
class C{  private Initiator createSCSIInitiator(String iqn,String id){  Initiator initiator;  List<Initiator> results=CustomQueryUtility.queryActiveResourcesByAltId(_dbClient,Initiator.class,"iniport",iqn);  if (results == null || results.isEmpty()) {    initiator=new Initiator();    initiator.setId(URIUtil.createId(Initiator.class));    initiator.setInitiatorPort(iqn);    initiator.setProtocol(HostInterface.Protocol.iSCSI.name());    initiator.setRegistrationStatus(DiscoveredDataObject.RegistrationStatus.REGISTERED.name());    initiator.setInactive(false);    if (id != null && !id.isEmpty()) {      initiator.setLabel(id);    }    _dbClient.createObject(initiator);  } else {    initiator=results.get(0);    initiator.setLabel(id);    _dbClient.persistObject(initiator);  }  return initiator;}  }
class C{  @Override public boolean supportsMixedCaseIdentifiers(){  debugCodeCall("supportsMixedCaseIdentifiers");  return false;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case DomPackage.SIMPLE_TYPE_REFERENCE___TYPE_NAME_SET:    return typeNameSet();case DomPackage.SIMPLE_TYPE_REFERENCE___TO_STRING:  return toString();}return super.eInvoke(operationID,arguments);}  }
class C{  protected KylinJdbcFactory(int major,int minor){  this.major=major;  this.minor=minor;}  }
class C{  protected int skipLine(int c) throws IOException {  while (c != -1 && c != '\r' && c != '\n') {    c=readCodePoint();  }  if (c == '\n') {    c=readCodePoint();    lineNo++;    reportLocation(lineNo,1);  } else   if (c == '\r') {    c=readCodePoint();    if (c == '\n') {      c=readCodePoint();    }    lineNo++;    reportLocation(lineNo,1);  }  return c;}  }
class C{  boolean splitChosen(){  return (assumeReps.size() > 0) && (assumeReps.elementAt(assumeReps.size() - 1).nodeType == NodeRepresentation.OR_DECOMP);}  }
class C{  public static int parseFullAtomVersion(int fullAtomInt){  return 0x000000FF & (fullAtomInt >> 24);}  }
class C{  public Script build(){  return new Script(chunks);}  }
class C{  public Object clone(){  mxRectangle clone=(mxRectangle)super.clone();  clone.setWidth(getWidth());  clone.setHeight(getHeight());  return clone;}  }
class C{  public void ifNonNull(final Label label){  mv.visitJumpInsn(Opcodes.IFNONNULL,label);}  }
class C{  public void testAuditCompleted(){}  }
class C{  private static boolean hasChangesOfChildren(long last,Class clazz){  return hasChangesOfChildren(last,ThreadLocalPageContext.get(),clazz);}  }
class C{  public <T extends Expression>Optional<T> keyword(final String key,Class<T> expected){  return Optional.ofNullable(kw.remove(key)).map(null);}  }
class C{  public final String toString(int depth){  if (depth <= 0)   return "";  String res=Strings.indent(2,"\n*AssumeNode " + super.toString(depth) + ((assumeExpr != null) ? Strings.indent(2,assumeExpr.toString(depth - 1)) : ""));  if (def != null) {    res=res + Strings.indent(4,"\n def: " + Strings.indent(2,this.def.toString(depth - 1)));  }  ;  return res;}  }
class C{  public boolean isSynchronized(){  return this.modifierKeyword == ModifierKeyword.SYNCHRONIZED_KEYWORD;}  }
class C{  public boolean isShowCallgraphViews(){  return m_callgraphViewsCheckbox.isSelected();}  }
class C{  public static Object sum(Iterator<Object> self){  return sum(toList(self),null,true);}  }
class C{  @Override public void write(byte b[],int off,int len){  if ((off < 0) || (off > b.length) || (len < 0)|| ((off + len) > b.length)|| ((off + len) < 0))   throw new IndexOutOfBoundsException(); else   if (len == 0)   return;  int newCnt=cnt + len;  if (newCnt > buf.length)   buf=Arrays.copyOf(buf,Math.max(buf.length << 1,newCnt));  U.arrayCopy(b,off,buf,cnt,len);  cnt=newCnt;}  }
class C{  public Boolean includeSentences(){  return includeSentences;}  }
class C{  String argVal(){  String arg1Val="" + arg1;  String arg2Val="" + arg2;  String arg3Val="" + arg3;  return arg1Val + "," + arg2Val+ ","+ arg3Val;}  }
class C{  public static void updateColumnWidth(ResultList rList){  if (rList == null || rList.getColumnDescriptor() == null || rList.getRows().size() == 0)   return;  List<ColumnInfo> cols=rList.getColumnDescriptor().getColumns();  for (  ColumnInfo col : cols) {    col.setMaxLength(col.getName().length());  }  for (  ResultRow row : rList.getRows()) {    List<String> l=row.getColumns();    for (int i=0; i < l.size(); i++) {      String s=l.get(i);      if (s != null && s.length() > cols.get(i).getMaxLength())       cols.get(i).setMaxLength(s.length());    }  }}  }
class C{  public int processBytes(byte[] in,int inOff,int len,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  int blockSize=getBlockSize();  int length=getUpdateOutputSize(len);  if (length > 0) {    if ((outOff + length) > out.length) {      throw new OutputLengthException("output buffer too short");    }  }  int resultLen=0;  int gapLen=buf.length - bufOff;  if (len > gapLen) {    System.arraycopy(in,inOff,buf,bufOff,gapLen);    resultLen+=cipher.processBlock(buf,0,out,outOff);    bufOff=0;    len-=gapLen;    inOff+=gapLen;    while (len > buf.length) {      resultLen+=cipher.processBlock(in,inOff,out,outOff + resultLen);      len-=blockSize;      inOff+=blockSize;    }  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;  return resultLen;}  }
class C{  public CubicBezier(BezierRenderer renderer,FloatBuffer vboBuffer,float p0x,float p0y,float p3x,float p3y,float p1x,float p1y,float p2x,float p2y,float[] color){  this.mRenderer=renderer;  this.starEndPoints=new float[]{p0x,p0y,p3x,p3y};  this.controlPoints=new float[]{p1x,p1y,p2x,p2y};  this.color=color;  final int buffers[]=new int[1];  GLES20.glGenBuffers(1,buffers,0);  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,buffers[0]);  GLES20.glBufferData(GLES20.GL_ARRAY_BUFFER,vboBuffer.capacity() * Const.BYTES_PER_FLOAT,vboBuffer,GLES20.GL_STATIC_DRAW);  GLES20.glBindBuffer(GLES20.GL_ARRAY_BUFFER,0);  mBufferId=buffers[0];  vboBuffer=null;}  }
class C{  public Where<T,ID> eq(String columnName,Object value) throws SQLException {  addClause(new SimpleComparison(columnName,findColumnFieldType(columnName),value,SimpleComparison.EQUAL_TO_OPERATION));  return this;}  }
class C{  public void log(Throwable error){  getBot().log(this,error);}  }
class C{  @Override public boolean apply(Object key,Object val){  String k=key.toString();  String v=val.toString();  if (caseSensitive)   return k.contains(ptrn) || v.contains(ptrn);  return k.toUpperCase().contains(ptrn) || v.toUpperCase().contains(ptrn);}  }
class C{  public void startUpBase(FloodlightModuleContext context) throws FloodlightModuleException {  role=floodlightProvider.getRole().getOFRole();  floodlightProvider.addHAListener(this);  loadLogicalCategories();  registerDebugEvents();}  }
class C{  public void add(E o){  if (o == null)   o=(E)NULL_CONST;  if (index == LENGTH - 1) {    Object[] temp=new Object[LENGTH];    q[index]=temp;    q=temp;    index=0;  }  q[index++]=o;}  }
class C{  public void finish() throws Exception {}  }
class C{  public AuthChallengeResponse(AuthChallengeResponse other){  if (other.isSetChallenge()) {    this.challenge=other.challenge;  }  if (other.isSetResponse()) {    this.response=other.response;  }}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  public void traverseDirectory(File startDirectory,OutputStream out) throws IOException {  startPath=startDirectory.getAbsolutePath();  outStream=new ZipOutputStream(out);  try {    walk(startDirectory,new ArrayList());  }  finally {    outStream.flush();    outStream.close();  }}  }
class C{  final void putChar(int offset,char value){  unsafe.putChar(offset + address,value);}  }
class C{  @Override public void updateScreen(){  commandBox.updateCursorCounter();}  }
class C{  protected Object deserializeWithUnwrapped(JsonParser jp,DeserializationContext ctxt) throws IOException, JsonProcessingException {  if (_delegateDeserializer != null) {    return _valueInstantiator.createUsingDelegate(_delegateDeserializer.deserialize(jp,ctxt));  }  if (_propertyBasedCreator != null) {    return deserializeUsingPropertyBasedWithUnwrapped(jp,ctxt);  }  TokenBuffer tokens=new TokenBuffer(jp.getCodec());  tokens.writeStartObject();  final Object bean=_valueInstantiator.createUsingDefault();  if (_injectables != null) {    injectValues(ctxt,bean);  }  for (; jp.getCurrentToken() != JsonToken.END_OBJECT; jp.nextToken()) {    String propName=jp.getCurrentName();    jp.nextToken();    SettableBeanProperty prop=_beanProperties.find(propName);    if (prop != null) {      try {        prop.deserializeAndSet(jp,ctxt,bean);      } catch (      Exception e) {        wrapAndThrow(e,bean,propName,ctxt);      }      continue;    }    if (_ignorableProps != null && _ignorableProps.contains(propName)) {      jp.skipChildren();      continue;    }    tokens.writeFieldName(propName);    tokens.copyCurrentStructure(jp);    if (_anySetter != null) {      try {        _anySetter.deserializeAndSet(jp,ctxt,bean,propName);      } catch (      Exception e) {        wrapAndThrow(e,bean,propName,ctxt);      }      continue;    }  }  tokens.writeEndObject();  _unwrappedPropertyHandler.processUnwrapped(jp,ctxt,bean,tokens);  return bean;}  }
class C{  protected DistributedRegion(String regionName,RegionAttributes attrs,LocalRegion parentRegion,GemFireCacheImpl cache,InternalRegionArguments internalRegionArgs){  super(regionName,attrs,parentRegion,cache,internalRegionArgs);  this.initializationLatchAfterMemberTimeout=new StoppableCountDownLatch(getCancelCriterion(),1);  this.distAdvisor=createDistributionAdvisor(internalRegionArgs);  if (getDistributionManager().getConfig().getEnableNetworkPartitionDetection() && !isInternalRegion() && !attrs.getScope().isAck()&& !doesNotDistribute()&& attrs.getDataPolicy().withStorage()) {    logger.warn(LocalizedMessage.create(LocalizedStrings.DistributedRegion_REGION_0_1_SPLITBRAIN_CONFIG_WARNING,new Object[]{regionName,attrs.getScope()}));  }  if (!getDistributionManager().getConfig().getEnableNetworkPartitionDetection() && attrs.getDataPolicy().withPersistence() && !loggedNetworkPartitionWarning.getAndSet(true)) {    logger.warn(LocalizedMessage.create(LocalizedStrings.DistributedRegion_REGION_0_ENABLE_NETWORK_PARTITION_WARNING,new Object[]{regionName,attrs.getScope()}));  }  boolean setRequiresReliabilityCheck=attrs.getMembershipAttributes().hasRequiredRoles() && !attrs.getMembershipAttributes().getLossAction().isAllAccess() && !attrs.getMembershipAttributes().getLossAction().isReconnect();  Set reqRoles=new HashSet(attrs.getMembershipAttributes().getRequiredRoles());  reqRoles.removeAll(getSystem().getDistributedMember().getRoles());  if (reqRoles.isEmpty()) {    setRequiresReliabilityCheck=false;  }  this.requiresReliabilityCheck=setRequiresReliabilityCheck;{    ReliableMessageQueue tmp=null;    if (this.requiresReliabilityCheck) {    }    this.rmq=tmp;  }  if (internalRegionArgs.isUsedForPartitionedRegionBucket()) {    this.persistenceAdvisor=internalRegionArgs.getPersistenceAdvisor();  } else   if (this.allowsPersistence()) {    DistributedLockService dl=cache.getPartitionedRegionLockService();    try {      DiskRegionStats diskStats;      PersistentMemberView storage;      if (getDataPolicy().withPersistence()) {        storage=getDiskRegion();        diskStats=getDiskRegion().getStats();      } else {        storage=new InMemoryPersistentMemberView();        diskStats=null;      }      PersistentMemberManager memberManager=cache.getPersistentMemberManager();      this.persistenceAdvisor=new PersistenceAdvisorImpl(distAdvisor,dl,storage,this.getFullPath(),diskStats,memberManager);    } catch (    Exception e) {      throw new InternalGemFireError("Couldn't recover persistence");    }  } else {    this.persistenceAdvisor=null;  }  if (this.persistenceAdvisor != null) {    this.persistentId=persistenceAdvisor.generatePersistentID();  } else {    this.persistentId=null;  }}  }
class C{  public synchronized void remove(int index){  super.remove(index);  mMaxValues.remove(index);}  }
class C{  public void readSubpopulation(final EvolutionState state,final DataInput dataInput) throws IOException {  int numIndividuals=dataInput.readInt();  if (numIndividuals != individuals.length) {    state.output.warnOnce("On reading subpopulation from binary stream, the subpopulation size was incorrect.\n" + "Had to resize and use newIndividual() instead of readIndividual().");    individuals=new Individual[numIndividuals];    for (int i=0; i < individuals.length; i++)     individuals[i]=species.newIndividual(state,dataInput);  } else   for (int i=0; i < individuals.length; i++)   individuals[i].readIndividual(state,dataInput);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static boolean isSpace(int c){  return c <= 0x20 && (CHARS[c] & MASK_SPACE) != 0;}  }
class C{  public boolean subdivide(S2Cell children[]){  if (cellId.isLeaf()) {    return false;  }  R2Vector uvMid=getCenterUV();  S2CellId id=cellId.childBegin();  for (int pos=0; pos < 4; ++pos, id=id.next()) {    S2Cell child=children[pos];    child.face=face;    child.level=(byte)(level + 1);    child.orientation=(byte)(orientation ^ S2.posToOrientation(pos));    child.cellId=id;    int ij=S2.posToIJ(orientation,pos);    for (int d=0; d < 2; ++d) {      int m=1 - ((ij >> (1 - d)) & 1);      child.uv[d][m]=uvMid.get(d);      child.uv[d][1 - m]=uv[d][1 - m];    }  }  return true;}  }
class C{  public DefaultPseudoElementSelector(String uri,String name){  super(uri,name);}  }
class C{  public SamRegionRestriction(String template,int start,int end){  super(template,start,end);}  }
class C{  public boolean isDrawerOpen(){  if (drawerLayout != null && sliderLayout != null) {    return drawerLayout.isDrawerOpen(sliderLayout);  }  return false;}  }
class C{  public void test_X500Principal_03(){  String name="CN=Duke,OU=JavaSoft,O=Sun Microsystems,C=US";  byte[] ba=getByteArray(TestUtils.getX509Certificate_v1());  byte[] baNull=null;  try {    X500Principal xpr=new X500Principal(ba);    assertNotNull("Null object returned",xpr);    byte[] resArray=xpr.getEncoded();    assertEquals(ba.length,resArray.length);  } catch (  Exception e) {    fail("Unexpected exception: " + e);  }  try {    X500Principal xpr=new X500Principal(baNull);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }  ba=name.getBytes();  try {    X500Principal xpr=new X500Principal(ba);    fail("IllegalArgumentException wasn't thrown");  } catch (  IllegalArgumentException npe) {  }catch (  Exception e) {    fail(e + " was thrown instead of IllegalArgumentException");  }}  }
class C{  public String toString(){  if (partOfSpeech == null)   return form;  String form=this.form;  if (form.length() == 1) {    if ("([{".indexOf(form.charAt(0)) != -1)     form="-LRB-";    if (")]}".indexOf(form.charAt(0)) != -1)     form="-RRB-";  }  return "(" + partOfSpeech + " "+ form+ ")";}  }
class C{  protected boolean isEmpty(Literal geometry){  boolean result=false;  if (geometry != null) {    Geometry g=geometry.evaluate(null,Geometry.class);    result=g == null || g.isEmpty();  }  return result;}  }
class C{  private void sendDownForAllActiveNotInjectedPointers(MotionEvent prototype,int policyFlags){  ReceivedPointerTracker receivedPointers=mReceivedPointerTracker;  InjectedPointerTracker injectedPointers=mInjectedPointerTracker;  int pointerIdBits=0;  final int pointerCount=prototype.getPointerCount();  for (int i=0; i < pointerCount; i++) {    final int pointerId=prototype.getPointerId(i);    if (injectedPointers.isInjectedPointerDown(pointerId)) {      pointerIdBits|=(1 << pointerId);    }  }  for (int i=0; i < pointerCount; i++) {    final int pointerId=prototype.getPointerId(i);    if (!receivedPointers.isActivePointer(pointerId)) {      continue;    }    if (injectedPointers.isInjectedPointerDown(pointerId)) {      continue;    }    pointerIdBits|=(1 << pointerId);    final int action=computeInjectionAction(MotionEvent.ACTION_DOWN,i);    sendMotionEvent(prototype,action,pointerIdBits,policyFlags);  }}  }
class C{  public SeveralAttachmentsResponse(){  requestFileName="attachments.query";  requestContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";  responseFile="attachments.answer";  responseContentType="multipart/related; charset=UTF-8; " + "boundary=jetty771207119h3h10dty";}  }
class C{  public double manhattanDistance(final Double2D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  return dx + dy;}  }
class C{  public void fillTriangle(int x1,int y1,int x2,int y2,int x3,int y3){  impl.fillTriangle(nativeGraphics,xTranslate + x1,yTranslate + y1,xTranslate + x2,yTranslate + y2,xTranslate + x3,yTranslate + y3);}  }
class C{  public void closeHandler() throws CarbonDataWriterException {  if (null != this.dataWriter) {    while (blockletProcessingCount.get() > 0) {      try {        Thread.sleep(50);      } catch (      InterruptedException e) {        throw new CarbonDataWriterException(e.getMessage());      }    }    consumerExecutorService.shutdownNow();    processWriteTaskSubmitList(consumerExecutorServiceTaskList);    this.dataWriter.writeBlockletInfoToFile();    LOGGER.info("All blocklets have been finished writing");    this.dataWriter.closeWriter();  }  this.dataWriter=null;  this.keyBlockHolder=null;}  }
class C{  public ChildAttributes(@Nullable final Indent childIndent,@Nullable final Alignment alignment){  myChildIndent=childIndent;  myAlignment=alignment;}  }
class C{  public static boolean cs_ltsolve(Scs L,float[] x){  int p, j, n, Lp[], Li[];  float Lx[];  if (!Scs_util.CS_CSC(L) || x == null)   return (false);  n=L.n;  Lp=L.p;  Li=L.i;  Lx=L.x;  for (j=n - 1; j >= 0; j--) {    for (p=Lp[j] + 1; p < Lp[j + 1]; p++) {      x[j]-=Lx[p] * x[Li[p]];    }    x[j]/=Lx[Lp[j]];  }  return (true);}  }
class C{  public static void logTimeoutException(final Logger logger,final TimeoutException e){  logger.logException(Level.WARNING,"TimeoutException",e);}  }
class C{  public List<CharsRef> stem(char word[],int length){  if (dictionary.needsInputCleaning) {    scratchSegment.setLength(0);    scratchSegment.append(word,0,length);    CharSequence cleaned=dictionary.cleanInput(scratchSegment,segment);    scratchBuffer=ArrayUtil.grow(scratchBuffer,cleaned.length());    length=segment.length();    segment.getChars(0,length,scratchBuffer,0);    word=scratchBuffer;  }  int caseType=caseOf(word,length);  if (caseType == UPPER_CASE) {    caseFoldTitle(word,length);    caseFoldLower(titleBuffer,length);    List<CharsRef> list=doStem(word,length,false);    list.addAll(doStem(titleBuffer,length,true));    list.addAll(doStem(lowerBuffer,length,true));    return list;  } else   if (caseType == TITLE_CASE) {    caseFoldLower(word,length);    List<CharsRef> list=doStem(word,length,false);    list.addAll(doStem(lowerBuffer,length,true));    return list;  } else {    return doStem(word,length,false);  }}  }
class C{  public static void run(final String cloudStoragePath,final String projectId,final String datasetId,final String tableId,final long interval) throws IOException, InterruptedException {  Bigquery bigquery=BigQueryServiceFactory.getService();  Job extractJob=extractJob(bigquery,cloudStoragePath,new TableReference().setProjectId(projectId).setDatasetId(datasetId).setTableId(tableId));  Bigquery.Jobs.Get getJob=bigquery.jobs().get(extractJob.getJobReference().getProjectId(),extractJob.getJobReference().getJobId());  BigQueryUtils.pollJob(getJob,interval);  System.out.println("Export is Done!");}  }
class C{  public boolean equals(ReadonlyVec2D v){  try {    return (x == v.x() && y == v.y());  } catch (  NullPointerException e) {    return false;  }}  }
class C{  public static void submitTopology(String name,Map<String,Object> stormConfig,StormTopology topology) throws AlreadyAliveException, InvalidTopologyException {  com.twitter.heron.api.Config heronConfig=ConfigUtils.translateConfig(stormConfig);  try {    HeronSubmitter.submitTopology(name,heronConfig,topology.getStormTopology());  } catch (  com.twitter.heron.api.exception.AlreadyAliveException e) {    throw new AlreadyAliveException();  }catch (  com.twitter.heron.api.exception.InvalidTopologyException e) {    throw new InvalidTopologyException();  }}  }
class C{  public T caseVirtualBaseType(VirtualBaseType object){  return null;}  }
class C{  public SortedArrayList(Comparator<E> c){  comparator=c;}  }
class C{  public TungstenProperties createSimpleRuntimeWith2Services() throws Exception {  PipelineConfigBuilder builder=new PipelineConfigBuilder();  builder.setProperty(ReplicatorConf.SERVICE_NAME,"test");  builder.setRole("master");  builder.addPipeline("master","master",null,"svc1,svc2");  builder.addStage("master","dummy","dummy",null);  builder.addComponent("extractor","dummy",DummyExtractor.class);  builder.addComponent("applier","dummy",DummyApplier.class);  builder.addComponent("service","svc1",SampleService.class);  builder.addComponent("service","svc2",SampleService.class);  return builder.getConfig();}  }
class C{  private void readObject(){}  }
class C{  public boolean hasFather(){  return (this.father != null);}  }
class C{  @Override public boolean performFinish(){  DriverDescriptor driver=getSelectedDriver();  ConnectionPageSettings pageSettings=getPageSettings();  DataSourceDescriptor dataSourceTpl=pageSettings == null ? getActiveDataSource() : pageSettings.getActiveDataSource();  DBPDataSourceRegistry dataSourceRegistry=getDataSourceRegistry();  DataSourceDescriptor dataSourceNew=new DataSourceDescriptor(dataSourceRegistry,dataSourceTpl.getId(),driver,dataSourceTpl.getConnectionConfiguration());  dataSourceNew.copyFrom(dataSourceTpl);  saveSettings(dataSourceNew);  dataSourceRegistry.addDataSource(dataSourceNew);  return true;}  }
class C{  public static final CButton createPrintButton(boolean withText){  if (withText)   return createPrintButton(Msg.getMsg(Env.getCtx(),A_PRINT));  return createPrintButton(null);}  }
class C{  public boolean contains(int x,int y){  return getShape().contains(x,y);}  }
class C{  protected boolean canLoad(String pathToLibrary){  try {    System.load(pathToLibrary);    return true;  } catch (  Throwable t) {    Logging.logger().finest(WWUtil.extractExceptionReason(t));  }  return false;}  }
class C{  private static void showIntroductionClicked(ActionEvent e){  panel.messageTextArea.setText("Interface: \nMost items in a date picker are clickable. " + "These include... The buttons for previous and next month, the buttons for " + "previous and next year, the \"today\" text, the \"clear\" text, and individual "+ "dates. A click on the month or year label (at the top), will open a menu for "+ "changing the month or year.\n\nGeneral features: \n* Automatic "+ "internationalization. \n* Relatively compact source code.\n* Creating a "+ "DatePicker, TimePicker, or DateTimePicker requires only one line of code.\n"+ "* Open source code base.\n\n"+ "Data types: \nThe standard Java 8 time library is used to store dates, "+ "and they are convertible to other data types. \n(The Java 8 time package "+ "is also called \"java.time\" or \"JSR-310\", and was developed by the author "+ "of Joda Time.)\n\nVeto and Highlight Policies: \nThese policies are optional. "+ "A veto policy restricts the dates that can be selected. A highlight policy "+ "provides a visual highlight on desired dates, with optional tooltips. If today "+ "is vetoed, the \"today\" button will be grey and disabled.\n\nDate values and "+ "automatic validation: \nEvery date picker stores its current text, and its last "+ "valid date. The last valid date is returned when you call DatePicker.getDate(). "+ "If the user types into the text field, any text that is not a valid date will "+ "be displayed in red, any vetoed date will have a strikethrough, and valid "+ "dates will display in black. When the focus on a date picker is lost, the text "+ "is always set to match the last valid date.\n\nTimePicker basic features: \n"+ "Pressing the up or down arrow keys will change the displayed time by one "+ "minute. Holding down the arrow keys, or holding the (optional) timespinner "+ "buttons will change the time at an accelerating rate. Clicking the time drop "+ "down button (or pressing the right arrow key) will open a time selection menu. "+ "The default intervals and range in the time drop down menu may optionally be "+ "changed by the programmer (in the TimePickerSettings class)."+ "\n\n\n");  panel.messageTextArea.setCaretPosition(0);}  }
class C{  public static Builder builder(CommandRequest request){  return new Builder(request);}  }
class C{  private boolean messageChanged(String oldMessage,String newMessage){  return ((newMessage == null) && (oldMessage != null)) || ((newMessage != null) && !newMessage.equals(oldMessage));}  }
class C{  public VacuumEnvironment(){  Random r=new Random();  envState=new VacuumEnvironmentState(0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty,0 == r.nextInt(2) ? LocationState.Clean : LocationState.Dirty);}  }
class C{  public static String findMameBinary() throws MameBinaryNotFoundException {  String mameExecEnvVar=System.getenv("MAME_EXEC");  IaMame.debug(String.format("$MAME_EXEC: %s",mameExecEnvVar));  if (mameExecEnvVar != null) {    File mameBinary=new File(mameExecEnvVar);    if (mameBinary.exists() && mameBinary.canExecute()) {      IaMame.debug("MAME binary found on MAME_EXEC" + " environment variable");      return mameExecEnvVar;    }  }  String[] possibleBinaryNames={"mame","mame64","mame.exe"};  String candidateMameBinaryPath;  File candidateMameBinary;  String containingJarPath=null;  try {    containingJarPath=new File(IaMame.class.getProtectionDomain().getCodeSource().getLocation().toURI().getPath()).getParent();    IaMame.debug(String.format("IaMame directory: %s",containingJarPath));  } catch (  URISyntaxException e) {    IaMame.debug(e.getMessage());  }  for (  String b : possibleBinaryNames) {    candidateMameBinaryPath=containingJarPath + File.separator + b;    candidateMameBinary=new File(candidateMameBinaryPath);    if (candidateMameBinary.exists() && candidateMameBinary.canExecute()) {      IaMame.debug(String.format("Mame binary found on the same directory than IaMame: %s",candidateMameBinaryPath));      return candidateMameBinaryPath;    }  }  String pathEnvVar=System.getenv("PATH");  IaMame.debug(String.format("$PATH: %s",pathEnvVar));  for (  String p : pathEnvVar.split(":")) {    for (    String b : possibleBinaryNames) {      candidateMameBinaryPath=p + File.separator + b;      candidateMameBinary=new File(candidateMameBinaryPath);      if (candidateMameBinary.exists() && candidateMameBinary.canExecute()) {        IaMame.debug(String.format("Mame binary found on $PATH : %s",candidateMameBinaryPath));        return candidateMameBinaryPath;      }    }  }  throw new MameBinaryNotFoundException("MAME executable has not been found");}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MOV");  translateAll(environment,instruction,"MOV",instructions);}  }
class C{  public void initialize(Body bodyA,Body bodyB,Vector2 anchor){  this.bodyA=bodyA;  this.bodyB=bodyB;  localAnchorA.set(bodyA.getLocalPoint(anchor));  localAnchorB.set(bodyB.getLocalPoint(anchor));  referenceAngle=bodyB.getAngle() - bodyA.getAngle();}  }
class C{  public static VolumeMount[] formatOriginalContainerVolumeMount(LogDraft logDraft){  List<VolumeMount> volumeMounts=new ArrayList<>();  int idxSuffix=1;  for (  LogItemDraft logItemDraft : logDraft.getLogItemDrafts()) {    if (logItemDraft.isAutoCollect() || logItemDraft.isAutoDelete()) {      VolumeMount volumeMount=new VolumeMount();      volumeMount.setName("data" + idxSuffix);      volumeMount.setMountPath(LogItemDraft.getLogParentPath(logItemDraft.getLogPath()));      volumeMounts.add(volumeMount);      idxSuffix++;    }  }  return volumeMounts.toArray(new VolumeMount[]{});}  }
class C{  @Override public void add(int location,E object){  insertElementAt(object,location);}  }
class C{  public JsonObject(){}  }
class C{  public void repaint(long tm,int x,int y,int width,int height){}  }
class C{  public static Point transformPoint(Point point,MathTransform transform){  if (geoFactory == null)   geoFactory=new GeometryFactory();  double[] points=new double[]{point.getCoordinate().x,point.getCoordinate().y};  try {    transform.transform(points,0,points,0,1);  } catch (  TransformException e) {    e.printStackTrace();  }  Point p=geoFactory.createPoint(new Coordinate(points[0],points[1]));  return p;}  }
class C{  public void addToCqMap(CqQueryImpl cq) throws CqExistsException, CqException {  String sCqName=cq.getServerCqName();  if (logger.isDebugEnabled()) {    logger.debug("Adding to CQ Repository. CqName : {} ServerCqName : {}",cq.getName(),sCqName);  }  HashMap<String,CqQueryImpl> cqMap=cqQueryMap;  if (cqMap.containsKey(sCqName)) {    throw new CqExistsException(LocalizedStrings.CqService_A_CQ_WITH_THE_GIVEN_NAME_0_ALREADY_EXISTS.toLocalizedString(sCqName));  }synchronized (cqQueryMapLock) {    HashMap<String,CqQueryImpl> tmpCqQueryMap=new HashMap<String,CqQueryImpl>(cqQueryMap);    try {      tmpCqQueryMap.put(sCqName,cq);    } catch (    Exception ex) {      StringId errMsg=LocalizedStrings.CqQueryImpl_FAILED_TO_STORE_CONTINUOUS_QUERY_IN_THE_REPOSITORY_CQNAME_0_1;      Object[] errMsgArgs=new Object[]{sCqName,ex.getLocalizedMessage()};      String s=errMsg.toLocalizedString(errMsgArgs);      logger.error(s);      throw new CqException(s,ex);    }    UserAttributes attributes=UserAttributes.userAttributes.get();    if (attributes != null) {      this.cqNameToUserAttributesMap.put(cq.getName(),attributes);    }    cqQueryMap=tmpCqQueryMap;  }}  }
class C{  protected void addNamePropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_NamedElement_name_feature"),getString("_UI_PropertyDescriptor_description","_UI_NamedElement_name_feature","_UI_NamedElement_type"),BasePackage.Literals.NAMED_ELEMENT__NAME,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public static <T>T createFirst(String... classNames){  for (  String className : classNames) {    try {      return (T)Class.forName(className).newInstance();    } catch (    Throwable t) {    }  }  return null;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isEnd() throws IOException {  int code;  if (_offset < _length)   code=(_buffer[_offset] & 0xff); else {    code=read();    if (code >= 0)     _offset--;  }  return (code < 0 || code == 'Z');}  }
class C{  public static token next_token() throws java.io.IOException {  return real_next_token();}  }
class C{  public JToolBar(int orientation){  this(null,orientation);}  }
class C{  public static LazyQueryContainer createLazyQueryContainer(final BeanQueryFactory<? extends AbstractBeanQuery<?>> queryFactory){  queryFactory.setQueryConfiguration(Collections.emptyMap());  return new LazyQueryContainer(new LazyQueryDefinition(true,20,SPUILabelDefinitions.VAR_NAME),queryFactory);}  }
class C{  private void computeRestDistance(){  Vector2 p1=new Vector2(ControlUtilities.getDoubleValue(this.txtX1),ControlUtilities.getDoubleValue(this.txtY1));  Vector2 p2=new Vector2(ControlUtilities.getDoubleValue(this.txtX2),ControlUtilities.getDoubleValue(this.txtY2));  double d=p1.distance(p2);  this.txtRestDistance.setValue(d);}  }
class C{  private ReportFrequency(int days){  m_days=days;}  }
class C{  private static RemoteStub createStub(Class<?> remoteClass,RemoteRef ref) throws StubNotFoundException {  String stubname=remoteClass.getName() + "_Stub";  try {    Class<?> stubcl=Class.forName(stubname,false,remoteClass.getClassLoader());    Constructor<?> cons=stubcl.getConstructor(stubConsParamTypes);    return (RemoteStub)cons.newInstance(new Object[]{ref});  } catch (  ClassNotFoundException e) {    throw new StubNotFoundException("Stub class not found: " + stubname,e);  }catch (  NoSuchMethodException e) {    throw new StubNotFoundException("Stub class missing constructor: " + stubname,e);  }catch (  InstantiationException e) {    throw new StubNotFoundException("Can't create instance of stub class: " + stubname,e);  }catch (  IllegalAccessException e) {    throw new StubNotFoundException("Stub class constructor not public: " + stubname,e);  }catch (  InvocationTargetException e) {    throw new StubNotFoundException("Exception creating instance of stub class: " + stubname,e);  }catch (  ClassCastException e) {    throw new StubNotFoundException("Stub class not instance of RemoteStub: " + stubname,e);  }}  }
class C{  public final static boolean isPchar(char c){  return isUnreserved(c) || isSubDelimiter(c) || c == ':' || c == '@';}  }
class C{  public boolean isLiteral(){  return literal_var;}  }
class C{  public static boolean saveAllDirtyEditors(final WorkbenchPartSaveableFilter filter){  final IWorkbench workbench=PlatformUI.getWorkbench();  boolean saveResult=false;  boolean reflectionError=false;  try {    final Class iShellProviderClass=CheckinControl.class.getClassLoader().loadClass("org.eclipse.jface.window.IShellProvider");    final Class iSaveableFilterClass=CheckinControl.class.getClassLoader().loadClass("org.eclipse.ui.ISaveableFilter");    final Class[] parameters=new Class[4];    parameters[0]=iShellProviderClass;    parameters[1]=IRunnableContext.class;    parameters[2]=iSaveableFilterClass;    parameters[3]=Boolean.TYPE;    final Method m=workbench.getClass().getMethod("saveAll",parameters);    final Object[] arguments=new Object[4];    arguments[0]=workbench.getActiveWorkbenchWindow();    arguments[1]=workbench.getActiveWorkbenchWindow();    arguments[2]=new WorkbenchPartSaveableFilterAdapter(filter);    arguments[3]=Boolean.TRUE;    try {      final Boolean result=(Boolean)m.invoke(workbench,arguments);      saveResult=result.booleanValue();    } catch (    final Exception e) {      saveResult=false;    }  } catch (  final ClassNotFoundException e) {    reflectionError=true;  }catch (  final NoSuchMethodException e) {    reflectionError=true;  }  if (reflectionError) {    saveResult=workbench.saveAllEditors(true);  }  return saveResult;}  }
class C{  public MekaPanel(){  super();  initialize();  initGUI();  finishInit();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String inputFilesString=null;  WhiteboxRaster.DataScale dataScale=WhiteboxRaster.DataScale.CONTINUOUS;  String[] imageFiles;  int numImages=0;  int i;  int progress;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    } else     if (i == 1) {      if (args[i].toLowerCase().contains("bool")) {        dataScale=WhiteboxRaster.DataScale.BOOLEAN;      } else       if (args[i].toLowerCase().contains("cat")) {        dataScale=WhiteboxRaster.DataScale.CATEGORICAL;      } else       if (args[i].toLowerCase().contains("con")) {        dataScale=WhiteboxRaster.DataScale.CONTINUOUS;      } else       if (args[i].toLowerCase().contains("rgb")) {        dataScale=WhiteboxRaster.DataScale.RGB;      }    }  }  if (inputFilesString == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    imageFiles=inputFilesString.split(";");    numImages=imageFiles.length;    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      inputHeader=imageFiles[i];      WhiteboxRaster wbr=new WhiteboxRaster(inputHeader,"r");      if (dataScale == WhiteboxRaster.DataScale.RGB && wbr.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("Data scale RGB is only compatible with data type 'float'. " + "This tool will not execute");        return;      }      wbr.setDataScale(dataScale);      wbr.writeHeaderFile();      wbr.close();    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  public ExpansionHandler(Vertx vertx,final ResourceStorage storage,HttpClient httpClient,final Map<String,Object> properties,String serverRoot,final String rulesPath){  this.httpClient=httpClient;  this.properties=properties;  this.serverRoot=serverRoot;  initParameterRemovalLists();  initConfigurationValues();  this.ruleProvider=new RuleProvider(vertx,rulesPath,storage,properties);  this.ruleProvider.registerObserver(this);}  }
class C{  public N4InterfaceDeclaration createN4InterfaceDeclaration(){  N4InterfaceDeclarationImpl n4InterfaceDeclaration=new N4InterfaceDeclarationImpl();  return n4InterfaceDeclaration;}  }
class C{  public final HashCode append(Object value){  return hashCode.append(value);}  }
class C{  public void print(String data,String charset) throws IOException, IllegalStateException {  LOG.trace("enter HttpConnection.print(String)");  write(EncodingUtil.getBytes(data,charset));}  }
class C{  public void removeAllEntitlements(){  entitlements.clear();}  }
class C{  public static Element translateXML(Element from,String namespace){  Element to=from.getOwnerDocument().createElementNS(namespace,from.getLocalName());  NodeList nl=from.getChildNodes();  int length=nl.getLength();  for (int i=0; i < length; i++) {    Node node=nl.item(i);    Node newNode;    if (node.getNodeType() == Node.ELEMENT_NODE) {      newNode=translateXML((Element)node,namespace);    } else {      newNode=node.cloneNode(true);    }    to.appendChild(newNode);  }  NamedNodeMap m=from.getAttributes();  for (int i=0; i < m.getLength(); i++) {    Node attr=m.item(i);    to.setAttribute(attr.getNodeName(),attr.getNodeValue());  }  return to;}  }
class C{  public void finish() throws IOException {  if (!def.finished()) {    def.finish();    while (!def.finished()) {      deflate();    }  }}  }
class C{  public void printStats(List<? extends JCTree> trees) throws IOException {  for (List<? extends JCTree> l=trees; l.nonEmpty(); l=l.tail) {    if (isSuppressed(l.head))     continue;    if (!suppressAlignmentForEmptyLines(l.head))     align();    printStat(l.head);    println();  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public Intent putExtra(String name,double[] value){  if (mExtras == null) {    mExtras=new Bundle();  }  mExtras.putDoubleArray(name,value);  return this;}  }
class C{  public BlockChain(Context params,List<? extends Wallet> wallets,BlockStore blockStore) throws BlockStoreException {  super(params,wallets,blockStore);  this.blockStore=blockStore;}  }
class C{  public DenseTernaryPolynomial(int[] coeffs){  super(coeffs);  checkTernarity();}  }
class C{  public boolean isClosed(){  return this.closed.get();}  }
class C{  public void close() throws java.io.IOException {  out.writeBytes(PREFIX);  out.writeBytes(boundary);  out.writeBytes(PREFIX);  out.writeBytes(NEWLINE);  out.flush();  out.close();}  }
class C{  @Override public void pool(){  getBot().log(this,"Pool",Bot.FINE);  for (  Sense sense : getSenses().values()) {    try {      sense.pool();    } catch (    Exception exception) {      getBot().log(this,exception);    }  }  for (  Tool tool : getTools().values()) {    try {      tool.pool();    } catch (    Exception exception) {      getBot().log(this,exception);    }  }}  }
class C{  public MyTextArea(){  super(null,0,0);  setText("");}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public ShortMemberValue(ConstPool cp){  super('S',cp);  setValue((short)0);}  }
class C{  private void checkClass() throws ApplicationException {  if (clazz == null)   throw new ApplicationException("attribute class must be defined");}  }
class C{  protected boolean handle(){  setOutput();  waitChange(inputs);  return true;}  }
class C{  public static String findCodeBaseInClassPath(@Nonnull String codeBaseName,String classPath){  if (classPath == null) {    return null;  }  StringTokenizer tok=new StringTokenizer(classPath,File.pathSeparator);  while (tok.hasMoreTokens()) {    String t=tok.nextToken();    File f=new File(t);    if (f.getName().equals(codeBaseName)) {      return t;    }  }  return null;}  }
class C{  default Collection<PsiElement> keywords(){  return Util.findKeywords(getNode());}  }
class C{  private TreeNode(long nodeValue,SnmpMibAgent agent,TreeNode sup){  this.nodeValue=nodeValue;  this.parent=sup;  agents.addElement(agent);}  }
class C{  public static void takeScreenshot(final String tag){  if (scenario == null) {    throw new ScreenshotException("Error taking screenshot: I'm missing a valid test scenario to attach the screenshot to");  }  SpoonScreenshotAction.perform(tag);  final File screenshot=SpoonScreenshotAction.getLastScreenshot();  if (screenshot == null) {    throw new ScreenshotException("Screenshot was not taken correctly, check for failures in screenshot library");  }  FileInputStream screenshotStream=null;  try {    screenshotStream=new FileInputStream(screenshot);    final byte fileContent[]=new byte[(int)screenshot.length()];    final int readImageBytes=screenshotStream.read(fileContent);    if (readImageBytes != -1) {      scenario.embed(fileContent,"image/png");    }  } catch (  final IOException ioe) {    throw new ScreenshotException("Exception while reading file " + ioe);  } finally {    try {      if (screenshotStream != null) {        screenshotStream.close();      }    } catch (    final IOException ioe) {      throw new ScreenshotException("Error while closing screenshot stream: " + ioe);    }  }}  }
class C{  public boolean isImageSharingSupported(){  return mImageSharing;}  }
class C{  @After public void tearDown() throws Exception {  for (  Thread thread : stuckThreads) {    thread.interrupt();  }  stuckThreads.clear();}  }
class C{  @Override public void zoomOut(){  renderer.camera.zoom(false);}  }
class C{  public void filter(Rectangle rect){  float x1=rect.x;  float y1=rect.y;  float x2=rect.x + rect.width;  float y2=rect.y + rect.height;  List<F> newEntries=new ArrayList<F>();  TIntObjectHashMap<List<F>> newIndex=new TIntObjectHashMap<List<F>>();  for (  F le : featureList) {    if (le.getLocation().getOrdinate(0).floatValue() >= x1 && le.getLocation().getOrdinate(0).floatValue() <= x2 && le.getLocation().getOrdinate(1).floatValue() >= y1 && le.getLocation().getOrdinate(1).floatValue() <= y2) {      newEntries.add(le);      if (!newIndex.containsKey(le.id))       newIndex.put(le.id,new ArrayList<F>());      newIndex.get(le.id).add(le);    }  }  featureList=newEntries;  iterator=featureList.iterator();  current=null;}  }
class C{  private void unregisterRoute(String requestUrl){  String routedUrl=getRoutedUrlSegment(requestUrl);  log.debug("Unregister route " + routedUrl);  routeRepository.removeRoute(routedUrl);}  }
class C{  public boolean isReturnval(){  return returnval;}  }
class C{  void write(Environment env,DataOutputStream out,ConstantPool tab) throws IOException {  trim_ranges();  out.writeShort(len);  for (int i=0; i < len; i++) {    out.writeShort(locals[i].from);    out.writeShort(locals[i].to - locals[i].from);    out.writeShort(tab.index(locals[i].field.getName().toString()));    out.writeShort(tab.index(locals[i].field.getType().getTypeSignature()));    out.writeShort(locals[i].slot);  }}  }
class C{  public void printTree(){  System.out.println("Root is: " + vertices.get(root));  System.out.print("Edges: ");  for (int i=0; i < parent.length; i++) {    if (parent[i] != -1) {      System.out.print("(" + vertices.get(parent[i]) + ", "+ vertices.get(i)+ ") ");    }  }  System.out.println();}  }
class C{  public String toStandardNotation(){  String specialStr=getSpecialNumberString();  if (specialStr != null)   return specialStr;  int[] magnitude=new int[1];  String sigDigits=extractSignificantDigits(true,magnitude);  int decimalPointPos=magnitude[0] + 1;  String num=sigDigits;  if (sigDigits.charAt(0) == '.') {    num="0" + sigDigits;  } else   if (decimalPointPos < 0) {    num="0." + stringOfChar('0',-decimalPointPos) + sigDigits;  } else   if (sigDigits.indexOf('.') == -1) {    int numZeroes=decimalPointPos - sigDigits.length();    String zeroes=stringOfChar('0',numZeroes);    num=sigDigits + zeroes + ".0";  }  if (this.isNegative())   return "-" + num;  return num;}  }
class C{  public void validatorInit() throws Exception {  _keyGenerator.setCoordinator(_coordinator);  _keyGenerator.cacheInit();}  }
class C{  public DoubleLazyValue(Collection<? super DoubleLazyValue> collection,DoubleSupplier supplier){  this.supplier=supplier;  collection.add(this);}  }
class C{  public static Route join(final Route r1,final Route r2){  if (r1 == null || r2 == null) {    return null;  }  if (r1.numberOfSteps() == 0) {    if (!r1.getStart().equals(r2.getStart())) {      throw new IllegalArgumentException("Cannot join, r1 doesnt end where r2 starts. r1:" + r1 + " r2:"+ r2);    }  } else {    if (!r1.getEnd().equals(r2.getStart())) {      throw new IllegalArgumentException("Cannot join, r1 doesnt end where r2 starts. r1:" + r1 + " r2:"+ r2);    }  }  final Collection<Territory> c1=new ArrayList<>(r1.m_steps);  c1.add(r1.getStart());  final Collection<Territory> c2=new ArrayList<>(r2.m_steps);  if (!Util.intersection(c1,c2).isEmpty()) {    return null;  }  final Route joined=new Route();  joined.setStart(r1.getStart());  for (  final Territory t : r1.getSteps()) {    joined.add(t);  }  for (  final Territory t : r2.getSteps()) {    joined.add(t);  }  return joined;}  }
class C{  @Override public void unlinkModel(){  int max=mFieldViews.size();  for (int i=0; i < max; ++i) {    FieldView fieldView=mFieldViews.get(i);    fieldView.unlinkField();  }  if (mConnectedGroup != null) {    mConnectedGroup.unlinkModel();    mConnectedGroup=null;  }  removeAllViews();  mInput.setView(null);}  }
class C{  @SuppressWarnings("unchecked") private synchronized void notifyBatchClassifierListeners(BatchClassifierEvent ce){  if (Thread.currentThread().isInterrupted()) {    return;  }  Vector<BatchClassifierListener> l;synchronized (this) {    l=(Vector<BatchClassifierListener>)m_batchClassifierListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      if (l.size() > 1) {        try {          weka.classifiers.Classifier newC=weka.classifiers.AbstractClassifier.makeCopy(ce.getClassifier());          BatchClassifierEvent ne=new BatchClassifierEvent(Classifier.this,newC,ce.getTrainSet(),ce.getTestSet(),ce.getRunNumber(),ce.getMaxRunNumber(),ce.getSetNumber(),ce.getMaxSetNumber());          l.elementAt(i).acceptClassifier(ne);        } catch (        Exception e) {          stop();          if (m_log != null) {            String msg=statusMessagePrefix() + "ERROR: unable to make copy of classifier - see log ";            m_log.logMessage("[Classifier] " + msg + " ("+ e.getMessage()+ ")");            m_log.statusMessage(msg);          }          e.printStackTrace();          break;        }      } else {        l.elementAt(i).acceptClassifier(ce);      }    }  }}  }
class C{  public static Map<String,Object> checkRoutingTaskAssoc(DispatchContext ctx,Map<String,? extends Object> context){  Delegator delegator=ctx.getDelegator();  Map<String,Object> result=FastMap.newInstance();  String sequenceNumNotOk="N";  Locale locale=(Locale)context.get("locale");  String workEffortIdFrom=(String)context.get("workEffortIdFrom");  String workEffortIdTo=(String)context.get("workEffortIdTo");  String workEffortAssocTypeId=(String)context.get("workEffortAssocTypeId");  Long sequenceNum=(Long)context.get("sequenceNum");  Timestamp fromDate=(Timestamp)context.get("fromDate");  Timestamp thruDate=(Timestamp)context.get("thruDate");  String create=(String)context.get("create");  boolean createProcess=(create != null && create.equals("Y")) ? true : false;  List<GenericValue> listRoutingTaskAssoc=null;  try {    listRoutingTaskAssoc=EntityQuery.use(delegator).from("WorkEffortAssoc").where("workEffortIdFrom",workEffortIdFrom,"sequenceNum",sequenceNum).orderBy("fromDate").queryList();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"ManufacturingTechDataWorkEffortAssocNotExist",UtilMisc.toMap("errorString",e.toString()),locale));  }  if (listRoutingTaskAssoc != null) {    for (    GenericValue routingTaskAssoc : listRoutingTaskAssoc) {      if (!workEffortIdFrom.equals(routingTaskAssoc.getString("workEffortIdFrom")) || !workEffortIdTo.equals(routingTaskAssoc.getString("workEffortIdTo")) || !workEffortAssocTypeId.equals(routingTaskAssoc.getString("workEffortAssocTypeId"))|| !sequenceNum.equals(routingTaskAssoc.getLong("sequenceNum"))) {        if (routingTaskAssoc.getTimestamp("thruDate") == null && routingTaskAssoc.getTimestamp("fromDate") == null)         sequenceNumNotOk="Y"; else         if (routingTaskAssoc.getTimestamp("thruDate") == null) {          if (thruDate == null)           sequenceNumNotOk="Y"; else           if (thruDate.after(routingTaskAssoc.getTimestamp("fromDate")))           sequenceNumNotOk="Y";        } else         if (routingTaskAssoc.getTimestamp("fromDate") == null) {          if (fromDate == null)           sequenceNumNotOk="Y"; else           if (fromDate.before(routingTaskAssoc.getTimestamp("thruDate")))           sequenceNumNotOk="Y";        } else         if (fromDate == null && thruDate == null)         sequenceNumNotOk="Y"; else         if (thruDate == null) {          if (fromDate.before(routingTaskAssoc.getTimestamp("thruDate")))           sequenceNumNotOk="Y";        } else         if (fromDate == null) {          if (thruDate.after(routingTaskAssoc.getTimestamp("fromDate")))           sequenceNumNotOk="Y";        } else         if (routingTaskAssoc.getTimestamp("fromDate").before(thruDate) && fromDate.before(routingTaskAssoc.getTimestamp("thruDate")))         sequenceNumNotOk="Y";      } else       if (createProcess)       sequenceNumNotOk="Y";    }  }  result.put("sequenceNumNotOk",sequenceNumNotOk);  return result;}  }
class C{  private String computeConfigurationName(String testerId,URI moduleToTest){  String modulePath=moduleToTest.path();  modulePath=stripStart(modulePath,"/","resource/","plugin/");  final String moduleName=modulePath.replace('/','-');  final String runnerName=testerRegistry.getDescriptor(testerId).getName();  return moduleName + " (" + runnerName+ ")";}  }
class C{  private void createFields(){  List<?> rowList=advancedPanel.getChildren();  int row=rowList.size() - 1;  createFields(null,row);}  }
class C{  public static CachedDeserializable create(CachedDeserializable cd){  if (STORE_ALL_VALUE_FORMS) {    return cd;  } else   if (PREFER_DESERIALIZED) {    if (cd instanceof PreferBytesCachedDeserializable) {      return cd;    } else {      return new VMCachedDeserializable((VMCachedDeserializable)cd);    }  } else {    return cd;  }}  }
class C{  public boolean isExists(){  return exists;}  }
class C{  public void storeLocal(final int local){  storeInsn(getLocalType(local),local);}  }
class C{  public static ArrayList<String> matches(String text,int results){  ArrayList<String> urls=new ArrayList<String>();  String[] splitString=(text.split(" "));  for (  String string : splitString) {    try {      URL item=new URL(string);      urls.add(item.toString());    } catch (    Exception e) {    }    if (results == FIRST && urls.size() > 0)     break;  }  return urls;}  }
class C{  public StoryObject(int id,boolean deleted){  this.id=id;  this.deleted=deleted;}  }
class C{  public String returnVarNameIfNullCheck(JCStatement stat){  if (!(stat instanceof JCIf))   return null;{    JCStatement then=((JCIf)stat).thenpart;    if (then instanceof JCBlock) {      List<JCStatement> stats=((JCBlock)then).stats;      if (stats.length() == 0)       return null;      then=stats.get(0);    }    if (!(then instanceof JCThrow))     return null;  }{    JCExpression cond=((JCIf)stat).cond;    while (cond instanceof JCParens)     cond=((JCParens)cond).expr;    if (!(cond instanceof JCBinary))     return null;    JCBinary bin=(JCBinary)cond;    if (!CTC_EQUAL.equals(treeTag(bin)))     return null;    if (!(bin.lhs instanceof JCIdent))     return null;    if (!(bin.rhs instanceof JCLiteral))     return null;    if (!CTC_BOT.equals(typeTag(bin.rhs)))     return null;    return ((JCIdent)bin.lhs).name.toString();  }}  }
class C{  public static int floorMod(final int x,final int y){  return x - floorDiv(x,y) * y;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static Bundle retrievePassThroughData(Intent queryConditionIntent){  return (Bundle)getExtraValueSafe(queryConditionIntent,EXTRA_REQUEST_QUERY_PASS_THROUGH_DATA,Bundle.class,"retrievePassThroughData");}  }
class C{  @Override public final void perform(IR ir){  if (!ir.method.isInterruptible() || ir.method.getDeclaringClass().isInBootImage() || !Instrumentation.instrumentationEnabled()) {    return;  }  StringEventCounterData data=AOSDatabase.instructionCounterData;  ArrayList<BasicBlock> bbList=new ArrayList<BasicBlock>();  for (Enumeration<BasicBlock> bbe=ir.getBasicBlocks(); bbe.hasMoreElements(); ) {    BasicBlock bb=bbe.nextElement();    bbList.add(bb);  }  for (  BasicBlock bb : bbList) {    ArrayList<Instruction> iList=new ArrayList<Instruction>();    Instruction inst=bb.firstInstruction();    while (inst != null && inst != bb.lastInstruction()) {      iList.add(inst);      inst=inst.nextInstructionInCodeOrder();    }    for (    Instruction i : iList) {      if (i.operator() == LABEL || Prologue.conforms(i)) {        continue;      }      if (i.isBranch() || i.operator() == RETURN) {        Instruction prev=i.prevInstructionInCodeOrder();        if (prev.isBranch()) {          bb.splitNodeWithLinksAt(prev,ir);          bb.recomputeNormalOut(ir);        }        Instruction counterInst=data.getCounterInstructionForEvent(i.operator().toString());        i.insertBefore(counterInst);      } else {        Instruction counterInst=data.getCounterInstructionForEvent(i.operator().toString());        i.insertBefore(counterInst);      }    }  }}  }
class C{  public TReplicationJob(TReplicationJob other){  __isset_bitfield=other.__isset_bitfield;  this.id=other.id;  this.createTime=other.createTime;  this.updateTime=other.updateTime;  if (other.isSetOperation()) {    this.operation=other.operation;  }  if (other.isSetStatus()) {    this.status=other.status;  }  if (other.isSetSrcPath()) {    this.srcPath=other.srcPath;  }  if (other.isSetSrcCluster()) {    this.srcCluster=other.srcCluster;  }  if (other.isSetSrcDb()) {    this.srcDb=other.srcDb;  }  if (other.isSetSrcTable()) {    this.srcTable=other.srcTable;  }  if (other.isSetSrcPartitions()) {    List<String> __this__srcPartitions=new ArrayList<String>(other.srcPartitions);    this.srcPartitions=__this__srcPartitions;  }  if (other.isSetSrcModifiedTime()) {    this.srcModifiedTime=other.srcModifiedTime;  }  if (other.isSetRenameToDb()) {    this.renameToDb=other.renameToDb;  }  if (other.isSetRenameToTable()) {    this.renameToTable=other.renameToTable;  }  if (other.isSetRenameToPath()) {    this.renameToPath=other.renameToPath;  }  if (other.isSetExtras()) {    Map<String,String> __this__extras=new HashMap<String,String>(other.extras);    this.extras=__this__extras;  }  if (other.isSetWaitingOnJobs()) {    List<Long> __this__waitingOnJobs=new ArrayList<Long>(other.waitingOnJobs);    this.waitingOnJobs=__this__waitingOnJobs;  }}  }
class C{  @Override public <T>void inject(T bean,String prefix){  Objects.requireNonNull(bean);  ConfigStub stub=new ConfigStub(bean.getClass(),prefix);  stub.inject(bean,this);}  }
class C{  public static float turbulence2(float x,float y,float octaves){  float t=0.0f;  for (float f=1.0f; f <= octaves; f*=2)   t+=Math.abs(noise2(f * x,f * y)) / f;  return t;}  }
class C{  public FullSyncRequestMessage(FullSyncRequestMessage other){  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }}  }
class C{  @Override public boolean supportsOrderByUnrelated(){  debugCodeCall("supportsOrderByUnrelated");  return true;}  }
class C{  public boolean isCacheEnabled(){  return isCacheEnabled;}  }
class C{  public boolean isSignatureValid(ContentVerifierProvider verifierProvider) throws CertException {  TBSCertList tbsCRL=x509CRL.getTBSCertList();  if (!CertUtils.isAlgIdEqual(tbsCRL.getSignature(),x509CRL.getSignatureAlgorithm())) {    throw new CertException("signature invalid - algorithm identifier mismatch");  }  ContentVerifier verifier;  try {    verifier=verifierProvider.get((tbsCRL.getSignature()));    OutputStream sOut=verifier.getOutputStream();    DEROutputStream dOut=new DEROutputStream(sOut);    dOut.writeObject(tbsCRL);    sOut.close();  } catch (  Exception e) {    throw new CertException("unable to process signature: " + e.getMessage(),e);  }  return verifier.verify(x509CRL.getSignature().getBytes());}  }
class C{  public GenericDecoder(InputStream is,String enc) throws IOException {  reader=new InputStreamReader(is,enc);  reader=new BufferedReader(reader);}  }
class C{  public boolean isSlow(String testPath){  for (  String prefix : getPrefixes(testPath)) {    if (mSlowList.contains(prefix)) {      return true;    }  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected void waitForActiveReaders() throws InterruptedException {  activeReaders.waitForActiveLocks();}  }
class C{  @Override public void process(Number tuple){  numList.add(tuple);}  }
class C{  @Override public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){  Intent intent;switch (CommService.elm.getService()) {case ObdProt.OBD_SVC_DATA:    EcuDataPv pv=(EcuDataPv)getListAdapter().getItem(position);  if (pv.get(EcuDataPv.FID_VALUE) instanceof Number) {    DashBoardActivity.setAdapter(getListAdapter());    intent=new Intent(this,DashBoardActivity.class);    intent.putExtra(DashBoardActivity.POSITIONS,new int[]{position});    startActivity(intent);  }break;case ObdProt.OBD_SVC_READ_CODES:case ObdProt.OBD_SVC_PERMACODES:case ObdProt.OBD_SVC_PENDINGCODES:intent=new Intent(Intent.ACTION_WEB_SEARCH);EcuCodeItem dfc=(EcuCodeItem)getListAdapter().getItem(position);intent.putExtra(SearchManager.QUERY,"OBD " + String.valueOf(dfc.get(EcuCodeItem.FID_CODE)));startActivity(intent);break;}return true;}  }
class C{  public void testTwoHeadDelimiters() throws Exception {  byte[] delim=array(F.t(wrap(2),8));  byte[] data=array(F.t(delim,2),F.t(wrap(1),8));  assertSplit(0,4,0,8,data,delim);  assertSplit(0,8,0,8,data,delim);  assertSplit(0,12,0,16,data,delim);  assertSplit(0,16,0,16,data,delim);  assertSplit(0,20,0,24,data,delim);  assertSplit(0,24,0,24,data,delim);  assertSplitNull(2,2,data,delim);  assertSplitNull(2,6,data,delim);  assertSplit(2,10,8,8,data,delim);  assertSplit(2,14,8,8,data,delim);  assertSplit(2,18,8,16,data,delim);  assertSplit(2,22,8,16,data,delim);  assertSplit(8,4,8,8,data,delim);  assertSplit(8,8,8,8,data,delim);  assertSplit(8,12,8,16,data,delim);  assertSplit(8,16,8,16,data,delim);  assertSplitNull(10,2,data,delim);  assertSplitNull(10,6,data,delim);  assertSplit(10,10,16,8,data,delim);  assertSplit(10,14,16,8,data,delim);  assertSplit(16,4,16,8,data,delim);  assertSplit(16,8,16,8,data,delim);  assertSplitNull(18,2,data,delim);  assertSplitNull(18,6,data,delim);}  }
class C{  public boolean matchChomp(String seq){  if (matches(seq)) {    pos+=seq.length();    return true;  } else {    return false;  }}  }
class C{  public boolean isUseMipMaps(){  return this.useMipMaps;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:46.796 -0500",hash_original_method="0756746AA6CF68909818DDB3CD0E35A6",hash_generated_method="012518DF28A847B89A0EC7757AC5802D") public void restoreFinished(int error){}  }
class C{  @Override public void onExceededDatabaseQuota(String url,String databaseIdentifier,long currentQuota,long estimatedSize,long totalUsedQuota,WebStorage.QuotaUpdater quotaUpdater){  LOG.d(TAG,"onExceededDatabaseQuota estimatedSize: %d  currentQuota: %d  totalUsedQuota: %d",estimatedSize,currentQuota,totalUsedQuota);  quotaUpdater.updateQuota(MAX_QUOTA);}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public final boolean equals(Object obj){  if (toString() == null) {    return (obj != null) && (obj.toString() == null);  }  if (obj instanceof Encoding) {    return toString().equals(obj.toString());  }  return false;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_documentinvalidcharacterexceptioncreateelement1.class,args);}  }
class C{  public static Map<String,Integer> diffAndFindNewVolumes(final ExportMask mask,final Map<String,Integer> discoveredVolumes){  Map<String,Integer> volumesToAdd=new HashMap<>();  for (  String volumeWWN : discoveredVolumes.keySet()) {    Integer hlu=discoveredVolumes.get(volumeWWN);    String normalizedWWN=BlockObject.normalizeWWN(volumeWWN);    if (!mask.hasExistingVolume(normalizedWWN) && !mask.hasUserCreatedVolume(normalizedWWN)) {      if (hlu != null) {        volumesToAdd.put(normalizedWWN,hlu);      } else {        _log.info("Volume {} does not have an HLU. It could be getting assigned.",normalizedWWN);      }    }  }  return volumesToAdd;}  }
class C{  public void startChatActivity(Context context,Peer peer,boolean compose){  Bundle b=new Bundle();  b.putLong(Intents.EXTRA_CHAT_PEER,peer.getUnuqueId());  b.putBoolean(Intents.EXTRA_CHAT_COMPOSE,compose);  if (!startDelegateActivity(context,delegate.getChatIntent(peer,compose),b,new int[]{Intent.FLAG_ACTIVITY_SINGLE_TOP})) {    startActivity(context,b,ChatActivity.class);  }}  }
class C{  public void init(StreamImpl next){  _next=next;  _crc=0;}  }
class C{  public boolean isEditable(){  return editable;}  }
class C{  public ImageCacheParams(Context context,String rootDirectory,int maxCacheSizeInBytes){  diskCacheDir=Utils.getDiskCacheDir(context,rootDirectory);  memCacheSize=maxCacheSizeInBytes;}  }
class C{  void updateUsbMassStorageNotification(boolean available){  if (available) {    Intent intent=new Intent();    intent.setClass(mContext,com.android.systemui.usb.UsbStorageActivity.class);    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    PendingIntent pi=PendingIntent.getActivity(mContext,0,intent,0);    setUsbStorageNotification(com.android.internal.R.string.usb_storage_notification_title,com.android.internal.R.string.usb_storage_notification_message,com.android.internal.R.drawable.stat_sys_data_usb,false,true,pi);  } else {    setUsbStorageNotification(0,0,0,false,false,null);  }}  }
class C{  public void swap(final Type prev,final Type type){  if (type.getSize() == 1) {    if (prev.getSize() == 1) {      swap();    } else {      dupX2();      pop();    }  } else {    if (prev.getSize() == 1) {      dup2X1();      pop2();    } else {      dup2X2();      pop2();    }  }}  }
class C{  public int size(){  return size;}  }
class C{  public SequenceResource(String mimetype,Iterable<Resource> resources){  super(mimetype);  this.resources=resources;}  }
class C{  public BST(E[] objects){  for (int i=0; i < objects.length; i++)   insert(objects[i]);}  }
class C{  static StreamTokenizer makeTokenizer(String tagValue){  StreamTokenizer tokenizer=new StreamTokenizer(new StringReader(tagValue));  tokenizer.resetSyntax();  tokenizer.wordChars('A','Z');  tokenizer.wordChars('a','z');  tokenizer.wordChars('0','9');  tokenizer.wordChars('-','-');  tokenizer.wordChars('_','_');  tokenizer.wordChars('.','.');  tokenizer.wordChars('<','<');  tokenizer.wordChars('>','>');  tokenizer.quoteChar('\'');  tokenizer.quoteChar('"');  tokenizer.whitespaceChars(' ',' ');  tokenizer.whitespaceChars('\t','\t');  tokenizer.whitespaceChars('\n','\n');  tokenizer.whitespaceChars('\r','\r');  tokenizer.eolIsSignificant(false);  return tokenizer;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static double length(double x1,double y1,double x2,double y2){  return sqrt(length2(x1,y1,x2,y2));}  }
class C{  @Override void notifyPeekAndTakeThreads(){  blockCond.signalAll();}  }
class C{  public int deleteSubtype(String type,String subtype){  SQLiteDatabase db=this.getWritableDatabase();  return db.delete(TABLE_TIMES,KEY_TYPE + "=? AND " + KEY_SUBTYPE+ " = ?",new String[]{type,subtype});}  }
class C{  public static InputStream toInputStream(String input,String encoding) throws IOException {  byte[] bytes=encoding != null ? input.getBytes(encoding) : input.getBytes();  return new ByteArrayInputStream(bytes);}  }
class C{  public void deleteGlobalComment(final IComment comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException {  try {    m_edge.deleteGlobalComment(comment);  } catch (  final CouldntDeleteException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }}  }
class C{  public static long resetLockedMeta(long state){  if ((state & META_CAP_LOCKED) != 0) {    state&=~META_SHIFT_MASK;  }  if ((state & META_ALT_LOCKED) != 0) {    state&=~META_ALT_MASK;  }  if ((state & META_SYM_LOCKED) != 0) {    state&=~META_SYM_MASK;  }  return state;}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  private void removeKeyAndSubFolders(String key){  Set<String> keySet=mFragment.getMusicFoldersHashMap().keySet();  String[] keyArray=new String[keySet.size()];  keySet.toArray(keyArray);  if (keyArray == null || keyArray.length == 0)   return;  for (int i=0; i < keyArray.length; i++)   if (keyArray[i].startsWith(key))   mFragment.getMusicFoldersHashMap().remove(keyArray[i]);}  }
class C{  public static RegistryClient createZookeeperClient(Config config) throws IOException {  CuratorFramework client=CuratorFrameworkFactory.builder().connectString(getZookeeperConnectionString(config)).retryPolicy(new RetryOneTime(1000)).build();  client.start();  return new ZookeeperRegistryClient(client,new ObjectMapper(),config);}  }
class C{  private void removeDefaults(Map<String,String> attributesMap,Map<String,String> defaultAttributesMap){  Set<String> attributesSet=new HashSet<String>(attributesMap.keySet());  if (attributesSet != null) {    for (    String attribute : attributesSet) {      String attributeValue=attributesMap.get(attribute);      String defaultValue=defaultAttributesMap.get(attribute);      if (attributeValue != null) {        if (attributeValue.equals(defaultValue)) {          attributesMap.remove(attribute);        }      } else {        if (defaultValue == null || defaultValue.equals("")) {          attributesMap.remove(attribute);        }      }    }  }}  }
class C{  public void zero() throws IOException {  write(0,1);}  }
class C{  public static <T>SyncSupplier<T> from(Collection<T> collection,boolean fair){  return new SyncSupplier(new ReentrantLock(fair),new ArrayList<>(collection),collection.size());}  }
class C{  private static KeyStore.PrivateKeyEntry readKeyEntryFromPems(Path privateKeyFilePath,Path certFilePath){  String keyPemFileString;  PrivateKey privateKey;  try {    keyPemFileString=readFileAsString(privateKeyFilePath);    privateKey=getPrivateKeyFromString(keyPemFileString);  } catch (  IOException|GeneralSecurityException e) {    throw new RuntimeException(String.format("Failed to read private key from file at \"%s\"",privateKeyFilePath),e);  }  Certificate[] certificates;  try {    String certPemFileString=privateKeyFilePath.equals(certFilePath) ? keyPemFileString : readFileAsString(certFilePath);    certificates=getCertificatesFromString(certPemFileString).toArray(new Certificate[0]);  } catch (  IOException|GeneralSecurityException e) {    throw new RuntimeException(String.format("Failed to read certificates from file at \"%s\"",certFilePath),e);  }  return new KeyStore.PrivateKeyEntry(privateKey,certificates);}  }
class C{  @Override protected void paintComponent(Graphics g){  Painter painter=(Painter)UIManager.get("TableHeader:\"TableHeader.renderer\"[Enabled].backgroundPainter");  if (painter != null) {    if (g instanceof Graphics2D) {      painter.paint((Graphics2D)g,this,getWidth() + 1,getHeight());    } else {      BufferedImage img=new BufferedImage(getWidth(),getHeight(),BufferedImage.TYPE_INT_ARGB);      Graphics2D g2=(Graphics2D)img.getGraphics();      painter.paint(g2,this,getWidth() + 1,getHeight());      g2.dispose();      g.drawImage(img,0,0,null);      img=null;    }  }}  }
class C{  @Listener public void onPlayerLogin(final ClientConnectionEvent.Join event){  Sponge.getScheduler().createTaskBuilder().async().delay(500,TimeUnit.MILLISECONDS).execute(null).submit(plugin);}  }
class C{  private void largeMessageSendServer(final boolean sendBlocking,final MessageInternal msgI,final ClientProducerCredits credits,SendAcknowledgementHandler handler) throws ActiveMQException {  sendInitialLargeMessageHeader(msgI,credits);  BodyEncoder context=msgI.getBodyEncoder();  final long bodySize=context.getLargeBodySize();  final int reconnectID=sessionContext.getReconnectID();  context.open();  try {    for (long pos=0; pos < bodySize; ) {      final boolean lastChunk;      final int chunkLength=(int)Math.min((bodySize - pos),minLargeMessageSize);      final ActiveMQBuffer bodyBuffer=ActiveMQBuffers.fixedBuffer(chunkLength);      context.encode(bodyBuffer,chunkLength);      pos+=chunkLength;      lastChunk=pos >= bodySize;      SendAcknowledgementHandler messageHandler=lastChunk ? handler : null;      int creditsUsed=sessionContext.sendServerLargeMessageChunk(msgI,-1,sendBlocking,lastChunk,bodyBuffer.toByteBuffer().array(),messageHandler);      credits.acquireCredits(creditsUsed);    }  }  finally {    context.close();  }}  }
class C{  public final String queryString(){  return _queryString;}  }
class C{  @Inline public static ObjectReference nullReference(){  return null;}  }
class C{  private static void decodeTextSegment(BitSource bits,StringBuilder result) throws FormatException {  boolean upperShift=false;  int[] cValues=new int[3];  int shift=0;  do {    if (bits.available() == 8) {      return;    }    int firstByte=bits.readBits(8);    if (firstByte == 254) {      return;    }    parseTwoBytes(firstByte,bits.readBits(8),cValues);    for (int i=0; i < 3; i++) {      int cValue=cValues[i];switch (shift) {case 0:        if (cValue < 3) {          shift=cValue + 1;        } else         if (cValue < TEXT_BASIC_SET_CHARS.length) {          char textChar=TEXT_BASIC_SET_CHARS[cValue];          if (upperShift) {            result.append((char)(textChar + 128));            upperShift=false;          } else {            result.append(textChar);          }        } else {          throw FormatException.getFormatInstance();        }      break;case 1:    if (upperShift) {      result.append((char)(cValue + 128));      upperShift=false;    } else {      result.append((char)cValue);    }  shift=0;break;case 2:if (cValue < C40_SHIFT2_SET_CHARS.length) {char c40char=C40_SHIFT2_SET_CHARS[cValue];if (upperShift) {  result.append((char)(c40char + 128));  upperShift=false;} else {  result.append(c40char);}} else if (cValue == 27) {result.append((char)29);} else if (cValue == 30) {upperShift=true;} else {throw FormatException.getFormatInstance();}shift=0;break;case 3:if (cValue < TEXT_SHIFT3_SET_CHARS.length) {char textChar=TEXT_SHIFT3_SET_CHARS[cValue];if (upperShift) {result.append((char)(textChar + 128));upperShift=false;} else {result.append(textChar);}shift=0;} else {throw FormatException.getFormatInstance();}break;default :throw FormatException.getFormatInstance();}}} while (bits.available() > 0);}  }
class C{  public static boolean equals(Object obj1,Object obj2){  return (obj1 != null) ? (obj1.equals(obj2)) : (obj2 == null);}  }
class C{  public RectangularWindow(LatLng center,double width,double height,LengthUnit unit){  double deltaLat=LatLngWindow.lengthToLatitudeDelta(height,unit);  double deltaLng=LatLngWindow.lengthToLongitudeDelta(width,unit,center.getLatitude());  this.setWindow(center,deltaLat,deltaLng);}  }
class C{  private void createPanboxAccount(Context context){  Log.i(AccountService.class.getSimpleName(),"Creating Panbox Account");  AccountManager am=AccountManager.get(context);  final String syncAccountName=accountName;  final String syncAccountType=accountType;  Account panboxAccount=new Account(syncAccountName,syncAccountType);  am.addAccountExplicitly(panboxAccount,null,null);}  }
class C{  public double[][][] initializeNewCountsMatrix(){  double[][][] counts=new double[numLanguages][numChars][numGlyphs];  for (int language=0; language < numLanguages; ++language) {    for (int lmChar=0; lmChar < numChars; ++lmChar) {      for (int glyph=0; glyph < numGlyphs; ++glyph) {        counts[language][lmChar][glyph]=getSmoothingValue(language,lmChar,glyph);      }    }  }  return counts;}  }
class C{  public static double gamma(double z){  if (z < 2.0) {    return (Internalgamma(z));  } else {    double multiplier=Math.floor(z / 1.2);    double remainder=z / multiplier;    double coef1=Math.pow(2.0 * Math.PI,(0.5 * (1.0 - multiplier)));    double coef2=Math.pow(multiplier,((multiplier * remainder) - 0.5));    int N=(int)multiplier;    double prod=1.0;    for (int k=0; k < N; k++) {      prod*=Internalgamma(remainder + ((double)k / multiplier));    }    return coef1 * coef2 * prod;  }}  }
class C{  @Override public void deleteObserver(final Observer observer){  for (  final Observer weakObserver : getObservers()) {    final WeakReferenceObserver weakReference=(WeakReferenceObserver)weakObserver;    final Observer referent=weakReference.get();    if (referent == null || referent.equals(observer))     deleteWeakReference(weakReference);  }}  }
class C{  @Override Map<String,Object> extractFields(String line){  if (!initialized) {    init();    initialized=true;  }  if (StringUtils.isBlank(line) || StringUtils.equals(line,header)) {    return null;  }  try {    csvStringReader.open(line);    return csvMapReader.read(nameMapping,processors);  } catch (  IOException e) {    logger.error("Error parsing line{} Exception {}",line,e.getMessage());    return null;  }}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  protected void pruneCheckList(List<CandidatePair> checkList){  List<CandidatePair> tmpCheckList=new ArrayList<>(checkList.size());  Iterator<CandidatePair> ckListIter=checkList.iterator();  while (ckListIter.hasNext()) {    CandidatePair pair=ckListIter.next();    if (tmpCheckList.size() > maxCheckListSize) {      ckListIter.remove();      continue;    }    LocalCandidate localCnd=pair.getLocalCandidate();    if (localCnd.getType() == CandidateType.SERVER_REFLEXIVE_CANDIDATE) {      pair.setLocalCandidate(localCnd.getBase());      if (tmpCheckList.contains(pair)) {        ckListIter.remove();        continue;      }    }    tmpCheckList.add(pair);  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    try {      int outBuff=((DECODABET[source[srcOffset]] & 0xFF) << 18) | ((DECODABET[source[srcOffset + 1]] & 0xFF) << 12) | ((DECODABET[source[srcOffset + 2]] & 0xFF) << 6)| ((DECODABET[source[srcOffset + 3]] & 0xFF));      destination[destOffset]=(byte)(outBuff >> 16);      destination[destOffset + 1]=(byte)(outBuff >> 8);      destination[destOffset + 2]=(byte)(outBuff);      return 3;    } catch (    Exception e) {      System.out.println("" + source[srcOffset] + ": "+ (DECODABET[source[srcOffset]]));      System.out.println("" + source[srcOffset + 1] + ": "+ (DECODABET[source[srcOffset + 1]]));      System.out.println("" + source[srcOffset + 2] + ": "+ (DECODABET[source[srcOffset + 2]]));      System.out.println("" + source[srcOffset + 3] + ": "+ (DECODABET[source[srcOffset + 3]]));      return -1;    }  }}  }
class C{  public char readChar() throws java.io.IOException {  if (inBuf > 0) {    --inBuf;    if (++bufpos == bufsize)     bufpos=0;    return buffer[bufpos];  }  if (++bufpos >= maxNextCharInd)   FillBuff();  char c=buffer[bufpos];  UpdateLineColumn(c);  return c;}  }
class C{  protected void createShapes(DrawContext dc){  this.paths=new Path[3 + this.getLegs()];  ArcData arcData=this.computeArc(dc);  List<Position> positions=this.computeArcPositions(dc,arcData);  this.paths[0]=this.createPath(positions);  this.paths[1]=this.createPath(Arrays.asList(arcData.midpoint,this.position1));  positions=this.computeArrowheadPositions(dc,this.position1,arcData);  this.paths[2]=this.createPath(positions);  this.createLegs(dc,arcData,this.paths,3,this.getLegs());}  }
class C{  private static Shape bottomEdge(BufferedImage image,GeneralPath path,int start){  int lastj=0;  Point2D p1=path.getCurrentPoint();  Point2D p2=null;  Line2D line=new Line2D.Float();  for (int i=start; i < image.getWidth(); i+=sample) {    boolean aPointExistsOnThisLine=false;    for (int j=image.getHeight() - 1; j >= 0; j-=sample) {      if ((image.getRGB(i,j) & 0xff000000) != 0) {        Point2D p=new Point2D.Float(i,j);        aPointExistsOnThisLine=true;        p2=detectLine(p1,p2,p,line,path);        lastj=j;        break;      }    }    if (aPointExistsOnThisLine == false) {      break;    }  }  return rightEdge(image,path,lastj);}  }
class C{  public HCatToAvroRecordConverter(HCatRecordJsonSerializer serializer,Set<String> anonFields,String salt){  this.serializer=serializer;  this.anonFields=anonFields;  this.salt=salt;}  }
class C{  public static Video randomVideo(){  String id=UUID.randomUUID().toString();  String title="Video-" + id;  String url="http://coursera.org/some/video-" + id;  long duration=60 * (int)Math.rint(Math.random() * 60) * 1000;  return new Video(title,url,duration);}  }
class C{  static long[] internalBuildHistogram(final DoublesSketch sketch,final double[] splitPoints){  final double[] levelsArr=sketch.getCombinedBuffer();  final double[] baseBuffer=levelsArr;  final int bbCount=sketch.getBaseBufferCount();  Util.validateValues(splitPoints);  final int numSplitPoints=splitPoints.length;  final int numCounters=numSplitPoints + 1;  final long[] counters=new long[numCounters];  long weight=1;  if (numSplitPoints < 50) {    DoublesPmfCdfImpl.bilinearTimeIncrementHistogramCounters(baseBuffer,0,bbCount,weight,splitPoints,counters);  } else {    Arrays.sort(baseBuffer,0,bbCount);    DoublesPmfCdfImpl.linearTimeIncrementHistogramCounters(baseBuffer,0,bbCount,weight,splitPoints,counters);  }  long myBitPattern=sketch.getBitPattern();  final int k=sketch.getK();  assert myBitPattern == sketch.getN() / (2L * k);  for (int lvl=0; myBitPattern != 0L; lvl++, myBitPattern>>>=1) {    weight+=weight;    if ((myBitPattern & 1L) > 0L) {      DoublesPmfCdfImpl.linearTimeIncrementHistogramCounters(levelsArr,(2 + lvl) * k,k,weight,splitPoints,counters);    }  }  return counters;}  }
class C{  public static boolean checkForUnsetEnvVar(Package toLoad,PrintStream... progress){  Object doNotLoadIfUnsetVar=toLoad.getPackageMetaDataElement("DoNotLoadIfEnvVarNotSet");  boolean result=true;  if (doNotLoadIfUnsetVar != null && doNotLoadIfUnsetVar.toString().length() > 0) {    String[] elements=doNotLoadIfUnsetVar.toString().split(",");    Environment env=Environment.getSystemWide();    for (    String var : elements) {      if (env.getVariableValue(var.trim()) == null) {        for (        PrintStream p : progress) {          p.println("[Weka] " + toLoad.getName() + " can't be loaded because "+ "the environment variable "+ var+ " is not set.");        }        result=false;        break;      }    }  }  if (!result) {    Object doNotLoadMessage=toLoad.getPackageMetaDataElement("DoNotLoadIfEnvVarNotSetMessage");    if (doNotLoadMessage != null && doNotLoadMessage.toString().length() > 0) {      for (      PrintStream p : progress) {        String dnlM=doNotLoadMessage.toString();        try {          dnlM=Environment.getSystemWide().substitute(dnlM);        } catch (        Exception e) {        }        p.println("[Weka] " + dnlM);      }    }  }  return result;}  }
class C{  public SortResponseControl(String id,boolean criticality,byte[] value) throws IOException {  super(id,criticality,value);  BerDecoder ber=new BerDecoder(value,0,value.length);  ber.parseSeq(null);  resultCode=ber.parseEnumeration();  if ((ber.bytesLeft() > 0) && (ber.peekByte() == Ber.ASN_CONTEXT)) {    badAttrId=ber.parseStringWithTag(Ber.ASN_CONTEXT,true,null);  }}  }
class C{  public static void main(String[] args){  int whichRNG=MMRandom.R_POOL36;  MMRandom rng=MMRandom.generate(whichRNG);  Roll.output(rng.d6(2));  Roll.output(rng.d6(2));  Roll.output(rng.d6(1));  Roll.output(rng.d6());  for (int loop=0; loop < 36; loop++)   Roll.output(rng.d6(2));}  }
class C{  public static AnimationObject createAnimationImage(String imageName,Resources res,int x,int y){  AnimationObject o=new AnimationObject();  o.imageName=imageName;  o.res=res;  o.motionX=Motion.createLinearMotion(x,x,1);  o.motionX.setStartTime(Long.MAX_VALUE);  o.motionY=Motion.createLinearMotion(y,y,1);  o.motionY.setStartTime(Long.MAX_VALUE);  return o;}  }
class C{  void processPerCentageOperation(){  if (this.displayMode != DISPLAY_MODE.ERROR) {    try {      final double result=getDisplayedNumber() / 100;      displayResult(result);    } catch (    final Exception ex) {      displayErrorMessage(ResourceManager.CALCULATOR_INVALID_VALUE);      this.displayMode=DISPLAY_MODE.ERROR;    }  }}  }
class C{  public static void write(double[] llpoints,int units,int lType,int nsegs,LinkProperties properties,DataOutputStream dos) throws IOException {  dos.write(Link.POLY_HEADER.getBytes());  dos.writeByte(GRAPHICTYPE_POLY);  dos.writeByte(RENDERTYPE_LATLON);  dos.writeByte(lType);  dos.writeInt(llpoints.length);  for (int i=0; i < llpoints.length; i++) {    dos.writeFloat((float)llpoints[i]);  }  dos.writeByte(units);  dos.writeInt(nsegs);  properties.write(dos);}  }
class C{  public MalformedURIException(String p_msg){  super(p_msg);}  }
class C{  protected boolean same(final Graph g1,final Graph g2){  return IteratorUtils.stream(g1.vertices()).map(null).allMatch(null);}  }
class C{  @Override public void mouseClicked(MouseEvent e){}  }
class C{  private void computeTabScrollOffsetHelper(){  float maxScrollOffset=Float.MAX_VALUE;  for (int i=0; i < mStackTabs.length; ++i) {    if (mStackTabs[i].isDying())     continue;    float tabScrollOffset=Math.min(maxScrollOffset,mStackTabs[i].getScrollOffset());    mStackTabs[i].setScrollOffset(tabScrollOffset);    float maxScreenScrollOffset=scrollToScreen(mScrollOffset + tabScrollOffset);    maxScrollOffset=-mScrollOffset + screenToScroll(maxScreenScrollOffset + mStackTabs[i].getSizeInScrollDirection(mCurrentMode));  }}  }
class C{  public final void writeChar(int v) throws java.io.IOException {  return;}  }
class C{  Request signRequest(Request request) throws IOException {  byte[] nonce=new byte[NUANCE_BYTES];  random.nextBytes(nonce);  String oauthNonce=CHARACTER_PATTERN.matcher(ByteString.of(nonce).base64()).replaceAll("");  String oauthTimestamp=clock.millis();  String consumerKeyValue=escape(consumerKey);  String accessTokenValue=escape(accessToken);  SortedMap<String,String> parameters=new TreeMap<>();  parameters.put(OAUTH_CONSUMER_KEY,consumerKeyValue);  parameters.put(OAUTH_ACCESS_TOKEN,accessTokenValue);  parameters.put(OAUTH_NONCE,oauthNonce);  parameters.put(OAUTH_TIMESTAMP,oauthTimestamp);  parameters.put(OAUTH_SIGNATURE_METHOD,OAUTH_SIGNATURE_METHOD_VALUE);  parameters.put(OAUTH_VERSION,OAUTH_VERSION_VALUE);  HttpUrl url=request.url();  for (int i=0; i < url.querySize(); i++) {    parameters.put(escape(url.queryParameterName(i)),escape(url.queryParameterValue(i)));  }  Buffer body=new Buffer();  RequestBody requestBody=request.body();  if (requestBody != null && FORM_ENCODED_CONTENT_TYPE.equals(requestBody.contentType())) {    requestBody.writeTo(body);  }  while (!body.exhausted()) {    long keyEnd=body.indexOf((byte)'=');    if (keyEnd == -1)     throw new IllegalStateException("Key with no value: " + body.readUtf8());    String key=body.readUtf8(keyEnd);    body.skip(1);    long valueEnd=body.indexOf((byte)'&');    String value=valueEnd == -1 ? body.readUtf8() : body.readUtf8(valueEnd);    if (valueEnd != -1)     body.skip(1);    parameters.put(key,value);  }  Buffer base=new Buffer();  String method=request.method();  base.writeUtf8(method);  base.writeByte('&');  base.writeUtf8(escape(request.url().newBuilder().query(null).build().toString()));  base.writeByte('&');  boolean first=true;  for (  Entry<String,String> entry : parameters.entrySet()) {    if (!first)     base.writeUtf8(escape("&"));    first=false;    base.writeUtf8(escape(entry.getKey()));    base.writeUtf8(escape("="));    base.writeUtf8(escape(entry.getValue()));  }  String signingKey=escape(consumerSecret) + '&' + escape(accessSecret);  String signature=base.hmacSha1(ByteString.encodeUtf8(signingKey)).base64();  String authorization="OAuth " + OAUTH_CONSUMER_KEY + "=\""+ consumerKeyValue+ "\", "+ OAUTH_NONCE+ "=\""+ oauthNonce+ "\", "+ OAUTH_SIGNATURE+ "=\""+ escape(signature)+ "\", "+ OAUTH_SIGNATURE_METHOD+ "=\""+ OAUTH_SIGNATURE_METHOD_VALUE+ "\", "+ OAUTH_TIMESTAMP+ "=\""+ oauthTimestamp+ "\", "+ OAUTH_ACCESS_TOKEN+ "=\""+ accessTokenValue+ "\", "+ OAUTH_VERSION+ "=\""+ OAUTH_VERSION_VALUE+ '"';  return request.newBuilder().addHeader("Authorization",authorization).build();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE;case 3:return VALUES;case 4:return RESPONSE_TO;default :return null;}}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  setArea(SerialUtilities.readShape(stream));}  }
class C{  public IntegrationRuntimeException(String message){  super(message);}  }
class C{  public static Query fixNegativeQuery(Query q){  float boost=1f;  if (q instanceof BoostQuery) {    BoostQuery bq=(BoostQuery)q;    boost=bq.getBoost();    q=bq.getQuery();  }  BooleanQuery bq=(BooleanQuery)q;  BooleanQuery.Builder newBqB=new BooleanQuery.Builder();  newBqB.setMinimumNumberShouldMatch(bq.getMinimumNumberShouldMatch());  for (  BooleanClause clause : bq) {    newBqB.add(clause);  }  newBqB.add(new MatchAllDocsQuery(),Occur.MUST);  BooleanQuery newBq=newBqB.build();  return new BoostQuery(newBq,boost);}  }
class C{  private Timeline animateExistingTile(Tile tile,Location newLocation){  Timeline timeline=new Timeline();  KeyValue kvX=new KeyValue(tile.layoutXProperty(),newLocation.getLayoutX(Board.CELL_SIZE) - (tile.getMinHeight() / 2),Interpolator.EASE_OUT);  KeyValue kvY=new KeyValue(tile.layoutYProperty(),newLocation.getLayoutY(Board.CELL_SIZE) - (tile.getMinHeight() / 2),Interpolator.EASE_OUT);  KeyFrame kfX=new KeyFrame(Duration.millis(65),kvX);  KeyFrame kfY=new KeyFrame(Duration.millis(65),kvY);  timeline.getKeyFrames().add(kfX);  timeline.getKeyFrames().add(kfY);  return timeline;}  }
class C{  public void addBookmark(final CBookmark bookmark){  Preconditions.checkNotNull(bookmark,"IE00382: Bookmark can not be null");  Preconditions.checkArgument(getBookmark(bookmark.getAddress()) == null,"IE00383: Bookmark already exists at offset %s",bookmark.getAddress().toHexString());  m_bookmarks.add(bookmark);  for (  final IBookmarkManagerListener listener : m_listeners) {    try {      listener.addedBookmark(this,bookmark);    } catch (    final Exception exception) {      CUtilityFunctions.logException(exception);    }  }}  }
class C{  protected Label readLabel(int offset,Label[] labels){  if (labels[offset] == null) {    labels[offset]=new Label();  }  return labels[offset];}  }
class C{  public void serialize(Node node) throws IOException {  if (m_firstTagNotEmitted) {    flush();  }  m_handler.serialize(node);}  }
class C{  private Query createLuceneQueryObject() throws DataFlowException {  Query query=null;  if (this.operatorType == KeywordMatchingType.CONJUNCTION_INDEXBASED) {    query=buildConjunctionQuery();  }  if (this.operatorType == KeywordMatchingType.PHRASE_INDEXBASED) {    query=buildPhraseQuery();  }  if (this.operatorType == KeywordMatchingType.SUBSTRING_SCANBASED) {    query=buildScanQuery();  }  return query;}  }
class C{  public static boolean isUnder(InternetDomainName name,InternetDomainName potentialParent){  int numNameParts=name.parts().size();  int numParentParts=potentialParent.parts().size();  return numNameParts > numParentParts && name.parts().subList(numNameParts - numParentParts,numNameParts).equals(potentialParent.parts());}  }
class C{  public EmbeddedSolrServer(SolrCore core){  this(core.getCoreDescriptor().getCoreContainer(),core.getName());}  }
class C{  @Override public boolean containsValue(Object value){  Entry tab[]=table;  if (value == null) {    for (int i=tab.length; i-- > 0; ) {      for (Entry e=tab[i]; e != null; e=e.next) {        if (e.value == null) {          return true;        }      }    }  } else {    for (int i=tab.length; i-- > 0; ) {      for (Entry e=tab[i]; e != null; e=e.next) {        if (value.equals(e.value)) {          return true;        }      }    }  }  return false;}  }
class C{  private void clampStartingPosition(){  final float cX=mBounds.exactCenterX();  final float cY=mBounds.exactCenterY();  final float dX=mStartingX - cX;  final float dY=mStartingY - cY;  final float r=mTargetRadius;  if (dX * dX + dY * dY > r * r) {    final double angle=Math.atan2(dY,dX);    mClampedStartingX=cX + (float)(Math.cos(angle) * r);    mClampedStartingY=cY + (float)(Math.sin(angle) * r);  } else {    mClampedStartingX=mStartingX;    mClampedStartingY=mStartingY;  }}  }
class C{  public boolean isLayoutIdInRecord(int layoutId){  return mLayoutIds != null && mLayoutIds.contains(layoutId);}  }
class C{  @Override public void write(Writable key,RyaStatementWritable value) throws IOException {  RyaStatement ryaStatement=value.getRyaStatement();  if (ryaStatement.getColumnVisibility() == null) {    ryaStatement.setColumnVisibility(cv);  }  if (ryaStatement.getContext() == null) {    ryaStatement.setContext(defaultContext);  }  buffer.add(ryaStatement);  bufferCurrentSize+=statementSize(ryaStatement);  if (bufferCurrentSize >= bufferSizeLimit) {    flushBuffer();  }}  }
class C{  public Plane(final Vector A,final double BX,final double BY,final double BZ){  super(A,BX,BY,BZ);  D=0.0;}  }
class C{  protected Call enqueue(Request request,com.squareup.okhttp.Callback requestCallback){  mCurrentCall=getClient().newCall(request);  if (requestCallback != null)   mCurrentCall.enqueue(requestCallback);  return mCurrentCall;}  }
class C{  public boolean showColors(){  return preferences.getBoolean(resources.getString(R.string.key_show_colors),Boolean.parseBoolean(resources.getString(R.string.default_show_colors)));}  }
class C{  public boolean isMember(Address node){  if (VM.VERIFY_ASSERTIONS)   VM.assertions._assert(isNode(node));  boolean result=false;  if (lock != null)   lock.acquire();  Address cur=head;  while (!cur.isZero()) {    if (cur.EQ(node)) {      result=true;      break;    }    cur=cur.loadAddress(NEXT_OFFSET);  }  if (lock != null)   lock.release();  return result;}  }
class C{  public File createPDF(){  try {    File temp=File.createTempFile(get_TableName() + get_ID() + "_",".pdf");    return createPDF(temp);  } catch (  Exception e) {    log.severe("Could not create PDF - " + e.getMessage());  }  return null;}  }
class C{  public void flushAll(){  m_nvmasvc.flush(m_nid,0L,0L,true);}  }
class C{  public static byte[] convertObjectToJsonBytes(Object object) throws IOException {  ObjectMapper mapper=new ObjectMapper();  mapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  JavaTimeModule module=new JavaTimeModule();  module.addSerializer(OffsetDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(ZonedDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(LocalDateTime.class,JSR310DateTimeSerializer.INSTANCE);  module.addSerializer(Instant.class,JSR310DateTimeSerializer.INSTANCE);  module.addDeserializer(LocalDate.class,JSR310LocalDateDeserializer.INSTANCE);  mapper.registerModule(module);  return mapper.writeValueAsBytes(object);}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  private static OFActionSetNwSrc decode_set_src_ip(String actionToDecode,OFVersion version,Logger log){  Matcher n=Pattern.compile("(?:(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+))").matcher(actionToDecode);  if (n.matches()) {    IPv4Address ipaddr=IPv4Address.of(get_ip_addr(n,actionToDecode,log));    OFActionSetNwSrc.Builder ab=OFFactories.getFactory(version).actions().buildSetNwSrc();    ab.setNwAddr(ipaddr);    log.debug("action {}",ab.build());    return ab.build();  } else {    log.debug("Invalid action: '{}'",actionToDecode);    return null;  }}  }
class C{  public static CXFormWithAlpha cxFormWithAlpha(double alphaMultiplier){  CXFormWithAlpha c=new CXFormWithAlpha();  c.hasMult=true;  c.alphaMultTerm=fixed8(alphaMultiplier);  return c;}  }
class C{  public static int binarySearchFromTo(char[] list,char key,int from,int to){  char midVal;  while (from <= to) {    int mid=(from + to) / 2;    midVal=list[mid];    if (midVal < key)     from=mid + 1; else     if (midVal > key)     to=mid - 1; else     return mid;  }  return -(from + 1);}  }
class C{  public static long reverse(long lng){  lng=(lng & 0x5555555555555555L) << 1 | (lng >> 1) & 0x5555555555555555L;  lng=(lng & 0x3333333333333333L) << 2 | (lng >> 2) & 0x3333333333333333L;  lng=(lng & 0x0F0F0F0F0F0F0F0FL) << 4 | (lng >> 4) & 0x0F0F0F0F0F0F0F0FL;  return reverseBytes(lng);}  }
class C{  protected void assertDeliveryStates(final Collection<CustomerOrderDelivery> deliveries,final Map<String,String> expectedState){  for (  CustomerOrderDelivery delivery : deliveries) {    assertEquals("Delivery " + delivery.getDeliveryGroup() + ", no "+ delivery.getDeliveryNum(),expectedState.get(delivery.getDeliveryGroup()),delivery.getDeliveryStatus());  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  WhiteboxRaster image=null;  float progress=0;  int i;  double constantValue=0;  WhiteboxRaster.DataType dataType=WhiteboxRaster.DataType.FLOAT;  double noData=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];      if (inputHeader == null) {        showFeedback("One or more of the input parameters have not been set properly.");        return;      }      image=new WhiteboxRaster(inputHeader,"r");      noData=image.getNoDataValue();    } else     if (i == 1) {      outputHeader=args[i];      if (outputHeader == null) {        showFeedback("One or more of the input parameters have not been set properly.");        return;      }    } else     if (i == 2) {      try {        if (args[i].toLowerCase().contains("nodata") || args[i].toLowerCase().contains("no data")) {          constantValue=noData;        } else {          constantValue=Double.parseDouble(args[i]);        }      } catch (      Exception e) {        constantValue=noData;      }    } else     if (i == 3) {      if (args[i].toLowerCase().contains("double")) {        dataType=WhiteboxRaster.DataType.DOUBLE;      } else       if (args[i].toLowerCase().contains("float")) {        dataType=WhiteboxRaster.DataType.FLOAT;      } else       if (args[i].toLowerCase().contains("int")) {        dataType=WhiteboxRaster.DataType.INTEGER;      } else       if (args[i].toLowerCase().contains("byte")) {        dataType=WhiteboxRaster.DataType.BYTE;        if (constantValue > 127 || constantValue < -128) {          noData=-128;        }      }    }  }  try {    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,dataType,constantValue);    output.setNoDataValue(noData);    output.createNewDataFile();    output.setPreferredPalette(image.getPreferredPalette());    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void createSubUsageScenario08() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.weeksToMillis(2.3);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO08_PERUNIT_WEEK",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_WEEK_ROLES_PARS,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO08_PERUNIT_WEEK",serviceDetails,null,role);  long usageModificationTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") + DateTimeHandling.weeksToMillis(0.3);  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"BOOLEAN_PARAMETER","");  usageModificationTime+=500000;  subDetails=subscrSetup.modifyParameterForSubscription(subDetails,usageModificationTime,"BOOLEAN_PARAMETER","" + Boolean.TRUE);  long usageEndTime=DateTimeHandling.calculateMillis("2013-01-01 00:00:00") - DateTimeHandling.weeksToMillis(1.3);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO08_PERUNIT_WEEK",subDetails);}  }
class C{  String findParmValue(Element e,String name){  List<Element> l=e.getChildren("parameter");  for (int i=0; i < l.size(); i++) {    Element n=l.get(i);    if (n.getAttributeValue("name").equals(name)) {      return n.getTextTrim();    }  }  return null;}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:16.645 -0500",hash_original_method="37E656A6EDF347445C1655B2E42F538E",hash_generated_method="37AF33C9029C525839FDBA472304273B") synchronized ArrayList<Cookie> deleteLRUDomain(){  int count=0;  int byteCount=0;  int mapSize=mCookieMap.size();  if (mapSize < MAX_RAM_DOMAIN_COUNT) {    Collection<ArrayList<Cookie>> cookieLists=mCookieMap.values();    Iterator<ArrayList<Cookie>> listIter=cookieLists.iterator();    while (listIter.hasNext() && count < MAX_RAM_COOKIES_COUNT) {      ArrayList<Cookie> list=listIter.next();      if (DebugFlags.COOKIE_MANAGER) {        Iterator<Cookie> iter=list.iterator();        while (iter.hasNext() && count < MAX_RAM_COOKIES_COUNT) {          Cookie cookie=iter.next();          byteCount+=cookie.domain.length() + cookie.path.length() + cookie.name.length()+ (cookie.value != null ? cookie.value.length() : 0)+ 14;          count++;        }      } else {        count+=list.size();      }    }  }  ArrayList<Cookie> retlist=new ArrayList<Cookie>();  if (mapSize >= MAX_RAM_DOMAIN_COUNT || count >= MAX_RAM_COOKIES_COUNT) {    if (DebugFlags.COOKIE_MANAGER) {      Log.v(LOGTAG,count + " cookies used " + byteCount+ " bytes with "+ mapSize+ " domains");    }    Object[] domains=mCookieMap.keySet().toArray();    int toGo=mapSize / 10 + 1;    while (toGo-- > 0) {      String domain=domains[toGo].toString();      if (DebugFlags.COOKIE_MANAGER) {        Log.v(LOGTAG,"delete domain: " + domain + " from RAM cache");      }      retlist.addAll(mCookieMap.get(domain));      mCookieMap.remove(domain);    }  }  return retlist;}  }
class C{  int compare(NodeCompareElem n1,NodeCompareElem n2,int kIndex,XPathContext support) throws TransformerException {  int result=0;  NodeSortKey k=(NodeSortKey)m_keys.elementAt(kIndex);  if (k.m_treatAsNumbers) {    double n1Num, n2Num;    if (kIndex == 0) {      n1Num=((Double)n1.m_key1Value).doubleValue();      n2Num=((Double)n2.m_key1Value).doubleValue();    } else     if (kIndex == 1) {      n1Num=((Double)n1.m_key2Value).doubleValue();      n2Num=((Double)n2.m_key2Value).doubleValue();    } else {      XObject r1=k.m_selectPat.execute(m_execContext,n1.m_node,k.m_namespaceContext);      XObject r2=k.m_selectPat.execute(m_execContext,n2.m_node,k.m_namespaceContext);      n1Num=r1.num();      n2Num=r2.num();    }    if ((n1Num == n2Num) && ((kIndex + 1) < m_keys.size())) {      result=compare(n1,n2,kIndex + 1,support);    } else {      double diff;      if (Double.isNaN(n1Num)) {        if (Double.isNaN(n2Num))         diff=0.0; else         diff=-1;      } else       if (Double.isNaN(n2Num))       diff=1; else       diff=n1Num - n2Num;      result=(int)((diff < 0.0) ? (k.m_descending ? 1 : -1) : (diff > 0.0) ? (k.m_descending ? -1 : 1) : 0);    }  } else {    CollationKey n1String, n2String;    if (kIndex == 0) {      n1String=(CollationKey)n1.m_key1Value;      n2String=(CollationKey)n2.m_key1Value;    } else     if (kIndex == 1) {      n1String=(CollationKey)n1.m_key2Value;      n2String=(CollationKey)n2.m_key2Value;    } else {      XObject r1=k.m_selectPat.execute(m_execContext,n1.m_node,k.m_namespaceContext);      XObject r2=k.m_selectPat.execute(m_execContext,n2.m_node,k.m_namespaceContext);      n1String=k.m_col.getCollationKey(r1.str());      n2String=k.m_col.getCollationKey(r2.str());    }    result=n1String.compareTo(n2String);    if (k.m_caseOrderUpper) {      String tempN1=n1String.getSourceString().toLowerCase();      String tempN2=n2String.getSourceString().toLowerCase();      if (tempN1.equals(tempN2)) {        result=result == 0 ? 0 : -result;      }    }    if (k.m_descending) {      result=-result;    }  }  if (0 == result) {    if ((kIndex + 1) < m_keys.size()) {      result=compare(n1,n2,kIndex + 1,support);    }  }  if (0 == result) {    DTM dtm=support.getDTM(n1.m_node);    result=dtm.isNodeAfter(n1.m_node,n2.m_node) ? -1 : 1;  }  return result;}  }
class C{  public NumericNode numberNode(double v){  return DoubleNode.valueOf(v);}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  public Matrix4f(){  this.m00=(float)0.0;  this.m01=(float)0.0;  this.m02=(float)0.0;  this.m03=(float)0.0;  this.m10=(float)0.0;  this.m11=(float)0.0;  this.m12=(float)0.0;  this.m13=(float)0.0;  this.m20=(float)0.0;  this.m21=(float)0.0;  this.m22=(float)0.0;  this.m23=(float)0.0;  this.m30=(float)0.0;  this.m31=(float)0.0;  this.m32=(float)0.0;  this.m33=(float)0.0;}  }
class C{  public int size(){  return this.list.size();}  }
class C{  private void handleNewSelectionChange(View selectedView,int direction,int newSelectedPosition,boolean newFocusAssigned){  if (newSelectedPosition == INVALID_POSITION) {    throw new IllegalArgumentException("newSelectedPosition needs to be valid");  }  View leftView;  View rightView;  int leftViewIndex, rightViewIndex;  boolean leftSelected=false;  final int selectedIndex=mSelectedPosition - mFirstPosition;  final int nextSelectedIndex=newSelectedPosition - mFirstPosition;  if (direction == View.FOCUS_UP) {    leftViewIndex=nextSelectedIndex;    rightViewIndex=selectedIndex;    leftView=getChildAt(leftViewIndex);    rightView=selectedView;    leftSelected=true;  } else {    leftViewIndex=selectedIndex;    rightViewIndex=nextSelectedIndex;    leftView=selectedView;    rightView=getChildAt(rightViewIndex);  }  final int numChildren=getChildCount();  if (leftView != null) {    leftView.setSelected(!newFocusAssigned && leftSelected);    measureAndAdjustRight(leftView,leftViewIndex,numChildren);  }  if (rightView != null) {    rightView.setSelected(!newFocusAssigned && !leftSelected);    measureAndAdjustRight(rightView,rightViewIndex,numChildren);  }}  }
class C{  public void push(String prefix,String uri){  if (uri == null) {    uri="";  }  Namespace namespace=createNamespace(prefix,uri);  push(namespace);}  }
class C{  private StatisticDescriptor extractStat(Element statNode,StatisticsTypeFactory statFactory){  Assert.assertTrue(statNode.getTagName().equals("stat"));  Assert.assertTrue(statNode.hasAttribute("name"));  final String statName=statNode.getAttribute("name");  String description="";  String unit="";  boolean isCounter=true;  boolean largerBetter;  int storage=INT_STORAGE;  if (statNode.hasAttribute("counter")) {    String value=statNode.getAttribute("counter");    Assert.assertTrue(value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false"));    isCounter=Boolean.valueOf(value).booleanValue();  }  largerBetter=isCounter;  if (statNode.hasAttribute("largerBetter")) {    String value=statNode.getAttribute("largerBetter");    Assert.assertTrue(value.equalsIgnoreCase("true") || value.equalsIgnoreCase("false"));    largerBetter=Boolean.valueOf(value).booleanValue();  }  if (statNode.hasAttribute("storage")) {    String value=statNode.getAttribute("storage");    if (value.equalsIgnoreCase("int")) {      storage=INT_STORAGE;    } else     if (value.equalsIgnoreCase("long")) {      storage=LONG_STORAGE;    } else {      Assert.assertTrue(value.equalsIgnoreCase("double"));      storage=DOUBLE_STORAGE;    }  }{    NodeList descriptionNodes=statNode.getElementsByTagName("description");    Assert.assertTrue(descriptionNodes.getLength() <= 1);    if (descriptionNodes.getLength() == 1) {      Element descriptionNode=(Element)descriptionNodes.item(0);      description=extractDescription(descriptionNode);    }  }{    NodeList unitNodes=statNode.getElementsByTagName("unit");    Assert.assertTrue(unitNodes.getLength() <= 1);    if (unitNodes.getLength() == 1) {      Element unitNode=(Element)unitNodes.item(0);      unit=extractUnit(unitNode);    }  }  if (isCounter) {switch (storage) {case INT_STORAGE:      return statFactory.createIntCounter(statName,description,unit,largerBetter);case LONG_STORAGE:    return statFactory.createLongCounter(statName,description,unit,largerBetter);case DOUBLE_STORAGE:  return statFactory.createDoubleCounter(statName,description,unit,largerBetter);default :throw new RuntimeException(LocalizedStrings.StatisticsTypeXml_UNEXPECTED_STORAGE_TYPE_0.toLocalizedString(Integer.valueOf(storage)));}} else {switch (storage) {case INT_STORAGE:return statFactory.createIntGauge(statName,description,unit,largerBetter);case LONG_STORAGE:return statFactory.createLongGauge(statName,description,unit,largerBetter);case DOUBLE_STORAGE:return statFactory.createDoubleGauge(statName,description,unit,largerBetter);default :throw new RuntimeException(LocalizedStrings.StatisticsTypeXml_UNEXPECTED_STORAGE_TYPE_0.toLocalizedString(Integer.valueOf(storage)));}}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.543 -0500",hash_original_method="831FDF191B22FA73D71F28C227E32FDE",hash_generated_method="BBC3894E3BBE101FBE98BDC338697EAF") public static void formatJapaneseNumber(Editable text){  JapanesePhoneNumberFormatter.format(text);}  }
class C{  public ServerSocketChannel next(){  SelectionKey key=iterator.next();  if (key.isValid() && key.isAcceptable()) {    return (ServerSocketChannel)key.channel();  }  return null;}  }
class C{  public OutputStream openOutputStream(Uri uri,boolean append) throws IOException {  assertBackgroundThread();switch (getUriType(uri)) {case URI_TYPE_FILE:{      File localFile=new File(uri.getPath());      File parent=localFile.getParentFile();      if (parent != null) {        parent.mkdirs();      }      return new FileOutputStream(localFile,append);    }case URI_TYPE_CONTENT:case URI_TYPE_RESOURCE:{    AssetFileDescriptor assetFd=contentResolver.openAssetFileDescriptor(uri,append ? "wa" : "w");    return assetFd.createOutputStream();  }}throw new FileNotFoundException("URI not supported by CordovaResourceApi: " + uri);}  }
class C{  public boolean checkSignature(PaymentNotification notification){  SortedMap<String,Object> notificationMap=JsonMapper.nonEmptyMapper().getMapper().convertValue(notification,SortedMap.class);  notificationMap.remove("sign");  return notification.getSign().equals(Signature.sign(notificationMap,paySetting.getKey()));}  }
class C{  public DoubleMatrix(int m,int n,double... values){  this(m,n);  this.setMatrix(Dimension.ROW,values);}  }
class C{  private String appendPath(String proplist,String path){  if (proplist.length() == 0)   return path;  if (proplist.contains(path))   return proplist;  return proplist + "," + path;}  }
class C{  private void markSubroutineWalk(final BitSet sub,final int index,final BitSet anyvisited){  if (LOGGING) {    log("markSubroutineWalk: sub=" + sub + " index="+ index);  }  markSubroutineWalkDFS(sub,index,anyvisited);  boolean loop=true;  while (loop) {    loop=false;    for (Iterator<TryCatchBlockNode> it=tryCatchBlocks.iterator(); it.hasNext(); ) {      TryCatchBlockNode trycatch=it.next();      if (LOGGING) {        log("Scanning try/catch " + trycatch);      }      int handlerindex=instructions.indexOf(trycatch.handler);      if (sub.get(handlerindex)) {        continue;      }      int startindex=instructions.indexOf(trycatch.start);      int endindex=instructions.indexOf(trycatch.end);      int nextbit=sub.nextSetBit(startindex);      if (nextbit != -1 && nextbit < endindex) {        if (LOGGING) {          log("Adding exception handler: " + startindex + '-'+ endindex+ " due to "+ nextbit+ " handler "+ handlerindex);        }        markSubroutineWalkDFS(sub,handlerindex,anyvisited);        loop=true;      }    }  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (bayesIm == null) {    throw new NullPointerException();  }  if (evidence == null) {    throw new NullPointerException();  }}  }
class C{  Vset check(Environment env,Context ctx,Vset vset,Hashtable exp){  checkLabel(env,ctx);  CheckContext newctx=new CheckContext(ctx,this);  Vset vsEntry=vset.copy();  vset=body.check(env,newctx,reach(env,vset),exp);  vset=vset.join(newctx.vsContinue);  ConditionVars cvars=cond.checkCondition(env,newctx,vset,exp);  cond=convert(env,newctx,Type.tBoolean,cond);  ctx.checkBackBranch(env,this,vsEntry,cvars.vsTrue);  vset=newctx.vsBreak.join(cvars.vsFalse);  return ctx.removeAdditionalVars(vset);}  }
class C{  public void removeCodeAttribute(){  AttributeInfo.remove(attribute,CodeAttribute.tag);}  }
class C{  private CMSessionParams(final AttrSessionID aSid,final AttrWait aWait,final AttrVersion aVer,final AttrPolling aPolling,final AttrInactivity aInactivity,final AttrRequests aRequests,final AttrHold aHold,final AttrAccept aAccept,final AttrMaxPause aMaxPause,final AttrAck aAck,final AttrCharsets aCharsets,final boolean amAckingRequests){  sid=aSid;  wait=aWait;  ver=aVer;  polling=aPolling;  inactivity=aInactivity;  requests=aRequests;  hold=aHold;  accept=aAccept;  maxPause=aMaxPause;  ack=aAck;  charsets=aCharsets;  ackingRequests=amAckingRequests;}  }
class C{  public FacebookException(Throwable throwable){  super(throwable);}  }
class C{  private static boolean isVariable(final INaviOperandTreeNode node){  return (node.getType() == ExpressionType.IMMEDIATE_INTEGER) && (node.getReplacement() != null) && (node.getDisplayStyle() == OperandDisplayStyle.OFFSET);}  }
class C{  public static int yearLength(int year){  return isLeapYear(year) ? 366 : 365;}  }
class C{  public static boolean isPreTerminal(Tree<String> tree){  if (tree.isLeaf())   return false;  return tree.getChild(0).isLeaf();}  }
class C{  public boolean checkSlotsAndSizes(@Nonnull IInventory inv,@Nonnull ItemStack[] filter,int[] from){  assert filter.length == from.length;  for (int i=0; i < filter.length; ++i) {    if (!checkSlotAndSize(inv,filter[i],from[i]))     return false;  }  return true;}  }
class C{  @Override public boolean flingBackward(Selector obj,boolean isVertical) throws UiObjectNotFoundException {  UiScrollable scrollable=new UiScrollable(obj.toUiSelector());  if (isVertical)   scrollable.setAsVerticalList(); else   scrollable.setAsHorizontalList();  return scrollable.flingBackward();}  }
class C{  public static org.oscm.internal.vo.VOUdaDefinition convertToUp(org.oscm.vo.VOUdaDefinition oldVO){  if (oldVO == null) {    return null;  }  org.oscm.internal.vo.VOUdaDefinition newVO=new org.oscm.internal.vo.VOUdaDefinition();  newVO.setKey(oldVO.getKey());  newVO.setVersion(oldVO.getVersion());  newVO.setUdaId(oldVO.getUdaId());  newVO.setTargetType(oldVO.getTargetType());  newVO.setDefaultValue(oldVO.getDefaultValue());  newVO.setConfigurationType(EnumConverter.convert(oldVO.getConfigurationType(),org.oscm.internal.types.enumtypes.UdaConfigurationType.class));  return newVO;}  }
class C{  public UICommandTestCase(String name){  super(name);}  }
class C{  public static void quickSort(int fromIndex,int toIndex,IntComparator c,Swapper swapper){  quickSort1(fromIndex,toIndex - fromIndex,c,swapper);}  }
class C{  public static MatchQueryBuilder matchPhraseQuery(String name,Object text){  return new MatchQueryBuilder(name,text).type(MatchQueryBuilder.Type.PHRASE);}  }
class C{  private static int checkFormalTypeParameter(final String signature,int pos){  pos=checkIdentifier(signature,pos);  pos=checkChar(':',signature,pos);  if ("L[T".indexOf(getChar(signature,pos)) != -1) {    pos=checkFieldTypeSignature(signature,pos);  }  while (getChar(signature,pos) == ':') {    pos=checkFieldTypeSignature(signature,pos + 1);  }  return pos;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.GLOSSARY___WORD_1:    return ((InternalEList<?>)getWord_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void storeStepData(URI workflowURI,String key,String stepId,Object data){  WorkflowStepData dataRecord=getWorkflowStepData(workflowURI,stepId,key);  boolean created=false;  if (dataRecord == null) {    dataRecord=new WorkflowStepData();    dataRecord.setId(URIUtil.createId(WorkflowStepData.class));    dataRecord.setWorkflowId(workflowURI);    dataRecord.setStepId(stepId);    dataRecord.setLabel(key);    created=true;  }  dataRecord.setData(GenericSerializer.serialize(data));  if (created) {    _dbClient.createObject(dataRecord);    _log.info(String.format("Created WorkflowStepData for %s %s %s",workflowURI,stepId,key));  } else {    _dbClient.updateObject(dataRecord);    _log.info(String.format("Updated WorkflowStepData for %s %s %s",workflowURI,stepId,key));  }}  }
class C{  public JSearchPanel(TupleSet source,SearchTupleSet search,String[] fields,boolean autoIndex,boolean monitorKeystrokes){  m_lock=new Object();  m_fields=fields;  m_autoIndex=autoIndex;  m_monitorKeys=monitorKeystrokes;  m_searcher=(search != null ? search : new PrefixSearchTupleSet());  init(source);}  }
class C{  protected static String LexicalError(boolean EOFSeen,int lexState,int errorLine,int errorColumn,String errorAfter,char curChar){  return ("Lexical error at line " + errorLine + ", column "+ errorColumn+ ".  Encountered: "+ (EOFSeen ? "<EOF> " : ("\"" + addEscapes(String.valueOf(curChar)) + "\"") + " (" + (int)curChar+ "), ")+ "after : \""+ addEscapes(errorAfter)+ "\"");}  }
class C{  public static File tryGetCanonicalFileElseGetAbsoluteFile(final File file){  try {    return file.getCanonicalFile();  } catch (  IOException e) {    return file.getAbsoluteFile();  }}  }
class C{  public FatalError(String s){  super(s);}  }
class C{  @HLEFunction(nid=0x440CA7D8,version=150,checkInsideInterrupt=true) public int __sceSasSetVolume(int sasCore,int voice,@CheckArgument("checkVolume") int leftVolume,@CheckArgument("checkVolume") int rightVolume,@CheckArgument("checkVolume") int effectLeftVolumne,@CheckArgument("checkVolume") int effectRightVolume){  checkSasAndVoiceHandlesGood(sasCore,voice);  voices[voice].setLeftVolume(leftVolume << 3);  voices[voice].setRightVolume(rightVolume << 3);  return 0;}  }
class C{  @Override public IBlockState onBlockPlaced(World world,BlockPos pos,EnumFacing facing,float hitX,float hitY,float hitZ,int meta,EntityLivingBase placer){  if (hasRotation) {    EnumFacing enumfacing=(placer == null) ? EnumFacing.NORTH : EnumFacing.fromAngle(placer.rotationYaw).getOpposite();    return getDefaultState().withProperty(PROPERTY_DIRECTION,enumfacing);  }  return getDefaultState();}  }
class C{  public Matrix compute(Matrix loghyper,Matrix X){  if (loghyper.getColumnDimension() != 1 || loghyper.getRowDimension() != numParameters())   throw new IllegalArgumentException("Wrong number of hyperparameters, " + loghyper.getRowDimension() + " instead of "+ numParameters());  double ell=Math.exp(loghyper.get(0,0));  double sf2=Math.exp(2 * loghyper.get(1,0));  Matrix K=exp(squareDist(X.transpose().times(1 / ell)).times(-0.5)).times(sf2);  return K;}  }
class C{  public boolean contains(Class<? extends Protocol> pipeClass){  for (  Protocol protocol : protocolList) {    if (protocol.getClass().equals(pipeClass))     return true;  }  return false;}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableRectValue res;  if (result == null) {    res=new AnimatableRectValue(target);  } else {    res=(AnimatableRectValue)result;  }  float newX=x, newY=y, newWidth=width, newHeight=height;  if (to != null) {    AnimatableRectValue toValue=(AnimatableRectValue)to;    newX+=interpolation * (toValue.x - x);    newY+=interpolation * (toValue.y - y);    newWidth+=interpolation * (toValue.width - width);    newHeight+=interpolation * (toValue.height - height);  }  if (accumulation != null && multiplier != 0) {    AnimatableRectValue accValue=(AnimatableRectValue)accumulation;    newX+=multiplier * accValue.x;    newY+=multiplier * accValue.y;    newWidth+=multiplier * accValue.width;    newHeight+=multiplier * accValue.height;  }  if (res.x != newX || res.y != newY || res.width != newWidth || res.height != newHeight) {    res.x=newX;    res.y=newY;    res.width=newWidth;    res.height=newHeight;    res.hasChanged=true;  }  return res;}  }
class C{  public boolean isShowLegend(){  return mShowLegend;}  }
class C{  public static void removeResourceTree(RamlRoot model,String urlPrefixToIgnore){  if (StringUtils.hasText(urlPrefixToIgnore)) {    String[] urlParts=urlPrefixToIgnore.split("/");    String firstResourcePart=null;    RamlResource pointerResource=null;    for (    String part : urlParts) {      if (StringUtils.hasText(part)) {        if (pointerResource != null) {          pointerResource=pointerResource.getResource("/" + part);        } else {          if (model.getResources().get("/") != null) {            pointerResource=model.getResource("/").getResource("/" + part);          } else {            pointerResource=model.getResource("/" + part);          }        }        if (pointerResource == null) {          throw new IllegalStateException("Attempting to ignore url prefix [" + urlPrefixToIgnore + "] and failed to find resource on ["+ part+ "]");        }        if (firstResourcePart == null) {          firstResourcePart="/" + part;        }      }    }    RamlResourceRoot parentResource=model;    if (model.getResource("/") != null) {      parentResource=model.getResource("/");    }    parentResource.removeResource(firstResourcePart);    removeUri(pointerResource.getResources(),urlPrefixToIgnore);    parentResource.addResources(pointerResource.getResources());  }}  }
class C{  private DateUtils(){}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (verbisty_1: ");  result.append(verbisty_1);  result.append(')');  return result.toString();}  }
class C{  @VisibleForTesting boolean bucketAccessible(GcsPath path,BackOff backoff,Sleeper sleeper) throws IOException {  try {    return getBucket(path,backoff,sleeper) != null;  } catch (  AccessDeniedException|FileNotFoundException e) {    return false;  }}  }
class C{  private boolean useMetric(MetricRule rule,Metric metric){  if (rule.awsDimensionSelect == null && rule.awsDimensionSelectRegex == null) {    return true;  }  if (rule.awsDimensionSelect != null && metricsIsInAwsDimensionSelect(rule,metric)) {    return true;  }  if (rule.awsDimensionSelectRegex != null && metricIsInAwsDimensionSelectRegex(rule,metric)) {    return true;  }  return false;}  }
class C{  @Override default CompletableFuture<OptionalLong> minLong(final ToLongFunction<? super T> fn){  return CompletableFuture.supplyAsync(null,getExec());}  }
class C{  @Override public boolean equals(Object that){  return super.equals(that);}  }
class C{  public void addText(final NetworkTextObject text){  textList.add(text);  this.fireTextAdded(text);}  }
class C{  public static DecodingException createDecodingException(final ErrorKeys errorId){  return new DecodingException(errorId.toString());}  }
class C{  public static InputStream openConnectionCheckRedirects(URLConnection c) throws IOException {  boolean redir;  int redirects=0;  InputStream in;  do {    if (c instanceof HttpURLConnection) {      ((HttpURLConnection)c).setInstanceFollowRedirects(false);    }    in=c.getInputStream();    redir=false;    if (c instanceof HttpURLConnection) {      HttpURLConnection http=(HttpURLConnection)c;      int stat=http.getResponseCode();      if (stat >= 300 && stat <= 307 && stat != 306 && stat != HttpURLConnection.HTTP_NOT_MODIFIED) {        URL base=http.getURL();        String loc=http.getHeaderField("Location");        URL target=null;        if (loc != null) {          target=new URL(base,loc);        }        http.disconnect();        if (target == null || !base.getProtocol().equals(target.getProtocol()) || base.getPort() != target.getPort() || !hostsEqual(base,target) || redirects >= 5) {          throw new SecurityException("illegal URL redirect");        }        redir=true;        c=target.openConnection();        redirects++;      }    }  } while (redir);  return in;}  }
class C{  static ColumnSpec decodeExpanded(String expandedTrimmedLowerCaseSpec){  ColumnSpec spec=CACHE.get(expandedTrimmedLowerCaseSpec);  if (spec == null) {    spec=new ColumnSpec(expandedTrimmedLowerCaseSpec);    CACHE.put(expandedTrimmedLowerCaseSpec,spec);  }  return spec;}  }
class C{  public String classNameToLabel(String className){  if (INTERNAL_CLASSES_TO_TINKERPOP_CLASSES.containsKey(className)) {    return INTERNAL_CLASSES_TO_TINKERPOP_CLASSES.get(className);  }  if (configuration.getBoolean(CONFIG_LABEL_AS_CLASSNAME,false)) {    return className;  }  return className.substring(2);}  }
class C{  public static GeoPolygon makeLargeGeoPolygon(final PlanetModel planetModel,final List<PolygonDescription> shapesList){  final List<List<GeoPoint>> pointsList=new ArrayList<>();  BestShape testPointShape=null;  for (  final PolygonDescription shape : shapesList) {    testPointShape=convertPolygon(pointsList,shape,testPointShape,true);  }  if (testPointShape == null) {    throw new IllegalArgumentException("couldn't find a non-degenerate polygon for in-set determination");  }  final Random generator=new Random(1234);  for (int counter=0; counter < 1000000; counter++) {    final GeoPoint pole=pickPole(generator,planetModel,testPointShape.points);    final Boolean isPoleInside=isInsidePolygon(pole,testPointShape.points);    if (isPoleInside != null) {      if (isPoleInside == testPointShape.poleMustBeInside) {        return new GeoComplexPolygon(planetModel,pointsList,pole,isPoleInside);      } else {        return new GeoComplexPolygon(planetModel,pointsList,new GeoPoint(-pole.x,-pole.y,-pole.z),!isPoleInside);      }    }  }  throw new IllegalArgumentException("cannot find a point that is inside the polygon " + testPointShape);}  }
class C{  public void testNominalClassSingleAttribute(){  m_Instances.setClassIndex(1);  Instances icopy=new Instances(m_Instances);  Instances result=null;  ((InterquartileRange)m_Filter).setAttributeIndices("3");  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  assertEquals(icopy.numAttributes() + 2,result.numAttributes());  assertEquals(icopy.numInstances(),result.numInstances());}  }
class C{  public String send(String command) throws Exception {  return send(command,true);}  }
class C{  private int markSubBand(ImageTree imgTree,double alpha,double watermark[],double threshold,int w,int n){  double coeff=0.0;  double newCoeff=0.0;  for (int i=5; i < imgTree.getImage().getHeight() - 5; i++) {    for (int j=5; j < imgTree.getImage().getWidth() - 5; j++) {      coeff=DWTUtil.getPixel(imgTree.getImage(),i,j);      if (Math.abs(coeff) > threshold) {        newCoeff=coeff + alpha * coeff * watermark[w % n];        DWTUtil.setPixel(imgTree.getImage(),i,j,newCoeff);        w++;      }    }  }  return w;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:37:56.536 -0500",hash_original_method="A7C439783215BA4035222C170E44FE0D",hash_generated_method="37790595F75A1C65F45522ADC50E4A90") public static final boolean isValidOption(int code){  return (code <= __LAST_OPTION);}  }
class C{  public String maxThresholdTipText(){  return "The maximum threshold above values are replaced by a default.";}  }
class C{  @Override public String globalInfo(){  return "The Class-Relevance Method.\n" + "(The generalised, multi-target version of the Binary Relevance (BR) method).";}  }
class C{  public static GroupLifecycleManager onCreate(ObservableManager observableManager,LifecycleResubscription resubscription){  return onCreate(observableManager,resubscription,null,null);}  }
class C{  protected void afterUpdate(){}  }
class C{  public void testSignedDeployment() throws Exception {  checkTask("org.apache.ignite.spi.deployment.uri.tasks.GridUriDeploymentTestTask5");  checkTask("GridUriDeploymentTestWithNameTask5");  assert getSpi().findResource("org.apache.ignite.spi.deployment.uri.tasks.GridUriDeploymentTestTask6") == null : "Task from GAR with invalid signature should not be deployed.";  assert getSpi().findResource("org.apache.ignite.spi.deployment.uri.tasks.GridUriDeploymentTestWithNameTask6") == null : "Task from GAR with invalid signature should not be deployed.";}  }
class C{  public static String methodNameToPropertyName(String methodName){  if (methodName.startsWith("get"))   methodName=methodName.substring(3); else   if (methodName.startsWith("set"))   methodName=methodName.substring(3); else   if (methodName.startsWith("is"))   methodName=methodName.substring(2);  if (methodName.length() == 0)   return null;  char ch=methodName.charAt(0);  if (Character.isUpperCase(ch) && (methodName.length() == 1 || !Character.isUpperCase(methodName.charAt(1)))) {    methodName=Character.toLowerCase(ch) + methodName.substring(1);  }  return methodName;}  }
class C{  private void updateCurrentLocation(Location location){  if (location != null) {    mCurrentLocation=location;  } else   if (mLastLocation != null && mCurrentLocation == null) {    mCurrentLocation=mLastLocation;  }  if (mCurrentLocation != null) {    LatLong mcLatLong=new LatLong(mCurrentLocation.getLatitude(),mCurrentLocation.getLongitude());    if (Tracking.getTracking().isTracking()) {      MapHandler.getMapHandler().addTrackPoint(mcLatLong);      Tracking.getTracking().addPoint(mCurrentLocation);    }    Layers layers=mapView.getLayerManager().getLayers();    MapHandler.getMapHandler().removeLayer(layers,mPositionMarker);    mPositionMarker=MapHandler.getMapHandler().createMarker(mcLatLong,R.drawable.ic_my_location_dark_24dp);    layers.add(mPositionMarker);    mapActions.showPositionBtn.setImageResource(R.drawable.ic_my_location_white_24dp);  } else {    mapActions.showPositionBtn.setImageResource(R.drawable.ic_location_searching_white_24dp);  }}  }
class C{  public void removeWatcher(AngularObjectWatcher watcher){synchronized (watchers) {    watchers.remove(watcher);  }}  }
class C{  public void refresh(){  if (!this.treeViewer.getTree().isDisposed()) {    this.treeViewer.refresh(true);  }}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == VariableEnvironmentElement.class) {switch (baseOperationID) {case N4JSPackage.VARIABLE_ENVIRONMENT_ELEMENT___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:      return N4JSPackage.CATCH_BLOCK___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS;default :    return -1;}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  private void adaptRegions(){  int max=this.regions.length;  if (max == 1) {    if (this.regions[0].getOffset() == 0 && this.regions[0].getLength() == this.scannerEndPosition) {      this.adaptedRegions=this.regions;      return;    }  }  this.adaptedRegions=new Region[max];  int commentIndex=0;  for (int i=0; i < max; i++) {    Region aRegion=this.regions[i];    int offset=aRegion.getOffset();    int length=aRegion.getLength();    int index=getCommentIndex(commentIndex,offset);    int adaptedOffset=offset;    int adaptedLength=length;    if (index >= 0) {      adaptedOffset=this.commentPositions[index][0];      if (adaptedOffset >= 0) {        adaptedLength=length + offset - adaptedOffset;        commentIndex=index;      }    }    index=getCommentIndex(commentIndex,offset + length - 1);    if (index >= 0 && this.commentPositions[index][0] >= 0) {      int commentEnd=this.commentPositions[index][1];      if (commentEnd < 0)       commentEnd=-commentEnd;      adaptedLength=commentEnd - adaptedOffset;      commentIndex=index;    }    if (adaptedLength != length) {      this.adaptedRegions[i]=new RegionImpl(adaptedOffset,adaptedLength);    } else {      this.adaptedRegions[i]=aRegion;    }  }}  }
class C{  public static Map<String,String> parseChallenges(final Header[] headers) throws MalformedChallengeException {  if (headers == null) {    throw new IllegalArgumentException("Array of challenges may not be null");  }  String challenge=null;  final Map<String,String> challengemap=new HashMap<String,String>(headers.length);  for (int i=0; i < headers.length; i++) {    challenge=headers[i].getValue();    final String s=AuthChallengeParser.extractScheme(challenge);    challengemap.put(s,challenge);  }  return challengemap;}  }
class C{  default String renderJavadoc(Generator gen,M model){  return gen.on(model.getJavadoc()).map(null).orElse(EMPTY);}  }
class C{  public void discardRecording(){  if (recorder != null) {    try {      recorder.stop();      recorder.release();      recorder=null;      if (file != null && file.exists() && !file.isDirectory()) {        file.delete();      }    } catch (    IllegalStateException e) {    }catch (    RuntimeException e) {    }    isRecording=false;  }}  }
class C{  public Group createGroup(String playerName){  if (getGroup(playerName) != null) {    return null;  }  Group group=new Group();  group.addMember(playerName);  groups.add(group);  return group;}  }
class C{  private void writeName(String name) throws JSONException {  Kim kim=new Kim(name);  int integer=this.namekeep.find(kim);  if (integer != none) {    one();    writeAndTick(integer,this.namekeep);  } else {    zero();    write(kim,this.namehuff);    write(end,namehuff);    this.namekeep.register(kim);  }}  }
class C{  public static String replaceEscapedRightAngle(String s){  StringBuilder buf=new StringBuilder();  int i=0;  while (i < s.length()) {    char c=s.charAt(i);    if (c == '<' && s.substring(i).startsWith("<\\\\>")) {      buf.append("<\\\\>");      i+="<\\\\>".length();      continue;    }    if (c == '>' && s.substring(i).startsWith(">\\>")) {      buf.append(">>");      i+=">\\>".length();      continue;    }    if (c == '\\' && s.substring(i).startsWith("\\>>") && !s.substring(i).startsWith("\\>>>")) {      buf.append(">>");      i+="\\>>".length();      continue;    }    buf.append(c);    i++;  }  return buf.toString();}  }
class C{  public JREContainer(IVMInstallType vm,IPath path,IJavaProject project){  fVMInstall=vm;  fPath=path;  fProject=project;}  }
class C{  @DSComment("constructor") @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:35.768 -0500",hash_original_method="E570235BD10D63A46D952627D4823B55",hash_generated_method="873E5D48980AE16EC4645A8878C78F5B") public IntentFilter(){  mPriority=0;}  }
class C{  public PrincipalName(String name,int type,String realm) throws RealmException {  if (name == null) {    throw new IllegalArgumentException("Null name not allowed");  }  String[] nameParts=parseName(name);  validateNameStrings(nameParts);  if (realm == null) {    realm=Realm.parseRealmAtSeparator(name);  }  realmDeduced=realm == null;switch (type) {case KRB_NT_SRV_HST:    if (nameParts.length >= 2) {      String hostName=nameParts[1];      try {        String canonicalized=(InetAddress.getByName(hostName)).getCanonicalHostName();        if (canonicalized.toLowerCase(Locale.ENGLISH).startsWith(hostName.toLowerCase(Locale.ENGLISH) + ".")) {          hostName=canonicalized;        }      } catch (      UnknownHostException|SecurityException e) {      }      nameParts[1]=hostName.toLowerCase(Locale.ENGLISH);    }  nameStrings=nameParts;nameType=type;if (realm != null) {nameRealm=new Realm(realm);} else {String mapRealm=mapHostToRealm(nameParts[1]);if (mapRealm != null) {  nameRealm=new Realm(mapRealm);} else {  nameRealm=Realm.getDefault();}}break;case KRB_NT_UNKNOWN:case KRB_NT_PRINCIPAL:case KRB_NT_SRV_INST:case KRB_NT_SRV_XHST:case KRB_NT_UID:nameStrings=nameParts;nameType=type;if (realm != null) {nameRealm=new Realm(realm);} else {nameRealm=Realm.getDefault();}break;default :throw new IllegalArgumentException("Illegal name type");}}  }
class C{  protected Connection createConnection() throws Exception {  return getConnectionFactory().createConnection();}  }
class C{  public MarginalDistribution(ProbDistribution condDistrib,CategoricalTable uncondDistrib){  this.condDistrib=condDistrib;  this.uncondDistrib=new MultivariateTable(uncondDistrib);}  }
class C{  public static Coordinate circumcentre(Coordinate a,Coordinate b,Coordinate c){  double cx=c.x;  double cy=c.y;  double ax=a.x - cx;  double ay=a.y - cy;  double bx=b.x - cx;  double by=b.y - cy;  double denom=2 * det(ax,ay,bx,by);  double numx=det(ay,ax * ax + ay * ay,by,bx * bx + by * by);  double numy=det(ax,ax * ax + ay * ay,bx,bx * bx + by * by);  double ccx=cx - numx / denom;  double ccy=cy + numy / denom;  return new Coordinate(ccx,ccy);}  }
class C{  public MissingValue(Class<? extends Enum<?>> clazz){  this.type=MissingValueType.NOMINAL;  this.nominalClass=clazz;}  }
class C{  @VisibleForTesting protected State buildPatch(TaskState.TaskStage stage,@Nullable Throwable t){  State state=new State();  state.taskState=new TaskState();  state.taskState.stage=stage;  if (null != t) {    state.taskState.failure=Utils.toServiceErrorResponse(t);  }  return state;}  }
class C{  public void addContextType(TemplateContextType contextType){  fContextTypes.put(contextType.getId(),contextType);}  }
class C{  protected Anonymous_concreteMethodDeclaration_1_Impl(){  super();}  }
class C{  public final WeightedRandomFishable withRandomEnchantments(boolean hasEnchants){  hasRandomEnchantments=hasEnchants;  return this;}  }
class C{  public Analyzer includeMaximumParetoFrontError(){  includeMaximumParetoFrontError=true;  return this;}  }
class C{  public static <E>void selectionSort(E[] list,Comparator<? super E> comparator){  for (int i=0; i < list.length - 1; i++) {    E currentMin=list[i];    int currentMinIndex=i;    for (int j=i + 1; j < list.length; j++) {      if (comparator.compare(currentMin,list[j]) > 0) {        currentMin=list[j];        currentMinIndex=j;      }    }    if (currentMinIndex != i) {      list[currentMinIndex]=list[i];      list[i]=currentMin;    }  }}  }
class C{  private void loadMatrix(final Matrix matrix,final File file) throws IOException {  final Iterator<String> lines=Util.readFileLineByLine(file);  int row=0;  while (lines.hasNext()) {    final String line=lines.next();    final String[] fields=line.split(" ");    for (int i=0; i < fields.length; i++) {      matrix.set(row,i,Double.valueOf(fields[i]));    }    row++;  }}  }
class C{  public static boolean isEnemyIn(IGame game,Entity entity,Coords coords,boolean onlyMechs,boolean ignoreInfantry,int enLowEl){  int enHighEl=enLowEl + entity.getHeight();  for (  Entity inHex : game.getEntitiesVector(coords)) {    int inHexEnLowEl=inHex.getElevation();    int inHexEnHighEl=inHexEnLowEl + inHex.getHeight();    if ((!onlyMechs || (inHex instanceof Mech)) && !(ignoreInfantry && (inHex instanceof Infantry)) && inHex.isEnemyOf(entity)&& !inHex.isMakingDfa()&& (enLowEl <= inHexEnHighEl)&& (enHighEl >= inHexEnLowEl)) {      return true;    }  }  return false;}  }
class C{  final public boolean endsWith(final MutableString suffix){  final int l=suffix.length();  int length=length();  if (l > length)   return false;  int i=l;  final char[] a1=suffix.array;  final char[] a2=array;  while (i-- != 0)   if (a1[i] != a2[--length])   return false;  return true;}  }
class C{  public static Project querySnapshotSessionSourceProject(BlockObject sourceObj,DbClient dbClient){  URI sourceURI=sourceObj.getId();  URI projectURI=null;  if (URIUtil.isType(sourceURI,Volume.class)) {    projectURI=((Volume)sourceObj).getProject().getURI();  } else   if (URIUtil.isType(sourceURI,BlockSnapshot.class)) {    projectURI=((BlockSnapshot)sourceObj).getProject().getURI();  }  if (projectURI == null) {    throw APIException.badRequests.invalidSnapshotSessionSource(sourceURI.toString());  }  Project project=dbClient.queryObject(Project.class,projectURI);  return project;}  }
class C{  public static <T1,T2,T3,T4,T5,T6>Flux<Tuple6<T1,T2,T3,T4,T5,T6>> zip(Publisher<? extends T1> source1,Publisher<? extends T2> source2,Publisher<? extends T3> source3,Publisher<? extends T4> source4,Publisher<? extends T5> source5,Publisher<? extends T6> source6){  return zip(Tuples.fn6(),source1,source2,source3,source4,source5,source6);}  }
class C{  public VegetableGrower(final String name,final String notRipeEnoughMessage){  this(name);  this.notRipeEnoughMessage=notRipeEnoughMessage;}  }
class C{  public KeyAlreadyExistsException(){  super();}  }
class C{  @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){  mWidth=MeasureSpec.getSize(widthMeasureSpec);  mHeight=MeasureSpec.getSize(heightMeasureSpec);  int minSide=Math.min(mWidth,mHeight);  mWidth=minSide;  mHeight=minSide;  this.setMeasuredDimension(mWidth,mHeight);  mCenterX=mWidth / 2f;  mCenterY=mHeight / 2f;  rectF.set(20.0f,20.0f,mWidth - 20.0f,mHeight - 20.0f);  mButtonRadius=mWidth / 8.0f;  mPlayPauseDrawable.resize((1.2f * mButtonRadius / 5.0f),(3.0f * mButtonRadius / 5.0f) + 10.0f,(mButtonRadius / 5.0f));  mPlayPauseDrawable.setBounds(0,0,mWidth,mHeight);  mButtonRegion=new Region((int)(mCenterX - mButtonRadius),(int)(mCenterY - mButtonRadius),(int)(mCenterX + mButtonRadius),(int)(mCenterY + mButtonRadius));  createShader();  super.onMeasure(widthMeasureSpec,heightMeasureSpec);}  }
class C{  public void testLength(){  int expResult=1000;  ByteFifoBuffer instance=new ByteFifoBuffer(expResult);  assertEquals(expResult,instance.length());  int wSize=100;  instance.write(getWData(wSize),wSize);  int result=instance.length();  assertEquals(expResult,result);}  }
class C{  static byte[] toByteArray(InputStream in,int expectedSize) throws IOException {  byte[] bytes=new byte[expectedSize];  int remaining=expectedSize;  while (remaining > 0) {    int off=expectedSize - remaining;    int read=in.read(bytes,off,remaining);    if (read == -1) {      return Arrays.copyOf(bytes,off);    }    remaining-=read;  }  int b=in.read();  if (b == -1) {    return bytes;  }  FastByteArrayOutputStream out=new FastByteArrayOutputStream();  out.write(b);  copy(in,out);  byte[] result=new byte[bytes.length + out.size()];  System.arraycopy(bytes,0,result,0,bytes.length);  out.writeTo(result,bytes.length);  return result;}  }
class C{  public static void main(String[] args) throws IOException {  if (args.length == 1) {    Webserver web=new Webserver(args[0]);    web.run();  } else   System.err.println("Usage: java javassist.tools.web.Webserver <port number>");}  }
class C{  final long fullyRelease(Node node){  boolean failed=true;  try {    long savedState=getState();    if (release(savedState)) {      failed=false;      return savedState;    } else {      throw new IllegalMonitorStateException();    }  }  finally {    if (failed)     node.waitStatus=Node.CANCELLED;  }}  }
class C{  public static int isNull(Object o,int opcode){  if (opcode == Opcodes.IFNULL)   return o == null ? TRUE : FALSE; else   return o != null ? TRUE : FALSE;}  }
class C{  public void invokeHookPrepare(){  for (  ITaskHook taskHook : taskHooks) {    taskHook.prepare(getTopologyConfig(),this);  }}  }
class C{  public final void removeElementAt(int index){  remove(index);}  }
class C{  public static Funnel<Integer> integerFunnel(){  return IntegerFunnel.INSTANCE;}  }
class C{  public static String boxPrimitiveType(String type){  if (primitiveToObject.containsKey(type))   return primitiveToObject.get(type);  return type;}  }
class C{  protected static <T extends IGdtProblemType>GdtJavaProblem<T> createProblem(IGdtJavaProblemFactory<T> factory,ASTNode node,int offset,int length,T problemType,String[] messageArgs,String[] problemArgs){  GdtProblemSeverity severity=GdtProblemSeverities.getInstance().getSeverity(problemType);  if (severity != GdtProblemSeverity.IGNORE) {    return factory.createProblem(node,offset,length,problemType,severity,messageArgs,problemArgs);  }  return null;}  }
class C{  public static void deleteCache(){  if (cacheFile == null) {    if (logger.isDebugEnabled())     logger.debug("Aborting deleteCache() as cache folder not set");    return;  }  Helper.delete(cacheFile,false);  if (logger.isDebugEnabled())   logger.debug("Deleted CRC cache file " + cacheFile.getPath());}  }
class C{  public void addAttributeExistsCondition(String namespaceURI,String name){  _specificityC++;  addCondition(Condition.createAttributeExistsCondition(namespaceURI,name));}  }
class C{  public boolean handleItemSelected(Context context,View view,int i,IDrawerItem iDrawerItem){  i--;  if (i >= 0 && i < MenuItem.values().length) {    MenuItem item=MenuItem.values()[i];    if (item != mLastSelectedItem) {switch (item) {case MENU_ITEM1:        mNavigationManager.startMenu1();      break;case MENU_ITEM2:    mNavigationManager.startMenu2();  break;case MENU_ITEM3:mNavigationManager.startMenu3();break;case MENU_ITEM4:mNavigationManager.startMenu4();break;case MENU_ITEM5:mNavigationManager.startMenu5();break;default :mNavigationManager.startMenu1();break;}mLastSelectedItem=item;closeDrawer();return true;}}return false;}  }
