class C{  synchronized void addConnection(int id,String url,String user){  try {    managementDbAdd.setInt(1,id);    managementDbAdd.setString(2,url);    managementDbAdd.setString(3,user);    managementDbAdd.execute();  } catch (  SQLException e) {    DbException.traceThrowable(e);  }}  }
class C{  public boolean isPrimitive(){  return true;}  }
class C{  private static synchronized <V>void addToCache(Cache<Object,V> cache,byte[] encoding,V value){  if (encoding.length > ENC_MAX_LENGTH) {    return;  }  Object key=new Cache.EqualByteArray(encoding);  cache.put(key,value);}  }
class C{  public void dispose(){  if (fRefactoring == null)   throw new IllegalStateException("dispose() called more than once.");  fRefactoring=null;}  }
class C{  private void growReservoir(){  currItemsAlloc_=SamplingUtil.getAdjustedSize(reservoirSize_,currItemsAlloc_ * rf_.getValue());  data_=java.util.Arrays.copyOf(data_,currItemsAlloc_);}  }
class C{  public static String escapeQueryChars(String s){  StringBuilder sb=new StringBuilder();  for (int i=0; i < s.length(); i++) {    char c=s.charAt(i);    if (c == '\\' || c == '+' || c == '-' || c == '!' || c == '(' || c == ')' || c == ':' || c == '^' || c == '[' || c == ']' || c == '\"' || c == '{' || c == '}' || c == '~' || c == '*' || c == '?' || c == '|' || c == '&' || c == ';' || c == '/' || Character.isWhitespace(c)) {      sb.append('\\');    }    sb.append(c);  }  return sb.toString();}  }
class C{  public void clearImportedPackages(){  importedPackages=new ArrayList();  importedPackages.add("java.lang");}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case DomPackage.COMPOSITE__CONTENTS:    return getContents();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void close(){}  }
class C{  public void or(Criteria criteria){  oredCriteria.add(criteria);}  }
class C{  public static String arrayAsString(IPrimitiveArray charArray,int offset,int count,int limit){  if (charArray.getType() != IObject.Type.CHAR)   return null;  int length=charArray.getLength();  int contentToRead=count <= limit ? count : limit;  if (contentToRead > length - offset)   contentToRead=length - offset;  char[] value;  if (offset == 0 && length == contentToRead)   value=(char[])charArray.getValueArray(); else   value=(char[])charArray.getValueArray(offset,contentToRead);  if (value == null)   return null;  StringBuilder result=new StringBuilder(value.length);  for (int ii=0; ii < value.length; ii++) {    char val=value[ii];    if (val >= 32 && val < 127)     result.append(val); else     result.append("\\u").append(String.format("%04x",0xFFFF & val));  }  if (limit < count)   result.append("...");  return result.toString();}  }
class C{  public void onStart(){}  }
class C{  public void onOffer(long sessionId,String sdp){  send(new PeerConnectionActor.OnOffer(sessionId,sdp));}  }
class C{  public WorkspaceConfigDto buildWorkspaceConfig(String environmentName,String name,String dockerFileLocation){  EnvironmentRecipeDto recipeDto;  if (dockerFileLocation != null && URLChecker.exists(dockerFileLocation)) {    recipeDto=newDto(EnvironmentRecipeDto.class).withLocation(dockerFileLocation).withType("dockerfile").withContentType("text/x-dockerfile");  } else {    recipeDto=newDto(EnvironmentRecipeDto.class).withLocation(DEFAULT_DOCKER_IMAGE).withType("dockerimage");  }  ExtendedMachineDto machine=newDto(ExtendedMachineDto.class).withAgents(singletonList("org.eclipse.che.ws-agent")).withAttributes(singletonMap("memoryLimitBytes",MEMORY_LIMIT_BYTES));  EnvironmentDto environmentDto=newDto(EnvironmentDto.class).withRecipe(recipeDto).withMachines(singletonMap(MACHINE_NAME,machine));  return newDto(WorkspaceConfigDto.class).withDefaultEnv(environmentName).withEnvironments(singletonMap(environmentName,environmentDto)).withName(name);}  }
class C{  public static boolean isBinaryFile(final IScope scope,final File f){  if (f == null || !f.exists())   return false;  byte[] data;  try (FileInputStream in=new FileInputStream(f)){    int size=in.available();    if (size > 1024)     size=1024;    data=new byte[size];    in.read(data);    int ascii=0;    int other=0;    for (int i=0; i < data.length; i++) {      final byte b=data[i];      if (b < 0x09)       return true;      if (b == 0x09 || b == 0x0A || b == 0x0C || b == 0x0D)       ascii++; else       if (b >= 0x20 && b <= 0x7E)       ascii++; else       other++;    }    if (other == 0)     return false;    return 100 * other / (ascii + other) > 95;  } catch (  final IOException e) {    GAMA.reportAndThrowIfNeeded(scope,GamaRuntimeException.error("Problem determining the type of " + f.getPath(),scope),false);    return false;  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:23.875 -0500",hash_original_method="5CE0C2D7CC9A97F7407CFA85151EC53E",hash_generated_method="28B6A49374B219A22FA475188B5E8A2E") public static int parseColor(String colorString){  if (colorString.charAt(0) == '#') {    long color=Long.parseLong(colorString.substring(1),16);    if (colorString.length() == 7) {      color|=0x00000000ff000000;    } else     if (colorString.length() != 9) {      throw new IllegalArgumentException("Unknown color");    }    return (int)color;  } else {    Integer color=sColorNameMap.get(colorString.toLowerCase(Locale.US));    if (color != null) {      return color;    }  }  throw new IllegalArgumentException("Unknown color");}  }
class C{  private synchronized int rendezvous(){  int rank=++currentRank;  if (currentRank == expected) {    clearCurrent(where);    notifyAll();  } else {    while (currentRank != expected) {      try {        wait();      } catch (      InterruptedException ie) {      }    }  }  return rank;}  }
class C{  @Override protected Object transformRequest(DSRequest dsRequest){  return super.transformRequest(dsRequest);}  }
class C{  public static double[] pageRank(MatrixInterface preparedMatrix,int maxIteration,double d,double[] init){  double[] impact=new double[preparedMatrix.getRowsCount()];  for (int i=0; i != init.length; i++)   impact[i]=DEFAULT_I;  return pageRank(preparedMatrix,maxIteration,d,init,impact);}  }
class C{  public static void next(){  try {    if (musicPlaybackService != null) {      musicPlaybackService.next();    }  } catch (  final RemoteException ignored) {  }}  }
class C{  public void addMethodAnnotations(CstMethodRef method,Annotations annotations){  annotationsDirectory.addMethodAnnotations(method,annotations);}  }
class C{  private void checkErrors(){  int error=glContext.getError();  if (error != WebGLRenderingContext.NO_ERROR) {    String message="WebGL Error: " + error;    GWT.log(message,null);    throw new RuntimeException(message);  }}  }
class C{  public void addBehaviour(AreaBehaviour behaviour){  this.behaviours.add(behaviour);}  }
class C{  public static Supplier<byte[]> xml(Supplier<Node> node){  return null;}  }
class C{  private Kinit(String[] args) throws IOException, RealmException, KrbException {  if (args == null || args.length == 0) {    options=new KinitOptions();  } else {    options=new KinitOptions(args);  }  String princName=null;  PrincipalName principal=options.getPrincipal();  if (principal != null) {    princName=principal.toString();  }  KrbAsReqBuilder builder;  if (DEBUG) {    System.out.println("Principal is " + principal);  }  char[] psswd=options.password;  boolean useKeytab=options.useKeytabFile();  if (!useKeytab) {    if (princName == null) {      throw new IllegalArgumentException(" Can not obtain principal name");    }    if (psswd == null) {      System.out.print("Password for " + princName + ":");      System.out.flush();      psswd=Password.readPassword(System.in);      if (DEBUG) {        System.out.println(">>> Kinit console input " + new String(psswd));      }    }    builder=new KrbAsReqBuilder(principal,psswd);  } else {    if (DEBUG) {      System.out.println(">>> Kinit using keytab");    }    if (princName == null) {      throw new IllegalArgumentException("Principal name must be specified.");    }    String ktabName=options.keytabFileName();    if (ktabName != null) {      if (DEBUG) {        System.out.println(">>> Kinit keytab file name: " + ktabName);      }    }    builder=new KrbAsReqBuilder(principal,ktabName == null ? KeyTab.getInstance() : KeyTab.getInstance(new File(ktabName)));  }  KDCOptions opt=new KDCOptions();  setOptions(KDCOptions.FORWARDABLE,options.forwardable,opt);  setOptions(KDCOptions.PROXIABLE,options.proxiable,opt);  builder.setOptions(opt);  String realm=options.getKDCRealm();  if (realm == null) {    realm=Config.getInstance().getDefaultRealm();  }  if (DEBUG) {    System.out.println(">>> Kinit realm name is " + realm);  }  PrincipalName sname=PrincipalName.tgsService(realm,realm);  builder.setTarget(sname);  if (DEBUG) {    System.out.println(">>> Creating KrbAsReq");  }  if (options.getAddressOption())   builder.setAddresses(HostAddresses.getLocalAddresses());  builder.action();  sun.security.krb5.internal.ccache.Credentials credentials=builder.getCCreds();  builder.destroy();  CredentialsCache cache=CredentialsCache.create(principal,options.cachename);  if (cache == null) {    throw new IOException("Unable to create the cache file " + options.cachename);  }  cache.update(credentials);  cache.save();  if (options.password == null) {    System.out.println("New ticket is stored in cache file " + options.cachename);  } else {    Arrays.fill(options.password,'0');  }  if (psswd != null) {    Arrays.fill(psswd,'0');  }  options=null;}  }
class C{  public int insert(final int doc,final int freq,final PAYLOAD[] payloads) throws IOException {  final int c=insert(doc,freq);  if (payloads.length != freq)   throw new RuntimeException("Mismatched frequency");  write(payloads);  return c;}  }
class C{  public void testUnsizedIntsCountSeq(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=100;  r.ints().limit(size).forEach(null);  assertEquals(counter.sum(),size);}  }
class C{  public VOParameterDefinition(ParameterType parameterType,String parameterId,String description,ParameterValueType valueType,String defaultValue,Long minValue,Long maxValue,boolean mandatory,boolean configurable,ParameterModificationType modificationType,List<VOParameterOption> parameterOptions){  super();  this.parameterType=parameterType;  this.parameterId=parameterId;  this.description=description;  this.valueType=valueType;  this.defaultValue=defaultValue;  this.minValue=minValue;  this.maxValue=maxValue;  this.configurable=configurable;  this.mandatory=mandatory;  this.parameterOptions=parameterOptions;  this.modificationType=modificationType;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public String marketplaceChanged(){  String result="";  String selectedMarketplaceId=model.getSelectedMarketplace();  if (selectedMarketplaceId == null || selectedMarketplaceId.equals("0")) {    model.setTrackingCodeObject(new POTrackingCode());    model.setSelectedMarketplace(null);  } else {    if (!loadTrackingCode(selectedMarketplaceId)) {      result=CONCURRENT_MODIFICATION_ERROR;    }  }  return result;}  }
class C{  public synchronized static void releaseAll(){  strongNativeObjects.clear();  gc();  for (  NativeLibrary lib : librariesByFile.values()) {    lib.release();  }  librariesByFile.clear();  librariesByClass.clear();  getOrphanEntities().release();  gc();}  }
class C{  public java.lang.String concat(java.lang.String str){  return null;}  }
class C{  @SuppressWarnings("deprecation") public static Sha256Hash wrapReversed(byte[] rawHashBytes){  return wrap(Utils.reverseBytes(rawHashBytes));}  }
class C{  private static Method findRunningJUnitTestMethod(Class caller){  final Class[] args=new Class[]{};  final Throwable t=new Exception();  for (int i=t.getStackTrace().length - 1; i >= 0; --i) {    final StackTraceElement element=t.getStackTrace()[i];    if (element.getClassName().equals(caller.getName())) {      try {        final Method m=caller.getMethod(element.getMethodName(),args);        if (isPublicTestMethod(m)) {          return m;        }      } catch (      final Exception e) {      }    }  }  throw new RuntimeException("No JUnit test case method found in call stack");}  }
class C{  public boolean isDestroyed(){  return destroyed;}  }
class C{  public ConcurrentCoapResource(String name,int threads){  super(name);  this.threads=threads;  setExecutor(Executors.newFixedThreadPool(threads,new Utils.NamedThreadFactory("ConcurrentCoapResource-" + name + '#')));}  }
class C{  @Override public boolean canInvert(){  return true;}  }
class C{  public boolean isForcePersistence(){  return forcePersistence;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector result=new Vector();  OptionUtils.add(result,super.listOptions());  OptionUtils.addOption(result,trainPercentageTipText(),"" + getDefaultTrainPercentage(),'P');  OptionUtils.addFlag(result,preserveOrderTipText(),'O');  OptionUtils.addOption(result,seedTipText(),"" + getDefaultSeed(),'S');  OptionUtils.addOption(result,thresholdTipText(),"" + getDefaultThreshold(),'T');  OptionUtils.addOption(result,verbosityTipText(),"" + getDefaultVerbosity(),'V');  return OptionUtils.toEnumeration(result);}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x15540184,version=150) public int sceHttpDeleteHeader(int templateId,int name){  return 0;}  }
class C{  public void clear(){  numObjs=0;}  }
class C{  public void start(){  ThreadUtils.assertOnUiThread();  if (AndroidSyncSettings.isMasterSyncEnabled(mContext)) {    Log.d(TAG,"Enabling sync");    InvalidationController.get(mContext).ensureStartedAndUpdateRegisteredTypes();    mProfileSyncService.requestStart();    AndroidSyncSettings.enableChromeSync(mContext);  }}  }
class C{  public void close() throws IOException {  articleIdxWriter.close();  chronoIdxWriter.close();  revisionIdxWriter.close();}  }
class C{  public synchronized void sendNotification(){  notified=true;  notifyAll();}  }
class C{  public boolean isIconForFileAvailable(File f){  validate();  return fileController.isIconForFileAvailable(f);}  }
class C{  public Date(){}  }
class C{  private void processAnsiCommand_r(){}  }
class C{  public void insertBitmap(final BufferedImage bitmap,final int x,final int y,final int transRGB,final FilterMode filter){  insertBitmap(bitmap,x,y,transRGB);  final int bitmapWidth=bitmap.getWidth();  final int bitmapHeight=bitmap.getHeight();  if (filter == FilterMode.FILTER_ANTIALIASING) {    int transX=-1;    int transY=-1;    final int imageWidth=this.image.getWidth();    final int imageHeight=this.image.getHeight();    int i=0;    int j=0;    boolean found=false;    while ((i < bitmapWidth) && (i + x < imageWidth) && !found) {      while ((j < bitmapHeight) && (j + y < imageHeight) && !found) {        if (bitmap.getRGB(i,j) == transRGB) {          transX=i;          transY=j;          found=true;        }        j++;      }      i++;    }    if (transX != -1) {      filter(x - 1,y - 1,x + bitmapWidth,y + bitmapHeight,filter,this.image.getRGB(transX + x,transY + y));    }  } else {    filter(x - 1,y - 1,x + bitmapWidth,y + bitmapHeight,filter,-1);  }}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  @Override public void printStackTrace(PrintWriter pw){  super.printStackTrace(pw);}  }
class C{  public Map<TopicPartition,Long> offsets(){  return offsets;}  }
class C{  public LinkingMorphemes(String... aMorphemes){  morphemes=new ArrayList<String>();  for (  String string : aMorphemes) {    morphemes.add(string);  }}  }
class C{  public boolean isSecurityEnabled(){  Object oo=get_Value(COLUMNNAME_IsSecurityEnabled);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public DoubleMatrix2D make(double values[],int rows){  int columns=(rows != 0 ? values.length / rows : 0);  if (rows * columns != values.length)   throw new IllegalArgumentException("Array length must be a multiple of m.");  DoubleMatrix2D matrix=make(rows,columns);  for (int row=0; row < rows; row++) {    for (int column=0; column < columns; column++) {      matrix.setQuick(row,column,values[row + column * rows]);    }  }  return matrix;}  }
class C{  public Builder caches(Map<String,GridClientCacheMode> caches){  impl.caches=U.sealMap(caches);  return this;}  }
class C{  public void addPendingDelete(Index index,Settings settings){  PendingDelete pendingDelete=new PendingDelete(index,settings);  addPendingDelete(index,pendingDelete);}  }
class C{  public void intersect(ReferenceRegions regions){  for (  String seq : sequenceNames()) {    int outStart=0;    final MergedIntervals theirs=regions.mSequences.get(seq);    final MergedIntervals ours=mSequences.get(seq);    if (theirs != null) {      for (      Map.Entry<Integer,Integer> interval : theirs.mIntervals.entrySet()) {        final int outEnd=interval.getKey();        ours.subtract(outStart,outEnd);        outStart=interval.getValue();      }      ours.subtract(outStart,Integer.MAX_VALUE);    }  }}  }
class C{  public Criteria createCriteria(){  Criteria criteria=createCriteriaInternal();  if (oredCriteria.size() == 0) {    oredCriteria.add(criteria);  }  return criteria;}  }
class C{  public static Function<String> jsonRemove(Object json,Object... paths){  return new JSONArgumentFunction<>("json_remove",json,paths);}  }
class C{  public static boolean[] toBooleanArray(Number[] array){  boolean[] result=new boolean[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i].doubleValue() > 0;  }  return result;}  }
class C{  public void render(java.awt.Graphics graphics){  Debug.message("eomg","EditableOMLine.render()");  State state=getStateMachine().getState();  if (line != null) {    line.setVisible(true);    line.render(graphics);    line.setVisible(false);  } else {    Debug.message("eomg","EditableOMLine.render: null line.");  }  if (state instanceof GraphicSelectedState) {    if (gp1 != null) {      gp1.setVisible(true);      gp1.render(graphics);      gp1.setVisible(false);    }    if (gp2 != null) {      gp2.setVisible(true);      gp2.render(graphics);      gp2.setVisible(false);    }  }  if (state instanceof GraphicSelectedState || state instanceof GraphicEditState) {    if (gpo != null && line.getRenderType() == OMGraphic.RENDERTYPE_OFFSET) {      gpo.setVisible(true);      gpo.render(graphics);      gpo.setVisible(false);    }  }}  }
class C{  public LocalSolrQueryRequest makeRequest(String... q){  if (q.length == 1) {    return new LocalSolrQueryRequest(TestHarness.this.getCore(),q[0],qtype,start,limit,args);  }  if (q.length % 2 != 0) {    throw new RuntimeException("The length of the string array (query arguments) needs to be even");  }  Map.Entry<String,String>[] entries=new NamedListEntry[q.length / 2];  for (int i=0; i < q.length; i+=2) {    entries[i / 2]=new NamedListEntry<>(q[i],q[i + 1]);  }  return new LocalSolrQueryRequest(TestHarness.this.getCore(),new NamedList(entries));}  }
class C{  public void removeCache(PImage image){  g.removeCache(image);}  }
class C{  public int size(){  return size;}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public Matrix3f add(Matrix3fc other){  return add(other,this);}  }
class C{  private StringSet discoverVolumeSnaps(StorageSystem system,List<Snap> snaps,String parentGUID,StringSet parentMatchedVPools,VNXeApiClient apiClient,DbClient dbClient,Map<String,List<UnManagedVolume>> hostVolumesMap,VNXeLun lun,boolean isSnapInCG,String cgName) throws Exception {  StringSet snapsets=new StringSet();  for (  Snap snapDetail : snaps) {    UnManagedVolume unManagedVolume=null;    String managedSnapNativeGuid=NativeGUIDGenerator.generateNativeGuidForVolumeOrBlockSnapShot(system.getNativeGuid(),snapDetail.getId());    BlockSnapshot viprSnap=DiscoveryUtils.checkBlockSnapshotExistsInDB(dbClient,managedSnapNativeGuid);    if (null != viprSnap) {      log.info("Skipping snapshot {} as it is already managed by ViPR",managedSnapNativeGuid);      snapsets.add(managedSnapNativeGuid);      continue;    }    String unManagedVolumeNatvieGuid=NativeGUIDGenerator.generateNativeGuidForPreExistingVolume(system.getNativeGuid(),snapDetail.getId());    unManagedVolume=DiscoveryUtils.checkUnManagedVolumeExistsInDB(dbClient,unManagedVolumeNatvieGuid);    unManagedVolume=createUnManagedVolumeForSnap(unManagedVolume,unManagedVolumeNatvieGuid,lun,system,dbClient,hostVolumesMap,snapDetail);    populateSnapInfo(unManagedVolume,snapDetail,parentGUID,parentMatchedVPools);    snapsets.add(unManagedVolumeNatvieGuid);    unManagedVolumesReturnedFromProvider.add(unManagedVolume.getId());    if (isSnapInCG) {      addObjectToUnManagedConsistencyGroup(apiClient,unManagedVolume,cgName,system,dbClient);    }  }  return snapsets;}  }
class C{  public void ctcpCommand(String command){  bot.sendIRC().ctcpCommand(channel.getName(),command);}  }
class C{  public void computeAndSetViewCenterIfNeeded(){  if (this.viewOutOfFocus) {    computeAndSetViewCenter();  }}  }
class C{  public void destroyAds(){  adFetcher.destroyAllAds();  this.mUnitIdQueue=new UnitIdQueue(this.mAdsUnitIds);}  }
class C{  public void addLayerStatusListener(LayerStatusListener aLayerStatusListener){  lsListeners.add(aLayerStatusListener);}  }
class C{  @Override public void onTokenRefresh(){  String refreshedToken=FirebaseInstanceId.getInstance().getToken();  Log.d(TAG,"Refreshed token: " + refreshedToken);  sendRegistrationToServer(refreshedToken);}  }
class C{  public mxRectangle(Rectangle2D rect){  this(rect.getX(),rect.getY(),rect.getWidth(),rect.getHeight());}  }
class C{  @Override public Object clone(){  try {    return super.clone();  } catch (  CloneNotSupportedException e) {    return null;  }}  }
class C{  public CFBBlockCipherMac(BlockCipher cipher){  this(cipher,8,(cipher.getBlockSize() * 8) / 2,null);}  }
class C{  public boolean isStencilBufferEnabled(){  return mStencilBuffer;}  }
class C{  public boolean checkAccess(final HTTPRepository repository) throws RepositoryException {  LOGGER.info("repository: {}",repository.getRepositoryURL());  boolean rval=true;  RepositoryConnection con=repository.getConnection();  try {    IRI uri=con.getValueFactory().createIRI("urn:uuid:" + UUID.randomUUID());    con.hasStatement(uri,uri,uri,false,uri);  } catch (  RepositoryException re) {    rval=false;  } finally {    con.close();  }  return rval;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static void notImplemented(){  throw new UnsupportedOperationException("Not Implemented");}  }
class C{  public FastBufferedOutputStream(final OutputStream os,final byte[] buffer){  this.os=os;  ensureBufferSize(buffer.length);  this.buffer=buffer;  avail=buffer.length;  if (os instanceof RepositionableStream)   repositionableStream=(RepositionableStream)os;  if (os instanceof MeasurableStream)   measurableStream=(MeasurableStream)os;  if (repositionableStream == null) {    try {      fileChannel=(FileChannel)(os.getClass().getMethod("getChannel",new Class[]{})).invoke(os,new Object[]{});    } catch (    IllegalAccessException e) {    }catch (    IllegalArgumentException e) {    }catch (    NoSuchMethodException e) {    }catch (    java.lang.reflect.InvocationTargetException e) {    }catch (    ClassCastException e) {    }  }}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.TRACE_WHEN___CONDITION_TYPE_1:    setConditionType_1((String)newValue);  return;case UmplePackage.TRACE_WHEN___CONSTRAINT_TOKEN_1:getConstraintToken_1().clear();getConstraintToken_1().addAll((Collection<? extends ConstraintToken_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public static AlertLevel forSeverity(int severity){switch (severity) {case Alert.WARNING:    return AlertLevel.WARNING;case Alert.ERROR:  return AlertLevel.ERROR;case Alert.SEVERE:return AlertLevel.SEVERE;case Alert.OFF:return AlertLevel.OFF;default :throw new IllegalArgumentException(LocalizedStrings.AlertLevel_UNKNOWN_ALERT_SEVERITY_0.toLocalizedString(Integer.valueOf(severity)));}}  }
class C{  public static <E>TopicProcessor<E> share(String name,int bufferSize,WaitStrategy waitStrategy,Supplier<E> signalSupplier){  return new TopicProcessor<>(name,bufferSize,waitStrategy == null ? WaitStrategy.phasedOffLiteLock(200,100,TimeUnit.MILLISECONDS) : waitStrategy,true,true,signalSupplier);}  }
class C{  public static boolean isLookup(int displayType){  if (displayType == List || displayType == Table || displayType == TableDir || displayType == Search)   return true;  return false;}  }
class C{  public Clause(Collection<Literal> literals){  for (  Literal l : literals) {    if (l.isAlwaysFalse()) {      continue;    }    if (this.literals.add(l)) {      if (l.isPositiveLiteral()) {        this.cachedPositiveSymbols.add(l.getAtomicSentence());      } else {        this.cachedNegativeSymbols.add(l.getAtomicSentence());      }    }  }  cachedSymbols.addAll(cachedPositiveSymbols);  cachedSymbols.addAll(cachedNegativeSymbols);  this.literals=Collections.unmodifiableSet(this.literals);  cachedSymbols=Collections.unmodifiableSet(cachedSymbols);  cachedPositiveSymbols=Collections.unmodifiableSet(cachedPositiveSymbols);  cachedNegativeSymbols=Collections.unmodifiableSet(cachedNegativeSymbols);}  }
class C{  public boolean replace(HGHandle handle,Object atom,HGHandle type){  if (eventManager.dispatch(this,new HGAtomReplaceRequestEvent(handle,type,atom)) == HGListener.Result.cancel)   return false;  HGPersistentHandle pHandle=null;  HGLiveHandle lHandle=null;  if (handle instanceof HGPersistentHandle) {    pHandle=(HGPersistentHandle)handle;    lHandle=cache.get(pHandle);  } else {    lHandle=(HGLiveHandle)handle;    pHandle=lHandle.getPersistent();  }  replaceInternal(lHandle,pHandle,atom,type);  eventManager.dispatch(this,new HGAtomReplacedEvent(lHandle));  return true;}  }
class C{  public boolean bind(){  boolean worked=true;  if (m_rxThread == null) {    getMessageCounter().clearInCounts();    getMessageCounter().clearOutCounts();    m_rxThread=new Thread(this,"DJAPI message listener");    m_rxThread.setDaemon(true);    m_rxThread.start();  } else   worked=false;  return worked;}  }
class C{  @Override public void json(String json){  if (TextUtils.isEmpty(json)) {    d("Empty/Null json content");    return;  }  try {    if (json.startsWith("{")) {      JSONObject jsonObject=new JSONObject(json);      String message=jsonObject.toString(JSON_INDENT);      d(message);      return;    }    if (json.startsWith("[")) {      JSONArray jsonArray=new JSONArray(json);      String message=jsonArray.toString(JSON_INDENT);      d(message);    }  } catch (  JSONException e) {    e(e.getCause().getMessage() + "\n" + json);  }}  }
class C{  @org.junit.Test public void testAddition() throws Exception {  Bot bot=Bot.createInstance();  TextEntry text=bot.awareness().getSense(TextEntry.class);  List<String> output=registerForOutput(text);  text.input("1 + 1");  String response=waitForOutput(output);  if (!response.equals("1 + 1 = 2") && !response.equals("1 + 1 = two")) {    fail("incorrect:" + response);  }  text.input("3 + 4?");  response=waitForOutput(output);  if (!response.equals("3 + 4 = 7")) {    fail("incorrect:" + response);  }  text.input("0 + 4?");  response=waitForOutput(output);  if (!response.equals("0 + 4 = 4")) {    fail("incorrect:" + response);  }  text.input("4 + 0?");  response=waitForOutput(output);  if (!response.equals("4 + 0 = 4")) {    fail("incorrect:" + response);  }  text.input("4 + 12?");  response=waitForOutput(output);  if (!response.equals("4 + 12 = 16")) {    fail("incorrect:" + response);  }  text.input("13 + 4?");  response=waitForOutput(output);  if (!response.equals("13 + 4 = 17")) {    fail("incorrect:" + response);  }  text.input("13 + 454?");  response=waitForOutput(output);  if (!response.equals("13 + 454 = 467")) {    fail("incorrect:" + response);  }  text.input("what is 9 + 99?");  response=waitForOutput(output);  if (!response.equals("9 + 99 = 108")) {    fail("incorrect:" + response);  }  text.input("what is 1 + 1 + 2 + 4 + 7?");  response=waitForOutput(output);  if (!response.equals("1 + 1 + 2 + 4 + 7 = 15")) {    fail("incorrect:" + response);  }  bot.shutdown();}  }
class C{  public static boolean isSafeBytecodeName(String s){  if (s.length() == 0)   return false;  for (  char xc : DANGEROUS_CHARS_A) {    if (xc == ESCAPE_C)     continue;    if (s.indexOf(xc) >= 0)     return false;  }  return true;}  }
class C{  public Class<?> type(){  if (isClass) {    return (Class<?>)object;  } else {    return object.getClass();  }}  }
class C{  private ArrayList<ArrayList<ColumnVal>> generateValues(OneRowChange oneRowChange,int v1,String v2,String v3){  ArrayList<ArrayList<ColumnVal>> list=new ArrayList<ArrayList<ColumnVal>>(1);  ArrayList<ColumnVal> values=new ArrayList<ColumnVal>(3);  ColumnVal cv1=oneRowChange.new ColumnVal();  cv1.setValue(new Integer(v1));  values.add(cv1);  ColumnVal cv2=oneRowChange.new ColumnVal();  cv2.setValue(v2);  values.add(cv2);  ColumnVal cv3=oneRowChange.new ColumnVal();  cv3.setValue(v3);  values.add(cv3);  list.add(values);  return list;}  }
class C{  public static RemoveBucketResponse send(InternalDistributedMember recipient,PartitionedRegion region,int bucketId,boolean forceRemovePrimary){  Assert.assertTrue(recipient != null,"RemoveBucketMessage NULL recipient");  RemoveBucketResponse response=new RemoveBucketResponse(region.getSystem(),recipient,region);  RemoveBucketMessage msg=new RemoveBucketMessage(recipient,region.getPRId(),response,bucketId,forceRemovePrimary);  Set<InternalDistributedMember> failures=region.getDistributionManager().putOutgoing(msg);  if (failures != null && failures.size() > 0) {    return null;  }  region.getPrStats().incPartitionMessagesSent();  return response;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:26.977 -0500",hash_original_method="E20ADC2C4905CE726058A12470A98795",hash_generated_method="89150ACEFDB3E162E03A77897901F3E9") public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  private String userAgent(){  return mUserAgent;}  }
class C{  public void test_LongValueExactFloatPos(){  float a=9223372036854775806.99999F;  BigDecimal aNumber=new BigDecimal(a);  try {    aNumber.longValueExact();    fail("java.lang.ArithmeticException isn't thrown after calling longValueExact");  } catch (  java.lang.ArithmeticException ae) {  }}  }
class C{  public List<JCExpression> Idents(List<JCVariableDecl> params){  ListBuffer<JCExpression> ids=new ListBuffer<JCExpression>();  for (List<JCVariableDecl> l=params; l.nonEmpty(); l=l.tail)   ids.append(Ident(l.head));  return ids.toList();}  }
class C{  protected JDialog createDialog(URIChooser chooser,Component parent) throws HeadlessException {  String title=chooser.getDialogTitle();  if (chooser instanceof JFileChooser) {    ((JFileChooser)chooser).getAccessibleContext().setAccessibleDescription(title);  }  JDialog dialog;  Window window=(parent == null || (parent instanceof Window)) ? (Window)parent : SwingUtilities.getWindowAncestor(parent);  dialog=new JDialog(window,title,Dialog.ModalityType.APPLICATION_MODAL);  dialog.setComponentOrientation(chooser.getComponent().getComponentOrientation());  Container contentPane=dialog.getContentPane();  contentPane.setLayout(new BorderLayout());  contentPane.add(chooser.getComponent(),BorderLayout.CENTER);  if (JDialog.isDefaultLookAndFeelDecorated()) {    boolean supportsWindowDecorations=UIManager.getLookAndFeel().getSupportsWindowDecorations();    if (supportsWindowDecorations) {      dialog.getRootPane().setWindowDecorationStyle(JRootPane.FILE_CHOOSER_DIALOG);    }  }  Preferences prefs=PreferencesUtil.userNodeForPackage(getApplication().getModel().getClass());  PreferencesUtil.installFramePrefsHandler(prefs,"openChooser",dialog);  return dialog;}  }
class C{  @Override public View newView(Context context,Cursor cursor,ViewGroup parent){  View v=super.newView(context,cursor,parent);  v.setTag(new ChildViewCache(v));  return v;}  }
class C{  protected boolean shouldAddBackCommandToMenu(){  return true;}  }
class C{  public void addThreeForTeamB(View v){  scoreTeamB=scoreTeamB + 3;  displayForTeamB(scoreTeamB);}  }
class C{  String printQueryTree(){  return queryTreeToString(this,0,"  ");}  }
class C{  public static Frame splash(Image splashImage){  Frame f=new Frame();  AWTSplashWindow w=new AWTSplashWindow(f,splashImage);  w.toFront();  w.setVisible(true);  if (!EventQueue.isDispatchThread()) {synchronized (w) {      while (!w.paintCalled) {        try {          w.wait();        } catch (        InterruptedException e) {        }      }    }  }  return f;}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new LatvianAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.wallPaint=SerialUtilities.readPaint(stream);}  }
class C{  public boolean isAllowOverlap(){  return iAllowOverlap;}  }
class C{  public final double calcDistance(final Coord coord){  double x=coord.getX();  double y=coord.getY();  double minX=this.min.getX();  double minY=this.min.getY();  double maxX=this.max.getX();  double maxY=this.max.getY();  if ((minX <= x) && (x <= maxX) && (minY <= y)&& (y <= maxY)) {    return 0.0;  } else   if ((x < minX) && (maxY < y)) {    Coord refPt=new Coord(minX,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((minX <= x) && (x <= maxX) && (maxY < y)) {    Coord refPt=new Coord(x,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (maxY < y)) {    Coord refPt=new Coord(maxX,maxY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((x < minX) && (minY <= y) && (y <= maxY)) {    Coord refPt=new Coord(minX,y);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (minY <= y) && (y <= maxY)) {    Coord refPt=new Coord(maxX,y);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((x < minX) && (y < minY)) {    Coord refPt=new Coord(minX,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((minX <= x) && (x <= maxX) && (y < minY)) {    Coord refPt=new Coord(x,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else   if ((maxX < x) && (y < maxY)) {    Coord refPt=new Coord(maxX,minY);    return CoordUtils.calcEuclideanDistance(refPt,coord);  } else {    throw new RuntimeException("This should never happen!");  }}  }
class C{  private boolean verifyGroupCopyImageIsEnabled(FunctionalAPIImpl port,ConsistencyGroupCopyUID groupCopy,boolean expectLoggedAccess,String bookmarkName) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception, RecoverPointException {  ConsistencyGroupUID groupUID=groupCopy.getGroupUID();  ConsistencyGroupState groupState;  List<ConsistencyGroupCopyState> groupCopyStateList;  groupState=port.getGroupState(groupUID);  groupCopyStateList=groupState.getGroupCopiesStates();  String cgName=port.getGroupName(groupCopy.getGroupUID());  String cgCopyName=port.getGroupCopyName(groupCopy);  boolean isAPITCheck=false;  RecoverPointTimeStamp apitTimeStamp=null;  if (bookmarkName == null) {    isAPITCheck=true;  } else {    apitTimeStamp=new RecoverPointTimeStamp();    isAPITCheck=true;    apitTimeStamp.setTimeInMicroSeconds(Long.parseLong(bookmarkName) * numMicroSecondsInMilli);  }  logger.info("verifyGroupCopyImageIsEnabled called for copy " + cgCopyName + " of group "+ cgName+ " and bookmarkName/APIT: "+ bookmarkName);  for (  ConsistencyGroupCopyState groupCopyState : groupCopyStateList) {    if (RecoverPointUtils.copiesEqual(groupCopyState.getCopyUID(),groupCopy)) {      StorageAccessState accessState=groupCopyState.getStorageAccessState();      if (expectLoggedAccess) {        logger.debug("Seeing if copy is enabled for LOGGED_ACCESS");        if (accessState == StorageAccessState.LOGGED_ACCESS) {          if (!bookmarkName.equals(groupCopyState.getAccessedImage().getDescription())) {            if (groupCopyState.getAccessedImage().getDescription().length() > 0) {              throw RecoverPointException.exceptions.wrongSnapshotImageEnabled(bookmarkName,groupCopyState.getAccessedImage().getDescription());            } else {              Timestamp enabledAPITTime=null;              RecoverPointTimeStamp enabledTimeDisplay=groupCopyState.getAccessedImage().getClosingTimeStamp();              enabledAPITTime=new Timestamp(enabledTimeDisplay.getTimeInMicroSeconds() / numMicroSecondsInMilli);              throw RecoverPointException.exceptions.wrongSnapshotImageEnabled(bookmarkName,enabledAPITTime.toString());            }          }          logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ " IS enabled in LOGGED_ACCESS");          return true;        } else {          logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ " is NOT enabled in LOGGED_ACCESS. Image state is: "+ accessState.toString());          return false;        }      }      logger.debug("Seeing if copy is enabled for any access mode other than DIRECT_ACCESS or NO_ACCESS");      if (accessState == StorageAccessState.DIRECT_ACCESS) {        logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ " is in direct access mode");        return false;      }      if (accessState == StorageAccessState.NO_ACCESS) {        logger.info("Copy image copy " + cgCopyName + " of group "+ cgName+ " is in NO access mode");        return false;      }      if (groupCopyState.getAccessedImage() != null) {        logger.info("Copy image IS enabled. State is: " + accessState.toString() + ". Mounted snapshot name: "+ groupCopyState.getAccessedImage().getDescription());      } else {        logger.info("Copy image IS enabled. State is: " + accessState.toString() + ". Enabled image: restore state");      }      if (!isAPITCheck) {        if ((bookmarkName == null) && (groupCopyState.getAccessedImage() == null)) {          return true;        }        if ((bookmarkName != null) && !bookmarkName.equals(groupCopyState.getAccessedImage().getDescription())) {          if (groupCopyState.getAccessedImage().getDescription().length() > 0) {            throw RecoverPointException.exceptions.wrongSnapshotImageEnabled(bookmarkName,groupCopyState.getAccessedImage().getDescription());          } else {            Timestamp enabledAPITTime=null;            RecoverPointTimeStamp enabledTimeDisplay=groupCopyState.getAccessedImage().getClosingTimeStamp();            enabledAPITTime=new Timestamp(enabledTimeDisplay.getTimeInMicroSeconds() / numMicroSecondsInMilli);            throw RecoverPointException.exceptions.wrongSnapshotImageEnabled(bookmarkName,enabledAPITTime.toString());          }        }        return true;      } else {        if (bookmarkName == null) {          return true;        } else {          return isGroupCopyImageEnabledForAPIT(port,groupCopy,expectLoggedAccess,apitTimeStamp);        }      }    }  }  logger.error("Could not locate CG copy state");  return false;}  }
class C{  public boolean isMoving(){  return this.moving;}  }
class C{  private void writeDictionaryMetadataFile() throws IOException {  int min_surrogate_key=0;  int max_surrogate_key=0;  if (null != chunkMetaObjectForLastSegmentEntry) {    if (0 == totalRecordCount) {      min_surrogate_key=chunkMetaObjectForLastSegmentEntry.getMax_surrogate_key();    } else {      min_surrogate_key=chunkMetaObjectForLastSegmentEntry.getMax_surrogate_key() + 1;    }    max_surrogate_key=chunkMetaObjectForLastSegmentEntry.getMax_surrogate_key() + totalRecordCount;  } else {    if (totalRecordCount > 0) {      min_surrogate_key=1;    }    max_surrogate_key=totalRecordCount;  }  ColumnDictionaryChunkMeta dictionaryChunkMeta=new ColumnDictionaryChunkMeta(min_surrogate_key,max_surrogate_key,chunk_start_offset,chunk_end_offset,chunk_count);  openThriftWriter(this.dictionaryMetaFilePath);  writeThriftObject(dictionaryChunkMeta);  closeThriftWriter();  LOGGER.info("Dictionary metadata file written successfully for column " + this.columnIdentifier + " at path "+ this.dictionaryMetaFilePath);}  }
class C{  public void test_create03() throws Exception {  final List<String> incorrectNamespaces=Arrays.asList("","te.st");  for (  String incorrectNamespace : incorrectNamespaces) {    try {      doTestCreate(incorrectNamespace);      fail("Expecting: " + HttpServletResponse.SC_INTERNAL_SERVER_ERROR);    } catch (    HttpException ex) {      assertEquals(HttpServletResponse.SC_INTERNAL_SERVER_ERROR,ex.getStatusCode());    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String[] shapefiles=new String[2];  String outputFile;  int progress;  int i, n, FID;  int oneHundredthTotal;  int numRecs;  ShapeType shapeType;  ShapeType outputShapeType=ShapeType.POLYGON;  GeometryFactory factory=new GeometryFactory();  com.vividsolutions.jts.geom.Geometry g1=null;  com.vividsolutions.jts.geom.Geometry g2=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  shapefiles[0]=args[0];  shapefiles[1]=args[1];  outputFile=args[2];  if ((shapefiles[0].length() <= 0) || (shapefiles[1].length() <= 0) || (outputFile == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    com.vividsolutions.jts.geom.Geometry[] recJTSGeometries=null;    ArrayList<com.vividsolutions.jts.geom.Geometry> inputGeometryList=new ArrayList<com.vividsolutions.jts.geom.Geometry>();    com.vividsolutions.jts.geom.Geometry outputGeometry=null;    ShapeFile input1=new ShapeFile(shapefiles[0]);    shapeType=input1.getShapeType();    numRecs=input1.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input1.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 1 of " + 2 + ": Reading data:",progress);      }    }    g1=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    ShapeFile input2=new ShapeFile(shapefiles[1]);    shapeType=input2.getShapeType();    numRecs=input2.getNumberOfRecords();    if (shapeType.getBaseType() == ShapeType.POINT || shapeType.getBaseType() == ShapeType.MULTIPOINT) {      outputShapeType=ShapeType.POINT;    } else     if (shapeType.getBaseType() == ShapeType.POLYLINE && outputShapeType == ShapeType.POLYGON) {      outputShapeType=ShapeType.POLYLINE;    }    oneHundredthTotal=numRecs / 100;    progress=0;    n=0;    for (    ShapeFileRecord record : input2.records) {      if (record.getShapeType() != ShapeType.NULLSHAPE) {        recJTSGeometries=record.getGeometry().getJTSGeometries();        for (int a=0; a < recJTSGeometries.length; a++) {          recJTSGeometries[a].setUserData(record.getRecordNumber());          if (recJTSGeometries[a].isValid()) {            inputGeometryList.add(recJTSGeometries[a]);          } else {            System.out.println(record.getRecordNumber() + " is invalid.");          }        }      }      n++;      if (n >= oneHundredthTotal) {        n=0;        if (cancelOp) {          cancelOperation();          return;        }        progress++;        updateProgress("Loop 2 of " + 2 + ": Reading data:",progress);      }    }    g2=factory.buildGeometry(inputGeometryList);    inputGeometryList.clear();    updateProgress("Performing operation (progress will not be updated):",-1);    try {      outputGeometry=g1.difference(g2);    } catch (    Exception ex) {      outputGeometry=com.vividsolutions.jts.operation.overlay.snap.SnapOverlayOp.difference(g1,g2);    }    ShapeFile output=null;    AttributeTable reader=input1.getAttributeTable();    int numFields=1 + reader.getFieldCount();    DBFField fields[]=new DBFField[numFields];    fields[0]=new DBFField();    fields[0].setName("FID");    fields[0].setDataType(DBFField.DBFDataType.NUMERIC);    fields[0].setFieldLength(10);    fields[0].setDecimalCount(0);    for (int a=0; a < reader.getFieldCount(); a++) {      DBFField inputField=reader.getField(a);      fields[a + 1]=inputField;      if (inputField.getName().equals("FID")) {        fields[a + 1].setName("PARENT_FID");      }    }    output=new ShapeFile(outputFile,outputShapeType,fields);    output.setProjectionStringFromOtherShapefile(input1);    PreparedGeometry[] tests=new PreparedGeometry[g1.getNumGeometries()];    com.vividsolutions.jts.geom.Geometry[] testGs=new com.vividsolutions.jts.geom.Geometry[g1.getNumGeometries()];    int[] userData=new int[g1.getNumGeometries()];    for (int a=0; a < g1.getNumGeometries(); a++) {      tests[a]=PreparedGeometryFactory.prepare(g1.getGeometryN(a));      userData[a]=Integer.parseInt(g1.getGeometryN(a).getUserData().toString());      testGs[a]=g1.getGeometryN(a);    }    Object[][] attributeTableRecords=new Object[reader.getNumberOfRecords()][numFields];    for (int a=0; a < reader.getNumberOfRecords(); a++) {      Object[] rec=reader.nextRecord();      for (int b=0; b < numFields - 1; b++) {        attributeTableRecords[a][b + 1]=rec[b];      }    }    if (outputGeometry instanceof GeometryCollection) {      int numGeometries=outputGeometry.getNumGeometries();      oneHundredthTotal=(int)(numGeometries / 100.0);      progress=0;      n=0;      FID=0;      int parentRecNum=0;      for (int a=0; a < numGeometries; a++) {        parentRecNum=-99;        com.vividsolutions.jts.geom.Geometry gN=outputGeometry.getGeometryN(a);        if (gN instanceof com.vividsolutions.jts.geom.Point && outputShapeType == ShapeType.POINT) {          for (int m=0; m < tests.length; m++) {            if (tests[m].overlaps(gN) || gN.distance(testGs[m]) < 0.0001) {              parentRecNum=userData[m];              break;            }          }          Coordinate p=gN.getCoordinate();          whitebox.geospatialfiles.shapefile.Point wbGeometry=new whitebox.geospatialfiles.shapefile.Point(p.x,p.y);          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof LineString && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests.length; m++) {            if (tests[m].overlaps(gN) || gN.distance(testGs[m]) < 0.0001) {              parentRecNum=userData[m];              break;            }          }          LineString ls=(LineString)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts={0};          Coordinate[] coords=ls.getCoordinates();          for (i=0; i < coords.length; i++) {            pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYLINE) {          for (int m=0; m < tests.length; m++) {            if (tests[m].contains(gN.getInteriorPoint())) {              parentRecNum=userData[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<ShapefilePoint>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.PolyLine wbGeometry=new whitebox.geospatialfiles.shapefile.PolyLine(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else         if (gN instanceof com.vividsolutions.jts.geom.Polygon && outputShapeType == ShapeType.POLYGON) {          for (int m=0; m < tests.length; m++) {            if (tests[m].contains(gN.getInteriorPoint())) {              parentRecNum=userData[m];              break;            }          }          com.vividsolutions.jts.geom.Polygon p=(com.vividsolutions.jts.geom.Polygon)gN;          ArrayList<ShapefilePoint> pnts=new ArrayList<>();          int[] parts=new int[p.getNumInteriorRing() + 1];          Coordinate[] coords=p.getExteriorRing().getCoordinates();          if (Topology.isClockwisePolygon(coords)) {            for (i=0; i < coords.length; i++) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          } else {            for (i=coords.length - 1; i >= 0; i--) {              pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));            }          }          for (int b=0; b < p.getNumInteriorRing(); b++) {            parts[b + 1]=pnts.size();            coords=p.getInteriorRingN(b).getCoordinates();            if (Topology.isClockwisePolygon(coords)) {              for (i=coords.length - 1; i >= 0; i--) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            } else {              for (i=0; i < coords.length; i++) {                pnts.add(new ShapefilePoint(coords[i].x,coords[i].y));              }            }          }          PointsList pl=new PointsList(pnts);          whitebox.geospatialfiles.shapefile.Polygon wbGeometry=new whitebox.geospatialfiles.shapefile.Polygon(parts,pl.getPointsArray());          FID++;          Object[] rowData=attributeTableRecords[parentRecNum - 1];          rowData[0]=new Double(FID);          output.addRecord(wbGeometry,rowData);        } else {        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Saving output file",progress);        }      }    } else {      showFeedback("An error was encountered when saving the output file.");      return;    }    output.write();    returnData(outputFile);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public Matrix4f translationRotateScale(float tx,float ty,float tz,float qx,float qy,float qz,float qw,float scale){  return translationRotateScale(tx,ty,tz,qx,qy,qz,qw,scale,scale,scale);}  }
class C{  public void test(int numberOfObjectives){  C1_DTLZ3 problem=new C1_DTLZ3(numberOfObjectives);  for (int i=0; i < TestThresholds.SAMPLES; i++) {    Solution solution=problem.generate();    problem.evaluate(solution);    Assert.assertFalse(solution.violatesConstraints());  }}  }
class C{  private ArrayList<byte[]> parseMessageData(byte[] readData,int read){  byte[] readBuffer=null;  log.debug("PARSE MESSAGE");  ArrayList<byte[]> messageList=new ArrayList<byte[]>();  if (notFinishedRead == null || notFinishedRead.length <= 0) {    readBuffer=Arrays.copyOf(readData,read);  } else {    readBuffer=Arrays.copyOf(notFinishedRead,notFinishedRead.length + read);    for (int i=0; i < read; i++) {      readBuffer[notFinishedRead.length + i]=readData[i];    }    notFinishedRead=null;  }  SharedPreferences.Editor editor=settings.edit();  editor.putString("last_read",HexDump.toHexString(Arrays.copyOfRange(readBuffer,0,readBuffer.length)));  editor.commit();  int i=0;  if (crcErrorBytesToDiscard > 0)   i=crcErrorBytesToDiscard;  crcErrorBytesToDiscard=0;  while (i < readBuffer.length) {    int answer=getAnswerType(readBuffer[i]);    if (answer == MedtronicConstants.COMMAND_ANSWER) {      log.debug("COMMAND");      if (readBuffer.length >= i + 3)       messageList.add(Arrays.copyOfRange(readBuffer,i,i + 3)); else {        notFinishedRead=Arrays.copyOfRange(readBuffer,i,readBuffer.length);        return messageList;      }      i+=3;    } else     if (answer == MedtronicConstants.FILTER_COMMAND) {      log.debug("FILTERCOMMAND");      messageList.add(Arrays.copyOfRange(readBuffer,i,i + 1));      i++;    } else     if (answer == MedtronicConstants.CRC_ERROR) {      log.debug("CRC ERROR");      if (hGetter != null && hGetter.isWaitingNextLine) {        if (hGetter.timeout >= 2) {          hGetter.timeout=0;          log.debug("too much retries");          sendMessageToUI("historic log read aborted! too much crc errors, waiting to retry.",false);        } else {          sendMessageToUI("CRC error reading historic log line, reinitializating read...",false);          hGetter.timeout++;          hGetter.commandList=Arrays.copyOf(hGetter.commandList,hGetter.commandList.length + 1);          hGetter.commandList[hGetter.commandList.length - 1]=MedtronicConstants.MEDTRONIC_READ_PAGE_COMMAND;          hGetter.firstReadPage=true;          hGetter.isWaitingNextLine=true;          hGetter.withoutConfirmation=0;          hGetter.currentLine=-1;          hGetter.historicPage.clear();synchronized (waitingCommandLock) {            waitingCommand=false;            lastCommandSend=null;          }        }      }      if (readBuffer.length <= i + 1) {        notFinishedRead=Arrays.copyOfRange(readBuffer,i,readBuffer.length);        return messageList;      }      int length=HexDump.unsignedByte(readBuffer[i + 1]);      if (length <= 0) {        i++;        continue;      }      if (readBuffer.length >= i + length + 2) {        i=i + length + 2;      } else {        crcErrorBytesToDiscard=(i + length + 2) - readBuffer.length;        return messageList;      }    } else     if (answer == MedtronicConstants.DATA_ANSWER) {      log.debug("DATA_ANSWER");      if (readBuffer.length <= i + 1) {        notFinishedRead=Arrays.copyOfRange(readBuffer,i,readBuffer.length);        return messageList;      }      int length=HexDump.unsignedByte(readBuffer[i + 1]);      if (length <= 0) {        i++;        continue;      }      if (readBuffer.length >= i + length + 2) {        messageList.add(Arrays.copyOfRange(readBuffer,i,i + length + 2));        i=i + length + 2;      } else {        notFinishedRead=Arrays.copyOfRange(readBuffer,i,readBuffer.length);        return messageList;      }    } else {      i++;    }  }  return messageList;}  }
class C{  @Override protected void sendData(final OutputStream out) throws IOException {  LOG.trace("enter sendData(OutputStream)");  out.write(getContent());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:09.820 -0500",hash_original_method="09E7693F39B1CA310938A9A4756C1A20",hash_generated_method="76383C728FF2574182D2F7D2FD4A1C71") public void applyPattern(String pattern){  dform.applyPattern(pattern);}  }
class C{  public void yypushback(int number){  if (number > yylength())   yy_ScanError(YY_PUSHBACK_2BIG);  yy_markedPos-=number;}  }
class C{  public int size(){  return mSize;}  }
class C{  public void testConcurrentAdds() throws Exception {  final int NUM_DOCS=atLeast(50);  final int MAX_CONCURENT=atLeast(10);  ExecutorService runner=ExecutorUtil.newMDCAwareFixedThreadPool(MAX_CONCURENT,new DefaultSolrThreadFactory("TestDocBasedVersionConstraints"));  try {    for (int id=0; id < NUM_DOCS; id++) {      final int numAdds=TestUtil.nextInt(random(),3,MAX_CONCURENT);      final int winner=TestUtil.nextInt(random(),0,numAdds - 1);      final int winnerVersion=atLeast(100);      final boolean winnerIsDeleted=(0 == TestUtil.nextInt(random(),0,4));      List<Callable<Object>> tasks=new ArrayList<>(numAdds);      for (int variant=0; variant < numAdds; variant++) {        final boolean iShouldWin=(variant == winner);        final long version=(iShouldWin ? winnerVersion : TestUtil.nextInt(random(),1,winnerVersion - 1));        if ((iShouldWin && winnerIsDeleted) || (!iShouldWin && 0 == TestUtil.nextInt(random(),0,4))) {          tasks.add(delayedDelete("" + id,"" + version));        } else {          tasks.add(delayedAdd("id","" + id,"name","name" + id + "_"+ variant,"my_version_l","" + version));        }      }      runner.invokeAll(tasks);      final String expectedDoc="{'id':'" + id + "','my_version_l':"+ winnerVersion+ (!winnerIsDeleted ? ",'name':'name" + id + "_"+ winner+ "'}" : "}");      assertJQ(req("qt","/get","id","" + id,"fl","id,name,my_version_l"),"=={'doc':" + expectedDoc + "}");      assertU(commit());      assertJQ(req("q","id:" + id,"fl","id,name,my_version_l"),"/response/numFound==1","/response/docs==[" + expectedDoc + "]");    }  }  finally {    ExecutorUtil.shutdownAndAwaitTermination(runner);  }}  }
class C{  @Ignore("TODO: test is disabled") @Test public void test_ValidateParallelGatewaySenderQueueAttributes_1(){  Integer localLocPort=(Integer)vm0.invoke(null);  Integer remoteLocPort=(Integer)vm1.invoke(null);  WANTestBase test=new WANTestBase();  Properties props=test.getDistributedSystemProperties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"localhost[" + localLocPort + "]");  InternalDistributedSystem ds=test.getSystem(props);  cache=CacheFactory.create(ds);  File directory=new File("TKSender" + "_disk_" + System.currentTimeMillis() + "_"+ VM.getCurrentVMNum());  directory.mkdir();  File[] dirs1=new File[]{directory};  DiskStoreFactory dsf=cache.createDiskStoreFactory();  dsf.setDiskDirs(dirs1);  DiskStore diskStore=dsf.create("FORNY");  GatewaySenderFactory fact=cache.createGatewaySenderFactory();  fact.setParallel(true);  fact.setBatchConflationEnabled(true);  fact.setBatchSize(200);  fact.setBatchTimeInterval(300);  fact.setPersistenceEnabled(true);  fact.setDiskSynchronous(true);  fact.setDiskStoreName("FORNY");  fact.setMaximumQueueMemory(200);  fact.setAlertThreshold(1200);  GatewayEventFilter myEventFilter1=new MyGatewayEventFilter1();  fact.addGatewayEventFilter(myEventFilter1);  GatewayTransportFilter myStreamFilter1=new MyGatewayTransportFilter1();  fact.addGatewayTransportFilter(myStreamFilter1);  GatewayTransportFilter myStreamFilter2=new MyGatewayTransportFilter2();  fact.addGatewayTransportFilter(myStreamFilter2);  final IgnoredException exTKSender=IgnoredException.addIgnoredException("Could not connect");  try {    GatewaySender sender1=fact.create("TKSender",2);    AttributesFactory factory=new AttributesFactory();    factory.addGatewaySenderId(sender1.getId());    factory.setDataPolicy(DataPolicy.PERSISTENT_PARTITION);    Region region=cache.createRegionFactory(factory.create()).create("test_ValidateGatewaySenderAttributes");    Set<GatewaySender> senders=cache.getGatewaySenders();    assertEquals(senders.size(),1);    GatewaySender gatewaySender=senders.iterator().next();    Set<RegionQueue> regionQueues=((AbstractGatewaySender)gatewaySender).getQueues();    assertEquals(regionQueues.size(),1);    RegionQueue regionQueue=regionQueues.iterator().next();    assertEquals(true,regionQueue.getRegion().getAttributes().isDiskSynchronous());  }  finally {    exTKSender.remove();  }}  }
class C{  public static void generateRPClass(){  final RPClass shop=new RPClass(MARKET_RPCLASS_NAME);  shop.isA("entity");  shop.addRPSlot(OFFERS_SLOT_NAME,-1,Definition.HIDDEN);  shop.addRPSlot(EARNINGS_SLOT_NAME,-1,Definition.HIDDEN);  shop.addRPSlot(EXPIRED_OFFERS_SLOT_NAME,-1,Definition.HIDDEN);}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public void stop(){  if (looperUpdater != null) {    looperUpdater.cancel();    looperUpdater=null;  }}  }
class C{  public boolean deleteEntry(KeyStore keyStore,KeyStoreData keyStoreData){  try {    keyStore.deleteEntry(keyStoreData.getAlias());    this.save(keyStore,keyStoreData);  } catch (  KeyStoreException e) {    LOGGER.error("Error deleting keyStore entry",e);  }  return true;}  }
class C{  private void checkSize(final int i){  if (i >= max_size) {    final int old_size=max_size;    max_size+=increment_size;    if (max_size <= i) {      max_size=i + increment_size + 2;    }    final short[] temp=items;    items=new short[max_size];    System.arraycopy(temp,0,items,0,old_size);    increment_size=incrementSize(increment_size);  }}  }
class C{  public static char[] insert(char[] dest,char src,int offset){  char[] temp=new char[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  public ElementCreatorImpl addUndeclaredElementMarker(){  addElement(ELEMENT_MARKER);  return this;}  }
class C{  public CJKBigramFilterFactory(Map<String,String> args){  super(args);  int flags=0;  if (getBoolean(args,"han",true)) {    flags|=CJKBigramFilter.HAN;  }  if (getBoolean(args,"hiragana",true)) {    flags|=CJKBigramFilter.HIRAGANA;  }  if (getBoolean(args,"katakana",true)) {    flags|=CJKBigramFilter.KATAKANA;  }  if (getBoolean(args,"hangul",true)) {    flags|=CJKBigramFilter.HANGUL;  }  this.flags=flags;  this.outputUnigrams=getBoolean(args,"outputUnigrams",false);  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  private static final ExceptionMessage createDefaultMessage(){  return new ExceptionMessage(new ExceptionCode("SYS0001"),"Unable to process request due to a system error");}  }
class C{  public String toString(String prefix,int recursionLevel){  StringBuffer buffer=new StringBuffer();  buffer.append(prefix);  buffer.append("|  ");  buffer.append(m_item.toString());  buffer.append(" (");  buffer.append(m_projectedCounts.getCount(recursionLevel));  buffer.append(")\n");  for (  FPTreeNode node : m_children.values()) {    buffer.append(node.toString(prefix + "|  ",recursionLevel));  }  return buffer.toString();}  }
class C{  static void validateJMIMethods() throws MatlabConnectionException {  Class<?> matlabClass=getAndCheckClass("com.mathworks.jmi.Matlab");  checkMethod(matlabClass,Object.class,"mtFevalConsoleOutput",new Class<?>[]{String.class,Object[].class,int.class},new Class<?>[]{Exception.class});  checkMethod(matlabClass,Void.TYPE,"whenMatlabIdle",new Class<?>[]{Runnable.class},new Class<?>[0]);  Class<?> nativeMatlabClass=getAndCheckClass("com.mathworks.jmi.NativeMatlab");  checkMethod(nativeMatlabClass,boolean.class,"nativeIsMatlabThread",new Class<?>[0],new Class<?>[0]);}  }
class C{  public static void main(String[] args) throws IgniteException {  try (Ignite ignite=Ignition.start("examples/config/example-ignite.xml")){    System.out.println();    System.out.println(">>> Cache affinity example started.");    try (IgniteCache<Integer,String> cache=ignite.getOrCreateCache(CACHE_NAME)){      for (int i=0; i < KEY_CNT; i++)       cache.put(i,Integer.toString(i));      visitUsingAffinityRun();      visitUsingMapKeysToNodes();    }  finally {      ignite.destroyCache(CACHE_NAME);    }  } }  }
class C{  public static CustomWebViewDialog create(String dialogTitle,String htmlFileName,int accentColor){  CustomWebViewDialog dialog=new CustomWebViewDialog();  Bundle args=new Bundle();  args.putString(EXTRA_DIALOG_TITLE,dialogTitle);  args.putString(EXTRA_HTML_FILE_NAME,htmlFileName);  args.putInt(EXTRA_ACCENT_COLOR,accentColor);  dialog.setArguments(args);  return dialog;}  }
class C{  private long usageEndTimeForBillingResult(long periodStart,long periodEnd,PriceModelInput priceModelInput){  if (priceModelInput.isPerUnitPriceModel()) {    long adjustedBillingPeriodEnd=priceModelInput.getAdjustedBillingPeriodEnd();    if (periodStart >= adjustedBillingPeriodEnd) {      return periodStart;    } else {      return Math.min(adjustedBillingPeriodEnd,periodEnd);    }  } else {    return periodEnd;  }}  }
class C{  public static boolean makeParentDirs(String path){  if (path == null) {    String message=Logging.getMessage("nullValue.FilePathIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  String fs=File.separator;  String[] pathParts=path.split("[/" + (fs.equals("/") ? "" : (fs.equals("\\") ? "\\\\" : fs)) + "]");  if (pathParts.length <= 1)   return true;  StringBuilder sb=new StringBuilder();  for (int i=0; i < pathParts.length - 1; i++) {    if (pathParts[i].length() == 0)     continue;    sb.append(File.separator);    sb.append(pathParts[i]);  }  return (new File(sb.toString())).mkdirs();}  }
class C{  public void add(int id,String name,int parentId,boolean isFixed){  FolderTokenDivider div;  div=new FolderTokenDivider(id,name,parentId,isFixed);  super.add(div);}  }
class C{  public static boolean isWindowsXPOS(){  String osName=System.getProperty("os.name");  return osName != null && osName.toLowerCase().contains("windows") && osName.contains("xp");}  }
class C{  public FastAdapterBottomSheetDialog<Item> removeItemRange(int position,int itemCount){  mFastItemAdapter.removeItemRange(position,itemCount);  return this;}  }
class C{  public static double cdf(double x,double mu,double sigma,boolean log_p){  if (Double.isNaN(x) || Double.isNaN(mu) || Double.isNaN(sigma)) {    return Double.NaN;  }  if (Double.isInfinite(x) && mu == x) {    return Double.NaN;  }  if (sigma <= 0) {    if (sigma < 0) {      return Double.NaN;    }    return (x < mu) ? 0.0 : 1.0;  }  double p=(x - mu) / sigma;  if (Double.isInfinite(p)) {    return (x < mu) ? 0.0 : 1.0;  }  return standardCDF(p,log_p);}  }
class C{  public Socket createSocket(InetAddress address,int port,InetAddress clientAddress,int clientPort) throws IOException {  return new Socket(address,port,clientAddress == null ? bindAddress : clientAddress,clientPort);}  }
class C{  public XYSeries toXYSeries(){  XYSeries xySeries=new XYSeries(mTitle);  int k=0;  for (  double value : mValues) {    xySeries.add(++k,value);  }  return xySeries;}  }
class C{  @RequestMapping(value="/paytax/{assessmentNo},{ulbCode},{amountToBePaid},{mobileNumber},{emailId},{category}",method=RequestMethod.GET) public String newform(final Model model,@PathVariable final String assessmentNo,@PathVariable String ulbCode,@PathVariable BigDecimal amountToBePaid,@PathVariable String mobileNumber,@PathVariable String emailId,@PathVariable String category,final HttpServletRequest request) throws ParseException {  String redirectUrl="";  if (!basicPropertyDAO.isAssessmentNoExist(assessmentNo)) {    model.addAttribute("errorMsg",THIRD_PARTY_ERR_MSG_ASSESSMENT_NO_NOT_FOUND);    return PROPERTY_VALIDATION;  }  BasicProperty basicProperty=basicPropertyDAO.getBasicPropertyByPropertyID(assessmentNo);  if (basicProperty != null) {    Property property=basicProperty.getProperty();    if (property != null) {      if (property.getIsExemptedFromTax()) {        model.addAttribute("errorMsg",THIRD_PARTY_ERR_MSG_EXEMPTED_PROPERTY);        return PROPERTY_VALIDATION;      }      Ptdemand currentPtdemand=ptDemandDAO.getNonHistoryCurrDmdForProperty(property);      BigDecimal totalTaxDue=BigDecimal.ZERO;      String propType=property.getPropertyDetail().getPropertyTypeMaster().getCode();      if (currentPtdemand != null) {        for (        EgDemandDetails demandDetails : currentPtdemand.getEgDemandDetails()) {          if (demandDetails.getAmount().subtract(demandDetails.getAmtCollected()).compareTo(BigDecimal.ZERO) > 0) {            totalTaxDue=totalTaxDue.add(demandDetails.getAmount().subtract(demandDetails.getAmtCollected()));          }        }      }      if (amountToBePaid.compareTo(totalTaxDue) > 0) {        model.addAttribute("errorMsg",THIRD_PARTY_DEMAND_AMOUNT_GREATER_MSG);        return PROPERTY_VALIDATION;      }      if (!propType.equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND) && category.equalsIgnoreCase(CATEGORY_TYPE_VACANTLAND_TAX)) {        model.addAttribute("errorMsg",THIRD_PARTY_ERR_MSG_VACANTLAND_ASSESSMENT_NOT_FOUND);        return PROPERTY_VALIDATION;      } else       if (propType.equalsIgnoreCase(OWNERSHIP_TYPE_VAC_LAND) && category.equalsIgnoreCase(CATEGORY_TYPE_PROPERTY_TAX)) {        model.addAttribute("errorMsg",THIRD_PARTY_ERR_MSG_PROPERTY_TAX_ASSESSMENT_NOT_FOUND);        return PROPERTY_VALIDATION;      }      if (!category.equalsIgnoreCase(CATEGORY_TYPE_PROPERTY_TAX) && !category.equalsIgnoreCase(CATEGORY_TYPE_VACANTLAND_TAX)) {        model.addAttribute("errorMsg",THIRD_PARTY_ERR_MSG_WRONG_CATEGORY);        return PROPERTY_VALIDATION;      }    }  }  try {    BillInfoImpl billInfo=getBillInfo(assessmentNo,amountToBePaid,category);    if (billInfo != null) {      PaymentRequest paymentRequest=SpringBeanUtil.getCollectionIntegrationService().processMobilePayments(billInfo);      if (paymentRequest != null) {        for (        Object obj : paymentRequest.getRequestParameters().values()) {          redirectUrl=obj.toString();        }        model.addAttribute("redirectUrl",redirectUrl);      }    } else {      model.addAttribute("errorMsg",MOBILE_PAYMENT_INCORRECT_BILL_DATA);      return PROPERTY_VALIDATION;    }  } catch (  ValidationException e) {    return PROPERTY_VALIDATION;  }catch (  Exception e) {    return PROPERTY_VALIDATION;  }  return PAYTAX_FORM;}  }
class C{  public String prepareTable(ColumnInfo[] layout,String from,String where,boolean multiSelection,String tableName){  return prepareTable(layout,from,where,multiSelection,tableName,true);}  }
class C{  @Override public boolean contains(final Interval i){  return (getStart() <= i.getStart()) && (getEnd() >= i.getEnd());}  }
class C{  public TreeIndex(Table t,RowManager rows,Column col,Comparator cmp) throws IncompatibleComparatorException {  m_table=t;  m_rows=rows;  m_col=col;  m_index=SortedMapFactory.getMap(col.getColumnType(),cmp,false);  index();  m_col.addColumnListener(this);  m_table.addTableListener(this);}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof TypeVar)) {    return false;  }  TypeVar other=(TypeVar)obj;  return this.instance == other.instance;}  }
class C{  private void initializeEnvironment(){  env.put(ENV_SYS_USER,System.getProperty("user.name"));  env.put(ENV_SYS_USER_HOME,System.getProperty("user.home"));  env.put(ENV_SYS_HOST_NAME,new HostName().determineHostName());  env.put(ENV_SYS_CLASSPATH,System.getProperty("java.class.path"));  env.put(ENV_SYS_JAVA_VERSION,System.getProperty("java.version"));  env.put(ENV_SYS_OS,System.getProperty("os.name"));  env.put(ENV_SYS_OS_LINE_SEPARATOR,System.getProperty("line.separator"));  env.put(ENV_SYS_GEMFIRE_DIR,System.getenv("GEMFIRE"));  env.put(ENV_APP_NAME,org.apache.geode.management.internal.cli.shell.Gfsh.GFSH_APP_NAME);  readonlyAppEnv.add(ENV_APP_NAME);  env.put(ENV_APP_LOGGING_ENABLED,String.valueOf(!Level.OFF.equals(this.gfshConfig.getLogLevel())));  readonlyAppEnv.add(ENV_APP_LOGGING_ENABLED);  env.put(ENV_APP_LOG_FILE,this.gfshConfig.getLogFilePath());  readonlyAppEnv.add(ENV_APP_LOG_FILE);  env.put(ENV_APP_PWD,System.getProperty("user.dir"));  readonlyAppEnv.add(ENV_APP_PWD);  env.put(ENV_APP_FETCH_SIZE,String.valueOf(DEFAULT_APP_FETCH_SIZE));  env.put(ENV_APP_LAST_EXIT_STATUS,String.valueOf(DEFAULT_APP_LAST_EXIT_STATUS));  readonlyAppEnv.add(ENV_APP_LAST_EXIT_STATUS);  env.put(ENV_APP_COLLECTION_LIMIT,String.valueOf(DEFAULT_APP_COLLECTION_LIMIT));  env.put(ENV_APP_QUERY_RESULTS_DISPLAY_MODE,DEFAULT_APP_QUERY_RESULTS_DISPLAY_MODE);  env.put(ENV_APP_QUIET_EXECUTION,String.valueOf(DEFAULT_APP_QUIET_EXECUTION));  env.put(ENV_APP_RESULT_VIEWER,String.valueOf(DEFAULT_APP_RESULT_VIEWER));}  }
class C{  @Override public double doubleValue(){  return (double)numerator / (double)denominator;}  }
class C{  public int size(){  return count.get();}  }
class C{  private void destroyPiedPiper(){  piedpiper.getZone().remove(piedpiper);  piedpiper=null;}  }
class C{  public void visitEnd(){  if (av != null) {    av.visitEnd();  }}  }
class C{  public ServiceProcess updateProcess(long serviceProcessId,String processNo,String processName,long dossierTemplateId,String description) throws PortalException, SystemException {  ServiceProcess serviceProcess=ServiceProcessLocalServiceUtil.fetchServiceProcess(serviceProcessId);  if (Validator.isNotNull(serviceProcess)) {    serviceProcess.setModifiedDate(new Date());    serviceProcess.setProcessNo(processNo);    serviceProcess.setProcessName(processName);    serviceProcess.setDescription(description);    serviceProcess.setDossierTemplateId(dossierTemplateId);    serviceProcessPersistence.update(serviceProcess);  }  return serviceProcess;}  }
class C{  @CanIgnoreReturnValue @Deprecated @Override public ImmutableList<V> removeAll(Object key){  throw new UnsupportedOperationException();}  }
class C{  private static String processConvertToken(String functionToken,boolean serverSupportsConvertFn,MySQLConnection conn) throws SQLException {  int firstIndexOfParen=functionToken.indexOf("(");  if (firstIndexOfParen == -1) {    throw SQLError.createSQLException("Syntax error while processing {fn convert (... , ...)} token, missing opening parenthesis in token '" + functionToken + "'.",SQLError.SQL_STATE_SYNTAX_ERROR,conn.getExceptionInterceptor());  }  int indexOfComma=functionToken.lastIndexOf(",");  if (indexOfComma == -1) {    throw SQLError.createSQLException("Syntax error while processing {fn convert (... , ...)} token, missing comma in token '" + functionToken + "'.",SQLError.SQL_STATE_SYNTAX_ERROR,conn.getExceptionInterceptor());  }  int indexOfCloseParen=functionToken.indexOf(')',indexOfComma);  if (indexOfCloseParen == -1) {    throw SQLError.createSQLException("Syntax error while processing {fn convert (... , ...)} token, missing closing parenthesis in token '" + functionToken + "'.",SQLError.SQL_STATE_SYNTAX_ERROR,conn.getExceptionInterceptor());  }  String expression=functionToken.substring(firstIndexOfParen + 1,indexOfComma);  String type=functionToken.substring(indexOfComma + 1,indexOfCloseParen);  String newType=null;  String trimmedType=type.trim();  if (StringUtils.startsWithIgnoreCase(trimmedType,"SQL_")) {    trimmedType=trimmedType.substring(4,trimmedType.length());  }  if (serverSupportsConvertFn) {    newType=JDBC_CONVERT_TO_MYSQL_TYPE_MAP.get(trimmedType.toUpperCase(Locale.ENGLISH));  } else {    newType=JDBC_NO_CONVERT_TO_MYSQL_EXPRESSION_MAP.get(trimmedType.toUpperCase(Locale.ENGLISH));    if (newType == null) {      throw SQLError.createSQLException("Can't find conversion re-write for type '" + type + "' that is applicable for this server version while processing escape tokens.",SQLError.SQL_STATE_GENERAL_ERROR,conn.getExceptionInterceptor());    }  }  if (newType == null) {    throw SQLError.createSQLException("Unsupported conversion type '" + type.trim() + "' found while processing escape token.",SQLError.SQL_STATE_GENERAL_ERROR,conn.getExceptionInterceptor());  }  int replaceIndex=newType.indexOf("?");  if (replaceIndex != -1) {    StringBuilder convertRewrite=new StringBuilder(newType.substring(0,replaceIndex));    convertRewrite.append(expression);    convertRewrite.append(newType.substring(replaceIndex + 1,newType.length()));    return convertRewrite.toString();  }  StringBuilder castRewrite=new StringBuilder("CAST(");  castRewrite.append(expression);  castRewrite.append(" AS ");  castRewrite.append(newType);  castRewrite.append(")");  return castRewrite.toString();}  }
class C{  public static boolean contains(final Collection<Object> list,final Object value){  return list != null && value != null && list.contains(value);}  }
class C{  public BayesUpdaterEditor(ApproximateUpdaterWrapper wrapper){  this((UpdaterWrapper)wrapper);}  }
class C{  public WaitingForDeviceDialog(){  super();  initComponents();  setLocationRelativeTo(null);  setTitle(ValueHolder.WINDOW_TITLE);  setIconImage(ValueHolder.Icons.APPLICATION.getImage());}  }
class C{  public void resetAnimatedValue(){  hasAnimVal=false;  fireAnimatedAttributeListeners();}  }
class C{  private void testJceAvailability(int keyBitLength) throws EncryptionUnsupportedByPlatformException, PDFParseException {  final byte[] junkBuffer=new byte[16];  Arrays.fill(junkBuffer,(byte)0xAE);  final byte[] junkKey=new byte[getSaltedContentKeyByteLength(keyBitLength / 8)];  Arrays.fill(junkKey,(byte)0xAE);  try {    createAndInitialiseContentCipher(ByteBuffer.wrap(junkBuffer),junkKey);  } catch (  PDFParseException e) {    throw new PDFParseException("Internal error; " + "failed to produce test cipher: " + e.getMessage());  }catch (  NoSuchAlgorithmException e) {    throw new EncryptionUnsupportedByPlatformException("JCE does not offer required cipher",e);  }catch (  NoSuchPaddingException e) {    throw new EncryptionUnsupportedByPlatformException("JCE does not offer required padding",e);  }catch (  InvalidKeyException e) {    throw new EncryptionUnsupportedByPlatformException("JCE does accept key size of " + (getSaltedContentKeyByteLength() * 8) + " bits- could it be a policy restriction?",e);  }catch (  InvalidAlgorithmParameterException e) {    throw new EncryptionUnsupportedByPlatformException("JCE did not accept cipher parameter",e);  }  try {    createMD5Digest();  } catch (  NoSuchAlgorithmException e) {    throw new EncryptionUnsupportedByPlatformException("No MD5 digest available from JCE",e);  }  if (encryptionAlgorithm != EncryptionAlgorithm.RC4) {    final Cipher rc4;    try {      rc4=createRC4Cipher();    } catch (    GeneralSecurityException e) {      throw new EncryptionUnsupportedByPlatformException("JCE did not offer RC4 cipher",e);    }    final byte[] rc4JunkKey=new byte[5];    Arrays.fill(junkKey,(byte)0xAE);    try {      initDecryption(rc4,createRC4Key(rc4JunkKey));    } catch (    InvalidKeyException ex) {      throw new EncryptionUnsupportedByPlatformException("JCE did not accept 40-bit RC4 key; " + "policy problem?",ex);    }  }}  }
class C{  public void testNegNegSameLength(){  byte aBytes[]={-128,56,100,-2,-76,89,45,91,3,-15,35,26,-117};  byte bBytes[]={-2,-3,-4,-4,5,14,23,39,48,57,66,5,14,23};  int aSign=-1;  int bSign=-1;  byte rBytes[]={-1,1,2,3,3,0,65,-96,-48,-124,-60,12,-40,-31,97};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  BigInteger result=aNumber.and(bNumber);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",-1,result.signum());}  }
class C{  private boolean searchSequenceLabel() throws IOException {  if (!seekAndReadNextLabel(false)) {    if (!nextSource() || !searchSequenceLabel()) {      return false;    }  }  return true;}  }
class C{  public DoubleBuffer _getFirstEmptyBuffer(){  DoubleBuffer emptyBuffer=null;  for (int i=buffers.length; --i >= 0; ) {    if (buffers[i].isEmpty()) {      if (buffers[i].isAllocated())       return buffers[i];      emptyBuffer=buffers[i];    }  }  return emptyBuffer;}  }
class C{  public void testFreqAscend(){  m_Filter=getFilter();  ((ClassOrder)m_Filter).setClassOrder(ClassOrder.FREQ_ASCEND);  Instances result=useFilter();  performTests(result);}  }
class C{  public void uninstallDefaults(JComponent c){  uninstallListeners((JSeparator)c);  uninstallDefaults((JSeparator)c);}  }
class C{  public Iterator<User> scrollNotDeletedByFilter(String filter,int skip){  String s=filter.toLowerCase();  StringBuilder sb=new StringBuilder();  sb.append("FROM ").append(entityClass.getName()).append(" ");  sb.append("WHERE deleted is false AND ");  sb.append("(username LIKE '%").append(s).append("%' ").append("OR lower(firstname) LIKE '%").append(s).append("%' ").append("OR lower(lastname) LIKE '%").append(s).append("%') ");  sb.append("AND not username='").append(cfgManager.getAdministratorConfiguration().getName()).append("' AND not username='").append(getPublicDataName()).append("' ");  sb.append("ORDER BY username");  return new PagedIterator<>(this,sb.toString(),skip);}  }
class C{  public String lookupPrefix(String namespaceURI){  if (namespaceURI == null) {    return null;  }  short type=this.getNodeType();switch (type) {case Node.ENTITY_NODE:case Node.NOTATION_NODE:case Node.DOCUMENT_FRAGMENT_NODE:case Node.DOCUMENT_TYPE_NODE:    return null;case Node.ATTRIBUTE_NODE:{    if (this.getOwnerElement().getNodeType() == Node.ELEMENT_NODE) {      return getOwnerElement().lookupPrefix(namespaceURI);    }    return null;  }default :{  return null;}}}  }
class C{  public String runComplete(final EvolutionState state){  return null;}  }
class C{  public void run(){  GangliaListener gangliaListener=null;  try {    final ThreadFactory threadFactory=new DaemonThreadFactory("GangliaService");    if (!serviceStartTime.compareAndSet(0L,System.currentTimeMillis())) {      throw new IllegalStateException("Already running.");    }    if (listen)     listenService=Executors.newSingleThreadExecutor(threadFactory);    if (report)     sendService=Executors.newSingleThreadExecutor(threadFactory);    scheduledService=Executors.newScheduledThreadPool(3,threadFactory);    gangliaSender=new GangliaSender(metricsServers,IGangliaDefaults.BUFFER_SIZE);    if (listen) {      gangliaListener=new GangliaListener(listenGroup,listenPort,messageDecoder,new GangliaServiceHandler());      listenerFuture=new FutureTask<Void>(gangliaListener);      listenService.submit(listenerFuture);    }    if (report) {      if (heartbeatInterval > 0) {        scheduledService.scheduleWithFixedDelay(new HeartBeatTask(),initialDelay,heartbeatInterval,TimeUnit.SECONDS);      }      scheduledService.scheduleAtFixedRate(new GatherMetricsTask(),initialDelay,monitoringInterval,TimeUnit.SECONDS);      scheduledService.scheduleAtFixedRate(new PurgeMetricsTask(),60,60,TimeUnit.SECONDS);    }    if (log.isInfoEnabled())     log.info("Running on " + hostName + " for "+ serviceName);    if (listen) {      listenerFuture.get();    } else {synchronized (keepAlive) {        try {          keepAlive.wait();        } catch (        InterruptedException ex) {        }      }    }  } catch (  InterruptedException t) {  }catch (  Throwable t) {    log.error(t,t);  } finally {    if (listenerFuture != null) {      listenerFuture.cancel(true);    }    if (listenService != null) {      listenService.shutdownNow();    }    if (gangliaSender != null) {      sendMessage(new GangliaRequestMessage(hostName,"shutdown",false));    }    if (sendService != null) {      sendService.shutdownNow();    }    if (gangliaSender != null)     gangliaSender.close();    gangliaState.reset();    serviceStartTime.set(0L);  }}  }
class C{  public void removeResponseHeader(){  values.remove(RESPONSE_HEADER_KEY);}  }
class C{  @Override public void printMessageUserData(IStructuredOutputWriter out,String msgId) throws Exception {  final MsgData data=m_msgData.get(msgId);  if (data == null) {    out.simpleChild("totalInstances",0);    return;  }  out.simpleChild("intervalSeenIn",data.m_intervalAllCount);  out.simpleChild("totalInstances",data.m_allCount);  out.simpleChild("intervalsSeenInOutOfContext",data.m_intervalCount);  out.simpleChild("totalInstancesOutOfContext",data.m_totalLogCounts);  if (data.m_totalLogCounts > 0) {    out.simpleChild("estimatedLambda",data.m_lambda);    out.simpleChild("instanceCountForAnomaly9",calcThreshold(0.9,data.m_lambda));    out.simpleChild("instanceCountForAnomaly99",calcThreshold(0.99,data.m_lambda));  }}  }
class C{  @Override public Enumeration<String> enumerateMeasures(){  Vector<String> newVector=new Vector<String>(2);  newVector.addElement("measureBestNumIts");  newVector.addElement("measureBestVal");  return newVector.elements();}  }
class C{  public boolean isPersistent(){  return persistent;}  }
class C{  public Dimension preferredLayoutSize(Container parent){  Dimension cpd;  Dimension mbd;  Dimension tpd;  int cpWidth=0;  int cpHeight=0;  int mbWidth=0;  int mbHeight=0;  int tpWidth=0;  int tpHeight=0;  Insets i=parent.getInsets();  JRootPane root=(JRootPane)parent;  if (root.getContentPane() != null) {    cpd=root.getContentPane().getPreferredSize();  } else {    cpd=root.getSize();  }  if (cpd != null) {    cpWidth=cpd.width;    cpHeight=cpd.height;  }  if (root.getJMenuBar() != null) {    mbd=root.getJMenuBar().getPreferredSize();    if (mbd != null) {      mbWidth=mbd.width;      mbHeight=mbd.height;    }  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof SeaGlassRootPaneUI)) {    JComponent titlePane=((SeaGlassRootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      tpd=titlePane.getPreferredSize();      if (tpd != null) {        tpWidth=tpd.width;        tpHeight=tpd.height;      }    }  }  return new Dimension(Math.max(Math.max(cpWidth,mbWidth),tpWidth) + i.left + i.right,cpHeight + mbHeight + tpHeight+ i.top+ i.bottom);}  }
class C{  protected void fireAnnotationChanged(){  if (notify) {    notifyListeners(new AnnotationChangeEvent(this,this));  }}  }
class C{  public void prepare() throws ReplicatorException, InterruptedException {  List<String> datasourceNames=replicatorProps.getStringList("replicator.datasources");  for (  String name : datasourceNames) {    logger.debug("Configuring data source: name=" + name);    String dsPrefix="replicator.datasource." + name;    String className=replicatorProps.get(dsPrefix);    TungstenProperties attributes=replicatorProps.subset(dsPrefix + ".",true);    attributes.setBeanSupportEnabled(true);    UniversalDataSource ds=manager.add(name,className,attributes);    ds.configure();    ds.prepare();  }}  }
class C{  public static void main(String argv[]) throws Exception {  if (argv.length < 1) {    System.err.println("Usage: DmozParser <dmoz_file> [-subset <subsetDenominator>] [-includeAdultMaterial] [-skew skew] [-snippet] [-topicFile <topic list file>] [-topic <topic> [-topic <topic> [...]]]");    return;  }  int subsetDenom=1;  int skew=0;  String dmozFile=argv[0];  boolean includeAdult=false;  boolean snippet=false;  Pattern topicPattern=null;  Vector<String> topics=new Vector<String>();  Configuration conf=NutchConfiguration.create();  store=StorageUtils.createWebStore(conf,String.class,WebPage.class);  FileSystem fs=FileSystem.get(conf);  try {    for (int i=1; i < argv.length; i++) {      if ("-includeAdultMaterial".equals(argv[i])) {        includeAdult=true;      } else       if ("-subset".equals(argv[i])) {        subsetDenom=Integer.parseInt(argv[i + 1]);        i++;      } else       if ("-topic".equals(argv[i])) {        topics.addElement(argv[i + 1]);        i++;      } else       if ("-topicFile".equals(argv[i])) {        addTopicsFromFile(argv[i + 1],topics);        i++;      } else       if ("-skew".equals(argv[i])) {        skew=Integer.parseInt(argv[i + 1]);        i++;      } else       if ("-snippet".equals(argv[i])) {        snippet=true;      }    }    DmozParser parser=new DmozParser();    if (!topics.isEmpty()) {      String regExp=new String("^(");      int j=0;      for (; j < topics.size() - 1; ++j) {        regExp=regExp.concat(topics.get(j));        regExp=regExp.concat("|");      }      regExp=regExp.concat(topics.get(j));      regExp=regExp.concat(").*");      LOG.info("Topic selection pattern = " + regExp);      topicPattern=Pattern.compile(regExp);    }    parser.parseDmozFile(new File(dmozFile),subsetDenom,includeAdult,skew,topicPattern,snippet);  }  finally {    fs.close();  }}  }
class C{  public final boolean isTopToBottom(){  return topToBottom;}  }
class C{  public RandomResponseHandler(int length){  this(length,DEFAULT_DURATION);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:10.903 -0500",hash_original_method="8F2C7ADB42C2C89CD99F5BA7F29697D3",hash_generated_method="41778C0E8D4ACCEABECB6CD9DAF58067") private Scope peek() throws JSONException {  if (stack.isEmpty()) {    throw new JSONException("Nesting problem");  }  return stack.get(stack.size() - 1);}  }
class C{  public boolean isFirst() throws SQLException {  notSupported();  return false;}  }
class C{  public MessageBuilder appendContent(String content){  this.content+=content;  return this;}  }
class C{  public static boolean attemptAddress(Object object,Offset offset,Address oldValue,Address newValue){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return false;}  }
class C{  public long revisionTimestamp(){  return revTs;}  }
class C{  public static void showError(Activity activity,String message){  String errorMessage=getErrorMessage(activity,message);  showErrorInternal(activity,errorMessage);}  }
class C{  public int groupSize(String grpName){  int res=0;  for (  HadoopCounter counter : cntrs.values()) {    if (grpName.equals(counter.group()))     res++;  }  return res;}  }
class C{  private void onStartTrackingTouch(){  mIsDragging=true;}  }
class C{  private boolean isDateTblMultCreated(){  boolean isMDate=false;  if (_flds.getMultFldsCount() > 0) {    for (int i=0; i < _flds.count(); i++) {      ArchiveFldImpl fld=(ArchiveFldImpl)_flds.get(i);      if (fld.isMult()) {        int type=fld.getType();        if (type == ArchiveFldType.DATE || type == ArchiveFldType.DATE_TIME || type == ArchiveFldType.TIME) {          isMDate=true;        }      }    }  }  return isMDate;}  }
class C{  public static long divide(long dividend,long divisor){  if (divisor < 0) {    if (compare(dividend,divisor) < 0) {      return 0;    } else {      return 1;    }  }  if (dividend >= 0) {    return dividend / divisor;  }  long quotient=((dividend >>> 1) / divisor) << 1;  long rem=dividend - quotient * divisor;  return quotient + (compare(rem,divisor) >= 0 ? 1 : 0);}  }
class C{  public KeyRecordIterator select(Statement stmt,boolean metaOnly,Node node,Qualifier... qualifiers){  KeyRecordIterator results=null;  if (qualifiers == null || qualifiers.length == 0) {    RecordSet recordSet=null;    if (node != null)     recordSet=this.client.queryNode(null,stmt,node); else     recordSet=this.client.query(null,stmt);    results=new KeyRecordIterator(stmt.getNamespace(),recordSet);    return results;  }  if (qualifiers != null && qualifiers.length == 1 && qualifiers[0] instanceof KeyQualifier) {    KeyQualifier kq=(KeyQualifier)qualifiers[0];    Key key=kq.makeKey(stmt.getNamespace(),stmt.getSetName());    Record record=null;    if (metaOnly)     record=this.client.getHeader(null,key); else     record=this.client.get(null,key,stmt.getBinNames());    if (record == null) {      results=new KeyRecordIterator(stmt.getNamespace());    } else {      KeyRecord keyRecord=new KeyRecord(key,record);      results=new KeyRecordIterator(stmt.getNamespace(),keyRecord);    }    return results;  }  Map<String,Object> originArgs=new HashMap<String,Object>();  originArgs.put("includeAllFields",1);  for (int i=0; i < qualifiers.length; i++) {    Qualifier qualifier=qualifiers[i];    if (isIndexedBin(qualifier)) {      Filter filter=qualifier.asFilter();      if (filter != null) {        stmt.setFilters(filter);        qualifiers[i]=null;        break;      }    }  }  String filterFuncStr=buildFilterFunction(qualifiers);  originArgs.put("filterFuncStr",filterFuncStr);  if (metaOnly)   stmt.setAggregateFunction(this.getClass().getClassLoader(),AS_UTILITY_PATH,QUERY_MODULE,"query_meta",Value.get(originArgs)); else   stmt.setAggregateFunction(this.getClass().getClassLoader(),AS_UTILITY_PATH,QUERY_MODULE,"select_records",Value.get(originArgs));  ResultSet resultSet=null;  if (node != null) {    resultSet=this.client.queryAggregateNode(null,stmt,node);  } else {    resultSet=this.client.queryAggregate(null,stmt);  }  results=new KeyRecordIterator(stmt.getNamespace(),resultSet);  return results;}  }
class C{  @Override public void onReadyStateChanged(final boolean readyForCapture){  if (readyForCapture) {    getStateMachine().processEvent(new EventCameraReady());  } else {    getStateMachine().processEvent(new EventCameraBusy());  }}  }
class C{  public int mindim(){  if (mindim < 0) {    throw new UnsupportedOperationException("Requesting dimensionality for a request without defined dimensionality!");  }  return mindim;}  }
class C{  public static void checkState(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  public Tree<String> extractBestMaxRuleParse1(int start,int end,int state,int suboptimalities,List<String> sentence){  HyperEdge parentNode=chartAfterU[start][end][state].getKbest(suboptimalities);  if (parentNode == null) {    System.err.println("Don't have a " + (suboptimalities + 1) + "-best tree.");    return null;  }  int cState=parentNode.childState;  Tree<String> result=null;  HyperEdge childNode=chartBeforeU[start][end][cState].getKbest(parentNode.childBest);  List<Tree<String>> children=new ArrayList<Tree<String>>();  String stateStr=(String)tagNumberer.object(cState);  if (stateStr.endsWith("^g"))   stateStr=stateStr.substring(0,stateStr.length() - 2);  boolean posLevel=(end - start == 1);  if (posLevel) {    children.add(new Tree<String>(sentence.get(start)));  } else {    int split=childNode.split;    if (split == -1) {      System.err.println("Warning: no symbol can generate the span from " + start + " to "+ end+ ".");      System.err.println("The score is " + maxcScore[start][end][state] + " and the state is supposed to be "+ stateStr);      System.err.println("The insideScores are " + Arrays.toString(iScore[start][end][state]) + " and the outsideScores are "+ Arrays.toString(oScore[start][end][state]));      System.err.println("The maxcScore is " + maxcScore[start][end][state]);      return new Tree<String>("ROOT");    }    int lState=childNode.lChildState;    int rState=childNode.rChildState;    Tree<String> leftChildTree=extractBestMaxRuleParse1(start,split,lState,childNode.lChildBest,sentence);    Tree<String> rightChildTree=extractBestMaxRuleParse1(split,end,rState,childNode.rChildBest,sentence);    children.add(leftChildTree);    children.add(rightChildTree);  }  boolean scale=false;  updateConstrainedMaxCScores(sentence,scale,childNode);  result=new Tree<String>(stateStr,children);  if (cState != state) {    stateStr=(String)tagNumberer.object(state);    if (stateStr.endsWith("^g"))     stateStr=stateStr.substring(0,stateStr.length() - 2);    int intermediateNode=grammar.getUnaryIntermediate((short)state,(short)cState);    if (intermediateNode > 0) {      List<Tree<String>> restoredChild=new ArrayList<Tree<String>>();      String stateStr2=(String)tagNumberer.object(intermediateNode);      if (stateStr2.endsWith("^g"))       stateStr2=stateStr2.substring(0,stateStr2.length() - 2);      restoredChild.add(result);      result=new Tree<String>(stateStr2,restoredChild);    }    List<Tree<String>> childs=new ArrayList<Tree<String>>();    childs.add(result);    result=new Tree<String>(stateStr,childs);  }  updateConstrainedMaxCScores(sentence,scale,parentNode);  return result;}  }
class C{  @Override public boolean execute(){  sendSRCPMessage(new SRCPMessage("TERM 0 SESSION"),null);  return true;}  }
class C{  public WindowDimensions(int x,int y,int width,int height,boolean isClient){  this(new Rectangle(x,y,width,height),null,isClient);}  }
class C{  void writeIndex(String reason,IndexMetaData indexMetaData,@Nullable IndexMetaData previousIndexMetaData) throws Exception {  logger.trace("[{}] writing state, reason [{}]",indexMetaData.getIndex(),reason);  try {    indexStateFormat.write(indexMetaData,indexMetaData.getVersion(),nodeEnv.indexPaths(new Index(indexMetaData.getIndex())));  } catch (  Throwable ex) {    logger.warn("[{}]: failed to write index state",ex,indexMetaData.getIndex());    throw new IOException("failed to write state for [" + indexMetaData.getIndex() + "]",ex);  }}  }
class C{  public boolean markSupported(){  return in.markSupported();}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  MediaNode node=getMediaNode(stack);  return node == null ? null : node.getParent();}  }
class C{  @Override public void deliverResult(List<AppOpEntry> apps){  if (isReset()) {    if (apps != null) {      onReleaseResources(apps);    }  }  List<AppOpEntry> oldApps=apps;  mApps=apps;  if (isStarted()) {    super.deliverResult(apps);  }  if (oldApps != null) {    onReleaseResources(oldApps);  }}  }
class C{  public double[] attributeToDoubleArray(int index){  double[] result=new double[numInstances()];  for (int i=0; i < result.length; i++) {    result[i]=instance(i).value(index);  }  return result;}  }
class C{  public void disableAllClasses(){  if (doNotCheckCapabilities()) {    return;  }  for (  Capability cap : Capability.values()) {    if (cap.isClass()) {      disable(cap);    }  }}  }
class C{  void tick(){  m1Rate.tick();  m5Rate.tick();  m15Rate.tick();}  }
class C{  public void fixupVariables(java.util.Vector vars,int globalsSize){  super.fixupVariables(vars,globalsSize);  if (null != m_args) {    for (int i=0; i < m_args.length; i++) {      m_args[i].fixupVariables(vars,globalsSize);    }  }}  }
class C{  public void init(){}  }
class C{  public static ImportTask createImportTask(final ImportFolder selectedPath,final ImportOptions importOptions){  ImportLocalPathStrategy localPathStrategy;  ImportMapStrategy mapStrategy;  ImportGetStrategy getStrategy;  ImportOpenProjectStrategy openProjectStrategy;  if (selectedPath.hasExistingMapping()) {    localPathStrategy=new ImportLocalPathStrategy.ExistingMapping();  } else   if (selectedPath.projectMetadataFileExistsOnServer()) {    localPathStrategy=new ImportLocalPathStrategy.ExistingProjectMetadataFile();  } else {    if (importOptions.isUseNewProjectWizard()) {      localPathStrategy=new ImportLocalPathStrategy.NewProjectWizard(importOptions.getNewProjectAction());    } else {      localPathStrategy=new ImportLocalPathStrategy.FromServerPath();    }  }  if (selectedPath.hasExistingMapping()) {    mapStrategy=new ImportMapStrategy.ExistingMapping();  } else {    mapStrategy=new ImportMapStrategy.Default();  }  if (importOptions.isForceGet()) {    getStrategy=new ImportGetStrategy.ForceFullRecursive();  } else   if (selectedPath.hasExistingMapping() && selectedPath.projectMetadataFileExistsOnServer() && selectedPath.projectMetadataFileExistsLocally()) {    getStrategy=new ImportGetStrategy.Null();  } else   if (selectedPath.projectMetadataFileShouldExistLocally()) {    getStrategy=new ImportGetStrategy.ForceFullRecursive();  } else {    getStrategy=new ImportGetStrategy.FullRecursive();  }  if (selectedPath.hasExistingMapping()) {    if (selectedPath.eclipseProjectAlreadyOpen(importOptions.getEclipseWorkspace())) {      openProjectStrategy=new ImportOpenProjectStrategy.AlreadyOpen();    } else     if (!selectedPath.projectMetadataFileExistsLocally() && !selectedPath.projectMetadataFileExistsOnServer()) {      openProjectStrategy=new ImportOpenProjectStrategy.NewSimpleProject();    } else {      openProjectStrategy=new ImportOpenProjectStrategy.ExistingProjectMetadataFile();    }  } else {    if (selectedPath.projectMetadataFileExistsOnServer()) {      openProjectStrategy=new ImportOpenProjectStrategy.ExistingProjectMetadataFile();    } else     if (importOptions.isUseNewProjectWizard()) {      openProjectStrategy=new ImportOpenProjectStrategy.AlreadyOpen();    } else {      openProjectStrategy=new ImportOpenProjectStrategy.NewSimpleProject();    }  }  return new ImportTask(selectedPath,importOptions,localPathStrategy,mapStrategy,getStrategy,openProjectStrategy);}  }
class C{  protected void addInstanceToTree(Instance inst,KDTreeNode node) throws Exception {  if (node.isALeaf()) {    int instList[]=new int[m_Instances.numInstances()];    try {      System.arraycopy(m_InstList,0,instList,0,node.m_End + 1);      if (node.m_End < m_InstList.length - 1)       System.arraycopy(m_InstList,node.m_End + 1,instList,node.m_End + 2,m_InstList.length - node.m_End - 1);      instList[node.m_End + 1]=m_Instances.numInstances() - 1;    } catch (    ArrayIndexOutOfBoundsException ex) {      System.err.println("m_InstList.length: " + m_InstList.length + " instList.length: "+ instList.length+ "node.m_End+1: "+ (node.m_End + 1)+ "m_InstList.length-node.m_End+1: "+ (m_InstList.length - node.m_End - 1));      throw ex;    }    m_InstList=instList;    node.m_End++;    node.m_NodeRanges=m_EuclideanDistance.updateRanges(inst,node.m_NodeRanges);    m_Splitter.setInstanceList(m_InstList);    double[][] universe=m_EuclideanDistance.getRanges();    if (node.numInstances() > m_MaxInstInLeaf && getMaxRelativeNodeWidth(node.m_NodeRanges,universe) > m_MinBoxRelWidth) {      m_Splitter.splitNode(node,m_NumNodes,node.m_NodeRanges,universe);      m_NumNodes+=2;    }  } else {    if (m_EuclideanDistance.valueIsSmallerEqual(inst,node.m_SplitDim,node.m_SplitValue)) {      addInstanceToTree(inst,node.m_Left);      afterAddInstance(node.m_Right);    } else     addInstanceToTree(inst,node.m_Right);    node.m_End++;    node.m_NodeRanges=m_EuclideanDistance.updateRanges(inst,node.m_NodeRanges);  }}  }
class C{  public T addSort(SortBuilder sort){  sourceBuilder().sort(sort);  return (T)this;}  }
class C{  public static void removeListNode(PsiElement item){  PsiElement parent=item.getParent();  if (!FileModificationService.getInstance().preparePsiElementForWrite(parent)) {    return;  }  ASTNode binder=parent.getNode();  assert binder != null : "parent node is null, ensureWritable() lied";  boolean got_comma_after=eraseWhitespaceAndComma(binder,item,false);  if (!got_comma_after) {    eraseWhitespaceAndComma(binder,item,true);  }  item.delete();}  }
class C{  public <D>D oneToMany(Class<D> destinationClass,final T source,final NullPointerControl nullPointerControl,final MappingType mtSource){  try {    return this.<D,T>getJMapper(relationalOneToManyMapper,destinationClass).getDestination(source,nullPointerControl,mtSource);  } catch (  Exception e) {    return (D)this.destinationClassControl(e,destinationClass);  }}  }
class C{  @Override public final float decodeNormValue(long norm){  return NORM_TABLE[(int)(norm & 0xFF)];}  }
class C{  public Builder withMembers(Collection<Address> members){  response.members=Assert.notNull(members,"members");  return this;}  }
class C{  protected void checkForCharsetMismatch(){  if (this.connection.getUseUnicode() && (this.connection.getEncoding() != null)) {    String encodingToCheck=jvmPlatformCharset;    if (encodingToCheck == null) {      encodingToCheck=System.getProperty("file.encoding");    }    if (encodingToCheck == null) {      this.platformDbCharsetMatches=false;    } else {      this.platformDbCharsetMatches=encodingToCheck.equals(this.connection.getEncoding());    }  }}  }
class C{  private static boolean endsWith(final String str,final String suffix,final boolean ignoreCase){  if (str == null || suffix == null) {    return str == null && suffix == null;  }  if (suffix.length() > str.length()) {    return false;  }  int strOffset=str.length() - suffix.length();  return str.regionMatches(ignoreCase,strOffset,suffix,0,suffix.length());}  }
class C{  public Interpreter createInterpreter(URL documentURL,boolean svg12){  if (svg12) {    return new SVG12RhinoInterpreter(documentURL);  }  return new RhinoInterpreter(documentURL);}  }
class C{  public ConstraintToken_ createConstraintToken_(){  ConstraintToken_Impl constraintToken_=new ConstraintToken_Impl();  return constraintToken_;}  }
class C{  @Override protected void buildRepresentation(Ring entity){  final SpriteStore store=SpriteStore.get();  Sprite tiles;  if (isContained()) {    tiles=store.getSprite(translate(getClassResourcePath()));  } else {    ZoneInfo info=ZoneInfo.get();    tiles=store.getModifiedSprite(translate(getClassResourcePath()),info.getZoneColor(),info.getColorMethod());  }  working=store.getTile(tiles,0,0,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS);  broken=store.getTile(tiles,0,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS,IGameScreen.SIZE_UNIT_PIXELS);  setSprite(getStateSprite());  stateChanged=false;}  }
class C{  private Object toDate(Class type,long value){  if (type.equals(Date.class)) {    return new Date(value);  }  if (type.equals(java.sql.Date.class)) {    return new java.sql.Date(value);  }  if (type.equals(java.sql.Time.class)) {    return new java.sql.Time(value);  }  if (type.equals(java.sql.Timestamp.class)) {    return new java.sql.Timestamp(value);  }  if (type.equals(Calendar.class)) {    Calendar calendar=null;    if (locale == null && timeZone == null) {      calendar=Calendar.getInstance();    } else     if (locale == null) {      calendar=Calendar.getInstance(timeZone);    } else     if (timeZone == null) {      calendar=Calendar.getInstance(locale);    } else {      calendar=Calendar.getInstance(timeZone,locale);    }    calendar.setTime(new Date(value));    calendar.setLenient(false);    return calendar;  }  String msg=toString(getClass()) + " cannot handle conversion to '" + toString(type)+ "'";  throw new ConversionException(msg);}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  double[] oldKeys=_set;  V[] oldVals=_values;  _set=new double[newCapacity];  _values=(V[])new Object[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (isFull(oldVals,i)) {      double o=oldKeys[i];      int index=insertionIndex(o);      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  @Override public E putIfAbsent(Integer key,E value){  return put(key.intValue(),value);}  }
class C{  public StatusInfo(){  this(OK,null);}  }
class C{  public boolean drawImage(Image img,int dx1,int dy1,int dx2,int dy2,int sx1,int sy1,int sx2,int sy2,Color bgcolor,ImageObserver observer){  if (img == null) {    return true;  }  int width=dx2 - dx1;  int height=dy2 - dy1;  addDrawingRect(dx1,dy1,width,height);  mPrintMetrics.drawImage(this,img);  return mGraphics.drawImage(img,dx1,dy1,dx2,dy2,sx1,sy1,sx2,sy2,bgcolor,observer);}  }
class C{  public void updateQueryResults(final TransactionBase tx,final VisibilityBindingSet childBindingSet,final QueryMetadata queryMetadata){  checkNotNull(tx);  checkNotNull(childBindingSet);  checkNotNull(queryMetadata);  final VariableOrder queryVarOrder=queryMetadata.getVariableOrder();  final MapBindingSet queryBindingSet=new MapBindingSet();  for (  final String bindingName : queryVarOrder) {    if (childBindingSet.hasBinding(bindingName)) {      final Binding binding=childBindingSet.getBinding(bindingName);      queryBindingSet.addBinding(binding);    }  }  final String queryBindingSetString=converter.convert(queryBindingSet,queryVarOrder);  final String queryBindingSetValueString=valueConverter.convert(new VisibilityBindingSet(queryBindingSet,childBindingSet.getVisibility()),queryVarOrder);  final String row=queryMetadata.getNodeId() + NODEID_BS_DELIM + queryBindingSetString;  final Column col=FluoQueryColumns.QUERY_BINDING_SET;  final String value=queryBindingSetValueString;  tx.set(row,col,value);}  }
class C{  void generateLeafNodeBases(){  for (  TreeRTGQuercusRobur.FoliageCoordinates worldgenbigtree$foliagecoordinates : this.field_175948_j) {    int i=worldgenbigtree$foliagecoordinates.func_177999_q();    BlockPos blockpos=new BlockPos(this.basePos.getX(),i,this.basePos.getZ());    if (!blockpos.equals(worldgenbigtree$foliagecoordinates) && this.leafNodeNeedsBase(i - this.basePos.getY())) {      this.func_175937_a(blockpos,worldgenbigtree$foliagecoordinates,this.logBlock);    }  }}  }
class C{  public NameConstraints(GeneralSubtrees permittedSubtrees,GeneralSubtrees excludedSubtrees){  if (permittedSubtrees != null) {    List<GeneralSubtree> ps=permittedSubtrees.getSubtrees();    if (ps == null || ps.isEmpty()) {      throw new IllegalArgumentException("permittedSubtrees are empty");    }  }  if (excludedSubtrees != null) {    List<GeneralSubtree> es=excludedSubtrees.getSubtrees();    if (es == null || es.isEmpty()) {      throw new IllegalArgumentException("excludedSubtrees are empty");    }  }  this.permittedSubtrees=permittedSubtrees;  this.excludedSubtrees=excludedSubtrees;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public <T>void add(int what,Request<T> request,OnResponseListener<T> responseListener){  if (request.inQueue())   Logger.w("This request has been in the queue"); else {    request.setQueue(mUnFinishQueue);    request.onPreResponse(what,responseListener);    request.setSequence(mInteger.incrementAndGet());    mUnFinishQueue.add(request);    mRequestQueue.add(request);  }}  }
class C{  public static Vector3f sphericalToCartesianZ(Vector3f sphereCoords,Vector3f store){  store.z=sphereCoords.x * FastMath.sin(sphereCoords.z);  float a=sphereCoords.x * FastMath.cos(sphereCoords.z);  store.x=a * FastMath.cos(sphereCoords.y);  store.y=a * FastMath.sin(sphereCoords.y);  return store;}  }
class C{  public void stop(){  m_Stop=getCurrentTime();  m_Running=false;}  }
class C{  private void handleMobileCellScroll(){  mIsMobileScrolling=handleMobileCellScroll(mHoverCellCurrentBounds);}  }
class C{  @Override public String encode(){  return value == intValue() ? Integer.toString(intValue()) + unit.encode() : Double.toString(value) + unit.encode();}  }
class C{  private void unSelectAll(){  setValue(null);}  }
class C{  public boolean isLimitEnabled(){  return joint.isLimitEnabled();}  }
class C{  private String createDigest(final String uname,final String pwd) throws AuthenticationException {  LOG.trace("enter DigestScheme.createDigest(String, String, Map)");  final String digAlg="MD5";  final String uri=getParameter("uri");  final String realm=getParameter("realm");  final String nonce=getParameter("nonce");  final String qop=getParameter("qop");  final String method=getParameter("methodname");  String algorithm=getParameter("algorithm");  if (algorithm == null) {    algorithm="MD5";  }  String charset=getParameter("charset");  if (charset == null) {    charset="ISO-8859-1";  }  if (qopVariant == QOP_AUTH_INT) {    LOG.warn("qop=auth-int is not supported");    throw new AuthenticationException("Unsupported qop in HTTP Digest authentication");  }  MessageDigest md5Helper;  try {    md5Helper=MessageDigest.getInstance(digAlg);  } catch (  final Exception e) {    throw new AuthenticationException("Unsupported algorithm in HTTP Digest authentication: " + digAlg);  }  final StringBuffer tmp=new StringBuffer(uname.length() + realm.length() + pwd.length()+ 2);  tmp.append(uname);  tmp.append(':');  tmp.append(realm);  tmp.append(':');  tmp.append(pwd);  String a1=tmp.toString();  if (algorithm.equals("MD5-sess")) {    final String tmp2=encode(md5Helper.digest(EncodingUtil.getBytes(a1,charset)));    final StringBuffer tmp3=new StringBuffer(tmp2.length() + nonce.length() + cnonce.length()+ 2);    tmp3.append(tmp2);    tmp3.append(':');    tmp3.append(nonce);    tmp3.append(':');    tmp3.append(cnonce);    a1=tmp3.toString();  } else   if (!algorithm.equals("MD5")) {    LOG.warn("Unhandled algorithm " + algorithm + " requested");  }  final String md5a1=encode(md5Helper.digest(EncodingUtil.getBytes(a1,charset)));  String a2=null;  if (qopVariant == QOP_AUTH_INT) {    LOG.error("Unhandled qop auth-int");  } else {    a2=method + ":" + uri;  }  final String md5a2=encode(md5Helper.digest(EncodingUtil.getAsciiBytes(a2)));  String serverDigestValue;  if (qopVariant == QOP_MISSING) {    LOG.debug("Using null qop method");    final StringBuffer tmp2=new StringBuffer(md5a1.length() + nonce.length() + md5a2.length());    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  } else {    if (LOG.isDebugEnabled()) {      LOG.debug("Using qop method " + qop);    }    final String qopOption=getQopVariantString();    final StringBuffer tmp2=new StringBuffer(md5a1.length() + nonce.length() + NC.length()+ cnonce.length()+ qopOption.length()+ md5a2.length()+ 5);    tmp2.append(md5a1);    tmp2.append(':');    tmp2.append(nonce);    tmp2.append(':');    tmp2.append(NC);    tmp2.append(':');    tmp2.append(cnonce);    tmp2.append(':');    tmp2.append(qopOption);    tmp2.append(':');    tmp2.append(md5a2);    serverDigestValue=tmp2.toString();  }  final String serverDigest=encode(md5Helper.digest(EncodingUtil.getAsciiBytes(serverDigestValue)));  return serverDigest;}  }
class C{  private RTLExpression applyTemplates(RTLExpression e){  Map<RTLVariable,RTLExpression> bindings=new HashMap<RTLVariable,RTLExpression>();  for (int i=0; i < patterns.length; i++) {    if (match(e,patterns[i],bindings)) {      Context context=new Context();      for (      Map.Entry<RTLVariable,RTLExpression> binding : bindings.entrySet())       context.substitute(binding.getKey(),binding.getValue());      RTLExpression result=results[i].evaluate(context);      e=result;    }    bindings.clear();  }  return e;}  }
class C{  private final boolean matchesText(final String text){  boolean ret=false;  QueryGoal.NormalizedWords words=new QueryGoal.NormalizedWords(Tokenizer.getWords(text,null).keySet());  if (!SetTools.anymatchByTest(this.queryGoal.getExcludeWords(),words)) {    ret=SetTools.totalInclusion(this.queryGoal.getIncludeWords(),words);  }  return ret;}  }
class C{  protected final V wrapValue(V o){  return o;}  }
class C{  public void updateGroupCloneInfo(VolumeConsistencyGroup consistencyGroup,List<VolumeClone> clones){  String cloneTimestamp=Long.toString(System.currentTimeMillis());  for (  VolumeClone clone : clones) {    clone.setNativeId("clone-" + clone.getParentId() + clone.getDisplayName());    clone.setWwn(String.format("%s%s",clone.getStorageSystemId(),clone.getNativeId()));    clone.setReplicationState(VolumeClone.ReplicationState.SYNCHRONIZED);    clone.setProvisionedCapacity(clone.getRequestedCapacity());    clone.setAllocatedCapacity(clone.getRequestedCapacity());    clone.setDeviceLabel(clone.getNativeId());    clone.setConsistencyGroup(consistencyGroup.getNativeId() + "_clone-" + cloneTimestamp);  }}  }
class C{  public boolean isHandshakeComplete(){  return this.state.isHandshakeComplete();}  }
class C{  public void initialize(Language language,String hunpos_path,String hunpos_model_path,Boolean annotateTokens,Boolean annotateSentences,Boolean annotatePOS){  this.initialize(new HunPosTaggerContext(language,hunpos_path,hunpos_model_path,annotateTokens,annotateSentences,annotatePOS));}  }
class C{  private static void localListen(IgniteMessaging imsg,final CountDownLatch orderedLatch,final CountDownLatch unorderedLatch){  imsg.localListen(TOPIC.ORDERED,null);  imsg.localListen(TOPIC.UNORDERED,null);}  }
class C{  public void processShape(ShapeIterator si){  while (!si.isDone()) {    double[] coords=new double[6];    short code=si.currentSegment(coords);switch (code) {case ShapeIterator.MOVE_TO:      correctRoundingErrors();    move(coords[0],coords[1]);  closed=false;break;case ShapeIterator.LINE_TO:straight(coords[0],coords[1]);break;case ShapeIterator.QUAD_TO:curved(coords[0],coords[1],coords[2],coords[3]);break;case ShapeIterator.CUBIC_TO:approximateCubicBezier(new Point(pen.x,pen.y),new Point(coords[0],coords[1]),new Point(coords[2],coords[3]),new Point(coords[4],coords[5]));break;case ShapeIterator.CLOSE:closed=true;close();break;}si.next();}correctRoundingErrors();}  }
class C{  public FontStyle(String name,int id){  m_name=name;  m_id=id;}  }
class C{  public static String unhtmlentities(final String str){  if (str == null) {    return null;  }  if (htmlentities_map.isEmpty()) {    initializeEntitiesTables();  }  final StringBuilder buf=new StringBuilder();  for (int i=0; i < str.length(); ++i) {    final char ch=str.charAt(i);    if (ch == '&') {      final int semi=str.indexOf(';',i + 1);      if (semi == -1 || semi - i > 7) {        buf.append(ch);        continue;      }      final String entity=str.substring(i,semi + 1);      Integer iso;      if (entity.charAt(1) == ' ') {        buf.append(ch);        continue;      }      if (entity.charAt(1) == '#') {        if (entity.charAt(2) == 'x') {          iso=new Integer(Integer.parseInt(entity.substring(3,entity.length() - 1),16));        } else {          iso=new Integer(entity.substring(2,entity.length() - 1));        }      } else {        iso=unhtmlentities_map.get(entity);      }      if (iso == null) {        buf.append(entity);      } else {        buf.append((char)iso.intValue());      }      i=semi;    } else {      buf.append(ch);    }  }  return buf.toString();}  }
class C{  public static String createTSXMLWithOpsAndOpParams(String id) throws Exception {  String baseUrl=WebserviceTestBase.getConfigSetting(WebserviceTestBase.EXAMPLE_BASE_URL);  String xml="<" + TNS + "TechnicalServices "+ TARGET_NAMESPACE+ "><"+ TNS+ "TechnicalService id=\""+ id+ "\" build=\"1\" provisioningType=\"SYNCHRONOUS\""+ " provisioningUrl=\""+ baseUrl+ "/"+ MOCK+ "/ProvisioningService?wsdl\""+ " provisioningVersion=\"1.0\" accessType=\"DIRECT\""+ " baseUrl=\""+ baseUrl+ "/oscm-integrationtests-mockproduct\""+ " loginPath=\"/login\" provisioningTimeout=\"50000\""+ " provisioningUsername=\"admin\" provisioningPassword=\"adminadmin\">"+ " <AccessInfo locale=\"en\">AccessInfo</AccessInfo>"+ " <LocalizedDescription locale=\"en\">LocalizedDescription</LocalizedDescription>"+ " <LocalizedLicense locale=\"en\">LocalizedLicense</LocalizedLicense>"+ "<Operation id=\"SNAPSHOT\" actionURL=\""+ baseUrl+ "/"+ MOCK+ "/OperationService?wsdl\">"+ "<LocalizedName locale=\"en\">Help</LocalizedName>"+ "<LocalizedDescription locale=\"en\">Help activation.</LocalizedDescription>"+ "<OperationParameter id=\"SERVER\" mandatory=\"true\" type=\"REQUEST_SELECT\">"+ "<LocalizedName locale=\"en\">Server</LocalizedName>"+ "</OperationParameter>"+ "<OperationParameter id=\"COMMENT\" mandatory=\"false\" type=\"INPUT_STRING\">"+ "<LocalizedName locale=\"en\">Comment</LocalizedName>"+ "</OperationParameter></Operation>"+ XML_LAST_PART;  return xml;}  }
class C{  private void updateCenterPanel(){  long now=System.currentTimeMillis();  if (_nextUpdateTime > now)   return;  _nextUpdateTime=now + 1000 * 5;  _centerPanel.removeAll();  _centerComponent=new JLabel();  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=0;  gbc.gridy=0;  gbc.weightx=0;  gbc.fill=GridBagConstraints.NONE;  gbc.anchor=GridBagConstraints.CENTER;  _centerPanel.add(_centerComponent,gbc);  refresh();}  }
class C{  public int sizeOf(){  return MatDataTypes.sizeOf(type);}  }
class C{  public void addStartElement(String tag) throws IOException {  if (!charsAddedBetweenTags_) {    writer_.write("\r\n");  }  charsAddedBetweenTags_=false;  writer_.write("<" + tag + ">");  tagStack_.push(tag);}  }
class C{  public T casePrimaryExpression(PrimaryExpression object){  return null;}  }
class C{  public static Attribute changeValueType(Attribute attribute,int valueType){  Attribute result=createAttribute(attribute.getName(),valueType);  if (attribute.isNominal() && result.isNominal()) {    result.setMapping(attribute.getMapping());  }  result.setTableIndex(attribute.getTableIndex());  return result;}  }
class C{  public static void main(String[] args){  java.util.Random randomNumber=new java.util.Random(1000);  for (int i=1; i <= 50; i++) {    if (i % 10 == 0)     System.out.printf("%5d\n",randomNumber.nextInt(1000)); else     System.out.printf("%5d",randomNumber.nextInt(1000));  }}  }
class C{  public IXMLElement createElement(String fullName,String namespace,String systemID,int lineNr){  return new XMLElement(fullName,namespace,systemID,lineNr);}  }
class C{  public Distribution(Distribution toMerge,int index){  int i;  totaL=toMerge.totaL;  m_perClass=new double[toMerge.numClasses()];  System.arraycopy(toMerge.m_perClass,0,m_perClass,0,toMerge.numClasses());  m_perClassPerBag=new double[2][0];  m_perClassPerBag[0]=new double[toMerge.numClasses()];  System.arraycopy(toMerge.m_perClassPerBag[index],0,m_perClassPerBag[0],0,toMerge.numClasses());  m_perClassPerBag[1]=new double[toMerge.numClasses()];  for (i=0; i < toMerge.numClasses(); i++) {    m_perClassPerBag[1][i]=toMerge.m_perClass[i] - m_perClassPerBag[0][i];  }  m_perBag=new double[2];  m_perBag[0]=toMerge.m_perBag[index];  m_perBag[1]=totaL - m_perBag[0];}  }
class C{  private static void writePacket(PcapByteInputStream is,PcapByteOutputStream os) throws IOException {  PcapPacket packet=null;  try {    while (true) {      packet=is.getPacket();      if (packet == null) {        break;      }      os.write(packet);    }  } catch (  EOFException e) {  }}  }
class C{  @Field(3) public short iVal(){  return this.io.getShortField(this,3);}  }
class C{  @Override public void release(){  this.name=null;  this.value=null;}  }
class C{  NioDatagramSessionConfig(DatagramChannel channel){  this.channel=channel;}  }
class C{  public void constValueIndex(boolean value) throws IOException {  constValueIndex('Z',pool.addIntegerInfo(value ? 1 : 0));}  }
class C{  void run(String[] args){  try {    parseArgs(args);    boolean first=true;    for (    String fileName : mInputFileNames) {      RandomAccessFile raf=openInputFile(fileName);      DexData dexData=new DexData(raf);      dexData.load();      if (first) {        first=false;        Output.generateFirstHeader(fileName,mOutputFormat);      } else {        Output.generateHeader(fileName,mOutputFormat);      }      Output.generate(dexData,mOutputFormat,mJustClasses);      Output.generateFooter(mOutputFormat);      raf.close();    }  } catch (  UsageException ue) {    usage();    System.exit(2);  }catch (  IOException ioe) {    if (ioe.getMessage() != null) {      System.err.println("Failed: " + ioe);    }    System.exit(1);  }catch (  DexDataException dde) {    System.exit(1);  }}  }
class C{  @Override public Void next(){  Map<String,Object> value=new HashMap<>();  Tuple2 lastKey=null;  while (true) {    KeyValue kv;    if (pending != null) {      kv=pending;      pending=null;    } else {      try {        if (underlying.hasNext()) {          kv=underlying.next();        } else {          break;        }      } catch (      RuntimeException e) {        throw FDBAdapter.wrapFDBException(storeData.session,e);      }    }    Tuple2 key=Tuple2.fromBytes(kv.getKey());    String name=key.getString(key.size() - 1);    key=key.popBack();    if (lastKey == null) {      lastKey=key;    } else     if (!key.equals(lastKey)) {      pending=kv;      break;    }    value.put(name,Tuple2.fromBytes(kv.getValue()).get(0));  }  storeData.rawKey=lastKey.pack();  storeData.otherValue=value;  count++;  return null;}  }
class C{  protected void paintOriginPoint(Point2D originPnt,Graphics graphics,MapBean theMap){  if (theMap != null && originPnt != null) {    OMPoint pt=new OMPoint(originPnt.getY(),originPnt.getX());    preparePoint(pt);    pt.generate(theMap.getRotatedProjection());    pt.render(graphics);  }}  }
class C{  public void testIsParityAdjusted(){  try {    DESKeySpec.isParityAdjusted(null,1);    fail("Should raise an InvalidKeyException " + "in case of null byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  byte[] key={1,2,3,4,5,6,7,8};  try {    DESKeySpec.isParityAdjusted(key,1);    fail("Should raise an InvalidKeyException " + "in case of short byte array.");  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {  }  byte[] key_not_pa={1,2,3,4,5,6,7,8};  try {    assertFalse("Method returns true when false is expected.",DESKeySpec.isParityAdjusted(key_not_pa,0));  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {    fail("Unexpected InvalidKeyException was thrown.");  }  byte[] key_pa={(byte)128,(byte)131,(byte)133,(byte)134,(byte)137,(byte)138,(byte)140,(byte)143};  try {    assertTrue("Method returns false when true is expected.",DESKeySpec.isParityAdjusted(key_pa,0));  } catch (  NullPointerException e) {    fail("Unexpected NullPointerException was thrown.");  }catch (  InvalidKeyException e) {    fail("Unexpected InvalidKeyException was thrown.");  }}  }
class C{  public void dumpXml(PrintStream out){  out.println("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");  out.println("<history>");  String startData="    <data ";  String stop="/>";  for (int i=0; i < versionList.length; ++i) {    Version version=versionList[i];    AppVersion appVersion=sequenceToAppVersionMap.get(version.getSequence());    out.print("  <historyItem ");    out.print("seq=\"");    out.print(i);    out.print("\" ");    out.print("version=\"");    out.print(appVersion != null ? appVersion.getReleaseName() : "");    out.print("\" ");    out.print("time=\"");    if (formatDates) {      out.print((appVersion != null ? new Date(appVersion.getTimestamp()).toString() : ""));    } else {      out.print(appVersion != null ? appVersion.getTimestamp() : 0L);    }    out.print("\"");    out.println(">");    String attributeName[]=new String[TUPLE_SIZE];    attributeName[0]="added";    attributeName[1]="newCode";    attributeName[2]="fixed";    attributeName[3]="removed";    attributeName[4]="retained";    attributeName[5]="dead";    attributeName[6]="active";    for (int j=0; j < TUPLE_SIZE; ++j) {      if (j == 1 || j == 4) {        continue;      }      out.print(startData + " name=\"" + attributeName[j]+ "\" value=\"");      out.print(version.get(j));      out.print("\"");      out.println(stop);    }    out.println("  </historyItem>");  }  out.print("</history>");}  }
class C{  public SpinnerNumberModel(){  this(Integer.valueOf(0),null,null,Integer.valueOf(1));}  }
class C{  public PostgresFullPrunedBlockStore(NetworkParameters params,int fullStoreDepth,String hostname,String dbName,String username,String password,@Nullable String schemaName) throws BlockStoreException {  super(params,DATABASE_CONNECTION_URL_PREFIX + hostname + "/"+ dbName,fullStoreDepth,username,password,schemaName);}  }
class C{  private void probeProviderConnectivity(String tenantName,String providerUri,AuthenticationType authType,String userName,String pwd,LdapCertificateValidationSettings certValidationSettings) throws Exception {  URI uri=null;  try {    ValidateUtil.validateNotEmpty(tenantName,"tenantName");    ValidateUtil.validateNotEmpty(providerUri,"providerUri");    try {      uri=new URI(providerUri);    } catch (    URISyntaxException e) {      throw new IllegalArgumentException(e.getMessage());    }    if ((!uri.getScheme().toLowerCase().equals("ldap")) && (!uri.getScheme().toLowerCase().equals("ldaps"))) {      throw new IllegalArgumentException(String.format("Unsupported providerUri='%s'.",providerUri));    }    if (AuthenticationType.PASSWORD != authType) {      throw new IllegalArgumentException(String.format("AuthenticationType='%s' is not supported.",authType.toString()));    }    ServerUtils.validateNotEmptyUsername(userName);    ValidateUtil.validateNotNull(pwd,"pwd");  } catch (  Exception ex) {    logger.error(ex.getMessage());    throw ex;  }  try {    Collection<URI> uris=Collections.unmodifiableList(Arrays.asList(new URI(providerUri)));    try (ILdapConnectionEx connection=ServerUtils.getLdapConnectionByURIs(uris,userName,pwd,AuthenticationType.PASSWORD,false,certValidationSettings)){    }     return;  } catch (  Exception ex) {    String msg=String.format("Failed to probe provider connectivity [URI: %s]; tenantName [%s], userName [%s]",providerUri,tenantName,userName);    logger.warn(msg);    throw new IDMLoginException(msg,uri,ex);  }}  }
class C{  public Key min(){  if (isEmpty())   throw new NoSuchElementException("called min() with empty symbol table");  return st.firstKey();}  }
class C{  protected boolean hasInstructions(int index){  return ((getFlag(index) & WE_HAVE_INSTRUCTIONS) != 0);}  }
class C{  public GapTextStore(int minSize,int maxSize,float maxGapFactor){  Assert.isLegal(0f <= maxGapFactor && maxGapFactor <= 1f);  Assert.isLegal(0 <= minSize && minSize <= maxSize);  fMinGapSize=minSize;  fMaxGapSize=maxSize;  fSizeMultiplier=1 / (1 - maxGapFactor / 2);}  }
class C{  public static String buildPath(String... directories){  String dir=Config.baseDir;  for (  String temp : directories) {    dir=dir + "/" + temp;    if (!(new File(dir).exists())) {      new File(dir).mkdir();    }  }  return dir;}  }
class C{  @HLEFunction(nid=0xC572A9C8,version=150) public int sceUsbDeactivate(int pid){  usbActivated=false;  return 0;}  }
class C{  public SQLFeatureNotSupportedException(String reason,String SQLState,Throwable cause){  super(reason,SQLState,cause);}  }
class C{  public void upsertDocument(String docId,@Nonnull Object document){  if (docId != null && dbConnector.contains(docId)) {    dbConnector.update(document);  } else {    dbConnector.create(document);  }}  }
class C{  public void afterCompletion(HttpServletRequest request,HttpServletResponse response,Object handler,Exception ex){  if (request.getSession(false) != null) {    request.getSession().removeAttribute(this.sessionAttributeName);  }  Object requestAttribute=request.getAttribute(this.attributeName);  if (requestAttribute instanceof MultiScopeModelMap) {    MultiScopeModelMap attributes=(MultiScopeModelMap)requestAttribute;    if (!attributes.isEmpty()) {      attributes.next();      if (!attributes.isEmpty()) {        request.getSession(true).setAttribute(this.sessionAttributeName,attributes);      }    }  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  HealthBar(int width,int height){  this.width=width;  this.height=height;  model=new LinearScalingModel(1.0,width - 2);  model.addChangeListener(this);}  }
class C{  private String singular(String word){  if (requireNonNull(word).endsWith("ies")) {    return word.substring(0,word.length() - 3) + Y;  } else   if (word.endsWith("s")) {    return word.substring(0,word.length() - 1);  } else {    return word;  }}  }
class C{  public void changeRoot(NodeRef node,double height){  FlexibleNode node1=(FlexibleNode)node;  FlexibleNode parent=node1.getParent();  double l1=height - getNodeHeight(node);  if (l1 < 0.0) {    throw new IllegalArgumentException("New root height less than the node's height");  }  double l2=getNodeHeight(parent) - height;  if (l2 < 0.0) {    throw new IllegalArgumentException("New root height above the node's parent's height");  }  changeRoot(node,l1,l2);}  }
class C{  public void forceShow(){  FragmentManager manager=mActivity.getSupportFragmentManager();  new RatePromptDialog().show(manager,"id.ridsatrio.filtrate.ratingprompt");}  }
class C{  private String resolveUnshiftedOperatorMacros(String command,Operator operator){  if (Operator.STRING_EXPANSION_MACRO_OPERATORNAME.equals(command) || Operator.STRING_EXPANSION_MACRO_OPERATORNAME_USER_FRIENDLY.equals(command)) {    return operator.getName();  } else   if (Operator.STRING_EXPANSION_MACRO_OPERATORCLASS.equals(command)) {    return operator.getClass().getName();  } else   if (Operator.STRING_EXPANSION_MACRO_NUMBER_APPLIED_TIMES.equals(command) || Operator.STRING_EXPANSION_MACRO_NUMBER_APPLIED_TIMES_USER_FRIENDLY.equals(command)) {    return operator.getApplyCount() + "";  } else   if (Operator.STRING_EXPANSION_MACRO_NUMBER_APPLIED_TIMES_PLUS_ONE.equals(command)) {    return operator.getApplyCount() + 1 + "";  } else {    return null;  }}  }
class C{  @RequestMapping(value="/emrPigSteps",method=RequestMethod.POST,consumes={"application/xml","application/json"}) @Secured(SecurityFunctions.FN_EMR_PIG_STEPS_POST) public EmrPigStep addPigStepToEmrCluster(@RequestBody EmrPigStepAddRequest request) throws Exception {  return (EmrPigStep)emrService.addStepToCluster(request);}  }
class C{  public static Element svgWaitIcon(Document document,double x,double y,double w,double h){  Element g=SVGUtil.svgElement(document,SVGConstants.SVG_G_TAG);  setAtt(g,SVGConstants.SVG_TRANSFORM_ATTRIBUTE,"translate(" + x + " "+ y+ ") scale("+ w+ " "+ h+ ")");  Element thro=SVGUtil.svgElement(document,SVGConstants.SVG_PATH_TAG);  setAtt(thro,SVGConstants.SVG_D_ATTRIBUTE,THROBBER_PATH);  setStyle(thro,THROBBER_STYLE);  Element anim=SVGUtil.svgElement(document,SVGConstants.SVG_ANIMATE_TRANSFORM_TAG);  setAtt(anim,SVGConstants.SVG_ATTRIBUTE_NAME_ATTRIBUTE,SVGConstants.SVG_TRANSFORM_ATTRIBUTE);  setAtt(anim,SVGConstants.SVG_ATTRIBUTE_TYPE_ATTRIBUTE,"XML");  setAtt(anim,SVGConstants.SVG_TYPE_ATTRIBUTE,SVGConstants.SVG_ROTATE_ATTRIBUTE);  setAtt(anim,SVGConstants.SVG_FROM_ATTRIBUTE,"0 .5 .5");  setAtt(anim,SVGConstants.SVG_TO_ATTRIBUTE,"360 .5 .5");  setAtt(anim,SVGConstants.SVG_BEGIN_ATTRIBUTE,fmt(Math.random() * 2) + "s");  setAtt(anim,SVGConstants.SVG_DUR_ATTRIBUTE,"2s");  setAtt(anim,SVGConstants.SVG_REPEAT_COUNT_ATTRIBUTE,"indefinite");  setAtt(anim,SVGConstants.SVG_FILL_ATTRIBUTE,"freeze");  thro.appendChild(anim);  g.appendChild(thro);  return g;}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.153 -0500",hash_original_method="E8E6CFFD56A04D652E5CCA11D468DE7D",hash_generated_method="479C8E951B583B43B17A63B224C3E23F") public static void sort(long[] array){  DualPivotQuicksort.sort(array);}  }
class C{  public static String clearLineBreaks(String originalText){  if (null == originalText) {    return originalText;  }  boolean lastCharWhitespace=false;  StringBuilder stringBuilder=new StringBuilder(originalText.length());  for (int i=0; i < originalText.length(); i++) {    char c=originalText.charAt(i);    if ((c == '\r') || (c == '\n')) {      if (!lastCharWhitespace) {        stringBuilder.append(' ');        lastCharWhitespace=true;      }    } else     if (Character.isWhitespace(c)) {      if (!lastCharWhitespace) {        stringBuilder.append(' ');        lastCharWhitespace=true;      }    } else {      stringBuilder.append(c);      lastCharWhitespace=false;    }  }  return stringBuilder.toString();}  }
class C{  public static byte[] base64decode(String coded){  if (null == coded)   return null;  byte[] src=coded.getBytes();  int len=src.length;  int dlen=len - (len / 77);  dlen=(dlen >>> 2) + (dlen >>> 1);  int rem=0;  if (61 == src[len - 1])   rem++;  if (61 == src[len - 2])   rem++;  dlen-=rem;  byte[] dst=new byte[dlen];  int pos=0;  int dpos=0;  int col=0;  len-=4;  while (pos < len) {    byte b0=_base64de[src[pos++]];    byte b1=_base64de[src[pos++]];    byte b2=_base64de[src[pos++]];    byte b3=_base64de[src[pos++]];    if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)     throw new RuntimeException("Invalid character at or around position " + pos);    dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));    dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));    dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));    col+=4;    if (76 == col) {      if (10 != src[pos++])       throw new RuntimeException("No linefeed found at position " + (pos - 1));      col=0;    }  }  byte b0=_base64de[src[pos++]];  byte b1=_base64de[src[pos++]];  byte b2=_base64de[src[pos++]];  byte b3=_base64de[src[pos++]];  if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3)   throw new RuntimeException("Invalid character at or around position " + pos);  dst[dpos++]=(byte)((b0 << 2) | ((b1 >>> 4) & 0x03));  if (2 == rem)   return dst;  dst[dpos++]=(byte)((b1 << 4) | ((b2 >>> 2) & 0x0f));  if (1 == rem)   return dst;  dst[dpos++]=(byte)((b2 << 6) | (b3 & 0x3f));  return dst;}  }
class C{  private DownloadSingleInitiationResponse initiateDownload(BusinessObjectData businessObjectData){  return uploadDownloadRestController.initiateDownloadSingle(businessObjectData.getNamespace(),businessObjectData.getBusinessObjectDefinitionName(),businessObjectData.getBusinessObjectFormatUsage(),businessObjectData.getBusinessObjectFormatFileType(),businessObjectData.getBusinessObjectFormatVersion(),businessObjectData.getPartitionValue(),businessObjectData.getVersion());}  }
class C{  public Object visit(ExcludeFilter filter,Object extraData){  filterBuilder=FilterBuilders.notFilter(FilterBuilders.matchAllFilter());  return extraData;}  }
class C{  public TeXParser(boolean isPartial,String parseString,TeXFormula formula,boolean firstpass,boolean space){  this(isPartial,parseString,formula,firstpass);  this.ignoreWhiteSpace=space;}  }
class C{  public static String keyId(iaik.pkcs.pkcs11.objects.X509PublicKeyCertificate c){  if (c.getId() == null || c.getId().getByteArrayValue() == null) {    return null;  }  return DatatypeConverter.printHexBinary(c.getId().getByteArrayValue());}  }
class C{  protected int compareBestOffspringToBestParent(Chromosome parent1,Chromosome parent2,Chromosome offspring1,Chromosome offspring2){  Chromosome bestOffspring=getBest(offspring1,offspring2);  Chromosome bestParent=getBest(parent1,parent2);  return bestOffspring.compareTo(bestParent);}  }
class C{  public final void write(final byte[] new_name,final int start,final int len){  final int size=len - start;  if (current_item + size >= max_size) {    checkSize(current_item + size);  }  for (int i=0; i < size; i++) {    items[current_item]=new_name[i + start];    current_item++;  }}  }
class C{  private void zzDoEOF(){  if (!zzEOFDone) {    zzEOFDone=true;  }}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public Point2D convertGeoPositionToPoint(GeoPosition pos){  Point2D pt=getTileFactory().geoToPixel(pos,getZoom());  Rectangle bounds=getViewportBounds();  return new Point2D.Double(pt.getX() - bounds.getX(),pt.getY() - bounds.getY());}  }
class C{  public DetachSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  public static void writeSpecInfoToFiles(SecuritySpecModel securitySpecModel,String app_ROOT_DIR){  writeInfoFlowSummaryToFile(securitySpecModel,Config.v().APP_ROOT_DIR);  writeInfoFlowDetailsToFile(securitySpecModel,Config.v().APP_ROOT_DIR);  writeValueInfoToFile(securitySpecModel,Config.v().APP_ROOT_DIR);  writePointsToInfoToFile(securitySpecModel,Config.v().APP_ROOT_DIR);}  }
class C{  public ExecutorDelivery(Executor executor){  mResponsePoster=executor;}  }
class C{  public String toString(){  String out="";  for (int i=0; i < 4; i++) {    out=out + this.getStatInt()[i] + " ";  }  out=out + " " + this.mdsize+ " "+ this.keysize+ " "+ this.two_power_w+ " ";  byte[][] temp=this.getStatByte();  for (int i=0; i < 4; i++) {    if (temp[i] != null) {      out=out + new String(Hex.encode(temp[i])) + " ";    } else {      out=out + "null ";    }  }  return out;}  }
class C{  protected final Object defaultValue(){  return VAL;}  }
class C{  public EchoBreakpointRemovedParser(final ClientReader clientReader){  super(clientReader,DebugCommandType.RESP_BPE_REM_SUCCESS);}  }
class C{  public boolean isLastPOPrice(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_LastPOPrice) && COSTELEMENTTYPE_Material.equals(getCostElementType());}  }
class C{  private void drawHorizontalScale(final boolean top,final int scale,final int pixelperscale,final int offset,final Long colorNaming,final Long colorScale,final String name){  final int y=(top) ? this.topborder : this.height - this.bottomborder;  int x=this.leftborder;  int s=offset;  while (x < this.width - this.rightborder) {    if ((colorScale != null) && (x > this.leftborder) && (x < (this.width - this.rightborder))) {      setColor(colorScale);      line(x,this.topborder,x,this.height - this.bottomborder,100);    }    setColor(colorNaming);    line(x,y - 3,x,y + 3,100);    PrintTool.print(this,x,(top) ? y - 3 : y + 9,0,Integer.toString(s),-1,80);    x+=pixelperscale;    s+=scale;  }  setColor(colorNaming);  PrintTool.print(this,this.width - this.rightborder,(top) ? y - 9 : y + 15,0,name,1,80);  line(this.leftborder - 4,y,this.width - this.rightborder + 4,y,100);}  }
class C{  protected boolean beforeSave(boolean newRecord){  setAD_Org_ID(getCashBook().getAD_Org_ID());  if (getAD_Org_ID() == 0) {    log.saveError("Error",Msg.parseTranslation(getCtx(),"@AD_Org_ID@"));    return false;  }  setEndingBalance(getBeginningBalance().add(getStatementDifference()));  return true;}  }
class C{  private boolean checkIfContextSupportsExtension(GL10 gl,String extension){  String extensions=" " + gl.glGetString(GL10.GL_EXTENSIONS) + " ";  return extensions.indexOf(" " + extension + " ") >= 0;}  }
class C{  public static boolean reflectionEquals(final Object lhs,final Object rhs,final boolean testTransients,final Class<?> reflectUpToClass,final String... excludeFields){  EqualsResult result=new EqualsResult();  Set<Pair<IDKey,IDKey>> REGISTRY=new HashSet<Pair<IDKey,IDKey>>();  if (lhs == rhs) {    return true;  }  if (lhs == null || rhs == null) {    return false;  }  final Class<?> lhsClass=lhs.getClass();  final Class<?> rhsClass=rhs.getClass();  Class<?> testClass;  if (lhsClass.isInstance(rhs)) {    testClass=lhsClass;    if (!rhsClass.isInstance(lhs)) {      testClass=rhsClass;    }  } else   if (rhsClass.isInstance(lhs)) {    testClass=rhsClass;    if (!lhsClass.isInstance(rhs)) {      testClass=lhsClass;    }  } else {    return false;  }  try {    if (testClass.isArray()) {      result.append(lhs,rhs);    } else {      reflectionAppend(result,REGISTRY,lhs,rhs,testClass,testTransients,excludeFields);      while (testClass.getSuperclass() != null && testClass != reflectUpToClass) {        testClass=testClass.getSuperclass();        reflectionAppend(result,REGISTRY,lhs,rhs,testClass,testTransients,excludeFields);      }    }  } catch (  final IllegalArgumentException e) {    return false;  }  return result.isEqual();}  }
class C{  private static Identity parse(final JsonObject json){  final Map<String,String> props=new HashMap<>(json.size());  props.put(PsGithub.LOGIN,json.getString(PsGithub.LOGIN,"unknown"));  props.put("avatar",json.getString("avatar_url","#"));  return new Identity.Simple(String.format("urn:github:%d",json.getInt("id")),props);}  }
class C{  static private void throwFailure() throws InternalGemFireError, Error {  if (failure != null)   throw failure;}  }
class C{  @SuppressWarnings("unchecked") CNCtx(Hashtable<?,?> env) throws NamingException {  if (env != null) {    env=(Hashtable<?,?>)env.clone();  }  _env=(Hashtable<String,java.lang.Object>)env;  federation="true".equals(env != null ? env.get(FED_PROP) : null);  initOrbAndRootContext(env);}  }
class C{  private void proposeMove(){  AdversarialSearch<TicTacToeState,XYLocation> search;  XYLocation action;switch (strategyCombo.getSelectionModel().getSelectedIndex()) {case 0:    search=MinimaxSearch.createFor(game);  break;case 1:search=AlphaBetaSearch.createFor(game);break;case 2:search=IterativeDeepeningAlphaBetaSearch.createFor(game,0.0,1.0,1000);break;default :search=IterativeDeepeningAlphaBetaSearch.createFor(game,0.0,1.0,1000);((IterativeDeepeningAlphaBetaSearch<?,?,?>)search).setLogEnabled(true);}action=search.makeDecision(currState);searchMetrics=search.getMetrics();currState=game.getResult(currState,action);update();}  }
class C{  public HelpPanel(URL page,HyperlinkListener listener){  this();  if (listener != null) {    pane.addHyperlinkListener(listener);  }  try {    pane.setPage(page);  } catch (  IOException e1) {    e1.printStackTrace();  }}  }
class C{  static SimpleList<Sequence> createArraySequence(ComponentManager components,Type collectionType){  final int MAX_LENGTH=7;  if (!collectionType.isArray()) {    return new ArrayListSimpleList<>();  }  ArrayType arrayType=(ArrayType)collectionType;  Type componentType=arrayType.getComponentType();  SimpleList<Sequence> candidates;  if (componentType.isArray()) {    candidates=createArraySequence(components,componentType);  } else {    if (componentType.isParameterized()) {      InstantiatedType creationType=getImplementingType((InstantiatedType)componentType);      if (creationType.isRecursiveType()) {        componentType=((ReferenceArgument)creationType.getTypeArguments().get(0)).getReferenceType();      }    }    candidates=components.getSequencesForType(componentType);  }  int length;  if (candidates.isEmpty()) {    ArrayListSimpleList<Sequence> seqList=new ArrayListSimpleList<>();    if (!GenInputsAbstract.forbid_null) {      if (!Randomness.weightedCoinFlip(0.5)) {        seqList.add(new Sequence().extend(TypedOperation.createNullOrZeroInitializationForType(componentType)));      }    }    length=seqList.size();    candidates=seqList;  } else {    length=Randomness.nextRandomInt(MAX_LENGTH);  }  Sequence s=createAnArray(candidates,componentType,length);  assert s != null;  ArrayListSimpleList<Sequence> l=new ArrayListSimpleList<>();  l.add(s);  return l;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:14.556 -0500",hash_original_method="7F5367E991A6BC7E9EDD55CA9BF0FBE6",hash_generated_method="7F5367E991A6BC7E9EDD55CA9BF0FBE6") float metrics(FontMetricsInt fmi){  return measure(mLen,false,fmi);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public DTEDFrameCache(String[] dtedPaths,int max_size){  super(max_size);  dtedDirPaths=dtedPaths;}  }
class C{  public static boolean asBoolean(long[] array){  return array.length > 0;}  }
class C{  public static List<ShapeRecord> rectangle(double width,double height){  return rectangle(0.0,0.0,width,height);}  }
class C{  private List<Node> dereferenceSameDocumentURI(Node node){  List<Node> nodeSet=new ArrayList<Node>();  if (node != null) {    nodeSetMinusCommentNodes(node,nodeSet,null);  }  return nodeSet;}  }
class C{  public void createExportPolicy(String qtreeName,String fsName,String exportPath){  NaElement result=null;  try {    NaElement policyElem=new NaElement("export-policy-create");    if (qtreeName != null && !qtreeName.isEmpty()) {      String qtreePolicyName=fsName + "_" + qtreeName;      policyElem.addNewChild("policy-name",qtreePolicyName);    } else {      policyElem.addNewChild("policy-name",fsName);    }    result=server.invokeElem(policyElem);  } catch (  IllegalArgumentException e) {    String msg="Failed to create export policy on path: " + (mountPath != null ? mountPath : exportPath);    log.error(msg,e);    throw new NetAppCException(msg,e);  }catch (  Exception e) {    String msg="Failed to create export policy on path: " + (mountPath != null ? mountPath : exportPath);    log.error(msg,e);    throw new NetAppCException(msg,e);  }}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"UADD8");  translateAll(environment,instruction,"UADD8",instructions);}  }
class C{  public void testConstructor1(){  assertEquals(SIZE,new LinkedBlockingQueue(SIZE).remainingCapacity());  assertEquals(Integer.MAX_VALUE,new LinkedBlockingQueue().remainingCapacity());}  }
class C{  public static String completeAssignment(HttpServletRequest request,HttpServletResponse response){  LocalDispatcher dispatcher=(LocalDispatcher)request.getAttribute("dispatcher");  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  Map<String,Object> parameterMap=UtilHttp.getParameterMap(request);  String workEffortId=(String)parameterMap.remove("workEffortId");  String partyId=(String)parameterMap.remove("partyId");  String roleTypeId=(String)parameterMap.remove("roleTypeId");  String fromDateStr=(String)parameterMap.remove("fromDate");  java.sql.Timestamp fromDate=null;  Locale locale=UtilHttp.getLocale(request);  try {    fromDate=(java.sql.Timestamp)ObjectType.simpleTypeConvert(fromDateStr,"java.sql.Timestamp",null,null);  } catch (  GeneralException e) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderInvalidDateFormatForFromDate",locale));    return "error";  }  Map<String,Object> result=null;  try {    Map<String,? extends Object> context=UtilMisc.toMap("workEffortId",workEffortId,"partyId",partyId,"roleTypeId",roleTypeId,"fromDate",fromDate,"result",parameterMap,"userLogin",userLogin);    result=dispatcher.runSync("wfCompleteAssignment",context);    if (result.containsKey(ModelService.RESPOND_ERROR)) {      request.setAttribute("_ERROR_MESSAGE_",result.get(ModelService.ERROR_MESSAGE));      return "error";    }  } catch (  GenericServiceException e) {    request.setAttribute("_ERROR_MESSAGE_",UtilProperties.getMessage(resource_error,"OrderProblemsInvokingTheCompleteAssignmentService",locale));    return "error";  }  return "success";}  }
class C{  private void stepOutput(){  if (serialInterface.map(null).orElse(false)) {    final short value=serialInterface.map(null).orElse((short)0);    if (value != writing) {      cancelWrite();      writing=value;    }    for (    final Port port : Port.VALUES) {      final Pipe sendingPipe=getCasing().getSendingPipe(getFace(),port);      if (!sendingPipe.isWriting()) {        sendingPipe.beginWrite(writing);      }    }  } else {    cancelWrite();  }}  }
class C{  @Override public void stop(ShutdownModeAmp mode) throws Exception {  super.stop(mode);  Alarm alarm=_alarm;  _alarm=null;  if (alarm != null) {    alarm.dequeue();  }  for (  PortTcp port : _ports) {    try {      port.close();    } catch (    Throwable e) {      log.log(Level.WARNING,e.toString(),e);    }  }  _clusterService.stop();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(characterdatareplacedataexceedslengthofdata.class,args);}  }
class C{  public static ButtonGroup leftShift(ButtonGroup self,AbstractButton b){  self.add(b);  return self;}  }
class C{  public Vector4d div(double scalar){  x/=scalar;  y/=scalar;  z/=scalar;  w/=scalar;  return this;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__HAS_NO_BODY:    return hasNoBody != HAS_NO_BODY_EDEFAULT;case TypesPackage.TMEMBER_WITH_ACCESS_MODIFIER__DECLARED_MEMBER_ACCESS_MODIFIER:  return declaredMemberAccessModifier != DECLARED_MEMBER_ACCESS_MODIFIER_EDEFAULT;}return super.eIsSet(featureID);}  }
class C{  public EventTimeSourceBuilder<T> repeatAll(TimeSpan timeSpan,int times){  builder.repeatAll(timeSpan,times);  return this;}  }
class C{  private void state(State oldState,State newState){  if (!state.compareAndSet(oldState,newState))   throw new IllegalStateException();}  }
class C{  private WebDoc createParameterPage(WWindowStatus ws,WebSessionCtx wsc,HttpServletRequest request,String m_UpdateResult){  form myForm=null;  myForm=new form("WValuePreference").setName("valuepreference");  table table=new table("0","0","5","100%",null);  table.setID("WValuePrefTable");  tr line=new tr();  line.addElement(new td("&nbsp;").setRowSpan(6));  table.addElement(line);  line.addElement(getLabel(Msg.translate(m_ctx,"Attribute"))).addElement(new td(new input(input.TYPE_TEXT,"DisplayAttribute",m_DisplayAttribute)));  table.addElement(line);  line=new tr();  line.addElement(getLabel(Msg.translate(m_ctx,"Key"))).addElement(new td(new input(input.TYPE_TEXT,"DisplayAttribute",m_DisplayValue)));  table.addElement(line);  line=new tr();  line.addElement(new td("&nbsp;").setRowSpan(6));  table tablecheckbox=new table("0","0","5","80%",null);  line=new tr();  input checkbox1=new input(input.TYPE_CHECKBOX,"Client",m_AD_Client_ID);  checkbox1.setChecked(m_Client);  checkbox1.setOnClick("updateValuePref('Update');");  checkbox1.setTagText(Msg.translate(m_ctx,"AD_Client_ID"));  input checkbox2=new input(input.TYPE_CHECKBOX,"Org",m_AD_Org_ID);  checkbox2.setChecked(m_Org);  checkbox2.setOnClick("updateValuePref('Update');");  checkbox2.setTagText(Msg.translate(m_ctx,"AD_Org_ID"));  input checkbox3=new input(input.TYPE_CHECKBOX,"User",m_AD_User_ID);  checkbox3.setChecked(m_User);  checkbox3.setOnClick("updateValuePref('Update');");  checkbox3.setTagText(Msg.translate(m_ctx,"AD_User_ID"));  input checkbox4=new input(input.TYPE_CHECKBOX,"Window",m_AD_Window_ID);  checkbox4.setChecked(m_Window);  checkbox4.setOnClick("updateValuePref('Update');");  checkbox4.setTagText(Msg.translate(m_ctx,"AD_Window_ID"));  line.addElement(new td(checkbox1).setWidth("25%")).addElement(new td(checkbox2).setWidth("25%")).addElement(new td(checkbox3).setWidth("25%")).addElement(new td(checkbox4).setWidth("25%"));  tablecheckbox.addElement(line);  table.addElement(tablecheckbox);  line=new tr();  line.addElement(new td("&nbsp;").setRowSpan(6));  table tableexplination=new table("0","0","5","80%",null);  setExplanation();  line.addElement(new td(Msg.translate(m_ctx,m_Explination)).setAlign(AlignType.CENTER));  tableexplination.addElement(line);  table.addElement(tableexplination);  line=new tr();  line.addElement(new td("&nbsp;").setRowSpan(6));  table tableresult=new table("0","0","5","80%",null);  line.addElement(new td(Msg.translate(m_ctx,m_UpdateResult)).setAlign(AlignType.CENTER));  tableresult.addElement(line);  table.addElement(tableresult);  line=new tr();  line.addElement(new td("&nbsp;").setRowSpan(6));  String textbtn="Delete";  if (wsc.ctx != null)   textbtn=Msg.getMsg(wsc.ctx,"Delete");  input restbtn=new input(input.TYPE_BUTTON,textbtn,"  " + textbtn);  restbtn.setID(textbtn);  restbtn.setOnClick("updateValuePref('Delete')");  restbtn.setClass("deletebtn");  textbtn="Submit";  if (wsc.ctx != null)   textbtn=Msg.getMsg(wsc.ctx,"Submit");  input submitbtn=new input(input.TYPE_BUTTON,textbtn,"  " + textbtn);  submitbtn.setID(textbtn);  submitbtn.setOnClick("updateValuePref('Add')");  submitbtn.setClass("submitbtn");  textbtn="Close";  if (wsc.ctx != null)   textbtn=Msg.getMsg(wsc.ctx,"Close");  input closebtn=new input(input.TYPE_SUBMIT,textbtn,"  " + textbtn);  closebtn.setID(textbtn);  closebtn.setClass("closebtn");  closebtn.setOnClick("self.close();return false;");  table tablebuttons=new table("0","0","5","100%",null);  tablebuttons.addElement(new tr().addElement(new td(null,AlignType.CENTER,AlignType.MIDDLE,false,restbtn)).addElement(new td(null,AlignType.CENTER,AlignType.MIDDLE,false,submitbtn)).addElement(new td(null,AlignType.CENTER,AlignType.MIDDLE,false,closebtn)));  table.addElement(tablebuttons);  myForm.addElement(table);  WebDoc doc=WebDoc.createPopup("Set Value Preference");  td center=doc.addWindowCenter(false);  myForm.addElement(new input(input.TYPE_HIDDEN,"PostAction","")).addElement(table);  center.addElement(myForm);  return doc;}  }
class C{  public UnsortedInputIterator(InputIterator source) throws IOException {  super(source);  ords=new int[entries.size()];  Random random=new Random();  for (int i=0; i < ords.length; i++) {    ords[i]=i;  }  for (int i=0; i < ords.length; i++) {    int randomPosition=random.nextInt(ords.length);    int temp=ords[i];    ords[i]=ords[randomPosition];    ords[randomPosition]=temp;  }}  }
class C{  public boolean isEmptyLabel(){  return this.label.isEmpty();}  }
class C{  @Override public <K,D,A,M extends Map<K,D>>Eval<M> groupBy(final Function<? super T,? extends K> classifier,final Supplier<M> mapFactory,final Collector<? super T,A,D> downstream){  return Eval.later(null);}  }
class C{  public void refresh(Object organization,Object locator,Object product,Object movementType,Timestamp movementDateFrom,Timestamp movementDateTo,IStatusBar statusBar){  MQuery query=m_staticQuery.deepCopy();  if (organization != null && organization.toString().length() > 0)   query.addRestriction("AD_Org_ID",MQuery.EQUAL,organization);  if (locator != null && locator.toString().length() > 0)   query.addRestriction("M_Locator_ID",MQuery.EQUAL,locator);  if (product != null && product.toString().length() > 0)   query.addRestriction("M_Product_ID",MQuery.EQUAL,product);  if (movementType != null && movementType.toString().length() > 0)   query.addRestriction("MovementType",MQuery.EQUAL,movementType);  if (movementDateFrom != null)   query.addRestriction("TRUNC(MovementDate, 'DD')",MQuery.GREATER_EQUAL,movementDateFrom);  if (movementDateTo != null)   query.addRestriction("TRUNC(MovementDate, 'DD')",MQuery.LESS_EQUAL,movementDateTo);  log.info("VTrxMaterial.refresh query=" + query.toString());  statusBar.setStatusLine(Msg.getMsg(Env.getCtx(),"StartSearch"),false);  m_mTab.setQuery(query);  m_mTab.query(false);  int no=m_mTab.getRowCount();  statusBar.setStatusLine(" ",false);  statusBar.setStatusDB(Integer.toString(no));}  }
class C{  static final private String rawToHexFingerprint(byte[] fingerprint){  final char[] alpha="0123456789abcdef".toCharArray();  StringBuffer sb=new StringBuffer();  for (int i=0; i < fingerprint.length; i++) {    if (i != 0)     sb.append(':');    int b=fingerprint[i] & 0xff;    sb.append(alpha[b >> 4]);    sb.append(alpha[b & 15]);  }  return sb.toString();}  }
class C{  public void onError(IgniteCheckedException err){  this.err=err;}  }
class C{  protected void findMatchingInstructor(InstructorEditForm frm,HttpServletRequest request) throws Exception {  frm.setMatchFound(new Boolean(false));  String fname=frm.getFname();  String lname=frm.getLname();  String login=frm.getCareerAcct();  if (login != null && login.trim().length() > 0 && frm.getLookupEnabled()) {    UserInfo results=lookupInstructor(frm);    if (results != null) {      frm.setI2a2Match(results);      frm.setMatchFound(Boolean.TRUE);    }  }  List staffList=Staff.findMatchingName(fname,lname);  frm.setStaffMatch(staffList);  if (staffList != null && staffList.size() > 0)   frm.setMatchFound(new Boolean(true));}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String surferFile=null;  String whiteboxHeaderFile=null;  int i=0;  int row, col, rows, cols;  String[] imageFiles;  int numImages=0;  int progress=0;  double cellsize=0;  double north=0;  double east=0;  double west=0;  double south=0;  double arcNoData=-9999;  double whiteboxNoData=-32768d;  double z=0;  String delimiter=" ";  String str1=null;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  DataInputStream in=null;  BufferedReader br=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputFilesString=args[i];    }  }  if ((inputFilesString == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      progress=(int)(100f * i / (numImages - 1));      updateProgress("Loop " + (i + 1) + " of "+ numImages+ ":",progress);      surferFile=imageFiles[i];      if (!((new File(surferFile)).exists())) {        showFeedback("Surfer raster file does not exist.");        break;      }      if (surferFile.lastIndexOf(".") >= 0) {        String extension=surferFile.substring(surferFile.lastIndexOf("."));        whiteboxHeaderFile=surferFile.replace(extension,".dep");      } else {        whiteboxHeaderFile=surferFile + ".dep";      }      (new File(whiteboxHeaderFile)).delete();      (new File(whiteboxHeaderFile.replace(".dep",".tas"))).delete();      FileInputStream fstream=new FileInputStream(surferFile);      rows=0;      cols=0;      in=new DataInputStream(fstream);      br=new BufferedReader(new InputStreamReader(in));      if (surferFile != null) {        String line;        String[] str;        i=1;        while ((line=br.readLine()) != null && i < 5) {          str=line.split(delimiter);          if (str.length <= 1 && i > 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          if (i == 1) {            if (!(str[0].toLowerCase().equals("dsaa"))) {              showFeedback("Warning: Surfer ASCII GRD ID value " + "was not located. This file may be " + "improperly structured.");            }          } else           if (i == 2) {            cols=Integer.parseInt(str[0]);            rows=Integer.parseInt(str[str.length - 1]);          } else           if (i == 3) {            west=Double.parseDouble(str[0]);            east=Double.parseDouble(str[str.length - 1]);          } else           if (i == 4) {            south=Double.parseDouble(str[0]);            north=Double.parseDouble(str[str.length - 1]);          } else {            break;          }          i++;        }        fw=new FileWriter(whiteboxHeaderFile,false);        bw=new BufferedWriter(fw);        out=new PrintWriter(bw,true);        str1="Min:\t" + Double.toString(Integer.MAX_VALUE);        out.println(str1);        str1="Max:\t" + Double.toString(Integer.MIN_VALUE);        out.println(str1);        str1="North:\t" + Double.toString(north);        out.println(str1);        str1="South:\t" + Double.toString(south);        out.println(str1);        str1="East:\t" + Double.toString(east);        out.println(str1);        str1="West:\t" + Double.toString(west);        out.println(str1);        str1="Cols:\t" + Integer.toString(cols);        out.println(str1);        str1="Rows:\t" + Integer.toString(rows);        out.println(str1);        str1="Data Type:\t" + "float";        out.println(str1);        str1="Z Units:\t" + "not specified";        out.println(str1);        str1="XY Units:\t" + "not specified";        out.println(str1);        str1="Projection:\t" + "not specified";        out.println(str1);        str1="Data Scale:\tcontinuous";        out.println(str1);        str1="Preferred Palette:\t" + "spectrum.pal";        out.println(str1);        str1="NoData:\t-32768";        out.println(str1);        if (java.nio.ByteOrder.nativeOrder() == java.nio.ByteOrder.LITTLE_ENDIAN) {          str1="Byte Order:\t" + "LITTLE_ENDIAN";        } else {          str1="Byte Order:\t" + "BIG_ENDIAN";        }        out.println(str1);        WhiteboxRaster wbr=new WhiteboxRaster(whiteboxHeaderFile,"rw");        delimiter=" ";        row=rows - 1;        col=0;        while ((line=br.readLine()) != null) {          str=line.split(delimiter);          if (str.length <= 1) {            delimiter="\t";            str=line.split(delimiter);            if (str.length <= 1) {              delimiter=" ";              str=line.split(delimiter);              if (str.length <= 1) {                delimiter=",";                str=line.split(delimiter);              }            }          }          for (i=0; i < str.length; i++) {            if (!str[i].trim().isEmpty()) {              z=Double.parseDouble(str[i]);              wbr.setValue(row,col,z);              col++;              if (col == cols) {                col=0;                row--;              }            }          }        }        in.close();        br.close();        wbr.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");        wbr.addMetadataEntry("Created on " + new Date());        wbr.flush();        wbr.findMinAndMaxVals();        wbr.close();        returnData(whiteboxHeaderFile);      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected Iterable<JavaFileObject> wrap(Iterable<JavaFileObject> fileObjects){  List<JavaFileObject> mapped=new ArrayList<JavaFileObject>();  for (  JavaFileObject fileObject : fileObjects)   mapped.add(wrap(fileObject));  return Collections.unmodifiableList(mapped);}  }
class C{  private List<NodeTuple> mergeNode(MappingNode node,boolean isPreffered,Map<Object,Integer> key2index,List<NodeTuple> values){  List<NodeTuple> nodeValue=node.getValue();  Collections.reverse(nodeValue);  for (Iterator<NodeTuple> iter=nodeValue.iterator(); iter.hasNext(); ) {    final NodeTuple nodeTuple=iter.next();    final Node keyNode=nodeTuple.getKeyNode();    final Node valueNode=nodeTuple.getValueNode();    if (keyNode.getTag().equals(Tag.MERGE)) {      iter.remove();switch (valueNode.getNodeId()) {case mapping:        MappingNode mn=(MappingNode)valueNode;      mergeNode(mn,false,key2index,values);    break;case sequence:  SequenceNode sn=(SequenceNode)valueNode;List<Node> vals=sn.getValue();for (Node subnode : vals) {if (!(subnode instanceof MappingNode)) {  throw new ConstructorException("while constructing a mapping",node.getStartMark(),"expected a mapping for merging, but found " + subnode.getNodeId(),subnode.getStartMark());}MappingNode mnode=(MappingNode)subnode;mergeNode(mnode,false,key2index,values);}break;default :throw new ConstructorException("while constructing a mapping",node.getStartMark(),"expected a mapping or list of mappings for merging, but found " + valueNode.getNodeId(),valueNode.getStartMark());}} else {Object key=constructObject(keyNode);if (!key2index.containsKey(key)) {values.add(nodeTuple);key2index.put(key,values.size() - 1);} else if (isPreffered) {values.set(key2index.get(key),nodeTuple);}}}return values;}  }
class C{  public static <E>Set<E> of(E e1,E e2,E e3,E e4){  return new ImmutableCollections.SetN<E>(e1,e2,e3,e4);}  }
class C{  public void addToken(char[] array,int start,int end,int tokenType,int startOffset,boolean hyperlink){  super.addToken(array,start,end,tokenType,startOffset,hyperlink);  zzStartRead=zzMarkedPos;}  }
class C{  public final void addStateListener(StateListener l){  listeners.add(StateListener.class,l);}  }
class C{  public static void loadProperties(Properties properties){  double[] dArray=StringUtil.getDoubleArray(properties,"LampLocation",new double[]{45,45},false);  defaultAz=(float)Math.toRadians(dArray[0]);  defaultEl=(float)Math.toRadians(dArray[1]);  DATE_FORMAT=properties.getProperty("DateFormat","ddMMMyy HH:mm:ss");  SimpleDateFormat dateFormatter=new SimpleDateFormat(DATE_FORMAT);  dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));  Enumeration<String> keys=(Enumeration<String>)properties.propertyNames();  while (keys.hasMoreElements()) {    String key=keys.nextElement();    if (key.startsWith("LMST.")) {      String k=key.substring(5,key.length());      if (k.endsWith(".epoch")) {        Date date=null;        try {          date=dateFormatter.parse(properties.getProperty(key));          lmstTable.put(k,date);        } catch (        Exception e) {          e.printStackTrace();        }      } else       if (k.endsWith(".toEarth")) {        Double toEarth=null;        try {          double d=Double.parseDouble(properties.getProperty(key));          toEarth=new Double(d);          lmstTable.put(k,toEarth);        } catch (        Exception e) {          lmstTable.put(k,new Double(1));        }      }    }  }}  }
class C{  @Override public final void sample(){  long totalCount=_totalCount.get();  long lastTotal=_lastTotal;  _lastTotal=totalCount;  _value=totalCount - lastTotal;}  }
class C{  public void writeLong(long l) throws IOException {  this.temp[0]=(byte)((l >>> 56) & 0xff);  this.temp[1]=(byte)((l >>> 48) & 0xff);  this.temp[2]=(byte)((l >>> 40) & 0xff);  this.temp[3]=(byte)((l >>> 32) & 0xff);  this.temp[4]=(byte)((l >>> 24) & 0xff);  this.temp[5]=(byte)((l >>> 16) & 0xff);  this.temp[6]=(byte)((l >>> 8) & 0xff);  this.temp[7]=(byte)(l & 0xff);  this.write(this.temp,0,8);}  }
class C{  public void fixedAnimation(String name){  if (animMap.isEmpty())   return;  BaseAnim anim=animMap.get(name);  if (anim.animating)   doAnimation(anim);}  }
class C{  public void pushPacket(IPacket packet,IOFSwitch sw,OFBufferId bufferId,OFPort inPort,OFPort outPort,FloodlightContext cntx,boolean flush){  if (log.isTraceEnabled()) {    log.trace("PacketOut srcSwitch={} inPort={} outPort={}",new Object[]{sw,inPort,outPort});  }  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  actions.add(sw.getOFFactory().actions().buildOutput().setPort(outPort).setMaxLen(Integer.MAX_VALUE).build());  pob.setActions(actions);  pob.setBufferId(bufferId);  pob.setInPort(inPort);  if (pob.getBufferId() == OFBufferId.NO_BUFFER) {    if (packet == null) {      log.error("BufferId is not set and packet data is null. " + "Cannot send packetOut. " + "srcSwitch={} inPort={} outPort={}",new Object[]{sw,inPort,outPort});      return;    }    byte[] packetData=packet.serialize();    pob.setData(packetData);  }  counterPacketOut.increment();  sw.write(pob.build());}  }
class C{  public boolean hasMarkers(){  return fieldSetFlags()[21];}  }
class C{  public Object convert(Class<?> targetType,Object valueToConvert) throws JavaTypeTranslatorException {  Object rVal=null;  if (Decode.class.isAssignableFrom(targetType)) {    try {      Decode vt=(Decode)targetType.newInstance();      vt.setValue(valueToConvert);      rVal=vt;    } catch (    Exception ex) {      throw new JavaTypeTranslatorException(ex,"Unable to set code");    }  } else {    throw new JavaTypeTranslatorException("Target type must be a com.aceva.devtools.valuetype.base.Decode");  }  return (rVal);}  }
class C{  private void init(){  this.paused=false;  this.stopped=true;  this.tasksDoneCount=0;  this.tasksTotalCount=0;  this.initialized=false;  defaultFetchFilter=new DefaultFetchFilter();  this.addFetchFilter(defaultFetchFilter);  for (  FetchFilter filter : extension.getCustomFetchFilters()) {    this.addFetchFilter(filter);  }  this.addParseFilter(new DefaultParseFilter());  for (  ParseFilter filter : extension.getCustomParseFilters())   this.addParseFilter(filter);  defaultFetchFilter.setScanContext(this.scanContext);  defaultFetchFilter.setDomainsAlwaysInScope(spiderParam.getDomainsAlwaysInScopeEnabled());}  }
class C{  public void testBogusArguments() throws Exception {  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage().contains("Unknown parameters"));}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.DEFAULT_IMPORT_SPECIFIER___GET_ALIAS:    return getAlias();case N4JSPackage.DEFAULT_IMPORT_SPECIFIER___IS_DEFAULT_IMPORT:  return isDefaultImport();}return super.eInvoke(operationID,arguments);}  }
class C{  public StyledSeparatorUI(Style style){  this.style=style;}  }
class C{  @Inject public HelpExtension(ActionManager actionManager,RedirectToEngineerChatChannelAction redirectToEngineerChatChannelAction,CreateSupportTicketAction createSupportTicketAction,HelpLocalizationConstant localizationConstant,DtoUnmarshallerFactory dtoUnmarshallerFactory,HelpResources resources){  this.resources=resources;  this.actionManager=actionManager;  this.createSupportTicketAction=createSupportTicketAction;  this.redirectToEngineerChatChannelAction=redirectToEngineerChatChannelAction;  this.dtoUnmarshallerFactory=dtoUnmarshallerFactory;  this.localizationConstant=localizationConstant;  helpGroup=(DefaultActionGroup)actionManager.getAction(IdeActions.GROUP_HELP);  init();}  }
class C{  public static void registerConverter(JavaTypeConverter theConverter){  Class<?> targetType=theConverter.getTargetType();  Class<?> sourceType=theConverter.getSourceType();  Hashtable<Class<?>,JavaTypeConverter> innerTable=m_converters.get(targetType);  if (innerTable != null) {    innerTable.put(sourceType,theConverter);  } else {    innerTable=new Hashtable<Class<?>,JavaTypeConverter>(10);    innerTable.put(sourceType,theConverter);    m_converters.put(targetType,innerTable);  }}  }
class C{  public static Map<String,Object> linkParty(DispatchContext dctx,Map<String,? extends Object> context){  Delegator _delegator=dctx.getDelegator();  Delegator delegator=_delegator.cloneDelegator();  Locale locale=(Locale)context.get("locale");  delegator.setEntityEcaHandler(null);  String partyIdTo=(String)context.get("partyIdTo");  String partyId=(String)context.get("partyId");  Timestamp now=UtilDateTime.nowTimestamp();  if (partyIdTo.equals(partyId)) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyCannotLinkPartyToItSelf",locale));  }  GenericValue partyTo;  try {    partyTo=EntityQuery.use(delegator).from("Party").where("partyId",partyIdTo).queryOne();  } catch (  GenericEntityException e) {    Debug.logInfo(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (partyTo == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyToDoesNotExists",locale));  }  if ("PARTY_DISABLED".equals(partyTo.get("statusId"))) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyCannotMergeDisabledParty",locale));  }  GenericValue party;  try {    party=EntityQuery.use(delegator).from("Party").where("partyId",partyId).queryOne();  } catch (  GenericEntityException e) {    Debug.logInfo(e,module);    return ServiceUtil.returnError(e.getMessage());  }  if (party == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyPartyFromDoesNotExists",locale));  }  try {    delegator.storeByCondition("PartyContactMech",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("PartyContactMechPurpose",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("PartyNote",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("InventoryItem",UtilMisc.toMap("ownerPartyId",partyIdTo),EntityCondition.makeCondition("ownerPartyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("Subscription",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("UserLogin",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  List<GenericValue> rolesToMove;  try {    rolesToMove=EntityQuery.use(delegator).from("PartyRole").where("partyId",partyId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  for (  GenericValue attr : rolesToMove) {    attr.set("partyId",partyIdTo);    try {      if (EntityQuery.use(delegator).from("PartyRole").where(attr.getPrimaryKey()).queryOne() == null) {        attr.create();      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }  }  try {    delegator.storeByCondition("OrderRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("InvoiceRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("DataResourceRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("ContentRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("FinAccountRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("ProductStoreRole",UtilMisc.<String,Object>toMap("partyId",partyIdTo,"thruDate",now),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.storeByCondition("CommunicationEventRole",UtilMisc.toMap("partyId",partyIdTo),EntityCondition.makeCondition("partyId",EntityOperator.EQUALS,partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  try {    delegator.removeByAnd("PartyRole",UtilMisc.toMap("partyId",partyId));  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  List<GenericValue> attrsToMove;  try {    attrsToMove=EntityQuery.use(delegator).from("PartyAttribute").where("partyId",partyId).queryList();  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  for (  GenericValue attr : attrsToMove) {    attr.set("partyId",partyIdTo);    try {      if (EntityQuery.use(delegator).from("PartyAttribute").where(attr.getPrimaryKey()).queryOne() == null) {        attr.create();      }    } catch (    GenericEntityException e) {      Debug.logError(e,module);      return ServiceUtil.returnError(e.getMessage());    }  }  try {    delegator.removeByAnd("PartyAttribute",UtilMisc.toMap("partyId",partyId));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  GenericValue linkAttr=delegator.makeValue("PartyAttribute");  linkAttr.set("partyId",partyId);  linkAttr.set("attrName","LINKED_TO");  linkAttr.set("attrValue",partyIdTo);  try {    delegator.create(linkAttr);  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }  String currentStatus=party.getString("statusId");  if (currentStatus == null || !"PARTY_DISABLED".equals(currentStatus)) {    party.set("statusId","PARTY_DISABLED");    try {      party.store();    } catch (    GenericEntityException e) {      Debug.logError(e,"Error setting disable mode on partyId: " + partyId,module);      return ServiceUtil.returnError(e.getMessage());    }  }  Map<String,Object> resp=ServiceUtil.returnSuccess();  resp.put("partyId",partyIdTo);  return resp;}  }
class C{  void add(int n){  if (v == null) {    v=new int[INIT_SIZE];    v[0]=n;    len=1;    return;  }  if (len == v.length) {    int[] newv=new int[len * 2];    System.arraycopy(v,0,newv,0,len);    v=newv;  }  if (n > v[len - 1]) {    v[len++]=n;    return;  }  int i=0;  for (; i < len; i++) {    if (n <= v[i]) {      if (n == v[i])       return;      break;    }  }  for (int j=len; j >= i; j--)   v[j + 1]=v[j];  v[i]=n;  ++len;}  }
class C{  public void tearDownTables() throws Exception {  if (connector != null) {    for (    final String tableName : tableList) {      if (connector.tableOperations().exists(tableName)) {        connector.tableOperations().delete(tableName);      }    }  }}  }
class C{  public <T>SimpleAbstractTypeResolver addMapping(Class<T> superType,Class<? extends T> subType){  if (superType == subType) {    throw new IllegalArgumentException("Can not add mapping from class to itself");  }  if (!superType.isAssignableFrom(subType)) {    throw new IllegalArgumentException("Can not add mapping from class " + superType.getName() + " to "+ subType.getName()+ ", as latter is not a subtype of former");  }  if (!Modifier.isAbstract(superType.getModifiers())) {    throw new IllegalArgumentException("Can not add mapping from class " + superType.getName() + " since it is not abstract");  }  _mappings.put(new ClassKey(superType),subType);  return this;}  }
class C{  public static int[] insertionSort(int[] list){  for (int i=0; i < list.length; i++) {    int element=list[i];    int j=i;    while (j > 0 && list[j - 1] > element) {      list[j]=list[j - 1];      j--;    }    list[j]=element;  }  return list;}  }
class C{  SavedState(Parcelable superState){  super(superState);}  }
class C{  public Object callFunction(Object[] inputs,int function,int numFunctions){  if (function == F_AND) {    return (Boolean)inputs[0] & (Boolean)inputs[1];  } else   if (function == F_OR) {    return (Boolean)inputs[0] | (Boolean)inputs[1];  } else   if (function == F_NOT) {    return !(Boolean)inputs[0];  } else   if (function == F_NOR) {    return !((Boolean)inputs[0] | (Boolean)inputs[1]);  } else   if (function == F_NAND) {    return !((Boolean)inputs[0] & (Boolean)inputs[1]);  } else   throw new IllegalArgumentException("Function #" + function + " is unknown.");}  }
class C{  @Override public void close() throws IOException {synchronized (lock) {    if (encoder != null) {      drainEncoder();      flushBytes(false);      out.close();      encoder=null;      bytes=null;    }  }}  }
class C{  public RelateOp(Geometry g0,Geometry g1){  super(g0,g1);  relate=new RelateComputer(arg);}  }
class C{  public static void println(int priority,String tag,String msg){  println(priority,tag,msg,null);}  }
class C{  void sendMessageToHandlerNoControllerReset(List<OFMessage> messages) throws Exception {  setupMessageEvent(messages);  controller.flushAll();  expectLastCall().atLeastOnce();  replay(controller);  handler.messageReceived(ctx,messageEvent);  verify(controller);}  }
class C{  public LabelNode gotoLabel(final LabelNode l){  Instantiation owner=findOwner(instructions.indexOf(l));  return owner.rangeTable.get(l);}  }
class C{  public synchronized void removeListeners(int what){  mListenersSpecific.delete(what);}  }
class C{  public Enumeration preorderEnumeration(){  return new PreorderEnumeration(this);}  }
class C{  @RequestMapping(value={"","/"},method=RequestMethod.GET) @ResponseBody public RestWrapper list(@RequestParam(value="page",defaultValue="0") int startPage,@RequestParam(value="size",defaultValue="10") int pageSize,Principal principal){  RestWrapper restWrapper=null;  try {    List<PropertiesTemplate> getPropertiesTemplate=propertiesTemplateDAO.listPropertyTemplate(startPage,pageSize);    restWrapper=new RestWrapper(getPropertiesTemplate,RestWrapper.OK);    LOGGER.info("All records listed from PropertiesTemplate by User:" + principal.getName());  } catch (  Exception e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  public static int nullSafeHashCode(char[] array){  if (array == null) {    return 0;  }  int hash=INITIAL_HASH;  int arraySize=array.length;  for (int i=0; i < arraySize; i++) {    hash=MULTIPLIER * hash + array[i];  }  return hash;}  }
class C{  public static int length(long memPtr){  return GridUnsafe.getInt(memPtr + MEM_HDR_OFF_LEN);}  }
class C{  public Cert(byte[] data) throws ServiceResultException {  try {    encodedCertificate=data;    certificate=CertificateUtils.decodeX509Certificate(data);    encodedCertificateThumbprint=CertificateUtils.createThumbprint(encodedCertificate);  } catch (  CertificateNotYetValidException ce) {    throw new ServiceResultException(StatusCodes.Bad_CertificateTimeInvalid,ce);  }catch (  CertificateExpiredException ce) {    throw new ServiceResultException(StatusCodes.Bad_CertificateTimeInvalid,ce);  }catch (  CertificateParsingException ce) {    throw new ServiceResultException(StatusCodes.Bad_CertificateInvalid,ce);  }catch (  CertificateException ce) {    throw new ServiceResultException(StatusCodes.Bad_CertificateInvalid,ce);  }}  }
class C{  public static long safeSipHash(long k0,long k1,byte[] msg){  byte[] a=new byte[16];  ByteBuffer bb=ByteBuffer.wrap(a).order(ByteOrder.BIG_ENDIAN);  bb.putLong(SipHashInline.hash24(k0,k1,msg,0,msg.length));  bb.putLong(SipHashInline.hash24(k0,k1,msg,0,msg.length,true));  return SipHashInline.hash24(k0,k1,a,0,a.length,false);}  }
class C{  public void addSpUniqueId(java.lang.String param){  if (localSpUniqueId == null) {    localSpUniqueId=new java.lang.String[]{};  }  localSpUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localSpUniqueId);  list.add(param);  this.localSpUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public void write(String data){  write(data.getBytes());}  }
class C{  public boolean isDebugEnabled(){  return (getLogger().isLoggable(Level.FINE));}  }
class C{  private void createResponse(final HttpServerRequest req,final int statusCode,final String statusMessage,final Buffer buffer,final String mimeType){  req.response().setStatusCode(statusCode);  req.response().setStatusMessage(statusMessage);  if (mimeType != null) {    req.response().headers().add("Content-Type",mimeType);  }  if (buffer != null) {    req.response().end(buffer);  } else {    req.response().end();  }}  }
class C{  public Set adviseBridgeServers(){  Set result=this.cachedBridgeServerAdvise;  if (result == null) {synchronized (this.cacheLock) {      result=this.cachedBridgeServerAdvise;      if (result == null) {        result=Collections.unmodifiableSet(adviseFilter(BRIDGE_SERVER_FILTER));        this.cachedBridgeServerAdvise=result;      }    }  }  return result;}  }
class C{  private boolean intersect(int sx1,int sy1,int sx2,int sy2,int dx1,int dy1,int dx2,int dy2){  int sw=sx2 - sx1 + 1;  int sh=sy2 - sy1 + 1;  int dw=dx2 - dx1 + 1;  int dh=dy2 - dy1 + 1;  if (dx1 < sx1) {    dw+=dx1 - sx1;    if (dw > sw) {      dw=sw;    }  } else {    int w=sw + sx1 - dx1;    if (dw > w) {      dw=w;    }  }  if (dy1 < sy1) {    dh+=dy1 - sy1;    if (dh > sh) {      dh=sh;    }  } else {    int h=sh + sy1 - dy1;    if (dh > h) {      dh=h;    }  }  return !(dw <= 0 || dh <= 0);}  }
class C{  protected KeySpec engineGetKeySpec(SecretKey key,Class<?> keySpecCl) throws InvalidKeySpecException {  if (key instanceof javax.crypto.interfaces.PBEKey) {    if ((keySpecCl != null) && PBEKeySpec.class.isAssignableFrom(keySpecCl)) {      javax.crypto.interfaces.PBEKey pKey=(javax.crypto.interfaces.PBEKey)key;      return new PBEKeySpec(pKey.getPassword(),pKey.getSalt(),pKey.getIterationCount(),pKey.getEncoded().length * 8);    } else {      throw new InvalidKeySpecException("Invalid key spec");    }  } else {    throw new InvalidKeySpecException("Invalid key " + "format/algorithm");  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.SYSTEM_ADMIN,Role.RESTRICTED_SYSTEM_ADMIN}) @Path("/{id}/discover") public TaskResourceRep discoverSystem(@PathParam("id") URI id,@QueryParam("namespace") String namespace){  StorageSystem storageSystem=_dbClient.queryObject(StorageSystem.class,id);  ArgValidator.checkEntity(storageSystem,id,isIdEmbeddedInURL(id),true);  String deviceType=storageSystem.getSystemType();  if (namespace == null || namespace.trim().length() < 1) {    namespace=Discovery_Namespaces.ALL.toString();  }  if (!validateNameSpace(namespace,storageSystem)) {    throw APIException.badRequests.invalidParameterStorageSystemNamespace(namespace);  }  if ((Discovery_Namespaces.UNMANAGED_VOLUMES.name().equalsIgnoreCase(namespace) || Discovery_Namespaces.BLOCK_SNAPSHOTS.name().equalsIgnoreCase(namespace) || Discovery_Namespaces.UNMANAGED_FILESYSTEMS.name().equalsIgnoreCase(namespace)) && !CompatibilityStatus.COMPATIBLE.name().equalsIgnoreCase(storageSystem.getCompatibilityStatus())) {    throw APIException.badRequests.cannotDiscoverUnmanagedResourcesForUnsupportedSystem();  }  BlockController controller=getController(BlockController.class,deviceType);  DiscoveredObjectTaskScheduler scheduler=null;  ArrayList<AsyncTask> tasks=new ArrayList<AsyncTask>(1);  String taskId=UUID.randomUUID().toString();  if (Discovery_Namespaces.ARRAY_AFFINITY.name().equalsIgnoreCase(namespace)) {    if (!storageSystem.deviceIsType(Type.vmax) && !storageSystem.deviceIsType(Type.vnxblock) && !storageSystem.deviceIsType(Type.xtremio)&& !storageSystem.deviceIsType(Type.unity)) {      throw APIException.badRequests.cannotDiscoverArrayAffinityForUnsupportedSystem(storageSystem.getSystemType());    }    scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new ArrayAffinityJobExec(controller));    URI providerURI=storageSystem.getActiveProviderURI();    List<URI> systemIds=new ArrayList<URI>();    systemIds.add(id);    if (!NullColumnValueGetter.isNullURI(providerURI) && (storageSystem.deviceIsType(Type.vmax) || storageSystem.deviceIsType(Type.vnxblock) || storageSystem.deviceIsType(Type.xtremio))) {      List<URI> sysURIs=_dbClient.queryByType(StorageSystem.class,true);      Iterator<StorageSystem> storageSystems=_dbClient.queryIterativeObjects(StorageSystem.class,sysURIs);      while (storageSystems.hasNext()) {        StorageSystem systemObj=storageSystems.next();        if (systemObj == null) {          _log.warn("StorageSystem is no longer in the DB. It could have been deleted or decommissioned");          continue;        }        if (providerURI.equals(systemObj.getActiveProviderURI()) && !id.equals(systemObj.getId())) {          systemIds.add(systemObj.getId());        }      }    }    tasks.add(new ArrayAffinityAsyncTask(StorageSystem.class,systemIds,null,taskId));  } else {    scheduler=new DiscoveredObjectTaskScheduler(_dbClient,new DiscoverJobExec(controller));    tasks.add(new AsyncTask(StorageSystem.class,storageSystem.getId(),taskId,namespace));  }  TaskList taskList=scheduler.scheduleAsyncTasks(tasks);  return taskList.getTaskList().listIterator().next();}  }
class C{  @Override public boolean pinchIn(Selector obj,int percent,int steps) throws UiObjectNotFoundException, NotImplementedException {  return pinchIn(device.findObject(obj.toUiSelector()),percent,steps);}  }
class C{  public boolean hasAddress(){  return getAddress() != null;}  }
class C{  public Format(int id){  this.mId=id;}  }
class C{  public Item(String affiliation,String role){  this.affiliation=affiliation;  this.role=role;}  }
class C{  public double doOperation() throws OperatorFailedException {  double logq=0;  try {    if (MathUtils.nextDouble() < 0.5)     logq=AddOperation(); else     logq=RemoveOperation();  } catch (  Exception ofe) {    if (ofe.getMessage().compareTo("No reassortment nodes to remove.") != 0) {      System.err.println("Catch: " + ofe.getMessage());      System.exit(-1);    }  }  return logq;}  }
class C{  public static void addDatasource(String sourcePath,String destPath,DsDef newDatasource) throws IOException {  addDatasources(sourcePath,destPath,Collections.singleton(newDatasource));}  }
class C{  private void reinsertExpanded(SpatialPrimitiveDistanceFunction<NV> distFunction,DeLiCluTree index,IndexTreePath<DeLiCluEntry> path,Relation<KNNList> knns){  int l=0;  for (IndexTreePath<DeLiCluEntry> it=path; it != null; it=it.getParentPath()) {    l++;  }  ArrayList<IndexTreePath<DeLiCluEntry>> p=new ArrayList<>(l - 1);  IndexTreePath<DeLiCluEntry> it=path;  for (; it.getParentPath() != null; it=it.getParentPath()) {    p.add(it);  }  assert (p.size() == l - 1);  DeLiCluEntry rootEntry=it.getEntry();  reinsertExpanded(distFunction,index,p,l - 2,rootEntry,knns);}  }
class C{  public boolean isNonanonymous(){  return nonanonymous;}  }
class C{  public static PrintWriter newPrintWriter(Writer writer){  return new GroovyPrintWriter(writer);}  }
class C{  public void print(){  for (  Entry<TypeVariable,T> entry : map.entrySet()) {    System.out.println(entry.getKey() + "(" + entry.getKey().hashCode()+ ")"+ " := "+ entry.getValue());  }}  }
class C{  private int FPOffset2SPOffset(int fpOffset){  return frameSize + fpOffset - WORDSIZE;}  }
class C{  public void doSave(IProgressMonitor monitor){  getEditor(0).doSave(monitor);}  }
class C{  public void generateSearchPage(List<ApiService> services){  List<ApiMethod> allMethods=new ArrayList<ApiMethod>();  for (  ApiService service : services) {    allMethods.addAll(service.methods);  }  int key=0;  for (  ApiMethod method : allMethods) {    method.indexKey="" + key++;  }  Map<String,Object> parameters=new HashMap<String,Object>();  parameters.put("apiMethods",allMethods);  parameters.put("title","API Reference Search");  addCommonTemplateParameters(parameters);  TemplateEngine.generateFileFromTemplate(KnownPaths.getTemplateFile(SEARCH_TEMPLATE),KnownPaths.getHtmlOutputFile(SEARCH_TEMPLATE),parameters);}  }
class C{  public synchronized void add(String category,double value){  mCategories.add(category);  mValues.add(value);}  }
class C{  public static ModelInfo createFromAttributes(ModelInfo defaultInfo,Element element){  String title=element.getAttribute("title").intern();  if (title.isEmpty()) {    title=defaultInfo.getTitle();  }  String description=StringUtil.internString(UtilXml.childElementValue(element,"description"));  if (description == null || description.isEmpty()) {    description=defaultInfo.getDescription();  }  String copyright=element.getAttribute("copyright").intern();  if (copyright.isEmpty()) {    copyright=defaultInfo.getCopyright();  }  String author=element.getAttribute("author").intern();  if (author.isEmpty()) {    author=defaultInfo.getAuthor();  }  String version=element.getAttribute("version").intern();  if (version.isEmpty()) {    version=defaultInfo.getVersion();  }  String defaultResourceName=StringUtil.internString(element.getAttribute("default-resource-name"));  if (defaultResourceName.isEmpty()) {    defaultResourceName=defaultInfo.getDefaultResourceName();  }  return new ModelInfo(title,description,copyright,author,version,defaultResourceName);}  }
class C{  protected boolean verticesAreFiltered(){  Predicate<Context<Graph<V,E>,V>> vertexIncludePredicate=vv.getRenderContext().getVertexIncludePredicate();  return vertexIncludePredicate != null && vertexIncludePredicate.equals(Predicates.alwaysTrue()) == false;}  }
class C{  private Command processFlowRemovedMessage(IOFSwitch sw,OFFlowRemoved flowRemovedMessage){  if (!flowRemovedMessage.getCookie().equals(U64.of(LearningSwitch.LEARNING_SWITCH_COOKIE))) {    return Command.CONTINUE;  }  if (log.isTraceEnabled()) {    log.trace("{} flow entry removed {}",sw,flowRemovedMessage);  }  Match match=flowRemovedMessage.getMatch();  this.removeFromPortMap(sw,match.get(MatchField.ETH_SRC),match.get(MatchField.VLAN_VID) == null ? VlanVid.ZERO : match.get(MatchField.VLAN_VID).getVlanVid());  Match.Builder mb=sw.getOFFactory().buildMatch();  mb.setExact(MatchField.ETH_SRC,match.get(MatchField.ETH_DST)).setExact(MatchField.ETH_DST,match.get(MatchField.ETH_SRC));  if (match.get(MatchField.VLAN_VID) != null) {    mb.setExact(MatchField.VLAN_VID,match.get(MatchField.VLAN_VID));  }  this.writeFlowMod(sw,OFFlowModCommand.DELETE,OFBufferId.NO_BUFFER,mb.build(),match.get(MatchField.IN_PORT));  return Command.CONTINUE;}  }
class C{  private static OptimizedObjectInputStream createIn(){  try {    return new OptimizedObjectInputStream(new GridUnsafeDataInput());  } catch (  IOException e) {    throw new IgniteException("Failed to create object input stream.",e);  }}  }
class C{  public KnowledgeDisplayEdge(DisplayNode node1,Point mouseTrackPoint,int type){  if (node1 == null) {    throw new NullPointerException("Node1 must not be null.");  }  if (mouseTrackPoint == null) {    throw new NullPointerException("Mouse track point must not " + "be null.");  }  if (!(type == FORBIDDEN_EXPLICITLY || type == FORBIDDEN_BY_TIERS || type == REQUIRED || type == REQUIRED_BY_GROUPS || type == FORBIDDEN_BY_GROUPS)) {    throw new IllegalArgumentException();  }  this.node1=node1;  this.mouseTrackPoint=mouseTrackPoint;  this.mode=HALF_ANCHORED;  this.type=type;  resetBounds();}  }
class C{  protected LayoutManager createLayoutManager(){  return new TabbedPaneLayout();}  }
class C{  public static FillStyle build(Paint paint,Rectangle2D bounds,AffineTransform transform){  FillStyle fs=null;  if (paint != null) {    double width=bounds.getWidth();    double height=bounds.getHeight();    if (paint instanceof Color) {      fs=new FillStyle(SwfUtils.colorToInt((Color)paint));    } else     if (paint instanceof GradientPaint) {      GradientPaint gp=(GradientPaint)paint;      AffineTransform gt=objectBoundingBoxTransform(transform.transform(gp.getPoint1(),null),transform.transform(gp.getPoint2(),null),width,height,width,height);      fs=new FillStyle();      fs.matrix=MatrixBuilder.build(gt);      fs.type=FillStyle.FILL_LINEAR_GRADIENT;      fs.gradient=new Gradient();      fs.gradient.records=new GradRecord[2];      fs.gradient.records[0]=new GradRecord(0,SwfUtils.colorToInt(gp.getColor1()));      fs.gradient.records[1]=new GradRecord(255,SwfUtils.colorToInt(gp.getColor2()));    } else     if (paint instanceof LinearGradientPaint) {      LinearGradientPaint lgp=(LinearGradientPaint)paint;      Point2D start=lgp.getStartPoint();      Point2D end=lgp.getEndPoint();      AffineTransform gt=objectBoundingBoxTransform(start,end,width,height,width,height);      fs=new FillStyle();      fs.matrix=MatrixBuilder.build(gt);      Color[] colors=lgp.getColors();      float[] ratios=lgp.getFractions();      if (colors.length == 0 || colors.length != ratios.length) {        return null;      } else       if (colors.length == 1) {        return new FillStyle(SwfUtils.colorToInt(colors[0]));      } else {        fs.type=FillStyle.FILL_LINEAR_GRADIENT;        int len=ratios.length;        if (len > 8)         len=8;        fs.gradient=new Gradient();        fs.gradient.records=new GradRecord[len];        for (int i=0; i < len; i++) {          fs.gradient.records[i]=new GradRecord((int)Math.rint(255 * ratios[i]),SwfUtils.colorToInt(colors[i]));        }      }    } else     if (paint instanceof RadialGradientPaint) {      RadialGradientPaint rgp=(RadialGradientPaint)paint;      double diameter=rgp.getRadius() * 2.0;      double outerX=diameter * rgp.getTransform().getScaleX();      double outerY=diameter * rgp.getTransform().getScaleY();      AffineTransform gt=objectBoundingBoxTransform(null,null,width,height,outerX,outerY);      fs=new FillStyle();      fs.matrix=MatrixBuilder.build(gt);      fs.type=FillStyle.FILL_RADIAL_GRADIENT;      Color[] colors=rgp.getColors();      float[] ratios=rgp.getFractions();      fs.gradient=new Gradient();      fs.gradient.records=new GradRecord[ratios.length <= 8 ? ratios.length : 8];      for (int i=0; i < ratios.length && i < 8; i++) {        fs.gradient.records[i]=new GradRecord((int)Math.rint(255 * ratios[i]),SwfUtils.colorToInt(colors[i]));      }    } else     if (paint instanceof TexturePaint) {      TexturePaint tp=(TexturePaint)paint;      Image image=tp.getImage();      LosslessImage losslessImage=new LosslessImage(image);      int imageWidth=losslessImage.getWidth();      int imageHeight=losslessImage.getHeight();      DefineBitsLossless tag=DefineBitsLosslessBuilder.build(losslessImage.getPixels(),imageWidth,imageHeight);      AffineTransform at=new AffineTransform();      at.setToScale(SwfConstants.TWIPS_PER_PIXEL,SwfConstants.TWIPS_PER_PIXEL);      Matrix matrix=MatrixBuilder.build(at);      fs=new FillStyle(FillStyle.FILL_BITS,matrix,tag);    }  }  return fs;}  }
class C{  private void updateVolumeLabels(Volume trustedSrc,Volume invalidTgt){  VirtualArray invalidTgtVA=dbClient.queryObject(VirtualArray.class,invalidTgt.getVirtualArray());  StringBuilder newLabel=new StringBuilder();  newLabel.append(trustedSrc.getLabel());  newLabel.append("-target-");  newLabel.append(invalidTgtVA.getLabel());  log.info("Revised name for target: " + newLabel.toString());  invalidTgt.setLabel(newLabel.toString());  NamedURI projectURI=invalidTgt.getProject();  projectURI.setName(newLabel.toString());  invalidTgt.setProject(projectURI);  NamedURI tenantURI=invalidTgt.getTenant();  tenantURI.setName(newLabel.toString());  invalidTgt.setTenant(tenantURI);  Volume tgtVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,invalidTgt);  if (tgtVplexVolume != null) {    Volume srcVplexVolume=VPlexSrdfUtil.getVplexVolumeFromSrdfVolume(dbClient,trustedSrc);    if (srcVplexVolume != null) {      newLabel.setLength(0);      newLabel.append(srcVplexVolume.getLabel());      newLabel.append("-target-");      newLabel.append(invalidTgtVA.getLabel());      log.info("Revised name for VPlex target: " + newLabel.toString());      tgtVplexVolume.setLabel(newLabel.toString());      projectURI=tgtVplexVolume.getProject();      projectURI.setName(newLabel.toString());      tgtVplexVolume.setProject(projectURI);      tenantURI=tgtVplexVolume.getTenant();      tenantURI.setName(newLabel.toString());      tgtVplexVolume.setTenant(tenantURI);      dbClient.updateAndReindexObject(tgtVplexVolume);    }  }}  }
class C{  public void skipLine(){  try {    readLine();  } catch (  Exception e) {    LogService.getRoot().log(Level.WARNING,"com.rapidminer.example.table.FileDataRowReader.problem_during_skipping_of_line",e.getMessage());  }}  }
class C{  protected float unwrapValue(Object value){  return ((Float)value).floatValue();}  }
class C{  MDHelper(boolean littleEndian,int lenlen,byte fbyte){  this.littleEndian=littleEndian;  countBuf=new byte[lenlen];  this.fbyte=fbyte;}  }
class C{  public SymbolDigraph(String filename,String delimiter){  st=new ST<String,Integer>();  In in=new In(filename);  while (in.hasNextLine()) {    String[] a=in.readLine().split(delimiter);    for (int i=0; i < a.length; i++) {      if (!st.contains(a[i]))       st.put(a[i],st.size());    }  }  keys=new String[st.size()];  for (  String name : st.keys()) {    keys[st.get(name)]=name;  }  graph=new Digraph(st.size());  in=new In(filename);  while (in.hasNextLine()) {    String[] a=in.readLine().split(delimiter);    int v=st.get(a[0]);    for (int i=1; i < a.length; i++) {      int w=st.get(a[i]);      graph.addEdge(v,w);    }  }}  }
class C{  public void shutDown(){  eventDispatcher.removeAllListeners();  Collection<StunClientTransaction> clientTransactionsToCancel;synchronized (clientTransactions) {    clientTransactionsToCancel=new ArrayList<>(clientTransactions.values());    clientTransactions.clear();  }  for (  StunClientTransaction tran : clientTransactionsToCancel)   tran.cancel();  Collection<StunServerTransaction> serverTransactionsToExpire;synchronized (serverTransactions) {    serverTransactionsToExpire=new ArrayList<>(serverTransactions.values());    serverTransactions.clear();  }  for (  StunServerTransaction tran : serverTransactionsToExpire)   tran.expire();  netAccessManager.stop();}  }
class C{  public boolean removeEdge(Node node1,Node node2){  List<Edge> edges=getEdges(node1,node2);  if (edges.size() > 1) {    throw new IllegalStateException("There is more than one edge between " + node1 + " and "+ node2);  }  numEdges--;  return removeEdges(edges);}  }
class C{  private void updateEffectiveDimensions(){  effectiveWidth=Math.max(0,width - leftBorder - rightBorder);  effectiveHeight=Math.max(0,height - topBorder - bottomBorder);}  }
class C{  public static <T>T lockResult(Future<T> result,String lockPath) throws LockingException {  try {    return Await.result(result);  } catch (  LockingException le) {    throw le;  }catch (  Exception e) {    throw new LockingException(lockPath,"Encountered exception on locking ",e);  }}  }
class C{  public void initialize(Scheduler sched) throws SchedulerConfigException {  this.scheduler=sched;}  }
class C{  @Deprecated public SimpleTriggerImpl(String name,int repeatCount,long repeatInterval){  this(name,null,repeatCount,repeatInterval);}  }
class C{  public T head(){  if (!hasBuffered) {    buffered=iter.next();    hasBuffered=true;  }  return buffered;}  }
class C{  public synchronized void stop(){  fStop=true;}  }
class C{  private void processAutomaticSignIn(){  assert getFirstRunFlowSignInComplete(mActivity);  assert !mHasChildAccount || !mIsAndroidEduDevice;  if (!mIsAndroidEduDevice && !mHasChildAccount)   return;  final Account[] googleAccounts=AccountManagerHelper.get(mActivity).getGoogleAccounts();  SigninManager signinManager=SigninManager.get(mActivity.getApplicationContext());  if (!FeatureUtilities.canAllowSync(mActivity) || !signinManager.isSignInAllowed() || googleAccounts.length != 1)   return;  signinManager.signInToSelectedAccount(mActivity,googleAccounts[0],mSignInType,SigninManager.SIGNIN_SYNC_IMMEDIATELY,mShowSignInNotification,mObserver);}  }
class C{  public int indexOf(Node item){  Node parent=getParent(item);  if (parent == null) {    return getRootItems().indexOf(item);  } else {    return getChildren(parent).indexOf(item);  }}  }
class C{  public float length(){  return Vector3.length(this);}  }
class C{  public void pointerDragged(int[] x,int[] y){  if (x.length > 1) {    double currentDis=distance(x,y);    if (pinchDistance <= 0) {      pinchDistance=currentDis;    }    double scale=currentDis / pinchDistance;    if (pinch((float)scale)) {      return;    }  }  pointerDragged(x[0],y[0]);}  }
class C{  public final void yyclose() throws java.io.IOException {  zzAtEOF=true;  zzEndRead=zzStartRead;  if (zzReader != null)   zzReader.close();}  }
class C{  private void fireTeamResourceChange(final Collection<IResource> changed){  if (changed.size() > 0) {    final IResource[] changedResources=changed.toArray(new IResource[changed.size()]);    fireTeamResourceChange(SubscriberChangeEvent.asSyncChangedDeltas(this,changedResources));  }}  }
class C{  public void testBug24344() throws Exception {  if (!versionMeetsMinimum(4,1)) {    return;  }  super.createTable("testBug24344","(i INT AUTO_INCREMENT, t1 DATETIME, PRIMARY KEY (i)) ENGINE = MyISAM");  Connection conn2=null;  try {    Properties props=new Properties();    props.setProperty("useServerPrepStmts","true");    props.setProperty("useJDBCCompliantTimezoneShift","true");    conn2=super.getConnectionWithProps(props);    this.pstmt=conn2.prepareStatement("INSERT INTO testBug24344 (t1) VALUES (?)");    Calendar c=Calendar.getInstance();    this.pstmt.setTimestamp(1,new Timestamp(c.getTime().getTime()));    this.pstmt.execute();    this.pstmt.close();    conn2.close();    props.setProperty("useServerPrepStmts","false");    props.setProperty("useJDBCCompliantTimezoneShift","true");    props.setProperty("useSSPSCompatibleTimezoneShift","true");    conn2=super.getConnectionWithProps(props);    this.pstmt=conn2.prepareStatement("INSERT INTO testBug24344 (t1) VALUES (?)");    this.pstmt.setTimestamp(1,new Timestamp(c.getTime().getTime()));    this.pstmt.execute();    this.pstmt.close();    conn2.close();    props.setProperty("useServerPrepStmts","false");    props.setProperty("useJDBCCompliantTimezoneShift","false");    props.setProperty("useSSPSCompatibleTimezoneShift","false");    conn2=super.getConnectionWithProps(props);    this.pstmt=conn2.prepareStatement("INSERT INTO testBug24344 (t1) VALUES (?)");    this.pstmt.setTimestamp(1,new Timestamp(c.getTime().getTime()));    this.pstmt.execute();    this.pstmt.close();    Statement s=conn2.createStatement();    this.rs=s.executeQuery("SELECT t1 FROM testBug24344 ORDER BY i ASC");    Timestamp[] dates=new Timestamp[3];    int i=0;    while (this.rs.next()) {      dates[i++]=this.rs.getTimestamp(1);    }    assertEquals("Number of rows should be 3.",3,i);    assertEquals(dates[0],dates[1]);    if (TimeZone.getDefault().getOffset(c.getTimeInMillis()) != 0) {      assertFalse(dates[1].equals(dates[2]));    } else {      assertTrue(dates[1].equals(dates[2]));    }  }  finally {    if (conn2 != null) {      conn2.close();    }  }}  }
class C{  public void zero(){  for (int i=0; i < data.length; i++) {    write(i,0);  }}  }
class C{  public void insertBefore(final AbstractInsnNode location,final AbstractInsnNode insn){  ++size;  AbstractInsnNode prev=location.prev;  if (prev == null) {    first=insn;  } else {    prev.next=insn;  }  location.prev=insn;  insn.next=location;  insn.prev=prev;  cache=null;  insn.index=0;}  }
class C{  @Override public String toString(){  if (getUserObject() instanceof TvShow) {    TvShow tvShow=(TvShow)getUserObject();    return tvShow.getTitle();  }  return super.toString();}  }
class C{  public boolean isShown(){  return snackbar.isShown();}  }
class C{  public AttributeKey(String key,Class<T> clazz){  this(key,clazz,null,true);}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.store=new HashMap();  int keyCount=stream.readInt();  for (int i=0; i < keyCount; i++) {    Comparable key=(Comparable)stream.readObject();    Paint paint=SerialUtilities.readPaint(stream);    this.store.put(key,paint);  }}  }
class C{  public RepeatTimingSpecifier(TimedElement owner,boolean isBegin,float offset,String syncbaseID,int repeatIteration){  super(owner,isBegin,offset,syncbaseID,owner.getRoot().getRepeatEventName());  this.repeatIteration=repeatIteration;  this.repeatIterationSpecified=true;}  }
class C{  public void testDifference(){  DeployableType type=DeployableType.toType("war");  assertTrue(type != DeployableType.EAR);  assertNotSame(DeployableType.EAR,type);}  }
class C{  static void errorClosingTagNotEmpty(String systemID,int lineNr) throws XMLParseException {  throw new XMLParseException(systemID,lineNr,"Closing tag must be empty");}  }
class C{  public CircleBuilder center(double lon,double lat){  return center(new Coordinate(lon,lat));}  }
class C{  public static double[] doubles(double... elements){  return elements;}  }
class C{  @Override public boolean isRunning(){  return !isPaused;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Long(stack.getUIMgrSafe().getVideoFrame().getDurationMillis());}  }
class C{  public Socket createSocket(String host,int port,InetAddress localHost,int localPort) throws IOException, UnknownHostException {  Socket socket=createBoundSocket(new InetSocketAddress(localHost,localPort));  connectSocket(socket,new InetSocketAddress(host,port));  return socket;}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  return new ExceptionsAttribute(newCp,this,classnames);}  }
class C{  public byte[] asn1Encode() throws Asn1Exception, IOException {  DerOutputStream temp=new DerOutputStream();  DerOutputStream bytes=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(pvno));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x00),temp);  temp=new DerOutputStream();  temp.putInteger(BigInteger.valueOf(msgType));  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x01),temp);  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x02),safeBody.asn1Encode());  bytes.write(DerValue.createTag(DerValue.TAG_CONTEXT,true,(byte)0x03),cksum.asn1Encode());  temp=new DerOutputStream();  temp.write(DerValue.tag_Sequence,bytes);  bytes=new DerOutputStream();  bytes.write(DerValue.createTag(DerValue.TAG_APPLICATION,true,(byte)0x14),temp);  return bytes.toByteArray();}  }
class C{  protected void parse(DataInputStream stream) throws Exception {  value=stream.readByte();}  }
class C{  public boolean isIngestedVolumeWithoutBackend(DbClient dbClient){  URI systemURI=getStorageController();  if (systemURI != null) {    StorageSystem system=dbClient.queryObject(StorageSystem.class,systemURI);    if (system != null) {      if (system.getSystemType().equals(DiscoveredSystemObject.Type.vplex.name())) {        StringSet associatedVolumeIds=getAssociatedVolumes();        if ((associatedVolumeIds == null) || (associatedVolumeIds.isEmpty())) {          return true;        }      }    }  }  return false;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  @Override public boolean equals(Object other){  return sameClassAs(other) && func.equals(((FunctionQuery)other).func);}  }
class C{  protected void installDefaults(){  super.installDefaults();  list.setFixedCellHeight(27);}  }
class C{  public DistributedLogClientBuilder serverSet(ServerSet serverSet){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._routingServiceBuilder=RoutingUtils.buildRoutingService(serverSet);  newBuilder._enableRegionStats=false;  return newBuilder;}  }
class C{  public final void connectTarget(boolean secure){  if (this.connected) {    throw new IllegalStateException("Already connected.");  }  this.connected=true;  this.secure=secure;}  }
class C{  private void failTask(Throwable e,TaskState.ResultCode resultCode){  ServiceUtils.logSevere(this,e);  State patchState=buildPatch(TaskState.TaskStage.FAILED,e);  patchState.taskState.resultCode=resultCode;  TaskUtils.sendSelfPatch(this,patchState);}  }
class C{  private void handleSingle(@NonNull String permissionName){  if (permissionExists(permissionName)) {    if (!permissionName.equalsIgnoreCase(Manifest.permission.SYSTEM_ALERT_WINDOW)) {      if (isPermissionDeclined(permissionName)) {        if (isExplanationNeeded(permissionName)) {          permissionCallback.onPermissionNeedExplanation(permissionName);        } else {          ActivityCompat.requestPermissions(context,new String[]{permissionName},REQUEST_PERMISSIONS);        }      } else {        permissionCallback.onPermissionPreGranted(permissionName);      }    } else {      requestSystemAlertPermission();    }  } else {    permissionCallback.onPermissionDeclined(new String[]{permissionName});  }}  }
class C{  OneStepIteratorForward(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis);  int firstStepPos=OpMap.getFirstChildPos(opPos);  m_axis=WalkerFactory.getAxisFromStep(compiler,firstStepPos);}  }
class C{  public void addConfiguredModule(Module module){  this.moduleSet.addConfiguredModule(module);}  }
class C{  private int measureShort(int measureSpec){  int result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * mRadius + getPaddingTop() + getPaddingBottom() + 1);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  void replaceSetContentView(StmtBody stmtBody,Stmt stmt){  Chain<Unit> units=stmtBody.getUnits();  if (stmt.getInvokeExpr() instanceof InstanceInvokeExpr) {    InstanceInvokeExpr iInvokeExpr=(InstanceInvokeExpr)stmt.getInvokeExpr();    Integer intId;    ValueBox objectBox=iInvokeExpr.getBaseBox();    ValueBox idBox=iInvokeExpr.getArgBox(0);    try {      intId=new Integer(idBox.getValue().toString());    } catch (    Exception ex) {      logger.info("Couldn't replace findViewById(): {} ",stmt);      AnalysisReport.v().addEntry("Could not replace setContentView because it was called with a non-constant arg",stmt,AnalysisReport.Level.ELEVATED);      return;    }    if (ResourcesSoot.isAndroidId(intId)) {      logger.info("android builtin IDs, ignored ");      return;    }    SootMethod method=ResourcesSoot.v().lookupInitLayout_ID(intId);    if (method == null) {      logger.warn("NOT replacing {}, id={} ",stmt,String.format("0x%x",intId));      AnalysisReport.v().addEntry("Could not replace setContentView because could not find resource",stmt,AnalysisReport.Level.ELEVATED);      return;    }    Expr invokeExpr=Jimple.v().newStaticInvokeExpr(method.makeRef(),objectBox.getValue());    Stmt invokeStmt=Jimple.v().newInvokeStmt(invokeExpr);    logger.info("replacing {} ",stmt);    try {      units.swapWith(stmt,invokeStmt);      logger.info("with {} => OK",invokeStmt);    } catch (    Exception ex) {      logger.warn("Replacing with {} => NOT OK",invokeStmt);      AnalysisReport.v().addEntry("Could not replace setContentView because of unknown error",stmt,AnalysisReport.Level.ELEVATED);    }  }}  }
class C{  public void addConnection(Connection conn){  matchingLists[conn.getType()].addConnection(conn);}  }
class C{  public void triggerNotificationsForInvalidateUnregisteredBusinessObjectData(BusinessObjectDataInvalidateUnregisteredResponse businessObjectDataInvalidateUnregisteredResponse){  for (  BusinessObjectData businessObjectData : businessObjectDataInvalidateUnregisteredResponse.getRegisteredBusinessObjectDataList()) {    triggerNotificationsForCreateBusinessObjectData(businessObjectData);  }}  }
class C{  public static _ScheduleStateEnum fromString(final String value) throws SOAPSerializationException {  return (_ScheduleStateEnum)Enumeration.fromString(value,_ScheduleStateEnum.VALUES_TO_INSTANCES);}  }
class C{  protected Cookie decodeCookie(String cookieString){  byte[] bytes=hexStringToByteArray(cookieString);  ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(bytes);  Cookie cookie=null;  try {    ObjectInputStream objectInputStream=new ObjectInputStream(byteArrayInputStream);    cookie=((SerializableCookie)objectInputStream.readObject()).getCookie();  } catch (  IOException e) {    AsyncHttpClient.log.d(LOG_TAG,"IOException in decodeCookie",e);  }catch (  ClassNotFoundException e) {    AsyncHttpClient.log.d(LOG_TAG,"ClassNotFoundException in decodeCookie",e);  }  return cookie;}  }
class C{  protected void prepareCircle(OMCircle circle){  rrAttributes.setTo(circle);}  }
class C{  @Override public boolean onEntitySwing(EntityLivingBase entityLiving,ItemStack stack){  final EntityPlayer player=entityLiving instanceof EntityPlayer ? ((EntityPlayer)entityLiving) : null;  entityLiving.worldObj.playSound(player,entityLiving.posX,entityLiving.posY,entityLiving.posZ,soundEvent,SoundCategory.PLAYERS,0.5F,1.0f);  return false;}  }
class C{  public boolean isManual(){  Object oo=get_Value(COLUMNNAME_IsManual);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private boolean isIPTResourceFolder(File dir){  if (dir.exists() && dir.isDirectory()) {    File persistenceFile=new File(dir,PERSISTENCE_FILE);    File emlFile=new File(dir,DataDir.EML_XML_FILENAME);    return persistenceFile.isFile() && emlFile.isFile();  }  return false;}  }
class C{  public String decodeHex(String hash){  String result="";  long[] numbers=this.decode(hash);  for (  long number : numbers) {    result+=Long.toHexString(number).substring(1);  }  return result;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION___IS_VALID_SIMPLE_ASSIGNMENT_TARGET:    return isValidSimpleAssignmentTarget();case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION___IS_PARAMETERIZED:  return isParameterized();}return super.eInvoke(operationID,arguments);}  }
class C{  private float wittenBell(int[] ngram,int ngramOrder){  int end=ngram.length;  double p=p0;  int MAX_QCOUNT=getCount(ngram,ngram.length - 1,ngram.length,maxQ);  if (MAX_QCOUNT == 0)   return (float)p;  double pML=Math.log(unQuantize(MAX_QCOUNT)) - numTokens;  p=logAdd(p,(lambda0 + pML));  if (ngram.length == 1) {    return (float)p;  }  for (int i=end - 2; i >= end - ngramOrder && i >= 0; i--) {    int historyCnt=getCount(ngram,i,end,MAX_QCOUNT);    if (historyCnt == 0) {      return (float)p;    }    int historyTypesAfter=getTypesAfter(ngram,i,end,historyCnt);    double HC=unQuantize(historyCnt);    double HTA=1 + unQuantize(historyTypesAfter);    double lambda=Math.log(HTA) - Math.log(HTA + HC);    double oneMinusLambda=Math.log(HC) - Math.log(HTA + HC);    p+=oneMinusLambda;    int wordCount=getCount(ngram,i + 1,end,historyTypesAfter);    double WC=unQuantize(wordCount);    if (WC == 0)     return (float)p;    p=logAdd(p,lambda + Math.log(WC) - Math.log(HC));    MAX_QCOUNT=wordCount;  }  return (float)p;}  }
class C{  public static TypeReference newTypeParameterReference(int sort,int paramIndex){  return new TypeReference((sort << 24) | (paramIndex << 16));}  }
class C{  private void callLegHasChanged() throws PayloadException, NetworkException {  if (mMultipartyCall | mCallHold) {    mImsModule.getRichcallService().terminateAllSessions();  }  if (sContact != null) {    requestCapabilities(sContact);  }}  }
class C{  @SuppressWarnings("unchecked") public E valueAt(int index){  if (mGarbage) {    gc();  }  return (E)mValues[index];}  }
class C{  public SquaringFilter(){}  }
class C{  private void access(Annotation label){  if (label != null) {    Default value=(Default)label;    required=value.required();    access=value.value();  }}  }
class C{  @Override protected void finalize() throws Throwable {  try {    this.clear();  } catch (  Throwable e) {  }  mCamera=null;  mInternalCameraListener=null;  mElements=null;  mView=null;  mCollisionData=null;  mMatrixGrabber=null;  mModelMatrix=mProjectionMatrix=null;  mViewport=null;  mPosition=null;  super.finalize();}  }
class C{  public Builder withTextColor(@ColorInt int textColor){  this.textColor=textColor;  return this;}  }
class C{  public boolean satisfiedBasedOnChildrenValues(boolean[] childValues){  boolean result=!this.isSome;  if (this.isSome) {    for (int i=0; i < childValues.length; i++) {      result=result || childValues[i];    }  } else {    for (int i=0; i < childValues.length; i++) {      result=result && childValues[i];    }  }  return result;}  }
class C{  protected void addToDocument(GlobalFeature feature,Document document,String featureFieldName){  document.add(new StoredField(featureFieldName,feature.getByteArrayRepresentation()));}  }
class C{  public UncheckedExecutionException(@Nullable Throwable cause){  super(cause);}  }
class C{  public CActionInitialCallgraphSettings(final JFrame parent){  super("Initial Call graph Settings");  m_parent=Preconditions.checkNotNull(parent,"IE01844: Parent argument can not be null");  putValue(MNEMONIC_KEY,(int)"HK_MENU_INITIAL_CALLGRAPH_SETTINGS".charAt(0));}  }
class C{  public Server(){  _message_queue=new FileQueue();  _transactions=new HashMap();  _listeners=new HashMap();}  }
class C{  public static String formatElapsedTime(long time){  if (time < 0) {    return "-";  }  long hours=0;  long minutes=0;  long seconds=0;  long elapsedSeconds=(long)(time * UnitConversions.MS_TO_S);  if (elapsedSeconds >= 3600) {    hours=elapsedSeconds / 3600;    elapsedSeconds-=hours * 3600;  }  if (elapsedSeconds >= 60) {    minutes=elapsedSeconds / 60;    elapsedSeconds-=minutes * 60;  }  seconds=elapsedSeconds;  if (hours > 0) {    return String.format(Locale.US,"%d:%02d:%02d",hours,minutes,seconds);  } else {    return String.format(Locale.US,"%02d:%02d",minutes,seconds);  }}  }
class C{  public void endBucketCreation(){  sendProfileUpdate();}  }
class C{  public boolean isPersistedToDisk(){  return persistedToDisk;}  }
class C{  private ZyCodeNodeBuilder(){}  }
class C{  private void checkMatrixDimensions(jMatrix B){  if (B.m != m || B.n != n) {    throw new IllegalArgumentException("Matrix dimensions must agree.");  }}  }
class C{  public VersionParseException(final int location){  super("Token couldn't be parsed as a valid number.",location);}  }
class C{  public static String encodeObject(java.io.Serializable serializableObject) throws java.io.IOException {  return encodeObject(serializableObject,NO_OPTIONS);}  }
class C{  public void println(PrintWriter w){  Printer.print(this,w);}  }
class C{  public JsonNode putAll(ObjectNode other){  int len=other.size();  if (len > 0) {    if (_children == null) {      _children=new LinkedHashMap<String,JsonNode>(len);    }    other.putContentsTo(_children);  }  return this;}  }
class C{  public boolean isSegmented() throws SQLException {  byte[] info=getInfo(new byte[]{ISCConstants.isc_info_blob_type},20);  if (info[0] != ISCConstants.isc_info_blob_type)   throw new FBSQLException("Cannot determine BLOB type");  int dataLength=VaxEncoding.iscVaxInteger(info,1,2);  int type=VaxEncoding.iscVaxInteger(info,3,dataLength);  return type == ISCConstants.isc_bpb_type_segmented;}  }
class C{  void loadFieldIds() throws IOException {  int count=mHeaderItem.fieldIdsSize;  mFieldIds=new FieldIdItem[count];  seek(mHeaderItem.fieldIdsOff);  for (int i=0; i < count; i++) {    mFieldIds[i]=new FieldIdItem();    mFieldIds[i].classIdx=readShort() & 0xffff;    mFieldIds[i].typeIdx=readShort() & 0xffff;    mFieldIds[i].nameIdx=readInt();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.506 -0500",hash_original_method="10930ECAA546E890A142B67C44E349E2",hash_generated_method="10930ECAA546E890A142B67C44E349E2") void requery(){  if (mClosed) {    throw new IllegalStateException("requerying a closed cursor");  }  compileAndbindAllArgs();}  }
class C{  public static ByteBuffer positionAtRowHeader(RowState rowState,RowIdImpl rowId) throws IOException {  ByteBuffer rowBuffer=rowState.setHeaderRow(rowId);  if (rowState.isAtHeaderRow()) {    return rowBuffer;  }  if (!rowState.isValid()) {    rowState.setStatus(RowStateStatus.AT_HEADER);    return null;  }  short rowStart=rowBuffer.getShort(getRowStartOffset(rowId.getRowNumber(),rowState.getTable().getFormat()));  RowStatus rowStatus=RowStatus.NORMAL;  if (isDeletedRow(rowStart)) {    rowStatus=RowStatus.DELETED;  } else   if (isOverflowRow(rowStart)) {    rowStatus=RowStatus.OVERFLOW;  }  rowState.setRowStatus(rowStatus);  rowState.setStatus(RowStateStatus.AT_HEADER);  return rowBuffer;}  }
class C{  public void removeEventListener(OneToOneChatListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IOneToOneChatListener> weakRef=mOneToOneChatListeners.remove(listener);    if (weakRef == null) {      return;    }    IOneToOneChatListener rcsListener=weakRef.get();    if (rcsListener != null) {      mApi.removeEventListener2(rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static boolean occlusionTest(IMultipart part,IMultipartContainer container){  return container.occlusionTest(part);}  }
class C{  public static <K,V>SortedMap<K,V> synchronizedSortedMap(SortedMap<K,V> map){  if (map == null) {    throw new NullPointerException("map == null");  }  return new SynchronizedSortedMap<K,V>(map);}  }
class C{  void sendNotification(Date timeStamp,TimerNotification notification){  if (TIMER_LOGGER.isLoggable(Level.FINER)) {    StringBuilder strb=new StringBuilder().append("sending timer notification:").append("\n\tNotification source = ").append(notification.getSource()).append("\n\tNotification type = ").append(notification.getType()).append("\n\tNotification ID = ").append(notification.getNotificationID()).append("\n\tNotification date = ").append(timeStamp);    TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"sendNotification",strb.toString());  }  long curSeqNumber;synchronized (this) {    sequenceNumber=sequenceNumber + 1;    curSeqNumber=sequenceNumber;  }synchronized (notification) {    notification.setTimeStamp(timeStamp.getTime());    notification.setSequenceNumber(curSeqNumber);    this.sendNotification((TimerNotification)notification.cloneTimerNotification());  }  TIMER_LOGGER.logp(Level.FINER,Timer.class.getName(),"sendNotification","timer notification sent");}  }
class C{  public DuplicateEventException(String message,ApplicationExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  public ASN1ValueCollection(int tagNumber,ASN1Type type){  super(tagNumber);  this.type=type;}  }
class C{  public static void main(String[] args){  try {    SAXCLIParameters params=new SAXCLIParameters();    JCommander jct=new JCommander(params,args);    if (0 == args.length) {      jct.usage();    } else {      StringBuffer sb=new StringBuffer(1024);      sb.append("SAX CLI converter v.1").append(CR);      sb.append("parameters:").append(CR);      sb.append("  input file:                  ").append(SAXCLIParameters.IN_FILE).append(CR);      sb.append("  output file:                 ").append(SAXCLIParameters.OUT_FILE).append(CR);      sb.append("  SAX sliding window size:     ").append(SAXCLIParameters.SAX_WINDOW_SIZE).append(CR);      sb.append("  SAX PAA size:                ").append(SAXCLIParameters.SAX_PAA_SIZE).append(CR);      sb.append("  SAX alphabet size:           ").append(SAXCLIParameters.SAX_ALPHABET_SIZE).append(CR);      sb.append("  SAX numerosity reduction:    ").append(SAXCLIParameters.SAX_NR_STRATEGY).append(CR);      sb.append("  SAX normalization threshold: ").append(SAXCLIParameters.SAX_NORM_THRESHOLD).append(CR);      sb.append("  threads to use:              ").append(SAXCLIParameters.THREADS_NUM).append(CR);      String dataFName=SAXCLIParameters.IN_FILE;      double[] ts=TSProcessor.readFileColumn(dataFName,0,0);      Integer slidingWindowSize=Integer.valueOf(SAXCLIParameters.SAX_WINDOW_SIZE);      Integer paaSize=Integer.valueOf(SAXCLIParameters.SAX_PAA_SIZE);      Integer alphabetSize=Integer.valueOf(SAXCLIParameters.SAX_ALPHABET_SIZE);      NumerosityReductionStrategy nrStrategy=SAXCLIParameters.SAX_NR_STRATEGY;      Double nThreshold=SAXCLIParameters.SAX_NORM_THRESHOLD;      NormalAlphabet na=new NormalAlphabet();      SAXProcessor sp=new SAXProcessor();      Integer threadsNum=1;      SAXRecords res=null;      if (args.length > 6) {        threadsNum=Integer.valueOf(args[6]);      }      if (threadsNum > 1) {        ParallelSAXImplementation ps=new ParallelSAXImplementation();        res=ps.process(ts,threadsNum,slidingWindowSize,paaSize,alphabetSize,nrStrategy,nThreshold);      } else {        res=sp.ts2saxViaWindow(ts,slidingWindowSize,paaSize,na.getCuts(alphabetSize),nrStrategy,nThreshold);      }      ArrayList<Integer> indexes=new ArrayList<Integer>();      indexes.addAll(res.getIndexes());      Collections.sort(indexes);      BufferedWriter bw=new BufferedWriter(new FileWriter(new File(SAXCLIParameters.OUT_FILE)));      for (      Integer idx : indexes) {        bw.write(idx + COMMA + String.valueOf(res.getByIndex(idx).getPayload())+ CR);      }      bw.close();    }  } catch (  IOException|SAXException e) {    System.err.println("error occured while parsing parameters " + Arrays.toString(args) + CR+ StackTrace.toString(e));    System.exit(-1);  }}  }
class C{  protected void sequence_NullType(ISerializationContext context,NullType semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,TypesPackage.Literals.IDENTIFIABLE_ELEMENT__NAME));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getNullTypeAccess().getNameNullKeyword_1_0(),semanticObject.getName());  feeder.finish();}  }
class C{  private State buildPatch(TaskState.TaskStage stage,TaskState.SubStage subStage,Throwable e){  State s=new State();  s.taskInfo=new TaskState();  s.taskInfo.stage=stage;  s.taskInfo.subStage=subStage;  if (e != null) {    s.taskInfo.failure=Utils.toServiceErrorResponse(e);  }  return s;}  }
class C{  public int readUnsignedFixedPoint1616(){  int result=(data[position++] & 0xFF) << 8 | (data[position++] & 0xFF);  position+=2;  return result;}  }
class C{  public void moveTo(float x,float y){  mPoints.add(PathPoint.moveTo(x,y));}  }
class C{  @Override public void remove(int origOffset,int length) throws BadLocationException {  log.finest("Offset=" + origOffset + " Length="+ length);  if (origOffset < 0 || length < 0)   throw new IllegalArgumentException("MDocNumber.remove - invalid argument");  int offset=origOffset;  if (length != 1) {    super.remove(offset,length);    return;  }  String content=getText();  if (content.indexOf(m_groupingSeparator) != -1) {    StringBuffer result=new StringBuffer();    for (int i=0; i < content.length(); i++) {      if (content.charAt(i) == m_groupingSeparator && i != origOffset) {        if (i < offset)         offset--;      } else       result.append(content.charAt(i));    }    super.remove(0,content.length());    super.insertString(0,result.toString(),null);    m_tc.setCaretPosition(offset);  }  super.remove(offset,length);}  }
class C{  private Map<String,String> projectParameters(){  Map<String,String> parameters=dataObject.getSource().getParameters();  if (parameters == null) {    parameters=new HashMap<>();    dataObject.getSource().setParameters(parameters);  }  return parameters;}  }
class C{  public boolean acceptReceiving(DTNHost from,DTNHost to,Message m){  if (!checkMcbConditions(to.getComBus(),true)) {    return false;  }  int myAddr=to.getAddress();  if (!(checkSimplePolicy(m.getTo(),this.toReceivePolicy,myAddr) && checkSimplePolicy(m.getFrom(),this.fromReceivePolicy,myAddr))) {    return false;  }  if (m.getTo() != to && !checkHopCountPolicy(m,this.hopCountReceivePolicy)) {    return false;  }  return true;}  }
class C{  public static void resetParams(){  Debug=false;  SpecOption=false;  MyspecOption=false;  Spec2Option=false;  Myspec2Option=false;  SpecFile="";  WriteASTFlag=false;  LabelFlag=false;  ReportLabelsFlag=false;  LabelRoot="Lbl_";  FairnessOption="";  FairAlgorithm=false;  CheckTermination=false;  Nocfg=false;  NoDoneDisjunct=false;  optionsInFile=false;  versionOption=null;  inputVersionNumber=VersionToNumber(PcalParams.version);  PcalTLAGen.wrapColumn=78;  PcalTLAGen.ssWrapColumn=45;  tlaPcalMapping=null;}  }
class C{  private void goToUrl(String url){  Uri uriUrl=Uri.parse(url);  Intent launchBrowser=new Intent(Intent.ACTION_VIEW,uriUrl);  startActivity(launchBrowser);}  }
class C{  public int removeDownloads(long... ids){  if (ids == null || ids.length == 0) {    throw new IllegalArgumentException("called with nothing to remove. input param 'ids' can't be null");  }  ContentValues values=new ContentValues();  values.put(DownloadContract.Downloads.COLUMN_DELETED,1);  if (ids.length == 1) {    return contentResolver.update(ContentUris.withAppendedId(baseUri,ids[0]),values,null,null);  }  return contentResolver.update(baseUri,values,getWhereClauseFor(ids,DownloadContract.Downloads._ID),longArrayToStringArray(ids));}  }
class C{  @Override public void shutdownForcely(){  AndroidDebugBridge.disconnectBridge();  AndroidDebugBridge.terminate();}  }
class C{  public cudaDeviceProp(){}  }
class C{  public static boolean remount(String file,String mountType){  Remounter remounter=new Remounter();  return (remounter.remount(file,mountType));}  }
class C{  private void addCliArguments(JvmLauncher java){  String host=getConfiguration().getPropertyValue(GeneralPropertySet.HOSTNAME);  String port=getConfiguration().getPropertyValue(JBossPropertySet.JBOSS_MANAGEMENT_HTTP_PORT);  java.setJarFile(new File(getHome(),"jboss-modules.jar"));  String modules=getConfiguration().getPropertyValue(JBossPropertySet.ALTERNATIVE_MODULES_DIR);  if (!new File(modules).isAbsolute()) {    modules=getFileHandler().append(getHome(),modules);  }  java.addAppArguments("-mp",modules,"org.jboss.as.cli");  if (isOnline()) {    java.addAppArguments("--connect","--controller=" + host + ":"+ port);  }}  }
class C{  public static String slurpGBURL(URL u) throws IOException {  return slurpURL(u,"GB18030");}  }
class C{  public static void isRelativeUrl(String member,String value,String baseUrl,boolean flag) throws ValidationException {  if (!flag) {    if (value == null || value.trim().length() == 0) {      return;    }  }  boolean throwException=true;  if ((value != null) && value.startsWith("/")) {    String tempAbsoluteUrl="http://xy".concat(value);    if (ADMValidator.isUrl(tempAbsoluteUrl)) {      throwException=false;    }  }  if (throwException) {    ValidationException vf=new ValidationException(ReasonEnum.RELATIVE_URL,member,new Object[]{value});    logValidationFailure(vf);    throw vf;  }  isDescription(member,baseUrl + value,flag);}  }
class C{  public static <T>T withReader(URL url,@ClosureParams(value=SimpleType.class,options="java.io.Reader") Closure<T> closure) throws IOException {  return IOGroovyMethods.withReader(url.openConnection().getInputStream(),closure);}  }
class C{  @Override public void Fo(final Object e,final FormObject formObj){  if (showMethods) {    System.out.println("DefaultActionHandler.Fo()");  }  javascript.execute(formObj,PdfDictionary.Fo,ActionHandler.FOCUS_EVENT,' ');}  }
class C{  private void reloadTiles(){  if (debug)   System.out.println("TileType was changed, reloading tiles.");  clearTiles();  loadTiles();}  }
class C{  void extras(){}  }
class C{  public Boolean isThin(){  return thin;}  }
class C{  public boolean foundUsefulAttribute(){  return (m_attributeIndex != -1);}  }
class C{  public boolean isPubKeyCanonical(){  return isPubKeyCanonical(pub);}  }
class C{  public InExpression(boolean isNotIn){  this.notIn=isNotIn;}  }
class C{  protected List<T> createPopupList(){  List<T> l=new List<T>(getModel());  l.setCommandList(isCommandList());  l.setSmoothScrolling(isSmoothScrolling());  l.setFixedSelection(getFixedSelection());  l.setListCellRenderer(getRenderer());  l.setItemGap(getItemGap());  l.setUIID("ComboBoxList");  if (getUIManager().isThemeConstant("otherPopupRendererBool",false)) {    DefaultListCellRenderer renderer=new DefaultListCellRenderer();    renderer.setUIID("PopupItem");    renderer.getListFocusComponent(l).setUIID("PopupFocus");    l.setListCellRenderer(renderer);  }  return l;}  }
class C{  public static DepGraphEdge findInputEdge(DepGraphNode n,Operand op){  for (DepGraphEdge inEdge=(DepGraphEdge)n.firstInEdge(); inEdge != null; inEdge=(DepGraphEdge)inEdge.getNextIn()) {    if (inEdge.destOperand() == op) {      return inEdge;    }  }  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:21.265 -0400",hash_original_method="D7C4BC88C6659B291F078CA33E2EF349",hash_generated_method="241FB6143D16409D34DFFAEAADC71973") final V doRemove(Object okey,Object value){  Comparable<? super K> key=comparable(okey);  for (; ; ) {    Node<K,V> b=findPredecessor(key);    Node<K,V> n=b.next;    for (; ; ) {      if (n == null)       return null;      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      int c=key.compareTo(n.key);      if (c < 0)       return null;      if (c > 0) {        b=n;        n=f;        continue;      }      if (value != null && !value.equals(v))       return null;      if (!n.casValue(v,null))       break;      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(key); else {        findPredecessor(key);        if (head.right == null)         tryReduceLevel();      }      return (V)v;    }  }}  }
class C{  public static IStatus validateFieldName(String name,String sourceLevel,String complianceLevel){  return validateIdentifier(name,sourceLevel,complianceLevel);}  }
class C{  public static void quietAndWarn(IgniteLogger log,Object msg,Object shortMsg){  warn(log,msg);  if (log.isQuiet())   quiet(false,shortMsg);}  }
class C{  public synchronized void openDriver(SurfaceHolder holder) throws IOException {  Camera theCamera=camera;  if (theCamera == null) {    theCamera=new OpenCameraManager().build().open();    if (theCamera == null) {      throw new IOException();    }    camera=theCamera;  }  theCamera.setPreviewDisplay(holder);  if (!initialized) {    initialized=true;    configManager.initFromCameraParameters(theCamera);    if (requestedFramingRectWidth > 0 && requestedFramingRectHeight > 0) {      setManualFramingRect(requestedFramingRectWidth,requestedFramingRectHeight);      requestedFramingRectWidth=0;      requestedFramingRectHeight=0;    }  }  Camera.Parameters parameters=theCamera.getParameters();  String parametersFlattened=parameters == null ? null : parameters.flatten();  try {    configManager.setDesiredCameraParameters(theCamera,false);  } catch (  RuntimeException re) {    Log.w(TAG,"Camera rejected parameters. Setting only minimal safe-mode parameters");    Log.i(TAG,"Resetting to saved camera params: " + parametersFlattened);    if (parametersFlattened != null) {      parameters=theCamera.getParameters();      parameters.unflatten(parametersFlattened);      try {        theCamera.setParameters(parameters);        configManager.setDesiredCameraParameters(theCamera,true);      } catch (      RuntimeException re2) {        Log.w(TAG,"Camera rejected even safe-mode parameters! No configuration");      }    }  }}  }
class C{  protected void fireDataStatusEEvent(ValueNamePair errorLog){  if (errorLog != null)   fireDataStatusEEvent(errorLog.getValue(),errorLog.getName(),true);}  }
class C{  public void processBytes(byte[] in,int inOff,int len){  if (len == 0) {    return;  }  if (len < 0) {    throw new IllegalArgumentException("Can't have a negative input length!");  }  if (bufOff + len > buf.length) {    throw new DataLengthException("attempt to process message too long for cipher");  }  System.arraycopy(in,inOff,buf,bufOff,len);  bufOff+=len;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private static char[] randomPassword(){  char[] pass=new char[32];  for (int i=0; i < 31; i++)   pass[i]=(char)secureRandom.nextInt();  pass[31]='Z';  return pass;}  }
class C{  public FakeClock(ReadableInstant now){  baseTimeMs=now.getMillis();  fakeNowMs=new AtomicLong(baseTimeMs);}  }
class C{  public static MRequisitionLine[] forC_OrderLine_ID(Properties ctx,int C_OrderLine_ID,String trxName){  final String whereClause=COLUMNNAME_C_OrderLine_ID + "=?";  List<MRequisitionLine> list=new Query(ctx,I_M_RequisitionLine.Table_Name,whereClause,trxName).setParameters(C_OrderLine_ID).list();  return list.toArray(new MRequisitionLine[list.size()]);}  }
class C{  public void add(long duration){  setMillis(FieldUtils.safeAdd(getMillis(),duration));}  }
class C{  protected String buildURL(String action,Node remote,Node local,String securityToken,String registrationUrl) throws IOException {  String url=addSecurityToken((resolveURL(remote.getSyncUrl(),registrationUrl) + "/" + action),"&",local.getNodeId(),securityToken);  log.debug("Building transport url: {}",url);  return url;}  }
class C{  public boolean isCoinBase(){  return getInputs().size() == 1 && getInput(0).getSource().getTransactionId().equals(TID.INVALID);}  }
class C{  public ChooserIntentBuilder(Context context,Class<? extends BottomSheetChooserActivity> activityClass){  mIntent=new Intent(context,activityClass);}  }
class C{  public final boolean regionMatches(int toffset,CharSequence other,int ooffset,int len){  return toString().regionMatches(toffset,other.toString(),ooffset,len);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.writeObject(mapType);  out.writeInt(num);  for (  Entry e : this) {    out.writeObject(e.getKey());    out.writeDouble(e.getValue());  }}  }
class C{  private void addCRLToWorkingList(String crlURLString,Collection<Object> crlCollection) throws CrlDownloadException {  if (logger.isDebugEnabled()) {    logger.debug("Adding CRL: " + crlURLString);  }  X509CRL crlImpl=null;  IdmCrlCache crlCache=TenantCrlCache.get().get(this.tenantName);  if (crlCache == null) {    crlCache=new IdmCrlCache();    TenantCrlCache.get().put(this.tenantName,crlCache);  }  crlImpl=crlCache.get(crlURLString);  if (crlImpl == null) {    crlImpl=IdmCrlCache.downloadCrl(crlURLString);    if (null != crlImpl) {      crlCache.put(crlURLString,crlImpl);    }  }  if (crlImpl != null) {    crlCollection.add(crlImpl);  }}  }
class C{  public void initialize(CharSequence input,int begin,int end){  this.input=input;  this.send=end;  this.matcher.reset(input).region(begin,end);  this.index=begin;  advance();}  }
class C{  public boolean isComputeMultiInfoCoherence(){  return computeMultiInfoCoherence;}  }
class C{  public void addFilterCode(String name,String code){  this.filterCode=new SourceCode(name,code);  newSourceCode(name,code);}  }
class C{  private void handleFlush(DataInput topIn,DataOutput topOut,BufferedOutputStream bos) throws IOException {  Thread.currentThread().setName("flush");  int atLeastMarkerCount=topIn.readVInt();  int[] replicaTCPPorts;  int[] replicaIDs;synchronized (this) {    replicaTCPPorts=this.replicaTCPPorts;    replicaIDs=this.replicaIDs;  }  message("now flush; " + replicaIDs.length + " replicas");  if (flushAndRefresh()) {    verifyAtLeastMarkerCount(atLeastMarkerCount,null);    long version=getCopyStateVersion();    message("send flushed version=" + version);    topOut.writeLong(version);    bos.flush();    for (int i=0; i < replicaIDs.length; i++) {      int replicaID=replicaIDs[i];      try (Connection c=new Connection(replicaTCPPorts[i])){        message("send NEW_NRT_POINT to R" + replicaID + " at tcpPort="+ replicaTCPPorts[i]);        c.out.writeByte(SimpleReplicaNode.CMD_NEW_NRT_POINT);        c.out.writeVLong(version);        c.out.writeVLong(primaryGen);        c.out.writeInt(tcpPort);        c.flush();      } catch (      Throwable t) {        message("top: failed to connect R" + replicaID + " for newNRTPoint; skipping: "+ t.getMessage());      }    }  } else {    topOut.writeLong(-getCopyStateVersion());  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null) {    myHost.updateProgress(progress);  } else {    System.out.println("Progress: " + progress + "%");  }}  }
class C{  @Override protected boolean shouldComposeCreationImage(){  return true;}  }
class C{  @Override protected void insertText(final String text,final NotificationType type){  final StringBuilder sbuf=new StringBuilder();  sbuf.append("<span class='");  sbuf.append(type.getMnemonic());  sbuf.append("'>");  sbuf.append(translateToHTML(text));  sbuf.append("</span>");  appendString(sbuf.toString());}  }
class C{  public static void e(String tag,String msg,Object... args){  if (sLevel > LEVEL_ERROR) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.e(tag,msg);}  }
class C{  private String resolve(String className){  String qualifiedName;  Class<?> resolved=null;  if (pkgName.isEmpty()) {    qualifiedName=className;    resolved=loadClass(qualifiedName);    if (resolved == null) {      qualifiedName="java.lang." + className;      resolved=loadClass(qualifiedName);    }  } else {    qualifiedName=pkgName + "." + className;    resolved=loadClass(qualifiedName);    if (resolved == null) {      qualifiedName=className;      resolved=loadClass(qualifiedName);    }  }  if (resolved == null) {    for (    String declName : imports) {      qualifiedName=mergeImport(declName,className);      if (qualifiedName != null) {        return qualifiedName;      }    }    return className;  }  return qualifiedName;}  }
class C{  public void testSingleMultiPointRoundTrip() throws SQLException {  PointGenerator pgc=new PointGenerator();  pgc.setGeometryFactory(geometryFactory);  MultiGenerator pg=new MultiGenerator(pgc);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberGeometries(3);  pg.setGeometryFactory(geometryFactory);  MultiPoint pt=(MultiPoint)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  MultiPoint pt2=(MultiPoint)or.read(st);  assertTrue("The input MultiPoint is not the same as the output MultiPoint",pt.equals(pt2));}  }
class C{  public SymbolTable(){  this(TABLE_SIZE);}  }
class C{  public void swap(int i,int j){  x.assertTrue(i < list.size());  x.assertTrue(j < list.size());  list.set(i,list.set(j,list.get(i)));}  }
class C{  @Override public void evict(String key){  key=safetyKey(key);  final File file=new File(cacheDirectory,key);  file.delete();}  }
class C{  @SuppressWarnings("try") private void logIrreducibleLoops(){  try (Debug.Scope s=Debug.scope("IrreducibleLoops")){    if (Debug.isLogEnabled(Debug.BASIC_LOG_LEVEL) && irreducibleLoopSwitch != null) {      StringBuilder msg=new StringBuilder("Inserted state machine to remove irreducible loops. Dispatching to the following states: ");      String sep="";      for (int i=0; i < irreducibleLoopSwitch.keyCount(); i++) {        msg.append(sep).append(irreducibleLoopSwitch.keyAt(i).asInt());        sep=", ";      }      Debug.log(Debug.BASIC_LOG_LEVEL,"%s",msg);    }  } }  }
class C{  public SourceCode subCFMLString(int start){  return subCFMLString(start,text.length - start);}  }
class C{  protected InnerBuilder replaceHeader(String key,String value){  String url=NULL_KEY_FOR_URL;  addOrReplaceWithUrl(url,key,value,true);  return this;}  }
class C{  public StatechartSpecification createStatechartSpecification(){  StatechartSpecificationImpl statechartSpecification=new StatechartSpecificationImpl();  return statechartSpecification;}  }
class C{  public Shape createScrollButtonApart(int x,int y,int w,int h){  path.reset();  path.moveTo(x,y);  path.lineTo(x,y + h);  path.lineTo(x + w,y + h);  addScrollGapPath(x,y,w,h,true);  path.closePath();  return path;}  }
class C{  public static Command valueOfName(final String name){  for (  final Command command : values()) {    if (command.getName().equalsIgnoreCase(name)) {      return command;    }  }  return null;}  }
class C{  public static float mod(float a,float b){  int n=(int)(a / b);  a-=n * b;  if (a < 0)   return a + b;  return a;}  }
class C{  public static Map<String,Object> badExpireEvenProcessor(DispatchContext dctx,Map<String,? extends Object> context){  GenericValue creditCard=(GenericValue)context.get("creditCard");  String expireDate=creditCard.getString("expireDate");  String lastNumberStr=expireDate.substring(expireDate.length() - 1);  int lastNumber=Integer.parseInt(lastNumberStr);  if (lastNumber % 2.0 == 0.0) {    return alwaysBadExpireProcessor(dctx,context);  } else {    return alwaysApproveProcessor(dctx,context);  }}  }
class C{  public Task performResumeOperation(String vmId) throws IOException {  String path=String.format("%s/%s/resume",getBasePath(),vmId);  HttpResponse httpResponse=this.restClient.perform(RestClient.Method.POST,path,null);  this.restClient.checkResponse(httpResponse,HttpStatus.SC_CREATED);  return parseTaskFromHttpResponse(httpResponse);}  }
class C{  protected boolean supportsOperation(EnumListenerEvent operation){  return operation == EnumListenerEvent.AFTER_CREATE || operation == EnumListenerEvent.AFTER_UPDATE || operation == EnumListenerEvent.AFTER_DESTROY || operation == EnumListenerEvent.AFTER_INVALIDATE || operation == EnumListenerEvent.AFTER_REGION_DESTROY || operation == EnumListenerEvent.AFTER_REGION_CLEAR || operation == EnumListenerEvent.AFTER_REGION_INVALIDATE;}  }
class C{  public T entropy(byte[] entropy){  this.entropy=entropy;  return self();}  }
class C{  public Set<DelaunayTriangle> neighbors(DelaunayTriangle triangle){  return triGraph.getConnectedNodesFor(triangle);}  }
class C{  public void close(){  clref=null;}  }
class C{  public void testBadStreamBounds(){  Random r=new Random();  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  executeAndCatchIAE(null);  testDoubleBadOriginBound(null);}  }
class C{  @Override protected void unpackageClassifier(JarInputStream modelStream) throws IOException {  super.unpackageClassifier(modelStream);  ArrayTreeKernel kernel=null;  JarEntry entry=modelStream.getNextJarEntry();  if (entry.getName().equals("tree-kernel")) {    ObjectInputStream ois=new ObjectInputStream(modelStream);    try {      kernel=(ArrayTreeKernel)ois.readObject();    } catch (    ClassNotFoundException e) {      throw new IOException(e);    }    entry=modelStream.getNextJarEntry();  }  if (!entry.getName().equals("model.libsvm")) {    throw new IOException(String.format("expected next jar entry to be model.libsvm, found %s",entry.getName()));  }  model=TreeKernelSvmModel.fromInputStream(modelStream,kernel);}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.STATE_ENTITY___ENTRY_OR_EXIT_ACTION_1:    return entryOrExitAction_1 != null && !entryOrExitAction_1.isEmpty();case UmplePackage.STATE_ENTITY___AUTO_TRANSITION_1:  return autoTransition_1 != null && !autoTransition_1.isEmpty();case UmplePackage.STATE_ENTITY___TRANSITION_1:return transition_1 != null && !transition_1.isEmpty();case UmplePackage.STATE_ENTITY___ACTIVITY_1:return activity_1 != null && !activity_1.isEmpty();case UmplePackage.STATE_ENTITY___STATE_1:return state_1 != null && !state_1.isEmpty();case UmplePackage.STATE_ENTITY___TRACE_1:return trace_1 != null && !trace_1.isEmpty();}return super.eIsSet(featureID);}  }
class C{  void unexpectedErrorHandling(String message,final Throwable t){  Throwable e=t;  while (e.getCause() != null) {    e=e.getCause();  }  e.printStackTrace();  if (e instanceof OutOfMemoryError) {    LoneOptionDialog.showMessageDialog("Sorry, an OutOfMemoryError occurred. Please restart " + ClientGameConfiguration.get("GAME_NAME") + ".");  } else   if (e instanceof LinkageError || e instanceof SecurityException || e instanceof ClassNotFoundException) {    int res=LoneOptionDialog.showConfirmDialog(message + " Sorry an error occurred because of an inconsistent update state.\r\nDelete update files so that they are downloaded again after you restart " + ClientGameConfiguration.get("GAME_NAME")+ "?",ClientGameConfiguration.get("GAME_NAME"),JOptionPane.YES_NO_OPTION,JOptionPane.QUESTION_MESSAGE);    if (res == JOptionPane.YES_OPTION) {      clearUpdateFiles();    }  } else {    String errorMessage=stacktraceToString(e);    LoneOptionDialog.showMessageDialog(message + " An unexpected error occurred.\r\nPlease open a bug report at http://sf.net/projects/arianne with this error message:\r\n" + errorMessage);  }  System.exit(1);}  }
class C{  public void addObservations(int[] states,int[] groupOffsets){  for (int c=0; c < states.length; c++) {    int jointValue=0;    for (int i=0; i < numVars; i++) {      int thisValue=states[(c + groupOffsets[i] + states.length) % states.length];      marginalCounts[i][thisValue]++;      jointValue*=base;      jointValue+=thisValue;    }    jointCount[jointValue]++;    observations++;  }}  }
class C{  static String omitQuotesIfExist(String str){  if (str == null) {    return null;  }  if (((str.charAt(0) == '\"') || (str.charAt(0) == '\'')) && (str.length() >= 2)) {    str=str.substring(1,str.length() - 1);  }  return str;}  }
class C{  protected void fireProjectionChanged(){  Projection proj=getRotatedProjection();  if (logger.isLoggable(Level.FINE)) {    logger.fine("MapBean firing projection: " + proj);  }  try {    firePropertyChange(ProjectionProperty,null,proj);  } catch (  ProjectionChangeVetoException pcve) {    firePropertyChange(ProjectionVetoedProperty,proj,pcve);    pcve.updateWithParameters(this);    return;  }  for (  Component c : getComponents()) {    Layer l=(Layer)c;    if (l != null) {      l.setReadyToPaint(false);    }  }  projectionSupport.fireProjectionChanged(proj);  purgeAndNotifyRemovedLayers();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public void cancelCancellable(){  if (timeoutMessageCancellable != null) {    timeoutMessageCancellable.cancel();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:21.291 -0500",hash_original_method="8A5EBF82F92FAE3DB13A729C4B6DDBA4",hash_generated_method="83C5A9A53DA3465E2C66ACC70037B43D") public synchronized final Map<K,V> snapshot(){  return new LinkedHashMap<K,V>(map);}  }
class C{  public String globalInfo(){  return "CorrelationAttributeEval :\n\nEvaluates the worth of an attribute " + "by measuring the correlation (Pearson's) between it and the class.\n\n" + "Nominal attributes are considered on a value by "+ "value basis by treating each value as an indicator. An overall "+ "correlation for a nominal attribute is arrived at via a weighted average.\n";}  }
class C{  public static void copyView(final JFrame parent,final INaviProject project,final INaviView view){  Preconditions.checkNotNull(parent,"IE01835: Parent argument can not be null");  Preconditions.checkNotNull(project,"IE01836: Project argument can not be null");  Preconditions.checkNotNull(view,"IE01837: View argument can not be null");  if (!view.isLoaded()) {    try {      view.load();    } catch (    final CouldntLoadDataException e) {      CUtilityFunctions.logException(e);      final String innerMessage="E00138: " + "View could not be copied because it could not be loaded";      final String innerDescription=CUtilityFunctions.createDescription(String.format("The view '%s' could not be copied.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The new view was not created."});      NaviErrorDialog.show(parent,innerMessage,innerDescription,e);      return;    }catch (    final CPartialLoadException e) {      CUtilityFunctions.logException(e);      return;    }catch (    final LoadCancelledException e) {      return;    }  }  project.getContent().createView(view,view.getName(),view.getConfiguration().getDescription());  view.close();  try {    view.save();  } catch (  final CouldntSaveDataException exception) {    CUtilityFunctions.logException(exception);    final String innerMessage="E00206: " + "Could not save view";    final String innerDescription=CUtilityFunctions.createDescription(String.format("The function '%s' could not be saved.",view.getName()),new String[]{"There was a problem with the database connection."},new String[]{"The graph remains unsaved."});    NaviErrorDialog.show(parent,innerMessage,innerDescription,exception);  }}  }
class C{  protected CCSplitCols(int c,float d){  super(ccGridSize.ccg(c,1),d);  cols=c;}  }
class C{  public static void main(String[] args) throws AdeException {  AdeExtRequestType requestType=AdeExtRequestType.MASK_LOG;  new AdeExtMessageHandler();  System.err.println("Running Ade: " + requestType);  final AdeMaskLog instance=new AdeMaskLog(requestType);  (instance).AdeMaskLog(args);}  }
class C{  @Override @CanIgnoreReturnValue public int read() throws IOException {  int b=in.read();  if (b != -1) {    hasher.putByte((byte)b);  }  return b;}  }
class C{  public Attachment(Attachment other){  issetBitfield=other.issetBitfield;  this.id=other.id;  if (other.isSetType()) {    this.type=other.type;  }  if (other.isSetName()) {    this.name=other.name;  }  this.fileSize=other.fileSize;  if (other.isSetUrl()) {    this.url=other.url;  }}  }
class C{  public java.util.Iterator<E> preorderIterator(){  return new PreorderIterator();}  }
class C{  private boolean containsFinal(StateSet set){  states.reset(set);  while (states.hasMoreElements())   if (isFinal[states.nextElement()])   return true;  return false;}  }
class C{  public CheckBox(String text,Image icon){  super(text,icon);  setUIID("CheckBox");  updateSide();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:12.120 -0500",hash_original_method="FF0F600C92E1745B1B3B7823F85C9072",hash_generated_method="C252620A39C6C1ABAC6E409569BE3C7D") public void destroy(){  nativeDestroyFrame();  mBlockMessages=true;  removeCallbacksAndMessages(null);}  }
class C{  public void addRow(@NotNull String name,@NotNull Object... values) throws IllegalArgumentException {  if (values.length != myModel.getColumnCount() - 1) {    StringBuilder columns=new StringBuilder();    for (int i=1, max=myModel.getColumnCount(); i < max; i++) {      columns.append(myModel.getColumnName(i)).append(", ");    }    if (columns.length() > 2) {      columns.setLength(columns.length() - 2);    }    throw new IllegalArgumentException(String.format("Can't add row '%s' to the matrix control. Reason: the row specifies incorrect number of values (%d, expected %d). " + "Registered columns: %s. Given values: %s",name,values.length,myModel.getColumnCount() - 1,columns,Arrays.toString(values)));  }  Object[] rowData=new Object[values.length + 1];  rowData[0]=name;  System.arraycopy(values,0,rowData,1,values.length);  myModel.addRow(rowData);  for (int i=0; i < rowData.length; i++) {    myColumnWidths[i]=Math.max(myFontMetrics.stringWidth(rowData[i].toString()),myColumnWidths[i]);  }}  }
class C{  public boolean isCheckingOutFileInBackground(final IFile file){synchronized (backgroundFiles) {    return backgroundFiles.get(file) != null;  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Document anotherDoc;  DocumentType docType;  Node node;  doc=(Document)load("staffNS",true);  anotherDoc=(Document)load("staffNS",true);  docType=anotherDoc.getDoctype();{    boolean success=false;    try {      node=doc.importNode(docType,false);    } catch (    DOMException ex) {      success=(ex.code == DOMException.NOT_SUPPORTED_ERR);    }    assertTrue("throw_NOT_SUPPORTED_ERR",success);  }}  }
class C{  protected int rangeLower(String range){  int hyphenIndex;  if ((hyphenIndex=range.indexOf('-')) >= 0) {    return Math.min(rangeLower(range.substring(0,hyphenIndex)),rangeLower(range.substring(hyphenIndex + 1)));  }  return rangeSingle(range);}  }
class C{  public void clear(){  vertexLabels.clear();  globalEdgeLookup.clear();}  }
class C{  public net.minecraft.world.chunk.Chunk loadChunk(int i,int i1){  return provider.loadChunk(i,i1);}  }
class C{  protected void waitForDownloadsOrTimeout(long poll,long timeoutMillis) throws TimeoutException, InterruptedException {  doWaitForDownloadsOrTimeout(new Query(),poll,timeoutMillis);}  }
class C{  public static int year(){  int currentYear=(int)(System.currentTimeMillis() / millisecondPerYear()) + 1970;  return currentYear;}  }
class C{  public void saveLockPattern(List<LockPatternView.Cell> pattern){  final byte[] hash=LockPatternUtils.patternToHash(pattern);  try {    RandomAccessFile raf=new RandomAccessFile(sLockPatternFilename,"rwd");    if (pattern == null) {      raf.setLength(0);    } else {      raf.write(hash,0,hash.length);    }    raf.close();  } catch (  FileNotFoundException fnfe) {    LogUtil.e(TAG,"Unable to save lock pattern to " + sLockPatternFilename);  }catch (  IOException ioe) {    LogUtil.e(TAG,"Unable to save lock pattern to " + sLockPatternFilename);  }}  }
class C{  public void dropTaskLease(TaskHandle task){  try {    queue.modifyTaskLease(task,0,TimeUnit.SECONDS);  } catch (  IllegalStateException e) {    logger.warningfmt(e,"Failed dropping expired lease: %s",task.getName());  }catch (  TransientFailureException|DeadlineExceededException e) {    logger.severe(e,"Failed dropping task leases too fast");  }}  }
class C{  public synchronized void waitSeqnoLessEqual(long waitSeqno) throws InterruptedException {  if (logger.isDebugEnabled())   logger.debug("Waiting for sequence number: " + waitSeqno);  while (waitSeqno < seqno)   this.wait();}  }
class C{  public static CertChain create(String instanceIdentifier,X509Certificate[] chain){  if (chain.length < 2) {    throw new CodedException(X_CANNOT_CREATE_CERT_PATH,"Chain must have at least user's certificate " + "and root certificate authority");  }  X509Certificate trustAnchor=chain[chain.length - 1];  List<X509Certificate> additionalCerts=new ArrayList<>();  if (chain.length > 2) {    additionalCerts.addAll(Arrays.asList(Arrays.copyOfRange(chain,1,chain.length - 1)));  }  try {    return new CertChain(instanceIdentifier,chain[0],trustAnchor,additionalCerts);  } catch (  Exception ex) {    throw translateWithPrefix(X_CANNOT_CREATE_CERT_PATH,ex);  }}  }
class C{  private boolean initAccount(){  m_AD_Client_ID=Env.getContextAsInt(Env.getCtx(),m_WindowNo,"AD_Client_ID");  if (s_AcctSchema == null || s_AcctSchema.getC_AcctSchema_ID() != m_C_AcctSchema_ID)   s_AcctSchema=new MAcctSchema(Env.getCtx(),m_C_AcctSchema_ID,null);  log.config(s_AcctSchema.toString() + ", #" + s_AcctSchema.getAcctSchemaElements().length);  Env.setContext(Env.getCtx(),m_WindowNo,"C_AcctSchema_ID",m_C_AcctSchema_ID);  int AD_Window_ID=153;  GridWindowVO wVO=AEnv.getMWindowVO(m_WindowNo,AD_Window_ID,0);  if (wVO == null)   return false;  m_mWindow=new GridWindow(wVO);  m_mTab=m_mWindow.getTab(0);  if (!m_mTab.isLoadComplete())   m_mWindow.initTab(0);  m_mTab.getField("Alias").setDisplayLength(15);  m_mTab.getField("Combination").setDisplayLength(15);  m_mTab.getField("AD_Client_ID").setDisplayed(false);  m_mTab.getField("C_AcctSchema_ID").setDisplayed(false);  m_mTab.getField("IsActive").setDisplayed(false);  m_mTab.getField("IsFullyQualified").setDisplayed(false);  for (int i=0; i < m_mTab.getFieldCount(); i++) {    GridField field=m_mTab.getField(i);    if (!field.isDisplayed(true))     field.setDisplayed(false);  }  m_gridController=new GridController();  m_gridController.initGrid(m_mTab,true,m_WindowNo,null,null);  m_gridController.setPreferredSize(new Dimension(300,100));  panel.add(m_gridController,BorderLayout.CENTER);  m_gbc.anchor=GridBagConstraints.NORTHWEST;  m_gbc.gridy=0;  m_gbc.gridx=0;  m_gbc.gridwidth=1;  m_gbc.insets=m_fieldInsets;  m_gbc.fill=GridBagConstraints.HORIZONTAL;  m_gbc.weightx=0;  m_gbc.weighty=0;  int TabNo=0;  if (s_AcctSchema.isHasAlias()) {    GridField alias=m_mTab.getField("Alias");    f_Alias=VEditorFactory.getEditor(m_mTab,alias,false);    addLine(alias,f_Alias,false);  }  GridField combination=m_mTab.getField("Combination");  f_Combination=VEditorFactory.getEditor(m_mTab,combination,false);  addLine(combination,f_Combination,false);  m_newRow=true;  MAcctSchemaElement[] elements=s_AcctSchema.getAcctSchemaElements();  for (int i=0; i < elements.length; i++) {    MAcctSchemaElement ase=elements[i];    String type=ase.getElementType();    boolean isMandatory=ase.isMandatory();    if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Organization)) {      GridField field=m_mTab.getField("AD_Org_ID");      f_AD_Org_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_AD_Org_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Account)) {      GridField field=m_mTab.getField("Account_ID");      f_Account_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_Account_ID,isMandatory);      f_Account_ID.addVetoableChangeListener(this);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_SubAccount)) {      GridField field=m_mTab.getField("C_SubAcct_ID");      f_SubAcct_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_SubAcct_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Product)) {      GridField field=m_mTab.getField("M_Product_ID");      f_M_Product_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_M_Product_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_BPartner)) {      GridField field=m_mTab.getField("C_BPartner_ID");      f_C_BPartner_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_C_BPartner_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Campaign)) {      GridField field=m_mTab.getField("C_Campaign_ID");      f_C_Campaign_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_C_Campaign_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_LocationFrom)) {      GridField field=m_mTab.getField("C_LocFrom_ID");      f_C_LocFrom_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_C_LocFrom_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_LocationTo)) {      GridField field=m_mTab.getField("C_LocTo_ID");      f_C_LocTo_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_C_LocTo_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Project)) {      GridField field=m_mTab.getField("C_Project_ID");      f_C_Project_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_C_Project_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_SalesRegion)) {      GridField field=m_mTab.getField("C_SalesRegion_ID");      f_C_SalesRegion_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_C_SalesRegion_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_OrgTrx)) {      GridField field=m_mTab.getField("AD_OrgTrx_ID");      f_AD_OrgTrx_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_AD_OrgTrx_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_Activity)) {      GridField field=m_mTab.getField("C_Activity_ID");      f_C_Activity_ID=VEditorFactory.getEditor(m_mTab,field,false);      addLine(field,f_C_Activity_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_UserList1)) {      GridField field=m_mTab.getField("User1_ID");      f_User1_ID=VEditorFactory.getEditor(m_mTab,field,false);      GridFieldVO newFieldVO=f_User1_ID.getField().getVO();      newFieldVO.Header=f_User1_ID.getName();      field=new GridField(newFieldVO);      addLine(field,f_User1_ID,isMandatory);    } else     if (type.equals(MAcctSchemaElement.ELEMENTTYPE_UserList2)) {      GridField field=m_mTab.getField("User2_ID");      f_User2_ID=VEditorFactory.getEditor(m_mTab,field,false);      GridFieldVO newFieldVO=f_User2_ID.getField().getVO();      newFieldVO.Header=f_User2_ID.getName();      field=new GridField(newFieldVO);      addLine(field,f_User2_ID,isMandatory);    }  }  m_newRow=true;  m_gbc.gridy=m_line++;  m_gbc.gridx=0;  m_gbc.gridwidth=4;  m_gbc.insets=new Insets(5,15,2,0);  m_gbc.fill=GridBagConstraints.HORIZONTAL;  f_Description.setFont(f_Description.getFont().deriveFont(Font.ITALIC));  parameterPanel.add(f_Description,m_gbc);  m_query=new MQuery();  m_query.addRestriction("C_AcctSchema_ID",MQuery.EQUAL,m_C_AcctSchema_ID);  m_query.addRestriction("IsFullyQualified",MQuery.EQUAL,"Y");  if (m_mAccount.C_ValidCombination_ID == 0)   m_mTab.setQuery(MQuery.getEqualQuery("1","2")); else {    MQuery query=new MQuery();    query.addRestriction("C_AcctSchema_ID",MQuery.EQUAL,m_C_AcctSchema_ID);    query.addRestriction("C_ValidCombination_ID",MQuery.EQUAL,m_mAccount.C_ValidCombination_ID);    m_mTab.setQuery(query);  }  m_mTab.query(false);  m_gridController.getTable().addMouseListener(new VAccountDialog_mouseAdapter(this));  m_gridController.addDataStatusListener(this);  statusBar.setStatusLine(s_AcctSchema.toString());  statusBar.setStatusDB("?");  if (m_mAccount.C_ValidCombination_ID != 0)   m_mTab.navigate(0);  log.config("fini");  return true;}  }
class C{  public static void printList(GeometricObject[] list){  System.out.print("Sorted elements: ");  for (  GeometricObject e : list) {    System.out.printf("%.2f ",e.getArea());  }  System.out.println();}  }
class C{  public Intent execute(Context context){  List<double[]> values=new ArrayList<double[]>();  values.add(new double[]{12,14,11,10,19});  values.add(new double[]{10,9,14,20,11});  List<String[]> titles=new ArrayList<String[]>();  titles.add(new String[]{"P1","P2","P3","P4","P5"});  titles.add(new String[]{"Project1","Project2","Project3","Project4","Project5"});  int[] colors=new int[]{Color.BLUE,Color.GREEN,Color.MAGENTA,Color.YELLOW,Color.CYAN};  DefaultRenderer renderer=buildCategoryRenderer(colors);  renderer.setApplyBackgroundColor(true);  renderer.setBackgroundColor(Color.rgb(222,222,200));  renderer.setLabelsColor(Color.GRAY);  return ChartFactory.getDoughnutChartIntent(context,buildMultipleCategoryDataset("Project budget",titles,values),renderer,"Doughnut chart demo");}  }
class C{  private void assertion(boolean b,String msg){  if (!b) {    String fMsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_INCORRECT_PROGRAMMER_ASSERTION,new Object[]{msg});    throw new RuntimeException(fMsg);  }}  }
class C{  @CalledByNative static void openDateAndTimeSettings(Context context){  Intent intent=new Intent(android.provider.Settings.ACTION_DATE_SETTINGS);  try {    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(intent);  } catch (  android.content.ActivityNotFoundException ex) {  }}  }
class C{  public boolean isStitched(){  return stitched;}  }
class C{  public synchronized void init() throws IOException {  if (socket != null) {    in=new DataInputStream(new BufferedInputStream(socket.getInputStream(),Transfer.BUFFER_SIZE));    out=new DataOutputStream(new BufferedOutputStream(socket.getOutputStream(),Transfer.BUFFER_SIZE));  }}  }
class C{  public void write(String filename) throws DataIOException {  try {    write(new FileOutputStream(filename));  } catch (  FileNotFoundException e) {    throw new DataIOException(e);  }}  }
class C{  public PropertyTable hideButtons(){  showButtons=false;  return rebuild();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public DocumentStoredFieldVisitor(){  this.fieldsToAdd=null;}  }
class C{  @Override public double confSmallM(double totalExampleWeight,double delta){  double term=Math.log(4 / delta) / (2 * totalExampleWeight);  return Math.sqrt(term) + Math.pow(term,0.25) + Math.pow(term,0.75);}  }
class C{  protected int measureHeight(int measureSpec){  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  int result;  if (specMode == MeasureSpec.EXACTLY) {    result=specSize;  } else {    result=(int)(2 * radius) + getPaddingTop() + getPaddingBottom()+ (int)(2 * strokeWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return result;}  }
class C{  private void declareExtensions(){  new AbPageVariationFeed().declareExtensions(extProfile);  new AccountFeed().declareExtensions(extProfile);  new CombinationFeed().declareExtensions(extProfile);  new DataFeed().declareExtensions(extProfile);  new ExperimentFeed().declareExtensions(extProfile);  new ManagementFeed().declareExtensions(extProfile);  new SectionFeed().declareExtensions(extProfile);  new VariationFeed().declareExtensions(extProfile);}  }
class C{  public int size(){  return entries.size();}  }
class C{  protected void runInCallersThread(final ArrayList<AbstractDataServiceProcedureTask> tasks){  final int ntasks=tasks.size();  if (WARN && ntasks > 1)   log.warn("Running " + ntasks + " tasks in caller's thread: recursionDepth="+ getRecursionDepth().get()+ "(#active="+ getThreadPool().getActiveCount()+ ", queueSize="+ getThreadPool().getQueue().size()+ ") : "+ tasks.get(0).toString());  final Iterator<AbstractDataServiceProcedureTask> itr=tasks.iterator();  while (itr.hasNext()) {    final AbstractDataServiceProcedureTask task=itr.next();    try {      task.call();    } catch (    Exception e) {      throw new ClientException("Execution failed: recursionDepth=" + getRecursionDepth() + ", task="+ task,e,task.causes);    }  }}  }
class C{  public static Capitalization toCapitalization(Boolean up1,Boolean up2){  if (up1 == null) {    return Capitalization.CAPITALIZE;  } else   if (up2 == null) {    return up1 ? Capitalization.UPPERCASE : Capitalization.LOWERCASE;  } else   if (up1) {    return up2 ? Capitalization.UPPERCASE : Capitalization.CAPITALIZE;  } else {    return Capitalization.LOWERCASE;  }}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  private CTraceCombinationFunctions(){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:33.139 -0500",hash_original_method="5EB71443ECA98B5E7A476E0AE8AAD3AD",hash_generated_method="62CB1773BC4A8736669D2F5295750AC7") public void enableUsbMassStorage(){  try {    mMountService.setUsbMassStorageEnabled(true);  } catch (  Exception ex) {    Log.e(TAG,"Failed to enable UMS",ex);  }}  }
class C{  public int addNewDelegate(T newDelegate){  int native_object=++mDelegateCounter;  mDelegates.put(native_object,newDelegate);  assert !mJavaReferences.contains(newDelegate);  mJavaReferences.add(newDelegate);  if (Debug.DEBUG) {    System.out.println("New " + mClass.getSimpleName() + " with int "+ native_object);  }  return native_object;}  }
class C{  public void clearAll(){  queue.clear();  clearAllShown();}  }
class C{  public static ImmutableList<TestResponse> readResponseFile(Path file) throws InvalidProtocolBufferException {  MessageReader reader=MessageReader.forFile(file,TestResponse.getDescriptor());  ImmutableList<DynamicMessage> responses=reader.read();  ImmutableList.Builder<TestResponse> resultBuilder=ImmutableList.builder();  for (  DynamicMessage response : responses) {    resultBuilder.add(TestResponse.parseFrom(response.toByteString()));  }  return resultBuilder.build();}  }
class C{  public boolean isSetTransactionId(){  return EncodingUtils.testBit(__isset_bitfield,__TRANSACTIONID_ISSET_ID);}  }
class C{  public static Document parseFile(Class<?> context,String name) throws IOException {  try (InputStream in=context.getResourceAsStream(name)){    if (in == null) {      return null;    }    Document doc=newBuilder().parse(in);    compact(doc);    return doc;  } catch (  SAXException|ParserConfigurationException|IOException e) {    throw new IOException("Error reading " + name,e);  }}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case TypesPackage.PARAMETER__TYPE_SPECIFIER:    return basicSetTypeSpecifier(null,msgs);case TypesPackage.PARAMETER__OWNING_OPERATION:  return basicSetOwningOperation(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  private void adjustCategories(DiscreteVariable variable,int numCategories){  List<String> categories=new LinkedList<>(variable.getCategories());  List<String> newCategories=new LinkedList<>(categories);  if (categories.size() > numCategories) {    for (int i=variable.getCategories().size() - 1; i >= numCategories; i++) {      newCategories.remove(i);    }  } else   if (categories.size() < numCategories) {    for (int i=categories.size(); i < numCategories; i++) {      String category=DataUtils.defaultCategory(i);      if (categories.contains(category)) {        continue;      }      newCategories.add(category);    }  }  DiscreteVariable to=new DiscreteVariable(variable.getName(),newCategories);  changeVariable(variable,to);}  }
class C{  int[] decodeStart(BitArray row) throws NotFoundException {  int endStart=skipWhiteSpace(row);  int[] startPattern=findGuardPattern(row,endStart,START_PATTERN);  this.narrowLineWidth=(startPattern[1] - startPattern[0]) / 4;  validateQuietZone(row,startPattern[0]);  return startPattern;}  }
class C{  @SuppressWarnings("unused") @NonNull public static DatePickerDialog createDialog(@Nullable OnDateSetListener listener,@NonNull Clock clock){  return createDialog(null,listener,clock);}  }
class C{  public void simulateMethod(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  String subSignature=method.getSubSignature();{    defaultMethod(method,thisVar,returnVar,params);    return;  }}  }
class C{  private void writeMessage(final ByteBuffer buffer){  boolean threadShouldWrite=false;synchronized (queue) {    queue.add(buffer);    if (!writing) {      writing=true;      threadShouldWrite=true;    }  }  if (threadShouldWrite) {    writeFromQueue();  }}  }
class C{  public static GlowStructure loadStructure(GlowWorld world,CompoundTag compound){  if (!compound.isString("id")) {    throw new IllegalArgumentException("Structure has no type");  }  StructureStore<?> store=idTable.get(compound.getString("id"));  if (store == null) {    throw new IllegalArgumentException("Unknown structure type: \"" + compound.getString("id") + "\"");  }  int x=0, z=0;  if (compound.isInt("ChunkX")) {    x=compound.getInt("ChunkX");  }  if (compound.isInt("ChunkZ")) {    z=compound.getInt("ChunkZ");  }  return createStructure(world,x,z,store,compound);}  }
class C{  public static String javaScriptEscape(String s){  return javaScriptEscapeHelper(s,false);}  }
class C{  public boolean isVarargs(){  if (this.modifiers == null) {    unsupportedIn2();  }  if (parameters().isEmpty()) {    return false;  } else {    SingleVariableDeclaration v=(SingleVariableDeclaration)parameters().get(parameters().size() - 1);    return v.isVarargs();  }}  }
class C{  public SmaliClassDetailLoader(DexFile dexFile,boolean translateInstructions){  this.dexFiles=new DexFile[]{dexFile};  this.translateInstructions=translateInstructions;  this.resolver=translateInstructions ? new InvocationResolver() : null;}  }
class C{  public E removeLast(){  final Node<E> l=last;  if (l == null)   throw new NoSuchElementException();  return unlinkLast(l);}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (this == o)   return true;  if (!(o instanceof UnixNumericUserPrincipal))   return false;  UnixNumericUserPrincipal that=(UnixNumericUserPrincipal)o;  if (this.getName().equals(that.getName()))   return true;  return false;}  }
class C{  public static boolean isCheckedException(Throwable ex){  return !(ex instanceof RuntimeException || ex instanceof Error);}  }
class C{  private static String[] decodeURI(final String uri){  if (uri == null) {    return null;  }  final String trimmedInput=uri.trim();  if (!trimmedInput.startsWith(VSTFS_PREFIX)) {    return null;  }  final String inputWithoutPrefix=trimmedInput.substring(VSTFS_PREFIX.length());  final String[] parts=inputWithoutPrefix.split(URI_SEPARATOR);  if (parts.length != 3) {    return null;  }  String tool=null;  String artifactType=null;  String toolSpecificId=null;  try {    tool=URLDecoder.decode(parts[0],URL_ENCODING);    artifactType=URLDecoder.decode(parts[1],URL_ENCODING);    toolSpecificId=URLDecoder.decode(parts[2],URL_ENCODING);  } catch (  final UnsupportedEncodingException ex) {    throw new RuntimeException(ex);  }  if (!isToolWellFormed(tool) || !isArtifactTypeWellFormed(artifactType) || !isToolSpecificIDWellFormed(toolSpecificId)) {    return null;  }  return new String[]{tool,artifactType,toolSpecificId};}  }
class C{  public RadioButton(String text){  this(text,null);}  }
class C{  @Override public void train(DataSet ds){  this.decisionList=decisionListLearning(ds);}  }
class C{  private void createFramebufferBuffer(){  this.imageBuffer=glGenBuffers();  glBindBuffer(GL_ARRAY_BUFFER,this.imageBuffer);  glBufferData(GL_ARRAY_BUFFER,4 * 4 * width* height,GL_STREAM_DRAW);  glBindBuffer(GL_ARRAY_BUFFER,0);}  }
class C{  public Address prepareAddress(Offset offset){  return loadAddress(offset);}  }
class C{  public Set<Date> announceDeletion(final DigestURL url,final int depth){  HashSet<Date> dates=new HashSet<>();  String id=ASCII.String(url.hash());  String pathToHostPortDir=pathToHostPortDir(url.getHost(),url.getPort());  TreeMap<Integer,TreeSet<String>> domaindepth=this.directory.get(pathToHostPortDir);  if (domaindepth == null)   return dates;  TreeSet<String> dateid=domaindepth.get(depth);  if (dateid == null)   return dates;  Iterator<String> i=dateid.iterator();  while (i.hasNext()) {    String dis=i.next();    if (dis.endsWith("." + id)) {      String d=dis.substring(0,dis.length() - id.length() - 1);      Date date=parseDate(d);      if (date != null)       dates.add(date);      i.remove();    }  }  if (dateid.size() == 0)   domaindepth.remove(depth);  if (domaindepth.size() == 0)   this.directory.remove(pathToHostPortDir);  return dates;}  }
class C{  protected void startTimer(){  if (timer == null) {    timer=new Timer(200,this);    timer.setRepeats(true);  }  timer.start();}  }
class C{  private void balance(){  balanceHeights();}  }
class C{  protected void initialize(){  if (!System.getProperty("java.version").startsWith("1.3")) {    setOpaque(false);    setBackground(new java.awt.Color(0,0,0,0));  }  setBorderPainted(false);  setMargin(new Insets(2,2,2,2));  if (!UIManager.getLookAndFeel().getName().equals("Windows")) {    addMouseListener(new MouseListener());  }}  }
class C{  public BaseComponent(final String id,final IModel<?> model){  super(id,model);}  }
class C{  protected IJavaElementDelta[] growAndAddToArray(IJavaElementDelta[] array,IJavaElementDelta addition){  IJavaElementDelta[] old=array;  array=new IJavaElementDelta[old.length + 1];  System.arraycopy(old,0,array,0,old.length);  array[old.length]=addition;  return array;}  }
class C{  public void addListener(AgentRosterListener listener){synchronized (listeners) {    if (!listeners.contains(listener)) {      listeners.add(listener);      for (Iterator<String> it=getAgents().iterator(); it.hasNext(); ) {        String jid=it.next();        if (entries.contains(jid)) {          listener.agentAdded(jid);          Map<String,Presence> userPresences=presenceMap.get(jid);          if (userPresences != null) {            Iterator<Presence> presences=userPresences.values().iterator();            while (presences.hasNext()) {              listener.presenceChanged(presences.next());            }          }        }      }    }  }}  }
class C{  public static URL findResourceBase(String baseResource,ClassLoader loader){  URL url=loader.getResource(baseResource);  return findResourceBase(url,baseResource);}  }
class C{  @Override public boolean remove(Object o){  return map.remove(o) == DUMMY_VALUE;}  }
class C{  @Override @Transactional public List<RecipeImpl> search(String userId,List<String> tags,String type,int skipCount,int maxItems) throws ServerException {  try {    final EntityManager em=managerProvider.get();    final CriteriaBuilder cb=em.getCriteriaBuilder();    final CriteriaQuery<RecipeImpl> query=cb.createQuery(RecipeImpl.class);    final Root<RecipePermissionsImpl> perm=query.from(RecipePermissionsImpl.class);    final Join<RecipeImpl,RecipePermissionsImpl> rwp=perm.join("recipe",JoinType.LEFT);    final Expression<List<String>> acts=perm.get("actions");    final ParameterExpression<String> typeParam=cb.parameter(String.class,"recipeType");    final Predicate checkType=cb.or(cb.isNull(typeParam),cb.isNull(rwp.get("type")),cb.equal(rwp.get("type"),typeParam));    final Predicate userIdCheck=cb.or(cb.isNull(perm.get("userId")),cb.equal(perm.get("userId"),cb.parameter(String.class,"userId")));    final Predicate searchActionCheck=cb.isMember(cb.parameter(String.class,"actionParam"),acts);    final Predicate shareCheck=cb.and(checkType,userIdCheck,searchActionCheck);    final TypedQuery<RecipeImpl> typedQuery;    if (tags != null && !tags.isEmpty()) {      final Join<RecipeImpl,String> tag=rwp.join("tags",JoinType.LEFT);      query.select(cb.construct(RecipeImpl.class,rwp)).where(cb.and(tag.in(tags),shareCheck)).groupBy(rwp.get("id")).having(cb.equal(cb.count(tag),tags.size()));      typedQuery=em.createQuery(query).setParameter("tags",tags);    } else {      typedQuery=em.createQuery(query.select(cb.construct(RecipeImpl.class,rwp)).where(shareCheck));    }    return typedQuery.setParameter("userId",userId).setParameter("recipeType",type).setParameter("actionParam","search").setFirstResult(skipCount).setMaxResults(maxItems).getResultList();  } catch (  RuntimeException ex) {    throw new ServerException(ex.getLocalizedMessage(),ex);  }}  }
class C{  @Deprecated public static <T>Set<T> asSet(@Nullable T t){  return t == null ? Collections.<T>emptySet() : Collections.singleton(t);}  }
class C{  public boolean slotContainsTib(int slot){  if (slot == TIB_ARRAY_ELEMENT_TIB_INDEX && getType().isArrayType()) {    if (VM.VerifyAssertions)     VM._assert(get(slot) != null);    return true;  }  return false;}  }
class C{  protected void removeMember(final RelationMember member){  while (members.remove(member)) {  }}  }
class C{  public boolean appliesOnlyToBlockScopedElements(){  return false;}  }
class C{  public void paintTableBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public NaccacheSternKeyGenerationParameters(SecureRandom random,int strength,int certainty,int cntSmallPrimes,boolean debug){  super(random,strength);  this.certainty=certainty;  if (cntSmallPrimes % 2 == 1) {    throw new IllegalArgumentException("cntSmallPrimes must be a multiple of 2");  }  if (cntSmallPrimes < 30) {    throw new IllegalArgumentException("cntSmallPrimes must be >= 30 for security reasons");  }  this.cntSmallPrimes=cntSmallPrimes;  this.debug=debug;}  }
class C{  private String cacheKey(boolean hasNetwork,Collection<String> excludeGroups){  if (excludeGroups == null || excludeGroups.size() == 0) {    return hasNetwork ? KEY_EMPTY_WITH_NETWORK : KEY_EMPTY_WITHOUT_NETWORK;  }  reusedBuilder.setLength(0);  reusedBuilder.append(hasNetwork ? "X" : "Y");  for (  String group : excludeGroups) {    reusedBuilder.append("-").append(group);  }  return reusedBuilder.toString();}  }
class C{  @Override public int hashCode(){  if (hashCode == 0) {    hashCode=37 * (37 * 17 + getNumerator()) + getDenominator();  }  return hashCode;}  }
class C{  @Override public String toString(){  StringBuilder s=new StringBuilder(64);  final int numberOfLeadingZeros=Long.numberOfLeadingZeros(term);  for (int i=0; i < numberOfLeadingZeros; i++) {    s.append('0');  }  if (term != 0)   s.append(Long.toBinaryString(term));  return s.toString();}  }
class C{  public void update(){}  }
class C{  public int size(){  return fHistory == null ? 0 : fHistory.size();}  }
class C{  public static void writeHTMLHeader(StringBuffer buffer,String title){  buffer.append("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\" \"http://www.w3.org/TR/html4/frameset.dtd\">\n");  buffer.append("<html>\n");  buffer.append("<head>\n");  buffer.append("<title>\n");  buffer.append(title);  buffer.append("\n</title>\n");  buffer.append("<link href=\"files/prettify.css\" type=\"text/css\" rel=\"stylesheet\" />\n");  buffer.append("<link href=\"files/style.css\" rel=\"stylesheet\" type=\"text/css\" media=\"screen\" />\n");  buffer.append("<script type=\"text/javascript\" src=\"files/prettify.js\"></script>\n");  buffer.append("<script type=\"text/javascript\" src=\"files/jquery.js\"></script>\n");  buffer.append("<script type=\"text/javascript\" src=\"files/foldButton.js\"></script>\n");  buffer.append("<script type=\"text/javascript\">\n");  buffer.append("  $(document).ready(function() {\n");  buffer.append("    $('H2#tests').foldButton();\n");  buffer.append("    $('H2#source').foldButton();\n");  buffer.append("    $('H2#parameters').foldButton();\n");  buffer.append("  });");  buffer.append("</script>\n");  buffer.append("<link href=\"files/foldButton.css\" rel=\"stylesheet\" type=\"text/css\">\n");  buffer.append("</head>\n");  buffer.append("<body onload=\"prettyPrint()\">\n");  buffer.append("<div id=\"wrapper\">\n");  buffer.append("<img src=\"files/evosuite.png\" height=\"40\"/>\n");}  }
class C{  @Override protected void onStop(){  super.onStop();  Log.d(TAG,"onStop() - the activity is no longer visible (it is now \"stopped\")");}  }
class C{  @NonNull public Category newCategoryFromCursor(@NonNull Cursor cursor){  return Category_Schema.INSTANCE.newModelFromCursor(connection,cursor,0);}  }
class C{  public GStringImpl(Object[] values,String[] strings){  super(values);  this.strings=strings;}  }
class C{  public static ExprNode swap(ExprNode exprTree,String columnName,ExprNode fullExpr){  if (fullExpr == null) {    throw new NullPointerException();  }  if (isColumnNameNode(exprTree,columnName)) {    return fullExpr;  } else {    visitChildren(exprTree,columnName,fullExpr);  }  return exprTree;}  }
class C{  public ServiceEventImpl(JmDNSImpl jmDNS,String type,String name,ServiceInfo info){  super(jmDNS);  this._type=type;  this._name=name;  this._info=info;}  }
class C{  public static boolean copy(File source,File dest){  BufferedInputStream bis=null;  BufferedOutputStream bos=null;  boolean result=true;  try {    bis=new BufferedInputStream(new FileInputStream(source));    bos=new BufferedOutputStream(new FileOutputStream(dest,false));    byte[] buf=new byte[1024];    bis.read(buf);    do {      bos.write(buf);    } while (bis.read(buf) != -1);  } catch (  IOException e) {    result=false;  } finally {    try {      if (bis != null)       bis.close();      if (bos != null)       bos.close();    } catch (    IOException e) {      result=false;    }  }  return result;}  }
class C{  public static void turnScreenOn(Activity context){  try {    Window window=context.getWindow();    window.addFlags(WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);    window.addFlags(WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED);    window.addFlags(WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON);  } catch (  Exception ex) {    Log.e("PercolateAndroidUtils","Unable to turn on screen for activity " + context);  }}  }
class C{  public SelectClause add(Expression expression,String asName){  selectList.add(new SelectClauseExpression(expression,asName));  return this;}  }
class C{  public void validateConfiguration() throws InvalidConfigurationException {  if (fatalError || tableModel != null && (tableModel.getRowCount() == 0 || errorTableModel.getErrorCount() > 0)) {    throw new InvalidConfigurationException();  }}  }
class C{  public static int hash(byte[] data,int seed){  return hash(ByteBuffer.wrap(data),seed);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return Boolean.valueOf(stack.getUIMgrSafe().getVideoFrame().getMuteOnAltSpeedPlay());}  }
class C{  public ModifierOperation(final String enumName,final ModifierOperationAction action,final UnaryOperator<ModifierValue> onEnd){  super(enumName);  this.action=action;  this.onEnd=onEnd;}  }
class C{  public static Vec backSub(Matrix U,Vec y){  if (y.length() != U.rows())   throw new ArithmeticException("Vector and matrix sizes do not agree");  Vec x=y instanceof SparseVector ? new SparseVector(U.cols()) : new DenseVector(U.cols());  final int start=Math.min(U.rows(),U.cols()) - 1;  for (int i=start; i >= 0; i--) {    double x_i=y.get(i);    for (int j=i + 1; j <= start; j++)     x_i-=U.get(i,j) * x.get(j);    x_i/=U.get(i,i);    if (Double.isInfinite(x_i))     x_i=0;    x.set(i,x_i);  }  return x;}  }
class C{  public void update(final long[] key,final U value){  if (key == null || key.length == 0)   return;  insertOrIgnore(MurmurHash3.hash(key,DEFAULT_UPDATE_SEED)[0] >>> 1,value);}  }
class C{  public RequestParams(Object... keysAndValues){  int len=keysAndValues.length;  if (len % 2 != 0)   throw new IllegalArgumentException("Supplied arguments must be even");  for (int i=0; i < len; i+=2) {    String key=String.valueOf(keysAndValues[i]);    String val=String.valueOf(keysAndValues[i + 1]);    put(key,val);  }}  }
class C{  public void reset(){  agentLocations.clear();}  }
class C{  public static int lastIndexOfWhitespace(String src,int startIndex){  return lastIndexOfWhitespace(src,startIndex,0);}  }
class C{  public void forget(){  super.forget();  firstCapitalized.clear();  notFirstCapitalized.clear();}  }
class C{  public int hashCode(){  int hash=iHash;  if (hash == 0) {    hash=iHash=super.hashCode();  }  return hash;}  }
class C{  public void testField(){  checkPrivateKey cPrKey=new checkPrivateKey();  assertEquals("Incorrect serialVersionUID",cPrKey.getSerVerUID(),6034044314589513430L);}  }
class C{  protected CommandResult executeCommandWithoutClear(HeadlessGfsh shell,String command){  assert (shell != null);  assert (command != null);  try {    info("Executing command " + command + " with command Mgr "+ CommandManager.getInstance());  } catch (  ClassNotFoundException cnfex) {    throw new AssertionError(cnfex);  }catch (  IOException ioex) {    throw new AssertionError(ioex);  }  shell.executeCommand(command);  if (shell.hasError()) {    error("executeCommand completed with error : " + shell.getError());  }  CommandResult result=null;  try {    result=(CommandResult)shell.getResult();  } catch (  InterruptedException ex) {    error("shell received InterruptedException");  }  if (result != null) {    result.resetToFirstLine();  }  return result;}  }
class C{  static void accumSingle(int counts[],int startTermIndex,SortedDocValues si,DocIdSetIterator disi,int subIndex,OrdinalMap map) throws IOException {  if (startTermIndex == -1 && (map == null || si.getValueCount() < disi.cost() * 10)) {    accumSingleSeg(counts,si,disi,subIndex,map);  } else {    accumSingleGeneric(counts,startTermIndex,si,disi,subIndex,map);  }}  }
class C{  public static ComponentUI createUI(JComponent c){  return s_panelUI;}  }
class C{  private MaterialDrawableBuilder(Context context){  this.context=context;  paint=new TextPaint();  paint.setTypeface(MaterialIconUtils.getTypeFace(context));  paint.setStyle(Paint.Style.FILL_AND_STROKE);  paint.setTextAlign(Paint.Align.CENTER);  paint.setUnderlineText(false);  paint.setColor(Color.BLACK);  paint.setAntiAlias(true);  setToActionbarSize();  setColor(Color.BLACK);}  }
class C{  public static int paintSyntaxLine(Segment line,Token tokens,SyntaxStyle[] styles,TabExpander expander,Graphics gfx,int x,int y){  Font defaultFont=gfx.getFont();  Color defaultColor=gfx.getColor();  int offset=0;  for (; ; ) {    byte id=tokens.id;    if (id == Token.END)     break;    int length=tokens.length;    if (id == Token.NULL) {      if (!defaultColor.equals(gfx.getColor()))       gfx.setColor(defaultColor);      if (!defaultFont.equals(gfx.getFont()))       gfx.setFont(defaultFont);    } else     styles[id].setGraphicsFlags(gfx,defaultFont);    line.count=length;    x=Utilities.drawTabbedText(line,x,y,gfx,expander,0);    line.offset+=length;    offset+=length;    tokens=tokens.next;  }  return x;}  }
class C{  public void addDataSet(T d){  if (d == null)   return;  mYValCount+=d.getEntryCount();  mYValueSum+=d.getYValueSum();  if (mDataSets.size() <= 0) {    mYMax=d.getYMax();    mYMin=d.getYMin();    if (d.getAxisDependency() == AxisDependency.LEFT) {      mLeftAxisMax=d.getYMax();      mLeftAxisMin=d.getYMin();    } else {      mRightAxisMax=d.getYMax();      mRightAxisMin=d.getYMin();    }  } else {    if (mYMax < d.getYMax())     mYMax=d.getYMax();    if (mYMin > d.getYMin())     mYMin=d.getYMin();    if (d.getAxisDependency() == AxisDependency.LEFT) {      if (mLeftAxisMax < d.getYMax())       mLeftAxisMax=d.getYMax();      if (mLeftAxisMin > d.getYMin())       mLeftAxisMin=d.getYMin();    } else {      if (mRightAxisMax < d.getYMax())       mRightAxisMax=d.getYMax();      if (mRightAxisMin > d.getYMin())       mRightAxisMin=d.getYMin();    }  }  mDataSets.add(d);  handleEmptyAxis(getFirstLeft(),getFirstRight());}  }
class C{  public Mean put(double[] vals,double[] weights){  assert (vals.length == weights.length);  for (int i=0, end=vals.length; i < end; i++) {    put(vals[i],weights[i]);  }  return this;}  }
class C{  private void checkYearsAndMonths(String destintionType){  if (getMonths() != 0) {    throw new UnsupportedOperationException("Cannot convert to " + destintionType + " as this period contains months and months vary in length");  }  if (getYears() != 0) {    throw new UnsupportedOperationException("Cannot convert to " + destintionType + " as this period contains years and years vary in length");  }}  }
class C{  private String buildPartialPresenceInfoDocument(PresenceInfo info){  String document=new StringBuilder("<?xml version=\"1.0\" encoding=\"").append(UTF8_STR).append("\"?>").append(SipUtils.CRLF).append("<presence xmlns=\"urn:ietf:params:xml:ns:pidf\"").append(" xmlns:op=\"urn:oma:xml:prs:pidf:oma-pres\"").append(" xmlns:opd=\"urn:oma:xml:pde:pidf:ext\"").append(" xmlns:pdm=\"urn:ietf:params:xml:ns:pidf:data-model\"").append(" xmlns:ci=\"urn:ietf:params:xml:ns:pidf:cipid\"").append(" xmlns:rpid=\"urn:ietf:params:xml:ns:pidf:rpid\"").append(" xmlns:gp=\"urn:ietf:params:xml:ns:pidf:geopriv10\"").append(" xmlns:gml=\"urn:opengis:specification:gml:schema-xsd:feature:v3.0\"").append(" entity=\"").append(ImsModule.getImsUserProfile().getPublicUri()).append("\">").append(SipUtils.CRLF).toString();  String timestamp=DateUtils.encodeDate(info.getTimestamp());  document+=buildCapabilities(timestamp,mRcsSettings.getMyCapabilities());  document+=buildGeoloc(timestamp,info.getGeoloc());  document+="</presence>" + SipUtils.CRLF;  return document;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  private void checkOrReallocateBuffer(int length) throws OutOfBlockBufferMemoryException {  if (size + length <= capacity) {    return;  }  if (exposedSlices) {    throw new OutOfBlockBufferMemoryException();  }  capacity=(size + length) * 2;  byte[] oldBuffer=buffer;  buffer=new byte[capacity];  if (size > 0) {    System.arraycopy(oldBuffer,0,buffer,0,size);  }}  }
class C{  @Override public void put(String name,float value){  emulatedFields.put(name,value);}  }
class C{  public synchronized ArrayList<V> clear(){  ArrayList<V> oldValues=new ArrayList<>(mMap.values());  mMap.clear();  mSizeInBytes=0;  return oldValues;}  }
class C{  public AmpExceptionExecution rethrow(){  return new AmpExceptionExecution(this);}  }
class C{  private boolean isDependencyExists(String localTableName,String localColumnName,String checkColumnName,String checkCondition,String foreignTableName,String foreignColumnName){  String vendor=m_target.getVendor();  String catalog=m_target.getCatalog();  String schema=m_target.getSchema();  boolean isRecordsFound=false;  Statement stmt=m_target.setStatement();  String sqlCommand=s_dbEngine.sqlAction_checkDependencyExists(vendor,catalog,schema,localTableName,localColumnName,checkColumnName,checkCondition,foreignTableName,foreignColumnName);  ResultSet rs=m_target.executeQuery(stmt,sqlCommand);  if (m_target.getResultSetNext(rs)) {    int numberOfRecords=m_target.getResultSetInt(rs,"NumberOfDependencies");    if (numberOfRecords > 0)     isRecordsFound=true;  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  return isRecordsFound;}  }
class C{  public ReflectiveOperationException(){}  }
class C{  public void playGame(){  if (!hasPlayed) {    gameEventLog="LOG: #" + awayTeam.rankTeamPollScore + " "+ awayTeam.abbr+ " ("+ awayTeam.wins+ "-"+ awayTeam.losses+ ") @ #"+ homeTeam.rankTeamPollScore+ " "+ homeTeam.abbr+ " ("+ homeTeam.wins+ "-"+ homeTeam.losses+ ")"+ "\n"+ "---------------------------------------------------------\n\n"+ awayTeam.abbr+ " Off Strategy: "+ awayTeam.teamStratOff.getStratName()+ "\n"+ awayTeam.abbr+ " Def Strategy: "+ awayTeam.teamStratDef.getStratName()+ "\n"+ homeTeam.abbr+ " Off Strategy: "+ homeTeam.teamStratOff.getStratName()+ "\n"+ homeTeam.abbr+ " Def Strategy: "+ homeTeam.teamStratDef.getStratName()+ "\n";    gameTime=3600;    gameDown=1;    gamePoss=true;    gameYardsNeed=10;    gameYardLine=20;    while (gameTime > 0) {      if (gamePoss)       runPlay(homeTeam,awayTeam); else       runPlay(awayTeam,homeTeam);    }    if (homeScore != awayScore) {      gameEventLog+=getEventPrefix() + "Time has expired! The game is over.";    } else {      gameEventLog+=getEventPrefix() + "OVERTIME!\nTie game at 0:00, overtime begins!";    }    if (gameTime <= 0 && homeScore == awayScore) {      playingOT=true;      gamePoss=false;      gameYardLine=75;      numOT++;      gameTime=-1;      gameDown=1;      gameYardsNeed=10;      while (playingOT) {        if (gamePoss)         runPlay(homeTeam,awayTeam); else         runPlay(awayTeam,homeTeam);      }    }    if (homeScore > awayScore) {      homeTeam.wins++;      homeTeam.totalWins++;      homeTeam.gameWLSchedule.add("W");      awayTeam.losses++;      awayTeam.totalLosses++;      awayTeam.gameWLSchedule.add("L");      homeTeam.gameWinsAgainst.add(awayTeam);      homeTeam.winStreak.addWin(homeTeam.league.getYear());      homeTeam.league.checkLongestWinStreak(homeTeam.winStreak);      awayTeam.winStreak.resetStreak(awayTeam.league.getYear());    } else {      homeTeam.losses++;      homeTeam.totalLosses++;      homeTeam.gameWLSchedule.add("L");      awayTeam.wins++;      awayTeam.totalWins++;      awayTeam.gameWLSchedule.add("W");      awayTeam.gameWinsAgainst.add(homeTeam);      awayTeam.winStreak.addWin(awayTeam.league.getYear());      awayTeam.league.checkLongestWinStreak(awayTeam.winStreak);      homeTeam.winStreak.resetStreak(homeTeam.league.getYear());    }    homeTeam.addGamePlayedPlayers(homeScore > awayScore);    awayTeam.addGamePlayedPlayers(awayScore > homeScore);    homeTeam.teamPoints+=homeScore;    awayTeam.teamPoints+=awayScore;    homeTeam.teamOppPoints+=awayScore;    awayTeam.teamOppPoints+=homeScore;    homeTeam.teamYards+=homeYards;    awayTeam.teamYards+=awayYards;    homeTeam.teamOppYards+=awayYards;    awayTeam.teamOppYards+=homeYards;    homeTeam.teamOppPassYards+=getPassYards(true);    awayTeam.teamOppPassYards+=getPassYards(false);    homeTeam.teamOppRushYards+=getRushYards(true);    awayTeam.teamOppRushYards+=getRushYards(false);    homeTeam.teamTODiff+=awayTOs - homeTOs;    awayTeam.teamTODiff+=homeTOs - awayTOs;    hasPlayed=true;    addNewsStory();    if (homeTeam.rivalTeam.equals(awayTeam.abbr) || awayTeam.rivalTeam.equals(homeTeam.abbr)) {      if (homeScore > awayScore) {        homeTeam.wonRivalryGame=true;      } else {        awayTeam.wonRivalryGame=true;      }    }    homeQB=homeTeam.getQB(0);    homeRBs=new PlayerRB[2];    for (int i=0; i < 2; ++i) {      homeRBs[i]=homeTeam.getRB(i);    }    homeWRs=new PlayerWR[3];    for (int i=0; i < 3; ++i) {      homeWRs[i]=homeTeam.getWR(i);    }    homeK=homeTeam.getK(0);    awayQB=awayTeam.getQB(0);    awayRBs=new PlayerRB[2];    for (int i=0; i < 2; ++i) {      awayRBs[i]=awayTeam.getRB(i);    }    awayWRs=new PlayerWR[3];    for (int i=0; i < 3; ++i) {      awayWRs[i]=awayTeam.getWR(i);    }    awayK=awayTeam.getK(0);    homeTeam.checkForInjury();    awayTeam.checkForInjury();  }}  }
class C{  public String copyValueOf(char data[]){  return String.copyValueOf(data);}  }
class C{  private static List<Section> parse(InputStream is,boolean readMetaOnly){  try {    if (is.read() != 0xff || is.read() != M_SOI) {      return null;    }    List<Section> sections=new ArrayList<Section>();    int c;    while ((c=is.read()) != -1) {      if (c != 0xff) {        return null;      }      while ((c=is.read()) == 0xff) {      }      if (c == -1) {        return null;      }      int marker=c;      if (marker == M_SOS) {        if (!readMetaOnly) {          Section section=new Section();          section.marker=marker;          section.length=-1;          section.data=new byte[is.available()];          is.read(section.data,0,section.data.length);          sections.add(section);        }        return sections;      }      int lh=is.read();      int ll=is.read();      if (lh == -1 || ll == -1) {        return null;      }      int length=lh << 8 | ll;      if (!readMetaOnly || c == M_APP1) {        Section section=new Section();        section.marker=marker;        section.length=length;        section.data=new byte[length - 2];        is.read(section.data,0,length - 2);        sections.add(section);      } else {        is.skip(length - 2);      }    }    return sections;  } catch (  IOException e) {    Log.d(TAG,"Could not parse file.",e);    return null;  } finally {    if (is != null) {      try {        is.close();      } catch (      IOException e) {      }    }  }}  }
class C{  public static String enumerateCollectionWithHash(final Collection<String> collection){  if (collection == null) {    return "";  }  final List<String> result=new ArrayList<String>(collection.size());  for (  String entry : collection) {    result.add("#" + entry);  }  return enumerateCollection(result);}  }
class C{  @Override public byte[] convertIndexToRGB(final byte[] index){  isConverted=true;  final int size=index.length;  float cl, ca, cb;  for (int i=0; i < size; i+=3) {    cl=(index[i] & 255) * C4;    ca=(index[i + 1] & 255) - C5;    cb=(index[i + 2] & 255) - C5;    convertToRGB(cl,ca,cb);    index[i]=(byte)r;    index[i + 1]=(byte)g;    index[i + 2]=(byte)b;  }  return index;}  }
class C{  public String nextToken(String delim){  delimiters=delim;  delimsChanged=true;  setMaxDelimCodePoint();  return nextToken();}  }
class C{  @Override public void onClick(View v){  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,"");  activity.startActivityForResult(intent,ConversationActivity.REQUEST_CODE_SPEECH);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public void abort(){  this.request.abort();}  }
class C{  int[] determineDimensions(int sourceCodeWords,int errorCorrectionCodeWords) throws WriterException {  float ratio=0.0f;  int[] dimension=null;  for (int cols=minCols; cols <= maxCols; cols++) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,cols);    if (rows < minRows) {      break;    }    if (rows > maxRows) {      continue;    }    float newRatio=((17 * cols + 69) * DEFAULT_MODULE_WIDTH) / (rows * HEIGHT);    if (dimension != null && Math.abs(newRatio - PREFERRED_RATIO) > Math.abs(ratio - PREFERRED_RATIO)) {      continue;    }    ratio=newRatio;    dimension=new int[]{cols,rows};  }  if (dimension == null) {    int rows=calculateNumberOfRows(sourceCodeWords,errorCorrectionCodeWords,minCols);    if (rows < minRows) {      dimension=new int[]{minCols,minRows};    }  }  if (dimension == null) {    throw new WriterException("Unable to fit message in columns");  }  return dimension;}  }
class C{  public static String readFirstLine(File file,Charset charset) throws IOException {  return asCharSource(file,charset).readFirstLine();}  }
class C{  public void run(){  System.err.println("ready to service...");  for (; ; )   try {    ServiceThread th=new ServiceThread(this,socket.accept());    th.start();  } catch (  IOException e) {    logging(e.toString());  }}  }
class C{  protected void entryEvicted(K key,V value){}  }
class C{  static public final float atan2(float y,float x){  float add, mul;  if (x < 0) {    if (y < 0) {      y=-y;      mul=1;    } else {      mul=-1;    }    x=-x;    add=-PI;  } else {    if (y < 0) {      y=-y;      mul=-1;    } else {      mul=1;    }    add=0;  }  float invDiv=1 / ((x < y ? y : x) * INV_ATAN2_DIM_MINUS_1);  if (invDiv == Float.POSITIVE_INFINITY) {    return ((float)Math.atan2(y,x) + add) * mul;  }  int xi=(int)(x * invDiv);  int yi=(int)(y * invDiv);  return (Atan2.table[yi * ATAN2_DIM + xi] + add) * mul;}  }
class C{  public void addRow(TradeOrder element){  getData().addTradeOrder(element);  final Vector<Object> newRow=new Vector<Object>();  getNewRow(newRow,element);  rows.add(newRow);  this.fireTableRowsInserted(rows.size() - 1,rows.size() - 1);}  }
class C{  public void testDoConfigureSetsDefaultPort() throws Exception {  configuration.doConfigure(container);  String config=configuration.getFileHandler().readTextFile(DOMAIN_HOME + "/config/config.xml","UTF-8");  XMLAssert.assertXpathEvaluatesTo(configuration.getPropertyValue(ServletPropertySet.PORT),"//weblogic:listen-port",config);}  }
class C{  public int size(){  return iTypes.length;}  }
class C{  private void putForCreate(K key,V value) throws java.io.StreamCorruptedException {  Object k=maskNull(key);  Object[] tab=table;  int len=tab.length;  int i=hash(k,len);  Object item;  while ((item=tab[i]) != null) {    if (item == k)     throw new java.io.StreamCorruptedException();    i=nextKeyIndex(i,len);  }  tab[i]=k;  tab[i + 1]=value;}  }
class C{  public boolean isHasExpression(){  return hasExpression;}  }
class C{  public HeaderCardBuilder value(double newValue) throws HeaderCardException {  if (this.card == null) {    if (scale >= 0) {      this.card=new HeaderCard(this.key.key(),newValue,scale,null);    } else {      this.card=new HeaderCard(this.key.key(),newValue,null);    }    this.header.addLine(this.card);  } else {    if (scale >= 0) {      this.card.setValue(newValue,scale);    } else {      this.card.setValue(newValue);    }  }  return this;}  }
class C{  private void initEventQueue(){  String eventList=System.getProperty("appletviewer.send.event");  if (eventList == null) {    panel.sendEvent(AppletPanel.APPLET_LOAD);    panel.sendEvent(AppletPanel.APPLET_INIT);    panel.sendEvent(AppletPanel.APPLET_START);  } else {    String[] events=splitSeparator(",",eventList);    for (int i=0; i < events.length; i++) {      System.out.println("Adding event to queue: " + events[i]);      if (events[i].equals("dispose"))       panel.sendEvent(AppletPanel.APPLET_DISPOSE); else       if (events[i].equals("load"))       panel.sendEvent(AppletPanel.APPLET_LOAD); else       if (events[i].equals("init"))       panel.sendEvent(AppletPanel.APPLET_INIT); else       if (events[i].equals("start"))       panel.sendEvent(AppletPanel.APPLET_START); else       if (events[i].equals("stop"))       panel.sendEvent(AppletPanel.APPLET_STOP); else       if (events[i].equals("destroy"))       panel.sendEvent(AppletPanel.APPLET_DESTROY); else       if (events[i].equals("quit"))       panel.sendEvent(AppletPanel.APPLET_QUIT); else       if (events[i].equals("error"))       panel.sendEvent(AppletPanel.APPLET_ERROR); else       System.out.println("Unrecognized event name: " + events[i]);    }    while (!panel.emptyEventQueue())     ;    appletSystemExit();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected void beforeMerge(OnGoingMerge merge){}  }
class C{  public static final double fastSin(double x){  x=SIN_B * x + SIN_A * x * abs(x);  return SIN_P * (x * abs(x) - x) + x;}  }
class C{  private void cacheInterchangeObject(InterchangeObject interchangeObject){  List<InterchangeObject> list=this.interchangeObjectsMap.get(interchangeObject.getClass().getSimpleName());  if (list == null) {    list=new ArrayList<InterchangeObject>();    this.interchangeObjectsMap.put(interchangeObject.getClass().getSimpleName(),list);  }  list.add(interchangeObject);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:59.822 -0500",hash_original_method="B59788400A18B5E3292425CD27578F4B",hash_generated_method="41B067F5168791CA498F83690E2207FA") public static Animation makeInAnimation(Context c,boolean fromLeft){  Animation a;  if (fromLeft) {    a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_in_left);  } else {    a=AnimationUtils.loadAnimation(c,com.android.internal.R.anim.slide_in_right);  }  a.setInterpolator(new DecelerateInterpolator());  a.setStartTime(currentAnimationTimeMillis());  return a;}  }
class C{  public double computeAngle(int fromEdge,int toEdge){  EdgeStore.Edge e=layer.edgeStore.getCursor(fromEdge);  VertexStore.Vertex v=layer.vertexStore.getCursor(e.getToVertex());  Coordinate p1=pointOnLine(e.getGeometry(),true);  Coordinate p2=new Coordinate(v.getLon(),v.getLat());  e.seek(toEdge);  Coordinate p3=pointOnLine(e.getGeometry(),false);  double cosLat=Math.abs(Math.cos(p2.y * Math.PI / 180));  p1.x/=cosLat;  p2.x/=cosLat;  p3.x/=cosLat;  double angleIn=Angle.angle(p1,p2);  double angleOut=Angle.angle(p2,p3);  double angle=angleOut - angleIn;  if (angle < 0)   angle+=Math.PI * 2;  return angle;}  }
class C{  @Override public final boolean contains(final Object obj){  return collection.contains(obj);}  }
class C{  public Element build(SVGPlot svgp,double x,double y,double width,double height){  Element barchart=svgp.svgElement(SVGConstants.SVG_G_TAG);  Element bar=svgp.svgRect(x,y,width,height);  bar.setAttribute(SVGConstants.SVG_FILL_ATTRIBUTE,"#a0a0a0");  bar.setAttribute(SVGConstants.SVG_STROKE_ATTRIBUTE,"#a0a0a0");  bar.setAttribute(SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE,String.valueOf(height * 0.01));  barchart.appendChild(bar);  if (val >= min && val <= max && min < max) {    final double frame=0.02 * height;    double fpos=(val - min) / (max - min) * (width - 2 * frame);    Element chart;    if (reversed) {      chart=svgp.svgRect(x + frame + fpos,y + frame,width - fpos - 2 * frame,height - 2 * frame);    } else {      chart=svgp.svgRect(x + frame,y + frame,fpos,height - 2 * frame);    }    chart.setAttribute(SVGConstants.SVG_FILL_ATTRIBUTE,"#d4e4f1");    chart.setAttribute(SVGConstants.SVG_STROKE_ATTRIBUTE,"#a0a0a0");    chart.setAttribute(SVGConstants.SVG_STROKE_WIDTH_ATTRIBUTE,String.valueOf(height * 0.01));    barchart.appendChild(chart);  }  if (format != null) {    String num=Double.isNaN(val) ? "NaN" : format.format(val);    Element lbl=svgp.svgText(x + 0.05 * width,y + 0.75 * height,num);    lbl.setAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE,"font-size: " + 0.75 * height + "; font-weight: bold");    barchart.appendChild(lbl);  }  if (label != null) {    Element lbl=svgp.svgText(x + 1.05 * width,y + 0.75 * height,label);    lbl.setAttribute(SVGConstants.SVG_STYLE_ATTRIBUTE,"font-size: " + 0.75 * height + "; font-weight: normal");    barchart.appendChild(lbl);  }  return barchart;}  }
class C{  void applyOption(short kind,byte[] data,long len){  if (kind == TCP_OPT_MSS) {    logger.log(Level.WARNING,"Peer specified MSS option which is not supported.");  } else {    if (kind == TCP_OPT_WND_SCALE) {      if (len != 1) {        logger.log(Level.SEVERE,"Invalid window scale option received.");        return;      }      applyWindowScaleOption(data[0]);    }  }}  }
class C{  public BaseEntityEvent(final BaseEntityEventType eventType,final T entity){  this.eventType=eventType;  this.entity=entity;}  }
class C{  protected boolean intersectsFrustum(DrawContext dc){  if (this.getExtent() == null) {    this.setExtent(this.computeExtentAndEyeDistance(dc));    if (this.getExtent() == null)     return false;  }  if (dc.isPickingMode())   return dc.getPickFrustums().intersectsAny(this.getExtent()); else   return dc.getView().getFrustumInModelCoordinates().intersects(this.getExtent());}  }
class C{  public boolean hasRequiredStream(){  return hasRequiredSubStreams;}  }
class C{  public BaseEvent(Object source){  this.source=source;}  }
class C{  public void playBuiltinSound(String soundIdentifier){  impl.playBuiltinSound(soundIdentifier);}  }
class C{  public static Intent forgeInvitationIntent(Context ctx,FileTransferDAO ftDao,Intent invitation){  invitation.setClass(ctx,ReceiveFileTransfer.class);  invitation.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_SINGLE_TOP);  Bundle bundle=new Bundle();  bundle.putParcelable(BUNDLE_FTDAO_ID,ftDao);  invitation.putExtras(bundle);  return invitation;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer();  int i;  for (i=0; i < ncolumns; i++) {    sb.append(column[i] == null ? "NULL" : column[i]);    sb.append('|');  }  sb.append('\n');  for (i=0; i < nrows; i++) {    int k;    String row[]=(String[])rows.elementAt(i);    for (k=0; k < ncolumns; k++) {      sb.append(row[k] == null ? "NULL" : row[k]);      sb.append('|');    }    sb.append('\n');  }  return sb.toString();}  }
class C{  public static byte[] decodeWebSafe(String s) throws Base64DecoderException {  byte[] bytes=s.getBytes();  return decodeWebSafe(bytes,0,bytes.length);}  }
class C{  private void print(String amt){  try {    System.out.println(amt + " = " + getAmtInWords(amt));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  @ObjectiveCName("bindRawUploadFileWithRid:withCallback:") public void bindRawUploadFile(long rid,UploadFileCallback callback){  modules.getFilesModule().bindUploadFile(rid,callback);}  }
class C{  protected void runTests() throws Exception {  BreakpointEvent bpe=startToMain("SourceNameFilterTarg");  targetClass=bpe.location().declaringType();  boolean noSourceName=false;  try {    targetClass.sourceName();  } catch (  AbsentInformationException ee) {    noSourceName=true;  }  if (noSourceName) {    println("-- Running with no source names");  } else {    println("-- Running with source names");  }  mainThread=bpe.thread();  EventRequestManager erm=vm().eventRequestManager();  addListener(this);  cpReq=erm.createClassPrepareRequest();  cpReq.enable();  resumeTo("SourceNameFilterTarg","bkpt","()V");  cpReq.disable();  cpReq.addSourceNameFilter("jj");  cpReq.enable();  resumeTo("SourceNameFilterTarg","bkpt","()V");  cpReq.disable();  cpReq=erm.createClassPrepareRequest();  cpReq.addSourceNameFilter("SourceNameFilterTest.java");  cpReq.enable();  resumeTo("SourceNameFilterTarg","bkpt","()V");  listenUntilVMDisconnect();  if (!gotEvent1) {    failure("failure: Did not get a class prepare request " + "for LoadedLater1");  }  if (gotEvent2) {    failure("failure: Did get a class prepare request " + "for LoadedLater2");  }  if (gotEvent3 && noSourceName) {    failure("failure: Did get a class prepare request " + "for LoadedLater3");  } else   if (!gotEvent3 && !noSourceName) {    failure("failure: Did not get a class prepare request " + "for LoadedLater3");  }  if (!testFailed) {    println("SourceNameFilterTest: passed");  } else {    throw new Exception("SourceNameFilterTest: failed");  }}  }
class C{  public void dispose(){  if (mappedElementItemProvider != null)   mappedElementItemProvider.dispose();  if (executionFlowItemProvider != null)   executionFlowItemProvider.dispose();  if (executionNodeItemProvider != null)   executionNodeItemProvider.dispose();  if (executionStateItemProvider != null)   executionStateItemProvider.dispose();  if (executionScopeItemProvider != null)   executionScopeItemProvider.dispose();  if (executionRegionItemProvider != null)   executionRegionItemProvider.dispose();  if (executionEntryItemProvider != null)   executionEntryItemProvider.dispose();  if (executionExitItemProvider != null)   executionExitItemProvider.dispose();  if (executionChoiceItemProvider != null)   executionChoiceItemProvider.dispose();  if (executionSynchronizationItemProvider != null)   executionSynchronizationItemProvider.dispose();  if (reactionItemProvider != null)   reactionItemProvider.dispose();  if (stateVectorItemProvider != null)   stateVectorItemProvider.dispose();  if (timeEventItemProvider != null)   timeEventItemProvider.dispose();  if (sequenceItemProvider != null)   sequenceItemProvider.dispose();  if (checkItemProvider != null)   checkItemProvider.dispose();  if (checkRefItemProvider != null)   checkRefItemProvider.dispose();  if (ifItemProvider != null)   ifItemProvider.dispose();  if (executionItemProvider != null)   executionItemProvider.dispose();  if (enterStateItemProvider != null)   enterStateItemProvider.dispose();  if (exitStateItemProvider != null)   exitStateItemProvider.dispose();  if (callItemProvider != null)   callItemProvider.dispose();  if (scheduleTimeEventItemProvider != null)   scheduleTimeEventItemProvider.dispose();  if (unscheduleTimeEventItemProvider != null)   unscheduleTimeEventItemProvider.dispose();  if (stateSwitchItemProvider != null)   stateSwitchItemProvider.dispose();  if (stateCaseItemProvider != null)   stateCaseItemProvider.dispose();  if (saveHistoryItemProvider != null)   saveHistoryItemProvider.dispose();  if (historyEntryItemProvider != null)   historyEntryItemProvider.dispose();  if (traceNodeExecutedItemProvider != null)   traceNodeExecutedItemProvider.dispose();  if (reactionFiredItemProvider != null)   reactionFiredItemProvider.dispose();  if (traceReactionWillFireItemProvider != null)   traceReactionWillFireItemProvider.dispose();  if (traceStateEnteredItemProvider != null)   traceStateEnteredItemProvider.dispose();  if (traceStateExitedItemProvider != null)   traceStateExitedItemProvider.dispose();  if (traceBeginRunCycleItemProvider != null)   traceBeginRunCycleItemProvider.dispose();  if (traceEndRunCycleItemProvider != null)   traceEndRunCycleItemProvider.dispose();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getSmallerOp_();}  }
class C{  protected void createRenderers(CombinedChart chart,ChartAnimator animator,ViewPortHandler viewPortHandler){  mRenderers=new ArrayList<DataRenderer>();  DrawOrder[] orders=chart.getDrawOrder();  for (  DrawOrder order : orders) {switch (order) {case BAR:      if (chart.getBarData() != null)       mRenderers.add(new BarChartRenderer(chart,animator,viewPortHandler));    break;case BUBBLE:  if (chart.getBubbleData() != null)   mRenderers.add(new BubbleChartRenderer(chart,animator,viewPortHandler));break;case LINE:if (chart.getLineData() != null) mRenderers.add(new LineChartRenderer(chart,animator,viewPortHandler));break;case CANDLE:if (chart.getCandleData() != null) mRenderers.add(new CandleStickChartRenderer(chart,animator,viewPortHandler));break;case SCATTER:if (chart.getScatterData() != null) mRenderers.add(new ScatterChartRenderer(chart,animator,viewPortHandler));break;}}}  }
class C{  @SuppressWarnings("unchecked") private static int find(Object[] arr,Object val,int bnd,int l,int r,Comparator c){  int m=l;  int d=1;  while (m <= r) {    if (c.compare(val,arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;      break;    }    m+=d;    d<<=1;  }  while (l <= r) {    m=(l + r) >>> 1;    if (c.compare(val,arr[m]) > bnd) {      l=m + 1;    } else {      r=m - 1;    }  }  return l - 1;}  }
class C{  public static boolean isPolygonClosed(Iterable<? extends LatLon> locations){  if (locations == null) {    String message=Logging.getMessage("nullValue.IterableIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  java.util.Iterator<? extends LatLon> iter=locations.iterator();  if (!iter.hasNext()) {    return false;  }  LatLon firstLocation=iter.next();  LatLon lastLocation=null;  while (iter.hasNext()) {    lastLocation=iter.next();  }  return (lastLocation != null) && lastLocation.equals(firstLocation);}  }
class C{  public static <T,U>T[] copyOf(U[] original,int newLength,Class<? extends T[]> newType){  @SuppressWarnings("unchecked") T[] copy=((Object)newType == (Object)Object[].class) ? (T[])new Object[newLength] : (T[])Array.newInstance(newType.getComponentType(),newLength);  System.arraycopy(original,0,copy,0,Math.min(original.length,newLength));  return copy;}  }
class C{  public SVGOMException(short code,String message){  super(code,message);}  }
class C{  public static void dropAllTables(Database db,boolean ifExists){  TestDataDao.dropTable(db,ifExists);  TestData2Dao.dropTable(db,ifExists);  TestData3Dao.dropTable(db,ifExists);}  }
class C{  public void bratRenderLater(AjaxRequestTarget aTarget){  aTarget.appendJavaScript(bratRenderLaterCommand());}  }
class C{  public WalletFiles autosaveToFile(File f,long delayTime,TimeUnit timeUnit,@Nullable WalletFiles.Listener eventListener){  lock.lock();  try {    checkState(vFileManager == null,"Already auto saving this wallet.");    WalletFiles manager=new WalletFiles(this,f,delayTime,timeUnit);    if (eventListener != null)     manager.setListener(eventListener);    vFileManager=manager;    return manager;  }  finally {    lock.unlock();  }}  }
class C{  public XYStepRenderer(){  this(null,null);}  }
class C{  public static ComponentUI createUI(JComponent c){  return s_toggleButtonUI;}  }
class C{  public int findNext(int startIndex){  this.startIndex=startIndex;  return findNext();}  }
class C{  public void deleteBlockSnapshotSession(URI systemURI,URI snapSessionURI,String groupName,Boolean markInactive,String stepId){  TaskCompleter completer=null;  try {    StorageSystem system=_dbClient.queryObject(StorageSystem.class,systemURI);    completer=new BlockSnapshotSessionDeleteCompleter(snapSessionURI,markInactive,stepId);    WorkflowStepCompleter.stepExecuting(stepId);    getDevice(system.getSystemType()).doDeleteBlockSnapshotSession(system,snapSessionURI,groupName,completer);  } catch (  Exception e) {    if (completer != null) {      ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);      completer.error(_dbClient,serviceError);    } else {      throw DeviceControllerException.exceptions.restoreBlockSnapshotSessionFailed(e);    }  }}  }
class C{  @Override public <T>void inject(T bean){  Objects.requireNonNull(bean);  ConfigStub stub=new ConfigStub(bean.getClass());  stub.inject(bean,this);}  }
class C{  public static void reload(GlobalConfProvider conf){  log.trace("reload called with parameter class {}",conf.getClass());  instance=conf;}  }
class C{  private Integer parseCurrentIcon(JSONObject response) throws JSONException {  JSONObject currently=response.getJSONObject("currently");  String icon=currently.getString("icon");  return iconResources.get(icon);}  }
class C{  public static void test100Words() throws Exception {  DatabaseMemory.TEST=true;  DatabaseMemory.RECREATE_DATABASE=true;  Bot.DEFAULT_DEBUG_LEVEL=Bot.FINE;  Bot bot=Bot.createInstance();  Sense sense=bot.awareness().getSense(Http.class.getName());  sense.input(new URL("http://en.wiktionary.org/wiki/Category:100_English_basic_words"));  bot.shutdown();}  }
class C{  public AztecDetectorResult detect() throws NotFoundException {  Point pCenter=getMatrixCenter();  Point[] bullEyeCornerPoints=getBullEyeCornerPoints(pCenter);  extractParameters(bullEyeCornerPoints);  ResultPoint[] corners=getMatrixCornerPoints(bullEyeCornerPoints);  BitMatrix bits=sampleGrid(image,corners[shift % 4],corners[(shift + 3) % 4],corners[(shift + 2) % 4],corners[(shift + 1) % 4]);  return new AztecDetectorResult(bits,corners,compact,nbDataBlocks,nbLayers);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagNameNS("http://www.nist.gov","address");  assertSize("addresses",3,elementList);}  }
class C{  protected void revalidate(){  if (valid) {    return;  }  valid=true;  missing=false;  malformed=false;  String s=getValueAsString();  if (s == null) {    missing=true;    return;  }  try {    ListBuilder builder=new ListBuilder();    doParse(s,builder);    if (builder.getList() != null) {      clear(itemList);    }    itemList=builder.getList();  } catch (  ParseException e) {    itemList=new ArrayList(1);    malformed=true;  }}  }
class C{  @Override public int hashCode(){  return delegate.hashCode();}  }
class C{  public static ModMetadata init(ModMetadata metadata){  metadata.modId=Reference.ID;  metadata.name=Reference.NAME;  metadata.description=Reference.NAME + " is an addon for JEI that adds tons of stuff about world gen, plant drop, mob loot, chest loot, villagers and enchantments";  metadata.version=Reference.VERSION;  metadata.authorList=Collections.singletonList("way2muchnoise");  metadata.autogenerated=false;  return metadata;}  }
class C{  public List<A> prependList(List<A> xs){  if (this.isEmpty())   return xs;  if (xs.isEmpty())   return this;  if (xs.tail.isEmpty())   return prepend(xs.head);  List<A> result=this;  List<A> rev=xs.reverse();  Assert.check(rev != xs);  while (rev.nonEmpty()) {    List<A> h=rev;    rev=rev.tail;    h.setTail(result);    result=h;  }  return result;}  }
class C{  private void selectItem(final TableItem tableItem){  final ColumnItem c=(ColumnItem)tableItem.getData();  if (c.getItemCount() == 0) {    return;  }  final int selectedColumn=this.findSelectedColumn(tableItem);  boolean needPacking=false;  if (selectedColumn != this.columns.size() - 1) {    for (int i=selectedColumn + 1; i < this.columns.size(); i++) {      this.columns.get(i).setData(null);      this.columns.get(i).deselectAll();    }    int i=0;    final Iterator<Table> it=this.columns.iterator();    while (it.hasNext()) {      final Table t=it.next();      if (i > selectedColumn) {        t.dispose();        it.remove();        this.setMinSize(this.composite.computeSize(SWT.DEFAULT,SWT.DEFAULT));      }      i++;    }    if (selectedColumn != this.columns.size() - 1) {      this.columns.get(selectedColumn + 1).setData(c);    } else {      this.createTable();      this.columns.get(this.columns.size() - 1).setData(c);    }    needPacking=true;  } else {    this.createTable();    needPacking=true;    this.columns.get(this.columns.size() - 1).setData(c);  }  this.updateContent();  if (needPacking) {    this.composite.pack();    this.setMinSize(this.composite.computeSize(SWT.DEFAULT,SWT.DEFAULT));  }  this.columns.get(this.columns.size() - 1).forceFocus();}  }
class C{  public static double stirlingCorrection(int k){  final double C1=8.33333333333333333e-02;  final double C3=-2.77777777777777778e-03;  final double C5=7.93650793650793651e-04;  final double C7=-5.95238095238095238e-04;  double r, rr;  if (k > 30) {    r=1.0 / (double)k;    rr=r * r;    return r * (C1 + rr * (C3 + rr * (C5 + rr * C7)));  } else   return stirlingCorrection[k];}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:    return declaredModifiers != null && !declaredModifiers.isEmpty();}return super.eIsSet(featureID);}  }
class C{  public boolean isCreditStopHold(){  return m_bp.isCreditStopHold();}  }
class C{  @Override public Map<String,Runnable> handleMenu(final GamaRuntimeException item,final int x,final int y){  final Map<String,Runnable> result=new HashMap<>();  result.put("Copy text",null);  result.put("Show in editor",null);  return result;}  }
class C{  public void disableAll(){  if (doNotCheckCapabilities()) {    return;  }  disableAllAttributes();  disableAllAttributeDependencies();  disableAllClasses();  disableAllClassDependencies();  disable(Capability.MISSING_VALUES);  disable(Capability.MISSING_CLASS_VALUES);  disable(Capability.NO_CLASS);}  }
class C{  protected void fireActionPerformed(ActionEvent e){  Object[] listeners=listenerList.getListenerList();  for (int i=listeners.length - 2; i >= 0; i-=2) {    if (listeners[i] == ActionListener.class) {      ((ActionListener)listeners[i + 1]).actionPerformed(e);    }  }}  }
class C{  private void resetBuffer(){  for (int i=0; i < buffer.length; i++) {    buffer[i]=0;  }}  }
class C{  private static String sectionToHtml(Section s){  return "<table class=\"Section\">\n" + "<tr><th class=\"Section\">\n" + "<table class=\"SectionTh\"><tr>\n"+ "<th class=\"SectionTh\">\n" + (s.getClass() == SectionContainer.class ? "SectionStructure" : "SectionContent") + ":<br/>\n"+ "Level: "+ s.getLevel()+ "\n"+ "</th><th class=\"SectionTh\">\n"+ (s.getTitleElement() != null ? contentElementToHtml(s.getTitleElement()) : "")+ "</th>\n"+ "</tr></table>\n"+ "</th></tr>\n"+ "<tr><td class=\"Section\">\n"+ sectionCCLToHtml(s)+ "</td></tr>\n"+ "</table>\n";}  }
class C{  @Override public boolean autoCommitFailureClosesAllResultSets(){  debugCodeCall("autoCommitFailureClosesAllResultSets");  return false;}  }
class C{  public String Get(StreamKind StreamKind,int StreamNumber,String parameter,InfoKind infoKind,InfoKind searchKind){  if (isLoaded()) {    return MediaInfoLibrary.INSTANCE.Get(handle,StreamKind.ordinal(),StreamNumber,new WString(parameter),infoKind.ordinal(),searchKind.ordinal()).toString();  } else {    return "";  }}  }
class C{  public void registerName(final String name,final String typeString){  final ConversationContext ctx=new ConversationContext();  ctx.setMergeExpressions(false);  final Sentence parsed=ConversationParser.parse(name,ctx);  Expression lastExpr=null;  boolean prepositionSeen=false;  for (  final Expression expr : parsed) {    if ((expr.getType() == null) || expr.getType().isEmpty()) {      final WordEntry entry=words.get(expr.getNormalized());      final ExpressionType type=new ExpressionType(typeString + ExpressionType.SUFFIX_DYNAMIC);      entry.setType(type);      expr.setType(type);    } else     if (expr.isQuestion()) {      logger.warn("name already registered with incompatible expression type while registering name '" + name + "': "+ expr.getNormalizedWithTypeString()+ " expected type: "+ typeString);    }    if (expr.isPreposition()) {      prepositionSeen=true;    } else     if (!prepositionSeen) {      lastExpr=expr;    }  }  if (lastExpr != null) {    if (!isNameCompatibleLastType(lastExpr,typeString)) {      if (typeString.startsWith(ExpressionType.SUBJECT)) {      } else {        logger.warn("last word of name '" + name + "' has an unexpected type: "+ lastExpr.getNormalizedWithTypeString()+ " expected type: "+ typeString);      }    }  }  if (parsed.getExpressions().size() > 1) {    Expression firstExpr=parsed.expressions.get(0);    String firstWord=firstExpr.getOriginal().toLowerCase();    Set<CompoundName> nameSet=compoundNames.get(firstWord);    if (nameSet == null) {      nameSet=new HashSet<CompoundName>();      compoundNames.put(firstWord,nameSet);    }    nameSet.add(new CompoundName(parsed,typeString));  }}  }
class C{  public void removeClickingListener(OnWheelClickedListener listener){  clickingListeners.remove(listener);}  }
class C{  public CreateSnapshotRequest waitForCompletion(boolean waitForCompletion){  this.waitForCompletion=waitForCompletion;  return this;}  }
class C{  protected void processErrorStatus(Status status,Map<String,Object> keyMap){  List<Problem> problems=status.getProblem();  if (null != problems && !problems.isEmpty()) {    Problem problem=problems.get(0);    String desc=problem.getDescription();    String message=problem.getMessage();    String diags=problem.getDiagnostics();    keyMap.put(VNXFileConstants.CMD_RESULT,VNXFileConstants.CMD_FAILURE);    if (null != desc) {      keyMap.put(VNXFileConstants.FAULT_DESC,desc);    }    if (null != diags) {      keyMap.put(VNXFileConstants.FAULT_DIAG,diags);    }    if (null != message) {      keyMap.put(VNXFileConstants.FAULT_MSG,message);    }    if ((desc != null) && (!desc.isEmpty())) {      _logger.error("Fault response received due to {} possible cause {}",desc,diags);    } else {      _logger.error("Fault response received due to {} possible cause {}",message,diags);    }  }}  }
class C{  public BCSAPIMessage.TX toBCSAPIMessage(){  BCSAPIMessage.TX.Builder builder=BCSAPIMessage.TX.newBuilder();  builder.setLocktime(getLockTime());  builder.setVersion(getVersion());  for (  TransactionInput i : getInputs()) {    builder.addInputs(i.toProtobuf());  }  for (  TransactionOutput o : getOutputs()) {    builder.addOutputs(o.toProtobuf());  }  if (blockID != null) {    builder.setBlock(ByteString.copyFrom(blockID.unsafeGetArray()));  }  return builder.build();}  }
class C{  static public int floor(float x){  return (int)(x + BIG_ENOUGH_FLOOR) - BIG_ENOUGH_INT;}  }
class C{  public Period withHours(int hours){  int[] values=getValues();  getPeriodType().setIndexedField(this,PeriodType.HOUR_INDEX,values,hours);  return new Period(values,getPeriodType());}  }
class C{  public static String toFormattedString(Aspect aspect) throws InvocationTargetException, IllegalAccessException {  Hashtable<String,Object> attributeList=null;  StringBuffer returnStringBuf=null;  String returnString=null;  String attributeName=null;  if (null != (attributeList=getAllAttribueValues(aspect,true))) {    returnStringBuf=new StringBuffer();    final String index[]=new String[attributeList.size()];    final Enumeration<String> enumAttr=attributeList.keys();    int i=0;    while (enumAttr.hasMoreElements()) {      index[i++]=enumAttr.nextElement();    }    CollectionUtilities.n2sort(index,true);    for (    final String element : index) {      attributeName=element;      if (attributeList.get(attributeName) instanceof ArrayList) {        @SuppressWarnings("unchecked") final List<Aspect> list=(List<Aspect>)attributeList.get(attributeName);        for (        Aspect aspect1 : list) {          returnStringBuf.append(toFormattedXMLString(aspect1));        }      } else       if (attributeList.get(attributeName).getClass().getSuperclass().getName().equals(Aspect.class.getName())) {        final Aspect aspect1=(Aspect)attributeList.get(attributeName);        returnStringBuf.append(toFormattedXMLString(aspect1));      } else {        returnStringBuf.append(attributeName + "=\'" + attributeList.get(attributeName)+ "\'\n");      }    }    returnString=returnStringBuf.toString();  }  return returnString;}  }
class C{  private void madvise() throws RuntimeException {  try {    Method method=MappedByteBuffer.class.getDeclaredMethod("load0",long.class,long.class);    method.setAccessible(true);    method.invoke(dummyMbbInstance_,nativeRawStartAddress_,capacityBytes_);  } catch (  Exception e) {    throw new RuntimeException(String.format("Encountered %s exception while loading",e.getClass()));  }}  }
class C{  public void addExtension(ASN1ObjectIdentifier oid,boolean critical,ASN1Encodable value){  try {    this.addExtension(oid,critical,value.toASN1Primitive().getEncoded(ASN1Encoding.DER));  } catch (  IOException e) {    throw new IllegalArgumentException("error encoding value: " + e);  }}  }
class C{  @Override public boolean add(E o){  int idx=0;  if (isEmpty() == false) {    idx=findInsertionPoint(o);  }  super.add(idx,o);  return true;}  }
class C{  public static String flow(String text,boolean delSp,int width){  StringBuilder result=new StringBuilder();  String[] lines=text.split("\r\n|\n",-1);  for (int i=0; i < lines.length; i++) {    String line=lines[i];    boolean notempty=line.length() > 0;    int quoteDepth=0;    while (quoteDepth < line.length() && line.charAt(quoteDepth) == RFC2646_QUOTE)     quoteDepth++;    if (quoteDepth > 0) {      if (quoteDepth + 1 < line.length() && line.charAt(quoteDepth) == RFC2646_SPACE)       line=line.substring(quoteDepth + 1); else       line=line.substring(quoteDepth);    }    while (notempty) {      int extra=0;      if (quoteDepth == 0) {        if (line.startsWith("" + RFC2646_SPACE) || line.startsWith("" + RFC2646_QUOTE) || line.startsWith(RFC2646_FROM)) {          line="" + RFC2646_SPACE + line;          extra=1;        }      } else {        line=RFC2646_SPACE + line;        for (int j=0; j < quoteDepth; j++)         line="" + RFC2646_QUOTE + line;        extra=quoteDepth + 1;      }      int j=width - 1;      if (j >= line.length())       j=line.length() - 1; else {        while (j >= extra && ((delSp && isAlphaChar(text,j)) || (!delSp && line.charAt(j) != RFC2646_SPACE)))         j--;        if (j < extra) {          j=width - 1;          while (j < line.length() - 1 && ((delSp && isAlphaChar(text,j)) || (!delSp && line.charAt(j) != RFC2646_SPACE)))           j++;        }      }      result.append(line.substring(0,j + 1));      if (j < line.length() - 1) {        if (delSp)         result.append(RFC2646_SPACE);        result.append(RFC2646_CRLF);      }      line=line.substring(j + 1);      notempty=line.length() > 0;    }    if (i < lines.length - 1) {      while (result.length() > 0 && result.charAt(result.length() - 1) == RFC2646_SPACE)       result.deleteCharAt(result.length() - 1);      result.append(RFC2646_CRLF);    }  }  return result.toString();}  }
class C{  protected FacetImpl(){  super();}  }
class C{  static int[] makeDeltas(int[] values,int start,int end,int min,int max){  assert (max >= min);  int count=end - start;  int[] deltas=new int[count];  int state=0;  if (min == max) {    for (int i=0; i < count; i++) {      int value=values[start + i];      deltas[i]=value - state;      state=value;    }  } else {    for (int i=0; i < count; i++) {      int value=values[start + i];      assert (value >= 0 && value + min <= max);      int delta=value - state;      assert (delta == (long)value - (long)state);      state=value;      delta=reduceToSignedRange(delta,min,max);      deltas[i]=delta;    }  }  return deltas;}  }
class C{  public HeapBytes copy(){  return new HeapBytes(memory.copy());}  }
class C{  public boolean isChunked(){  return (buffer == null) && wrappedEntity.isChunked();}  }
class C{  public List<CorrelationSet> correlationSets(){  return correlationSets;}  }
class C{  public void testDifferentHash() throws Exception {  doTest(false);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public String formatValue(double val){  NumberFormat fmt=NumberFormat.getInstance(Locale.US);  fmt.setMaximumFractionDigits(-log10res);  return fmt.format(val);}  }
class C{  @Override public boolean isDirectoryLoader(){  return true;}  }
class C{  public static int crossCubic(double x1,double y1,double cx1,double cy1,double cx2,double cy2,double x2,double y2,double x,double y){  if ((x < x1 && x < cx1 && x < cx2 && x < x2) || (x > x1 && x > cx1 && x > cx2 && x > x2) || (y > y1 && y > cy1 && y > cy2 && y > y2)|| (x1 == cx1 && cx1 == cx2 && cx2 == x2)) {    return 0;  }  if (y < y1 && y < cy1 && y < cy2 && y < y2 && x != x1 && x != x2) {    if (x1 < x2) {      return x1 < x && x < x2 ? 1 : 0;    }    return x2 < x && x < x1 ? -1 : 0;  }  CubicCurve c=new CubicCurve(x1,y1,cx1,cy1,cx2,cy2,x2,y2);  double px=x - x1;  double py=y - y1;  double res[]=new double[3];  int rc=c.solvePoint(res,px);  return c.cross(res,rc,py,py);}  }
class C{  private void stopMediaPlayer(){  if (mediaPlayer != null) {    if (mediaPlayer.isPlaying()) {      mediaPlayer.stop();    }    mediaPlayer.reset();    mediaPlayer.release();    mediaPlayer=null;    actionBar.show();  }}  }
class C{  public Promise<T> onError(Action1<Throwable> error){  return new Promise<T>(this.observable.doOnError(error));}  }
class C{  public String convertAdditiveOperatorToString(EDataType eDataType,Object instanceValue){  return instanceValue == null ? null : instanceValue.toString();}  }
class C{  public void add(int position,String productImageUrl){  productImagesUrls.add(position,productImageUrl);  notifyItemInserted(position);}  }
class C{  @PUT @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @CheckPermission(roles={Role.TENANT_ADMIN}) @Path("/{id}/quota") public QuotaInfo updateQuota(@PathParam("id") URI id,QuotaUpdateParam param) throws DatabaseException {  Project project=getProjectById(id,true);  project.setQuotaEnabled(param.getEnable());  if (param.getEnable()) {    long quota_gb=(param.getQuotaInGb() != null) ? param.getQuotaInGb() : project.getQuota();    ArgValidator.checkFieldMinimum(quota_gb,0,"quota_gb","GB");    TenantOrg tenant=_dbClient.queryObject(TenantOrg.class,project.getTenantOrg().getURI());    if (tenant.getQuotaEnabled()) {      long totalProjects=CapacityUtils.totalProjectQuota(_dbClient,tenant.getId()) - project.getQuota() + quota_gb;      if (totalProjects > tenant.getQuota()) {        throw APIException.badRequests.invalidParameterProjectQuotaInvalidatesTenantQuota(tenant.getQuota());      }    }    project.setQuota(quota_gb);  }  _dbClient.persistObject(project);  return getQuota(project);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getDownloadIdValueDBDao() : null;}  }
class C{  public static void fill(int[] a,int fromIndex,int toIndex,int val){  rangeCheck(a.length,fromIndex,toIndex);  for (int i=fromIndex; i < toIndex; i++)   a[i]=val;}  }
class C{  public int transcribe(IPoint[] hull,int offset){  int idx=offset;  int sz=points.size();  for (int i=0; i < sz; i++) {    hull[idx++]=points.get(i);  }  return idx;}  }
class C{  public boolean isActive(){  return isActive(0);}  }
class C{  private void locateRuntimeDir(){  File bundleFile=null;  try {    bundleFile=FileLocator.getBundleFile(getBundle());  } catch (  IOException e) {  }  if ((null != bundleFile) && bundleFile.isDirectory()) {    runtimeDir=Paths.get(bundleFile.getAbsolutePath());    if (runtimeDir.toString().endsWith(ResourcesPathResolver.RESOURCES)) {      runtimeDir=runtimeDir.getParent().getParent().getParent().toAbsolutePath();    }  } else {    runtimeDir=Paths.get("");  }}  }
class C{  public T campaignId(String value){  setString(CAMPAIGN_ID,value);  return (T)this;}  }
class C{  private static String convertToUnixPath(String path){  return path.replaceAll("[\\\\]","/");}  }
class C{  private OptionalDouble(){  this.isPresent=false;  this.value=Double.NaN;}  }
class C{  public void reset(){  this.idRevDoc=null;  this.idUdoc=null;  this.titulo=null;  this.signaturaUdoc=null;  this.expedienteUdoc=null;  this.estado=1;  this.fEstado=null;  this.motivoRechazo=null;  this.observaciones=null;  this.idUsrGestor=null;  this.idAlta=null;  this.idRevDocSeleccionado=null;  this.ocultarMotivo=true;}  }
class C{  public ReferenceCount(final long refCount){  super(refCount,ReferenceCount.class);  if (this.getRaw() < 0) {    throw new IllegalArgumentException("reference counter can't be negative");  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode01.class,args);}  }
class C{  public static int uniform(int a,int b){  if (b <= a)   throw new IllegalArgumentException("Invalid range");  if ((long)b - a >= Integer.MAX_VALUE)   throw new IllegalArgumentException("Invalid range");  return a + uniform(b - a);}  }
class C{  private void trimPc(Node t){  for (  Node x : new LinkedList<>(pc.get(t))) {    if (!pc.containsKey(x)) {      pc.put(x,mmpc(x));    }    if (!pc.get(x).contains(t)) {      pc.get(t).remove(x);    }  }}  }
class C{  public void finish(){synchronized (this) {    spent=true;    if (currentID == request.size()) {      this.notifyAll();    }  }}  }
class C{  public final void saveCert(final String keyId,final byte[] certBytes) throws Exception {  String filePath=getCertPath(keyId).toString();  AtomicSave.execute(filePath,"tmpcert",null);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:48.600 -0500",hash_original_method="D5A60C39C845CE2458AA9D81FF0C97F9",hash_generated_method="7809D56E1A90252DAF5A9AE579827AF4") @DSVerified("callback modeled") @DSSafe(DSCat.ANDROID_CALLBACK) public void onCallForwardingIndicatorChanged(boolean cfi){}  }
class C{  public FakeHandler(Mode hostMode,Mode pageMode,int numInternalLinks,int numExternalLinks,int numHosts,int numPages){  this.numExternalLinks=numExternalLinks;  this.numInternalLinks=numInternalLinks;  this.numHosts=numHosts;  this.numPages=numPages;  this.hostMode=hostMode;  this.pageMode=pageMode;}  }
class C{  public static <S extends HasMouseStillDownHandlers & HasHandlers>void fire(S source,JavaScriptObject jsObj){  if (TYPE != null) {    MouseStillDownEvent event=new MouseStillDownEvent(jsObj);    source.fireEvent(event);  }}  }
class C{  public DataInputBuffer(final byte[] buf){  if (buf == null)   throw new IllegalArgumentException();  this.buf=buf;  this.off=this.origin=0;  this.limit=buf.length;}  }
class C{  public static void writeLines(final Collection<?> lines,String lineEnding,final OutputStream output,final Charset encoding) throws IOException {  if (lines == null) {    return;  }  if (lineEnding == null) {    lineEnding=IOUtils.LINE_SEPARATOR;  }  Charset cs=Charsets.toCharset(encoding);  for (  Object line : lines) {    if (line != null) {      output.write(line.toString().getBytes(cs));    }    output.write(lineEnding.getBytes(cs));  }}  }
class C{  public static boolean isDefault(final NamedElement element){  return element.getName() == null || (element.getName() != null && (element.getName().isEmpty() || element.getName().equalsIgnoreCase("default")));}  }
class C{  private void validateFrequencyBands(){  if (mStopFrequency1 >= mPassFrequencyBegin) {    throw new IllegalArgumentException("Stop band 1 ending frequency [" + mStopFrequency1 + "] must be less than the pass band start frequency ["+ mPassFrequencyBegin+ "]");  }  if (mPassFrequencyBegin >= mPassFrequencyEnd) {    throw new IllegalArgumentException("Pass band begin frequency [" + mPassFrequencyBegin + "] must be less than the pass band end frequency ["+ mPassFrequencyEnd+ "]");  }  if (mPassFrequencyEnd >= mStopFrequency2) {    throw new IllegalArgumentException("Pass band end frequency [" + mPassFrequencyEnd + "] must be less than stop band 2 beginning frequency ["+ mStopFrequency2+ "]");  }  if (mStopFrequency2 >= (mSampleRate / 2)) {    throw new IllegalArgumentException("Stop band 2 beginning frequency [" + mStopFrequency2 + "] must be less than half of the sample rate ["+ (mSampleRate / 2)+ "]");  }}  }
class C{  private static void closeSocket(Socket sock){  try {    sock.close();  } catch (  IOException ex) {  }}  }
class C{  public void release(){  releaseEglSurface();  if (mSurface != null) {    if (mReleaseSurface) {      mSurface.release();    }    mSurface=null;  }}  }
class C{  public DataSource createZoneNameDataSource(String hostName,Initiator initiator,StoragePort port,String nativeId,StorageSystem storageSystem){  Network network=new Network();  network.setNativeId(nativeId);  return createZoneNameDataSource(getHostByName(hostName),initiator,port,network,storageSystem);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:39.496 -0500",hash_original_method="54618FF47D2C419F49442C51D0DA0774",hash_generated_method="54618FF47D2C419F49442C51D0DA0774") int columnCountLocked(){  acquireReference();  try {    return nativeColumnCount(nStatement);  }  finally {    releaseReference();  }}  }
class C{  public static void addListNode(PsiElement parent,PsiElement newItem,ASTNode beforeThis,boolean isFirst,boolean isLast,boolean addWhitespace){  if (!FileModificationService.getInstance().preparePsiElementForWrite(parent)) {    return;  }  ASTNode node=parent.getNode();  assert node != null;  ASTNode itemNode=newItem.getNode();  assert itemNode != null;  Project project=parent.getProject();  PyElementGenerator gen=PyElementGenerator.getInstance(project);  if (!isFirst)   node.addChild(gen.createComma(),beforeThis);  node.addChild(itemNode,beforeThis);  if (!isLast)   node.addChild(gen.createComma(),beforeThis);  if (addWhitespace)   node.addChild(ASTFactory.whitespace(" "),beforeThis);}  }
class C{  public boolean reset(){  return m_handler.reset();}  }
class C{  public static <K extends Object,V extends Object>boolean addToListMap(Map<K,List<V>> map,K key,V value){  if (map == null) {    return false;  }  List<V> list=map.get(key);  if (list == null) {    list=new ArrayList<V>();    map.put(key,list);  }  if (!list.contains(value)) {    list.add(value);    return true;  }  return false;}  }
class C{  public PlanarYUVLuminanceSource buildLuminanceSource(byte[] data,int width,int height){  Rect rect=getFramingRectInPreview();  int previewFormat=configManager.getPreviewFormat();  String previewFormatString=configManager.getPreviewFormatString();switch (previewFormat) {case PixelFormat.YCbCr_420_SP:case PixelFormat.YCbCr_422_SP:    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());default :  if ("yuv420p".equals(previewFormatString)) {    return new PlanarYUVLuminanceSource(data,width,height,rect.left,rect.top,rect.width(),rect.height());  }}throw new IllegalArgumentException("Unsupported picture format: " + previewFormat + '/'+ previewFormatString);}  }
class C{  public void visitAttribute(Attribute attr){  if (cv != null) {    cv.visitAttribute(attr);  }}  }
class C{  public String func(Boolean arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  public String map(String in){  int lin=in.lastIndexOf('/');  String className=lin == -1 ? in : in.substring(lin + 1);  if (lin == -1) {    return map.getOrDefault(in,in);  } else {    String newClassName=map.getOrDefault(in,className);    int nlin=newClassName.lastIndexOf('/');    newClassName=nlin == -1 ? newClassName : newClassName.substring(nlin + 1);    return mapPackage(in.substring(0,lin)) + "/" + newClassName;  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:17.716 -0400",hash_original_method="E9F5B62F706233C2ADF039E35300834B",hash_generated_method="152218E268EE18A51688E0EF9E7A2E28") private E firstDataItem(){  for (Node p=head; p != null; p=succ(p)) {    Object item=p.item;    if (p.isData) {      if (item != null && item != p)       return LinkedTransferQueue.<E>cast(item);    } else     if (item == null)     return null;  }  return null;}  }
class C{  private void startADB(){  adb("start-server");}  }
class C{  static final String arrayToRLEString(short[] a){  StringBuffer buffer=new StringBuffer();  buffer.append((char)(a.length >> 16));  buffer.append((char)a.length);  short runValue=a[0];  int runLength=1;  for (int i=1; i < a.length; ++i) {    short s=a[i];    if (s == runValue && runLength < 0xFFFF)     ++runLength; else {      encodeRun(buffer,runValue,runLength);      runValue=s;      runLength=1;    }  }  encodeRun(buffer,runValue,runLength);  return buffer.toString();}  }
class C{  @Override public void run(){  amIActive=true;  String inputFilesString=null;  String[] pointFiles;  double x, y;  double z;  int intensity;  byte classValue, numReturns, returnNum;  int a, n;  int progress;  int numPoints;  FileWriter fw=null;  BufferedWriter bw=null;  PrintWriter out=null;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  if ((inputFilesString.length() <= 0)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    pointFiles=inputFilesString.split(";");    int numPointFiles=pointFiles.length;    long numPointsInFile=0;    PointRecord point;    for (int j=0; j < numPointFiles; j++) {      LASReader las=new LASReader(pointFiles[j]);      long oneHundredthTotal=las.getNumPointRecords() / 100;      File file=new File(pointFiles[j].replace(".las",".txt"));      if (file.exists()) {        file.delete();      }      fw=new FileWriter(file,false);      bw=new BufferedWriter(fw);      out=new PrintWriter(bw,true);      progress=(int)((j + 1) * 100d / numPointFiles);      updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);      numPointsInFile=las.getNumPointRecords();      numPoints=0;      n=0;      progress=0;      for (a=0; a < numPointsInFile; a++) {        point=las.getPointRecord(a);        if (!point.isPointWithheld()) {          x=point.getX();          y=point.getY();          z=point.getZ();          intensity=point.getIntensity();          classValue=point.getClassification();          returnNum=point.getReturnNumber();          numReturns=point.getNumberOfReturns();          out.println((a + 1) + " " + x+ " "+ y+ " "+ z+ " "+ intensity+ " "+ classValue+ " "+ returnNum+ " "+ numReturns);          numPoints++;        }        n++;        if (n >= oneHundredthTotal) {          n=0;          if (cancelOp) {            cancelOperation();            return;          }          progress++;          updateProgress("Loop " + (j + 1) + " of "+ numPointFiles+ ":",progress);        }      }    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    if (out != null || bw != null) {      out.flush();      out.close();    }    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public final synchronized void lock() throws InterruptedException {  while (locked) {    wait();  }  locked=true;}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public void stop() throws IgniteException {  if (stopped)   throw new IgniteException("Attempted to stop an already stopped JMS Streamer");  try {    stopped=true;    if (scheduler != null && !scheduler.isShutdown()) {      scheduler.shutdown();      scheduler=null;    }    connection.stop();    connection.close();    for (    Session s : sessions) {      s.close();    }    sessions.clear();    consumers.clear();    listeners.clear();  } catch (  Throwable t) {    throw new IgniteException("Exception while stopping JmsStreamer",t);  }}  }
class C{  public void removeSection(final Section SECTION){  if (null == SECTION)   return;  sections.remove(SECTION);  Collections.sort(sections,new SectionComparator());  fireUpdateEvent(SECTION_EVENT);}  }
class C{  public static URI createUriFromServerSet(Set<InetSocketAddress> serverInetSet,String path,String protocol) throws URISyntaxException {  InetSocketAddress inetSocketAddress=ServiceUtils.selectRandomItem(serverInetSet);  String address=inetSocketAddress.getHostString();  int port=inetSocketAddress.getPort();  URI uri=new URI(protocol,null,address,port,path,null,null);  return uri;}  }
class C{  public ArrayList<byte[]> readFromReceiver(Context context,int size){  ArrayList<byte[]> bufferedMessages=null;  byte[] readFromDevice=new byte[1024];  int read=0;  if (size >= 0) {    log.debug("readFromReceiver!! a leer " + size + " bytes!!");    try {      read=mSerialDevice.read(readFromDevice);    } catch (    Exception e) {      Log.e(TAG,"Unable to read from serial device",e);      log.error("Unable to read from serial device",e);      return null;    }  }  if (read > 0) {    Log.d("medtronic","READ " + read);    log.debug("Stream Received; bytes read: " + read);  } else   log.debug("NOTHING TO READ");  if (read > 0) {    SharedPreferences.Editor editor=settings.edit();    editor.putLong("lastDestroy",System.currentTimeMillis());    editor.commit();    try {      bufferedMessages=parseMessageData(Arrays.copyOfRange(readFromDevice,0,read),read);      checkCalibrationOutOfTime();    } catch (    Exception e) {      StringBuffer sb1=new StringBuffer("");      sb1.append("EXCEPTION!!!!!! " + e.getMessage() + " "+ e.getCause());      for (      StackTraceElement st : e.getStackTrace()) {        sb1.append(st.toString());      }      sendMessageToUI(sb1.toString(),false);      bufferedMessages=new ArrayList<byte[]>();    }  }  return bufferedMessages;}  }
class C{  public boolean writeToNode(Short nodeId,SyncMessage bsm) throws InterruptedException {  if (nodeId == null)   return false;  NodeConnection nc=connections.get(nodeId);  if (nc != null && nc.state == NodeConnectionState.CONNECTED) {    waitForMessageWindow(bsm.getType(),nodeId,0);    nc.nodeChannel.write(bsm);    return true;  }  return false;}  }
class C{  public void initDbClient(){  try {    System.out.println("Initializing db client ...");    _dbClient.start();  } catch (  Exception e) {    System.err.println("Caught Exception: " + e);    log.error("Caught Exception: ",e);  }}  }
class C{  public SnmpOid toOid(){  throw new IllegalArgumentException();}  }
class C{  public double residue(double pole){  return N.evaluate(pole) / D.derivative().evaluate(pole);}  }
class C{  protected void sendFunctionGroup3(){  sendUpdate();}  }
class C{  protected void removeFromMarkedPosition(){  System.arraycopy(buffer,read_pos,buffer,marked_pos,read_pos_end - read_pos);  read_pos_end-=(read_pos - marked_pos);  read_pos=marked_pos;}  }
class C{  public Plane(float width,float height,int segmentsW,int segmentsH,Axis upAxis,boolean createTextureCoordinates,boolean createVertexColorBuffer){  this(width,height,segmentsW,segmentsH,upAxis,createTextureCoordinates,createVertexColorBuffer,1);}  }
class C{  public void testSetScenarioAuditExecutionListMax(){  System.out.println("setScenarioAuditExecutionListMax");  AuditServiceThreadQueueImpl instance=new AuditServiceThreadQueueImpl();  int scenarioAuditExecutionListMax=10;  instance.setScenarioAuditExecutionListMax(scenarioAuditExecutionListMax);  assertEquals(scenarioAuditExecutionListMax,instance.getScenarioAuditExecutionListMax());}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Nonnull @CheckReturnValue public static <T,R>LifecycleTransformer<T> bind(@Nonnull Observable<R> lifecycle,@Nonnull final Func1<R,R> correspondingEvents){  checkNotNull(lifecycle,"lifecycle == null");  checkNotNull(correspondingEvents,"correspondingEvents == null");  return new UntilCorrespondingEventObservableTransformer<>(lifecycle.share(),correspondingEvents);}  }
class C{  public AlgorithmTerminationException(Algorithm algorithm){  super(algorithm);}  }
class C{  public boolean initialise(){  initialised=true;  if (error != null) {    return false;  }  if (type == 0) {    type=TYPE_HEADER;  }switch (type) {case TYPE_SERVER_PORT:    initNumericValue();  break;case TYPE_TIME:initNumericValue();break;case TYPE_TIME_YEAR:initNumericValue();break;case TYPE_TIME_MONTH:initNumericValue();break;case TYPE_TIME_DAY_OF_MONTH:initNumericValue();break;case TYPE_TIME_DAY_OF_WEEK:initNumericValue();break;case TYPE_TIME_AMPM:initNumericValue();break;case TYPE_TIME_HOUR_OF_DAY:initNumericValue();break;case TYPE_TIME_MINUTE:initNumericValue();break;case TYPE_TIME_SECOND:initNumericValue();break;case TYPE_TIME_MILLISECOND:initNumericValue();break;case TYPE_CONTENT_LENGTH:initNumericValue();break;case TYPE_LOCAL_PORT:initNumericValue();break;case TYPE_USER_IN_ROLE:if (StringUtils.isBlank(name)) {name=strValue;}break;case TYPE_SESSION_ATTRIBUTE:if (StringUtils.isBlank(name)) {setError("you must set a name for session attributes");}initStringValue();break;case TYPE_ATTRIBUTE:if (StringUtils.isBlank(name)) {setError("you must set a name for attributes");}initStringValue();break;case TYPE_HEADER:if (StringUtils.isBlank(name)) {setError("you must set a name for a header");}initStringValue();break;default :initStringValue();}if (log.isDebugEnabled()) {log.debug("loaded condition " + getType() + " "+ name+ " "+ strValue);}valid=error == null;return valid;}  }
class C{  public static CommandResult execCommand(String command,boolean isRoot,boolean isNeedResultMsg){  return execCommand(new String[]{command},isRoot,isNeedResultMsg);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static boolean checkImageIndex(){  if (_indexChanged) {    int result=JOptionPane.showConfirmDialog(null,Bundle.getMessage("SaveImageIndex"),Bundle.getMessage("question"),JOptionPane.YES_NO_CANCEL_OPTION,JOptionPane.QUESTION_MESSAGE);    if (result == JOptionPane.YES_OPTION) {      storeImageIndex();      return true;    } else     if (result == JOptionPane.NO_OPTION) {      indexChanged(false);    }  }  return false;}  }
class C{  @Override public void modifyVariableId(String oldId,String newId){  if (baseVar.equals(oldId)) {    baseVar=newId.replace("'","");  }}  }
class C{  protected void continueOutputProcessingView(boolean doOutput,boolean forceUpdate){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".continueOutputProcessingView");  }  witnessedFirst=false;}  }
class C{  private void applyAliasToStoragePortRestRep(StoragePortRestRep storagePortRestRep){  if (dbClient == null) {    return;  }  URIQueryResultList uriList=new URIQueryResultList();  dbClient.queryByConstraint(AlternateIdConstraint.Factory.getFCEndpointRemotePortNameConstraint(storagePortRestRep.getPortNetworkId()),uriList);  for (  URI uri : uriList) {    FCEndpoint ep=dbClient.queryObject(FCEndpoint.class,uri);    if (ep != null && !StringUtils.isEmpty(ep.getRemotePortAlias())) {      storagePortRestRep.setPortAlias(ep.getRemotePortAlias());    }  }}  }
class C{  public static String[] createFixedRandomStrings(int count){  String[] strings=new String[count];  Random lengthRandom=new Random();  lengthRandom.setSeed(SEED);  Random stringRandom=new Random();  stringRandom.setSeed(SEED);  for (int i=0; i < count; i++) {    int nextLength=lengthRandom.nextInt(MAX_LENGTH - MIN_LENGTH - 1);    nextLength+=MIN_LENGTH;    strings[i]=RandomStringUtils.random(nextLength,0,CHARS.length,true,true,CHARS,stringRandom);  }  return strings;}  }
class C{  public void testGatherPerfMetrics() throws Exception {  if (versionMeetsMinimum(4,1)) {    try {      Properties props=new Properties();      props.put("autoReconnect","true");      props.put("relaxAutoCommit","true");      props.put("logSlowQueries","true");      props.put("slowQueryThresholdMillis","2000");      props.put("gatherPerfMetrics","true");      props.put("reportMetricsIntervalMillis","3000");      Connection conn1=getConnectionWithProps(props);      Statement stmt1=conn1.createStatement();      ResultSet rs1=stmt1.executeQuery("SELECT 1");      rs1.next();      conn1.close();    } catch (    NullPointerException e) {      e.printStackTrace();      fail();    }  }}  }
class C{  public Swarm stop() throws Exception {  if (this.server == null) {    throw SwarmMessages.MESSAGES.containerNotStarted("stop()");  }  Module module=Module.getBootModuleLoader().loadModule(ModuleIdentifier.create("swarm.container"));  Class<?> shutdownClass=module.getClassLoader().loadClass("org.wildfly.swarm.container.runtime.WeldShutdownImpl");  WeldShutdown shutdown=(WeldShutdown)shutdownClass.newInstance();  shutdown.shutdown();  this.server.stop();  this.server=null;  return this;}  }
class C{  private TimestampInequalityRule(final String inequalitySymbol,final String value){  super();  this.inequalitySymbol=inequalitySymbol;  boolean dateFormatFound=false;  for (  SimpleDateFormat df : DATE_FORMATS) {    try {      Date parse=df.parse(value);      timeStamp=parse.getTime();      dateFormatFound=true;      LOGGER.debug(String.format("Date format for %s detected: %s",value,df.toPattern()));      break;    } catch (    ParseException pe) {    }  }  if (!dateFormatFound) {    for (    SimpleDateFormat df : TIME_FORMATS) {      try {        Date parse=df.parse(value);        GregorianCalendar calendar=new GregorianCalendar();        calendar.setTime(parse);        GregorianCalendar todayCal=new GregorianCalendar();        todayCal.set(Calendar.HOUR_OF_DAY,calendar.get(Calendar.HOUR_OF_DAY));        todayCal.set(Calendar.MINUTE,calendar.get(Calendar.MINUTE));        todayCal.set(Calendar.SECOND,calendar.get(Calendar.SECOND));        todayCal.set(Calendar.MILLISECOND,calendar.get(Calendar.MILLISECOND));        timeStamp=todayCal.getTimeInMillis();        LOGGER.debug(String.format("Date format for %s detected: %s",value,df.toPattern()));        dateFormatFound=true;        break;      } catch (      ParseException pe) {      }    }  }  if (!dateFormatFound) {    long count=-1;    long unit=0;    if (value.matches("-\\d+m(in)?") || value.matches("-\\d+minutes?")) {      Matcher matcher=Pattern.compile("-(\\d+)m(in)?").matcher(value);      if (matcher.find()) {        count=Integer.parseInt(matcher.group(1));        unit=60 * 1000;        LOGGER.debug(String.format("Date format is -%d minutes",count));      }    } else     if (value.matches("-\\d+h(ours?)?")) {      Matcher matcher=Pattern.compile("-(\\d+)h(ours?)?").matcher(value);      if (matcher.find()) {        count=Integer.parseInt(matcher.group(1));        unit=60 * 60 * 1000;        LOGGER.debug(String.format("Date format is -%d hours",count));      }    } else     if (value.matches("-\\d+d(ays?)?")) {      Matcher matcher=Pattern.compile("-(\\d+)d(ays?)?").matcher(value);      if (matcher.find()) {        count=Integer.parseInt(matcher.group(1));        unit=24 * 60 * 60* 1000;        LOGGER.debug(String.format("Date format is -%d days",count));      }    }    if (count > 0) {      timeStamp=System.currentTimeMillis() - (count * unit);      dateFormatFound=true;    }  }  if (!dateFormatFound) {    LOGGER.debug(String.format("Date format for %s is not found",value));    throw new IllegalArgumentException("Could not parse date: " + value);  }}  }
class C{  public LR1Item merge(LR1Item item){  if (!kernel.equals(item.kernel))   throw new IllegalArgumentException("Only items with equal LR(0) kernel can be merged!");  return new LR1Item(kernel.production,kernel.position,lookaheads.plusAll(item.lookaheads));}  }
class C{  static Object removeAll(final Object array,final int... indices){  final int length=getLength(array);  int diff=0;  if (isNotEmpty(indices)) {    Arrays.sort(indices);    int i=indices.length;    int prevIndex=length;    while (--i >= 0) {      final int index=indices[i];      if (index < 0 || index >= length) {        throw new IndexOutOfBoundsException("Index: " + index + ", Length: "+ length);      }      if (index >= prevIndex) {        continue;      }      diff++;      prevIndex=index;    }  }  final Object result=Array.newInstance(array.getClass().getComponentType(),length - diff);  if (diff < length) {    int end=length;    int dest=length - diff;    for (int i=indices.length - 1; i >= 0; i--) {      final int index=indices[i];      if (end - index > 1) {        final int cp=end - index - 1;        dest-=cp;        System.arraycopy(array,index + 1,result,dest,cp);      }      end=index;    }    if (end > 0) {      System.arraycopy(array,0,result,0,end);    }  }  return result;}  }
class C{  public static void main(String[] args){  BowlingBall simulation=new BowlingBall();  simulation.run();}  }
class C{  public ColorAnimator(String group){  super(group);  setColorFields(DEFAULTS);}  }
class C{  public boolean containsAll(Collection<Taxon> taxa){  for (  Taxon taxon : taxa) {    if (!taxa.contains(taxon)) {      return false;    }  }  return true;}  }
class C{  public void add(FactoryAnnotatedClass toInsert) throws ProcessingException {  FactoryAnnotatedClass existing=itemsMap.get(toInsert.getId());  if (existing != null) {    throw new ProcessingException(toInsert.getTypeElement(),"Conflict: The class %s is annotated with @%s with id ='%s' but %s already uses the same id",toInsert.getTypeElement().getQualifiedName().toString(),Factory.class.getSimpleName(),toInsert.getId(),existing.getTypeElement().getQualifiedName().toString());  }  itemsMap.put(toInsert.getId(),toInsert);}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  public static void createAllTables(SQLiteDatabase db,boolean ifNotExists){  SimpleAddressItemDao.createTable(db,ifNotExists);  AddressItemDao.createTable(db,ifNotExists);  ContactDao.createTable(db,ifNotExists);  AddressBookDao.createTable(db,ifNotExists);}  }
class C{  public byte[] readNextPart() throws JPlagException {  if (remainingBytes == 0) {    throw new JPlagException("downloadException","There's nothing left to be downloaded!","");  }  try {    FileInputStream in=new FileInputStream(file);    in.skip(filesize - remainingBytes);    int partsize=remainingBytes;    if (partsize > 81920)     partsize=81920;    byte[] data=new byte[partsize];    in.read(data);    in.close();    remainingBytes-=partsize;    return data;  } catch (  IOException e) {    e.printStackTrace();    throw new JPlagException("downloadException","Unable to read" + " submission part from server!","");  }}  }
class C{  @Override public boolean isEmpty(){  return count == 0;}  }
class C{  public Range union(Range range){  if (range == null) {    return new Range(from,to);  }  long unionFrom=min(from,range.getFrom());  long unionTo=max(to,range.getTo());  return new Range(unionFrom,unionTo);}  }
class C{  protected boolean isSendBufferSizeChanged(){  return true;}  }
class C{  public NotificationChain basicSetStep(Step newStep,NotificationChain msgs){  Step oldStep=step;  step=newStep;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.CALL__STEP,oldStep,newStep);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.941 -0500",hash_original_method="86625BE6BC74680BCE9F9FD0AA53BF54",hash_generated_method="8AE8656DED621D60E849739B60BF3CA8") @DSVerified @DSSafe(DSCat.IO) public boolean logout() throws IOException {  return SMTPReply.isPositiveCompletion(quit());}  }
class C{  public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#startElement: " + qName);  if (m_contentHandler != null) {    m_contentHandler.startElement(uri,localName,qName,atts);  }}  }
class C{  private void heartBeat(){  try {    Long newHeartBeat=System.currentTimeMillis();    dataManager.putData(getHeartBeatPath(uniqueId),newHeartBeat);  } catch (  Exception e) {    log.error("Error updating Engine " + uniqueId + " HeartBeat",e);  }}  }
class C{  public ServiceTrackerImpl(Class<C> type,Class<? extends C> defaultImplClass){  this.defaultImplClass=defaultImplClass;  this.type=type;}  }
class C{  public URL find(String classname){  String jarname="/" + classname.replace('.','/') + ".class";  return thisClass.getResource(jarname);}  }
class C{  public void addRelatedTo(RelatedTo relatedTo){  addProperty(relatedTo);}  }
class C{  public void clear(AbsoluteTableIdentifier absoluteTableIdentifier){  tableLockMap.remove(absoluteTableIdentifier);  tableSegmentMap.remove(absoluteTableIdentifier);}  }
class C{  public String selectHeaderContentType(String[] contentTypes){  if (contentTypes.length == 0)   return "application/json";  if (StringUtil.containsIgnoreCase(contentTypes,"application/json"))   return "application/json";  return contentTypes[0];}  }
class C{  public static void symmetricIntersection(DBIDs first,DBIDs second,HashSetModifiableDBIDs firstonly,HashSetModifiableDBIDs intersection,HashSetModifiableDBIDs secondonly){  if (first.size() > second.size()) {    symmetricIntersection(second,first,secondonly,intersection,firstonly);    return;  }  assert (firstonly.size() == 0) : "OUTPUT set should be empty!";  assert (intersection.size() == 0) : "OUTPUT set should be empty!";  assert (secondonly.size() == 0) : "OUTPUT set should be empty!";  secondonly.addDBIDs(second);  for (DBIDIter it=first.iter(); it.valid(); it.advance()) {    if (secondonly.remove(it)) {      intersection.add(it);    } else {      firstonly.add(it);    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:40.141 -0500",hash_original_method="45B3269BE626BB87F4C05CA0ACD29C39",hash_generated_method="4CCEDD75E9105676A0753C8872D2F662") private static int parseViolationFromMessage(String message){  return message.getTaintInt();}  }
class C{  public Sin(){  super(Number.class,Number.class);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:02:38.083 -0400",hash_original_method="0290D4AD50FF3D928893DFCC7EB99280",hash_generated_method="7FE8186B2C1EF4B60A25EB8E183869E7") private DigestMD5SaslClient(String authorizationId,String protocol,String serverName,Map props,CallbackHandler cbh){  m_authorizationId=authorizationId;  m_protocol=protocol;  m_serverName=serverName;  m_props=props;  m_cbh=cbh;  m_state=STATE_INITIAL;}  }
class C{  public static void writeWorld(World world,CompoundTag compound){  UUID worldUUID=world.getUID();  compound.putLong("WorldUUIDMost",worldUUID.getMostSignificantBits());  compound.putLong("WorldUUIDLeast",worldUUID.getLeastSignificantBits());  compound.putInt("Dimension",world.getEnvironment().getId());}  }
class C{  public static SearchInformation createTitledKeywordSearch(String query,String xml,MediaType media,String title){  return new SearchInformation(KEYWORD,query,xml,media,title);}  }
class C{  protected void assembleSystemMenu(){}  }
class C{  public int elevationAt(float lat,float lon){  if (frame_is_valid == true) {    if (lat >= dsi.sw_lat && lat <= dsi.ne_lat && lon >= dsi.sw_lon && lon <= dsi.ne_lon) {      int lat_index=Math.round((lat - dsi.sw_lat) * 36000 / uhl.lat_post_interval);      int lon_index=Math.round((lon - dsi.sw_lon) * 36000 / uhl.lon_post_interval);      if (elevations[lon_index] == null)       readDataRecord(lon_index);      return (int)elevations[lon_index][lat_index];    }  }  return -32767;}  }
class C{  public AbstractResource<E> init(){  if (log.isInfoEnabled())   log.info(toString());  return this;}  }
class C{  private void labelIsolatedEdges(int thisIndex,int targetIndex){  for (Iterator ei=arg[thisIndex].getEdgeIterator(); ei.hasNext(); ) {    Edge e=(Edge)ei.next();    if (e.isIsolated()) {      labelIsolatedEdge(e,targetIndex,arg[targetIndex].getGeometry());      isolatedEdges.add(e);    }  }}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.CONSTRAINT___ANONYMOUS_CONSTRAINT_11:    return getAnonymous_constraint_1_1();case UmplePackage.CONSTRAINT___CONSTRAINT_BODY_1:  return getConstraintBody_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) @SideOnly(Side.CLIENT) public void addInformation(ItemStack p_77624_1_,EntityPlayer p_77624_2_,List p_77624_3_,boolean p_77624_4_){  p_77624_3_.add(this.getRecordNameLocal());  InfoNC.infoFull(p_77624_3_,info);}  }
class C{  public static void restartApplicationWithIntent(Activity activity,Intent intent){  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);  activity.finish();  activity.startActivity(intent);  killCurrentProcess();}  }
class C{  public ConnectionConfig(jmri.jmrix.SerialPortAdapter p){  super(p);}  }
class C{  private Object executeMinus(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return new Double(Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getLeft(),row)) - Caster.toDoubleValue(executeExp(pc,sql,qr,expression.getRight(),row)));}  }
class C{  public static <X extends Exception>void toString(Iteration<?,X> iter,String separator,StringBuilder sb) throws X {  while (iter.hasNext()) {    sb.append(iter.next());    if (iter.hasNext()) {      sb.append(separator);    }  }}  }
class C{  public int value(){  String s=toString();  String[] part=s.split("\\s",10);  int val=-1;  try {    int tmp=Integer.valueOf(part[8],10).intValue();    val=tmp;  } catch (  Exception e) {    log.error("Unable to get number from reply: \"" + s + "\"");  }  return val;}  }
class C{  public static void mergeSort(int fromIndex,int toIndex,IntComparator c,Swapper swapper){  int length=toIndex - fromIndex;  if (length < SMALL) {    for (int i=fromIndex; i < toIndex; i++) {      for (int j=i; j > fromIndex && (c.compare(j - 1,j) > 0); j--) {        swapper.swap(j,j - 1);      }    }    return;  }  int mid=(fromIndex + toIndex) / 2;  mergeSort(fromIndex,mid,c,swapper);  mergeSort(mid,toIndex,c,swapper);  if (c.compare(mid - 1,mid) <= 0)   return;  inplace_merge(fromIndex,mid,toIndex,c,swapper);}  }
class C{  @Override public void putMessage(Message m){  long idOfCurrentThread=Thread.currentThread().getId();  boolean inLowerThreadCurrently=idOfCurrentThread == idOfLowerThread ? true : false;  ExtendedRoad messageTargetRoad=null;  PVehicle vehicle=(PVehicle)((EventMessage)m).vehicle;  ExtendedRoad receivingRoad=(ExtendedRoad)m.getReceivingUnit();  ExtendedRoad currentRoad=receivingRoad;  ExtendedRoad nextRoad=receivingRoad;  Id tempLinkId=null;  if (m instanceof EnterRoadMessage) {    tempLinkId=vehicle.getCurrentLinkId();    if (tempLinkId != null) {      currentRoad=(ExtendedRoad)Road.getRoad(tempLinkId);    }    messageTargetRoad=currentRoad;  } else   if (m instanceof LeaveRoadMessage) {    messageTargetRoad=receivingRoad;  } else   if (m instanceof EndRoadMessage) {    tempLinkId=vehicle.getNextLinkInLeg();    if (tempLinkId != null) {      nextRoad=(ExtendedRoad)Road.getRoad(tempLinkId);    }    messageTargetRoad=nextRoad;  } else   if (m instanceof DeadlockPreventionMessage) {    messageTargetRoad=receivingRoad;  } else   if (m instanceof StartingLegMessage) {    if (vehicle.getCurrentLeg().getMode().equals(TransportMode.car)) {      tempLinkId=vehicle.getCurrentLinkId();      if (tempLinkId != null) {        currentRoad=(ExtendedRoad)Road.getRoad(tempLinkId);      }      messageTargetRoad=currentRoad;    } else {      tempLinkId=vehicle.getNextLinkInLeg();      if (tempLinkId != null) {        nextRoad=(ExtendedRoad)Road.getRoad(tempLinkId);      }      messageTargetRoad=nextRoad;    }  } else   if (m instanceof EndLegMessage) {    messageTargetRoad=currentRoad;  } else {    assert (false);  }  boolean roadBelongsToLowerThreadZone=messageTargetRoad.getThreadZoneId() == 0 ? true : false;  if (roadBelongsToLowerThreadZone) {    if (inLowerThreadCurrently) {      queueThread1.add(m);    } else {synchronized (bufferThread1) {        bufferThread1.add(m);      }    }  } else {    if (!inLowerThreadCurrently) {      queueThread2.add(m);    } else {synchronized (bufferThread2) {        bufferThread2.add(m);      }    }  }}  }
class C{  public void testLogFilesTwoNodes() throws Exception {  checkOneNode(0);  checkOneNode(1);}  }
class C{  public void run(){}  }
class C{  public NaiveTokenizer(){  this(true);}  }
class C{  public static char caseFold(char c){  if (cases.containsKey(c)) {    return cases.get(c);  }  return c;}  }
class C{  private void drawDays(){  Calendar tmpCalendar=(Calendar)calendar.clone();  tmpCalendar.set(Calendar.HOUR_OF_DAY,0);  tmpCalendar.set(Calendar.MINUTE,0);  tmpCalendar.set(Calendar.SECOND,0);  tmpCalendar.set(Calendar.MILLISECOND,0);  int firstDayOfWeek=tmpCalendar.getFirstDayOfWeek();  tmpCalendar.set(Calendar.DAY_OF_MONTH,1);  int firstDay=tmpCalendar.get(Calendar.DAY_OF_WEEK) - firstDayOfWeek;  if (firstDay < 0) {    firstDay+=7;  }  tmpCalendar.add(Calendar.MONTH,-1);  int lastDayOfPreviousMonth=tmpCalendar.getActualMaximum(Calendar.DAY_OF_MONTH);  tmpCalendar.add(Calendar.MONTH,1);  int i;  for (i=0; i < firstDay; i++) {    days[i + 7].setEnabled(false);    days[i + 7].setText(Integer.toString(lastDayOfPreviousMonth - firstDay + i + 1));    days[i + 7].setVisible(true);  }  tmpCalendar.add(Calendar.MONTH,1);  Date firstDayInNextMonth=tmpCalendar.getTime();  tmpCalendar.add(Calendar.MONTH,-1);  Date day=tmpCalendar.getTime();  int n=0;  Color foregroundColor=getForeground();  while (day.before(firstDayInNextMonth)) {    days[i + n + 7].setText(Integer.toString(n + 1));    days[i + n + 7].setVisible(true);    if ((tmpCalendar.get(Calendar.DAY_OF_YEAR) == today.get(Calendar.DAY_OF_YEAR)) && (tmpCalendar.get(Calendar.YEAR) == today.get(Calendar.YEAR))) {      days[i + n + 7].setForeground(sundayForeground);    } else {      days[i + n + 7].setForeground(foregroundColor);    }    if ((n + 1) == this.day) {      days[i + n + 7].setBackground(selectedColor);      days[i + n + 7].setBorderPainted(true);      selectedDay=days[i + n + 7];    } else {      days[i + n + 7].setBackground(transparentBackgroundColor);      days[i + n + 7].setBorderPainted(false);    }    days[i + n + 7].setEnabled(true);    n++;    tmpCalendar.add(Calendar.DATE,1);    day=tmpCalendar.getTime();  }  int actualDays=n;  while ((n + i) % 7 != 0) {    days[i + n + 7].setText(Integer.toString(n + 1 - actualDays));    days[i + n + 7].setEnabled(false);    days[i + n + 7].setVisible(true);    n++;  }  for (int k=n + i + 7; k < 49; k++) {    days[k].setVisible(false);    days[k].setText("");  }}  }
class C{  private Object sendToFilter(String transformation,long seqno,int row,String schema,String table,String column,Object value) throws ReplicatorException {  try {    String str=valueToString(value);    String send=messageGenerator.filter(transformation,seqno,row,schema,table,column,str);    toServer.print(send);    toServer.flush();    String header=fromServer.readLine();    if (logger.isDebugEnabled())     logger.debug("Received header: " + header);    if (header == null)     throw new ReplicatorException("Server didn't send response to a filter request: " + send);    JSONObject obj=(JSONObject)parser.parse(header);    long payloadLen=(Long)obj.get("payload");    if (logger.isDebugEnabled())     logger.debug("Payload length: " + payloadLen);    String payload=NetworkClientFilter.Protocol.readPayload(fromServer,(int)payloadLen);    if (logger.isDebugEnabled())     logger.debug("Received payload: " + payload);    String type=(String)obj.get("type");    long newSeqno=(Long)obj.get("seqno");    long newRow=(Long)obj.get("row");    String newSchema=(String)obj.get("schema");    String newTable=(String)obj.get("table");    long returnCode=(Long)obj.get("return");    String service=(String)obj.get("service");    validateMessage(Protocol.TYPE_FILTERED,type,returnCode,service,payload);    if (newSeqno != seqno)     throw new ReplicatorException("Expected to receive seqno " + seqno + ", but server sent "+ newSeqno+ " instead: "+ header+ payload);    if (newRow != row)     throw new ReplicatorException("Expected to receive row " + row + ", but server sent "+ newRow+ " instead: "+ header+ payload);    if (!newSchema.equals(schema))     throw new ReplicatorException("Expected to receive schema " + schema + ", but server sent "+ newSchema+ " instead: "+ header+ payload);    if (!newTable.equals(table))     throw new ReplicatorException("Expected to receive table " + table + ", but server sent "+ newTable+ " instead: "+ header+ payload);    return stringToValue(value,payload);  } catch (  ParseException e) {    throw new ReplicatorException("Server returned an invalid message during prepare-acknowledged message handshake: " + e,e);  }catch (  IOException e) {    throw new ReplicatorException("prepare-acknowledged message handshake failed: " + e,e);  }}  }
class C{  public void registerObjectsForNotification(final List<Observer> observers){  for (  Observer observer : observers) {    if (observer != null) {      registrator.setObserver(observer);    }  }}  }
class C{  private boolean checkIfDefaultText(String value){  boolean defaultText=false;  List<String> defaultTexts=new ArrayList<>();  String defaultTextLang1=getProperty(KEY_IMPRINT_DESCRIPTION,getLocale());  defaultTexts.add(defaultTextLang1);  String defaultTextLang2=JSFUtils.getText(KEY_IMPRINT_DESCRIPTION,null);  defaultTexts.add(defaultTextLang2);  if (defaultTexts.contains(value)) {    defaultText=true;  }  return defaultText;}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Vec2D constrain(Rect r){  x=MathUtils.clip(x,r.x,r.x + r.width);  y=MathUtils.clip(y,r.y,r.y + r.height);  return this;}  }
class C{  static boolean isVMMultidexCapable(String versionString){  boolean isMultidexCapable=false;  if (versionString != null) {    Matcher matcher=Pattern.compile("(\\d+)\\.(\\d+)(\\.\\d+)?").matcher(versionString);    if (matcher.matches()) {      try {        int major=Integer.parseInt(matcher.group(1));        int minor=Integer.parseInt(matcher.group(2));        isMultidexCapable=(major > VM_WITH_MULTIDEX_VERSION_MAJOR) || ((major == VM_WITH_MULTIDEX_VERSION_MAJOR) && (minor >= VM_WITH_MULTIDEX_VERSION_MINOR));      } catch (      NumberFormatException e) {      }    }  }  Log.i(TAG,"VM with version " + versionString + (isMultidexCapable ? " has multidex support" : " does not have multidex support"));  return isMultidexCapable;}  }
class C{  public void showContent(){  mSlidingMenu.showContent();}  }
class C{  public static double clamp(double d,double min,double max){  if (d < min)   return min; else   if (d > max)   return max; else   return d;}  }
class C{  public NumberTickUnit(double size,NumberFormat formatter){  super(size);  ParamChecks.nullNotPermitted(formatter,"formatter");  this.formatter=formatter;}  }
class C{  protected void logAkkaConfiguration(){  ConfigRenderOptions renderOpts=ConfigRenderOptions.defaults().setOriginComments(false).setComments(false).setJson(false);  String configString=ConfigFactory.load().root().render(renderOpts);  log.info("akka configuration:");  log.info(configString);}  }
class C{  public CompareToBuilder append(final int lhs,final int rhs){  if (comparison != 0) {    return this;  }  comparison=((lhs < rhs) ? -1 : ((lhs > rhs) ? 1 : 0));  return this;}  }
class C{  public MyVehicleIdentifier(double lowerThreshold,double upperThreshold){  this.lowerThreshold=lowerThreshold;  this.upperThreshold=upperThreshold;  this.threshold=Double.MIN_VALUE;}  }
class C{  private void cancelElection(){  context.checkThread();  if (currentTimer != null) {    LOGGER.debug("{} - Cancelling election",context.getCluster().member().address());    currentTimer.cancel();  }  if (quorum != null) {    quorum.cancel();    quorum=null;  }}  }
class C{  private void sortNodes(){  if (mNeedsSort) {    mSortedNodes.clear();    ArrayList<Node> roots=new ArrayList<Node>();    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies == null || node.dependencies.size() == 0) {        roots.add(node);      }    }    ArrayList<Node> tmpRoots=new ArrayList<Node>();    while (roots.size() > 0) {      int numRoots=roots.size();      for (int i=0; i < numRoots; ++i) {        Node root=roots.get(i);        mSortedNodes.add(root);        if (root.nodeDependents != null) {          int numDependents=root.nodeDependents.size();          for (int j=0; j < numDependents; ++j) {            Node node=root.nodeDependents.get(j);            node.nodeDependencies.remove(root);            if (node.nodeDependencies.size() == 0) {              tmpRoots.add(node);            }          }        }      }      roots.clear();      roots.addAll(tmpRoots);      tmpRoots.clear();    }    mNeedsSort=false;    if (mSortedNodes.size() != mNodes.size()) {      throw new IllegalStateException("Circular dependencies cannot exist" + " in AnimatorSet");    }  } else {    int numNodes=mNodes.size();    for (int i=0; i < numNodes; ++i) {      Node node=mNodes.get(i);      if (node.dependencies != null && node.dependencies.size() > 0) {        int numDependencies=node.dependencies.size();        for (int j=0; j < numDependencies; ++j) {          Dependency dependency=node.dependencies.get(j);          if (node.nodeDependencies == null) {            node.nodeDependencies=new ArrayList<Node>();          }          if (!node.nodeDependencies.contains(dependency.node)) {            node.nodeDependencies.add(dependency.node);          }        }      }      node.done=false;    }  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  private static byte[] readCheckedBytes(byte[] buffer,int dataSize) throws InvalidProtocolBufferNanoException {  CheckedMessage wrapper=new CheckedMessage();  MessageNano.mergeFrom(wrapper,buffer,0,dataSize);  CRC32 checksum=new CRC32();  checksum.update(wrapper.payload);  if (wrapper.checksum != checksum.getValue()) {    throw new InvalidProtocolBufferNanoException("checksum does not match");  }  return wrapper.payload;}  }
class C{  @Override public boolean updateData(){  cluster.setConnectedFlag(true);  Random r=new Random(System.currentTimeMillis());  long totalHeapSize=Math.abs(r.nextInt(3200 - 2048) + 2048);  cluster.setTotalHeapSize(totalHeapSize);  long usedHeapSize=Math.abs(r.nextInt(2048));  cluster.setUsedHeapSize(usedHeapSize);  double writePerSec=Math.abs(r.nextInt(100));  cluster.setWritePerSec(writePerSec);  cluster.setSubscriptionCount(testbed.getRootDs().getClients().size());  cluster.setRegisteredCQCount((long)testbed.getRootDs().getCQs().size());  cluster.setRunningFunctionCount(testbed.getRootDs().getFunction().size());  cluster.setClusterId(Math.abs(r.nextInt(100)));  cluster.getWritePerSecTrend().add(writePerSec);  cluster.setDiskWritesRate(writePerSec);  long garbageCollectionCount=Math.abs(r.nextInt(100));  cluster.setGarbageCollectionCount(garbageCollectionCount);  cluster.getGarbageCollectionTrend().add(garbageCollectionCount);  long readPerSec=Math.abs(r.nextInt(100));  cluster.setReadPerSec(readPerSec);  cluster.getReadPerSecTrend().add(readPerSec);  long diskReadsRate=readPerSec;  cluster.setDiskReadsRate(diskReadsRate);  cluster.setDiskReadsRate(readPerSec);  long queriesPerSec=Math.abs(r.nextInt(100));  cluster.setQueriesPerSec(queriesPerSec);  cluster.getQueriesPerSecTrend().add(queriesPerSec);  long loadPerSec=Math.abs(r.nextInt(100));  cluster.setLoadPerSec(loadPerSec);  cluster.setTotalHeapSize(totalHeapSize);  long totalBytesOnDisk=totalHeapSize;  cluster.setTotalBytesOnDisk(totalBytesOnDisk);  cluster.getTotalBytesOnDiskTrend().add(totalBytesOnDisk);  cluster.getMemoryUsageTrend().add(usedHeapSize);  cluster.getThroughoutWritesTrend().add(writePerSec);  cluster.setMemberCount(0);  Map<String,Cluster.Member> membersHMap=cluster.getMembersHMap();  List<Cluster.Region> regionsList=(List<Cluster.Region>)cluster.getClusterRegions().values();  Map<String,Boolean> wanInformation=cluster.getWanInformation();  int locatorCount=0;  if (membersHMap.size() == 0) {    for (    Locator locator : testbed.getRootDs().getLocators()) {      String id="(Launcher_Locator-1099-13-40-24-5368)-" + locatorCount++;      String name=locator.getName();      membersHMap.put(id + name,initializeMember(id,name,true,true,true,false,locator.getHost()));    }    cluster.setLocatorCount(testbed.getRootDs().getLocators().size());    int serverCount=0;    for (    Server server : testbed.getRootDs().getServers()) {      String id="(Launcher_Server-1099-13-40-24-5368)-" + serverCount++;      String name=server.getName();      membersHMap.put(id + name,initializeMember(id,name,false,true,false,true,server.getHost()));    }    cluster.setServerCount(testbed.getRootDs().getServers().size());    int peerCount=0;    for (    Peer peer : testbed.getRootDs().getPeers()) {      String id="(Launcher_Peer-1099-13-40-24-5368)-" + peerCount++;      String name=peer.getName();      membersHMap.put(id + name,initializeMember(id,name,false,true,false,false,peer.getHost()));    }    for (    Entry<String,Member> memberSet : membersHMap.entrySet()) {      HashMap<String,Cluster.Region> memberRegions=new HashMap<String,Cluster.Region>();      HashMap<String,Cluster.Client> memberClientsHM=new HashMap<String,Cluster.Client>();      Random randomGenerator=new Random();      int randomInt=(randomGenerator.nextInt(5)) + 1;      List<org.apache.geode.tools.pulse.testbed.GemFireDistributedSystem.Region> thisMemberRegions=testbed.getRootDs().getRegions(memberSet.getValue().getName());      int regionExists=0;      int index=0;      for (      org.apache.geode.tools.pulse.testbed.GemFireDistributedSystem.Region thisMemberRegion : thisMemberRegions) {        Region region=initMemberRegion(index++,thisMemberRegion.getName(),memberSet.getValue().getName(),thisMemberRegion.getEntryCount(),thisMemberRegion.getType(),thisMemberRegion.getMembers().size());        if (regionsList.size() > 0) {          for (          Region clusterRegion : regionsList) {            if ((region.getName()).equals(clusterRegion.getName())) {              clusterRegion.getMemberName().add(memberSet.getValue().getName());              regionExists=1;              break;            }          }          if (regionExists == 0) {            regionsList.add(region);          }        } else {          regionsList.add(region);        }        memberRegions.put(region.getFullPath(),region);        cluster.setTotalRegionCount(regionsList.size());      }      membersHMap.get(memberSet.getKey()).setMemberRegions(memberRegions);      if (memberSet.getValue().isCache()) {        Client client=initMemberClient(0,memberSet.getValue().getHost());        memberClientsHM.put(client.getId(),client);        randomInt=randomGenerator.nextInt(10);        for (int y=1; y < randomInt; y++) {          Client newClient=initMemberClient(y,memberSet.getValue().getHost());          memberClientsHM.put(newClient.getId(),newClient);        }        membersHMap.get(memberSet.getKey()).updateMemberClientsHMap(memberClientsHM);        long clientConnectionCount=cluster.getClientConnectionCount() + membersHMap.get(memberSet.getKey()).getMemberClientsHMap().size();        cluster.setClientConnectionCount(clientConnectionCount);      }    }  }  wanInformation.clear();  int wanInfoSize=Math.abs(r.nextInt(10));  wanInfoSize++;  for (int i=0; i < wanInfoSize; i++) {    String name="Mock Cluster" + i;    Boolean value=false;    if (i % 2 == 0) {      value=true;    }    wanInformation.put(name,value);  }  cluster.setMemberCount(membersHMap.size());  totalHeapSize=0;  for (  Entry<String,Member> memberSet : membersHMap.entrySet()) {    refresh(membersHMap.get(memberSet.getKey()));    Member member=membersHMap.get(memberSet.getKey());    totalHeapSize+=member.getCurrentHeapSize();  }  for (  Region region : regionsList) {    region.setGetsRate((Math.abs(r.nextInt(100))) + 1);    region.setPutsRate((Math.abs(r.nextInt(100))) + 1);    region.getGetsPerSecTrend().add(region.getGetsRate());    region.getPutsPerSecTrend().add(region.getPutsRate());  }  return true;}  }
class C{  public ActionForward executeAction(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws Exception {  ServletOutputStream output=null;  try {    ServicioConsultaExpedientes oServicio=LocalizadorServicios.getServicioConsultaExpedientes();    InfoDocumento documento=oServicio.recogerDocumento(request.getParameter("guid"),Misc.obtenerEntidad(request));    byte[] receipt=documento.getContent();    String mimeType=documento.getMimeType();    response.setHeader("Content-disposition","attachment; filename=\"Documento_" + request.getParameter("guid") + "."+ documento.getExtension()+ "\"");    response.setContentLength(receipt.length);    response.setContentType(mimeType);    output=response.getOutputStream();    output.write(receipt,0,receipt.length);  } catch (  Exception ex) {    request.setAttribute(Misc.MENSAJE_ERROR,ex.getMessage());    return mapping.findForward("Failure");  } finally {    if (output != null) {      output.flush();      output.close();    }  }  return null;}  }
class C{  public SocketException(Throwable cause){  super(cause);}  }
class C{  public BufferedFileDataInput(File file) throws FileNotFoundException, IOException, InterruptedException {  this(file,1024);}  }
class C{  public static double sum(ArrayList<Double> list){  double sum=0;  for (int i=0; i < list.size(); i++) {    sum+=list.get(i);  }  return sum;}  }
class C{  public void checkForInjury(){  playersInjured=new ArrayList<>();  playersRecovered=new ArrayList<>();  if (league.isHardMode()) {    checkInjuryPosition(teamQBs,1);    checkInjuryPosition(teamRBs,2);    checkInjuryPosition(teamWRs,3);    checkInjuryPosition(teamOLs,5);    checkInjuryPosition(teamKs,1);    checkInjuryPosition(teamSs,1);    checkInjuryPosition(teamCBs,3);    checkInjuryPosition(teamF7s,1);  }}  }
class C{  public Iterator<E> iterator(){  return m.navigableKeySet().iterator();}  }
class C{  private static boolean containsMediaType(List<? extends NamedMediaType> named,MediaType type){  for (  NamedMediaType nmt : named) {    if (nmt.getMediaType().equals(type))     return true;  }  return false;}  }
class C{  public static boolean isNetworkAvailable(Context context){  boolean isNetwork=false;  ConnectivityManager connectivity=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  if (connectivity == null) {    return isNetwork;  } else {    NetworkInfo[] info=connectivity.getAllNetworkInfo();    if (info != null) {      for (int i=0; i < info.length; i++) {        if (info[i].getState() == NetworkInfo.State.CONNECTED) {          isNetwork=true;          break;        }      }    }    return isNetwork;  }}  }
class C{  public Boolean isWebSocket(){  return webSocket;}  }
class C{  public FileInfo findPhysicalIndexFile(String physicalName){  if (physicalFiles == null) {    Map<String,FileInfo> files=newHashMap();    for (    FileInfo fileInfo : indexFiles) {      files.put(fileInfo.physicalName(),fileInfo);    }    this.physicalFiles=files;  }  return physicalFiles.get(physicalName);}  }
class C{  public ImageBrowser(){  setOpaque(true);  animator.setAcceleration(.1f);  animator.setDeceleration(.4f);  setLayout(new FlowLayout());  loadImages();  label=new JLabel[images.size()];  for (int i=0; i < images.size(); ++i) {    label[i]=new JLabel();    label[i].setIcon(new ImageIcon(images.get(i).getImage(currentSize)));    add(label[i]);    Effect move=new Move();    Effect scale=new Scale();    CompositeEffect comp=new CompositeEffect(move);    comp.addEffect(scale);    comp.setRenderComponent(false);    EffectsManager.setEffect(label[i],comp,TransitionType.CHANGING);  }}  }
class C{  public void nop(){  super.hint(SystemHint.NOP);}  }
class C{  private List<List<byte[]>> prepareData(){  List<List<byte[]>> dictionaryChunks=new ArrayList<>();  List<byte[]> chunks=new ArrayList<>();  chunks.add("d".getBytes());  chunks.add("b".getBytes());  chunks.add("c".getBytes());  chunks.add("a".getBytes());  dictionaryChunks.add(chunks);  return dictionaryChunks;}  }
class C{  public ViewPropertyAnimator rotationYBy(float value){  animatePropertyBy(ROTATION_Y,value);  return this;}  }
class C{  public static byte[] randomBytes(int length){  byte[] bytes=new byte[length];  SEEDED_RANDOM.nextBytes(bytes);  return bytes;}  }
class C{  private StringMap makeEndpointMap(List<String> paramEndpoints,boolean isDiscovered){  StringMap map=new StringMap();  for (  String ep : paramEndpoints) {    map.put(ep,new Boolean(isDiscovered).toString());  }  return map;}  }
class C{  private Map<HadoopInputSplit,Integer> assignReducersToSplits(Collection<HadoopInputSplit> splits,int reducerCnt){  Map<HadoopInputSplit,Integer> res=new IdentityHashMap<>(splits.size());  int base=reducerCnt / splits.size();  int remainder=reducerCnt % splits.size();  for (  HadoopInputSplit split : splits) {    int val=base;    if (remainder > 0) {      val++;      remainder--;    }    res.put(split,val);  }  assert remainder == 0;  return res;}  }
class C{  public boolean isSecureMsrpOverWifi(){  return readBoolean(RcsSettingsData.SECURE_MSRP_OVER_WIFI);}  }
class C{  private String readZkInfo(String cmd,String matchPattern){  String result=null;  Socket socket=null;  BufferedReader in=null;  PrintWriter out=null;  log.debug("cmd={}, match={}",cmd,matchPattern);  try {    socket=new Socket(CONNECT_ZK_HOST,CONNECT_ZK_PORT);    in=new BufferedReader(new InputStreamReader(socket.getInputStream()));    out=new PrintWriter(new BufferedWriter(new OutputStreamWriter(socket.getOutputStream())),true);    out.println(cmd);    String line=null;    while ((line=in.readLine()) != null) {      log.debug(line);      if (line.contains(matchPattern)) {        result=line;      }    }  } catch (  IOException e) {    throw BackupException.fatals.failedToReadZkInfo(e);  } finally {    if (in != null) {      try {        in.close();      } catch (      Exception e) {        log.error("close input stream failed. e=",e);      }    }    if (out != null) {      try {        out.close();      } catch (      Exception e) {        log.error("close output stream failed. e=",e);      }    }    if (socket != null) {      try {        socket.close();      } catch (      Exception e) {        log.error("close socket failed. e=",e);      }    }  }  return result;}  }
class C{  public static Name fullName(JCTree tree){  tree=skipParens(tree);switch (tree.getTag()) {case IDENT:    return ((JCIdent)tree).name;case SELECT:  Name sname=fullName(((JCFieldAccess)tree).selected);return sname == null ? null : sname.append('.',name(tree));default :return null;}}  }
class C{  public static int createUniqueNumberedSaveDir(World world,String parentSubPath){  findCC();  if (computerCraft_createUniqueNumberedSaveDir != null) {    try {      return ((Integer)computerCraft_createUniqueNumberedSaveDir.invoke(null,world,parentSubPath)).intValue();    } catch (    Exception e) {    }  }  return -1;}  }
class C{  public TimezoneName addTimezoneName(String timezoneName){  TimezoneName prop=new TimezoneName(timezoneName);  addTimezoneName(prop);  return prop;}  }
class C{  public void testClearAndExists(ArchiveSource src) throws IOException {  src.clear();  assertFalse("Check doesn't exist after clear",src.exists());  addAllTestData(src);  assertTrue("Check exists after adding data",src.exists());  src.clear();  assertFalse("Check doesn't exist after clear",src.exists());}  }
class C{  public static void line(double x0,double y0,double x1,double y1){  offscreen.draw(new Line2D.Double(scaleX(x0),scaleY(y0),scaleX(x1),scaleY(y1)));  draw();}  }
class C{  private String protectCustomizedNodes(DBObject nodeTable){  String nodeTableName=nodeTable.getName();  if (!nodeTableName.toUpperCase().startsWith("AD_TREENODE"))   return null;  if (!hasTableColumn(nodeTable,"AD_Client_ID"))   return null;  if (!hasTableColumn(nodeTable,"Node_ID"))   return null;  if (!hasTableColumn(nodeTable,"AD_Tree_ID"))   return null;  if (!hasTableColumn(nodeTable,"Parent_ID"))   return null;  if (!hasTableColumn(nodeTable,"SeqNo"))   return null;  DBObject treeTable=m_target.getObjectByName("AD_Tree",m_target.getTables());  if (treeTable == null)   return null;  if (!hasTableColumn(treeTable,"AD_Tree_ID"))   return null;  boolean treeHasName=true;  if (!hasTableColumn(treeTable,"Name"))   treeHasName=false;  boolean treeHasTableLink=true;  if (!hasTableColumn(treeTable,"AD_Table_ID"))   treeHasTableLink=false;  boolean treeHasTreeType=true;  if (!hasTableColumn(treeTable,"TreeType"))   treeHasTableLink=false;  DBObject tableTable=m_target.getObjectByName("AD_Table",m_target.getTables());  if (treeTable == null)   return null;  if (!hasTableColumn(tableTable,"AD_Table_ID"))   return null;  HashMap<String,String> tableMap=new HashMap<String,String>();  tableMap.put("AY","C_Activity");  tableMap.put("BP","C_BPartner");  tableMap.put("CC","CM_Container");  tableMap.put("CM","CM_Media");  tableMap.put("CS","CM_CStage");  tableMap.put("CT","CM_Template");  tableMap.put("EV","C_ElementValue");  tableMap.put("MC","C_Campaign");  tableMap.put("MM","AD_Menu");  tableMap.put("OO","AD_Org");  tableMap.put("PJ","C_Project");  tableMap.put("PR","M_Product");  tableMap.put("SR","C_SalesRegion");  tableMap.put("XX","IP_Requiement");  ArrayList<Integer> excludes=new ArrayList<Integer>();  String vendorName=m_target.getVendor();  String catalogName=m_target.getCatalog();  String schemaName=m_target.getSchema();  String sqlCommand=s_dbEngine.sql_selectPreparedStatement(vendorName,catalogName,schemaName,"AD_Tree",new ArrayList<String>(Arrays.asList("AD_Tree_ID")));  PreparedStatementWrapper stmtGetTableID=m_target.setPreparedStatement(sqlCommand);  sqlCommand=s_dbEngine.sql_selectPreparedStatement(vendorName,catalogName,schemaName,"AD_Table",new ArrayList<String>(Arrays.asList("AD_Table_ID")));  PreparedStatementWrapper stmtGetTableName=m_target.setPreparedStatement(sqlCommand);  Statement stmt=m_target.setStatement();  sqlCommand=new StringBuffer(s_dbEngine.sql_select(vendorName,catalogName,schemaName,nodeTableName,new StringBuffer("AD_Client_ID=").append(s_parameters.SYSTEMCLIENTID).toString())).append(" ORDER BY AD_Tree_ID, Parent_ID, SeqNo").toString();  ResultSet rs=m_target.executeQuery(stmt,sqlCommand);  while (m_target.getResultSetNext(rs)) {    Integer nodeID=m_target.getResultSetInt(rs,"Node_ID");    Integer treeID=m_target.getResultSetInt(rs,"AD_Tree_ID");    if (!m_target.getResultSetWasNull(rs)) {      m_target.setPreparedStatementInt(stmtGetTableID,1,treeID.intValue());      ResultSet rsTableID=m_target.executeQuery(stmtGetTableID);      if (m_target.getResultSetNext(rsTableID)) {        String treeName="";        if (treeHasName) {          treeName=m_target.getResultSetString(rsTableID,"Name");          if (m_target.getResultSetWasNull(rsTableID))           treeName="";        }        Integer tableID=null;        String treeType=null;        String targetTableName=null;        if (treeHasTableLink) {          tableID=m_target.getResultSetInt(rsTableID,"AD_Table_ID");          if (m_target.getResultSetWasNull(rsTableID))           tableID=null;          if (tableID != null) {            m_target.setPreparedStatementInt(stmtGetTableName,1,tableID.intValue());            ResultSet rsTableName=m_target.executeQuery(stmtGetTableName);            if (m_target.getResultSetNext(rsTableName)) {              targetTableName=m_target.getResultSetString(rsTableName,"TableName");              if (m_target.getResultSetWasNull(rsTableName))               targetTableName=null;            }            m_target.releaseResultSet(rsTableName);          }        } else         if (treeHasTreeType) {          treeType=m_target.getResultSetString(rsTableID,"TreeType");          if (m_target.getResultSetWasNull(rsTableID))           treeType=null;          if (treeType != null)           targetTableName=tableMap.get(treeType);        }        if (targetTableName != null) {          DBObject targetTable=m_target.getObjectByName(targetTableName,m_target.getTables());          String targetTableIDColumn=new StringBuffer(targetTableName).append("_ID").toString();          boolean targetTableHasID=true;          if (!hasTableColumn(targetTable,targetTableIDColumn))           targetTableHasID=false;          String targetEntityType="D";          boolean targetTableHasEntityType=true;          if (!hasTableColumn(targetTable,"EntityType"))           targetTableHasEntityType=false;          String targetName="";          boolean targetTableHasName=true;          if (!hasTableColumn(targetTable,"Name"))           targetTableHasName=false;          boolean targetTableHasValue=true;          if (!hasTableColumn(targetTable,"Value"))           targetTableHasValue=false;          if (targetTableHasID) {            if (nodeID.intValue() != 0) {              String whereClause=new StringBuffer(targetTableIDColumn).append("=").append(nodeID.toString()).toString();              sqlCommand=s_dbEngine.sql_select(vendorName,catalogName,schemaName,targetTableName,whereClause);              Statement stmtGetEntity=m_target.setStatement();              ResultSet rsGetEntity=m_target.executeQuery(stmtGetEntity,sqlCommand);              if (m_target.getResultSetNext(rsGetEntity)) {                if (targetTableHasEntityType) {                  targetEntityType=m_target.getResultSetString(rsGetEntity,"EntityType");                  if (m_target.getResultSetWasNull(rsGetEntity))                   targetEntityType="D";                }                if (targetTableHasName) {                  targetName=m_target.getResultSetString(rsGetEntity,"Name");                  if (m_target.getResultSetWasNull(rsGetEntity))                   targetName="";                } else                 if (targetTableHasValue) {                  targetName=m_target.getResultSetString(rsGetEntity,"Value");                  if (m_target.getResultSetWasNull(rsGetEntity))                   targetName="";                }              }              m_target.releaseResultSet(rsGetEntity);              m_target.releaseStatement(stmtGetEntity);            }          }          if (targetTable.getCustomizationLevel() > s_parameters.CUSTOMNONE || m_target.isCustomEntityType(targetEntityType)) {            ADObject_TreeNode customNode=new ADObject_TreeNode(m_target,nodeTableName,nodeID);            m_customNodes.add(customNode);            excludes.add(nodeID);            s_logger.log(Level.WARNING,"preservingNode",new Object[]{targetName,treeName});          }        }      }      m_target.releaseResultSet(rsTableID);    }  }  m_target.releaseResultSet(rs);  m_target.releaseStatement(stmt);  m_target.releasePreparedStatement(stmtGetTableName);  m_target.releasePreparedStatement(stmtGetTableID);  if (excludes.size() > 0) {    StringBuffer result=new StringBuffer("(");    for (    Integer i : excludes) {      if (result.length() > 1)       result.append(" AND ");      result.append("Node_ID!=").append(i.toString());    }    result.append(")");    return result.toString();  } else {    return null;  }}  }
class C{  private Target<P> connectActiveDirect(Target<P> target){  ExecutableVertex<?,?,P> vertex=state.activeConnector.vertex;  int oport=state.activeConnector.oport;  vertex.connect(oport,target,new DirectEdge(state.activeConnector,vertex,oport,target.vertex,target.port));  return target;}  }
class C{  public final void turnBy(double angle){  angle=Geometric.clampAngleDegree(angle);  orientation+=angle;  orientation=Geometric.clampAngleDegree(orientation);  Geometric.rotateTo(velocity,Math.toRadians(orientation));}  }
class C{  public List<Contact> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<Contact> list=new ArrayList<Contact>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public static WindowSize window(int width,int height){  return new WindowSize(width,height);}  }
class C{  public String toString(){  return getName() + " " + getDescriptor();}  }
class C{  @Override public void addPages(){  setWindowTitle(Messages.RiskAnalysisWizard_3);  ChooseGefaehrdungPage chooseGefaehrdungPage=new ChooseGefaehrdungPage();  addPage(chooseGefaehrdungPage);  EstimateGefaehrdungPage estimateGefaehrdungPage=new EstimateGefaehrdungPage();  addPage(estimateGefaehrdungPage);  RiskHandlingPage riskHandlingPage=new RiskHandlingPage();  addPage(riskHandlingPage);  AdditionalSecurityMeasuresPage additionalSecurityMeasuresPage=new AdditionalSecurityMeasuresPage();  addPage(additionalSecurityMeasuresPage);}  }
class C{  public static long atol(String s){  int i=0;  while (i < s.length() && Character.isWhitespace(s.charAt(i)))   i++;  if (i < s.length() && s.charAt(i) == '0') {    if (i + 1 < s.length() && (s.charAt(i + 1) == 'x' || s.charAt(i + 1) == 'X'))     return parseLong(s.substring(i + 2),16); else     return parseLong(s,8);  } else   return parseLong(s,10);}  }
class C{  public synchronized Iterable<Object> peek(int i){  ArrayList<Object> result=new ArrayList<Object>();  if (dataSlots != null && dataSlots.length > i) {    Object first=dataSlots[i];    if (first != null) {      result.add(first);      if (dataQueues != null) {        LinkedList<Object> queue=dataQueues.get(i);        if (queue != null) {          result.addAll(queue);        }      }    }  }  return result;}  }
class C{  public GridTestSafeThreadFactory(String threadName){  this(threadName,true);}  }
class C{  public static void main(String[] argv){  runClassifier(new NaiveBayesMultinomial(),argv);}  }
class C{  public void createNetworkAndLanes(){  initNetworkParams();  createNetwork();  if (laneType.equals(LaneType.TRIVIAL))   createTrivialLanes();  if (laneType.equals(LaneType.REALISTIC))   createRealisticLanes();  if (laneType.equals(LaneType.NONE))   log.info("No lanes are used");}  }
class C{  public int nextInt(){  return next(32);}  }
class C{  @Override public void onReset(){  closeDialog();}  }
class C{  @Override public void run(){  amIActive=true;  String outputHeader=null;  String inputFilesString=null;  String outputFileSuffix="_HistoEqual";  WhiteboxRaster image=null;  WhiteboxRaster output=null;  int row, col;  int rows=0;  int cols=0;  double z;  float progress=0;  long numCells=0;  int i=0;  String[] imageFiles;  int numImages=0;  double noData=-32768;  int numBins=1024;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  outputFileSuffix=args[1];  numBins=Integer.parseInt(args[2]);  if ((inputFilesString == null) || (outputFileSuffix == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    for (i=0; i < numImages; i++) {      image=new WhiteboxRaster(imageFiles[i],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      outputHeader=imageFiles[i].replace(".dep",outputFileSuffix + ".dep");      output=new WhiteboxRaster(outputHeader,"rw",imageFiles[i],WhiteboxRaster.DataType.INTEGER,noData);      output.setPreferredPalette(image.getPreferredPalette());      double minValue=image.getMinimumValue();      double maxValue=image.getMaximumValue();      double binSize=(maxValue - minValue) / numBins;      long[] histogram=new long[numBins];      int binNum;      int numBinsLessOne=numBins - 1;      double[] data;      if (image.getDataScale() != WhiteboxRaster.DataScale.RGB) {        updateProgress("Loop 1 of 2:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              numCells++;              binNum=(int)((data[col] - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              histogram[binNum]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 1 of 2:",(int)progress);        }        double[] cdf=new double[numBins];        cdf[0]=histogram[0];        for (int j=1; j < numBins; j++) {          cdf[j]=cdf[j - 1] + histogram[j];        }        histogram=null;        updateProgress("Loop 2 of 2:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              binNum=(int)((data[col] - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              z=Math.round((cdf[binNum] - cdf[0]) / (numCells - cdf[0]) * numBinsLessOne);              output.setValue(row,col,z);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 2 of 2:",(int)progress);        }      } else {        output=new WhiteboxRaster(outputHeader,"rw",imageFiles[i],WhiteboxRaster.DataType.FLOAT,noData);        output.setPreferredPalette(image.getPreferredPalette());        output.setDataScale(WhiteboxRaster.DataScale.RGB);        double h, s, v;        int a, r, g, b;        minValue=99999999;        maxValue=-99999999;        float[] hsbvals=new float[3];        float[] rgbvals=new float[3];        updateProgress("Loop 1 of 3:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              Color.RGBtoHSB(r,g,b,hsbvals);              v=hsbvals[2];              if (v < minValue) {                minValue=v;              }              if (v > maxValue) {                maxValue=v;              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 1 of 3:",(int)progress);        }        binSize=(maxValue - minValue) / numBins;        histogram=new long[numBins];        numBinsLessOne=numBins - 1;        updateProgress("Loop 2 of 3:",0);        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              Color.RGBtoHSB(r,g,b,hsbvals);              v=hsbvals[2];              numCells++;              binNum=(int)((v - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              histogram[binNum]++;            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 2 of 3:",(int)progress);        }        double[] cdf=new double[numBins];        cdf[0]=histogram[0];        for (int j=1; j < numBins; j++) {          cdf[j]=cdf[j - 1] + histogram[j];        }        histogram=null;        updateProgress("Loop 3 of 3:",0);        float val=0;        int rgb=0;        for (row=0; row < rows; row++) {          data=image.getRowValues(row);          for (col=0; col < cols; col++) {            if (data[col] != noData) {              z=data[col];              r=(int)data[col] & 0xFF;              g=((int)data[col] >> 8) & 0xFF;              b=((int)data[col] >> 16) & 0xFF;              a=((int)data[col] >> 24) & 0xFF;              hsbvals=Color.RGBtoHSB(r,g,b,null);              v=hsbvals[2];              binNum=(int)((v - minValue) / binSize);              if (binNum > numBinsLessOne) {                binNum=numBinsLessOne;              }              val=(float)((cdf[binNum] - cdf[0]) / (numCells - cdf[0]));              rgb=Color.HSBtoRGB(hsbvals[0],hsbvals[1],val);              r=(rgb >> 16) & 0xFF;              g=(rgb >> 8) & 0xFF;              b=rgb & 0xFF;              z=(double)((a << 24) | (b << 16) | (g << 8)| r);              output.setValue(row,col,z);            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(float)(100f * row / (rows - 1));          updateProgress("Loop 3 of 3:",(int)progress);        }      }      output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");      output.addMetadataEntry("Created on " + new Date());      image.close();      output.close();      returnData(outputHeader);    }  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static boolean isRetainedAtRuntime(Class<? extends Annotation> annotationType){  Retention retention=annotationType.getAnnotation(Retention.class);  return retention != null && retention.value() == RetentionPolicy.RUNTIME;}  }
class C{  public static int binarySearch(float[] array,int startIndex,int endIndex,float value){  checkIndexForBinarySearch(array.length,startIndex,endIndex);  int intBits=Float.floatToIntBits(value);  int low=startIndex, mid=-1, high=endIndex - 1;  while (low <= high) {    mid=(low + high) >>> 1;    if (lessThan(array[mid],value)) {      low=mid + 1;    } else     if (intBits == Float.floatToIntBits(array[mid])) {      return mid;    } else {      high=mid - 1;    }  }  if (mid < 0) {    int insertPoint=endIndex;    for (int index=startIndex; index < endIndex; index++) {      if (value < array[index]) {        insertPoint=index;      }    }    return -insertPoint - 1;  }  return -mid - (lessThan(value,array[mid]) ? 1 : 2);}  }
class C{  @Override public AbstractScannedResult scanBlocklet(BlocksChunkHolder blocksChunkHolder) throws QueryExecutionException {  try {    fillScannedResult(blocksChunkHolder);  } catch (  FilterUnsupportedException e) {    throw new QueryExecutionException(e.getMessage());  }  return scannedResult;}  }
class C{  public boolean isAGCEnabled(){  return mAGCEnabled.get();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void add(String key){  root=add(root,key,0);}  }
class C{  private int quorumIndex(){  return context.getClusterState().getQuorum() - 2;}  }
class C{  protected void showAlertDialog(@Nullable String title,@Nullable String message,@Nullable DialogInterface.OnClickListener onPositiveButtonClickListener,@NonNull String positiveText,@Nullable DialogInterface.OnClickListener onNegativeButtonClickListener,@NonNull String negativeText){  AlertDialog.Builder builder=new AlertDialog.Builder(this);  builder.setTitle(title);  builder.setMessage(message);  builder.setPositiveButton(positiveText,onPositiveButtonClickListener);  builder.setNegativeButton(negativeText,onNegativeButtonClickListener);  mAlertDialog=builder.show();}  }
class C{  private void deselect(final int[] indices,final boolean shouldFireEvents){  checkWidget();  if (indices == null) {    SWT.error(SWT.ERROR_NULL_ARGUMENT);  }  final List<DLItem> toBeRemoved=new ArrayList<DLItem>();  for (  final int index : indices) {    if (index < 0 || index >= items.size()) {      continue;    }    toBeRemoved.add(selection.get(index));  }  for (  final DLItem item : toBeRemoved) {    selection.remove(item);    if (shouldFireEvents) {      fireSelectionEvent(item);    }  }  if (shouldFireEvents) {    fireSelectionChangeEvent(toBeRemoved);  }  toBeRemoved.clear();  redrawTables();}  }
class C{  @CallSuper public void onViewAttached(boolean firstAttachment){}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.413 -0500",hash_original_method="53B55470D05734C403FE921C557119F5",hash_generated_method="F2963150F2456D21A09B08F298769583") public static BigInteger createRandomInRange(BigInteger min,BigInteger max,SecureRandom random){  int cmp=min.compareTo(max);  if (cmp >= 0) {    if (cmp > 0) {      throw new IllegalArgumentException("'min' may not be greater than 'max'");    }    return min;  }  if (min.bitLength() > max.bitLength() / 2) {    return createRandomInRange(ZERO,max.subtract(min),random).add(min);  }  for (int i=0; i < MAX_ITERATIONS; ++i) {    BigInteger x=new BigInteger(max.bitLength(),random);    if (x.compareTo(min) >= 0 && x.compareTo(max) <= 0) {      return x;    }  }  return new BigInteger(max.subtract(min).bitLength() - 1,random).add(min);}  }
class C{  @Bean public static DataSource herdDataSource(){  BasicDataSource basicDataSource=new BasicDataSource();  basicDataSource.setDriverClassName(org.h2.Driver.class.getName());  basicDataSource.setUsername("");  basicDataSource.setPassword("");  basicDataSource.setUrl("jdbc:h2:mem:herdTestDb");  ResourceDatabasePopulator resourceDatabasePopulator=new ResourceDatabasePopulator();  resourceDatabasePopulator.addScript(new ClassPathResource("createConfigurationTableAndData.sql"));  DatabasePopulatorUtils.execute(resourceDatabasePopulator,basicDataSource);  return basicDataSource;}  }
class C{  public void searchTagsWithName(InstagramAPIResponseCallback<ArrayList<IGTag>> callback,String name,int count,String maxId){  HashMap<String,String> pageParameters=parametersFromCount(count,maxId,InstagramKitConstants.kPaginationKeyMaxId);  Call<IGAPIResponse> call=instagramAPIService.searchTagsWithName(name,getSession().getAccessToken(),pageParameters);  call.enqueue(new InstagramAPIResponseManager<>(callback,new TypeToken<ArrayList<IGTag>>(){  }.getType()));}  }
class C{  public static int floatAsIntBits(float number){  if (VM.VerifyAssertions)   VM._assert(VM.NOT_REACHED);  return -1;}  }
class C{  void closeInternal() throws SQLException {  for (Iterator<JdbcResultSet> it=resSets.iterator(); it.hasNext(); ) {    JdbcResultSet rs=it.next();    rs.closeInternal();    it.remove();  }  closed=true;}  }
class C{  @Override public Object listField(final FormObject form){  final String[] items=form.getItemsList();  final JList<String> list;  if (items != null) {    list=new JList<String>(items);  } else {    list=new JList<String>();  }  if (!form.getFieldFlags()[FormObject.MULTISELECT_ID]) {    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);  }  if (form.getSelectionIndices() != null) {    list.setSelectedIndices(form.getSelectionIndices());  } else   if (form.getValuesMap(true) != null) {    list.setSelectedValue(form.getValuesMap(true).get(form.getSelectedItem()),true);  } else {    list.setSelectedValue(form.getSelectedItem(),true);  }  form.setSelection(list.getSelectedValues(),list.getSelectedValue(),list.getSelectedIndices(),list.getSelectedIndex());  setupUniversalFeatures(list,form);  list.addListSelectionListener(new ListListener(list,form));  return list;}  }
class C{  private Class<?> resolveClass(Type type){  if (type instanceof Class) {    return (Class<?>)type;  } else   if (type instanceof ParameterizedType) {    return resolveClass(((ParameterizedType)type).getRawType());  } else   if (type instanceof WildcardType) {    Type[] bounds=((WildcardType)type).getUpperBounds();    if (bounds.length > 0) {      return (Class<?>)bounds[0];    }  }  return null;}  }
class C{  public boolean isComposite(){  return getRegions().size() > 0;}  }
class C{  public String noReplacementTipText(){  return "Disables the replacement of instances.";}  }
class C{  public void forgetStackBelow(long offset){  Map<Long,MemoryCell> stack=store.getSubMap(MemoryRegion.STACK);  if (stack == null)   return;  for (Iterator<Map.Entry<Long,MemoryCell>> it=store.subMapIterator(MemoryRegion.STACK); it.hasNext(); )   if (it.next().getKey() < offset) {    it.remove();  }}  }
class C{  public boolean endMarkerDetected(){  return reps[0] == -1;}  }
class C{  protected void addStableId(Object item){  mIdMap.put(item,nextStableId++);}  }
class C{  public void runTest(){  VelocityContext context=new VelocityContext();  try {    assureResultsDirectoryExists(RESULT_DIR);    Template template=Velocity.getTemplate(getFileName(null,"encodingtest",TMPL_FILE_EXT),"UTF-8");    FileOutputStream fos=new FileOutputStream(getFileName(RESULT_DIR,"encodingtest",RESULT_FILE_EXT));    Writer writer=new BufferedWriter(new OutputStreamWriter(fos,"UTF-8"));    template.merge(context,writer);    writer.flush();    writer.close();    if (!isMatch(RESULT_DIR,COMPARE_DIR,"encodingtest",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output 1 incorrect.");    }    template=Velocity.getTemplate(getFileName(null,"encodingtest2",TMPL_FILE_EXT),"UTF-8");    fos=new FileOutputStream(getFileName(RESULT_DIR,"encodingtest2",RESULT_FILE_EXT));    writer=new BufferedWriter(new OutputStreamWriter(fos,"UTF-8"));    template.merge(context,writer);    writer.flush();    writer.close();    if (!isMatch(RESULT_DIR,COMPARE_DIR,"encodingtest2",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output 2 incorrect.");    }    template=Velocity.getTemplate(getFileName(null,"encodingtest3",TMPL_FILE_EXT),"GBK");    fos=new FileOutputStream(getFileName(RESULT_DIR,"encodingtest3",RESULT_FILE_EXT));    writer=new BufferedWriter(new OutputStreamWriter(fos,"GBK"));    template.merge(context,writer);    writer.flush();    writer.close();    if (!isMatch(RESULT_DIR,COMPARE_DIR,"encodingtest3",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output 3 incorrect.");    }    template=Velocity.getTemplate(getFileName(null,"encodingtest_KOI8-R",TMPL_FILE_EXT),"KOI8-R");    fos=new FileOutputStream(getFileName(RESULT_DIR,"encodingtest_KOI8-R",RESULT_FILE_EXT));    writer=new BufferedWriter(new OutputStreamWriter(fos,"KOI8-R"));    template.merge(context,writer);    writer.flush();    writer.close();    if (!isMatch(RESULT_DIR,COMPARE_DIR,"encodingtest_KOI8-R",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output 4 incorrect.");    }  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  public void visitAttribute(Attribute attr){  if (mv != null) {    mv.visitAttribute(attr);  }}  }
class C{  public static void editGlobalInstructionComment(final SQLProvider provider,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02437: provider argument can not be null");  Preconditions.checkNotNull(commentId,"IE02438: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02439: userId argument can not be null");  Preconditions.checkNotNull(newComment,"IE02440: newComment argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  public PrivacyHeader createPrivacyHeader(String privacyType){  if (privacyType == null)   throw new NullPointerException("null privacyType arg");  Privacy privacy=new Privacy(privacyType);  return privacy;}  }
class C{  public void installNativeTheme(){  impl.installNativeTheme();}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case EipPackage.SERVICE_INVOCATION__CONTEXT:    setContext((String)newValue);  return;case EipPackage.SERVICE_INVOCATION__OPERATION_NAME:setOperationName((String)newValue);return;case EipPackage.SERVICE_INVOCATION__SERVICE_REF:setServiceRef((ServiceRef)newValue);return;}super.eSet(featureID,newValue);}  }
