class C{  public static boolean isValidGMonth(String value){  String regex="--\\d\\d(Z|(\\+|-)\\d\\d:\\d\\d)?";  if (value.matches(regex)) {    return isValidCalendarValue(value);  } else {    return false;  }}  }
class C{  public void restrictTurn(boolean onlyTurn,int from,int to,int... via){  TurnRestriction restriction=new TurnRestriction();  restriction.fromEdge=from;  restriction.toEdge=to;  restriction.only=onlyTurn;  restriction.viaEdges=via;  int ridx=streetLayer.turnRestrictions.size();  streetLayer.turnRestrictions.add(restriction);  streetLayer.edgeStore.turnRestrictions.put(restriction.fromEdge,ridx);}  }
class C{  public void append(int key,E value){  if (mSize != 0 && key <= mKeys[mSize - 1]) {    put(key,value);    return;  }  if (mGarbage && mSize >= mKeys.length) {    gc();  }  int pos=mSize;  if (pos >= mKeys.length) {    int n=ArrayUtils.idealIntArraySize(pos + 1);    int[] nkeys=new int[n];    Object[] nvalues=new Object[n];    System.arraycopy(mKeys,0,nkeys,0,mKeys.length);    System.arraycopy(mValues,0,nvalues,0,mValues.length);    mKeys=nkeys;    mValues=nvalues;  }  mKeys[pos]=key;  mValues[pos]=value;  mSize=pos + 1;}  }
class C{  public static void warning(final WarningType type,final String... params){  if (type != null && type.getNumberOfParameters() == params.length) {    final WarningEvent event=new WarningEvent(type,params);    userLog(event.getMessage());    notifyAll(event);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.837 -0500",hash_original_method="6768CBB27E7172AA2C7826D88AD4CDFA",hash_generated_method="1A7EA78CAC96ECE4855438EF4C52664A") public NewsgroupInfo[] listNewNewsgroups(NewGroupsOrNewsQuery query) throws IOException {  if (!NNTPReply.isPositiveCompletion(newgroups(query.getDate(),query.getTime(),query.isGMT(),query.getDistributions())))   return null;  return __readNewsgroupListing();}  }
class C{  public void doNothing(){}  }
class C{  @Override public void send(Object message) throws RemotingException {  channel.send(message);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:30.741 -0500",hash_original_method="ABBE2955D2E93EEDCAEE1A70196B3E98",hash_generated_method="AED426329FC184C648E215B74940863F") public synchronized int doSdp() throws IOException {  if (canceled)   throw new IOException("Service discovery canceled");  channel=-1;  boolean inProgress=false;  try {    inProgress=service.fetchRemoteUuids(device.getAddress(),uuid,this);  } catch (  RemoteException e) {    Log.e(TAG,"",e);  }  if (!inProgress)   throw new IOException("Unable to start Service Discovery");  try {    wait(12000);  } catch (  InterruptedException e) {  }  if (canceled)   throw new IOException("Service discovery canceled");  if (channel < 1)   throw new IOException("Service discovery failed");  return channel;}  }
class C{  private void doConnect(){  if (clientHandle == null) {    clientHandle=mqttService.getClient(serverURI,clientId,myContext.getApplicationInfo().packageName,persistence);  }  mqttService.setTraceEnabled(traceEnabled);  mqttService.setTraceCallbackId(clientHandle);  String activityToken=storeToken(connectToken);  try {    mqttService.connect(clientHandle,connectOptions,null,activityToken);  } catch (  MqttException e) {    IMqttActionListener listener=connectToken.getActionCallback();    if (listener != null) {      listener.onFailure(connectToken,e);    }  }}  }
class C{  public LockManager(){  this(false);}  }
class C{  public char next() throws JSONException {  int c;  if (this.usePrevious) {    this.usePrevious=false;    c=this.previous;  } else {    try {      c=this.reader.read();    } catch (    IOException exception) {      throw new JSONException(exception);    }    if (c <= 0) {      this.eof=true;      c=0;    }  }  this.index+=1;  if (this.previous == '\r') {    this.line+=1;    this.character=c == '\n' ? 0 : 1;  } else   if (c == '\n') {    this.line+=1;    this.character=0;  } else {    this.character+=1;  }  this.previous=(char)c;  return this.previous;}  }
class C{  public TlsServerConnector(KeyManagerFactory keyManagerFactory,InetSocketAddress socketAddress,int numberOfThreads,int idleTimeout){  super(socketAddress,numberOfThreads,idleTimeout);  try {    this.sslContext=SSLContext.getInstance("TLS");    this.sslContext.init(keyManagerFactory.getKeyManagers(),null,null);  } catch (  KeyManagementException|NoSuchAlgorithmException e) {    throw new RuntimeException("Unable to initialize SSL engine",e);  }}  }
class C{  public boolean isPosted(){  Object oo=get_Value(COLUMNNAME_Posted);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Object clone() throws CloneNotSupportedException {  return new ObjectVector(this);}  }
class C{  public void store(Element root){  Element values;  root.addContent(values=new Element(Xml.AUTOMATIONS));  for (  Automation automation : getAutomationsByNameList()) {    values.addContent(automation.store());  }}  }
class C{  int lengthInternalKeyResolver(){  return this.internalKeyResolvers.size();}  }
class C{  protected TStructFieldImpl(){  super();}  }
class C{  public StrStrMap(Map<String,String> map){  this.map.putAll(map);}  }
class C{  public static void assertNotNull(String message,Object object){  Assert.assertNotNull(message,object);}  }
class C{  public static void ensureDirectoryExists(String path) throws IOException {  File tmpDirectory=new File(path);  if (!mkdirsWithRetry(tmpDirectory)) {    throw new IOException("Failed to create directory " + tmpDirectory.getAbsolutePath());  }}  }
class C{  public boolean shouldEdit(OMGraphic omgr){  return true;}  }
class C{  public OsmElement findJoinableElement(Node nodeToJoin){  OsmElement closestElement=null;  double closestDistance=Double.MAX_VALUE;  float jx=lonE7ToX(nodeToJoin.getLon());  float jy=latE7ToY(nodeToJoin.getLat());  for (  Node node : getDelegator().getCurrentStorage().getNodes()) {    if (node != nodeToJoin) {      Double distance=clickDistance(node,jx,jy);      if (distance != null && distance < closestDistance) {        closestDistance=distance;        closestElement=node;      }    }  }  if (closestElement == null) {    for (    Way way : getDelegator().getCurrentStorage().getWays()) {      if (!way.hasNode(nodeToJoin)) {        List<Node> wayNodes=way.getNodes();        for (int i=1, wayNodesSize=wayNodes.size(); i < wayNodesSize; ++i) {          Node node1=wayNodes.get(i - 1);          Node node2=wayNodes.get(i);          float node1X=lonE7ToX(node1.getLon());          float node1Y=latE7ToY(node1.getLat());          float node2X=lonE7ToX(node2.getLon());          float node2Y=latE7ToY(node2.getLat());          if (isPositionOnLine(jx,jy,node1X,node1Y,node2X,node2Y)) {            double distance=GeoMath.getLineDistance(jx,jy,node1X,node1Y,node2X,node2Y);            if (distance < closestDistance) {              closestDistance=distance;              closestElement=way;            }          }        }      }    }  }  return closestElement;}  }
class C{  public Yaml(BaseConstructor constructor){  this(constructor,new Representer());}  }
class C{  @DSSink({DSSinkKind.SMS_MMS}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:52.986 -0500",hash_original_method="BF7C27985ACD2C46C3E7C98C6196EF24",hash_generated_method="BB13DA5E83C88211FB3E68F2D6E78465") public boolean disableCellBroadcast(int messageIdentifier){  boolean success=false;  try {    ISms iccISms=ISms.Stub.asInterface(ServiceManager.getService("isms"));    if (iccISms != null) {      success=iccISms.disableCellBroadcast(messageIdentifier);    }  } catch (  RemoteException ex) {  }  return success;}  }
class C{  public Iterable<Pair<Element,Visualization>> values(){  return map.values();}  }
class C{  public boolean isSortedFromTo(int from,int to){  if (size == 0)   return true;  checkRangeFromTo(from,to,size);  Object[] theElements=elements;  for (int i=from + 1; i <= to; i++) {    if (((Comparable)theElements[i]).compareTo((Comparable)theElements[i - 1]) < 0)     return false;  }  return true;}  }
class C{  public Canvas createGraphics(){  if (g == null) {    g=new Canvas(bi);  }  return g;}  }
class C{  public void update(Observable observable){  Transaction transaction=(Transaction)observable;  int serviceId=transaction.getServiceId();  if (LOCAL_LOGV)   Log.v(TAG,"update transaction " + serviceId);  try {synchronized (mProcessing) {      mProcessing.remove(transaction);      if (!mPending.isEmpty()) {        if (LOCAL_LOGV)         Log.v(TAG,"update: handle next pending transaction...");        Message msg=mServiceHandler.obtainMessage(EVENT_HANDLE_NEXT_PENDING_TRANSACTION,transaction.getConnectionSettings());        mServiceHandler.sendMessage(msg);      } else       if (mProcessing.isEmpty()) {        if (LOCAL_LOGV)         Log.v(TAG,"update: endMmsConnectivity");        endMmsConnectivity();      } else {        if (LOCAL_LOGV)         Log.v(TAG,"update: mProcessing is not empty");      }    }    Intent intent=new Intent(TRANSACTION_COMPLETED_ACTION);    TransactionState state=transaction.getState();    int result=state.getState();    intent.putExtra(STATE,result);switch (result) {case TransactionState.SUCCESS:      if (LOCAL_LOGV)       Log.v(TAG,"Transaction complete: " + serviceId);    intent.putExtra(STATE_URI,state.getContentUri());switch (transaction.getType()) {case Transaction.NOTIFICATION_TRANSACTION:case Transaction.RETRIEVE_TRANSACTION:    if (LOCAL_LOGV)     Log.v(TAG,"I removed some stuff here...");  break;case Transaction.SEND_TRANSACTION:RateController.getInstance().update();break;}break;case TransactionState.FAILED:if (LOCAL_LOGV) Log.v(TAG,"Transaction failed: " + serviceId);break;default :if (LOCAL_LOGV) Log.v(TAG,"Transaction state unknown: " + serviceId + " "+ result);break;}if (LOCAL_LOGV) Log.v(TAG,"update: broadcast transaction result " + result);sendBroadcast(intent);}  finally {transaction.detach(this);stopSelfIfIdle(serviceId);}}  }
class C{  public static int toInteger(Object obj){  Integer result=toIntegerObject(obj);  return result == null ? 0 : result.intValue();}  }
class C{  @Override public int compareTo(SAXRecord o){  int a=this.occurrences.size();  int b=o.getIndexes().size();  if (a == b) {    return 0;  } else   if (a > b) {    return 1;  }  return -1;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void updateDataToBeCompatibleWithNewEngine(final Version originalEngineVersion,final GameData data){}  }
class C{  public void saveVersions(Map<Object,VersionTag> vault){  Iterator it=this.iterator();  while (it.hasNext()) {    Entry e=it.next();    if (e.getVersionTag() != null || !vault.containsKey(e.getKey())) {      vault.put(e.getKey(),e.getVersionTag());    }  }}  }
class C{  @Override public boolean isVisible(){  return false;}  }
class C{  public List<NamedRelatedResourceRep> listByTenant(URI tenantId){  UriBuilder builder=client.uriBuilder(baseUrl);  builder.queryParam(SearchConstants.TENANT_ID_PARAM,tenantId);  VirtualArrayList response=client.getURI(VirtualArrayList.class,builder.build());  return ResourceUtils.defaultList(response.getVirtualArrays());}  }
class C{  @Override public void ATHROW(Throwable throwable){  this.env.topFrame().operandStack.popRef();}  }
class C{  private GridifySpringEnhancer(){}  }
class C{  public RandomResponseHandler(int length,long duration){  _length=length;  _duration=duration;  _rand=new Random();}  }
class C{  public void processChatLog(String log,boolean comprehension,boolean pin){  log("Loading chat log",Level.INFO,log.length());  TextStream stream=new TextStream(log);  Vertex lastSpeaker=null;  LanguageState oldState=getLanguageState();  Language languageThought=this.bot.mind().getThought(Language.class);  LearningMode oldMode=languageThought.getLearningMode();  if (comprehension) {    setLanguageState(LanguageState.ListeningOnly);    if (languageThought.getLearningMode() == LearningMode.Disabled) {      languageThought.setLearningMode(LearningMode.Everyone);    }  }  Vertex conversation=null;  Vertex question=null;  Vertex previous=null;  boolean wasAdmin=false;  boolean first=true;  boolean cycle=false;  int count=0;  try {    while (!stream.atEnd()) {      count++;      int marker=stream.getPosition();      String line=stream.nextLine().trim();      if (first && line.indexOf("<?xml") != -1) {        throw new SelfParseException("Chat log format must be text, not XML",stream);      }      first=false;      boolean cr=false;      while (line.length() == 0) {        if (stream.atEnd()) {          return;        }        cr=true;        marker=stream.getPosition();        line=stream.nextLine().trim();      }      Vertex input=null;      log("Processing chat log",Level.INFO,count,line);      for (int index=0; index < RETRY; index++) {        Network network=this.bot.memory().newMemory();        try {          if (comprehension) {            if (cr || (conversation == null)) {              conversation=network.createInstance(Primitive.CONVERSATION);              conversation.addRelationship(Primitive.TYPE,Primitive.CHAT);              lastSpeaker=null;            } else {              conversation=network.createVertex(conversation);            }          }          if (cr) {            question=null;            previous=null;          }          TextStream lineStream=new TextStream(line);          String speakerName=lineStream.upTo(':');          if (lineStream.atEnd()) {            lineStream.reset();            if (cycle) {              speakerName="self";            } else {              speakerName="anonymous";            }            cycle=!cycle;          } else {            lineStream.skip();          }          char peek=lineStream.peek();          EmotionalState state=EmotionalState.NONE;          if (peek == '<') {            lineStream.skip();            String emotion=lineStream.upTo('>');            if (lineStream.atEnd()) {              stream.setPosition(marker);              throw new SelfParseException("Expected '<emotion>' in chat text",stream);            }            lineStream.skip();            try {              state=EmotionalState.valueOf(emotion.toUpperCase());            } catch (            Exception exception) {              stream.setPosition(marker);              throw new SelfParseException("Invalid '<emotion>' in chat text",stream);            }          }          setEmotionalState(state);          String message=lineStream.upToEnd().trim();          if (speakerName.equalsIgnoreCase("default")) {            Vertex language=network.createVertex(Language.class);            input=network.createSentence(message);            input.setPinned(true);            language.addRelationship(Primitive.RESPONSE,input);          } else           if (speakerName.equalsIgnoreCase("greeting")) {            Vertex language=network.createVertex(Language.class);            input=network.createSentence(message);            input.setPinned(true);            language.addRelationship(Primitive.GREETING,input);          } else           if (speakerName.equalsIgnoreCase("script")) {            input=SelfCompiler.getCompiler().evaluateExpression(message,network.createVertex(Primitive.SELF),network.createVertex(Primitive.SELF),false,network);          } else {            if (comprehension) {              input=createInputSentence(message,network);              input.addRelationship(Primitive.INSTANTIATION,Primitive.CHAT);              if (this.emotionalState != EmotionalState.NONE) {                this.emotionalState.apply(input);                this.emotionalState.apply(input.getRelationship(Primitive.INPUT));              }              if (lastSpeaker != null) {                lastSpeaker=network.createVertex(lastSpeaker);                input.addRelationship(Primitive.TARGET,lastSpeaker);              }              Vertex speaker=null;              if (speakerName.toLowerCase().equals("self")) {                speaker=network.createVertex(Primitive.SELF);                wasAdmin=true;              } else {                speaker=network.createSpeaker(speakerName);                if (speakerName.equals("admin")) {                  speaker.addRelationship(Primitive.ASSOCIATED,Primitive.ADMINISTRATOR);                  wasAdmin=true;                }              }              input.addRelationship(Primitive.SPEAKER,speaker);              speaker.addRelationship(Primitive.INPUT,input);              conversation.addRelationship(Primitive.SPEAKER,speaker);              Language.addToConversation(input,conversation);              lastSpeaker=speaker;            }            Vertex sentence=network.createSentence(message);            if (pin) {              sentence.setPinned(true);            }            if (question != null) {              question=network.createVertex(question);              if (pin) {                question.setPinned(true);              }              question.addWeakRelationship(Primitive.RESPONSE,sentence,languageThought.getLearningRate());              question.associateAll(Primitive.WORD,question,Primitive.QUESTION);              network.checkReduction(question);              question.weakAssociateAll(Primitive.SYNONYM,sentence,Primitive.RESPONSE,languageThought.getLearningRate());              if (previous != null) {                previous=network.createVertex(previous);                Language.addSentencePreviousMeta(question,sentence,previous,false,network);              }            }            previous=question;            question=sentence;          }          network.save();          break;        } catch (        SelfParseException failed) {          failed.printStackTrace();          log(failed);          network.clear();          throw failed;        }catch (        Exception failed) {          failed.printStackTrace();          log(failed);          network.clear();        }      }      if (comprehension) {        if (input == null) {          return;        }        this.bot.memory().addActiveMemory(input);        int abort=0;        while ((abort < 20) && !input.hasRelationship(Primitive.CONTEXT)) {          Utils.sleep(100);          Network memory=this.bot.memory().newMemory();          input=memory.createVertex(input);          abort++;        }        if (count == 100) {          log("Chat log import exceeds 100 lines, offloading to background task",Level.WARNING);        }        if (abort >= 20 || count > 100) {          Utils.sleep(LOG_SLEEP);        }      }    }    if (languageThought.getLearningMode() == LearningMode.Administrators && !wasAdmin) {      throw new SelfParseException("Expected 'admin:' speaker in chat text when learning mode is administrators only",stream);    }  }  finally {    setLanguageState(oldState);    languageThought.setLearningMode(oldMode);  }}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  public boolean isSoundHighlightEnabled(){  return preferences.getBoolean(resources.getString(R.string.key_sound_highlight),Boolean.parseBoolean(resources.getString(R.string.default_sound_highlight)));}  }
class C{  @Override public void validate(final IDescription vd){  final VariableDescription cd=(VariableDescription)vd;  final boolean isParameter=cd.isExperimentParameter();  final String name=cd.getName();  if (name == null) {    cd.error("The attribute name is missing",IGamlIssue.MISSING_NAME);    return;  }  if (!isParameter) {    final IType t=cd.getEnclosingDescription().getTypeNamed(name);    if (t != Types.NO_TYPE && !t.isAgentType()) {      cd.error(name + " is a type name. It cannot be used as an attribute name",IGamlIssue.IS_A_TYPE,NAME,name);      return;    }    if (RESERVED.contains(name)) {      cd.error(name + " is a reserved keyword. It cannot be used as an attribute name",IGamlIssue.IS_RESERVED,NAME,name);      return;    }  }  if (cd.hasFacet(FUNCTION) && (cd.hasFacet(INIT) || cd.hasFacet(UPDATE) || cd.hasFacet(VALUE)|| cd.hasFacet(ON_CHANGE))) {    cd.error("A function cannot have an 'init', 'on_change' or 'update' facet",IGamlIssue.REMOVE_VALUE,FUNCTION);    return;  }  if (TRUE.equals(cd.getLitteral(CONST))) {    if (cd.hasFacet(VALUE) || cd.hasFacet(UPDATE)) {      cd.warning("A constant attribute cannot have an update value (use init or <- instead)",IGamlIssue.REMOVE_CONST,UPDATE);    } else     if (cd.hasFacet(FUNCTION)) {      cd.error("A function cannot be constant (use init or <- instead)",IGamlIssue.REMOVE_CONST,FUNCTION);      return;    } else     if (cd.isParameter()) {      cd.error("Parameter '" + cd.getParameterName() + "'  cannot be declared as constant ",IGamlIssue.REMOVE_CONST);      return;    } else     if (cd.hasFacet(ON_CHANGE)) {      cd.warning("A constant attribute cannot declare an on_change facet",IGamlIssue.REMOVE_CONST,ON_CHANGE);    }  }  if (cd.isParameter()) {    assertCanBeParameter(cd);  } else {    assertValueFacetsTypes(cd,cd.getType());  }  assertAssignmentFacetsTypes(cd);  assertAmongValues(cd);}  }
class C{  public ECPoint multiply(ECPoint p,BigInteger k,PreCompInfo preCompInfo){  BigInteger e=k;  BigInteger h=e.multiply(BigInteger.valueOf(3));  ECPoint neg=p.negate();  ECPoint R=p;  for (int i=h.bitLength() - 2; i > 0; --i) {    R=R.twice();    boolean hBit=h.testBit(i);    boolean eBit=e.testBit(i);    if (hBit != eBit) {      R=R.add(hBit ? p : neg);    }  }  return R;}  }
class C{  @Override public void activate(){  scriptHelper=getSlingScriptHelper();  recaptchaService=scriptHelper.getService(RecaptchaService.class);  if (recaptchaService != null) {    siteKey=recaptchaService.getSiteKey();    secretKey=isAuthorable() ? recaptchaService.getSecretKey() : PublickConstants.PASSWORD_REPLACEMENT;    enabled=recaptchaService.getEnabled();  }}  }
class C{  public boolean addressTypeUnique(){  return false;}  }
class C{  public GatewayResponse(InputStream xmlstream,GatewayRequest req) throws Exception {  DocumentBuilderFactory builderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder builder=builderFactory.newDocumentBuilder();  Document doc=builder.parse(xmlstream);  Node rootnode=doc.getDocumentElement();  String root=rootnode.getNodeName();  if (root != "ewayResponse") {    throw new Exception("Bad root element in response: " + root);  }  NodeList list=doc.getElementsByTagName("*");  for (int i=0; i < list.getLength(); i++) {    Node node=list.item(i);    String name=node.getNodeName();    if (name == "ewayResponse")     continue;    Text textnode=(Text)node.getFirstChild();    String value="";    if (textnode != null)     value=textnode.getNodeValue();    if (name == "ewayTrxnError")     txTrxnError=value; else     if (name == "ewayTrxnStatus") {      if (value.toLowerCase().trim().equals("true")) {        txTrxnStatus=true;      }    } else     if (name == "ewayTrxnNumber")     txTrxnNumber=value; else     if (name == "ewayTrxnOption1")     txTrxnOption1=value; else     if (name == "ewayTrxnOption2")     txTrxnOption2=value; else     if (name == "ewayTrxnOption3")     txTrxnOption3=value; else     if (name == "ewayReturnAmount") {      if (!value.equals("")) {        txReturnAmount=Integer.parseInt(value);      }    } else     if (name == "ewayAuthCode")     txAuthCode=value; else     if (name == "ewayTrxnReference")     txTrxnReference=value; else     if (name == "ewayBeagleScore") {      if (!value.equals("")) {        txBeagleScore=Double.parseDouble(value);      }    } else {      throw new Exception("Unknown field in response: " + name);    }  }  if (req.isTestMode()) {    Debug.logInfo("[eWay Reply]\n" + this.toString(),module);  }}  }
class C{  public void put(String key,InputStream stream){  put(key,stream,null);}  }
class C{  public int compareTo(Object o){  SweepLineEvent pe=(SweepLineEvent)o;  if (xValue < pe.xValue)   return -1;  if (xValue > pe.xValue)   return 1;  if (eventType < pe.eventType)   return -1;  if (eventType > pe.eventType)   return 1;  return 0;}  }
class C{  private static SecretKeySpec generateKey(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {  final MessageDigest digest=MessageDigest.getInstance(HASH_ALGORITHM);  byte[] bytes=password.getBytes("UTF-8");  digest.update(bytes,0,bytes.length);  byte[] key=digest.digest();  SecretKeySpec secretKeySpec=new SecretKeySpec(key,"AES");  return secretKeySpec;}  }
class C{  @SuppressWarnings("deprecation") public void layoutContainer(Container parent){  JRootPane root=(JRootPane)parent;  Rectangle b=root.getBounds();  Insets i=root.getInsets();  int nextY=0;  int w=b.width - i.right - i.left;  int h=b.height - i.top - i.bottom;  if (root.getLayeredPane() != null) {    root.getLayeredPane().setBounds(i.left,i.top,w,h);  }  if (root.getGlassPane() != null) {    root.getGlassPane().setBounds(i.left,i.top,w,h);  }  if (root.getWindowDecorationStyle() != JRootPane.NONE && (root.getUI() instanceof BERootPaneUI)) {    JComponent titlePane=((BERootPaneUI)root.getUI()).getTitlePane();    if (titlePane != null) {      Dimension tpd=titlePane.getPreferredSize();      if (tpd != null) {        int tpHeight=tpd.height;        titlePane.setBounds(0,0,w,tpHeight);        nextY+=tpHeight;      }    }  }  if (root.getMenuBar() != null && root.getMenuBar().isVisible()) {    Dimension mbd=root.getMenuBar().getPreferredSize();    root.getMenuBar().setBounds(0,nextY,w,mbd.height);    nextY+=mbd.height;  }  if (root.getContentPane() != null && root.getContentPane().isVisible()) {    Dimension cpd=root.getContentPane().getPreferredSize();    root.getContentPane().setBounds(0,nextY,w,h < nextY ? 0 : h - nextY);  }}  }
class C{  protected boolean compare(Instances inst1,Instances inst2){  boolean result;  int i;  result=(inst1.numInstances() == inst2.numInstances());  if (result) {    for (i=0; i < inst1.numInstances(); i++) {      result=compare(inst1.instance(i),inst2.instance(i));      if (!result) {        System.out.println("Values in line " + (i + 1) + " differ!");        break;      }    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.337 -0500",hash_original_method="C45BF775ACB085D4AB34759EE5B8F1A2",hash_generated_method="62C206B2D6FE9173EE75BB173DDBCBFA") public static void cursorStringToContentValues(Cursor cursor,String field,ContentValues values,String key){  values.put(key,cursor.getString(cursor.getColumnIndexOrThrow(field)));}  }
class C{  public static boolean isInSameBuilding(IGame game,Entity attacker,Targetable target){  if (!(target instanceof Entity)) {    return false;  }  Entity targetEntity=(Entity)target;  if (!Compute.isInBuilding(game,attacker) || !Compute.isInBuilding(game,targetEntity)) {    return false;  }  Building attkBldg=game.getBoard().getBuildingAt(attacker.getPosition());  Building targBldg=game.getBoard().getBuildingAt(target.getPosition());  return attkBldg.equals(targBldg);}  }
class C{  private void printFinalLiveIntervals(IR ir){  ir.printInstructions();  System.out.println("\n  *+*+*+*+*+ Final Live Intervals for " + ir.method.getDeclaringClass() + "."+ ir.method.getName());  for (BasicBlock block=ir.firstBasicBlockInCodeOrder(); block != null; block=block.nextBasicBlockInCodeOrder()) {    liveIntervals.printLiveIntervalList(block);  }  System.out.println("  *+*+*+*+*+ End Final Live Intervals\n");}  }
class C{  public void onDreamingStopped(){  if (mDebug)   Slog.v(TAG,"onDreamingStopped()");}  }
class C{  private int decodeGaincLevels(int chNum,int codedSubbands){  Channel chan=ctx.channels[chNum];  Channel refChan=ctx.channels[0];switch (br.read(2)) {case 0:    for (int sb=0; sb < codedSubbands; sb++) {      for (int i=0; i < chan.gainData[sb].numPoints; i++) {        chan.gainData[sb].levCode[i]=br.read(4);      }    }  break;case 1:if (chNum > 0) {  for (int sb=0; sb < codedSubbands; sb++) {    for (int i=0; i < chan.gainData[sb].numPoints; i++) {      int delta=gain_vlc_tabs[5].getVLC2(br);      int pred=(i >= refChan.gainData[sb].numPoints ? 7 : refChan.gainData[sb].levCode[i]);      chan.gainData[sb].levCode[i]=(pred + delta) & 0xF;    }  }} else {  for (int sb=0; sb < codedSubbands; sb++) {    gaincLevelMode1m(chan.gainData[sb]);  }}break;case 2:if (chNum > 0) {for (int sb=0; sb < codedSubbands; sb++) {if (chan.gainData[sb].numPoints > 0) {  if (br.readBool()) {    gaincLevelMode1m(chan.gainData[sb]);  } else {    gaincLevelMode3s(chan.gainData[sb],refChan.gainData[sb]);  }}}} else {if (chan.gainData[0].numPoints > 0) {gaincLevelMode1m(chan.gainData[0]);;}for (int sb=1; sb < codedSubbands; sb++) {for (int i=0; i < chan.gainData[sb].numPoints; i++) {  int delta=gain_vlc_tabs[4].getVLC2(br);  int pred=(i >= chan.gainData[sb - 1].numPoints ? 7 : chan.gainData[sb - 1].levCode[i]);  chan.gainData[sb].levCode[i]=(pred + delta) & 0xF;}}}break;case 3:if (chNum > 0) {for (int sb=0; sb < codedSubbands; sb++) {gaincLevelMode3s(chan.gainData[sb],refChan.gainData[sb]);}} else {int deltaBits=br.read(2);int minVal=br.read(4);for (int sb=0; sb < codedSubbands; sb++) {for (int i=0; i < chan.gainData[sb].numPoints; i++) {chan.gainData[sb].levCode[i]=minVal + getDelta(deltaBits);if (chan.gainData[sb].levCode[i] > 15) {return AT3P_ERROR;}}}}break;}return 0;}  }
class C{  public String numNeighboursTipText(){  return "Number of nearest neighbours for attribute estimation.";}  }
class C{  @Override public void visit(SolicitResponseForwardStatement n){  if (insideCourierOperationType == null) {    error(n,"the forward statement may be used only inside a courier definition");  } else   if (insideCourierOperationType != OperationType.REQUEST_RESPONSE) {    error(n,"forward statement is a solicit-response, but is inside a one-way courier definition. Maybe you wanted to specify a notification forward?");  }}  }
class C{  public Result run(Database database,Relation<O> relation){  DistanceQuery<O> distQuery=database.getDistanceQuery(relation,getDistanceFunction());  KNNQuery<O> knnQuery=database.getKNNQuery(distQuery,k);  if (queries == null) {    final DBIDs sample=DBIDUtil.randomSample(relation.getDBIDs(),sampling,random);    FiniteProgress prog=LOG.isVeryVerbose() ? new FiniteProgress("kNN queries",sample.size(),LOG) : null;    int hash=0;    MeanVariance mv=new MeanVariance(), mvdist=new MeanVariance();    for (DBIDIter iditer=sample.iter(); iditer.valid(); iditer.advance()) {      KNNList knns=knnQuery.getKNNForDBID(iditer,k);      int ichecksum=0;      for (DBIDIter it=knns.iter(); it.valid(); it.advance()) {        ichecksum+=DBIDUtil.asInteger(it);      }      hash=Util.mixHashCodes(hash,ichecksum);      mv.put(knns.size());      mvdist.put(knns.getKNNDistance());      LOG.incrementProcessed(prog);    }    LOG.ensureCompleted(prog);    if (LOG.isStatistics()) {      LOG.statistics("Result hashcode: " + hash);      LOG.statistics("Mean number of results: " + mv.getMean() + " +- "+ mv.getNaiveStddev());      if (mvdist.getCount() > 0) {        LOG.statistics("Mean k-distance: " + mvdist.getMean() + " +- "+ mvdist.getNaiveStddev());      }    }  } else {    TypeInformation res=getDistanceFunction().getInputTypeRestriction();    MultipleObjectsBundle bundle=queries.loadData();    int col=-1;    for (int i=0; i < bundle.metaLength(); i++) {      if (res.isAssignableFromType(bundle.meta(i))) {        col=i;        break;      }    }    if (col < 0) {      throw new IncompatibleDataException("No compatible data type in query input was found. Expected: " + res.toString());    }    DBIDRange sids=DBIDUtil.generateStaticDBIDRange(bundle.dataLength());    final DBIDs sample=DBIDUtil.randomSample(sids,sampling,random);    FiniteProgress prog=LOG.isVeryVerbose() ? new FiniteProgress("kNN queries",sample.size(),LOG) : null;    int hash=0;    MeanVariance mv=new MeanVariance(), mvdist=new MeanVariance();    for (DBIDIter iditer=sample.iter(); iditer.valid(); iditer.advance()) {      int off=sids.binarySearch(iditer);      assert (off >= 0);      @SuppressWarnings("unchecked") O o=(O)bundle.data(off,col);      KNNList knns=knnQuery.getKNNForObject(o,k);      int ichecksum=0;      for (DBIDIter it=knns.iter(); it.valid(); it.advance()) {        ichecksum+=DBIDUtil.asInteger(it);      }      hash=Util.mixHashCodes(hash,ichecksum);      mv.put(knns.size());      mvdist.put(knns.getKNNDistance());      LOG.incrementProcessed(prog);    }    LOG.ensureCompleted(prog);    if (LOG.isStatistics()) {      LOG.statistics("Result hashcode: " + hash);      LOG.statistics("Mean number of results: " + mv.getMean() + " +- "+ mv.getNaiveStddev());      if (mvdist.getCount() > 0) {        LOG.statistics("Mean k-distance: " + mvdist.getMean() + " +- "+ mvdist.getNaiveStddev());      }    }  }  return null;}  }
class C{  public void toggleSelection(){  if (pickedObject instanceof Highlightable) {    boolean isNewSelection=pickedObject != this.selectedObject;    if (isNewSelection && this.selectedObject instanceof Highlightable) {      ((Highlightable)this.selectedObject).setHighlighted(false);    }    if (isNewSelection && pickedObject instanceof Renderable) {      Toast.makeText(getApplicationContext(),((Renderable)pickedObject).getDisplayName(),Toast.LENGTH_SHORT).show();    }    ((Highlightable)pickedObject).setHighlighted(isNewSelection);    this.getWorldWindow().requestRedraw();    this.selectedObject=isNewSelection ? pickedObject : null;  }}  }
class C{  public void addRootDocument(String name,String fileExt,String pathDocumentFile) throws Exception {  int sortOrder=m_documents.getNextSortOrder();  addDocument(name,FolderBaseDefs.CLF_ROOT_ID,fileExt,sortOrder,pathDocumentFile,null);}  }
class C{  public boolean isSetSyncRequest(){  return this.syncRequest != null;}  }
class C{  public void postCreate(Engine.Create create){}  }
class C{  public EntryNotFoundException(String msg){  super(msg);}  }
class C{  public static InlineQueryResultAudioBuilder builder(){  return new InlineQueryResultAudioBuilder();}  }
class C{  protected void fireChangeEvent(){  repaint();  if (changeEvent == null)   changeEvent=new ChangeEvent(this);  Iterator iter=listeners.iterator();  while (iter.hasNext())   ((ChangeListener)iter.next()).stateChanged(changeEvent);}  }
class C{  public void writeRawByte(final byte value) throws IOException {  if (position == limit) {    refreshBuffer();  }  buffer[position++]=value;  ++totalBytesWritten;}  }
class C{  public AbstractNode(int capacity,boolean isLeaf,Class<? super E> eclass){  super();  this.numEntries=0;  this.entries=new Entry[capacity];  this.isLeaf=isLeaf;}  }
class C{  private void generateControlProgramJobs(ArrayList<Lop> execNodes,ArrayList<Instruction> inst,ArrayList<Instruction> writeInst,ArrayList<Instruction> deleteInst) throws LopsException, DMLRuntimeException {  ArrayList<Lop> markedNodes=new ArrayList<Lop>();  ArrayList<String> var_deletions=new ArrayList<String>();  HashMap<String,Lop> var_deletionsLineNum=new HashMap<String,Lop>();  boolean doRmVar=false;  for (int i=0; i < execNodes.size(); i++) {    Lop node=execNodes.get(i);    doRmVar=false;    if (node.getExecLocation() == ExecLocation.Data && ((Data)node).getOperationType() == Data.OperationTypes.READ && ((Data)node).getDataType() == DataType.SCALAR && node.getOutputParameters().getFile_name() == null) {      markedNodes.add(node);      continue;    }    if (node.getExecLocation() == ExecLocation.ControlProgram) {      if (node.getDataType() == DataType.SCALAR) {        NodeOutput out=setupNodeOutputs(node,ExecType.CP,false,false);        inst.addAll(out.getPreInstructions());        deleteInst.addAll(out.getLastInstructions());      } else {        NodeOutput out=setupNodeOutputs(node,ExecType.CP,false,false);        inst.addAll(out.getPreInstructions());        boolean hasTransientWriteParent=false;        for (        Lop parent : node.getOutputs()) {          if (parent.getExecLocation() == ExecLocation.Data && ((Data)parent).getOperationType() == Data.OperationTypes.WRITE && ((Data)parent).isTransient()) {            hasTransientWriteParent=true;            break;          }        }        if (!hasTransientWriteParent) {          deleteInst.addAll(out.getLastInstructions());        } else {          var_deletions.add(node.getOutputParameters().getLabel());          var_deletionsLineNum.put(node.getOutputParameters().getLabel(),node);        }      }      String inst_string="";      if (node.getType() == Lop.Type.ParameterizedBuiltin || node.getType() == Lop.Type.GroupedAgg || node.getType() == Lop.Type.DataGen) {        inst_string=node.getInstructions(node.getOutputParameters().getLabel());      } else       if (node.getType() == Lop.Type.FunctionCallCP) {        String[] inputs=new String[node.getInputs().size()];        String[] outputs=new String[node.getOutputs().size()];        int count=0;        for (        Lop in : node.getInputs())         inputs[count++]=in.getOutputParameters().getLabel();        count=0;        for (        Lop out : node.getOutputs()) {          outputs[count++]=out.getOutputParameters().getLabel();        }        inst_string=node.getInstructions(inputs,outputs);      } else {        if (node.getInputs().isEmpty()) {          inst_string=node.getInstructions(node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 1) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 2) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getInputs().get(1).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 3 || node.getType() == Type.Ternary) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getInputs().get(1).getOutputParameters().getLabel(),node.getInputs().get(2).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 4) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getInputs().get(1).getOutputParameters().getLabel(),node.getInputs().get(2).getOutputParameters().getLabel(),node.getInputs().get(3).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 5) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getInputs().get(1).getOutputParameters().getLabel(),node.getInputs().get(2).getOutputParameters().getLabel(),node.getInputs().get(3).getOutputParameters().getLabel(),node.getInputs().get(4).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 6) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getInputs().get(1).getOutputParameters().getLabel(),node.getInputs().get(2).getOutputParameters().getLabel(),node.getInputs().get(3).getOutputParameters().getLabel(),node.getInputs().get(4).getOutputParameters().getLabel(),node.getInputs().get(5).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 7) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getInputs().get(1).getOutputParameters().getLabel(),node.getInputs().get(2).getOutputParameters().getLabel(),node.getInputs().get(3).getOutputParameters().getLabel(),node.getInputs().get(4).getOutputParameters().getLabel(),node.getInputs().get(5).getOutputParameters().getLabel(),node.getInputs().get(6).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 13) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getInputs().get(1).getOutputParameters().getLabel(),node.getInputs().get(2).getOutputParameters().getLabel(),node.getInputs().get(3).getOutputParameters().getLabel(),node.getInputs().get(4).getOutputParameters().getLabel(),node.getInputs().get(5).getOutputParameters().getLabel(),node.getInputs().get(6).getOutputParameters().getLabel(),node.getInputs().get(7).getOutputParameters().getLabel(),node.getInputs().get(8).getOutputParameters().getLabel(),node.getInputs().get(9).getOutputParameters().getLabel(),node.getInputs().get(10).getOutputParameters().getLabel(),node.getInputs().get(11).getOutputParameters().getLabel(),node.getInputs().get(12).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else         if (node.getInputs().size() == 14) {          inst_string=node.getInstructions(node.getInputs().get(0).getOutputParameters().getLabel(),node.getInputs().get(1).getOutputParameters().getLabel(),node.getInputs().get(2).getOutputParameters().getLabel(),node.getInputs().get(3).getOutputParameters().getLabel(),node.getInputs().get(4).getOutputParameters().getLabel(),node.getInputs().get(5).getOutputParameters().getLabel(),node.getInputs().get(6).getOutputParameters().getLabel(),node.getInputs().get(7).getOutputParameters().getLabel(),node.getInputs().get(8).getOutputParameters().getLabel(),node.getInputs().get(9).getOutputParameters().getLabel(),node.getInputs().get(10).getOutputParameters().getLabel(),node.getInputs().get(11).getOutputParameters().getLabel(),node.getInputs().get(12).getOutputParameters().getLabel(),node.getInputs().get(13).getOutputParameters().getLabel(),node.getOutputParameters().getLabel());        } else {          throw new LopsException(node.printErrorLocation() + "Node with " + node.getInputs().size()+ " inputs is not supported in CP yet! \n");        }      }      try {        if (LOG.isTraceEnabled())         LOG.trace("Generating instruction - " + inst_string);        Instruction currInstr=InstructionParser.parseSingleInstruction(inst_string);        if (currInstr == null) {          throw new LopsException("Error parsing the instruction:" + inst_string);        }        if (node._beginLine != 0)         currInstr.setLocation(node); else         if (!node.getOutputs().isEmpty())         currInstr.setLocation(node.getOutputs().get(0)); else         if (!node.getInputs().isEmpty())         currInstr.setLocation(node.getInputs().get(0));        inst.add(currInstr);      } catch (      Exception e) {        throw new LopsException(node.printErrorLocation() + "Problem generating simple inst - " + inst_string,e);      }      markedNodes.add(node);      doRmVar=true;    } else     if (node.getExecLocation() == ExecLocation.Data) {      Data dnode=(Data)node;      Data.OperationTypes op=dnode.getOperationType();      if (op == Data.OperationTypes.WRITE) {        NodeOutput out=null;        if (sendWriteLopToMR(node)) {          doRmVar=false;        } else {          out=setupNodeOutputs(node,ExecType.CP,false,false);          if (dnode.getDataType() == DataType.SCALAR) {            writeInst.addAll(out.getLastInstructions());            doRmVar=false;          } else {            if (dnode.isTransient()) {              deleteInst.addAll(out.getLastInstructions());              doRmVar=false;            } else {              inst.addAll(out.getLastInstructions());              doRmVar=true;            }          }          markedNodes.add(node);        }      } else {        if (node.getDataType() == DataType.SCALAR) {          node.getOutputParameters().setLabel(Lop.SCALAR_VAR_NAME_PREFIX + var_index.getNextID());          String io_inst=node.getInstructions(node.getOutputParameters().getLabel(),node.getOutputParameters().getFile_name());          CPInstruction currInstr=CPInstructionParser.parseSingleInstruction(io_inst);          currInstr.setLocation(node);          inst.add(currInstr);          Instruction tempInstr=VariableCPInstruction.prepareRemoveInstruction(node.getOutputParameters().getLabel());          tempInstr.setLocation(node);          deleteInst.add(tempInstr);        } else {          throw new LopsException("Matrix READs are not handled in CP yet!");        }        markedNodes.add(node);        doRmVar=true;      }    }    if (doRmVar)     processConsumersForInputs(node,inst,deleteInst);    doRmVar=false;  }  for (  String var : var_deletions) {    Instruction rmInst=VariableCPInstruction.prepareRemoveInstruction(var);    if (LOG.isTraceEnabled())     LOG.trace("  Adding var_deletions: " + rmInst.toString());    rmInst.setLocation(var_deletionsLineNum.get(var));    deleteInst.add(rmInst);  }  for (  Lop node : markedNodes) {    execNodes.remove(node);  }}  }
class C{  @Override public void onViewRecycled(ViewHolder holder){  holder.itemView.setOnLongClickListener(null);  super.onViewRecycled(holder);}  }
class C{  public T casePropertyNameOwner(PropertyNameOwner object){  return null;}  }
class C{  @Override public void printInfo(PrintStream out,CharSequence prefix){  int c=0;  for (  Trie trie : tries)   trie.printInfo(out,prefix + "[" + (++c)+ "] ");}  }
class C{  public static void init(Context context){  if (null == context) {    throw new IllegalArgumentException("context cannot be null.");  }  mContext=context.getApplicationContext();}  }
class C{  public synchronized void lockForUpdate() throws InterruptedException {  while (commitCount > 0 || commitRequests > 0) {    wait();  }  updateCount++;}  }
class C{  public XObject operate(XObject left,XObject right) throws javax.xml.transform.TransformerException {  return left.greaterThan(right) ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public int compare(String s){  int index=0;  if (this.s.length() < s.length())   index=-1;  if (s.length() < this.s.length())   index=1;  for (int i=0; i < this.s.length(); i++) {    if (this.s.charAt(i) < s.charAt(i))     index=-(i + 1);    if (this.s.charAt(i) > s.charAt(i))     index=i + 1;  }  return index;}  }
class C{  public boolean isAlive() throws IOException {  if (pidFilePath == null) {    return false;  }  final String isAliveCmd=String.format("[ -r %1$s ] && kill -0 $(<%1$s) || echo 'Unable read PID file'",pidFilePath);  final Exec exec=docker.createExec(container,false,"/bin/bash","-c",isAliveCmd);  final ListLineConsumer output=new ListLineConsumer();  docker.startExec(exec.getId(),new LogMessagePrinter(output));  return output.getText().isEmpty();}  }
class C{  public boolean isFullyBoundForKey(){  return isFullyBoundForKey;}  }
class C{  public static void resetLoadFailure(){  loadFailureEncountered=false;}  }
class C{  public ViewAnimator interpolator(Interpolator interpolator){  this.interpolator=interpolator;  return this;}  }
class C{  public boolean isMaxYSet(int scale){  return mMaxY[scale] != -MathHelper.NULL_VALUE;}  }
class C{  private void updateDeployGroupCache(final ChannelServiceAccess model){  this.deployKeysMap.clear();  for (  final Map.Entry<String,Set<String>> entry : model.getDeployGroupMap().entrySet()) {    final String channelId=entry.getKey();    final List<DeployGroup> groups=entry.getValue().stream().map(null).collect(Collectors.toList());    this.deployKeysMap.putAll(channelId,groups);  }}  }
class C{  private static GoogleCredential authorize() throws Exception {  return new GoogleCredential.Builder().setTransport(httpTransport).setJsonFactory(JSON_FACTORY).setServiceAccountId(SERVICE_ACCT_EMAIL).setServiceAccountPrivateKeyFromP12File(new File(PredictionSample.class.getResource("/" + SERVICE_ACCT_KEYFILE).getFile())).setServiceAccountScopes(Arrays.asList(PredictionScopes.PREDICTION,StorageScopes.DEVSTORAGE_READ_ONLY)).build();}  }
class C{  protected static PropertyDescriptor[] introspect(Class clazz){  BeanInfo beanInfo;  try {    beanInfo=Introspector.getBeanInfo(clazz);  } catch (  IntrospectionException e) {    return (new PropertyDescriptor[0]);  }  return beanInfo.getPropertyDescriptors();}  }
class C{  public void addJunction(S source,List<JunctionData<S,E>> junctions){  this.junctions.put(source,junctions);}  }
class C{  public static void main(String[] args){  MyString2 str1=new MyString2("test1");  MyString2 str2=new MyString2("abcdefghijklm");  System.out.println("\nCompare str1 to \"test1\":");  System.out.println(str1.compare("test1"));  System.out.println("\nDisplay a substring if str2 beginning at index 5:");  print(str2.substring(5));  System.out.println("\nConvert str2 to upper case:");  print(str2.toUpperCase());  System.out.println("\nDisplay the boolean value true as a MyStirng2 object:");  print(MyString2.valueOf(true));}  }
class C{  private static boolean focusCenter(){  return (!CropOverlayView.showGuidelines());}  }
class C{  MyDate(){  GregorianCalendar calander=new GregorianCalendar();  year=calander.get(GregorianCalendar.YEAR);  month=calander.get(GregorianCalendar.MONTH);  day=calander.get(GregorianCalendar.DAY_OF_MONTH);}  }
class C{  private void processDataPages(SpatialPrimitiveDistanceFunction<? super V> df,List<KNNHeap> pr_heaps,List<KNNHeap> ps_heaps,N pr,N ps){  for (int j=0; j < ps.getNumEntries(); j++) {    final SpatialPointLeafEntry s_e=(SpatialPointLeafEntry)ps.getEntry(j);    final KNNHeap hj=ps_heaps != null ? ps_heaps.get(j) : null;    final DBID s_id=s_e.getDBID();    for (int i=0; i < pr.getNumEntries(); i++) {      final SpatialPointLeafEntry r_e=(SpatialPointLeafEntry)pr.getEntry(i);      double distance=df.minDist(s_e,r_e);      pr_heaps.get(i).insert(distance,s_id);      if (hj != null) {        hj.insert(distance,r_e.getDBID());      }    }  }}  }
class C{  public void clearChart(){  int seriesCount=dataset.getSeriesCount();  for (int i=0; seriesCount > i; ++i) {    dataset.getSeries(i).clear();  }}  }
class C{  public Object put(Object key,Object value){  int hash=key == null ? 0 : key.hashCode() & 0x7FFFFFFF;  int index=hash % table.length;  for (Entry e=table[index]; e != null; e=e.next) {    if (e.hash == hash && (e.key == null && key == null || e.key != null && e.key.equals(key))) {      Object old=e.value;      e.value=value;      return old;    }  }  int len=table.length;  if (count++ >= (len - (len >> 2))) {    rehash();    index=hash % table.length;  }  Entry e=new Entry(hash,key,value,table[index]);  table[index]=e;  return null;}  }
class C{  public int totalShard(){  return totalShard;}  }
class C{  public static String encodeFromFile(String filename) throws java.io.IOException {  String encodedData=null;  Base64.InputStream bis=null;  try {    java.io.File file=new java.io.File(filename);    byte[] buffer=new byte[Math.max((int)(file.length() * 1.4),40)];    int length=0;    int numBytes=0;    bis=new Base64.InputStream(new java.io.BufferedInputStream(new java.io.FileInputStream(file)),Base64.ENCODE);    while ((numBytes=bis.read(buffer,length,4096)) >= 0) {      length+=numBytes;    }    encodedData=new String(buffer,0,length,Base64.PREFERRED_ENCODING);  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      bis.close();    } catch (    Exception e) {    }  }  return encodedData;}  }
class C{  public void testCharVarchar() throws Exception {  try {    this.stmt.execute("DROP TABLE IF EXISTS charVarCharTest");    this.stmt.execute("CREATE TABLE charVarCharTest (  TableName VARCHAR(64),  FieldName VARCHAR(64),  NextCounter INTEGER);");    String query="SELECT TableName, FieldName, NextCounter FROM charVarCharTest";    this.rs=this.stmt.executeQuery(query);    ResultSetMetaData rsmeta=this.rs.getMetaData();    assertTrue(rsmeta.getColumnTypeName(1).equalsIgnoreCase("VARCHAR"));    assertTrue(rsmeta.getColumnType(1) == 12);  }  finally {    this.stmt.execute("DROP TABLE IF EXISTS charVarCharTest");  }}  }
class C{  public boolean equals(IBinding o){  if (o == this) {    return true;  }  if (o instanceof IBinding) {    IBinding b=(IBinding)o;    return var == b.getVar() && val.equals(b.getVal());  }  return false;}  }
class C{  public WeakValueMap(){  hash=new HashMap<K,WeakEntry>();}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:46.650 -0500",hash_original_method="2EFAB9CD472E8A9D51A90FC23F3B4B08",hash_generated_method="2F99CF48367A1485398C659CC2355AF7") public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("SIPEtag.parse");  SIPETag sipEtag=new SIPETag();  try {    headerName(TokenTypes.SIP_ETAG);    this.lexer.SPorHT();    this.lexer.match(TokenTypes.ID);    Token token=lexer.getNextToken();    sipEtag.setETag(token.getTokenValue());    this.lexer.SPorHT();    this.lexer.match('\n');    return sipEtag;  }  finally {    if (debug)     dbg_leave("SIPEtag.parse");  }}  }
class C{  public MethodSubstitutionPlugin(BytecodeProvider bytecodeProvider,Class<?> declaringClass,String name,Type... parameters){  this.bytecodeProvider=bytecodeProvider;  this.declaringClass=declaringClass;  this.name=name;  this.parameters=parameters;  this.originalIsStatic=parameters.length == 0 || parameters[0] != InvocationPlugin.Receiver.class;}  }
class C{  public RandomWeightingStrategy(float impact){  setImpact(impact);}  }
class C{  public static final JIPList create(final ArrayList<JIPTerm> termList){  JIPList list=null;  for (  JIPTerm term : termList) {    list=JIPList.create(term,list);  }  return list.reverse();}  }
class C{  @SuppressWarnings("unchecked") public static <T>T[] copyOfRange(T[] original,int from,int to){  return copyOfRange(original,from,to,(Class<? extends T[]>)original.getClass());}  }
class C{  public DBasicConstraints(JDialog parent,byte[] value) throws IOException {  super(parent);  setTitle(res.getString("DBasicConstraints.Title"));  initComponents();  prepopulateWithValue(value);}  }
class C{  @Override public final void perform(IR ir){  for (BasicBlock bb=ir.firstBasicBlockInCodeOrder(); bb != null; bb=bb.nextBasicBlockInCodeOrder()) {    if (bb.isEmpty())     continue;    container.counter2++;    if (bb.getInfrequent()) {      container.counter1++;      if (ir.options.FREQ_FOCUS_EFFORT)       continue;    }    if (isHIR) {      optimizeBasicBlockHIR(ir,bb);    } else {      optimizeBasicBlockLIR(ir,bb);    }  }}  }
class C{  @Override public E pop(){  E item=peek();  top=top.next;  return item;}  }
class C{  private void parseWildCards(){  if (this.fPattern.startsWith("*")) {    this.fHasLeadingStar=true;  }  if (this.fPattern.endsWith("*")) {    if (this.fLength > 1 && this.fPattern.charAt(this.fLength - 2) != '\\') {      this.fHasTrailingStar=true;    }  }  Vector<String> temp=new Vector<String>();  int pos=0;  StringBuffer buf=new StringBuffer();  while (pos < this.fLength) {    char c=this.fPattern.charAt(pos++);switch (c) {case '\\':      if (pos >= this.fLength) {        buf.append(c);      } else {        char next=this.fPattern.charAt(pos++);        if (next == '*' || next == '?' || next == '\\') {          buf.append(next);        } else {          buf.append(c);          buf.append(next);        }      }    break;case '*':  if (buf.length() > 0) {    temp.addElement(buf.toString());    this.fBound+=buf.length();    buf.setLength(0);  }break;case '?':buf.append(fSingleWildCard);break;default :buf.append(c);}}if (buf.length() > 0) {temp.addElement(buf.toString());this.fBound+=buf.length();}this.fSegments=new String[temp.size()];temp.copyInto(this.fSegments);}  }
class C{  public PrefixStringMatcher(Collection<String> prefixes){  super();  Iterator<String> iter=prefixes.iterator();  while (iter.hasNext())   addPatternForward(iter.next());}  }
class C{  public void testGetServletNamesForJspFileWithSingleServlet() throws Exception {  String xml=WEBAPP_TEST_HEADER + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <jsp-file>/s1.jsp</jsp-file>"+ "  </servlet>"+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  List<String> servletNames=WebXmlUtils.getServletNamesForJspFile(webXml,"/s1.jsp");  assertEquals(1,servletNames.size());  assertEquals("s1",servletNames.get(0));}  }
class C{  static public boolean isLargeRAM(){  MemInfoReader reader=new MemInfoReader();  reader.readMemInfo();  if (reader.getTotalSize() >= (640 * 1024 * 1024)) {    return true;  }  return false;}  }
class C{  public String toString(){  return String.valueOf(this._value);}  }
class C{  protected void println(String text,StringBuilder ddl){  ddl.append(text);  println(ddl);}  }
class C{  public void testXMLCreate() throws Exception {  LocationManager manager=LocationManager.instance();  manager.dispose();  manager=LocationManager.instance();  List<Location> locationList=manager.getLocationsByIdList();  Assert.assertEquals("Starting Number of Locations",0,locationList.size());  Location l1=manager.newLocation("Test Location 2");  Location l2=manager.newLocation("Test Location 1");  Location l3=manager.newLocation("Test Location 3");  Track t1=l1.addTrack("A Yard",Track.YARD);  Track t2=l1.addTrack("A Siding",Track.SPUR);  Track t3=l2.addTrack("An Interchange",Track.INTERCHANGE);  Track t4=l3.addTrack("A Stage",Track.STAGING);  t1.addRoadName("Track 1 Road");  t1.setRoadOption(Track.INCLUDE_ROADS);  t2.addTypeName("Track 2 Type");  t3.addRoadName("Track 3 Road");  t3.setRoadOption(Track.EXCLUDE_ROADS);  t4.addTypeName("Track 4 Type");  Pool pool=l1.addPool("Test Pool");  t1.setPool(pool);  t1.setMinimumLength(321);  t2.setPool(pool);  t2.setMinimumLength(123);  CarTypes ct=CarTypes.instance();  ct.addName("Boxcar");  ct.addName("boxCar");  ct.addName("BoxCar");  ct.addName("Track 2 Type");  ct.addName("Track 4 Type");  ScheduleManager sm=ScheduleManager.instance();  Schedule s1=sm.newSchedule("Schedule 1 Name");  s1.setComment("Schedule 1 Comment");  ScheduleItem s1i1=s1.addItem("Boxcar");  s1i1.setRoadName("Schedule 1 Item 1 Road");  s1i1.setReceiveLoadName("Schedule 1 Item 1 Load");  s1i1.setShipLoadName("Schedule 1 Item 1 Ship");  s1i1.setCount(321);  s1i1.setDestination(l1);  s1i1.setDestinationTrack(t2);  s1i1.setComment("Schedule 1 Item 1 Comment");  ScheduleItem s1i2=s1.addItem("boxcar");  s1i2.setRoadName("Schedule 1 Item 2 Road");  s1i2.setReceiveLoadName("Schedule 1 Item 2 Load");  s1i2.setShipLoadName("Schedule 1 Item 2 Ship");  s1i2.setCount(222);  s1i2.setDestination(l2);  s1i2.setDestinationTrack(t3);  s1i2.setComment("Schedule 1 Item 2 Comment");  Schedule s2=sm.newSchedule("Schedule 2 Name");  s2.setComment("Schedule 2 Comment");  ScheduleItem s2i1=s2.addItem("BoxCar");  s2i1.setRoadName("Schedule 2 Item 1 Road");  s2i1.setReceiveLoadName("Schedule 2 Item 1 Load");  s2i1.setShipLoadName("Schedule 2 Item 1 Ship");  s2i1.setCount(123);  s2i1.setComment("Schedule 2 Item 1 Comment");  t2.setScheduleId(s1.getId());  t2.setAlternateTrack(t1);  t2.setReservationFactor(33);  t2.setScheduleMode(Track.MATCH);  t2.setScheduleCount(2);  locationList=manager.getLocationsByIdList();  Assert.assertEquals("New Location by Id 1","Test Location 2",locationList.get(0).getName());  Assert.assertEquals("New Location by Id 2","Test Location 1",locationList.get(1).getName());  Assert.assertEquals("New Location by Id 3","Test Location 3",locationList.get(2).getName());  Assert.assertEquals("New Location by Name 1","Test Location 1",manager.getLocationByName("Test Location 1").getName());  Assert.assertEquals("New Location by Name 2","Test Location 2",manager.getLocationByName("Test Location 2").getName());  Assert.assertEquals("New Location by Name 3","Test Location 3",manager.getLocationByName("Test Location 3").getName());  manager.getLocationByName("Test Location 1").setComment("Test Location 1 Comment");  manager.getLocationByName("Test Location 1").setLocationOps(Location.NORMAL);  manager.getLocationByName("Test Location 1").setSwitchListEnabled(true);  manager.getLocationByName("Test Location 1").setTrainDirections(Location.EAST);  manager.getLocationByName("Test Location 1").addTypeName("Baggage");  manager.getLocationByName("Test Location 1").addTypeName("BoxCar");  manager.getLocationByName("Test Location 1").addTypeName("Caboose");  manager.getLocationByName("Test Location 1").addTypeName("Coal");  manager.getLocationByName("Test Location 1").addTypeName("Engine");  manager.getLocationByName("Test Location 1").addTypeName("Hopper");  manager.getLocationByName("Test Location 2").setComment("Test Location 2 Comment");  manager.getLocationByName("Test Location 2").setLocationOps(Location.NORMAL);  manager.getLocationByName("Test Location 2").setSwitchListEnabled(false);  manager.getLocationByName("Test Location 2").setTrainDirections(Location.WEST);  manager.getLocationByName("Test Location 2").addTypeName("Baggage");  manager.getLocationByName("Test Location 2").addTypeName("Boxcar");  manager.getLocationByName("Test Location 2").addTypeName("Caboose");  manager.getLocationByName("Test Location 2").addTypeName("Coal");  manager.getLocationByName("Test Location 2").addTypeName("Engine");  manager.getLocationByName("Test Location 2").addTypeName("Hopper");  manager.getLocationByName("Test Location 2").addTypeName("Track 2 Type");  manager.getLocationByName("Test Location 3").setComment("Test Location 3 Comment");  manager.getLocationByName("Test Location 3").setLocationOps(Location.STAGING);  manager.getLocationByName("Test Location 3").setSwitchListEnabled(true);  manager.getLocationByName("Test Location 3").setTrainDirections(Location.EAST + Location.WEST + Location.NORTH);  manager.getLocationByName("Test Location 3").addTypeName("Baggage");  manager.getLocationByName("Test Location 3").addTypeName("boxCar");  manager.getLocationByName("Test Location 3").addTypeName("Caboose");  manager.getLocationByName("Test Location 3").addTypeName("Coal");  manager.getLocationByName("Test Location 3").addTypeName("Engine");  manager.getLocationByName("Test Location 3").addTypeName("Hopper");  manager.getLocationByName("Test Location 3").addTypeName("Track 4 Type");  locationList=manager.getLocationsByIdList();  Assert.assertEquals("New Number of Locations",3,locationList.size());  for (int i=0; i < locationList.size(); i++) {    Location loc=locationList.get(i);    String locname=loc.getName();    if (i == 0) {      Assert.assertEquals("New Location by Id List 1","Test Location 2",locname);    }    if (i == 1) {      Assert.assertEquals("New Location by Id List 2","Test Location 1",locname);    }    if (i == 2) {      Assert.assertEquals("New Location by Id List 3","Test Location 3",locname);    }  }  List<Location> locationListByName=manager.getLocationsByNameList();  Assert.assertEquals("New Number of Locations",3,locationList.size());  for (int i=0; i < locationListByName.size(); i++) {    Location loc=locationListByName.get(i);    String locname=loc.getName();    if (i == 0) {      Assert.assertEquals("New Location by Name List 1","Test Location 1",locname);    }    if (i == 1) {      Assert.assertEquals("New Location by Name List 2","Test Location 2",locname);    }    if (i == 2) {      Assert.assertEquals("New Location by Name List 3","Test Location 3",locname);    }  }  LocationManagerXml.instance().writeOperationsFile();  manager.newLocation("Test Location 4");  manager.newLocation("Test Location 5");  manager.newLocation("Test Location 6");  manager.getLocationByName("Test Location 2").setComment("Test Location 2 Changed Comment");  LocationManagerXml.instance().writeOperationsFile();  locationList=manager.getLocationsByIdList();  Assert.assertEquals("Number of Locations",6,locationList.size());  LocationManagerXml.instance().revertBackupFile("temp" + File.separator + OperationsSetupXml.getOperationsDirectoryName()+ File.separator+ LocationManagerXml.instance().getOperationsFileName());  manager.dispose();  ScheduleManager.instance().dispose();  ct.addName("Boxcar");  ct.addName("boxCar");  ct.addName("BoxCar");  ct.addName("Track 2 Type");  ct.addName("Track 4 Type");  manager=LocationManager.instance();  locationListByName=manager.getLocationsByNameList();  Assert.assertEquals("Starting Number of Locations",0,locationListByName.size());  LocationManagerXml.instance().readFile("temp" + File.separator + OperationsSetupXml.getOperationsDirectoryName()+ File.separator+ LocationManagerXml.instance().getOperationsFileName());  locationListByName=manager.getLocationsByNameList();  Assert.assertEquals("Starting Number of Locations",3,locationListByName.size());  for (int i=0; i < locationListByName.size(); i++) {    Location loc=locationListByName.get(i);    if (i == 0) {      Assert.assertEquals("New Location by Name List 1","Test Location 1",loc.getName());      Assert.assertEquals("Location 1 operations",Location.NORMAL,loc.getLocationOps());      Assert.assertEquals("Location 1 direction",Location.EAST,loc.getTrainDirections());      Assert.assertEquals("Location 1 comment","Test Location 1 Comment",loc.getComment());      Assert.assertEquals("Location 1 switchList",true,loc.isSwitchListEnabled());      Assert.assertEquals("Location 1 car type",true,loc.acceptsTypeName("BoxCar"));      Assert.assertEquals("Location 1 car type",false,loc.acceptsTypeName("boxCar"));      Assert.assertEquals("Location 1 car type",true,loc.acceptsTypeName("Boxcar"));      List<Track> list=loc.getTrackByNameList(null);      Assert.assertEquals("Location 1 has n tracks",1,list.size());      Track t=list.get(0);      Assert.assertEquals("Location 1 first track name","An Interchange",t.getName());      Assert.assertEquals("Location 1 track road option",Track.EXCLUDE_ROADS,t.getRoadOption());      Assert.assertEquals("Location 1 track road",true,t.acceptsRoadName("Track 1 Road"));      Assert.assertEquals("Location 1 track road",false,t.acceptsRoadName("Track 3 Road"));      Assert.assertNull("Location 1 track pool",t.getPool());    }    if (i == 1) {      Assert.assertEquals("New Location by Name List 2","Test Location 2",loc.getName());      Assert.assertEquals("Location 2 operations",Location.NORMAL,loc.getLocationOps());      Assert.assertEquals("Location 2 direction",Location.WEST,loc.getTrainDirections());      Assert.assertEquals("Location 2 comment","Test Location 2 Comment",loc.getComment());      Assert.assertEquals("Location 2 switchList",false,loc.isSwitchListEnabled());      Assert.assertEquals("Location 2 car type",true,loc.acceptsTypeName("Boxcar"));      Assert.assertEquals("Location 2 car type",false,loc.acceptsTypeName("boxCar"));      Assert.assertEquals("Location 2 car type",false,loc.acceptsTypeName("BoxCar"));      List<Track> list=loc.getTrackByNameList(null);      Assert.assertEquals("Location 2 has n tracks",2,list.size());      Track t=list.get(0);      Assert.assertEquals("Location 2 first track name","A Siding",t.getName());      Assert.assertEquals("Location 2 track 1 road option",Track.ALL_ROADS,t.getRoadOption());      Assert.assertEquals("Location 2 track 1 road",true,t.acceptsRoadName("Track 1 Road"));      Assert.assertEquals("Location 2 track 1 road",true,t.acceptsRoadName("Track 3 Road"));      Assert.assertEquals("Location 2 track 1 type",true,t.acceptsTypeName("Track 2 Type"));      Assert.assertEquals("Location 2 track 1 type",false,t.acceptsTypeName("Track 4 Type"));      Assert.assertNotNull("Location 2 track 1 pool exists",t.getPool());      Assert.assertEquals("Location 2 track 1 pool name","Test Pool",t.getPool().getName());      Assert.assertEquals("Location 2 track 1 pool name","Test Pool",t.getPoolName());      Assert.assertEquals("Location 2 track 1 min track length",123,t.getMinimumLength());      Assert.assertNotNull("Location 2 track 1 schedule",t.getSchedule());      Assert.assertEquals("Location 2 track 1 schedule name","Schedule 1 Name",t.getSchedule().getName());      Assert.assertEquals("Location 2 track 1 schedule name","Schedule 1 Name",t.getScheduleName());      Assert.assertNotNull("Location 2 track 1 alternate track",t.getAlternateTrack());      Assert.assertEquals("Location 2 track 1 alternate track name","A Yard",t.getAlternateTrack().getName());      Assert.assertEquals("Location 2 track 1 schedule mode",Track.MATCH,t.getScheduleMode());      Assert.assertEquals("Location 2 track 1 reservation factor",33,t.getReservationFactor());      Assert.assertEquals("Location 2 track 1 schedule count",2,t.getScheduleCount());      t=list.get(1);      Assert.assertEquals("Location 2 2nd track name","A Yard",t.getName());      Assert.assertEquals("Location 2 track 2 road option",Track.INCLUDE_ROADS,t.getRoadOption());      Assert.assertEquals("Location 2 track 2 road",true,t.acceptsRoadName("Track 1 Road"));      Assert.assertEquals("Location 2 track 2 road",false,t.acceptsRoadName("Track 3 Road"));      Assert.assertEquals("Location 2 track 2 type",false,t.acceptsTypeName("Track 2 Type"));      Assert.assertEquals("Location 2 track 2 type",false,t.acceptsTypeName("Track 4 Type"));      Assert.assertNotNull("Location 2 track 2 pool exists",t.getPool());      Assert.assertEquals("Location 2 track 2 pool name","Test Pool",t.getPool().getName());      Assert.assertEquals("Location 2 track 2 min track length",321,t.getMinimumLength());    }    if (i == 2) {      Assert.assertEquals("New Location by Name List 3","Test Location 3",loc.getName());      Assert.assertEquals("Location 3 operations",Location.STAGING,loc.getLocationOps());      Assert.assertEquals("Location 3 direction",Location.EAST + Location.WEST + Location.NORTH,loc.getTrainDirections());      Assert.assertEquals("Location 3 comment","Test Location 3 Comment",loc.getComment());      Assert.assertEquals("Location 3 switchList",true,loc.isSwitchListEnabled());      Assert.assertEquals("Location 3 car type",true,loc.acceptsTypeName("boxCar"));      Assert.assertEquals("Location 3 car type",false,loc.acceptsTypeName("BoxCar"));      Assert.assertEquals("Location 3 car type",true,loc.acceptsTypeName("Boxcar"));      List<Track> list=loc.getTrackByNameList(null);      Assert.assertEquals("Location 3 has n tracks",1,list.size());      Track t=list.get(0);      Assert.assertEquals("Location 3 first track name","A Stage",t.getName());      Assert.assertEquals("Location 3 track 1 road option",Track.ALL_ROADS,t.getRoadOption());      Assert.assertEquals("Location 3 track 1 road",true,t.acceptsRoadName("Track 1 Road"));      Assert.assertEquals("Location 3 track 1 road",true,t.acceptsRoadName("Track 3 Road"));      Assert.assertEquals("Location 3 track type",false,t.acceptsTypeName("Track 2 Type"));      Assert.assertEquals("Location 3 track type",true,t.acceptsTypeName("Track 4 Type"));      Assert.assertNull("Location 3 track pool",t.getPool());    }  }  sm=ScheduleManager.instance();  List<Schedule> list=sm.getSchedulesByNameList();  Assert.assertEquals("There should be 2 schedules",2,list.size());  s1=list.get(0);  s2=list.get(1);  Assert.assertEquals("Schedule 1 name","Schedule 1 Name",s1.getName());  Assert.assertEquals("Schedule 2 name","Schedule 2 Name",s2.getName());  Assert.assertEquals("Schedule 1 comment","Schedule 1 Comment",s1.getComment());  Assert.assertEquals("Schedule 2 comment","Schedule 2 Comment",s2.getComment());  List<ScheduleItem> s1items=s1.getItemsBySequenceList();  Assert.assertEquals("There should be 2 items",2,s1items.size());  ScheduleItem si1=s1items.get(0);  Assert.assertEquals("Item 1 type","Boxcar",si1.getTypeName());  Assert.assertEquals("Item 1 load","Schedule 1 Item 1 Load",si1.getReceiveLoadName());  Assert.assertEquals("Item 1 ship","Schedule 1 Item 1 Ship",si1.getShipLoadName());  Assert.assertEquals("Item 1 type","Schedule 1 Item 1 Comment",si1.getComment());  Assert.assertEquals("Item 1 road","Schedule 1 Item 1 Road",si1.getRoadName());  Assert.assertEquals("Item 1 count",321,si1.getCount());  Assert.assertEquals("Item 1 destination","Test Location 2",si1.getDestinationName());  Assert.assertEquals("Item 1 track","A Siding",si1.getDestinationTrackName());  ScheduleItem si2=s1items.get(1);  Assert.assertEquals("Item 2 type","boxcar",si2.getTypeName());  Assert.assertEquals("Item 2 load","Schedule 1 Item 2 Load",si2.getReceiveLoadName());  Assert.assertEquals("Item 2 ship","Schedule 1 Item 2 Ship",si2.getShipLoadName());  Assert.assertEquals("Item 2 type","Schedule 1 Item 2 Comment",si2.getComment());  Assert.assertEquals("Item 2 road","Schedule 1 Item 2 Road",si2.getRoadName());  Assert.assertEquals("Item 2 count",222,si2.getCount());  Assert.assertEquals("Item 2 destination","Test Location 1",si2.getDestinationName());  Assert.assertEquals("Item 2 track","An Interchange",si2.getDestinationTrackName());  List<ScheduleItem> s2items=s2.getItemsBySequenceList();  Assert.assertEquals("There should be 1 items",1,s2items.size());  ScheduleItem si3=s2items.get(0);  Assert.assertEquals("Item 3 type","BoxCar",si3.getTypeName());  Assert.assertEquals("Item 3 load","Schedule 2 Item 1 Load",si3.getReceiveLoadName());  Assert.assertEquals("Item 3 ship","Schedule 2 Item 1 Ship",si3.getShipLoadName());  Assert.assertEquals("Item 3 type","Schedule 2 Item 1 Comment",si3.getComment());  Assert.assertEquals("Item 3 type","Schedule 2 Item 1 Road",si3.getRoadName());  Assert.assertEquals("Item 3 count",123,si3.getCount());  Assert.assertEquals("Item 3 destination","",si3.getDestinationName());  Assert.assertEquals("Item 3 track","",si3.getDestinationTrackName());  manager.dispose();  sm.dispose();  LocationManagerXml.instance().writeOperationsFile();}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols;  int progress=0;  double z, maxZ, noData, outputNoData;  int i, whichCell;  int[] dX=new int[]{-1,0,-1,0};  int[] dY=new int[]{-1,-1,0,0};  int numScanCells=dX.length;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  boolean performLineThinning=Boolean.parseBoolean(args[2]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,1);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          maxZ=z;          whichCell=3;          for (i=0; i < (numScanCells - 1); i++) {            z=DEM.getValue(row + dY[i],col + dX[i]);            if (z != noData) {              if (z > maxZ) {                maxZ=z;                whichCell=i;              }            }          }          output.setValue(row + dY[whichCell],col + dX[whichCell],0);        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void dispose(){  if (popup != null) {    popup.removeAll();  }  popup=null;  removeLinkedPoint();}  }
class C{  public synchronized boolean shouldExecute(KeySelect keySelect){  if (slowQueries == null)   return true;  String queryKey=keySelect.generateKey();  Long pendingQueryInvocation=pendingQueries.get(queryKey);  if (pendingQueryInvocation != null) {    if (logger.isDebugEnabled()) {      logger.debug("Skipped pending query: queryKey=" + queryKey);    }    return false;  }  Long slowQueryInvocation=slowQueries.get(queryKey);  if (slowQueryInvocation != null) {    keySelect.setLastInvocation(slowQueryInvocation);    long sinceLastMillis=System.currentTimeMillis() - slowQueryInvocation;    if (sinceLastMillis < (slowQueryCacheDuration * 1000)) {      slowQueries.put(queryKey,System.currentTimeMillis());      return false;    }  }  pendingQueries.put(queryKey,System.currentTimeMillis());  return true;}  }
class C{  public SVGOMFlowRegionExcludeElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public void updateSpamTokens(Connection conn) throws java.sql.SQLException {  updateTokens(conn,getSpamTokenCounts(),sqlQueries.getSqlString("insertSpamToken",true),sqlQueries.getSqlString("updateSpamToken",true));  setMessageCount(conn,sqlQueries.getSqlString("updateSpamMessageCounts",true),getSpamMessageCount());}  }
class C{  private void analyzeWinPositions(int moveRow,int moveCol){  final int[] rowIncr=new int[]{1,0,1,1};  final int[] colIncr=new int[]{0,1,-1,1};  int playerNum=getPlayerNum(moveRow,moveCol);  WinPositionInfo[] wInfo=new WinPositionInfo[]{new WinPositionInfo(),new WinPositionInfo()};  for (int i=0; i < 4; i++) {    int rIncr=rowIncr[i];    int cIncr=colIncr[i];    int diskCount=1;    for (int j=0; j < 2; j++) {      WinPositionInfo wInf=wInfo[j];      wInf.clear();      int rBound=rIncr > 0 ? getRows() : -1;      int cBound=cIncr > 0 ? getCols() : -1;      int row=moveRow + rIncr;      int col=moveCol + cIncr;      while (row != rBound && col != cBound) {        int plNum=getPlayerNum(row,col);        if (plNum == playerNum) {          if (wInf.hasData())           wInf.diskCount++; else           diskCount++;        } else         if (plNum == 0) {          if (!wInf.hasData()) {            wInf.row=row;            wInf.col=col;          } else {            break;          }        } else {          break;        }        row+=rIncr;        col+=cIncr;      }      rIncr=-rIncr;      cIncr=-cIncr;    }    for (int j=0; j < 2; j++) {      WinPositionInfo wInf=wInfo[j];      if (wInf.hasData() && diskCount + wInf.diskCount >= 3) {        setWinPositionFor(wInf.row,wInf.col,playerNum);      }    }  }}  }
class C{  protected AbstractN4jscIT(String fixture){  this.fixture=fixture;}  }
class C{  public boolean isTranslationEnabled(){  return mIsTranslationEnabled;}  }
class C{  protected static MVStore openStore(String fileName,int pageSplitSize){  MVStore store=new MVStore.Builder().fileName(fileName).pageSplitSize(pageSplitSize).open();  return store;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("M_Warehouse_ID"))     p_M_Warehouse_ID=para[i].getParameterAsInt(); else     if (name.equals("C_BPartner_ID"))     p_C_BPartner_ID=para[i].getParameterAsInt(); else     if (name.equals("DatePromised"))     p_DatePromised=(Timestamp)para[i].getParameter(); else     if (name.equals("Selection"))     p_Selection="Y".equals(para[i].getParameter()); else     if (name.equals("IsUnconfirmedInOut"))     p_IsUnconfirmedInOut="Y".equals(para[i].getParameter()); else     if (name.equals("ConsolidateDocument"))     p_ConsolidateDocument="Y".equals(para[i].getParameter()); else     if (name.equals("DocAction"))     p_docAction=(String)para[i].getParameter(); else     if (name.equals("MovementDate"))     p_DateShipped=(Timestamp)para[i].getParameter(); else     log.log(Level.SEVERE,"Unknown Parameter: " + name);    if (p_DateShipped == null) {      m_movementDate=Env.getContextAsDate(getCtx(),"#Date");      if (m_movementDate == null)       m_movementDate=new Timestamp(System.currentTimeMillis());    } else     m_movementDate=p_DateShipped;    if (!DocAction.ACTION_Complete.equals(p_docAction))     p_docAction=DocAction.ACTION_Prepare;  }}  }
class C{  private synchronized void connected(BluetoothSocket socket,BluetoothDevice device,final String socketType){  if (_debug)   Log.d(TAG,"connected: ");  cancelConnectThread();  cancelCommunicationThread(_communicationThread);  _communicationThread=createCommunicationThread(socket,device);  Bundle bundle=new Bundle();  bundle.putString(ServiceMessageKeys.DEVICE_NAME,device.getName());  bundle.putString(ServiceMessageKeys.DEVICE_ADDRESS,device.getAddress());  sendMessage(ServiceMessageType.MESSAGE_DEVICE_CONNECTED,bundle);  setState(STATE_CONNECTED);}  }
class C{  private void recordClassHierarchy(Class<?> concept){  for (  Class<?> sup : concept.getInterfaces()) {    Set<Class<?>> set=subclasses.get(sup);    if (set == null)     subclasses.put(sup,set=new HashSet<Class<?>>());    if (!set.contains(concept)) {      set.add(concept);      recordClassHierarchy(sup);    }  }  Class<?> sup=concept.getSuperclass();  if (sup != null) {    Set<Class<?>> set=subclasses.get(sup);    if (set == null)     subclasses.put(sup,set=new HashSet<Class<?>>());    if (!set.contains(concept)) {      set.add(concept);      recordClassHierarchy(sup);    }  }}  }
class C{  public static boolean isLess(double d1,double d2){  if (Double.isNaN(d1) || Double.isNaN(d2)) {    return false;  }  return Double.compare(d1,d2) < 0;}  }
class C{  private void loadRecipients(int addressType,HashSet<String> recipients,HashMap<Integer,EncodedStringValue[]> addressMap,boolean excludeMyNumber){  EncodedStringValue[] array=addressMap.get(addressType);  if (array == null) {    return;  }  if (excludeMyNumber && array.length == 1) {    return;  }  String myNumber=excludeMyNumber ? mTelephonyManager.getLine1Number() : null;  for (  EncodedStringValue v : array) {    if (v != null) {      String number=v.getString();      if ((myNumber == null || !PhoneNumberUtils.compare(number,myNumber)) && !recipients.contains(number)) {        recipients.add(number);      }    }  }}  }
class C{  public static DemoLuaViewFragment newInstance(Bundle bundle){  DemoLuaViewFragment fragment=new DemoLuaViewFragment();  fragment.setArguments(bundle);  return fragment;}  }
class C{  public final void transpose(Matrix4f m1){  if (this != m1) {    this.m00=m1.m00;    this.m01=m1.m10;    this.m02=m1.m20;    this.m03=m1.m30;    this.m10=m1.m01;    this.m11=m1.m11;    this.m12=m1.m21;    this.m13=m1.m31;    this.m20=m1.m02;    this.m21=m1.m12;    this.m22=m1.m22;    this.m23=m1.m32;    this.m30=m1.m03;    this.m31=m1.m13;    this.m32=m1.m23;    this.m33=m1.m33;  } else {    this.transpose();  }}  }
class C{  private static PlatformJavaObjectFactoryProxy proxyForCustom(String clsName,Map<String,Object> props){  return new PlatformJavaObjectFactoryProxy(PlatformJavaObjectFactoryProxy.TYP_USER,clsName,null,props);}  }
class C{  public static CipherTextIvMac encrypt(byte[] plaintext,SecretKeys secretKeys) throws GeneralSecurityException {  byte[] iv=generateIv();  Cipher aesCipherForEncryption=Cipher.getInstance(CIPHER_TRANSFORMATION);  aesCipherForEncryption.init(Cipher.ENCRYPT_MODE,secretKeys.getConfidentialityKey(),new IvParameterSpec(iv));  iv=aesCipherForEncryption.getIV();  byte[] byteCipherText=aesCipherForEncryption.doFinal(plaintext);  byte[] ivCipherConcat=CipherTextIvMac.ivCipherConcat(iv,byteCipherText);  byte[] integrityMac=generateMac(ivCipherConcat,secretKeys.getIntegrityKey());  return new CipherTextIvMac(byteCipherText,iv,integrityMac);}  }
class C{  public List<Token> tokenize(String data){  LinkedList<Token> tokens=new LinkedList<Token>();  Stack<String> states=new Stack<String>();  states.push(INITIAL_STATE);  int pos=0;  Token tokenCur=null;  while (pos < data.length() && !states.isEmpty()) {    String state=states.peek();    Rule[] rules=grammar.get(state);    for (    Rule rule : rules) {      Token token=rule.getToken(data,pos);      if (token == null) {        continue;      }      if (tokenCur != null && tokenCur.type.equals(token.type) && joinedTypes.contains(tokenCur.type)) {        tokenCur.append(token);      } else {        if (tokenCur != null && !ignoredTypes.contains(tokenCur.type)) {          tokens.add(tokenCur);        }        tokenCur=token;      }      pos=token.end;      if ("#pop".equals(rule.nextState)) {        states.pop();      } else       if (rule.nextState != null) {        states.push(rule.nextState);      }      break;    }  }  if (tokenCur != null && !ignoredTypes.contains(tokenCur.type)) {    tokens.add(tokenCur);  }  return tokens;}  }
class C{  public VCard(){  this(VCardVersion.V3_0);}  }
class C{  protected String postProcessRaml(String preRaml){  Matcher fixIncludes=INCLUDE_FIXER_PATTERN.matcher(preRaml);  while (fixIncludes.find()) {    try {      preRaml=preRaml.replace(fixIncludes.group(0),fixIncludes.group(1));      logger.info("    RAML Post Processor replacing: [" + fixIncludes.group(0) + "] with ["+ fixIncludes.group(1)+ "]");    } catch (    Exception ex) {      logger.error("    RAML Post Processor Exception: " + ex.getMessage());    }  }  return preRaml;}  }
class C{  @Override public String toString(){  StringBuffer buffer=new StringBuffer(super.toString());  buffer.append("\n  Column associations:");  for (  Entry entry : columnMap.entrySet()) {    buffer.append("\n    ");    buffer.append(entry.getKey());    buffer.append("->");    buffer.append(entry.getValue());  }  buffer.append("\n  Row associations:");  for (  Entry entry : rowMap.entrySet()) {    buffer.append("\n    ");    buffer.append(entry.getKey());    buffer.append("->");    buffer.append(entry.getValue());  }  return buffer.toString();}  }
class C{  private void onCartPermalinkClicked(){  launchBrowser(getSampleApplication().getCartPermalink());}  }
class C{  public boolean contains(JComponent a,int b,int c){  boolean returnValue=((ComponentUI)(uis.elementAt(0))).contains(a,b,c);  for (int i=1; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).contains(a,b,c);  }  return returnValue;}  }
class C{  @Override public synchronized void flush() throws IOException {  if (!initialized)   return;  checkNotClosed();  trimToSize();  journalWriter.flush();}  }
class C{  public GuacamoleClientBadTypeException(String message){  super(message);}  }
class C{  public final boolean isInfoEnabled(){  return m_priority.isLowerOrEqual(Priority.INFO);}  }
class C{  @Override @Inline protected void processRememberedSets(){  logMessage(5,"processing modbuf");  ObjectReference obj;  while (!(obj=modbuf.pop()).isNull()) {    if (VM.DEBUG)     VM.debugging.modbufEntry(obj);    HeaderByte.markAsUnlogged(obj);    scanObject(obj);  }  logMessage(5,"processing remset");  while (!remset.isEmpty()) {    Address loc=remset.pop();    if (VM.DEBUG)     VM.debugging.remsetEntry(loc);    processRootEdge(loc,false);  }  logMessage(5,"processing array remset");  arrayRemset.flushLocal();  while (!arrayRemset.isEmpty()) {    Address start=arrayRemset.pop1();    Address guard=arrayRemset.pop2();    if (VM.DEBUG)     VM.debugging.arrayRemsetEntry(start,guard);    while (start.LT(guard)) {      processRootEdge(start,false);      start=start.plus(BYTES_IN_ADDRESS);    }  }}  }
class C{  public short shortValue(){  return 0;}  }
class C{  public void wipeButtonIconCache(){  BUTTON_CACHE.clear();}  }
class C{  void test(Method m) throws Exception {  testNum++;  File extDirs=new File("empty-extdirs");  extDirs.mkdirs();  File testClasses=new File("test" + testNum);  testClasses.mkdirs();  defaultFileManager.setLocation(StandardLocation.CLASS_OUTPUT,Arrays.asList(testClasses));  System.err.println("test " + testNum + ": "+ m.getDeclaringClass().getSimpleName()+ "."+ m.getName());  StringWriter sw=new StringWriter();  PrintWriter pw=new PrintWriter(sw);  List<String> javacOptions=Arrays.asList("-extdirs",extDirs.getPath(),"-processor",TestClientCodeWrapper.class.getName());  List<String> classes=Collections.emptyList();  JavacTool tool=JavacTool.create();  try {    JavacTask task=tool.getTask(pw,getFileManager(m,defaultFileManager),getDiagnosticListener(m,pw),javacOptions,classes,getCompilationUnits(m));    if (isDeclaredIn(m,Processor.class))     task.setProcessors(getProcessors(m));    if (isDeclaredIn(m,TaskListener.class))     task.setTaskListener(getTaskListener(m,pw));    boolean ok=task.call();    error("compilation " + (ok ? "succeeded" : "failed") + " unexpectedly");  } catch (  RuntimeException e) {    System.err.println("caught " + e);    if (e.getClass() == RuntimeException.class) {      Throwable cause=e.getCause();      if (cause instanceof UserError) {        String expect=m.getName();        String found=cause.getMessage();        checkEqual("exception messaqe",expect,found);      } else {        cause.printStackTrace(System.err);        error("Unexpected exception: " + cause);      }    } else {      e.printStackTrace(System.err);      error("Unexpected exception: " + e);    }  }  pw.close();  String out=sw.toString();  System.err.println(out);}  }
class C{  @Override protected void initListeners(){  this.findViewById(R.id.reflection_bt).setOnClickListener(this);}  }
class C{  public Blade isDev(boolean isDev){  applicationConfig.setDev(isDev);  return this;}  }
class C{  public static String name(NamedRelatedResourceRep ref){  return ref != null ? ref.getName() : null;}  }
class C{  protected void testSimplePeriod1BeginOfJanuaryBase(int testMonth,int testDay,BigDecimal parametersAndOptionsCosts,String errorSituation) throws Exception {  final long billingTime=getBillingTime(testYear,testMonth,testDay);  Subscription subscription=creSub(P_1_ID,getDate(testYear,testMonth,-2,8,0));  prepareParametersAndOptionsBase(testMonth,subscription,errorSituation);  startBillingRun(billingTime);  verify(new Date[][]{{getStartDate(testYear,testMonth),getEndDate(testYear,testMonth)}},P_1_PRICE_PER_PERIOD.add(parametersAndOptionsCosts),testMonth);  clearParametersAndOptions();}  }
class C{  public boolean isAnnotationPresent(Class<? extends Annotation> annotationType){  return getAnnotation(annotationType) != null;}  }
class C{  public void fireParentRemoved(SessionNode parent,SessionNode child){  SessionEvent event=new SessionEvent(this.source,parent,child,SessionEvent.PARENT_REMOVED);  fireSessionEvent(event);}  }
class C{  private void element(String segment){  int index=segment.indexOf(':');  String prefix=null;  if (index > 0) {    prefix=segment.substring(0,index);    segment=segment.substring(index + 1);  }  String element=style.getElement(segment);  prefixes.add(prefix);  names.add(element);}  }
class C{  @Override public void drawItem(Graphics2D g2,CategoryItemRendererState state,Rectangle2D dataArea,CategoryPlot plot,CategoryAxis domainAxis,ValueAxis rangeAxis,CategoryDataset data,int row,int column,int pass){  PlotOrientation orientation=plot.getOrientation();  if (orientation.isHorizontal()) {    drawHorizontalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,data,row,column);  } else   if (orientation.isVertical()) {    drawVerticalItem(g2,state,dataArea,plot,domainAxis,rangeAxis,data,row,column);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:37.787 -0500",hash_original_method="86686EC8BCE04537608D53CE27870697",hash_generated_method="2429F219A5ECADD05BBD27CA86C6F295") public static final int previousMonthLength(int year,int month){  return (month > 0) ? monthLength(year,month - 1) : 31;}  }
class C{  public void mouseMoved(MouseEvent e){synchronized (mouseLock) {    mouseX=StdDraw.userX(e.getX());    mouseY=StdDraw.userY(e.getY());  }}  }
class C{  public boolean hasFeature(String feature,String version){  if (("CORE".equals(feature.toUpperCase()) || "XML".equals(feature.toUpperCase())) && ("1.0".equals(version) || "2.0".equals(version)))   return true;  return false;}  }
class C{  private void mouseEvent(final Point point,final boolean ctrlDown,final boolean rightMouse){  if (s_cheapMutex) {    return;  }  if (!rightMouse && !ctrlDown && m_currentSelectedImage == null) {    Point testPoint=null;    for (    final Entry<String,Tuple<Image,List<Point>>> entry : m_currentImagePoints.entrySet()) {      for (      final Point p : entry.getValue().getSecond()) {        if (testPoint == null || p.distance(m_currentMousePoint) < testPoint.distance(m_currentMousePoint)) {          testPoint=p;          m_currentSelectedImage=Triple.of(entry.getKey(),entry.getValue().getFirst(),p);        }      }    }  } else   if (!rightMouse && !ctrlDown && m_currentSelectedImage != null) {    final Tuple<Image,List<Point>> imagePoints=m_currentImagePoints.get(m_currentSelectedImage.getFirst());    final List<Point> points=imagePoints.getSecond();    points.remove(m_currentSelectedImage.getThird());    points.add(new Point(m_currentMousePoint));    m_currentImagePoints.put(m_currentSelectedImage.getFirst(),Tuple.of(m_currentSelectedImage.getSecond(),points));    m_currentSelectedImage=null;  } else   if (rightMouse && !ctrlDown && s_createNewImageOnRightClick&& s_staticImageForPlacing != null && m_currentSelectedImage == null) {    final Optional<String> territoryName=Util.findTerritoryName(m_currentMousePoint,m_polygons);    if (territoryName.isPresent()) {      final List<Point> points=new ArrayList<>();      points.add(new Point(m_currentMousePoint));      m_currentImagePoints.put(territoryName.get(),Tuple.of(s_staticImageForPlacing,points));    }  } else   if (rightMouse && !ctrlDown && s_imagePointType.isCanHaveMultiplePoints()) {    if (m_currentSelectedImage == null) {      Point testPoint=null;      for (      final Entry<String,Tuple<Image,List<Point>>> entry : m_currentImagePoints.entrySet()) {        for (        final Point p : entry.getValue().getSecond()) {          if (testPoint == null || p.distance(m_currentMousePoint) < testPoint.distance(m_currentMousePoint)) {            testPoint=p;            m_currentSelectedImage=Triple.of(entry.getKey(),entry.getValue().getFirst(),null);          }        }      }    } else {      m_currentSelectedImage=Triple.of(m_currentSelectedImage.getFirst(),m_currentSelectedImage.getSecond(),null);    }    final Tuple<Image,List<Point>> imagePoints=m_currentImagePoints.get(m_currentSelectedImage.getFirst());    final List<Point> points=imagePoints.getSecond();    points.remove(m_currentSelectedImage.getThird());    points.add(new Point(m_currentMousePoint));    m_currentImagePoints.put(m_currentSelectedImage.getFirst(),Tuple.of(m_currentSelectedImage.getSecond(),points));    m_currentSelectedImage=null;  } else   if (rightMouse && ctrlDown) {    if (m_currentSelectedImage == null) {      return;    }    final Tuple<Image,List<Point>> current=m_currentImagePoints.get(m_currentSelectedImage.getFirst());    final List<Point> points=current.getSecond();    points.remove(m_currentSelectedImage.getThird());    if (points.isEmpty()) {      m_currentImagePoints.remove(m_currentSelectedImage.getFirst());    }    m_currentSelectedImage=null;  }  repaint();}  }
class C{  public boolean isLongFormat(){  return isLong;}  }
class C{  public ParseException generateParseException(){  jj_expentries.clear();  boolean[] la1tokens=new boolean[210];  if (jj_kind >= 0) {    la1tokens[jj_kind]=true;    jj_kind=-1;  }  for (int i=0; i < 194; i++) {    if (jj_la1[i] == jj_gen) {      for (int j=0; j < 32; j++) {        if ((jj_la1_0[i] & (1 << j)) != 0) {          la1tokens[j]=true;        }        if ((jj_la1_1[i] & (1 << j)) != 0) {          la1tokens[32 + j]=true;        }        if ((jj_la1_2[i] & (1 << j)) != 0) {          la1tokens[64 + j]=true;        }        if ((jj_la1_3[i] & (1 << j)) != 0) {          la1tokens[96 + j]=true;        }        if ((jj_la1_4[i] & (1 << j)) != 0) {          la1tokens[128 + j]=true;        }        if ((jj_la1_5[i] & (1 << j)) != 0) {          la1tokens[160 + j]=true;        }        if ((jj_la1_6[i] & (1 << j)) != 0) {          la1tokens[192 + j]=true;        }      }    }  }  for (int i=0; i < 210; i++) {    if (la1tokens[i]) {      jj_expentry=new int[1];      jj_expentry[0]=i;      jj_expentries.add(jj_expentry);    }  }  jj_endpos=0;  jj_rescan_token();  jj_add_error_token(0,0);  int[][] exptokseq=new int[jj_expentries.size()][];  for (int i=0; i < jj_expentries.size(); i++) {    exptokseq[i]=jj_expentries.get(i);  }  return new ParseException(token,exptokseq,tokenImage);}  }
class C{  public static <T>void swap(T[] arr,int i,int j){  final T tmp=arr[i];  arr[i]=arr[j];  arr[j]=tmp;}  }
class C{  public static RawHeaders fromBytes(InputStream in) throws IOException {  RawHeaders headers;  do {    headers=new RawHeaders();    headers.setStatusLine(Util.readAsciiLine(in));    readHeaders(in,headers);  } while (headers.getResponseCode() == HttpEngine.HTTP_CONTINUE);  return headers;}  }
class C{  public void stopLog(){  final long finish=System.nanoTime();  final long diff=finish - mStart;  Diagnostic.developerLog(toString(diff));}  }
class C{  public void saveIndexes(){  ArrayList toSave=new ArrayList();synchronized (this) {    Object[] valueTable=this.indexes.valueTable;    for (int i=0, l=valueTable.length; i < l; i++) {      Index index=(Index)valueTable[i];      if (index != null)       toSave.add(index);    }  }  boolean allSaved=true;  for (int i=0, length=toSave.size(); i < length; i++) {    Index index=(Index)toSave.get(i);    ReadWriteMonitor monitor=index.monitor;    if (monitor == null)     continue;    try {      monitor.enterRead();      if (index.hasChanged()) {        if (monitor.exitReadEnterWrite()) {          try {            saveIndex(index);          } catch (          IOException e) {            if (VERBOSE) {              Util.verbose("-> got the following exception while saving:",System.err);              e.printStackTrace();            }            allSaved=false;          } finally {            monitor.exitWriteEnterRead();          }        } else {          allSaved=false;        }      }    }  finally {      monitor.exitRead();    }  }  if (this.participantsContainers != null && this.participantUpdated) {    writeParticipantsIndexNamesFile();    this.participantUpdated=false;  }  this.needToSave=!allSaved;}  }
class C{  public static Document stringToDom(String xmlString,boolean useNamespaces) throws SAXException {  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();  factory.setNamespaceAware(useNamespaces);  StringReader reader=new StringReader(xmlString);  InputSource input=new InputSource(reader);  DocumentBuilder builder;  try {    builder=factory.newDocumentBuilder();  } catch (  ParserConfigurationException e) {    log.fatal("### Error - this should never happen: " + e.getMessage());    return null;  }  Document dom;  try {    dom=builder.parse(input);  } catch (  IOException e) {    log.fatal("### Error - this should never happen: " + e.getMessage());    return null;  }  return dom;}  }
class C{  public void shearX(float angle){  g.shearX(angle);}  }
class C{  public RemoveIndexesResult waitForResults() throws CacheException, ForceReattemptException {  waitForCacheException();  return new RemoveIndexesResult(0);}  }
class C{  public void parse(String argv[],int index) throws IOException {  if (argv.length == index) {    parse(System.in,"-");  } else {    if (_prefix == null && index + 1 == argv.length) {      _prefix=argv[index] + ".";    }    int i=index;    do {      parse(new File(argv[i]));    } while (++i < argv.length);  }  if (should_print())   print_statistics(System.out);  if (should_save())   save_data();}  }
class C{  public static Builder newBuilder(){  return new Builder();}  }
class C{  private static void test2() throws Exception {  for (int i=0; i < ALGORITHMS2.length; i++) {    String algo=ALGORITHMS2[i];    System.out.println("Running test2_" + i + " ("+ algo+ ")");    int keySize=KEYSIZES2[i];    int MAX_KEYSIZE=Cipher.getMaxAllowedKeyLength(algo);    if (keySize > MAX_KEYSIZE) {      continue;    }    Cipher cipher=Cipher.getInstance(algo + "/CTS/NoPadding","SunJCE");    int blockSize=cipher.getBlockSize();    SecretKeySpec key=new SecretKeySpec(new byte[keySize],algo);    byte[] plainText=PLAIN1[3];    cipher.init(Cipher.ENCRYPT_MODE,key);    byte[] cipherText=new byte[plainText.length];    int firstPartLen=blockSize + 1;    int processed1=cipher.update(plainText,0,firstPartLen,cipherText,0);    int processed2=cipher.doFinal(plainText,firstPartLen,plainText.length - firstPartLen,cipherText,processed1);    AlgorithmParameters params=cipher.getParameters();    if ((processed1 + processed2) != plainText.length) {      System.out.println("processed1 = " + processed1);      System.out.println("processed2 = " + processed2);      System.out.println("total length = " + plainText.length);      throw new RuntimeException("Encryption failure for test " + i);    }    try {      cipher.doFinal(new byte[blockSize - 1]);      throw new RuntimeException("Expected IBSE is not thrown");    } catch (    IllegalBlockSizeException ibse) {    }    IvParameterSpec iv2=new IvParameterSpec(IV2_SRC,0,blockSize);    cipher.init(Cipher.ENCRYPT_MODE,key,iv2);    Cipher cipher2=Cipher.getInstance(algo + "/CBC/NoPadding","SunJCE");    cipher2.init(Cipher.ENCRYPT_MODE,key,iv2);    byte[] eout=cipher.doFinal(IV2_SRC,0,blockSize);    byte[] eout2=cipher2.doFinal(IV2_SRC,0,blockSize);    if (!Arrays.equals(eout,eout2)) {      throw new RuntimeException("Different encryption output " + "for CBC and CTS");    }    cipher.init(Cipher.DECRYPT_MODE,key,params);    byte[] recoveredText=new byte[cipher.getOutputSize(cipherText.length)];    processed1=cipher.update(cipherText,0,firstPartLen,recoveredText,0);    processed2=cipher.update(cipherText,firstPartLen,cipherText.length - firstPartLen,recoveredText,processed1);    int processed3=cipher.doFinal(recoveredText,processed1 + processed2);    if ((processed1 + processed2 + processed3) != plainText.length) {      System.out.println("processed1 = " + processed1);      System.out.println("processed2 = " + processed2);      System.out.println("processed3 = " + processed3);      System.out.println("total length = " + plainText.length);      throw new RuntimeException("Decryption failure for test " + i);    }    if (Arrays.equals(plainText,recoveredText) == false) {      System.out.println("plain:  " + toString(plainText));      System.out.println("recovered: " + toString(recoveredText));      throw new RuntimeException("Decryption failure for test " + i);    }    try {      cipher.doFinal(new byte[blockSize - 1]);      throw new RuntimeException("Expected IBSE is not thrown");    } catch (    IllegalBlockSizeException ibse) {    }    cipher.init(Cipher.DECRYPT_MODE,key,iv2);    cipher2.init(Cipher.DECRYPT_MODE,key,iv2);    byte[] dout=cipher.doFinal(eout);    byte[] dout2=cipher2.doFinal(eout2);    if (!Arrays.equals(dout,dout2)) {      throw new RuntimeException("Different decryption output " + "for CBC and CTS");    }  }}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (requestCode == ConversationSettingsDialog.RINGTONE_REQUEST_CODE) {    if (data != null) {      if (mWaitingForThreadId > 0) {        ConversationPrefsHelper conversationPrefs=new ConversationPrefsHelper(this,mWaitingForThreadId);        Uri uri=data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);        conversationPrefs.putString(SettingsFragment.NOTIFICATION_TONE,(uri == null) ? "" : uri.toString());        mWaitingForThreadId=-1;      }    }  } else   if (requestCode == WelcomeActivity.WELCOME_REQUEST_CODE) {    new DefaultSmsHelper(this,R.string.not_default_first).showIfNotDefault(null);  }}  }
class C{  public void discardUntil(long timeUs){  while (rollingBuffer.peekSample(sampleInfoHolder) && sampleInfoHolder.timeUs < timeUs) {    rollingBuffer.skipSample();    needKeyframe=true;  }  lastReadTimeUs=Long.MIN_VALUE;}  }
class C{  public void normal(){  if (footerTextViewEnabled) {    mHintView.setVisibility(View.VISIBLE);    mHintView.setText(R.string.rebound_listview_footer_hint_normal);  }  if (footerProgressBarEnabled)   mProgressBar.setVisibility(View.GONE);}  }
class C{  boolean isStopped(){  return token == 0;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public AssistOptions(){}  }
class C{  public TableHeaderElement(String paramString,String s){  super("th",paramString,new StringElement(s));}  }
class C{  @Override public boolean supportsDataManipulationTransactionsOnly(){  debugCodeCall("supportsDataManipulationTransactionsOnly");  return true;}  }
class C{  public void startFunctionTrace(String functionName){  logger.trace("Starting function {}",functionName);  timers.put(functionName,metrics.getTimer(functionName).time());}  }
class C{  public Boolean isDryRun(){  return dryRun;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.233 -0400",hash_original_method="4A30515545AEE268D8CDF2F6145346D7",hash_generated_method="D825AA06680C4B1ED6AE74514326B1BE") public static void copy(Reader input,OutputStream output) throws IOException {  OutputStreamWriter out=new OutputStreamWriter(output);  copy(input,out);  out.flush();}  }
class C{  static void b2iBig(byte[] in,int inOfs,int[] out,int outOfs,int len){  if ((inOfs < 0) || ((in.length - inOfs) < len) || (outOfs < 0)|| ((out.length - outOfs) < len / 4)) {    throw new ArrayIndexOutOfBoundsException();  }  if (littleEndianUnaligned) {    inOfs+=byteArrayOfs;    len+=inOfs;    while (inOfs < len) {      out[outOfs++]=reverseBytes(unsafe.getInt(in,(long)inOfs));      inOfs+=4;    }  } else   if (bigEndian && ((inOfs & 3) == 0)) {    inOfs+=byteArrayOfs;    len+=inOfs;    while (inOfs < len) {      out[outOfs++]=unsafe.getInt(in,(long)inOfs);      inOfs+=4;    }  } else {    len+=inOfs;    while (inOfs < len) {      out[outOfs++]=((in[inOfs + 3] & 0xff)) | ((in[inOfs + 2] & 0xff) << 8) | ((in[inOfs + 1] & 0xff) << 16)| ((in[inOfs]) << 24);      inOfs+=4;    }  }}  }
class C{  public static Class toReturnType(short xsType,String typeName,Integer optionalFractionDigits){  if (typeName != null) {    Class result=typeMap.get(typeName);    if (result != null) {      return result;    }  }switch (xsType) {case XSSimpleType.PRIMITIVE_BOOLEAN:    return Boolean.class;case XSSimpleType.PRIMITIVE_STRING:  return String.class;case XSSimpleType.PRIMITIVE_DECIMAL:if ((optionalFractionDigits != null) && (optionalFractionDigits > 0)) {  return Double.class;}return Integer.class;case XSSimpleType.PRIMITIVE_FLOAT:return Float.class;case XSSimpleType.PRIMITIVE_DOUBLE:return Double.class;default :return String.class;}}  }
class C{  public boolean has(String key){  return this.map.containsKey(key);}  }
class C{  public static boolean areNullorEqual(Object obj1,Object obj2,boolean ignoreWhitespace,boolean ignoreCase){  if ((obj1 == null) && (obj2 == null))   return true;  if ((obj1 == null) || (obj2 == null))   return false;  if ((obj1 instanceof String) && (obj2 instanceof String)) {    if (ignoreWhitespace) {      if (ignoreCase)       return ((String)obj1).trim().equalsIgnoreCase(((String)obj2).trim()); else       return ((String)obj1).trim().equals(((String)obj2).trim());    } else {      if (ignoreCase)       return ((String)obj1).equalsIgnoreCase((String)obj2); else       return obj1.equals(obj2);    }  }  return (obj1.equals(obj2));}  }
class C{  @Override public void processToken(String tok){  if (!tok.isEmpty()) {    tokens.emit(tok);  }}  }
class C{  public boolean handleException(){  return handleException;}  }
class C{  public boolean isPoweredOffSnapshotsSupported(){  return poweredOffSnapshotsSupported;}  }
class C{  protected void fireEndElem(String name) throws org.xml.sax.SAXException {  if (m_tracer != null) {    flushMyWriter();    m_tracer.fireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT,name,(Attributes)null);  }}  }
class C{  public void printlnComment(String comment) throws IOException {  if (this.strategy.isCommentingDisabled()) {    return;  }  if (!newLine) {    println();  }  out.write(this.strategy.getCommentStart());  out.write(' ');  for (int i=0; i < comment.length(); i++) {    char c=comment.charAt(i);switch (c) {case '\r':      if (i + 1 < comment.length() && comment.charAt(i + 1) == '\n') {        i++;      }case '\n':    println();  out.write(this.strategy.getCommentStart());out.write(' ');break;default :out.write(c);break;}}println();}  }
class C{  public VideoSharingDeleteTask(VideoSharingServiceImpl videoSharingService,RichcallService richcallService,LocalContentResolver contentResolver,ContactId contact){  super(contentResolver,VideoSharingData.CONTENT_URI,VideoSharingData.KEY_SHARING_ID,VideoSharingData.KEY_CONTACT,contact);  mVideoSharingService=videoSharingService;  mRichcallService=richcallService;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.275 -0500",hash_original_method="E907105D6B58D9053A1938DE7DF89ED1",hash_generated_method="9FCEF8C8DF6D21C2526B583BB43BE6DA") private static void waitUntilAllThreadsStopped(){  File tasks=new File("/proc/self/task");  while (tasks.list().length > 1) {    try {      Thread.sleep(10);    } catch (    InterruptedException ignored) {    }  }}  }
class C{  private void processPhantomRefs(RefEntry.PhantomLiveRef phantom){  assert Thread.holdsLock(this);  Set<RefEntry> strongCleans=null;  Set<RefEntry> normalCleans=null;  do {    RefEntry refEntry=phantom.getRefEntry();    refEntry.removeInstanceFromRefSet(phantom);    if (refEntry.isRefSetEmpty()) {      if (refEntry.hasDirtyFailed()) {        if (strongCleans == null) {          strongCleans=new HashSet<>(5);        }        strongCleans.add(refEntry);      } else {        if (normalCleans == null) {          normalCleans=new HashSet<>(5);        }        normalCleans.add(refEntry);      }      removeRefEntry(refEntry);    }  } while ((phantom=(RefEntry.PhantomLiveRef)refQueue.poll()) != null);  if (strongCleans != null) {    pendingCleans.add(new CleanRequest(createObjIDArray(strongCleans),getNextSequenceNum(),true));  }  if (normalCleans != null) {    pendingCleans.add(new CleanRequest(createObjIDArray(normalCleans),getNextSequenceNum(),false));  }}  }
class C{  @Override public boolean equals(Object other){  if (_map.equals(other)) {    return true;  } else   if (other instanceof Map) {    Map that=(Map)other;    if (that.size() != _map.size()) {      return false;    } else {      Iterator it=that.entrySet().iterator();      for (int i=that.size(); i-- > 0; ) {        Map.Entry e=(Map.Entry)it.next();        Object key=e.getKey();        Object val=e.getValue();        if (key instanceof Float && val instanceof Long) {          float k=unwrapKey(key);          long v=unwrapValue(val);          if (_map.containsKey(k) && v == _map.get(k)) {          } else {            return false;          }        } else {          return false;        }      }      return true;    }  } else {    return false;  }}  }
class C{  public void resetToPreferredSizes(){  SplitPaneUI ui=getUI();  if (ui != null) {    ui.resetToPreferredSizes(this);  }}  }
class C{  public boolean visit(MemberValuePair node){  return true;}  }
class C{  public StartupException(String msg,Throwable nested){  super(msg);  this.nested=nested;}  }
class C{  public Matrix4f m01(float m01){  this.m01=m01;  properties&=~(PROPERTY_IDENTITY | PROPERTY_PERSPECTIVE | PROPERTY_TRANSLATION);  return this;}  }
class C{  AlignmentPatternFinder(BitMatrix image,int startX,int startY,int width,int height,float moduleSize,ResultPointCallback resultPointCallback){  this.image=image;  this.possibleCenters=new ArrayList<>(5);  this.startX=startX;  this.startY=startY;  this.width=width;  this.height=height;  this.moduleSize=moduleSize;  this.crossCheckStateCount=new int[3];  this.resultPointCallback=resultPointCallback;}  }
class C{  public void editTags(TagInfo tagInfo){  tagInfo=new TagInfo("ins",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  this.put("ins",tagInfo);  tagInfo=new TagInfo("del",ContentType.all,BelongsTo.BODY,false,false,false,CloseTag.required,Display.any);  this.put("del",tagInfo);}  }
class C{  public <T>T fromXML(final File file){  return fromXML(file,null);}  }
class C{  public ImageLayer(){}  }
class C{  private void internalSend(String uuid,String message,ReplyHandler callback) throws WebSocketException {  checkWebSocketConnectionState();  if (callback != null) {    replyCallbackMap.put(uuid,callback);  }  send(message);}  }
class C{  @Override public void deleteFile(String name){  throw new UnsupportedOperationException();}  }
class C{  public void dispose(){  mRed=null;  mYellow=null;  mGreen=null;  mFlashRed=null;  mFlashYellow=null;  mFlashGreen=null;  mDark=null;  super.dispose();}  }
class C{  static double calculateDepartureTime(Activity act,double now,PlansConfigGroup.ActivityDurationInterpretation activityDurationInterpretation){  if (act.getMaximumDuration() == Time.UNDEFINED_TIME && (act.getEndTime() == Time.UNDEFINED_TIME)) {    return Double.POSITIVE_INFINITY;  } else {    double departure=0;    if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.minOfDurationAndEndTime)) {      if (act.getMaximumDuration() == Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else       if (act.getEndTime() == Time.UNDEFINED_TIME) {        departure=now + act.getMaximumDuration();      } else {        departure=Math.min(act.getEndTime(),now + act.getMaximumDuration());      }    } else     if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.endTimeOnly)) {      if (act.getEndTime() != Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else {        throw new IllegalStateException("activity end time not set and using something else not allowed.");      }    } else     if (activityDurationInterpretation.equals(PlansConfigGroup.ActivityDurationInterpretation.tryEndTimeThenDuration)) {      if (act.getEndTime() != Time.UNDEFINED_TIME) {        departure=act.getEndTime();      } else       if (act.getMaximumDuration() != Time.UNDEFINED_TIME) {        departure=now + act.getMaximumDuration();      } else {        throw new IllegalStateException("neither activity end time nor activity duration defined; don't know what to do.");      }    } else {      throw new IllegalStateException("should not happen");    }    if (departure < now) {      departure=now;    }    return departure;  }}  }
class C{  public double parseDouble() throws SyntaxError {  String str=parseArg();  if (argWasQuoted())   throw new SyntaxError("Expected double instead of quoted string:" + str);  double value=Double.parseDouble(str);  return value;}  }
class C{  @InitBinder public void initBinder(final WebDataBinder dataBinder){  dataBinder.registerCustomEditor(String[].class,new StringArrayPropertyEditor(StringArrayPropertyEditor.DEFAULT_SEPARATOR,false));}  }
class C{  public boolean isFinal(){  return false;}  }
class C{  public void testDivideBigDecimalScaleMathContextCEILING(){  String a="3736186567876876578956958765675671119238118911893939591735";  int aScale=15;  String b="748766876876723342238476237823787879183470";  int bScale=70;  int precision=21;  RoundingMode rm=RoundingMode.CEILING;  MathContext mc=new MathContext(precision,rm);  String c="4.98978611802562512996E+70";  int resScale=-50;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,mc);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public N4EnumDeclaration createN4EnumDeclaration(){  N4EnumDeclarationImpl n4EnumDeclaration=new N4EnumDeclarationImpl();  return n4EnumDeclaration;}  }
class C{  public String doNotMakeSplitPointActualValueTipText(){  return "If true, the split point is not relocated to an actual data value." + " This can yield substantial speed-ups for large datasets with numeric attributes.";}  }
class C{  public void verify() throws IOException {  int lineLength;  int lineNumber;  for (String line=this.reader.readLine(); line != null; line=this.reader.readLine()) {    lineLength=line.length();    lineNumber=this.reader.getLineNumber();    this.numOfLines++;    if (enabledRules.contains(Rules.MAX_LINE_LENGTH) && SourceFileUtil.lineTooLong(lineLength,this.constructLengths.maxLineLength)) {      lineLengthViolation(lineNumber,lineLength,this.constructLengths.maxLineLength,Rules.MAX_LINE_LENGTH,Messages.EXCEEDS_CHARACTER_LIMIT);    }    if (enabledRules.contains(Rules.TRAILING_WHITESPACE) && SourceFileUtil.lineHasTrailingWhitespace(lineLength,line)) {      trailingWhitespaceViolation(lineNumber,lineLength);    }  }  if (enabledRules.contains(Rules.MAX_FILE_LENGTH)) {    verifyFileLength();  }  if (enabledRules.contains(Rules.TERMINATING_NEWLINE)) {    verifyNewlineTerminated();  }  if (enabledRules.contains(Rules.LEADING_WHITESPACE)) {    verifyNoLeadingWhitespace();  }}  }
class C{  public static boolean containsArabic(AttributedCharacterIterator aci){  for (char c=aci.first(); c != AttributedCharacterIterator.DONE; c=aci.next()) {    if (arabicChar(c)) {      return true;    }  }  return false;}  }
class C{  public void printControllerStats(){  if (Controller.options.LOGGING_LEVEL >= 1) {    int awoken=ControllerMemory.getNumAwoken();    int didNothing=ControllerMemory.getNumDidNothing();    int numMethodsConsidered=ControllerMemory.getNumMethodsConsidered();    int numMethodsScheduledForRecomp=ControllerMemory.getNumMethodsScheduledForRecomp();    int numOpt0=ControllerMemory.getNumOpt0();    int numOpt1=ControllerMemory.getNumOpt1();    int numOpt2=ControllerMemory.getNumOpt2();    int numOpt3=ControllerMemory.getNumOpt3();    printToLogWithTimePrefix("\n  Num times Controller thread is awoken: " + awoken + "\n  Num times did nothing: "+ didNothing+ " ("+ ((int)((float)didNothing / (float)awoken * 100))+ "%)\n  Num methods baseline compiled: "+ ControllerMemory.getNumBase()+ "\n  Num methods considered for recompilation: "+ numMethodsConsidered+ "\n  Num methods chosen to recompile: "+ numMethodsScheduledForRecomp+ " ("+ ((int)((float)numMethodsScheduledForRecomp / numMethodsConsidered * 100))+ "%)\n  Opt Levels Chosen: "+ "\n\t Opt Level 0: "+ numOpt0+ " ("+ ((int)((float)numOpt0 / numMethodsScheduledForRecomp * 100))+ "%)\n\t Opt Level 1: "+ numOpt1+ " ("+ ((int)((float)numOpt1 / numMethodsScheduledForRecomp * 100))+ "%)\n"+ "\t Opt Level 2: "+ numOpt2+ " ("+ ((int)((float)numOpt2 / numMethodsScheduledForRecomp * 100))+ "%)\n"+ "\t Opt Level 3: "+ numOpt3+ " ("+ ((int)((float)numOpt3 / numMethodsScheduledForRecomp * 100))+ "%)\n\n");    ControllerMemory.printFinalMethodStats(log);  }}  }
class C{  Rules(Workspace workspace){  this.root=workspace.getRoot();  this.teamHook=workspace.getTeamHook();  workspace.addLifecycleListener(this);}  }
class C{  public static int compare(String str1,String str2){  String[] vals1=normalizeVersion(str1).split("\\.");  String[] vals2=normalizeVersion(str2).split("\\.");  int i=0;  while (i < vals1.length && i < vals2.length && vals1[i].equals(vals2[i])) {    i++;  }  if (i < vals1.length && i < vals2.length) {    if (vals1[i].isEmpty()) {      vals1[i]="0";    }    if (vals2[i].isEmpty()) {      vals2[i]="0";    }    int diff=Integer.valueOf(vals1[i]).compareTo(Integer.valueOf(vals2[i]));    return Integer.signum(diff);  } else {    return Integer.signum(vals1.length - vals2.length);  }}  }
class C{  public void removeCMap(short platformID,short platformSpecificID){  CmapSubtable key=new CmapSubtable(platformID,platformSpecificID);  subtables.remove(key);}  }
class C{  protected void addOperatorPropertyDescriptor(Object object){  itemPropertyDescriptors.add(createItemPropertyDescriptor(((ComposeableAdapterFactory)adapterFactory).getRootAdapterFactory(),getResourceLocator(),getString("_UI_ShiftExpression_operator_feature"),getString("_UI_PropertyDescriptor_description","_UI_ShiftExpression_operator_feature","_UI_ShiftExpression_type"),ExpressionsPackage.Literals.SHIFT_EXPRESSION__OPERATOR,true,false,false,ItemPropertyDescriptor.GENERIC_VALUE_IMAGE,null,null));}  }
class C{  public int score(){  int sum=0;  for (int i=0; i < hand.size(); i++) {    Card card=hand.getCard(i);    int rank=card.getRank();    if (rank == 8) {      sum-=20;    } else     if (rank > 10) {      sum-=10;    } else {      sum-=rank;    }  }  return sum;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public boolean isArray(){  return true;}  }
class C{  public TextComponent(TextComponent textComponent){  super(textComponent);  this.text=textComponent.getText();}  }
class C{  public Builder callback(Callback callback){  this.callback=callback;  return this;}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public AjaxWlPage(final PageParameters params){  super(params);}  }
class C{  private OutputPropertiesImpl(OutputPropertiesBuilder builder){  super(builder);}  }
class C{  @Override public String globalInfo(){  return "The Binary Relevance Method - Random Subspace ('quick') Version.\n" + "This version is able to downsample the number of instances across the binary models.\n" + "For more information see:\n"+ getTechnicalInformation().toString();}  }
class C{  public Builder addService(ActionService service){  if (service == null) {    throw new IllegalArgumentException("ActionService may not be null.");  }  if (service.getSupportedAnnotationType() == null) {    throw new IllegalArgumentException("the ActionService doesn't support any actions");  }  services.add(service);  return this;}  }
class C{  static public void assertEquals(short expected,short actual){  assertEquals(null,expected,actual);}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  private void showOverlayTimeout(int timeout){  if (mMediaPlayer == null)   return;  if (timeout != 0)   mOverlayTimeout=timeout;  if (mOverlayTimeout == 0)   mOverlayTimeout=mMediaPlayer.isPlaying() ? OVERLAY_TIMEOUT : OVERLAY_INFINITE;  if (mIsNavMenu) {    mShowing=true;    return;  }  mHandler.sendEmptyMessage(SHOW_PROGRESS);  if (!mShowing) {    mShowing=true;    if (!mIsLocked) {      mPlayPause.setVisibility(View.VISIBLE);      mSize.setVisibility(View.VISIBLE);      dimStatusBar(false);    }    mOverlayProgress.setVisibility(View.VISIBLE);    mEdit.setVisibility(View.VISIBLE);    mLock.setVisibility(View.VISIBLE);  }  mHandler.removeMessages(FADE_OUT);  if (mOverlayTimeout != OVERLAY_INFINITE)   mHandler.sendMessageDelayed(mHandler.obtainMessage(FADE_OUT),mOverlayTimeout);  updateOverlayPausePlay();}  }
class C{  public static int EALREADY(){  return Errno.EALREADY.intValue();}  }
class C{  private PortfolioAccount findByNameAndAccountNumber(String portfolioName,String accountNumber){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<PortfolioAccount> query=builder.createQuery(PortfolioAccount.class);    Root<PortfolioAccount> from=query.from(PortfolioAccount.class);    query.select(from);    List<Predicate> predicates=new ArrayList<Predicate>();    if (null != accountNumber) {      Join<PortfolioAccount,Account> account=from.join("account");      Predicate predicate=builder.equal(account.get("accountNumber"),accountNumber);      predicates.add(predicate);    }    if (null != portfolioName) {      Join<PortfolioAccount,Portfolio> portfolio=from.join("portfolio");      Predicate predicate=builder.equal(portfolio.get("name"),portfolioName);      predicates.add(predicate);    }    query.where(predicates.toArray(new Predicate[]{}));    TypedQuery<PortfolioAccount> typedQuery=entityManager.createQuery(query);    List<PortfolioAccount> items=typedQuery.getResultList();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    throw re;  }}  }
class C{  public AlternateColorSpace(PDFColorSpace alternate,PDFFunction function){  this.alternate=alternate;  this.function=function;}  }
class C{  public void attachModule(Module module){  if (modules.contains(module) || getModule(module.getClass()) != null) {    log.info("Module " + module.getClass().getCanonicalName() + " is already attached");    return;  }  modules.add((!modules.isEmpty()) ? modules.size() - 1 : 0,module);  if (!paused) {    try {      module.start();    } catch (    RuntimeException e) {      log.warning("could not start module " + module.getClass().getCanonicalName());      modules.remove(module);    }  }}  }
class C{  public SnackbarBuilder actionTextColor(@ColorInt int actionTextColor){  this.actionTextColor=actionTextColor;  return this;}  }
class C{  public void dispose(){  if (mesh != null)   mesh.dispose();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static void apply(){  applyOpenSSLFix();  installLinuxPRNGSecureRandom();}  }
class C{  @Override public boolean equals(Object object){  return object == null || object == this;}  }
class C{  private Sequence<IString> toClassRepresentation(Sequence<IString> targetSequence){  if (targetSequence.size() == 0)   return targetSequence;  IString[] array=new IString[targetSequence.size()];  for (int i=0; i < array.length; ++i) {    if (wrapBoundary && (targetSequence.get(i).equals(this.startToken) || targetSequence.get(i).equals(this.endToken)))     array[i]=targetSequence.get(i); else     array[i]=targetClassMap.get(targetSequence.get(i));  }  return new ArraySequence<IString>(true,array);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case MappingPackage.INFOMODEL_SOURCE__MODEL:    setModel((InformationModel)null);  return;}super.eUnset(featureID);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  @Override public CloseableReference<Bitmap> createBitmapInternal(int width,int height,Bitmap.Config bitmapConfig){  Bitmap bitmap=Bitmap.createBitmap(width,height,bitmapConfig);  return CloseableReference.of(bitmap,SimpleBitmapReleaser.getInstance());}  }
class C{  BluetoothHandsfreeClient(Context context,ServiceListener l){  mContext=context;  mServiceListener=l;  mAdapter=BluetoothAdapter.getDefaultAdapter();  IBluetoothManager mgr=mAdapter.getBluetoothManager();  if (mgr != null) {    try {      mgr.registerStateChangeCallback(mBluetoothStateChangeCallback);    } catch (    RemoteException e) {      Log.e(TAG,"",e);    }  }  if (!context.bindService(new Intent(IBluetoothHandsfreeClient.class.getName()),mConnection,0)) {    Log.e(TAG,"Could not bind to Bluetooth Handsfree Client Service");  }}  }
class C{  protected ExitStateImpl(){  super();}  }
class C{  private boolean hasPixels(Image image){  return image != null && (image.getHeight(imageObserver) > 0) && (image.getWidth(imageObserver) > 0);}  }
class C{  @Override protected EClass eStaticClass(){  return N4JSPackage.Literals.EXPRESSION_STATEMENT;}  }
class C{  public static Color HSLtoRGB(float h,float s,float l){  int[] rgb=HSLtoRGB(h,s,l,null);  return new Color(rgb[0],rgb[1],rgb[2]);}  }
class C{  private static void verifyDevice(IDevice d,long mac,Short vlan,Integer ip,long swId,int port){  assertNotNull(d);  assertEquals(MacAddress.of(mac),d.getMACAddress());  if (vlan == null)   assertArrayEquals(new VlanVid[]{VlanVid.ofVlan(-1)},d.getVlanId()); else   assertArrayEquals(new VlanVid[]{VlanVid.ofVlan(vlan)},d.getVlanId());  if (ip == null)   assertArrayEquals(new IPv4Address[]{IPv4Address.of(0)},d.getIPv4Addresses()); else   assertArrayEquals(new IPv4Address[]{IPv4Address.of(ip)},d.getIPv4Addresses());  SwitchPort expectedAp=new SwitchPort(DatapathId.of(swId),OFPort.of(port));  assertArrayEquals(new SwitchPort[]{expectedAp},d.getAttachmentPoints());}  }
class C{  private void updateGmtOffset(DateTime dateTime){  final long gmtOffsetInMillis=dateTime.getZone().getOffset(dateTime.getMillis());  final long gmtOffset=TimeUnit.MILLISECONDS.toHours(gmtOffsetInMillis);  m_info.setGmtOffset(gmtOffset);}  }
class C{  public CIMInstance checkExists(StorageSystem storage,CIMObjectPath objectPath,boolean propagated,boolean includeClassOrigin) throws Exception {  CIMInstance instance=null;  try {    if (objectPath != null && !objectPath.equals(NULL_CIM_OBJECT_PATH)) {      _log.debug(String.format("checkExists(storage=%s, objectPath=%s, propagated=%s, includeClassOrigin=%s)",storage.getSerialNumber(),objectPath.toString(),String.valueOf(propagated),String.valueOf(includeClassOrigin)));      instance=getInstance(storage,objectPath,propagated,includeClassOrigin,null);    }  } catch (  WBEMException e) {    if (e.getID() != WBEMException.CIM_ERR_NOT_FOUND) {      throw e;    }  }catch (  Exception e) {    _log.error("checkExists call encountered an exception",e);    throw e;  }  return instance;}  }
class C{  public static void evictBitmap(String key){  final ANImageLoader.ImageCache imageCache=ANImageLoader.getInstance().getImageCache();  if (imageCache != null && key != null) {    imageCache.evictBitmap(key);  }}  }
class C{  public static String[] toStringArray(long[] array){  if (array == null) {    return null;  }  String[] result=new String[array.length];  for (int i=0; i < array.length; i++) {    result[i]=String.valueOf(array[i]);  }  return result;}  }
class C{  public static <T>T[] concat(T[] first,T[] second,Class<T> type){  T[] result=newArray(type,first.length + second.length);  System.arraycopy(first,0,result,0,first.length);  System.arraycopy(second,0,result,first.length,second.length);  return result;}  }
class C{  public static boolean putAll(String name,String key,List<?> list){  if (StringUtils.isEmpty(key) || CollectionUtils.isEmpty(list)) {    throw new RuntimeException("key or list cannot be null.");  }  SharedPreferences.Editor editor=getSharedPreferences(name).edit();  int size=list.size();  if (list.get(0) instanceof String) {    for (int i=0; i < size; i++) {      editor.putString(key + i,(String)list.get(i));    }  } else   if (list.get(0) instanceof Long) {    for (int i=0; i < size; i++) {      editor.putLong(key + i,(Long)list.get(i));    }  } else   if (list.get(0) instanceof Float) {    for (int i=0; i < size; i++) {      editor.putFloat(key + i,(Float)list.get(i));    }  } else   if (list.get(0) instanceof Integer) {    for (int i=0; i < size; i++) {      editor.putLong(key + i,(Integer)list.get(i));    }  } else   if (list.get(0) instanceof Boolean) {    for (int i=0; i < size; i++) {      editor.putBoolean(key + i,(Boolean)list.get(i));    }  }  return editor.commit();}  }
class C{  public BoundedInputStream(InputStream in){  this(in,-1);}  }
class C{  public CoreAdminHandler(final CoreContainer coreContainer){  this.coreContainer=coreContainer;}  }
class C{  @Override public int hashCode(){  int total=0;  final Iterator<Map.Entry<K,V>> it=createEntrySetIterator();  while (it.hasNext()) {    total+=it.next().hashCode();  }  return total;}  }
class C{  public ObjectName[] manageStat(String statisticsTypeName) throws AdminException, MalformedObjectNameException {  return Helper.manageStat(this,statisticsTypeName);}  }
class C{  public static ImageView imageView(String imgFileName,int sz){  return new ImageView(image(imgFileName,sz));}  }
class C{  public void propertyChange(java.beans.PropertyChangeEvent e){}  }
class C{  protected FinalizableWeakReference(T referent,FinalizableReferenceQueue queue){  super(referent,queue.queue);  queue.cleanUp();}  }
class C{  public synchronized void removeDataSourceListener(DataSourceListener dsl){  m_dataSetListeners.remove(dsl);}  }
class C{  public boolean requestUpgrade(String version){  generateLongSocketSerial();  String url="http://" + mInetAddr.getHostAddress() + "/v1/device/rpc/";  String request=buildMeshDeviceUpgradeRequest1(url,version);  JSONObject postJSON=null;  try {    postJSON=new JSONObject(request);  } catch (  JSONException e) {    throw new IllegalArgumentException("requestUpgrade() request isn't json :" + postJSON);  }  String bssid=mDeviceBssid;  int serial=mSerial;  HeaderPair[] headers=null;  JSONObject responseJson=MeshCommunicationUtils.JsonPost(url,bssid,serial,postJSON,headers);  if (responseJson == null) {    log.warn("requestUpgrade() fail, return false");    return false;  }  String responseStr=responseJson.toString();  boolean isResponseSuc=analyzeUpgradeResponse1(responseStr);  log.debug("requestUpgrade(): " + isResponseSuc);  return isResponseSuc;}  }
class C{  public Boolean shouldOpenExternalUrl(String url){  for (  PluginEntry entry : this.entryMap.values()) {    CordovaPlugin plugin=pluginMap.get(entry.service);    if (plugin != null) {      Boolean result=plugin.shouldOpenExternalUrl(url);      if (result != null) {        return result;      }    }  }  return false;}  }
class C{  public static void sleepUnchecked(long millis){  try {    Thread.sleep(millis);  } catch (  InterruptedException e) {    throw melnorme.utilbox.core.ExceptionAdapter.unchecked(e);  }}  }
class C{  public JavaDocContext(TemplateContextType type,IDocument document,int completionOffset,int completionLength,ICompilationUnit compilationUnit){  super(type,document,completionOffset,completionLength,compilationUnit);}  }
class C{  public static long restore(long node){  return node & MASK;}  }
class C{  public static <T>Mapping<List<T>> list(Mapping<T> base,Constraint... constraints){  String mname="list of " + base.meta().name;  return new FieldMapping<>(InputMode.MULTIPLE,(null),(null),new MappingMeta(mname,List.class,base)).constraint(constraints);}  }
class C{  public void updateBottomNavigationColor(boolean isColored){  bottomNavigation.setColored(isColored);}  }
class C{  @Override public final boolean equals(Object o){  if (this == o)   return true;  if (o == null || getClass() != o.getClass())   return false;  final gov.nasa.worldwind.geom.Line line=(gov.nasa.worldwind.geom.Line)o;  if (!direction.equals(line.direction))   return false;  if (!line.origin.equals(origin))   return false;  return true;}  }
class C{  public static BufferedImage toCompatibleImage(BufferedImage image){  if (image.getColorModel().equals(getGraphicsConfiguration().getColorModel())) {    return image;  }  BufferedImage compatibleImage=getGraphicsConfiguration().createCompatibleImage(image.getWidth(),image.getHeight(),image.getTransparency());  Graphics g=compatibleImage.getGraphics();  g.drawImage(image,0,0,null);  g.dispose();  return compatibleImage;}  }
class C{  private static void deleteRecursive(CarbonFile f) throws CarbonUtilException {  if (f.isDirectory()) {    if (f.listFiles() != null) {      for (      CarbonFile c : f.listFiles()) {        deleteRecursive(c);      }    }  }  if (f.exists() && !f.delete()) {    throw new CarbonUtilException("Error while deleting the folders and files");  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double z, z2, zMin;  int x, y, a, b, i;  double h=0;  int whichCell;  double infVal=9999999;  int[] dX=new int[]{-1,-1,0,1,1,1,0,-1};  int[] dY=new int[]{0,-1,-1,-1,0,1,1,1};  int[] Gx=new int[]{1,1,0,1,1,1,0,1};  int[] Gy=new int[]{0,1,1,1,0,1,1,1};  double gridRes;  double bufferSize=1;  boolean bufferInGridCells=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      bufferSize=Double.parseDouble(args[i]);    } else     if (i == 3) {      if (args[i].toLowerCase().contains("cells")) {        bufferInGridCells=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double noData=image.getNoDataValue();    gridRes=(image.getCellSizeX() + image.getCellSizeY()) / 2;    WhiteboxRaster outputImage=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    outputImage.setPreferredPalette(image.getPreferredPalette());    WhiteboxRaster allocation=new WhiteboxRaster(outputHeader.replace(".dep","_temp1.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,infVal);    allocation.isTemporaryFile=true;    WhiteboxRaster Rx=new WhiteboxRaster(outputHeader.replace(".dep","_temp2.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Rx.isTemporaryFile=true;    WhiteboxRaster Ry=new WhiteboxRaster(outputHeader.replace(".dep","_temp3.dep"),"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    Ry.isTemporaryFile=true;    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != 0) {          outputImage.setValue(row,col,0);          allocation.setValue(row,col,data[col]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=outputImage.getValue(row,col);        if (z != 0) {          zMin=infVal;          whichCell=-1;          for (i=0; i <= 3; i++) {            x=col + dX[i];            y=row + dY[i];            z2=outputImage.getValue(y,x);            if (z2 != noData) {switch (i) {case 0:                h=2 * Rx.getValue(y,x) + 1;              break;case 1:            h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);          break;case 2:        h=2 * Ry.getValue(y,x) + 1;      break;case 3:    h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);  break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}for (row=rows - 1; row >= 0; row--) {for (col=cols - 1; col >= 0; col--) {z=outputImage.getValue(row,col);if (z != 0) {zMin=infVal;whichCell=-1;for (i=4; i <= 7; i++) {x=col + dX[i];y=row + dY[i];z2=outputImage.getValue(y,x);if (z2 != noData) {switch (i) {case 5:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;case 4:h=2 * Rx.getValue(y,x) + 1;break;case 6:h=2 * Ry.getValue(y,x) + 1;break;case 7:h=2 * (Rx.getValue(y,x) + Ry.getValue(y,x) + 1);break;}z2+=h;if (z2 < zMin) {zMin=z2;whichCell=i;}}}if (zMin < z) {outputImage.setValue(row,col,zMin);x=col + dX[whichCell];y=row + dY[whichCell];Rx.setValue(row,col,Rx.getValue(y,x) + Gx[whichCell]);Ry.setValue(row,col,Ry.getValue(y,x) + Gy[whichCell]);allocation.setValue(row,col,allocation.getValue(y,x));}}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * (rows - 1 - row) / (rows - 1));updateProgress((int)progress);}if (bufferInGridCells) {bufferSize=bufferSize * bufferSize;} else {bufferSize=(bufferSize / gridRes) * (bufferSize / gridRes);}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {if (image.getValue(row,col) != noData) {z=outputImage.getValue(row,col);if (z <= bufferSize) {outputImage.setValue(row,col,allocation.getValue(row,col));} else {outputImage.setValue(row,col,0);}} else {outputImage.setValue(row,col,noData);}}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / (rows - 1));updateProgress((int)progress);}outputImage.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputImage.addMetadataEntry("Created on " + new Date());image.close();allocation.close();outputImage.close();Rx.close();Ry.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public void testConstructor4(){  try {    Integer[] ints=new Integer[SIZE];    LinkedBlockingDeque q=new LinkedBlockingDeque(Arrays.asList(ints));    shouldThrow();  } catch (  NullPointerException success) {  }}  }
class C{  public void enterNextPlugin(){  if (this.pluginIterator.hasNext()) {    this.plugin=pluginIterator.next().createPlugin();    this.plugin.init(this,sw,timer);    this.plugin.enterPlugin();  } else {    setState(new WaitInitialRoleState());  }}  }
class C{  private static int assignBytecodeIndices(int bcIndex,int[] bcIndices,int low,int high){  int middle=(high + low) / 2;  bcIndices[middle]=bcIndex++;  if (low == middle && middle == high) {    return bcIndex;  } else {    if (low < middle) {      bcIndex=assignBytecodeIndices(bcIndex,bcIndices,low,middle - 1);    }    if (middle < high) {      bcIndex=assignBytecodeIndices(bcIndex,bcIndices,middle + 1,high);    }    return bcIndex;  }}  }
class C{  public DTMIterator cloneWithReset() throws CloneNotSupportedException {  DescendantIterator clone=(DescendantIterator)super.cloneWithReset();  clone.m_traverser=m_traverser;  clone.resetProximityPositions();  return clone;}  }
class C{  public double phase(){  return Math.atan2(im,re);}  }
class C{  private void assertMailboxManagerSize(MailboxManager mailboxManager,int multiplicationFactor) throws BadCredentialsException, MailboxException {  MailboxSession mailboxSession=mailboxManager.createSystemSession("manager",LoggerFactory.getLogger("src-mailbox-copier"));  mailboxManager.startProcessingRequest(mailboxSession);  List<MailboxPath> mailboxPathList=mailboxManager.list(mailboxSession);  assertThat(mailboxPathList).hasSize(MockMailboxManager.EXPECTED_MAILBOXES_COUNT);  for (  MailboxPath mailboxPath : mailboxPathList) {    MessageManager messageManager=mailboxManager.getMailbox(mailboxPath,mailboxSession);    assertThat(messageManager.getMetaData(false,mailboxSession,FetchGroup.NO_UNSEEN).getMessageCount()).isEqualTo(MockMailboxManager.MESSAGE_PER_MAILBOX_COUNT * multiplicationFactor);  }  mailboxManager.endProcessingRequest(mailboxSession);  mailboxManager.logout(mailboxSession,true);}  }
class C{  public void start(){  m_stepCounter=0;  for (  final ITutorialListener listener : m_listeners) {    listener.started(this);  }}  }
class C{  public static int[] generateHashes(double[] histogram){  double val;  int[] hashResults=new int[hashes.length];  for (int i=0; i < hashes.length; i++) {    double[][] hashBundle=hashes[i];    for (int j=0; j < hashBundle.length; j++) {      val=0d;      double[] hashBit=hashBundle[j];      for (int k=0; k < histogram.length; k++) {        val+=hashBit[k] * histogram[k];      }      hashResults[i]+=lookUp[j] * (val < 0 ? 0 : 1);    }  }  return hashResults;}  }
class C{  public TransitionSliding createTSliding(String transitionId,MediaItem afterMediaItem,MediaItem beforeMediaItem,long durationMs,int behavior,int direction){  TransitionSliding transSlide=null;  transSlide=new TransitionSliding(transitionId,afterMediaItem,beforeMediaItem,durationMs,behavior,direction);  return transSlide;}  }
class C{  public boolean isLocalSwitcher(){  String departureName=TrainCommon.splitString(getTrainDepartsName());  Route route=getRoute();  if (route != null) {    for (    RouteLocation rl : route.getLocationsBySequenceList()) {      String name=TrainCommon.splitString(rl.getName());      if (!departureName.equals(name)) {        return false;      }    }  }  return true;}  }
class C{  private void definePopups(UIDefaults d){  d.put("seaGlassPopupBorder",new ColorUIResource(0xbbbbbb));  d.put("popupMenuInteriorEnabled",Color.WHITE);  d.put("popupMenuBorderEnabled",new Color(0x5b7ea4));  String c=PAINTER_PREFIX + "PopupMenuPainter";  String p="PopupMenu";  d.put(p + ".contentMargins",new InsetsUIResource(6,1,6,1));  d.put(p + ".opaque",Boolean.TRUE);  d.put(p + ".consumeEventOnClose",Boolean.TRUE);  d.put(p + "[Disabled].backgroundPainter",new LazyPainter(c,PopupMenuPainter.Which.BACKGROUND_DISABLED));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,PopupMenuPainter.Which.BACKGROUND_ENABLED));  c=PAINTER_PREFIX + "SeparatorPainter";  p="PopupMenuSeparator";  d.put(p + ".contentMargins",new InsetsUIResource(1,0,2,0));  d.put(p + "[Enabled].backgroundPainter",new LazyPainter(c,SeparatorPainter.Which.BACKGROUND_ENABLED));}  }
class C{  public String dateToString(Date date){  return this.formatter.format(date);}  }
class C{  private static CharSequence rebalance(CharSequence s,char open,char close){  int n=s.length();  if (n == 0) {    return s;  }  StringBuilder sb=null;  int pos=0;  int lOpen=-1;  int lOpenInSb=-1;  if (s.charAt(0) == '*' || s.charAt(0) == '/') {    sb=new StringBuilder();    sb.append('\\');  }  for (int i=0; i < n; ++i) {    char ch=s.charAt(i);    if (ch == '\\') {      ++i;    } else     if (ch == open) {      if (lOpen == -1) {        lOpen=i;        lOpenInSb=-1;      } else {        if (sb == null) {          sb=new StringBuilder();        }        if (lOpenInSb == -1) {          lOpenInSb=lOpen + sb.length() - pos;        }        sb.append(s,pos,i).append('\\');        pos=i;      }    } else     if (ch == close) {      lOpen=-1;    }  }  if (lOpen != -1) {    if (sb == null) {      sb=new StringBuilder();    }    if (lOpenInSb != -1) {      sb.insert(lOpenInSb,'\\');    } else {      sb.append(s,pos,lOpen);      sb.append('\\');      pos=lOpen;    }  } else   if (sb == null) {    return s;  }  sb.append(s,pos,n);  return sb.toString();}  }
class C{  public static Object create(String className,Properties properties){  return create(className,(Object[])null,null,properties);}  }
class C{  public void error(SAXParseException e) throws SAXException {  javax.xml.transform.ErrorListener errorListener=m_transformer.getErrorListener();  if (errorListener instanceof ErrorHandler) {    ((ErrorHandler)errorListener).error(e);    if (null != m_errorHandler)     m_errorHandler.error(e);  } else {    try {      errorListener.error(new javax.xml.transform.TransformerException(e));      if (null != m_errorHandler)       m_errorHandler.error(e);    } catch (    javax.xml.transform.TransformerException te) {      throw e;    }  }}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  MatrixSeriesCollection clone=(MatrixSeriesCollection)super.clone();  clone.seriesList=(List)ObjectUtilities.deepClone(this.seriesList);  return clone;}  }
class C{  private void showContactAsBarcode(Uri contactUri){  Log.i(TAG,"Showing contact URI as barcode: " + contactUri);  if (contactUri == null) {    return;  }  ContentResolver resolver=getContentResolver();  Bundle bundle=new Bundle();  Cursor cursor;  try {    cursor=resolver.query(contactUri,null,null,null,null);  } catch (  IllegalArgumentException e) {    return;  }  if (cursor == null) {    return;  }  String id;  String name;  boolean hasPhone;  try {    if (!cursor.moveToFirst()) {      return;    }    id=cursor.getString(cursor.getColumnIndex(BaseColumns._ID));    name=cursor.getString(cursor.getColumnIndex(ContactsContract.Contacts.DISPLAY_NAME));    hasPhone=cursor.getInt(cursor.getColumnIndex(ContactsContract.Contacts.HAS_PHONE_NUMBER)) > 0;  }  finally {    cursor.close();  }  if (name != null && name.length() > 0) {    bundle.putString(ContactsContract.Intents.Insert.NAME,massageContactData(name));  }  if (hasPhone) {    Cursor phonesCursor=resolver.query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + '=' + id,null,null);    if (phonesCursor != null) {      try {        int foundPhone=0;        int phonesNumberColumn=phonesCursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER);        while (phonesCursor.moveToNext() && foundPhone < Contents.PHONE_KEYS.length) {          String number=phonesCursor.getString(phonesNumberColumn);          if (number != null && number.length() > 0) {            bundle.putString(Contents.PHONE_KEYS[foundPhone],massageContactData(number));          }          foundPhone++;        }      }  finally {        phonesCursor.close();      }    }  }  Cursor methodsCursor=resolver.query(ContactsContract.CommonDataKinds.StructuredPostal.CONTENT_URI,null,ContactsContract.CommonDataKinds.StructuredPostal.CONTACT_ID + '=' + id,null,null);  if (methodsCursor != null) {    try {      if (methodsCursor.moveToNext()) {        String data=methodsCursor.getString(methodsCursor.getColumnIndex(ContactsContract.CommonDataKinds.StructuredPostal.FORMATTED_ADDRESS));        if (data != null && data.length() > 0) {          bundle.putString(ContactsContract.Intents.Insert.POSTAL,massageContactData(data));        }      }    }  finally {      methodsCursor.close();    }  }  Cursor emailCursor=resolver.query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.CONTACT_ID + '=' + id,null,null);  if (emailCursor != null) {    try {      int foundEmail=0;      int emailColumn=emailCursor.getColumnIndex(ContactsContract.CommonDataKinds.Email.DATA);      while (emailCursor.moveToNext() && foundEmail < Contents.EMAIL_KEYS.length) {        String email=emailCursor.getString(emailColumn);        if (email != null && email.length() > 0) {          bundle.putString(Contents.EMAIL_KEYS[foundEmail],massageContactData(email));        }        foundEmail++;      }    }  finally {      emailCursor.close();    }  }  Intent intent=new Intent(Intents.Encode.ACTION);  intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET);  intent.putExtra(Intents.Encode.TYPE,Contents.Type.CONTACT);  intent.putExtra(Intents.Encode.DATA,bundle);  intent.putExtra(Intents.Encode.FORMAT,BarcodeFormat.QR_CODE.toString());  Log.i(TAG,"Sending bundle for encoding: " + bundle);  startActivity(intent);}  }
class C{  private String validateProduct(MProduct product){  if (!product.isBOM())   return product.getName() + " @NotValid@ @M_BOM_ID@";  m_product=product;  log.config(m_product.getName());  m_products=new ArrayList<MProduct>();  if (!validateOldProduct(m_product)) {    m_product.setIsVerified(false);    m_product.saveEx();    return m_product.getName() + " @NotValid@";  }  MBOM[] boms=MBOM.getOfProduct(getCtx(),p_M_Product_ID,get_TrxName(),null);  for (int i=0; i < boms.length; i++) {    m_products=new ArrayList<MProduct>();    if (!validateBOM(boms[i])) {      m_product.setIsVerified(false);      m_product.saveEx();      return m_product.getName() + " " + boms[i].getName()+ " @NotValid@";    }  }  m_product.setIsVerified(true);  m_product.saveEx();  return m_product.getName() + " @IsValid@";}  }
class C{  public SignalServiceGroup(byte[] groupId){  this(Type.DELIVER,groupId,null,null,null);}  }
class C{  @Override public void run(){  amIActive=true;  String shapefile=null;  String inputFieldsString=null;  String[] fieldNames=null;  double z;  int numFields;  int progress=0;  int lastProgress=0;  int row;  int a, i, j;  double[] fieldAverages;  double[] fieldTotals;  boolean standardizedPCA=false;  int numberOfComponentsOutput=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFieldsString=args[0];  standardizedPCA=Boolean.parseBoolean(args[1]);  if (args[2].toLowerCase().contains("not")) {    numberOfComponentsOutput=0;  } else {    numberOfComponentsOutput=Integer.parseInt(args[2]);  }  try {    String[] inputs=inputFieldsString.split(";");    shapefile=inputs[0];    numFields=inputs.length - 1;    fieldNames=new String[numFields];    System.arraycopy(inputs,1,fieldNames,0,numFields);    AttributeTable table=new AttributeTable(shapefile.replace(".shp",".dbf"));    int numRecs=table.getNumberOfRecords();    DBFField[] fields=table.getAllFields();    ArrayList<Integer> PCAFields=new ArrayList<>();    for (j=0; j < fieldNames.length; j++) {      for (i=0; i < fields.length; i++) {        if (fields[i].getName().equals(fieldNames[j]) && (fields[i].getDataType() == DBFField.DBFDataType.NUMERIC || fields[i].getDataType() == DBFField.DBFDataType.FLOAT)) {          PCAFields.add(i);        }      }    }    if (numFields != PCAFields.size()) {      showFeedback("Not all of the specified database fields were found in the file or " + "a field of a non-numerical type was selected.");      return;    }    double[][] fieldArray=new double[numRecs][numFields];    Object[] rec;    for (i=0; i < numRecs; i++) {      rec=table.getRecord(i);      for (j=0; j < numFields; j++) {        fieldArray[i][j]=(Double)(rec[PCAFields.get(j)]);      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * i / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Reading data:",progress);      }      lastProgress=progress;    }    fieldAverages=new double[numFields];    fieldTotals=new double[numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotals[i]+=fieldArray[row][i];      }    }    for (i=0; i < numFields; i++) {      fieldAverages[i]=fieldTotals[i] / numRecs;    }    double[] fieldTotalDeviation=new double[numFields];    double[][] covariances=new double[numFields][numFields];    double[][] correlationMatrix=new double[numFields][numFields];    for (row=0; row < numRecs; row++) {      for (i=0; i < numFields; i++) {        fieldTotalDeviation[i]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][i] - fieldAverages[i]);        for (a=0; a < numFields; a++) {          covariances[i][a]+=(fieldArray[row][i] - fieldAverages[i]) * (fieldArray[row][a] - fieldAverages[a]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (numRecs - 1));      if (progress != lastProgress) {        updateProgress("Calculating covariances:",progress);      }      lastProgress=progress;    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        correlationMatrix[i][a]=covariances[i][a] / (Math.sqrt(fieldTotalDeviation[i] * fieldTotalDeviation[a]));      }    }    for (i=0; i < numFields; i++) {      for (a=0; a < numFields; a++) {        covariances[i][a]=covariances[i][a] / (numRecs - 1);      }    }    Matrix cov=null;    if (!standardizedPCA) {      cov=new Matrix(covariances);    } else {      cov=new Matrix(correlationMatrix);    }    EigenvalueDecomposition eigen=cov.eig();    double[] eigenvalues;    Matrix eigenvectors;    SortedSet<PrincipalComponent> principalComponents;    eigenvalues=eigen.getRealEigenvalues();    eigenvectors=eigen.getV();    double[][] vecs=eigenvectors.getArray();    int numComponents=eigenvectors.getColumnDimension();    principalComponents=new TreeSet<PrincipalComponent>();    for (i=0; i < numComponents; i++) {      double[] eigenvector=new double[numComponents];      for (j=0; j < numComponents; j++) {        eigenvector[j]=vecs[j][i];      }      principalComponents.add(new PrincipalComponent(eigenvalues[i],eigenvector));    }    double totalEigenvalue=0;    for (i=0; i < numComponents; i++) {      totalEigenvalue+=eigenvalues[i];    }    double[][] explainedVarianceArray=new double[numComponents][2];    j=0;    for (    PrincipalComponent pc : principalComponents) {      explainedVarianceArray[j][0]=pc.eigenValue / totalEigenvalue * 100.0;      if (j == 0) {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0];      } else {        explainedVarianceArray[j][1]=explainedVarianceArray[j][0] + explainedVarianceArray[j - 1][1];      }      j++;    }    DecimalFormat df1=new DecimalFormat("0.00");    DecimalFormat df2=new DecimalFormat("0.0000");    DecimalFormat df3=new DecimalFormat("0.000000");    DecimalFormat df4=new DecimalFormat("0.000");    String ret="Principal Component Analysis Report:\n\n";    ret+="Component\tExplained Var.\tCum. %\tEigenvalue\tEigenvector\n";    j=0;    for (    PrincipalComponent pc : principalComponents) {      String explainedVariance=df1.format(explainedVarianceArray[j][0]);      String explainedCumVariance=df1.format(explainedVarianceArray[j][1]);      double[] eigenvector=pc.eigenVector.clone();      ret+=(j + 1) + "\t" + explainedVariance+ "\t"+ explainedCumVariance+ "\t"+ df2.format(pc.eigenValue)+ "\t";      String eigenvec="[";      for (i=0; i < numComponents; i++) {        if (i < numComponents - 1) {          eigenvec+=df3.format(eigenvector[i]) + ", ";        } else {          eigenvec+=df3.format(eigenvector[i]);        }      }      eigenvec+="]";      ret+=eigenvec + "\n";      if (j < numberOfComponentsOutput) {        DBFField field=new DBFField();        field=new DBFField();        field.setName("COMP" + (j + 1));        field.setDataType(DBFField.DBFDataType.NUMERIC);        field.setFieldLength(10);        field.setDecimalCount(4);        table.addField(field);        for (row=0; row < numRecs; row++) {          z=0;          for (i=0; i < numFields; i++) {            z+=fieldArray[row][i] * eigenvector[i];          }          Object[] recData=table.getRecord(row);          recData[recData.length - 1]=new Double(z);          table.updateRecord(row,recData);          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (numRecs - 1));          if (progress != lastProgress) {            updateProgress("Outputing Component " + (j + 1) + ":",progress);          }          lastProgress=progress;        }      }      j++;    }    ret+="\nFactor Loadings:\n";    ret+="\t\tComponent\n\t";    for (i=0; i < numComponents; i++) {      ret+=(i + 1) + "\t";    }    ret+="\n";    double loading=0;    if (!standardizedPCA) {      for (i=0; i < numFields; i++) {        ret+="field " + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev)) / Math.sqrt(covariances[i][i]);          ret+=df4.format(loading) + "\t";        }        ret+="\n";      }    } else {      for (i=0; i < numFields; i++) {        ret+="field " + (i + 1) + "\t";        for (        PrincipalComponent pc : principalComponents) {          double[] eigenvector=pc.eigenVector.clone();          double ev=pc.eigenValue;          loading=(eigenvector[i] * Math.sqrt(ev));          ret+=df4.format(loading) + "\t";        }        ret+="\n";      }    }    ret+="\n";    for (i=0; i < numFields; i++) {      ret+="field " + (i + 1) + "\t"+ fieldNames[i]+ "\n";    }    returnData(ret);    if (numberOfComponentsOutput > 0) {      returnData(table.getFileName());    }    ScreePlot plot=new ScreePlot(explainedVarianceArray);    returnData(plot);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static void main(String[] args){  ScriptingPanel.showPanel(new SimpleCLIPanel(),args,600,500);}  }
class C{  public void addRelationshipAccessor(RelationshipAccessor accessor){  getProject().addRelationshipAccessor(accessor);  if (accessor.isManyToMany()) {    if (accessor.hasMappedBy()) {      String referenceClassName=accessor.getReferenceClassName();      if (!m_biDirectionalManyToManyAccessors.containsKey(referenceClassName)) {        m_biDirectionalManyToManyAccessors.put(referenceClassName,new HashMap<String,MetadataAccessor>());      }      m_biDirectionalManyToManyAccessors.get(referenceClassName).put(accessor.getMappedBy(),accessor);    }  }}  }
class C{  @Override protected void onRestart(){  super.onRestart();  Log.d(TAG,"onRestart() - the activity is about to be restarted()");}  }
class C{  private ViewAnimationUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  @Override public Dimension preferredLayoutSize(Container target){  return layoutSize(target,true);}  }
class C{  public Quaterniond rotationY(double angle){  double cos=Math.cos(angle * 0.5);  double sin=Math.sin(angle * 0.5);  w=cos;  x=0.0;  y=sin;  z=0.0;  return this;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  return true;}  }
class C{  public static void flush(){  clearBuffer();  try {    out.flush();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void addThemeRefreshListener(ActionListener l){  if (themelisteners == null) {    themelisteners=new EventDispatcher();  }  themelisteners.addListener(l);}  }
class C{  public UserConfig create(UserConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/create-user",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    UserConfig user=new UserConfig();    user.parseXML(root);    this.user=user;    return user;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  void preValueChangeEvent(ASTNode node,SimplePropertyDescriptor property){synchronized (this.internalASTLock) {    if (this.disableEvents > 0) {      return;    } else {      disableEvents();    }  }  try {    this.eventHandler.preValueChangeEvent(node,property);  }  finally {    reenableEvents();  }}  }
class C{  public int length(){  return _length;}  }
class C{  final boolean isWaiting(final Cache cache){  return (isRunning() && (cache.getDistributedSystem().isConnected() || cache.isReconnecting()));}  }
class C{  private void harvest(final Iterator<CandidateHarvesterSetElement> harvesters,final List<Component> components,ExecutorService executorService,final TrickleCallback trickleCallback){  Map<CandidateHarvesterSetTask,Future<?>> tasks=new HashMap<>();  while (true) {    CandidateHarvesterSetElement harvester;synchronized (harvesters) {      if (harvesters.hasNext())       harvester=harvesters.next(); else       break;    }    if (!harvester.isEnabled())     continue;    List<Component> componentsCopy;synchronized (components) {      componentsCopy=new ArrayList<>(components);    }    CandidateHarvesterSetTask task=new CandidateHarvesterSetTask(harvester,componentsCopy,trickleCallback);    tasks.put(task,executorService.submit(task));  }  Iterator<Map.Entry<CandidateHarvesterSetTask,Future<?>>> taskIter=tasks.entrySet().iterator();  while (taskIter.hasNext()) {    Map.Entry<CandidateHarvesterSetTask,Future<?>> task=taskIter.next();    Future<?> future=task.getValue();    do {      try {        future.get();        break;      } catch (      CancellationException ce) {        logger.info("harvester cancelled");        break;      }catch (      ExecutionException ee) {        CandidateHarvesterSetElement harvester=task.getKey().getHarvester();        logger.info("disabling harvester " + harvester.getHarvester() + " due to ExecutionException: "+ ee.getLocalizedMessage());        if (harvester != null)         harvester.setEnabled(false);        break;      }catch (      InterruptedException ie) {      }    } while (true);    taskIter.remove();  }}  }
class C{  public void addTable(Table table){  tables.add(table);}  }
class C{  public ProjectExample(ProjectObject sample){  oredCriteria=new ArrayList<Criteria>();  Criteria criteria=this.or();  if (sample.getCompanyId() != null) {    criteria.andCompanyIdEqualTo(sample.getCompanyId());  }  if (sample.getName() != null) {    criteria.andNameEqualTo(sample.getName());  }  if (sample.getDescription() != null) {    criteria.andDescriptionEqualTo(sample.getDescription());  }  if (sample.getArchived() != null) {    criteria.andArchivedEqualTo(sample.getArchived());  }  if (sample.getCreatorId() != null) {    criteria.andCreatorIdEqualTo(sample.getCreatorId());  }  if (sample.getDeleted() != null) {    criteria.andDeletedEqualTo(sample.getDeleted());  }  if (sample.getCreated() != null) {    criteria.andCreatedEqualTo(sample.getCreated());  }  if (sample.getUpdated() != null) {    criteria.andUpdatedEqualTo(sample.getUpdated());  }  if (sample.getColorId() != null) {    criteria.andColorIdEqualTo(sample.getColorId());  }  if (sample.getCreatorName() != null) {    criteria.andCreatorNameEqualTo(sample.getCreatorName());  }  if (sample.getCreatorAvatar() != null) {    criteria.andCreatorAvatarEqualTo(sample.getCreatorAvatar());  }}  }
class C{  public static int dialogUnitXAsPixel(int dluX,Component component){  return dluX == 0 ? 0 : getUnitConverter().dialogUnitXAsPixel(dluX,component);}  }
class C{  public boolean isBasePackage(){  return isBasePackage;}  }
class C{  private Page loadPhysical(PageContext pc,Page page) throws TemplateException {  if (!mapping.hasPhysical())   return null;  ConfigWeb config=pc.getConfig();  PageContextImpl pci=(PageContextImpl)pc;  if ((mapping.getInspectTemplate() == Config.INSPECT_NEVER || pci.isTrusted(page)) && isLoad(LOAD_PHYSICAL))   return page;  Resource srcFile=getPhyscalFile();  long srcLastModified=srcFile.lastModified();  if (srcLastModified == 0L)   return null;  if (page != null) {    if (srcLastModified != page.getSourceLastModified()) {      this.page=page=compile(config,mapping.getClassRootDirectory(),page,false,pc.ignoreScopes());      page.setPageSource(this);      page.setLoadType(LOAD_PHYSICAL);    }  } else {    Resource classRootDir=mapping.getClassRootDirectory();    Resource classFile=classRootDir.getRealResource(getJavaName() + ".class");    boolean isNew=false;    if (flush || !classFile.exists()) {      this.page=page=compile(config,classRootDir,null,false,pc.ignoreScopes());      flush=false;      isNew=true;    } else {      try {        this.page=page=newInstance(mapping.getPhysicalClass(this.getClassName()));      } catch (      Throwable t) {        t.printStackTrace();        this.page=page=null;      }      if (page == null)       this.page=page=compile(config,classRootDir,null,false,pc.ignoreScopes());    }    if (!isNew && (srcLastModified != page.getSourceLastModified() || page.getVersion() != pc.getConfig().getFactory().getEngine().getInfo().getFullVersionInfo())) {      isNew=true;      this.page=page=compile(config,classRootDir,page,false,pc.ignoreScopes());    }    page.setPageSource(this);    page.setLoadType(LOAD_PHYSICAL);  }  pci.setPageUsed(page);  return page;}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public Class<K> keyType(){  return keyType;}  }
class C{  @Action(value="/receipts/collectionsWorkflow-submissionReportCash") public String submissionReportCash(){  return SUBMISSION_REPORT_CASH;}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  private DiffPart decodeReplace(final int blockSize_S,final int blockSize_E,final int blockSize_L) throws UnsupportedEncodingException, DecodingException {  if (blockSize_S < 1 || blockSize_E < 1 || blockSize_L < 1) {    throw new DecodingException("Invalid value for blockSize_S: " + blockSize_S + ", blockSize_E: "+ blockSize_E+ " or blockSize_L: "+ blockSize_L);  }  int s=r.read(blockSize_S);  int e=r.read(blockSize_E);  int l=r.read(blockSize_L);  ByteArrayOutputStream output=new ByteArrayOutputStream();  for (int i=0; i < l; i++) {    output.write(r.readByte());  }  DiffPart part=new DiffPart(DiffAction.REPLACE);  part.setStart(s);  part.setLength(e);  part.setText(output.toString(WIKIPEDIA_ENCODING));  return part;}  }
class C{  public HashMap<String,DataService_Definition> addDataService(DataService_Definition dataServiceDefinition){  this.listDataServiceDefinition.put(dataServiceDefinition.getName(),dataServiceDefinition);  return this.listDataServiceDefinition;}  }
class C{  public URL url(){  return this.url;}  }
class C{  int size(){  return Integer.bitCount(set);}  }
class C{  protected int retrieveIdentifierEndPosition(int start,int end){  this.scanner.resetTo(start,end);  try {    int token;    while ((token=this.scanner.getNextToken()) != TerminalTokens.TokenNameEOF) {switch (token) {case TerminalTokens.TokenNameIdentifier:        return this.scanner.getCurrentTokenEndPosition();    }  }} catch (InvalidInputException e) {}return -1;}  }
class C{  public InvalidAttributeIdentifierException(){  super();}  }
class C{  public static void addChemicalInjectionChamberRecipe(ItemStack input,String gasName,ItemStack output){  try {    Class recipeClass=Class.forName("mekanism.common.recipe.RecipeHandler");    Method m=recipeClass.getMethod("addChemicalInjectionChamberRecipe",ItemStack.class,String.class,ItemStack.class);    m.invoke(null,input,gasName,output);  } catch (  Exception e) {    System.err.println("Error while adding recipe: " + e.getMessage());  }}  }
class C{  public static final String mostCommonCombination(Instances D){  return mostCommonCombination(D,D.classIndex());}  }
class C{  RbrTableChangeSet(OneRowChange oneRowChange){  this.oneRowChange=oneRowChange;}  }
class C{  public int size(){  return _pos;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public ExpressionVisitor incrementQueryLevel(int offset){  return new ExpressionVisitor(type,queryLevel + offset,dependencies,columns,aggregates,table,resolver);}  }
class C{  public void addHeader(@NonNull View view){  if (view == null) {    throw new IllegalArgumentException("You can't have a null header!");  }  mHeaders.add(view);}  }
class C{  public static void revealEditText(EditText text){  int cx=text.getRight() - 30;  int cy=text.getBottom() - 60;  int finalRadius=Math.max(text.getWidth(),text.getHeight());  Animator anim=ViewAnimationUtils.createCircularReveal(text,cx,cy,0,finalRadius);  text.setVisibility(View.VISIBLE);  anim.start();}  }
class C{  private void rehash(){  java.util.Set<Entry<K,V>> set=entrySet();  capacity<<=1;  size=0;  table.clear();  for (int i=0; i < capacity; i++)   table.add(null);  for (  Entry<K,V> entry : set) {    put(entry.getKey(),entry.getValue());  }}  }
class C{  protected void insureUniqueness(){}  }
class C{  public RCDoubleMatrix2D(int rows,int columns){  super(null);  try {    setUp(rows,columns);  } catch (  IllegalArgumentException exc) {    if (!"matrix too large".equals(exc.getMessage()))     throw exc;  }  indexes=new IntArrayList();  values=new DoubleArrayList();  starts=new int[rows + 1];}  }
class C{  public void reset(){  myChanges.clear();}  }
class C{  public void addConnection(TileEntity connection,ForgeDirection side){}  }
class C{  private void focusNext(){  final Element current=Elements.getDocument().getActiveElement();  if (current.getParentElement().isEqualNode(listElement)) {    final Element next=current.getNextElementSibling();    if (next != null) {      next.focus();    } else {      focusFirst();    }  } else {    focusFirst();  }}  }
class C{  public BitVector partFromTo(int from,int to){  if (nbits == 0 || to == from - 1)   return new BitVector(0);  checkRangeFromTo(from,to,nbits);  int width=to - from + 1;  BitVector part=new BitVector(width);  part.replaceFromToWith(0,width - 1,this,from);  return part;}  }
class C{  @SuppressWarnings("unchecked") public PseudoFunctionSelector(String functionName,String expression){  super(Type.PSEUDO_FUNCTION);  this.pseudoFunction=(PseudoFunction<E>)lookupPseudoFunction(functionName.trim());  this.expression=expression;  this.parsedExpression=pseudoFunction.parseExpression(expression);}  }
class C{  public PlanMutateTimeAllocationSimplified(final double mutationRange,boolean affectingDuration,final Random random){  this(EmptyStageActivityTypes.INSTANCE,mutationRange,affectingDuration,random);}  }
class C{  long selectCount(Connection c,String tableName) throws PalantirSqlException, PalantirInterruptedException {  return selectCount(c,tableName,null,new Object[]{});}  }
class C{  @Override public Integer batchInsert(List<Map<String,Object>> datas,String tabNameSuffix){  if (logger.isDebugEnabled()) {    logger.debug("batchInsert(List<Map<String,Object>>, String) - start");  }  validate(datas);  Map<String,Object> cols=this.merge(datas);  Integer returnInteger=batchInsert(new ArrayList(cols.keySet()),datas,tabNameSuffix);  if (logger.isDebugEnabled()) {    logger.debug("batchInsert(List<Map<String,Object>>, String) - end");  }  return returnInteger;}  }
class C{  public boolean isReliable(){  return false;}  }
class C{  public boolean canBeCollidedWith(){  return !this.isDead;}  }
class C{  private void processPendingText(boolean ignorable) throws SAXException {  if (ignorable && text.toString().trim().length() == 0)   ; else   currentHandler.text(text.toString());  if (text.length() > 1024)   text=new StringBuffer(); else   text.setLength(0);}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public CzechAnalyzer(CharArraySet stopwords){  this(stopwords,CharArraySet.EMPTY_SET);}  }
class C{  private List<VNXFileSystem> processFilesystemList(List<Object> filesystemList,Map<String,Object> keyMap) throws VNXFilePluginException {  Iterator<Object> iterator=filesystemList.iterator();  List<VNXFileSystem> processedFileSystem=new ArrayList<VNXFileSystem>();  if (iterator.hasNext()) {    Status status=(Status)iterator.next();    if ((status.getMaxSeverity() == Severity.OK) || (status.getMaxSeverity() == Severity.WARNING)) {      Map<String,FileSystem> fileSystems=new HashMap<String,FileSystem>();      Map<String,FileSystemCapacityInfo> fileSysCapacityInfos=new HashMap<String,FileSystemCapacityInfo>();      while (iterator.hasNext()) {        Object obj=iterator.next();        if (obj instanceof FileSystem) {          FileSystem fs=(FileSystem)obj;          if (fs.isInternalUse() == false) {            fileSystems.put(fs.getFileSystem(),fs);          }        } else         if (obj instanceof FileSystemCapacityInfo) {          FileSystemCapacityInfo fsCapacityInfo=(FileSystemCapacityInfo)obj;          fileSysCapacityInfos.put(fsCapacityInfo.getFileSystem(),fsCapacityInfo);        }      }      Iterator it=fileSystems.keySet().iterator();      while (it.hasNext()) {        String fsId=(String)it.next();        FileSystem fileSystem=fileSystems.get(fsId);        FileSystemCapacityInfo fsCapacity=fileSysCapacityInfos.get(fsId);        List<String> pools=new ArrayList<String>();        if (null != fileSystem.getStoragePools()) {          pools=fileSystem.getStoragePools();        }        String poolId="";        if (null != pools) {          poolId=pools.get(0);        }        StringBuffer debugInfo=new StringBuffer();        debugInfo.append("VNXFileSystem : " + fileSystem.getName());        debugInfo.append(" Pool : " + poolId);        VNXFileSystem vnxFS=new VNXFileSystem(fileSystem.getName(),Integer.valueOf(fileSystem.getFileSystem()));        if (fileSystem.isVirtualProvisioning()) {          vnxFS.setType(UnManagedDiscoveredObject.SupportedProvisioningType.THIN.name());        } else {          vnxFS.setType(UnManagedDiscoveredObject.SupportedProvisioningType.THICK.name());        }        vnxFS.setStoragePool(poolId);        debugInfo.append(" fsCapacity.getVolumeSize() : " + fsCapacity.getVolumeSize());        long totalCapacity=fsCapacity.getVolumeSize() * MBTOBYTECONVERTER;        vnxFS.setTotalCapacity(totalCapacity + "");        vnxFS.setUsedCapcity("0");        if (null != fsCapacity.getResourceUsage()) {          debugInfo.append(" fsCapacity.getUsedCapacity:" + fsCapacity.getResourceUsage().getSpaceUsed());          long usedCapacity=fsCapacity.getResourceUsage().getSpaceUsed() * MBTOBYTECONVERTER;          vnxFS.setUsedCapcity(usedCapacity + "");        }        debugInfo.append(" Total Capacity :" + vnxFS.getTotalCapacity());        debugInfo.append(" Used Capacity :" + vnxFS.getUsedCapacity());        _logger.debug(debugInfo.toString());        processedFileSystem.add(vnxFS);      }    } else {      throw new com.emc.storageos.plugins.metering.vnxfile.VNXFilePluginException("Fault response received from XMLAPI Server.",VNXFilePluginException.ERRORCODE_INVALID_RESPONSE);    }  }  return processedFileSystem;}  }
class C{  public synchronized String context(){  return m_Current.context;}  }
class C{  private static double[] coord(double min,double max,double resolution){  double[] coord=new double[(int)((max - min) / resolution) + 1];  coord[0]=min;  for (int i=1; i < coord.length; i++) {    coord[i]=min + i * resolution;  }  return coord;}  }
class C{  public void run(Runnable runnable){  if (!Raptor.getInstance().isDisposed() && !isDisposed) {    try {      executor.execute(new RunnableExceptionDecorator(runnable));    } catch (    RejectedExecutionException rej) {      if (!Raptor.getInstance().isDisposed()) {        LOG.error("Error executing runnable: ",rej);        threadDump();        Raptor.getInstance().onError("ThreadServie has no more threads. A thread dump can be found at " + THREAD_DUMP_FILE_PATH,rej);      }    }  } else {    LOG.info("Vetoing runnable in ThreadService, raptor is disposed. " + runnable);  }}  }
class C{  public final boolean removeShare(String shareName){  Iterator<VFSShare> it=shares.iterator();  while (it.hasNext()) {    VFSShare cur=it.next();    if (cur.getShareName().equals(shareName)) {      try {        AbstractObfuscatorFactory.getFactory(FileObfuscatorFactory.class).removeInstance(cur.getObfuscator());      } catch (      ClassNotFoundException|InstantiationException|IllegalAccessException|ObfuscationException e) {        logger.error("Unable to remove obfuscator instance for share " + cur.getShareName(),e);      }      it.remove();      return true;    }  }  return false;}  }
class C{  private static final PrivateKey constructPrivateKey(byte[] encodedKey,String encodedKeyAlgorithm) throws InvalidKeyException, NoSuchAlgorithmException {  try {    KeyFactory keyFactory=KeyFactory.getInstance(encodedKeyAlgorithm);    PKCS8EncodedKeySpec keySpec=new PKCS8EncodedKeySpec(encodedKey);    return keyFactory.generatePrivate(keySpec);  } catch (  NoSuchAlgorithmException nsae) {    throw new NoSuchAlgorithmException("No installed providers " + "can create keys for the " + encodedKeyAlgorithm + "algorithm",nsae);  }catch (  InvalidKeySpecException ike) {    throw new InvalidKeyException("Cannot construct private key",ike);  }}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public static int rotateRight(int i,int distance){  if (distance == 0) {    return i;  }  return ((i >>> distance) | (i << (-distance)));}  }
class C{  public void write(char c) throws IOException {  if (_output == null)   throw new IOException("Writer closed");  _output.append(c);}  }
class C{  public List<Integer> emit(String streamId,List<Object> tuple){  return emit(streamId,tuple,null);}  }
class C{  public String toString(boolean reverse,Hashtable oidSymbols){  StringBuffer buf=new StringBuffer();  Vector components=new Vector();  boolean first=true;  StringBuffer ava=null;  for (int i=0; i < ordering.size(); i++) {    if (((Boolean)added.elementAt(i)).booleanValue()) {      ava.append('+');      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));    } else {      ava=new StringBuffer();      appendValue(ava,oidSymbols,(ASN1ObjectIdentifier)ordering.elementAt(i),(String)values.elementAt(i));      components.addElement(ava);    }  }  if (reverse) {    for (int i=components.size() - 1; i >= 0; i--) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  } else {    for (int i=0; i < components.size(); i++) {      if (first) {        first=false;      } else {        buf.append(',');      }      buf.append(components.elementAt(i).toString());    }  }  return buf.toString();}  }
class C{  public static <O>SQLParser<O> forPojoWithAttributes(Class<O> pojoClass,Map<String,? extends Attribute<O,?>> attributes){  SQLParser<O> parser=forPojo(pojoClass);  parser.registerAttributes(attributes);  return parser;}  }
class C{  private void updateTextArea(final String text,final int which){  if (which == STD_OUT) {    originalOut.append(text);  } else   if (which == STD_ERR) {    originalErr.append(text);  }  console.append(text);  jmri.util.ThreadingUtil.runOnGUIEventually(null);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  static public int nextPowerOfTwo(int value){  if (value == 0)   return 1;  value--;  value|=value >> 1;  value|=value >> 2;  value|=value >> 4;  value|=value >> 8;  value|=value >> 16;  return value + 1;}  }
class C{  public static long[] interleaveBits(long[] coords,int iter){  final int numdim=coords.length;  final long[] bitset=BitsUtil.zero(numdim);  final long mask=1L << 63 - iter;  for (int dim=0; dim < numdim; dim++) {    if ((coords[dim] & mask) != 0) {      BitsUtil.setI(bitset,dim);    }  }  return bitset;}  }
class C{  @Override protected void process(DistributionManager dm){  SearchLoadAndWriteProcessor processor=null;  processor=(SearchLoadAndWriteProcessor)getProcessorKeeper().retrieve(processorId);  if (processor == null) {    if (logger.isDebugEnabled()) {      logger.debug("NetWriteReplyMessage() SearchLoadAndWriteProcessor no longer exists");    }    return;  }  processor.incomingNetWriteReply(this.netWriteSucceeded,this.e,this.cacheWriterException);}  }
class C{  private void deleteData(final FluoClient client,final String nodeId){  requireNonNull(client);  requireNonNull(nodeId);  final NodeType type=NodeType.fromNodeId(nodeId).get();  Transaction tx=client.newTransaction();  while (deleteDataBatch(tx,getIterator(tx,nodeId,type.getBsColumn()),type.getBsColumn())) {    tx=client.newTransaction();  }}  }
class C{  @EnsuresQualifiersIf({@EnsuresQualifierIf(result=true,expression="f1",qualifier=Odd.class),@EnsuresQualifierIf(result=false,expression="f1",qualifier=Value.class)}) boolean condsOddF1(boolean b,@Value String p1){  if (b) {    f1=null;    return true;  }  f1=p1;  return false;}  }
class C{  public int storeOffset(long offset) throws IOException {  long fileSize=nioFile.size();  nioFile.writeLong(offset,fileSize);  return (int)(fileSize / ITEM_SIZE);}  }
class C{  public int size(){  return size;}  }
class C{  private List doGetDocumentSetupParticipants(IContentType[] contentTypes){  Set resultSet=new HashSet();  int i=0;  while (i < contentTypes.length) {    Set set=(Set)fSetupParticipantDescriptors.get(new ContentTypeAdapter(contentTypes[i++]));    if (set != null)     resultSet.addAll(set);  }  List participants=new ArrayList();  Iterator e=resultSet.iterator();  while (e.hasNext()) {    IConfigurationElement entry=(IConfigurationElement)e.next();    Object participant=getExtension(entry,fSetupParticipants,IDocumentSetupParticipant.class);    if (participant != null)     participants.add(participant);  }  return participants.isEmpty() ? null : participants;}  }
class C{  public ColorList sortByProximityTo(ReadonlyTColor target,boolean isReversed){  return sortByProximityTo(target,new RGBDistanceProxy(),isReversed);}  }
class C{  protected Entry nextEntry(){  if (modCount != expectedModCount)   throw new ConcurrentModificationException();  if (nextKey == null && !hasNext())   throw new NoSuchElementException();  lastReturned=entry;  entry=entry.next;  currentKey=nextKey;  nextKey=null;  return lastReturned;}  }
class C{  public void spawnNow(){  if (creatures.size() < maximum) {    SingletonRepository.getTurnNotifier().dontNotify(this);    onTurnReached(0);  }}  }
class C{  public void endGetSend(long startTime,boolean failed){  long duration=getStatTime() - startTime;  endClientOpSend(duration,failed);  this.sendStats.incInt(getSendInProgressId,-1);  int endGetSendId;  if (failed) {    endGetSendId=getSendFailedId;  } else {    endGetSendId=getSendId;  }  this.sendStats.incInt(endGetSendId,1);  this.stats.incLong(getSendDurationId,duration);}  }
class C{  public BigDecimal optBigDecimal(int index,BigDecimal defaultValue){  try {    return this.getBigDecimal(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public boolean isSOTrx(){  Object oo=get_Value(COLUMNNAME_IsSOTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public ResourceNotificationException(String message,Throwable cause){  super(message,cause);}  }
class C{  private GridResourceUtils(){}  }
class C{  public long totalSize(){  return totalSize;}  }
class C{  public void detach(){  if (m_allowDetach) {    super.detach();    m_exprObj.detach();    m_exprObj=null;  }}  }
class C{  public void addService(PluginEntry entry){  this.entryMap.put(entry.service,entry);  if (entry.plugin != null) {    entry.plugin.privateInitialize(entry.service,ctx,app,app.getPreferences());    pluginMap.put(entry.service,entry.plugin);  }}  }
class C{  public boolean addVelocimacro(String name,Node macro,String argArray[],String sourceTemplate){  return vmFactory.addVelocimacro(name,macro,argArray,sourceTemplate);}  }
class C{  public SFTPv3FileHandle openFileRO(String fileName) throws IOException {  return openFile(fileName,0x00000001,null);}  }
class C{  protected byte reportReturn(String methodCall,byte value){  reportAllReturns(methodCall,"" + value);  return value;}  }
class C{  public void testStartStopSco(){  int iterations=BluetoothTestRunner.sStartStopScoIterations;  if (iterations == 0) {    return;  }  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();  BluetoothDevice device=adapter.getRemoteDevice(BluetoothTestRunner.sDeviceAddress);  mTestUtils.disable(adapter);  mTestUtils.enable(adapter);  mTestUtils.unpair(adapter,device);  mTestUtils.pair(adapter,device,BluetoothTestRunner.sDevicePairPasskey,BluetoothTestRunner.sDevicePairPin);  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.HEADSET,null);  mTestUtils.connectProfile(adapter,device,BluetoothProfile.HEADSET,null);  mTestUtils.stopSco(adapter,device);  for (int i=0; i < iterations; i++) {    mTestUtils.writeOutput("startStopSco iteration " + (i + 1) + " of "+ iterations);    mTestUtils.startSco(adapter,device);    sleep(SCO_SLEEP_TIME);    mTestUtils.stopSco(adapter,device);    sleep(SCO_SLEEP_TIME);  }  mTestUtils.disconnectProfile(adapter,device,BluetoothProfile.HEADSET,null);  mTestUtils.unpair(adapter,device);  mTestUtils.disable(adapter);}  }
class C{  public void handleEvent(Event evt){  evt=EventSupport.getUltimateOriginalEvent(evt);  listener.nodeToBeRemoved((Node)evt.getTarget());}  }
class C{  private boolean isEffectsEnabled(){  return context().getSettingsModule().isConversationTonesEnabled();}  }
class C{  public static DoubleArrayList[] split(DoubleArrayList sortedList,DoubleArrayList splitters){  int noOfBins=splitters.size() + 1;  DoubleArrayList[] bins=new DoubleArrayList[noOfBins];  for (int i=noOfBins; --i >= 0; )   bins[i]=new DoubleArrayList();  int listSize=sortedList.size();  int nextStart=0;  int i=0;  while (nextStart < listSize && i < noOfBins - 1) {    double splitValue=splitters.get(i);    int index=sortedList.binarySearch(splitValue);    if (index < 0) {      int insertionPosition=-index - 1;      bins[i].addAllOfFromTo(sortedList,nextStart,insertionPosition - 1);      nextStart=insertionPosition;    } else {      do {        index--;      } while (index >= 0 && sortedList.get(index) == splitValue);      bins[i].addAllOfFromTo(sortedList,nextStart,index);      nextStart=index + 1;    }    i++;  }  bins[noOfBins - 1].addAllOfFromTo(sortedList,nextStart,sortedList.size() - 1);  return bins;}  }
class C{  public LoginScript(ClientFramework client){  this.client=client;}  }
class C{  public Inset(){  super();}  }
class C{  private synchronized void persistProfileAndNotifyChange(AuthnProvider modifiedProvider,boolean newObject){  modifiedProvider.setLastModified(System.currentTimeMillis());  if (newObject) {    _dbClient.createObject(modifiedProvider);  } else {    _dbClient.persistObject(modifiedProvider);  }  notifyChange();}  }
class C{  public Transform match(Class type) throws Exception {  String name=type.getName();  if (name.startsWith("java.lang")) {    return matchLanguage(type);  }  if (name.startsWith("java.util")) {    return matchUtility(type);  }  if (name.startsWith("java.net")) {    return matchURL(type);  }  if (name.startsWith("java.io")) {    return matchFile(type);  }  if (name.startsWith("java.sql")) {    return matchSQL(type);  }  if (name.startsWith("java.math")) {    return matchMath(type);  }  return matchEnum(type);}  }
class C{  @Override public void run(){  amIActive=true;  float progress=0;  String inputHeader=null;  String outputHeader=null;  double range=0;  double sill=0;  double nugget=0;  int numIterations=1000;  boolean fastMode=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      range=Double.parseDouble(args[i]);    } else     if (i == 3) {      numIterations=Integer.parseInt(args[i]);    } else     if (i == 4) {      fastMode=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    int i, j, k, m, n;    int edge1, edge2;    double pnt1x=0, pnt1y=0, pnt2x=0, pnt2y=0;    double z;    int diagonalSize=0;    Random generator=new Random();    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    double noData=image.getNoDataValue();    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    diagonalSize=(int)(Math.sqrt(rows * rows + cols * cols));    int filterHalfSize=(int)(range / (2 * image.getCellSizeX()));    int filterSize=filterHalfSize * 2 + 1;    int[] cellOffsets=new int[filterSize];    for (i=0; i < filterSize; i++) {      cellOffsets[i]=i - filterHalfSize;    }    double w=Math.sqrt(36d / (filterHalfSize * (filterHalfSize + 1) * filterSize));    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,0);    outputFile.setPreferredPalette("blue_white_red.pal");    if (!fastMode) {      updateProgress("Loop 1 of 2: ",0);      for (i=0; i < numIterations; i++) {        double[] T=new double[diagonalSize + 2 * filterHalfSize];        for (j=0; j < diagonalSize; j++) {          T[j]=generator.nextGaussian();        }        double[] y=new double[diagonalSize];        for (j=0; j < diagonalSize; j++) {          z=0;          for (k=0; k < filterSize; k++) {            m=cellOffsets[k];            z+=m * T[j + filterHalfSize + m];          }          y[j]=w * z;        }        edge1=generator.nextInt(4);        edge2=edge1;        do {          edge2=generator.nextInt(4);        } while (edge2 == edge1);switch (edge1) {case 0:          pnt1x=0;        pnt1y=generator.nextDouble() * (rows - 1);      break;case 1:    pnt1x=generator.nextDouble() * (cols - 1);  pnt1y=0;break;case 2:pnt1x=cols - 1;pnt1y=generator.nextDouble() * (rows - 1);break;case 3:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=rows - 1;break;}switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}if (pnt1x == pnt2x || pnt1y == pnt2y) {do {switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}} while (pnt1x == pnt2x || pnt1y == pnt2y);}double lineSlope=(pnt2y - pnt1y) / (pnt2x - pnt1x);double lineIntercept=pnt1y - lineSlope * pnt1x;double perpendicularLineSlope=-1 / lineSlope;double slopeDiff=(lineSlope - perpendicularLineSlope);double perpendicularLineIntercept=0;double intersectingPointX, intersectingPointY;perpendicularLineIntercept=0;double corner1X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner1Y=lineSlope * corner1X - lineIntercept;row=0;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner2X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner2Y=lineSlope * corner2X - lineIntercept;row=rows;col=0;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner3X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner3Y=lineSlope * corner3X - lineIntercept;row=rows;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner4X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner4Y=lineSlope * corner4X - lineIntercept;double lineStartX, lineStartY;lineStartX=corner1X;lineStartY=corner1Y;if (corner2Y < lineStartY) {lineStartX=corner2X;lineStartY=corner2Y;}if (corner3Y < lineStartY) {lineStartX=corner3X;lineStartY=corner3Y;}if (corner4Y < lineStartY) {lineStartX=corner4X;lineStartY=corner4Y;}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {perpendicularLineIntercept=row - perpendicularLineSlope * col;intersectingPointX=(perpendicularLineIntercept - lineIntercept) / slopeDiff;intersectingPointY=lineSlope * intersectingPointX - lineIntercept;int p=(int)(Math.sqrt((intersectingPointX - lineStartX) * (intersectingPointX - lineStartX) + (intersectingPointY - lineStartY) * (intersectingPointY - lineStartY)));if (p < 0) {p=0;}if (p > (diagonalSize - 1)) {p=diagonalSize - 1;}z=outputFile.getValue(row,col) + y[p];outputFile.setValue(row,col,z);}}if (cancelOp) {cancelOperation();return;}progress=(float)(i * 100f / numIterations);updateProgress("Loop 1 of 2: ",(int)progress);}updateProgress("Loop 2 of 2: ",0);double value;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {z=outputFile.getValue(row,col);value=(float)(z / numIterations);outputFile.setValue(row,col,value);}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / rows);updateProgress("Loop 2 of 2: ",(int)progress);}} else {double[][] output=new double[rows][cols];updateProgress("Loop 1 of 2: ",0);for (i=0; i < numIterations; i++) {double[] T=new double[diagonalSize + 2 * filterHalfSize];for (j=0; j < diagonalSize; j++) {T[j]=generator.nextGaussian();}double[] y=new double[diagonalSize];for (j=0; j < diagonalSize; j++) {z=0;for (k=0; k < filterSize; k++) {m=cellOffsets[k];z+=m * T[j + filterHalfSize + m];}y[j]=w * z;}edge1=generator.nextInt(4);edge2=edge1;do {edge2=generator.nextInt(4);} while (edge2 == edge1);switch (edge1) {case 0:pnt1x=0;pnt1y=generator.nextDouble() * (rows - 1);break;case 1:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=0;break;case 2:pnt1x=cols - 1;pnt1y=generator.nextDouble() * (rows - 1);break;case 3:pnt1x=generator.nextDouble() * (cols - 1);pnt1y=rows - 1;break;}switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}if (pnt1x == pnt2x || pnt1y == pnt2y) {do {switch (edge2) {case 0:pnt2x=0;pnt2y=generator.nextDouble() * (rows - 1);break;case 1:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=0;break;case 2:pnt2x=cols - 1;pnt2y=generator.nextDouble() * (rows - 1);break;case 3:pnt2x=generator.nextDouble() * (cols - 1);pnt2y=rows - 1;break;}} while (pnt1x == pnt2x || pnt1y == pnt2y);}double lineSlope=(pnt2y - pnt1y) / (pnt2x - pnt1x);double lineIntercept=pnt1y - lineSlope * pnt1x;double perpendicularLineSlope=-1 / lineSlope;double slopeDiff=(lineSlope - perpendicularLineSlope);double perpendicularLineIntercept=0;double intersectingPointX, intersectingPointY;perpendicularLineIntercept=0;double corner1X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner1Y=lineSlope * corner1X - lineIntercept;row=0;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner2X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner2Y=lineSlope * corner2X - lineIntercept;row=rows;col=0;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner3X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner3Y=lineSlope * corner3X - lineIntercept;row=rows;col=cols;perpendicularLineIntercept=row - perpendicularLineSlope * col;;double corner4X=(perpendicularLineIntercept - lineIntercept) / slopeDiff;double corner4Y=lineSlope * corner4X - lineIntercept;double lineStartX, lineStartY;lineStartX=corner1X;lineStartY=corner1Y;if (corner2Y < lineStartY) {lineStartX=corner2X;lineStartY=corner2Y;}if (corner3Y < lineStartY) {lineStartX=corner3X;lineStartY=corner3Y;}if (corner4Y < lineStartY) {lineStartX=corner4X;lineStartY=corner4Y;}for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {perpendicularLineIntercept=row - perpendicularLineSlope * col;intersectingPointX=(perpendicularLineIntercept - lineIntercept) / slopeDiff;intersectingPointY=lineSlope * intersectingPointX - lineIntercept;int p=(int)(Math.sqrt((intersectingPointX - lineStartX) * (intersectingPointX - lineStartX) + (intersectingPointY - lineStartY) * (intersectingPointY - lineStartY)));if (p < 0) {p=0;}if (p > (diagonalSize - 1)) {p=diagonalSize - 1;}output[row][col]+=y[p];}}if (cancelOp) {cancelOperation();return;}progress=(float)(i * 100f / numIterations);updateProgress("Loop 1 of 2: ",(int)progress);}updateProgress("Loop 2 of 2: ",0);double value;for (row=0; row < rows; row++) {for (col=0; col < cols; col++) {value=(float)(output[row][col] / numIterations);outputFile.setValue(row,col,value);}if (cancelOp) {cancelOperation();return;}progress=(float)(100f * row / rows);updateProgress("Loop 2 of 2: ",(int)progress);}}outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");outputFile.addMetadataEntry("Created on " + new Date());image.close();outputFile.close();returnData(outputHeader);} catch (OutOfMemoryError oe) {myHost.showFeedback("An out-of-memory error has occurred during operation.");}catch (Exception e) {myHost.showFeedback("An error has occurred during operation. See log file for details.");myHost.logException("Error in " + getDescriptiveName(),e);} finally {updateProgress("Progress: ",0);amIActive=false;myHost.pluginComplete();}}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(elementsetattributenodens05.class,args);}  }
class C{  void reportStats(NetworkStats stats){  Bundle result=new Bundle();  long rxBytes=0;  long txBytes=0;  long rxPackets=0;  long txPackets=0;  for (int i=0; i < stats.size(); ++i) {    Entry statsEntry=stats.getValues(i,null);    rxPackets+=statsEntry.rxPackets;    rxBytes+=statsEntry.rxBytes;    txPackets+=statsEntry.txPackets;    txBytes+=statsEntry.txBytes;  }  result.putLong("Total rx Bytes",rxBytes);  result.putLong("Total tx Bytes",txBytes);  result.putLong("Total rx Packets",rxPackets);  result.putLong("Total tx Packets",txPackets);  getInstrumentation().sendStatus(INSTRUMENTATION_IN_PROGRESS,result);}  }
class C{  public static void appendColumns(StringBuilder s,String[] columns){  int n=columns.length;  for (int i=0; i < n; i++) {    String column=columns[i];    if (column != null) {      if (i > 0) {        s.append(", ");      }      s.append(column);    }  }  s.append(' ');}  }
class C{  public RestartEvent(AdaptiveTimeContinuation source,RestartType type){  super(source);  this.type=type;}  }
class C{  public static boolean isManaged(Object entity){  Preconditions.checkNotNullArgument(entity,"entity is null");  if (entity instanceof BaseGenericIdEntity) {    return BaseEntityInternalAccess.isManaged((BaseGenericIdEntity)entity);  }  return false;}  }
class C{  public void send(DatagramPacket pack) throws IOException {  checkOpen();  ensureBound();  InetAddress packAddr=pack.getAddress();  if (address != null) {    if (packAddr != null) {      if (!address.equals(packAddr) || port != pack.getPort()) {        throw new IllegalArgumentException("Packet address mismatch with connected address");      }    } else {      pack.setAddress(address);      pack.setPort(port);    }  } else {    if (packAddr == null) {      throw new NullPointerException("Destination address is null");    }  }  impl.send(pack);}  }
class C{  public boolean isAbstract(){  return (this.isDeclaredAbstract() || ((this.eContainer() instanceof TInterface) && this.isHasNoBody()));}  }
class C{  public static Geo[] posToGa(String[] coords){  Geo[] ga=new Geo[coords.length];  for (int i=0; i < coords.length; i++) {    String[] ll=coords[i].split(",");    ga[i]=Geo.makeGeoDegrees(Double.parseDouble(ll[0]),Double.parseDouble(ll[1]));  }  return ga;}  }
class C{  public static DateTimeValue dayStart(DateValue date){  return new DateTimeValueImpl(date.year(),date.month(),date.day(),0,0,0);}  }
class C{  public SampleModel createCompatibleSampleModel(int w,int h){  int minBandoff=bandOffsets[0];  int numBands=bandOffsets.length;  for (int i=1; i < numBands; i++) {    if (bandOffsets[i] < minBandoff) {      minBandoff=bandOffsets[i];    }  }  int[] bandOff;  if (minBandoff > 0) {    bandOff=new int[numBands];    for (int i=0; i < numBands; i++) {      bandOff[i]=bandOffsets[i] - minBandoff;    }  } else {    bandOff=bandOffsets;  }  return new PixelInterleavedSampleModel(dataType,w,h,pixelStride,pixelStride * w,bandOff);}  }
class C{  private double[][] laggedMatrix(double[] x,int lag){  double[][] laggedMatrix=new double[x.length - lag + 1][lag];  for (int j=0; j < lag; j++) {    for (int i=0; i < laggedMatrix.length; i++) {      laggedMatrix[i][j]=x[lag - j - 1 + i];    }  }  return laggedMatrix;}  }
class C{  @Override public boolean showEdgeLabelsDefault(){  return false;}  }
class C{  @Override public void init(Processor processor){  super.init(processor);  SetPropertyAction action=(SetPropertyAction)getAction();  if (action.getName() == null || action.getName().trim().isEmpty()) {    ProcessorIssue pi=new ProcessorIssue();    pi.setProcessor(processor.getDescription());    pi.setAction(getAction().getDescription());    pi.setField("name");    pi.setSeverity(Severity.Error);    pi.setDescription(NAME_MUST_BE_SPECIFIED);    if (getIssues() == null) {      setIssues(new ArrayList<Issue>());    }    getIssues().add(0,pi);  }}  }
class C{  public static boolean deleteFile(String path){  if (TextUtils.isEmpty(path)) {    return true;  }  File file=new File(path);  if (!file.exists()) {    return true;  }  if (file.isFile()) {    return file.delete();  }  if (!file.isDirectory()) {    return false;  }  for (  File f : file.listFiles()) {    if (f.isFile()) {      f.delete();    } else     if (f.isDirectory()) {      deleteFile(f.getAbsolutePath());    }  }  return file.delete();}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image,int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height,image.getTransparency());}  }
class C{  public static final LocoNetMessage createIplUr92QueryPacket(){  return createIplSpecificHostQueryPacket(LnConstants.RE_IPL_MFR_DIGITRAX,LnConstants.RE_IPL_DIGITRAX_HOST_UR92);}  }
class C{  public Seat(String username,String identifier){  this.username=username;  this.identifier=identifier;}  }
class C{  private boolean isDraggingGesture(MotionEvent event){  ReceivedPointerTracker receivedTracker=mReceivedPointerTracker;  int[] pointerIds=mTempPointerIds;  receivedTracker.populateActivePointerIds(pointerIds);  final int firstPtrIndex=event.findPointerIndex(pointerIds[0]);  final int secondPtrIndex=event.findPointerIndex(pointerIds[1]);  final float firstPtrX=event.getX(firstPtrIndex);  final float firstPtrY=event.getY(firstPtrIndex);  final float secondPtrX=event.getX(secondPtrIndex);  final float secondPtrY=event.getY(secondPtrIndex);  final float firstPtrDownX=receivedTracker.getReceivedPointerDownX(firstPtrIndex);  final float firstPtrDownY=receivedTracker.getReceivedPointerDownY(firstPtrIndex);  final float secondPtrDownX=receivedTracker.getReceivedPointerDownX(secondPtrIndex);  final float secondPtrDownY=receivedTracker.getReceivedPointerDownY(secondPtrIndex);  return GestureUtils.isDraggingGesture(firstPtrDownX,firstPtrDownY,secondPtrDownX,secondPtrDownY,firstPtrX,firstPtrY,secondPtrX,secondPtrY,MAX_DRAGGING_ANGLE_COS);}  }
class C{  public static void main(String[] args){  CoordinatorStreamWriterCommandLine cmdline=new CoordinatorStreamWriterCommandLine();  OptionSet options=cmdline.parser().parse(args);  Config config=cmdline.loadConfig(options);  String type=cmdline.loadType(options);  String key=cmdline.loadKey(options);  String value=cmdline.loadValue(options);  CoordinatorStreamWriter writer=new CoordinatorStreamWriter(config);  writer.start();  writer.sendMessage(type,key,value);  writer.stop();}  }
class C{  @Transactional public void persist(Set<ParseCoilsMatch> coilsMatches){  Signature coilsSignature=loadPersistedSignature();  Map<String,Protein> proteinIdToProteinMap=getProteinIdToProteinMap(coilsMatches);  for (  ParseCoilsMatch parseCoilsMatch : coilsMatches) {    final Protein persistentProtein=proteinIdToProteinMap.get(parseCoilsMatch.getProteinDatabaseIdentifier());    if (persistentProtein == null) {      throw new IllegalArgumentException("Attempting to store a Coils match for a protein with id " + parseCoilsMatch.getProteinDatabaseIdentifier() + ", however this does not exist in the database.");    }    Set<CoilsMatch.CoilsLocation> locations=Collections.singleton(new CoilsMatch.CoilsLocation(parseCoilsMatch.getStartCoordinate(),parseCoilsMatch.getEndCoordinate()));    CoilsMatch match=new CoilsMatch(coilsSignature,locations);    persistentProtein.addMatch(match);    entityManager.persist(match);  }}  }
class C{  public <T>T query(Connection conn,String sql,Object[] params,ResultSetHandler<T> rsh) throws SQLException {  return query(conn,sql,params,null,rsh);}  }
class C{  public int length(){  return nameValuePairs.size();}  }
class C{  @NonNull public static Animator scaleTo(float scaleX,float scaleY,float duration,@Nullable Interpolator interpolator){  return scale(scaleX,scaleY,duration,interpolator,ActionType.SCALE_TO);}  }
class C{  private void logWaitingForMembers(){  Map<PersistentMemberID,Set<Integer>> offlineMembers=getMembersToWaitFor(true);  Map<PersistentMemberID,Set<Integer>> allMembersToWaitFor=getMembersToWaitFor(false);  boolean thereAreBucketsToBeRecovered=(RedundancyLogger.this.allBucketsRecoveredFromDisk.getCount() > 0);  if (thereAreBucketsToBeRecovered && !offlineMembers.isEmpty()) {    Set<String> membersToWaitForLogEntries=new HashSet<String>();    TransformUtils.transform(offlineMembers.entrySet(),membersToWaitForLogEntries,TransformUtils.persistentMemberEntryToLogEntryTransformer);    Set<Integer> missingBuckets=getAllWaitingBuckets(offlineMembers);    StartupStatus.startup(LocalizedStrings.CreatePersistentRegionProcessor_WAITING_FOR_OFFLINE_BUCKET_MEMBERS,new Object[]{this.region,missingBuckets,TransformUtils.persistentMemberIdToLogEntryTransformer.transform(this.thisMember),membersToWaitForLogEntries});    this.loggedDoneMessage=false;  } else   if (thereAreBucketsToBeRecovered && !allMembersToWaitFor.isEmpty()) {    Set<String> membersToWaitForLogEntries=new HashSet<String>();    Set<Integer> missingBuckets=getAllWaitingBuckets(allMembersToWaitFor);    TransformUtils.transform(allMembersToWaitFor.entrySet(),membersToWaitForLogEntries,TransformUtils.persistentMemberEntryToLogEntryTransformer);    StartupStatus.startup(LocalizedStrings.CreatePersistentRegionProcessor_WAITING_FOR_ONLINE_BUCKET_MEMBERS,new Object[]{this.region,missingBuckets,TransformUtils.persistentMemberIdToLogEntryTransformer.transform(this.thisMember),membersToWaitForLogEntries});    this.loggedDoneMessage=false;  } else   if (!this.loggedDoneMessage) {    logDoneMessage();  }}  }
class C{  public static boolean shouldShowRequestPermissionRationale(Activity activity,String... permissions){  for (  String permission : permissions) {    if (ActivityCompat.shouldShowRequestPermissionRationale(activity,permission)) {      return true;    }  }  return false;}  }
class C{  public ToStringBuilder append(final Object obj){  style.append(buffer,null,obj,null);  return this;}  }
class C{  public UserCompanyObject(UserCompanyObject parent){  this.id=parent.getId();  this.userId=parent.getUserId();  this.companyId=parent.getCompanyId();  this.groupId=parent.getDepartmentId();}  }
class C{  public static void apply(SharedPreferences.Editor editor){  try {    if (sApplyMethod != null) {      sApplyMethod.invoke(editor);      return;    }  } catch (  IllegalArgumentException|IllegalAccessException|InvocationTargetException e) {    e.printStackTrace();  }  editor.commit();}  }
class C{  public char skipTo(char to) throws JSONException {  char c;  try {    long startIndex=this.index;    long startCharacter=this.character;    long startLine=this.line;    this.reader.mark(1000000);    do {      c=this.next();      if (c == 0) {        this.reader.reset();        this.index=startIndex;        this.character=startCharacter;        this.line=startLine;        return c;      }    } while (c != to);  } catch (  IOException exception) {    throw new JSONException(exception);  }  this.back();  return c;}  }
class C{  public short[][] reduce_table(){  return _reduce_table;}  }
class C{  public static double quantile(double val,double mu,double sigma,double k){  if (val < 0.0 || val > 1.0) {    return Double.NaN;  }  if (k < 0) {    return mu + sigma * Math.max((1. - Math.pow(-Math.log(val),k)) / k,1. / k);  } else   if (k > 0) {    return mu + sigma * Math.min((1. - Math.pow(-Math.log(val),k)) / k,1. / k);  } else {    return mu + sigma * Math.log(1. / Math.log(1. / val));  }}  }
class C{  private boolean save(File file,String fileName,Resource container) throws IOException {  this.containerType=container.getType();  this.containerId=container.getId();  this.createdDate=JodaDateUtil.now();  this.hash=file.getName();  this.size=file.length();  if (this.mimeType == null) {    this.mimeType=FileUtil.detectMediaType(file,name).toString();  }  if (fileName == null) {    this.name=String.valueOf(new Date().getTime());    try {      this.name+="." + TikaConfig.getDefaultConfig().getMimeRepository().forName(this.mimeType).getExtension();    } catch (    MimeTypeException e) {    }  } else {    this.name=fileName;  }  AttachmentCache.remove(this);  Attachment sameAttach=Attachment.findBy(this);  if (sameAttach == null) {    super.save();    return true;  } else {    this.id=sameAttach.id;    return false;  }}  }
class C{  public Builder put(Object... settings){  if (settings.length == 1) {    if (settings[0] instanceof Map) {      return put((Map)settings[0]);    } else     if (settings[0] instanceof Settings) {      return put((Settings)settings[0]);    }  }  if ((settings.length % 2) != 0) {    throw new IllegalArgumentException("array settings of key + value order doesn't hold correct number of arguments (" + settings.length + ")");  }  for (int i=0; i < settings.length; i++) {    put(settings[i++].toString(),settings[i].toString());  }  return this;}  }
class C{  public final void yybegin(int newState){  zzLexicalState=newState;}  }
class C{  public BitwiseXorExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public int direction(Coords d){  return (int)Math.round(radian(d) / HEXSIDE) % 6;}  }
class C{  public boolean isTypeOf(String typeId){  return this.id.equals(typeId) || ancestors.contains(typeId);}  }
class C{  public void testToMonitorString(){  SeeedStudioRfidProtocol instance=new SeeedStudioRfidProtocol();  String expResult="Reply from SeeedStudio reader. Tag read 7800652CC9 checksum F8 valid? yes";  assertEquals(expResult,instance.toMonitorString(msgStandalone));}  }
class C{  public void log(String message){  String log;  log=new Timestamp() + " " + message;  if (getFilename() != null)   Debug.writeToFile(getFilename(),log);  System.out.println(log);}  }
class C{  public boolean isStatic(){  return Modifier.isStatic(flags);}  }
class C{  public boolean addMapping(String prefix,String uri,Attr n){  NameSpaceSymbEntry ob=symb.get(prefix);  if ((ob != null) && uri.equals(ob.uri)) {    return false;  }  NameSpaceSymbEntry ne=new NameSpaceSymbEntry(uri,n,false,prefix);  needsClone();  symb.put(prefix,ne);  if (ob != null) {    ne.lastrendered=ob.lastrendered;    if ((ob.lastrendered != null) && (ob.lastrendered.equals(uri))) {      ne.rendered=true;    }  }  return true;}  }
class C{  public JDialog showDialog(int width,int height){  JDialog frame=new JDialog();  frame.getContentPane().setLayout(new BorderLayout());  frame.getContentPane().add(getChartPanel(),BorderLayout.CENTER);  frame.setPreferredSize(new Dimension(width,height));  frame.pack();  frame.setLocationRelativeTo(null);  frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);  frame.setTitle("MOEA Framework Plot");  frame.setModalityType(ModalityType.APPLICATION_MODAL);  frame.setVisible(true);  return frame;}  }
class C{  public static float pxToDp(Resources res,float px){  float dp=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,px,res.getDisplayMetrics());  return dp;}  }
class C{  public void add(int i){  if (_data.length <= _size)   expand(_size + 1);  _data[_size++]=i;}  }
class C{  public void clearConversations(){  conversations=new LinkedList<ConversationInfo>();}  }
class C{  public void changeRecord(int index,Object[] values) throws DBFException {  if (this.fieldArray == null) {    throw new DBFException("Fields should be set before adding records");  }  if (values == null) {    throw new DBFException("Null cannot be added as row");  }  if (values.length != this.fieldArray.length) {    throw new DBFException("Invalid record. Invalid number of fields in row");  }  for (int i=0; i < this.fieldArray.length; i++) {    if (values[i] == null) {      continue;    }    Class equivalentClass=this.fieldArray[i].getDataType().getEquivalentClass();    if (!(values[i].getClass().isAssignableFrom(equivalentClass))) {      throw new DBFException("Invalid value for field " + i);    }  }  recordData.add(index,values);}  }
class C{  private static void determineFirstDigit(StringBuilder resultString,int lgPatternFound) throws NotFoundException {  for (int d=0; d < 10; d++) {    if (lgPatternFound == FIRST_DIGIT_ENCODINGS[d]) {      resultString.insert(0,(char)('0' + d));      return;    }  }  throw NotFoundException.getNotFoundInstance();}  }
class C{  public static XTIFFDirectory create(){  return factory.createDirectory();}  }
class C{  public String findCoordTransformName(int code){  if ((code < 0) || (code >= coordTransformName.length)) {    return (null);  }  return (coordTransformName[code]);}  }
class C{  public Graph search(){  long time1=System.currentTimeMillis();  if (graph == null) {    graph=new EdgeListGraph(getIndependenceTest().getVariables());  }  sepsetProducer=new SepsetsMinScore(graph,getIndependenceTest(),-1);  meekRules=new MeekRules();  meekRules.setAggressivelyPreventCycles(isAggressivelyPreventCycles());  meekRules.setKnowledge(knowledge);  meekRules.setUndirectUnforcedEdges(true);  List<Node> nodes=getIndependenceTest().getVariables();  buildIndexing(nodes);  int numEdges=nodes.size() * (nodes.size() - 1) / 2;  int index=0;  for (int i=0; i < nodes.size(); i++) {    for (int j=i + 1; j < nodes.size(); j++) {      ++index;      if (index % 100 == 0) {        log("info",index + " of " + numEdges);      }      Node x=nodes.get(i);      Node y=nodes.get(j);      tryAddingEdge(x,y);    }  }  addColliders(graph,sepsetProducer,knowledge);  applyMeek(nodes);  this.logger.log("graph","\nReturning this graph: " + graph);  long time2=System.currentTimeMillis();  this.elapsedTime=time2 - time1;  return graph;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(documentimportnode07.class,args);}  }
class C{  public DenseObjectMatrix2D(int rows,int columns){  setUp(rows,columns);  this.elements=new Object[rows * columns];}  }
class C{  @Override public boolean isMovable(){  return fromSpace;}  }
class C{  public void add(Drawable drawable){  add(drawable,null);}  }
class C{  public static CharSequence comments(EasyCursor c){  return comments(c.getString(Reviews.COMMENTS));}  }
class C{  public Usage offerToUsage(Offer offer){  return new Usage(offer.getAppName(),offer.getCardIcon(),getUsed(),offer.isUnlimited(),offer.getType());}  }
class C{  private Configuration buildConfiguration(ConnectionConfig config){  Configuration configuration=new BaseConfiguration();  String databaseName=config.getDatabaseName();  if (databaseName == null) {    LOG.warn(JdbcConstants.EAGLE_DATABASE + " is null, trying default database name as: eagle");    databaseName="eagle";  }  LOG.info("Using default database: " + databaseName + " (adapter: "+ config.getAdapter()+ ")");  configuration.addProperty("torque.database.default",config.getDatabaseName());  configuration.addProperty(String.format("torque.dsfactory.%s.factory",databaseName),DEFAULT_DATA_SOURCE_FACTORY_CLASS);  configuration.addProperty(String.format("torque.database.%s.adapter",databaseName),config.getAdapter());  configuration.addProperty(String.format("torque.dsfactory.%s.connection.driver",databaseName),config.getDriverClassName());  configuration.addProperty(String.format("torque.dsfactory.%s.connection.url",databaseName),config.getConnectionUrl());  configuration.addProperty(String.format("torque.dsfactory.%s.connection.user",databaseName),config.getUserName());  configuration.addProperty(String.format("torque.dsfactory.%s.connection.password",databaseName),config.getPassword());  configuration.addProperty(String.format("torque.dsfactory.%s.pool.maxActive",databaseName),Integer.toString(config.getConnectionMaxActive()));  return configuration;}  }
class C{  protected void clearParameters(){  fieldValue.setValue("");  fieldName.setValue("");  fieldContact.setValue("");  fieldEMail.setValue("");  fieldPostal.setValue("");  fieldPhone.setValue("");  checkCustomer.setSelected(m_isSOMatch);  checkAND.setSelected(true);  return;}  }
class C{  default String renderInitalizers(Generator gen,M model){  return gen.onEach(model.getInitalizers()).collect(Collectors.joining(dnl()));}  }
class C{  static double[] loadExpFracB(){  return EXP_FRAC_B.clone();}  }
class C{  public final boolean isSynchronized(){  return Modifier.isSynchronized(getModifiers());}  }
class C{  public String numRunsTipText(){  return "Number of runs for cross-validation.";}  }
class C{  public double weight(){  double weight=0.0;  for (  Edge e : edges())   weight+=e.weight();  return weight;}  }
class C{  public boolean isLocFromDim(){  Object oo=get_Value(COLUMNNAME_IsLocFromDim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  String transformResourceIdToFileName(final String resourceName){  return resourceName.replace('_','.');}  }
class C{  public void onViewDetachedFromWindow(){}  }
class C{  public static <E>List<E> singletonList(E object){  return new SingletonList<E>(object);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.N4_CLASS_DECLARATION__ANNOTATION_LIST:    setAnnotationList((AnnotationList)null);  return;case N4JSPackage.N4_CLASS_DECLARATION__DECLARED_MODIFIERS:getDeclaredModifiers().clear();return;case N4JSPackage.N4_CLASS_DECLARATION__NAME:setName(NAME_EDEFAULT);return;case N4JSPackage.N4_CLASS_DECLARATION__TYPE_VARS:getTypeVars().clear();return;case N4JSPackage.N4_CLASS_DECLARATION__TYPING_STRATEGY:setTypingStrategy(TYPING_STRATEGY_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public static byte[] toArray(ByteBuffer buffer){  byte[] bytes=new byte[buffer.remaining()];  buffer.duplicate().get(bytes);  return bytes;}  }
class C{  public LL(double[] llPoints,int units,int lType){  this(llPoints,units,lType,-1);}  }
class C{  private synchronized void addTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier){  if (null == tableLockMap.get(absoluteTableIdentifier)) {    tableLockMap.put(absoluteTableIdentifier,new Object());  }}  }
class C{  public static void main(String[] args) throws Exception {  LocalResourcePool pool=new LocalResourcePool("dev");  InputStream ins=ClassLoader.getSystemResourceAsStream("example/app/horizontalbar/horizontalbar_mockdata.txt");  InterpreterResult result=new InterpreterResult(InterpreterResult.Code.SUCCESS,InterpreterResult.Type.TABLE,IOUtils.toString(ins));  pool.put(WellKnownResourceName.ZeppelinTableResult.name(),result);  ZeppelinApplicationDevServer devServer=new ZeppelinApplicationDevServer(HorizontalBar.class.getName(),pool.getAll());  devServer.start();  devServer.join();}  }
class C{  public void encode(OutputStream out) throws IOException {  DerOutputStream tmp=new DerOutputStream();  if (this.extensionValue == null) {    this.extensionId=PKIXExtensions.NameConstraints_Id;    this.critical=true;    encodeThis();  }  super.encode(tmp);  out.write(tmp.toByteArray());}  }
class C{  public void visitLocalVariable(String name,String desc,String signature,Label start,Label end,int index){  if (mv != null) {    mv.visitLocalVariable(name,desc,signature,start,end,index);  }}  }
class C{  public String toString(){  return " cxform(+rgb,*rgb)=(" + addRed + ","+ addGreen+ ","+ addBlue+ ","+ multRed+ ","+ multGreen+ ","+ multBlue+ ")";}  }
class C{  public void invalidate(){  this.markUpdated();  this.mustRecomputeSize=true;  this.mustRecomputeLayout=true;}  }
class C{  public T casePropertyNameValuePairSingleName(PropertyNameValuePairSingleName object){  return null;}  }
class C{  protected boolean mustUpdateTile(ContentTile tile,long contentUpdateTime){  Rectangle tileBounds=this.getContentTileBounds(tile.row,tile.column);  if (this.contentBounds.intersects(tileBounds)) {    if (tile.updateTime != contentUpdateTime)     return true;    TextureTile textureTile=this.getTextureTile(tile);    if (textureTile == null)     return true;  }  return false;}  }
class C{  public void serialize(Node node) throws IOException {  try {    TreeWalker walker=new TreeWalker(this);    walker.traverse(node);  } catch (  org.xml.sax.SAXException se) {    throw new WrappedRuntimeException(se);  }}  }
class C{  public static String toPercentString(Number number,int scale,int roundingMode){  if (!(number instanceof BigDecimal)) {    number=new BigDecimal(number.doubleValue());  }  BigDecimal bd=(BigDecimal)number;  bd=bd.multiply(new BigDecimal(100.0)).setScale(scale,roundingMode);  return (bd.toString() + "%");}  }
class C{  private void initializePropsFromServer() throws SQLException {  String connectionInterceptorClasses=getConnectionLifecycleInterceptors();  this.connectionLifecycleInterceptors=null;  if (connectionInterceptorClasses != null) {    this.connectionLifecycleInterceptors=Util.loadExtensions(this,this.props,connectionInterceptorClasses,"Connection.badLifecycleInterceptor",getExceptionInterceptor());  }  setSessionVariables();  if (!versionMeetsMinimum(4,1,0)) {    setTransformedBitIsBoolean(false);  }  this.parserKnowsUnicode=versionMeetsMinimum(4,1,0);  if (getUseServerPreparedStmts() && versionMeetsMinimum(4,1,0)) {    this.useServerPreparedStmts=true;    if (versionMeetsMinimum(5,0,0) && !versionMeetsMinimum(5,0,3)) {      this.useServerPreparedStmts=false;    }  }  if (versionMeetsMinimum(3,21,22)) {    loadServerVariables();    if (versionMeetsMinimum(5,0,2)) {      this.autoIncrementIncrement=getServerVariableAsInt("auto_increment_increment",1);    } else {      this.autoIncrementIncrement=1;    }    buildCollationMapping();    LicenseConfiguration.checkLicenseType(this.serverVariables);    String lowerCaseTables=this.serverVariables.get("lower_case_table_names");    this.lowerCaseTableNames="on".equalsIgnoreCase(lowerCaseTables) || "1".equalsIgnoreCase(lowerCaseTables) || "2".equalsIgnoreCase(lowerCaseTables);    this.storesLowerCaseTableName="1".equalsIgnoreCase(lowerCaseTables) || "on".equalsIgnoreCase(lowerCaseTables);    configureTimezone();    if (this.serverVariables.containsKey("max_allowed_packet")) {      int serverMaxAllowedPacket=getServerVariableAsInt("max_allowed_packet",-1);      if (serverMaxAllowedPacket != -1 && (serverMaxAllowedPacket < getMaxAllowedPacket() || getMaxAllowedPacket() <= 0)) {        setMaxAllowedPacket(serverMaxAllowedPacket);      } else       if (serverMaxAllowedPacket == -1 && getMaxAllowedPacket() == -1) {        setMaxAllowedPacket(65535);      }      if (getUseServerPrepStmts()) {        int preferredBlobSendChunkSize=getBlobSendChunkSize();        int packetHeaderSize=ServerPreparedStatement.BLOB_STREAM_READ_BUF_SIZE + 11;        int allowedBlobSendChunkSize=Math.min(preferredBlobSendChunkSize,getMaxAllowedPacket()) - packetHeaderSize;        if (allowedBlobSendChunkSize <= 0) {          throw SQLError.createSQLException("Connection setting too low for 'maxAllowedPacket'. " + "When 'useServerPrepStmts=true', 'maxAllowedPacket' must be higher than " + packetHeaderSize + ". Check also 'max_allowed_packet' in MySQL configuration files.",SQLError.SQL_STATE_INVALID_CONNECTION_ATTRIBUTE,getExceptionInterceptor());        }        setBlobSendChunkSize(String.valueOf(allowedBlobSendChunkSize));      }    }    if (this.serverVariables.containsKey("net_buffer_length")) {      this.netBufferLength=getServerVariableAsInt("net_buffer_length",16 * 1024);    }    checkTransactionIsolationLevel();    if (!versionMeetsMinimum(4,1,0)) {      checkServerEncoding();    }    this.io.checkForCharsetMismatch();    if (this.serverVariables.containsKey("sql_mode")) {      String sqlModeAsString=this.serverVariables.get("sql_mode");      if (StringUtils.isStrictlyNumeric(sqlModeAsString)) {        this.useAnsiQuotes=(Integer.parseInt(sqlModeAsString) & 4) > 0;      } else       if (sqlModeAsString != null) {        this.useAnsiQuotes=sqlModeAsString.indexOf("ANSI_QUOTES") != -1;        this.noBackslashEscapes=sqlModeAsString.indexOf("NO_BACKSLASH_ESCAPES") != -1;      }    }  }  boolean overrideDefaultAutocommit=isAutoCommitNonDefaultOnServer();  configureClientCharacterSet(false);  try {    this.errorMessageEncoding=CharsetMapping.getCharacterEncodingForErrorMessages(this);  } catch (  SQLException ex) {    throw ex;  }catch (  RuntimeException ex) {    SQLException sqlEx=SQLError.createSQLException(ex.toString(),SQLError.SQL_STATE_ILLEGAL_ARGUMENT,null);    sqlEx.initCause(ex);    throw sqlEx;  }  if (versionMeetsMinimum(3,23,15)) {    this.transactionsSupported=true;    if (!overrideDefaultAutocommit) {      try {        setAutoCommit(true);      } catch (      SQLException ex) {        if (ex.getErrorCode() != MysqlErrorNumbers.ER_MUST_CHANGE_PASSWORD || getDisconnectOnExpiredPasswords()) {          throw ex;        }      }    }  } else {    this.transactionsSupported=false;  }  if (versionMeetsMinimum(3,23,36)) {    this.hasIsolationLevels=true;  } else {    this.hasIsolationLevels=false;  }  this.hasQuotedIdentifiers=versionMeetsMinimum(3,23,6);  this.io.resetMaxBuf();  if (this.io.versionMeetsMinimum(4,1,0)) {    String characterSetResultsOnServerMysql=this.serverVariables.get(JDBC_LOCAL_CHARACTER_SET_RESULTS);    if (characterSetResultsOnServerMysql == null || StringUtils.startsWithIgnoreCaseAndWs(characterSetResultsOnServerMysql,"NULL") || characterSetResultsOnServerMysql.length() == 0) {      String defaultMetadataCharsetMysql=this.serverVariables.get("character_set_system");      String defaultMetadataCharset=null;      if (defaultMetadataCharsetMysql != null) {        defaultMetadataCharset=CharsetMapping.getJavaEncodingForMysqlCharset(defaultMetadataCharsetMysql);      } else {        defaultMetadataCharset="UTF-8";      }      this.characterSetMetadata=defaultMetadataCharset;    } else {      this.characterSetResultsOnServer=CharsetMapping.getJavaEncodingForMysqlCharset(characterSetResultsOnServerMysql);      this.characterSetMetadata=this.characterSetResultsOnServer;    }  } else {    this.characterSetMetadata=getEncoding();  }  if (versionMeetsMinimum(4,1,0) && !this.versionMeetsMinimum(4,1,10) && getAllowMultiQueries()) {    if (isQueryCacheEnabled()) {      setAllowMultiQueries(false);    }  }  if (versionMeetsMinimum(5,0,0) && (getUseLocalTransactionState() || getElideSetAutoCommits()) && isQueryCacheEnabled()&& !versionMeetsMinimum(5,1,32)) {    setUseLocalTransactionState(false);    setElideSetAutoCommits(false);  }  setupServerForTruncationChecks();}  }
class C{  public void showEmpty(Drawable emptyImageDrawable,String emptyTextTitle,String emptyTextContent){  switchState(EMPTY,emptyImageDrawable,emptyTextTitle,emptyTextContent,null,null,Collections.<Integer>emptyList());}  }
class C{  public boolean canCreate(ReviewDb db,Repository repo,RevObject object){  if (!canWrite()) {    return false;  }  if (object instanceof RevCommit) {    if (!canPerform(Permission.CREATE)) {      return false;    }    return canCreateCommit(db,repo,(RevCommit)object);  } else   if (object instanceof RevTag) {    final RevTag tag=(RevTag)object;    try (RevWalk rw=new RevWalk(repo)){      rw.parseBody(tag);    } catch (    IOException e) {      return false;    }    final PersonIdent tagger=tag.getTaggerIdent();    if (tagger != null) {      boolean valid;      if (getUser().isIdentifiedUser()) {        final String addr=tagger.getEmailAddress();        valid=getUser().asIdentifiedUser().hasEmailAddress(addr);      } else {        valid=false;      }      if (!valid && !canForgeCommitter()) {        return false;      }    }    RevObject tagObject=tag.getObject();    if (tagObject instanceof RevCommit) {      if (!canCreateCommit(db,repo,(RevCommit)tagObject)) {        return false;      }    } else {      if (!canCreate(db,repo,tagObject)) {        return false;      }    }    if (tag.getFullMessage().contains("-----BEGIN PGP SIGNATURE-----\n")) {      return canPerform(Permission.CREATE_SIGNED_TAG);    }    return canPerform(Permission.CREATE_TAG);  } else {    return false;  }}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  @Override public void flush() throws IOException {  writer.flush();}  }
class C{  public void stopInitialSync(String replicaSetName){  initialSyncReplicaSets.remove(replicaSetName);}  }
class C{  boolean useReadCache(String name,IOContext context){  if (!blockCacheReadEnabled) {    return false;  }  if (blockCacheFileTypes != null && !isCachableFile(name)) {    return false;  }switch (context.context) {case MERGE:{      return cacheMerges;    }case READ:{    if (context.readOnce) {      return cacheReadOnce;    } else {      return true;    }  }default :{  return true;}}}  }
class C{  public void stopFlipDetection(FlipListener flipListener){  stopLibrarySensorDetection(flipListener);}  }
class C{  public boolean nextRange(){  if (nextElement <= endElement) {    codepointEnd=endElement;    codepoint=nextElement;    nextElement=endElement + 1;    return true;  }  if (range < endRange) {    loadRange(++range);    codepointEnd=endElement;    codepoint=nextElement;    nextElement=endElement + 1;    return true;  }  if (stringIterator == null)   return false;  codepoint=IS_STRING;  string=stringIterator.next();  if (!stringIterator.hasNext())   stringIterator=null;  return true;}  }
class C{  public static void main(String argv[]){  OpenReplicatorManagerCtrl ctrl=new OpenReplicatorManagerCtrl(argv);  ctrl.go();}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  private void checkOffsetOrImageTag(ExifTag tag){  if (tag.getComponentCount() == 0) {    return;  }  short tid=tag.getTagId();  int ifd=tag.getIfd();  if (tid == TAG_EXIF_IFD && checkAllowed(ifd,ExifInterface.TAG_EXIF_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_EXIF) || isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_EXIF,tag.getValueAt(0));    }  } else   if (tid == TAG_GPS_IFD && checkAllowed(ifd,ExifInterface.TAG_GPS_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_GPS)) {      registerIfd(IfdId.TYPE_IFD_GPS,tag.getValueAt(0));    }  } else   if (tid == TAG_INTEROPERABILITY_IFD && checkAllowed(ifd,ExifInterface.TAG_INTEROPERABILITY_IFD)) {    if (isIfdRequested(IfdId.TYPE_IFD_INTEROPERABILITY)) {      registerIfd(IfdId.TYPE_IFD_INTEROPERABILITY,tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT)) {    if (isThumbnailRequested()) {      registerCompressedImage(tag.getValueAt(0));    }  } else   if (tid == TAG_JPEG_INTERCHANGE_FORMAT_LENGTH && checkAllowed(ifd,ExifInterface.TAG_JPEG_INTERCHANGE_FORMAT_LENGTH)) {    if (isThumbnailRequested()) {      mJpegSizeTag=tag;    }  } else   if (tid == TAG_STRIP_OFFSETS && checkAllowed(ifd,ExifInterface.TAG_STRIP_OFFSETS)) {    if (isThumbnailRequested()) {      if (tag.hasValue()) {        for (int i=0; i < tag.getComponentCount(); i++) {          if (tag.getDataType() == ExifTag.TYPE_UNSIGNED_SHORT) {            registerUncompressedStrip(i,tag.getValueAt(i));          } else {            registerUncompressedStrip(i,tag.getValueAt(i));          }        }      } else {        mCorrespondingEvent.put(tag.getOffset(),new ExifTagEvent(tag,false));      }    }  } else   if (tid == TAG_STRIP_BYTE_COUNTS && checkAllowed(ifd,ExifInterface.TAG_STRIP_BYTE_COUNTS) && isThumbnailRequested() && tag.hasValue()) {    mStripSizeTag=tag;  }}  }
class C{  public void onDrawerClosed(View view){  Snackbar.make(view,R.string.drawer_close,Snackbar.LENGTH_SHORT).show();}  }
class C{  protected void initLookup(){  m_lookup=new HashMap();  for (int i=0; i < m_names.length; ++i) {    m_lookup.put(m_names[i],new Integer(i));  }}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("hulighttestdata.zip"),"hulight.txt");}  }
class C{  public boolean isListTrx(){  Object oo=get_Value(COLUMNNAME_ListTrx);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private void inspectOnline(final Player admin,final String charname){  Player player=SingletonRepository.getRuleProcessor().getPlayer(charname);  if (player == null) {    admin.sendPrivateText(NotificationType.ERROR,"There is no character called " + charname + " online.");    return;  }  inspect(admin,player);}  }
class C{  public NbtTagInt(String name,int value){  super(name);  this.value=value;}  }
class C{  public ConnectorState loadState(int... partitions){  return stateSerializer.load(startState(partitions));}  }
class C{  public void ReInit(JavaCharStream stream,int lexState){  ReInit(stream);  SwitchTo(lexState);}  }
class C{  public boolean ackNextChunkId(String id){  if (state.isTerminated())   return false; else   if (id.equals(chunkid)) {    return true;  } else {    if (!allowOtherChunksInBetween(id)) {      if (state.isDone()) {        if (!isTerminated())         terminate();        return false;      } else {        throw new PngjInputException("Unexpected chunk " + id + " while "+ chunkid+ " set is not done");      }    } else     return true;  }}  }
class C{  public static void addShutdownHook(Object self,Closure closure){  Runtime.getRuntime().addShutdownHook(new Thread(closure));}  }
class C{  public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel){  super(THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER);  mConvolutionKernel=convolutionKernel;}  }
class C{  public Pyramid(){  this.setUpGeometryCache();}  }
class C{  public InlineQueryResultCachedPhotoBuilder replyMarkup(InlineReplyMarkup replyMarkup){  this.reply_markup=replyMarkup;  return this;}  }
class C{  public void resetView(Bitmap b){  setImageBitmap(b);  setImageBitmapResetBase(b,true);  setImageMatrix(getImageViewMatrix());  int width=mBitmapDisplayed.getWidth();  int height=mBitmapDisplayed.getHeight();  Rect imageRect=new Rect(0,0,width,height);  int cropWidth=Math.min(width,height) * 4 / 5;  int cropHeight=cropWidth;  int x=(width - cropWidth) / 2;  int y=(height - cropHeight) / 2;  RectF cropRect=new RectF(x,y,x + cropWidth,y + cropHeight);  HighlightView hv=new HighlightView(this);  hv.setup(getImageViewMatrix(),imageRect,cropRect,false,true);  hv.setFocus(true);  add(hv);  centerBasedOnHighlightView(hv);  hv.setMode(HighlightView.ModifyMode.None);  center(true,true);  invalidate();}  }
class C{  public void destroy(){  log.info("");}  }
class C{  public static Object convertBaselineShift(Element e){  Value v=CSSUtilities.getComputedStyle(e,SVGCSSEngine.BASELINE_SHIFT_INDEX);  if (v.getPrimitiveType() == CSSPrimitiveValue.CSS_IDENT) {    String s=v.getStringValue();switch (s.charAt(2)) {case 'p':      return TextAttribute.SUPERSCRIPT_SUPER;case 'b':    return TextAttribute.SUPERSCRIPT_SUB;default :  return null;}} else {return new Float(v.getFloatValue());}}  }
class C{  public void stop() throws Throwable {  this.dumpHosts();  for (  H host : hosts) {    ServiceHostUtils.destroy(host);  }}  }
class C{  public static String dump(Map<?,?> map){  StringBuilder stringBuilder=new StringBuilder();  for (  Map.Entry<?,?> entry : map.entrySet()) {    stringBuilder.append(entry.getKey());    stringBuilder.append(" : ");    stringBuilder.append(entry.getValue());  }  return stringBuilder.toString();}  }
class C{  public void reset() throws IOException {synchronized (lock) {    ensureOpen();    next=mark;  }}  }
class C{  public static WifiP2pServiceRequest newInstance(int protocolType,String queryData){  return new WifiP2pServiceRequest(protocolType,queryData);}  }
class C{  public ArrayAnimator(String group,String field){  super(group);  m_field=field;  m_start=PrefuseLib.getStartField(field);  m_end=PrefuseLib.getEndField(field);}  }
class C{  public static boolean checkFile(String trackName,boolean shouldExist,Drive drive) throws IOException {  long startTime=System.currentTimeMillis();  while (System.currentTimeMillis() - startTime < MAX_TIME_TO_WAIT_SYNC) {    boolean exist=getFile(trackName,drive) != null;    if (exist == shouldExist) {      return true;    }  }  Assert.fail();  return false;}  }
class C{  private int fileBoundaryRead(boolean discard) throws IOException {  if (discard) {    bsR(this.mBsLive & 7);  }  if (this.mBsLive >= 8) {    return bsR(8);  } else   if (this.mBsLive > 0) {    throw new IllegalStateException("Bad input buffer state in Bzip2 decompression");  }  return this.mIn.read();}  }
class C{  private static byte[][] rotateArray(byte[][] bitarray){  byte[][] temp=new byte[bitarray[0].length][bitarray.length];  for (int ii=0; ii < bitarray.length; ii++) {    int inverseii=bitarray.length - ii - 1;    for (int jj=0; jj < bitarray[0].length; jj++) {      temp[jj][inverseii]=bitarray[ii][jj];    }  }  return temp;}  }
class C{  public final String toString(){  return name;}  }
class C{  private static void byte2hex(byte b,StringBuffer buf){  int high=((b & 0xf0) >> 4);  int low=(b & 0x0f);  buf.append(HEX_DIGITS[high]);  buf.append(HEX_DIGITS[low]);}  }
class C{  public static <U>DeferredResult<U> anyOf(List<DeferredResult<U>> deferredResults){  List<CompletableFuture<U>> futures=deferredResults.stream().map(null).collect(Collectors.toList());  @SuppressWarnings("unchecked") CompletableFuture<U> cf=CompletableFuture.anyOf(futures.toArray(new CompletableFuture<?>[deferredResults.size()])).thenApply(null);  return new DeferredResult<>(cf);}  }
class C{  private static byte[] encode3to4(byte[] source,int srcOffset,int numSigBytes,byte[] destination,int destOffset,byte[] alphabet){  int inBuff=(numSigBytes > 0 ? ((source[srcOffset] << 24) >>> 8) : 0) | (numSigBytes > 1 ? ((source[srcOffset + 1] << 24) >>> 16) : 0) | (numSigBytes > 2 ? ((source[srcOffset + 2] << 24) >>> 24) : 0);switch (numSigBytes) {case 3:    destination[destOffset]=alphabet[(inBuff >>> 18)];  destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=alphabet[(inBuff) & 0x3f];return destination;case 2:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=alphabet[(inBuff >>> 6) & 0x3f];destination[destOffset + 3]=EQUALS_SIGN;return destination;case 1:destination[destOffset]=alphabet[(inBuff >>> 18)];destination[destOffset + 1]=alphabet[(inBuff >>> 12) & 0x3f];destination[destOffset + 2]=EQUALS_SIGN;destination[destOffset + 3]=EQUALS_SIGN;return destination;default :return destination;}}  }
class C{  public static void main(String[] args){  TestHtmlDefinitionListTag tester=new TestHtmlDefinitionListTag();  tester.exactNewlineMatch=false;  run(tester,ARGS1,TEST_ALL,NEGATED_TEST);  run(tester,ARGS1,TEST_CMNT_DEPR,NEGATED_TEST);  run(tester,ARGS2,TEST_ALL,NEGATED_TEST);  run(tester,ARGS2,NO_TEST,TEST_CMNT_DEPR);  run(tester,ARGS3,TEST_ALL,NEGATED_TEST);  run(tester,ARGS3,TEST_NODEPR,TEST_NOCMNT_NODEPR);  run(tester,ARGS4,TEST_ALL,NEGATED_TEST);  run(tester,ARGS4,TEST_NOCMNT_NODEPR,TEST_CMNT_DEPR);  tester.printSummary();}  }
class C{  private int findBacktrackPosition(final int position){  int currentPosition=position;  while (stackSizes.get(currentPosition).getRight() > 0) {    currentPosition++;  }  return currentPosition;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:06.670 -0500",hash_original_method="41766EA6657E21C45E368553CD429F56",hash_generated_method="F2ECF31D59A09C57439120926468258C") public static Typeface createFromFile(String path){  return new Typeface(nativeCreateFromFile(path));}  }
class C{  private void logCall(Remote obj,Object method){  if (callLog.isLoggable(Log.VERBOSE)) {    String clientHost;    try {      clientHost=getClientHost();    } catch (    ServerNotActiveException snae) {      clientHost="(local)";    }    callLog.log(Log.VERBOSE,"[" + clientHost + ": "+ obj.getClass().getName()+ ref.getObjID().toString()+ ": "+ method+ "]");  }}  }
class C{  private void processResponseHeaders(State state,HttpURLConnection conn) throws StopRequestException {  readResponseHeaders(state,conn);  state.filename=Helpers.generateSaveFile(originalDownloadInfo.getUri(),originalDownloadInfo.getHint(),state.contentDisposition,state.contentLocation,state.mimeType,originalDownloadInfo.getDestination(),state.contentLength,storageManager);  updateDownloadInfoFieldsFrom(state);  downloadsRepository.updateDatabaseFromHeaders(originalDownloadInfo,state.filename,state.headerETag,state.mimeType,state.totalBytes);  checkConnectivity();}  }
class C{  @Deprecated public static <V1,V2,V3,V4,V5>GridTuple5<V1,V2,V3,V4,V5> t5(){  return new GridTuple5<>();}  }
class C{  public static ErLocationInfo fromLocationInfo(org.apache.log4j.spi.LocationInfo locationInfo){  ErLocationInfo erLocationInfo=new ErLocationInfo();  erLocationInfo.setClassName(locationInfo.getClassName());  erLocationInfo.setFileName(locationInfo.getFileName());  erLocationInfo.setLineNumber(locationInfo.getLineNumber());  erLocationInfo.setMethodName(locationInfo.getMethodName());  return erLocationInfo;}  }
class C{  public OpenMapFrame(String title){  this(title,true);}  }
class C{  public static boolean isXMLNameFirstCharacter(char c){  return (NAME_FIRST_CHARACTER[c / 32] & (1 << (c % 32))) != 0;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public BlockDXT3(){  this.alphaBlock=new AlphaBlockDXT3();  this.colorBlock=new BlockDXT1();}  }
class C{  public void testRandomStrings() throws Exception {  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);}  }
class C{  @Override @Generated("This method was generated using jOOQ-tools") default ReactiveSeq<Tuple14<Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>,Window<T>>> window(final WindowSpecification<T> specification1,final WindowSpecification<T> specification2,final WindowSpecification<T> specification3,final WindowSpecification<T> specification4,final WindowSpecification<T> specification5,final WindowSpecification<T> specification6,final WindowSpecification<T> specification7,final WindowSpecification<T> specification8,final WindowSpecification<T> specification9,final WindowSpecification<T> specification10,final WindowSpecification<T> specification11,final WindowSpecification<T> specification12,final WindowSpecification<T> specification13,final WindowSpecification<T> specification14){  return fromStream(Seq.super.window(specification1,specification2,specification3,specification4,specification5,specification6,specification7,specification8,specification9,specification10,specification11,specification12,specification13,specification14));}  }
class C{  public org.oscm.example.client.SessionServiceStub.CreatePlatformSessionResponseE createPlatformSession(org.oscm.example.client.SessionServiceStub.CreatePlatformSessionE createPlatformSession6) throws java.rmi.RemoteException, org.oscm.example.client.ValidationExceptionException {  org.apache.axis2.context.MessageContext _messageContext=null;  try {    org.apache.axis2.client.OperationClient _operationClient=_serviceClient.createClient(_operations[3].getName());    _operationClient.getOptions().setAction("http://oscm.org/SessionService/createPlatformSessionRequest");    _operationClient.getOptions().setExceptionToBeThrownOnSOAPFault(true);    addPropertyToOperationClient(_operationClient,org.apache.axis2.description.WSDL2Constants.ATTR_WHTTP_QUERY_PARAMETER_SEPARATOR,"&");    _messageContext=new org.apache.axis2.context.MessageContext();    org.apache.axiom.soap.SOAPEnvelope env=null;    env=toEnvelope(getFactory(_operationClient.getOptions().getSoapVersionURI()),createPlatformSession6,optimizeContent(new javax.xml.namespace.QName("http://oscm.org","createPlatformSession")));    _serviceClient.addHeadersToEnvelope(env);    _messageContext.setEnvelope(env);    _operationClient.addMessageContext(_messageContext);    _operationClient.execute(true);    org.apache.axis2.context.MessageContext _returnMessageContext=_operationClient.getMessageContext(org.apache.axis2.wsdl.WSDLConstants.MESSAGE_LABEL_IN_VALUE);    org.apache.axiom.soap.SOAPEnvelope _returnEnv=_returnMessageContext.getEnvelope();    java.lang.Object object=fromOM(_returnEnv.getBody().getFirstElement(),org.oscm.example.client.SessionServiceStub.CreatePlatformSessionResponseE.class,getEnvelopeNamespaces(_returnEnv));    return (org.oscm.example.client.SessionServiceStub.CreatePlatformSessionResponseE)object;  } catch (  org.apache.axis2.AxisFault f) {    org.apache.axiom.om.OMElement faultElt=f.getDetail();    if (faultElt != null) {      if (faultExceptionNameMap.containsKey(faultElt.getQName())) {        try {          java.lang.String exceptionClassName=(java.lang.String)faultExceptionClassNameMap.get(faultElt.getQName());          java.lang.Class exceptionClass=java.lang.Class.forName(exceptionClassName);          java.lang.Exception ex=(java.lang.Exception)exceptionClass.newInstance();          java.lang.String messageClassName=(java.lang.String)faultMessageMap.get(faultElt.getQName());          java.lang.Class messageClass=java.lang.Class.forName(messageClassName);          java.lang.Object messageObject=fromOM(faultElt,messageClass,null);          java.lang.reflect.Method m=exceptionClass.getMethod("setFaultMessage",new java.lang.Class[]{messageClass});          m.invoke(ex,new java.lang.Object[]{messageObject});          if (ex instanceof org.oscm.example.client.ValidationExceptionException) {            throw (org.oscm.example.client.ValidationExceptionException)ex;          }          throw new java.rmi.RemoteException(ex.getMessage(),ex);        } catch (        java.lang.ClassCastException e) {          throw f;        }catch (        java.lang.ClassNotFoundException e) {          throw f;        }catch (        java.lang.NoSuchMethodException e) {          throw f;        }catch (        java.lang.reflect.InvocationTargetException e) {          throw f;        }catch (        java.lang.IllegalAccessException e) {          throw f;        }catch (        java.lang.InstantiationException e) {          throw f;        }      } else {        throw f;      }    } else {      throw f;    }  } finally {    _messageContext.getTransportOut().getSender().cleanup(_messageContext);  }}  }
class C{  public OkHttpStack(){  this(new OkHttpClient());}  }
class C{  public MessageEntry addWhoList(Who whoList){  super.addElement(Who.KEY,whoList);  return this;}  }
class C{  public static String arrayCombine(String[] list,char separatorChar){  StatementBuilder buff=new StatementBuilder();  for (  String s : list) {    buff.appendExceptFirst(String.valueOf(separatorChar));    if (s == null) {      s="";    }    for (int j=0, length=s.length(); j < length; j++) {      char c=s.charAt(j);      if (c == '\\' || c == separatorChar) {        buff.append('\\');      }      buff.append(c);    }  }  return buff.toString();}  }
class C{  @Override public void updateTask(){  this.theMinion.getLookHelper().setLookPositionWithEntity(this.target,10.0F,(float)this.theMinion.getVerticalFaceSpeed());  this.theMinion.getNavigator().tryMoveToEntityLiving(this.target,this.moveSpeed);  ++this.grabDelay;  if (this.grabDelay == maxGrabDelay) {    target.mountEntity(theMinion);    resetTask();  }}  }
class C{  @SuppressWarnings({"rawtypes","unchecked"}) static int compareComparables(Class<?> kc,Object k,Object x){  return (x == null || x.getClass() != kc ? 0 : ((Comparable)k).compareTo(x));}  }
class C{  public boolean greaterThan(XObject obj2) throws javax.xml.transform.TransformerException {  if (obj2.getType() == XObject.CLASS_NODESET)   return obj2.lessThan(this);  return this.num() > obj2.num();}  }
class C{  public int cardinality(){  int sum=0;  for (  long l : this.data)   sum+=Long.bitCount(l);  return sum;}  }
class C{  @Override public void input(Object inputText,Network network){  if (!isEnabled()) {    return;  }  TextInput text=null;  if (inputText instanceof TextInput) {    text=(TextInput)inputText;  } else {    text=new TextInput((String)inputText);  }  log("Input",Level.INFO,text.text,getUser(network),getConversation(network));  inputSentence(text,network);}  }
class C{  protected SMTPResponse doDATA(SMTPSession session,String argument){  try {    MimeMessageInputStreamSource mmiss=new MimeMessageInputStreamSource(MailImpl.getId());    session.setAttachment(SMTPConstants.DATA_MIMEMESSAGE_STREAMSOURCE,mmiss,State.Transaction);  } catch (  Exception e) {    session.getLogger().warn("Error creating mimemessagesource for incoming data",e);    return new SMTPResponse(SMTPRetCode.LOCAL_ERROR,"Unexpected error preparing to receive DATA.");  }  session.pushLineHandler(getLineHandler());  return new SMTPResponse(SMTPRetCode.DATA_READY,"Ok Send data ending with <CRLF>.<CRLF>");}  }
class C{  static int applyMaskPenaltyRule2(ByteMatrix matrix){  int penalty=0;  byte[][] array=matrix.getArray();  int width=matrix.getWidth();  int height=matrix.getHeight();  for (int y=0; y < height - 1; y++) {    for (int x=0; x < width - 1; x++) {      int value=array[y][x];      if (value == array[y][x + 1] && value == array[y + 1][x] && value == array[y + 1][x + 1]) {        penalty++;      }    }  }  return N2 * penalty;}  }
class C{  public TraceCondition_ createTraceCondition_(){  TraceCondition_Impl traceCondition_=new TraceCondition_Impl();  return traceCondition_;}  }
class C{  private void checkCache(IgniteCache<Integer,Integer> cache,int key,int expVal) throws Exception {  Integer val=cache.get(key);  assert F.eq(expVal,val) : "Unexpected cache value [key=" + key + ", expected="+ expVal+ ", actual="+ val+ ']';}  }
class C{  private static boolean isWithin(final GeoPoint point,final Set<Edge> edgeSet,final Edge extension,final SidedPlane returnBoundary){  if (!extension.plane.isWithin(point)) {    return false;  }  if (returnBoundary != null && !returnBoundary.isWithin(point)) {    return false;  }  return isWithin(point,edgeSet);}  }
class C{  public URIName(String name) throws IOException {  try {    uri=new URI(name);  } catch (  URISyntaxException use) {    throw new IOException("invalid URI name:" + name,use);  }  if (uri.getScheme() == null) {    throw new IOException("URI name must include scheme:" + name);  }  host=uri.getHost();  if (host != null) {    if (host.charAt(0) == '[') {      String ipV6Host=host.substring(1,host.length() - 1);      try {        hostIP=new IPAddressName(ipV6Host);      } catch (      IOException ioe) {        throw new IOException("invalid URI name (host " + "portion is not a valid IPv6 address):" + name);      }    } else {      try {        hostDNS=new DNSName(host);      } catch (      IOException ioe) {        try {          hostIP=new IPAddressName(host);        } catch (        Exception ioe2) {          throw new IOException("invalid URI name (host " + "portion is not a valid DNS name, IPv4 address," + " or IPv6 address):"+ name);        }      }    }  }}  }
class C{  @Override public boolean startVServer(PropertyHandler paramHandler) throws Exception {  LServerClient vserverClient=getLServerClient(paramHandler);  boolean starting=false;  if (LServerStatus.STOPPED.equals(vserverClient.getStatus())) {    logger.debug("startVServer(PropertyHandler) starting");    vserverClient.start();    starting=true;  }  return starting;}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=29 * result + (this.formatter != null ? this.formatter.hashCode() : 0);  return result;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  ChronoPeriodImpl(Chronology chrono,int years,int months,int days){  Objects.requireNonNull(chrono,"chrono");  this.chrono=chrono;  this.years=years;  this.months=months;  this.days=days;}  }
class C{  public void putFloatArray(String key,float[] value){  unparcel();  mMap.put(key,value);}  }
class C{  public void startOrientationDetection(int smoothness,OrientationListener orientationListener){  startLibrarySensorDetection(new OrientationDetector(smoothness,orientationListener),orientationListener);}  }
class C{  public UserGroupRestRep update(URI id,UserGroupUpdateParam input){  return client.put(UserGroupRestRep.class,input,getIdUrl(),id);}  }
class C{  public WeakLoaderListener(EnvLoaderListener listener){  _listenerRef=new WeakReference<>(listener);}  }
class C{  protected void checkMethodSignature(Method mtd) throws IgniteCheckedException {  Class<?>[] paramTypes=mtd.getParameterTypes();  Collection<Integer> allowedParamIdxs=new LinkedList<>();  for (int i=0; i < paramTypes.length; i++) {    Class<?> paramType=paramTypes[i];    if (GridifyUtils.isMethodParameterTypeAllowed(paramType))     allowedParamIdxs.add(i);  }  if (allowedParamIdxs.isEmpty()) {    throw new IgniteCheckedException("Invalid method signature. Failed to get valid method parameter types " + "[mtdName=" + mtd.getName() + ", allowedTypes="+ GridifyUtils.getAllowedMethodParameterTypes()+ ']');  }  List<Integer> annParamIdxs=new LinkedList<>();  for (int i=0; i < paramTypes.length; i++) {    Class<?> paramType=paramTypes[i];    if (GridifyUtils.isMethodParameterTypeAnnotated(paramType.getDeclaredAnnotations()))     annParamIdxs.add(i);  }  if (annParamIdxs.size() > 1) {    throw new IgniteCheckedException("Invalid method signature. Only one method parameter can may annotated with @" + GridifyInput.class.getSimpleName() + "[mtdName="+ mtd.getName()+ ", allowedTypes="+ GridifyUtils.getAllowedMethodParameterTypes()+ ", annParamIdxs="+ annParamIdxs+ ']');  }  if (allowedParamIdxs.size() > 1 && annParamIdxs.isEmpty()) {    throw new IgniteCheckedException("Invalid method signature. Method parameter must be annotated with @" + GridifyInput.class.getSimpleName() + "[mtdName="+ mtd.getName()+ ", allowedTypes="+ GridifyUtils.getAllowedMethodParameterTypes()+ ", allowedParamIdxs="+ allowedParamIdxs+ ']');  }  if (!annParamIdxs.isEmpty() && !allowedParamIdxs.contains(annParamIdxs.get(0))) {    throw new IgniteCheckedException("Invalid method signature. Invalid annotated parameter " + "[mtdName=" + mtd.getName() + ", allowedTypes="+ GridifyUtils.getAllowedMethodParameterTypes()+ ", allowedParamIdxs="+ allowedParamIdxs+ ", annParamIdxs="+ annParamIdxs+ ']');  }  if (!GridifyUtils.isMethodReturnTypeValid(mtd.getReturnType())) {    throw new IgniteCheckedException("Invalid method signature. Invalid method return type " + "[mtdName=" + mtd.getName() + ", allowedTypes="+ GridifyUtils.getAllowedMethodReturnTypes()+ ", mtdReturnType="+ mtd.getReturnType()+ ']');  }}  }
class C{  public static long nextLong(Random r,long start,long end){  assert end >= start;  final BigInteger range=BigInteger.valueOf(end).add(BigInteger.valueOf(1)).subtract(BigInteger.valueOf(start));  if (range.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) <= 0) {    return start + r.nextInt(range.intValue());  } else {    final BigInteger augend=new BigDecimal(range).multiply(new BigDecimal(r.nextDouble())).toBigInteger();    final long result=BigInteger.valueOf(start).add(augend).longValue();    assert result >= start;    assert result <= end;    return result;  }}  }
class C{  public static boolean isHomozygousAlt(VcfRecord rec,int sample){  final int[] gtArray=getValidGt(rec,sample);  return isHomozygousAlt(gtArray);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void testSendReceive() throws Exception {  Thread.sleep(1000);  messages.clear();  sendMessages();  assertMessagesAreReceived();  LOG.info("" + data.length + " messages(s) received, closing down connections");}  }
class C{  protected boolean addExtension(Extension ext,Class<? extends Extension> extClass){  if (nonRepeatingExtensionMap.containsKey(extClass)) {    return false;  }  nonRepeatingExtensionMap.put(extClass,ext);  return true;}  }
class C{  public void mapTransaction(SIPServerTransaction transaction){  if (transaction.isMapped)   return;  addTransactionHash(transaction);  transaction.isMapped=true;}  }
class C{  public StandardCategoryItemLabelGenerator(String labelFormat,NumberFormat formatter){  super(labelFormat,formatter);}  }
class C{  public StylesheetComposed(Stylesheet parent){  super(parent);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.CONDITIONAL_EXPRESSION__EXPRESSION:    setExpression((Expression)null);  return;case N4JSPackage.CONDITIONAL_EXPRESSION__TRUE_EXPRESSION:setTrueExpression((Expression)null);return;case N4JSPackage.CONDITIONAL_EXPRESSION__FALSE_EXPRESSION:setFalseExpression((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public boolean isThrottleMessage(){  int message=this.getElement(0);  if (message == XNetConstants.LOCO_INFO_NORMAL_UNIT || message == XNetConstants.LOCO_INFO_RESPONSE || message == XNetConstants.LOCO_INFO_MUED_UNIT || message == XNetConstants.LOCO_INFO_MU_ADDRESS || message == XNetConstants.LOCO_INFO_DH_UNIT || message == XNetConstants.LOCO_AVAILABLE_V1 || message == XNetConstants.LOCO_AVAILABLE_V2 || message == XNetConstants.LOCO_NOT_AVAILABLE_V1 || message == XNetConstants.LOCO_NOT_AVAILABLE_V2) {    return true;  }  return false;}  }
class C{  public boolean removeAll(Collection<?> c){  boolean modified=false;  for (  Object e : c)   if (remove(e))   modified=true;  return modified;}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public SystemStreamPartition(SystemStream other,Partition partition){  this(other.getSystem(),other.getStream(),partition);}  }
class C{  public BufferedImagePixelMatrix(final int width,final int height){  if (height <= 0) {    throw new IllegalArgumentException("height must be greater than zero");  }  if (width <= 0) {    throw new IllegalArgumentException("width must be greater than zero");  }  this.image=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  this.propertyChangeSupport=new PropertyChangeSupport(this);}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.info(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("M_Warehouse_ID"))   setM_Warehouse_ID(e.getNewValue());  if (e.getPropertyName().equals("C_BPartner_ID")) {    m_C_BPartner_ID=e.getNewValue();    fBPartner.setValue(m_C_BPartner_ID);  }  executeQuery();}  }
class C{  static public List<NetworkZoningParam> convertExportMaskInitiatorMapsToNetworkZoningParam(URI exportGroupURI,Map<URI,List<URI>> exportMaskToInitiators,DbClient dbClient){  ExportGroup exportGroup=dbClient.queryObject(ExportGroup.class,exportGroupURI);  List<NetworkZoningParam> zoningParams=new ArrayList<NetworkZoningParam>();  for (  Map.Entry<URI,List<URI>> entry : exportMaskToInitiators.entrySet()) {    ExportMask exportMask=dbClient.queryObject(ExportMask.class,entry.getKey());    if (exportMask == null || exportMask.getInactive()) {      throw WorkflowException.exceptions.workflowConstructionError("ExportMask is null: " + entry.getKey().toString());    }    NetworkZoningParam zoningParam=new NetworkZoningParam(exportGroup,exportMask,dbClient);    Set<String> retainedInitiators=StringSetUtil.uriListToSet(entry.getValue());    zoningParam.getZoningMap().keySet().retainAll(retainedInitiators);    zoningParams.add(zoningParam);  }  return zoningParams;}  }
class C{  public void update(){  if (!isDistanceFrequency() || periodicTask == null) {    return;  }  TripStatistics tripStatistics=trackRecordingService.getTripStatistics();  if (tripStatistics == null) {    return;  }  double distance=tripStatistics.getTotalDistance() * UnitConversions.M_TO_KM;  if (!metricUnits) {    distance*=UnitConversions.KM_TO_MI;  }  if (distance > nextTaskDistance) {    periodicTask.run(trackRecordingService);    calculateNextTaskDistance();  }}  }
class C{  public CacheSpan touch(){  long now=System.currentTimeMillis();  File newCacheFile=getCacheFileName(file.getParentFile(),key,position,now);  file.renameTo(newCacheFile);  return CacheSpan.createCacheEntry(key,position,now,newCacheFile);}  }
class C{  private int xTransform(int x){  return (m_localGraphicsState.getXOffset() + x);}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzPushbackPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead < 0) {    return true;  } else {    zzEndRead+=numRead;    return false;  }}  }
class C{  void clearCache(){  sheetSelectionModel.clearTableModelCache();}  }
class C{  public static void processAndRegister(RuntimeServices rs,Node node,String sourceTemplate) throws IOException, ParseException {  int numArgs=node.jjtGetNumChildren();  if (numArgs < 2) {    rs.error("#macro error : Velocimacro must have name as 1st " + "argument to #macro(). #args = " + numArgs);    throw new MacroParseException("First argument to #macro() must be " + " macro name.");  }  int firstType=node.jjtGetChild(0).getType();  if (firstType != ParserTreeConstants.JJTWORD) {    throw new MacroParseException("First argument to #macro() must be a" + " token without surrounding \' or \", which specifies" + " the macro name.  Currently it is a "+ ParserTreeConstants.jjtNodeName[firstType]);  }  String argArray[]=getArgArray(node);  String name=argArray[0];  String[] argumentNames=new String[argArray.length - 1];  System.arraycopy(argArray,1,argumentNames,0,argumentNames.length);  rs.addVelocimacro(name,node.jjtGetChild(numArgs - 1),argumentNames,sourceTemplate);  return;}  }
class C{  private boolean isVisible(final Camera camera,final GameModel gameModel){  if (!gameModel.visibleOnLayers.intersects(engine.getVisibleLayers())) {    return false;  }  gameModel.modelInstance.transform.getTranslation(tmp);  tmp.add(gameModel.center);  return camera.frustum.sphereInFrustum(tmp,gameModel.boundingBoxRadius);}  }
class C{  public static boolean isThreadAlerting(){  return alerting.get();}  }
class C{  public boolean acceptTemplate(String tpl){  if (isInWhiteList(tpl) && !isInBlackList(tpl)) {    if (containsAllowedPrefix(tpl) && !containsRestrictedPrefix(tpl)) {      return true;    } else {      return false;    }  } else {    return false;  }}  }
class C{  protected Integer wrapKey(int k){  return new Integer(k);}  }
class C{  public void ifZCmp(final int mode,final Label label){  mv.visitJumpInsn(mode,label);}  }
class C{  public AutoCloseInputStream(final InputStream in,final ResponseConsumedWatcher watcher){  super(in);  this.watcher=watcher;}  }
class C{  public DoubleIteratorSpliterator(PrimitiveIterator.OfDouble iterator,long size,int characteristics){  this.it=iterator;  this.est=size;  this.characteristics=(characteristics & Spliterator.CONCURRENT) == 0 ? characteristics | Spliterator.SIZED | Spliterator.SUBSIZED : characteristics;}  }
class C{  public void addHeadMap(HashMap<String,String> headers){  getHeaders().putAll(headers);}  }
class C{  public static long average(long[] values){  double sum=0d;  for (  long value : values) {    sum+=value;  }  return (long)(sum / (double)values.length);}  }
class C{  public AsyncHttpResponseHandler(){  if (Looper.myLooper() != null) {    handler=new ResponderHandler(this);  }}  }
class C{  public InlineMethodDescriptor(){  super(IJavaRefactorings.INLINE_METHOD);}  }
class C{  public SymbolTableEntryInternal steFor_N4Accessor(){  return getSymbolTableEntryInternal("N4Accessor",true);}  }
class C{  public ModelStatus(int severity,String pluginId,String modelProviderId,String message){  super(severity,pluginId,0,message,null);  Assert.isNotNull(modelProviderId);  this.modelProviderId=modelProviderId;}  }
class C{  protected boolean hasGraphComputerRequirement(){  return !GraphManager.getTraversalEngineType().equals(TraversalEngine.Type.STANDARD);}  }
class C{  public boolean forEachValue(TDoubleProcedure procedure){  byte[] states=_states;  double[] values=_values;  for (int i=values.length; i-- > 0; ) {    if (states[i] == FULL && !procedure.execute(values[i])) {      return false;    }  }  return true;}  }
class C{  public static Seconds secondsBetween(ReadableInstant start,ReadableInstant end){  int amount=BaseSingleFieldPeriod.between(start,end,DurationFieldType.seconds());  return Seconds.seconds(amount);}  }
class C{  static <T>Injector.BindingBuilder<T> bean(T bean){  Objects.requireNonNull(bean);  return builder().bean(bean);}  }
class C{  private int read(){  if (_parseIndex < _sqlLength)   return _sqlChars[_parseIndex++]; else   return -1;}  }
class C{  private void init(){  preferences=new RaptorPreferenceStore();  install();  ThreadService.getInstance();  ConnectorService.getInstance();}  }
class C{  protected void sequence_S_Experiment(ISerializationContext context,S_Experiment semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private void procFunctions13_20(int currCabId,int c){  if ((c & NceCmdStationMemory.FUNC_H_F13) != 0) {    cabData[currCabId].F13=true;  } else {    cabData[currCabId].F13=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F14) != 0) {    cabData[currCabId].F14=true;  } else {    cabData[currCabId].F14=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F15) != 0) {    cabData[currCabId].F15=true;  } else {    cabData[currCabId].F15=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F16) != 0) {    cabData[currCabId].F16=true;  } else {    cabData[currCabId].F16=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F17) != 0) {    cabData[currCabId].F17=true;  } else {    cabData[currCabId].F17=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F18) != 0) {    cabData[currCabId].F18=true;  } else {    cabData[currCabId].F18=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F19) != 0) {    cabData[currCabId].F19=true;  } else {    cabData[currCabId].F19=false;  }  if ((c & NceCmdStationMemory.FUNC_H_F20) != 0) {    cabData[currCabId].F20=true;  } else {    cabData[currCabId].F20=false;  }}  }
class C{  public MessageDialog(Activity activity){  super(activity,DEFAULT_REQUEST_CODE);  ShareInternalUtility.registerStaticShareCallback(DEFAULT_REQUEST_CODE);}  }
class C{  public boolean isGapToken(){  return gapToken;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case TypesPackage.PROPERTY__CONST:    setConst((Boolean)newValue);  return;case TypesPackage.PROPERTY__READONLY:setReadonly((Boolean)newValue);return;case TypesPackage.PROPERTY__EXTERNAL:setExternal((Boolean)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  void removeTargetsFromStorageView(String viewName,List<PortInfo> targetPortInfo) throws VPlexApiException {  List<VPlexTargetInfo> targetInfoList=new ArrayList<VPlexTargetInfo>();  VPlexClusterInfo clusterInfo=findTargets(targetPortInfo,targetInfoList,true);  if (targetInfoList.size() != targetPortInfo.size()) {    throw VPlexApiException.exceptions.failedToFindAllRequestedTargets();  }  s_logger.info("Found targets ports for storage view");  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  VPlexStorageViewInfo storageViewInfo=discoveryMgr.findStorageViewOnCluster(viewName,clusterInfo.getName(),false);  if (storageViewInfo == null) {    throw VPlexApiException.exceptions.couldNotFindStorageView(viewName);  }  modifyStorageViewTargets(storageViewInfo,targetInfoList,true);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void updateMediaStorage(String url){  if (sLogger.isActivated()) {    sLogger.debug("Updating media storage with URL " + url);  }  MyMediaScannerClient scanner=new MyMediaScannerClient(url);  scanner.scan();}  }
class C{  public UserCredentials(Collection<Field> fields){  this(fields,new HashMap<String,String>());}  }
class C{  private void synchronize(){  s_logger.log(Level.INFO,"");  s_logger.log(Level.INFO,"migrateSynchronize");  if (isUpgrade()) {    dropDBObjects(DBObject_Check.class);    dropDBObjects(DBObject_Unique.class);    dropDBObjects(DBObject_ForeignKey.class);    dropDBObjects(DBObject_View.class);    dropDBObjects(DBObject_Operator.class);    dropDBObjects(DBObject_Trigger.class);    dropDBObjects(DBObject_Function.class);    truncateTemporaryTables();    ArrayList<String> truncatedTables=new ArrayList<String>();    for (Iterator<String> it=m_trackingList.iterator(); it.hasNext(); ) {      truncatedTables.add(it.next());    }    dropSystemClients();    createTemporaryTargetIndexes();    purgeSystemRecords(truncatedTables);    dropDBObjects(DBObject_PrimaryKey.class);    dropDBObjects(DBObject_Index.class);    dropTemporaryIndexes();  }  synchronizeDBSequencesFromSource();  synchronizeTables();  synchronizeDBSequencesDropUnused();  if (isCopy())   convertTriggersToFunctions();  recreateDBObjects(DBObject_Function.class,true);  recreateDBObjects(DBObject_Trigger.class,false);  recreateDBObjects(DBObject_Operator.class,false);  recreateDBObjects(DBObject_View.class,true);  if (isUpgrade()) {    createTemporaryPrimaryKeys();    synchronizePrimaryKeys();  }  synchronizeData();  if (isUpgrade())   dropTemporaryIndexes();  recreateDBObjects(DBObject_Index.class,false);  recreateDBObjects(DBObject_PrimaryKey.class,false);  if (isUpgrade()) {    populateNewParents();    createTemporaryIndexes();    preserveParentLinks();    purgeOrphans();    dropTemporaryIndexes();    enforceCheckConstraints();    cleanupCustomizations();    cleanupADSequences();    cleanupTranslations();    cleanupTerminology();    cleanupTreeNodes();    cleanupSecurity();    bumpVersionInfo();  }  recreateDBObjects(DBObject_ForeignKey.class,false);  recreateDBObjects(DBObject_Check.class,false);  recreateDBObjects(DBObject_Unique.class,false);  m_target.setDoNotInterrupt(false);}  }
class C{  private static void doParentClosureVisit(Graph pag,Node node,Set<Node> closure){  if (!closure.contains(node)) {    closure.add(node);    for (    Edge edge1 : pag.getEdges(node)) {      Node sub=Edges.traverseReverseDirected(node,edge1);      if (sub == null) {        continue;      }      doParentClosureVisit(pag,sub,closure);    }  }}  }
class C{  private ArgUtils(){}  }
class C{  private void addExternalFieldReferences(ClassRef[] sparseRefs){  for (int i=0; i < mFieldIds.length; i++) {    if (!mTypeIds[mFieldIds[i].classIdx].internal) {      FieldIdItem fieldId=mFieldIds[i];      FieldRef newFieldRef=new FieldRef(classNameFromTypeIndex(fieldId.classIdx),classNameFromTypeIndex(fieldId.typeIdx),mStrings[fieldId.nameIdx]);      sparseRefs[mFieldIds[i].classIdx].addField(newFieldRef);    }  }}  }
class C{  public char currentChar(){  return desc.charAt(curPos);}  }
class C{  private Object readResolve() throws ObjectStreamException {  if (this.equals(DomainOrder.ASCENDING)) {    return DomainOrder.ASCENDING;  } else   if (this.equals(DomainOrder.DESCENDING)) {    return DomainOrder.DESCENDING;  } else   if (this.equals(DomainOrder.NONE)) {    return DomainOrder.NONE;  }  return null;}  }
class C{  protected boolean[] canEstimate(AttrTypes attrTypes,boolean supervised,int classType){  print("basic estimation");  printAttributeSummary(attrTypes,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("nominal");  accepts.add("numeric");  accepts.add("string");  accepts.add("date");  accepts.add("relational");  accepts.add("not in classpath");  int numTrain=getNumInstances(), numTest=getNumInstances(), numClasses=2, missingLevel=0;  boolean attributeMissing=false, classMissing=false;  int numAtts=1, attrIndex=0;  return runBasicTest(attrTypes,numAtts,attrIndex,classType,missingLevel,attributeMissing,classMissing,numTrain,numTest,numClasses,accepts);}  }
class C{  public void addPoly(int[] xpoints,int[] ypoints,LinkProperties properties) throws IOException {  LinkPoly.write(xpoints,ypoints,properties,link.dos);}  }
class C{  default B resolved(final boolean resolved){  this.meta().setResolved(resolved);  return this.getBuilder();}  }
class C{  public void clearCredentialsProvider(){  this.httpClient.getCredentialsProvider().clear();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:33.122 -0500",hash_original_method="1E8C38EACEA1E94FE658824D01FD2A18",hash_generated_method="278A7E53643DE73F8A80E1A85A107DD5") public void release(){}  }
class C{  public boolean isConfig(){  return config;}  }
class C{  public DefaultTypeMappingContext(boolean registerDefaults){  this(null);  if (registerDefaults) {    log.info("Trying to register all the default type mappings");    if (isClassPresent(GEMFIRE_SUPPORT_CLASS)) {      log.debug("We seem to have Gemfire in the classpath, so, we should register the supporting registry");      register(Object.class,DefaultGemfireRepository.class);    }    if (isClassPresent(JPA_SUPPORT_CLASS)) {      log.debug("JPA support is enabled in this project, so we need to support the methods");      register(Object.class,DefaultJpaRepository.class);    }    if (isClassPresent(QUERYDSL_SUPPORT_CLASS) && isClassPresent(CGLIB_SUPPORT_CLASS)) {      log.debug("QueryDSL support is enabled. We will add the proper method implementations.");      register(Object.class,DefaultQueryDslPredicateExecutor.class);    }    if (isClassPresent(QUERY_BY_EXAMPLE_SUPPORT_CLASS)) {      log.debug("Query by example is enabled. We will the proper method implementations.");      register(Object.class,DefaultQueryByExampleExecutor.class);    }    register(Object.class,DefaultPagingAndSortingRepository.class);    register(Object.class,DefaultCrudRepository.class);  }}  }
class C{  public static int checkedCompareIgnorCase(String s1,String s2){  if (s1 == null) {    if (s2 == null)     return 0; else     return 1;  } else   if (s2 == null) {    if (s1 == null)     return 0; else     return -1;  }  return s1.toUpperCase().compareTo(s2.toUpperCase());}  }
class C{  @Override public void flushDiskCacheAsync(){  if (DEBUG) {    Log.d(TAG,"flushDishCacheAsync");  }  new FileCacheTask(FileCacheTaskType.flush_cache).excute();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.099 -0400",hash_original_method="90F9D8BE12A4409DA41E0CA93662D129",hash_generated_method="4E7ABC686CA9C6B8AC9AD36A794F05FD") @Override protected void thresholdReached() throws IOException {  if (prefix != null) {    outputFile=File.createTempFile(prefix,suffix,directory);  }  FileOutputStream fos=new FileOutputStream(outputFile);  memoryOutputStream.writeTo(fos);  currentOutputStream=fos;  memoryOutputStream=null;}  }
class C{  void validConversion(Converter converter,Object expected,Object value){  String valueType=(value == null ? "null" : value.getClass().getName());  String msg="Converting '" + valueType + "' value '"+ value+ "'";  try {    Object result=converter.convert(getExpectedType(),value);    Class<?> resultType=(result == null ? null : result.getClass());    Class<?> expectType=(expected == null ? null : expected.getClass());    assertEquals("TYPE " + msg,expectType,resultType);    assertEquals("VALUE " + msg,expected,result);  } catch (  Exception ex) {    fail(msg + " threw " + ex.toString());  }}  }
class C{  public Snapshot createSnapshot(long index){  SnapshotDescriptor descriptor=SnapshotDescriptor.builder().withIndex(index).withTimestamp(System.currentTimeMillis()).build();  return createSnapshot(descriptor);}  }
class C{  public synchronized boolean activateLatestIndex(String name) throws ReindexerAlreadyRunningException {  OnlineReindexer<?,?,?> reindexer=reindexers.get(name);  validateReindexerNotRunning(reindexer);  if (!isCurrentIndexVersionLatest(name,reindexer)) {    reindexer.activateIndex();    return true;  }  return false;}  }
class C{  public void showPerspective(final String perspectiveName){  showPerspective(model.getPerspective(perspectiveName));}  }
class C{  public static String implode(Object[] elements,String delimiter){  StringBuffer buffer=new StringBuffer("");  for (int i=0; i < elements.length - 1; i++) {    buffer.append((String)elements[i] + delimiter);  }  buffer.append((String)elements[elements.length - 1]);  return buffer.toString();}  }
class C{  public static Composite subpart(final Composite parent,final String label){  final Composite subpart=new Composite(parent,SWT.NONE);  final RowLayout across=new RowLayout();  across.type=SWT.HORIZONTAL;  across.wrap=true;  across.pack=true;  across.fill=true;  across.marginBottom=1;  across.marginRight=2;  subpart.setLayout(across);  final Label labell=new Label(subpart,SWT.LEFT);  labell.setText(label);  final RowData data=new RowData();  data.width=40;  final GC gc=new GC(parent.getParent());  gc.setFont(parent.getParent().getFont());  final FontMetrics fontMetrics=gc.getFontMetrics();  gc.dispose();  final int labelWidth=Dialog.convertWidthInCharsToPixels(fontMetrics,labell.getText().length() + 1);  if (labelWidth > data.width) {    data.width=labelWidth;  }  data.height=10;  labell.setLayoutData(data);  return subpart;}  }
class C{  @POST @Path("recover/{usermail}") public void recoverPassword(@PathParam("usermail") String mail) throws ServerException, NotFoundException {  try {    userDao.getByEmail(mail);    String uuid=recoveryStorage.generateRecoverToken(mail);    Map<String,String> props=new HashMap<>();    props.put("logo.cid",LOGO_CID);    props.put("id",uuid);    props.put("validation.token.age.message",String.valueOf(validationMaxAge) + " hour");    props.put("com.codenvy.masterhost.url",uriInfo.getBaseUriBuilder().replacePath(null).build().toString());    File logo=new File(this.getClass().getResource(LOGO).getPath());    AttachmentDto attachmentDto=newDto(AttachmentDto.class).withContent(Base64.getEncoder().encodeToString(Files.toByteArray(logo))).withContentId(LOGO_CID).withFileName("logo.png");    EmailBeanDto emailBeanDto=newDto(EmailBeanDto.class).withBody(Deserializer.resolveVariables(readAndCloseQuietly(getResource(MAIL_TEMPLATE)),props)).withFrom(mailSender).withTo(mail).withReplyTo(null).withSubject(recoverMailSubject).withMimeType(TEXT_HTML).withAttachments(Collections.singletonList(attachmentDto));    mailService.sendMail(emailBeanDto);  } catch (  NotFoundException e) {    throw new NotFoundException("User " + mail + " is not registered in the system.");  }catch (  ApiException|IOException e) {    LOG.error("Error during setting user's password",e);    throw new ServerException("Unable to recover password. Please contact support or try later.");  }}  }
class C{  public static Test suite(){  return (new TestSuite(MissingViewITCase.class));}  }
class C{  @Override protected void deviceFrameRect(int x,int y,int width,int height,Color color){  AffineTransform deviceTransform=getTransform();  int transformType=deviceTransform.getType();  boolean usePath=((transformType & (AffineTransform.TYPE_GENERAL_ROTATION | AffineTransform.TYPE_GENERAL_TRANSFORM)) != 0);  if (usePath) {    draw(new Rectangle2D.Float(x,y,width,height));    return;  }  Stroke stroke=getStroke();  if (stroke instanceof BasicStroke) {    BasicStroke lineStroke=(BasicStroke)stroke;    int endCap=lineStroke.getEndCap();    int lineJoin=lineStroke.getLineJoin();    if ((endCap == BasicStroke.CAP_SQUARE) && (lineJoin == BasicStroke.JOIN_MITER) && (lineStroke.getMiterLimit() == 10.0f)) {      float lineWidth=lineStroke.getLineWidth();      Point2D.Float penSize=new Point2D.Float(lineWidth,lineWidth);      deviceTransform.deltaTransform(penSize,penSize);      float deviceLineWidth=Math.min(Math.abs(penSize.x),Math.abs(penSize.y));      Point2D.Float ul_pos=new Point2D.Float(x,y);      deviceTransform.transform(ul_pos,ul_pos);      Point2D.Float lr_pos=new Point2D.Float(x + width,y + height);      deviceTransform.transform(lr_pos,lr_pos);      float w=(float)(lr_pos.getX() - ul_pos.getX());      float h=(float)(lr_pos.getY() - ul_pos.getY());      WPrinterJob wPrinterJob=(WPrinterJob)getPrinterJob();      if (wPrinterJob.selectStylePen(endCap,lineJoin,deviceLineWidth,color) == true) {        wPrinterJob.frameRect((float)ul_pos.getX(),(float)ul_pos.getY(),w,h);      } else {        double lowerRes=Math.min(wPrinterJob.getXRes(),wPrinterJob.getYRes());        if ((deviceLineWidth / lowerRes) < MAX_THINLINE_INCHES) {          wPrinterJob.selectPen(deviceLineWidth,color);          wPrinterJob.frameRect((float)ul_pos.getX(),(float)ul_pos.getY(),w,h);        } else {          draw(new Rectangle2D.Float(x,y,width,height));        }      }    } else {      draw(new Rectangle2D.Float(x,y,width,height));    }  }}  }
class C{  public static void doubleBenchmarkMult(int runs,int rows,int columns,String kind,boolean print,int initialCapacity,double minLoadFactor,double maxLoadFactor){  System.out.println("benchmarking double matrix");  cern.colt.Timer timer1=new cern.colt.Timer();  cern.colt.Timer timer2=new cern.colt.Timer();  long size=(((long)rows) * columns) * runs;  DoubleMatrix2D matrix=null;  if (kind.equals("sparse"))   matrix=new SparseDoubleMatrix2D(rows,columns,initialCapacity,minLoadFactor,maxLoadFactor); else   if (kind.equals("dense"))   matrix=new DenseDoubleMatrix2D(rows,columns); else   throw new RuntimeException("unknown kind");  System.out.println("\nNow multiplying...");  matrix.assign(1);  for (int i=0; i < runs; i++) {    timer1.start();    cern.colt.matrix.doublealgo.Transform.mult(matrix,3);    timer1.stop();  }  timer1.display();  System.out.println(size / timer1.seconds() + " elements / sec");  if (print) {    System.out.println(matrix);  }  System.out.println("\nNow multiplying2...");  matrix.assign(1);  for (int i=0; i < runs; i++) {    timer2.start();    cern.colt.matrix.doublealgo.Transform.mult(matrix,3);    timer2.stop();  }  timer2.display();  System.out.println(size / timer2.seconds() + " elements / sec");  if (print) {    System.out.println(matrix);  }  System.out.println("bye bye.");}  }
class C{  @Override public int eDerivedOperationID(int baseOperationID,Class<?> baseClass){  if (baseClass == JSDocNode.class) {switch (baseOperationID) {case DomPackage.JS_DOC_NODE___TO_STRING:      return DomPackage.FULL_MEMBER_REFERENCE___TO_STRING;default :    return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == SimpleTypeReference.class) {switch (baseOperationID) {case DomPackage.SIMPLE_TYPE_REFERENCE___TO_STRING:  return DomPackage.FULL_MEMBER_REFERENCE___TO_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}if (baseClass == FullTypeReference.class) {switch (baseOperationID) {case DomPackage.FULL_TYPE_REFERENCE___TO_STRING:return DomPackage.FULL_MEMBER_REFERENCE___TO_STRING;default :return super.eDerivedOperationID(baseOperationID,baseClass);}}return super.eDerivedOperationID(baseOperationID,baseClass);}  }
class C{  public long version(){  return Long.valueOf(file.getName().substring(file.getName().lastIndexOf(PART_SEPARATOR) + 1,file.getName().lastIndexOf(EXTENSION_SEPARATOR)));}  }
class C{  public boolean isConnected(){  return false;}  }
class C{  @Override protected void applyEditorTo(MuleConfiguration runnerConfiguration) throws ConfigurationException {  runnerConfiguration.setVmArgs(this.configurationPanel.getVmArgsField().getText());  final Object selectedItem=this.configurationPanel.getMuleHome().getSelectedItem();  runnerConfiguration.setMuleHome(selectedItem instanceof MuleSdk ? ((MuleSdk)selectedItem).getMuleHome() : "");  final Module selectedModule=this.configurationPanel.getModuleCombo().getSelectedModule();  if (selectedModule != null) {    runnerConfiguration.setModule(selectedModule);  }}  }
class C{  public void processRequest(StunMessageEvent evt){synchronized (this) {    receivedRequests.add(evt);    notifyAll();  }}  }
class C{  private String insertProperties(String template,Map<String,String> properties){  for (  Entry<String,String> entry : properties.entrySet()) {    template=template.replace(entry.getKey(),entry.getValue());  }  return template;}  }
class C{  public boolean isNull(){  return x == 0 && y == 0 && z == 0;}  }
class C{  public void deleteMappingProfile(String instanceId) throws StorageCenterAPIException {  RestResult rr=restClient.delete(String.format("StorageCenter/ScMappingProfile/%s",instanceId));  if (!checkResults(rr)) {    throw new StorageCenterAPIException(rr.getErrorMsg());  }}  }
class C{  public boolean isPreDestroyCalled(){  return this.preDestroyCalled;}  }
class C{  public static ConcurrentModificationException newConcurrentModificationException(String message){  return new ConcurrentModificationException(formatMessage(0,message));}  }
class C{  public void ensureColumns(int columns,List<String> excludedVariableNames){  for (int col=getNumColumns(); col < columns; col++) {    int i=0;    String _name;    while (true) {      _name="X" + (++i);      if (getVariable(_name) == null && !excludedVariableNames.contains(_name))       break;    }    ContinuousVariable variable=new ContinuousVariable(_name);    addVariable(variable);  }}  }
class C{  public void write(ResourceBundle i18n,String key,Object arg) throws IOException {  write(getString(i18n,key,arg));}  }
class C{  public static void replace(FileSystem fs,Path current,Path replacement,boolean removeOld) throws IOException {  Path old=new Path(current + ".old");  if (fs.exists(current)) {    fs.rename(current,old);  }  fs.rename(replacement,current);  if (fs.exists(old) && removeOld) {    fs.delete(old,true);  }}  }
class C{  public Vector3 solve33(Vector3 b){  double det=this.determinant();  if (Math.abs(det) > Epsilon.E) {    det=1.0 / det;  }  Vector3 r=new Vector3();  double m00=this.m11 * this.m22 - this.m12 * this.m21;  double m01=-this.m01 * this.m22 + this.m21 * this.m02;  double m02=this.m01 * this.m12 - this.m11 * this.m02;  double m10=-this.m10 * this.m22 + this.m20 * this.m12;  double m11=this.m00 * this.m22 - this.m20 * this.m02;  double m12=-this.m00 * this.m12 + this.m10 * this.m02;  double m20=this.m10 * this.m21 - this.m20 * this.m11;  double m21=-this.m00 * this.m21 + this.m20 * this.m01;  double m22=this.m00 * this.m11 - this.m10 * this.m01;  r.x=det * (m00 * b.x + m01 * b.y + m02 * b.z);  r.y=det * (m10 * b.x + m11 * b.y + m12 * b.z);  r.z=det * (m20 * b.x + m21 * b.y + m22 * b.z);  return r;}  }
class C{  public HypervolumeContributionFitnessEvaluator(Problem problem){  this(problem,100.0);}  }
class C{  private static void checkParameters(MultipleCategorySeries dataset,DefaultRenderer renderer){  if (dataset == null || renderer == null || !checkMultipleSeriesItems(dataset,renderer.getSeriesRendererCount())) {    throw new IllegalArgumentException("Titles and values should be not null and the dataset number of items should be equal to the number of series renderers");  }}  }
class C{  public void reset() throws IOException {  in.reset();  bytesLeft=bytesLeftAtMark;}  }
class C{  public void test_default_graph_joins_01e() throws Exception {  if (!store.isQuads())   return;  new TestHelper("default-graph-joins-01e","default-graph-joins-01e.rq","default-graph-joins-01.trig","default-graph-joins-01e.srx").runTest();}  }
class C{  public CSVParser(char separator,char quotechar,char escape,boolean strictQuotes,boolean ignoreLeadingWhiteSpace,boolean ignoreQuotations,boolean ignoreEscape){  this(separator,quotechar,escape,strictQuotes,ignoreLeadingWhiteSpace,ignoreQuotations);  this.ignoreEscapeChar=ignoreEscape;}  }
class C{  public void Done(){  buffer=null;  bufline=null;  bufcolumn=null;}  }
class C{  public ExponentialConstantModel(String name,Parameter N0Parameter,Parameter growthRateParameter,Parameter transitionTimeParameter,Type units){  super(name);  exponentialConstant=new ExpConstant(units);  this.N0Parameter=N0Parameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.growthRateParameter=growthRateParameter;  addVariable(growthRateParameter);  growthRateParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,1));  this.transitionTimeParameter=transitionTimeParameter;  addVariable(transitionTimeParameter);  transitionTimeParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,1));  setUnits(units);}  }
class C{  public static double regularizedGammaP(final double a,final double x){  if (Double.isInfinite(a) || Double.isInfinite(x) || !(a > 0.0)|| !(x >= 0.0)) {    return Double.NaN;  }  if (x == 0.0) {    return 0.0;  }  if (x >= a + 1) {    return 1.0 - regularizedGammaQ(a,x);  }  double term=1.0 / a;  double sum=term;  for (int n=1; n < MAX_ITERATIONS; n++) {    term=x / (a + n) * term;    sum=sum + term;    if (sum == Double.POSITIVE_INFINITY) {      return 1.0;    }    if (Math.abs(term / sum) < NUM_PRECISION) {      break;    }  }  return Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;}  }
class C{  public static void main(String[] args){  double[][] matrix=getMatrix();  System.out.println("Sum of the elements in the major diagonal is " + sumMajorDiagonal(matrix));}  }
class C{  @SuppressWarnings("unchecked") private void createTemporaryPrimaryKeys(){  resetDBObjects(DBObject_PrimaryKey.class);  DBObject dbObject=null;  Class objectClass=DBObject_Index.class;  if (objectClass != null)   dbObject=new DBObject(objectClass);  if (dbObject != null) {    m_objectType=dbObject.getObjectType();    m_objectTypes=dbObject.getObjectTypes();  }  m_tempIndexes=new HashMap<String,DBObject>();  s_logger.log(Level.CONFIG,"");  s_logger.log(Level.CONFIG,"createTemporaryIndexes",new Object[]{m_objectTypes,m_direction});  m_counterAdd=new Integer(0);  m_totalAdd=new Integer(0);  for (Iterator<String> pkit=m_objectList.iterator(); pkit.hasNext(); ) {    String key=pkit.next();    DBObject obj=m_sourceMap.get(key);    if (obj == null) {      obj=m_targetMap.get(key);      if (obj.getCustomizationLevel() == s_parameters.CUSTOMNONE)       obj=null;    }    if (obj != null) {      Vector<Integer> v=new Vector<Integer>(obj.getContents().keySet());      for (Iterator<Integer> colit=v.iterator(); colit.hasNext(); ) {        int colkey=colit.next();        DBObject_PrimaryKey_Column pkdetail=(DBObject_PrimaryKey_Column)obj.getContents().get(colkey);        String tableName=pkdetail.getTable();        String columnName=pkdetail.getColumn();        String indexName=new StringBuffer(s_parameters.TEMPNDXNAME).append("_p_").append(String.format("%05d",m_counterAdd)).toString();        DBObject index=new DBObject(m_target,objectClass,indexName);        DBObject_Index_Table header=new DBObject_Index_Table(m_target,indexName,0);        header.initializeDefinition(tableName,false);        HashMap<Integer,DBObjectDefinition> headers=new HashMap<Integer,DBObjectDefinition>();        headers.put(new Integer(0),header);        index.setHeaders(headers);        DBObject_Index_Column column=new DBObject_Index_Column(m_target,indexName,0);        column.initializeDefinition(tableName,columnName,"ASC","LAST");        HashMap<Integer,DBObjectDefinition> contents=new HashMap<Integer,DBObjectDefinition>();        contents.put(new Integer(0),column);        index.setContents(contents);        if (index.create(m_target)) {          m_tempIndexes.put(indexName.toUpperCase(),index);          m_counterAdd=new Integer(m_counterAdd.intValue() + 1);        }        m_totalAdd=new Integer(m_totalAdd.intValue() + 1);      }    }  }  logResults();}  }
class C{  public byte[] readBytes(int howmany,boolean allowless) throws EOFException, FormatException {  byte foo[]=new byte[howmany];  int gotsofar=0;  try {    while (gotsofar < howmany) {      int err=read(foo,gotsofar,howmany - gotsofar);      if (err == -1) {        if (allowless) {          byte retval[]=new byte[gotsofar];          System.arraycopy(foo,0,retval,0,gotsofar);          return retval;        } else {          if (gotsofar > 0) {            throw new FormatException("EOF while reading");          } else {            throw new EOFException();          }        }      }      gotsofar+=err;    }  } catch (  IOException i) {    throw new FormatException("IOException reading file: " + i.getMessage());  }  return foo;}  }
class C{  @Override public void chartChanged(ChartChangeEvent event){  draw();}  }
class C{  public static double[][] identity(int m){  return diagonal(m,1.0);}  }
class C{  public Document read(InputStream in) throws DocumentException, IOException, XmlPullParserException {  return read(createReader(in));}  }
class C{  public static void main(String[] args){  try {    ListOperationsResponse resp=checkTransfer(TransferClientCreator.createStorageTransferClient(),PROJECT_ID,JOB_NAME);    LOG.info("Result of transferOperations/list: " + resp.toPrettyString());  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  RegularPolygon(){  n=3;  side=1;  x=y=0;}  }
class C{  public YieldExpression createYieldExpression(){  YieldExpressionImpl yieldExpression=new YieldExpressionImpl();  return yieldExpression;}  }
class C{  private Map<TestCase,Set<TestFitnessFunction>> initializeCoverageMapFromTests(List<TestCase> tests){  Map<TestCase,Set<TestFitnessFunction>> testToGoals=new LinkedHashMap<>();  for (  TestCase test : tests) {    testToGoals.put(test,filterSupportedGoals(new LinkedHashSet<>(test.getCoveredGoals())));  }  return testToGoals;}  }
class C{  boolean ctrlClicked(int stateMask){  return (SWT.MOD1 & stateMask) != 0;}  }
class C{  public RotatableDrawable(Drawable[] layers){  super(layers);}  }
class C{  public ApplierException(Throwable cause){  super(cause);}  }
class C{  public void giveKit(Player player){  Profile profile=PLUGIN.getProfile(player);  KitType kitType=isHuman(player) ? profile.getHumanKit() : profile.getZombieKit();  if (kitType == null) {    kitType=isHuman(player) ? KitType.ARCHER : KitType.MILKMAN;  }  kitType.getKitAction().giveKit(player);}  }
class C{  private static void checkParameters(CategorySeries dataset,DefaultRenderer renderer){  if (dataset == null || renderer == null || dataset.getItemCount() != renderer.getSeriesRendererCount()) {    throw new IllegalArgumentException("Dataset and renderer should be not null and the dataset number of items should be equal to the number of series renderers");  }}  }
class C{  public boolean download(IProgressListener ipl){  String end="";  if (shouldExtract)   end+=".gz";  return Util.download(MCEF.VERSION + '/' + platform+ '/'+ name+ end,new File(ClientProxy.ROOT,name),shouldExtract,ipl);}  }
class C{  public void add(TickUnit unit){  if (unit == null) {    throw new NullPointerException("Null 'unit' argument.");  }  this.tickUnits.add(unit);  Collections.sort(this.tickUnits);}  }
class C{  public static BufferedImage createColorModelCompatibleImage(BufferedImage image){  ColorModel cm=image.getColorModel();  return new BufferedImage(cm,cm.createCompatibleWritableRaster(image.getWidth(),image.getHeight()),cm.isAlphaPremultiplied(),null);}  }
class C{  public boolean isSelfClosed(){  return selfClosed;}  }
class C{  void inheritDomainRange(){  for (  OwlProperty ancestorProperty : superProperties) {    for (    OwlClass c : ancestorProperty.domain) {      addDomain(c);    }    for (    OwlClass c : ancestorProperty.range) {      addRange(c);    }  }  for (  OwlClass domainClass : new HashSet<OwlClass>(this.domain)) {    domainClass.inheritDomains(this);  }  for (  OwlClass rangeClass : new HashSet<OwlClass>(this.range)) {    rangeClass.inheritRanges(this);  }}  }
class C{  private RenderUtils(){}  }
class C{  public void dec(){  dec(1);}  }
class C{  private static boolean evalIntegerOp(final IRepFilterBean filterBean,final Double value){  if (value == null)   return false;  final double fvalue=((Integer)filterBean.getValue()).doubleValue();switch ((Operator)filterBean.getOperator()) {case EQUAL:    return value == fvalue;case GREATER_THAN:  return value > fvalue;case GREATER_THAN_OR_EQUAL:return value >= fvalue;case LESS_THAN:return value < fvalue;case LESS_THAN_OR_EQUAL:return value <= fvalue;case NOT_EQUAL:return value != fvalue;default :throw new RuntimeException("Unhandled operator: " + filterBean.getOperator());}}  }
class C{  public SVGOMMarkerElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public static int clamp(int n,int min,int max){  if (n < min)   return min;  if (n > max)   return max;  return n;}  }
class C{  public double localScore(int i,int[] parents){  double sum=0.0;  int count=0;  for (  SemBicScore score : semBicScores) {    double _score=score.localScore(i,parents);    if (!Double.isNaN(_score)) {      sum+=_score;      count++;    }  }  return sum / count;}  }
class C{  public BasicLineParser(){  this(null);}  }
class C{  public void comment(String comment) throws SAXException {  flushPending();  if (m_lexHandler != null) {    final int len=comment.length();    if (len > m_charsBuff.length) {      m_charsBuff=new char[len * 2 + 1];    }    comment.getChars(0,len,m_charsBuff,0);    m_lexHandler.comment(m_charsBuff,0,len);    if (m_tracer != null)     super.fireCommentEvent(m_charsBuff,0,len);  }}  }
class C{  public Date lmstToDate(int sol,int hour,int minute,int second){  if (timeUtil == null) {    timeUtil=new TimeUtil(getEpoch().getTime(),getToEarth());  }  return (new Date(timeUtil.lmst2Time(sol,hour,minute,second)));}  }
class C{  public static String format(boolean[] b,final String sep){  return (b == null) ? "null" : (b.length == 0) ? "" : formatTo(new StringBuilder(),b,", ").toString();}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_11:    getAnonymous_constantDeclaration_1_1().clear();  getAnonymous_constantDeclaration_1_1().addAll((Collection<? extends Anonymous_constantDeclaration_1_>)newValue);return;case UmplePackage.CONSTANT_DECLARATION___ANONYMOUS_CONSTANT_DECLARATION_21:getAnonymous_constantDeclaration_2_1().clear();getAnonymous_constantDeclaration_2_1().addAll((Collection<? extends Anonymous_constantDeclaration_2_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  public span addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public boolean initialize(){  if (mBluetoothManager == null) {    mBluetoothManager=(BluetoothManager)getSystemService(Context.BLUETOOTH_SERVICE);    if (mBluetoothManager == null) {      Log.e(TAG,"Unable to initialize BluetoothManager.");      return false;    }  }  mBluetoothAdapter=mBluetoothManager.getAdapter();  if (mBluetoothAdapter == null) {    Log.e(TAG,"Unable to obtain a BluetoothAdapter.");    return false;  }  return true;}  }
class C{  public static void process(SsaMethod ssaMethod){  new SCCP(ssaMethod).run();}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element lastEmployee;  NodeList lastempList;  Node child;  String childName;  java.util.List result=new java.util.ArrayList();  java.util.List expectedResult=new java.util.ArrayList();  expectedResult.add("employeeId");  expectedResult.add("name");  expectedResult.add("position");  expectedResult.add("salary");  expectedResult.add("gender");  expectedResult.add("address");  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("employee");  lastEmployee=(Element)elementList.item(4);  lastempList=lastEmployee.getElementsByTagName("*");  for (int indexN1006A=0; indexN1006A < lastempList.getLength(); indexN1006A++) {    child=(Node)lastempList.item(indexN1006A);    childName=child.getNodeName();    result.add(childName);  }  assertEquals("tagNames",expectedResult,result);}  }
class C{  public int read() throws IOException {  return 'W';}  }
class C{  public boolean delete(String id){  if (backends.containsKey(id)) {    backends.remove(id);    return true;  } else {    return false;  }}  }
class C{  public static synchronized Cache createCache(){  if (cache == null) {    Properties dsp=new Properties();    dsp.setProperty(MCAST_PORT,"0");    dsp.setProperty(LOCATORS,"");    DistributedSystem sys=DistributedSystem.connect(dsp);    try {      cache=CacheFactory.create(sys);    } catch (    CacheExistsException exp) {      cache=CacheFactory.getInstance(sys);    }catch (    RegionExistsException rex) {      cache=CacheFactory.getInstance(sys);    }  }  return cache;}  }
class C{  public static void copy(File from,OutputStream to) throws IOException {  asByteSource(from).copyTo(to);}  }
class C{  public void testEmptyField() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter iw=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(newTextField("foo","bar",Field.Store.NO));  iw.addDocument(doc);  IndexReader ir=iw.getReader();  iw.close();  IndexSearcher is=newSearcher(ir);  for (  Similarity sim : sims) {    is.setSimilarity(sim);    BooleanQuery.Builder query=new BooleanQuery.Builder();    query.add(new TermQuery(new Term("foo","bar")),BooleanClause.Occur.SHOULD);    query.add(new TermQuery(new Term("bar","baz")),BooleanClause.Occur.SHOULD);    assertEquals(1,is.search(query.build(),10).totalHits);  }  ir.close();  dir.close();}  }
class C{  public final byte[] update(byte[] input,int inputOffset,int inputLen){  if (mode != ENCRYPT_MODE && mode != DECRYPT_MODE) {    throw new IllegalStateException();  }  if (input == null) {    throw new IllegalArgumentException("input == null");  }  checkInputOffsetAndCount(input.length,inputOffset,inputLen);  if (input.length == 0) {    return null;  }  return spiImpl.engineUpdate(input,inputOffset,inputLen);}  }
class C{  public boolean equals(Object t){  return ((t instanceof RefType) && className.equals(((RefType)t).className));}  }
class C{  public static InputStream toInputStream(final String input,final String encoding) throws IOException {  byte[] bytes=input.getBytes(Charsets.toCharset(encoding));  return new ByteArrayInputStream(bytes);}  }
class C{  public SupportVector(double[] x,double y,double alpha){  this.x=x;  this.y=y;  this.alpha=alpha;}  }
class C{  @OnClick(R.id.nested_up_button) public void upButtonOnClick(){  getActivity().startActivity(new Intent(getActivity(),UpNavigationActivity.class));}  }
class C{  public final boolean post(@NonNull Runnable r){  return mExec.post(wrapRunnable(r));}  }
class C{  public static int compute2(int x){  int loops=(x >>> 4) & 7;  while (loops-- > 0) {    x=(x * 2147483647) % 16807;  }  return x;}  }
class C{  private char handleEndOfLine(char c) throws XMLStreamException {  if (c == 0xD) {    if (_readIndex >= _readCount)     reloadBuffer();    if ((_readIndex < _readCount) && (_readBuffer[_readIndex] == 0xA))     _readIndex++;    c=(char)0xA;  }  if (c == 0xA) {    _location._line++;    _location._column=-_readIndex;  } else   if (c == 0x0) {    throw new XMLStreamException("Illegal XML character U+0000",_location);  }  return c;}  }
class C{  @CanIgnoreReturnValue public Stopwatch stop(){  long tick=ticker.read();  checkState(isRunning,"This stopwatch is already stopped.");  isRunning=false;  elapsedNanos+=tick - startTick;  return this;}  }
class C{  @ObjectiveCName("addReactionWithPeer:withRid:withCode:") public Command<Void> addReaction(Peer peer,long rid,String code){  return null;}  }
class C{  public static void writeTrigramIndices() throws Exception {  File files=new File(fileFolder);  for (  File file : files.listFiles()) {    if (file.getName().startsWith(".")) {      continue;    }    if (file.isDirectory()) {      continue;    }    writeIndex(file.getName(),DataConstants.getTrigramAnalyzer(),"trigram");  }}  }
class C{  public final void testBeginsWithUppercaseLetterWithCharSequenceParameter(){  assertNotNull(Validators.beginsWithUppercaseLetter("foo"));}  }
class C{  public Vertex createSentenceText(Vertex vertex,Network network){  StringWriter writer=new StringWriter();  List<Relationship> relationships=vertex.orderedRelationships(Primitive.WORD);  Vertex previous=network.createVertex(Primitive.NULL);  boolean inferWhitespace=!vertex.hasRelationship(Primitive.TYPE,Primitive.SPACE) && !vertex.hasRelationship(Primitive.WORD,Primitive.SPACE);  boolean caseSensitive=!this.fixFormulaCase || vertex.hasRelationship(Primitive.TYPE,Primitive.CASESENSITVE);  if (relationships != null) {    boolean first=true;    String last=null;    for (int index=0; index < relationships.size(); index++) {      Relationship relationship=relationships.get(index);      Vertex next=network.createVertex(Primitive.NULL);      if (relationships.size() > (index + 1)) {        next=relationships.get(index + 1).getTarget();      }      Vertex word=relationship.getTarget();      if (word.is(Primitive.SPACE)) {        writer.write(" ");        continue;      }      if (!(word.getData() instanceof String)) {        word=getWordFollowing(word,relationship,previous,next,network);      }      String text=word.printString();      if (!caseSensitive) {        if (first) {          text=Utils.capitalize(text);        } else         if (text.equals("i") || text.equals("I")) {          text=text.toUpperCase();        } else {          boolean isName=word.instanceOf(Primitive.NAME);          boolean isNoun=word.instanceOf(Primitive.NOUN);          boolean isVerb=word.instanceOf(Primitive.VERB) || word.instanceOf(Primitive.ARTICLE) || word.instanceOf(Primitive.PRONOUN)|| word.instanceOf(Primitive.QUESTION);          if (isName && !isVerb) {            text=Utils.capitalize(text);          } else           if (isVerb && !isName && !isNoun) {            text=text.toLowerCase();          }        }      }      if (inferWhitespace) {        if (!first && !text.equals("'") && !text.equals(")")&& !"(".equals(last)&& !"'".equals(last)&& !text.equals("^")&& !"^".equals(last)&& (!(word.instanceOf(Primitive.PUNCTUATION)))) {          writer.write(" ");        }      }      writer.write(text);      first=text.equals(".");      previous=word;      last=text;    }  }  String text=writer.toString();  Vertex sentence=network.createSentence(text.trim(),true);  if (vertex.hasRelationship(Primitive.TYPE,Primitive.CASESENSITVE)) {    sentence.addRelationship(Primitive.TYPE,Primitive.CASESENSITVE);  }  return sentence;}  }
class C{  public XmlParser(boolean validating,boolean namespaceAware) throws ParserConfigurationException, SAXException {  this(validating,namespaceAware,false);}  }
class C{  public boolean isYearDefined(){  return (year != YEAR_NOT_DEFINED);}  }
class C{  public static File docsDir(){  lock.readLock().lock();  try {    return docs_dir;  }  finally {    lock.readLock().unlock();  }}  }
class C{  static public BufferedReader createReader(InputStream input){  InputStreamReader isr=null;  try {    isr=new InputStreamReader(input,"UTF-8");  } catch (  UnsupportedEncodingException e) {  }  return new BufferedReader(isr);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public boolean canWrite(String path){  return false;}  }
class C{  public <T extends Aspect>Aspect findById(Aspect transientInstance){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    Object aspect=entityManager.find(transientInstance.getClass(),transientInstance.getId());    entityManager.getTransaction().commit();    return (Aspect)aspect;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  @Override public Set<K> keySet(){  Set<K> ks=keySet;  return (ks != null) ? ks : (keySet=new KeySet());}  }
class C{  public AnnotationVisitor visitAnnotationDefault(){  if (mv != null) {    return mv.visitAnnotationDefault();  }  return null;}  }
class C{  private void executeToTaint(Stmt stmt,InvokeExpr invokeExpr,State state){  Block block=this.superControlFlowGraph.unitToBlock.get(stmt);  Body body=block.getBody();  SootMethod method=body.getMethod();  if (stmt instanceof AssignStmt) {    Immediate argImmediate=(Immediate)invokeExpr.getArg(0);    if (argImmediate instanceof Local) {      Local argLocal=(Local)argImmediate;      Local lLocal=(Local)((AssignStmt)stmt).getLeftOp();      Set<MethodOrMethodContext> methodContexts=PTABridge.v().getMethodContexts(method);      for (      MethodOrMethodContext methodContext : methodContexts) {        Context context=methodContext.context();        if (ignoreContext(context)) {          continue;        }        ImmutableSet<InfoValue> values=state.locals.get(context,argLocal);        state.locals.putW(context,lLocal,values);      }    }  }}  }
class C{  private void checkIdUnicity(SSPHandler sspHandler,Elements elements,TestSolutionHandler testSolutionHandler){  if (elements.isEmpty() || !elements.hasAttr(ID_ATTR)) {    testSolutionHandler.addTestSolution(TestSolution.NOT_APPLICABLE);    return;  }  TestSolution testSolution=getSuccessSolution();  for (  Element el : elements) {    if (el.hasAttr(ID_ATTR) && StringUtils.isNotBlank(el.id()) && getIdPresenceCounter(sspHandler,el.id()) > 1) {      testSolution=getFailureSolution();      addSourceCodeRemark(getFailureSolution(),el,getFailureMsgCode());    }  }  testSolutionHandler.addTestSolution(testSolution);}  }
class C{  void run(boolean lastRound,boolean errorStatus){  printRoundInfo(lastRound);  if (!taskListener.isEmpty())   taskListener.started(new TaskEvent(TaskEvent.Kind.ANNOTATION_PROCESSING_ROUND));  try {    if (lastRound) {      filer.setLastRound(true);      Set<Element> emptyRootElements=Collections.emptySet();      RoundEnvironment renv=new JavacRoundEnvironment(true,errorStatus,emptyRootElements,JavacProcessingEnvironment.this);      discoveredProcs.iterator().runContributingProcs(renv);    } else {      discoverAndRunProcs(context,annotationsPresent,topLevelClasses,packageInfoFiles);    }  } catch (  Throwable t) {    deferredDiagnosticHandler.reportDeferredDiagnostics();    log.popDiagnosticHandler(deferredDiagnosticHandler);    throw t;  } finally {    if (!taskListener.isEmpty())     taskListener.finished(new TaskEvent(TaskEvent.Kind.ANNOTATION_PROCESSING_ROUND));  }}  }
class C{  public JSONException(Throwable cause){  super(cause.getMessage());  this.cause=cause;}  }
class C{  protected void prepare(){  ProcessInfoParameter[] para=getParameter();  for (int i=0; i < para.length; i++) {    String name=para[i].getParameterName();    if (para[i].getParameter() == null)     ; else     if (name.equals("C_Project_ID"))     m_C_Project_ID=((BigDecimal)para[i].getParameter()).intValue(); else     log.log(Level.SEVERE,"prepare - Unknown Parameter: " + name);  }}  }
class C{  public MemoryPrintStream(){  mBytes=new ByteArrayOutputStream();  mPrint=new PrintStream(mBytes);  mWriter=new LineWriter(new OutputStreamWriter(mBytes));}  }
class C{  @Deprecated public SelectionInputDialog(String key,Collection<T> selectionValues,T initialSelectionValue,Object... keyArguments){  this(ApplicationFrame.getApplicationFrame(),key,selectionValues,initialSelectionValue,keyArguments);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:03.063 -0500",hash_original_method="F08D438D948FB59FEDF35DA42629554E",hash_generated_method="262A6B89071B38C45E99B003057D519C") private final int loadResourceBagValue(int ident,int bagEntryId,TypedValue outValue,boolean resolve){  addTaint(ident);  addTaint(bagEntryId);  addTaint(outValue.getTaint());  addTaint(resolve);  return getTaintInt();}  }
class C{  public SpecificInnerOperatorCondition(String name,int index,Class[] willGet,Class[] mustDeliver){  this.name=name;  this.index=index;  this.willGet=willGet;  this.mustDeliver=mustDeliver;}  }
class C{  public static String wrap(String clearText,String key){  byte[] iv=getIv();  byte[] cipherText=encrypt(clearText,key,iv);  byte[] wrapped=new byte[iv.length + cipherText.length];  System.arraycopy(iv,0,wrapped,0,iv.length);  System.arraycopy(cipherText,0,wrapped,16,cipherText.length);  return new String(Base64.encodeBase64(wrapped));}  }
class C{  public void beforeInsert(int index,Object element){  if (index > size || index < 0)   throw new IndexOutOfBoundsException("Index: " + index + ", Size: "+ size);  ensureCapacity(size + 1);  System.arraycopy(elements,index,elements,index + 1,size - index);  elements[index]=element;  size++;}  }
class C{  public static String fontName(){  return _fontName;}  }
class C{  @CalledOnlyBy(AmidstThread.FRAGMENT_LOADER) public void processQueues(){  Dimension dimension=dimensionSetting.get();  updateLayerManager(dimension);  processRecycleQueue();  Fragment fragment;  while ((fragment=loadingQueue.poll()) != null) {    loadFragment(dimension,fragment);    dimension=dimensionSetting.get();    updateLayerManager(dimension);    processRecycleQueue();  }  layerManager.clearInvalidatedLayers();}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public EncodedImage(final AnimationGIF sourceImage,final boolean isStatic){  ByteArrayOutputStream bos=new ByteArrayOutputStream();  try {    bos.write(sourceImage.get());    bos.close();  } catch (  final IOException e) {  }  this.image=new ByteBuffer(bos.toByteArray());  this.extension="gif";  this.isStatic=isStatic;}  }
class C{  public String seedTipText(){  return "Seed for random number generator.";}  }
class C{  public Tasks<VolumeRestRep> deactivate(List<URI> ids,VolumeDeleteTypeEnum deletionType){  URI uri=client.uriBuilder(baseUrl + "/deactivate").queryParam("type",deletionType).build();  TaskList tasks=client.postURI(TaskList.class,new BulkDeleteParam(ids),uri);  return new Tasks<>(client,tasks.getTaskList(),resourceClass);}  }
class C{  public FastItemAdapter<Item> add(List<Item> items){  mItemAdapter.add(items);  return this;}  }
class C{  public void testInitialContextFactory(){  RuntimeConfiguration configuration=new Jonas4xRuntimeConfiguration();  configuration.setProperty(JonasPropertySet.JONAS_MEJB_JNDI_INIT_CTX_FACT,"foo");  Hashtable<String,Object> connectionOptions=factory.readConfiguration(configuration);  assertEquals(connectionOptions.get(Context.INITIAL_CONTEXT_FACTORY),"foo");  assertEquals(connectionOptions.get(Context.PROVIDER_URL),MEJBMBeanServerConnectionFactory.DEFAULT_PROVIDER_URI);  assertNull(connectionOptions.get(Context.SECURITY_PRINCIPAL));  assertNull(connectionOptions.get(Context.SECURITY_CREDENTIALS));  assertEquals(factory.mejbJndiPath,MEJBMBeanServerConnectionFactory.DEFAULT_JNDI_MEJB_PATH);  assertNull(factory.username);  assertNull(factory.password);  assertNull(factory.jaasFile);  assertNull(factory.jaasEntry);}  }
class C{  public boolean isInactiveInTransaction(CompositeTransaction tx){  boolean ret=false;  if (currentContext != null && tx != null)   ret=currentContext.isInactiveInTransaction(tx);  return ret;}  }
class C{  public void visitEnum(String name,String desc,String value){  if (av != null) {    av.visitEnum(name,desc,value);  }}  }
class C{  public void updateReductionStatistics(){  DataReductionProxySettings config=DataReductionProxySettings.getInstance();  DataReductionStatsPreference statsPref=(DataReductionStatsPreference)getPreferenceScreen().findPreference(PREF_DATA_REDUCTION_STATS);  long original[]=config.getOriginalNetworkStatsHistory();  long received[]=config.getReceivedNetworkStatsHistory();  statsPref.setReductionStats(config.getDataReductionLastUpdateTime(),getNetworkStatsHistory(original,DAYS_IN_CHART),getNetworkStatsHistory(received,DAYS_IN_CHART));}  }
class C{  public static void write(byte[] data,OutputStream output) throws IOException {  if (data != null) {    output.write(data);  }}  }
class C{  public static TypesFactory init(){  try {    TypesFactory theTypesFactory=(TypesFactory)EPackage.Registry.INSTANCE.getEFactory(TypesPackage.eNS_URI);    if (theTypesFactory != null) {      return theTypesFactory;    }  } catch (  Exception exception) {    EcorePlugin.INSTANCE.log(exception);  }  return new TypesFactoryImpl();}  }
class C{  public boolean isStacked(){  return stacked;}  }
class C{  public byte comparedState(Version version){  if (version.major > major) {    return -1;  } else   if (version.major == major) {    if (version.minor > minor) {      return -1;    } else     if (version.minor == minor) {      if (version.build > build) {        return -1;      } else       if (version.build == build) {        return 0;      } else {        return 1;      }    } else {      return 1;    }  } else {    return 1;  }}  }
class C{  public UDPMasterConnection(InetAddress adr){  address=adr;}  }
class C{  public MessageFormatException(final String description){  super(description);}  }
class C{  public MatrixStack loadMatrix(RealMatrix matrix){  current=matrix;  return this;}  }
class C{  public void countBytes(int amount){  if (this.maxBytes <= 0) {    return;  }  this.bytes+=amount;  if (this.bytes > this.maxBytes) {    throw new RuntimeException("Tried to read NBT tag that was too big; tried to allocate: " + this.bytes + " bytes where max allowed: "+ this.maxBytes);  }}  }
class C{  public boolean isArray(){  return false;}  }
class C{  public static short reverseBytes(short s){  return (short)((s << 8) | ((s >>> 8) & 0xFF));}  }
class C{  public void doPost(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  log.info("From " + request.getRemoteHost() + " - "+ request.getRemoteAddr());  Properties ctx=JSPEnv.getCtx(request);  HttpSession session=request.getSession(true);  session.removeAttribute(WebSessionCtx.HDR_MESSAGE);  org.compiere.util.WebLogin thisLogin=new org.compiere.util.WebLogin(request,response,ctx);  thisLogin.init();  thisLogin.setUpdate_page(UPDATE_JSP);  WebUser wu=WebUser.get(request);  if (wu == null || (wu.getAD_User_ID() == 0) || (!wu.isLoggedIn())) {    WebUtil.reload("User not logged in",LOGIN_JSP,session,request,response,getServletContext());    return;  }  if (!thisLogin.action()) {    WebUtil.reload(thisLogin.getMessage(),thisLogin.getUpdate_page(),session,request,response,getServletContext());    return;  }  String url=thisLogin.getForward();  if (url == null || url.length() == 0)   url="/";  session.setAttribute(WebUser.NAME,wu);  if (!url.startsWith("/"))   url="/" + url;  log.info("Forward to " + url);  RequestDispatcher dispatcher=getServletContext().getRequestDispatcher(url);  dispatcher.forward(request,response);}  }
class C{  public static int geometric(double p){  if (!(p >= 0.0 && p <= 1.0))   throw new IllegalArgumentException("Probability must be between 0.0 and 1.0");  return (int)Math.ceil(Math.log(uniform()) / Math.log(1.0 - p));}  }
class C{  public WebSocketTunnelRequest(HandshakeRequest request){  this.handshakeParameters=request.getParameterMap();}  }
class C{  public static CloseableHttpClient basic(String user,String password){  return basic(null,null);}  }
class C{  public static double blackFormulaImpliedStdDev(final Option.Type optionType,@Real final double strike,@Real final double forward,@Real final double blackPrice){  return blackFormulaImpliedStdDev(optionType,strike,forward,blackPrice,1.0,Double.NaN,1.0e-6,0.0);}  }
class C{  @Override public byte[] dataToRGBByteArray(final byte[] data,final int w,final int h){  final int size=data.length;  final byte[] newData=new byte[size * 3];  int ptr=0;  for (int a=0; a < size; a++) {    for (int comp=0; comp < 3; comp++) {      newData[ptr]=data[a];      ptr++;    }  }  return newData;}  }
class C{  protected CordovaWebView makeWebView(){  return new CordovaWebViewImpl(makeWebViewEngine());}  }
class C{  @SuppressWarnings({"unchecked"}) private void relink(ModuleIdentifier mi,Set<ModuleIdentifier> visited) throws ModuleLoadException {  if (visited.add(mi) == false)   return;  Graph.Vertex v=graph.getVertex(mi);  if (v == null)   return;  org.jboss.modules.Module module=preloadModule(mi);  relink(module);  Set<Graph.Edge<ModuleIdentifier,Boolean>> in=v.getIn();  for (  Graph.Edge<ModuleIdentifier,Boolean> edge : in) {    if (edge.getCost()) {      Graph.Vertex<ModuleIdentifier,Boolean> from=edge.getFrom();      relink(from.getValue(),visited);    }  }}  }
class C{  public void notifyThreadFree(final Thread thread){  if (thread == null) {    return;  }synchronized (activationLock) {synchronized (mainLock) {      busyThreadSet.remove(thread);      if (isReadyToShutdown()) {        mainLock.notifyAll();        timeoutPassed=false;      }    }  }}  }
class C{  public boolean is_set_nonce(){  return EncodingUtils.testBit(__isset_bitfield,__NONCE_ISSET_ID);}  }
class C{  private DirectoryClassLoader(File dir) throws GuacamoleException {  super(getJarURLs(dir),DirectoryClassLoader.class.getClassLoader());}  }
class C{  public boolean unlock(Object key){  Object theLock;synchronized (this) {    theLock=locks.get(key);    if (null == theLock) {      return true;    } else     if (getCallerId() == theLock) {      locks.remove(key);      return true;    } else {      return false;    }  }}  }
class C{  void write(ByteCodeWriter out) throws IOException {  out.write(ConstantPool.CP_STRING);  out.writeShort(_stringIndex);}  }
class C{  private static String copyProjectName(RepositoryService aRepository,String aProjectName){  String projectName="copy_of_" + aProjectName;  int i=1;  while (true) {    if (aRepository.existsProject(projectName)) {      projectName="copy_of_" + aProjectName + "("+ i+ ")";      i++;    } else {      return projectName;    }  }}  }
class C{  public CZoomBreakpointAction(final Window parent,final ZyGraph graph,final IViewContainer container,final BreakpointAddress address){  super(String.format("Zoom to address %s",address.getAddress().getAddress().toHexString()));  m_parent=parent;  m_graph=graph;  m_container=container;  m_address=address;}  }
class C{  public static X509Certificate rootCertificate(KeyStore keyStore,String algorithm){  try {    X509Certificate found=null;    for (    String alias : Collections.list(keyStore.aliases())) {      if (!keyStore.entryInstanceOf(alias,TrustedCertificateEntry.class)) {        continue;      }      TrustedCertificateEntry certificateEntry=(TrustedCertificateEntry)keyStore.getEntry(alias,null);      Certificate certificate=certificateEntry.getTrustedCertificate();      if (!certificate.getPublicKey().getAlgorithm().equals(algorithm)) {        continue;      }      if (!(certificate instanceof X509Certificate)) {        continue;      }      X509Certificate x=(X509Certificate)certificate;      if (!x.getIssuerDN().equals(x.getSubjectDN())) {        continue;      }      if (found != null) {        throw new IllegalStateException("KeyStore has more than one root CA for " + algorithm + "\nfirst: "+ found+ "\nsecond: "+ certificate);      }      found=x;    }    if (found == null) {      throw new IllegalStateException("KeyStore contained no root CA for " + algorithm);    }    return found;  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  Map.Entry<K,V> doRemoveLastEntry(){  for (; ; ) {    Node<K,V> b=findPredecessorOfLast();    Node<K,V> n=b.next;    if (n == null) {      if (b.isBaseHeader())       return null; else       continue;    }    for (; ; ) {      Node<K,V> f=n.next;      if (n != b.next)       break;      Object v=n.value;      if (v == null) {        n.helpDelete(b,f);        break;      }      if (v == n || b.value == null)       break;      if (f != null) {        b=n;        n=f;        continue;      }      if (!n.casValue(v,null))       break;      K key=n.key;      Comparable<? super K> ck=comparable(key);      if (!n.appendMarker(f) || !b.casNext(n,f))       findNode(ck); else {        findPredecessor(ck);        if (head.right == null)         tryReduceLevel();      }      return new AbstractMap.SimpleImmutableEntry<K,V>(key,(V)v);    }  }}  }
class C{  public static void showToast(Context context,int resourceId){  Toast.makeText(context,context.getString(resourceId),Toast.LENGTH_LONG).show();}  }
class C{  static public void delConsist(Locale locale,DccLocoAddress address) throws JsonException {  try {    if (InstanceManager.getDefault(jmri.ConsistManager.class).getConsistList().contains(address)) {      InstanceManager.getDefault(jmri.ConsistManager.class).delConsist(address);    } else {      throw new JsonException(404,Bundle.getMessage(locale,"ErrorObject",CONSIST,address.toString()));    }  } catch (  NullPointerException ex) {    throw new JsonException(503,Bundle.getMessage(locale,"ErrorNoConsistManager"));  }}  }
class C{  public boolean isReader(){  return opcode == Opcode.GETFIELD || opcode == Opcode.GETSTATIC;}  }
class C{  @Override protected boolean isFrontierEmpty(){  return frontier.isEmpty();}  }
class C{  private ExportGroup exportGroupExistsInDB(ExportGroup exportGroupToFind) throws InternalException {  List<URI> allActiveExportGroups=_dbClient.queryByType(ExportGroup.class,true);  for (  URI exportGroupURI : allActiveExportGroups) {    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    if (exportGroup != null && !exportGroup.getInactive() && exportGroup.getProject().getURI().equals(exportGroupToFind.getProject().getURI())) {      String generatedName=exportGroup.getGeneratedName().trim().replaceAll(ALPHA_NUMERICS,"");      if (generatedName.equals(exportGroupToFind.getGeneratedName())) {        _log.info("Export Group already exists in database.");        return exportGroup;      }    }  }  _log.info("Export Group does NOT already exist in database.");  return null;}  }
class C{  protected void validate(){  if (mSourceUri == null) {    throw new BuilderException("Source must be set!");  }  if (UriUtil.isLocalResourceUri(mSourceUri)) {    if (!mSourceUri.isAbsolute()) {      throw new BuilderException("Resource URI path must be absolute.");    }    if (mSourceUri.getPath().isEmpty()) {      throw new BuilderException("Resource URI must not be empty");    }    try {      Integer.parseInt(mSourceUri.getPath().substring(1));    } catch (    NumberFormatException ignored) {      throw new BuilderException("Resource URI path must be a resource id.");    }  }  if (UriUtil.isLocalAssetUri(mSourceUri) && !mSourceUri.isAbsolute()) {    throw new BuilderException("Asset URI path must be absolute.");  }}  }
class C{  public ErrorCode errorCode(){  if (this.errorCode == null) {    this.errorCode=ErrorCode.fromString(this.code);  }  return this.errorCode;}  }
class C{  @Override public Object create(SimpleObject obj,RequestContext context) throws ResponseException {  try {    logger.request(context,this,"create",obj);    Object result=createInner(obj,context);    logger.reply(context,this,"create",result);    return result;  } catch (  Exception e) {    logger.error(context,this,"create",e);    throw e;  }}  }
class C{  static public void addCornerTransformHandles(Figure f,Collection<Handle> handles){  if (f.isTransformable()) {    handles.add(southEast(f));    handles.add(southWest(f));    handles.add(northEast(f));    handles.add(northWest(f));  }}  }
class C{  public byte[] extractFingerprint(Wave wave){  int[][] coordinates;  byte[] fingerprint=new byte[0];  Resampler resampler=new Resampler();  int sourceRate=wave.getWaveHeader().getSampleRate();  int targetRate=fingerprintProperties.getSampleRate();  byte[] resampledWaveData=resampler.reSample(wave.getBytes(),wave.getWaveHeader().getBitsPerSample(),sourceRate,targetRate);  WaveHeader resampledWaveHeader=wave.getWaveHeader();  resampledWaveHeader.setSampleRate(targetRate);  Wave resampledWave=new Wave(resampledWaveHeader,resampledWaveData);  Spectrogram spectrogram=resampledWave.getSpectrogram(sampleSizePerFrame,overlapFactor);  double[][] spectorgramData=spectrogram.getNormalizedSpectrogramData();  List<Integer>[] pointsLists=getRobustPointList(spectorgramData);  int numFrames=pointsLists.length;  coordinates=new int[numFrames][numRobustPointsPerFrame];  for (int x=0; x < numFrames; x++) {    if (pointsLists[x].size() == numRobustPointsPerFrame) {      Iterator<Integer> pointsListsIterator=pointsLists[x].iterator();      for (int y=0; y < numRobustPointsPerFrame; y++) {        coordinates[x][y]=pointsListsIterator.next();      }    } else {      for (int y=0; y < numRobustPointsPerFrame; y++) {        coordinates[x][y]=-1;      }    }  }  List<Byte> byteList=new LinkedList<Byte>();  for (int i=0; i < numFrames; i++) {    for (int j=0; j < numRobustPointsPerFrame; j++) {      if (coordinates[i][j] != -1) {        int x=i;        byteList.add((byte)(x >> 8));        byteList.add((byte)x);        int y=coordinates[i][j];        byteList.add((byte)(y >> 8));        byteList.add((byte)y);        int intensity=(int)(spectorgramData[x][y] * Integer.MAX_VALUE);        byteList.add((byte)(intensity >> 24));        byteList.add((byte)(intensity >> 16));        byteList.add((byte)(intensity >> 8));        byteList.add((byte)intensity);      }    }  }  fingerprint=new byte[byteList.size()];  Iterator<Byte> byteListIterator=byteList.iterator();  int pointer=0;  while (byteListIterator.hasNext()) {    fingerprint[pointer++]=byteListIterator.next();  }  return fingerprint;}  }
class C{  public AgentInitializationException(String s){  super(s);  this.returnValue=0;}  }
class C{  private Object executeBetween(PageContext pc,SQL sql,Query qr,Operation3 expression,int row) throws PageException {  Object left=executeExp(pc,sql,qr,expression.getExp(),row);  Object right1=executeExp(pc,sql,qr,expression.getLeft(),row);  Object right2=executeExp(pc,sql,qr,expression.getRight(),row);  return ((Operator.compare(left,right1) >= 0) && (Operator.compare(left,right2) <= 0)) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public static IXMLReader stringReader(String str){  return new StdXMLReader(new StringReader(str));}  }
class C{  public int size(){  return tokens.length;}  }
class C{  public synchronized boolean removeAll(Collection c){  return super.removeAll(c);}  }
class C{  public Set<Long> keySet(){  HashSet<Long> set=new HashSet<Long>();  for (  Segment<V> s : segments) {    set.addAll(s.keySet());  }  return set;}  }
class C{  private static List<FixedPartitionAttributes> createFixedPartitionList(int primaryIndex){  List<FixedPartitionAttributes> fpaList=new ArrayList<FixedPartitionAttributes>();  if (primaryIndex == 1) {    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",true,3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",3));  }  if (primaryIndex == 2) {    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",true,3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",3));  }  if (primaryIndex == 3) {    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q1",3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q2",3));    fpaList.add(FixedPartitionAttributes.createFixedPartition("Q3",true,3));  }  return fpaList;}  }
class C{  public void connectNeuronGroups(final NeuronGroup sng,final NeuronGroup tng,final ConnectNeurons connection){  final SynapseGroup group=SynapseGroup.createSynapseGroup(sng,tng,connection);  addGroup(group);}  }
class C{  public static <T>int createTableIfNotExists(ConnectionSource connectionSource,DatabaseTableConfig<T> tableConfig) throws SQLException {  return createTable(connectionSource,tableConfig,true);}  }
class C{  protected void computeRxFillLevel(){  if (isFullDuplex()) {    rxInterruptFillLevel=rfc & RFC_RIL0_MASK;    if (rxInterruptFillLevel == 0) {      rxInterruptFillLevel=2;    }  } else {    rxInterruptFillLevel=rfc & RFC_RIL_MASK;    if (rxInterruptFillLevel == 0) {      rxInterruptFillLevel=4;    }  }}  }
class C{  public void testAuthenticateSpringSunDirectoryServerNotCorrect(){  LdapManager mgr=getLdapSunDirectoryServer();  LdapAuthenticationUserNameVO authenticationInfo=new LdapAuthenticationUserNameVO();  authenticationInfo.setUserName("nacho");  authenticationInfo.setUserCredentials("ieciovi2k");  String ret=null;  try {    ret=mgr.authenticate(authenticationInfo);  } catch (  Exception e) {    assertEquals(LdapErrorCodes.ERR_10002_AUTHENTICATION_PROBLEM,((LdapException)e).getErrCode());  }  assertNull(ret);}  }
class C{  public WriteRequest(final int objectId,final int objectInstanceId,final int resourceId,boolean value){  this(ContentFormat.TLV,objectId,objectInstanceId,resourceId,value);}  }
class C{  private boolean destroyRegion(ByteArrayWrapper key,RedisDataType type){  Region<?,?> r=this.regions.get(key);  if (r != null) {    try {      r.destroyRegion();    } catch (    Exception e) {      return false;    } finally {      removeRegionState(key,type);    }  }  return true;}  }
class C{  public static String encodeHex(byte[] bytes){  char[] hexChars=new char[bytes.length * 2];  for (int i=0; i < bytes.length; i++) {    int v=bytes[i] & 0xFF;    hexChars[i * 2]=hexArray[v >>> 4];    hexChars[i * 2 + 1]=hexArray[v & 0x0F];  }  return new String(hexChars);}  }
class C{  public static String formatDouble(double number,int decimalPlaces){  doubleUnspecificFormat.setMaximumFractionDigits(decimalPlaces);  doubleUnspecificFormat.setMinimumFractionDigits(decimalPlaces);  return doubleUnspecificFormat.format(number);}  }
class C{  public LocoNetMenu(LocoNetSystemConnectionMemo memo){  super();  if (memo != null) {    setText(memo.getUserName());  } else {    setText(Bundle.getMessage("MenuLocoNet"));  }  jmri.util.swing.WindowInterface wi=new jmri.util.swing.sdi.JmriJFrameInterface();  for (  Item item : panelItems) {    if (item == null) {      add(new javax.swing.JSeparator());    } else {      add(new LnNamedPaneAction(Bundle.getMessage(item.name),wi,item.load,memo));    }  }  add(new javax.swing.JSeparator());  add(new jmri.jmrix.loconet.locormi.LnMessageServerAction(Bundle.getMessage("MenuItemStartLocoNetServer")));  add(new jmri.jmrix.loconet.loconetovertcp.ServerAction(Bundle.getMessage("MenuItemLocoNetOverTCPServer")));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("StringElement[");  sb.append("Bounds=").append(getBounds()).append(",Height=").append(p_height).append("(").append(p_maxHeight).append("),Width=").append(p_width).append("(").append(p_maxHeight).append("),PageLocation=").append(p_pageLocation).append(" - ");  for (int i=0; i < m_string_paper.length; i++) {    if (m_string_paper.length > 1)     sb.append(Env.NL).append(i).append(":");    AttributedCharacterIterator iter=m_string_paper[i].getIterator();    for (char c=iter.first(); c != CharacterIterator.DONE; c=iter.next())     sb.append(c);  }  if (m_ID != null)   sb.append(",ID=(").append(m_ID.toStringX()).append(")");  sb.append("]");  return sb.toString();}  }
class C{  public <T>OverlayUI<T> overlayUI(String name){  try {    checkGuiThread();    URL location=GuiUtils.getResource(name);    FXMLLoader loader=new FXMLLoader(location);    Pane ui=loader.load();    T controller=loader.getController();    OverlayUI<T> pair=new OverlayUI<T>(ui,controller);    try {      if (controller != null)       controller.getClass().getField("overlayUI").set(controller,pair);    } catch (    IllegalAccessException|NoSuchFieldException ignored) {      ignored.printStackTrace();    }    pair.show();    return pair;  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public static Paint parseColor(String valueStr){  String c=valueStr.startsWith("#") ? valueStr.substring(1) : valueStr;  if (c.length() != 6 && c.length() != 8) {    throw new IllegalArgumentException("Invalid color specification: " + valueStr);  }  String r=c.substring(0,2), g=c.substring(2,4), b=c.substring(4,6);  if (c.length() == 6) {    return new Color(Integer.parseInt(r,16),Integer.parseInt(g,16),Integer.parseInt(b,16));  } else {    String a=c.substring(6);    return new Color(Integer.parseInt(r,16),Integer.parseInt(g,16),Integer.parseInt(b,16),Integer.parseInt(a,16));  }}  }
class C{  boolean subsume(Span otherSpan){  boolean isSubsumed=contains(otherSpan.mStart);  if (isSubsumed && otherSpan.mEnd > mEnd) {    mEnd=otherSpan.mEnd;  }  return isSubsumed;}  }
class C{  public static String[] xorBursts(String[] beginBursts,String[] endBursts){  String[] xoredBursts=new String[4];  StringBuilder oneXoredBurst;  for (int j=0; j < 4; j++) {    if (isABurst(beginBursts[j]) && isABurst(endBursts[j])) {      oneXoredBurst=new StringBuilder();      for (int i=0; i < 114; i++) {        oneXoredBurst.append(beginBursts[j].charAt(i) ^ endBursts[j].charAt(i));      }      xoredBursts[j]=oneXoredBurst.toString();    } else {      xoredBursts[j]="This burst is not correct, cannot xor it.";    }  }  int numberOfGoodBursts=0;  for (int i=0; i < xoredBursts.length; i++) {    if (xoredBursts[i].length() == 114) {      numberOfGoodBursts++;    }  }  String[] xoredBurstsOnly=new String[numberOfGoodBursts];  for (int i=0, j=0; i < 4; i++) {    if (xoredBursts[i].length() == 114) {      xoredBurstsOnly[j]=xoredBursts[i];      j++;    }  }  return xoredBurstsOnly;}  }
class C{  public static void sort(String[] a){  StdRandom.shuffle(a);  sort(a,0,a.length - 1,0);  assert isSorted(a);}  }
class C{  protected void init(){  try {    Connection conn=null;    Trx trx=p_vo.getTrxName() == null ? null : Trx.get(p_vo.getTrxName(),false);    if (trx != null) {      conn=trx.getConnection();    } else {      if (p_vo.getResultSetConcurrency() == ResultSet.CONCUR_UPDATABLE)       m_conn=DB.getConnectionRW(); else       m_conn=DB.getConnectionRO();      conn=m_conn;    }    if (conn == null)     throw new DBException("No Connection");    p_stmt=conn.prepareStatement(p_vo.getSql(),p_vo.getResultSetType(),p_vo.getResultSetConcurrency());  } catch (  Exception e) {    log.log(Level.SEVERE,p_vo.getSql(),e);    throw new DBException(e);  }}  }
class C{  public static Object[] assertThreadIdToSequenceIdMapHasEntryIds(){  EventID[] evids=new EventID[5];  Map map=pool.getThreadIdToSequenceIdMap();  assertNotNull(map);  evids[0]=putAlleventId1;  evids[1]=putAlleventId2;  evids[2]=putAlleventId3;  evids[3]=putAlleventId4;  evids[4]=putAlleventId5;  assertNotNull(evids[0]);  assertNotNull(evids[1]);  assertNotNull(evids[2]);  assertNotNull(evids[3]);  assertNotNull(evids[4]);  return evids;}  }
class C{  public static void main(String args[]){  ObdTestFrame frm=new ObdTestFrame();  frm.setVisible(true);  if (args.length > 0) {    try {      ser.setDeviceName(args[0]);    } catch (    Exception ex) {      JOptionPane.showMessageDialog(frm,ex,"Communication error",JOptionPane.ERROR_MESSAGE);    }    ser.start();  } else {    Thread sim=new Thread(prt);    sim.start();  }}  }
class C{  public DSAPrivateKeyImpl(PKCS8EncodedKeySpec keySpec) throws InvalidKeySpecException {  super("DSA");  AlgorithmIdentifier ai;  ThreeIntegerSequence threeInts=null;  String alg, algName;  byte[] encoding=keySpec.getEncoded();  PrivateKeyInfo privateKeyInfo=null;  try {    privateKeyInfo=(PrivateKeyInfo)PrivateKeyInfo.ASN1.decode(encoding);  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode keySpec encoding: " + e);  }  try {    x=new BigInteger((byte[])ASN1Integer.getInstance().decode(privateKeyInfo.getPrivateKey()));  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  ai=privateKeyInfo.getAlgorithmIdentifier();  try {    threeInts=(ThreeIntegerSequence)ThreeIntegerSequence.ASN1.decode(ai.getParameters());  } catch (  IOException e) {    throw new InvalidKeySpecException("Failed to decode parameters: " + e);  }  p=new BigInteger(threeInts.p);  q=new BigInteger(threeInts.q);  g=new BigInteger(threeInts.g);  params=new DSAParameterSpec(p,q,g);  setEncoding(encoding);  alg=ai.getAlgorithm();  algName=AlgNameMapper.map2AlgName(alg);  setAlgorithm(algName == null ? alg : algName);}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSComment("Data structure only") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:10.259 -0500",hash_original_method="0306D8C3E43590D820E89D43080D7C82",hash_generated_method="BB4B7DC306DE02D48C444870FADF73B1") @Override public String toString(){  return (hostName == null ? "" : hostName) + "/" + getHostAddress();}  }
class C{  public String save(){  if (!model.isTokenValid()) {    return OUTCOME_SAMEPAGE;  }  try {    if (!checkAddController()) {      return OUTCOME_SAMEPAGE;    }    HashMap<String,String> store=new HashMap<String,String>(model.getItems());    for (    String controllerId : store.keySet()) {      if (isEmpty(store.get(controllerId))) {        addError(ERROR_ORGANIZATIONID_MANDATORY);        return OUTCOME_SAMEPAGE;      }    }    for (    String controllerId : model.getControllerIds()) {      if (!store.containsKey(controllerId)) {        store.put(controllerId,null);      }    }    getAppConfigService().storeControllerOrganizations(store);    addMessage(SUCCESS_SAVED);    model.setInitialized(false);    model.resetToken();    model.setNewControllerId(null);    model.setNewOrganizationId(null);  } catch (  Exception e) {    addError(e);  }  return OUTCOME_SUCCESS;}  }
class C{  private void restoreMediaButtonReceiver(){  String receiverName=Settings.System.getStringForUser(mContentResolver,Settings.System.MEDIA_BUTTON_RECEIVER,UserHandle.USER_CURRENT);  if ((null != receiverName) && !receiverName.isEmpty()) {    ComponentName eventReceiver=ComponentName.unflattenFromString(receiverName);    if (eventReceiver == null) {      return;    }    Intent mediaButtonIntent=new Intent(Intent.ACTION_MEDIA_BUTTON);    mediaButtonIntent.setComponent(eventReceiver);    PendingIntent pi=PendingIntent.getBroadcast(mContext,0,mediaButtonIntent,0);    registerMediaButtonIntent(pi,eventReceiver,null);  }}  }
class C{  public GeneratorSingleCluster(String name,int size,double densitycorrection,Random random){  super();  this.size=size;  this.name=name;  this.densitycorrection=densitycorrection;  this.random=random;}  }
class C{  private float determinant3x3(float t00,float t01,float t02,float t10,float t11,float t12,float t20,float t21,float t22){  return (t00 * (t11 * t22 - t12 * t21) + t01 * (t12 * t20 - t10 * t22) + t02 * (t10 * t21 - t11 * t20));}  }
class C{  public List<Point> readPoints(String shapefile){  List<Point> list=new ArrayList<Point>();  for (  SimpleFeature feature : ShapeFileReader.getAllFeatures(shapefile)) {    Geometry geo=(Geometry)feature.getDefaultGeometry();    if (geo instanceof Point) {      Point ps=(Point)geo;      for (int i=0; i < ps.getNumGeometries(); i++) {        Point p=(Point)ps.getGeometryN(i);        list.add(p);      }    } else {      throw new RuntimeException("The shapefile does not contain Point(s)!");    }  }  return list;}  }
class C{  private void prepareEvents(){  Collections.sort(events);  for (int i=0; i < events.size(); i++) {    SweepLineEvent ev=(SweepLineEvent)events.get(i);    if (ev.isDelete()) {      ev.getInsertEvent().setDeleteEventIndex(i);    }  }}  }
class C{  public static TestCase negateCondition(List<BranchCondition> pathCondition,BranchCondition targetCondition,TestCase test){  List<Constraint<?>> constraints=new LinkedList<Constraint<?>>();  for (  BranchCondition b : pathCondition) {    constraints.addAll(b.getSupportingConstraints());    if (b == targetCondition) {      break;    } else {      constraints.add(b.getConstraint());    }  }  final Constraint<?> targetConstraint=targetCondition.getConstraint().negate();  constraints.add(targetConstraint);  if (!targetConstraint.isSolveable()) {    logger.info("Found unsolvable constraint: " + targetConstraint);    return null;  }  int size=constraints.size();  if (size > 0) {    constraints=reduce(constraints);  }  Solver solver=SolverFactory.getInstance().buildNewSolver();  SolverCache solverCache=SolverCache.getInstance();  SolverResult solverResult=solverCache.solve(solver,constraints);  if (solverResult != null) {    TestCase newTest=test.clone();    Map<String,Object> model=solverResult.getModel();    for (    Object key : model.keySet()) {      Object val=model.get(key);      if (val != null) {        if (val instanceof Long) {          Long value=(Long)val;          String name=((String)key).replace("__SYM","");          logger.debug("New value for " + name + " is "+ value);          PrimitiveStatement<?> p=getStatement(newTest,name);          assert (p != null);          if (p instanceof BooleanPrimitiveStatement) {            BooleanPrimitiveStatement bp=(BooleanPrimitiveStatement)p;            bp.setValue(value.intValue() > 0);          } else           if (p instanceof CharPrimitiveStatement) {            CharPrimitiveStatement cp=(CharPrimitiveStatement)p;            cp.setValue((char)value.intValue());          } else           if (p instanceof BytePrimitiveStatement) {            BytePrimitiveStatement bp=(BytePrimitiveStatement)p;            bp.setValue((byte)value.intValue());          } else           if (p instanceof ShortPrimitiveStatement) {            ShortPrimitiveStatement sp=(ShortPrimitiveStatement)p;            sp.setValue((short)value.intValue());          } else           if (p instanceof LongPrimitiveStatement) {            LongPrimitiveStatement lp=(LongPrimitiveStatement)p;            lp.setValue(value);          } else {            assert (p instanceof IntPrimitiveStatement);            IntPrimitiveStatement ip=(IntPrimitiveStatement)p;            ip.setValue(value.intValue());          }        } else {          logger.debug("New value is not long " + val);        }      } else {        logger.debug("New value is null");      }    }    return newTest;  } else {    logger.debug("Got null :-(");    return null;  }}  }
class C{  public static List<PossibleDConnectingPath> findDConnectingPathsOfLength(Graph pag,Node x,Node y,Collection<Node> z,Integer length){  if (!pag.containsNode(x) || !pag.containsNode(y) || x.equals(y)) {    return Collections.emptyList();  }  for (  Node node : z) {    if (!pag.containsNode(node)) {      return Collections.emptyList();    }  }  if (pag.isAdjacentTo(x,y)) {    return Collections.singletonList(new PossibleDConnectingPath(pag,new HashSet<>(z),Arrays.asList(x,y)));  }  List<PossibleDConnectingPath> connectingPaths=new LinkedList<>();  Set<Node> conditions=new HashSet<>(z);  Set<Node> closure=getConditioningClosure(pag,z);  Set<List<Node>> paths=new HashSet<>();  findPathsOfLength(pag,paths,null,x,y,conditions,closure,new LinkedList<Node>(),length);  for (  List<Node> path : paths) {    connectingPaths.add(new PossibleDConnectingPath(pag,conditions,path));  }  return connectingPaths;}  }
class C{  private synchronized void connectInternal(InetAddress address,int port) throws SocketException {  if (port < 0 || port > 0xFFFF) {    throw new IllegalArgumentException("connect: " + port);  }  if (address == null) {    throw new IllegalArgumentException("connect: null address");  }  checkAddress(address,"connect");  if (isClosed())   return;  SecurityManager security=System.getSecurityManager();  if (security != null) {    if (address.isMulticastAddress()) {      security.checkMulticast(address);    } else {      security.checkConnect(address.getHostAddress(),port);      security.checkAccept(address.getHostAddress(),port);    }  }  if (!isBound())   bind(new InetSocketAddress(0));  if (oldImpl || (impl instanceof AbstractPlainDatagramSocketImpl && ((AbstractPlainDatagramSocketImpl)impl).nativeConnectDisabled())) {    connectState=ST_CONNECTED_NO_IMPL;  } else {    try {      getImpl().connect(address,port);      connectState=ST_CONNECTED;      int avail=getImpl().dataAvailable();      if (avail == -1) {        throw new SocketException();      }      explicitFilter=avail > 0;      if (explicitFilter) {        bytesLeftToFilter=getReceiveBufferSize();      }    } catch (    SocketException se) {      connectState=ST_CONNECTED_NO_IMPL;    }  }  connectedAddress=address;  connectedPort=port;}  }
class C{  public ProxyMessageDecoder(ProxyMessageConsumer callback,String contentType,boolean faultAllowed,String hashAlgoId){  LOG.trace("new ProxyMessageDecoder({}, {})",contentType,hashAlgoId);  this.callback=callback;  this.contentType=contentType;  this.faultAllowed=faultAllowed;  this.hashAlgoId=hashAlgoId;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected SVGOMTextPositioningElement(){}  }
class C{  public LogonProcessorImpl(){}  }
class C{  protected void notifyChangingListeners(int oldValue,int newValue){  for (  OnWheelChangedListener listener : changingListeners) {    listener.onChanged(this,oldValue,newValue);  }}  }
class C{  public PubsubFuture<Topic> createTopic(final String canonicalTopic){  return createTopic(canonicalTopic,Topic.of(canonicalTopic));}  }
class C{  public void deleteRepeat(){  FormIndex fi=mFormEntryController.deleteRepeat();  mFormEntryController.jumpToIndex(fi);}  }
class C{  @Override public void addTag(DescriptorTag tag){  this.tags.add(tag);}  }
class C{  public void close(){}  }
class C{  static PageStreamData read(PageStore store,Data data,int pageId){  PageStreamData p=new PageStreamData(store,pageId,0,0);  p.data=data;  p.read();  return p;}  }
class C{  public MapViewEvent(Object source,Type type){  this.source=source;  this.type=type;}  }
class C{  SourceRange mergeWith(SourceRange sr){  if (sr == null)   return this;  if (startPos == Position.NOPOS)   startPos=sr.startPos; else   if (sr.startPos != Position.NOPOS)   startPos=(startPos < sr.startPos ? startPos : sr.startPos);  if (endPos == Position.NOPOS)   endPos=sr.endPos; else   if (sr.endPos != Position.NOPOS)   endPos=(endPos > sr.endPos ? endPos : sr.endPos);  return this;}  }
class C{  @Override public void nodeLeft(GfManagerAgent source,GemFireVM left){  try {    SystemMember member=findSystemMember(left,false);    super.nodeLeft(source,left);    if (logger.isDebugEnabled()) {      logger.debug("Processing node left for: {}",member);    }    try {      this.modelMBean.sendNotification(new Notification(NOTIF_MEMBER_LEFT,((ManagedResource)member).getObjectName(),notificationSequenceNumber.addAndGet(1),left.getId().toString()));      if (isEmailNotificationEnabled) {        String mess=LocalizedStrings.AdminDistributedSystemJmxImpl_MEMBER_LEFT_THE_DISTRIBUTED_SYSTEM_MEMBER_ID_0.toLocalizedString(new Object[]{left.getId().toString()});        sendEmail(EML_SUBJ_PRFX_GFE_NOTFY + EML_SUBJ_ITEM_GFE_DS + getName()+ " <"+ LocalizedStrings.AdminDistributedSystemJmxImpl_MEMBER_LEFT.toLocalizedString()+ ">",mess);      }    } catch (    javax.management.MBeanException e) {      logger.warn(e.getMessage(),e);    }    SystemMemberType memberType=member.getType();    if (memberType.isApplication() || memberType.isCacheVm()) {      MBeanUtil.unregisterMBean((ManagedResource)member);    }  } catch (  RuntimeException e) {    logger.warn(e.getMessage(),e);    throw e;  }catch (  VirtualMachineError err) {    SystemFailure.initiateFailure(err);    throw err;  }catch (  Error e) {    SystemFailure.checkFailure();    logger.error(e.getMessage(),e);    throw e;  }}  }
class C{  private ByteBuffer expandBuffer(ByteBuffer original,int cap){  ByteBuffer res=directBuf ? ByteBuffer.allocateDirect(cap) : ByteBuffer.allocate(cap);  res.order(order);  original.flip();  res.put(original);  return res;}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof BoxAndWhiskerToolTipGenerator) {    return super.equals(obj);  }  return false;}  }
class C{  public void paintProgressBarBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public void batchProcessURL(URL url,Network network){  if (url == null) {    return;  }  log("Input",Level.FINE,url);  Element root=parseURL(url);  if (root != null) {    int attempt=0;    Exception failure=null;    while (attempt < RETRY) {      attempt++;      try {        processRoot(root,url,network);        network.save();        break;      } catch (      Exception failed) {        failure=failed;        log(failed.toString(),Level.WARNING);        log("Retrying",Level.WARNING);      }    }    if (attempt == RETRY) {      log("Retry failed",Level.WARNING);      log(failure);    }  }}  }
class C{  private void writeQNameAttribute(java.lang.String namespace,java.lang.String attName,javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String attributeNamespace=qname.getNamespaceURI();  java.lang.String attributePrefix=xmlWriter.getPrefix(attributeNamespace);  if (attributePrefix == null) {    attributePrefix=registerPrefix(xmlWriter,attributeNamespace);  }  java.lang.String attributeValue;  if (attributePrefix.trim().length() > 0) {    attributeValue=attributePrefix + ":" + qname.getLocalPart();  } else {    attributeValue=qname.getLocalPart();  }  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attributeValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attributeValue);  }}  }
class C{  public void addInspector(Inspector i,String group){  i.setTitle(group);  addInspector(i);}  }
class C{  public PiecewisePopulationModel(String name,Parameter N0Parameter,Parameter growthRatesParameter,double[] epochLengths,Type units){  super(name);  this.epochCount=epochLengths.length + 1;  this.N0Parameter=N0Parameter;  this.growthRatesParameter=growthRatesParameter;  addVariable(N0Parameter);  N0Parameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,0.0,N0Parameter.getDimension()));  addVariable(growthRatesParameter);  growthRatesParameter.addBounds(new Parameter.DefaultBounds(Double.POSITIVE_INFINITY,Double.NEGATIVE_INFINITY,growthRatesParameter.getDimension()));  setUnits(units);  int popSizeCount=N0Parameter.getDimension();  int growthRateCount=growthRatesParameter.getDimension();  if (popSizeCount == epochCount && growthRateCount == 1) {    piecewiseFunction=new PiecewiseExponentialPopulation(epochLengths,new double[N0Parameter.getDimension()],growthRatesParameter.getParameterValue(0),units);  } else   if (popSizeCount == 1 && growthRateCount == epochCount) {    piecewiseFunction=new PiecewiseExponentialPopulation(epochLengths,N0Parameter.getParameterValue(0),new double[growthRatesParameter.getDimension()],units);  } else {    if (growthRatesParameter.getDimension() != epochCount) {      throw new IllegalArgumentException("growthRate parameter must have the same dimension as the number of epochs: (" + epochCount + ") but instead has "+ N0Parameter.getDimension()+ "!");    }  }  addStatistic(new GrowthRateStatistic());}  }
class C{  public void testRefresh_PreventsMultipleSimultaneousSyncs(){  mController.init();  mController.onRefreshRequested();  mController.onRefreshRequested();  verify(mMockSyncManager,times(1)).startFullSync();}  }
class C{  public void beforeBeanDiscovery(@Observes final BeforeBeanDiscovery event,BeanManager beanManager){  event.addScope(RedirectScoped.class,true,true);}  }
class C{  public boolean isIdentity(){  return (state == APPLY_IDENTITY || (getType() == TYPE_IDENTITY));}  }
class C{  public void addToBuilder(DateTimeZoneBuilder builder,Map<String,RuleSet> ruleSets){  addToBuilder(this,builder,ruleSets);}  }
class C{  public void addEdtErrorHandler(ActionListener e){  if (errorHandler == null) {    errorHandler=new EventDispatcher();  }  errorHandler.addListener(e);}  }
class C{  protected boolean createNewInstance(String reason){  Set<NodePortTuple> blockedPorts=new HashSet<NodePortTuple>();  if (!linksUpdated)   return false;  Map<NodePortTuple,Set<Link>> openflowLinks;  openflowLinks=new HashMap<NodePortTuple,Set<Link>>();  Set<NodePortTuple> nptList=switchPortLinks.keySet();  if (nptList != null) {    for (    NodePortTuple npt : nptList) {      Set<Link> linkSet=switchPortLinks.get(npt);      if (linkSet == null)       continue;      openflowLinks.put(npt,new HashSet<Link>(linkSet));    }  }  Set<NodePortTuple> broadcastDomainPorts=identifyBroadcastDomainPorts();  for (  NodePortTuple npt : broadcastDomainPorts) {    if (switchPortLinks.get(npt) == null)     continue;    for (    Link link : switchPortLinks.get(npt)) {      removeLinkFromStructure(openflowLinks,link);    }  }  for (  NodePortTuple npt : tunnelPorts) {    if (switchPortLinks.get(npt) == null)     continue;    for (    Link link : switchPortLinks.get(npt)) {      removeLinkFromStructure(openflowLinks,link);    }  }  TopologyInstance nt=new TopologyInstance(switchPorts,blockedPorts,openflowLinks,broadcastDomainPorts,tunnelPorts);  nt.compute();  currentInstance=nt;  currentInstanceWithoutTunnels=nt;  TopologyEventInfo topologyInfo=new TopologyEventInfo(0,nt.getClusters().size(),new HashMap<Long,List<NodePortTuple>>(),0);  evTopology.updateEventWithFlush(new TopologyEvent(reason,topologyInfo));  return true;}  }
class C{  public MatrixReader(Reader reader){  this(reader,-1);}  }
class C{  public boolean hasCommentsEnabledExt(){  return hasExtension(GphotoCommentsEnabled.class);}  }
class C{  public int showOpenDialog(Component parent) throws HeadlessException {  setDialogType(OPEN_DIALOG);  return showDialog(parent,null);}  }
class C{  public void testSkip() throws Exception {  byte[] data=new byte[]{-127,-100,-50,-10,-1,0,1,10,50,127};  TestInputStream tis=new TestInputStream(data);  CipherInputStream cis=new CipherInputStream(tis,new NullCipher());  int expected=data.length;  byte[] result=new byte[expected];  int skipped=(int)cis.skip(2);  int ind=skipped;  int got=skipped + cis.read(result,0,1);  while (true) {    for (int j=0; j < got - ind; j++) {      if (result[j] != data[ind + j]) {        fail("read(byte[] b, int off, int len) " + "returned incorrect data: Expected " + data[ind + j] + ", got: "+ result[j]);      }    }    if (got == expected) {      break;    } else     if (got > expected) {      fail("The data returned by " + "read(byte[] b, int off, int len) " + "is larger than expected.");    } else {      ind=got;      got+=cis.read(result,0,1);    }  }  if ((got=cis.read(result,0,1)) != -1) {    fail("read() should return -1 at the end of the stream. " + "Output is: " + got + ".");  }}  }
class C{  protected void appendFieldSeparator(StringBuffer buffer){  buffer.append(fieldSeparator);}  }
class C{  @Inline public void addEvent(EventType et,double dval1){  if (!enabled)   return;  addEventInternal(et,dval1);}  }
class C{  public static int max(int[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  int max=array[0];  for (int j=1; j < array.length; j++) {    if (array[j] > max) {      max=array[j];    }  }  return max;}  }
class C{  public static String string(int type){  return protocols.getText(type);}  }
class C{  @Override public CompilerPhase newExecution(IR ir){  return this;}  }
class C{  public String toString(){  return name;}  }
class C{  public static String amountInWords(final Double number){  return NumberToWord.convertToWord(formatDecimal(Double.valueOf(number)));}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  float progress=0;  double maxPatchValue=0;  int x, y;  boolean blnFoundNeighbour;  boolean blnIncludeDiagNeighbour=false;  boolean blnTreatZerosAsBackground=false;  int i;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      blnIncludeDiagNeighbour=Boolean.parseBoolean(args[i]);      if (!blnIncludeDiagNeighbour) {        dX=new int[]{0,1,0,-1};        dY=new int[]{-1,0,1,0};      }    } else     if (i == 3) {      blnTreatZerosAsBackground=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    numScanCells=dY.length;    image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    noData=image.getNoDataValue();    double initialValue=-1;    output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,initialValue);    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setPreferredPalette("qual.pal");    if (blnTreatZerosAsBackground) {      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          if (image.getValue(row,col) == 0) {            output.setValue(row,col,0);          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }      if (output.getValue(0,0) == -1) {        output.setValue(0,0,1);      }    } else {      output.setValue(0,0,0);    }    double patchValue=0;    double neighbourPatchValue=0;    double newPatchValue=0;    double imageValue=0;    int loopNum=1;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        imageValue=image.getValue(row,col);        if (imageValue != noData) {          patchValue=output.getValue(row,col);          if (patchValue == initialValue) {            blnFoundNeighbour=false;            for (i=0; i < numScanCells; i++) {              x=col + dX[i];              y=row + dY[i];              neighbourPatchValue=output.getValue(y,x);              if (neighbourPatchValue != initialValue && image.getValue(y,x) == imageValue) {                output.setValue(row,col,neighbourPatchValue);                newPatchValue=neighbourPatchValue;                blnFoundNeighbour=true;                break;              }            }            if (!blnFoundNeighbour) {              maxPatchValue++;              newPatchValue=maxPatchValue;              output.setValue(row,col,newPatchValue);            }            depth=0;            ScanConnectedCells(row,col,imageValue,initialValue,newPatchValue);          }        } else {          output.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    boolean somethingDone;    double[] reclass=new double[(int)maxPatchValue + 1];    do {      loopNum++;      updateProgress("Loop " + loopNum + ":",0);      somethingDone=false;      for (row=0; row < rows; row++) {        for (col=0; col < cols; col++) {          imageValue=image.getValue(row,col);          if (imageValue != noData) {            patchValue=output.getValue(row,col);            for (i=0; i < numScanCells; i++) {              x=col + dX[i];              y=row + dY[i];              neighbourPatchValue=output.getValue(y,x);              if (neighbourPatchValue != patchValue && image.getValue(y,x) == imageValue) {                somethingDone=true;                if (patchValue < neighbourPatchValue) {                  reclass[(int)neighbourPatchValue]=-1;                  output.setValue(y,x,patchValue);                  ScanConnectedCells(y,x,imageValue,neighbourPatchValue,patchValue);                } else {                  reclass[(int)patchValue]=-1;                  output.setValue(row,col,neighbourPatchValue);                  ScanConnectedCells(row,col,imageValue,patchValue,neighbourPatchValue);                  patchValue=neighbourPatchValue;                }              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } while (somethingDone);    i=0;    for (int a=0; a < maxPatchValue + 1; a++) {      if (reclass[a] != -1) {        reclass[a]=i;        i++;      }    }    loopNum++;    updateProgress("Loop " + loopNum + ":",0);    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        patchValue=output.getValue(row,col);        if (patchValue != noData) {          output.setValue(row,col,reclass[(int)patchValue]);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    image.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  protected static final String addEscapes(String str){  StringBuffer retval=new StringBuffer();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  public String encode(String pString,String charset) throws UnsupportedEncodingException {  if (pString == null) {    return null;  }  return new String(encode(pString.getBytes(charset)),StringEncodings.US_ASCII);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList childList;  Node imported;  NodeList importedList;  Node employeeElem;  int importedLen;  doc=(Document)load("staffNS",true);  childList=doc.getElementsByTagNameNS("*","employee");  employeeElem=childList.item(0);  imported=doc.importNode(employeeElem,false);  importedList=imported.getChildNodes();  importedLen=(int)importedList.getLength();  assertEquals("documentimportnode13",0,importedLen);}  }
class C{  public T caseAnonymous_traceType_2_(Anonymous_traceType_2_ object){  return null;}  }
class C{  public CResolveFunctionsAction(final JComponent parent,final IDatabase database,final INaviModule module){  super("Resolve Imported Function");  m_parent=Preconditions.checkNotNull(parent,"IE01915: Parent argument can not be null");  m_database=Preconditions.checkNotNull(database,"IE01916: Database argument can not be null");  m_module=Preconditions.checkNotNull(module,"IE01917: Module argument can not be null");}  }
class C{  protected Node copyInto(Node n){  super.copyInto(n);  SVGOMDocument sd=(SVGOMDocument)n;  sd.localizableSupport=new LocalizableSupport(RESOURCES,getClass().getClassLoader());  sd.referrer=referrer;  sd.url=url;  return n;}  }
class C{  public AllStatsTableSingle(DatasetGenerator datasetGenerator,Locker locker){  ArgumentChecking.notNull(datasetGenerator,"datasetGenerator");  initComponents();  table.setDefaultRenderer(JLabel.class,new Renderer());  table.setColumnSelectionAllowed(false);  table.setRowSelectionAllowed(false);  JTableHeader header=table.getTableHeader();  header.setReorderingAllowed(false);  GUIUtilities.setTableHeader(header);  model=new Model(datasetGenerator);  table.setModel(model);  this.locker=locker;}  }
class C{  @Override public int hashCode(){  long value=17;  value+=37 * value + Double.doubleToLongBits(Math.abs(x));  value+=37 * value + Double.doubleToLongBits(Math.abs(y));  value+=37 * value + Double.doubleToLongBits(Math.abs(z));  return (int)(value ^ (value >>> 32));}  }
class C{  public GridTuple5(@Nullable V1 v1,@Nullable V2 v2,@Nullable V3 v3,@Nullable V4 v4,@Nullable V5 v5){  this.v1=v1;  this.v2=v2;  this.v3=v3;  this.v4=v4;  this.v5=v5;}  }
class C{  public boolean hasPrimary(){  return getPrimary() != null;}  }
class C{  public void removeObserver(AppMenuObserver observer){  mObservers.remove(observer);}  }
class C{  public String readFile(String filePath){  StringBuilder buf=new StringBuilder();  String command=String.format(ImageServerDialogProperties.getString("cmd.readFile"),filePath);  sendWaitFor(command,defaultTimeout,prompts,buf);  log.debug(buf.toString());  int from=command.length() + 1;  int to=buf.indexOf(PROMPT) - 2;  if (to <= from) {    return "";  }  return buf.substring(from,to);}  }
class C{  public int alphaBlendWithWhite(int color){  float alpha=Color.alpha(color) / 255f;  int origR=Color.red(color);  int origG=Color.green(color);  int origB=Color.blue(color);  int white=255;  int r=(int)((origR * alpha) + (white * (1.0 - alpha)));  if (r > 255)   r=255;  int g=(int)((origG * alpha) + (white * (1.0 - alpha)));  if (g > 255)   g=255;  int b=(int)((origB * alpha) + (white * (1.0 - alpha)));  if (b > 255)   b=255;  return Color.argb(255,r,g,b);}  }
class C{  private static void printHeadlessInfo(){  System.out.printf("About lombok v%s\n" + "Lombok makes java better by providing very spicy additions to the Java programming language," + "such as using @Getter to automatically generate a getter method for any field.\n\n"+ "Browse to %s for more information. To install lombok on Eclipse, re-run this jar file on a "+ "graphical computer system - this message is being shown because your terminal is not graphics capable.\n"+ "Alternatively, use the command line installer (java -jar lombok.jar install --help).\n"+ "If you are just using 'javac' or a tool that calls on javac, no installation is neccessary; just "+ "make sure lombok.jar is in the classpath when you compile. Example:\n\n"+ "   java -cp lombok.jar MyCode.java\n",Version.getVersion(),ABOUT_LOMBOK_URL);}  }
class C{  @Override public boolean implies(Permission p){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:08.545 -0400",hash_original_method="2C62FA5C337CF583AC3FC7EB372FF32A",hash_generated_method="31235A2B380E9C69789F26098084DCEE") @Override public void close(){  super.close();  allLocks.remove(fileName);  try {    FileChannel channel=lock.channel();    lock.release();    channel.close();    File file=new File(fileName + LCK_EXT);    file.delete();  } catch (  IOException e) {  }}  }
class C{  @Override public String toString(){  if (toString == null) {    toString=new StringBuilder(32).append(getNumerator()).append('/').append(getDenominator()).toString();  }  return toString;}  }
class C{  public static long parseGMTToMillis(String gmtTime) throws ParseException {  SimpleDateFormat formatter=new SimpleDateFormat(FORMAT_HTTP_DATA,Locale.US);  formatter.setTimeZone(GMT_TIME_ZONE);  Date date=formatter.parse(gmtTime);  return date.getTime();}  }
class C{  public void testABandBCbrokerNetwork() throws Exception {  bridgeBrokers("BrokerA","BrokerB");  bridgeBrokers("BrokerB","BrokerC");  startAllBrokers();  Destination dest=createDestination("TEST.FOO",true);  MessageConsumer clientA=createConsumer("BrokerA",dest);  MessageConsumer clientB=createConsumer("BrokerB",dest);  MessageConsumer clientC=createConsumer("BrokerC",dest);  Thread.sleep(2000);  sendMessages("BrokerA",dest,MESSAGE_COUNT);  sendMessages("BrokerB",dest,MESSAGE_COUNT);  sendMessages("BrokerC",dest,MESSAGE_COUNT);  MessageIdList msgsA=getConsumerMessages("BrokerA",clientA);  MessageIdList msgsB=getConsumerMessages("BrokerB",clientB);  MessageIdList msgsC=getConsumerMessages("BrokerC",clientC);  msgsA.waitForMessagesToArrive(MESSAGE_COUNT);  msgsB.waitForMessagesToArrive(MESSAGE_COUNT * 2);  msgsC.waitForMessagesToArrive(MESSAGE_COUNT * 2);  assertEquals(MESSAGE_COUNT,msgsA.getMessageCount());  assertEquals(MESSAGE_COUNT * 2,msgsB.getMessageCount());  assertEquals(MESSAGE_COUNT * 2,msgsC.getMessageCount());  assertEquals("Correct forwards from A",MESSAGE_COUNT,brokers.get("BrokerA").broker.getDestination(ActiveMQDestination.transform(dest)).getDestinationStatistics().getForwards().getCount());}  }
class C{  private float computePointerDeltaMove(int pointerIndex,MotionEvent event){  final int pointerId=event.getPointerId(pointerIndex);  final float deltaX=event.getX(pointerIndex) - mReceivedPointerDownX[pointerId];  final float deltaY=event.getY(pointerIndex) - mReceivedPointerDownY[pointerId];  return (float)Math.hypot(deltaX,deltaY);}  }
class C{  private void buildImages(){  removeAll();  List<MediaGenres> genres=tvShowSelectionModel.getSelectedTvShow().getGenres();  for (  MediaGenres genre : genres) {    try {      StringBuilder sb=new StringBuilder("/images/genres/");      sb.append(genre.name().toLowerCase());      sb.append(".png");      Icon image=new ImageIcon(TvShowGenresPanel.class.getResource(sb.toString()));      JLabel lblImage=new JLabel(image);      add(lblImage);    } catch (    NullPointerException e) {      LOGGER.warn("genre image for genre " + genre.name() + " not available");    }catch (    Exception e) {      LOGGER.warn(e.getMessage());    }  }  if (genres.isEmpty()) {    try {      Icon image=new ImageIcon(TvShowGenresPanel.class.getResource("/images/genres/unknown.png"));      JLabel lblImage=new JLabel(image);      add(lblImage);    } catch (    Exception e) {      LOGGER.warn(e.getMessage());    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public CompositeGraphicsNode buildCompositeGraphicsNode(BridgeContext ctx,Element e,CompositeGraphicsNode cgn){  XBLOMContentElement content=(XBLOMContentElement)e;  AbstractDocument doc=(AbstractDocument)e.getOwnerDocument();  DefaultXBLManager xm=(DefaultXBLManager)doc.getXBLManager();  contentManager=xm.getContentManager(e);  if (cgn == null) {    cgn=new CompositeGraphicsNode();    associateSVGContext(ctx,e,cgn);  } else {    int s=cgn.size();    for (int i=0; i < s; i++) {      cgn.remove(0);    }  }  GVTBuilder builder=ctx.getGVTBuilder();  NodeList nl=contentManager.getSelectedContent(content);  if (nl != null) {    for (int i=0; i < nl.getLength(); i++) {      Node n=nl.item(i);      if (n.getNodeType() == Node.ELEMENT_NODE) {        GraphicsNode gn=builder.build(ctx,(Element)n);        if (gn != null) {          cgn.add(gn);        }      }    }  }  if (ctx.isDynamic()) {    if (contentChangedListener == null) {      contentChangedListener=new ContentChangedListener();      contentManager.addContentSelectionChangedListener(content,contentChangedListener);    }  }  return cgn;}  }
class C{  public LinkResolver(){}  }
class C{  public DuplicateAdapterException(String message){  super(message);}  }
class C{  public void testMasterLeaveAwareJob() throws Exception {  Ignite ignite=startGrid(1);  startGrid(2);  final TestBinarylizableMasterLeaveAwareClosure job=new TestBinarylizableMasterLeaveAwareClosure();  ignite.compute(ignite.cluster().forRemotes()).apply(job,new TestBinarylizableObject());  assert TestBinarylizableClosure.executed.get();  assert TestBinarylizableClosure.writeCalled.get();  assert TestBinarylizableClosure.readCalled.get();  assert TestBinarylizableMasterLeaveAwareClosure.writeCalled.get();  assert TestBinarylizableMasterLeaveAwareClosure.readCalled.get();  assert TestBinarylizableObject.writeCalled.get();  assert TestBinarylizableObject.readCalled.get();}  }
class C{  static public void assertFalse(boolean condition){  assertFalse(null,condition);}  }
class C{  private void onSync(Message syncMsg){  LOGGER.debug("Received Sync: {}",syncMsg);  syncMembership(syncMsg.data());  Message syncAckMsg=prepareSyncDataMsg(SYNC_ACK,syncMsg.correlationId());  transport.send(syncMsg.sender(),syncAckMsg);}  }
class C{  public static String changeIndent(String code,int codeIndentLevel,IJavaProject project,String newIndent,String lineDelim){  return IndentManipulation.changeIndent(code,codeIndentLevel,CodeFormatterUtil.getTabWidth(project),CodeFormatterUtil.getIndentWidth(project),newIndent,lineDelim);}  }
class C{  @Override public String globalInfo(){  return "The Nearest Set Relpacement (NSR) method.\n" + "A multi-target version of PS: The nearest sets are used to replace outliers, rather than subsets (as in PS).";}  }
class C{  public NioDatagramAcceptor(Executor executor){  this(new DefaultDatagramSessionConfig(),executor);}  }
class C{  public String capitalize(String words){  if (words == null)   return null;  String result=words.trim();  if (result.length() == 0)   return "";  if (result.length() == 1)   return result.toUpperCase();  return "" + Character.toUpperCase(result.charAt(0)) + result.substring(1).toLowerCase();}  }
class C{  private void showError(boolean error,String title,String message){  if (error) {    validationLabel.setForeground(Color.RED);    validationTextArea.setForeground(Color.RED);  } else {    validationLabel.setForeground(DARK_GREEN);    validationTextArea.setForeground(DARK_GREEN);  }  String[] splittedMessage=message.split("\n");  String explanation=splittedMessage.length > 0 ? splittedMessage[0] : "";  explanation=(explanation.charAt(0) + "").toUpperCase() + explanation.substring(1);  validationLabel.setText("<html>" + title + explanation+ "</html>");  validationTextArea.setFont(new Font(Font.MONOSPACED,Font.PLAIN,12));  if (splittedMessage.length > 1) {    int buffer=50;    int stepsize=5;    int stringWidth=SwingTools.getStringWidth(validationTextArea,splittedMessage[1]) + buffer;    boolean cut=false;    while (stringWidth > validationTextArea.getSize().width - stepsize) {      cut=true;      splittedMessage[1]=splittedMessage[1].substring(stepsize,splittedMessage[1].length());      if (splittedMessage.length > 2) {        splittedMessage[2]=splittedMessage[2].substring(stepsize,splittedMessage[2].length());      }      stringWidth=SwingTools.getStringWidth(validationTextArea,splittedMessage[1]) + buffer;    }    if (cut) {      splittedMessage[1]="[...]" + splittedMessage[1];      if (splittedMessage.length > 2) {        splittedMessage[2]="     " + splittedMessage[2];      }    }  }  String errorMessage=splittedMessage.length > 1 ? splittedMessage[1] : "\n";  if (splittedMessage.length > 2) {    errorMessage+="\n" + splittedMessage[2];  }  validationTextArea.setText(errorMessage);}  }
class C{  public SSLEngine initSslEngine(boolean client) throws Exception {  KeyStore keyStore=loadKeystore(properties.sslKeyStorePath(),properties.sslKeyStorePassword());  KeyManagerFactory keyManagerFactory=KeyManagerFactory.getInstance(KeyManagerFactory.getDefaultAlgorithm());  keyManagerFactory.init(keyStore,keyStoreKeyPass(properties));  KeyStore trustStore;  if (properties.sslTrustStorePath() != null) {    LOGGER.debug("Using separate trust store");    trustStore=loadKeystore(properties.sslTrustStorePath(),properties.sslTrustStorePassword());  } else {    trustStore=keyStore;    LOGGER.debug("Using key store as trust store");  }  TrustManagerFactory trustManagerFactory=TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());  trustManagerFactory.init(trustStore);  KeyManager[] keyManagers=keyManagerFactory.getKeyManagers();  TrustManager[] trustManagers=trustManagerFactory.getTrustManagers();  SSLContext sslContext=SSLContext.getInstance("TLS");  sslContext.init(keyManagers,trustManagers,null);  SSLEngine sslEngine=sslContext.createSSLEngine();  sslEngine.setUseClientMode(client);  sslEngine.setWantClientAuth(true);  sslEngine.setEnabledProtocols(sslEngine.getSupportedProtocols());  sslEngine.setEnabledCipherSuites(sslEngine.getSupportedCipherSuites());  sslEngine.setEnableSessionCreation(true);  return sslEngine;}  }
class C{  public GroovyPrintStream(File file) throws FileNotFoundException {  super(file);}  }
class C{  public static ExternalFilterDesc mockup(String tableName){  ExternalFilterDesc mockup=new ExternalFilterDesc();  mockup.setName(tableName);  return mockup;}  }
class C{  public boolean ready() throws IOException {synchronized (lock) {    ensureOpen();    return (pos < buf.length) || super.ready();  }}  }
class C{  public void testCase1(){  byte aBytes[]={1,2,3,4,5,6,7};  byte bBytes[]={0};  int aSign=1;  int bSign=0;  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger bNumber=new BigInteger(bSign,bBytes);  try {    aNumber.divide(bNumber);    fail("ArithmeticException has not been caught");  } catch (  ArithmeticException e) {  }}  }
class C{  public void removeEventListener(ImageSharingListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IImageSharingListener> weakRef=mImageSharingListeners.remove(listener);    if (weakRef == null) {      return;    }    IImageSharingListener rcsListener=weakRef.get();    if (rcsListener != null) {      mApi.removeEventListener2(rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  protected boolean isCacheValid(Object[] key){  if (m_CacheKey == null) {    return false;  }  if (m_CacheKey.length != key.length) {    return false;  }  for (int i=0; i < key.length; i++) {    if ((i != m_CacheKeyIndex) && (!m_CacheKey[i].equals(key[i]))) {      return false;    }  }  return true;}  }
class C{  public void endGetClientPartitionAttributes(long startTime,boolean timedOut,boolean failed){  long duration=getStatTime() - startTime;  endClientOp(duration,timedOut,failed);  this.stats.incInt(getClientPartitionAttributesInProgressId,-1);  int endGetClientPartitionAttributesId;  if (timedOut) {    endGetClientPartitionAttributesId=getClientPartitionAttributesTimedOutId;  } else   if (failed) {    endGetClientPartitionAttributesId=getClientPartitionAttributesFailedId;  } else {    endGetClientPartitionAttributesId=getClientPartitionAttributesId;  }  this.stats.incInt(endGetClientPartitionAttributesId,1);  this.stats.incLong(getClientPartitionAttributesDurationId,duration);}  }
class C{  private PackageUtil(){  throw new Error("Do not need instantiate!");}  }
class C{  public static PublicKey loadPublicKey(String encodedPublicKey) throws NoSuchProviderException, NoSuchAlgorithmException, InvalidKeySpecException {  byte[] decodedPublicKey=base64Decode(encodedPublicKey);  KeyFactory kf=KeyFactory.getInstance("ECDH",BouncyCastleProvider.PROVIDER_NAME);  ECNamedCurveParameterSpec ecSpec=ECNamedCurveTable.getParameterSpec("prime256v1");  ECPoint point=ecSpec.getCurve().decodePoint(decodedPublicKey);  ECPublicKeySpec pubSpec=new ECPublicKeySpec(point,ecSpec);  return kf.generatePublic(pubSpec);}  }
class C{  public static void main(String... args){  new RailroadImages().run("docs/html/images");}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public String connectAndBind(String host,int port,BindParameter bindParam) throws IOException {  return connectAndBind(host,port,bindParam,60000);}  }
class C{  protected void paintLinks(Collection<? extends Link> links,Graphics2D g2){  g2.setColor(Color.BLACK);  for (  Link link : links) {    MutableCoord transformed=transform(link.getFromNode().getCoord());    MutableCoord transformed2=transform(link.getToNode().getCoord());    fixLine(transformed,transformed2);    if (capacityToggle.isSelected())     setLinkColor(link,g2);    g2.drawLine((int)transformed.getX(),(int)transformed.getY(),(int)transformed2.getX(),(int)transformed2.getY());  }}  }
class C{  public T caseSpecificationElement(SpecificationElement object){  return null;}  }
class C{  public static int dropAlpha(int rgba){  return rgba & 0x00FFFFFF;}  }
class C{  public Dimension minimumLayoutSize(Container parent){  return new Dimension(4,4);}  }
class C{  private Set<Group> findDirectParentGroups(String tenantName,PrincipalId principalId) throws Exception {  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ValidateUtil.validateNotNull(principalId,"User principal");    long startedTime=System.nanoTime();    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider systemProvider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(systemProvider,tenantName);    Set<Group> groups=new HashSet<Group>();    PrincipalGroupLookupInfo idpGroups=null;    List<Group> sysGroups=null;    String fspId=null;    IIdentityProvider provider=tenantInfo.findProviderADAsFallBack(principalId.getDomain());    if (provider == null) {      fspId=getRegisteredExternalIDPUserObjectId(tenantName,principalId);    } else {      try {        idpGroups=provider.findDirectParentGroups(principalId);        if ((idpGroups != null) && (provider.getName().equalsIgnoreCase(systemProvider.getName()) == false)) {          fspId=idpGroups.getPrincipalObjectId();        }      } catch (      InvalidPrincipalException ex) {        fspId=getRegisteredExternalIDPUserObjectId(tenantName,principalId);      }    }    if (ServerUtils.isNullOrEmpty(fspId) == false) {      try {        sysGroups=systemProvider.findGroupObjectsForFsps(Collections.<String>singletonList(fspId));      } catch (      InvalidPrincipalException ex) {        logger.trace(String.format("Failed to find principal [%s@%s] as FSP principal in tenant [%s]",principalId != null ? principalId.getName() : "null",principalId != null ? principalId.getDomain() : "null",tenantName));        sysGroups=null;      }    }    if ((idpGroups != null) && (idpGroups.getGroups() != null) && (idpGroups.getGroups().isEmpty() == false)) {      groups.addAll(idpGroups.getGroups());    }    if (sysGroups != null && !sysGroups.isEmpty()) {      groups.addAll(sysGroups);    }    groups.add(systemProvider.getEveryoneGroup());    IdmServer.getPerfDataSinkInstance().addMeasurement(new PerfBucketKey(PerfMeasurementPoint.IDMFindDirectParentGroups,principalId.getDomain()),TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startedTime));    return groups;  } catch (  Exception ex) {    logger.error(String.format("Failed to find direct parent groups of principal [%s@%s] in tenant [%s]",principalId != null ? principalId.getName() : "null",principalId != null ? principalId.getDomain() : "null",tenantName));    throw ex;  }}  }
class C{  protected static void writeFontAsSVGFragment(PrintStream ps,Font font,String id,int first,int last,boolean autoRange,boolean forceAscii) throws Exception {  int horiz_advance_x=font.getOS2Table().getAvgCharWidth();  ps.print(XML_OPEN_TAG_START);  ps.print(SVG_FONT_TAG);  ps.print(XML_SPACE);  if (id != null) {    ps.print(SVG_ID_ATTRIBUTE);    ps.print(XML_EQUAL_QUOT);    ps.print(id);    ps.print(XML_CHAR_QUOT);    ps.print(XML_SPACE);  }  ps.print(SVG_HORIZ_ADV_X_ATTRIBUTE);  ps.print(XML_EQUAL_QUOT);  ps.print(horiz_advance_x);  ps.print(XML_CHAR_QUOT);  ps.print(XML_OPEN_TAG_END_CHILDREN);  ps.print(getSVGFontFaceElement(font));  CmapFormat cmapFmt=null;  if (forceAscii) {    cmapFmt=font.getCmapTable().getCmapFormat(Table.platformMacintosh,Table.encodingRoman);  } else {    cmapFmt=font.getCmapTable().getCmapFormat(Table.platformMicrosoft,Table.encodingUGL);    if (cmapFmt == null) {      cmapFmt=font.getCmapTable().getCmapFormat(Table.platformMicrosoft,Table.encodingUndefined);    }  }  if (cmapFmt == null) {    throw new Exception("Cannot find a suitable cmap table");  }  GsubTable gsub=(GsubTable)font.getTable(Table.GSUB);  SingleSubst initialSubst=null;  SingleSubst medialSubst=null;  SingleSubst terminalSubst=null;  if (gsub != null) {    Script s=gsub.getScriptList().findScript(SCRIPT_TAG_ARAB);    if (s != null) {      LangSys ls=s.getDefaultLangSys();      if (ls != null) {        Feature init=gsub.getFeatureList().findFeature(ls,FEATURE_TAG_INIT);        Feature medi=gsub.getFeatureList().findFeature(ls,FEATURE_TAG_MEDI);        Feature fina=gsub.getFeatureList().findFeature(ls,FEATURE_TAG_FINA);        initialSubst=(SingleSubst)gsub.getLookupList().getLookup(init,0).getSubtable(0);        medialSubst=(SingleSubst)gsub.getLookupList().getLookup(medi,0).getSubtable(0);        terminalSubst=(SingleSubst)gsub.getLookupList().getLookup(fina,0).getSubtable(0);      }    }  }  ps.println(getGlyphAsSVG(font,font.getGlyph(0),0,horiz_advance_x,initialSubst,medialSubst,terminalSubst,""));  try {    if (first == -1) {      if (!autoRange)       first=DEFAULT_FIRST; else       first=cmapFmt.getFirst();    }    if (last == -1) {      if (!autoRange)       last=DEFAULT_LAST; else       last=cmapFmt.getLast();    }    for (int i=first; i <= last; i++) {      int glyphIndex=cmapFmt.mapCharCode(i);      if (glyphIndex > 0) {        ps.println(getGlyphAsSVG(font,font.getGlyph(glyphIndex),glyphIndex,horiz_advance_x,initialSubst,medialSubst,terminalSubst,(32 <= i && i <= 127) ? encodeEntities(String.valueOf((char)i)) : XML_CHAR_REF_PREFIX + Integer.toHexString(i) + XML_CHAR_REF_SUFFIX));      }    }    KernTable kern=(KernTable)font.getTable(Table.kern);    if (kern != null) {      KernSubtable kst=kern.getSubtable(0);      PostTable post=(PostTable)font.getTable(Table.post);      for (int i=0; i < kst.getKerningPairCount(); i++) {        ps.println(getKerningPairAsSVG(kst.getKerningPair(i),post));      }    }  } catch (  Exception e) {    System.err.println(e.getMessage());  }  ps.print(XML_CLOSE_TAG_START);  ps.print(SVG_FONT_TAG);  ps.println(XML_CLOSE_TAG_END);}  }
class C{  public Builder environmentDelegate(EnvironmentDelegate environmentDelegate){  mOptions.environmentDelegate=environmentDelegate;  return this;}  }
class C{  private void hideKeyboard(){  View view=this.getCurrentFocus();  if (view != null) {    InputMethodManager inputManager=(InputMethodManager)this.getSystemService(Context.INPUT_METHOD_SERVICE);    inputManager.hideSoftInputFromWindow(view.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);  }}  }
class C{  public void testStockUpgrade(){  Cursor c=mBp1.query(Browser.BOOKMARKS_URI,new String[]{BookmarkColumns.URL},null,null,BookmarkColumns.URL + " DESC");  ArrayList<String> urls=new ArrayList<String>(c.getCount());  while (c.moveToNext()) {    urls.add(c.getString(0));  }  c.close();  c=getMockContentResolver().query(Browser.BOOKMARKS_URI,new String[]{BookmarkColumns.URL},null,null,BookmarkColumns.URL + " DESC");  assertEquals(urls.size(),c.getCount());  int i=0;  while (c.moveToNext()) {    assertEquals(urls.get(i++),c.getString(0));  }  c.close();  c=getMockContentResolver().query(Bookmarks.CONTENT_URI,new String[]{Bookmarks.URL},null,null,Bookmarks.URL + " DESC");  assertEquals(urls.size(),c.getCount());  i=0;  while (c.moveToNext()) {    assertEquals(urls.get(i++),c.getString(0));  }  c.close();}  }
class C{  protected void formBusquedaGenericaExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  try {    inicializarBusquedaGenerica(form,request);    setReturnActionFordward(request,mapping.findForward("form_busqueda_generica"));  } catch (  FileNotFoundException flne) {    logger.error("NO SE HA ENCONTRADO EL FICHERO DE CONFIGURACION DE BUSQUEDA",flne);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE_NOT_FOUND));    goBackExecuteLogic(mapping,form,request,response);  }catch (  Exception e) {    logger.error("ERROR AL OBTENER EL FICHERO DE CONFIGURACION DE BUSQUEDA",e);    getErrors(request,false).add(ActionErrors.GLOBAL_MESSAGE,new ActionError(Constants.ERROR_CONFIGURACION_FILE));    goBackExecuteLogic(mapping,form,request,response);  }}  }
class C{  public Values(int low,int high,int attribute,Instances inst){  int i, count=0;  double value;  numInstances=high - low + 1;  missingInstances=0;  first=low;  last=high;  attr=attribute;  sum=0.0;  sqrSum=0.0;  for (i=first; i <= last; i++) {    if (inst.instance(i).isMissing(attr) == false) {      count++;      value=inst.instance(i).value(attr);      sum+=value;      sqrSum+=value * value;    }    if (count > 1) {      va=(sqrSum - sum * sum / count) / count;      va=Math.abs(va);      sd=Math.sqrt(va);    } else {      va=0.0;      sd=0.0;    }  }}  }
class C{  public boolean isFill(){  return fill;}  }
class C{  public int findKthLargestB(int[] A,int k){  if (k <= 0 || k > A.length)   return -1;  int l=0;  int r=A.length - 1;  int index;  while (l < r) {    index=partition(A,l,r);    if (index > k - 1) {      r=index - 1;    } else     if (index < k - 1) {      l=index + 1;    } else {      return A[index];    }  }  return A[l];}  }
class C{  public AlwaysEvent createAlwaysEvent(){  AlwaysEventImpl alwaysEvent=new AlwaysEventImpl();  return alwaysEvent;}  }
class C{  public static UiObjectMatcher withTextStartingWith(String text){  return withTextStartingWith(text,null);}  }
class C{  public void testWithComplexValueField(){  converterLookup.registerConverter(new ToAttributedValueConverter(X.class,mapper,reflectionProvider,converterLookup,"innerObj"),0);  final X x=new X(42);  x.aStr="xXx";  x.innerObj=new Y();  x.innerObj.yField="inner";  final StringWriter writer=new StringWriter();  final CompactWriter compactWriter=new CompactWriter(writer);  new TreeMarshaller(compactWriter,converterLookup,mapper).start(x,null);  compactWriter.flush();  assertEquals("<x aStr=\"xXx\" anInt=\"42\"><yField>inner</yField></x>",writer.toString());  final HierarchicalStreamReader reader=driver.createReader(new StringReader(writer.toString()));  assertEquals(x,new TreeUnmarshaller(null,reader,converterLookup,mapper).start(null));}  }
class C{  public boolean visit(SwitchCase node){  return true;}  }
class C{  protected ScannerFactory(Context context){  context.put(scannerFactoryKey,this);  this.log=Log.instance(context);  this.names=Names.instance(context);  this.source=Source.instance(context);  this.tokens=Tokens.instance(context);}  }
class C{  public SquidCursor<? extends T> swapCursor(SquidCursor<? extends T> newCursor){  if (newCursor == this.cursor) {    return null;  }  SquidCursor<? extends T> oldCursor=this.cursor;  this.cursor=newCursor;  if (newCursor != null) {    notifyDataSetChanged();  } else {    notifyDataSetInvalidated();  }  return oldCursor;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:47.616 -0500",hash_original_method="7919F547FCB87899F58CF069384E6AAD",hash_generated_method="D1835C4469F5A6537AB5B42A8D63DDEC") public InputSource(String systemId){  setSystemId(systemId);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  protected SkuPrice determineSkuPrice(final MutableShoppingCart shoppingCart,final String skuCode,final BigDecimal qty){  if (shoppingCart.getShoppingContext().getShopId() == 0L) {    ShopCodeContext.getLog(this).error("Can not recalculate price because the shop id is 0");  } else {    final Shop shop=shopService.getById(shoppingCart.getShoppingContext().getShopId());    final PricingPolicyProvider.PricingPolicy policy=getPricingPolicyProvider().determinePricingPolicy(shop.getCode(),shoppingCart.getCurrencyCode(),shoppingCart.getCustomerEmail(),shoppingCart.getShoppingContext().getCountryCode(),shoppingCart.getShoppingContext().getStateCode());    final SkuPrice skuPrice=getPriceService().getMinimalPrice(null,skuCode,shop.getShopId(),shoppingCart.getCurrencyCode(),qty,false,policy.getID());    if (skuPrice.getRegularPrice() != null) {      return skuPrice;    }  }  return null;}  }
class C{  public void mark(int readAheadLimit) throws java.io.IOException {  return;}  }
class C{  protected void releaseGen(long gen) throws IOException {  if (!initCalled) {    throw new IllegalStateException("this instance is not being used by IndexWriter; be sure to use the instance returned from writer.getConfig().getIndexDeletionPolicy()");  }  Integer refCount=refCounts.get(gen);  if (refCount == null) {    throw new IllegalArgumentException("commit gen=" + gen + " is not currently snapshotted");  }  int refCountInt=refCount.intValue();  assert refCountInt > 0;  refCountInt--;  if (refCountInt == 0) {    refCounts.remove(gen);    indexCommits.remove(gen);  } else {    refCounts.put(gen,refCountInt);  }}  }
class C{  @Override public final Cursor query(final Uri uri,final String[] projection,final String selectionIn,final String[] selectionArgsIn,final String sortOrder){switch (uriMatcher.match(uri)) {case Schema.URI_CODE_WIFIS:    return queryTable(ContentProvider.CONTENT_URI_WIFI,Schema.TBL_WIFIS,projection,selectionIn,selectionArgsIn,sortOrder,null,null);case Schema.URI_CODE_WIFIS_EXTENDED:  return queryTable(ContentProvider.CONTENT_URI_WIFI_EXTENDED,Schema.VIEW_WIFIS_EXTENDED,projection,selectionIn,selectionArgsIn,sortOrder,null,null);case Schema.URI_CODE_CELLS_EXTENDED:return queryTable(ContentProvider.CONTENT_URI_CELL_EXTENDED,Schema.VIEW_CELLS_EXTENDED,projection,selectionIn,selectionArgsIn,sortOrder,null,null);case Schema.URI_CODE_WIFI_OVERVIEW:String tablesWifis=Schema.TBL_WIFIS + " as w " + " JOIN "+ Schema.TBL_POSITIONS+ " as b ON "+ Schema.COL_BEGIN_POSITION_ID+ " = b."+ Schema.COL_ID;String columnsWifis[]={"w.rowid as " + Schema.COL_ID,"w." + Schema.COL_BSSID,"w." + Schema.COL_MD5_SSID,"w." + Schema.COL_SSID,"MAX(" + Schema.COL_LEVEL + ")","w." + Schema.COL_CAPABILITIES,"w." + Schema.COL_FREQUENCY,"w." + Schema.COL_TIMESTAMP,"w." + Schema.COL_BEGIN_POSITION_ID,"w." + Schema.COL_END_POSITION_ID,"w." + Schema.COL_KNOWN_WIFI};String orderByWifis="w." + Schema.COL_TIMESTAMP;String groupByWifis="w." + Schema.COL_BSSID + ", w."+ Schema.COL_MD5_SSID;return queryTable(uri,tablesWifis,columnsWifis,addColumntoSelection("w." + Schema.COL_SESSION_ID,selectionIn),addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn),orderByWifis,groupByWifis,null);case Schema.URI_CODE_WIFI_ID:return queryTable(ContentProvider.CONTENT_URI_WIFI,Schema.TBL_WIFIS,projection,addColumntoSelection(Schema.COL_ID,selectionIn),addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn),sortOrder,null,null);case Schema.URI_CODE_WIFIS_BY_SESSION:return queryTable(ContentProvider.CONTENT_URI_WIFI,Schema.TBL_WIFIS,projection,addColumntoSelection(Schema.COL_SESSION_ID,selectionIn),addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn),sortOrder,null,null);case Schema.URI_CODE_CELLS:return queryTable(ContentProvider.CONTENT_URI_CELL,Schema.TBL_CELLS,projection,selectionIn,selectionArgsIn,sortOrder,null,null);case Schema.URI_CODE_CELL_OVERVIEW:String tablesCells=Schema.TBL_CELLS + " as c " + " JOIN "+ Schema.TBL_POSITIONS+ " as b ON "+ Schema.COL_BEGIN_POSITION_ID+ " = b."+ Schema.COL_ID;String columnsCells[]={"c.rowid as " + Schema.COL_ID,Schema.COL_LOGICAL_CELLID,Schema.COL_ACTUAL_CELLID,Schema.COL_PSC,Schema.COL_CDMA_BASEID,Schema.COL_CDMA_SYSTEMID,Schema.COL_CDMA_NETWORKID,Schema.COL_OPERATORNAME,Schema.COL_OPERATOR,Schema.COL_MCC,Schema.COL_MNC,Schema.COL_AREA,Schema.COL_PSC,Schema.COL_NETWORKTYPE,Schema.COL_IS_SERVING," MAX(" + Schema.COL_STRENGTHDBM + ") "};String whereCells="c." + Schema.COL_SESSION_ID + " = ? AND "+ Schema.COL_LOGICAL_CELLID+ " > ?";String[] whereArgs={uri.getLastPathSegment(),"-1"};String orderByCells=Schema.COL_IS_SERVING + " DESC";String groupByCells="c." + Schema.COL_LOGICAL_CELLID + ", "+ Schema.COL_PSC+ ", "+ Schema.COL_CDMA_SYSTEMID+ ", "+ Schema.COL_CDMA_NETWORKID+ ", "+ Schema.COL_CDMA_BASEID+ ", "+ Schema.COL_IS_SERVING;return queryTable(uri,tablesCells,columnsCells,whereCells,whereArgs,orderByCells,groupByCells,null);case Schema.URI_CODE_CELL_ID:return queryTable(ContentProvider.CONTENT_URI_CELL,Schema.TBL_CELLS,projection,addColumntoSelection(Schema.COL_ID,selectionIn),addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn),sortOrder,null,null);case Schema.URI_CODE_CELLS_BY_SESSION:return queryTable(ContentProvider.CONTENT_URI_CELL,Schema.TBL_CELLS,projection,addColumntoSelection(Schema.COL_SESSION_ID,selectionIn),addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn),sortOrder,null,null);case Schema.URI_CODE_POSITIONS:return queryTable(ContentProvider.CONTENT_URI_POSITION,Schema.TBL_POSITIONS,projection,selectionIn,selectionArgsIn,sortOrder,null,null);case Schema.URI_CODE_POSITION_ID:return queryTable(ContentProvider.CONTENT_URI_POSITION,Schema.TBL_POSITIONS,projection,addColumntoSelection(Schema.COL_ID,selectionIn),addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn),sortOrder,null,null);case Schema.URI_CODE_WAYPOINTS_BY_SESSION:String column=addColumntoSelection(Schema.COL_SESSION_ID,selectionIn);column=addColumntoSelection(Schema.COL_SOURCE,column);String[] args=addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn);args=addtoSelectionArgs(RadioBeacon.PROVIDER_USER_DEFINED,args);return queryTable(ContentProvider.CONTENT_URI_POSITION,Schema.TBL_POSITIONS,projection,column,args,sortOrder,null,null);case Schema.URI_CODE_LOGS_BY_SESSION:return queryTable(ContentProvider.CONTENT_URI_LOGFILE,Schema.TBL_LOGS,projection,addColumntoSelection(Schema.COL_SESSION_ID,selectionIn),addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn),sortOrder,null,null);case Schema.URI_CODE_SESSIONS:return queryTable(ContentProvider.CONTENT_URI_SESSION,Schema.TBL_SESSIONS,projection,selectionIn,selectionArgsIn,sortOrder,null,null);case Schema.URI_CODE_SESSION_ID:return queryTable(ContentProvider.CONTENT_URI_SESSION,Schema.TBL_SESSIONS,projection,addColumntoSelection(Schema.COL_ID,selectionIn),addtoSelectionArgs(uri.getLastPathSegment(),selectionArgsIn),sortOrder,null,null);case Schema.URI_CODE_SESSION_ACTIVE:return queryTable(ContentProvider.CONTENT_URI_SESSION,Schema.TBL_SESSIONS,projection,addColumntoSelection(Schema.COL_IS_ACTIVE,selectionIn),addtoSelectionArgs("1",selectionArgsIn),sortOrder,null,null);default :throw new IllegalArgumentException("Unknown URI: " + uri);}}  }
class C{  public TwoDPoint(double x,double y){  this.x=x;  this.y=y;}  }
class C{  public static byte[] generateX509PublicKey(BigInteger modulus,BigInteger publicExponent) throws Exception {  RSAPublicKeySpec rsaPublicKeySpec=new RSAPublicKeySpec(modulus,publicExponent);  PublicKey javaRsaPublicKey=KEY_FACTORY.generatePublic(rsaPublicKeySpec);  return generateX509PublicKey(javaRsaPublicKey);}  }
class C{  public String sendAccounts() throws ValidationException, MailOperationException {  getIdService().sendAccounts(email,getMarketplaceId());  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_USER_ACCOUNTS_SENT,new String[]{email});  return OUTCOME_SUCCESS;}  }
class C{  public static CSVData parse(String data) throws SimpleParserException {  return new CSVParser(data).doParse();}  }
class C{  public static void main(String[] args){  long jobStart=System.currentTimeMillis();  Header.printHeader(DigicoreClusterRunner.class.toString(),args);  String sourceFolder=args[0];  String shapefile=args[1];  int idField=Integer.parseInt(args[2]);  int numberOfThreads=Integer.parseInt(args[3]);  String outputFolderName=args[4];  LOG.info(" Reading points to cluster...");  DigicoreClusterRunner dcr=new DigicoreClusterRunner(numberOfThreads);  try {    dcr.buildPointLists(sourceFolder,shapefile,idField);  } catch (  IOException e) {    throw new RuntimeException("Could not build minor points list.");  }  long readTime=System.currentTimeMillis() - jobStart;  LOG.info("-------------------------------------------------------------");  LOG.info(" Clustering the points...");  double[] radii={20};  int[] pmins={20};  for (  double thisRadius : radii) {    for (    int thisPmin : pmins) {      LOG.info("================================================================================");      LOG.info("Executing clustering for radius " + thisRadius + ", and pmin of "+ thisPmin);      LOG.info("================================================================================");      String outputFolder=String.format("%s%.0f_%d/",outputFolderName,thisRadius,thisPmin);      String theFacilityFile=outputFolder + String.format("%.0f_%d_facilities.xml.gz",thisRadius,thisPmin);      String theFacilityAttributeFile=outputFolder + String.format("%.0f_%d_facilityAttributes.xml.gz",thisRadius,thisPmin);      String theFacilityCsvFile=outputFolder + String.format("%.0f_%d_facilityCsv.csv",thisRadius,thisPmin);      String facilityPointFolder=String.format("%sfacilityPoints/",outputFolder);      File folder=new File(outputFolder);      if (folder.exists()) {        LOG.warn("Output folder exists, and will be deleted. ");        LOG.warn("  --> " + folder.getAbsolutePath());        FileUtils.delete(folder);      }      folder.mkdirs();      dcr.facilities=FacilitiesUtils.createActivityFacilities(String.format("Digicore clustered facilities: %.0f (radius); %d (pmin)",thisRadius,thisPmin));      dcr.facilityAttributes=new ObjectAttributes();      try {        dcr.clusterPointLists(thisRadius,thisPmin,facilityPointFolder);      } catch (      Exception e) {        e.printStackTrace();        throw new RuntimeException(e.getMessage());      }      dcr.writeOutput(theFacilityFile,theFacilityAttributeFile);      dcr.writePrettyCsv(theFacilityCsvFile);    }  }  long clusterTime=System.currentTimeMillis() - jobStart - readTime;  long totalTime=System.currentTimeMillis() - jobStart;  LOG.info("-------------------------------------------------------------");  LOG.info("  Done.");  LOG.info("-------------------------------------------------------------");  LOG.info("    Read time (s): " + readTime / 1000);  LOG.info(" Cluster time (s): " + clusterTime / 1000);  LOG.info("   Total time (s): " + totalTime / 1000);  LOG.info("=============================================================");}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.config.traceTest=true;  test.test();}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public GuacamoleUpstreamException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANG_1:    getCodeLang_1().clear();  return;case UmplePackage.ANONYMOUS_ACTIVITY_1__CODE_LANGS_1:getCodeLangs_1().clear();return;}super.eUnset(featureID);}  }
class C{  private int handleScopeIntroduction(int bound){switch (fToken) {case Symbols.TokenLPAREN:    int pos=fPosition;  if (looksLikeMethodDecl()) {    if (fPrefs.prefMethodDeclDeepIndent)     return setFirstElementAlignment(pos,bound); else {      fIndent=fPrefs.prefMethodDeclIndent;      return pos;    }  } else {    fPosition=pos;    if (looksLikeMethodCall()) {      if (fPrefs.prefMethodCallDeepIndent)       return setFirstElementAlignment(pos,bound); else {        fIndent=fPrefs.prefMethodCallIndent;        return pos;      }    } else     if (fPrefs.prefParenthesisDeepIndent)     return setFirstElementAlignment(pos,bound);  }fIndent=fPrefs.prefParenthesisIndent;return pos;case Symbols.TokenLBRACE:pos=fPosition;if (looksLikeArrayInitializerIntro()) if (fPrefs.prefArrayDeepIndent) return setFirstElementAlignment(pos,bound); else fIndent=fPrefs.prefArrayIndent; else fIndent=fPrefs.prefBlockIndent;if (looksLikeArrayInitializerIntro() && !fPrefs.prefIndentBracesForArrays || !fPrefs.prefIndentBracesForBlocks) {fPosition=pos;return skipToStatementStart(true,true);} else {return pos;}case Symbols.TokenLBRACKET:pos=fPosition;if (fPrefs.prefArrayDimensionsDeepIndent) {return setFirstElementAlignment(pos,bound);}fIndent=fPrefs.prefBracketIndent;return pos;default :Assert.isTrue(false);return -1;}}  }
class C{  public static void main(String[] args){  runCLIApplication(ConvertToBundleApplication.class,args);}  }
class C{  protected void drawDomainMarkers(Graphics2D g2,Rectangle2D dataArea,int index,Layer layer){  XYItemRenderer r=getRenderer(index);  if (r == null) {    return;  }  if (index >= getDatasetCount()) {    return;  }  Collection markers=getDomainMarkers(index,layer);  ValueAxis axis=getDomainAxisForDataset(index);  if (markers != null && axis != null) {    Iterator iterator=markers.iterator();    while (iterator.hasNext()) {      Marker marker=(Marker)iterator.next();      r.drawDomainMarker(g2,this,axis,marker,dataArea);    }  }}  }
class C{  @Override protected void register(ContainerFactory containerFactory){  containerFactory.registerContainer("geronimo1x",ContainerType.INSTALLED,Geronimo1xInstalledLocalContainer.class);  containerFactory.registerContainer("geronimo2x",ContainerType.INSTALLED,Geronimo2xInstalledLocalContainer.class);  containerFactory.registerContainer("geronimo3x",ContainerType.INSTALLED,Geronimo3xInstalledLocalContainer.class);}  }
class C{  @Override public Enumeration<Option> listOptions(){  String string1="\tThe required number of rules. (default = " + m_numRules + ")", string2="\tThe minimum confidence of a rule. (default = " + m_minMetric + ")", string3="\tThe delta by which the minimum support is decreased in\n", string4="\teach iteration. (default = " + m_delta + ")", string5="\tThe lower bound for the minimum support. (default = " + m_lowerBoundMinSupport + ")", string6="\tIf used, rules are tested for significance at\n", string7="\tthe given level. Slower. (default = no significance testing)", string8="\tIf set the itemsets found are also output. (default = no)", string9="\tIf set class association rules are mined. (default = no)", string10="\tThe class index. (default = last)", stringType="\tThe metric type by which to rank rules. (default = " + "confidence)", stringZeroAsMissing="\tTreat zero (i.e. first value of nominal attributes) as " + "missing", stringToStringDelimiters="\tIf used, two characters to use as rule delimiters\n" + "\tin the result of toString: the first to delimit fields,\n" + "\tthe second to delimit items within fields.\n"+ "\t(default = traditional toString result)";  Vector<Option> newVector=new Vector<Option>(14);  newVector.add(new Option(string1,"N",1,"-N <required number of rules output>"));  newVector.add(new Option(stringType,"T",1,"-T <0=confidence | 1=lift | " + "2=leverage | 3=Conviction>"));  newVector.add(new Option(string2,"C",1,"-C <minimum metric score of a rule>"));  newVector.add(new Option(string3 + string4,"D",1,"-D <delta for minimum support>"));  newVector.add(new Option("\tUpper bound for minimum support. " + "(default = 1.0)","U",1,"-U <upper bound for minimum support>"));  newVector.add(new Option(string5,"M",1,"-M <lower bound for minimum support>"));  newVector.add(new Option(string6 + string7,"S",1,"-S <significance level>"));  newVector.add(new Option(string8,"I",0,"-I"));  newVector.add(new Option("\tRemove columns that contain " + "all missing values (default = no)","R",0,"-R"));  newVector.add(new Option("\tReport progress iteratively. (default " + "= no)","V",0,"-V"));  newVector.add(new Option(string9,"A",0,"-A"));  newVector.add(new Option(stringZeroAsMissing,"Z",0,"-Z"));  newVector.add(new Option(stringToStringDelimiters,"B",1,"-B <toString delimiters>"));  newVector.add(new Option(string10,"c",1,"-c <the class index>"));  return newVector.elements();}  }
class C{  public TelURLImpl(){  this.scheme="tel";}  }
class C{  public Metadata extract(){  return extract(new Metadata());}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_textsplittextfour.class,args);}  }
class C{  public static final int nextInteger(int min,int max){  return min == max ? min : min + getRandom().nextInt(max - min);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getPCRestrictions();}  }
class C{  @Override public void awake(){  getBot().log(this,"Awake",Bot.FINE);}  }
class C{  public void onReceive(Object message) throws Exception {  if (TaskAndEvents.class.isAssignableFrom(message.getClass())) {    TaskAndEvents taskAndEvent=(TaskAndEvents)message;    logger.debug("Received directive {}",taskAndEvent);    AbstractTask task=AkkaTask.taskRegistry.retrieveTask(taskAndEvent.getTaskIdentifier());    if (task != null) {      fluxRuntimeConnector.updateExecutionStatus(new ExecutionUpdateData(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId(),Status.running,taskAndEvent.getRetryCount(),taskAndEvent.getCurrentRetryCount()));      this.executeHooks(AkkaTask.taskRegistry.getPreExecHooks(task),taskAndEvent.getEvents());      final String outputEventName=getOutputEventName(taskAndEvent);      final TaskExecutor taskExecutor=new TaskExecutor(task,taskAndEvent.getEvents(),taskAndEvent.getStateMachineId(),outputEventName);      Event outputEvent=null;      try {        outputEvent=taskExecutor.execute();        fluxRuntimeConnector.updateExecutionStatus(new ExecutionUpdateData(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId(),Status.completed,taskAndEvent.getRetryCount(),taskAndEvent.getCurrentRetryCount()));      } catch (      HystrixRuntimeException hre) {        FailureType ft=hre.getFailureType();        if (ft.equals(FailureType.REJECTED_THREAD_EXECUTION) || ft.equals(FailureType.SHORTCIRCUIT) || ft.equals(FailureType.TIMEOUT)) {          fluxRuntimeConnector.updateExecutionStatus(new ExecutionUpdateData(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId(),Status.errored,taskAndEvent.getRetryCount(),taskAndEvent.getCurrentRetryCount(),"Execution timeout for : " + task.getName()));          throw new FluxError(FluxError.ErrorType.timeout,"Execution timeout for : " + task.getName(),null,false,new FluxError.ExecutionContextMeta(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId(),taskAndEvent.getRetryCount(),taskAndEvent.getCurrentRetryCount()));        } else {          boolean isFluxRetriableException=false;          Throwable cause=hre.getCause();          while (cause != null) {            if (cause.getClass().getName().equals(FluxRetriableException.class.getName())) {              isFluxRetriableException=true;              break;            }            cause=cause.getCause();          }          if (isFluxRetriableException) {            fluxRuntimeConnector.updateExecutionStatus(new ExecutionUpdateData(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId(),Status.errored,taskAndEvent.getRetryCount(),taskAndEvent.getCurrentRetryCount(),cause.getMessage()));            throw new FluxError(FluxError.ErrorType.retriable,cause.getMessage(),null,false,new FluxError.ExecutionContextMeta(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId(),taskAndEvent.getRetryCount(),taskAndEvent.getCurrentRetryCount()));          } else {            fluxRuntimeConnector.updateExecutionStatus(new ExecutionUpdateData(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId(),Status.errored,taskAndEvent.getRetryCount(),taskAndEvent.getCurrentRetryCount(),hre.getMessage()));          }        }      }catch (      Exception e) {        fluxRuntimeConnector.updateExecutionStatus(new ExecutionUpdateData(taskAndEvent.getStateMachineId(),taskAndEvent.getTaskId(),Status.errored,taskAndEvent.getRetryCount(),taskAndEvent.getCurrentRetryCount(),e.getMessage()));      } finally {        if (outputEvent != null) {          getSender().tell(outputEvent,getContext().parent());        }      }      this.executeHooks(AkkaTask.taskRegistry.getPostExecHooks(task),taskAndEvent.getEvents());    } else {      logger.error("Task received EventS that it cannot process. Events received are : {}",TaskRegistry.getEventsKey(taskAndEvent.getEvents()));    }  } else   if (HookExecutor.STATUS.class.isAssignableFrom(message.getClass())) {  } else   if (message instanceof Terminated) {    hookRouter=hookRouter.removeRoutee(((Terminated)message).actor());    ActorRef r=getContext().actorOf(Props.create(AkkaHook.class));    getContext().watch(r);    hookRouter=hookRouter.addRoutee(new ActorRefRoutee(r));  } else {    logger.error("Task received a message that it cannot process. Only com.flipkart.flux.impl.message.TaskAndEvents is supported. Message type received is : {}",message.getClass().getName());    unhandled(message);  }}  }
class C{  TypePath(byte[] b,int offset){  this.b=b;  this.offset=offset;}  }
class C{  public static String replaceFirst(String s,String sub,String with){  int i=s.indexOf(sub);  if (i == -1) {    return s;  }  return s.substring(0,i) + with + s.substring(i + sub.length());}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  H5=0xc3d2e1f0;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  private void handleButtonEvent(final Event event){switch (event.type) {case SWT.FocusIn:{      handleFocusEvents(SWT.FocusIn);      break;    }case SWT.Selection:{    changeVisibilityOfPopupWindow(!isDropped());    break;  }}}  }
class C{  private static List<Statement> generateAndInsert(RdfRepository rdfRepository){  String s="Q" + randomIntBetween(1,65536);  int statementCount=randomIntBetween(1,MAX_STATEMENTS_PER_NAMESPACE);  rdfRepository.sync(s,randomStatementsAbout(s,statementCount),null);  rdfRepository.sync(s,randomStatementsAbout(s,statementCount),null);  List<Statement> statements=randomStatementsAbout(s,statementCount);  rdfRepository.sync(s,statements,null);  return statements;}  }
class C{  public static void addEngineToDb(SQLiteDatabase db,CustomEngineParcelable parcelable,int id){  ContentValues values=new ContentValues();  values.put(CustomEngineTable.COLUMN_ID,id);  values.put(CustomEngineTable.COLUMN_ENABLED,1);  values.put(CustomEngineTable.COLUMN_DATA,ParcelableUtils.marshall(parcelable));  if (isEngineIDExist(id,db)) {    db.replace(CustomEngineTable.TABLE_NAME,null,values);  } else {    db.insert(CustomEngineTable.TABLE_NAME,null,values);  }}  }
class C{  public void memset(int offset,byte data,int length){  if (isNotNull()) {    memory.memset(getAddress() + offset,data,length);  }}  }
class C{  public String process(String value){  if (value.indexOf('$') < 0) {    return value;  }  try {    source.append(value);    parse();    return text.toString();  }  finally {    clear();  }}  }
class C{  private void layoutComponents(){  setLayout(new GridBagLayout());  setBorder(new CompoundBorder(new TitledBorder(DISPLAY_NAME),new EmptyBorder(6,6,6,6)));  setToolTipText(DESCRIPTION);  GridBagConstraints c=new GridBagConstraints();  c.anchor=GridBagConstraints.WEST;  c.fill=GridBagConstraints.HORIZONTAL;  c.gridheight=1;  c.gridwidth=GridBagConstraints.RELATIVE;  c.insets=LABEL_INSETS;  c.gridx=0;  c.gridy=0;  c.weightx=0.33f;  c.weighty=0;  add(new JLabel("Value"),c);  c.insets=FIELD_INSETS;  c.gridx=1;  c.weightx=0.66f;  add(value,c);  c.anchor=GridBagConstraints.NORTHWEST;  c.fill=GridBagConstraints.BOTH;  c.gridwidth=GridBagConstraints.REMAINDER;  c.insets=EMPTY_INSETS;  c.gridx=0;  c.gridy++;  c.weightx=1.0f;  c.weighty=1.0f;  add(Box.createGlue(),c);}  }
class C{  final public boolean startsWithIgnoreCase(final String prefix){  final int l=prefix.length();  if (l > length())   return false;  int i=l;  final char[] a=array;  char c, d;  while (i-- != 0) {    c=Character.toLowerCase(Character.toUpperCase(a[i]));    d=Character.toLowerCase(Character.toUpperCase(prefix.charAt(i)));    if (c != d)     return false;  }  return true;}  }
class C{  @Override public boolean accept(File file){  if (file.isDirectory()) {    return true;  }  String fileExt=getExtension(file);  if (fileExt == null) {    return false;  }  for (int i=0; i < exts.length; i++) {    String ext=exts[i];    if (fileExt.equalsIgnoreCase(ext)) {      return true;    }  }  return false;}  }
class C{  @SuppressWarnings({"SameParameterValue","WeakerAccess"}) public UnixTerminal(InputStream terminalInput,OutputStream terminalOutput,Charset terminalCharset,CtrlCBehaviour terminalCtrlCBehaviour) throws IOException {  this(terminalInput,terminalOutput,terminalCharset,null,terminalCtrlCBehaviour);}  }
class C{  public void updatePoint(float lt1,float ln1,int x1,int y1,int radius,LinkProperties properties,int graphicUpdateMask) throws IOException {  writeGraphicGestureHeader(graphicUpdateMask);  LinkPoint.write(lt1,ln1,x1,y1,radius,properties,link.dos);}  }
class C{  public void pattern(String pattern){  for (int i=0; i < m_Selected.length; i++) {    m_Selected[i]=Pattern.matches(pattern,m_Instances.attribute(i).name());  }  fireTableRowsUpdated(0,m_Selected.length);}  }
class C{  public int hashCode(){  return 1;}  }
class C{  private void registerMBeans() throws JMException {  String baseObjectName="org.apache.james:type=component,component=mailetcontainer,name=processor,processor=" + name;  registerMailets(baseObjectName,processor.getMailets().iterator());  registerMatchers(baseObjectName,processor.getMatchers().iterator(),0);}  }
class C{  public String toString(){  String producerString;  String producerComponent="";  String consumerString;  String consumerComponent="";  if (producer == null) {    producerString="Null";  } else {    producerComponent="[" + producer.getParentComponent().getName() + "]";    producerString=producer.getDescription();  }  if (consumer == null) {    consumerString="Null";  } else {    consumerComponent="[" + consumer.getParentComponent().getName() + "]";    consumerString=consumer.getDescription();  }  return producerComponent + " " + producerString+ " --> "+ consumerComponent+ " "+ consumerString;}  }
class C{  @Override public void reset() throws IOException {  throw new IOException("reset not supported");}  }
class C{  protected Function<Object[],Struct> createValueGenerator(Schema schema,TableId tableId,List<Column> columns,Predicate<ColumnId> filter,ColumnMappers mappers){  if (schema != null) {    int[] recordIndexes=indexesForColumns(columns);    Field[] fields=fieldsForColumns(schema,columns);    int numFields=recordIndexes.length;    ValueConverter[] converters=convertersForColumns(schema,tableId,columns,filter,mappers);    AtomicBoolean traceMessage=new AtomicBoolean(true);    return null;  }  return null;}  }
class C{  public final void selectAll(){  select(0,getDocumentLength());}  }
class C{  public static GLUtessellator gluNewTess(){  return GLUtessellatorImpl.gluNewTess();}  }
class C{  public void sendHeartBeatEvent(LicenseInfoExt licenseInfo,MediaType mediaType){  if (licenseInfo.isTrialLicense()) {    _log.info("CallHomeEventsFacade will not send heartbeat event for trial license of type {}",licenseInfo.getLicenseType().toString());    return;  }  licenseInfo.setLastHeartbeatEventDate(formatCurrentDate());  _log.info("CallHomeEventsFacade::sendHeartBeatEvent updating coordinator with {} heartbeat data",licenseInfo.getLicenseType().toString());  _licenseManager.updateCoordinatorWithLicenseInfo(licenseInfo);  _log.info("CallHomeEventsFacade::sendHeartBeatEvent sending {} heartbeat to SYR",licenseInfo.getLicenseType());  SendHeartbeatEvent sendHeartbeatEvent=new SendHeartbeatEvent(serviceInfo,logSvcPropertiesLoader,mediaType,licenseInfo,coordinator);  sendHeartbeatEvent.callEMCHome();}  }
class C{  public boolean tooManyMoves(){  return (numberMoves > logic.maxNumberMoves());}  }
class C{  public boolean hasValue(){  return isOnNext() && value != null;}  }
class C{  public int decryptBlock(byte[] in,int inOff,byte[] out,int outOff) throws DataLengthException, IllegalStateException {  processBytes(in,inOff,blockSize,out,outOff);  return blockSize;}  }
class C{  static boolean implementsInterface(Class<?> i,Class<?> target){  if (i.equals(target)) {    return true;  }  boolean rtn=false;  Class<?>[] superInterfaces=i.getInterfaces();  for (  Class<?> superInterface : superInterfaces) {    rtn=rtn || implementsInterface(superInterface,target);  }  return rtn;}  }
class C{  public void initCounts(){  counts=new Counts<Link>();  Calendar cal=Calendar.getInstance();  counts.setYear(cal.get(Calendar.YEAR));  if (net != null)   counts.setName("Counts for net: " + net.getName() + "\n");}  }
class C{  public NonNumericFeaturesException(String message,Throwable cause){  super(message,cause);}  }
class C{  @Override public void ignorableWhitespace(char ch[],int start,int length) throws SAXException {  writeText4Links();  writeEscUTF16(new String(ch),start,length,false);  super.ignorableWhitespace(ch,start,length);}  }
class C{  public void resolve(Event e){  float time=owner.getRoot().convertEpochTime(e.getTimeStamp());  InstanceTime instance=new InstanceTime(this,time + offset,true);  owner.addInstanceTime(instance,isBegin);}  }
class C{  public String kernelFactorExpressionTipText(){  return "The factor for the kernel, with A = # of attributes and N = # of instances.";}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  public static <I,A>Parser<I,IList<A>> count(Parser<I,A> p,int n){  return manyLoop(p,IList.of(),n);}  }
class C{  public Object eval(byte[] script,List<byte[]> keys,List<byte[]> args){  client.setTimeoutInfinite();  client.eval(script,toByteArray(keys.size()),getParams(keys,args));  return client.getOne();}  }
class C{  public T caseEntityMappingModel(EntityMappingModel object){  return null;}  }
class C{  @AfterClass public static void tearDownAfterClass() throws Exception {}  }
class C{  private void validateHost(EnumerationContext ctx,ComputeDescription computeHostDesc){  if (computeHostDesc.zoneId == null) {    throw new IllegalArgumentException("zoneId is required");  }  if (computeHostDesc.authCredentialsLink == null) {    throw new IllegalArgumentException("auth credential is required");  }  if (computeHostDesc.groupLinks == null) {    throw new IllegalArgumentException("resource group link is required");  }  if (computeHostDesc.groupLinks.size() != 1) {    throw new IllegalArgumentException("number of resource groups should be one");  }  ctx.zoneId=computeHostDesc.zoneId;}  }
class C{  public void test_null_lt_anything(){  final V v=new V();  final IVComparator c=new IVComparator();  assertLT(c.compare(null,v.inline_bnode1));  assertLT(c.compare(null,v.noninline_uri1));  assertLT(c.compare(null,v.inline_xsd_byte1));  assertLT(c.compare(null,v.sid1));}  }
class C{  public Option findOption(final String optionNameWithValues) throws InvalidOptionValueException {  if (optionNameWithValues.length() < 2) {    return null;  }  final int colonIndex=optionNameWithValues.indexOf(':');  if (colonIndex == optionNameWithValues.length() - 1) {    final String messageFormat=Messages.getString("OptionsMap.OptionValueMustBeSpecifiedFormat");    final String message=MessageFormat.format(messageFormat,optionNameWithValues.substring(1,colonIndex));    throw new InvalidOptionValueException(message);  }  final String optionName=optionNameWithValues.substring(1,(colonIndex != -1) ? colonIndex : optionNameWithValues.length());  final String optionValueString=(colonIndex != -1) ? optionNameWithValues.substring(colonIndex + 1) : null;  Option o=null;  for (final Iterator i=_aliasesToOptions.keySet().iterator(); i.hasNext(); ) {    final Object key=i.next();    final String alias=(String)key;    if (alias.compareToIgnoreCase(optionName) == 0) {      o=instantiateOption(alias);      o.setMatchedAlias(alias);      o.setUserText(optionName);      break;    }  }  if (o == null) {    return null;  }  o.parseValues(optionValueString);  return o;}  }
class C{  public static boolean isSorted(int[] array){  if (array == null || array.length < 2) {    return true;  }  int previous=array[0];  final int n=array.length;  for (int i=1; i < n; i++) {    final int current=array[i];    if (NumberUtils.compare(previous,current) > 0) {      return false;    }    previous=current;  }  return true;}  }
class C{  public void finish() throws Exception {}  }
class C{  public static void unlinkC_OrderLine_ID(Properties ctx,int C_OrderLine_ID,String trxName){  for (  MRequisitionLine line : forC_OrderLine_ID(ctx,C_OrderLine_ID,trxName)) {    line.setC_OrderLine_ID(0);    line.saveEx();  }}  }
class C{  protected void checkClosed(){  checkClosed(false);}  }
class C{  public SignerId(X500Name issuer,BigInteger serialNumber){  this(issuer,serialNumber,null);}  }
class C{  public Length(){  super("text_information.length");}  }
class C{  public void increment(long delta){  if (this.type == CounterType.LONG) {    this.longValue+=delta;  } else {    throw new IllegalArgumentException("Invalid counter type. This counter is not a long type.");  }}  }
class C{  @EventHandler(priority=EventPriority.MONITOR,ignoreCancelled=true) public void onPlayerDeath(PlayerDeathEvent event){  Player player=event.getEntity();  Match match=Cardinal.getMatch(player);  List<Core> cores=getCores(match);  if (match == null || !match.hasPlayer(player) || cores.size() == 0) {    return;  }  cores.forEach(null);}  }
class C{  private char[] applyFloatPadding(char[] ca4,boolean noDigits){  char[] ca5=ca4;  if (fieldWidthSet) {    int i, j, nBlanks;    if (leftJustify) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        for (i=0; i < ca4.length; i++)         ca5[i]=ca4[i];        for (j=0; j < nBlanks; j++, i++)         ca5[i]=' ';      }    } else     if (!leadingZeros || noDigits) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        for (i=0; i < nBlanks; i++)         ca5[i]=' ';        for (j=0; j < ca4.length; i++, j++)         ca5[i]=ca4[j];      }    } else     if (leadingZeros) {      nBlanks=fieldWidth - ca4.length;      if (nBlanks > 0) {        ca5=new char[ca4.length + nBlanks];        i=0;        j=0;        if (ca4[0] == '-') {          ca5[0]='-';          i++;          j++;        }        for (int k=0; k < nBlanks; i++, k++)         ca5[i]='0';        for (; j < ca4.length; i++, j++)         ca5[i]=ca4[j];      }    }  }  return ca5;}  }
class C{  public static RawHeaders fromNameValueBlock(List<String> nameValueBlock) throws IOException {  if (nameValueBlock.size() % 2 != 0) {    throw new IllegalArgumentException("Unexpected name value block: " + nameValueBlock);  }  String status=null;  String version=null;  RawHeaders result=new RawHeaders();  for (int i=0; i < nameValueBlock.size(); i+=2) {    String name=nameValueBlock.get(i);    String values=nameValueBlock.get(i + 1);    for (int start=0; start < values.length(); ) {      int end=values.indexOf('\0',start);      if (end == -1) {        end=values.length();      }      String value=values.substring(start,end);      if (":status".equals(name)) {        status=value;      } else       if (":version".equals(name)) {        version=value;      } else {        result.namesAndValues.add(name);        result.namesAndValues.add(value);      }      start=end + 1;    }  }  if (status == null)   throw new ProtocolException("Expected ':status' header not present");  if (version == null)   throw new ProtocolException("Expected ':version' header not present");  result.setStatusLine(version + " " + status);  return result;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:19.989 -0500",hash_original_method="A7339CF0A1845E47429F861771033D8B",hash_generated_method="CF7DB5FFCBA3D0CB08B7AE31583B8A92") public static String valueOf(float value){  String str=new String();  str.addTaint(value);  return str;}  }
class C{  public void removeSynapseListener(SynapseListener synapseListener){  synapseListeners.remove(synapseListener);}  }
class C{  public UpdateConstraintException(String message,DomainObjectExceptionBean bean){  super(message,bean);}  }
class C{  public static final Cursor query(ContentResolver cr,String[] projection,long begin,long end,String searchQuery){  Uri.Builder builder=CONTENT_SEARCH_URI.buildUpon();  ContentUris.appendId(builder,begin);  ContentUris.appendId(builder,end);  builder=builder.appendPath(searchQuery);  return cr.query(builder.build(),projection,WHERE_CALENDARS_SELECTED,WHERE_CALENDARS_ARGS,DEFAULT_SORT_ORDER);}  }
class C{  public static String bytesToString(final long byteCount){  try {    final StringBuilder byteString=new StringBuilder();    if (byteCount > 1073741824) {      byteString.append(number((double)byteCount / (double)1073741824)).append(" GB");    } else     if (byteCount > 1048576) {      byteString.append(number((double)byteCount / (double)1048576)).append(" MB");    } else     if (byteCount > 1024) {      byteString.append(number((double)byteCount / (double)1024)).append(" KB");    } else {      byteString.append(Long.toString(byteCount)).append(" Bytes");    }    return byteString.toString();  } catch (  final Exception e) {    return "unknown";  }}  }
class C{  private boolean initContextStateValues(){  Intent intent=getIntent();  boolean isParamInitSucceed=false;  if (null != intent) {    if (null == (mMemberId=intent.getStringExtra(EXTRA_MEMBER_ID))) {      Log.e(LOG_TAG,"member ID missing in extra");      return false;    } else     if (null == (mSession=getSession(intent))) {      Log.e(LOG_TAG,"Invalid session");      return false;    }    int storeIndex=intent.getIntExtra(EXTRA_STORE_ID,-1);    IMXStore store;    if (storeIndex >= 0) {      store=Matrix.getInstance(this).getTmpStore(storeIndex);    } else {      store=mSession.getDataHandler().getStore();    }    mRoomId=intent.getStringExtra(EXTRA_ROOM_ID);    if ((null != mRoomId) && (null == (mRoom=store.getRoom(mRoomId)))) {      Log.e(LOG_TAG,"The room is not found");    } else {      Log.d(LOG_TAG,"Parameters init succeed");      isParamInitSucceed=true;    }  }  return isParamInitSucceed;}  }
class C{  @Override public void onViewReady(View view,Bundle savedInstanceState,Reason reason){  super.onViewReady(view,savedInstanceState,reason);  if (reason.isFirstTime()) {    CounterMasterInsideView f=new CounterMasterInsideView();    getChildFragmentManager().beginTransaction().replace(R.id.screen_master_anotherFragmentContainer,f).commit();  }}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean isBearingRequired(){  return mBearingRequired;}  }
class C{  public static void printResult(int result){  if (result == 0)   System.out.println("You lose"); else   if (result == 1)   System.out.println("You win");}  }
class C{  public boolean isMarked(){  return pair.mark;}  }
class C{  protected boolean afterDelete(boolean success){  if (success)   delete_Tree(MTree_Base.TREETYPE_BPartner);  return success;}  }
class C{  public SBitmap(LLPoint ll1,short offset_x1,short offset_y1,short width,short height,byte[] bits,short x_hot,short y_hot){  super(GraphicType.GT_Bitmap,RenderType.RT_Offset,LineType.LT_Unknown,DeclutterType.DC_None);  p1_=new XYPoint(offset_x1,offset_y1);  ll1_=ll1;  width_=width;  height_=height;  x_hot_=x_hot;  y_hot_=y_hot;  bits_=bits;  bmref_=null;}  }
class C{  public void updateBytes(int columnIndex,byte[] x) throws SQLException {  throw new NotUpdatable();}  }
