class C{  boolean verifyTrust(SecurityContext securityContext){  return (securityContext instanceof TrustedSecurityContext);}  }
class C{  public static IOFileFilter makeFileOnly(IOFileFilter filter){  if (filter == null) {    return FileFileFilter.FILE;  }  return new AndFileFilter(FileFileFilter.FILE,filter);}  }
class C{  public void printCurrentStackTrace(){  try {    throw new java.io.IOException("FAKE");  } catch (  java.io.IOException e) {    e.printStackTrace(G.v().out);  }}  }
class C{  @Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augs) throws XNIException {  XMLNotationDecl notationDecl=new XMLNotationDecl();  notationDecl.setValues(name,identifier.getPublicId(),identifier.getLiteralSystemId(),identifier.getBaseSystemId());  int notationIndex=getNotationDeclIndex(name);  if (notationIndex == -1) {    notationIndex=createNotationDecl();    setNotationDecl(notationIndex,notationDecl);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_ABSORBED_TARGET(String skilltarget){  return new SM_SYSTEM_MESSAGE(1210229,skilltarget);}  }
class C{  private void resetInputActionIndices(){  mPinch0TabIndex=-1;  mPinch1TabIndex=-1;  mScrollingTab=null;  mDiscardingTab=null;  mLongPressSelected=-1;}  }
class C{  public static void writeRepetitiveString(ObjectOutput out,String s) throws IOException {  if (out instanceof MarshalOutputStream)   ((MarshalOutputStream)out).writeRepetitiveObject(s); else   writeString(out,s);}  }
class C{  public AwsIotCompletion(long timeout,boolean isAsync){  super(null,null);  this.request=null;  this.timeout=timeout;  this.isAsync=isAsync;}  }
class C{  private void drawSolidLineProgress(Canvas canvas){  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f,false,mProgressBackgroundPaint);  canvas.drawArc(mProgressRectF,DEFAULT_START_DEGREE,360.0f * getProgress() / getMax(),false,mProgressPaint);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_COUNT_REMAIN_PLAYTIME(String value0){  return new SM_SYSTEM_MESSAGE(1400051,value0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Petrification_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200465,skilltarget,skillname);}  }
class C{  public VOGeoServerRandomFill(Class<?> panelId,FunctionNameInterface functionManager){  super(panelId,functionManager);  fieldMap.put(FieldIdEnum.RANDOM_FILL_ACTIVATE,"random");  fieldMap.put(FieldIdEnum.RANDOM_FILL_TILE_SIZE,"random-tile-size");  fieldMap.put(FieldIdEnum.RANDOM_FILL_ROTATION,"random-rotation");  fieldMap.put(FieldIdEnum.RANDOM_FILL_SYMBOL_COUNT,"random-symbol-count");  fieldMap.put(FieldIdEnum.RANDOM_FILL_RANDOM_SEED,"random-seed");  createUI();  PrefManager.getInstance().addVendorOptionListener(this);}  }
class C{  public synchronized void addIndex(String indexName){  if (checkIndex(indexName)) {    cacheIndicesTypes.put(indexName,new HashSet<>());    log.debug("addIndex() - Added index " + indexName + " in memory list");  } else {    throw new IllegalArgumentException("addIndex() - Index " + indexName + " does not follow the format \"indexPrefix_dateFormat\"");  }}  }
class C{  private static Map.Entry<String,String> maybeTruncateTagEntry(Map.Entry<String,String> tag_entry){  String k=tag_entry.getKey();  String v=tag_entry.getValue();  if (k.length() + v.length() <= MAX_TAG_KEY_VAL_CHARS - 2)   return tag_entry;  if (k.length() > TRUNCATE_TAG_NAME)   k=k.substring(0,TRUNCATE_TAG_NAME);  if (k.length() + v.length() > MAX_TAG_KEY_VAL_CHARS - 2)   v=v.substring(0,MAX_TAG_KEY_VAL_CHARS - 2 - k.length());  return SimpleMapEntry.create(k,v);}  }
class C{  public static boolean isTestRun(){  return "true".equals(System.getProperty("org.hisp.dhis.test","false"));}  }
class C{  public List<String> tag(List<String> sentences){  List<Row> rows=new LinkedList<Row>();  for (  String sentence : sentences) {    rows.add(RowFactory.create(sentence));  }  StructType schema=new StructType(new StructField[]{new StructField("sentence",DataTypes.StringType,false,Metadata.empty())});  SQLContext sqlContext=new SQLContext(jsc);  DataFrame input=sqlContext.createDataFrame(rows,schema);  if (cmmModel != null) {    DataFrame output=cmmModel.transform(input).repartition(1);    return output.javaRDD().map(new RowToStringFunction(1)).collect();  } else {    System.err.println("Tagging model is null. You need to create or load a model first.");    return null;  }}  }
class C{  private void showLocalVideo(String localPath){  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setDataAndType(Uri.fromFile(new File(localPath)),"video/mp4");  startActivity(intent);  finish();}  }
class C{  private void init(final AttributeSet attrs){  Typeface typeface;  if (!isInEditMode() && (typeface=CustomFontUtils.getTypeFace(this,attrs)) != null) {    super.setTypeface(typeface,typeface.getStyle());  }}  }
class C{  public static void createFederatedNamespace(URI namespace,ZooKeeperClient zkc) throws InterruptedException, ZooKeeperClient.ZooKeeperConnectionException, KeeperException {  String zkSubNamespacesPath=namespace.getPath() + "/" + ZNODE_SUB_NAMESPACES;  Utils.zkCreateFullPathOptimistic(zkc,zkSubNamespacesPath,new byte[0],zkc.getDefaultACL(),CreateMode.PERSISTENT);}  }
class C{  public void writeEndGroup(){  writer.writeEndElementLineBreak();}  }
class C{  SimplexTableau(final LinearObjectiveFunction f,final Collection<LinearConstraint> constraints,final GoalType goalType,final boolean restrictToNonNegative,final double epsilon){  this(f,constraints,goalType,restrictToNonNegative,epsilon,SimplexSolver.DEFAULT_ULPS);}  }
class C{  public void initRawSwap(ArrayList<S2CellId> cellIds){  this.cellIds=new ArrayList<S2CellId>(cellIds);  cellIds.clear();}  }
class C{  public void java_lang_System_setErr0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  ReferenceVariable sysErr=helper.staticField("java.lang.System","err");  helper.assign(sysErr,params[0]);}  }
class C{  public double trace(){  double t=0;  for (int i=0; i < Math.min(m,n); i++) {    t+=A[i][i];  }  return t;}  }
class C{  @Override protected boolean scanRootElementHook() throws IOException, XNIException {  if (fExternalSubsetResolver != null && !fSeenDoctypeDecl && !fDisallowDoctype && (fValidation || fLoadExternalDTD)) {    scanStartElementName();    resolveExternalSubsetAndRead();    if (scanStartElementAfterName()) {      setScannerState(SCANNER_STATE_TRAILING_MISC);      setDispatcher(fTrailingMiscDispatcher);      return true;    }  } else   if (scanStartElement()) {    setScannerState(SCANNER_STATE_TRAILING_MISC);    setDispatcher(fTrailingMiscDispatcher);    return true;  }  return false;}  }
class C{  public DynamicBatchWriter(){  this.currentBatchSize=INITIAL_BATCH_SIZE;  this.seeking=true;  this.contSuccessCount=0;}  }
class C{  public Builder customReduction(String column,ColumnReduction columnReduction){  customReductions.put(column,columnReduction);  return this;}  }
class C{  public static Object wrap(Object object){  try {    if (object == null) {      return NULL;    }    if (object instanceof JSONObject || object instanceof JSONArray || NULL.equals(object)|| object instanceof JSONString|| object instanceof Byte|| object instanceof Character|| object instanceof Short|| object instanceof Integer|| object instanceof Long|| object instanceof Boolean|| object instanceof Float|| object instanceof Double|| object instanceof String) {      return object;    }    if (object instanceof Collection) {      return new JSONArray((Collection<Object>)object);    }    if (object.getClass().isArray()) {      return new JSONArray(object);    }    if (object instanceof Map) {      return new JSONObject((Map<String,Object>)object);    }    Package objectPackage=object.getClass().getPackage();    String objectPackageName=objectPackage != null ? objectPackage.getName() : "";    if (objectPackageName.startsWith("java.") || objectPackageName.startsWith("javax.") || object.getClass().getClassLoader() == null) {      return object.toString();    }    return new JSONObject(object);  } catch (  Exception exception) {    return null;  }}  }
class C{  public final void log(){  TAGLOGGER.info(this.toString());}  }
class C{  @Override public boolean isPressed(){  boolean bReturn=this.isOverridingPresses ? this.justPressed : super.isPressed();  this.justPressed=false;  return bReturn;}  }
class C{  public void testPostNewDeploymentDMNFile() throws Exception {  try {    HttpPost httpPost=new HttpPost(SERVER_URL_PREFIX + DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT_COLLECTION));    httpPost.setEntity(HttpMultipartHelper.getMultiPartEntity("simple.dmn","application/xml",this.getClass().getClassLoader().getResourceAsStream("org/activiti/rest/dmn/service/api/repository/simple.dmn"),null));    CloseableHttpResponse response=executeBinaryRequest(httpPost,HttpStatus.SC_CREATED);    JsonNode responseNode=objectMapper.readTree(response.getEntity().getContent());    closeResponse(response);    String deploymentId=responseNode.get("id").textValue();    String name=responseNode.get("name").textValue();    String category=responseNode.get("category").textValue();    String deployTime=responseNode.get("deploymentTime").textValue();    String url=responseNode.get("url").textValue();    String tenantId=responseNode.get("tenantId").textValue();    assertEquals("",tenantId);    assertNotNull(deploymentId);    assertEquals(1L,dmnRepositoryService.createDeploymentQuery().deploymentId(deploymentId).count());    assertNotNull(name);    assertEquals("simple.dmn",name);    assertNotNull(url);    assertTrue(url.endsWith(DmnRestUrls.createRelativeResourceUrl(DmnRestUrls.URL_DEPLOYMENT,deploymentId)));    assertNull(category);    assertNotNull(deployTime);    List<String> resources=dmnRepositoryService.getDeploymentResourceNames(deploymentId);    assertEquals(1L,resources.size());    assertEquals("simple.dmn",resources.get(0));    assertEquals(1L,dmnRepositoryService.createDeploymentQuery().deploymentId(deploymentId).count());  }  finally {    List<DmnDeployment> deployments=dmnRepositoryService.createDeploymentQuery().list();    for (    DmnDeployment deployment : deployments) {      dmnRepositoryService.deleteDeployment(deployment.getId());    }  }}  }
class C{  public static double b2en(double b[],int m,double a){  double cep[], ir[];  int arrayLength=(m + 1) + 2 * IRLENG;  double[] spectrum2en_buff=new double[arrayLength];  cep=new double[arrayLength];  ir=new double[arrayLength];  b2mc(b,spectrum2en_buff,m,a);  freqt(spectrum2en_buff,m,cep,IRLENG - 1,-a);  c2ir(cep,IRLENG,ir,IRLENG);  double en=0.0;  for (int i=0; i < IRLENG; i++)   en+=ir[i] * ir[i];  return en;}  }
class C{  @Override public void detach(AWSIotDevice device) throws AWSIotException {  super.detach(device);}  }
class C{  @Override public Filter createFilter(){  return new TOverlapsExtended();}  }
class C{  String siteUrl(){  return mSiteUrl;}  }
class C{  public static boolean isScreenW(int widthDp){  DisplayMetrics displayMetrics=Resources.getSystem().getDisplayMetrics();  float screenWidth=displayMetrics.widthPixels / displayMetrics.density;  return screenWidth >= widthDp;}  }
class C{  public void testShortField() throws Exception {  AnObject empty=new AnObject();  AnObject full=helper.fill(new AnObject());  assertTrue(helper.areEquals(full,full));  assertFalse(helper.areEquals(empty,full));}  }
class C{  public TIntHash(){  super();  this._hashingStrategy=this;}  }
class C{  public Vector3f mult(float scalar){  return new Vector3f(x * scalar,y * scalar,z * scalar);}  }
class C{  public synchronized void interfaceUpdate(DispatchContext dctx) throws GenericServiceException {  if (!inheritedParameters) {    if (this.engineName.equals("group") && implServices.size() == 0) {      GroupModel group=internalGroup;      if (group == null) {        group=ServiceGroupReader.getGroupModel(this.location);      }      if (group != null) {        for (        GroupServiceModel sm : group.getServices()) {          implServices.add(new ModelServiceIface(sm.getName(),sm.isOptional()));          if (Debug.verboseOn())           Debug.logVerbose("Adding service [" + sm.getName() + "] as interface of: ["+ this.name+ "]",module);        }      }    }    if (UtilValidate.isNotEmpty(implServices) && dctx != null) {      for (      ModelServiceIface iface : implServices) {        String serviceName=iface.getService();        boolean optional=iface.isOptional();        ModelService model=dctx.getModelService(serviceName);        if (model != null) {          for (          ModelParam newParam : model.contextParamList) {            ModelParam existingParam=this.contextInfo.get(newParam.name);            if (existingParam != null) {              if (!"INOUT".equals(existingParam.mode) && !existingParam.mode.equals(newParam.mode)) {                existingParam.mode="INOUT";                if (existingParam.optional || newParam.optional) {                  existingParam.optional=true;                }              }            } else {              ModelParam newParamClone=new ModelParam(newParam);              if (optional) {                newParamClone.optional=true;              }              this.addParam(newParamClone);            }          }        } else {          Debug.logWarning("Inherited model [" + serviceName + "] not found for ["+ this.name+ "]",module);        }      }    }    if (UtilValidate.isNotEmpty(overrideParameters)) {      for (      ModelParam overrideParam : overrideParameters) {        ModelParam existingParam=contextInfo.get(overrideParam.name);        contextParamList.remove(existingParam);        if (existingParam != null) {          if (UtilValidate.isNotEmpty(overrideParam.type)) {            existingParam.type=overrideParam.type;          }          if (UtilValidate.isNotEmpty(overrideParam.mode)) {            existingParam.mode=overrideParam.mode;          }          if (UtilValidate.isNotEmpty(overrideParam.entityName)) {            existingParam.entityName=overrideParam.entityName;          }          if (UtilValidate.isNotEmpty(overrideParam.fieldName)) {            existingParam.fieldName=overrideParam.fieldName;          }          if (UtilValidate.isNotEmpty(overrideParam.formLabel)) {            existingParam.formLabel=overrideParam.formLabel;          }          if (overrideParam.getDefaultValue() != null) {            existingParam.copyDefaultValue(overrideParam);          }          if (overrideParam.overrideFormDisplay) {            existingParam.formDisplay=overrideParam.formDisplay;          }          if (overrideParam.overrideOptional) {            existingParam.optional=overrideParam.optional;          }          if (UtilValidate.isNotEmpty(overrideParam.allowHtml)) {            existingParam.allowHtml=overrideParam.allowHtml;          }          addParam(existingParam);        } else {          Debug.logWarning("Override param found but no parameter existing; ignoring: " + overrideParam.name,module);        }      }    }    this.inheritedParameters=true;  }}  }
class C{  public ImageRequest(String url,Response.Listener<Bitmap> listener,int maxWidth,int maxHeight,ScaleType scaleType,Config decodeConfig,Response.ErrorListener errorListener){  super(Method.GET,url,errorListener);  setRetryPolicy(new DefaultRetryPolicy(DEFAULT_IMAGE_TIMEOUT_MS,DEFAULT_IMAGE_MAX_RETRIES,DEFAULT_IMAGE_BACKOFF_MULT));  mListener=listener;  mDecodeConfig=decodeConfig;  mMaxWidth=maxWidth;  mMaxHeight=maxHeight;  mScaleType=scaleType;}  }
class C{  @Requires(Resolved.class) @Nullable public Method lookupMethod(String name){  return methodByName.get(name);}  }
class C{  private TopBaseConfiguration calculateTopBase(Element prosody,TopBaseConfiguration origConf){  int topStart=origConf.topStart();  int topEnd=origConf.topEnd();  int baseStart=origConf.baseStart();  int baseEnd=origConf.baseEnd();  String pitch=prosody.getAttribute("pitch");  if (!pitch.equals("")) {    if (MaryUtils.isPercentageDelta(pitch)) {      int percentage=MaryUtils.getPercentageDelta(pitch);      baseStart=(baseStart * (100 + percentage)) / 100;      baseEnd=(baseEnd * (100 + percentage)) / 100;      topStart=(topStart * (100 + percentage)) / 100;      topEnd=(topEnd * (100 + percentage)) / 100;    } else     if (MaryUtils.isSemitonesDelta(pitch)) {      double semitones=MaryUtils.getSemitonesDelta(pitch);      double factor=Math.pow(1.0595,semitones);      baseStart=(int)(baseStart * factor);      baseEnd=(int)(baseEnd * factor);      topStart=(int)(topStart * factor);      topEnd=(int)(topEnd * factor);    } else     if (MaryUtils.isNumberDelta(pitch)) {      int delta=MaryUtils.getNumberDelta(pitch);      baseStart+=delta;      baseEnd+=delta;      topStart+=delta;      topEnd+=delta;    } else     if (MaryUtils.isUnsignedNumber(pitch)) {      int baseMean=(baseStart + baseEnd) / 2;      int topMean=(topStart + topEnd) / 2;      double topBaseRatio=((double)topMean) / baseMean;      int topSpread=(topEnd - topStart) / 2;      int newBaseMean=MaryUtils.getUnsignedNumber(pitch);      int baseSpread=(baseEnd - baseStart) / 2;      baseStart=newBaseMean - baseSpread;      baseEnd=newBaseMean + baseSpread;      topStart=(int)(newBaseMean * topBaseRatio - topSpread);      topEnd=(int)(newBaseMean * topBaseRatio + topSpread);    }  }  String range=prosody.getAttribute("range");  if (!range.equals("")) {    if (MaryUtils.isPercentageDelta(range)) {      int percentage=MaryUtils.getPercentageDelta(range);      topStart=baseStart + ((topStart - baseStart) * (100 + percentage)) / 100;      topEnd=baseEnd + ((topEnd - baseEnd) * (100 + percentage)) / 100;    } else     if (MaryUtils.isSemitonesDelta(range)) {      double semitones=MaryUtils.getSemitonesDelta(range);      double factor=Math.pow(1.0595,semitones);      int deltaStart=(int)((topStart - baseStart) * factor);      int deltaEnd=(int)((topEnd - baseEnd) * factor);      topStart=baseStart + deltaStart;      topEnd=baseEnd + deltaEnd;    } else     if (MaryUtils.isNumberDelta(range)) {      int delta=MaryUtils.getNumberDelta(range);      topStart+=delta;      topEnd+=delta;    } else     if (MaryUtils.isUnsignedSemitones(range)) {      double semitones=MaryUtils.getUnsignedSemitones(range);      double factor=Math.pow(1.0595,semitones);      topStart=(int)(baseStart * factor);      topEnd=(int)(baseEnd * factor);    } else     if (MaryUtils.isUnsignedNumber(range)) {      int baseMean=(baseStart + baseEnd) / 2;      int topSpread=(topEnd - topStart) / 2;      int newRange=MaryUtils.getUnsignedNumber(range);      topStart=baseMean + newRange - topSpread;      topEnd=baseMean + newRange + topSpread;    }  }  String pitchDynamics=prosody.getAttribute("pitch-dynamics");  if (!pitchDynamics.equals("")) {    if (MaryUtils.isPercentageDelta(pitchDynamics)) {      int percentage=MaryUtils.getPercentageDelta(pitchDynamics);      int baseMean=(baseStart + baseEnd) / 2;      baseStart=(200 * baseMean) / (200 + percentage);      baseEnd=(baseStart * (100 + percentage)) / 100;    } else     if (MaryUtils.isNumberDelta(pitchDynamics)) {      int delta=MaryUtils.getNumberDelta(pitchDynamics);      int baseMean=(baseStart + baseEnd) / 2;      baseStart=baseMean + delta / 2;      baseEnd=baseMean - delta / 2;    } else     if (MaryUtils.isSemitonesDelta(pitchDynamics)) {      double semitones=MaryUtils.getSemitonesDelta(pitchDynamics);      double factor=Math.pow(1.0595,semitones);      int baseMean=(baseStart + baseEnd) / 2;      baseStart=(int)((2 * baseMean) / (1 + factor));      baseEnd=(int)(factor * baseStart);    }  }  String rangeDynamics=prosody.getAttribute("range-dynamics");  if (!rangeDynamics.equals("")) {    if (MaryUtils.isPercentageDelta(rangeDynamics)) {      int percentage=MaryUtils.getPercentageDelta(rangeDynamics);      int baseMean=(baseStart + baseEnd) / 2;      int topMean=(topStart + topEnd) / 2;      int rangeMean=topMean - baseMean;      int rangeStart=(200 * rangeMean) / (200 + percentage);      int rangeEnd=(rangeStart * (100 + percentage)) / 100;      topStart=baseStart + rangeStart;      topEnd=baseEnd + rangeEnd;    } else     if (MaryUtils.isNumberDelta(rangeDynamics)) {      int delta=MaryUtils.getNumberDelta(rangeDynamics);      int baseMean=(baseStart + baseEnd) / 2;      int topMean=(topStart + topEnd) / 2;      int rangeMean=topMean - baseMean;      int rangeStart=rangeMean + delta / 2;      int rangeEnd=rangeMean - delta / 2;      topStart=baseStart + rangeStart;      topEnd=baseEnd + rangeEnd;    } else     if (MaryUtils.isSemitonesDelta(rangeDynamics)) {      double semitones=MaryUtils.getSemitonesDelta(rangeDynamics);      double factor=Math.pow(1.0595,semitones);      int baseMean=(baseStart + baseEnd) / 2;      int topMean=(topStart + topEnd) / 2;      int rangeMean=topMean - baseMean;      int rangeStart=(int)((2 * rangeMean) / (1 + factor));      int rangeEnd=(int)(factor * rangeStart);      topStart=baseStart + rangeStart;      topEnd=baseEnd + rangeEnd;    }  }  if (topStart < baseStart)   topStart=baseStart;  if (topEnd < baseEnd)   topEnd=baseEnd;  return new TopBaseConfiguration(topStart,topEnd,baseStart,baseEnd,origConf.startTime(),origConf.endTime());}  }
class C{  public XMLDocumentParser(){  super((XMLParserConfiguration)ObjectFactory.createObject("mf.org.apache.xerces.xni.parser.XMLParserConfiguration","mf.org.apache.xerces.parsers.XIncludeAwareParserConfiguration"));}  }
class C{  private void gen(FlowSet outSet,Unit u){  for (  ValueBox useBox : u.getUseBoxes()) {    if (useBox.getValue() instanceof BinopExpr)     outSet.add(useBox.getValue());  }}  }
class C{  public static void writeLines(Collection<?> lines,String lineEnding,OutputStream output) throws IOException {  writeLines(lines,lineEnding,output,Charset.defaultCharset());}  }
class C{  public String makeLiteral(Object object,boolean singleQuote){  StringBuilder sb=new StringBuilder();  makeLiteral(sb,object,singleQuote);  return sb.toString();}  }
class C{  protected int nextChar() throws IOException {  if (top < 0) {    return catfile.read();  } else {    return stack[top--];  }}  }
class C{  public static String S2T(String text){  char[] chars=text.toCharArray();  for (int i=0; i < chars.length; i++) {    Character replacement=s2t.get(chars[i]);    if (replacement != null) {      chars[i]=replacement;    }  }  return new String(chars);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  getViewer().selectComponent(getViewer().getPcoaTab());}  }
class C{  public SiteAdminPage open(){  return open("");}  }
class C{  public void validate(){  final List<ValidationException> exceptionList=new ArrayList<ValidationException>();  validate(exceptionList);  if (!exceptionList.isEmpty())   throw exceptionList.get(0);}  }
class C{  public static void o(double[] a,int w,int d){  int nc=a.length;  int ncp=(Parameters.PageWidth) / w;  int jl=0;  while (jl < nc) {    int ju=Math.min(nc,jl + ncp);    System.out.print("\n");    for (int j=jl; j < ju; j++) {      String head=Integer.toString(j);      while (head.length() < w)       head=" " + head;      System.out.print(head);    }    System.out.print("\n");    for (int j=jl; j < ju; j++)     System.out.print(DoubletoEstring(a[j],w,d));    System.out.print("\n");    jl=jl + ncp;  }}  }
class C{  public String toString(){  return "CMUTimeVoice";}  }
class C{  private ProxySelector buildSelector(Dict proxySettings) throws ProxyException {  ProtocolDispatchSelector ps=new ProtocolDispatchSelector();  installSelectorForProtocol(proxySettings,ps,"HTTP");  installSelectorForProtocol(proxySettings,ps,"HTTPS");  installSelectorForProtocol(proxySettings,ps,"FTP");  installSelectorForProtocol(proxySettings,ps,"Gopher");  installSelectorForProtocol(proxySettings,ps,"RTSP");  installSocksProxy(proxySettings,ps);  ProxySelector result=ps;  result=installPacProxyIfAvailable(proxySettings,result);  result=autodetectProxyIfAvailable(proxySettings,result);  if (result != null) {    result=installExceptionList(proxySettings,result);    result=installSimpleHostFilter(proxySettings,result);  }  return result;}  }
class C{  public void zoomToImagePoint(float scale,PointF imagePoint){  if (mGestureDetector.isGestureInProgress()) {    mGestureDetector.reset();  }  scale=limit(scale,mMinScaleFactor,mMaxScaleFactor);  float[] points=mTempValues;  points[0]=imagePoint.x;  points[1]=imagePoint.y;  mapRelativeToAbsolute(points,points,1);  mActiveTransform.setScale(scale,scale,points[0],points[1]);  mActiveTransform.postTranslate(mViewBounds.centerX() - points[0],mViewBounds.centerY() - points[1]);  limitTranslation();  if (mListener != null) {    mListener.onTransformChanged(mActiveTransform);  }}  }
class C{  public static String exactly(CharSequence in){  return eval(in).getExactly();}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  public boolean isLocalEchoEnabled(){  return localEchoEnabled;}  }
class C{  public int addStack(int amount){  stack+=amount;  if (stack > item.getMaxItemStack()) {    int remainder=stack - item.getMaxItemStack();    stack=item.getMaxItemStack();    return remainder;  }  return 0;}  }
class C{  public static Bundle createFragmentArgsForSite(String url){  Bundle fragmentArgs=new Bundle();  String origin=UrlUtilities.formatUrlForSecurityDisplay(URI.create(url),true);  fragmentArgs.putString(SingleWebsitePreferences.EXTRA_ORIGIN,origin);  return fragmentArgs;}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public static void main(String[] args){  System.out.println(approxLog(0.0));}  }
class C{  protected NotesGetCommentsQuery noteId(int value){  return unsafeParam("note_id",value);}  }
class C{  public Host createHost(String hostname,String displayname){  return createHost(new HostProperties(hostname,displayname,null),true,true);}  }
class C{  @Override public void clear(){  nodes.clear();  dates=null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Sprint_ME_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200569,skilltarget,skillcaster,skillname);}  }
class C{  public static RemoveFilesDialogFragment newInstance(OCFile file){  ArrayList<OCFile> list=new ArrayList<>();  list.add(file);  return newInstance(list);}  }
class C{  protected GroupsIsMemberQueryWithUserIdsExtended userIds(Integer... value){  return unsafeParam("user_ids",value);}  }
class C{  private void populateDataMap(){  dataTypeMap.put("xs:int",Integer.class);  dataTypeMap.put("xs:double",Double.class);  dataTypeMap.put("xs:boolean",Boolean.class);  dataTypeMap.put("xs:float",Float.class);  dataTypeMap.put("xs:double",Double.class);  dataTypeMap.put("xs:long",Long.class);  dataTypeMap.put(GEOMETRY_NAME,Geometry.class);  dataTypeMap.put(BBOX_NAME,ReferencedEnvelope.class);  dataTypeMap.put(ENUMERATION_NAME,StringBuilder.class);}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  public void alignToFourBytes(){  data.position((data.position() + 3) & ~3);}  }
class C{  public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("sort direction=");  final String direction=np.getWordMatchesIgnoringCase("up down");  np.matchIgnoreCase("attribute=");  final String attribute=np.getWordRespectCase();  np.matchIgnoreCase(";");  final SamplesViewer viewer=((SamplesViewer)getViewer());  viewer.getSamplesTable().sortByColumn(attribute,direction.equals("up"));}  }
class C{  public void addWhileRunning(Cursored cursored,Sequence sequence){  SequenceGroups.addSequences(this,SEQUENCE_UPDATER,cursored,sequence);}  }
class C{  public boolean supportsRemoteHeapDump(Application application){  if (application.getState() != Stateful.STATE_AVAILABLE)   return false;  if (application.isLocalApplication())   return false;  JmxModel jmxModel=JmxModelFactory.getJmxModelFor(application);  return jmxModel == null ? false : jmxModel.isTakeHeapDumpSupported();}  }
class C{  public boolean removeEdge(int edge){  throw new UnsupportedOperationException("Changes to graph structure not allowed for spanning trees.");}  }
class C{  public AgeFileFilter(File cutoffReference,boolean acceptOlder){  this(cutoffReference.lastModified(),acceptOlder);}  }
class C{  public static void unregister(ProcessEngine processEngine){  processEngines.remove(processEngine.getName());}  }
class C{  public boolean isNavBarTintEnabled(){  return mNavBarTintEnabled;}  }
class C{  public static InputStream toInputStream(CharSequence input,String encoding) throws IOException {  return toInputStream(input,Charsets.toCharset(encoding));}  }
class C{  public static UByte ubyte(byte value){  return UByte.valueOf(value);}  }
class C{  protected int zoom(Display display,Point2D p,double zoom,boolean abs){  if (display.isTranformInProgress())   return NO_ZOOM;  double scale=display.getScale();  double result=scale * zoom;  int status=ZOOM;  if (result < m_minScale) {    zoom=m_minScale / scale;    status=MIN_ZOOM;  } else   if (result > m_maxScale) {    zoom=m_maxScale / scale;    status=MAX_ZOOM;  }  if (abs)   display.zoomAbs(p,zoom); else   display.zoom(p,zoom);  display.repaint();  return status;}  }
class C{  private static void loadFilesPath(Context context){  if (context != null) {    try {      File file=context.getFilesDir();      if (file != null) {        PROCESS_NAME=DeviceInfoCapture.getInstance().getProcessNameFromId(android.os.Process.myPid());        Constants.FILES_PATH=file.getAbsolutePath() + "/" + PROCESS_NAME;        File dir=new File(Constants.FILES_PATH);        if (!dir.exists()) {          dir.mkdirs();        }      }    } catch (    Exception e) {      Log.e(TAG,"Exception thrown when accessing the files dir:");      e.printStackTrace();    }  }}  }
class C{  public boolean isPressed(float xClick,float yClick){  return new Rectangle(x,y,width,height).overlaps(new Rectangle(xClick,yClick,1,1));}  }
class C{  private void sendPuncture(Peer peer) throws IOException {  Puncture puncture=new Puncture(hashId,peer.getAddress(),internalSourceAddress);  sendMesssage(puncture,peer);}  }
class C{  public CategorizedFileEntry(String sFilename,String sCategory){  Filename=sFilename;  Category=sCategory;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSpellAttackEffect_ME_TO_B(String skillcaster,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200488,skillcaster,skilltarget,skillname);}  }
class C{  public void writeTextUnit(ITextUnit tu){  writeTextUnit(tu,null);}  }
class C{  public void readFromClassPath(final String propertyFileLocation) throws ConfigurationException {  properties=readPropertyFileFromClassPath(propertyFileLocation);}  }
class C{  @RequestMapping(value={"/rest/v1/proxy/{userId}"},method=RequestMethod.GET,produces=MediaType.APPLICATION_JSON_VALUE) public ModelAndView isProxyRunning(@PathVariable final String userId){  boolean isRunning=false;  if (AppScanUtils.isNotNull(userId) && !openProxyServers.isEmpty() && openProxyServers.containsKey(AppScanUtils.getLoggedInUser().getUserId())) {    isRunning=true;  }  return new ModelAndView(view,AppScanConstants.JSON_RESPONSE_DATA_IDENTIFIER,isRunning);}  }
class C{  @ReactMethod public void disableAutoRefresh(String placementId){  mAdsManagers.get(placementId).disableAutoRefresh();}  }
class C{  public ResponsePacket sendStatement(String statement) throws SQLException {  RequestPacket packet=new RequestPacket();  packet.setModifiers(readModifiers);  packet.setType(RequestPacket.Type.STATEMENT);  packet.setStatement(statement);  return writeRequestPacket(packet);}  }
class C{  public static <T>List<T> toList(T... items){  if (items == null)   return null;  List<T> list=new ArrayList<T>(items.length);  for (  T item : items)   list.add(item);  return list;}  }
class C{  public PageObjectContext(ElementLocatorFactory elementLocatorFactory,FramePath framePath){  this.elementLocatorFactory=elementLocatorFactory;  this.framePath=framePath;}  }
class C{  public PrivilegedDistributedTask(DistributedTask<T,R> task,AsyncResultFilter<T> filter){  super(task,filter);}  }
class C{  public String makeLiteralSQ(Object object){  StringBuilder sb=new StringBuilder();  makeLiteral(sb,object,true);  return sb.toString();}  }
class C{  public void addEquipmentId(final ProcessCacheObject processCacheObject,final Long pEquipmentId){  if (!processCacheObject.getEquipmentIds().contains(pEquipmentId)) {    processCacheObject.getEquipmentIds().add(pEquipmentId);  }}  }
class C{  public static void apply(String sourceRMA6FileName,String sourceClassification,Collection<Integer> sourceClassIds,String targetRMA6FileName,ProgressListener progressListener,Single<Long> totalReads) throws IOException, CanceledException {  final long startTime=System.currentTimeMillis();  final RMA6File sourceRMA6File=new RMA6File(sourceRMA6FileName,"r");  final boolean pairedReads=sourceRMA6File.getHeaderSectionRMA6().isPairedReads();  final String[] cNames=sourceRMA6File.getHeaderSectionRMA6().getMatchClassNames();  final ClassificationBlockRMA6 block=new ClassificationBlockRMA6(sourceClassification);  long start=sourceRMA6File.getFooterSectionRMA6().getStartClassification(sourceClassification);  block.read(start,sourceRMA6File.getReader());  final ListOfLongs list=new ListOfLongs();  for (  Integer classId : sourceClassIds) {    if (block.getSum(classId) > 0) {      block.readLocations(start,sourceRMA6File.getReader(),classId,list);    }  }  long totalMatches=0;  try (OutputWriter writer=new OutputWriter(new File(targetRMA6FileName))){    final FooterSectionRMA6 footerSection=new FooterSectionRMA6();    try {      progressListener.setTasks("Extracting","");      progressListener.setProgress(0);      progressListener.setMaximum(list.size());      footerSection.setStartHeaderSection(0);      sourceRMA6File.getHeaderSectionRMA6().write(writer);      footerSection.setEndHeaderSection(writer.getPosition());      footerSection.setStartReadsSection(writer.getPosition());      try (IInputReader reader=sourceRMA6File.getReader()){        for (int i=0; i < list.size(); i++) {          reader.seek(list.get(i));          totalReads.set(totalReads.get() + 1);          if (pairedReads) {            reader.skipBytes(8);            writer.writeLong(0);          }{            int length=reader.readInt();            writer.writeInt(length);            length=Math.abs(length);            for (int b=0; b < length; b++) {              writer.write(reader.read());            }          }          final int numberOfMatches=reader.readInt();          writer.writeInt(numberOfMatches);          totalMatches+=numberOfMatches;{            int length=numberOfMatches * cNames.length * 4;            for (int b=0; b < length; b++) {              writer.write(reader.read());            }          }{            int length=reader.readInt();            writer.writeInt(length);            length=Math.abs(length);            for (int b=0; b < length; b++) {              writer.write(reader.read());            }          }          progressListener.incrementProgress();        }      }     }  finally {      long position=writer.getPosition();      footerSection.setEndReadsSection(position);      footerSection.setStartClassificationsSection(position);      footerSection.setEndClassificationsSection(position);      footerSection.setStartAuxDataSection(position);      footerSection.setEndAuxDataSection(position);      footerSection.setStartFooterSection(position);      footerSection.setNumberOfReads(totalReads.get());      footerSection.setNumberOfMatches(totalMatches);      footerSection.write(writer);    }  }   System.err.println("Extraction required " + ((System.currentTimeMillis() - startTime) / 1000) + " seconds");}  }
class C{  public String[] match(String value){  if (value == null) {    return null;  }  for (int i=0; i < patterns.length; i++) {    Matcher matcher=patterns[i].matcher(value);    if (matcher.matches()) {      int count=matcher.groupCount();      String[] groups=new String[count];      for (int j=0; j < count; j++) {        groups[j]=matcher.group(j + 1);      }      return groups;    }  }  return null;}  }
class C{  public SlowedProgressBar(Context context){  super(context,null);}  }
class C{  public static void writeString(OutputStream out,String charset,String value) throws IOException {  writeString(out,Charset.forName(charset),value);}  }
class C{  public boolean add(Object obj_){  _buf[_bottom]=obj_;  _bottom=(_bottom == _buf.length - 1) ? 0 : _bottom + 1;  if (_bottom == _top) {    int oldLen=_buf.length;    int newLen=oldLen * 2;    Object[] newBuf=new Object[newLen];    int topToEnd=oldLen - _top;    int newTop=newLen - topToEnd;    System.arraycopy(_buf,0,newBuf,0,_top);    System.arraycopy(_buf,_top,newBuf,newTop,topToEnd);    _buf=newBuf;    _top=newTop;    return true;  }  return false;}  }
class C{  @SuppressWarnings("unchecked") private void restoreBadges(){  Bundle restoredBundle=savedInstanceState;  if (restoredBundle != null) {    if (restoredBundle.containsKey(BADGE_FULL_TEXT_KEY)) {      shouldShowBadgeWithNinePlus=restoredBundle.getBoolean(BADGE_FULL_TEXT_KEY);    }    if (restoredBundle.containsKey(BUDGES_ITEM_BUNDLE_KEY)) {      badgeSaveInstanceHashMap=(HashMap<Integer,Object>)savedInstanceState.getSerializable(BUDGES_ITEM_BUNDLE_KEY);      if (badgeSaveInstanceHashMap != null) {        for (        Integer integer : badgeSaveInstanceHashMap.keySet()) {          BadgeHelper.forceShowBadge(badgeList.get(integer),(BadgeItem)badgeSaveInstanceHashMap.get(integer),shouldShowBadgeWithNinePlus);        }      }    }  }}  }
class C{  @Override protected void onSaveState(Bundle outState){  super.onSaveState(outState);}  }
class C{  public StatusBarView(Context context){  super(context);}  }
class C{  public void onDelete(){  if (getOwner().isInWorld()) {    this.onDespawn();    this.delete();  }}  }
class C{  public Iterator sortedKeys(){  return new TreeSet(this.map.keySet()).iterator();}  }
class C{  private void showPopup(MouseEvent event){  if (event.isPopupTrigger()) {    this.copyMenu.show(this.txtFile,event.getX(),event.getY());  }}  }
class C{  public DoWhile doWhile(Conditional cond,Task task){  return new DoWhile(this.executor_,cond,task);}  }
class C{  public static void load(Context context,Object source,ImageView view){  Glide.with(context).load(source).centerCrop().into(view);}  }
class C{  @Nullable private static PsiElement findEquivalentElement(@NotNull Collection<PsiElement> collection,@NotNull PsiElement element){  List<PsiElement> matchingItems=Lists.newArrayListWithExpectedSize(1);  for (  PsiElement item : collection) {    if (item.getText() != null && item.getText().equals(element.getText())) {      return item;    } else     if (item.getFirstChild() != null && element.getFirstChild() != null) {      if (item.getFirstChild().getText().equals(element.getFirstChild().getText())) {        matchingItems.add(item);      }    }  }  if (matchingItems.size() == 1) {    return matchingItems.get(0);  } else {    return null;  }}  }
class C{  public Vector2f multLocal(float scalar){  x*=scalar;  y*=scalar;  return this;}  }
class C{  public final Observable.Transformer<T,T> replace(){  return null;}  }
class C{  public boolean merge_stringbuffer(){  return soot.PhaseOptions.getBoolean(options,"merge-stringbuffer");}  }
class C{  public MarketSearchQuery offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public ShareProjectCommand(ISVNRepositoryLocation location,IProject project,String remoteDirName,boolean createDirectory){  this.location=location;  this.project=project;  if (remoteDirName == null) {    this.remoteDirName=project.getName();  } else {    this.remoteDirName=remoteDirName;  }  this.createDirectory=createDirectory;}  }
class C{  @SuppressWarnings("unused") private void broadcastInfluencePacket(){  SM_INFLUENCE_RATIO pkt=new SM_INFLUENCE_RATIO();  Player player;  Iterator<Player> iter=World.getInstance().getPlayersIterator();  while (iter.hasNext()) {    player=iter.next();    PacketSendUtility.sendPacket(player,pkt);  }}  }
class C{  public boolean exists(String key,boolean ignoreCase){  if (ignoreCase)   key=key.toLowerCase();  for (  String existKey : this.getKeys(true)) {    if (ignoreCase)     existKey=existKey.toLowerCase();    if (existKey.equals(key))     return true;  }  return false;}  }
class C{  public boolean hasNoDragOffset(){  return mTransOffsetX <= 0 && mTransOffsetY <= 0;}  }
class C{  private EtcdKeysResponse handleEtcdWatchErrors(EtcdException exception){  if (exception.errorCode == ETCD_EVENT_INDEX_CLEARED_CODE) {    initialSetAllFlagz();    return null;  } else   if (exception.errorCode == ETCD_WATCHER_CLEARED_CODE) {    try {      Thread.sleep(reelectionBackoffMs.get());    } catch (    InterruptedException e1) {    }    return null;  } else {    throw new EtcdFlagFieldUpdaterException.EtcdFetchingFailed(exception);  }}  }
class C{  public static ExpectedCondition<Boolean> pageUrlContains(final String url){  return null;}  }
class C{  public static IOFileFilter fileFileFilter(){  return FileFileFilter.FILE;}  }
class C{  @Override public void dataChanged(FieldIdEnum changedField){  updateSymbol();}  }
class C{  public ElementType rootElementType(){  return theRoot;}  }
class C{  @Override public void updateButtons(boolean canGoPrev,boolean canGoNext,boolean canCancel,boolean canFinish){  JButton prev=getPreviousButton();  if (prev != null) {    prev.setEnabled(canGoPrev);  }  JButton next=getNextButton();  if (next != null) {    next.setEnabled(canGoNext);  }  getFinishButton().setEnabled(canFinish);  getCancelButton().setEnabled(canCancel);  if (!ApplicationManager.getApplication().isUnitTestMode()) {    getRootPane().setDefaultButton(canFinish ? getFinishButton() : getNextButton());  }}  }
class C{  public <X extends DataSource>boolean hasProperties(X dataSource){  if (dataSource == null)   throw new IllegalArgumentException("DataSource cannot be null");  return hasProperties(dataSource,(Class<X>)dataSource.getClass());}  }
class C{  public void close(){}  }
class C{  @PreDestroy public void shutdown(){  heartbeatTimer.cancel();}  }
class C{  public static void addRouteCreator(RouteCreator creator){  RouteManager.INSTANCE.addCreator(creator);}  }
class C{  public int size(){  return this.results == null ? 0 : this.results.size();}  }
class C{  public static void createAllTables(Database db,boolean ifNotExists){  BangumiCalendarDao.createTable(db,ifNotExists);  MyCollectionDao.createTable(db,ifNotExists);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Pulled_A_TO_ME(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200704,skillcaster,num0,skillname);}  }
class C{  private void putCorrection(String ocredPokemonName,String correctedPokemonName){  corrector.putCorrection(ocredPokemonName,correctedPokemonName);  SharedPreferences.Editor edit=sharedPref.edit();  edit.putString(ocredPokemonName,correctedPokemonName);  edit.apply();}  }
class C{  public static void shuffle(Object[] a,int lo,int hi){  if (a == null)   throw new NullPointerException("argument array is null");  if (lo < 0 || lo > hi || hi >= a.length) {    throw new IndexOutOfBoundsException("Illegal subarray range");  }  for (int i=lo; i <= hi; i++) {    int r=i + uniform(hi - i + 1);    Object temp=a[i];    a[i]=a[r];    a[r]=temp;  }}  }
class C{  public void verifyIsHidden(){  conditions.verifyPostAjax(invisibilityOfElementLocated(By.cssSelector(CSS)));}  }
class C{  @SubscribeEvent public void onRenderTick(TickEvent.RenderTickEvent ev){  if (ev.phase == Phase.START) {    if (this.isOverriding()) {      EntityPlayerSP player=Minecraft.getMinecraft().thePlayer;      if (player != null) {        updateYawAndPitch();        player.rotationPitch=this.mCameraPitch;        player.rotationYaw=this.mYaw;      }    }  }}  }
class C{  public static Despawn handle(EntityLiving living){  Despawn event=new Despawn(living);  OpenModLoader.getEventBus().post(event);  return event;}  }
class C{  protected void drawYAxisTransposed(Graphics2D gc,Dimension size){  final int numberOfClasses=(classNames == null ? 0 : classNames.length);  if (numberOfClasses > 0) {    final SelectionGraphics<String[]> sgc=(gc instanceof SelectionGraphics ? (SelectionGraphics<String[]>)gc : null);    gc.setFont(getFont(ChartViewer.FontKeys.YAxisFont.toString()));    final boolean doDraw=(size == null);    Rectangle bbox=null;    int x0=leftMargin;    int x1=getWidth() - rightMargin;    int y0=getHeight() - bottomMargin;    int y1=topMargin;    if (viewer.getAttributesList().isDoClustering())     y1+=topTreeSpace;    int longest=0;    for (    String className : classNames) {      longest=Math.max(longest,Basic.getStringSize(gc,className,gc.getFont()).getSize().width);    }    int right=Math.max(leftMargin,longest + 5);    if (doDraw)     gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.BLACK));    double yStep=(y0 - y1) / (double)numberOfClasses;    int c=numberOfClasses - 1;    for (    String className : classNames) {      Dimension labelSize=Basic.getStringSize(gc,className,gc.getFont()).getSize();      int x=right - labelSize.width - 4;      int y=(int)Math.round(y0 - (c + 0.5) * yStep);      if (doDraw) {        if (getChartData().getChartSelection().isSelectedClass(className)) {          gc.setColor(ProgramProperties.SELECTION_COLOR);          fillAndDrawRect(gc,x,y,labelSize.width,labelSize.height,0,ProgramProperties.SELECTION_COLOR,ProgramProperties.SELECTION_COLOR_DARKER);        }        gc.setColor(getFontColor(ChartViewer.FontKeys.YAxisFont.toString(),Color.DARK_GRAY));        gc.drawString(className,x,y);      } else {        Rectangle rect=new Rectangle(x,y,labelSize.width,labelSize.height);        if (bbox == null)         bbox=rect; else         bbox.add(rect);      }      if (sgc != null) {        sgc.setCurrentItem(new String[]{null,className});        drawRect(gc,x,y,labelSize.width,labelSize.height,0);        sgc.clearCurrentItem();      }      c--;    }    if (size != null && bbox != null) {      size.setSize(bbox.width + 3,bbox.height);    }  }}  }
class C{  public static boolean isWindows(){  return (OS.indexOf("win") >= 0);}  }
class C{  public void onError(String error,DataOutputStream dos){}  }
class C{  public static <T1,R>Plan<R> then(Observable<T1> source,Function<? super T1,? extends R> selector){  if (source == null) {    throw new NullPointerException("source");  }  if (selector == null) {    throw new NullPointerException("selector");  }  return new Pattern1<T1>(source).then(selector);}  }
class C{  public String process(Item item) throws ProcessException {  int count=0;  Item ss=item.getItemAs(Relation.SYLLABLE);  Item firstSyllable=FIRST_SYLLABLE_PATH.findItem(item);  for (Item p=ss; p != null; p=p.getPrevious(), count++) {    if (p.equalsShared(firstSyllable)) {      break;    }  }  return Integer.toString(rail(count));}  }
class C{  @Override public void write(int b){  int newcount=ensureCapacity(1);  buf[count]=(byte)b;  count=newcount;}  }
class C{  public boolean isAITicTacToc(){  return isAITicTacToc;}  }
class C{  private void layoutForPredictiveAnimations(RecyclerView.Recycler recycler,RecyclerView.State state,int startOffset,int endOffset){  if (!state.willRunPredictiveAnimations() || getChildCount() == 0 || state.isPreLayout() || !supportsPredictiveItemAnimations()) {    return;  }  int scrapExtraStart=0, scrapExtraEnd=0;  final List<RecyclerView.ViewHolder> scrapList=recycler.getScrapList();  final int scrapSize=scrapList.size();  final int firstChildPos=getPosition(getChildAt(0));  for (int i=0; i < scrapSize; i++) {    RecyclerView.ViewHolder scrap=scrapList.get(i);    final int position=scrap.getPosition();    final int direction=position < firstChildPos != mShouldReverseLayout ? LayoutState.LAYOUT_START : LayoutState.LAYOUT_END;    if (direction == LayoutState.LAYOUT_START) {      scrapExtraStart+=mOrientationHelper.getDecoratedMeasurement(scrap.itemView);    } else {      scrapExtraEnd+=mOrientationHelper.getDecoratedMeasurement(scrap.itemView);    }  }  if (DEBUG) {    Log.d(TAG,"for unused scrap, decided to add " + scrapExtraStart + " towards start and "+ scrapExtraEnd+ " towards end");  }  mLayoutState.mScrapList=scrapList;  if (scrapExtraStart > 0) {    View anchor=getChildClosestToStart();    updateLayoutStateToFillStart(getPosition(anchor),startOffset);    mLayoutState.mExtra=scrapExtraStart;    mLayoutState.mAvailable=0;    mLayoutState.mCurrentPosition+=mShouldReverseLayout ? 1 : -1;    fill(recycler,mLayoutState,state,false);  }  if (scrapExtraEnd > 0) {    View anchor=getChildClosestToEnd();    updateLayoutStateToFillEnd(getPosition(anchor),endOffset);    mLayoutState.mExtra=scrapExtraEnd;    mLayoutState.mAvailable=0;    mLayoutState.mCurrentPosition+=mShouldReverseLayout ? -1 : 1;    fill(recycler,mLayoutState,state,false);  }  mLayoutState.mScrapList=null;}  }
class C{  public GeExpr newGeExpr(Value op1,Value op2){  return new JGeExpr(op1,op2);}  }
class C{  private void updateStatus(){  conflicts=null;  if (resource == null) {    statusLabel.setText("");    return;  }  try {    LocalResourceStatus status=resource.getStatus();    if (!resource.isManaged()) {      statusLabel.setText(Policy.bind("SvnPropertiesView.resourceNotManaged"));    } else     if (status.getPropStatus().equals(SVNStatusKind.MODIFIED)) {      statusLabel.setText(Policy.bind("SvnPropertiesView.somePropertiesModified"));    } else     if (status.getPropStatus().equals(SVNStatusKind.NORMAL)) {      statusLabel.setText(Policy.bind("SvnPropertiesView.noPropertiesModified"));    } else     if (status.getPropStatus().equals(SVNStatusKind.CONFLICTED)) {      statusLabel.setText(Policy.bind("SvnPropertiesView.conflictOnProperties"));      try {        conflicts=PropertyConflict.getPropertyConflicts(resource);      } catch (      Exception e) {      }    } else {      statusLabel.setText("");    }  } catch (  SVNException e) {    statusLabel.setText(Policy.bind("SvnPropertiesView.errorGettingStatus"));  }}  }
class C{  @Override public final char readChar(){  return (char)readShort();}  }
class C{  public double inference(Document d,double[] pzd){  initializeTopics(d);  return inferenceByGibbsSampling(d,pzd,30,10);}  }
class C{  public LruCachePolicy size(int size){  setSize(size);  return this;}  }
class C{  public SubscriptionTopicProperties(final String topic,final String script,final int qos,final boolean show){  super(topic);  this.script=new SimpleStringProperty(script);  this.qos=new SimpleIntegerProperty(qos);  this.show=new SimpleBooleanProperty(show);}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public PrepareAndCommitJob(Transaction tr,TaskManager pool,WakeupManager wm,ClientLog log,ParticipantHandle handle,boolean directCall,Object tid){  super(pool,wm,directCall);  if (log == null)   throw new IllegalArgumentException("PrepareAndCommitJob: " + "PrepareAndCommitJob: log is null");  this.log=log;  if (!(tr instanceof ServerTransaction))   throw new IllegalArgumentException("PrepareAndCommitJob: " + "PrepareAndCommitJob: " + "must be a ServerTransaction");  this.tr=(ServerTransaction)tr;  if (handle == null)   throw new IllegalArgumentException("PrepareAndCommitJob: " + "PrepareJob: " + "must have participants");  this.handle=handle;  if (_directCall)   this.results=new Integer[1];  _xid=tid;}  }
class C{  public void addArg(Expr node){  List<Expr> list=(parent == null || state == null) ? getArgListNoTransform() : getArgList();  list.addChild(node);}  }
class C{  public void addField(SootField f){  checkLevel(SIGNATURES);  if (f.isDeclared())   throw new RuntimeException("already declared: " + f.getName());  if (declaresField(f.getName(),f.getType()))   throw new RuntimeException("Field already exists : " + f.getName() + " of type "+ f.getType());  fields.add(f);  f.isDeclared=true;  f.declaringClass=this;}  }
class C{  public void unloadDataStore(){  if (dataStore != null) {    dataStore.dispose();  }}  }
class C{  public void deactivate(){  deactivate(true);}  }
class C{  Item newInteger(final int value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(INT).putInt(value);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public FieldVector3D<T> crossProduct(final FieldVector3D<T> v){  return new FieldVector3D<T>(x.linearCombination(y,v.z,z.negate(),v.y),y.linearCombination(z,v.x,x.negate(),v.z),z.linearCombination(x,v.y,y.negate(),v.x));}  }
class C{  public static final String repeatString(String sStr,int iTimes){  StringBuffer sb=new StringBuffer();  for (int iCnt=0; iCnt < iTimes; iCnt++)   sb.append(sStr);  return sb.toString();}  }
class C{  public boolean isVersioned(){  return versioned;}  }
class C{  public static List<Type> toJimpleDesc(String desc){  ArrayList<Type> types=new ArrayList<Type>(2);  int len=desc.length();  int idx=0;  all:   while (idx != len) {    int nrDims=0;    Type baseType=null;    this_type:     while (idx != len) {      char c=desc.charAt(idx++);switch (c) {case '(':case ')':        continue all;case '[':      ++nrDims;    continue this_type;case 'Z':  baseType=BooleanType.v();break this_type;case 'B':baseType=ByteType.v();break this_type;case 'C':baseType=CharType.v();break this_type;case 'S':baseType=ShortType.v();break this_type;case 'I':baseType=IntType.v();break this_type;case 'F':baseType=FloatType.v();break this_type;case 'J':baseType=LongType.v();break this_type;case 'D':baseType=DoubleType.v();break this_type;case 'V':baseType=VoidType.v();break this_type;case 'L':int begin=idx;while (desc.charAt(++idx) != ';') ;String cls=desc.substring(begin,idx++);baseType=RefType.v(toQualifiedName(cls));break this_type;default :throw new AssertionError("Unknown type: " + c);}}if (baseType != null && nrDims > 0) types.add(ArrayType.v(baseType,nrDims)); else types.add(baseType);}return types;}  }
class C{  @CalledByNative static void openDateAndTimeSettings(Context context){  Intent intent=new Intent(android.provider.Settings.ACTION_DATE_SETTINGS);  try {    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);    context.startActivity(intent);  } catch (  android.content.ActivityNotFoundException ex) {  }}  }
class C{  public static double[] computePowerSpectrum(final double[] signal){  if (signal == null)   throw new NullPointerException("Received null argument");  int N=signal.length;  if (!MathUtils.isPowerOfTwo(N)) {    N=MathUtils.closestPowerOfTwoAbove(N);  }  double[] real=new double[N];  System.arraycopy(signal,0,real,0,signal.length);  realTransform(real,false);  return computePowerSpectrum_FD(real);}  }
class C{  public static List<JsonNode> listToJson(Collection<? extends IJsonable> collection){  List<JsonNode> jsonList=new LinkedList<>();  for (  IJsonable item : collection) {    jsonList.add(item.jsonize());  }  return jsonList;}  }
class C{  public final TestSubscriber<T> assertSubscribed(){  int s=subscriptionCount;  if (s == 0) {    throw new AssertionError("OnSubscribe not called",null);  }  if (s > 1) {    throw new AssertionError("OnSubscribe called multiple times: " + s,null);  }  return this;}  }
class C{  @Override public void element(String elementName,Augmentations augs) throws XNIException {  if (fMixed && fValidation) {    if (fMixedElementTypes.contains(elementName)) {      fErrorReporter.reportError(XMLMessageFormatter.XML_DOMAIN,"DuplicateTypeInMixedContent",new Object[]{fDTDElementDeclName,elementName},XMLErrorReporter.SEVERITY_ERROR);    } else {      fMixedElementTypes.add(elementName);    }  }  if (fDTDGrammar != null)   fDTDGrammar.element(elementName,augs);  if (fDTDContentModelHandler != null) {    fDTDContentModelHandler.element(elementName,augs);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Reflector_PROTECT_SKILL_A_to_ME(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1201165,skillcaster,num0,skilltarget,skillname);}  }
class C{  public IntersectsExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public TapTarget drawShadow(boolean draw){  this.drawShadow=draw;  return this;}  }
class C{  public static void resetContext(){  invocationContexts.get().getContext().reset();}  }
class C{  public void reset(){  timer.start("AudioOutput");}  }
class C{  public int traversal(){  return soot.PhaseOptions.getInt(options,"traversal");}  }
class C{  private static String convertToHTMLContent(String content){  content=replace(content,'&',"&amp;");  content=replace(content,'"',"&quot;");  content=replace(content,'<',"&lt;");  return replace(content,'>',"&gt;");}  }
class C{  public WishlistCursor queryWishlists(){  return mHelper.queryWishlists();}  }
class C{  private static void assertBufferMatchesResponseBody(byte[] buffer,int count){  assertArrayEquals(Arrays.copyOf(TEST_RESPONSE_BODY,count),buffer);}  }
class C{  public String next(){  return nextLine();}  }
class C{  public static boolean isAllowedPotentialStat(Equip equip,int opID){  return true;}  }
class C{  public DistributedLogClientBuilder streamNameRegex(String nameRegex){  DistributedLogClientBuilder newBuilder=newBuilder(this);  newBuilder._clientConfig.setStreamNameRegex(nameRegex);  return newBuilder;}  }
class C{  @Override public void printStackTrace(java.io.PrintWriter s){  if (s == null) {    s=new java.io.PrintWriter(System.err,true);  }  try {    String locInfo=getLocationAsString();    if (null != locInfo) {      s.println(locInfo);    }    super.printStackTrace(s);  } catch (  Throwable e) {  }  Throwable exception=getException();  for (int i=0; (i < 10) && (null != exception); i++) {    s.println("---------");    try {      if (exception instanceof TransformerException) {        String locInfo=((TransformerException)exception).getLocationAsString();        if (null != locInfo) {          s.println(locInfo);        }      }      exception.printStackTrace(s);    } catch (    Throwable e) {      s.println("Could not print stack trace...");    }    try {      Method meth=((Object)exception).getClass().getMethod("getException",(Class[])null);      if (null != meth) {        Throwable prev=exception;        exception=(Throwable)meth.invoke(exception,(Object[])null);        if (prev == exception) {          break;        }      } else {        exception=null;      }    } catch (    InvocationTargetException ite) {      exception=null;    }catch (    IllegalAccessException iae) {      exception=null;    }catch (    NoSuchMethodException nsme) {      exception=null;    }  }  s.flush();}  }
class C{  public void terminate(){  run=false;  if (ss != null) {    try {      ss.close();    } catch (    Exception e) {      logger.log(Level.WARNING,"Exception closing Webster ServerSocket",e);    }  }  if (lifeCycle != null) {    lifeCycle.unregister(this);  }  if (pool != null) {    pool.shutdown();  }}  }
class C{  public SpaceAlreadyStartedException(String s){  super(s);}  }
class C{  private synchronized void openLine(AudioFormat format){synchronized (lineLock) {    if (line != null) {      line.close();      line=null;    }  }  DataLine.Info info=new DataLine.Info(SourceDataLine.class,format);  boolean opened=false;  long totalDelayMs=0;  do {    try {      line=(SourceDataLine)AudioSystem.getLine(info);      line.addLineListener(new JavaStreamLineListener());synchronized (openLock) {        line.open(format,AUDIO_BUFFER_SIZE);        try {          openLock.wait();        } catch (        InterruptedException ie) {          ie.printStackTrace();        }        opened=true;      }    } catch (    LineUnavailableException lue) {      System.err.println("LINE UNAVAILABLE: " + "Format is " + currentFormat);      try {        Thread.sleep(openFailDelayMs);        totalDelayMs+=openFailDelayMs;      } catch (      InterruptedException ie) {        ie.printStackTrace();      }    }  } while (!opened && totalDelayMs < totalOpenFailDelayMs);  if (opened) {    setVolume(line,volume);    resetTime();    if (isPaused() && line.isRunning()) {      line.stop();    } else {      line.start();    }  } else {    if (line != null) {      line.close();    }    line=null;  }}  }
class C{  public void removeOwnership(NamespaceBundles bundles){  boolean hasError=false;  for (  NamespaceBundle bundle : bundles.getBundles()) {    if (getOwnedServiceUnit(bundle) == null) {      continue;    }    try {      this.removeOwnership(bundle);    } catch (    Exception e) {      LOG.warn(String.format("Failed to remove ownership of a service unit: %s",bundle),e);      hasError=true;    }  }  checkState(!hasError,"Not able to remove all owned bundles");}  }
class C{  public final char yycharat(int pos){  return zzBuffer[zzStartRead + pos];}  }
class C{  private byte[] entityToBytes(HttpEntity entity) throws IOException, ServerError {  PoolingByteArrayOutputStream bytes=new PoolingByteArrayOutputStream(mPool,(int)entity.getContentLength());  byte[] buffer=null;  try {    InputStream in=entity.getContent();    if (in == null) {      throw new ServerError();    }    buffer=mPool.getBuf(1024);    int count;    while ((count=in.read(buffer)) != -1) {      bytes.write(buffer,0,count);    }    return bytes.toByteArray();  }  finally {    try {      entity.consumeContent();    } catch (    IOException e) {      VolleyLog.v("Error occured when calling consumingContent");    }    mPool.returnBuf(buffer);    bytes.close();  }}  }
class C{  public boolean isSingleton(){  return true;}  }
class C{  public NumberIsTooSmallException(Localizable specific,Number wrong,Number min,boolean boundIsAllowed){  super(specific,wrong,min);  this.min=min;  this.boundIsAllowed=boundIsAllowed;}  }
class C{  private void handleFileDataValueSave(TrackedEntityDataValue dataValue){  FileResource fileResource=fetchFileResource(dataValue);  if (fileResource == null) {    return;  }  setAssigned(fileResource);}  }
class C{  @Override public Result decode(BinaryBitmap image,Map<DecodeHintType,?> hints) throws NotFoundException {  setHints(hints);  return decodeInternal(image);}  }
class C{  public static int calcTextHeight(Paint paint,String demoText){  Rect r=new Rect();  paint.getTextBounds(demoText,0,demoText.length(),r);  return r.height();}  }
class C{  public AnnouncementTimerThread(){  super("GS-multicast-announcement-timer");  setDaemon(true);}  }
class C{  public int compare(Object o1,Object o2){  Field f1=(Field)o1;  Field f2=(Field)o2;  if (f1 == f2)   return 0;  if (f1.getDeclaringClass() == f2.getDeclaringClass())   return f1.getName().compareTo(f2.getName());  if (f1.getDeclaringClass().isAssignableFrom(f2.getDeclaringClass()))   return -1;  return 1;}  }
class C{  protected Visitor(){  super(Element.class);  this.scoper=Scoper.UNRESTRICTED;  this.ignoreMapEntry=false;}  }
class C{  private void releaseEquimentWriteLock(final Long equipmentId){  if (subEquipmentCache.isWriteLockedByCurrentThread(equipmentId)) {    subEquipmentCache.releaseWriteLockOnKey(equipmentId);  }  if (equipmentCache.isWriteLockedByCurrentThread(equipmentId)) {    equipmentCache.releaseWriteLockOnKey(equipmentId);  }}  }
class C{  public RawFileAudioPlayer(String path) throws IOException {  this.path=path;  os=new BufferedOutputStream(new FileOutputStream(path));}  }
class C{  public void stencil(GL2 gl){  gl.glClear(GL.GL_STENCIL_BUFFER_BIT);  gl.glColorMask(false,false,false,false);  gl.glEnable(GL.GL_STENCIL_TEST);  gl.glStencilFunc(GL.GL_ALWAYS,1,-1);  gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);  this.fill(gl);  gl.glStencilFunc(GL.GL_NOTEQUAL,1,-1);  gl.glStencilOp(GL.GL_KEEP,GL.GL_KEEP,GL.GL_REPLACE);  float lw=RenderUtilities.setLineWidth(gl,3.0f);  gl.glColorMask(true,true,true,true);  this.setOutlineColor(gl);  this.draw(gl);  gl.glLineWidth(lw);  gl.glDisable(GL.GL_STENCIL_TEST);  this.setFillColor(gl);  this.fill(gl);}  }
class C{  public static IOFileFilter nameFileFilter(String name,IOCase caseSensitivity){  return new NameFileFilter(name,caseSensitivity);}  }
class C{  public ByteArrayOutputStream(){  this(1024);}  }
class C{  @Override public int hashCode(){  final int prime=31;  int result=1;  result=prime * result + ((getId() == null) ? 0 : getId().hashCode());  result=prime * result + ((getSessionId() == null) ? 0 : getSessionId().hashCode());  result=prime * result + ((getAccount() == null) ? 0 : getAccount().hashCode());  result=prime * result + ((getIp() == null) ? 0 : getIp().hashCode());  result=prime * result + ((getStartTime() == null) ? 0 : getStartTime().hashCode());  result=prime * result + ((getEnable() == null) ? 0 : getEnable().hashCode());  result=prime * result + ((getRemark() == null) ? 0 : getRemark().hashCode());  result=prime * result + ((getCreateTime() == null) ? 0 : getCreateTime().hashCode());  result=prime * result + ((getCreateBy() == null) ? 0 : getCreateBy().hashCode());  result=prime * result + ((getUpdateTime() == null) ? 0 : getUpdateTime().hashCode());  result=prime * result + ((getUpdateBy() == null) ? 0 : getUpdateBy().hashCode());  return result;}  }
class C{  public static char[] toCharArray(Reader input) throws IOException {  CharArrayWriter sw=new CharArrayWriter();  copy(input,sw);  return sw.toCharArray();}  }
class C{  public void removeInputProcessor(InputProcessor ip){  processors.removeProcessor(ip);  Gdx.input.setInputProcessor(processors);}  }
class C{  private void execFile(SQLiteDatabase db,@RawRes int sqlFileRes){  final String[] queries=TextUtils.join(" ",ReaderUtils.readLines(mContext,sqlFileRes)).split(";");  for (  String query : queries) {    db.execSQL(query);  }}  }
class C{  @Override public void revertToDefaultValue(){  populateField(defaultValue);}  }
class C{  public int pxToDp(@AndroidCoordinate int px){  return myConstraintModel.pxToDp(px);}  }
class C{  @Deprecated public static IOFileFilter andFileFilter(IOFileFilter filter1,IOFileFilter filter2){  return new AndFileFilter(filter1,filter2);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_NoReduceSpellATK_Instant_A_TO_SELF(String skillcaster,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201278,skillcaster,num0,skillname);}  }
class C{  public VideoDeleteQuery ownerId(Integer value){  return unsafeParam("owner_id",value);}  }
class C{  protected void checkEigenVector(double[] eigenVector,EigenDecomposition ed,double tolerance){  Assert.assertTrue(isIncludedColumn(eigenVector,ed.getV(),tolerance));}  }
class C{  public long optLong(int index){  return this.optLong(index,0);}  }
class C{  public static boolean controllerHasRequestUriDirect(HttpServletRequest request,String uri){  if (request == null) {    return false;  }  RequestHandler rh=RequestHandler.getRequestHandler(request.getServletContext());  return rh.controllerHasRequestUriDirect(uri);}  }
class C{  public static boolean isCategoryContainsProduct(Delegator delegator,LocalDispatcher dispatcher,String productCategoryId,String productId){  if (UtilValidate.isEmpty(productCategoryId) || UtilValidate.isEmpty(productId)) {    return false;  }  try {    List<EntityCondition> conds=FastList.newInstance();    conds.add(EntityCondition.makeCondition("productCategoryId",productCategoryId));    conds.add(EntityCondition.makeCondition("productId",productId));    conds.add(EntityUtil.getFilterByDateExpr());    List<GenericValue> productCategoryMembers=EntityQuery.use(delegator).select("productCategoryId").from("ProductCategoryMember").where(conds).cache(true).queryList();    return !productCategoryMembers.isEmpty();  } catch (  GenericEntityException e) {    Debug.logWarning(e,module);  }  return false;}  }
class C{  private String parseColor(String color){  String value="";  String[] values;  if (color.startsWith("#")) {    if (color.length() == 7) {      value=color.substring(1) + "ff";    } else     if (color.length() == 9) {      value=color.substring(1);    } else {      value="ffffffff";      tto.setWarnings(tto.getWarnings() + "Unrecoginzed format: " + color+ "\n\n");    }  } else   if (color.startsWith("rgb")) {    boolean alpha=false;    if (color.startsWith("rgba")) {      alpha=true;    }    try {      color=color.replaceAll("[)]","");      values=color.split("[(]")[1].split("[,]");      int r, g, b, a=255;      r=Integer.parseInt(values[0]);      g=Integer.parseInt(values[1]);      b=Integer.parseInt(values[2]);      if (alpha) {        a=Integer.parseInt(values[3]);      }      values[0]=Integer.toHexString(r);      values[1]=Integer.toHexString(g);      values[2]=Integer.toHexString(b);      if (alpha) {        values[3]=Integer.toHexString(a);      }      StringBuilder sb=new StringBuilder();      for (int i=0; i < values.length; i++) {        if (values[i].length() < 2) {          values[i]="0" + values[i];        }        sb.append(values[i]);      }      if (!alpha) {        sb.append("ff");      }      value=sb.toString();    } catch (    Exception e) {      value="ffffffff";      tto.setWarnings(tto.getWarnings() + "Unrecoginzed color: " + color+ "\n\n");    }  } else {    value=Style.getRGBValue("name",color);    if (value == null || value.isEmpty()) {      value="ffffffff";      tto.setWarnings(tto.getWarnings() + "Unrecoginzed color: " + color+ "\n\n");    }  }  return value.toLowerCase();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_SkillATK_Instant_ME_TO_SELF(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1200410,num0,skillname);}  }
class C{  @Override public InputSource resolveEntity(String publicId,String systemId){  String resolved=getResolvedEntity(publicId,systemId);  if (resolved != null) {    try {      InputSource iSource=new InputSource(resolved);      iSource.setPublicId(publicId);      URL url=new URL(resolved);      InputStream iStream=url.openStream();      iSource.setByteStream(iStream);      return iSource;    } catch (    Exception e) {      catalogManager.debug.message(1,"Failed to create InputSource (" + e.toString() + ")",resolved);      return null;    }  }  return null;}  }
class C{  public static void saveLogs(String logFile){  UTF8FileIO.writeln(logFile,new String[]{getLogString()});}  }
class C{  public int updateUploadStatus(long id,UploadStatus status,UploadResult result,String remotePath,String localPath){  int returnValue=0;  Cursor c=getDB().query(ProviderTableMeta.CONTENT_URI_UPLOADS,null,ProviderTableMeta._ID + "=?",new String[]{String.valueOf(id)},null);  if (c.getCount() != 1) {    Log_OC.e(TAG,c.getCount() + " items for id=" + id+ " available in UploadDb. Expected 1. Failed to update upload db.");  } else {    returnValue=updateUploadInternal(c,status,result,remotePath,localPath);  }  c.close();  return returnValue;}  }
class C{  public void login(CredentialProvider credentialProvider) throws LoginFailedException, RemoteServerException {  if (credentialProvider == null) {    throw new NullPointerException("Credential Provider is null");  }  this.credentialProvider=credentialProvider;  startTime=currentTimeMillis();  playerProfile=new PlayerProfile(this);  settings=new Settings(this);  inventories=new Inventories(this);  initialize();}  }
class C{  public synchronized ZooKeeperClientBuilder retryPolicy(RetryPolicy retryPolicy){  this.retryPolicy=retryPolicy;  return this;}  }
class C{  public void addAllTagsOf(Host h){  List<Tag> tags=h.getTags();  if (tags.isEmpty())   return;  if (mTagList == null) {    mTagList=new ArrayList<Tag>(tags.size());  }  mTagList.addAll(tags);}  }
class C{  public int size(){  return map.size();}  }
class C{  public boolean hasURLsForSelection(){  return getSelectedNodes().size() > 0;}  }
class C{  private void removePendingAcks(PositionImpl position){  Consumer ackOwnedConsumer=null;  if (pendingAcks.get(position) == null) {    for (    Consumer consumer : subscription.getConsumers()) {      if (!consumer.equals(this) && consumer.getPendingAcks().get(position) != null) {        ackOwnedConsumer=consumer;        break;      }    }  } else {    ackOwnedConsumer=this;  }  if (ackOwnedConsumer != null) {    int totalAckedMsgs=ackOwnedConsumer.getPendingAcks().remove(position);    if (ackOwnedConsumer.shouldBlockConsumerOnUnackMsgs() && ((ackOwnedConsumer.unackedMessages.addAndGet(-totalAckedMsgs) <= (maxUnackedMessages / 2)) && ackOwnedConsumer.blockedConsumerOnUnackedMsgs)) {      ackOwnedConsumer.blockedConsumerOnUnackedMsgs=false;      flowConsumerBlockedPermits(ackOwnedConsumer);    }  }}  }
class C{  private void BrowseSummaryDirBtnActionPerformed(java.awt.event.ActionEvent evt){  JFileChooser fc=new JFileChooser();  fc.setCurrentDirectory((SummariesRootDirEdt.getText().length() == 0) ? new java.io.File(".") : new java.io.File(SummariesRootDirEdt.getText()));  fc.setSelectedFile(fc.getCurrentDirectory());  fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);  int iRet=fc.showOpenDialog(this);  if (iRet == JFileChooser.APPROVE_OPTION) {    SummariesRootDirEdt.setText(fc.getSelectedFile().getAbsolutePath());  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_HOUSING_OBJECT_REWARD_ITEM(int objectNameId,int rewardItemNameId){  return new SM_SYSTEM_MESSAGE(1401263,calculateNameId(objectNameId),new DescriptionId(rewardItemNameId));}  }
class C{  public void lsp2mgc(double lsp[],double mgc[],int m,double alpha){  lsp2lpc(lsp,mgc,m);  if (use_log_gain)   mgc[0]=Math.exp(lsp[0]); else   mgc[0]=lsp[0];  ignorm(mgc,mgc,m,gamma);  for (int i=m; i >= 1; i--)   mgc[i]*=-stage;  mgc2mgc(mgc,m,alpha,gamma,mgc,m,alpha,gamma);}  }
class C{  public Object nextMeta() throws JSONException {  char c;  char q;  do {    c=next();  } while (Character.isWhitespace(c));switch (c) {case 0:    throw syntaxError("Misshaped meta tag");case '<':  return XML.LT;case '>':return XML.GT;case '/':return XML.SLASH;case '=':return XML.EQ;case '!':return XML.BANG;case '?':return XML.QUEST;case '"':case '\'':q=c;for (; ; ) {c=next();if (c == 0) {throw syntaxError("Unterminated string");}if (c == q) {return Boolean.TRUE;}}default :for (; ; ) {c=next();if (Character.isWhitespace(c)) {return Boolean.TRUE;}switch (c) {case 0:case '<':case '>':case '/':case '=':case '!':case '?':case '"':case '\'':back();return Boolean.TRUE;}}}}  }
class C{  private static boolean isTextSplitable(String text,int index){  char c0=text.charAt(index);  char c1=text.charAt(index + 1);  if (isLetter(c0) && isLetter(c1)) {    return false;  } else {    return !NumberExpander.isDigit(c0) || !NumberExpander.isDigit(c1);  }}  }
class C{  @Nullable public ItemStack transferStackInSlot(EntityPlayer playerIn,int index){  ItemStack itemstack=null;  Slot slot=(Slot)this.inventorySlots.get(index);  if (slot != null && slot.getHasStack()) {    ItemStack itemstack1=slot.getStack();    itemstack=itemstack1.copy();    if (index < this.numRows * 9) {      if (!this.mergeItemStack(itemstack1,this.numRows * 9,this.inventorySlots.size(),true)) {        return null;      }    } else     if (!this.mergeItemStack(itemstack1,0,this.numRows * 9,false)) {      return null;    }    if (itemstack1.stackSize == 0) {      slot.putStack((ItemStack)null);    } else {      slot.onSlotChanged();    }  }  return itemstack;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_INVITE_HE_JOINED(String value0){  return new SM_SYSTEM_MESSAGE(1300260,value0);}  }
class C{  private static void forceSet(Object obj,Field f,Object val) throws IllegalAccessException {  f.setAccessible(true);  f.set(obj,val);}  }
class C{  @Override protected void readImpl(){  targetObjectId=readD();  type=readC();}  }
class C{  FormatInformation readFormatInformation() throws FormatException {  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  int formatInfoBits1=0;  for (int i=0; i < 6; i++) {    formatInfoBits1=copyBit(i,8,formatInfoBits1);  }  formatInfoBits1=copyBit(7,8,formatInfoBits1);  formatInfoBits1=copyBit(8,8,formatInfoBits1);  formatInfoBits1=copyBit(8,7,formatInfoBits1);  for (int j=5; j >= 0; j--) {    formatInfoBits1=copyBit(8,j,formatInfoBits1);  }  int dimension=bitMatrix.getHeight();  int formatInfoBits2=0;  int jMin=dimension - 7;  for (int j=dimension - 1; j >= jMin; j--) {    formatInfoBits2=copyBit(8,j,formatInfoBits2);  }  for (int i=dimension - 8; i < dimension; i++) {    formatInfoBits2=copyBit(i,8,formatInfoBits2);  }  parsedFormatInfo=FormatInformation.decodeFormatInformation(formatInfoBits1,formatInfoBits2);  if (parsedFormatInfo != null) {    return parsedFormatInfo;  }  throw FormatException.getFormatInstance();}  }
class C{  public final boolean contains(Node n){  return bits.get(n.getNumber());}  }
class C{  private void endList(){  List list=(List)getLast(List.class);  if (list != null) {    if (mResult.length() == 0 || mResult.charAt(mResult.length() - 1) != '\n') {      mResult.append('\n');    }    int start=mResult.getSpanStart(list);    int end=mResult.length();    int nrOfIndents=list.mNrOfIndents;    if (!list.mIsIndentation) {      nrOfIndents--;      int margin=Helper.getLeadingMarging();      Object span=list instanceof UL ? new BulletSpan(margin,start == end,false,false) : new NumberSpan(1,margin,start == end,false,false);      mResult.setSpan(span,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    }    if (nrOfIndents > 0) {      int margin=nrOfIndents * Helper.getLeadingMarging();      IndentationSpan span=new IndentationSpan(margin,start == end,false,false);      mResult.setSpan(span,start,end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);    }    mResult.removeSpan(list);  }}  }
class C{  public static boolean isNumber(String string){  String s=string.trim();  if (s.length() < 1)   return false;  double value=0;  try {    value=Double.parseDouble(s);  } catch (  NumberFormatException e) {    return false;  }  return true;}  }
class C{  public InvalidDatatypeFacetException(String key,Object[] args){  super(key,args);}  }
class C{  private void initState(){  ScopedStateStore state=getState();  Project project=getProject();  NewProjectWizardDynamic.initState(state,determineGradlePluginVersion(project));  if (project != null) {    state.put(WizardConstants.PROJECT_LOCATION_KEY,project.getBasePath());  }}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ArrayDecl fullCopy(){  ArrayDecl tree=(ArrayDecl)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void limitKnownPeers(int limit){  if (peerList.size() < limit)   return;  int knownPeers=0;  Peer oldestPeer=null;  long oldestDate=System.currentTimeMillis();  for (  Peer peer : peerList) {    if (peer.hasReceivedData()) {      knownPeers++;      if (peer.getCreationTime() < oldestDate) {        oldestDate=peer.getCreationTime();        oldestPeer=peer;      }    }  }  if (knownPeers > limit) {    peerList.remove(oldestPeer);  }  if (knownPeers - 1 > limit) {    limitKnownPeers(limit);  }}  }
class C{  public static Transaction.Created create(ExtendedTransactionManager mgr,Xid xid,long leaseTime,boolean setAsDefault,ISpaceProxy proxy,XAResourceImpl resource,boolean delegatedXa) throws LeaseDeniedException, RemoteException {  TransactionManager.Created rawTxn=mgr.create(xid,leaseTime);  GSServerTransaction transaction=GSServerTransaction.create(mgr,xid,leaseTime);  Transaction.Created txCreated=new Transaction.Created(transaction,rawTxn.lease);  if (setAsDefault) {    proxy.replaceContextTransaction(txCreated,resource,delegatedXa);  }  return txCreated;}  }
class C{  public PhotosSaveMessagesPhotoQuery server(Integer value){  return unsafeParam("server",value);}  }
class C{  @Override protected void checkDuplicateValues(){  if (contains()) {    String code="DuplicateKey";    String value=toString(fLocalValues);    String eName=fIdentityConstraint.getElementName();    String cName=fIdentityConstraint.getIdentityConstraintName();    reportSchemaError(code,new Object[]{value,eName,cName});  }}  }
class C{  public static String[][] ISO8859_1_ESCAPE(){  return ISO8859_1_ESCAPE.clone();}  }
class C{  public boolean contains(String s){  return map.containsKey(s);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_CANNOT_ENTER_INSTANCE_COOL_TIME_HOUR_CLIENT(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1400037,value0,value1);}  }
class C{  public static String[] createJVisualVmCommand(String jmxServiceUrl,String javaHomeDir){  List<String> commandArray=new ArrayList<String>(5);  if (javaHomeDir == null) {    javaHomeDir=calculateJavaHome();  }  if (javaHomeDir != null) {    commandArray.add(javaHomeDir + File.separator + "bin"+ File.separator+ "jvisualvm");  } else {    commandArray.add("jvisualvm");  }  commandArray.add("--openjmx");  commandArray.add(jmxServiceUrl);  commandArray.add("--nosplash");  if (_logger.isLoggable(Level.FINE)) {    _logger.log(Level.FINE,"all jvisualvm parameters:" + commandArray);  }  return commandArray.toArray(new String[commandArray.size()]);}  }
class C{  public int size(){  if (fileTable != null) {    int size=0;    try {synchronized (this) {        FastIterator<Object> iter=fileTable.keys();        while (iter.next() != null) {          size++;        }      }    } catch (    IOException e) {      Debug.logError(e,module);    }    return size;  } else {    return memoryTable.size();  }}  }
class C{  public long createAlarm(Intent intent){  long delay=generateRandomDelay();  long timestamp=delay + getCurrentTime();  return createAlarm(intent,timestamp);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FIELDABYSS_BOSS_KILLED(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400295,value1,value0);}  }
class C{  public Builder serverMessageDigest(String serverMessageDigest){  this.serverMessageDigest=serverMessageDigest;  return this;}  }
class C{  public void loading(){  mHintView.setVisibility(View.GONE);  mProgressBar.setVisibility(View.VISIBLE);}  }
class C{  @Override public final void pcdata(Augmentations augs) throws XNIException {  fMixed=true;}  }
class C{  private void scrollStarted(ScrollDirection direction,float x,float y){  if (mEdgeSwipeHandler != null) {    mEdgeSwipeHandler.swipeStarted(direction,x,y);    mEdgeSwipeStarted=true;  }}  }
class C{  @deprecated public StringTokenizer(String str,String delim,boolean returndelims,boolean coalescedelims){  this.m_delimiters_=EMPTY_DELIMITER_;  if ((delim != null) && (delim.length() > 0)) {    this.m_delimiters_=new UnicodeSet();    this.m_delimiters_.addAll(delim);    checkDelimiters();  }  this.m_coalesceDelimiters_=coalescedelims;  this.m_source_=str;  this.m_length_=str.length();  this.m_returnDelimiters_=returndelims;  this.m_tokenOffset_=-1;  this.m_tokenSize_=-1;  if (this.m_length_ == 0) {    this.m_nextOffset_=-1;  } else {    this.m_nextOffset_=0;    if (!returndelims) {      this.m_nextOffset_=getNextNonDelimiter(0);    }  }}  }
class C{  private void internalSetValue(Double value){  if (spinner != null) {    if (value.doubleValue() < minValue) {      spinner.setValue(minValue);    } else     if (value.doubleValue() > maxValue) {      spinner.setValue(maxValue);    } else {      spinner.setValue(value);    }  }}  }
class C{  public static Map<String,Object> createPartyNote(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  GenericValue userLogin=(GenericValue)context.get("userLogin");  String noteString=(String)context.get("note");  String partyId=(String)context.get("partyId");  String noteId=(String)context.get("noteId");  String noteName=(String)context.get("noteName");  Locale locale=(Locale)context.get("locale");  if (noteId != null) {    try {      GenericValue value=EntityQuery.use(delegator).from("NoteData").where("noteId",noteId).queryOne();      if (value == null) {        Debug.logError("ERROR: Note id does not exist for : " + noteId + ", autogenerating.",module);        noteId=null;      }    } catch (    GenericEntityException e) {      Debug.logError(e,"ERROR: Note id does not exist for : " + noteId + ", autogenerating.",module);      noteId=null;    }  }  if (noteId == null) {    Map<String,Object> noteRes=null;    try {      noteRes=dispatcher.runSync("createNote",UtilMisc.toMap("partyId",userLogin.getString("partyId"),"note",noteString,"userLogin",userLogin,"locale",locale,"noteName",noteName));    } catch (    GenericServiceException e) {      Debug.logError(e,e.getMessage(),module);      return ServiceUtil.returnError(UtilProperties.getMessage(resource,"PartyNoteCreationError",UtilMisc.toMap("errorString",e.getMessage()),locale));    }    if (noteRes.get(ModelService.RESPONSE_MESSAGE).equals(ModelService.RESPOND_ERROR))     return noteRes;    noteId=(String)noteRes.get("noteId");    if (UtilValidate.isEmpty(noteId)) {      return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"partyservices.problem_creating_note_no_noteId_returned",locale));    }  }  result.put("noteId",noteId);  try {    Map<String,String> fields=UtilMisc.toMap("partyId",partyId,"noteId",noteId);    GenericValue v=delegator.makeValue("PartyNote",fields);    delegator.create(v);  } catch (  GenericEntityException ee) {    Debug.logError(ee,module);    result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_ERROR);    result.put(ModelService.ERROR_MESSAGE,UtilProperties.getMessage(resourceError,"partyservices.problem_associating_note_with_party",UtilMisc.toMap("errMessage",ee.getMessage()),locale));  }  return result;}  }
class C{  @Override public boolean next(){  if (currentScan != null) {    if (currentScan == s1)     hasMore1=s1.next(); else     if (currentScan == s2)     hasMore2=s2.next();  }  if (!hasMore1 && !hasMore2)   return false; else   if (hasMore1 && hasMore2) {    currentScan=comp.compare(s1,s2) < 0 ? s1 : s2;  } else   if (hasMore1)   currentScan=s1; else   if (hasMore2)   currentScan=s2;  return true;}  }
class C{  static boolean isSameRow(ConstraintWidget a,ConstraintWidget b){  return Math.max(a.getY(),b.getY()) < Math.min(a.getY() + a.getHeight(),b.getY() + b.getHeight());}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DashATK_A_TO_B(String skillcaster,int num0,String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200957,skillcaster,num0,skilltarget,skillname);}  }
class C{  public String resolveURI(String uri) throws IOException {  catalogManager.debug.message(3,"resolveURI(" + uri + ")");  uri=normalizeURI(uri);  if (uri != null && uri.startsWith("urn:publicid:")) {    uri=PublicId.decodeURN(uri);    return resolvePublic(uri,null);  }  if (uri != null) {    String resolved=resolveLocalURI(uri);    if (resolved != null) {      return resolved;    }  }  return resolveSubordinateCatalogs(URI,null,null,uri);}  }
class C{  private void computeAreas(NodeItem root){  int leafCount=0;  Graph g=(Graph)m_vis.getGroup(m_group);  TupleSet nodes=g.getNodes();  nodes.addColumns(AREA_SCHEMA);  Iterator iter=new TreeNodeIterator(root);  while (iter.hasNext()) {    NodeItem n=(NodeItem)iter.next();    n.setDouble(AREA,0);  }  iter=new TreeNodeIterator(root,false);  while (iter.hasNext()) {    NodeItem n=(NodeItem)iter.next();    double area=0;    if (n.getChildCount() == 0) {      area=n.getSize();      ++leafCount;    } else     if (n.isExpanded()) {      NodeItem c=(NodeItem)n.getFirstChild();      for (; c != null; c=(NodeItem)c.getNextSibling()) {        area+=c.getDouble(AREA);        ++leafCount;      }    }    n.setDouble(AREA,area);  }  Rectangle2D b=getLayoutBounds();  double area=(b.getWidth() - 1) * (b.getHeight() - 1);  double scale=area / root.getDouble(AREA);  iter=new TreeNodeIterator(root);  while (iter.hasNext()) {    NodeItem n=(NodeItem)iter.next();    n.setDouble(AREA,n.getDouble(AREA) * scale);  }}  }
class C{  public ConstantPostAggregation withValue(double value){  return new ConstantPostAggregation(getName(),value);}  }
class C{  public Parallel parallel(Task... tasks){  return new Parallel(this.executor_,tasks);}  }
class C{  private void pop(char c) throws JSONException {  if (this.top <= 0) {    throw new JSONException("Nesting error.");  }  char m=this.stack[this.top - 1] == null ? 'a' : 'k';  if (m != c) {    throw new JSONException("Nesting error.");  }  this.top-=1;  this.mode=this.top == 0 ? 'd' : this.stack[this.top - 1] == null ? 'a' : 'k';}  }
class C{  private Object readResolve(){  return forName(name);}  }
class C{  public ImageLoader(int height,int width,int channels,boolean centerCropIfNeeded){  this(height,width,channels);  this.centerCropIfNeeded=centerCropIfNeeded;}  }
class C{  public Disruptor(final EventFactory<T> eventFactory,final int ringBufferSize,final ThreadFactory threadFactory,final ProducerType producerType,final WaitStrategy waitStrategy){  this(RingBuffer.create(producerType,eventFactory,ringBufferSize,waitStrategy),new BasicExecutor(threadFactory));}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Poison_INTERVAL_TO_B(String skilltarget,int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201068,skilltarget,num0,skillname);}  }
class C{  public Object nextContent() throws JSONException {  char c;  StringBuffer sb;  do {    c=next();  } while (Character.isWhitespace(c));  if (c == 0) {    return null;  }  if (c == '<') {    return XML.LT;  }  sb=new StringBuffer();  for (; ; ) {    if (c == '<' || c == 0) {      back();      return sb.toString().trim();    }    if (c == '&') {      sb.append(nextEntity(c));    } else {      sb.append(c);    }    c=next();  }}  }
class C{  public static String hashKeyForDisk(String key){  String cacheKey;  try {    final MessageDigest mDigest=MessageDigest.getInstance("MD5");    mDigest.update(key.getBytes());    cacheKey=bytesToHexString(mDigest.digest());  } catch (  NoSuchAlgorithmException e) {    cacheKey=String.valueOf(key.hashCode());  }  return cacheKey;}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public GenericInterfaceDeclSubstituted fullCopy(){  GenericInterfaceDeclSubstituted tree=(GenericInterfaceDeclSubstituted)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {switch (i) {case 5:        tree.children[i]=new List();      continue;  }  ASTNode child=(ASTNode)children[i];  if (child != null) {    child=child.fullCopy();    tree.setChild(child,i);  }}}return tree;}  }
class C{  public static double distance(VisualItem vi1,VisualItem vi2){  double dx=vi1.getX() - vi2.getX();  double dy=vi1.getY() - vi2.getY();  return Math.sqrt(dx * dx + dy * dy);}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  @Override @SuppressWarnings("checkstyle:cyclomaticcomplexity") public void postDruidQuery(RequestContext context,SuccessCallback success,HttpErrorCallback error,FailureCallback failure,DruidQuery<?> query){  LOG.info("Invoking test druid webservice: {}",this);  lastQuery=query;  try {    jsonQuery=writer.withDefaultPrettyPrinter().writeValueAsString(query);  } catch (  JsonProcessingException ignored) {  }  if (throwable != null) {    failure.invoke(throwable);    return;  }  if (!(lastQuery.getQueryType() instanceof DefaultQueryType)) {    throw new IllegalArgumentException("Illegal query type : " + lastQuery.getQueryType());  }  DefaultQueryType defaultQueryType=(DefaultQueryType)lastQuery.getQueryType();switch (defaultQueryType) {case GROUP_BY:case TOP_N:case TIMESERIES:case LOOKBACK:    break;case SEGMENT_METADATA:  jsonResponse=null;break;case TIME_BOUNDARY:jsonResponse=null;break;default :throw new IllegalArgumentException("Illegal query type : " + lastQuery.getQueryType());}try {if (query instanceof WeightEvaluationQuery) {success.invoke(mapper.readTree(weightResponse));} else if (statusCode == 200) {success.invoke(mapper.readTree(jsonResponse.call()));} else {error.invoke(statusCode,reasonPhrase,jsonResponse.call());}} catch (IOException e) {failure.invoke(e);}}  }
class C{  public static void registerComponent(String resourceType,String descriptionFactoryLink,Class<? extends ResourceState> descriptionClass,String stateFactoryLink,Class<? extends ResourceState> stateClass){  registerComponent(resourceType,descriptionFactoryLink,descriptionClass,stateFactoryLink,stateClass,stateClass);}  }
class C{  @Override public void inspectVolume(CommandInput input,CompletionHandler completionHandler){  createOrUpdateTargetSsl(input);  String path=String.format("/volumes/%s",input.getProperties().get(DOCKER_VOLUME_NAME_PROP_NAME));  sendGet(UriUtils.extendUri(input.getDockerUri(),path),input.getProperties(),completionHandler);}  }
class C{  private void initBackupComponents() throws SpaceComponentsInitializeException {  for (Iterator<ISpaceComponentsHandler> iterator=_componentsHandlers.iterator(); iterator.hasNext(); ) {    ISpaceComponentsHandler handler=iterator.next();    if (!handler.isRecoverySupported())     handler.initComponents(false);  }}  }
class C{  public void actionPerformed(ActionEvent ev){  final Color color=ChooseColorDialog.showChooseColorDialog(getViewer().getFrame(),"Choose fill color",ProgramProperties.get("NodeFillColor",Color.WHITE));  if (color != null) {    execute("set fillColor=" + color.getRed() + " "+ color.getGreen()+ " "+ color.getBlue()+ ";");    ProgramProperties.put("NodeFillColor",color);  }}  }
class C{  public MergeJoinScan(SortScan ss1,SortScan ss2,String fldName1,String fldName2){  this.ss1=ss1;  this.ss2=ss2;  this.fldName1=fldName1;  this.fldName2=fldName2;  beforeFirst();}  }
class C{  private static final String toXml(int categories){  StringBuilder sb=new StringBuilder();  if ((categories & Integer.MAX_VALUE) == Integer.MAX_VALUE) {    sb.append("<All" + " Value=\"" + Integer.MAX_VALUE + "\" />");  } else {    int mask=1;    for (int i=1; i < 32; i++) {      if ((categories & mask) == mask) {        sb.append("<Group" + i + " Value=\""+ mask+ "\" />");      }      mask*=2;    }  }  return sb.toString();}  }
class C{  public Z Minus(Z a,Z b){  re=a.re - b.re;  im=a.im - b.im;  return this;}  }
class C{  public boolean weakerProcessContents(XSWildcardDecl superWildcard){  return fProcessContents == XSWildcard.PC_LAX && superWildcard.fProcessContents == XSWildcard.PC_STRICT || fProcessContents == XSWildcard.PC_SKIP && superWildcard.fProcessContents != XSWildcard.PC_SKIP;}  }
class C{  private void createTry(polyglot.ast.Try tryStmt){  polyglot.ast.Block finallyBlock=tryStmt.finallyBlock();  if (finallyBlock == null) {    createTryCatch(tryStmt);  } else {    createTryCatchFinally(tryStmt);  }}  }
class C{  public ZWaveClimateControlScheduleCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_BoostSkillToggleCost_ME_TO_B(String skilltarget,String skillname){  return new SM_SYSTEM_MESSAGE(1200487,skilltarget,skillname);}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public ReturnStmt fullCopy(){  ReturnStmt tree=(ReturnStmt)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GATHER_FAIL_1_BASIC(String value0){  return new SM_SYSTEM_MESSAGE(1330021,value0);}  }
class C{  public void loadDataStringFromFile(String sFilename) throws java.io.IOException, java.io.FileNotFoundException {  String sDataString=utils.loadFileToStringWithNewlines(sFilename);  setDataString(sDataString);}  }
class C{  @Override public boolean onUnbind(Intent intent){  ((FileDownloaderBinder)mBinder).clearListeners();  return false;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_ACQUIRE_ERROR_EXP_TO_NEXT_LEVEL(int num0){  return new SM_SYSTEM_MESSAGE(1300582,num0);}  }
class C{  public Histogram(final long[] upperBounds){  validateBounds(upperBounds);  this.upperBounds=Arrays.copyOf(upperBounds,upperBounds.length);  this.counts=new long[upperBounds.length];}  }
class C{  @Nullable public String doc(){  String s=this.optionalDocComment;  this.optionalDocComment=null;  return s;}  }
class C{  private void unsupportedQueryType(QueryType queryType){  String msg=RESULT_SET_ERROR.logFormat(queryType);  LOG.error(msg);  throw new UnsupportedOperationException(msg);}  }
class C{  public final String toXml(final Object obj) throws MessageConversionException {  Serializer serializer=new Persister(new AnnotationStrategy());  StringWriter fw=null;  String result=null;  try {    fw=new StringWriter();    if (obj instanceof ProcessConnectionRequest) {      LOGGER.trace("toXml() : converting from ProcessConnectionRequest to XML.");      serializer.write(((ProcessConnectionRequest)obj),fw);    } else     if (obj instanceof ProcessConnectionResponse) {      LOGGER.trace("toXml() : converting from ProcessConnectionResponse to XML.");      serializer.write(((ProcessConnectionResponse)obj),fw);    } else     if (obj instanceof ProcessConfigurationRequest) {      LOGGER.trace("toXml() : converting from ProcessConfigurationRequest to XML.");      serializer.write(((ProcessConfigurationRequest)obj),fw);    } else     if (obj instanceof ProcessConfigurationResponse) {      LOGGER.trace("toXml() : converting from ProcessConfigurationResponse to XML.");      serializer.write(((ProcessConfigurationResponse)obj),fw);    } else     if (obj instanceof ProcessDisconnectionRequest) {      LOGGER.trace("toXml() : converting from ProcessDisconnectionRequest to XML.");      serializer.write(((ProcessDisconnectionRequest)obj),fw);    } else {      LOGGER.error("Object type not found: " + obj.getClass());      throw new MessageConversionException("toXml() : unsupported type");    }    result=fw.toString();  } catch (  Exception e) {    LOGGER.error("Error converting object " + obj + " to XML: "+ e);  } finally {    if (fw != null) {      try {        fw.close();      } catch (      IOException e) {        LOGGER.error("toXml(): Error closing file. " + e);        e.printStackTrace();      }    }  }  return result;}  }
class C{  public EvolutionResult evolve() throws LoginFailedException, RemoteServerException {  EvolvePokemonMessage reqMsg=EvolvePokemonMessage.newBuilder().setPokemonId(getId()).build();  ServerRequest serverRequest=new ServerRequest(RequestType.EVOLVE_POKEMON,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  EvolvePokemonResponse response;  try {    response=EvolvePokemonResponse.parseFrom(serverRequest.getData());  } catch (  InvalidProtocolBufferException e) {    return null;  }  EvolutionResult result=new EvolutionResult(api,response);  api.getInventories().getPokebank().removePokemon(this);  api.getInventories().updateInventories();  return result;}  }
class C{  public void flush(){  trimToSizeAndCount();  mJournal.rebuildIfNeeded();}  }
class C{  public static Map<String,Object> prodFindAllVariants(DispatchContext dctx,Map<String,? extends Object> context){  Map<String,Object> subContext=UtilMisc.makeMapWritable(context);  subContext.put("type","PRODUCT_VARIANT");  return prodFindAssociatedByType(dctx,subContext);}  }
class C{  public boolean playWave(AudioPlayer player,Utterance utterance){  return playWaveSamples(player,utterance.getSpeakable(),getNumberOfSamples() * 2);}  }
class C{  public Table instantiate(){  return instantiate(0);}  }
class C{  public static float sign(final float x){  if (Float.isNaN(x)) {    return Float.NaN;  }  return (x == 0.0F) ? 0.0F : (x > 0.0F) ? 1.0F : -1.0F;}  }
class C{  public Call delete(String url,Callback callback){  Request request=new Builder().url(url).delete().build();  Call call=client.newCall(request);  call.enqueue(callback);  return call;}  }
class C{  public AdsUpdateClientsQuery updateClients(UserActor actor,int accountId,String data){  return new AdsUpdateClientsQuery(getClient(),actor,accountId,data);}  }
class C{  protected GroupsGetCallbackSettingsQuery groupId(int value){  return unsafeParam("group_id",value);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_SKILL_ITEM_RESTRICTED_AREA(String value1,String value0){  return new SM_SYSTEM_MESSAGE(1400905,value1,value0);}  }
class C{  private static String doSubstringExtract(final SubstringExtractFormatterDetails details,final String text){  String convertedText=text;  try {    final String input=extractValueForConversion(details,convertedText);    if (details.isKeepTags()) {      convertedText=details.getStartTag() + input + details.getEndTag();    } else {      convertedText=input;    }  } catch (  ConversionException e) {  }  return convertedText;}  }
class C{  public static double dbSPL(double energy){  if (energy <= 0)   return Double.NaN; else   return 10 * log10(energy / PASCALSQUARE);}  }
class C{  public static long lcm(long a,long b){  if (a == 0 || b == 0) {    return 0;  }  long lcm=Math.abs(mulAndCheck(a / gcd(a,b),b));  if (lcm == Long.MIN_VALUE) {    throw MathRuntimeException.createArithmeticException("overflow: lcm({0}, {1}) is 2^63",a,b);  }  return lcm;}  }
class C{  private boolean isMinimal(SimulationEvent event){  return minIndex == NULL || eventComparator.compare(event,eventList.get(minIndex)) < 0;}  }
class C{  public Object nextValue() throws JSONException {  char c=nextClean();  String s;switch (c) {case '"':case '\'':    return nextString(c);case '{':  back();return new JSONObject(this);case '[':case '(':back();return new JSONArray(this);}StringBuilder sb=new StringBuilder();while (c >= ' ' && ",:]}/\\\"[{;=#".indexOf(c) < 0) {sb.append(c);c=next();}back();s=sb.toString().trim();if (s.equals("")) {throw syntaxError("Missing value");}return JSONObject.stringToValue(s);}  }
class C{  private static void init(String home,String contextPath){  try {    Model.GIIWA_HOME=System.getenv("GIIWA_HOME");    if (X.isEmpty(Model.GIIWA_HOME)) {      System.out.println("ERROR, did not set GIIWA_HOME, please set GIIWA_HOME=[path of web container]");      System.exit(-1);    }    System.out.println("giiwa is starting ...");    System.out.println("giiwa.home=" + Model.GIIWA_HOME);    System.setProperty("home",Model.GIIWA_HOME);    File f=new File(Model.GIIWA_HOME + "/giiwa/WEB-INF/lib/mongo-java-driver-2.10.0.jar");    if (f.exists()) {      f.delete();      System.out.println("Deleteing mongo-java-driver-2.10.0.jar, it will cause startup failed.");      System.out.println("Restart the giiwa.");      System.exit(0);    }    Config.init("home","giiwa");    Configuration conf=Config.getConfig();    conf.setProperty("home",Model.GIIWA_HOME);    DB.init();    Cache.init(conf);    Helper.init(conf);    Task.init(conf.getInt("thread.number",20),conf);    Controller.init(conf,contextPath);    Repo.init(conf);    Temp.init(conf);  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public static int[] curveGenerator(Point[] knots){  if (knots == null) {    throw new NullPointerException("Knots cannot be null");  }  int n=knots.length - 1;  if (n < 1) {    throw new IllegalArgumentException("Atleast two points are required");  }  if (Build.VERSION.SDK_INT >= 21) {    return getOutputPointsForNewerDevices(knots);  } else {    return getOutputPointsForOlderDevices(knots);  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_CHAT_ROOM_LEAVE_SUCCESS(String value0){  return new SM_SYSTEM_MESSAGE(1300860,value0);}  }
class C{  public String typeName(){  return "utf8";}  }
class C{  public static void assertSameMembers(ThrowableSet s,Set<? extends RefLikeType> included,Set<AnySubType> excluded){  assertTrue(ExceptionTestUtility.sameMembers(included,excluded,s));}  }
class C{  public GroupsSetCallbackSettingsQuery photoNew(Boolean value){  return unsafeParam("photo_new",value);}  }
class C{  public SimpleCommand(String commandName,String... args){  this(commandName,(Argument)null);  ArrayList<Argument> argList=new ArrayList<Argument>();  for (  String arg : args)   argList.add(new Argument(arg));  _arguments=argList.toArray(new Argument[0]);}  }
class C{  public AppTest(String testName){  super(testName);}  }
class C{  public static final String[] splitToWords(String sStr){  return splitToWords(sStr,false);}  }
class C{  public Collection<TypeDecl> computeConstraints(GenericMethodDecl decl){  Constraints c=new Constraints();  for (int i=0; i < decl.original().getNumTypeParameter(); i++)   c.addTypeVariable(decl.original().getTypeParameter(i));  ClassInstanceExpr instanceExpr=getClassInstanceExpr();  for (int i=0; i < instanceExpr.getNumArg(); i++) {    TypeDecl A=instanceExpr.getArg(i).type();    int index=i >= decl.getNumParameter() ? decl.getNumParameter() - 1 : i;    TypeDecl F=decl.getParameter(index).type();    if (decl.getParameter(index) instanceof VariableArityParameterDeclaration && (instanceExpr.getNumArg() != decl.getNumParameter() || !A.isArrayDecl())) {      F=F.componentType();    }    c.convertibleTo(A,F);  }  if (c.rawAccess)   return new ArrayList();  c.resolveEqualityConstraints();  c.resolveSupertypeConstraints();  if (c.unresolvedTypeArguments()) {    TypeDecl S=assignConvertedType();    if (S.isUnboxedPrimitive())     S=S.boxed();    TypeDecl R=decl.type();    if (R.isVoid())     R=typeObject();    c.convertibleFrom(S,R);    c.resolveEqualityConstraints();    c.resolveSupertypeConstraints();    c.resolveSubtypeConstraints();  }  return c.typeArguments();}  }
class C{  public String typeName(){  return "invokedynamic";}  }
class C{  protected void checkAndLoadDictionaryData(DictionaryColumnUniqueIdentifier dictionaryColumnUniqueIdentifier,DictionaryInfo dictionaryInfo,String lruCacheKey,boolean loadSortIndex) throws CarbonUtilException {  try {    CarbonFile carbonFile=getDictionaryMetaCarbonFile(dictionaryColumnUniqueIdentifier);    boolean dictionaryMetaFileModified=isDictionaryMetaFileModified(carbonFile,dictionaryInfo.getFileTimeStamp(),dictionaryInfo.getDictionaryMetaFileLength());    if (dictionaryMetaFileModified) {synchronized (dictionaryInfo) {        carbonFile=getDictionaryMetaCarbonFile(dictionaryColumnUniqueIdentifier);        dictionaryMetaFileModified=isDictionaryMetaFileModified(carbonFile,dictionaryInfo.getFileTimeStamp(),dictionaryInfo.getDictionaryMetaFileLength());        if (dictionaryMetaFileModified) {          CarbonDictionaryColumnMetaChunk carbonDictionaryColumnMetaChunk=readLastChunkFromDictionaryMetadataFile(dictionaryColumnUniqueIdentifier);          long requiredSize=carbonDictionaryColumnMetaChunk.getEnd_offset() - dictionaryInfo.getMemorySize();          if (requiredSize > 0) {            boolean columnAddedToLRUCache=carbonLRUCache.put(lruCacheKey,dictionaryInfo,requiredSize);            if (columnAddedToLRUCache) {              loadDictionaryData(dictionaryInfo,dictionaryColumnUniqueIdentifier,dictionaryInfo.getMemorySize(),carbonDictionaryColumnMetaChunk.getEnd_offset(),loadSortIndex);              dictionaryInfo.setOffsetTillFileIsRead(carbonDictionaryColumnMetaChunk.getEnd_offset());              dictionaryInfo.setFileTimeStamp(carbonFile.getLastModifiedTime());              dictionaryInfo.setDictionaryMetaFileLength(carbonFile.getSize());            } else {              throw new CarbonUtilException("Cannot load dictionary into memory. Not enough memory available");            }          }        }      }    }    incrementDictionaryAccessCount(dictionaryInfo);  } catch (  IOException e) {    throw new CarbonUtilException(e.getMessage());  }}  }
class C{  @Override public List<Object[]> collectData(AbstractScannedResult scannedResult,int batchSize){  List<Object[]> listBasedResult=new ArrayList<>(batchSize);  boolean isMsrsPresent=measureDatatypes.length > 0;  QueryDimension[] queryDimensions=tableBlockExecutionInfos.getQueryDimensions();  QueryMeasure[] queryMeasures=tableBlockExecutionInfos.getQueryMeasures();  Map<Integer,GenericQueryType> comlexDimensionInfoMap=tableBlockExecutionInfos.getComlexDimensionInfoMap();  boolean[] dictionaryEncodingArray=CarbonUtil.getDictionaryEncodingArray(queryDimensions);  boolean[] directDictionaryEncodingArray=CarbonUtil.getDirectDictionaryEncodingArray(queryDimensions);  boolean[] complexDataTypeArray=CarbonUtil.getComplexDataTypeArray(queryDimensions);  int dimSize=queryDimensions.length;  boolean isDimensionsExist=dimSize > 0;  int[] order=new int[dimSize + queryMeasures.length];  for (int i=0; i < dimSize; i++) {    order[i]=queryDimensions[i].getQueryOrder();  }  for (int i=0; i < queryMeasures.length; i++) {    order[i + dimSize]=queryMeasures[i].getQueryOrder();  }  int rowCounter=0;  int dictionaryColumnIndex=0;  int noDictionaryColumnIndex=0;  int complexTypeColumnIndex=0;  int[] surrogateResult;  String[] noDictionaryKeys;  byte[][] complexTypeKeyArray;  while (scannedResult.hasNext() && rowCounter < batchSize) {    Object[] row=new Object[dimSize + queryMeasures.length];    if (isDimensionsExist) {      surrogateResult=scannedResult.getDictionaryKeyIntegerArray();      noDictionaryKeys=scannedResult.getNoDictionaryKeyStringArray();      complexTypeKeyArray=scannedResult.getComplexTypeKeyArray();      dictionaryColumnIndex=0;      noDictionaryColumnIndex=0;      complexTypeColumnIndex=0;      for (int i=0; i < dimSize; i++) {        if (!dictionaryEncodingArray[i]) {          row[order[i]]=DataTypeUtil.getDataBasedOnDataType(noDictionaryKeys[noDictionaryColumnIndex++],queryDimensions[i].getDimension().getDataType());        } else         if (directDictionaryEncodingArray[i]) {          DirectDictionaryGenerator directDictionaryGenerator=DirectDictionaryKeyGeneratorFactory.getDirectDictionaryGenerator(queryDimensions[i].getDimension().getDataType());          if (directDictionaryGenerator != null) {            row[order[i]]=directDictionaryGenerator.getValueFromSurrogate(surrogateResult[dictionaryColumnIndex++]);          }        } else         if (complexDataTypeArray[i]) {          row[order[i]]=comlexDimensionInfoMap.get(queryDimensions[i].getDimension().getOrdinal()).getDataBasedOnDataTypeFromSurrogates(ByteBuffer.wrap(complexTypeKeyArray[complexTypeColumnIndex++]));        } else {          row[order[i]]=surrogateResult[dictionaryColumnIndex++];        }      }    } else {      scannedResult.incrementCounter();    }    if (isMsrsPresent) {      Object[] msrValues=new Object[measureDatatypes.length];      fillMeasureData(msrValues,0,scannedResult);      for (int i=0; i < msrValues.length; i++) {        row[order[i + dimSize]]=msrValues[i];      }    }    listBasedResult.add(row);    rowCounter++;  }  return listBasedResult;}  }
class C{  public void close(){  if (this.apk != null)   this.apk.close();}  }
class C{  public static InvocationConstraint create(InvocationConstraint[] constraints){  return reduce(constraints.clone(),false);}  }
class C{  @Override public RecyclerView.LayoutParams generateDefaultLayoutParams(){  return new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);}  }
class C{  public ZWaveBinaryToggleSwitchCommandClass(ZWaveNode node,ZWaveController controller,ZWaveEndpoint endpoint){  super(node,controller,endpoint);}  }
class C{  public BufferedServletInputStream(InputStream in){  this.in=in;}  }
class C{  public static void writeProtoTextToFile(File outputFile,Message proto) throws IOException {  try (BufferedWriter outWriter=Files.newWriter(outputFile,StandardCharsets.UTF_8)){    TextFormat.print(proto,outWriter);  } }  }
class C{  private static String doNormalize(String filename,char separator,boolean keepSeparator){  if (filename == null) {    return null;  }  int size=filename.length();  if (size == 0) {    return filename;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  char[] array=new char[size + 2];  filename.getChars(0,filename.length(),array,0);  char otherSeparator=separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR;  for (int i=0; i < array.length; i++) {    if (array[i] == otherSeparator) {      array[i]=separator;    }  }  boolean lastIsDirectory=true;  if (array[size - 1] != separator) {    array[size++]=separator;    lastIsDirectory=false;  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == separator) {      System.arraycopy(array,i,array,i - 1,size - i);      size--;      i--;    }  }  for (int i=prefix + 1; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && (i == prefix + 1 || array[i - 2] == separator)) {      if (i == size - 1) {        lastIsDirectory=true;      }      System.arraycopy(array,i + 1,array,i - 1,size - i);      size-=2;      i--;    }  }  outer:   for (int i=prefix + 2; i < size; i++) {    if (array[i] == separator && array[i - 1] == '.' && array[i - 2] == '.' && (i == prefix + 2 || array[i - 3] == separator)) {      if (i == prefix + 2) {        return null;      }      if (i == size - 1) {        lastIsDirectory=true;      }      int j;      for (j=i - 4; j >= prefix; j--) {        if (array[j] == separator) {          System.arraycopy(array,i + 1,array,j + 1,size - i);          size-=i - j;          i=j + 1;          continue outer;        }      }      System.arraycopy(array,i + 1,array,prefix,size - i);      size-=i + 1 - prefix;      i=prefix + 1;    }  }  if (size <= 0) {    return "";  }  if (size <= prefix) {    return new String(array,0,size);  }  if (lastIsDirectory && keepSeparator) {    return new String(array,0,size);  }  return new String(array,0,size - 1);}  }
class C{  private static void readSemanticProtocolId(IonReader reader,IapMessageFields iapMessageFields){  if (reader.fieldType == IonFieldTypes.KEY_SHORT) {    if (isSemanticProtoocolIdKey(reader)) {      reader.nextParse();      if (reader.fieldType == IonFieldTypes.BYTES) {        iapMessageFields.semanticProtocolIdOffset=reader.index;        iapMessageFields.semanticProtocolIdLength=reader.fieldLength;      }      reader.nextParse();    }  }}  }
class C{  public JsonParseException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  @Override public String toString(){  String sRes="";  Iterator iIter=hDistro.entrySet().iterator();  while (iIter.hasNext()) {    java.util.Map.Entry e=(java.util.Map.Entry)iIter.next();    sRes=sRes.concat(String.valueOf(e.getKey()) + "=>" + String.valueOf(e.getValue()));    if (iIter.hasNext())     sRes+="\t";  }  return sRes;}  }
class C{  public static final void fillRectangle(GL2 gl,Rectangle r){  Vector2[] vs=r.getVertices();  gl.glBegin(GL2.GL_QUADS);  for (int i=0; i < vs.length; i++) {    Vector2 v=vs[i];    gl.glVertex2d(v.x,v.y);  }  gl.glEnd();}  }
class C{  public static double max(double[] data){  double max=Double.NaN;  for (int i=0; i < data.length; i++) {    if (Double.isNaN(data[i]))     continue;    if (Double.isNaN(max) || data[i] > max)     max=data[i];  }  return max;}  }
class C{  private void resetTour(){  instance=null;  queue.clear();  this.activity=null;  config=null;}  }
class C{  @Override public void revertToDefaultValue(){}  }
class C{  private void updateMouse(@SwingCoordinate int x,@SwingCoordinate int y){  if (myCurrentInteraction != null) {    myCurrentInteraction.update(x,y,ourLastStateMask);    mySurface.repaint();  }}  }
class C{  public static String toString(Reader input) throws IOException {  StringBuilderWriter sw=new StringBuilderWriter();  copy(input,sw);  return sw.toString();}  }
class C{  public static List<String> makeProductFeatureCategoryIdListFromPrefixed(Map<String,Object> parameters){  List<String> prodFeatureCategoryIdList=FastList.newInstance();  if (parameters == null)   return prodFeatureCategoryIdList;  for (  Map.Entry<String,Object> entry : parameters.entrySet()) {    String parameterName=entry.getKey();    if (parameterName.startsWith("SEARCH_PROD_FEAT_CAT")) {      String productFeatureCategoryId=(String)entry.getValue();      if (UtilValidate.isNotEmpty(productFeatureCategoryId)) {        prodFeatureCategoryIdList.add(productFeatureCategoryId);      }    }  }  return prodFeatureCategoryIdList;}  }
class C{  public static final BodyFixture show(Window owner,Image icon,ConvexShapePanel shapePanel){  AddConvexFixtureDialog dialog=new AddConvexFixtureDialog(owner,icon,shapePanel);  dialog.setLocationRelativeTo(owner);  dialog.setVisible(true);  if (!dialog.canceled) {    BodyFixture fixture=dialog.fixture;    Convex convex=dialog.pnlShape.getShape();    Vector2 tx=dialog.pnlTransform.getTranslation();    double a=dialog.pnlTransform.getRotation();    if (!tx.isZero()) {      convex.translate(tx);    }    if (a != 0.0) {      convex.rotateAboutCenter(a);    }    BodyFixture newFixture=new BodyFixture(convex);    newFixture.setUserData(fixture.getUserData());    newFixture.setDensity(fixture.getDensity());    newFixture.setFilter(fixture.getFilter());    newFixture.setFriction(fixture.getFriction());    newFixture.setRestitution(fixture.getRestitution());    newFixture.setSensor(fixture.isSensor());synchronized (AddConvexFixtureDialog.class) {      N++;    }    return newFixture;  }  return null;}  }
class C{  @JsonIgnore public DateMidnight calculateLastDay(){  DateMidnight earliestDay=new DateMidnight(endTime);  if (state.equals(State.TERMINATED)) {    DateMidnight modifiedDay=new DateMidnight(modificationTime);    if (modifiedDay.isBefore(earliestDay)) {      earliestDay=modifiedDay;    }  }  return earliestDay;}  }
class C{  private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {  return String.format("%s\t0\t%s\t0\t255\t*\t*\t0\t0\t*\t*\tAS:i:%d\t",queryName,refName,Math.round(bitScore)) + String.format("AL:Z:%s\t",Basic.replaceSpaces(line,' '));}  }
class C{  @NotNull public static LaunchCompatibility canRunOnAvd(@NotNull AndroidVersion minSdkVersion,@NotNull IAndroidTarget projectTarget,@NotNull ISystemImage image){  AndroidVersion avdVersion=image.getAndroidVersion();  if (!avdVersion.canRun(minSdkVersion)) {    String reason=String.format("minSdk(%1$s) %3$s deviceSdk(%2$s)",minSdkVersion,avdVersion,minSdkVersion.getCodename() == null ? ">" : "!=");    return new LaunchCompatibility(ThreeState.NO,reason);  }  return projectTarget.isPlatform() ? YES : isCompatibleAddonAvd(projectTarget,image);}  }
class C{  @Override public void checkout(GitReference ref,Path workdir) throws RepoException {  checkoutRepo(repository,repoUrl,workdir,submoduleStrategy,ref);  if (!Strings.isNullOrEmpty(gitOptions.originCheckoutHook)) {    runCheckoutOrigin(workdir);  }}  }
class C{  public static boolean writeText(HttpServletResponse resp,Object msg){  return write(resp,"text/plain",msg);}  }
class C{  private List<Region<T>> boundaryRegions(final BSPTree<S> node){  final List<Region<T>> regions=new ArrayList<Region<T>>(2);  @SuppressWarnings("unchecked") final BoundaryAttribute<S> ba=(BoundaryAttribute<S>)node.getAttribute();  addRegion(ba.getPlusInside(),regions);  addRegion(ba.getPlusOutside(),regions);  return regions;}  }
class C{  public static TaskActivation parseJSON(JsonNode node){  try {    List<JsonNode> hotkeysNode=node.getArrayNode("hotkey");    List<JsonNode> mouseGestureNode=node.getArrayNode("mouse_gesture");    Set<KeyChain> keyChains=new HashSet<>();    for (    JsonNode hotkeyNode : hotkeysNode) {      KeyChain newKeyChain=KeyChain.parseJSON(hotkeyNode.getArrayNode());      if (newKeyChain == null) {        LOGGER.log(Level.WARNING,"Cannot parse key chain " + hotkeyNode);      } else {        keyChains.add(newKeyChain);      }    }    Set<MouseGesture> gestures=MouseGesture.parseJSON(mouseGestureNode);    TaskActivation output=TaskActivation.newBuilder().withHotKeys(keyChains).withMouseGestures(gestures).build();    return output;  } catch (  Exception e) {    LOGGER.log(Level.WARNING,"Exception while parsing task activation.",e);    return null;  }}  }
class C{  public void removeAdjustmentByType(String orderAdjustmentTypeId){  if (orderAdjustmentTypeId == null)   return;  List<List<GenericValue>> adjsLists=FastList.newInstance();  adjsLists.add(this.getAdjustments());  for (  ShoppingCartItem item : this) {    if (item.getAdjustments() != null) {      adjsLists.add(item.getAdjustments());    }  }  for (  List<GenericValue> adjs : adjsLists) {    if (adjs != null) {      for (int i=0; i < adjs.size(); ) {        GenericValue orderAdjustment=adjs.get(i);        if (orderAdjustmentTypeId.equals(orderAdjustment.getString("orderAdjustmentTypeId"))) {          adjs.remove(i);        } else {          i++;        }      }    }  }}  }
class C{  private boolean isArrayContains(Object[] a,Object obj){  for (int i=0; i < a.length; i++) {    if (a[i].equals(obj))     return true;  }  return false;}  }
class C{  protected static void prepareSparseMatrix(SparseMatrix adjMatrix){  for (int i=0; i != adjMatrix.getRowsCount(); i++) {    double sum=0.0;    ArrayList<Pair> row=adjMatrix.getRow(i);    for (int j=0; j != row.size(); j++) {      sum+=row.get(j).getSecond();    }    if (sum != 0.0) {      for (int j=0; j != row.size(); j++) {        double old_value=row.get(j).getSecond();        row.get(j).setSecond(old_value / sum);      }    }  }  adjMatrix.inv();}  }
class C{  private void resetSearchBarContextOpacity(){  mSearchBarContextOpacity=1.f;  mSearchBarTermOpacity=0.f;}  }
class C{  public void registerHandler(String handlerName,BridgeHandler handler){  if (handler != null) {    messageHandlers.put(handlerName,handler);  }}  }
class C{  public static void write(String fileName,Table table) throws IOException {  write(fileName,table,null);}  }
class C{  private static boolean viewNeedsPackage(String fqcn){  return !(fqcn.startsWith(ANDROID_WIDGET_PREFIX) || fqcn.startsWith(ANDROID_VIEW_PKG) || fqcn.startsWith(ANDROID_WEBKIT_PKG));}  }
class C{  public void clear(){  description=null;  table.clear();  sampleOrder.clear();  attributeOrder.clear();  attribute2type.clear();}  }
class C{  @Override public boolean isDataPresent(){  return SelectedSymbol.getInstance().hasFill();}  }
class C{  public int count(ITemplateHolder template,String[] subClasses) throws SAException {  return 0;}  }
class C{  public <T2>Pattern2<T,T2> and(Observable<T2> right){  return JoinPatterns.and(o,right);}  }
class C{  @Override public void close() throws IOException {  try {    super.close();  }  finally {    if (closeBranch) {      branch.close();    }  }}  }
class C{  public synchronized void recordStatistics(QueryStatistic statistic){  queryStatistics.add(statistic);}  }
class C{  public Boolean doOuputTTML(){  return doOuputTTML;}  }
class C{  @Override @Transactional(value="cacheTransactionManager",propagation=Propagation.REQUIRES_NEW) public ProcessChange doUpdateDataTag(final Long id,final Properties properties){  LOGGER.trace("Updating DataTag " + id);  if (properties.containsKey("equipmentId") || properties.containsKey("subEquipmentId")) {    LOGGER.warn("Attempting to change the equipment/subequipment to which a tag is attached - this is not currently supported!");    properties.remove("equipmentId");    properties.remove("subEquipmentId");  }  Change dataTagUpdate=null;  tagCache.acquireWriteLockOnKey(id);  try {    DataTag dataTagCopy=tagCache.getCopy(id);    dataTagUpdate=commonTagFacade.updateConfig(dataTagCopy,properties);    configurableDAO.updateConfig(dataTagCopy);    tagCache.putQuiet(dataTagCopy);    if (((DataTagUpdate)dataTagUpdate).isEmpty()) {      return new ProcessChange();    } else {      if (dataTagCopy.getEquipmentId() != null) {        return new ProcessChange(equipmentFacade.getProcessIdForAbstractEquipment(dataTagCopy.getEquipmentId()),dataTagUpdate);      } else {        return new ProcessChange(subEquipmentFacade.getProcessIdForAbstractEquipment(dataTagCopy.getSubEquipmentId()),dataTagUpdate);      }    }  } catch (  CacheElementNotFoundException ex) {    throw ex;  }catch (  Exception ex) {    LOGGER.error("Exception caught while updating a datatag. Rolling back transaction and removing from cache.",ex);    throw new UnexpectedRollbackException("Unexpected exception caught while updating a DataTag configuration.",ex);  } finally {    tagCache.releaseWriteLockOnKey(id);  }}  }
class C{  public static String nullSafeToString(int[] array){  if (array == null) {    return NULL_STRING;  }  int length=array.length;  if (length == 0) {    return EMPTY_ARRAY;  }  StringBuffer buffer=new StringBuffer();  for (int i=0; i < length; i++) {    if (i == 0) {      buffer.append(ARRAY_START);    } else {      buffer.append(ARRAY_ELEMENT_SEPARATOR);    }    buffer.append(array[i]);  }  buffer.append(ARRAY_END);  return buffer.toString();}  }
class C{  private int parseLastInt(String line){  String lastInt=line.trim().substring(line.lastIndexOf(" "));  return Integer.parseInt(lastInt.trim());}  }
class C{  @Deprecated public FieldRotation(final RotationOrder order,final T alpha1,final T alpha2,final T alpha3){  this(order,RotationConvention.VECTOR_OPERATOR,alpha1,alpha2,alpha3);}  }
class C{  private String resolveLoggerProperty(LogManager manager,String property){  String propertyKey=HANDLER_PROP_PREFIX + property;  return System.getProperty(propertyKey,manager.getProperty(propertyKey));}  }
class C{  private DocumentFragment traverseCommonStartContainer(Node endAncestor,int how){  DocumentFragment frag=null;  if (how != DELETE_CONTENTS)   frag=fDocument.createDocumentFragment();  Node n=traverseRightBoundary(endAncestor,how);  if (frag != null)   frag.appendChild(n);  int endIdx=indexOf(endAncestor,fStartContainer);  int cnt=endIdx - fStartOffset;  if (cnt <= 0) {    if (how != CLONE_CONTENTS) {      setEndBefore(endAncestor);      collapse(false);    }    return frag;  }  n=endAncestor.getPreviousSibling();  while (cnt > 0) {    Node sibling=n.getPreviousSibling();    Node xferNode=traverseFullySelected(n,how);    if (frag != null)     frag.insertBefore(xferNode,frag.getFirstChild());    --cnt;    n=sibling;  }  if (how != CLONE_CONTENTS) {    setEndBefore(endAncestor);    collapse(false);  }  return frag;}  }
class C{  public Vector3f addLocal(float addX,float addY,float addZ){  x+=addX;  y+=addY;  z+=addZ;  return this;}  }
class C{  protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  Object[] set=_map._set;  int i=_index;  while (i-- > 0 && (set[i] == null || set[i] == TObjectHash.REMOVED || set[i] == TObjectHash.FREE))   ;  return i;}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  public DerParser(InputStream in) throws IOException {  this.in=in;}  }
class C{  public DescriptiveStatistics(){  this(INFINITE_WINDOW);}  }
class C{  @Override protected void clearCachedAuthenticationInfo(PrincipalCollection principals){  if (_clearCaches) {    super.clearCachedAuthenticationInfo(principals);  }}  }
class C{  public static Z1 genr(Zmat A,int r,int c1,int c2) throws JampackException {  int j, cu;  double norm, s;  Z scale;  Z t=new Z();  Z t1=new Z();  r=r - A.basex;  c1=c1 - A.basex;  c2=c2 - A.basex;  cu=c2 - c1 + 1;  Z1 u=new Z1(cu);  for (j=c1; j <= c2; j++) {    u.put(j - c1,A.re[r][j],A.im[r][j]);    A.re[r][j]=0.0;    A.im[r][j]=0.0;  }  norm=Norm.fro(u);  if (c1 == c2 || norm == 0) {    A.re[r][c1]=-u.re[0];    A.im[r][c1]=-u.im[0];    u.put(0,Math.sqrt(2),0);    return u;  }  scale=new Z(1 / norm,0);  if (u.re[0] != 0 || u.im[0] != 0) {    t=u.get(0);    scale.Times(scale,t.Div(t1.Conj(t),Z.abs(t)));  }  A.put(r + A.basex,c1 + A.basex,t.Minus(t.Div(Z.ONE,scale)));  for (j=0; j < cu; j++) {    u.Times(j,scale);  }  u.re[0]=u.re[0] + 1;  u.im[0]=0;  s=Math.sqrt(1 / u.re[0]);  for (j=0; j < cu; j++) {    u.re[j]=s * u.re[j];    u.im[j]=-s * u.im[j];  }  return u;}  }
class C{  protected BinaryExpression(int operation,int minOp,int maxOp,Expression left,Expression right){  if (operation < minOp || operation > maxOp) {    throw new IllegalArgumentException("Unknown operation type: " + operation);  }  if (left == null || right == null) {    throw new IllegalArgumentException("Expressions must be non-null.");  }  this.m_op=operation;  this.m_left=left;  this.m_right=right;}  }
class C{  protected void sleepInbetweenRecoveryAttempts(){  if (this.recoveryInterval > 0) {    try {      Thread.sleep(this.recoveryInterval);    } catch (    InterruptedException interEx) {      Thread.currentThread().interrupt();    }  }}  }
class C{  @Override public void loadSearchImages(String searchString){  loadImages(repository.getSearchResults(searchString,RiffsyRepository.DEFAULT_LIMIT_COUNT));}  }
class C{  private MultiThreadedServiceFactory<AuthDataStore> createDataStoreServiceFactory(String cluster,MetricRegistry metricRegistry){  HttpClientConfiguration clientConfig=new HttpClientConfiguration();  clientConfig.setKeepAlive(Duration.seconds(1));  clientConfig.setConnectionTimeout(Duration.seconds(10));  clientConfig.setTimeout(Duration.minutes(5));  return DataStoreClientFactory.forClusterAndHttpConfiguration(cluster,clientConfig,metricRegistry);}  }
class C{  public static boolean isReadCommitted(int mod){  return Modifiers.contains(mod,READ_COMMITTED);}  }
class C{  public void refreshDays(){  mEventList.clear();  mPMonth=(GregorianCalendar)mCalendar.clone();  CalendarGridviewAdapter.firstDay=mCalendar.get(GregorianCalendar.DAY_OF_WEEK);  int mMaxWeekNumber=mCalendar.getActualMaximum(Calendar.WEEK_OF_MONTH);  mMonthLength=mMaxWeekNumber * 7;  int mMaxP=getmMaxP();  int mCalMaxP=mMaxP - (CalendarGridviewAdapter.firstDay - 1);  mPMonthMaxSet=(GregorianCalendar)mPMonth.clone();  mPMonthMaxSet.set(GregorianCalendar.DAY_OF_MONTH,mCalMaxP + 1);  setData(getCalendarData());}  }
class C{  @Override public String toString(){  return String.format("(%d,%.3g)",mX,mY);}  }
class C{  public final String toXML(){  StringBuffer str=new StringBuffer();  str.append('<');  str.append(XML_ROOT_ELEMENT);  str.append(' ');  str.append(XML_ATTRIBUTE_PROCESS_ID);  str.append("=\"");  str.append(processId);  str.append("\">\n");  if (values != null) {    for (    FilteredDataTagValue value : values) {      str.append(value.toXML());    }  }  str.append("</");  str.append(XML_ROOT_ELEMENT);  str.append('>');  return str.toString();}  }
class C{  public static boolean putString(Context context,String key,String value){  SharedPreferences settings=context.getSharedPreferences(PREFERENCE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putString(key,value);  return editor.commit();}  }
class C{  boolean removeSubtree(BinarySearchTreeNode<E> node){  if (node == null)   return false;  if (this.root == null)   return false;  if (this.root == node) {    this.root=null;  } else {    if (this.contains(node)) {      if (node.isLeftChild()) {        node.parent.left=null;      } else {        node.parent.right=null;      }      this.size-=this.size(node);      if (this.selfBalancing)       this.balanceTree(node.parent);      return true;    }  }  return false;}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  public int findAll(String regularExpression){  return findAndUncollapseNext(regularExpression,false,true);}  }
class C{  public double norm1(){  double f=0;  for (int j=0; j < n; j++) {    double s=0;    for (int i=0; i < m; i++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public void init$Children(){}  }
class C{  public void addField(String fldName,Type type){  fields.put(fldName,type);  if (myFieldSet != null)   myFieldSet.add(fldName);}  }
class C{  protected static @NotNull String convertValueToGroovySource(@NotNull Object value){  if (value instanceof List) {    StringBuilder sb=new StringBuilder();    sb.append('[');    for (    Object v : ((List)value)) {      if (sb.length() > 1) {        sb.append(", ");      }      sb.append(convertValueToGroovySource(v));    }    sb.append(']');    return sb.toString();  } else   if (value instanceof Number || value instanceof Boolean) {    return value.toString();  } else {    return "'" + escapeLiteralString(value.toString()) + "'";  }}  }
class C{  public void unlock(){  lockManager.unlock(key);}  }
class C{  public static IOFileFilter makeDirectoryOnly(IOFileFilter filter){  if (filter == null) {    return DirectoryFileFilter.DIRECTORY;  }  return new AndFileFilter(DirectoryFileFilter.DIRECTORY,filter);}  }
class C{  @Deployment(resources={"org/activiti/engine/test/api/runtime/oneTaskProcess.bpmn20.xml"}) public void testTaskEventsInProcess() throws Exception {  ProcessInstance processInstance=runtimeService.startProcessInstanceByKey("oneTaskProcess");  assertNotNull(processInstance);  Task task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  assertNotNull(task);  assertEquals(3,listener.getEventsReceived().size());  ActivitiEntityEvent event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_CREATED,event.getType());  assertTrue(event.getEntity() instanceof Task);  Task taskFromEvent=(Task)event.getEntity();  assertEquals(task.getId(),taskFromEvent.getId());  assertExecutionDetails(event,processInstance);  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_INITIALIZED,event.getType());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(2);  assertEquals(ActivitiEventType.TASK_CREATED,event.getType());  assertTrue(event.getEntity() instanceof Task);  taskFromEvent=(Task)event.getEntity();  assertEquals(task.getId(),taskFromEvent.getId());  assertExecutionDetails(event,processInstance);  listener.clearEventsReceived();  taskService.setDueDate(task.getId(),new Date());  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertExecutionDetails(event,processInstance);  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  listener.clearEventsReceived();  taskService.setPriority(task.getId(),12);  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  assertExecutionDetails(event,processInstance);  listener.clearEventsReceived();  taskService.setOwner(task.getId(),"kermit");  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  assertExecutionDetails(event,processInstance);  listener.clearEventsReceived();  task=taskService.createTaskQuery().processInstanceId(processInstance.getId()).singleResult();  task.setDueDate(new Date());  task.setOwner("john");  taskService.saveTask(task);  assertEquals(1,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.ENTITY_UPDATED,event.getType());  assertExecutionDetails(event,processInstance);  listener.clearEventsReceived();  taskService.complete(task.getId());  assertEquals(2,listener.getEventsReceived().size());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(0);  assertEquals(ActivitiEventType.TASK_COMPLETED,event.getType());  assertExecutionDetails(event,processInstance);  TaskEntity taskEntity=(TaskEntity)event.getEntity();  assertNotNull(taskEntity.getDueDate());  event=(ActivitiEntityEvent)listener.getEventsReceived().get(1);  assertEquals(ActivitiEventType.ENTITY_DELETED,event.getType());  assertExecutionDetails(event,processInstance);}  }
class C{  @Override public int hashCode(){  long value=17;  value+=37 * value + Double.doubleToLongBits(Math.abs(x));  value+=37 * value + Double.doubleToLongBits(Math.abs(y));  return (int)(value ^ (value >>> 32));}  }
class C{  boolean casValue(Object cmp,Object val){  return UNSAFE.compareAndSwapObject(this,valueOffset,cmp,val);}  }
class C{  public void shutdown(){  audioPlayer.close();  voice.deallocate();}  }
class C{  private int pop(){  if (outputStackTop > 0) {    return outputStack[--outputStackTop];  } else {    return STACK | -(--owner.inputStackTop);  }}  }
class C{  public NewsfeedGetQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public static void rgba4444ToColor(Color color,int value){  color.r=((value & 0x0000f000) >>> 12) / 15f;  color.g=((value & 0x00000f00) >>> 8) / 15f;  color.b=((value & 0x000000f0) >>> 4) / 15f;  color.a=((value & 0x0000000f)) / 15f;}  }
class C{  public static byte[] acquireImage(Delegator delegator,String dataResourceId) throws GenericEntityException {  byte[] b=null;  GenericValue dataResource=EntityQuery.use(delegator).from("DataResource").where("dataResourceId",dataResourceId).cache().queryOne();  if (dataResource == null)   return b;  b=acquireImage(delegator,dataResource);  return b;}  }
class C{  public RangePredicate(Expression middle,Expression left,Expression right){  this(IN_IN,middle,left,right,DefaultLiteralComparator.getInstance());}  }
class C{  LinkedList<N> computeOrder(DirectedGraph<N> g){  stmtToColor=new HashMap<N,Integer>();  order=new LinkedList<N>();  graph=g;  PseudoTopologicalReverseOrderer<N> orderer=new PseudoTopologicalReverseOrderer<N>();  reverseOrder=orderer.newList(g);{    Iterator<N> stmtIt=g.iterator();    while (stmtIt.hasNext()) {      N s=stmtIt.next();      stmtToColor.put(s,WHITE);    }  }{    Iterator<N> stmtIt=g.iterator();    while (stmtIt.hasNext()) {      N s=stmtIt.next();      if (stmtToColor.get(s) == WHITE) {        visitNode(s);      }    }  }  return order;}  }
class C{  private String makeSAM(String queryName,String refName,float bitScore,String line) throws IOException {  return String.format("%s\t0\t%s\t0\t255\t*\t*\t0\t0\t*\t*\tAS:i:%d\t",queryName,refName,Math.round(bitScore)) + String.format("AL:Z:%s\t",Basic.replaceSpaces(line,' '));}  }
class C{  public static long create(String name,String memo){  Role r=Role.loadByName(name);  if (r != null) {    return r.getId();  }  long id=UID.next("role.id");  try {    while (Helper.exists(W.create(X.ID,id),Role.class)) {      id=UID.next("role.id");    }    if (Helper.insert(V.create(X.ID,id).set("id",id).set("name",name).set("memo",memo).set("updated",System.currentTimeMillis()),Role.class) > 0) {      return id;    }  } catch (  Exception e1) {    log.error(e1.getMessage(),e1);  }  return -1;}  }
class C{  public boolean canFindAll(){  return true;}  }
class C{  public final boolean removeReadData(final int numberOfLines){  boolean removed=true;  fFileController.setReadBackLines(numberOfLines + fFileController.getReadBackLines());  try {    fFileController.updateNumberOfProcessedLines();  } catch (  DataFallbackException e) {    removed=false;  }  try {    if (LOG.isDebugEnabled()) {      LOG.debug("removeReadData : Checking if the file can be removed the number of read lines is: " + fFileController.getReadBackLines() + " and the file's lines is "+ fFileController.getNumberOfLines());    }    if (fFileController.getReadBackLines() == fFileController.getNumberOfLines()) {      fFileController.closeFallbackInputStream();      fFileController.clearFileContents();      fFileController.setReadBackLines(0);      fFileController.setNumberOfLines(0);      resetNextDiscSpaceCheck();    }  } catch (  DataFallbackException e) {    removed=false;    LOG.error("Exception caught while attempting to remove lines from the Fallback file",e);  }  return removed;}  }
class C{  public static void close(Closeable stream){  if (null != stream) {    try {      stream.close();    } catch (    IOException e) {      LOG.error("Exception while closing the Log stream");    }  }}  }
class C{  public TextHttpResponseHandler(){  this(DEFAULT_CHARSET);}  }
class C{  private void powerFFT(double[] re){  double[] im=new double[re.length];  fft(re,im,FFT_FORWARD);  for (int i=0; i < re.length; i++)   re[i]=re[i] * re[i] + im[i] * im[i];}  }
class C{  public long value(int i){  return Array.getLong(values,i);}  }
class C{  public void addService(PluginEntry entry){  this.entryMap.put(entry.service,entry);  if (entry.plugin != null) {    entry.plugin.privateInitialize(entry.service,ctx,app,app.getPreferences());    pluginMap.put(entry.service,entry.plugin);  }}  }
class C{  public static double distance(Vector1D p1,Vector1D p2){  return p1.distance(p2);}  }
class C{  public PagesClearCacheQuery clearCache(String url){  return new PagesClearCacheQuery(getClient(),url);}  }
class C{  public static double fact(double n_){  n_+=1e-6;  double result=1.0;  for (double i=1; i <= n_; i+=1.0)   result*=i;  return result;}  }
class C{  public String patch_toText(List<Patch> patches){  StringBuilder text=new StringBuilder();  for (  Patch aPatch : patches) {    text.append(aPatch);  }  return text.toString();}  }
class C{  public void put(int i,Z z){  re[i]=z.re;  im[i]=z.im;}  }
class C{  public String globalInfo(){  return "InfoGainAttributeEval :\n\nEvaluates the worth of an attribute " + "by measuring the information gain with respect to the class.\n\n" + "InfoGain(Class,Attribute) = H(Class) - H(Class | Attribute).\n";}  }
class C{  public static void showBrand(Player player,int targetObjId,int brandId){  PlayerGroup group=player.getPlayerGroup2();  if (group != null) {    group.onEvent(new ShowBrandEvent<PlayerGroup>(group,targetObjId,brandId));  }}  }
class C{  public void die(){  getOwner().getLifeStats().reduceHp(getOwner().getLifeStats().getCurrentHp() + 1,getOwner());}  }
class C{  public int size(){  return 5;}  }
class C{  private ConstrainableProxyUtil(){  throw new AssertionError();}  }
class C{  @Subscribe(threadMode=ThreadMode.MAIN) public void onEventMainThread(SetColorChangedListenerEvent event){  if (event.getId() == mId) {    int screenOrientation=Util.getScreenOrientation(mContext);    if (mOrientation != screenOrientation) {      mOrientation=screenOrientation;      createTabs();    }    mListener=event.getOnColorChangedListener();  }}  }
class C{  public AccountSetNameInMenuQuery name(String value){  return unsafeParam("name",value);}  }
class C{  public static void remove(String tag){  String node=Model.node();  Helper.delete(W.create("tag",tag).and("node",node),Menu.class);}  }
class C{  @Override public void mkDir(@NotNull File at){  try {    myIO.mkDir(getTargetFile(at));  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public StreamOutputConsole(PrintStream osOut,boolean bOutputProgressPercentage){  Output=osOut;  OutputProgressPercentage=bOutputProgressPercentage;}  }
class C{  public void deactivatePage(String assetPath) throws IOException {  triggerAction(Maps.newHashMap(new ImmutableMap.Builder<String,String>().put(PATH_PROPERTY,assetPath).put(CMD_PROPERTY,DEACTIVATE).put(CHARSET_PROPERTY,UTF_8).build()),REPLICATE_URL,REPLICATION_STARTED_MESSAGE + assetPath);}  }
class C{  @Deprecated public int createDeferredElement(String elementName){  return createDeferredElement(null,elementName);}  }
class C{  long parseDir(String line,String path) throws IOException {  int bytesStart=0;  int bytesEnd=0;  int j=line.length() - 1;  innerLoop1:   while (j >= 0) {    char c=line.charAt(j);    if (Character.isDigit(c)) {      bytesEnd=j + 1;      break innerLoop1;    }    j--;  }  innerLoop2:   while (j >= 0) {    char c=line.charAt(j);    if (!Character.isDigit(c) && c != ',' && c != '.') {      bytesStart=j + 1;      break innerLoop2;    }    j--;  }  if (j < 0) {    throw new IOException("Command line 'dir /-c' did not return valid info " + "for path '" + path + "'");  }  StringBuilder buf=new StringBuilder(line.substring(bytesStart,bytesEnd));  for (int k=0; k < buf.length(); k++) {    if (buf.charAt(k) == ',' || buf.charAt(k) == '.') {      buf.deleteCharAt(k--);    }  }  return parseBytes(buf.toString(),path);}  }
class C{  @deprecated public static boolean onCharacterBoundary(CharSequence s,int i){  return (i <= 0) || (i >= s.length()) || (!Character.isHighSurrogate(s.charAt(i - 1)))|| (!Character.isLowSurrogate(s.charAt(i)));}  }
class C{  private Object readResolve(){  if (type == ERROR.type) {    return ERROR;  } else   if (type == WARNING.type) {    return WARNING;  } else   if (type == NOTICE.type) {    return NOTICE;  } else   if (type == NORMAL.type) {    return NORMAL;  } else {    throw new IllegalArgumentException("illegal type");  }}  }
class C{  public static Histogram predHistogram(Histogram hist,Predicate pred){  if (Double.compare(hist.recordsOutput(),1.0) < 0)   return new Histogram(hist.fields());  Map<String,ConstantRange> cRanges=new HashMap<String,ConstantRange>();  for (  String fld : hist.fields()) {    ConstantRange cr=pred.constantRange(fld);    if (cr != null)     cRanges.put(fld,cr);  }  Histogram crHist=constantRangeHistogram(hist,cRanges);  Histogram jfHist=crHist;  Deque<String> flds=new LinkedList<String>(jfHist.fields());  while (!flds.isEmpty()) {    String fld=flds.removeFirst();    Set<String> group=pred.joinFields(fld);    if (group != null) {      flds.removeAll(group);      group.add(fld);      jfHist=joinFieldsHistogram(jfHist,group);    }  }  return jfHist;}  }
class C{  private boolean isScanRecordingValid(final String pathOfConfigFile) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper jacksonObjectMapper=new ObjectMapper();  Har har=jacksonObjectMapper.readValue(new File(pathOfConfigFile.replace(AppScanConstants.HTD_FILE_EXTENSION,AppScanConstants.HAR_FILE_EXTENSION)),Har.class);  if (AppScanUtils.isNotNull(har) && AppScanUtils.isNotNull(har.getLog()) && AppScanUtils.isNotNull(har.getLog().getEntries())&& har.getLog().getEntries().size() > 0) {    int urlEntryCounter=0;    while (urlEntryCounter < har.getLog().getEntries().size()) {      String startingUrl=har.getLog().getEntries().get(urlEntryCounter).getRequest().getUrl();      Inet4Address urlAddress=null;      try {        urlAddress=(Inet4Address)InetAddress.getByName(new URL(startingUrl).getHost());      } catch (      UnknownHostException unhe) {        return false;      }      if (urlAddress != null && (urlAddress.isSiteLocalAddress() || isWhiteListedPublicIP(urlAddress.getHostAddress()))) {        break;      }      urlEntryCounter=urlEntryCounter + 1;    }    if (urlEntryCounter == har.getLog().getEntries().size()) {      return false;    } else {      return true;    }  }  return false;}  }
class C{  int toplineFrequency(int time){  if (time < startTime || time > endTime) {    throw new RuntimeException("Invalid time " + time + " (startTime "+ startTime+ ", endTime "+ endTime+ ")");  }  return topStart + (int)(topSlope * (time - startTime));}  }
class C{  @Override public void startExternalSubset(XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {}  }
class C{  public boolean generate(Set<ClassData> fileData){  for (  ClassData classData : fileData) {    if (!generateFile(classData,fileData)) {      return false;    }  }  return true;}  }
class C{  public BoardGetTopicsQueryWithExtended offset(Integer value){  return unsafeParam("offset",value);}  }
class C{  public VideoAddAlbumQuery title(String value){  return unsafeParam("title",value);}  }
class C{  private BSPTree<Euclidean1D> leafBefore(BSPTree<Euclidean1D> node){  node=childBefore(node);  while (node.getCut() != null) {    node=childAfter(node);  }  return node;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_UNION_CHANGE_FORCE_NUMBER_HIM(String value0,int num0){  return new SM_SYSTEM_MESSAGE(1400590,value0,num0);}  }
class C{  public static final String toString(Hashtable table){  if (table == null)   return "null";  StringBuffer output=new StringBuffer();  toString(output,table);  return output.toString();}  }
class C{  private String trimReturnLine(String string){  return CharMatcher.anyOf("\n").trimFrom(string);}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);  try {    if (pokemonGo != null && pokemonGo.getPlayerProfile() != null) {      renderProfile(pokemonGo.getPlayerProfile());    }  } catch (  Exception e) {  }  getSupportActionBar().setTitle(R.string.profile);}  }
class C{  private static void skipSection(ParseContext parseContext){  while (!parseContext.atEnd() && parseContext.current().indent != 0) {    parseContext.consume();  }}  }
class C{  @NotNull public ObjectProperty<Color> foregroundColor(){  return myForegroundColor;}  }
class C{  public UshrExpr newUshrExpr(Value op1,Value op2){  return new JUshrExpr(op1,op2);}  }
class C{  public Notation createNotation(String name) throws DOMException {  if (errorChecking && !isXMLName(name,xml11Version)) {    String msg=DOMMessageFormatter.formatMessage(DOMMessageFormatter.DOM_DOMAIN,"INVALID_CHARACTER_ERR",null);    throw new DOMException(DOMException.INVALID_CHARACTER_ERR,msg);  }  return new NotationImpl(this,name);}  }
class C{  public Collection<Var> migrate(){  Collection<Var> collection=new HashSet<>();  for (  Collection<Var> vars : this) {    collection.addAll(vars);  }  return collection;}  }
class C{  public TAC2008TopicFileSet(String sTopicXMLFile,String sCorpusRootDir) throws ParserConfigurationException, SAXException, IOException {  TopicFile=sTopicXMLFile;  CorpusDir=sCorpusRootDir;  DocumentBuilderFactory docBuilderFactory=DocumentBuilderFactory.newInstance();  DocumentBuilder docBuilder=docBuilderFactory.newDocumentBuilder();  TopicXMLDoc=docBuilder.parse(new File(sTopicXMLFile));  Categories=null;  TrainingFiles=null;  TestFiles=null;}  }
class C{  public void shutdown(){  try {    shutdown(-1,TimeUnit.MILLISECONDS);  } catch (  final TimeoutException e) {    exceptionHandler.handleOnShutdownException(e);  }}  }
class C{  public static boolean isContactPointEnabled(){  return contactPointEnabled;}  }
class C{  @SuppressWarnings("unchecked") public JSONArray(Collection collection){  this.myArrayList=new ArrayList();  if (collection != null) {    Iterator iter=collection.iterator();    while (iter.hasNext()) {      Object o=iter.next();      this.myArrayList.add(JSONObject.wrap(o));    }  }}  }
class C{  public int adjustOrPutValue(final K key,final int adjust_amount,final int put_amount){  int index=insertionIndex(key);  final boolean isNewMapping;  final int newValue;  if (index < 0) {    index=-index - 1;    newValue=(_values[index]+=adjust_amount);    isNewMapping=false;  } else {    newValue=(_values[index]=put_amount);    isNewMapping=true;  }  K oldKey=(K)_set[index];  _set[index]=key;  if (isNewMapping) {    postInsertHook(oldKey == FREE);  }  return newValue;}  }
class C{  public void notifyLockInput(){  if (!locked) {synchronized (directorListeners) {      IDirectorListener[] listeners=directorListeners.toArray(new IDirectorListener[directorListeners.size()]);      for (      IDirectorListener directorListener : listeners) {        if (directorListener != this)         directorListener.lockUserInput();      }    }  }  locked=true;}  }
class C{  boolean merge(final ClassWriter cw,final Frame frame,final int edge){  boolean changed=false;  int i, s, dim, kind, t;  int nLocal=inputLocals.length;  int nStack=inputStack.length;  if (frame.inputLocals == null) {    frame.inputLocals=new int[nLocal];    changed=true;  }  for (i=0; i < nLocal; ++i) {    if (outputLocals != null && i < outputLocals.length) {      s=outputLocals[i];      if (s == 0) {        t=inputLocals[i];      } else {        dim=s & DIM;        kind=s & KIND;        if (kind == LOCAL) {          t=dim + inputLocals[s & VALUE];        } else         if (kind == STACK) {          t=dim + inputStack[nStack - (s & VALUE)];        } else {          t=s;        }      }    } else {      t=inputLocals[i];    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputLocals,i);  }  if (edge > 0) {    for (i=0; i < nLocal; ++i) {      t=inputLocals[i];      changed|=merge(cw,t,frame.inputLocals,i);    }    if (frame.inputStack == null) {      frame.inputStack=new int[1];      changed=true;    }    changed|=merge(cw,edge,frame.inputStack,0);    return changed;  }  int nInputStack=inputStack.length + owner.inputStackTop;  if (frame.inputStack == null) {    frame.inputStack=new int[nInputStack + outputStackTop];    changed=true;  }  for (i=0; i < nInputStack; ++i) {    t=inputStack[i];    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,i);  }  for (i=0; i < outputStackTop; ++i) {    s=outputStack[i];    dim=s & DIM;    kind=s & KIND;    if (kind == LOCAL) {      t=dim + inputLocals[s & VALUE];    } else     if (kind == STACK) {      t=dim + inputStack[nStack - (s & VALUE)];    } else {      t=s;    }    if (initializations != null) {      t=init(cw,t);    }    changed|=merge(cw,t,frame.inputStack,nInputStack + i);  }  return changed;}  }
class C{  public int hashCode(){  int hashcode=this.operations[0].hashCode();  for (int i=1; i < operations.length; i++) {    hashcode^=operations[i].hashCode();  }  return hashcode;}  }
class C{  public static Flag evaluateByNumber(final int flag){  Check.notNegative(flag,"flag");  Flag result=null;  for (  final Flag value : values()) {    if (value.getNumber() == flag) {      result=value;      break;    }  }  return result;}  }
class C{  protected AccountChangePasswordQuery newPassword(String value){  return unsafeParam("new_password",value);}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  public ObjectFactory(){}  }
class C{  final public void gotoLogin(){  if (this.uri != null && this.uri.indexOf("/user/") < 0) {    if (query == null) {      createQuery();    }    if (!isAjax()) {      Session.load(sid()).set("uri",this.query == null ? this.uri : this.query.path(this.uri).toString()).store();    }  }  if (isAjax()) {    JSON jo=JSON.create();    jo.put(X.STATE,HttpServletResponse.SC_UNAUTHORIZED);    this.setHeader("status",Integer.toString(HttpServletResponse.SC_UNAUTHORIZED));    jo.put(X.MESSAGE,lang.get("login.required"));    jo.put(X.ERROR,lang.get("not.login"));    this.response(jo);  } else {    this.redirect("/user/login");  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_COMBINE_START(String value0){  return new SM_SYSTEM_MESSAGE(1330048,value0);}  }
class C{  protected Criteria createCriteriaInternal(){  Criteria criteria=new Criteria();  return criteria;}  }
class C{  public YamlConfigurationOptions indent(int value){  Validate.isTrue(value >= 2,"Indent must be at least 2 characters");  Validate.isTrue(value <= 9,"Indent cannot be greater than 9 characters");  this.indent=value;  return this;}  }
class C{  protected void writeGraphicCtrlExt() throws IOException {  out.write(0x21);  out.write(0xf9);  out.write(4);  int transp, disp;  if (transparent == null) {    transp=0;    disp=0;  } else {    transp=1;    disp=2;  }  if (dispose >= 0) {    disp=dispose & 7;  }  disp<<=2;  out.write(0 | disp | 0| transp);  writeShort(delay);  out.write(transIndex);  out.write(0);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_FORCE_LEAVE_HIM(String value0){  return new SM_SYSTEM_MESSAGE(1300978,value0);}  }
class C{  public static WordRelation createWordRelation(Utterance utterance,TokenToWords tokenToWords){  Relation relation=utterance.createRelation(Relation.WORD);  return new WordRelation(relation,tokenToWords);}  }
class C{  public static AccountOperationResponseCode delete(String email){  PersistenceManager pm=pmf.getPersistenceManager();  try {    UserRecord user=findUserByEmail(pm,email);    if (user != null) {      pm.deletePersistent(user);      return AccountOperationResponseCode.OK;    } else {      return AccountOperationResponseCode.USER_NOT_FOUND;    }  }  finally {    pm.close();  }}  }
class C{  public void addProperty(String propertyName,String propertyValue){  properties.put(propertyName,propertyValue);}  }
class C{  private static boolean isDoubleEqual(double value,double valueToCompare){  return (Math.abs(value - valueToCompare) < 0.001);}  }
class C{  public Object clone(){  ForceItem item=new ForceItem();  item.mass=this.mass;  System.arraycopy(force,0,item.force,0,2);  System.arraycopy(velocity,0,item.velocity,0,2);  System.arraycopy(location,0,item.location,0,2);  System.arraycopy(plocation,0,item.plocation,0,2);  for (int i=0; i < k.length; ++i) {    System.arraycopy(k[i],0,item.k[i],0,2);    System.arraycopy(l[i],0,item.l[i],0,2);  }  return item;}  }
class C{  public static Array<String> splitAndTrim(String str,String regex){  Array<String> lines=new Array<>(str.split(regex));  for (int i=0; i < lines.size; i++) {    lines.set(i,lines.get(i).trim());  }  for (Iterator<String> iter=lines.iterator(); iter.hasNext(); ) {    if (iter.next().isEmpty()) {      iter.remove();    }  }  return lines;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_QUEST_GET_REWARD_TITLE(int value0){  return new SM_SYSTEM_MESSAGE(1300035,new DescriptionId(value0));}  }
class C{  public static Map<String,Object> updatePurchaseShipmentFromReceipt(DispatchContext dctx,Map<String,? extends Object> context){  Delegator delegator=dctx.getDelegator();  LocalDispatcher dispatcher=dctx.getDispatcher();  String shipmentId=(String)context.get("shipmentId");  GenericValue userLogin=(GenericValue)context.get("userLogin");  try {    List<GenericValue> shipmentReceipts=EntityQuery.use(delegator).from("ShipmentReceipt").where("shipmentId",shipmentId).queryList();    if (shipmentReceipts.size() == 0)     return ServiceUtil.returnSuccess();    GenericValue shipment=EntityQuery.use(delegator).from("Shipment").where("shipmentId",shipmentId).queryOne();    if ((!UtilValidate.isEmpty(shipment)) && "PURCH_SHIP_CREATED".equals(shipment.getString("statusId"))) {      Map<String,Object> updateShipmentMap=dispatcher.runSync("updateShipment",UtilMisc.<String,Object>toMap("shipmentId",shipmentId,"statusId","PURCH_SHIP_SHIPPED","userLogin",userLogin));      if (ServiceUtil.isError(updateShipmentMap)) {        return updateShipmentMap;      }    }    List<GenericValue> shipmentAndItems=EntityQuery.use(delegator).from("ShipmentAndItem").where("shipmentId",shipmentId,"statusId","PURCH_SHIP_SHIPPED").queryList();    if (shipmentAndItems.size() == 0) {      return ServiceUtil.returnSuccess();    }    Map<String,BigDecimal> shippedCountMap=FastMap.newInstance();    for (    GenericValue item : shipmentAndItems) {      BigDecimal shippedQuantity=item.getBigDecimal("quantity");      BigDecimal quantity=shippedCountMap.get(item.getString("productId"));      quantity=quantity == null ? shippedQuantity : shippedQuantity.add(quantity);      shippedCountMap.put(item.getString("productId"),quantity);    }    Map<String,BigDecimal> receivedCountMap=FastMap.newInstance();    for (    GenericValue item : shipmentReceipts) {      BigDecimal receivedQuantity=item.getBigDecimal("quantityAccepted");      BigDecimal quantity=receivedCountMap.get(item.getString("productId"));      quantity=quantity == null ? receivedQuantity : receivedQuantity.add(quantity);      receivedCountMap.put(item.getString("productId"),quantity);    }    if (!shippedCountMap.equals(receivedCountMap)) {      return ServiceUtil.returnSuccess();    }    dispatcher.runSync("updateShipment",UtilMisc.<String,Object>toMap("shipmentId",shipmentId,"statusId","PURCH_SHIP_RECEIVED","userLogin",userLogin));  } catch (  GenericEntityException e) {    Debug.logError(e,module);    return ServiceUtil.returnError(e.getMessage());  }catch (  GenericServiceException se) {    Debug.logError(se,module);    return ServiceUtil.returnError(se.getMessage());  }  return ServiceUtil.returnSuccess();}  }
class C{  public static void main(String[] args){  Host h=Host.local();  System.out.println(h);}  }
class C{  public SM_QUEST_ACTION(int questId,boolean fake){  this.action=6;  this.questId=questId;  this.timer=0;  this.step=0;}  }
class C{  public static String relativePath(File file,File dir){  checkArgument(file.isFile() || file.isDirectory(),"%s is not a file nor a directory.",file.getPath());  checkArgument(dir.isDirectory(),"%s is not a directory.",dir.getPath());  return relativePossiblyNonExistingPath(file,dir);}  }
class C{  public Math_Vector mul(double scalar){  this.x*=scalar;  this.y*=scalar;  return this;}  }
class C{  public final synchronized HardwareAddress fromConfigXML(Element pElement){  Class hwAddressClass=null;  HardwareAddressImpl hwAddress=null;  try {    hwAddressClass=Class.forName(pElement.getAttribute("class"));    hwAddress=(HardwareAddressImpl)hwAddressClass.newInstance();  } catch (  ClassNotFoundException cnfe) {    cnfe.printStackTrace();    throw new RuntimeException("Exception caught when instantiating a hardware address from XML",cnfe);  }catch (  IllegalAccessException iae) {    iae.printStackTrace();    throw new RuntimeException("Exception caught when instantiating a hardware address from XML",iae);  }catch (  InstantiationException ie) {    ie.printStackTrace();    throw new RuntimeException("Exception caught when instantiating a hardware address from XML",ie);  }  NodeList fields=pElement.getChildNodes();  Node fieldNode=null;  int fieldsCount=fields.getLength();  String fieldName;  String fieldValueString;  String fieldTypeName="";  for (int i=0; i < fieldsCount; i++) {    fieldNode=fields.item(i);    if (fieldNode.getNodeType() == Node.ELEMENT_NODE) {      fieldName=fieldNode.getNodeName();      if (fieldNode.getFirstChild() != null)       fieldValueString=fieldNode.getFirstChild().getNodeValue(); else       fieldValueString="";      try {        Field field=hwAddressClass.getDeclaredField(decodeFieldName(fieldName));        fieldTypeName=field.getType().getName();        if (fieldTypeName.equals("short")) {          field.setShort(hwAddress,Short.parseShort(fieldValueString));        } else         if (fieldTypeName.equals("java.lang.Short")) {          field.set(hwAddress,new Integer(Integer.parseInt(fieldValueString)));        } else         if (fieldTypeName.equals("int")) {          field.setInt(hwAddress,Integer.parseInt(fieldValueString));        } else         if (fieldTypeName.equals("java.lang.Integer")) {          field.set(hwAddress,new Integer(Integer.parseInt(fieldValueString)));        } else         if (fieldTypeName.equals("float")) {          field.setFloat(hwAddress,Float.parseFloat(fieldValueString));        } else         if (fieldTypeName.equals("java.lang.Float")) {          field.set(hwAddress,new Float(Float.parseFloat(fieldValueString)));        } else         if (fieldTypeName.equals("double")) {          field.setDouble(hwAddress,Double.parseDouble(fieldValueString));        } else         if (fieldTypeName.equals("java.lang.Double")) {          field.set(hwAddress,new Double(Double.parseDouble(fieldValueString)));        } else         if (fieldTypeName.equals("long")) {          field.setLong(hwAddress,Long.parseLong(fieldValueString));        } else         if (fieldTypeName.equals("java.lang.Long")) {          field.set(hwAddress,new Long(Long.parseLong(fieldValueString)));        } else         if (fieldTypeName.equals("byte")) {          field.setByte(hwAddress,Byte.parseByte(fieldValueString));        } else         if (fieldTypeName.equals("java.lang.Byte")) {          field.set(hwAddress,new Byte(Byte.parseByte(fieldValueString)));        } else         if (fieldTypeName.equals("char")) {          field.setChar(hwAddress,fieldValueString.charAt(0));        } else         if (fieldTypeName.equals("java.lang.Character")) {          field.set(hwAddress,new Character(fieldValueString.charAt(0)));        } else         if (fieldTypeName.equals("boolean")) {          field.setBoolean(hwAddress,Boolean.getBoolean(fieldValueString));        } else         if (fieldTypeName.equals("java.lang.Boolean")) {          field.set(hwAddress,new Boolean(Boolean.getBoolean(fieldValueString)));        } else         if (fieldTypeName.equals("java.util.HashMap")) {          field.set(hwAddress,SimpleXMLParser.domNodeToMap(fieldNode));        } else         if (field.getType().isEnum()) {          Object[] enumConstants=field.getType().getEnumConstants();          for (          Object enumConstant : enumConstants) {            if (enumConstant.toString().equals(fieldValueString)) {              field.set(hwAddress,enumConstant);            }          }        } else {          field.set(hwAddress,fieldValueString);        }      } catch (      NoSuchFieldException nsfe) {        LOG.error("fromConfigXML(...) - Error occured while parsing XML <HardwareAddress> tag. " + "The following variable does not exist in " + hwAddressClass.toString() + ": \""+ decodeFieldName(fieldName)+ "\"");      }catch (      IllegalAccessException iae) {        iae.printStackTrace();      }catch (      NumberFormatException npe) {        LOG.error("fromConfigXML(...) - Error occured while parsing XML <HardwareAddress> tag. Field \"" + fieldName + "\" shall not be empty since we expect a \""+ fieldTypeName+ "\" value. Please correct the XML configuration for "+ hwAddressClass.toString());      }catch (      Exception e) {        LOG.error("fromConfigXML(...) - Error occured while parsing XML <HardwareAddress> tag. Field \"" + fieldName + "\" could not be parsed, should be \""+ fieldTypeName+ "\" value. Please correct the XML configuration for "+ hwAddressClass.toString());      }    }  }  return hwAddress;}  }
class C{  private void doWrite(String fileName,int sampleRate) throws IOException {  DataOutputStream dos=new DataOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)));  dos.writeBytes("RIFF");  dos.writeInt(byteswap(36 + buf.length));  dos.writeBytes("WAVEfmt ");  dos.writeInt(byteswap(16));  dos.writeShort(byteswap((short)1));  dos.writeShort(byteswap((short)1));  System.out.println("Sample rate: " + sampleRate + ", nBytes:"+ nBytesPerSample);  dos.writeInt(byteswap(sampleRate));  dos.writeInt(byteswap(sampleRate * nBytesPerSample));  dos.writeShort(byteswap((short)(nBytesPerSample)));  dos.writeShort(byteswap((short)(nBytesPerSample * 8)));  dos.writeBytes("data");  dos.writeInt(byteswap(buf.length));  dos.writeByte(0);  dos.write(buf);  dos.close();}  }
class C{  protected User createUserAndInjectSecurityContext(Set<OrganisationUnit> organisationUnits,boolean allAuth,String... auths){  return createUserAndInjectSecurityContext(organisationUnits,null,allAuth,auths);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_TIME_30(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400222,durationtime0);}  }
class C{  protected void onAccountCreationSuccessful(AccountManagerFuture<Bundle> future){}  }
class C{  public FractionFormat(final NumberFormat format){  super(format);}  }
class C{  protected final int nextIndex(){  if (_expectedSize != _hash.size()) {    throw new ConcurrentModificationException();  }  Object[] set=_map._set;  int i=_index;  while (i-- > 0 && (set[i] == null || set[i] == TObjectHash.REMOVED || set[i] == TObjectHash.FREE))   ;  return i;}  }
class C{  @Override public void onEffectChanged(Effect effect){  requestRender(GLRenderer.RenderRequest.EFFECT);}  }
class C{  protected Object lookupService() throws Exception {  Object service=null;  ServiceTemplate templ;  if (template == null) {    Class<?>[] types=(serviceClass == null ? null : new Class[]{serviceClass});    Entry[] entry=(serviceName == null ? null : new Entry[]{new Name(serviceName)});    templ=new ServiceTemplate(null,types,entry);  } else {    templ=template;  }  LookupLocator[] lookupLocators=null;  if (locators != null) {    lookupLocators=new LookupLocator[locators.length];    for (int i=0; i < locators.length; i++) {      String locator=locators[i];      if (!locator.startsWith("jini://")) {        locator="jini://" + locator;      }      lookupLocators[i]=new LookupLocator(locator);    }  }  ServiceDiscoveryManager serviceDiscovery=null;  try {    serviceDiscovery=SharedDiscoveryManagement.getBackwardsServiceDiscoveryManager(groups,lookupLocators,null);    ServiceItem returnObject=serviceDiscovery.lookup(templ,null,timeout);    if (returnObject != null) {      service=returnObject.service;    }  }  finally {    if (serviceDiscovery != null) {      try {        serviceDiscovery.terminate();      } catch (      Exception e) {        logger.warn("Failed to terminate service discovery, ignoring",e);      }    }  }  return service;}  }
class C{  private void findMatchesInContexts(List<NumberContext> contexts,boolean isValid,boolean isPossible,String region,String number){  if (isValid) {    doTestInContext(number,region,contexts,Leniency.VALID);  } else {    for (    NumberContext context : contexts) {      String text=context.leadingText + number + context.trailingText;      assertTrue("Should not have found a number in " + text,hasNoMatches(phoneUtil.findNumbers(text,region)));    }  }  if (isPossible) {    doTestInContext(number,region,contexts,Leniency.POSSIBLE);  } else {    for (    NumberContext context : contexts) {      String text=context.leadingText + number + context.trailingText;      assertTrue("Should not have found a number in " + text,hasNoMatches(phoneUtil.findNumbers(text,region,Leniency.POSSIBLE,Long.MAX_VALUE)));    }  }}  }
class C{  public double dot(Vector other){  return x * other.x + y * other.y;}  }
class C{  public void loadProductCategories(List<Product> products){  EntityManager em=emf.createEntityManager();  TypedQuery<ProductCategory> queryPC;  List<ProductCategory> resPC;  try {    em.getTransaction().begin();    queryPC=em.createQuery("SELECT pc FROM ProductCategory pc",ProductCategory.class);    resPC=queryPC.getResultList();    if (resPC.size() > 5) {      logger.info(resPC.size() + " Product Categories already available in the db");    } else {      new XMLParser().readProductCategory(em,"com/sap/espm/model/data/Product_Categories.xml",products);      em.getTransaction().commit();      queryPC=em.createQuery("SELECT pc FROM ProductCategory pc",ProductCategory.class);      resPC=queryPC.getResultList();      logger.info(resPC.size() + " Product Categories loaded into the db");    }  } catch (  Exception e) {    logger.error("Exception occured",e);  } finally {    em.close();  }}  }
class C{  @Override public boolean accept(File file){  return file.canRead();}  }
class C{  private Point2D computeCenter(ArrayList<Point2D> points){  final Point center=new Point(0,0);  if (points.size() > 0) {    for (    Point2D aPt : points) {      center.x+=(int)aPt.getX();      center.y+=(int)aPt.getY();    }    center.x/=points.size();    center.y/=points.size();  }  return center;}  }
class C{  public void transform(float a,float b,float c,float d,float e,float f){  mStrokeWidth*=Math.hypot(a + b,c + d);  Node.transform(a,b,c,d,e,f,mNode);}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);  try {    if (pokemonGo != null && pokemonGo.getPlayerProfile() != null) {      renderProfile(pokemonGo.getPlayerProfile());    }  } catch (  Exception e) {  }  getSupportActionBar().setTitle(R.string.profile);}  }
class C{  @Override public boolean isDynamicTimeDeadband(final SourceDataTag tag){  DataTagAddress address=tag.getAddress();  return (!address.isStaticTimedeadband() && this.equipmentConfiguration.isDynamicTimeDeadbandEnabled());}  }
class C{  public void parseBuffer(ByteInputBuffer buffer,InputReaderLittleEndian refIns) throws IOException {  subjectId=buffer.readIntLittleEndian();  int flag=buffer.read();  score=buffer.readPacked(flag & 3);  queryBegin=buffer.readPacked((flag >>> 2) & 3);  subjectBegin=buffer.readPacked((flag >>> 4) & 3);  transcript.read(buffer);  if (refIns != null)   subjectName=daaHeader.getReference(subjectId,refIns); else   subjectName="unknown".getBytes();  totalSubjectLen=daaHeader.getRefLength(subjectId);switch (daaHeader.getAlignMode()) {case blastx:{      frame=(flag & (1 << 6)) == 0 ? queryBegin % 3 : 3 + (queryRecord.getSourceSequence().length - 1 - queryBegin) % 3;      translatedQueryBegin=getQueryTranslatedBegin(queryBegin,frame,queryRecord.getSourceSequence().length,true);      break;    }case blastp:{    frame=0;    translatedQueryBegin=queryBegin;    break;  }default :case blastn:{  frame=(flag & (1 << 6)) == 0 ? 0 : 1;  translatedQueryBegin=getQueryTranslatedBegin(queryBegin,frame,queryRecord.getSourceSequence().length);}}parseTranscript(transcript);}  }
class C{  @Override public int[] makeDensityTestPoints(){  return new int[]{-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28};}  }
class C{  private void checkNoErrors(){  guiTest.robot().waitForIdle();  for (  Notification notification : EventLog.getLogModel(guiTest.ideFrame().getProject()).getNotifications()) {    assertThat(notification.getType()).isNotEqualTo(NotificationType.ERROR);  }}  }
class C{  public JsonObjectRequest(int method,String url,JSONObject jsonRequest,Listener<JSONObject> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public NewsfeedGetMentionsQuery count(Integer value){  return unsafeParam("count",value);}  }
class C{  public void clear(){  lineTypes=null;  lines=null;  writeIndex=0;  readIndex=0;}  }
class C{  protected QueryContext withValue(Param param,Object value){  validateField(param,value);  Map<Param,Object> values=new HashMap<>(contextMap);  if (value == null) {    values.remove(param);  } else {    values.put(param,value);  }  return new QueryContext(this,values);}  }
class C{  public int fastSkip(int len) throws IllegalArgumentException, IOException {  if (len < 0)   throw new IllegalArgumentException("the number of frames to skip must be positiv");  if (len == 0)   return 0;  return ((int)in.skip(len * frameSize)) / frameSize;}  }
class C{  private void recordUserActionDuringTabRestore(int action){  assert action >= 0 && action < USER_ACTION_DURING_RESTORE_MAX;  RecordHistogram.recordEnumeratedHistogram("Tab.RestoreUserPersistence",action,USER_ACTION_DURING_RESTORE_MAX);}  }
class C{  private void addExplicitLocationField(ConfigSource.Builder builder,FieldDescriptor field,Node value){  builder.addLocation(field,null,helper.getLocation(value));}  }
class C{  protected void notifyScrollingListenersAboutStart(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingStarted(this);  }}  }
class C{  public Bundler putShort(String key,short value){  bundle.putShort(key,value);  return this;}  }
class C{  public static <E>Stream<IntSummaryStatistics> shiftingWindowSummarizingInt(Stream<E> stream,int rollingFactor,ToIntFunction<? super E> mapper){  Objects.requireNonNull(stream);  Objects.requireNonNull(mapper);  IntStream intStream=stream.mapToInt(mapper);  return shiftingWindowSummarizingInt(intStream,rollingFactor);}  }
class C{  protected CassandraDriver newDriver(final String propertyContext,final HealthCheckRegistry registry,final String instanceName) throws IOException, ConnectionException {  DriverConfiguration config=new DriverConfiguration(propertyContext);  CassandraDriver result=new DefaultCassandraDriver(config,registry,instanceName);  if (!result.isKeyspaceInitialized()) {    result.initializeKeyspace();  }  return result;}  }
class C{  public boolean isDistinct(){  return distinct;}  }
class C{  static boolean checkWin(char _xo){  for (int i=0; i < field_size; i++) {    if (field[i][0] == _xo && field[i][1] == _xo && field[i][2] == _xo)     return true;    if (field[0][i] == _xo && field[1][i] == _xo && field[2][i] == _xo)     return true;  }  if (field[0][0] == _xo && field[1][1] == _xo && field[2][2] == _xo)   return true;  if (field[2][0] == _xo && field[1][1] == _xo && field[0][2] == _xo)   return true;  return false;}  }
class C{  @Override public void remove(){  throw new UnsupportedOperationException("This operation is not supported.");}  }
class C{  @Override protected FieldConfigBase createCopy(FieldConfigBase fieldConfigBase){  FieldConfigInteger copy=null;  if (fieldConfigBase != null) {    copy=new FieldConfigInteger(fieldConfigBase.getCommonData());    FieldConfigInteger intFieldConfig=(FieldConfigInteger)fieldConfigBase;    copy.setConfig(intFieldConfig.minValue,intFieldConfig.maxValue,intFieldConfig.stepSize);    copy.setDefaultValue(intFieldConfig.defaultValue);  }  return copy;}  }
class C{  public boolean contains(int index){  return index >= getFirst() && index <= getLast();}  }
class C{  public MessagesRemoveChatUserQuery(VkApiClient client,UserActor actor,int chatId,String userId){  super(client,"messages.removeChatUser",OkResponse.class);  accessToken(actor.getAccessToken());  chatId(chatId);  userId(userId);}  }
class C{  private double convexCellArea(final Vertex start){  int n=0;  double sum=0;  for (Edge e=start.getOutgoing(); n == 0 || e.getStart() != start; e=e.getEnd().getOutgoing()) {    final Vector3D previousPole=e.getCircle().getPole();    final Vector3D nextPole=e.getEnd().getOutgoing().getCircle().getPole();    final Vector3D point=e.getEnd().getLocation().getVector();    double alpha=FastMath.atan2(Vector3D.dotProduct(nextPole,Vector3D.crossProduct(point,previousPole)),-Vector3D.dotProduct(nextPole,previousPole));    if (alpha < 0) {      alpha+=MathUtils.TWO_PI;    }    sum+=alpha;    n++;  }  return sum - (n - 2) * FastMath.PI;}  }
class C{  public static String checkAndFormatText(final FormatterDetails format,final byte[] text){  if (format != null) {    return FormattingUtils.formatText(format,ConversionUtils.arrayToString(text),text);  }  return ConversionUtils.arrayToString(text);}  }
class C{  private void bodyGuard(){  if (race == 1) {    sp(209680,638.04425f,874.08044f,1600.8944f,(byte)28,1000,"GUARD1",false);    sp(209680,639.54205f,873.6535f,1600.9027f,(byte)28,1000,"GUARD2",false);    sp(209680,640.8667f,873.54987f,1600.9072f,(byte)28,1000,"GUARD3",false);    sp(209680,642.6332f,873.41156f,1600.903f,(byte)28,1000,"GUARD4",false);    sp(209680,635.89276f,874.06696f,1600.8887f,(byte)28,1000,"GUARD5",false);    sp(209680,634.5438f,874.1542f,1600.8843f,(byte)28,1000,"GUARD6",false);    sp(209680,633.2586f,874.2546f,1600.8798f,(byte)28,1000,"GUARD7",false);    sp(209680,631.68494f,874.3776f,1600.8743f,(byte)28,1000,"GUARD8",false);  }  if (race == 2) {    sp(209745,638.04425f,874.08044f,1600.8944f,(byte)28,1000,"GUARD1",false);    sp(209745,639.54205f,873.6535f,1600.9027f,(byte)28,1000,"GUARD2",false);    sp(209745,640.8667f,873.54987f,1600.9072f,(byte)28,1000,"GUARD3",false);    sp(209745,642.6332f,873.41156f,1600.903f,(byte)28,1000,"GUARD4",false);    sp(209745,635.89276f,874.06696f,1600.8887f,(byte)28,1000,"GUARD5",false);    sp(209745,634.5438f,874.1542f,1600.8843f,(byte)28,1000,"GUARD6",false);    sp(209745,633.2586f,874.2546f,1600.8798f,(byte)28,1000,"GUARD7",false);    sp(209745,631.68494f,874.3776f,1600.8743f,(byte)28,1000,"GUARD8",false);  }}  }
class C{  public void requestNodeRoutingInfo(int nodeId){  this.enqueue(new GetRoutingInfoMessageClass().doRequest(nodeId));}  }
class C{  public boolean isInteriorRight(){  return this.left.isInteriorRight();}  }
class C{  public Expression bindVariable(Value var,Value coll){  _joinBindings.put(var.getName(),coll.getName());  return new BindVariableExpression();}  }
class C{  public WeibullDistribution(double alpha,double beta) throws MathIllegalArgumentException {  if (alpha <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SHAPE,alpha);  }  if (beta <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.SCALE,beta);  }  scale=beta;  shape=alpha;}  }
class C{  public ReplicateLaterWindow fillTime(String time){  timeField.sendKeys(time);  return this;}  }
class C{  public FriendsGetRequestsQuery suggested(Boolean value){  return unsafeParam("suggested",value);}  }
class C{  public HTMLSchema(){  setURI("http://www.w3.org/1999/xhtml");  setPrefix("html");  elementType("<pcdata>",M_EMPTY,M_PCDATA,0);  elementType("<root>",M_ROOT,M_EMPTY,0);  elementType("a",M_PCDATA | M_NOLINK,M_INLINE,0);  elementType("abbr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("acronym",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("address",M_PCDATA | M_INLINE | M_P,M_BLOCK,0);  elementType("applet",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("area",M_EMPTY,M_AREA,0);  elementType("b",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("base",M_EMPTY,M_HEAD,0);  elementType("basefont",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("bdo",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("bgsound",M_EMPTY,M_HEAD,0);  elementType("big",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blink",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("blockquote",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("body",M_PCDATA | M_INLINE | M_BLOCK,M_HTML | M_BODY,0);  elementType("br",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("button",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("canvas",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("caption",M_PCDATA | M_INLINE,M_TABULAR,0);  elementType("center",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("cite",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("code",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("col",M_EMPTY,M_COL | M_TABULAR,0);  elementType("colgroup",M_COL,M_TABULAR,0);  elementType("comment",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("dd",M_PCDATA | M_INLINE | M_BLOCK,M_DEF,0);  elementType("del",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCKINLINE | M_BLOCK,F_RESTART);  elementType("dfn",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("dir",M_LI,M_BLOCK,0);  elementType("div",M_LI | M_PCDATA | M_INLINE| M_BLOCK,M_LI | M_BLOCK,0);  elementType("dl",M_DEF,M_BLOCK,0);  elementType("dt",M_PCDATA | M_INLINE,M_DEF,0);  elementType("em",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("fieldset",M_PCDATA | M_LEGEND | M_INLINE| M_BLOCK,M_BLOCK,0);  elementType("font",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("form",M_PCDATA | M_INLINE | M_NOLINK| M_BLOCK| M_TR| M_CELL,M_BLOCK | M_FORM,F_NOFORCE);  elementType("frame",M_EMPTY,M_FRAME,0);  elementType("frameset",M_FRAME,M_FRAME | M_HTML,0);  elementType("h1",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h2",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h3",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h4",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h5",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("h6",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("head",M_HEAD,M_HTML,0);  elementType("hr",M_EMPTY,M_BLOCK,0);  elementType("html",M_HTML,M_ROOT,0);  elementType("i",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("iframe",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_NOLINK,0);  elementType("img",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("input",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("ins",M_PCDATA | M_INLINE | M_BLOCK,M_INLINE | M_BLOCK,F_RESTART);  elementType("isindex",M_EMPTY,M_HEAD,0);  elementType("kbd",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("label",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("legend",M_PCDATA | M_INLINE,M_LEGEND,0);  elementType("li",M_PCDATA | M_INLINE | M_BLOCK,M_LI,0);  elementType("link",M_EMPTY,M_HEAD | M_INLINE,0);  elementType("listing",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("map",M_BLOCK | M_AREA,M_INLINE,0);  elementType("marquee",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("menu",M_LI,M_BLOCK,0);  elementType("meta",M_EMPTY,M_HEAD,0);  elementType("nobr",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("noframes",M_BODY | M_BLOCK | M_INLINE,M_BLOCK | M_HTML | M_FRAME,0);  elementType("noscript",M_PCDATA | M_INLINE | M_BLOCK,M_BLOCK,0);  elementType("object",M_PCDATA | M_PARAM | M_INLINE| M_BLOCK,M_HEAD | M_INLINE | M_NOLINK,0);  elementType("ol",M_LI | M_INLINE | M_BLOCK,M_LI | M_BLOCK,0);  elementType("optgroup",M_OPTIONS,M_OPTIONS,0);  elementType("option",M_PCDATA,M_OPTION | M_OPTIONS,0);  elementType("p",M_PCDATA | M_INLINE | M_TABLE,M_BLOCK | M_P,0);  elementType("param",M_EMPTY,M_PARAM,0);  elementType("pre",M_PCDATA | M_INLINE,M_BLOCK,0);  elementType("q",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rb",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rbc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("rtc",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ruby",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("s",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("samp",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("script",M_PCDATA,M_ANY & ~M_ROOT,F_CDATA);  elementType("select",M_OPTIONS,M_INLINE,0);  elementType("small",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("span",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("strike",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("strong",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("style",M_PCDATA,M_HEAD | M_INLINE,F_CDATA);  elementType("sub",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("sup",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("table",M_FORM | M_TABULAR,M_BLOCK | M_TABLE,F_NOFORCE);  elementType("tbody",M_TR,M_TABULAR,0);  elementType("td",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("textarea",M_PCDATA,M_INLINE,0);  elementType("tfoot",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("th",M_PCDATA | M_INLINE | M_BLOCK,M_CELL,0);  elementType("thead",M_TR | M_FORM | M_CELL,M_TABULAR,0);  elementType("title",M_PCDATA,M_HEAD,0);  elementType("tr",M_FORM | M_CELL,M_TR | M_TABULAR,0);  elementType("tt",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("u",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,F_RESTART);  elementType("ul",M_LI | M_INLINE | M_BLOCK,M_LI | M_BLOCK,0);  elementType("var",M_PCDATA | M_INLINE,M_INLINE | M_NOLINK,0);  elementType("wbr",M_EMPTY,M_INLINE | M_NOLINK,0);  elementType("xmp",M_PCDATA | M_INLINE,M_BLOCK,0);  parent("<pcdata>","body");  parent("html","<root>");  parent("a","body");  parent("abbr","body");  parent("acronym","body");  parent("address","body");  parent("applet","body");  parent("area","map");  parent("b","body");  parent("base","head");  parent("basefont","body");  parent("bdo","body");  parent("bgsound","head");  parent("big","body");  parent("blink","body");  parent("blockquote","body");  parent("body","html");  parent("br","body");  parent("button","form");  parent("canvas","body");  parent("caption","table");  parent("center","body");  parent("cite","body");  parent("code","body");  parent("col","table");  parent("colgroup","table");  parent("comment","body");  parent("dd","dl");  parent("del","body");  parent("dfn","body");  parent("dir","body");  parent("div","body");  parent("dl","body");  parent("dt","dl");  parent("em","body");  parent("fieldset","form");  parent("font","body");  parent("form","body");  parent("frame","frameset");  parent("frameset","html");  parent("h1","body");  parent("h2","body");  parent("h3","body");  parent("h4","body");  parent("h5","body");  parent("h6","body");  parent("head","html");  parent("hr","body");  parent("i","body");  parent("iframe","body");  parent("img","body");  parent("input","form");  parent("ins","body");  parent("isindex","head");  parent("kbd","body");  parent("label","form");  parent("legend","fieldset");  parent("li","ul");  parent("link","head");  parent("listing","body");  parent("map","body");  parent("marquee","body");  parent("menu","body");  parent("meta","head");  parent("nobr","body");  parent("noframes","html");  parent("noscript","body");  parent("object","body");  parent("ol","body");  parent("optgroup","select");  parent("option","select");  parent("p","body");  parent("param","object");  parent("pre","body");  parent("q","body");  parent("rb","body");  parent("rbc","body");  parent("rp","body");  parent("rt","body");  parent("rtc","body");  parent("ruby","body");  parent("s","body");  parent("samp","body");  parent("script","html");  parent("select","form");  parent("small","body");  parent("span","body");  parent("strike","body");  parent("strong","body");  parent("style","head");  parent("sub","body");  parent("sup","body");  parent("table","body");  parent("tbody","table");  parent("td","tr");  parent("textarea","form");  parent("tfoot","table");  parent("th","tr");  parent("thead","table");  parent("title","head");  parent("tr","tbody");  parent("tt","body");  parent("u","body");  parent("ul","body");  parent("var","body");  parent("wbr","body");  parent("xmp","body");  attribute("a","hreflang","NMTOKEN",null);  attribute("a","shape","CDATA","rect");  attribute("a","tabindex","NMTOKEN",null);  attribute("applet","align","NMTOKEN",null);  attribute("area","nohref","BOOLEAN",null);  attribute("area","shape","CDATA","rect");  attribute("area","tabindex","NMTOKEN",null);  attribute("br","clear","CDATA","none");  attribute("button","disabled","BOOLEAN",null);  attribute("button","tabindex","NMTOKEN",null);  attribute("button","type","CDATA","submit");  attribute("caption","align","NMTOKEN",null);  attribute("col","align","NMTOKEN",null);  attribute("col","span","CDATA","1");  attribute("col","valign","NMTOKEN",null);  attribute("colgroup","align","NMTOKEN",null);  attribute("colgroup","span","CDATA","1");  attribute("colgroup","valign","NMTOKEN",null);  attribute("dir","compact","BOOLEAN",null);  attribute("div","align","NMTOKEN",null);  attribute("dl","compact","BOOLEAN",null);  attribute("form","enctype","CDATA","application/x-www-form-urlencoded");  attribute("form","method","CDATA","get");  attribute("frame","frameborder","CDATA","1");  attribute("frame","noresize","BOOLEAN",null);  attribute("frame","scrolling","CDATA","auto");  attribute("h1","align","NMTOKEN",null);  attribute("h2","align","NMTOKEN",null);  attribute("h3","align","NMTOKEN",null);  attribute("h4","align","NMTOKEN",null);  attribute("h5","align","NMTOKEN",null);  attribute("h6","align","NMTOKEN",null);  attribute("hr","align","NMTOKEN",null);  attribute("hr","noshade","BOOLEAN",null);  attribute("iframe","align","NMTOKEN",null);  attribute("iframe","frameborder","CDATA","1");  attribute("iframe","scrolling","CDATA","auto");  attribute("img","align","NMTOKEN",null);  attribute("img","ismap","BOOLEAN",null);  attribute("input","align","NMTOKEN",null);  attribute("input","checked","BOOLEAN",null);  attribute("input","disabled","BOOLEAN",null);  attribute("input","ismap","BOOLEAN",null);  attribute("input","maxlength","NMTOKEN",null);  attribute("input","readonly","BOOLEAN",null);  attribute("input","tabindex","NMTOKEN",null);  attribute("input","type","CDATA","text");  attribute("label","for","IDREF",null);  attribute("legend","align","NMTOKEN",null);  attribute("li","value","NMTOKEN",null);  attribute("link","hreflang","NMTOKEN",null);  attribute("marquee","width","NMTOKEN",null);  attribute("menu","compact","BOOLEAN",null);  attribute("meta","http-equiv","NMTOKEN",null);  attribute("meta","name","NMTOKEN",null);  attribute("object","align","NMTOKEN",null);  attribute("object","declare","BOOLEAN",null);  attribute("object","tabindex","NMTOKEN",null);  attribute("ol","compact","BOOLEAN",null);  attribute("ol","start","NMTOKEN",null);  attribute("optgroup","disabled","BOOLEAN",null);  attribute("option","disabled","BOOLEAN",null);  attribute("option","selected","BOOLEAN",null);  attribute("p","align","NMTOKEN",null);  attribute("param","valuetype","CDATA","data");  attribute("pre","width","NMTOKEN",null);  attribute("rt","rbspan","CDATA","1");  attribute("script","defer","BOOLEAN",null);  attribute("select","disabled","BOOLEAN",null);  attribute("select","multiple","BOOLEAN",null);  attribute("select","size","NMTOKEN",null);  attribute("select","tabindex","NMTOKEN",null);  attribute("table","align","NMTOKEN",null);  attribute("table","frame","NMTOKEN",null);  attribute("table","rules","NMTOKEN",null);  attribute("tbody","align","NMTOKEN",null);  attribute("tbody","valign","NMTOKEN",null);  attribute("td","align","NMTOKEN",null);  attribute("td","colspan","CDATA","1");  attribute("td","headers","IDREFS",null);  attribute("td","nowrap","BOOLEAN",null);  attribute("td","rowspan","CDATA","1");  attribute("td","scope","NMTOKEN",null);  attribute("td","valign","NMTOKEN",null);  attribute("textarea","cols","NMTOKEN",null);  attribute("textarea","disabled","BOOLEAN",null);  attribute("textarea","readonly","BOOLEAN",null);  attribute("textarea","rows","NMTOKEN",null);  attribute("textarea","tabindex","NMTOKEN",null);  attribute("tfoot","align","NMTOKEN",null);  attribute("tfoot","valign","NMTOKEN",null);  attribute("th","align","NMTOKEN",null);  attribute("th","colspan","CDATA","1");  attribute("th","headers","IDREFS",null);  attribute("th","nowrap","BOOLEAN",null);  attribute("th","rowspan","CDATA","1");  attribute("th","scope","NMTOKEN",null);  attribute("th","valign","NMTOKEN",null);  attribute("thead","align","NMTOKEN",null);  attribute("thead","valign","NMTOKEN",null);  attribute("tr","align","NMTOKEN",null);  attribute("tr","valign","NMTOKEN",null);  attribute("ul","compact","BOOLEAN",null);  attribute("ul","type","NMTOKEN",null);  attribute("xmp","width","NMTOKEN",null);  attribute("a","class","NMTOKEN",null);  attribute("abbr","class","NMTOKEN",null);  attribute("acronym","class","NMTOKEN",null);  attribute("address","class","NMTOKEN",null);  attribute("applet","class","NMTOKEN",null);  attribute("area","class","NMTOKEN",null);  attribute("b","class","NMTOKEN",null);  attribute("base","class","NMTOKEN",null);  attribute("basefont","class","NMTOKEN",null);  attribute("bdo","class","NMTOKEN",null);  attribute("bgsound","class","NMTOKEN",null);  attribute("big","class","NMTOKEN",null);  attribute("blink","class","NMTOKEN",null);  attribute("blockquote","class","NMTOKEN",null);  attribute("body","class","NMTOKEN",null);  attribute("br","class","NMTOKEN",null);  attribute("button","class","NMTOKEN",null);  attribute("canvas","class","NMTOKEN",null);  attribute("caption","class","NMTOKEN",null);  attribute("center","class","NMTOKEN",null);  attribute("cite","class","NMTOKEN",null);  attribute("code","class","NMTOKEN",null);  attribute("col","class","NMTOKEN",null);  attribute("colgroup","class","NMTOKEN",null);  attribute("comment","class","NMTOKEN",null);  attribute("dd","class","NMTOKEN",null);  attribute("del","class","NMTOKEN",null);  attribute("dfn","class","NMTOKEN",null);  attribute("dir","class","NMTOKEN",null);  attribute("div","class","NMTOKEN",null);  attribute("dl","class","NMTOKEN",null);  attribute("dt","class","NMTOKEN",null);  attribute("em","class","NMTOKEN",null);  attribute("fieldset","class","NMTOKEN",null);  attribute("font","class","NMTOKEN",null);  attribute("form","class","NMTOKEN",null);  attribute("frame","class","NMTOKEN",null);  attribute("frameset","class","NMTOKEN",null);  attribute("h1","class","NMTOKEN",null);  attribute("h2","class","NMTOKEN",null);  attribute("h3","class","NMTOKEN",null);  attribute("h4","class","NMTOKEN",null);  attribute("h5","class","NMTOKEN",null);  attribute("h6","class","NMTOKEN",null);  attribute("head","class","NMTOKEN",null);  attribute("hr","class","NMTOKEN",null);  attribute("html","class","NMTOKEN",null);  attribute("i","class","NMTOKEN",null);  attribute("iframe","class","NMTOKEN",null);  attribute("img","class","NMTOKEN",null);  attribute("input","class","NMTOKEN",null);  attribute("ins","class","NMTOKEN",null);  attribute("isindex","class","NMTOKEN",null);  attribute("kbd","class","NMTOKEN",null);  attribute("label","class","NMTOKEN",null);  attribute("legend","class","NMTOKEN",null);  attribute("li","class","NMTOKEN",null);  attribute("link","class","NMTOKEN",null);  attribute("listing","class","NMTOKEN",null);  attribute("map","class","NMTOKEN",null);  attribute("marquee","class","NMTOKEN",null);  attribute("menu","class","NMTOKEN",null);  attribute("meta","class","NMTOKEN",null);  attribute("nobr","class","NMTOKEN",null);  attribute("noframes","class","NMTOKEN",null);  attribute("noscript","class","NMTOKEN",null);  attribute("object","class","NMTOKEN",null);  attribute("ol","class","NMTOKEN",null);  attribute("optgroup","class","NMTOKEN",null);  attribute("option","class","NMTOKEN",null);  attribute("p","class","NMTOKEN",null);  attribute("param","class","NMTOKEN",null);  attribute("pre","class","NMTOKEN",null);  attribute("q","class","NMTOKEN",null);  attribute("rb","class","NMTOKEN",null);  attribute("rbc","class","NMTOKEN",null);  attribute("rp","class","NMTOKEN",null);  attribute("rt","class","NMTOKEN",null);  attribute("rtc","class","NMTOKEN",null);  attribute("ruby","class","NMTOKEN",null);  attribute("s","class","NMTOKEN",null);  attribute("samp","class","NMTOKEN",null);  attribute("script","class","NMTOKEN",null);  attribute("select","class","NMTOKEN",null);  attribute("small","class","NMTOKEN",null);  attribute("span","class","NMTOKEN",null);  attribute("strike","class","NMTOKEN",null);  attribute("strong","class","NMTOKEN",null);  attribute("style","class","NMTOKEN",null);  attribute("sub","class","NMTOKEN",null);  attribute("sup","class","NMTOKEN",null);  attribute("table","class","NMTOKEN",null);  attribute("tbody","class","NMTOKEN",null);  attribute("td","class","NMTOKEN",null);  attribute("textarea","class","NMTOKEN",null);  attribute("tfoot","class","NMTOKEN",null);  attribute("th","class","NMTOKEN",null);  attribute("thead","class","NMTOKEN",null);  attribute("title","class","NMTOKEN",null);  attribute("tr","class","NMTOKEN",null);  attribute("tt","class","NMTOKEN",null);  attribute("u","class","NMTOKEN",null);  attribute("ul","class","NMTOKEN",null);  attribute("var","class","NMTOKEN",null);  attribute("wbr","class","NMTOKEN",null);  attribute("xmp","class","NMTOKEN",null);  attribute("a","dir","NMTOKEN",null);  attribute("abbr","dir","NMTOKEN",null);  attribute("acronym","dir","NMTOKEN",null);  attribute("address","dir","NMTOKEN",null);  attribute("applet","dir","NMTOKEN",null);  attribute("area","dir","NMTOKEN",null);  attribute("b","dir","NMTOKEN",null);  attribute("base","dir","NMTOKEN",null);  attribute("basefont","dir","NMTOKEN",null);  attribute("bdo","dir","NMTOKEN",null);  attribute("bgsound","dir","NMTOKEN",null);  attribute("big","dir","NMTOKEN",null);  attribute("blink","dir","NMTOKEN",null);  attribute("blockquote","dir","NMTOKEN",null);  attribute("body","dir","NMTOKEN",null);  attribute("br","dir","NMTOKEN",null);  attribute("button","dir","NMTOKEN",null);  attribute("canvas","dir","NMTOKEN",null);  attribute("caption","dir","NMTOKEN",null);  attribute("center","dir","NMTOKEN",null);  attribute("cite","dir","NMTOKEN",null);  attribute("code","dir","NMTOKEN",null);  attribute("col","dir","NMTOKEN",null);  attribute("colgroup","dir","NMTOKEN",null);  attribute("comment","dir","NMTOKEN",null);  attribute("dd","dir","NMTOKEN",null);  attribute("del","dir","NMTOKEN",null);  attribute("dfn","dir","NMTOKEN",null);  attribute("dir","dir","NMTOKEN",null);  attribute("div","dir","NMTOKEN",null);  attribute("dl","dir","NMTOKEN",null);  attribute("dt","dir","NMTOKEN",null);  attribute("em","dir","NMTOKEN",null);  attribute("fieldset","dir","NMTOKEN",null);  attribute("font","dir","NMTOKEN",null);  attribute("form","dir","NMTOKEN",null);  attribute("frame","dir","NMTOKEN",null);  attribute("frameset","dir","NMTOKEN",null);  attribute("h1","dir","NMTOKEN",null);  attribute("h2","dir","NMTOKEN",null);  attribute("h3","dir","NMTOKEN",null);  attribute("h4","dir","NMTOKEN",null);  attribute("h5","dir","NMTOKEN",null);  attribute("h6","dir","NMTOKEN",null);  attribute("head","dir","NMTOKEN",null);  attribute("hr","dir","NMTOKEN",null);  attribute("html","dir","NMTOKEN",null);  attribute("i","dir","NMTOKEN",null);  attribute("iframe","dir","NMTOKEN",null);  attribute("img","dir","NMTOKEN",null);  attribute("input","dir","NMTOKEN",null);  attribute("ins","dir","NMTOKEN",null);  attribute("isindex","dir","NMTOKEN",null);  attribute("kbd","dir","NMTOKEN",null);  attribute("label","dir","NMTOKEN",null);  attribute("legend","dir","NMTOKEN",null);  attribute("li","dir","NMTOKEN",null);  attribute("link","dir","NMTOKEN",null);  attribute("listing","dir","NMTOKEN",null);  attribute("map","dir","NMTOKEN",null);  attribute("marquee","dir","NMTOKEN",null);  attribute("menu","dir","NMTOKEN",null);  attribute("meta","dir","NMTOKEN",null);  attribute("nobr","dir","NMTOKEN",null);  attribute("noframes","dir","NMTOKEN",null);  attribute("noscript","dir","NMTOKEN",null);  attribute("object","dir","NMTOKEN",null);  attribute("ol","dir","NMTOKEN",null);  attribute("optgroup","dir","NMTOKEN",null);  attribute("option","dir","NMTOKEN",null);  attribute("p","dir","NMTOKEN",null);  attribute("param","dir","NMTOKEN",null);  attribute("pre","dir","NMTOKEN",null);  attribute("q","dir","NMTOKEN",null);  attribute("rb","dir","NMTOKEN",null);  attribute("rbc","dir","NMTOKEN",null);  attribute("rp","dir","NMTOKEN",null);  attribute("rt","dir","NMTOKEN",null);  attribute("rtc","dir","NMTOKEN",null);  attribute("ruby","dir","NMTOKEN",null);  attribute("s","dir","NMTOKEN",null);  attribute("samp","dir","NMTOKEN",null);  attribute("script","dir","NMTOKEN",null);  attribute("select","dir","NMTOKEN",null);  attribute("small","dir","NMTOKEN",null);  attribute("span","dir","NMTOKEN",null);  attribute("strike","dir","NMTOKEN",null);  attribute("strong","dir","NMTOKEN",null);  attribute("style","dir","NMTOKEN",null);  attribute("sub","dir","NMTOKEN",null);  attribute("sup","dir","NMTOKEN",null);  attribute("table","dir","NMTOKEN",null);  attribute("tbody","dir","NMTOKEN",null);  attribute("td","dir","NMTOKEN",null);  attribute("textarea","dir","NMTOKEN",null);  attribute("tfoot","dir","NMTOKEN",null);  attribute("th","dir","NMTOKEN",null);  attribute("thead","dir","NMTOKEN",null);  attribute("title","dir","NMTOKEN",null);  attribute("tr","dir","NMTOKEN",null);  attribute("tt","dir","NMTOKEN",null);  attribute("u","dir","NMTOKEN",null);  attribute("ul","dir","NMTOKEN",null);  attribute("var","dir","NMTOKEN",null);  attribute("wbr","dir","NMTOKEN",null);  attribute("xmp","dir","NMTOKEN",null);  attribute("a","id","ID",null);  attribute("abbr","id","ID",null);  attribute("acronym","id","ID",null);  attribute("address","id","ID",null);  attribute("applet","id","ID",null);  attribute("area","id","ID",null);  attribute("b","id","ID",null);  attribute("base","id","ID",null);  attribute("basefont","id","ID",null);  attribute("bdo","id","ID",null);  attribute("bgsound","id","ID",null);  attribute("big","id","ID",null);  attribute("blink","id","ID",null);  attribute("blockquote","id","ID",null);  attribute("body","id","ID",null);  attribute("br","id","ID",null);  attribute("button","id","ID",null);  attribute("canvas","id","ID",null);  attribute("caption","id","ID",null);  attribute("center","id","ID",null);  attribute("cite","id","ID",null);  attribute("code","id","ID",null);  attribute("col","id","ID",null);  attribute("colgroup","id","ID",null);  attribute("comment","id","ID",null);  attribute("dd","id","ID",null);  attribute("del","id","ID",null);  attribute("dfn","id","ID",null);  attribute("dir","id","ID",null);  attribute("div","id","ID",null);  attribute("dl","id","ID",null);  attribute("dt","id","ID",null);  attribute("em","id","ID",null);  attribute("fieldset","id","ID",null);  attribute("font","id","ID",null);  attribute("form","id","ID",null);  attribute("frame","id","ID",null);  attribute("frameset","id","ID",null);  attribute("h1","id","ID",null);  attribute("h2","id","ID",null);  attribute("h3","id","ID",null);  attribute("h4","id","ID",null);  attribute("h5","id","ID",null);  attribute("h6","id","ID",null);  attribute("head","id","ID",null);  attribute("hr","id","ID",null);  attribute("html","id","ID",null);  attribute("i","id","ID",null);  attribute("iframe","id","ID",null);  attribute("img","id","ID",null);  attribute("input","id","ID",null);  attribute("ins","id","ID",null);  attribute("isindex","id","ID",null);  attribute("kbd","id","ID",null);  attribute("label","id","ID",null);  attribute("legend","id","ID",null);  attribute("li","id","ID",null);  attribute("link","id","ID",null);  attribute("listing","id","ID",null);  attribute("map","id","ID",null);  attribute("marquee","id","ID",null);  attribute("menu","id","ID",null);  attribute("meta","id","ID",null);  attribute("nobr","id","ID",null);  attribute("noframes","id","ID",null);  attribute("noscript","id","ID",null);  attribute("object","id","ID",null);  attribute("ol","id","ID",null);  attribute("optgroup","id","ID",null);  attribute("option","id","ID",null);  attribute("p","id","ID",null);  attribute("param","id","ID",null);  attribute("pre","id","ID",null);  attribute("q","id","ID",null);  attribute("rb","id","ID",null);  attribute("rbc","id","ID",null);  attribute("rp","id","ID",null);  attribute("rt","id","ID",null);  attribute("rtc","id","ID",null);  attribute("ruby","id","ID",null);  attribute("s","id","ID",null);  attribute("samp","id","ID",null);  attribute("script","id","ID",null);  attribute("select","id","ID",null);  attribute("small","id","ID",null);  attribute("span","id","ID",null);  attribute("strike","id","ID",null);  attribute("strong","id","ID",null);  attribute("style","id","ID",null);  attribute("sub","id","ID",null);  attribute("sup","id","ID",null);  attribute("table","id","ID",null);  attribute("tbody","id","ID",null);  attribute("td","id","ID",null);  attribute("textarea","id","ID",null);  attribute("tfoot","id","ID",null);  attribute("th","id","ID",null);  attribute("thead","id","ID",null);  attribute("title","id","ID",null);  attribute("tr","id","ID",null);  attribute("tt","id","ID",null);  attribute("u","id","ID",null);  attribute("ul","id","ID",null);  attribute("var","id","ID",null);  attribute("wbr","id","ID",null);  attribute("xmp","id","ID",null);  attribute("a","lang","NMTOKEN",null);  attribute("abbr","lang","NMTOKEN",null);  attribute("acronym","lang","NMTOKEN",null);  attribute("address","lang","NMTOKEN",null);  attribute("applet","lang","NMTOKEN",null);  attribute("area","lang","NMTOKEN",null);  attribute("b","lang","NMTOKEN",null);  attribute("base","lang","NMTOKEN",null);  attribute("basefont","lang","NMTOKEN",null);  attribute("bdo","lang","NMTOKEN",null);  attribute("bgsound","lang","NMTOKEN",null);  attribute("big","lang","NMTOKEN",null);  attribute("blink","lang","NMTOKEN",null);  attribute("blockquote","lang","NMTOKEN",null);  attribute("body","lang","NMTOKEN",null);  attribute("br","lang","NMTOKEN",null);  attribute("button","lang","NMTOKEN",null);  attribute("canvas","lang","NMTOKEN",null);  attribute("caption","lang","NMTOKEN",null);  attribute("center","lang","NMTOKEN",null);  attribute("cite","lang","NMTOKEN",null);  attribute("code","lang","NMTOKEN",null);  attribute("col","lang","NMTOKEN",null);  attribute("colgroup","lang","NMTOKEN",null);  attribute("comment","lang","NMTOKEN",null);  attribute("dd","lang","NMTOKEN",null);  attribute("del","lang","NMTOKEN",null);  attribute("dfn","lang","NMTOKEN",null);  attribute("dir","lang","NMTOKEN",null);  attribute("div","lang","NMTOKEN",null);  attribute("dl","lang","NMTOKEN",null);  attribute("dt","lang","NMTOKEN",null);  attribute("em","lang","NMTOKEN",null);  attribute("fieldset","lang","NMTOKEN",null);  attribute("font","lang","NMTOKEN",null);  attribute("form","lang","NMTOKEN",null);  attribute("frame","lang","NMTOKEN",null);  attribute("frameset","lang","NMTOKEN",null);  attribute("h1","lang","NMTOKEN",null);  attribute("h2","lang","NMTOKEN",null);  attribute("h3","lang","NMTOKEN",null);  attribute("h4","lang","NMTOKEN",null);  attribute("h5","lang","NMTOKEN",null);  attribute("h6","lang","NMTOKEN",null);  attribute("head","lang","NMTOKEN",null);  attribute("hr","lang","NMTOKEN",null);  attribute("html","lang","NMTOKEN",null);  attribute("i","lang","NMTOKEN",null);  attribute("iframe","lang","NMTOKEN",null);  attribute("img","lang","NMTOKEN",null);  attribute("input","lang","NMTOKEN",null);  attribute("ins","lang","NMTOKEN",null);  attribute("isindex","lang","NMTOKEN",null);  attribute("kbd","lang","NMTOKEN",null);  attribute("label","lang","NMTOKEN",null);  attribute("legend","lang","NMTOKEN",null);  attribute("li","lang","NMTOKEN",null);  attribute("link","lang","NMTOKEN",null);  attribute("listing","lang","NMTOKEN",null);  attribute("map","lang","NMTOKEN",null);  attribute("marquee","lang","NMTOKEN",null);  attribute("menu","lang","NMTOKEN",null);  attribute("meta","lang","NMTOKEN",null);  attribute("nobr","lang","NMTOKEN",null);  attribute("noframes","lang","NMTOKEN",null);  attribute("noscript","lang","NMTOKEN",null);  attribute("object","lang","NMTOKEN",null);  attribute("ol","lang","NMTOKEN",null);  attribute("optgroup","lang","NMTOKEN",null);  attribute("option","lang","NMTOKEN",null);  attribute("p","lang","NMTOKEN",null);  attribute("param","lang","NMTOKEN",null);  attribute("pre","lang","NMTOKEN",null);  attribute("q","lang","NMTOKEN",null);  attribute("rb","lang","NMTOKEN",null);  attribute("rbc","lang","NMTOKEN",null);  attribute("rp","lang","NMTOKEN",null);  attribute("rt","lang","NMTOKEN",null);  attribute("rtc","lang","NMTOKEN",null);  attribute("ruby","lang","NMTOKEN",null);  attribute("s","lang","NMTOKEN",null);  attribute("samp","lang","NMTOKEN",null);  attribute("script","lang","NMTOKEN",null);  attribute("select","lang","NMTOKEN",null);  attribute("small","lang","NMTOKEN",null);  attribute("span","lang","NMTOKEN",null);  attribute("strike","lang","NMTOKEN",null);  attribute("strong","lang","NMTOKEN",null);  attribute("style","lang","NMTOKEN",null);  attribute("sub","lang","NMTOKEN",null);  attribute("sup","lang","NMTOKEN",null);  attribute("table","lang","NMTOKEN",null);  attribute("tbody","lang","NMTOKEN",null);  attribute("td","lang","NMTOKEN",null);  attribute("textarea","lang","NMTOKEN",null);  attribute("tfoot","lang","NMTOKEN",null);  attribute("th","lang","NMTOKEN",null);  attribute("thead","lang","NMTOKEN",null);  attribute("title","lang","NMTOKEN",null);  attribute("tr","lang","NMTOKEN",null);  attribute("tt","lang","NMTOKEN",null);  attribute("u","lang","NMTOKEN",null);  attribute("ul","lang","NMTOKEN",null);  attribute("var","lang","NMTOKEN",null);  attribute("wbr","lang","NMTOKEN",null);  attribute("xmp","lang","NMTOKEN",null);  entity("aacgr",0x03AC);  entity("Aacgr",0x0386);  entity("aacute",0x00E1);  entity("Aacute",0x00C1);  entity("abreve",0x0103);  entity("Abreve",0x0102);  entity("ac",0x223E);  entity("acd",0x223F);  entity("acirc",0x00E2);  entity("Acirc",0x00C2);  entity("acute",0x00B4);  entity("acy",0x0430);  entity("Acy",0x0410);  entity("aelig",0x00E6);  entity("AElig",0x00C6);  entity("af",0x2061);  entity("afr",0x1D51E);  entity("Afr",0x1D504);  entity("agr",0x03B1);  entity("Agr",0x0391);  entity("agrave",0x00E0);  entity("Agrave",0x00C0);  entity("alefsym",0x2135);  entity("aleph",0x2135);  entity("alpha",0x03B1);  entity("Alpha",0x0391);  entity("amacr",0x0101);  entity("Amacr",0x0100);  entity("amalg",0x2A3F);  entity("amp",0x0026);  entity("and",0x2227);  entity("And",0x2A53);  entity("andand",0x2A55);  entity("andd",0x2A5C);  entity("andslope",0x2A58);  entity("andv",0x2A5A);  entity("ang",0x2220);  entity("ange",0x29A4);  entity("angle",0x2220);  entity("angmsd",0x2221);  entity("angmsdaa",0x29A8);  entity("angmsdab",0x29A9);  entity("angmsdac",0x29AA);  entity("angmsdad",0x29AB);  entity("angmsdae",0x29AC);  entity("angmsdaf",0x29AD);  entity("angmsdag",0x29AE);  entity("angmsdah",0x29AF);  entity("angrt",0x221F);  entity("angrtvb",0x22BE);  entity("angrtvbd",0x299D);  entity("angsph",0x2222);  entity("angst",0x212B);  entity("angzarr",0x237C);  entity("aogon",0x0105);  entity("Aogon",0x0104);  entity("aopf",0x1D552);  entity("Aopf",0x1D538);  entity("ap",0x2248);  entity("apacir",0x2A6F);  entity("ape",0x224A);  entity("apE",0x2A70);  entity("apid",0x224B);  entity("apos",0x0027);  entity("ApplyFunction",0x2061);  entity("approx",0x2248);  entity("approxeq",0x224A);  entity("aring",0x00E5);  entity("Aring",0x00C5);  entity("ascr",0x1D4B6);  entity("Ascr",0x1D49C);  entity("Assign",0x2254);  entity("ast",0x002A);  entity("asymp",0x2248);  entity("asympeq",0x224D);  entity("atilde",0x00E3);  entity("Atilde",0x00C3);  entity("auml",0x00E4);  entity("Auml",0x00C4);  entity("awconint",0x2233);  entity("awint",0x2A11);  entity("b.alpha",0x1D6C2);  entity("b.beta",0x1D6C3);  entity("b.chi",0x1D6D8);  entity("b.delta",0x1D6C5);  entity("b.Delta",0x1D6AB);  entity("b.epsi",0x1D6C6);  entity("b.epsiv",0x1D6DC);  entity("b.eta",0x1D6C8);  entity("b.gamma",0x1D6C4);  entity("b.Gamma",0x1D6AA);  entity("b.gammad",0x1D7CB);  entity("b.Gammad",0x1D7CA);  entity("b.iota",0x1D6CA);  entity("b.kappa",0x1D6CB);  entity("b.kappav",0x1D6DE);  entity("b.lambda",0x1D6CC);  entity("b.Lambda",0x1D6B2);  entity("b.mu",0x1D6CD);  entity("b.nu",0x1D6CE);  entity("b.omega",0x1D6DA);  entity("b.Omega",0x1D6C0);  entity("b.phi",0x1D6D7);  entity("b.Phi",0x1D6BD);  entity("b.phiv",0x1D6DF);  entity("b.pi",0x1D6D1);  entity("b.Pi",0x1D6B7);  entity("b.piv",0x1D6E1);  entity("b.psi",0x1D6D9);  entity("b.Psi",0x1D6BF);  entity("b.rho",0x1D6D2);  entity("b.rhov",0x1D6E0);  entity("b.sigma",0x1D6D4);  entity("b.Sigma",0x1D6BA);  entity("b.sigmav",0x1D6D3);  entity("b.tau",0x1D6D5);  entity("b.Theta",0x1D6AF);  entity("b.thetas",0x1D6C9);  entity("b.thetav",0x1D6DD);  entity("b.upsi",0x1D6D6);  entity("b.Upsi",0x1D6BC);  entity("b.xi",0x1D6CF);  entity("b.Xi",0x1D6B5);  entity("b.zeta",0x1D6C7);  entity("backcong",0x224C);  entity("backepsilon",0x03F6);  entity("backprime",0x2035);  entity("backsim",0x223D);  entity("backsimeq",0x22CD);  entity("Backslash",0x2216);  entity("Barv",0x2AE7);  entity("barvee",0x22BD);  entity("barwed",0x2305);  entity("Barwed",0x2306);  entity("barwedge",0x2305);  entity("bbrk",0x23B5);  entity("bbrktbrk",0x23B6);  entity("bcong",0x224C);  entity("bcy",0x0431);  entity("Bcy",0x0411);  entity("bdquo",0x201E);  entity("becaus",0x2235);  entity("because",0x2235);  entity("bemptyv",0x29B0);  entity("bepsi",0x03F6);  entity("bernou",0x212C);  entity("Bernoullis",0x212C);  entity("beta",0x03B2);  entity("Beta",0x0392);  entity("beth",0x2136);  entity("between",0x226C);  entity("bfr",0x1D51F);  entity("Bfr",0x1D505);  entity("bgr",0x03B2);  entity("Bgr",0x0392);  entity("bigcap",0x22C2);  entity("bigcirc",0x25EF);  entity("bigcup",0x22C3);  entity("bigodot",0x2A00);  entity("bigoplus",0x2A01);  entity("bigotimes",0x2A02);  entity("bigsqcup",0x2A06);  entity("bigstar",0x2605);  entity("bigtriangledown",0x25BD);  entity("bigtriangleup",0x25B3);  entity("biguplus",0x2A04);  entity("bigvee",0x22C1);  entity("bigwedge",0x22C0);  entity("bkarow",0x290D);  entity("blacklozenge",0x29EB);  entity("blacksquare",0x25AA);  entity("blacktriangle",0x25B4);  entity("blacktriangledown",0x25BE);  entity("blacktriangleleft",0x25C2);  entity("blacktriangleright",0x25B8);  entity("blank",0x2423);  entity("blk12",0x2592);  entity("blk14",0x2591);  entity("blk34",0x2593);  entity("block",0x2588);  entity("bnot",0x2310);  entity("bNot",0x2AED);  entity("bopf",0x1D553);  entity("Bopf",0x1D539);  entity("bot",0x22A5);  entity("bottom",0x22A5);  entity("bowtie",0x22C8);  entity("boxbox",0x29C9);  entity("boxdl",0x2510);  entity("boxdL",0x2555);  entity("boxDl",0x2556);  entity("boxDL",0x2557);  entity("boxdr",0x250C);  entity("boxdR",0x2552);  entity("boxDr",0x2553);  entity("boxDR",0x2554);  entity("boxh",0x2500);  entity("boxH",0x2550);  entity("boxhd",0x252C);  entity("boxhD",0x2565);  entity("boxHd",0x2564);  entity("boxHD",0x2566);  entity("boxhu",0x2534);  entity("boxhU",0x2568);  entity("boxHu",0x2567);  entity("boxHU",0x2569);  entity("boxminus",0x229F);  entity("boxplus",0x229E);  entity("boxtimes",0x22A0);  entity("boxul",0x2518);  entity("boxuL",0x255B);  entity("boxUl",0x255C);  entity("boxUL",0x255D);  entity("boxur",0x2514);  entity("boxuR",0x2558);  entity("boxUr",0x2559);  entity("boxUR",0x255A);  entity("boxv",0x2502);  entity("boxV",0x2551);  entity("boxvh",0x253C);  entity("boxvH",0x256A);  entity("boxVh",0x256B);  entity("boxVH",0x256C);  entity("boxvl",0x2524);  entity("boxvL",0x2561);  entity("boxVl",0x2562);  entity("boxVL",0x2563);  entity("boxvr",0x251C);  entity("boxvR",0x255E);  entity("boxVr",0x255F);  entity("boxVR",0x2560);  entity("bprime",0x2035);  entity("breve",0x02D8);  entity("brvbar",0x00A6);  entity("bscr",0x1D4B7);  entity("Bscr",0x212C);  entity("bsemi",0x204F);  entity("bsim",0x223D);  entity("bsime",0x22CD);  entity("bsol",0x005C);  entity("bsolb",0x29C5);  entity("bull",0x2022);  entity("bullet",0x2022);  entity("bump",0x224E);  entity("bumpe",0x224F);  entity("bumpE",0x2AAE);  entity("bumpeq",0x224F);  entity("Bumpeq",0x224E);  entity("cacute",0x0107);  entity("Cacute",0x0106);  entity("cap",0x2229);  entity("Cap",0x22D2);  entity("capand",0x2A44);  entity("capbrcup",0x2A49);  entity("capcap",0x2A4B);  entity("capcup",0x2A47);  entity("capdot",0x2A40);  entity("CapitalDifferentialD",0x2145);  entity("caret",0x2041);  entity("caron",0x02C7);  entity("Cayleys",0x212D);  entity("ccaps",0x2A4D);  entity("ccaron",0x010D);  entity("Ccaron",0x010C);  entity("ccedil",0x00E7);  entity("Ccedil",0x00C7);  entity("ccirc",0x0109);  entity("Ccirc",0x0108);  entity("Cconint",0x2230);  entity("ccups",0x2A4C);  entity("ccupssm",0x2A50);  entity("cdot",0x010B);  entity("Cdot",0x010A);  entity("cedil",0x00B8);  entity("Cedilla",0x00B8);  entity("cemptyv",0x29B2);  entity("cent",0x00A2);  entity("centerdot",0x00B7);  entity("cfr",0x1D520);  entity("Cfr",0x212D);  entity("chcy",0x0447);  entity("CHcy",0x0427);  entity("check",0x2713);  entity("checkmark",0x2713);  entity("chi",0x03C7);  entity("Chi",0x03A7);  entity("cir",0x25CB);  entity("circ",0x02C6);  entity("circeq",0x2257);  entity("circlearrowleft",0x21BA);  entity("circlearrowright",0x21BB);  entity("circledast",0x229B);  entity("circledcirc",0x229A);  entity("circleddash",0x229D);  entity("CircleDot",0x2299);  entity("circledR",0x00AE);  entity("circledS",0x24C8);  entity("CircleMinus",0x2296);  entity("CirclePlus",0x2295);  entity("CircleTimes",0x2297);  entity("cire",0x2257);  entity("cirE",0x29C3);  entity("cirfnint",0x2A10);  entity("cirmid",0x2AEF);  entity("cirscir",0x29C2);  entity("ClockwiseContourIntegral",0x2232);  entity("CloseCurlyDoubleQuote",0x201D);  entity("CloseCurlyQuote",0x2019);  entity("clubs",0x2663);  entity("clubsuit",0x2663);  entity("colon",0x003A);  entity("Colon",0x2237);  entity("colone",0x2254);  entity("Colone",0x2A74);  entity("coloneq",0x2254);  entity("comma",0x002C);  entity("commat",0x0040);  entity("comp",0x2201);  entity("compfn",0x2218);  entity("complement",0x2201);  entity("complexes",0x2102);  entity("cong",0x2245);  entity("congdot",0x2A6D);  entity("Congruent",0x2261);  entity("conint",0x222E);  entity("Conint",0x222F);  entity("ContourIntegral",0x222E);  entity("copf",0x1D554);  entity("Copf",0x2102);  entity("coprod",0x2210);  entity("Coproduct",0x2210);  entity("copy",0x00A9);  entity("copysr",0x2117);  entity("CounterClockwiseContourIntegral",0x2233);  entity("crarr",0x21B5);  entity("cross",0x2717);  entity("Cross",0x2A2F);  entity("cscr",0x1D4B8);  entity("Cscr",0x1D49E);  entity("csub",0x2ACF);  entity("csube",0x2AD1);  entity("csup",0x2AD0);  entity("csupe",0x2AD2);  entity("ctdot",0x22EF);  entity("cudarrl",0x2938);  entity("cudarrr",0x2935);  entity("cuepr",0x22DE);  entity("cuesc",0x22DF);  entity("cularr",0x21B6);  entity("cularrp",0x293D);  entity("cup",0x222A);  entity("Cup",0x22D3);  entity("cupbrcap",0x2A48);  entity("cupcap",0x2A46);  entity("CupCap",0x224D);  entity("cupcup",0x2A4A);  entity("cupdot",0x228D);  entity("cupor",0x2A45);  entity("curarr",0x21B7);  entity("curarrm",0x293C);  entity("curlyeqprec",0x22DE);  entity("curlyeqsucc",0x22DF);  entity("curlyvee",0x22CE);  entity("curlywedge",0x22CF);  entity("curren",0x00A4);  entity("curvearrowleft",0x21B6);  entity("curvearrowright",0x21B7);  entity("cuvee",0x22CE);  entity("cuwed",0x22CF);  entity("cwconint",0x2232);  entity("cwint",0x2231);  entity("cylcty",0x232D);  entity("dagger",0x2020);  entity("Dagger",0x2021);  entity("daleth",0x2138);  entity("darr",0x2193);  entity("dArr",0x21D3);  entity("Darr",0x21A1);  entity("dash",0x2010);  entity("dashv",0x22A3);  entity("Dashv",0x2AE4);  entity("dbkarow",0x290F);  entity("dblac",0x02DD);  entity("dcaron",0x010F);  entity("Dcaron",0x010E);  entity("dcy",0x0434);  entity("Dcy",0x0414);  entity("dd",0x2146);  entity("DD",0x2145);  entity("ddagger",0x2021);  entity("ddarr",0x21CA);  entity("DDotrahd",0x2911);  entity("ddotseq",0x2A77);  entity("deg",0x00B0);  entity("Del",0x2207);  entity("delta",0x03B4);  entity("Delta",0x0394);  entity("demptyv",0x29B1);  entity("dfisht",0x297F);  entity("dfr",0x1D521);  entity("Dfr",0x1D507);  entity("dgr",0x03B4);  entity("Dgr",0x0394);  entity("dHar",0x2965);  entity("dharl",0x21C3);  entity("dharr",0x21C2);  entity("DiacriticalAcute",0x00B4);  entity("DiacriticalDot",0x02D9);  entity("DiacriticalDoubleAcute",0x02DD);  entity("DiacriticalGrave",0x0060);  entity("DiacriticalTilde",0x02DC);  entity("diam",0x22C4);  entity("diamond",0x22C4);  entity("diamondsuit",0x2666);  entity("diams",0x2666);  entity("die",0x00A8);  entity("DifferentialD",0x2146);  entity("digamma",0x03DD);  entity("disin",0x22F2);  entity("div",0x00F7);  entity("divide",0x00F7);  entity("divideontimes",0x22C7);  entity("divonx",0x22C7);  entity("djcy",0x0452);  entity("DJcy",0x0402);  entity("dlcorn",0x231E);  entity("dlcrop",0x230D);  entity("dollar",0x0024);  entity("dopf",0x1D555);  entity("Dopf",0x1D53B);  entity("dot",0x02D9);  entity("Dot",0x00A8);  entity("doteq",0x2250);  entity("doteqdot",0x2251);  entity("DotEqual",0x2250);  entity("dotminus",0x2238);  entity("dotplus",0x2214);  entity("dotsquare",0x22A1);  entity("doublebarwedge",0x2306);  entity("DoubleContourIntegral",0x222F);  entity("DoubleDot",0x00A8);  entity("DoubleDownArrow",0x21D3);  entity("DoubleLeftArrow",0x21D0);  entity("DoubleLeftRightArrow",0x21D4);  entity("DoubleLeftTee",0x2AE4);  entity("DoubleLongLeftArrow",0x27F8);  entity("DoubleLongLeftRightArrow",0x27FA);  entity("DoubleLongRightArrow",0x27F9);  entity("DoubleRightArrow",0x21D2);  entity("DoubleRightTee",0x22A8);  entity("DoubleUpArrow",0x21D1);  entity("DoubleUpDownArrow",0x21D5);  entity("DoubleVerticalBar",0x2225);  entity("downarrow",0x2193);  entity("Downarrow",0x21D3);  entity("DownArrowBar",0x2913);  entity("DownArrowUpArrow",0x21F5);  entity("downdownarrows",0x21CA);  entity("downharpoonleft",0x21C3);  entity("downharpoonright",0x21C2);  entity("DownLeftRightVector",0x2950);  entity("DownLeftTeeVector",0x295E);  entity("DownLeftVector",0x21BD);  entity("DownLeftVectorBar",0x2956);  entity("DownRightTeeVector",0x295F);  entity("DownRightVector",0x21C1);  entity("DownRightVectorBar",0x2957);  entity("DownTee",0x22A4);  entity("DownTeeArrow",0x21A7);  entity("drbkarow",0x2910);  entity("drcorn",0x231F);  entity("drcrop",0x230C);  entity("dscr",0x1D4B9);  entity("Dscr",0x1D49F);  entity("dscy",0x0455);  entity("DScy",0x0405);  entity("dsol",0x29F6);  entity("dstrok",0x0111);  entity("Dstrok",0x0110);  entity("dtdot",0x22F1);  entity("dtri",0x25BF);  entity("dtrif",0x25BE);  entity("duarr",0x21F5);  entity("duhar",0x296F);  entity("dwangle",0x29A6);  entity("dzcy",0x045F);  entity("DZcy",0x040F);  entity("dzigrarr",0x27FF);  entity("eacgr",0x03AD);  entity("Eacgr",0x0388);  entity("eacute",0x00E9);  entity("Eacute",0x00C9);  entity("easter",0x2A6E);  entity("ecaron",0x011B);  entity("Ecaron",0x011A);  entity("ecir",0x2256);  entity("ecirc",0x00EA);  entity("Ecirc",0x00CA);  entity("ecolon",0x2255);  entity("ecy",0x044D);  entity("Ecy",0x042D);  entity("eDDot",0x2A77);  entity("edot",0x0117);  entity("eDot",0x2251);  entity("Edot",0x0116);  entity("ee",0x2147);  entity("eeacgr",0x03AE);  entity("EEacgr",0x0389);  entity("eegr",0x03B7);  entity("EEgr",0x0397);  entity("efDot",0x2252);  entity("efr",0x1D522);  entity("Efr",0x1D508);  entity("eg",0x2A9A);  entity("egr",0x03B5);  entity("Egr",0x0395);  entity("egrave",0x00E8);  entity("Egrave",0x00C8);  entity("egs",0x2A96);  entity("egsdot",0x2A98);  entity("el",0x2A99);  entity("Element",0x2208);  entity("elinters",0x23E7);  entity("ell",0x2113);  entity("els",0x2A95);  entity("elsdot",0x2A97);  entity("emacr",0x0113);  entity("Emacr",0x0112);  entity("empty",0x2205);  entity("emptyset",0x2205);  entity("EmptySmallSquare",0x25FB);  entity("emptyv",0x2205);  entity("EmptyVerySmallSquare",0x25AB);  entity("emsp",0x2003);  entity("emsp13",0x2004);  entity("emsp14",0x2005);  entity("eng",0x014B);  entity("ENG",0x014A);  entity("ensp",0x2002);  entity("eogon",0x0119);  entity("Eogon",0x0118);  entity("eopf",0x1D556);  entity("Eopf",0x1D53C);  entity("epar",0x22D5);  entity("eparsl",0x29E3);  entity("eplus",0x2A71);  entity("epsi",0x03F5);  entity("epsilon",0x03B5);  entity("Epsilon",0x0395);  entity("epsiv",0x03B5);  entity("eqcirc",0x2256);  entity("eqcolon",0x2255);  entity("eqsim",0x2242);  entity("eqslantgtr",0x2A96);  entity("eqslantless",0x2A95);  entity("Equal",0x2A75);  entity("equals",0x003D);  entity("EqualTilde",0x2242);  entity("equest",0x225F);  entity("Equilibrium",0x21CC);  entity("equiv",0x2261);  entity("equivDD",0x2A78);  entity("eqvparsl",0x29E5);  entity("erarr",0x2971);  entity("erDot",0x2253);  entity("escr",0x212F);  entity("Escr",0x2130);  entity("esdot",0x2250);  entity("esim",0x2242);  entity("Esim",0x2A73);  entity("eta",0x03B7);  entity("Eta",0x0397);  entity("eth",0x00F0);  entity("ETH",0x00D0);  entity("euml",0x00EB);  entity("Euml",0x00CB);  entity("euro",0x20AC);  entity("excl",0x0021);  entity("exist",0x2203);  entity("Exists",0x2203);  entity("expectation",0x2130);  entity("exponentiale",0x2147);  entity("fallingdotseq",0x2252);  entity("fcy",0x0444);  entity("Fcy",0x0424);  entity("female",0x2640);  entity("ffilig",0xFB03);  entity("fflig",0xFB00);  entity("ffllig",0xFB04);  entity("ffr",0x1D523);  entity("Ffr",0x1D509);  entity("filig",0xFB01);  entity("FilledSmallSquare",0x25FC);  entity("FilledVerySmallSquare",0x25AA);  entity("flat",0x266D);  entity("fllig",0xFB02);  entity("fltns",0x25B1);  entity("fnof",0x0192);  entity("fopf",0x1D557);  entity("Fopf",0x1D53D);  entity("forall",0x2200);  entity("fork",0x22D4);  entity("forkv",0x2AD9);  entity("Fouriertrf",0x2131);  entity("fpartint",0x2A0D);  entity("frac12",0x00BD);  entity("frac13",0x2153);  entity("frac14",0x00BC);  entity("frac15",0x2155);  entity("frac16",0x2159);  entity("frac18",0x215B);  entity("frac23",0x2154);  entity("frac25",0x2156);  entity("frac34",0x00BE);  entity("frac35",0x2157);  entity("frac38",0x215C);  entity("frac45",0x2158);  entity("frac56",0x215A);  entity("frac58",0x215D);  entity("frac78",0x215E);  entity("frasl",0x2044);  entity("frown",0x2322);  entity("fscr",0x1D4BB);  entity("Fscr",0x2131);  entity("gacute",0x01F5);  entity("gamma",0x03B3);  entity("Gamma",0x0393);  entity("gammad",0x03DD);  entity("Gammad",0x03DC);  entity("gap",0x2A86);  entity("gbreve",0x011F);  entity("Gbreve",0x011E);  entity("Gcedil",0x0122);  entity("gcirc",0x011D);  entity("Gcirc",0x011C);  entity("gcy",0x0433);  entity("Gcy",0x0413);  entity("gdot",0x0121);  entity("Gdot",0x0120);  entity("ge",0x2265);  entity("gE",0x2267);  entity("gel",0x22DB);  entity("gEl",0x2A8C);  entity("geq",0x2265);  entity("geqq",0x2267);  entity("geqslant",0x2A7E);  entity("ges",0x2A7E);  entity("gescc",0x2AA9);  entity("gesdot",0x2A80);  entity("gesdoto",0x2A82);  entity("gesdotol",0x2A84);  entity("gesles",0x2A94);  entity("gfr",0x1D524);  entity("Gfr",0x1D50A);  entity("gg",0x226B);  entity("Gg",0x22D9);  entity("ggg",0x22D9);  entity("ggr",0x03B3);  entity("Ggr",0x0393);  entity("gimel",0x2137);  entity("gjcy",0x0453);  entity("GJcy",0x0403);  entity("gl",0x2277);  entity("gla",0x2AA5);  entity("glE",0x2A92);  entity("glj",0x2AA4);  entity("gnap",0x2A8A);  entity("gnapprox",0x2A8A);  entity("gne",0x2A88);  entity("gnE",0x2269);  entity("gneq",0x2A88);  entity("gneqq",0x2269);  entity("gnsim",0x22E7);  entity("gopf",0x1D558);  entity("Gopf",0x1D53E);  entity("grave",0x0060);  entity("GreaterEqual",0x2265);  entity("GreaterEqualLess",0x22DB);  entity("GreaterFullEqual",0x2267);  entity("GreaterGreater",0x2AA2);  entity("GreaterLess",0x2277);  entity("GreaterSlantEqual",0x2A7E);  entity("GreaterTilde",0x2273);  entity("gscr",0x210A);  entity("Gscr",0x1D4A2);  entity("gsim",0x2273);  entity("gsime",0x2A8E);  entity("gsiml",0x2A90);  entity("gt",0x003E);  entity("Gt",0x226B);  entity("gtcc",0x2AA7);  entity("gtcir",0x2A7A);  entity("gtdot",0x22D7);  entity("gtlPar",0x2995);  entity("gtquest",0x2A7C);  entity("gtrapprox",0x2A86);  entity("gtrarr",0x2978);  entity("gtrdot",0x22D7);  entity("gtreqless",0x22DB);  entity("gtreqqless",0x2A8C);  entity("gtrless",0x2277);  entity("gtrsim",0x2273);  entity("Hacek",0x02C7);  entity("hairsp",0x200A);  entity("half",0x00BD);  entity("hamilt",0x210B);  entity("hardcy",0x044A);  entity("HARDcy",0x042A);  entity("harr",0x2194);  entity("hArr",0x21D4);  entity("harrcir",0x2948);  entity("harrw",0x21AD);  entity("Hat",0x005E);  entity("hbar",0x210F);  entity("hcirc",0x0125);  entity("Hcirc",0x0124);  entity("hearts",0x2665);  entity("heartsuit",0x2665);  entity("hellip",0x2026);  entity("hercon",0x22B9);  entity("hfr",0x1D525);  entity("Hfr",0x210C);  entity("HilbertSpace",0x210B);  entity("hksearow",0x2925);  entity("hkswarow",0x2926);  entity("hoarr",0x21FF);  entity("homtht",0x223B);  entity("hookleftarrow",0x21A9);  entity("hookrightarrow",0x21AA);  entity("hopf",0x1D559);  entity("Hopf",0x210D);  entity("horbar",0x2015);  entity("HorizontalLine",0x2500);  entity("hscr",0x1D4BD);  entity("Hscr",0x210B);  entity("hslash",0x210F);  entity("hstrok",0x0127);  entity("Hstrok",0x0126);  entity("HumpDownHump",0x224E);  entity("HumpEqual",0x224F);  entity("hybull",0x2043);  entity("hyphen",0x2010);  entity("iacgr",0x03AF);  entity("Iacgr",0x038A);  entity("iacute",0x00ED);  entity("Iacute",0x00CD);  entity("ic",0x2063);  entity("icirc",0x00EE);  entity("Icirc",0x00CE);  entity("icy",0x0438);  entity("Icy",0x0418);  entity("idiagr",0x0390);  entity("idigr",0x03CA);  entity("Idigr",0x03AA);  entity("Idot",0x0130);  entity("iecy",0x0435);  entity("IEcy",0x0415);  entity("iexcl",0x00A1);  entity("iff",0x21D4);  entity("ifr",0x1D526);  entity("Ifr",0x2111);  entity("igr",0x03B9);  entity("Igr",0x0399);  entity("igrave",0x00EC);  entity("Igrave",0x00CC);  entity("ii",0x2148);  entity("iiiint",0x2A0C);  entity("iiint",0x222D);  entity("iinfin",0x29DC);  entity("iiota",0x2129);  entity("ijlig",0x0133);  entity("IJlig",0x0132);  entity("Im",0x2111);  entity("imacr",0x012B);  entity("Imacr",0x012A);  entity("image",0x2111);  entity("ImaginaryI",0x2148);  entity("imagline",0x2110);  entity("imagpart",0x2111);  entity("imath",0x0131);  entity("imof",0x22B7);  entity("imped",0x01B5);  entity("Implies",0x21D2);  entity("in",0x2208);  entity("incare",0x2105);  entity("infin",0x221E);  entity("infintie",0x29DD);  entity("inodot",0x0131);  entity("int",0x222B);  entity("Int",0x222C);  entity("intcal",0x22BA);  entity("integers",0x2124);  entity("Integral",0x222B);  entity("intercal",0x22BA);  entity("Intersection",0x22C2);  entity("intlarhk",0x2A17);  entity("intprod",0x2A3C);  entity("InvisibleComma",0x2063);  entity("InvisibleTimes",0x2062);  entity("iocy",0x0451);  entity("IOcy",0x0401);  entity("iogon",0x012F);  entity("Iogon",0x012E);  entity("iopf",0x1D55A);  entity("Iopf",0x1D540);  entity("iota",0x03B9);  entity("Iota",0x0399);  entity("iprod",0x2A3C);  entity("iquest",0x00BF);  entity("iscr",0x1D4BE);  entity("Iscr",0x2110);  entity("isin",0x2208);  entity("isindot",0x22F5);  entity("isinE",0x22F9);  entity("isins",0x22F4);  entity("isinsv",0x22F3);  entity("isinv",0x2208);  entity("it",0x2062);  entity("itilde",0x0129);  entity("Itilde",0x0128);  entity("iukcy",0x0456);  entity("Iukcy",0x0406);  entity("iuml",0x00EF);  entity("Iuml",0x00CF);  entity("jcirc",0x0135);  entity("Jcirc",0x0134);  entity("jcy",0x0439);  entity("Jcy",0x0419);  entity("jfr",0x1D527);  entity("Jfr",0x1D50D);  entity("jmath",0x0237);  entity("jopf",0x1D55B);  entity("Jopf",0x1D541);  entity("jscr",0x1D4BF);  entity("Jscr",0x1D4A5);  entity("jsercy",0x0458);  entity("Jsercy",0x0408);  entity("jukcy",0x0454);  entity("Jukcy",0x0404);  entity("kappa",0x03BA);  entity("Kappa",0x039A);  entity("kappav",0x03F0);  entity("kcedil",0x0137);  entity("Kcedil",0x0136);  entity("kcy",0x043A);  entity("Kcy",0x041A);  entity("kfr",0x1D528);  entity("Kfr",0x1D50E);  entity("kgr",0x03BA);  entity("Kgr",0x039A);  entity("kgreen",0x0138);  entity("khcy",0x0445);  entity("KHcy",0x0425);  entity("khgr",0x03C7);  entity("KHgr",0x03A7);  entity("kjcy",0x045C);  entity("KJcy",0x040C);  entity("kopf",0x1D55C);  entity("Kopf",0x1D542);  entity("kscr",0x1D4C0);  entity("Kscr",0x1D4A6);  entity("lAarr",0x21DA);  entity("lacute",0x013A);  entity("Lacute",0x0139);  entity("laemptyv",0x29B4);  entity("lagran",0x2112);  entity("lambda",0x03BB);  entity("Lambda",0x039B);  entity("lang",0x2329);  entity("Lang",0x27EA);  entity("langd",0x2991);  entity("langle",0x2329);  entity("lap",0x2A85);  entity("Laplacetrf",0x2112);  entity("laquo",0x00AB);  entity("larr",0x2190);  entity("lArr",0x21D0);  entity("Larr",0x219E);  entity("larrb",0x21E4);  entity("larrbfs",0x291F);  entity("larrfs",0x291D);  entity("larrhk",0x21A9);  entity("larrlp",0x21AB);  entity("larrpl",0x2939);  entity("larrsim",0x2973);  entity("larrtl",0x21A2);  entity("lat",0x2AAB);  entity("latail",0x2919);  entity("lAtail",0x291B);  entity("late",0x2AAD);  entity("lbarr",0x290C);  entity("lBarr",0x290E);  entity("lbbrk",0x2997);  entity("lbrace",0x007B);  entity("lbrack",0x005B);  entity("lbrke",0x298B);  entity("lbrksld",0x298F);  entity("lbrkslu",0x298D);  entity("lcaron",0x013E);  entity("Lcaron",0x013D);  entity("lcedil",0x013C);  entity("Lcedil",0x013B);  entity("lceil",0x2308);  entity("lcub",0x007B);  entity("lcy",0x043B);  entity("Lcy",0x041B);  entity("ldca",0x2936);  entity("ldquo",0x201C);  entity("ldquor",0x201E);  entity("ldrdhar",0x2967);  entity("ldrushar",0x294B);  entity("ldsh",0x21B2);  entity("le",0x2264);  entity("lE",0x2266);  entity("LeftAngleBracket",0x2329);  entity("leftarrow",0x2190);  entity("Leftarrow",0x21D0);  entity("LeftArrowBar",0x21E4);  entity("LeftArrowRightArrow",0x21C6);  entity("leftarrowtail",0x21A2);  entity("LeftCeiling",0x2308);  entity("LeftDoubleBracket",0x27E6);  entity("LeftDownTeeVector",0x2961);  entity("LeftDownVector",0x21C3);  entity("LeftDownVectorBar",0x2959);  entity("LeftFloor",0x230A);  entity("leftharpoondown",0x21BD);  entity("leftharpoonup",0x21BC);  entity("leftleftarrows",0x21C7);  entity("leftrightarrow",0x2194);  entity("Leftrightarrow",0x21D4);  entity("leftrightarrows",0x21C6);  entity("leftrightharpoons",0x21CB);  entity("leftrightsquigarrow",0x21AD);  entity("LeftRightVector",0x294E);  entity("LeftTee",0x22A3);  entity("LeftTeeArrow",0x21A4);  entity("LeftTeeVector",0x295A);  entity("leftthreetimes",0x22CB);  entity("LeftTriangle",0x22B2);  entity("LeftTriangleBar",0x29CF);  entity("LeftTriangleEqual",0x22B4);  entity("LeftUpDownVector",0x2951);  entity("LeftUpTeeVector",0x2960);  entity("LeftUpVector",0x21BF);  entity("LeftUpVectorBar",0x2958);  entity("LeftVector",0x21BC);  entity("LeftVectorBar",0x2952);  entity("leg",0x22DA);  entity("lEg",0x2A8B);  entity("leq",0x2264);  entity("leqq",0x2266);  entity("leqslant",0x2A7D);  entity("les",0x2A7D);  entity("lescc",0x2AA8);  entity("lesdot",0x2A7F);  entity("lesdoto",0x2A81);  entity("lesdotor",0x2A83);  entity("lesges",0x2A93);  entity("lessapprox",0x2A85);  entity("lessdot",0x22D6);  entity("lesseqgtr",0x22DA);  entity("lesseqqgtr",0x2A8B);  entity("LessEqualGreater",0x22DA);  entity("LessFullEqual",0x2266);  entity("LessGreater",0x2276);  entity("lessgtr",0x2276);  entity("LessLess",0x2AA1);  entity("lesssim",0x2272);  entity("LessSlantEqual",0x2A7D);  entity("LessTilde",0x2272);  entity("lfisht",0x297C);  entity("lfloor",0x230A);  entity("lfr",0x1D529);  entity("Lfr",0x1D50F);  entity("lg",0x2276);  entity("lgE",0x2A91);  entity("lgr",0x03BB);  entity("Lgr",0x039B);  entity("lHar",0x2962);  entity("lhard",0x21BD);  entity("lharu",0x21BC);  entity("lharul",0x296A);  entity("lhblk",0x2584);  entity("ljcy",0x0459);  entity("LJcy",0x0409);  entity("ll",0x226A);  entity("Ll",0x22D8);  entity("llarr",0x21C7);  entity("llcorner",0x231E);  entity("Lleftarrow",0x21DA);  entity("llhard",0x296B);  entity("lltri",0x25FA);  entity("lmidot",0x0140);  entity("Lmidot",0x013F);  entity("lmoust",0x23B0);  entity("lmoustache",0x23B0);  entity("lnap",0x2A89);  entity("lnapprox",0x2A89);  entity("lne",0x2A87);  entity("lnE",0x2268);  entity("lneq",0x2A87);  entity("lneqq",0x2268);  entity("lnsim",0x22E6);  entity("loang",0x27EC);  entity("loarr",0x21FD);  entity("lobrk",0x27E6);  entity("longleftarrow",0x27F5);  entity("Longleftarrow",0x27F8);  entity("longleftrightarrow",0x27F7);  entity("Longleftrightarrow",0x27FA);  entity("longmapsto",0x27FC);  entity("longrightarrow",0x27F6);  entity("Longrightarrow",0x27F9);  entity("looparrowleft",0x21AB);  entity("looparrowright",0x21AC);  entity("lopar",0x2985);  entity("lopf",0x1D55D);  entity("Lopf",0x1D543);  entity("loplus",0x2A2D);  entity("lotimes",0x2A34);  entity("lowast",0x2217);  entity("lowbar",0x005F);  entity("LowerLeftArrow",0x2199);  entity("LowerRightArrow",0x2198);  entity("loz",0x25CA);  entity("lozenge",0x25CA);  entity("lozf",0x29EB);  entity("lpar",0x0028);  entity("lparlt",0x2993);  entity("lrarr",0x21C6);  entity("lrcorner",0x231F);  entity("lrhar",0x21CB);  entity("lrhard",0x296D);  entity("lrm",0x200E);  entity("lrtri",0x22BF);  entity("lsaquo",0x2039);  entity("lscr",0x1D4C1);  entity("Lscr",0x2112);  entity("lsh",0x21B0);  entity("lsim",0x2272);  entity("lsime",0x2A8D);  entity("lsimg",0x2A8F);  entity("lsqb",0x005B);  entity("lsquo",0x2018);  entity("lsquor",0x201A);  entity("lstrok",0x0142);  entity("Lstrok",0x0141);  entity("lt",0x003C);  entity("Lt",0x226A);  entity("ltcc",0x2AA6);  entity("ltcir",0x2A79);  entity("ltdot",0x22D6);  entity("lthree",0x22CB);  entity("ltimes",0x22C9);  entity("ltlarr",0x2976);  entity("ltquest",0x2A7B);  entity("ltri",0x25C3);  entity("ltrie",0x22B4);  entity("ltrif",0x25C2);  entity("ltrPar",0x2996);  entity("lurdshar",0x294A);  entity("luruhar",0x2966);  entity("macr",0x00AF);  entity("male",0x2642);  entity("malt",0x2720);  entity("maltese",0x2720);  entity("map",0x21A6);  entity("Map",0x2905);  entity("mapsto",0x21A6);  entity("mapstodown",0x21A7);  entity("mapstoleft",0x21A4);  entity("mapstoup",0x21A5);  entity("marker",0x25AE);  entity("mcomma",0x2A29);  entity("mcy",0x043C);  entity("Mcy",0x041C);  entity("mdash",0x2014);  entity("mDDot",0x223A);  entity("measuredangle",0x2221);  entity("MediumSpace",0x205F);  entity("Mellintrf",0x2133);  entity("mfr",0x1D52A);  entity("Mfr",0x1D510);  entity("mgr",0x03BC);  entity("Mgr",0x039C);  entity("mho",0x2127);  entity("micro",0x00B5);  entity("mid",0x2223);  entity("midast",0x002A);  entity("midcir",0x2AF0);  entity("middot",0x00B7);  entity("minus",0x2212);  entity("minusb",0x229F);  entity("minusd",0x2238);  entity("minusdu",0x2A2A);  entity("MinusPlus",0x2213);  entity("mlcp",0x2ADB);  entity("mldr",0x2026);  entity("mnplus",0x2213);  entity("models",0x22A7);  entity("mopf",0x1D55E);  entity("Mopf",0x1D544);  entity("mp",0x2213);  entity("mscr",0x1D4C2);  entity("Mscr",0x2133);  entity("mstpos",0x223E);  entity("mu",0x03BC);  entity("Mu",0x039C);  entity("multimap",0x22B8);  entity("mumap",0x22B8);  entity("nabla",0x2207);  entity("nacute",0x0144);  entity("Nacute",0x0143);  entity("nap",0x2249);  entity("napos",0x0149);  entity("napprox",0x2249);  entity("natur",0x266E);  entity("natural",0x266E);  entity("naturals",0x2115);  entity("nbsp",0x00A0);  entity("ncap",0x2A43);  entity("ncaron",0x0148);  entity("Ncaron",0x0147);  entity("ncedil",0x0146);  entity("Ncedil",0x0145);  entity("ncong",0x2247);  entity("ncup",0x2A42);  entity("ncy",0x043D);  entity("Ncy",0x041D);  entity("ndash",0x2013);  entity("ne",0x2260);  entity("nearhk",0x2924);  entity("nearr",0x2197);  entity("neArr",0x21D7);  entity("nearrow",0x2197);  entity("NegativeMediumSpace",0x200B);  entity("NegativeThickSpace",0x200B);  entity("NegativeThinSpace",0x200B);  entity("NegativeVeryThinSpace",0x200B);  entity("nequiv",0x2262);  entity("nesear",0x2928);  entity("NestedGreaterGreater",0x226B);  entity("NestedLessLess",0x226A);  entity("NewLine",0x000A);  entity("nexist",0x2204);  entity("nexists",0x2204);  entity("nfr",0x1D52B);  entity("Nfr",0x1D511);  entity("nge",0x2271);  entity("ngeq",0x2271);  entity("ngr",0x03BD);  entity("Ngr",0x039D);  entity("ngsim",0x2275);  entity("ngt",0x226F);  entity("ngtr",0x226F);  entity("nharr",0x21AE);  entity("nhArr",0x21CE);  entity("nhpar",0x2AF2);  entity("ni",0x220B);  entity("nis",0x22FC);  entity("nisd",0x22FA);  entity("niv",0x220B);  entity("njcy",0x045A);  entity("NJcy",0x040A);  entity("nlarr",0x219A);  entity("nlArr",0x21CD);  entity("nldr",0x2025);  entity("nle",0x2270);  entity("nleftarrow",0x219A);  entity("nLeftarrow",0x21CD);  entity("nleftrightarrow",0x21AE);  entity("nLeftrightarrow",0x21CE);  entity("nleq",0x2270);  entity("nless",0x226E);  entity("nlsim",0x2274);  entity("nlt",0x226E);  entity("nltri",0x22EA);  entity("nltrie",0x22EC);  entity("nmid",0x2224);  entity("NoBreak",0x2060);  entity("NonBreakingSpace",0x00A0);  entity("nopf",0x1D55F);  entity("Nopf",0x2115);  entity("not",0x00AC);  entity("Not",0x2AEC);  entity("NotCongruent",0x2262);  entity("NotCupCap",0x226D);  entity("NotDoubleVerticalBar",0x2226);  entity("NotElement",0x2209);  entity("NotEqual",0x2260);  entity("NotExists",0x2204);  entity("NotGreater",0x226F);  entity("NotGreaterEqual",0x2271);  entity("NotGreaterLess",0x2279);  entity("NotGreaterTilde",0x2275);  entity("notin",0x2209);  entity("notinva",0x2209);  entity("notinvb",0x22F7);  entity("notinvc",0x22F6);  entity("NotLeftTriangle",0x22EA);  entity("NotLeftTriangleEqual",0x22EC);  entity("NotLess",0x226E);  entity("NotLessEqual",0x2270);  entity("NotLessGreater",0x2278);  entity("NotLessTilde",0x2274);  entity("notni",0x220C);  entity("notniva",0x220C);  entity("notnivb",0x22FE);  entity("notnivc",0x22FD);  entity("NotPrecedes",0x2280);  entity("NotPrecedesSlantEqual",0x22E0);  entity("NotReverseElement",0x220C);  entity("NotRightTriangle",0x22EB);  entity("NotRightTriangleEqual",0x22ED);  entity("NotSquareSubsetEqual",0x22E2);  entity("NotSquareSupersetEqual",0x22E3);  entity("NotSubsetEqual",0x2288);  entity("NotSucceeds",0x2281);  entity("NotSucceedsSlantEqual",0x22E1);  entity("NotSupersetEqual",0x2289);  entity("NotTilde",0x2241);  entity("NotTildeEqual",0x2244);  entity("NotTildeFullEqual",0x2247);  entity("NotTildeTilde",0x2249);  entity("NotVerticalBar",0x2224);  entity("npar",0x2226);  entity("nparallel",0x2226);  entity("npolint",0x2A14);  entity("npr",0x2280);  entity("nprcue",0x22E0);  entity("nprec",0x2280);  entity("nrarr",0x219B);  entity("nrArr",0x21CF);  entity("nrightarrow",0x219B);  entity("nRightarrow",0x21CF);  entity("nrtri",0x22EB);  entity("nrtrie",0x22ED);  entity("nsc",0x2281);  entity("nsccue",0x22E1);  entity("nscr",0x1D4C3);  entity("Nscr",0x1D4A9);  entity("nshortmid",0x2224);  entity("nshortparallel",0x2226);  entity("nsim",0x2241);  entity("nsime",0x2244);  entity("nsimeq",0x2244);  entity("nsmid",0x2224);  entity("nspar",0x2226);  entity("nsqsube",0x22E2);  entity("nsqsupe",0x22E3);  entity("nsub",0x2284);  entity("nsube",0x2288);  entity("nsubseteq",0x2288);  entity("nsucc",0x2281);  entity("nsup",0x2285);  entity("nsupe",0x2289);  entity("nsupseteq",0x2289);  entity("ntgl",0x2279);  entity("ntilde",0x00F1);  entity("Ntilde",0x00D1);  entity("ntlg",0x2278);  entity("ntriangleleft",0x22EA);  entity("ntrianglelefteq",0x22EC);  entity("ntriangleright",0x22EB);  entity("ntrianglerighteq",0x22ED);  entity("nu",0x03BD);  entity("Nu",0x039D);  entity("num",0x0023);  entity("numero",0x2116);  entity("numsp",0x2007);  entity("nvdash",0x22AC);  entity("nvDash",0x22AD);  entity("nVdash",0x22AE);  entity("nVDash",0x22AF);  entity("nvHarr",0x2904);  entity("nvinfin",0x29DE);  entity("nvlArr",0x2902);  entity("nvrArr",0x2903);  entity("nwarhk",0x2923);  entity("nwarr",0x2196);  entity("nwArr",0x21D6);  entity("nwarrow",0x2196);  entity("nwnear",0x2927);  entity("oacgr",0x03CC);  entity("Oacgr",0x038C);  entity("oacute",0x00F3);  entity("Oacute",0x00D3);  entity("oast",0x229B);  entity("ocir",0x229A);  entity("ocirc",0x00F4);  entity("Ocirc",0x00D4);  entity("ocy",0x043E);  entity("Ocy",0x041E);  entity("odash",0x229D);  entity("odblac",0x0151);  entity("Odblac",0x0150);  entity("odiv",0x2A38);  entity("odot",0x2299);  entity("odsold",0x29BC);  entity("oelig",0x0153);  entity("OElig",0x0152);  entity("ofcir",0x29BF);  entity("ofr",0x1D52C);  entity("Ofr",0x1D512);  entity("ogon",0x02DB);  entity("ogr",0x03BF);  entity("Ogr",0x039F);  entity("ograve",0x00F2);  entity("Ograve",0x00D2);  entity("ogt",0x29C1);  entity("ohacgr",0x03CE);  entity("OHacgr",0x038F);  entity("ohbar",0x29B5);  entity("ohgr",0x03C9);  entity("OHgr",0x03A9);  entity("ohm",0x2126);  entity("oint",0x222E);  entity("olarr",0x21BA);  entity("olcir",0x29BE);  entity("olcross",0x29BB);  entity("oline",0x203E);  entity("olt",0x29C0);  entity("omacr",0x014D);  entity("Omacr",0x014C);  entity("omega",0x03C9);  entity("Omega",0x03A9);  entity("omicron",0x03BF);  entity("Omicron",0x039F);  entity("omid",0x29B6);  entity("ominus",0x2296);  entity("oopf",0x1D560);  entity("Oopf",0x1D546);  entity("opar",0x29B7);  entity("OpenCurlyDoubleQuote",0x201C);  entity("OpenCurlyQuote",0x2018);  entity("operp",0x29B9);  entity("oplus",0x2295);  entity("or",0x2228);  entity("Or",0x2A54);  entity("orarr",0x21BB);  entity("ord",0x2A5D);  entity("order",0x2134);  entity("orderof",0x2134);  entity("ordf",0x00AA);  entity("ordm",0x00BA);  entity("origof",0x22B6);  entity("oror",0x2A56);  entity("orslope",0x2A57);  entity("orv",0x2A5B);  entity("oS",0x24C8);  entity("oscr",0x2134);  entity("Oscr",0x1D4AA);  entity("oslash",0x00F8);  entity("Oslash",0x00D8);  entity("osol",0x2298);  entity("otilde",0x00F5);  entity("Otilde",0x00D5);  entity("otimes",0x2297);  entity("Otimes",0x2A37);  entity("otimesas",0x2A36);  entity("ouml",0x00F6);  entity("Ouml",0x00D6);  entity("ovbar",0x233D);  entity("OverBar",0x00AF);  entity("OverBrace",0xFE37);  entity("OverBracket",0x23B4);  entity("OverParenthesis",0xFE35);  entity("par",0x2225);  entity("para",0x00B6);  entity("parallel",0x2225);  entity("parsim",0x2AF3);  entity("parsl",0x2AFD);  entity("part",0x2202);  entity("PartialD",0x2202);  entity("pcy",0x043F);  entity("Pcy",0x041F);  entity("percnt",0x0025);  entity("period",0x002E);  entity("permil",0x2030);  entity("perp",0x22A5);  entity("pertenk",0x2031);  entity("pfr",0x1D52D);  entity("Pfr",0x1D513);  entity("pgr",0x03C0);  entity("Pgr",0x03A0);  entity("phgr",0x03C6);  entity("PHgr",0x03A6);  entity("phi",0x03D5);  entity("Phi",0x03A6);  entity("phiv",0x03C6);  entity("phmmat",0x2133);  entity("phone",0x260E);  entity("pi",0x03C0);  entity("Pi",0x03A0);  entity("pitchfork",0x22D4);  entity("piv",0x03D6);  entity("planck",0x210F);  entity("planckh",0x210E);  entity("plankv",0x210F);  entity("plus",0x002B);  entity("plusacir",0x2A23);  entity("plusb",0x229E);  entity("pluscir",0x2A22);  entity("plusdo",0x2214);  entity("plusdu",0x2A25);  entity("pluse",0x2A72);  entity("PlusMinus",0x00B1);  entity("plusmn",0x00B1);  entity("plussim",0x2A26);  entity("plustwo",0x2A27);  entity("pm",0x00B1);  entity("Poincareplane",0x210C);  entity("pointint",0x2A15);  entity("popf",0x1D561);  entity("Popf",0x2119);  entity("pound",0x00A3);  entity("pr",0x227A);  entity("Pr",0x2ABB);  entity("prap",0x2AB7);  entity("prcue",0x227C);  entity("pre",0x2AAF);  entity("prE",0x2AB3);  entity("prec",0x227A);  entity("precapprox",0x2AB7);  entity("preccurlyeq",0x227C);  entity("Precedes",0x227A);  entity("PrecedesEqual",0x2AAF);  entity("PrecedesSlantEqual",0x227C);  entity("PrecedesTilde",0x227E);  entity("preceq",0x2AAF);  entity("precnapprox",0x2AB9);  entity("precneqq",0x2AB5);  entity("precnsim",0x22E8);  entity("precsim",0x227E);  entity("prime",0x2032);  entity("Prime",0x2033);  entity("primes",0x2119);  entity("prnap",0x2AB9);  entity("prnE",0x2AB5);  entity("prnsim",0x22E8);  entity("prod",0x220F);  entity("Product",0x220F);  entity("profalar",0x232E);  entity("profline",0x2312);  entity("profsurf",0x2313);  entity("prop",0x221D);  entity("Proportion",0x2237);  entity("Proportional",0x221D);  entity("propto",0x221D);  entity("prsim",0x227E);  entity("prurel",0x22B0);  entity("pscr",0x1D4C5);  entity("Pscr",0x1D4AB);  entity("psgr",0x03C8);  entity("PSgr",0x03A8);  entity("psi",0x03C8);  entity("Psi",0x03A8);  entity("puncsp",0x2008);  entity("qfr",0x1D52E);  entity("Qfr",0x1D514);  entity("qint",0x2A0C);  entity("qopf",0x1D562);  entity("Qopf",0x211A);  entity("qprime",0x2057);  entity("qscr",0x1D4C6);  entity("Qscr",0x1D4AC);  entity("quaternions",0x210D);  entity("quatint",0x2A16);  entity("quest",0x003F);  entity("questeq",0x225F);  entity("quot",0x0022);  entity("rAarr",0x21DB);  entity("race",0x29DA);  entity("racute",0x0155);  entity("Racute",0x0154);  entity("radic",0x221A);  entity("raemptyv",0x29B3);  entity("rang",0x232A);  entity("Rang",0x27EB);  entity("rangd",0x2992);  entity("range",0x29A5);  entity("rangle",0x232A);  entity("raquo",0x00BB);  entity("rarr",0x2192);  entity("rArr",0x21D2);  entity("Rarr",0x21A0);  entity("rarrap",0x2975);  entity("rarrb",0x21E5);  entity("rarrbfs",0x2920);  entity("rarrc",0x2933);  entity("rarrfs",0x291E);  entity("rarrhk",0x21AA);  entity("rarrlp",0x21AC);  entity("rarrpl",0x2945);  entity("rarrsim",0x2974);  entity("rarrtl",0x21A3);  entity("Rarrtl",0x2916);  entity("rarrw",0x219D);  entity("ratail",0x291A);  entity("rAtail",0x291C);  entity("ratio",0x2236);  entity("rationals",0x211A);  entity("rbarr",0x290D);  entity("rBarr",0x290F);  entity("RBarr",0x2910);  entity("rbbrk",0x2998);  entity("rbrace",0x007D);  entity("rbrack",0x005D);  entity("rbrke",0x298C);  entity("rbrksld",0x298E);  entity("rbrkslu",0x2990);  entity("rcaron",0x0159);  entity("Rcaron",0x0158);  entity("rcedil",0x0157);  entity("Rcedil",0x0156);  entity("rceil",0x2309);  entity("rcub",0x007D);  entity("rcy",0x0440);  entity("Rcy",0x0420);  entity("rdca",0x2937);  entity("rdldhar",0x2969);  entity("rdquo",0x201D);  entity("rdquor",0x201D);  entity("rdsh",0x21B3);  entity("Re",0x211C);  entity("real",0x211C);  entity("realine",0x211B);  entity("realpart",0x211C);  entity("reals",0x211D);  entity("rect",0x25AD);  entity("reg",0x00AE);  entity("ReverseElement",0x220B);  entity("ReverseEquilibrium",0x21CB);  entity("ReverseUpEquilibrium",0x296F);  entity("rfisht",0x297D);  entity("rfloor",0x230B);  entity("rfr",0x1D52F);  entity("Rfr",0x211C);  entity("rgr",0x03C1);  entity("Rgr",0x03A1);  entity("rHar",0x2964);  entity("rhard",0x21C1);  entity("rharu",0x21C0);  entity("rharul",0x296C);  entity("rho",0x03C1);  entity("Rho",0x03A1);  entity("rhov",0x03F1);  entity("RightAngleBracket",0x232A);  entity("rightarrow",0x2192);  entity("Rightarrow",0x21D2);  entity("RightArrowBar",0x21E5);  entity("RightArrowLeftArrow",0x21C4);  entity("rightarrowtail",0x21A3);  entity("RightCeiling",0x2309);  entity("RightDoubleBracket",0x27E7);  entity("RightDownTeeVector",0x295D);  entity("RightDownVector",0x21C2);  entity("RightDownVectorBar",0x2955);  entity("RightFloor",0x230B);  entity("rightharpoondown",0x21C1);  entity("rightharpoonup",0x21C0);  entity("rightleftarrows",0x21C4);  entity("rightleftharpoons",0x21CC);  entity("rightrightarrows",0x21C9);  entity("rightsquigarrow",0x219D);  entity("RightTee",0x22A2);  entity("RightTeeArrow",0x21A6);  entity("RightTeeVector",0x295B);  entity("rightthreetimes",0x22CC);  entity("RightTriangle",0x22B3);  entity("RightTriangleBar",0x29D0);  entity("RightTriangleEqual",0x22B5);  entity("RightUpDownVector",0x294F);  entity("RightUpTeeVector",0x295C);  entity("RightUpVector",0x21BE);  entity("RightUpVectorBar",0x2954);  entity("RightVector",0x21C0);  entity("RightVectorBar",0x2953);  entity("ring",0x02DA);  entity("risingdotseq",0x2253);  entity("rlarr",0x21C4);  entity("rlhar",0x21CC);  entity("rlm",0x200F);  entity("rmoust",0x23B1);  entity("rmoustache",0x23B1);  entity("rnmid",0x2AEE);  entity("roang",0x27ED);  entity("roarr",0x21FE);  entity("robrk",0x27E7);  entity("ropar",0x2986);  entity("ropf",0x1D563);  entity("Ropf",0x211D);  entity("roplus",0x2A2E);  entity("rotimes",0x2A35);  entity("RoundImplies",0x2970);  entity("rpar",0x0029);  entity("rpargt",0x2994);  entity("rppolint",0x2A12);  entity("rrarr",0x21C9);  entity("Rrightarrow",0x21DB);  entity("rsaquo",0x203A);  entity("rscr",0x1D4C7);  entity("Rscr",0x211B);  entity("rsh",0x21B1);  entity("rsqb",0x005D);  entity("rsquo",0x2019);  entity("rsquor",0x2019);  entity("rthree",0x22CC);  entity("rtimes",0x22CA);  entity("rtri",0x25B9);  entity("rtrie",0x22B5);  entity("rtrif",0x25B8);  entity("rtriltri",0x29CE);  entity("RuleDelayed",0x29F4);  entity("ruluhar",0x2968);  entity("rx",0x211E);  entity("sacute",0x015B);  entity("Sacute",0x015A);  entity("sbquo",0x201A);  entity("sc",0x227B);  entity("Sc",0x2ABC);  entity("scap",0x2AB8);  entity("scaron",0x0161);  entity("Scaron",0x0160);  entity("sccue",0x227D);  entity("sce",0x2AB0);  entity("scE",0x2AB4);  entity("scedil",0x015F);  entity("Scedil",0x015E);  entity("scirc",0x015D);  entity("Scirc",0x015C);  entity("scnap",0x2ABA);  entity("scnE",0x2AB6);  entity("scnsim",0x22E9);  entity("scpolint",0x2A13);  entity("scsim",0x227F);  entity("scy",0x0441);  entity("Scy",0x0421);  entity("sdot",0x22C5);  entity("sdotb",0x22A1);  entity("sdote",0x2A66);  entity("searhk",0x2925);  entity("searr",0x2198);  entity("seArr",0x21D8);  entity("searrow",0x2198);  entity("sect",0x00A7);  entity("semi",0x003B);  entity("seswar",0x2929);  entity("setminus",0x2216);  entity("setmn",0x2216);  entity("sext",0x2736);  entity("sfgr",0x03C2);  entity("sfr",0x1D530);  entity("Sfr",0x1D516);  entity("sfrown",0x2322);  entity("sgr",0x03C3);  entity("Sgr",0x03A3);  entity("sharp",0x266F);  entity("shchcy",0x0449);  entity("SHCHcy",0x0429);  entity("shcy",0x0448);  entity("SHcy",0x0428);  entity("ShortDownArrow",0x2193);  entity("ShortLeftArrow",0x2190);  entity("shortmid",0x2223);  entity("shortparallel",0x2225);  entity("ShortRightArrow",0x2192);  entity("ShortUpArrow",0x2191);  entity("shy",0x00AD);  entity("sigma",0x03C3);  entity("Sigma",0x03A3);  entity("sigmaf",0x03C2);  entity("sigmav",0x03C2);  entity("sim",0x223C);  entity("simdot",0x2A6A);  entity("sime",0x2243);  entity("simeq",0x2243);  entity("simg",0x2A9E);  entity("simgE",0x2AA0);  entity("siml",0x2A9D);  entity("simlE",0x2A9F);  entity("simne",0x2246);  entity("simplus",0x2A24);  entity("simrarr",0x2972);  entity("slarr",0x2190);  entity("SmallCircle",0x2218);  entity("smallsetminus",0x2216);  entity("smashp",0x2A33);  entity("smeparsl",0x29E4);  entity("smid",0x2223);  entity("smile",0x2323);  entity("smt",0x2AAA);  entity("smte",0x2AAC);  entity("softcy",0x044C);  entity("SOFTcy",0x042C);  entity("sol",0x002F);  entity("solb",0x29C4);  entity("solbar",0x233F);  entity("sopf",0x1D564);  entity("Sopf",0x1D54A);  entity("spades",0x2660);  entity("spadesuit",0x2660);  entity("spar",0x2225);  entity("sqcap",0x2293);  entity("sqcup",0x2294);  entity("Sqrt",0x221A);  entity("sqsub",0x228F);  entity("sqsube",0x2291);  entity("sqsubset",0x228F);  entity("sqsubseteq",0x2291);  entity("sqsup",0x2290);  entity("sqsupe",0x2292);  entity("sqsupset",0x2290);  entity("sqsupseteq",0x2292);  entity("squ",0x25A1);  entity("square",0x25A1);  entity("SquareIntersection",0x2293);  entity("SquareSubset",0x228F);  entity("SquareSubsetEqual",0x2291);  entity("SquareSuperset",0x2290);  entity("SquareSupersetEqual",0x2292);  entity("SquareUnion",0x2294);  entity("squarf",0x25AA);  entity("squf",0x25AA);  entity("srarr",0x2192);  entity("sscr",0x1D4C8);  entity("Sscr",0x1D4AE);  entity("ssetmn",0x2216);  entity("ssmile",0x2323);  entity("sstarf",0x22C6);  entity("star",0x2606);  entity("Star",0x22C6);  entity("starf",0x2605);  entity("straightepsilon",0x03F5);  entity("straightphi",0x03D5);  entity("strns",0x00AF);  entity("sub",0x2282);  entity("Sub",0x22D0);  entity("subdot",0x2ABD);  entity("sube",0x2286);  entity("subE",0x2AC5);  entity("subedot",0x2AC3);  entity("submult",0x2AC1);  entity("subne",0x228A);  entity("subnE",0x2ACB);  entity("subplus",0x2ABF);  entity("subrarr",0x2979);  entity("subset",0x2282);  entity("Subset",0x22D0);  entity("subseteq",0x2286);  entity("subseteqq",0x2AC5);  entity("SubsetEqual",0x2286);  entity("subsetneq",0x228A);  entity("subsetneqq",0x2ACB);  entity("subsim",0x2AC7);  entity("subsub",0x2AD5);  entity("subsup",0x2AD3);  entity("succ",0x227B);  entity("succapprox",0x2AB8);  entity("succcurlyeq",0x227D);  entity("Succeeds",0x227B);  entity("SucceedsEqual",0x2AB0);  entity("SucceedsSlantEqual",0x227D);  entity("SucceedsTilde",0x227F);  entity("succeq",0x2AB0);  entity("succnapprox",0x2ABA);  entity("succneqq",0x2AB6);  entity("succnsim",0x22E9);  entity("succsim",0x227F);  entity("SuchThat",0x220B);  entity("sum",0x2211);  entity("sung",0x266A);  entity("sup",0x2283);  entity("Sup",0x22D1);  entity("sup1",0x00B9);  entity("sup2",0x00B2);  entity("sup3",0x00B3);  entity("supdot",0x2ABE);  entity("supdsub",0x2AD8);  entity("supe",0x2287);  entity("supE",0x2AC6);  entity("supedot",0x2AC4);  entity("Superset",0x2283);  entity("SupersetEqual",0x2287);  entity("suphsub",0x2AD7);  entity("suplarr",0x297B);  entity("supmult",0x2AC2);  entity("supne",0x228B);  entity("supnE",0x2ACC);  entity("supplus",0x2AC0);  entity("supset",0x2283);  entity("Supset",0x22D1);  entity("supseteq",0x2287);  entity("supseteqq",0x2AC6);  entity("supsetneq",0x228B);  entity("supsetneqq",0x2ACC);  entity("supsim",0x2AC8);  entity("supsub",0x2AD4);  entity("supsup",0x2AD6);  entity("swarhk",0x2926);  entity("swarr",0x2199);  entity("swArr",0x21D9);  entity("swarrow",0x2199);  entity("swnwar",0x292A);  entity("szlig",0x00DF);  entity("Tab",0x0009);  entity("target",0x2316);  entity("tau",0x03C4);  entity("Tau",0x03A4);  entity("tbrk",0x23B4);  entity("tcaron",0x0165);  entity("Tcaron",0x0164);  entity("tcedil",0x0163);  entity("Tcedil",0x0162);  entity("tcy",0x0442);  entity("Tcy",0x0422);  entity("telrec",0x2315);  entity("tfr",0x1D531);  entity("Tfr",0x1D517);  entity("tgr",0x03C4);  entity("Tgr",0x03A4);  entity("there4",0x2234);  entity("therefore",0x2234);  entity("theta",0x03B8);  entity("Theta",0x0398);  entity("thetasym",0x03D1);  entity("thetav",0x03D1);  entity("thgr",0x03B8);  entity("THgr",0x0398);  entity("thickapprox",0x2248);  entity("thicksim",0x223C);  entity("thinsp",0x2009);  entity("ThinSpace",0x2009);  entity("thkap",0x2248);  entity("thksim",0x223C);  entity("thorn",0x00FE);  entity("THORN",0x00DE);  entity("tilde",0x02DC);  entity("Tilde",0x223C);  entity("TildeEqual",0x2243);  entity("TildeFullEqual",0x2245);  entity("TildeTilde",0x2248);  entity("times",0x00D7);  entity("timesb",0x22A0);  entity("timesbar",0x2A31);  entity("timesd",0x2A30);  entity("tint",0x222D);  entity("toea",0x2928);  entity("top",0x22A4);  entity("topbot",0x2336);  entity("topcir",0x2AF1);  entity("topf",0x1D565);  entity("Topf",0x1D54B);  entity("topfork",0x2ADA);  entity("tosa",0x2929);  entity("tprime",0x2034);  entity("trade",0x2122);  entity("triangle",0x25B5);  entity("triangledown",0x25BF);  entity("triangleleft",0x25C3);  entity("trianglelefteq",0x22B4);  entity("triangleq",0x225C);  entity("triangleright",0x25B9);  entity("trianglerighteq",0x22B5);  entity("tridot",0x25EC);  entity("trie",0x225C);  entity("triminus",0x2A3A);  entity("triplus",0x2A39);  entity("trisb",0x29CD);  entity("tritime",0x2A3B);  entity("trpezium",0x23E2);  entity("tscr",0x1D4C9);  entity("Tscr",0x1D4AF);  entity("tscy",0x0446);  entity("TScy",0x0426);  entity("tshcy",0x045B);  entity("TSHcy",0x040B);  entity("tstrok",0x0167);  entity("Tstrok",0x0166);  entity("twixt",0x226C);  entity("twoheadleftarrow",0x219E);  entity("twoheadrightarrow",0x21A0);  entity("uacgr",0x03CD);  entity("Uacgr",0x038E);  entity("uacute",0x00FA);  entity("Uacute",0x00DA);  entity("uarr",0x2191);  entity("uArr",0x21D1);  entity("Uarr",0x219F);  entity("Uarrocir",0x2949);  entity("ubrcy",0x045E);  entity("Ubrcy",0x040E);  entity("ubreve",0x016D);  entity("Ubreve",0x016C);  entity("ucirc",0x00FB);  entity("Ucirc",0x00DB);  entity("ucy",0x0443);  entity("Ucy",0x0423);  entity("udarr",0x21C5);  entity("udblac",0x0171);  entity("Udblac",0x0170);  entity("udhar",0x296E);  entity("udiagr",0x03B0);  entity("udigr",0x03CB);  entity("Udigr",0x03AB);  entity("ufisht",0x297E);  entity("ufr",0x1D532);  entity("Ufr",0x1D518);  entity("ugr",0x03C5);  entity("Ugr",0x03A5);  entity("ugrave",0x00F9);  entity("Ugrave",0x00D9);  entity("uHar",0x2963);  entity("uharl",0x21BF);  entity("uharr",0x21BE);  entity("uhblk",0x2580);  entity("ulcorn",0x231C);  entity("ulcorner",0x231C);  entity("ulcrop",0x230F);  entity("ultri",0x25F8);  entity("umacr",0x016B);  entity("Umacr",0x016A);  entity("uml",0x00A8);  entity("UnderBrace",0xFE38);  entity("UnderBracket",0x23B5);  entity("UnderParenthesis",0xFE36);  entity("Union",0x22C3);  entity("UnionPlus",0x228E);  entity("uogon",0x0173);  entity("Uogon",0x0172);  entity("uopf",0x1D566);  entity("Uopf",0x1D54C);  entity("uparrow",0x2191);  entity("Uparrow",0x21D1);  entity("UpArrowBar",0x2912);  entity("UpArrowDownArrow",0x21C5);  entity("updownarrow",0x2195);  entity("Updownarrow",0x21D5);  entity("UpEquilibrium",0x296E);  entity("upharpoonleft",0x21BF);  entity("upharpoonright",0x21BE);  entity("uplus",0x228E);  entity("UpperLeftArrow",0x2196);  entity("UpperRightArrow",0x2197);  entity("upsi",0x03C5);  entity("Upsi",0x03D2);  entity("upsih",0x03D2);  entity("upsilon",0x03C5);  entity("Upsilon",0x03A5);  entity("UpTee",0x22A5);  entity("UpTeeArrow",0x21A5);  entity("upuparrows",0x21C8);  entity("urcorn",0x231D);  entity("urcorner",0x231D);  entity("urcrop",0x230E);  entity("uring",0x016F);  entity("Uring",0x016E);  entity("urtri",0x25F9);  entity("uscr",0x1D4CA);  entity("Uscr",0x1D4B0);  entity("utdot",0x22F0);  entity("utilde",0x0169);  entity("Utilde",0x0168);  entity("utri",0x25B5);  entity("utrif",0x25B4);  entity("uuarr",0x21C8);  entity("uuml",0x00FC);  entity("Uuml",0x00DC);  entity("uwangle",0x29A7);  entity("vangrt",0x299C);  entity("varepsilon",0x03B5);  entity("varkappa",0x03F0);  entity("varnothing",0x2205);  entity("varphi",0x03C6);  entity("varpi",0x03D6);  entity("varpropto",0x221D);  entity("varr",0x2195);  entity("vArr",0x21D5);  entity("varrho",0x03F1);  entity("varsigma",0x03C2);  entity("vartheta",0x03D1);  entity("vartriangleleft",0x22B2);  entity("vartriangleright",0x22B3);  entity("vBar",0x2AE8);  entity("Vbar",0x2AEB);  entity("vBarv",0x2AE9);  entity("vcy",0x0432);  entity("Vcy",0x0412);  entity("vdash",0x22A2);  entity("vDash",0x22A8);  entity("Vdash",0x22A9);  entity("VDash",0x22AB);  entity("Vdashl",0x2AE6);  entity("vee",0x2228);  entity("Vee",0x22C1);  entity("veebar",0x22BB);  entity("veeeq",0x225A);  entity("vellip",0x22EE);  entity("verbar",0x007C);  entity("Verbar",0x2016);  entity("vert",0x007C);  entity("Vert",0x2016);  entity("VerticalBar",0x2223);  entity("VerticalLine",0x007C);  entity("VerticalSeparator",0x2758);  entity("VerticalTilde",0x2240);  entity("VeryThinSpace",0x200A);  entity("vfr",0x1D533);  entity("Vfr",0x1D519);  entity("vltri",0x22B2);  entity("vopf",0x1D567);  entity("Vopf",0x1D54D);  entity("vprop",0x221D);  entity("vrtri",0x22B3);  entity("vscr",0x1D4CB);  entity("Vscr",0x1D4B1);  entity("Vvdash",0x22AA);  entity("vzigzag",0x299A);  entity("wcirc",0x0175);  entity("Wcirc",0x0174);  entity("wedbar",0x2A5F);  entity("wedge",0x2227);  entity("Wedge",0x22C0);  entity("wedgeq",0x2259);  entity("weierp",0x2118);  entity("wfr",0x1D534);  entity("Wfr",0x1D51A);  entity("wopf",0x1D568);  entity("Wopf",0x1D54E);  entity("wp",0x2118);  entity("wr",0x2240);  entity("wreath",0x2240);  entity("wscr",0x1D4CC);  entity("Wscr",0x1D4B2);  entity("xcap",0x22C2);  entity("xcirc",0x25EF);  entity("xcup",0x22C3);  entity("xdtri",0x25BD);  entity("xfr",0x1D535);  entity("Xfr",0x1D51B);  entity("xgr",0x03BE);  entity("Xgr",0x039E);  entity("xharr",0x27F7);  entity("xhArr",0x27FA);  entity("xi",0x03BE);  entity("Xi",0x039E);  entity("xlarr",0x27F5);  entity("xlArr",0x27F8);  entity("xmap",0x27FC);  entity("xnis",0x22FB);  entity("xodot",0x2A00);  entity("xopf",0x1D569);  entity("Xopf",0x1D54F);  entity("xoplus",0x2A01);  entity("xotime",0x2A02);  entity("xrarr",0x27F6);  entity("xrArr",0x27F9);  entity("xscr",0x1D4CD);  entity("Xscr",0x1D4B3);  entity("xsqcup",0x2A06);  entity("xuplus",0x2A04);  entity("xutri",0x25B3);  entity("xvee",0x22C1);  entity("xwedge",0x22C0);  entity("yacute",0x00FD);  entity("Yacute",0x00DD);  entity("yacy",0x044F);  entity("YAcy",0x042F);  entity("ycirc",0x0177);  entity("Ycirc",0x0176);  entity("ycy",0x044B);  entity("Ycy",0x042B);  entity("yen",0x00A5);  entity("yfr",0x1D536);  entity("Yfr",0x1D51C);  entity("yicy",0x0457);  entity("YIcy",0x0407);  entity("yopf",0x1D56A);  entity("Yopf",0x1D550);  entity("yscr",0x1D4CE);  entity("Yscr",0x1D4B4);  entity("yucy",0x044E);  entity("YUcy",0x042E);  entity("yuml",0x00FF);  entity("Yuml",0x0178);  entity("zacute",0x017A);  entity("Zacute",0x0179);  entity("zcaron",0x017E);  entity("Zcaron",0x017D);  entity("zcy",0x0437);  entity("Zcy",0x0417);  entity("zdot",0x017C);  entity("Zdot",0x017B);  entity("zeetrf",0x2128);  entity("ZeroWidthSpace",0x200B);  entity("zeta",0x03B6);  entity("Zeta",0x0396);  entity("zfr",0x1D537);  entity("Zfr",0x2128);  entity("zgr",0x03B6);  entity("Zgr",0x0396);  entity("zhcy",0x0436);  entity("ZHcy",0x0416);  entity("zigrarr",0x21DD);  entity("zopf",0x1D56B);  entity("Zopf",0x2124);  entity("zscr",0x1D4CF);  entity("Zscr",0x1D4B5);  entity("zwj",0x200D);  entity("zwnj",0x200C);}  }
class C{  public Decision suggest(Map CategoryValues){  String sSuggestion="";  double dMaxSimil=-1.0;  if (sSuggestion.equals("")) {    Iterator iIter=CategoryValues.keySet().iterator();    while (iIter.hasNext()) {      String sCurCategory=(String)iIter.next();      double dCurSimilarity=((Double)CategoryValues.get(sCurCategory)).doubleValue();      if (dCurSimilarity > dMaxSimil) {        sSuggestion=sCurCategory;        dMaxSimil=dCurSimilarity;      }    }  }  double dUncertainty=UncertaintyCalculator.computeUncertainty(CategoryValues,dMaxSimil,sSuggestion);  if (dUncertainty > LookupThreshold) {    System.out.println("High uncertainty. Looking up for similar decision.");    double dMinDistance=Double.MAX_VALUE;    Iterator iIter=vPreviousDecisions.iterator();    DecisionSupport dpSecondarySuggestion=null;    while (iIter.hasNext()) {      DecisionSupport dp=(DecisionSupport)iIter.next();      double dCurDist=dp.distanceFrom(CategoryValues,sSuggestion);      if ((dMinDistance > dCurDist) && (dCurDist < Double.MAX_VALUE)) {        dpSecondarySuggestion=dp;        dMinDistance=dCurDist;      }    }    double dFoundUncertainty=0;    if (dpSecondarySuggestion != null) {      dFoundUncertainty=EntropyUncertaintyCalculator.computeUncertainty(dpSecondarySuggestion.CategoryEstimations,((Double)dpSecondarySuggestion.CategoryEstimations.get(dpSecondarySuggestion.SuggestedCategory)).doubleValue(),dpSecondarySuggestion.SuggestedCategory);      if (dFoundUncertainty <= dUncertainty) {        sSuggestion=dpSecondarySuggestion.CorrectCategory;        dUncertainty=dUncertainty / dFoundUncertainty;        System.out.println("Found decision " + dpSecondarySuggestion.CorrectCategory + " for "+ CategoryValues.toString());      }    }  }  return new Decision(null,sSuggestion,1 - dUncertainty,CategoryValues);}  }
class C{  public void ensureCapacity(int minimumCapacity){  if (mHashes.length < minimumCapacity) {    final int[] ohashes=mHashes;    final Object[] oarray=mArray;    allocArrays(minimumCapacity);    if (mSize > 0) {      System.arraycopy(ohashes,0,mHashes,0,mSize);      System.arraycopy(oarray,0,mArray,0,mSize);    }    freeArrays(ohashes,oarray,mSize);  }}  }
class C{  public char nextClean() throws JSONException {  int nextCleanInt=nextCleanInternal();  return nextCleanInt == -1 ? '\0' : (char)nextCleanInt;}  }
class C{  @Override public boolean isTransient(){  return _typeDesc == null || _typeDesc.getIdPropertyName() == null || super.isTransient();}  }
class C{  public static void syncImmediately(Context context,Bundle extras){  Bundle bundle=new Bundle(extras);  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_MANUAL,true);  bundle.putBoolean(ContentResolver.SYNC_EXTRAS_EXPEDITED,true);  ContentResolver.requestSync(getSyncAccount(context),context.getString(R.string.data_provider_authority),bundle);}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2,Plan<R> p3,Plan<R> p4,Plan<R> p5,Plan<R> p6,Plan<R> p7,Plan<R> p8,Plan<R> p9){  return from(JoinPatterns.when(p1,p2,p3,p4,p5,p6,p7,p8,p9));}  }
class C{  public static List<Locale> localeToCandidateList(Locale locale){  List<Locale> localeList=new LinkedList<Locale>();  localeList.add(locale);  String localeString=locale.toString();  int pos=localeString.lastIndexOf("_",localeString.length());  while (pos != -1) {    localeString=localeString.substring(0,pos);    localeList.add(new Locale(localeString));    pos=localeString.lastIndexOf("_",localeString.length());  }  return localeList;}  }
class C{  @Override public boolean isComplexItem(){  return (this.fieldName != null);}  }
class C{  public boolean enabled(){  return soot.PhaseOptions.getBoolean(options,"enabled");}  }
class C{  public Builder threadFactory(ThreadFactory threadFactory){  this.threadFactory=threadFactory;  return this;}  }
class C{  public SpaceConnectRequest(){}  }
class C{  ConstrainableEventLease(Registrar server,ServiceID registrarID,long eventID,Uuid leaseID,long expiration,MethodConstraints constraints){  super((Registrar)((RemoteMethodControl)server).setConstraints(ConstrainableProxyUtil.translateConstraints(constraints,methodMappings)),registrarID,eventID,leaseID,expiration);  this.constraints=constraints;}  }
class C{  public boolean hasCategoryCombo(){  return categoryCombo != null && !DataElementCategoryCombo.DEFAULT_CATEGORY_COMBO_NAME.equals(categoryCombo.getName());}  }
class C{  public void putGrammar(Grammar grammar){  if (!fPoolIsLocked) {synchronized (fGrammars) {      XMLGrammarDescription desc=grammar.getGrammarDescription();      int hash=hashCode(desc);      int index=(hash & 0x7FFFFFFF) % fGrammars.length;      for (Entry entry=fGrammars[index]; entry != null; entry=entry.next) {        if (entry.hash == hash && equals(entry.desc,desc)) {          entry.grammar=grammar;          return;        }      }      Entry entry=new Entry(hash,desc,grammar,fGrammars[index]);      fGrammars[index]=entry;      fGrammarCount++;    }  }}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  public void discard(){synchronized (this) {    bDiscarded=true;  }  if ((from & FROM_GROUP) != 0) {    lookupDisc.discard(proxy);  } else   if ((from & FROM_LOCATOR) != 0) {    locatorDisc.discard(proxy);  }}  }
class C{  public GSAServiceClient(Context context){  mContext=context;  mConnection=new GSAServiceConnection();  mGsaHelper=((ChromeApplication)mContext.getApplicationContext()).createGsaHelper();}  }
class C{  public static String[] toStringArray(Collection<String> collection){  if (collection == null) {    return null;  }  return collection.toArray(new String[collection.size()]);}  }
class C{  public static boolean isConnectedMobile(Context context){  NetworkInfo info=NetworkUtil.getNetworkInfo(context);  return (info != null && info.isConnected() && info.getType() == ConnectivityManager.TYPE_MOBILE);}  }
class C{  private ResultPoint correctTopRight(ResultPoint bottomLeft,ResultPoint bottomRight,ResultPoint topLeft,ResultPoint topRight,int dimension){  float corr=distance(bottomLeft,bottomRight) / (float)dimension;  int norm=distance(topLeft,topRight);  float cos=(topRight.getX() - topLeft.getX()) / norm;  float sin=(topRight.getY() - topLeft.getY()) / norm;  ResultPoint c1=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  corr=distance(bottomLeft,topLeft) / (float)dimension;  norm=distance(bottomRight,topRight);  cos=(topRight.getX() - bottomRight.getX()) / norm;  sin=(topRight.getY() - bottomRight.getY()) / norm;  ResultPoint c2=new ResultPoint(topRight.getX() + corr * cos,topRight.getY() + corr * sin);  if (!isValid(c1)) {    if (isValid(c2)) {      return c2;    }    return null;  }  if (!isValid(c2)) {    return c1;  }  int l1=Math.abs(transitionsBetween(topLeft,c1).getTransitions() - transitionsBetween(bottomRight,c1).getTransitions());  int l2=Math.abs(transitionsBetween(topLeft,c2).getTransitions() - transitionsBetween(bottomRight,c2).getTransitions());  return l1 <= l2 ? c1 : c2;}  }
class C{  public boolean isSelected(Selection sel){  if (sel == null) {    return false;  }  if (sel.isEmpty()) {    boolean isCompletelyWithin=sel.start() >= start() && sel.end() < end();    boolean isWithin=sel.start() >= start() && sel.end() <= end();    return isCompletelyWithin || (isWithin && mIsLast);  } else {    int start=Math.max(start(),sel.start());    int end=Math.min(end(),sel.end());    return start < end;  }}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public void startDragDropInteraction(){  for (  Layer layer : myLayers) {    if (layer instanceof ConstraintsLayer) {      ConstraintsLayer constraintsLayer=(ConstraintsLayer)layer;      if (!constraintsLayer.isShowOnHover()) {        constraintsLayer.setShowOnHover(true);        repaint();      }    }  }}  }
class C{  public static boolean isAccessLegal(SootMethod container,ClassMember target){  SootClass targetClass=target.getDeclaringClass();  SootClass containerClass=container.getDeclaringClass();  if (!isAccessLegal(container,targetClass))   return false;  if (target.isPrivate() && !targetClass.getName().equals(containerClass.getName()))   return false;  if (!target.isPrivate() && !target.isProtected() && !target.isPublic()) {    if (!targetClass.getPackageName().equals(containerClass.getPackageName()))     return false;  }  if (target.isProtected()) {    Hierarchy h=Scene.v().getActiveHierarchy();    if (h.isClassSuperclassOfIncluding(targetClass,containerClass))     return true;    return false;  }  return true;}  }
class C{  public void clearDocumentGraph(){  Graph=new DistributionGraph();}  }
class C{  public int createDeferredElement(String elementURI,String elementName){  int elementNodeIndex=createNode(Node.ELEMENT_NODE);  int elementChunk=elementNodeIndex >> CHUNK_SHIFT;  int elementIndex=elementNodeIndex & CHUNK_MASK;  setChunkValue(fNodeName,elementName,elementChunk,elementIndex);  setChunkValue(fNodeURI,elementURI,elementChunk,elementIndex);  return elementNodeIndex;}  }
class C{  public static boolean resolveIntent(Context context,Intent intent,boolean allowSelfOpen){  try {    boolean activityResolved=false;    ResolveInfo info=context.getPackageManager().resolveActivity(intent,0);    if (info != null) {      final String packageName=context.getPackageName();      if (info.match != 0) {        if (allowSelfOpen || !packageName.equals(info.activityInfo.packageName)) {          activityResolved=true;        }      } else {        List<ResolveInfo> handlers=context.getPackageManager().queryIntentActivities(intent,PackageManager.MATCH_DEFAULT_ONLY);        if (handlers != null && !handlers.isEmpty()) {          activityResolved=true;          boolean canSelfOpen=false;          boolean hasPdfViewer=false;          for (          ResolveInfo resolveInfo : handlers) {            String pName=resolveInfo.activityInfo.packageName;            if (packageName.equals(pName)) {              canSelfOpen=true;            } else             if (PDF_VIEWER.equals(pName)) {              String filename=intent.getData().getLastPathSegment();              if ((filename != null && filename.endsWith(PDF_SUFFIX)) || PDF_MIME.equals(intent.getType())) {                intent.setClassName(pName,resolveInfo.activityInfo.name);                hasPdfViewer=true;                break;              }            }          }          if ((canSelfOpen && !allowSelfOpen) && !hasPdfViewer) {            activityResolved=false;          }        }      }    }    return activityResolved;  } catch (  RuntimeException e) {    logTransactionTooLargeOrRethrow(e,intent);  }  return false;}  }
class C{  protected MarketEditCommentQuery ownerId(int value){  return unsafeParam("owner_id",value);}  }
class C{  public void groupBars(float fromX,float groupSpace,float barSpace){  if (getBarData() == null) {    throw new RuntimeException("batData = null");  } else {    getBarData().groupBars(fromX,groupSpace,barSpace);    notifyDataSetChanged();  }}  }
class C{  @Override public void doctypeDecl(String rootElement,String publicId,String systemId,Augmentations augs) throws XNIException {}  }
class C{  @Override public boolean equals(Object o){  if (this == o) {    return true;  }  if (!(o instanceof Account)) {    return false;  }  Account account=(Account)o;  if (name != null ? !name.equals(account.name) : account.name != null) {    return false;  }  return !(passwordHash != null ? !passwordHash.equals(account.passwordHash) : account.passwordHash != null);}  }
class C{  public IStoredListIterator<T> next(IStoredListIterator<T> slh){  IStoredListIterator<T> slnext=nextPos((SegmentedListIterator<T>)slh);  if (slnext == null)   slh.release();  return slnext;}  }
class C{  public HistorySearchViewerFilter(String user,String comment,Date startDate,Date endDate,boolean regExp,SVNRevision.Number startRevision,SVNRevision.Number endRevision){  this.user=user;  this.comment=comment;  this.startDate=startDate;  this.endDate=endDate;  this.regExp=regExp;  this.startRevision=startRevision;  this.endRevision=endRevision;}  }
class C{  public void updateHardwareAddress(final HardwareAddressUpdate hardwareAddressUpdate,final HardwareAddress hardwareAddress) throws NoSuchFieldException, IllegalAccessException {  updateListOfFields(hardwareAddressUpdate.getChangedValues(),hardwareAddress);  removeListOfFields(hardwareAddressUpdate.getFieldsToRemove(),hardwareAddress);}  }
class C{  public static boolean isIdCardNumber(String str){  return isRegexMatch(str,REGEX_ID_CARD);}  }
class C{  private void verifyGridState(){  Integer rowLength=null;  int rowPos=0;  for (  List<Object> row : grid) {    if (rowLength != null && rowLength != row.size()) {      throw new IllegalStateException("Grid rows do not have the same number of cells, previous: " + rowLength + ", this: "+ row.size()+ ", at row: "+ rowPos);    }    rowPos++;    rowLength=row.size();  }}  }
class C{  public FaveAddUserQuery(VkApiClient client,UserActor actor,int userId){  super(client,"fave.addUser",OkResponse.class);  accessToken(actor.getAccessToken());  userId(userId);}  }
class C{  public List<SootMethod> methodsOfApplicationClasses(){  List<SootMethod> ret=new ArrayList<SootMethod>();  for (Iterator<SootClass> clIt=Scene.v().getApplicationClasses().iterator(); clIt.hasNext(); ) {    final SootClass cl=clIt.next();    for (Iterator<SootMethod> mIt=cl.getMethods().iterator(); mIt.hasNext(); ) {      final SootMethod m=mIt.next();      if (m.isConcrete())       ret.add(m);    }  }  return ret;}  }
class C{  public static int desaturate(int c){  int a=c & 0xff000000;  float r=((c & 0xff0000) >> 16);  float g=((c & 0x00ff00) >> 8);  float b=(c & 0x0000ff);  r*=0.2125f;  g*=0.7154f;  b*=0.0721f;  int gray=Math.min(((int)(r + g + b)),0xff) & 0xff;  return a | (gray << 16) | (gray << 8)| gray;}  }
class C{  public static void initializeProperties(String propertiesFile){  ProgramProperties.setPropertiesFileName(propertiesFile);  ProgramProperties.setProgramIcon(ResourceManager.getIcon("megan64.gif"));  ProgramProperties.put(MEGANFILE,System.getProperty("user.dir"));  ProgramProperties.put(SAVEFILE,System.getProperty("user.dir"));  ProgramProperties.put(EXPORTFILE,System.getProperty("user.dir"));  ProgramProperties.put(TAXONOMYFILE,DEFAULT_TAXONOMYFILE);  ProgramProperties.put(MAPPINGFILE,DEFAULT_MAPPINGFILE);  ProgramProperties.put(MICROBIALATTRIBUTESFILE,DEFAULT_MICROBIALATTRIBUTESFILE);  ProgramProperties.put(BLASTFILE,"");  ProgramProperties.put(BLASTOUTFILE,"");  ProgramProperties.put(PVALUE_COLOR,Color.YELLOW);  ProgramProperties.put(RECENTFILES,"");  ProgramProperties.put(MAXRECENTFILES,30);  ProgramProperties.put(ExportImageDialog.GRAPHICSFORMAT,".pdf");  ProgramProperties.put(ExportImageDialog.GRAPHICSDIR,System.getProperty("user.dir"));  ProgramProperties.put(DISABLED_TAXA,new int[]{32644,37965,134367,2323,28384,61964,48510,47936,186616,12908,48479,156614,367897});  ProgramProperties.load(propertiesFile);  if (!ProgramProperties.get("Version","").equals(ProgramProperties.getProgramName())) {    ProgramProperties.put("Version",ProgramProperties.getProgramName());    ProgramProperties.put(TAXONOMYFILE,DEFAULT_TAXONOMYFILE);    ProgramProperties.put(MAPPINGFILE,DEFAULT_MAPPINGFILE);    ProgramProperties.put(MICROBIALATTRIBUTESFILE,DEFAULT_MICROBIALATTRIBUTESFILE);  }  ProgramProperties.put(MeganProperties.DEFAULT_PROPERTIES,"");  ReadMagnitudeParser.setEnabled(ProgramProperties.get("allow-read-weights",false));  ReadMagnitudeParser.setUnderScoreEnabled(ProgramProperties.get("allow-read-weights-underscore",false));}  }
class C{  public static String[] spread(String[] command){  if (command == null) {    return null;  }  List<String> result=new ArrayList<String>();  State state=State.DEFAULT;  boolean escape=false;  for (  String part : command) {    StringBuilder sb=new StringBuilder();    List<String> parts=new ArrayList<String>();    int len=part.length();    for (int i=0; i < len; i++) {      char c=part.charAt(i);      if (escape) {        escape=false;        sb.append(c);      } else {switch (state) {case SINGLE:switch (c) {case '\\':            sb.append(c);          escape=true;        break;case '\'':      sb.append(c);    state=State.DEFAULT;  break;default :sb.append(c);}break;case DOUBLE:switch (c) {case '\\':sb.append(c);escape=true;break;case '"':sb.append(c);state=State.DEFAULT;break;default :sb.append(c);}break;case DEFAULT:switch (c) {case '\\':sb.append(c);state=State.DEFAULT;escape=true;break;case '\'':sb.append(c);state=State.SINGLE;break;case '"':sb.append(c);state=State.DOUBLE;break;default :if (!Character.isWhitespace(c)) {sb.append(c);} else if (sb.length() != 0) {parts.add(sb.toString());sb=new StringBuilder();}}break;default :throw new IllegalStateException("Invalid state");}}}parts.add(sb.toString());result.addAll(parts);}return result.toArray(new String[]{});}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  mLastResponse=response;}  }
class C{  @AssistedInject public PersistentSortedQueue(@Assisted String name,@Assisted QueueDAO dao,MetricRegistry metricRegistry){  this(name,false,dao,metricRegistry);}  }
class C{  public VideoSearchQueryWithExtended adult(Boolean value){  return unsafeParam("adult",value);}  }
class C{  public static SpaceURL parseURL(String spaceURL) throws MalformedURLException {  return parseURL(spaceURL,null);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_REMAIN_TIME_5(String durationtime0){  return new SM_SYSTEM_MESSAGE(1400224,durationtime0);}  }
class C{  public SmoothSwitch(Context context,AttributeSet attrs){  this(context,attrs,0);}  }
class C{  public Map.Entry<K,V> ceilingEntry(K key){  return getNear(key,GT | EQ);}  }
class C{  public Schema schema(){  return schema;}  }
class C{  public static void printAsNexus(String name,int ntax,String[] names,Vector<Vector<Double>> values){  Writer w=new StringWriter();  try {    w.write("#NEXUS\n[!Computed by MEGAN using " + name + "]\n");    w.write("begin taxa;\ndimensions ntax=" + ntax + ";\nend;\n");    w.write("begin distances;\ndimensions ntax=" + ntax + ";\nformat labels no diagonal triangle=upper;\n");    w.write("matrix\n");    int count=0;    for (    Vector<Double> row : values) {      w.write("'" + names[count++].replaceAll("'","_") + "'");      for (      Double value : row) {        w.write(" " + value.floatValue());      }      w.write("\n");    }    w.write("'" + names[count].replaceAll("'","_") + "'\n");    w.write(";\nend;\n");  } catch (  IOException e) {    Basic.caught(e);  }  System.err.println(w.toString());}  }
class C{  public boolean containsSymbol(char[] buffer,int offset,int length){  int bucket=hash(buffer,offset,length) % fTableSize;  OUTER:   for (Entry entry=fBuckets[bucket]; entry != null; entry=entry.next) {    if (length == entry.characters.length) {      for (int i=0; i < length; i++) {        if (buffer[offset + i] != entry.characters[i]) {          continue OUTER;        }      }      return true;    }  }  return false;}  }
class C{  @Override public void clear(){  getTinkerPopGraph().traversal().V().drop().iterate();}  }
class C{  public String typeName(){  return "methodhandle";}  }
class C{  @Override public HttpResponse performRequest(Request<?> request,Map<String,String> additionalHeaders) throws IOException, AuthFailureError {  HashMap<String,String> map=new HashMap<>();  map.putAll(request.getHeaders());  map.putAll(additionalHeaders);  okhttp3.Request.Builder okHttpRequestBuilder=new okhttp3.Request.Builder();  for (  final String name : map.keySet()) {    okHttpRequestBuilder.addHeader(name,map.get(name));  }  int timeoutMs=request.getTimeoutMs();  OkHttpClient okHttpClient=this.okHttpClient.newBuilder().connectTimeout(timeoutMs,TimeUnit.MILLISECONDS).readTimeout(timeoutMs,TimeUnit.MILLISECONDS).writeTimeout(timeoutMs,TimeUnit.MILLISECONDS).build();  setConnectionParametersForRequest(okHttpRequestBuilder,request);  okhttp3.Request okHttp3Request=okHttpRequestBuilder.url(request.getUrl()).build();  okhttp3.Response okHttpResponse=okHttpClient.newCall(okHttp3Request).execute();  SaveStatusLine saveStatusLine=OkHttp3StatusLineAdapter.getInstance().adaptiveStatusLine(OkHttp3ProtocolVersionAdapter.getInstance(),okHttpResponse);  SaveHttpResponse saveHttpResponse=new SaveHttpResponse(saveStatusLine);  saveHttpResponse.setEntity(OkHttp3HttpEntityAdapter.getInstance().adaptiveEntity(okHttpResponse));  OkHttp3HeaderAdapter.getInstance().adaptiveHeader(saveHttpResponse,okHttpResponse);  return saveHttpResponse;}  }
class C{  public boolean isForceUnderTransaction(){  return _selfIncrementedUpdateColumn;}  }
class C{  public double value(final RealVector point){  return coefficients.dotProduct(point) + constantTerm;}  }
class C{  @Override public long skip(long n) throws IOException {  int charWidth=(fEncoding >= 4) ? 2 : 1;  long bytesSkipped=fInputStream.skip(n << charWidth);  if ((bytesSkipped & (charWidth | 1)) == 0)   return bytesSkipped >> charWidth;  return (bytesSkipped >> charWidth) + 1;}  }
class C{  public void processPackageFiles(Processor<PsiFile> processor){  PsiDirectory dir=getContainingDirectory();  if (dir == null) {    return;  }  processPackageFiles(processor,dir);}  }
class C{  @Nonnull public Builder copy(){  return new Builder(this);}  }
class C{  public synchronized long resetByteCount(){  long tmp=this.count;  this.count=0;  return tmp;}  }
class C{  public static void clearCookie(){  prefs.edit().putString("cookie","").commit();}  }
class C{  public double normInf(){  double f=0;  for (int i=0; i < m; i++) {    double s=0;    for (int j=0; j < n; j++) {      s+=Math.abs(A[i][j]);    }    f=Math.max(f,s);  }  return f;}  }
class C{  public static byte[] encode(byte[] source,int off,int len,byte[] alphabet,int maxLineLength){  int lenDiv3=(len + 2) / 3;  int len43=lenDiv3 * 4;  byte[] outBuff=new byte[len43 + (len43 / maxLineLength)];  int d=0;  int e=0;  int len2=len - 2;  int lineLength=0;  for (; d < len2; d+=3, e+=4) {    int inBuff=((source[d + off] << 24) >>> 8) | ((source[d + 1 + off] << 24) >>> 16) | ((source[d + 2 + off] << 24) >>> 24);    outBuff[e]=alphabet[(inBuff >>> 18)];    outBuff[e + 1]=alphabet[(inBuff >>> 12) & 0x3f];    outBuff[e + 2]=alphabet[(inBuff >>> 6) & 0x3f];    outBuff[e + 3]=alphabet[(inBuff) & 0x3f];    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;      lineLength=0;    }  }  if (d < len) {    encode3to4(source,d + off,len - d,outBuff,e,alphabet);    lineLength+=4;    if (lineLength == maxLineLength) {      outBuff[e + 4]=NEW_LINE;      e++;    }    e+=4;  }  assert (e == outBuff.length);  return outBuff;}  }
class C{  public void endNumber(String string){}  }
class C{  public void write(int b){  ensureCapacity(1);  _buffer[_count++]=(byte)b;}  }
class C{  @Override public void requestPhotos(Context c,int page,boolean refresh){  if (!model.isRefreshing() && !model.isLoading()) {    if (refresh) {      model.setRefreshing(true);    } else {      model.setLoading(true);    }switch (model.getPhotosType()) {case PhotosObject.PHOTOS_TYPE_PHOTOS:      requestUserPhotos(c,page,refresh,model.getPhotosOrder());    break;case PhotosObject.PHOTOS_TYPE_LIKES:  requestUserLikes(c,page,refresh,model.getPhotosOrder());break;}}}  }
class C{  @Override public void notationDecl(String name,XMLResourceIdentifier identifier,Augmentations augmentations) throws XNIException {}  }
class C{  public static TemporalExpression toTemporalExpression(RecurrenceInfo info){  if (info == null) {    throw new IllegalArgumentException("info argument cannot be null");  }  return new RecurrenceWrapper(info);}  }
class C{  public NewsfeedAddBanQuery userIds(List<Integer> value){  return unsafeParam("user_ids",value);}  }
class C{  public Builder zIndex(Number zIndex){  this.zIndex=zIndex;  return this;}  }
class C{  static Object createObject(String factoryId,String propertiesFilename,String fallbackClassName) throws ConfigurationError {  if (DEBUG)   debugPrintln("debug is on");  ClassLoader cl=findClassLoader();  try {    String systemProp=SecuritySupport.getSystemProperty(factoryId);    if (systemProp != null && systemProp.length() > 0) {      if (DEBUG)       debugPrintln("found system property, value=" + systemProp);      return newInstance(systemProp,cl,true);    }  } catch (  SecurityException se) {  }  String factoryClassName=null;  if (propertiesFilename == null) {    File propertiesFile=null;    boolean propertiesFileExists=false;    try {      String javah=SecuritySupport.getSystemProperty("java.home");      propertiesFilename=javah + File.separator + "lib"+ File.separator+ DEFAULT_PROPERTIES_FILENAME;      propertiesFile=new File(propertiesFilename);      propertiesFileExists=SecuritySupport.getFileExists(propertiesFile);    } catch (    SecurityException e) {      fLastModified=-1;      fXercesProperties=null;    }synchronized (ObjectFactory.class) {      boolean loadProperties=false;      FileInputStream fis=null;      try {        if (fLastModified >= 0) {          if (propertiesFileExists && (fLastModified < (fLastModified=SecuritySupport.getLastModified(propertiesFile)))) {            loadProperties=true;          } else {            if (!propertiesFileExists) {              fLastModified=-1;              fXercesProperties=null;            }          }        } else {          if (propertiesFileExists) {            loadProperties=true;            fLastModified=SecuritySupport.getLastModified(propertiesFile);          }        }        if (loadProperties) {          fXercesProperties=new Properties();          fis=SecuritySupport.getFileInputStream(propertiesFile);          fXercesProperties.load(fis);        }      } catch (      Exception x) {        fXercesProperties=null;        fLastModified=-1;      } finally {        if (fis != null) {          try {            fis.close();          } catch (          IOException exc) {          }        }      }    }    if (fXercesProperties != null) {      factoryClassName=fXercesProperties.getProperty(factoryId);    }  } else {    FileInputStream fis=null;    try {      fis=SecuritySupport.getFileInputStream(new File(propertiesFilename));      Properties props=new Properties();      props.load(fis);      factoryClassName=props.getProperty(factoryId);    } catch (    Exception x) {    } finally {      if (fis != null) {        try {          fis.close();        } catch (        IOException exc) {        }      }    }  }  if (factoryClassName != null) {    if (DEBUG)     debugPrintln("found in " + propertiesFilename + ", value="+ factoryClassName);    return newInstance(factoryClassName,cl,true);  }  Object provider=findJarServiceProvider(factoryId);  if (provider != null) {    return provider;  }  if (fallbackClassName == null) {    throw new ConfigurationError("Provider for " + factoryId + " cannot be found",null);  }  if (DEBUG)   debugPrintln("using fallback, value=" + fallbackClassName);  return newInstance(fallbackClassName,cl,true);}  }
class C{  @Deprecated public void resetTo(long sequence){  sequencer.claim(sequence);  sequencer.publish(sequence);}  }
class C{  private boolean isOnBlockList(WebsitePreference website){  if (mCategory.showCookiesSites()) {    return website.site().getCookiePermission() == ContentSetting.BLOCK;  } else   if (mCategory.showCameraSites()) {    return website.site().getCameraPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showFullscreenSites()) {    return website.site().getFullscreenPermission() == ContentSetting.ASK;  } else   if (mCategory.showGeolocationSites()) {    return website.site().getGeolocationPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showJavaScriptSites()) {    return website.site().getJavaScriptPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showMicrophoneSites()) {    return website.site().getMicrophonePermission() == ContentSetting.BLOCK;  } else   if (mCategory.showPopupSites()) {    return website.site().getPopupPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showNotificationsSites()) {    return website.site().getPushNotificationPermission() == ContentSetting.BLOCK;  } else   if (mCategory.showProtectedMediaSites()) {    return website.site().getProtectedMediaIdentifierPermission() == ContentSetting.BLOCK;  }  return false;}  }
class C{  public int size(){  return _locks.length;}  }
class C{  @Override public DimensionColumnDataChunk readDimensionChunk(FileHolder fileReader,int blockIndex){  byte[] dataPage=null;  int[] invertedIndexes=null;  int[] invertedIndexesReverse=null;  int[] rlePage=null;  dataPage=COMPRESSOR.unCompress(fileReader.readByteArray(filePath,dimensionColumnChunk.get(blockIndex).getDataPageOffset(),dimensionColumnChunk.get(blockIndex).getDataPageLength()));  if (CarbonUtil.hasEncoding(dimensionColumnChunk.get(blockIndex).getEncodingList(),Encoding.INVERTED_INDEX)) {    invertedIndexes=CarbonUtil.getUnCompressColumnIndex(dimensionColumnChunk.get(blockIndex).getRowIdPageLength(),fileReader.readByteArray(filePath,dimensionColumnChunk.get(blockIndex).getRowIdPageOffset(),dimensionColumnChunk.get(blockIndex).getRowIdPageLength()),numberComressor);    invertedIndexesReverse=getInvertedReverseIndex(invertedIndexes);  }  if (CarbonUtil.hasEncoding(dimensionColumnChunk.get(blockIndex).getEncodingList(),Encoding.RLE)) {    rlePage=numberComressor.unCompress(fileReader.readByteArray(filePath,dimensionColumnChunk.get(blockIndex).getRlePageOffset(),dimensionColumnChunk.get(blockIndex).getRlePageLength()));    dataPage=UnBlockIndexer.uncompressData(dataPage,rlePage,eachColumnValueSize[blockIndex]);    rlePage=null;  }  DimensionChunkAttributes chunkAttributes=new DimensionChunkAttributes();  chunkAttributes.setEachRowSize(eachColumnValueSize[blockIndex]);  chunkAttributes.setInvertedIndexes(invertedIndexes);  chunkAttributes.setInvertedIndexesReverse(invertedIndexesReverse);  DimensionColumnDataChunk columnDataChunk=null;  if (dimensionColumnChunk.get(blockIndex).isRowMajor()) {    columnDataChunk=new ColumnGroupDimensionDataChunk(dataPage,chunkAttributes);  } else   if (!CarbonUtil.hasEncoding(dimensionColumnChunk.get(blockIndex).getEncodingList(),Encoding.DICTIONARY)) {    columnDataChunk=new VariableLengthDimensionDataChunk(getNoDictionaryDataChunk(dataPage),chunkAttributes);    chunkAttributes.setNoDictionary(true);  } else {    columnDataChunk=new FixedLengthDimensionDataChunk(dataPage,chunkAttributes);  }  return columnDataChunk;}  }
class C{  public static char readChar(DataInputStream dis) throws IOException {  return (char)dis.readByte();}  }
class C{  public static long hash64(final byte[] data,int length){  return hash64(data,length,0xe17a1465);}  }
class C{  public AdsGetAdsQuery adIds(String value){  return unsafeParam("ad_ids",value);}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  public void updateSingleStat(MapleStat stat,long newval,boolean itemReaction){  Map<MapleStat,Long> statup=new EnumMap<>(MapleStat.class);  statup.put(stat,newval);  client.getSession().write(CWvsContext.updatePlayerStats(statup,itemReaction,this));}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  serviceID.writeBytes(out);}  }
class C{  private void updateInternalData(SelectedSymbolMask.SymbolMaskEnum maskValue){  SymbolData localSymbolData=new SymbolData();  SelectedSymbolMask mask=new SelectedSymbolMask(maskValue);  if (sld == null) {    return;  }  StyledLayer[] styledLayers=sld.getStyledLayers();  if (styledLayers != null) {    localSymbolData.initialiseSelectedStyledLayerIndex();    for (    StyledLayer styledLayer : styledLayers) {      localSymbolData.setStyledLayer(styledLayer);      if (styledLayer == symbolData.getStyledLayer()) {        this.symbolData.update(localSymbolData);        return;      }      List<Style> styleList=null;      if ((styledLayer instanceof NamedLayerImpl) && mask.shouldContinue(SelectedSymbolMask.SymbolMaskEnum.E_STYLED_LAYER)) {        NamedLayerImpl namedLayerImpl=(NamedLayerImpl)styledLayer;        styleList=namedLayerImpl.styles();      } else       if ((styledLayer instanceof UserLayerImpl) && mask.shouldContinue(SelectedSymbolMask.SymbolMaskEnum.E_STYLED_LAYER)) {        UserLayerImpl userLayerImpl=(UserLayerImpl)styledLayer;        styleList=userLayerImpl.userStyles();      }      if (mask.shouldContinue(SelectedSymbolMask.SymbolMaskEnum.E_STYLE) && (styleList != null)) {        localSymbolData.initialiseSelectedStyleIndex();        for (        Style style : styleList) {          localSymbolData.setStyle(style);          if (style == symbolData.getStyle()) {            this.symbolData.update(localSymbolData);            return;          }          if (mask.shouldContinue(SelectedSymbolMask.SymbolMaskEnum.E_FEATURE_TYPE_STYLE)) {            localSymbolData.initialiseSelectedFTSIndex();            for (            FeatureTypeStyle fts : style.featureTypeStyles()) {              localSymbolData.setFeatureTypeStyle(fts);              if (fts == symbolData.getFeatureTypeStyle()) {                this.symbolData.update(localSymbolData);                return;              }              if (mask.shouldContinue(SelectedSymbolMask.SymbolMaskEnum.E_RULE)) {                localSymbolData.initialiseSelectedRuleIndex();                for (                Rule rule : fts.rules()) {                  localSymbolData.setRule(rule);                  if (rule == symbolData.getRule()) {                    this.symbolData.update(localSymbolData);                    return;                  }                  if (mask.shouldContinue(SelectedSymbolMask.SymbolMaskEnum.E_SYMBOLIZER)) {                    localSymbolData.initialiseSelectedSymbolizerIndex();                    for (                    Symbolizer symbol : rule.symbolizers()) {                      localSymbolData.setSymbolizer(symbol);                      if (symbol == this.symbolData.getSymbolizer()) {                        this.symbolData.update(localSymbolData);                        break;                      } else {                        localSymbolData.incrementSelectedSymbolizerIndex();                      }                    }                  }                  localSymbolData.incrementSelectedRuleIndex();                }              }              localSymbolData.incrementSelectedFTSIndex();            }          }          localSymbolData.incrementSelectedStyleIndex();        }      }      localSymbolData.incrementSelectedStyledLayerIndex();    }  }}  }
class C{  public boolean isValidInfrastructureTld(String iTld){  iTld=unicodeToASCII(iTld);  return Arrays.binarySearch(INFRASTRUCTURE_TLDS,(chompLeadingDot(iTld.toLowerCase(Locale.ENGLISH)))) >= 0;}  }
class C{  public void disconnect(){  if (connectionState == ConnectionState.Disconnected || connectionState == ConnectionState.Connecting || !client.isConnected()) {    return;  }  AirMapLog.i("TrafficService","Disconnecting from alerts");  removeAllTraffic();  try {    client.disconnect(connectionState,actionListener);    checkForUpdatedFlight=false;  } catch (  MqttException e) {    AirMapLog.e("TrafficService","Error disconnecting");  } finally {    onDisconnect(false);  }}  }
class C{  public void shuffleTrainingSet(){  utils.shuffleList(TrainingFiles);}  }
class C{  public static HttpResponse execute(HttpMethod method,String targetUrl) throws IOException, KeyStoreException, NoSuchAlgorithmException, CertificateException, KeyManagementException {  return execute(method,targetUrl,null,null);}  }
class C{  public SyncResult syncLibraries(String oldLibrary,String newLibrary){  try {    long taskId=trySync(oldLibrary,newLibrary);    while (true) {      JSONObject taskStatus=getTaskStatus(taskId);      JSONObject taskDetails=getTaskDetails(taskStatus);      if (isSyncComplete(taskStatus,taskDetails)) {        return taskDetailsToSyncResult(taskDetails);      }      if (quietSleep(progressUpdateFrequency))       return SyncResult.fail();    }  } catch (  Throwable t) {    return SyncResult.fail(t.getMessage());  }}  }
class C{  protected void processNotificationSupportedReport(SerialMessage serialMessage,int offset,int endpoint) throws ZWaveSerialMessageException {  v1Supported=(serialMessage.getMessagePayloadByte(offset + 1) & 0x80) == 0;  if (v1Supported) {    logger.debug("NODE: NOTIFICATION_SUPPORTED_REPORT reports V1 ALARM support",getNode().getNodeId());  }  int numBytes=serialMessage.getMessagePayloadByte(offset + 1) & 0x1f;  for (int i=0; i < numBytes; ++i) {    for (int bit=0; bit < 8; ++bit) {      if (((serialMessage.getMessagePayloadByte(offset + i + 2)) & (1 << bit)) == 0) {        continue;      }      int index=(i << 3) + bit;      if (index >= AlarmType.values().length) {        continue;      }      getAlarm(index);    }  }  supportedInitialised=true;}  }
class C{  public void scanNonNotifyTemplates(Context context,IEntryHolder entry,ServerTransaction txn,FifoSearch fifoSearch,FifoGroupsSearch fifoGroupsSearch) throws EntryDeletedException, SAException {  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,"Starting scan of non-notify templates: EntryUid=" + entry.getUID() + ", fifoSearch="+ fifoSearch);  context.setExhaustedFifoGroupsTemplatesSearch(false);  scanTemplates(context,entry,txn,fifoSearch,null,fifoGroupsSearch);  if (_logger.isLoggable(Level.FINE))   _logger.log(Level.FINE,"Finished scan of non-notify templates: EntryUid=" + entry.getUID() + ", fifoSearch="+ fifoSearch);}  }
class C{  public void addUndoEvent(UndoInterface event){  if (shouldProcessUndoRedoAction()) {    boolean atEndOfList=(currentIndex >= undoList.size());    if (!atEndOfList) {      while (undoList.size() > currentIndex) {        int lastIndex=undoList.size() - 1;        undoList.remove(lastIndex);      }    }    undoList.add(event);    currentIndex=undoList.size();    updateMenuItems();    logger.debug(event.getStringRepresentation());  }}  }
class C{  ConfigurationError(String msg,Exception x){  super(msg);  this.exception=x;}  }
class C{  protected void scheduleEdgeProcessing(PathEdge<N,D> edge){  if (executor.isTerminating())   return;  executor.execute(new PathEdgeProcessingTask(edge));  propagationCount++;}  }
class C{  public int toFaceIJOrientation(MutableInteger pi,MutableInteger pj,MutableInteger orientation){  int face=this.face();  int bits=(face & SWAP_MASK);  for (int k=7; k >= 0; --k) {    bits=getBits1(pi,pj,k,bits);  }  if (orientation != null) {    if ((lowestOnBit() & 0x1111111111111110L) != 0) {      bits^=S2.SWAP_MASK;    }    orientation.setValue(bits);  }  return face;}  }
class C{  public void addBodyDecl(BodyDecl node){  List<BodyDecl> list=(parent == null || state == null) ? getBodyDeclListNoTransform() : getBodyDeclList();  list.addChild(node);}  }
class C{  public PartialUniqueIndex(String indexName,Extractor[] extractors){  this.extractors=extractors;  hashStrategy=ExtractorBasedHashStrategy.create(this.extractors);  this.loadFactor=DEFAULT_LOAD_FACTOR;  threshold=(int)(DEFAULT_INITIAL_CAPACITY * DEFAULT_LOAD_FACTOR);  table=new Entry[DEFAULT_INITIAL_CAPACITY];}  }
class C{  public static boolean init(Module m){  if (!m.enabled) {    log.info("[" + m.getName() + "] is disabled");  } else   if (modules.containsKey(m.id)) {    log.error("the [id] duplicated, [" + m.name + ", "+ modules.get(m.id).name+ "], ignore the ["+ m.name+ "]");  } else {    try {      m.path=new File(Model.HOME + "/modules/" + m.name).getCanonicalPath();      m.viewroot=new File(m.path + File.separator + "view").getCanonicalPath();      m.initModels();      m._init(_conf);      modules.put(m.id,m);      if (modules.size() > 0) {        home=modules.lastEntry().getValue();      }      return true;    } catch (    Throwable e) {      log.error(m.name,e);    }  }  return false;}  }
class C{  public static Process exec(List<String> args) throws IOException {  if (VersionHelper.getVersionSdkIntCompat() >= VersionHelper.VERSION_JELLYBEAN && RootUtil.isRooted()) {    Process process=Runtime.getRuntime().exec("su");    PrintStream outputStream=null;    try {      outputStream=new PrintStream(new BufferedOutputStream(process.getOutputStream(),8192));      outputStream.println(TextUtils.join(" ",args));      outputStream.flush();    }  finally {      if (outputStream != null) {        outputStream.close();      }    }    return process;  }  return Runtime.getRuntime().exec(ArrayUtil.toArray(args,String.class));}  }
class C{  public String process(Item seg) throws ProcessException {  if (segOnsetCtype(seg,"r").equals("0")) {    return segOnsetCtype(seg,"l");  }  return "1";}  }
class C{  void checkNormalizationAfterInsert(ChildNode insertedChild){  if (insertedChild.getNodeType() == Node.TEXT_NODE) {    ChildNode prev=insertedChild.previousSibling();    ChildNode next=insertedChild.nextSibling;    if ((prev != null && prev.getNodeType() == Node.TEXT_NODE) || (next != null && next.getNodeType() == Node.TEXT_NODE)) {      isNormalized(false);    }  } else {    if (!insertedChild.isNormalized()) {      isNormalized(false);    }  }}  }
class C{  private String preProcessSignature(String signature){  int index;  if ((index=signature.indexOf(" throws")) > 0) {    signature=signature.substring(0,index);  }  while ((index=signature.indexOf("java.lang.")) > 0) {    signature=signature.substring(0,index) + signature.substring(index + 10,signature.length());  }  return signature;}  }
class C{  public static List<Bucket> createBuckets(Experiment experiment,int numberOfBuckets){  double[] percentages=new double[numberOfBuckets];  Arrays.fill(percentages,1.0d / numberOfBuckets);  return createBuckets(experiment,percentages);}  }
class C{  public void initMeteorGameWhenConditionStart(){  Random rnd=new Random();  for (int i=0; i < roomClients.size(); i++)   roomClients.get(i).setnDestoryMeteor(0);  for (int i=0; i < Settings.nSettingAsteroidNumber; i++) {    sendMessageInTheRoomPeople(Settings._ANSWER_METEORGAME_UNIVERSE_INIT + "",rnd.nextInt(Settings.nGameAsteroidSceneWidth) + "",rnd.nextInt(Settings.nGameAsteroidSceneHeight) + "");    try {      Thread.sleep(20);    } catch (    InterruptedException e) {      e.printStackTrace();    }  }  sendMessageInTheRoomPeople(Settings._ANSWER_METEORGAME_PLAY_START + "",Boolean.toString(true));}  }
class C{  public ControlZoomOptions build(){  ControlZoomOptions options=new ControlZoomOptions();  options.position=this.position;  options.zoomInText=this.zoomInText;  options.zoomOutText=this.zoomOutText;  options.zoomInTitle=this.zoomInTitle;  options.zoomOutTitle=this.zoomOutTitle;  return options;}  }
class C{  public static <T>Type<T> valueOf(final ParameterizedType type){  return valueOf((Class<T>)type.getRawType(),type.getActualTypeArguments());}  }
class C{  public BoardGetCommentsQuery startCommentId(Integer value){  return unsafeParam("start_comment_id",value);}  }
class C{  public SidekickGridRow selectGridCheckbox(){  if (!isGridRowCheckboxSelected()) {    bobcatWait.withTimeout(Timeouts.BIG).until(null,5);  }  return this;}  }
class C{  public void updateIntent(Intent intent){  clear();  if (mContext == null || intent == null || !Intent.ACTION_VIEW.equals(intent.getAction())) {    return;  }  String chromePackageName=mContext.getPackageName();  if (TextUtils.equals(chromePackageName,intent.getPackage()) || TextUtils.equals(chromePackageName,IntentUtils.safeGetStringExtra(intent,Browser.EXTRA_APPLICATION_ID))) {    mIsInitialIntentHeadingToChrome=true;  }  mInitialIntent=new Intent(Intent.ACTION_VIEW);  mInitialIntent.setData(intent.getData());  if (intent.getCategories() != null) {    for (    String category : intent.getCategories()) {      mInitialIntent.addCategory(category);    }  }}  }
class C{  @Override public LeafNode locateLeaf(DataType key,boolean findFirst){  return null;}  }
class C{  public void close() throws BrokerServiceException {  subscription.removeConsumer(this);  cnx.removedConsumer(this);}  }
class C{  public Builder numBookies(int numBookies){  this._numBookies=numBookies;  return this;}  }
class C{  public int apply(final Alignment alignment,ProgressListener progress) throws CanceledException {  if (progress != null) {    progress.setSubtask("Building overlap graph");    progress.setMaximum(alignment.getNumberOfSequences());    progress.setProgress(0);  }  final Pair<Integer,Integer>[] list=new Pair[alignment.getNumberOfSequences()];  final int[] numberOfLetters=new int[alignment.getNumberOfSequences()];  for (int i=0; i < alignment.getNumberOfSequences(); i++) {    list[i]=new Pair<>(alignment.getLane(i).getFirstNonGapPosition(),i);    numberOfLetters[i]=countLetters(alignment.getLane(i));  }  Arrays.sort(list,new Pair<Integer,Integer>());  readId2ContainedReads=new List[alignment.getNumberOfSequences()];  edgeWeights=new EdgeMap<>(overlapGraph);{    final Set<Integer> toDelete=new HashSet<>();    final Node[] i2node=new Node[alignment.getNumberOfSequences()];    for (int i=0; i < alignment.getNumberOfSequences(); i++) {      i2node[i]=overlapGraph.newNode(i);      node2readName.set(i2node[i],Basic.getFirstWord(alignment.getLane(i).getName()));    }    for (int il=0; il < list.length; il++) {      final int i=list[il].getSecond();      if (!toDelete.contains(i)) {        final Lane iLane=alignment.getLane(i);        final int iStart=iLane.getFirstNonGapPosition();        final int iEnd=iLane.getLastNonGapPosition();        for (int jl=il + 1; jl < list.length; jl++) {          final int j=list[jl].get2();          final Lane jLane=alignment.getLane(j);          final int jStart=jLane.getFirstNonGapPosition();          if (jStart > iEnd)           break;          if (!toDelete.contains(j)) {            final int jEnd=jLane.getLastNonGapPosition();            if ((iStart < jStart || (iStart == jStart && i < j))) {              int numberOfLettersInOverlap=computeNumberOfLettersInPerfectOverlap(iLane,jLane);              if (iEnd >= jEnd && numberOfLettersInOverlap == numberOfLetters[j]) {                toDelete.add(j);                List<Integer> contained=readId2ContainedReads[i];                if (contained == null) {                  contained=readId2ContainedReads[i]=new ArrayList<>();                }                contained.add(j);              } else               if (numberOfLettersInOverlap >= minOverlap) {                overlapGraph.newEdge(i2node[i],i2node[j],numberOfLettersInOverlap);              }            }          }        }      }      if (progress != null)       progress.incrementProgress();    }    for (    int i : toDelete) {      overlapGraph.deleteNode(i2node[i]);    }  }  if (progress != null)   System.err.println("Overlap graph has " + overlapGraph.getNumberOfNodes() + " nodes and "+ overlapGraph.getNumberOfEdges()+ " edges");  for (Node v=overlapGraph.getFirstNode(); v != null; v=v.getNext()) {    if (v.getInDegree() == 0) {      visitNodesRec(v,edgeWeights);    }  }  return overlapGraph.getNumberOfNodes();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase(getSyntax());  Director.showMessageWindow();}  }
class C{  public ReadOnlyRequiredException(){  super("Not a read-only transaction");}  }
class C{  public void removeAllKeys(){  removeAllKeys(storeName);}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  int remaining=count;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    out.write(buf,0,c);    remaining-=c;    if (remaining == 0) {      break;    }  }}  }
class C{  public static String formatDate(Date date,String dateTimeFormat,Locale locale,TimeZone timeZone){  return UtilDateTime.toDateFormat(dateTimeFormat,timeZone,locale).format(date);}  }
class C{  public SwappedDataInputStream(InputStream input){  super(input);}  }
class C{  public static AuthToken load(String sid,String token){  return Helper.load(W.create("sid",sid).and("token",token).and("expired",System.currentTimeMillis(),W.OP_GT),AuthToken.class);}  }
class C{  public JobStatus(JobInfo job,int uId){  this(job,uId,0);  final long elapsedNow=SystemClock.elapsedRealtime();  if (job.isPeriodic()) {    earliestRunTimeElapsedMillis=elapsedNow;    latestRunTimeElapsedMillis=elapsedNow + job.getIntervalMillis();  } else {    earliestRunTimeElapsedMillis=mirror.android.app.job.JobInfo.hasEarlyConstraint.get(job) ? elapsedNow + job.getMinLatencyMillis() : NO_EARLIEST_RUNTIME;    latestRunTimeElapsedMillis=mirror.android.app.job.JobInfo.hasLateConstraint.get(job) ? elapsedNow + job.getMaxExecutionDelayMillis() : NO_LATEST_RUNTIME;  }}  }
class C{  public RepaintAction(Visualization vis){  super(vis);}  }
class C{  static public COMPARISON_MODE parseMode(String parameterString){  try {    if (parameterString != null) {      NexusStreamParser np=new NexusStreamParser(new StringReader(parameterString));      while (np.peekNextToken() != NexusStreamParser.TT_EOF) {        if (np.peekMatchIgnoreCase("mode=")) {          np.matchIgnoreCase("mode=");          return COMPARISON_MODE.valueOfIgnoreCase(np.getWordRespectCase());        } else         np.getWordRespectCase();      }    }  } catch (  Exception ex) {  }  return COMPARISON_MODE.ABSOLUTE;}  }
class C{  @Override public void endDocument() throws SAXException {  super.endDocument();}  }
class C{  public BoardGetTopicsQueryWithExtended(VkApiClient client,UserActor actor,int groupId){  super(client,"board.getTopics",GetTopicsExtendedResponse.class);  accessToken(actor.getAccessToken());  groupId(groupId);  extended(true);}  }
class C{  private void initState(){  initState(getState(),SdkConstants.GRADLE_PLUGIN_RECOMMENDED_VERSION);}  }
class C{  private static APIResponse httpConnect(String apiKey,String apiUrl,String requestMethod,String requestBody){  APIResponse apiResponse=new APIResponse();  HttpURLConnection urlConnection=null;  BufferedReader reader=null;  try {    Uri builtUri=Uri.parse(apiUrl).buildUpon().build();    URL url=new URL(builtUri.toString());    urlConnection=(HttpURLConnection)url.openConnection();    urlConnection.setRequestMethod(requestMethod);    urlConnection.addRequestProperty("Body",requestBody);    urlConnection.addRequestProperty("Authorization",apiKey);    urlConnection.addRequestProperty("Content-Length","0");    urlConnection.addRequestProperty("Accept","application/json");    urlConnection.connect();    apiResponse.setResponseCode(urlConnection.getResponseCode());    InputStream inputStream=urlConnection.getInputStream();    StringBuilder buffer=new StringBuilder();    if (inputStream == null) {      return apiResponse;    }    reader=new BufferedReader(new InputStreamReader(inputStream));    String line;    while ((line=reader.readLine()) != null) {      buffer.append(line);    }    if (buffer.length() == 0) {      return apiResponse;    }    apiResponse.setResponseText(buffer.toString());  } catch (  IOException v) {    apiResponse.setResponseText(v.toString());    return apiResponse;  } finally {    if (urlConnection != null) {      urlConnection.disconnect();    }    if (reader != null) {      try {        reader.close();      } catch (      final IOException e) {        e.printStackTrace();      }    }  }  return apiResponse;}  }
class C{  public void removeAttribute(int index){  if (index >= 0 && index < length) {    if (index < length - 1) {      System.arraycopy(data,(index + 1) * 5,data,index * 5,(length - index - 1) * 5);    }    index=(length - 1) * 5;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index++]=null;    data[index]=null;    length--;  } else {    badIndex(index);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public void releaseScan() throws SAException {  if (_curValueList != null) {    _curValueList.releaseScan();    _curValueList=null;  }}  }
class C{  public PhotosGetMarketUploadServerQuery cropY(Integer value){  return unsafeParam("crop_y",value);}  }
class C{  public GroupsReorderLinkQuery reorderLink(UserActor actor,int groupId,int linkId){  return new GroupsReorderLinkQuery(getClient(),actor,groupId,linkId);}  }
class C{  private void readObjectNoData() throws ObjectStreamException {  throw new InvalidObjectException("no data");}  }
class C{  public static Bundler of(Bundle b){  return new Bundler(b);}  }
class C{  public void mergeHistogram(DocumentNGramHistogram dnOtherDocumentNGram,double fNewDataImportance){  java.util.Iterator iIter=dnOtherDocumentNGram.NGramHistogram.keySet().iterator();  while (iIter.hasNext()) {    String sCurNGram=(String)iIter.next();    if (this.NGramHistogram.containsKey(sCurNGram)) {      double dPrev=((Double)NGramHistogram.get(sCurNGram)).doubleValue();      double dNew=((Double)dnOtherDocumentNGram.NGramHistogram.get(sCurNGram)).doubleValue();      NGramHistogram.put(sCurNGram,dPrev + (dNew - dPrev) * fNewDataImportance);    } else {      double dNew=((Double)dnOtherDocumentNGram.NGramHistogram.get(sCurNGram)).doubleValue();      NGramHistogram.put(sCurNGram,dNew);    }  }}  }
class C{  public void restoreFp(){  increaseFp(TYPE.NATURAL_FP,1);}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  private void giveModelIdValue(DataSupport baseObj,String idName,Class<?> idType,long id) throws SecurityException, NoSuchFieldException, IllegalArgumentException, IllegalAccessException {  if (shouldGiveModelIdValue(idName,idType,id)) {    Object value;    if (idType == int.class || idType == Integer.class) {      value=(int)id;    } else     if (idType == long.class || idType == Long.class) {      value=id;    } else {      throw new DataSupportException(DataSupportException.ID_TYPE_INVALID_EXCEPTION);    }    DynamicExecutor.setField(baseObj,idName,value,baseObj.getClass());  }}  }
class C{  public AemParsys insertComponent(String componentGroup,String componentName){  openInsertWindow().insertComponent(componentGroup,componentName);  return this;}  }
class C{  @Override protected boolean access(long time){  boolean access=super.access(time);  _data.setLastAccessed(_data.getAccessed());  _data.setAccessed(time);  _data.setExpiryTime(getMaxInactiveInterval() < 0 ? Long.MAX_VALUE : (time + TimeUnit.SECONDS.toMillis(getMaxInactiveInterval())));  return access;}  }
class C{  public Boolean shouldAllowNavigation(String url){  return null;}  }
class C{  public void showErrorView(){  if (null != mBaseLayout) {    mBaseLayout.showErrorView();  }}  }
class C{  public boolean isApplicable(){  return true;}  }
class C{  public void add(String intercept,AndServerRequestHandler requestHandler){  this.mRequestHandlerMap.put(intercept,requestHandler);}  }
class C{  private void populateMap(String key,PopulateDetailsInterface panelDetails){  List<PopulateDetailsInterface> panelList=panelMap.get(key);  if (panelList == null) {    panelList=new ArrayList<PopulateDetailsInterface>();    panelMap.put(key,panelList);  }  panelList.add(panelDetails);}  }
class C{  public static void buildList(Map<String,Object> nd,List<Map<String,Object>> lst,int depth){  String id=(String)nd.get("id");  String nm=(String)nd.get("name");  String spc="";  for (int i=0; i < depth; i++)   spc+="&nbsp;&nbsp;";  Map<String,Object> map=FastMap.newInstance();  map.put("dataCategoryId",id);  map.put("categoryName",spc + nm);  if (id != null && !id.equals("ROOT") && !id.equals("")) {    lst.add(map);  }  List<Map<String,Object>> kids=UtilGenerics.checkList(nd.get("kids"));  for (  Map<String,Object> kidNode : kids) {    buildList(kidNode,lst,depth + 1);  }}  }
class C{  private int updateAssociatedTableForeignKey(DataSupport baseObj,long id){  Map<String,Set<Long>> associatedModelMap=baseObj.getAssociatedModelsMapWithFK();  ContentValues values=new ContentValues();  for (  String associatedTable : associatedModelMap.keySet()) {    values.clear();    String fkName=getForeignKeyColumnName(baseObj.getTableName());    values.put(fkName,id);    Set<Long> ids=associatedModelMap.get(associatedTable);    if (ids != null && !ids.isEmpty()) {      return mDatabase.update(associatedTable,values,getWhereOfIdsWithOr(ids),null);    }  }  return 0;}  }
class C{  public static int cleanup(long uid){  return Helper.delete(W.create("uid",uid),Lock.class);}  }
class C{  protected static LazyNode cArray(int index){  return new LazyNode(ARRAY,index);}  }
class C{  public boolean preserve_source_annotations(){  return soot.PhaseOptions.getBoolean(options,"preserve-source-annotations");}  }
class C{  public <K1 extends K,R1 extends R>MultiwayPoolBuilder<K1,R1> lifecycle(ResourceLifecycle<? super K1,? super R1> lifecycle){  checkState(this.lifecycle == null);  @SuppressWarnings("unchecked") MultiwayPoolBuilder<K1,R1> self=(MultiwayPoolBuilder<K1,R1>)this;  self.lifecycle=checkNotNull(lifecycle);  return self;}  }
class C{  private FastConcurrentSkipListMap.Node<K,V> loNode(){  if (lo == null)   return m.findFirst(); else   if (loInclusive)   return m.findNear(lo,m.GT | m.EQ); else   return m.findNear(lo,m.GT);}  }
class C{  protected void insertBatch(Content[] batch,int id) throws IOException {  int t=0;  final int maxRetries=64;  int sleepTime=100;  final int maxSleepTime=60000;  while (t++ < maxRetries) {    try {      List<RequestException> errors=sessions[id].insertContentCollectErrors(batch);      if (errors != null) {        for (        RequestException ex : errors) {          Throwable cause=ex.getCause();          if (cause != null) {            if (cause instanceof XQueryException) {              LOG.error(((XQueryException)cause).getFormatString());            } else {              LOG.error(cause.getMessage());            }          }          if (ex instanceof ContentInsertException) {            Content content=((ContentInsertException)ex).getContent();            if (!needCommit && batch[batch.length - 1] == content) {              for (              Content fc : batch) {                DocumentURI failedUri=pendingUris[id].remove(fc);                if (failedUri != null) {                  failed++;                  LOG.warn("Failed document " + failedUri);                }              }            } else {              DocumentURI failedUri=pendingUris[id].remove(content);              failed++;              LOG.warn("Failed document " + failedUri);            }          }        }      }    } catch (    RetryableQueryException e) {      LOG.error(e.getFormatString());      if (t < maxRetries) {        try {          Thread.sleep(sleepTime);        } catch (        Exception e2) {        }        sleepTime=sleepTime * 2;        if (sleepTime > maxSleepTime)         sleepTime=maxSleepTime;        continue;      } else {        failed+=batch.length;        for (        Content fc : batch) {          DocumentURI failedUri=pendingUris[id].remove(fc);          LOG.warn("Failed document " + failedUri);        }      }    }catch (    RequestServerException e) {      if (e instanceof XQueryException) {        LOG.error(((XQueryException)e).getFormatString());      } else {        LOG.error(e.getMessage());      }      failed+=batch.length;      for (      Content fc : batch) {        DocumentURI failedUri=pendingUris[id].remove(fc);        LOG.warn("Failed document " + failedUri);      }    }catch (    RequestException e) {      if (sessions[id] != null) {        sessions[id].close();      }      if (countBased) {        rollbackCount(id);      }      pendingUris[id].clear();      throw new IOException(e);    }    break;  }  if (needCommit) {    for (    DocumentURI uri : pendingUris[id].values()) {      commitUris[id].add(uri);    }  } else {    succeeded+=pendingUris[id].size();  }  pendingUris[id].clear();}  }
class C{  public boolean execute(String action,JSONArray args,CallbackContext callbackContext){  if (action.equals("start")) {    this.callbackContext=callbackContext;    if (this.status != AccelListener.RUNNING) {      this.start();    }  } else   if (action.equals("stop")) {    if (this.status == AccelListener.RUNNING) {      this.stop();    }  } else {    return false;  }  PluginResult result=new PluginResult(PluginResult.Status.NO_RESULT,"");  result.setKeepCallback(true);  callbackContext.sendPluginResult(result);  return true;}  }
class C{  public AemContentFinder search(String query){  getCurrentTab().search(query);  return this;}  }
class C{  void addMarkers(Token tok){  SyntaxDocument sDoc=(SyntaxDocument)pane.getDocument();  sDoc.readLock();  String text=tok.getText(sDoc);  Iterator<Token> it=sDoc.getTokens(0,sDoc.getLength());  while (it.hasNext()) {    Token nextToken=it.next();    if (nextToken.length == tok.length && text.equals(nextToken.getText(sDoc))) {      Markers.markToken(pane,nextToken,marker);    }  }  sDoc.readUnlock();}  }
class C{  public void initGui(){  this.buttonList.clear();  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DEFAULTS,this.width / 2 - 155,this.height - 25,150,20,"Reset To Defaults"));  this.buttonList.add(new GuiButtonEx(ID_GENERIC_DONE,this.width / 2 - 155 + 160,this.height - 25,150,20,"Done"));  GuiSmallButtonEx mode=new GuiSmallButtonEx(VRSettings.VrOptions.MOVE_MODE.returnEnumOrdinal(),this.width / 2 - 68,this.height / 6 + 80,VRSettings.VrOptions.MOVE_MODE,this.guivrSettings.getKeyBinding(VRSettings.VrOptions.MOVE_MODE));  mode.setEventHandler(this);  this.buttonList.add(mode);  VRSettings.VrOptions[] buttons=seatedOptions;  addButtons(buttons,0);  if (mc.vrSettings.vrFreeMove)   addButtons(freeMoveSettings,105); else   addButtons(teleportSettings,105);}  }
class C{  public String updateByPrimaryKeySelective(User record){  SQL sql=new SQL();  sql.UPDATE("user");  if (record.getUsername() != null) {    sql.SET("username = #{username,jdbcType=VARCHAR}");  }  if (record.getPsw() != null) {    sql.SET("psw = #{psw,jdbcType=VARCHAR}");  }  sql.WHERE("id = #{id,jdbcType=INTEGER}");  return sql.toString();}  }
class C{  public int compareTo(RDotTxtEntry that){  return ComparisonChain.start().compare(this.type,that.type).compare(this.name,that.name).result();}  }
class C{  public static void enableJMS(boolean enable){  ServiceDispatcher.enableJMS=enable;}  }
class C{  public boolean isLeftHalf(){  return isLeftHalf;}  }
class C{  @Override public boolean onTouchEvent(MotionEvent event){  if (mIsEnabled) {    return mGestureDetector.onTouchEvent(event);  }  return false;}  }
class C{  private soot.Local generateAppends(polyglot.ast.Expr expr,soot.Local sb){  if (isStringConcat(expr)) {    if (expr instanceof polyglot.ast.Binary) {      sb=generateAppends(((polyglot.ast.Binary)expr).left(),sb);      sb=generateAppends(((polyglot.ast.Binary)expr).right(),sb);    } else {      sb=generateAppends(((polyglot.ast.Assign)expr).left(),sb);      sb=generateAppends(((polyglot.ast.Assign)expr).right(),sb);    }  } else {    soot.Value toApp=base().createAggressiveExpr(expr,false,false);    soot.Type appendType=null;    if (toApp instanceof soot.jimple.StringConstant) {      appendType=soot.RefType.v("java.lang.String");    } else     if (toApp instanceof soot.jimple.NullConstant) {      appendType=soot.RefType.v("java.lang.Object");    } else     if (toApp instanceof soot.jimple.Constant) {      appendType=toApp.getType();    } else     if (toApp instanceof soot.Local) {      if (((soot.Local)toApp).getType() instanceof soot.PrimType) {        appendType=((soot.Local)toApp).getType();      } else       if (((soot.Local)toApp).getType() instanceof soot.RefType) {        if (((soot.Local)toApp).getType().toString().equals("java.lang.String")) {          appendType=soot.RefType.v("java.lang.String");        } else         if (((soot.Local)toApp).getType().toString().equals("java.lang.StringBuffer")) {          appendType=soot.RefType.v("java.lang.StringBuffer");        } else {          appendType=soot.RefType.v("java.lang.Object");        }      } else {        appendType=soot.RefType.v("java.lang.Object");      }    } else     if (toApp instanceof soot.jimple.ConditionExpr) {      toApp=handleCondBinExpr((soot.jimple.ConditionExpr)toApp);      appendType=soot.BooleanType.v();    }    if (appendType instanceof soot.ShortType || appendType instanceof soot.ByteType) {      soot.Local intLocal=lg.generateLocal(soot.IntType.v());      soot.jimple.Expr cast=soot.jimple.Jimple.v().newCastExpr(toApp,soot.IntType.v());      soot.jimple.Stmt castAssign=soot.jimple.Jimple.v().newAssignStmt(intLocal,cast);      body.getUnits().add(castAssign);      toApp=intLocal;      appendType=soot.IntType.v();    }    ArrayList paramsTypes=new ArrayList();    paramsTypes.add(appendType);    ArrayList params=new ArrayList();    params.add(toApp);    soot.SootClass classToInvoke=soot.Scene.v().getSootClass("java.lang.StringBuffer");    soot.SootMethodRef methodToInvoke=soot.Scene.v().makeMethodRef(classToInvoke,"append",paramsTypes,soot.RefType.v("java.lang.StringBuffer"),false);    soot.jimple.VirtualInvokeExpr appendInvoke=soot.jimple.Jimple.v().newVirtualInvokeExpr(sb,methodToInvoke,params);    Util.addLnPosTags(appendInvoke.getArgBox(0),expr.position());    soot.Local tmp=lg.generateLocal(soot.RefType.v("java.lang.StringBuffer"));    soot.jimple.Stmt appendStmt=soot.jimple.Jimple.v().newAssignStmt(tmp,appendInvoke);    sb=tmp;    body.getUnits().add(appendStmt);    Util.addLnPosTags(appendStmt,expr.position());  }  return sb;}  }
class C{  private void drawOverlayInfo(Graphics2D g,Point position){  if (mReportingContainer == null) {    return;  }  int ascent=mDefaultFontMetrics.getAscent();  int labelColumnWidth=0;  int dataColumnWidth=0;  int overlayHeight=OVERLAY_INFO_PADDING * 2 + ascent + OVERLAY_INFO_LINE_SPACING;  String containerName=mReportingContainer.getContainerName();  if (containerName != null) {    labelColumnWidth=mDefaultFontMetrics.stringWidth(containerName);    overlayHeight+=ascent + OVERLAY_INFO_LINE_SPACING;  }  ArrayDeque<Integer> dataWidthArray=new ArrayDeque<>();  for (  ReportingSeries series : mReportingData.keySet()) {    int labelWidth=mDefaultFontMetrics.stringWidth(series.getLabel());    labelColumnWidth=Math.max(labelColumnWidth,labelWidth);    for (    ReportingSeries.ReportingData data : mReportingData.get(series)) {      int dataWidth=mDefaultFontMetrics.stringWidth(data.formattedYData);      dataColumnWidth=Math.max(dataColumnWidth,dataWidth);      dataWidthArray.add(dataWidth);      overlayHeight+=ascent + OVERLAY_INFO_LINE_SPACING;    }  }  int overlayWidth=Math.max(OVERLAY_INFO_MIN_WIDTH,OVERLAY_INFO_PADDING * 2 + OVERLAY_INFO_COLUMN_SPACING + labelColumnWidth + dataColumnWidth);  Rectangle2D.Float rect=new Rectangle2D.Float(0,0,overlayWidth,overlayHeight);  g.translate(position.x + OVERLAY_INFO_OFFSET,position.y + OVERLAY_INFO_OFFSET);  g.translate(OVERLAY_SHADOW_OFFSET,OVERLAY_SHADOW_OFFSET);  g.setColor(AdtUiUtils.DEFAULT_FONT_COLOR);  g.fill(rect);  g.translate(-OVERLAY_SHADOW_OFFSET,-OVERLAY_SHADOW_OFFSET);  g.setColor(AdtUiUtils.OVERLAY_INFO_BACKGROUND);  g.fill(rect);  g.setColor(AdtUiUtils.DEFAULT_FONT_COLOR);  g.setFont(AdtUiUtils.DEFAULT_FONT);  int textHeight=OVERLAY_INFO_PADDING;  if (containerName != null) {    textHeight+=ascent;    g.drawString(containerName,OVERLAY_INFO_PADDING,textHeight);    textHeight+=OVERLAY_INFO_LINE_SPACING;  }  for (  ReportingSeries series : mReportingData.keySet()) {    for (    ReportingSeries.ReportingData data : mReportingData.get(series)) {      textHeight+=ascent;      g.drawString(series.getLabel(),OVERLAY_INFO_PADDING,textHeight);      g.drawString(data.formattedYData,overlayWidth - OVERLAY_INFO_PADDING - dataWidthArray.remove(),textHeight);      textHeight+=OVERLAY_INFO_LINE_SPACING;    }  }  g.drawLine(0,textHeight,overlayWidth,textHeight);  textHeight+=OVERLAY_INFO_LINE_SPACING + ascent;  g.drawString(OVERLAY_DRILL_DOWN_MESSAGE,OVERLAY_INFO_PADDING,textHeight);  g.translate(-(position.x + OVERLAY_INFO_OFFSET),-(position.y + OVERLAY_INFO_OFFSET));}  }
class C{  @SuppressWarnings({"unchecked","cast"}) public Program fullCopy(){  Program tree=(Program)copy();  if (children != null) {    for (int i=0; i < children.length; ++i) {      ASTNode child=(ASTNode)children[i];      if (child != null) {        child=child.fullCopy();        tree.setChild(child,i);      }    }  }  return tree;}  }
class C{  private void createLocalClassDecl(polyglot.ast.LocalClassDecl cDecl){  BiMap lcMap=InitialResolver.v().getLocalClassMap();  String name=Util.getSootType(cDecl.decl().type()).toString();  if (!InitialResolver.v().hasClassInnerTag(body.getMethod().getDeclaringClass(),name)) {    Util.addInnerClassTag(body.getMethod().getDeclaringClass(),name,null,cDecl.decl().name(),Util.getModifier(cDecl.decl().flags()));  }}  }
class C{  public static void putInt(String key,int value){  prefs.edit().putInt(key,value).commit();}  }
class C{  private void fixScrollOffset(){  if (offsetScroll < 0) {    offsetScroll=0;  }  if (offsetScroll > getMaxOffsetX()) {    offsetScroll=getMaxOffsetX();  }}  }
class C{  public static Matrix identity(int m,int n){  Matrix A=new Matrix(m,n);  double[][] X=A.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      X[i][j]=(i == j ? 1.0 : 0.0);    }  }  return A;}  }
class C{  public TouchesExtended(Expression expression1,Expression expression2){  super(expression1,expression2);}  }
class C{  public boolean element2Locator(Element e,SimpleLocator l){  if (l == null)   return false;  if (e instanceof ElementImpl) {    ElementImpl ele=(ElementImpl)e;    Document doc=ele.getOwnerDocument();    String sid=(String)fDoc2SystemId.get(DOMUtil.getRoot(doc));    int line=ele.getLineNumber();    int column=ele.getColumnNumber();    l.setValues(sid,sid,line,column,ele.getCharacterOffset());    return true;  }  return false;}  }
class C{  @Override public void update(final DataTag dataTag,final Object value,final String valueDesc,final Timestamp sourceTimestamp,final Timestamp daqTimestamp,final Timestamp cacheTimestamp){  updateValue(dataTag,value,valueDesc);  setTimestamps(dataTag,sourceTimestamp,daqTimestamp,cacheTimestamp);}  }
class C{  public static Map<String,Object> testProcessorWithCapture(DispatchContext dctx,Map<String,? extends Object> context){  Locale locale=(Locale)context.get("locale");  Map<String,Object> result=FastMap.newInstance();  BigDecimal processAmount=(BigDecimal)context.get("processAmount");  if (processAmount != null && processAmount.compareTo(new BigDecimal("100.00")) >= 0)   result.put("authResult",Boolean.TRUE);  result.put("captureResult",Boolean.TRUE);  if (processAmount != null && processAmount.compareTo(new BigDecimal("100.00")) < 0)   result.put("authResult",Boolean.FALSE);  result.put("captureResult",Boolean.FALSE);  result.put("customerRespMsgs",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestProcessorMinimumPurchase",locale)));  if (processAmount == null)   result.put("authResult",null);  String refNum=UtilDateTime.nowAsString();  result.put("processAmount",context.get("processAmount"));  result.put("authRefNum",refNum);  result.put("authAltRefNum",refNum);  result.put("captureRefNum",refNum);  result.put("captureAltRefNum",refNum);  result.put("authCode","100");  result.put("captureCode","200");  result.put("authFlag","X");  result.put("authMessage",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestCapture",locale)));  result.put("internalRespMsgs",UtilMisc.toList(UtilProperties.getMessage(resource,"AccountingPaymentTestCapture",locale)));  return result;}  }
class C{  public LUDecomposition(RealMatrix matrix,double singularityThreshold){  if (!matrix.isSquare()) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NON_SQUARE_MATRIX,matrix.getRowDimension(),matrix.getColumnDimension());  }  final int m=matrix.getColumnDimension();  lu=matrix.getData();  pivot=new int[m];  cachedL=null;  cachedU=null;  cachedP=null;  for (int row=0; row < m; row++) {    pivot[row]=row;  }  even=true;  singular=false;  for (int col=0; col < m; col++) {    for (int row=0; row < col; row++) {      final double[] luRow=lu[row];      double sum=luRow[col];      for (int i=0; i < row; i++) {        sum-=luRow[i] * lu[i][col];      }      luRow[col]=sum;    }    int max=col;    double largest=Double.NEGATIVE_INFINITY;    for (int row=col; row < m; row++) {      final double[] luRow=lu[row];      double sum=luRow[col];      for (int i=0; i < col; i++) {        sum-=luRow[i] * lu[i][col];      }      luRow[col]=sum;      if (FastMath.abs(sum) > largest) {        largest=FastMath.abs(sum);        max=row;      }    }    if (FastMath.abs(lu[max][col]) < singularityThreshold) {      singular=true;      return;    }    if (max != col) {      double tmp=0;      final double[] luMax=lu[max];      final double[] luCol=lu[col];      for (int i=0; i < m; i++) {        tmp=luMax[i];        luMax[i]=luCol[i];        luCol[i]=tmp;      }      int temp=pivot[max];      pivot[max]=pivot[col];      pivot[col]=temp;      even=!even;    }    final double luDiag=lu[col][col];    for (int row=col + 1; row < m; row++) {      lu[row][col]/=luDiag;    }  }}  }
class C{  @Override public boolean checkFacadeAllowed(String table,FacadeOptions options) throws FacadeExistsException {  return checkFacadeAllowed(readTableJson(table,true),options.getPlacement(),null);}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  private boolean isValidPivotColumn(SimplexTableau tableau,int col){  for (int i=tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {    final double entry=tableau.getEntry(i,col);    if (Precision.compareTo(entry,0d,cutOff) > 0) {      return true;    }  }  return false;}  }
class C{  public void add(short value){  ensureCapacity(fLength + 1);  fData[fLength++]=value;}  }
class C{  public void discovered(DiscoveryEvent event){  DiscoveryListener l=get();  if (l != null) {    l.discovered(event);  }}  }
class C{  protected CascadedTable(Class tupleType){  super(0,0,tupleType);  m_pnames=new ArrayList();}  }
class C{  public float expansion_factor(){  return soot.PhaseOptions.getFloat(options,"expansion-factor");}  }
class C{  public static void write(CharSequence data,Writer output) throws IOException {  if (data != null) {    write(data.toString(),output);  }}  }
class C{  public static String bind(String key,Object[] args){  try {    return MessageFormat.format(bind(key),args);  } catch (  MissingResourceException e) {    return key;  }catch (  NullPointerException e) {    return "!" + key + "!";  }}  }
class C{  public static void json(int level,String msg){  log(level,0,null,FMT_JSON,null,null,msg);}  }
class C{  public static int[] calculateRGB(String accountName) throws UnsupportedEncodingException, NoSuchAlgorithmException {  String username=AccountUtils.getAccountUsername(accountName);  byte[] seed=username.getBytes("UTF-8");  MessageDigest md=MessageDigest.getInstance("MD5");  Integer seedMd5Int=String.format(Locale.ROOT,"%032x",new BigInteger(1,md.digest(seed))).hashCode();  double maxRange=Integer.MAX_VALUE;  float hue=(float)(seedMd5Int / maxRange * 360);  return BitmapUtils.HSLtoRGB(hue,90.0f,65.0f,1.0f);}  }
class C{  @Override public void onClick(View passwordView){  if (mPublicShare != null && mPublicShare.isPasswordProtected()) {    requestPasswordForShareViaLink(false);  }}  }
class C{  public NotANumberException(){  super(LocalizedFormats.NAN_NOT_ALLOWED,Double.valueOf(Double.NaN));}  }
class C{  public void updateColourRamp(ColourRampData data){  if (data != null) {    for (    ColourMapData row : colourMapList) {      Expression colour=data.getColourRamp().getColour(data,row.getQuantity(),data.reverseColours());      row.setColour(colour);    }    this.fireTableDataChanged();  }}  }
class C{  public PauseGenerator(){}  }
class C{  static void appendBytes(String content,Mode mode,BitArray bits,String encoding) throws WriterException {switch (mode) {case NUMERIC:    appendNumericBytes(content,bits);  break;case ALPHANUMERIC:appendAlphanumericBytes(content,bits);break;case BYTE:append8BitBytes(content,bits,encoding);break;case KANJI:appendKanjiBytes(content,bits);break;default :throw new WriterException("Invalid mode: " + mode);}}  }
class C{  public void insertKey(DataType key,RecordID rid){  LeafNode leaf=locateLeaf(key,false);  LeafEntry ent=new LeafEntry(key,rid);  leaf.insertBEntry(ent);}  }
class C{  public boolean isBigEndian(){  return isBigEndian;}  }
class C{  public void resumeEncoding(){  this.suspendEncoding=false;}  }
class C{  public TLongObjectHashMap(int initialCapacity,TLongHashingStrategy strategy){  super(initialCapacity,strategy);}  }
class C{  public void scale(double r,double s,double t){  Matrix3D tmp=new Matrix3D();  tmp.set(0,0,r);  tmp.set(1,1,s);  tmp.set(2,2,t);  preMultiply(tmp);}  }
class C{  public static Map<String,Collection<Pair<Number,Number>>> computeCounts(Document doc,int threshold,ClassificationViewer viewer,ProgressListener progressListener) throws CanceledException {  final String cName=viewer.getClassName();  final int numberOfPoints=ProgramProperties.get("NumberRareFactionDataPoints",20);  final int numberOfReplicates=ProgramProperties.get("NumberRareFactionReplicates",10);  progressListener.setTasks(cName + " rarefaction analysis","Sampling from current leaves");  progressListener.setMaximum(numberOfPoints * numberOfReplicates * doc.getNumberOfSamples());  progressListener.setProgress(0);  Random rand=new Random(666);  final PhyloTree tree=viewer.getTree();  Map<String,Collection<Pair<Number,Number>>> name2counts=new HashMap<>();  for (int pid=0; pid < doc.getNumberOfSamples(); pid++) {    NodeIntegerArray numbering=new NodeIntegerArray(tree);    int numberOfReads=computeCountRec(pid,tree.getRoot(),viewer,0,numbering);    progressListener.incrementProgress();    Vector<Float> counts=new Vector<>();    counts.add(0f);    NodeIntegerArray[] node2count=new NodeIntegerArray[numberOfReplicates];    for (int r=0; r < numberOfReplicates; r++)     node2count[r]=new NodeIntegerArray(tree);    Set<Node> nodes=new HashSet<>();    int batchSize=numberOfReads / numberOfPoints;    for (int p=1; p <= numberOfPoints; p++) {      for (int r=0; r < numberOfReplicates; r++) {        for (int i=1; i <= batchSize; i++) {          int which=rand.nextInt(numberOfReads);          Node v=getIdRec(tree.getRoot(),which,numbering);          nodes.add(v);          node2count[r].set(v,node2count[r].getValue(v) + 1);        }        progressListener.incrementProgress();      }      int count=0;      for (int r=0; r < numberOfReplicates; r++) {        for (        Node v : nodes) {          if (node2count[r].getValue(v) >= threshold)           count++;        }      }      counts.add((float)count / (float)numberOfReplicates);    }    ArrayList<Pair<Number,Number>> list=new ArrayList<>(counts.size());    int sampleSize=0;    for (int p=0; p <= numberOfPoints; p++) {      list.add(new Pair<Number,Number>(sampleSize,counts.get(p)));      sampleSize+=batchSize;    }    name2counts.put(doc.getSampleNames().get(pid),list);  }  return name2counts;}  }
class C{  public final void unschedule(final ScheduledTask task){  if (task == null)   return;  task.suspend();}  }
class C{  public static void main(String[] args){  Map<Integer,LinkedList<Integer>> edges=new TreeMap<Integer,LinkedList<Integer>>();  for (int v=0; v < 6; v++)   edges.put(v,new LinkedList<Integer>());  edges.get(5).add(4);  edges.get(4).add(3);  edges.get(4).add(2);  edges.get(3).add(2);  edges.get(3).add(1);  edges.get(2).add(1);  edges.get(1).add(0);  Dijkstra dijkstra=new Dijkstra(edges);  dijkstra.print();  System.out.println("Shortest paths: ");  List<LinkedList<Integer>> paths=dijkstra.shortestPaths();  for (  LinkedList<Integer> path : paths) {    System.out.println(path);  }  edges.clear();  for (int v=0; v < 3; v++)   edges.put(v,new LinkedList<Integer>());  edges.get(2).add(1);  edges.get(2).add(0);  edges.get(1).add(0);  dijkstra=new Dijkstra(edges);  dijkstra.print();  System.out.println("Shortest paths: ");  paths=dijkstra.shortestPaths();  for (  LinkedList<Integer> path : paths) {    System.out.println(path);  }}  }
class C{  public void removeKey(String key){  String validKey=convertToValidKey(key);  try {    mDiskCache.remove(validKey);    Log_OC.d(TAG,"removeKey from cache: " + validKey);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public void hide(){  LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)mContentView.getLayoutParams();  lp.height=0;  mContentView.setLayoutParams(lp);}  }
class C{  public static Result decodeImage(byte[] data,int width,int height){  Result result=null;  try {    Hashtable<DecodeHintType,Object> hints=new Hashtable<DecodeHintType,Object>();    hints.put(DecodeHintType.CHARACTER_SET,"utf-8");    hints.put(DecodeHintType.TRY_HARDER,Boolean.TRUE);    hints.put(DecodeHintType.POSSIBLE_FORMATS,BarcodeFormat.QR_CODE);    PlanarYUVLuminanceSource source=new PlanarYUVLuminanceSource(data,width,height,0,0,width,height,false);    BinaryBitmap bitmap1=new BinaryBitmap(new GlobalHistogramBinarizer(source));    QRCodeReader reader2=new QRCodeReader();    result=reader2.decode(bitmap1,hints);  } catch (  ReaderException e) {  }  return result;}  }
class C{  public double evaluate(final double[] values,final double mean) throws MathIllegalArgumentException {  return FastMath.sqrt(variance.evaluate(values,mean));}  }
class C{  private static void version(){  System.out.println("smali " + VERSION + " (http://smali.googlecode.com)");  System.out.println("Copyright (C) 2010 Ben Gruver (JesusFreke@JesusFreke.com)");  System.out.println("BSD license (http://www.opensource.org/licenses/bsd-license.php)");  System.exit(0);}  }
class C{  public void clear(){  oredCriteria.clear();  orderByClause=null;  distinct=false;}  }
class C{  @SuppressWarnings("unchecked") public static <T>List<T> toList(Object object){  if (object != null && !(object instanceof List))   return null;  return (List<T>)object;}  }
class C{  public SM_MAIL_SERVICE(Player player,Collection<Letter> letters){  super(player);  this.serviceId=2;  this.letters=letters;}  }
class C{  @Override public void scrollToTop(){  view.scrollToTop();}  }
class C{  public FriendsGetRequestsQueryWithExtended suggested(Boolean value){  return unsafeParam("suggested",value);}  }
class C{  private void printError(String type,XMLParseException ex){  fOut.print("[");  fOut.print(type);  fOut.print("] ");  String systemId=ex.getExpandedSystemId();  if (systemId != null) {    int index=systemId.lastIndexOf('/');    if (index != -1)     systemId=systemId.substring(index + 1);    fOut.print(systemId);  }  fOut.print(':');  fOut.print(ex.getLineNumber());  fOut.print(':');  fOut.print(ex.getColumnNumber());  fOut.print(": ");  fOut.print(ex.getMessage());  fOut.println();  fOut.flush();}  }
class C{  public boolean hasSuperClassAccess(){  return getSuperClassAccessOpt().getNumChild() != 0;}  }
class C{  boolean onBackPressed(){  if (mDelegate != null && mDelegate.isSelectionEnabled()) {    mDelegate.clearSelection();    return true;  }  return false;}  }
class C{  public void processUtterance(Utterance utterance) throws ProcessException {  float durStretch;  PhoneDuration durStat;  float durationStretch=utterance.getVoice().getDurationStretch();  float zdur;  float dur;  float end=0.0f;  float localDurationStretch;  durStretch=meanRate / utterance.getVoice().getRate();  for (Item segment=utterance.getRelation(Relation.SEGMENT).getHead(); segment != null; segment=segment.getNext()) {    zdur=((Float)cart.interpret(segment)).floatValue();    durStat=durations.getPhoneDuration(segment.getFeatures().getString("name"));    Object tval=DURATION_STRETCH_PATH.findFeature(segment);    localDurationStretch=Float.parseFloat(tval.toString());    if (localDurationStretch == 0.0) {      localDurationStretch=durationStretch;    } else {      localDurationStretch*=durationStretch;    }    dur=localDurationStretch * ((zdur * durStat.getStandardDeviation()) + durStat.getMean());    end+=dur;    segment.getFeatures().setFloat("end",end);  }}  }
class C{  public static void main(String[] args){  MousePicking simulation=new MousePicking();  simulation.run();}  }
class C{  public @NonNull ChargeRequest.Builder customerId(@Nullable String customerId){  this.customerId=customerId;  return this;}  }
class C{  BitMatrix buildFunctionPattern(){  int dimension=getDimensionForVersion();  BitMatrix bitMatrix=new BitMatrix(dimension);  bitMatrix.setRegion(0,0,9,9);  bitMatrix.setRegion(dimension - 8,0,8,9);  bitMatrix.setRegion(0,dimension - 8,9,8);  int max=alignmentPatternCenters.length;  for (int x=0; x < max; x++) {    int i=alignmentPatternCenters[x] - 2;    for (int y=0; y < max; y++) {      if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {        continue;      }      bitMatrix.setRegion(alignmentPatternCenters[y] - 2,i,5,5);    }  }  bitMatrix.setRegion(6,9,1,dimension - 17);  bitMatrix.setRegion(9,6,dimension - 17,1);  if (versionNumber > 6) {    bitMatrix.setRegion(dimension - 11,0,3,6);    bitMatrix.setRegion(0,dimension - 11,6,3);  }  return bitMatrix;}  }
class C{  @Override public void validate(String content,ValidationContext context) throws InvalidDatatypeValueException {  if (!XML11Char.isXML11ValidNmtoken(content)) {    throw new InvalidDatatypeValueException("NMTOKENInvalid",new Object[]{content});  }}  }
class C{  public boolean isPrivate(){  return Modifier.isPrivate(this.getModifiers());}  }
class C{  public String process(Item item) throws ProcessException {  String name=item.getFeatures().getString("name");  String dc=name.toLowerCase();  if (DIGITS_PATTERN.matcher(dc).matches()) {    return "numeric";  } else   if (DOUBLE_PATTERN.matcher(dc).matches()) {    return "number";  } else   if (months.contains(dc)) {    return "month";  } else   if (days.contains(dc)) {    return "day";  } else   if (dc.equals("a")) {    return "a";  } else   if (dc.equals("flight")) {    return "flight";  } else   if (dc.equals("to")) {    return "to";  } else {    return "_other_";  }}  }
class C{  protected PagesParseWikiQuery text(String value){  return unsafeParam("text",value);}  }
class C{  public void addRecognizedProperties(String[] propertyIds){  int propertyIdsCount=propertyIds != null ? propertyIds.length : 0;  for (int i=0; i < propertyIdsCount; i++) {    String propertyId=propertyIds[i];    if (!fRecognizedProperties.contains(propertyId)) {      fRecognizedProperties.add(propertyId);    }  }}  }
class C{  public java_cup.runtime.Symbol scan() throws java.lang.Exception {  return scanner.next_token();}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {  np.matchIgnoreCase("set nucleotideColors=");  String value=np.getWordMatchesIgnoringCase(Basic.toString(ColorSchemeNucleotides.getNames()," "));  np.matchIgnoreCase(";");  AlignmentViewer viewer=(AlignmentViewer)getViewer();  viewer.setNucleotideColoringScheme(value);  viewer.setShowAminoAcids(viewer.isShowAminoAcids());}  }
class C{  public boolean postTranslate(float dx,float dy){  Matrix matrix=new Matrix();  matrix.setValues(new float[]{1,0,dx,0,1,dy,0,0,1});  Matrix current=new Matrix();  current.setValues(MATRIX);  matrix.preConcat(current);  set(matrix);  return true;}  }
class C{  public DownloadPermission(){  super("permit");}  }
class C{  private void updateMethodToken(Method method,Object[] args){  if (mIsTokenNeedRefresh && !TextUtils.isEmpty(GlobalToken.getToken())) {    Annotation[][] annotationsArray=method.getParameterAnnotations();    Annotation[] annotations;    if (annotationsArray != null && annotationsArray.length > 0) {      for (int i=0; i < annotationsArray.length; i++) {        annotations=annotationsArray[i];        for (        Annotation annotation : annotations) {          if (annotation instanceof Query) {            if (TOKEN.equals(((Query)annotation).value())) {              args[i]=GlobalToken.getToken();            }          }        }      }    }    mIsTokenNeedRefresh=false;  }}  }
class C{  public Map<String,Object> findParseBulletList(String text,boolean recurse){  if (recurse == true) {    throw new UnsupportedOperationException("findParseBulletList doesn't recurse at the moment, ambiguous");  }  Matcher m=bulletPat.matcher(text);  if (m.find()) {    Map<String,Object> listInfo=FtlDocFileParser.makeObjectMap();    int textStartIndex=m.start();    int textEndIndex=text.length();    int indentSize=m.group(1).length();    msgHandler.logDebug("====================================\n" + "findParseBulletList: found bullet match: '" + m.group() + "'\n"+ "====================================");    String listText=text.substring(textStartIndex);    Pattern listLinePat;    if (indentSize > 0) {      listLinePat=Pattern.compile("^[ ]{" + indentSize + "}([* ])[ ](.*)$");    } else {      listLinePat=Pattern.compile("^([* ])[ ](.*)$");    }    msgHandler.logDebug("Pattern: " + listLinePat.toString());    List<Object> listItemTexts=new LinkedList<>();    String listItemText=null;    int lineCharsConsumed=0;    int numLinesConsumed=0;    String[] lines=listText.split("\n");    for (    String line : lines) {      Matcher linem=listLinePat.matcher(line);      if (linem.matches()) {        lineCharsConsumed+=line.length();        numLinesConsumed+=1;        String firstChar=linem.group(1);        String lineText=linem.group(2);        if ("*".equals(firstChar)) {          if (listItemText != null) {            listItemTexts.add(cleanTextValueSafe(listItemText));          }          listItemText=lineText;        } else {          if (listItemText == null) {            throw new IllegalStateException("Error parsing bullet lists... regexp not working");          }          listItemText+="\n" + lineText;        }      } else {        break;      }    }    if (listItemText != null) {      listItemTexts.add(cleanTextValueSafe(listItemText));    }    int charsConsumed;    if (numLinesConsumed >= lines.length) {      charsConsumed=lineCharsConsumed + ("\n".length() * (numLinesConsumed - 1));    } else {      charsConsumed=lineCharsConsumed + ("\n".length() * numLinesConsumed);    }    textEndIndex=textStartIndex + charsConsumed;    List<Object> items=listItemTexts;    if (text.contains("generic field arrangement of no specific pattern and no")) {      msgHandler.logDebug("FOUND PROBLEMATIC");    }    msgHandler.logDebug("text length: " + text.length() + " startIndex: "+ textStartIndex+ " endIndex: "+ textEndIndex);    listInfo.put("items",items);    listInfo.put("startIndex",textStartIndex);    listInfo.put("endIndex",textEndIndex);    listInfo.put("type","list");    return listInfo;  } else {    return null;  }}  }
class C{  public void copy(Split split){  setA(split.getA());  setB(split.getB());  setWeight(split.getWeight());  weightList.addAll(split.weightList);}  }
class C{  public <T>T inject(Class<T> clazz,FramePath framePath){  final ElementLocatorFactory elementLocatorFactory=new DefaultElementLocatorFactory(webDriver);  stack.push(new PageObjectContext(elementLocatorFactory,framePath));  try {    return injector.getInstance(clazz);  }  finally {    stack.pop();  }}  }
class C{  public EventDrivenSpaceRemotingEntry(){  setNOWriteLeaseMode(true);  makeTransient();  setInvocation(Boolean.TRUE);}  }
class C{  public static boolean isEnRoute(String cc){  String first4digs=cc.substring(0,4);  if ((cc.length() == 15) && (first4digs.equals("2014") || first4digs.equals("2149")))   return isCreditCard(cc);  return false;}  }
class C{  @Override public void attributeSelection(String field){  if (this.spinner != null) {    this.spinner.setEnabled(field == null);  }}  }
class C{  @Override public void deactivate(){}  }
class C{  @Override protected boolean readIntoBuffer(int minLength){  if (bufferSpaceLeft() < minLength) {    increaseBufferSize(minLength + currentlyInBuffer());  } else   if (buf.length - writePos < minLength) {    compact();  }  int readSum=0;  while (readSum < minLength && p < datagrams.length) {    if (q >= datagrams[p].length) {      p++;      q=0;    } else {      Datagram next=datagrams[p][q];      int length=(int)next.getDuration();      if (buf.length < writePos + length) {        increaseBufferSize(writePos + length);      }      int read=readDatagram(next,buf,writePos);      if (q == 0 && p > 0 && rightContexts[p - 1] != null) {        new DynamicTwoHalvesWindow(Window.HANNING).applyInlineLeftHalf(buf,writePos,read);        double[] context=new double[(int)rightContexts[p - 1].getDuration()];        readDatagram(rightContexts[p - 1],context,0);        new DynamicTwoHalvesWindow(Window.HANNING).applyInlineRightHalf(context,0,context.length);        for (int i=0, iMax=Math.min(read,context.length); i < iMax; i++) {          buf[writePos + i]+=context[i];        }      }      writePos+=read;      readSum+=read;      totalRead+=read;      q++;    }  }  if (dataProcessor != null) {    dataProcessor.applyInline(buf,writePos - readSum,readSum);  }  return readSum >= minLength;}  }
class C{  public static void convert(String inFileName,String outFileName,int cepstrumOrder) throws IOException {  ESTTrackReader etr=new ESTTrackReader(inFileName);  float[][] lpcc=convertData(etr.getFrames(),cepstrumOrder);  ESTTrackWriter etw=new ESTTrackWriter(etr.getTimes(),lpcc,"lpcc");  etw.doWriteAndClose(outFileName,etr.isBinary(),etr.isBigEndian());}  }
class C{  TaskManager.Task[] createTasks(){  TaskManager.Task[] tmp=new TaskManager.Task[handles.length];  for (int i=0; i < handles.length; i++) {    tmp[i]=new ParticipantTask(getPool(),getMgr(),this,handles[i]);  }  return tmp;}  }
class C{  public final CharSequence yytext(){  return zzBuffer.subSequence(zzStartRead,zzMarkedPos);}  }
class C{  private static boolean isPathCharacter(char p_char){  return (p_char <= '~' && (fgLookupTable[p_char] & MASK_PATH_CHARACTER) != 0);}  }
class C{  public ConfigurationParser(ClassLoader loader) throws ParserConfigurationException {  this(false,loader);}  }
class C{  public static KeyCombination translateAccelerator(KeyStroke acceleratorKey){  final List<KeyCombination.Modifier> modifiers=new ArrayList<>();  if ((acceleratorKey.getModifiers() & java.awt.event.InputEvent.SHIFT_DOWN_MASK) != 0)   modifiers.add(KeyCombination.SHIFT_DOWN);  if ((acceleratorKey.getModifiers() & java.awt.event.InputEvent.CTRL_DOWN_MASK) != 0)   modifiers.add(KeyCombination.CONTROL_DOWN);  if ((acceleratorKey.getModifiers() & java.awt.event.InputEvent.ALT_DOWN_MASK) != 0)   modifiers.add(KeyCombination.ALT_DOWN);  if ((acceleratorKey.getModifiers() & InputEvent.META_DOWN_MASK) != 0)   modifiers.add(KeyCombination.META_DOWN);  KeyCode keyCode=Utilities.getKeyCodeFX(acceleratorKey.getKeyCode());  return new KeyCodeCombination(keyCode,modifiers.toArray(new KeyCombination.Modifier[modifiers.size()]));}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  public void stopAutoScroll(){  isAutoScroll=false;  mCircleHandler.removeCallbacksAndMessages(null);}  }
class C{  public void close(){  finished=true;  IOUtils.closeQuietly(bufferedReader);  cachedLine=null;}  }
class C{  Optional<TimeToIdlePolicy<K,R>> makeTimeToIdlePolicy(MultiwayPoolBuilder<? super K,? super R> builder){  if (builder.expireAfterAccessNanos == -1) {    return Optional.absent();  }  TimeToIdlePolicy<K,R> policy=new TimeToIdlePolicy<K,R>(builder.expireAfterAccessNanos,builder.getTicker(),new IdleEvictionListener());  return Optional.of(policy);}  }
class C{  public DataTagValueValidator(final EquipmentLoggerFactory equipmentLoggerFactory){  this.equipmentLogger=equipmentLoggerFactory.getEquipmentLogger(getClass());}  }
class C{  public GroupsUnbanUserQuery unbanUser(UserActor actor,int groupId,int userId){  return new GroupsUnbanUserQuery(getClient(),actor,groupId,userId);}  }
class C{  @deprecated public boolean hasNext(){  if (this.nextChar == -1) {    findNextChar();  }  return this.nextChar != -1;}  }
class C{  public static double dotProduct(final Quaternion q1,final Quaternion q2){  return q1.getQ0() * q2.getQ0() + q1.getQ1() * q2.getQ1() + q1.getQ2() * q2.getQ2() + q1.getQ3() * q2.getQ3();}  }
class C{  protected Dfp(final DfpField field,byte x){  this(field,(long)x);}  }
class C{  public void actionPerformed(ActionEvent ev){  execute("set index=" + CalculateEcologicalIndices.GOODALL + ";");}  }
class C{  public XHTMLSerializer(OutputStream output,OutputFormat format){  super(true,format != null ? format : new OutputFormat(Method.XHTML,null,false));  setOutputByteStream(output);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_AlwaysResist_ME_TO_B(String skilltarget,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1200483,skilltarget,skillcaster,skillname);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public void testRequiredProjects() throws IOException {  VirtualFile project1=createGradleProjectToImport(dir,module(1));  VirtualFile project2=createGradleProjectToImport(dir,module(2),module(1));  assert project1 != null && project2 != null : "Something wrong with the setup";  configureTopLevelProject(dir,Arrays.asList(module(1),module(2)),Collections.<String>emptySet());  Map<String,VirtualFile> projects=moduleListToMap(GradleModuleImporter.getRelatedProjects(project2,getProject()));  assertEquals(2,projects.size());  assertEquals(project1,projects.get(pathToGradleName(module(1))));  assertEquals(project2,projects.get(pathToGradleName(module(2))));}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (!(obj instanceof AbsoluteTableIdentifier)) {    return false;  }  AbsoluteTableIdentifier other=(AbsoluteTableIdentifier)obj;  if (carbonTableIdentifier == null) {    if (other.carbonTableIdentifier != null) {      return false;    }  } else   if (!carbonTableIdentifier.equals(other.carbonTableIdentifier)) {    return false;  }  if (storePath == null) {    if (other.storePath != null) {      return false;    }  } else   if (!storePath.equals(other.storePath)) {    return false;  }  return true;}  }
class C{  public JsonWriter endObject() throws IOException {  return close(EMPTY_OBJECT,NONEMPTY_OBJECT,"}");}  }
class C{  public ServerServiceDefinition intercept(ServerServiceDefinition serviceDef){  return ServerInterceptors.intercept(serviceDef,this);}  }
class C{  public static void moveDirectoryToDirectory(File src,File destDir,boolean createDestDir) throws IOException {  if (src == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination directory must not be null");  }  if (!destDir.exists() && createDestDir) {    destDir.mkdirs();  }  if (!destDir.exists()) {    throw new FileNotFoundException("Destination directory '" + destDir + "' does not exist [createDestDir="+ createDestDir+ "]");  }  if (!destDir.isDirectory()) {    throw new IOException("Destination '" + destDir + "' is not a directory");  }  moveDirectory(src,new File(destDir,src.getName()));}  }
class C{  public void rotateZ(double theta){  Matrix3D tmp=new Matrix3D();  double c=Math.cos(theta);  double s=Math.sin(theta);  tmp.set(0,0,c);  tmp.set(0,1,-s);  tmp.set(1,0,s);  tmp.set(1,1,c);  preMultiply(tmp);}  }
class C{  public ByteColumn(int nrows){  this(nrows,nrows,(byte)0);}  }
class C{  public static void makeUnderlinedTextClickable(TextView textView,ClickableSpan onclick){  SpannedString string=(SpannedString)textView.getText();  int underlineStart=string.nextSpanTransition(0,string.length(),UnderlineSpan.class);  int underlineEnd=string.nextSpanTransition(underlineStart,string.length(),UnderlineSpan.class);  SpannableString ss=new SpannableString(string);  ss.setSpan(onclick,underlineStart,underlineEnd,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);  textView.setText(ss);  textView.setMovementMethod(LinkMovementMethod.getInstance());}  }
class C{  @deprecated public boolean isNumeric(){  return DateTimePatternGenerator.types[this.canonicalIndex][2] > 0;}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute(getSyntax());}  }
class C{  private static ExternalSystem resetNTLMFields(ExternalSystem input){  input.setUsername(null);  input.setPassword(null);  input.setDomain(null);  return input;}  }
class C{  public static <T>IOrderedList<T> createOrderedList(){  return new ExternallyLockedStoredList<T>(false);}  }
class C{  public Set<Map.Entry<String,JsonElement>> entrySet(){  return members.entrySet();}  }
class C{  static int readUnsignedShort(final byte[] b,final int index){  return ((b[index] & 0xFF) << 8) | (b[index + 1] & 0xFF);}  }
class C{  public static String removeFileExtension(String s){  if (s == null) {    return null;  }  String separator=System.getProperty("file.separator");  String filename;  int lastSeparatorIndex=s.lastIndexOf(separator);  if (lastSeparatorIndex == -1) {    filename=s;  } else {    filename=s.substring(lastSeparatorIndex + 1);  }  return filename;}  }
class C{  public Matrix4f invert(){  return invert(null);}  }
class C{  public void showPeekPromo(){  getPeekPromoControl().show();}  }
class C{  public static void showInternalError(String message){  showNotification(title,"Internal error: " + message,Mode.error,Pos.BOTTOM_LEFT,60000);}  }
class C{  private void startInteraction(@SwingCoordinate int x,@SwingCoordinate int y,@Nullable Interaction interaction,int modifiers){  if (myCurrentInteraction != null) {    finishInteraction(x,y,modifiers,true);    assert myCurrentInteraction == null;  }  if (interaction != null) {    myCurrentInteraction=interaction;    myCurrentInteraction.begin(x,y,modifiers);    myLayers=interaction.createOverlays();  }}  }
class C{  public boolean tTest(final double mu,final double[] sample,final double alpha) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  checkSignificanceLevel(alpha);  return tTest(mu,sample) < alpha;}  }
class C{  public AudioGetUploadServerQuery(VkApiClient client,UserActor actor){  super(client,"audio.getUploadServer",GetUploadServerResponse.class);  accessToken(actor.getAccessToken());}  }
class C{  protected String resolveExternalPublic(String publicId,String resolver) throws IOException {  Resolver r=queryResolver(resolver,"fpi2l",publicId,null);  if (r != null) {    return r.resolvePublic(publicId,null);  } else {    return null;  }}  }
class C{  public void stopSpinning(){  spinHandler.sendEmptyMessageDelayed(1,200);}  }
class C{  public AdsGetAdsTargetingQuery includeDeleted(Boolean value){  return unsafeParam("include_deleted",value);}  }
class C{  private static int calculateTotalBytes(ByteBuffer[] byteBufferArr){  int total=0;  for (int index=0; index < byteBufferArr.length; index++) {    total+=byteBufferArr[index].capacity();  }  return total;}  }
class C{  public static void moveDirectory(File srcDir,File destDir) throws IOException {  if (srcDir == null) {    throw new NullPointerException("Source must not be null");  }  if (destDir == null) {    throw new NullPointerException("Destination must not be null");  }  if (!srcDir.exists()) {    throw new FileNotFoundException("Source '" + srcDir + "' does not exist");  }  if (!srcDir.isDirectory()) {    throw new IOException("Source '" + srcDir + "' is not a directory");  }  if (destDir.exists()) {    throw new FileExistsException("Destination '" + destDir + "' already exists");  }  boolean rename=srcDir.renameTo(destDir);  if (!rename) {    if (destDir.getCanonicalPath().startsWith(srcDir.getCanonicalPath())) {      throw new IOException("Cannot move directory: " + srcDir + " to a subdirectory of itself: "+ destDir);    }    copyDirectory(srcDir,destDir);    deleteDirectory(srcDir);    if (srcDir.exists()) {      throw new IOException("Failed to delete original directory '" + srcDir + "' after copy to '"+ destDir+ "'");    }  }}  }
class C{  public void requestAutoFocus(Handler handler,int message){  if (camera != null && previewing) {    autoFocusCallback.setHandler(handler,message);    camera.autoFocus(autoFocusCallback);  }}  }
class C{  public SecureGetSMSHistoryQuery dateTo(Integer value){  return unsafeParam("date_to",value);}  }
class C{  @Override public double evaluate(final double[] values,final int begin,final int length) throws MathIllegalArgumentException {  double product=Double.NaN;  if (MathArrays.verifyValues(values,begin,length,true)) {    product=1.0;    for (int i=begin; i < begin + length; i++) {      product*=values[i];    }  }  return product;}  }
class C{  public boolean isMessage(){  return kind == Type.TYPE_MESSAGE;}  }
class C{  public static double hypotenuse(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  public String renderAsString(String resourceName,String screenName) throws GeneralException, IOException, SAXException, ParserConfigurationException {  return render(resourceName,screenName,true);}  }
class C{  public AdsRemoveOfficeUsersQuery(VkApiClient client,UserActor actor,int accountId,String ids){  super(client,"ads.removeOfficeUsers",Boolean.class);  accessToken(actor.getAccessToken());  accountId(accountId);  ids(ids);}  }
class C{  @Override public void redoAction(UndoInterface undoRedoObject){  if (undoRedoObject != null) {    if (undoRedoObject.getNewValue() instanceof TimePeriod) {      TimePeriod newValue=(TimePeriod)undoRedoObject.getNewValue();      populateDuration(start,newValue.getStart());      populateDuration(end,newValue.getEnd());    }  }}  }
class C{  protected void handleIOException(IOException e) throws IOException {  throw e;}  }
class C{  public UsersSearchQuery birthMonth(Integer value){  return unsafeParam("birth_month",value);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  execute("set drawer=" + ViewerBase.DiagramType.RectangularPhylogram + ";");}  }
class C{  public static Pattern compile(String pattern){  return Pattern.compile(URIPattern.escape(pattern));}  }
class C{  public boolean isMotorEnabled(){  return this.motorEnabled;}  }
class C{  public CreateSiteWindow selectTemplateContaining(String templateName){  WebElement template=currentWindow.findElement(By.xpath(".//div[contains(@class, " + "'template-title') and contains(text(), '" + templateName + "')]"));  template.click();  return this;}  }
class C{  public static boolean isMetaEndOfTrack(MidiMessage midiMsg){  if (midiMsg.getLength() != 3 || midiMsg.getStatus() != MetaMessage.META) {    return false;  }  byte[] msg=midiMsg.getMessage();  return ((msg[1] & 0xFF) == META_END_OF_TRACK_TYPE) && (msg[2] == 0);}  }
class C{  public static double distance(double[] p1,double[] p2){  double sum=0;  for (int i=0; i < p1.length; i++) {    final double dp=p1[i] - p2[i];    sum+=dp * dp;  }  return Math.sqrt(sum);}  }
class C{  protected void syncTo(Set<TokenKind> terminatingTokens){  while (!atAnyOfTokens(terminatingTokens)) {    builder.advanceLexer();  }}  }
class C{  @Nullable static Bitmap capture(View view){  if (view.getWidth() == 0 || view.getHeight() == 0) {    return null;  }  Bitmap bitmap=Bitmap.createBitmap(view.getWidth(),view.getHeight(),Bitmap.Config.RGB_565);  Canvas canvas=new Canvas(bitmap);  view.draw(canvas);  return bitmap;}  }
class C{  public synchronized void clearStaleEntries(){  if (_logger.isLoggable(Level.FINER))   _logger.finer("clearing stale entries from stub cache");  List<StubId> staleEntries=new ArrayList<StubId>();  for (  Map.Entry<StubId,TouchedItem<Object>> entry : _cachedStubs.entrySet()) {    if (!entry.getValue().clearTouched())     staleEntries.add(entry.getKey());  }  if (_logger.isLoggable(Level.FINER)) {    int staleEntriesCount=staleEntries.size();    if (staleEntriesCount > 0)     _logger.finer("found " + staleEntriesCount + " stale entries in cache, removing them"); else     _logger.finer("no stale entries found in cache");  }  for (  StubId id : staleEntries) {    _cachedStubs.remove(id);    for (    Set<StubId> set : _classLoaderContext.values())     set.remove(id);  }}  }
class C{  public static Bitmap toBitmap(byte[] bytes){  return toBitmap(bytes,-1,-1);}  }
class C{  public void close() throws IOException {  infoSection.syncLocationManager2InfoSection(locationManager);switch (textStoragePolicy) {case Embed:    infoSection.setDataDumpSectionEnd(fileWriter.getPosition());  infoSection.setDataIndexSectionStart(fileWriter.getPosition());tmpWriter.close();InputReader indexReader=rma2File.getTmpIndexFileReader();FileChannel indexChannel=indexReader.getChannel();fileWriter.write(RMA2File.CHECK_BYTE);final int bufferSize=1000000;byte[] buffer=new byte[bufferSize];long length=indexReader.length();long total=1;for (long i=0; i < length; i+=bufferSize) {int count=indexReader.read(buffer,0,bufferSize);if (total + count > length) count=(int)(length - total);if (count > 0) {fileWriter.write(buffer,0,count);total+=count;}}infoSection.setDataIndexSectionEnd(fileWriter.getPosition());infoSection.setAuxiliaryDataStart(fileWriter.getPosition());infoSection.setAuxiliaryDataEnd(fileWriter.getPosition());indexReader.close();indexChannel.close();rma2File.getIndexTmpFile().delete();break;case InRMAZ:dumpWriter.close();infoSection.setDataIndexSectionEnd(fileWriter.getPosition());infoSection.setAuxiliaryDataStart(fileWriter.getPosition());infoSection.setAuxiliaryDataEnd(fileWriter.getPosition());break;case Reference:infoSection.setDataIndexSectionEnd(fileWriter.getPosition());infoSection.setAuxiliaryDataStart(fileWriter.getPosition());infoSection.setAuxiliaryDataEnd(fileWriter.getPosition());break;default :throw new IOException("Unknown textStoragePolicy: " + textStoragePolicy);}infoSection.setNumberOfReads(numberOfReads);infoSection.setNumberOfMatches(numberOfMatches);infoSection.write(fileWriter);fileWriter.close();}  }
class C{  public static void deleteOwner(AbstractAI ai2){  ai2.getOwner().getController().onDelete();}  }
class C{  @SuppressWarnings("unchecked") public ValueStore branch(long run){  V o=get();  if (o != null)   backedStore.put(new SequenceStateKey(key.topic,key.partition,run),o);  return new ValueStore(this.key.topic,this.key.partition,run,this.backedStore);}  }
class C{  public synchronized void attach(SlabRef slab){  checkState(!isAttached());  _slab=slab;  _slabConsumed=0;  _slabExpiresAt=System.currentTimeMillis() + Constants.SLAB_ROTATE_TTL.getMillis();}  }
class C{  @ObjectiveCName("send:") public void send(Object data){  if (this.isComplete) {    throw new DeepstreamException("Rpc " + this.name + " already completed");  }  String typedData=MessageBuilder.typed(data);  this.connection.sendMsg(Topic.RPC,Actions.RESPONSE,new String[]{this.name,this.correlationId,typedData});  this.isComplete=true;}  }
class C{  public static double[] diff(double[] a){  if (a == null) {    return null;  } else   if (a.length < 2) {    return new double[0];  }  double[] b=new double[a.length - 1];  for (int i=0; i < a.length - 1; i++) {    b[i]=a[i + 1] - a[i];  }  return b;}  }
class C{  @Override public void endDocument() throws SAXException {}  }
class C{  public Matrix3f invert(Matrix3f store){  if (store == null) {    store=new Matrix3f();  }  float det=determinant();  if (FastMath.abs(det) <= FastMath.FLT_EPSILON) {    return store.zero();  }  store.m00=m11 * m22 - m12 * m21;  store.m01=m02 * m21 - m01 * m22;  store.m02=m01 * m12 - m02 * m11;  store.m10=m12 * m20 - m10 * m22;  store.m11=m00 * m22 - m02 * m20;  store.m12=m02 * m10 - m00 * m12;  store.m20=m10 * m21 - m11 * m20;  store.m21=m01 * m20 - m00 * m21;  store.m22=m00 * m11 - m01 * m10;  store.multLocal(1f / det);  return store;}  }
class C{  public static boolean similar(ItemStack a,ItemStack b){  if (a == null || b == null) {    return a == b;  }  return a.getItem() == b.getItem() && a.getItemDamage() == b.getItemDamage();}  }
class C{  public static byte[] toByteArray(URL url) throws IOException {  URLConnection conn=url.openConnection();  try {    return IOUtils.toByteArray(conn);  }  finally {    close(conn);  }}  }
class C{  protected void close(){  try {    if (to != null)     to.close();    if (from != null)     from.close();  } catch (  IOException e) {  }  if (process != null)   process.destroy();  process=null;  to=null;  from=null;  errorLogger=null;}  }
class C{  private boolean isIncludedColumn(double[] column,RealMatrix searchMatrix,double tolerance){  boolean found=false;  int i=0;  while (!found && i < searchMatrix.getColumnDimension()) {    double multiplier=1.0;    boolean matching=true;    int j=0;    while (matching && j < searchMatrix.getRowDimension()) {      double colEntry=searchMatrix.getEntry(j,i);      if (FastMath.abs(multiplier - 1.0) <= FastMath.ulp(1.0) && FastMath.abs(colEntry) > 1E-14 && FastMath.abs(column[j]) > 1e-14) {        multiplier=colEntry / column[j];      }      if (FastMath.abs(column[j] * multiplier - colEntry) > tolerance) {        matching=false;      }      j++;    }    found=matching;    i++;  }  return found;}  }
class C{  @Override public void apply(NexusStreamParser np) throws Exception {}  }
class C{  @Deprecated public boolean relativeCatalogs(){  return getRelativeCatalogs();}  }
class C{  public synchronized void flush() throws IOException {  checkNotClosed();  trimToSize();  trimToFileCount();  journalWriter.flush();}  }
class C{  private boolean endCondCheck(){  Conditions skillConditions=skillTemplate.getEndConditions();  return skillConditions != null ? skillConditions.validate(this) : true;}  }
class C{  public final boolean isFallbackFileEmpty(){  return !((fFileController.getNumberOfLines()) > 0);}  }
class C{  public RedundancyBasedSelector(String sPreexistingText,int iMinNGram,int iMaxNGram,int iDist,double dRedundancyThreshold){  Comparator=new NGramCachedNonSymmGraphComparator();  SentenceRepresentationFilter=new IdentityObjectFilter<DocumentNGramGraph>();  PreexistingText=sPreexistingText;  RedundancyThreshold=dRedundancyThreshold;  MinNGram=iMinNGram;  MaxNGram=iMaxNGram;  Dist=iDist;}  }
class C{  public void remove(IObjectInfo<T> oi){  remove_impl((ObjectInfo<T>)oi);}  }
class C{  public static Application defaultApplication(){  return defaultApplication;}  }
class C{  @Deprecated public static void write(StringBuffer data,Writer output) throws IOException {  if (data != null) {    output.write(data.toString());  }}  }
class C{  public static Object condition(String condititon,Object trueValue,Object falseValue){  return ExpressionUtils.isTrue(condititon,null) ? trueValue : falseValue;}  }
class C{  Domino<T,R> newThread(){  return schedule(new NewThreadScheduler());}  }
class C{  public static void showProfile(android.support.v4.app.Fragment fragment,@Nullable HashMap<String,String> extras){  showProfile(fragment,AirMap.getUserId(),extras);}  }
class C{  private static Line[] boxBoundary(final double xMin,final double xMax,final double yMin,final double yMax,final double tolerance){  if ((xMin >= xMax - tolerance) || (yMin >= yMax - tolerance)) {    return null;  }  final Vector2D minMin=new Vector2D(xMin,yMin);  final Vector2D minMax=new Vector2D(xMin,yMax);  final Vector2D maxMin=new Vector2D(xMax,yMin);  final Vector2D maxMax=new Vector2D(xMax,yMax);  return new Line[]{new Line(minMin,maxMin,tolerance),new Line(maxMin,maxMax,tolerance),new Line(maxMax,minMax,tolerance),new Line(minMax,minMin,tolerance)};}  }
class C{  static public String encode(byte[] binaryData){  if (binaryData == null)   return null;  int lengthData=binaryData.length;  int lengthEncode=lengthData * 2;  char[] encodedData=new char[lengthEncode];  int temp;  for (int i=0; i < lengthData; i++) {    temp=binaryData[i];    if (temp < 0)     temp+=256;    encodedData[i * 2]=lookUpHexAlphabet[temp >> 4];    encodedData[i * 2 + 1]=lookUpHexAlphabet[temp & 0xf];  }  return new String(encodedData);}  }
class C{  public void reduceSelection(int toRow,int toCol){  if (toRow > totalRows)   toRow=totalRows;  if (toCol > totalCols)   toCol=totalCols;  boolean firstRowBest=false;  if (Math.abs(toRow - firstRow) < Math.abs(toRow - lastRow)) {    firstRowBest=true;  }  int bestRowScore=Math.min(Math.abs(toRow - firstRow),Math.abs(toRow - lastRow));  boolean firstColBest=false;  if (Math.abs(toCol - firstCol) < Math.abs(toCol - lastCol)) {    firstColBest=true;  }  int bestColScore=Math.min(Math.abs(toCol - firstCol),Math.abs(toCol - lastCol));  if (toRow != -1 && (toCol == -1 || bestRowScore < bestColScore)) {    if (firstRowBest)     firstRow=toRow; else     lastRow=toRow;    fireSelectionChanged();  } else   if (toCol != -1) {    if (firstColBest)     firstCol=toCol; else     lastCol=toCol;    fireSelectionChanged();  }}  }
class C{  private void updateSymbol(){  if (!Controller.getInstance().isPopulating()) {    Stroke stroke=getStroke();    Symbolizer symbolizer=SelectedSymbol.getInstance().getSymbolizer();    if (symbolizer instanceof PointSymbolizer) {      PointSymbolizer pointSymbol=(PointSymbolizer)symbolizer;      Graphic graphic=pointSymbol.getGraphic();      GraphicalSymbol symbol=graphic.graphicalSymbols().get(0);      if (symbol instanceof MarkImpl) {        MarkImpl markerSymbol=(MarkImpl)symbol;        markerSymbol.setStroke(stroke);        this.fireUpdateSymbol();      }    } else     if (symbolizer instanceof LineSymbolizer) {      LineSymbolizer lineSymbol=(LineSymbolizer)symbolizer;      lineSymbol.setStroke(stroke);      this.fireUpdateSymbol();    } else     if (symbolizer instanceof PolygonSymbolizer) {      PolygonSymbolizer polygonSymbol=(PolygonSymbolizer)symbolizer;      polygonSymbol.setStroke(stroke);      this.fireUpdateSymbol();    }  }}  }
class C{  public E removeMinimum(){  if (this.root == null)   return null;  return this.removeMinimum(this.root).comparable;}  }
class C{  public boolean clearTouched(){  boolean result=_touched;  _touched=false;  return result;}  }
class C{  public PointsToSet reachingObjects(Local l,SootField f){  return reachingObjects(f);}  }
class C{  public int size(){  return backedMap.size();}  }
class C{  public PhotosReportQuery report(UserActor actor,int ownerId,int photoId){  return new PhotosReportQuery(getClient(),actor,ownerId,photoId);}  }
class C{  @Override public void startElement(QName element,XMLAttributes attributes,Augmentations augs) throws XNIException {  fDepth++;  if (fAnnotationDepth == -1) {    if (element.uri == SchemaSymbols.URI_SCHEMAFORSCHEMA && element.localpart == SchemaSymbols.ELT_ANNOTATION) {      if (fGenerateSyntheticAnnotation) {        if (fSawAnnotation.size() > 0) {          fSawAnnotation.pop();        }        fSawAnnotation.push(true);      }      fAnnotationDepth=fDepth;      schemaDOM.startAnnotation(element,attributes,fNamespaceContext);      fCurrentAnnotationElement=schemaDOM.startElement(element,attributes,fLocator.getLineNumber(),fLocator.getColumnNumber(),fLocator.getCharacterOffset());      return;    } else     if (element.uri == SchemaSymbols.URI_SCHEMAFORSCHEMA && fGenerateSyntheticAnnotation) {      fSawAnnotation.push(false);      fHasNonSchemaAttributes.push(hasNonSchemaAttributes(element,attributes));    }  } else   if (fDepth == fAnnotationDepth + 1) {    fInnerAnnotationDepth=fDepth;    schemaDOM.startAnnotationElement(element,attributes);  } else {    schemaDOM.startAnnotationElement(element,attributes);    return;  }  schemaDOM.startElement(element,attributes,fLocator.getLineNumber(),fLocator.getColumnNumber(),fLocator.getCharacterOffset());}  }
class C{  public static void checkPolygon(List<Coordinate> geometry,Coordinate takeOffPoint,List<MappingService.AirMapAirspaceType> types,List<MappingService.AirMapAirspaceType> ignoredTypes,boolean showWeather,@Nullable Date date,@Nullable AirMapCallback<AirMapStatus> callback){  StatusService.checkPolygon(geometry,takeOffPoint,types,ignoredTypes,showWeather,date,callback);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_HealCastorOnTargetDead_INTERVAL_HEAL_TO_ME(int num0,String skillname){  return new SM_SYSTEM_MESSAGE(1201063,num0,skillname);}  }
class C{  public static Interface create(ProtoFile parent,ServiceDescriptorProto proto,String path){  return new Interface(parent,proto,path);}  }
class C{  private void explain(String systemId){  if (!suppressExplanation) {    System.out.println("XMLReader probably encountered bad URI in " + systemId);    System.out.println("For example, replace '/some/uri' with 'file:/some/uri'.");  }  suppressExplanation=true;}  }
class C{  public VectorialStorelessStatistic(int dimension,StorelessUnivariateStatistic univariateStatistic){  if (dimension < 1) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL,dimension,1);  }  stats=new StorelessUnivariateStatistic[dimension];  for (int i=0; i < dimension; i++) {    stats[i]=univariateStatistic.copy();  }}  }
class C{  protected static int bandwidth2kernelLength(double normalisedTransitionBandwidth){  int l=(int)(4 / normalisedTransitionBandwidth);  if (l % 2 == 0)   l++;  return l;}  }
class C{  public Z Plus(Z a,Z b){  re=a.re + b.re;  im=a.im + b.im;  return this;}  }
class C{  public String upload_file1(String group_name,long file_size,UploadCallback callback,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  String parts[]=this.upload_file(group_name,file_size,callback,file_ext_name,meta_list);  if (parts != null) {    return parts[0] + SPLIT_GROUP_NAME_AND_FILENAME_SEPERATOR + parts[1];  } else {    return null;  }}  }
class C{  public PhotosGetCommentsQueryWithExtended(VkApiClient client,UserActor actor,int photoId){  super(client,"photos.getComments",GetCommentsExtendedResponse.class);  accessToken(actor.getAccessToken());  photoId(photoId);  extended(true);}  }
class C{  public static int[] readInts(){  return readAllInts();}  }
class C{  public void reportUnmatchedRules(DiagCollector collector,ConfigLocationResolver configLocationResolver,String category){  for (  Map.Entry<RuleWrapper<RuleType>,Set<String>> unmatched : unmatchedRules.entrySet()) {    Set<String> selectors=unmatched.getValue();    selectors.remove("*");    if (!selectors.isEmpty()) {      String unmatchedSelectors=SELECTOR_JOINER.join(unmatched.getValue());      collector.addDiag(Diag.warning(configLocationResolver.getLocationInConfig(unmatched.getKey().rule,SELECTOR_FIELD_NAME),"%s rule has selector(s) '%s' that do not match and are not " + "shadowed by other rules.",category,unmatchedSelectors));    }  }}  }
class C{  public IProject[] addToWorkspace(String[] referenceStrings,ProjectSetSerializationContext context,IProgressMonitor monitor) throws TeamException {  monitor=Policy.monitorFor(monitor);  Policy.checkCanceled(monitor);  Map<IProject,LoadInfo> infoMap=new HashMap<IProject,SVNProjectSetCapability.LoadInfo>(referenceStrings.length);  IProject[] projects=asProjects(context,referenceStrings,infoMap);  projects=confirmOverwrite(context,projects);  if (projects == null) {    return new IProject[0];  }  try {    return checkout(projects,infoMap,monitor);  } catch (  MalformedURLException e) {    throw SVNException.wrapException(e);  }}  }
class C{  public void initialiseByteArrayValues(int size){  if (size < 1) {    throw new IllegalArgumentException("Invalid array size");  }  byteValues=new byte[size][];  columnByteValues=new byte[size][][];}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public VideoRemoveFromAlbumQuery targetId(Integer value){  return unsafeParam("target_id",value);}  }
class C{  @Override public void actionPerformed(ActionEvent ev){  executeImmediately(getSyntax());}  }
class C{  public Gaussian(double norm,double mean,double sigma) throws MathIllegalArgumentException {  if (sigma <= 0) {    throw new MathIllegalArgumentException(LocalizedCoreFormats.NUMBER_TOO_SMALL_BOUND_EXCLUDED,sigma,0);  }  this.norm=norm;  this.mean=mean;  this.is=1 / sigma;  this.i2s2=0.5 * is * is;}  }
class C{  public static Vector3f interpolateLinear(float scale,Vector3f startValue,Vector3f endValue){  Vector3f res=new Vector3f();  res.x=interpolateLinear(scale,startValue.x,endValue.x);  res.y=interpolateLinear(scale,startValue.y,endValue.y);  res.z=interpolateLinear(scale,startValue.z,endValue.z);  return res;}  }
class C{  public static Zmat o(Zmat A) throws JampackException {  if (A.nrow != A.ncol)   throw new JampackException("Cannot compute the inverse of a rectangular matrix.");  return Solve.aib(A,Eye.o(A.nrow));}  }
class C{  public void addSorting(String structureName,String fieldName,boolean asc){  ParamValidationUtil.validateParamNotNull(fieldName,"sortBy");  String sorting="modDate".equals(fieldName) ? fieldName : structureName + "." + fieldName;  String sortingWithOrder=sorting + " " + (asc ? "asc" : "desc");  this.sortBy=UtilMethods.isSet(this.sortBy) ? this.sortBy + ", " + sortingWithOrder : sortingWithOrder;}  }
class C{  @SuppressWarnings("unchecked") public static <R>JoinObservable<R> when(Plan<R> p1,Plan<R> p2){  return from(JoinPatterns.when(p1,p2));}  }
class C{  public MarketGetAlbumByIdQuery(VkApiClient client,UserActor actor,int ownerId,List<Integer> albumIds){  super(client,"market.getAlbumById",GetAlbumByIdResponse.class);  accessToken(actor.getAccessToken());  ownerId(ownerId);  albumIds(albumIds);}  }
class C{  public synchronized static void destroy(){  if (isInitialized()) {    Map<String,DmnEngine> engines=new HashMap<String,DmnEngine>(dmnEngines);    dmnEngines=new HashMap<String,DmnEngine>();    for (    String dmnEngineName : engines.keySet()) {      DmnEngine dmnEngine=engines.get(dmnEngineName);      try {        dmnEngine.close();      } catch (      Exception e) {        log.error("exception while closing {}",(dmnEngineName == null ? "the default dmn engine" : "dmn engine " + dmnEngineName),e);      }    }    dmnEngineInfosByName.clear();    dmnEngineInfosByResourceUrl.clear();    dmnEngineInfos.clear();    setInitialized(false);  }}  }
class C{  public static Boolean isDictionaryFile(CarbonFile carbonFile){  return (!carbonFile.isDirectory()) && (carbonFile.getName().endsWith(DICTIONARY_EXT));}  }
class C{  private StyledLayerDescriptor createTestPolygon(URL url){  StyleBuilder sb=new StyleBuilder();  StyleFactory styleFactory=sb.getStyleFactory();  StyledLayerDescriptor sld=styleFactory.createStyledLayerDescriptor();  NamedLayer namedLayer=styleFactory.createNamedLayer();  sld.addStyledLayer(namedLayer);  Style style=styleFactory.createStyle();  namedLayer.addStyle(style);  List<FeatureTypeStyle> ftsList=style.featureTypeStyles();  FeatureTypeStyle fts=styleFactory.createFeatureTypeStyle();  ftsList.add(fts);  Rule rule=styleFactory.createRule();  fts.rules().add(rule);  PolygonSymbolizer polygon=styleFactory.createPolygonSymbolizer();  rule.symbolizers().add(polygon);  Graphic graphicFill1=createGraphic(url,styleFactory);  Graphic graphicFill2=createGraphic(url,styleFactory);  Graphic graphicStroke=createGraphic(url,styleFactory);  Fill fill=styleFactory.createFill(null,null,null,graphicFill1);  polygon.setFill(fill);  Stroke stroke=styleFactory.createStroke(null,null,null,null,null,null,null,graphicFill2,graphicStroke);  polygon.setStroke(stroke);  return sld;}  }
class C{  public void java_lang_Runtime_execInternal(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  helper.assignObjectTo(returnVar,Environment.v().getProcessObject());}  }
class C{  public static StorableActivityFence stopping(@ActivityType int... activityTypes){  return new StorableActivityFence(activityTypes,STOP_TYPE);}  }
class C{  protected void notifyScrollingListenersAboutEnd(){  for (  OnWheelScrollListener listener : scrollingListeners) {    listener.onScrollingFinished(this);  }}  }
class C{  public int code(){  return rawResponse.code();}  }
class C{  public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_ShapeChange_A_TO_B(String skilltarget,String value0,String skillcaster,String skillname){  return new SM_SYSTEM_MESSAGE(1201018,skilltarget,value0,skillcaster,skillname);}  }
class C{  public BoardCreateCommentQuery guid(String value){  return unsafeParam("guid",value);}  }
class C{  @Override public void modelChanged(@NotNull DesignSurface surface,@Nullable NlModel model){  setSurface(surface);  if (model != null) {    model.addListener(this);  }  computeOffsets(surface.getCurrentScreenView());  if (model != null) {    List<NlComponent> selection=model.getSelectionModel().getSelection();    if (selection.isEmpty()) {      selection=model.getComponents();    }    updateComponents(selection);  }  configureUI();  myMiniMap.repaint();}  }
class C{  public long tryReadLastConfirmed(LedgerDescriptor ledgerDesc) throws BKException {  return FutureUtils.bkResult(asyncTryReadLastConfirmed(ledgerDesc));}  }
class C{  public JsonHttpResponseHandler(){  super(DEFAULT_CHARSET);}  }
class C{  public ShapelessRecipe removeIngredient(Material ingredient){  return removeIngredient(ingredient,0);}  }
class C{  public FortDeployPokemonResponse.Result deployPokemon(Pokemon pokemon) throws LoginFailedException, RemoteServerException {  FortDeployPokemonMessage reqMsg=FortDeployPokemonMessage.newBuilder().setFortId(getId()).setPlayerLatitude(api.getLatitude()).setPlayerLongitude(api.getLongitude()).setPokemonId(pokemon.getId()).build();  ServerRequest serverRequest=new ServerRequest(RequestType.FORT_DEPLOY_POKEMON,reqMsg);  api.getRequestHandler().sendServerRequests(serverRequest);  try {    return FortDeployPokemonResponse.parseFrom(serverRequest.getData()).getResult();  } catch (  InvalidProtocolBufferException e) {    throw new RemoteServerException();  }}  }
class C{  public static JSONArray toJSONArray(JSONArray names,String string) throws JSONException {  return toJSONArray(names,new JSONTokener(string));}  }
class C{  public int hashCode(){  return (int)(hash ^ (hash >>> 32));}  }
class C{  public String makeCamelCaseNameFromTitle(String title){  StringBuilder sb=new StringBuilder();  Matcher m=simpleWordPat.matcher(title);  while (m.find()) {    String val=m.group();    if (sb.length() == 0) {      sb.append(val.toLowerCase());    } else {      sb.append(val.substring(0,1).toUpperCase());      sb.append(val.substring(1).toLowerCase());    }  }  return sb.toString();}  }
class C{  public synchronized void progressValue(int value){  if (this.progressDialog != null) {    this.progressDialog.setProgress(value);  }}  }
class C{  public Expression contains(Value fieldPath,Value value){  return new ContainsExpression(fieldPath,value);}  }
class C{  public Plugin[] loadPlugins(){  return this.pluginManager.loadPlugins(pluginFolder);}  }
class C{  public SearchUsersImplementor(SearchModel model,SearchView view){  this.model=model;  this.view=view;}  }
class C{  public String nextTo(String delimiters) throws JSONException {  char c;  StringBuilder sb=new StringBuilder();  for (; ; ) {    c=this.next();    if (delimiters.indexOf(c) >= 0 || c == 0 || c == '\n' || c == '\r') {      if (c != 0) {        this.back();      }      return sb.toString().trim();    }    sb.append(c);  }}  }
class C{  @Override public boolean isEnabled(){  if (ttfPanel != null) {    return ttfPanel.isEnabled();  }  return false;}  }
class C{  public boolean isInverted(){  return lng.isInverted();}  }
class C{  public void disableDashedHighlightLine(){  mHighlightDashPathEffect=null;}  }
class C{  public void rectValueToPixelHorizontal(RectF r){  mMatrixValueToPx.mapRect(r);  mViewPortHandler.getMatrixTouch().mapRect(r);  mMatrixOffset.mapRect(r);}  }
class C{  public boolean shouldCache(){  return this.shouldCache;}  }
class C{  @Override public void startElement(String uri,String localName,String qName,Attributes atts) throws SAXException {  writeText4Links();  if (!ignoreElement(uri,localName,qName,atts)) {    elementLevel++;    nsSupport.pushContext();    if (forceDTD && !hasOutputDTD) {      startDTD(localName == null ? qName : localName,"","");    }    write('<');    writeName(uri,localName,qName,true);    writeAttributes(atts);    if (elementLevel == 1) {      forceNSDecls();    }    if (!mOmitXHTMLNamespace || !"html".equalsIgnoreCase(localName)) {      writeNSDecls();    }    write('>');    if (htmlMode && (qName.equals("script") || qName.equals("style"))) {      cdataElement=true;    }    if (htmlMode && localName.equals("a")) {      mIgnoreChars=true;    }    super.startElement(uri,localName,qName,atts);  }}  }
class C{  public void showTimes(){  showTimesShort(0L);}  }
class C{  protected int rdbLoadTime() throws IOException {  return in.readInt(4);}  }
class C{  private void writeFlowPair(FlowPair pair,Document document,Element parentElement){  Element flowPair=document.createElement("flowpair");  parentElement.appendChild(flowPair);  writeDomainSpec(pair.getFirstDomain(),document,flowPair);  writeDomainSpec(pair.getSecondDomain(),document,flowPair);}  }
class C{  public boolean equals(Object obj){  return (this == obj || (obj instanceof BasicMethodConstraints && Arrays.equals(descs,((BasicMethodConstraints)obj).descs)));}  }
class C{  public static Bitmap makeBitmap(int minSideLength,int maxNumOfPixels,Uri uri,ContentResolver cr,boolean useNative){  ParcelFileDescriptor input=null;  try {    input=cr.openFileDescriptor(uri,"r");    BitmapFactory.Options options=null;    if (useNative) {      options=createNativeAllocOptions();    }    return makeBitmap(minSideLength,maxNumOfPixels,uri,cr,input,options);  } catch (  IOException ex) {    return null;  } finally {    closeSilently(input);  }}  }
class C{  public static void loadProperties(InputStream stream) throws IOException {  props.load(stream);  Enumeration propKeys=props.propertyNames();  while (propKeys.hasMoreElements()) {    String tmpKey=(String)propKeys.nextElement();    String tmpValue=props.getProperty(tmpKey);    tmpValue=tmpValue.trim();    props.put(tmpKey,tmpValue);  }}  }
class C{  public LeaseRenewalManager(Configuration config) throws ConfigurationException {  if (config == null)   throw new NullPointerException("config is null");  renewBatchTimeWindow=Config.getLongEntry(config,LRM,"renewBatchTimeWindow",DEFAULT_RENEW_BATCH_TIME_WINDOW,0,Long.MAX_VALUE);  renewalRTT=Config.getLongEntry(config,LRM,"roundTripTime",DEFAULT_RENEWAL_RTT,1,Long.MAX_VALUE);  TaskManager defaultTaskManager=createDefaultTaskManager();  taskManager=(TaskManager)Config.getNonNullEntry(config,LRM,"taskManager",TaskManager.class,defaultTaskManager);}  }
class C{  public boolean init(StepMetaInterface smi,StepDataInterface sdi){  meta=(CarbonSliceMergerStepMeta)smi;  data=(CarbonSliceMergerStepData)sdi;  return super.init(smi,sdi);}  }
class C{  public WallGetCommentsQueryWithExtended sort(WallGetCommentsSort value){  return unsafeParam("sort",value);}  }
class C{  public static String[] split(String str){  return split(str,ESCAPE_CHAR,COMMA);}  }
class C{  public void disableWhenHorizontalMove(boolean disable){  mDisableWhenHorizontalMove=disable;}  }
class C{  private MultivariateNormalMixtureModelDistribution create(double[] weights,double[][] means,double[][][] covariances){  final List<Pair<Double,MultivariateNormalDistribution>> mvns=new ArrayList<Pair<Double,MultivariateNormalDistribution>>();  for (int i=0; i < weights.length; i++) {    final MultivariateNormalDistribution dist=new MultivariateNormalDistribution(means[i],covariances[i]);    mvns.add(new Pair<Double,MultivariateNormalDistribution>(weights[i],dist));  }  return new MultivariateNormalMixtureModelDistribution(mvns);}  }
class C{  private static boolean checkNullForDims(Object object){  Integer[] dimensions=(Integer[])object;  for (  Integer dimension : dimensions) {    if (null != dimension) {      return false;    }  }  return true;}  }
class C{  private void performHighlightDrag(MotionEvent e){  Highlight h=mChart.getHighlightByTouchPoint(e.getX(),e.getY());  if (h != null && !h.equalTo(mLastHighlighted)) {    mLastHighlighted=h;    mChart.highlightValue(h,true);  }}  }
class C{  public static byte[] copy(byte[] src,byte[] target){  if (target.length < src.length) {    target=new byte[src.length];  }  System.arraycopy(src,0,target,0,src.length);  return target;}  }
class C{  private static UByte valueOfUnchecked(short value) throws NumberFormatException {  return VALUES[value & MAX_VALUE];}  }
class C{  @Override public boolean isDataPresent(){  return true;}  }
class C{  public Builder closeButton(Boolean closeButton){  this.closeButton=closeButton;  return this;}  }
class C{  public boolean isSetTimeout(){  return __isset_bit_vector.get(__TIMEOUT_ISSET_ID);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_EXTEND_INVENTORY_CANT_EXTEND_DUE_TO_MINIMUM_EXTEND_LEVEL_BY_THIS_NPC(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300436,value0,value1);}  }
class C{  public static String convertURLToFile(URL url){  if (url == null) {    return "";  }  return convertURLToFile(url.toString());}  }
class C{  public GroupsGetQueryWithExtended(VkApiClient client,UserActor actor){  super(client,"groups.get",GetExtendedResponse.class);  accessToken(actor.getAccessToken());  extended(true);}  }
class C{  protected void dataHasChanged(){  if (updateSymbolListener != null) {    updateSymbolListener.dataChanged(FieldIdEnum.UNKNOWN);  }}  }
class C{  private void fillDeclaredPrefixes(EndElement event){  fillDeclaredPrefixes(event.getNamespaces());}  }
class C{  public WallUnpinQuery unpin(UserActor actor,int postId){  return new WallUnpinQuery(getClient(),actor,postId);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GIVE_ITEM_PROC_NOT_ENOUGH_MONEY(DescriptionId descriptionId){  return new SM_SYSTEM_MESSAGE(1300507,descriptionId);}  }
class C{  public Builder icon(Icon icon){  this.icon=icon;  return this;}  }
class C{  public static void applyEffect(AbstractAI ai2,SkillTemplate template,Creature target){  Effect effect=new Effect(ai2.getOwner(),target,template,template.getLvl(),0);  effect.setIsForcedEffect(true);  effect.initialize();  effect.applyEffect();}  }
class C{  protected short compareOrder(DateTimeData date1,DateTimeData date2){  if (date1.position < 1) {    if (date1.year < date2.year)     return -1;    if (date1.year > date2.year)     return 1;  }  if (date1.position < 2) {    if (date1.month < date2.month)     return -1;    if (date1.month > date2.month)     return 1;  }  if (date1.day < date2.day)   return -1;  if (date1.day > date2.day)   return 1;  if (date1.hour < date2.hour)   return -1;  if (date1.hour > date2.hour)   return 1;  if (date1.minute < date2.minute)   return -1;  if (date1.minute > date2.minute)   return 1;  if (date1.second < date2.second)   return -1;  if (date1.second > date2.second)   return 1;  if (date1.utc < date2.utc)   return -1;  if (date1.utc > date2.utc)   return 1;  return 0;}  }
class C{  private Object wrapResult(Object result,Class<?> viewClass){  return new JacksonViewAware(result,viewClass);}  }
class C{  public OverlayPanelContent createNewOverlayPanelContent(){  return new OverlayPanelContent(new OverlayContentDelegate(),new OverlayContentProgressObserver(),mActivity);}  }
class C{  @Override public boolean hasMoreData(){  return currentlyInBuffer() > 0 || totalRead < dataLength;}  }
class C{  public long nextLong(long n){  if (n <= 0)   throw new IllegalArgumentException("n must be positive, got: " + n);  long bits, val;  do {    int y;    int z;    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (y >>> 1) ^ mag01[y & 0x1];      }      for (; kk < N - 1; kk++) {        y=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (y >>> 1) ^ mag01[y & 0x1];      }      y=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];      mti=0;    }    y=mt[mti++];    y^=y >>> 11;    y^=(y << 7) & TEMPERING_MASK_B;    y^=(y << 15) & TEMPERING_MASK_C;    y^=(y >>> 18);    if (mti >= N) {      int kk;      final int[] mt=this.mt;      final int[] mag01=this.mag01;      for (kk=0; kk < N - M; kk++) {        z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + M] ^ (z >>> 1) ^ mag01[z & 0x1];      }      for (; kk < N - 1; kk++) {        z=(mt[kk] & UPPER_MASK) | (mt[kk + 1] & LOWER_MASK);        mt[kk]=mt[kk + (M - N)] ^ (z >>> 1) ^ mag01[z & 0x1];      }      z=(mt[N - 1] & UPPER_MASK) | (mt[0] & LOWER_MASK);      mt[N - 1]=mt[M - 1] ^ (z >>> 1) ^ mag01[z & 0x1];      mti=0;    }    z=mt[mti++];    z^=z >>> 11;    z^=(z << 7) & TEMPERING_MASK_B;    z^=(z << 15) & TEMPERING_MASK_C;    z^=(z >>> 18);    bits=(((((long)y) << 32) + (long)z) >>> 1);    val=bits % n;  } while (bits - val + (n - 1) < 0);  return val;}  }
class C{  private static boolean decodeBooleanElement(Document document,Node child){  return Boolean.valueOf(child.getTextContent()).booleanValue();}  }
class C{  public WebSocketsConnectionProvider(String uri,Map<String,String> connectHttpHeaders){  mUri=uri;  mConnectHttpHeaders=connectHttpHeaders != null ? connectHttpHeaders : new HashMap<>();  mLifecycleSubscribers=new ArrayList<>();  mMessagesSubscribers=new ArrayList<>();}  }
class C{  @Override public ListenableFuture<MemberAddResponse> addMember(List<String> endpoints){  MemberAddRequest memberAddRequest=MemberAddRequest.newBuilder().addAllPeerURLs(endpoints).build();  return clusterStub.memberAdd(memberAddRequest);}  }
class C{  private String fixedValue2RelativeValue(String pitchAttribute,double[] baseF0Contour){  pitchAttribute=pitchAttribute.substring(0,pitchAttribute.length() - 2);  double fixedValue=(new Float(pitchAttribute)).doubleValue();  double meanValue=MathUtils.mean(baseF0Contour);  double relative=(100.0 * fixedValue) / meanValue;  if (relative > 100) {    return "+" + df.format((relative - 100)) + "%";  }  return "-" + df.format((100 - relative)) + "%";}  }
class C{  void prepareForFifoGroupsAfterXtnScans(Context context,final XtnEntry xtnEntry) throws SAException {  ISAdapterIterator<IEntryHolder> entriesIter=null;  try {    entriesIter=_cacheManager.makeUnderXtnEntriesIter(context,xtnEntry,SelectType.ALL_ENTRIES,false);    if (entriesIter != null) {      final XtnData pXtn=xtnEntry.getXtnData();      while (true) {        IEntryHolder entry=entriesIter.next();        if (entry == null)         break;        if (!_cacheManager.getTypeData(entry.getServerTypeDesc()).hasFifoGroupingIndex())         continue;        pXtn.addToEntriesForFifoGroupScan(entry);      }    }  }  finally {    if (entriesIter != null)     entriesIter.close();  }}  }
class C{  public float readFloat(){  return scanner.nextFloat();}  }
class C{  public static final void emoteStartIdling(Npc owner){  owner.setState(CreatureState.WALKING);  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.START_EMOTE2,0,0));  PacketSendUtility.broadcastPacket(owner,new SM_EMOTION(owner,EmotionType.NEUTRALMODE,0,0));}  }
class C{  public static Simulation fromXml(String xml) throws ParserConfigurationException, SAXException, IOException {  return XmlReader.fromXml(new InputSource(new StringReader(xml)));}  }
class C{  @Nullable @Override @CallSuper public List<String> validate(RetryStrategy retryStrategy){  List<String> errors=null;  int policy=retryStrategy.getPolicy();  int initial=retryStrategy.getInitialBackoff();  int maximum=retryStrategy.getMaximumBackoff();  errors=addErrorsIf(policy != RETRY_POLICY_EXPONENTIAL && policy != RETRY_POLICY_LINEAR,errors,"Unknown retry policy provided");  errors=addErrorsIf(maximum < initial,errors,"Maximum backoff must be greater than or equal to initial backoff");  errors=addErrorsIf(300 > maximum,errors,"Maximum backoff must be greater than 300s (5 minutes)");  errors=addErrorsIf(initial < 30,errors,"Initial backoff must be at least 30s");  return errors;}  }
class C{  public void pow(final double[] operand,final int operandOffset,final double p,final double[] result,final int resultOffset){  if (p == 0) {    result[resultOffset]=1.0;    Arrays.fill(result,resultOffset + 1,resultOffset + getSize(),0);    return;  }  if (operand[operandOffset] == 0) {    Arrays.fill(result,resultOffset,resultOffset + getSize(),0);    return;  }  double[] function=new double[1 + order];  double xk=FastMath.pow(operand[operandOffset],p - order);  for (int i=order; i > 0; --i) {    function[i]=xk;    xk*=operand[operandOffset];  }  function[0]=xk;  double coefficient=p;  for (int i=1; i <= order; ++i) {    function[i]*=coefficient;    coefficient*=p - i;  }  compose(operand,operandOffset,function,result,resultOffset);}  }
class C{  @NotNull public static String requireAttr(@NotNull String tag,@NotNull Attributes attributes,@NotNull String name){  String result=attributes.getValue(name);  if (result == null) {    throw new RuntimeException(String.format("Required attribute \"%1$s\" not found in element <%2$s %3$s>",name,tag,attrsToString(attributes)));  } else   if ("".equals(result.trim())) {    throw new RuntimeException(String.format("Required attribute \"%1$s\" found, but empty in element <%2$s %3$s>",name,tag,attrsToString(attributes)));  }  return result;}  }
class C{  public ParserException(String message,Exception exception){  super(message);  this.exception=exception;  return;}  }
class C{  @Override protected final void scanPIData(String target,XMLString data) throws IOException, XNIException {  super.scanPIData(target,data);  fMarkUpDepth--;  if (fDTDHandler != null) {    fDTDHandler.processingInstruction(target,data,null);  }}  }
class C{  public RegulaFalsiSolver(final double absoluteAccuracy){  super(absoluteAccuracy,Method.REGULA_FALSI);}  }
class C{  public void __setDaoSession(DaoSession daoSession){  this.daoSession=daoSession;  myDao=daoSession != null ? daoSession.getUserInfoDao() : null;}  }
class C{  public static SM_SYSTEM_MESSAGE STR_GUILD_CHANGE_MEMBER_NICKNAME_HE_IS_NOT_MY_GUILD_MEMBER(String value0){  return new SM_SYSTEM_MESSAGE(1300314,value0);}  }
class C{  private Collection<String> filesInPackage(String packageName){  if (!packageMap.containsKey(packageName)) {    int index=packageName.lastIndexOf('.');    String name=packageName.substring(index == -1 ? 0 : index + 1);    String folderName=packageName.replace('.',File.separatorChar);    File pkgFolder=new File(folder,folderName);    Collection<String> fileSet=Collections.emptyList();    try {      File canonical=pkgFolder.getCanonicalFile();      if (canonical.isDirectory() && (packageName.isEmpty() || canonical.getName().equals(name))) {        String[] files=canonical.list();        if (files.length > 0) {          fileSet=new HashSet<String>();          for (          String file : files) {            fileSet.add(file);          }        }      }    } catch (    Exception e) {    }    packageMap.put(packageName,fileSet);  }  return packageMap.get(packageName);}  }
class C{  public void showErrorMessage(String errorMessage){  if (mErrorView != null) {    mErrorView.setErrorText(errorMessage);    mErrorView.setVisibility(VISIBLE);  }}  }
class C{  public static WxMenuResult fromJson(String json) throws JsonParseException, JsonMappingException, IOException {  ObjectMapper mapper=new ObjectMapper();  return mapper.readValue(json,WxMenuResult.class);}  }
class C{  public static long[] transformLongArray(Long[] source){  long[] destin=new long[source.length];  for (int i=0; i < source.length; i++) {    destin[i]=source[i];  }  return destin;}  }
class C{  public boolean isDoubleTapToZoomEnabled(){  return mDoubleTapToZoomEnabled;}  }
class C{  public int size(){  long count=0;  for (Node<K,V> n=findFirst(); n != null; n=n.next) {    if (n.getValidValue() != null)     ++count;  }  return (count >= Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)count;}  }
class C{  public static Long stringToLong(String val){  return Long.valueOf(trim(val));}  }
class C{  private OverrideUrlLoadingResult clobberCurrentTabWithFallbackUrl(String browserFallbackUrl,ExternalNavigationParams params){  if (!params.isMainFrame()) {    return OverrideUrlLoadingResult.NO_OVERRIDE;  }  if (params.getRedirectHandler() != null) {    params.getRedirectHandler().setShouldNotOverrideUrlLoadingUntilNewUrlLoading();  }  return mDelegate.clobberCurrentTab(browserFallbackUrl,params.getReferrerUrl(),params.getTab());}  }
class C{  @Override public boolean equals(Object obj){  if (!(obj instanceof XMLErrorCode))   return false;  XMLErrorCode err=(XMLErrorCode)obj;  return (fDomain.equals(err.fDomain) && fKey.equals(err.fKey));}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  sb.append(getClass().getSimpleName());  sb.append(" [");  sb.append("Hash = ").append(hashCode());  sb.append(", userId=").append(userId);  sb.append(", roleId=").append(roleId);  sb.append("]");  return sb.toString();}  }
class C{  public boolean tTest(final double mu,final StatisticalSummary sampleStats,final double alpha) throws MathIllegalArgumentException, NullArgumentException, MathIllegalStateException {  checkSignificanceLevel(alpha);  return tTest(mu,sampleStats) < alpha;}  }
class C{  public static void main(String[] a){  PrintStream out=System.out;  FastMathCalc.printarray(out,"EXP_INT_TABLE_A",EXP_INT_TABLE_LEN,ExpIntTable.EXP_INT_TABLE_A);  FastMathCalc.printarray(out,"EXP_INT_TABLE_B",EXP_INT_TABLE_LEN,ExpIntTable.EXP_INT_TABLE_B);  FastMathCalc.printarray(out,"EXP_FRAC_TABLE_A",EXP_FRAC_TABLE_LEN,ExpFracTable.EXP_FRAC_TABLE_A);  FastMathCalc.printarray(out,"EXP_FRAC_TABLE_B",EXP_FRAC_TABLE_LEN,ExpFracTable.EXP_FRAC_TABLE_B);  FastMathCalc.printarray(out,"LN_MANT",LN_MANT_LEN,lnMant.LN_MANT);  FastMathCalc.printarray(out,"SINE_TABLE_A",SINE_TABLE_LEN,SINE_TABLE_A);  FastMathCalc.printarray(out,"SINE_TABLE_B",SINE_TABLE_LEN,SINE_TABLE_B);  FastMathCalc.printarray(out,"COSINE_TABLE_A",SINE_TABLE_LEN,COSINE_TABLE_A);  FastMathCalc.printarray(out,"COSINE_TABLE_B",SINE_TABLE_LEN,COSINE_TABLE_B);  FastMathCalc.printarray(out,"TANGENT_TABLE_A",SINE_TABLE_LEN,TANGENT_TABLE_A);  FastMathCalc.printarray(out,"TANGENT_TABLE_B",SINE_TABLE_LEN,TANGENT_TABLE_B);}  }
class C{  public void push(Object object){  if (isClosed()) {    LOGGER.debug("synchro isClosed - eXception");    throw new IllegalArgumentException("buffer closed");  }  boolean objectAdded=false;synchronized (buffer) {switch (duplicatePolicy) {case SynchroBuffer.DUPLICATE_DISCARD:      if (!bufferMap.containsKey(object)) {        buffer.add(object);        bufferMap.put(object,new Integer(buffer.size() - 1));        objectAdded=true;      }    break;case SynchroBuffer.DUPLICATE_REPLACE:  Integer index=(Integer)bufferMap.get(object);if (index == null) {  buffer.add(object);  index=new Integer(buffer.size() - 1);  bufferMap.put(object,index);  objectAdded=true;} else {  buffer.set(index.intValue(),object);}break;default :buffer.add(object);if (capacity != INFINITE_CAPACITY && buffer.size() > capacity) {buffer.remove(0);capacityWarn();}objectAdded=true;}}if (LOGGER.isDebugEnabled() && objectAdded && buffer.size() > 100 && buffer.size() % 1000 == 0) {LOGGER.debug("buffer reached " + buffer.size() + " cached elements and growing... ");LOGGER.debug("if enabled, buffer will keep size below the maximum capacity, which is set at " + capacity);}}  }
class C{  public static void deleteDirectory(File directory) throws IOException {  if (!directory.exists()) {    return;  }  if (!isSymlink(directory)) {    cleanDirectory(directory);  }  if (!directory.delete()) {    String message="Unable to delete directory " + directory + ".";    throw new IOException(message);  }}  }
class C{  public String[] upload_appender_file(byte[] file_buff,String file_ext_name,NameValuePair[] meta_list) throws IOException, MyException {  final String group_name=null;  return this.upload_appender_file(group_name,file_buff,0,file_buff.length,file_ext_name,meta_list);}  }
class C{  public double interceptStdErr(){  return Math.sqrt(svar0);}  }
class C{  public synchronized int size(){  return count;}  }
class C{  public static FileDetailFragment newInstance(OCFile fileToDetail,Account account){  FileDetailFragment frag=new FileDetailFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_FILE,fileToDetail);  args.putParcelable(ARG_ACCOUNT,account);  frag.setArguments(args);  return frag;}  }
class C{  public void testFindMatchingLinesPerformance(){  CodeMatcher cm=new CodeMatcher();  List<String> matchTerms=new ArrayList<String>();  matchTerms.add("code");  matchTerms.add("this");  List<String> code=new ArrayList<>();  for (int i=0; i < 9999; i++) {    String addString="some additional stuff that random stuff that should not match but force it to work a bit harder then it normally would";    for (int j=0; j < 5; j++) {      addString+=addString;    }    code.add(addString);  }  code.add("this is some code");  Instant start=Instant.now();  List<CodeMatchResult> result=cm.findMatchingLines(code,matchTerms,true);  assertTrue(result != null);  assertTrue(Duration.between(start,Instant.now()).getSeconds() <= 1);}  }
class C{  public static S2CellId fromToken(String token){  if (token == null) {    throw new NumberFormatException("Null string in S2CellId.fromToken");  }  if (token.length() == 0) {    throw new NumberFormatException("Empty string in S2CellId.fromToken");  }  if (token.length() > 16 || "X".equals(token)) {    return none();  }  long value=0;  for (int pos=0; pos < 16; pos++) {    int digit=0;    if (pos < token.length()) {      digit=Character.digit(token.charAt(pos),16);      if (digit == -1) {        throw new NumberFormatException(token);      }      if (overflowInParse(value,digit)) {        throw new NumberFormatException("Too large for unsigned long: " + token);      }    }    value=(value * 16) + digit;  }  return new S2CellId(value);}  }
class C{  public void suppressAllWarnings(){  diagSuppressor.addPattern(this,".*");}  }
class C{  public static RemoteServer delicatedDeserialize(RemoteServer server,Map<String,Object> map){  server.remoteAddr=(String)map.get("remote_addr");  server.remotePort=((Number)map.get("remote_port")).intValue();  return server;}  }
class C{  public static String returnNull(HttpServletRequest request,HttpServletResponse response){  return null;}  }
class C{  public static String pennPOSToWordnetPOS(String s){  if (s.matches("NN|NNP|NNS|NNPS")) {    return "noun";  }  if (s.matches("VB|VBD|VBG|VBN|VBZ|VBP|MD")) {    return "verb";  }  if (s.matches("JJ|JJR|JJS|CD")) {    return "adjective";  }  if (s.matches("RB|RBR|RBS|RP|WRB")) {    return "adverb";  }  return null;}  }
class C{  public void draw(Canvas c,Rect bounds){  mCirclePaint.setColor(mBackgroundColor);  mCirclePaint.setAlpha(mAlpha);  c.drawCircle(bounds.exactCenterX(),bounds.exactCenterY(),bounds.width() / 2,mCirclePaint);  final RectF arcBounds=mTempBounds;  arcBounds.set(bounds);  arcBounds.inset(mStrokeInset,mStrokeInset);  final float startAngle=(mStartTrim + mRotation) * 360;  final float endAngle=(mEndTrim + mRotation) * 360;  float sweepAngle=endAngle - startAngle;  mArcPaint.setColor(mColors[mColorIndex]);  mArcPaint.setAlpha(mAlpha);  c.drawArc(arcBounds,startAngle,sweepAngle,false,mArcPaint);  drawTriangle(c,startAngle,sweepAngle,bounds);}  }
class C{  @Override public void addNewSubscription(final Subscription newSubscription){  final String clientID=newSubscription.getClientId();  List<ClientTopicCouple> clientSubscriptions=subscriptions.get(clientID);  if (clientSubscriptions == null) {    clientSubscriptions=new ArrayList<>();    subscriptions.put(clientID,clientSubscriptions);  }  clientSubscriptions.add(newSubscription.asClientTopicCouple());}  }
class C{  @Override public int hashCode(){  return (proxyObject.hashCode());}  }
class C{  public static InputSource sourceToInputSource(Source source){  if (source instanceof SAXSource) {    return ((SAXSource)source).getInputSource();  } else   if (source instanceof StreamSource) {    StreamSource ss=(StreamSource)source;    InputSource isource=new InputSource(ss.getSystemId());    isource.setByteStream(ss.getInputStream());    isource.setCharacterStream(ss.getReader());    isource.setPublicId(ss.getPublicId());    return isource;  } else {    return null;  }}  }
class C{  public static SM_SYSTEM_MESSAGE STR_DUEL_TIMEOUT_BROADCAST(String value0,String value1){  return new SM_SYSTEM_MESSAGE(1300138,value0,value1);}  }
class C{  private JSONArray readArray() throws JSONException {  JSONArray result=new JSONArray();  boolean hasTrailingSeparator=false;  while (true) {switch (nextCleanInternal()) {case -1:      throw syntaxError("Unterminated array");case ']':    if (hasTrailingSeparator) {      result.put(null);    }  return result;case ',':case ';':result.put(null);hasTrailingSeparator=true;continue;default :pos--;}result.put(nextValue());switch (nextCleanInternal()) {case ']':return result;case ',':case ';':hasTrailingSeparator=true;continue;default :throw syntaxError("Unterminated array");}}}  }
class C{  public static IOFileFilter sizeFileFilter(long threshold,boolean acceptLarger){  return new SizeFileFilter(threshold,acceptLarger);}  }
class C{  public TestMetricLoader(){  this(DEFAULT_SKETCH_SIZE_IN_BYTES);}  }
class C{  public static SM_SYSTEM_MESSAGE STR_MSG_GETMONEY(int num0){  return new SM_SYSTEM_MESSAGE(1380001,num0);}  }
class C{  private static boolean checkOffset(String value,int offset,char expected){  return (offset < value.length()) && (value.charAt(offset) == expected);}  }
class C{  protected boolean handleDirectory(File directory,int depth,Collection<T> results) throws IOException {  return true;}  }
class C{  void testCloseShouldNotFlushIfInErrorState(int rcToFailComplete) throws Exception {  DistributedLogConfiguration confLocal=newLocalConf();  confLocal.setImmediateFlushEnabled(false);  confLocal.setOutputBufferSize(Integer.MAX_VALUE);  confLocal.setPeriodicFlushFrequencyMilliSeconds(0);  ZKDistributedLock lock=createLock("/test/lock-" + runtime.getMethodName(),zkc,true);  BKLogSegmentWriter writer=createLogSegmentWriter(confLocal,0L,-1L,lock);  ZKDistributedLock lock0=createLock("/test/lock-" + runtime.getMethodName(),zkc0,false);  Future<ZKDistributedLock> lockFuture0=lock0.asyncAcquire();  int numRecords=10;  List<Future<DLSN>> futureList=new ArrayList<Future<DLSN>>(numRecords);  for (int i=0; i < numRecords; i++) {    futureList.add(writer.asyncWrite(DLMTestUtil.getLogRecordInstance(i)));  }  assertEquals("Last tx id should be " + (numRecords - 1),numRecords - 1,writer.getLastTxId());  assertEquals("Last acked tx id should be -1",-1L,writer.getLastTxIdAcknowledged());  assertEquals("Last DLSN should be " + DLSN.InvalidDLSN,DLSN.InvalidDLSN,writer.getLastDLSN());  assertEquals("Position should be " + numRecords,10,writer.getPositionWithinLogSegment());  writer.setTransmitResult(rcToFailComplete);  try {    closeWriterAndLock(writer,lock);    fail("Close a log segment writer in error state should throw exception");  } catch (  BKTransmitException bkte) {    assertEquals("Inconsistent rc is thrown",rcToFailComplete,bkte.getBKResultCode());  }  Await.result(lockFuture0);  lock0.checkOwnership();  assertEquals("Last tx id should still be " + (numRecords - 1),numRecords - 1,writer.getLastTxId());  assertEquals("Last acked tx id should still be " + (numRecords - 1),-1L,writer.getLastTxIdAcknowledged());  assertEquals("Last DLSN should still be " + DLSN.InvalidDLSN,DLSN.InvalidDLSN,writer.getLastDLSN());  assertEquals("Position should still be " + numRecords,10,writer.getPositionWithinLogSegment());  for (int i=0; i < numRecords; i++) {    try {      Await.result(futureList.get(i));      fail("Should be aborted record " + i + " with transmit exception");    } catch (    WriteCancelledException wce) {      assertTrue("Record " + i + " should be aborted because of ledger fenced",wce.getCause() instanceof BKTransmitException);      BKTransmitException bkte=(BKTransmitException)wce.getCause();      assertEquals("Record " + i + " should be aborted",rcToFailComplete,bkte.getBKResultCode());    }  }  LedgerHandle lh=getLedgerHandle(writer);  LedgerHandle readLh=openLedgerNoRecovery(lh);  assertFalse("Ledger " + lh.getId() + " should not be closed",readLh.isClosed());  assertEquals("There should be no entries in ledger " + lh.getId(),LedgerHandle.INVALID_ENTRY_ID,readLh.getLastAddConfirmed());}  }
class C{  static BigDecimal sanitize(BigDecimal value,int signum){  if (signum == 0 || value == null) {    return ZERO;  }  if (signum > 0) {    return value;  }  return value.negate();}  }
class C{  public double percentile(double percentile){  return get(percentile * getEventCount() / 100);}  }
class C{  public static Bundle addProperties(Bundle props,int pageNumber,int lastPageNumber){  props.putInt(THIS_PAGE_NUMBER,pageNumber);  return props;}  }
class C{  protected void appendSelectFromSql(){  _sql.append("SELECT ");  for (int i=0; i < _expression.projections.length; i++) {    ExpressionNode node=(ExpressionNode)_expression.projections[i];    node.appendSql(_sql);    if (i + 1 == _expression.projections.length)     _sql.append(" "); else     _sql.append(", ");  }  _sql.append("FROM ");  _sql.append(_classMetaData.getDescribedType().getName());  _sql.append(" ");}  }
class C{  public static void requestFileAccessPermission(WindowAndroid windowAndroid,PermissionCallback callback){  assert windowAndroid != null;  windowAndroid.requestPermissions(new String[]{android.Manifest.permission.WRITE_EXTERNAL_STORAGE},callback);}  }
class C{  public static <V,V1 extends V>Map<String,V> toMap(String name1,V1 value1){  return populateMap(new HashMap<String,V>(),name1,value1);}  }
class C{  public JSONObject(JSONObject jo,String[] names){  this();  for (int i=0; i < names.length; i+=1) {    try {      this.putOnce(names[i],jo.opt(names[i]));    } catch (    Exception ignore) {    }  }}  }
class C{  public boolean isPredefined(){  return predefined;}  }
class C{  public static void marshalValue(Class type,Object value,ObjectOutput out) throws IOException {  if (type.isPrimitive()) {    if (type == int.class) {      out.writeInt(((Integer)value).intValue());    } else     if (type == boolean.class) {      out.writeBoolean(((Boolean)value).booleanValue());    } else     if (type == long.class) {      out.writeLong(((Long)value).longValue());    } else     if (type == short.class) {      out.writeShort(((Short)value).shortValue());    } else     if (type == float.class) {      out.writeFloat(((Float)value).floatValue());    } else     if (type == double.class) {      out.writeDouble(((Double)value).doubleValue());    } else     if (type == char.class) {      out.writeChar(((Character)value).charValue());    } else     if (type == byte.class) {      out.writeByte(((Byte)value).byteValue());    } else {      throw new AssertionError("Unrecognized primitive type: " + type);    }  } else {    out.writeObject(value);  }}  }
