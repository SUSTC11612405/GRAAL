class C{  public SortableAndSearchableWrapperTableModel(TableModel model){  super();  m_MouseListener=null;  m_SortedIndices=null;  m_DisplayIndices=null;  m_ColumnIsNumeric=null;  setUnsortedModel(model);}  }
class C{  void cancelAllSuperActivityToasts(){  removeMessages(Messages.DISPLAY);  removeMessages(Messages.REMOVE);  for (  SuperActivityToast superActivityToast : mList) {    if (superActivityToast.isShowing()) {      superActivityToast.getViewGroup().removeView(superActivityToast.getView());      superActivityToast.getViewGroup().invalidate();    }  }  mList.clear();}  }
class C{  public void playSequentially(List<Animator> items){  if (items != null && items.size() > 0) {    mNeedsSort=true;    if (items.size() == 1) {      play(items.get(0));    } else {      for (int i=0; i < items.size() - 1; ++i) {        play(items.get(i)).before(items.get(i + 1));      }    }  }}  }
class C{  public boolean exportFormatX509(){  return formatX509;}  }
class C{  public void write(org.apache.thrift.protocol.TProtocol oprot,Attachment struct) throws org.apache.thrift.TException {  struct.validate();  oprot.writeStructBegin(STRUCT_DESC);  if (struct.isSetId()) {    oprot.writeFieldBegin(ID_FIELD_DESC);    oprot.writeI64(struct.id);    oprot.writeFieldEnd();  }  if (struct.type != null) {    oprot.writeFieldBegin(TYPE_FIELD_DESC);    oprot.writeString(struct.type);    oprot.writeFieldEnd();  }  if (struct.name != null) {    if (struct.isSetName()) {      oprot.writeFieldBegin(NAME_FIELD_DESC);      oprot.writeString(struct.name);      oprot.writeFieldEnd();    }  }  if (struct.isSetFileSize()) {    oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);    oprot.writeI64(struct.fileSize);    oprot.writeFieldEnd();  }  if (struct.url != null) {    oprot.writeFieldBegin(URL_FIELD_DESC);    oprot.writeString(struct.url);    oprot.writeFieldEnd();  }  oprot.writeFieldStop();  oprot.writeStructEnd();}  }
class C{  public static Map consultFolderInfo(AxSf axsf,Integer bookID,int page,Locale locale,Map extendedValues,String origen,String destino,Map fldDefs){  String data=axsf.getFormat().getData();  FormFormat formFormat=new FormFormat(data);  longFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_LONGFORMAT));  shortFormatter=new SimpleDateFormat(RBUtil.getInstance(locale).getProperty(I18N_DATE_SHORTFORMAT));  TreeMap pages=formFormat.getDlgDef().getPagedefs();  FPageDef pageDef=(FPageDef)pages.get(new Integer(page));  TreeMap ctrls=pageDef.getCtrldefs();  FCtrlDef ctrlDef=null;  Map folderValues=new HashMap();  String value=null;  FFldDef flddef=null;  for (Iterator it=ctrls.values().iterator(); it.hasNext(); ) {    ctrlDef=(FCtrlDef)it.next();    if (ctrlDef.getName().startsWith(IDOC_EDIT)) {      value=getFolderInfoFromForm(ctrlDef,axsf,locale,extendedValues,origen,destino);      for (Iterator it1=fldDefs.keySet().iterator(); it1.hasNext(); ) {        Integer key=(Integer)it1.next();        flddef=(FFldDef)fldDefs.get(key);        if (flddef.getColname().equals(XML_FLD_UPPERF_TEXT + ctrlDef.getFldId())) {          break;        }      }      folderValues.put(flddef.getColname(),value);    }  }  return folderValues;}  }
class C{  public void incomingPanDisconnection(BluetoothAdapter adapter,BluetoothDevice device){  disconnectFromRemoteOrVerifyConnectNap(adapter,device,false);}  }
class C{  private static void writeHeader(File file,OutputStream out) throws IOException {  String header="*** " + file.toString() + "\n";  out.write(header.getBytes());}  }
class C{  private void readCpuUsage(){  try {    final BufferedReader reader=new BufferedReader(new InputStreamReader(new FileInputStream(M.e("/proc/stat"))),1000);    final String load=reader.readLine();    reader.close();    final String[] toks=load.split(" ");    final long currTotal=Long.parseLong(toks[2]) + Long.parseLong(toks[3]) + Long.parseLong(toks[4]);    final long currIdle=Long.parseLong(toks[5]);    this.cpuUsage=((currTotal - cpuTotal) * 100.0f / (currTotal - cpuTotal + currIdle - cpuIdle));    this.cpuTotal=currTotal;    this.cpuIdle=currIdle;  } catch (  final IOException ex) {    if (Cfg.EXCEPTION) {      Check.log(ex);    }    if (Cfg.DEBUG) {      Check.log(ex);    }  }}  }
class C{  public URL(String protocol,String host,int port,String file) throws MalformedURLException {  this(protocol,host,port,file,null);}  }
class C{  @Override public void writeTerm(final String term,final Posting post) throws IOException {  final MemorySBOS Docs=post.getDocs();  Docs.pad();  byte[] buffer=new byte[Docs.getMOS().getPos() + 1];  System.arraycopy(Docs.getMOS().getBuffer(),0,buffer,0,Math.min(Docs.getMOS().getBuffer().length,Docs.getMOS().getPos() + 1));  try {    context.write(NewSplitEmittedTerm.createNewTerm(term,splitId,flushNo),MapEmittedPostingList.create_Hadoop_WritableRunPostingData(mapId,flushNo,splitId,buffer,post.getDocF(),post.getTF()));  } catch (  InterruptedException e) {    throw new WrappedIOException(e);  }}  }
class C{  public static Object parse(String s){  StringReader in=new StringReader(s);  return parse(in);}  }
class C{  public TPrimitiveHash(){  super();}  }
class C{  public XML write(){  try {    FilesManager.write(xmlJmapper,xmlPath);  } catch (  IOException e) {    JmapperLog.ERROR(e);  }  return this;}  }
class C{  protected void updateCursorForDrag(int piece){  if (getPreferences().getBoolean(PreferenceKeys.BOARD_IS_USING_CROSSHAIRS_CURSOR)) {    getShell().setCursor(Raptor.getInstance().getDisplay().getSystemCursor(SWT.CURSOR_CROSS));  } else   if (piece != EMPTY) {    int imageSide=getImageSize();    getShell().setCursor(ChessBoardUtils.getCursorForPiece(piece,imageSide));  } else   if (piece == EMPTY) {    int imageSide=getImageSize();    getShell().setCursor(ChessBoardUtils.getCursorForPiece(ChessBoardUtils.pieceJailSquareToPiece(getId()),imageSide));  }}  }
class C{  private void startVoiceRecognitionActivity(){  Intent intent=new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);  intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL,RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);  intent.putExtra(RecognizerIntent.EXTRA_PROMPT,"Voice recognition test...");  startActivityForResult(intent,REQUEST_CODE);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.241 -0400",hash_original_method="354338F8D39FF6509677FF2A4C707E5F",hash_generated_method="7D2535B6C55EA233FAA41D561AE981CE") public NullWriter(){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean isFinished(){  AsyncHttpRequest _request=request.get();  return _request == null || _request.isDone();}  }
class C{  public static void declareAll(ExtensionProfile profile){  profile.declareAdditionalNamespace(NS);  profile.declare(BaseEntry.class,MediaGroup.getDefaultDescription());  profile.declare(BaseEntry.class,MediaContent.getDefaultDescription(false));  profile.declare(MediaGroup.class,MediaContent.getDefaultDescription(true));  for (  ExtensionDescription desc : STANDARD_EXTENSIONS) {    profile.declare(BaseEntry.class,desc);    profile.declare(BaseFeed.class,desc);    profile.declare(MediaGroup.class,desc);    profile.declare(MediaContent.class,desc);  }}  }
class C{  @SuppressWarnings("unchecked") protected E removeAt(int pos){  if (pos < 0 || pos >= size) {    return null;  }  final E ret=(E)queue[pos];  final Object reinsert=queue[size - 1];  queue[size - 1]=null;  size--;  heapifyDown(pos,reinsert);  heapModified();  return ret;}  }
class C{  public static CompactSketch union(CompactSketch skA,CompactSketch skB){  final short seedHash=checkOrderedAndSeedHash(skA,skB);  long thetaLong=Math.min(skA.getThetaLong(),skB.getThetaLong());  int indexA=0;  int indexB=0;  int outCount=0;  long[] cacheA=skA.getCache();  long[] cacheB=skB.getCache();  long[] outCache=new long[cacheA.length + cacheB.length];  while ((indexA < cacheA.length) || (indexB < cacheB.length)) {    long hashA=(indexA >= cacheA.length) ? thetaLong : cacheA[indexA];    long hashB=(indexB >= cacheB.length) ? thetaLong : cacheB[indexB];    if (hashA >= thetaLong && hashB >= thetaLong) {      break;    }    if (hashA == hashB) {      outCache[outCount++]=hashA;      ++indexA;      ++indexB;    } else     if (hashA < hashB) {      outCache[outCount++]=hashA;      ++indexA;    } else {      outCache[outCount++]=hashB;      ++indexB;    }  }  boolean empty=skA.isEmpty() && skB.isEmpty();  return new HeapCompactOrderedSketch(Arrays.copyOf(outCache,outCount),empty,seedHash,outCount,thetaLong);}  }
class C{  private void writeDataToFile(File file) throws FileNotFoundException, IOException {  FileOutputStream fos=new FileOutputStream(file);  try {    fos.write(CONTENT_AS_BYTES);  }  finally {    fos.close();  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public void fireChange(final Property property){  for (  final EntityChangeListener l : changeListeners) {    l.entityChanged(this,property);  }}  }
class C{  private void assertReadVarint(byte[] data,long value) throws Exception {  CodedInputStream input=CodedInputStream.newInstance(data);  assertEquals((int)value,input.readRawVarint32());  assertDataConsumed(data,input);  input=CodedInputStream.newInstance(data);  assertEquals(value,input.readRawVarint64());  assertDataConsumed(data,input);  input=CodedInputStream.newInstance(data);  assertEquals(value,input.readRawVarint64SlowPath());  assertDataConsumed(data,input);  input=CodedInputStream.newInstance(data);  assertTrue(input.skipField(WireFormat.WIRETYPE_VARINT));  assertDataConsumed(data,input);  for (int blockSize=1; blockSize <= 16; blockSize*=2) {    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals((int)value,input.readRawVarint32());    assertDataConsumed(data,input);    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals(value,input.readRawVarint64());    assertDataConsumed(data,input);    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertEquals(value,input.readRawVarint64SlowPath());    assertDataConsumed(data,input);    input=CodedInputStream.newInstance(new SmallBlockInputStream(data,blockSize));    assertTrue(input.skipField(WireFormat.WIRETYPE_VARINT));    assertDataConsumed(data,input);  }  byte[] longerData=new byte[data.length + 1];  System.arraycopy(data,0,longerData,0,data.length);  InputStream rawInput=new ByteArrayInputStream(longerData);  assertEquals((int)value,CodedInputStream.readRawVarint32(rawInput));  assertEquals(1,rawInput.available());}  }
class C{  public double distance(IMultiPoint imp){  if (imp.dimensionality() != 2) {    throw new IllegalArgumentException("distance computation can only be performed between two-dimensional points");  }  double ox=imp.getCoordinate(1);  double oy=imp.getCoordinate(2);  return Math.sqrt((ox - x) * (ox - x) + (oy - y) * (oy - y));}  }
class C{  public PacProxyException(String message){  super(message);}  }
class C{  private Segment segmentFor(int hash){  return segs[(hash >>> segmentShift) & segmentMask];}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:10.558 -0500",hash_original_method="668D89CF48F3ADC6BE7AF94D782DA652",hash_generated_method="2ABA277C680FC2569DEF64D5B0C8092B") public ColorMatrix(ColorMatrix src){  System.arraycopy(src.mArray,0,mArray,0,20);}  }
class C{  public DistributedLogMultiStreamWriter build(){  Preconditions.checkArgument((null != _streams && !_streams.isEmpty()),"No streams provided");  Preconditions.checkNotNull(_client,"No distributedlog client provided");  Preconditions.checkNotNull(_codec,"No compression codec provided");  Preconditions.checkArgument(_firstSpeculativeTimeoutMs > 0 && _firstSpeculativeTimeoutMs <= _maxSpeculativeTimeoutMs && _speculativeBackoffMultiplier > 0 && _maxSpeculativeTimeoutMs < _requestTimeoutMs,"Invalid speculative timeout settings");  return new DistributedLogMultiStreamWriter(_streams,_client,Math.min(_bufferSize,MAX_LOGRECORDSET_SIZE),_flushIntervalMs,_requestTimeoutMs,_firstSpeculativeTimeoutMs,_maxSpeculativeTimeoutMs,_speculativeBackoffMultiplier,_codec,_ticker,_executorService);}  }
class C{  public void clear(){  userHostMap.clear();}  }
class C{  public final void print(boolean b) throws IOException {  print(b ? "true" : "false");}  }
class C{  public void squareThis(){  long[] pol=getElement();  int f=mLength - 1;  int b=mBit - 1;  long TWOTOMAXLONGM1=mBitmask[MAXLONG - 1];  boolean old, now;  old=(pol[f] & mBitmask[b]) != 0;  for (int i=0; i < f; i++) {    now=(pol[i] & TWOTOMAXLONGM1) != 0;    pol[i]=pol[i] << 1;    if (old) {      pol[i]^=1;    }    old=now;  }  now=(pol[f] & mBitmask[b]) != 0;  pol[f]=pol[f] << 1;  if (old) {    pol[f]^=1;  }  if (now) {    pol[f]^=mBitmask[b + 1];  }  assign(pol);}  }
class C{  public static HostAndPortRange parse(String addrStr,int dfltPortFrom,int dfltPortTo,String errMsgPrefix) throws IgniteCheckedException {  assert dfltPortFrom <= dfltPortTo;  String host;  int portFrom;  int portTo;  final int colIdx=addrStr.indexOf(':');  if (colIdx > 0) {    String portFromStr;    String portToStr;    host=addrStr.substring(0,colIdx);    String portStr=addrStr.substring(colIdx + 1,addrStr.length());    if (F.isEmpty(portStr))     throw createParseError(addrStr,errMsgPrefix,"port range is not specified");    int portRangeIdx=portStr.indexOf("..");    if (portRangeIdx >= 0) {      portFromStr=portStr.substring(0,portRangeIdx);      portToStr=portStr.substring(portRangeIdx + 2,portStr.length());    } else {      portFromStr=portStr;      portToStr=portStr;    }    portFrom=parsePort(portFromStr,addrStr,errMsgPrefix);    portTo=parsePort(portToStr,addrStr,errMsgPrefix);    if (portFrom > portTo)     throw createParseError(addrStr,errMsgPrefix,"start port cannot be less than end port");  } else {    host=addrStr;    portFrom=dfltPortFrom;    portTo=dfltPortTo;  }  return new HostAndPortRange(host,portFrom,portTo);}  }
class C{  public String toString(int max){  ensureOpen();  StringBuilder sb=new StringBuilder();  int upperl=Math.min(max,indexReader.maxDoc());  for (int i=0; i < upperl; i++) {    try {      FacetLabel category=this.getPath(i);      if (category == null) {        sb.append(i + ": NULL!! \n");        continue;      }      if (category.length == 0) {        sb.append(i + ": EMPTY STRING!! \n");        continue;      }      sb.append(i + ": " + category.toString()+ "\n");    } catch (    IOException e) {      if (logger.isLoggable(Level.FINEST)) {        logger.log(Level.FINEST,e.getMessage(),e);      }    }  }  return sb.toString();}  }
class C{  public boolean equals(Object other){  if (other == null)   return false;  if (!other.getClass().equals(this.getClass()))   return false;  NameValue that=(NameValue)other;  if (this == that)   return true;  if (this.name == null && that.name != null || this.name != null && that.name == null)   return false;  if (this.name != null && that.name != null && this.name.compareToIgnoreCase(that.name) != 0)   return false;  if (this.value != null && that.value == null || this.value == null && that.value != null)   return false;  if (this.value == that.value)   return true;  if (value instanceof String) {    if (isQuotedString)     return this.value.equals(that.value);    String val=(String)this.value;    String val1=(String)that.value;    return val.compareToIgnoreCase(val1) == 0;  } else   return this.value.equals(that.value);}  }
class C{  public CacheHeader(String key,Entry entry){  this.key=key;  this.size=entry.data.length;  this.etag=entry.etag;  this.serverDate=entry.serverDate;  this.lastModified=entry.lastModified;  this.ttl=entry.ttl;  this.softTtl=entry.softTtl;  this.responseHeaders=entry.responseHeaders;}  }
class C{  public final BufferedImage filter(BufferedImage src,BufferedImage dst){  if (src == null) {    throw new NullPointerException("src image is null");  }  if (src == dst) {    throw new IllegalArgumentException("src image cannot be the " + "same as the dst image");  }  boolean needToConvert=false;  ColorModel srcCM=src.getColorModel();  ColorModel dstCM;  BufferedImage origDst=dst;  if (dst == null) {    dst=createCompatibleDestImage(src,null);    dstCM=srcCM;    origDst=dst;  } else {    dstCM=dst.getColorModel();    if (srcCM.getColorSpace().getType() != dstCM.getColorSpace().getType()) {      int type=xform.getType();      boolean needTrans=((type & (xform.TYPE_MASK_ROTATION | xform.TYPE_GENERAL_TRANSFORM)) != 0);      if (!needTrans && type != xform.TYPE_TRANSLATION && type != xform.TYPE_IDENTITY) {        double[] mtx=new double[4];        xform.getMatrix(mtx);        needTrans=(mtx[0] != (int)mtx[0] || mtx[3] != (int)mtx[3]);      }      if (needTrans && srcCM.getTransparency() == Transparency.OPAQUE) {        ColorConvertOp ccop=new ColorConvertOp(hints);        BufferedImage tmpSrc=null;        int sw=src.getWidth();        int sh=src.getHeight();        if (dstCM.getTransparency() == Transparency.OPAQUE) {          tmpSrc=new BufferedImage(sw,sh,BufferedImage.TYPE_INT_ARGB);        } else {          WritableRaster r=dstCM.createCompatibleWritableRaster(sw,sh);          tmpSrc=new BufferedImage(dstCM,r,dstCM.isAlphaPremultiplied(),null);        }        src=ccop.filter(src,tmpSrc);      } else {        needToConvert=true;        dst=createCompatibleDestImage(src,null);      }    }  }  if (interpolationType != TYPE_NEAREST_NEIGHBOR && dst.getColorModel() instanceof IndexColorModel) {    dst=new BufferedImage(dst.getWidth(),dst.getHeight(),BufferedImage.TYPE_INT_ARGB);  }  if (ImagingLib.filter(this,src,dst) == null) {    throw new ImagingOpException("Unable to transform src image");  }  if (needToConvert) {    ColorConvertOp ccop=new ColorConvertOp(hints);    ccop.filter(dst,origDst);  } else   if (origDst != dst) {    java.awt.Graphics2D g=origDst.createGraphics();    try {      g.setComposite(AlphaComposite.Src);      g.drawImage(dst,0,0,null);    }  finally {      g.dispose();    }  }  return origDst;}  }
class C{  public final boolean checkTag(int identifier){  return this.id == identifier;}  }
class C{  public void deleteKernel(String name){  Kernel kernel=getKernelByName(name);  if (kernel != null) {    kernel.dispose();    Integer oldSize=Integer.valueOf(_kernelHashTable.size());    _kernelHashTable.remove(name);    setDirtyAndFirePropertyChange(KERNEL_LISTLENGTH_CHANGED_PROPERTY,oldSize,Integer.valueOf(_kernelHashTable.size()));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void testWriteVarint() throws Exception {  assertWriteVarint(bytes(0x00),0);  assertWriteVarint(bytes(0x01),1);  assertWriteVarint(bytes(0x7f),127);  assertWriteVarint(bytes(0xa2,0x74),(0x22 << 0) | (0x74 << 7));  assertWriteVarint(bytes(0xbe,0xf7,0x92,0x84,0x0b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x0bL << 28));  assertWriteVarint(bytes(0xbe,0xf7,0x92,0x84,0x1b),(0x3e << 0) | (0x77 << 7) | (0x12 << 14)| (0x04 << 21)| (0x1bL << 28));  assertWriteVarint(bytes(0x80,0xe6,0xeb,0x9c,0xc3,0xc9,0xa4,0x49),(0x00 << 0) | (0x66 << 7) | (0x6b << 14)| (0x1c << 21)| (0x43L << 28)| (0x49L << 35)| (0x24L << 42)| (0x49L << 49));  assertWriteVarint(bytes(0x9b,0xa8,0xf9,0xc2,0xbb,0xd6,0x80,0x85,0xa6,0x01),(0x1b << 0) | (0x28 << 7) | (0x79 << 14)| (0x42 << 21)| (0x3bL << 28)| (0x56L << 35)| (0x00L << 42)| (0x05L << 49)| (0x26L << 56)| (0x01L << 63));}  }
class C{  @Override public int readTimeout(byte[] buffer,int offset,int length,long timeout) throws IOException {  int sublen=getDelegate().readTimeout(buffer,offset,length,timeout);  if (sublen > 0) {    logStream().write(buffer,offset,sublen);  }  return sublen;}  }
class C{  @LogMessageDoc(level="ERROR",message="Failed to clear all flows on switch {switch}",explanation="An I/O error occured while trying send " + "topology discovery packet",recommendation=LogMessageDoc.CHECK_SWITCH) public void doMultiActionPacketOut(byte[] packetData,IOFSwitch sw,Set<Short> ports,FloodlightContext cntx){  if (ports == null)   return;  if (packetData == null || packetData.length <= 0)   return;  OFPacketOut po=(OFPacketOut)floodlightProvider.getOFMessageFactory().getMessage(OFType.PACKET_OUT);  List<OFAction> actions=new ArrayList<OFAction>();  for (  short p : ports) {    actions.add(new OFActionOutput(p,(short)0));  }  po.setActions(actions);  po.setActionsLength((short)(OFActionOutput.MINIMUM_LENGTH * ports.size()));  po.setBufferId(OFPacketOut.BUFFER_ID_NONE);  po.setInPort(OFPort.OFPP_NONE.getValue());  po.setPacketData(packetData);  short poLength=(short)(OFPacketOut.MINIMUM_LENGTH + po.getActionsLength() + packetData.length);  po.setLength(poLength);  try {    if (log.isTraceEnabled()) {      log.trace("write broadcast packet on switch-id={} " + "interaces={} packet-data={} packet-out={}",new Object[]{sw.getId(),ports,packetData,po});    }    sw.write(po,cntx);  } catch (  IOException e) {    log.error("Failure writing packet out",e);  }}  }
class C{  public NaryJoin(TupleExpr... args){  super(args);}  }
class C{  public ResultSet read(Reader reader,String[] colNames) throws IOException {  init(null,null);  this.input=reader;  return readResultSet(colNames);}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public void memberJoined(final InternalDistributedMember id){  if (!isListening()) {    return;  }synchronized (this) {    if (!this.distributedMembers.contains(id)) {      this.distributedMembers.add(id);      addPendingJoin(id);      joinProcessor.resumeHandling();    }  }}  }
class C{  public StringSendPacket send(String str,SendListener listener){  if (str == null)   throw new NullPointerException("Send string can't be null.");  StringSendPacket entity=null;  try {    entity=new StringSendPacket(str,listener);    send(entity);  } catch (  Exception e) {    e.printStackTrace();  }  return entity;}  }
class C{  @Override public Future<List<Future<DLSN>>> writeBulk(final List<LogRecord> records){  final Stopwatch stopwatch=Stopwatch.createStarted();  return Future.value(asyncWriteBulk(records)).addEventListener(new OpStatsListener<List<Future<DLSN>>>(bulkWriteOpStatsLogger,stopwatch));}  }
class C{  private void trimPc(Node t){  for (  Node x : new LinkedList<>(pc.get(t))) {    if (!pc.containsKey(x)) {      pc.put(x,mmpc(x));    }    if (!pc.get(x).contains(t)) {      pc.get(t).remove(x);    }  }}  }
class C{  public void addItems(List<T> items){  if (items == null || items.isEmpty()) {    return;  }  if (mItemList != null && mItemList.isEmpty()) {    mItemList.addAll(items);  } else {    mItemList.addAll(items);  }  mScrollAdapter=new AutoScrollPagerAdapter<T>(mItemList,this);  this.setAdapter(mScrollAdapter);}  }
class C{  synchronized void commit(Session session){  session.setAllCommitted();}  }
class C{  public JSONObject(Object bean){  this();  this.populateMap(bean);}  }
class C{  public void runBenchmarks(Reporter reporter,boolean verbose){  for (int i=0; i < binfo.length; i++) {    if (verbose)     System.out.println("Running benchmark " + i + " ("+ binfo[i].getName()+ ")");    try {      binfo[i].runBenchmark();    } catch (    Exception e) {      System.err.println("Error: benchmark " + i + " failed: "+ e);      e.printStackTrace();    }    cleanup();  }  try {    reporter.writeReport(binfo,System.getProperties());  } catch (  IOException e) {    System.err.println("Error: failed to write benchmark report");  }}  }
class C{  public static Container encloseIn(int columns,boolean growHorizontally,Component... cmps){  int rows=cmps.length;  if (rows % columns > 0) {    rows=rows / columns + 1;  } else {    rows=rows / columns;  }  TableLayout tl=new TableLayout(rows,columns);  tl.setGrowHorizontally(growHorizontally);  return Container.encloseIn(tl,cmps);}  }
class C{  public void clear(){  int oldSize=size();  super.clear();  if (oldSize > 0 && getComponent() != null) {    getComponent().componentInputMapChanged(this);  }}  }
class C{  public static String readStream(InputStream in){  BufferedReader reader=new BufferedReader(new InputStreamReader(in));  StringBuilder sb=new StringBuilder();  String line=null;  try {    while ((line=reader.readLine()) != null) {      sb.append(line + "\n");    }  } catch (  IOException e) {    FreshAirLog.e("Error reading stream",e);  } finally {    try {      in.close();    } catch (    IOException e) {    }    try {      reader.close();    } catch (    IOException e) {    }  }  return sb.toString();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case StextPackage.EVENT_RAISING_EXPRESSION__EVENT:    setEvent((Expression)null);  return;case StextPackage.EVENT_RAISING_EXPRESSION__VALUE:setValue((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public void tagExport(String[] names,int[] ids) throws IOException {  if (tags != null) {    tags.tagExport(names,ids);  }}  }
class C{  private void generateL1(){  int dim=vi[vi.length - 1] - vi[0];  this.A1=new short[dim][dim];  this.A1inv=null;  ComputeInField c=new ComputeInField();  while (A1inv == null) {    for (int i=0; i < dim; i++) {      for (int j=0; j < dim; j++) {        A1[i][j]=(short)(sr.nextInt() & GF2Field.MASK);      }    }    A1inv=c.inverse(A1);  }  b1=new short[dim];  for (int i=0; i < dim; i++) {    b1[i]=(short)(sr.nextInt() & GF2Field.MASK);  }}  }
class C{  public void testGetAttributeNodeNS1() throws Throwable {  Document doc;  Element element;  Attr attribute1;  Attr attribute2;  Attr attribute;  String attrValue;  String attrName;  String attNodeName;  String attrLocalName;  String attrNS;  doc=(Document)load("staffNS",builder);  element=doc.createElementNS("namespaceURI","root");  attribute1=doc.createAttributeNS("http://www.w3.org/DOM/Level2","l2:att");  element.setAttributeNodeNS(attribute1);  attribute2=doc.createAttributeNS("http://www.w3.org/DOM/Level1","att");  element.setAttributeNodeNS(attribute2);  attribute=element.getAttributeNodeNS("http://www.w3.org/DOM/Level2","att");  attrValue=attribute.getNodeValue();  attrName=attribute.getName();  attNodeName=attribute.getNodeName();  attrLocalName=attribute.getLocalName();  attrNS=attribute.getNamespaceURI();  assertEquals("elementgetattributenodens01_attrValue","",attrValue);  assertEquals("elementgetattributenodens01_attrName","l2:att",attrName);  assertEquals("elementgetattributenodens01_attrNodeName","l2:att",attNodeName);  assertEquals("elementgetattributenodens01_attrLocalName","att",attrLocalName);  assertEquals("elementgetattributenodens01_attrNs","http://www.w3.org/DOM/Level2",attrNS);}  }
class C{  public static boolean checkURLforSpiders(HttpServletRequest request){  boolean result=false;  String spiderRequest=(String)request.getAttribute("_REQUEST_FROM_SPIDER_");  if (UtilValidate.isNotEmpty(spiderRequest)) {    if ("Y".equals(spiderRequest)) {      return true;    } else {      return false;    }  } else {    String initialUserAgent=request.getHeader("User-Agent") != null ? request.getHeader("User-Agent") : "";    List<String> spiderList=StringUtil.split(UtilProperties.getPropertyValue("url","link.remove_lsessionid.user_agent_list"),",");    if (UtilValidate.isNotEmpty(spiderList)) {      for (      String spiderNameElement : spiderList) {        Pattern pattern=null;        try {          pattern=PatternFactory.createOrGetPerl5CompiledPattern(spiderNameElement,false);        } catch (        MalformedPatternException e) {          Debug.logError(e,module);        }        PatternMatcher matcher=new Perl5Matcher();        if (matcher.contains(initialUserAgent,pattern)) {          request.setAttribute("_REQUEST_FROM_SPIDER_","Y");          result=true;          break;        }      }    }  }  if (!result) {    request.setAttribute("_REQUEST_FROM_SPIDER_","N");  }  return result;}  }
class C{  private void useGemFirePropertiesFileInTemporaryFolder(final String fileName,final Properties gemfireProperties) throws Exception {  File propertiesFile=new File(this.temporaryFolder.getRoot().getCanonicalPath(),fileName);  System.setProperty(DistributedSystem.PROPERTIES_FILE_PROPERTY,propertiesFile.getCanonicalPath());  gemfireProperties.store(new FileWriter(propertiesFile,false),this.testName.getMethodName());  assertThat(propertiesFile.isFile()).isTrue();  assertThat(propertiesFile.exists()).isTrue();}  }
class C{  @Override @Deprecated public void shutdown(){  throw new UnsupportedOperationException();}  }
class C{  @Override public void update(){  dispatchUpdate();}  }
class C{  public void updateUI(){  setUI((InternalFrameUI)UIManager.getUI(this));  invalidate();  if (desktopIcon != null) {    desktopIcon.updateUIWhenHidden();  }}  }
class C{  public Extensions extensions(){  if (extensions == null) {    extensions=new Extensions(this);  }  return extensions;}  }
class C{  public static Context fromUserPass(Subject s,String user,char[] pass,boolean storeKey) throws Exception {  Context out=new Context();  out.name=user;  out.s=s;  Krb5LoginModule krb5=new Krb5LoginModule();  Map<String,String> map=new HashMap<>();  Map<String,Object> shared=new HashMap<>();  if (pass != null) {    map.put("useFirstPass","true");    shared.put("javax.security.auth.login.name",user);    shared.put("javax.security.auth.login.password",pass);  } else {    map.put("doNotPrompt","true");    map.put("useTicketCache","true");    if (user != null) {      map.put("principal",user);    }  }  if (storeKey) {    map.put("storeKey","true");  }  krb5.initialize(out.s,null,shared,map);  krb5.login();  krb5.commit();  return out;}  }
class C{  @SuppressWarnings("unchecked") public <T>Source<T> sequence(T... ts){  return sequence(java.util.Arrays.asList(ts));}  }
class C{  public Builder cacheOnDisc(){  cacheOnDisc=true;  return this;}  }
class C{  private void removeEntry(String key){  CacheHeader entry=mEntries.get(key);  if (entry != null) {    mTotalSize-=entry.size;    mEntries.remove(key);  }}  }
class C{  public JSONObject put(String key,boolean value) throws JSONException {  this.put(key,value ? Boolean.TRUE : Boolean.FALSE);  return this;}  }
class C{  public static void writeBoolList(IonWriter writer,boolean[] values) throws IOException {  if (writer instanceof PrivateListWriter) {    ((PrivateListWriter)writer).writeBoolList(values);    return;  }  writer.stepIn(IonType.LIST);  for (int ii=0; ii < values.length; ii++) {    writer.writeBool(values[ii]);  }  writer.stepOut();}  }
class C{  public OutlierResult run(Database database,Relation<N> nrel,Relation<? extends NumberVector> relation){  final NeighborSetPredicate npred=getNeighborSetPredicateFactory().instantiate(database,nrel);  WritableDoubleDataStore means=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_TEMP);  CovarianceMatrix covm=new CovarianceMatrix(2);  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    final double local=relation.get(iditer).doubleValue(0);    Mean mean=new Mean();    DBIDs neighbors=npred.getNeighborDBIDs(iditer);    for (DBIDIter iter=neighbors.iter(); iter.valid(); iter.advance()) {      if (DBIDUtil.equal(iditer,iter)) {        continue;      }      mean.put(relation.get(iter).doubleValue(0));    }    final double m;    if (mean.getCount() > 0) {      m=mean.getMean();    } else {      m=local;    }    means.putDouble(iditer,m);    covm.put(new double[]{local,m});  }  final double slope, inter;{    double[] meanv=covm.getMeanVector();    double[][] fmat=covm.destroyToSampleMatrix();    final double covxx=fmat[0][0], covxy=fmat[0][1];    slope=covxy / covxx;    inter=meanv[1] - slope * meanv[0];  }  WritableDoubleDataStore scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  MeanVariance mv=new MeanVariance();  for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {    double y_i=relation.get(iditer).doubleValue(0);    double e=means.doubleValue(iditer) - (slope * y_i + inter);    scores.putDouble(iditer,e);    mv.put(e);  }  DoubleMinMax minmax=new DoubleMinMax();{    final double mean=mv.getMean();    final double variance=mv.getNaiveStddev();    for (DBIDIter iditer=relation.iterDBIDs(); iditer.valid(); iditer.advance()) {      double score=Math.abs((scores.doubleValue(iditer) - mean) / variance);      minmax.put(score);      scores.putDouble(iditer,score);    }  }  DoubleRelation scoreResult=new MaterializedDoubleRelation("SPO","Scatterplot-Outlier",scores,relation.getDBIDs());  OutlierScoreMeta scoreMeta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax(),0.0,Double.POSITIVE_INFINITY,0);  OutlierResult or=new OutlierResult(scoreMeta,scoreResult);  or.addChildResult(npred);  return or;}  }
class C{  private String createString(String f){  return "maxThreadsPerBlock=" + maxThreadsPerBlock + f+ "maxThreadsDim="+ Arrays.toString(maxThreadsDim)+ f+ "maxGridSize="+ Arrays.toString(maxGridSize)+ f+ "sharedMemPerBlock="+ sharedMemPerBlock+ f+ "totalConstantMemory="+ totalConstantMemory+ f+ "regsPerBlock="+ regsPerBlock+ f+ "SIMDWidth="+ SIMDWidth+ f+ "memPitch="+ memPitch+ f+ "regsPerBlock="+ regsPerBlock+ f+ "clockRate="+ clockRate+ f+ "textureAlign="+ textureAlign;}  }
class C{  public void fireDataSourceRemoved(final int index){  for (  ChartListener listener : listenerList) {    listener.dataSourceRemoved(index);  }}  }
class C{  public void testArrayListToJsonArrayConversion(){  try {    JSONArray array=StoreRetrieveData.toJSONArray(mTestData);    assertEquals(mTestData.size(),array.length());  } catch (  Exception e) {    fail("Exception thrown when converting to JSONArray: " + e.getMessage());  }}  }
class C{  @DELETE @Produces(MediaType.APPLICATION_JSON) @Path("/{alertId}/triggers") @Description("Deletes all triggers for the given alert ID. All associations to alert notifications are also removed.") public Response deleteAllTriggersByAlertId(@Context HttpServletRequest req,@PathParam("alertId") BigInteger alertId){  if (alertId == null || alertId.compareTo(BigInteger.ZERO) < 1) {    throw new WebApplicationException("Alert Id cannot be null and must be a positive non-zero number.",Status.BAD_REQUEST);  }  Alert alert=alertService.findAlertByPrimaryKey(alertId);  if (alert == null) {    throw new WebApplicationException(Response.Status.NOT_FOUND.getReasonPhrase(),Response.Status.NOT_FOUND);  }  validateResourceAuthorization(req,alert.getOwner(),getRemoteUser(req));  for (  Notification notification : alert.getNotifications()) {    notification.setTriggers(new ArrayList<Trigger>(0));  }  alert.setTriggers(new ArrayList<Trigger>(0));  alert.setModifiedBy(getRemoteUser(req));  alertService.updateAlert(alert);  return Response.status(Status.OK).build();}  }
class C{  @Override public void close(){  if (this.isTemporaryFile) {    File f1=new File(this.headerFile);    f1.delete();    f1=new File(this.dataFile);    f1.delete();  } else {    if (saveChanges) {      if (isDirty) {        writeDataBlock();      }      findMinAndMaxVals();      writeHeaderFile();    }  }  grid=null;}  }
class C{  static int findBestSampleSize(int actualWidth,int actualHeight,int desiredWidth,int desiredHeight){  double wr=(double)actualWidth / desiredWidth;  double hr=(double)actualHeight / desiredHeight;  double ratio=Math.min(wr,hr);  float n=1.0f;  while ((n * 2) <= ratio) {    n*=2;  }  return (int)n;}  }
class C{  protected void initView(){  p.setFakeBoldText(false);  p.setAntiAlias(true);  p.setTextSize(MINI_DAY_NUMBER_TEXT_SIZE);  p.setStyle(Style.FILL);  mMonthNumPaint=new Paint();  mMonthNumPaint.setFakeBoldText(true);  mMonthNumPaint.setAntiAlias(true);  mMonthNumPaint.setTextSize(MINI_DAY_NUMBER_TEXT_SIZE);  mMonthNumPaint.setColor(mFocusMonthColor);  mMonthNumPaint.setStyle(Style.FILL);  mMonthNumPaint.setTextAlign(Align.CENTER);}  }
class C{  protected void validateStartState(State startState){  ValidationUtils.validateState(startState);  ValidationUtils.validateTaskStage(startState.taskState);}  }
class C{  public ColladaPhong(String ns){  super(ns);}  }
class C{  public final static byte[] decode(char[] sArr){  int sLen=sArr != null ? sArr.length : 0;  if (sLen == 0)   return new byte[0];  int sepCnt=0;  for (int i=0; i < sLen; i++)   if (IA[sArr[i]] < 0)   sepCnt++;  if ((sLen - sepCnt) % 4 != 0)   return null;  int pad=0;  for (int i=sLen; i > 1 && IA[sArr[--i]] <= 0; )   if (sArr[i] == '=')   pad++;  int len=((sLen - sepCnt) * 6 >> 3) - pad;  byte[] dArr=new byte[len];  for (int s=0, d=0; d < len; ) {    int i=0;    for (int j=0; j < 4; j++) {      int c=IA[sArr[s++]];      if (c >= 0)       i|=c << (18 - j * 6); else       j--;    }    dArr[d++]=(byte)(i >> 16);    if (d < len) {      dArr[d++]=(byte)(i >> 8);      if (d < len)       dArr[d++]=(byte)i;    }  }  return dArr;}  }
class C{  public void ConfigParams(){  int height=Config.singletonConfig.getHeight();  int width=Config.singletonConfig.getWidth();  assertEquals((height > 0) & (width > 0),true);}  }
class C{  static boolean isXAWTToplevelWindow(long window){  return XToolkit.windowToXWindow(window) instanceof XWindowPeer;}  }
class C{  public static ComponentUI createUI(JComponent h){  return new BETableHeaderUI();}  }
class C{  private String createAttribute(AttributeModel attr){  StringBuffer sb=new StringBuffer();  sb.append("    ");  String visibility=attr.getVisibility().toString();  if (!visibility.equals("package")) {    sb.append(attr.getVisibility().toString());    sb.append(" ");  }  if (attr.isStatic()) {    sb.append("static ");  }  sb.append(attr.getType());  sb.append(" ");  sb.append(attr.getName());  if (attr.getParent() instanceof InterfaceModel) {    if (UMLJavaUtils.isPrimitive(attr.getType())) {      if (attr.getType().equals("boolean")) {        sb.append(" = false");      } else {        sb.append(" = 0");      }    } else {      sb.append(" = null");    }  }  sb.append(";");  return sb.toString();}  }
class C{  public static synchronized Bitmap decodeSampledBitmapFromFile(String filename,int reqWidth,int reqHeight){  final BitmapFactory.Options options=new BitmapFactory.Options();  options.inJustDecodeBounds=true;  BitmapFactory.decodeFile(filename,options);  options.inSampleSize=calculateInSampleSize(options,reqWidth,reqHeight);  options.inJustDecodeBounds=false;  return BitmapFactory.decodeFile(filename,options);}  }
class C{  public AudioData duplicate() throws IOException, ClassNotFoundException {  AudioData result=new AudioData();  ByteArrayOutputStream baos=new ByteArrayOutputStream();  ObjectOutputStream oos=new ObjectOutputStream(baos);  writeExternal(oos);  oos.close();  byte[] buf=baos.toByteArray();  baos.close();  ByteArrayInputStream bais=new ByteArrayInputStream(buf);  ObjectInputStream ois=new ObjectInputStream(bais);  result.readExternal(ois);  ois.close();  bais.close();  if (header != null) {    result.setHeader(header.clone());  }  return result;}  }
class C{  public static void main(String[] args){  try {    File rootFolder=GeneratorUtils.getRootFolder(args);    System.out.println(" ------------------------------------------------------------------------ ");    System.out.println(String.format("Searching for Extensions in %s",rootFolder.getAbsolutePath()));    System.out.println(" ------------------------------------------------------------------------ ");    findExtensions();    generateExtensionManager(rootFolder);  } catch (  IOException e) {    System.err.println(e.getMessage());    System.exit(1);  }}  }
class C{  public void add(KeywordInfo info){  keywords.put(info.getKeyword(),info);}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public FileSystemConfiguration(FileSystemConfiguration cfg){  assert cfg != null;  blockSize=cfg.getBlockSize();  bufSize=cfg.getStreamBufferSize();  colocateMeta=cfg.isColocateMetadata();  dataCacheName=cfg.getDataCacheName();  dfltMode=cfg.getDefaultMode();  dualModeMaxPendingPutsSize=cfg.getDualModeMaxPendingPutsSize();  dualModePutExec=cfg.getDualModePutExecutorService();  dualModePutExecShutdown=cfg.getDualModePutExecutorServiceShutdown();  fragmentizerConcurrentFiles=cfg.getFragmentizerConcurrentFiles();  fragmentizerLocWritesRatio=cfg.getFragmentizerLocalWritesRatio();  fragmentizerEnabled=cfg.isFragmentizerEnabled();  fragmentizerThrottlingBlockLen=cfg.getFragmentizerThrottlingBlockLength();  fragmentizerThrottlingDelay=cfg.getFragmentizerThrottlingDelay();  secondaryFs=cfg.getSecondaryFileSystem();  initDfltPathModes=cfg.isInitializeDefaultPathModes();  ipcEndpointCfg=cfg.getIpcEndpointConfiguration();  ipcEndpointEnabled=cfg.isIpcEndpointEnabled();  maxSpace=cfg.getMaxSpaceSize();  maxTaskRangeLen=cfg.getMaximumTaskRangeLength();  metaCacheName=cfg.getMetaCacheName();  mgmtPort=cfg.getManagementPort();  name=cfg.getName();  pathModes=cfg.getPathModes();  perNodeBatchSize=cfg.getPerNodeBatchSize();  perNodeParallelBatchCnt=cfg.getPerNodeParallelBatchCount();  prefetchBlocks=cfg.getPrefetchBlocks();  relaxedConsistency=cfg.isRelaxedConsistency();  seqReadsBeforePrefetch=cfg.getSequentialReadsBeforePrefetch();  trashPurgeTimeout=cfg.getTrashPurgeTimeout();  updateFileLenOnFlush=cfg.isUpdateFileLengthOnFlush();}  }
class C{  public QueryPanel(JFrame parent){  super();  m_Parent=parent;  m_QueryExecuteListeners=new HashSet<QueryExecuteListener>();  m_HistoryChangedListeners=new HashSet<HistoryChangedListener>();  m_DbUtils=null;  m_Connected=false;  createPanel();}  }
class C{  public void loadDataFromPush(Node sourceNode,InputStream in,OutputStream out) throws IOException {  loadDataFromPush(sourceNode,null,in,out);}  }
class C{  public TStructMember basicGetDefinedMember(){  return definedMember;}  }
class C{  private void declareExtensions(){  new IssueCommentsFeed().declareExtensions(extProfile);  new IssuesFeed().declareExtensions(extProfile);  new ProjectsFeed().declareExtensions(extProfile);}  }
class C{  public void addMethodThrowingExceptionNoBidirectionalUpdate(MethodType type){  if (null == methodsThrowingThisException) {    methodsThrowingThisException=new MethodTypeSet();  }  methodsThrowingThisException.add(type);}  }
class C{  private boolean isValid(int type,String value){  if (value == null) {    return false;  }  if (ALLOWED_STRINGS[type] != null) {    return verifyStringGroup(value,ALLOWED_STRINGS[type]);  }switch (type) {case TYPE_NUMBER:    return verify(value,DIGITS,null);case TYPE_PIXELS_OR_PERCENTAGE:  if (value.endsWith("%")) {    value=value.substring(0,value.length() - 1);  } else   if (value.endsWith("px")) {    value=value.substring(0,value.length() - 2);  }return verify(value,DIGITS,null);case TYPE_CHAR:return verify(value,DIGITS | ABC,null,1,1);case TYPE_COLOR:if (value.length() == 0) {return false;}if (value.charAt(0) != '#') {return verifyStringGroup(value,COLOR_STRINGS);} else {return verify(value.substring(1),HEX,null,3,6);}default :return true;}}  }
class C{  public static Map<String,String> messageToMap(Message msg){  Map<String,String> map=new HashMap<>();  if (msg == null)   return map;  if (msg.fixedHeader().messageType() == MqttMessageType.PUBLISH) {    MqttPublishVariableHeader variableHeader=(MqttPublishVariableHeader)msg.variableHeader();    MqttPublishPayload payload=(MqttPublishPayload)msg.payload();    map.put("type",String.valueOf(MqttMessageType.PUBLISH.value()));    map.put("retain",BooleanUtils.toString(msg.fixedHeader().retain(),"1","0"));    map.put("qos",String.valueOf(msg.fixedHeader().qos().value()));    map.put("dup",BooleanUtils.toString(msg.fixedHeader().dup(),"1","0"));    map.put("version",msg.additionalHeader().version().toString());    if (!msg.fixedHeader().retain())     map.put("clientId",msg.additionalHeader().clientId());    map.put("userName",msg.additionalHeader().userName());    map.put("topicName",variableHeader.topicName());    if (!msg.fixedHeader().retain())     map.put("packetId",String.valueOf(variableHeader.packetId()));    if (payload != null && payload.bytes() != null && payload.bytes().length > 0)     try {      map.put("payload",new String(payload.bytes(),"ISO-8859-1"));    } catch (    UnsupportedEncodingException ignore) {    }    return map;  } else   if (msg.fixedHeader().messageType() == MqttMessageType.PUBREL) {    MqttPacketIdVariableHeader variableHeader=(MqttPacketIdVariableHeader)msg.variableHeader();    map.put("type",String.valueOf(MqttMessageType.PUBREL.value()));    map.put("version",msg.additionalHeader().version().toString());    map.put("clientId",msg.additionalHeader().clientId());    map.put("userName",msg.additionalHeader().userName());    map.put("packetId",String.valueOf(variableHeader.packetId()));    return map;  } else {    throw new IllegalArgumentException("Invalid in-flight MQTT message type: " + msg.fixedHeader().messageType());  }}  }
class C{  public void startStatementWithinTransaction(){  startStatement=-1;}  }
class C{  public void remove(){  throw new UnsupportedOperationException();}  }
class C{  @Override public int hashCode(){  return this.hash;}  }
class C{  public static Integer createServerCache() throws Exception {  new OperationsPropagationDUnitTest().createCache(new Properties());  AttributesFactory factory=new AttributesFactory();  factory.setScope(Scope.DISTRIBUTED_ACK);  factory.setDataPolicy(DataPolicy.REPLICATE);  RegionAttributes attrs=factory.create();  region=cache.createRegion(REGION_NAME,attrs);  CacheServerImpl server=(CacheServerImpl)cache.addCacheServer();  assertNotNull(server);  int port=AvailablePort.getRandomAvailablePort(AvailablePort.SOCKET);  server.setPort(port);  server.setNotifyBySubscription(true);  server.start();  return new Integer(server.getPort());}  }
class C{  public MethodInfo(ConstPool cp,String methodname,String desc){  this(cp);  accessFlags=0;  name=cp.addUtf8Info(methodname);  cachedName=methodname;  descriptor=constPool.addUtf8Info(desc);}  }
class C{  public DTMIterator createDTMIterator(String xpathString,PrefixResolver presolver){  return m_dtmManager.createDTMIterator(xpathString,presolver);}  }
class C{  private static char CallStaticCharMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticCharMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Char);    return Reflection.unwrapChar(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public void clip(Shape s){  mGraphics.clip(s);}  }
class C{  public void mark(int value){  buffer.mark(value);}  }
class C{  public void afterLoadPreferences(Properties ctx){  int AD_Client_ID=Env.getAD_Client_ID(ctx);  for (int i=0; i < m_validators.size(); i++) {    ModelValidator validator=(ModelValidator)m_validators.get(i);    if (AD_Client_ID == validator.getAD_Client_ID() || m_globalValidators.contains(validator)) {      java.lang.reflect.Method m=null;      try {        m=validator.getClass().getMethod("afterLoadPreferences",new Class[]{Properties.class});      } catch (      NoSuchMethodException e) {      }      try {        if (m != null)         m.invoke(validator,ctx);      } catch (      Exception e) {        log.warning("" + validator + ": "+ e.getLocalizedMessage());      }    }  }}  }
class C{  private void cmd_EFT(){  ValueNamePair pp=(ValueNamePair)fPaymentRule.getSelectedItem();  if (pp == null)   return;  String PaymentRule=pp.getValue();  log.info(PaymentRule);  if (!getChecks(PaymentRule))   return;  dispose();}  }
class C{  @Override public void addValue(double value,double weight){  m_WeightedSum+=value * weight;  m_WeightedSumSquared+=value * value * weight;  m_SumOfWeights+=weight;  if (m_TM.get(value) == null) {    m_TM.put(value,weight);  } else {    m_TM.put(value,m_TM.get(value) + weight);  }  if (!getUpdateWeightsOnly()) {    m_Boundaries=null;  }  m_Weights=null;}  }
class C{  public static DefaultNonListCollectionAdapter adapt(Collection collection,ObjectWrapperWithAPISupport wrapper){  return new DefaultNonListCollectionAdapter(collection,wrapper);}  }
class C{  @Override public void agg(Object newVal){  valueSet.add(newVal instanceof Long ? (Long)newVal : Long.valueOf(newVal.toString()));  firstTime=false;}  }
class C{  public void executeFirst(Runnable task){synchronized (internalLock) {    queue.addFirst(task);  }  startQueueWorker();}  }
class C{  public static String generateXpaytoken(String resourcePath,String queryString,String requestBody) throws SignatureException {  String timestamp=timeStamp();  String beforeHash=timestamp + resourcePath + queryString+ requestBody;  String hash=hmacSha256Digest(beforeHash);  String token="xv2:" + timestamp + ":"+ hash;  return token;}  }
class C{  public StartRecordingKillsAction(final String questSlot,@Dev(defaultValue="1") final int index,final Map<String,Pair<Integer,Integer>> toKill){  this.toKill=checkNotNull(toKill);  this.questname=checkNotNull(questSlot);  this.index=index;}  }
class C{  public List<InstrumentHeader> createInstrument(final List<Map<String,Object>> paramList){  final List<InstrumentHeader> instrumentHeaderList=instrumentService.addToInstrument(paramList);  return instrumentHeaderList;}  }
class C{  public boolean removeIndex(String field){  ColumnEntry e=(ColumnEntry)m_entries.get(field);  if (e == null) {    throw new IllegalArgumentException("Unknown column name: " + field);  }  if (e.index == null) {    return false;  } else {    e.index.dispose();    e.index=null;    return true;  }}  }
class C{  public void rollIn(Operator operator){  map.put(operator,new InterpolatedValue(false,getValue(operator)));  if (!timer.isRunning()) {    timer.start();  }}  }
class C{  private RexNode convertUsing(SqlValidatorNamespace leftNamespace,SqlValidatorNamespace rightNamespace,List<String> nameList){  final List<RexNode> list=Lists.newArrayList();  for (  String name : nameList) {    List<RexNode> operands=new ArrayList<>();    int offset=0;    for (    SqlValidatorNamespace n : ImmutableList.of(leftNamespace,rightNamespace)) {      final RelDataType rowType=n.getRowType();      final RelDataTypeField field=catalogReader.field(rowType,name);      operands.add(rexBuilder.makeInputRef(field.getType(),offset + field.getIndex()));      offset+=rowType.getFieldList().size();    }    list.add(rexBuilder.makeCall(SqlStdOperatorTable.EQUALS,operands));  }  return RexUtil.composeConjunction(rexBuilder,list,false);}  }
class C{  public Boolean interimResults(){  return interimResults;}  }
class C{  public MimeType(String s){  parse(s);}  }
class C{  private DeclarationListener(Declaration decl){  this.declarationType=decl;  declarations=new ArrayList<>();}  }
class C{  public void hierarchyChanged(HierarchyEvent e){  ((HierarchyListener)a).hierarchyChanged(e);  ((HierarchyListener)b).hierarchyChanged(e);}  }
class C{  protected BasicAttributeModifier(UUID uuid,String name,double value,ModifierOperation operation,ModifierSlot slot,AttributeType type){  Validate.notNull(operation,"Operation can't be null.");  this.uuid=(uuid == null) ? UUID.randomUUID() : uuid;  this.name=name;  this.value=value;  this.operation=operation;  this.slot=slot;  this.type=type;}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(processinginstructionsetdatanomodificationallowederr.class,args);}  }
class C{  @Override public String toString(){  return super.toString() + ", ids: " + ids.size()+ ", d_min: "+ d_min+ ", d_max "+ d_max;}  }
class C{  protected boolean isValidQName(String prefix,String local,boolean xml11Version){  if (local == null)   return false;  boolean validNCName=false;  if (!xml11Version) {    validNCName=(prefix == null || XMLChar.isValidNCName(prefix)) && XMLChar.isValidNCName(local);  } else {    validNCName=(prefix == null || XML11Char.isXML11ValidNCName(prefix)) && XML11Char.isXML11ValidNCName(local);  }  return validNCName;}  }
class C{  public void addSplashScreenLoadingCompletion(double percentage){  if (splashScreen != null) {    splashScreen.addLoadingCompletion(percentage);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:41.557 -0500",hash_original_method="E2FC40814B9169B5CD5C50C2FA8F907C",hash_generated_method="5DD0BD6D57B1D4C166366483EC7A0A8A") public static int encode(byte[] data,int off,int length,OutputStream out) throws IOException {  return encoder.encode(data,off,length,out);}  }
class C{  private boolean routeUsingOneTrain(Train testTrain,Car car,Car clone){  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterTrainCanTransport"),new Object[]{testTrain.getName(),car.toString(),car.getTrack().getTrackTypeName(),car.getLocationName(),car.getTrackName(),clone.getDestinationName(),clone.getDestinationTrackName()}));  if (_addtoReport) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterRoute1TrainsForCar"),new Object[]{car.toString(),car.getLocationName(),car.getTrackName(),testTrain.getName(),clone.getDestinationName(),clone.getDestinationTrackName()}));  }  if (_train != null && _train != testTrain) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("TrainDoesNotServiceCar"),new Object[]{_train.getName(),car.toString(),clone.getDestinationName(),clone.getDestinationTrackName()}));    if (!_train.getServiceStatus().equals(Train.NONE)) {      addLine(_buildReport,SEVEN,_train.getServiceStatus());    }    _status=STATUS_NOT_THIS_TRAIN;    return true;  }  _status=car.setDestination(clone.getDestination(),clone.getDestinationTrack());  if (_status.equals(Track.OKAY)) {    return true;  }  addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterCanNotDeliverCar"),new Object[]{car.toString(),clone.getDestinationName(),clone.getDestinationTrackName(),_status,(clone.getDestinationTrack() == null ? Bundle.getMessage("RouterDestination") : clone.getDestinationTrack().getTrackTypeName())}));  if ((_status.startsWith(Track.LENGTH) || _status.startsWith(Track.SCHEDULE)) && clone.getDestinationTrack() != null && clone.getDestinationTrack().getAlternateTrack() != null && clone.getDestinationTrack().getAlternateTrack() != car.getTrack()) {    String status=car.setDestination(clone.getDestination(),clone.getDestinationTrack().getAlternateTrack());    if (status.equals(Track.OKAY)) {      if (_train == null || _train.services(car)) {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterSendCarToAlternative"),new Object[]{car.toString(),clone.getDestinationTrack().getAlternateTrack().getName(),clone.getDestination().getName()}));        return true;      }      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterNotSendCarToAlternative"),new Object[]{_train.getName(),car.toString(),clone.getDestinationTrack().getAlternateTrack().getName(),clone.getDestination().getName()}));    } else {      addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterAlternateFailed"),new Object[]{clone.getDestinationTrack().getAlternateTrack().getName(),status}));    }  } else   if (clone.getDestinationTrack() != null && clone.getDestinationTrack().getAlternateTrack() != null && clone.getDestinationTrack().getAlternateTrack() == car.getTrack()) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterAtAlternate"),new Object[]{car.toString(),clone.getDestinationTrack().getAlternateTrack().getName(),clone.getLocationName(),clone.getDestinationTrackName()}));  } else   if (car.getLocation() == clone.getDestination()) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterIgnoreAlternate"),new Object[]{car.toString(),car.getLocationName()}));  }  if (Setup.isForwardToYardEnabled() && _status.startsWith(Track.LENGTH) && car.getLocation() != clone.getDestination()) {    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterSpurFull"),new Object[]{clone.getDestinationTrackName(),clone.getDestinationName()}));    Location dest=clone.getDestination();    List<Track> yards=dest.getTrackByMovesList(Track.YARD);    log.debug("Found {} yard(s) at destination ({})",yards.size(),clone.getDestinationName());    for (    Track track : yards) {      String status=car.setDestination(dest,track);      if (status.equals(Track.OKAY)) {        if (_train != null && !_train.services(car)) {          log.debug("Train ({}) can not deliver car ({}) to yard ({})",_train.getName(),car.toString(),track.getName());          continue;        }        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterSendCarToYard"),new Object[]{car.toString(),track.getName(),dest.getName()}));        return true;      } else {        addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterCanNotUseYard"),new Object[]{track.getName(),status}));      }    }    addLine(_buildReport,SEVEN,MessageFormat.format(Bundle.getMessage("RouterNoYardTracks"),new Object[]{dest.getName(),car.toString()}));  }  car.setDestination(null,null);  if (car.getTrack().getTrackType().equals(Track.STAGING)) {    log.debug("Car ({}) departing staging, single train can't deliver car to ({}, {})",car.toString(),clone.getDestinationName(),clone.getDestinationTrackName());    return false;  }  return true;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  protected void uninstallListeners(){  progressBar.removeChangeListener(changeListener);  progressBar.removePropertyChangeListener(getHandler());  handler=null;}  }
class C{  public void logStatistics(){  for (  QueryStatistic statistic : queryStatistics) {    LOGGER.statistic(statistic.getStatistics(queryIWthTask));  }}  }
class C{  public ImageFetcher(Context context,int imageSize){  super(context,imageSize);  init(context);}  }
class C{  public static void main(String[] args) throws FloodlightModuleException {  System.setProperty("org.restlet.engine.loggerFacadeClass","org.restlet.ext.slf4j.Slf4jLoggerFacade");  CmdLineSettings settings=new CmdLineSettings();  CmdLineParser parser=new CmdLineParser(settings);  try {    parser.parseArgument(args);  } catch (  CmdLineException e) {    parser.printUsage(System.out);    System.exit(1);  }  FloodlightModuleLoader fml=new FloodlightModuleLoader();  IFloodlightModuleContext moduleContext=fml.loadModulesFromConfig(settings.getModuleFile());  IRestApiService restApi=moduleContext.getServiceImpl(IRestApiService.class);  restApi.run();  IFloodlightProviderService controller=moduleContext.getServiceImpl(IFloodlightProviderService.class);  controller.run();}  }
class C{  @Subscribe(threadMode=ThreadMode.ASYNC) public void onInitDbEvent(InitDbEvent event){  if (FlavorUtils.isPoiStorage()) {    Timber.d("Initializing database ...");    syncDownloadPoiTypes();    bus.postSticky(new DbInitializedEvent());  }}  }
class C{  private boolean isRequiredFields(){  String fieldRequired=getString(R.string.Required_field);  boolean nameCheck=Utils.checkTextInputLayoutValueRequirement(nameInputWrapper,fieldRequired);  boolean streetCheck=Utils.checkTextInputLayoutValueRequirement(streetInputWrapper,fieldRequired);  boolean houseNumberCheck=Utils.checkTextInputLayoutValueRequirement(houseNumberInputWrapper,fieldRequired);  boolean cityCheck=Utils.checkTextInputLayoutValueRequirement(cityInputWrapper,fieldRequired);  boolean zipCheck=Utils.checkTextInputLayoutValueRequirement(zipInputWrapper,fieldRequired);  boolean phoneCheck=Utils.checkTextInputLayoutValueRequirement(phoneInputWrapper,fieldRequired);  boolean emailCheck=Utils.checkTextInputLayoutValueRequirement(emailInputWrapper,fieldRequired);  return nameCheck && streetCheck && houseNumberCheck&& cityCheck&& zipCheck&& phoneCheck&& emailCheck;}  }
class C{  public String toString(){  String result="";  if (tag != 5) {    result+="[" + tag + "] ";  }  result+="NULL";switch (tag) {case errNoSuchObjectTag:    result+=" (noSuchObject)";  break;case errNoSuchInstanceTag:result+=" (noSuchInstance)";break;case errEndOfMibViewTag:result+=" (endOfMibView)";break;}return result;}  }
class C{  protected int checkGridCellSizes(int size,long numcell){  int tcount=0;  int hasmin=0;  double sqcount=0;  for (TLongObjectIterator<ModifiableDBIDs> it=grid.iterator(); it.hasNext(); ) {    it.advance();    final int s=it.value().size();    if (s >= size >> 1) {      LOG.warning("A single cell contains half of the database (" + s + " objects). This will not scale very well.");    }    tcount+=s;    sqcount+=s * (long)s;    if (s >= minpts) {      hasmin++;    }  }  double savings=sqcount / size / size;  if (savings >= 1) {    LOG.warning("Pairwise distances within each cells are more expensive than a full DBSCAN run due to overlap!");  }  if (overflown) {    LOG.statistics(new StringStatistic(GriDBSCAN.class.getName() + ".all-cells","overflow"));  } else {    LOG.statistics(new LongStatistic(GriDBSCAN.class.getName() + ".all-cells",numcell));  }  LOG.statistics(new LongStatistic(GriDBSCAN.class.getName() + ".used-cells",grid.size()));  LOG.statistics(new LongStatistic(GriDBSCAN.class.getName() + ".minpts-cells",hasmin));  LOG.statistics(new DoubleStatistic(GriDBSCAN.class.getName() + ".redundancy",tcount / (double)size));  LOG.statistics(new DoubleStatistic(GriDBSCAN.class.getName() + ".relative-cost",savings));  return hasmin;}  }
class C{  public XmlSlurper() throws ParserConfigurationException, SAXException {  this(false,true);}  }
class C{  @Deprecated @Override public void putAll(Map<? extends TypeToken<? extends B>,? extends B> map){  throw new UnsupportedOperationException();}  }
class C{  void transfer(Entry<K,V>[] newTable){  int newCapacity=newTable.length;  for (  Entry<K,V> e : table) {    while (null != e) {      Entry<K,V> next=e.next;      int i=indexFor(e.hash,newCapacity);      e.next=newTable[i];      newTable[i]=e;      e=next;    }  }}  }
class C{  int frequency(int key){  for (int slot=key & mask; ; slot=(slot + 1) & mask) {    if (keys[slot] == key) {      return freqs[slot];    } else     if (freqs[slot] == 0) {      return 0;    }  }}  }
class C{  public static <ST>boolean contains(LinkedNode<ST> node,ST value){  while (node != null) {    if (node.value() == value) {      return true;    }    node=node.next();  }  return false;}  }
class C{  public void createDefaultState(final String fileContentDescription,final int numberOfLines,final int tabSize){  setFileType(fileContentDescription);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.087 -0500",hash_original_method="408B8A2F6473D1390F4BD92FAF80FE83",hash_generated_method="16646E13182984A5B04207C46B29C805") public static final boolean isValidCommand(int code){  return (code <= __FIRST_COMMAND && code >= __LAST_COMMAND);}  }
class C{  public BasicBlock labelToBlock(int label){  int idx=indexOfLabel(label);  if (idx < 0) {    throw new IllegalArgumentException("no such label: " + Hex.u2(label));  }  return get(idx);}  }
class C{  public void addHost(String port,MACAddress host){  this.portToMac.put(port,host);  return;}  }
class C{  public boolean isFree(){  return type == PriceModelType.FREE_OF_CHARGE;}  }
class C{  public int translateDBColumnType(String type){  try {    String value=PROPERTIES.getProperty(type);    String typeUnderscore=type.replaceAll(" ","_");    if (value == null) {      value=PROPERTIES.getProperty(typeUnderscore);    }    return Integer.parseInt(value);  } catch (  NumberFormatException e) {    throw new IllegalArgumentException("Unknown data type: " + type + ". "+ "Add entry in "+ PROPERTY_FILE+ ".\n"+ "If the type contains blanks, either escape them with a backslash "+ "or use underscores instead of blanks.");  }}  }
class C{  public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (obj instanceof Map == false) {    return false;  }  Map map=(Map)obj;  if (map.size() != size()) {    return false;  }  MapIterator it=mapIterator();  try {    while (it.hasNext()) {      Object key=it.next();      Object value=it.getValue();      if (value == null) {        if (map.get(key) != null || map.containsKey(key) == false) {          return false;        }      } else {        if (value.equals(map.get(key)) == false) {          return false;        }      }    }  } catch (  ClassCastException ignored) {    return false;  }catch (  NullPointerException ignored) {    return false;  }  return true;}  }
class C{  public boolean isSetTriggerId(){  return EncodingUtils.testBit(issetBitfield,TRIGGERID_ISSET_ID);}  }
class C{  private void attachPlot(SVGPlot newplot){  this.plot=newplot;  if (newplot == null) {    super.setSVGDocument(null);    return;  }  newplot.synchronizeWith(synchronizer);  super.setSVGDocument(newplot.getDocument());  super.setDisableInteractions(newplot.getDisableInteractions());}  }
class C{  @Override public boolean hasPermission(Authentication auth,Object targetDomainObject,Object permission){  log.debug("Checking whether " + auth + "\n  has "+ permission+ " permission for "+ targetDomainObject);  if (targetDomainObject == null)   return true;  VersionedEntity<U,ID> entity=(VersionedEntity<U,ID>)targetDomainObject;  return entity.hasPermission(LemonUtil.getUser(auth),(String)permission);}  }
class C{  public static URL resolveClassPathOrURLResource(String resourceName,String urlOrClasspathResource){  URL url;  try {    url=new URL(urlOrClasspathResource);  } catch (  MalformedURLException ex) {    url=getClasspathResourceAsURL(resourceName,urlOrClasspathResource);  }  return url;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static final String asciiBoard(Position pos){  StringBuilder ret=new StringBuilder(400);  String nl=String.format(Locale.US,"%n");  ret.append("    +----+----+----+----+----+----+----+----+");  ret.append(nl);  for (int y=7; y >= 0; y--) {    ret.append("    |");    for (int x=0; x < 8; x++) {      ret.append(' ');      int p=pos.getPiece(Position.getSquare(x,y));      if (p == Piece.EMPTY) {        boolean dark=Position.darkSquare(x,y);        ret.append(dark ? ".. |" : "   |");      } else {        ret.append(Piece.isWhite(p) ? ' ' : '*');        String pieceName=pieceToChar(p);        if (pieceName.length() == 0)         pieceName="P";        ret.append(pieceName);        ret.append(" |");      }    }    ret.append(nl);    ret.append("    +----+----+----+----+----+----+----+----+");    ret.append(nl);  }  return ret.toString();}  }
class C{  @Override public synchronized void remove(String key){  boolean deleted=getFileForKey(key).delete();  removeEntry(key);  if (!deleted) {    VolleyLog.d("Could not delete cache entry for key=%s, filename=%s",key,getFilenameForKey(key));  }}  }
class C{  public TransitionData(S source,S target,Long period,Integer count,Collection<Action<S,E>> actions,Guard<S,E> guard,TransitionKind kind){  this(source,target,null,null,period,count,actions,guard,kind,null);}  }
class C{  public ProgressStatusEvent(List<String> progressTypes){  super(Events.PROGRESS_STATUS_CHANGE);  put("data",progressTypes);}  }
class C{  @Override public String toString(){  return toString(MAX_NUMBER_OF_ITEMSETS);}  }
class C{  void copyParentSets(BayesNet dest,BayesNet source){  int nNodes=source.getNrOfNodes();  for (int iNode=0; iNode < nNodes; iNode++) {    dest.getParentSet(iNode).copy(source.getParentSet(iNode));  }}  }
class C{  public long optLong(int index,long defaultValue){  try {    return this.getLong(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  SelectAllAction(){  super(selectAllAction);}  }
class C{  @Override public void removeNotify(){  super.removeNotify();  if (focusedComponent == this) {    focusedComponent=null;  }}  }
class C{  final public static float[] earthCircle(float phi1,float lambda0,float c,float s,float e,int n,float[] ret_val){  double Az, cosAz, sinAz;  double cosphi1=Math.cos(phi1);  double sinphi1=Math.sin(phi1);  double sinc=Math.sin(c);  double cosc=Math.cos(c);  if (n < 2)   n=2;  int end=n << 1;  if (ret_val == null || end > ret_val.length) {    ret_val=new float[end];  }  double inc=e / (n - 1);  Az=s;  for (int i=0; i < end; i+=2, Az+=inc) {    cosAz=Math.cos(Az);    sinAz=Math.sin(Az);    ret_val[i]=(float)Math.asin(sinphi1 * cosc + cosphi1 * sinc * cosAz);    ret_val[i + 1]=(float)Math.atan2(sinc * sinAz,cosphi1 * cosc - sinphi1 * sinc * cosAz) + lambda0;  }  return ret_val;}  }
class C{  protected void sendEvidences(final String basePath) throws TransportException, ProtocolException {  if (Cfg.DEBUG) {    Check.log(TAG + " Info: sendEvidences from: " + basePath);  }  final EvidenceCollector logCollector=EvidenceCollector.self();  final Vector dirs=logCollector.scanForDirLogs(basePath);  final int dsize=dirs.size();  if (Cfg.DEBUG) {    Check.log(TAG + " sendEvidences #directories: " + dsize);  }  for (int i=0; i < dsize; ++i) {    final String dir=(String)dirs.elementAt(i);    final String[] logs=logCollector.scanForEvidences(basePath,dir);    final int lsize=logs.length;    if (Cfg.DEBUG) {      Check.log(TAG + "    dir: " + dir+ " #evidences: "+ lsize);    }    final byte[] evidenceSize=new byte[12];    System.arraycopy(ByteArray.intToByteArray(lsize),0,evidenceSize,0,4);    byte[] response=command(Proto.EVIDENCE_SIZE,evidenceSize);    checkOk(response);    response=null;    for (    final String logName : logs) {      final String fullLogName=basePath + dir + logName;      final AutoFile file=new AutoFile(fullLogName);      if (!file.exists()) {        if (Cfg.DEBUG) {          Check.log(TAG + " Error: File doesn't exist: " + fullLogName);        }        continue;      }      if (file.getSize() > Cfg.PROTOCOL_CHUNK) {        sendResumeEvidence(file);      } else {        sendEvidence(file);      }    }    if (!Path.removeDirectory(basePath + dir)) {      if (Cfg.DEBUG) {        Check.log(TAG + " Warn: " + "Not empty directory");      }    }  }}  }
class C{  private void handleShowOnFirstLaunch(){  if (mActivity != null && mDrawerLayout != null && mShowDrawerOnFirstLaunch) {    SharedPreferences preferences=PreferenceManager.getDefaultSharedPreferences(mActivity);    if (!preferences.getBoolean(Drawer.PREF_USER_LEARNED_DRAWER,false)) {      mDrawerLayout.openDrawer(mSliderLayout);      SharedPreferences.Editor editor=preferences.edit();      editor.putBoolean(Drawer.PREF_USER_LEARNED_DRAWER,true);      editor.apply();    }  }}  }
class C{  public void testDoubleMissingLast() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",-1.3));  doc.add(new StoredField("value",-1.3));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",4.2333333333333));  doc.add(new StoredField("value",4.2333333333333));  writer.addDocument(doc);  doc=new Document();  doc.add(new DoublePoint("value",4.2333333333332));  doc.add(new StoredField("value",4.2333333333332));  writer.addDocument(doc);  IndexReader ir=UninvertingReader.wrap(writer.getReader(),Collections.singletonMap("value",Type.DOUBLE_POINT));  writer.close();  IndexSearcher searcher=newSearcher(ir,false);  SortField sortField=new SortField("value",SortField.Type.DOUBLE);  sortField.setMissingValue(Double.MAX_VALUE);  Sort sort=new Sort(sortField);  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(4,td.totalHits);  assertEquals("-1.3",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4.2333333333332",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("4.2333333333333",searcher.doc(td.scoreDocs[2].doc).get("value"));  assertNull(searcher.doc(td.scoreDocs[3].doc).get("value"));  TestUtil.checkReader(ir);  ir.close();  dir.close();}  }
class C{  public JobExecutionException(String msg,Throwable cause,boolean refireImmediately){  super(msg,cause);  refire=refireImmediately;}  }
class C{  public static int[][] makeDelayEmbeddingVector(int[] data,int k){  try {    return makeDelayEmbeddingVector(data,k,k - 1,data.length - k + 1);  } catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public static boolean isValidName(String name){  if (name.length() == 0)   return false;  char ch=name.charAt(0);  if (isNameStart(ch) == false)   return false;  for (int i=1; i < name.length(); i++) {    ch=name.charAt(i);    if (isName(ch) == false) {      return false;    }  }  return true;}  }
class C{  public AstRoot parse(String sourceString,String sourceURI,int lineno){  if (parseFinished)   throw new IllegalStateException("parser reused");  this.sourceURI=sourceURI;  if (compilerEnv.isIdeMode()) {    this.sourceChars=sourceString.toCharArray();  }  this.ts=new TokenStream(this,null,sourceString,lineno);  try {    return parse();  } catch (  IOException iox) {    throw new IllegalStateException();  } finally {    parseFinished=true;  }}  }
class C{  public boolean hasKind(){  return getKind() != null;}  }
class C{  public void deleteComment(final IComment comment) throws com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException {  try {    m_function.deleteGlobalComment(comment);  } catch (  final CouldntDeleteException exception) {    throw new com.google.security.zynamics.binnavi.API.disassembly.CouldntDeleteException(exception);  }}  }
class C{  public void testOrder(){  SubmissionPublisher<Integer> p=basicPublisher();  TestSubscriber s1=new TestSubscriber();  TestSubscriber s2=new TestSubscriber();  p.subscribe(s1);  p.subscribe(s2);  for (int i=1; i <= 20; ++i)   p.submit(i);  p.close();  s2.awaitComplete();  s1.awaitComplete();  assertEquals(20,s2.nexts);  assertEquals(1,s2.completes);  assertEquals(20,s1.nexts);  assertEquals(1,s1.completes);}  }
class C{  protected List<StorageUnitEntity> excludeDuplicateBusinessObjectData(List<StorageUnitEntity> storageUnitEntities,List<String> storageNames,List<StorageEntity> storageEntities) throws IllegalArgumentException {  Map<BusinessObjectDataEntity,StorageUnitEntity> businessObjectDataToStorageUnitMap=new LinkedHashMap<>();  for (  StorageUnitEntity storageUnitEntity : storageUnitEntities) {    BusinessObjectDataEntity businessObjectDataEntity=storageUnitEntity.getBusinessObjectData();    if (businessObjectDataToStorageUnitMap.containsKey(businessObjectDataEntity)) {      if (CollectionUtils.isEmpty(storageNames)) {        throw new IllegalArgumentException(String.format("Found business object data registered in more than one storage. " + "Please specify storage(s) in the request to resolve this. Business object data {%s}",businessObjectDataHelper.businessObjectDataEntityAltKeyToString(businessObjectDataEntity)));      } else {        StorageEntity currentStorageEntity=businessObjectDataToStorageUnitMap.get(businessObjectDataEntity).getStorage();        int currentStorageIndex=storageEntities.indexOf(currentStorageEntity);        int newStorageIndex=storageEntities.indexOf(storageUnitEntity.getStorage());        if (newStorageIndex < currentStorageIndex) {          businessObjectDataToStorageUnitMap.put(storageUnitEntity.getBusinessObjectData(),storageUnitEntity);        }      }    } else {      businessObjectDataToStorageUnitMap.put(storageUnitEntity.getBusinessObjectData(),storageUnitEntity);    }  }  return new ArrayList<>(businessObjectDataToStorageUnitMap.values());}  }
class C{  public OrPredicate(Predicate<T> first,Predicate<T> second){  this.first=first;  this.second=second;}  }
class C{  private void createChildren(){  for (  final ITreeNode<CTag> child : m_rootTag.getChildren()) {    add(new CTagTreeNode(m_parent,getGraph(),m_tagManager,m_tagsTree.getModel(),child));  }}  }
class C{  private void fillDimensionsAndMeasuresForTables(TableSchema tableSchema){  List<CarbonDimension> dimensions=new ArrayList<CarbonDimension>();  List<CarbonMeasure> measures=new ArrayList<CarbonMeasure>();  this.tableDimensionsMap.put(tableSchema.getTableName(),dimensions);  this.tableMeasuresMap.put(tableSchema.getTableName(),measures);  int dimensionOrdinal=0;  int measureOrdinal=0;  int keyOrdinal=0;  int columnGroupOrdinal=-1;  int previousColumnGroupId=-1;  List<ColumnSchema> listOfColumns=tableSchema.getListOfColumns();  int complexTypeOrdinal=-1;  for (int i=0; i < listOfColumns.size(); i++) {    ColumnSchema columnSchema=listOfColumns.get(i);    if (columnSchema.isDimensionColumn()) {      if (columnSchema.getNumberOfChild() > 0) {        CarbonDimension complexDimension=new CarbonDimension(columnSchema,dimensionOrdinal++,-1,-1,++complexTypeOrdinal);        complexDimension.initializeChildDimensionsList(columnSchema.getNumberOfChild());        dimensions.add(complexDimension);        dimensionOrdinal=readAllComplexTypeChildrens(dimensionOrdinal,columnSchema.getNumberOfChild(),listOfColumns,complexDimension);        i=dimensionOrdinal - 1;        complexTypeOrdinal=assignComplexOrdinal(complexDimension,complexTypeOrdinal);      } else {        if (!columnSchema.getEncodingList().contains(Encoding.DICTIONARY)) {          dimensions.add(new CarbonDimension(columnSchema,dimensionOrdinal++,-1,-1,-1));        } else         if (columnSchema.getEncodingList().contains(Encoding.DICTIONARY) && columnSchema.getColumnGroupId() == -1) {          dimensions.add(new CarbonDimension(columnSchema,dimensionOrdinal++,keyOrdinal++,-1,-1));        } else {          columnGroupOrdinal=previousColumnGroupId == columnSchema.getColumnGroupId() ? ++columnGroupOrdinal : 0;          previousColumnGroupId=columnSchema.getColumnGroupId();          dimensions.add(new CarbonDimension(columnSchema,dimensionOrdinal++,keyOrdinal++,columnGroupOrdinal,-1));        }      }    } else {      measures.add(new CarbonMeasure(columnSchema,measureOrdinal++));    }  }}  }
class C{  public boolean matches(Class<? extends Object> clazz){  return value.equals(Tag.PREFIX + clazz.getName());}  }
class C{  public static CharSequence cleanUp(Context context,CharSequence text){  if ((text == null) || (text.length() != 1)) {    return text;  }  return getCleanValueFor(context,text.charAt(0));}  }
class C{  private boolean isTemplateNamePart(char ch){  return !Character.isWhitespace(ch) && ch != '(' && ch != ')' && ch != '{' && ch != '}' && ch != ';' && ch != '>';}  }
class C{  @Override public boolean isActive(){  return true;}  }
class C{  public static Map<String,Integer> sizes(){  HashMap<String,Integer> m=new HashMap<>();  m.put(State.INVENTORY.name(),inventory.size());  m.put(State.ARCHIVE.name(),archive.size());  return m;}  }
class C{  public void decUniqueCqQuery(){  this._stats.incInt(_numUniqueCqQuery,-1);}  }
class C{  private void initializeLiveAttributes(){  filterUnits=createLiveAnimatedEnumeration(null,SVG_FILTER_UNITS_ATTRIBUTE,UNITS_VALUES,(short)2);  primitiveUnits=createLiveAnimatedEnumeration(null,SVG_PRIMITIVE_UNITS_ATTRIBUTE,UNITS_VALUES,(short)1);  x=createLiveAnimatedLength(null,SVG_X_ATTRIBUTE,SVG_FILTER_X_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,false);  y=createLiveAnimatedLength(null,SVG_Y_ATTRIBUTE,SVG_FILTER_Y_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,false);  width=createLiveAnimatedLength(null,SVG_WIDTH_ATTRIBUTE,SVG_FILTER_WIDTH_DEFAULT_VALUE,SVGOMAnimatedLength.HORIZONTAL_LENGTH,true);  height=createLiveAnimatedLength(null,SVG_HEIGHT_ATTRIBUTE,SVG_FILTER_HEIGHT_DEFAULT_VALUE,SVGOMAnimatedLength.VERTICAL_LENGTH,true);  href=createLiveAnimatedString(XLINK_NAMESPACE_URI,XLINK_HREF_ATTRIBUTE);  externalResourcesRequired=createLiveAnimatedBoolean(null,SVG_EXTERNAL_RESOURCES_REQUIRED_ATTRIBUTE,false);}  }
class C{  public String[] discoverDatabases(String selected){  if (p_discovered != null)   return p_discovered;  p_discovered=new String[]{};  return p_discovered;}  }
class C{  public SignatureVisitor visitArrayType(){  return this;}  }
class C{  private Object readAttribute(InputNode node,String key) throws Exception {  String name=style.getAttribute(key);  InputNode child=node.getAttribute(name);  if (child == null) {    return null;  }  return root.read(child);}  }
class C{  public void testTwoStepReduceSqlQuery(){  IgniteCache<Integer,Value> cache=grid(0).cache(null);  QueryCursor<List<?>> qry=cache.query(new SqlFieldsQuery("select _val from Value order by _key"));  List<List<?>> all=qry.getAll();  assertEquals(KEYS,all.size());  for (  List<?> entry : all)   ((Value)entry.get(0)).str="after";  check(cache);}  }
class C{  public WrapLayout(){  super();}  }
class C{  public static boolean verifyPassword(long salt,byte[] hash,String password){  return Arrays.equals(calculateHash(salt,password),hash);}  }
class C{  static void autoConfigureArchitecture(JNAeratorConfig config){  String arch=System.getProperty("os.arch").toLowerCase();  if (config.verbose) {    System.out.println("os.arch = " + arch);  }  if (arch.equals("x86_64") || arch.equals("amd64")) {    config.preprocessorConfig.implicitMacros.put("TARGET_CPU_X86_64",null);    config.preprocessorConfig.implicitMacros.put("__i386__",null);    config.preprocessorConfig.implicitMacros.put("__x86_64__",null);    config.preprocessorConfig.implicitMacros.put("__amd64__",null);    config.preprocessorConfig.implicitMacros.put("__LITTLE_ENDIAN__",null);    config.preprocessorConfig.implicitMacros.put("M_I86","1");    config.preprocessorConfig.implicitMacros.put("_M_I86","1");    config.preprocessorConfig.implicitMacros.put("_WIN32","1");  } else   if (arch.equals("i386") || arch.equals("x86")) {    config.preprocessorConfig.implicitMacros.put("TARGET_CPU_X86",null);    config.preprocessorConfig.implicitMacros.put("__i386__",null);    config.preprocessorConfig.implicitMacros.put("__LITTLE_ENDIAN__",null);    config.preprocessorConfig.implicitMacros.put("M_I86","1");    config.preprocessorConfig.implicitMacros.put("_M_I86","1");    config.preprocessorConfig.implicitMacros.put("_WIN32","1");  } else   if (arch.equals("ppc")) {    config.preprocessorConfig.implicitMacros.put("TARGET_CPU_PPC",null);    config.preprocessorConfig.implicitMacros.put("__PPC__",null);    config.preprocessorConfig.implicitMacros.put("__powerpc__",null);    config.preprocessorConfig.implicitMacros.put("__BIG_ENDIAN__",null);  } else   if (arch.equals("ppc64")) {    config.preprocessorConfig.implicitMacros.put("TARGET_CPU_PPC64",null);    config.preprocessorConfig.implicitMacros.put("__PPC_64__",null);    config.preprocessorConfig.implicitMacros.put("__BIG_ENDIAN__",null);  }}  }
class C{  @Override public void encode(WbXmlEncoder encoder,WbXmlElement ewlement,WbXmlContent content) throws IOException {  if (!content.isString()) {    throw new IOException("The content is not a String!");  }  String value=content.getString();  if (value != null) {    encoder.writeOpaque(value.getBytes(encoder.getIanaCharset().getCharset()));  }}  }
class C{  private void ib4(int a,int b,int c,int d){  int t1=c | d;  int t2=a & t1;  int t3=b ^ t2;  int t4=a & t3;  int t5=c ^ t4;  X1=d ^ t5;  int t7=~a;  int t8=t5 & X1;  X3=t3 ^ t8;  int t10=X1 | t7;  int t11=d ^ t10;  X0=X3 ^ t11;  X2=(t3 & t11) ^ (X1 ^ t7);}  }
class C{  private static Field findField(Object instance,String name) throws NoSuchFieldException {  for (Class<?> clazz=instance.getClass(); clazz != null; clazz=clazz.getSuperclass()) {    try {      Field field=clazz.getDeclaredField(name);      if (!field.isAccessible()) {        field.setAccessible(true);      }      return field;    } catch (    NoSuchFieldException e) {    }  }  throw new NoSuchFieldException("Field " + name + " not found in "+ instance.getClass());}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public final void trimToSize(){  Object[] newObjects=new Object[m_Size];  System.arraycopy(m_Objects,0,newObjects,0,m_Size);  m_Objects=newObjects;}  }
class C{  public void keyPress(int keyCode){  TestUtils.keyPress(keyCode);}  }
class C{  public int compareTo(double value){  if (value >= start) {    if (value < end) {      return 0;    } else {      return -1;    }  } else {    return +1;  }}  }
class C{  public static String toUpperCase(String s){  return toUpperCase(s,null);}  }
class C{  private boolean isConnected(){  return fTextViewer != null && fDocumentUndoManager != null;}  }
class C{  public static ReilInstruction createNop(final long offset){  final ReilOperand firstOperand=createOperand(OperandSize.EMPTY,"");  final ReilOperand secondOperand=createOperand(OperandSize.EMPTY,"");  final ReilOperand thirdOperand=createOperand(OperandSize.EMPTY,"");  return new ReilInstruction(new CAddress(offset),ReilHelpers.OPCODE_NOP,firstOperand,secondOperand,thirdOperand);}  }
class C{  public static void registerMetadata(MetadataRegistry registry){  if (registry.isRegistered(KEY)) {    return;  }  ElementCreator builder=registry.build(KEY).setContentRequired(false);  builder.addAttribute(CONTENT_TYPE);  builder.addAttribute(ERROR_COUNT).setRequired(true);  builder.addAttribute(TOTAL_COUNT).setRequired(true);  builder.addAttribute(REASON);  builder.addAttribute(SUCCESS_COUNT).setRequired(true);  builder.addAttribute(SKIPPED_COUNT).setRequired(true);}  }
class C{  public String signature(int i){  return descriptor(i);}  }
class C{  public <V2>JavaPairRDD<Tuple2<K,V>,Option<V2>> outerJoinGeodeRegion(String regionPath,GeodeConnectionConf connConf){  GeodeOuterJoinRDD<Tuple2<K,V>,K,V2> rdd=rddf.outerJoinGeodeRegion(regionPath,connConf);  ClassTag<Tuple2<K,V>> kt=fakeClassTag();  ClassTag<Option<V2>> vt=fakeClassTag();  return new JavaPairRDD<>(rdd,kt,vt);}  }
class C{  public static String serialize(Element element){  StringWriter sw=new StringWriter();  serialize(new DOMSource(element),sw);  return sw.toString();}  }
class C{  public boolean typeNameSet(){  return ((this.getTypeName() != null) && (!this.getTypeName().isEmpty()));}  }
class C{  public void searchDeclarationsOfReferencedTypes(IJavaElement enclosingElement,SearchRequestor requestor,IProgressMonitor monitor) throws JavaModelException {  if (VERBOSE) {    Util.verbose("BasicSearchEngine.searchDeclarationsOfReferencedTypes(IJavaElement, SearchRequestor, SearchPattern, IProgressMonitor)");  }switch (enclosingElement.getElementType()) {case IJavaElement.FIELD:case IJavaElement.METHOD:case IJavaElement.TYPE:case IJavaElement.COMPILATION_UNIT:    break;default :  throw new IllegalArgumentException();}SearchPattern pattern=new DeclarationOfReferencedTypesPattern(enclosingElement);searchDeclarations(enclosingElement,requestor,pattern,monitor);}  }
class C{  public void toggle(boolean animate){  toggle(animate,fadeIn,fadeOut);}  }
class C{  public int add(E o,int row){  T dl=getNewDataLine(o);  return dl == null ? -1 : add(dl,row);}  }
class C{  public void testKeyword() throws Exception {  Input keys[]=new Input[]{new Input("foo",50),new Input("bar",10),new Input("barbar",12),new Input("barbara",6)};  Analyzer analyzer=new MockAnalyzer(random(),MockTokenizer.KEYWORD,false);  Directory tempDir=getDirectory();  FuzzySuggester suggester=new FuzzySuggester(tempDir,"fuzzy",analyzer);  suggester.build(new InputArrayIterator(keys));  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("bariar",random()),false,2);  assertEquals(2,results.size());  assertEquals("barbar",results.get(0).key.toString());  assertEquals(12,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("barbr",random()),false,2);  assertEquals(2,results.size());  assertEquals("barbar",results.get(0).key.toString());  assertEquals(12,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("barbara",random()),false,2);  assertEquals(2,results.size());  assertEquals("barbara",results.get(0).key.toString());  assertEquals(6,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("barbar",random()),false,2);  assertEquals(2,results.size());  assertEquals("barbar",results.get(0).key.toString());  assertEquals(12,results.get(0).value,0.01F);  assertEquals("barbara",results.get(1).key.toString());  assertEquals(6,results.get(1).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("barbaa",random()),false,2);  assertEquals(2,results.size());  assertEquals("barbar",results.get(0).key.toString());  assertEquals(12,results.get(0).value,0.01F);  assertEquals("barbara",results.get(1).key.toString());  assertEquals(6,results.get(1).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("f",random()),false,2);  assertEquals(1,results.size());  assertEquals("foo",results.get(0).key.toString());  assertEquals(50,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("bar",random()),false,1);  assertEquals(1,results.size());  assertEquals("bar",results.get(0).key.toString());  assertEquals(10,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("b",random()),false,2);  assertEquals(2,results.size());  assertEquals("barbar",results.get(0).key.toString());  assertEquals(12,results.get(0).value,0.01F);  assertEquals("bar",results.get(1).key.toString());  assertEquals(10,results.get(1).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("ba",random()),false,3);  assertEquals(3,results.size());  assertEquals("barbar",results.get(0).key.toString());  assertEquals(12,results.get(0).value,0.01F);  assertEquals("bar",results.get(1).key.toString());  assertEquals(10,results.get(1).value,0.01F);  assertEquals("barbara",results.get(2).key.toString());  assertEquals(6,results.get(2).value,0.01F);  IOUtils.close(analyzer,tempDir);}  }
class C{  public URI(String scheme,String schemeSpecificPart,String fragment) throws URISyntaxException {  StringBuilder uri=new StringBuilder();  if (scheme != null) {    uri.append(scheme);    uri.append(':');  }  if (schemeSpecificPart != null) {    ALL_LEGAL_ENCODER.appendEncoded(uri,schemeSpecificPart);  }  if (fragment != null) {    uri.append('#');    ALL_LEGAL_ENCODER.appendEncoded(uri,fragment);  }  parseURI(uri.toString(),false);}  }
class C{  protected int nextInTopLevel() throws IOException, XMLException {switch (current) {case 0x9:case 0xA:case 0xD:case 0x20:    do {      nextChar();    } while (current != -1 && XMLUtilities.isXMLSpace((char)current));  return LexicalUnits.S;case '<':switch (nextChar()) {case '?':  context=PI_CONTEXT;return readPIStart();case '!':switch (nextChar()) {case '-':return readComment();case 'D':context=DOCTYPE_CONTEXT;return readIdentifier("OCTYPE",LexicalUnits.DOCTYPE_START,-1);default :throw createXMLException("invalid.character");}default :context=START_TAG_CONTEXT;depth++;return readName(LexicalUnits.START_TAG);}case -1:return LexicalUnits.EOF;default :throw createXMLException("invalid.character");}}  }
class C{  public KMLTimeStamp(String namespaceURI){  super(namespaceURI);}  }
class C{  public JSONStringer endArray() throws JSONException {  return close(Scope.EMPTY_ARRAY,Scope.NONEMPTY_ARRAY,"]");}  }
class C{  public final void testGetKeysize(){  RSAKeyGenParameterSpec rkgps=new RSAKeyGenParameterSpec(512,BigInteger.valueOf(0L));  assertEquals(512,rkgps.getKeysize());}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:23.272 -0500",hash_original_method="82CCBEF7CE2F6615EFEE4A91C0BA2F9C",hash_generated_method="422C6824B767C066DE9BAE5D3104F2DE") @Deprecated public static boolean isJavaLetterOrDigit(char c){  return isJavaIdentifierPart(c);}  }
class C{  public void ruimo(Code code){switch (code) {case A:    System.out.println("Hello");  break;case B:System.out.println("Hello");break;default :break;}}  }
class C{  public void testInt() throws IOException {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document doc=new Document();  doc.add(new NumericDocValuesField("value",300000));  doc.add(newStringField("value","300000",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",-1));  doc.add(newStringField("value","-1",Field.Store.YES));  writer.addDocument(doc);  doc=new Document();  doc.add(new NumericDocValuesField("value",4));  doc.add(newStringField("value","4",Field.Store.YES));  writer.addDocument(doc);  IndexReader ir=writer.getReader();  writer.close();  IndexSearcher searcher=newSearcher(ir);  Sort sort=new Sort(new SortField("value",SortField.Type.INT));  TopDocs td=searcher.search(new MatchAllDocsQuery(),10,sort);  assertEquals(3,td.totalHits);  assertEquals("-1",searcher.doc(td.scoreDocs[0].doc).get("value"));  assertEquals("4",searcher.doc(td.scoreDocs[1].doc).get("value"));  assertEquals("300000",searcher.doc(td.scoreDocs[2].doc).get("value"));  ir.close();  dir.close();}  }
class C{  public static String joinGt(boolean phased,int... gt){  final char sep=phased ? PHASED_SEPARATOR : UNPHASED_SEPARATOR;switch (gt.length) {case 0:    return MISSING_FIELD;case 1:  return encodeId(gt[0]);case 2:return encodeId(gt[0]) + sep + encodeId(gt[1]);default :final StringBuilder sb=new StringBuilder();for (final int c : gt) {if (sb.length() > 0) {sb.append(sep);}sb.append(encodeId(c));}return sb.toString();}}  }
class C{  public static Marshaller createMarshaller(Class<?> clazz,NamespacePrefixMapper mpr) throws Exception {  Marshaller marshaller=createMarshaller(clazz);  marshaller.setProperty("com.sun.xml.bind.namespacePrefixMapper",mpr);  marshaller.setProperty(Marshaller.JAXB_FRAGMENT,Boolean.TRUE);  return marshaller;}  }
class C{  public static CatalogEntry createCatalogEntry(Product product,Marketplace marketplace){  CatalogEntry catalogEntry=new CatalogEntry();  catalogEntry.setProduct(product);  catalogEntry.setMarketplace(marketplace);  return catalogEntry;}  }
class C{  public VertxTodoServiceVerticle(ManagedServiceBuilder managedServiceBuilder){  this.managedServiceBuilder=managedServiceBuilder;}  }
class C{  public static Test suite(){  return (new TestSuite(Issue1757ITCase.class));}  }
class C{  public boolean optBoolean(String key,boolean defaultValue){  try {    return this.getBoolean(key);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public CustomerInfo(String id){  this.id=id;  this.searchkey=null;  this.taxid=null;  this.name=null;  this.postal=null;  this.phone=null;  this.email=null;}  }
class C{  protected JButton createPopupButton(){  return new BuddyButton();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:22.389 -0500",hash_original_method="C0676E9FE520D18F322700EE730819D6",hash_generated_method="29D24BE5410E4955A051AB5D177667AC") public CancellationException(){}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Builder withSslProtocol(SslProtocol sslProtocol){  properties.setProperty(NettyOptions.SSL_PROTOCOL,Assert.notNull(sslProtocol,"sslProtocol").name().replace("_","."));  return this;}  }
class C{  @Override public void add(int index,Instance instance){  Instance newInstance=(Instance)instance.copy();  newInstance.setDataset(this);  m_Instances.add(index,newInstance);}  }
class C{  public AdeDirectoriesManagerImpl(String outputPath) throws AdeException {  this(outputPath,null,null);}  }
class C{  public boolean equals(Object obj){  return obj instanceof Date && getTime() == ((Date)obj).getTime();}  }
class C{  protected void onListChanged(){  if (swipeListViewListener != null) {    swipeListViewListener.onListChanged();  }}  }
class C{  public VolumeListImpl(){  init(ISicresAdminDefsKeys.NULL_ID);}  }
class C{  public void notifyMTU(int mtu){  m_mtu_advise=mtu;  if (m_state == PseudoTcpState.TCP_ESTABLISHED) {    adjustMTU();  }}  }
class C{  CipherSuiteList(String[] names){  if (names == null) {    throw new IllegalArgumentException("CipherSuites may not be null");  }  cipherSuites=new ArrayList<CipherSuite>(names.length);  for (int i=0; i < names.length; i++) {    String suiteName=names[i];    CipherSuite suite=CipherSuite.valueOf(suiteName);    if (suite.isAvailable() == false) {      throw new IllegalArgumentException("Cannot support " + suiteName + " with currently installed providers");    }    cipherSuites.add(suite);  }}  }
class C{  @Override public StorageOSUserDAO resolveUser(BaseToken token){  if (token == null) {    return null;  }  URI userId=null;  boolean isProxy=token instanceof ProxyToken;  if (isProxy) {    userId=((ProxyToken)token).peekLastKnownId();  } else {    userId=((Token)token).getUserId();  }  StorageOSUserDAO userDAO=_dbClient.queryObject(StorageOSUserDAO.class,userId);  if (userDAO == null) {    _log.error("No user record found or userId: {}",userId.toString());    return null;  }  return userDAO;}  }
class C{  public boolean isHighPriorityStep(Step step){  if (LOGGER.isDebugEnabled()) {    LOGGER.debug(" Step Id : " + step.getId());  }  if (step.getId().toLowerCase().contains("stepLoadFromFasta".toLowerCase()) || step.getId().toLowerCase().contains("panther".toLowerCase()) || step.getId().toLowerCase().contains("prositeprofiles".toLowerCase())) {    if (LOGGER.isDebugEnabled()) {      LOGGER.debug(" panther/prositeprofiles job: " + step.getId() + " Should have high priority");    }    return true;  }  return false;}  }
class C{  public Main(String name,PrintWriter out){  this.ownName=name;  this.out=out;}  }
class C{  public boolean isSetKey(){  return this.key != null;}  }
class C{  public void skip(){  signature=signature.substring(1);}  }
class C{  public Order incorporate(OrderEvent orderEvent){  if (orderStatus == null)   orderStatus=OrderStatus.PURCHASED;switch (orderStatus) {case PURCHASED:    if (orderEvent.getType() == OrderEventType.CREATED)     orderStatus=OrderStatus.PENDING;  break;case PENDING:if (orderEvent.getType() == OrderEventType.ORDERED) {  orderStatus=OrderStatus.CONFIRMED;} else if (orderEvent.getType() == OrderEventType.PURCHASED) {  orderStatus=OrderStatus.PURCHASED;}break;case CONFIRMED:if (orderEvent.getType() == OrderEventType.SHIPPED) {orderStatus=OrderStatus.SHIPPED;} else if (orderEvent.getType() == OrderEventType.CREATED) {orderStatus=OrderStatus.PENDING;}break;case SHIPPED:if (orderEvent.getType() == OrderEventType.DELIVERED) {orderStatus=OrderStatus.DELIVERED;} else if (orderEvent.getType() == OrderEventType.ORDERED) {orderStatus=OrderStatus.CONFIRMED;}break;case DELIVERED:if (orderEvent.getType() == OrderEventType.SHIPPED) orderStatus=OrderStatus.SHIPPED;break;default :break;}return this;}  }
class C{  @Override public void initializeLogging(){  LogWrapper logWrapper=new LogWrapper();  Log.setLogNode(logWrapper);  MessageOnlyLogFilter msgFilter=new MessageOnlyLogFilter();  logWrapper.setNext(msgFilter);  LogFragment logFragment=(LogFragment)getSupportFragmentManager().findFragmentById(R.id.log_fragment);  msgFilter.setNext(logFragment.getLogView());  logFragment.getLogView().setTextAppearance(this,R.style.Log);  logFragment.getLogView().setBackgroundColor(Color.WHITE);  Log.i(TAG,"Ready");}  }
class C{  @NonNull public <T>Observable<T> wrap(@NonNull Observable<T> observable){  return new SubscriptionManager.ManagedObservable<>(observable,this);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @SuppressWarnings("deprecation") public Cube(Column column,int cubeY,ICubePrimer primer){  this(column,cubeY);  int miny=Coords.cubeToMinBlock(cubeY);  IHeightMap opindex=column.getOpacityIndex();  for (int x=0; x < 16; x++) {    for (int z=0; z < 16; z++) {      for (int y=15; y >= 0; y--) {        IBlockState newstate=primer.getBlockState(x,y,z);        if (newstate.getMaterial() != Material.AIR) {          if (storage == null) {            newStorage();          }          storage.set(x,y,z,newstate);          if (newstate.getLightOpacity() != 0) {            column.setModified(true);            opindex.onOpacityChange(x,miny + y,z,newstate.getLightOpacity());          }        }      }    }  }  isModified=true;}  }
class C{  public TerminalSize(int columns,int rows){  if (columns < 0) {    throw new IllegalArgumentException("TerminalSize.columns cannot be less than 0!");  }  if (rows < 0) {    throw new IllegalArgumentException("TerminalSize.rows cannot be less than 0!");  }  this.columns=columns;  this.rows=rows;}  }
class C{  public void resetStatus(){  if (status != Status.ERROR) {    status=Status.UNLOADED;  }}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return stack.getUIMgrSafe().getVideoFrame().getDVDAvailableSubpictures();}  }
class C{  private static AdvancingFrontNode newFrontTriangle(DTSweepContext tcx,TriangulationPoint point,AdvancingFrontNode node){  AdvancingFrontNode newNode;  DelaunayTriangle triangle;  triangle=new DelaunayTriangle(point,node.point,node.next.point);  triangle.markNeighbor(node.triangle);  tcx.addToList(triangle);  newNode=new AdvancingFrontNode(point);  newNode.next=node.next;  newNode.prev=node;  node.next.prev=newNode;  node.next=newNode;  tcx.addNode(newNode);  if (tcx.isDebugEnabled()) {    tcx.getDebugContext().setActiveNode(newNode);  }  if (!legalize(tcx,triangle)) {    tcx.mapTriangleToNodes(triangle);  }  return newNode;}  }
class C{  public boolean skipSpaces() throws IOException {  if (fCurrentEntity.position == fCurrentEntity.count) {    load(0,true);  }  int c=fCurrentEntity.ch[fCurrentEntity.position];  if (XMLChar.isSpace(c)) {    boolean external=fCurrentEntity.isExternal();    do {      boolean entityChanged=false;      if (c == '\n' || (external && c == '\r')) {        fCurrentEntity.lineNumber++;        fCurrentEntity.columnNumber=1;        if (fCurrentEntity.position == fCurrentEntity.count - 1) {          fCurrentEntity.ch[0]=(char)c;          entityChanged=load(1,true);          if (!entityChanged)           fCurrentEntity.position=0;        }        if (c == '\r' && external) {          if (fCurrentEntity.ch[++fCurrentEntity.position] != '\n') {            fCurrentEntity.position--;          }        }      } else {        fCurrentEntity.columnNumber++;      }      if (!entityChanged)       fCurrentEntity.position++;      if (fCurrentEntity.position == fCurrentEntity.count) {        load(0,true);      }    } while (XMLChar.isSpace(c=fCurrentEntity.ch[fCurrentEntity.position]));    return true;  }  return false;}  }
class C{  @Override public Storage updateStorage(StorageAlternateKeyDto storageAlternateKey,StorageUpdateRequest storageUpdateRequest){  validateStorageAlternateKey(storageAlternateKey);  StorageEntity storageEntity=storageDaoHelper.getStorageEntity(storageAlternateKey);  storageEntity=storageDao.saveAndRefresh(storageEntity);  return createStorageFromEntity(storageEntity);}  }
class C{  public static void renameTempDMLScript(String dmlScriptFile){  File oldPath=new File(dmlScriptFile + "t");  File newPath=new File(dmlScriptFile);  oldPath.renameTo(newPath);}  }
class C{  public static Object deepCopy(Object o){  Object result;  SerializedObject so;  try {    so=new SerializedObject((Serializable)o);    result=so.getObject();  } catch (  Exception e) {    System.err.println("Failed to serialize " + o.getClass().getName() + ":");    e.printStackTrace();    result=null;  }  return result;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case N4JSPackage.BINDING_ELEMENT__REST:    return isRest();case N4JSPackage.BINDING_ELEMENT__VAR_DECL:  return getVarDecl();case N4JSPackage.BINDING_ELEMENT__NESTED_PATTERN:return getNestedPattern();case N4JSPackage.BINDING_ELEMENT__EXPRESSION:return getExpression();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static State valueOf(int value){  State entry=mValueToEnum.get(value);  if (entry != null) {    return entry;  }  throw new IllegalArgumentException("No enum const class " + State.class.getName() + ""+ value+ "!");}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void dispatchAsComment(org.xml.sax.ext.LexicalHandler lh) throws org.xml.sax.SAXException {  fsb().sendSAXComment(lh,m_start,m_length);}  }
class C{  void load(InputStream in) throws IOException, CryptoPolicyParser.ParsingException {  CryptoPolicyParser parser=new CryptoPolicyParser();  parser.read(new BufferedReader(new InputStreamReader(in,"UTF-8")));  CryptoPermission[] parsingResult=parser.getPermissions();  for (int i=0; i < parsingResult.length; i++) {    this.add(parsingResult[i]);  }}  }
class C{  public static Object[] toComponentString(PointLatLon point){  final Object[] components={point.getLat(),point.getLon()};  return components;}  }
class C{  public static void tangent(Vector3fc v1,Vector2fc uv1,Vector3fc v2,Vector2fc uv2,Vector3fc v3,Vector2fc uv3,Vector3f dest){  float DeltaV1=uv2.y() - uv1.y();  float DeltaV2=uv3.y() - uv1.y();  float f=1.0f / ((uv2.x() - uv1.x()) * DeltaV2 - (uv3.x() - uv1.x()) * DeltaV1);  dest.x=f * (DeltaV2 * (v2.x() - v1.x()) - DeltaV1 * (v3.x() - v1.x()));  dest.y=f * (DeltaV2 * (v2.y() - v1.y()) - DeltaV1 * (v3.y() - v1.y()));  dest.z=f * (DeltaV2 * (v2.z() - v1.z()) - DeltaV1 * (v3.z() - v1.z()));  dest.normalize();}  }
class C{  public TaskBuilder gameTime(){  this.isRealTime=false;  return this;}  }
class C{  protected int[] createPalette(int size){switch (m_type) {case Constants.NOMINAL:    return ColorLib.getCategoryPalette(size);case Constants.NUMERICAL:case Constants.ORDINAL:default :  return ColorLib.getGrayscalePalette(size);}}  }
class C{  public void initialise(int k) throws Exception {  initialise(k,epsilon);}  }
class C{  public AdvOgreXMLConvertDialog(java.awt.Frame parent,boolean modal,OgreXMLConvertOptions options){  super(parent,modal);  this.options=options;  initComponents();  loadSettings(options);}  }
class C{  public synchronized void stop(){  doStop();}  }
class C{  public RawComponentScribe(String componentName){  super(RawComponent.class,componentName);}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4JSPackage.BLOCK___APPLIES_ONLY_TO_BLOCK_SCOPED_ELEMENTS:    return appliesOnlyToBlockScopedElements();case N4JSPackage.BLOCK___GET_ALL_STATEMENTS:  return getAllStatements();case N4JSPackage.BLOCK___GET_ALL_RETURN_STATEMENTS:return getAllReturnStatements();case N4JSPackage.BLOCK___GET_ALL_NON_VOID_RETURN_STATEMENTS:return getAllNonVoidReturnStatements();case N4JSPackage.BLOCK___GET_ALL_VOID_RETURN_STATEMENTS:return getAllVoidReturnStatements();case N4JSPackage.BLOCK___HAS_NON_VOID_RETURN:return hasNonVoidReturn();}return super.eInvoke(operationID,arguments);}  }
class C{  public static boolean validateBoolean(String value){  try {    Boolean.parseBoolean(value);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public void flushTemp(){  temp=new LineNumberMap(null,null);}  }
class C{  public GridifyRuntimeException(String msg,Throwable cause){  super(msg,cause);}  }
class C{  public ContentValues resolveValueBackReferences(ContentProviderResult[] backRefs,int numBackRefs){  if (mValuesBackReferences == null) {    return mValues;  }  final ContentValues values;  if (mValues == null) {    values=new ContentValues();  } else {    values=new ContentValues(mValues);  }  for (  Map.Entry<String,Object> entry : mValuesBackReferences.valueSet()) {    String key=entry.getKey();    Integer backRefIndex=mValuesBackReferences.getAsInteger(key);    if (backRefIndex == null) {      Log.e(TAG,this.toString());      throw new IllegalArgumentException("values backref " + key + " is not an integer");    }    values.put(key,backRefToValue(backRefs,numBackRefs,backRefIndex));  }  return values;}  }
class C{  public boolean isOwner(){  return owner;}  }
class C{  public IllegalAccessException(String s){  super(s);}  }
class C{  private static Options createOptions(){  Options options=new Options();  Option help=new Option(OPTION_HELP,"print this message");  Option cfg=new Option(null,OPTION_CFG,true,"path to Spring XML configuration file.");  cfg.setValueSeparator('=');  cfg.setType(String.class);  Option minTtl=new Option(null,OPTION_MIN_TTL,true,"node minimum time to live.");  minTtl.setValueSeparator('=');  minTtl.setType(Long.class);  Option maxTtl=new Option(null,OPTION_MAX_TTL,true,"node maximum time to live.");  maxTtl.setValueSeparator('=');  maxTtl.setType(Long.class);  Option duration=new Option(null,OPTION_DURATION,true,"run timeout.");  duration.setValueSeparator('=');  duration.setType(Long.class);  Option log=new Option(null,OPTION_LOG_CFG,true,"path to log4j configuration file.");  log.setValueSeparator('=');  log.setType(String.class);  options.addOption(help);  OptionGroup grp=new OptionGroup();  grp.setRequired(true);  grp.addOption(cfg);  grp.addOption(minTtl);  grp.addOption(maxTtl);  grp.addOption(duration);  grp.addOption(log);  options.addOptionGroup(grp);  return options;}  }
class C{  public static PreferenceWindow create(final Map<String,Object> values){  instance=new PreferenceWindow(null,values);  return instance;}  }
class C{  public static FileStore open(DataHandler handler,String name,String mode,String cipher,byte[] key,int keyIterations){  FileStore store;  if (cipher == null) {    store=new FileStore(handler,name,mode);  } else {    store=new SecureFileStore(handler,name,mode,cipher,key,keyIterations);  }  return store;}  }
class C{  public JSearchPanel(Visualization vis,String group,String field,boolean autoIndex,boolean monitorKeystrokes){  this(vis,group,Visualization.SEARCH_ITEMS,new String[]{field},autoIndex,true);}  }
class C{  public void unlockRead(long stamp){  long s, m;  WNode h;  for (; ; ) {    if (((s=state) & SBITS) != (stamp & SBITS) || (stamp & ABITS) == 0L || (m=s & ABITS) == 0L || m == WBIT)     throw new IllegalMonitorStateException();    if (m < RFULL) {      if (U.compareAndSwapLong(this,STATE,s,s - RUNIT)) {        if (m == RUNIT && (h=whead) != null && h.status != 0)         release(h);        break;      }    } else     if (tryDecReaderOverflow(s) != 0L)     break;  }}  }
class C{  public static TypeDialog createBuildNewTypeDialog(final JFrame owner,final TypeManager manager){  return new TypeDialog(owner,manager);}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public KDCOptions(boolean[] data) throws Asn1Exception {  super(data);  if (data.length > Krb5.KDC_OPTS_MAX + 1) {    throw new Asn1Exception(Krb5.BITSTRING_BAD_LENGTH);  }}  }
class C{  private ImageHostToHostCopyService.State buildImageHostToHostCopyServiceStartState(final State current,final String datastore){  ImageHostToHostCopyService.State startState=new ImageHostToHostCopyService.State();  startState.image=current.image;  startState.sourceDatastore=current.sourceImageDatastore;  startState.destinationDatastore=datastore;  startState.parentLink=this.getSelfLink();  startState.documentExpirationTimeMicros=current.documentExpirationTimeMicros;  return startState;}  }
class C{  public FitWidthImageView(Context paramContext,AttributeSet paramAttributeSet){  super(paramContext,paramAttributeSet);}  }
class C{  public void write(Runnable operation){  try {    lock.writeLock().lock();    operation.run();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  private static int med3(char[] x,int a,int b,int c){  return (x[a] < x[b] ? (x[b] < x[c] ? b : x[a] < x[c] ? c : a) : (x[b] > x[c] ? b : x[a] > x[c] ? c : a));}  }
class C{  public boolean containsAll(Collection<? extends E> c){  for (  E element : c)   if (!contains(element))   return false;  return true;}  }
class C{  public void firePropertyChange(String name,Object oldValue,Object newValue){  pcSupport.firePropertyChange(name,oldValue,newValue);}  }
class C{  public void initialize(LocalDispatcher dispatcher){  this.dispatcher=dispatcher;  this.delegator=dispatcher.getDelegator();  Debug.logInfo(this.getClass().getName() + " Authenticator initialized",module);}  }
class C{  public ModalDialogAsyncTask(int dialogStringId,final Runnable postExecuteTask){  mPostExecuteTask=postExecuteTask;  if (mProgressDialog == null) {    mProgressDialog=createProgressDialog();  }  mProgressDialog.setMessage(mActivity.getText(dialogStringId));}  }
class C{  public void addListener(Class<? extends Entity> entityClass,String listenerBeanName){  lock.writeLock().lock();  try {    Set<String> set=dynamicListeners.get(entityClass);    if (set == null) {      set=new HashSet<>();      dynamicListeners.put(entityClass,set);    }    set.add(listenerBeanName);    cache.clear();  }  finally {    lock.writeLock().unlock();  }}  }
class C{  public static HobbyLevel find(String value){  return enums.find(value);}  }
class C{  @Singleton @Provides Wireframe provideAndroidWireframe(BaseApp baseApp){  return new WireframeDomain(baseApp);}  }
class C{  public static boolean isDigit(char c){  return c >= '0' && c <= '9';}  }
class C{  public String generateString(){  return String.format("#%06X",0xFFFFFF & generate());}  }
class C{  private String objectToXml(Object object) throws JAXBException {  JAXBContext requestContext=JAXBContext.newInstance(object.getClass());  Marshaller requestMarshaller=requestContext.createMarshaller();  requestMarshaller.setProperty(Marshaller.JAXB_ENCODING,StandardCharsets.UTF_8.name());  requestMarshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT,true);  StringWriter sw=new StringWriter();  requestMarshaller.marshal(object,sw);  return sw.toString();}  }
class C{  public boolean accept(DatagramPacket p){  if ((stunServer != null) && !stunServer.equals(p.getSocketAddress()))   return false;  if (StunDatagramPacketFilter.isStunPacket(p)) {    byte[] data=p.getData();    int offset=p.getOffset();    byte b0=data[offset];    byte b1=data[offset + 1];    char method=(char)((b0 & 0xFE) | (b1 & 0xEF));    return acceptMethod(method);  }  return false;}  }
class C{  public void update(byte[] in,int off,int len){  if (preSig == null) {    while (len > 0 && messageLength < mBuf.length) {      this.update(in[off]);      off++;      len--;    }  }  if (len > 0) {    digest.update(in,off,len);  }}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","sptc");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  public byte[] put(InputStream in) throws IOException {  ByteArrayOutputStream id=new ByteArrayOutputStream();  int level=0;  try {    while (true) {      if (put(id,in,level)) {        break;      }      if (id.size() > maxBlockSize / 2) {        id=putIndirectId(id);        level++;      }    }  } catch (  IOException e) {    remove(id.toByteArray());    throw e;  }  if (id.size() > minBlockSize * 2) {    id=putIndirectId(id);  }  return id.toByteArray();}  }
class C{  public static Intent makeObservedFileIntent(Context context,OCFile file,Account account,boolean watchIt){  Intent intent=new Intent(context,FileObserverService.class);  intent.setAction(watchIt ? FileObserverService.ACTION_ADD_OBSERVED_FILE : FileObserverService.ACTION_DEL_OBSERVED_FILE);  intent.putExtra(FileObserverService.ARG_FILE,file);  intent.putExtra(FileObserverService.ARG_ACCOUNT,account);  return intent;}  }
class C{  @SuppressWarnings("rawtypes") public FilteredRowSetImpl(Hashtable env) throws SQLException {  super(env);}  }
class C{  public static void writeConfigFile(File configFile,File searchDir) throws SQLException, IOException {  List<Class<?>> classList=new ArrayList<Class<?>>();  findAnnotatedClasses(classList,searchDir,0);  writeConfigFile(configFile,classList.toArray(new Class[classList.size()]));}  }
class C{  @Override public void addAttribute(String name,double value){  String str=Double.toString(value);  if (str.endsWith(".0"))   str=str.substring(0,str.length() - 2);  current.setAttribute(name,str);}  }
class C{  public boolean isSelected(){  return m_selected;}  }
class C{  public static void assertNumInstances(Set<PackingPlan.ContainerPlan> containerPlans,String component,int numInstances){  int instancesFound=0;  for (  PackingPlan.ContainerPlan containerPlan : containerPlans) {    for (    PackingPlan.InstancePlan instancePlan : containerPlan.getInstances()) {      if (instancePlan.getComponentName().equals(component)) {        instancesFound++;      }    }  }  Assert.assertEquals(numInstances,instancesFound);}  }
class C{  private static BlockNode splitBlock(MethodNode mth,BlockNode block,int splitIndex){  BlockNode newBlock=BlockSplitter.startNewBlock(mth,-1);  newBlock.getSuccessors().addAll(block.getSuccessors());  for (  BlockNode s : new ArrayList<BlockNode>(block.getSuccessors())) {    removeConnection(block,s);    connect(newBlock,s);  }  block.getSuccessors().clear();  connect(block,newBlock);  block.updateCleanSuccessors();  newBlock.updateCleanSuccessors();  List<InsnNode> insns=block.getInstructions();  int size=insns.size();  for (int i=splitIndex; i < size; i++) {    InsnNode insnNode=insns.get(i);    insnNode.add(AFlag.SKIP);    newBlock.getInstructions().add(insnNode);  }  Iterator<InsnNode> it=insns.iterator();  while (it.hasNext()) {    InsnNode insnNode=it.next();    if (insnNode.contains(AFlag.SKIP)) {      it.remove();    }  }  for (  InsnNode insnNode : newBlock.getInstructions()) {    insnNode.remove(AFlag.SKIP);  }  return newBlock;}  }
class C{  public byte[] processBlock(byte[] in,int inOff,int inLen){  if (core == null) {    throw new IllegalStateException("RSA engine not initialised");  }  return core.convertOutput(core.processBlock(core.convertInput(in,inOff,inLen)));}  }
class C{  public FolderEntry(VirtualFile virtualFile){  super(virtualFile);}  }
class C{  private List<String> splitPhoneNumbers(final String phoneNumber){  final List<String> phoneList=new ArrayList<>();  StringBuilder builder=new StringBuilder();  final int length=phoneNumber.length();  for (int i=0; i < length; i++) {    final char ch=phoneNumber.charAt(i);    if (ch == '\n' && builder.length() > 0) {      phoneList.add(builder.toString());      builder=new StringBuilder();    } else {      builder.append(ch);    }  }  if (builder.length() > 0) {    phoneList.add(builder.toString());  }  return phoneList;}  }
class C{  public TObjectLongHashMapDecorator(TObjectLongHashMap<V> map){  super();  this._map=map;}  }
class C{  private boolean addViewItem(int index,boolean first){  View view=getItemView(index);  if (view != null) {    if (first) {      itemsLayout.addView(view,0);    } else {      itemsLayout.addView(view);    }    return true;  }  return false;}  }
class C{  boolean isNonProxySet(String endpoint){  String nonProxy=System.getProperty(HTTP_NON_PROXY_HOSTS);  if (nonProxy != null) {    String[] split=nonProxy.split("\\|");    for (int i=0; i < split.length; i++) {      String np=split[i].trim();      if (np.length() > 0) {        boolean wcStart=np.startsWith("*");        boolean wcEnd=np.endsWith("*");        if (wcStart) {          np=np.substring(1);        }        if (wcEnd) {          np=np.substring(0,np.length() - 1);        }        if (wcStart && wcEnd && endpoint.contains(np)) {          return true;        }        if (wcStart && endpoint.endsWith(np)) {          return true;        }        if (wcEnd && endpoint.startsWith(np)) {          return true;        }        if (np.equals(endpoint)) {          return true;        }      }    }  }  return false;}  }
class C{  private void initialize(){  this.setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));  this.setResizable(false);  this.setContentPane(getAboutPanel());  this.pack();  centerFrame();}  }
class C{  public Source copy(){  if (unit != null && unit.isDone()) {    VirtualFile f=new InMemoryFile(unit.getByteCodes(),getName(),MimeMappings.ABC,fileTime);    Source s=new Source(f,pathRoot,relativePath,shortName,owner,isInternal,isRoot,isDebuggable);    s.fileIncludeTimes.putAll(fileIncludeTimes);    s.logger=logger;    CompilationUnit u=s.newCompilationUnit(null,new CompilerContext());    copyCompilationUnit(unit,u,true);    return s;  } else {    return null;  }}  }
class C{  public static String escapeRegex(final String regex){  Matcher match=REGEX_CHARS.matcher(regex);  return match.replaceAll("\\\\$1");}  }
class C{  public List<A> toList(){  shared=true;  return elems;}  }
class C{  public boolean isI_IsImported(){  Object oo=get_Value(COLUMNNAME_I_IsImported);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isWheelScrollingEnabled(){  return wheelScrollState;}  }
class C{  public Object clone() throws CloneNotSupportedException {  WalkingIterator clone=(WalkingIterator)super.clone();  if (null != m_firstWalker) {    clone.m_firstWalker=m_firstWalker.cloneDeep(clone,null);  }  return clone;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:29.522 -0500",hash_original_method="4CD681E2D11D80A916993A5E2A67B6D2",hash_generated_method="088B63961957732197A9E3C8FB47F4E7") public void onError(SipSession session,int errorCode,String errorMessage){}  }
class C{  private List<VPlexInitiatorInfo> findInitiators(VPlexClusterInfo clusterInfo,List<PortInfo> initiatorPortInfo) throws VPlexApiException {  List<PortInfo> unfoundInitiatorList=new ArrayList<PortInfo>();  unfoundInitiatorList.addAll(initiatorPortInfo);  String clusterName=clusterInfo.getName();  List<VPlexInitiatorInfo> initiatorInfoList=findInitiatorsOnCluster(clusterName,initiatorPortInfo,unfoundInitiatorList);  if (initiatorInfoList.size() == initiatorPortInfo.size()) {    return initiatorInfoList;  }  VPlexApiDiscoveryManager discoveryMgr=_vplexApiClient.getDiscoveryManager();  discoveryMgr.discoverInitiatorsOnCluster(clusterInfo);  initiatorInfoList.addAll(findInitiatorsOnCluster(clusterName,unfoundInitiatorList,null));  return initiatorInfoList;}  }
class C{  public Title(String titleText) throws WikiTitleParsingException {  if (titleText.length() == 0) {    throw new WikiTitleParsingException("Title is empty.");  }  this.rawTitleText=titleText;  String titlePart=null;  String sectionPart=null;  if (rawTitleText.contains("#")) {    titlePart=rawTitleText.substring(0,rawTitleText.lastIndexOf("#"));    sectionPart=rawTitleText.substring(rawTitleText.lastIndexOf("#") + 1,rawTitleText.length());  } else {    titlePart=rawTitleText;  }  this.sectionText=sectionPart;  String regexFindParts="(.*?)[ _]\\((.+?)\\)$";  Pattern patternNamespace=Pattern.compile(regexFindParts);  Matcher matcherNamespace=patternNamespace.matcher(this.decodeTitleWikistyle(titlePart));  if (matcherNamespace.find()) {    this.entity=matcherNamespace.group(1);    this.disambiguationText=matcherNamespace.group(2);    String relevantTitleParts=this.entity + " (" + this.disambiguationText+ ")";    this.plainTitle=decodeTitleWikistyle(relevantTitleParts);    this.wikiStyleTitle=encodeTitleWikistyle(relevantTitleParts);  } else {    this.plainTitle=decodeTitleWikistyle(titlePart);    this.wikiStyleTitle=encodeTitleWikistyle(titlePart);    this.entity=this.plainTitle;    this.disambiguationText=null;  }  if (getEntity() == null) {    throw new WikiTitleParsingException("Title was not properly initialized.");  }}  }
class C{  public synchronized void deactivateCheckOid(){  checkOid=false;}  }
class C{  public Object clone(){  return this.copy();}  }
class C{  public void removeNotification(Notification notification){  notification.removeObserver(this);  notifications.remove(notification);  nContainer.removeNotification(notification);  onValueChanged();}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:09.090 -0500",hash_original_method="C492543C28BFA45A4A603454FE30EBBB",hash_generated_method="406E91A8533F3B594944B702203E858F") private String readUntil(char[] delimiter,boolean returnText) throws IOException, XmlPullParserException {  int start=position;  StringBuilder result=null;  if (returnText && text != null) {    result=new StringBuilder();    result.append(text);  }  search:   while (true) {    if (position + delimiter.length >= limit) {      if (start < position && returnText) {        if (result == null) {          result=new StringBuilder();        }        result.append(buffer,start,position - start);      }      if (!fillBuffer(delimiter.length)) {        checkRelaxed(UNEXPECTED_EOF);        type=COMMENT;        return null;      }      start=position;    }    for (int i=0; i < delimiter.length; i++) {      if (buffer[position + i] != delimiter[i]) {        position++;        continue search;      }    }    break;  }  int end=position;  position+=delimiter.length;  if (!returnText) {    return null;  } else   if (result == null) {    return stringPool.get(buffer,start,end - start);  } else {    result.append(buffer,start,end - start);    return result.toString();  }}  }
class C{  public XMLFilter newXMLFilter(Source src) throws TransformerConfigurationException {  Templates templates=newTemplates(src);  if (templates == null)   return null;  return newXMLFilter(templates);}  }
class C{  @XmlTransient public boolean isSelected(){  return mSelected;}  }
class C{  public synchronized byte[] toByteArray(){  int remaining=count;  if (remaining == 0) {    return EMPTY_BYTE_ARRAY;  }  byte newbuf[]=new byte[remaining];  int pos=0;  for (  byte[] buf : buffers) {    int c=Math.min(buf.length,remaining);    System.arraycopy(buf,0,newbuf,pos,c);    pos+=c;    remaining-=c;    if (remaining == 0) {      break;    }  }  return newbuf;}  }
class C{  public MutableInterval(ReadablePeriod period,ReadableInstant end){  super(period,end);}  }
class C{  public NetworkResponse(int statusCode,byte[] data,Map<String,String> headers,boolean notModified,long networkTimeMs){  this.statusCode=statusCode;  this.data=data;  this.headers=headers;  this.notModified=notModified;  this.networkTimeMs=networkTimeMs;}  }
class C{  public Chunk loadChunk(int p_73158_1_,int p_73158_2_){  return this.provideChunk(p_73158_1_,p_73158_2_);}  }
class C{  public CharacterPickerDialog(Context context,View view,Editable text,String options,boolean insert){  super(context,com.android.internal.R.style.Theme_Panel);  mView=view;  mText=text;  mOptions=options;  mInsert=insert;  mInflater=LayoutInflater.from(context);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private Object executeLTE(PageContext pc,SQL sql,Query qr,Operation2 expression,int row) throws PageException {  return (executeCompare(pc,sql,qr,expression,row) <= 0) ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  protected GenericProcessingInstruction(){}  }
class C{  @Override public void activate(){  ValueMap properties=getProperties();  String size=properties.get("size",String.class);  String style=properties.get("style",String.class);  boolean block=properties.get("block",Boolean.class);  StringBuilder css=new StringBuilder("btn");  if (size != null) {    if (size.equals("large")) {      css.append(" btn-lg");    } else     if (size.equals("small")) {      css.append(" btn-sm");    } else     if (size.equals("extraSmall")) {      css.append(" btn-xs");    }  }  if (block) {    css.append(" btn-block");  }  if (style != null) {    if (style.equals("primary")) {      css.append(" btn-primary");    } else     if (style.equals("success")) {      css.append(" btn-success");    } else     if (style.equals("info")) {      css.append(" btn-info");    } else     if (style.equals("warning")) {      css.append(" btn-warning");    } else     if (style.equals("link")) {      css.append(" btn-lnk");    } else {      css.append(" btn-default");    }  }  cssClass=css.toString();}  }
class C{  public RemoteNodeStatus loadDataFromPull(Node remote,String channelId) throws IOException {  RemoteNodeStatus status=new RemoteNodeStatus(remote != null ? remote.getNodeId() : null,channelId,configurationService.getChannels(false));  loadDataFromPull(remote,status);  return status;}  }
class C{  final public void write(String v,int offset,int length){  try {    _out.print(v,offset,length);  } catch (  IOException e) {    log.log(Level.FINE,e.toString(),e);  }}  }
class C{  protected void before() throws Throwable {}  }
class C{  public static long[] copyOfRange(long[] original,int start,int end){  if (start <= end) {    if (original.length >= start && 0 <= start) {      int length=end - start;      int copyLength=Math.min(length,original.length - start);      long[] copy=new long[length];      System.arraycopy(original,start,copy,0,copyLength);      return copy;    }    throw new ArrayIndexOutOfBoundsException();  }  throw new IllegalArgumentException();}  }
class C{  public static void main(String[] argv){  runClassifier(new NaiveBayes(),argv);}  }
class C{  public AsyncResponse(Throwable ex){  this.executionException=new ExecutionException(ex);  this.isCompletedExceptionally=true;  this.isDone=true;}  }
class C{  public boolean optBoolean(int index,boolean defaultValue){  try {    return this.getBoolean(index);  } catch (  Exception e) {    return defaultValue;  }}  }
class C{  public void add(OHLCItem item){  ParamChecks.nullNotPermitted(item,"item");  add(item.getPeriod(),item.getOpenValue(),item.getHighValue(),item.getLowValue(),item.getCloseValue());}  }
class C{  public AbstractDataSource(Class<? extends Comparable<?>>... types){  this(null,types);}  }
class C{  public static void passedBranch(int val,int opcode,int branch,int bytecode_id){  ExecutionTracer tracer=getExecutionTracer();  if (tracer.disabled)   return;  if (isThreadNeqCurrentThread())   return;  checkTimeout();  ConstantPoolManager.getInstance().addDynamicConstant(val);  double distance_true=0.0;  double distance_false=0.0;switch (opcode) {case Opcodes.IFEQ:    distance_true=Math.abs((double)val);  distance_false=distance_true == 0 ? 1.0 : 0.0;break;case Opcodes.IFNE:distance_false=Math.abs((double)val);distance_true=distance_false == 0 ? 1.0 : 0.0;break;case Opcodes.IFLT:distance_true=val >= 0 ? val + 1.0 : 0.0;distance_false=val < 0 ? 0.0 - val + 1.0 : 0.0;break;case Opcodes.IFGT:distance_true=val <= 0 ? 0.0 - val + 1.0 : 0.0;distance_false=val > 0 ? val + 1.0 : 0.0;break;case Opcodes.IFGE:distance_true=val < 0 ? 0.0 - val + 1.0 : 0.0;distance_false=val >= 0 ? val + 1.0 : 0.0;break;case Opcodes.IFLE:distance_true=val > 0 ? val + 1.0 : 0.0;distance_false=val <= 0 ? 0.0 - val + 1.0 : 0.0;break;default :logger.error("Unknown opcode: " + opcode);}tracer.trace.branchPassed(branch,bytecode_id,distance_true,distance_false);}  }
class C{  @Override public void draw(Graphics2D g){  drawCircle(g,(Color)getEditor().getHandleAttribute(HandleAttributeKeys.SCALE_HANDLE_FILL_COLOR),(Color)getEditor().getHandleAttribute(HandleAttributeKeys.SCALE_HANDLE_STROKE_COLOR));}  }
class C{  @Override public int compareTo(final TDerived rhs){  return this.value.compareTo(rhs.getValue());}  }
class C{  private List<FieldInfo> createFieldInfoMap(String str){  fieldInfos=new ArrayList<FieldInfo>();  StringTokenizer strtok=new StringTokenizer(str,RECORD_SEPARATOR);  while (strtok.hasMoreTokens()) {    String[] token=strtok.nextToken().split(FIELD_SEPARATOR);    try {      fieldInfos.add(new FieldInfo(token[0],token[1],SupportType.valueOf(token[2])));    } catch (    Exception e) {      LOG.error("Invalid support type",e);    }  }  return fieldInfos;}  }
class C{  private CalendarAlerts(){}  }
class C{  private Ed25519GroupElement select(final int pos,final int b){  final int bNegative=ByteUtils.isNegativeConstantTime(b);  final int bAbs=b - (((-bNegative) & b) << 1);  final Ed25519GroupElement t=Ed25519Group.ZERO_PRECOMPUTED.cmov(this.precomputedForSingle[pos][0],ByteUtils.isEqualConstantTime(bAbs,1)).cmov(this.precomputedForSingle[pos][1],ByteUtils.isEqualConstantTime(bAbs,2)).cmov(this.precomputedForSingle[pos][2],ByteUtils.isEqualConstantTime(bAbs,3)).cmov(this.precomputedForSingle[pos][3],ByteUtils.isEqualConstantTime(bAbs,4)).cmov(this.precomputedForSingle[pos][4],ByteUtils.isEqualConstantTime(bAbs,5)).cmov(this.precomputedForSingle[pos][5],ByteUtils.isEqualConstantTime(bAbs,6)).cmov(this.precomputedForSingle[pos][6],ByteUtils.isEqualConstantTime(bAbs,7)).cmov(this.precomputedForSingle[pos][7],ByteUtils.isEqualConstantTime(bAbs,8));  final Ed25519GroupElement tMinus=precomputed(t.Y,t.X,t.Z.negate());  return t.cmov(tMinus,bNegative);}  }
class C{  public void method(String param){}  }
class C{  public void printHelp(){  System.err.println("Commands");  System.err.println("help\t\t\tPrint brief description of arguments");  System.err.println("printOptions\t\tPrint the current values of options");  System.err.println();  System.err.print("Boolean Options (");  System.err.print("<option>=true or ");  System.err.println("<option>=false)");  System.err.println("Option                                 Description");  Option o=getFirst();  while (o != null) {    if (o.getType() == Option.BOOLEAN_OPTION) {      String key=o.getKey();      System.err.print(key);      for (int c=key.length(); c < 39; c++) {        System.err.print(" ");      }      System.err.println(o.getDescription());    }    o=o.getNext();  }  System.err.print("\nValue Options (");  System.err.println("<option>=<value>)");  System.err.println("Option                         Type    Description");  o=getFirst();  while (o != null) {    if (o.getType() != Option.BOOLEAN_OPTION && o.getType() != Option.ENUM_OPTION) {      String key=o.getKey();      System.err.print(key);      for (int c=key.length(); c < 31; c++) {        System.err.print(" ");      }switch (o.getType()) {case Option.INT_OPTION:        System.err.print("int     ");      break;case Option.ADDRESS_OPTION:    System.err.print("address ");  break;case Option.FLOAT_OPTION:System.err.print("float   ");break;case Option.MICROSECONDS_OPTION:System.err.print("usec    ");break;case Option.PAGES_OPTION:System.err.print("bytes   ");break;case Option.STRING_OPTION:System.err.print("string  ");break;}System.err.println(o.getDescription());}o=o.getNext();}System.err.println("\nSelection Options (set option to one of an enumeration of possible values)");o=getFirst();while (o != null) {if (o.getType() == Option.ENUM_OPTION) {String key=o.getKey();System.err.print(key);for (int c=key.length(); c < 31; c++) {System.err.print(" ");}System.err.println(o.getDescription());System.err.print("    { ");boolean first=true;for (String val : ((EnumOption)o).getValues()) {System.err.print(first ? "" : ", ");System.err.print(val);first=false;}System.err.println(" }");}o=o.getNext();}Main.exitWithFailure();}  }
class C{  public boolean hasReceiversFor(DistributedMember endPoint){  ConnectionTable ct=this.conTable;  return (ct != null) && ct.hasReceiversFor(endPoint);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("acronym");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();{    boolean success=false;    try {      child.deleteData(-5,3);    } catch (    DOMException ex) {      success=(ex.code == DOMException.INDEX_SIZE_ERR);    }    assertTrue("throws_INDEX_SIZE_ERR",success);  }}  }
class C{  public void java_lang_reflect_Proxy_defineClass0(SootMethod method,ReferenceVariable thisVar,ReferenceVariable returnVar,ReferenceVariable params[]){  throw new NativeMethodNotSupportedException(method);}  }
class C{  public ScaleIOVolume queryVolume(String volId) throws Exception {  ClientResponse response=get(URI.create(ScaleIOConstants.getVolumeURI(volId)));  return getResponseObject(ScaleIOVolume.class,response);}  }
class C{  private void gsave(){  GState oldGState=getGState();  mGStateStack.add(new GState(oldGState));  mPSStream.println(GSAVE_STR);}  }
class C{  @NonNull public static Animator rotateTo(float rotation){  return rotateTo(rotation,0);}  }
class C{  public void indent(){  currentIndentLevel++;}  }
class C{  public AnnotationsDecorator(final ProcessRendererView view,final AnnotationsVisualizer visualizer,final AnnotationsModel model){  this.view=view;  this.model=model;  this.rendererModel=view.getModel();  this.drawer=new AnnotationDrawer(model,rendererModel);  this.hook=new AnnotationEventHook(this,model,visualizer,drawer,view,rendererModel);  this.visualizer=visualizer;}  }
class C{  private void lockFocus(){  Log.d(TAG,"lockFocus: ");  try {    mPreviewRequestBuilder.set(CaptureRequest.CONTROL_AF_TRIGGER,CameraMetadata.CONTROL_AF_TRIGGER_START);    mState=STATE_WAITING_LOCK;    mCaptureSession.setRepeatingRequest(mPreviewRequestBuilder.build(),mCaptureCallback,mBackgroundHandler);  } catch (  CameraAccessException e) {    Log.e(TAG,"CameraAccessException: " + e);    e.printStackTrace();  }}  }
class C{  public boolean canWrite(){  return true;}  }
class C{  public static void writeTo(OutputStream stream,byte[] value) throws IOException, InterruptedException {  BufferedOutputStream os=new BufferedOutputStream(stream);  try {    for (    byte element : value) {      Streams.checkIfCanceled();      os.write(element);    }    os.flush();  }  finally {    close(os);  }}  }
class C{  public void removePerspective(Perspective perspective){  if (!perspective.isUserDefined()) {    return;  }  model.deletePerspective(perspective);  if (model.getSelectedPerspective() == perspective && !model.getAllPerspectives().isEmpty()) {    showPerspective(model.getAllPerspectives().get(0));  }}  }
class C{  public SimpleHash(int tableSize){  this.tableSize=tableSize;}  }
class C{  public String encodeBody(){  return this.getLanguageTag();}  }
class C{  private Base64(){}  }
class C{  public CorePlusQueriesParser(Analyzer analyzer,QueryParser parser){  this(null,analyzer,parser);}  }
class C{  public Fraction multiplyBy(final Fraction fraction){  if (fraction == null) {    throw new IllegalArgumentException("The fraction must not be null");  }  if (numerator == 0 || fraction.numerator == 0) {    return ZERO;  }  final int d1=greatestCommonDivisor(numerator,fraction.denominator);  final int d2=greatestCommonDivisor(fraction.numerator,denominator);  return getReducedFraction(mulAndCheck(numerator / d1,fraction.numerator / d2),mulPosAndCheck(denominator / d2,fraction.denominator / d1));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static void encodeFileToFile(String infile,String outfile) throws java.io.IOException {  String encoded=Base64.encodeFromFile(infile);  java.io.OutputStream out=null;  try {    out=new java.io.BufferedOutputStream(new java.io.FileOutputStream(outfile));    out.write(encoded.getBytes("US-ASCII"));  } catch (  java.io.IOException e) {    throw e;  } finally {    try {      if (out != null)       out.close();    } catch (    Exception ex) {    }  }}  }
class C{  public static void sleep(long millis){  try {    Thread.sleep(millis);  } catch (  InterruptedException e) {    Thread.currentThread().interrupt();  }}  }
class C{  private void pruneStack(){  while (true) {    Entry<V> last=stack.stackPrev;    if (last.isHot()) {      break;    }    removeFromStack(last);  }}  }
class C{  @Override public void cancelThrottleRequest(int address,boolean isLong,ThrottleListener l){  if (waitingForNotification.containsKey(address)) {    waitingForNotification.get(address).interrupt();    waitingForNotification.remove(address);  }  super.cancelThrottleRequest(address,isLong,l);}  }
class C{  public void initService(Ads ads){  this.os=Display.getInstance().getPlatformName();  if (os.equals("and")) {    if (banner) {      po=559;    } else {      po=600;    }  } else   if (os.equals("rim")) {    if (banner) {      po=635;    } else {      po=634;    }  } else   if (os.equals("ios")) {    if (banner) {      if (Display.getInstance().isTablet()) {        po=947;      } else {        po=642;      }    } else {      if (Display.getInstance().isTablet()) {        po=946;      } else {        po=632;      }    }  } else   if (os.equals("me")) {    if (banner) {      po=551;    } else {      po=519;    }  }  String url=REQUEST_URL;  setPost(false);  setUrl(url);  addParam(this,"aid",ads.getAppID());  addParam(this,"po","" + po);  String version=protocolVersion;  addParam(this,"v",version);  if (os.equals("ios")) {    hid=Display.getInstance().getProperty("UDID",null);  } else {    hid=Display.getInstance().getProperty("IMEI",null);  }  addParam(this,"hid",hid);  addParam(this,"w","" + Display.getInstance().getDisplayWidth());  addParam(this,"h","" + Display.getInstance().getDisplayHeight());  addParam(this,"a",ads.getAge());  addParam(this,"g",ads.getGender());  addParam(this,"c",ads.getCategory());  addParam(this,"l",ads.getLocation());  addParam(this,"mn",Display.getInstance().getProperty("MSISDN",null));  String[] keywords=ads.getKeywords();  if (keywords != null && keywords.length > 0) {    int klen=keywords.length;    String k="";    for (int i=0; i < klen; i++) {      k+="," + keywords[i];    }    addParam(this,"k",k.substring(1));  }  if (testAds) {    addParam(this,"test","1");  }  setDuplicateSupported(true);}  }
class C{  @Action(value="/receipts/challan-newform") @ValidationErrorPage(value=ERROR) @SkipValidation public String newform(){  setLoginDept();  SimpleDateFormat sdf=new SimpleDateFormat("dd/MM/yyyy");  try {    cutOffDate=sdf.parse(collectionsUtil.getAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG,CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE));  } catch (  ParseException e) {    LOGGER.error(getText("Error parsing Cut Off Date") + e.getMessage());  }  return NEW;}  }
class C{  @Override public void close() throws IOException {  in.close();}  }
class C{  @Override public String toString(){  StringBuilder message=new StringBuilder();  for (int i=0; i < size(); i++) {    if (i > 0)     message.append(" --> ");    message.append(elementAt(i));  }  return message.toString();}  }
class C{  @Override public void updateArray(int columnIndex,Array x) throws SQLException {  throw unsupported("setArray");}  }
class C{  public boolean increment(K key){  return adjustValue(key,1);}  }
class C{  public Object clone(){  DoubleBufferSet copy=(DoubleBufferSet)super.clone();  copy.buffers=(DoubleBuffer[])copy.buffers.clone();  for (int i=buffers.length; --i >= 0; ) {    copy.buffers[i]=(DoubleBuffer)copy.buffers[i].clone();  }  return copy;}  }
class C{  @After public void tearDown() throws Exception {}  }
class C{  private MemberMXBean createMemberMXBeanForManagerUsingProxy(final MBeanServer server,final ObjectName managingMemberObjectName){  return JMX.newMXBeanProxy(server,managingMemberObjectName,MemberMXBean.class);}  }
class C{  public byte[] toByteArray(){  if (index > 0xFFFF) {    throw new RuntimeException("Class file too large!");  }  int size=24 + 2 * interfaceCount;  int nbFields=0;  FieldWriter fb=firstField;  while (fb != null) {    ++nbFields;    size+=fb.getSize();    fb=(FieldWriter)fb.fv;  }  int nbMethods=0;  MethodWriter mb=firstMethod;  while (mb != null) {    ++nbMethods;    size+=mb.getSize();    mb=(MethodWriter)mb.mv;  }  int attributeCount=0;  if (bootstrapMethods != null) {    ++attributeCount;    size+=8 + bootstrapMethods.length;    newUTF8("BootstrapMethods");  }  if (ClassReader.SIGNATURES && signature != 0) {    ++attributeCount;    size+=8;    newUTF8("Signature");  }  if (sourceFile != 0) {    ++attributeCount;    size+=8;    newUTF8("SourceFile");  }  if (sourceDebug != null) {    ++attributeCount;    size+=sourceDebug.length + 6;    newUTF8("SourceDebugExtension");  }  if (enclosingMethodOwner != 0) {    ++attributeCount;    size+=10;    newUTF8("EnclosingMethod");  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    ++attributeCount;    size+=6;    newUTF8("Deprecated");  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      ++attributeCount;      size+=6;      newUTF8("Synthetic");    }  }  if (innerClasses != null) {    ++attributeCount;    size+=8 + innerClasses.length;    newUTF8("InnerClasses");  }  if (ClassReader.ANNOTATIONS && anns != null) {    ++attributeCount;    size+=8 + anns.getSize();    newUTF8("RuntimeVisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && ianns != null) {    ++attributeCount;    size+=8 + ianns.getSize();    newUTF8("RuntimeInvisibleAnnotations");  }  if (ClassReader.ANNOTATIONS && tanns != null) {    ++attributeCount;    size+=8 + tanns.getSize();    newUTF8("RuntimeVisibleTypeAnnotations");  }  if (ClassReader.ANNOTATIONS && itanns != null) {    ++attributeCount;    size+=8 + itanns.getSize();    newUTF8("RuntimeInvisibleTypeAnnotations");  }  if (attrs != null) {    attributeCount+=attrs.getCount();    size+=attrs.getSize(this,null,0,-1,-1);  }  size+=pool.length;  ByteVector out=new ByteVector(size);  out.putInt(0xCAFEBABE).putInt(version);  out.putShort(index).putByteArray(pool.data,0,pool.length);  int mask=Opcodes.ACC_DEPRECATED | ACC_SYNTHETIC_ATTRIBUTE | ((access & ACC_SYNTHETIC_ATTRIBUTE) / TO_ACC_SYNTHETIC);  out.putShort(access & ~mask).putShort(name).putShort(superName);  out.putShort(interfaceCount);  for (int i=0; i < interfaceCount; ++i) {    out.putShort(interfaces[i]);  }  out.putShort(nbFields);  fb=firstField;  while (fb != null) {    fb.put(out);    fb=(FieldWriter)fb.fv;  }  out.putShort(nbMethods);  mb=firstMethod;  while (mb != null) {    mb.put(out);    mb=(MethodWriter)mb.mv;  }  out.putShort(attributeCount);  if (bootstrapMethods != null) {    out.putShort(newUTF8("BootstrapMethods"));    out.putInt(bootstrapMethods.length + 2).putShort(bootstrapMethodsCount);    out.putByteArray(bootstrapMethods.data,0,bootstrapMethods.length);  }  if (ClassReader.SIGNATURES && signature != 0) {    out.putShort(newUTF8("Signature")).putInt(2).putShort(signature);  }  if (sourceFile != 0) {    out.putShort(newUTF8("SourceFile")).putInt(2).putShort(sourceFile);  }  if (sourceDebug != null) {    int len=sourceDebug.length;    out.putShort(newUTF8("SourceDebugExtension")).putInt(len);    out.putByteArray(sourceDebug.data,0,len);  }  if (enclosingMethodOwner != 0) {    out.putShort(newUTF8("EnclosingMethod")).putInt(4);    out.putShort(enclosingMethodOwner).putShort(enclosingMethod);  }  if ((access & Opcodes.ACC_DEPRECATED) != 0) {    out.putShort(newUTF8("Deprecated")).putInt(0);  }  if ((access & Opcodes.ACC_SYNTHETIC) != 0) {    if ((version & 0xFFFF) < Opcodes.V1_5 || (access & ACC_SYNTHETIC_ATTRIBUTE) != 0) {      out.putShort(newUTF8("Synthetic")).putInt(0);    }  }  if (innerClasses != null) {    out.putShort(newUTF8("InnerClasses"));    out.putInt(innerClasses.length + 2).putShort(innerClassesCount);    out.putByteArray(innerClasses.data,0,innerClasses.length);  }  if (ClassReader.ANNOTATIONS && anns != null) {    out.putShort(newUTF8("RuntimeVisibleAnnotations"));    anns.put(out);  }  if (ClassReader.ANNOTATIONS && ianns != null) {    out.putShort(newUTF8("RuntimeInvisibleAnnotations"));    ianns.put(out);  }  if (ClassReader.ANNOTATIONS && tanns != null) {    out.putShort(newUTF8("RuntimeVisibleTypeAnnotations"));    tanns.put(out);  }  if (ClassReader.ANNOTATIONS && itanns != null) {    out.putShort(newUTF8("RuntimeInvisibleTypeAnnotations"));    itanns.put(out);  }  if (attrs != null) {    attrs.put(this,null,0,-1,-1,out);  }  if (invalidFrames) {    anns=null;    ianns=null;    attrs=null;    innerClassesCount=0;    innerClasses=null;    bootstrapMethodsCount=0;    bootstrapMethods=null;    firstField=null;    lastField=null;    firstMethod=null;    lastMethod=null;    computeMaxs=false;    computeFrames=true;    invalidFrames=false;    new ClassReader(out.data).accept(this,ClassReader.SKIP_FRAMES);    return toByteArray();  }  return out.data;}  }
class C{  private void extractAndSetCoverArt(OCFile file){  if (file.isAudio()) {    try {      MediaMetadataRetriever mmr=new MediaMetadataRetriever();      mmr.setDataSource(file.getStoragePath());      byte[] data=mmr.getEmbeddedPicture();      if (data != null) {        Bitmap bitmap=BitmapFactory.decodeByteArray(data,0,data.length);        mImagePreview.setImageBitmap(bitmap);      } else {        mImagePreview.setImageResource(R.drawable.logo);      }    } catch (    Throwable t) {      mImagePreview.setImageResource(R.drawable.logo);    }  }}  }
class C{  private static void checkForNullElement(Object[] arg,String argName){  if ((arg == null) || (arg.length == 0)) {    throw new IllegalArgumentException("Argument " + argName + "[] cannot be null or empty.");  }  for (int i=0; i < arg.length; i++) {    if (arg[i] == null) {      throw new IllegalArgumentException("Argument's element " + argName + "["+ i+ "] cannot be null.");    }  }}  }
class C{  public boolean monthBefore(DateOnlyCalendar other){  int day=other.get(DAY_OF_MONTH);  other.set(DAY_OF_MONTH,1);  boolean before=getTimeInMillis() < other.getTimeInMillis();  other.set(DAY_OF_MONTH,day);  return before;}  }
class C{  public static String toStringLow(long[] v,int minw){  if (v == null) {    return "null";  }  int mag=magnitude(v);  mag=mag >= minw ? mag : minw;  if (mag == 0) {    return "0";  }  char[] digits=new char[mag];  int pos=0;  outer:   for (int w=0; w < v.length; w++) {    long f=1L;    for (int i=0; i < Long.SIZE; i++) {      digits[pos]=((v[w] & f) == 0) ? '0' : '1';      f<<=1;      ++pos;      if (pos >= mag) {        break outer;      }    }  }  for (; pos < mag; ++pos) {    digits[pos]='0';  }  return new String(digits);}  }
class C{  public ClusterInfo resetProps(PropertyList propertyList,boolean removeObsoleteProps){  UriBuilder builder=client.uriBuilder(CONFIG_PROP_RESET_URL);  if (removeObsoleteProps) {    addQueryParam(builder,REMOVE_OBSOLETE_PARAM,REMOVE_OBSOLETE);  }  return client.postURI(ClusterInfo.class,propertyList,builder.build());}  }
class C{  public JSONArray(){  this.myArrayList=new ArrayList<Object>();}  }
class C{  public static <T extends IService>void registerService(final Class<T> clazz,final T implementation){  Check.assumeNotNull(clazz,"Param 'clazz' not null");  Check.assumeNotNull(implementation,"Param 'implementation' not null");  checkAndRegister(clazz,implementation);}  }
class C{  public static int v(String tag,Object... msg){  return isPrint ? android.util.Log.v(tag,getLogMessage(msg)) : -1;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String substring;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  substring=child.substringData(9,10);  assertEquals("characterdataSubStringExceedsValueAssert","Martin",substring);}  }
class C{  public Object clone(){  IntVector u=new IntVector(size());  for (int i=0; i < size(); i++)   u.V[i]=V[i];  return u;}  }
class C{  static MediaType createApplicationType(String subtype){  return create(APPLICATION_TYPE,subtype);}  }
class C{  public String flatten(String model,String models){  return getFlattened(deserialize(model),deserialize(models));}  }
class C{  public Builder preProcessor(BitmapProcessor preProcessor){  this.preProcessor=preProcessor;  return this;}  }
class C{  public Boolean isThinProvisioned(){  return thinProvisioned;}  }
class C{  public String toString(){  return super.toString() + "\nOverdraft limit: $" + String.format("%.2f",overdraftLimit);}  }
class C{  public void startElement(String ns,String localName,String name,Attributes atts) throws org.xml.sax.SAXException {  Element elem;  if ((null == ns) || (ns.length() == 0))   elem=m_doc.createElementNS(null,name); else   elem=m_doc.createElementNS(ns,name);  append(elem);  try {    int nAtts=atts.getLength();    if (0 != nAtts) {      for (int i=0; i < nAtts; i++) {        if (atts.getType(i).equalsIgnoreCase("ID"))         setIDAttribute(atts.getValue(i),elem);        String attrNS=atts.getURI(i);        if ("".equals(attrNS))         attrNS=null;        String attrQName=atts.getQName(i);        if (attrQName.startsWith("xmlns:"))         attrNS="http://www.w3.org/2000/xmlns/";        elem.setAttributeNS(attrNS,attrQName,atts.getValue(i));      }    }    m_elemStack.push(elem);    m_currentNode=elem;  } catch (  java.lang.Exception de) {    throw new org.xml.sax.SAXException(de);  }}  }
class C{  public Instant plusSeconds(long secondsToAdd){  return plus(secondsToAdd,0);}  }
class C{  @Provides public ResourceService resourceService(){  resourceServiceMock=mock(ResourceService.class);  return resourceServiceMock;}  }
class C{  private static void closeSecurityConfigurationFileInputStream(FileInputStream fis){  if (fis != null) {    try {      fis.close();    } catch (    Exception ignoreMe) {    }  }}  }
class C{  public BasalInitializer(UpdateFunction updateFunction,double basalExpression,double initStDev){  if (updateFunction == null) {    throw new NullPointerException("Update function must not be " + "null");  }  if (initStDev <= 0) {    throw new IllegalArgumentException("The initialization standard " + "deviation must be positive");  }  this.updateFunction=updateFunction;  this.basalExpression=basalExpression;  this.initStDev=initStDev;}  }
class C{  public final ISchedulingRule derivedRule(IResource resource){  return null;}  }
class C{  public EaseInOut(){  this(DEFAULT_AMPLITUDE,DEFAULT_PERIOD);}  }
class C{  public Object[] toArray(){  return hlist.toArray();}  }
class C{  protected void removeTag(short tagId,int ifdId){  IfdData ifdData=mIfdDatas[ifdId];  if (ifdData == null) {    return;  }  ifdData.removeTag(tagId);}  }
class C{  public boolean isWellFormed(){  double totalProb=table.values().stream().mapToDouble(null).sum();  if (totalProb < 0.9f || totalProb > 1.1f) {    log.fine("total probability is " + totalProb);    return false;  }  return true;}  }
class C{  protected final String rtp(String query){  return Util.rtp(query,tablePrefix,getSchedulerNameLiteral());}  }
class C{  public boolean removeElement(int s){  if (!m_mutable)   throw new RuntimeException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE,null));  return super.removeElement(s);}  }
class C{  private void reconcilePositions(XtextResource resource){  MergingHighlightedPositionAcceptor acceptor=new MergingHighlightedPositionAcceptor(calculator);  acceptor.provideHighlightingFor(resource,this);  List<AttributedPosition> oldPositions=removedPositions;  List<AttributedPosition> newPositions=new ArrayList<AttributedPosition>(removedPositionCount);  for (int i=0, n=oldPositions.size(); i < n; i++) {    AttributedPosition current=oldPositions.get(i);    if (current != null)     newPositions.add(current);  }  removedPositions=newPositions;}  }
class C{  public XingUser user(){  return user;}  }
class C{  public static boolean checkMobileIsActive(Context context){  ConnectivityManager connec=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);  android.net.NetworkInfo mobile=connec.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);  if (mobile.isConnected()) {    return true;  }  return false;}  }
class C{  public static int[] toIntArray(double[] array){  int[] result=new int[array.length];  for (int i=0; i < array.length; i++) {    result[i]=(int)array[i];  }  return result;}  }
class C{  public void clearCache(){  clearMemoryCache();  clearDiskCache();}  }
class C{  public float[][] derivBasisFunctions(float u,int grade){  int span=findSpan(u);  return derivBasisFunctions(span,u,grade);}  }
class C{  public void postprocess(CompilationUnit unit,SymbolTable symbolTable){}  }
class C{  public Iterator<JsonElement> iterator(){  return elements.iterator();}  }
class C{  public InvalidPropertyException(){  super();}  }
class C{  public XmlDom child(String tag,String attr,String value){  List<XmlDom> c=children(tag,attr,value);  if (c.size() == 0)   return null;  return c.get(0);}  }
class C{  private void updateCheckedItems(){  for (  TableItem item : tableViewer.getTable().getItems()) {    Object data=item.getData();    if (data instanceof AgentMapping) {      item.setChecked(((AgentMapping)data).isActive());    }  }}  }
class C{  public boolean isSandboxed(){  return base != null && uri != null && !base.relativize(uri).isAbsolute();}  }
class C{  private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  int delta;  if (childCount > 0) {    View child;    if (!mStackFromBottom) {      child=getChildAt(0);      delta=child.getTop() - mListPadding.top;      if (mFirstPosition != 0) {        delta-=mDividerHeight;      }      if (delta < 0) {        delta=0;      }    } else {      child=getChildAt(childCount - 1);      delta=child.getBottom() - (getHeight() - mListPadding.bottom);      if (mFirstPosition + childCount < mItemCount) {        delta+=mDividerHeight;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      offsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  private Integer guessFormat(byte[] fileData){  Integer result=SyncParameter.EXPORT_FORMAT_VERINICE_ARCHIV;  if (fileData != null) {    String content=new String(fileData);    content=content.trim();    if (content.endsWith(SYNC_REQUEST)) {      result=SyncParameter.EXPORT_FORMAT_XML_PURE;    }  }  return result;}  }
class C{  public boolean isExecutable(String sessionID,String path) throws DirectoryNotFoundException {  ResourceNode execNode=locate(sessionID,path);  if (execNode.getResource() == null) {    throw new DirectoryNotFoundException(String.format("Cannot execute '%s'",path));  }  if (execNode.getResource() instanceof Operation) {    return true;  }  return false;}  }
class C{  public boolean valueIsSmallerEqual(Instance instance,int dim,double value){  return instance.value(dim) <= value;}  }
class C{  public synchronized void add(int index,double x,double y){  while (mXY.get(x) != null) {    x+=getPadding(x);  }  mXY.put(index,x,y);  updateRange(x,y);}  }
class C{  @Override public final Node loadTree(Body p,MathVector xpic,int l,Tree tree){  int si=oldSubindex(xpic,l);  Node rt=subp[si];  if (rt != null)   subp[si]=rt.loadTree(p,xpic,l >> 1,tree); else   subp[si]=p;  return this;}  }
class C{  public Builder addContentItem(ContentItem contentItem){  if (contentItems == null) {    contentItems=new ArrayList<ContentItem>();    contentType=HttpMediaType.APPLICATION_JSON;  }  contentItems.add(contentItem);  return this;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"SHSUB8");  translateAll(environment,instruction,"SHSUB8",instructions);}  }
class C{  int generateBridgeSecret(){  SecureRandom randGen=new SecureRandom();  expectedBridgeSecret=randGen.nextInt(Integer.MAX_VALUE);  return expectedBridgeSecret;}  }
class C{  private void registerHeapVariables(IR ir){  SSADictionary dictionary=ir.HIRInfo.dictionary;  for (Enumeration<BasicBlock> bbe=ir.getBasicBlocks(); bbe.hasMoreElements(); ) {    BasicBlock b=bbe.nextElement();    for (Enumeration<Instruction> e=b.forwardInstrEnumerator(); e.hasMoreElements(); ) {      Instruction s=e.nextElement();      if (s.isImplicitLoad() || s.isImplicitStore() || s.isAllocation()|| Phi.conforms(s)|| s.isPEI()|| Label.conforms(s)|| BBend.conforms(s)|| s.getOpcode() == UNINT_BEGIN_opcode || s.getOpcode() == UNINT_END_opcode) {        dictionary.registerInstruction(s,b);      }    }  }}  }
class C{  @Override public boolean evaluate(DF_LatticeCell[] operands){  ObjectCell lhs=(ObjectCell)operands[0];  if (lhs.isBOTTOM()) {    return false;  }  ObjectCell rhs=(ObjectCell)operands[1];  boolean lhsWasTOP=lhs.isTOP();  int[] oldNumbers=null;  if (!lhsWasTOP)   oldNumbers=lhs.copyValueNumbers();  lhs.clear();  if (rhs.isTOP()) {    throw new OptimizingCompilerException("Unexpected lattice operation");  }  int[] numbers=rhs.copyValueNumbers();  if (numbers != null) {    for (    int number : numbers) {      if (valueNumbers.DD(number,valueNumber)) {        lhs.add(number);      }    }  }  lhs.add(valueNumber);  if (lhsWasTOP)   return true;  int[] newNumbers=lhs.copyValueNumbers();  return ObjectCell.setsDiffer(oldNumbers,newNumbers);}  }
class C{  Item newFloat(final float value){  key.set(value);  Item result=get(key);  if (result == null) {    pool.putByte(FLOAT).putInt(key.intVal);    result=new Item(index++,key);    put(result);  }  return result;}  }
class C{  public List<Budget> moveBudgetTree(final Budget b,final Position position){  final List<Budget> budgetsList=findAllBy("from Budget b where b.materializedPath like '" + b.getMaterializedPath() + ".%'");  return budgetsList;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public int performBatchRecovery(Iterable<Translog.Operation> operations){  if (state != IndexShardState.RECOVERING) {    throw new IndexShardNotRecoveringException(shardId,state);  }  return engineConfig.getTranslogRecoveryPerformer().performBatchRecovery(engine(),operations);}  }
class C{  public static <K extends Comparable<K>,V extends Comparable<V>>Map<K,V> createByValueSortedMap(Map<K,V> map,boolean reversed,Comparator<V> comparator){  return new ByValueSortingTreeMap<>(ByValueComparator.create(map,reversed,comparator));}  }
class C{  private static Class<?> erase(Type type){  if (type instanceof Class) {    return (Class<?>)type;  } else   if (type instanceof ParameterizedType) {    return (Class<?>)((ParameterizedType)type).getRawType();  } else   if (type instanceof TypeVariable) {    TypeVariable<?> tv=(TypeVariable<?>)type;    if (tv.getBounds().length == 0)     return Object.class; else     return erase(tv.getBounds()[0]);  } else   if (type instanceof GenericArrayType) {    GenericArrayType aType=(GenericArrayType)type;    return GenericArrayTypeImpl.createArrayType(erase(aType.getGenericComponentType()));  } else   if (type instanceof CaptureType) {    CaptureType captureType=(CaptureType)type;    if (captureType.getUpperBounds().length == 0)     return Object.class; else     return erase(captureType.getUpperBounds()[0]);  } else {    throw new RuntimeException("not supported: " + type.getClass());  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.384 -0500",hash_original_method="8017C6E265731C6E1BE6E337AC0EFE2E",hash_generated_method="4B7330DFC58E357A5D1DD143C737CB5A") public SIPHeader parse() throws ParseException {  ServiceRouteList serviceRouteList=new ServiceRouteList();  if (debug)   dbg_enter("ServiceRouteParser.parse");  try {    this.lexer.match(TokenTypes.SERVICE_ROUTE);    this.lexer.SPorHT();    this.lexer.match(':');    this.lexer.SPorHT();    while (true) {      ServiceRoute serviceRoute=new ServiceRoute();      super.parse(serviceRoute);      serviceRouteList.add(serviceRoute);      this.lexer.SPorHT();      if (lexer.lookAhead(0) == ',') {        this.lexer.match(',');        this.lexer.SPorHT();      } else       if (lexer.lookAhead(0) == '\n')       break; else       throw createParseException("unexpected char");    }    return serviceRouteList;  }  finally {    if (debug)     dbg_leave("ServiceRouteParser.parse");  }}  }
class C{  public static byte[] toByte(char[] c){  if (c == null)   return null;  byte[] b=new byte[c.length * 2];  int i=0;  int j=0;  while (j < c.length) {    b[i++]=(byte)(c[j] & 0xFF);    b[i++]=(byte)((c[j++] >> 8) & 0xFF);  }  return b;}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case N4mfPackage.SIMPLE_PROJECT_DESCRIPTION___GET_VENDOR_ID:    return getVendorId();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public void run(){  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  public void testIsolatedMode() throws Exception {  processIsolatedModeTest(DeploymentMode.ISOLATED);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.INTERFACE_DEFINITION___NAME_1:    setName_1(NAME_1_EDEFAULT);  return;case UmplePackage.INTERFACE_DEFINITION___DEPEND_1:getDepend_1().clear();return;case UmplePackage.INTERFACE_DEFINITION___INTERFACE_BODY_1:getInterfaceBody_1().clear();return;}super.eUnset(featureID);}  }
class C{  public void visitInnerClass(String name,String outerName,String innerName,int access){  if (cv != null) {    cv.visitInnerClass(name,outerName,innerName,access);  }}  }
class C{  public ModelMBeanOperationInfo(String name,String description,MBeanParameterInfo[] signature,String type,int impact,Descriptor descriptor){  super(name,description,signature,type,impact);  if (MODELMBEAN_LOGGER.isLoggable(Level.FINER)) {    MODELMBEAN_LOGGER.logp(Level.FINER,ModelMBeanOperationInfo.class.getName(),"ModelMBeanOperationInfo(String,String," + "MBeanParameterInfo[],String,int,Descriptor)","Entry");  }  operationDescriptor=validDescriptor(descriptor);}  }
class C{  private void emitSingleton(String opcode,boolean[][] testsPerformed,int level){  EmitterDescriptor ed=(EmitterDescriptor)emitters.iterator().next();  ArgumentType[] args=ed.getArgs();  int count=ed.getCount();  for (int i=0; i < count; i++)   if (!testsPerformed[i][args[i].ordinal()])   emitVerify(i,args[i],level);  ArgumentType size=ed.getSize();  if (size != null) {    boolean needed=true;    for (int i=0; i < count; i++)     if (testsPerformed[i][size.ordinal()])     needed=false;    if (needed)     emitVerify(0,size,level);    if (size == ArgumentType.Byte)     for (int i=0; i < count; i++)     if (args[i] == ArgumentType.GPRegister)     if (currentOpcode.indexOf("MOVZX") == -1 && currentOpcode.indexOf("MOVSX") == -1) {      emitTab(level);      emit("if (VM.VerifyAssertions) opt_assert(");      emitArgs(i,ArgumentType.GPRegister);      emit(".isValidAs8bitRegister());\n");    }  }  emitEmitCall(opcode,args,count,level,ed.getSize());}  }
class C{  public void scale(float sx,float sy){  showMissingWarning("scale");}  }
class C{  public Sequence findSequence(String sequenceName){  return sequences.get(sequenceName);}  }
class C{  public @Test final void testCreationNegative2(){  thrown.expect(IllegalArgumentException.class);  new Role("","TEST");}  }
class C{  public boolean checkConflictingPrimaryAnnos(final AnnotatedTypeMirror type,final Tree tree){  boolean error=false;  Set<AnnotationMirror> seenTops=AnnotationUtils.createAnnotationSet();  for (  AnnotationMirror aOnVar : type.getAnnotations()) {    if (AnnotationUtils.areSameByClass(aOnVar,PolyAll.class)) {      continue;    }    AnnotationMirror top=atypeFactory.getQualifierHierarchy().getTopAnnotation(aOnVar);    if (seenTops.contains(top)) {      this.reportError(type,tree);      error=true;    }    seenTops.add(top);  }  return error;}  }
class C{  public void paint(Graphics g){  super.paint(g);  if (drawIntersections || drawResults) {    OMGraphicList graphics;    graphics=new OMGraphicList(toDraw);    graphics.generate(getProjection(),true);    if (logger.isLoggable(Level.INFO)) {      logger.info("rendering toDraw " + toDraw.size() + " items");    }    graphics.render(g);  }}  }
class C{  public boolean isValid(){  if (m_bpc == null)   return false;  boolean ok=m_bpc.getAD_User_ID() != 0;  return ok;}  }
class C{  public CUDA_MEMCPY3D_PEER(){}  }
class C{  private void generateIndexMap(int size){  assert (size % 2 == 1);  int mapWidth=((size + 1) / 2) + 1;  mCenterCoefficient=(size - 1) / 2;  mCenterCoefficientMapIndex=mCenterCoefficient + 1;  mIndexMap=new int[size][mapWidth];  for (int x=0; x < mapWidth - 2; x+=2) {    mIndexMap[0][x]=x;    mIndexMap[0][x + 1]=size - 1 - x;  }  mIndexMap[0][mCenterCoefficientMapIndex]=mCenterCoefficient;  for (int x=1; x < size; x++) {    for (int y=0; y < mapWidth; y++) {      mIndexMap[x][y]=mIndexMap[x - 1][y] + 1;      if (mIndexMap[x][y] >= size) {        mIndexMap[x][y]-=size;      }    }  }}  }
class C{  private void connect(InetAddress anAddr,int aPort,int timeout) throws IOException {  InetAddress normalAddr=anAddr.isAnyLocalAddress() ? InetAddress.getLocalHost() : anAddr;  if (streaming && usingSocks()) {    socksConnect(anAddr,aPort,0);  } else {    IoBridge.connect(fd,normalAddr,aPort,timeout);  }  super.address=normalAddr;  super.port=aPort;}  }
class C{  public void unsetOperatorId(){  issetBitfield=EncodingUtils.clearBit(issetBitfield,OPERATORID_ISSET_ID);}  }
class C{  public static String toString(final URI uri) throws IOException {  return IOUtils.toString(uri,Charset.defaultCharset());}  }
class C{  public static byte[] decode(final byte[] source,final int off,final int len,final int options) throws java.io.IOException {  if (source == null) {    throw new NullPointerException("Cannot decode null source array.");  }  if (off < 0 || off + len > source.length) {    throw new IllegalArgumentException("Source array with length " + source.length + " cannot have offset of "+ off+ " and process "+ len+ " bytes.");  }  if (len == 0) {    return new byte[0];  } else   if (len < 4) {    throw new IllegalArgumentException("Base64-encoded string must have at least four characters, but length specified was " + len);  }  final byte[] DECODABET=getDecodabet(options);  final int len34=len * 3 / 4;  final byte[] outBuff=new byte[len34];  int outBuffPosn=0;  final byte[] b4=new byte[4];  int b4Posn=0;  int i=0;  byte sbiCrop=0;  byte sbiDecode=0;  for (i=off; i < off + len; i++) {    sbiCrop=(byte)(source[i] & 0x7f);    sbiDecode=DECODABET[sbiCrop];    if (sbiDecode >= WHITE_SPACE_ENC) {      if (sbiDecode >= EQUALS_SIGN_ENC) {        b4[b4Posn++]=sbiCrop;        if (b4Posn > 3) {          outBuffPosn+=decode4to3(b4,0,outBuff,outBuffPosn,options);          b4Posn=0;          if (sbiCrop == EQUALS_SIGN) {            break;          }        }      }    } else {      throw new java.io.IOException("Bad Base64 input character '" + source[i] + "' in array position "+ i);    }  }  final byte[] out=new byte[outBuffPosn];  System.arraycopy(outBuff,0,out,0,outBuffPosn);  return out;}  }
class C{  public static void nl(String nl){  Formatting.nl=nl;  Formatting.dnl=nl + nl;}  }
class C{  public T caseSymbolTableEntryIMOnly(SymbolTableEntryIMOnly object){  return null;}  }
class C{  @Override public ODataToken next(){  if (this.currentODataToken >= this.tokens.size()) {    throw new NoSuchElementException();  }  ODataToken ret=this.tokens.get(this.currentODataToken);  this.currentODataToken++;  return ret;}  }
class C{  public static boolean isLegal(boolean expression){  return isLegal(expression,"");}  }
class C{  public Node<T> addChild(T data){  children.add(new Node<T>(data,depth + 1,this,children.size()));  return this;}  }
class C{  protected boolean isLast(){  if (myNode.getTreeNext() == null) {    return true;  }  IElementType elementType=myNode.getElementType();  if (elementType == END_DIRECTIVE) {    return true;  }  if (elementType != TT2_OPEN_TAG) {    return false;  }  ASTNode run=myNode.getTreeNext();  while (true) {    if (run == null) {      return false;    }    if (run.getElementType() == TT2_CLOSE_TAG) {      return run.getTreeNext() == null;    }    run=run.getTreeNext();  }}  }
class C{  public boolean putInt(Context context,String key,int value){  SharedPreferences settings=context.getSharedPreferences(FILE_NAME,Context.MODE_PRIVATE);  SharedPreferences.Editor editor=settings.edit();  editor.putInt(key,value);  return editor.commit();}  }
class C{  public NetPermission(String name){  super(name);}  }
class C{  static final boolean validAnnotatedType(AnnotatedTypeMirror type){  if (type == null) {    return false;  }  if (type.getUnderlyingType() == null) {    return true;  }  return validType(type.getUnderlyingType());}  }
class C{  public void sendSynchronously(String commandName){  getClientDolphin().send(commandName);  syncPoint(1);}  }
class C{  public final void invert(Matrix3d m1){  invertGeneral(m1);}  }
class C{  public void clone(float[] source){  System.arraycopy(source,0,points,0,3);}  }
class C{  public static String asString(Object obj){  if (obj instanceof String) {    return (String)obj;  } else   if (obj instanceof RStringVector) {    return ((RStringVector)obj).getDataAt(0);  } else {    return null;  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  private void dumpEnvelope(Message m) throws Exception {  printOut("-----------------------------------------------------------------");  Address[] a;  if ((a=m.getFrom()) != null) {    for (int j=0; j < a.length; j++)     printOut("FROM: " + a[j].toString());  }  if ((a=m.getRecipients(Message.RecipientType.TO)) != null) {    for (int j=0; j < a.length; j++)     printOut("TO: " + a[j].toString());  }  printOut("SUBJECT: " + m.getSubject());  java.util.Date d=m.getSentDate();  printOut("SendDate: " + (d != null ? d.toString() : "UNKNOWN"));  Flags flags=m.getFlags();  StringBuffer sb=new StringBuffer();  Flags.Flag[] sf=flags.getSystemFlags();  boolean first=true;  for (int i=0; i < sf.length; i++) {    String s;    Flags.Flag f=sf[i];    if (f == Flags.Flag.ANSWERED)     s="\\Answered"; else     if (f == Flags.Flag.DELETED)     s="\\Deleted"; else     if (f == Flags.Flag.DRAFT)     s="\\Draft"; else     if (f == Flags.Flag.FLAGGED)     s="\\Flagged"; else     if (f == Flags.Flag.RECENT)     s="\\Recent"; else     if (f == Flags.Flag.SEEN)     s="\\Seen"; else     continue;    if (first)     first=false; else     sb.append(' ');    sb.append(s);  }  String[] uf=flags.getUserFlags();  for (int i=0; i < uf.length; i++) {    if (first)     first=false; else     sb.append(' ');    sb.append(uf[i]);  }  printOut("FLAGS: " + sb.toString());  String[] hdrs=m.getHeader("X-Mailer");  if (hdrs != null) {    StringBuffer sb1=new StringBuffer("X-Mailer: ");    for (int i=0; i < hdrs.length; i++)     sb1.append(hdrs[i]).append("  ");    printOut(sb1.toString());  } else   printOut("X-Mailer NOT available");  hdrs=m.getHeader("Message-ID");  if (hdrs != null) {    StringBuffer sb1=new StringBuffer("Message-ID: ");    for (int i=0; i < hdrs.length; i++)     sb1.append(hdrs[i]).append("  ");    printOut(sb1.toString());  } else   printOut("Message-ID NOT available");  printOut("ALL HEADERs:");  Enumeration en=m.getAllHeaders();  while (en.hasMoreElements()) {    Header hdr=(Header)en.nextElement();    printOut("  " + hdr.getName() + " = "+ hdr.getValue());  }  printOut("-----------------------------------------------------------------");}  }
class C{  public MoePlainView(Element elem){  super(elem);}  }
class C{  @Override public boolean equals(Object obj){  if (obj instanceof FileElement) {    return getPath().equals(((FileElement)obj).getPath());  }  return super.equals(obj);}  }
class C{  protected void checkRow(int row){  if (row < 0 || row >= rows)   throw new IndexOutOfBoundsException("Attempted to access " + toStringShort() + " at row="+ row);}  }
class C{  protected Frame<V> newFrame(final int nLocals,final int nStack){  return new Frame<V>(nLocals,nStack);}  }
class C{  public void queryContacts(){  mCommands[ContactsCommandType.QUERY_COMMAND.ordinal()].execute(null);}  }
class C{  @Override public void process(KeyValPair<K,V> tuple){  HashMap<K,V> otuple=new HashMap<K,V>(1);  otuple.put(tuple.getKey(),tuple.getValue());  map.emit(otuple);}  }
class C{  protected void drawOrderedRenderable(DrawContext dc,PickSupport pickCandidates){  this.beginDrawing(dc);  try {    GL2 gl=dc.getGL().getGL2();    if (dc.isPickingMode()) {      Color pickColor=dc.getUniquePickColor();      pickCandidates.addPickableObject(pickColor.getRGB(),this,this.position);      gl.glColor3ub((byte)pickColor.getRed(),(byte)pickColor.getGreen(),(byte)pickColor.getBlue());    }    gl.glScaled(this.size,this.size,this.size);    this.drawUnitCube(dc);  }  finally {    this.endDrawing(dc);  }}  }
class C{  public final boolean hasContended(){  return head != null;}  }
class C{  public static String encode(byte[] data){  StringBuilder builder=new StringBuilder();  for (int position=0; position < data.length; position+=3) {    builder.append(encodeGroup(data,position));  }  return builder.toString();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.421 -0500",hash_original_method="B481CD0C272F0294325516CB58C4D625",hash_generated_method="E62AEA9FA7B244F3FD7573DFDE704FA8") public boolean removeTransactionPendingAck(SIPServerTransaction serverTransaction){  String branchId=((SIPRequest)serverTransaction.getRequest()).getTopmostVia().getBranch();  if (branchId != null && this.terminatedServerTransactionsPendingAck.containsKey(branchId)) {    this.terminatedServerTransactionsPendingAck.remove(branchId);    return true;  } else {    return false;  }}  }
class C{  private Colors(){}  }
class C{  private void drawHorizontalAxisTrace(Graphics2D g2,int x){  Rectangle2D dataArea=getScreenDataArea();  g2.setXORMode(Color.orange);  if (((int)dataArea.getMinX() < x) && (x < (int)dataArea.getMaxX())) {    if (this.verticalTraceLine != null) {      g2.draw(this.verticalTraceLine);      this.verticalTraceLine.setLine(x,(int)dataArea.getMinY(),x,(int)dataArea.getMaxY());    } else {      this.verticalTraceLine=new Line2D.Float(x,(int)dataArea.getMinY(),x,(int)dataArea.getMaxY());    }    g2.draw(this.verticalTraceLine);  }  g2.setPaintMode();}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public boolean isExpanded(int row){  return getBoolean(row,VisualItem.EXPANDED);}  }
class C{  public static Map<String,BLEUMetric<IString,String>.BLEUIncrementalMetric> run(List<List<Sequence<IString>>> referencesList,List<InputProperties> inputProperties,int order,List<String> lines) throws IOException {  Set<String> genreList=new HashSet<>();  Map<String,List<List<Sequence<IString>>>> refsByGenre=new HashMap<>();  for (int sourceId=0; sourceId < referencesList.size(); ++sourceId) {    String genre=inputProperties.get(sourceId).containsKey(InputProperty.Domain) ? ((String[])inputProperties.get(sourceId).get(InputProperty.Domain))[0] : DEFAULT_GENRE;    genreList.add(genre);    if (!refsByGenre.containsKey(genre)) {      refsByGenre.put(genre,new ArrayList<List<Sequence<IString>>>());    }    refsByGenre.get(genre).add(referencesList.get(sourceId));  }  Map<String,BLEUMetric<IString,String>.BLEUIncrementalMetric> metrics=new HashMap<>(genreList.size());  for (  String genre : genreList) {    BLEUMetric<IString,String> bleu=new BLEUMetric<IString,String>(refsByGenre.get(genre),order,false);    metrics.put(genre,bleu.getIncrementalMetric());  }  int sourceId=0;  for (  String line : lines) {    line=NISTTokenizer.tokenize(line);    Sequence<IString> translation=IStrings.tokenize(line);    ScoredFeaturizedTranslation<IString,String> tran=new ScoredFeaturizedTranslation<IString,String>(translation,null,0);    String genre=inputProperties.get(sourceId).containsKey(InputProperty.Domain) ? (String)inputProperties.get(sourceId).get(InputProperty.Domain) : DEFAULT_GENRE;    metrics.get(genre).add(tran);    ++sourceId;  }  return metrics;}  }
class C{  private RealMatrix jacobian(RealVector point){  double[] pointArray=point.toArray();  double[][] jacobian=new double[distances.length][pointArray.length];  for (int i=0; i < jacobian.length; i++) {    for (int j=0; j < pointArray.length; j++) {      jacobian[i][j]=2 * pointArray[j] - 2 * positions[i][j];    }  }  return new Array2DRowRealMatrix(jacobian);}  }
class C{  private static AnnotatedTypeMirror asOuterSuper(Types types,AnnotatedTypeFactory atypeFactory,AnnotatedTypeMirror type,AnnotatedTypeMirror superType){  if (type.getKind() == TypeKind.DECLARED) {    AnnotatedDeclaredType dt=(AnnotatedDeclaredType)type;    AnnotatedDeclaredType enclosingType=dt;    TypeMirror superTypeMirror=types.erasure(superType.getUnderlyingType());    while (enclosingType != null) {      TypeMirror enclosingTypeMirror=types.erasure(enclosingType.getUnderlyingType());      if (types.isSubtype(enclosingTypeMirror,superTypeMirror)) {        dt=enclosingType;        break;      }      enclosingType=enclosingType.getEnclosingType();    }    if (enclosingType == null) {      return superType;    }    return asSuper(atypeFactory,dt,superType);  }  return asSuper(atypeFactory,type,superType);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:42.092 -0500",hash_original_method="4476315D4E8DB7AB870F2DCC294654C2",hash_generated_method="51CA7377457AE130DE117AD44ED74083") public boolean hasError(){  return 1 == ((((hasSoftError())) ? 1 : 0) + (((hasHardError())) ? 1 : 0));}  }
class C{  @Override public void show(ExportDataProvider dataProvider,String resourceName){  String extension=getFileExt(resourceName);  ExportFormat format=ExportFormat.getByExtension(extension);  show(dataProvider,resourceName,format);}  }
class C{  public static <NodeType extends ZyGraphNode<?>>String createTooltip(final AbstractZyGraph<NodeType,?> graph,final Edge edge){  Preconditions.checkNotNull(graph,"Error: Graph argument can not be null");  Preconditions.checkNotNull(edge,"Error: Edge argument can not be null");  String text=createTooltip(graph,edge.source()).replace("</html>","");  final ZyEdgeRealizer<?> realizer=(ZyEdgeRealizer<?>)graph.getGraph().getRealizer(edge);  if (realizer.labelCount() > 0) {    final ZyEdgeLabel edgeLabel=(ZyEdgeLabel)realizer.getLabel();    final ZyLabelContent content=edgeLabel.getLabelContent();    text+="<hr>" + HtmlGenerator.getHtml(content,GuiHelper.getMonospaceFont(),false).replace("<html>","").replace("</html>","");  }  text+="<hr>" + createTooltip(graph,edge.target()).replace("<html>","");  return text;}  }
class C{  private static LocalSearchSuiteType chooseLocalSearchSuiteType(){  final LocalSearchSuiteType localSearchType;  if (Properties.DSE_PROBABILITY <= 0.0) {    localSearchType=LocalSearchSuiteType.ALWAYS_AVM;  } else   if (Properties.LOCAL_SEARCH_DSE == Properties.DSEType.SUITE) {    if (Randomness.nextDouble() <= Properties.DSE_PROBABILITY) {      localSearchType=LocalSearchSuiteType.ALWAYS_DSE;    } else {      localSearchType=LocalSearchSuiteType.ALWAYS_AVM;    }  } else {    assert (Properties.LOCAL_SEARCH_DSE == Properties.DSEType.TEST);    localSearchType=LocalSearchSuiteType.DSE_AND_AVM;  }  return localSearchType;}  }
class C{  public static Remove featureSelectionMultilabel(TaskContext aContext,Instances trainData,List<String> attributeEvaluator,String labelTransformationMethod,int numLabelsToKeep) throws TextClassificationException {  File fsResultsFile=getFile(aContext,TEST_TASK_OUTPUT_KEY,AdapterNameEntries.featureSelectionFile,AccessMode.READWRITE);  Remove filterRemove=new Remove();  try {    MultiLabelInstances mulanInstances=convertMekaInstancesToMulanInstances(trainData);    ASEvaluation eval=ASEvaluation.forName(attributeEvaluator.get(0),attributeEvaluator.subList(1,attributeEvaluator.size()).toArray(new String[0]));    AttributeEvaluator attributeSelectionFilter;    if (labelTransformationMethod.equals("LabelPowersetAttributeEvaluator")) {      attributeSelectionFilter=new LabelPowersetAttributeEvaluator(eval,mulanInstances);    } else     if (labelTransformationMethod.equals("BinaryRelevanceAttributeEvaluator")) {      attributeSelectionFilter=new BinaryRelevanceAttributeEvaluator(eval,mulanInstances,"max","none","rank");    } else {      throw new TextClassificationException("This Label Transformation Method is not supported.");    }    Ranker r=new Ranker();    int[] result=r.search(attributeSelectionFilter,mulanInstances);    StringBuffer evalFile=new StringBuffer();    for (    Attribute att : mulanInstances.getFeatureAttributes()) {      evalFile.append(att.name() + ": " + attributeSelectionFilter.evaluateAttribute(att.index() - mulanInstances.getNumLabels())+ "\n");    }    FileUtils.writeStringToFile(fsResultsFile,evalFile.toString());    int[] toKeep=new int[numLabelsToKeep + mulanInstances.getNumLabels()];    System.arraycopy(result,0,toKeep,0,numLabelsToKeep);    int[] labelIndices=mulanInstances.getLabelIndices();    System.arraycopy(labelIndices,0,toKeep,numLabelsToKeep,mulanInstances.getNumLabels());    filterRemove.setAttributeIndicesArray(toKeep);    filterRemove.setInvertSelection(true);    filterRemove.setInputFormat(mulanInstances.getDataSet());  } catch (  ArrayIndexOutOfBoundsException e) {    return null;  }catch (  Exception e) {    throw new TextClassificationException(e);  }  return filterRemove;}  }
class C{  private static void configureLogLevel(String loggerName,String levelValue){  final Level level=LoggerUtil.parseLogLevel(levelValue,Level.OFF);  final Logger logger=Logger.getLogger(loggerName);  logger.setLevel(level);}  }
class C{  private void onUnloadSoundEffects(){synchronized (mSoundEffectsLock) {    if (mSoundPool == null) {      return;    }    int[] poolId=new int[SOUND_EFFECT_FILES.size()];    for (int fileIdx=0; fileIdx < SOUND_EFFECT_FILES.size(); fileIdx++) {      poolId[fileIdx]=0;    }    for (int effect=0; effect < AudioManager.NUM_SOUND_EFFECTS; effect++) {      if (SOUND_EFFECT_FILES_MAP[effect][1] <= 0) {        continue;      }      if (poolId[SOUND_EFFECT_FILES_MAP[effect][0]] == 0) {        mSoundPool.unload(SOUND_EFFECT_FILES_MAP[effect][1]);        SOUND_EFFECT_FILES_MAP[effect][1]=-1;        poolId[SOUND_EFFECT_FILES_MAP[effect][0]]=-1;      }    }    mSoundPool.release();    mSoundPool=null;  }}  }
class C{  private synchronized void loadTrustManager(){  try {    TrustManagerFactory tmf=TrustManagerFactory.getInstance(X509_ALGORITHM);    tmf.init(keystore);    for (    TrustManager trustManager : tmf.getTrustManagers()) {      if (trustManager instanceof X509TrustManager) {        defaultViPRTrustManager=(X509TrustManager)trustManager;        log.debug("found a X509TrustManager instance");        break;      }    }    log.info("renew trust manager. the # of certificates in trust store is {}",defaultViPRTrustManager.getAcceptedIssuers().length);  } catch (  GeneralSecurityException e) {    log.error(e.getMessage(),e);  }}  }
class C{  public YearMonth addToCopy(int valueToAdd){  int[] newValues=iBase.getValues();  newValues=getField().add(iBase,iFieldIndex,newValues,valueToAdd);  return new YearMonth(iBase,newValues);}  }
class C{  public static String formatMessage(final String bundle,final String msgCode,final Object[] args){  String message=msgCode + ": " + ApplicationMessages.getString(bundle,msgCode);  if ((args != null) && (message != null) && (args.length > 0)) {    message=MessageFormat.format(message,args);  }  return message;}  }
class C{  protected synchronized TopicConnectionFactory lookupTopicConnectionFactoryFromJNDI(String uri) throws NamingException {  final InitialContext jndiContext=getInitialContext();  return (TopicConnectionFactory)jndiContext.lookup(uri);}  }
class C{  public MapMetaBuilder start(final MapMeta meta){  return new MapMetaBuilder(meta);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:12.985 -0500",hash_original_method="BEECDC91516286CCE30494A55398B48A",hash_generated_method="67BEFFC721666B9B08A92F0A726B4D45") public DynamicLayout(CharSequence base,CharSequence display,TextPaint paint,int width,Alignment align,float spacingmult,float spacingadd,boolean includepad){  this(base,display,paint,width,align,spacingmult,spacingadd,includepad,null,0);}  }
class C{  public String toString(String enc) throws UnsupportedEncodingException {  return new String(toByteArray(),enc);}  }
class C{  public boolean isPreLinkingPhase(){  return preLinkingPhase;}  }
class C{  public FloatBuffer tessellate(ArrayList<ReadOnlyVector3> outerVertex,List<List<ReadOnlyVector3>> innerVertex){  if ((outerVertex == null) || (outerVertex.size() == 0)) {    return (null);  }  ArrayList<ReadOnlyVector3> positions=new ArrayList<ReadOnlyVector3>();  referencePoint=new Vector3(outerVertex.get(0));  for (  ReadOnlyVector3 vert : outerVertex) {    Vector3 pos=vert.subtract(referencePoint,null);    positions.add(pos);  }  this.outerVertex=positions;  if (innerVertex != null) {    this.innerVertex=new ArrayList<List<ReadOnlyVector3>>();    for (int i=0; i < innerVertex.size(); ++i) {      List<ReadOnlyVector3> innerVert=innerVertex.get(i);      positions=new ArrayList<ReadOnlyVector3>();      for (      ReadOnlyVector3 vert : innerVert) {        Vector3 pos=vert.subtract(referencePoint,null);        positions.add(pos);      }      this.innerVertex.add(positions);    }  }  tessellatedPolygon.clear();  this.tessellateInterior(new TessellatorCallback());  return (vertexBuffer);}  }
class C{  static public boolean removeAuxiliaryLookAndFeel(LookAndFeel laf){  maybeInitialize();  boolean result;  Vector<LookAndFeel> v=getLAFState().auxLookAndFeels;  if ((v == null) || (v.size() == 0)) {    return false;  }  result=v.removeElement(laf);  if (result) {    if (v.size() == 0) {      getLAFState().auxLookAndFeels=null;      getLAFState().multiLookAndFeel=null;    } else {      getLAFState().auxLookAndFeels=v;    }  }  laf.uninitialize();  return result;}  }
class C{  public static void init(final Context context,final FileDownloadHelper.OkHttpClientCustomMaker okHttpClientCustomMaker,final int maxNetworkThreadCount){  init(context,new DownloadMgrInitialParams.InitCustomMaker().okHttpClient(okHttpClientCustomMaker).maxNetworkThreadCount(maxNetworkThreadCount));}  }
class C{  private void processIndexes(QueryEntity qryEntity,TypeDescriptor d) throws IgniteCheckedException {  if (!F.isEmpty(qryEntity.getIndexes())) {    Map<String,String> aliases=qryEntity.getAliases();    if (aliases == null)     aliases=Collections.emptyMap();    for (    QueryIndex idx : qryEntity.getIndexes()) {      String idxName=idx.getName();      if (idxName == null)       idxName=QueryEntity.defaultIndexName(idx);      if (idx.getIndexType() == QueryIndexType.SORTED || idx.getIndexType() == QueryIndexType.GEOSPATIAL) {        d.addIndex(idxName,idx.getIndexType() == QueryIndexType.SORTED ? SORTED : GEO_SPATIAL);        int i=0;        for (        Map.Entry<String,Boolean> entry : idx.getFields().entrySet()) {          String field=entry.getKey();          boolean asc=entry.getValue();          String alias=aliases.get(field);          if (alias != null)           field=alias;          d.addFieldToIndex(idxName,field,i++,!asc);        }      } else {        assert idx.getIndexType() == QueryIndexType.FULLTEXT;        for (        String field : idx.getFields().keySet()) {          String alias=aliases.get(field);          if (alias != null)           field=alias;          d.addFieldToTextIndex(field);        }      }    }  }}  }
class C{  private static char whitespaceToSpace(char c){  return Character.isWhitespace(c) ? ' ' : c;}  }
class C{  public static Integer size(){  return PM.size();}  }
class C{  public void visitTypeInsn(int opcode,String type){  if (mv != null) {    mv.visitTypeInsn(opcode,type);  }}  }
class C{  private String parseValue(String value){  value=value.trim();  if (value.charAt(0) == '\'' && value.charAt(value.length() - 1) == '\'') {    value=value.substring(1,value.length() - 1);    value=value.replaceAll("''","'");  }  return value;}  }
class C{  public SolrQueryResponse(){}  }
class C{  @LargeTest public void testNavigationByWord() throws Exception {  sExecutedTestCount++;  String html="<html>" + "<head>" + "</head>"+ "<body>"+ "<p>"+ "This is <b>a</b> sentence"+ "</p>"+ "<p>"+ " scattered "+ "<p/>"+ " all over "+ "</p>"+ "<div>"+ "<p>the place.</p>"+ "</div>"+ "</body>"+ "</html>";  WebView webView=loadHTML(html);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,META_STATE_ALT_LEFT_ON);  assertSelectionString("1");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("is");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("<b>a</b>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("sentence");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("scattered");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("all");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("over");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("the");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("place");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(".");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("place.");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("the");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("over");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("all");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("scattered");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("sentence");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("<b>a</b>");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("is");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString("This");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_UP,0);  assertSelectionString(null);  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("This");  sendKeyEvent(webView,KeyEvent.KEYCODE_DPAD_DOWN,0);  assertSelectionString("is");}  }
class C{  public boolean shouldCollide(Fixture fixtureA,Fixture fixtureB){  Filter filterA=fixtureA.getFilterData();  Filter filterB=fixtureB.getFilterData();  if (filterA.groupIndex == filterB.groupIndex && filterA.groupIndex != 0) {    return filterA.groupIndex > 0;  }  boolean collide=(filterA.maskBits & filterB.categoryBits) != 0 && (filterA.categoryBits & filterB.maskBits) != 0;  return collide;}  }
class C{  public boolean newWorkersRequired(int completionTargetMillis){  if (stats == null) {    return false;  }  LOGGER.debug("+ stats.toString() = " + stats.toString());  return stats.expectedCompletionTime() > completionTargetMillis;}  }
class C{  public Subscription registerController(Class<?> controllerClass,String controllerId,ModelProvider modelProvider){  Assert.requireNonNull(controllerClass,"controllerClass");  Assert.requireNonBlank(controllerId,"controllerId");  Assert.requireNonNull(modelProvider,"modelProvider");  DolphinControllerInfoMBean mBean=new DolphinControllerInfo(dolphinContextId,controllerClass,controllerId,modelProvider);  return MBeanRegistry.getInstance().register(mBean,new MBeanDescription("com.canoo.dolphin",controllerClass.getSimpleName(),"controller"));}  }
class C{  private void dropDownstreamTo(long absolutePosition){  int relativePosition=(int)(absolutePosition - totalBytesDropped);  int allocationIndex=relativePosition / allocationLength;  for (int i=0; i < allocationIndex; i++) {    allocator.release(dataQueue.remove());    totalBytesDropped+=allocationLength;  }}  }
class C{  protected Pair(K first,V second){  this.first=first;  this.second=second;}  }
class C{  @Override public final boolean hasSource(String sourceId) throws AdeException {  refreshDictionaryIfNeeded();  return m_dictionary.getWordId(sourceId) != DbDictionary.InvalidID;}  }
class C{  public static int longlongHashCode(long key1,long key2){  int h=(int)(key1 ^ (key1 >>> 32));  return h * 31 + (int)(key2 ^ (key2 >>> 32));}  }
class C{  public static void println(int priority,String tag,String msg,Throwable tr){  if (mLogNode != null) {    mLogNode.println(priority,tag,msg,tr);  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.ARRAY_LIKE___GET_ELEMENT_TYPE:    return getElementType();}return super.eInvoke(operationID,arguments);}  }
class C{  private static void cutIndent(IDocument document,int line,int toDelete,int tabSize,boolean[] commentLines,int relative) throws BadLocationException {  IRegion region=document.getLineInformation(line);  int from=region.getOffset();  int endOffset=region.getOffset() + region.getLength();  while (from < endOffset - 2 && document.get(from,2).equals(SLASHES))   from+=2;  int to=from;  while (toDelete > 0 && to < endOffset) {    char ch=document.getChar(to);    if (!Character.isWhitespace(ch))     break;    toDelete-=computeVisualLength(ch,tabSize);    if (toDelete >= 0)     to++; else     break;  }  if (endOffset > to + 1 && document.get(to,2).equals(SLASHES))   commentLines[relative]=true;  document.replace(from,to - from,null);}  }
class C{  public static void createPRWithRedundantCopyWithAsyncEventQueue(String regionName,String asyncEventQueueId,Boolean offHeap){  IgnoredException exp=IgnoredException.addIgnoredException(ForceReattemptException.class.getName());  try {    AttributesFactory fact=new AttributesFactory();    PartitionAttributesFactory pfact=new PartitionAttributesFactory();    pfact.setTotalNumBuckets(16);    pfact.setRedundantCopies(1);    fact.setPartitionAttributes(pfact.create());    fact.setOffHeap(offHeap);    Region r=cache.createRegionFactory(fact.create()).addAsyncEventQueueId(asyncEventQueueId).create(regionName);    assertNotNull(r);  }  finally {    exp.remove();  }}  }
class C{  public EObject basicGetReference(){  return reference;}  }
class C{  public static Object deepCopy(Object obj){  ObjectOutputStream oos=null;  ObjectInputStream ois=null;  Object newObject=null;  try {    ByteArrayOutputStream baos=new ByteArrayOutputStream();    oos=new ObjectOutputStream(baos);    oos.writeObject(obj);    oos.flush();    ByteArrayInputStream bais=new ByteArrayInputStream(baos.toByteArray());    ois=new ObjectInputStream(bais);    newObject=ois.readObject();  } catch (  Exception e) {  } finally {    try {      if (oos != null)       oos.close();    } catch (    IOException e) {    }    try {      if (ois != null)       ois.close();    } catch (    IOException e) {    }  }  return newObject;}  }
class C{  public static double blackFormulaImpliedStdDevApproximation(final PlainVanillaPayoff payoff,@Real final double strike,@Real final double forward,@Real final double blackPrice,@DiscountFactor final double discount,@Real final double displacement){  return blackFormulaImpliedStdDevApproximation(payoff.optionType(),payoff.strike(),forward,blackPrice,discount,displacement);}  }
class C{  private final static void usage(String msg){  System.err.println(msg);  System.err.println("Usage: java Base64 -e|-d inputfile outputfile");}  }
class C{  public void stderrShouldContain(String expectedString){  if (!stderr.contains(expectedString)) {    reportDiagnosticSummary();    throw new RuntimeException("'" + expectedString + "' missing from stderr \n");  }}  }
class C{  public AlgorithmIdentifier(String algorithm,String algorithmName){  this(algorithm,null,null);  this.algorithmName=algorithmName;}  }
class C{  public static ContentManifest fromJson(String json){  ContentManifest manifest=new ContentManifest();  try {    JsonNode filesListNode=new ObjectMapper().readTree(json);    for (    JsonNode fileNode : filesListNode) {      String fileName=fileNode.get(JsonKeys.FILE_PATH).asText();      String fileHash=fileNode.get(JsonKeys.FILE_HASH).asText();      manifest.files.add(new ManifestFile(fileName,fileHash));    }  } catch (  Exception e) {    e.printStackTrace();  }  manifest.jsonString=json;  return manifest;}  }
class C{  public Bindings add(String property,JToggleButton c){  registerPropertyChangeListener(c);  return add(new JToggleButtonBinding(property,c,false));}  }
class C{  public void draw(){  GLES20.glUseProgram(getProgram());  int positionHandle=GLES20.glGetAttribLocation(getProgram(),VERTEX_POSITION);  GLES20.glEnableVertexAttribArray(positionHandle);  GLES20.glVertexAttribPointer(positionHandle,COORDS_PER_VERTEX,GLES20.GL_FLOAT,false,COORDS_PER_VERTEX * SIZE_OF_FLOAT,vertexBuffer);  int colorHandle=GLES20.glGetUniformLocation(getProgram(),VERTEX_COLOR);  GLES20.glEnable(GLES20.GL_BLEND);  GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA,GLES20.GL_ONE_MINUS_SRC_ALPHA);  GLES20.glUniform4fv(colorHandle,1,getColor(),0);  GLES20.glDrawElements(GLES20.GL_TRIANGLE_FAN,shortBuffer.capacity(),GLES20.GL_UNSIGNED_SHORT,shortBuffer);  GLES20.glDisableVertexAttribArray(positionHandle);  GLES20.glDisable(GLES20.GL_BLEND);}  }
class C{  public static int findRowIdColumnIndex(String[] columnNames){  int length=columnNames.length;  for (int i=0; i < length; i++) {    if (columnNames[i].equals("_id")) {      return i;    }  }  return -1;}  }
class C{  private void growByOne(){  int adding=0;  if (capacityIncrement <= 0) {    if ((adding=elementData.length) == 0) {      adding=1;    }  } else {    adding=capacityIncrement;  }  E[] newData=newElementArray(elementData.length + adding);  System.arraycopy(elementData,0,newData,0,elementCount);  elementData=newData;}  }
class C{  public boolean isInstantiable(){  return detail.isInstantiable();}  }
class C{  @Override public String toString(){  String result=toString;  if (result == null) {    result=computeToString();    toString=result;  }  return result;}  }
class C{  public JavaSource addSource(File file) throws IOException {  return classLibraryBuilder.addSource(file);}  }
class C{  private DynamicApkInfo parseBaseApk(Resources res,XmlResourceParser parser,String[] outError) throws XmlPullParserException, IOException {  AttributeSet attrs=parser;  mParseInstrumentationArgs=null;  mParseActivityArgs=null;  mParseServiceArgs=null;  mParseProviderArgs=null;  final String pkgName;  try {    String packageName=parsePackageNames(parser,attrs);    pkgName=packageName;  } catch (  DynamicApkParserException e) {    mParseError=INSTALL_PARSE_FAILED_BAD_PACKAGE_NAME;    return null;  }  int type;  final DynamicApkInfo pkg=new DynamicApkInfo(pkgName);  boolean foundApp=false;  TypedArray sa=res.obtainAttributes(attrs,Hooks.getStyleableArray("AndroidManifest"));  pkg.coreApp=attrs.getAttributeBooleanValue(null,"coreApp",false);  sa.recycle();  int supportsSmallScreens=1;  int supportsNormalScreens=1;  int supportsLargeScreens=1;  int supportsXLargeScreens=1;  int resizeable=1;  int anyDensity=1;  int outerDepth=parser.getDepth();  while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {    if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {      continue;    }    String tagName=parser.getName();    if (tagName.equals("application")) {      if (foundApp) {        if (RIGID_PARSER) {          outError[0]="<manifest> has more than one <application>";          mParseError=INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;          return null;        } else {          Log.w(TAG,"<manifest> has more than one <application>");          XmlUtils.skipCurrentTag(parser);          continue;        }      }      foundApp=true;      if (!parseBaseApplication(pkg,res,parser,attrs,outError)) {        return null;      }    } else     if (tagName.equals("overlay")) {      sa=res.obtainAttributes(attrs,Hooks.getStyleableArray("AndroidManifestResourceOverlay"));      pkg.mOverlayTarget=sa.getString(Hooks.getStyleable("AndroidManifestResourceOverlay_targetPackage"));      pkg.mOverlayPriority=sa.getInt(Hooks.getStyleable("AndroidManifestResourceOverlay_priority"),-1);      sa.recycle();      if (pkg.mOverlayTarget == null) {        outError[0]="<overlay> does not specify a target package";        mParseError=INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;        return null;      }      if (pkg.mOverlayPriority < 0 || pkg.mOverlayPriority > 9999) {        outError[0]="<overlay> priority must be between 0 and 9999";        mParseError=INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;        return null;      }      XmlUtils.skipCurrentTag(parser);    } else     if (tagName.equals("key-sets")) {      if (!parseKeySets(pkg,res,parser,attrs,outError)) {        return null;      }    } else     if (tagName.equals("permission-group")) {      if (parsePermissionGroup(pkg,res,parser,attrs,outError) == null) {        return null;      }    } else     if (tagName.equals("permission")) {      if (parsePermission(pkg,res,parser,attrs,outError) == null) {        return null;      }    } else     if (tagName.equals("permission-tree")) {      if (parsePermissionTree(pkg,res,parser,attrs,outError) == null) {        return null;      }    } else     if (tagName.equals("uses-permission")) {      if (!parseUsesPermission(pkg,res,parser,attrs)) {        return null;      }    } else     if (tagName.equals("uses-permission-sdk-m") || tagName.equals("uses-permission-sdk-23")) {      if (!parseUsesPermission(pkg,res,parser,attrs)) {        return null;      }    } else     if (tagName.equals("uses-configuration")) {      ConfigurationInfo cPref=new ConfigurationInfo();      sa=res.obtainAttributes(attrs,Hooks.getStyleableArray("AndroidManifestUsesConfiguration"));      cPref.reqTouchScreen=sa.getInt(Hooks.getStyleable("AndroidManifestUsesConfiguration_reqTouchScreen"),Configuration.TOUCHSCREEN_UNDEFINED);      cPref.reqKeyboardType=sa.getInt(Hooks.getStyleable("AndroidManifestUsesConfiguration_reqKeyboardType"),Configuration.KEYBOARD_UNDEFINED);      if (sa.getBoolean(Hooks.getStyleable("AndroidManifestUsesConfiguration_reqHardKeyboard"),false)) {        cPref.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_HARD_KEYBOARD;      }      cPref.reqNavigation=sa.getInt(Hooks.getStyleable("AndroidManifestUsesConfiguration_reqNavigation"),Configuration.NAVIGATION_UNDEFINED);      if (sa.getBoolean(Hooks.getStyleable("AndroidManifestUsesConfiguration_reqFiveWayNav"),false)) {        cPref.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_FIVE_WAY_NAV;      }      sa.recycle();      pkg.configPreferences=ArrayUtils.add(pkg.configPreferences,cPref);      XmlUtils.skipCurrentTag(parser);    } else     if (tagName.equals("uses-feature")) {      FeatureInfo fi=parseUsesFeature(res,attrs);      pkg.reqFeatures=ArrayUtils.add(pkg.reqFeatures,fi);      if (fi.name == null) {        ConfigurationInfo cPref=new ConfigurationInfo();        cPref.reqGlEsVersion=fi.reqGlEsVersion;        pkg.configPreferences=ArrayUtils.add(pkg.configPreferences,cPref);      }      XmlUtils.skipCurrentTag(parser);    } else     if (tagName.equals("uses-sdk")) {      XmlUtils.skipCurrentTag(parser);    } else     if (tagName.equals("supports-screens")) {      sa=res.obtainAttributes(attrs,Hooks.getStyleableArray("AndroidManifestSupportsScreens"));      pkg.applicationInfo.requiresSmallestWidthDp=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_requiresSmallestWidthDp"),0);      pkg.applicationInfo.compatibleWidthLimitDp=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_compatibleWidthLimitDp"),0);      pkg.applicationInfo.largestWidthLimitDp=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_largestWidthLimitDp"),0);      supportsSmallScreens=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_smallScreens"),supportsSmallScreens);      supportsNormalScreens=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_normalScreens"),supportsNormalScreens);      supportsLargeScreens=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_largeScreens"),supportsLargeScreens);      supportsXLargeScreens=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_xlargeScreens"),supportsXLargeScreens);      resizeable=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_resizeable"),resizeable);      anyDensity=sa.getInteger(Hooks.getStyleable("AndroidManifestSupportsScreens_anyDensity"),anyDensity);      sa.recycle();      XmlUtils.skipCurrentTag(parser);    } else     if (tagName.equals("protected-broadcast")) {      sa=res.obtainAttributes(attrs,Hooks.getStyleableArray("AndroidManifestProtectedBroadcast"));      String name=sa.getNonResourceString(Hooks.getStyleable("AndroidManifestProtectedBroadcast_name"));      sa.recycle();      if (name != null) {        if (pkg.protectedBroadcasts == null) {          pkg.protectedBroadcasts=new ArrayList<String>();        }        if (!pkg.protectedBroadcasts.contains(name)) {          pkg.protectedBroadcasts.add(name.intern());        }      }      XmlUtils.skipCurrentTag(parser);    } else     if (tagName.equals("instrumentation")) {      if (parseInstrumentation(pkg,res,parser,attrs,outError) == null) {        return null;      }    } else     if (tagName.equals("original-package")) {      XmlUtils.skipCurrentTag(parser);      continue;    } else     if (tagName.equals("adopt-permissions")) {      XmlUtils.skipCurrentTag(parser);      continue;    } else     if (tagName.equals("uses-gl-texture")) {      XmlUtils.skipCurrentTag(parser);      continue;    } else     if (tagName.equals("compatible-screens")) {      XmlUtils.skipCurrentTag(parser);      continue;    } else     if (tagName.equals("supports-input")) {      XmlUtils.skipCurrentTag(parser);      continue;    } else     if (tagName.equals("eat-comment")) {      XmlUtils.skipCurrentTag(parser);      continue;    } else     if (RIGID_PARSER) {      outError[0]="Bad element under <manifest>: " + parser.getName();      mParseError=INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;      return null;    } else {      Log.w(TAG,"Unknown element under <manifest>: " + parser.getName() + " at "+ mArchiveSourcePath+ " "+ parser.getPositionDescription());      XmlUtils.skipCurrentTag(parser);      continue;    }  }  if (!foundApp && pkg.instrumentation.size() == 0) {    outError[0]="<manifest> does not contain an <application> or <instrumentation>";    mParseError=INSTALL_PARSE_FAILED_MANIFEST_EMPTY;  }  final int NP=DynamicApkParser.NEW_PERMISSIONS.length;  StringBuilder implicitPerms=null;  for (int ip=0; ip < NP; ip++) {    final DynamicApkParser.NewPermissionInfo npi=DynamicApkParser.NEW_PERMISSIONS[ip];    if (pkg.applicationInfo.targetSdkVersion >= npi.sdkVersion) {      break;    }    if (!pkg.requestedPermissions.contains(npi.name)) {      if (implicitPerms == null) {        implicitPerms=new StringBuilder(128);        implicitPerms.append(pkg.packageName);        implicitPerms.append(": compat added ");      } else {        implicitPerms.append(' ');      }      implicitPerms.append(npi.name);      pkg.requestedPermissions.add(npi.name);    }  }  if (implicitPerms != null) {    Log.i(TAG,implicitPerms.toString());  }  if (supportsSmallScreens < 0 || (supportsSmallScreens > 0 && pkg.applicationInfo.targetSdkVersion >= android.os.Build.VERSION_CODES.DONUT)) {    pkg.applicationInfo.flags|=ApplicationInfo.FLAG_SUPPORTS_SMALL_SCREENS;  }  if (supportsNormalScreens != 0) {    pkg.applicationInfo.flags|=ApplicationInfo.FLAG_SUPPORTS_NORMAL_SCREENS;  }  if (supportsLargeScreens < 0 || (supportsLargeScreens > 0 && pkg.applicationInfo.targetSdkVersion >= android.os.Build.VERSION_CODES.DONUT)) {    pkg.applicationInfo.flags|=ApplicationInfo.FLAG_SUPPORTS_LARGE_SCREENS;  }  if (supportsXLargeScreens < 0 || (supportsXLargeScreens > 0 && pkg.applicationInfo.targetSdkVersion >= android.os.Build.VERSION_CODES.GINGERBREAD)) {    pkg.applicationInfo.flags|=ApplicationInfo.FLAG_SUPPORTS_XLARGE_SCREENS;  }  if (resizeable < 0 || (resizeable > 0 && pkg.applicationInfo.targetSdkVersion >= android.os.Build.VERSION_CODES.DONUT)) {    pkg.applicationInfo.flags|=ApplicationInfo.FLAG_RESIZEABLE_FOR_SCREENS;  }  if (anyDensity < 0 || (anyDensity > 0 && pkg.applicationInfo.targetSdkVersion >= android.os.Build.VERSION_CODES.DONUT)) {    pkg.applicationInfo.flags|=ApplicationInfo.FLAG_SUPPORTS_SCREEN_DENSITIES;  }  return pkg;}  }
class C{  @Parameterized.Parameters public static Collection<Object[]> methods(){  return Arrays.asList(new Object[][]{{RqMethod.POST,"hello, post!"},{RqMethod.GET,"hello, get!"},{RqMethod.PUT,"hello, put!"},{RqMethod.DELETE,"hello, delete!"},{RqMethod.TRACE,"hello, trace!"}});}  }
class C{  public static int intersection(int a[],int lena,int b[],int lenb,int[] target){  if (lena > lenb) {    int ti=lena;    lena=lenb;    lenb=ti;    int[] ta=a;    a=b;    b=ta;  }  if (lena == 0)   return 0;  if ((lenb >> 3) >= lena) {    return intersectionBinarySearch(a,lena,b,lenb,target);  }  int icount=0;  int i=0, j=0;  int doca=a[i], docb=b[j];  for (; ; ) {    if (doca > docb) {      if (++j >= lenb)       break;      docb=b[j];    } else     if (doca < docb) {      if (++i >= lena)       break;      doca=a[i];    } else {      target[icount++]=doca;      if (++i >= lena)       break;      doca=a[i];      if (++j >= lenb)       break;      docb=b[j];    }  }  return icount;}  }
class C{  private Map<Value,Double> createTable(String variable){  Map<Value,Double> values=new HashMap<Value,Double>();  int maxPriority=Integer.MAX_VALUE;  Set<Value> toRemove=new HashSet<Value>();  toRemove.add(ValueFactory.none());  for (  BasicEffect e : subeffects) {    if (e.getVariable().equals(variable)) {      if (e.priority < maxPriority) {        maxPriority=e.priority;      }      if (e.negated) {        toRemove.add(e.getValue());      }    }  }  for (  BasicEffect e : subeffects) {    String var=e.getVariable();    if (var.equals(variable)) {      Value value=e.getValue();      if (e.priority > maxPriority || e.negated || toRemove.contains(value)) {        continue;      }      if (toRemove.size() > 1 && value instanceof SetVal) {        Collection<Value> subvalues=((SetVal)value).getSubValues();        subvalues.removeAll(toRemove);        value=ValueFactory.create(subvalues);      }      values.merge(value,e.weight,null);    }  }  return values;}  }
class C{  public static boolean passesSmallPrimeTest(BigInteger candidate){  final int[] smallPrime={2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499};  for (int i=0; i < smallPrime.length; i++) {    if (candidate.mod(BigInteger.valueOf(smallPrime[i])).equals(ZERO)) {      return false;    }  }  return true;}  }
class C{  public KeywordAttributeImpl(){}  }
class C{  void unexecuteNSDecls(TransformerImpl transformer) throws TransformerException {  unexecuteNSDecls(transformer,null);}  }
class C{  public static void sign(File jadFile,File outputJadFile,File jarFile,RSAPrivateKey privateKey,X509Certificate[] certificateChain,int certificateNumber) throws IOException, CryptoException {  Properties jadProperties=readJadFile(jadFile);  Properties newJadProperties=new Properties();  for (Enumeration enumPropNames=jadProperties.propertyNames(); enumPropNames.hasMoreElements(); ) {    String propName=(String)enumPropNames.nextElement();    if (propName.equals(MIDLET_JAR_RSA_SHA1_ATTR)) {      continue;    }    if (propName.startsWith(MessageFormat.format(SUB_MIDLET_CERTIFICATE_ATTR,certificateNumber))) {      continue;    }    newJadProperties.put(propName,jadProperties.getProperty(propName));  }  for (int i=0; i < certificateChain.length; i++) {    X509Certificate certificate=certificateChain[i];    String base64Cert=null;    try {      base64Cert=new String(Base64.encode(certificate.getEncoded()));    } catch (    CertificateEncodingException ex) {      throw new CryptoException(res.getString("Base64CertificateFailed.exception.message"),ex);    }    String midletCertificateAttr=MessageFormat.format(MIDLET_CERTIFICATE_ATTR,certificateNumber,(i + 1));    newJadProperties.put(midletCertificateAttr,base64Cert);  }  byte[] signedJarDigest=signJarDigest(jarFile,privateKey);  String base64SignedJarDigest=new String(Base64.encode(signedJarDigest));  newJadProperties.put(MIDLET_JAR_RSA_SHA1_ATTR,base64SignedJarDigest);  TreeMap<String,String> sortedJadProperties=new TreeMap<String,String>();  for (Enumeration names=newJadProperties.propertyNames(); names.hasMoreElements(); ) {    String name=(String)names.nextElement();    String value=newJadProperties.getProperty(name);    sortedJadProperties.put(name,value);  }  FileWriter fw=null;  try {    fw=new FileWriter(outputJadFile);    for (Iterator itrSorted=sortedJadProperties.entrySet().iterator(); itrSorted.hasNext(); ) {      Map.Entry property=(Map.Entry)itrSorted.next();      fw.write(MessageFormat.format(JAD_ATTR_TEMPLATE,property.getKey(),property.getValue()));      fw.write(CRLF);    }  }  finally {    IOUtils.closeQuietly(fw);  }}  }
class C{  public final void insertElementAt(E element,int index){  add(index,element);}  }
class C{  private String buildStartMessage(RecognizeOptions options){  JsonObject startMessage=new JsonParser().parse(new Gson().toJson(options)).getAsJsonObject();  startMessage.remove(MODEL);  startMessage.addProperty(ACTION,START);  return startMessage.toString();}  }
class C{  protected boolean isBlacklistedRecipient(){  return fieldBlacklistedRecipient;}  }
class C{  public IA32ConditionOperand flipOperands(){switch (value) {case LLT:    value=LGT;  break;case LGE:value=LLE;break;case LLE:value=LGE;break;case LGT:value=LLT;break;case LT:value=GT;break;case GE:value=LE;break;case LE:value=GE;break;case GT:value=LT;break;default :OptimizingCompilerException.TODO();}return this;}  }
class C{  public void addTable(String tagString,TrueTypeTable table){  tables.put(tagString,table);}  }
class C{  @Deprecated public PtCountSimComparisonKMLWriter(final List<CountSimComparison> boardCountSimCompList,final List<CountSimComparison> alightCountSimCompList,final List<CountSimComparison> occupancyCountSimCompList,final CoordinateTransformation coordTransform,final Counts boradCounts,final Counts alightCounts,final Counts occupancyCounts){  super(boardCountSimCompList,alightCountSimCompList,occupancyCountSimCompList);  this.coordTransform=coordTransform;  this.boardCounts=boradCounts;  this.alightCounts=alightCounts;  this.occupancyCounts=occupancyCounts;}  }
class C{  private boolean testInProgress(){  return mTestInProgress;}  }
class C{  public T javaEnabled(Boolean value){  setBoolean(JAVA_ENABLED,value);  return (T)this;}  }
class C{  public static GregorianCalendar createCalendar(){  return new GregorianCalendar();}  }
class C{  public void endRequest(){  repository.logout(mailboxSession);}  }
class C{  public int code(){  return rawResponse.code();}  }
class C{  protected PrimitiveTypeImpl(){  super();}  }
class C{  private BezierPath[] toPath(String str) throws IOException {  LinkedList<BezierPath> paths=new LinkedList<BezierPath>();  BezierPath path=null;  Point2D.Double p=new Point2D.Double();  Point2D.Double c1=new Point2D.Double();  Point2D.Double c2=new Point2D.Double();  StreamPosTokenizer tt=new StreamPosTokenizer(new StringReader(str));  tt.resetSyntax();  tt.parseNumbers();  tt.parseExponents();  tt.parsePlusAsNumber();  tt.whitespaceChars(0,' ');  tt.whitespaceChars(',',',');  char nextCommand='M';  char command='M';  Commands:   while (tt.nextToken() != StreamPosTokenizer.TT_EOF) {    if (tt.ttype > 0) {      command=(char)tt.ttype;    } else {      command=nextCommand;      tt.pushBack();    }    BezierPath.Node node;switch (command) {case 'M':      if (path != null) {        paths.add(path);      }    path=new BezierPath();  if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {    throw new IOException("x coordinate missing for 'M' at position " + tt.getStartPosition() + " in "+ str);  }p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'M' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.moveTo(p.x,p.y);nextCommand='L';break;case 'm':if (path != null) {paths.add(path);}path=new BezierPath();if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'm' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'm' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.moveTo(p.x,p.y);nextCommand='l';break;case 'Z':case 'z':p.x=path.get(0).x[0];p.y=path.get(0).y[0];if (path.size() > 1) {BezierPath.Node first=path.get(0);BezierPath.Node last=path.get(path.size() - 1);if (first.x[0] == last.x[0] && first.y[0] == last.y[0]) {if ((last.mask & BezierPath.C1_MASK) != 0) {first.mask|=BezierPath.C1_MASK;first.x[1]=last.x[1];first.y[1]=last.y[1];}path.remove(path.size() - 1);}}path.setClosed(true);break;case 'L':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'L' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'L' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.lineTo(p.x,p.y);nextCommand='L';break;case 'l':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'l' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'l' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.lineTo(p.x,p.y);nextCommand='l';break;case 'H':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'H' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;path.lineTo(p.x,p.y);nextCommand='H';break;case 'h':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'h' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;path.lineTo(p.x,p.y);nextCommand='h';break;case 'V':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'V' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.lineTo(p.x,p.y);nextCommand='V';break;case 'v':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'v' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.lineTo(p.x,p.y);nextCommand='v';break;case 'C':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x1 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}c1.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y1 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}c1.y=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x2 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}c2.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y2 coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}c2.y=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'C' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);nextCommand='C';break;case 'c':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx1 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}c1.x=p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy1 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}c1.y=p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx2 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}c2.x=p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy2 coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}c2.y=p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'c' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);nextCommand='c';break;case 'S':node=path.get(path.size() - 1);c1.x=node.x[0] * 2d - node.x[1];c1.y=node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x2 coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);}c2.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y2 coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);}c2.y=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'S' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);nextCommand='S';break;case 's':node=path.get(path.size() - 1);c1.x=node.x[0] * 2d - node.x[1];c1.y=node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx2 coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);}c2.x=p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy2 coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);}c2.y=p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 's' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.curveTo(c1.x,c1.y,c2.x,c2.y,p.x,p.y);nextCommand='s';break;case 'Q':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x1 coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);}c1.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y1 coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);}c1.y=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'Q' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.quadTo(c1.x,c1.y,p.x,p.y);nextCommand='Q';break;case 'q':if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx1 coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);}c1.x=p.x + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy1 coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);}c1.y=p.y + tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 'q' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.quadTo(c1.x,c1.y,p.x,p.y);nextCommand='q';break;case 'T':node=path.get(path.size() - 1);c1.x=node.x[0] * 2d - node.x[1];c1.y=node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'T' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'T' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.quadTo(c1.x,c1.y,p.x,p.y);nextCommand='T';break;case 't':node=path.get(path.size() - 1);c1.x=node.x[0] * 2d - node.x[1];c1.y=node.y[0] * 2d - node.y[1];if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dx coordinate missing for 't' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("dy coordinate missing for 't' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.quadTo(c1.x,c1.y,p.x,p.y);nextCommand='s';break;case 'A':{if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("rx coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double rx=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("ry coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double ry=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x-axis-rotation missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double xAxisRotation=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("large-arc-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}boolean largeArcFlag=tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("sweep-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}boolean sweepFlag=tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}p.x=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}p.y=tt.nval;path.arcTo(rx,ry,xAxisRotation,largeArcFlag,sweepFlag,p.x,p.y);nextCommand='A';break;}case 'a':{if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("rx coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double rx=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("ry coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double ry=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x-axis-rotation missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}double xAxisRotation=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("large-arc-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}boolean largeArcFlag=tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("sweep-flag missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}boolean sweepFlag=tt.nval != 0;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("x coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}p.x+=tt.nval;if (tt.nextToken() != StreamPosTokenizer.TT_NUMBER) {throw new IOException("y coordinate missing for 'A' at position " + tt.getStartPosition() + " in "+ str);}p.y+=tt.nval;path.arcTo(rx,ry,xAxisRotation,largeArcFlag,sweepFlag,p.x,p.y);nextCommand='a';break;}default :if (DEBUG) {System.out.println("SVGInputFormat.toPath aborting after illegal path command: " + command + " found in path "+ str);}break Commands;}}if (path != null) {paths.add(path);}return paths.toArray(new BezierPath[paths.size()]);}  }
class C{  public RefinedSoundex(){  this(US_ENGLISH_MAPPING);}  }
class C{  public Builder html(Boolean isHtml){  this.isHtml=isHtml;  return this;}  }
class C{  public SaaSSystemException(String arg0,Throwable arg1){  super(arg0,arg1);  genId();  this.setCauseStackTrace(arg1);}  }
class C{  @edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value="EI_EXPOSE_REP") public String[] validBaudRates(){  return validSpeeds;}  }
class C{  private static String escapeSequence(char ch,int radix,int nDigits){  StringBuilder sb=new StringBuilder(nDigits);  sb.append(Integer.toString(ch,radix));  while (sb.length() < nDigits) {    sb.insert(0,'0');  }  return sb.toString();}  }
class C{  public final boolean isStatic(){  return Modifier.isStatic(getModifiers());}  }
class C{  public void onTextTrackLocaleChanged(Locale locale){  LOGD(TAG,"onTextTrackLocaleChanged() reached");  for (  VideoCastConsumer consumer : mVideoConsumers) {    consumer.onTextTrackLocaleChanged(locale);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:16.602 -0500",hash_original_method="48FF7A4A9E39F0BE519CF2AE778248C7",hash_generated_method="39F2C28974131F406B092D9E374533EF") public GradientDrawable(Orientation orientation,int[] colors){  this(new GradientState(orientation,colors));}  }
class C{  private static boolean isUnexpectedBug(BugInstance bug){  return FB_MISSING_EXPECTED_WARNING.equals(bug.getType()) || FB_UNEXPECTED_WARNING.equals(bug.getType());}  }
class C{  public RegionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  private LossAction(String name){  this.name=name;}  }
class C{  public Builder streams(List<String> streams){  this._streams=streams;  return this;}  }
class C{  private void verifyErrorPayload(JavaResult javaResult) throws Exception {  EchoCommand command=javaResult.getBean(EchoCommand.class);  if (null == command || null == command.getStatus() || HDSConstants.FAILED_STR.equalsIgnoreCase(command.getStatus())) {    Error error=javaResult.getBean(Error.class);    log.info("Error response received for messageID",command.getMessageID());    log.info("command failed with error code: {} with message {}",error.getCode(),error.getDescription());    throw HDSException.exceptions.errorResponseReceived(error.getCode(),error.getDescription());  }}  }
class C{  protected StoragePool checkStoragePoolExistsInDB(String nativeGuid) throws IOException {  StoragePool pool=null;  @SuppressWarnings("deprecation") List<URI> poolURIs=_dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePoolByNativeGuidConstraint(nativeGuid));  for (  URI poolURI : poolURIs) {    pool=_dbClient.queryObject(StoragePool.class,poolURI);    if (pool != null && !pool.getInactive()) {      return pool;    }  }  return null;}  }
class C{  protected static String _escapeQuotesAndBackslashes(String s){  final StringBuilder buf=new StringBuilder(s);  for (int i=s.length() - 1; i >= 0; i--) {    char c=s.charAt(i);    if ((c == '\\') || (c == '"')) {      buf.insert(i,'\\');    } else     if (c == '\n') {      buf.deleteCharAt(i);      buf.insert(i,"\\n");    } else     if (c == '\t') {      buf.deleteCharAt(i);      buf.insert(i,"\\t");    } else     if (c == '\r') {      buf.deleteCharAt(i);      buf.insert(i,"\\r");    } else     if (c == '\b') {      buf.deleteCharAt(i);      buf.insert(i,"\\b");    } else     if (c == '\f') {      buf.deleteCharAt(i);      buf.insert(i,"\\f");    }  }  return buf.toString();}  }
class C{  public static boolean verify(JSONObject obj,PublicKey key) throws SignatureException, InvalidKeyException {  if (!obj.has(signatureString))   throw new SignatureException("No signature supplied");  Signature signature;  try {    signature=Signature.getInstance("SHA256withRSA");  } catch (  NoSuchAlgorithmException e) {    return false;  }  String sigString=obj.getString(signatureString);  byte[] sig=Base64.getDecoder().decode(sigString);  obj.remove(signatureString);  signature.initVerify(key);  signature.update(obj.toString().getBytes(StandardCharsets.UTF_8));  boolean res=signature.verify(sig);  obj.put(signatureString,sigString);  return res;}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == TypableElement.class) {switch (baseFeatureID) {default :      return -1;  }}if (baseClass == TypeDefiningElement.class) {switch (baseFeatureID) {case N4JSPackage.TYPE_DEFINING_ELEMENT__DEFINED_TYPE:    return N4JSPackage.N4_TYPE_DEFINITION__DEFINED_TYPE;default :  return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public void clearParameters(){  m_Rows.clear();  m_Labels.clear();  m_Parameters.clear();  update();}  }
class C{  public boolean writeNextPart(byte[] data) throws JPlagException {  if (remainingBytes < data.length) {    throw new JPlagException("uploadException","More data sent " + "than expected!","");  }  try {    FileOutputStream out=new FileOutputStream(file,true);    out.write(data);    out.close();    remainingBytes-=data.length;  } catch (  IOException e) {    e.printStackTrace();    throw new JPlagException("uploadException","Unable to save " + "submission part on the server!","Server out of disk space??");  }  return remainingBytes == 0;}  }
class C{  public boolean equals(Object o){  if (o == null)   return false;  if (o instanceof OnePuzzle) {    OnePuzzle op=(OnePuzzle)o;    return op.s == s;  }  return false;}  }
class C{  public void addAttribute(String name,final String value){  if (m_elemContext.m_startTagOpen) {    final String patchedName=patchName(name);    final String localName=getLocalName(patchedName);    final String uri=getNamespaceURI(patchedName,false);    addAttributeAlways(uri,localName,patchedName,"CDATA",value,false);  }}  }
class C{  protected synchronized byte[] engineGenerateSeed(int numBytes){  byte[] myBytes;  if (numBytes < 0) {    throw new NegativeArraySizeException(Integer.toString(numBytes));  }  if (numBytes == 0) {    return EmptyArray.BYTE;  }  if (myRandom == null) {    myRandom=new SHA1PRNG_SecureRandomImpl();    myRandom.engineSetSeed(getRandomBytes(DIGEST_LENGTH));  }  myBytes=new byte[numBytes];  myRandom.engineNextBytes(myBytes);  return myBytes;}  }
class C{  public static String saltString(byte[] salt){  return Base64.encodeToString(salt,BASE64_FLAGS);}  }
class C{  public static int confirmPrint(MPaySelectionCheck[] checks,MPaymentBatch batch){  int lastDocumentNo=0;  for (int i=0; i < checks.length; i++) {    MPaySelectionCheck check=checks[i];    MPayment payment=new MPayment(check.getCtx(),check.getC_Payment_ID(),check.get_TrxName());    if (check.getC_Payment_ID() != 0) {      if (check.getPaymentRule().equals(PAYMENTRULE_Check)) {        payment.setCheckNo(check.getDocumentNo());        if (!payment.save())         s_log.log(Level.SEVERE,"Payment not saved: " + payment);      }    } else {      payment=new MPayment(check.getCtx(),0,check.get_TrxName());      payment.setAD_Org_ID(check.getAD_Org_ID());      if (check.getPaymentRule().equals(PAYMENTRULE_Check))       payment.setBankCheck(check.getParent().getC_BankAccount_ID(),false,check.getDocumentNo()); else       if (check.getPaymentRule().equals(PAYMENTRULE_CreditCard))       payment.setTenderType(X_C_Payment.TENDERTYPE_CreditCard); else       if (check.getPaymentRule().equals(PAYMENTRULE_DirectDeposit) || check.getPaymentRule().equals(PAYMENTRULE_DirectDebit))       payment.setBankACH(check); else {        s_log.log(Level.SEVERE,"Unsupported Payment Rule=" + check.getPaymentRule());        continue;      }      payment.setTrxType(X_C_Payment.TRXTYPE_CreditPayment);      payment.setAmount(check.getParent().getC_Currency_ID(),check.getPayAmt());      payment.setDiscountAmt(check.getDiscountAmt());      payment.setDateTrx(check.getParent().getPayDate());      payment.setDateAcct(payment.getDateTrx());      payment.setC_BPartner_ID(check.getC_BPartner_ID());      if (batch != null) {        if (batch.getC_PaymentBatch_ID() == 0)         batch.saveEx();        payment.setC_PaymentBatch_ID(batch.getC_PaymentBatch_ID());      }      MPaySelectionLine[] psls=check.getPaySelectionLines(false);      s_log.fine("confirmPrint - " + check + " (#SelectionLines="+ psls.length+ ")");      if (check.getQty() == 1 && psls != null && psls.length == 1) {        MPaySelectionLine psl=psls[0];        s_log.fine("Map to Invoice " + psl);        payment.setC_Invoice_ID(psl.getC_Invoice_ID());        payment.setDiscountAmt(psl.getDiscountAmt());        payment.setWriteOffAmt(psl.getDifferenceAmt());        BigDecimal overUnder=psl.getOpenAmt().subtract(psl.getPayAmt()).subtract(psl.getDiscountAmt()).subtract(psl.getDifferenceAmt());        payment.setOverUnderAmt(overUnder);      } else       payment.setDiscountAmt(Env.ZERO);      payment.setWriteOffAmt(Env.ZERO);      if (!payment.save())       s_log.log(Level.SEVERE,"Payment not saved: " + payment);      int C_Payment_ID=payment.get_ID();      if (C_Payment_ID < 1)       s_log.log(Level.SEVERE,"Payment not created=" + check); else {        check.setC_Payment_ID(C_Payment_ID);        check.saveEx();        payment.processIt(DocAction.ACTION_Complete);        if (!payment.save())         s_log.log(Level.SEVERE,"Payment not saved: " + payment);      }    }    try {      int no=Integer.parseInt(check.getDocumentNo());      if (lastDocumentNo < no)       lastDocumentNo=no;    } catch (    NumberFormatException ex) {      s_log.log(Level.SEVERE,"DocumentNo=" + check.getDocumentNo(),ex);    }    check.setIsPrinted(true);    check.setProcessed(true);    if (!check.save())     s_log.log(Level.SEVERE,"Check not saved: " + check);  }  s_log.fine("Last Document No = " + lastDocumentNo);  return lastDocumentNo;}  }
class C{  private Instruction do_iload(int index){  Operand r=getLocal(index);  if (VM.VerifyAssertions)   opt_assert(r.isIntLike());  if (LOCALS_ON_STACK) {    push(r);    return null;  } else {    return _moveHelper(INT_MOVE,r,TypeReference.Int);  }}  }
class C{  private StringBuffer buildStartContents(String period,String url){  StringBuffer out=new StringBuffer();  out.append("<script language='javascript'>\n");  out.append("//  FUNCIONES KEEP-ALIVE\n");  out.append("var xmlhttp=false;\n");  out.append("function xmlHttpResquestInit () {\n");  out.append("if (window.XMLHttpRequest) {\n");  out.append("xmlhttp = new XMLHttpRequest();\n");  out.append("if (xmlhttp.overrideMimeType)\n");  out.append("xmlhttp.overrideMimeType('text/xml');\n");  out.append("}else if (window.ActiveXObject) {\n");  out.append("try {\n");  out.append("xmlhttp = new ActiveXObject ('Msxml2.XMLHTTP');\n");  out.append("} catch (e) {\n");  out.append("try {\n");  out.append("xmlhttp = new ActiveXObject ('Microsoft.XMLHTTP');\n");  out.append("} catch (E)	{\n");  out.append("xmlhttp = false; \n} \n} \n} \n}\n");  out.append("function keepAliveInit()\n{\n");  out.append("xmlHttpResquestInit ();\n");  out.append("window.setInterval ('keepAliveRefresh()',");  out.append(period + "); \n}\n");  out.append("function keepAliveRefresh() {\n");  out.append("xmlhttp.open ('GET', '" + url + "', true);\n");  out.append("xmlhttp.onreadystatechange=function () {\n");  out.append("if (xmlhttp.readyState==4) {}\n");  out.append("\n}\n");  out.append("xmlhttp.send (null); \n}\n");  out.append("// FIN FUNCIONES KEEP-ALIVE\n");  out.append("keepAliveInit();");  out.append("</script>\n");  return out;}  }
class C{  private int update(){  int counter=0;  String sql="SELECT * FROM M_Cost c WHERE M_CostElement_ID=?";  if (p_M_Product_Category_ID != 0)   sql+=" AND EXISTS (SELECT * FROM M_Product p " + "WHERE c.M_Product_ID=p.M_Product_ID AND p.M_Product_Category_ID=?)";  PreparedStatement pstmt=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_ce.getM_CostElement_ID());    if (p_M_Product_Category_ID != 0)     pstmt.setInt(2,p_M_Product_Category_ID);    ResultSet rs=pstmt.executeQuery();    while (rs.next()) {      MCost cost=new MCost(getCtx(),rs,get_TrxName());      for (int i=0; i < m_ass.length; i++) {        if (m_ass[i].getC_AcctSchema_ID() == cost.getC_AcctSchema_ID() && m_ass[i].getM_CostType_ID() == cost.getM_CostType_ID()) {          if (update(cost))           counter++;        }      }    }    rs.close();    pstmt.close();    pstmt=null;  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);  }  try {    if (pstmt != null)     pstmt.close();    pstmt=null;  } catch (  Exception e) {    pstmt=null;  }  log.info("#" + counter);  addLog(0,null,new BigDecimal(counter),"@Updated@");  return counter;}  }
class C{  @POST @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/protection/continuous-copies/resume") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskList resumeContinuousCopies(@PathParam("id") URI id,FileReplicationParam param) throws ControllerException {  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  return performFileProtectionAction(param,id,ProtectionOp.RESUME.getRestOp());}  }
class C{  @Override public void write(DataOutput out) throws IOException {  this.key.write(out);  this.value.write(out);}  }
class C{  private void validateTagTypeCreateRequest(TagTypeCreateRequest request){  Assert.notNull(request,"A tag type create request must be specified.");  tagTypeHelper.validateTagTypeKey(request.getTagTypeKey());  request.setDisplayName(alternateKeyHelper.validateStringParameter("display name",request.getDisplayName()));  Assert.notNull(request.getTagTypeOrder(),"A tag type order must be specified.");}  }
class C{  protected Entry<Integer,List<Solution>> draw(){  int index=PRNG.nextInt(gridMap.size());  Iterator<Entry<Integer,List<Solution>>> iterator=gridMap.entrySet().iterator();  while (iterator.hasNext()) {    Entry<Integer,List<Solution>> entry=iterator.next();    if (index == 0) {      return entry;    } else {      index--;    }  }  throw new NoSuchElementException();}  }
class C{  public SimpleDate(java.sql.Time time){  this(time,TIME);}  }
class C{  public String[] convertTypeNamesToSigs(char[][] typeNames){  if (typeNames == null)   return CharOperation.NO_STRINGS;  int n=typeNames.length;  if (n == 0)   return CharOperation.NO_STRINGS;  String[] typeSigs=new String[n];  for (int i=0; i < n; ++i) {    char[] typeSig=Signature.createCharArrayTypeSignature(typeNames[i],false);    StringBuffer simpleTypeSig=null;    int start=0;    int dot=-1;    int length=typeSig.length;    for (int j=0; j < length; j++) {switch (typeSig[j]) {case Signature.C_UNRESOLVED:        if (simpleTypeSig != null)         simpleTypeSig.append(typeSig,start,j - start);      start=j;    break;case Signature.C_DOT:  dot=j;break;case Signature.C_GENERIC_START:int matchingEnd=findMatchingGenericEnd(typeSig,j + 1);if (matchingEnd > 0 && matchingEnd + 1 < length && typeSig[matchingEnd + 1] == Signature.C_DOT) {if (simpleTypeSig == null) simpleTypeSig=new StringBuffer().append(typeSig,0,start);simpleTypeSig.append(Signature.C_UNRESOLVED);start=j=matchingEnd + 2;break;}case Signature.C_NAME_END:if (dot > start) {if (simpleTypeSig == null) simpleTypeSig=new StringBuffer().append(typeSig,0,start);simpleTypeSig.append(Signature.C_UNRESOLVED);simpleTypeSig.append(typeSig,dot + 1,j - dot - 1);start=j;}break;}}if (simpleTypeSig == null) {typeSigs[i]=new String(typeSig);} else {simpleTypeSig.append(typeSig,start,length - start);typeSigs[i]=simpleTypeSig.toString();}}return typeSigs;}  }
class C{  public static long parseLongBase10(final CharSequence str){  return parseLongBase10(str,0,str.length());}  }
class C{  public void testIsValidUtf8_3Bytes() throws UnsupportedEncodingException {  IsValidUtf8TestUtil.testBytes(3,IsValidUtf8TestUtil.EXPECTED_THREE_BYTE_ROUNDTRIPPABLE_COUNT);}  }
class C{  final public void halted(){  if (halt) {    throw new RuntimeException(firstCause.get());  }}  }
class C{  @Override public void onMessageReceived(String from,Bundle data){  JSONObject jsonObject=new JSONObject();  final Set<String> keys=data.keySet();  for (  String key : keys) {    try {      jsonObject.put(key,data.getString(key));    } catch (    JSONException e) {      e.printStackTrace();    }  }  Log.d(TAG,"Sending JSON:" + jsonObject.toString());  sendNotification(jsonObject);}  }
class C{  public PaddedBufferedBlockCipher(BlockCipher cipher){  this(cipher,new PKCS7Padding());}  }
class C{  @Override public String basePath(){  return "/wm/firewall";}  }
class C{  public h2 addElement(String element){  addElementToRegistry(element);  return (this);}  }
class C{  public static RobotParser createEager(final RobotProjectHolder projectHolder){  RobotParserConfig cfg=new RobotParserConfig();  cfg.setEagerImport(true);  return create(projectHolder,cfg);}  }
class C{  private void state2() throws IOException {  int[] selectionIds=readList(new File(filePrefix + "sel"));  int[] archivedIds=readList(new File(filePrefix + "arc"));  int[] variationIds=new int[lambda];  if (selectionIds.length != mu) {    throw new IOException("invalid selection length");  }  updatePopulation(archivedIds);  clearFile(new File(filePrefix + "sel"));  clearFile(new File(filePrefix + "arc"));  List<Solution> offspring=new ArrayList<Solution>();  for (int i=0; i < mu; i+=variation.getArity()) {    Solution[] parents=new Solution[variation.getArity()];    for (int j=0; j < variation.getArity(); j++) {      parents[j]=solutions.get(selectionIds[i + j]);    }    offspring.addAll(Arrays.asList(variation.evolve(parents)));  }  if (offspring.size() != lambda) {    throw new IOException("invalid variation length");  }  evaluateAll(offspring);  for (int i=0; i < lambda; i++) {    variationIds[i]=addToPopulation(offspring.get(i));  }  writePopulation(new File(filePrefix + "var"),variationIds);}  }
class C{  public void checkAllExcludingMetaData(){  getRoot().clear(Port.CLEAR_METADATA | Port.CLEAR_SIMPLE_ERRORS);  if (isEnabled()) {    checkOperator();    propagateDirtyness();  }  updateExecutionOrder();}  }
class C{  public Script in(String name,Object value){  return in(name,value,null);}  }
class C{  public void testImbalancedMultivariateMIforRandomVariablesFromFile() throws Exception {  ArrayFileReader afr=new ArrayFileReader("demos/data/4randomCols-1.txt");  double[][] data=afr.getDouble2DMatrix();  int[] kNNs={1,2,3,4,5,6,10,15};  double[] expectedFromMILCA={0.02473475,0.00404451,-0.00454679,-0.00737512,-0.00464896,-0.00610772,-0.00881741,-0.01306668};  System.out.println("Kraskov comparison 4 - multivariate random data 2 (1 var to 3 vars)");  checkMIForGivenData(MatrixUtils.selectColumns(data,new int[]{0}),MatrixUtils.selectColumns(data,new int[]{1,2,3}),kNNs,expectedFromMILCA);}  }
class C{  public static WriterThread create(Database database,int writeDelay){  try {    WriterThread writer=new WriterThread(database,writeDelay);    writer.thread=new Thread(writer,"H2 Log Writer " + database.getShortName());    Driver.setThreadContextClassLoader(writer.thread);    writer.thread.setDaemon(true);    return writer;  } catch (  AccessControlException e) {    return null;  }}  }
class C{  public Object methodException(Class claz,String method,Exception e) throws Exception {  if (exceptionSwitch && method.equals("throwException")) {    return "handler";  }  throw e;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:21.453 -0500",hash_original_method="8ECFF7D6DBED10855DA2C653047584D7",hash_generated_method="026A77FBF5B5886FDF2CB0009853C72D") public boolean commitCorrection(CorrectionInfo correctionInfo){  return false;}  }
class C{  public void cancel(){  canceled=true;  if (engine != null)   engine.cancel();}  }
class C{  public void body(String namespace,String name,String text) throws Exception {}  }
class C{  public AccumuloQueryRuleset(final RdfCloudTripleStoreConfiguration conf) throws IOException, QueryRulesetException {  super(conf);  ryaContext=RyaTripleContext.getInstance(conf);  for (  final CopyRule rule : rules) {    final StatementPattern sp=rule.getStatement();    final Map.Entry<TABLE_LAYOUT,ByteRange> entry=getRange(sp);    final TABLE_LAYOUT layout=entry.getKey();    final ByteRange byteRange=entry.getValue();    final Range range=new Range(new Text(byteRange.getStart()),new Text(byteRange.getEnd()));    if (!tableRanges.containsKey(layout)) {      tableRanges.put(layout,new LinkedList<Range>());    }    tableRanges.get(layout).add(range);  }}  }
class C{  public void multiply(Complex multiplier){  float inphase=multiplyInphase(inphase(),quadrature(),multiplier.inphase(),multiplier.quadrature());  float quadrature=multiplyQuadrature(inphase(),quadrature(),multiplier.inphase(),multiplier.quadrature());  mLeft=inphase;  mRight=quadrature;}  }
class C{  @Override public void onTokenRefresh(){  SettingsMy.setTokenSentToServer(false);  Intent intent=new Intent(this,MyRegistrationIntentService.class);  startService(intent);}  }
class C{  BoxLayout(Container target,int axis,PrintStream dbg){  this(target,axis);  this.dbg=dbg;}  }
class C{  public HadoopIgfsInputStream(HadoopIgfsStreamDelegate delegate,long limit,int bufSize,Log log,IgfsLogger clientLog,long logStreamId){  assert limit >= 0;  this.delegate=delegate;  this.limit=limit;  this.log=log;  this.clientLog=clientLog;  this.logStreamId=logStreamId;  bufHalfSize=Math.max(bufSize,MIN_BUF_SIZE);  lastTs=System.nanoTime();  delegate.hadoop().addEventListener(delegate,this);}  }
class C{  public void checkAndHandleFirstVisibleCellChange(){  if (mCurrentFirstVisibleItem != mPreviousFirstVisibleItem) {    if (mCellIsMobile && mMobileItemId != INVALID_ID) {      updateNeighborViewsForID(mMobileItemId);      handleCellSwitch();    }  }}  }
class C{  private Util(){}  }
class C{  public String doubleMetaphone(String value){  return doubleMetaphone(value,false);}  }
class C{  static Object[] toArray(Iterable<?> iterable){  return castOrCopyToCollection(iterable).toArray();}  }
class C{  @Override protected EClass eStaticClass(){  return EipPackage.Literals.ADAPTER;}  }
class C{  static private void loadPropertiesJar(URL resource,String path){  JarURLConnection jarConn;  JarFile jar=null;  try {    jarConn=(JarURLConnection)resource.openConnection();    jar=jarConn.getJarFile();    Enumeration<JarEntry> e=jar.entries();    while (e.hasMoreElements()) {      JarEntry entry=e.nextElement();      if (entry.getName().startsWith(path + "/" + PROPERTIES_PREFIX) && entry.getName().endsWith(PROPERTIES_SUFFIX)) {        Properties props=new Properties();        props.load(jar.getInputStream(entry));        definitions.add(loadDefinition(props));      }    }  } catch (  IOException e) {    log.log(Level.SEVERE,"loadPropertiesJar(): Error loading definition {0}",resource);    log.log(Level.SEVERE,"loadPropertiesJar(): Error loading definition...",e);  } finally {    try {      if (jar != null) {        jar.close();      }    } catch (    IOException e) {    }  }}  }
class C{  public static String encodeBytes(byte[] source,int off,int len){  String encoded=null;  try {    encoded=encodeBytes(source,off,len,NO_OPTIONS);  } catch (  java.io.IOException ex) {    assert false : ex.getMessage();  }  assert encoded != null;  return encoded;}  }
class C{  private boolean pathMatch(URL realmUrl,URL returnToUrl){  String realmPath=realmUrl.getPath();  String returnToPath=returnToUrl.getPath();  if (!realmPath.endsWith("/"))   realmPath+="/";  if (!returnToPath.endsWith("/"))   returnToPath+="/";  return returnToPath.startsWith(realmPath);}  }
class C{  public static void assertEquals(final Object[] a,final Object[] b){  if (equals(a,b)) {    return;  }  final String msg="Expected: " + Arrays.toString(a) + " Actual:"+ Arrays.toString(b);  Assert.fail(msg);}  }
class C{  public CheckedInputStream(InputStream in,Checksum cksum){  super(in);  this.cksum=cksum;}  }
class C{  protected void flushChangeRecords() throws IOException {  if (!initialStyles) {    writeInitialStyles();    initialStyles=true;  }  writeChangeRecord();  outstandingChanges=false;}  }
class C{  @Override public boolean add(final T entry){  final Element<T> element=new Element<T>(entry);  element.next=null;  if (head == null) {    if (VM.VerifyAssertions)     VM._assert(tail == null);    head=element;    element.prev=null;  } else {    tail.next=element;    element.prev=tail;  }  tail=element;  count++;  return true;}  }
class C{  public static final String createMsg(ListResourceBundle fResourceBundle,String msgKey,Object args[]){  String fmsg=null;  boolean throwex=false;  String msg=null;  if (msgKey != null)   msg=fResourceBundle.getString(msgKey);  if (msg == null) {    msg=fResourceBundle.getString(BAD_CODE);    throwex=true;  }  if (args != null) {    try {      int n=args.length;      for (int i=0; i < n; i++) {        if (null == args[i])         args[i]="";      }      fmsg=java.text.MessageFormat.format(msg,args);    } catch (    Exception e) {      fmsg=fResourceBundle.getString(FORMAT_FAILED);      fmsg+=" " + msg;    }  } else   fmsg=msg;  if (throwex) {    throw new RuntimeException(fmsg);  }  return fmsg;}  }
class C{  public boolean handleKeyEventIfNecessary(KeyEvent event){  if (!isAccessibilityEnabled()) {    mAccessibilityScriptInjected=false;    toggleFallbackAccessibilityInjector(false);    return false;  }  if (mAccessibilityScriptInjected) {    if (event.getAction() == KeyEvent.ACTION_UP) {      mWebViewClassic.sendBatchableInputMessage(EventHub.KEY_UP,0,0,event);    } else     if (event.getAction() == KeyEvent.ACTION_DOWN) {      mWebViewClassic.sendBatchableInputMessage(EventHub.KEY_DOWN,0,0,event);    } else {      return false;    }    return true;  }  if (mAccessibilityInjectorFallback != null) {    return mAccessibilityInjectorFallback.onKeyEvent(event);  }  return false;}  }
class C{  protected boolean[] canHandleZeroTraining(boolean nominalPredictor,boolean numericPredictor,boolean stringPredictor,boolean datePredictor,boolean relationalPredictor,boolean multiInstance,int classType){  print("handle zero training instances");  printAttributeSummary(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType);  print("...");  ArrayList<String> accepts=new ArrayList<String>();  accepts.add("train");  accepts.add("value");  int numTrain=0, numClasses=2, missingLevel=0;  boolean predictorMissing=false, classMissing=false;  return runBasicTest(nominalPredictor,numericPredictor,stringPredictor,datePredictor,relationalPredictor,multiInstance,classType,missingLevel,predictorMissing,classMissing,numTrain,numClasses,accepts);}  }
class C{  @HLEFunction(nid=0xA62C6F57,version=150,checkInsideInterrupt=true) public int sceNetAdhocTerm(){  isInitialized=false;  return 0;}  }
class C{  public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ "]";}  }
class C{  public void stop(BundleContext context) throws Exception {  super.stop(context);  plugin=null;}  }
class C{  private <LP extends ViewGroup.LayoutParams>Chopstick isInLayout(Class<LP> layoutParamsType,boolean useExistingLayoutParams,int width,int height){  LP lp=useExistingLayoutParams ? useExistingLayoutParams(layoutParamsType) : useNewLayoutParams(layoutParamsType,width,height);  if (RelativeLayout.LayoutParams.class.equals(layoutParamsType)) {    return new RelativeLayoutStick((RelativeLayout.LayoutParams)lp,mView);  } else   if (LinearLayout.LayoutParams.class.equals(layoutParamsType)) {    return new LinearLayoutStick((LinearLayout.LayoutParams)lp,mView);  }  throw new UnsupportedOperationException("This Layout is not currently supported. A PR is welcome!");}  }
class C{  private static void restoreAttributes(RestorableSupport restorableSupport,RestorableSupport.StateObject context,AnnotationAttributes dest){  Map<String,String> legacySupport=new HashMap<String,String>();  legacySupport.put("render.Annotation.RepeatNone",AVKey.REPEAT_NONE);  legacySupport.put("render.Annotation.RepeatX",AVKey.REPEAT_X);  legacySupport.put("render.Annotation.RepeatY",AVKey.REPEAT_Y);  legacySupport.put("render.Annotation.RepeatXY",AVKey.REPEAT_XY);  legacySupport.put("render.Annotation.SizeFixed",AVKey.SIZE_FIXED);  legacySupport.put("render.Annotation.SizeFitText",AVKey.SIZE_FIT_TEXT);  legacySupport.put("Render.FrameFactory.ShapeRectangle",AVKey.SHAPE_RECTANGLE);  legacySupport.put("Render.FrameFactory.ShapeEllipse",AVKey.SHAPE_ELLIPSE);  legacySupport.put("Render.FrameFactory.ShapeNone",AVKey.SHAPE_NONE);  legacySupport.put("Render.FrameFactory.LeaderTriangle",AVKey.SHAPE_TRIANGLE);  legacySupport.put("Render.FrameFactory.LeaderNone",AVKey.SHAPE_NONE);  if (restorableSupport == null || dest == null)   throw new IllegalArgumentException();  String frameShapeState=restorableSupport.getStateValueAsString(context,"frameShape");  if (frameShapeState != null) {    String updatedValue=legacySupport.get(frameShapeState);    if (updatedValue != null)     frameShapeState=updatedValue;    dest.setFrameShape(frameShapeState);  }  Boolean highlightedState=restorableSupport.getStateValueAsBoolean(context,"highlighted");  if (highlightedState != null)   dest.setHighlighted(highlightedState);  Double highlightScaleState=restorableSupport.getStateValueAsDouble(context,"highlightScale");  if (highlightScaleState != null)   dest.setHighlightScale(highlightScaleState);  RestorableSupport.StateObject sizeStateObj=restorableSupport.getStateObject(context,"size");  if (sizeStateObj != null) {    Double widthState=restorableSupport.getStateValueAsDouble(sizeStateObj,"width");    Double heightState=restorableSupport.getStateValueAsDouble(sizeStateObj,"height");    if (widthState != null && heightState != null)     dest.setSize(new Dimension(widthState.intValue(),heightState.intValue()));  }  Double scaleState=restorableSupport.getStateValueAsDouble(context,"scale");  if (scaleState != null)   dest.setScale(scaleState);  Double opacityState=restorableSupport.getStateValueAsDouble(context,"opacity");  if (opacityState != null)   dest.setOpacity(opacityState);  String leaderState=restorableSupport.getStateValueAsString(context,"leader");  if (leaderState != null) {    String updatedValue=legacySupport.get(leaderState);    if (updatedValue != null)     leaderState=updatedValue;    dest.setLeader(leaderState);  }  Integer leaderGapWidthState=restorableSupport.getStateValueAsInteger(context,"leaderGapWidth");  if (leaderGapWidthState != null)   dest.setLeaderGapWidth(leaderGapWidthState);  Integer cornerRadiusState=restorableSupport.getStateValueAsInteger(context,"cornerRadius");  if (cornerRadiusState != null)   dest.setCornerRadius(cornerRadiusState);  String adjustWidthToTextState=restorableSupport.getStateValueAsString(context,"adjustWidthToText");  if (adjustWidthToTextState != null) {    String updatedValue=legacySupport.get(adjustWidthToTextState);    if (updatedValue != null)     adjustWidthToTextState=updatedValue;    dest.setAdjustWidthToText(adjustWidthToTextState);  }  RestorableSupport.StateObject drawOffsetStateObj=restorableSupport.getStateObject(context,"drawOffset");  if (drawOffsetStateObj != null) {    Double xState=restorableSupport.getStateValueAsDouble(drawOffsetStateObj,"x");    Double yState=restorableSupport.getStateValueAsDouble(drawOffsetStateObj,"y");    if (xState != null && yState != null)     dest.setDrawOffset(new Point(xState.intValue(),yState.intValue()));  }  RestorableSupport.StateObject insetsStateObj=restorableSupport.getStateObject(context,"insets");  if (insetsStateObj != null) {    Integer topState=restorableSupport.getStateValueAsInteger(insetsStateObj,"top");    Integer leftState=restorableSupport.getStateValueAsInteger(insetsStateObj,"left");    Integer bottomState=restorableSupport.getStateValueAsInteger(insetsStateObj,"bottom");    Integer rightState=restorableSupport.getStateValueAsInteger(insetsStateObj,"right");    if (topState != null && leftState != null && bottomState != null && rightState != null)     dest.setInsets(new Insets(topState,leftState,bottomState,rightState));  }  Double borderWidthState=restorableSupport.getStateValueAsDouble(context,"borderWidth");  if (borderWidthState != null)   dest.setBorderWidth(borderWidthState);  Integer borderStippleFactorState=restorableSupport.getStateValueAsInteger(context,"borderStippleFactor");  if (borderStippleFactorState != null)   dest.setBorderStippleFactor(borderStippleFactorState);  Integer borderStipplePatternState=restorableSupport.getStateValueAsInteger(context,"borderStipplePattern");  if (borderStipplePatternState != null)   dest.setBorderStipplePattern(borderStipplePatternState.shortValue());  Integer antiAliasHintState=restorableSupport.getStateValueAsInteger(context,"antiAliasHint");  if (antiAliasHintState != null)   dest.setAntiAliasHint(antiAliasHintState);  Boolean visibleState=restorableSupport.getStateValueAsBoolean(context,"visible");  if (visibleState != null)   dest.setVisible(visibleState);  RestorableSupport.StateObject fontStateObj=restorableSupport.getStateObject(context,"font");  if (fontStateObj != null) {    String nameState=restorableSupport.getStateValueAsString(fontStateObj,"name");    Integer styleState=restorableSupport.getStateValueAsInteger(fontStateObj,"style");    Integer sizeState=restorableSupport.getStateValueAsInteger(fontStateObj,"size");    if (nameState != null && styleState != null && sizeState != null)     dest.setFont(new Font(nameState,styleState,sizeState));  }  String textAlignState=restorableSupport.getStateValueAsString(context,"textAlign");  if (textAlignState != null) {    Integer textAlignInt=WWUtil.makeInteger(textAlignState);    if (textAlignInt != null) {      dest.setTextAlign(textAlignInt == 0 ? AVKey.LEFT : (textAlignInt == 1 ? AVKey.CENTER : AVKey.RIGHT));    } else {      dest.setTextAlign(textAlignState);    }  }  String textColorState=restorableSupport.getStateValueAsString(context,"textColor");  if (textColorState != null) {    Color color=RestorableSupport.decodeColor(textColorState);    if (color != null)     dest.setTextColor(color);  }  String backgroundColorState=restorableSupport.getStateValueAsString(context,"backgroundColor");  if (backgroundColorState != null) {    Color color=RestorableSupport.decodeColor(backgroundColorState);    if (color != null)     dest.setBackgroundColor(color);  }  String borderColorState=restorableSupport.getStateValueAsString(context,"borderColor");  if (borderColorState != null) {    Color color=RestorableSupport.decodeColor(borderColorState);    if (color != null)     dest.setBorderColor(color);  }  String imagePathState=restorableSupport.getStateValueAsString(context,"imagePath");  if (imagePathState != null)   dest.setImageSource(imagePathState);  Double imageScaleState=restorableSupport.getStateValueAsDouble(context,"imageScale");  if (imageScaleState != null)   dest.setImageScale(imageScaleState);  RestorableSupport.StateObject imageOffsetStateObj=restorableSupport.getStateObject(context,"imageOffset");  if (imageOffsetStateObj != null) {    Double xState=restorableSupport.getStateValueAsDouble(imageOffsetStateObj,"x");    Double yState=restorableSupport.getStateValueAsDouble(imageOffsetStateObj,"y");    if (xState != null && yState != null)     dest.setImageOffset(new Point(xState.intValue(),yState.intValue()));  }  Double imageOpacityState=restorableSupport.getStateValueAsDouble(context,"imageOpacity");  if (imageOpacityState != null)   dest.setImageOpacity(imageOpacityState);  String imageRepeatState=restorableSupport.getStateValueAsString(context,"imageRepeat");  if (imageRepeatState != null) {    String updatedValue=legacySupport.get(imageRepeatState);    if (updatedValue != null)     imageRepeatState=updatedValue;    dest.setImageRepeat(imageRepeatState);  }  Double distanceMinScaleState=restorableSupport.getStateValueAsDouble(context,"distanceMinScale");  if (distanceMinScaleState != null)   dest.setDistanceMinScale(distanceMinScaleState);  Double distanceMaxScaleState=restorableSupport.getStateValueAsDouble(context,"distanceMaxScale");  if (distanceMaxScaleState != null)   dest.setDistanceMaxScale(distanceMaxScaleState);  Double distanceMinOpacityState=restorableSupport.getStateValueAsDouble(context,"distanceMinOpacity");  if (distanceMinOpacityState != null)   dest.setDistanceMinOpacity(distanceMinOpacityState);  String effectState=restorableSupport.getStateValueAsString(context,"effect");  if (effectState != null)   dest.setEffect(effectState);}  }
class C{  public static void cleanupEpisodes(@NonNull Context context,int stateFilter){  Intent intent=new Intent(context,BackgroundOperations.class);  intent.setAction(ACTION_CLEANUP_EPISODES);  intent.putExtra(EXTRA_EPISODE_STATE,stateFilter);  context.startService(intent);}  }
class C{  public LogicalOrExpressionItemProvider(AdapterFactory adapterFactory){  super(adapterFactory);}  }
class C{  public final void deOp(String channel,String nick){  this.setMode(channel,"-o " + nick);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.177 -0400",hash_original_method="FC7B978EE0A26C67A4BDA439F3CC27AC",hash_generated_method="4C11E730871E3160CA9C54C34573C65F") public static byte[] toByteArray(URI uri) throws IOException {  return IOUtils.toByteArray(uri.toURL());}  }
class C{  public Response onCommand(SMTPSession session,Request request){  return doRSET(session,request.getArgument());}  }
class C{  private ObjectName cloneObjectName(ObjectName name){  if (name != null) {    return ObjectName.getInstance(name);  }  return name;}  }
class C{  private Promise<OwnIdentity> fetchOwnIdentity(){  return Promise.success(new OwnIdentity(ownKeys.getKeyGroupId(),ownKeys.getIdentityKey()));}  }
class C{  public JSONArray optJSONArray(int index){  Object o=this.opt(index);  return o instanceof JSONArray ? (JSONArray)o : null;}  }
class C{  public GenericFeed retrieveNextPage(Link next) throws AppsForYourDomainException, MalformedURLException, IOException, ServiceException {  return service.getFeed(new URL(next.getHref()),GenericFeed.class);}  }
class C{  @Override public ViewHolder onCreateViewHolder(ViewGroup viewGroup,int i){  View view=LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.list_item,viewGroup,false);  ViewHolder viewHolder=new ViewHolder(view);  return viewHolder;}  }
class C{  public BinaryProperty(String url,T type){  setUrl(url,type);}  }
class C{  public IntIterator columnRows(int col,boolean reverse){  return new ColumnRowIterator(rows(reverse),col);}  }
class C{  public static <O>Map<String,Attribute<O,Comparable>> generateAttributesForPojo(Class<O> pojoClass){  Map<String,Attribute<O,Comparable>> generatedAttributes=new LinkedHashMap<String,Attribute<O,Comparable>>();  for (  Field field : pojoClass.getDeclaredFields()) {    if (Comparable.class.isAssignableFrom(field.getType())) {      @SuppressWarnings({"unchecked"}) Class<Comparable> fieldType=(Class<Comparable>)field.getType();      generatedAttributes.put(field.getName(),ReflectiveAttribute.forField(pojoClass,fieldType,field.getName()));    }  }  return generatedAttributes;}  }
class C{  public void addBannedUsername(final String username){  addBannedUsername(username,null);}  }
class C{  private List obtenerListaEntidades(){  try {    ServicioEntidades oServicio=LocalizadorServicios.getServicioEntidades();    List oLista=oServicio.obtenerEntidades();    return getEntidades(oLista);  } catch (  Exception e) {    return new ArrayList();  }}  }
class C{  private String commandGet(String[] parameters){  if (parameters.length == 1) {    String name=parameters[0].trim();    AddressbookEntry entry=get(name);    if (entry == null) {      return "No entry for '" + name + "'.";    }    return "'" + name + "' has categories "+ categoriesToString(entry.getCategories())+ ".";  } else {    return "Get: Invalid number of parameters.";  }}  }
class C{  public final void propertyChange(final PropertyChangeEvent e){  if (LOG.isDebugEnabled()) {    LOG.debug("enter: propertyChange(" + e + ")");  }  if (!FOCUSED_WINDOW_PROPERTY.equals(e.getPropertyName())) {    throw new IllegalArgumentException("unknown property name: " + e.getPropertyName());  }synchronized (myLock) {    final Window window=(Window)e.getNewValue();    if (window == null || ApplicationManager.getApplication().isDisposed()) {      return;    }    if (!myWindow2Info.containsKey(window)) {      myWindow2Info.put(window,new WindowInfo(window,true));    }    myFocusedWindow=window;    final Project project=CommonDataKeys.PROJECT.getData(DataManager.getInstance().getDataContext(myFocusedWindow));    for (Iterator i=myFocusedWindows.iterator(); i.hasNext(); ) {      final Window w=(Window)i.next();      final DataContext dataContext=DataManager.getInstance().getDataContext(w);      if (project == CommonDataKeys.PROJECT.getData(dataContext)) {        i.remove();      }    }    myFocusedWindows.add(myFocusedWindow);    final IdeFrameImpl frame;    if (window instanceof IdeFrameImpl) {      frame=(IdeFrameImpl)window;    } else {      frame=(IdeFrameImpl)SwingUtilities.getAncestorOfClass(IdeFrameImpl.class,window);    }    if (frame != null) {      JOptionPane.setRootFrame(frame);    }  }  if (LOG.isDebugEnabled()) {    LOG.debug("exit: propertyChange()");  }}  }
class C{  public EnumValueType clone(){  EnumValueType result=new EnumValueType();  result.Value=Value;  result.DisplayName=DisplayName;  result.Description=Description;  return result;}  }
class C{  protected void sendFree(int option) throws IOException, SQLException {  final XdrOutputStream xdrOut=getXdrOut();  xdrOut.writeInt(WireProtocolConstants.op_free_statement);  xdrOut.writeInt(getHandle());  xdrOut.writeInt(option);}  }
class C{  public @Test final void testCreation(){  Role role=new Role(TEST_ROLE,TEST_DESCR);  assertThat(role.getName()).isEqualTo(TEST_ROLE);  Assert.assertEquals(TEST_DESCR,role.getDescription());  Role role2=new Role(TEST_ROLE2);  Assert.assertEquals(TEST_ROLE2,role2.getName());}  }
class C{  public Point screenToChartCoord(int x,int y){  if (currentTransform != null) {    Transform inverse=currentTransform.getInverse();    float[] pt=inverse.transformPoint(new float[]{x,y,0});    x=(int)pt[0];    y=(int)pt[1];  }  return new Point(x - getAbsoluteX(),y - getAbsoluteY());}  }
class C{  public synchronized void updateServerBucketProfile(BucketProfile p){  this.localProfile=p;}  }
class C{  private void updateUnmanagedBackendVolumesInParent(){  if (!getUnmanagedBackendVolumes().isEmpty()) {    StringSet bvols=new StringSet();    for (    UnManagedVolume backendVol : unmanagedBackendVolumes) {      bvols.add(backendVol.getNativeGuid());      StringSet parentVol=new StringSet();      parentVol.add(_unmanagedVirtualVolume.getNativeGuid());      backendVol.putVolumeInfo(SupportedVolumeInformation.VPLEX_PARENT_VOLUME.name(),parentVol);      if (isDistributed()) {        VPlexStorageVolumeInfo storageVolume=getBackendVolumeWwnToInfoMap().get(backendVol.getWwn());        if (null != storageVolume) {          String clusterId=getClusterLocationForStorageVolume(storageVolume);          if (null != clusterId && !clusterId.isEmpty()) {            _logger.info("setting VPLEX_BACKEND_CLUSTER_ID: " + clusterId);            StringSet clusterIds=new StringSet();            clusterIds.add(clusterId);            backendVol.putVolumeInfo(SupportedVolumeInformation.VPLEX_BACKEND_CLUSTER_ID.name(),clusterIds);          }        }      }      _dbClient.updateObject(backendVol);    }    if (bvols != null && !bvols.isEmpty()) {      _logger.info("setting VPLEX_BACKEND_VOLUMES: " + unmanagedBackendVolumes);      _unmanagedVirtualVolume.putVolumeInfo(SupportedVolumeInformation.VPLEX_BACKEND_VOLUMES.name(),bvols);      _unmanagedVirtualVolume.setLabel(getFriendlyLabel());    }  }}  }
class C{  private Base64(){}  }
class C{  public DataSource<Void> prefetchToBitmapCache(ImageRequest imageRequest,Object callerContext){  if (!mIsPrefetchEnabledSupplier.get()) {    return DataSources.immediateFailedDataSource(PREFETCH_EXCEPTION);  }  try {    Producer<Void> producerSequence=mProducerSequenceFactory.getDecodedImagePrefetchProducerSequence(imageRequest);    return submitPrefetchRequest(producerSequence,imageRequest,ImageRequest.RequestLevel.FULL_FETCH,callerContext);  } catch (  Exception exception) {    return DataSources.immediateFailedDataSource(exception);  }}  }
class C{  public void addLabelOffset(int hash,int offset,int cid){  int bucketIndex=indexFor(hash,this.capacity);  addEntry(offset,cid,hash,bucketIndex);}  }
class C{  public SigningFailsInServerProxy(){  requestFileName="getstate.query";  responseFile="getstate.answer";}  }
class C{  public static WindowActionEvent createWindowClosedEvent(){  return new WindowActionEvent(null,WindowAction.CLOSED);}  }
class C{  public Point center(){  return rect.center;}  }
class C{  public void run(){  try {    accept();  } catch (  CancelException e) {  } finally {    try {      if (this.serverSock != null) {        this.serverSock.close();      }    } catch (    IOException ignore) {    }    if (this.stats != null) {      this.stats.close();    }  }}  }
class C{  public Cache(int pref_size,int size){  cache_size=size;  prefix_size=pref_size;  hashes=new long[cache_size];  hashes_idx=new long[cache_size];  encodings=new byte[cache_size][];  cache=new Object[cache_size];}  }
class C{  @Interruptible public static void init(){  nextLockIndex=1;  locks=new Lock[LOCK_SPINE_SIZE][];  for (int i=0; i < INITIAL_CHUNKS; i++) {    chunksAllocated++;    locks[i]=new Lock[LOCK_CHUNK_SIZE];  }  if (VM.VerifyAssertions) {    VM._assert(((MAX_LOCKS - 1) <= TL_LOCK_ID_MASK.rshl(TL_LOCK_ID_SHIFT).toInt()) || TL_LOCK_ID_MASK.EQ(Word.fromIntSignExtend(-1)));  }}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();  if (getUIClassID().equals(uiClassID)) {    updateUI();  }}  }
class C{  protected String doIt() throws Exception {  MWFActivity activity=new MWFActivity(getCtx(),p_AD_WF_Activity_ID,get_TrxName());  log.info("doIt - " + activity);  MUser user=MUser.get(getCtx(),getAD_User_ID());  if (p_IsAbort) {    String msg=user.getName() + ": Abort";    activity.setTextMsg(msg);    activity.setAD_User_ID(getAD_User_ID());    activity.setProcessed(true);    activity.setWFState(StateEngine.STATE_Aborted);    return msg;  }  String msg=null;  if (p_AD_User_ID != 0 && activity.getAD_User_ID() != p_AD_User_ID) {    MUser from=MUser.get(getCtx(),activity.getAD_User_ID());    MUser to=MUser.get(getCtx(),p_AD_User_ID);    msg=user.getName() + ": " + from.getName()+ " -> "+ to.getName();    activity.setTextMsg(msg);    activity.setAD_User_ID(p_AD_User_ID);  }  if (p_AD_WF_Responsible_ID != 0 && activity.getAD_WF_Responsible_ID() != p_AD_WF_Responsible_ID) {    MWFResponsible from=MWFResponsible.get(getCtx(),activity.getAD_WF_Responsible_ID());    MWFResponsible to=MWFResponsible.get(getCtx(),p_AD_WF_Responsible_ID);    String msg1=user.getName() + ": " + from.getName()+ " -> "+ to.getName();    activity.setTextMsg(msg1);    activity.setAD_WF_Responsible_ID(p_AD_WF_Responsible_ID);    if (msg == null)     msg=msg1; else     msg+=" - " + msg1;  }  activity.saveEx();  return msg;}  }
class C{  protected void forward(QueuedInputEvent q){  onDeliverToNext(q);}  }
class C{  public static TermsQueryBuilder termsQuery(String name,float... values){  return new TermsQueryBuilder(name,values);}  }
class C{  public T next() throws IOException {  if (firstRead) {    int firstChar=reader.read();    if (firstChar == -1) {      return null;    } else {      reader.unread(firstChar);      firstRead=false;    }  }  if (streamParser.hasNext()) {    try {      return GSON.fromJson(streamParser.next(),messageClass);    } catch (    JsonIOException e) {      throw new IOException(e);    }catch (    JsonParseException ignore) {    }  }  return null;}  }
class C{  private void handleUnknownException(StreamOp op,final Throwable cause){  AsyncLogWriter oldWriter=null;  boolean statusChanged=false;synchronized (this) {    if (StreamStatus.INITIALIZED == status) {      oldWriter=setStreamStatus(StreamStatus.FAILED,StreamStatus.INITIALIZED,null,null,cause);      statusChanged=true;    }  }  if (statusChanged) {    Abortables.asyncAbort(oldWriter,false);    logger.error("Failed to write data into stream {} : ",name,cause);    scheduleTryAcquireOnce(0L);  }  op.fail(cause);}  }
class C{  public void sortInstances(int columnIndex,boolean ascending){  if ((columnIndex > 0) && (columnIndex < getColumnCount())) {    addUndoPoint();    m_Data.stableSort(columnIndex - 1);    if (!ascending) {      Instances reversedData=new Instances(m_Data,m_Data.numInstances());      int i=m_Data.numInstances();      while (i > 0) {        i--;        int equalCount=1;        while ((i > 0) && (m_Data.instance(i).value(columnIndex - 1) == m_Data.instance(i - 1).value(columnIndex - 1))) {          equalCount++;          i--;        }        int j=0;        while (j < equalCount) {          reversedData.add(m_Data.instance(i + j));          j++;        }      }      m_Data=reversedData;    }    notifyListener(new TableModelEvent(this));  }}  }
class C{  public static String toStringInSortedLines(Collection<?> c){  if (c.isEmpty())   return "";  return join(Globals.lineSep,sort(toStringLines(c))) + Globals.lineSep;}  }
class C{  public boolean unlockIt(){  log.info("unlockIt - " + toString());  setProcessing(false);  return true;}  }
class C{  public static String sqlEscape(String str){  final int len=str.length();  StringBuilder sql=new StringBuilder(len * 2);  for (int i=0; i < len; i++) {    char c=str.charAt(i);switch (c) {case '\u0000':      sql.append('\\').append('0');    break;case '\n':  sql.append('\\').append('n');break;case '\t':sql.append('\\').append('t');break;case '\r':sql.append('\\').append('r');break;case '\u001a':sql.append('\\').append('Z');break;case '\'':sql.append('\\').append('\'');break;case '\"':sql.append('\\').append('"');break;case '\b':sql.append('\\').append('b');break;case '\\':sql.append('\\').append('\\');break;default :sql.append(c);break;}}return sql.toString();}  }
class C{  protected void handleModelChangedEvent(Model model,Object object,int index){  if (model == treeModel) {    if (object instanceof TreeModel.TreeChangedEvent) {      if (((TreeModel.TreeChangedEvent)object).isNodeChanged()) {        updateNodeAndChildren(((TreeModel.TreeChangedEvent)object).getNode());      } else {        updateAllNodes();      }    }  } else   if (model == frequencyModel) {    updateAllNodes();  } else   if (model instanceof SiteModel) {    updateAllNodes();  } else {    throw new RuntimeException("Unknown componentChangedEvent");  }  super.handleModelChangedEvent(model,object,index);}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case N4JSPackage.IDENTIFIER_REF__STRICT_MODE:    setStrictMode(STRICT_MODE_EDEFAULT);  return;case N4JSPackage.IDENTIFIER_REF__ID:setId((IdentifiableElement)null);return;case N4JSPackage.IDENTIFIER_REF__ID_AS_TEXT:setIdAsText(ID_AS_TEXT_EDEFAULT);return;}super.eUnset(featureID);}  }
class C{  public boolean isPermissionGranted(@NonNull String permissionsName){  return ActivityCompat.checkSelfPermission(context,permissionsName) == PackageManager.PERMISSION_GRANTED;}  }
class C{  public static FontData[] textFont(final TextSymbolizer symbolizer){  final Font font=font(symbolizer);  if (font == null)   return null;  final FontData[] tempFD=new FontData[1];  final Expression fontFamilyExpression=font.getFamily().get(0);  final Expression sizeExpression=font.getSize();  if (sizeExpression == null || fontFamilyExpression == null)   return null;  final Double size=sizeExpression.evaluate(null,Double.class);  try {    final String fontFamily=fontFamilyExpression.evaluate(null,String.class);    tempFD[0]=new FontData(fontFamily,size.intValue(),1);  } catch (  final NullPointerException ignore) {    return null;  }  if (tempFD[0] != null)   return tempFD;  return null;}  }
class C{  @Inline public static void shortBulkCopy(short[] src,Offset srcOffset,short[] dst,Offset dstOffset,int bytes){  if (VM.VerifyAssertions)   VM._assert(SHORT_BULK_COPY_SUPPORTED);  if (!Selected.Mutator.get().shortBulkCopy(ObjectReference.fromObject(src),srcOffset,ObjectReference.fromObject(dst),dstOffset,bytes)) {    Memory.aligned16Copy(Magic.objectAsAddress(dst).plus(dstOffset),Magic.objectAsAddress(src).plus(srcOffset),bytes);  }}  }
class C{  public static GrantorInfo peekGrantor(DLockService service,InternalDistributedSystem sys){  return basicOp(-1,service,-1,sys,null,PEEK_OP);}  }
class C{  public boolean hasTriggered(){  return mHasTriggered;}  }
class C{  public final AC align(String side,int... indexes){  UnitValue al=ConstraintParser.parseAlignKeywords(side,true);  if (al == null)   al=ConstraintParser.parseAlignKeywords(side,false);  for (int i=indexes.length - 1; i >= 0; i--) {    int ix=indexes[i];    makeSize(ix);    cList.get(ix).setAlign(al);  }  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:28.172 -0500",hash_original_method="4ACF3BC65F0835BDAED23C3218607CC6",hash_generated_method="AB47D7FD2D522A6C4B52051AE9DD7CB1") public static String dumpAsString(Object obj){  return dumpAsString(obj,false);}  }
class C{  public ExceptionsAttribute(ConstPool cp){  super(cp,tag);  byte[] data=new byte[2];  data[0]=data[1]=0;  this.info=data;}  }
class C{  public final boolean isExact(){  return isEquivalent() && (this.rule & SearchPattern.R_FULL_MATCH) != 0;}  }
class C{  public void error(SourceLocator srcLctr,String msg,Object[] args) throws TransformerException {  error(srcLctr,null,null,msg,args);}  }
class C{  public void addAll(double[] values){  super.addAll(values,0);}  }
class C{  protected ParenExpressionImpl(){  super();}  }
class C{  private static void positionMenu(FinanceService service,Scanner sc) throws IOException, ServiceException {  printPositionMenuHelp();  while (true) {    String requestUrl=baseUrl + PORTFOLIO_FEED_URL_SUFFIX + "/";switch (processPositionMenuCommand(sc.nextLine().toLowerCase())) {case QUERY_FEED:      System.out.print("Enter portfolio ID: ");    portfolioIdProperty=sc.nextLine();  requestUrl+=portfolioIdProperty + POSITION_FEED_URL_SUFFIX;System.out.print("Include returns in query response? (y/n) ");String includeReturns=sc.nextLine();if (includeReturns.toLowerCase().equals("y") || includeReturns.toLowerCase().equals("yes")) {requestUrl+="?returns=true";} else if (includeReturns.toLowerCase().equals("n") || includeReturns.toLowerCase().equals("no")) {requestUrl+="?returns=false";}System.out.print("Inline transactions in feed? (y/n) ");String inlinePositions=sc.nextLine();if (inlinePositions.toLowerCase().equals("y") || inlinePositions.toLowerCase().equals("yes")) {requestUrl+="&transactions=true";} else if (inlinePositions.toLowerCase().equals("n") || inlinePositions.toLowerCase().equals("no")) {requestUrl+="&transactions=false";}queryPositionFeed(service,requestUrl);break;case QUERY_ENTRY:System.out.println("Enter portfolio ID");portfolioIdProperty=sc.nextLine();System.out.println("Enter ticker (<exchange>:<ticker>)");tickerProperty=sc.nextLine();requestUrl+=portfolioIdProperty + POSITION_FEED_URL_SUFFIX + "/"+ tickerProperty;queryPositionEntry(service,requestUrl);break;case BACK:return;case TRANSACTIONS:transactionMenu(service,sc);break;case QUIT:System.exit(0);case HELP:printPositionMenuHelp();break;default :printPositionMenuHelp();}}}  }
class C{  @Override public void write(int b){}  }
class C{  public DTMConfigurationException(String msg){  super(msg);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public b addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public void launchGeneration() throws IOException {  File stringFile=new File(valuesfolder,stringFileName);  stringFileWriter=createIt(stringFile);  stringFileWriter.write(stringfilestart);  stringFileWriter.newLine();  File colorsFile=new File(valuesfolder,colorsFileName);  colorFileWriter=createIt(colorsFile);  colorFileWriter.write(stringfilestart);  colorFileWriter.newLine();  for (int i=0; i < vectors.size(); i++) {    if (i == (vectors.size() - 1)) {      CustomLogger.logError("----------->i == (vectors.size() - 1 is true ");      generateVectorDrawableResult(vectors.get(i),"null",true,i == 0);    } else {      generateVectorDrawableResult(vectors.get(i),vectors.get(i + 1).getFileName(),false,i == 0);    }  }  generateLevelListVectorDrawable();  generateRoundTripVectorDrawable();  stringFileWriter.write(stringfileend);  stringFileWriter.newLine();  stringFileWriter.flush();  stringFileWriter.close();  colorFileWriter.write(stringfileend);  colorFileWriter.newLine();  colorFileWriter.flush();  colorFileWriter.close();  generateJavaFile();}  }
class C{  public void testSpanNearScorerSkipTo1() throws Exception {  SpanNearQuery q=makeQuery();  Weight w=searcher.createNormalizedWeight(q,true);  IndexReaderContext topReaderContext=searcher.getTopReaderContext();  LeafReaderContext leave=topReaderContext.leaves().get(0);  Scorer s=w.scorer(leave);  assertEquals(1,s.iterator().advance(1));}  }
class C{  @Deprecated public void datasource(String name,String defName,ConsolFun consolFun){  datasource(name,defName,consolFun.getVariable());}  }
class C{  private void doDelete(HttpServletRequest request,InstructionalOfferingDetailForm frm) throws Exception {  org.hibernate.Session hibSession=null;  Transaction tx=null;  try {    InstructionalOfferingDAO idao=new InstructionalOfferingDAO();    InstructionalOffering io=idao.get(frm.getInstrOfferingId());    hibSession=idao.getSession();    tx=hibSession.beginTransaction();    io.deleteAllDistributionPreferences(hibSession);    Event.deleteFromEvents(hibSession,io);    Exam.deleteFromExams(hibSession,io);    String className=ApplicationProperty.ExternalActionInstructionalOfferingDelete.value();    if (className != null && className.trim().length() > 0) {      ExternalInstructionalOfferingDeleteAction deleteAction=(ExternalInstructionalOfferingDeleteAction)(Class.forName(className).newInstance());      deleteAction.performExternalInstructionalOfferingDeleteAction(io,hibSession);    }    ChangeLog.addChange(hibSession,sessionContext,io,ChangeLog.Source.OFFERING_DETAIL,ChangeLog.Operation.DELETE,io.getControllingCourseOffering().getSubjectArea(),null);    for (    CourseOffering co : io.getCourseOfferings()) {      co.getSubjectArea().getCourseOfferings().remove(co);      hibSession.delete(co);    }    hibSession.delete(io);    tx.commit();    hibSession.flush();    hibSession.clear();  } catch (  Exception e) {    if (tx != null)     tx.rollback();    Debug.error(e);    throw (e);  }}  }
class C{  public static void overScrollBy(final PullToRefreshBase<?> view,final int deltaX,final int scrollX,final int deltaY,final int scrollY,final boolean isTouchEvent){  overScrollBy(view,deltaX,scrollX,deltaY,scrollY,0,isTouchEvent);}  }
class C{  public boolean hasTrackingScript(){  return hasExtension(GwoTrackingScript.class);}  }
class C{  public int copyTo(WritableFontData wfd){  return this.array.copyTo(wfd.boundOffset(0),wfd.array,this.boundOffset(0),this.length());}  }
class C{  private double sampleEM(Tree tree,NodeRef node,ColourChangeMatrix mm,MetaPopulation mp,DefaultTreeColouring colouring){  double[] forward;  double[] posterior;  int colour;  DefaultBranchColouring history=null;  double logLikelihood=0.0;  if (tree.isRoot(node)) {    _totalIntegratedRate=0.0;    forward=mm.getEquilibrium();    double[] backward=nodePartials[node.getNumber()];    posterior=new double[colourCount];    double max=-1.0;    double min=1.0;    for (int i=0; i < forward.length; i++) {      posterior[i]=forward[i] * backward[i];      max=Math.max(max,posterior[i]);      min=Math.min(min,posterior[i]);    }    if (debugMessages && min < 0.0) {      System.out.println("Aargh, negative probabilities " + min + " "+ max);    }    if (debugMessages && max < 1.0e-200) {      System.out.println("Hmm, very small numbers indeed " + max);    }    colour=MathUtils.randomChoicePDF(posterior);    logLikelihood+=Math.log(forward[colour]);  } else {    int nodeNum=node.getNumber();    double[][] backward=nodePartialsEM[nodeNum];    int bottomInterval=node2Interval[nodeNum];    nodeColoursEM[nodeNum]=new int[backward.length];    colour=getColour(tree.getParent(node));    history=new DefaultBranchColouring(colour,colour);    posterior=new double[colourCount];    for (int relinterval=backward.length - 1; relinterval >= 0; relinterval--) {      int interval=relinterval + bottomInterval;      double childHeight=interval2Height[interval];      double uppertime=interval2Height[interval + 1];      double time=uppertime - childHeight;      double[] mxElts=calculateMatrixElts(interval,node,tree,time,avgN0[interval],avgN1[interval],mm);      forward=matrixEvolve(mxElts,colour);      for (int i=0; i < colourCount; i++) {        posterior[i]=forward[i] * backward[relinterval][i];      }      int childColour=MathUtils.randomChoicePDF(posterior);      nodeColoursEM[nodeNum][relinterval]=childColour;      logLikelihood+=sampleConditionalBranchColouringEM(node,colour,childColour,time,childHeight,mxElts,history);      colour=childColour;    }    colouring.setBranchColouring(node,history);  }  setColour(node,colour);  if (!tree.isExternal(node) && useNodeBias) {    double childTime=tree.getNodeHeight(node);    logLikelihood+=Math.log(mm.getEquilibrium(colour) / mp.getDemographic(childTime - tinyTime,colour));  }  for (int i=0; i < tree.getChildCount(node); i++) {    NodeRef child=tree.getChild(node,i);    logLikelihood+=sampleEM(tree,child,mm,mp,colouring);  }  if (debugSampleLikelihoods && tree.isRoot(node)) {    System.out.println("Sampled likelihood " + logLikelihood);    System.out.println("Integrated exit rate " + _totalIntegratedRate);    System.out.println("sampleEMProposal node=" + node.getNumber() + " logL="+ logLikelihood);  }  return logLikelihood;}  }
class C{  private static void expandRoot(final EvidenceBuilder fsLog,final int depth){  if (Cfg.DEBUG) {    Check.requires(depth > 0,"wrong recursion depth");  }  saveRootLog(fsLog);  expandPath(fsLog,"/",depth,false);}  }
class C{  protected void dispose(IInterval interval){  if (intervals == null) {    return;  }  for (int i=intervals.size() - 1; i >= 0; i--) {    IInterval ival=intervals.get(i);    if ((interval.getLeft() == ival.getLeft()) && (interval.getRight() == ival.getRight())) {      intervals.remove(i);      break;    }  }}  }
class C{  public IntConstant(int value){  this.value=value;}  }
class C{  protected Anonymous_genExpr_1_Impl(){  super();}  }
class C{  public boolean isUseAnisotropicTextureFilter(){  return this.isAnisotropicTextureFilterAvailable && this.isAnisotropicTextureFilterEnabled;}  }
class C{  public static TermQueryBuilder termQuery(String name,String value){  return new TermQueryBuilder(name,value);}  }
class C{  public void removeListener(final IFilterDialogListener listener){  m_listeners.removeListener(listener);}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void traceThrowable(Throwable e){  PrintWriter writer=DriverManager.getLogWriter();  if (writer != null) {    e.printStackTrace(writer);  }}  }
class C{  public ClientMessage sendMessage(SimpleString targetAddress,Map<String,Object> properties){  ClientMessage message=createMessage(properties);  sendMessage(targetAddress,message);  return message;}  }
class C{  public static double P_TruePositives(int y[],int ypred[]){  int s=0;  for (int j=0; j < y.length; j++) {    if (ypred[j] == 1 && y[j] == 1)     s++;  }  return s;}  }
class C{  public static String dumpsMap(Map<?,?> map){  StringBuilder builder=new StringBuilder();  if (map == null) {    builder.append("null");    return builder.toString();  }  boolean first=true;  Iterator<?> iter=map.entrySet().iterator();  builder.append('{');  while (iter.hasNext()) {    if (first)     first=false; else     builder.append(',');    Map.Entry<?,?> entry=(Map.Entry<?,?>)iter.next();    builder.append('\"');    builder.append(escape(String.valueOf(entry.getKey())));    builder.append('\"');    builder.append(':');    builder.append(dumps(entry.getValue()));  }  builder.append('}');  return builder.toString();}  }
class C{  @Interruptible public static int pickAllocator(RVMType type){  return pickAllocator(type,null);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(getAttributeNS04.class,args);}  }
class C{  private String createString(String f){  return "srcXInBytes=" + srcXInBytes + f+ "srcY="+ srcY+ f+ "srcZ="+ srcZ+ f+ "srcLOD="+ srcLOD+ f+ "srcMemoryType="+ CUmemorytype.stringFor(srcMemoryType)+ f+ "srcHost="+ srcHost+ f+ "srcDevice="+ srcDevice+ f+ "srcArray="+ srcArray+ f+ "srcContext="+ srcContext+ f+ "srcPitch="+ srcPitch+ f+ "srcHeight="+ srcHeight+ f+ "dstXInBytes="+ dstXInBytes+ f+ "dstY="+ dstY+ f+ "dstZ="+ dstZ+ f+ "dstLOD="+ dstLOD+ f+ "dstMemoryType="+ CUmemorytype.stringFor(dstMemoryType)+ f+ "dstHost="+ dstHost+ f+ "dstDevice="+ dstDevice+ f+ "dstArray="+ dstArray+ f+ "dstContext="+ dstContext+ f+ "dstPitch="+ dstPitch+ f+ "dstHeight="+ dstHeight+ f+ "WidthInBytes="+ WidthInBytes+ f+ "Height="+ Height+ f+ "Depth="+ Depth;}  }
class C{  public boolean verify(PublicKey verificationKey,Signature verificationEngine) throws InvalidKeyException, SignatureException {  verificationEngine.initVerify(verificationKey);  verificationEngine.update(this.content.clone());  return verificationEngine.verify(this.signature.clone());}  }
class C{  public SparseArray(){  this(10);}  }
class C{  protected EnumImpl(){  super();}  }
class C{  public <T extends Number>double[] next(Collection<T> values,int numForecasts){  if (values.size() == 0) {    return emptyPredictions(numForecasts);  }  double s=0;  double last_s=0;  double b=0;  double last_b=0;  int counter=0;  T last;  for (  T v : values) {    last=v;    if (counter == 1) {      s=v.doubleValue();      b=v.doubleValue() - last.doubleValue();    } else {      s=alpha * v.doubleValue() + (1.0d - alpha) * (last_s + last_b);      b=beta * (s - last_s) + (1 - beta) * last_b;    }    counter+=1;    last_s=s;    last_b=b;  }  double[] forecastValues=new double[numForecasts];  for (int i=0; i < numForecasts; i++) {    forecastValues[i]=s + (i * b);  }  return forecastValues;}  }
class C{  public static float abs(float a){  return 0.0f;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_NUM_EXPR_4__INDEX_1:    return INDEX_1_EDEFAULT == null ? index_1 != null : !INDEX_1_EDEFAULT.equals(index_1);}return super.eIsSet(featureID);}  }
class C{  @Override public int hashCode(){  return 31 * query.hashCode() + occur.hashCode();}  }
class C{  public void blockUser(InstagramAPIResponseCallback<IGRelationship> callback,String userId){  updateRelationShip(callback,InstagramKitConstants.kRelationshipActionBlock,userId);}  }
class C{  public synchronized boolean onDeltaReceived(UUID nodeId,long timeDelta){  DeltaAverage avg=pendingDeltas.get(nodeId);  if (avg != null) {    avg.onValue(timeDelta);    if (avg.ready()) {      pendingDeltas.remove(nodeId);      deltas.put(nodeId,avg.average());      if (ready())       notifyAll();      return false;    }    return true;  }  return false;}  }
class C{  public boolean fromXml(Element behavior) throws PrincessException {  NodeList children=behavior.getChildNodes();  for (int i=0; i < children.getLength(); i++) {    Node child=children.item(i);    if ("name".equalsIgnoreCase(child.getNodeName())) {      setDescription(child.getTextContent());    } else     if ("forcedWithdrawal".equalsIgnoreCase(child.getNodeName())) {      setForcedWithdrawal(child.getTextContent());    } else     if ("goHome".equalsIgnoreCase(child.getNodeName())) {      setGoHome("true".equalsIgnoreCase(child.getTextContent()));    } else     if ("autoFlee".equalsIgnoreCase(child.getNodeName())) {      setAutoFlee("true".equalsIgnoreCase(child.getTextContent()));    } else     if ("fallShameIndex".equalsIgnoreCase(child.getNodeName())) {      setFallShameIndex(child.getTextContent());    } else     if ("hyperAggressionIndex".equalsIgnoreCase(child.getNodeName())) {      setHyperAggressionIndex(child.getTextContent());    } else     if ("selfPreservationIndex".equalsIgnoreCase(child.getNodeName())) {      setSelfPreservationIndex(child.getTextContent());    } else     if ("homeEdge".equalsIgnoreCase(child.getNodeName())) {      setHomeEdge(child.getTextContent());    } else     if ("herdMentalityIndex".equalsIgnoreCase(child.getNodeName())) {      setHerdMentalityIndex(child.getTextContent());    } else     if ("braveryIndex".equalsIgnoreCase(child.getNodeName())) {      setBraveryIndex(child.getTextContent());    } else     if ("strategicTargets".equalsIgnoreCase(child.getNodeName())) {      NodeList targets=child.getChildNodes();      for (int j=0; j < targets.getLength(); j++) {        Node t=targets.item(j);        if ("target".equalsIgnoreCase(t.getNodeName())) {          addStrategicTarget(t.getTextContent());        }        if ("unit".equalsIgnoreCase(t.getNodeName())) {          addPriorityUnit(t.getTextContent());        }      }    }  }  return true;}  }
class C{  public String toString(){  return "[StaticCodeTemplate: id=" + getID() + ", text="+ getBeforeCaretText()+ "|"+ getAfterCaretText()+ "]";}  }
class C{  private int handleC(String value,DoubleMetaphoneResult result,int index){  if (conditionC0(value,index)) {    result.append('K');    index+=2;  } else   if (index == 0 && contains(value,index,6,"CAESAR")) {    result.append('S');    index+=2;  } else   if (contains(value,index,2,"CH")) {    index=handleCH(value,result,index);  } else   if (contains(value,index,2,"CZ") && !contains(value,index - 2,4,"WICZ")) {    result.append('S','X');    index+=2;  } else   if (contains(value,index + 1,3,"CIA")) {    result.append('X');    index+=3;  } else   if (contains(value,index,2,"CC") && !(index == 1 && charAt(value,0) == 'M')) {    return handleCC(value,result,index);  } else   if (contains(value,index,2,"CK","CG","CQ")) {    result.append('K');    index+=2;  } else   if (contains(value,index,2,"CI","CE","CY")) {    if (contains(value,index,3,"CIO","CIE","CIA")) {      result.append('S','X');    } else {      result.append('S');    }    index+=2;  } else {    result.append('K');    if (contains(value,index + 1,2," C"," Q"," G")) {      index+=3;    } else     if (contains(value,index + 1,1,"C","K","Q") && !contains(value,index + 1,2,"CE","CI")) {      index+=2;    } else {      index++;    }  }  return index;}  }
class C{  private static char[] zzUnpackCMap(final String packed){  final char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 160) {    int count=packed.charAt(i++);    final char value=packed.charAt(i++);    do {      map[j++]=value;    } while (--count > 0);  }  return map;}  }
class C{  public void remove(MessageListener listener){  m_notifier.remove(listener);}  }
class C{  public void addErrorListener(ActionListener<NetworkEvent> e){  if (errorListeners == null) {    errorListeners=new EventDispatcher();    errorListeners.setBlocking(true);  }  errorListeners.addListener(e);}  }
class C{  public double[] row(){  double scale=scale();  double[] x=lp.primal();  for (int j=0; j < n; j++)   x[j]/=scale;  return x;}  }
class C{  public static int secondaryHash(Object key){  return secondaryHash(key.hashCode());}  }
class C{  private static int compUnsigned(int x,int y){  int sign_x=x & Integer.MIN_VALUE;  int sign_y=y & Integer.MIN_VALUE;  int mant_x=x & (~Integer.MIN_VALUE);  int mant_y=y & (~Integer.MIN_VALUE);  if (sign_x == sign_y)   return Integer.compare(mant_x,mant_y); else {    if (sign_x == 0)     return -1; else     return 1;  }}  }
class C{  public static String shortenURLString(final String url,final int len){  if (url == null) {    return null;  }  int urlLen=url.length();  if (urlLen > len) {    int cpos;    cpos=url.indexOf("://",0);    if (cpos >= 0) {      cpos=url.indexOf("/",cpos + 3);      if (cpos < 0) {        return url.substring(0,len - 2).concat("..");      }      if (cpos >= len - (len / 3)) {        return url.substring(0,len - 2).concat("..");      }      final int lb=((len - cpos) / 2) - 1;      if (lb * 2 + 2 + cpos < len) {        urlLen--;      }      return url.substring(0,cpos + lb).concat("..").concat(url.substring(urlLen - lb));    }  }  return url;}  }
class C{  public void removeListener(final PropertyChangeListener listener){  pcs.removePropertyChangeListener(listener);}  }
class C{  protected final long todaysSerialNumber(){  final java.util.Calendar cal=java.util.Calendar.getInstance();  final int d=cal.get(java.util.Calendar.DAY_OF_MONTH);  final int m=cal.get(java.util.Calendar.MONTH);  final int y=cal.get(java.util.Calendar.YEAR);  return fromDMY(d,m + 1,y);}  }
class C{  public ReadStreamOld(){}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:43.418 -0500",hash_original_method="CBAC64602FF2D7F893923E0ABA8C507E",hash_generated_method="248FDBA375E3BBC8FDC6E6B6D66C9BAE") public void addFirst(E e){  if (e == null)   throw new NullPointerException();  elements[head=(head - 1) & (elements.length - 1)]=e;  if (head == tail)   doubleCapacity();}  }
class C{  public static long copyLarge(InputStream input,OutputStream output,byte[] buffer) throws IOException {  long count=0;  int n=0;  while (EOF != (n=input.read(buffer))) {    output.write(buffer,0,n);    count+=n;  }  return count;}  }
class C{  public static void main(String[] args) throws IOException {  DialogueSystem system=new DialogueSystem();  String domainFile=System.getProperty("domain");  String dialogueFile=System.getProperty("dialogue");  String simulatorFile=System.getProperty("simulator");  system.getSettings().fillSettings(System.getProperties());  if (domainFile != null) {    Domain domain;    try {      domain=XMLDomainReader.extractDomain(domainFile);      log.info("Domain from " + domainFile + " successfully extracted");    } catch (    RuntimeException e) {      system.displayComment("Cannot load domain: " + e);      e.printStackTrace();      domain=XMLDomainReader.extractEmptyDomain(domainFile);    }    system.changeDomain(domain);  }  if (dialogueFile != null) {    system.importDialogue(dialogueFile);  }  if (simulatorFile != null) {    Simulator simulator=new Simulator(system,XMLDomainReader.extractDomain(simulatorFile));    log.info("Simulator with domain " + simulatorFile + " successfully extracted");    system.attachModule(simulator);  }  Settings settings=system.getSettings();  system.changeSettings(settings);  if (!settings.showGUI) {    system.attachModule(new TextOnlyInterface(system));  }  system.startSystem();  log.info("Dialogue system started!");}  }
class C{  private void adjustDayOfMonth(Calendar startTime,int month){  applyLastDayOfMonth(startTime,month);  if (!this.lastDayOfMonth) {    int lastDayOfMonth=startTime.get(Calendar.DAY_OF_MONTH);    if (lastDayOfMonth > getDayOfMonth()) {      startTime.set(Calendar.DAY_OF_MONTH,getDayOfMonth());    }  }}  }
class C{  private boolean isAccelerating(SensorEvent event){  float ax=event.values[0];  float ay=event.values[1];  float az=event.values[2];  final double magnitude=Math.sqrt(ax * ax + ay * ay + az * az);  return magnitude > ACCELERATION_THRESHOLD;}  }
class C{  private ApiInfo apiInfo(){  return new ApiInfoBuilder().title(LocalizedStrings.SwaggerConfig_VENDOR_PRODUCT_LINE.toLocalizedString()).description(LocalizedStrings.SwaggerConfig_DESCRIPTOR.toLocalizedString()).version("1.0").termsOfServiceUrl(LocalizedStrings.SwaggerConfig_EULA_LINK.toLocalizedString()).license("Apache License, version 2.0").licenseUrl(LocalizedStrings.SwaggerConfig_EULA_LINK.toLocalizedString()).contact(new Contact("the Apache Geode Community",LocalizedStrings.SwaggerConfig_PRODUCT_LINK.toLocalizedString(),LocalizedStrings.SwaggerConfig_DEVELOPER_EMAIL.toLocalizedString())).build();}  }
class C{  private void next(){  try (RandomAccessFile inout=new RandomAccessFile("AddressBook.dat","rw")){    if (count * 91 < inout.length()) {      inout.seek(count * 91);      read(inout);      count++;      System.out.println("Reading address #" + count);    } else {      System.out.println("End of file!");    }  } catch (  IOException ex) {  }}  }
class C{  public void testExceptionWithSimpleMapper() throws Exception {  ObjectMapper mapper=new ObjectMapper();  try {    BrokenStringWriter sw=new BrokenStringWriter("TEST");    mapper.writeValue(sw,createLongObject());    fail("Should have gotten an exception");  } catch (  IOException e) {    verifyException(e,IOException.class,"TEST");  }}  }
class C{  public JSONObject optJSONObject(int index){  Object o=this.opt(index);  return o instanceof JSONObject ? (JSONObject)o : null;}  }
class C{  protected boolean canSelect(KMLAbstractFeature feature){  return this.canMoveTo(feature) || this.canShowBalloon(feature);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:14.912 -0500",hash_original_method="E927F529D329E66C9C89B04CCA4C92BD",hash_generated_method="2DB9AC0A20EA2F1287878FFD89410111") public boolean isOpaque(){  return opaque;}  }
class C{  private Sandbox(){}  }
class C{  public void processKeyEvent(Component focusedComponent,KeyEvent e){  if (consumeProcessedKeyEvent(e)) {    return;  }  if (e.getID() == KeyEvent.KEY_TYPED) {    return;  }  if (focusedComponent.getFocusTraversalKeysEnabled() && !e.isConsumed()) {    AWTKeyStroke stroke=AWTKeyStroke.getAWTKeyStrokeForEvent(e), oppStroke=AWTKeyStroke.getAWTKeyStroke(stroke.getKeyCode(),stroke.getModifiers(),!stroke.isOnKeyRelease());    Set<AWTKeyStroke> toTest;    boolean contains, containsOpp;    toTest=focusedComponent.getFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS);    contains=toTest.contains(stroke);    containsOpp=toTest.contains(oppStroke);    if (contains || containsOpp) {      consumeTraversalKey(e);      if (contains) {        focusNextComponent(focusedComponent);      }      return;    } else     if (e.getID() == KeyEvent.KEY_PRESSED) {      consumeNextKeyTyped=false;    }    toTest=focusedComponent.getFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS);    contains=toTest.contains(stroke);    containsOpp=toTest.contains(oppStroke);    if (contains || containsOpp) {      consumeTraversalKey(e);      if (contains) {        focusPreviousComponent(focusedComponent);      }      return;    }    toTest=focusedComponent.getFocusTraversalKeys(KeyboardFocusManager.UP_CYCLE_TRAVERSAL_KEYS);    contains=toTest.contains(stroke);    containsOpp=toTest.contains(oppStroke);    if (contains || containsOpp) {      consumeTraversalKey(e);      if (contains) {        upFocusCycle(focusedComponent);      }      return;    }    if (!((focusedComponent instanceof Container) && ((Container)focusedComponent).isFocusCycleRoot())) {      return;    }    toTest=focusedComponent.getFocusTraversalKeys(KeyboardFocusManager.DOWN_CYCLE_TRAVERSAL_KEYS);    contains=toTest.contains(stroke);    containsOpp=toTest.contains(oppStroke);    if (contains || containsOpp) {      consumeTraversalKey(e);      if (contains) {        downFocusCycle((Container)focusedComponent);      }    }  }}  }
class C{  public void runTest() throws Throwable {  Document doc;  Node newNode;  String newValue;  doc=(Document)load("hc_staff",true);  newNode=doc.createDocumentFragment();  newValue=newNode.getNodeValue();  assertNull("initiallyNull",newValue);  newNode.setNodeValue("This should have no effect");  newValue=newNode.getNodeValue();  assertNull("nullAfterAttemptedChange",newValue);}  }
class C{  public void testPolygonNotClosed(){  IllegalArgumentException expected=expectThrows(IllegalArgumentException.class,null);  assertTrue(expected.getMessage(),expected.getMessage().contains("it must close itself"));}  }
class C{  @SuppressWarnings("raw") public static String toURI(final Class clazz) throws NullPointerException {  return toURI(clazz.getName());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:10.981 -0500",hash_original_method="C00E6E79D43678980DA0F4144A65F6A2",hash_generated_method="9E85982622E02ECD889AA29EF2CC0457") public final MotionEvent clampNoHistory(float left,float top,float right,float bottom){  MotionEvent ev=obtain();synchronized (gSharedTempLock) {    final int pointerCount=nativeGetPointerCount(mNativePtr);    ensureSharedTempPointerCapacity(pointerCount);    final PointerProperties[] pp=gSharedTempPointerProperties;    final PointerCoords[] pc=gSharedTempPointerCoords;    for (int i=0; i < pointerCount; i++) {      nativeGetPointerProperties(mNativePtr,i,pp[i]);      nativeGetPointerCoords(mNativePtr,i,HISTORY_CURRENT,pc[i]);      pc[i].x=clamp(pc[i].x,left,right);      pc[i].y=clamp(pc[i].y,top,bottom);    }    ev.mNativePtr=nativeInitialize(ev.mNativePtr,nativeGetDeviceId(mNativePtr),nativeGetSource(mNativePtr),nativeGetAction(mNativePtr),nativeGetFlags(mNativePtr),nativeGetEdgeFlags(mNativePtr),nativeGetMetaState(mNativePtr),nativeGetButtonState(mNativePtr),nativeGetXOffset(mNativePtr),nativeGetYOffset(mNativePtr),nativeGetXPrecision(mNativePtr),nativeGetYPrecision(mNativePtr),nativeGetDownTimeNanos(mNativePtr),nativeGetEventTimeNanos(mNativePtr,HISTORY_CURRENT),pointerCount,pp,pc);    return ev;  }}  }
class C{  private String calculateSongDuration(int seconds){  return new StringBuilder(String.valueOf(seconds / 60)).append(":").append(String.valueOf(seconds % 60)).toString();}  }
class C{  public long nextActionMillis(long now,long nextRetryTimeMillis){  for (  FileDownloadInfo info : downloads) {    long individualRetryTimeMillis=getNextActionMillisFor(now,info);    nextRetryTimeMillis=Math.min(individualRetryTimeMillis,nextRetryTimeMillis);  }  return nextRetryTimeMillis;}  }
class C{  public static int size(){  return _size;}  }
class C{  protected SVGOMFEDiffuseLightingElement(){}  }
class C{  public void put(String oldname,String newname){  if (oldname == newname)   return;  String oldname2=toJvmName(oldname);  String s=(String)get(oldname2);  if (s == null || !s.equals(oldname2))   super.put(oldname2,toJvmName(newname));}  }
class C{  public SparseMatrix(SparseVector[] rows){  this.rows=rows;  for (int i=0; i < rows.length; i++)   if (rows[i].length() != rows[0].length())   throw new IllegalArgumentException("Row " + i + " has "+ rows[i].length()+ " columns instead of "+ rows[0].length());}  }
class C{  protected void updateNodeAndChildren(NodeRef node){  int nodeNum=node.getNumber();  if (!updateNode[nodeNum]) {    updateNode[nodeNum]=true;    updatedNodeList.add(nodeNum);  }  for (int i=0; i < treeModel.getChildCount(node); i++) {    int childNodeNum=(treeModel.getChild(node,i)).getNumber();    if (!updateNode[childNodeNum]) {      updateNode[childNodeNum]=true;      updatedNodeList.add(childNodeNum);    }  }  likelihoodKnown=false;}  }
class C{  public CViewsToTagHandler(final JFrame parent){  super(CViewTransferable.VIEW_FLAVOR);  Preconditions.checkNotNull(parent,"IE01936: Parent argument can not be null");  m_parent=parent;}  }
class C{  public boolean removeTuple(Tuple t){  Table table=t.getTable();  if (m_sets.contains(table)) {    return table.removeTuple(t);  } else {    return false;  }}  }
class C{  public boolean isUserDefined(){  String cm=getCostingMethod();  return cm != null && cm.equals(COSTINGMETHOD_UserDefined);}  }
class C{  private ExpressionStatement createExpressionStatement(final MethodInvocation invocation){  Assert.isNotNull(invocation);  return invocation.getAST().newExpressionStatement(invocation);}  }
class C{  @Override public void onEndPage(final PdfWriter writer,final Document document){  final int pageN=writer.getPageNumber();  final String text=pageN + " / ";  final float len=bf.getWidthPoint(text,8);  cb.beginText();  cb.setFontAndSize(bf,8);  final float width=document.getPageSize().getWidth();  cb.setTextMatrix(width / 2,30);  cb.showText(text);  cb.endText();  cb.addTemplate(template,width / 2 + len,30);}  }
class C{  public static CipherTextIvMac encrypt(String plaintext,SecretKeys secretKeys) throws UnsupportedEncodingException, GeneralSecurityException {  return encrypt(plaintext,secretKeys,"UTF-8");}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:00.787 -0500",hash_original_method="00F8174F9E89D0C972FA6D3F19742382",hash_generated_method="D90463461B2A94FF94D13FDF69BB80C9") public int describeContents(){  return 0;}  }
class C{  @Override public void execute(){  entity.onTalk(event.get("text"));}  }
class C{  public boolean start(boolean right){  if (active) {    return false;  } else {    active=true;    this.right=right;    return true;  }}  }
class C{  public static Test suite(){  return (new TestSuite(ValueChangeListenerCalledITCase.class));}  }
class C{  public void visitMethodInsn(int opcode,String owner,String name,String desc,boolean itf){  if (api < Opcodes.ASM5) {    if (itf != (opcode == Opcodes.INVOKEINTERFACE)) {      throw new IllegalArgumentException("INVOKESPECIAL/STATIC on interfaces require ASM 5");    }    visitMethodInsn(opcode,owner,name,desc);    return;  }  if (mv != null) {    mv.visitMethodInsn(opcode,owner,name,desc,itf);  }}  }
class C{  public static void shortToast(Context context,int res){  if (context != null) {    Toast.makeText(context,res,Toast.LENGTH_SHORT).show();  } else {    Log.e(TAG,"Cannot show toast for text ID " + res + " as context is null");  }}  }
class C{  public void testReaderNonBlocking() throws IOException {  Pipe.SourceChannel sourceChannel=createNonBlockingChannel("abc".getBytes("UTF-8"));  try {    Channels.newReader(sourceChannel,"UTF-8").read();    fail();  } catch (  IllegalBlockingModeException expected) {  }}  }
class C{  final boolean casCellsBusy(){  return UNSAFE.compareAndSwapInt(this,CELLSBUSY,0,1);}  }
class C{  private boolean updateLangProb(double[] prob,String word,double alpha){  if (word == null || !wordLangProbMap.containsKey(word))   return false;  double[] langProbMap=wordLangProbMap.get(word);  if (verbose)   System.out.println(word + "(" + unicodeEncode(word)+ "):"+ wordProbToString(langProbMap));  double weight=alpha / BASE_FREQ;  for (int i=0; i < prob.length; ++i) {    prob[i]*=weight + langProbMap[i];  }  return true;}  }
class C{  @Override public void updateReceiptDetails(final Set<BillReceiptInfo> billReceipts){  LOGGER.debug("updateReceiptDetails : Updating Receipt Details Started, billReceipts : " + billReceipts);  final Boolean status=false;  if (billReceipts != null)   super.updateReceiptDetails(billReceipts);  LOGGER.debug("updateReceiptDetails : Updating Receipt Details Finished, status : " + status);}  }
class C{  @Override protected void onProgressChanged(long currentTime,long duration){  mControlBar.setMax((int)duration);  mControlBar.setProgress((int)currentTime);  mControlBar.setSecondaryProgress(0);  mControlBar.setSecondaryProgress(getStreamerProgress());  if (getCurrentTime() >= 0)   mCurrentTimeTextView.setText(StringUtils.millisToString(currentTime));  if (getDuration() >= 0)   lengthTime.setText(StringUtils.millisToString(duration));}  }
class C{  public static boolean isMissingValue(double val){  return Double.isNaN(val);}  }
class C{  private void printWorkspace(final Workspace w){  Check.notNull(w,"w");  final TextOutputTable table=new TextOutputTable(getDisplay().getWidth());  table.setHeadingsVisible(false);  table.setColumns(new Column[]{new Column("",Sizing.TIGHT),new Column("",Sizing.EXPAND)});  table.addRow(new String[]{Messages.getString("CommandWorkFold.Workspace"),w.getName()});  table.addRow(new String[]{Messages.getString("CommandWorkFold.Collection"),w.getServerName()});  BasicPrinter.printSeparator(getDisplay(),'=');  table.print(getDisplay().getPrintStream());  final WorkingFolder[] workingFolders=w.getFolders();  if (workingFolders != null) {    for (int i=0; i < workingFolders.length; i++) {      final WorkingFolder wf=workingFolders[i];      Check.notNull(wf,"wf");      if (wf.getType() == WorkingFolderType.CLOAK) {        getDisplay().printLine(" (" + Messages.getString("CommandWorkFold.WorkingFolderTypeCloakedLiteral") + ") "+ wf.getDisplayServerItem());      } else {        getDisplay().printLine(" " + wf.getDisplayServerItem() + ": "+ wf.getLocalItem());      }    }    getDisplay().printLine("");  }}  }
class C{  public boolean isIndexed(){  Object oo=get_Value(COLUMNNAME_IsIndexed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  return super.clone();}  }
class C{  public String[] split(String expr,int max){  return Pattern.compile(expr).split(this,max);}  }
class C{  public void testDivideRoundHalfDownNeg2(){  String a="-37361671119238118911893939591735";  int aScale=10;  String b="74723342238476237823787879183470";  int bScale=15;  String c="0E+5";  int resScale=-5;  BigDecimal aNumber=new BigDecimal(new BigInteger(a),aScale);  BigDecimal bNumber=new BigDecimal(new BigInteger(b),bScale);  BigDecimal result=aNumber.divide(bNumber,resScale,BigDecimal.ROUND_HALF_DOWN);  assertEquals("incorrect value",c,result.toString());  assertEquals("incorrect scale",resScale,result.scale());}  }
class C{  public void clear(){  clear(DEFAULT_CAPACITY);}  }
class C{  public boolean springBack(int startX,int startY,int minX,int maxX,int minY,int maxY){  mMode=FLING_MODE;  final boolean spingbackX=mScrollerX.springback(startX,minX,maxX);  final boolean spingbackY=mScrollerY.springback(startY,minY,maxY);  return spingbackX || spingbackY;}  }
class C{  public void intersectPermittedSubtree(GeneralSubtree[] permitted){  Map subtreesMap=new HashMap();  for (int i=0; i != permitted.length; i++) {    GeneralSubtree subtree=permitted[i];    Integer tagNo=Integers.valueOf(subtree.getBase().getTagNo());    if (subtreesMap.get(tagNo) == null) {      subtreesMap.put(tagNo,new HashSet());    }    ((Set)subtreesMap.get(tagNo)).add(subtree);  }  for (Iterator it=subtreesMap.entrySet().iterator(); it.hasNext(); ) {    Map.Entry entry=(Map.Entry)it.next();switch (((Integer)entry.getKey()).intValue()) {case 1:      permittedSubtreesEmail=intersectEmail(permittedSubtreesEmail,(Set)entry.getValue());    break;case 2:  permittedSubtreesDNS=intersectDNS(permittedSubtreesDNS,(Set)entry.getValue());break;case 4:permittedSubtreesDN=intersectDN(permittedSubtreesDN,(Set)entry.getValue());break;case 6:permittedSubtreesURI=intersectURI(permittedSubtreesURI,(Set)entry.getValue());break;case 7:permittedSubtreesIP=intersectIP(permittedSubtreesIP,(Set)entry.getValue());}}}  }
class C{  public double minY(){  return Math.min(p0.y,p1.y);}  }
class C{  public String toString(){  StringBuilder stringBuilder=new StringBuilder();  for (  ValidationErrorObject error : errors) {    stringBuilder.append(error.toString());  }  return stringBuilder.toString();}  }
class C{  protected boolean updateAttachmentPoint(DatapathId sw,OFPort port,Date lastSeen){  ITopologyService topology=deviceManager.topology;  List<AttachmentPoint> oldAPList;  List<AttachmentPoint> apList;  boolean oldAPFlag=false;  if (!deviceManager.isValidAttachmentPoint(sw,port))   return false;  AttachmentPoint newAP=new AttachmentPoint(sw,port,lastSeen);  apList=new ArrayList<AttachmentPoint>();  if (attachmentPoints != null)   apList.addAll(attachmentPoints);  oldAPList=new ArrayList<AttachmentPoint>();  if (oldAPs != null)   oldAPList.addAll(oldAPs);  if (oldAPList.contains(newAP)) {    int index=oldAPList.indexOf(newAP);    newAP=oldAPList.remove(index);    newAP.setLastSeen(lastSeen);    this.oldAPs=oldAPList;    oldAPFlag=true;  }  Map<DatapathId,AttachmentPoint> apMap=getAPMap(apList);  if (apMap == null || apMap.isEmpty()) {    apList.add(newAP);    attachmentPoints=apList;    return true;  }  DatapathId id=topology.getL2DomainId(sw);  AttachmentPoint oldAP=apMap.get(id);  if (oldAP == null) {    apList=new ArrayList<AttachmentPoint>();    apList.addAll(apMap.values());    apList.add(newAP);    this.attachmentPoints=apList;    return true;  }  if (oldAP.equals(newAP)) {    if (newAP.lastSeen.after(oldAP.lastSeen)) {      oldAP.setLastSeen(newAP.lastSeen);    }    this.attachmentPoints=new ArrayList<AttachmentPoint>(apMap.values());    return false;  }  int x=deviceManager.apComparator.compare(oldAP,newAP);  if (x < 0) {    apMap.put(id,newAP);    this.attachmentPoints=new ArrayList<AttachmentPoint>(apMap.values());    oldAPList=new ArrayList<AttachmentPoint>();    if (oldAPs != null)     oldAPList.addAll(oldAPs);    oldAPList.add(oldAP);    this.oldAPs=oldAPList;    if (!topology.isInSameBroadcastDomain(oldAP.getSw(),oldAP.getPort(),newAP.getSw(),newAP.getPort()))     return true;  } else   if (oldAPFlag) {    oldAPList=new ArrayList<AttachmentPoint>();    if (oldAPs != null)     oldAPList.addAll(oldAPs);    oldAPList.add(newAP);    this.oldAPs=oldAPList;  }  return false;}  }
class C{  protected void checkRowPos() throws SQLException {  checkClosed();  if (!this.onValidRow) {    throw SQLError.createSQLException(this.invalidRowReason,SQLError.SQL_STATE_GENERAL_ERROR,getExceptionInterceptor());  }}  }
class C{  public final float paint(Graphics2D g,float x,float y,RSyntaxTextArea host,TabExpander e,float clipStart){  int origX=(int)x;  int end=textOffset + textCount;  float nextX=x;  int flushLen=0;  int flushIndex=textOffset;  Color fg=host.getForegroundForToken(this);  Color bg=host.getBackgroundForTokenType(type);  g.setFont(host.getFontForTokenType(type));  FontMetrics fm=host.getFontMetricsForTokenType(type);  int ascent=fm.getAscent();  int height=fm.getHeight();  for (int i=textOffset; i < end; i++) {switch (text[i]) {case '\t':      nextX=x + fm.charsWidth(text,flushIndex,flushLen);    float nextNextX=e.nextTabStop(nextX,0);  if (bg != null) {    paintBackground(x,y,nextNextX - x,height,g,ascent,host,bg);  }g.setColor(fg);if (flushLen > 0) {g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);flushLen=0;}flushIndex=i + 1;int halfHeight=height / 2;int quarterHeight=halfHeight / 2;int ymid=(int)y - ascent + halfHeight;g.drawLine((int)nextX,ymid,(int)nextNextX,ymid);g.drawLine((int)nextNextX,ymid,(int)nextNextX - 4,ymid - quarterHeight);g.drawLine((int)nextNextX,ymid,(int)nextNextX - 4,ymid + quarterHeight);x=nextNextX;break;case ' ':nextX=x + fm.charsWidth(text,flushIndex,flushLen + 1);int width=fm.charWidth(' ');if (bg != null) {paintBackground(x,y,nextX - x,height,g,ascent,host,bg);}g.setColor(fg);if (flushLen > 0) {g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);flushLen=0;}dotRect.x=nextX - width / 2.0f;dotRect.y=y - ascent + height / 2.0f;g.fill(dotRect);flushIndex=i + 1;x=nextX;break;case '\f':default :flushLen+=1;break;}}nextX=x + fm.charsWidth(text,flushIndex,flushLen);if (flushLen > 0 && nextX >= clipStart) {if (bg != null) {paintBackground(x,y,nextX - x,height,g,ascent,host,bg);}g.setColor(fg);g.drawChars(text,flushIndex,flushLen,(int)x,(int)y);}if (host.getUnderlineForToken(this)) {g.setColor(fg);int y2=(int)(y + 1);g.drawLine(origX,y2,(int)nextX,y2);}return nextX;}  }
class C{  public NodeId(int namespaceIndex,UnsignedInteger value){  if (value == null)   throw new IllegalArgumentException("Numeric NodeId cannot be null");  if (namespaceIndex < 0 || namespaceIndex > 65535)   throw new IllegalArgumentException("namespaceIndex out of bounds");  this.value=value;  this.namespaceIndex=namespaceIndex;  type=IdType.Numeric;}  }
class C{  public static boolean taskScopedTaskExecutionActionsVisibleFor(NodeSelection nodeSelection){  if (nodeSelection.isEmpty()) {    return false;  }  return nodeSelection.hasAllNodesOfType(TaskNode.class);}  }
class C{  public boolean hasBirthday(){  return hasExtension(Birthday.class);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  Node nodeV;  String value;  doc=(Document)load("staff",false);  elementList=doc.getElementsByTagName("name");  nameNode=elementList.item(2);  nodeV=nameNode.getFirstChild();  value=nodeV.getNodeValue();  assertEquals("textNodeValue","Roger\n Jones",value);}  }
class C{  public boolean isValid(){  return (_fromBlock != null && _toBlock != null);}  }
class C{  protected void after(Description description) throws Throwable {  if (gfsh != null) {    gfsh.clearEvents();    gfsh.executeCommand("disconnect");    gfsh.executeCommand("exit");    gfsh.terminate();    gfsh.setThreadLocalInstance();    gfsh=null;  }  CliUtil.isGfshVM=false;}  }
class C{  public String toString(){  return print("");}  }
class C{  private void testGetProviders(Locale locale){  Locale defaultLocale=Locale.getDefault();  Locale.setDefault(locale);  Provider p=new MyProvider();  try {    Security.addProvider(p);    String filter="MyService.MyAlgorithm";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.MyAlgorithm KeySize:512";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.MyAlgorithm KeySize:1025";    assertNull(filter,Security.getProviders(filter));    filter="MyService.MyAlgorithm imPLementedIn:softWARE";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.MyAlgorithm ATTribute:attributeVALUE";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.MyAlgorithm \u0130mPLemented\u0131n:softWARE";    assertTrue(filter,Arrays.equals(new Provider[]{p},Security.getProviders(filter)));    filter="MyService.NoKeySize KeySize:512";    assertNull(filter,Security.getProviders(filter));    filter="MyService.NoImplementedIn ImplementedIn:Software";    assertNull(filter,Security.getProviders(filter));    filter="ABCService.NoAttribute Attribute:ABC";    assertNull(filter,Security.getProviders(filter));  }  finally {    Security.removeProvider(p.getName());    Locale.setDefault(defaultLocale);  }}  }
class C{  public Builder addPart(Part part){  if (part == null)   throw new NullPointerException("part == null");  parts.add(part);  return this;}  }
class C{  public void testLocale() throws IOException {  assertEquals(new Locale("en"),mapper.readValue(quote("en"),Locale.class));  assertEquals(new Locale("es","ES"),mapper.readValue(quote("es_ES"),Locale.class));  assertEquals(new Locale("FI","fi","savo"),mapper.readValue(quote("fi_FI_savo"),Locale.class));}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("PrintData[");  sb.append(m_name).append(",Rows=").append(m_rows.size());  if (m_TableName != null)   sb.append(",TableName=").append(m_TableName);  sb.append("]");  return sb.toString();}  }
class C{  @SuppressWarnings("unchecked") com.redhat.ceylon.model.typechecker.model.Class loadClass(String name,Map<String,Object> m,Scope parent,final List<TypeParameter> existing){  com.redhat.ceylon.model.typechecker.model.Class cls;  m.remove(KEY_NAME);  if (m.get(KEY_METATYPE) instanceof com.redhat.ceylon.model.typechecker.model.Class) {    cls=(com.redhat.ceylon.model.typechecker.model.Class)m.get(KEY_METATYPE);    if (m.size() <= 3) {      return cls;    }  } else {    if (m.containsKey("$alias")) {      cls=new com.redhat.ceylon.model.typechecker.model.ClassAlias();    } else {      cls=new com.redhat.ceylon.model.typechecker.model.Class();    }    cls.setAbstract(m.remove("abstract") != null);    cls.setAnonymous(m.remove("$anon") != null);    cls.setDynamic(m.remove(KEY_DYNAMIC) != null);    cls.setContainer(parent);    cls.setScope(parent);    cls.setName(name);    cls.setUnit(u2);    if (parent == this) {      u2.addDeclaration(cls);    }    parent.addMember(cls);    m.put(KEY_METATYPE,cls);    setAnnotations(cls,(Integer)m.remove(KEY_PACKED_ANNS),(Map<String,Object>)m.remove(KEY_ANNOTATIONS));  }  final List<TypeParameter> tparms=parseTypeParameters((List<Map<String,Object>>)m.remove(KEY_TYPE_PARAMS),cls,existing);  final List<TypeParameter> allparms=JsonPackage.merge(tparms,existing);  if (m.containsKey(KEY_SELF_TYPE)) {    for (    TypeParameter t : tparms) {      if (t.getName().equals(m.get(KEY_SELF_TYPE))) {        cls.setSelfType(t.getType());      }    }  }  if (!(isLanguagePackage() && ("Nothing".equals(name) || "Anything".equals(name)))) {    if (cls.getExtendedType() == null) {      if (m.containsKey("super")) {        Type father=getTypeFromJson((Map<String,Object>)m.get("super"),parent instanceof Declaration ? (Declaration)parent : null,allparms);        if (father != null) {          m.remove("super");          cls.setExtendedType(father);        }      } else {        cls.setExtendedType(getTypeFromJson(idobj,parent instanceof Declaration ? (Declaration)parent : null,allparms));      }    }  }  if (cls instanceof ClassAlias) {    ClassAlias ca=(ClassAlias)cls;    if (m.containsKey(KEY_CONSTRUCTOR)) {      String constructorName=(String)m.get(KEY_CONSTRUCTOR);      Function ctorFn=(Function)ca.getExtendedType().getDeclaration().getDirectMember(constructorName,null,false);      ca.setConstructor(ctorFn.getType().getDeclaration());    } else {      ca.setConstructor(ca.getExtendedType().getDeclaration());    }  }  if (m.containsKey(KEY_CONSTRUCTORS)) {    final Map<String,Map<String,Object>> constructors=(Map<String,Map<String,Object>>)m.remove(KEY_CONSTRUCTORS);    for (    Map.Entry<String,Map<String,Object>> cons : constructors.entrySet()) {      Constructor cnst=new Constructor();      cnst.setName("$def".equals(cons.getKey()) ? null : cons.getKey());      cnst.setContainer(cls);      cnst.setScope(cls);      cnst.setUnit(cls.getUnit());      cnst.setExtendedType(cls.getType());      cnst.setDynamic(cons.getValue().remove(KEY_DYNAMIC) != null);      setAnnotations(cnst,(Integer)cons.getValue().remove(KEY_PACKED_ANNS),(Map<String,Object>)cons.getValue().remove(KEY_ANNOTATIONS));      final List<Map<String,Object>> modelPlist=(List<Map<String,Object>>)cons.getValue().remove(KEY_PARAMS);      cls.addMember(cnst);      if (modelPlist == null) {        cls.setEnumerated(true);        Value cv=new Value();        cv.setName(cnst.getName());        cv.setType(cnst.getType());        cv.setContainer(cls);        cv.setScope(cls);        cv.setUnit(cls.getUnit());        cv.setVisibleScope(cls.getVisibleScope());        cv.setShared(cls.isShared());        cv.setDeprecated(cls.isDeprecated());        cls.addMember(cv);      } else {        cls.setConstructors(true);        final ParameterList plist=parseParameters(modelPlist,cnst,allparms);        cnst.addParameterList(plist);        plist.setNamedParametersSupported(true);        Function cf=new Function();        cf.setName(cnst.getName());        final Type ft=cnst.appliedType(cnst.getExtendedType(),Collections.<Type>emptyList());        cf.setType(ft);        cf.addParameterList(plist);        cf.setContainer(cls);        cf.setScope(cls);        cf.setUnit(cls.getUnit());        cf.setVisibleScope(cnst.getVisibleScope());        cf.setShared(cnst.isShared());        cf.setDeprecated(cnst.isDeprecated());        cf.setDynamic(cnst.isDynamic());        cls.addMember(cf);      }      if (cons.getValue().containsKey(KEY_JS_TSENUM)) {        cnst.setTypescriptEnum((String)cons.getValue().get(KEY_JS_TSENUM));      }    }  } else {    ParameterList plist=parseParameters((List<Map<String,Object>>)m.remove(KEY_PARAMS),cls,allparms);    plist.setNamedParametersSupported(true);    cls.setParameterList(plist);  }  if (m.containsKey("of") && cls.getCaseTypes() == null) {    cls.setCaseTypes(parseTypeList((List<Map<String,Object>>)m.get("of"),allparms));    m.remove("of");  }  if (m.containsKey(KEY_SATISFIES)) {    List<Map<String,Object>> stypes=(List<Map<String,Object>>)m.remove(KEY_SATISFIES);    cls.setSatisfiedTypes(parseTypeList(stypes,allparms));  }  if (m.containsKey(KEY_OBJECTS)) {    for (    Map.Entry<String,Map<String,Object>> inner : ((Map<String,Map<String,Object>>)m.get(KEY_OBJECTS)).entrySet()) {      loadObject(inner.getKey(),inner.getValue(),cls,allparms);    }    m.remove(KEY_OBJECTS);  }  addAttributesAndMethods(m,cls,allparms);  if (m.containsKey(KEY_INTERFACES)) {    Map<String,Map<String,Object>> cdefs=(Map<String,Map<String,Object>>)m.get(KEY_INTERFACES);    for (    Map.Entry<String,Map<String,Object>> cdef : cdefs.entrySet()) {      loadInterface(cdef.getKey(),cdef.getValue(),cls,allparms);    }    m.remove(KEY_INTERFACES);  }  if (m.containsKey(KEY_CLASSES)) {    Map<String,Map<String,Object>> cdefs=(Map<String,Map<String,Object>>)m.get(KEY_CLASSES);    for (    Map.Entry<String,Map<String,Object>> cdef : cdefs.entrySet()) {      loadClass(cdef.getKey(),cdef.getValue(),cls,allparms);    }    m.remove(KEY_CLASSES);  }  if (cls.isDynamic() && (getModule().getJsMajor() < 9 || (getModule().getJsMajor() == 9 && getModule().getJsMinor() < 1))) {    cls.makeMembersDynamic();  }  return cls;}  }
class C{  public void testBasicsMultiDims() throws Exception {  Directory dir=newDirectory();  RandomIndexWriter writer=new RandomIndexWriter(random(),dir);  Document document=new Document();  document.add(new HalfFloatPoint("field",1.25f,-2f));  writer.addDocument(document);  IndexReader reader=writer.getReader();  IndexSearcher searcher=newSearcher(reader);  assertEquals(1,searcher.count(HalfFloatPoint.newRangeQuery("field",new float[]{0,-5},new float[]{1.25f,-1})));  assertEquals(0,searcher.count(HalfFloatPoint.newRangeQuery("field",new float[]{0,0},new float[]{2,2})));  assertEquals(0,searcher.count(HalfFloatPoint.newRangeQuery("field",new float[]{-10,-10},new float[]{1,2})));  reader.close();  writer.close();  dir.close();}  }
class C{  private synchronized void trim(){  while (mCurrentSize > mSizeLimit) {    byte[] buf=mBuffersByLastUse.remove(0);    mBuffersBySize.remove(buf);    mCurrentSize-=buf.length;  }}  }
class C{  public JLBHOptions throughput(int throughput){  return throughput(throughput,TimeUnit.SECONDS);}  }
class C{  @Deprecated public LogisticRegressionOptimization(ExampleSet exampleSet,boolean addIntercept,int initType,int maxIterations,int generationsWithoutImprovement,int popSize,int selectionType,double tournamentFraction,boolean keepBest,int mutationType,double crossoverProb,boolean showConvergencePlot,RandomGenerator random,LoggingHandler logging){  this(exampleSet,addIntercept,initType,maxIterations,generationsWithoutImprovement,popSize,selectionType,tournamentFraction,keepBest,mutationType,crossoverProb,showConvergencePlot,random,logging,null);}  }
class C{  protected DeprecatableElementImpl(){  super();}  }
class C{  public CameraSelectionCriteria build(){  return (criteria);}  }
class C{  public PercentFormatter(DecimalFormat format){  this.mFormat=format;}  }
class C{  public String type(){  return type;}  }
class C{  private String sendStatusRequestWithRetry(ModifiableSolrParams params,int maxCounter) throws SolrServerException, IOException {  NamedList status=null;  String state=null;  String message=null;  NamedList r;  while (maxCounter-- > 0) {    r=sendRequest(params);    status=(NamedList)r.get("status");    state=(String)status.get("state");    message=(String)status.get("msg");    if (state.equals("completed") || state.equals("failed"))     return (String)status.get("msg");    try {      Thread.sleep(1000);    } catch (    InterruptedException e) {    }  }  return message;}  }
class C{  private static byte[] max(byte[] ip1,byte[] ip2){  for (int i=0; i < ip1.length; i++) {    if ((ip1[i] & 0xFFFF) > (ip2[i] & 0xFFFF)) {      return ip1;    }  }  return ip2;}  }
class C{  public boolean isSetCursorId(){  return EncodingUtils.testBit(__isset_bitfield,__CURSORID_ISSET_ID);}  }
class C{  public boolean overlaps(Mention mention){  final Base a=getAnnotation();  final Base b=mention.getAnnotation();  return !(a.getEnd() < b.getBegin() || b.getEnd() < a.getBegin());}  }
class C{  public boolean isDominatorOf(DominatorNode dom,DominatorNode node){  return dominators.isDominatedBy(node.getGode(),dom.getGode());}  }
class C{  public long seek(long position){  if (mPlayer != null && mPlayer.isInitialized()) {    if (position < 0) {      position=0;    } else     if (position > mPlayer.duration()) {      position=mPlayer.duration();    }    long result=mPlayer.seek(position);    notifyChange(POSITION_CHANGED);    return result;  }  return -1;}  }
class C{  public XYAreaRenderer2(XYToolTipGenerator labelGenerator,XYURLGenerator urlGenerator){  super();  this.showOutline=false;  setBaseToolTipGenerator(labelGenerator);  setURLGenerator(urlGenerator);  GeneralPath area=new GeneralPath();  area.moveTo(0.0f,-4.0f);  area.lineTo(3.0f,-2.0f);  area.lineTo(4.0f,4.0f);  area.lineTo(-4.0f,4.0f);  area.lineTo(-3.0f,-2.0f);  area.closePath();  this.legendArea=area;}  }
class C{  public void initialise(int k,double epsilon) throws Exception {  super.initialise(k);  this.epsilon=epsilon;  miKernel.initialise(k,1,epsilon);  destPastVectors=null;  destNextVectors=null;}  }
class C{  private static String normalizeLineEndings(String input){  return NON_UNIX_LINE_ENDING.matcher(input).replaceAll("\n");}  }
class C{  public void testUnsupportedCallbackException01(){  Callback c=null;  UnsupportedCallbackException ucE=new UnsupportedCallbackException(c);  assertNull("getMessage() must return null.",ucE.getMessage());  assertNull("getCallback() must return null",ucE.getCallback());}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public VmStatusChangeEvent(MonitoredHost host,Set active,Set started,Set terminated){  super(host);  this.active=active;  this.started=started;  this.terminated=terminated;}  }
class C{  public void connect(Context context,BeanListener listener){  lastKnownContext=context;  beanListener=listener;  gattClient.connect(context,device);}  }
class C{  private void sendLogManagerSavedTimestamp(TimestampSucceeded message){  SaveTimestampedDataMessage data=new SaveTimestampedDataMessage(message);  getContext().parent().tell(data,getSelf());}  }
class C{  protected boolean afterDelete(boolean success){  String sql="DELETE FROM AD_Package_Exp_Detail WHERE AD_Package_Exp_ID = " + getAD_Package_Exp_ID();  int deleteSuccess=DB.executeUpdate(sql,get_TrxName());  if (deleteSuccess == -1)   return false;  return true;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static Set<Entity> replaceWithCoreferent(Collection<Entity> entities,Map<ReferenceTarget,Entity> referentMap){  final Set<Entity> set=new HashSet<>(entities.size());  for (  final Entity t : entities) {    if (t.getReferent() == null) {      set.add(t);    } else {      final Entity entity=referentMap.get(t.getReferent());      if (entity != null) {        set.add(entity);      } else {        set.add(t);      }    }  }  return set;}  }
class C{  public AxesWalker(LocPathIterator locPathIterator,int axis){  super(locPathIterator);  m_axis=axis;}  }
class C{  private void loadServerDetailsActivity(){  Preference.putString(context,resources.getString(R.string.shared_pref_ip),resources.getString(R.string.shared_pref_default_string));  Intent intent=new Intent(AlreadyRegisteredActivity.this,ServerDetails.class);  intent.putExtra(getResources().getString(R.string.intent_extra_regid),regId);  intent.putExtra(getResources().getString(R.string.intent_extra_from_activity),AlreadyRegisteredActivity.class.getSimpleName());  intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);  startActivity(intent);  finish();}  }
class C{  public boolean isBefore(ReadableInstant instant){  long instantMillis=DateTimeUtils.getInstantMillis(instant);  return isBefore(instantMillis);}  }
class C{  public InflaterInputStream(InputStream in,Inflater inf){  this(in,inf,512);}  }
class C{  public OpenDoubleIntHashMap(int initialCapacity){  this(initialCapacity,defaultMinLoadFactor,defaultMaxLoadFactor);}  }
class C{  static void computeCallerMap(JsonElement jsonElt,boolean topLevel,Map<String,Map<String,Set<JsonElement>>> callerMap){  JsonArray childrenArray=Utils.getChildrenArray(jsonElt);  String sig=Utils.getFieldValueAsString(jsonElt,"signature");  if (childrenArray != null) {    for (int i=0; i < childrenArray.size(); i++) {      JsonElement child=childrenArray.get(i);      if (child.isJsonObject() && !Utils.isEmptyJsonObject(child)) {        JsonObject childObj=child.getAsJsonObject();        String childSig=Utils.getFieldValueAsString(childObj,"signature");        if (!topLevel) {          Map<String,Set<JsonElement>> callers=callerMap.get(childSig);          if (callers == null) {            callers=new HashMap<String,Set<JsonElement>>();            callerMap.put(childSig,callers);          }          Set<JsonElement> calls=callers.get(sig);          if (calls == null) {            calls=new HashSet<JsonElement>();            callers.put(sig,calls);          }          calls.add(jsonElt);        }        computeCallerMap(childObj,false,callerMap);      }    }  }}  }
class C{  protected boolean isInitialized(){  return initialized;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:51.392 -0500",hash_original_method="5412F78A6FFD23BF6E67569C9C7086D9",hash_generated_method="A1A47654BACAD454A83B86CF81070850") private static int addPlusChar(String number){  int pos=-1;  if (number.startsWith(CLIR_OFF)) {    pos=CLIR_OFF.length() - 1;  }  if (number.startsWith(CLIR_ON)) {    pos=CLIR_ON.length() - 1;  }  return pos;}  }
class C{  public void onSaveInstanceState(Bundle outState){  outState.putBoolean("SlidingActivityHelper.open",mSlidingMenu.isMenuShowing());  outState.putBoolean("SlidingActivityHelper.secondary",mSlidingMenu.isSecondaryMenuShowing());}  }
class C{  public static void writeStringToFile(File file,String data) throws IOException {  writeStringToFile(file,data,null,false);}  }
class C{  public static DiscCacheAware createReserveDiscCache(File cacheDir){  File individualDir=new File(cacheDir,"uil-images");  if (individualDir.exists() || individualDir.mkdir()) {    cacheDir=individualDir;  }  return new TotalSizeLimitedDiscCache(cacheDir,2 * 1024 * 1024);}  }
class C{  public boolean isDeleted(){  return deleted;}  }
class C{  public static String indent(String iString,int iIndentDepth){  StringBuilder spacer=new StringBuilder();  spacer.append("\n");  for (int i=0; i < iIndentDepth; i++) {    spacer.append("  ");  }  return replace(iString,"\n",spacer.toString());}  }
class C{  public void append(final char data){  provideCapacity(length + 1);  c[length]=data;  length++;}  }
class C{  private void processWriteInstruction(ExecutionContext ec) throws DMLRuntimeException {  String fname=ec.getScalarInput(input2.getName(),ValueType.STRING,input2.isLiteral()).getStringValue();  if (input1.getDataType() == DataType.SCALAR) {    writeScalarToHDFS(ec,fname);  } else   if (input1.getDataType() == DataType.MATRIX) {    String outFmt=input3.getName();    if (outFmt.equalsIgnoreCase("matrixmarket"))     writeMMFile(ec,fname); else     if (outFmt.equalsIgnoreCase("csv"))     writeCSVFile(ec,fname); else {      MatrixObject mo=ec.getMatrixObject(input1.getName());      mo.exportData(fname,outFmt);    }  } else   if (input1.getDataType() == DataType.FRAME) {    String outFmt=input3.getName();    FrameObject mo=ec.getFrameObject(input1.getName());    mo.exportData(fname,outFmt,_formatProperties);  }}  }
class C{  private void fetchWallMessages(int pageNumber){  final Map<String,String> params=new HashMap<String,String>(5);  if (!SharedPreferenceHelper.getString(R.string.pref_latitude).equals("")) {    params.put(HttpConstants.LATITUDE,SharedPreferenceHelper.getString(R.string.pref_latitude));    params.put(HttpConstants.LONGITUDE,SharedPreferenceHelper.getString(R.string.pref_longitude));    params.put(HttpConstants.TYPE,HttpConstants.SearchType.WALL);    params.put(HttpConstants.PER,"10");    params.put(HttpConstants.RADIUS,"50");    RetroCallback retroCallback;    retroCallback=new RetroCallback(this);    retroCallback.setRequestId(HttpConstants.ApiResponseCodes.GET_ALL_WALLS);    retroCallbackList.add(retroCallback);    params.put(HttpConstants.PAGE,pageNumber + "");    if (!mFetchingWalls) {      mYeloApi.getWallMessages(params,retroCallback);      mFetchingWalls=true;    }    if (pageNumber != 1) {      mCurrentpage=pageNumber;    }    mIsLoading=true;    mSwipeRefreshLayout.setRefreshing(true);  } else {    Utils.setDefaultLocation(getActivity());  }}  }
class C{  Node cloneOrImportNode(short operation,Node node,boolean deep){  NodeImpl copy=shallowCopy(operation,node);  if (deep) {    NodeList list=node.getChildNodes();    for (int i=0; i < list.getLength(); i++) {      copy.appendChild(cloneOrImportNode(operation,list.item(i),deep));    }  }  notifyUserDataHandlers(operation,node,copy);  return copy;}  }
class C{  @Nullable public GridCacheMvccCandidate releaseLocal(){  return releaseLocal(Thread.currentThread().getId());}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public void query(WebSocket session,HeadersAmp headers,String from,long qid,String to,String methodName,PodRef podCaller,Object... args) throws IOException {}  }
class C{  public double cond(){  return s.$[s.addr.op(0)] / s.$[Math.min(m,n) - 1];}  }
class C{  private String lookaheadWord() throws IOException, ParseException {  String nextWord=getNextWord();  tokenizer.pushBack();  return nextWord;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList testList;  Node commentNode;  String commentNodeName;  int nodeType;  doc=(Document)load("staff",false);  testList=doc.getChildNodes();  for (int indexN10040=0; indexN10040 < testList.getLength(); indexN10040++) {    commentNode=(Node)testList.item(indexN10040);    commentNodeName=commentNode.getNodeName();    if (equals("#comment",commentNodeName)) {      nodeType=(int)commentNode.getNodeType();      assertEquals("nodeCommentNodeTypeAssert1",8,nodeType);    }  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public boolean verify(SignerInformationVerifier verifier) throws CMSException {  Time signingTime=getSigningTime();  if (verifier.hasAssociatedCertificate()) {    if (signingTime != null) {      X509CertificateHolder dcv=verifier.getAssociatedCertificate();      if (!dcv.isValidOn(signingTime.getDate())) {        throw new CMSVerifierCertificateNotValidException("verifier not valid at signingTime");      }    }  }  return doVerify(verifier);}  }
class C{  public static void dropTable(SQLiteDatabase db,boolean ifExists){  String sql="DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THREAD'";  db.execSQL(sql);}  }
class C{  private boolean canModifyApplicationUsers(Subscription subscription){  return !(subscription.getStatus() == SubscriptionStatus.PENDING || subscription.getStatus() == SubscriptionStatus.INVALID);}  }
class C{  private void resizeHorizontal(Event e,FormData sashData){  Rectangle sashRect=sash.getBounds();  Rectangle shellRect=Sasher.this.getBounds();  int bottom=shellRect.height - sashRect.height - limit;  e.y=Math.max(Math.min(e.y,bottom),limit);  if (e.y != sashRect.y) {    sashData.top=new FormAttachment(0,e.y);    Sasher.this.layout();  }}  }
class C{  public void testNoUnigrams() throws Exception {  Reader reader=new StringReader("this is a test");  TokenStream stream=whitespaceMockTokenizer(reader);  stream=tokenFilterFactory("Shingle","outputUnigrams","false").create(stream);  assertTokenStreamContents(stream,new String[]{"this is","is a","a test"});}  }
class C{  public static int[][] computeTable(){  int[][] ret=new int[10][10];  for (int m=0; m < 10; m++) {    for (int n=0; n < 10; n++) {      ret[m][n]=m * n;    }  }  return ret;}  }
class C{  public static void warn(int windowNo,String adMessage){  warn(windowNo,null,adMessage,null,null);}  }
class C{  @Override public void createExportMask(StorageSystem storage,URI exportMaskURI,VolumeURIHLU[] volumeURIHLUs,List<URI> targetURIList,List<Initiator> initiatorList,TaskCompleter taskCompleter) throws DeviceControllerException {  _log.info("{} createExportMask START...",storage.getSerialNumber());  Map<StorageGroupPolicyLimitsParam,CIMObjectPath> newlyCreatedChildVolumeGroups=new HashMap<StorageGroupPolicyLimitsParam,CIMObjectPath>();  ExportOperationContext context=new VmaxExportOperationContext();  taskCompleter.updateWorkflowStepContext(context);  try {    _log.info("Export mask id: {}",exportMaskURI);    _log.info("createExportMask: volume-HLU pairs: {}",Joiner.on(',').join(volumeURIHLUs));    _log.info("createExportMask: initiators: {}",Joiner.on(',').join(initiatorList));    _log.info("createExportMask: assignments: {}",Joiner.on(',').join(targetURIList));    ExportMask mask=_dbClient.queryObject(ExportMask.class,exportMaskURI);    String maskingViewName=generateMaskViewName(storage,mask);    String cascadedIGCustomTemplateName=CustomConfigConstants.VMAX_HOST_CASCADED_IG_MASK_NAME;    String initiatorGroupCustomTemplateName=CustomConfigConstants.VMAX_HOST_INITIATOR_GROUP_MASK_NAME;    String cascadedSGCustomTemplateName=CustomConfigConstants.VMAX_HOST_CASCADED_SG_MASK_NAME;    String portGroupCustomTemplateName=CustomConfigConstants.VMAX_HOST_PORT_GROUP_MASK_NAME;    String exportType=ExportMaskUtils.getExportType(_dbClient,mask);    if (ExportGroupType.Cluster.name().equals(exportType)) {      cascadedIGCustomTemplateName=CustomConfigConstants.VMAX_CLUSTER_CASCADED_IG_MASK_NAME;      initiatorGroupCustomTemplateName=CustomConfigConstants.VMAX_CLUSTER_INITIATOR_GROUP_MASK_NAME;      cascadedSGCustomTemplateName=CustomConfigConstants.VMAX_CLUSTER_CASCADED_SG_MASK_NAME;      portGroupCustomTemplateName=CustomConfigConstants.VMAX_CLUSTER_PORT_GROUP_MASK_NAME;    }    DataSource cascadedIGDataSource=ExportMaskUtils.getExportDatasource(storage,initiatorList,dataSourceFactory,cascadedIGCustomTemplateName);    String cigName=customConfigHandler.getComputedCustomConfigValue(cascadedIGCustomTemplateName,storage.getSystemType(),cascadedIGDataSource);    cigName=_helper.generateGroupName(_helper.getExistingInitiatorGroupsFromArray(storage),cigName);    CIMObjectPath cascadedIG=createOrUpdateInitiatorGroups(storage,exportMaskURI,cigName,initiatorGroupCustomTemplateName,initiatorList,taskCompleter);    if (cascadedIG == null) {      return;    }    DataSource cascadedSGDataSource=ExportMaskUtils.getExportDatasource(storage,initiatorList,dataSourceFactory,cascadedSGCustomTemplateName);    String csgName=customConfigHandler.getComputedCustomConfigValue(cascadedSGCustomTemplateName,storage.getSystemType(),cascadedSGDataSource);    DataSource portGroupDataSource=ExportMaskUtils.getExportDatasource(storage,initiatorList,dataSourceFactory,portGroupCustomTemplateName);    String pgGroupName=customConfigHandler.getComputedCustomConfigValue(portGroupCustomTemplateName,storage.getSystemType(),portGroupDataSource);    pgGroupName=_helper.generateGroupName(_helper.getExistingPortGroupsFromArray(storage),pgGroupName);    CIMObjectPath targetPortGroupPath=createTargetPortGroup(storage,pgGroupName,targetURIList,taskCompleter);    CIMObjectPath volumeParentGroupPath=storage.checkIfVmax3() ? createOrSelectSLOBasedStorageGroup(storage,exportMaskURI,initiatorList,volumeURIHLUs,csgName,newlyCreatedChildVolumeGroups,taskCompleter) : createOrSelectStorageGroup(storage,exportMaskURI,initiatorList,volumeURIHLUs,csgName,newlyCreatedChildVolumeGroups,taskCompleter);    createMaskingView(storage,exportMaskURI,maskingViewName,volumeParentGroupPath,volumeURIHLUs,targetPortGroupPath,cascadedIG,taskCompleter);  } catch (  Exception e) {    _log.error(String.format("createExportMask failed - maskName: %s",exportMaskURI.toString()),e);    ServiceError serviceError=DeviceControllerException.errors.jobFailed(e);    taskCompleter.error(_dbClient,serviceError);  }  _log.info("{} createExportMask END...",storage.getSerialNumber());}  }
class C{  public void installLinearModels() throws Exception {  Evaluation nodeModelEval;  if (m_isLeaf) {    buildLinearModel(m_indices);  } else {    if (m_left != null) {      m_left.installLinearModels();    }    if (m_right != null) {      m_right.installLinearModels();    }    buildLinearModel(m_indices);  }  nodeModelEval=new Evaluation(m_instances);  nodeModelEval.evaluateModel(m_nodeModel,m_instances);  m_rootMeanSquaredError=nodeModelEval.rootMeanSquaredError();  if (!m_saveInstances) {    m_instances=new Instances(m_instances,0);  }}  }
class C{  public InventoryView(Inventory parent,int[] slots){  this.parent=parent;  this.slots=slots;}  }
class C{  default <K,A,D>Traversable<Tuple2<K,D>> grouped(final Function<? super T,? extends K> classifier,final Collector<? super T,A,D> downstream){  return traversable().grouped(classifier,downstream);}  }
class C{  private VarSymbol enterConstant(String name,Type type){  VarSymbol c=new VarSymbol(PUBLIC | STATIC | FINAL,names.fromString(name),type,predefClass);  c.setData(type.constValue());  predefClass.members().enter(c);  return c;}  }
class C{  public static int removeTransitRoutesWithoutLinkSequences(TransitSchedule schedule){  log.info("... Removing transit routes without link sequences");  int removed=0;  for (  TransitLine transitLine : schedule.getTransitLines().values()) {    for (    TransitRoute transitRoute : new HashSet<>(transitLine.getRoutes().values())) {      boolean removeRoute=false;      NetworkRoute networkRoute=transitRoute.getRoute();      if (networkRoute == null) {        removeRoute=true;      }      List<Id<Link>> linkIds=ScheduleTools.getTransitRouteLinkIds(transitRoute);      if (linkIds.size() == 0) {        removeRoute=true;      } else {        for (        Id<Link> linkId : linkIds) {          if (linkId == null) {            removeRoute=true;          }        }      }      if (removeRoute) {        transitLine.removeRoute(transitRoute);        removed++;      }    }  }  log.info("... " + removed + " transit routes removed");  return removed;}  }
class C{  @Override public void addPropertyChangeListener(PropertyChangeListener listener){  m_propSupport.addPropertyChangeListener(listener);}  }
class C{  public InputStreamImpl(){}  }
class C{  public TObjectFloatHashMap(int initialCapacity,float loadFactor){  super(initialCapacity,loadFactor);}  }
class C{  public void write(byte[] buffer,int offset,int length,boolean isEnd) throws IOException {  _crc=Crc64.generate(_crc,buffer,offset,length);  _next.write(buffer,offset,length,isEnd);}  }
class C{  public static InlineMethodRefactoring create(ITypeRoot unit,CompilationUnit node,int selectionStart,int selectionLength){  ASTNode target=RefactoringAvailabilityTester.getInlineableMethodNode(unit,node,selectionStart,selectionLength);  if (target == null)   return null;  if (target.getNodeType() == ASTNode.METHOD_DECLARATION) {    return new InlineMethodRefactoring(unit,(MethodDeclaration)target,selectionStart,selectionLength);  } else {    ICompilationUnit cu=(ICompilationUnit)unit;    if (target.getNodeType() == ASTNode.METHOD_INVOCATION) {      return new InlineMethodRefactoring(cu,(MethodInvocation)target,selectionStart,selectionLength);    } else     if (target.getNodeType() == ASTNode.SUPER_METHOD_INVOCATION) {      return new InlineMethodRefactoring(cu,(SuperMethodInvocation)target,selectionStart,selectionLength);    } else     if (target.getNodeType() == ASTNode.CONSTRUCTOR_INVOCATION) {      return new InlineMethodRefactoring(cu,(ConstructorInvocation)target,selectionStart,selectionLength);    }  }  return null;}  }
class C{  private void readResponseHeaders(State state,InnerState innerState,HttpResponse response) throws StopRequest {  Header header=response.getFirstHeader("Content-Disposition");  if (header != null) {    innerState.mHeaderContentDisposition=header.getValue();  }  header=response.getFirstHeader("Content-Location");  if (header != null) {    innerState.mHeaderContentLocation=header.getValue();  }  header=response.getFirstHeader("ETag");  if (header != null) {    innerState.mHeaderETag=header.getValue();  }  String headerTransferEncoding=null;  header=response.getFirstHeader("Transfer-Encoding");  if (header != null) {    headerTransferEncoding=header.getValue();  }  String headerContentType=null;  header=response.getFirstHeader("Content-Type");  if (header != null) {    headerContentType=header.getValue();    if (!headerContentType.equals("application/vnd.android.obb")) {      throw new StopRequest(DownloaderService.STATUS_FILE_DELIVERED_INCORRECTLY,"file delivered with incorrect Mime type");    }  }  if (headerTransferEncoding == null) {    header=response.getFirstHeader("Content-Length");    if (header != null) {      innerState.mHeaderContentLength=header.getValue();      long contentLength=Long.parseLong(innerState.mHeaderContentLength);      if (contentLength != -1 && contentLength != mInfo.mTotalBytes) {        Log.e(Constants.TAG,"Incorrect file size delivered.");      }    }  } else {    if (Constants.LOGVV) {      Log.v(Constants.TAG,"ignoring content-length because of xfer-encoding");    }  }  if (Constants.LOGVV) {    Log.v(Constants.TAG,"Content-Disposition: " + innerState.mHeaderContentDisposition);    Log.v(Constants.TAG,"Content-Length: " + innerState.mHeaderContentLength);    Log.v(Constants.TAG,"Content-Location: " + innerState.mHeaderContentLocation);    Log.v(Constants.TAG,"ETag: " + innerState.mHeaderETag);    Log.v(Constants.TAG,"Transfer-Encoding: " + headerTransferEncoding);  }  boolean noSizeInfo=innerState.mHeaderContentLength == null && (headerTransferEncoding == null || !headerTransferEncoding.equalsIgnoreCase("chunked"));  if (noSizeInfo) {    throw new StopRequest(DownloaderService.STATUS_HTTP_DATA_ERROR,"can't know size of download, giving up");  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.813 -0400",hash_original_method="0829B6DA23F89F75CF76B7CF84C00C9F",hash_generated_method="E8E4BDB926E9E2747B073CF25256C0EE") @Override public boolean markSupported(){  return markSupported;}  }
class C{  void print() throws Exception {  Language language=Language.getLoginLanguage();  MPrintFormat pf=null;  int pfid=0;  RowSet pfrs=MPrintFormat.getAccessiblePrintFormats(MTable.getTable_ID(X_RV_PP_Product_BOMLine_Storage_TableName),-1,null);  pfrs.next();  pfid=pfrs.getInt("AD_PrintFormat_ID");  if (pfrs.getInt("AD_Client_ID") != 0)   pf=MPrintFormat.get(getCtx(),pfid,false); else   pf=MPrintFormat.copyToClient(getCtx(),pfid,getAD_Client_ID());  pfrs.close();  if (pf == null)   raiseError("Error: ","No Print Format");  pf.setLanguage(language);  pf.setTranslationLanguage(language);  MQuery query=new MQuery(X_RV_PP_Product_BOMLine_Storage_TableName);  query.addRestriction(X_T_BOMLine.COLUMNNAME_AD_PInstance_ID,MQuery.EQUAL,AD_PInstance_ID,getParamenterName(X_T_BOMLine.COLUMNNAME_AD_PInstance_ID),getParamenterInfo(X_T_BOMLine.COLUMNNAME_AD_PInstance_ID));  query.addRestriction(X_T_BOMLine.COLUMNNAME_M_Warehouse_ID,MQuery.EQUAL,p_M_Warehouse_ID,getParamenterName(X_T_BOMLine.COLUMNNAME_M_Warehouse_ID),getParamenterInfo(X_T_BOMLine.COLUMNNAME_M_Warehouse_ID));  query.addRestriction(X_T_BOMLine.COLUMNNAME_M_Warehouse_ID,MQuery.EQUAL,p_M_Warehouse_ID,getParamenterName("DateTrx"),getParamenterInfo("DateTrx"));  PrintInfo info=new PrintInfo(X_RV_PP_Product_BOMLine_Storage_TableName,MTable.getTable_ID(X_RV_PP_Product_BOMLine_Storage_TableName),getRecord_ID());  ReportEngine re=new ReportEngine(getCtx(),pf,query,info);  ReportCtl.preview(re);  while (re.getView().isDisplayable()) {    Env.sleep(1);  }}  }
class C{  public static String toString(Object[] self){  return toArrayString(self);}  }
class C{  private static boolean isDebugging(List<String> arguments){  for (  final String argument : arguments) {    if ("-Xdebug".equals(argument)) {      return true;    } else     if (argument.startsWith("-agentlib:jdwp")) {      return true;    }  }  return false;}  }
class C{  void checkIntersection(Coordinate[] pt,int expectedIntersectionNum,Coordinate[] expectedIntPt,double distanceTolerance){  LineIntersector li=new RobustLineIntersector();  li.computeIntersection(pt[0],pt[1],pt[2],pt[3]);  int intNum=li.getIntersectionNum();  assertEquals("Number of intersections not as expected",expectedIntersectionNum,intNum);  if (expectedIntPt != null) {    assertEquals("Wrong number of expected int pts provided",intNum,expectedIntPt.length);    boolean isIntPointsCorrect=true;    if (intNum == 1) {      checkIntPoints(expectedIntPt[0],li.getIntersection(0),distanceTolerance);    } else     if (intNum == 2) {      checkIntPoints(expectedIntPt[1],li.getIntersection(0),distanceTolerance);      checkIntPoints(expectedIntPt[1],li.getIntersection(0),distanceTolerance);      if (!(equals(expectedIntPt[0],li.getIntersection(0),distanceTolerance) || equals(expectedIntPt[0],li.getIntersection(1),distanceTolerance))) {        checkIntPoints(expectedIntPt[0],li.getIntersection(0),distanceTolerance);        checkIntPoints(expectedIntPt[0],li.getIntersection(1),distanceTolerance);      } else       if (!(equals(expectedIntPt[1],li.getIntersection(0),distanceTolerance) || equals(expectedIntPt[1],li.getIntersection(1),distanceTolerance))) {        checkIntPoints(expectedIntPt[1],li.getIntersection(0),distanceTolerance);        checkIntPoints(expectedIntPt[1],li.getIntersection(1),distanceTolerance);      }    }  }}  }
class C{  private boolean isSerializable(ClassSymbol c){  try {    syms.serializableType.complete();  } catch (  CompletionFailure e) {    return false;  }  return types.isSubtype(c.type,syms.serializableType);}  }
class C{  private void buildViewForMeasuring(){  if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  } else {    createItemsLayout();  }  int addItems=visibleItems / 2;  for (int i=currentItem + addItems; i >= currentItem - addItems; i--) {    if (addViewItem(i,true)) {      firstItem=i;    }  }}  }
class C{  public void encode(OutputStream out) throws IOException {  super.encode(out,PKIXExtensions.FreshestCRL_Id,false);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-26 10:48:13.818 -0500",hash_original_method="40648F605301A4EB71E07CB04AC75C75",hash_generated_method="AA3F70A8E211E79ACDAEAE4333F4F589") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public Builder(int pageWidth,int pageHeight,int pageNumber){  if (pageWidth <= 0) {    throw new IllegalArgumentException("page width must be positive");  }  if (pageHeight <= 0) {    throw new IllegalArgumentException("page width must be positive");  }  if (pageNumber < 0) {    throw new IllegalArgumentException("pageNumber must be non negative");  }  mPageInfo.mPageWidth=pageWidth;  mPageInfo.mPageHeight=pageHeight;  mPageInfo.mPageNumber=pageNumber;}  }
class C{  public static double PPVNPVrawFitness(boolean useTrainingData,GEPIndividual ind,int chromosomeNum){  int confusionMatrix[]=getConfusionMatrixValues(useTrainingData,ind,chromosomeNum);  int truePositives=confusionMatrix[0];  int falseNegatives=confusionMatrix[1];  int falsePositives=confusionMatrix[2];  int trueNegatives=confusionMatrix[3];  int TPplusFP=truePositives + falsePositives;  int TNplusFN=trueNegatives + falseNegatives;  if (TPplusFP == 0 || TNplusFN == 0)   return 0.0;  double PPV=(double)truePositives / (double)TPplusFP;  double NPV=(double)trueNegatives / (double)TNplusFN;  return (PPV * NPV);}  }
class C{  public OperationNotPermittedException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  private void configureApiBinding(){  bind(KeyBindingAgent.class).to(KeyBindingManager.class).in(Singleton.class);  bind(SelectionAgent.class).to(SelectionAgentImpl.class).asEagerSingleton();  bind(WorkspaceAgent.class).to(WorkspacePresenter.class).in(Singleton.class);  bind(IconRegistry.class).to(IconRegistryImpl.class).in(Singleton.class);  bind(EditorMultiPartStack.class).to(EditorMultiPartStackPresenter.class).in(Singleton.class);  bind(ActionManager.class).to(ActionManagerImpl.class).in(Singleton.class);  GinMultibinder<NodeInterceptor> nodeInterceptors=GinMultibinder.newSetBinder(binder(),NodeInterceptor.class);  nodeInterceptors.addBinding().to(DefaultNodeInterceptor.class);  bind(CommandTypeRegistry.class).to(CommandTypeRegistryImpl.class).in(Singleton.class);  bind(MacroRegistry.class).to(MacroRegistryImpl.class).in(Singleton.class);  bind(MacroProcessor.class).to(MacroProcessorImpl.class).in(Singleton.class);  GinMultibinder<Macro> macrosBinder=GinMultibinder.newSetBinder(binder(),Macro.class);  macrosBinder.addBinding().to(EditorCurrentFileNameMacro.class);  macrosBinder.addBinding().to(EditorCurrentFilePathMacro.class);  macrosBinder.addBinding().to(EditorCurrentFileRelativePathMacro.class);  macrosBinder.addBinding().to(EditorCurrentProjectNameMacro.class);  macrosBinder.addBinding().to(EditorCurrentProjectTypeMacro.class);  macrosBinder.addBinding().to(ExplorerCurrentFileNameMacro.class);  macrosBinder.addBinding().to(ExplorerCurrentFilePathMacro.class);  macrosBinder.addBinding().to(ExplorerCurrentFileParentPathMacro.class);  macrosBinder.addBinding().to(ExplorerCurrentFileRelativePathMacro.class);  macrosBinder.addBinding().to(ExplorerCurrentProjectNameMacro.class);  macrosBinder.addBinding().to(ExplorerCurrentProjectTypeMacro.class);  macrosBinder.addBinding().to(WorkspaceNameMacro.class);}  }
class C{  public UnsignedByte add(int increment){  return valueOf(getValue() + increment);}  }
class C{  public void putNextEntry(ZipEntry e) throws IOException {  ensureOpen();  if (current != null) {    closeEntry();  }  if (e.xdostime == -1) {    e.setTime(System.currentTimeMillis());  }  if (e.method == -1) {    e.method=method;  }  e.flag=0;switch (e.method) {case DEFLATED:    if (e.size == -1 || e.csize == -1 || e.crc == -1)     e.flag=8;  break;case STORED:if (e.size == -1) {  e.size=e.csize;} else if (e.csize == -1) {  e.csize=e.size;} else if (e.size != e.csize) {  throw new ZipException("STORED entry where compressed != uncompressed size");}if (e.size == -1 || e.crc == -1) {throw new ZipException("STORED entry missing size, compressed size, or crc-32");}break;default :throw new ZipException("unsupported compression method");}if (!names.add(e.name)) {throw new ZipException("duplicate entry: " + e.name);}if (zc.isUTF8()) e.flag|=EFS;current=new XEntry(e,written);xentries.add(current);writeLOC(current);}  }
class C{  public synchronized FileSetting createFileSetting(String key,File defaultValue){  String parentString=defaultValue.getParent();  if (parentString != null) {    File parent=new File(parentString);    if (!parent.isDirectory()) {      parent.mkdirs();    }  }  FileSetting result=new FileSetting(DEFAULT_PROPS,PROPS,key,defaultValue);  handleSettingInternal(result,null);  return result;}  }
class C{  @Override public AxisSpace reserveSpace(Graphics2D g2,Plot plot,Rectangle2D plotArea,RectangleEdge edge,AxisSpace space){  this.internalMarkerCycleBoundTick=null;  AxisSpace ret=super.reserveSpace(g2,plot,plotArea,edge,space);  if (this.internalMarkerCycleBoundTick == null) {    return ret;  }  FontMetrics fm=g2.getFontMetrics(getTickLabelFont());  Rectangle2D r=TextUtilities.getTextBounds(this.internalMarkerCycleBoundTick.getText(),g2,fm);  if (RectangleEdge.isTopOrBottom(edge)) {    if (isVerticalTickLabels()) {      space.add(r.getHeight() / 2,RectangleEdge.RIGHT);    } else {      space.add(r.getWidth() / 2,RectangleEdge.RIGHT);    }  } else   if (RectangleEdge.isLeftOrRight(edge)) {    if (isVerticalTickLabels()) {      space.add(r.getWidth() / 2,RectangleEdge.TOP);    } else {      space.add(r.getHeight() / 2,RectangleEdge.TOP);    }  }  return ret;}  }
class C{  private void LtoOSP(long l,byte[] sp){  sp[0]=(byte)(l >>> 56);  sp[1]=(byte)(l >>> 48);  sp[2]=(byte)(l >>> 40);  sp[3]=(byte)(l >>> 32);  sp[4]=(byte)(l >>> 24);  sp[5]=(byte)(l >>> 16);  sp[6]=(byte)(l >>> 8);  sp[7]=(byte)(l >>> 0);}  }
class C{  @Override public void validate(final StatementDescription description){  final SpeciesDescription species=description.getSpeciesContext();  final SkillDescription control=species.getControl();  if (!SimpleBdiArchitecture.class.isAssignableFrom(control.getJavaBase())) {    description.error("A plan can only be defined in a simple_bdi architecture species",IGamlIssue.WRONG_CONTEXT);    return;  }}  }
class C{  public void destroy() throws DestroyFailedException {  if (!destroyed) {    Arrays.fill(asn1Encoding,(byte)0);    client=null;    server=null;    sessionKey.destroy();    flags=null;    authTime=null;    startTime=null;    endTime=null;    renewTill=null;    clientAddresses=null;    destroyed=true;  }}  }
class C{  protected void emit_ArrowFunctionTypeExpression_FunctionTypeExpressionOLD_LeftParenthesisKeyword_1_or___LeftCurlyBracketKeyword_1_FunctionKeyword_3_LeftParenthesisKeyword_5__(EObject semanticObject,ISynNavigable transition,List<INode> nodes){  acceptNodes(transition,nodes);}  }
class C{  public boolean isXmtBusy(){  if (controller == null) {    return false;  }  return (!controller.okToSend());}  }
class C{  public PlaylistMark(sage.io.SageDataFile inStream) throws java.io.IOException {  inStream.skipBytes(1);  type=inStream.read();  playItemIdRef=inStream.readUnsignedShort();  timestamp=inStream.readInt();  entryESPID=inStream.readUnsignedShort();  duration=inStream.readInt();}  }
class C{  @Override public boolean onUnbind(Intent intent){  ((FileDownloaderBinder)mBinder).clearListeners();  return false;}  }
class C{  public static long parseXsDateTime(String value) throws ParseException {  Matcher matcher=XS_DATE_TIME_PATTERN.matcher(value);  if (!matcher.matches()) {    throw new ParseException("Invalid date/time format: " + value,0);  }  int timezoneShift;  if (matcher.group(9) == null) {    timezoneShift=0;  } else   if (matcher.group(9).equalsIgnoreCase("Z")) {    timezoneShift=0;  } else {    timezoneShift=((Integer.parseInt(matcher.group(12)) * 60 + Integer.parseInt(matcher.group(13))));    if (matcher.group(11).equals("-")) {      timezoneShift*=-1;    }  }  Calendar dateTime=new GregorianCalendar(TimeZone.getTimeZone("GMT"));  dateTime.clear();  dateTime.set(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2)) - 1,Integer.parseInt(matcher.group(3)),Integer.parseInt(matcher.group(4)),Integer.parseInt(matcher.group(5)),Integer.parseInt(matcher.group(6)));  if (!TextUtils.isEmpty(matcher.group(8))) {    final BigDecimal bd=new BigDecimal("0." + matcher.group(8));    dateTime.set(Calendar.MILLISECOND,bd.movePointRight(3).intValue());  }  long time=dateTime.getTimeInMillis();  if (timezoneShift != 0) {    time-=timezoneShift * 60000;  }  return time;}  }
class C{  public static String replaceAll(String orig,String toBeReplaced,String replacement){  int quarryLength=toBeReplaced.length();  if (quarryLength <= 0) {    return orig;  }  int index=orig.indexOf(toBeReplaced);  if (index < 0) {    return orig;  } else {    int from=0;    StringBuffer sb;    if (quarryLength < replacement.length()) {      sb=new StringBuffer(orig.length());    } else {      sb=new StringBuffer(orig.length() * 2);    }    do {      sb.append(orig.substring(from,index));      sb.append(replacement);      from=index + quarryLength;      index=orig.indexOf(toBeReplaced,from);    } while (index >= 0);    sb.append(orig.substring(from));    return sb.toString();  }}  }
class C{  public static void evolve(BinaryVariable v1,BinaryVariable v2){  if (v1.getNumberOfBits() != v2.getNumberOfBits()) {    throw new FrameworkException("binary variables not same length");  }  for (int i=0; i < v1.getNumberOfBits(); i++) {    boolean value=v1.get(i);    if ((value != v2.get(i)) && PRNG.nextBoolean()) {      v1.set(i,!value);      v2.set(i,value);    }  }}  }
class C{  protected void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  if (callAttrs)   m_selectExpression.getExpression().callVisitors(m_selectExpression,visitor);  super.callChildVisitors(visitor,callAttrs);}  }
class C{  public JSONObject put(String key,Collection value) throws JSONException {  put(key,new JSONArray(value));  return this;}  }
class C{  public float toReal(){  return _real;}  }
class C{  private void assertFirstTaskIsAsync(BpmnModel bpmnModel){  if (Boolean.TRUE.equals(configurationHelper.getProperty(ConfigurationValue.ACTIVITI_JOB_DEFINITION_ASSERT_ASYNC,Boolean.class))) {    Process process=bpmnModel.getMainProcess();    for (    StartEvent startEvent : process.findFlowElementsOfType(StartEvent.class)) {      for (      SequenceFlow sequenceFlow : startEvent.getOutgoingFlows()) {        String targetRef=sequenceFlow.getTargetRef();        FlowElement targetFlowElement=process.getFlowElement(targetRef);        if (targetFlowElement instanceof Activity) {          Assert.isTrue(((Activity)targetFlowElement).isAsynchronous(),"Element with id \"" + targetRef + "\" must be set to activiti:async=true. All tasks which start the workflow must be asynchronous to prevent certain undesired "+ "transactional behavior, such as records of workflow not being saved on errors. Please refer to Activiti and herd documentations "+ "for details.");        }      }    }  }}  }
class C{  public WampClientBuilder withAuthMethod(ClientSideAuthentication authMethod){  this.authMethods.add(authMethod);  return this;}  }
class C{  ResponseHandler executeRequest(HttpServletRequest httpRequest,String url) throws MethodNotAllowedException, IOException, HttpException {  RequestHandler requestHandler=RequestHandlerFactory.createRequestMethod(httpRequest.getMethod());  HttpMethod method=requestHandler.process(httpRequest,url);  method.setFollowRedirects(false);  if (!((HttpMethodBase)method).isAborted()) {    httpClient.executeMethod(method);    if (method.getStatusCode() == 405) {      Header allow=method.getResponseHeader("allow");      String value=allow.getValue();      throw new MethodNotAllowedException("Status code 405 from server",AllowedMethodHandler.processAllowHeader(value));    }  }  return ResponseHandlerFactory.createResponseHandler(method);}  }
class C{  public void completePendingPageChanges(){  if (!mPendingAnimations.isEmpty()) {    HashMap<View,Runnable> pendingViews=new HashMap<>(mPendingAnimations);    for (    Map.Entry<View,Runnable> e : pendingViews.entrySet()) {      e.getKey().animate().cancel();      e.getValue().run();    }  }}  }
class C{  public static int gType(int dim,int lrsDim,int geomType){  return dim * 1000 + lrsDim * 100 + geomType;}  }
class C{  public static int reverse(int number){  String reverse="";  String n=number + "";  for (int i=n.length() - 1; i >= 0; i--) {    reverse+=n.charAt(i);  }  return Integer.parseInt(reverse);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:30.239 -0500",hash_original_method="054A3F820797F764C7C7D974F4C364D1",hash_generated_method="7F5E73E17D01222EB9B6DC63B047D775") public static String toBinaryString(long v){  return IntegralToString.longToBinaryString(v);}  }
class C{  public DefaultDependencyManager(Pattern... ignoredPatterns){  ignorePatterns=Stream.of(ignoredPatterns).collect(collectingAndThen(toSet(),null));}  }
class C{  public boolean hasPreviousPage(){  return getCurrentPage() > 0;}  }
class C{  static String md5(final InputStream in,final int bufferLength) throws IOException {  final byte[] buffer=new byte[bufferLength];  try {    final MessageDigest md=MessageDigest.getInstance("MD5");    final DigestInputStream dis=new DigestInputStream(in,md);    while (dis.read(buffer) != -1) {    }    final byte[] digest=md.digest();    return digestToString(digest);  } catch (  final NoSuchAlgorithmException e) {    throw new RuntimeException(e);  }}  }
class C{  private boolean isCallerValid(Context context,int authRequirements,String packageToMatch){  boolean shouldBeGoogleSigned=(authRequirements & FLAG_SHOULD_BE_GOOGLE_SIGNED) != 0;  boolean shouldBeSystem=(authRequirements & FLAG_SHOULD_BE_SYSTEM) != 0;  String[] callingPackages=getCallingPackages(context);  PackageManager pm=context.getApplicationContext().getPackageManager();  boolean matchFound=false;  for (  String packageName : callingPackages) {    if (!TextUtils.isEmpty(packageToMatch) && !packageName.equals(packageToMatch))     continue;    matchFound=true;    if ((shouldBeGoogleSigned && !isGoogleSigned(pm,packageName)) || (shouldBeSystem && !isSystemBuild(pm,packageName))) {      return false;    }  }  return matchFound;}  }
class C{  public void xor(int offset,int width,int value){  BinaryMessage mask=new BinaryMessage(this.size());  mask.load(offset,width,value);  this.xor(mask);}  }
class C{  public void clearPeekedIDs(){  peekedEventsContext.set(null);}  }
class C{  private String createDisplayName(Target target,Object[] customConfigurations){  HttpPrefixFetchFilter subtreeFecthFilter=getUriPrefixFecthFilter(customConfigurations);  if (subtreeFecthFilter != null) {    return abbreviateDisplayName(subtreeFecthFilter.getNormalisedPrefix());  }  if (target.getContext() != null) {    return Constant.messages.getString("context.prefixName",target.getContext().getName());  } else   if (target.isInScopeOnly()) {    return Constant.messages.getString("target.allInScope");  } else   if (target.getStartNode() == null) {    if (customConfigurations != null) {      for (      Object customConfiguration : customConfigurations) {        if (customConfiguration instanceof URI) {          return abbreviateDisplayName(((URI)customConfiguration).toString());        }      }    }    return Constant.messages.getString("target.empty");  }  return abbreviateDisplayName(target.getStartNode().getHierarchicNodeName(false));}  }
class C{  @Nullable public Object row(){  return row;}  }
class C{  ServerSessionManager unregisterConnection(Connection connection){  Iterator<Map.Entry<UUID,Connection>> iterator=connections.entrySet().iterator();  while (iterator.hasNext()) {    Map.Entry<UUID,Connection> entry=iterator.next();    if (entry.getValue().equals(connection)) {      ServerSessionContext session=clients.get(entry.getKey());      if (session != null) {        session.setConnection(null);      }      iterator.remove();    }  }  return this;}  }
class C{  protected void drawRobot(boolean initialized){  robotInitialized=initialized;  repaint();}  }
class C{  private void updateDesiresForUnsuccessfulReading(long spareReadingTime){  long totalWantedGpsTimeMs=(long)(shortTimeWanted * prefs.extraWaitTimeShortTimeMultiplier + shortTimeWanted) + 1;  waitTimeMs=calculateAbsTimeNeeded(totalWantedGpsTimeMs);  if (totalWantedGpsTimeMs + spareReadingTime >= longTimeWanted) {    currTimeWanted=longTimeWanted;    longTimeWanted=(long)(longTimeWanted * prefs.longTimeMultiplier) + 1;    if (longTimeWanted > prefs.maxLongTimeWantedMs)     longTimeWanted=prefs.maxLongTimeWantedMs;  } else {    currTimeWanted=shortTimeWanted;    shortTimeWanted*=prefs.shortTimeUnsuccessfulMultiplier;    if (shortTimeWanted > prefs.shortTimeMaxMs)     shortTimeWanted=prefs.shortTimeMaxMs;  }}  }
class C{  private void updatePostFailoverPersonalities(Volume volume) throws InternalException {  _log.info("Changing personality of source and targets");  ProtectionSet protectionSet=_dbClient.queryObject(ProtectionSet.class,volume.getProtectionSet());  List<URI> volumeIDs=new ArrayList<URI>();  for (  String volumeString : protectionSet.getVolumes()) {    URI volumeURI;    try {      volumeURI=new URI(volumeString);      volumeIDs.add(volumeURI);    } catch (    URISyntaxException e) {      _log.error("URI syntax incorrect: ",e);    }  }  for (  URI protectionVolumeID : volumeIDs) {    Volume protectionVolume=_dbClient.queryObject(Volume.class,protectionVolumeID);    if ((protectionVolume.getPersonality().equals(Volume.PersonalityTypes.TARGET.toString())) && (protectionVolume.getRpCopyName().equals(volume.getRpCopyName()))) {      for (      URI potentialTargetVolumeID : volumeIDs) {        Volume potentialTargetVolume=_dbClient.queryObject(Volume.class,potentialTargetVolumeID);        if (potentialTargetVolume.getRSetName() != null && potentialTargetVolume.getRSetName().equals(protectionVolume.getRSetName()) && !potentialTargetVolumeID.equals(protectionVolume.getId())) {          if (protectionVolume.getRpTargets() == null) {            protectionVolume.setRpTargets(new StringSet());          }          protectionVolume.getRpTargets().add(String.valueOf(potentialTargetVolume.getId()));        }      }      _log.info("Change personality of failover target " + protectionVolume.getWWN() + " to source");      protectionVolume.setPersonality(Volume.PersonalityTypes.SOURCE.toString());      volume.setAccessState(Volume.VolumeAccessState.READWRITE.name());      _dbClient.persistObject(protectionVolume);    } else     if (protectionVolume.getPersonality().equals(Volume.PersonalityTypes.SOURCE.toString())) {      _log.info("Change personality of source volume " + protectionVolume.getWWN() + " to target");      protectionVolume.setPersonality(Volume.PersonalityTypes.TARGET.toString());      volume.setAccessState(Volume.VolumeAccessState.NOT_READY.name());      protectionVolume.setRpTargets(new StringSet());      _dbClient.persistObject(protectionVolume);    } else     if (!protectionVolume.getPersonality().equals(Volume.PersonalityTypes.METADATA.toString())) {      _log.info("Target " + protectionVolume.getWWN() + " is a target that remains a target");    }  }}  }
class C{  public boolean isRangeZoomable(){  return this.rangeZoomable;}  }
class C{  public static String locateChrome(){  String os=Platform.getOS();  List<File> locationsToCheck=new ArrayList<File>();  if (Platform.OS_WIN32.equals(os)) {    String[] envVariables=new String[]{"home","userprofile","home","userprofile","ProgramFiles(X86)","ProgramFiles"};    String[] appendedPaths=new String[]{"\\Local Settings\\Application Data\\Google\\Chrome\\Application\\chrome.exe","\\Local Settings\\Application Data\\Google\\Chrome\\Application\\chrome.exe","\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe","\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe","\\Google\\Chrome\\Application\\chrome.exe","\\Google\\Chrome\\Application\\chrome.exe"};    assert envVariables.length == appendedPaths.length;    for (int i=0; i < envVariables.length; i++) {      String envValue=System.getenv(envVariables[i]);      if (envValue != null) {        locationsToCheck.add(new File(envValue + appendedPaths[i]));      }    }  } else   if (Platform.OS_MACOSX.equals(os)) {    locationsToCheck.add(new File("/Applications/ChromeWithSpeedTracer.app"));    String homeDir=System.getenv("HOME");    if (homeDir != null) {      locationsToCheck.add(new File(homeDir + "/Applications/ChromeWithSpeedTracer.app"));    }  } else {    locationsToCheck.add(new File("/usr/bin/chrome"));    locationsToCheck.add(new File("/usr/local/bin/chrome"));    locationsToCheck.add(new File("/usr/bin/google-chrome"));    locationsToCheck.add(new File("/usr/local/bin/google-chrome"));    locationsToCheck.add(new File("/usr/bin/chromium"));    locationsToCheck.add(new File("/usr/local/bin/chromium"));    locationsToCheck.add(new File("/usr/bin/chromium-browser"));    locationsToCheck.add(new File("/usr/local/bin/chromium-browser"));  }  for (  File location : locationsToCheck) {    if (location.exists() && (Platform.OS_MACOSX.equals(os) || location.isFile())) {      return location.getAbsolutePath();    }  }  return null;}  }
class C{  private void removeMarketingPermission(TechnicalProduct tpRef,MarketingPermission permission,Set<Long> affectedOrgRefs,String orgId,StringBuffer orgIdsThatFailed){  if (permission == null) {    appendIdToString(orgId,orgIdsThatFailed);  } else {    affectedOrgRefs.add(Long.valueOf(permission.getOrganizationReference().getKey()));    updateStateOfMarketingProducts(tpRef,permission.getOrganizationReference().getTarget(),ServiceStatus.OBSOLETE);    ds.remove(permission);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  public ViewChangeEvent(int x,int y){  super(Events.VIEW_CHANGE);  put("x",x);  put("y",y);}  }
class C{  @Override public int onStartCommand(Intent intent,int flags,int startid){  log.info("MurmurService onStartCommand.");  return START_STICKY;}  }
class C{  public CTagManager(final Tree<CTag> tagTree,final TagType type,final SQLProvider provider){  m_tagTree=Preconditions.checkNotNull(tagTree,"IE00853: Tag tree argument can't be null");  m_type=Preconditions.checkNotNull(type,"IE00854: Type argument can't be null");  m_provider=Preconditions.checkNotNull(provider,"IE00855: Provider argument can't be null");}  }
class C{  public boolean changeDistance(double dist){  location.set(camera.getDirection());  location.negateLocal();  location.scaleAddLocal(dist,camera.getLookAt());  if (!locInBounds(location))   return (false);  camera.setLocation(location);  updateFromCamera();  updateCrosshair();  updateGeometricState(0);  changed.set(true);  return (true);}  }
class C{  public void execute(TransformerImpl transformer) throws TransformerException {}  }
class C{  public static <T>T withDataInputStream(Path self,@ClosureParams(value=SimpleType.class,options="java.io.DataInputStream") Closure<T> closure) throws IOException {  return IOGroovyMethods.withStream(newDataInputStream(self),closure);}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=xctxt.getCurrentNode();  DTMIterator nl=m_functionExpr.asIterator(xctxt,context);  XNumber score=SCORE_NONE;  if (null != nl) {    int n;    while (DTM.NULL != (n=nl.nextNode())) {      score=(n == context) ? SCORE_OTHER : SCORE_NONE;      if (score == SCORE_OTHER) {        context=n;        break;      }    }    nl.detach();  }  return score;}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'ADDRESS_BOOK' ("+ "'_id' INTEGER PRIMARY KEY ,"+ "'NAME' TEXT,"+ "'AUTHOR' TEXT);");}  }
class C{  public ArrayList<Integer> elementsStartingWith(String s){  ArrayList<Integer> alist=new ArrayList<Integer>();  for (int i=0; i < m_size; i++)   if (getString(i).startsWith(s))   alist.add(new Integer(i));  return alist;}  }
class C{  public CompressorStreamDeflater(IDatChunkWriter idatCw,int maxBlockLen,long totalLen,Deflater def){  super(idatCw,maxBlockLen,totalLen);  this.deflater=def == null ? new Deflater() : def;  this.deflaterIsOwn=def == null;}  }
class C{  public static int cs_dropzeros(Dcs A){  return (Dcs_fkeep.cs_fkeep(A,new Cs_nonzero(),null));}  }
class C{  public void updateNCharacterStream(int columnIndex,java.io.Reader x) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("cachedrowsetimpl.featnotsupp").toString());}  }
class C{  public ClassificationDataSet(DataSet dataSet,int predicting){  this(dataSet.getDataPoints(),predicting);  if (numericalVariableNames == null) {    numericalVariableNames=new ArrayList<String>();    String s="";    for (int i=0; i < getNumNumericalVars(); i++)     numericalVariableNames.add(s);  }  for (int i=0; i < getNumNumericalVars(); i++)   this.numericalVariableNames.set(i,dataSet.getNumericName(i));}  }
class C{  @Override public ServiceExceptionExecution rethrow(String msg){  return new ServiceExceptionExecution(msg,this);}  }
class C{  public void removeSingleInterest(Object key,int interestType,boolean isDurable,boolean receiveUpdatesAsInvalidates){  this.pool.getRITracker().removeSingleInterest(this.region,key,interestType,isDurable,receiveUpdatesAsInvalidates);}  }
class C{  public CssPropertyData cssPropertyToData(String key,CssPropertySignature sig){  CssPropertyData data=new CssPropertyData(key,sig);  new Inspector(data).inspect();  return data;}  }
class C{  public static void drawRotatedString(AttributedString text,Graphics2D g2,float x,float y,TextAnchor textAnchor,double angle,TextAnchor rotationAnchor){  ParamChecks.nullNotPermitted(text,"text");  float[] textAdj=deriveTextBoundsAnchorOffsets(g2,text,textAnchor,null);  float[] rotateAdj=deriveRotationAnchorOffsets(g2,text,rotationAnchor);  drawRotatedString(text,g2,x + textAdj[0],y + textAdj[1],angle,x + textAdj[0] + rotateAdj[0],y + textAdj[1] + rotateAdj[1]);}  }
class C{  public boolean hasBatchId(){  return hasExtension(BatchId.class);}  }
class C{  static void appendTime(StringBuilder buff,long nanos,boolean alwaysAddMillis){  if (nanos < 0) {    buff.append('-');    nanos=-nanos;  }  long ms=nanos / 1000000;  nanos-=ms * 1000000;  long s=ms / 1000;  ms-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  StringUtils.appendZeroPadded(buff,2,h);  buff.append(':');  StringUtils.appendZeroPadded(buff,2,m);  buff.append(':');  StringUtils.appendZeroPadded(buff,2,s);  if (alwaysAddMillis || ms > 0 || nanos > 0) {    buff.append('.');    int start=buff.length();    StringUtils.appendZeroPadded(buff,3,ms);    if (nanos > 0) {      StringUtils.appendZeroPadded(buff,6,nanos);    }    for (int i=buff.length() - 1; i > start; i--) {      if (buff.charAt(i) != '0') {        break;      }      buff.deleteCharAt(i);    }  }}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  static void changeClassName(Identifier oldName,Identifier newName){  ((ClassType)Type.tClass(oldName)).className=newName;}  }
class C{  private String extractPath(final String uri){  return DefaultWildcardStreamLocator.stripQueryPath(uri.replace(PREFIX,StringUtils.EMPTY));}  }
class C{  public void invoke(BasicBlock bb){  BURS_StateCoder burs=makeCoder();  for (Enumeration<Instruction> e=bb.forwardRealInstrEnumerator(); e.hasMoreElements(); ) {    Instruction s=e.nextElement();    AbstractBURS_TreeNode tn=buildTree(s);    label(tn);    mark(tn,(byte)1);    generateTree(tn,burs);  }}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.009 -0500",hash_original_method="B36EFEED8A01C5AB548445C2A30D3515",hash_generated_method="AB254B7381DE3B17EA718AC261CF38C6") public static void fill(byte[] array,byte value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public EmpiricalDistribution(Collection<? extends Assignment> samples){  this();  for (  Assignment a : samples) {    addSample(a);  }}  }
class C{  private static void createInitialEdges(final View view,final Collection<FunctionBlock> passedFunctions,final Map<BasicBlock,ViewNode> nodeMap){  for (  final FunctionBlock functionBlock : passedFunctions) {    final Function function=functionBlock.getFunction();    for (    final BlockEdge edge : function.getGraph().getEdges()) {      final ViewEdge newEdge=view.createEdge(nodeMap.get(edge.getSource()),nodeMap.get(edge.getTarget()),edge.getType());      newEdge.setColor(getEdgeColor(edge));    }  }}  }
class C{  public void writeFile(String directoryName) throws CannotCompileException, IOException {  DataOutputStream out=makeFileOutput(directoryName);  try {    toBytecode(out);  }  finally {    out.close();  }}  }
class C{  public static VOSubscriptionDetails toVOSubscriptionDetails(Subscription subscription,LocalizerFacade facade){  if (subscription == null) {    return null;  }  VOSubscriptionDetails voSubDet=new VOSubscriptionDetails();  fillAllFields(voSubDet,subscription,facade);  fillVOSubscriptionDetails(voSubDet,subscription,facade);  updateValueObject(voSubDet,subscription);  return voSubDet;}  }
class C{  public static String encode(byte[] input){  if (input.length == 0) {    return "";  }  int zeros=0;  while (zeros < input.length && input[zeros] == 0) {    ++zeros;  }  input=Arrays.copyOf(input,input.length);  char[] encoded=new char[input.length * 2];  int outputStart=encoded.length;  for (int inputStart=zeros; inputStart < input.length; ) {    encoded[--outputStart]=ALPHABET[divmod(input,inputStart,256,58)];    if (input[inputStart] == 0) {      ++inputStart;    }  }  while (outputStart < encoded.length && encoded[outputStart] == ENCODED_ZERO) {    ++outputStart;  }  while (--zeros >= 0) {    encoded[--outputStart]=ENCODED_ZERO;  }  return new String(encoded,outputStart,encoded.length - outputStart);}  }
class C{  public ProblemException build(){  if (this.message == null) {    this.message=this.cause != null ? this.cause.getMessage() : null;  }  if (this.message == null) {    this.message="Empty message in exception";  }  return new ProblemException(this);}  }
class C{  public RetrievalPerformanceResult run(Database database,Relation<O> relation,Relation<?> lrelation){  final DistanceQuery<O> distQuery=database.getDistanceQuery(relation,getDistanceFunction());  final DBIDs ids=DBIDUtil.randomSample(relation.getDBIDs(),sampling,random);  ModifiableDBIDs posn=DBIDUtil.newHashSet();  ModifiableDoubleDBIDList nlist=DBIDUtil.newDistanceDBIDList(relation.size());  TObjectIntHashMap<Object> counters=new TObjectIntHashMap<>();  double map=0., mroc=0.;  double[] knnperf=new double[maxk];  int samples=0;  FiniteProgress objloop=LOG.isVerbose() ? new FiniteProgress("Processing query objects",ids.size(),LOG) : null;  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    Object label=lrelation.get(iter);    findMatches(posn,lrelation,label);    if (posn.size() > 0) {      computeDistances(nlist,iter,distQuery,relation);      if (nlist.size() != relation.size() - (includeSelf ? 0 : 1)) {        LOG.warning("Neighbor list does not have the desired size: " + nlist.size());      }      map+=AveragePrecisionEvaluation.STATIC.evaluate(posn,nlist);      mroc+=ROCEvaluation.STATIC.evaluate(posn,nlist);      KNNEvaluator.STATIC.evaluateKNN(knnperf,nlist,lrelation,counters,label);      samples+=1;    }    LOG.incrementProcessed(objloop);  }  LOG.ensureCompleted(objloop);  if (samples < 1) {    throw new AbortException("No object matched - are labels parsed correctly?");  }  if (!(map >= 0) || !(mroc >= 0)) {    throw new AbortException("NaN in MAP/ROC.");  }  map/=samples;  mroc/=samples;  LOG.statistics(new DoubleStatistic(PREFIX + ".map",map));  LOG.statistics(new DoubleStatistic(PREFIX + ".rocauc",mroc));  LOG.statistics(new DoubleStatistic(PREFIX + ".samples",samples));  for (int k=0; k < maxk; k++) {    knnperf[k]=knnperf[k] / samples;    LOG.statistics(new DoubleStatistic(PREFIX + ".knn-" + (k + 1),knnperf[k]));  }  return new RetrievalPerformanceResult(samples,map,mroc,knnperf);}  }
class C{  public int addBigrams(String word1,String word2){  if (mIme != null && mIme.getCurrentWord().isAutoCapitalized()) {    word2=Character.toLowerCase(word2.charAt(0)) + word2.substring(1);  }  int freq=super.addBigram(word1,word2,FREQUENCY_FOR_TYPED);  if (freq > FREQUENCY_MAX)   freq=FREQUENCY_MAX;synchronized (mPendingWritesLock) {    if (freq == FREQUENCY_FOR_TYPED || mPendingWrites.isEmpty()) {      mPendingWrites.add(new Bigram(word1,word2,freq));    } else {      Bigram bi=new Bigram(word1,word2,freq);      mPendingWrites.remove(bi);      mPendingWrites.add(bi);    }  }  return freq;}  }
class C{  public boolean requiresFiles(){  boolean result=false;  if (getRequiredFiles() != null && getRequiredFiles().size() > 0) {    result=true;  }  return result;}  }
class C{  public void cancelScheduledEvent(URI eventId){  client.post(String.class,PathConstants.SCHEDULED_EVENTS_CANCELLATION_URL,eventId);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:30.612 -0500",hash_original_method="614329ACA245384517EF28FF3609B04B",hash_generated_method="9BACAE2057F7A0E8F3874F7616D578C1") private void adjustViewsUpOrDown(){  final int childCount=getChildCount();  if (childCount > 0) {    int delta;    View child;    if (!mStackFromBottom) {      child=getChildAt(0);      delta=child.getTop() - mListPadding.top;      if (mFirstPosition != 0) {        delta-=mVerticalSpacing;      }      if (delta < 0) {        delta=0;      }    } else {      child=getChildAt(childCount - 1);      delta=child.getBottom() - (getHeight() - mListPadding.bottom);      if (mFirstPosition + childCount < mItemCount) {        delta+=mVerticalSpacing;      }      if (delta > 0) {        delta=0;      }    }    if (delta != 0) {      offsetChildrenTopAndBottom(-delta);    }  }}  }
class C{  @Override protected AccessCheckingPortal createPortal(final ConfigurableFactoryContext ctx){  String rejectedMessage=getStringValue(ctx,"rejected");  ChatCondition condition=getCondition(ctx);  ChatAction action=getAction(ctx);  if (rejectedMessage != null) {    return new ConditionAndActionPortal(condition,rejectedMessage,action);  } else {    return new ConditionAndActionPortal(condition,action);  }}  }
class C{  public CustomMediaSizeName findCustomMedia(MediaSizeName media){  if (customMediaSizeNames == null) {    return null;  }  for (int i=0; i < customMediaSizeNames.length; i++) {    CustomMediaSizeName custom=(CustomMediaSizeName)customMediaSizeNames[i];    MediaSizeName msn=custom.getStandardMedia();    if (media.equals(msn)) {      return customMediaSizeNames[i];    }  }  return null;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case DatatypePackage.OBJECT_PROPERTY_TYPE__TYPE:    setType((Type)null);  return;}super.eUnset(featureID);}  }
class C{  public void addCostsPerUser(final UserAssignmentCostsType userAssigmentCostsType,final UserAssignmentFactors userAssignmentsFactors){  final Set<Long> userKeys=userAssignmentsFactors.getUserKeys();  for (  long userKey : userKeys) {    final UserAssignmentDetails user=userAssignmentsFactors.getUserAssignmentDetails(Long.valueOf(userKey));    final UserAssignmentCostsByUserType userAssignmentCostsByUserType=factory.createUserAssignmentCostsByUserType();    userAssignmentCostsByUserType.setUserId(user.getUserId());    userAssignmentCostsByUserType.setFactor(BigDecimal.valueOf(user.getUsageDetails().getFactor()));    userAssigmentCostsType.getUserAssignmentCostsByUser().add(userAssignmentCostsByUserType);  }}  }
class C{  private void createNewLineString(Fusiontables fusiontables,String tableId,Track track) throws IOException {  String values=SendFusionTablesUtils.formatSqlValues(track.getName(),track.getDescription(),SendFusionTablesUtils.getKmlLineString(track.getLocations()));  String sql="INSERT INTO " + tableId + " (name,description,geometry) VALUES "+ values;  HttpContent content=ByteArrayContent.fromString(null,"sql=" + sql);  GoogleUrl url=new GoogleUrl("https://www.googleapis.com/fusiontables/v1/query");  fusiontables.getRequestFactory().buildPostRequest(url,content).execute();}  }
class C{  public GridSpacingDecoration(int spacing,int numColumns,int viewType){  this.spacing=spacing;  this.numColumns=numColumns;  this.viewType=viewType;}  }
class C{  public MethodRefITCase(String name){  super(name);}  }
class C{  @Override public Object importService(ImportedServiceDescriptor serviceDescriptor) throws ServiceImporterException {  try {    return serviceDescriptor.metaInfo(ApplicationContext.class).getBean(serviceDescriptor.identity().toString(),serviceDescriptor.type());  } catch (  Throwable e) {    throw new ServiceImporterException("Could not import Spring service with id " + serviceDescriptor.identity(),e);  }}  }
class C{  private void readQuantSpectralCoeffs(int selector,int codingFlag,int[] mantissas,int numCodes){  if (selector == 1) {    numCodes/=2;  }  if (codingFlag != 0) {    int numBits=clc_length_tab[selector];    if (selector > 1) {      for (int i=0; i < numCodes; i++) {        int code=(numBits != 0 ? signExtend(br.read(numBits),numBits) : 0);        mantissas[i]=code;      }    } else {      for (int i=0; i < numCodes; i++) {        int code=(numBits != 0 ? br.read(numBits) : 0);        mantissas[i * 2]=mantissa_clc_tab[code >> 2];        mantissas[i * 2 + 1]=mantissa_clc_tab[code & 3];      }    }  } else {    if (selector != 1) {      for (int i=0; i < numCodes; i++) {        int huffSymb=spectral_coeff_tab[selector - 1].getVLC2(br,3);        huffSymb+=1;        int code=huffSymb >> 1;        if ((huffSymb & 1) != 0) {          code=-code;        }        mantissas[i]=code;      }    } else {      for (int i=0; i < numCodes; i++) {        int huffSymb=spectral_coeff_tab[selector - 1].getVLC2(br,3);        mantissas[i * 2]=mantissa_vlc_tab[huffSymb * 2];        mantissas[i * 2 + 1]=mantissa_vlc_tab[huffSymb * 2 + 1];      }    }  }}  }
class C{  public void eliminarConsultaExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  String id=request.getParameter(Constants.ID);  if (StringUtils.isNotBlank(id)) {    try {      getGestionConsultasBI(request).eliminarConsultas(new String[]{id});      goBackExecuteLogic(mappings,form,request,response);      return;    } catch (    ConsultaActionNotAllowedException e) {      obtenerErrores(request,true).add(ExceptionMapper.getErrorsExcepcion(request,e));    }  }  goLastClientExecuteLogic(mappings,form,request,response);}  }
class C{  public static RemoveNetworkParams create(@NotNull String netId){  return new RemoveNetworkParams().withNetworkId(netId);}  }
class C{  public static void initialize(Class<?>... classes){  for (  Class<?> clazz : classes) {    try {      Class.forName(clazz.getName(),true,clazz.getClassLoader());    } catch (    ClassNotFoundException e) {      throw new AssertionError(e);    }  }}  }
class C{  protected boolean isInfoEnabled(){  return trace.isInfoEnabled();}  }
class C{  public Iterator fieldValuesIterator(){  return super.iterator();}  }
class C{  public KillsQuestSlotNeedUpdateCondition(String quest,int index,List<String> creatures,boolean do_update){  this.questSlot=checkNotNull(quest);  this.questIndex=index;  this.creatures=creatures;  this.do_update=do_update;  this.questGroupIndex=-1;  this.allcreatures=null;}  }
class C{  public static char toLowerAscii(char c){  if (isUppercaseAlpha(c)) {    c+=(char)0x20;  }  return c;}  }
class C{  public void configureManagersPR2(){  mode=PR3MODE;  InstanceManager.store(getPowerManager(),jmri.PowerManager.class);  InstanceManager.setThrottleManager(getThrottleManager());  jmri.InstanceManager.setProgrammerManager(getProgrammerManager());}  }
class C{  public void testLogReadbackWithFiltering() throws Exception {  File logDir=prepareLogDir("testLogReadbackWithFiltering");  DiskLog log=openLog(logDir,false);  long seqno=0;  for (int i=1; i <= 3; i++) {    this.writeEventsToLog(log,seqno,7);    seqno+=7;    LogConnection conn=log.connect(false);    THLEvent e=this.createFilteredTHLEvent(seqno,seqno + 2,(short)i);    conn.store(e,false);    conn.commit();    conn.release();    seqno+=3;  }  assertEquals("Should have seqno 27 as last entry",27,log.getMaxSeqno());  log.validate();  log.release();  DiskLog log2=openLog(logDir,true);  log2.validate();  LogConnection conn2=log2.connect(true);  assertEquals("Should have seqno 27 as last entry on reopen",27,log.getMaxSeqno());  seqno=0;  assertTrue("Seeking sequence number 1",conn2.seek(seqno,(short)0));  for (int i=1; i <= 24; i++) {    THLEvent e=conn2.next();    ReplDBMSEvent replEvent=(ReplDBMSEvent)e.getReplEvent();    if (i % 8 == 0) {      assertTrue("Expect a ReplDBMSFilteredEvent",replEvent instanceof ReplDBMSFilteredEvent);      ReplDBMSFilteredEvent filterEvent=(ReplDBMSFilteredEvent)replEvent;      assertEquals("Expected start seqno of filtered events",seqno,filterEvent.getSeqno());      assertEquals("Expected end seqno of filtered events",seqno + 2,filterEvent.getSeqnoEnd());      seqno+=3;    } else {      assertEquals("Expected seqno of next event",seqno,replEvent.getSeqno());      seqno++;    }  }  log2.release();}  }
class C{  public NodeMetaData(final String platform,final String application,final NodeVersion version,final int networkId,final int featuresBitmask){  this.platform=platform;  this.application=application;  this.version=null == version ? NodeVersion.ZERO : version;  this.networkId=networkId;  this.featuresBitmask=featuresBitmask;}  }
