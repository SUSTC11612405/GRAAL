class C{  protected Geometry transformMultiPolygon(MultiPolygon geom,Geometry parent){  Geometry rawGeom=super.transformMultiPolygon(geom,parent);  return createValidArea(rawGeom);}  }
class C{  public static void main(String[] args) throws IllegalArgumentException {  FlagConfig flagConfig=FlagConfig.getFlagConfig(args);  args=flagConfig.remainingArgs;  if (args.length != 1) {    System.out.println("Wrong number of arguments.");    usage();    return;  }  CloseableVectorStore vecReader;  try {    vecReader=VectorStoreReader.openVectorStore(args[0],flagConfig);  } catch (  IOException e) {    System.out.println("Failed to open vector store from file: '" + args[0] + "'");    logger.info(e.getMessage());    throw new IllegalArgumentException("Failed to parse arguments for ClusterVectorStore");  }  logger.info("Reading vectors into memory ...");  int numVectors=vecReader.getNumVectors();  ObjectVector[] resultsVectors=new ObjectVector[numVectors];  Enumeration<ObjectVector> vecEnum=vecReader.getAllVectors();  int offset=0;  while (vecEnum.hasMoreElements()) {    resultsVectors[offset]=vecEnum.nextElement();    ++offset;  }  vecReader.close();  Hashtable<String,int[]> mainOverlapResults=null;  for (int runNumber=0; runNumber < numRunsForOverlap; ++runNumber) {    logger.info("Clustering vectors ...");    ClusterResults.Clusters clusters=ClusterResults.kMeansCluster(resultsVectors,flagConfig);    printAllCusters(flagConfig,resultsVectors,clusters);    if (writeCentroidsFile) {      ClusterResults.writeCentroidsToFile(clusters,flagConfig);    }    if (measureClusterOverlaps) {      Hashtable<String,int[]> newOverlapResults=clusterOverlapMeasure(clusters.clusterMappings,resultsVectors);      if (mainOverlapResults == null) {        mainOverlapResults=newOverlapResults;      } else {        mergeTables(newOverlapResults,mainOverlapResults);      }      for (Enumeration<String> keys=mainOverlapResults.keys(); keys.hasMoreElements(); ) {        String key=keys.nextElement();        int[] matchAndTotal=mainOverlapResults.get(key);        System.out.println(key + "\t" + (float)matchAndTotal[0] / (float)matchAndTotal[1]);      }    }  }}  }
class C{  public static PrivateKey load(InputStream is) throws IOException, CryptoException {  byte[] pvk=ReadUtil.readFully(is);  ByteBuffer bb=ByteBuffer.wrap(pvk);  bb.order(ByteOrder.LITTLE_ENDIAN);  long keyType=readReservedMagicKeyType(bb);  long encrypted=UnsignedUtil.getInt(bb);  if (encrypted != PVK_UNENCRYPTED) {    throw new PrivateKeyEncryptedException(MessageFormat.format(res.getString("MsPvkIsEncrypted.exception.message"),Long.toHexString(encrypted),Long.toHexString(PVK_UNENCRYPTED)));  }  long saltLength=UnsignedUtil.getInt(bb);  if (saltLength != UNENCRYPTED_SALT_LENGTH) {    throw new CryptoException(MessageFormat.format(res.getString("InvalidMsPvkSaltLengthField.exception.message"),Long.toHexString(saltLength),Long.toHexString(UNENCRYPTED_SALT_LENGTH)));  }  long keyLength=UnsignedUtil.getInt(bb);  readPrivateKeyBlobHeader(bb,keyType);  byte[] privateKeyBlob=new byte[bb.remaining()];  bb.get(privateKeyBlob);  if (keyLength != (privateKeyBlob.length + BLOB_HEADER_LENGTH)) {    throw new CryptoException(MessageFormat.format(res.getString("InvalidMsPvkKeyLengthField.exception.message"),Long.toHexString(keyLength),Long.toHexString(privateKeyBlob.length + BLOB_HEADER_LENGTH)));  }  return blobToPrivateKey(privateKeyBlob);}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  maybeParse();  out.defaultWriteObject();}  }
class C{  public SoftReference(T r){  super(r,null);}  }
class C{  public boolean retrieveImap(String user) throws IllegalArgumentException, IOException, ServiceException {  if (isBlankOrNullString(user)) {    throw new IllegalArgumentException();  }  logger.log(Level.INFO,"Getting IMAP settings for user " + user + " ...");  GenericEntry imapEntry=retrieveSettingsEntry(user,Constants.IMAP);  if (imapEntry != null && imapEntry.getProperty(Constants.ENABLE).equals(Constants.TRUE))   return true;  return false;}  }
class C{  protected static void print(String msg){  System.out.print(msg);}  }
class C{  public OptionSet removeContentFormat(){  content_format=null;  return this;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:24.535 -0500",hash_original_method="ACC9A2408A6E532361DDB7BDD50DD489",hash_generated_method="BBA34FF634AACE83D8EC3A15C7EA11FF") public void incrementLocalSequenceNumber(){  ++this.localSequenceNumber;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case EipPackage.METADATABLE__OWNED_METADATAS:    return getOwnedMetadatas();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public static String extractNameFromSchema(String schema,String schemaName,String fallbackName){  String resolvedName=null;  if (schema != null) {    int startIdx=0;    String type=extractTopItem("type",schema,startIdx);    if (type != null && type.equalsIgnoreCase("array")) {      int itemsIdx=schema.indexOf("\"items\"");      if (itemsIdx != -1) {        startIdx=itemsIdx + 7;      }      String ref=extractTopItem("$ref",schema,startIdx);      if (ref != null) {        logger.info("Loading referenced schema " + ref);        ref=ref.replace("classpath:","");        try {          schema=IOUtils.toString(Thread.currentThread().getContextClassLoader().getResourceAsStream(ref),"UTF-8");          startIdx=0;        } catch (        IOException e) {          logger.info("Erro Loading referenced schema " + ref,e);        }      }    }    String javaType=extractTopItem("javaType",schema,startIdx);    if (StringUtils.hasText(javaType)) {      int dotIdx=javaType.lastIndexOf(".");      if (dotIdx > -1) {        javaType=javaType.substring(dotIdx + 1);      }      resolvedName=javaType;    } else {      String id=extractTopItem("id",schema,startIdx);      if (StringUtils.hasText(id)) {        if (id.startsWith("urn:") && ((id.lastIndexOf(":") + 1) < id.length())) {          id=id.substring(id.lastIndexOf(":") + 1);        } else         if (id.startsWith(JSON_SCHEMA_IDENT)) {          if (id.length() > (JSON_SCHEMA_IDENT.length() + 3)) {            id=id.substring(JSON_SCHEMA_IDENT.length());          }        }        resolvedName=StringUtils.capitalize(id);      }      if (!NamingHelper.isValidJavaClassName(resolvedName)) {        if (NamingHelper.isValidJavaClassName(schemaName)) {          return Inflector.capitalize(schemaName);        } else {          resolvedName=fallbackName;        }      }    }  }  return resolvedName;}  }
class C{  @PostMapping("/users/{verificationCode}/verify") public U verifyUser(@PathVariable String verificationCode){  log.debug("Verifying user ...");  lemonService.verifyUser(verificationCode);  return lemonService.userForClient();}  }
class C{  protected void sequence_ExportedVariableBinding(ISerializationContext context,ExportedVariableBinding semanticObject){  if (errorAcceptor != null) {    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.VARIABLE_BINDING__PATTERN) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.VARIABLE_BINDING__PATTERN));    if (transientValues.isValueTransient(semanticObject,N4JSPackage.Literals.VARIABLE_BINDING__EXPRESSION) == ValueTransient.YES)     errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject,N4JSPackage.Literals.VARIABLE_BINDING__EXPRESSION));  }  SequenceFeeder feeder=createSequencerFeeder(context,semanticObject);  feeder.accept(grammarAccess.getExportedVariableBindingAccess().getPatternBindingPatternParserRuleCall_0_0(),semanticObject.getPattern());  feeder.accept(grammarAccess.getExportedVariableBindingAccess().getExpressionAssignmentExpressionParserRuleCall_2_0(),semanticObject.getExpression());  feeder.finish();}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public static Volume checkStorageVolumeExistsInDB(DbClient dbClient,String nativeGuid) throws IOException {  List<Volume> volumes=CustomQueryUtility.getActiveVolumeByNativeGuid(dbClient,nativeGuid);  Iterator<Volume> volumesItr=volumes.iterator();  if (volumesItr.hasNext()) {    return volumesItr.next();  }  return null;}  }
class C{  public void testEqualsDifferentRows(){  MockModel model1=new MockModel();  MockModel model2=new MockModel();  MockModel model3;  model1.save();  model2.save();  model3=Model.load(MockModel.class,model1.getId());  assertFalse(model1.equals(model2));  assertFalse(model2.equals(model1));  assertTrue(model1.equals(model3));  assertTrue(model1.equals(model3));  assertFalse(model3.equals(model2));  assertFalse(model2.equals(model3));}  }
class C{  public boolean isEmpty(){  return isDefaultInstance();}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.498 -0500",hash_original_method="8AF64E1EA84DF175FDB50570C8CEC5BF",hash_generated_method="21B6D80DCB62FCFE1606C3D631A5E0D3") public static void resetMetaState(Spannable text){  text.removeSpan(CAP);  text.removeSpan(ALT);  text.removeSpan(SYM);  text.removeSpan(SELECTING);}  }
class C{  private static int createExpressionTree(final SQLProvider provider,final Set<INaviOperandTreeNode> nodes,final INaviModule module) throws SQLException {  final int moduleId=module.getConfiguration().getId();  final ResultSet resultSet=provider.getConnection().executeQuery("select max(id) + 1 AS id from " + CTableNames.EXPRESSION_TREE_IDS_TABLE + " where module_id = "+ moduleId,true);  int expressionTreeId=-1;  try {    if (resultSet.next()) {      expressionTreeId=resultSet.getInt("id");    }  }  finally {    resultSet.close();  }  provider.getConnection().executeUpdate(String.format("insert into " + CTableNames.EXPRESSION_TREE_IDS_TABLE + " values(%d , %d)",moduleId,expressionTreeId),true);  for (  final INaviOperandTreeNode node : nodes) {    provider.getConnection().executeUpdate(String.format("insert into " + CTableNames.EXPRESSION_TREE_MAPPING_TABLE + " values(%d, %d, %d)",moduleId,expressionTreeId,node.getId()),true);  }  return expressionTreeId;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.237 -0500",hash_original_method="23655B86BFA253F8DFEBCBADE0DA1F73",hash_generated_method="B1D7D4075D6AEAC29FB9F4ABA7263B55") public ServerHello(HandshakeIODataStream in,int length) throws IOException {  server_version[0]=(byte)in.read();  server_version[1]=(byte)in.read();  Streams.readFully(in,random);  int size=in.readUint8();  session_id=new byte[size];  in.read(session_id,0,size);  byte b0=(byte)in.read();  byte b1=(byte)in.read();  cipher_suite=CipherSuite.getByCode(b0,b1);  compression_method=(byte)in.read();  this.length=38 + session_id.length;  if (this.length != length) {    fatalAlert(AlertProtocol.DECODE_ERROR,"DECODE ERROR: incorrect ServerHello");  }}  }
class C{  public boolean isObject(){  return (m_NodeType == NodeType.OBJECT);}  }
class C{  public synchronized boolean collides(final Entity entity,final double x,final double y,final boolean checkObjects){  if (collisionMap.collides(x,y,entity.getWidth(),entity.getHeight())) {    return true;  }  if (checkObjects) {    Rectangle2D area=entity.getArea(x,y);    return collidesObjects(entity,area);  }  return false;}  }
class C{  public IDriveRequest buildRequest(final List<Option> options){  return new DriveRequest(getRequestUrl(),getClient(),options);}  }
class C{  @Override public void run(){  amIActive=true;  String destHeader=null;  WhiteboxRaster image=null;  WhiteboxRaster destination=null;  WhiteboxRasterInfo imageInfo=null;  int nCols=0;  int nRows=0;  double imageNoData=-32768;  double outputNoData=-32768;  int numImages;  double x, y, z;  int progress=0;  int col, row;  int a, i;  String inputFilesString=null;  String[] imageFiles;  String resampleMethod="nearest neighbour";  double north, south, east, west;  double gridResX, gridResY;  int currentFile=-1;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  destHeader=args[1];  resampleMethod=args[2].toLowerCase().trim();  if (!resampleMethod.equals("nearest neighbour") && !resampleMethod.equals("bilinear") && !resampleMethod.equals("cubic convolution")) {    showFeedback("Resample method not recognized");    return;  }  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  if (numImages < 1) {    showFeedback("At least one images must be specified.");    return;  }  try {    destination=new WhiteboxRaster(destHeader,"rw");    nCols=destination.getNumberColumns();    nRows=destination.getNumberRows();    int nColsLessOne=nCols - 1;    int nRowsLessOne=nRows - 1;    north=destination.getNorth();    south=destination.getSouth();    east=destination.getEast();    west=destination.getWest();    gridResX=destination.getCellSizeX();    gridResY=destination.getCellSizeY();    double northernEdge=north - gridResY;    double westernEdge=west + gridResX;    if (north < south) {      northernEdge=north + gridResY;    }    if (east < west) {      westernEdge=west - gridResX;    }    outputNoData=destination.getNoDataValue();    double yRange=north - south - gridResY;    double xRange=east - west - gridResX;    int sourceCol, sourceRow;    double[][] imageData=new double[numImages][11];    for (a=0; a < numImages; a++) {      imageInfo=new WhiteboxRasterInfo(imageFiles[a]);      imageData[a][0]=imageInfo.getNorth();      imageData[a][1]=imageInfo.getSouth();      imageData[a][2]=imageInfo.getEast();      imageData[a][3]=imageInfo.getWest();      imageData[a][4]=imageInfo.getNumberRows();      imageData[a][5]=imageInfo.getNumberColumns();      imageData[a][6]=imageInfo.getCellSizeX();      imageData[a][7]=imageInfo.getCellSizeY();      imageData[a][8]=imageInfo.getNoDataValue();      imageData[a][9]=imageInfo.getEast() - imageInfo.getWest();      imageData[a][10]=imageInfo.getNorth() - imageInfo.getSouth();    }    if (resampleMethod.equals("nearest neighbour")) {      for (row=0; row < nRows; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        for (col=0; col < nCols; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          for (a=0; a < numImages; a++) {            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              if (a != currentFile) {                if (currentFile >= 0) {                  image.close();                }                image=new WhiteboxRaster(imageFiles[a],"r");                currentFile=a;              }              sourceRow=(int)Math.round((imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5));              sourceCol=(int)Math.round((x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5));              z=image.getValue(sourceRow,sourceCol);              if (z != imageData[a][8]) {                destination.setValue(row,col,z);                break;              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      image.close();    } else {      if (destination.getDataType() != WhiteboxRaster.DataType.DOUBLE && destination.getDataType() != WhiteboxRaster.DataType.FLOAT) {        showFeedback("The destination image is not of an appropriate data" + " type (i.e. double or float) to perform this operation.");        return;      }      double dX, dY;      double srcRow, srcCol;      double originRow, originCol;      double rowN, colN;      double sumOfDist;      double[] shiftX;      double[] shiftY;      int numNeighbours=0;      double[][] neighbour;      if (resampleMethod.equals("cubic convolution")) {        shiftX=new double[]{-1,0,1,2,-1,0,1,2,-1,0,1,2,-1,0,1,2};        shiftY=new double[]{-1,-1,-1,-1,0,0,0,0,1,1,1,1,2,2,2,2};        numNeighbours=16;        neighbour=new double[16][2];      } else {        shiftX=new double[]{0,1,0,1};        shiftY=new double[]{0,0,1,1};        numNeighbours=4;        neighbour=new double[4][2];      }      for (row=0; row < nRows; row++) {        y=northernEdge - (yRange * row) / nRowsLessOne;        for (col=0; col < nCols; col++) {          x=westernEdge + (xRange * col) / nColsLessOne;          for (a=0; a < numImages; a++) {            if (isBetween(y,imageData[a][0],imageData[a][1]) && isBetween(x,imageData[a][2],imageData[a][3])) {              if (a != currentFile) {                if (currentFile >= 0) {                  image.close();                }                image=new WhiteboxRaster(imageFiles[a],"r");                currentFile=a;              }              imageNoData=imageData[a][8];              srcRow=(imageData[a][0] - y) / imageData[a][10] * (imageData[a][4] - 0.5);              srcCol=(x - imageData[a][3]) / imageData[a][9] * (imageData[a][5] - 0.5);              originRow=Math.floor(srcRow);              originCol=Math.floor(srcCol);              sumOfDist=0;              for (i=0; i < numNeighbours; i++) {                rowN=originRow + shiftY[i];                colN=originCol + shiftX[i];                neighbour[i][0]=image.getValue((int)rowN,(int)colN);                dY=rowN - srcRow;                dX=colN - srcCol;                if ((dX + dY) != 0 && neighbour[i][0] != imageNoData) {                  neighbour[i][1]=1 / (dX * dX + dY * dY);                  sumOfDist+=neighbour[i][1];                } else                 if (neighbour[i][0] == imageNoData) {                  neighbour[i][1]=0;                } else {                  destination.setValue(row,col,neighbour[i][0]);                  break;                }              }              if (sumOfDist > 0) {                z=0;                for (i=0; i < numNeighbours; i++) {                  z+=(neighbour[i][0] * neighbour[i][1]) / sumOfDist;                }                destination.setValue(row,col,z);                break;              } else {                destination.setValue(row,col,outputNoData);              }            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(100f * row / (nRows - 1));        updateProgress(progress);      }      image.close();    }    destination.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    destination.addMetadataEntry("Created on " + new Date());    destination.close();    returnData(destHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void touch(long qAddr,long addr){  lrus[LruStripe.order(qAddr,mem)].touch(qAddr,addr);}  }
class C{  public void onSheetHidden(){}  }
class C{  public void onReleased(boolean inside){  pressed=!pressed;}  }
class C{  private static Path doPath(String s){  int n=s.length();  ParserHelper ph=new ParserHelper(s,0);  ph.skipWhitespace();  Path p=new Path();  float lastX=0;  float lastY=0;  float lastX1=0;  float lastY1=0;  float subPathStartX=0;  float subPathStartY=0;  char prevCmd=0;  while (ph.pos < n) {    char cmd=s.charAt(ph.pos);switch (cmd) {case '-':case '+':case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':      if (prevCmd == 'm' || prevCmd == 'M') {        cmd=(char)(((int)prevCmd) - 1);        break;      } else       if (prevCmd == 'c' || prevCmd == 'C') {        cmd=prevCmd;        break;      } else       if (prevCmd == 'l' || prevCmd == 'L') {        cmd=prevCmd;        break;      }default :{      ph.advance();      prevCmd=cmd;    }}boolean wasCurve=false;switch (cmd) {case 'M':case 'm':{    float x=ph.nextFloat();    float y=ph.nextFloat();    if (cmd == 'm') {      subPathStartX+=x;      subPathStartY+=y;      p.rMoveTo(x,y);      lastX+=x;      lastY+=y;    } else {      subPathStartX=x;      subPathStartY=y;      p.moveTo(x,y);      lastX=x;      lastY=y;    }    break;  }case 'Z':case 'z':{  p.close();  p.moveTo(subPathStartX,subPathStartY);  lastX=subPathStartX;  lastY=subPathStartY;  lastX1=subPathStartX;  lastY1=subPathStartY;  wasCurve=true;  break;}case 'L':case 'l':{float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'l') {  p.rLineTo(x,y);  lastX+=x;  lastY+=y;} else {  p.lineTo(x,y);  lastX=x;  lastY=y;}break;}case 'H':case 'h':{float x=ph.nextFloat();if (cmd == 'h') {p.rLineTo(x,0);lastX+=x;} else {p.lineTo(x,lastY);lastX=x;}break;}case 'V':case 'v':{float y=ph.nextFloat();if (cmd == 'v') {p.rLineTo(0,y);lastY+=y;} else {p.lineTo(lastX,y);lastY=y;}break;}case 'C':case 'c':{wasCurve=true;float x1=ph.nextFloat();float y1=ph.nextFloat();float x2=ph.nextFloat();float y2=ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 'c') {x1+=lastX;x2+=lastX;x+=lastX;y1+=lastY;y2+=lastY;y+=lastY;}p.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'S':case 's':{wasCurve=true;float x2=ph.nextFloat();float y2=ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();if (cmd == 's') {x2+=lastX;x+=lastX;y2+=lastY;y+=lastY;}float x1=2 * lastX - lastX1;float y1=2 * lastY - lastY1;p.cubicTo(x1,y1,x2,y2,x,y);lastX1=x2;lastY1=y2;lastX=x;lastY=y;break;}case 'A':case 'a':{float rx=ph.nextFloat();float ry=ph.nextFloat();float theta=ph.nextFloat();int largeArc=(int)ph.nextFloat();int sweepArc=(int)ph.nextFloat();float x=ph.nextFloat();float y=ph.nextFloat();drawArc(p,lastX,lastY,x,y,rx,ry,theta,largeArc,sweepArc);lastX=x;lastY=y;break;}}if (!wasCurve) {lastX1=lastX;lastY1=lastY;}ph.skipWhitespace();}return p;}  }
class C{  public ShingleAnalyzerWrapper(Analyzer delegate,int minShingleSize,int maxShingleSize,String tokenSeparator,boolean outputUnigrams,boolean outputUnigramsIfNoShingles,String fillerToken){  super(delegate.getReuseStrategy());  this.delegate=delegate;  if (maxShingleSize < 2) {    throw new IllegalArgumentException("Max shingle size must be >= 2");  }  this.maxShingleSize=maxShingleSize;  if (minShingleSize < 2) {    throw new IllegalArgumentException("Min shingle size must be >= 2");  }  if (minShingleSize > maxShingleSize) {    throw new IllegalArgumentException("Min shingle size must be <= max shingle size");  }  this.minShingleSize=minShingleSize;  this.tokenSeparator=(tokenSeparator == null ? "" : tokenSeparator);  this.outputUnigrams=outputUnigrams;  this.outputUnigramsIfNoShingles=outputUnigramsIfNoShingles;  this.fillerToken=fillerToken;}  }
class C{  public Command removeVariable(String name){  removeArgument("${" + name + "}");  removeVariableValue(name);  return this;}  }
class C{  public static Object stringToValue(String string){  Double d;  if (string.equals("")) {    return string;  }  if (string.equalsIgnoreCase("true")) {    return Boolean.TRUE;  }  if (string.equalsIgnoreCase("false")) {    return Boolean.FALSE;  }  if (string.equalsIgnoreCase("null")) {    return JSONObject.NULL;  }  char b=string.charAt(0);  if ((b >= '0' && b <= '9') || b == '.' || b == '-' || b == '+') {    try {      if (string.indexOf('.') > -1 || string.indexOf('e') > -1 || string.indexOf('E') > -1) {        d=Double.valueOf(string);        if (!d.isInfinite() && !d.isNaN()) {          return d;        }      } else {        Long myLong=new Long(string);        if (myLong.longValue() == myLong.intValue()) {          return new Integer(myLong.intValue());        } else {          return myLong;        }      }    } catch (    Exception ignore) {    }  }  return string;}  }
class C{  public void updateOrb(BasicCamera camera){  double far=camera.getFrustumFar() * 0.9;  orbLocation.set(dirVector);  orbLocation.multiplyLocal(far);  orbLocation.addLocal(camera.getLocation());  double s=camera.getPixelSizeAt(orbLocation,false) * SOL_PIXELS;  orb.setScale(s,s,s);  orb.setTranslation(orbLocation);  orb.updateGeometricState(0);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_REF:    setSuperClassRef((ParameterizedTypeRef)newValue);  return;case N4JSPackage.N4_CLASS_DEFINITION__SUPER_CLASS_EXPRESSION:setSuperClassExpression((Expression)newValue);return;case N4JSPackage.N4_CLASS_DEFINITION__IMPLEMENTED_INTERFACE_REFS:getImplementedInterfaceRefs().clear();getImplementedInterfaceRefs().addAll((Collection<? extends ParameterizedTypeRef>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public synchronized void stop(){  if (stopped)   return;  stopped=true;  stopRemoteListen();  IgniteGrid.getIgnite().close();}  }
class C{  public ActionForward initBestSellingReport(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response) throws ApplicationException, OperationException {  ActionForward fwd=init(mapping,form,request,response);  if (fwd != null)   return fwd;  SellingItemForm reportForm=(SellingItemForm)form;  String timePeriod=ReportDateManager.TODAY;  String dateRange=Constants.FIXED_DATE_RANGE;  reportForm.setTimePeriod(timePeriod);  reportForm.setDateRange(dateRange);  reportForm.setFromDate("");  reportForm.setToDate("");  reportForm.validate(mapping,request);  return mapping.findForward(INIT_BEST_SELLING_REPORT);}  }
class C{  public final String doubleString(double value){  return generatorContext.doubleString(value);}  }
class C{  public void e(Object str){  if (debug) {    if (logLevel <= Log.ERROR) {      String name=getFunctionName();      if (name != null) {        Log.e(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.e(tag,str.toString());      }    }  }}  }
class C{  public void success(String message){  successCallback.invoke(message);}  }
class C{  public RangeBuilder addUnboundedFrom(String key,double from){  ranges.add(new Range(key,from,null));  return this;}  }
class C{  public UnixNumericUserPrincipal(long name){  this.name=(new Long(name)).toString();}  }
class C{  public Vector3D cross(Vector3D a){  return (new Vector3D(y * a.z - z * a.y,z * a.x - x * a.z,x * a.y - y * a.x));}  }
class C{  public MbfsRunner(Graph graph,Parameters params){  super(graph,params);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__CHARACTER:    return getCharacter();case RegularExpressionPackage.DECIMAL_ESCAPE_SEQUENCE__SEQUENCE:  return getSequence();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public ServiceConfigurationError(String message,Throwable cause){  super(message,cause);}  }
class C{  public CatastroExcepcion(String message){  this(message,null);}  }
class C{  public void startFragmentIdentifier() throws ParseException {}  }
class C{  public final int size(){  return numOfEntries;}  }
class C{  public void unregister(){  Iterator<IRegistration> iter=iterator();  while (iter.hasNext()) {    iter.next().unregister();  }}  }
class C{  public URI(String p_scheme,String p_userinfo,String p_host,int p_port,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_SCHEME_REQUIRED,null));  }  if (p_host == null) {    if (p_userinfo != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_USERINFO_IF_NO_HOST,null));    }    if (p_port != -1) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_PORT_IF_NO_HOST,null));    }  }  if (p_path != null) {    if (p_path.indexOf('?') != -1 && p_queryString != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_QUERY_STRING_IN_PATH,null));    }    if (p_path.indexOf('#') != -1 && p_fragment != null) {      throw new MalformedURIException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NO_FRAGMENT_STRING_IN_PATH,null));    }  }  setScheme(p_scheme);  setHost(p_host);  setPort(p_port);  setUserinfo(p_userinfo);  setPath(p_path);  setQueryString(p_queryString);  setFragment(p_fragment);}  }
class C{  public ImageScroller(ScrollPaneDemo demo,Icon icon){  super();  JPanel p=new JPanel(new BorderLayout());  p.add(new JLabel(icon),BorderLayout.CENTER);  getViewport().add(p);  JLabel colHeader=new JLabel(demo.createImageIcon("scrollpane/colheader.jpg",getString("ScrollPaneDemo.colheader")));  setColumnHeaderView(colHeader);  JLabel rowHeader=new JLabel(demo.createImageIcon("scrollpane/rowheader.jpg",getString("ScrollPaneDemo.rowheader")));  setRowHeaderView(rowHeader);  JLabel cornerUL=new JLabel(demo.createImageIcon("scrollpane/upperleft.jpg",getString("ScrollPaneDemo.upperleft")));  setCorner(UPPER_LEFT_CORNER,cornerUL);  JLabel cornerUR=new JLabel(demo.createImageIcon("scrollpane/upperright.jpg",getString("ScrollPaneDemo.upperright")));  setCorner(UPPER_RIGHT_CORNER,cornerUR);  JLabel cornerLL=new JLabel(demo.createImageIcon("scrollpane/lowerleft.jpg",getString("ScrollPaneDemo.lowerleft")));  setCorner(LOWER_LEFT_CORNER,cornerLL);  JScrollBar vsb=getVerticalScrollBar();  JScrollBar hsb=getHorizontalScrollBar();  vsb.setValue(icon.getIconHeight());  hsb.setValue(icon.getIconWidth() / 10);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:38.159 -0500",hash_original_method="5F53634C89FC8CF0041CE9B2B1E024B8",hash_generated_method="C636C74DCE4A34923431FE496CBD3E65") public IInterface queryLocalInterface(String descriptor){  if (mDescriptor.equals(descriptor)) {    return mOwner;  }  return null;}  }
class C{  public static void main(String[] argv){  runClassifier(new DecisionTable(),argv);}  }
class C{  public void viewTarget(String name) throws ParseException {  viewTargetParams=name;  hasViewTargetParams=true;}  }
class C{  public void sendEmailandSms(final RevisionPetition objection,final String applicationType){  if (objection != null) {    for (    PropertyOwnerInfo ownerInfo : objection.getBasicProperty().getPropertyOwnerInfo()) {      sendEmailAndSms(objection,ownerInfo.getOwner(),applicationType);    }  }}  }
class C{  private void writeQName(javax.xml.namespace.QName qname,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  java.lang.String namespaceURI=qname.getNamespaceURI();  if (namespaceURI != null) {    java.lang.String prefix=xmlWriter.getPrefix(namespaceURI);    if (prefix == null) {      prefix=generatePrefix(namespaceURI);      xmlWriter.writeNamespace(prefix,namespaceURI);      xmlWriter.setPrefix(prefix,namespaceURI);    }    if (prefix.trim().length() > 0) {      xmlWriter.writeCharacters(prefix + ":" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    } else {      xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));    }  } else {    xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));  }}  }
class C{  public String startBillingRun() throws OrganizationAuthoritiesException {  boolean result=getOperatorService().startBillingRun();  return getOutcome(result);}  }
class C{  public void release(){  if (mReleased) {    return;  }  mReleased=true;  clear(true);  onRelease();}  }
class C{  @Override protected void before() throws Exception {  fbManager=createFBManager();  if (initialCreate)   createDefaultDatabase();}  }
class C{  Table randomTable(){  if (tables.size() == 0) {    return null;  }  int i=config.random().getInt(tables.size());  return tables.get(i);}  }
class C{  public Object exec(List arguments) throws TemplateModelException {  try {    return wrapper.invokeMethod(object,(Method)getMember(),unwrapArguments(arguments,wrapper));  } catch (  TemplateModelException e) {    throw e;  }catch (  Exception e) {    throw _MethodUtil.newInvocationTemplateModelException(object,getMember(),e);  }}  }
class C{  public static boolean isDefaultCheckForLiveServer(){  return DEFAULT_CHECK_FOR_LIVE_SERVER;}  }
class C{  private void ensure(int idx) throws IOException {  if (closed) {    return;  }  if (idx < buff.length()) {    return;  }  read(idx + 1 - buff.length());}  }
class C{  public void testSetPhoneSensorValues_phoneFlatAtLat0Long90(){  LatLong location=new LatLong(0,90);  Vector3 acceleration=new Vector3(0,0,-10);  Vector3 magneticField=new Vector3(0,-1,10);  Vector3 expectedZenith=new Vector3(0,1,0);  Vector3 expectedNadir=new Vector3(0,-1,0);  Vector3 expectedNorth=new Vector3(0,0,1);  Vector3 expectedEast=new Vector3(-1,0,0);  Vector3 expectedSouth=new Vector3(0,0,-1);  Vector3 expectedWest=new Vector3(1,0,0);  Vector3 expectedPointing=expectedNadir;  Vector3 expectedUpAlongPhone=expectedNorth;  checkModelOrientation(location,acceleration,magneticField,expectedZenith,expectedNadir,expectedNorth,expectedEast,expectedSouth,expectedWest,expectedPointing,expectedUpAlongPhone);}  }
class C{  public void addImportNames(Collection<String> names,int line){  for (  String name : names) {    addImportName(name,line);  }}  }
class C{  public void testThatObjectsHaveNoItems() throws Exception {  ObjectMapper mapper=new ObjectMapper();  JsonSchema jsonSchema=mapper.generateJsonSchema(TrivialBean.class);  String json=jsonSchema.toString().replaceAll("\"","'");  assertEquals("{'type':'object','properties':{'name':{'type':'string'}}}",json);}  }
class C{  public KMLNetworkLink(String namespaceURI){  super(namespaceURI);}  }
class C{  public IntegerMemberValue(ConstPool cp){  super('I',cp);  setValue(0);}  }
class C{  public void updateBuildings(Vector<Building> bldgs){  Enumeration<Building> loop=bldgs.elements();  while (loop.hasMoreElements()) {    final Building other=loop.nextElement();    Building bldg=getLocalBuilding(other);    if (bldg == null) {      System.err.print("Could not find a match for ");      System.err.print(other);      System.err.println(" to update.");      continue;    }    Enumeration<Coords> coordsEnum=bldg.getCoords();    while (coordsEnum.hasMoreElements()) {      final Coords coords=coordsEnum.nextElement();      bldg.setCurrentCF(other.getCurrentCF(coords),coords);      bldg.setPhaseCF(other.getPhaseCF(coords),coords);      bldg.setArmor(other.getArmor(coords),coords);      bldg.setBasement(coords,BasementType.getType(getHex(coords).terrainLevel(Terrains.BLDG_BASEMENT_TYPE)));      bldg.setBasementCollapsed(coords,other.getBasementCollapsed(coords));      bldg.setDemolitionCharges(other.getDemolitionCharges());    }  }}  }
class C{  final static int hash(Object k){  if (k instanceof KeyImpl)   return ((KeyImpl)k).slotForMap();  int h=0;  h^=k.hashCode();  h^=(h >>> 20) ^ (h >>> 12);  return h ^ (h >>> 7) ^ (h >>> 4);}  }
class C{  private T[] ensureCapacity(int minCapacity){  if (tmp.length < minCapacity) {    int newSize=minCapacity;    newSize|=newSize >> 1;    newSize|=newSize >> 2;    newSize|=newSize >> 4;    newSize|=newSize >> 8;    newSize|=newSize >> 16;    newSize++;    if (newSize < 0)     newSize=minCapacity; else     newSize=Math.min(newSize,a.length >>> 1);    @SuppressWarnings({"unchecked","UnnecessaryLocalVariable"}) T[] newArray=(T[])new Object[newSize];    tmp=newArray;  }  return tmp;}  }
class C{  private void correctErrors(byte[] codewordBytes,int numDataCodewords) throws ChecksumException {  int numCodewords=codewordBytes.length;  int[] codewordsInts=new int[numCodewords];  for (int i=0; i < numCodewords; i++) {    codewordsInts[i]=codewordBytes[i] & 0xFF;  }  int numECCodewords=codewordBytes.length - numDataCodewords;  try {    rsDecoder.decode(codewordsInts,numECCodewords);  } catch (  ReedSolomonException rse) {    throw ChecksumException.getChecksumInstance();  }  for (int i=0; i < numDataCodewords; i++) {    codewordBytes[i]=(byte)codewordsInts[i];  }}  }
class C{  public static void replacePlaceholder(Uri uri,Bitmap placeholder){  Log.v(TAG,"session bitmap cache size: " + sSessionsToPlaceholderBitmap.size());  Point size=new Point(placeholder.getWidth(),placeholder.getHeight());  sSessionsToSizes.put(uri,size);  sSessionsToPlaceholderBitmap.put(uri,placeholder);  Integer currentVersion=sSessionsToPlaceholderVersions.get(uri);  sSessionsToPlaceholderVersions.put(uri,currentVersion == null ? 0 : currentVersion + 1);}  }
class C{  @Override public Object appendEL(Object o){  if (offset + size + 1 > arr.length)   enlargeCapacity(size + 1);  arr[offset + size]=o;  size++;  return o;}  }
class C{  public static void main(final String... args){  try {    new Builder(args).build().run();  } catch (  AttachAPINotFoundException e) {    System.err.println(e.getMessage());  }}  }
class C{  protected static void processCRLB2(DistributionPoint dp,Object cert,X509CRL crl) throws AnnotatedException {  IssuingDistributionPoint idp=null;  try {    idp=IssuingDistributionPoint.getInstance(CertPathValidatorUtilities.getExtensionValue(crl,RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT));  } catch (  Exception e) {    throw new AnnotatedException("Issuing distribution point extension could not be decoded.",e);  }  if (idp != null) {    if (idp.getDistributionPoint() != null) {      DistributionPointName dpName=IssuingDistributionPoint.getInstance(idp).getDistributionPoint();      List names=new ArrayList();      if (dpName.getType() == DistributionPointName.FULL_NAME) {        GeneralName[] genNames=GeneralNames.getInstance(dpName.getName()).getNames();        for (int j=0; j < genNames.length; j++) {          names.add(genNames[j]);        }      }      if (dpName.getType() == DistributionPointName.NAME_RELATIVE_TO_CRL_ISSUER) {        ASN1EncodableVector vec=new ASN1EncodableVector();        try {          Enumeration e=ASN1Sequence.getInstance(ASN1Sequence.fromByteArray(CertPathValidatorUtilities.getIssuerPrincipal(crl).getEncoded())).getObjects();          while (e.hasMoreElements()) {            vec.add((ASN1Encodable)e.nextElement());          }        } catch (        IOException e) {          throw new AnnotatedException("Could not read CRL issuer.",e);        }        vec.add(dpName.getName());        names.add(new GeneralName(X509Name.getInstance(new DERSequence(vec))));      }      boolean matches=false;      if (dp.getDistributionPoint() != null) {        dpName=dp.getDistributionPoint();        GeneralName[] genNames=null;        if (dpName.getType() == DistributionPointName.FULL_NAME) {          genNames=GeneralNames.getInstance(dpName.getName()).getNames();        }        if (dpName.getType() == DistributionPointName.NAME_RELATIVE_TO_CRL_ISSUER) {          if (dp.getCRLIssuer() != null) {            genNames=dp.getCRLIssuer().getNames();          } else {            genNames=new GeneralName[1];            try {              genNames[0]=new GeneralName(new X509Name((ASN1Sequence)ASN1Sequence.fromByteArray(CertPathValidatorUtilities.getEncodedIssuerPrincipal(cert).getEncoded())));            } catch (            IOException e) {              throw new AnnotatedException("Could not read certificate issuer.",e);            }          }          for (int j=0; j < genNames.length; j++) {            Enumeration e=ASN1Sequence.getInstance(genNames[j].getName().toASN1Primitive()).getObjects();            ASN1EncodableVector vec=new ASN1EncodableVector();            while (e.hasMoreElements()) {              vec.add((ASN1Encodable)e.nextElement());            }            vec.add(dpName.getName());            genNames[j]=new GeneralName(new X509Name(new DERSequence(vec)));          }        }        if (genNames != null) {          for (int j=0; j < genNames.length; j++) {            if (names.contains(genNames[j])) {              matches=true;              break;            }          }        }        if (!matches) {          throw new AnnotatedException("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");        }      } else {        if (dp.getCRLIssuer() == null) {          throw new AnnotatedException("Either the cRLIssuer or the distributionPoint field must " + "be contained in DistributionPoint.");        }        GeneralName[] genNames=dp.getCRLIssuer().getNames();        for (int j=0; j < genNames.length; j++) {          if (names.contains(genNames[j])) {            matches=true;            break;          }        }        if (!matches) {          throw new AnnotatedException("No match for certificate CRL issuing distribution point name to cRLIssuer CRL distribution point.");        }      }    }    BasicConstraints bc=null;    try {      bc=BasicConstraints.getInstance(CertPathValidatorUtilities.getExtensionValue((X509Extension)cert,BASIC_CONSTRAINTS));    } catch (    Exception e) {      throw new AnnotatedException("Basic constraints extension could not be decoded.",e);    }    if (cert instanceof X509Certificate) {      if (idp.onlyContainsUserCerts() && (bc != null && bc.isCA())) {        throw new AnnotatedException("CA Cert CRL only contains user certificates.");      }      if (idp.onlyContainsCACerts() && (bc == null || !bc.isCA())) {        throw new AnnotatedException("End CRL only contains CA certificates.");      }    }    if (idp.onlyContainsAttributeCerts()) {      throw new AnnotatedException("onlyContainsAttributeCerts boolean is asserted.");    }  }}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:16.119 -0500",hash_original_method="2B1F11A0F086CDEBFE52E8E81BF54F43",hash_generated_method="9B6FC43D5E854AA12235EBDC0D9134EC") private void siftDown(int k,RunnableScheduledFuture key){  int half=size >>> 1;  while (k < half) {    int child=(k << 1) + 1;    RunnableScheduledFuture c=queue[child];    int right=child + 1;    if (right < size && c.compareTo(queue[right]) > 0)     c=queue[child=right];    if (key.compareTo(c) <= 0)     break;    queue[k]=c;    setIndex(c,k);    k=child;  }  queue[k]=key;  setIndex(key,k);}  }
class C{  public void clear(){  mRecycler.setAdapter(null);}  }
class C{  public static Coordinate intersection(Coordinate p1,Coordinate p2,Coordinate q1,Coordinate q2){  DD denom1=DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(DD.valueOf(p2.x).selfSubtract(p1.x));  DD denom2=DD.valueOf(q2.x).selfSubtract(q1.x).selfMultiply(DD.valueOf(p2.y).selfSubtract(p1.y));  DD denom=denom1.subtract(denom2);  DD numx1=DD.valueOf(q2.x).selfSubtract(q1.x).selfMultiply(DD.valueOf(p1.y).selfSubtract(q1.y));  DD numx2=DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(DD.valueOf(p1.x).selfSubtract(q1.x));  DD numx=numx1.subtract(numx2);  double fracP=numx.selfDivide(denom).doubleValue();  double x=DD.valueOf(p1.x).selfAdd(DD.valueOf(p2.x).selfSubtract(p1.x).selfMultiply(fracP)).doubleValue();  DD numy1=DD.valueOf(p2.x).selfSubtract(p1.x).selfMultiply(DD.valueOf(p1.y).selfSubtract(q1.y));  DD numy2=DD.valueOf(p2.y).selfSubtract(p1.y).selfMultiply(DD.valueOf(p1.x).selfSubtract(q1.x));  DD numy=numy1.subtract(numy2);  double fracQ=numy.selfDivide(denom).doubleValue();  double y=DD.valueOf(q1.y).selfAdd(DD.valueOf(q2.y).selfSubtract(q1.y).selfMultiply(fracQ)).doubleValue();  return new Coordinate(x,y);}  }
class C{  public void visitTableSwitchInsn(int min,int max,Label dflt,Label... labels){  if (mv != null) {    mv.visitTableSwitchInsn(min,max,dflt,labels);  }}  }
class C{  public static LazyPBagX<Integer> range(int start,int end){  return fromStreamS(ReactiveSeq.range(start,end));}  }
class C{  public void unblock(){  lock.writeUnlock();}  }
class C{  public static BufferedImage parseDDS(final byte[] buffer){  final ByteBuffer w=ByteBuffer.wrap(buffer);  w.order(ByteOrder.LITTLE_ENDIAN);  if (w.getInt() != 0x20534444)   throw new RuntimeException("Invalid DDS magic!");  @SuppressWarnings("unused") final int size1=w.getInt();  @SuppressWarnings("unused") final int flags1=w.getInt();  final int height=w.getInt();  final int width=w.getInt();  @SuppressWarnings("unused") final int pitch=w.getInt();  @SuppressWarnings("unused") final int depth=w.getInt();  @SuppressWarnings("unused") final int mipMapcount=w.getInt();  w.position(w.position() + 44);  @SuppressWarnings("unused") final int size2=w.getInt();  final int flags2=w.getInt();  final int fourCC=w.getInt();  final int rgbBitCount=w.getInt();  final int rBitMask=w.getInt();  final int gBitMask=w.getInt();  final int bBitMask=w.getInt();  final int aBitMask=w.getInt();  final boolean dxt5=flags2 == DDPF_FOURCC && fourCC == 0x35545844;  final boolean uncompressed=flags2 == (DDPF_ALPHAPIXELS | DDPF_RGB);  if (uncompressed)   if (rgbBitCount != 32 || aBitMask != 0xff000000 || rBitMask != 0xff0000 || gBitMask != 0xff00 || bBitMask != 0xff)   throw new RuntimeException("Unsupported DDS compression format!");  if (!dxt5 && !uncompressed)   throw new RuntimeException("Unsupported DDS compression format!");  @SuppressWarnings("unused") final int caps=w.getInt();  @SuppressWarnings("unused") final int caps2=w.getInt();  w.getInt();  w.getInt();  w.getInt();  final BufferedImage bi=new BufferedImage(width,height,BufferedImage.TYPE_INT_ARGB);  if (uncompressed) {    for (int y=0; y < height; y++)     for (int x=0; x < width; x++)     bi.setRGB(x,y,w.getInt());    return bi;  }  final int[][] alphaBlock=new int[4][4];  for (int y=0; y < height; y+=4)   for (int x=0; x < width; x+=4) {    final int alpha0=w.get() & 0xff;    final int alpha1=w.get() & 0xff;    long bits=(w.get() & 0xffL) | ((w.get() & 0xffL) << 8) | ((w.get() & 0xffL) << 16)| ((w.get() & 0xffL) << 24)| ((w.get() & 0xffL) << 32)| ((w.get() & 0xffL) << 40);    for (int by=0; by < 4; by++)     for (int bx=0; bx < 4; bx++) {      final int code=(int)(bits & 0x07);      bits>>=3;      if (code == 0)       alphaBlock[by][bx]=alpha0; else       if (code == 1)       alphaBlock[by][bx]=alpha1; else       if (alpha0 > alpha1) {        if (code == 2)         alphaBlock[by][bx]=(6 * alpha0 + 1 * alpha1) / 7; else         if (code == 3)         alphaBlock[by][bx]=(5 * alpha0 + 2 * alpha1) / 7; else         if (code == 4)         alphaBlock[by][bx]=(4 * alpha0 + 3 * alpha1) / 7; else         if (code == 5)         alphaBlock[by][bx]=(3 * alpha0 + 4 * alpha1) / 7; else         if (code == 6)         alphaBlock[by][bx]=(2 * alpha0 + 5 * alpha1) / 7; else         alphaBlock[by][bx]=(1 * alpha0 + 6 * alpha1) / 7;      } else {        if (code == 2)         alphaBlock[by][bx]=(4 * alpha0 + 1 * alpha1) / 5; else         if (code == 3)         alphaBlock[by][bx]=(3 * alpha0 + 2 * alpha1) / 5; else         if (code == 4)         alphaBlock[by][bx]=(2 * alpha0 + 3 * alpha1) / 5; else         if (code == 5)         alphaBlock[by][bx]=(1 * alpha0 + 4 * alpha1) / 5; else         if (code == 6)         alphaBlock[by][bx]=0; else         alphaBlock[by][bx]=255;      }    }    final int color0=(w.get() & 0xff) | ((w.get() & 0xff) << 8);    final int color1=(w.get() & 0xff) | ((w.get() & 0xff) << 8);    int bits2=(w.get() & 0xff) | ((w.get() & 0xff) << 8) | ((w.get() & 0xff) << 16)| ((w.get() & 0xff) << 24);    final int r0=(color0 & 0xf800) >> 8;    final int g0=(color0 & 0x07e0) >> 3;    final int b0=(color0 & 0x001f) << 3;    final int r1=(color1 & 0xf800) >> 8;    final int g1=(color1 & 0x07e0) >> 3;    final int b1=(color1 & 0x001f) << 3;    for (int by=0; by < 4; by++)     for (int bx=0; bx < 4; bx++) {      final int code=bits2 & 0x3;      bits2>>=2;      int r, g, b;      if (code == 0) {        r=r0;        g=g0;        b=b0;      } else       if (code == 1) {        r=r1;        g=g1;        b=b1;      } else       if (code == 2) {        r=((r0 << 1) + r1) / 3;        g=((g0 << 1) + g1) / 3;        b=((b0 << 1) + b1) / 3;      } else {        r=(r0 + (r1 << 1)) / 3;        g=(g0 + (g1 << 1)) / 3;        b=(b0 + (b1 << 1)) / 3;      }      bi.setRGB(x + bx,y + by,(alphaBlock[by][bx] << 24) | (r << 16) | (g << 8)| b);    }  }  return bi;}  }
class C{  @Override protected void onActivityResult(int requestCode,int resultCode,Intent data){  if (resultCode == Activity.RESULT_OK && requestCode == PICK_CONTACT_REQUEST)   displayMap(data);  animateAddFab(true);}  }
class C{  private void storeSpringSecurityAuthenticationContext(@Nonnull final ProfileRequestContext profileRequestContext,final RequestContext springRequestContext,final Authentication authentication){  final HttpServletRequest request=OIDCUtils.getHttpServletRequest(springRequestContext);  if (request == null) {    throw new OIDCException("HttpServletRequest cannot be null");  }  final SecurityContext securityContext=SecurityContextHolder.getContext();  securityContext.setAuthentication(authentication);  SecurityContextHolder.setContext(securityContext);  final HttpSession session=request.getSession();  session.setAttribute("SPRING_SECURITY_CONTEXT",securityContext);  log.debug("Stored authentication [{}] into Spring security context",SecurityContextHolder.getContext().getAuthentication());}  }
class C{  public ISchedulingRule moveRule(IResource source,IResource destination){  if (source.getType() == IResource.ROOT || destination.getType() == IResource.ROOT)   return root;  if (!source.getFullPath().segment(0).equals(destination.getFullPath().segment(0)))   return MultiRule.combine(modifyRule(source.getProject()),modifyRule(destination.getProject()));  return factoryFor(source).moveRule(source,destination);}  }
class C{  public static int occurrencesOfCodePoint(String string,int value){  return StringIterate.countCodePoint(string,null);}  }
class C{  void readFile(String name) throws org.jdom2.JDOMException, java.io.IOException {  if (log.isDebugEnabled()) {    log.debug("readFile " + name);  }  Element root=rootFromName(name);  if (root.getChild("decoderIndex") != null) {    if (root.getChild("decoderIndex").getAttribute("version") != null) {      fileVersion=Integer.parseInt(root.getChild("decoderIndex").getAttribute("version").getValue());    }    log.debug("found fileVersion of " + fileVersion);    readMfgSection(root.getChild("decoderIndex"));    readFamilySection(root.getChild("decoderIndex"));  } else {    log.error("Unrecognized decoderIndex file contents in file: " + name);  }}  }
class C{  public void init(KeyGenerationParameters param){  super.init(param);  if (strength == 0 || strength == (56 / 8)) {    strength=DESParameters.DES_KEY_LENGTH;  } else   if (strength != DESParameters.DES_KEY_LENGTH) {    throw new IllegalArgumentException("DES key must be " + (DESParameters.DES_KEY_LENGTH * 8) + " bits long.");  }}  }
class C{  protected CCTMXTiledMap(String tmxFile){  super();  if (tmxFile == null) {    ccMacros.CCLOG(LOG_TAG,"TMXTiledMap: tmx file should not bi nil");    return;  }  setContentSize(CGSize.zero());  CCTMXMapInfo mapInfo=CCTMXMapInfo.formatWithTMXFile(tmxFile);  assert (mapInfo.tilesets.size() != 0) : "TMXTiledMap: Map not found. Please check the filename.";  mapSize_=mapInfo.mapSize;  tileSize_=mapInfo.tileSize;  mapOrientation_=mapInfo.orientation;  objectGroups=mapInfo.objectGroups;  properties_=mapInfo.properties;  tileProperties_=mapInfo.tileProperties;  int idx=0;  for (  CCTMXLayerInfo layerInfo : mapInfo.layers) {    if (layerInfo.visible) {      CCTMXLayer child=parseLayer(layerInfo,mapInfo);      addChild(child,idx,idx);      CGSize childSize=child.getContentSize();      CGSize currentSize=getContentSize();      currentSize.width=(currentSize.width > childSize.width ? currentSize.width : childSize.width);      currentSize.height=(currentSize.height > childSize.height ? currentSize.height : childSize.height);      setContentSize(currentSize);      idx++;    }  }}  }
class C{  public void addArea(final Section AREA){  if (null == AREA)   return;  areas.add(AREA);  Collections.sort(areas,new SectionComparator());  fireUpdateEvent(SECTION_EVENT);}  }
class C{  static String add_escapes(String str){  StringBuilder retval=new StringBuilder();  char ch;  for (int i=0; i < str.length(); i++) {switch (str.charAt(i)) {case 0:      continue;case '\b':    retval.append("\\b");  continue;case '\t':retval.append("\\t");continue;case '\n':retval.append("\\n");continue;case '\f':retval.append("\\f");continue;case '\r':retval.append("\\r");continue;case '\"':retval.append("\\\"");continue;case '\'':retval.append("\\\'");continue;case '\\':retval.append("\\\\");continue;default :if ((ch=str.charAt(i)) < 0x20 || ch > 0x7e) {String s="0000" + Integer.toString(ch,16);retval.append("\\u" + s.substring(s.length() - 4,s.length()));} else {retval.append(ch);}continue;}}return retval.toString();}  }
class C{  @Override public String toString(){  return name + ": " + cipherSuiteCode[0]+ " "+ cipherSuiteCode[1];}  }
class C{  private Map<String,Integer> processFunctionArgs(Tree argsNode){  Map<String,Integer> args=new HashMap<String,Integer>();  for (int i=0; i < argsNode.getChildCount(); i+=2) {    Tree idents=argsNode.getChild(i);    if (idents.getType() != DelphiLexer.TkVariableIdents) {      idents=argsNode.getChild(++i);      if (idents == null || idents.getType() != DelphiLexer.TkVariableIdents) {        break;      }    }    for (int c=0; c < idents.getChildCount(); ++c) {      args.put(idents.getChild(c).getText().toLowerCase(),Integer.valueOf(0));    }  }  return args;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:28:38.356 -0500",hash_original_method="F572ACA797E9B5093DE86C276E160FEC",hash_generated_method="4948083AE7295EE51565758E9569E48A") public static void cursorRowToContentValues(Cursor cursor,ContentValues values){  AbstractWindowedCursor awc=(cursor instanceof AbstractWindowedCursor) ? (AbstractWindowedCursor)cursor : null;  String[] columns=cursor.getColumnNames();  int length=columns.length;  for (int i=0; i < length; i++) {    if (awc != null && awc.isBlob(i)) {      values.put(columns[i],cursor.getBlob(i));    } else {      values.put(columns[i],cursor.getString(i));    }  }}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    try {      return new FileInputStream(entry.getCleanFile(index));    } catch (    FileNotFoundException e) {      return null;    }  }}  }
class C{  protected void drawCropGrid(@NonNull Canvas canvas){  if (mShowCropGrid) {    if (mGridPoints == null && !mCropViewRect.isEmpty()) {      mGridPoints=new float[(mCropGridRowCount) * 4 + (mCropGridColumnCount) * 4];      int index=0;      for (int i=0; i < mCropGridRowCount; i++) {        mGridPoints[index++]=mCropViewRect.left;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;        mGridPoints[index++]=mCropViewRect.right;        mGridPoints[index++]=(mCropViewRect.height() * (((float)i + 1.0f) / (float)(mCropGridRowCount + 1))) + mCropViewRect.top;      }      for (int i=0; i < mCropGridColumnCount; i++) {        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.top;        mGridPoints[index++]=(mCropViewRect.width() * (((float)i + 1.0f) / (float)(mCropGridColumnCount + 1))) + mCropViewRect.left;        mGridPoints[index++]=mCropViewRect.bottom;      }    }    if (mGridPoints != null) {      canvas.drawLines(mGridPoints,mCropGridPaint);    }  }  if (mShowCropFrame) {    canvas.drawRect(mCropViewRect,mCropFramePaint);  }}  }
class C{  @Override public void close() throws IOException {}  }
class C{  public void defaultConfiguration(){  config.defaultConfiguration();  applyConfig();}  }
class C{  @Override public boolean equals(Object other){  if (!(other instanceof TObjectLongHashMap)) {    return false;  }  TObjectLongHashMap that=(TObjectLongHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure<K>(that));}  }
class C{  public LinearRegression(LongList timestamps,DoubleList values){  double[] x=new double[timestamps.size()];  double[] y=new double[values.size()];  for (int i=0; i < timestamps.size(); i++) {    x[i]=timestamps.get(i);    y[i]=values.get(i);  }  double sumX=0.0;  double sumY=0.0;  for (int i=0; i < x.length; i++) {    sumX+=x[i];    sumY+=y[i];  }  double xBar=sumX / x.length;  double yBar=sumY / x.length;  double xxBar=0.0;  double xyBar=0.0;  for (int i=0; i < x.length; i++) {    xxBar+=(x[i] - xBar) * (x[i] - xBar);    xyBar+=(x[i] - xBar) * (y[i] - yBar);  }  intercept=xyBar / xxBar;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  float progress=0;  double numDownslopeNeighbours;  double z, z2;  int i;  int[] dX=new int[]{1,1,1,0,-1,-1,-1,0};  int[] dY=new int[]{-1,0,1,1,1,0,-1,-1};  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    int rows=DEM.getNumberRows();    int cols=DEM.getNumberColumns();    double noData=DEM.getNoDataValue();    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette("spectrum.pal");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          numDownslopeNeighbours=0;          for (i=0; i < 8; i++) {            z2=DEM.getValue(row + dY[i],col + dX[i]);            if (z2 != noData && z2 < z) {              numDownslopeNeighbours++;            }          }          output.setValue(row,col,numDownslopeNeighbours);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public ObjectFactory(){}  }
class C{  final double internalNextDouble(double origin,double bound){  double r=(nextLong() >>> 11) * DOUBLE_UNIT;  if (origin < bound) {    r=r * (bound - origin) + origin;    if (r >= bound)     r=Double.longBitsToDouble(Double.doubleToLongBits(bound) - 1);  }  return r;}  }
class C{  protected String lastLine(String string) throws IOException {  BufferedReader reader=new BufferedReader(new StringReader(string));  try {    String lastNonNullLine="";    String lastLine=null;    while ((lastLine=reader.readLine()) != null) {      if (!"".equals(lastLine)) {        lastNonNullLine=lastLine;      }    }    return lastNonNullLine;  }  finally {    reader.close();  }}  }
class C{  public StripedLockIntObjectConcurrentHashMap(){  this(DEFAULT_INITIAL_CAPACITY,DEFAULT_LOAD_FACTOR);}  }
class C{  @Override public boolean removeEntry(Principal caller,AclEntry entry) throws NotOwnerException {  if (!isOwner(caller))   throw new NotOwnerException();  return (entryList.removeElement(entry));}  }
class C{  private <T>T read(byte[] column,Class<T> clazz) throws IOException {  final byte[] cf=Bytes.toBytes(columnFamily);  ResultScanner scanner=profilerTable.getScanner(cf,column);  for (  Result result : scanner) {    if (result.containsColumn(cf,column)) {      byte[] raw=result.getValue(cf,column);      return SerDeUtils.fromBytes(raw,clazz);    }  }  throw new IllegalStateException("No results found");}  }
class C{  static IntersectionImpl initNewDirectInstance(long seed,Memory dstMem){  short seedHash=computeSeedHash(seed);  IntersectionImpl impl=new IntersectionImpl(seedHash);  int preLongs=CONST_PREAMBLE_LONGS;  impl.maxLgArrLongs_=checkMaxLgArrLongs(dstMem);  long[] preArr=new long[preLongs];  long pre0=0;  pre0=insertPreLongs(preLongs,pre0);  pre0=insertSerVer(SER_VER,pre0);  pre0=insertFamilyID(Family.INTERSECTION.getID(),pre0);  impl.lgArrLongs_=MIN_LG_ARR_LONGS;  pre0=insertLgArrLongs(MIN_LG_ARR_LONGS,pre0);  impl.empty_=false;  pre0=insertFlags(0,pre0);  pre0=insertSeedHash(seedHash,pre0);  preArr[0]=pre0;  long pre1=0;  impl.curCount_=-1;  pre1=insertCurCount(-1,pre1);  pre1=insertP((float)1.0,pre1);  preArr[1]=pre1;  impl.thetaLong_=Long.MAX_VALUE;  preArr[2]=impl.thetaLong_;  dstMem.putLongArray(0,preArr,0,preLongs);  impl.mem_=dstMem;  return impl;}  }
class C{  public ImageException(String message,Reason reason,Throwable e){  super(message + " Cause: " + e.toString(),e);  bean.setReason(reason);  setMessageKey(getMessageKey() + "." + reason.name());}  }
class C{  public final boolean hasMessages(int what,Object object){  return mExec.hasMessages(what,object);}  }
class C{  public boolean declaresFinalInstanceField(){  for (  RVMField f : declaredFields) {    if (f.isFinal() && !f.isStatic())     return true;  }  return false;}  }
class C{  public static double approximateFactorial(int n){  double nFac=1.0;  for (int i=n; i > 0; i--) {    nFac*=i;  }  return nFac;}  }
class C{  private static void publishWebSocketMessage(Object data,String channelID){  ChannelBroadcastMessage message=new ChannelBroadcastMessage();  message.setChannel(channelID);  message.setType(ChannelBroadcastMessage.Type.NONE);  if (data instanceof String) {    message.setBody((String)data);  } else   if (data != null) {    message.setBody(toJson(data));  }  try {    WSConnectionContext.sendMessage(message);  } catch (  Exception e) {    LOG.error("Failed to send message over WebSocket.",e);  }}  }
class C{  public ServiceInfo addService(String serviceNo,String serviceName,String fullName,String serviceProcess,String serviceMethod,String serviceDossier,String serviceCondition,String serviceDuration,String serviceActors,String serviceResults,String serviceRecords,String serviceFee,String serviceInstructions,String administrationCode,String administrationIndex,String domainCode,String domainIndex,int activeStatus,String onlineUrl,long[] fileTemplateIds,ServiceContext context) throws PortalException, SystemException {  ServiceInfo service=null;  long serviceId=counterLocalService.increment(ServiceInfo.class.getName());  int hasTemplateFiles=0;  if (fileTemplateIds.length != 0) {    hasTemplateFiles=1;  }  DictItem dictItemDomain=DictItemLocalServiceUtil.getDictItem(Long.valueOf(domainCode));  DictItem dictItemAdmin=DictItemLocalServiceUtil.getDictItem(Long.valueOf(administrationCode));  Date now=new Date();  service=serviceInfoPersistence.create(serviceId);  service.setGroupId(context.getScopeGroupId());  service.setCompanyId(context.getCompanyId());  service.setUserId(context.getUserId());  service.setCreateDate(now);  service.setModifiedDate(now);  service.setServiceNo(serviceNo);  service.setServiceName(serviceName);  service.setFullName(fullName);  service.setServiceProcess(serviceProcess);  service.setServiceMethod(serviceMethod);  service.setServiceDossier(serviceDossier);  service.setServiceCondition(serviceCondition);  service.setServiceDuration(serviceDuration);  service.setServiceActors(serviceActors);  service.setServiceResults(serviceResults);  service.setServiceRecords(serviceRecords);  service.setServiceFee(serviceFee);  service.setServiceInstructions(serviceInstructions);  service.setAdministrationCode(administrationCode);  service.setAdministrationIndex(dictItemAdmin.getTreeIndex());  service.setDomainCode(domainCode);  service.setDomainIndex(dictItemDomain.getTreeIndex());  service.setActiveStatus(activeStatus);  service.setOnlineUrl(onlineUrl);  service.setHasTemplateFiles(hasTemplateFiles);  long classTypeId=0;  boolean visible=true;  Date startDate=null;  Date endDate=null;  Date expirationDate=null;  String mimeType=ContentTypes.TEXT_HTML;  String title=serviceName;  String description=fullName;  String summary=serviceProcess;  String url=null;  String layoutUuid=null;  int height=0;  int width=0;  Integer priority=null;  boolean sync=false;  serviceFileTemplateLocalService.addServiveFiles(serviceId,fileTemplateIds);  assetEntryLocalService.updateEntry(context.getUserId(),context.getScopeGroupId(),ServiceInfo.class.getName(),service.getServiceinfoId(),service.getUuid(),classTypeId,context.getAssetCategoryIds(),context.getAssetTagNames(),visible,startDate,endDate,expirationDate,mimeType,title,description,summary,url,layoutUuid,height,width,priority,sync);  serviceInfoPersistence.update(service);  Indexer indexer=IndexerRegistryUtil.nullSafeGetIndexer(ServiceInfo.class);  indexer.reindex(service);  return service;}  }
class C{  private boolean isBlocked(String ip,SMTPSession session){  Long rawTime=blockedIps.get(ip);  if (rawTime != null) {    long blockTime=rawTime.longValue();    if (blockTime > System.currentTimeMillis()) {      session.getLogger().debug("BlockList contain Ip " + ip);      return true;    } else {      session.getLogger().debug("Remove ip " + ip + " from blockList");synchronized (blockedIps) {        blockedIps.remove(ip);      }    }  }  return false;}  }
class C{  public synchronized static void addGlobalUnitConverter(UnitConverter conv){  if (conv == null)   throw new NullPointerException();  CONVERTERS.add(conv);}  }
class C{  public RangeTable(Schema schema,Expression min,Expression max,boolean noColumns){  super(schema,0,NAME,true,true);  Column[] cols=noColumns ? new Column[0] : new Column[]{new Column("X",Value.LONG)};  this.min=min;  this.max=max;  setColumns(cols);}  }
class C{  @Deprecated public String generateConfigV2(){  ObjectFactory of=new ObjectFactory();  FileType matsim_config=of.createFileType();  matsim_config.setInputFile(this.matsimExternalConfigFileName);  FileType network=of.createFileType();  network.setInputFile(this.networkInputFileName);  InputPlansFileType inputPlansFileType=of.createInputPlansFileType();  if (this.startMode == CreateTestMATSimConfig.COLD_START)   inputPlansFileType.setInputFile(""); else   if (this.startMode == CreateTestMATSimConfig.WARRM_START)   inputPlansFileType.setInputFile(this.inputPlansFileName);  InputPlansFileType hotStratPlansFile=of.createInputPlansFileType();  if (this.startMode == CreateTestMATSimConfig.HOT_START)   hotStratPlansFile.setInputFile(this.hotstartPlansFileName); else   hotStratPlansFile.setInputFile("");  ControlerType controler=of.createControlerType();  controler.setFirstIteration(this.firstIteration);  controler.setLastIteration(this.lastIteration);  PlanCalcScoreType planCalcScore=of.createPlanCalcScoreType();  planCalcScore.setActivityType0(this.activityType_0);  planCalcScore.setActivityType1(this.activityType_1);  planCalcScore.setHomeActivityTypicalDuration(this.homeActivityTypicalDuration);  planCalcScore.setWorkActivityTypicalDuration(this.workActivityTypicalDuration);  planCalcScore.setWorkActivityOpeningTime(this.workActivityOpeningTime);  planCalcScore.setWorkActivityLatestStartTime(this.workActivityLatestStartTime);  ConfigType configType=of.createConfigType();  configType.setMatsimConfig(matsim_config);  configType.setNetwork(network);  configType.setInputPlansFile(inputPlansFileType);  configType.setHotStartPlansFile(hotStratPlansFile);  configType.setControler(controler);  configType.setPlanCalcScore(planCalcScore);  UrbansimParameterType ubansimParameterType=of.createUrbansimParameterType();  ubansimParameterType.setPopulationSamplingRate(this.populationSamplingRate);  ubansimParameterType.setYear(this.year);  ubansimParameterType.setOpusHome(this.opusHome);  ubansimParameterType.setOpusDataPath(this.opusDataPath);  ubansimParameterType.setMatsim4Opus(this.matsim4opus);  ubansimParameterType.setMatsim4OpusConfig(this.matsim4opusConfig);  ubansimParameterType.setMatsim4OpusOutput(this.matsim4opusOutput);  ubansimParameterType.setMatsim4OpusTemp(this.matsim4opusTemp);  ubansimParameterType.setIsTestRun(this.isTestRun);  ubansimParameterType.setRandomLocationDistributionRadiusForUrbanSimZone(this.randomLocationDistributionRadiusForUrbanSimZone);  ubansimParameterType.setTestParameter(this.customParameter);  ubansimParameterType.setBackupRunData(this.backupRunData);  Matsim4UrbansimContolerType matsim4UrbanSimControlerType=of.createMatsim4UrbansimContolerType();  matsim4UrbanSimControlerType.setZone2ZoneImpedance(this.zone2zoneImpedance);  matsim4UrbanSimControlerType.setAgentPerformance(this.agentPerformance);  matsim4UrbanSimControlerType.setZoneBasedAccessibility(this.zoneBasedAccessibility);  matsim4UrbanSimControlerType.setCellBasedAccessibility(this.cellBasedAccessibility);  matsim4UrbanSimControlerType.setCellSizeCellBasedAccessibility(this.cellSizeCellBasedAccessibility);  FileType shapeFile=of.createFileType();  shapeFile.setInputFile(this.shapeFileCellBasedAccessibilityInputFile);  matsim4UrbanSimControlerType.setShapeFileCellBasedAccessibility(shapeFile);  matsim4UrbanSimControlerType.setUseCustomBoundingBox(this.useCustomBoundingBox);  matsim4UrbanSimControlerType.setBoundingBoxBottom(this.boundingBoxTop);  matsim4UrbanSimControlerType.setBoundingBoxLeft(this.boundingBoxLeft);  matsim4UrbanSimControlerType.setBoundingBoxRight(this.boundingBoxRight);  matsim4UrbanSimControlerType.setBoundingBoxTop(this.boundingBoxBottom);  AccessibilityParameterType accessibilityParameterType=of.createAccessibilityParameterType();  accessibilityParameterType.setAccessibilityDestinationSamplingRate(this.accessibilityDestinationSamplingRate);  accessibilityParameterType.setUseLogitScaleParameterFromMATSim(this.useLogitScaleParameterFromMATSim);  accessibilityParameterType.setUseCarParameterFromMATSim(this.useCarParameterFromMATSim);  accessibilityParameterType.setUseWalkParameterFromMATSim(this.useWalkParameterFromMATSim);  accessibilityParameterType.setUseRawSumsWithoutLn(this.useRawSumsWithoutLn);  accessibilityParameterType.setBetaCarTravelTime(this.betaCarTravelTime);  accessibilityParameterType.setBetaCarTravelTimePower2(this.betaCarTravelTimePower2);  accessibilityParameterType.setBetaCarLnTravelTime(this.betaCarLnTravelTime);  accessibilityParameterType.setBetaCarTravelDistance(this.betaCarTravelDistance);  accessibilityParameterType.setBetaCarTravelDistancePower2(this.betaCarTravelDistancePower2);  accessibilityParameterType.setBetaCarLnTravelDistance(this.betaCarLnTravelDistance);  accessibilityParameterType.setBetaCarTravelCost(this.betaCarTravelCost);  accessibilityParameterType.setBetaCarTravelCostPower2(this.betaCarTravelCostPower2);  accessibilityParameterType.setBetaCarLnTravelCost(this.betaCarLnTravelCost);  accessibilityParameterType.setBetaWalkTravelTime(this.betaWalkTravelTime);  accessibilityParameterType.setBetaWalkTravelTimePower2(this.betaWalkTravelTimePower2);  accessibilityParameterType.setBetaWalkLnTravelTime(this.betaWalkLnTravelTime);  accessibilityParameterType.setBetaWalkTravelDistance(this.betaWalkTravelDistance);  accessibilityParameterType.setBetaWalkTravelDistancePower2(this.betaWalkTravelDistancePower2);  accessibilityParameterType.setBetaWalkLnTravelDistance(this.betaWalkLnTravelDistance);  accessibilityParameterType.setBetaWalkTravelCost(this.betaWalkTravelCost);  accessibilityParameterType.setBetaWalkTravelCostPower2(this.betaWalkTravelCostPower2);  accessibilityParameterType.setBetaWalkLnTravelCost(this.betaWalkLnTravelCost);  Matsim4UrbansimType matsim4UrbanSimType=of.createMatsim4UrbansimType();  matsim4UrbanSimType.setUrbansimParameter(ubansimParameterType);  matsim4UrbanSimType.setMatsim4UrbansimContoler(matsim4UrbanSimControlerType);  matsim4UrbanSimType.setAccessibilityParameter(accessibilityParameterType);  MatsimConfigType matsimConfigType=of.createMatsimConfigType();  matsimConfigType.setConfig(configType);  matsimConfigType.setMatsim4Urbansim(matsim4UrbanSimType);  return writeConfigFileV2(matsimConfigType);}  }
class C{  private HostAddress findClusterHostAddress(UrlParser urlParser){  List<HostAddress> hostAddresses=urlParser.getHostAddresses();  Matcher matcher;  for (  HostAddress hostAddress : hostAddresses) {    matcher=clusterPattern.matcher(hostAddress.host);    if (matcher.find()) {      urlEndStr="." + matcher.group(2);      return hostAddress;    }  }  return null;}  }
class C{  public meta removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public void clearHistory(){  ContentResolver cr=mContext.getContentResolver();  truncateHistory(cr,0);}  }
class C{  public void handleContentSelectionChangedEvent(ContentSelectionChangedEvent csce){  computeLaidoutText(ctx,e,node);}  }
class C{  public boolean checkPermission(Principal user,String community,java.security.acl.Permission perm){  for (Enumeration<AclEntry> e=entryList.elements(); e.hasMoreElements(); ) {    AclEntryImpl ent=(AclEntryImpl)e.nextElement();    if (ent.getPrincipal().equals(user))     if (ent.checkPermission(perm) && ent.checkCommunity(community))     return true;  }  return false;}  }
class C{  public final Timestamp addHour(int amount){  long delta=(long)amount * 60 * 60* 1000;  return addMillis(delta);}  }
class C{  private Element createCertificate(Certificate cert) throws CertificateEncodingException {  if (cert == null || !cert.getType().equals(SAMLNames.X509)) {    throw new IllegalArgumentException("Certl is null or not a X509 type");  }  Element x509CertificateEle=doc.createElement(SAMLNames.DS_X509CERTIFICATE);  X509Certificate x509Cert=(X509Certificate)cert;  String base64Str=Base64.encodeBytes(x509Cert.getEncoded());  Node certText=doc.createTextNode(base64Str);  x509CertificateEle.appendChild(certText);  return x509CertificateEle;}  }
class C{  public static void main(String... args){  Result result=new JUnitCore().runMain(new RealSystem(),args);  System.exit(result.wasSuccessful() ? 0 : 1);}  }
class C{  private void readStreamResult(InH3 hIn,HeadersAmp headers) throws IOException {  ServiceRefAmp serviceRef=readToAddress(hIn);  long id=hIn.readLong();  QueryRefAmp queryRef=serviceRef.getQueryRef(id);  if (queryRef != null) {    ClassLoader loader=queryRef.getClassLoader();    Thread thread=Thread.currentThread();    thread.setContextClassLoader(loader);  }  int sequence=hIn.readInt();  List<Object> values=(List)hIn.readObject();  Throwable exn=(Throwable)hIn.readObject(Throwable.class);  boolean isComplete=hIn.readBoolean();  if (log.isLoggable(_logLevel)) {    log.log(_logLevel,"stream-result-r " + values + ","+ isComplete+ " (in "+ this+ ")"+ "\n  {id:"+ id+ ", to:"+ serviceRef+ ","+ headers+ "}");  }  if (queryRef != null) {    if (queryRef.accept(headers,values,sequence,isComplete)) {      serviceRef.removeQueryRef(id);    }    if (exn != null) {      serviceRef.removeQueryRef(id);      queryRef.fail(headers,exn);    }  } else   if (log.isLoggable(Level.WARNING)) {    log.warning("query-result qid=" + id + " for service "+ serviceRef+ " does not match any known queries.\n"+ headers);  }}  }
class C{  public List<WebMediumConfig> browse(BrowseConfig config){  config.addCredentials(this);  String type="";  if (config.type.equals("Bot")) {    type="/get-instances";  } else   if (config.type.equals("Forum")) {    type="/get-forums";  } else   if (config.type.equals("Channel")) {    type="/get-channels";  } else   if (config.type.equals("Domain")) {    type="/get-domains";  }  String xml=POST(this.url + type,config.toXML());  List<WebMediumConfig> instances=new ArrayList<WebMediumConfig>();  Element root=parse(xml);  if (root == null) {    return instances;  }  for (int index=0; index < root.getChildNodes().getLength(); index++) {    WebMediumConfig instance=null;    if (config.type.equals("Bot")) {      instance=new InstanceConfig();    } else     if (config.type.equals("Forum")) {      instance=new ForumConfig();    } else     if (config.type.equals("Channel")) {      instance=new ChannelConfig();    } else     if (config.type.equals("Domain")) {      instance=new DomainConfig();    }    instance.parseXML((Element)root.getChildNodes().item(index));    instances.add(instance);  }  return instances;}  }
class C{  private boolean isNotPositiveCompletion(final String reply){  return getStatus(reply) != 2;}  }
class C{  public void addSetting(final String setting){  if (setting != null && !"".equals(setting))   fSettings.add(setting);}  }
class C{  private void computeBoundedTargetValues(){  mTargetX=(mClampedStartingX - mBounds.exactCenterX()) * .7f;  mTargetY=(mClampedStartingY - mBounds.exactCenterY()) * .7f;  mTargetRadius=mBoundedRadius;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public boolean matches(MetadataContext other){  return other != null && (altFormat == null || altFormat.equals(other.altFormat)) && (projection == null || projection.equals(other.projection)) && (version == null || (other.version != null && other.version.isCompatible(version)));}  }
class C{  public Object opt(int index){  return (index < 0 || index >= length()) ? null : this.myArrayList.get(index);}  }
class C{  public boolean isAnyPolicyInhibited(){  return anyPolicyInhibited;}  }
class C{  public static boolean hasAttribute(MBeanServer server,ObjectName mbean,String attrName) throws Exception {  MBeanInfo info=server.getMBeanInfo(mbean);  MBeanAttributeInfo[] ai=info.getAttributes();  for (  MBeanAttributeInfo attribInfo : ai) {    if (attribInfo.getName().equals(attrName)) {      return true;    }  }  return false;}  }
class C{  public OptionCompleter(){  super();  options=new HashMap<String,String>();}  }
class C{  public void initialise(){  timeSeriesIndex=null;  timeStepIndex=null;}  }
class C{  static synchronized boolean isShapingSupported(){  if (isShapingSupported == null) {    XToolkit.awtLock();    try {      isShapingSupported=XlibWrapper.XShapeQueryExtension(XToolkit.getDisplay(),XlibWrapper.larg1,XlibWrapper.larg2);    }  finally {      XToolkit.awtUnlock();    }  }  return isShapingSupported.booleanValue();}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  ByteVector encodeUTF8(final String s,int i,int maxByteLength){  int charLength=s.length();  int byteLength=i;  char c;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      byteLength++;    } else     if (c > '\u07FF') {      byteLength+=3;    } else {      byteLength+=2;    }  }  if (byteLength > maxByteLength) {    throw new IllegalArgumentException();  }  int start=length - i - 2;  if (start >= 0) {    data[start]=(byte)(byteLength >>> 8);    data[start + 1]=(byte)byteLength;  }  if (length + byteLength - i > data.length) {    enlarge(byteLength - i);  }  int len=length;  for (int j=i; j < charLength; ++j) {    c=s.charAt(j);    if (c >= '\001' && c <= '\177') {      data[len++]=(byte)c;    } else     if (c > '\u07FF') {      data[len++]=(byte)(0xE0 | c >> 12 & 0xF);      data[len++]=(byte)(0x80 | c >> 6 & 0x3F);      data[len++]=(byte)(0x80 | c & 0x3F);    } else {      data[len++]=(byte)(0xC0 | c >> 6 & 0x1F);      data[len++]=(byte)(0x80 | c & 0x3F);    }  }  length=len;  return this;}  }
class C{  protected static void remoteInvalidate(String regionName,String entryName) throws CacheException {  Region root=getRootRegion();  Region region=root.getSubregion(regionName);  Region sub=region.getSubregion(entryName);  if (sub == null) {    String s="Entry \"" + entryName + "\" does not exist";    throw new EntryNotFoundException(s);  }  sub.invalidate(entryName);}  }
class C{  public static UnsignedLong parseUnsignedLong(String s){  try {    return valueOf(Long.parseLong(s));  } catch (  NumberFormatException e) {    return new UnsignedLong(s);  }}  }
class C{  void shrink(){  int n=m_opMap.elementAt(MAPINDEX_LENGTH);  m_opMap.setToSize(n + 4);  m_opMap.setElementAt(0,n);  m_opMap.setElementAt(0,n + 1);  m_opMap.setElementAt(0,n + 2);  n=m_tokenQueue.size();  m_tokenQueue.setToSize(n + 4);  m_tokenQueue.setElementAt(null,n);  m_tokenQueue.setElementAt(null,n + 1);  m_tokenQueue.setElementAt(null,n + 2);}  }
class C{  public HighLowItemLabelGenerator(){  this(DateFormat.getInstance(),NumberFormat.getInstance());}  }
class C{  @NotNull public static String computeElementNameForStringSearch(@NotNull final PsiElement element){  if (element instanceof PyFile) {    return FileUtil.getNameWithoutExtension(((PyFile)element).getName());  }  if (element instanceof PsiDirectory) {    return ((PsiDirectory)element).getName();  }  if ((element instanceof PyStringLiteralExpression) && PyMagicLiteralTools.isMagicLiteral(element)) {    final String name=((StringLiteralExpression)element).getStringValue();    if (name != null) {      return name;    }  }  if (element instanceof PyElement) {    final String name=((PyElement)element).getName();    if (name != null) {      return name;    }  }  return element.getNode().getText();}  }
class C{  public NonUniqueBusinessKeyException(String message,DomainObjectExceptionBean bean,Throwable cause){  super(message,bean,cause);}  }
class C{  @Override public Object create(final ConfigurableFactoryContext ctx){  return new PopupImage(getImage(ctx),getTitle(ctx),getCaption(ctx));}  }
class C{  public GenericGF(int primitive,int size,int b){  this.primitive=primitive;  this.size=size;  this.generatorBase=b;  expTable=new int[size];  logTable=new int[size];  int x=1;  for (int i=0; i < size; i++) {    expTable[i]=x;    x*=2;    if (x >= size) {      x^=primitive;      x&=size - 1;    }  }  for (int i=0; i < size - 1; i++) {    logTable[expTable[i]]=i;  }  zero=new GenericGFPoly(this,new int[]{0});  one=new GenericGFPoly(this,new int[]{1});}  }
class C{  public SVGOMLinearGradientElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public Builder byWeekNo(Collection<Integer> weekNumbers){  byWeekNo.addAll(weekNumbers);  return this;}  }
class C{  public void checkPermissions(NamespaceEntity namespaceEntity,Collection<String> requestedIamRoleNames){  if (Boolean.TRUE.equals(configurationHelper.getBooleanProperty(ConfigurationValue.NAMESPACE_IAM_ROLE_AUTHORIZATION_ENABLED))) {    Set<String> authorizedIamRoleNamesUpper=new HashSet<>();    for (    NamespaceIamRoleAuthorizationEntity namespaceIamRoleAuthorizationEntity : namespaceIamRoleAuthorizationDao.getNamespaceIamRoleAuthorizations(namespaceEntity)) {      authorizedIamRoleNamesUpper.add(namespaceIamRoleAuthorizationEntity.getIamRoleName().toUpperCase().trim());    }    Set<String> unauthorizedIamRoles=new TreeSet<>();    for (    String requestedIamRoleName : requestedIamRoleNames) {      if (StringUtils.isNotBlank(requestedIamRoleName) && !authorizedIamRoleNamesUpper.contains(requestedIamRoleName.toUpperCase().trim())) {        unauthorizedIamRoles.add(requestedIamRoleName);      }    }    if (!unauthorizedIamRoles.isEmpty()) {      throw new AccessDeniedException(String.format("The namespace \"%s\" does not have access to the following IAM roles: %s",namespaceEntity.getCode(),unauthorizedIamRoles));    }  }}  }
class C{  public VOUserDetails validateLdapProperties(VOUserDetails user) throws ValidationException {  LdapVOUserDetailsMapper mapper=new LdapVOUserDetailsMapper(user,this.attrMap);  VOUserDetails tmpUser=new VOUserDetails();  tmpUser.setAdditionalName(user.getAdditionalName());  tmpUser.setEMail(user.getEMail());  tmpUser.setFirstName(user.getFirstName());  tmpUser.setLastName(user.getLastName());  tmpUser.setLocale(user.getLocale());  try {    String dnName=ldapAccess.dnSearch(this.dirProperties,this.baseDN,this.attrMap.get(SettingType.LDAP_ATTR_UID) + "=" + user.getUserId());    if (dnName == null) {      ValidationException vf=new ValidationException(ReasonEnum.LDAP_USER_NOT_FOUND,null,new Object[]{user.getUserId()});      logger.logError(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.ERROR_LDAP_SEARCH_OF_USER_FAILED,user.getUserId());      throw vf;    }    List<VOUserDetails> result=ldapAccess.search(this.dirProperties,this.baseDN,this.attrMap.get(SettingType.LDAP_ATTR_UID) + "=" + user.getUserId(),mapper,true);    int size=result.size();    if (size == 1) {      user=result.get(0);      if (user.getLocale() != null && !user.getLocale().isEmpty() && user.getLocale().length() > LOCAL_LENGTH) {        user.setLocale(user.getLocale().substring(0,LOCAL_LENGTH));      }      validateLdapPropertyValue(this.attrMap,SettingType.LDAP_ATTR_ADDITIONAL_NAME,tmpUser.getAdditionalName(),user.getAdditionalName());      validateLdapPropertyValue(this.attrMap,SettingType.LDAP_ATTR_EMAIL,tmpUser.getEMail(),user.getEMail());      validateLdapPropertyValue(this.attrMap,SettingType.LDAP_ATTR_FIRST_NAME,tmpUser.getFirstName(),user.getFirstName());      validateLdapPropertyValue(this.attrMap,SettingType.LDAP_ATTR_LAST_NAME,tmpUser.getLastName(),user.getLastName());      validateLdapPropertyValue(this.attrMap,SettingType.LDAP_ATTR_LOCALE,tmpUser.getLocale(),user.getLocale());      return result.get(0);    } else     if (size == 0) {      ValidationException vf=new ValidationException(ReasonEnum.LDAP_USER_NOT_FOUND,null,new Object[]{user.getUserId()});      logger.logError(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.ERROR_VALIDATION_PARAMETER_LDAP_FOUND_ERROR,"LDAP User");      throw vf;    } else {      ValidationException vf=new ValidationException(ReasonEnum.LDAP_USER_NOT_UNIQUE,null,new Object[]{user.getUserId()});      logger.logError(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.ERROR_VALIDATION_PARAMETER_LDAP_FOUND_ERROR,"LDAP User");      throw vf;    }  } catch (  NameNotFoundException nnfe) {    ValidationException vf=new ValidationException(ReasonEnum.LDAP_BASE_DN_INVALID,null,new Object[]{this.baseDN});    logger.logError(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.ERROR_LDAP_ACCESS_FAILED,nnfe.getMessage());    throw vf;  }catch (  NamingException e1) {    Object[] params=new Object[]{dirProperties.get(Context.PROVIDER_URL),e1.getMessage()};    ValidationException vf=new ValidationException(ReasonEnum.LDAP_CONNECTION_REFUSED,null,params);    logger.logError(Log4jLogger.SYSTEM_LOG,vf,LogMessageIdentifier.ERROR_LDAP_SYSTEM_CONNECTION_REFUSED,"LDAPuser");    throw vf;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:24.479 -0500",hash_original_method="2F0F0316C5E4D930E75010F1BAA9D392",hash_generated_method="681A781EC2437AC68684B5DBAE6EAD4D") private boolean shouldPostNotification(GsmDataConnection.FailCause cause){  return (cause != GsmDataConnection.FailCause.UNKNOWN);}  }
class C{  public static void fill(Object[] array,Object value){  for (int i=0; i < array.length; i++) {    array[i]=value;  }}  }
class C{  public void writeShort(short s) throws IOException {  this.temp[0]=(byte)((s >>> 8) & 0xff);  this.temp[1]=(byte)(s & 0xff);  this.write(this.temp,0,2);}  }
class C{  public Color showColorChooser(){  JColorChooser colorChooser=new JColorChooser();  Color theColor=JColorChooser.showDialog(this,"Choose Color",colorIndicator.getBackground());  colorChooser.setLocation(200,200);  return theColor;}  }
class C{  public static <K,V,M extends Map<K,V>>SynchronizedMutableMap<K,V> of(M map){  if (map == null) {    throw new IllegalArgumentException("cannot create a SynchronizedMutableMap for null");  }  return new SynchronizedMutableMap<>(MapAdapter.adapt(map));}  }
class C{  public RemoteSageFile(String hostname,String name,boolean forceActive) throws IOException {  this.hostname=hostname;  remoteFilename=name;  this.transcodeMode=null;  this.readonly=true;  this.forceActive=forceActive;  this.uploadId=-1;  connect();}  }
class C{  protected void EMIT_Commutative(Operator operator,Instruction s,Operand result,Operand val1,Operand val2){  if (VM.VerifyAssertions)   opt_assert(result.isRegister() || result.isMemory());  if (val2.similar(result) || val1.isConstant()) {    Operand temp=val1;    val1=val2;    val2=temp;  }  if (!result.similar(val1)) {    EMIT(CPOS(s,MIR_Move.create(IA32_MOV,result.copy(),val1)));  }  EMIT(MIR_BinaryAcc.mutate(s,operator,result,val2));}  }
class C{  public TextParsingReader(Logger logger,InputStream input,String name) throws IOException {  super(logger,input,name);}  }
class C{  public void loadSheet(BufferedReader reader) throws IOException, ServiceException {  SpreadsheetFeed feed=service.getFeed(factory.getSpreadsheetsFeedUrl(),SpreadsheetFeed.class);  List spreadsheets=feed.getEntries();  int spreadsheetIndex=getIndexFromUser(reader,spreadsheets,"spreadsheet");  SpreadsheetEntry spreadsheet=(SpreadsheetEntry)spreadsheets.get(spreadsheetIndex);  URL spreadsheetUrl=new java.net.URL(spreadsheet.getSpreadsheetLink().getHref());  this.baseUrl=spreadsheetUrl.getProtocol() + "://" + spreadsheetUrl.getHost();  this.spreadsheetKey=spreadsheet.getKey();  tablesFeedUrl=new java.net.URL(this.baseUrl + "/feeds/" + spreadsheet.getKey()+ "/tables");  out.println("Sheet loaded.");}  }
class C{  public static long dateValueFromAbsoluteDay(long absoluteDay){  long d=absoluteDay + 719468;  long y100=0, offset;  if (d > 578040) {    long y400=d / 146097;    d-=y400 * 146097;    y100=d / 36524;    d-=y100 * 36524;    offset=y400 * 400 + y100 * 100;  } else {    d+=292200000002L;    offset=-800000000;  }  long y4=d / 1461;  d-=y4 * 1461;  long y=d / 365;  d-=y * 365;  if (d == 0 && (y == 4 || y100 == 4)) {    y--;    d+=365;  }  y+=offset + y4 * 4;  int m=((int)d * 2 + 1) * 5 / 306;  d-=DAYS_OFFSET[m] - 1;  if (m >= 10) {    y++;    m-=12;  }  return dateValue(y,m + 3,(int)d);}  }
class C{  public void trimToSize(){  modCount++;  if (size < elementData.length) {    elementData=Arrays.copyOf(elementData,size);  }}  }
class C{  public static void newEpoch(){  currentEpoch++;}  }
class C{  public Vertex has(Vertex source,Vertex target){  return has(source,source.getNetwork().createVertex(Primitive.ELEMENT),target);}  }
class C{  @RequestMapping(value="/api/greetings/{id}",method=RequestMethod.PUT,consumes=MediaType.APPLICATION_JSON_VALUE,produces=MediaType.APPLICATION_JSON_VALUE) public ResponseEntity<Greeting> updateGreeting(@PathVariable("id") final Long id,@RequestBody final Greeting greeting){  logger.info("> updateGreeting");  greeting.setId(id);  final Greeting updatedGreeting=greetingService.update(greeting);  logger.info("< updateGreeting");  return new ResponseEntity<Greeting>(updatedGreeting,HttpStatus.OK);}  }
class C{  public void exportAll(File file){  if (!file.exists()) {    file.mkdir();  }  if (!file.isDirectory()) {    LogEmitter.factory.get().emit(file,Core.ALERT.DANGER,"Export failed. Selected file is not a directory.");  }  try {    File image=new File(file.getCanonicalPath() + File.separator + "physical.png");    File xml=new File(file.getCanonicalPath() + File.separator + "physical.xml");    exportImage(image);    exportXML(xml);  } catch (  IOException ex) {    LogEmitter.factory.get().emit(file,Core.ALERT.DANGER,"Export failed.");    Logger.getLogger(PhysicalGraph.class.getName()).log(Level.SEVERE,null,ex);  }catch (  DataIOException ex) {    Logger.getLogger(PhysicalGraph.class.getName()).log(Level.SEVERE,null,ex);  }}  }
class C{  public static _QueryDeletedOption fromString(final String value) throws SOAPSerializationException {  return (_QueryDeletedOption)Enumeration.fromString(value,_QueryDeletedOption.VALUES_TO_INSTANCES);}  }
class C{  @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:25.578 -0500",hash_original_method="5B74FDBCA1C0676CAF2A41085AFE51F9",hash_generated_method="F9F79A99BEC07821AA52E5285769563E") @DSVerified protected void onBindDialogView(View view){  View dialogMessageView=view.findViewById(com.android.internal.R.id.message);  if (dialogMessageView != null) {    final CharSequence message=getDialogMessage();    int newVisibility=View.GONE;    if (!TextUtils.isEmpty(message)) {      if (dialogMessageView instanceof TextView) {        ((TextView)dialogMessageView).setText(message);      }      newVisibility=View.VISIBLE;    }    if (dialogMessageView.getVisibility() != newVisibility) {      dialogMessageView.setVisibility(newVisibility);    }  }}  }
class C{  public void removeNoSubclassDependency(RVMClass source,int dependent_cmid){  MethodSet s=noSubclassHash.get(source);  if (s != null) {    s.remove(dependent_cmid);  }}  }
class C{  public big addElement(String hashcode,Element element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public APIPermissionSet(User user) throws GuacamoleException {  addSystemPermissions(systemPermissions,user.getSystemPermissions());  addObjectPermissions(connectionPermissions,user.getConnectionPermissions());  addObjectPermissions(connectionGroupPermissions,user.getConnectionGroupPermissions());  addObjectPermissions(sharingProfilePermissions,user.getSharingProfilePermissions());  addObjectPermissions(activeConnectionPermissions,user.getActiveConnectionPermissions());  addObjectPermissions(userPermissions,user.getUserPermissions());}  }
class C{  public DriverTask restoreSnapshot(List<VolumeSnapshot> snapshots){  DriverTask task=new DellSCDriverTask("restoreVolumeSnapshot");  task.setStatus(TaskStatus.FAILED);  task.setMessage("Snapshot restore is not supported at this time.");  LOG.warn("Snapshot restore is not supported at this time.");  return null;}  }
class C{  public void incrementConsciousnessLevel(){  incrementConsciousnessLevel(1);}  }
class C{  public MediaActionSound(){  mSoundPool=new SoundPool(NUM_MEDIA_SOUND_STREAMS,AudioManager.STREAM_SYSTEM_ENFORCED,0);  mSoundPool.setOnLoadCompleteListener(mLoadCompleteListener);  mSoundIds=new int[SOUND_FILES.length];  for (int i=0; i < mSoundIds.length; i++) {    mSoundIds[i]=SOUND_NOT_LOADED;  }  mSoundIdToPlay=SOUND_NOT_LOADED;}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static TraceList createTrace(final AbstractSQLProvider provider,final INaviModule module,final String name,final String description) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE00570: Provider argument can not be null");  Preconditions.checkNotNull(module,"IE00571: Module argument can not be null");  Preconditions.checkNotNull(name,"IE02192: Name argument can not be null");  Preconditions.checkNotNull(description,"IE02193: Description argument can not be null");  Preconditions.checkArgument(module.inSameDatabase(provider),"IE00572: The given module is not part of this database");  return createTrace(provider,CTableNames.MODULE_TRACES_TABLE,"module_id",CTableNames.MODULES_TABLE,module.getConfiguration().getId(),name,description);}  }
class C{  public static boolean containLetterAndDigit(String str){  return (containLetter(str) && containNumber(str));}  }
class C{  public SearchRequestBuilder addHighlightedField(HighlightBuilder.Field field){  highlightBuilder().field(field);  return this;}  }
class C{  static byte[] decryptData(byte[] password,byte[] encryptedData){  try {    Cipher c=Cipher.getInstance(ENCRYPT_DATA_ALGORITHM);    c.init(Cipher.DECRYPT_MODE,new SecretKeySpec(password,SECRET_KEY_ALGORITHM),CBC_SALT_DATA);    return c.doFinal(encryptedData);  } catch (  Exception e) {    throw new IllegalStateException(ENCRYPT_DATA_ALGORITHM + " is not available",e);  }}  }
class C{  public StandardBarPainter(){}  }
class C{  @Override public int eDerivedStructuralFeatureID(int baseFeatureID,Class<?> baseClass){  if (baseClass == ModifiableElement.class) {switch (baseFeatureID) {case N4JSPackage.MODIFIABLE_ELEMENT__DECLARED_MODIFIERS:      return N4JSPackage.N4_SETTER_DECLARATION__DECLARED_MODIFIERS;default :    return -1;}}if (baseClass == N4MemberDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.N4_MEMBER_DECLARATION__OWNER:  return N4JSPackage.N4_SETTER_DECLARATION__OWNER;default :return -1;}}if (baseClass == AnnotableN4MemberDeclaration.class) {switch (baseFeatureID) {case N4JSPackage.ANNOTABLE_N4_MEMBER_DECLARATION__ANNOTATION_LIST:return N4JSPackage.N4_SETTER_DECLARATION__ANNOTATION_LIST;default :return -1;}}if (baseClass == N4FieldAccessor.class) {switch (baseFeatureID) {default :return -1;}}return super.eDerivedStructuralFeatureID(baseFeatureID,baseClass);}  }
class C{  public static PlatformUser createUser(DataService mgr,String userId) throws NonUniqueBusinessKeyException, ObjectNotFoundException {  Organization org=Organizations.createOrganization(mgr);  return createUser(mgr,userId,org);}  }
class C{  public void cancel(){  request.cancel();}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL__ORIGINAL_TARGET:    if (resolve)     return getOriginalTarget();  return basicGetOriginalTarget();case ImPackage.SYMBOL_TABLE_ENTRY_ORIGINAL__IMPORT_SPECIFIER:if (resolve) return getImportSpecifier();return basicGetImportSpecifier();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void populateSubDomainHierarchyLazy(Space space,DimensionIndex root,Axis axis,ArrayList<DimensionIndex> result,IDomain type) throws InterruptedException, ScopeException {  Object adapter=type.getAdapter(Domain.class);  if (adapter != null && adapter instanceof Domain) {    Domain target=(Domain)adapter;    logger.info("creating subdomain for domain " + target.toString() + " in "+ space.toString());    Axis source=axis;    try {      DimensionIndex self=new DimensionIndex(null,source);      subdomains.add(self);    } catch (    DimensionStoreException e) {      logger.error("failed to create subdomain for domain " + target.toString() + " in "+ space.toString());    }  } else {    logger.error("Unable to resolve the sub-domain");    if (!dimensionIndexInList(result,axis)) {      result.add(DimensionIndexCreationUtils.createInvalidIndex(root,axis,"Unable to resolve the sub-domain"));    }  }}  }
class C{  public static char[] ensureCapacity(final char[] array,final int length,final int preserve){  if (length > array.length) {    final char t[]=new char[length];    System.arraycopy(array,0,t,0,preserve);    return t;  }  return array;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public MatchResult matchNextInBasicBlock() throws DataflowAnalysisException {  if (!moreInstructionsInBasicBlock()) {    throw new IllegalStateException("At end of BB!");  }  Location location=new Location(instructionIterator.next(),basicBlock);  return matchLocation(location);}  }
class C{  private void registerProviders(Module module){  if (module instanceof IAudioPacketProvider) {    ((IAudioPacketProvider)module).setAudioPacketListener(mAudioPacketBroadcaster);  }  if (module instanceof ICallEventProvider) {    ((ICallEventProvider)module).addCallEventListener(mCallEventBroadcaster);  }  if (module instanceof IChannelEventProvider) {    ((IChannelEventProvider)module).setChannelEventListener(mChannelEventBroadcaster);  }  if (module instanceof IDecoderStateEventProvider) {    ((IDecoderStateEventProvider)module).setDecoderStateListener(mDecoderStateEventBroadcaster);  }  if (module instanceof IFrequencyChangeProvider) {    ((IFrequencyChangeProvider)module).setFrequencyChangeListener(mFrequencyChangeEventBroadcaster);  }  if (module instanceof IMessageProvider) {    ((IMessageProvider)module).setMessageListener(mMessageBroadcaster);  }  if (module instanceof IMetadataProvider) {    ((IMetadataProvider)module).setMetadataListener(mMetadataBroadcaster);  }  if (module instanceof IFilteredRealBufferProvider) {    ((IFilteredRealBufferProvider)module).setFilteredRealBufferListener(mFilteredRealBufferBroadcaster);  }  if (module instanceof ISquelchStateProvider) {    ((ISquelchStateProvider)module).setSquelchStateListener(mSquelchStateBroadcaster);  }  if (module instanceof IUnFilteredRealBufferProvider) {    ((IUnFilteredRealBufferProvider)module).setUnFilteredRealBufferListener(mUnFilteredRealBufferBroadcaster);  }}  }
class C{  public Builder coordB(Double coordB){  this.coordB=coordB;  return this;}  }
class C{  public void seek(long newPosition) throws IOException {  out.seek(newPosition + streamOffset);}  }
class C{  private List<Transform> createTransforms(){  XMLSignatureFactory factory=XMLSignatureFactory.getInstance();  List<Transform> transforms=new ArrayList<Transform>(2);  List<String> prefixList=new ArrayList<String>(2);  prefixList.add(XMLConstants.XSD_PREFIX);  prefixList.add(XMLConstants.XSI_PREFIX);  try {    transforms.add(factory.newTransform(CanonicalizationMethod.ENVELOPED,(TransformParameterSpec)null));    transforms.add(factory.newTransform(CanonicalizationMethod.EXCLUSIVE,new ExcC14NParameterSpec(prefixList)));  } catch (  Exception e) {    throw new IllegalStateException("Cannot create enveloped or exclusive transform objects.",e);  }  log.debug("Created transforms: {} and {}",CanonicalizationMethod.ENVELOPED,CanonicalizationMethod.EXCLUSIVE);  return transforms;}  }
class C{  public HessianInput(InputStream is){  init(is);}  }
class C{  protected static long nextID(){  return PRINTED_NODES++;}  }
class C{  static public void assertEquals(Object expected,Object actual){  assertEquals(null,expected,actual);}  }
class C{  public RemoteTask perform(BuildRequest request) throws BuilderException {  final Link link=Links.getLink(Constants.LINK_REL_BUILD,links);  if (link == null) {    throw new BuilderException("Unable get URL for starting remote process");  }  return perform(DtoFactory.getInstance().clone(link),request);}  }
class C{  public OneCamera.Facing switchCameraFacing(){  final OneCamera.Facing originalFacing=getCameraFacing();  final OneCamera.Facing newFacing=(originalFacing == OneCamera.Facing.BACK) ? OneCamera.Facing.FRONT : OneCamera.Facing.BACK;  setCameraFacing(newFacing);  return newFacing;}  }
class C{  @SuppressWarnings({"unchecked"}) public static synchronized <T>T instantiate(String className,ClassLoader classLoader) throws Exception {  return (T)Class.forName(className,true,classLoader).newInstance();}  }
class C{  public boolean isSecureProcessing(){  return m_isSecureProcessing;}  }
class C{  private void dynInit(){  fAttribute.setText(m_DisplayAttribute);  lAttributeValue.setValue(m_Attribute);  fValue.setText(m_DisplayValue);  lValueValue.setValue(m_Value);  if (CLogMgt.isLevelFine()) {    lAttributeValue.setVisible(false);    lValueValue.setVisible(false);  }  cbClient.setEnabled(false);  cbClient.setChecked(true);  if (MRole.PREFERENCETYPE_Client.equals(m_role.getPreferenceType()))   cbOrg.addEventListener(Events.ON_CHECK,this); else {    cbOrg.setEnabled(false);    cbOrg.setChecked(true);  }  if (MRole.PREFERENCETYPE_Client.equals(m_role.getPreferenceType()) || MRole.PREFERENCETYPE_Organization.equals(m_role.getPreferenceType()))   cbUser.addEventListener(Events.ON_CHECK,this); else {    cbUser.setEnabled(false);    cbUser.setChecked(true);  }  cbWindow.addEventListener(Events.ON_CHECK,this);  confirmPanel.addComponentsLeft(confirmPanel.createButton("Delete"));  confirmPanel.addActionListener(Events.ON_CLICK,this);  bDelete=confirmPanel.getButton("Delete");  setExplanation();}  }
class C{  public int write(OutputStreamWithBuffer os,char[] buf,int offset,int length) throws IOException {  if (_writer == null) {    if (_charset != null)     _writer=new OutputStreamWriter(os,_charset); else     _writer=new OutputStreamWriter(os,_encoding);  }  _writer.write(buf,offset,length);  _writer.flush();  return length;}  }
class C{  public LTMatrixF(String fname) throws FileNotFoundException, IOException {  super(fname);}  }
class C{  public void testVirtualDestinationsWithWildcardWithVirtualQueuePreCreated() throws Exception {  startAllBrokers();  sendReceive("Consumer.a.local.test.>",false,"Consumer.a.local.test.>",false,1,1);  sendReceive("local.test.1",true,"Consumer.a.local.test.>",false,1,1);  sendReceive("Consumer.a.global.test.>",false,"Consumer.a.global.test.>",false,1,1);  sendReceive("global.test.1",true,"Consumer.a.global.test.>",false,1,1);  destroyAllBrokers();}  }
class C{  public void basicRun(TestResult result){  fTest.run(result);}  }
class C{  public JCTree.Tag kindToTag(Tree.Kind kind){switch (kind) {case AND:    return JCTree.Tag.BITAND;case AND_ASSIGNMENT:  return JCTree.Tag.BITAND_ASG;case ANNOTATION:return JCTree.Tag.ANNOTATION;case ANNOTATION_TYPE:return JCTree.Tag.TYPE_ANNOTATION;case ARRAY_ACCESS:return JCTree.Tag.INDEXED;case ARRAY_TYPE:return JCTree.Tag.TYPEARRAY;case ASSERT:return JCTree.Tag.ASSERT;case ASSIGNMENT:return JCTree.Tag.ASSIGN;case BITWISE_COMPLEMENT:return JCTree.Tag.COMPL;case BLOCK:return JCTree.Tag.BLOCK;case BREAK:return JCTree.Tag.BREAK;case CASE:return JCTree.Tag.CASE;case CATCH:return JCTree.Tag.CATCH;case CLASS:return JCTree.Tag.CLASSDEF;case CONDITIONAL_AND:return JCTree.Tag.AND;case CONDITIONAL_EXPRESSION:return JCTree.Tag.CONDEXPR;case CONDITIONAL_OR:return JCTree.Tag.OR;case CONTINUE:return JCTree.Tag.CONTINUE;case DIVIDE:return JCTree.Tag.DIV;case DIVIDE_ASSIGNMENT:return JCTree.Tag.DIV_ASG;case DO_WHILE_LOOP:return JCTree.Tag.DOLOOP;case ENHANCED_FOR_LOOP:return JCTree.Tag.FOREACHLOOP;case EQUAL_TO:return JCTree.Tag.EQ;case EXPRESSION_STATEMENT:return JCTree.Tag.EXEC;case FOR_LOOP:return JCTree.Tag.FORLOOP;case GREATER_THAN:return JCTree.Tag.GT;case GREATER_THAN_EQUAL:return JCTree.Tag.GE;case IDENTIFIER:return JCTree.Tag.IDENT;case IF:return JCTree.Tag.IF;case IMPORT:return JCTree.Tag.IMPORT;case INSTANCE_OF:return JCTree.Tag.TYPETEST;case LABELED_STATEMENT:return JCTree.Tag.LABELLED;case LEFT_SHIFT:return JCTree.Tag.SL;case LEFT_SHIFT_ASSIGNMENT:return JCTree.Tag.SL_ASG;case LESS_THAN:return JCTree.Tag.LT;case LESS_THAN_EQUAL:return JCTree.Tag.LE;case LOGICAL_COMPLEMENT:return JCTree.Tag.NOT;case MEMBER_SELECT:return JCTree.Tag.SELECT;case METHOD:return JCTree.Tag.METHODDEF;case METHOD_INVOCATION:return JCTree.Tag.APPLY;case MINUS:return JCTree.Tag.MINUS;case MINUS_ASSIGNMENT:return JCTree.Tag.MINUS_ASG;case MODIFIERS:return JCTree.Tag.MODIFIERS;case MULTIPLY:return JCTree.Tag.MUL;case MULTIPLY_ASSIGNMENT:return JCTree.Tag.MUL_ASG;case NEW_ARRAY:return JCTree.Tag.NEWARRAY;case NEW_CLASS:return JCTree.Tag.NEWCLASS;case NOT_EQUAL_TO:return JCTree.Tag.NE;case OR:return JCTree.Tag.BITOR;case OR_ASSIGNMENT:return JCTree.Tag.BITOR_ASG;case PARENTHESIZED:return JCTree.Tag.PARENS;case PLUS:return JCTree.Tag.PLUS;case PLUS_ASSIGNMENT:return JCTree.Tag.PLUS_ASG;case POSTFIX_DECREMENT:return JCTree.Tag.POSTDEC;case POSTFIX_INCREMENT:return JCTree.Tag.POSTINC;case PREFIX_DECREMENT:return JCTree.Tag.PREDEC;case PREFIX_INCREMENT:return JCTree.Tag.PREINC;case REMAINDER:return JCTree.Tag.MOD;case REMAINDER_ASSIGNMENT:return JCTree.Tag.MOD_ASG;case RETURN:return JCTree.Tag.RETURN;case RIGHT_SHIFT:return JCTree.Tag.SR;case RIGHT_SHIFT_ASSIGNMENT:return JCTree.Tag.SR_ASG;case SWITCH:return JCTree.Tag.SWITCH;case SYNCHRONIZED:return JCTree.Tag.SYNCHRONIZED;case THROW:return JCTree.Tag.THROW;case TRY:return JCTree.Tag.TRY;case TYPE_CAST:return JCTree.Tag.TYPECAST;case TYPE_PARAMETER:return JCTree.Tag.TYPEPARAMETER;case UNARY_MINUS:return JCTree.Tag.NEG;case UNARY_PLUS:return JCTree.Tag.POS;case UNION_TYPE:return JCTree.Tag.TYPEUNION;case UNSIGNED_RIGHT_SHIFT:return JCTree.Tag.USR;case UNSIGNED_RIGHT_SHIFT_ASSIGNMENT:return JCTree.Tag.USR_ASG;case VARIABLE:return JCTree.Tag.VARDEF;case WHILE_LOOP:return JCTree.Tag.WHILELOOP;case XOR:return JCTree.Tag.BITXOR;case XOR_ASSIGNMENT:return JCTree.Tag.BITXOR_ASG;default :return JCTree.Tag.NO_TAG;}}  }
class C{  public static String nullify(String value){  if (isEmpty(value)) {    return null;  }  return value;}  }
class C{  @Override public void process() throws MigrationCallbackException {  log.info("Started execution of XtremioBlockSnapshotDeviceLabelMigration migration callback.");  try {    DbClient dbClient=getDbClient();    List<URI> storageSystemURIList=dbClient.queryByType(StorageSystem.class,true);    Iterator<StorageSystem> storageSystems=dbClient.queryIterativeObjects(StorageSystem.class,storageSystemURIList);    while (storageSystems.hasNext()) {      StorageSystem storageSystem=storageSystems.next();      if (DiscoveredDataObject.Type.xtremio.name().equalsIgnoreCase(storageSystem.getSystemType())) {        URIQueryResultList snapshotURIs=new URIQueryResultList();        dbClient.queryByConstraint(ContainmentConstraint.Factory.getStorageDeviceSnapshotConstraint(storageSystem.getId()),snapshotURIs);        Iterator<BlockSnapshot> xioSnapshots=dbClient.queryIterativeObjects(BlockSnapshot.class,snapshotURIs);        List<BlockSnapshot> updatedSnaps=new ArrayList<BlockSnapshot>();        while (xioSnapshots.hasNext()) {          BlockSnapshot xioSnapshot=xioSnapshots.next();          if (!xioSnapshot.getInactive() && NullColumnValueGetter.isNullValue(xioSnapshot.getDeviceLabel())) {            String label=xioSnapshot.getLabel();            log.info(String.format("Setting deviceLabel of snapshot %s : %s to %s",label,xioSnapshot.getNativeGuid(),label));            xioSnapshot.setDeviceLabel(label);            updatedSnaps.add(xioSnapshot);          }        }        dbClient.updateObject(updatedSnaps);      }    }    log.info("Completed executing XtremioBlockSnapshotDeviceLabelMigration migration callback.");  } catch (  Exception e) {    String errorMsg=String.format("%s encounter unexpected error %s",this.getName(),e.getMessage());    throw new MigrationCallbackException(errorMsg,e);  }}  }
class C{  public int FindProc(String id){  int i=0;  while (i < procs.size()) {    ProcedureEntry pe=(ProcedureEntry)procs.elementAt(i);    if (pe.name.equals(id))     return i;    i=i + 1;  }  return i;}  }
class C{  public void erasePurchase(String sku){  if (mPurchaseMap.containsKey(sku))   mPurchaseMap.remove(sku);}  }
class C{  public static boolean copy(File src,File dst){  long length=src.length();  return copy(src,(int)length,dst) == length;}  }
class C{  public DoubleVector rev(){  int n=size();  DoubleVector w=new DoubleVector(n);  for (int i=0; i < n; i++) {    w.V[i]=V[n - i - 1];  }  return w;}  }
class C{  public String saveForReseller(){  return save(model.getResellerServicePricings());}  }
class C{  public void createTopics(int numPartitions,int replicationFactor,String... topics){  for (  String topic : topics) {    if (topic != null)     createTopic(topic,numPartitions,replicationFactor);  }}  }
class C{  public static int findWordStart(String line,int pos,String noWordSep){  char ch=line.charAt(pos - 1);  if (noWordSep == null) {    noWordSep="";  }  boolean selectNoLetter=(!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1);  int wordStart=0;  for (int i=pos - 1; i >= 0; i--) {    ch=line.charAt(i);    if (selectNoLetter ^ (!Character.isLetterOrDigit(ch) && noWordSep.indexOf(ch) == -1)) {      wordStart=i + 1;      break;    }  }  return wordStart;}  }
class C{  public static File createTempFoXmlFile() throws IOException {  File tempXmlFile=File.createTempFile(tempFilePrefix,".xml");  tempXmlFile.deleteOnExit();  return tempXmlFile;}  }
class C{  public HealerBehaviour(final int cost){  super();  priceCalculator.addCoveredItem("heal",cost);}  }
class C{  public boolean isAlwaysThroughS3(){  return alwaysThroughS3;}  }
class C{  @Override public void run(){  amIActive=true;  WhiteboxRaster image;  int cols, rows, col, row, a, numImages, loopNum, progress;  double noData;  String inputFilesString;  String[] imageFiles;  String[] shortNames;  double[] imageTotals;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputFilesString=args[0];  imageFiles=inputFilesString.split(";");  numImages=imageFiles.length;  try {    imageTotals=new double[numImages];    shortNames=new String[numImages];    double[] data;    loopNum=0;    for (a=0; a < numImages; a++) {      loopNum++;      updateProgress("Loop " + loopNum + " of "+ numImages+ ":",0);      image=new WhiteboxRaster(imageFiles[a],"r");      noData=image.getNoDataValue();      rows=image.getNumberRows();      cols=image.getNumberColumns();      shortNames[a]=image.getShortHeaderFile();      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          if (data[col] != noData) {            imageTotals[a]+=data[col];          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(int)(row * 100.0 / rows);        updateProgress("Loop " + loopNum + " of "+ numImages+ ":",progress);      }      image.close();    }    String retstr;    DecimalFormat df=new DecimalFormat("###,###,###,###.0000");    retstr="Number of Grid Cells:\n\n";    for (a=0; a < numImages; a++) {      retstr+=shortNames[a] + ":\t" + df.format(imageTotals[a])+ "\n";    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public boolean nullsBoundDifferently(OneRowChange.ColumnSpec col){  if (col.getType() == AdditionalTypes.XML)   return true; else   return false;}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:    setRewiredTarget((SymbolTableEntry)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  private void updateDmdDetForRcptCancel(final EgDemand demand,final BillReceiptInfo billRcptInfo){  LOGGER.debug("Entering method updateDmdDetForRcptCancel");  ReceiptAccountInfo rebateRcptAccInfo=null;  final Map<String,ReceiptAccountInfo> rebateReceiptAccInfoByInstallment=getRebteReceiptAccountInfosByInstallment(billRcptInfo);  for (  final ReceiptAccountInfo rcptAccInfo : billRcptInfo.getAccountDetails())   if (rcptAccInfo.getCrAmount() != null && rcptAccInfo.getCrAmount().compareTo(BigDecimal.ZERO) == 1 && !rcptAccInfo.getIsRevenueAccount()) {    final String[] desc=rcptAccInfo.getDescription().split("-",2);    final String reason=desc[0].trim();    final String installment=desc[1].trim();    EgDemandReasonMaster demandReasonMaster=null;    rebateRcptAccInfo=rebateReceiptAccInfoByInstallment.get(installment);    for (    final EgDemandDetails demandDetail : demand.getEgDemandDetails()) {      demandReasonMaster=demandDetail.getEgDemandReason().getEgDemandReasonMaster();      if (reason.equalsIgnoreCase(demandReasonMaster.getReasonMaster()))       if (reason.equalsIgnoreCase(DEMANDRSN_CODE_ADVANCE) || installment.equals(demandDetail.getEgDemandReason().getEgInstallmentMaster().getDescription())) {        if (rebateRcptAccInfo != null)         if (demandDetail.getAmtRebate().compareTo(BigDecimal.ZERO) > 0 && (demandReasonMaster.getCode().equals(DEMANDRSN_CODE_GENERAL_TAX) || demandReasonMaster.getCode().equalsIgnoreCase(DEMANDRSN_CODE_ADVANCE)))         demandDetail.setAmtRebate(demandDetail.getAmtRebate().subtract(rebateRcptAccInfo.getDrAmount()));        if (demandDetail.getAmtCollected().compareTo(rcptAccInfo.getCrAmount()) < 0)         throw new ApplicationRuntimeException("updateDmdDetForRcptCancel : Exception while updating cancel receipt, " + "to be deducted amount " + rcptAccInfo.getCrAmount() + " is greater than the collected amount "+ demandDetail.getAmtCollected()+ " for demandDetail "+ demandDetail);        demandDetail.setAmtCollected(demandDetail.getAmtCollected().subtract(rcptAccInfo.getCrAmount()));        LOGGER.info("Deducted Collected amount Rs." + rcptAccInfo.getCrAmount() + " for tax : "+ reason+ " and installment : "+ installment);      }    }  }  updateReceiptStatusWhenCancelled(billRcptInfo.getReceiptNum());  LOGGER.debug("Exiting method updateDmdDetForRcptCancel");}  }
class C{  public ToStringBuilder append(String fieldName,char value){  style.append(buffer,fieldName,value);  return this;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:30.115 -0500",hash_original_method="58A10F22323B4B8503459506A12E3479",hash_generated_method="1D95BBC61498E5F4C57C445376D1F116") public MalformedChallengeException(String message,Throwable cause){  super(message,cause);}  }
class C{  public Vector3 seek(ReadOnlyVector3 point){  Vector3 dir=new Vector3(point);  dir.subtractLocal(basicCamera.getLocation());  dir.normalizeLocal();  Vector3 angle=MathUtil.directionToAzEl(dir,null);  return (angle);}  }
class C{  @Override public synchronized void write(int b){  int inBufferPos=count - filledBufferSum;  if (inBufferPos == currentBuffer.length) {    needNewBuffer(count + 1);    inBufferPos=0;  }  currentBuffer[inBufferPos]=(byte)b;  count++;}  }
class C{  String removeProperty(String key,String defaultValue){  Object x=prop.remove(key);  return x == null ? defaultValue : x.toString();}  }
class C{  @Override protected void progress(double pct,int blocksSoFar,Date date){  if (pct > DONE_FOR_DOUBLES) {    doneDownload();  } else {synchronized (lockObject) {      String downloadStatusText=controller.getLocaliser().getString("multiBitDownloadListener.startDownloadTextShort",new Object[]{blocksSoFar}) + " " + controller.getLocaliser().getString("multiBitDownloadListener.blockDateText",new Object[]{DateFormat.getDateInstance(DateFormat.MEDIUM,controller.getLocaliser().getLocale()).format(date)});      ReplayTask currentReplayTask=ReplayManager.INSTANCE.getCurrentReplayTask();      if (currentReplayTask != null) {        if (currentReplayTask.getStartHeight() != ReplayTask.UNKNOWN_START_HEIGHT) {          double denominator=Math.max(blocksToDownloadAtStart,ReplayManager.INSTANCE.getActualLastChainHeight() - currentReplayTask.getStartHeight());          pct=(int)(100 * (1.0 - (double)blocksSoFar / denominator));        }      }      if (!(downloadStatusText.indexOf("multiBitDownloadListener") > -1)) {        Message message=new Message(downloadStatusText,pct);        MessageManager.INSTANCE.addMessage(message);      }      for (      SingleWalletPanelDownloadListener singleWalletPanelDownloadListener : singleWalletPanelDownloadListeners) {        singleWalletPanelDownloadListener.progress(pct,blocksSoFar,date);      }    }    this.bitcoinController.fireBlockDownloaded();  }}  }
class C{  public Where<T,ID> in(String columnName,Object... objects) throws SQLException {  return in(true,columnName,objects);}  }
class C{  public boolean notifiedTaskChecked(){  return tasksDataSource.checkUnNotifiedTasks();}  }
class C{  private UserNamespaceAuthorization createUserNamespaceAuthorizationFromEntity(UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity){  UserNamespaceAuthorization userNamespaceAuthorization=new UserNamespaceAuthorization();  userNamespaceAuthorization.setId(userNamespaceAuthorizationEntity.getId());  UserNamespaceAuthorizationKey userNamespaceAuthorizationKey=new UserNamespaceAuthorizationKey();  userNamespaceAuthorization.setUserNamespaceAuthorizationKey(userNamespaceAuthorizationKey);  userNamespaceAuthorizationKey.setUserId(userNamespaceAuthorizationEntity.getUserId());  userNamespaceAuthorizationKey.setNamespace(userNamespaceAuthorizationEntity.getNamespace().getCode());  userNamespaceAuthorization.setNamespacePermissions(userNamespaceAuthorizationHelper.getNamespacePermissions(userNamespaceAuthorizationEntity));  return userNamespaceAuthorization;}  }
class C{  private Type condType(DiagnosticPosition pos,Type thentype,Type elsetype){  if (types.isSameType(thentype,elsetype))   return thentype.baseType();  Type thenUnboxed=(!allowBoxing || thentype.isPrimitive()) ? thentype : types.unboxedType(thentype);  Type elseUnboxed=(!allowBoxing || elsetype.isPrimitive()) ? elsetype : types.unboxedType(elsetype);  if (thenUnboxed.isPrimitive() && elseUnboxed.isPrimitive()) {    if (thenUnboxed.getTag().isStrictSubRangeOf(INT) && elseUnboxed.hasTag(INT) && types.isAssignable(elseUnboxed,thenUnboxed)) {      return thenUnboxed.baseType();    }    if (elseUnboxed.getTag().isStrictSubRangeOf(INT) && thenUnboxed.hasTag(INT) && types.isAssignable(thenUnboxed,elseUnboxed)) {      return elseUnboxed.baseType();    }    for (    TypeTag tag : primitiveTags) {      Type candidate=syms.typeOfTag[tag.ordinal()];      if (types.isSubtype(thenUnboxed,candidate) && types.isSubtype(elseUnboxed,candidate)) {        return candidate;      }    }  }  if (allowBoxing) {    if (thentype.isPrimitive())     thentype=types.boxedClass(thentype).type;    if (elsetype.isPrimitive())     elsetype=types.boxedClass(elsetype).type;  }  if (types.isSubtype(thentype,elsetype))   return elsetype.baseType();  if (types.isSubtype(elsetype,thentype))   return thentype.baseType();  if (!allowBoxing || thentype.hasTag(VOID) || elsetype.hasTag(VOID)) {    log.error(pos,"neither.conditional.subtype",thentype,elsetype);    return thentype.baseType();  }  return types.lub(thentype.baseType(),elsetype.baseType());}  }
class C{  private Shared(){}  }
class C{  protected AbstractButton createPaletteButton(){  return new JCheckBox(paletteIcon);}  }
class C{  public void fsync(long sequence,K key,Result<Boolean> result){  scheduleFsync(sequence,key,result);  flush();}  }
class C{  public ByteQueue(){}  }
class C{  public DPViewHolder(RecyclerView recyclerView,View itemView,DPRecyclerViewHolder viewHolder){  this.mViews=new SparseArray<View>();  this.mRecyclerView=recyclerView;  this.mConvertView=itemView;  this.mContext=mRecyclerView.getContext();  this.mDPRecyclerViewHolder=viewHolder;}  }
class C{  public boolean implies(Permission p){  if (!(p instanceof PropertyPermission))   return false;  PropertyPermission that=(PropertyPermission)p;  return ((this.mask & that.mask) == that.mask) && super.implies(that);}  }
class C{  public void includeExitMenuItem(){  addProperty("quitMenu.class","com.bbn.openmap.gui.map.QuitMenuItem");  appendProperty("fileMenu.items","quitMenu");}  }
class C{  public SoundEvent(final String sound,int volume,SoundLayer layer){  this(sound,layer);  put("volume",volume);}  }
class C{  @Override public void draw(Canvas canvas){  Barcode barcode=mBarcode;  if (barcode == null) {    return;  }  RectF rect=new RectF(barcode.getBoundingBox());  rect.left=translateX(rect.left);  rect.top=translateY(rect.top);  rect.right=translateX(rect.right);  rect.bottom=translateY(rect.bottom);  canvas.drawRect(rect,mRectPaint);  canvas.drawText(barcode.rawValue,rect.left,rect.bottom,mTextPaint);}  }
class C{  @Override public EObject create(EClass eClass){switch (eClass.getClassifierID()) {case N4JSPackage.SCRIPT:    return createScript();case N4JSPackage.EXPORT_DECLARATION:  return createExportDeclaration();case N4JSPackage.EXPORT_SPECIFIER:return createExportSpecifier();case N4JSPackage.IMPORT_DECLARATION:return createImportDeclaration();case N4JSPackage.NAMED_IMPORT_SPECIFIER:return createNamedImportSpecifier();case N4JSPackage.DEFAULT_IMPORT_SPECIFIER:return createDefaultImportSpecifier();case N4JSPackage.NAMESPACE_IMPORT_SPECIFIER:return createNamespaceImportSpecifier();case N4JSPackage.ANNOTATION_LIST:return createAnnotationList();case N4JSPackage.EXPRESSION_ANNOTATION_LIST:return createExpressionAnnotationList();case N4JSPackage.ANNOTATION:return createAnnotation();case N4JSPackage.LITERAL_ANNOTATION_ARGUMENT:return createLiteralAnnotationArgument();case N4JSPackage.TYPE_REF_ANNOTATION_ARGUMENT:return createTypeRefAnnotationArgument();case N4JSPackage.FUNCTION_DECLARATION:return createFunctionDeclaration();case N4JSPackage.FUNCTION_EXPRESSION:return createFunctionExpression();case N4JSPackage.ARROW_FUNCTION:return createArrowFunction();case N4JSPackage.LOCAL_ARGUMENTS_VARIABLE:return createLocalArgumentsVariable();case N4JSPackage.FORMAL_PARAMETER:return createFormalParameter();case N4JSPackage.BLOCK:return createBlock();case N4JSPackage.STATEMENT:return createStatement();case N4JSPackage.VARIABLE_STATEMENT:return createVariableStatement();case N4JSPackage.EXPORTED_VARIABLE_STATEMENT:return createExportedVariableStatement();case N4JSPackage.VARIABLE_BINDING:return createVariableBinding();case N4JSPackage.EXPORTED_VARIABLE_BINDING:return createExportedVariableBinding();case N4JSPackage.VARIABLE_DECLARATION:return createVariableDeclaration();case N4JSPackage.EXPORTED_VARIABLE_DECLARATION:return createExportedVariableDeclaration();case N4JSPackage.EMPTY_STATEMENT:return createEmptyStatement();case N4JSPackage.EXPRESSION_STATEMENT:return createExpressionStatement();case N4JSPackage.IF_STATEMENT:return createIfStatement();case N4JSPackage.ITERATION_STATEMENT:return createIterationStatement();case N4JSPackage.DO_STATEMENT:return createDoStatement();case N4JSPackage.WHILE_STATEMENT:return createWhileStatement();case N4JSPackage.FOR_STATEMENT:return createForStatement();case N4JSPackage.CONTINUE_STATEMENT:return createContinueStatement();case N4JSPackage.BREAK_STATEMENT:return createBreakStatement();case N4JSPackage.RETURN_STATEMENT:return createReturnStatement();case N4JSPackage.WITH_STATEMENT:return createWithStatement();case N4JSPackage.SWITCH_STATEMENT:return createSwitchStatement();case N4JSPackage.CASE_CLAUSE:return createCaseClause();case N4JSPackage.DEFAULT_CLAUSE:return createDefaultClause();case N4JSPackage.LABELLED_STATEMENT:return createLabelledStatement();case N4JSPackage.THROW_STATEMENT:return createThrowStatement();case N4JSPackage.TRY_STATEMENT:return createTryStatement();case N4JSPackage.CATCH_BLOCK:return createCatchBlock();case N4JSPackage.CATCH_VARIABLE:return createCatchVariable();case N4JSPackage.FINALLY_BLOCK:return createFinallyBlock();case N4JSPackage.DEBUGGER_STATEMENT:return createDebuggerStatement();case N4JSPackage.PRIMARY_EXPRESSION:return createPrimaryExpression();case N4JSPackage.PAREN_EXPRESSION:return createParenExpression();case N4JSPackage.IDENTIFIER_REF:return createIdentifierRef();case N4JSPackage.SUPER_LITERAL:return createSuperLiteral();case N4JSPackage.THIS_LITERAL:return createThisLiteral();case N4JSPackage.ARRAY_LITERAL:return createArrayLiteral();case N4JSPackage.ARRAY_ELEMENT:return createArrayElement();case N4JSPackage.ARRAY_PADDING:return createArrayPadding();case N4JSPackage.OBJECT_LITERAL:return createObjectLiteral();case N4JSPackage.LITERAL_OR_COMPUTED_PROPERTY_NAME:return createLiteralOrComputedPropertyName();case N4JSPackage.PROPERTY_ASSIGNMENT_ANNOTATION_LIST:return createPropertyAssignmentAnnotationList();case N4JSPackage.PROPERTY_NAME_VALUE_PAIR:return createPropertyNameValuePair();case N4JSPackage.PROPERTY_NAME_VALUE_PAIR_SINGLE_NAME:return createPropertyNameValuePairSingleName();case N4JSPackage.PROPERTY_METHOD_DECLARATION:return createPropertyMethodDeclaration();case N4JSPackage.PROPERTY_GETTER_DECLARATION:return createPropertyGetterDeclaration();case N4JSPackage.PROPERTY_SETTER_DECLARATION:return createPropertySetterDeclaration();case N4JSPackage.NEW_TARGET:return createNewTarget();case N4JSPackage.NEW_EXPRESSION:return createNewExpression();case N4JSPackage.PARAMETERIZED_CALL_EXPRESSION:return createParameterizedCallExpression();case N4JSPackage.ARGUMENT:return createArgument();case N4JSPackage.INDEXED_ACCESS_EXPRESSION:return createIndexedAccessExpression();case N4JSPackage.TAGGED_TEMPLATE_STRING:return createTaggedTemplateString();case N4JSPackage.PARAMETERIZED_PROPERTY_ACCESS_EXPRESSION:return createParameterizedPropertyAccessExpression();case N4JSPackage.AWAIT_EXPRESSION:return createAwaitExpression();case N4JSPackage.PROMISIFY_EXPRESSION:return createPromisifyExpression();case N4JSPackage.YIELD_EXPRESSION:return createYieldExpression();case N4JSPackage.LITERAL:return createLiteral();case N4JSPackage.NULL_LITERAL:return createNullLiteral();case N4JSPackage.BOOLEAN_LITERAL:return createBooleanLiteral();case N4JSPackage.STRING_LITERAL:return createStringLiteral();case N4JSPackage.TEMPLATE_LITERAL:return createTemplateLiteral();case N4JSPackage.TEMPLATE_SEGMENT:return createTemplateSegment();case N4JSPackage.NUMERIC_LITERAL:return createNumericLiteral();case N4JSPackage.DOUBLE_LITERAL:return createDoubleLiteral();case N4JSPackage.ABSTRACT_INT_LITERAL:return createAbstractIntLiteral();case N4JSPackage.INT_LITERAL:return createIntLiteral();case N4JSPackage.BINARY_INT_LITERAL:return createBinaryIntLiteral();case N4JSPackage.OCTAL_INT_LITERAL:return createOctalIntLiteral();case N4JSPackage.LEGACY_OCTAL_INT_LITERAL:return createLegacyOctalIntLiteral();case N4JSPackage.HEX_INT_LITERAL:return createHexIntLiteral();case N4JSPackage.SCIENTIFIC_INT_LITERAL:return createScientificIntLiteral();case N4JSPackage.REGULAR_EXPRESSION_LITERAL:return createRegularExpressionLiteral();case N4JSPackage.POSTFIX_EXPRESSION:return createPostfixExpression();case N4JSPackage.UNARY_EXPRESSION:return createUnaryExpression();case N4JSPackage.CAST_EXPRESSION:return createCastExpression();case N4JSPackage.MULTIPLICATIVE_EXPRESSION:return createMultiplicativeExpression();case N4JSPackage.ADDITIVE_EXPRESSION:return createAdditiveExpression();case N4JSPackage.SHIFT_EXPRESSION:return createShiftExpression();case N4JSPackage.RELATIONAL_EXPRESSION:return createRelationalExpression();case N4JSPackage.EQUALITY_EXPRESSION:return createEqualityExpression();case N4JSPackage.BINARY_BITWISE_EXPRESSION:return createBinaryBitwiseExpression();case N4JSPackage.BINARY_LOGICAL_EXPRESSION:return createBinaryLogicalExpression();case N4JSPackage.CONDITIONAL_EXPRESSION:return createConditionalExpression();case N4JSPackage.ASSIGNMENT_EXPRESSION:return createAssignmentExpression();case N4JSPackage.COMMA_EXPRESSION:return createCommaExpression();case N4JSPackage.N4_CLASS_DECLARATION:return createN4ClassDeclaration();case N4JSPackage.N4_CLASS_EXPRESSION:return createN4ClassExpression();case N4JSPackage.N4_INTERFACE_DECLARATION:return createN4InterfaceDeclaration();case N4JSPackage.N4_ENUM_DECLARATION:return createN4EnumDeclaration();case N4JSPackage.N4_ENUM_LITERAL:return createN4EnumLiteral();case N4JSPackage.N4_MEMBER_ANNOTATION_LIST:return createN4MemberAnnotationList();case N4JSPackage.N4_FIELD_DECLARATION:return createN4FieldDeclaration();case N4JSPackage.N4_METHOD_DECLARATION:return createN4MethodDeclaration();case N4JSPackage.N4_GETTER_DECLARATION:return createN4GetterDeclaration();case N4JSPackage.N4_SETTER_DECLARATION:return createN4SetterDeclaration();case N4JSPackage.BINDING_PATTERN:return createBindingPattern();case N4JSPackage.OBJECT_BINDING_PATTERN:return createObjectBindingPattern();case N4JSPackage.ARRAY_BINDING_PATTERN:return createArrayBindingPattern();case N4JSPackage.BINDING_PROPERTY:return createBindingProperty();case N4JSPackage.BINDING_ELEMENT:return createBindingElement();default :throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");}}  }
class C{  public String func(Byte arg){  called=true;  actualValue=arg;  return "called";}  }
class C{  private void applyPartnerDeviceProfileOverrides(Context context,DisplayMetrics dm){  Partner p=Partner.get(context.getPackageManager());  if (p != null) {    p.applyInvariantDeviceProfileOverrides(this,dm);  }}  }
class C{  @PostConstruct public void postConstruct() throws Exception {  this.maxSize=new AtomicLong(bufferProperties.getInitialBufferSize());  this.evictionOccupancyPercentage=new AtomicInteger(Float.floatToIntBits(bufferProperties.getEvictionOccupancyPercentage()));  this.objectSizes.setObjectSecurityExpansionRate(bufferProperties.getObjectSecurityExpansionRate(maxSize.get()));  this.first=new AtomicReference<IBufferElement<E>>(emptyBufferElement);  this.last=new AtomicReference<IBufferElement<E>>(emptyBufferElement);  this.lastAnalyzed=new AtomicReference<IBufferElement<E>>(emptyBufferElement);  this.lastIndexed=new AtomicReference<IBufferElement<E>>(emptyBufferElement);  this.indexingTreeCleaningExecutorService=Executors.newFixedThreadPool(bufferProperties.getIndexingTreeCleaningThreads());  this.flagsSetOnBytes=bufferProperties.getFlagsSetOnBytes(this.maxSize.get());  this.analyzeProcessor=new AnalyzeBufferElementProcessor<>(this,lastAnalyzed,analyzeLock,nothingToAnalyze);  this.indexProcessor=new IndexBufferElementProcessor<>(this,lastIndexed,indexingLock,nothingToIndex);  if (log.isInfoEnabled()) {    log.info("|-Using buffer with maximum size " + NumberFormat.getInstance().format(maxSize) + " bytes...");    log.info("|-Indexing tree maintenance on " + NumberFormat.getInstance().format(flagsSetOnBytes) + " bytes added/removed...");    log.info("|-Using object expansion rate of " + NumberFormat.getInstance().format(objectSizes.getObjectSecurityExpansionRate() * 100) + "%");  }}  }
class C{  public static int countNonEmptyValue(Properties properties){  int numOfNotEmptyValue=0;  if (properties == null) {    return numOfNotEmptyValue;  }  Enumeration<Object> keys=properties.keys();  while (keys.hasMoreElements()) {    String key=keys.nextElement().toString();    if (properties.getProperty(key) != null && properties.getProperty(key).trim().length() > 0) {      numOfNotEmptyValue++;    }  }  return numOfNotEmptyValue;}  }
class C{  public static MutableComboBoxModel leftShift(MutableComboBoxModel self,Object i){  self.addElement(i);  return self;}  }
class C{  protected void replaceRouteManager(){  RouteManager current=InstanceManager.getNullableDefault(jmri.RouteManager.class);  if (current != null && current.getClass().getName().equals(DefaultRouteManager.class.getName())) {    return;  }  if (current != null) {    InstanceManager.getDefault(jmri.ConfigureManager.class).deregister(current);    InstanceManager.deregister(current,RouteManager.class);  }  DefaultRouteManager pManager=DefaultRouteManager.instance();  InstanceManager.store(pManager,RouteManager.class);  InstanceManager.getDefault(jmri.ConfigureManager.class).registerConfig(pManager,jmri.Manager.ROUTES);}  }
class C{  @Deprecated public static Number parseInteger(String text){  return parseInteger(null,text);}  }
class C{  long nextRequestSequence(){  return requestSequence + 1;}  }
class C{  public void runStrategy(CandleSeries candleSeries,boolean newBar){  try {    CandleItem currentCandleItem=this.getCurrentCandle();    ZonedDateTime startPeriod=currentCandleItem.getPeriod().getStart();    if (!this.isThereOpenPosition()) {      _log.info("No open position so Cancel Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod);      this.cancel();      return;    }    if (this.isThereOpenPosition() && !this.isPositionCovered()) {      Integer quantity=this.getOpenPositionOrder().getFilledQuantity();      Integer tgt1Qty=quantity / 2;      Integer tgt2Qty=quantity - tgt1Qty;      createStopAndTargetOrder(getOpenPositionOrder(),2,new Money(0.01),2,new Money(0.01),tgt1Qty,true);      createStopAndTargetOrder(getOpenPositionOrder(),2,new Money(0.01),2,new Money(0.01),tgt2Qty,true);      _log.info("Open position submit Stop/Target orders created Symbol: " + getSymbol() + " Time:"+ startPeriod);    }    if (startPeriod.isBefore(this.getTradestrategy().getTradingday().getClose().minusHours(30)) && startPeriod.isAfter(this.getTradestrategy().getTradingday().getOpen().plusMinutes(5))) {      CandleItem firstCandle=this.getCandle(TradingCalendar.getDateAtTime(startPeriod,this.getTradestrategy().getTradingday().getOpen()));      if (Side.BOT.equals(getOpenTradePosition().getSide())) {        if (currentCandleItem.getVwap() < firstCandle.getVwap()) {          Money stopPrice=addPennyAndRoundStop(this.getOpenPositionOrder().getAverageFilledPrice().doubleValue(),getOpenTradePosition().getSide(),Action.SELL,0.01);          moveStopOCAPrice(stopPrice,true);          _log.info("Move Stop to b.e. Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod+ " Price: "+ stopPrice+ " first bar Vwap: "+ firstCandle.getVwap()+ " Curr Vwap: "+ currentCandleItem.getVwap());        }      } else {        if (currentCandleItem.getVwap() > firstCandle.getVwap()) {          Money stopPrice=addPennyAndRoundStop(this.getOpenPositionOrder().getAverageFilledPrice().doubleValue(),getOpenTradePosition().getSide(),Action.BUY,0.01);          moveStopOCAPrice(stopPrice,true);          _log.info("Move Stop to b.e. Strategy Mgr Symbol: " + getSymbol() + " Time:"+ startPeriod+ " Price: "+ stopPrice+ " first bar Vwap: "+ firstCandle.getVwap()+ " Curr Vwap: "+ currentCandleItem.getVwap());        }      }    }    if (startPeriod.equals(this.getTradestrategy().getTradingday().getClose().minusMinutes(30)) && newBar) {      _log.info("Rule move stop to b.e.. Symbol: " + getSymbol() + " Time: "+ startPeriod);      if (getCurrentCandleCount() > 0) {        CandleItem prevCandleItem=(CandleItem)candleSeries.getDataItem(getCurrentCandleCount() - 1);        double avgPrice=this.getOpenPositionOrder().getAverageFilledPrice().doubleValue();        if (Side.BOT.equals(getOpenTradePosition().getSide())) {          if (avgPrice < prevCandleItem.getLow()) {            avgPrice=prevCandleItem.getLow();          }          Money stopPrice=addPennyAndRoundStop(avgPrice,getOpenTradePosition().getSide(),Action.SELL,0.01);          moveStopOCAPrice(stopPrice,true);        } else {          if (avgPrice > prevCandleItem.getHigh()) {            avgPrice=prevCandleItem.getHigh();          }          Money stopPrice=addPennyAndRoundStop(avgPrice,getOpenTradePosition().getSide(),Action.BUY,0.01);          moveStopOCAPrice(stopPrice,true);        }      }    }    if (null != getTargetOneOrder()) {      if (this.getTargetOneOrder().getIsFilled() && newBar) {        _log.info("Rule move stop to b.e. after target one hit Symbol: " + getSymbol() + " Time: "+ startPeriod);        String action=Action.SELL;        if (Side.SLD.equals(getOpenTradePosition().getSide()))         action=Action.BUY;        Money newStop=addPennyAndRoundStop(this.getTargetOneOrder().getAverageFilledPrice().doubleValue(),getOpenTradePosition().getSide(),action,0.01);        moveStopOCAPrice(newStop,true);      }    }    if (null != getTargetOneOrder()) {      if (this.getTargetOneOrder().getIsFilled() && newBar) {        Money newStop=getHiekinAshiTrailStop(this.getStopPriceMinUnfilled(),2);        _log.info("PositionManagerStrategy HiekinAshiTrail: " + getSymbol() + " Trail Price: "+ newStop+ " Time: "+ startPeriod+ " Side: "+ this.getOpenTradePosition().getSide());      }    }    if (null != getTargetOneOrder()) {      if (this.getTargetOneOrder().getIsFilled()) {        Money newStop=getOneMinuteTrailStop(candleSeries,this.getStopPriceMinUnfilled(),currentCandleItem);        _log.info("PositionManagerStrategy OneMinuteTrail: " + getSymbol() + " Trail Price: "+ newStop+ " Time: "+ startPeriod+ " Side: "+ this.getOpenTradePosition().getSide());        moveStopOCAPrice(newStop,true);      }    }    if (!currentCandleItem.getLastUpdateDate().isBefore(this.getTradestrategy().getTradingday().getClose().minusMinutes(2))) {      cancelOrdersClosePosition(true);      _log.info("PositionManagerStrategy 15:58:00 done: " + getSymbol() + " Time: "+ startPeriod);      this.cancel();    }  } catch (  StrategyRuleException ex) {    _log.error("Error Position Manager exception: " + ex.getMessage(),ex);    error(1,40,"Error Position Manager exception: " + ex.getLocalizedMessage());  }}  }
class C{  public RequestHandle head(Context context,String url,ResponseHandlerInterface responseHandler){  return head(context,url,null,responseHandler);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected void tag(String tag,String[] names,String[] values,int nattr,boolean close){  spacing();  m_out.print('<');  m_out.print(tag);  for (int i=0; i < nattr; ++i) {    m_out.print(' ');    m_out.print(names[i]);    m_out.print('=');    m_out.print('\"');    escapeString(values[i]);    m_out.print('\"');  }  if (close)   m_out.print('/');  m_out.print('>');  println();  if (!close) {    m_tagStack.add(tag);  }}  }
class C{  public OneToOneChatSession createOneToOneChatSession(ContactId contact,ChatMessage firstMsg){  if (sLogger.isActivated()) {    sLogger.info("Initiate 1-1 chat session with " + contact + ".");  }  long timestamp=firstMsg.getTimestamp();  return new OriginatingOneToOneChatSession(this,contact,firstMsg,mRcsSettings,mMessagingLog,timestamp,mContactManager);}  }
class C{  private List optimizeBulkGet(ExecutionContext context) throws TypeMismatchException, FunctionDomainException, NameResolutionException, QueryInvocationTargetException {  List iterList=context.getCurrentIterators();  if (iterList.size() != 1) {    return null;  }  if (!(this.whereClause instanceof CompiledIn)) {    return null;  }  RuntimeIterator rIter=(RuntimeIterator)iterList.get(0);  CompiledIteratorDef cIterDef=rIter.getCmpIteratorDefn();  CompiledValue colnExpr=cIterDef.getCollectionExpr();  boolean match=false;  CompiledRegion rgn=null;  if (colnExpr instanceof CompiledPath) {    CompiledPath cPath=(CompiledPath)colnExpr;    CompiledValue rcvr=cPath.getReceiver();    if (rcvr instanceof CompiledRegion) {      rgn=(CompiledRegion)rcvr;      String attr=cPath.getTailID();      match=attr.equals("entrySet");    }  }  if (!match && (colnExpr instanceof CompiledOperation)) {    CompiledOperation cOp=(CompiledOperation)colnExpr;    CompiledValue rcvr=cOp.getReceiver(context);    if (rcvr instanceof CompiledRegion) {      rgn=(CompiledRegion)rcvr;      match=cOp.getMethodName().equals("entrySet");    }  }  if (!match) {    return null;  }  CompiledIn cIn=(CompiledIn)this.whereClause;  return cIn.optimizeBulkGet(rgn,context);}  }
class C{  public void runTest(){  try {    assureResultsDirectoryExists(RESULT_DIR);    Template template2=RuntimeSingleton.getTemplate(getFileName(null,"vm_test2",TMPL_FILE_EXT));    Template template1=RuntimeSingleton.getTemplate(getFileName(null,"vm_test1",TMPL_FILE_EXT));    FileOutputStream fos1=new FileOutputStream(getFileName(RESULT_DIR,"vm_test1",RESULT_FILE_EXT));    FileOutputStream fos2=new FileOutputStream(getFileName(RESULT_DIR,"vm_test2",RESULT_FILE_EXT));    Writer writer1=new BufferedWriter(new OutputStreamWriter(fos1));    Writer writer2=new BufferedWriter(new OutputStreamWriter(fos2));    VelocityContext context=new VelocityContext();    template1.merge(context,writer1);    writer1.flush();    writer1.close();    template2.merge(context,writer2);    writer2.flush();    writer2.close();    if (!isMatch(RESULT_DIR,COMPARE_DIR,"vm_test1",RESULT_FILE_EXT,CMP_FILE_EXT) || !isMatch(RESULT_DIR,COMPARE_DIR,"vm_test2",RESULT_FILE_EXT,CMP_FILE_EXT)) {      fail("Output incorrect.");    }  } catch (  Exception e) {    fail(e.getMessage());  }}  }
class C{  public void createEmptySession(){  createEmptySessionAndSetAsActive(generateUniqueSessionName());}  }
class C{  private void importNamed(DiagnosticPosition pos,Symbol tsym,Env<AttrContext> env){  if (tsym.kind == TYP && chk.checkUniqueImport(pos,tsym,env.toplevel.namedImportScope))   env.toplevel.namedImportScope.enter(tsym,tsym.owner.members());}  }
class C{  @Override public void stateChanged(CuratorFramework client,ConnectionState newState){switch (newState) {case LOST:    locks.values().forEach(null);  locks.clear();break;case SUSPENDED:locks.values().forEach(null);break;case RECONNECTED:break;}}  }
class C{  protected ParsedURLData constructParsedURLData(URL url){  return new ParsedURLData(url);}  }
class C{  @Deprecated public void spinnerStop(){  doSplashScreenAction("spinnerStop",null);}  }
class C{  public boolean isError(){  return CODE_NEUTRAL != this.code && CODE_SUCCESS != this.code;}  }
class C{  public static Charset toCharset(String charset){  return charset == null ? Charset.defaultCharset() : Charset.forName(charset);}  }
class C{  private static CharBuffer grow(CharBuffer buf){  char[] copy=Arrays.copyOf(buf.array(),buf.capacity() * 2);  CharBuffer bigger=CharBuffer.wrap(copy);  bigger.position(buf.position());  bigger.limit(buf.limit());  return bigger;}  }
class C{  public boolean isProcessed(){  Object oo=get_Value(COLUMNNAME_Processed);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public Node replaceChild(Node newChild,Node oldChild) throws DOMException {  if (oldChild == null || oldChild.getParentNode() != this)   return null;  ElemTemplateElement newChildElem=((ElemTemplateElement)newChild);  ElemTemplateElement oldChildElem=((ElemTemplateElement)oldChild);  ElemTemplateElement prev=(ElemTemplateElement)oldChildElem.getPreviousSibling();  if (null != prev)   prev.m_nextSibling=newChildElem;  if (m_firstChild == oldChildElem)   m_firstChild=newChildElem;  newChildElem.m_parentNode=this;  oldChildElem.m_parentNode=null;  newChildElem.m_nextSibling=oldChildElem.m_nextSibling;  oldChildElem.m_nextSibling=null;  return newChildElem;}  }
class C{  public static TypeMirror upperBound(TypeMirror type){  do {    if (type instanceof TypeVariable) {      TypeVariable tvar=(TypeVariable)type;      if (tvar.getUpperBound() != null) {        type=tvar.getUpperBound();      } else {        break;      }    } else     if (type instanceof WildcardType) {      WildcardType wc=(WildcardType)type;      if (wc.getExtendsBound() != null) {        type=wc.getExtendsBound();      } else {        break;      }    } else {      break;    }  } while (true);  return type;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.SASSIGNMENT__VALUE:    return getValue();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isOverwriteDateOnComplete(){  Object oo=get_Value(COLUMNNAME_IsOverwriteDateOnComplete);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  private StatusUpdates(){}  }
class C{  public XmlDumpReader(InputStream inputStream,DumpWriter writer){  input=inputStream;  this.writer=writer;  buffer=new char[4096];  len=0;  hasContent=false;}  }
class C{  public void clearLocals(){  for (int i=0; i < locals.length; i++) {    locals[i]=null;  }}  }
class C{  private void onCodeContainerAnimationEnd(boolean isCodeVisible){  if (isCodeVisible) {    mCodeContainer.setVisibility(View.GONE);    mFab.setImageResource(R.drawable.ic_code_black_24dp);    mCodeContainer.scrollTo(0,0);  } else {    mFab.setImageResource(R.drawable.ic_close_black_24dp);  }  mIsAnimating=false;}  }
class C{  void appendStartElement(int namespaceIndex,int localNameIndex,int prefixIndex){  int w0=(namespaceIndex << 16) | ELEMENT_NODE;  int w1=currentParent;  int w2=0;  int w3=localNameIndex | prefixIndex << 16;  System.out.println("set w3=" + w3 + " "+ (w3 >> 16)+ "/"+ (w3 & 0xffff));  int ourslot=appendNode(w0,w1,w2,w3);  currentParent=ourslot;  previousSibling=0;  if (m_docElement == NULL)   m_docElement=ourslot;}  }
class C{  protected void firePropertyChange(String propertyName,Object oldValue,Object newValue){  if (propertyName == "text" || propertyName == "labelFor" || propertyName == "displayedMnemonic" || ((propertyName == "font" || propertyName == "foreground") && oldValue != newValue && getClientProperty(javax.swing.plaf.basic.BasicHTML.propertyKey) != null)) {    super.firePropertyChange(propertyName,oldValue,newValue);  }}  }
class C{  public Wildcards matchOn(Wildcards.Flag flag){  int flags=flag.matchOn(this.flags);  if (flags == this.flags)   return this; else   return new Wildcards(flags);}  }
class C{  protected int findTokenStart(int from){  if (from < 0) {    throw new IllegalArgumentException("Search position must not be negative: " + from);  }  boolean found=false;  while (!found && (this.currentHeader != null)) {    final int to=this.currentHeader.length();    while (!found && (from < to)) {      final char ch=this.currentHeader.charAt(from);      if (isTokenSeparator(ch) || isWhitespace(ch)) {        from++;      } else       if (isTokenChar(this.currentHeader.charAt(from))) {        found=true;      } else {        throw new ParseException("Invalid character before token (pos " + from + "): "+ this.currentHeader);      }    }    if (!found) {      if (this.headerIt.hasNext()) {        this.currentHeader=this.headerIt.nextHeader().getValue();        from=0;      } else {        this.currentHeader=null;      }    }  }  return found ? from : -1;}  }
class C{  public EnricherTest(String name){  super(name);}  }
class C{  public double evaluate(final double x,final double y,final double z){  return dotProduct(x,y,z) + D;}  }
class C{  protected final void emitFrontEnd(){  GraalCompiler.emitFrontEnd(request.providers,request.backend,request.graph,request.graphBuilderSuite,request.optimisticOpts,request.profilingInfo,request.suites);  request.graph.freeze();}  }
class C{  public void dispose(){}  }
class C{  public QuotaNotFoundException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  private void initDB(){  final UserQueryService userQueryService=beanManager.getReference(UserQueryService.class);  try {    final List<JSONObject> admins=userQueryService.getAdmins();    JdbcRepository.dispose();    if (null != admins && !admins.isEmpty()) {      return;    }  } catch (  final ServiceException e) {    LOGGER.log(Level.ERROR,"Check init error",e);    System.exit(0);  }  LOGGER.info("Initializing Sym....");  final OptionRepository optionRepository=beanManager.getReference(OptionRepository.class);  final ArticleMgmtService articleMgmtService=beanManager.getReference(ArticleMgmtService.class);  final UserMgmtService userMgmtService=beanManager.getReference(UserMgmtService.class);  try {    LOGGER.log(Level.INFO,"Database [{0}], creates all tables",Latkes.getRuntimeDatabase());    final List<JdbcRepositories.CreateTableResult> createTableResults=JdbcRepositories.initAllTables();    for (    final JdbcRepositories.CreateTableResult createTableResult : createTableResults) {      LOGGER.log(Level.INFO,"Creates table result[tableName={0}, isSuccess={1}]",new Object[]{createTableResult.getName(),createTableResult.isSuccess()});    }    final Transaction transaction=optionRepository.beginTransaction();    JSONObject option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_STATISTIC_MEMBER_COUNT);    option.put(Option.OPTION_VALUE,"0");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_STATISTIC);    optionRepository.add(option);    option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_STATISTIC_CMT_COUNT);    option.put(Option.OPTION_VALUE,"0");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_STATISTIC);    optionRepository.add(option);    option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_STATISTIC_ARTICLE_COUNT);    option.put(Option.OPTION_VALUE,"0");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_STATISTIC);    optionRepository.add(option);    option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_STATISTIC_TAG_COUNT);    option.put(Option.OPTION_VALUE,"0");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_STATISTIC);    optionRepository.add(option);    option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_STATISTIC_MAX_ONLINE_VISITOR_COUNT);    option.put(Option.OPTION_VALUE,"0");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_STATISTIC);    optionRepository.add(option);    option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_MISC_ALLOW_REGISTER);    option.put(Option.OPTION_VALUE,"0");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_MISC);    optionRepository.add(option);    option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_MISC_ALLOW_ANONYMOUS_VIEW);    option.put(Option.OPTION_VALUE,"1");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_MISC);    optionRepository.add(option);    option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_MISC_ALLOW_ADD_ARTICLE);    option.put(Option.OPTION_VALUE,"0");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_MISC);    optionRepository.add(option);    option=new JSONObject();    option.put(Keys.OBJECT_ID,Option.ID_C_MISC_ALLOW_ADD_COMMENT);    option.put(Option.OPTION_VALUE,"0");    option.put(Option.OPTION_CATEGORY,Option.CATEGORY_C_MISC);    optionRepository.add(option);    transaction.commit();    final ResourceBundle init=ResourceBundle.getBundle("init");    final JSONObject admin=new JSONObject();    admin.put(User.USER_EMAIL,init.getString("admin.email"));    admin.put(User.USER_NAME,init.getString("admin.name"));    admin.put(User.USER_PASSWORD,MD5.hash(init.getString("admin.password")));    admin.put(User.USER_ROLE,Role.ADMIN_ROLE);    admin.put(UserExt.USER_STATUS,UserExt.USER_STATUS_C_VALID);    final String[] teams=Symphonys.get("teams").split(",");    admin.put(UserExt.USER_TEAM,teams[teams.length - 1]);    final String adminId=userMgmtService.addUser(admin);    admin.put(Keys.OBJECT_ID,adminId);    final JSONObject article=new JSONObject();    article.put(Article.ARTICLE_TITLE,init.getString("helloWorld.title"));    article.put(Article.ARTICLE_TAGS,init.getString("helloWorld.tags"));    article.put(Article.ARTICLE_CONTENT,init.getString("helloWorld.content"));    article.put(Article.ARTICLE_EDITOR_TYPE,0);    article.put(Article.ARTICLE_AUTHOR_EMAIL,admin.optString(User.USER_EMAIL));    article.put(Article.ARTICLE_AUTHOR_ID,admin.optString(Keys.OBJECT_ID));    articleMgmtService.addArticle(article);    LOGGER.info("Initialized Sym");    JdbcRepository.dispose();  } catch (  final Exception e) {    LOGGER.log(Level.ERROR,"Creates database tables failed",e);    System.exit(0);  }}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) public Object readArray(Deserializer deserializer,Type target){  int count=readAMF3Integer();  log.debug("Count: {} and {} ref {}",new Object[]{count,(count & 1),(count >> 1)});  if ((count & 1) == 0) {    Object ref=getReference(count >> 1);    if (ref != null) {      return ref;    }  }  count=(count >> 1);  String key=readString(String.class);  amf3_mode+=1;  Object result;  if (key.equals("")) {    Class<?> nested=Object.class;    Class<?> collection=Collection.class;    Collection resultCollection;    if (target instanceof ParameterizedType) {      ParameterizedType t=(ParameterizedType)target;      Type[] actualTypeArguments=t.getActualTypeArguments();      if (actualTypeArguments.length == 1) {        nested=(Class<?>)actualTypeArguments[0];      }      target=t.getRawType();    }    if (target instanceof Class) {      collection=(Class)target;    }    if (collection.isArray()) {      nested=ArrayUtils.getGenericType(collection.getComponentType());      result=Array.newInstance(nested,count);      storeReference(result);      for (int i=0; i < count; i++) {        final Object value=deserializer.deserialize(this,nested);        Array.set(result,i,value);      }    } else {      if (SortedSet.class.isAssignableFrom(collection)) {        resultCollection=new TreeSet();      } else       if (Set.class.isAssignableFrom(collection)) {        resultCollection=new HashSet(count);      } else {        resultCollection=new ArrayList(count);      }      result=resultCollection;      storeReference(result);      for (int i=0; i < count; i++) {        final Object value=deserializer.deserialize(this,nested);        resultCollection.add(value);      }    }  } else {    Class<?> k=Object.class;    Class<?> v=Object.class;    Class<?> collection=Collection.class;    if (target instanceof ParameterizedType) {      ParameterizedType t=(ParameterizedType)target;      Type[] actualTypeArguments=t.getActualTypeArguments();      if (actualTypeArguments.length == 2) {        k=(Class<?>)actualTypeArguments[0];        v=(Class<?>)actualTypeArguments[1];      }      target=t.getRawType();    }    if (target instanceof Class) {      collection=(Class)target;    }    if (SortedMap.class.isAssignableFrom(collection)) {      collection=TreeMap.class;    } else {      collection=HashMap.class;    }    Map resultMap;    try {      resultMap=(Map)collection.newInstance();    } catch (    Exception e) {      resultMap=new HashMap(count);    }    storeReference(resultMap);    while (!key.equals("")) {      final Object value=deserializer.deserialize(this,v);      resultMap.put(key,value);      key=readString(k);    }    for (int i=0; i < count; i++) {      final Object value=deserializer.deserialize(this,v);      resultMap.put(i,value);    }    result=resultMap;  }  amf3_mode-=1;  return result;}  }
class C{  public BigdataTurtleWriter(Writer writer){  super(writer);}  }
class C{  private void process(int x,int y){  int B=getSourcePixel(x,y - 1);  int D=getSourcePixel(x - 1,y);  int E=getSourcePixel(x,y);  int F=getSourcePixel(x + 1,y);  int H=getSourcePixel(x,y + 1);  int E0=E;  int E1=E;  int E2=E;  int E3=E;  if (different(B,H) && different(D,F)) {    E0=!different(D,B) ? D : E;    E1=!different(B,F) ? F : E;    E2=!different(D,H) ? D : E;    E3=!different(H,F) ? F : E;  }  setDestPixel(x * 2,y * 2,E0);  setDestPixel((x * 2) + 1,y * 2,E1);  setDestPixel((x * 2),(y * 2) + 1,E2);  setDestPixel((x * 2) + 1,(y * 2) + 1,E3);}  }
class C{  public static Object create(String className,Object[] constructorArgs){  return create(className,constructorArgs,null,null,null);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public void deactivate(URI id){  doDeactivate(id);}  }
class C{  protected static Bitmap createBitmapAndGcIfNecessary(int width,int height){  try {    return Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  } catch (  OutOfMemoryError e) {    System.gc();    return Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);  }}  }
class C{  public double distance(Instance first,Instance second){  return distance(first,second,Double.POSITIVE_INFINITY,null);}  }
class C{  public static CacheHeader readHeader(InputStream is) throws IOException {  CacheHeader entry=new CacheHeader();  int magic=readInt(is);  if (magic != CACHE_MAGIC) {    throw new IOException();  }  entry.key=readString(is);  entry.etag=readString(is);  if (entry.etag.equals("")) {    entry.etag=null;  }  entry.serverDate=readLong(is);  entry.lastModified=readLong(is);  entry.ttl=readLong(is);  entry.softTtl=readLong(is);  entry.responseHeaders=readStringStringMap(is);  return entry;}  }
class C{  @Deprecated public static MapSerializer construct(String[] ignoredList,JavaType mapType,boolean staticValueType,TypeSerializer vts,BeanProperty property){  return construct(ignoredList,mapType,staticValueType,vts,property,null,null);}  }
class C{  public static Function<byte[],JsonObject> fromBytes(){  JsonParser jp=new JsonParser();  return null;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, x, y;  double z;  double total;  float progress=0;  int a;  int filterSizeX=3;  int filterSizeY=3;  int dX[];  int dY[];  int midPointX;  int midPointY;  int numPixelsInFilter;  boolean filterRounded=false;  double[] filterShape;  boolean reflectAtBorders=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (int i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      filterSizeX=Integer.parseInt(args[i]);    } else     if (i == 3) {      filterSizeY=Integer.parseInt(args[i]);    } else     if (i == 4) {      filterRounded=Boolean.parseBoolean(args[i]);    } else     if (i == 5) {      reflectAtBorders=Boolean.parseBoolean(args[i]);    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    inputFile.isReflectedAtEdges=reflectAtBorders;    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    if (Math.floor(filterSizeX / 2d) == (filterSizeX / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSizeX++;    }    if (Math.floor(filterSizeY / 2d) == (filterSizeY / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter y-dimension" + " has been modified.");      filterSizeY++;    }    numPixelsInFilter=filterSizeX * filterSizeY;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPointX=(int)Math.floor(filterSizeX / 2);    midPointY=(int)Math.floor(filterSizeY / 2);    if (!filterRounded) {      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          filterShape[a]=1;          a++;        }      }    } else {      double aSqr=midPointX * midPointX;      double bSqr=midPointY * midPointY;      a=0;      for (row=0; row < filterSizeY; row++) {        for (col=0; col < filterSizeX; col++) {          dX[a]=col - midPointX;          dY[a]=row - midPointY;          z=(dX[a] * dX[a]) / aSqr + (dY[a] * dY[a]) / bSqr;          if (z > 1) {            filterShape[a]=0;          } else {            filterShape[a]=1;          }          a++;        }      }    }    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=inputFile.getValue(row,col);        if (z != noData) {          total=0;          for (a=0; a < numPixelsInFilter; a++) {            x=col + dX[a];            y=row + dY[a];            z=inputFile.getValue(y,x);            if (z != noData && filterShape[a] == 1) {              total+=z;            }          }          outputFile.setValue(row,col,total);        } else {          outputFile.setValue(row,col,noData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public static int createUniqueNumberedSaveDir(World world,String parentSubPath){  findCC();  if (computerCraft_createUniqueNumberedSaveDir != null) {    try {      return (Integer)computerCraft_createUniqueNumberedSaveDir.invoke(null,world,parentSubPath);    } catch (    Exception e) {    }  }  return -1;}  }
class C{  @Override public Long remove(Object key){  return wrapValue(_map.remove(unwrapKey(key)));}  }
class C{  public static Long sizeStrToBytes(String sizeStr){  String[] parts=sizeStr.split(" ");  Long bytes=new BigDecimal(parts[0]).longValue();  if (parts.length > 1) {    if ("GB".equals(parts[1])) {      bytes=bytes * GB;    } else     if ("MB".equals(parts[1])) {      bytes=bytes * MB;    } else     if ("KB".equals(parts[1])) {      bytes=bytes * KB;    }  }  return bytes;}  }
class C{  @Inline public void addEvent(EventType et,int[] idata,long[] ldata,double[] ddata,String[] sdata){  if (!enabled)   return;  addEventInternal(et,idata,ldata,ddata,sdata);}  }
class C{  private static void runConfClient(final ProcessBuilder pb) throws Exception {  int exitCode=-1;  try {    Process process=pb.start();    exitCode=process.waitFor();  } catch (  IOException e) {    log.error("IOException: {}",e);    exitCode=2;    throw e;  }catch (  Exception e) {    log.error("Undetermined ConfigurationClient exitCode: {}",e);    throw e;  }switch (exitCode) {case SUCCESS:    break;case ERROR_CODE_CANNOT_DOWNLOAD_CONF:  throw new Exception("configuration-client error (exit code " + exitCode + "), download failed");case ERROR_CODE_EXPIRED_CONF:throw new Exception("configuration-client error (exit code " + exitCode + "), configuration is outdated");case ERROR_CODE_INVALID_SIGNATURE_VALUE:throw new Exception("configuration-client error (exit code " + exitCode + "), configuration is incorrect");case ERROR_CODE_INTERNAL:throw new Exception("configuration-client error (exit code " + exitCode + ")");default :throw new Exception("Failed to download GlobalConf " + "(configucation-client exit code " + exitCode + "), "+ "make sure configuration-client is"+ "installed correctly");}}  }
class C{  public static void main(String[] args){  List<String> tmpArgs=new ArrayList<String>(Arrays.asList(args));  boolean isLocal=isLocal(tmpArgs);  int numWorker=StormSamoaUtils.numWorkers(tmpArgs);  args=tmpArgs.toArray(new String[0]);  StormTopology stormTopo=StormSamoaUtils.argsToTopology(args);  String topologyName=stormTopo.getTopologyName();  Config conf=new Config();  conf.putAll(Utils.readStormConfig());  conf.setDebug(false);  if (isLocal) {    conf.setMaxTaskParallelism(numWorker);    backtype.storm.LocalCluster cluster=new backtype.storm.LocalCluster();    cluster.submitTopology(topologyName,conf,stormTopo.getStormBuilder().createTopology());    backtype.storm.utils.Utils.sleep(600 * 1000);    cluster.killTopology(topologyName);    cluster.shutdown();  } else {    conf.setNumWorkers(numWorker);    try {      backtype.storm.StormSubmitter.submitTopology(topologyName,conf,stormTopo.getStormBuilder().createTopology());    } catch (    backtype.storm.generated.AlreadyAliveException ale) {      ale.printStackTrace();    }catch (    backtype.storm.generated.InvalidTopologyException ite) {      ite.printStackTrace();    }  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:03.513 -0500",hash_original_method="C551147CF3F803C4BE33E46DD1A6FC76",hash_generated_method="90A59F4AAB447180ED46FB5FC398298B") void clearSessionCookies(){  if (mDataBase == null) {    return;  }  mDataBase.clearSessionCookies();}  }
class C{  public int rank(int key){  int lo=0;  int hi=a.length - 1;  while (lo <= hi) {    int mid=lo + (hi - lo) / 2;    if (key < a[mid])     hi=mid - 1; else     if (key > a[mid])     lo=mid + 1; else     return mid;  }  return -1;}  }
class C{  public ICCColor(String name){  colorProfile=name;}  }
class C{  public Tree importNextTree() throws IOException, ImportException {  FlexibleTree tree=null;  try {    skipUntil("(");    unreadCharacter('(');    FlexibleNode root=readInternalNode(lastTree);    tree=new FlexibleTree(root,false,true);  } catch (  EOFException e) {  }  lastTree=tree;  return tree;}  }
class C{  public static <T>Flux<T> shuffle(Flux<T> flux){  return Flux.fromIterable(null);}  }
class C{  public void endRead(long start,long end,long bytesRead){  this.stats.incLong(readsId,1);  this.stats.incLong(readTimeId,end - start);  this.stats.incLong(bytesReadId,bytesRead);}  }
class C{  public void initOptions(){  initialFoldersToInclude=LibrarySettings.DIRECTORIES_TO_INCLUDE.getValue();  initialFoldersToExclude=LibrarySettings.DIRECTORIES_NOT_TO_INCLUDE.getValue();  List<File> roots=new ArrayList<File>(LibrarySettings.DIRECTORIES_TO_INCLUDE.getValue());  roots.addAll(LibrarySettings.DIRECTORIES_NOT_TO_INCLUDE.getValue());  directoryPanel.setRoots(roots.toArray(new File[0]));  directoryPanel.setFoldersToExclude(initialFoldersToExclude);}  }
class C{  public MqttCallbackHandler(Context context,Connection connection,String clientHandle){  this.context=context;  this.c=connection;  this.clientHandle=clientHandle;}  }
class C{  public static UserMentionEntity createUserMentionEntity(final int start,final int end,final String name,final String screenName,final long id){  return new UserMentionEntityJSONImpl(start,end,name,screenName,id);}  }
class C{  public BroadcastSchedulerListener(List<SchedulerListener> listeners){  this();  this.listeners.addAll(listeners);}  }
class C{  public synchronized void onPendingMessageDiscarded(){  pendingMsgsDiscarded++;}  }
class C{  protected void addAllStableId(List<?> items){  for (  Object item : items) {    addStableId(item);  }}  }
class C{  public void skipSample(){  long nextOffset=infoQueue.moveToNextSample();  dropDownstreamTo(nextOffset);}  }
class C{  public static ServiceCommandError notSupported(){  return new NotSupportedServiceCommandError();}  }
class C{  public TypeReference(int typeRef){  this.value=typeRef;}  }
class C{  public void drawString(String str,int x,int y,int textDecoration){  if (str.length() == 0 || (str.length() == 1 && str.charAt(0) == ' ')) {    return;  }  Object nativeFont=null;  if (current != null) {    nativeFont=current.getNativeFont();  }  if (current instanceof CustomFont) {    current.drawString(this,str,x,y);  } else {    impl.drawString(nativeGraphics,nativeFont,str,x + xTranslate,y + yTranslate,textDecoration);  }}  }
class C{  protected final void firePropertyChange(String propertyName,int oldValue,int newValue){  PropertyChangeSupport aChangeSupport=this.changeSupport;  if (aChangeSupport == null) {    return;  }  aChangeSupport.firePropertyChange(propertyName,Integer.valueOf(oldValue),Integer.valueOf(newValue));}  }
class C{  public PriorityQueue(){  this(DEFAULT_CAPACITY);}  }
class C{  public void push(E o){  add(o);}  }
class C{  public void bindSampler(Sampler vs,int slot) throws IllegalArgumentException {  mRS.validate();  if ((slot < 0) || (slot >= mTextureCount)) {    throw new IllegalArgumentException("Slot ID out of range.");  }  int id=vs != null ? vs.getID(mRS) : 0;  mRS.nProgramBindSampler(getID(mRS),slot,id);}  }
class C{  public boolean hasUnsupportedCriticalExtension(){  Set extns=getCriticalExtensionOIDs();  return extns != null && !extns.isEmpty();}  }
class C{  public boolean validWatermarkSetting(String watermark,String settingName){  try {    RatioValue.parseRatioValue(watermark);    return true;  } catch (  ElasticsearchParseException e) {    try {      ByteSizeValue.parseBytesSizeValue(watermark,settingName);      return true;    } catch (    ElasticsearchParseException ex) {      return false;    }  }}  }
class C{  public boolean isLogicalFunction(){  return false;}  }
class C{  public FastAdapterBottomSheetDialog<Item> withOnClickListener(FastAdapter.OnClickListener<Item> onClickListener){  this.mFastItemAdapter.withOnClickListener(onClickListener);  return this;}  }
class C{  public Task<ComputeImageRestRep> cloneImage(ComputeImageCreate input){  return postTask(input,baseUrl);}  }
class C{  private static IdentityStoreSchemaMapping populateObjectMappingData(Map<String,SchemaObjectMappingDTO> objectSchemaMappings) throws DTOMapperException {  IdentityStoreSchemaMapping.Builder schemaMapBuilder=new IdentityStoreSchemaMapping.Builder();  for (  Entry<String,SchemaObjectMappingDTO> objectSchema : objectSchemaMappings.entrySet()) {    String objectId=objectSchema.getKey();    SchemaObjectMappingDTO objectMapping=objectSchema.getValue();    String objectClass=objectMapping.getObjectClass();    Map<String,String> attributeMappings=objectMapping.getAttributeMappings();    IdentityStoreObjectMapping.Builder objectSchemaBuilder=new IdentityStoreObjectMapping.Builder(objectId);    objectSchemaBuilder.setObjectClass(objectClass);    for (    Entry<String,String> attributeMapping : attributeMappings.entrySet()) {      objectSchemaBuilder.addAttributeMapping(new IdentityStoreAttributeMapping(attributeMapping.getKey(),attributeMapping.getValue()));    }    schemaMapBuilder.addObjectMappings(objectSchemaBuilder.buildObjectMapping());  }  return schemaMapBuilder.buildSchemaMapping();}  }
class C{  private void createSeparator(){  final Label separator=new Label(this,SWT.SEPARATOR | SWT.HORIZONTAL);  separator.setLayoutData(new GridData(GridData.FILL,GridData.CENTER,true,false));  separator.setBackground(getBackground());}  }
class C{  @Override public void processSubToken(String subtok){  if (vals == null) {    tok=subtok;    vals=new ArrayList<String>();  } else {    vals.add(subtok);  }}  }
class C{  public OrganizationDataException(String message){  super(message);}  }
class C{  private static int checkClassTypeSignature(final String signature,int pos){  pos=checkChar('L',signature,pos);  pos=checkIdentifier(signature,pos);  while (getChar(signature,pos) == '/') {    pos=checkIdentifier(signature,pos + 1);  }  if (getChar(signature,pos) == '<') {    pos=checkTypeArguments(signature,pos);  }  while (getChar(signature,pos) == '.') {    pos=checkIdentifier(signature,pos + 1);    if (getChar(signature,pos) == '<') {      pos=checkTypeArguments(signature,pos);    }  }  return checkChar(';',signature,pos);}  }
class C{  @LargeTest public void testDownloadLargeFile() throws Exception {  long fileSize=50000000L;  Log.i(TAG,"creating a file of size: " + fileSize);  File largeFile=createFileOnSD(null,fileSize,DataType.TEXT,null);  Log.i(TAG,"DONE creating a file of size: " + fileSize);  MultipleDownloadsCompletedReceiver receiver=registerNewMultipleDownloadsReceiver();  try {    long dlRequest=doStandardEnqueue(largeFile);    waitForDownloadOrTimeout(dlRequest);    ParcelFileDescriptor pfd=mDownloadManager.openDownloadedFile(dlRequest);    verifyFileContents(pfd,largeFile);    verifyFileSize(pfd,largeFile.length());    assertEquals(1,receiver.numDownloadsCompleted());    mContext.unregisterReceiver(receiver);  } catch (  Exception e) {    throw e;  } finally {    largeFile.delete();  }}  }
class C{  protected int next(int bits){  return super.next(bits);}  }
class C{  public boolean isEnabled(LintCategory lc){  return values.contains(lc);}  }
class C{  static String trim(String str){  String trimed=str.trim();  int i=str.indexOf(trimed) + trimed.length();  if ((str.length() > i) && trimed.endsWith("\\") && !trimed.endsWith("\\\\")&& (str.charAt(i) == ' ')) {    trimed=trimed + " ";  }  return trimed;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:20.306 -0500",hash_original_method="B53D951EA30645908EAA0D773F3CD0B1",hash_generated_method="CE07C6E1BD5141BE415BFA895FDEDA11") public void drawText(char[] text,int index,int count,float x,float y,Paint paint){  if ((index | count | (index + count)| (text.length - index - count)) < 0) {    throw new IndexOutOfBoundsException();  }  native_drawText(mNativeCanvas,text,index,count,x,y,paint.mBidiFlags,paint.mNativePaint);}  }
class C{  Action requestAction(int x,int y){  creatureCheck(x,y,"requestAction");  Creature c=(Creature)getOccupant(x,y);  if (c.energy() < 0) {    return new Action(Action.ActionType.DIE);  }  Map<Direction,Occupant> nbot=neighbors(x,y);  return c.chooseAction(nbot);}  }
class C{  public ExpireOutfit(String playerName){  name=playerName;}  }
class C{  public static void print(char x){  out.print(x);  out.flush();}  }
class C{  public static void hitKeys(Robot robot,int... keys){  for (int i=0; i < keys.length; i++) {    robot.keyPress(keys[i]);  }  for (int i=keys.length - 1; i >= 0; i--) {    robot.keyRelease(keys[i]);  }}  }
class C{  public BindRequest connectAndOutbind(String host,int port,OutbindParameter outbindParameter,long timeout) throws IOException {  logger.debug("Connect and bind to {} port {}",host,port);  if (sequence().currentValue() != 1) {    throw new IOException("Connection is already used");  }  conn=connFactory.createConnection(host,port);  logger.info("Connected to {}",conn.getInetAddress());  conn.setSoTimeout(getEnquireLinkTimer());  sessionContext.open();  try {    in=new DataInputStream(conn.getInputStream());    out=conn.getOutputStream();    pduReaderWorker=new PDUReaderWorker();    pduReaderWorker.start();    sendOutbind(outbindParameter.getSystemId(),outbindParameter.getPassword());  } catch (  IOException e) {    logger.error("IO error occurred",e);    close();    throw e;  }  try {    BindRequest bindRequest=waitForBind(timeout);    logger.info("Start enquireLinkSender");    enquireLinkSender=new EnquireLinkSender();    enquireLinkSender.start();    return bindRequest;  } catch (  IllegalStateException e) {    String message="System error";    logger.error(message,e);    close();    throw new IOException(message + ": " + e.getMessage(),e);  }catch (  TimeoutException e) {    String message="Waiting bind response take time too long";    logger.error(message,e);    throw new IOException(message + ": " + e.getMessage(),e);  }}  }
class C{  public Builder addFilterRect(Rectangle2D rect){  filters.add(rect);  return (Builder)this;}  }
class C{  public SourceFragment createSourceFragment(){  SourceFragmentImpl sourceFragment=new SourceFragmentImpl();  return sourceFragment;}  }
class C{  public SVGOMTransform(){  affineTransform=new AffineTransform();}  }
class C{  public SignalServiceDataMessage(long timestamp,String body){  this(timestamp,body,0);}  }
class C{  @DSSource({DSSourceKind.IO}) @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:54.175 -0400",hash_original_method="6344429FD9A8D1E16E99E70D8423C5F0",hash_generated_method="B98E53D07D79272D48F505D59B9782B6") public static byte[] toByteArray(InputStream input,int size) throws IOException {  if (size < 0) {    throw new IllegalArgumentException("Size must be equal or greater than zero: " + size);  }  if (size == 0) {    return new byte[0];  }  byte[] data=new byte[size];  int offset=0;  int readed;  while (offset < size && (readed=input.read(data,offset,size - offset)) != EOF) {    offset+=readed;  }  if (offset != size) {    throw new IOException("Unexpected readed size. current: " + offset + ", excepted: "+ size);  }  return data;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:21.641 -0500",hash_original_method="A0B07CD6AB37B7B30863E7D1CAF36981",hash_generated_method="5DFF62CE6B9C14D1C45D38C7C356DD12") public GsmSmsAddress(byte[] data,int offset,int length){  origBytes=new byte[length];  System.arraycopy(data,offset,origBytes,0,length);  int addressLength=origBytes[OFFSET_ADDRESS_LENGTH] & 0xff;  int toa=origBytes[OFFSET_TOA] & 0xff;  ton=0x7 & (toa >> 4);  if ((toa & 0x80) != 0x80) {    throw new RuntimeException("Invalid TOA - high bit must be set");  }  if (isAlphanumeric()) {    int countSeptets=addressLength * 4 / 7;    address=GsmAlphabet.gsm7BitPackedToString(origBytes,OFFSET_ADDRESS_VALUE,countSeptets);  } else {    byte lastByte=origBytes[length - 1];    if ((addressLength & 1) == 1) {      origBytes[length - 1]|=0xf0;    }    address=PhoneNumberUtils.calledPartyBCDToString(origBytes,OFFSET_TOA,length - OFFSET_TOA);    origBytes[length - 1]=lastByte;  }}  }
class C{  public void open(){  this.createContents();  this.shell.open();  this.shell.layout();  Display display=this.getParent().getDisplay();  while (!this.shell.isDisposed()) {    if (!display.readAndDispatch()) {      display.sleep();    }  }}  }
class C{  public boolean hasFaces(){  return mDimFaces;}  }
class C{  protected SSLContext(SSLContextSpi contextSpi,Provider provider,String protocol){  this.contextSpi=contextSpi;  this.provider=provider;  this.protocol=protocol;}  }
class C{  public Boolean isRTPRTSPTCP(){  return rtprtsptcp;}  }
class C{  public static double MCSCE3rawFitness(boolean useTrainingData,GEPIndividual ind,double bestValueThreshold,double secondBestValueThreshold){  int mi_ContingencyTable[][]=MCSCE3contingencyTable(useTrainingData,ind,bestValueThreshold,secondBestValueThreshold);  GEPDependentVariable dv;  if (useTrainingData)   dv=GEPDependentVariable.trainingData; else   dv=GEPDependentVariable.testingData;  int numberOfObjects=dv.getDependentVariableValues().length;  int numberOfClasses=((GEPSpecies)ind.species).numberOfChromosomes;  int numberOfMatches=0;  for (int i=0; i < numberOfClasses; i++)   numberOfMatches+=mi_ContingencyTable[i][i];  double classificationError=((double)(numberOfObjects - numberOfMatches)) / numberOfObjects;  return classificationError;}  }
class C{  protected void updateNodeData(int r,boolean added){  if (added) {    m_links.addRow();  } else {    m_nodeTuples.invalidate(r);    m_links.removeRow(r);  }}  }
class C{  private static String removeSubstring(String str,int beginIndex,int length){  final int len=str.length();  final String part1=str.substring(0,Math.max(beginIndex,0));  final String part2=str.substring(Math.min(beginIndex + length,len),len);  return part1 + part2;}  }
class C{  public String toString(){  return toXML(false);}  }
class C{  @Override public boolean isInSameBroadcastDomain(long s1,short p1,long s2,short p2){  return isInSameBroadcastDomain(s1,p1,s2,p2,true);}  }
class C{  public T caseDefRoot(DefRoot object){  return null;}  }
class C{  public Composite basicGetOwner(){  if (eContainerFeatureID() != DomPackage.COMPOSED_CONTENT__OWNER)   return null;  return (Composite)eInternalContainer();}  }
class C{  public boolean hasEvents(){  return hasRepeatingExtension(Event.class);}  }
class C{  private static int computeOrderSortingValue(float indexDistance,float stackVisibility){  return (int)((indexDistance + 1) / (0.1f + 0.9f * stackVisibility));}  }
class C{  public int next() throws IOException {  tagOffset=offset;  tag=read();  length=read();  if (length != 0x80) {    if ((length & 0x80) != 0) {      int numOctets=length & 0x7F;      if (numOctets > 5) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }      length=read();      for (int i=1; i < numOctets; i++) {        int ch=read();        length=(length << 8) + ch;      }      if (length > 0xFFFFFF) {        throw new ASN1Exception("Too long encoding at [" + tagOffset + "]");      }    }  } else {    length=INDEFINIT_LENGTH;  }  contentOffset=offset;  return tag;}  }
class C{  public String toString(){  if (iToString == null) {    StringBuffer buf=new StringBuffer(4);    if (isNegated()) {      buf.append('^');    }    buf.append(start);    if (start != end) {      buf.append('-');      buf.append(end);    }    iToString=buf.toString();  }  return iToString;}  }
class C{  private Iterable<Method> methodsWithAnnotation(Class<?> cls,Class<? extends Annotation> annCls){  assert cls != null;  assert annCls != null;  Collection<Method> mtds=methodsFromCache(cls,annCls);  if (mtds == null) {    mtds=new ArrayList<>();    for (    Method mtd : cls.getDeclaredMethods()) {      Annotation ann=mtd.getAnnotation(annCls);      if (ann != null)       mtds.add(mtd);    }    cacheMethods(cls,annCls,mtds);  }  return mtds;}  }
class C{  public static int id(String token){  long attempt_read_lock=lock.tryOptimisticRead();  if (stringToId.containsKey(token)) {    int resultId=stringToId.get(token);    if (lock.validate(attempt_read_lock)) {      return resultId;    }  }  long read_lock_stamp=lock.readLock();  try {    if (stringToId.containsKey(token)) {      return stringToId.get(token);    }  }  finally {    lock.unlockRead(read_lock_stamp);  }  long write_lock_stamp=lock.writeLock();  try {    if (stringToId.containsKey(token)) {      return stringToId.get(token);    }    int id=idToString.size() * (FormatUtils.isNonterminal(token) ? -1 : 1);    for (    NGramLanguageModel lm : LMs)     lm.registerWord(token,Math.abs(id));    idToString.add(token);    stringToId.put(token,id);    return id;  }  finally {    lock.unlockWrite(write_lock_stamp);  }}  }
class C{  public boolean isDisplayed(){  return m_vo.IsDisplayed;}  }
class C{  public static <T1,T2,R>BiFunction<T1,T2,R> memoizeBiFunction(final BiFunction<T1,T2,R> fn,final Cacheable<R> cache){  val memoise2=memoizeFunction(null,cache);  return null;}  }
class C{  public ReedSolomon_63_47_17(int maximumCorrectableErrors){  super(maximumCorrectableErrors);}  }
class C{  private void dynInit(){  ArrayList<BankInfo> bankAccountData=getBankAccountData();  for (  BankInfo bi : bankAccountData)   fieldBankAccount.addItem(bi);  if (fieldBankAccount.getItemCount() == 0)   ADialog.error(m_WindowNo,panel,"VPaySelectNoBank"); else   fieldBankAccount.setSelectedIndex(0);  loadBankInfo();  ArrayList<KeyNamePair> docTypeData=getDocTypeData();  for (  KeyNamePair pp : docTypeData)   fieldDtype.addItem(pp);  prepareTable(miniTable);  miniTable.addMiniTableSelectionListener(this);  fieldPayDate.setMandatory(true);  fieldPayDate.setValue(new Timestamp(System.currentTimeMillis()));}  }
class C{  public static long calculateServerFee(long amount){  long fee=(long)(amount * Constants.SERVER_FEE_PERCENTAGE + Constants.SERVER_FEE_FLAT);  return Math.min(Constants.SERVER_FEE_MAX,Math.max(Constants.SERVER_FEE_MIN,fee));}  }
class C{  private double variance(double p,double totalWeight){  return (p * (1 - p)) / totalWeight;}  }
class C{  private static boolean eq(int v1,int v2){  return v1 == v2;}  }
class C{  public static void notNull(final Object obj,final String name){  if (null == obj) {    final String message=String.format("%s cannot be null",name);    throw new IllegalArgumentException(message);  }}  }
class C{  public Object decode(mxCodec dec,Node node,Object into){  Object obj=null;  if (node instanceof Element) {    String id=((Element)node).getAttribute("id");    obj=dec.objects.get(id);    if (obj == null) {      obj=into;      if (obj == null) {        obj=cloneTemplate(node);      }      if (id != null && id.length() > 0) {        dec.putObject(id,obj);      }    }    node=node.getFirstChild();    while (node != null) {      if (!processInclude(dec,node,obj) && node.getNodeName().equals("add") && node instanceof Element) {        String as=((Element)node).getAttribute("as");        if (as != null && as.length() > 0) {          String extend=((Element)node).getAttribute("extend");          Map<String,Object> style=(extend != null) ? ((mxStylesheet)obj).getStyles().get(extend) : null;          if (style == null) {            style=new Hashtable<String,Object>();          } else {            style=new Hashtable<String,Object>(style);          }          Node entry=node.getFirstChild();          while (entry != null) {            if (entry instanceof Element) {              Element entryElement=(Element)entry;              String key=entryElement.getAttribute("as");              if (entry.getNodeName().equals("add")) {                String text=entry.getTextContent();                Object value=null;                if (text != null && text.length() > 0) {                  value=mxUtils.eval(text);                } else {                  value=entryElement.getAttribute("value");                }                if (value != null) {                  style.put(key,value);                }              } else               if (entry.getNodeName().equals("remove")) {                style.remove(key);              }            }            entry=entry.getNextSibling();          }          ((mxStylesheet)obj).putCellStyle(as,style);        }      }      node=node.getNextSibling();    }  }  return obj;}  }
class C{  @Override public synchronized int read(byte b[],int off,int len) throws IOException {  if (b == null) {    throw new NullPointerException();  } else   if (off < 0 || len < 0 || len > b.length - off) {    throw new IndexOutOfBoundsException();  } else   if (len == 0) {    return 0;  }  if (c.checkEOF()) {    return -1;  }  try {    while (r.available() == 0) {      c.readDataRecord(r);      if (c.checkEOF()) {        return -1;      }    }    int howmany=Math.min(len,r.available());    howmany=r.read(b,off,howmany);    return howmany;  } catch (  Exception e) {    c.handleException(e);    return -1;  }}  }
class C{  public int hashCode(){  return getRGB();}  }
class C{  public synchronized void render(Graphics gr){  if (traverseMode == FIRST_ADDED_ON_TOP) {    ListIterator<OMGraphic> iterator=listIterator(size());    while (iterator.hasPrevious()) {      OMGraphic graphic=iterator.previous();      if (graphic.isVisible()) {        Object obj=graphic.getAttribute(OMGraphic.APP_OBJECT);        if (Debug.debugging("linkdetail") && obj instanceof LinkProperties) {          String id=((LinkProperties)obj).getProperty(LPC_GRAPHICID);          Debug.output("LinkOMGraphicList: Rendering graphic " + id);        }        graphic.render(gr);      }    }  } else {    ListIterator<OMGraphic> iterator=listIterator();    while (iterator.hasNext()) {      OMGraphic graphic=iterator.next();      if (graphic.isVisible()) {        Object obj=graphic.getAttribute(OMGraphic.APP_OBJECT);        if (Debug.debugging("linkdetail") && obj instanceof LinkProperties) {          String id=((LinkProperties)obj).getProperty(LPC_GRAPHICID);          Debug.output("LinkOMGraphicList: Rendering graphic " + id);        }        graphic.render(gr);      }    }  }}  }
class C{  public static Matrix fromGeographicToViewport(Sector sector,int x,int y,int width,int height){  if (sector == null) {    String message=Logging.getMessage("nullValue.SectorIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (width <= 0) {    String message=Logging.getMessage("Geom.WidthInvalid",width);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (height <= 0) {    String message=Logging.getMessage("Geom.HeightInvalid",height);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  Matrix transform=Matrix.IDENTITY;  transform=transform.multiply(Matrix.fromTranslation(-x,-y,0.0));  transform=transform.multiply(Matrix.fromScale(width / sector.getDeltaLonDegrees(),height / sector.getDeltaLatDegrees(),1.0));  transform=transform.multiply(Matrix.fromTranslation(-sector.getMinLongitude().degrees,-sector.getMinLatitude().degrees,0.0));  return transform;}  }
class C{  protected void destroyResizeController(SelectEvent event){  if (this.resizeController != null) {    try {      if (event != null)       this.resizeController.selected(event);      this.resizeController.detach();      this.resizeController=null;    }  finally {      if (this.wwd instanceof Component) {        ((Component)this.wwd).setCursor(Cursor.getDefaultCursor());      }    }  }}  }
class C{  public void visitLineNumber(int line,Label start){  if (mv != null) {    mv.visitLineNumber(line,start);  }}  }
class C{  public void write(Element element) throws SAXException {  write(element,new NamespaceStack());}  }
class C{  private final void buildInterface(){  this.poolList=new JList(this.sortArray(this.pool.toArray()));  this.subsetList=new JList(this.sortArray(this.subset.toArray()));  Component leftPane=this.getListPanel(this.poolList,this.poolTitle);  Component rightPane=this.getListPanel(this.subsetList,this.subsetTitle);  JButton leftToRightButton=new JButton(this.getLeftToRightAction());  JButton rightToLeftButton=new JButton(this.getRightToLeftAction());  Component centerStrut=Box.createVerticalStrut(10);  JPanel centerPanel=new JPanel();  centerPanel.setLayout(new GridLayout(3,1));  centerPanel.add(leftToRightButton);  centerPanel.add(centerStrut);  centerPanel.add(rightToLeftButton);  this.setLayout(new GridBagLayout());  GridBagConstraints gbc=new GridBagConstraints();  gbc.gridx=gbc.gridy=0;  gbc.weightx=1d;  gbc.weighty=1d;  gbc.fill=GridBagConstraints.BOTH;  this.add(leftPane,gbc);  gbc.gridx=2;  this.add(rightPane,gbc);  gbc.gridx=1;  gbc.weightx=gbc.weighty=0;  gbc.fill=GridBagConstraints.NONE;  gbc.insets=new Insets(5,5,5,5);  this.add(centerPanel,gbc);  this.setBorder(BorderFactory.createEmptyBorder(15,15,15,15));}  }
class C{  public void hasBody(boolean hasBody){}  }
class C{  @Override public boolean isServerCopy(ServerBartender server){  for (int i=0; i < _owners.length; i++) {    ServerBartender serverBar=server(i);    if (serverBar != null && serverBar.isSameServer(server)) {      return true;    }  }  return false;}  }
class C{  public CyclicNumberAxis(double period,double offset,String label){  super(label);  this.period=period;  this.offset=offset;  setFixedAutoRange(period);  this.advanceLineVisible=true;  this.advanceLinePaint=DEFAULT_ADVANCE_LINE_PAINT;}  }
class C{  public void perRaceWorkerEpilog(WorkerThread wt){  if (verbose)   System.out.println(wt.getName() + ": perRaceWorkerEpilog() called");}  }
class C{  public static ComponentUI createUI(JComponent c){  return new SeaGlassSpinnerUI();}  }
class C{  public boolean isEmpty(){  return (size == 0);}  }
class C{  private BigDecimal updateCostsOld(MAcctSchema as,boolean create){  if (create) {    StringBuffer sql=new StringBuffer("INSERT INTO M_Product_Costing " + "(M_Product_ID,C_AcctSchema_ID," + " AD_Client_ID,AD_Org_ID,IsActive,Created,CreatedBy,Updated,UpdatedBy,"+ " CurrentCostPrice,CostStandard,FutureCostPrice,"+ " CostStandardPOQty,CostStandardPOAmt,CostStandardCumQty,CostStandardCumAmt,"+ " CostAverage,CostAverageCumQty,CostAverageCumAmt,"+ " PriceLastPO,PriceLastInv, TotalInvQty,TotalInvAmt) "+ "VALUES (");    sql.append(m_M_Product_ID).append(",").append(as.getC_AcctSchema_ID()).append(",").append(as.getAD_Client_ID()).append(",").append(as.getAD_Org_ID()).append(",").append("'Y',SysDate,0,SysDate,0, 0,0,0,  0,0,0,0,  0,0,0,  0,0,  0,0)");    int no=DB.executeUpdate(sql.toString(),m_trxName);    if (no == 1)     log.fine("CostingCreated");  }  String costSource="PriceList-PO";  BigDecimal costs=getPriceList(as,true);  if (costs == null || costs.equals(Env.ZERO)) {    costSource="PO Cost";    costs=getPOCost(as);  }  if (costs == null || costs.equals(Env.ZERO)) {    costSource="PriceList";    costs=getPriceList(as,false);  }  if (costs == null || costs.equals(Env.ZERO)) {    costSource="Not Found";    costs=new BigDecimal("1");  }  StringBuffer sql=new StringBuffer("UPDATE M_Product_Costing ");  sql.append("SET CurrentCostPrice=").append(costs).append(" WHERE M_Product_ID=").append(m_M_Product_ID).append(" AND C_AcctSchema_ID=").append(as.getC_AcctSchema_ID());  int no=DB.executeUpdate(sql.toString(),m_trxName);  if (no == 1)   log.fine(costSource + " - " + costs);  return costs;}  }
class C{  public boolean isMethod(){  return testAllFlags(IS_METHOD);}  }
class C{  private static boolean showCheatSheet(View view,CharSequence text){  if (TextUtils.isEmpty(text)) {    return false;  }  final int[] screenPos=new int[2];  final Rect displayFrame=new Rect();  view.getLocationOnScreen(screenPos);  view.getWindowVisibleDisplayFrame(displayFrame);  final Context context=view.getContext();  final int viewWidth=view.getWidth();  final int viewHeight=view.getHeight();  final int viewCenterX=screenPos[0] + viewWidth / 2;  final int screenWidth=context.getResources().getDisplayMetrics().widthPixels;  final int estimatedToastHeight=(int)(ESTIMATED_TOAST_HEIGHT_DIPS * context.getResources().getDisplayMetrics().density);  Toast cheatSheet=Toast.makeText(context,text,Toast.LENGTH_SHORT);  boolean showBelow=screenPos[1] < estimatedToastHeight;  if (showBelow) {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top + viewHeight);  } else {    cheatSheet.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL,viewCenterX - screenWidth / 2,screenPos[1] - displayFrame.top - estimatedToastHeight);  }  cheatSheet.show();  return true;}  }
class C{  @Override public void applyIncrementOnTX(Transaction tx,long recordID1,int add){  CounterOperations oper=(CounterOperations)tx.getProperty(TransactionPropertyIndexes.PAGE_COUNT_INC);  if (oper == null) {    oper=new CounterOperations();    tx.putProperty(TransactionPropertyIndexes.PAGE_COUNT_INC,oper);    tx.addOperation(oper);  }  oper.operations.add(new ItemOper(this,recordID1,add));}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.LOGICAL_AND_EXPRESSION;}  }
class C{  public static double binomialStandardError(double p,int n){  if (n == 0) {    return 0;  }  return Math.sqrt((p * (1 - p)) / (double)n);}  }
class C{  public SASLCapHandler(String username,String password){  this(username,password,false);}  }
class C{  public void drawLegendShape(Canvas canvas,SimpleSeriesRenderer renderer,float x,float y,int seriesIndex,Paint paint){  if (((XYSeriesRenderer)renderer).isFillPoints()) {    paint.setStyle(Style.FILL);  } else {    paint.setStyle(Style.STROKE);  }switch (((XYSeriesRenderer)renderer).getPointStyle()) {case X:    drawX(canvas,paint,x + SHAPE_WIDTH,y);  break;case CIRCLE:drawCircle(canvas,paint,x + SHAPE_WIDTH,y);break;case TRIANGLE:drawTriangle(canvas,paint,new float[6],x + SHAPE_WIDTH,y);break;case SQUARE:drawSquare(canvas,paint,x + SHAPE_WIDTH,y);break;case DIAMOND:drawDiamond(canvas,paint,new float[8],x + SHAPE_WIDTH,y);break;case POINT:canvas.drawPoint(x + SHAPE_WIDTH,y,paint);break;}}  }
class C{  void addOutputs(int index,LongRange range){  if (start >= range.min && end <= range.max) {    if (outputs == null) {      outputs=new ArrayList<>();    }    outputs.add(index);  } else   if (left != null) {    assert right != null;    left.addOutputs(index,range);    right.addOutputs(index,range);  }}  }
class C{  public boolean isVisible(){  return visible;}  }
class C{  JComboBox createNoseComboBox(){  JComboBox cb=new JComboBox();  fillComboBox(cb);  cb.addActionListener(this);  return cb;}  }
class C{  private void updateVirtualNetwork(RemoveFloatingIpFromVmWorkflowDocument state){  VirtualNetworkService.State virtualNetworkPatchState=new VirtualNetworkService.State();  virtualNetworkPatchState.natRuleToFloatingIpMap=state.taskServiceEntity.natRuleToFloatingIpMap;  ServiceHostUtils.getCloudStoreHelper(getHost()).createPatch(state.taskServiceEntity.documentSelfLink).setBody(virtualNetworkPatchState).setCompletion(null).sendWith(this);}  }
class C{  public boolean isValidCategory(int i){  if (i < 0 || i >= n)   return false;  return true;}  }
class C{  @Override public void drawArc(int x,int y,int width,int height,int startAngle,int arcAngle){}  }
class C{  protected void addAll(double[] values,int group){  for (  double value : values) {    add(value,group);  }}  }
class C{  public static void show(final Context ctx,final int resId,final boolean warn,int gravity){  CharSequence msg=ctx.getResources().getText(resId);  show(ctx,msg,warn,gravity);}  }
class C{  @Override public void end(Xid xid,int flags) throws XAException {  if (isDebugEnabled()) {    debugCode("end(" + JdbcXid.toString(xid) + ", "+ quoteFlags(flags)+ ");");  }  if (flags == TMSUSPEND) {    return;  }  if (!currentTransaction.equals(xid)) {    throw new XAException(XAException.XAER_OUTSIDE);  }  prepared=false;}  }
class C{  public static boolean invokeStaticGetter(Class clazz,String methodName,boolean defaultValue){  try {    Method method=clazz.getMethod(methodName,new Class[0]);    Object result=method.invoke(null,new Object[0]);    return ((Boolean)result).booleanValue();  } catch (  NoSuchMethodException e) {    return defaultValue;  }catch (  IllegalAccessException e) {    return defaultValue;  }catch (  InvocationTargetException e) {    return defaultValue;  }}  }
class C{  public ObjectParser(final Object context,final Class<?> type){  this(context,type,null);}  }
class C{  public static Class<?> wrapper(Class<?> type){  if (type == null) {    return null;  } else   if (type.isPrimitive()) {    if (boolean.class == type) {      return Boolean.class;    } else     if (int.class == type) {      return Integer.class;    } else     if (long.class == type) {      return Long.class;    } else     if (short.class == type) {      return Short.class;    } else     if (byte.class == type) {      return Byte.class;    } else     if (double.class == type) {      return Double.class;    } else     if (float.class == type) {      return Float.class;    } else     if (char.class == type) {      return Character.class;    } else     if (void.class == type) {      return Void.class;    }  }  return type;}  }
class C{  public boolean endsWith(java.lang.String suffix){  return false;}  }
class C{  public void store16(int addr,int value){  store8(addr + 1,value >> 8);  store8(addr,value);}  }
class C{  public void visitFieldInsn(int opcode,String owner,String name,String desc){  if (mv != null) {    mv.visitFieldInsn(opcode,owner,name,desc);  }}  }
class C{  public static boolean processDefinedSubsNames(Project project,Processor<String> processor){  return PerlStubIndex.getInstance().processAllKeys(PerlSubDefinitionsStubIndex.KEY,project,processor);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public int onSameSide(Vec4 pa,Vec4 pb){  if (pa == null || pb == null) {    throw new IllegalArgumentException("Point Is Null");  }  double da=this.distanceTo(pa);  double db=this.distanceTo(pb);  if (da < 0 && db < 0)   return -1;  if (da > 0 && db > 0)   return 1;  return 0;}  }
class C{  public boolean isIPCMethod(SootMethod method){  return ipcMethods.containsPoly(method);}  }
class C{  public FactoryConfigurationError(String msg){  super(msg);  this.exception=null;}  }
class C{  private void handleReceivedEnumerationData(){switch (this.aws.subStage) {case QUERY_LOCAL_RESOURCES:    getLocalResources(AWSComputeEnumerationCreationSubStage.COMPARE);  break;case COMPARE:compareLocalStateWithEnumerationData(AWSComputeEnumerationCreationSubStage.CREATE_COMPUTE_DESCRIPTIONS);break;case CREATE_COMPUTE_DESCRIPTIONS:if (this.aws.instancesToBeCreated.size() > 0 || this.aws.instancesToBeUpdated.size() > 0) {createComputeDescriptions(AWSComputeEnumerationCreationSubStage.CREATE_COMPUTE_STATES);} else {if (this.aws.nextToken == null) {this.aws.subStage=AWSComputeEnumerationCreationSubStage.ENUMERATION_STOP;} else {this.aws.subStage=AWSComputeEnumerationCreationSubStage.GET_NEXT_PAGE;}handleReceivedEnumerationData();}break;case CREATE_COMPUTE_STATES:AWSComputeEnumerationCreationSubStage next;if (this.aws.nextToken == null) {next=AWSComputeEnumerationCreationSubStage.ENUMERATION_STOP;} else {next=AWSComputeEnumerationCreationSubStage.GET_NEXT_PAGE;}createComputeStates(next);break;case GET_NEXT_PAGE:getNextPageFromEnumerationAdapter(AWSComputeEnumerationCreationSubStage.QUERY_LOCAL_RESOURCES);break;case ENUMERATION_STOP:signalStopToEnumerationAdapter();break;default :Throwable t=new Exception("Unknown AWS enumeration sub stage");signalErrorToEnumerationAdapter(t);}}  }
class C{  public void enableNormals(boolean enable){  showNormals=enable;  spatialDirty(rootNode,DirtyType.RenderState);}  }
class C{  public void putMapPropertyType(String property,Class<? extends Object> key,Class<? extends Object> value){  keyProperties.put(property,key);  valueProperties.put(property,value);}  }
class C{  public void removeChild(final TreeNode<ObjectType> child){  m_children.remove(child);}  }
class C{  public ObjectNotFoundException(){  super();}  }
class C{  private static String escapeString(String str){  int strLen=str.length();  StringBuilder b=new StringBuilder(strLen);  for (int i=0; i < strLen; i++) {    char original=str.charAt(i);    if (original >= ' ' && original <= '~' && original != '"' && original != '\'') {      b.append(original);    } else {      b.append(String.format("\\u%04x",(int)original));    }  }  return b.toString();}  }
class C{  public static String stringFor(int n){switch (n) {case CU_RESOURCE_TYPE_ARRAY:    return "CU_RESOURCE_TYPE_ARRAY";case CU_RESOURCE_TYPE_MIPMAPPED_ARRAY:  return "CU_RESOURCE_TYPE_MIPMAPPED_ARRAY";case CU_RESOURCE_TYPE_LINEAR:return "CU_RESOURCE_TYPE_LINEAR";case CU_RESOURCE_TYPE_PITCH2D:return "CU_RESOURCE_TYPE_PITCH2D";}return "INVALID CUresourcetype: " + n;}  }
class C{  public FieldRecordInfo(Frame owner,String title,int AD_Table_ID,int AD_Column_ID,int Record_ID){  super(owner,title,true);  this.AD_Table_ID=AD_Table_ID;  this.AD_Column_ID=AD_Column_ID;  this.Record_ID=Record_ID;  try {    jbInit(dynInit(title));  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  this.setPreferredSize(new Dimension(640,480));  AEnv.positionCenterWindow(owner,this);  AEnv.showCenterScreen(this);}  }
class C{  public static int hashShortArray(int seed,short... shortArray){  return hash(seed,shortArray);}  }
class C{  public void advanceOutputWatermark(Instant newOutputWatermark){  checkNotNull(newOutputWatermark);  final Instant adjustedOutputWatermark;  if (newOutputWatermark.isAfter(inputWatermarkTime)) {    WindowTracing.trace("TestTimerInternals.advanceOutputWatermark: clipping output watermark from {} to {}",newOutputWatermark,inputWatermarkTime);    adjustedOutputWatermark=inputWatermarkTime;  } else {    adjustedOutputWatermark=newOutputWatermark;  }  checkState(outputWatermarkTime == null || !adjustedOutputWatermark.isBefore(outputWatermarkTime),"Cannot move output watermark time backwards from %s to %s",outputWatermarkTime,adjustedOutputWatermark);  WindowTracing.trace("TestTimerInternals.advanceOutputWatermark: from {} to {}",outputWatermarkTime,adjustedOutputWatermark);  outputWatermarkTime=adjustedOutputWatermark;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  public E poll(){  final ReentrantLock lock=this.lock;  lock.lock();  long t=now();  TenantQueue.Item item=null;  try {    TenantQueue q=nextQueue(t);    if (q == null || q.next > t)     return null; else {      item=q.poll(t);      return item == null ? null : item.element;    }  }  finally {    lock.unlock();    done(item,t);  }}  }
class C{  public boolean needsSaving(){  return this.entities.needsSaving(true,this.world.getTotalWorldTime(),this.isModified);}  }
class C{  public boolean isEnabled(){  return fCustomIsEnabled;}  }
class C{  public void pathValuesToPixel(List<Path> paths){  for (int i=0; i < paths.size(); i++) {    pathValueToPixel(paths.get(i));  }}  }
class C{  private void synchronizeDebuggers(final IDebugger oldDebugger,final IDebugger newDebugger){  if (oldDebugger != null) {    oldDebugger.getProcessManager().removeListener(m_processListener);    final TargetProcessThread activeThread=oldDebugger.getProcessManager().getActiveThread();    synchronizeThread(activeThread,null);  }  if (newDebugger != null) {    newDebugger.getProcessManager().addListener(m_processListener);    final TargetProcessThread activeThread=newDebugger.getProcessManager().getActiveThread();    synchronizeThread(null,activeThread);  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TMETHOD___IS_ABSTRACT:    return isAbstract();case TypesPackage.TMETHOD___GET_MEMBER_TYPE:  return getMemberType();case TypesPackage.TMETHOD___IS_CONSTRUCTOR:return isConstructor();case TypesPackage.TMETHOD___GET_FUNCTION_AS_STRING:return getFunctionAsString();case TypesPackage.TMETHOD___GET_MEMBER_AS_STRING:return getMemberAsString();case TypesPackage.TMETHOD___GET_MEMBER_ACCESS_MODIFIER:return getMemberAccessModifier();case TypesPackage.TMETHOD___GET_CONTAINING_TYPE:return getContainingType();case TypesPackage.TMETHOD___IS_FIELD:return isField();case TypesPackage.TMETHOD___IS_GETTER:return isGetter();case TypesPackage.TMETHOD___IS_SETTER:return isSetter();case TypesPackage.TMETHOD___IS_ACCESSOR:return isAccessor();case TypesPackage.TMETHOD___IS_METHOD:return isMethod();case TypesPackage.TMETHOD___IS_OPTIONAL:return isOptional();case TypesPackage.TMETHOD___IS_READABLE:return isReadable();case TypesPackage.TMETHOD___IS_WRITEABLE:return isWriteable();case TypesPackage.TMETHOD___IS_FINAL:return isFinal();case TypesPackage.TMETHOD___IS_STATIC:return isStatic();case TypesPackage.TMETHOD___IS_POLYFILLED:return isPolyfilled();}return super.eInvoke(operationID,arguments);}  }
class C{  @Override public void flush() throws IOException {  stream.flush();}  }
class C{  public MalformedConfigurationException(IOException e){  super(e);}  }
class C{  public void drawText(Graphics2D g){  mHasText=true;  checkDrawingMode(g);}  }
class C{  static int innerNewVecInsertPos(int oldPos,int idx,Vector<Insertion> vec){  if (vec.size() <= idx) {    return oldPos;  } else {    return innerNewVecInsertPos(newInsertPos(oldPos,vec.elementAt(idx)),idx + 1,vec);  }}  }
class C{  private static boolean canInactivateTerminal(Properties ctx,int adOrgId,int terminalId,String trxName){  String sqlStmt="SELECT COUNT(*) FROM U_POSTerminal WHERE IsActive='Y' AND AD_Org_ID=? AND U_POSTerminal_ID<>?";  int count=DB.getSQLValue(trxName,sqlStmt,adOrgId,terminalId);  return (count >= 1);}  }
class C{  void updateUnitLocations(Entity entity,List<MovePath> paths){  final String METHOD_NAME="updateUnitLocations(Entity, ArrayList<MovePath>)";  getOwner().methodBegin(getClass(),METHOD_NAME);  try {    getUnitPotentialLocations().remove(entity.getId());    Set<CoordFacingCombo> toAdd=new HashSet<>();    for (    MovePath path : paths) {      toAdd.add(CoordFacingCombo.createCoordFacingCombo(path));    }    getUnitPotentialLocations().put(entity.getId(),toAdd);  }  finally {    getOwner().methodEnd(getClass(),METHOD_NAME);  }}  }
class C{  public boolean equals(Object o2){  if (o2 != null && o2 instanceof IconGroup) {    IconGroup ig2=(IconGroup)o2;    if (ig2.getName().equals(getName()) && separateLargeIcons == ig2.hasSeparateLargeIcons()) {      if (separateLargeIcons) {        if (!largeIconSubDir.equals(ig2.largeIconSubDir))         return false;      }      return path.equals(ig2.path);    }  }  return false;}  }
class C{  public static void requireNonNulls(Object o0,Object o1,Object o2,Object o3,Object o4,Object o5){  requireNonNulls(o0,o1,o2,o3,o4);  if (o5 == null) {    throw new NullPointerException(SIXTH_ARG_IS_NULL);  }}  }
class C{  public void convertSolution(SignalControlData signalControl,List<KS2010CrossingSolution> solutionCrossings){  for (  SignalSystemControllerData controllerData : signalControl.getSignalSystemControllerDataBySystemId().values()) {    SignalPlanData plan=controllerData.getSignalPlanData().values().iterator().next();    plan.setOffset(0);  }  for (  KS2010CrossingSolution solution : solutionCrossings) {    Id<DgProgram> programId=solution.getProgramIdOffsetMap().keySet().iterator().next();    Id<SignalSystem> signalSystemId=this.idConverter.convertProgramId2SignalSystemId(programId);    if (!signalControl.getSignalSystemControllerDataBySystemId().containsKey(signalSystemId)) {      throw new IllegalStateException("something's wrong with program id " + programId + " = signal system id "+ signalSystemId);    }    SignalSystemControllerData controllerData=signalControl.getSignalSystemControllerDataBySystemId().get(signalSystemId);    if (!(controllerData.getSignalPlanData().size() == 1)) {      throw new IllegalStateException("something's wrong");    }    SignalPlanData plan=controllerData.getSignalPlanData().values().iterator().next();    int offset=solution.getProgramIdOffsetMap().get(programId);    offset=offset * scale;    plan.setOffset(offset);    log.info("SignalSystem Id " + controllerData.getSignalSystemId() + " Offset: "+ offset);  }}  }
class C{  public ResolvedTemplate(Template template){  this.template=template;  this.postParseReplacement="";  checkPreParseReplacement();}  }
class C{  public boolean isDefSiteStructuralTyping(){  return false;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:44.528 -0500",hash_original_method="F2D8E65DBCC7717EF7411B874638ABFB",hash_generated_method="9A93F1DB537FA91FD6F040A691AADCE3") public SIPHeader parse() throws ParseException {  Subject subject=new Subject();  if (debug)   dbg_enter("SubjectParser.parse");  try {    headerName(TokenTypes.SUBJECT);    this.lexer.SPorHT();    String s=this.lexer.getRest();    subject.setSubject(s.trim());  }  finally {    if (debug)     dbg_leave("SubjectParser.parse");  }  return subject;}  }
class C{  public DD abs(){  if (isNaN())   return NaN;  if (isNegative())   return negate();  return new DD(this);}  }
class C{  public static void cleanUpFullCopyAssociations(List<VolumeDescriptor> volumeDescriptors,DbClient dbClient){  List<URI> volumeURIs=VolumeDescriptor.getVolumeURIs(volumeDescriptors);  for (  URI volumeURI : volumeURIs) {    Volume volume=dbClient.queryObject(Volume.class,volumeURI);    URI sourceVolumeURI=volume.getAssociatedSourceVolume();    if (!NullColumnValueGetter.isNullURI(sourceVolumeURI)) {      Volume sourceVolume=dbClient.queryObject(Volume.class,sourceVolumeURI);      if (sourceVolume != null) {        StringSet fullCopyIds=sourceVolume.getFullCopies();        if (fullCopyIds.contains(volumeURI.toString())) {          fullCopyIds.remove(volumeURI.toString());          dbClient.updateObject(sourceVolume);        }      }    }  }}  }
class C{  public void lockUI(ProcessInfo pi){  setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));  setEnabled(false);}  }
class C{  public GPUImage3x3ConvolutionFilter(final float[] convolutionKernel){  super(THREE_X_THREE_TEXTURE_SAMPLING_FRAGMENT_SHADER);  mConvolutionKernel=convolutionKernel;}  }
class C{  public void flushPendingSessionEvents() throws Exception {synchronized (sessionEventsQueue) {    IoSessionEvent evt;    while ((evt=sessionEventsQueue.poll()) != null) {      logger.debug(" Flushing buffered event: {}",evt);      evt.deliverEvent();    }  }}  }
class C{  public static synchronized void warning(String message){  LogFactory.getLog(ToolBox.getCaller()).warn(message);}  }
class C{  public static void main(String[] args) throws Exception {  LocalResourcePool pool=new LocalResourcePool("dev");  pool.put("date",new Date());  ZeppelinApplicationDevServer devServer=new ZeppelinApplicationDevServer(Clock.class.getName(),pool.getAll());  devServer.start();  devServer.join();}  }
class C{  public void init(OmniboxResultItem suggestionItem,OmniboxSuggestionDelegate suggestionDelegate,int position,boolean useDarkColors){  mPosition=position;  jumpDrawablesToCurrentState();  boolean colorsChanged=mUseDarkColors == null || mUseDarkColors != useDarkColors;  if (suggestionItem.equals(mSuggestionItem) && !colorsChanged)   return;  mUseDarkColors=useDarkColors;  if (colorsChanged) {    mContentsView.mTextLine1.setTextColor(getStandardFontColor());    setRefineIcon(true);  }  mSuggestionItem=suggestionItem;  mSuggestion=suggestionItem.getSuggestion();  mSuggestionDelegate=suggestionDelegate;  mContentsView.resetTextWidths();  mContentsView.mAnswerImage.setVisibility(GONE);  mContentsView.mAnswerImage.getLayoutParams().height=0;  mContentsView.mAnswerImage.getLayoutParams().width=0;  mContentsView.mAnswerImage.setImageDrawable(null);  mContentsView.mAnswerImageMaxSize=0;  mContentsView.mTextLine1.setTextSize(FIRST_LINE_TEXT_SIZE_SP);  mContentsView.mTextLine2.setTextSize(SECOND_LINE_TEXT_SIZE_SP);  if (mSuggestion.hasAnswer()) {    setAnswer(mSuggestion.getAnswer());    mContentsView.setSuggestionIcon(SuggestionIconType.MAGNIFIER,colorsChanged);    mContentsView.mTextLine2.setVisibility(VISIBLE);    setRefinable(true);    return;  }  boolean sameAsTyped=suggestionItem.getMatchedQuery().equalsIgnoreCase(mSuggestion.getDisplayText());  Type suggestionType=mSuggestion.getType();switch (suggestionType) {case HISTORY_URL:case URL_WHAT_YOU_TYPED:case NAVSUGGEST:case HISTORY_TITLE:case HISTORY_BODY:case HISTORY_KEYWORD:case OPEN_HISTORY_PAGE:    if (mSuggestion.isStarred()) {      mContentsView.setSuggestionIcon(SuggestionIconType.BOOKMARK,colorsChanged);    } else     if (suggestionType == HISTORY_URL) {      mContentsView.setSuggestionIcon(SuggestionIconType.HISTORY,colorsChanged);    } else {      mContentsView.setSuggestionIcon(SuggestionIconType.GLOBE,colorsChanged);    }  boolean urlShown=!TextUtils.isEmpty(mSuggestion.getUrl());boolean urlHighlighted=false;if (urlShown) {urlHighlighted=setUrlText(suggestionItem);} else {mContentsView.mTextLine2.setVisibility(INVISIBLE);}setSuggestedQuery(suggestionItem,true,urlShown,urlHighlighted);setRefinable(!sameAsTyped);break;case SEARCH_WHAT_YOU_TYPED:case SEARCH_HISTORY:case SEARCH_SUGGEST:case SEARCH_OTHER_ENGINE:case SEARCH_SUGGEST_ENTITY:case SEARCH_SUGGEST_TAIL:case SEARCH_SUGGEST_PERSONALIZED:case SEARCH_SUGGEST_PROFILE:case VOICE_SUGGEST:SuggestionIconType suggestionIcon=SuggestionIconType.MAGNIFIER;if (suggestionType == Type.VOICE_SUGGEST) {suggestionIcon=SuggestionIconType.VOICE;} else if ((suggestionType == Type.SEARCH_SUGGEST_PERSONALIZED) || (suggestionType == Type.SEARCH_HISTORY)) {suggestionIcon=SuggestionIconType.HISTORY;}mContentsView.setSuggestionIcon(suggestionIcon,colorsChanged);setRefinable(!sameAsTyped);setSuggestedQuery(suggestionItem,false,false,false);if ((suggestionType == Type.SEARCH_SUGGEST_ENTITY) || (suggestionType == Type.SEARCH_SUGGEST_PROFILE)) {showDescriptionLine(SpannableString.valueOf(mSuggestion.getDescription()),getStandardFontColor());} else {mContentsView.mTextLine2.setVisibility(INVISIBLE);}break;default :assert false : "Suggestion type (" + mSuggestion.getType() + ") is not handled";break;}}  }
class C{  private static void d_uackp(double[] a,double[] c,int m,int n,KahanObject kbuff,KahanPlus kplus,int rl,int ru){  for (int i=rl, aix=rl * n; i < ru; i++, aix+=n)   sumAgg(a,c,aix,0,n,kbuff,kplus);}  }
class C{  public final T apiEndpoint(String apiEndpoint){  HttpUrl httpUrl=HttpUrl.parse(checkNotNull(apiEndpoint,"apiEndpoint == null"));  if (httpUrl == null) {    throw new IllegalArgumentException("Illegal endpoint URL: " + apiEndpoint);  }  return apiEndpoint(httpUrl);}  }
class C{  public double remove(int i){  boundsCheck(i);  if (i >= size)   throw new ArrayIndexOutOfBoundsException("LBJ: DVector: Can't remove element at index " + i + " as it is larger than the size ("+ size+ ")");  double result=vector[i];  for (int j=i + 1; j < size; ++j)   vector[j - 1]=vector[j];  --size;  return result;}  }
class C{  protected int findInsertionPoint(E o,int low,int high){  while (low <= high) {    int mid=(low + high) >>> 1;    int delta=compare(get(mid),o);    if (delta > 0) {      high=mid - 1;    } else {      low=mid + 1;    }  }  return low;}  }
class C{  public void writeToParcel(Parcel out,int flags){  out.writeInt(left);  out.writeInt(top);  out.writeInt(right);  out.writeInt(bottom);}  }
class C{  public EclipseRunner outsideJvmRunner() throws IOException {  return null;}  }
class C{  private void friendRemoved(){  unfollowButton.setVisibility(GONE);  followButton.setVisibility(VISIBLE);  userHandler.removeFriend(user);}  }
class C{  public static <T>IncreasingQualityDataSourceSupplier<T> create(List<Supplier<DataSource<T>>> dataSourceSuppliers){  return new IncreasingQualityDataSourceSupplier<T>(dataSourceSuppliers);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.ANONYMOUS_PROGRAM_1__COMMENT_1:    return getComment_1();case UmplePackage.ANONYMOUS_PROGRAM_1__DIRECTIVE_1:  return getDirective_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public boolean isPrivateDnsRouteSet(){  return mPrivateDnsRouteSet.get();}  }
class C{  public boolean isMutable(){  return m_mutable;}  }
class C{  public static CCEaseAction action(CCIntervalAction action){  return new CCEaseAction(action);}  }
class C{  public CAMatrix seedImage(int[] pixels,int imgWidth,int imgHeight){  final int xo=MathUtils.clip((width - imgWidth) / 2,0,width - 1);  final int yo=MathUtils.clip((height - imgHeight) / 2,0,height - 1);  imgWidth=MathUtils.min(imgWidth,width);  imgHeight=MathUtils.min(imgHeight,height);  for (int y=0; y < imgHeight; y++) {    final int i=y * imgWidth;    final int yoIndex=(yo + y) * width;    for (int x=0; x < imgWidth; x++) {      if (0 < (pixels[i + x] & 0xff)) {        int idx=yoIndex + xo + x;        matrix[idx]=1;      }    }  }  return this;}  }
class C{  public boolean isModified(){  return _isDigestModified || _jarDepend.isModified();}  }
class C{  public static Map<MetaKey,String> union(final Map<MetaKey,String> providedMetaData,final Map<MetaKey,String> extractedMetaData){  final int size1=providedMetaData != null ? providedMetaData.size() : 0;  final int size2=extractedMetaData != null ? extractedMetaData.size() : 0;  if (size1 + size2 == 0) {    return Collections.emptyMap();  }  final Map<MetaKey,String> result=new HashMap<>(size1 + size2);  if (extractedMetaData != null) {    result.putAll(extractedMetaData);  }  if (providedMetaData != null) {    result.putAll(providedMetaData);  }  return Collections.unmodifiableMap(result);}  }
class C{  public static EncodingException createEncodingException(final ErrorKeys errorId){  return new EncodingException(errorId.toString());}  }
class C{  private static byte[] readClass(final InputStream is,boolean close) throws IOException {  if (is == null) {    throw new IOException("Class not found");  }  try {    byte[] b=new byte[is.available()];    int len=0;    while (true) {      int n=is.read(b,len,b.length - len);      if (n == -1) {        if (len < b.length) {          byte[] c=new byte[len];          System.arraycopy(b,0,c,0,len);          b=c;        }        return b;      }      len+=n;      if (len == b.length) {        int last=is.read();        if (last < 0) {          return b;        }        byte[] c=new byte[b.length + 1000];        System.arraycopy(b,0,c,0,len);        c[len++]=(byte)last;        b=c;      }    }  }  finally {    if (close) {      is.close();    }  }}  }
class C{  public static StringBuilder prefix(StringBuilder query){  return query.append("PREFIX ontology: <").append(NAMESPACE).append(">\n");}  }
class C{  public static Object parseWithException(Reader in) throws IOException, ParseException {  JSONParser parser=new JSONParser();  return parser.parse(in);}  }
class C{  public void slot(int voffset){  vtable[voffset]=offset();}  }
class C{  public void startExamination(){  examiner=new Thread(new ExamineSsl());  examiner.setPriority(Thread.MIN_PRIORITY);  examiner.start();}  }
class C{  public final boolean skipAny(CharSet charSet,CharSequence csq){  int i=index;  int n=csq.length();  for (; (i < n) && charSet.contains(csq.charAt(i)); i++) {  }  if (i == index)   return false;  index=i;  return true;}  }
class C{  public boolean isDisplayed(){  if (myModallyActivated) {    if (myDialog != null) {      return myDialog.isShowing();    } else {      return false;    }  } else {    if (myFrame != null) {      if (!myFrame.isVisible()) {        return false;      } else {        return myFrame.getState() == JFrame.NORMAL;      }    } else {      return false;    }  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:15.346 -0500",hash_original_method="0B13ECC3F100D49D8BCFE6A30F50129A",hash_generated_method="EF80024A00D7E526068FD0AA7374CDCF") public static Display createCompatibleDisplay(int displayId,CompatibilityInfoHolder compat){  return new Display(displayId,compat);}  }
class C{  public void randomize(){  randomizeIncomingWeights();  normalizeIncomingWeights();}  }
class C{  public void put(ByteArray source,int index,int length){  put(source.mBuffer.array(),index,length);}  }
class C{  public void save() throws CouldntSaveDataException {  try {    m_graph.save();  } catch (  final com.google.security.zynamics.binnavi.Database.Exceptions.CouldntSaveDataException e) {    throw new CouldntSaveDataException(e);  }}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof TextAnnotation)) {    return false;  }  TextAnnotation that=(TextAnnotation)obj;  if (!ObjectUtilities.equal(this.text,that.getText())) {    return false;  }  if (!ObjectUtilities.equal(this.font,that.getFont())) {    return false;  }  if (!PaintUtilities.equal(this.paint,that.getPaint())) {    return false;  }  if (!ObjectUtilities.equal(this.textAnchor,that.getTextAnchor())) {    return false;  }  if (!ObjectUtilities.equal(this.rotationAnchor,that.getRotationAnchor())) {    return false;  }  if (this.rotationAngle != that.getRotationAngle()) {    return false;  }  return true;}  }
class C{  public boolean isCurrent(String str){  if (pos + str.length() > lcText.length)   return false;  for (int i=str.length() - 1; i >= 0; i--) {    if (str.charAt(i) != lcText[pos + i])     return false;  }  return true;}  }
class C{  void add(int n){  ints.set(encode(n));}  }
class C{  public long convertUPSToGeodetic(String Hemisphere,double Easting,double Northing){  long Error_Code=UPS_NO_ERROR;  if (!AVKey.NORTH.equals(Hemisphere) && !AVKey.SOUTH.equals(Hemisphere))   Error_Code|=UPS_HEMISPHERE_ERROR;  if ((Easting < MIN_EAST_NORTH) || (Easting > MAX_EAST_NORTH))   Error_Code|=UPS_EASTING_ERROR;  if ((Northing < MIN_EAST_NORTH) || (Northing > MAX_EAST_NORTH))   Error_Code|=UPS_NORTHING_ERROR;  if (AVKey.NORTH.equals(Hemisphere))   UPS_Origin_Latitude=MAX_ORIGIN_LAT;  if (AVKey.SOUTH.equals(Hemisphere))   UPS_Origin_Latitude=-MAX_ORIGIN_LAT;  if (Error_Code == UPS_NO_ERROR) {    polarConverter.setPolarStereographicParameters(UPS_a,UPS_f,UPS_Origin_Latitude,UPS_Origin_Longitude,UPS_False_Easting,UPS_False_Northing);    polarConverter.convertPolarStereographicToGeodetic(Easting,Northing);    Latitude=polarConverter.getLatitude();    Longitude=polarConverter.getLongitude();    if ((Latitude < 0) && (Latitude > MIN_SOUTH_LAT))     Error_Code|=UPS_LAT_ERROR;    if ((Latitude >= 0) && (Latitude < MIN_NORTH_LAT))     Error_Code|=UPS_LAT_ERROR;  }  return Error_Code;}  }
class C{  private static long addDigest(long digest,String string){  return Crc64.generate(digest,string);}  }
class C{  public synchronized TradeOrderfill findOrderFillByExecId(String execId){  try {    EntityManager entityManager=EntityManagerHelper.getEntityManager();    entityManager.getTransaction().begin();    CriteriaBuilder builder=entityManager.getCriteriaBuilder();    CriteriaQuery<TradeOrderfill> query=builder.createQuery(TradeOrderfill.class);    Root<TradeOrderfill> from=query.from(TradeOrderfill.class);    query.select(from);    query.where(builder.equal(from.get("execId"),execId));    List<TradeOrderfill> items=entityManager.createQuery(query).getResultList();    entityManager.getTransaction().commit();    if (items.size() > 0) {      return items.get(0);    }    return null;  } catch (  Exception re) {    EntityManagerHelper.rollback();    throw re;  } finally {    EntityManagerHelper.close();  }}  }
class C{  public Builder keepAlive(boolean keepAlive){  this.keepAlive=keepAlive;  return this;}  }
class C{  public boolean isAssigned(){  return checkAssignmentType(ASSIGNMENT_TYPE_ASSIGNED);}  }
class C{  public static double min(double a,double b,double c){  return Math.min(Math.min(a,b),c);}  }
class C{  @Override public String toString(final int indent){  final String s=indent(indent);  final StringBuilder sb=new StringBuilder();  sb.append("\n").append(s).append(getClass().getSimpleName());  if (this instanceof IJoinNode) {    final IJoinNode joinNode=(IJoinNode)this;    if (joinNode.isOptional())     sb.append(" [optional]");    if (joinNode.isMinus())     sb.append(" [minus]");  }  if (this instanceof JoinGroupNode) {    final JoinGroupNode joinGroup=(JoinGroupNode)this;    if (joinGroup.getContext() != null) {      sb.append(" [context=" + joinGroup.getContext() + "]");    }    if (joinGroup.getProperty(JoinGroupNode.Annotations.OPTIMIZER) != null) {      sb.append(" [" + JoinGroupNode.Annotations.OPTIMIZER + "="+ joinGroup.getQueryOptimizer()+ "]");    }  }  if (this instanceof GraphPatternGroup) {    final GraphPatternGroup<?> t=(GraphPatternGroup<?>)this;    final IVariable<?>[] joinVars=t.getJoinVars();    if (joinVars != null)     sb.append(" [joinVars=" + Arrays.toString(joinVars) + "]");    final IVariable<?>[] projectInVars=t.getProjectInVars();    if (projectInVars != null)     sb.append(" [projectInVars=" + Arrays.toString(projectInVars) + "]");  }  sb.append(" {");  for (  IQueryNode n : this) {    if (n instanceof AssignmentNode) {      sb.append("\n");    }    sb.append(n.toString(indent + 1));    if (((IGroupMemberNode)n).getParent() != this) {      sb.append(" : ERROR : parent not [this]");      throw new RuntimeException("Parent not this: child=" + n + ", this="+ toShortString()+ ", but parent="+ ((IGroupMemberNode)n).getParent());    }  }  sb.append("\n").append(s).append("}");  if (this instanceof GraphPatternGroup) {    final IVariable<?>[] joinVars=((GraphPatternGroup<?>)this).getJoinVars();    if (joinVars != null && joinVars.length > 0) {      sb.append(" JOIN ON (");      boolean first=true;      for (      IVariable<?> var : joinVars) {        if (!first)         sb.append(",");        sb.append(var);        first=false;      }      sb.append(")");    }  }  final List<FilterNode> filters=getAttachedJoinFilters();  if (!filters.isEmpty()) {    for (    FilterNode filter : filters) {      sb.append(filter.toString(indent + 1));    }  }  if (getProperty(AST2BOpBase.Annotations.ESTIMATED_CARDINALITY) != null) {    sb.append(" AST2BOpBase.estimatedCardinality=");    sb.append(getProperty(AST2BOpBase.Annotations.ESTIMATED_CARDINALITY).toString());  }  if (getQueryHints() != null && !getQueryHints().isEmpty()) {    sb.append("\n");    sb.append(indent(indent));    sb.append(Annotations.QUERY_HINTS);    sb.append("=");    sb.append(getQueryHints().toString());  }  return sb.toString();}  }
class C{  public boolean loadChildren(@NotNull Node parent){  return loadChildren(parent,false);}  }
class C{  @Inline private static boolean testAndMark(ObjectReference object,byte value){  Word oldValue;  do {    oldValue=VM.objectModel.prepareAvailableBits(object);    byte markBit=(byte)(oldValue.toInt() & GC_MARK_BIT_MASK);    if (markBit == value)     return false;  } while (!VM.objectModel.attemptAvailableBits(object,oldValue,oldValue.xor(Word.fromIntZeroExtend(GC_MARK_BIT_MASK))));  return true;}  }
class C{  public String parseUserSelectedProjectName(Element element){  return element.getText();}  }
class C{  protected static double computeH(DoubleArray dist_i,double[] pij_row,double mbeta){  final int len=dist_i.size();  assert (pij_row.length == len);  double sumP=0.;  for (int j=0; j < len; j++) {    sumP+=(pij_row[j]=Math.exp(dist_i.get(j) * mbeta));  }  if (!(sumP > 0)) {    return Double.NEGATIVE_INFINITY;  }  final double s=1. / sumP;  double sum=0.;  for (int j=0; j < len; j++) {    sum+=dist_i.get(j) * (pij_row[j]*=s);  }  return Math.log(sumP) - mbeta * sum;}  }
class C{  public VMwareVirtualMachine addVirtualMachine(List<DynamicProperty> properties,ManagedObjectAccessor serviceUtil) throws Exception {  if (properties == null || properties.size() == 0) {    return null;  }  VMwareVirtualMachine result=new VMwareVirtualMachine();  for (  DynamicProperty dp : properties) {    String key=dp.getName();    if ("name".equals(key) && dp.getVal() != null) {      result.setName(dp.getVal().toString());    } else     if ("summary.config.memorySizeMB".equals(key) && dp.getVal() != null) {      result.setMemorySizeMB(Integer.parseInt(dp.getVal().toString()));    } else     if ("summary.config.numCpu".equals(key) && dp.getVal() != null) {      result.setNumCpu(Integer.parseInt(dp.getVal().toString()));    } else     if ("runtime.host".equals(key)) {      ManagedObjectReference mor=(ManagedObjectReference)dp.getVal();      Object cacheKey=mor == null ? null : mor.getValue();      if (!hostCache.containsKey(cacheKey)) {        Object name=serviceUtil.getDynamicProperty(mor,"name");        if (name != null) {          hostCache.put(cacheKey,name.toString());        }      }      result.setHostName(hostCache.get(cacheKey));    }  }  if (result.getHostName() != null) {    vms.add(result);  } else {    logger.warn("Cannot determine host system for VM '" + result.getName() + "'. Check whether configured VMware API user host rights to access the host system.");  }  return result;}  }
class C{  public static Complex sqrt(Complex c){  return ComplexFromPolar(Math.sqrt(abs(c)),angle(c) / 2.0);}  }
class C{  public static String logicString(ArrayList<Integer> logic){  String l=logic.toString();  l=l.replaceAll("\\[","");  l=l.replaceAll("\\]","");  l=l.replaceAll(",","");  l=l.replaceAll(" ","");  l=l.replaceAll("2","-");  return l;}  }
class C{  public boolean isKnownAsNormalBranchInstruction(BytecodeInstruction ins){  return registeredNormalBranches.containsKey(ins);}  }
class C{  public boolean isAssignableFrom(Type from){  if (from == null) {    return false;  }  if (type.equals(from)) {    return true;  }  if (type instanceof Class) {    return rawType.isAssignableFrom(getRawType(from));  } else   if (type instanceof ParameterizedType) {    return isAssignableFrom(from,(ParameterizedType)type,new HashMap<String,Type>());  } else   if (type instanceof GenericArrayType) {    return rawType.isAssignableFrom(getRawType(from)) && isAssignableFrom(from,(GenericArrayType)type);  } else {    throw buildUnexpectedTypeError(type,Class.class,ParameterizedType.class,GenericArrayType.class);  }}  }
class C{  public void add(Node node){  availableNodes.add(node);}  }
class C{  public boolean hasVerticalSpanning(){  return verticalSpanningExists;}  }
class C{  public static Method findWriteMethod(Object o,String name){  Class<?>[] params;  Method result;  result=null;  params=new Class[3];  params[0]=Element.class;  params[1]=Object.class;  params[2]=String.class;  try {    result=o.getClass().getMethod(name,params);  } catch (  Exception e) {    result=null;  }  return result;}  }
class C{  public void trimToSize(){  int newCapacity=nextPrime((int)(1 + 1.2 * size()));  if (table.length > newCapacity) {    rehash(newCapacity);  }}  }
class C{  @Override public int hashCode(){  return jdkType.hashCode();}  }
class C{  @ApiMethod(name="echo") public Message echo(Message message){  return message;}  }
class C{  private void addToken(int start,int end,int tokenType){  int so=start + offsetShift;  addToken(zzBuffer,start,end,tokenType,so);}  }
class C{  public void inputSentence(TextInput text,Network network){  Vertex input=null;  boolean newConversation=text.getText() == null;  if (newConversation) {    input=network.createInstance(Primitive.INPUT);    input.addRelationship(Primitive.SENSE,getPrimitive());    input.addRelationship(Primitive.INSTANTIATION,Primitive.CHAT);    input.addRelationship(Primitive.INPUT,Primitive.NULL);  } else {    input=createInputSentence(text.getText().trim(),network);    input.addRelationship(Primitive.INSTANTIATION,Primitive.CHAT);  }  if (text.isCorrection()) {    input.addRelationship(Primitive.ASSOCIATED,Primitive.CORRECTION);  }  if (text.isOffended()) {    input.addRelationship(Primitive.ASSOCIATED,Primitive.OFFENDED);  }  input.addRelationship(Primitive.TARGET,Primitive.SELF);  Vertex speaker=getUser(network);  if (speaker == null) {    speaker=network.createSpeaker(DEFAULT_SPEAKER);    speaker.addRelationship(Primitive.ASSOCIATED,Primitive.ANONYMOUS);    if (this.info != null && !this.info.isEmpty()) {      String name=new TextStream(this.info).nextWord();      speaker.addRelationship(Primitive.NAME,network.createName(name));    }    setUser(speaker);  }  Language language=this.bot.mind().getThought(Language.class);  boolean applyEmote=language.shouldLearn(input,speaker) || (text.isCorrection() && language.shouldCorrect(input,speaker));  input.addRelationship(Primitive.SPEAKER,speaker);  speaker.addRelationship(Primitive.INPUT,input);  if (this.emotionalState != null && this.emotionalState != EmotionalState.NONE) {    this.emotionalState.apply(input);    if (applyEmote) {      this.emotionalState.apply(input.getRelationship(Primitive.INPUT));    }  }  if (this.action != null) {    input.addRelationship(Primitive.ACTION,new Primitive(this.action));    if (applyEmote) {      input.getRelationship(Primitive.INPUT).addRelationship(Primitive.ACTION,new Primitive(this.action));    }  }  Vertex conversation=getConversation(network);  if (newConversation || (conversation == null)) {    conversation=network.createInstance(Primitive.CONVERSATION);    conversation.addRelationship(Primitive.TYPE,Primitive.CHAT);    setConversation(conversation);    conversation.addRelationship(Primitive.SPEAKER,speaker);    conversation.addRelationship(Primitive.SPEAKER,Primitive.SELF);    if (this.info != null && !this.info.isEmpty()) {      Vertex infoInput=createInputSentence("Info: " + this.info.trim(),network);      infoInput.addRelationship(Primitive.INSTANTIATION,Primitive.CHAT);      Language.addToConversation(infoInput,conversation);    }  }  if (!newConversation) {    Language.addToConversation(input,conversation);  } else {    input.addRelationship(Primitive.CONVERSATION,conversation);  }  network.save();  this.bot.memory().addActiveMemory(input);}  }
class C{  public static boolean isDinersClub(String cc){  int firstdig=Integer.parseInt(cc.substring(0,1));  int seconddig=Integer.parseInt(cc.substring(1,2));  if ((cc.length() == 14) && (firstdig == 3) && ((seconddig == 0) || (seconddig == 6) || (seconddig == 8)))   return isCreditCard(cc);  return false;}  }
class C{  public void deleteGeolocSharing(String sharingId) throws RemoteException {  if (TextUtils.isEmpty(sharingId)) {    throw new ServerApiIllegalArgumentException("sharingId must not be null or empty!");  }  mRichcallService.tryToDeleteGeolocSharing(sharingId);}  }
class C{  public void reload(){  this.kek=null;  this.mwk=null;  this.mwkIndex=null;}  }
class C{  @Override @CallSuper public void onSupportActionModeStarted(ActionMode mode){}  }
class C{  public void addZombie(Player player){  humans.remove(player.getUniqueId());  zombies.add(player.getUniqueId());  player.setHealth(20D);  player.setFireTicks(0);  for (  PotionEffect potionEffect : player.getActivePotionEffects()) {    player.removePotionEffect(potionEffect.getType());  }}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MPrintColor[");  sb.append("ID=").append(get_ID()).append(",Name=").append(getName()).append(",RGB=").append(getCode()).append(",").append(getColor()).append("]");  return sb.toString();}  }
class C{  public boolean hasMixedAccessorPair(){  boolean hasOwnedGetter=!members(OWNED,GETTER).isEmpty();  boolean hasOwnedSetter=!members(OWNED,SETTER).isEmpty();  boolean hasInheritedGetter=!members(INHERITED,GETTER).isEmpty();  boolean hasInheritedSetter=!members(INHERITED,SETTER).isEmpty();  return (!hasOwnedGetter && hasInheritedGetter && hasOwnedSetter) || (hasOwnedGetter && hasInheritedSetter && !hasOwnedSetter);}  }
class C{  public void testApp(){  assertTrue(true);}  }
class C{  public int order(){  return order;}  }
class C{  public SnackbarBuilder(View view){  setup(view.getContext());  parentView=view;}  }
class C{  public static WorkspaceImpl createWorkspace(String namespace,String envName,String defaultEnvName,Integer... machineRamsMb) throws Exception {  return WorkspaceImpl.builder().setConfig(createConfig(envName,defaultEnvName,machineRamsMb)).setAccount(new AccountImpl("id",namespace,"test")).build();}  }
class C{  private static boolean isSorted(Comparable[] a){  return isSorted(a,0,a.length - 1);}  }
class C{  @Transactional public long createPreApprovedVoucherFromBill(final int billId,final String voucherNumber,final Date voucherDate) throws ApplicationRuntimeException, ValidationException {  String voucherStatus=null;  long vh=-1;  try {    final List vStatusList=appConfigValuesService.getConfigValuesByModuleAndKey("EGF","PREAPPROVEDVOUCHERSTATUS");    if (!vStatusList.isEmpty() && vStatusList.size() == 1) {      final AppConfigValues appVal=(AppConfigValues)vStatusList.get(0);      voucherStatus=appVal.getValue();    } else     throw new ApplicationRuntimeException("PREAPPROVEDVOUCHERSTATUS" + MISSINGMSG);    vh=createVoucher.createVoucherFromBill(billId,voucherStatus,voucherNumber,voucherDate);  } catch (  final ValidationException e) {    LOGGER.error(e.getErrors());    throw new ValidationException(e.getErrors());  }catch (  final Exception e) {    LOGGER.error(e.getMessage());    throw new ApplicationRuntimeException(e.getMessage());  }  return vh;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case MappingPackage.FUNCTION_BLOCK_SOURCE__MODEL:    if (resolve)     return getModel();  return basicGetModel();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private void showOverlay(){  showOverlay(false);}  }
class C{  @SuppressWarnings("deprecation") private static URL computeCompositeUpdateSiteURL(String baseUrl,String action,IProject project,String apiName,String apiPlatform,String extra) throws MalformedURLException {  String compositeArtifactsXMLUrlWithQuery=baseUrl;  if (!compositeArtifactsXMLUrlWithQuery.endsWith("/")) {    compositeArtifactsXMLUrlWithQuery+='/';  }  String core="core/";  int coreIndex=compositeArtifactsXMLUrlWithQuery.indexOf(core);  if (coreIndex >= 0) {    compositeArtifactsXMLUrlWithQuery=compositeArtifactsXMLUrlWithQuery.substring(0,coreIndex).concat(compositeArtifactsXMLUrlWithQuery.substring(coreIndex + core.length()));  }  compositeArtifactsXMLUrlWithQuery+="compositeArtifacts.xml";  UpdateQueryBuilder updateQueryBuilder=new UpdateQueryBuilder();  updateQueryBuilder.setInstallationId(GdtPlugin.getInstallationId());  updateQueryBuilder.setEclipseVersion(GdtPlugin.getEclipseVersion());  updateQueryBuilder.setFeatureVersion(new VersionedIdentifier(GdtExtPlugin.FEATURE_ID,GdtExtPlugin.FEATURE_VERSION.toString()).toString());  SdkUtils.MaxSdkVersionComputer gwtMaxVersionComputer=new GwtMaxSdkVersionComputer();  Map<String,String> maxSdkVersions=new HashMap<String,String>();  IJavaProject[] projects=GdtExtPlugin.getJavaProjects();  String maxGWTSdkVersion=gwtMaxVersionComputer.computeMaxSdkVersion(projects);  if (maxGWTSdkVersion != null) {    maxSdkVersions.put("gwtv",maxGWTSdkVersion);  }  updateQueryBuilder.setMaxSdkVersions(maxSdkVersions);  updateQueryBuilder.setProductId(Platform.getProduct().getId());  if (action != null) {    updateQueryBuilder.setAction(action);  }  if (apiName != null) {    updateQueryBuilder.setApiNamePlatform(apiName,apiPlatform);  }  if (project != null) {    updateQueryBuilder.retrieveFacetsEnabled(project);  }  updateQueryBuilder.retrieveExtensionContributions(project);  String queryString=updateQueryBuilder.toString();  if (queryString != null && queryString.length() > 0) {    compositeArtifactsXMLUrlWithQuery+='?' + queryString;  }  if (extra != null && !extra.isEmpty()) {    compositeArtifactsXMLUrlWithQuery+=extra;  }  return new URL(compositeArtifactsXMLUrlWithQuery);}  }
class C{  private boolean moveWaitToRoad(final double now){  boolean movedWaitToRoad=false;  while (this.firstLaneQueue.isAcceptingFromWait()) {    QVehicle veh=this.getWaitingList().poll();    if (veh == null) {      return movedWaitToRoad;    }    movedWaitToRoad=true;    context.getEventsManager().processEvent(new VehicleEntersTrafficEvent(now,veh.getDriver().getId(),this.getLink().getId(),veh.getId(),veh.getDriver().getMode(),1.0));    if (this.getTransitQLink().addTransitToStopQueue(now,veh,this.getLink().getId())) {      continue;    }    if (veh.getDriver().isWantingToArriveOnCurrentLink()) {      this.firstLaneQueue.addTransitSlightlyUpstreamOfStop(veh);      continue;    }    this.firstLaneQueue.addFromWait(veh);  }  return movedWaitToRoad;}  }
class C{  public int countTokens(){  int count=0;  boolean inToken=false;  for (int i=position, length=string.length(); i < length; i++) {    if (delimiters.indexOf(string.charAt(i),0) >= 0) {      if (returnDelimiters)       count++;      if (inToken) {        count++;        inToken=false;      }    } else {      inToken=true;    }  }  if (inToken)   count++;  return count;}  }
class C{  protected static File createRelativePath(File absolute) throws Exception {  File userDir=new File(System.getProperty("user.dir"));  String userPath=userDir.getAbsolutePath() + File.separator;  String targetPath=(new File(absolute.getParent())).getPath() + File.separator;  String fileName=absolute.getName();  StringBuffer relativePath=new StringBuffer();  int subdir=targetPath.indexOf(userPath);  if (subdir == 0) {    if (userPath.length() == targetPath.length()) {      relativePath.append(fileName);    } else {      int ll=userPath.length();      relativePath.append(targetPath.substring(ll));      relativePath.append(fileName);    }  } else {    int sepCount=0;    String temp=new String(userPath);    while (temp.indexOf(File.separator) != -1) {      int ind=temp.indexOf(File.separator);      sepCount++;      temp=temp.substring(ind + 1,temp.length());    }    String targetTemp=new String(targetPath);    String userTemp=new String(userPath);    int tcount=0;    while (targetTemp.indexOf(File.separator) != -1) {      int ind=targetTemp.indexOf(File.separator);      int ind2=userTemp.indexOf(File.separator);      String tpart=targetTemp.substring(0,ind + 1);      String upart=userTemp.substring(0,ind2 + 1);      if (tpart.compareTo(upart) != 0) {        if (tcount == 0) {          tcount=-1;        }        break;      }      tcount++;      targetTemp=targetTemp.substring(ind + 1,targetTemp.length());      userTemp=userTemp.substring(ind2 + 1,userTemp.length());    }    if (tcount == -1) {      throw new Exception("Can't construct a path to file relative to user " + "dir.");    }    if (targetTemp.indexOf(File.separator) == -1) {      targetTemp="";    }    for (int i=0; i < sepCount - tcount; i++) {      relativePath.append(".." + File.separator);    }    relativePath.append(targetTemp + fileName);  }  return new File(relativePath.toString());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:32.598 -0500",hash_original_method="FDFE9380996AC8B536679A9DC84D64BE",hash_generated_method="98297AC5A418129FD6D317BC6BFE856D") public void clearPassword(){  if (this.authority != null) {    UserInfo userInfo=authority.getUserInfo();    if (userInfo != null)     userInfo.clearPassword();  }}  }
class C{  protected RestoreSnapshotTask(final Protos.TaskInfo info){  super(info);}  }
class C{  public UpdatableSketch<U,S> build(){  return new UpdatableSketch<U,S>(nomEntries_,resizeFactor_.lg(),samplingProbability_,summaryFactory_);}  }
class C{  public void addTerms(String queryString,String fieldName,float minSimilarity,int prefixLength){  int maxEdits=(int)minSimilarity;  if (maxEdits != minSimilarity || maxEdits < 0 || maxEdits > LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE) {    throw new IllegalArgumentException("minSimilarity must integer value between 0 and " + LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE + ", inclusive; got "+ minSimilarity);  }  fieldVals.add(new FieldVals(fieldName,maxEdits,prefixLength,queryString));}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"MOVT");  translateAll(environment,instruction,"MOVT",instructions);}  }
class C{  public MalformedChallengeException(String message,Throwable cause){  super(message,cause);}  }
class C{  private void displayComparisonView(ComparisonFailure cf,Description desc){  IXpectURIProvider uriProfider=XpectRunner.INSTANCE.getUriProvider();  IFile fileTest=null;  if (uriProfider instanceof N4IDEXpectTestURIProvider) {    N4IDEXpectTestURIProvider fileCollector=(N4IDEXpectTestURIProvider)uriProfider;    fileTest=ResourcesPlugin.getWorkspace().getRoot().getFileForLocation(new Path(fileCollector.findRawLocation(desc)));  }  if (fileTest != null && fileTest.isAccessible()) {    N4IDEXpectCompareEditorInput inp=new N4IDEXpectCompareEditorInput(fileTest,cf);    CompareUI.openCompareEditor(inp);  } else {    throw new RuntimeException("paths in descriptions changed!");  }}  }
class C{  public Category(String category){  this();  Matcher m=categoryPattern.matcher(category);  if (!m.matches()) {    throw new IllegalArgumentException("Invalid category: " + category);  }  if (m.group(2) != null) {    setScheme(m.group(2));  }  setTerm(m.group(3));}  }
class C{  @Override public void start(){  isPaused=false;}  }
class C{  private void serviceInfoFromProperties(Provider.Service s){  super.remove(s.type + "." + s.algorithm);  if (s.aliases != null) {    for (Iterator<String> i=s.aliases.iterator(); i.hasNext(); ) {      super.remove("Alg.Alias." + s.type + "."+ i.next());    }  }  if (s.attributes != null) {    for (    Map.Entry<String,String> entry : s.attributes.entrySet()) {      super.remove(s.type + "." + s.algorithm+ " "+ entry.getKey());    }  }  if (providerNumber != -1) {    Services.setNeedRefresh();  }}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  private void init(){  setTitle("Neuron Dialog");  JScrollPane scroller=new JScrollPane(neuronPropertiesPanel);  scroller.setBorder(null);  setContentPane(scroller);  this.addButton(helpButton);}  }
class C{  public static int cardinality(long[] v){  int sum=0;  for (int i=0; i < v.length; i++) {    sum+=Long.bitCount(v[i]);  }  return sum;}  }
class C{  public NaryJoin(List<TupleExpr> args){  super(args);}  }
class C{  public void init(ActionListener doneAction,HashMap<String,NamedIcon> iconMap){  super.init(doneAction,iconMap);  add(initTablePanel(_model,_editor),0);  _buttonPosition=1;}  }
class C{  @Override public int hashCode(){  return (int)(milliseconds >>> 32) ^ (int)milliseconds;}  }
class C{  public void writeText(char text[],int off,int len) throws IOException {  if (text == null) {    throw new NullPointerException("Argument Error: One or more parameters are null.");  }  if (off < 0 || off > text.length || len < 0 || len > text.length) {    throw new IndexOutOfBoundsException();  }  closeStartIfNecessary();  if (dontEscape) {    writer.write(text,off,len);  } else {    Util.writeText(writer,buffer,text,off,len);  }}  }
class C{  public void testSimpleStringParsing() throws Exception {  String testString="INSERT INTO foo VALUES(1)";  MySQLStatementTranslator translator=new MySQLStatementTranslator("UTF-8");  byte[] testBytes=testString.getBytes("UTF-8");  String testString2=translator.toJavaString(testBytes,0,testBytes.length);  assertEquals("Ordinary strings are unaltered",testString,testString2);}  }
class C{  public DailyTimeIntervalScheduleBuilder onDaysOfTheWeek(Set<Integer> onDaysOfWeek){  if (onDaysOfWeek == null || onDaysOfWeek.size() == 0)   throw new IllegalArgumentException("Days of week must be an non-empty set.");  for (  Integer day : onDaysOfWeek)   if (!ALL_DAYS_OF_THE_WEEK.contains(day))   throw new IllegalArgumentException("Invalid value for day of week: " + day);  this.daysOfWeek=onDaysOfWeek;  return this;}  }
class C{  public R addParams(String key,String customFileName,File file){  addParams(key,file,null,customFileName);  return (R)this;}  }
class C{  public boolean isDouble(String key){  Object val=get(key);  return val instanceof Double;}  }
class C{  public boolean hasValue(){  return getValue() != null;}  }
class C{  @Override public void mark(int limit){}  }
class C{  public boolean isUnderlined(){  return modifiers.contains(SGR.UNDERLINE);}  }
class C{  public StackOfIntegers(int capacity){  elements=new int[capacity];}  }
class C{  private void addIncrementalUtterance(String rawText){  boolean followPrevious=rawText.startsWith("/");  boolean incomplete=rawText.endsWith("/");  rawText=rawText.replaceAll("/","").trim();  Map<String,Double> table=StringUtils.getTableFromInput(rawText);  new Thread(null).start();}  }
class C{  protected void refreshCapacity(double newCap){  maxCap=Math.max(maxCap,newCap);  minCap=Math.min(minCap,newCap);  updateCapacityLabels();}  }
class C{  public static void main(String[] args) throws Exception {  new SetHypervolume().start(args);}  }
class C{  public final void removeAllHelperTextColors(){  helperTextColors.clear();}  }
class C{  @Override public void mouseMoved(MouseEvent e){  Graphics2D g2=(Graphics2D)getGraphics();  if (this.horizontalAxisTrace) {    drawHorizontalAxisTrace(g2,e.getX());  }  if (this.verticalAxisTrace) {    drawVerticalAxisTrace(g2,e.getY());  }  g2.dispose();  Object[] listeners=this.chartMouseListeners.getListeners(ChartMouseListener.class);  if (listeners.length == 0) {    return;  }  Insets insets=getInsets();  int x=(int)((e.getX() - insets.left) / this.scaleX);  int y=(int)((e.getY() - insets.top) / this.scaleY);  ChartEntity entity=null;  if (this.info != null) {    EntityCollection entities=this.info.getEntityCollection();    if (entities != null) {      entity=entities.getEntity(x,y);    }  }  if (this.chart != null) {    ChartMouseEvent event=new ChartMouseEvent(getChart(),e,entity);    for (int i=listeners.length - 1; i >= 0; i-=1) {      ((ChartMouseListener)listeners[i]).chartMouseMoved(event);    }  }}  }
class C{  @Override public String toString(){  return name;}  }
class C{  public ERTrees(int forrestSize){  this.forrestSize=forrestSize;}  }
class C{  public static Map<String,Object> deleteContactMech(DispatchContext ctx,Map<String,? extends Object> context){  Map<String,Object> result=FastMap.newInstance();  Delegator delegator=ctx.getDelegator();  Security security=ctx.getSecurity();  GenericValue userLogin=(GenericValue)context.get("userLogin");  Locale locale=(Locale)context.get("locale");  String partyId=ServiceUtil.getPartyIdCheckSecurity(userLogin,security,context,result,"PARTYMGR","_PCM_DELETE");  if (result.size() > 0)   return result;  String contactMechId=(String)context.get("contactMechId");  GenericValue partyContactMech=null;  try {    partyContactMech=EntityQuery.use(delegator).from("PartyContactMech").where("partyId",partyId,"contactMechId",contactMechId).orderBy("fromDate").filterByDate().queryFirst();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_read",UtilMisc.toMap("errMessage",e.getMessage()),locale));  }  if (partyContactMech == null) {    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_no_contact_found",locale));  }  partyContactMech.set("thruDate",UtilDateTime.nowTimestamp());  try {    partyContactMech.store();  } catch (  GenericEntityException e) {    Debug.logWarning(e.toString(),module);    return ServiceUtil.returnError(UtilProperties.getMessage(resourceError,"contactmechservices.could_not_delete_contact_info_write",locale));  }  result.put(ModelService.RESPONSE_MESSAGE,ModelService.RESPOND_SUCCESS);  return result;}  }
class C{  @Override public boolean supportsStoredProcedures(){  debugCodeCall("supportsStoredProcedures");  return false;}  }
class C{  public void updateOtherValue(String type,AnimatableValue val){  if (type.equals("motion")) {    if (motionTransform == null) {      motionTransform=new AffineTransform();    }    if (val == null) {      motionTransform.setToIdentity();    } else {      AnimatableMotionPointValue p=(AnimatableMotionPointValue)val;      motionTransform.setToTranslation(p.getX(),p.getY());      motionTransform.rotate(p.getAngle());    }    SVGOMDocument d=(SVGOMDocument)ownerDocument;    d.getAnimatedAttributeListener().otherAnimationChanged(this,type);  } else {    super.updateOtherValue(type,val);  }}  }
class C{  public boolean isOver(){  return ((flags & BUTTON_OVER) != 0);}  }
class C{  private AbsenceWindowProcessor nextProcessor(long currTime){  AbsenceWindow window=windowGenerator.nextWindow(currTime);  return new AbsenceWindowProcessor(expectedAttrs,window);}  }
class C{  public void cancelAll(){  downloadRequestQueue.cancelAll();}  }
class C{  public static void main(String[] args){  runFileSaver(new CSVSaver(),args);}  }
class C{  public static void addSelectionHandleTo(final PNode node){  if (node == null) {    throw new IllegalArgumentException("node must not be null");  }  if (hasSelectionHandle(node)) {    return;  }  PNodeLocator nodeLocator=new PNodeLocator(node);  if (node instanceof InteractionBox) {    SelectionHandle selectionHandle=new SelectionHandle(nodeLocator,0);    selectionHandle.setStroke(new BasicStroke(2,BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));  } else {    SelectionHandle selectionHandle=new SelectionHandle(nodeLocator);  }}  }
class C{  public static Intent createOpenBrowserIntent(String url){  if (!url.contains("://")) {    url="http://" + url;  }  return new Intent(Intent.ACTION_VIEW,Uri.parse(url));}  }
class C{  @Override public int read() throws IOException {  return Streams.readSingleByte(this);}  }
class C{  @Override public int deleteCharacters(Uri uri,String selection,String[] selectionArgs){  selection=addSelectionArgs(selection,selectionArgs," OR ");  return mOpenHelper.getWritableDatabase().delete(CharacterContract.CharacterEntry.TABLE_NAME,selection,selectionArgs);}  }
class C{  public void testUnknownProjectSelected(){  CloudAttachDialog dialog=initDialog();  mockLoggedInUser();  selectInProgressProject();  ValidationInfo error=dialog.doValidate();  assertNull(error);  assertFalse(targetSelector.isEnabled());  assertNull(targetSelector.getSelectedItem());  assertFalse(dialog.isOKActionEnabled());  dialog.close(0);}  }
class C{  public JmriJFrame(){  this(true,true);}  }
class C{  public DefaultRequest itemPrice(Double value){  setDouble(ITEM_PRICE,value);  return this;}  }
class C{  public AttributeKey(String key,Class<T> clazz,@Nullable T defaultValue,boolean isNullValueAllowed,@Nullable ResourceBundleUtil labels){  this.key=key;  this.clazz=clazz;  this.defaultValue=defaultValue;  this.isNullValueAllowed=isNullValueAllowed;  this.labels=(labels == null) ? ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels") : labels;}  }
class C{  public boolean isLockHeading(){  return this.lockHeading;}  }
class C{  public RotatableDrawable(Drawable[] layers){  super(layers);}  }
class C{  public static CLabel createWrapCLabel(Composite parent,String text,Image image,int hspan,int wrapwidth){  CLabel label=new CLabel(parent,SWT.NONE | SWT.WRAP);  label.setFont(parent.getFont());  if (text != null) {    label.setText(text);  }  if (image != null) {    label.setImage(image);  }  GridData gd=new GridData(GridData.FILL_HORIZONTAL);  gd.horizontalSpan=hspan;  gd.widthHint=wrapwidth;  label.setLayoutData(gd);  return label;}  }
class C{  public void removeMeta(Index index,Session session){  if (SysProperties.CHECK) {    if (!index.getTable().isTemporary()) {synchronized (database) {synchronized (this) {          database.verifyMetaLocked(session);        }      }    }  }synchronized (this) {    if (!recoveryRunning) {      removeMetaIndex(index,session);      metaObjects.remove(index.getId());    }  }}  }
class C{  public static String defaultTimeString(int value,int digits){  String valueAsString=String.valueOf(value);  String result="";  if (valueAsString.length() > digits) {    for (int i=0; i < digits; i++) {      result+=valueAsString.charAt(i);    }  } else   if (valueAsString.length() < digits) {    result=valueAsString;    while (result.length() < digits) {      result="0" + result;    }  } else {    result=valueAsString;  }  return result;}  }
class C{  public static String htmlentities(final String str){  if (str == null) {    return "";  }  if (htmlentities_map.isEmpty()) {    initializeEntitiesTables();  }  final StringBuilder buf=new StringBuilder();  for (int i=0; i < str.length(); ++i) {    final char ch=str.charAt(i);    final String entity=htmlentities_map.get(new Integer(ch));    if (entity == null) {      if (ch > 128) {        buf.append("&#" + (int)ch + ";");      } else {        buf.append(ch);      }    } else {      buf.append(entity);    }  }  return buf.toString();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null) {    myHost.updateProgress(progressLabel,progress);  } else {    System.out.println(progressLabel + " " + progress+ "%");  }}  }
class C{  private EsriLayer pickEsriLayer(){  Layer[] layers=_layerHandler.getLayers();  Vector<String> vector=new Vector<String>();  for (int n=0; n <= layers.length - 1; n++) {    if (layers[n] instanceof EsriLayer) {      String name=layers[n].getName();      vector.add(name);    }  }  Object[] objects=vector.toArray();  if (objects.length > 0) {    String selected=(String)JOptionPane.showInputDialog(null,"Choose one","Input",JOptionPane.INFORMATION_MESSAGE,null,objects,objects[0]);    for (int n=0; n <= layers.length - 1; n++) {      String name=layers[n].getName();      if (name.equalsIgnoreCase(selected)) {        return (EsriLayer)layers[n];      }    }  }  return null;}  }
class C{  public static JCas runTest(String aDocumentId,AnalysisEngine aEngine,String aLanguage,String aDocument) throws UIMAException {  if (offline) {    System.setProperty(ResourceObjectProviderBase.PROP_REPO_OFFLINE,"true");  }  offline=true;  JCas jcas=aEngine.newJCas();  if (aDocumentId != null) {    DocumentMetaData meta=DocumentMetaData.create(jcas);    meta.setDocumentId(aDocumentId);  }  jcas.setDocumentLanguage(aLanguage);  TokenBuilder<Token,Sentence> tb=new TokenBuilder<Token,Sentence>(Token.class,Sentence.class);  tb.buildTokens(jcas,aDocument);  aEngine.process(jcas);  AssertAnnotations.assertValid(jcas);  return jcas;}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_A:    return stateVector[0] == State.main_region_A;case main_region_B:  return stateVector[0] == State.main_region_B;default :return false;}}  }
class C{  private void validateSortSize(){  String sortSizeStr=carbonProperties.getProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);  try {    int sortSize=Integer.parseInt(sortSizeStr);    if (sortSize < CarbonCommonConstants.SORT_SIZE_MIN_VAL) {      LOGGER.info("The batch size value \"" + sortSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);      carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);    }  } catch (  NumberFormatException e) {    LOGGER.info("The batch size value \"" + sortSizeStr + "\" is invalid. Using the default value \""+ CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);    carbonProperties.setProperty(CarbonCommonConstants.SORT_SIZE,CarbonCommonConstants.SORT_SIZE_DEFAULT_VAL);  }}  }
class C{  @Override public int hashCode(){  return super.hashCode() + BeansUtils.getHashCode(indexedPropertyType) + BeansUtils.getHashCode(indexedGetter)+ BeansUtils.getHashCode(indexedSetter);}  }
class C{  @Override public SelectedGroup<T> useDefaultGroup(){  return new SelectedGroup<>(defaults);}  }
class C{  public DividerBuilder with(Drawable drawable,Direction direction){  sublayers.put(direction,new Sublayer(drawable));  return this;}  }
class C{  public static CCEaseRateAction action(CCIntervalAction action,float rate){  return new CCEaseRateAction(action,rate);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:43.651 -0500",hash_original_method="9E90C2E17AAFB2A4F084659253144E64",hash_generated_method="6CB5DB174862C08791AD8619EC651F9B") private void readAccountInfoLocked(){  int highestAuthorityId=-1;  FileInputStream fis=null;  try {    fis=mAccountInfoFile.openRead();    if (DEBUG_FILE)     Log.v(TAG,"Reading " + mAccountInfoFile.getBaseFile());    XmlPullParser parser=Xml.newPullParser();    parser.setInput(fis,null);    int eventType=parser.getEventType();    while (eventType != XmlPullParser.START_TAG) {      eventType=parser.next();    }    String tagName=parser.getName();    if ("accounts".equals(tagName)) {      String listen=parser.getAttributeValue(null,"listen-for-tickles");      String versionString=parser.getAttributeValue(null,"version");      int version;      try {        version=(versionString == null) ? 0 : Integer.parseInt(versionString);      } catch (      NumberFormatException e) {        version=0;      }      String nextIdString=parser.getAttributeValue(null,"nextAuthorityId");      try {        int id=(nextIdString == null) ? 0 : Integer.parseInt(nextIdString);        mNextAuthorityId=Math.max(mNextAuthorityId,id);      } catch (      NumberFormatException e) {      }      mMasterSyncAutomatically=listen == null || Boolean.parseBoolean(listen);      eventType=parser.next();      AuthorityInfo authority=null;      Pair<Bundle,Long> periodicSync=null;      do {        if (eventType == XmlPullParser.START_TAG) {          tagName=parser.getName();          if (parser.getDepth() == 2) {            if ("authority".equals(tagName)) {              authority=parseAuthority(parser,version);              periodicSync=null;              if (authority.ident > highestAuthorityId) {                highestAuthorityId=authority.ident;              }            }          } else           if (parser.getDepth() == 3) {            if ("periodicSync".equals(tagName) && authority != null) {              periodicSync=parsePeriodicSync(parser,authority);            }          } else           if (parser.getDepth() == 4 && periodicSync != null) {            if ("extra".equals(tagName)) {              parseExtra(parser,periodicSync);            }          }        }        eventType=parser.next();      } while (eventType != XmlPullParser.END_DOCUMENT);    }  } catch (  XmlPullParserException e) {    Log.w(TAG,"Error reading accounts",e);    return;  }catch (  java.io.IOException e) {    if (fis == null)     Log.i(TAG,"No initial accounts"); else     Log.w(TAG,"Error reading accounts",e);    return;  } finally {    mNextAuthorityId=Math.max(highestAuthorityId + 1,mNextAuthorityId);    if (fis != null) {      try {        fis.close();      } catch (      java.io.IOException e1) {      }    }  }  maybeMigrateSettingsForRenamedAuthorities();}  }
class C{  public void process(String folder){  LOG.info("Calculating the averages for each station...");  for (  Id<Link> id : countMap.keySet()) {    List<Integer[]> list=countMap.get(id);    Double[] avg=new Double[17];    for (int i=0; i < 17; i++) {      double sum=0.0;      for (      Integer[] ia : list) {        sum+=ia[i];      }      avg[i]=sum / (list.size());    }    avgCountMap.put(id,avg);  }  LOG.info("Done calculating averages.");  LOG.info("Aggregate counts to toll classes.");  for (  Id<Link> id : avgCountMap.keySet()) {    Double[] classCounts={0.0,0.0,0.0,0.0};    Double[] ia=avgCountMap.get(id);    for (    int i : setLight) {      classCounts[0]+=ia[i - 1];    }    for (    int i : setShort) {      classCounts[1]+=ia[i - 1];    }    for (    int i : setMedium) {      classCounts[2]+=ia[i - 1];    }    for (    int i : setLong) {      classCounts[3]+=ia[i - 1];    }    classCountMap.put(id,classCounts);  }  LOG.info("Done aggregating counts.");  LOG.info("Writing validation data to file...");  BufferedWriter bw=IOUtils.getBufferedWriter(folder + "aaa.csv");  try {    for (    Id<Link> id : countMap.keySet()) {      List<Integer[]> list=countMap.get(id);      String[] sa=id.toString().split("_");      for (      Integer[] ia : list) {        bw.write(String.format("%s,%s,%s,",sa[0],sa[1],sa[2]));        for (int i=0; i < ia.length - 1; i++) {          bw.write(String.format("%d,",ia[i]));        }        bw.write(String.format("%d\n",ia[ia.length - 1]));      }    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + folder);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + folder);    }  }  BufferedWriter bw2=IOUtils.getBufferedWriter(folder + "bbb.csv");  try {    for (    Id<Link> id : avgCountMap.keySet()) {      Double[] da=avgCountMap.get(id);      String[] sa=id.toString().split("_");      bw2.write(String.format("%s,%s,%s,",sa[0],sa[1],sa[2]));      for (int i=0; i < da.length - 1; i++) {        bw2.write(String.format("%.2f,",da[i]));      }      bw2.write(String.format("%.2f\n",da[da.length - 1]));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + folder);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + folder);    }  }  BufferedWriter bw3=IOUtils.getBufferedWriter(folder + "ccc.csv");  try {    for (    Id<Link> id : classCountMap.keySet()) {      Double[] da=classCountMap.get(id);      String[] sa=id.toString().split("_");      bw3.write(String.format("%s,%s,%s,",sa[0],sa[1],sa[2]));      for (int i=0; i < da.length - 1; i++) {        bw3.write(String.format("%.2f,",da[i]));      }      bw3.write(String.format("%.2f\n",da[da.length - 1]));    }  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + folder);  } finally {    try {      bw.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + folder);    }  }  LOG.info("Done writing validation data.");  Map<Id<Link>,List<String>> laneList=new TreeMap<>();  for (  Id<Link> id : classCountMap.keySet()) {    String[] sa=id.toString().split("_");    Id<Link> tmpId=Id.create(sa[0],Link.class);    if (!laneList.containsKey(tmpId)) {      List<String> list=new ArrayList<String>();      list.add(sa[1]);      laneList.put(tmpId,list);    } else {      List<String> list=laneList.get(tmpId);      if (!list.contains(sa[1])) {        list.add(sa[1]);      }    }  }  LOG.info("Creating counting station volumes...");  List<Id> idToRemove=new ArrayList<Id>();  for (  Id id : idToRemove) {    classCountMap.remove(id);  }  LOG.info("Outstanding counts: " + classCountMap.size());  BufferedWriter output=IOUtils.getBufferedWriter(folder + "ddd.csv");  try {    output.write("Id,Light,Short,Medium,Long");    output.newLine();    Counter c=new Counter("  counts # ");    for (    Id id : classCountMap.keySet()) {      Double[] da=classCountMap.get(id);      output.write(String.format("%s,%.2f,%.2f,%.2f,%.2f",id.toString(),da[0],da[1],da[2],da[3]));      output.newLine();      c.incCounter();    }    c.printCounter();  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + folder + "ddd.csv");  } finally {    try {      output.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + folder + "ddd.csv");    }  }  String[] sa=new String[4];  addCounts("1277",new String[]{"1","2"},"a");  addCounts("3620",new String[]{"1"},"a");  addCounts("3620",new String[]{"2"},"b");  addCounts("40211",new String[]{"1"},"a");  addCounts("40211",new String[]{"2"},"b");  addCounts("40212",new String[]{"1"},"a");  addCounts("40212",new String[]{"2"},"b");  addCounts("40213",new String[]{"1"},"a");  addCounts("40213",new String[]{"2"},"b");  addCounts("40214",new String[]{"1"},"a");  addCounts("40214",new String[]{"2"},"b");  addCounts("40215",new String[]{"1"},"a");  addCounts("40215",new String[]{"2"},"b");  addCounts("40216",new String[]{"1"},"a");  addCounts("40216",new String[]{"2"},"b");  addCounts("40217",new String[]{"1","2"},"a");  addCounts("40217",new String[]{"3","4"},"b");  addCounts("403161",new String[]{"1","2","3"},"a");  addCounts("403162",new String[]{"1","2","3"},"a");  addCounts("403171",new String[]{"1","2","3"},"a");  addCounts("403172",new String[]{"1","2","3"},"a");  addCounts("403181",new String[]{"1","2","3"},"a");  addCounts("403182",new String[]{"1","2","3","4"},"a");  addCounts("40322",new String[]{"1"},"a");  addCounts("40322",new String[]{"2"},"b");  addCounts("40324",new String[]{"1"},"a");  addCounts("40324",new String[]{"2"},"b");  addCounts("40325",new String[]{"1"},"a");  addCounts("40325",new String[]{"2"},"b");  addCounts("40326",new String[]{"1"},"a");  addCounts("40327",new String[]{"1"},"a");  addCounts("40327",new String[]{"2"},"b");  addCounts("40328",new String[]{"1"},"a");  addCounts("40328",new String[]{"2"},"b");  addCounts("40395",new String[]{"1"},"a");  addCounts("40395",new String[]{"2"},"b");  addCounts("40396",new String[]{"1"},"a");  addCounts("40396",new String[]{"2"},"b");  addCounts("40397",new String[]{"1"},"a");  addCounts("40397",new String[]{"2"},"b");  addCounts("40398",new String[]{"1"},"a");  addCounts("40398",new String[]{"2"},"b");  addCounts("40399",new String[]{"1"},"a");  addCounts("40399",new String[]{"2"},"b");  addCounts("40401",new String[]{"1"},"a");  addCounts("40401",new String[]{"2"},"b");  addCounts("40402",new String[]{"1"},"a");  addCounts("40402",new String[]{"2"},"b");  addCounts("40403",new String[]{"1"},"a");  addCounts("40403",new String[]{"2"},"b");  addCounts("40404",new String[]{"1"},"a");  addCounts("40404",new String[]{"2"},"b");  addCounts("40405",new String[]{"1"},"a");  addCounts("40405",new String[]{"2"},"b");  addCounts("40406",new String[]{"1"},"a");  addCounts("40406",new String[]{"2"},"b");  addCounts("40407",new String[]{"1"},"a");  addCounts("40407",new String[]{"2"},"b");  addCounts("40408",new String[]{"1"},"a");  addCounts("40408",new String[]{"2"},"b");  addCounts("40409",new String[]{"1","2"},"a");  addCounts("40409",new String[]{"3","4"},"b");  addCounts("40410",new String[]{"1"},"a");  addCounts("40410",new String[]{"2"},"b");  addCounts("40411",new String[]{"1","2"},"a");  addCounts("40411",new String[]{"3","4"},"b");  addCounts("40412",new String[]{"1"},"a");  addCounts("40412",new String[]{"2"},"b");  addCounts("40413",new String[]{"1"},"a");  addCounts("40413",new String[]{"2"},"b");  addCounts("40414",new String[]{"1"},"a");  addCounts("40414",new String[]{"2"},"b");  addCounts("40415",new String[]{"1"},"a");  addCounts("40415",new String[]{"2"},"b");  addCounts("40416",new String[]{"1","2"},"a");  addCounts("40417",new String[]{"1","2"},"a");  addCounts("40418",new String[]{"1"},"a");  addCounts("40418",new String[]{"2"},"b");  addCounts("40420",new String[]{"1","2"},"a");  addCounts("40421",new String[]{"1","2"},"a");  addCounts("40422",new String[]{"1"},"a");  addCounts("40422",new String[]{"2"},"b");  addCounts("40423",new String[]{"1","2"},"a");  addCounts("40423",new String[]{"3","4"},"b");  addCounts("40424",new String[]{"1"},"a");  addCounts("40424",new String[]{"2"},"b");  addCounts("40425",new String[]{"1"},"a");  addCounts("40425",new String[]{"2"},"b");  addCounts("40426",new String[]{"1"},"a");  addCounts("40426",new String[]{"2"},"b");  addCounts("40427",new String[]{"1"},"a");  addCounts("40427",new String[]{"2"},"b");  addCounts("40428",new String[]{"1"},"a");  addCounts("40428",new String[]{"2"},"b");  addCounts("40430",new String[]{"1"},"a");  addCounts("40430",new String[]{"2"},"b");  addCounts("40432",new String[]{"1","2"},"a");  addCounts("40432",new String[]{"3","4"},"b");  addCounts("40433",new String[]{"1"},"a");  addCounts("40434",new String[]{"1"},"a");  addCounts("40434",new String[]{"2"},"b");  addCounts("40435",new String[]{"1"},"a");  addCounts("40435",new String[]{"2"},"b");  addCounts("40436",new String[]{"1"},"a");  addCounts("40436",new String[]{"2"},"b");  addCounts("40437",new String[]{"1"},"a");  addCounts("40437",new String[]{"2"},"b");  addCounts("40438",new String[]{"1"},"a");  addCounts("40438",new String[]{"2","3"},"b");  addCounts("40439",new String[]{"1","2"},"a");  addCounts("40439",new String[]{"3","4"},"b");  LOG.info("Cleaned up. Counts remaining: " + classCountMap.size());  output=IOUtils.getBufferedWriter(folder + "eee.csv");  try {    output.write("Id,Light,Short,Medium,Long");    output.newLine();    Counter c=new Counter("  counts # ");    for (    Id id : classCountMap.keySet()) {      Double[] da=classCountMap.get(id);      output.write(String.format("%s,%.2f,%.2f,%.2f,%.2f",id.toString(),da[0],da[1],da[2],da[3]));      output.newLine();      c.incCounter();    }    c.printCounter();  } catch (  IOException e) {    throw new RuntimeException("Could not write to BufferedWriter " + folder + "ddd.csv");  } finally {    try {      output.close();    } catch (    IOException e) {      throw new RuntimeException("Could not close BufferedWriter " + folder + "ddd.csv");    }  }}  }
class C{  public static int positionHorizontallyRTL(CssContext c,Box current,int start,int width){  int x=start;  InlineLayoutBox currentIB=null;  if (current instanceof InlineLayoutBox) {    currentIB=(InlineLayoutBox)current;    x-=currentIB.getRightMarginPaddingBorder(c);  }  for (int i=0; i < current.getChildCount(); i++) {    Box b=current.getChild(i);    if (b instanceof InlineLayoutBox) {      InlineLayoutBox iB=(InlineLayoutBox)b;      int w=positionHorizontallyILBRTL(c,iB,x,width);      positionHorizontallyILBRTL(c,iB,x,w);      x-=w;      iB.setX(x);    } else {      x-=b.getWidth();      b.setX(x);    }  }  if (currentIB != null) {    x-=currentIB.getLeftMarginBorderPadding(c);    currentIB.setInlineWidth((start - x));  }  return (start - x);}  }
class C{  protected KMLAbstractSubStyle(String namespaceURI){  super(namespaceURI);}  }
class C{  public StorageCenterAPIException(String message,Throwable e){  super(message,e);}  }
class C{  public void close() throws MqttException {  final String methodName="close";synchronized (conLock) {    if (!isClosed()) {      if (!isDisconnected()) {        log.fine(CLASS_NAME,methodName,"224");        if (isConnecting()) {          throw new MqttException(MqttException.REASON_CODE_CONNECT_IN_PROGRESS);        } else         if (isConnected()) {          throw ExceptionHelper.createMqttException(MqttException.REASON_CODE_CLIENT_CONNECTED);        } else         if (isDisconnecting()) {          closePending=true;          return;        }      }      conState=CLOSED;      clientState.close();      clientState=null;      callback=null;      persistence=null;      sender=null;      pingSender=null;      receiver=null;      networkModules=null;      conOptions=null;      tokenStore=null;    }  }}  }
class C{  public Object readCustom(Type target){  return null;}  }
class C{  public void write(byte[] buffer){  ser.writeTelegram(new String(buffer).toCharArray());}  }
class C{  private void parseTermsMessage(Node node){  String title=null;  String message=null;  String acceptBtn=null;  String rejectBtn=null;  Node childnode=node.getFirstChild();  if (childnode != null) {    do {      if (title == null) {        if ((title=getValueByParamName("title",childnode,TYPE_TXT)) != null) {          mRcsSettings.setProvisioningUserMessageTitle("".equals(title) ? null : title);          provisioningInfo.setTitle(title);          continue;        }      }      if (message == null) {        if ((message=getValueByParamName("message",childnode,TYPE_TXT)) != null) {          mRcsSettings.setProvisioningUserMessageContent("".equals(message) ? null : message);          provisioningInfo.setMessage(message);          continue;        }      }      if (acceptBtn == null) {        if ((acceptBtn=getValueByParamName("Accept_btn",childnode,TYPE_INT)) != null) {          boolean accept=STRING_BOOLEAN_TRUE.equals(acceptBtn);          mRcsSettings.setProvisioningAcceptButton(accept);          provisioningInfo.setAcceptBtn(accept);          continue;        }      }      if (rejectBtn == null) {        if ((rejectBtn=getValueByParamName("Reject_btn",childnode,TYPE_INT)) != null) {          boolean reject=STRING_BOOLEAN_TRUE.equals(rejectBtn);          mRcsSettings.setProvisioningRejectButton(reject);          provisioningInfo.setRejectBtn(reject);        }      }    } while ((childnode=childnode.getNextSibling()) != null);  }}  }
class C{  public void buildIndex(){  PositionSinglePassIndexer indexer=new PositionSinglePassIndexer(indexDir.toString(),indexName,positionSpec);  indexer.createInvertedIndex(new Collection[]{collection});}  }
class C{  private void flushBuffer() throws IOException {  if (_outputStream == null)   throw new IOException("Stream closed");  _outputStream.write(_bytes,0,_index);  _index=0;}  }
class C{  public long add(long instant,long amount){  instant=super.add(instant,amount);  FieldUtils.verifyValueBounds(this,get(instant),iMin,iMax);  return instant;}  }
class C{  public void clear(){  urlParams.clear();  streamParams.clear();  fileParams.clear();  urlParamsWithObjects.clear();  fileArrayParams.clear();}  }
class C{  public SimpleDatabase(){  try {    keePassFile=createEmptyDatabase();    keePassFile.root.group.database=this;  } catch (  Exception e) {    throw new IllegalStateException(e);  }}  }
class C{  public void stringEquals() throws IOException {  print("stringEquals",null);}  }
class C{  public void unlock(int key){  getLock(key).unlock();}  }
class C{  public DisqueAsyncCommandsImpl(DisqueConnection<K,V> connection,RedisCodec<K,V> codec){  this.connection=connection;  this.codec=codec;  commandBuilder=new DisqueCommandBuilder<K,V>(codec);}  }
class C{  public static void isBoolean(String member,String inputValue) throws ValidationException {  if (!ADMValidator.isBoolean(inputValue)) {    ValidationException vf=new ValidationException(ReasonEnum.BOOLEAN,member,new Object[]{inputValue});    logValidationFailure(vf);    throw vf;  }}  }
class C{  public static CertificateMessage fromByteArray(final byte[] byteArray,boolean useRawPublicKey,InetSocketAddress peerAddress) throws HandshakeException {  DatagramReader reader=new DatagramReader(byteArray);  if (useRawPublicKey) {    LOGGER.log(Level.FINER,"Parsing RawPublicKey CERTIFICATE message");    int certificateLength=reader.read(CERTIFICATE_LENGTH_BITS);    byte[] rawPublicKey=reader.readBytes(certificateLength);    return new CertificateMessage(rawPublicKey,peerAddress);  } else {    return readX509CertificateMessage(reader,peerAddress);  }}  }
class C{  public void handleEvent(Event evt){  evt=EventSupport.getUltimateOriginalEvent(evt);  listener.subtreeModified((Node)evt.getTarget());}  }
class C{  boolean endWithOpenMultilineStringLiteral(){  return insideQuoteStringLiteral || insideAlternateQuoteStringLiteral;}  }
class C{  public static SupportedGroup fromId(int id){  for (  SupportedGroup group : values()) {    if (group.getId() == id) {      return group;    }  }  return null;}  }
class C{  public static char letterFromCode(int k){switch (k) {case 0:    return 'B';case 1:  return 'G';case 2:return 'R';case 3:return 'Y';default :return '0';}}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isTainted(final String register){  return m_taintedRegs.contains(Preconditions.checkNotNull(register,"Error: Register argument can not be null"));}  }
class C{  private ServiceInstance createServiceInstance(final ProvisioningStatus status,final String... parameter) throws Exception {  Map<String,String> parameters=new LinkedHashMap<String,String>();  for (  String parameterKey : parameter) {    if (InstanceParameter.PUBLIC_IP.equals(parameterKey)) {      parameters.put(InstanceParameter.PUBLIC_IP,"4.3.2.1");    } else {      String pValue=parameterKey + "Value";      if (parameterKey.endsWith(InstanceParameter.CRYPT_KEY_SUFFIX)) {        pValue=AESEncrypter.encrypt(pValue);      }      parameters.put(parameterKey,pValue);    }  }  return createServiceInstance(status,parameters);}  }
class C{  @Override public void onUpgrade(@NonNull SQLiteDatabase db,int oldVersion,final int newVersion){  if (oldVersion == 1 && newVersion == 2) {    upgradeFromVersionOneToVersionTwo(db);  }}  }
class C{  private void onLoginClicked(){  String inputUsername="";  String inputPassword="";  boolean remember=false;  String message;  if (USERNAME.equals(inputUsername) && PASSWORD.equals(inputPassword)) {    if (remember) {      message="Welcome to dashboard.\nAutomatic login is activated.";    } else {      message="Welcome to dashboard.";    }  } else {    message="Login failed.";  }  Toast.makeText(this,message,Toast.LENGTH_SHORT).show();}  }
class C{  public int numTerms(){  return numTermsInField;}  }
class C{  public void connect(boolean autoReconnect,OnConnectionChangedListener connectionCallback){  mPeripheral.connect(autoReconnect,connectionCallback);}  }
class C{  public long find(long key){  final long slot=slot(hash(key),mask);  for (long index=slot; ; index=nextSlot(index,mask)) {    final long id=id(index);    if (id == -1 || keys.get(id) == key) {      return id;    }  }}  }
class C{  @Override public int size(){  return size;}  }
class C{  protected String encodeCookie(SerializableHttpCookie cookie){  if (cookie == null)   return null;  ByteArrayOutputStream os=new ByteArrayOutputStream();  try {    ObjectOutputStream outputStream=new ObjectOutputStream(os);    outputStream.writeObject(cookie);  } catch (  IOException e) {    Log.d(LOG_TAG,"IOException in encodeCookie",e);    return null;  }  return byteArrayToHexString(os.toByteArray());}  }
class C{  boolean isBaseHeader(){  return value == BASE_HEADER;}  }
class C{  private static <T>int gallopLeft(T key,T[] a,int base,int len,int hint,Comparator<? super T> c){  assert len > 0 && hint >= 0 && hint < len;  int lastOfs=0;  int ofs=1;  if (c.compare(key,a[base + hint]) > 0) {    int maxOfs=len - hint;    while (ofs < maxOfs && c.compare(key,a[base + hint + ofs]) > 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    lastOfs+=hint;    ofs+=hint;  } else {    final int maxOfs=hint + 1;    while (ofs < maxOfs && c.compare(key,a[base + hint - ofs]) <= 0) {      lastOfs=ofs;      ofs=(ofs << 1) + 1;      if (ofs <= 0)       ofs=maxOfs;    }    if (ofs > maxOfs)     ofs=maxOfs;    int tmp=lastOfs;    lastOfs=hint - ofs;    ofs=hint - tmp;  }  assert -1 <= lastOfs && lastOfs < ofs && ofs <= len;  lastOfs++;  while (lastOfs < ofs) {    int m=lastOfs + ((ofs - lastOfs) >>> 1);    if (c.compare(key,a[base + m]) > 0)     lastOfs=m + 1; else     ofs=m;  }  assert lastOfs == ofs;  return ofs;}  }
class C{  private void rebuild(boolean clearSelection){  Object rootUO;  treePathMapping.clear();  if (treeModel != null && (rootUO=treeModel.getRoot()) != null) {    root=createNodeForValue(rootUO,0);    root.path=new TreePath(rootUO);    addMapping(root);    if (isRootVisible()) {      rowCount=1;      root.row=0;    } else {      rowCount=0;      root.row=-1;    }    root.expand();  } else {    root=null;    rowCount=0;  }  if (clearSelection && treeSelectionModel != null) {    treeSelectionModel.clearSelection();  }  this.visibleNodesChanged();}  }
class C{  public boolean hasYear(){  return hasExtension(Year.class);}  }
class C{  protected void digBlock(ChunkPrimer data,int x,int y,int z,int chunkX,int chunkZ,boolean foundTop,IBlockState state,IBlockState up){  net.minecraft.world.biome.Biome biome=worldObj.getBiome(new BlockPos(x + chunkX * 16,0,z + chunkZ * 16));  IBlockState top=biome.topBlock;  IBlockState filler=biome.fillerBlock;  if (this.canReplaceBlock(state,up) || state.getBlock() == top.getBlock() || state.getBlock() == filler.getBlock()) {    if (y - 1 < 10) {      data.setBlockState(x,y,z,BLK_LAVA);    } else {      data.setBlockState(x,y,z,BLK_AIR);      if (foundTop && data.getBlockState(x,y - 1,z).getBlock() == filler.getBlock()) {        data.setBlockState(x,y - 1,z,top.getBlock().getDefaultState());      }    }  }}  }
class C{  public X509Certificate generateX509Certificate(PrivateKey key,String provider,SecureRandom random) throws NoSuchProviderException, SecurityException, SignatureException, InvalidKeyException {  try {    return generate(key,provider,random);  } catch (  NoSuchProviderException e) {    throw e;  }catch (  SignatureException e) {    throw e;  }catch (  InvalidKeyException e) {    throw e;  }catch (  GeneralSecurityException e) {    throw new SecurityException("exception: " + e);  }}  }
class C{  private void updateSystemIcon(){  Window window=getWindow();  if (window == null) {    systemIcon=null;    return;  }  java.util.List<Image> icons=window.getIconImages();  assert icons != null;  if (icons.size() == 0) {    systemIcon=null;  } else   if (icons.size() == 1) {    systemIcon=icons.get(0);  } else {    systemIcon=SunToolkit.getScaledIconImage(icons,IMAGE_WIDTH,IMAGE_HEIGHT);  }}  }
class C{  public boolean comprobarDisponibilidadDetallesConsulta(ConsultaVO consulta,Collection detalles){  boolean todosDisponibles=true;  Iterator it=detalles.iterator();  while (it.hasNext()) {    DetalleConsultaVO detalle=(DetalleConsultaVO)it.next();    if (consulta.tieneReserva()) {      detalle.setEstadoDisponibilidad(this.isDetalleDisponibleAllConditions(detalle,consulta.getFinicialreserva(),consulta.getFfinalreserva(),consulta.tieneReserva()));    } else {      Calendar fechafinal=new GregorianCalendar();      fechafinal.add(Calendar.HOUR,Integer.parseInt(PropertyHelper.getProperty(PropertyHelper.PLAZO_CONSULTA)) * ConsultasConstants.HORAS_DIA);      detalle.setEstadoDisponibilidad(this.isDetalleDisponibleAllConditions(detalle,DBUtils.getFechaActual(),fechafinal.getTime(),consulta.tieneReserva()));    }    detalle.setDisponibilidad(detalle.getEstadoDisponibilidad() == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE || detalle.getEstadoDisponibilidad() == SolicitudesConstants.ESTADO_DISPONIBILIDAD_DETALLE_DISPONIBLE_PARCIAL);    if (todosDisponibles && !detalle.isDisponibilidad())     todosDisponibles=false;  }  return todosDisponibles;}  }
class C{  private static ByteBuffer prepareWrappedCalcValue(int dataLen,ByteOrder order){  ByteBuffer buffer=ByteBuffer.allocate(dataLen + CALC_EXTRA_DATA_LEN).order(order);  buffer.putInt(CALC_DATA_LEN_OFFSET,dataLen);  buffer.position(CALC_DATA_OFFSET);  return buffer;}  }
class C{  public NGramTokenizer(AttributeFactory factory,int minGram,int maxGram){  this(factory,minGram,maxGram,false);}  }
class C{  public DrawingColorChooserAction(DrawingEditor editor,AttributeKey<Color> key,@Nullable Icon icon){  this(editor,key,null,icon);}  }
class C{  @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {  super.readExternal(in);  this.routingObjectID=DBIDUtil.importInteger(in.readInt());  this.parentDistance=in.readDouble();  this.coveringRadius=in.readDouble();}  }
class C{  Variable resolveToVariable(Object o) throws PlayerDebugException {  Variable v=null;  if (o instanceof Variable)   return (Variable)o;{    String name=o.toString();    long id=nameAsId(name);    if (id != Value.UNKNOWN_ID) {    } else {      id=determineContext(name);      v=locateForNamed(id,name,true);      if (v != null)       v=new VariableFacade(v,id,m_isolateId); else       if (v == null && m_createIfMissing && name.charAt(0) != '$')       v=new VariableFacade(id,name,m_isolateId);    }  }  return v;}  }
class C{  public final TimeValue timeout(){  return timeout;}  }
class C{  public BillingAdapterNotFoundException(String message,Object[] params,Throwable t){  super(message,t,params);}  }
class C{  public void next(){  index++;}  }
class C{  public boolean isClosed(){  return _state.isClose();}  }
class C{  private void expandNode(final TreeNode node,final TreePath path,final int level){  if (level <= 0) {    return;  }  tree.expandPath(path);  for (int i=0; i < node.getChildCount(); ++i) {    final TreeNode childNode=node.getChildAt(i);    expandNode(childNode,path.pathByAddingChild(childNode),level - 1);  }}  }
class C{  public JmsConnectionFactoryScriptCommand(Configuration configuration,String resourcePath,Resource resource){  super(configuration,resourcePath);  this.resource=resource;}  }
class C{  public void test_parseLjava_io_InputStreamLjava_lang_String(){  InputStream is=getClass().getResourceAsStream("/systemid.xml");  try {    Document d=db.parse(is,SAXParserTestSupport.XML_SYSTEM_ID);    assertNotNull(d);    assertEquals(4,d.getChildNodes().getLength());    assertEquals("collection",d.getChildNodes().item(0).getNodeName());    assertEquals("#comment",d.getChildNodes().item(1).getNodeName());    assertEquals("collection",d.getChildNodes().item(2).getNodeName());    assertEquals("#comment",d.getChildNodes().item(3).getNodeName());  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    db.parse((InputStream)null,SAXParserTestSupport.XML_SYSTEM_ID);    fail("Expected IllegalArgumentException was not thrown");  } catch (  IllegalArgumentException iae) {  }catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {    fail("Unexpected SAXException " + sax.toString());  }  try {    is=getClass().getResourceAsStream("/wrong.xml");    db.parse(is,SAXParserTestSupport.XML_SYSTEM_ID);    fail("Expected SAXException was not thrown");  } catch (  IOException ioe) {    fail("Unexpected IOException " + ioe.toString());  }catch (  SAXException sax) {  }}  }
class C{  public String toPlain(){  StringBuffer sb=new StringBuffer();  int length=size();  for (int i=1; i <= length; i++) {    sb.append(i);    sb.append(": ");    sb.append(get(i - 1,null));    sb.append("\n");  }  return sb.toString();}  }
class C{  private void addToken(int tokenType){  addToken(zzStartRead,zzMarkedPos - 1,tokenType);}  }
class C{  public E argMax(){  double maxCount=Double.NEGATIVE_INFINITY;  E maxKey=null;  for (  Map.Entry<E,Double> entry : entries.entrySet()) {    if (entry.getValue() > maxCount || maxKey == null) {      maxKey=entry.getKey();      maxCount=entry.getValue();    }  }  return maxKey;}  }
class C{  public int size(){  int result;  TrieNode leaf;  result=0;  leaf=(TrieNode)getFirstLeaf();  while (leaf != null) {    if (leaf != getRoot()) {      result++;    }    leaf=(TrieNode)leaf.getNextLeaf();  }  return result;}  }
class C{  public static Date parseDate(String date) throws ParseException {  DateFormat[] formats=new DateFormat[]{GanttLanguage.getInstance().getShortDateFormat(),GanttLanguage.getInstance().getMediumDateFormat(),GanttLanguage.getInstance().getLongDateFormat()};  for (int i=0; i < formats.length; i++) {    try {      return formats[i].parse(date);    } catch (    ParseException e) {      if (i + 1 == formats.length) {        throw e;      }    }catch (    IllegalArgumentException e) {      if (i + 1 == formats.length) {        throw e;      }    }  }  throw new ParseException("Failed to parse date=" + date,0);}  }
class C{  public AcelaLight(String systemName,AcelaSystemConnectionMemo memo){  super(systemName);  _memo=memo;  initializeLight(systemName);}  }
class C{  public void addPieSegment(int dataIndex,float value,float startAngle,float angle){  mPieSegmentList.add(new PieSegment(dataIndex,value,startAngle,angle));}  }
class C{  public Matrix transpose(){  Matrix X=new Matrix(n,m);  double[][] C=X.getArray();  for (int i=0; i < m; i++) {    for (int j=0; j < n; j++) {      C[j][i]=A[i][j];    }  }  return X;}  }
class C{  public CrowdedPenaltyEvent(double time,Id personId,double penalty){  super(time);  this.personId=personId;  this.penalty=penalty;}  }
class C{  public static void unregisterAllListeners(){  startMonitoring();synchronized (membershipLock) {    clientMembershipListeners=new ArrayList<ClientMembershipListener>();  }}  }
class C{  protected void createResizeController(Balloon balloon){  if (this.resizeController != null)   return;  this.resizeController=new BalloonResizeController(this.wwd,balloon);}  }
class C{  private String popString(){  Object o=stack.pop();  if (o instanceof StringBuffer) {    StringBuffer sb=(StringBuffer)o;    return sb.toString();  } else {    return (String)o;  }}  }
class C{  public void testRepetitiveIncreasingSloppinessWithHoles() throws Exception {  Term t=randomTerm();  for (int i=0; i < 10; i++) {    PhraseQuery.Builder builder=new PhraseQuery.Builder();    builder.add(t,0);    builder.add(t,2);    builder.setSlop(i);    PhraseQuery q1=builder.build();    builder.setSlop(i + 1);    PhraseQuery q2=builder.build();    assertSubsetOf(q1,q2);  }}  }
class C{  public static SamReader makeSamReader(InputStream stream,SAMFileHeader headerOverride,SamReader.Type assumeType) throws IOException {  if (assumeType == null) {    throw new NullPointerException();  }  try {    return getSamReaderFactory().open(SamInputResource.of(stream).header(headerOverride).assumeType(assumeType));  } catch (  final RuntimeIOException e) {    throw (IOException)e.getCause();  }}  }
class C{  public static String encode(String data,String charEncoding) throws UnsupportedEncodingException {  if (data == null)   data="";  if (charEncoding == null)   charEncoding=DEFAULT_CHAR_ENCODING;  ByteArrayOutputStream bos=new ByteArrayOutputStream();  OutputStreamWriter osw=new OutputStreamWriter(bos,charEncoding);  try {    osw.write(data);  } catch (  IOException ioe) {    throw new RuntimeException(ioe.toString());  }  byte[] encodedData=encode(bos.toByteArray());  if (encodedData == null)   return "";  bos=new ByteArrayOutputStream(encodedData.length);  try {    bos.write(encodedData);  } catch (  IOException ioe) {    throw new RuntimeException(ioe.toString());  }  return bos.toString(charEncoding);}  }
class C{  void addEventInfo(long eventId,boolean allDay,long begin,int reminderMinutes){  mEvents.add(new EventInfo(eventId,allDay,begin,reminderMinutes));}  }
class C{  private void parseAndValidateUiXml(IType uiBinderSubtype,ReferenceManager referenceManager){  try {    IPath uiXmlPath=UiBinderJavaValidator.this.ownerToUiXml.getUiXmlPath(uiBinderSubtype);    Object uiXmlFileAsObj=ClasspathResourceUtilities.resolveFile(uiXmlPath,javaProject);    if (!(uiXmlFileAsObj instanceof IFile)) {      return;    }    IDOMModel uiXmlModel=null;    try {      IFile uiXmlFile=(IFile)uiXmlFileAsObj;      uiXmlModel=SseUtilities.getModelForRead(uiXmlFile);      if (uiXmlModel == null) {        GWTPluginLog.logWarning("Could not find a corresponding model for " + uiXmlPath);        return;      }      ParseResults parseResults=UiBinderXmlParser.newInstance(uiXmlModel,referenceManager,new MarkerPlacementStrategy(UiBinderProblemMarkerManager.MARKER_ID)).parse();      if (parseResults == null) {        return;      }      result.addAllTypeDependencies(parseResults.getJavaTypeReferences());      UiBinderJavaValidator.this.uiXmlFieldRefs.putFieldReferencesForUiXml(uiXmlFile.getFullPath(),parseResults.getFieldNames());    }  finally {      if (uiXmlModel != null) {        uiXmlModel.releaseFromRead();      }    }  } catch (  JavaModelException e) {    GWTPluginLog.logError(e);  }catch (  FileNotFoundException e) {  }catch (  IOException e) {    GWTPluginLog.logError(e);  }catch (  CoreException e) {    GWTPluginLog.logError(e);  }catch (  UiBinderException e) {    GWTPluginLog.logError(e);  }}  }
class C{  @Override public boolean isSecure(){  if (_s == null || _sslSocketClass == null)   return false; else   return _sslSocketClass.isAssignableFrom(_s.getClass());}  }
class C{  public void removeVolumesUsingREST(StorageSystem storage,URI exportMaskURI,List<URI> volumeURIList,List<Initiator> initiatorList,TaskCompleter taskCompleter){  try {    if (volumeURIList != null && volumeURIList.size() > 0) {      ExportMask exportMask=_dbClient.queryObject(ExportMask.class,exportMaskURI);      final String storageIP=storage.getSmisProviderIP();      XIVRestClient restExportOpr=getRestClient(storage);      URI hostName=null;      Set<Initiator> exportMaskInits=ExportMaskUtils.getInitiatorsForExportMask(_dbClient,exportMask,null);      Iterator<Initiator> exportMaskInitsItr=exportMaskInits.iterator();      if (exportMaskInitsItr.hasNext()) {        hostName=exportMaskInitsItr.next().getHost();      }      final Host host=_dbClient.queryObject(Host.class,hostName);      String exportName=host.getLabel();      final String exportType=ExportMaskUtils.getExportType(_dbClient,exportMask);      if (ExportGroup.ExportGroupType.Cluster.name().equals(exportType)) {        Cluster cluster=_dbClient.queryObject(Cluster.class,host.getCluster());        exportName=cluster.getLabel();      }      for (      URI volumeURI : volumeURIList) {        final Volume volume=_dbClient.queryObject(Volume.class,volumeURI);        if (volume != null) {          restExportOpr.unExportVolume(storageIP,exportType,exportName,volume.getLabel());        }      }    }    taskCompleter.ready(_dbClient);  } catch (  Exception e) {    _log.error("Unexpected error: removeVolume failed.",e);    ServiceError error=XIVRestException.exceptions.methodFailed("removeVolume",e);    taskCompleter.error(_dbClient,error);  }}  }
class C{  public AmbiguousNameException(String msg){  super(msg);}  }
class C{  public void close(){  if (mBluetoothGatt == null) {    return;  }  mBluetoothGatt.close();  mBluetoothGatt=null;}  }
class C{  public Matrix solve(Matrix B){  Matrix y=forwardSub(L,B);  Matrix x=backSub(L,y);  return x;}  }
class C{  public void writeGraphic(final String filename){  try {    ChartUtilities.saveChartAsPNG(new File(filename),getGraphic(),1024,768);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public KMLLod(String namespaceURI){  super(namespaceURI);}  }
class C{  public static SimplifiedObjectMeta parseSimplifiedObjectMeta(Map<String,String> headers) throws ResponseParseException {  try {    SimplifiedObjectMeta objectMeta=new SimplifiedObjectMeta();    for (Iterator<String> it=headers.keySet().iterator(); it.hasNext(); ) {      String key=it.next();      if (key.equals(OSSHeaders.LAST_MODIFIED)) {        try {          objectMeta.setLastModified(DateUtil.parseRfc822Date(headers.get(key)));        } catch (        ParseException pe) {          throw new ResponseParseException(pe.getMessage(),pe);        }      } else       if (key.equals(OSSHeaders.CONTENT_LENGTH)) {        Long value=Long.valueOf(headers.get(key));        objectMeta.setSize(value);      } else       if (key.equals(OSSHeaders.ETAG)) {        objectMeta.setETag(trimQuotes(headers.get(key)));      } else       if (key.equals(OSSHeaders.OSS_HEADER_REQUEST_ID)) {        objectMeta.setRequestId(headers.get(key));      }    }    return objectMeta;  } catch (  Exception e) {    throw new ResponseParseException(e.getMessage(),e);  }}  }
class C{  public MiniAdminTest(String name){  super(name);}  }
class C{  public void executeProcessors(JCas jcas,ProcessorManager.Priority prio){  if (!this.initialized) {    Logger.printError(component,"Unable to execute Processors; initialization was not concluded successfully.");    System.exit(-1);  }  LinkedList<GenericProcessor> myList=processors.get(prio);  for (  GenericProcessor gp : myList) {    try {      gp.process(jcas);    } catch (    Exception exception) {      exception.printStackTrace();      Logger.printError(component,"Unable to process registered Processor " + gp.getClass().getName() + ", got: "+ exception.toString());      System.exit(-1);    }  }}  }
class C{  protected void tessellatePolygon(ShapeData shapeData,Vec4 normal){  GLUTessellatorSupport glts=new GLUTessellatorSupport();  shapeData.cb=new GLUTessellatorSupport.CollectIndexListsCallback();  glts.beginTessellation(shapeData.cb,normal);  try {    double[] coords=new double[3];    GLU.gluTessBeginPolygon(glts.getGLUtessellator(),null);    int k=0;    for (    ExtrudedBoundaryInfo boundary : shapeData) {      GLU.gluTessBeginContour(glts.getGLUtessellator());      FloatBuffer vBuf=boundary.capVertexBuffer;      for (int i=0; i < boundary.locations.size(); i++) {        coords[0]=vBuf.get(i * 3);        coords[1]=vBuf.get(i * 3 + 1);        coords[2]=vBuf.get(i * 3 + 2);        GLU.gluTessVertex(glts.getGLUtessellator(),coords,0,k++);      }      GLU.gluTessEndContour(glts.getGLUtessellator());    }    GLU.gluTessEndPolygon(glts.getGLUtessellator());  }  finally {    glts.endTessellation();  }}  }
class C{  private void addCallOnClickToInitLayout_ID(View myView){  for (  View cview : myView.children) {    addCallOnClickToInitLayout_ID(cview);  }  if (myView.on_click != null && !myView.ignoreOnClick) {    logger.info("Trying to add onClic {} ",myView.id);    logger.debug("-------");    logger.debug("myView: {}",myView);    logger.debug("-------");    ResourcesSoot.v().addCallOnClickToInitLayout_ID(myView.id,myView.on_click);  }}  }
class C{  public static String separatorsToUnix(String path){  if (path == null || path.indexOf(WINDOWS_SEPARATOR) == -1) {    return path;  }  return path.replace(WINDOWS_SEPARATOR,UNIX_SEPARATOR);}  }
class C{  @Override public void terminateAnyRestoreSessions(StorageSystem storage,BlockObject from,URI volume,TaskCompleter taskCompleter) throws Exception {  BlockObject blockObject=BlockObject.fetch(_dbClient,volume);  Collection<CIMObjectPath> syncObjects=null;  if (storage.checkIfVmax3()) {    syncObjects=_helper.getSettingsDefineStatePaths(storage,blockObject,(BlockSnapshot)from);  } else {    syncObjects=getRestoredOrMixedStateSyncObjects(storage,blockObject);  }  for (  CIMObjectPath syncObject : syncObjects) {    resumeSnapshot(storage,from,blockObject,syncObject,taskCompleter);  }}  }
class C{  protected void generatePseudoPawnDoublePush(int fromSquare,long fromBB,int oppositeColor,int epModifier,PriorityMoveList moves){  long toBB=pawnDoublePush(colorToMove,fromBB,emptyBB);  while (toBB != 0) {    int toSquare=bitscanForward(toBB);    addMove(new Move(fromSquare,toSquare,PAWN,colorToMove,EMPTY,EMPTY,toSquare + epModifier,Move.DOUBLE_PAWN_PUSH_CHARACTERISTIC),moves);    toBB=bitscanClear(toBB);  }}  }
class C{  @Override public String toString(){  StringBuilder sb=new StringBuilder();  for (  String name : mValues.keySet()) {    String value=getAsString(name);    if (sb.length() > 0)     sb.append(" ");    sb.append(name + "=" + value);  }  return sb.toString();}  }
class C{  public void dropConstraintsOnDatabase(AbstractSession session) throws EclipseLinkException {  dropForeignConstraintsOnDatabase(session);  dropUniqueConstraintsOnDatabase(session);}  }
class C{  public static List<Intersection> intersectTriFan(final Line line,Vec4[] vertices,IntBuffer indices){  if (line == null) {    String msg=Logging.getMessage("nullValue.LineIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (vertices == null) {    String msg=Logging.getMessage("nullValue.ArrayIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (indices == null) {    String msg=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  List<Intersection> intersections=null;  Vec4 v0=vertices[0];  for (int n=indices.position() + 1; n < indices.limit() - 1; n++) {    Intersection intersection;    Vec4 v1=vertices[indices.get(n)];    Vec4 v2=vertices[indices.get(n + 1)];    intersection=intersect(line,v0,v1,v2);    if (intersection != null) {      if (intersections == null)       intersections=new ArrayList<Intersection>();      intersections.add(intersection);    }  }  return intersections;}  }
class C{  public void show(Path parent){  resetState();  this.wizardMode=CREATE;  MutableProjectConfig config=new MutableProjectConfig();  config.setPath(parent.toString());  showDialog(config);}  }
class C{  private StringSet linkTargetVolumes(UnManagedProtectionSet unManagedProtectionSet,UnManagedVolume sourceVolume,GetRSetResponse rset,Map<String,String> rpWwnToNativeWwn,List<String> storageNativeIdPrefixes,DbClient dbClient){  StringSet rpTargetVolumeIds=new StringSet();  for (  GetVolumeResponse targetVolume : rset.getVolumes()) {    UnManagedVolume targetUnManagedVolume=null;    String targetWwn=rpWwnToNativeWwn.get(targetVolume.getWwn());    if (targetWwn != null) {      targetUnManagedVolume=findUnManagedVolumeForWwn(targetWwn,dbClient,storageNativeIdPrefixes);    }    if (null == targetUnManagedVolume) {      log.info("Protection Set {} contains unknown target volume: {}. Skipping.",unManagedProtectionSet.getNativeGuid(),targetVolume.getWwn());      continue;    }    if (targetUnManagedVolume.getId().equals(sourceVolume.getId())) {      continue;    }    Volume targetManagedVolume=DiscoveryUtils.checkManagedVolumeExistsInDBByWwn(dbClient,targetVolume.getWwn());    if (null != targetManagedVolume) {      log.info("Protection Set {} has an orphaned unmanaged target volume {}. Skipping.",unManagedProtectionSet.getNativeGuid(),targetUnManagedVolume.getLabel());      continue;    }    log.info("\tfound target volume {}",targetUnManagedVolume.forDisplay());    StringSet rpUnManagedSourceVolumeId=new StringSet();    rpUnManagedSourceVolumeId.add(sourceVolume.getId().toString());    targetUnManagedVolume.putVolumeInfo(SupportedVolumeInformation.RP_UNMANAGED_SOURCE_VOLUME.toString(),rpUnManagedSourceVolumeId);    unManagedVolumesToUpdateByWwn.put(targetUnManagedVolume.getWwn(),targetUnManagedVolume);    rpTargetVolumeIds.add(targetUnManagedVolume.getId().toString());  }  return rpTargetVolumeIds;}  }
class C{  public static double nmToAngle(double nm){  return Length.NM.toRadians(nm);}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public static StartContainerParams create(@NotNull String container){  return new StartContainerParams().withContainer(container);}  }
class C{  public TsFciRunner2(DataWrapper dataWrapper,Parameters params,KnowledgeBoxModel knowledgeBoxModel){  super(dataWrapper,params,knowledgeBoxModel);}  }
class C{  public static CCRipple3D action(CGPoint pos,float radius,int wav,float amp,ccGridSize gridSize,float d){  return new CCRipple3D(pos,radius,wav,amp,gridSize,d);}  }
class C{  public int deleteLog(){  if (getKeepLogDays() < 1)   return 0;  String sql="DELETE C_AcctProcessorLog " + "WHERE C_AcctProcessor_ID=" + getC_AcctProcessor_ID() + " AND (Created+"+ getKeepLogDays()+ ") < SysDate";  int no=DB.executeUpdate(sql,get_TrxName());  return no;}  }
class C{  public IllegalStateException(){  super();}  }
class C{  private static void addSuppressed(Throwable exception,Throwable suppressed){  if (exception != null && suppressed != null) {    exception.addSuppressed(suppressed);  }}  }
class C{  public synchronized NativeTcp pullTcpConnection(String localAddress,int localPort){  EndPointInfo local=new EndPointInfo(localAddress,localPort,ConnectionType.TCP);  Queue<NativeTcp> queue=incomingConnections.get(local);  if (queue == null || queue.isEmpty()) {    return null;  }  NativeTcp connection=queue.poll();  openedTcpConnections.add(connection);  return connection;}  }
class C{  public void testIntsCount(){  LongAdder counter=new LongAdder();  ThreadLocalRandom r=ThreadLocalRandom.current();  long size=0;  for (int reps=0; reps < REPS; ++reps) {    counter.reset();    r.ints(size).parallel().forEach(null);    assertEquals(size,counter.sum());    size+=524959;  }}  }
class C{  private void readFixedSites(String filename){  if (filename != null) {    File f=new File(filename);    if (f.exists() && f.isFile() && f.canRead()) {      BufferedReader br=IOUtils.getBufferedReader(filename);      try {        String line=null;        while ((line=br.readLine()) != null) {          String id=line;          if (!this.sites.contains(id)) {            LOG.warn("Site " + line + " was indicated as a fixed site, but doesn't occur in the distance matrix. It will be ignored.");          } else {            this.fixedSites.add(id);          }        }      } catch (      IOException e) {        e.printStackTrace();        throw new RuntimeException("Cannot read from " + filename);      } finally {        try {          br.close();        } catch (        IOException e) {          e.printStackTrace();          throw new RuntimeException("Cannot close " + filename);        }      }    }  }  LOG.info("... found " + this.fixedSites.size() + " fixed sites.");}  }
class C{  public int addHistogramPlot(String name,Color color,double[] sample,int n){  return ((Plot2DCanvas)plotCanvas).addHistogramPlot(name,color,sample,n);}  }
class C{  private Log4J2Logger(final Logger impl,@Nullable final Logger consoleLog){  assert impl != null;  this.impl=impl;  this.consoleLog=consoleLog;  quiet=quiet0;}  }
class C{  public void addAttendee(Attendee attendee){  addProperty(attendee);}  }
class C{  public UnionIteration(Iterable<? extends Iteration<? extends E,X>> args){  argIter=args.iterator();  currentIter=new EmptyIteration<E,X>();}  }
class C{  public ByteBuffer nextBinary() throws IOException {  WebSocketMessageType msgType=null;  while ((msgType=_messageReader.next()) != WebSocketMessageType.EOS) {    if (msgType == WebSocketMessageType.BINARY) {      return _messageReader.getBinary();    }  }  return null;}  }
class C{  public static void main(String[] argv){  if (argv.length < 5) {    String msg="usage: BloomFilterLanguageModel <statistics file> <order> <size>" + " <quantization base> <output file>";    System.err.println(msg);    LOG.error(msg);    return;  }  int order=Integer.parseInt(argv[1]);  int size=(int)(Integer.parseInt(argv[2]) * Math.pow(2,23));  double base=Double.parseDouble(argv[3]);  try {    BloomFilterLanguageModel lm=new BloomFilterLanguageModel(argv[0],order,size,base);    ObjectOutputStream out=new ObjectOutputStream(new GZIPOutputStream(new FileOutputStream(argv[4])));    lm.writeExternal(out);    out.close();  } catch (  IOException e) {    LOG.error(e.getMessage(),e);  }}  }
class C{  public static @CheckForNull ObjectType[] findDeclaredExceptions(InvokeInstruction inv,ConstantPoolGen cpg){  XMethod method=findInvocationLeastUpperBound(inv,cpg,inv instanceof INVOKESTATIC ? Hierarchy.STATIC_METHOD : Hierarchy.INSTANCE_METHOD);  if (method == null) {    return null;  }  String[] exceptions=method.getThrownExceptions();  if (exceptions == null) {    return new ObjectType[0];  }  ObjectType[] result=new ObjectType[exceptions.length];  for (int i=0; i < exceptions.length; ++i) {    result[i]=ObjectTypeFactory.getInstance(ClassName.toDottedClassName(exceptions[i]));  }  return result;}  }
class C{  protected AnimatableLengthListValue(AnimationTarget target){  super(target);}  }
class C{  public ParseTreeNode(PhraseChunk chunk){  this.chunk=chunk;}  }
class C{  public UnhandledException(final String message,final Throwable cause){  super(message,cause);}  }
class C{  public void testMac09() throws Exception {  if (!DEFSupported) {    fail(NotSupportedMsg);    return;  }  Mac[] macs=createMacs();  assertNotNull("Mac objects were not created",macs);  byte[] buf=new byte[10];  ByteBuffer bBuf=ByteBuffer.wrap(buf,0,10);  byte[] bb={(byte)1,(byte)2,(byte)3,(byte)4,(byte)5};  SecretKeySpec sks=new SecretKeySpec(bb,"SHA1");  for (int i=0; i < macs.length; i++) {    try {      macs[i].update((byte)0);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].update(buf);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].update(buf,0,3);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].update(bBuf);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].doFinal();      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].doFinal(new byte[10]);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    try {      macs[i].doFinal(new byte[10],0);      fail("IllegalStateException must be thrown");    } catch (    IllegalStateException e) {    }    macs[i].init(sks);    try {      macs[i].doFinal(new byte[1],0);      fail("ShortBufferException expected");    } catch (    ShortBufferException e) {    }  }}  }
class C{  public static String nameForTask(HadoopTaskInfo info,boolean prefix){  if (prefix)   return "hadoop-task-" + info.jobId() + "-"; else   return "hadoop-task-" + info.jobId() + "-"+ info.type()+ "-"+ info.taskNumber();}  }
class C{  public DateMidnight(int year,int monthOfYear,int dayOfMonth){  super(year,monthOfYear,dayOfMonth,0,0,0,0);}  }
class C{  void pushSpaceHandling(boolean b) throws org.xml.sax.SAXParseException {  m_spacePreserveStack.push(b);}  }
class C{  public static void main(String[] args){  TestNonFrameWarning tester=new TestNonFrameWarning();  run(tester,ARGS,TEST,NO_TEST);  tester.printSummary();}  }
class C{  public void testCreateStandaloneLocalConfigurationWhenNoHomeDirectorySpecified(){  this.factory.registerConfiguration("testableContainerId",ContainerType.INSTALLED,ConfigurationType.STANDALONE,StandaloneLocalConfigurationStub.class);  LocalConfiguration configuration=(LocalConfiguration)this.factory.createConfiguration("testableContainerId",ContainerType.INSTALLED,ConfigurationType.STANDALONE);  assertEquals(new DefaultFileHandler().getTmpPath("conf"),configuration.getHome());}  }
class C{  public void visitEnd(){  if (mv != null) {    mv.visitEnd();  }}  }
class C{  protected ExpressionNode toExpression(ValueNode valueNode) throws StandardException {  return toExpression(valueNode,null);}  }
class C{  private void processStartedState(State currentState) throws Throwable {switch (currentState.taskState.subStage) {case PAUSE_SOURCE_SYSTEM:    pauseSourceSystem(currentState);  break;case STOP_MIGRATE_TASKS:stopMigrateTasks(currentState);break;case MIGRATE_FINAL:migrateFinal(currentState);break;case REINSTALL_AGENTS:reinstallAgents(currentState);break;case UPGRADE_AGENTS:upgradeAgents(currentState);break;case RESUME_DESTINATION_SYSTEM:resumeDestinationSystem(currentState);break;}}  }
class C{  public PhraseCondition slop(Integer slop){  this.slop=slop;  return this;}  }
class C{  @CanIgnoreReturnValue public MapMaker concurrencyLevel(int concurrencyLevel){  checkState(this.concurrencyLevel == UNSET_INT,"concurrency level was already set to %s",this.concurrencyLevel);  checkArgument(concurrencyLevel > 0);  this.concurrencyLevel=concurrencyLevel;  return this;}  }
class C{  public ASN1Primitive toASN1Primitive(){  ASN1EncodableVector v=new ASN1EncodableVector();  v.add(oriType);  v.add(oriValue);  return new DERSequence(v);}  }
class C{  public void log(Level level,Throwable throwable,String msg,Object arg0){  innerLog(level,throwable,msg,arg0,UNKNOWN_ARG,UNKNOWN_ARG,null);}  }
class C{  public Airhead(String sidc){  super(sidc);  this.setShowHostileIndicator(false);}  }
class C{  public TrueType(final PdfObjectReader current_pdf_file,final String substituteFont){  glyphs=new TTGlyphs();  init(current_pdf_file);  this.substituteFont=substituteFont;}  }
class C{  void prepareSim(){  if (events == null) {    throw new RuntimeException("No valid Events Object (events == null)");  }  createAgents();  this.initSimTimer();  this.infoTime=Math.floor(this.simTimer.getSimStartTime() / INFO_PERIOD) * INFO_PERIOD;  for (  MobsimEngine mobsimEngine : this.mobsimEngines) {    mobsimEngine.onPrepareSim();  }}  }
class C{  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (xmlWriter.getPrefix(namespace) == null) {    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  xmlWriter.writeAttribute(namespace,attName,attValue);}  }
class C{  public boolean isRolledBack(){  return rolledBack;}  }
class C{  static public void assertEquals(String message,String expected,String actual){  if (expected == null && actual == null) {    return;  }  if (expected != null && expected.equals(actual)) {    return;  }  String cleanMessage=message == null ? "" : message;  throw new ComparisonFailure(cleanMessage,expected,actual);}  }
class C{  public Builder sendBufferSize(int sendBufferSize){  this.sendBufferSize=sendBufferSize;  return this;}  }
class C{  @Inject protected PreferencesPresenter(PreferencesView view,Set<PreferencePagePresenter> preferences,DialogFactory dialogFactory,CoreLocalizationConstant locale,Set<PreferencesManager> managers,Provider<NotificationManager> notificationManagerProvider){  this.view=view;  this.preferences=preferences;  this.dialogFactory=dialogFactory;  this.locale=locale;  this.managers=managers;  this.notificationManagerProvider=notificationManagerProvider;  this.view.setDelegate(this);  for (  PreferencePagePresenter preference : preferences) {    preference.setUpdateDelegate(this);  }}  }
class C{  public Property millisOfSecond(){  return new Property(this,getChronology().millisOfSecond());}  }
class C{  private void openLog(){  closeLogStream();  WriteStream os=_os;  _os=null;  IoUtil.close(os);  Path path=getPath();  if (path == null) {    path=getPath(CurrentTime.currentTime());  }  Path parent=path.getParent();  try {    if (!Files.isDirectory(parent)) {      Files.createDirectory(parent);    }  } catch (  Exception e) {    logWarning(L.l("Can't create log directory {0}.\n  Exception={1}",parent,e),e);  }  Exception exn=null;  for (int i=0; i < 3 && _os == null; i++) {    try {      OutputStream out=Files.newOutputStream(path,StandardOpenOption.APPEND);      _os=new WriteStream(out);    } catch (    IOException e) {      exn=e;    }  }  String pathName=path.toString();  try {    if (pathName.endsWith(".gz")) {      _zipOut=_os;      _os=new WriteStream(new GZIPOutputStream(_zipOut));    } else     if (pathName.endsWith(".zip")) {      throw new ConfigException("Can't support .zip in path-format");    }  } catch (  Exception e) {    if (exn == null)     exn=e;  }  if (exn != null)   logWarning(L.l("Can't create log for {0}.\n  User={1} Exception={2}",path,System.getProperty("user.name"),exn),exn);}  }
class C{  public boolean containsDocument(String docId){  return dbConnector.contains(docId);}  }
class C{  public DMSLatLonPoint(boolean lat_isnegative,int lat_degrees,int lat_minutes,double lat_seconds,boolean lon_isnegative,int lon_degrees,int lon_minutes,double lon_seconds){  this.lat_isnegative=lat_isnegative;  this.lat_degrees=(int)LatLonPoint.normalizeLatitude(lat_degrees);  if (this.lat_degrees < 0) {    this.lat_degrees=-this.lat_degrees;  }  this.lat_minutes=normalize_value(lat_minutes);  this.lat_seconds=normalize_value(lat_seconds);  this.lon_isnegative=lon_isnegative;  this.lon_degrees=(int)LatLonPoint.wrapLongitude(lon_degrees);  if (this.lon_degrees < 0) {    this.lon_degrees=-this.lon_degrees;  }  this.lon_minutes=normalize_value(lon_minutes);  this.lon_seconds=normalize_value(lon_seconds);}  }
class C{  public static void load(URL url,Object holder){  try {    load(url.openStream(),holder);  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public double[] asDegreesArray(){  return new double[]{this.getMinLatitude().degrees,this.getMaxLatitude().degrees,this.getMinLongitude().degrees,this.getMaxLongitude().degrees};}  }
class C{  public ConstantValue_attribute findConstantValue_attribute(){  int i;  for (i=0; i < attributes_count; i++) {    if ((attributes[i]) instanceof ConstantValue_attribute)     return (ConstantValue_attribute)(attributes[i]);  }  return null;}  }
class C{  @Override public ServiceExceptionQueueFull rethrow(String msg){  return new ServiceExceptionQueueFull(msg,this);}  }
class C{  public Result checkAutoPopup(char charTyped,final Project project,final Editor editor,final PsiFile file){  return Result.CONTINUE;}  }
class C{  private static void updatePreviousFiles(final List<String> lastDirectories,final List<File> selectedFiles){  final int MAXIMUM_LIST_SIZE=5;  final Set<String> selectedDirectories=new LinkedHashSet<String>();  for (  final File file : selectedFiles) {    selectedDirectories.add(file.getParent());    if (selectedDirectories.size() == MAXIMUM_LIST_SIZE) {      break;    }  }  for (  final String lastDirectory : lastDirectories) {    selectedDirectories.add(lastDirectory);    if (selectedDirectories.size() == MAXIMUM_LIST_SIZE) {      break;    }  }  lastDirectories.clear();  lastDirectories.addAll(selectedDirectories);}  }
class C{  public Bundler putByte(String key,byte value){  bundle.putByte(key,value);  return this;}  }
class C{  private URI verifyFullCopyForCopyRequest(URI fullCopyURI,List<Volume> cgVolumes){  Volume fullCopyVolume=(Volume)BlockFullCopyUtils.queryFullCopyResource(fullCopyURI,uriInfo,true,_dbClient);  URI fcSourceURI=fullCopyVolume.getAssociatedSourceVolume();  if (NullColumnValueGetter.isNullURI(fcSourceURI)) {    throw APIException.badRequests.fullCopyOperationNotAllowedNotAFullCopy(fullCopyVolume.getLabel());  }  boolean sourceInCG=false;  for (  Volume cgVolume : cgVolumes) {    if (cgVolume.getId().equals(fcSourceURI)) {      sourceInCG=true;      break;    }  }  if (!sourceInCG) {    throw APIException.badRequests.fullCopyOperationNotAllowedSourceNotInCG(fullCopyVolume.getLabel());  }  return fcSourceURI;}  }
class C{  private Compile(){}  }
class C{  public Object remove(int index){  Object o=this.opt(index);  this.myArrayList.remove(index);  return o;}  }
class C{  public static Collection toCollection(Object o,Collection defaultValue){  if (o instanceof Collection)   return (Collection)o; else   if (o instanceof Node)   return XMLCaster.toXMLStruct((Node)o,false); else   if (o instanceof Map) {    return MapAsStruct.toStruct((Map)o,true);  } else   if (o instanceof ObjectWrap) {    return toCollection(((ObjectWrap)o).getEmbededObject(defaultValue),defaultValue);  } else   if (Decision.isArray(o)) {    try {      return toArray(o);    } catch (    PageException e) {      return defaultValue;    }  }  return defaultValue;}  }
class C{  public Period add(final Period another){  return this.clone().addAssign(another);}  }
class C{  public boolean hasCommonNode(final Way way){  for (  Node n : this.nodes) {    if (way.hasNode(n)) {      return true;    }  }  return false;}  }
class C{  public StrongholdPacket(int a,int b,int c){  x=a;  y=b;  z=c;  username="";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:17.820 -0500",hash_original_method="049F8D965694C2AF1DDE3DF681E296F3",hash_generated_method="39CF216D327B4F6D26F037E3F187D898") public static boolean isNumericString(String str){  for (int i=str.length() - 1; i >= 0; i--) {    char ch=str.charAt(i);    if (ch > 0x007f) {      return false;    }    if (('0' <= ch && ch <= '9') || ch == ' ') {      continue;    }    return false;  }  return true;}  }
class C{  public static void main(String[] args) throws Exception {  boolean addedClasses=false;  Builder builder=new Builder();  for (int i=0; i < args.length; i++) {    if ("-help".equals(args[i]) || "--help".equals(args[i])) {      printHelp();      System.exit(0);    } else     if ("-classpath".equals(args[i]) || "-cp".equals(args[i]) || "-lib".equals(args[i])) {      builder.classPaths(args[++i]);    } else     if ("-d".equals(args[i])) {      builder.outputDirectory(args[++i]);    } else     if ("-o".equals(args[i])) {      builder.outputName(args[++i]);    } else     if ("-cpp".equals(args[i]) || "-nocompile".equals(args[i])) {      builder.compile(false);    } else     if ("-header".equals(args[i])) {      builder.header(true);    } else     if ("-copylibs".equals(args[i])) {      builder.copyLibs(true);    } else     if ("-jarprefix".equals(args[i])) {      builder.jarPrefix(args[++i]);    } else     if ("-properties".equals(args[i])) {      builder.properties(args[++i]);    } else     if ("-propertyfile".equals(args[i])) {      builder.propertyFile(args[++i]);    } else     if (args[i].startsWith("-D")) {      builder.property(args[i]);    } else     if ("-Xcompiler".equals(args[i])) {      builder.compilerOptions(args[++i]);    } else     if (args[i].startsWith("-")) {      builder.logger.error("Invalid option \"" + args[i] + "\"");      printHelp();      System.exit(1);    } else {      builder.classesOrPackages(args[i]);      addedClasses=true;    }  }  if (!addedClasses) {    builder.classesOrPackages((String[])null);  }  builder.build();}  }
class C{  public void release() throws ReplicatorException {  try {    doShutdown(new TungstenProperties());    properties=null;  } catch (  Throwable e) {    logger.error("Replicator service shutdown failed due to underlying error: ",e);    throw new ReplicatorException("Replicator service shutdown failed due to underlying error: " + e);  }  purgeService.shutdownNow();}  }
class C{  public static UriParameterMap parse(String query,Charset encoding){  checkNotNull(query);  UriParameterMap map=new UriParameterMap();  map.merge(query,encoding);  return map;}  }
class C{  TreeBin(TreeNode<K> b){  super(TREEBIN,null,null);  this.first=b;  TreeNode<K> r=null;  for (TreeNode<K> x=b, next; x != null; x=next) {    next=(TreeNode<K>)x.next;    x.left=x.right=null;    if (r == null) {      x.parent=null;      x.red=false;      r=x;    } else {      K k=x.key;      int h=x.hash;      Class<?> kc=null;      for (TreeNode<K> p=r; ; ) {        int dir, ph;        K pk=p.key;        if ((ph=p.hash) > h)         dir=-1; else         if (ph < h)         dir=1; else         if ((kc == null && (kc=comparableClassFor(k)) == null) || (dir=compareComparables(kc,k,pk)) == 0)         dir=tieBreakOrder(k,pk);        TreeNode<K> xp=p;        if ((p=(dir <= 0) ? p.left : p.right) == null) {          x.parent=xp;          if (dir <= 0)           xp.left=x; else           xp.right=x;          r=balanceInsertion(r,x);          break;        }      }    }  }  this.root=r;  assert checkInvariants(root);}  }
class C{  @Override public boolean batchFinished() throws Exception {  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (!isOutputFormatDefined()) {    m_hasClass=(getInputFormat().classIndex() >= 0);    m_trainSelector.setEvaluator(m_ASEvaluator);    m_trainSelector.setSearch(m_ASSearch);    m_trainSelector.SelectAttributes(getInputFormat());    m_SelectedAttributes=m_trainSelector.selectedAttributes();    if (m_SelectedAttributes == null) {      throw new Exception("No selected attributes\n");    }    setOutputFormat();    for (int i=0; i < getInputFormat().numInstances(); i++) {      convertInstance(getInputFormat().instance(i));    }    flushInput();  }  m_NewBatch=true;  return (numPendingOutput() != 0);}  }
class C{  public Writer write(Writer writer) throws JSONException {  return this.write(writer,0,0);}  }
class C{  public void init(Socket s){  _s=s;  _is=null;  _os=null;  _needsFlush=false;}  }
class C{  public SIPHeader parse() throws ParseException {  if (debug)   dbg_enter("AuthenticationInfoParser.parse");  try {    headerName(TokenTypes.AUTHENTICATION_INFO);    AuthenticationInfo authenticationInfo=new AuthenticationInfo();    authenticationInfo.setHeaderName(SIPHeaderNames.AUTHENTICATION_INFO);    this.lexer.SPorHT();    NameValue nv=super.nameValue();    authenticationInfo.setParameter(nv);    this.lexer.SPorHT();    while (lexer.lookAhead(0) == ',') {      this.lexer.match(',');      this.lexer.SPorHT();      nv=super.nameValue();      authenticationInfo.setParameter(nv);      this.lexer.SPorHT();    }    this.lexer.SPorHT();    return authenticationInfo;  }  finally {    if (debug)     dbg_leave("AuthenticationInfoParser.parse");  }}  }
class C{  public static NeuronDialog createNeuronDialog(final Collection<NeuronNode> selectedNeurons){  NeuronDialog nd=new NeuronDialog(selectedNeurons);  nd.neuronPropertiesPanel=NeuronPropertiesPanel.createNeuronPropertiesPanel(nd.neuronList,nd);  nd.init();  nd.addListeners();  nd.updateHelp();  return nd;}  }
class C{  public void mark(final Label label){  mv.visitLabel(label);}  }
class C{  boolean hasFired(){  int status=getSequenceStatus();  return (status == SEQUENCE_FINISHED);}  }
class C{  private void index(Resource resource,URI uri,ResourceDescriptionsData index){  if (isJsFile(uri)) {    IN4JSSourceContainer sourceContainer=findN4JSSourceContainer(uri).orNull();    if (null == sourceContainer) {      return;    }  }  IResourceServiceProvider serviceProvider=resourceServiceProviderRegistry.getResourceServiceProvider(uri);  if (serviceProvider != null) {    IResourceDescription resourceDescription=serviceProvider.getResourceDescriptionManager().getResourceDescription(resource);    if (resourceDescription != null) {      index.addDescription(uri,resourceDescription);    }  }}  }
class C{  public Builder(String host,int port){  this.host=host;  this.port=Integer.toString(port);}  }
class C{  public final void update(byte[] data) throws SignatureException {  update(data,0,data.length);}  }
class C{  public void backupFilesToSetName(String setName) throws IOException {  validateNotNullOrEmpty(setName);  copyBackupSet(getOperationsRoot(),new File(getBackupRoot(),setName));}  }
class C{  public void testNonexistingLogFile() throws Exception {  File logDir=prepareLogDir("testNonexistingLogFile");  DiskLog log=openLog(logDir,false);  writeEventsToLog(log,0,3);  LogConnection conn=log.connect(true);  String[] names=log.getLogFileNames();  for (  String name : names) {    assertTrue(conn.seek(name));  }  assertFalse(conn.seek("does-not-exist.dat"));  conn.release();  log.release();}  }
class C{  public void sendDirect(byte[] sqlBytes,int offset,int sqlLength,byte commandType) throws IOException, QueryException {  if (isClosed())   throw new IOException("Stream has already closed");  int seqNo=0;  setCompressSeqNo(0);  if (sqlLength + (useCompression ? 5 : 1) > getMaxAllowedPacket()) {    throw new QueryException("Could not send query: query size " + (sqlLength + (useCompression ? 5 : 1)) + " is >= to max_allowed_packet ("+ maxAllowedPacket+ ")",-1,INTERRUPTED_EXCEPTION);  }  if (!isUseCompression()) {    if (sqlLength + 1 <= maxPacketSize) {      byte[] packetBuffer=new byte[sqlLength + 5];      packetBuffer[0]=(byte)((sqlLength + 1) & 0xff);      packetBuffer[1]=(byte)((sqlLength + 1) >>> 8);      packetBuffer[2]=(byte)((sqlLength + 1) >>> 16);      packetBuffer[3]=(byte)seqNo++;      packetBuffer[4]=commandType;      System.arraycopy(sqlBytes,offset,packetBuffer,5,sqlLength);      if (logger.isTraceEnabled()) {        logger.trace("send packet seq:" + seqNo + " length:"+ (sqlLength + 1)+ " data:"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,sqlLength + 1));      }      outputStream.write(packetBuffer);    } else {      byte[] packetBuffer=new byte[maxPacketSize + 4];      packetBuffer[0]=(byte)(maxPacketSize & 0xff);      packetBuffer[1]=(byte)(maxPacketSize >>> 8);      packetBuffer[2]=(byte)(maxPacketSize >>> 16);      packetBuffer[3]=(byte)seqNo++;      packetBuffer[4]=commandType;      System.arraycopy(sqlBytes,offset,packetBuffer,5,maxPacketSize - 1);      int lengthAlreadySend=maxPacketSize - 1;      if (logger.isTraceEnabled()) {        logger.trace("send packet seq:" + seqNo + " length:"+ maxPacketSize+ " data:"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,maxPacketSize));      }      outputStream.write(packetBuffer);      int length;      while ((length=sqlLength - lengthAlreadySend) > 0) {        if (length > maxPacketSize) {          packetBuffer[0]=(byte)(maxPacketSize & 0xff);          packetBuffer[1]=(byte)(maxPacketSize >>> 8);          packetBuffer[2]=(byte)(maxPacketSize >>> 16);          packetBuffer[3]=(byte)seqNo++;          System.arraycopy(sqlBytes,offset + lengthAlreadySend,packetBuffer,4,maxPacketSize);          if (logger.isTraceEnabled()) {            logger.trace("send packet seq:" + seqNo + " length:"+ maxPacketSize+ " data:"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,maxPacketSize));          }          outputStream.write(packetBuffer);          lengthAlreadySend+=maxPacketSize;        } else {          packetBuffer[0]=(byte)(length & 0xff);          packetBuffer[1]=(byte)(length >>> 8);          packetBuffer[2]=(byte)(length >>> 16);          packetBuffer[3]=(byte)seqNo++;          System.arraycopy(sqlBytes,offset + lengthAlreadySend,packetBuffer,4,length);          if (logger.isTraceEnabled()) {            logger.trace("send packet seq:" + seqNo + " length:"+ length+ " data:"+ Utils.hexdump(packetBuffer,maxQuerySizeToLog,4,length));          }          outputStream.write(packetBuffer,0,length + 4);          break;        }      }    }  } else {    if (sqlLength < maxPacketSize) {      byte[] packetBuffer=new byte[sqlLength + 5];      packetBuffer[0]=(byte)((sqlLength + 1) & 0xff);      packetBuffer[1]=(byte)((sqlLength + 1) >>> 8);      packetBuffer[2]=(byte)((sqlLength + 1) >>> 16);      packetBuffer[3]=(byte)0;      packetBuffer[4]=commandType;      System.arraycopy(sqlBytes,offset,packetBuffer,5,sqlLength);      compressedAndSend(sqlLength + 5,packetBuffer,true);    } else {      final int expectedPacketSize=sqlLength + 1 + 4 * (((sqlLength + 1) / maxPacketSize) + 1);      byte[] packetBuffer=new byte[expectedPacketSize];      packetBuffer[0]=(byte)(maxPacketSize & 0xff);      packetBuffer[1]=(byte)(maxPacketSize >>> 8);      packetBuffer[2]=(byte)(maxPacketSize >>> 16);      packetBuffer[3]=(byte)seqNo++;      packetBuffer[4]=commandType;      System.arraycopy(sqlBytes,offset,packetBuffer,5,maxPacketSize - 1);      int sqlBytesPosition=maxPacketSize - 1;      int positionDest=maxPacketSize + 4;      int length;      while ((length=sqlLength - sqlBytesPosition) > 0) {        if (length > maxPacketSize) {          packetBuffer[positionDest++]=(byte)(maxPacketSize & 0xff);          packetBuffer[positionDest++]=(byte)(maxPacketSize >>> 8);          packetBuffer[positionDest++]=(byte)(maxPacketSize >>> 16);          packetBuffer[positionDest++]=(byte)seqNo++;          System.arraycopy(sqlBytes,offset + sqlBytesPosition,packetBuffer,positionDest,maxPacketSize);          sqlBytesPosition+=maxPacketSize;          positionDest+=maxPacketSize;        } else {          packetBuffer[positionDest++]=(byte)(length & 0xff);          packetBuffer[positionDest++]=(byte)(length >>> 8);          packetBuffer[positionDest++]=(byte)(length >>> 16);          packetBuffer[positionDest++]=(byte)seqNo++;          System.arraycopy(sqlBytes,offset + sqlBytesPosition,packetBuffer,positionDest,length);          break;        }      }      compressedAndSend(expectedPacketSize,packetBuffer,true);    }  }}  }
class C{  public static void checkGLError(String label){  int error;  while ((error=GLES20.glGetError()) != GLES20.GL_NO_ERROR) {    Log.e(TAG,label + ": glError " + error);    throw new RuntimeException(label + ": glError " + error);  }}  }
class C{  @Override public void execute(){  getArgs().setCounter(0);  executeImpl();}  }
class C{  public static boolean implementsZeroArgMethod(ClassNode classNode,String methodName){  return implementsMethod(classNode,methodName,new Class[0]);}  }
class C{  public static MethodNode findSAM(ClassNode type){  if (!Modifier.isAbstract(type.getModifiers()))   return null;  if (type.isInterface()) {    List<MethodNode> methods=type.getMethods();    MethodNode found=null;    for (    MethodNode mi : methods) {      if (!Modifier.isAbstract(mi.getModifiers()))       continue;      if (Traits.hasDefaultImplementation(mi))       continue;      if (mi.getDeclaringClass().equals(OBJECT_TYPE))       continue;      if (OBJECT_TYPE.getDeclaredMethod(mi.getName(),mi.getParameters()) != null)       continue;      if (found != null)       return null;      found=mi;    }    return found;  } else {    List<MethodNode> methods=type.getAbstractMethods();    MethodNode found=null;    if (methods != null) {      for (      MethodNode mi : methods) {        if (!hasUsableImplementation(type,mi)) {          if (found != null)           return null;          found=mi;        }      }    }    return found;  }}  }
class C{  Entry(Object key,Object value,Entry parent){  this.key=key;  this.value=value;  this.parent=parent;}  }
class C{  public SQLOpenStatement parseOpen(){  SQLOpenStatement stmt=new SQLOpenStatement();  accept(Token.OPEN);  stmt.setCursorName(exprParser.name().getSimpleName());  accept(Token.SEMI);  return stmt;}  }
class C{  public void entityReference(String name) throws org.xml.sax.SAXException {  append(m_doc.createEntityReference(name));}  }
class C{  public void addEntry(Label l,int line){  pc.addElement(l);  this.line.addElement(new Integer(line));}  }
class C{  public static Uri PathToUri(String path){  return Uri.fromFile(new File(path));}  }
class C{  public static String doubleToString(double d){  if (Double.isInfinite(d) || Double.isNaN(d)) {    return "null";  }  String string=Double.toString(d);  if (string.indexOf('.') > 0 && string.indexOf('e') < 0 && string.indexOf('E') < 0) {    while (string.endsWith("0")) {      string=string.substring(0,string.length() - 1);    }    if (string.endsWith(".")) {      string=string.substring(0,string.length() - 1);    }  }  return string;}  }
class C{  public boolean equals(Object other){  if (other instanceof DerInputBuffer)   return equals((DerInputBuffer)other); else   return false;}  }
class C{  public boolean containsValue(NSObject val){  return val != null && dict.containsValue(val);}  }
class C{  public boolean wasAtRest(){  return mWasAtRest;}  }
class C{  public boolean isSourceBalanced(){  if (m_lines.size() == 0 || m_doc.isMultiCurrency())   return true;  BigDecimal balance=getSourceBalance();  boolean retValue=balance.signum() == 0;  if (retValue)   log.finer(toString()); else   log.warning("NO - Diff=" + balance + " - "+ toString());  return retValue;}  }
class C{  public static StackMap make2(ClassPool classes,MethodInfo minfo) throws BadBytecode {  CodeAttribute ca=minfo.getCodeAttribute();  if (ca == null)   return null;  TypedBlock[] blocks;  try {    blocks=TypedBlock.makeBlocks(minfo,ca,true);  } catch (  BasicBlock.JsrBytecode e) {    return null;  }  if (blocks == null)   return null;  MapMaker mm=new MapMaker(classes,minfo,ca);  try {    mm.make(blocks,ca.getCode());  } catch (  BadBytecode bb) {    throw new BadBytecode(minfo,bb);  }  return mm.toStackMap2(minfo.getConstPool(),blocks);}  }
class C{  public org.apache.nutch.storage.WebPage.Builder clearPrevSignature(){  prevSignature=null;  fieldSetFlags()[11]=false;  return this;}  }
class C{  private void updateItem(ObligationStatus status){  int id=status.getId();  if (id != -1) {    ExpandItem item=items.get(new Integer(id));    if (!ProverHelper.isInterestingObligation(status)) {      if (item != null) {        removeItem(item);      }      return;    }    if (item == null) {      item=new ExpandItem(bar,SWT.None,0);      item.setData(KEY,new Integer(id));      Composite oblWidget=new Composite(bar,SWT.LINE_SOLID);      GridLayout gl=new GridLayout(1,true);      gl.marginWidth=0;      gl.marginHeight=0;      oblWidget.setLayout(gl);      Composite buttonsWidget=new Composite(oblWidget,SWT.LINE_SOLID);      GridLayout buttonsGl=new GridLayout(2,true);      buttonsGl.marginWidth=0;      buttonsGl.marginHeight=0;      buttonsWidget.setLayout(buttonsGl);      buttonsWidget.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));      Button stopButton=new Button(buttonsWidget,SWT.PUSH);      stopButton.setText("Stop Proving");      stopButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));      stopButton.setData(status.getObMarker());      stopButton.addSelectionListener(stopObListener);      item.setControl(oblWidget);      item.setData(KEY_BUTTON,stopButton);      Button gotoButton=new Button(buttonsWidget,SWT.PUSH);      gotoButton.setText("Goto Obligation");      gotoButton.setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));      gotoButton.setData(status.getObMarker());      gotoButton.addSelectionListener(gotoObListener);      SourceViewer viewer=new SourceViewer(oblWidget,null,SWT.READ_ONLY | SWT.MULTI | SWT.H_SCROLL);      viewer.getTextWidget().setLayoutData(new GridData(SWT.FILL,SWT.FILL,true,true));      viewer.configure(new ObligationSourceViewerConfiguration());      viewer.getControl().setFont(JFaceResources.getTextFont());      fontListener.addControl(viewer.getControl());      viewers.put(item,viewer);      item.setControl(oblWidget);      item.setExpanded(true);      item.setData(status.getObMarker());      viewer.getTextWidget().setData(status.getObMarker());      oblWidget.setData(status.getObMarker());      item.addListener(SWT.MouseDown,obClickListener);      items.put(new Integer(id),item);    }    item.setText("Obligation " + id + " - status : "+ status.getProverStatusString());    Button button=(Button)item.getData(KEY_BUTTON);    button.setEnabled(ProverHelper.isBeingProvedObligation(status));    SourceViewer viewer=(SourceViewer)viewers.get(item);    Assert.isNotNull(viewer,"Expand item has been created without a source viewer. This is a bug.");    String oblString=status.getObligationString();    if (oblString == null) {      oblString="";    }    if ((viewer.getDocument() == null || !viewer.getDocument().get().equals(oblString)) && !(oblString.length() == 0)) {      viewer.setDocument(new Document(oblString.trim()));      item.setHeight(item.getControl().computeSize(SWT.DEFAULT,SWT.DEFAULT,true).y);    } else     if (oblString.length() == 0 && (viewer.getDocument() == null || viewer.getDocument().get().length() == 0)) {      viewer.setDocument(new Document("No obligation text available."));      item.setHeight(100);    }  }}  }
class C{  public static int parseInt(final String s){  return parseIntDefault(s,0);}  }
class C{  public PathTool(SVGPathFigure pathPrototype,SVGBezierFigure bezierPrototype){  this(pathPrototype,bezierPrototype,null);}  }
class C{  void breakLines(){  for (int i=0, last=tokens.size() - 1; i <= last; ++i) {    String tok=tokens.get(i);    if (!" ".equals(tok)) {      continue;    }    String prev=i != 0 ? tokens.get(i - 1) : null;    String next=i != last ? tokens.get(i + 1) : null;    boolean isBreak;    if ("{".equals(prev)) {      isBreak=!isShortRun(i,match[i - 1]);    } else     if ("}".equals(next)) {      isBreak=!isShortRun(match[i + 1],i);    } else     if (";".equals(prev)) {      isBreak=!parenthetical[i];    } else     if ("}".equals(prev)) {      if ("else".equals(next) || "catch".equals(next) || "finally".equals(next)) {        isBreak=false;      } else       if ("while".equals(next)) {        isBreak=true;        int open=match[i - 1];        if (open > 0) {          for (int j=open; --j >= 0; ) {            String t=tokens.get(j);            if ("do".equals(t)) {              isBreak=false;              break;            }            if (!(TokenClassification.isComment(t) || Character.isWhitespace(t.charAt(0)))) {              break;            }          }        }      } else {        isBreak=true;      }    } else     if (prev != null && TokenClassification.isComment(prev)) {      isBreak=breakAfterComment;    } else {      isBreak=false;    }    if (isBreak) {      if (next != null && TokenClassification.isComment(next) && i + 2 <= last) {        String next2=tokens.get(i + 2);        if ("\n".equals(next2) || " ".equals(next2)) {          tokens.set(i + 2,"\n");          isBreak=false;        }      }      if (isBreak) {        tokens.set(i,"\n");      }    }  }}  }
class C{  DestinationChangeMessage(final String destination,final boolean add){  m_add=add;  m_destination=destination;}  }
class C{  public static String checkLogin(HttpServletRequest request,HttpServletResponse response){  GenericValue userLogin=(GenericValue)request.getSession().getAttribute("userLogin");  if (userLogin != null && "anonymous".equals(userLogin.getString("userLoginId"))) {    userLogin=null;  }  if (userLogin != null) {    Element rootElement=getRootElement(request);    boolean hasLdapLoggedOut=false;    if (rootElement != null) {      String className=UtilXml.childElementValue(rootElement,"AuthenticationHandler","org.ofbiz.ldap.openldap.OFBizLdapAuthenticationHandler");      try {        Class<?> handlerClass=Class.forName(className);        InterfaceOFBizAuthenticationHandler authenticationHandler=(InterfaceOFBizAuthenticationHandler)handlerClass.newInstance();        hasLdapLoggedOut=authenticationHandler.hasLdapLoggedOut(request,response,rootElement);      } catch (      ClassNotFoundException e) {        Debug.logError(e,"Error calling checkLogin service",module);        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);      }catch (      InstantiationException e) {        Debug.logError(e,"Error calling checkLogin service",module);        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);      }catch (      IllegalAccessException e) {        Debug.logError(e,"Error calling checkLogin service",module);        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);      }catch (      Exception e) {        Debug.logError(e,"Error calling checkLogin service",module);        Map<String,String> messageMap=UtilMisc.toMap("errorMessage",e.getMessage());        String errMsg=UtilProperties.getMessage(resourceWebapp,"loginevents.following_error_occurred_during_login",messageMap,UtilHttp.getLocale(request));        request.setAttribute("_ERROR_MESSAGE_",errMsg);      }    }    if (!hasBasePermission(userLogin,request) || isFlaggedLoggedOut(userLogin,userLogin.getDelegator()) || hasLdapLoggedOut) {      Debug.logInfo("User does not have permission or is flagged as logged out",module);      doBasicLogout(userLogin,request,response);      userLogin=null;    }  }  if (userLogin == null) {    return login(request,response);  }  return "success";}  }
class C{  private void writeFileFromResourceLocation(String resourceLocation,Path configPath,Path outputPath,int refreshInterval) throws Exception {  String log4JFileContents=IOUtils.toString(resourceLoader.getResource(resourceLocation).getInputStream());  log4JFileContents=log4JFileContents.replace(LOG4J_FILENAME_TOKEN,outputPath.toAbsolutePath().toString().replace("\\","/"));  log4JFileContents=log4JFileContents.replace("monitorInterval=\"0\"","monitorInterval=\"" + refreshInterval + "\"");  try (FileOutputStream fileOutputStream=new FileOutputStream(configPath.toAbsolutePath().toString())){    IOUtils.write(log4JFileContents,fileOutputStream);  } }  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  String value=getString(stack);  String setting=getString(stack);  sage.plugin.PluginWrapper pluggy=getPlugin(stack);  if (pluggy != null) {    if (pluggy.isServerPluginInfo()) {      stack.push(pluggy);      stack.push(setting);      stack.push(value);      return makeNetworkedCall(stack);    }    SageTVPlugin realPlug=sage.plugin.CorePluginManager.getInstance().getRealPlugin(pluggy.getId());    if (realPlug != null) {      if (stack.getUIMgr() != null) {        Catbert.uiContextThreadNames.set(stack.getUIMgr().getLocalUIClientName());      }      try {        realPlug.setConfigValue(setting,value);      } catch (      Throwable t) {        return t.toString();      }    }  }  return null;}  }
class C{  public ViPRCatalogClient2 withProxyToken(String token){  setProxyToken(token);  return this;}  }
class C{  private void wrap(int[] cellXY,BoundSize gapSize){  boolean flowx=lc.isFlowX();  cellXY[0]=flowx ? 0 : cellXY[0] + 1;  cellXY[1]=flowx ? cellXY[1] + 1 : 0;  if (gapSize != null) {    if (wrapGapMap == null)     wrapGapMap=new HashMap<Integer,BoundSize>(8);    wrapGapMap.put(cellXY[flowx ? 1 : 0],gapSize);  }  if (flowx) {    rowIndexes.add(cellXY[1]);  } else {    colIndexes.add(cellXY[0]);  }}  }
class C{  public SyntaxScheme(Font baseFont){  styles=new Style[Token.NUM_TOKEN_TYPES];  restoreDefaults(baseFont);}  }
class C{  public boolean isSentToP2SH(){  return chunks.size() == 3 && chunks.get(0).equalsOpCode(OP_HASH160) && chunks.get(1).data.length == Address.LENGTH && chunks.get(2).equalsOpCode(OP_EQUAL);}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public static FirstProjectionExpression first(Expression expression){  return new FirstProjectionExpression(expression);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-24 15:47:28.891 -0500",hash_original_method="00DBA8C010B7C6EA5434D2AA9DA14C52",hash_generated_method="15BD38599AF7D061ABB2FD3E07715A6F") @DSVerified @DSSafe(DSCat.UTIL_FUNCTION) public static byte[] md5(byte[] data){  return getMd5Digest().digest(data);}  }
class C{  @Override public ConnectionConsumer createDurableConnectionConsumer(final Topic topic,final String subscriptionName,final String messageSelector,final ServerSessionPool sessionPool,final int maxMessages) throws JMSException {  if (ActiveMQRASessionFactoryImpl.trace) {    ActiveMQRALogger.LOGGER.trace("createConnectionConsumer(" + topic + ", "+ subscriptionName+ ", "+ messageSelector+ ", "+ sessionPool+ ", "+ maxMessages+ ")");  }  throw new IllegalStateException(ISE);}  }
class C{  protected static void checkGetAndDestroy(){  assertNull(TXLockService.getDTLS());  TXLockService dtls=TXLockService.createDTLS();  assertNotNull(dtls);  assertEquals(true,dtls == TXLockService.getDTLS());  assertEquals(false,dtls.isDestroyed());  TXLockService.destroyServices();  assertEquals(true,dtls.isDestroyed());  assertNull(TXLockService.getDTLS());  dtls=TXLockService.createDTLS();  assertNotNull(dtls);  assertEquals(true,dtls == TXLockService.getDTLS());  assertEquals(false,dtls.isDestroyed());}  }
class C{  public void writeEntityToNBT(NBTTagCompound tagCompound){  super.writeEntityToNBT(tagCompound);  tagCompound.setByte("BatFlags",this.dataWatcher.getWatchableObjectByte(16));}  }
class C{  public String toString(){  return "(" + priority + "): "+ content;}  }
class C{  public void put(ByteBuffer src,int length){  while (length > 0) {    ByteBuffer dst=getWriteChunk();    int n=Math.min(dst.remaining(),length);    copy(src,dst,n);    length-=n;  }}  }
class C{  public InterIamb(IndependenceTest test){  if (test == null) {    throw new NullPointerException();  }  this.independenceTest=test;  this.variables=test.getVariables();}  }
class C{  public void addArgument(String key,String value){  if (post) {    addArg(Util.encodeBody(key),Util.encodeBody(value));  } else {    addArg(Util.encodeUrl(key),Util.encodeUrl(value));  }}  }
class C{  public UISourceViewer(){  super(new BorderLayout());  initComponent();}  }
class C{  public static boolean isSystemDatatype(RDFNode node){  if (node instanceof Resource && node.isURIResource()) {    String uri=((Resource)node).getURI();    return isNumeric(uri) || otherDatatypeURIs.contains(uri);  } else {    return false;  }}  }
class C{  protected int forceAdd(T dl,int row){  _indexes.put(dl.getInitializeObject(),new Integer(row));  int addedAt=super.add(dl,row);  remapIndexes(addedAt + 1);  return addedAt;}  }
class C{  private Group findGroupByObjectId(String tenantName,String groupObjectId) throws Exception {  Group group=null;  try {    ValidateUtil.validateNotEmpty(tenantName,"Tenant name");    ValidateUtil.validateNotEmpty(groupObjectId,"Group objectId");    TenantInformation tenantInfo=findTenant(tenantName);    ServerUtils.validateNotNullTenant(tenantInfo,tenantName);    ISystemDomainIdentityProvider systemProvider=tenantInfo.findSystemProvider();    ServerUtils.validateNotNullSystemIdp(systemProvider,tenantName);    try {      group=systemProvider.findGroupByObjectId(groupObjectId);    } catch (    Exception ex) {      logger.error(String.format("Failed to find group with objectId [%s] in Service Provider [%s]",groupObjectId != null ? groupObjectId : "null",systemProvider.getDomain()));    }    if (group != null)     return group;    Collection<IIdentityProvider> providers=tenantInfo.getProviders();    for (    IIdentityProvider provider : providers) {      try {        assert (provider != null);        group=provider.findGroupByObjectId(groupObjectId);      } catch (      Exception ex) {        logger.error(String.format("Failed to find group with objectId [%s] in provider [%s]",groupObjectId != null ? groupObjectId : "null",provider.getDomain()));        continue;      }      if (group != null)       break;    }    return group;  } catch (  Exception ex) {    logger.error(String.format("Failed to find group with objectId [%s] in tenant [%s]",groupObjectId != null ? groupObjectId : "null",tenantName));    throw ex;  }}  }
class C{  public JSONObject put(String key,int value) throws JSONException {  this.put(key,new Integer(value));  return this;}  }
class C{  public static StringArray toArray(JCas jCas,Collection<String> collection){  if (collection == null || collection.isEmpty()) {    return new StringArray(jCas,0);  } else {    int size=collection.size();    StringArray array=new StringArray(jCas,size);    array.copyFromArray(collection.toArray(new String[size]),0,0,size);    return array;  }}  }
class C{  public boolean isApproved(){  Object oo=get_Value(COLUMNNAME_IsApproved);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isResizingContainer(){  return _resizeContainer;}  }
class C{  public void testOffset(){  ((InterquartileRange)m_Filter).setDetectionPerAttribute(true);  ((InterquartileRange)m_Filter).setOutputOffsetMultiplier(true);  Instances icopy=new Instances(m_Instances);  Instances result=null;  try {    m_Filter.setInputFormat(icopy);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on setInputFormat(): \n" + ex.getMessage());  }  try {    result=Filter.useFilter(icopy,m_Filter);    assertNotNull(result);  } catch (  Exception ex) {    ex.printStackTrace();    fail("Exception thrown on useFilter(): \n" + ex.getMessage());  }  int count=0;  for (int i=0; i < icopy.numAttributes(); i++) {    if (icopy.attribute(i).isNumeric())     count++;  }  assertEquals(icopy.numAttributes() + 3 * count,result.numAttributes());  assertEquals(icopy.numInstances(),result.numInstances());}  }
class C{  public InstanceProcess exec(String workspaceId,String machineId,Command command,@Nullable String outputChannel) throws NotFoundException, MachineException, BadRequestException {  requiredNotNull(machineId,"Machine ID is required");  requiredNotNull(command,"Command is required");  requiredNotNull(command.getCommandLine(),"Command line is required");  requiredNotNull(command.getName(),"Command name is required");  requiredNotNull(command.getType(),"Command type is required");  final Instance machine=environmentEngine.getMachine(workspaceId,machineId);  final InstanceProcess instanceProcess=machine.createProcess(command,outputChannel);  final int pid=instanceProcess.getPid();  final LineConsumer processLogger=getProcessLogger(machineId,pid,outputChannel);  executor.execute(ThreadLocalPropagateContext.wrap(null));  return instanceProcess;}  }
class C{  @Override public boolean canFlipArms(){  boolean canFlip=true;  if (hasSystem(Mech.ACTUATOR_HAND,Mech.LOC_LARM)) {    canFlip=false;  } else   if (hasSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_LARM)) {    canFlip=false;  } else   if (hasSystem(Mech.ACTUATOR_HAND,Mech.LOC_RARM)) {    canFlip=false;  } else   if (hasSystem(Mech.ACTUATOR_LOWER_ARM,Mech.LOC_RARM)) {    canFlip=false;  }  if (hasQuirk(OptionsConstants.QUIRK_POS_HYPER_ACTUATOR)) {    canFlip=true;  }  if (isProne()) {    canFlip=false;  }  return canFlip;}  }
class C{  private static CharSequence validName(final CharSequence name){  if (!RsWithCookie.CNAME_PTRN.matcher(name).matches()) {    throw new IllegalArgumentException(String.format("Cookie name \"%s\" contains invalid characters",name));  }  return name;}  }
class C{  public MersenneTwisterRNG(final RandomUtils seedGenerator){  this(seedGenerator.generateSeed(SEED_SIZE_BYTES));}  }
class C{  public static float[] findRange(Function2D f,float[] minmax){  if (minmax == null)   minmax=new float[2];  float min=0, max=0;  for (float y=-100; y < 100; y+=10.35173) {    for (float x=-100; x < 100; x+=10.77139) {      float n=f.evaluate(x,y);      min=Math.min(min,n);      max=Math.max(max,n);    }  }  minmax[0]=min;  minmax[1]=max;  return minmax;}  }
class C{  public static float sqr(float fValue){  return fValue * fValue;}  }
class C{  private void finalizeSession(Uri uri){  CaptureSession session;synchronized (mSessions) {    session=removeSession(uri);  }  if (session != null) {    session.finalizeSession();  }}  }
class C{  public AnimatableValue interpolate(AnimatableValue result,AnimatableValue to,float interpolation,AnimatableValue accumulation,int multiplier){  AnimatableAngleValue res;  if (result == null) {    res=new AnimatableAngleValue(target);  } else {    res=(AnimatableAngleValue)result;  }  float v=value;  short u=unit;  if (to != null) {    AnimatableAngleValue toAngle=(AnimatableAngleValue)to;    if (toAngle.unit != u) {      v=rad(v,u);      v+=interpolation * (rad(toAngle.value,toAngle.unit) - v);      u=SVGAngle.SVG_ANGLETYPE_RAD;    } else {      v+=interpolation * (toAngle.value - v);    }  }  if (accumulation != null) {    AnimatableAngleValue accAngle=(AnimatableAngleValue)accumulation;    if (accAngle.unit != u) {      v+=multiplier * rad(accAngle.value,accAngle.unit);      u=SVGAngle.SVG_ANGLETYPE_RAD;    } else {      v+=multiplier * accAngle.value;    }  }  if (res.value != v || res.unit != u) {    res.value=v;    res.unit=u;    res.hasChanged=true;  }  return res;}  }
class C{  public static String stripEnd(String str,String strip){  if (str == null) {    return null;  }  int end=str.length();  if (strip == null) {    while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {      end--;    }  } else {    while ((end != 0) && (strip.indexOf(str.charAt(end - 1)) != -1)) {      end--;    }  }  return str.substring(0,end);}  }
class C{  public Enumerator createEnumerator(){  EnumeratorImpl enumerator=new EnumeratorImpl();  return enumerator;}  }
class C{  protected void sendFunctionGroup1(){  StringBuilder sb=new StringBuilder();  sb.append("xL ");  sb.append(address.getNumber());  sb.append(",");  sb.append(",");  sb.append((f0 ? "1" : "0"));  sb.append(",");  sb.append(",");  sb.append((f1 ? "1" : "0"));  sb.append(",");  sb.append((f2 ? "1" : "0"));  sb.append(",");  sb.append((f3 ? "1" : "0"));  sb.append(",");  sb.append((f4 ? "1" : "0"));  TamsMessage tm=new TamsMessage(sb.toString());  tm.setBinary(false);  tm.setReplyType('L');  tc.sendTamsMessage(tm,this);  tmq.add(tm);}  }
class C{  @ModelAttribute public void addDataToModel(ModelMap model){  SearchData dataForSearchBar=new SearchData();  dataForSearchBar.setSearchMode("natural");  dataForSearchBar.setCurrentPage(1);  dataForSearchBar.setQueryText(null);  dataForSearchBar.setNumberResultsPerPage(10);  model.put("advancedSearchData",dataForSearchBar);}  }
class C{  private void copyToLiveTable() throws SQLException {  executeStatement(QUERY_COPY_ENTRIES);}  }
class C{  public void cancelCountDown(){  mCountdownView.cancelCountDown();}  }
class C{  public NbtTagDouble(String name,double value){  super(name);  this.value=value;}  }
class C{  private void copy(File source,File target) throws IOException {  FileInputStream fis=null;  FileOutputStream fos=null;  try {    fis=new FileInputStream(source);    fos=new FileOutputStream(target);    byte[] buf=new byte[1024];    int i=0;    while ((i=fis.read(buf)) != -1) {      fos.write(buf,0,i);    }  } catch (  IOException e) {    throw e;  } finally {    if (fis != null) {      fis.close();    }    if (fos != null) {      fos.close();    }  }}  }
class C{  protected int number() throws IOException {  loop:   for (; ; ) {switch (nextChar()) {case '.':switch (nextChar()) {case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':        return dotNumber();    }  throw new ParseException("character",reader.getLine(),reader.getColumn());default :break loop;case '0':case '1':case '2':case '3':case '4':case '5':case '6':case '7':case '8':case '9':}}return NUMBER;}  }
class C{  public final int[] saturation(){  int valm=this.rowdef.width(1);  byte[] lastk=null, thisk;  int keym=0;  Iterator<Row.Entry> i=rows(true,null);  Row.Entry row;  while (i.hasNext()) {    row=i.next();    if (lastk == null) {      lastk=row.bytes();    } else {      thisk=row.bytes();      keym=Math.max(keym,eq(lastk,thisk));      lastk=thisk;    }    int valc;    for (valc=this.rowdef.primaryKeyLength; valc < this.rowdef.objectsize; valc++) {      if (lastk[valc] != 0)       break;    }    valm=Math.min(valm,valc - this.rowdef.primaryKeyLength);  }  return new int[]{keym,this.rowdef.width(1) - valm};}  }
class C{  protected static synchronized void createInstance(Cache cache,int maximumTimeBetweenPings,CacheClientNotifierStats stats){  refCount++;  if (_instance != null) {    return;  }  _instance=new ClientHealthMonitor(cache,maximumTimeBetweenPings,stats);}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    int progress, oldProgress=-1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,z1 * z1);        } else {          outputFile.setValue(row,col,noData);        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public void addLogger(LoggerConfig logger){}  }
class C{  public boolean isDefault(){  Object oo=get_Value(COLUMNNAME_IsDefault);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public String toString(){  return this.getBoxType();}  }
class C{  public Cuboid(Location l1,Location l2){  if (!l1.getWorld().equals(l2.getWorld()))   throw new IllegalArgumentException("Locations must be on the same world");  this.worldName=l1.getWorld().getName();  this.x1=Math.min(l1.getBlockX(),l2.getBlockX());  this.y1=Math.min(l1.getBlockY(),l2.getBlockY());  this.z1=Math.min(l1.getBlockZ(),l2.getBlockZ());  this.x2=Math.max(l1.getBlockX(),l2.getBlockX());  this.y2=Math.max(l1.getBlockY(),l2.getBlockY());  this.z2=Math.max(l1.getBlockZ(),l2.getBlockZ());}  }
class C{  public RdfRepositoryForTesting rdfRepository(){  return rdfRepository;}  }
class C{  public static <T extends SabresObject>T create(Class<T> clazz){  return createObjectInstance(clazz);}  }
class C{  public PointF mapImageToView(PointF imagePoint){  float[] points=mTempValues;  points[0]=imagePoint.x;  points[1]=imagePoint.y;  mapRelativeToAbsolute(points,points,1);  mActiveTransform.mapPoints(points,0,points,0,1);  return new PointF(points[0],points[1]);}  }
class C{  public static Map<URI,URI> createVolumeToNewVpoolMap(List<VolumeDescriptor> descriptors){  Map<URI,URI> volumesToNewVpoolMap=new HashMap<URI,URI>();  if (descriptors != null) {    for (    VolumeDescriptor volumeDescriptor : descriptors) {      if (volumeDescriptor.getParameters() != null) {        if (volumeDescriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID) != null) {          URI volumeURI=(URI)volumeDescriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID);          URI newVpoolURI=(URI)volumeDescriptor.getParameters().get(VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID);          volumesToNewVpoolMap.put(volumeURI,newVpoolURI);        }      }    }  }  return volumesToNewVpoolMap;}  }
class C{  public static List propertyDescriptors(int apiLevel){  if (apiLevel == AST.JLS2_INTERNAL) {    return PROPERTY_DESCRIPTORS_2_0;  } else {    return PROPERTY_DESCRIPTORS_3_0;  }}  }
class C{  protected int insertionIndex(Object indexKey,HashIndexSetProperties metaData){  int hash;  int pos;  int mask=metaData.mask;  Object curr;  final Object[] array=metaData.set;  hash=computeHash(indexKey);  long start=-1L;  if (this.cacheStats != null) {    start=this.cacheStats.getStatTime();    this.cacheStats.incQueryResultsHashCollisions();  }  try {    if (!((curr=array[pos=(it.unimi.dsi.fastutil.HashCommon.mix(hash)) & mask]) == null || curr == REMOVED)) {      while (!((curr=array[pos=(pos + 1) & mask]) == null || curr == REMOVED)) {      }    }    return pos;  }  finally {    if (this.cacheStats != null) {      this.cacheStats.endQueryResultsHashCollisionProbe(start);    }  }}  }
class C{  public void testPowPositiveNumToZeroExp(){  byte aBytes[]={50,-26,90,69,120,32,63,-103,-14,35};  int aSign=1;  int exp=0;  byte rBytes[]={1};  BigInteger aNumber=new BigInteger(aSign,aBytes);  BigInteger result=aNumber.pow(exp);  byte resBytes[]=new byte[rBytes.length];  resBytes=result.toByteArray();  for (int i=0; i < resBytes.length; i++) {    assertTrue(resBytes[i] == rBytes[i]);  }  assertEquals("incorrect sign",1,result.signum());}  }
class C{  public static boolean existSDCard(){  return Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED);}  }
class C{  public String toString(){  return getClass().getName() + "[index=" + index+ ",errorIndex="+ errorIndex+ ']';}  }
class C{  public List<String> listVolumes(){  if (log.isDebugEnabled()) {    log.debug("List all volumes");  }  FlexVolume vol=new FlexVolume(server.getNaServer(),"");  List<String> volumes=vol.listVolumes();  return volumes;}  }
class C{  public static CCSprite sprite(Bitmap image){  return new CCSprite(image);}  }
class C{  public static List<String> readLines(Reader input) throws IOException {  BufferedReader reader=toBufferedReader(input);  List<String> list=new ArrayList<String>();  String line=reader.readLine();  while (line != null) {    list.add(line);    line=reader.readLine();  }  return list;}  }
class C{  public ModifiableHyperBoundingBox computeMBR(){  E firstEntry=getEntry(0);  if (firstEntry == null) {    return null;  }  ModifiableHyperBoundingBox mbr=new ModifiableHyperBoundingBox(firstEntry);  for (int i=1; i < numEntries; i++) {    mbr.extend(getEntry(i));  }  return mbr;}  }
class C{  public SearchRequestBuilder addHighlightedField(String name,int fragmentSize,int numberOfFragments,int fragmentOffset){  highlightBuilder().field(name,fragmentSize,numberOfFragments,fragmentOffset);  return this;}  }
class C{  public void buildDecList(Instances train,Instances test,boolean leaf) throws Exception {  Instances[] localTrain, localTest;  int ind;  int i, j;  double sumOfWeights;  NoSplit noSplit;  m_train=null;  m_isLeaf=false;  m_isEmpty=false;  m_sons=null;  indeX=0;  sumOfWeights=train.sumOfWeights();  noSplit=new NoSplit(new Distribution(train));  if (leaf) {    m_localModel=noSplit;  } else {    m_localModel=m_toSelectModel.selectModel(train,test);  }  m_test=new Distribution(test,m_localModel);  if (m_localModel.numSubsets() > 1) {    localTrain=m_localModel.split(train);    localTest=m_localModel.split(test);    train=null;    test=null;    m_sons=new ClassifierDecList[m_localModel.numSubsets()];    i=0;    do {      i++;      ind=chooseIndex();      if (ind == -1) {        for (j=0; j < m_sons.length; j++) {          if (m_sons[j] == null) {            m_sons[j]=getNewDecList(localTrain[j],localTest[j],true);          }        }        if (i < 2) {          m_localModel=noSplit;          m_isLeaf=true;          m_sons=null;          if (Utils.eq(sumOfWeights,0)) {            m_isEmpty=true;          }          return;        }        ind=0;        break;      } else {        m_sons[ind]=getNewDecList(localTrain[ind],localTest[ind],false);      }    } while ((i < m_sons.length) && (m_sons[ind].m_isLeaf));    for (j=0; j < m_sons.length; j++) {      if ((m_sons[j] == null) || (!m_sons[j].m_isLeaf)) {        break;      }    }    if (j == m_sons.length) {      pruneEnd();      if (!m_isLeaf) {        indeX=chooseLastIndex();      }    } else {      indeX=chooseLastIndex();    }  } else {    m_isLeaf=true;    if (Utils.eq(sumOfWeights,0)) {      m_isEmpty=true;    }  }}  }
class C{  public ForceReattemptException(String message){  super(message);}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  @Override public Type type(){  return Type.OBJECT;}  }
class C{  public static RGB hexadecimalToRGB(final String hexadecimal){  java.awt.Color col=null;  try {    col=java.awt.Color.decode(hexadecimal);  } catch (  final Exception e) {    col=java.awt.Color.WHITE;  }  final int red=col.getRed();  final int blue=col.getBlue();  final int green=col.getGreen();  return new RGB(red,green,blue);}  }
class C{  public Scanner reset(){  delimiter=DEFAULT_DELIMITER;  setLocale(Locale.getDefault());  currentRadix=DEFAULT_RADIX;  return this;}  }
class C{  public DoubleNode<ILineSegment> pred(DoubleNode<ILineSegment> n){  return n.prev();}  }
class C{  @Transactional protected void _setServiceEnabled(boolean enabled){synchronized (_serviceManagementRecordService) {    ServiceManagementRecord record=_serviceManagementRecordService.findServiceManagementRecord(Service.SCHEDULING);    if (record == null) {      record=new ServiceManagementRecord(_userService.findAdminUser(),Service.SCHEDULING,enabled);    }    record.setEnabled(enabled);    _serviceManagementRecordService.updateServiceManagementRecord(record);  }}  }
class C{  public boolean isImageCache(){  return imageCache;}  }
class C{  public static void deflowMessage(Message m) throws MessagingException, IOException {  ContentType ct=new ContentType(m.getContentType());  String format=ct.getParameter("format");  if (ct.getBaseType().equals("text/plain") && format != null && format.equalsIgnoreCase("flowed")) {    String delSp=ct.getParameter("delsp");    String deflowed=deflow((String)m.getContent(),delSp != null && delSp.equalsIgnoreCase("yes"));    ct.getParameterList().remove("format");    ct.getParameterList().remove("delsp");    if (ct.toString().contains("flowed"))     System.out.println("\n\n*************************\n* ERROR!!! FlowedMessageUtils dind't remove the flowed correctly!\n******************\n\n" + ct.toString() + " \n "+ ct.toString()+ "\n");    m.setContent(deflowed,ct.toString());    m.saveChanges();  }}  }
class C{  public final void walkGraph(Hashtable semNodesTable){  Integer uid=new Integer(myUID);  if (semNodesTable.get(uid) != null)   return;  semNodesTable.put(uid,this);  if (assumeExpr != null) {    assumeExpr.walkGraph(semNodesTable);  }  ;}  }
class C{  public <T extends Block>BlockTypeDefinition<T> newTypedDefinition(T block){  final BlockTypeDefinition<T> def=new BlockTypeDefinition<T>(block);  all.add(def);  return def;}  }
class C{  RMIServerImpl newServer() throws IOException {  final boolean iiop=isIiopURL(address,true);  final int port;  if (address == null)   port=0; else   port=address.getPort();  if (iiop)   return newIIOPServer(attributes); else   return newJRMPServer(attributes,port);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public void end(String namespace,String name) throws Exception {  ManagedBeanBean top;  try {    top=(ManagedBeanBean)digester.pop();  } catch (  Exception e) {    throw new IllegalStateException("Popped object is not a " + CLASS_NAME + " instance");  }  validate(top);  FacesConfigBean fcb=(FacesConfigBean)digester.peek();  ManagedBeanBean old=fcb.getManagedBean(top.getManagedBeanName());  if (old == null) {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ManagedBeanRule]{" + digester.getMatch() + "} New("+ top.getManagedBeanName()+ ")");    }    fcb.addManagedBean(top);  } else {    if (digester.getLogger().isDebugEnabled()) {      digester.getLogger().debug("[ManagedBeanRule]{" + digester.getMatch() + "} Merge("+ top.getManagedBeanName()+ ")");    }    mergeManagedBean(top,old);  }}  }
class C{  public void buildReport(long supplierKey,VOReportResult result) throws XPathExpressionException, ParserConfigurationException {  result.setServerTimeZone(DateConverter.getCurrentTimeZoneAsUTCString());  List<ReportResultData> reportData=paymentDao.retrievePaymentInformationData(supplierKey);  ReportDataConverter converter=new ReportDataConverter(subscriptionDao);  Map<String,String> columnXPathMap=new HashMap<String,String>();  columnXPathMap.put("processingresult","/Response/Transaction/Processing/Return/text()");  converter.convertToXml(reportData,result.getData(),columnXPathMap);}  }
class C{  public SimpleModule build(ResourceRegistry resourceRegistry){  SimpleModule simpleModule=new SimpleModule(JSON_API_MODULE_NAME,new Version(1,0,0,null,null,null));  simpleModule.addSerializer(new ContainerSerializer(resourceRegistry)).addSerializer(new DataLinksContainerSerializer(resourceRegistry)).addSerializer(new RelationshipContainerSerializer(resourceRegistry)).addSerializer(new LinkageContainerSerializer(resourceRegistry)).addSerializer(new BaseResponseSerializer(resourceRegistry)).addSerializer(new ErrorResponseSerializer());  return simpleModule;}  }
class C{  public static Attaching attach(PreProcessor... processors){  return new Attaching(null,Arrays.asList(processors));}  }
class C{  byte[] toByteArray(){  return Arrays.copyOf(data,pos);}  }
class C{  private Struct writeCfftp(AFTPClient client) throws PageException {  Struct cfftp=new StructImpl();  if (result == null)   pageContext.variablesScope().setEL(CFFTP,cfftp); else   pageContext.setVariable(result,cfftp);  if (client == null) {    cfftp.setEL(SUCCEEDED,Boolean.FALSE);    cfftp.setEL(ERROR_CODE,new Double(-1));    cfftp.setEL(ERROR_TEXT,"");    cfftp.setEL(RETURN_VALUE,"");    return cfftp;  }  int repCode=client.getReplyCode();  String repStr=client.getReplyString();  cfftp.setEL(ERROR_CODE,new Double(repCode));  cfftp.setEL(ERROR_TEXT,repStr);  cfftp.setEL(SUCCEEDED,Caster.toBoolean(client.isPositiveCompletion()));  cfftp.setEL(RETURN_VALUE,repStr);  return cfftp;}  }
class C{  private boolean checkRecovery(boolean recoverReloadedCores,final boolean isLeader,boolean skipRecovery,final String collection,String shardId,SolrCore core,CoreContainer cc,boolean afterExpiration){  if (SKIP_AUTO_RECOVERY) {    log.warn("Skipping recovery according to sys prop solrcloud.skip.autorecovery");    return false;  }  boolean doRecovery=true;  if (!isLeader) {    if (skipRecovery || (!afterExpiration && core.isReloaded() && !recoverReloadedCores)) {      doRecovery=false;    }    if (doRecovery) {      log.info("Core needs to recover:" + core.getName());      core.getUpdateHandler().getSolrCoreState().doRecovery(cc,core.getCoreDescriptor());      return true;    }    final Replica.State lirState=getLeaderInitiatedRecoveryState(collection,shardId,core.getCoreDescriptor().getCloudDescriptor().getCoreNodeName());    if (lirState == Replica.State.DOWN) {      log.info("Leader marked core " + core.getName() + " down; starting recovery process");      core.getUpdateHandler().getSolrCoreState().doRecovery(cc,core.getCoreDescriptor());      return true;    }  } else {    log.info("I am the leader, no recovery necessary");  }  return false;}  }
class C{  public static String dnl(){  return dnl;}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z;    int progress, oldProgress=-1;    double[] data;    WhiteboxRaster inputFile=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile.getNumberRows();    int cols=inputFile.getNumberColumns();    double noData=inputFile.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile.getPreferredPalette());    for (row=0; row < rows; row++) {      data=inputFile.getRowValues(row);      for (col=0; col < cols; col++) {        z=data[col];        if (z != noData) {          outputFile.setValue(row,col,Math.abs(z));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  void cellToCenterPoint(int cellX,int cellY,int[] result){  regionToCenterPoint(cellX,cellY,1,1,result);}  }
class C{  private void generateVectorDrawable(VectorDrawable vector,BufferedWriter vectorBW,boolean isLast) throws IOException {  vectorBW.write(xml_start);  vectorBW.newLine();  vectorBW.write(vector_start);  vectorBW.newLine();  if (vector.getName() != null) {    vectorBW.write(name.replace("#name",vector.getName()));    vectorBW.newLine();  }  if (vector.getViewPortWidth() != null) {    vectorBW.write(viewportWidth.replace("#viewportWidth",vector.getViewPortWidth()));    vectorBW.newLine();  }  if (vector.getViewPortHeight() != null) {    vectorBW.write(viewportHeight.replace("#viewportHeight",vector.getViewPortHeight()));    vectorBW.newLine();  }  if (vector.getWidth() != null) {    vectorBW.write(width.replace("#width",vector.getWidth()));    vectorBW.newLine();  }  if (vector.getHeight() != null) {    vectorBW.write(height.replace("#height",vector.getHeight()));    vectorBW.newLine();  }  if (vector.getTint() != null) {    vectorBW.write(tint.replace("#tint",vector.getTint()));    vectorBW.newLine();  }  if (vector.getTintMode() != null) {    vectorBW.write(tintMode.replace("#tintMode",vector.getTintMode()));    vectorBW.newLine();  }  if (vector.getAutoMirrored() != null) {    vectorBW.write(autoMirrored.replace("#autoMirrored",vector.getAutoMirrored()));    vectorBW.newLine();  }  if (vector.getAlpha() != null) {    vectorBW.write(alpha.replace("#alpha",vector.getAlpha()));    vectorBW.newLine();  }  vectorBW.write(endtag);  vectorBW.newLine();  if (vector.getGroups() != null) {    for (int i=0; i < vector.getGroups().size(); i++) {      generateGroup(vector.getGroups().get(i),vectorBW,isLast);    }  }  if (vector.getPaths() != null) {    for (int i=0; i < vector.getPaths().size(); i++) {      generatePath(vector.getPaths().get(i),vectorBW,isLast);    }  }  vectorBW.write(vector_end);  vectorBW.newLine();}  }
class C{  public static final boolean isBracket(char ch){  return ch <= '}' && (dataTable[ch] & BRACKET_MASK) > 0;}  }
class C{  public PersistentCookieStore(Context context){  cookiePrefs=context.getSharedPreferences(COOKIE_PREFS,0);  cookies=new ConcurrentHashMap<String,Cookie>();  String storedCookieNames=cookiePrefs.getString(COOKIE_NAME_STORE,null);  if (storedCookieNames != null) {    String[] cookieNames=TextUtils.split(storedCookieNames,",");    for (    String name : cookieNames) {      String encodedCookie=cookiePrefs.getString(COOKIE_NAME_PREFIX + name,null);      if (encodedCookie != null) {        Cookie decodedCookie=decodeCookie(encodedCookie);        if (decodedCookie != null) {          cookies.put(name,decodedCookie);        }      }    }    clearExpired(new Date());  }}  }
class C{  public boolean isSortingCategories(){  return model.isSortingCategories();}  }
class C{  public IPiece createPiece(Scope parent,Column column){  return new ColumnPiece(parent,column);}  }
class C{  public Statement processColumns(Object... columns){  statement.append(' ');  if (columns != null && columns.length > 0) {    appendClauses(columns);  } else {    statement.append('*');  }  return this;}  }
class C{  public T caseUnaryExpression(UnaryExpression object){  return null;}  }
class C{  public boolean isProcessing(){  Object oo=get_Value(COLUMNNAME_Processing);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public static boolean isExpression(String token,boolean isXml){  String openExpr;  String closeExpr;  if (isXml) {    openExpr=OPEN_EXPR_XML;    closeExpr=CLOSE_EXPR_XML;  } else {    openExpr=OPEN_EXPR;    closeExpr=CLOSE_EXPR;  }  if (token.startsWith(openExpr) && token.endsWith(closeExpr)) {    return true;  } else {    return false;  }}  }
class C{  public boolean isAnyPlusAccess(){  return anyPlusAccess;}  }
class C{  @Override public void onCreate(){  super.onCreate();  Log_OC.d(TAG,"Creating service");  HandlerThread thread=new HandlerThread("Operations thread",Process.THREAD_PRIORITY_BACKGROUND);  thread.start();  mOperationsHandler=new ServiceHandler(thread.getLooper(),this);  mOperationsBinder=new OperationsServiceBinder(mOperationsHandler);  thread=new HandlerThread("Syncfolder thread",Process.THREAD_PRIORITY_BACKGROUND);  thread.start();  mSyncFolderHandler=new SyncFolderHandler(thread.getLooper(),this);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public boolean contains(final StrMatcher matcher){  return indexOf(matcher,0) >= 0;}  }
class C{  public String toString(){  StringBuffer text=new StringBuffer();  text.append("ML ARAM classifier");  return text.toString();}  }
class C{  public DrmRights(ProcessedData data,String mimeType){  if (data == null) {    throw new IllegalArgumentException("data is null");  }  mData=data.getData();  mAccountId=data.getAccountId();  mSubscriptionId=data.getSubscriptionId();  mMimeType=mimeType;  if (!isValid()) {    final String msg="mimeType: " + mMimeType + ","+ "data: "+ mData;    throw new IllegalArgumentException(msg);  }}  }
class C{  public RegexContextGenerator(Element node){  readFeatureParameters(node);}  }
class C{  public static boolean equals(double[] field1,double[] field2){  if (field1 == null || field1.length == 0) {    return field2 == null || field2.length == 0;  } else {    return Arrays.equals(field1,field2);  }}  }
class C{  TIntIntHashIterator(TIntIntHashMap map){  super(map);}  }
class C{  public static DefaultChainedExecutable createBatchMergeJob(CubeSegment mergeSegment,String submitter){  return batchEngine(mergeSegment).createBatchMergeJob(mergeSegment,submitter);}  }
class C{  public void add(String expr,double size){  Predicate p=(Predicate)ExpressionParser.parse(expr);  add(p,size);}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  @Override public void sessionCreated(NextFilter nextFilter,IoSession session) throws Exception {  for (  Map.Entry<String,Object> e : attributes.entrySet()) {    session.setAttribute(e.getKey(),e.getValue());  }  nextFilter.sessionCreated(session);}  }
class C{  private void removeAllInterests(ServerRegionProxy srp,int interestType,boolean durable,boolean keepAlive,boolean receiveUpdatesAsInvalidates){  String regName=srp.getRegionName();  ConcurrentMap allInterests=getRegionToInterestsMap(interestType,durable,receiveUpdatesAsInvalidates);  if (allInterests.remove(regName) != null) {    if (logger.isDebugEnabled()) {      logger.debug("removeAllInterests region={} type={}",regName,InterestType.getString(interestType));    }    try {      Object key=UnregisterAllInterest.singleton();      UnregisterInterestOp.execute(srp.getPool(),regName,key,interestType,true,keepAlive);    } catch (    Exception e) {      if (!srp.getPool().getCancelCriterion().isCancelInProgress()) {        logger.warn(LocalizedMessage.create(LocalizedStrings.RegisterInterestTracker_PROBLEM_REMOVING_ALL_INTEREST_ON_REGION_0_INTERESTTYPE_1_2,new Object[]{regName,InterestType.getString(interestType),e.getLocalizedMessage()}));      }    }  }}  }
class C{  public static boolean contains(double[] self,Object value){  for (  double next : self) {    if (DefaultTypeTransformation.compareEqual(value,next))     return true;  }  return false;}  }
class C{  protected SingleSubstFormat1(RandomAccessFile raf,int offset) throws IOException {  coverageOffset=raf.readUnsignedShort();  deltaGlyphID=raf.readShort();  raf.seek(offset + coverageOffset);  coverage=Coverage.read(raf);}  }
class C{  ElementsOrAttributes addAttributes(){  return values[flags | ATTRIBUTES_FLAG];}  }
class C{  public GammaFilter(){  this(1.0f);}  }
class C{  public static Number round(Number a){  if (isFloatingPoint(a)) {    return Math.round(a.doubleValue());  } else {    return a.longValue();  }}  }
class C{  public static int indexInArray(float needle,float[] stack,int maxLen){  for (int i=0; i < maxLen; i++) {    if (stack[i] == needle) {      return i;    }  }  return -1;}  }
class C{  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public OptionScanNode buildTreeFromNodeTree(SwitchAccessNodeCompat root,OptionScanNode treeToBuildOn){  OptionScanNode tree=(treeToBuildOn != null) ? treeToBuildOn : new ClearFocusNode();  LinkedList<SwitchAccessNodeCompat> talkBackOrderList=TreeBuilderUtils.getNodesInTalkBackOrder(root);  Iterator<SwitchAccessNodeCompat> reverseListIterator=talkBackOrderList.descendingIterator();  while (reverseListIterator.hasNext()) {    SwitchAccessNodeCompat next=reverseListIterator.next();    tree=TreeBuilderUtils.addCompatToTree(next,tree);    next.recycle();  }  return tree;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:40.090 -0500",hash_original_method="36525CF04D56B3E594DA28B5E31D5D17",hash_generated_method="9E66340CD089F626729C874183CC494A") public static boolean equals(byte[] array1,byte[] array2){  if (array1 == array2) {    return true;  }  if (array1 == null || array2 == null || array1.length != array2.length) {    return false;  }  for (int i=0; i < array1.length; i++) {    if (array1[i] != array2[i]) {      return false;    }  }  return true;}  }
class C{  private static boolean isXLargeTablet(Context context){  return (context.getResources().getConfiguration().screenLayout & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;}  }
class C{  ResultAction changeCurrentMode(Mode mode){  return new AttachPlaceholderAction(getModeUsage().changeCurrentMode(mode));}  }
class C{  @Override public long position(String pattern,long start) throws SQLException {  throw unsupported("LOB search");}  }
class C{  public Builder<T> lambda(final int lambda){  this.lambda=lambda;  return this;}  }
class C{  public VNXeCommandResult deleteLunGroup(String lunGroupId,boolean isForceSnapDeletion,boolean isForceVolumeDeletion){  if (isForceVolumeDeletion) {    DeleteStorageResourceRequest deleteReq=new DeleteStorageResourceRequest(_khClient);    return deleteReq.deleteLunGroup(lunGroupId,isForceSnapDeletion);  } else {    BlockLunRequests lunReq=new BlockLunRequests(_khClient);    List<VNXeLun> luns=lunReq.getLunsInLunGroup(lunGroupId);    if (luns != null && !luns.isEmpty()) {      List<String> lunIds=new ArrayList<String>();      for (      VNXeLun lun : luns) {        lunIds.add(lun.getId());      }      removeLunsFromLunGroup(lunGroupId,lunIds);    }    DeleteStorageResourceRequest deleteReq=new DeleteStorageResourceRequest(_khClient);    return deleteReq.deleteLunGroup(lunGroupId,isForceSnapDeletion);  }}  }
class C{  public void requestTopDownLeftRightResend(ImageConsumer ic){}  }
class C{  public Builder maxWaitForSessionClose(final int maxWait){  this.maxWaitForSessionClose=maxWait;  return this;}  }
class C{  @Override public void uncaughtException(Thread thread,Throwable throwable){  logger.error("CleanupThread Thread " + thread + " died because uncatched Exception",throwable);  cleaner=null;}  }
class C{  public Object clone(){  IntegerVectorIndividual myobj=(IntegerVectorIndividual)(super.clone());  myobj.genome=(int[])(genome.clone());  if (expression != null) {    myobj.expression=new StringBuffer(expression);  }  return myobj;}  }
class C{  public Path[] dataWithClusterFiles(){  return dataWithClusterFiles;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public String shrinkageTipText(){  return "Shrinkage parameter (use small value like 0.1 to reduce " + "overfitting).";}  }
class C{  @Override protected MkTabTreeNode<O> createNewDirectoryNode(){  return new MkTabTreeNode<>(dirCapacity,false);}  }
class C{  private String toString(InputStream in,String charset) throws IOException {  InputStreamReader reader=new InputStreamReader(in,charset);  StringBuilder buffer=new StringBuilder();  char[] chars=new char[1024];  int n;  while ((n=reader.read(chars,0,chars.length)) != -1) {    buffer.append(chars,0,n);  }  String response=buffer.toString().replaceAll("\\r\\n?","\n");  if (response.startsWith("HTTP/")) {    int httpHeaderBodySeparation=response.indexOf("\n\n");    if (httpHeaderBodySeparation != -1) {      String splitResponse=response.substring(httpHeaderBodySeparation + 2);      httpHeaderBodySeparation=splitResponse.indexOf("\n");      if (httpHeaderBodySeparation != -1) {        response=splitResponse.substring(httpHeaderBodySeparation + 1);      }    }  }  return response;}  }
class C{  public static synchronized void cancel(){  schedulerRef.cancel();}  }
class C{  public void genParticipants(final List<JSONObject> articles,final Integer participantsCnt){  for (  final JSONObject article : articles) {    final List<JSONObject> articleParticipants=getArticleLatestParticipants(article.optString(Keys.OBJECT_ID),participantsCnt);    article.put(Article.ARTICLE_T_PARTICIPANTS,(Object)articleParticipants);  }}  }
class C{  public JSONTokener(Reader reader){  this.reader=reader.markSupported() ? reader : new BufferedReader(reader);  this.eof=false;  this.usePrevious=false;  this.previous=0;  this.index=0;  this.character=1;  this.line=1;}  }
class C{  public void createProfileImage(){  Debug.message("terrain","ProfileGenerator:createProfileImage(): Creating image");  if (layer == null || layer.frameCache == null) {    Debug.error("ProfileGenerator:  can't access the DTED data through the terrain layer.");    return;  }  profileLine.setLocation(setLLPoints(),OMGraphic.RADIANS);  int total_distance=0;  int[] distances=new int[xypoints.size()];  Point tmpPoint1, tmpPoint2;  distances[0]=0;  for (int j=1; j < xypoints.size(); j++) {    tmpPoint1=(Point)xypoints.elementAt(j);    tmpPoint2=(Point)xypoints.elementAt(j - 1);    distances[j]=TerrainLayer.numPixelsBetween(tmpPoint1.x,tmpPoint1.y,tmpPoint2.x,tmpPoint2.y);    total_distance+=distances[j];  }  int tmp=0;  int max=0;  int[] heights=new int[xypoints.size()];  for (int i=0; i < heights.length; i++) {    LatLonPoint llp=((LatLonPoint)coords.elementAt(i));    tmp=layer.frameCache.getElevation(llp.getLatitude(),llp.getLongitude());    if (tmp == DTEDFrameCache.NO_DATA)     tmp=-1;    if (tmp > max)     max=tmp;    heights[i]=tmp;  }  createGIFFile(total_distance,max,distances,heights);}  }
class C{  public static Object someCrazyThing(Object o){  return o;}  }
class C{  public void select(final ColumnItem item){  final List<ColumnItem> items=new ArrayList<ColumnItem>();  this.findElement(item,items);  Collections.reverse(items);  if (items.isEmpty()) {    return;  }  this.clear(false);  for (int i=3; i < items.size(); i++) {    this.createTable();  }  for (int i=0; i < items.size() - 1; i++) {    this.columns.get(i + 1).setData(items.get(i));  }  this.updateContent();  for (int i=0; i < this.columns.size() - 1; i++) {    final ColumnItem nextItem=(ColumnItem)this.columns.get(i + 1).getData();    for (    final TableItem tableItem : this.columns.get(i).getItems()) {      if (tableItem.getData() != null && tableItem.getData().equals(nextItem)) {        tableItem.getParent().setSelection(tableItem);      }    }  }  this.composite.pack();  this.setMinSize(this.composite.computeSize(SWT.DEFAULT,SWT.DEFAULT));  this.columns.get(this.columns.size() - 1).forceFocus();}  }
class C{  public static <T>void callFunctionInBackground(String name,Map<String,?> params,FunctionCallback<T> callback){  ParseTaskUtils.callbackOnMainThreadAsync(ParseCloud.<T>callFunctionInBackground(name,params),callback);}  }
class C{  private String findServer(final HttpServletRequest req,final HttpServletResponse resp){  final StringBuilder value=new StringBuilder();  if (isServerFixed()) {    value.append(getDefaultServer(req));  } else {    value.append(cookies.getCookie(req,resp,SERVER_COOKIE));    if (0 == value.length()) {      value.append(getDefaultServer(req));    } else     if (!this.serverValidator.isValidServer(value.toString())) {      value.replace(0,value.length(),getDefaultServer(req));    }  }  return value.toString();}  }
class C{  @Override public void resetFrame(){synchronized (lock) {    sysName.setText("IAS" + counter++);  }  userName.setText(null);  assignedBuffer.setSelectedIndex(0);  loopInfinite.setSelected(false);  loopMin.setValue(AudioSource.LOOP_NONE);  loopMax.setValue(AudioSource.LOOP_NONE);  position.setValue(new Vector3f(0,0,0));  positionRelative.setSelected(false);  velocity.setValue(new Vector3f(0,0,0));  gain.setValue(1.0f);  pitch.setValue(1.0f);  refDistance.setValue(1.0f);  maxDistance.setValue(Audio.MAX_DISTANCE);  rollOffFactor.setValue(1.0f);  fadeInTime.setValue(1000);  fadeOutTime.setValue(1000);  this.newSource=true;}  }
class C{  public static String format(final List<? extends NameValuePair> parameters,final String encoding){  final StringBuilder result=new StringBuilder();  for (  final NameValuePair parameter : parameters) {    final String encodedName=encode(parameter.getName(),encoding);    final String value=parameter.getValue();    final String encodedValue=value != null ? encode(value,encoding) : "";    if (result.length() > 0)     result.append(PARAMETER_SEPARATOR);    result.append(encodedName);    result.append(NAME_VALUE_SEPARATOR);    result.append(encodedValue);  }  return result.toString();}  }
class C{  public static Request signV4(Request request,String region,String accessKey,String secretKey) throws NoSuchAlgorithmException, InvalidKeyException {  String contentSha256=request.header("x-amz-content-sha256");  DateTime date=DateFormat.AMZ_DATE_FORMAT.parseDateTime(request.header("x-amz-date"));  Signer signer=new Signer(request,contentSha256,date,region,accessKey,secretKey);  signer.setScope();  signer.setCanonicalRequest();  signer.setStringToSign();  signer.setSigningKey();  signer.setSignature();  signer.setAuthorization();  return request.newBuilder().header("Authorization",signer.authorization).build();}  }
class C{  public static DioriteRandom newRandom(long seed){  return new DioriteRandom(seed);}  }
class C{  private void recomputeDependentOperators(){  if (startOperator == null || endOperator == null) {    dependentOps=null;  } else {    ExecutionUnit unit=startOperator.getExecutionUnit();    if (endOperator.getExecutionUnit() != unit) {      dependentOps=null;      return;    } else {      List<Operator> operators=unit.getOperators();      dependentOps=getDependingOperators(view.getModel().getDisplayedChain(),operators.indexOf(startOperator),operators.indexOf(endOperator),operators);    }  }}  }
class C{  public static Test suite(){  return (new TestSuite(MetadataOmittedITCase.class));}  }
class C{  boolean writeImageData(){  int rowsLeft=height;  int startRow=0;  int nRows;  byte[] scanLines;  int scanPos;  int startPos;  byte[] compressedLines;  int nCompressed;  PixelGrabber pg;  bytesPerPixel=(encodeAlpha) ? 4 : 3;  Deflater scrunch=new Deflater(compressionLevel);  ByteArrayOutputStream outBytes=new ByteArrayOutputStream(1024);  DeflaterOutputStream compBytes=new DeflaterOutputStream(outBytes,scrunch);  try {    while (rowsLeft > 0) {      nRows=Math.min(32767 / (width * (bytesPerPixel + 1)),rowsLeft);      if (nRows <= 0)       nRows=1;      int[] pixels=new int[width * nRows];      pg=new PixelGrabber(image,0,startRow,width,nRows,pixels,0,width);      try {        pg.grabPixels();      } catch (      Exception e) {        System.err.println("WARNING: PNG image write interrupted waiting for pixels\n\n" + e);        return false;      }      if ((pg.getStatus() & ImageObserver.ABORT) != 0) {        System.err.println("WARNING: PNG Image fetch aborted or errored.");        return false;      }      scanLines=new byte[width * nRows * bytesPerPixel + nRows];      if (filter == FILTER_SUB) {        leftBytes=new byte[16];      }      if (filter == FILTER_UP) {        priorRow=new byte[width * bytesPerPixel];      }      scanPos=0;      startPos=1;      for (int i=0; i < width * nRows; i++) {        if (i % width == 0) {          scanLines[scanPos++]=(byte)filter;          startPos=scanPos;        }        scanLines[scanPos++]=(byte)((pixels[i] >> 16) & 0xff);        scanLines[scanPos++]=(byte)((pixels[i] >> 8) & 0xff);        scanLines[scanPos++]=(byte)((pixels[i]) & 0xff);        if (encodeAlpha) {          scanLines[scanPos++]=(byte)((pixels[i] >> 24) & 0xff);        }        if ((i % width == width - 1) && (filter != FILTER_NONE)) {          if (filter == FILTER_SUB) {            filterSub(scanLines,startPos,width);          }          if (filter == FILTER_UP) {            filterUp(scanLines,startPos,width);          }        }      }      compBytes.write(scanLines,0,scanPos);      startRow+=nRows;      rowsLeft-=nRows;    }    compBytes.close();    compressedLines=outBytes.toByteArray();    nCompressed=compressedLines.length;    crc.reset();    bytePos=writeInt4(nCompressed,bytePos);    bytePos=writeString("IDAT",bytePos);    crc.update("IDAT".getBytes());    bytePos=writeBytes(compressedLines,nCompressed,bytePos);    crc.update(compressedLines,0,nCompressed);    crcValue=crc.getValue();    bytePos=writeInt4((int)crcValue,bytePos);    scrunch.finish();    return true;  } catch (  IOException e) {    System.err.println("WARNING: IO Error while trying to write PNG image.\n\n" + e.toString());    return false;  }}  }
class C{  public void doHierarchicalLayout(){  m_graph.getSettings().getLayoutSettings().setDefaultGraphLayout(LayoutStyle.HIERARCHIC);  m_graph.doLayout();}  }
class C{  static Image logo(){  if (!logoInitialized) {    logoInitialized=true;    try {      logo=new Image(null,ImageDescriptor.createFromURL(new URL(LOGO_PATH)).getImageData());    } catch (    final MalformedURLException x) {      monitor.log(x);    }  }  return logo;}  }
class C{  public FilterSettings filterSettings(){  return this.filterSettings;}  }
class C{  public static RequestInfo restore(RequestInfo requestInfo){  RequestInfo result=getCopy(requestInfo);  result.removedTime=null;  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:35:43.687 -0500",hash_original_method="582B2DDC8E1047355D2EEA6881BB52B9",hash_generated_method="FC35BCF3565A03809911FAE1712E18DE") @DSComment("normal android callback") @DSSafe(DSCat.ANDROID_CALLBACK) @Override public void onContentChanged(){  super.onContentChanged();  mTabHost=(TabHost)findViewById(com.android.internal.R.id.tabhost);  if (mTabHost == null) {    throw new RuntimeException("Your content must have a TabHost whose id attribute is " + "'android.R.id.tabhost'");  }  mTabHost.setup(getLocalActivityManager());}  }
class C{  public static int generate(int hash,final String value){  return (int)Murmur64.generate(hash,value);}  }
class C{  @SuppressWarnings("PMD.CompareObjectsWithEquals") public void moveByDistance(C controller,int distance){  checkNotNull(controller,"Controller can not be null");  if (distance == 0) {    return;  }  final N node=checkNotNull(controllerNodeMap.get(controller));  final int oldIndex=nodesList.indexOf(node);  final int newIndex=Math.min(Math.max(oldIndex + distance,0),nodesList.size() - 1);  if (oldIndex != newIndex) {    nodesList.removeListener(listChangeListener);    N removedNode=nodesList.remove(oldIndex);    assert removedNode == node : "The node removed was not the node being moved";    nodesList.add(newIndex,node);    nodesList.addListener(listChangeListener);  }}  }
class C{  @Override public boolean containsKey(Object key){  Entry tab[]=table;  if (key != null) {    int hash=System.identityHashCode(key);    int index=(hash & 0x7FFFFFFF) % tab.length;    for (Entry e=tab[index]; e != null; e=e.next)     if (e.hash == hash && key == e.key)     return true;  } else {    for (Entry e=tab[0]; e != null; e=e.next)     if (e.key == null)     return true;  }  return false;}  }
class C{  public CTSTestSuite(Class theClass){  setName(theClass.getName());  try {    getTestConstructor(theClass);  } catch (  NoSuchMethodException e) {    addTest(warning("Class " + theClass.getName() + " has no public constructor TestCase(String name) "+ "or TestCase()"));    return;  }  if (!Modifier.isPublic(theClass.getModifiers())) {    addTest(warning("Class " + theClass.getName() + " is not public"));    return;  }  Vector names=new Vector();  if (EETest.class.isAssignableFrom(theClass)) {    Method[] methods=theClass.getDeclaredMethods();    for (int i=0; i < methods.length; i++) {      if (CTSTestConfig.isTestEnabled(theClass,methods[i]))       addTestMethod(methods[i],names,theClass);    }  } else   addTest(warning("Class " + theClass.getName() + " is not CTS test."));}  }
class C{  private void processDataLinks(List<SBDataLink> dataLinks,ApplicationPort port,SBJob job,boolean strip){  for (  SBDataLink dataLink : dataLinks) {    String source=dataLink.getSource();    String destination=dataLink.getDestination();    String scatter=null;    if (job.getId().contains(SBSchemaHelper.PORT_ID_SEPARATOR)) {      String remaining=job.getId().substring(job.getId().lastIndexOf(".") + 1);      String mod=job.getId().substring(0,job.getId().lastIndexOf("."));      if (mod.contains(".")) {        mod=mod.substring(mod.lastIndexOf(".") + 1);      }      if (strip) {        mod=remaining;      } else {        mod=mod + remaining;      }      scatter=SBSchemaHelper.ID_START + mod + SBSchemaHelper.PORT_ID_SEPARATOR+ SBSchemaHelper.normalizeId(port.getId());    } else {      scatter=port.getId();    }    if ((source.equals(scatter) || destination.equals(scatter)) && (dataLink.getScattered() == null || !dataLink.getScattered())) {      dataLink.setScattered(port.getScatter());    }  }}  }
class C{  public static void skipFully(InputStream in,long skip) throws IOException {  try {    while (skip > 0) {      long skipped=in.skip(skip);      if (skipped <= 0) {        throw new EOFException();      }      skip-=skipped;    }  } catch (  Exception e) {    throw DbException.convertToIOException(e);  }}  }
class C{  public boolean containsTriple(Statement triple){  if (isSchemaTriple(triple)) {    Resource s=triple.getSubject();    URI p=triple.getPredicate();    Value o=triple.getObject();    if (properties.containsKey(s)) {      OwlProperty prop=properties.get(s);      if (p.equals(RDF.TYPE)) {        if ((o.equals(OWL.TRANSITIVEPROPERTY) && prop.isTransitive()) || (o.equals(OWL2.IRREFLEXIVEPROPERTY) && prop.isIrreflexive()) || (o.equals(OWL.SYMMETRICPROPERTY) && prop.isSymmetric())|| (o.equals(OWL2.ASYMMETRICPROPERTY) && prop.isAsymmetric())|| (o.equals(OWL.FUNCTIONALPROPERTY) && prop.isFunctional())|| (o.equals(OWL.INVERSEFUNCTIONALPROPERTY) && prop.isInverseFunctional())) {          return true;        }      }      if ((p.equals(RDFS.SUBPROPERTYOF) && prop.getSuperProperties().contains(o)) || (p.equals(OWL2.PROPERTYDISJOINTWITH) && prop.getDisjointProperties().contains(o)) || (p.equals(OWL.EQUIVALENTPROPERTY) && prop.getEquivalentProperties().contains(o))|| (p.equals(OWL.INVERSEOF) && prop.getInverseProperties().contains(o))) {        return true;      }      if ((p.equals(RDFS.DOMAIN) && prop.getDomain().contains(o)) || (p.equals(RDFS.RANGE) && prop.getRange().contains(o))) {        return true;      }    }    if (classes.containsKey(s)) {      OwlClass subject=classes.get(s);      if ((p.equals(OWL.EQUIVALENTCLASS) && (subject.getEquivalentClasses().contains(o))) || (p.equals(OWL.DISJOINTWITH) && (subject.getDisjointClasses().contains(o))) || (p.equals(OWL.COMPLEMENTOF) && (subject.getComplementaryClasses().contains(o)))|| (p.equals(RDFS.SUBCLASSOF) && (subject.getSuperClasses().contains(o)))) {        return true;      }    }  }  return false;}  }
class C{  public CopyOnWriteMap(Map<K,V> data){  internalMap=new HashMap<K,V>(data);}  }
class C{  private void checkDependencies(){  if (basedOnResult != null) {    if (!input.isComplete() || !algs.isComplete() || basedOnResult.get() != algs.getAlgorithmStep().getResult()) {      basedOnResult=null;      firePanelUpdated();    }  }}  }
class C{  public void loadDataIntoTable(String tableName,TextResource tableDataResource){  loadDataIntoTable(tableName,tableDataResource,"");}  }
class C{  public static LatLon[] greatCircleArcExtremeLocations(Iterable<? extends LatLon> locations){  if (locations == null) {    String message=Logging.getMessage("nullValue.LocationsListIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  LatLon minLatLocation=null;  LatLon maxLatLocation=null;  LatLon lastLocation=null;  for (  LatLon ll : locations) {    if (lastLocation != null) {      LatLon[] extremes=LatLon.greatCircleArcExtremeLocations(lastLocation,ll);      if (extremes == null)       continue;      if (minLatLocation == null || minLatLocation.getLatitude().degrees > extremes[0].getLatitude().degrees)       minLatLocation=extremes[0];      if (maxLatLocation == null || maxLatLocation.getLatitude().degrees < extremes[1].getLatitude().degrees)       maxLatLocation=extremes[1];    }    lastLocation=ll;  }  return new LatLon[]{minLatLocation,maxLatLocation};}  }
class C{  public void paintRadioButtonBackground(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  @Override public synchronized void updateDate(int columnIndex,java.sql.Date x) throws SQLException {  if (!this.onInsertRow) {    if (!this.doingUpdates) {      this.doingUpdates=true;      syncUpdate();    }    this.updater.setDate(columnIndex,x);  } else {    this.inserter.setDate(columnIndex,x);    this.thisRow.setColumnValue(columnIndex - 1,this.inserter.getBytesRepresentation(columnIndex - 1));  }}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> result=new Vector<Option>();  result.addAll(Collections.list(super.listOptions()));  result.addElement(new Option("\tSuppresses the 'BibTex:' prolog in the Javadoc.","noprolog",0,"-noprolog"));  return result.elements();}  }
class C{  @Override public Collection<Handle> createHandles(int detailLevel){  LinkedList<Handle> handles=new LinkedList<Handle>();switch (detailLevel) {case 0:    MoveHandle.addMoveHandles(this,handles);  for (  Figure child : getChildren()) {    MoveHandle.addMoveHandles(child,handles);    handles.add(new DragHandle(child));  }break;case 1:ResizeHandleKit.addResizeHandles(this,handles);break;default :break;}return handles;}  }
class C{  public String globalInfo(){  return "This is ARAM.";}  }
class C{  public CAddressLabel(final JTable table,final INaviView view,final IDebugger debugger,final INaviFunction function,final Color backgroundColor,final Font font){  this.debugger=Preconditions.checkNotNull(debugger,"IE02019: Debugger argument can not be null");  this.function=Preconditions.checkNotNull(function,"IE02020: Function argument can not be null");  this.table=Preconditions.checkNotNull(table,"IE02348: Table argument can not be null");  this.view=Preconditions.checkNotNull(view,"IE02349: View argument can not be null");  if (starImage == null) {    try {      starImage=new ImageIcon(CMain.class.getResource("data/star.png").toURI().toURL()).getImage();    } catch (    MalformedURLException|URISyntaxException e) {    }  }  if (font == null) {    normalFont=new Font(getFont().getFontName(),Font.PLAIN,12);    normalBoldFont=new Font(getFont().getFontName(),Font.BOLD,12);  } else {    normalFont=new Font(font.getName(),Font.PLAIN,font.getSize());    normalBoldFont=new Font(font.getName(),Font.BOLD,font.getSize());  }  setBackground(backgroundColor);  setOpaque(true);}  }
class C{  public static ComponentUI createUI(JComponent a){  ComponentUI mui=new MultiViewportUI();  return MultiLookAndFeel.createUIs(mui,((MultiViewportUI)mui).uis,a);}  }
class C{  private static void preload(IgniteCache<PersonKey,Person> cache){  System.out.println();  System.out.println(">>> Loading entries from database.");  cache.loadCache(null,PersonKey.class.getName(),"select * from PERSON where ID <= 3");  for (  Cache.Entry<PersonKey,Person> person : cache)   System.out.println(">>> Loaded Person: " + person);}  }
class C{  public static int loadSerialized(String filename){  Annotation annotation=IOTools.deserialize(filename,Annotation.class);  List<CoreMap> sentenceList=annotation.get(CoreAnnotations.SentencesAnnotation.class);  if (sentenceList == null) {    throw new RuntimeException("Unusable annotation (no sentences) in " + filename);  }  annotationMap=new HashMap<Integer,CoreMap>(sentenceList.size());  int maxLineId=0;  for (  CoreMap annotationSet : sentenceList) {    int lineId=annotationSet.get(CoreAnnotations.LineNumberAnnotation.class);    maxLineId=lineId > maxLineId ? lineId : maxLineId;    annotationMap.put(lineId - 1,annotationSet);  }  return maxLineId + 1;}  }
class C{  public static boolean isBitmapFillWithClip(FillNode fill){  if (fill == null)   return false;  if (fill instanceof BitmapFillNode) {    BitmapFillNode bFill=(BitmapFillNode)fill;    if (ImageHelper.bitmapFillModeIsRepeat(bFill)) {      return false;    } else {      if ((bFill.getFileVersion().equalTo(FXGVersion.v2_0)) && (bFill.fillMode == FillMode.SCALE)) {        if (Double.isNaN(bFill.scaleX) && Double.isNaN(bFill.scaleY) && Double.isNaN(bFill.x)&& Double.isNaN(bFill.y)&& (Double.isNaN(bFill.rotation) || Math.abs(bFill.rotation) < AbstractFXGNode.EPSILON)&& bFill.matrix == null)         return false; else         return true;      } else {        return true;      }    }  }  return false;}  }
class C{  public int compareTo(Object obj){  if (!(obj instanceof CmapSubtable)) {    return -1;  }  CmapSubtable cms=(CmapSubtable)obj;  if (platformID < cms.platformID) {    return -1;  } else   if (platformID > cms.platformID) {    return 1;  } else {    if (platformSpecificID < cms.platformSpecificID) {      return -1;    } else     if (platformSpecificID > cms.platformSpecificID) {      return 1;    } else {      return 0;    }  }}  }
class C{  private void runInStunKeepAliveThread(){  long consentFreshnessInterval=Long.getLong(StackProperties.CONSENT_FRESHNESS_INTERVAL,DEFAULT_CONSENT_FRESHNESS_INTERVAL);  int originalConsentFreshnessWaitInterval=Integer.getInteger(StackProperties.CONSENT_FRESHNESS_ORIGINAL_WAIT_INTERVAL,DEFAULT_CONSENT_FRESHNESS_ORIGINAL_WAIT_INTERVAL);  int maxConsentFreshnessWaitInterval=Integer.getInteger(StackProperties.CONSENT_FRESHNESS_MAX_WAIT_INTERVAL,DEFAULT_CONSENT_FRESHNESS_MAX_WAIT_INTERVAL);  int consentFreshnessMaxRetransmissions=Integer.getInteger(StackProperties.CONSENT_FRESHNESS_MAX_RETRANSMISSIONS,DEFAULT_CONSENT_FRESHNESS_MAX_RETRANSMISSIONS);  while (runInStunKeepAliveThreadCondition()) {    for (    IceMediaStream stream : getStreams()) {      for (      Component component : stream.getComponents()) {        CandidatePair pair=component.getSelectedPair();        if (pair != null) {          if (performConsentFreshness) {            connCheckClient.startCheckForPair(pair,originalConsentFreshnessWaitInterval,maxConsentFreshnessWaitInterval,consentFreshnessMaxRetransmissions);          } else {            connCheckClient.sendBindingIndicationForPair(pair);          }        }      }    }    if (!runInStunKeepAliveThreadCondition())     break;    try {      Thread.sleep(consentFreshnessInterval);      Thread.yield();    } catch (    InterruptedException e) {    }  }  logger.info(Thread.currentThread().getName() + " ends.");}  }
class C{  protected void printDoctype() throws TranscoderException, XMLException, IOException {switch (doctypeOption) {default :    if (type == LexicalUnits.DOCTYPE_START) {      type=scanner.next();      if (type != LexicalUnits.S) {        throw fatalError("space",null);      }      char[] space1=getCurrentValue();      type=scanner.next();      if (type != LexicalUnits.NAME) {        throw fatalError("name",null);      }      char[] root=getCurrentValue();      char[] space2=null;      String externalId=null;      char[] space3=null;      char[] string1=null;      char string1Delim=0;      char[] space4=null;      char[] string2=null;      char string2Delim=0;      char[] space5=null;      type=scanner.next();      if (type == LexicalUnits.S) {        space2=getCurrentValue();        type=scanner.next();switch (type) {case LexicalUnits.PUBLIC_IDENTIFIER:          externalId="PUBLIC";        type=scanner.next();      if (type != LexicalUnits.S) {        throw fatalError("space",null);      }    space3=getCurrentValue();  type=scanner.next();if (type != LexicalUnits.STRING) {  throw fatalError("string",null);}string1=getCurrentValue();string1Delim=scanner.getStringDelimiter();type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}space4=getCurrentValue();type=scanner.next();if (type != LexicalUnits.STRING) {throw fatalError("string",null);}string2=getCurrentValue();string2Delim=scanner.getStringDelimiter();type=scanner.next();if (type == LexicalUnits.S) {space5=getCurrentValue();type=scanner.next();}break;case LexicalUnits.SYSTEM_IDENTIFIER:externalId="SYSTEM";type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}space3=getCurrentValue();type=scanner.next();if (type != LexicalUnits.STRING) {throw fatalError("string",null);}string1=getCurrentValue();string1Delim=scanner.getStringDelimiter();type=scanner.next();if (type == LexicalUnits.S) {space4=getCurrentValue();type=scanner.next();}}}if (doctypeOption == DOCTYPE_CHANGE) {if (publicId != null) {externalId="PUBLIC";string1=publicId.toCharArray();string1Delim='"';if (systemId != null) {string2=systemId.toCharArray();string2Delim='"';}} else if (systemId != null) {externalId="SYSTEM";string1=systemId.toCharArray();string1Delim='"';string2=null;}}output.printDoctypeStart(space1,root,space2,externalId,space3,string1,string1Delim,space4,string2,string2Delim,space5);if (type == LexicalUnits.LSQUARE_BRACKET) {output.printCharacter('[');type=scanner.next();dtd: for (; ; ) {switch (type) {case LexicalUnits.S:output.printSpaces(getCurrentValue(),true);scanner.clearBuffer();type=scanner.next();break;case LexicalUnits.COMMENT:output.printComment(getCurrentValue());scanner.clearBuffer();type=scanner.next();break;case LexicalUnits.PI_START:printPI();break;case LexicalUnits.PARAMETER_ENTITY_REFERENCE:output.printParameterEntityReference(getCurrentValue());scanner.clearBuffer();type=scanner.next();break;case LexicalUnits.ELEMENT_DECLARATION_START:scanner.clearBuffer();printElementDeclaration();break;case LexicalUnits.ATTLIST_START:scanner.clearBuffer();printAttlist();break;case LexicalUnits.NOTATION_START:scanner.clearBuffer();printNotation();break;case LexicalUnits.ENTITY_START:scanner.clearBuffer();printEntityDeclaration();break;case LexicalUnits.RSQUARE_BRACKET:output.printCharacter(']');scanner.clearBuffer();type=scanner.next();break dtd;default :throw fatalError("xml",null);}}}char[] endSpace=null;if (type == LexicalUnits.S) {endSpace=getCurrentValue();type=scanner.next();}if (type != LexicalUnits.END_CHAR) {throw fatalError("end",null);}type=scanner.next();output.printDoctypeEnd(endSpace);} else {if (doctypeOption == DOCTYPE_CHANGE) {String externalId="PUBLIC";char[] string1=SVGConstants.SVG_PUBLIC_ID.toCharArray();char[] string2=SVGConstants.SVG_SYSTEM_ID.toCharArray();if (publicId != null) {string1=publicId.toCharArray();if (systemId != null) {string2=systemId.toCharArray();}} else if (systemId != null) {externalId="SYSTEM";string1=systemId.toCharArray();string2=null;}output.printDoctypeStart(new char[]{' '},new char[]{'s','v','g'},new char[]{' '},externalId,new char[]{' '},string1,'"',new char[]{' '},string2,'"',null);output.printDoctypeEnd(null);}}break;case DOCTYPE_REMOVE:if (type == LexicalUnits.DOCTYPE_START) {type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}type=scanner.next();if (type != LexicalUnits.NAME) {throw fatalError("name",null);}type=scanner.next();if (type == LexicalUnits.S) {type=scanner.next();switch (type) {case LexicalUnits.PUBLIC_IDENTIFIER:type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}type=scanner.next();if (type != LexicalUnits.STRING) {throw fatalError("string",null);}type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}type=scanner.next();if (type != LexicalUnits.STRING) {throw fatalError("string",null);}type=scanner.next();if (type == LexicalUnits.S) {type=scanner.next();}break;case LexicalUnits.SYSTEM_IDENTIFIER:type=scanner.next();if (type != LexicalUnits.S) {throw fatalError("space",null);}type=scanner.next();if (type != LexicalUnits.STRING) {throw fatalError("string",null);}type=scanner.next();if (type == LexicalUnits.S) {type=scanner.next();}}}if (type == LexicalUnits.LSQUARE_BRACKET) {do {type=scanner.next();} while (type != LexicalUnits.RSQUARE_BRACKET);}if (type == LexicalUnits.S) {type=scanner.next();}if (type != LexicalUnits.END_CHAR) {throw fatalError("end",null);}}type=scanner.next();}}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-03-24 16:07:26.115 -0400",hash_original_method="98E24965531418F2B79982016D9498F7",hash_generated_method="4191FE3A3D82799B818DA578EF175146") synchronized void updateBluetoothState(String uuids){  ParcelUuid[] adapterUuids=convertStringToParcelUuid(uuids);  if (mAdapterUuids != null && BluetoothUuid.containsAllUuids(adapterUuids,mAdapterUuids)) {    mBluetoothState.sendMessage(BluetoothAdapterStateMachine.SERVICE_RECORD_LOADED);  }}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  public static void hideFab(FloatingActionButton fab){  fab.hide();  fab.animate().translationY(fab.getHeight() + 100).setInterpolator(new AccelerateInterpolator(2)).start();}  }
class C{  public Subscription(String jid,String nodeId,String subscriptionId,State state){  super(PubSubElementType.SUBSCRIPTION,nodeId);  this.jid=jid;  id=subscriptionId;  this.state=state;}  }
class C{  public void render(OMGraphicList gl,boolean forceNew){  RoadGraphic visual=getVisual();  if (visual == null || forceNew) {    visual=new Graphic(displayAsTerminal);    setVisual(visual);  }  gl.add((Graphic)visual);}  }
class C{  public static List<List<Integer>> permuteUniqueB(int[] num){  List<List<Integer>> res=new ArrayList<List<Integer>>();  if (num == null || num.length == 0)   return res;  Arrays.sort(num);  List<Integer> row=new ArrayList<Integer>();  for (  int a : num)   row.add(a);  res.add(new ArrayList<Integer>(row));  while (nextPermutation(row)) {    res.add(new ArrayList<Integer>(row));  }  return res;}  }
class C{  static public FunctionNode LE(final ValueExpressionNode t1,final ValueExpressionNode t2){  return new FunctionNode(FunctionRegistry.LE,null,new ValueExpressionNode[]{t1,t2});}  }
class C{  public static double logPdf(double x,double lower,double upper){  if (x < lower || x > upper)   return Double.NEGATIVE_INFINITY;  return -Math.log(upper - lower);}  }
class C{  public void shutdown(){  if (acceptor != null) {    this.acceptor.interrupt();  }  this.executor.shutdownNow();  this.cache.close();}  }
class C{  public static void append(CharSequence from,File to,Charset charset) throws IOException {  write(from,to,charset,true);}  }
class C{  @Override public String toString(){  return toString(0);}  }
class C{  public static void upDateCounters(ArrayList<Object> itemSets,Instances instances){  for (int i=0; i < instances.numInstances(); i++) {    Enumeration<Object> enu=new WekaEnumeration<Object>(itemSets);    while (enu.hasMoreElements()) {      ((ItemSet)enu.nextElement()).upDateCounter(instances.instance(i));    }  }}  }
class C{  @Override public boolean handles(ResultHistoryList history,int index){  return (history.getPayloadAt(index) != null);}  }
class C{  @Override public Request<RunnerStatus> run(ProjectReference projectReference,RunOptions runOptions){  return run(projectReference);}  }
class C{  private void heapifyUp(int twopos,double cur){  while (twopos > 0) {    final int parent=(twopos - 1) >>> 1;    double par=twoheap[parent];    if (cur <= par) {      break;    }    twoheap[twopos]=par;    twopos=parent;  }  twoheap[twopos]=cur;}  }
class C{  public Builder clock(Clock clock){  this.clock=checkNotNull(clock,"clock == null");  return this;}  }
class C{  public static Result restJobSummariesForUser(String username){  JsonArray jobSummaryArray=new JsonArray();  List<AppResult> results=null;  if (username == null || username.isEmpty()) {    results=getSchedulerApplications(MAX_APPLICATIONS_IN_WORKFLOW);  } else {    results=getSchedulerApplications(username,MAX_APPLICATIONS_IN_WORKFLOW);  }  Map<IdUrlPair,List<AppResult>> jobExecIdToJobsMap=ControllerUtil.limitHistoryResults(ControllerUtil.groupJobs(results,ControllerUtil.GroupBy.JOB_EXECUTION_ID),results.size(),MAX_JOB_LIMIT);  for (  IdUrlPair jobDefPair : jobExecIdToJobsMap.keySet()) {    long totalJobMemoryUsed=0L;    long totalJobMemoryWasted=0L;    long totalJobDelay=0L;    long totalJobRuntime=0L;    long jobStartTime=Long.MAX_VALUE;    long jobEndTime=0;    Severity jobSeverity=Severity.NONE;    String jobType=null;    String jobId=jobDefPair.getId();    String jobName="";    String user=null;    String queueName="";    Map<Severity,Long> applicationSeverityCount=new HashMap<Severity,Long>();    for (    AppResult application : jobExecIdToJobsMap.get(jobDefPair)) {      totalJobMemoryUsed+=application.resourceUsed;      totalJobMemoryWasted+=application.resourceWasted;      jobType=application.jobType;      jobName=application.jobName;      queueName=application.queueName;      if (application.startTime < jobStartTime) {        jobStartTime=application.startTime;      }      if (application.finishTime > jobEndTime) {        jobEndTime=application.finishTime;      }      if (application.severity.getValue() > jobSeverity.getValue()) {        jobSeverity=application.severity;      }      if (applicationSeverityCount.containsKey(application.severity)) {        applicationSeverityCount.put(application.severity,applicationSeverityCount.get(application.severity) + 1L);      } else {        applicationSeverityCount.put(application.severity,1L);      }      user=application.username;    }    JsonArray applicationSeverity=new JsonArray();    for (    Map.Entry<Severity,Long> entry : applicationSeverityCount.entrySet()) {      JsonObject severityObject=new JsonObject();      severityObject.addProperty(JsonKeys.SEVERITY,entry.getKey().getText());      severityObject.addProperty(JsonKeys.COUNT,entry.getValue());      applicationSeverity.add(severityObject);    }    totalJobDelay=Utils.getTotalWaittime(jobExecIdToJobsMap.get(jobDefPair));    totalJobRuntime=Utils.getTotalRuntime(jobExecIdToJobsMap.get(jobDefPair));    JsonObject jobObject=new JsonObject();    jobObject.addProperty(JsonKeys.ID,jobId);    jobObject.addProperty(JsonKeys.JOB_NAME,jobName);    jobObject.addProperty(JsonKeys.JOB_TYPE,jobType);    jobObject.addProperty(JsonKeys.USERNAME,user);    jobObject.addProperty(JsonKeys.START_TIME,jobStartTime);    jobObject.addProperty(JsonKeys.FINISH_TIME,jobEndTime);    jobObject.addProperty(JsonKeys.RUNTIME,totalJobRuntime);    jobObject.addProperty(JsonKeys.WAITTIME,totalJobDelay);    jobObject.addProperty(JsonKeys.RESOURCE_USED,totalJobMemoryUsed);    jobObject.addProperty(JsonKeys.RESOURCE_WASTED,totalJobMemoryWasted);    jobObject.addProperty(JsonKeys.QUEUE,queueName);    jobObject.addProperty(JsonKeys.SEVERITY,jobSeverity.getText());    jobObject.add(JsonKeys.TASKS_SEVERITY,applicationSeverity);    jobSummaryArray.add(jobObject);  }  JsonArray sortedJobSummaryArray=getSortedJsonArrayByFinishTime(jobSummaryArray);  JsonObject parent=new JsonObject();  parent.add(JsonKeys.JOB_SUMMARIES,sortedJobSummaryArray);  return ok(new Gson().toJson(parent));}  }
class C{  public StunException(String message){  super(message);}  }
class C{  public List<PlanNodeTable> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<PlanNodeTable> list=new ArrayList<PlanNodeTable>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  AlwaysIdenticalKeyStoreState(KeyStoreHistory history,KeyStore keyStore,Password password){  super(history,keyStore,password);}  }
class C{  @Override public void dropTable(String dbName,String tableName,boolean deleteData) throws HiveMetastoreException {  HiveObjectSpec tableSpec=new HiveObjectSpec(dbName,tableName);  if (!existsTable(dbName,tableName)) {    throw new HiveMetastoreException("Missing table: " + tableSpec);  }  specToTable.remove(new HiveObjectSpec(dbName,tableName));  Iterator<Map.Entry<HiveObjectSpec,Partition>> mapIterator=specToPartition.entrySet().iterator();  while (mapIterator.hasNext()) {    Map.Entry<HiveObjectSpec,Partition> entry=mapIterator.next();    if (entry.getKey().getTableSpec().equals(tableSpec)) {      mapIterator.remove();    }  }}  }
class C{  @Override public Collection<Handle> createHandles(int detailLevel){  LinkedList<Handle> handles=new LinkedList<Handle>();  if (detailLevel == 0) {    MoveHandle.addMoveHandles(this,handles);  }  return handles;}  }
class C{  public static void evolve_asymmetric(RealVariable v1,RealVariable v2,double distributionIndex,boolean swap){  double y1, y2, betaq, beta, alpha, rand;  double x1=v1.getValue();  double x2=v2.getValue();  double lb=v1.getLowerBound();  double ub=v1.getUpperBound();  if (Math.abs(x1 - x2) > Settings.EPS) {    if (x2 > x1) {      y2=x2;      y1=x1;    } else {      y2=x1;      y1=x2;    }    beta=1.0 / (1.0 + (2.0 * (y1 - lb) / (y2 - y1)));    alpha=2.0 - Math.pow(beta,distributionIndex + 1.0);    rand=PRNG.nextDouble();    if (rand <= 1.0 / alpha) {      alpha=alpha * rand;      betaq=Math.pow(alpha,1.0 / (distributionIndex + 1.0));    } else {      alpha=alpha * rand;      alpha=1.0 / (2.0 - alpha);      betaq=Math.pow(alpha,1.0 / (distributionIndex + 1.0));    }    x1=0.5 * ((y1 + y2) - betaq * (y2 - y1));    beta=1.0 / (1.0 + (2.0 * (ub - y2) / (y2 - y1)));    alpha=2.0 - Math.pow(beta,distributionIndex + 1.0);    if (rand <= 1.0 / alpha) {      alpha=alpha * rand;      betaq=Math.pow(alpha,1.0 / (distributionIndex + 1.0));    } else {      alpha=alpha * rand;      alpha=1.0 / (2.0 - alpha);      betaq=Math.pow(alpha,1.0 / (distributionIndex + 1.0));    }    x2=0.5 * ((y1 + y2) + betaq * (y2 - y1));    if (x1 < lb) {      x1=lb;    } else     if (x1 > ub) {      x1=ub;    }    if (x2 < lb) {      x2=lb;    } else     if (x2 > ub) {      x2=ub;    }    if (swap && PRNG.nextBoolean()) {      double temp=x1;      x1=x2;      x2=temp;    }    v1.setValue(x1);    v2.setValue(x2);  }}  }
class C{  public void clamp(){  IntegerVectorSpecies _species=(IntegerVectorSpecies)species;  for (int i=0; i < genomeLength(); i++) {    byte minGene=(byte)_species.minGene(i);    if (genome[i] < minGene)     genome[i]=minGene; else {      byte maxGene=(byte)_species.maxGene(i);      if (genome[i] > maxGene)       genome[i]=maxGene;    }  }}  }
class C{  public static boolean areEqual(StringSet set1,StringSet set2){  return getRemoved(set1,set2).isEmpty() && getRemoved(set2,set1).isEmpty();}  }
class C{  public void buildClassifier(Instances D) throws Exception {  int L=D.classIndex();  int featlength=(D.numAttributes() - L) * 2;  int numSamples=D.numInstances();  int classlength=L * 2;  if (this.order == null) {    order=new ArrayList<Integer>();    for (int j=0; j < D.numInstances(); j++) {      order.add(j);    }  }  if (numFeatures == -1) {    initARAM(featlength,classlength,roa,threshold);  } else {    if (featlength != numFeatures) {      return;    }    if (classlength != numClasses) {      return;    }  }  for (int i=0; i < D.numInstances(); i++) {    Instance instance=D.get(order.get(i));    updateClassifier(instance);  }  System.out.println("Training done, used " + numCategories + " neurons with rho ="+ roa+ ".");}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  boolean eliminateOnlyStackLocals=PhaseOptions.getBoolean(options,"only-stack-locals");  if (Options.v().verbose())   G.v().out.println("[" + b.getMethod().getName() + "] Eliminating dead code...");  if (Options.v().time())   Timers.v().deadCodeTimer.start();  Set<Stmt> essentialStmts=new HashSet<Stmt>();  LinkedList<Stmt> toVisit=new LinkedList<Stmt>();  Chain units=b.getUnits();{    Iterator stmtIt=units.iterator();    while (stmtIt.hasNext()) {      Stmt s=(Stmt)stmtIt.next();      boolean isEssential=true;      if (s instanceof NopStmt)       isEssential=false;      if (s instanceof AssignStmt) {        AssignStmt as=(AssignStmt)s;        if (as.getLeftOp() instanceof Local && (!eliminateOnlyStackLocals || ((Local)as.getLeftOp()).getName().startsWith("$"))) {          Value rhs=as.getRightOp();          isEssential=false;          if (rhs instanceof InvokeExpr || rhs instanceof ArrayRef) {            isEssential=true;          }          if (rhs instanceof InstanceFieldRef && !(!b.getMethod().isStatic() && ((InstanceFieldRef)rhs).getBase() == b.getThisLocal())) {            isEssential=true;          } else           if (rhs instanceof DivExpr || rhs instanceof RemExpr) {            BinopExpr expr=(BinopExpr)rhs;            if (expr.getOp1().getType().equals(IntType.v()) || expr.getOp2().getType().equals(IntType.v()) || expr.getOp1().getType().equals(LongType.v())|| expr.getOp2().getType().equals(LongType.v())) {              isEssential=true;            }          } else           if (rhs instanceof CastExpr) {            isEssential=true;          } else           if (rhs instanceof NewArrayExpr || rhs instanceof NewMultiArrayExpr) {            isEssential=true;          } else           if (rhs instanceof NewExpr || (rhs instanceof FieldRef && !(rhs instanceof InstanceFieldRef))) {            isEssential=true;          }        }      }      if (isEssential) {        essentialStmts.add(s);        toVisit.addLast(s);      }    }  }  ExceptionalUnitGraph graph=new ExceptionalUnitGraph(b);  LocalDefs defs=new SmartLocalDefs(graph,new SimpleLiveLocals(graph));  LocalUses uses=new SimpleLocalUses(graph,defs);{    while (!toVisit.isEmpty()) {      Stmt s=toVisit.removeFirst();      Iterator boxIt=s.getUseBoxes().iterator();      while (boxIt.hasNext()) {        ValueBox box=(ValueBox)boxIt.next();        if (box.getValue() instanceof Local) {          Iterator<Unit> defIt=defs.getDefsOfAt((Local)box.getValue(),s).iterator();          while (defIt.hasNext()) {            Stmt def=(Stmt)defIt.next();            if (!essentialStmts.contains(def)) {              essentialStmts.add(def);              toVisit.addLast(def);            }          }        }      }    }  }{    Iterator stmtIt=units.iterator();    while (stmtIt.hasNext()) {      Stmt s=(Stmt)stmtIt.next();      if (!essentialStmts.contains(s)) {        stmtIt.remove();        s.clearUnitBoxes();      } else       if (s instanceof AssignStmt && ((AssignStmt)s).getLeftOp() == ((AssignStmt)s).getRightOp() && ((AssignStmt)s).getLeftOp() instanceof Local) {        stmtIt.remove();        s.clearUnitBoxes();      }    }  }{    Iterator stmtIt=units.snapshotIterator();    while (stmtIt.hasNext()) {      Stmt s=(Stmt)stmtIt.next();      if (s instanceof AssignStmt && s.containsInvokeExpr()) {        Local l=(Local)((AssignStmt)s).getLeftOp();        InvokeExpr e=s.getInvokeExpr();{          Iterator useIt=uses.getUsesOf(s).iterator();          boolean isEssential=false;          while (useIt.hasNext()) {            UnitValueBoxPair pair=(UnitValueBoxPair)useIt.next();            if (essentialStmts.contains(pair.unit)) {              isEssential=true;              break;            }          }          if (!isEssential) {            Stmt newInvoke=Jimple.v().newInvokeStmt(e);            newInvoke.addAllTagsOf(s);            units.swapWith(s,newInvoke);          }        }      }    }  }  if (Options.v().time())   Timers.v().deadCodeTimer.end();}  }
class C{  private Set<String> parseMechanismsList(String authParameters){  String[] mechanisms=authParameters.split(" ");  return new HashSet<String>(Arrays.asList(mechanisms));}  }
class C{  public void detachFromMovingGrabPoint(OffsetGrabPoint gp){  gp.removeGrabPoint(gpo);}  }
class C{  private static SSHMain parseArguments(String[] args) throws IOException {  if (args.length != 2 && args.length != 4) {    System.err.println(SSHMainBundle.message("sshmain.invalid.amount.of.arguments",Arrays.asList(args)));    System.exit(1);  }  int i=0;  Integer port=null;  if ("-p".equals(args[i])) {    i++;    port=Integer.parseInt(args[i++]);  }  String host=args[i++];  String user;  int atIndex=host.lastIndexOf('@');  if (atIndex == -1) {    user=null;  } else {    user=host.substring(0,atIndex);    host=host.substring(atIndex + 1);  }  String command=args[i];  return new SSHMain(host,user,port,command);}  }
class C{  public static double confidenceForRule(AprioriItemSet premise,AprioriItemSet consequence){  return (double)consequence.m_counter / (double)premise.m_counter;}  }
class C{  @Override public void addChild(FXGNode child){  if (child instanceof SpanNode || child instanceof BRNode || child instanceof TabNode|| child instanceof ImgNode|| child instanceof TCYNode|| child instanceof CDATANode) {    if (child instanceof TCYNode && this.parentNode instanceof TCYNode) {      throw new FXGException(getStartLine(),getStartColumn(),"InvalidNestingElements");    }    if (content == null) {      content=new ArrayList<TextNode>();    }    content.add((TextNode)child);  } else {    super.addChild(child);    return;  }  if (child instanceof AbstractRichTextNode)   ((AbstractRichTextNode)child).setParent(this);}  }
class C{  protected boolean isOffsetValid(int offset){  return getReplacementOffset() <= offset;}  }
class C{  protected ProjectDescriptionImpl(){  super();}  }
class C{  @Override public void draw(Graphics2D g2,DialPlot plot,Rectangle2D frame,Rectangle2D view){  Paint p=this.paint;  if (p instanceof GradientPaint) {    p=this.gradientPaintTransformer.transform((GradientPaint)p,view);  }  g2.setPaint(p);  g2.fill(view);}  }
class C{  private Revision init() throws WikiApiException {  try {    currentArticleID=resultArticles.getInt(1);    String fullRevisionPKs=resultArticles.getString(2);    String revisionCounters=resultArticles.getString(3);    int index=revisionCounters.lastIndexOf(' ');    if (index == -1) {      throw new RuntimeException("Invalid revisioncounter content");    }    this.maxRevision=Integer.parseInt(revisionCounters.substring(index + 1,revisionCounters.length()));    Statement statement=null;    ResultSet result=null;    try {      statement=this.connection.createStatement();      result=statement.executeQuery("SELECT Mapping " + "FROM index_chronological " + "WHERE ArticleID=" + currentArticleID + " LIMIT 1");      if (result.next()) {        this.modus=ITERATE_WITH_MAPPING;        this.chronoIterator=new ChronoIterator(config,connection,result.getString(1),fullRevisionPKs,revisionCounters);        if (this.chronoIterator.hasNext()) {          return this.chronoIterator.next();        } else {          throw new RuntimeException("cIt Revision query failed");        }      } else {        this.modus=ITERATE_WITHOUT_MAPPING;        index=fullRevisionPKs.indexOf(' ');        if (index == -1) {          index=fullRevisionPKs.length();        }        int currentPK=Integer.parseInt(fullRevisionPKs.substring(0,index));        this.revisionIterator=new RevisionIterator(config,currentPK,currentPK + maxRevision - 2,connection);        if (revisionIterator.hasNext()) {          return revisionIterator.next();        } else {          throw new RuntimeException("Revision query failed");        }      }    }  finally {      if (statement != null) {        statement.close();      }      if (result != null) {        result.close();      }    }  } catch (  WikiApiException e) {    throw e;  }catch (  Exception e) {    throw new WikiApiException(e);  }}  }
class C{  public GeoPointMapper maxLevels(Integer maxLevels){  this.maxLevels=maxLevels;  return this;}  }
class C{  @Override public void destroy(){  removeMouseListener(this);}  }
class C{  public static SearchKey buildAnd(List<SearchKey> keys){  return new SearchKey(TYPE_AND,null,keys,0,null,null,null,null,-1,-1);}  }
class C{  public RefactoringExecutionEvent(final IRefactoringHistoryService service,final int type,final RefactoringDescriptorProxy proxy){  Assert.isNotNull(service);  Assert.isNotNull(proxy);  fService=service;  fType=type;  fProxy=proxy;}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case GamlPackage.ACCESS__ARGS:    return args != null;case GamlPackage.ACCESS__NAMED_EXP:  return NAMED_EXP_EDEFAULT == null ? named_exp != null : !NAMED_EXP_EDEFAULT.equals(named_exp);}return super.eIsSet(featureID);}  }
class C{  @Deprecated public static <E>boolean intersects(Iterable<E> s1,Collection<E>... s2){  for (  E e1 : s1) {    for (    Collection<E> s : s2) {      if (s.contains(e1))       return true;    }  }  return false;}  }
class C{  public V remove(Object key){  final int index=indexOfKey(key);  if (index >= 0) {    return removeAt(index);  }  return null;}  }
class C{  protected TypeAliasDefinitionImpl(){  super();}  }
