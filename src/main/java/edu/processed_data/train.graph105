class C{  private Map<String,String> attributesToLowerCase(){  Map<String,String> lowerCaseAttributes=new LinkedHashMap<String,String>();  for (  String key : attributes.keySet()) {    lowerCaseAttributes.put(key.toLowerCase(),attributes.get(key));  }  return lowerCaseAttributes;}  }
class C{  public PrintItemLine(int textsize,Font font,int fontheight){  this.textsize=textsize;  this.font=font;  this.fontheight=fontheight;  m_atext=new ArrayList<>();}  }
class C{  public SpeechConfiguration(String audioFormat){  this.audioFormat=audioFormat;}  }
class C{  @Override public byte[] serialize(String[] array){  if (array == null)   return null;  final int size=array.length;  final byte[][] tmp=new byte[size][];  int total=4 + 4 * size;  for (int i=0; i < size; ++i) {    try {      tmp[i]=array[i].getBytes(UTF_8);    } catch (    UnsupportedEncodingException e) {      throw new IllegalArgumentException("String doesn't support UTF-8 encoding: " + array[i]);    }    total+=tmp[i].length;  }  final byte[] result=new byte[total];  int offset=0;  ByteUtil.intToBytes(size,result,offset);  offset+=4;  for (int i=0; i < size; ++i) {    ByteUtil.intToBytes(tmp[i].length,result,offset);    offset+=4;    System.arraycopy(tmp[i],0,result,offset,tmp[i].length);    offset+=tmp[i].length;  }  return result;}  }
class C{  public void hidePairingDialog(){  if (pairingDialog != null) {    pairingDialog.dismiss();    pairingDialog=null;  }}  }
class C{  public static IPath resolveToAbsoluteFileSystemPath(IPath path){  if (path != null) {    IResource res=null;    if (path.getDevice() == null) {      res=getResource(path);    }    if (res == null) {      return path;    }    IPath location=res.getLocation();    if (location != null) {      return location;    }  }  return null;}  }
class C{  @Override public String toString(){  return getClass().getName() + "[hgap=" + hgap+ ",vgap="+ vgap+ ",rows="+ rows+ ",cols="+ cols+ "]";}  }
class C{  public void writeField(final String name,final float value) throws java.io.IOException {  writeField(name,Float.toString(value));}  }
class C{  public synchronized void writeTo(OutputStream out) throws IOException {  out.write(buf,0,count);}  }
class C{  public col removeElement(String hashcode){  removeElementFromRegistry(hashcode);  return (this);}  }
class C{  public static void main(String[] args) throws Exception {  if (args.length != 1) {    throw new IllegalArgumentException("Please supply one argument, file name of the validated ocsp next update parameters xml.");  }  new OcspNextUpdateSchemaValidator().validateFile(args[0]);}  }
class C{  public static ArrayList<Partition> create(int inclusiveStart,int exclusiveEnd){  return create(inclusiveStart,exclusiveEnd,iCPU);}  }
class C{  public Coordinate circumcentre(){  return circumcentre(this.p0,this.p1,this.p2);}  }
class C{  public static boolean isSynthetic(int flags){  return (flags & AccSynthetic) != 0;}  }
class C{  public static int numDocs(SolrIndexSearcher s,Query q,Query f) throws IOException {  return (null == f) ? s.getDocSet(q).size() : s.numDocs(q,f);}  }
class C{  static int countSetBits(long n){  int count=0;  while (n != 0) {    n&=n - 1;    count++;  }  return count;}  }
class C{  public TouchableSpan(Context context,Link link){  this.link=link;  if (link.getTextColor() == 0) {    this.textColor=getDefaultColor(context);  } else {    this.textColor=link.getTextColor();  }}  }
class C{  static void drawFlush3DBorder(Graphics g,int x,int y,int w,int h){  g.translate(x,y);  g.setColor(MetalLookAndFeel.getControlDarkShadow());  g.drawRect(0,0,w - 2,h - 2);  g.setColor(MetalLookAndFeel.getControlHighlight());  g.drawRect(1,1,w - 2,h - 2);  g.setColor(MetalLookAndFeel.getControl());  g.drawLine(0,h - 1,1,h - 2);  g.drawLine(w - 1,0,w - 2,1);  g.translate(-x,-y);}  }
class C{  public boolean isNotRunning(){  return STATE_NotStarted.equals(m_state) || STATE_Suspended.equals(m_state);}  }
class C{  public Image rotate270Degrees(boolean maintainOpacity){  return Display.impl.rotate270Degrees(this,maintainOpacity);}  }
class C{  private static BitMatrix encodeLowLevel(DefaultPlacement placement,SymbolInfo symbolInfo){  int symbolWidth=symbolInfo.getSymbolDataWidth();  int symbolHeight=symbolInfo.getSymbolDataHeight();  ByteMatrix matrix=new ByteMatrix(symbolInfo.getSymbolWidth(),symbolInfo.getSymbolHeight());  int matrixY=0;  for (int y=0; y < symbolHeight; y++) {    int matrixX;    if ((y % symbolInfo.matrixHeight) == 0) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,(x % 2) == 0);        matrixX++;      }      matrixY++;    }    matrixX=0;    for (int x=0; x < symbolWidth; x++) {      if ((x % symbolInfo.matrixWidth) == 0) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrix.set(matrixX,matrixY,placement.getBit(x,y));      matrixX++;      if ((x % symbolInfo.matrixWidth) == symbolInfo.matrixWidth - 1) {        matrix.set(matrixX,matrixY,(y % 2) == 0);        matrixX++;      }    }    matrixY++;    if ((y % symbolInfo.matrixHeight) == symbolInfo.matrixHeight - 1) {      matrixX=0;      for (int x=0; x < symbolInfo.getSymbolWidth(); x++) {        matrix.set(matrixX,matrixY,true);        matrixX++;      }      matrixY++;    }  }  return convertByteMatrixToBitMatrix(matrix);}  }
class C{  private void createChildren(){  if (m_addressSpace.isLoaded()) {    for (    final INaviModule module : m_addressSpace.getContent().getModules()) {      add(new ViewSelectionModuleNode(m_parent,module,m_model));    }  }}  }
class C{  public OMRangeRings(LatLonPoint center,double radius,Length units,int nverts){  super(center,radius,units,nverts);  centerPoint=createCenterPoint();  form.setMaximumFractionDigits(2);}  }
class C{  public static int paramSize(String desc){  return -dataSize(desc,false);}  }
class C{  private void initializeInferredSettings(final Object object){  if (object instanceof INameUpdating) {    final INameUpdating updating=(INameUpdating)object;    fSettings.add(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptor_original_element_pattern,JavaElementLabels.getTextLabel(updating.getElements()[0],JavaElementLabels.ALL_FULLY_QUALIFIED)));    try {      final Object element=updating.getNewElement();      if (element != null)       fSettings.add(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptor_renamed_element_pattern,JavaElementLabels.getTextLabel(element,JavaElementLabels.ALL_FULLY_QUALIFIED))); else {        final String newLabel=BasicElementLabels.getJavaElementName(updating.getCurrentElementName());        fSettings.add(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptor_renamed_element_pattern,newLabel));      }    } catch (    CoreException exception) {      JavaPlugin.log(exception);    }  } else   if (object instanceof RefactoringProcessor) {    final RefactoringProcessor processor=(RefactoringProcessor)object;    final Object[] elements=processor.getElements();    if (elements != null) {      if (elements.length == 1 && elements[0] != null)       fSettings.add(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptor_original_element_pattern,JavaElementLabels.getTextLabel(elements[0],JavaElementLabels.ALL_FULLY_QUALIFIED))); else       if (elements.length > 1) {        final StringBuffer buffer=new StringBuffer(128);        buffer.append(RefactoringCoreMessages.JavaRefactoringDescriptor_original_elements);        for (int index=0; index < elements.length; index++) {          if (elements[index] != null) {            buffer.append(LINE_DELIMITER);            buffer.append(ELEMENT_DELIMITER);            buffer.append(JavaElementLabels.getTextLabel(elements[index],JavaElementLabels.ALL_FULLY_QUALIFIED));          } else {            buffer.append(LINE_DELIMITER);            buffer.append(ELEMENT_DELIMITER);            buffer.append(RefactoringCoreMessages.JavaRefactoringDescriptor_not_available);          }        }        fSettings.add(buffer.toString());      }    }  } else   if (object instanceof IReorgPolicy) {    final IReorgPolicy policy=(IReorgPolicy)object;    Object destination=policy.getJavaElementDestination();    if (destination != null)     fSettings.add(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptorComment_destination_pattern,JavaElementLabels.getTextLabel(destination,JavaElementLabels.ALL_FULLY_QUALIFIED))); else {      destination=policy.getResourceDestination();      if (destination != null)       fSettings.add(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptorComment_destination_pattern,JavaElementLabels.getTextLabel(destination,JavaElementLabels.ALL_FULLY_QUALIFIED)));    }    final List<IAdaptable> list=new ArrayList<IAdaptable>();    list.addAll(Arrays.asList(policy.getJavaElements()));    list.addAll(Arrays.asList(policy.getResources()));    final Object[] elements=list.toArray();    if (elements != null) {      if (elements.length == 1 && elements[0] != null)       fSettings.add(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptor_original_element_pattern,JavaElementLabels.getTextLabel(elements[0],JavaElementLabels.ALL_FULLY_QUALIFIED))); else       if (elements.length > 1) {        final StringBuffer buffer=new StringBuffer(128);        buffer.append(RefactoringCoreMessages.JavaRefactoringDescriptor_original_elements);        for (int index=0; index < elements.length; index++) {          if (elements[index] != null) {            buffer.append(LINE_DELIMITER);            buffer.append(ELEMENT_DELIMITER);            buffer.append(JavaElementLabels.getTextLabel(elements[index],JavaElementLabels.ALL_FULLY_QUALIFIED));          } else {            buffer.append(LINE_DELIMITER);            buffer.append(ELEMENT_DELIMITER);            buffer.append(RefactoringCoreMessages.JavaRefactoringDescriptor_not_available);          }        }        fSettings.add(buffer.toString());      }    }    if (object instanceof IMovePolicy) {      final IMovePolicy extended=(IMovePolicy)object;      if (extended.isTextualMove())       fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptorComment_textual_move_only);    }  }  if (object instanceof IReferenceUpdating) {    final IReferenceUpdating updating=(IReferenceUpdating)object;    if (updating.getUpdateReferences())     fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptor_update_references);  }  if (object instanceof ISimilarDeclarationUpdating) {    final ISimilarDeclarationUpdating updating=(ISimilarDeclarationUpdating)object;    if (updating.canEnableSimilarDeclarationUpdating() && updating.getUpdateSimilarDeclarations()) {      final int strategy=updating.getMatchStrategy();      if (strategy == RenamingNameSuggestor.STRATEGY_EXACT)       fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptor_rename_similar); else       if (strategy == RenamingNameSuggestor.STRATEGY_EMBEDDED)       fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptor_rename_similar_embedded); else       if (strategy == RenamingNameSuggestor.STRATEGY_SUFFIX)       fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptor_rename_similar_suffix);    }  }  if (object instanceof IQualifiedNameUpdating) {    final IQualifiedNameUpdating updating=(IQualifiedNameUpdating)object;    if (updating.canEnableQualifiedNameUpdating() && updating.getUpdateQualifiedNames()) {      final String patterns=updating.getFilePatterns();      if (patterns != null && !"".equals(patterns))       fSettings.add(Messages.format(RefactoringCoreMessages.JavaRefactoringDescriptor_qualified_names_pattern,BasicElementLabels.getFilePattern(patterns.trim()))); else       fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptor_qualified_names);    }  }  if (object instanceof ITextUpdating) {    final ITextUpdating updating=(ITextUpdating)object;    if (updating.canEnableTextUpdating())     fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptor_textual_occurrences);  }  if (object instanceof IDelegateUpdating) {    final IDelegateUpdating updating=(IDelegateUpdating)object;    if (updating.canEnableDelegateUpdating() && updating.getDelegateUpdating()) {      if (updating.getDeprecateDelegates())       fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptor_keep_original_deprecated); else       fSettings.add(RefactoringCoreMessages.JavaRefactoringDescriptor_keep_original);    }  }}  }
class C{  public static void main(String[] args){  int[] counts=new int[10];  for (int i=1; i <= 100; i++) {    counts[(int)(Math.random() * 10)]++;  }  System.out.println("Count for each number between 0 and 9:");  for (int i=0; i < counts.length; i++) {    System.out.println(i + "s: " + counts[i]);  }}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.476 -0400",hash_original_method="B82B927E9AF02AC9DAC77E074F6BBD30",hash_generated_method="8DF4356E8F366D7D46C891448336116D") @Override public void close() throws IOException {  try {    in.close();  } catch (  IOException e) {    handleIOException(e);  }}  }
class C{  private static boolean bigger(Dimension d1,Dimension d2){  if (d1.height > d2.height || d1.width > d2.width) {    return true;  }  return false;}  }
class C{  private static TreeItem<String> populateAvailableFonts(final TreeItem<String> top,String filter,final boolean sortFontsByDir){  if (FontMappings.fontSubstitutionTable != null) {    final Set<String> fonts=FontMappings.fontSubstitutionTable.keySet();    final Iterator<String> fontList=FontMappings.fontSubstitutionTable.keySet().iterator();    final int fontCount=fonts.size();    final ArrayList<String> fontNames=new ArrayList<String>(fontCount);    while (fontList.hasNext()) {      fontNames.add(fontList.next());    }    Collections.sort(fontNames);    final java.util.List<String> location=new ArrayList<String>();    final java.util.List<TreeItem<String>> locationNode=new ArrayList<TreeItem<String>>();    String current;    String lowerCaseFilter="";    if (filter != null) {      lowerCaseFilter=filter.toLowerCase();    }    for (    String nextFont : fontNames) {      current=(FontMappings.fontSubstitutionLocation.get(nextFont));      int ptr=current.lastIndexOf(System.getProperty("file.separator"));      if (ptr == -1 && current.indexOf('/') != -1) {        ptr=current.lastIndexOf('/');      }      if (ptr != -1) {        current=current.substring(0,ptr);      }      if (filter == null || nextFont.toLowerCase().contains(lowerCaseFilter)) {        if (sortFontsByDir && !location.contains(current)) {          location.add(current);          final TreeItem<String> loc=new TreeItem<String>(current);          top.getChildren().add(loc);          locationNode.add(loc);        }        final TreeItem<String> currentFontNode=new TreeItem<String>(nextFont + " = " + FontMappings.fontSubstitutionLocation.get(nextFont));        if (sortFontsByDir) {          final int pos=location.indexOf(current);          locationNode.get(pos).getChildren().add(currentFontNode);        } else {          top.getChildren().add(currentFontNode);        }        final String loc=FontMappings.fontPropertiesTablePath.get(nextFont);        final Integer type=FontMappings.fontPropertiesTableType.get(nextFont);        final Map<String,String> properties=StandardFonts.getFontDetails(type,loc);        if (properties != null) {          for (          final String key : properties.keySet()) {            final Object value=properties.get(key);            final TreeItem<String> fontDetails=new TreeItem<String>(key + " = " + value);            currentFontNode.getChildren().add(fontDetails);          }        }      }    }  }  return top;}  }
class C{  public Map<String,Object> processInputs(Map<String,Object> inputs,Draft2PortProcessorCallback portProcessor) throws Draft2PortProcessorException {  return processValues(inputs,job.getApp().getInputs(),Draft2InputPort.class,portProcessor);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static String formatSize(int size){  String suffix=null;  if (size >= 1024) {    suffix="KB";    size/=1024;    if (size >= 1024) {      suffix="MB";      size/=1024;    }  }  StringBuilder resultBuffer=new StringBuilder(Long.toString(size));  int commaOffset=resultBuffer.length() - 3;  while (commaOffset > 0) {    resultBuffer.insert(commaOffset,',');    commaOffset-=3;  }  if (suffix != null)   resultBuffer.append(suffix);  return resultBuffer.toString();}  }
class C{  public void processingInstruction(String target,String data) throws SAXException {  flushStartDoc();  m_resultContentHandler.processingInstruction(target,data);}  }
class C{  public static Log newLog(String filename,int size,int numFiles){  return new Log(filename,size,numFiles);}  }
class C{  final public int len(){  return buf.length;}  }
class C{  public HessianServiceException(String message,String code,Object detail){  super(message);  this.code=code;  this.detail=detail;}  }
class C{  protected void parseList(ArrayList list,String text){  list.clear();  StringTokenizer st=new StringTokenizer(text,"\n\r");  while (st.hasMoreElements()) {    String line=(String)st.nextElement();    list.add(line.trim());  }}  }
class C{  private void sendConfiguredNetworksChangedBroadcast(WifiConfiguration network,int reason){  Intent intent=new Intent(WifiManager.CONFIGURED_NETWORKS_CHANGED_ACTION);  intent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);  intent.putExtra(WifiManager.EXTRA_MULTIPLE_NETWORKS_CHANGED,false);  intent.putExtra(WifiManager.EXTRA_WIFI_CONFIGURATION,network);  intent.putExtra(WifiManager.EXTRA_CHANGE_REASON,reason);  mContext.sendBroadcastAsUser(intent,UserHandle.ALL);}  }
class C{  private static void addPreviousLayer(List<List<Neuron>> layers,List<Neuron> sourceLayer,List<Neuron> layerToCheck){  final int MAXLAYERS=100;  Set<Neuron> newLayerTemp=new HashSet<Neuron>();  boolean theNextLayerIsTheSourceLayer=false;  for (  Neuron neuron : layerToCheck) {    for (    Synapse synapse : neuron.getFanIn()) {      Neuron sourceNeuron=synapse.getSource();      if (sourceLayer.contains(sourceNeuron)) {        theNextLayerIsTheSourceLayer=true;      }      if (sourceNeuron == neuron) {        continue;      }      newLayerTemp.add(synapse.getSource());    }  }  if ((theNextLayerIsTheSourceLayer) || (newLayerTemp.size() == 0) || (layers.size() > MAXLAYERS)) {    layers.add(sourceLayer);  } else {    List<Neuron> newLayer=new ArrayList<Neuron>(newLayerTemp);    Collections.sort(newLayer,OrientationComparator.X_ORDER);    layers.add(newLayer);    addPreviousLayer(layers,sourceLayer,newLayer);  }}  }
class C{  public CipherParameters generateDerivedParameters(int keySize,int ivSize){  keySize=keySize / 8;  ivSize=ivSize / 8;  byte[] dKey=generateDerivedKey(keySize + ivSize);  return new ParametersWithIV(new KeyParameter(dKey,0,keySize),dKey,keySize,ivSize);}  }
class C{  private FieldTypeSignature parseFieldTypeSignature(){  return parseFieldTypeSignature(true);}  }
class C{  public static IPath stampToPath(final long stamp){  fgCalendar.setTimeInMillis(stamp);  final StringBuffer buffer=new StringBuffer(256);  buffer.append(fgCalendar.get(Calendar.YEAR));  buffer.append(IPath.SEPARATOR);  buffer.append(fgCalendar.get(Calendar.MONTH) + 1);  buffer.append(IPath.SEPARATOR);  buffer.append(fgCalendar.get(Calendar.WEEK_OF_YEAR));  return new Path(buffer.toString());}  }
class C{  private static InetAddress decodeIpv6(String input,int pos,int limit){  byte[] address=new byte[16];  int b=0;  int compress=-1;  int groupOffset=-1;  for (int i=pos; i < limit; ) {    if (b == address.length)     return null;    if (i + 2 <= limit && input.regionMatches(i,"::",0,2)) {      if (compress != -1)       return null;      i+=2;      b+=2;      compress=b;      if (i == limit)       break;    } else     if (b != 0) {      if (input.regionMatches(i,":",0,1)) {        i++;      } else       if (input.regionMatches(i,".",0,1)) {        if (!decodeIpv4Suffix(input,groupOffset,limit,address,b - 2))         return null;        b+=2;        break;      } else {        return null;      }    }    int value=0;    groupOffset=i;    for (; i < limit; i++) {      char c=input.charAt(i);      int hexDigit=decodeHexDigit(c);      if (hexDigit == -1)       break;      value=(value << 4) + hexDigit;    }    int groupLength=i - groupOffset;    if (groupLength == 0 || groupLength > 4)     return null;    address[b++]=(byte)((value >>> 8) & 0xff);    address[b++]=(byte)(value & 0xff);  }  if (b != address.length) {    if (compress == -1)     return null;    System.arraycopy(address,compress,address,address.length - (b - compress),b - compress);    Arrays.fill(address,compress,compress + (address.length - b),(byte)0);  }  try {    return InetAddress.getByAddress(address);  } catch (  UnknownHostException e) {    throw new AssertionError();  }}  }
class C{  @Override public int hashCode(){  int result=super.hashCode();  result=result * 37 + (this.renderAsPercentages ? 1 : 0);  return result;}  }
class C{  public String globalInfo(){  return "Reads a source that is in the XML version of the ARFF format. " + "It automatically decompresses the data if the extension is '" + FILE_EXTENSION_COMPRESSED + "'.";}  }
class C{  private int read() throws IOException {  if (reader != null)   return reader.read(); else   if (input != null)   return input.read(); else   throw new IllegalStateException();}  }
class C{  public static void checkURI(String uri) throws IOException {  try {    URI ur=new URI(uri);    if (ur.getScheme() == null || ur.getRawSchemeSpecificPart().isEmpty()) {      throw new IOException("No scheme or scheme-specific-part in uniformResourceIdentifier: " + uri);    }    if (!ur.isAbsolute()) {      throw new IOException("Relative uniformResourceIdentifier: " + uri);    }  } catch (  URISyntaxException e) {    throw (IOException)new IOException("Bad representation of uniformResourceIdentifier: " + uri).initCause(e);  }}  }
class C{  public static void LSTORE_0(){  if (ignoreCallback)   return;  ignoreCallback=true;  vm.countCallback();  try {    for (    IVM listener : vm.listeners)     listener.LSTORE_0();  } catch (  Throwable t) {    handleException(t);  }  ignoreCallback=false;}  }
class C{  public static void registerDefaultKeyBinds(MegaMekController controller){  for (  KeyCommandBind kcb : KeyCommandBind.values()) {    controller.registerKeyCommandBind(kcb);  }}  }
class C{  public UniversalConnection connect(String datasourceName) throws ReplicatorException {  UniversalDataSource uds=getDataSource(datasourceName);  if (uds == null)   return null; else {    UniversalConnection connection=uds.getConnection();    connectionMap.put(connection,uds);    return connection;  }}  }
class C{  public Options generateSourceArchive(boolean flag){  gensrc=flag;  return this;}  }
class C{  public static WorkspaceComponent deserializeWorkspaceComponent(final Class<?> clazz,final String name,final InputStream input,final String format){  try {    Method method=clazz.getMethod("open",InputStream.class,String.class,String.class);    WorkspaceComponent wc=(WorkspaceComponent)method.invoke(null,input,name,format);    wc.setChangedSinceLastSave(false);    return wc;  } catch (  RuntimeException e) {    throw e;  }catch (  Exception e) {    throw new RuntimeException(e);  }}  }
class C{  public T caseArrayPadding(ArrayPadding object){  return null;}  }
class C{  public boolean hasContentTypeParameter(String param){  return data.hasContentTypeParameter(userAgent,param);}  }
class C{  public long create_sample_description_atom(MP4DataStream bitstream) throws IOException {  create_full_atom(bitstream);  entryCount=(int)bitstream.readBytes(4);  log.trace("stsd entry count: {}",entryCount);  readed+=4;  for (int i=0; i < entryCount; i++) {    MP4Atom child=MP4Atom.createAtom(bitstream);    this.children.add(child);    readed+=child.getSize();  }  return readed;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:11.381 -0500",hash_original_method="CADE37F941AEDF2CA8074F527733BC85",hash_generated_method="C6239C78BBC23A99499107C161EE981F") public static synchronized PasswordAuthentication requestPasswordAuthentication(InetAddress rAddr,int rPort,String rProtocol,String rPrompt,String rScheme){  if (thisAuthenticator == null) {    return null;  }  thisAuthenticator.addr=rAddr;  thisAuthenticator.port=rPort;  thisAuthenticator.protocol=rProtocol;  thisAuthenticator.prompt=rPrompt;  thisAuthenticator.scheme=rScheme;  thisAuthenticator.rt=RequestorType.SERVER;  return thisAuthenticator.getPasswordAuthentication();}  }
class C{  public XZFormatException(){  super("Input is not in the XZ format");}  }
class C{  public CCriteriaFactory(final ZyGraph graph,final View2D view2D,final ITagManager tagManager){  m_graph=Preconditions.checkNotNull(graph,"IE01316: Graph argument can not be null");  m_view2D=view2D;  m_tagManager=tagManager;}  }
class C{  public static boolean isAuthenticated(){  SecurityContext securityContext=SecurityContextHolder.getContext();  Collection<? extends GrantedAuthority> authorities=securityContext.getAuthentication().getAuthorities();  if (authorities != null) {    for (    GrantedAuthority authority : authorities) {      if (authority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)) {        return false;      }    }  }  return true;}  }
class C{  public List<EndpointHandle> bind(String bindAddress,Endpoint endpointAddress) throws ServiceResultException {  List<EndpointHandle> result=new ArrayList<EndpointHandle>();  String scheme=UriUtil.getTransportProtocol(bindAddress);  List<SocketAddress> socketAddresses=EndpointUtil.toSocketAddresses(bindAddress);  if (socketAddresses.isEmpty())   return Collections.emptyList();  EndpointServer endpointServer=application.getOrCreateEndpointServer(scheme);  for (  SocketAddress socketAddress : socketAddresses) {    EndpointBinding eb=new EndpointBinding(endpointServer,endpointAddress,this);    EndpointHandle handle=endpointServer.bind(socketAddress,eb);    boundHandles.add(handle);  }  return result;}  }
class C{  public boolean next() throws IOException {  boolean hasNext=true;  try {    pageId=stream.readInt();    pageNamespace=stream.readInt();    pageTitle=stream.readUTFAsArray();    pageIsRedirect=stream.readBoolean();  } catch (  EOFException e) {    hasNext=false;  }  return hasNext;}  }
class C{  public boolean isComplete(){  return isComplete_;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public final void removeCallbacks(Runnable r,Object token){  final WeakRunnable runnable=mRunnables.remove(r);  if (runnable != null) {    mExec.removeCallbacks(runnable,token);  }}  }
class C{  protected Diff processRevision(final Revision revision) throws UnsupportedEncodingException {  try {    if (revision.getRevisionText() == null) {      return null;    }  } catch (  NullPointerException e) {    return null;  }  revTemp=revision.getRevisionText().toCharArray();  if (MODE_SURROGATES == SurrogateModes.DISCARD_REVISION) {    if (Surrogates.scan(revTemp)) {      return null;    }  }  Diff diff;  if (revisionCounter % COUNTER_FULL_REVISION == 0) {    diff=generateFullRevision(revision);  } else {    diff=generateDiff(revPrevious,revTemp);    if (diff.size() == 0) {      return null;    }  }  return diff;}  }
class C{  public static boolean isMailValid(final String emailAddress){  final String QUOTEDSTRING="\"(?:[^\"\\\\]|\\\\\\p{ASCII})*\"";  final String ATOM="[^()<>@,;:\\\\\".\\[\\] \\x28\\p{Cntrl}]+";  final String WORD="(?:" + ATOM + "|"+ QUOTEDSTRING+ ")";  final String SUBDOMAIN="(?:" + ATOM + "|\\[(?:[^\\[\\]\\\\]|\\\\\\p{ASCII})*\\])";  final String DOMAIN=SUBDOMAIN + "(?:\\." + SUBDOMAIN+ ")*";  final String LOCALPART=WORD + "(?:\\." + WORD+ ")*";  final String EMAIL=LOCALPART + "@" + DOMAIN;  final String regex="(\\s*" + EMAIL + "\\s*)*";  return emailAddress.matches(regex);}  }
class C{  public void addText(String str){  if (text == null)   text=new StringBuffer();  text.append(str);}  }
class C{  public FilterStage(float[] coefficients){  mCoefficients=coefficients;  mBufferSize=mCoefficients.length;  mBuffer=new float[mBufferSize];  mBufferPointer=mBufferSize;  generateIndexMap(mBufferSize);}  }
class C{  public boolean canWriteProgressive(){  return canWriteProgressive;}  }
class C{  @Override public boolean overlaps(SequenceNameLocus locus){  return overlaps(locus.getSequenceName(),locus.getStart(),locus.getEnd());}  }
class C{  public boolean transferCall(String transferUri){  if (NgnStringUtils.isNullOrEmpty(transferUri) || !NgnUriUtils.isValidSipUri(transferUri)) {    return false;  }  return super.isActive() ? mSession.transfer(transferUri) : false;}  }
class C{  public boolean writeHeader(OutputStream os){  try {    writeInt(os,CACHE_MAGIC);    writeString(os,key);    writeString(os,etag == null ? "" : etag);    writeLong(os,serverDate);    writeLong(os,ttl);    writeLong(os,softTtl);    writeStringStringMap(responseHeaders,os);    os.flush();    return true;  } catch (  IOException e) {    VolleyLog.d("%s",e.toString());    return false;  }}  }
class C{  public LongChunks(final long length){  this(length,CHUNK_BITS);}  }
class C{  public void onReceive(){synchronized (this) {    if (log.isTraceEnabled())     log.trace("Moving transaction synchronizer to completed state [nodeId=" + nodeId + ", threadId="+ threadId+ ']');    cnt=0;    if (pendingFut != null) {      pendingFut.onDone();      pendingFut=null;    }  }}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  void computeCrossRefs(Resource resource,IAcceptor<EObject> acceptor){  TreeIterator<EObject> allContentsIter=resource.getAllContents();  while (allContentsIter.hasNext()) {    EObject eObject=allContentsIter.next();    computeCrossRefs(eObject,acceptor);  }}  }
class C{  private long maybeResyncToNextLevel1Element(ExtractorInput input) throws EOFException, IOException, InterruptedException {  input.resetPeekPosition();  while (true) {    input.peekFully(scratch,0,MAX_ID_BYTES);    int varintLength=VarintReader.parseUnsignedVarintLength(scratch[0]);    if (varintLength != -1 && varintLength <= MAX_ID_BYTES) {      int potentialId=(int)VarintReader.assembleVarint(scratch,varintLength,false);      if (output.isLevel1Element(potentialId)) {        input.skipFully(varintLength);        return potentialId;      }    }    input.skipFully(1);  }}  }
class C{  @GET @Path("null") @View("hello.jsp") public String nullController(){  return null;}  }
class C{  public static Set<Dimension> parseSizes(String sizesAttr){  Set<Dimension> sizes=new HashSet<Dimension>();  Set<String> tokens=parseSpaceSeparatedTokens(sizesAttr);  for (  String token : tokens) {    if (token != null) {      Matcher matcher=IconEntry.SIZE_PATTERN.matcher(token);      if (matcher.matches()) {        sizes.add(new Dimension(Integer.parseInt(matcher.group(1)),Integer.parseInt(matcher.group(2))));      }    }  }  return sizes;}  }
class C{  private void writeObject(ObjectOutputStream out) throws IOException {  out.defaultWriteObject();  doWriteObject(out);}  }
class C{  public void handleGesture(LinkActionRequest lar,Link link) throws IOException {  LinkProperties properties=new LinkProperties();  properties.setProperty(LPC_INFO,("Mouse Clicked at: x = " + lar.getX() + ", y = "+ lar.getY()));  LinkActionList lal=new LinkActionList(link,properties);  String gid=lar.getProperties().getProperty(LPC_GRAPHICID);  if (gid == null) {    System.out.println("Deselecting graphics");    lal.deselectGraphics();  } else {    System.out.println("Selecting graphic");    lal.modifyGraphic(LinkActionList.MODIFY_SELECT_GRAPHIC_MASK,lar.getProperties());  }  lal.end(Link.END_TOTAL);}  }
class C{  public void activate(){  if (getRaptorTabItemSelection() != null) {    getRaptorTabItemSelection().raptorItem.onActivate();  }}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:59:04.804 -0500",hash_original_method="30C4B6CD40D711382C087F999961E577",hash_generated_method="DA61DAAA30AE3E61CF44B7B5BEA9107D") static ItemsIconId retrieveItemsIconId(ComprehensionTlv ctlv) throws ResultException {  CatLog.d("ValueParser","retrieveItemsIconId:");  ItemsIconId id=new ItemsIconId();  byte[] rawValue=ctlv.getRawValue();  int valueIndex=ctlv.getValueIndex();  int numOfItems=ctlv.getLength() - 1;  id.recordNumbers=new int[numOfItems];  try {    id.selfExplanatory=(rawValue[valueIndex++] & 0xff) == 0x00;    for (int index=0; index < numOfItems; ) {      id.recordNumbers[index++]=rawValue[valueIndex++];    }  } catch (  IndexOutOfBoundsException e) {    throw new ResultException(ResultCode.CMD_DATA_NOT_UNDERSTOOD);  }  return id;}  }
class C{  public void wrap(){  append(StringUtils.LS);  append(mPrefix);}  }
class C{  protected void enableButtons(boolean[] buttonStates){  for (int i=0; i < buttons.length; i++)   buttons[i].setEnabled(buttonStates[i]);}  }
class C{  public boolean isDocOrdered(){  return false;}  }
class C{  public String toString(){  return "Gnomonic[" + super.toString();}  }
class C{  public void propagateMinimumLevel(V v){  int level=minLevels.get(v).intValue();  for (  V child : getGraph().getPredecessors(v)) {    int oldLevel, newLevel;    Number o=minLevels.get(child);    if (o != null)     oldLevel=o.intValue(); else     oldLevel=0;    newLevel=Math.max(oldLevel,level + 1);    minLevels.put(child,new Integer(newLevel));    if (newLevel > graphHeight)     graphHeight=newLevel;    propagateMinimumLevel(child);  }}  }
class C{  protected DefaultImportSpecifierImpl(){  super();}  }
class C{  @Override public TupleFilter onSerialize(TupleFilter filter){  if (filter == null)   return null;  if (root == filter) {    isInTopLevelANDs.put(filter,true);  }  if (isInTopLevelANDs.containsKey(filter)) {    classifyChildrenByMarking(filter);    if (filter instanceof CompareTupleFilter) {      TblColRef c=((CompareTupleFilter)filter).getColumn();      if (c != null && c.equals(tsColumn)) {        return null;      }    }  }  return filter;}  }
class C{  protected void before(Description description) throws Throwable {}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public static CacheConfiguration<AffinityUuid,String> wordCache(){  CacheConfiguration<AffinityUuid,String> cfg=new CacheConfiguration<>("words");  cfg.setIndexedTypes(AffinityUuid.class,String.class);  cfg.setExpiryPolicyFactory(FactoryBuilder.factoryOf(new CreatedExpiryPolicy(new Duration(SECONDS,1))));  return cfg;}  }
class C{  public PiePlotNavigator(PiePlot plot){  this.plot=plot;  this.zoom=1.0;  setDefaultState();}  }
class C{  public CSVParser(){  this(DEFAULT_SEPARATOR,DEFAULT_QUOTE_CHARACTER,DEFAULT_ESCAPE_CHARACTER);}  }
class C{  public static void main(String[] args){  runMe(args);}  }
class C{  private void extract(Extractor extractor) throws Exception {  Annotation[] list=extractor.getAnnotations();  for (  Annotation label : list) {    extract(extractor,label);  }}  }
class C{  @SuppressWarnings("unused") private SpecificMessage(){}  }
class C{  public void refreshRemoveDocument(int id) throws Exception {  m_documents.refreshRemoveNode(id);}  }
class C{  public boolean validateValue(){  if (m_value == null || m_value.toString().length() == 0) {    if (isMandatory(true)) {      m_error=true;      return false;    } else     return true;  }  if (getDisplayType() == DisplayType.Search && m_lookup != null) {    if (m_lookup.getDirect(m_value,false,true) == null) {      log.finest(m_vo.ColumnName + " Serach not valid - set to null");      setValue(null,m_inserting);      m_error=true;      return false;    }    return true;  }  if (!isLookup() || m_lookup == null || m_lookup.containsKey(m_value))   return true;  if (isKey() || isParentValue())   return true;  log.finest(m_vo.ColumnName + " - set to null");  setValue(null,m_inserting);  m_error=true;  return false;}  }
class C{  private boolean addTokenForVerification(final Token token){  final boolean traceEnabled=logger.isTraceEnabled();synchronized (tokensToProcess) {    if (traceEnabled) {      logger.trace("addTokenForVerification: trying to acquire synchronized block");    }    try {      if (token == null) {        return false;      }      if (tokensToProcess.containsKey(token)) {        if (traceEnabled) {          logger.trace("Token was already in the list {}:{}",new Object[]{token.getClass().getSimpleName(),token.getAbbreviation()});        }        return false;      }      tokensToProcess.put(token,null);      if (traceEnabled) {        logger.trace("+ New {} to check: {}",new Object[]{token.getClass().getSimpleName(),token.getAbbreviation()});      }      return true;    }  finally {      if (traceEnabled) {        logger.trace("addTokenForVerification: almost left synchronized block");      }    }  }}  }
class C{  private void writePoints(SegmentWriteState state) throws IOException {  PointsWriter pointsWriter=null;  boolean success=false;  try {    for (int i=0; i < fieldHash.length; i++) {      PerField perField=fieldHash[i];      while (perField != null) {        if (perField.pointValuesWriter != null) {          if (perField.fieldInfo.getPointDimensionCount() == 0) {            throw new AssertionError("segment=" + state.segmentInfo + ": field=\""+ perField.fieldInfo.name+ "\" has no points but wrote them");          }          if (pointsWriter == null) {            PointsFormat fmt=state.segmentInfo.getCodec().pointsFormat();            if (fmt == null) {              throw new IllegalStateException("field=\"" + perField.fieldInfo.name + "\" was indexed as points but codec does not support points");            }            pointsWriter=fmt.fieldsWriter(state);          }          perField.pointValuesWriter.flush(state,pointsWriter);          perField.pointValuesWriter=null;        } else         if (perField.fieldInfo.getPointDimensionCount() != 0) {          throw new AssertionError("segment=" + state.segmentInfo + ": field=\""+ perField.fieldInfo.name+ "\" has points but did not write them");        }        perField=perField.next;      }    }    if (pointsWriter != null) {      pointsWriter.finish();    }    success=true;  }  finally {    if (success) {      IOUtils.close(pointsWriter);    } else {      IOUtils.closeWhileHandlingException(pointsWriter);    }  }}  }
class C{  public String completeIt(){  if (!m_justPrepared) {    String status=prepareIt();    if (!DocAction.STATUS_InProgress.equals(status))     return status;  }  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_COMPLETE);  if (m_processMsg != null)   return DocAction.STATUS_Invalid;  if (!isApproved())   approveIt();  log.info("completeIt - " + toString());  MRMA counter=createCounterDoc();  if (counter != null)   m_processMsg="@CounterDoc@: RMA=" + counter.getDocumentNo();  String valid=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_COMPLETE);  if (valid != null) {    m_processMsg=valid;    return DocAction.STATUS_Invalid;  }  setDefiniteDocumentNo();  setProcessed(true);  setDocAction(DOCACTION_Close);  return DocAction.STATUS_Completed;}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("process") @Valid Process process,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.Process parentProcess1=processDAO.get(process.getProcessId());    if (parentProcess1.getProcess() != null)     processDAO.securityCheck(parentProcess1.getProcess().getProcessId(),principal.getName(),WRITE); else     processDAO.securityCheck(process.getProcessId(),principal.getName(),WRITE);    com.wipro.ats.bdre.md.dao.jpa.Process updateDaoProcess=processDAO.get(process.getProcessId());    com.wipro.ats.bdre.md.dao.jpa.ProcessType daoProcessType=new com.wipro.ats.bdre.md.dao.jpa.ProcessType();    daoProcessType.setProcessTypeId(process.getProcessTypeId());    updateDaoProcess.setProcessType(daoProcessType);    if (process.getWorkflowId() != null) {      WorkflowType daoWorkflowType=new WorkflowType();      daoWorkflowType.setWorkflowId(process.getWorkflowId());      updateDaoProcess.setWorkflowType(daoWorkflowType);    }    BusDomain daoBusDomain=new BusDomain();    daoBusDomain.setBusDomainId(process.getBusDomainId());    updateDaoProcess.setBusDomain(daoBusDomain);    if (process.getProcessTemplateId() != null) {      ProcessTemplate daoProcessTemplate=new ProcessTemplate();      daoProcessTemplate.setProcessTemplateId(process.getProcessTemplateId());      updateDaoProcess.setProcessTemplate(daoProcessTemplate);    }    if (process.getParentProcessId() != null) {      com.wipro.ats.bdre.md.dao.jpa.Process parentProcess=processDAO.get(process.getParentProcessId());      updateDaoProcess.setProcess(parentProcess);    }    updateDaoProcess.setDescription(process.getDescription());    updateDaoProcess.setAddTs(DateConverter.stringToDate(process.getTableAddTS()));    updateDaoProcess.setProcessName(process.getProcessName());    if (process.getCanRecover() == null)     updateDaoProcess.setCanRecover(true); else     updateDaoProcess.setCanRecover(process.getCanRecover());    updateDaoProcess.setEnqueuingProcessId(process.getEnqProcessId());    if (process.getBatchPattern() != null) {      updateDaoProcess.setBatchCutPattern(process.getBatchPattern());    }    updateDaoProcess.setNextProcessId(process.getNextProcessIds());    if (process.getDeleteFlag() == null)     updateDaoProcess.setDeleteFlag(false); else     updateDaoProcess.setDeleteFlag(process.getDeleteFlag());    updateDaoProcess.setEditTs(DateConverter.stringToDate(process.getTableEditTS()));    if (process.getPermissionTypeByUserAccessId() != null)     updateDaoProcess.setPermissionTypeByUserAccessId(appPermissionDAO.get(process.getPermissionTypeByUserAccessId()));    if (process.getPermissionTypeByGroupAccessId() != null)     updateDaoProcess.setPermissionTypeByGroupAccessId(appPermissionDAO.get(process.getPermissionTypeByGroupAccessId()));    if (process.getPermissionTypeByOthersAccessId() != null)     updateDaoProcess.setPermissionTypeByOthersAccessId(appPermissionDAO.get(process.getPermissionTypeByOthersAccessId()));    LOGGER.info("process.getowner roleId " + process.getOwnerRoleId());    if (process.getOwnerRoleId() != null)     updateDaoProcess.setUserRoles(userRolesDAO.get(process.getOwnerRoleId()));    updateDaoProcess=processDAO.update(updateDaoProcess);    process.setTableAddTS(DateConverter.dateToString(updateDaoProcess.getAddTs()));    process.setTableEditTS(DateConverter.dateToString(updateDaoProcess.getEditTs()));    restWrapper=new RestWrapper(process,RestWrapper.OK);    LOGGER.info("Record with ID:" + process.getProcessId() + " updated in Process by User:"+ principal.getName()+ process);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }catch (  SecurityException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  protected static void findAllModules(Collection<String> mList) throws FloodlightModuleException {synchronized (lock) {    if (serviceMap != null)     return;    serviceMap=new HashMap<Class<? extends IFloodlightService>,Collection<IFloodlightModule>>();    moduleServiceMap=new HashMap<IFloodlightModule,Collection<Class<? extends IFloodlightService>>>();    moduleNameMap=new HashMap<String,IFloodlightModule>();    ClassLoader cl=Thread.currentThread().getContextClassLoader();    ServiceLoader<IFloodlightModule> moduleLoader=ServiceLoader.load(IFloodlightModule.class,cl);    Iterator<IFloodlightModule> moduleIter=moduleLoader.iterator();    while (moduleIter.hasNext()) {      IFloodlightModule m=null;      try {        m=moduleIter.next();      } catch (      ServiceConfigurationError sce) {        logger.error("Could not find module: {}",sce.getMessage());        continue;      }      if (logger.isDebugEnabled()) {        logger.debug("Found module " + m.getClass().getName());      }      moduleNameMap.put(m.getClass().getCanonicalName(),m);      Collection<Class<? extends IFloodlightService>> servs=m.getModuleServices();      if (servs != null) {        moduleServiceMap.put(m,servs);        for (        Class<? extends IFloodlightService> s : servs) {          Collection<IFloodlightModule> mods=serviceMap.get(s);          if (mods == null) {            mods=new ArrayList<IFloodlightModule>();            serviceMap.put(s,mods);          }          mods.add(m);          int dupInConf=0;          for (          IFloodlightModule cMod : mods) {            if (mList.contains(cMod.getClass().getCanonicalName()))             dupInConf+=1;          }          if (dupInConf > 1) {            String duplicateMods="";            for (            IFloodlightModule mod : mods) {              duplicateMods+=mod.getClass().getCanonicalName() + ", ";            }            throw new FloodlightModuleException("ERROR! The configuraiton" + " file specifies more than one module that provides the service " + s.getCanonicalName() + ". Please specify only ONE of the "+ "following modules in the config file: "+ duplicateMods);          }        }      }    }  }}  }
class C{  public AWTError(String msg){  super(msg);}  }
class C{  public static int findFirstOf(String container,String chars,int begin){  int minIdx=-1;  for (int i=0; i < chars.length() && i >= 0; ++i) {    int idx=container.indexOf(chars.charAt(i),begin);    if ((idx < minIdx && idx != -1) || minIdx == -1) {      minIdx=idx;    }  }  return minIdx;}  }
class C{  private void dispatchIncomingCall(String userId){  showToast("Call from: " + userId);  Intent intent=new Intent(MainActivity.this,IncomingCallActivity.class);  intent.putExtra(Constants.USER_NAME,username);  intent.putExtra(Constants.CALL_USER,userId);  startActivity(intent);}  }
class C{  private void obtainBackground(@StyleRes final int themeResourceId){  TypedArray typedArray=getContext().getTheme().obtainStyledAttributes(themeResourceId,new int[]{R.attr.bottomSheetBackground});  int color=typedArray.getColor(0,-1);  if (color != -1) {    setBackgroundColor(color);  } else {    int resourceId=typedArray.getResourceId(0,0);    if (resourceId != 0) {      setBackground(resourceId);    }  }}  }
class C{  void fullyUnlock(){  takeLock.unlock();  putLock.unlock();}  }
class C{  private void screenshotView(){  if (getContext() instanceof Activity && ((Activity)getContext()).isFinishing())   return;  Bitmap screenshot=getScreenshotBitmap();  if (screenshot == null)   return;  screenshotView=new ImageView(getContext());  screenshotView.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutParams.MATCH_PARENT));  screenshotView.setClickable(true);  screenshotView.setImageBitmap(screenshot);  screenshotOrientation=getOrientation();  addView(screenshotView);  TurbolinksLog.d("Screenshot taken");}  }
class C{  public double max(){  int size=values.size();  double max=-Double.MAX_VALUE;  for (int i=0; i < size; i++)   max=Math.max(max,values.get(i));  return max;}  }
class C{  public static void checkArgument(boolean expression,Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  @DSSource({DSSourceKind.NETWORK}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.407 -0500",hash_original_method="0824C344C7EF76E18DAFC5A0824644C2",hash_generated_method="CCA7BFC992325F2BC11A6217EE625B3B") @Override public int read() throws IOException {  if (read_pos == read_pos_end) {    throw new EndOfBufferException();  }  return buffer[read_pos++] & 0xFF;}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:55.369 -0500",hash_original_method="815441BD896E00C6B865EAF3CE23B912",hash_generated_method="46434ADDCFE39D65CA30D116EE67ED55") private ViewConfiguration(Context context){  final Resources res=context.getResources();  final DisplayMetrics metrics=res.getDisplayMetrics();  final Configuration config=res.getConfiguration();  final float density=metrics.density;  final float sizeAndDensity;  if (config.isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_XLARGE)) {    sizeAndDensity=density * 1.5f;  } else {    sizeAndDensity=density;  }  mEdgeSlop=(int)(sizeAndDensity * EDGE_SLOP + 0.5f);  mFadingEdgeLength=(int)(sizeAndDensity * FADING_EDGE_LENGTH + 0.5f);  mMinimumFlingVelocity=(int)(density * MINIMUM_FLING_VELOCITY + 0.5f);  mMaximumFlingVelocity=(int)(density * MAXIMUM_FLING_VELOCITY + 0.5f);  mScrollbarSize=(int)(density * SCROLL_BAR_SIZE + 0.5f);  mDoubleTapSlop=(int)(sizeAndDensity * DOUBLE_TAP_SLOP + 0.5f);  mScaledTouchExplorationTapSlop=(int)(density * TOUCH_EXPLORATION_TAP_SLOP + 0.5f);  mWindowTouchSlop=(int)(sizeAndDensity * WINDOW_TOUCH_SLOP + 0.5f);  mMaximumDrawingCacheSize=4 * metrics.widthPixels * metrics.heightPixels;  mOverscrollDistance=(int)(sizeAndDensity * OVERSCROLL_DISTANCE + 0.5f);  mOverflingDistance=(int)(sizeAndDensity * OVERFLING_DISTANCE + 0.5f);  if (!sHasPermanentMenuKeySet) {    IWindowManager wm=Display.getWindowManager();    try {      sHasPermanentMenuKey=wm.canStatusBarHide() && !wm.hasNavigationBar();      sHasPermanentMenuKeySet=true;    } catch (    RemoteException ex) {      sHasPermanentMenuKey=false;    }  }  mFadingMarqueeEnabled=res.getBoolean(com.android.internal.R.bool.config_ui_enableFadingMarquee);  mTouchSlop=res.getDimensionPixelSize(com.android.internal.R.dimen.config_viewConfigurationTouchSlop);  mPagingTouchSlop=mTouchSlop * 2;}  }
class C{  static TemplateModelException newMethodArgsInvalidValueException(String methodName,Object... details){  return new _TemplateModelException(methodName,"(...) arguments have invalid value: ",details);}  }
class C{  protected int addNearestLocation(Position terrainPosition,double altitude,List<LatLon> locations){  Globe globe=this.getWwd().getModel().getGlobe();  Vec4 pointPicked=globe.computeEllipsoidalPointFromPosition(terrainPosition.getLatitude(),terrainPosition.getLongitude(),altitude);  Vec4 nearestPoint=null;  int nearestSegmentIndex=0;  double nearestDistance=Double.MAX_VALUE;  for (int i=1; i <= locations.size(); i++) {    if (!(this.getShape() instanceof Polygon || this.getShape() instanceof SurfacePolygon) && i == locations.size())     continue;    LatLon locationA=locations.get(i - 1);    LatLon locationB=locations.get(i == locations.size() ? 0 : i);    Vec4 pointA=globe.computeEllipsoidalPointFromPosition(locationA.getLatitude(),locationA.getLongitude(),altitude);    Vec4 pointB=globe.computeEllipsoidalPointFromPosition(locationB.getLatitude(),locationB.getLongitude(),altitude);    Vec4 pointOnEdge=this.nearestPointOnSegment(pointA,pointB,pointPicked);    double distance=pointOnEdge.distanceTo3(pointPicked);    if (distance < nearestDistance) {      nearestPoint=pointOnEdge;      nearestSegmentIndex=i;      nearestDistance=distance;    }  }  if (nearestPoint != null) {    LatLon nearestLocation=globe.computePositionFromEllipsoidalPoint(nearestPoint);    if (nearestSegmentIndex == locations.size())     locations.add(nearestLocation); else     locations.add(nearestSegmentIndex,nearestLocation);    this.getControlPointLayer().setMarkers(null);    return nearestSegmentIndex;  }  return -1;}  }
class C{  private ChartSpan<Integer> calculateAllPairsShortestPath(){  ChartSpan<Integer> distance=new ChartSpan<>(nodes.size() - 1,Integer.MAX_VALUE);  distance.setDiagonal(0);  for (  Node<Value> tail : nodes) {    for (    Arc<Value> arc : tail.getOutgoingArcs()) {      Node<Value> head=arc.getHead();      distance.set(tail.id(),head.id(),1);    }  }  int size=nodes.size();  for (int width=2; width <= size; width++) {    for (int i=0; i < size - width; i++) {      int j=i + width;      for (int k=i + 1; k < j; k++) {        distance.set(i,j,Math.min(distance.get(i,j),distance.get(i,k) + distance.get(k,j)));      }    }  }  return distance;}  }
class C{  public Builder characters(boolean characters){  this.characters=characters;  return this;}  }
class C{  public ReadFileRecordRequest(){  super();  setFunctionCode(Modbus.READ_FILE_RECORD);  setDataLength(1);}  }
class C{  public void startDiscovery(){  if (mApiClient != null) {    Weave.DEVICE_API.startLoading(mApiClient,mDiscoveryListener);  }}  }
class C{  public CCTextureAtlas(String file,int n){  this(CCTextureCache.sharedTextureCache().addImage(file),n);}  }
class C{  public void sendAllFunctionStates(DccThrottle t){  log.debug("Sending state of all functions");  StringBuilder message=new StringBuilder(buildFStatesHeader());  try {    for (int cnt=0; cnt < 29; cnt++) {      Method getF=t.getClass().getMethod("getF" + cnt,(Class[])null);      message.append("]\\[F");      message.append(cnt);      message.append("}|{");      message.append(getF.invoke(t,(Object[])null));    }  } catch (  NoSuchMethodException ea) {    log.warn(ea.getLocalizedMessage(),ea);    return;  }catch (  IllegalAccessException eb) {    log.warn(eb.getLocalizedMessage(),eb);    return;  }catch (  java.lang.reflect.InvocationTargetException ec) {    log.warn(ec.getLocalizedMessage(),ec);    return;  }  for (  ControllerInterface listener : controllerListeners) {    listener.sendPacketToDevice(message.toString());  }}  }
class C{  public static void fallocateIfSupported(FileDescriptor fd,long length) throws IOException {  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {    LollipopSysdeps.fallocateIfSupported(fd,length);  }}  }
class C{  public int k(){  return soot.PhaseOptions.getInt(options,"k");}  }
class C{  static void removeFromDb(Connection conn,Object key) throws SQLException {  PreparedStatement stmt=null;  try {    stmt=conn.prepareStatement("delete from CACHE where k = ?");    stmt.setBinaryStream(1,new ByteArrayInputStream(H2CacheStore.serialize(key)));    stmt.executeUpdate();  }  finally {    U.closeQuiet(stmt);  }}  }
class C{  public HttpRequest timeOut(int timeOutMs){  mTimeOutMs=timeOutMs;  return this;}  }
class C{  public void testKeyPairGenerator04() throws NoSuchAlgorithmException, IllegalArgumentException {  if (!DSASupported) {    fail(NotSupportMsg);    return;  }  for (int i=0; i < algs.length; i++) {    for (int j=1; j < invalidValues.length; j++) {      try {        KeyPairGenerator.getInstance(algs[i],invalidValues[j]);        fail("NoSuchProviderException must be thrown (algorithm: ".concat(algs[i]).concat(" provider: ").concat(invalidValues[j]).concat(")"));      } catch (      NoSuchProviderException e) {      }    }  }}  }
class C{  protected CancelTargetSelectionSynchronizer(final IDebugger debugger,final ListenerProvider<IDebugEventListener> listeners){  super(debugger,listeners);}  }
class C{  int entryCountMod(){switch (this.op) {case OP_L_DESTROY:case OP_CREATE_LD:case OP_LLOAD_CREATE_LD:case OP_NLOAD_CREATE_LD:case OP_PUT_LD:case OP_LLOAD_PUT_LD:case OP_NLOAD_PUT_LD:case OP_D_INVALIDATE_LD:case OP_D_DESTROY:    if (getOriginalValue() == null || Token.isRemoved(getOriginalValue())) {      return 0;    } else {      return -1;    }case OP_CREATE_LI:case OP_LLOAD_CREATE_LI:case OP_NLOAD_CREATE_LI:case OP_CREATE:case OP_SEARCH_CREATE:case OP_LLOAD_CREATE:case OP_NLOAD_CREATE:case OP_LOCAL_CREATE:  if (getOriginalValue() == null || Token.isRemoved(getOriginalValue())) {    return 1;  } else {    return 0;  }case OP_NULL:case OP_L_INVALIDATE:case OP_PUT_LI:case OP_LLOAD_PUT_LI:case OP_NLOAD_PUT_LI:case OP_D_INVALIDATE:case OP_PUT:case OP_SEARCH_PUT:case OP_LLOAD_PUT:case OP_NLOAD_PUT:default :return 0;}}  }
class C{  public boolean isTracking(){  return isTracking;}  }
class C{  private static int determineConsecutiveBinaryCount(CharSequence msg,byte[] bytes,int startpos) throws WriterException {  int len=msg.length();  int idx=startpos;  while (idx < len) {    char ch=msg.charAt(idx);    int numericCount=0;    while (numericCount < 13 && isDigit(ch)) {      numericCount++;      int i=idx + numericCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (numericCount >= 13) {      return idx - startpos;    }    int textCount=0;    while (textCount < 5 && isText(ch)) {      textCount++;      int i=idx + textCount;      if (i >= len) {        break;      }      ch=msg.charAt(i);    }    if (textCount >= 5) {      return idx - startpos;    }    ch=msg.charAt(idx);    if (bytes[idx] == 63 && ch != '?') {      throw new WriterException("Non-encodable character detected: " + ch + " (Unicode: "+ (int)ch+ ')');    }    idx++;  }  return idx - startpos;}  }
class C{  public static boolean isServiceRunning(Context context,Class serviceClass){  ActivityManager manager=(ActivityManager)context.getSystemService(Context.ACTIVITY_SERVICE);  for (  ActivityManager.RunningServiceInfo service : manager.getRunningServices(Integer.MAX_VALUE)) {    if (serviceClass.getName().equals(service.service.getClassName())) {      return true;    }  }  return false;}  }
class C{  private boolean isClosed(){  return buf == null;}  }
class C{  private void compile2(){  try {switch (compilePolicy) {case ATTR_ONLY:      attribute(todo);    break;case CHECK_ONLY:  flow(attribute(todo));break;case SIMPLE:generate(desugar(flow(attribute(todo))));break;case BY_FILE:{Queue<Queue<Env<AttrContext>>> q=todo.groupByFile();while (!q.isEmpty() && !shouldStop(CompileState.ATTR)) {generate(desugar(flow(attribute(q.remove()))));}}break;case BY_TODO:while (!todo.isEmpty()) generate(desugar(flow(attribute(todo.remove()))));break;default :Assert.error("unknown compile policy");}} catch (Abort ex) {if (devVerbose) ex.printStackTrace(System.err);}if (verbose) {elapsed_msec=elapsed(start_msec);log.printVerbose("total",Long.toString(elapsed_msec));}reportDeferredDiagnostics();if (!log.hasDiagnosticListener()) {printCount("error",errorCount());printCount("warn",warningCount());}}  }
class C{  public boolean hasCryptoStrengthBeenUpgraded(){  return cryptoStrengthUpgraded;}  }
class C{  private CertificateExtensions createV3Extensions(CertificateExtensions reqex,CertificateExtensions ext,List<String> extstrs,PublicKey pkey,PublicKey akey) throws Exception {  if (ext != null && reqex != null) {    throw new Exception("One of request and original should be null.");  }  if (ext == null)   ext=new CertificateExtensions();  try {    if (reqex != null) {      for (      String extstr : extstrs) {        if (extstr.toLowerCase(Locale.ENGLISH).startsWith("honored=")) {          List<String> list=Arrays.asList(extstr.toLowerCase(Locale.ENGLISH).substring(8).split(","));          if (list.contains("all")) {            ext=reqex;          }          for (          String item : list) {            if (item.equals("all"))             continue;            boolean add=true;            int action=-1;            String type=null;            if (item.startsWith("-")) {              add=false;              type=item.substring(1);            } else {              int colonpos=item.indexOf(':');              if (colonpos >= 0) {                type=item.substring(0,colonpos);                action=oneOf(item.substring(colonpos + 1),"critical","non-critical");                if (action == -1) {                  throw new Exception(rb.getString("Illegal.value.") + item);                }              }            }            String n=reqex.getNameByOid(findOidForExtName(type));            if (add) {              Extension e=reqex.get(n);              if (!e.isCritical() && action == 0 || e.isCritical() && action == 1) {                e=Extension.newExtension(e.getExtensionId(),!e.isCritical(),e.getExtensionValue());                ext.set(n,e);              }            } else {              ext.delete(n);            }          }          break;        }      }    }    for (    String extstr : extstrs) {      String name, value;      boolean isCritical=false;      int eqpos=extstr.indexOf('=');      if (eqpos >= 0) {        name=extstr.substring(0,eqpos);        value=extstr.substring(eqpos + 1);      } else {        name=extstr;        value=null;      }      int colonpos=name.indexOf(':');      if (colonpos >= 0) {        if (oneOf(name.substring(colonpos + 1),"critical") == 0) {          isCritical=true;        }        name=name.substring(0,colonpos);      }      if (name.equalsIgnoreCase("honored")) {        continue;      }      int exttype=oneOf(name,extSupported);switch (exttype) {case 0:        int pathLen=-1;      boolean isCA=false;    if (value == null) {      isCA=true;    } else {      try {        pathLen=Integer.parseInt(value);        isCA=true;      } catch (      NumberFormatException ufe) {        for (        String part : value.split(",")) {          String[] nv=part.split(":");          if (nv.length != 2) {            throw new Exception(rb.getString("Illegal.value.") + extstr);          } else {            if (nv[0].equalsIgnoreCase("ca")) {              isCA=Boolean.parseBoolean(nv[1]);            } else             if (nv[0].equalsIgnoreCase("pathlen")) {              pathLen=Integer.parseInt(nv[1]);            } else {              throw new Exception(rb.getString("Illegal.value.") + extstr);            }          }        }      }    }  ext.set(BasicConstraintsExtension.NAME,new BasicConstraintsExtension(isCritical,isCA,pathLen));break;case 1:if (value != null) {boolean[] ok=new boolean[9];for (String s : value.split(",")) {  int p=oneOf(s,"digitalSignature","nonRepudiation","keyEncipherment","dataEncipherment","keyAgreement","keyCertSign","cRLSign","encipherOnly","decipherOnly","contentCommitment");  if (p < 0) {    throw new Exception(rb.getString("Unknown.keyUsage.type.") + s);  }  if (p == 9)   p=1;  ok[p]=true;}KeyUsageExtension kue=new KeyUsageExtension(ok);ext.set(KeyUsageExtension.NAME,Extension.newExtension(kue.getExtensionId(),isCritical,kue.getExtensionValue()));} else {throw new Exception(rb.getString("Illegal.value.") + extstr);}break;case 2:if (value != null) {Vector<ObjectIdentifier> v=new Vector<>();for (String s : value.split(",")) {int p=oneOf(s,"anyExtendedKeyUsage","serverAuth","clientAuth","codeSigning","emailProtection","","","","timeStamping","OCSPSigning");if (p < 0) {try {  v.add(new ObjectIdentifier(s));} catch (Exception e) {  throw new Exception(rb.getString("Unknown.extendedkeyUsage.type.") + s);}} else if (p == 0) {v.add(new ObjectIdentifier("2.5.29.37.0"));} else {v.add(new ObjectIdentifier("1.3.6.1.5.5.7.3." + p));}}ext.set(ExtendedKeyUsageExtension.NAME,new ExtendedKeyUsageExtension(isCritical,v));} else {throw new Exception(rb.getString("Illegal.value.") + extstr);}break;case 3:case 4:if (value != null) {String[] ps=value.split(",");GeneralNames gnames=new GeneralNames();for (String item : ps) {colonpos=item.indexOf(':');if (colonpos < 0) {throw new Exception("Illegal item " + item + " in "+ extstr);}String t=item.substring(0,colonpos);String v=item.substring(colonpos + 1);gnames.add(createGeneralName(t,v));}if (exttype == 3) {ext.set(SubjectAlternativeNameExtension.NAME,new SubjectAlternativeNameExtension(isCritical,gnames));} else {ext.set(IssuerAlternativeNameExtension.NAME,new IssuerAlternativeNameExtension(isCritical,gnames));}} else {throw new Exception(rb.getString("Illegal.value.") + extstr);}break;case 5:case 6:if (isCritical) {throw new Exception(rb.getString("This.extension.cannot.be.marked.as.critical.") + extstr);}if (value != null) {List<AccessDescription> accessDescriptions=new ArrayList<>();String[] ps=value.split(",");for (String item : ps) {colonpos=item.indexOf(':');int colonpos2=item.indexOf(':',colonpos + 1);if (colonpos < 0 || colonpos2 < 0) {throw new Exception(rb.getString("Illegal.value.") + extstr);}String m=item.substring(0,colonpos);String t=item.substring(colonpos + 1,colonpos2);String v=item.substring(colonpos2 + 1);int p=oneOf(m,"","ocsp","caIssuers","timeStamping","","caRepository");ObjectIdentifier oid;if (p < 0) {try {oid=new ObjectIdentifier(m);} catch (Exception e) {throw new Exception(rb.getString("Unknown.AccessDescription.type.") + m);}} else {oid=new ObjectIdentifier("1.3.6.1.5.5.7.48." + p);}accessDescriptions.add(new AccessDescription(oid,createGeneralName(t,v)));}if (exttype == 5) {ext.set(SubjectInfoAccessExtension.NAME,new SubjectInfoAccessExtension(accessDescriptions));} else {ext.set(AuthorityInfoAccessExtension.NAME,new AuthorityInfoAccessExtension(accessDescriptions));}} else {throw new Exception(rb.getString("Illegal.value.") + extstr);}break;case 8:if (value != null) {String[] ps=value.split(",");GeneralNames gnames=new GeneralNames();for (String item : ps) {colonpos=item.indexOf(':');if (colonpos < 0) {throw new Exception("Illegal item " + item + " in "+ extstr);}String t=item.substring(0,colonpos);String v=item.substring(colonpos + 1);gnames.add(createGeneralName(t,v));}ext.set(CRLDistributionPointsExtension.NAME,new CRLDistributionPointsExtension(isCritical,Collections.singletonList(new DistributionPoint(gnames,null,null))));} else {throw new Exception(rb.getString("Illegal.value.") + extstr);}break;case -1:ObjectIdentifier oid=new ObjectIdentifier(name);byte[] data=null;if (value != null) {data=new byte[value.length() / 2 + 1];int pos=0;for (char c : value.toCharArray()) {int hex;if (c >= '0' && c <= '9') {hex=c - '0';} else if (c >= 'A' && c <= 'F') {hex=c - 'A' + 10;} else if (c >= 'a' && c <= 'f') {hex=c - 'a' + 10;} else {continue;}if (pos % 2 == 0) {data[pos / 2]=(byte)(hex << 4);} else {data[pos / 2]+=hex;}pos++;}if (pos % 2 != 0) {throw new Exception(rb.getString("Odd.number.of.hex.digits.found.") + extstr);}data=Arrays.copyOf(data,pos / 2);} else {data=new byte[0];}ext.set(oid.toString(),new Extension(oid,isCritical,new DerValue(DerValue.tag_OctetString,data).toByteArray()));break;default :throw new Exception(rb.getString("Unknown.extension.type.") + extstr);}}ext.set(SubjectKeyIdentifierExtension.NAME,new SubjectKeyIdentifierExtension(new KeyIdentifier(pkey).getIdentifier()));if (akey != null && !pkey.equals(akey)) {ext.set(AuthorityKeyIdentifierExtension.NAME,new AuthorityKeyIdentifierExtension(new KeyIdentifier(akey),null,null));}} catch (IOException e) {throw new RuntimeException(e);}return ext;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Show s=getShow(stack);  return (s == null) ? "" : s.getEpisodeName();}  }
class C{  public MapWidget(Bundle bundle,Context context,File rootMapFolder,int initialZoomLevel){  super(context);  initCommonStuff(context);  String configPath=OfflineMapUtil.getConfigFilePath(rootMapFolder.getAbsolutePath());  try {    MapConfigParser configParser=new MapConfigParser(rootMapFolder.getAbsolutePath());    config=configParser.parse(context,new File(configPath));    if (config != null) {      tileProvider=new ExternalStorageTileProvider(config);      int maxZoomLevel=OfflineMapUtil.getMaxZoomLevel(config.getImageWidth(),config.getImageHeight());      int zoomLevel=initialZoomLevel;      float scale=1.0f;      if (bundle != null) {        if (bundle.containsKey("com.ls.zoomLevel"))         zoomLevel=bundle.getInt("com.ls.zoomLevel");        if (bundle.containsKey("com.ls.scale"))         scale=bundle.getFloat("com.ls.scale");      }      if (zoomLevel > maxZoomLevel) {        grid=new Grid(this,config,tileProvider,maxZoomLevel);        if (scale == 1.0f) {          scale=(float)Math.pow(2,zoomLevel - maxZoomLevel);        }      } else {        grid=new Grid(this,config,tileProvider,zoomLevel);      }      this.scale=scale;      grid.setInternalScale(scale);      initPositionPin();      restoreMapPosition(bundle);    }  } catch (  SAXException e) {    Log.e(TAG,"Exception: " + e);    e.printStackTrace();  }catch (  IOException e) {    Log.e(TAG,"Exception: " + e);    e.printStackTrace();  }}  }
class C{  public static String sepList(String sep,Iterable<?> os,int max){  return sepList(sep,null,os,max);}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  @Override public void pause(boolean toPause){  paused=toPause;}  }
class C{  private static synchronized long contentUrlSize(String url){  if (url.startsWith(ANDROID_CONTENT)) {    try {      int mimeIndex=url.lastIndexOf('?');      if (mimeIndex != -1) {        url=url.substring(0,mimeIndex);      }      Uri uri=Uri.parse(url);      InputStream is=sContext.getContentResolver().openInputStream(uri);      byte[] buffer=new byte[1024];      int n;      long size=0;      try {        while ((n=is.read(buffer)) != -1) {          size+=n;        }      }  finally {        is.close();      }      return size;    } catch (    Exception e) {      Log.e(LOGTAG,"Exception: " + url);      return 0;    }  } else {    return 0;  }}  }
class C{  public Instances(Reader reader,int capacity) throws IOException {  StreamTokenizer tokenizer;  if (capacity < 0) {    throw new IllegalArgumentException("Capacity has to be positive!");  }  tokenizer=new StreamTokenizer(reader);  initTokenizer(tokenizer);  readHeader(tokenizer);  m_ClassIndex=-1;  m_Instances=new FastVector(capacity);}  }
class C{  public HTMLStripCharFilterFactory(Map<String,String> args){  super(args);  escapedTags=getSet(args,"escapedTags");  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public void testBug19354014() throws Exception {  if (versionMeetsMinimum(5,5,7)) {    Connection con=null;    createUser("'bug19354014user'@'%'","identified WITH mysql_native_password");    this.stmt.executeUpdate("grant all on *.* to 'bug19354014user'@'%'");    this.stmt.executeUpdate(versionMeetsMinimum(5,7,6) ? "ALTER USER 'bug19354014user'@'%' IDENTIFIED BY 'pwd'" : "set password for 'bug19354014user'@'%' = PASSWORD('pwd')");    this.stmt.executeUpdate("flush privileges");    try {      Properties props=new Properties();      props.setProperty("useCompression","true");      con=getConnectionWithProps(props);      ((MySQLConnection)con).changeUser("bug19354014user","pwd");    }  finally {      this.stmt.executeUpdate("flush privileges");      if (con != null) {        con.close();      }    }  }}  }
class C{  private void drawMoveLength(final Graphics2D graphics,final Point[] points,final int xOffset,final int yOffset,final double scale,final int numTerritories,final String maxMovement){  final Point cursorPos=points[points.length - 1];  final String unitMovementLeft=maxMovement == null || maxMovement.trim().length() == 0 ? "" : "    /" + maxMovement;  final BufferedImage movementImage=new BufferedImage(50,20,BufferedImage.TYPE_INT_ARGB);  createMovementLeftImage(movementImage,String.valueOf(numTerritories - 1),unitMovementLeft);  final int textXOffset=-movementImage.getWidth() / 2;  final int yDir=cursorPos.y - points[numTerritories - 2].y;  final int textYOffset=yDir > 0 ? movementImage.getHeight() : movementImage.getHeight() * -2;  for (  Point[] cursorPositions : routeOptimizer.getAllPoints(cursorPos)) {    graphics.drawImage(movementImage,(int)((cursorPositions[0].x + textXOffset - xOffset) * scale),(int)((cursorPositions[0].y + textYOffset - yOffset) * scale),null);  }}  }
class C{  public void init(Allocator allocator){  this.allocator=allocator;  extractor.init(this);}  }
class C{  private static void show(@NonNull ToastBean bean,boolean hasPortraitAndLandscape){  if (!hasPortraitAndLandscape) {    mToastBeanLandscape=null;    mToastBeanPortrait=null;  }  if (!isShown()) {    mToastBean=bean;    mToast=createOrUpdateToastFromToastBean(null,mToastBean);    mToast.show();  } else {switch (mPolicy) {case ONE_FIRST:      break;case MANY_IN_ORDER:    mToastBean=bean;  mToast=createOrUpdateToastFromToastBean(null,mToastBean);mToast.show();break;case ONE_LAST:default :if (mToastBean.isStandard() && bean.isStandard()) {if (mToastBean.equals(bean)) {if (!TextUtils.isEmpty(bean.text)) {  mToast.setText(bean.text);} else if (bean.resId != -1) {  mToast.setText(bean.resId);}} else {createOrUpdateToastFromToastBean(mToast,bean);}} else {if (!mToastBean.equals(bean)) {cancel();mToast=createOrUpdateToastFromToastBean(null,bean);mToast.show();}}mToastBean=bean;break;}}}  }
class C{  private static NamedLocationIdentity create(String name,boolean immutable){  return new NamedLocationIdentity(name,immutable);}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  protected AbstractCombinatorCondition(Condition c1,Condition c2){  firstCondition=c1;  secondCondition=c2;}  }
class C{  public ForeignKey(String name,String foreignKeyTableName){  this.name=name;  this.foreignTableName=foreignKeyTableName;}  }
class C{  public Observable<String> change(){  return preferenceChanged.asObservable();}  }
class C{  @Override public boolean isBusy(){  return m_busy;}  }
class C{  public static TypeReference newTypeParameterBoundReference(int sort,int paramIndex,int boundIndex){  return new TypeReference((sort << 24) | (paramIndex << 16) | (boundIndex << 8));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:35.004 -0500",hash_original_method="E5BC66DBF19261346819AE7E60C7F467",hash_generated_method="43714C46B8D85A3B80F5B710851996FB") protected AbstractConnPool createConnectionPool(final HttpParams params){  AbstractConnPool acp=new ConnPoolByRoute(connOperator,params);  boolean conngc=true;  if (conngc) {    acp.enableConnectionGC();  }  return acp;}  }
class C{  public HTMLComponent(DocumentRequestHandler handler){  if (INDENT_OL < 0) {    INDENT_OL=Font.getDefaultFont().stringWidth("8888. ");  }  if (INDENT_UL < 0) {    INDENT_UL=Font.getDefaultFont().charWidth('W');  }  if (DEFAULT_FONT == null) {    DEFAULT_FONT=new HTMLFont(null,Font.createSystemFont(Font.FACE_SYSTEM,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));  }  setLayout(new BoxLayout(BoxLayout.Y_AXIS));  this.handler=handler;  threadQueue=new ResourceThreadQueue(this);  setHandlesInput(true);  setScrollableY(true);  setScrollableX(false);  setSmoothScrolling(true);  HTMLFont italic=new HTMLFont(null,Font.createSystemFont(Font.FACE_SYSTEM,Font.STYLE_ITALIC,Font.SIZE_MEDIUM));  HTMLFont monospace=new HTMLFont(null,Font.createSystemFont(Font.FACE_MONOSPACE,Font.STYLE_PLAIN,Font.SIZE_MEDIUM));  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_EM],italic);  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_STRONG],new HTMLFont(null,Font.createSystemFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM)));  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_DFN],italic);  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_CODE],monospace);  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_SAMP],monospace);  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_KBD],monospace);  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_VAR],italic);  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_CITE],italic);  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_PRE],monospace);  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_H1],new HTMLFont(null,Font.createSystemFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_LARGE)));  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_H2],new HTMLFont(null,Font.createSystemFont(Font.FACE_SYSTEM,Font.STYLE_ITALIC,Font.SIZE_LARGE)));  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_H3],new HTMLFont(null,Font.createSystemFont(Font.FACE_SYSTEM,Font.STYLE_BOLD,Font.SIZE_MEDIUM)));  fonts.put(HTMLElement.TAG_NAMES[HTMLElement.TAG_TT],monospace);  parser=new HTMLParser();  parser.setHTMLComponent(this);}  }
class C{  public static void pointOnBezierCurve(float controlPoints[][],int curveDegree,float t,float point[]){  float scalars[]=new float[curveDegree + 1];  int k;  allBernstein(curveDegree,t,scalars);  point[0]=point[1]=point[2]=0;  for (k=0; k <= curveDegree; k++) {    point[0]+=scalars[k] * controlPoints[k][0];    point[1]+=scalars[k] * controlPoints[k][1];    point[2]+=scalars[k] * controlPoints[k][2];  }}  }
class C{  @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:05.818 -0500",hash_original_method="988C8C1A9C87B41B84F5CBCE16DA1DA1",hash_generated_method="B0ACB468F4096B1507B0A8AC1B39636A") @DSVerified @DSSpec(DSCat.IO) public static final long copyStream(InputStream source,OutputStream dest,int bufferSize,long streamSize,CopyStreamListener listener,boolean flush) throws CopyStreamException {  int bytes;  long total;  byte[] buffer;  buffer=new byte[bufferSize];  total=0;  try {    while ((bytes=source.read(buffer)) != -1) {      if (bytes == 0) {        bytes=source.read();        if (bytes < 0)         break;        dest.write(bytes);        if (flush)         dest.flush();        ++total;        if (listener != null)         listener.bytesTransferred(total,1,streamSize);        continue;      }      dest.write(buffer,0,bytes);      if (flush)       dest.flush();      total+=bytes;      if (listener != null)       listener.bytesTransferred(total,bytes,streamSize);    }  } catch (  IOException e) {    throw new CopyStreamException("IOException caught while copying.",total,e);  }  return total;}  }
class C{  protected void createActions(){  actionLock=createAction("Scroll Lock",IAction.AS_CHECK_BOX,"Do not jump to test case when its status is updated.",TesterUiActivator.getImageDescriptor(TesterUiActivator.ICON_LOCK),null);  actionRelaunch=createAction("Relaunch",IAction.AS_PUSH_BUTTON,"Relaunch entire test session.",TesterUiActivator.getImageDescriptor(TesterUiActivator.ICON_RELAUNCH),null);  actionRelaunchFailed=createAction("Relaunch Failed",IAction.AS_PUSH_BUTTON,"Relaunch failed tests from last test session.",TesterUiActivator.getImageDescriptor(TesterUiActivator.ICON_RELAUNCH_FAILED),null);  actionStop=createAction("Stop",IAction.AS_PUSH_BUTTON,"Stopping the running test session is currently not supported.",TesterUiActivator.getImageDescriptor(TesterUiActivator.ICON_STOP),null);  actionStop.setEnabled(false);  actionShowHistory=new ShowHistoryAction(this);  actionClearTerminated=createAction("Clear Terminated",IAction.AS_PUSH_BUTTON,"Clear terminated sessions from history.",null,null);  doubleClickAction=createAction(null,IAction.AS_PUSH_BUTTON,null,null,null);  singleClickAction=createAction(null,IAction.AS_PUSH_BUTTON,null,null,null);}  }
class C{  public boolean isRecoverable(){  return recoverable;}  }
class C{  public ContainerHost findHostForVm(ContainerVm containerVm){  for (  ContainerHost host : this.<ContainerHost>getContainerHostList()) {    if (host.isSuitableForContainerVm(containerVm)) {      return host;    }  }  return null;}  }
class C{  private static TransportNetwork fromFiles(String osmSourceFile,List<String> gtfsSourceFiles,List<GTFSFeed> feeds,TNBuilderConfig tnBuilderConfig) throws DuplicateFeedException {  System.out.println("Summarizing builder config: " + BUILDER_CONFIG_FILENAME);  System.out.println(tnBuilderConfig);  File dir=new File(osmSourceFile).getParentFile();  TransportNetwork transportNetwork=new TransportNetwork();  OSM osm=new OSM(new File(dir,"osm.mapdb").getPath());  osm.intersectionDetection=true;  osm.readFromFile(osmSourceFile);  StreetLayer streetLayer=new StreetLayer(tnBuilderConfig);  transportNetwork.streetLayer=streetLayer;  streetLayer.parentNetwork=transportNetwork;  streetLayer.loadFromOsm(osm);  osm.close();  streetLayer.indexStreets();  if (tnBuilderConfig.bikeRentalFile != null) {    streetLayer.associateBikeSharing(tnBuilderConfig,500);  }  TransitLayer transitLayer=new TransitLayer();  if (feeds != null) {    for (    GTFSFeed feed : feeds) {      transitLayer.loadFromGtfs(feed);    }  } else {    for (    String feedFile : gtfsSourceFiles) {      GTFSFeed feed=GTFSFeed.fromFile(feedFile);      transitLayer.loadFromGtfs(feed);      feed.close();    }  }  transportNetwork.transitLayer=transitLayer;  transitLayer.parentNetwork=transportNetwork;  streetLayer.indexStreets();  streetLayer.associateStops(transitLayer);  streetLayer.buildEdgeLists();  transitLayer.rebuildTransientIndexes();  transitLayer.buildDistanceTables(null);  new TransferFinder(transportNetwork).findTransfers();  transportNetwork.fareCalculator=tnBuilderConfig.analysisFareCalculator;  if (transportNetwork.fareCalculator != null)   transportNetwork.fareCalculator.transitLayer=transitLayer;  return transportNetwork;}  }
class C{  public void addPropertyChangeListener(PropertyChangeListener listener){  if (changeSupport == null) {    changeSupport=new PropertyChangeSupport(this);  }  changeSupport.addPropertyChangeListener(listener);}  }
class C{  private double calculateDefFitnessForCompleteTrace(){  if (isSpecialDefinition(goalDefinition))   return 0.0;  if (hasEntriesForId(result.getTrace().getPassedDefinitions(goalDefinition.getVariableName()),goalDefinition.getDefId()))   return 0.0;  double fitness=goalDefinitionFitness.getFitness(individual,result);  if (fitness == 0.0)   return 1.0;  return normalize(fitness);}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrappendchild6.class,args);}  }
class C{  @Override public void add(int index,E element){  throw new UnsupportedOperationException(ERROR_MSG);}  }
class C{  public static MultisigTransaction createMultisigTransfer(final Account multisig,final Account cosigner){  return new MultisigTransaction(TimeInstant.ZERO,cosigner,createTransfer(multisig));}  }
class C{  private void disconnectFtp(final FTPClient ftpclient){  try {    if (ftpclient.isConnected()) {      ftpclient.logout();      ftpclient.disconnect();    }  } catch (  IOException ex) {  }}  }
class C{  @Override public Object eInvoke(int operationID,EList<?> arguments) throws InvocationTargetException {switch (operationID) {case TypesPackage.TSTRUCT_SETTER___IS_WRITEABLE:    return isWriteable();case TypesPackage.TSTRUCT_SETTER___GET_DEFAULT_MEMBER_ACCESS_MODIFIER:  return getDefaultMemberAccessModifier();case TypesPackage.TSTRUCT_SETTER___IS_STATIC:return isStatic();case TypesPackage.TSTRUCT_SETTER___GET_MEMBER_ACCESS_MODIFIER:return getMemberAccessModifier();}return super.eInvoke(operationID,arguments);}  }
class C{  private void fillFieldValues(){  if (entityRef != null) {    tfEntityName.setText(entityRef.getName());  }}  }
class C{  public static void main(final String[] args) throws Exception {  BasicConfigurator.configure();  Server server=new Server();  SslConnectionFactory sslConnectionFactory=new SslConnectionFactory();  SslContextFactory sslContextFactory=sslConnectionFactory.getSslContextFactory();  sslContextFactory.setKeyStorePath(System.getProperty("javax.net.ssl.keyStore"));  sslContextFactory.setKeyStorePassword(System.getProperty("javax.net.ssl.keyStorePassword"));  sslContextFactory.setIncludeCipherSuites(Sdk.SUPPORTED_CIPHER_SUITES);  HttpConfiguration httpConf=new HttpConfiguration();  httpConf.setSecurePort(PORT);  httpConf.setSecureScheme(HTTPS_SCHEME);  httpConf.addCustomizer(new SecureRequestCustomizer());  HttpConnectionFactory httpConnectionFactory=new HttpConnectionFactory(httpConf);  ServerConnector serverConnector=new ServerConnector(server,sslConnectionFactory,httpConnectionFactory);  serverConnector.setPort(PORT);  Connector[] connectors=new Connector[1];  connectors[0]=serverConnector;  server.setConnectors(connectors);  ServletContextHandler context=new ServletContextHandler(ServletContextHandler.SESSIONS);  context.setContextPath("/");  server.setHandler(context);  context.addServlet(new ServletHolder(createServlet(new HelloWorldSpeechlet())),"/hello");  context.addServlet(new ServletHolder(createServlet(new SessionSpeechlet())),"/session");  server.start();  server.join();}  }
class C{  public XMLDocument(XMLContext context){  this.context=context;  lexer=new XMLScanner();}  }
class C{  public static Long toMillisec(String datestring){  Date date=parse(datestring);  if (date == null) {    return null;  }  return date.getTime();}  }
class C{  public JMetalProblemAdapter(Problem problem){  super();  this.problem=problem;  if (problem.getNumberOfConstraints() > 1) {    System.err.println("multiple constraints not supported, aggregating into first constraint");  }  numberOfVariables_=problem.getNumberOfVariables();  numberOfObjectives_=problem.getNumberOfObjectives();  numberOfConstraints_=problem.getNumberOfConstraints();  problemName_=problem.getName();  lowerLimit_=new double[numberOfVariables_];  upperLimit_=new double[numberOfVariables_];  length_=new int[numberOfVariables_];  Solution solution=problem.newSolution();  SolutionType solutionType=null;  try {    for (int i=0; i < numberOfVariables_; i++) {      Variable variable=solution.getVariable(i);      if (variable instanceof RealVariable) {        RealVariable real=(RealVariable)variable;        lowerLimit_[i]=real.getLowerBound();        upperLimit_[i]=real.getUpperBound();        if (solutionType == null) {          solutionType=new RealSolutionType(this);        } else         if (!(solutionType instanceof RealSolutionType)) {          throw new ProblemException(problem,"mixed types not supported");        }      } else       if (variable instanceof BinaryVariable) {        BinaryVariable binary=(BinaryVariable)variable;        length_[i]=binary.getNumberOfBits();        if (solutionType == null) {          solutionType=new BinarySolutionType(this);        } else         if (!(solutionType instanceof BinarySolutionType)) {          throw new ProblemException(problem,"mixed types not supported");        }      } else       if (variable instanceof Permutation) {        Permutation permutation=(Permutation)variable;        length_[i]=permutation.size();        if (solutionType == null) {          solutionType=new PermutationSolutionType(this);        } else         if (!(solutionType instanceof PermutationSolutionType)) {          throw new ProblemException(problem,"mixed types not supported");        }      } else {        throw new ProblemException(problem,"type not supported");      }    }  } catch (  ClassNotFoundException e) {    throw new ProblemException(problem,e);  }  solutionType_=solutionType;}  }
class C{  public synchronized boolean waitSeqnoGreaterEqual(long waitSeqno,long millis) throws InterruptedException {  if (logger.isDebugEnabled())   logger.debug("Waiting for sequence number: " + waitSeqno);  long startMillis=System.currentTimeMillis();  long endMillis=startMillis + millis;  while (waitSeqno > seqno) {    this.wait(millis);    long currentMillis=System.currentTimeMillis();    millis=endMillis - currentMillis;    if (millis <= 0)     break;  }  return (waitSeqno <= seqno);}  }
class C{  public List<String> indices(){  return indices;}  }
class C{  protected CSSUtilities(){}  }
class C{  public AbstractZoomTool(){  this(CursorTool.ANY_BUTTON);}  }
class C{  private boolean haveAnySIOStorageSystems(){  List<URI> allStorageSystems=dbClient.queryByType(StorageSystem.class,true);  Iterator<StorageSystem> storageSystemIterator=dbClient.queryIterativeObjectFields(StorageSystem.class,STORAGE_SYSTEM_PROPERTIES,allStorageSystems);  while (storageSystemIterator.hasNext()) {    StorageSystem storageSystem=storageSystemIterator.next();    if (storageSystem.getSystemType().equals(DiscoveredDataObject.Type.scaleio.name())) {      SIO_STORAGE_SYSTEMS.put(storageSystem.getId(),storageSystem);    }  }  return !SIO_STORAGE_SYSTEMS.isEmpty();}  }
class C{  public ObjectStreamField(String name,Class<?> cl,boolean unshared){  if (name == null) {    throw new NullPointerException("name == null");  } else   if (cl == null) {    throw new NullPointerException("cl == null");  }  this.name=name;  this.type=(cl.getClassLoader() == null) ? cl : new WeakReference<Class<?>>(cl);  this.unshared=unshared;}  }
class C{  public void gotoOffset(final long offset){}  }
class C{  public void execute() throws BuildException {  if (property == null) {    throw new BuildException("property attribute is required.",getLocation());  }  boolean upToDate=eval();  if (upToDate) {    getProject().setNewProperty(property,getValue());    log("Website is up to date.");  }}  }
class C{  public void init(BigInteger N,BigInteger g,Digest digest,SecureRandom random){  this.N=N;  this.g=g;  this.digest=digest;  this.random=random;}  }
class C{  private void changeStepToSuspendedNoErrorState(Workflow workflow,Set<String> suspendedSteps,Step step){  step.suspendStep=false;  logStep(workflow,step);  StringBuilder message=new StringBuilder();  message.append("Task has been suspended during step \"" + step.description + "\". ");  if (step.suspendedMessage != null) {    message.append(step.suspendedMessage);  } else {    message.append("The user has the opportunity to perform any manual validation before this step is executed. " + "The user may choose to rollback the operation if manual validation failed.");  }  step.status.updateState(StepState.SUSPENDED_NO_ERROR,null,message.toString());  persistWorkflowStep(workflow,step);  suspendedSteps.add(step.stepId);}  }
class C{  public void postEvaluationStatistics(final EvolutionState state){  super.postEvaluationStatistics(state);  if (frequency == 0)   return;  if (state.generation % frequency != 0)   return;  EvolutionAgent agent=(EvolutionAgent)state;  StatisticsData data=new StatisticsData(new Address(agent.getName()),state.generation,getBestIndividual(state));  if (agent.iamroot)   printStatistics(state,data); else {    agent.fireMessage(agent.getRootAddress(),EvolutionAgent.M_STATS,data);  }}  }
class C{  public void cerrarExecuteLogic(ActionMapping mappings,ActionForm form,HttpServletRequest request,HttpServletResponse response){  goBackExecuteLogic(mappings,form,request,response);}  }
class C{  @Override public TopicObject copy(){  return new TopicObject(this);}  }
class C{  public void fillDefaultValues(){  tfLearningRate.setText(Double.toString(HebbianThresholdRule.DEFAULT_LEARNING_RATE));  tfOutputThresholdMomentum.setText(Double.toString(HebbianThresholdRule.DEFAULT_OUTPUT_THRESHOLD_MOMENTUM));  tfOutputThreshold.setText(Double.toString(HebbianThresholdRule.DEFAULT_OUTPUT_THRESHOLD));  isOutputThresholdSliding.setSelected(HebbianThresholdRule.DEFAULT_USE_SLIDING_OUTPUT_THRESHOLD);}  }
class C{  public void transform(Matrix_Delegate matrix,Path_Delegate dst){  if (matrix.hasPerspective()) {    assert false;    Bridge.getLog().fidelityWarning(LayoutLog.TAG_MATRIX_AFFINE,"android.graphics.Path#transform() only " + "supports affine transformations.",null,null);  }  GeneralPath newPath=new GeneralPath();  PathIterator iterator=mPath.getPathIterator(matrix.getAffineTransform());  newPath.append(iterator,false);  if (dst != null) {    dst.mPath=newPath;  } else {    mPath=newPath;  }}  }
class C{  public void preferenceChanged(View child,boolean width,boolean height){  boolean majorChanged=(majorAxis == X_AXIS) ? width : height;  boolean minorChanged=(majorAxis == X_AXIS) ? height : width;  if (majorChanged) {    majorReqValid=false;    majorAllocValid=false;  }  if (minorChanged) {    minorReqValid=false;    minorAllocValid=false;  }  super.preferenceChanged(child,width,height);}  }
class C{  public StreamConsumer(InputStream stream,String charset){  in=new BufferedInputStream(stream);  this.charset=charset;  thread.start();}  }
class C{  public DateBuilder atHourOfDay(int atHour){  validateHour(atHour);  this.hour=atHour;  return this;}  }
class C{  private ChatCondition createCondition(String condition) throws CompilationFailedException {  final GroovyShell interp=createGroovyShell();  String code="import games.stendhal.server.entity.npc.condition.*;\r\n" + condition;  ChatCondition created=(ChatCondition)interp.evaluate(code);  return created;}  }
class C{  public boolean isDeliveredNo(){  String s=getIsDelivered();  return s == null || ISDELIVERED_No.equals(s);}  }
class C{  public void initializeDependencies(final List<UndoableMove> undoableMoves){  for (  final UndoableMove other : undoableMoves) {    if (other == null) {      System.err.println(undoableMoves);      throw new IllegalStateException("other should not be null");    }    if (!Util.intersection(other.getUnits(),this.getUnits()).isEmpty() || !Util.intersection(other.m_units,this.m_loaded).isEmpty() || !Util.intersection(other.m_conquered,m_route.getAllTerritories()).isEmpty()|| !Util.intersection(other.m_units,this.m_unloaded).isEmpty()|| !Util.intersection(other.m_unloaded,this.m_unloaded).isEmpty()) {      m_iDependOn.add(other);      other.m_dependOnMe.add(this);    }  }}  }
class C{  ReadThread(Socket s,EncoderContext ctx){  super("TcpConnection/Read");  this.setDaemon(true);  this.s=s;  this.ctx=ctx;}  }
class C{  protected boolean init(){  boolean success=false;  try {    services.put(this.serviceName,this);    getStats().incServices(1);    this.ds.addDisconnectListener(disconnectListener);    success=true;    if (logger.isTraceEnabled(LogMarker.DLS)) {      logger.trace(LogMarker.DLS,"Created DistributedLockService <{}>",this.serviceName);    }  }  finally {    if (!success) {      services.remove(this.serviceName);      getStats().incServices(-1);    }  }  ds.handleResourceEvent(ResourceEvent.LOCKSERVICE_CREATE,this);  return success;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:27:58.564 -0500",hash_original_method="85D05E4D48A450B763B6DAAD57350FCF",hash_generated_method="55662DC866222A7973725C5362BC602B") public static long adjustMetaAfterKeypress(long state){  if ((state & META_CAP_PRESSED) != 0) {    state=(state & ~META_SHIFT_MASK) | META_SHIFT_ON | META_CAP_USED;  } else   if ((state & META_CAP_RELEASED) != 0) {    state&=~META_SHIFT_MASK;  }  if ((state & META_ALT_PRESSED) != 0) {    state=(state & ~META_ALT_MASK) | META_ALT_ON | META_ALT_USED;  } else   if ((state & META_ALT_RELEASED) != 0) {    state&=~META_ALT_MASK;  }  if ((state & META_SYM_PRESSED) != 0) {    state=(state & ~META_SYM_MASK) | META_SYM_ON | META_SYM_USED;  } else   if ((state & META_SYM_RELEASED) != 0) {    state&=~META_SYM_MASK;  }  return state;}  }
class C{  public static boolean isLessThanUnsigned(long n1,long n2){  return UnsignedLongs.compare(n1,n2) < 0;}  }
class C{  public static void d(String tag,String msg,Throwable throwable){  if (sLevel > LEVEL_DEBUG) {    return;  }  Log.d(tag,msg,throwable);}  }
class C{  private static boolean functionsAreAllowed(boolean isAddAllFunction,boolean isPutAllFunction,Class<?> classD,Class<?> classS){  if (isAddAllFunction)   return collectionIsAssignableFrom(classD) && collectionIsAssignableFrom(classS);  if (isPutAllFunction)   return mapIsAssignableFrom(classD) && mapIsAssignableFrom(classS);  return isAssignableFrom(classD,classS);}  }
class C{  @Transactional(propagation=Propagation.REQUIRES_NEW) public void check(){  PageRequest pageRequest=new PageRequest(0,PAGE_SIZE);  Page<TargetFilterQuery> filterQueries=targetFilterQueryManagement.findTargetFilterQueryWithAutoAssignDS(pageRequest);  for (  TargetFilterQuery filterQuery : filterQueries) {    checkByTargetFilterQueryAndAssignDS(filterQuery);  }}  }
class C{  public void paintTabbedPaneTabBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int tabIndex,int orientation){  if (orientation == JTabbedPane.LEFT) {    AffineTransform transform=new AffineTransform();    transform.scale(-1,1);    transform.rotate(Math.toRadians(90));    paintBackground(context,g,y,x,h,w,transform);  } else   if (orientation == JTabbedPane.RIGHT) {    AffineTransform transform=new AffineTransform();    transform.rotate(Math.toRadians(90));    transform.translate(0,-(x + w));    paintBackground(context,g,y,0,h,w,transform);  } else   if (orientation == JTabbedPane.BOTTOM) {    AffineTransform transform=new AffineTransform();    transform.translate(x,y);    transform.scale(1,-1);    transform.translate(0,-h);    paintBackground(context,g,0,0,w,h,transform);  } else {    paintBackground(context,g,x,y,w,h,null);  }}  }
class C{  public static <T>ApexStream<T> fromInput(InputOperator operator,Operator.OutputPort<T> outputPort,Option... opts){  ApexStreamImpl<T> newStream=new ApexStreamImpl<>();  return newStream.addOperator(operator,null,outputPort,opts);}  }
class C{  public static ChainingXmlParser<ChainingXmlParser<?>> parseXml(InputStream in){  return new ChainingXmlParser<ChainingXmlParser<?>>(in);}  }
class C{  private JSONWriter append(String string) throws JSONException {  if (string == null) {    throw new JSONException("Null pointer");  }  if (this.mode == 'o' || this.mode == 'a') {    try {      if (this.comma && this.mode == 'a') {        this.writer.write(',');      }      this.writer.write(string);    } catch (    IOException e) {      throw new JSONException(e);    }    if (this.mode == 'o') {      this.mode='k';    }    this.comma=true;    return this;  }  throw new JSONException("Value out of sequence.");}  }
class C{  private void close(){  IWorkbenchPage page=getSite().getPage();  IWorkbenchWindow window=page.getWorkbenchWindow();  page.hideView(this);}  }
class C{  public Object invokeFunction(String name,Object... args) throws ScriptException, NoSuchMethodException {  return invokeMethod(getGlobal(),name,args);}  }
class C{  public WorkerGroup(String name){  super(name);  sb=new StringBuffer();}  }
class C{  protected void expandFor(int index,Object d){  if (index < size)   return;  int oldSize=size, capacity=vector.length;  size=index + 1;  if (capacity >= size)   return;  while (capacity < size)   capacity*=2;  Object[] t=new Object[capacity];  System.arraycopy(vector,0,t,0,oldSize);  if (d != null)   Arrays.fill(t,oldSize,size,d);  vector=t;}  }
class C{  public MessageBuilder withTTS(){  tts=true;  return this;}  }
class C{  public boolean equals(Object other){  if (!(other instanceof TDoubleDoubleHashMap)) {    return false;  }  TDoubleDoubleHashMap that=(TDoubleDoubleHashMap)other;  if (that.size() != this.size()) {    return false;  }  return forEachEntry(new EqProcedure(that));}  }
class C{  public static void main(String[] args){  java.net.URL input100=ClassLoader.getSystemResource(filename_data100 + ".txt");  java.net.URL input200=ClassLoader.getSystemResource(filename_data200 + ".txt");  log.info("Reading data...");  sg100=SpatialGrid.readFromFile(input100.getFile());  sg200=SpatialGrid.readFromFile(input200.getFile());  try {    out=new FileWriter(outputFile);    out.write("interpolation method \t\t\t\t interp. time \t sum of abs. differences \t rel. difference \n");    out.write("-----------------------------------------------------------------------------------------\n");  } catch (  IOException e) {    e.printStackTrace();  }  log.info("Start interpolation of file " + filename_data200 + " with the different interpolation methods:");  testOneMethod(Interpolation.BILINEAR,Double.NaN);  testOneMethod(Interpolation.BICUBIC,Double.NaN);  for (int e=1; e <= 12; e++) {    testOneMethod(Interpolation.INVERSE_DISTANCE_WEIGHTING,e);  }  try {    out.write("\nRemark: The interpolation difference is calculated to known data at the same resolution.\n");    out.close();  } catch (  IOException e) {    e.printStackTrace();  }  log.info("interpolation test done");}  }
class C{  public static char[] convertBytes2Uint8s(byte[] bytes){  int len=bytes.length;  char[] uint8s=new char[len];  for (int i=0; i < len; i++) {    uint8s[i]=convertByte2Uint8(bytes[i]);  }  return uint8s;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public int size(){  return ids.size();}  }
class C{  public void stateChanged(ChangeEvent e){  displayCalendar();}  }
class C{  public DGetNewPassword(JFrame parent,Dialog.ModalityType modality,PasswordQualityConfig passwordQualityConfig){  super(parent,res.getString("DGetNewPassword.Title"),modality);  this.passwordQualityConfig=passwordQualityConfig;  initComponents();}  }
class C{  private String normalizeDualInetAddress(DualInetAddress host){  if (!host.hasInet4() && !host.hasInet6()) {    return null;  }  if (host.hasInet4() && host.hasInet6()) {    StringBuilder sb=new StringBuilder();    sb.append(host.getInet4()).append(BackupConstants.HOSTS_IP_DELIMITER).append("[").append(host.getInet6()).append("]");    return sb.toString();  } else   if (host.hasInet4()) {    return host.getInet4();  } else {    StringBuilder sb=new StringBuilder();    sb.append("[").append(host.getInet6()).append("]");    return sb.toString();  }}  }
class C{  public ProofOfPossession(POPOSigningKey poposk){  tagNo=TYPE_SIGNING_KEY;  obj=poposk;}  }
class C{  public static CallSite metafactory(MethodHandles.Lookup caller,String invokedName,MethodType invokedType,MethodType samMethodType,MethodHandle implMethod,MethodType instantiatedMethodType){  throw new UnsupportedOperationException();}  }
class C{  public static boolean render(ItemStack stack){  EntityItemRenderer tile=HFClientProxy.RENDER_MAP.get(stack.getItem());  if (tile == null)   return false; else {    tile.setID(stack.getItemDamage());    TileEntityRendererDispatcher.instance.renderTileEntityAt(tile,0.0D,0.0D,0.0D,0.0F);    return true;  }}  }
class C{  public static PSPProcessingException convertToApi(org.oscm.internal.types.exception.PSPProcessingException oldEx){  return convertExceptionToApi(oldEx,PSPProcessingException.class);}  }
class C{  public void cmd(String cmd){  cmd(new File(System.getProperty("user.dir")),cmd);}  }
class C{  private void addToQueueBefore(LirsEntry existingEntry){  previousInQueue=existingEntry.previousInQueue;  nextInQueue=existingEntry;  previousInQueue.nextInQueue=this;  nextInQueue.previousInQueue=this;}  }
class C{  @SuppressWarnings("unchecked") public Frame<V>[] analyze(final String owner,final MethodNode m) throws AnalyzerException {  if ((m.access & (ACC_ABSTRACT | ACC_NATIVE)) != 0) {    frames=(Frame<V>[])new Frame<?>[0];    return frames;  }  n=m.instructions.size();  insns=m.instructions;  handlers=(List<TryCatchBlockNode>[])new List<?>[n];  frames=(Frame<V>[])new Frame<?>[n];  subroutines=new Subroutine[n];  queued=new boolean[n];  queue=new int[n];  top=0;  for (int i=0; i < m.tryCatchBlocks.size(); ++i) {    TryCatchBlockNode tcb=m.tryCatchBlocks.get(i);    int begin=insns.indexOf(tcb.start);    int end=insns.indexOf(tcb.end);    for (int j=begin; j < end; ++j) {      List<TryCatchBlockNode> insnHandlers=handlers[j];      if (insnHandlers == null) {        insnHandlers=new ArrayList<TryCatchBlockNode>();        handlers[j]=insnHandlers;      }      insnHandlers.add(tcb);    }  }  Subroutine main=new Subroutine(null,m.maxLocals,null);  List<AbstractInsnNode> subroutineCalls=new ArrayList<AbstractInsnNode>();  Map<LabelNode,Subroutine> subroutineHeads=new HashMap<LabelNode,Subroutine>();  findSubroutine(0,main,subroutineCalls);  while (!subroutineCalls.isEmpty()) {    JumpInsnNode jsr=(JumpInsnNode)subroutineCalls.remove(0);    Subroutine sub=subroutineHeads.get(jsr.label);    if (sub == null) {      sub=new Subroutine(jsr.label,m.maxLocals,jsr);      subroutineHeads.put(jsr.label,sub);      findSubroutine(insns.indexOf(jsr.label),sub,subroutineCalls);    } else {      sub.callers.add(jsr);    }  }  for (int i=0; i < n; ++i) {    if (subroutines[i] != null && subroutines[i].start == null) {      subroutines[i]=null;    }  }  Frame<V> current=newFrame(m.maxLocals,m.maxStack);  Frame<V> handler=newFrame(m.maxLocals,m.maxStack);  current.setReturn(interpreter.newValue(Type.getReturnType(m.desc)));  Type[] args=Type.getArgumentTypes(m.desc);  int local=0;  if ((m.access & ACC_STATIC) == 0) {    Type ctype=Type.getObjectType(owner);    current.setLocal(local++,interpreter.newValue(ctype));  }  for (int i=0; i < args.length; ++i) {    current.setLocal(local++,interpreter.newValue(args[i]));    if (args[i].getSize() == 2) {      current.setLocal(local++,interpreter.newValue(null));    }  }  while (local < m.maxLocals) {    current.setLocal(local++,interpreter.newValue(null));  }  merge(0,current,null);  init(owner,m);  while (top > 0) {    int insn=queue[--top];    Frame<V> f=frames[insn];    Subroutine subroutine=subroutines[insn];    queued[insn]=false;    AbstractInsnNode insnNode=null;    try {      insnNode=m.instructions.get(insn);      int insnOpcode=insnNode.getOpcode();      int insnType=insnNode.getType();      if (insnType == AbstractInsnNode.LABEL || insnType == AbstractInsnNode.LINE || insnType == AbstractInsnNode.FRAME) {        merge(insn + 1,f,subroutine);        newControlFlowEdge(insn,insn + 1);      } else {        current.init(f).execute(insnNode,interpreter);        subroutine=subroutine == null ? null : subroutine.copy();        if (insnNode instanceof JumpInsnNode) {          JumpInsnNode j=(JumpInsnNode)insnNode;          if (insnOpcode != GOTO && insnOpcode != JSR) {            merge(insn + 1,current,subroutine);            newControlFlowEdge(insn,insn + 1);          }          int jump=insns.indexOf(j.label);          if (insnOpcode == JSR) {            merge(jump,current,new Subroutine(j.label,m.maxLocals,j));          } else {            merge(jump,current,subroutine);          }          newControlFlowEdge(insn,jump);        } else         if (insnNode instanceof LookupSwitchInsnNode) {          LookupSwitchInsnNode lsi=(LookupSwitchInsnNode)insnNode;          int jump=insns.indexOf(lsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < lsi.labels.size(); ++j) {            LabelNode label=lsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnNode instanceof TableSwitchInsnNode) {          TableSwitchInsnNode tsi=(TableSwitchInsnNode)insnNode;          int jump=insns.indexOf(tsi.dflt);          merge(jump,current,subroutine);          newControlFlowEdge(insn,jump);          for (int j=0; j < tsi.labels.size(); ++j) {            LabelNode label=tsi.labels.get(j);            jump=insns.indexOf(label);            merge(jump,current,subroutine);            newControlFlowEdge(insn,jump);          }        } else         if (insnOpcode == RET) {          if (subroutine == null) {            throw new AnalyzerException(insnNode,"RET instruction outside of a sub routine");          }          for (int i=0; i < subroutine.callers.size(); ++i) {            JumpInsnNode caller=subroutine.callers.get(i);            int call=insns.indexOf(caller);            if (frames[call] != null) {              merge(call + 1,frames[call],current,subroutines[call],subroutine.access);              newControlFlowEdge(insn,call + 1);            }          }        } else         if (insnOpcode != ATHROW && (insnOpcode < IRETURN || insnOpcode > RETURN)) {          if (subroutine != null) {            if (insnNode instanceof VarInsnNode) {              int var=((VarInsnNode)insnNode).var;              subroutine.access[var]=true;              if (insnOpcode == LLOAD || insnOpcode == DLOAD || insnOpcode == LSTORE || insnOpcode == DSTORE) {                subroutine.access[var + 1]=true;              }            } else             if (insnNode instanceof IincInsnNode) {              int var=((IincInsnNode)insnNode).var;              subroutine.access[var]=true;            }          }          merge(insn + 1,current,subroutine);          newControlFlowEdge(insn,insn + 1);        }      }      List<TryCatchBlockNode> insnHandlers=handlers[insn];      if (insnHandlers != null) {        for (int i=0; i < insnHandlers.size(); ++i) {          TryCatchBlockNode tcb=insnHandlers.get(i);          Type type;          if (tcb.type == null) {            type=Type.getObjectType("java/lang/Throwable");          } else {            type=Type.getObjectType(tcb.type);          }          int jump=insns.indexOf(tcb.handler);          if (newControlFlowExceptionEdge(insn,tcb)) {            handler.init(f);            handler.clearStack();            handler.push(interpreter.newValue(type));            merge(jump,handler,subroutine);          }        }      }    } catch (    AnalyzerException e) {      throw new AnalyzerException(e.node,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }catch (    Exception e) {      throw new AnalyzerException(insnNode,"Error at instruction " + insn + ": "+ e.getMessage(),e);    }  }  return frames;}  }
class C{  public SAX2DTM(DTMManager mgr,Source source,int dtmIdentity,DTMWSFilter whiteSpaceFilter,XMLStringFactory xstringfactory,boolean doIndexing,int blocksize,boolean usePrevsib,boolean newNameTable){  super(mgr,source,dtmIdentity,whiteSpaceFilter,xstringfactory,doIndexing,blocksize,usePrevsib,newNameTable);  if (blocksize <= 64) {    m_data=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS_SMALL);    m_dataOrQName=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS_SMALL);    m_valuesOrPrefixes=new DTMStringPool(16);    m_chars=new FastStringBuffer(7,10);    m_contextIndexes=new IntStack(4);    m_parents=new IntStack(4);  } else {    m_data=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS);    m_dataOrQName=new SuballocatedIntVector(blocksize,DEFAULT_NUMBLOCKS);    m_valuesOrPrefixes=new DTMStringPool();    m_chars=new FastStringBuffer(10,13);    m_contextIndexes=new IntStack();    m_parents=new IntStack();  }  m_data.addElement(0);  m_useSourceLocationProperty=mgr.getSource_location();  m_sourceSystemId=(m_useSourceLocationProperty) ? new StringVector() : null;  m_sourceLine=(m_useSourceLocationProperty) ? new IntVector() : null;  m_sourceColumn=(m_useSourceLocationProperty) ? new IntVector() : null;}  }
class C{  public NetworkEvent(ConnectionRequest request,Object metaData){  super(request,ActionEvent.Type.Data);  if (request != null) {    this.progressType=request.getResponseCode();  }  this.metaData=metaData;}  }
class C{  public static _Fields findByName(String name){  return byName.get(name);}  }
class C{  public String searchpopup() throws Exception {  executeQuery();  return POPUP_VIEW;}  }
class C{  public void yypushback(int number){  if (number > yylength())   zzScanError(ZZ_PUSHBACK_2BIG);  zzMarkedPos-=number;}  }
class C{  public synchronized void insertUpdate(DocumentEvent e){  int len=e.getLength();  int off=e.getOffset();  if (outputMark > off) {    outputMark+=len;  }}  }
class C{  private void decorateFromFolderPendingChanges(final IResource resource,final IDecoration decoration,final TFSRepository repository,final String resourcePath){  if (repository.getPendingChangeCache().hasPendingChangesByLocalPathRecursive(resourcePath) == false) {    return;  }  decoration.addOverlay(imageHelper.getImageDescriptor(CHANGE_ICON));}  }
class C{  @Override public synchronized void mark(int readlimit){  in.mark(readlimit);  mark=pos;}  }
class C{  public void error(TransformerException exception) throws TransformerException {  if (m_throwExceptionOnError)   throw exception; else {    PrintWriter pw=getErrorWriter();    printLocation(pw,exception);    pw.println(exception.getMessage());  }}  }
class C{  public GsonRequest(int method,String requestUrl,String requestBody,Class<T> clazz,Response.Listener<T> successListener,Response.ErrorListener errorListener,FragmentManager fragmentManager,String accessToken){  super(method,requestUrl,errorListener);  this.clazz=clazz;  this.requestUrl=requestUrl;  this.requestBody=requestBody;  this.successListener=successListener;  this.fragmentManager=fragmentManager;  this.accessToken=accessToken;}  }
class C{  public void testFollowerRejectsPollRequestWithLowerTerm() throws Throwable {  runOnServer(null);}  }
class C{  public synchronized void ensureCapacity(int minCapacity){  modCount++;  ensureCapacityHelper(minCapacity);}  }
class C{  private void drawCursor(Graphics2D graphics){  if (mCursorVisible) {    drawFrequencyLine(graphics,mCursorLocation.x,mColorSpectrumCursor);    String frequency=CURSOR_FORMAT.format(getFrequencyFromAxis(mCursorLocation.getX()) / 1E6D);    graphics.drawString(frequency,mCursorLocation.x + 5,mCursorLocation.y);    if (mZoom != 0) {      graphics.drawString("Zoom: " + (int)Math.pow(2.0,mZoom) + "x",mCursorLocation.x + 17,mCursorLocation.y + 11);    }  }}  }
class C{  synchronized void processLocalEvent(MemoryEvent event){  assert event.isLocal();  if (this.cache.getLoggerI18n().fineEnabled()) {    this.cache.getLoggerI18n().fine("Handling new local event " + event);  }  if (event.getState().isCritical() && !event.getPreviousState().isCritical()) {    this.cache.getLoggerI18n().error(LocalizedStrings.MemoryMonitor_MEMBER_ABOVE_CRITICAL_THRESHOLD,new Object[]{event.getMember(),"heap"});    if (!this.cache.isQueryMonitorDisabledForLowMemory()) {      QueryMonitor.setLowMemory(true,event.getBytesUsed());      this.cache.getQueryMonitor().cancelAllQueriesDueToMemory();    }  } else   if (!event.getState().isCritical() && event.getPreviousState().isCritical()) {    this.cache.getLoggerI18n().error(LocalizedStrings.MemoryMonitor_MEMBER_BELOW_CRITICAL_THRESHOLD,new Object[]{event.getMember(),"heap"});    if (!this.cache.isQueryMonitorDisabledForLowMemory()) {      QueryMonitor.setLowMemory(false,event.getBytesUsed());    }  }  if (event.getState().isEviction() && !event.getPreviousState().isEviction()) {    this.cache.getLoggerI18n().info(LocalizedStrings.MemoryMonitor_MEMBER_ABOVE_HIGH_THRESHOLD,new Object[]{event.getMember(),"heap"});  } else   if (!event.getState().isEviction() && event.getPreviousState().isEviction()) {    this.cache.getLoggerI18n().info(LocalizedStrings.MemoryMonitor_MEMBER_BELOW_HIGH_THRESHOLD,new Object[]{event.getMember(),"heap"});  }  if (this.cache.getLoggerI18n().fineEnabled()) {    this.cache.getLoggerI18n().fine("Informing remote members of event " + event);  }  this.resourceAdvisor.updateRemoteProfile();  this.resourceManager.deliverLocalEvent(event);}  }
class C{  public void init(){  Debug.message("eomg","EditableOMPoly.init()");  setStateMachine(new PolyStateMachine(this));  gPoints=new GrabPoint[1];}  }
class C{  public final boolean canGetDouble(String field){  return m_table.canGetDouble(field);}  }
class C{  public static void configureNetty(){  com.spotify.heroic.bigtable.netty.util.internal.logging.InternalLoggerFactory.setDefaultFactory(new com.spotify.heroic.bigtable.netty.util.internal.logging.Slf4JLoggerFactory());  com.datastax.shaded.netty.util.internal.logging.InternalLoggerFactory.setDefaultFactory(new com.datastax.shaded.netty.util.internal.logging.Slf4JLoggerFactory());  io.netty.util.internal.logging.InternalLoggerFactory.setDefaultFactory(new io.netty.util.internal.logging.Slf4JLoggerFactory());  org.elasticsearch.common.netty.logging.InternalLoggerFactory.setDefaultFactory(new org.elasticsearch.common.netty.logging.Slf4JLoggerFactory());}  }
class C{  public boolean saveModel(EObject model,String filename,String cwd){  return saveModel(model,filename,cwd,null);}  }
class C{  public String toString(int indentFactor) throws JSONException {  return toString(indentFactor,0);}  }
class C{  @Deprecated public boolean checkScopeWritable(@NotNull Project project){  if (myFilesSet == null)   initFilesSet();  return !FileModificationService.getInstance().prepareVirtualFilesForWrite(project,myFilesSet);}  }
class C{  public boolean voidIt(){  log.info(toString());  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_VOID);  if (m_processMsg != null)   return false;  if (DOCSTATUS_Closed.equals(getDocStatus()) || DOCSTATUS_Reversed.equals(getDocStatus()) || DOCSTATUS_Voided.equals(getDocStatus())) {    m_processMsg="Document Closed: " + getDocStatus();    setDocAction(DOCACTION_None);    return false;  }  if (DOCSTATUS_Drafted.equals(getDocStatus()) || DOCSTATUS_Invalid.equals(getDocStatus()) || DOCSTATUS_InProgress.equals(getDocStatus())|| DOCSTATUS_Approved.equals(getDocStatus())|| DOCSTATUS_NotApproved.equals(getDocStatus()))   ; else {    MPeriod.testPeriodOpen(getCtx(),getStatementDate(),MDocType.DOCBASETYPE_BankStatement,getAD_Org_ID());    MFactAcct.deleteEx(Table_ID,getC_BankStatement_ID(),get_TrxName());  }  MBankAccount ba=getBankAccount();  ba.load(get_TrxName());  ba.setCurrentBalance(ba.getCurrentBalance().subtract(getStatementDifference()));  ba.saveEx();  MBankStatementLine[] lines=getLines(true);  for (int i=0; i < lines.length; i++) {    MBankStatementLine line=lines[i];    if (line.getStmtAmt().compareTo(Env.ZERO) != 0) {      String description=Msg.getMsg(getCtx(),"Voided") + " (" + Msg.translate(getCtx(),"StmtAmt")+ "="+ line.getStmtAmt();      if (line.getTrxAmt().compareTo(Env.ZERO) != 0)       description+=", " + Msg.translate(getCtx(),"TrxAmt") + "="+ line.getTrxAmt();      if (line.getChargeAmt().compareTo(Env.ZERO) != 0)       description+=", " + Msg.translate(getCtx(),"ChargeAmt") + "="+ line.getChargeAmt();      if (line.getInterestAmt().compareTo(Env.ZERO) != 0)       description+=", " + Msg.translate(getCtx(),"InterestAmt") + "="+ line.getInterestAmt();      description+=")";      line.addDescription(description);      line.setStmtAmt(Env.ZERO);      line.setTrxAmt(Env.ZERO);      line.setChargeAmt(Env.ZERO);      line.setInterestAmt(Env.ZERO);      if (line.getC_Payment_ID() != 0) {        MPayment payment=new MPayment(getCtx(),line.getC_Payment_ID(),get_TrxName());        payment.setIsReconciled(false);        payment.saveEx();        line.setC_Payment_ID(0);      }      line.saveEx();    }  }  addDescription(Msg.getMsg(getCtx(),"Voided"));  setStatementDifference(Env.ZERO);  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_VOID);  if (m_processMsg != null)   return false;  setProcessed(true);  setDocAction(DOCACTION_None);  return true;}  }
class C{  @HLEUnimplemented @HLEFunction(nid=0x61BE5CAC,version=271) public int sceUsbCamStillInputBlocking(TPointer buffer,int size){  return 0;}  }
class C{  private void addPool(){  int newNumPools=(int)Math.ceil(numPools * POOL_GROWTH_FACTOR);  numPoolsCounter.incr(newNumPools - numPools);  RegularDegreeEdgePool[] newEdgePools=new RegularDegreeEdgePool[newNumPools];  int[] newPoolDegrees=new int[newNumPools];  System.arraycopy(readerAccessibleInfo.edgePools,0,newEdgePools,0,readerAccessibleInfo.edgePools.length);  System.arraycopy(readerAccessibleInfo.poolDegrees,0,newPoolDegrees,0,readerAccessibleInfo.poolDegrees.length);  readerAccessibleInfo=new ReaderAccessibleInfo(newEdgePools,newPoolDegrees,readerAccessibleInfo.nodeDegrees);  for (int i=numPools; i < newNumPools; i++) {    initPool(i);  }  numPools=newNumPools;  currentNumEdgesStored=currentNumEdgesStored;}  }
class C{  public void removeChartMouseListener(ChartMouseListener listener){  this.chartMouseListeners.remove(ChartMouseListener.class,listener);}  }
class C{  public <T extends MessageLite>T readMessage(final Parser<T> parser,final ExtensionRegistryLite extensionRegistry) throws IOException {  int length=readRawVarint32();  if (recursionDepth >= recursionLimit) {    throw InvalidProtocolBufferException.recursionLimitExceeded();  }  final int oldLimit=pushLimit(length);  ++recursionDepth;  T result=parser.parsePartialFrom(this,extensionRegistry);  checkLastTagWas(0);  --recursionDepth;  popLimit(oldLimit);  return result;}  }
class C{  public IllegalThreadStateException(){  super();}  }
class C{  public UTFDataFormatException(){  super();}  }
class C{  private static void renderPassThruAttributesUnoptimized(FacesContext context,ResponseWriter writer,UIComponent component,Attribute[] knownAttributes,Map<String,List<ClientBehavior>> behaviors) throws IOException {  boolean isXhtml=RIConstants.XHTML_CONTENT_TYPE.equals(writer.getContentType());  Map<String,Object> attrMap=component.getAttributes();  for (  Attribute attribute : knownAttributes) {    String attrName=attribute.getName();    String[] events=attribute.getEvents();    boolean hasBehavior=((events != null) && (events.length > 0) && (behaviors.containsKey(events[0])));    Object value=attrMap.get(attrName);    if (value != null && shouldRenderAttribute(value) && !hasBehavior) {      writer.writeAttribute(prefixAttribute(attrName,isXhtml),value,attrName);    } else     if (hasBehavior) {      renderHandler(context,component,null,attrName,value,events[0],null,false,false);    }  }}  }
class C{  public PolynomialGF2mSmallM(GF2mField field){  this.field=field;  degree=-1;  coefficients=new int[1];}  }
class C{  public DownloadConfiguration(){  maxThreadNum=DEFAULT_MAX_THREAD_NUMBER;  threadNum=DEFAULT_THREAD_NUMBER;}  }
class C{  public Node insertBefore(Node newChild,Node refChild) throws DOMException {  error(XMLErrorResources.ER_FUNCTION_NOT_SUPPORTED);  return null;}  }
class C{  public boolean isOverwriteOnConflict(){  return overwriteOnConflict;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case ImPackage.REFERENCING_ELEMENT_IM__REWIRED_TARGET:    return basicSetRewiredTarget(null,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void removed(Container cont){}  }
class C{  public BasicConstraints(int pathLenConstraint){  this.cA=ASN1Boolean.getInstance(true);  this.pathLenConstraint=new ASN1Integer(pathLenConstraint);}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  GoogleBaseService service=RecipeUtil.getGoogleBaseService(request,this.getServletContext());  RecipeSearch recipeSearch;  try {    if (request.getParameter("query") == null) {      recipeSearch=new RecipeSearch(service,urlFactory,ownItems);    } else {      recipeSearch=createRecipeSearch(service,request);    }    recipeSearch.runQuery();  } catch (  RecipeValidationException rve) {    RecipeUtil.forwardToErrorPage(request,response,rve.getMessage());    return;  }catch (  ServiceException se) {    RecipeUtil.logServiceException(this,se);    RecipeUtil.forwardToErrorPage(request,response,se);    return;  }  RecipeUtil.setRecipeSearch(request,recipeSearch);  request.getRequestDispatcher(DISPLAY_JSP).forward(request,response);}  }
class C{  public BarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer);  mType=type;}  }
class C{  public void normalizeCartesian(){  toDensePolar();  toCartesian();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:01:20.015 -0400",hash_original_method="8100634ACF4440638ECC28432AE5429D",hash_generated_method="8100634ACF4440638ECC28432AE5429D") void removeEQ(Object o){  final ReentrantLock lock=this.lock;  lock.lock();  try {    for (Iterator<E> it=q.iterator(); it.hasNext(); ) {      if (o == it.next()) {        it.remove();        break;      }    }  }  finally {    lock.unlock();  }}  }
class C{  private static IgfsEx startPrimary() throws Exception {  Configuration conf=baseConfiguration();  conf.set("fs.defaultFS","igfs://secondary:secondary@127.0.0.1:11500/");  writeConfigurationToFile(conf);  CachingHadoopFileSystemFactory delegate=new CachingHadoopFileSystemFactory();  delegate.setUri("igfs://secondary:secondary@127.0.0.1:11500/");  delegate.setConfigPaths(SECONDARY_CFG_PATH);  TestFactory factory=new TestFactory(delegate);  IgniteHadoopIgfsSecondaryFileSystem secondaryFs=new IgniteHadoopIgfsSecondaryFileSystem();  secondaryFs.setFileSystemFactory(factory);  return start("primary",10500,IgfsMode.DUAL_ASYNC,secondaryFs);}  }
class C{  public static void main(String[] argv){  runFilter(new RenameNominalValues(),argv);}  }
class C{  public String write(File path){  return path.getPath();}  }
class C{  public void stop(){  if (shellHover.isDisposed() || shellHover.getDisplay().isDisposed()) {    return;  }  fadeOut=true;}  }
class C{  public static LocalDateTime parseDateTime(String datetime){  return dfISO8601Parser.parseLocalDateTime(localizeTimestamp(datetime));}  }
class C{  public String toString(){  long ncompleted;  int nworkers, nactive;  final ReentrantLock mainLock=this.mainLock;  mainLock.lock();  try {    ncompleted=completedTaskCount;    nactive=0;    nworkers=workers.size();    for (    Worker w : workers) {      ncompleted+=w.completedTasks;      if (w.isLocked())       ++nactive;    }  }  finally {    mainLock.unlock();  }  int c=ctl.get();  String rs=(runStateLessThan(c,SHUTDOWN) ? "Running" : (runStateAtLeast(c,TERMINATED) ? "Terminated" : "Shutting down"));  return super.toString() + "[" + rs+ ", pool size = "+ nworkers+ ", active threads = "+ nactive+ ", queued tasks = "+ workQueue.size()+ ", completed tasks = "+ ncompleted+ "]";}  }
class C{  public HttpClient(String url,Map<String,Object> parameters){  this.url=url;  this.parameters=parameters;}  }
class C{  public boolean isRslUrlSigned(String url){  if (url == null) {    return false;  }  return url.endsWith(SIGNED_RSL_URL_DOT_EXTENSION);}  }
class C{  private CollectorUtil(){  instanceNotAllowed(getClass());}  }
class C{  public void print(Object obj){  print(String.valueOf(obj));}  }
class C{  public static void publish(String topic,String message){  client().publish(topic,StringMessage.newBuilder().setMessage(message).build());}  }
class C{  private Object convertNumeric(Object srcObj,int srcType,int trgType) throws SQLException {  if (srcType == trgType) {    return srcObj;  }  if (isNumeric(trgType) == false && isString(trgType) == false) {    throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString() + trgType);  }  try {switch (trgType) {case java.sql.Types.BIT:      Integer i=Integer.valueOf(srcObj.toString().trim());    return i.equals(0) ? Boolean.valueOf(false) : Boolean.valueOf(true);case java.sql.Types.TINYINT:  return Byte.valueOf(srcObj.toString().trim());case java.sql.Types.SMALLINT:return Short.valueOf(srcObj.toString().trim());case java.sql.Types.INTEGER:return Integer.valueOf(srcObj.toString().trim());case java.sql.Types.BIGINT:return Long.valueOf(srcObj.toString().trim());case java.sql.Types.NUMERIC:case java.sql.Types.DECIMAL:return new BigDecimal(srcObj.toString().trim());case java.sql.Types.REAL:case java.sql.Types.FLOAT:return new Float(srcObj.toString().trim());case java.sql.Types.DOUBLE:return new Double(srcObj.toString().trim());case java.sql.Types.CHAR:case java.sql.Types.VARCHAR:case java.sql.Types.LONGVARCHAR:return srcObj.toString();default :throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString() + trgType);}} catch (NumberFormatException ex) {throw new SQLException(resBundle.handleGetObject("cachedrowsetimpl.dtypemismt").toString() + trgType);}}  }
class C{  public boolean hasTargetKind(){  return getTargetKind() != null;}  }
class C{  private void moveCaretLeft(){  int len=buffer.length();  if (--insertionPoint < 2) {    insertionPoint++;    beep();  } else   if (format == SURROGATE_PAIR && insertionPoint == 7) {    insertionPoint=8;    beep();  }  context.dispatchInputMethodEvent(InputMethodEvent.CARET_POSITION_CHANGED,null,0,TextHitInfo.leading(insertionPoint),null);}  }
class C{  public void toOSGB36(){  RefEll wgs84=new RefEll(6378137.000,6356752.3141);  double a=wgs84.getMaj();  double eSquared=wgs84.getEcc();  double phi=Math.toRadians(this.lat);  double lambda=Math.toRadians(this.lng);  double v=a / (Math.sqrt(1 - eSquared * Util.sinSquared(phi)));  double H=0;  double x=(v + H) * Math.cos(phi) * Math.cos(lambda);  double y=(v + H) * Math.cos(phi) * Math.sin(lambda);  double z=((1 - eSquared) * v + H) * Math.sin(phi);  double tx=-446.448;  double ty=124.157;  double tz=-542.060;  double s=0.0000204894;  double rx=Math.toRadians(-0.00004172222);  double ry=Math.toRadians(-0.00006861111);  double rz=Math.toRadians(-0.00023391666);  double xB=tx + (x * (1 + s)) + (-rx * y)+ (ry * z);  double yB=ty + (rz * x) + (y * (1 + s))+ (-rx * z);  double zB=tz + (-ry * x) + (rx * y)+ (z * (1 + s));  RefEll airy1830=new RefEll(6377563.396,6356256.909);  a=airy1830.getMaj();  eSquared=airy1830.getEcc();  double lambdaB=Math.toDegrees(Math.atan(yB / xB));  double p=Math.sqrt((xB * xB) + (yB * yB));  double phiN=Math.atan(zB / (p * (1 - eSquared)));  for (int i=1; i < 10; i++) {    v=a / (Math.sqrt(1 - eSquared * Util.sinSquared(phiN)));    double phiN1=Math.atan((zB + (eSquared * v * Math.sin(phiN))) / p);    phiN=phiN1;  }  double phiB=Math.toDegrees(phiN);  lat=phiB;  lng=lambdaB;}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public void allowTypes(final String... names){  addPermission(new ExplicitTypePermission(names));}  }
class C{  private void saveScreenshotInWorkerThread(Runnable finisher){  SaveImageInBackgroundData data=new SaveImageInBackgroundData();  data.context=mContext;  data.image=mScreenBitmap;  data.iconSize=mNotificationIconSize;  data.finisher=finisher;  if (mSaveInBgTask != null) {    mSaveInBgTask.cancel(false);  }  mSaveInBgTask=new SaveImageInBackgroundTask(mContext,data,mNotificationManager,SCREENSHOT_NOTIFICATION_ID).execute(data);}  }
class C{  public NewOperatorExpression(List<String> columnNames){  this.columnNames=columnNames;}  }
class C{  private static Bigquery createAuthorizedClient() throws IOException {  HttpTransport transport=new NetHttpTransport();  JsonFactory jsonFactory=new JacksonFactory();  GoogleCredential credential=GoogleCredential.getApplicationDefault(transport,jsonFactory);  if (credential.createScopedRequired()) {    Collection<String> bigqueryScopes=BigqueryScopes.all();    credential=credential.createScoped(bigqueryScopes);  }  return new Bigquery.Builder(transport,jsonFactory,credential).setApplicationName("BigQuery Samples").build();}  }
class C{  public DoublePoint(String name,double... point){  super(name,pack(point),getType(point.length));}  }
class C{  public <T>T createObject(Resource resource,Class<T> type){  RDFObject obj;  URI rdftype=getNameOf(type);  if (rdftype == null) {    obj=createObject(resource);  } else {    Set<URI> types=Collections.singleton(rdftype);    obj=createObject(resource,types);  }  try {    return type.cast(obj);  } catch (  ClassCastException e) {    String msg="Cannot cast resource " + obj + " to a "+ type.getName();    ClassCastException cce=new ClassCastException(msg);    cce.initCause(e);    throw cce;  }}  }
class C{  public boolean isCurrent(){  return gridTab != null ? gridTab.isCurrent() : false;}  }
class C{  static <T>GeneralRange<T> downTo(Comparator<? super T> comparator,@Nullable T endpoint,BoundType boundType){  return new GeneralRange<T>(comparator,true,endpoint,boundType,false,null,OPEN);}  }
class C{  private static boolean variableDefinitelyAssignedIn(@NotNull PsiVariable variable,@NotNull PsiElement context){  try {    ControlFlow controlFlow=getControlFlow(context);    return ControlFlowUtil.isVariableDefinitelyAssigned(variable,controlFlow);  } catch (  AnalysisCanceledException e) {    return false;  }}  }
class C{  public boolean acceptsDestination(Location destination){  if (getDestinationOption().equals(ALL_DESTINATIONS) || destination == null) {    return true;  }  return _destinationIdList.contains(destination.getId());}  }
class C{  public Builder customProperty(String name,String... values){  return customProperty(new Property(name,values));}  }
class C{  public StandaloneBlock createStandaloneBlock(){  StandaloneBlockImpl standaloneBlock=new StandaloneBlockImpl();  return standaloneBlock;}  }
class C{  public SparseBitmap and(final SparseBitmap rhs){  return new SparseBitmap(this.bitmap.and(rhs.bitmap));}  }
class C{  public Boolean isAuxiliary(){  return auxiliary;}  }
class C{  public static byte[] reverseArray(final byte[] nullableArrayToBeInverted){  if (nullableArrayToBeInverted != null && nullableArrayToBeInverted.length > 0) {    int indexStart=0;    int indexEnd=nullableArrayToBeInverted.length - 1;    while (indexStart < indexEnd) {      final byte a=nullableArrayToBeInverted[indexStart];      nullableArrayToBeInverted[indexStart]=nullableArrayToBeInverted[indexEnd];      nullableArrayToBeInverted[indexEnd]=a;      indexStart++;      indexEnd--;    }  }  return nullableArrayToBeInverted;}  }
class C{  public SubscriptionStateException(Reason reason,String member,Object[] params){  super(getMessage(reason,member,params),params);  bean.setReason(reason);  bean.setMember(member);  setMessageKey(initMessageKey());}  }
class C{  public static final int flipInRange(int a,int mod){  int p=2 * mod;  if (a < 0)   a=p + a % p;  if (a >= p)   a=a % p;  if (a >= mod)   a=mod - a % mod - 1;  return a;}  }
class C{  public void mouseClicked(MouseEvent e){  if (e.getClickCount() > 1 && m_table.getSelectedRow() > -1) {    dispose();  }}  }
class C{  public void onDisconnect(OneSheeldDevice device){}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (is_ValueChanged("DueAmt")) {    log.fine("beforeSave");    setIsValid(false);  }  return true;}  }
class C{  public static Color hexToColor(String hexString){  int decimalColor;  decimalColor=Integer.parseInt(hexString,16);  return new Color(decimalColor);}  }
class C{  public static RealMatrix scaleMatrix(Vector3D scaleVector){  return scaleMatrix(scaleVector.getX(),scaleVector.getY(),scaleVector.getZ());}  }
class C{  @Override public TaskList createFileSystems(FileSystemParam param,Project project,VirtualArray varray,VirtualPool vpool,TenantOrg tenantOrg,DataObject.Flag[] flags,List<Recommendation> recommendations,TaskList taskList,String taskId,VirtualPoolCapabilityValuesWrapper vpoolCapabilities) throws InternalException {  List<FileShare> fileList=null;  List<FileShare> fileShares=new ArrayList<FileShare>();  fileList=prepareFileSystems(param,taskId,taskList,project,tenantOrg,flags,varray,vpool,recommendations,vpoolCapabilities,false);  fileShares.addAll(fileList);  String suggestedNativeFsId=param.getFsId() == null ? "" : param.getFsId();  final List<FileDescriptor> fileDescriptors=prepareFileDescriptors(fileShares,vpoolCapabilities,suggestedNativeFsId);  final FileOrchestrationController controller=getController(FileOrchestrationController.class,FileOrchestrationController.FILE_ORCHESTRATION_DEVICE);  try {    controller.createFileSystems(fileDescriptors,taskId);  } catch (  InternalException e) {    _log.error("Controller error when creating mirror filesystems",e);    failFileShareCreateRequest(taskId,taskList,fileShares,e.getMessage());    throw e;  }catch (  Exception e) {    _log.error("Controller error when creating mirror filesystems",e);    failFileShareCreateRequest(taskId,taskList,fileShares,e.getMessage());    throw e;  }  return taskList;}  }
class C{  protected static boolean argumentClassIsParameterClass(Class argumentClass,Class parameterClass){  if (argumentClass == parameterClass)   return true;  if (getWrapperClass(parameterClass) == argumentClass)   return true;  return false;}  }
class C{  public ReLinkerInstance force(){  this.force=true;  return this;}  }
class C{  public SubscriptionMigrationException(String message){  super(message);}  }
class C{  @SuppressWarnings("unchecked") public UniformGenerator(Vector<String> values){  _values=(Vector<String>)values.clone();  _laststring=null;  _gen=new UniformIntegerGenerator(0,values.size() - 1);}  }
class C{  private void compile2(){  try {switch (compilePolicy) {case ATTR_ONLY:      attribute(todo);    break;case CHECK_ONLY:  flow(attribute(todo));break;case SIMPLE:generate(desugar(flow(attribute(todo))));break;case BY_FILE:{Queue<Queue<Env<AttrContext>>> q=todo.groupByFile();while (!q.isEmpty() && !shouldStop(CompileState.ATTR)) {generate(desugar(flow(attribute(q.remove()))));}}break;case BY_TODO:while (!todo.isEmpty()) generate(desugar(flow(attribute(todo.remove()))));break;default :Assert.error("unknown compile policy");}} catch (Abort ex) {if (devVerbose) ex.printStackTrace(System.err);}if (verbose) {elapsed_msec=elapsed(start_msec);log.printVerbose("total",Long.toString(elapsed_msec));}reportDeferredDiagnostics();if (!log.hasDiagnosticListener()) {printCount("error",errorCount());printCount("warn",warningCount());}}  }
class C{  public String adoc(int commitWithin,String... fieldsAndValues){  XmlDoc d=doc(fieldsAndValues);  return add(d,"commitWithin",String.valueOf(commitWithin));}  }
class C{  public String printList(MyIdxList points){  if (points == null || points.length() == 0) {    return "";  }  StringBuffer bf=new StringBuffer();  try {    ListNode temp;    for (int i=0; i < points.size(); i++) {      temp=points.get(i);      if (i == 0) {        bf.append("" + temp.idx);      } else {        bf.append(", " + temp.idx);      }    }  } catch (  Exception ex) {    ex.printStackTrace();  }  return bf.toString();}  }
class C{  public byte[] uploadFile() throws IOException, NetworkException {  if (sLogger.isActivated()) {    sLogger.debug("Upload file " + mContent.getUri() + " TID="+ mTId);  }  URL url=new URL(getHttpServerAddr().toString());  HttpURLConnection urlConnection=null;  try {    urlConnection=openHttpConnection(url,new HashMap<String,String>());    urlConnection.setDoInput(true);    urlConnection.setDoOutput(true);    urlConnection.setRequestMethod("POST");    urlConnection.setReadTimeout(HTTP_READ_TIMEOUT);    urlConnection.setChunkedStreamingMode(CHUNK_MAX_SIZE);    if (isHttpTraceEnabled()) {      System.out.println(">>> Send HTTP request:\nPOST " + url);    }    int statusCode=urlConnection.getResponseCode();    String message=urlConnection.getResponseMessage();    if (sLogger.isActivated()) {      sLogger.debug("First POST response: " + statusCode + " ("+ message+ ")");    }switch (statusCode) {case HttpURLConnection.HTTP_UNAUTHORIZED:      String authHeader=urlConnection.getHeaderField("www-authenticate");    if (StringUtils.isEmpty(authHeader)) {      throw new IOException("headers malformed in 401 response");    }  mAuth=new HttpAuthenticationAgent(getHttpServerLogin(),getHttpServerPwd());mAuth.readWwwAuthenticateHeader(authHeader);break;case HttpURLConnection.HTTP_NO_CONTENT:break;case HttpURLConnection.HTTP_UNAVAILABLE:long retryAfter=getRetryTimeout(urlConnection);if (retryAfter > 0) {try {Thread.sleep(retryAfter);} catch (InterruptedException e) {}}default :if (mRetryCount < RETRY_MAX) {mRetryCount++;return uploadFile();}throw new IOException("Unable to upload file URI " + mContent.getUri() + "!");}if (isCancelled()) {if (sLogger.isActivated()) {sLogger.debug("File transfer cancelled by user");}return null;}return sendMultipartPost(url);}  finally {if (urlConnection != null) {urlConnection.disconnect();}}}  }
class C{  GridResourceMethod(Method mtd,Annotation ann){  assert mtd != null;  assert ann != null;  this.mtd=mtd;  this.ann=ann;  mtd.setAccessible(true);}  }
class C{  public void layoutView(int viewMode){  int layoutMode=0;  Parcelable s=getListView().getLayoutManager().onSaveInstanceState();  StorePosition.setParentPosition(mFile.getFileId(),s);switch (viewMode) {case 0:    mLayoutManager=new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false);  mAdapter.setResourceLayout(R.layout.list_item);layoutView.setIcon(R.drawable.ic_grid);layoutMode=R.drawable.ic_grid;break;case 1:if (getActivity().getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {mLayoutManager=new GridLayoutManager(getActivity(),NUMBER_OF_GRID_COLUMNS,GridLayoutManager.VERTICAL,false);} else {mLayoutManager=new GridLayoutManager(getActivity(),NUMBER_OF_GRID_COLUMNS_LANDSCAPE,GridLayoutManager.VERTICAL,false);}mAdapter.setResourceLayout(R.layout.grid_item);layoutView.setIcon(R.drawable.ic_list);layoutMode=R.drawable.ic_list;break;default :mLayoutManager=new LinearLayoutManager(getActivity(),LinearLayoutManager.VERTICAL,false);mAdapter.setResourceLayout(R.layout.list_item);layoutView.setIcon(R.drawable.ic_grid);layoutMode=R.drawable.ic_grid;break;}SharedPreferences.Editor editor=mAppPreferences.edit();editor.putInt("layoutMode",layoutMode);editor.apply();mCurrentListView.setLayoutManager(mLayoutManager);if (StorePosition.getListPositionList().containsKey(mFile.getFileId())) {Parcelable r=StorePosition.getParentPosition(mFile.getFileId());getListView().getLayoutManager().onRestoreInstanceState(r);StorePosition.removeParentPosition(mFile.getFileId());}}  }
class C{  public void print(String text){  String[] lines=text.split("\n");  for (  String line : lines) {    view.print(line.isEmpty() ? " " : line);  }  view.scrollBottom();  for (  ActionDelegate actionDelegate : actionDelegates) {    actionDelegate.onConsoleOutput(this);  }}  }
class C{  public static byte[] insert(byte[] dest,byte src,int offset){  byte[] temp=new byte[dest.length + 1];  System.arraycopy(dest,0,temp,0,offset);  temp[offset]=src;  System.arraycopy(dest,offset,temp,offset + 1,dest.length - offset);  return temp;}  }
class C{  public static void startCropperActivity(Activity activity,int requestCode,String title,Uri output){  Intent intent=new Intent();  intent.setClass(activity,CropperActivity.class);  intent.putExtra(EXTRA_TITLE,title);  intent.putExtra(EXTRA_OUTPUT,output);  activity.startActivityForResult(intent,requestCode);  activity.overridePendingTransition(R.anim.fade_in,R.anim.fade_out);}  }
class C{  public JsonPrimitive(String string){  setValue(string);}  }
class C{  public static InternalLogWriter createLogWriterLogger(final boolean isLoner,final boolean isSecure,final LogConfig config,final boolean logConfig){  String name=null;  if (isSecure) {    name=LogService.SECURITY_LOGGER_NAME;  } else {    name=LogService.MAIN_LOGGER_NAME;  }  final LogWriterLogger logger=LogService.createLogWriterLogger(name,config.getName(),isSecure);  if (isSecure) {    logger.setLogWriterLevel(((DistributionConfig)config).getSecurityLogLevel());  } else {    boolean defaultSource=false;    if (config instanceof DistributionConfig) {      ConfigSource source=((DistributionConfig)config).getConfigSource(LOG_LEVEL);      if (source == null) {        defaultSource=true;      }    }    if (!defaultSource) {      logger.setLogWriterLevel(config.getLogLevel());    }  }  if (!Boolean.getBoolean(InternalLocator.INHIBIT_DM_BANNER)) {    if (InternalDistributedSystem.getReconnectAttemptCounter() == 0 && !isSecure) {      logger.info(LogMarker.CONFIG,Banner.getString(null));    }  } else {    logger.debug("skipping banner - " + InternalLocator.INHIBIT_DM_BANNER + " is set to true");  }  if (logConfig) {    if (!isLoner) {      logger.info(LogMarker.CONFIG,LocalizedMessage.create(LocalizedStrings.InternalDistributedSystem_STARTUP_CONFIGURATIONN_0,config.toLoggerString()));    }  }  return logger;}  }
class C{  public static InitJobInfo parseBean(List<InitJobRowInfo> initJobRowInfos){  Long instanceExecId=null;  Long targetBatchId=null;  Map<Integer,List<Long>> batchMap=new HashMap<Integer,List<Long>>();  Map<Integer,List<String>> markingMap=new HashMap<Integer,List<String>>();  Map<Integer,List<Long>> sourceInstanceExecIdMap=new HashMap<Integer,List<Long>>();  Map<Integer,List<String>> fileListMap=new HashMap<Integer,List<String>>();  Map<Integer,List<String>> batchListMap=new HashMap<Integer,List<String>>();  InitJobInfo initJobInfo=new InitJobInfo();  for (  InitJobRowInfo initJobRowInfo : initJobRowInfos) {    if (instanceExecId == null) {      instanceExecId=initJobRowInfo.getInstanceExecId();    }    if (targetBatchId == null) {      targetBatchId=initJobRowInfo.getTargetBatchId();    }    initJobInfo.setLastRecoverableSpId(initJobRowInfo.getLastRecoverableSpId());    List batchListForSubProcess=batchMap.get(initJobRowInfo.getProcessId());    List markingListForSubProcess=markingMap.get(initJobRowInfo.getProcessId());    List sourceInstanceExecIdListForSubProcess=sourceInstanceExecIdMap.get(initJobRowInfo.getProcessId());    List fileListForSubProcess=fileListMap.get(initJobRowInfo.getProcessId());    List fileBatchListForSubProcess=batchListMap.get(initJobRowInfo.getProcessId());    if (batchListForSubProcess == null) {      batchListForSubProcess=new ArrayList<Long>();    }    if (markingListForSubProcess == null) {      markingListForSubProcess=new ArrayList<Long>();    }    if (sourceInstanceExecIdListForSubProcess == null) {      sourceInstanceExecIdListForSubProcess=new ArrayList<Long>();    }    if (fileListForSubProcess == null) {      fileListForSubProcess=new ArrayList<String>();    }    if (fileBatchListForSubProcess == null) {      fileBatchListForSubProcess=new ArrayList<String>();    }    batchMap.put(initJobRowInfo.getProcessId(),batchListForSubProcess);    markingMap.put(initJobRowInfo.getProcessId(),markingListForSubProcess);    sourceInstanceExecIdMap.put(initJobRowInfo.getProcessId(),sourceInstanceExecIdListForSubProcess);    fileListMap.put(initJobRowInfo.getProcessId(),fileListForSubProcess);    batchListMap.put(initJobRowInfo.getProcessId(),fileBatchListForSubProcess);    batchListForSubProcess.add(initJobRowInfo.getSourceBatchId());    markingListForSubProcess.add(initJobRowInfo.getBatchMarking());    if (initJobRowInfo.getSourceInstanceExecId() != null) {      sourceInstanceExecIdListForSubProcess.add(initJobRowInfo.getSourceInstanceExecId());    }    if (initJobRowInfo.getFileList() != null || "".equals(initJobRowInfo.getFileList())) {      fileListForSubProcess.add(initJobRowInfo.getFileList());      fileBatchListForSubProcess.add(initJobRowInfo.getBatchList());    }  }  initJobInfo.setTargetBatchId(targetBatchId);  initJobInfo.setInstanceExecId(instanceExecId);  for (  Integer subProcessId : batchMap.keySet()) {    List<Long> batchList=batchMap.get(subProcessId);    LOGGER.debug("batchList = " + batchList);    Collections.sort(batchList);    initJobInfo.getMinBatchIdMap().put(subProcessId.toString(),batchList.get(0).toString());    initJobInfo.getMaxBatchIdMap().put(subProcessId.toString(),batchList.get(batchList.size() - 1).toString());  }  Set<String> uniqueMarkingSet=new HashSet<String>();  for (  Integer subProcessId : markingMap.keySet()) {    List<String> markingList=markingMap.get(subProcessId);    List<String> individualMarkingList=new ArrayList<String>();    uniqueMarkingSet.addAll(markingList);    LOGGER.debug("markingList = " + markingList);    if (markingList == null || markingList.isEmpty() || markingList.get(0) == null) {      markingList=new ArrayList<String>();      markingList.add(" ");    }    for (    String marker : markingList) {      String[] tokens=marker.split(",");      for (      String token : tokens) {        if (token != null) {          token=token.replaceAll("^(.+@)","");          individualMarkingList.add(token.trim());        }      }    }    LOGGER.debug("For subprocess id=" + subProcessId + "; individualMarkingList="+ individualMarkingList);    Collections.sort(individualMarkingList);    initJobInfo.getMinBatchMarkingMap().put(subProcessId.toString(),individualMarkingList.get(0).toString());    initJobInfo.getMaxBatchMarkingMap().put(subProcessId.toString(),individualMarkingList.get(individualMarkingList.size() - 1).toString());    initJobInfo.setTargetBatchMarkingSet(uniqueMarkingSet);  }  for (  Integer subProcessId : sourceInstanceExecIdMap.keySet()) {    List<Long> instanceExecIdList=sourceInstanceExecIdMap.get(subProcessId);    LOGGER.debug("instanceExecIdList = " + instanceExecIdList);    if (instanceExecIdList.isEmpty() || instanceExecIdList.get(0) == null || instanceExecIdList.get(instanceExecIdList.size() - 1) == null) {      continue;    }    Collections.sort(instanceExecIdList);    initJobInfo.getMinSourceInstanceExecIdMap().put(subProcessId.toString(),instanceExecIdList.get(0).toString());    initJobInfo.getMaxSourceInstanceExecIdMap().put(subProcessId.toString(),instanceExecIdList.get(instanceExecIdList.size() - 1).toString());  }  for (  Integer subProcessId : fileListMap.keySet()) {    List<String> fileList=fileListMap.get(subProcessId);    LOGGER.debug("fileList = " + fileList + "sub process id= "+ subProcessId);    if (fileList.isEmpty() || fileList.get(0) == null || fileList.get(fileList.size() - 1) == null) {      continue;    }    initJobInfo.getFileListMap().put("FileList." + subProcessId.toString(),fileList.toString().replace("[","").replace("]","").replace(", ",","));  }  for (  Integer subProcessId : batchListMap.keySet()) {    List<String> batchList=batchListMap.get(subProcessId);    LOGGER.debug("filebatchList = " + batchList + "sub process id= "+ subProcessId);    if (batchList.isEmpty() || batchList.get(0) == null || batchList.get(batchList.size() - 1) == null) {      continue;    }    initJobInfo.getBatchListMap().put("FileBatchList." + subProcessId.toString(),batchList.toString().replace("[","").replace("]","").replace(", ",","));  }  return initJobInfo;}  }
class C{  @Override public List<EventObject> retrieveHeadlessEvents(){  return m_headlessEvents;}  }
class C{  public BuildImageParams withDockerfile(String dockerfilePath){  this.dockerfile=dockerfilePath;  return this;}  }
class C{  public static Image createIndexed(int width,int height,int[] palette,byte[] data){  IndexedImage i=new IndexedImage(width,height,palette,data);  CodenameOneImplementation impl=Display.impl;  if (impl.isNativeIndexed()) {    return new Image(impl.createNativeIndexed(i));  }  return i;}  }
class C{  public MultiCopyDisableImageResponse disableImageCopies(MultiCopyDisableImageRequestParams request) throws RecoverPointException {  MultiCopyDisableImageResponse response=new MultiCopyDisableImageResponse();  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  RecoverPointBookmarkManagementUtils bookmarkManager=new RecoverPointBookmarkManagementUtils();  String mgmtIPAddress=_endpoint.toASCIIString();  if (null == mgmtIPAddress) {    throw RecoverPointException.exceptions.noRecoverPointEndpoint();  }  Set<String> wwnSet=request.getVolumeWWNSet();  if (wwnSet == null) {    throw RecoverPointException.exceptions.noWWNsFoundInRequest();  }  Set<String> unmappedWWNs=new HashSet<String>();  CreateBookmarkRequestParams mapRequest=new CreateBookmarkRequestParams();  mapRequest.setVolumeWWNSet(wwnSet);  Map<String,RPConsistencyGroup> rpCGMap=bookmarkManager.mapCGsForWWNs(functionalAPI,mapRequest,unmappedWWNs);  if (!unmappedWWNs.isEmpty()) {    throw RecoverPointException.exceptions.couldNotMapWWNsToAGroup(unmappedWWNs);  }  if (rpCGMap == null) {    throw RecoverPointException.exceptions.couldNotMapWWNsToAGroup(wwnSet);  }  Set<RPConsistencyGroup> cgSetToDisable=new HashSet<RPConsistencyGroup>();  for (  String volume : rpCGMap.keySet()) {    cgSetToDisable.add(rpCGMap.get(volume));  }  for (  RPConsistencyGroup rpcg : cgSetToDisable) {    Set<RPCopy> copies=rpcg.getCopies();    for (    RPCopy copy : copies) {      ConsistencyGroupCopyState copyState=imageManager.getCopyState(functionalAPI,copy.getCGGroupCopyUID());      if (request.getEmName() == null || request.getEmName().isEmpty() || (copyState != null && copyState.getAccessedImage() != null && copyState.getAccessedImage().getDescription() != null && copyState.getAccessedImage().getDescription().equals(request.getEmName()))) {        imageManager.disableCGCopy(functionalAPI,copy.getCGGroupCopyUID());      }    }  }  response.setReturnCode(RecoverPointReturnCode.SUCCESS);  return response;}  }
class C{  private static boolean checkLDAPGroupAttribute(LdapTemplate template,final RootDSE rootDSE,final AuthnProviderParamsToValidate param,StringBuilder errorString){  boolean isValidGroupAttribute=false;  String schemaDN=rootDSE.getSchemaNamingContext();  List<List<String>> groupAttributeLists=searchInLDAPSchema(template,LDAP_SCHEMA_ATTRIBUTE_TYPE_ATTRIBUTE,rootDSE,param.getUrls(),errorString);  if (CollectionUtils.isEmpty(groupAttributeLists)) {    return isValidGroupAttribute;  }  String groupAttributeToValidate=param.getGroupAttr();  for (  List<String> groupAttributeList : groupAttributeLists) {    for (    String groupAttribute : groupAttributeList) {      if (groupAttribute.equalsIgnoreCase(groupAttributeToValidate)) {        isValidGroupAttribute=true;        _log.debug("Found group attribute {} in LDAP schema {}",groupAttributeToValidate,schemaDN);        break;      }    }    if (isValidGroupAttribute) {      break;    }  }  if (!isValidGroupAttribute) {    errorString.append(MessageFormat.format("Could not find group attribute {0} in LDAP schema {1} at {2}",param.getGroupAttr(),schemaDN,param.getUrls().toString()));  }  return isValidGroupAttribute;}  }
class C{  private void createTables() throws ResourceInitializationException {  try (Statement s=postgresResource.getConnection().createStatement()){    s.execute(CREATE_TABLE_PREFIX + getTableName(DOC_ROOT) + " (key serial primary key, externalId character varying, type character varying, source character varying, content character varying, language character varying, processed timestamp, classification character varying, caveats character varying[], releasability character varying[])");    s.execute(CREATE_TABLE_PREFIX + getTableName(DOC_METADATA_ROOT) + " (key serial primary key, doc_key integer references "+ getTableName(DOC_ROOT)+ "(key), name character varying, value character varying)");    s.execute(CREATE_TABLE_PREFIX + getTableName(ENTITY_ROOT) + " (key serial primary key, doc_key integer references "+ getTableName(DOC_ROOT)+ "(key), externalId character varying[], type character varying, value character varying[])");    s.execute(CREATE_TABLE_PREFIX + getTableName(ENTITY_GEO_ROOT) + " (key serial primary key, entity_key integer references "+ getTableName(ENTITY_ROOT)+ "(key), geo geometry(Geometry, 4326))");    postgresResource.getConnection().setAutoCommit(false);  } catch (  SQLException e) {    throw new ResourceInitializationException(e);  }}  }
class C{  public static int computeIndentUnits(String line,int tabWidth,int indentWidth){  return IndentManipulation.measureIndentUnits(line,tabWidth,indentWidth);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col, rows, cols, x, y;  int progress=0;  double z, zN, noData, outputNoData;  int i, n;  int[] dX;  int[] dY;  double[] filterShape;  double[] data;  double largeValue=Float.POSITIVE_INFINITY;  int numPixelsInFilter;  int filterSize, midPoint, lowerQuartile;  boolean performLineThinning=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader=args[0];  outputHeader=args[1];  filterSize=Integer.parseInt(args[2]);  performLineThinning=Boolean.parseBoolean(args[3]);  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    if (Math.floor(filterSize / 2d) == (filterSize / 2d)) {      showFeedback("Filter dimensions must be odd numbers. The specified filter x-dimension" + " has been modified.");      filterSize++;    }    numPixelsInFilter=filterSize * filterSize;    dX=new int[numPixelsInFilter];    dY=new int[numPixelsInFilter];    filterShape=new double[numPixelsInFilter];    midPoint=(int)Math.floor(filterSize / 2);    double aSqr=midPoint * midPoint;    i=0;    for (row=0; row < filterSize; row++) {      for (col=0; col < filterSize; col++) {        dX[i]=col - midPoint;        dY[i]=row - midPoint;        z=(dX[i] * dX[i]) / aSqr + (dY[i] * dY[i]) / aSqr;        if (z > 1) {          filterShape[i]=0;        } else {          filterShape[i]=1;        }        i++;      }    }    WhiteboxRaster DEM=new WhiteboxRaster(inputHeader,"r");    rows=DEM.getNumberRows();    cols=DEM.getNumberColumns();    noData=DEM.getNoDataValue();    outputNoData=-32768;    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.INTEGER,0);    output.setNoDataValue(outputNoData);    output.setPreferredPalette("qual.pal");    output.setDataScale(WhiteboxRaster.DataScale.CATEGORICAL);    output.setZUnits("dimensionless");    for (row=0; row < rows; row++) {      for (col=0; col < cols; col++) {        z=DEM.getValue(row,col);        if (z != noData) {          data=new double[numPixelsInFilter];          n=0;          for (i=0; i < numPixelsInFilter; i++) {            x=col + dX[i];            y=row + dY[i];            zN=DEM.getValue(y,x);            if (zN != noData) {              data[i]=zN;              n++;            } else {              data[i]=largeValue;            }          }          if (n > 0) {            Arrays.sort(data);            lowerQuartile=n / 4;            if (z <= data[lowerQuartile]) {              output.setValue(row,col,1);            }          }        } else {          output.setValue(row,col,outputNoData);        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(int)(100f * row / (rows - 1));      updateProgress(progress);    }    if (performLineThinning) {      long counter=0;      int loopNum=0;      int a;      dX=new int[]{1,1,1,0,-1,-1,-1,0};      dY=new int[]{-1,0,1,1,1,0,-1,-1};      int[][] elements={{6,7,0,4,3,2},{7,0,1,3,5},{0,1,2,4,5,6},{1,2,3,5,7},{2,3,4,6,7,0},{3,4,5,7,1},{4,5,6,0,1,2},{5,6,7,1,3}};      double[][] vals={{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1},{0,0,0,1,1,1},{0,0,0,1,1}};      double[] neighbours=new double[8];      boolean patternMatch=false;      do {        loopNum++;        updateProgress("Loop Number " + loopNum + ":",0);        counter=0;        for (row=0; row < rows; row++) {          for (col=0; col < cols; col++) {            z=output.getValue(row,col);            if (z > 0 && z != noData) {              for (i=0; i < 8; i++) {                neighbours[i]=output.getValue(row + dY[i],col + dX[i]);              }              for (a=0; a < 8; a++) {                patternMatch=true;                for (i=0; i < elements[a].length; i++) {                  if (neighbours[elements[a][i]] != vals[a][i]) {                    patternMatch=false;                  }                }                if (patternMatch) {                  output.setValue(row,col,0);                  counter++;                }              }            }          }          if (cancelOp) {            cancelOperation();            return;          }          progress=(int)(100f * row / (rows - 1));          updateProgress(progress);        }      } while (counter > 0);    }    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    DEM.close();    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @DSSink({DSSinkKind.IO}) @DSSpec(DSCat.IO) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:45.264 -0500",hash_original_method="9F118A4D5206A4234B8C15F22340D26C",hash_generated_method="BC3F06DA4ACE3228AF29A037952DAF6A") public final void writeBoolean(boolean val) throws IOException {  write(val ? 1 : 0);}  }
class C{  private void markSubroutines(){  BitSet anyvisited=new BitSet();  markSubroutineWalk(mainSubroutine,0,anyvisited);  for (Iterator<Map.Entry<LabelNode,BitSet>> it=subroutineHeads.entrySet().iterator(); it.hasNext(); ) {    Map.Entry<LabelNode,BitSet> entry=it.next();    LabelNode lab=entry.getKey();    BitSet sub=entry.getValue();    int index=instructions.indexOf(lab);    markSubroutineWalk(sub,index,anyvisited);  }}  }
class C{  public void switchToRelease(final String releaseVersion){  int idx=contentFolder.lastIndexOf("/");  contentFolder=Paths.get(contentFolder.substring(0,idx),releaseVersion);  wwwFolder=null;  downloadFolder=null;}  }
class C{  public boolean isGcsPatternSupported(String gcsPattern){  if (RECURSIVE_GCS_PATTERN.matcher(gcsPattern).matches()) {    throw new IllegalArgumentException("Unsupported wildcard usage in \"" + gcsPattern + "\": "+ " recursive wildcards are not supported.");  }  return true;}  }
class C{  public void stop(){  workerThread.interrupt();}  }
class C{  protected void uninstallDefaults(){  if (splitPane.getLayout() == layoutManager) {    splitPane.setLayout(null);  }  if (nonContinuousLayoutDivider != null) {    splitPane.remove(nonContinuousLayoutDivider);  }  LookAndFeel.uninstallBorder(splitPane);  Border b=divider.getBorder();  if (b instanceof UIResource) {    divider.setBorder(null);  }  splitPane.remove(divider);  divider.setBasicSplitPaneUI(null);  layoutManager=null;  divider=null;  nonContinuousLayoutDivider=null;  setNonContinuousLayoutDivider(null);  splitPane.setFocusTraversalKeys(KeyboardFocusManager.FORWARD_TRAVERSAL_KEYS,null);  splitPane.setFocusTraversalKeys(KeyboardFocusManager.BACKWARD_TRAVERSAL_KEYS,null);}  }
class C{  public static DAOGroup newInstance(){  final DAOGroup returnInstance=new DAOGroup();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  String lang=m_arg0.execute(xctxt).str();  int parent=xctxt.getCurrentNode();  boolean isLang=false;  DTM dtm=xctxt.getDTM(parent);  while (DTM.NULL != parent) {    if (DTM.ELEMENT_NODE == dtm.getNodeType(parent)) {      int langAttr=dtm.getAttributeNode(parent,"http://www.w3.org/XML/1998/namespace","lang");      if (DTM.NULL != langAttr) {        String langVal=dtm.getNodeValue(langAttr);        if (langVal.toLowerCase().startsWith(lang.toLowerCase())) {          int valLen=lang.length();          if ((langVal.length() == valLen) || (langVal.charAt(valLen) == '-')) {            isLang=true;          }        }        break;      }    }    parent=dtm.getParent(parent);  }  return isLang ? XBoolean.S_TRUE : XBoolean.S_FALSE;}  }
class C{  public int y(double lat){  return (int)Math.round(dotsPerDeg * (originLat - lat));}  }
class C{  static void shape(Object shaper,char[] text,int start,int count){  if (shapeMethod == null)   throw new AssertionError("Should not get here");  try {    shapeMethod.invoke(shaper,text,start,count);  } catch (  InvocationTargetException e) {    Throwable cause=e.getCause();    if (cause instanceof RuntimeException)     throw (RuntimeException)cause;    throw new AssertionError(e);  }catch (  IllegalAccessException iae) {    throw new AssertionError(iae);  }}  }
class C{  private int sp2px(float spValue){  final float fontScale=mContext.getResources().getDisplayMetrics().scaledDensity;  return (int)(spValue * fontScale + 0.5f);}  }
class C{  public void createDatabaseEntitiesForStorageUnitNotificationRegistrationTesting(String namespace,List<String> notificationEventTypes,String businessObjectDefinitionNamespace,String businessObjectDefinitionName,List<String> fileTypes,List<String> storageNames,List<String> storageUnitStatuses,List<JobAction> jobActions){  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(namespace);  if (namespaceEntity == null) {    namespaceDaoTestHelper.createNamespaceEntity(namespace);  }  if (!CollectionUtils.isEmpty(notificationEventTypes)) {    for (    String notificationEventType : notificationEventTypes) {      NotificationEventTypeEntity notificationEventTypeEntity=notificationEventTypeDao.getNotificationEventTypeByCode(notificationEventType);      if (notificationEventTypeEntity == null) {        notificationRegistrationDaoTestHelper.createNotificationEventTypeEntity(notificationEventType);      }    }  }  BusinessObjectDefinitionEntity businessObjectDefinitionEntity=businessObjectDefinitionDao.getBusinessObjectDefinitionByKey(new BusinessObjectDefinitionKey(businessObjectDefinitionNamespace,businessObjectDefinitionName));  if (businessObjectDefinitionEntity == null) {    businessObjectDefinitionDaoTestHelper.createBusinessObjectDefinitionEntity(businessObjectDefinitionNamespace,businessObjectDefinitionName,AbstractServiceTest.DATA_PROVIDER_NAME,AbstractServiceTest.BDEF_DESCRIPTION);  }  if (!CollectionUtils.isEmpty(fileTypes)) {    for (    String businessObjectFormatFileType : fileTypes) {      fileTypeDaoTestHelper.createFileTypeEntity(businessObjectFormatFileType);    }  }  if (!CollectionUtils.isEmpty(storageNames)) {    for (    String storageName : storageNames) {      storageDaoTestHelper.createStorageEntity(storageName,StoragePlatformEntity.S3);    }  }  if (!CollectionUtils.isEmpty(storageUnitStatuses)) {    for (    String storageUnitStatus : storageUnitStatuses) {      StorageUnitStatusEntity storageUnitStatusEntity=storageUnitStatusDao.getStorageUnitStatusByCode(storageUnitStatus);      if (storageUnitStatusEntity == null) {        storageUnitStatusDaoTestHelper.createStorageUnitStatusEntity(storageUnitStatus);      }    }  }  if (!CollectionUtils.isEmpty(jobActions)) {    for (    JobAction jobAction : jobActions) {      jobDefinitionDaoTestHelper.createJobDefinitionEntity(jobAction.getNamespace(),jobAction.getJobName(),String.format("Description of \"%s.%s\" job definition.",jobAction.getNamespace(),jobAction.getJobName()),String.format("%s.%s.%s",jobAction.getNamespace(),jobAction.getJobName(),AbstractServiceTest.ACTIVITI_ID));    }  }}  }
class C{  public boolean isSelected(){  return true;}  }
class C{  public static BufferedImage createCompatibleImage(int width,int height){  return getGraphicsConfiguration().createCompatibleImage(width,height);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case NODE_ID:    return isSetNodeId();case VERSION:  return isSetVersion();}throw new IllegalStateException();}  }
class C{  void log(int mapId,Object key,Object oldValue){  store.log(this,logId,mapId,key,oldValue);  logId++;}  }
class C{  public void checkForDisallowedDefaults(){  if (Boolean.getBoolean(DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults")) {    if (getMcastPort() != 0) {      if (getMcastAddress().equals(DistributionConfig.DEFAULT_MCAST_ADDRESS) && getMcastPort() == DistributionConfig.DEFAULT_MCAST_PORT) {        throw new IllegalStateException(DistributionConfig.GEMFIRE_PREFIX + "disallowMcastDefaults set and default address and port are being used");      }    }  }}  }
class C{  public boolean checkMinDistIsZero(char[] a,char[] b){  for (int i=0; i < a.length; i++) {    if (charDistance(a[i],b[i]) > 1) {      return false;    }  }  return true;}  }
class C{  public DrawerBuilder withHeader(@LayoutRes int headerViewRes){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (headerViewRes != -1) {    this.mHeaderView=mActivity.getLayoutInflater().inflate(headerViewRes,null,false);  }  return this;}  }
class C{  public TextWrap(float width){  this(width,0);}  }
class C{  public NtlmPasswordAuthentication(String domain,String username,String password){  int ci;  if (username != null) {    ci=username.indexOf('@');    if (ci > 0) {      domain=username.substring(ci + 1);      username=username.substring(0,ci);    } else {      ci=username.indexOf('\\');      if (ci > 0) {        domain=username.substring(0,ci);        username=username.substring(ci + 1);      }    }  }  this.domain=domain;  this.username=username;  this.password=password;  initDefaults();  if (domain == null)   this.domain=DEFAULT_DOMAIN;  if (username == null)   this.username=DEFAULT_USERNAME;  if (password == null)   this.password=DEFAULT_PASSWORD;}  }
class C{  public B execThreads(final int execThreads){  mExecThreads=execThreads;  return self();}  }
class C{  public void optimize(TupleExpr tupleExpr,Dataset dataset,BindingSet bindings){  tupleExpr.visit(new JoinVisitor());}  }
class C{  Account(int id,double balance){  name="";  this.id=id;  this.balance=balance;  dateCreated=new Date();  transactions=new ArrayList<Transaction>();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:01.731 -0500",hash_original_method="C8C1F446DBB41359AB2C72DE65947E17",hash_generated_method="87AB1F2A75B0DA527C4EB5550803BD97") @DSVerified @DSSafe(DSCat.SAFE_OTHERS) public static boolean isPositiveIntermediate(int reply){  return (reply >= 300 && reply < 400);}  }
class C{  public boolean isGroupChatInviteIfFullStoreForwardSupported(){  return readBoolean(RcsSettingsData.GROUP_CHAT_INVITE_ONLY_FULL_SF);}  }
class C{  public void loadLocal(final int local,final Type type){  setLocalType(local,type);  loadInsn(type,local);}  }
class C{  public Move(int from,int to,int promoteTo){  this.from=from;  this.to=to;  this.promoteTo=promoteTo;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public synchronized void close(){  open=false;}  }
class C{  public static double[] parseCoordinates(@NonNull String str){  double[] coordinates;  if (str.contains(",")) {    String[] rawCoords=str.split(",");    coordinates=new double[rawCoords.length];    for (int i=0; i < rawCoords.length; i++) {      if (!Numbers.isNumber(rawCoords[i].trim())) {        return null;      }      coordinates[i]=Numbers.parseDouble(rawCoords[i].trim());    }  } else {    if (!Numbers.isDecimal(str.trim())) {      return null;    }    coordinates=new double[1];    coordinates[0]=Numbers.parseDouble(str.trim());  }  return coordinates;}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:27.183 -0500",hash_original_method="954FE01203E8E0B89D8DDB8D29119B01",hash_generated_method="EC6AADF753D5966CC946C3ECD22E2424") public void put(int key,E value){  int i=binarySearch(mKeys,0,mSize,key);  if (i >= 0) {    mValues[i]=value;  } else {    i=~i;    if (i < mSize && mValues[i] == DELETED) {      mKeys[i]=key;      mValues[i]=value;      return;    }    if (mGarbage && mSize >= mKeys.length) {      gc();      i=~binarySearch(mKeys,0,mSize,key);    }    if (mSize >= mKeys.length) {      int n=idealIntArraySize(mSize + 1);      int[] nkeys=new int[n];      Object[] nvalues=new Object[n];      System.arraycopy(mKeys,0,nkeys,0,mKeys.length);      System.arraycopy(mValues,0,nvalues,0,mValues.length);      mKeys=nkeys;      mValues=nvalues;    }    if (mSize - i != 0) {      System.arraycopy(mKeys,i,mKeys,i + 1,mSize - i);      System.arraycopy(mValues,i,mValues,i + 1,mSize - i);    }    mKeys[i]=key;    mValues[i]=value;    mSize++;  }}  }
class C{  @Override public void encrypt(long[] buffer){  int nLen=buffer.length;  for (int nI=0; nI < nLen; nI++) {    buffer[nI]=encryptBlock(buffer[nI]);  }  ;}  }
class C{  @Override protected final Object createAttribute(String attributeName,MethodParameter methodParam,WebDataBinderFactory binderFactory,NativeWebRequest request) throws Exception {  String value=getRequestValueForAttribute(attributeName,request);  if (value != null) {    Object attribute=createAttributeFromRequestValue(value,attributeName,methodParam,binderFactory,request);    if (attribute != null) {      return attribute;    }  } else {    Class<?> parameterType=methodParam.getParameterType();    if (ClassUtils.isAssignable(BaseEntity.class,parameterType)) {      String id=request.getParameter("id");      if (!Strings.isNullOrEmpty(id)) {        return conversionService.convert(id,methodParam.getParameterType());      } else {        return entityService.getService(parameterType).newEntity();      }    }  }  return super.createAttribute(attributeName,methodParam,binderFactory,request);}  }
class C{  public final int readUShort(){  int ch1=read() & 0xFF;  int ch2=read() & 0xFF;  return (ch1 << 8) + (ch2 << 0);}  }
class C{  protected int decryptBlock(byte[] src,int srcIndex,byte[] dst,int dstIndex){  int result[]=new int[2];  int L16=BytesTo32bits(src,srcIndex);  int R16=BytesTo32bits(src,srcIndex + 4);  CAST_Decipher(L16,R16,result);  Bits32ToBytes(result[0],dst,dstIndex);  Bits32ToBytes(result[1],dst,dstIndex + 4);  return BLOCK_SIZE;}  }
class C{  private void compareIndexes() throws SQLException {  final Vector<String> indexNamesDB1=new Vector<String>();  final Vector<String> indexNamesDB2=new Vector<String>();  String sql="select index_name, uniqueness, table_name from user_indexes " + " where index_type='NORMAL' and index_name not like 'SYS_%' and index_name not like 'BIN$%'";  ResultSet rs=stmtdb1.executeQuery(sql);  while (rs.next()) {    indexNamesDB1.add(rs.getString("INDEX_NAME"));  }  rs.close();  rs=stmtdb2.executeQuery(sql);  while (rs.next()) {    indexNamesDB2.add(rs.getString("INDEX_NAME"));  }  rs.close();  final Vector<String> newIndexes=getNewElements(indexNamesDB1,indexNamesDB2);  for (int i=0; i < newIndexes.size(); i++) {    if (!newIndexes.get(i).endsWith("KEY")) {      createNewIndexEntry(newIndexes.get(i));    }  }  final Vector<String> missingIndexes=getMissingElements(indexNamesDB1,indexNamesDB2);  for (int i=0; i < missingIndexes.size(); i++) {    if (!missingIndexes.get(i).endsWith("KEY")) {      m_dropIndexStatements.add("DROP INDEX " + missingIndexes.get(i) + ";");    }  }  for (int i=0; i < indexNamesDB2.size(); i++) {    if (indexNamesDB1.contains(indexNamesDB2.get(i))) {      final Vector<String> columnNames1=new Vector<String>();      final Vector<String> columnNames2=new Vector<String>();      sql="select column_name from user_ind_columns where index_name='" + indexNamesDB2.get(i) + "' order by column_position";      rs=stmtdb1.executeQuery(sql);      while (rs.next()) {        columnNames1.add(rs.getString("COLUMN_NAME"));      }      rs.close();      rs=stmtdb2.executeQuery(sql);      while (rs.next()) {        columnNames2.add(rs.getString("COLUMN_NAME"));      }      rs.close();      if (columnNames1.size() != columnNames2.size()) {        if (!indexNamesDB2.get(i).endsWith("KEY")) {          m_dropIndexStatements.add("DROP INDEX " + indexNamesDB2.get(i) + ";");          createNewIndexEntry(indexNamesDB2.get(i));        }      }    }  }}  }
class C{  private static float CallNonvirtualFloatMethodV(JNIEnvironment env,int objJREF,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualFloatMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithVarArg(obj,methodID,argAddress,TypeReference.Float,true);    return Reflection.unwrapFloat(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  public BoundaryPixel8Edge(ImagePoint point,int imageWidth,int imageHeight,boolean clockwise,HashMap<String,ImagePoint> imagePoints){  super(point,imageWidth,imageHeight);  this.clockwise=clockwise;  this.nextEdge=LEFT_EDGE;  this.currentEdge=NO_EDGE;  this.imagePoints=imagePoints;}  }
class C{  void resetRepaintTimer(){  if (repaintTimerTask == null)   return;  if (allResumeTime < 0)   return;  if (repaintTriggerTimer == null)   repaintTriggerTimer=new Timer(true);  long delay=allResumeTime - System.currentTimeMillis();  if (delay < 0)   delay=0;  repaintTimerTask=new RepaintTimerTask(this);  repaintTriggerTimer.schedule(repaintTimerTask,delay);}  }
class C{  @Override protected EClass eStaticClass(){  return SexecPackage.Literals.TRACE_END_RUN_CYCLE;}  }
class C{  public static JSONArray array(Float... values){  if (values == null) {    throw new NullPointerException("values is null");  }  JSONArray array=new JSONArray();  for (  float value : values) {    array.add(value);  }  return array;}  }
class C{  static void printMethodRefs(ClassRef[] classes){  out.println("\nMethods:");  for (int i=0; i < classes.length; i++) {    MethodRef[] methods=classes[i].getMethodArray();    for (int j=0; j < methods.length; j++) {      MethodRef ref=methods[j];      out.println(descriptorToDot(ref.getDeclClassName()) + "." + ref.getName()+ " : "+ ref.getDescriptor());    }  }}  }
class C{  public static boolean checkJTSFootprint(String footprint){  try {    WKTReader wkt=new WKTReader();    Geometry geom=wkt.read(footprint);    IsValidOp vaildOp=new IsValidOp(geom);    TopologyValidationError err=vaildOp.getValidationError();    if (err != null) {      throw new IllegalParameterException(err.getMessage());    }    return true;  } catch (  Exception e) {    logger.error("JTS Footprint error : " + e.getMessage());    return false;  }}  }
class C{  @Override public boolean equals(Object o){  if (!(o instanceof Rule)) {    return false;  }  Rule otherRule=(Rule)o;  if (otherRule.literals.length != this.literals.length) {    return false;  }  if (otherRule.prediction != this.prediction) {    return false;  }  boolean result=true;  for (int i=0; i < this.literals.length; i++) {    if (!(this.literals[i].equals(otherRule.literals[i]))) {      result=false;      break;    }  }  return result;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:13.443 -0500",hash_original_method="9B394B4CCC83FB2B8DCA345D732654D8",hash_generated_method="817653ACEE23234CBFBBD53F68C3A2D9") public void writeUint64(long n){  check(8);  buffer[write_pos++]=(byte)((n & 0x00ff00000000000000L) >> 56);  buffer[write_pos++]=(byte)((n & 0x00ff000000000000L) >> 48);  buffer[write_pos++]=(byte)((n & 0x00ff0000000000L) >> 40);  buffer[write_pos++]=(byte)((n & 0x00ff00000000L) >> 32);  buffer[write_pos++]=(byte)((n & 0x00ff000000) >> 24);  buffer[write_pos++]=(byte)((n & 0x00ff0000) >> 16);  buffer[write_pos++]=(byte)((n & 0x00ff00) >> 8);  buffer[write_pos++]=(byte)(n & 0x00ff);}  }
class C{  public WritableRaster createWritableChild(int x,int y,int width,int height,int x0,int y0,int[] bandList){  if (x < this.minX) {    throw new RasterFormatException("x lies outside the raster");  }  if (y < this.minY) {    throw new RasterFormatException("y lies outside the raster");  }  if ((x + width < x) || (x + width > this.minX + this.width)) {    throw new RasterFormatException("(x + width) is outside of Raster");  }  if ((y + height < y) || (y + height > this.minY + this.height)) {    throw new RasterFormatException("(y + height) is outside of Raster");  }  SampleModel sm;  if (bandList != null)   sm=sampleModel.createSubsetSampleModel(bandList); else   sm=sampleModel;  int deltaX=x0 - x;  int deltaY=y0 - y;  return new ByteInterleavedRaster(sm,dataBuffer,new Rectangle(x0,y0,width,height),new Point(sampleModelTranslateX + deltaX,sampleModelTranslateY + deltaY),this);}  }
class C{  public AbstractPointRenderer(){  shape=new Rectangle2D.Double(-2.5,-2.5,5.0,5.0);  color=new SingleColor(Color.BLACK);  valueVisible=false;  valueColumn=1;  valueLocation=Location.CENTER;  valueAlignmentX=0.5;  valueAlignmentY=0.5;  valueRotation=0.0;  valueDistance=1.0;  valueColor=new SingleColor(Color.BLACK);  valueFont=Font.decode(null);  errorVisible=false;  errorColumnTop=2;  errorColumnBottom=3;  errorColor=new SingleColor(Color.BLACK);  errorShape=new Line2D.Double(-2.0,0.0,2.0,0.0);  errorStroke=new BasicStroke(1f);}  }
class C{  public static Color toSwtColor(final Device device,final java.awt.Color color){  return new org.eclipse.swt.graphics.Color(device,color.getRed(),color.getGreen(),color.getBlue());}  }
class C{  public MappingFactoryImpl(){  super();}  }
class C{  private SqlUtil(){  instanceNotAllowed(getClass());}  }
class C{  protected void sequence_TAnonymousFormalParameter(ISerializationContext context,TAnonymousFormalParameter semanticObject){  genericSequencer.createSequence(context,semanticObject);}  }
class C{  private List<URI> checkAndFilterAddVarrays(Network network,Collection<String> varrays){  List<URI> addedVarray=new ArrayList<URI>();  URI uri=null;  for (  String strUri : varrays) {    if (network.getAssignedVirtualArrays() == null || !network.getAssignedVirtualArrays().contains(strUri.toString())) {      uri=URI.create(strUri);      queryObject(VirtualArray.class,uri,true);      addedVarray.add(uri);    }  }  return addedVarray;}  }
class C{  public static final short tertiaryOrder(int order){  return (short)CollationElementIteratorICU.tertiaryOrder(order);}  }
class C{  public static void doDummyData(CandleSeries series,Tradingday start,int noDays,int barSize,boolean longTrade,int milliSecondsDeplay){  double high=33.98;  double low=33.84;  double open=33.90;  double close=33.95;  double vwap=34.94;  int longShort=1;  if (!longTrade) {    high=34.15;    low=34.01;    open=34.10;    close=34.03;    vwap=34.02;    longShort=-1;  }  long volume=100000;  int tradeCount=100;  if (barSize == 1) {    barSize=(int)TradingCalendar.getDurationInSeconds(start.getOpen(),start.getClose());  }  long count=(TradingCalendar.getDurationInSeconds(start.getOpen(),start.getClose()) / barSize) * noDays;  RegularTimePeriod period=new CandlePeriod(start.getOpen(),barSize);  series.clear();  for (int i=0; i < count; i++) {    series.buildCandle(period.getStart(),open,high,low,close,volume,vwap,tradeCount,1,null);    high=high + (0.02 * longShort);    low=low + (0.02 * longShort);    open=open + (0.02 * longShort);    close=close + (0.02 * longShort);    vwap=vwap + (0.02 * longShort);    period=period.next();    if (period.getStart().equals(start.getClose())) {      period=new CandlePeriod(TradingCalendar.getTradingDayStart(TradingCalendar.getNextTradingDay(period.getStart())),barSize);    }    try {      if (milliSecondsDeplay > 0)       Thread.sleep(milliSecondsDeplay);    } catch (    InterruptedException e) {      _log.error(" Thread interupt: " + e.getMessage());    }  }}  }
class C{  private void updateWeatherSound(String sound){  if (!Objects.equals(sound,soundName)) {    if (currentSound != null) {      ClientSingletonRepository.getSound().stop(currentSound,fadeOutDuration);      currentSound=null;    }    soundName=sound;    if (sound != null) {      SoundGroup group=ClientSingletonRepository.getSound().getGroup(SoundLayer.AMBIENT_SOUND.groupName);      if (group.loadSound(sound,SOUND_LOCATION + sound + ".ogg",SoundFileType.OGG,true)) {        AudibleArea area=new InfiniteAudibleArea();        currentSound=group.play(sound,0,area,fadeInDuration,true,false);      }    }  }}  }
class C{  public AttributeInfo copy(ConstPool newCp,Map classnames){  BootstrapMethod[] methods=getMethods();  ConstPool thisCp=getConstPool();  for (int i=0; i < methods.length; i++) {    BootstrapMethod m=methods[i];    m.methodRef=thisCp.copy(m.methodRef,newCp,classnames);    for (int k=0; k < m.arguments.length; k++)     m.arguments[k]=thisCp.copy(m.arguments[k],newCp,classnames);  }  return new BootstrapMethodsAttribute(newCp,methods);}  }
class C{  public static final int readLittleEndian(byte[] data,int pos,int size){  int retVal=0;  int shifter=0;  while (size > 0) {    retVal+=(data[pos] & 0xff) << shifter;    shifter+=8;    pos++;    size--;  }  return retVal;}  }
class C{  @Interruptible public int generateGCMapEntry(GCIRMapElement irMapElem){  int mapIndex=NO_MAP_ENTRY;  List<RegSpillListElement> regSpillList=irMapElem.regSpillList();  if (!regSpillList.isEmpty()) {    int bitMap=0;    int numSpills=0;    int numRegs=0;    for (    RegSpillListElement elem : regSpillList) {      if (elem.isSpill()) {        numSpills++;      } else {        numRegs++;        int realRegNumber=elem.getRealRegNumber();        if (VM.VerifyAssertions && realRegNumber > LAST_GCMAP_REG) {          System.out.println(elem);          System.out.println(LAST_GCMAP_REG);          VM._assert(VM.NOT_REACHED,"reg > last GC Map Reg!!");        }        int bitPosition=getRegBitPosition(realRegNumber);        bitMap=bitMap | (NEXT_BIT >>> bitPosition);      }    }    int index=setRegisterBitMap(bitMap);    int[] spillArray=new int[numSpills];    int spillIndex=0;    for (    RegSpillListElement elem : regSpillList) {      if (elem.isSpill()) {        spillArray[spillIndex++]=elem.getSpill();      }    }    addAllSpills(spillArray);    mapIndex=endCurrentMap(index);  }  return mapIndex;}  }
class C{  public boolean equals(Object o){  if (o == this)   return true;  if (!(o instanceof MBeanParameterInfo))   return false;  MBeanParameterInfo p=(MBeanParameterInfo)o;  return (Objects.equals(p.getName(),getName()) && Objects.equals(p.getType(),getType()) && Objects.equals(p.getDescription(),getDescription())&& Objects.equals(p.getDescriptor(),getDescriptor()));}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void addEventListener2(IOneToOneChatListener listener) throws RemoteException {  if (listener == null) {    throw new ServerApiIllegalArgumentException("listener must not be null!");  }  try {synchronized (mLock) {      mOneToOneChatEventBroadcaster.addOneToOneChatEventListener(listener);    }  } catch (  ServerApiBaseException e) {    if (!e.shouldNotBeLogged()) {      sLogger.error(ExceptionUtil.getFullStackTrace(e));    }    throw e;  }catch (  Exception e) {    sLogger.error(ExceptionUtil.getFullStackTrace(e));    throw new ServerApiGenericException(e);  }}  }
class C{  public static void scheduleUpdateCheckTask(int secondsAfter){  scheduleUpdateCheckTask(secondsAfter,false);}  }
class C{  public IntegerVector(int[] values){  this.values=values.clone();}  }
class C{  public ImageIcon(byte[] imageData,String description){  this.image=Toolkit.getDefaultToolkit().createImage(imageData);  if (image == null) {    return;  }  this.description=description;  loadImage(image);}  }
class C{  private Automaton transpositionsOf(String s){  if (s.length() < 2) {    return Automata.makeEmpty();  }  List<Automaton> list=new ArrayList<>();  for (int i=0; i < s.length() - 1; i++) {    StringBuilder sb=new StringBuilder();    sb.append(s.substring(0,i));    sb.append(s.charAt(i + 1));    sb.append(s.charAt(i));    sb.append(s.substring(i + 2,s.length()));    String st=sb.toString();    if (!st.equals(s)) {      list.add(Automata.makeString(st));    }  }  Automaton a=Operations.union(list);  a=MinimizationOperations.minimize(a,DEFAULT_MAX_DETERMINIZED_STATES);  return a;}  }
class C{  public ExtensionFileFilter(String description,String[] extensions){  this.description=description;  this.extensions=new HashSet<String>();  String[] extlc=new String[extensions.length];  for (int i=0; i < extlc.length; i++) {    extlc[i]=extensions[i].toLowerCase();  }  this.extensions.addAll(Arrays.asList(extlc));  defaultExtension=extensions[0];}  }
class C{  private void assertConnectionIsClosed(){  if (conn != null) {    throw new IllegalStateException("Previous connection is not closed.");  }}  }
class C{  public BinaryAnnotationMappingStorage(){  String jbossConfigDir=System.getProperties().getProperty("jboss.server.config.dir");  if (jbossConfigDir == null) {    log.errorf("Property jboss.server.config.dir is not set, Binary Annotation mapping rules set to empty");    keyBasedMappings=Collections.emptyMap();    return;  }  String path=System.getProperty("jboss.server.config.dir") + File.separatorChar + HAWKULAR_ZIPKIN_BINARY_ANNOTATION_MAPPING;  loadMappings(path);}  }
class C{  public float remove(int index){  if (index < 0 || index >= count) {    throw new ArrayIndexOutOfBoundsException(index);  }  float entry=data[index];  for (int i=index; i < count - 1; i++) {    data[i]=data[i + 1];  }  count--;  return entry;}  }
class C{  private boolean calculateBPL(){  if (m_M_Product_ID == 0 || m_M_PriceList_ID == 0)   return false;  String sql="SELECT bomPriceStd(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceStd," + " bomPriceList(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceList," + " bomPriceLimit(p.M_Product_ID,pv.M_PriceList_Version_ID) AS PriceLimit,"+ " p.C_UOM_ID,pv.ValidFrom,pl.C_Currency_ID,p.M_Product_Category_ID,"+ " pl.EnforcePriceLimit, pl.IsTaxIncluded "+ "FROM M_Product p"+ " INNER JOIN M_ProductPrice pp ON (p.M_Product_ID=pp.M_Product_ID)"+ " INNER JOIN  M_PriceList_Version pv ON (pp.M_PriceList_Version_ID=pv.M_PriceList_Version_ID)"+ " INNER JOIN M_Pricelist bpl ON (pv.M_PriceList_ID=bpl.M_PriceList_ID)"+ " INNER JOIN M_Pricelist pl ON (bpl.M_PriceList_ID=pl.BasePriceList_ID) "+ "WHERE pv.IsActive='Y'"+ " AND pp.IsActive='Y'"+ " AND p.M_Product_ID=?"+ " AND pl.M_PriceList_ID=?"+ " ORDER BY pv.ValidFrom DESC";  m_calculated=false;  if (m_PriceDate == null)   m_PriceDate=new Timestamp(System.currentTimeMillis());  PreparedStatement pstmt=null;  ResultSet rs=null;  try {    pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,m_M_Product_ID);    pstmt.setInt(2,m_M_PriceList_ID);    rs=pstmt.executeQuery();    while (!m_calculated && rs.next()) {      Timestamp plDate=rs.getTimestamp(5);      if (plDate == null || !m_PriceDate.before(plDate)) {        m_PriceStd=rs.getBigDecimal(1);        if (rs.wasNull())         m_PriceStd=Env.ZERO;        m_PriceList=rs.getBigDecimal(2);        if (rs.wasNull())         m_PriceList=Env.ZERO;        m_PriceLimit=rs.getBigDecimal(3);        if (rs.wasNull())         m_PriceLimit=Env.ZERO;        m_C_UOM_ID=rs.getInt(4);        m_C_Currency_ID=rs.getInt(6);        m_M_Product_Category_ID=rs.getInt(7);        m_enforcePriceLimit="Y".equals(rs.getString(8));        m_isTaxIncluded="Y".equals(rs.getString(9));        log.fine("M_PriceList_ID=" + m_M_PriceList_ID + "("+ plDate+ ")"+ " - "+ m_PriceStd);        m_calculated=true;        break;      }    }  } catch (  Exception e) {    log.log(Level.SEVERE,sql,e);    m_calculated=false;  } finally {    DB.close(rs,pstmt);    rs=null;    pstmt=null;  }  if (!m_calculated)   log.finer("Not found (BPL)");  return m_calculated;}  }
class C{  @Override public void startIteration() throws AdeException {  if (m_trained) {    throw new AdeInternalException("Already trained");  }  m_msgData=new TreeMap<String,MsgData>();  m_totalIntervalCount=0;  m_minLambda=1.0;}  }
class C{  private void exportNodesToShape(String outputFolder){  SimpleFeatureTypeBuilder typeBuilder=new SimpleFeatureTypeBuilder();  typeBuilder.setName("node");  typeBuilder.add("location",Point.class);  typeBuilder.add("ID",String.class);  typeBuilder.add("type",String.class);  typeBuilder.setCRS(MGC.getCRS(this.targetCoordinateSystem));  this.builder=new SimpleFeatureBuilder(typeBuilder.buildFeatureType());  Collection<SimpleFeature> features=new ArrayList<SimpleFeature>();  for (  String nodeType : this.nodeTypes.keySet()) {    for (    Id nodeId : this.nodeTypes.get(nodeType)) {      Point p=MGC.coord2Point(this.network.getNodes().get(nodeId).getCoord());      features.add(this.builder.buildFeature(null,new Object[]{p,nodeId.toString(),nodeType}));    }  }  String destination="";  if (features.size() > 0) {    destination="nodeTypes";    this.filesForExportInQGisProject.put(destination,Point.class);    ShapeFileWriter.writeGeometries(features,outputFolder + destination + this.SHPfile);  }  if (!(this.nodesWithHighDegrees.size() < 1)) {    features.clear();    typeBuilder.setName("node");    typeBuilder.add("location",Point.class);    typeBuilder.add("ID",String.class);    typeBuilder.add("in-degree",Integer.class);    typeBuilder.add("out-degree",Integer.class);    typeBuilder.setCRS(MGC.getCRS(this.targetCoordinateSystem));    this.builder=new SimpleFeatureBuilder(typeBuilder.buildFeatureType());    for (    Id nodeId : this.nodesWithHighDegrees) {      Point p=MGC.coord2Point(this.network.getNodes().get(nodeId).getCoord());      features.add(this.builder.buildFeature(null,new Object[]{p,nodeId.toString(),this.network.getNodes().get(nodeId).getInLinks().size(),this.network.getNodes().get(nodeId).getOutLinks().size()}));    }    destination="highDegreeNodes";    this.filesForExportInQGisProject.put(destination,Point.class);    ShapeFileWriter.writeGeometries(features,outputFolder + destination + this.SHPfile);  }}  }
class C{  public static boolean isSupportedSRDFVolumeVirtualPoolChange(Volume volume,VirtualPool currentVpool,VirtualPool newVpool,DbClient dbClient,StringBuffer notSuppReasonBuff){  s_logger.info(String.format("Checking isSupportedSRDFVolumeVirtualPoolChange from [%s] to [%s]...",currentVpool.getLabel(),newVpool.getLabel()));  URI storageDeviceURI=volume.getStorageController();  StorageSystem storageSystem=dbClient.queryObject(StorageSystem.class,storageDeviceURI);  if (!(DiscoveredDataObject.Type.vmax.name().equals(storageSystem.getSystemType()))) {    notSuppReasonBuff.append("Volume is not VMAX volume.");    return false;  }  if (isSameVirtualPool(currentVpool,newVpool,notSuppReasonBuff)) {    return false;  }  String[] include=new String[]{TYPE,VARRAYS,REF_VPOOL,MIRROR_VPOOL,HIGH_AVAILABILITY,PROTECTION_VARRAY_SETTINGS,FAST_EXPANSION,ACLS,INACTIVE,NUM_PATHS,PATHS_PER_INITIATOR,MIN_PATHS,AUTO_TIER_POLICY_NAME,HOST_IO_LIMIT_BANDWIDTH,HOST_IO_LIMIT_IOPS,VMAX_COMPRESSION_ENABLED};  Map<String,Change> changes=analyzeChanges(currentVpool,newVpool,include,null,null);  if (!changes.isEmpty()) {    notSuppReasonBuff.append("These target virtual pool differences are invalid: ");    fillInNotSupportedReasons(changes,notSuppReasonBuff);    s_logger.info("Virtual Pool change not supported: {}",notSuppReasonBuff.toString());    return false;  }  include=new String[]{REMOTECOPY_VARRAY_SETTINGS};  changes=analyzeChanges(currentVpool,newVpool,include,null,null);  if (changes.isEmpty()) {    notSuppReasonBuff.append("These target virtual pool differences are required: ");    fillInNotSupportedReasons(changes,notSuppReasonBuff);    return false;  }  return true;}  }
class C{  private boolean isValidImage(File screenshotFile){  Bitmap b=BitmapFactory.decodeFile(screenshotFile.getAbsolutePath());  return b != null;}  }
class C{  public void testCreateWarDeployableWithContext(){  Property contextProperty=new Property();  contextProperty.setName("context");  contextProperty.setValue("customContext");  this.element.setType("war");  this.element.setFile("/some/path/to/war");  this.element.addConfiguredProperty(contextProperty);  Deployable war=this.element.createDeployable("customContainer");  assertEquals(DeployableType.WAR,war.getType());  assertEquals("customContext",((WAR)war).getContext());}  }
class C{  @ZapApiIgnore public boolean isConfirmRemoveDomainAlwaysInScope(){  return this.confirmRemoveDomainAlwaysInScope;}  }
class C{  @Override public int size(){  int size=0;  if (end < start) {    size=maxElements - start + end;  } else   if (end == start) {    size=(full ? maxElements : 0);  } else {    size=end - start;  }  return size;}  }
class C{  public SnmpAcl(String Owner) throws UnknownHostException, IllegalArgumentException {  this(Owner,null);}  }
class C{  public XYCoordinate(){  this(0.0,0.0);}  }
class C{  public EntityLoadInfo create(Entity entity){  return create(entity,null);}  }
class C{  @SuppressWarnings("unchecked") @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.ANONYMOUS_AFTER_CODE_2__MORE_CODE_1:    getMoreCode_1().clear();  getMoreCode_1().addAll((Collection<? extends MoreCode_>)newValue);return;}super.eSet(featureID,newValue);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  protected String processContentBeforeSave(String content){  content=processAttachmentUrls(content);  content=processLocalUrls(content);  content=Util.replaceBadUnicodeCharactersWithHtmlEntities(content);  return content;}  }
class C{  @Timed @ExceptionMetered @POST @Consumes(APPLICATION_JSON) public AutomationSecretResponse createSecret(@Auth AutomationClient automationClient,@Valid CreateSecretRequest request){  SecretController.SecretBuilder builder=secretController.builder(request.name,request.content,automationClient.getName(),request.expiry).withDescription(nullToEmpty(request.description));  if (request.metadata != null) {    builder.withMetadata(request.metadata);  }  Secret secret;  try {    secret=builder.create();  } catch (  DataAccessException e) {    logger.info(format("Cannot create secret %s",request.name),e);    throw new ConflictException(format("Cannot create secret %s.",request.name));  }  ImmutableList<Group> groups=ImmutableList.copyOf(aclDAO.getGroupsFor(secret));  Map<String,String> extraInfo=new HashMap<>();  extraInfo.put("deprecated","true");  if (request.description != null) {    extraInfo.put("description",request.description);  }  if (request.metadata != null) {    extraInfo.put("metadata",request.metadata.toString());  }  extraInfo.put("expiry",Long.toString(request.expiry));  auditLog.recordEvent(new Event(Instant.now(),EventTag.SECRET_CREATE,automationClient.getName(),request.name,extraInfo));  return AutomationSecretResponse.fromSecret(secret,groups);}  }
class C{  public boolean contains(byte[] key){  return true;}  }
class C{  public void addFsUniqueId(java.lang.String param){  if (localFsUniqueId == null) {    localFsUniqueId=new java.lang.String[]{};  }  localFsUniqueIdTracker=true;  java.util.List list=org.apache.axis2.databinding.utils.ConverterUtil.toList(localFsUniqueId);  list.add(param);  this.localFsUniqueId=(java.lang.String[])list.toArray(new java.lang.String[list.size()]);}  }
class C{  public static Instances[] curveData(int Y[][],double P[][]){  int L=Y[0].length;  Instances curveData[]=new Instances[L];  for (int j=0; j < L; j++) {    Instances cd=curveData(MatrixUtils.getCol(Y,j),MatrixUtils.getCol(P,j));    curveData[j]=cd;  }  return curveData;}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList addressList;  Node testNode;  NamedNodeMap attributes;  Attr streetAttr;  String value;  doc=(Document)load("hc_staff",true);  addressList=doc.getElementsByTagName("acronym");  testNode=addressList.item(3);  attributes=testNode.getAttributes();  streetAttr=(Attr)attributes.getNamedItem("class");  streetAttr.setNodeValue("Y&ent1;");  value=streetAttr.getValue();  assertEquals("value","Y&ent1;",value);  value=streetAttr.getNodeValue();  assertEquals("nodeValue","Y&ent1;",value);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.STATE_ENTITY___ENTRY_OR_EXIT_ACTION_1:    return getEntryOrExitAction_1();case UmplePackage.STATE_ENTITY___AUTO_TRANSITION_1:  return getAutoTransition_1();case UmplePackage.STATE_ENTITY___TRANSITION_1:return getTransition_1();case UmplePackage.STATE_ENTITY___ACTIVITY_1:return getActivity_1();case UmplePackage.STATE_ENTITY___STATE_1:return getState_1();case UmplePackage.STATE_ENTITY___TRACE_1:return getTrace_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public int[] numVerticesDetectedTotal(Set<? extends SampledVertex> vertices){  int[] list=numVerticesDetected(vertices);  int[] listTotal=new int[list.length];  listTotal[0]=list[0];  for (int i=1; i < list.length; i++) {    listTotal[i]=listTotal[i - 1] + list[i];  }  return listTotal;}  }
class C{  public void add(OnDismissWrapper onDismissWrapper){  onDismissWrapperList.add(onDismissWrapper);}  }
class C{  private static void addColumnDimensions(Expression expression,Set<CarbonDimension> filterDimensions){  if (null != expression && expression instanceof ColumnExpression && ((ColumnExpression)expression).isDimension()) {    filterDimensions.add(((ColumnExpression)expression).getDimension());    return;  }  for (  Expression child : expression.getChildren()) {    addColumnDimensions(child,filterDimensions);  }}  }
class C{  public static float distancePointLine(float pointX,float pointY,float a,float b,float c){  float denom=(float)Math.sqrt(a * a + b * b);  return (a * pointX + b * pointY + c) / denom;}  }
class C{  public int read(byte[] b) throws IOException {  return read(b,0,b.length);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:58.389 -0500",hash_original_method="46912449E5F27493E09DC38DC6351C19",hash_generated_method="CFB408F833CE2D2822C56458E6C46C9A") public void pause(){  Message message=obtainMessage(PAUSE);  sendMessage(message);}  }
class C{  @Override public SOAPHandler onStartChild(String namespace,String localName,String prefix,Attributes attributes,DeserializationContext context) throws SAXException {  handleMixedContent();  BeanPropertyDescriptor propDesc=null;  FieldDesc fieldDesc=null;  SOAPConstants soapConstants=context.getSOAPConstants();  String encodingStyle=context.getEncodingStyle();  boolean isEncoded=Constants.isSOAP_ENC(encodingStyle);  QName elemQName=new QName(namespace,localName);  if ((prevQName == null) || (!prevQName.equals(elemQName))) {    collectionIndex=-1;  }  boolean isArray=false;  QName itemQName=null;  if (typeDesc != null) {    String fieldName=typeDesc.getFieldNameForElement(elemQName,isEncoded);    propDesc=(BeanPropertyDescriptor)propertyMap.get(fieldName);    fieldDesc=typeDesc.getFieldByName(fieldName);    if (fieldDesc != null) {      ElementDesc element=(ElementDesc)fieldDesc;      isArray=element.isMaxOccursUnbounded();      itemQName=element.getItemQName();    }  }  if (propDesc == null) {    propDesc=(BeanPropertyDescriptor)propertyMap.get(localName);  }  if (propDesc == null) {    StringBuilder sb=new StringBuilder();    sb.append(Character.toLowerCase(localName.charAt(0)));    if (localName.length() > 1)     sb.append(localName.substring(1));    propDesc=(BeanPropertyDescriptor)propertyMap.get(sb.toString());  }  if (propDesc == null || (((prevQName != null) && prevQName.equals(elemQName) && !(propDesc.isIndexed() || isArray)&& getAnyPropertyDesc() != null))) {    prevQName=elemQName;    propDesc=getAnyPropertyDesc();    if (propDesc != null) {      try {        MessageElement[] curElements=(MessageElement[])propDesc.get(value);        int length=0;        if (curElements != null) {          length=curElements.length;        }        MessageElement[] newElements=new MessageElement[length + 1];        if (curElements != null) {          System.arraycopy(curElements,0,newElements,0,length);        }        MessageElement thisEl=context.getCurElement();        newElements[length]=thisEl;        propDesc.set(value,newElements);        if (!localName.equals(thisEl.getName())) {          return new SOAPHandler(newElements,length);        }        return new SOAPHandler();      } catch (      Exception e) {        throw new SAXException(e);      }    }  }  if (propDesc == null) {    throw new SAXException(Messages.getMessage("badElem00",javaType.getName(),localName));  }  prevQName=elemQName;  QName childXMLType=context.getTypeFromAttributes(namespace,localName,attributes);  String href=attributes.getValue(soapConstants.getAttrHref());  Class fieldType=propDesc.getType();  if (childXMLType == null && fieldDesc != null && href == null) {    childXMLType=fieldDesc.getXmlType();    if (itemQName != null) {      childXMLType=Constants.SOAP_ARRAY;      fieldType=propDesc.getActualType();    } else {      childXMLType=fieldDesc.getXmlType();    }  }  Deserializer dSer=getDeserializer(childXMLType,fieldType,href,context);  if (dSer == null) {    dSer=context.getDeserializerForClass(propDesc.getType());  }  if (context.isNil(attributes)) {    if ((propDesc.isIndexed() || isArray)) {      if (!((dSer != null) && (dSer instanceof ArrayDeserializer))) {        collectionIndex++;        dSer.registerValueTarget(new BeanPropertyTarget(value,propDesc,collectionIndex));        addChildDeserializer(dSer);        return (SOAPHandler)dSer;      }    }    return null;  }  if (dSer == null) {    throw new SAXException(Messages.getMessage("noDeser00",childXMLType.toString()));  }  if (constructorToUse != null) {    if (constructorTarget == null) {      constructorTarget=new ConstructorTarget(constructorToUse,this);    }    dSer.registerValueTarget(constructorTarget);  } else   if (propDesc.isWriteable()) {    if ((itemQName != null || propDesc.isIndexed() || isArray) && !(dSer instanceof ArrayDeserializer)) {      collectionIndex++;      dSer.registerValueTarget(new BeanPropertyTarget(value,propDesc,collectionIndex));    } else {      collectionIndex=-1;      dSer.registerValueTarget(new BeanPropertyTarget(value,propDesc));    }  }  addChildDeserializer(dSer);  return (SOAPHandler)dSer;}  }
class C{  public String executionSlotsTipText(){  return "Set the number of evaluation tasks to run in parallel.";}  }
class C{  private void makeTail(LinkedEntry<K,V> e){  e.prv.nxt=e.nxt;  e.nxt.prv=e.prv;  LinkedEntry<K,V> header=this.header;  LinkedEntry<K,V> oldTail=header.prv;  e.nxt=header;  e.prv=oldTail;  oldTail.nxt=header.prv=e;  modCount++;}  }
class C{  public static void runJavadoc(String[] javadocArgs){  if (com.sun.tools.javadoc.Main.execute(AuthorDD.class.getClassLoader(),javadocArgs) != 0) {    throw new Error("Javadoc failed to execute");  }}  }
class C{  public static final void shuffle(double[] a,int start,int len,Random r){  for (int i=start + len; i > 1; --i) {    double t=a[i];    int j=r.nextInt(i);    a[i]=a[j];    a[j]=t;  }}  }
class C{  protected Component createCommandComponent(Vector commands){  UIManager manager=parent.getUIManager();  if (manager.getLookAndFeel().isTouchMenus()) {    Container menu=new Container();    menu.setScrollableY(true);    for (int iter=0; iter < commands.size(); iter++) {      Command c=(Command)commands.elementAt(iter);      menu.addComponent(createTouchCommandButton(c));    }    if (!manager.isThemeConstant("touchCommandFlowBool",false)) {      int cols=calculateTouchCommandGridColumns(menu);      if (cols > getCommandCount()) {        cols=getCommandCount();      }      int rows=Math.max(1,getCommandCount() / cols + (getCommandCount() % cols != 0 ? 1 : 0));      if (rows > 1) {        int remainingColumns=(rows * cols) % getCommandCount();        int newCols=cols;        int newRows=rows;        while (remainingColumns != 0 && remainingColumns > 1 && newCols >= 2) {          newCols--;          newRows=Math.max(1,getCommandCount() / newCols + (getCommandCount() % newCols != 0 ? 1 : 0));          if (newRows != rows) {            break;          }          remainingColumns=(newRows * newCols) % getCommandCount();        }        if (newRows == rows) {          cols=newCols;          rows=newRows;        }      }      GridLayout g=new GridLayout(rows,cols);      g.setFillLastRow(manager.isThemeConstant("touchCommandFillBool",true));      menu.setLayout(g);    } else {      ((FlowLayout)menu.getLayout()).setFillRows(true);    }    menu.setPreferredW(Display.getInstance().getDisplayWidth());    return menu;  }  return createCommandList(commands);}  }
class C{  public StatusInfo(int severity,String message){  fStatusMessage=message;  fSeverity=severity;}  }
class C{  @FXML public void createNewPayloadTab(){  setNotSaved();  initializeLists();  AnchorPane topPane=createFingerPrintPanel(this.filterPanelList);  String id=this.filterPanelList.get(this.filterPanelList.size() - 1).getUuid();  AnchorPane buttonPane=createTreeViewPanel(id);  SplitPane newSplitPane=new SplitPane(topPane,buttonPane);  int tabNumber=this.filterPanelList.size();  newSplitPane.setOrientation(Orientation.VERTICAL);  AnchorPane tabAnchorPane=new AnchorPane(newSplitPane);  setAnchorPaneAnchors(newSplitPane);  this.payloadTabsId.getTabs().add(createNewTab(tabAnchorPane,tabNumber));  addNewReturnGroup(Controller.FILTER_GROUP_CONTAINER_LABEL_TEXT,Controller.FILTER_GROUP_CONTAINER_IDENTIFIER,this.filterPanelList.get(this.filterPanelList.size() - 1),false);}  }
class C{  protected byte[] readFully(InputStream in) throws Exception {  ByteArrayOutputStream out=new ByteArrayOutputStream();  byte[] buffer=new byte[32];  int count;  while ((count=in.read(buffer)) >= 0) {    out.write(buffer,0,count);  }  return out.toByteArray();}  }
class C{  protected AnnotationModelEvent createAnnotationModelEvent(){  return new AnnotationModelEvent(this);}  }
class C{  public void testDoubleSort() throws Exception {  checkSortMissingDefault("doubledv","-1.3","4.2");}  }
class C{  public void testEmptySourceListAtParse() throws Exception {  TraxSource traxSource=new TraxSource();  Writer buffer=new StringWriter();  List list=new ArrayList();  list.add(testInput);  traxSource.setSourceAsList(list);  list.clear();  Transformer transformer=identityStylesheet.newTransformer();  transformer.setErrorListener(new TrAXErrorListener());  try {    transformer.transform(traxSource,new StreamResult(buffer));    fail("Empty source list not rejected");  } catch (  Exception expectedException) {    if (expectedException.getMessage().endsWith("shall not be an empty list")) {    } else {      throw expectedException;    }  }}  }
class C{  protected void forwardCommandChangeToLayout(int s){  if ((s & Turnout.CLOSED) != 0) {    if ((s & Turnout.THROWN) != 0) {      log.error("Cannot command both CLOSED and THROWN " + s);      return;    } else {      sendMessage(true ^ getInverted());    }  } else {    sendMessage(false ^ getInverted());  }}  }
class C{  protected Object createEntranceTransition(){  return null;}  }
class C{  public LinearRenderer2D(){}  }
class C{  public static GeoShapeQueryBuilder geoWithinQuery(String name,ShapeBuilder shape){  return geoShapeQuery(name,shape,ShapeRelation.WITHIN);}  }
class C{  private Object extract(String tweet,String prop){  Map<String,Object> tweetJson=null;  try {    tweetJson=MAPPER.readValue(tweet,new TypeReference<Map<String,Object>>(){    });  } catch (  IOException e) {    LOG.log(Level.SEVERE,"Failed to parse the String into map: " + tweet,e);  }  Object property=null;  if (tweetJson == null) {    property="";  } else {    if (tweetJson.containsKey("id") && tweetJson.containsKey("created_at") && tweetJson.containsKey("text")&& tweetJson.containsKey("user")) {      property=tweetJson.get(prop);    }  }  return property;}  }
class C{  public void onConnectionStateChange(BluetoothGatt gatt,int status,int newState){}  }
class C{  public static boolean preferIPv6Addresses(){  return SocketCreator.useIPv6Addresses;}  }
class C{  protected synchronized void publish(LogRecord record) throws BadLocationException {  final Formatter fmt;  final Style style;  if (record.getLevel().intValue() >= Level.WARNING.intValue()) {    fmt=errformat;    style=errStyle;  } else   if (record.getLevel().intValue() <= Level.FINE.intValue()) {    fmt=debugformat;    style=dbgStyle;  } else {    fmt=msgformat;    style=msgStyle;  }  final String m;  m=fmt.format(record);  if (record instanceof ProgressLogRecord) {    if (lastNewlinePos < getStyledDocument().getLength()) {      getStyledDocument().remove(lastNewlinePos,getStyledDocument().getLength() - lastNewlinePos);    }  } else {    if (lastNewlinePos < getStyledDocument().getLength()) {      getStyledDocument().insertString(getStyledDocument().getLength(),"\n",style);      lastNewlinePos=getStyledDocument().getLength();    }  }  int tail=tailingNonNewline(m,0,m.length());  int headlen=m.length() - tail;  if (headlen > 0) {    String pre=m.substring(0,headlen);    getStyledDocument().insertString(getStyledDocument().getLength(),pre,style);  }  lastNewlinePos=getStyledDocument().getLength();  if (tail > 0) {    String post=m.substring(m.length() - tail);    getStyledDocument().insertString(lastNewlinePos,post,style);  }}  }
class C{  @Override public boolean input(Instance instance){  if (getInputFormat() == null) {    throw new IllegalStateException("No input instance format defined");  }  if (m_NewBatch) {    resetQueue();    m_NewBatch=false;  }  if (m_CutPoints != null) {    convertInstance(instance);    return true;  }  bufferInput(instance);  return false;}  }
class C{  public float angleAtLength(float length){  int upperIndex=findUpperIndex(length);  if (upperIndex == -1) {    return 0f;  }  PathSegment upper=(PathSegment)segments.get(upperIndex);  if (upperIndex == 0) {    upperIndex=1;  }  PathSegment lower=(PathSegment)segments.get(upperIndex - 1);  return (float)Math.atan2(upper.getY() - lower.getY(),upper.getX() - lower.getX());}  }
class C{  public ExampleUtils(PipelineOptions options){  this.options=options;}  }
class C{  @Override public ExportGroupBulkRep queryBulkResourceReps(List<URI> ids){  Iterator<ExportGroup> _dbIterator=_dbClient.queryIterativeObjects(getResourceClass(),ids);  BulkList<ExportGroupRestRep> list=new BulkList<ExportGroupRestRep>();  list.setIterator(new ExportGroupRepIterator(_dbIterator,_dbClient));  return new ExportGroupBulkRep(list);}  }
class C{  public static void trace(final String level,String s,Throwable t){}  }
class C{  protected void appendDetail(StringBuffer buffer,String fieldName,char value){  buffer.append(value);}  }
class C{  private void isiShare(IsilonApi isi,FileDeviceInputOutput args,SMBFileShare smbFileShare) throws IsilonException {  IsilonSMBShare isilonSMBShare=new IsilonSMBShare(smbFileShare.getName(),smbFileShare.getPath(),smbFileShare.getDescription());  SMBShareMap smbShareMap=args.getFileObjShares();  SMBFileShare existingShare=(smbShareMap == null) ? null : smbShareMap.get(smbFileShare.getName());  String shareId;  String zoneName=getZoneName(args.getvNAS());  if (existingShare != null) {    shareId=existingShare.getNativeId();    if (zoneName != null) {      isi.modifyShare(shareId,zoneName,isilonSMBShare);    } else {      isi.modifyShare(shareId,isilonSMBShare);    }  } else {    boolean inheritablePathAcl=true;    if (configinfo != null && configinfo.containsKey("inheritablePathAcl")) {      inheritablePathAcl=Boolean.parseBoolean(configinfo.get("inheritablePathAcl"));      isilonSMBShare.setInheritablePathAcl(inheritablePathAcl);    }    if (zoneName != null) {      _log.debug("Share will be created in zone: {}",zoneName);      shareId=isi.createShare(isilonSMBShare,zoneName);    } else {      shareId=isi.createShare(isilonSMBShare);    }  }  smbFileShare.setNativeId(shareId);  smbFileShare.setMountPoint(smbFileShare.getStoragePortNetworkId(),smbFileShare.getStoragePortName(),smbFileShare.getName());  if (args.getFileObjShares() == null) {    args.initFileObjShares();  }  args.getFileObjShares().put(smbFileShare.getName(),smbFileShare);}  }
class C{  public void removeEventListener(GroupChatListener listener) throws RcsServiceNotAvailableException, RcsGenericException {  if (mApi == null) {    throw new RcsServiceNotAvailableException();  }  try {    WeakReference<IGroupChatListener> weakRef=mGroupChatListeners.remove(listener);    if (weakRef == null) {      return;    }    IGroupChatListener rcsListener=weakRef.get();    if (rcsListener != null) {      mApi.removeEventListener3(rcsListener);    }  } catch (  Exception e) {    RcsIllegalArgumentException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  protected Node newNode(){  return new GenericAttrNS();}  }
class C{  private void binaryInsertionSort(int from,int to){  for (int i=from + 1; i <= to; i++) {    T x=data[i];    int ins=binarySearch(x,from,i - 1);    for (int j=i - 1; j >= ins; j--) {      data[j + 1]=data[j];    }    data[ins]=x;  }}  }
class C{  public void testConfigWar() throws Exception {  this.resourceUtils.copyResource(AbstractLocalConfiguration.RESOURCE_PATH + "cargocpc.war",this.fileHandler.append(DOMAIN_HOME,"cargocpc.war"),this.fileHandler);  WAR war=new WAR("cargo.war");  this.deployer.addWarToDomain(war,this.domain);  String xml=this.xmlUtil.toString(this.domain);  XMLAssert.assertXpathEvaluatesTo("cargo.war","//WebAppComponent/@URI",xml);}  }
class C{  public FPSTextureView removeChild(@NonNull DisplayBase displayBase){  displayBase.disable();  boolean a=mDisplayList.remove(displayBase);  return this;}  }
class C{  public void clearCache(){  cache.clearAllCache();}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:20.824 -0500",hash_original_method="33992AC73E126DB7F05D741A2596DA1D",hash_generated_method="33992AC73E126DB7F05D741A2596DA1D") Node cloneOrImportNode(short operation,Node node,boolean deep){  NodeImpl copy=shallowCopy(operation,node);  if (deep) {    NodeList list=node.getChildNodes();    for (int i=0; i < list.getLength(); i++) {      copy.appendChild(cloneOrImportNode(operation,list.item(i),deep));    }  }  notifyUserDataHandlers(operation,node,copy);  return copy;}  }
class C{  public File homogenizeAggregatedFile() throws Exception {  File tmpHomoFile=null;  Set<SingleOutcome> newOutcomes=new HashSet<SingleOutcome>();  if (this.learningMode.equals(Constants.LM_SINGLE_LABEL) || this.learningMode.equals(Constants.LM_MULTI_LABEL)) {    Set<String> aggregatedLabels=new TreeSet<String>();    for (    SingleOutcome outcome : this.getOutcomes()) {      aggregatedLabels.addAll(outcome.getLabels());    }    Map<String,Integer> aggregatedLabelsMapping=classNamesToMapping(new LinkedList<String>(aggregatedLabels));    List<String> aggregatedLabelsList=new ArrayList<String>();    aggregatedLabelsList.addAll(aggregatedLabels);    int aggregatedMappingSize=aggregatedLabelsMapping.size();    for (    SingleOutcome outcome : this.getOutcomes()) {      double bipartitionThreshold=outcome.getBipartitionThreshold();      String id=outcome.getId();      List<String> labels=outcome.getLabels();      Map<String,Integer> localMappingLabelsToIndices=classNamesToMapping(labels);      double[] oldIndexedGoldstandards=outcome.getGoldstandard();      double[] oldIndexedPredictions=outcome.getPrediction();      double[] newIndexedGoldstandards=new double[aggregatedMappingSize];      double[] newIndexedPredictions=new double[aggregatedMappingSize];      for (      String label : aggregatedLabelsMapping.keySet()) {        int index=aggregatedLabelsMapping.get(label);        if (localMappingLabelsToIndices.containsKey(label)) {          Integer oldLabelsIndex=localMappingLabelsToIndices.get(label);          double goldstandardValue=oldIndexedGoldstandards[oldLabelsIndex];          newIndexedGoldstandards[index]=goldstandardValue;          double predictionValue=oldIndexedPredictions[oldLabelsIndex];          newIndexedPredictions[index]=predictionValue;        } else {          newIndexedGoldstandards[index]=Constants.HOMOGENIZING_MISSING_VALUE;          newIndexedPredictions[index]=Constants.HOMOGENIZING_MISSING_VALUE;        }      }      SingleOutcome newOutcome=new SingleOutcome(newIndexedGoldstandards,newIndexedPredictions,bipartitionThreshold,aggregatedLabelsList,id);      newOutcomes.add(newOutcome);    }    tmpHomoFile=File.createTempFile("homoAggregatedFile" + System.currentTimeMillis(),".tmp");    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(new FileOutputStream(tmpHomoFile),"utf-8"));    generateOutcomesText(writer,newOutcomes,aggregatedLabelsList);    writer.close();  }  return tmpHomoFile;}  }
class C{  public void actionPerformed(ActionEvent ae){  if (scrollBar == null || !scrollBar.getValueIsAdjusting()) {    if (timer != null)     timer.stop();    updateSize();    timer=null;    scrollBar=null;  }}  }
class C{  @PreDestroy void stop(){  boolean interrupted=false;  scheduler.shutdownNow();  try {    if (!scheduler.awaitTermination(5,TimeUnit.SECONDS)) {      LOG.warn("Unable to terminate scheduler");    }  } catch (  InterruptedException e) {    interrupted=true;  }  executor.shutdown();  try {    if (!executor.awaitTermination(10,TimeUnit.SECONDS)) {      executor.shutdownNow();      if (!executor.awaitTermination(10,TimeUnit.SECONDS)) {        LOG.warn("Unable to terminate main pool");      }    }  } catch (  InterruptedException e) {    interrupted|=true;    executor.shutdownNow();  }  final File[] files=projectsFolder.listFiles();  if (files != null && files.length > 0) {    for (    File file : files) {      boolean deleted;      if (file.isDirectory()) {        deleted=IoUtil.deleteRecursive(file);      } else {        deleted=file.delete();      }      if (!deleted) {        LOG.warn("Failed to delete {}",file);      }    }  }  tasks.clear();  if (interrupted) {    Thread.currentThread().interrupt();  }}  }
class C{  private Document createAssertion() throws ParserException {  AssertionType assertion=_assertionFactory.createAssertionType();  assertion.setID(ASSERTION_ID);  assertion.setVersion(SAML_VERSION);  addAttributeStatements(assertion);  assertion.setIssuer(createIssuer());  try {    addAuthStatement(assertion);    assertion.setConditions(createConditions());    assertion.setIssueInstant(getIssueInstant());    assertion.setSubject(createSubject());  } catch (  DatatypeConfigurationException e) {    throw new RuntimeException("Error creating assertion",e);  }  return marshallAssertion(assertion);}  }
class C{  private GMSSRootCalc generateCurrentAuthpathAndRoot(byte[] lowerRoot,Vector currentStack,byte[] seed,int h){  byte[] help=new byte[mdLength];  byte[] OTSseed=new byte[mdLength];  OTSseed=gmssRandom.nextSeed(seed);  WinternitzOTSignature ots;  GMSSRootCalc treeToConstruct=new GMSSRootCalc(this.heightOfTrees[h],this.K[h],digestProvider);  treeToConstruct.initialize(currentStack);  if (h == numLayer - 1) {    ots=new WinternitzOTSignature(OTSseed,digestProvider.get(),otsIndex[h]);    help=ots.getPublicKey();  } else {    ots=new WinternitzOTSignature(OTSseed,digestProvider.get(),otsIndex[h]);    currentRootSigs[h]=ots.getSignature(lowerRoot);    WinternitzOTSVerify otsver=new WinternitzOTSVerify(digestProvider.get(),otsIndex[h]);    help=otsver.Verify(lowerRoot,currentRootSigs[h]);  }  treeToConstruct.update(help);  int seedForTreehashIndex=3;  int count=0;  for (int i=1; i < (1 << this.heightOfTrees[h]); i++) {    if (i == seedForTreehashIndex && count < this.heightOfTrees[h] - this.K[h]) {      treeToConstruct.initializeTreehashSeed(seed,count);      seedForTreehashIndex*=2;      count++;    }    OTSseed=gmssRandom.nextSeed(seed);    ots=new WinternitzOTSignature(OTSseed,digestProvider.get(),otsIndex[h]);    treeToConstruct.update(ots.getPublicKey());  }  if (treeToConstruct.wasFinished()) {    return treeToConstruct;  }  System.err.println("Baum noch nicht fertig konstruiert!!!");  return null;}  }
class C{  @Override public S initialStore(UnderlyingAST underlyingAST,List<LocalVariableNode> parameters){  if (fixedInitialStore != null && underlyingAST.getKind() != Kind.LAMBDA && underlyingAST.getKind() != Kind.METHOD) {    return fixedInitialStore;  }  S info=analysis.createEmptyStore(sequentialSemantics);  if (underlyingAST.getKind() == Kind.METHOD) {    if (fixedInitialStore != null) {      info=analysis.createCopiedStore(fixedInitialStore);    }    AnnotatedTypeFactory factory=analysis.getTypeFactory();    for (    LocalVariableNode p : parameters) {      AnnotatedTypeMirror anno=factory.getAnnotatedType(p.getElement());      info.initializeMethodParameter(p,analysis.createAbstractValue(anno));    }    CFGMethod method=(CFGMethod)underlyingAST;    MethodTree methodTree=method.getMethod();    ExecutableElement methodElem=TreeUtils.elementFromDeclaration(methodTree);    addInformationFromPreconditions(info,factory,method,methodTree,methodElem);    final ClassTree classTree=method.getClassTree();    addFieldValues(info,factory,classTree,methodTree);    addFinalLocalValues(info,methodElem);    if (shouldPerformWholeProgramInference(methodTree,methodElem)) {      Map<AnnotatedDeclaredType,ExecutableElement> overriddenMethods=AnnotatedTypes.overriddenMethods(analysis.atypeFactory.getElementUtils(),analysis.atypeFactory,methodElem);      for (      Map.Entry<AnnotatedDeclaredType,ExecutableElement> pair : overriddenMethods.entrySet()) {        AnnotatedExecutableType overriddenMethod=AnnotatedTypes.asMemberOf(analysis.atypeFactory.getProcessingEnv().getTypeUtils(),analysis.atypeFactory,pair.getKey(),pair.getValue());        analysis.atypeFactory.getWholeProgramInference().updateInferredMethodParameterTypes(methodTree,methodElem,overriddenMethod,analysis.getTypeFactory());        analysis.atypeFactory.getWholeProgramInference().updateInferredMethodReceiverType(methodTree,methodElem,overriddenMethod,analysis.getTypeFactory());      }    }    return info;  } else   if (underlyingAST.getKind() == Kind.LAMBDA) {    info=analysis.createCopiedStore(fixedInitialStore);    info.localVariableValues.clear();    info.classValues.clear();    info.arrayValues.clear();    info.methodValues.clear();    AnnotatedTypeFactory factory=analysis.getTypeFactory();    for (    LocalVariableNode p : parameters) {      AnnotatedTypeMirror anno=factory.getAnnotatedType(p.getElement());      info.initializeMethodParameter(p,analysis.createAbstractValue(anno));    }    CFGLambda lambda=(CFGLambda)underlyingAST;    Tree enclosingTree=TreeUtils.enclosingOfKind(factory.getPath(lambda.getLambdaTree()),new HashSet<>(Arrays.asList(Tree.Kind.METHOD,Tree.Kind.CLASS,Tree.Kind.INTERFACE,Tree.Kind.ANNOTATION_TYPE,Tree.Kind.ENUM)));    Element enclosingElement=null;    if (enclosingTree.getKind() == Tree.Kind.METHOD) {      enclosingElement=InternalUtils.symbol(enclosingTree);    } else     if (TreeUtils.isClassTree(enclosingTree)) {      TreePath loopTree=factory.getPath(lambda.getLambdaTree()).getParentPath();      Element anEnclosingElement=null;      while (loopTree.getLeaf() != enclosingTree) {        Element sym=InternalUtils.symbol(loopTree.getLeaf());        if (sym != null) {          anEnclosingElement=sym;          break;        }        loopTree=loopTree.getParentPath();      }      while (anEnclosingElement != null && !anEnclosingElement.equals(InternalUtils.symbol(enclosingTree))) {        if (anEnclosingElement.getKind() == ElementKind.INSTANCE_INIT || anEnclosingElement.getKind() == ElementKind.STATIC_INIT) {          enclosingElement=anEnclosingElement;          break;        }        anEnclosingElement=anEnclosingElement.getEnclosingElement();      }    }    if (enclosingElement != null) {      addFinalLocalValues(info,enclosingElement);    }    Map<FieldAccess,V> fieldValuesClone=new HashMap<>(info.fieldValues);    for (    Entry<FieldAccess,V> fieldValue : fieldValuesClone.entrySet()) {      AnnotatedTypeMirror declaredType=factory.getAnnotatedType(fieldValue.getKey().getField());      V lubbedValue=analysis.createAbstractValue(declaredType).leastUpperBound(fieldValue.getValue());      info.fieldValues.put(fieldValue.getKey(),lubbedValue);    }  }  return info;}  }
class C{  private ElementTransform(ElementCreatorImpl builder){  super(builder);  this.cardinality=builder.getCardinality();  this.contentRequired=builder.getContentRequired();  this.validator=builder.getValidator();  this.properties=builder.getProperties();  this.virtualElementHolder=builder.getVirtualElementHolder();  this.flattened=builder.isFlattened();  this.attributes=ImmutableMap.copyOf(builder.getAttributes());  this.elements=ImmutableMap.copyOf(builder.getElements());  this.adaptations=ImmutableMap.copyOf(builder.getAdaptations());}  }
class C{  private long checkFileHeader(BufferedFileDataInput bfdi) throws ReplicatorException, InterruptedException {  int magic=0;  short major=0;  short minor=0;  try {    bfdi.waitAvailable(HEADER_LENGTH,HEADER_WAIT_MILLIS);    magic=bfdi.readInt();    major=bfdi.readShort();    minor=bfdi.readShort();    baseSeqno=bfdi.readLong();  } catch (  IOException e) {    throw new THLException("Failed to read file header from  " + file.getAbsolutePath(),e);  }  if (magic != MAGIC_NUMBER)   throw new THLException("Could not open file " + file.getAbsolutePath() + " : invalid magic number");  if (major != MAJOR_VERSION)   throw new THLException("Could not open file " + file.getAbsolutePath() + " : incompatible major version");  if (minor != MINOR_VERSION)   logger.warn("Minor version mismatch : file " + file.getAbsolutePath() + " using format "+ major+ "."+ minor+ " - Tungsten running version "+ MAJOR_VERSION+ "."+ MINOR_VERSION);  return baseSeqno;}  }
class C{  public static boolean rectWithin(final double aMinX,final double aMinY,final double aMaxX,final double aMaxY,final double bMinX,final double bMinY,final double bMaxX,final double bMaxY){  return !(aMinX < bMinX || aMinY < bMinY || aMaxX > bMaxX || aMaxY > bMaxY);}  }
class C{  public ManagerLogWriter(int level,PrintStream out,String connectionName){  super(level,out,connectionName);  this.fileSizeLimitInKB=Boolean.getBoolean(TEST_FILE_SIZE_LIMIT_IN_KB_PROPERTY);}  }
class C{  public void open(){  setOpen(true);}  }
class C{  public JMXProviderException(String message,Throwable cause){  super(message);  this.cause=cause;}  }
class C{  public ObjectMatrix3D like(int slices,int rows,int columns){  return new SparseObjectMatrix3D(slices,rows,columns);}  }
class C{  @Override public boolean connectionAllowed(EventSetDescriptor esd){  return connectionAllowed(esd.getName());}  }
class C{  ContentTile(int row,int column){  this.row=row;  this.column=column;}  }
class C{  public void init(float density){  assert density > 0;  mDisplayDensity=density;  setDefaultZoomScale(density);  mActualScale=density;  mInvActualScale=1 / density;  mTextWrapScale=getReadingLevelScale();}  }
class C{  public int hashCode(){  return uid.hashCode();}  }
class C{  public boolean deletePackage(final SlingHttpServletRequest request,final String groupName,final String packageName,final String version){  Session session=request.getResourceResolver().adaptTo(Session.class);  boolean result;  final JcrPackageManager packageManager=packaging.getPackageManager(session);  final PackageId packageId=new PackageId(groupName,packageName,version);  try {    final JcrPackage jcrPackage=packageManager.open(packageId);    packageManager.remove(jcrPackage);    result=true;  } catch (  RepositoryException e) {    LOGGER.error("Could not remove package",e);    result=false;  }  return result;}  }
class C{  @Override protected void register(PackagerFactory packagerFactory){  packagerFactory.registerPackager("tomee1x",PackagerType.DIRECTORY,TomcatDirectoryPackager.class);  packagerFactory.registerPackager("tomee7x",PackagerType.DIRECTORY,TomcatDirectoryPackager.class);}  }
class C{  public void mouseExited(MouseEvent e){  if (coolMM) {    getCurrentLayerMapMouseListener().mouseExited(e);  }}  }
class C{  public ClientModelStore(ClientDolphin clientDolphin){  this(clientDolphin,new ModelStoreConfig());}  }
class C{  public static TaskService taskService(){  return taskService;}  }
class C{  public void shutdownFramework(){  LOGGER.info("Received request to shutdown Myriad Framework..");  Status driverStatus=driverManager.getDriverStatus();  if (Status.DRIVER_RUNNING != driverStatus) {    LOGGER.warn("Driver is not running. Status: " + driverStatus);  } else {    driverStatus=driverManager.stopDriver(false);    LOGGER.info("Myriad driver was shutdown with status " + driverStatus);  }  try {    myriadWebServer.stop();    LOGGER.info("Myriad webserver was shutdown successfully");  } catch (  Exception e) {    LOGGER.info("Failed to shutdown Myriad webserver: " + e.getMessage());  }  if (myriadStateStore != null) {    try {      myriadStateStore.removeMyriadState();      LOGGER.info("Myriad State store was removed successfully.");    } catch (    Exception e) {      LOGGER.info("Failed to remove Myriad state store: " + e.getMessage());    }  }}  }
class C{  public void addUsername(String username){  SystemAssert.requireArgument(username != null && !username.isEmpty(),"Username cannot be null or empty.");  this.usernames.add(username);}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:45.015 -0500",hash_original_method="FA861A4F4A3AD51C69F90915108FDD56",hash_generated_method="CF72EC6317D5D2FD71FF445EC7F8AA75") public void addProvider(String name,ContentProvider provider){  mProviders.put(name,provider);}  }
class C{  public String toLocalizedPattern(){  return convertPattern(pattern,PATTERN_CHARS,formatData.getLocalPatternChars(),false);}  }
class C{  public int doFinal(byte[] out,int outOff){  byte paddingByte=(byte)(M.length - mOff);  for (int i=mOff; i < M.length; i++) {    M[i]=paddingByte;  }  processCheckSum(M);  processBlock(M);  processBlock(C);  System.arraycopy(X,xOff,out,outOff,16);  reset();  return DIGEST_LENGTH;}  }
class C{  @Override public void execute(MetricTimeSeries timeSeries,FunctionValueMap functionValueMap){  timeSeries.sort();  long[] times=timeSeries.getTimestampsAsArray();  double[] values=timeSeries.getValuesAsArray();  timeSeries.clear();  for (int i=1; i < values.length - 1; i++) {    long yT1=times[i + 1];    long yT0=times[i - 1];    double xT1=values[i + 1];    double xT0=values[i - 1];    double derivativeValue=DerivativeUtil.derivative(xT1,xT0,yT1,yT0);    if (derivativeValue >= 0) {      long derivativeTime=yT1 + (yT1 - yT0) / 2;      timeSeries.add(derivativeTime,derivativeValue);    }  }  functionValueMap.add(this);}  }
class C{  public boolean isRelationTableExist(){  return relationTableExist;}  }
class C{  public void testFileTransferLogQuery() throws RemoteException {  Cursor cursor=null;  try {    String where=FileTransferLog.FT_ID.concat("=?");    String[] whereArgs=new String[]{"0123456789"};    cursor=mProvider.query(FileTransferLog.CONTENT_URI,FILE_TRANSFER_LOG_PROJECTION,where,whereArgs,null);    assertNotNull(cursor);  }  finally {    if (cursor != null) {      cursor.close();    }  }}  }
class C{  public SignerInfo[] verify() throws NoSuchAlgorithmException, SignatureException {  return verify(null);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:44.047 -0500",hash_original_method="DB6BEFCD0A819B7E57F227596762579B",hash_generated_method="EE57F0ED37601162F324632CE474EE6B") public Test failedTest(){  return fFailedTest;}  }
class C{  final public SyntaxTreeNode OperatorOrFunctionDefinition() throws ParseException {  SyntaxTreeNode tn;  SyntaxTreeNode zn=null;  bpa("Definition");  int kind=0;  String n;  Token t;  expecting="LOCAL, Identifier or Operator Symbol";switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case LOCAL:    t=jj_consume_token(LOCAL);  zn=new SyntaxTreeNode(mn,t);break;default :jj_la1[19]=jj_gen;;}t=jj_consume_token(DEFBREAK);expecting="LOCAL, Identifier or Operator Symbol";if (jj_2_8(2147483647)) {tn=Identifier();addHeir(tn);kind=N_FunctionDefinition;expecting="[";t=jj_consume_token(LSB);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=QuantBound();addHeir(tn);expecting="COMMA or ]";label_8: while (true) {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case COMMA:;break;default :jj_la1[20]=jj_gen;break label_8;}t=jj_consume_token(COMMA);addHeir(new SyntaxTreeNode(mn,t));expecting="Identifier";tn=QuantBound();addHeir(tn);}t=jj_consume_token(RSB);expecting="==";addHeir(new SyntaxTreeNode(mn,t));t=jj_consume_token(DEF);belchDEF();addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_9(2147483647)) {tn=PostfixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_10(2147483647)) {tn=InfixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);} else if (jj_2_11(2147483647)) {tn=IdentLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();addHeir(new SyntaxTreeNode(mn,t));expecting="Expression or Instance";if (jj_2_7(1)) {tn=Expression();kind=N_OperatorDefinition;} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case INSTANCE:tn=Instantiation();kind=N_ModuleDefinition;break;default :jj_la1[21]=jj_gen;jj_consume_token(-1);throw new ParseException();}}addHeir(tn);} else {switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {case op_76:case op_26:case op_29:case op_58:case CASESEP:case op_61:case op_112:case op_113:case op_114:case op_115:case op_116:tn=PrefixLHS();addHeir(tn);expecting="==";t=jj_consume_token(DEF);belchDEF();kind=N_OperatorDefinition;addHeir(new SyntaxTreeNode(mn,t));expecting="Expression";tn=Expression();addHeir(tn);break;default :jj_la1[22]=jj_gen;jj_consume_token(-1);throw new ParseException();}}SyntaxTreeNode sn[]=getLastHeirs();epa();{if (true) return new SyntaxTreeNode(mn,kind,zn,sn);}throw new Error("Missing return statement in function");}  }
class C{  private void createActionList(){  View view;  String title;  Drawable icon;  OnClickListener listener;  int index=1;  for (int i=0; i < actionList.size(); i++) {    title=actionList.get(i).getTitle();    icon=actionList.get(i).getIcon();    listener=actionList.get(i).getListener();    view=getActionItem(title,icon,listener);    view.setFocusable(true);    view.setClickable(true);    mTrack.addView(view,index);    index++;  }}  }
class C{  public static CancelStatListenerRequest create(int listenerId){  CancelStatListenerRequest m=new CancelStatListenerRequest();  m.listenerId=listenerId;  return m;}  }
class C{  final protected boolean rangeCheckChildIndex(final int index){  if (index < 0 || index > data.getKeyCount() + 1)   throw new IndexOutOfBoundsException();  return true;}  }
class C{  public DataUri(String contentType,byte[] data){  this(contentType,data,null);}  }
class C{  public void addTableFilter(TableFilter filter,boolean isTop){  filters.add(filter);  if (isTop) {    topFilters.add(filter);  }}  }
class C{  @Override public void run(){  amIActive=true;  if (args.length < 2) {    showFeedback("Plugin parameters have not been set properly.");    return;  }  String inputHeader=args[0];  String outputHeader=args[1];  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    int row, col;    double z1;    double[] data1;    WhiteboxRaster inputFile1=new WhiteboxRaster(inputHeader,"r");    int rows=inputFile1.getNumberRows();    int cols=inputFile1.getNumberColumns();    double noData=inputFile1.getNoDataValue();    WhiteboxRaster outputFile=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    outputFile.setPreferredPalette(inputFile1.getPreferredPalette());    int oldProgress=-1;    int progress;    for (row=0; row < rows; row++) {      data1=inputFile1.getRowValues(row);      for (col=0; col < cols; col++) {        z1=data1[col];        if (z1 != noData) {          outputFile.setValue(row,col,(double)Math.ceil(z1));        }      }      progress=(int)(100f * row / (rows - 1));      if (progress != oldProgress) {        oldProgress=progress;        updateProgress((int)progress);        if (cancelOp) {          cancelOperation();          return;        }      }    }    outputFile.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    outputFile.addMetadataEntry("Created on " + new Date());    inputFile1.close();    outputFile.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  private String extractSignificantDigits(boolean insertDecimalPoint,int[] magnitude){  DD y=this.abs();  int mag=magnitude(y.hi);  DD scale=TEN.pow(mag);  y=y.divide(scale);  if (y.gt(TEN)) {    y=y.divide(TEN);    mag+=1;  } else   if (y.lt(ONE)) {    y=y.multiply(TEN);    mag-=1;  }  int decimalPointPos=mag + 1;  StringBuffer buf=new StringBuffer();  int numDigits=MAX_PRINT_DIGITS - 1;  for (int i=0; i <= numDigits; i++) {    if (insertDecimalPoint && i == decimalPointPos) {      buf.append('.');    }    int digit=(int)y.hi;    if (digit < 0 || digit > 9) {    }    if (digit < 0) {      break;    }    boolean rebiasBy10=false;    char digitChar=0;    if (digit > 9) {      rebiasBy10=true;      digitChar='9';    } else {      digitChar=(char)('0' + digit);    }    buf.append(digitChar);    y=(y.subtract(DD.valueOf(digit)).multiply(TEN));    if (rebiasBy10)     y.selfAdd(TEN);    boolean continueExtractingDigits=true;    int remMag=magnitude(y.hi);    if (remMag < 0 && Math.abs(remMag) >= (numDigits - i))     continueExtractingDigits=false;    if (!continueExtractingDigits)     break;  }  magnitude[0]=mag;  return buf.toString();}  }
class C{  protected static boolean convertStitchTiles(Element e,BridgeContext ctx){  String s=e.getAttributeNS(null,SVG_STITCH_TILES_ATTRIBUTE);  if (s.length() == 0) {    return false;  }  if (SVG_STITCH_VALUE.equals(s)) {    return true;  }  if (SVG_NO_STITCH_VALUE.equals(s)) {    return false;  }  throw new BridgeException(ctx,e,ERR_ATTRIBUTE_VALUE_MALFORMED,new Object[]{SVG_STITCH_TILES_ATTRIBUTE,s});}  }
class C{  public boolean close(){  return m_project.close();}  }
class C{  public void copyStream(InputStream is) throws IOException {  super.setContentEncoding(null);  ByteArrayOutputStream baos=new ByteArrayOutputStream();  while (true) {    int b=is.read();    if (b == -1) {      content=baos.toByteArray();      is.close();      return;    }  }}  }
class C{  public FibonacciMinPQ(Key[] a){  comp=new MyComparator();  for (  Key k : a)   insert(k);}  }
class C{  public void clear(){  cartItemMap.clear();  totalPrice=BigDecimal.ZERO;  totalQuantity=0;}  }
class C{  public boolean hasCamera(){  return impl.hasCamera();}  }
class C{  private void resetSideAnimation(View view){  if (!mIsMenuOpen) {    ViewHelper.setRotation(view,0);    ViewHelper.setRotationY(view,-90);    ViewHelper.setRotationX(view,0);  }  ViewHelper.setPivotX(view,mMenuItemSize);  ViewHelper.setPivotY(view,mMenuItemSize / 2);}  }
class C{  private void addTenantCertChainsContainer(){  ILdapMessage message=null;  try {    message=getTenantCertChainsContainer(getLduDn());    String objNewDn=String.format("CN=%s,CN=Tenants,CN=IdentityManager,CN=Services,%s",tenantName,this.rootDn);    Map<String,LdapMod[]> containerObjects=getLdapObjects(message,objNewDn);    if (containerObjects != null && containerObjects.size() > 0) {      addObjects(containerObjects);    }  }  finally {    closeMessage(message);  }}  }
class C{  private double[] constructDtmcMatrix(double[] lambda,int stateCount){  double[] R=new double[stateCount * stateCount];  double maxRate=getMaxRate(lambda,stateCount);  int index=0;  for (int i=0; i < stateCount; i++) {    for (int j=0; j < stateCount; j++) {      R[index]=lambda[index] / maxRate;      if (i == j) {        R[index]+=1;      }      index++;    }  }  return R;}  }
class C{  public void processingInstruction(StylesheetHandler handler,String target,String data) throws org.xml.sax.SAXException {}  }
class C{  public boolean isPrettyPrint(){  return writer.isPrettyPrint();}  }
class C{  private synchronized void updateJoinButton(){  final IGame game=clientgui.getClient().getGame();  if (!game.getOptions().booleanOption("stratops_capital_fighter")) {    return;  }  final Entity ce=ce();  if (null == ce) {    return;  }  if (!ce.isCapitalFighter()) {    return;  }  Coords loadeePos=cmd.getFinalCoords();  if (game.useVectorMove()) {    loadeePos=Compute.getFinalPosition(ce.getPosition(),cmd.getFinalVectors());  }  boolean isGood=false;  for (  Entity other : game.getEntitiesVector(loadeePos)) {    if (ce.getOwner().equals(other.getOwner()) && other.isCapitalFighter() && other.isDone()&& other.canLoad(ce)&& (cmd.getFinalFacing() == other.getFacing())) {      Aero oa=(Aero)other;      if (game.useVectorMove()) {        if (Compute.sameVectors(cmd.getFinalVectors(),oa.getVectors())) {          setJoinEnabled(true);          isGood=true;          break;        }      } else       if (cmd.getFinalVelocity() == oa.getCurrentVelocity()) {        setJoinEnabled(true);        isGood=true;        break;      }    }    other=null;  }  if (!isGood) {    setJoinEnabled(false);  }}  }
class C{  public ChainIterable<T> addItem(@NotNull T item){  return (ChainIterable<T>)super.add(Collections.<T>singleton(item));}  }
class C{  public final float length(){  return MathUtils.sqrt(x * x + y * y);}  }
class C{  public MqttPersistentData(String key,byte[] header,int hOffset,int hLength,byte[] payload,int pOffset,int pLength){  this.key=key;  this.header=header;  this.hOffset=hOffset;  this.hLength=hLength;  this.payload=payload;  this.pOffset=pOffset;  this.pLength=pLength;}  }
class C{  public String toString(){  return this.encode();}  }
class C{  private static boolean isEmpty(Object[] array){  return (array == null || array.length == 0);}  }
class C{  private String buildPersonInfo(PresenceInfo info){  StringBuilder document=new StringBuilder("  <op:overriding-willingness>").append(SipUtils.CRLF).append("    <op:basic>").append(info.getPresenceStatus()).append("</op:basic>").append(SipUtils.CRLF).append("  </op:overriding-willingness>").append(SipUtils.CRLF);  FavoriteLink favoriteLink=info.getFavoriteLink();  if ((favoriteLink != null) && (favoriteLink.getLink() != null)) {    document.append("  <ci:homepage>").append(StringUtils.encodeXML(favoriteLink.getLink())).append("</ci:homepage>").append(SipUtils.CRLF);  }  PhotoIcon photoIcon=info.getPhotoIcon();  String eTag=(photoIcon != null) ? photoIcon.getEtag() : null;  if (photoIcon != null && eTag != null) {    document.append("  <rpid:status-icon opd:etag=\"").append(eTag).append("\" opd:fsize=\"").append(photoIcon.getSize()).append("\" opd:contenttype=\"").append(photoIcon.getType()).append("\" opd:resolution=\"").append(photoIcon.getResolution()).append("\">").append(mXdm.getEndUserPhotoIconUrl()).append("</rpid:status-icon>").append(SipUtils.CRLF);  }  String freetext=info.getFreetext();  if (freetext != null) {    document.append("  <pdm:note>").append(StringUtils.encodeXML(freetext)).append("</pdm:note>").append(SipUtils.CRLF);  }  return document.toString();}  }
class C{  public long size(String key){  RawByteAllocator alloc=findRawByteAllocator(key);  return alloc.memoryLength + alloc.storageLength;}  }
class C{  public void addListener(DataStoreListener l){  dataListenerList.add(l);}  }
class C{  protected void handlePersistence(){  handlePersistence(false);}  }
class C{  public String retrieveURL(){  return m_URL;}  }
class C{  public boolean read(BinaryFile binFile,long attributeLocation){  try {    long k;    long j=0;    AttributeSubheader attributeSubheader=new AttributeSubheader();    AttributeOffsetRecord attributeOffsetRecord;    binFile.seek(attributeLocation);    attributeSubheader.read(binFile);    if (Debug.debugging("rpfdetail")) {      System.out.println(attributeSubheader);    }    AttributeOffsetRecord[] attributeOffsetRecords=new AttributeOffsetRecord[attributeSubheader.numAttributes];    int i=attributeSubheader.numAttributes - 1;    j=0;    for (int attIndex=attributeSubheader.numAttributes; attIndex > 0; attIndex--) {      i=attIndex - 1;      k=attributeLocation + 10 + attributeSubheader.tableOffset+ ((attributeSubheader.numAttributes - attIndex) * 8);      binFile.seek(k);      attributeOffsetRecords[i]=new AttributeOffsetRecord();      attributeOffsetRecords[i].read(binFile);      if (Debug.debugging("rpfdetail")) {        Debug.output(" ##" + (++j) + " at "+ k+ " => attrib ID '"+ attributeOffsetRecords[i].attributeId+ "'|Param ID '"+ attributeOffsetRecords[i].parameterId+ "'|offset '"+ attributeOffsetRecords[i].offset+ "'");      }    }    for (i=attributeOffsetRecords.length - 1; i >= 0; i--) {      attributeOffsetRecord=attributeOffsetRecords[i];      binFile.seek(attributeLocation + 10 + attributeOffsetRecord.offset);switch (attributeOffsetRecord.attributeId) {case 1:        currencyDate=binFile.readFixedLengthString(8);      break;case 2:    productionDate=binFile.readFixedLengthString(8);  break;case 3:significantDate=binFile.readFixedLengthString(8);break;case 4:if ((int)attributeOffsetRecord.parameterId == 1) chartSeriesCode=binFile.readFixedLengthString(10); else if ((int)attributeOffsetRecord.parameterId == 2) mapDesignationCode=binFile.readFixedLengthString(8); else if ((int)attributeOffsetRecord.parameterId == 3) oldHorDatum=binFile.readFixedLengthString(4); else if ((int)attributeOffsetRecord.parameterId == 4) edition=binFile.readFixedLengthString(7);break;case 5:if ((int)attributeOffsetRecord.parameterId == 1) projectionCode=binFile.readFixedLengthString(2); else if ((int)attributeOffsetRecord.parameterId == 2) projectionA=binFile.readFloat(); else if ((int)attributeOffsetRecord.parameterId == 3) projectionB=binFile.readFloat(); else if ((int)attributeOffsetRecord.parameterId == 4) projectionC=binFile.readFloat(); else if ((int)attributeOffsetRecord.parameterId == 5) projectionD=binFile.readFloat();break;case 6:vertDatumCode=binFile.readFixedLengthString(4);break;case 7:horDatumCode=binFile.readFixedLengthString(4);break;case 8:if ((int)attributeOffsetRecord.parameterId == 1) vertAbsAccuracy=(long)binFile.readInteger(); else if ((int)attributeOffsetRecord.parameterId == 2) vertAbsUnits=(int)binFile.readShort();break;case 9:if ((int)attributeOffsetRecord.parameterId == 1) horAbsAccuracy=(long)binFile.readInteger(); else if ((int)attributeOffsetRecord.parameterId == 2) horAbsUnits=(int)binFile.readShort();break;case 10:if ((int)attributeOffsetRecord.parameterId == 1) vertRelAccuracy=(long)binFile.readInteger(); else if ((int)attributeOffsetRecord.parameterId == 2) vertRelUnits=(int)binFile.readShort();break;case 11:if ((int)attributeOffsetRecord.parameterId == 1) horRelAccuracy=(long)binFile.readInteger(); else if ((int)attributeOffsetRecord.parameterId == 2) horRelUnits=(int)binFile.readShort();break;case 12:ellipsoidCode=binFile.readFixedLengthString(3);break;case 13:soundingDatumCode=binFile.readFixedLengthString(4);break;case 14:navSystemCode=(int)binFile.readShort();break;case 15:gridCode=binFile.readFixedLengthString(2);break;case 16:if ((int)attributeOffsetRecord.parameterId == 1) eMagChange=binFile.readFloat(); else if ((int)attributeOffsetRecord.parameterId == 2) eMagChangeUnits=(int)binFile.readShort();break;case 17:if ((int)attributeOffsetRecord.parameterId == 1) wMagChange=binFile.readFloat(); else if ((int)attributeOffsetRecord.parameterId == 2) wMagChangeUnits=(int)binFile.readShort();break;case 18:if ((int)attributeOffsetRecord.parameterId == 1) magAngle=binFile.readFloat(); else if ((int)attributeOffsetRecord.parameterId == 2) magAngleUnits=(int)binFile.readShort();break;case 19:if ((int)attributeOffsetRecord.parameterId == 1) gridConver=binFile.readFloat(); else if ((int)attributeOffsetRecord.parameterId == 2) gridConverUnits=(int)binFile.readShort();break;case 20:if ((int)attributeOffsetRecord.parameterId == 1) highElevation=binFile.readDouble(); else if ((int)attributeOffsetRecord.parameterId == 2) highElevationUnits=(int)binFile.readShort(); else if ((int)attributeOffsetRecord.parameterId == 3) highLat=binFile.readDouble(); else if ((int)attributeOffsetRecord.parameterId == 4) highLon=binFile.readDouble();break;case 21:legendFileName=binFile.readFixedLengthString(12);break;case 22:if ((int)attributeOffsetRecord.parameterId == 1) dataSource=binFile.readFixedLengthString(12); else if ((int)attributeOffsetRecord.parameterId == 2) gsd=(long)binFile.readInteger();break;case 23:dataLevel=(int)binFile.readShort();break;}}} catch (IOException e) {Debug.error("RpfAttributes: read(): File IO Error!\n" + e);return false;}catch (FormatException f) {Debug.error("RpfAttributes: read(): File IO Format error!\n" + f);return false;}return true;}  }
class C{  public void ageBusinessObjectData(BusinessObjectDataEntity businessObjectDataEntity,long offsetInDays){  businessObjectDataEntity.setCreatedOn(new Timestamp(businessObjectDataEntity.getCreatedOn().getTime() - offsetInDays * 86400000L));  businessObjectDataDao.saveAndRefresh(businessObjectDataEntity);}  }
class C{  protected synchronized void computeInitialCheckListPairStates(){  Map<String,CandidatePair> pairsToWait=new Hashtable<>();  for (  CandidatePair pair : this) {    CandidatePair prevPair=pairsToWait.get(pair.getFoundation());    if (prevPair == null) {      pairsToWait.put(pair.getFoundation(),pair);      continue;    }    if (prevPair.getParentComponent() == pair.getParentComponent()) {      if (pair.getPriority() > prevPair.getPriority()) {        pairsToWait.put(pair.getFoundation(),pair);      }    } else {      if (pair.getParentComponent().getComponentID() < prevPair.getParentComponent().getComponentID()) {        pairsToWait.put(pair.getFoundation(),pair);      }    }  }  for (  CandidatePair pairToWait : pairsToWait.values())   pairToWait.setStateWaiting();}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdataappenddata.class,args);}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_ENTITY___TRACE_OPTIONS_1:    return ((InternalEList<?>)getTraceOptions_1()).basicRemove(otherEnd,msgs);case UmplePackage.TRACE_ENTITY___ANONYMOUS_TRACE_ENTITY_11:  return ((InternalEList<?>)getAnonymous_traceEntity_1_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public XMLTokener(String s){  super(s);}  }
class C{  public void validateExpansion(VirtualPool virtualPool,BlockVirtualPoolUpdateParam updateParam,DbClient dbClient){  if (updateParam.allowsExpansion() && VirtualPool.vPoolSpecifiesMirrors(virtualPool,dbClient) && (updateParam.getProtection() == null || updateParam.getProtection().getContinuousCopies() == null || updateParam.getProtection().getContinuousCopies().getMaxMirrors() == null || updateParam.getProtection().getContinuousCopies().getMaxMirrors() != VirtualPoolProtectionMirrorParam.MAX_DISABLED)) {    throw APIException.badRequests.protectionVirtualPoolDoesNotSupportExpandingMirrors(virtualPool.getId());  }}  }
class C{  public JLookupSwitchStmt(Value key,List lookupValues,List targets,Unit defaultTarget){  this(Jimple.v().newImmediateBox(key),lookupValues,getTargetBoxesArray(targets),Jimple.v().newStmtBox(defaultTarget));}  }
class C{  protected final void doRun(){  boolean isStart=true;  List<String> newArgs=new ArrayList<String>();  for (int i=0; i < this.args.length; i++) {    if (this.args[i].equalsIgnoreCase("-start")) {      isStart=true;    } else     if (this.args[i].equalsIgnoreCase("-stop")) {      isStart=false;    } else     if (this.args[i].equalsIgnoreCase("-port")) {      this.port=Integer.parseInt(this.args[i + 1]);      i++;    } else {      newArgs.add(this.args[i]);    }  }  String[] strArgs=new String[0];  this.args=newArgs.toArray(strArgs);  if (isStart) {    startServer();  } else {    stopServer();  }}  }
class C{  public EpsilonBoxDominanceArchive(double epsilon){  super(new EpsilonBoxDominanceComparator(epsilon));}  }
class C{  public boolean canPace(){  return true;}  }
class C{  public ComponentBuilder underlined(Boolean underlined){  this.current.setUnderlined(underlined);  return this;}  }
class C{  public GenericEntry insertSettings(String username,GenericEntry entry,String setting) throws IOException, MalformedURLException, ServiceException {  URL singleUrl=buildSettingsUrl(username,setting);  return insert(singleUrl,entry);}  }
class C{  private boolean downloadFile(final String file){  boolean res=tryDownloadFromPreferredLocation(file);  if (res) {    return true;  }  System.out.println("Downloading " + file + " ...");  final HttpClient httpClient=new HttpClient(serverFolder + file,true);  httpClient.setProgressListener(updateProgressBar);  if (!httpClient.fetchFile(jarFolder + file)) {    UpdateGUIDialogs.messageBox("Sorry, an error occurred while downloading the update at file " + file);    return false;  }  try {    final File fileObj=new File(jarFolder + file);    final int shouldSize=Integer.parseInt(updateProp.getProperty("file-size." + file,""));    String signature=updateProp.getProperty("file-signature." + file);    if ((fileObj.length() != shouldSize) || !SignatureVerifier.get().checkSignature(jarFolder + file,signature)) {      UpdateGUIDialogs.messageBox("Sorry, an error occurred while downloading the update.\r\nThe signature of " + file + " does not match.\r\nWe got "+ fileObj.length()+ " bytes of "+ shouldSize);      updateProgressBar.dispose();      return false;    }    bootProp.put("file-signature." + file,signature);  } catch (  final NumberFormatException e) {    e.printStackTrace(System.err);    updateProgressBar.dispose();    return false;  }  return true;}  }
class C{  public Dependency(String groupId,String artifactId,String version){  this.groupId=groupId;  this.artifactId=artifactId;  this.version=version;}  }
class C{  public static KindName typeKindName(Type t){  if (t.hasTag(TYPEVAR) || t.hasTag(CLASS) && (t.tsym.flags() & COMPOUND) != 0)   return KindName.BOUND; else   if (t.hasTag(PACKAGE))   return KindName.PACKAGE; else   if ((t.tsym.flags_field & ANNOTATION) != 0)   return KindName.ANNOTATION; else   if ((t.tsym.flags_field & INTERFACE) != 0)   return KindName.INTERFACE; else   return KindName.CLASS;}  }
class C{  public Matrix multiply(Matrix mx){  return new Matrix(multiply(values,mx.values));}  }
class C{  protected void onHitBoxTrigger(Entity a,Entity b,HitBox boxA,HitBox boxB){}  }
class C{  public LogisticRegressionDCD(){  this(1.0);}  }
class C{  int encrypt(byte[] plain,int plainOffset,int plainLen,byte[] cipher,int cipherOffset){  if ((plainLen % blockSize) != 0) {    throw new ProviderException("Internal error in input buffering");  }  int i;  int endIndex=plainOffset + plainLen;  for (; plainOffset < endIndex; plainOffset+=blockSize, cipherOffset+=blockSize) {    for (i=0; i < blockSize; i++) {      k[i]^=plain[i + plainOffset];    }    embeddedCipher.encryptBlock(k,0,cipher,cipherOffset);    for (i=0; i < blockSize; i++) {      k[i]=(byte)(plain[i + plainOffset] ^ cipher[i + cipherOffset]);    }  }  return plainLen;}  }
class C{  public BigdataGASRunner(final String[] args) throws ClassNotFoundException {  super(args);  Banner.banner();}  }
class C{  public ProxyConfig(Type type,String host,int port,String user,String password){  this(type,host,port,user,password,true,Collections.emptySet());}  }
class C{  public Observable<String> handleError(Observable<String> data){  return Observable.error(new RuntimeException("Not Implemented"));}  }
class C{  public static boolean initDebug(boolean InitCuda){  return StaticHelper.initOpenCV(InitCuda);}  }
class C{  final public MutableString append(final Object[] a,final CharSequence separator){  return append(a,0,a.length,separator);}  }
class C{  private Set<Term> addFieldsToArchive(List<ExtensionMapping> mappings,ArchiveFile af) throws GeneratorException {  Set<Term> mappedConceptTerms=new HashSet<Term>();  for (  ExtensionMapping m : mappings) {    String delimitedBy=StringUtils.trimToNull(m.getSource().getMultiValueFieldsDelimitedBy());    for (    PropertyMapping pm : m.getFields()) {      Term term=TERM_FACTORY.findTerm(pm.getTerm().qualifiedName());      if (af.hasTerm(term)) {        ArchiveField field=af.getField(term);        mappedConceptTerms.add(term);        if (field.getDelimitedBy() != null && !field.getDelimitedBy().equals(delimitedBy)) {          throw new GeneratorException("More than one type of multi-value field delimiter is being used in the source files mapped to the " + m.getExtension().getName() + " extension. Please either ensure all source files mapped to this extension use the same delimiter, otherwise just leave the delimiter blank.");        }      } else {        if ((pm.getIndex() != null && pm.getIndex() >= 0) || pm.getIndex() == null) {          log.debug("Handling property mapping for term: " + term.qualifiedName() + " (index "+ pm.getIndex()+ ")");          af.addField(buildField(term,delimitedBy));          mappedConceptTerms.add(term);        }      }    }  }  return mappedConceptTerms;}  }
class C{  public AggregateConstraintComparator(){  super();}  }
class C{  private void checkConflicts(TemplateSubPatternAssociation head,XPathContext xctxt,int targetNode,QName mode){}  }
class C{  public static void banner(Logger logger,Class<?> clazz,String methodName,String text){  String string=clazz.getSimpleName() + "." + methodName;  if (text != null) {    string+=" " + text;  }  logger.info("");  logger.info("*************************************************************");  logger.info("* " + string);  logger.info("*************************************************************");}  }
class C{  public static <T>long produced(AtomicLongFieldUpdater<T> updater,T instance,long toSub){  long r, u;  do {    r=updater.get(instance);    if (r == 0 || r == Long.MAX_VALUE) {      return r;    }    u=subOrZero(r,toSub);  } while (!updater.compareAndSet(instance,r,u));  return u;}  }
class C{  private void sendCalendarEvents(){  try {    TransactionBuilder builder=performInitialized("Send upcoming events");    BluetoothGattCharacteristic characteristic=getCharacteristic(MiBand2Service.UUID_UNKNOWN_CHARACTERISTIC3);    Prefs prefs=GBApplication.getPrefs();    int availableSlots=prefs.getInt(MiBandConst.PREF_MIBAND_RESERVE_ALARM_FOR_CALENDAR,0);    if (availableSlots > 0) {      CalendarEvents upcomingEvents=new CalendarEvents();      List<CalendarEvents.CalendarEvent> mEvents=upcomingEvents.getCalendarEventList(getContext());      int iteration=0;      for (      CalendarEvents.CalendarEvent mEvt : mEvents) {        if (iteration >= availableSlots || iteration > 2) {          break;        }        int slotToUse=2 - iteration;        Calendar calendar=Calendar.getInstance();        calendar.setTimeInMillis(mEvt.getBegin());        Alarm alarm=GBAlarm.createSingleShot(slotToUse,false,calendar);        queueAlarm(alarm,builder,characteristic);        iteration++;      }      builder.queue(getQueue());    }  } catch (  IOException ex) {    LOG.error("Unable to send Events to MI device",ex);  }}  }
class C{  private WebSocketCall createConnection(RecognizeOptions options){  String speechModel=options.model() == null ? "" : "?model=" + options.model();  Builder builder=new Request.Builder().url(url + speechModel);  if (token != null) {    builder.addHeader(HttpHeaders.X_WATSON_AUTHORIZATION_TOKEN,token);  }  if (defaultHeaders != null) {    for (    String key : defaultHeaders.names()) {      builder.header(key,defaultHeaders.get(key));    }    if (defaultHeaders.get(HttpHeaders.USER_AGENT) != null) {      String userAgent=RequestUtils.getUserAgent();      userAgent+=" " + defaultHeaders.get(HttpHeaders.USER_AGENT);      builder.header(HttpHeaders.USER_AGENT,userAgent);    }  }  return WebSocketCall.create(client,builder.build());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:51.011 -0500",hash_original_method="8137BED0F2B5219001CD3D42EAB84127",hash_generated_method="2CC9785B97D070C109318210A08BBBCC") public int markInputPosition(){  return ptr;}  }
class C{  public ContingencyTable(double tp,double fp,double tn,double fn){  mContingencyTable[POS][POS]=tp;  mContingencyTable[NEG][NEG]=tn;  mContingencyTable[NEG][POS]=fp;  mContingencyTable[POS][NEG]=fn;}  }
class C{  public boolean hasInMemory(final String key){  if (USE_MEMORY_CACHE) {    RecyclingBitmapDrawable bmp;    bmp=mMemoryCache.get(sanitizeKey(key));    return bmp != null;  } else {    return false;  }}  }
class C{  @DSSpec(DSCat.IO) @DSSource({DSSourceKind.IO}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:09.459 -0500",hash_original_method="DB2A9854396CBE443BE0852C07C28BD2",hash_generated_method="ECBC97609AB96B474232BAA571BAA079") @Override public int read(byte[] buf,int offset,int byteCount) throws IOException {  BlockGuard.getThreadPolicy().onNetwork();synchronized (readLock) {    checkOpen();    Arrays.checkOffsetAndCount(buf.length,offset,byteCount);    if (byteCount == 0) {      return 0;    }    return NativeCrypto.SSL_read(sslNativePointer,socket.getFileDescriptor$(),OpenSSLSocketImpl.this,buf,offset,byteCount,getSoTimeout());  }}  }
class C{  public GemfireRestException(String message){  super(message);}  }
class C{  private String validateHttpBindAddress(InetAddress val){  if (val == null) {    throw new IllegalArgumentException(LocalizedStrings.AgentConfigImpl_HTTPBINDADDRESS_MUST_NOT_BE_NULL.toLocalizedString());  }  return toString("",val);}  }
class C{  public void test_vmstat_header_and_data_parse(){  final Pattern pattern=VMStatCollector.pattern;  final String header="  r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st";  final String data="  1  0     96 178580 206520 1170604   56   12     0     7    1    0  1  0 99  3  0";{    final String[] fields=pattern.split(header.trim(),0);    for (int i=0; i < fields.length; i++) {      if (log.isInfoEnabled())       log.info("fields[" + i + "]=["+ fields[i]+ "]");    }    assertField(header,fields,2,"swpd");    assertField(header,fields,3,"free");    assertField(header,fields,6,"si");    assertField(header,fields,7,"so");    assertField(header,fields,12,"us");    assertField(header,fields,13,"sy");    assertField(header,fields,14,"id");    assertField(header,fields,15,"wa");  }{    final String[] fields=pattern.split(data.trim(),0);    assertField(data,fields,2,"96");    assertField(data,fields,3,"178580");    assertField(data,fields,6,"56");    assertField(data,fields,7,"12");    assertField(data,fields,12,"1");    assertField(data,fields,13,"0");    assertField(data,fields,14,"99");    assertField(data,fields,15,"3");  }}  }
class C{  public DecompoundedWord createCopy(){  DecompoundedWord s=DecompoundedWord.createFromString(toString());  s.setSplitPos(getSplitPos());  return s;}  }
class C{  public boolean isStructureOnly(){  return m_structureOnly;}  }
class C{  private boolean contains(Convex convex,Transform transform,Vector2 point){  double scale=this.simulation.getCamera().getScale();  if (convex instanceof Segment) {    Segment segment=(Segment)convex;    return segment.contains(point,transform,0.2 * 32.0 / scale);  }  return convex.contains(point,transform);}  }
class C{  public RRDatabase(String name) throws IOException {  this(new File(name));}  }
class C{  public void computeFourier(int kmax){  a=new Complex[kmax + 1];  b=new Complex[kmax + 1];  Complex AP, AM, BP, BM, E0P, E0M, E1P, E1M;  Complex DX, DT;  double PER=(t[NPT] - t[0]);  double factor;  for (int k=0; k <= kmax; k++) {    if (k == 0) {      double sumX=0.0;      double sumY=0.0;      for (int i=0; i < NPT; i++) {        factor=(t[(i + 1)] - t[i]);        sumX=sumX + ((points[(i + 1)].x + points[i].x) * factor);        sumY=sumY + ((points[(i + 1)].y + points[i].y) * factor);      }      a[k]=new Complex(sumX / (2. * PER),sumY / (2. * PER));      b[k]=new Complex(0,0);    } else {      double ZP=6.28318530718;      double A0=PER / (ZP * ZP);      double B0=1. / (ZP);      double P0=ZP / PER;      double XK=1. * k;      double PK=P0 * XK;      double PH=PK * t[0];      E1P=new Complex(Math.cos(PH),-Math.sin(PH));      E1M=E1P.conjugate();      AP=new Complex(0,0);      BP=new Complex(0,0);      AM=new Complex(0,0);      BM=new Complex(0,0);      for (int i=0; i < NPT; i++) {        DX=new Complex(points[(i + 1) % NPT].x - points[i].x,points[(i + 1) % NPT].y - points[i].y);        DT=new Complex(t[(i + 1)] - t[i],0);        if (DT.re() == 0) {          BP=BP.plus(DX.times(E1P));          BM=BM.plus(DX.times(E1M));        } else {          PH=PK * t[i + 1];          E0P=E1P;          E0M=E1M;          E1P=new Complex(Math.cos(PH),-Math.sin(PH));          E1M=E1P.conjugate();          DX=DX.divides(DT);          AP=AP.plus(DX.times(E1P.minus(E0P)));          AM=AM.plus(DX.times(E1M.minus(E0M)));        }        a[k]=AP.times(A0 / (XK * XK)).minus(new Complex(0,B0 / XK).times(BP));        b[k]=AM.times(A0 / (XK * XK)).plus(new Complex(0,B0 / XK).times(BM));      }    }  }}  }
class C{  public Jerry each(JerryNodeFunction function){  for (int i=0; i < nodes.length; i++) {    Node node=nodes[i];    if (function.onNode(node,i) == false) {      break;    }  }  return this;}  }
class C{  protected Popup(){}  }
class C{  public void clearBreakPoint(int line){  if (sourceInfo.breakableLine(line)) {    boolean changed=sourceInfo.breakpoint(line,false);    if (changed) {      fileHeader.repaint();    }  }}  }
class C{  @Override protected void doGet(HttpServletRequest request,HttpServletResponse response){  processGetRequest(request,response);}  }
class C{  private View inflateHintView(@Nullable final ViewGroup parent){  TextView view=(TextView)LayoutInflater.from(context).inflate(hintViewId,parent,false);  view.setText(hint);  if (hintColor != null) {    view.setTextColor(hintColor);  }  return view;}  }
class C{  public void testStressInsertWhereGraph() throws Exception {  final int LIMIT=10;  int i=0;  StressTestOpEnum lastOp=null;  try {    for (i=0; i < LIMIT; i++) {      lastOp=StressTestOpEnum.Update;      testInsertWhereGraph();      lastOp=StressTestOpEnum.DropAll;      testDropAll();      lastOp=StressTestOpEnum.LoadFile;      doLoadFile();    }  } catch (  Throwable t) {    throw new RuntimeException("Iteration " + (i + 1) + " of "+ LIMIT+ ", lastOp="+ lastOp,t);  }}  }
class C{  public void resetOriginals(){  mStartingStartTrim=0;  mStartingEndTrim=0;  mStartingRotation=0;  setStartTrim(0);  setEndTrim(0);  setRotation(0);}  }
class C{  public static String millisToString(long millis){  boolean negative=millis < 0;  millis=Math.abs(millis);  millis/=1000;  int sec=(int)(millis % 60);  millis/=60;  int min=(int)(millis % 60);  millis/=60;  int hours=(int)millis;  String time;  DecimalFormat format=(DecimalFormat)NumberFormat.getInstance(Locale.US);  format.applyPattern("00");  if (millis > 0) {    time=(negative ? "-" : "") + hours + ":"+ format.format(min)+ ":"+ format.format(sec);  } else {    time=(negative ? "-" : "") + min + ":"+ format.format(sec);  }  return time;}  }
class C{  public boolean hasMatchType(){  return getMatchType() != null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:32:01.543 -0500",hash_original_method="1E6EE1FACBE8E24D9D58E940A1542C55",hash_generated_method="A6B1509A6B873269A1DB56B7CD16B751") public boolean executeKeyEvent(KeyEvent event){  mTempRect.setEmpty();  if (!canScroll()) {    if (isFocused() && event.getKeyCode() != KeyEvent.KEYCODE_BACK) {      View currentFocused=findFocus();      if (currentFocused == this)       currentFocused=null;      View nextFocused=FocusFinder.getInstance().findNextFocus(this,currentFocused,View.FOCUS_DOWN);      return nextFocused != null && nextFocused != this && nextFocused.requestFocus(View.FOCUS_DOWN);    }    return false;  }  boolean handled=false;  if (event.getAction() == KeyEvent.ACTION_DOWN) {switch (event.getKeyCode()) {case KeyEvent.KEYCODE_DPAD_UP:      if (!event.isAltPressed()) {        handled=arrowScroll(View.FOCUS_UP);      } else {        handled=fullScroll(View.FOCUS_UP);      }    break;case KeyEvent.KEYCODE_DPAD_DOWN:  if (!event.isAltPressed()) {    handled=arrowScroll(View.FOCUS_DOWN);  } else {    handled=fullScroll(View.FOCUS_DOWN);  }break;case KeyEvent.KEYCODE_SPACE:pageScroll(event.isShiftPressed() ? View.FOCUS_UP : View.FOCUS_DOWN);break;}}return handled;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:00.424 -0500",hash_original_method="F060452392542B1DFA01F7103620BB37",hash_generated_method="DB1667D8182DA799F631A5B078EC58E6") public boolean sendAYT(long timeout) throws IOException, IllegalArgumentException, InterruptedException {  return (_sendAYT(timeout));}  }
class C{  public static void w(String tag,String msg,Object... args){  if (sLevel > LEVEL_WARNING) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.w(tag,msg);}  }
class C{  private void disableConsistencyGroup(ConsistencyGroupUID cgUID) throws FunctionalAPIActionFailedException_Exception, FunctionalAPIInternalError_Exception {  functionalAPI.disableConsistencyGroup(cgUID);  String cgName=functionalAPI.getGroupName(cgUID);  logger.info("Protection disabled on CG: " + cgName);  RecoverPointImageManagementUtils imageManager=new RecoverPointImageManagementUtils();  imageManager.waitForCGLinkState(functionalAPI,cgUID,PipeState.UNKNOWN);}  }
class C{  private static Properties loadPropertiesFromClasspath(String propertiesFile){  Properties properties=new Properties();  try (InputStream is=Thread.currentThread().getContextClassLoader().getResourceAsStream(propertiesFile)){    properties.load(is);  } catch (  IOException e) {    throw new RuntimeException("failed to load properties",e);  }  return properties;}  }
class C{  public void mouseExited(MouseEvent e){}  }
class C{  @Deprecated public static boolean isCharCJK(final char c){  return TerminalTextUtils.isCharCJK(c);}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"scasb");  if (instruction.getOperands().size() != 0) {    throw new InternalTranslationException("Error: Argument instruction is not a scasb instruction (invalid number of operands)");  }  new ScasGenerator().generate(environment,ReilHelpers.toReilAddress(instruction.getAddress()).toLong(),OperandSize.BYTE,instructions);}  }
class C{  public <T>ImmutableList<String> validate(T o){  return validate(o,Default.class);}  }
class C{  private static void listLogs(Logging service,String projectId) throws IOException {  final int pageSize=3;  final int resourcePrefixLength=("/projects/" + projectId + "/logs/").length();  String nextPageToken="";  do {    ListLogsResponse response=service.projects().logs().list(projectId).setPageToken(nextPageToken).setPageSize(pageSize).execute();    if (response.isEmpty()) {      break;    }    for (    Log log : response.getLogs()) {      System.out.println(URLDecoder.decode(log.getName().substring(resourcePrefixLength),"utf-8"));    }    nextPageToken=response.getNextPageToken();  } while (!Strings.isNullOrEmpty(nextPageToken));  System.out.println("Done.");}  }
class C{  public final java_cup.runtime.Symbol CUP$Parser$do_action(int CUP$Parser$act_num,java_cup.runtime.lr_parser CUP$Parser$parser,java.util.Stack CUP$Parser$stack,int CUP$Parser$top) throws java.lang.Exception {  java_cup.runtime.Symbol CUP$Parser$result;switch (CUP$Parser$act_num) {case 38:{      Double RESULT=null;      int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;      int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;      Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;      RESULT=new Double(Math.ceil(e));      CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);    }  return CUP$Parser$result;case 37:{  Double RESULT=null;  int baseleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).left;  int baseright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).right;  Double base=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)).value;  int exponentleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;  int exponentright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;  Double exponent=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;  RESULT=new Double(Math.pow(base,exponent));  CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 5)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 36:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.floor(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 35:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.rint(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 34:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.tan(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 33:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.cos(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 32:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.sin(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 31:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.exp(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 30:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.log(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 29:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.sqrt(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 28:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=new Double(Math.abs(e));CUP$Parser$result=parser.getSymbolFactory().newSymbol("funcexpr",4,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 27:{Double RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Double(l.doubleValue() / r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 26:{Double RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Double(l.doubleValue() * r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 25:{Double RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Double(l.doubleValue() - r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 24:{Double RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Double(l.doubleValue() + r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("opexpr",3,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 23:{Double RESULT=null;int fleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int fright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double f=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=f;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 22:{Double RESULT=null;int oleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int oright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double o=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=o;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 21:{Double RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Double e=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=e;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 20:{Double RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int aright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;String a=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;if (parser.getSymbols().containsKey(a)) RESULT=(Double)parser.getSymbols().get(a); else throw new IllegalStateException("Unknown symbol '" + a + "'!");CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 19:{Double RESULT=null;int nleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int nright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double n=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=n;CUP$Parser$result=parser.getSymbolFactory().newSymbol("expr",2,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 18:{Boolean RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int aright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;String a=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;if (parser.getSymbols().containsKey(a)) RESULT=(parser.getSymbols().get(a) instanceof Double) && Utils.isMissingValue((Double)parser.getSymbols().get(a)); else throw new IllegalStateException("Unknown symbol '" + a + "'!");CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 3)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 17:{Boolean RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int aright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;String a=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int sleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int sright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;String s=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;if (parser.getSymbols().containsKey(a)) RESULT=(parser.getSymbols().get(a) instanceof String) && ((String)parser.getSymbols().get(a)).matches(s); else throw new IllegalStateException("Unknown symbol '" + a + "'!");CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 16:{Boolean RESULT=null;int aleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int aright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;String a=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int sleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int sright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;String s=(String)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;if (parser.getSymbols().containsKey(a)) RESULT=(parser.getSymbols().get(a) instanceof String) && ((String)parser.getSymbols().get(a)).equals(s); else throw new IllegalStateException("Unknown symbol '" + a + "'!");CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 15:{Boolean RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Boolean l=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Boolean r=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=l || r;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 14:{Boolean RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Boolean l=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Boolean r=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=l && r;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 13:{Boolean RESULT=null;int bleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int bright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Boolean b=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=!b;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 12:{Boolean RESULT=null;int bleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int bright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Boolean b=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=b;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 11:{Boolean RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Boolean(l.doubleValue() == r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 10:{Boolean RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Boolean(l.doubleValue() >= r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 9:{Boolean RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Boolean(l.doubleValue() > r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 8:{Boolean RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Boolean(l.doubleValue() <= r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 7:{Boolean RESULT=null;int lleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).left;int lright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).right;Double l=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)).value;int rleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int rright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Double r=(Double)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=new Boolean(l.doubleValue() < r.doubleValue());CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 2)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 6:{Boolean RESULT=null;RESULT=new Boolean(false);CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 5:{Boolean RESULT=null;RESULT=new Boolean(true);CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 4:{Boolean RESULT=null;int bleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int bright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Boolean b=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;RESULT=b;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr",5,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 3:{Object RESULT=null;int eleft=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;int eright=((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;Boolean e=(Boolean)((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).value;parser.setResult(e);CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr_part",1,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 2:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr_list",0,((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;case 1:{Object RESULT=null;int start_valleft=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).left;int start_valright=((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).right;Object start_val=(Object)((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)).value;RESULT=start_val;CUP$Parser$result=parser.getSymbolFactory().newSymbol("$START",0,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}CUP$Parser$parser.done_parsing();return CUP$Parser$result;case 0:{Object RESULT=null;CUP$Parser$result=parser.getSymbolFactory().newSymbol("boolexpr_list",0,((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top - 1)),((java_cup.runtime.Symbol)CUP$Parser$stack.peek()),RESULT);}return CUP$Parser$result;default :throw new Exception("Invalid action number found in internal parse table");}}  }
class C{  public static boolean isNewline(String input){  return BREAKS.contains(input);}  }
class C{  public IntArrayList(int[] elements){  elements(elements);}  }
class C{  public boolean offer(byte[] data) throws KeeperException, InterruptedException {  TimerContext time=stats.time(dir + "_offer");  try {    return createData(dir + "/" + prefix,data,CreateMode.PERSISTENT_SEQUENTIAL) != null;  }  finally {    time.stop();  }}  }
class C{  @Override public void clear(){  this._map.clear();}  }
class C{  public void startSyncJob(){  for (int subscribers=0; subscribers < SUBSCRIBERS_EXPECTED; subscribers++) {    syncservice.recv(0);    syncservice.send("".getBytes(),0);  }  syncStarted=true;}  }
class C{  public static void copyToClipboard(Transferable t){  ClipboardHelper.copyToClipboard(t);}  }
class C{  public static void fillMatrix_2D(int n1,int n2,double[][] m){  Random r=new Random(2);  for (int i=0; i < n1; i++) {    for (int j=0; j < n2; j++) {      m[i][j]=r.nextDouble();    }  }}  }
class C{  public Conversion avoidSet(boolean avoidSet){  conversion.avoidSet=avoidSet;  return this;}  }
class C{  public void processServerResponse(int response,ResponseData rawData){  mLastResponse=response;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.761 -0500",hash_original_method="FBABDEBA24E2FAF25491977C12B27187",hash_generated_method="72803833DB15AD29B531821D4FB85D33") public Reader retrieveArticleHeader() throws IOException {  return retrieveArticleHeader(null);}  }
class C{  public void releaseService(BeanContextChild child,Object requestor,Object service){  if (child == null || requestor == null || service == null) {    throw new NullPointerException();  }synchronized (globalHierarchyLock) {    BCSSChild bcssChild;synchronized (children) {      bcssChild=(BCSSChild)children.get(child);    }    if (bcssChild == null) {      throw new IllegalArgumentException(Messages.getString("beans.65"));    }    releaseServiceWithoutCheck(child,bcssChild,requestor,service,false);  }}  }
class C{  private void handleNetworkStateChanges(AWSNetworkServiceCreationContext context){switch (context.networkCreationStage) {case CLIENT:    getAWSAsyncClient(context,AWSNetworkCreationStage.GET_REMOTE_VPC);  break;case GET_REMOTE_VPC:refreshVPCInformation(context,AWSNetworkCreationStage.GET_LOCAL_NETWORK_STATES);break;case GET_LOCAL_NETWORK_STATES:getLocalNetworkStates(context,AWSNetworkCreationStage.GET_SUBNETS);break;case GET_SUBNETS:getSubnetInformation(context,AWSNetworkCreationStage.GET_INTERNET_GATEWAY);break;case GET_INTERNET_GATEWAY:getInternetGatewayInformation(context,AWSNetworkCreationStage.GET_MAIN_ROUTE_TABLE);break;case GET_MAIN_ROUTE_TABLE:getMainRouteTableInformation(context,AWSNetworkCreationStage.CREATE_NETWORKSTATE);break;case CREATE_NETWORKSTATE:createNetworkStateOperations(context,AWSNetworkCreationStage.SIGNAL_COMPLETION);break;case SIGNAL_COMPLETION:setOperationDurationStat(context.awsAdapterOperation);context.awsAdapterOperation.setBody(createResponse(context));context.awsAdapterOperation.complete();break;default :Throwable t=new IllegalArgumentException("Unknown AWS enumeration:network state creation stage");AdapterUtils.sendFailurePatchToEnumerationTask(this,context.networkRequest.enumerationRequest.taskReference,t);break;}}  }
class C{  public static boolean isEmpty(float[] array){  return array == null || array.length == 0;}  }
class C{  public SearchManagerService(Context context){  mContext=context;  mContext.registerReceiver(new BootCompletedReceiver(),new IntentFilter(Intent.ACTION_BOOT_COMPLETED));  mContext.registerReceiver(new UserReceiver(),new IntentFilter(Intent.ACTION_USER_REMOVED));  new MyPackageMonitor().register(context,null,UserHandle.ALL,true);}  }
class C{  @Override public boolean equals(Object obj){  if (obj == this) {    return true;  }  if (!(obj instanceof Outlier)) {    return false;  }  Outlier that=(Outlier)obj;  if (!this.point.equals(that.point)) {    return false;  }  if (this.radius != that.radius) {    return false;  }  return true;}  }
class C{  public void transform(Point2D[] ptSrc,int srcOff,Point2D[] ptDst,int dstOff,int numPts){  int state=this.state;  while (--numPts >= 0) {    Point2D src=ptSrc[srcOff++];    double x=src.getX();    double y=src.getY();    Point2D dst=ptDst[dstOff++];    if (dst == null) {      if (src instanceof Point2D.Double) {        dst=new Point2D.Double();      } else {        dst=new Point2D.Float();      }      ptDst[dstOff - 1]=dst;    }switch (state) {default :      stateError();    return;case (APPLY_SHEAR | APPLY_SCALE | APPLY_TRANSLATE):  dst.setLocation(x * m00 + y * m01 + m02,x * m10 + y * m11 + m12);break;case (APPLY_SHEAR | APPLY_SCALE):dst.setLocation(x * m00 + y * m01,x * m10 + y * m11);break;case (APPLY_SHEAR | APPLY_TRANSLATE):dst.setLocation(y * m01 + m02,x * m10 + m12);break;case (APPLY_SHEAR):dst.setLocation(y * m01,x * m10);break;case (APPLY_SCALE | APPLY_TRANSLATE):dst.setLocation(x * m00 + m02,y * m11 + m12);break;case (APPLY_SCALE):dst.setLocation(x * m00,y * m11);break;case (APPLY_TRANSLATE):dst.setLocation(x + m02,y + m12);break;case (APPLY_IDENTITY):dst.setLocation(x,y);break;}}}  }
class C{  public PoolingByteArrayOutputStream(ByteArrayPool pool){  this(pool,DEFAULT_SIZE);}  }
class C{  @Override public long position(byte[] pattern,long start) throws SQLException {  if (isDebugEnabled()) {    debugCode("position(" + quoteBytes(pattern) + ", "+ start+ ");");  }  if (Constants.BLOB_SEARCH) {    try {      checkClosed();      if (pattern == null) {        return -1;      }      if (pattern.length == 0) {        return 1;      }      BufferedInputStream in=new BufferedInputStream(value.getInputStream());      IOUtils.skipFully(in,start - 1);      int pos=0;      int patternPos=0;      while (true) {        int x=in.read();        if (x < 0) {          break;        }        if (x == (pattern[patternPos] & 0xff)) {          if (patternPos == 0) {            in.mark(pattern.length);          }          if (patternPos == pattern.length) {            return pos - patternPos;          }          patternPos++;        } else {          if (patternPos > 0) {            in.reset();            pos-=patternPos;          }        }        pos++;      }      return -1;    } catch (    Exception e) {      throw logAndConvert(e);    }  }  throw unsupported("LOB search");}  }
class C{  public static IndicesExistsRequest indicesExistsRequest(String... indices){  return new IndicesExistsRequest(indices);}  }
class C{  public boolean canSoftwareBreakpoint(){  return targetInformation.getDebuggerOptions().canSoftwareBreakpoint();}  }
class C{  public Optional<Charset> charset(){  ImmutableSet<String> charsetValues=ImmutableSet.copyOf(parameters.get(CHARSET_ATTRIBUTE));switch (charsetValues.size()) {case 0:    return Optional.absent();case 1:  return Optional.of(Charset.forName(Iterables.getOnlyElement(charsetValues)));default :throw new IllegalStateException("Multiple charset values defined: " + charsetValues);}}  }
class C{  public static void assertAllQueuesEmpty(){  Iterator servers=cacheServer.getCacheServers().iterator();  while (servers.hasNext()) {    Iterator proxies=((CacheServerImpl)servers.next()).getAcceptor().getCacheClientNotifier().getClientProxies().iterator();    while (proxies.hasNext()) {      int qsize=((CacheClientProxy)proxies.next()).getQueueSize();      assertTrue("Queue size expected to be zero but is " + qsize,qsize == 0);    }  }}  }
class C{  public TriggerBuilder<T> withIdentity(String name,String group){  key=new TriggerKey(name,group);  return this;}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  private GraphicalNode createGraphicalNode(TaskGraphNode taskGraphNode){  GraphicalNode res=getGraphicalNodeByID(taskGraphNode.getID());  if (res != null) {    return res;  }  return new GraphicalNode(taskGraphNode);}  }
class C{  private void markerWithColoredIcon(GoogleMap googleMap,LatLng latLng,String publicId,String hexColor){  MarkerOptions options=new MarkerOptions();  options.position(latLng);  int color=Color.parseColor(hexColor);  float[] hsv=new float[3];  Color.colorToHSV(color,hsv);  float hue=hsv[0];  options.icon(BitmapDescriptorFactory.defaultMarker(hue));  Marker marker=googleMap.addMarker(options);  publicMarkerIds.put(marker.getId(),publicId);}  }
class C{  public HttpErrorResponseException(String message,int statusCode,String statusDescription,String responseMessage){  super(message);  this.statusCode=statusCode;  this.statusDescription=statusDescription;  this.responseMessage=responseMessage;}  }
class C{  private static boolean resolveEnable(Context context){  int state=context.getPackageManager().getApplicationEnabledSetting(DOWNLOAD_MANAGER_PACKAGE_NAME);  if (Build.VERSION.SDK_INT > Build.VERSION_CODES.JELLY_BEAN_MR2) {    return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_UNTIL_USED);  } else {    return !(state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DISABLED_USER);  }}  }
class C{  public double classifyInstance(Instance instance) throws Exception {  double[] dist=distributionForInstance(instance);  if (dist == null) {    throw new Exception("Null distribution predicted");  }switch (instance.classAttribute().type()) {case Attribute.NOMINAL:    double max=0;  int maxIndex=0;for (int i=0; i < dist.length; i++) {  if (dist[i] > max) {    maxIndex=i;    max=dist[i];  }}if (max > 0) {return maxIndex;} else {}case Attribute.NUMERIC:return dist[0];default :return -1;}}  }
class C{  public WordBoundary createWordBoundary(){  WordBoundaryImpl wordBoundary=new WordBoundaryImpl();  return wordBoundary;}  }
class C{  public AttractiveSector(int numberOfVariables,double[] xopt){  super(numberOfVariables);  this.xopt=xopt;}  }
class C{  public SuppressAnnotationType createSuppressAnnotation(){  final SuppressAnnotationType s=new SuppressAnnotationType();  s.setProject(getProject());  suppressAnnotations.add(s);  return s;}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (type: ");  result.append(type);  result.append(')');  return result.toString();}  }
class C{  public void dispose(){  if (regionItemProvider != null)   regionItemProvider.dispose();  if (transitionItemProvider != null)   transitionItemProvider.dispose();  if (finalStateItemProvider != null)   finalStateItemProvider.dispose();  if (choiceItemProvider != null)   choiceItemProvider.dispose();  if (statechartItemProvider != null)   statechartItemProvider.dispose();  if (entryItemProvider != null)   entryItemProvider.dispose();  if (exitItemProvider != null)   exitItemProvider.dispose();  if (reactionPropertyItemProvider != null)   reactionPropertyItemProvider.dispose();  if (scopeItemProvider != null)   scopeItemProvider.dispose();  if (synchronizationItemProvider != null)   synchronizationItemProvider.dispose();  if (stateItemProvider != null)   stateItemProvider.dispose();  if (importDeclarationItemProvider != null)   importDeclarationItemProvider.dispose();}  }
class C{  protected Query parseOriginalQuery(ExtendedSolrQueryParser up,String mainUserQuery,List<Clause> clauses,ExtendedDismaxConfiguration config){  Query query=null;  try {    up.setRemoveStopFilter(!config.stopwords);    up.exceptions=true;    query=up.parse(mainUserQuery);    if (shouldRemoveStopFilter(config,query)) {      up.setRemoveStopFilter(true);      query=up.parse(mainUserQuery);    }  } catch (  Exception e) {    up.exceptions=false;  }  if (query == null) {    return null;  }  if (query instanceof BooleanQuery) {    String mmSpec=config.minShouldMatch;    if (foundOperators(clauses,config.lowercaseOperators)) {      mmSpec=params.get(DisMaxParams.MM,"0%");    }    query=SolrPluginUtils.setMinShouldMatch((BooleanQuery)query,mmSpec,config.mmAutoRelax);  }  return query;}  }
class C{  @SuppressWarnings("unchecked") private void notifyVisualizableErrorListeners(VisualizableErrorEvent re){  Vector<VisualizableErrorListener> l;synchronized (this) {    l=(Vector<VisualizableErrorListener>)m_visualizableErrorListeners.clone();  }  if (l.size() > 0) {    for (int i=0; i < l.size(); i++) {      l.elementAt(i).acceptDataSet(re);    }  }}  }
class C{  public void dolly(double zDelta){  double distance=camera.getDistanceToCoR();  zDelta=zDelta * distance * 0.01;  if (((distance + zDelta) < closestDistance) && (zDelta < 0)) {    return;  }  direction.set(camera.getDirection());  location.set(camera.getLocation());  location.subtractLocal(direction.multiplyLocal(zDelta));  distance=location.distance(sceneBounds.getCenter());  if ((distance > sceneBounds.getRadius() * 4) && (zDelta > 0)) {    return;  }  camera.setLocation(location);  updateFromCamera();  updateCrosshair();  updateGeometricState(0);  changed.set(true);  updateStatus();}  }
class C{  public void clearStack(){  top=0;}  }
class C{  private boolean verifyDomainRangeLowerBoundInput(JComponent input){  JTextField textField=(JTextField)input;  String inputString=textField.getText();  try {    double domainLowerBound;    if (inputString.startsWith("-")) {      domainLowerBound=Double.parseDouble(inputString.substring(1));      domainLowerBound=-domainLowerBound;    } else {      domainLowerBound=Double.parseDouble(inputString);    }  } catch (  NumberFormatException e) {    textField.setForeground(Color.RED);    return false;  }  textField.setForeground(Color.BLACK);  return true;}  }
class C{  public void write(String str,int off,int len) throws IOException {  if (_output == null)   throw new IOException("Writer closed");  _output.append(str,off,off + len);}  }
class C{  private void searchModeChanged(){  setEnablementBasedOnSearchMode();  reset();}  }
class C{  public boolean execute(INode n){  if (!isValid(n)) {    return false;  }  FreeCellNode state=(FreeCellNode)n;  state.removeFree(card);  Column col=state.cols[nth];  col.add(card);  if (col.num == 1) {    state.sortMap();  }  return true;}  }
class C{  public void clear(){  al.clear();}  }
class C{  private static String trimCharEntity(String symbol){  int start=0;  int end=symbol.length();  if (symbol.charAt(0) == '&') {    start=1;  }  if (symbol.charAt(end - 1) == ';') {    end--;  }  return symbol.substring(start,end);}  }
class C{  public void testBug54095() throws Exception {  Connection testConn=getConnectionWithProps("useLegacyDatetimeCode=false");  Calendar testCal=Calendar.getInstance();  java.util.Date origDate=testCal.getTime();  PreparedStatement testPstmt=testConn.prepareStatement("SELECT ?");  testPstmt.setTimestamp(1,new Timestamp(0),testCal);  assertEquals("Calendar object shouldn't have changed after PreparedStatement.setTimestamp().",origDate,testCal.getTime());  ResultSet testRs=testPstmt.executeQuery();  testRs.next();  assertEquals("Calendar object shouldn't have changed after PreparedStatement.executeQuery().",origDate,testCal.getTime());  testRs.getTimestamp(1,testCal);  assertEquals("Calendar object shouldn't have changed after ResultSet.getTimestamp().",origDate,testCal.getTime());  testRs.close();  testPstmt.close();  testConn.close();}  }
class C{  public static Typeface robotoItalic(Context context){  return FontSourceProcessor.process(R.raw.roboto_italic,context);}  }
class C{  public static boolean isDataCenterInUse(DbClient dbClient,URI datacenterURI){  VcenterDataCenter dataCenter=dbClient.queryObject(VcenterDataCenter.class,datacenterURI);  if (dataCenter != null && !dataCenter.getInactive()) {    List<NamedElementQueryResultList.NamedElement> hostUris=listChildren(dbClient,dataCenter.getId(),Host.class,"label","vcenterDataCenter");    for (    NamedElementQueryResultList.NamedElement hostUri : hostUris) {      Host host=dbClient.queryObject(Host.class,hostUri.getId());      if (host != null && !host.getInactive() && NullColumnValueGetter.isNullURI(host.getComputeElement()) && isHostInUse(dbClient,host.getId())) {        return true;      }    }    List<NamedElementQueryResultList.NamedElement> clustersUris=listChildren(dbClient,dataCenter.getId(),Cluster.class,"label","vcenterDataCenter");    for (    NamedElementQueryResultList.NamedElement clusterUri : clustersUris) {      Cluster cluster=dbClient.queryObject(Cluster.class,clusterUri.getId());      if (cluster != null && !cluster.getInactive() && isClusterInExport(dbClient,clusterUri.getId())) {        return true;      }    }  }  return false;}  }
class C{  private void backupWidgets(BackupDataOutput data) throws IOException {  final ContentResolver cr=mContext.getContentResolver();  final int dpi=mContext.getResources().getDisplayMetrics().densityDpi;  int backupWidgetCount=0;  String where=LauncherSettings.Favorites.ITEM_TYPE + "=" + LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET+ " AND "+ getUserSelectionArg();  Cursor cursor=cr.query(LauncherSettings.Favorites.CONTENT_URI,FAVORITE_PROJECTION,where,null,null);  try {    cursor.moveToPosition(-1);    while (cursor.moveToNext()) {      final long id=cursor.getLong(ID_INDEX);      final String providerName=cursor.getString(APPWIDGET_PROVIDER_INDEX);      final ComponentName provider=ComponentName.unflattenFromString(providerName);      Key key=null;      String backupKey=null;      if (provider != null) {        key=getKey(Key.WIDGET,providerName);        backupKey=keyToBackupKey(key);      } else {        Log.w(TAG,"empty intent on appwidget: " + id);      }      if (mExistingKeys.contains(backupKey) && restoredBackupVersion >= 3) {        if (DEBUG)         Log.d(TAG,"already saved widget " + backupKey);        mKeys.add(key);      } else       if (backupKey != null) {        if (DEBUG)         Log.d(TAG,"I can count this high: " + backupWidgetCount);        if (backupWidgetCount < MAX_WIDGETS_PER_PASS) {          LauncherAppWidgetProviderInfo widgetInfo=null;          if (widgetInfo != null) {            if (DEBUG)             Log.d(TAG,"saving widget " + backupKey);            writeRowToBackup(key,packWidget(dpi,widgetInfo),data);            mKeys.add(key);            backupWidgetCount++;          }        } else {          if (VERBOSE)           Log.v(TAG,"deferring widget backup " + backupKey);          dataChanged();        }      }    }  }  finally {    cursor.close();  }}  }
class C{  public void removeNode(final ViewNode element){  Preconditions.checkNotNull(element,"Error: Element argument can not be null");  m_node.removeElement(element.getNative());}  }
class C{  public static Value createSmallLob(int type,byte[] small){  int precision;  if (type == Value.CLOB) {    precision=new String(small,Constants.UTF8).length();  } else {    precision=small.length;  }  return createSmallLob(type,small,precision);}  }
class C{  public void removeMessageListener(MessageListener listener){  m_notifier.remove(listener);}  }
class C{  public boolean waitForRedundancy(int minRedundancy){synchronized (this) {    StopWatch timer=new StopWatch(true);    try {      for (; ; ) {        if (getBucketRedundancy() >= minRedundancy) {          return true;        }        getProxyBucketRegion().getPartitionedRegion().checkReadiness();        if (isClosed()) {          return false;        }        long timeLeft=BUCKET_REDUNDANCY_WAIT - timer.elapsedTimeMillis();        if (timeLeft <= 0) {          return false;        }        if (logger.isDebugEnabled()) {          logger.debug("Waiting for bucket {}",this);        }        this.wait(timeLeft);      }    } catch (    InterruptedException e) {      Thread.currentThread().interrupt();    }    return false;  }}  }
class C{  public void fill(Shape s,Color color){  deviceFill(s.getPathIterator(new AffineTransform()),color);}  }
class C{  private RefactoringStatus createRenameChanges(IProgressMonitor monitor) throws CoreException {  Assert.isNotNull(monitor);  RefactoringStatus status=new RefactoringStatus();  try {    monitor.beginTask(RefactoringCoreMessages.RenameTypeParameterRefactoring_searching,2);    ICompilationUnit cu=fTypeParameter.getDeclaringMember().getCompilationUnit();    CompilationUnit root=RefactoringASTParser.parseWithASTProvider(cu,true,null);    CompilationUnitRewrite rewrite=new CompilationUnitRewrite(cu,root);    IMember member=fTypeParameter.getDeclaringMember();    ASTNode declaration=null;    if (member instanceof IMethod) {      declaration=ASTNodeSearchUtil.getMethodDeclarationNode((IMethod)member,root);    } else     if (member instanceof IType) {      declaration=ASTNodeSearchUtil.getAbstractTypeDeclarationNode((IType)member,root);    } else {      JavaPlugin.logErrorMessage("Unexpected sub-type of IMember: " + member.getClass().getName());      Assert.isTrue(false);    }    monitor.worked(1);    RenameTypeParameterVisitor visitor=new RenameTypeParameterVisitor(rewrite,fTypeParameter.getNameRange(),status);    if (declaration != null)     declaration.accept(visitor);    fChange=visitor.getResult();  }  finally {    monitor.done();  }  return status;}  }
class C{  public CertificateList toASN1Structure(){  return x509CRL;}  }
class C{  public boolean isEven(){  return isEven(value);}  }
class C{  public void checkSimpleBuilder(boolean registered) throws Exception {  startUp(registered);  BinaryObject binary=node1.binary().buildEnum(EnumType.class.getName(),EnumType.ONE.ordinal());  cacheBinary1.put(1,binary);  validateSimple(1,EnumType.ONE,registered);}  }
class C{  public byte[] fetchAny() throws BerException {  byte[] result=null;  final int backup=next;  try {    final int tag=fetchTag();    final int contentLength=fetchLength();    if (contentLength < 0)     throw new BerException();    final int tlvLength=next + contentLength - backup;    if (contentLength > (bytes.length - next))     throw new IndexOutOfBoundsException("Decoded length exceeds buffer");    final byte[] data=new byte[tlvLength];    java.lang.System.arraycopy(bytes,backup,data,0,tlvLength);    next=next + contentLength;    result=data;  } catch (  IndexOutOfBoundsException e) {    next=backup;    throw new BerException();  }  return result;}  }
class C{  public DividerItemDecoration(Context context){  final TypedArray styledAttributes=context.obtainStyledAttributes(ATTRS);  mDivider=styledAttributes.getDrawable(0);  styledAttributes.recycle();}  }
class C{  @Override public List<WebElement> findElements(By locator){  try {    (new WebDriverWait(appiumDriver,maxWaitTime)).until(ExpectedConditions.presenceOfAllElementsLocatedBy(locator));  } catch (  ElementNotVisibleException e) {    Reporter.log("Element not found: " + locator.toString());    captureScreenshot();    throw e;  }  return appiumDriver.findElements(locator);}  }
class C{  public Instances reduceDimensionality(Instances in) throws Exception {  if (m_attributeFilter == null) {    throw new Exception("No feature selection has been performed yet!");  }  if (m_transformer != null) {    Instances transformed=new Instances(m_transformer.transformedHeader(),in.numInstances());    for (int i=0; i < in.numInstances(); i++) {      transformed.add(m_transformer.convertInstance(in.instance(i)));    }    return Filter.useFilter(transformed,m_attributeFilter);  }  return Filter.useFilter(in,m_attributeFilter);}  }
class C{  @Nullable public Integer toLegacyId(String id){  BlockEntry entry=findById(id);  if (entry != null) {    return entry.legacyId;  } else {    return null;  }}  }
class C{  private void updateSynapseNodePositions(){  for (Iterator i=getChildrenIterator(); i.hasNext(); ) {    PNode node=(PNode)i.next();    if (node instanceof NeuronNode) {      NeuronNode neuronNode=(NeuronNode)node;      neuronNode.updateSynapseNodePositions();    }  }}  }
class C{  public Boolean isEFlip(){  return eFlip;}  }
class C{  public static <O>KNNQuery<O> precomputedKNNQuery(Database database,Relation<O> relation,DistanceFunction<? super O> distf,int k){  DistanceQuery<O> dq=database.getDistanceQuery(relation,distf);  KNNQuery<O> knnq=database.getKNNQuery(dq,k,DatabaseQuery.HINT_HEAVY_USE,DatabaseQuery.HINT_OPTIMIZED_ONLY,DatabaseQuery.HINT_NO_CACHE);  if (knnq instanceof PreprocessorKNNQuery) {    return knnq;  }  MaterializeKNNPreprocessor<O> preproc=new MaterializeKNNPreprocessor<>(relation,dq.getDistanceFunction(),k);  preproc.initialize();  return preproc.getKNNQuery(dq,k);}  }
class C{  public OutlierResult run(Relation<V> relation){  SimilarityQuery<V> snnInstance=similarityFunction.instantiate(relation);  FiniteProgress progress=LOG.isVerbose() ? new FiniteProgress("Assigning Subspace Outlier Degree",relation.size(),LOG) : null;  final WritableDoubleDataStore sod_scores=DataStoreUtil.makeDoubleStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC);  WritableDataStore<SODModel> sod_models=null;  if (models) {    sod_models=DataStoreUtil.makeStorage(relation.getDBIDs(),DataStoreFactory.HINT_STATIC,SODModel.class);  }  DoubleMinMax minmax=new DoubleMinMax();  for (DBIDIter iter=relation.iterDBIDs(); iter.valid(); iter.advance()) {    LOG.incrementProcessed(progress);    DBIDs neighborhood=getNearestNeighbors(relation,snnInstance,iter);    double[] center;    long[] weightVector;    double sod;    if (neighborhood.size() > 0) {      center=Centroid.make(relation,neighborhood).getArrayRef();      double[] variances=computePerDimensionVariances(relation,center,neighborhood);      double expectationOfVariance=Mean.of(variances);      weightVector=BitsUtil.zero(variances.length);      for (int d=0; d < variances.length; d++) {        if (variances[d] < alpha * expectationOfVariance) {          BitsUtil.setI(weightVector,d);        }      }      sod=subspaceOutlierDegree(relation.get(iter),center,weightVector);    } else {      center=relation.get(iter).toArray();      weightVector=null;      sod=0.;    }    if (sod_models != null) {      sod_models.put(iter,new SODModel(center,weightVector));    }    sod_scores.putDouble(iter,sod);    minmax.put(sod);  }  LOG.ensureCompleted(progress);  OutlierScoreMeta meta=new BasicOutlierScoreMeta(minmax.getMin(),minmax.getMax());  OutlierResult sodResult=new OutlierResult(meta,new MaterializedDoubleRelation("Subspace Outlier Degree","sod-outlier",sod_scores,relation.getDBIDs()));  if (sod_models != null) {    Relation<SODModel> models=new MaterializedRelation<>("Subspace Outlier Model","sod-outlier",new SimpleTypeInformation<>(SODModel.class),sod_models,relation.getDBIDs());    sodResult.addChildResult(models);  }  return sodResult;}  }
class C{  @SuppressWarnings("unchecked") protected RestManager initRestManager() throws SolrException {  PluginInfo restManagerPluginInfo=getSolrConfig().getPluginInfo(RestManager.class.getName());  NamedList<String> initArgs=null;  RestManager mgr=null;  if (restManagerPluginInfo != null) {    if (restManagerPluginInfo.className != null) {      mgr=resourceLoader.newInstance(restManagerPluginInfo.className,RestManager.class);    }    if (restManagerPluginInfo.initArgs != null) {      initArgs=(NamedList<String>)restManagerPluginInfo.initArgs;    }  }  if (mgr == null)   mgr=new RestManager();  if (initArgs == null)   initArgs=new NamedList<>();  String collection=coreDescriptor.getCollectionName();  StorageIO storageIO=ManagedResourceStorage.newStorageIO(collection,resourceLoader,initArgs);  mgr.init(resourceLoader,initArgs,storageIO);  return mgr;}  }
class C{  public void compose(StylesheetRoot sroot) throws javax.xml.transform.TransformerException {  super.compose(sroot);  StylesheetRoot.ComposeState cstate=sroot.getComposeState();  java.util.Vector vnames=cstate.getVariableNames();  if (null != m_caseorder_avt)   m_caseorder_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_dataType_avt)   m_dataType_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_lang_avt)   m_lang_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_order_avt)   m_order_avt.fixupVariables(vnames,cstate.getGlobalsSize());  if (null != m_selectExpression)   m_selectExpression.fixupVariables(vnames,cstate.getGlobalsSize());}  }
class C{  private long nextPowerOfTwo(long val){  long res=1;  while (res < val)   res=res << 1;  if (res < 0)   throw new IllegalArgumentException("Value is too big to find positive pow2: " + val);  return res;}  }
class C{  public static double deepInstanceOf(JavaClass x,JavaClass y) throws ClassNotFoundException {  return Analyze.deepInstanceOf(x,y);}  }
class C{  public KMLInputStream(InputStream sourceStream,URI uri) throws IOException {  if (sourceStream == null) {    String message=Logging.getMessage("nullValue.InputStreamIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  this.inputStream=sourceStream;  this.uri=uri;}  }
class C{  protected void LocationPathPattern() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  final int RELATIVE_PATH_NOT_PERMITTED=0;  final int RELATIVE_PATH_PERMITTED=1;  final int RELATIVE_PATH_REQUIRED=2;  int relativePathStatus=RELATIVE_PATH_NOT_PERMITTED;  appendOp(2,OpCodes.OP_LOCATIONPATHPATTERN);  if (lookahead('(',1) && (tokenIs(Keywords.FUNC_ID_STRING) || tokenIs(Keywords.FUNC_KEY_STRING))) {    IdKeyPattern();    if (tokenIs('/')) {      nextToken();      if (tokenIs('/')) {        appendOp(4,OpCodes.MATCH_ANY_ANCESTOR);        nextToken();      } else {        appendOp(4,OpCodes.MATCH_IMMEDIATE_ANCESTOR);      }      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);      m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_FUNCTEST);      relativePathStatus=RELATIVE_PATH_REQUIRED;    }  } else   if (tokenIs('/')) {    if (lookahead('/',1)) {      appendOp(4,OpCodes.MATCH_ANY_ANCESTOR);      nextToken();      relativePathStatus=RELATIVE_PATH_REQUIRED;    } else {      appendOp(4,OpCodes.FROM_ROOT);      relativePathStatus=RELATIVE_PATH_PERMITTED;    }    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 2,4);    m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH) - 1,OpCodes.NODETYPE_ROOT);    nextToken();  } else {    relativePathStatus=RELATIVE_PATH_REQUIRED;  }  if (relativePathStatus != RELATIVE_PATH_NOT_PERMITTED) {    if (!tokenIs('|') && (null != m_token)) {      RelativePathPattern();    } else     if (relativePathStatus == RELATIVE_PATH_REQUIRED) {      error(XPATHErrorResources.ER_EXPECTED_REL_PATH_PATTERN,null);    }  }  m_ops.setOp(m_ops.getOp(OpMap.MAPINDEX_LENGTH),OpCodes.ENDOP);  m_ops.setOp(OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) + 1);  m_ops.setOp(opPos + OpMap.MAPINDEX_LENGTH,m_ops.getOp(OpMap.MAPINDEX_LENGTH) - opPos);}  }
class C{  public static byte[] decode(byte[] source,int off,int len) throws Base64DecoderException {  return decode(source,off,len,DECODABET);}  }
class C{  @Override public String toString(){  StringBuffer result=new StringBuffer();  for (int i=0; i < data.length; i++) {    result.append((i == 0 ? "" : ",") + data[i]);  }  return result.toString();}  }
class C{  public static String unescape(String string){  int length=string.length();  StringBuilder sb=new StringBuilder(length);  for (int i=0; i < length; ++i) {    char c=string.charAt(i);    if (c == '+') {      c=' ';    } else     if (c == '%' && i + 2 < length) {      int d=JSONTokener.dehexchar(string.charAt(i + 1));      int e=JSONTokener.dehexchar(string.charAt(i + 2));      if (d >= 0 && e >= 0) {        c=(char)(d * 16 + e);        i+=2;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public Entry newEntry(final String subject,final String author,final String ip,final String reason,final byte[] page) throws IOException {  return new Entry(normalize(subject),author,ip,reason,page);}  }
class C{  static int calculateMinShouldMatch(int optionalClauseCount,String spec){  int result=optionalClauseCount;  spec=spec.trim();  if (-1 < spec.indexOf("<")) {    spec=spaceAroundLessThanPattern.matcher(spec).replaceAll("<");    for (    String s : spacePattern.split(spec)) {      String[] parts=lessThanPattern.split(s,0);      int upperBound=Integer.parseInt(parts[0]);      if (optionalClauseCount <= upperBound) {        return result;      } else {        result=calculateMinShouldMatch(optionalClauseCount,parts[1]);      }    }    return result;  }  if (-1 < spec.indexOf('%')) {    spec=spec.substring(0,spec.length() - 1);    int percent=Integer.parseInt(spec);    float calc=(result * percent) * (1 / 100f);    result=calc < 0 ? result + (int)calc : (int)calc;  } else {    int calc=Integer.parseInt(spec);    result=calc < 0 ? result + calc : calc;  }  return (optionalClauseCount < result ? optionalClauseCount : (result < 0 ? 0 : result));}  }
class C{  void updateForDecoderTypeID(List<DecoderFile> pList){  if (log.isDebugEnabled()) {    StringBuffer buf=new StringBuffer("Identified " + pList.size() + " matches: ");    for (int i=0; i < pList.size(); i++) {      buf.append(pList.get(i).getModel() + ":");    }    log.debug(buf.toString());  }  if (pList.size() <= 0) {    log.error("Found empty list in updateForDecoderTypeID, should not happen");    return;  }  dTree.clearSelection();  if (pList.size() > 1) {    dTree.getSelectionModel().setSelectionMode(DefaultTreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);    _statusLabel.setText(Bundle.getMessage("StateMultipleMatch"));  } else {    dTree.getSelectionModel().setSelectionMode(DefaultTreeSelectionModel.SINGLE_TREE_SELECTION);  }  Enumeration<DecoderTreeNode> e=dRoot.breadthFirstEnumeration();  while (e.hasMoreElements()) {    DecoderTreeNode node=e.nextElement();    node.setIdentified(false);  }  selectedPath=new ArrayList<TreePath>();  for (int i=0; i < pList.size(); i++) {    e=dRoot.breadthFirstEnumeration();    DecoderFile f=pList.get(i);    String findMfg=f.getMfg();    String findFamily=f.getFamily();    String findModel=f.getModel();    while (e.hasMoreElements()) {      DecoderTreeNode node=e.nextElement();      if (node.getShowable() == DecoderFile.Showable.NO) {        continue;      }      TreeNode[] list=node.getPath();      if (list.length == 3) {        if (list[1].toString().equals(findMfg) && list[2].toString().equals(findModel)) {          log.debug("match length 3");          node.setIdentified(true);          dModel.reload();          ((DecoderTreeNode)list[1]).setIdentified(true);          ((DecoderTreeNode)list[2]).setIdentified(true);          TreePath path=new TreePath(node.getPath());          selectedPath.add(path);          break;        }      } else       if (list.length == 4) {        if (list[1].toString().equals(findMfg) && list[2].toString().equals(findFamily) && list[3].toString().equals(findModel)) {          log.debug("match length 4");          node.setIdentified(true);          dModel.reload();          ((DecoderTreeNode)list[1]).setIdentified(true);          ((DecoderTreeNode)list[2]).setIdentified(true);          ((DecoderTreeNode)list[3]).setIdentified(true);          TreePath path=new TreePath(node.getPath());          selectedPath.add(path);          break;        }      }    }  }  for (  TreePath path : selectedPath) {    dTree.addSelectionPath(path);    dTree.expandPath(path);    dTree.scrollPathToVisible(path);  }}  }
class C{  public void write(IXMLElement xml,boolean prettyPrint,int indent,boolean collapseEmptyElements) throws IOException {  if (prettyPrint) {    for (int i=0; i < indent; i++) {      this.writer.print(' ');    }  }  if (xml.getName() == null) {    if (xml.getContent() != null) {      if (prettyPrint) {        this.writeEncoded(xml.getContent().trim());        writer.println();      } else {        this.writeEncoded(xml.getContent());      }    }  } else {    this.writer.print('<');    this.writer.print(xml.getFullName());    Vector nsprefixes=new Vector();    if (xml.getNamespace() != null) {      if (xml.getName().equals(xml.getFullName())) {        this.writer.print(" xmlns=\"" + xml.getNamespace() + '"');      } else {        String prefix=xml.getFullName();        prefix=prefix.substring(0,prefix.indexOf(':'));        nsprefixes.addElement(prefix);        this.writer.print(" xmlns:" + prefix);        this.writer.print("=\"" + xml.getNamespace() + "\"");      }    }    Iterator enm=xml.iterateAttributeNames();    while (enm.hasNext()) {      String key=(String)enm.next();      int index=key.indexOf(':');      if (index >= 0) {        String namespace=xml.getAttributeNamespace(key);        if (namespace != null) {          String prefix=key.substring(0,index);          if (!nsprefixes.contains(prefix)) {            this.writer.print(" xmlns:" + prefix);            this.writer.print("=\"" + namespace + '"');            nsprefixes.addElement(prefix);          }        }      }    }    enm=xml.iterateAttributeNames();    while (enm.hasNext()) {      String key=(String)enm.next();      String value=xml.getAttribute(key,null);      this.writer.print(" " + key + "=\"");      this.writeEncoded(value);      this.writer.print('"');    }    if ((xml.getContent() != null) && (xml.getContent().length() > 0)) {      writer.print('>');      this.writeEncoded(xml.getContent());      writer.print("</" + xml.getFullName() + '>');      if (prettyPrint) {        writer.println();      }    } else     if (xml.hasChildren() || (!collapseEmptyElements)) {      writer.print('>');      if (prettyPrint) {        writer.println();      }      enm=xml.iterateChildren();      while (enm.hasNext()) {        IXMLElement child=(IXMLElement)enm.next();        this.write(child,prettyPrint,indent + 4,collapseEmptyElements);      }      if (prettyPrint) {        for (int i=0; i < indent; i++) {          this.writer.print(' ');        }      }      this.writer.print("</" + xml.getFullName() + ">");      if (prettyPrint) {        writer.println();      }    } else {      this.writer.print("/>");      if (prettyPrint) {        writer.println();      }    }  }  this.writer.flush();}  }
class C{  public Vector(int capacity){  this(capacity,0);}  }
class C{  public void splitNode(KDTreeNode node,int numNodesCreated,double[][] nodeRanges,double[][] universe) throws Exception {  correctlyInitialized();  int splitDim=widestDim(nodeRanges,universe);  int medianIdxIdx=node.m_Start + (node.m_End - node.m_Start) / 2;  int medianIdx=select(splitDim,m_InstList,node.m_Start,node.m_End,(node.m_End - node.m_Start) / 2 + 1);  node.m_SplitDim=splitDim;  node.m_SplitValue=m_Instances.instance(m_InstList[medianIdx]).value(splitDim);  node.m_Left=new KDTreeNode(numNodesCreated + 1,node.m_Start,medianIdxIdx,m_EuclideanDistance.initializeRanges(m_InstList,node.m_Start,medianIdxIdx));  node.m_Right=new KDTreeNode(numNodesCreated + 2,medianIdxIdx + 1,node.m_End,m_EuclideanDistance.initializeRanges(m_InstList,medianIdxIdx + 1,node.m_End));}  }
class C{  public RecordInfo(Frame owner,String title,DataStatusEvent dse){  super(owner,title,true);  try {    jbInit(dynInit(dse,title));  } catch (  Exception e) {    log.log(Level.SEVERE,"",e);  }  AEnv.positionCenterWindow(owner,this);}  }
class C{  public Task<FileSnapshotRestRep> updateExport(URI id,String subDirectory,SnapshotExportUpdateParams input){  UriBuilder builder=client.uriBuilder(getExportUrl());  if (subDirectory != null) {    builder.queryParam(SUBDIR_PARAM,subDirectory);  }  URI targetUri=builder.build(id);  return putTaskURI(input,targetUri);}  }
class C{  public NotificationChain basicSetSuperScope(ExecutionScope newSuperScope,NotificationChain msgs){  ExecutionScope oldSuperScope=superScope;  superScope=newSuperScope;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,SexecPackage.EXECUTION_FLOW__SUPER_SCOPE,oldSuperScope,newSuperScope);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void hrule(double value,Paint color,String legend){  hrule(value,color,legend,1.0F);}  }
class C{  public boolean print(){  return soot.PhaseOptions.getBoolean(options,"print");}  }
class C{  public void createStorage(StorageData storageData) throws IOException, SerializationException, BusinessException {  if (null == storageData.getName()) {    throw new BusinessException("Create new storage.",StorageErrorCodeEnum.STORAGE_NAME_IS_NOT_PROVIDED);  }  storageData.setId(getRandomUUIDString());  storageData.setCmrVersion(cmrVersion);  writeStorageDataToDisk(storageData);  existingStoragesSet.add(storageData);}  }
class C{  public void read(org.apache.thrift.protocol.TProtocol iprot,CronTrigger struct) throws org.apache.thrift.TException {  org.apache.thrift.protocol.TField schemeField;  iprot.readStructBegin();  while (true) {    schemeField=iprot.readFieldBegin();    if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {      break;    }switch (schemeField.id) {case 1:      if (schemeField.type == org.apache.thrift.protocol.TType.I32) {        struct.triggerId=iprot.readI32();        struct.setTriggerIdIsSet(true);      } else {        org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);      }    break;case 2:  if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {    struct.triggerName=iprot.readString();    struct.setTriggerNameIsSet(true);  } else {    org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);  }break;case 3:if (schemeField.type == org.apache.thrift.protocol.TType.I64) {struct.createTime=iprot.readI64();struct.setCreateTimeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 4:if (schemeField.type == org.apache.thrift.protocol.TType.I32) {struct.operatorId=iprot.readI32();struct.setOperatorIdIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 5:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.triggerType=iprot.readString();struct.setTriggerTypeIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;case 6:if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {struct.cronExpression=iprot.readString();struct.setCronExpressionIsSet(true);} else {org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}break;default :org.apache.thrift.protocol.TProtocolUtil.skip(iprot,schemeField.type);}iprot.readFieldEnd();}iprot.readStructEnd();struct.validate();}  }
class C{  public void assertKnownException(SQLException e){  assertKnownException("",e);}  }
class C{  private ExternalPathMovementReader(String traceFilePath,String activityFilePath) throws IOException {  File inFile=new File(traceFilePath);  long traceSize=inFile.length();  long totalRead=0;  long readSize=0;  long printSize=5 * 1024 * 1024;  BufferedReader reader=null;  try {    if (traceFilePath.endsWith(".zip")) {      ZipFile zf=new ZipFile(traceFilePath);      ZipEntry ze=zf.entries().nextElement();      reader=new BufferedReader(new InputStreamReader(zf.getInputStream(ze)));      traceSize=ze.getSize();    } else {      reader=new BufferedReader(new FileReader(traceFilePath));    }  } catch (  FileNotFoundException e1) {    throw new SettingsError("Couldn't find external movement input " + "file " + inFile);  }  String offsets=reader.readLine();  if (offsets == null) {    throw new SettingsError("No offset line found.");  }  readSize+=offsets.length() + 1;  try {    Scanner lineScan=new Scanner(offsets);    this.maxID=lineScan.nextInt();    this.minTime=lineScan.nextDouble();    this.maxTime=lineScan.nextDouble();    this.minX=lineScan.nextDouble();    this.maxX=lineScan.nextDouble();    this.minY=lineScan.nextDouble();    this.maxY=lineScan.nextDouble();  } catch (  Exception e) {    throw new SettingsError("Invalid offset line '" + offsets + "'");  }  this.paths=new ArrayList<List<List<Entry>>>(this.maxID + 1);  for (int i=0; i <= this.maxID; i++) {    this.paths.add(i,new LinkedList<List<Entry>>());  }  String line=reader.readLine();  while (line != null) {    readSize+=line.length() + 1;    if (readSize >= printSize) {      totalRead+=readSize;      readSize=0;      System.out.println("Processed " + (totalRead / 1024) + "KB out"+ " of "+ (traceSize / 1024)+ "KB ("+ Math.round(100.0 * totalRead / traceSize)+ "%)");    }    if (line.equals("")) {      line=reader.readLine();      continue;    }    Scanner traceScan=new Scanner(line);    int id=traceScan.nextInt();    List<List<Entry>> paths=this.paths.get(id);    List<Entry> path=new LinkedList<Entry>();    while (traceScan.hasNext()) {      String dataPoint=traceScan.next();      int d1=dataPoint.indexOf(',');      int d2=dataPoint.indexOf(',',d1 + 1);      Entry e=new Entry();      e.time=Double.parseDouble(dataPoint.substring(0,d1));      e.x=Double.parseDouble(dataPoint.substring(d1 + 1,d2));      e.y=Double.parseDouble(dataPoint.substring(d2 + 1));      if (this.normalize) {        e.time-=this.minTime;        e.x-=this.minX;        e.y-=this.minY;      }      path.add(e);    }    paths.add(path);    line=reader.readLine();  }  inFile=new File(activityFilePath);  reader=null;  try {    if (activityFilePath.endsWith(".zip")) {      ZipFile zf=new ZipFile(activityFilePath);      ZipEntry ze=zf.entries().nextElement();      reader=new BufferedReader(new InputStreamReader(zf.getInputStream(ze)));    } else {      reader=new BufferedReader(new FileReader(activityFilePath));    }  } catch (  FileNotFoundException e) {    throw new SettingsError("Couldn't find external activity input " + "file " + inFile);  }  this.activeTimes=new ArrayList<List<ActiveTime>>(this.maxID + 1);  for (int i=0; i <= this.maxID; i++) {    this.activeTimes.add(new LinkedList<ActiveTime>());  }  line=reader.readLine();  while (line != null) {    Scanner traceScan=new Scanner(line);    int id=traceScan.nextInt();    double start=traceScan.nextDouble();    double end=traceScan.nextDouble();    List<ActiveTime> times=this.activeTimes.get(id);    ActiveTime a=new ActiveTime();    a.start=start;    a.end=end;    if (this.normalize) {      a.start-=this.minTime;      a.end-=this.minTime;    }    times.add(a);    line=reader.readLine();  }}  }
class C{  public void init() throws ServletException {}  }
class C{  public static QueryExp finalSubString(AttributeValueExp a,StringValueExp s){  return new MatchQueryExp(a,new StringValueExp("*" + escapeString(s.getValue())));}  }
class C{  public JSONObject increment(String key) throws JSONException {  Object value=this.opt(key);  if (value == null) {    this.put(key,1);  } else   if (value instanceof BigInteger) {    this.put(key,((BigInteger)value).add(BigInteger.ONE));  } else   if (value instanceof BigDecimal) {    this.put(key,((BigDecimal)value).add(BigDecimal.ONE));  } else   if (value instanceof Integer) {    this.put(key,(Integer)value + 1);  } else   if (value instanceof Long) {    this.put(key,(Long)value + 1);  } else   if (value instanceof Double) {    this.put(key,(Double)value + 1);  } else   if (value instanceof Float) {    this.put(key,(Float)value + 1);  } else {    throw new JSONException("Unable to increment [" + quote(key) + "].");  }  return this;}  }
class C{  protected void obtainFindBugsMarkers(){  markers.clear();  if (editor == null || ruler == null) {    return;  }  IResource resource=(IResource)editor.getEditorInput().getAdapter(IFile.class);  if (resource == null) {    return;  }  IMarker[] allMarkers=MarkerUtil.getMarkers(resource,IResource.DEPTH_ZERO);  if (allMarkers.length == 0) {    return;  }  AbstractMarkerAnnotationModel model=getModel();  IDocument document=getDocument();  for (int i=0; i < allMarkers.length; i++) {    if (includesRulerLine(model.getMarkerPosition(allMarkers[i]),document)) {      if (MarkerUtil.isFindBugsMarker(allMarkers[i])) {        markers.add(allMarkers[i]);      }    }  }}  }
class C{  @Override public void updateClassifier(BayesNet bayesNet,Instance instance) throws Exception {  throw new Exception("updateClassifier does not apply to BMA estimator");}  }
class C{  private void swap(int i,int j){  int tmp=_data[i];  _data[i]=_data[j];  _data[j]=tmp;}  }
class C{  public static void printPoint(Point p){  System.out.println("(" + p.x + ", "+ p.y+ ")");}  }
class C{  private void checkIsPositiveNumber(Long value,String description){  checkNotNull(value == null,description + " cannot be null.");  checkState(value >= 0,description + " cannot be negative.");}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Float(stack.getUIMgrSafe().getVideoFrame().getVideoZoomY(VideoFrame.getAspectRatioCode(getString(stack))));}  }
class C{  public CircularBuffer(int size){  mSize=size;  mElements=new ArrayList<T>();}  }
class C{  public Object jsFunction_getWriter(){  if (writer == null)   return null;  Scriptable parent=ScriptableObject.getTopLevelScope(this);  return Context.javaToJS(writer,parent);}  }
class C{  public TimeValue totalTime(){  return new TimeValue(totalTimeNS,TimeUnit.NANOSECONDS);}  }
class C{  public static void validateSolutionDetail(SolutionDetail fieldValue,String fieldName,long clockTolerance){  X509Certificate cert=fieldValue.getCertificate();  ValidateUtil.validateNotNull(cert,"Solution user certificate");  try {    cert.checkValidity();  } catch (  CertificateException ex) {    if (ex instanceof CertificateNotYetValidException) {      if (cert.getNotBefore().getTime() <= System.currentTimeMillis() + clockTolerance) {        return;      }    }    if (ex instanceof CertificateExpiredException) {      if (cert.getNotAfter().getTime() >= System.currentTimeMillis() - clockTolerance) {        return;      }    }    logAndThrow(String.format("'%s' certificate is invalid - " + "certificateException %s",fieldName,ex.toString()));  }}  }
class C{  public static ActionBarBackground fadeIn(AppCompatActivity activity,Integer color){  ActionBarBackground abColor=new ActionBarBackground(activity);  abColor.fadeIn(color);  return abColor;}  }
class C{  private boolean Test2(String before){  StringBuffer bashed=new StringBuffer(before);  String slice;  for (int i=0; i < 100; i++) {    int startIndex=getRandomIndex(0,before.length());    int endIndex=getRandomIndex(startIndex,before.length());    if (endIndex < bashed.length())     slice=bashed.substring(startIndex,endIndex); else     slice=bashed.substring(startIndex);    if (slice.length() == 1)     bashed.deleteCharAt(startIndex); else     bashed.delete(startIndex,endIndex);    bashed.insert(startIndex,slice.toCharArray(),0,slice.length());  }  String after=bashed.toString();  if (!before.equals(after))   return false; else   return true;}  }
class C{  @Override protected void doPost(HttpServletRequest request,HttpServletResponse response){  processPostRequest(request,response);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public void addListener(final IBookmarkListener listener){  m_listeners.addListener(listener);}  }
class C{  public void sortFromTo(int from,int to){  double N=to - from + 1;  double quickSortEstimate=N * Math.log(N) / 0.6931471805599453;  double width=256;  double countSortEstimate=Math.max(width,N);  if (countSortEstimate < quickSortEstimate) {    countSortFromTo(from,to);  } else {    quickSortFromTo(from,to);  }}  }
class C{  @SuppressWarnings("deprecation") public Object readMatrixOld(Element node) throws Exception {  weka.core.Matrix matrix;  weka.core.matrix.Matrix matrixNew;  if (DEBUG) {    trace(new Throwable(),node.getAttribute(ATT_NAME));  }  m_CurrentNode=node;  matrixNew=(weka.core.matrix.Matrix)readMatrix(node);  matrix=new weka.core.Matrix(matrixNew.getArrayCopy());  return matrix;}  }
class C{  public void clearSourceElements(){  for (  PNode node : sourceElements) {    SourceHandle.removeSourceHandleFrom(node);  }  sourceElements.clear();  selectionModel.fireSelectionChanged();}  }
class C{  public Collection deleteDangles(){  List nodesToRemove=findNodesOfDegree(1);  Set dangleLines=new HashSet();  Stack nodeStack=new Stack();  for (Iterator i=nodesToRemove.iterator(); i.hasNext(); ) {    nodeStack.push(i.next());  }  while (!nodeStack.isEmpty()) {    Node node=(Node)nodeStack.pop();    deleteAllEdges(node);    List nodeOutEdges=node.getOutEdges().getEdges();    for (Iterator i=nodeOutEdges.iterator(); i.hasNext(); ) {      PolygonizeDirectedEdge de=(PolygonizeDirectedEdge)i.next();      de.setMarked(true);      PolygonizeDirectedEdge sym=(PolygonizeDirectedEdge)de.getSym();      if (sym != null)       sym.setMarked(true);      PolygonizeEdge e=(PolygonizeEdge)de.getEdge();      dangleLines.add(e.getLine());      Node toNode=de.getToNode();      if (getDegreeNonDeleted(toNode) == 1)       nodeStack.push(toNode);    }  }  return dangleLines;}  }
class C{  public ExtensionHandler launch() throws TransformerException {  ExtensionHandler handler=null;  try {    Class cl=ExtensionHandler.getClassForName(m_handlerClass);    Constructor con=null;    if (m_sig != null)     con=cl.getConstructor(m_sig); else {      Constructor[] cons=cl.getConstructors();      for (int i=0; i < cons.length; i++) {        if (cons[i].getParameterTypes().length == m_args.length) {          con=cons[i];          break;        }      }    }    if (con != null)     handler=(ExtensionHandler)con.newInstance(m_args); else     throw new TransformerException("ExtensionHandler constructor not found");  } catch (  Exception e) {    throw new TransformerException(e);  }  return handler;}  }
class C{  int nextToken() throws IOException {  byte[] ct=charTypes;  int c;  value=null;  if (type == TYPE_NOTHING) {    c=read();    if (c >= 0) {      type=c;    }  } else {    c=peekChar;    if (c < 0) {      try {        c=read();        if (c >= 0) {          type=c;        }      } catch (      EOFException e) {        c=-1;      }    }  }  if (c < 0) {    return type=TYPE_EOF;  }  int charType=c < 256 ? ct[c] : ALPHA;  while ((charType & WHITESPACE) != 0) {    if (c == '\r') {      line++;      c=read();      if (c == '\n') {        c=read();      }    } else {      if (c == '\n') {        line++;      }      c=read();    }    if (c < 0) {      return type=TYPE_EOF;    }    charType=c < 256 ? ct[c] : ALPHA;  }  if ((charType & ALPHA) != 0) {    initToken();    append(c);    int i=0;    do {      if (i >= chars.length) {        char[] nb=new char[chars.length * 2];        System.arraycopy(chars,0,nb,0,chars.length);        chars=nb;      }      chars[i++]=(char)c;      c=read();      charType=c < 0 ? WHITESPACE : c < 256 ? ct[c] : ALPHA;    } while ((charType & ALPHA) != 0);    peekChar=c;    value=String.copyValueOf(chars,0,i);    return type=TYPE_WORD;  }  if ((charType & QUOTE) != 0) {    initToken();    append(c);    type=c;    int i=0;    peekChar=read();    while (peekChar >= 0 && peekChar != type && peekChar != '\n' && peekChar != '\r') {      if (peekChar == '\\') {        c=read();        int first=c;        if (c >= '0' && c <= '7') {          c=c - '0';          int c2=read();          if ('0' <= c2 && c2 <= '7') {            c=(c << 3) + (c2 - '0');            c2=read();            if ('0' <= c2 && c2 <= '7' && first <= '3') {              c=(c << 3) + (c2 - '0');              peekChar=read();            } else {              peekChar=c2;            }          } else {            peekChar=c2;          }        } else {switch (c) {case 'b':            c='\b';          break;case 'f':        c='\f';      break;case 'n':    c='\n';  break;case 'r':c='\r';break;case 't':c='\t';break;default :}peekChar=read();}} else {c=peekChar;peekChar=read();}if (i >= chars.length) {char[] nb=new char[chars.length * 2];System.arraycopy(chars,0,nb,0,chars.length);chars=nb;}chars[i++]=(char)c;}if (peekChar == type) {peekChar=read();}value=String.copyValueOf(chars,0,i);return type;}if (c == '/') {c=read();if (c == '*') {int prevChar=0;while ((c=read()) != '/' || prevChar != '*') {if (c == '\r') {line++;c=read();if (c == '\n') {c=read();}} else {if (c == '\n') {line++;c=read();}}if (c < 0) {return type=TYPE_EOF;}prevChar=c;}peekChar=read();return nextToken();} else if (c == '/') {while ((c=read()) != '\n' && c != '\r' && c >= 0) {}peekChar=c;return nextToken();} else {peekChar=c;return type='/';}}peekChar=read();return type=c;}  }
class C{  public void testMergeOneServletIntoEmptyDocument() throws Exception {  String srcXml="<web-app></web-app>";  WebXml srcWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(srcXml.getBytes("UTF-8")),null);  String mergeXml="<web-app>" + "  <servlet>" + "    <servlet-name>s1</servlet-name>"+ "    <servlet-class>sclass1</servlet-class>"+ "  </servlet>"+ "</web-app>";  WebXml mergeWebXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(mergeXml.getBytes("UTF-8")),null);  WebXmlMerger merger=new WebXmlMerger(srcWebXml);  merger.merge(mergeWebXml);  assertTrue(WebXmlUtils.hasServlet(srcWebXml,"s1"));}  }
class C{  @Override protected void visitQueued(ModuleBuild build) throws Exception {  LOG.info("About to launch Singularity task for build {}",build);  singularityBuildLauncher.launchBuild(build);}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:30:47.178 -0500",hash_original_method="DF673271FDC7A52A9E2682FF9A4E5D76",hash_generated_method="200394C1FB9082BF2C7BD4C762E7152E") @Override public String toString(){  StringBuilder sb=new StringBuilder("TAG: Tech [");  String[] techList=getTechList();  int length=techList.length;  for (int i=0; i < length; i++) {    sb.append(techList[i]);    if (i < length - 1) {      sb.append(", ");    }  }  sb.append("]");  return sb.toString();}  }
class C{  private void readParameterAnnotations(final MethodVisitor mv,final Context context,int v,final boolean visible){  int i;  int n=b[v++] & 0xFF;  int synthetics=Type.getArgumentTypes(context.desc).length - n;  AnnotationVisitor av;  for (i=0; i < synthetics; ++i) {    av=mv.visitParameterAnnotation(i,"Ljava/lang/Synthetic;",false);    if (av != null) {      av.visitEnd();    }  }  char[] c=context.buffer;  for (; i < n + synthetics; ++i) {    int j=readUnsignedShort(v);    v+=2;    for (; j > 0; --j) {      av=mv.visitParameterAnnotation(i,readUTF8(v,c),visible);      v=readAnnotationValues(v + 2,c,true,av);    }  }}  }
class C{  public void add(final PositionChangeListener listener){  listeners.add(listener);}  }
class C{  @Override public UUID uuid(){  while (uuid == null) {    try {      uuid=uuids.take();    } catch (    InterruptedException e) {    }  }  return uuid;}  }
class C{  public static void sortByValueStable(int start,int end,double[] values,int[] indexes){  sortByValue(start,end,values,indexes);  for (int i=0; i < values.length - 1; i++) {    double tmp=values[i];    int len=0;    while (i + len + 1 < values.length && tmp == values[i + len + 1])     len++;    if (len > 0) {      Arrays.sort(indexes,i,i + len + 1);      i+=len;    }  }}  }
class C{  public PaymentResponse sendMany(Map<String,Long> recipients,String fromAddress,Long fee,String note) throws APIException, IOException {  Map<String,String> params=buildBasicRequest();  String method=null;  if (recipients.size() == 1) {    method="payment";    Entry<String,Long> e=recipients.entrySet().iterator().next();    params.put("to",e.getKey());    params.put("amount",e.getValue().toString());  } else {    method="sendmany";    params.put("recipients",new Gson().toJson(recipients));  }  if (fromAddress != null) {    params.put("from",fromAddress);  }  if (fee != null) {    params.put("fee",fee.toString());  }  if (note != null) {    params.put("note",note);  }  String response=HttpClient.getInstance().post(String.format("merchant/%s/%s",identifier,method),params);  JsonObject topElem=parseResponse(response);  return new PaymentResponse(topElem.get("message").getAsString(),topElem.get("tx_hash").getAsString(),topElem.has("notice") ? topElem.get("notice").getAsString() : null);}  }
class C{  private boolean isAnomaly(Instance instance,LearningRule rule){  boolean isAnomaly=false;  if (this.noAnomalyDetection == false) {    if (rule.getInstancesSeen() >= this.anomalyNumInstThreshold) {      isAnomaly=rule.isAnomaly(instance,this.univariateAnomalyprobabilityThreshold,this.multivariateAnomalyProbabilityThreshold,this.anomalyNumInstThreshold);    }  }  return isAnomaly;}  }
class C{  public RefMethod findMethodByReturnType(Class type){  if (type == null) {    type=void.class;  }  final List<Method> methods=new ArrayList<>();  Collections.addAll(methods,this.clazz.getMethods());  Collections.addAll(methods,this.clazz.getDeclaredMethods());  for (  final Method m : methods) {    if (type.equals(m.getReturnType())) {      return new RefMethod(m);    }  }  throw new RuntimeException("no such method");}  }
class C{  public HealthMonitorImpl(InternalDistributedMember owner,GemFireHealthConfig config,DistributionManager dm){  this.owner=owner;  this.id=getNewId();  this.dm=dm;  this.eval=new GemFireHealthEvaluator(config,dm);  this.currentStatus=GemFireHealth.GOOD_HEALTH;  ThreadGroup tg=LoggingThreadGroup.createThreadGroup("HealthMonitor Threads",logger);  this.t=new Thread(tg,this,LocalizedStrings.HealthMonitorImpl_HEALTH_MONITOR_OWNED_BY_0.toLocalizedString(owner));  this.t.setDaemon(true);}  }
class C{  public FlexFXG2SWFTranscoder(TypeTable typeTable){  super();  this.typeTable=typeTable;  if (typeTable != null) {    divType=typeTable.getType(StandardDefs.CLASS_TEXT_DIV);    linkType=typeTable.getType(StandardDefs.CLASS_TEXT_LINK);    imgType=typeTable.getType(StandardDefs.CLASS_TEXT_IMG);    richTextType=typeTable.getType(StandardDefs.CLASS_TEXT_RICHTEXT);    paragraphType=typeTable.getType(StandardDefs.CLASS_TEXT_PARAGRAPH);    spanType=typeTable.getType(StandardDefs.CLASS_TEXT_SPAN);    tabType=typeTable.getType(StandardDefs.CLASS_TEXT_TAB);    tcyType=typeTable.getType(StandardDefs.CLASS_TEXT_TCY);    textLayoutFormatType=typeTable.getType(StandardDefs.CLASS_TEXT_LAYOUT_FORMAT);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:56:50.917 -0500",hash_original_method="109BC8E5B51BF330504215C17ADD6478",hash_generated_method="5F7CEF0AAF5A05130189ED26FA7DD2B8") public boolean isPrimitive(){  Class<?> t=getTypeInternal();  return t != null && t.isPrimitive();}  }
class C{  public void testMaxWaitIntervalConfigurationParameter() throws Exception {  System.setProperty(StackProperties.MAX_CTRAN_RETRANS_TIMER,"100");  System.setProperty(StackProperties.PROPAGATE_RECEIVED_RETRANSMISSIONS,"true");  System.setProperty(StackProperties.MAX_CTRAN_RETRANSMISSIONS,"11");  stunStack.addRequestListener(serverAddress,requestCollector);  stunStack.sendRequest(bindingRequest,serverAddress,clientAddress,responseCollector);  Thread.sleep(1200);  Vector<StunMessageEvent> reqs=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  assertEquals("Not all retransmissions were made for the expected period " + "of time",12,reqs.size());  Thread.sleep(1800);  reqs=requestCollector.getRequestsForTransaction(bindingRequest.getTransactionID());  assertEquals("A retransmissions of the request was sent, while not " + "supposed to",12,reqs.size());}  }
class C{  public MWFEventAudit(Properties ctx,ResultSet rs,String trxName){  super(ctx,rs,trxName);}  }
class C{  public void cleanup(){}  }
class C{  public boolean isComplete(){  return complete;}  }
class C{  AttributeTransform toTransform(){  return AttributeTransform.create(this);}  }
class C{  public static double[] toDoubleArray(byte[] data){  double[] result=new double[data.length / 8];  byte[] tmp=new byte[8];  for (int i=0; i < result.length; i++) {    System.arraycopy(data,i * 8,tmp,0,8);    result[i]=toDouble(tmp);  }  return result;}  }
class C{  public AWSAllocation(ComputeInstanceRequest computeReq){  this.computeRequest=computeReq;  this.stage=AWSStages.VMDESC;}  }
class C{  public void run(){  if (name.endsWith("child")) {    System.out.println("Child initializing");    fireMessage(root,INFOMESSAGE,"I'm alive!");    return;  }  Address target=getDRM().getNewestContribution().contributor;  Killer child=new Killer(job,"child",new Address(null,-1,this.name));  IRequest r=base.launch("DIRECT",child,target);  while (r.getStatus() == IRequest.WAITING) {    try {      Thread.sleep(1000);    } catch (    Exception e) {      System.err.println("Exception: " + e);    }  }  if (r.getStatus() != IRequest.DONE)   System.err.println("There was an error " + "sending an agent to " + target.name);  System.out.println("Die!");  r=fireMessage(new Address(target.getHost(),target.port,child.name),SUICIDEMESSAGE,"Die!");  while (r.getStatus() == IRequest.WAITING) {    try {      Thread.sleep(100);    } catch (    Exception e) {      System.err.println("Exception: " + e);    }  }  if (r.getStatus() == IRequest.DONE)   System.out.println("Request obeyed");  suicide();}  }
class C{  protected Id<Node> sampleEndOfChainNode(Id<Node> previousId,Id<Node> currentId,double randomValue){  PathDependentNode currentNode=this.getPathDependentNode(currentId);  Map<Id<Node>,Double> choiceMap=new HashMap<Id<Node>,Double>();  Map<Id<Node>,Double> map=currentNode.getPathDependentNextNodes(previousId);  Id<Node> sinkId=Id.createNodeId("sink");  for (  Id<Node> possibleId : map.keySet()) {    if (!possibleId.toString().equalsIgnoreCase(sinkId.toString())) {      PathDependentNode possibleNode=this.getPathDependentNode(possibleId);      Map<Id<Node>,Double> possibleMap=possibleNode.getNextNodes(currentId);      if (possibleMap.containsKey(sinkId)) {        choiceMap.put(possibleId,possibleMap.get(sinkId));      }    }  }  if (choiceMap.isEmpty()) {    LOG.warn("Check if this is calculated correctly.");    for (    Id<Node> otherPrevious : currentNode.getPathDependence().keySet()) {      map=currentNode.getPathDependentNextNodes(otherPrevious);      for (      Id<Node> possibleId : map.keySet()) {        if (!possibleId.toString().equalsIgnoreCase(sinkId.toString())) {          PathDependentNode possibleNode=this.getPathDependentNode(possibleId);          double weight=possibleNode.getTotalSinkWeight();          if (weight > 0) {            choiceMap.put(possibleId,weight);          }        }      }    }    noSink++;  }  if (choiceMap.isEmpty()) {    return null;  }  double total=0.0;  for (  Id<Node> id : choiceMap.keySet()) {    total+=choiceMap.get(id);  }  double cumulativeWeight=0.0;  Id<Node> nextNode=null;  Iterator<Id<Node>> iterator=choiceMap.keySet().iterator();  while (nextNode == null && iterator.hasNext()) {    Id<Node> thisNode=iterator.next();    cumulativeWeight+=choiceMap.get(thisNode);    if ((cumulativeWeight / total) >= randomValue) {      nextNode=thisNode;    }  }  totalNextNodesSampled++;  return nextNode;}  }
class C{  protected void onCancel(){}  }
class C{  public boolean isValid(){  if (chars == null) {    throw new IllegalStateException("chars is null");  }  if (length < 0) {    throw new IllegalStateException("length is negative: " + length);  }  if (length > chars.length) {    throw new IllegalStateException("length is out of bounds: " + length + ",chars.length="+ chars.length);  }  if (offset < 0) {    throw new IllegalStateException("offset is negative: " + offset);  }  if (offset > chars.length) {    throw new IllegalStateException("offset out of bounds: " + offset + ",chars.length="+ chars.length);  }  if (offset + length < 0) {    throw new IllegalStateException("offset+length is negative: offset=" + offset + ",length="+ length);  }  if (offset + length > chars.length) {    throw new IllegalStateException("offset+length out of bounds: offset=" + offset + ",length="+ length+ ",chars.length="+ chars.length);  }  return true;}  }
class C{  public NewNetworkAction(Workspace workspace){  super("New Network",workspace);  putValue(SHORT_DESCRIPTION,"New network");  putValue(SMALL_ICON,ResourceManager.getImageIcon("Network.png"));  Toolkit toolkit=Toolkit.getDefaultToolkit();  KeyStroke keyStroke=KeyStroke.getKeyStroke(KeyEvent.VK_N,toolkit.getMenuShortcutKeyMask());  putValue(ACCELERATOR_KEY,keyStroke);}  }
class C{  public MethodHandleConstant(ConstantPool pool,int index,MethodHandleType type,ConstantPoolEntry entry){  super(pool,index);  _type=type;  _entry=entry;}  }
class C{  public void reseed(byte[] additionalInput){  byte[] entropy=_entropySource.getEntropy();  byte[] seedMaterial=Arrays.concatenate(entropy,additionalInput);  hmac_DRBG_Update(seedMaterial);  _reseedCounter=1;}  }
class C{  private void loadChat(String userId,String chatName,String image,String tagName,String contactNumber,String price,String title){  final String chatId=Utils.generateChatId(userId,AppConstants.UserInfo.INSTANCE.getId());  if (getActivity() != null) {    final Intent chatScreenActivity=new Intent(getActivity(),ChatScreenActivity.class);    chatScreenActivity.putExtra(AppConstants.Keys.USER_ID,userId);    chatScreenActivity.putExtra(AppConstants.Keys.CHAT_ID,chatId);    chatScreenActivity.putExtra(AppConstants.Keys.CHAT_TITLE,chatName);    chatScreenActivity.putExtra(AppConstants.Keys.PROFILE_IMAGE,image);    chatScreenActivity.putExtra(AppConstants.Keys.FROM_WALL,true);    chatScreenActivity.putExtra(AppConstants.Keys.TAG_NAME,tagName);    chatScreenActivity.putExtra(AppConstants.Keys.CONTACT_NUMBER,contactNumber);    chatScreenActivity.putExtra(AppConstants.Keys.SERVICE_PRICE,price);    chatScreenActivity.putExtra(AppConstants.Keys.TITLE,title);    chatScreenActivity.putExtra(AppConstants.Keys.MY_ID,AppConstants.UserInfo.INSTANCE.getId());    startActivity(chatScreenActivity);  }}  }
class C{  public void testReadWrite() throws Exception {  LogFile tf=LogHelper.createLogFile("testReadWrite.dat",5);  String testData1="Test characters";  byte[] testBytes1=testData1.getBytes();  long firstPos=tf.getOffset();  LogRecord record1=new LogRecord(tf.getFile(),firstPos,testBytes1,LogRecord.CRC_TYPE_NONE,0);  tf.writeRecord(record1,100);  long lastPos=tf.getOffset();  assertTrue("Position advanced after write",firstPos < lastPos);  tf.flush();  LogFile tf2=LogHelper.openExistingFileForRead("testReadWrite.dat");  long firstPos2=tf2.getOffset();  LogRecord record2=tf2.readRecord(0);  long lastPos2=tf2.getOffset();  assertEquals("Start of record matches between logs",firstPos,firstPos2);  assertEquals("End of record matches between logs",lastPos,lastPos2);  assertEquals("Record contents match",record1,record2);  tf.close();  tf2.close();}  }
class C{  public static double CCmaxFitness(GEPIndividual ind){  return 1000.0;}  }
class C{  public String toString(){  StringBuffer buffer=new StringBuffer();  int numPerms=m_perms.count();  buffer.append("AcsTokenArchive[");  buffer.append("m_acsId = ").append(m_acsId);  buffer.append(", m_mgrId = ").append(m_mgrId);  buffer.append(", m_perms = [");  for (int i=0; i < numPerms; i++) {    buffer.append(" perm").append(i + 1);    buffer.append(" = ").append((m_perms.get(i)));    if (i < (numPerms - 1))     buffer.append(",");  }  buffer.append("]");  buffer.append(", m_crtrId = ").append(m_crtrId);  buffer.append(", m_crtrType = ").append(m_crtrType);  buffer.append("]");  return buffer.toString();}  }
class C{  boolean replace(ReplaceHolder rh) throws BadLocationException {  boolean valid=true;  int direction=1;  if (rh.length > 0 && (rh.text == null || rh.text.length() == 0) && (getFormattedTextField().getSelectionStart() != rh.offset || rh.length > 1)) {    direction=-1;  }  if (getOverwriteMode() && rh.text != null && getFormattedTextField().getSelectedText() == null) {    rh.length=Math.min(Math.max(rh.length,rh.text.length()),rh.fb.getDocument().getLength() - rh.offset);  }  if ((rh.text != null && !isLegalInsertText(rh.text)) || !canReplace(rh) || (rh.length == 0 && (rh.text == null || rh.text.length() == 0))) {    valid=false;  }  if (valid) {    int cursor=rh.cursorPosition;    rh.fb.replace(rh.offset,rh.length,rh.text,rh.attrs);    if (cursor == -1) {      cursor=rh.offset;      if (direction == 1 && rh.text != null) {        cursor=rh.offset + rh.text.length();      }    }    updateValue(rh.value);    repositionCursor(cursor,direction);    return true;  } else {    invalidEdit();  }  return false;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getSource() == button1) {    cancel();  }}  }
class C{  @Override public BasicBlock nextElement(){  BasicBlock result=blocks.get(currentBlock);  currentBlock++;  return result;}  }
class C{  protected final Iterator findNextByType(Class type){  List found=new ArrayList();  if (type.isAssignableFrom(this.nextHandler.getClass())) {    found.add(this.nextHandler);  } else   if (this.nextHandler instanceof CompositeFaceletHandler) {    FaceletHandler[] h=((CompositeFaceletHandler)this.nextHandler).getHandlers();    for (int i=0; i < h.length; i++) {      if (type.isAssignableFrom(h[i].getClass())) {        found.add(h[i]);      }    }  }  return found.iterator();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case HEADER:    return isSetHeader();}throw new IllegalStateException();}  }
class C{  public void printRecord(final Object... values) throws IOException {  for (  final Object value : values) {    print(value);  }  println();}  }
class C{  public PriorityQueue(Collection<? extends E> c){  if (c instanceof PriorityQueue) {    getFromPriorityQueue((PriorityQueue<? extends E>)c);  } else   if (c instanceof SortedSet) {    getFromSortedSet((SortedSet<? extends E>)c);  } else {    initSize(c);    addAll(c);  }}  }
class C{  public static int ENOTDIR(){  return Errno.ENOTDIR.intValue();}  }
class C{  @Override public final boolean hasPrevious(){  return _nextIndex != 0;}  }
class C{  public Object[] keys(){  Object[] keys=new Object[size()];  K[] k=(K[])_set;  for (int i=k.length, j=0; i-- > 0; ) {    if (k[i] != null && k[i] != REMOVED) {      keys[j++]=k[i];    }  }  return keys;}  }
class C{  public static void demo4(){  double[][] values={{3,0,-3.4,0},{5.1,0,+3.0123456789,0},{16.37,0.0,2.5,0},{-16.3,0,-3.012345678E-4,-1},{1236.3456789,0,7,-1.2}};  String[] columnNames={"0.1","0.3","0.5","0.7"};  String[] rowNames={"SunJDK1.2.2 classic","IBMJDK1.1.8","SunJDK1.3 Hotspot","other1","other2"};  DoubleMatrix2D matrix=cern.colt.matrix.DoubleFactory2D.dense.make(values);  System.out.println("\n\n" + new Formatter("%G").toTitleString(matrix,rowNames,columnNames,"rowAxis","colAxis","VM Performance: Provider vs. matrix density"));}  }
class C{  public static double[] apply(double[] coefficients,double[] samples){  for (int x=0; x < coefficients.length; x++) {    samples[x]=samples[x] * coefficients[x];  }  return samples;}  }
class C{  public String asJSONString(){  String result=html;  List<Extractor> extractors=extractorsMap.get(DEFAULT_FIELD);  if (extractors == null) {    if (htmlList != null) {      result=JsonPath.parse(asMapList()).jsonString();    } else {      result=JsonPath.parse(asMap()).jsonString();    }  } else {    for (    Extractor extractor : extractors) {      result=extractor.extract(result);    }    result=filterBefore(result);    result=filter(DEFAULT_FIELD,result);    result=filterAfter(result);  }  return result;}  }
class C{  private ZyZoomHelpers(){}  }
class C{  public JsonSerializer(final SerializationContext context){  this(context,false);}  }
class C{  public static BlinkConn newConnection(Socket socket,String resourcePath,ReceiveListener listener) throws Exception {  return newConnection(socket,DEFAULT_SOCKET_BUFFER_SIZE,resourcePath,UUID.randomUUID().toString(),listener);}  }
class C{  public XRTreeFrag(int root,XPathContext xctxt,ExpressionNode parent){  super(null);  exprSetParent(parent);  initDTM(root,xctxt);}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static DeterministicKey deserializeB58(@Nullable DeterministicKey parent,String base58,NetworkParameters params){  return deserialize(params,Base58.decodeChecked(base58),parent);}  }
class C{  public static void main(final String[] args){  Config config=ConfigUtils.createConfig();  config.addModule(OsmConverterConfigGroup.createDefaultConfig());  Set<String> toRemove=config.getModules().keySet().stream().filter(null).collect(Collectors.toSet());  toRemove.forEach(null);  new ConfigWriter(config).write(args[0]);}  }
class C{  protected CommentCandidate pickCommentNoDoubleStar(List<INode> comments) throws InstantiationException {  ListIterator<INode> iter=comments.listIterator(comments.size());  String candidateTextString=null;  while (iter.hasPrevious()) {    candidateTextString=iter.previous().getText();    if (!candidateTextString.startsWith("/**")) {      return new CommentCandidate(candidateTextString);    }  }  return null;}  }
class C{  public DefaultPseudoClassCondition(String namespaceURI,String value){  super(value);  this.namespaceURI=namespaceURI;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  private static boolean hasSource(ITypeRoot je){  if (je == null || !je.exists())   return false;  try {    return je.getBuffer() != null;  } catch (  JavaModelException ex) {    LOG.error(ex.getMessage(),ex);  }  return false;}  }
class C{  public static boolean isBase64(final byte[] arrayOctet){  for (int i=0; i < arrayOctet.length; i++) {    if (!isBase64(arrayOctet[i]) && !isWhiteSpace(arrayOctet[i])) {      return false;    }  }  return true;}  }
class C{  public int sqRoot(int a){  for (int i=1; i < degree; i++) {    a=mult(a,a);  }  return a;}  }
class C{  public static boolean isMultiTenantEnabled(){  return "Y".equalsIgnoreCase(UtilProperties.getPropertyValue("general.properties","multitenant"));}  }
class C{  public void remove(Collection<? extends Annotation> annotations){  for (  Annotation annot : annotations) {    if (annot instanceof Recordable) {      try {        addToHistory(annot.getCAS().getJCas(),HistoryEvents.createAdded((Recordable)annot,referrer));      } catch (      CASException e) {        monitor.error("Unable to add to history on remove",e);      }    }    if (annot instanceof Entity) {      for (      Relation r : getRelations((Entity)annot)) {        monitor.entityRemoved(r.getType().getName());        r.removeFromIndexes();      }    }    monitor.entityRemoved(annot.getType().getName());    annot.removeFromIndexes();  }}  }
class C{  public boolean isUser2Dim(){  Object oo=get_Value(COLUMNNAME_IsUser2Dim);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public td addElement(Element element){  addElementToRegistry(element);  return (this);}  }
class C{  public TeXIcon build(){  if (style == null) {    throw new IllegalStateException("A style is required. Use setStyle()");  }  if (size == null) {    throw new IllegalStateException("A size is required. Use setStyle()");  }  DefaultTeXFont font=(type == null) ? new DefaultTeXFont(size) : createFont(size,type);  TeXEnvironment te;  if (widthUnit != null) {    te=new TeXEnvironment(style,font,widthUnit,textWidth);  } else {    te=new TeXEnvironment(style,font);  }  if (interLineUnit != null) {    te.setInterline(interLineUnit,interLineSpacing);  }  Box box=createBox(te);  TeXIcon ti;  if (widthUnit != null) {    HorizontalBox hb;    if (interLineUnit != null) {      float il=interLineSpacing * SpaceAtom.getFactor(interLineUnit,te);      Box b=BreakFormula.split(box,te.getTextwidth(),il);      hb=new HorizontalBox(b,isMaxWidth ? b.getWidth() : te.getTextwidth(),align);    } else {      hb=new HorizontalBox(box,isMaxWidth ? box.getWidth() : te.getTextwidth(),align);    }    ti=new TeXIcon(hb,size,trueValues);  } else {    ti=new TeXIcon(box,size,trueValues);  }  if (fgcolor != null) {    ti.setForeground(fgcolor);  }  ti.isColored=te.isColored;  return ti;}  }
class C{  private void prepareEvents(){  Collections.sort(events);  for (int i=0; i < events.size(); i++) {    SweepLineEvent ev=(SweepLineEvent)events.get(i);    if (ev.isDelete()) {      ev.getInsertEvent().setDeleteEventIndex(i);    }  }}  }
class C{  public InvalidResponseException(){}  }
class C{  public static boolean isExpired(HttpRequest request){  return isExpired(request.getHeaders());}  }
class C{  public ExecutionHelper(final ExecutorService service){  this(service,Long.MAX_VALUE,TimeUnit.MILLISECONDS);}  }
class C{  @Override public void handleMouseClicked(ChartCanvas canvas,MouseEvent e){  if (this.mousePressedPoint == null) {    return;  }  Point2D currPt=new Point2D.Double(e.getX(),e.getY());  if (this.mousePressedPoint.distance(currPt) < 2) {    canvas.setAnchor(currPt);  }  this.mousePressedPoint=null;}  }
class C{  public InferenceVariable newInferenceVariable(){  return newInferenceVariable(false);}  }
class C{  public InventoryMonitor(InventoryView view){  boolean isDefault=GlowInventoryView.isDefault(view);  this.view=view;  size=view.countSlots() + (isDefault ? 4 : 0);  slots=new ItemStack[size];  if (isDefault) {    id=0;  } else {    id=nextId;    nextId=nextId % 100 + 1;  }  type=getTypeId(view.getType());  for (int i=0; i < size; ++i) {    updateItem(i);  }}  }
class C{  private int idToInt(String value){  try {    return Integer.valueOf(value);  } catch (  NumberFormatException e) {    throw new ConfigurationException("invalid type ID: " + value);  }}  }
class C{  public boolean isPath(){  return names.size() > 1;}  }
class C{  public boolean deleteMessage(String message){  SQLiteDatabase db=getWritableDatabase();  if (db != null && message != null) {    db.execSQL("DELETE FROM " + TABLE + " WHERE "+ COL_MESSAGE+ "='"+ message+ "';");    return true;  }  log.debug("Message not deleted from store, either message or database is null. [" + message + "]");  return false;}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) private void mergeLo(int base1,int len1,int base2,int len2){  assert len1 > 0 && len2 > 0 && base1 + len1 == base2;  Object[] a=this.a;  Object[] tmp=ensureCapacity(len1);  int cursor1=tmpBase;  int cursor2=base2;  int dest=base1;  System.arraycopy(a,base1,tmp,cursor1,len1);  a[dest++]=a[cursor2++];  if (--len2 == 0) {    System.arraycopy(tmp,cursor1,a,dest,len1);    return;  }  if (len1 == 1) {    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];    return;  }  int minGallop=this.minGallop;  outer:   while (true) {    int count1=0;    int count2=0;    do {      assert len1 > 1 && len2 > 0;      if (((Comparable)a[cursor2]).compareTo(tmp[cursor1]) < 0) {        a[dest++]=a[cursor2++];        count2++;        count1=0;        if (--len2 == 0)         break outer;      } else {        a[dest++]=tmp[cursor1++];        count1++;        count2=0;        if (--len1 == 1)         break outer;      }    } while ((count1 | count2) < minGallop);    do {      assert len1 > 1 && len2 > 0;      count1=gallopRight((Comparable)a[cursor2],tmp,cursor1,len1,0);      if (count1 != 0) {        System.arraycopy(tmp,cursor1,a,dest,count1);        dest+=count1;        cursor1+=count1;        len1-=count1;        if (len1 <= 1)         break outer;      }      a[dest++]=a[cursor2++];      if (--len2 == 0)       break outer;      count2=gallopLeft((Comparable)tmp[cursor1],a,cursor2,len2,0);      if (count2 != 0) {        System.arraycopy(a,cursor2,a,dest,count2);        dest+=count2;        cursor2+=count2;        len2-=count2;        if (len2 == 0)         break outer;      }      a[dest++]=tmp[cursor1++];      if (--len1 == 1)       break outer;      minGallop--;    } while (count1 >= MIN_GALLOP | count2 >= MIN_GALLOP);    if (minGallop < 0)     minGallop=0;    minGallop+=2;  }  this.minGallop=minGallop < 1 ? 1 : minGallop;  if (len1 == 1) {    assert len2 > 0;    System.arraycopy(a,cursor2,a,dest,len2);    a[dest + len2]=tmp[cursor1];  } else   if (len1 == 0) {    throw new IllegalArgumentException("Comparison method violates its general contract!");  } else {    assert len2 == 0;    assert len1 > 1;    System.arraycopy(tmp,cursor1,a,dest,len1);  }}  }
class C{  public void initDefaultDrawingToolLoaders(){  addEditToolLoader(new OMDistanceLoader());  addEditToolLoader(new OMLineLoader());  addEditToolLoader(new OMPolyLoader());  addEditToolLoader(new OMRectLoader());  addEditToolLoader(new OMCircleLoader());  addEditToolLoader(new OMPointLoader());}  }
class C{  public boolean isTypeText(){  return getPrintFormatType().equals(PRINTFORMATTYPE_Text);}  }
class C{  public static Clustering kMeans(Cluster[] centers,List<? extends Cluster> data){  int k=centers.length;  int dimensions=centers[0].getCenter().length;  ArrayList<ArrayList<Cluster>> clustering=new ArrayList<ArrayList<Cluster>>();  for (int i=0; i < k; i++) {    clustering.add(new ArrayList<Cluster>());  }  int repetitions=100;  while (repetitions-- >= 0) {    for (    Cluster point : data) {      double minDistance=distance(point.getCenter(),centers[0].getCenter());      int closestCluster=0;      for (int i=1; i < k; i++) {        double distance=distance(point.getCenter(),centers[i].getCenter());        if (distance < minDistance) {          closestCluster=i;          minDistance=distance;        }      }      clustering.get(closestCluster).add(point);    }    SphereCluster[] newCenters=new SphereCluster[centers.length];    for (int i=0; i < k; i++) {      newCenters[i]=calculateCenter(clustering.get(i),dimensions);      clustering.get(i).clear();    }    centers=newCenters;  }  return new Clustering(centers);}  }
class C{  public static ColorMatrixRable buildHueRotate(float a){  ColorMatrixRable8Bit filter=new ColorMatrixRable8Bit();  filter.type=TYPE_HUE_ROTATE;  float cos=(float)Math.cos(a);  float sin=(float)Math.sin(a);  float a00=0.213f + cos * 0.787f - sin * 0.213f;  float a10=0.213f - cos * 0.212f + sin * 0.143f;  float a20=0.213f - cos * 0.213f - sin * 0.787f;  float a01=0.715f - cos * 0.715f - sin * 0.715f;  float a11=0.715f + cos * 0.285f + sin * 0.140f;  float a21=0.715f - cos * 0.715f + sin * 0.715f;  float a02=0.072f - cos * 0.072f + sin * 0.928f;  float a12=0.072f - cos * 0.072f - sin * 0.283f;  float a22=0.072f + cos * 0.928f + sin * 0.072f;  filter.matrix=new float[][]{{a00,a01,a02,0,0},{a10,a11,a12,0,0},{a20,a21,a22,0,0},{0,0,0,1,0}};  return filter;}  }
class C{  public static void waitForIdle(){  while (!Job.getJobManager().isIdle()) {    delay(500);  }}  }
class C{  IndexEntry(ByteProvider byteProvider) throws IOException {  MXFPropertyPopulator.populateField(byteProvider,this,"temporal_offset");  MXFPropertyPopulator.populateField(byteProvider,this,"key_frame_offset");  MXFPropertyPopulator.populateField(byteProvider,this,"flags");  MXFPropertyPopulator.populateField(byteProvider,this,"stream_offset");}  }
class C{  public boolean isIncludeNullsUserElement1(){  Object oo=get_Value(COLUMNNAME_IsIncludeNullsUserElement1);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public boolean isAggressive(){  return aggressive;}  }
class C{  public void invalidateWheel(boolean clearCaches){  if (clearCaches) {    recycle.clearAll();    if (itemsLayout != null) {      itemsLayout.removeAllViews();    }    scrollingOffset=0;  } else   if (itemsLayout != null) {    recycle.recycleItems(itemsLayout,firstItem,new ItemsRange());  }  invalidate();}  }
class C{  public void show(FragmentManager manager,@IdRes int bottomSheetLayoutId){  dismissed=false;  shownByMe=true;  this.bottomSheetLayoutId=bottomSheetLayoutId;  manager.beginTransaction().add(fragment,String.valueOf(bottomSheetLayoutId)).commit();}  }
class C{  public FastHexaValueGridPortrayal2D(boolean immutableField){  super();  setImmutableField(immutableField);}  }
class C{  public SipRequest createReInvite(String[] featureTags,String content) throws PayloadException {  if (sLogger.isActivated()) {    sLogger.debug("createReInvite()");  }  try {    mSession.getDialogPath().incrementCseq();    if (sLogger.isActivated()) {      sLogger.info("Increment DialogPath CSeq - DialogPath CSeq =".concat(String.valueOf(mSession.getDialogPath().getCseq())));    }    Dialog dlg=mSession.getDialogPath().getStackDialog();    while ((dlg != null) && (dlg.getLocalSeqNumber() < mSession.getDialogPath().getCseq())) {      dlg.incrementLocalSequenceNumber();      if (sLogger.isActivated()) {        sLogger.info("Increment LocalSequenceNumber -  Dialog local Seq Number =".concat(String.valueOf(dlg.getLocalSeqNumber())));      }    }    SipRequest reInvite=SipMessageFactory.createReInvite(mSession.getDialogPath(),featureTags,content);    if (sLogger.isActivated()) {      sLogger.info("reInvite created -  reInvite CSeq =".concat(String.valueOf(reInvite.getCSeq())));    }    mSession.getAuthenticationAgent().setAuthorizationHeader(reInvite);    mSession.getAuthenticationAgent().setProxyAuthorizationHeader(reInvite);    return reInvite;  } catch (  InvalidArgumentException e) {    throw new PayloadException("Unable to create re-invite request!",e);  }catch (  ParseException e) {    throw new PayloadException("Unable to create re-invite request!",e);  }}  }
class C{  public static void cleaningUpOPUSDirectories(Config config){  log.info("Removing temp directories");  UrbanSimParameterConfigModuleV3 module=M4UConfigUtils.getUrbanSimParameterConfigAndPossiblyConvert(config);  File tempFile;  tempFile=new File(module.getMATSim4Opus());  if (tempFile.exists())   org.matsim.contrib.matrixbasedptrouter.utils.TempDirectoryUtil.deleteDirectory(tempFile);  tempFile=new File(module.getMATSim4OpusOutput());  if (tempFile.exists())   org.matsim.contrib.matrixbasedptrouter.utils.TempDirectoryUtil.deleteDirectory(tempFile);  tempFile=new File(module.getMATSim4OpusTemp());  if (tempFile.exists())   org.matsim.contrib.matrixbasedptrouter.utils.TempDirectoryUtil.deleteDirectory(tempFile);  tempFile=new File(module.getMATSim4OpusConfig());  if (tempFile.exists())   org.matsim.contrib.matrixbasedptrouter.utils.TempDirectoryUtil.deleteDirectory(tempFile);  log.info("Finished removing temp directories");}  }
class C{  @Override public int height(){  if (isAirborne()) {    return 0;  }  return 1;}  }
class C{  private Map<String,EcoInfo> parse(File file){  if (LOG.isDebugEnabled()) {    LOG.info("parse(" + file.getAbsolutePath() + ")");  }  long startTime=System.currentTimeMillis();  Map<String,EcoInfo> result=new TreeMap<String,EcoInfo>();  BufferedReader reader=null;  try {    reader=new BufferedReader(new FileReader(file));    String currentLine=null;    StringBuilder fen=new StringBuilder();    while ((currentLine=reader.readLine()) != null) {      if (StringUtils.isNotBlank(currentLine)) {        RaptorStringTokenizer tok=new RaptorStringTokenizer(currentLine," ",true);        String eco=tok.nextToken();        StringBuilder description=new StringBuilder(tok.nextToken());        String lastToken=null;        while (!(lastToken=tok.nextToken()).contains("/")) {          description.append(" ");          description.append(lastToken);        }        fen.setLength(0);        fen.append(lastToken);        fen.append(" ");        fen.append(tok.nextToken());        fen.append(" ");        fen.append(tok.nextToken());        fen.append(" ");        fen.append(tok.nextToken());        result.put(fen.toString(),new EcoInfo(fen.toString(),eco,description.toString()));      }    }  } catch (  IOException ioe) {    throw new RuntimeException(ioe);  } finally {    if (reader != null) {      try {        reader.close();      } catch (      IOException ioe) {      }    }  }  if (LOG.isDebugEnabled()) {    LOG.info("parse( " + file.getAbsolutePath() + ") executed in "+ (System.currentTimeMillis() - startTime)+ "ms");  }  return result;}  }
class C{  public void initButtonActionPerformed(){  int nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)SerialTrafficController.instance().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  SerialTrafficController.instance().sendSerialMessage((SerialMessage)curNode.createInitPacket(),null);}  }
class C{  private void validateSqlStatement(String sql,int jdbcStatementIndex){  Assert.isTrue(StringUtils.isNotBlank(sql),"JDBC statement [" + jdbcStatementIndex + "] SQL is required");}  }
class C{  @Override boolean validateFree(SegmentKelp segment){  if (segment == _segment && isSwappable()) {    PageLeafImpl leaf=null;    if (_leafRef != null) {      leaf=_leafRef.get();    }    System.out.println("\nSegment-free failed validation: " + this + " "+ segment+ " "+ leaf+ "\n");    return false;  }  return true;}  }
class C{  @Nullable private static Deflater createSyncFlushDeflater(){  Deflater def=new Deflater();  try {    Field f=def.getClass().getDeclaredField("flushParm");    f.setAccessible(true);    f.setInt(def,2);  } catch (  Exception e) {    return null;  }  return def;}  }
class C{  public boolean equals(Object o){  if (this == o) {    return true;  }  if (o == null || this.getClass() != o.getClass()) {    return false;  }  return Arrays.equals(oid,((ObjectIdentifier)o).oid);}  }
class C{  public static byte[] encodeStringWithHyphen(final String str){  return DnaUtils.encodeString(str.replace("-",""));}  }
class C{  public HashSetNodeEventListener exclude(NodeEvent e){  filter.remove(e);  return this;}  }
class C{  public GeneralName(int tag,byte[] name) throws IOException {  if (name == null) {    throw new NullPointerException("name == null");  }  if ((tag < 0) || (tag > 8)) {    throw new IOException("GeneralName: unknown tag: " + tag);  }  this.tag=tag;  this.name_encoding=new byte[name.length];  System.arraycopy(name,0,this.name_encoding,0,name.length);  this.name=nameASN1[tag].decode(this.name_encoding);}  }
class C{  public static int minIndex(int[] ints){  int minimum=0;  int minIndex=0;  for (int i=0; i < ints.length; i++) {    if ((i == 0) || (ints[i] < minimum)) {      minIndex=i;      minimum=ints[i];    }  }  return minIndex;}  }
class C{  public Parser(String referersResource) throws IOException, RefererParserException {  this(Parser.class.getResourceAsStream(referersResource));}  }
class C{  private static String generateVulnStatsTable(Set<Report> toolResults,String category){  StringBuilder sb=new StringBuilder();  sb.append("<table class=\"table\">\n");  sb.append("<tr>");  sb.append("<th>Tool</th>");  if (mixedMode)   sb.append("<th>Benchmark Version</th>");  sb.append("<th>TP</th>");  sb.append("<th>FN</th>");  sb.append("<th>TN</th>");  sb.append("<th>FP</th>");  sb.append("<th>Total</th>");  sb.append("<th>TPR</th>");  sb.append("<th>FPR</th>");  sb.append("<th>Score</th>");  sb.append("</tr>\n");  for (  Report toolResult : toolResults) {    if (!(showAveOnlyMode && toolResult.isCommercial())) {      OverallResults or=toolResult.getOverallResults();      Map<String,Counter> scores=toolResult.getScores();      Counter c=scores.get(category);      OverallResult r=or.getResults(category);      String style="";      if (Math.abs(r.truePositiveRate - r.falsePositiveRate) < .1)       style="class=\"danger\""; else       if (r.truePositiveRate > .7 && r.falsePositiveRate < .3)       style="class=\"success\"";      sb.append("<tr " + style + ">");      sb.append("<td>" + toolResult.getToolNameAndVersion() + "</td>");      if (mixedMode)       sb.append("<td>" + toolResult.getBenchmarkVersion() + "</td>");      sb.append("<td>" + c.tp + "</td>");      sb.append("<td>" + c.fn + "</td>");      sb.append("<td>" + c.tn + "</td>");      sb.append("<td>" + c.fp + "</td>");      sb.append("<td>" + r.total + "</td>");      sb.append("<td>" + new DecimalFormat("#0.00%").format(r.truePositiveRate) + "</td>");      sb.append("<td>" + new DecimalFormat("#0.00%").format(r.falsePositiveRate) + "</td>");      sb.append("<td>" + new DecimalFormat("#0.00%").format(r.score) + "</td>");      sb.append("</tr>\n");    }  }  sb.append("</tr>\n");  sb.append("</table>");  return sb.toString();}  }
class C{  public static void main(String[] args){  runCheck(new CheckKernel(),args);}  }
class C{  private void one() throws JSONException {  if (probe) {    log(1);  }  write(1,1);}  }
class C{  public static DAOProfile newInstance(){  final DAOProfile returnInstance=new DAOProfile();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public void pause(){  unregisterGlobalErrorCallback();}  }
class C{  @Override public Properties trackVideoPlaying(String videoId,Double currentTime,String courseId,String unitUrl){  SegmentAnalyticsEvent aEvent=getCommonPropertiesWithCurrentTime(currentTime,videoId,Values.VIDEO_PLAYED);  aEvent.setCourseContext(courseId,unitUrl,Values.VIDEOPLAYER);  tracker.track(Events.PLAYED_VIDEO,aEvent.properties);  return aEvent.properties;}  }
class C{  @Override protected AdminResponse createResponse(DistributionManager dm){  CancellationRegistry.getInstance().registerMessage(this);  resp=ObjectDetailsResponse.create(dm,this.getSender());  if (cancelled) {    return null;  }  resp.buildDetails(this.getRegion(dm.getSystem()),this.objName,this.inspectionType);  if (cancelled) {    return null;  }  CancellationRegistry.getInstance().deregisterMessage(this);  return resp;}  }
class C{  public int addFuelAmount(int amount){  int ret=stats.addFuelAmount(FuelType.LIQUID,amount);  setFuelAmount(stats.getFuelAmount(FuelType.LIQUID));  return ret;}  }
class C{  public EIPModel createEIPModel(){  EIPModelImpl eipModel=new EIPModelImpl();  return eipModel;}  }
class C{  public int indexOfTab(Icon icon){  for (int i=0; i < getTabCount(); i++) {    Icon tabIcon=getIconAt(i);    if ((tabIcon != null && tabIcon.equals(icon)) || (tabIcon == null && tabIcon == icon)) {      return i;    }  }  return -1;}  }
class C{  @VisibleForTesting protected String createDCATCatalogInformation(){  StringBuilder catalogBuilder=new StringBuilder();  List<String> themeTaxonomies=new ArrayList<String>();  Ipt ipt=registrationManager.getIpt();  List<String> uris=new ArrayList<String>();  Date firstCreation=new Date();  boolean firstPublishedDatePresent=false;  Date lastModification=new Date(0);  boolean lastPublishedDatePresent=false;  for (  Resource res : resourceManager.listPublishedPublicVersions()) {    if (res.getEml().parseLicenseUrl() != null) {      String uri=cfg.getResourceUrl(res.getShortname()) + "#Dataset";      uris.add(uri);      if (res.getCreated() != null && res.getCreated().before(firstCreation)) {        firstCreation=res.getCreated();        firstPublishedDatePresent=true;      }      if (res.getLastPublished() != null && res.getLastPublished().after(lastModification)) {        lastModification=res.getLastPublished();        lastPublishedDatePresent=true;      }    }  }  String url=cfg.getBaseUrl();  url+="#Catalog";  catalogBuilder.append(encapsulateObject(url,ObjectTypes.RESOURCE));  catalogBuilder.append("\n");  catalogBuilder.append(" a dcat:Catalog");  String publisherBaselink=settings.get(PUBLISHER_BASELINK_KEY);  if (ipt != null && publisherBaselink != null) {    addPredicateToBuilder(catalogBuilder,"dct:title");    addObjectToBuilder(catalogBuilder,ipt.getName(),ObjectTypes.LITERAL);    if (ipt.getDescription() != null) {      addPredicateToBuilder(catalogBuilder,"dct:description");      addObjectToBuilder(catalogBuilder,ipt.getDescription(),ObjectTypes.LITERAL);    } else {      LOG.debug("IPT description is null");    }    addPredicateToBuilder(catalogBuilder,"dct:publisher");    String publisher=publisherBaselink + ipt.getOrganisationKey() + "#Organization";    addObjectToBuilder(catalogBuilder,publisher,ObjectTypes.RESOURCE);    if (!uris.isEmpty()) {      addPredicateToBuilder(catalogBuilder,"dcat:dataset");      addObjectsToBuilder(catalogBuilder,uris,ObjectTypes.RESOURCE);    }    if (cfg.getBaseUrl() != null) {      addPredicateToBuilder(catalogBuilder,"foaf:homepage");      addObjectToBuilder(catalogBuilder,cfg.getBaseUrl(),ObjectTypes.RESOURCE);    }    if (firstPublishedDatePresent) {      addPredicateToBuilder(catalogBuilder,"dct:issued");      addObjectToBuilder(catalogBuilder,parseToIsoDate(firstCreation),ObjectTypes.LITERAL);    }    if (lastPublishedDatePresent) {      addPredicateToBuilder(catalogBuilder,"dct:modified");      addObjectToBuilder(catalogBuilder,parseToIsoDate(lastModification),ObjectTypes.LITERAL);    }    String themeTaxonomyUri=settings.get(THEME_TAXONOMY_URI_KEY);    String catalogThemeTitle=settings.get(CATALOG_THEME_TITLE_KEY);    if (themeTaxonomyUri != null && catalogThemeTitle != null) {      addPredicateToBuilder(catalogBuilder,"dcat:themeTaxonomy");      themeTaxonomies.add(encapsulateObject(themeTaxonomyUri,ObjectTypes.RESOURCE) + " a skos:ConceptScheme ; dct:title \"" + catalogThemeTitle+ "\"@en .");      addObjectToBuilder(catalogBuilder,themeTaxonomyUri,ObjectTypes.RESOURCE);    }    String catalogRights=settings.get(CATALOG_RIGHTS_KEY);    if (catalogRights != null) {      addPredicateToBuilder(catalogBuilder,"dct:license");      addObjectToBuilder(catalogBuilder,catalogRights,ObjectTypes.RESOURCE);    }    if (cfg.getLongitude() != null && cfg.getLatitude() != null) {      addPredicateToBuilder(catalogBuilder,"dct:spatial");      String spatial=" a dct:Location ; locn:geometry \"" + "{ \\\"type\\\": \\\"Point\\\", \\\"coordinates\\\": [ " + cfg.getLongitude() + ","+ cfg.getLatitude()+ " ] }\" ";      addObjectToBuilder(catalogBuilder,spatial,ObjectTypes.OBJECT);    } else {      LOG.debug("No spatial data defined for the IPT");    }    String languageLink=settings.get(LANGUAGE_LINK_KEY);    if (languageLink != null) {      languageLink=languageLink + "en";      addPredicateToBuilder(catalogBuilder,"dct:language");      addObjectToBuilder(catalogBuilder,languageLink,ObjectTypes.RESOURCE);    }  } else {    LOG.error("IPT has not been registered yet");  }  catalogBuilder.append(" .\n");  catalogBuilder.append("\n");  for (  String tax : themeTaxonomies) {    catalogBuilder.append(tax);    catalogBuilder.append("\n");  }  return catalogBuilder.toString();}  }
class C{  @Override public List<String> blpop(final int timeout,final String... keys){  return blpop(getArgsAddTimeout(timeout,keys));}  }
class C{  public boolean isSetHeader(){  return this.header != null;}  }
class C{  public synchronized boolean performReverse(Way way){  createCheckpoint(R.string.undo_action_reverse_way);  boolean hadToReverse=getDelegator().reverseWay(way);  map.invalidate();  return hadToReverse;}  }
class C{  public Automaton<LR0Item,LR0State> createAutomaton() throws GeneratorException {  return new LR0ParallelAutomatonFactory().createAutomaton(this,grammarInfo,numThreads);}  }
class C{  public static SpawnEgg1_9 fromItemStack(ItemStack item){  if (item == null)   throw new IllegalArgumentException("item cannot be null");  if (item.getType() != Material.MONSTER_EGG)   throw new IllegalArgumentException("item is not a monster egg");  net.minecraft.server.v1_9_R1.ItemStack stack=CraftItemStack.asNMSCopy(item);  NBTTagCompound tagCompound=stack.getTag();  if (tagCompound != null) {    @SuppressWarnings("deprecation") EntityType type=EntityType.fromName(tagCompound.getCompound("EntityTag").getString("id"));    if (type != null) {      return new SpawnEgg1_9(type);    } else {      return null;    }  } else {    return null;  }}  }
class C{  @Deprecated public FileTemplateLoader() throws IOException {  this(new File(SecurityUtilities.getSystemProperty("user.dir")));}  }
class C{  public PolicyConstraintsExtension(Boolean critical,Object value) throws IOException {  this.extensionId=PKIXExtensions.PolicyConstraints_Id;  this.critical=critical.booleanValue();  this.extensionValue=(byte[])value;  DerValue val=new DerValue(this.extensionValue);  if (val.tag != DerValue.tag_Sequence) {    throw new IOException("Sequence tag missing for PolicyConstraint.");  }  DerInputStream in=val.data;  while (in != null && in.available() != 0) {    DerValue next=in.getDerValue();    if (next.isContextSpecific(TAG_REQUIRE) && !next.isConstructed()) {      if (this.require != -1)       throw new IOException("Duplicate requireExplicitPolicy" + "found in the PolicyConstraintsExtension");      next.resetTag(DerValue.tag_Integer);      this.require=next.getInteger();    } else     if (next.isContextSpecific(TAG_INHIBIT) && !next.isConstructed()) {      if (this.inhibit != -1)       throw new IOException("Duplicate inhibitPolicyMapping" + "found in the PolicyConstraintsExtension");      next.resetTag(DerValue.tag_Integer);      this.inhibit=next.getInteger();    } else     throw new IOException("Invalid encoding of PolicyConstraint");  }}  }
class C{  public IdentityEscapeSequence createIdentityEscapeSequence(){  IdentityEscapeSequenceImpl identityEscapeSequence=new IdentityEscapeSequenceImpl();  return identityEscapeSequence;}  }
class C{  public int prepare(Xid xid) throws XAException {  execute("XA PREPARE " + xidToString(xid));  return XA_OK;}  }
class C{  public final int yystate(){  return zzLexicalState;}  }
class C{  public PolarFilter(){  this(RECT_TO_POLAR);}  }
class C{  public void substitute(Writable w,RTLExpression expr){  assert (!(w instanceof RTLBitRange));  this.substitutions.put(w,expr);}  }
class C{  public static AdjustmentListener add(AdjustmentListener a,AdjustmentListener b){  return (AdjustmentListener)addInternal(a,b);}  }
class C{  public Device(Device device,Entity newEntity,int insertionpoint){  this.deviceManager=device.deviceManager;  this.deviceKey=device.deviceKey;  this.dhcpClientName=device.dhcpClientName;  this.entities=new Entity[device.entities.length + 1];  if (insertionpoint < 0) {    insertionpoint=-(Arrays.binarySearch(device.entities,newEntity) + 1);  }  if (insertionpoint > 0) {    System.arraycopy(device.entities,0,this.entities,0,insertionpoint);  }  if (insertionpoint < device.entities.length) {    System.arraycopy(device.entities,insertionpoint,this.entities,insertionpoint + 1,device.entities.length - insertionpoint);  }  this.entities[insertionpoint]=newEntity;  this.oldAPs=null;  if (device.oldAPs != null) {    this.oldAPs=new ArrayList<AttachmentPoint>(device.oldAPs);  }  this.attachmentPoints=null;  if (device.attachmentPoints != null) {    this.attachmentPoints=new ArrayList<AttachmentPoint>(device.attachmentPoints);  }  this.macAddressString=this.entities[0].getMacAddress().toString();  this.entityClass=device.entityClass;  vlanIds=computeVlandIds();}  }
class C{  public CheckpointManager(NetworkParameters params,@Nullable InputStream inputStream) throws IOException {  this.params=checkNotNull(params);  if (inputStream == null)   inputStream=openStream(params);  checkNotNull(inputStream);  inputStream=new BufferedInputStream(inputStream);  inputStream.mark(1);  int first=inputStream.read();  inputStream.reset();  if (first == BINARY_MAGIC.charAt(0))   dataHash=readBinary(inputStream); else   if (first == TEXTUAL_MAGIC.charAt(0))   dataHash=readTextual(inputStream); else   throw new IOException("Unsupported format.");}  }
class C{  public boolean generate(Projection proj){  Debug.message("eomgdetail","EditableOMScalingRaster.generate()");  if (raster != null)   raster.generate(proj);  for (int i=0; i < gPoints.length; i++) {    GrabPoint gp=gPoints[i];    if (gp != null) {      gp.generate(proj);    }  }  return true;}  }
class C{  public static String encodeString(String uri){  CharBuffer cb=CharBuffer.allocate();  for (int i=0; i < uri.length(); i++) {    char ch=uri.charAt(i);switch (ch) {case '<':      cb.append("&lt;");    break;case '>':  cb.append("&gt;");break;case '&':cb.append("&amp;");break;default :cb.append(ch);}}return cb.close();}  }
class C{  public static void createTable(String createTableQuery,Connection connection){  LOG.info("Create Table from DDL:");  LOG.info(createTableQuery);  executeStatement(createTableQuery,connection);}  }
class C{  private void mergeForceCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] < runLen[n + 1])     n--;    mergeAt(n);  }}  }
class C{  public boolean implementedBy(Environment env,ClassDeclaration c) throws ClassNotFound {  for (; c != null; c=c.getClassDefinition(env).getSuperClass()) {    if (getClassDeclaration().equals(c)) {      return true;    }    ClassDeclaration intf[]=c.getClassDefinition(env).getInterfaces();    for (int i=0; i < intf.length; i++) {      if (implementedBy(env,intf[i])) {        return true;      }    }  }  return false;}  }
class C{  int parseHour(String source,char patternChar,int offset) throws ParseException {  int min=(patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER) ? 1 : 0;  int max=((patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER) ? 23 : 11) + min;  return parseNumber(source,offset,"hour",min,max) - min;}  }
class C{  public byte[] encode(StunStack stunStack,byte[] content,int offset,int length){  char type=getAttributeType();  byte binValue[]=new byte[HEADER_LENGTH + getDataLength()];  binValue[0]=(byte)(type >> 8);  binValue[1]=(byte)(type & 0x00FF);  binValue[2]=(byte)(getDataLength() >> 8);  binValue[3]=(byte)(getDataLength() & 0x00FF);  byte[] xorCrc32=calculateXorCRC32(content,offset,length);  binValue[4]=xorCrc32[0];  binValue[5]=xorCrc32[1];  binValue[6]=xorCrc32[2];  binValue[7]=xorCrc32[3];  return binValue;}  }
class C{  public static byte[] removeAllInstancesOfOp(byte[] inputScript,int opCode){  return removeAllInstancesOf(inputScript,new byte[]{(byte)opCode});}  }
class C{  public synchronized void returnBuf(byte[] buf){  if (buf == null || buf.length > mSizeLimit) {    return;  }  mBuffersByLastUse.add(buf);  int pos=Collections.binarySearch(mBuffersBySize,buf,BUF_COMPARATOR);  if (pos < 0) {    pos=-pos - 1;  }  mBuffersBySize.add(pos,buf);  mCurrentSize+=buf.length;  trim();}  }
class C{  protected void showCrosshairs(){  if (this.animatorSet.isStarted()) {    this.animatorSet.cancel();  }  this.crosshairs.setAlpha(1.0f);  this.crosshairsActive=true;}  }
class C{  public TransportAddress(InetAddress address,int port,Transport transport){  super(address,port);  this.transport=transport;}  }
class C{  public static void fixIDN(InternetAddress addr){  String address=addr.getAddress();  int pos=address.indexOf('@');  if (pos > 0 && pos < address.length() - 1) {    String domain=address.substring(pos + 1);    if (!StringUtil.isAscii(domain)) {      domain=IDN.toASCII(domain);      addr.setAddress(address.substring(0,pos) + "@" + domain);    }  }}  }
class C{  public static boolean isXMLSpace(char c){  return (c <= 0x0020) && (((((1L << 0x0009) | (1L << 0x000A) | (1L << 0x000D)| (1L << 0x0020)) >> c) & 1L) != 0);}  }
class C{  public <A>TheoryBuilder<A> forAll(final Source<A> values){  return new TheoryBuilder<>(state,values,null);}  }
class C{  public static int encodeLongitudeCeil(double longitude){  GeoUtils.checkLongitude(longitude);  if (longitude == 180.0D) {    longitude=Math.nextDown(longitude);  }  return (int)Math.ceil(longitude / LON_DECODE);}  }
class C{  static <E>ImmutableList<E> asImmutableList(Object[] elements,int length){switch (length) {case 0:    return of();case 1:  @SuppressWarnings("unchecked") ImmutableList<E> list=new SingletonImmutableList<E>((E)elements[0]);return list;default :if (length < elements.length) {elements=arraysCopyOf(elements,length);}return new RegularImmutableList<E>(elements);}}  }
class C{  public void onDrawerOpened(View drawerView){  super.onDrawerOpened(drawerView);}  }
class C{  private static List<String[]> readSentence(BufferedReader aReader) throws IOException {  List<String[]> words=new ArrayList<String[]>();  String line;  while ((line=aReader.readLine()) != null) {    if (StringUtils.isBlank(line)) {      break;    }    String[] fields=line.split(" ");    if (fields.length != 3) {      throw new IOException("Invalid file format. Line needs to have 3 space-separted fields: [" + line + "]");    }    words.add(fields);  }  if (line == null && words.isEmpty()) {    return null;  } else {    return words;  }}  }
class C{  public boolean invokeVelocimacro(String vmName,String logTag,String params[],Context context,Writer writer) throws Exception {  if (vmName == null || params == null || context == null || writer == null || logTag == null) {    ri.error("VelocityEngine.invokeVelocimacro() : invalid parameter");    return false;  }  if (!ri.isVelocimacro(vmName,logTag)) {    ri.error("VelocityEngine.invokeVelocimacro() : VM '" + vmName + "' not registered.");    return false;  }  StringBuffer construct=new StringBuffer("#");  construct.append(vmName);  construct.append("(");  for (int i=0; i < params.length; i++) {    construct.append(" $");    construct.append(params[i]);  }  construct.append(" )");  try {    boolean retval=evaluate(context,writer,logTag,construct.toString());    return retval;  } catch (  Exception e) {    ri.error("VelocityEngine.invokeVelocimacro() : error " + e);    throw e;  }}  }
class C{  public void testFindUserGroupsActiveDirectory() throws Exception {  LdapManager mgr=getLdapAD();  List ret=null;  AndFilter filter=new AndFilter();  filter.and(new EqualsFilter(mgr.getGroupsReturningAttribute(LdapGroupAttributeConstants.LDAP_GROUP_ATTRIBUTE_MEMBER),"CN=nacho,CN=Users,DC=SERVIDOR-GDOC3,DC=iecisa,DC=corp"));  try {    LdapSearchManagerVO searchMgrVO=new LdapSearchManagerVO();    searchMgrVO.setFilter(filter);    searchMgrVO.setAddGroupClasses(true);    ret=mgr.findUserGroups(searchMgrVO);  } catch (  Exception e) {  }  assertEquals(2,ret.size());}  }
class C{  public byte[] serializeKey(final Object obj){  return id2key((TermId<?>)obj);}  }
class C{  ZoneInfo(String ID,int rawOffset,int dstSavings,int checksum,long[] transitions,int[] offsets,int[] simpleTimeZoneParams,boolean willGMTOffsetChange){  setID(ID);  this.rawOffset=rawOffset;  this.dstSavings=dstSavings;  this.checksum=checksum;  this.transitions=transitions;  this.offsets=offsets;  this.simpleTimeZoneParams=simpleTimeZoneParams;  this.willGMTOffsetChange=willGMTOffsetChange;}  }
class C{  public void init(SecureRandom random) throws IllegalArgumentException {}  }
class C{  private static BigInteger computeDays(BigInteger months,int refYear,int refMonth){switch (months.signum()) {case 0:    return BigInteger.valueOf(0);case -1:  return computeDays(months.negate(),refYear,refMonth).negate();}BigInteger[] tem=months.divideAndRemainder(BigInteger.valueOf(400 * 12));--refMonth;int total=0;for (int rem=tem[1].intValue(); rem > 0; rem--) {total+=daysInMonth(refYear,refMonth);if (++refMonth == 12) {  refMonth=0;  refYear++;}}return tem[0].multiply(BigInteger.valueOf(365 * 400 + 97)).add(BigInteger.valueOf(total));}  }
class C{  public BluRayRandomFile(java.io.File bdmvDir,boolean directBuffer,int inTargetTitle) throws java.io.IOException {  super(sage.media.bluray.BluRayParser.BLURAY_CHARSET,directBuffer);  this.bdmvDir=bdmvDir;  targetTitle=inTargetTitle;  bdp=new sage.media.bluray.BluRayParser(bdmvDir);  bdp.fullyAnalyze();  if (targetTitle <= 0)   targetTitle=bdp.getMainPlaylistIndex() + 1;  targetTitle=Math.max(1,Math.min(targetTitle,bdp.getNumPlaylists()));  currPlaylist=bdp.getPlaylist(targetTitle - 1);  fileSequence=new java.io.File[currPlaylist.playlistItems.length];  fileOffsets=new long[fileSequence.length];  ptsOffsets=new long[fileSequence.length];  streamDir=new java.io.File(bdmvDir,"STREAM");  totalSize=0;  long[] totalPts=new long[fileSequence.length];  for (int i=0; i < fileSequence.length; i++) {    fileSequence[i]=new java.io.File(streamDir,currPlaylist.playlistItems[i].itemClips[0].clipName + (bdp.doesUseShortFilenames() ? ".MTS" : ".m2ts"));    fileOffsets[i]=totalSize;    ptsOffsets[i]=(i == 0 ? 0 : totalPts[i - 1]) - currPlaylist.playlistItems[i].inTime;    totalSize+=fileSequence[i].length();    totalPts[i]=(i == 0 ? 0 : totalPts[i - 1]) + (currPlaylist.playlistItems[i].outTime - currPlaylist.playlistItems[i].inTime);  }  if (sage.Sage.DBG)   System.out.println("Established BluRay file sequence with " + fileSequence.length + " segments and total size="+ totalSize);  currFileIndex=0;  fc=new java.io.FileInputStream(fileSequence[currFileIndex]).getChannel();  chapterOffsets=new long[currPlaylist.playlistMarks.length];  for (int i=0; i < chapterOffsets.length; i++) {    int itemRef=currPlaylist.playlistMarks[i].playItemIdRef;    chapterOffsets[i]=(itemRef == 0 ? 0 : totalPts[itemRef - 1]) + currPlaylist.playlistMarks[i].timestamp - currPlaylist.playlistItems[itemRef].inTime;  }}  }
class C{  public boolean isEmpty(){  return root == null;}  }
class C{  private void startMap(){  try {    String address=mEditTextReveal.getText().toString();    final Intent geoIntent=makeMapsIntent(address);    if (geoIntent.resolveActivity(getPackageManager()) != null)     startActivity(geoIntent); else     startActivity(makeBrowserIntent(address));  } catch (  Exception e) {    e.printStackTrace();  }}  }
class C{  public void merge(@CheckForNull BugDesignation other){  if (other == null) {    return;  }  boolean changed=false;  if ((annotationText == null || annotationText.length() == 0) && other.annotationText != null && other.annotationText.length() > 0) {    annotationText=other.annotationText;    setDirty(true);    changed=true;  }  if (!hasDesignationKey() && other.hasDesignationKey()) {    designation=other.designation;    setDirty(true);    changed=true;  }  if (!changed) {    return;  }  if ((user == null || user.length() == 0) && other.user != null && other.user.length() > 0) {    user=other.user;  }  if (timestamp == 0 && other.timestamp != 0) {    timestamp=other.timestamp;  }}  }
class C{  @Override public void writeEntityToNBT(NBTTagCompound par1NBTTagCompound){  par1NBTTagCompound.setShort("xTile",(short)this.xTile);  par1NBTTagCompound.setShort("yTile",(short)this.yTile);  par1NBTTagCompound.setShort("zTile",(short)this.zTile);  par1NBTTagCompound.setInteger("inTile",Block.getIdFromBlock(this.inTile));  par1NBTTagCompound.setByte("inData",(byte)this.inData);  par1NBTTagCompound.setByte("shake",(byte)this.arrowShake);  par1NBTTagCompound.setByte("inGround",(byte)(this.inGround ? 1 : 0));  par1NBTTagCompound.setBoolean("isExplosive",this.isExplosive);}  }
class C{  @HLEFunction(nid=0x808F6063,version=150) public int sceNetResolverStop(@CheckArgument("checkRid") int rid){  ResolverID currentRID=RIDs.get(rid);  if (!currentRID.getIDStatus()) {    return SceKernelErrors.ERROR_NET_RESOLVER_ALREADY_STOPPED;  }  currentRID.stop();  return 0;}  }
class C{  @Override public void enableLoadAnimation(){  enableLoadAnimation(mDuration,new AlphaInAnimation());}  }
class C{  public void testRandomStrings() throws Exception {  Analyzer analyzer=new ThaiAnalyzer();  checkRandomData(random(),analyzer,1000 * RANDOM_MULTIPLIER);  analyzer.close();}  }
class C{  @Override public void actionPerformed(ActionEvent e){  if (e.getActionCommand() == null) {    if (m_scaling == 0) {      repaint();    } else {      animateScaling(m_nViewPos,m_nViewSize,m_scaling);    }  } else   if (e.getActionCommand().equals("Fit to Screen")) {    Dimension np=new Dimension();    Dimension ns=new Dimension();    getScreenFit(np,ns);    animateScaling(np,ns,10);  } else   if (e.getActionCommand().equals("Center on Top Node")) {    int tpx=(int)(m_topNode.getCenter() * m_viewSize.width);    int tpy=(int)(m_topNode.getTop() * m_viewSize.height);    Dimension np=new Dimension(getSize().width / 2 - tpx,getSize().width / 6 - tpy);    animateScaling(np,m_viewSize,10);  } else   if (e.getActionCommand().equals("Auto Scale")) {    autoScale();  } else   if (e.getActionCommand().equals("Visualize The Node")) {    if (m_focusNode >= 0) {      Instances inst;      if ((inst=m_nodes[m_focusNode].m_node.getInstances()) != null) {        VisualizePanel pan=new VisualizePanel();        pan.setInstances(inst);        JFrame nf=new JFrame();        nf.setSize(400,300);        nf.getContentPane().add(pan);        nf.setVisible(true);      } else {        JOptionPane.showMessageDialog(this,"Sorry, there is no " + "available Instances data for " + "this Node.","Sorry!",JOptionPane.WARNING_MESSAGE);      }    } else {      JOptionPane.showMessageDialog(this,"Error, there is no " + "selected Node to perform " + "this operation on.","Error!",JOptionPane.ERROR_MESSAGE);    }  } else   if (e.getActionCommand().equals("Create Child Nodes")) {    if (m_focusNode >= 0) {      if (m_listener != null) {        m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.ADD_CHILDREN,m_nodes[m_focusNode].m_node.getRefer()));      } else {        JOptionPane.showMessageDialog(this,"Sorry, there is no " + "available Decision Tree to " + "perform this operation on.","Sorry!",JOptionPane.WARNING_MESSAGE);      }    } else {      JOptionPane.showMessageDialog(this,"Error, there is no " + "selected Node to perform this " + "operation on.","Error!",JOptionPane.ERROR_MESSAGE);    }  } else   if (e.getActionCommand().equals("Remove Child Nodes")) {    if (m_focusNode >= 0) {      if (m_listener != null) {        m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.REMOVE_CHILDREN,m_nodes[m_focusNode].m_node.getRefer()));      } else {        JOptionPane.showMessageDialog(this,"Sorry, there is no " + "available Decsion Tree to " + "perform this operation on.","Sorry!",JOptionPane.WARNING_MESSAGE);      }    } else {      JOptionPane.showMessageDialog(this,"Error, there is no " + "selected Node to perform this " + "operation on.","Error!",JOptionPane.ERROR_MESSAGE);    }  } else   if (e.getActionCommand().equals("classify_child")) {    if (m_focusNode >= 0) {      if (m_listener != null) {        m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.CLASSIFY_CHILD,m_nodes[m_focusNode].m_node.getRefer()));      } else {        JOptionPane.showMessageDialog(this,"Sorry, there is no " + "available Decsion Tree to " + "perform this operation on.","Sorry!",JOptionPane.WARNING_MESSAGE);      }    } else {      JOptionPane.showMessageDialog(this,"Error, there is no " + "selected Node to perform this " + "operation on.","Error!",JOptionPane.ERROR_MESSAGE);    }  } else   if (e.getActionCommand().equals("send_instances")) {    if (m_focusNode >= 0) {      if (m_listener != null) {        m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.SEND_INSTANCES,m_nodes[m_focusNode].m_node.getRefer()));      } else {        JOptionPane.showMessageDialog(this,"Sorry, there is no " + "available Decsion Tree to " + "perform this operation on.","Sorry!",JOptionPane.WARNING_MESSAGE);      }    } else {      JOptionPane.showMessageDialog(this,"Error, there is no " + "selected Node to perform this " + "operation on.","Error!",JOptionPane.ERROR_MESSAGE);    }  } else   if (e.getActionCommand().equals("Accept The Tree")) {    if (m_listener != null) {      m_listener.userCommand(new TreeDisplayEvent(TreeDisplayEvent.ACCEPT,null));    } else {      JOptionPane.showMessageDialog(this,"Sorry, there is no " + "available Decision Tree to " + "perform this operation on.","Sorry!",JOptionPane.WARNING_MESSAGE);    }  }}  }
class C{  @ObjectiveCName("registerGooglePushWithProjectId:withToken:") public void registerGooglePush(long projectId,String token){  modules.getPushesModule().registerGooglePush(projectId,token);}  }
class C{  public static void writeX509Certificate(X509Certificate cert,OutputStream out) throws IOException {  writeX509Certificate(cert,new OutputStreamWriter(out,"utf-8"));}  }
class C{  public void elementDecl(String name,String model) throws SAXException {}  }
class C{  public void onCameraScanClick(View view){  Class<?> targetActivity=null;switch (view.getId()) {case R.id.btn_camera1:    targetActivity=Camera1Activity.class;  break;case R.id.btn_camera2:if (Build.VERSION.SDK_INT >= 21) {  targetActivity=Camera2Activity.class;} else {  Toast.makeText(this,"Camera2 API requires Android 5.0 or newer. Camera1 direct API will be used",Toast.LENGTH_SHORT).show();  targetActivity=Camera1Activity.class;}break;default :throw new IllegalArgumentException("Unknown button clicked!");}Intent intent=new Intent(this,targetActivity);intent.putExtra(ExtrasKeys.EXTRAS_LICENSE_KEY,LICENSE_KEY);intent.putExtra(ExtrasKeys.EXTRAS_RECOGNITION_SETTINGS,mRecognitionSettings);startActivityForResult(intent,MY_REQUEST_CODE);}  }
class C{  protected int read() throws IOException {  if (offset == buffer.length) {    throw new ASN1Exception("Unexpected end of encoding");  }  if (in == null) {    return buffer[offset++] & 0xFF;  } else {    int octet=in.read();    if (octet == -1) {      throw new ASN1Exception("Unexpected end of encoding");    }    buffer[offset++]=(byte)octet;    return octet;  }}  }
class C{  private static int decode4to3(byte[] source,int srcOffset,byte[] destination,int destOffset,byte[] decodabet){  if (source[srcOffset + 2] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12);    destination[destOffset]=(byte)(outBuff >>> 16);    return 1;  } else   if (source[srcOffset + 3] == EQUALS_SIGN) {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18);    destination[destOffset]=(byte)(outBuff >>> 16);    destination[destOffset + 1]=(byte)(outBuff >>> 8);    return 2;  } else {    int outBuff=((decodabet[source[srcOffset]] << 24) >>> 6) | ((decodabet[source[srcOffset + 1]] << 24) >>> 12) | ((decodabet[source[srcOffset + 2]] << 24) >>> 18)| ((decodabet[source[srcOffset + 3]] << 24) >>> 24);    destination[destOffset]=(byte)(outBuff >> 16);    destination[destOffset + 1]=(byte)(outBuff >> 8);    destination[destOffset + 2]=(byte)(outBuff);    return 3;  }}  }
class C{  public Matrix4f(float m00,float m01,float m02,float m03,float m10,float m11,float m12,float m13,float m20,float m21,float m22,float m23,float m30,float m31,float m32,float m33){  this.m00=m00;  this.m01=m01;  this.m02=m02;  this.m03=m03;  this.m10=m10;  this.m11=m11;  this.m12=m12;  this.m13=m13;  this.m20=m20;  this.m21=m21;  this.m22=m22;  this.m23=m23;  this.m30=m30;  this.m31=m31;  this.m32=m32;  this.m33=m33;}  }
class C{  public static InlineQueryResultCachedDocumentBuilder builder(){  return new InlineQueryResultCachedDocumentBuilder();}  }
class C{  public boolean isSystemForeignKeyIndicesAlwaysNonUnique(){  return systemForeignKeyIndicesAlwaysNonUnique;}  }
class C{  synchronized String[] toStringArray(){  if (protocolNames == null) {    protocolNames=new String[protocols.size()];    int i=0;    for (    ProtocolVersion version : protocols) {      protocolNames[i++]=version.name;    }  }  return protocolNames.clone();}  }
class C{  public DeltaTetradTest2(DataSet dataSet){  if (dataSet == null) {    throw new NullPointerException();  }  if (!dataSet.isContinuous()) {    throw new IllegalArgumentException();  }  this.cov=new CovarianceMatrix(dataSet);  List<DataSet> data1=new ArrayList<>();  data1.add(dataSet);  List<DataSet> data2=DataUtils.center(data1);  this.dataSet=data2.get(0);  this.data=this.dataSet.getDoubleData().transpose().toArray();  this.N=dataSet.getNumRows();  this.variables=dataSet.getVariables();  this.variablesHash=new HashMap<>();  for (int i=0; i < variables.size(); i++) {    variablesHash.put(variables.get(i),i);  }}  }
class C{  public static String rewriteTermDP(String term){  int size=term.length();  if (size == 0)   return "";  double[] scoreAtGap=new double[size];  int[] preBestGap=new int[size];  Arrays.fill(scoreAtGap,RewriterConstants.MAXIMUM_SEQUENCE_SCORE);  Arrays.fill(preBestGap,-1);  scoreAtGap[0]=0;  preBestGap[0]=0;  for (int endPosition=1; endPosition < size; endPosition++) {    for (int spanSize=1; spanSize < RewriterConstants.MAX_WORD_LENGTH && spanSize <= endPosition; spanSize++) {      double freq=wordBase.getFrequency(term.substring(endPosition - spanSize,endPosition + 1));      if (freq < 0) {        if (spanSize == 1)         freq=RewriterConstants.UNKNOWN_CHAR_FREQ; else         continue;      }      if (freq + scoreAtGap[endPosition - spanSize] + RewriterConstants.TOKEN_LENGTH_PENALTY < scoreAtGap[endPosition]) {        scoreAtGap[endPosition]=freq + scoreAtGap[endPosition - spanSize] + RewriterConstants.TOKEN_LENGTH_PENALTY;        preBestGap[endPosition]=endPosition - spanSize;      }    }  }  String tokenizedQuery=new String();  for (int pos=size - 1; pos > 0; pos=preBestGap[pos] - 1) {    tokenizedQuery=" " + term.substring(preBestGap[pos],pos + 1) + tokenizedQuery;  }  return tokenizedQuery.substring(1);}  }
class C{  private int measureWidth(int measureSpec){  float result;  int specMode=MeasureSpec.getMode(measureSpec);  int specSize=MeasureSpec.getSize(measureSpec);  if ((specMode == MeasureSpec.EXACTLY) || (mViewPager == null)) {    result=specSize;  } else {    final int count=InfiniteViewPager.FakePositionHelper.getAdapterSize(mViewPager);    result=getPaddingLeft() + getPaddingRight() + (count * mLineWidth)+ ((count - 1) * mGapWidth);    if (specMode == MeasureSpec.AT_MOST) {      result=Math.min(result,specSize);    }  }  return (int)Math.ceil(result);}  }
class C{  public void addOrReplaceResAllocs(ResAllocs resAllocs){  resAllocsEvaluator.replaceResAllocs(resAllocs);}  }
class C{  private static void debugOut(String msg){  boolean testing=false;  if (testing) {    System.out.println(msg);  }}  }
class C{  public static boolean oreDictCheck(ItemStack check,String oreDict){  boolean hasResource=false;  for (  ItemStack ore : OreDictionary.getOres(oreDict)) {    if (ore.isItemEqual(check)) {      hasResource=true;    }  }  return hasResource;}  }
class C{  public static void main(String[] args) throws IOException {  boolean enableOutput=true;  boolean outputToFile=false;  String inputFolder="";  String outputFolder="";  String workload="random";  String vmAllocationPolicy="iqr";  String vmSelectionPolicy="mu";  String parameter="1.5";  new RandomRunner(enableOutput,outputToFile,inputFolder,outputFolder,workload,vmAllocationPolicy,vmSelectionPolicy,parameter);}  }
class C{  public boolean canRegister() throws XMPPException {  if (info == null) {    discoverInfo();  }  return info.containsFeature("jabber:iq:register");}  }
class C{  public void clear(){  branchCounter=0;  branchMap.clear();  branchIdMap.clear();  branchlessMethods.clear();  switchLabels.clear();  registeredDefaultCases.clear();  registeredNormalBranches.clear();  registeredSwitches.clear();}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static boolean isFirstCap(String str){  if (isAllCap(str))   return false;  if (str.length() > 0 && Character.isLetter(str.charAt(0)) && Character.isUpperCase(str.charAt(0))) {    return true;  }  return false;}  }
class C{  @Override @Transient public boolean isFullTextSearchable(){  return true;}  }
class C{  public XMLString toUpperCase(Locale locale){  return new XString(str().toUpperCase(locale));}  }
class C{  public void start(int timeoutSeconds){  if (running) {    throw new IllegalStateException("Cluster " + clusterId + " is already running");  }  LOGGER.debug("Cluster " + getClusterId() + " - start");  this.memberPocesses.forEach(null);  getMaster().waitFor();  Marathon marathon=getMarathon();  if (marathon != null) {    marathon.installMarathonApps();  }  running=true;}  }
class C{  public void testParseEnumSingleChar() throws Exception {  String[] enumDefinition=new String[2];  enumDefinition[0]="enum('Y','N','U')";  enumDefinition[1]="ENUM('Y','N','U')";  for (int i=0; i < 2; i++) {    String[] elements=EnumToStringFilter.parseEnumeration(enumDefinition[i]);    Assert.assertEquals(errorMsgMismatch,"Y",elements[0]);    Assert.assertEquals(errorMsgMismatch,"N",elements[1]);    Assert.assertEquals(errorMsgMismatch,"U",elements[2]);  }}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj) {    return true;  }  if (obj == null) {    return false;  }  if (obj instanceof IfdData) {    IfdData data=(IfdData)obj;    if (data.getId() == mIfdId && data.getTagCount() == getTagCount()) {      ExifTag[] tags=data.getAllTags();      for (      ExifTag tag : tags) {        if (ExifInterface.isOffsetTag(tag.getTagId())) {          continue;        }        ExifTag tag2=mExifTags.get(tag.getTagId());        if (!tag.equals(tag2)) {          return false;        }      }      return true;    }  }  return false;}  }
class C{  public static <K,V>HashMap<K,V> hashMap(int initialCapacity,float loadFactor){  return new HashMap<K,V>(initialCapacity,loadFactor);}  }
class C{  public Element store(Object o){  BlockContentsIcon p=(BlockContentsIcon)o;  Element element=new Element("BlockContentsIcon");  element.setAttribute("blockcontents",p.getNamedBlock().getName());  storeCommonAttributes(p,element);  storeTextInfo(p,element);  if (p.getPopupUtility().getFixedWidth() == 0 && p.getPopupUtility().getJustification() != 0) {    element.setAttribute("x","" + p.getOriginalX());    element.setAttribute("y","" + p.getOriginalY());  }  element.setAttribute("selectable",(p.isSelectable() ? "yes" : "no"));  element.setAttribute("class","jmri.jmrit.display.configurexml.BlockContentsIconXml");  if (p.getDefaultIcon() != null) {    element.setAttribute("defaulticon",p.getDefaultIcon().getURL());  }  java.util.HashMap<String,NamedIcon> map=p.getMap();  if (map != null) {    java.util.Iterator<java.util.Map.Entry<String,NamedIcon>> iterator=map.entrySet().iterator();    while (iterator.hasNext()) {      java.util.Map.Entry<String,NamedIcon> mi=iterator.next();      String key=mi.getKey();      String value=mi.getValue().getName();      Element e2=new Element("blockstate");      e2.setAttribute("value",key);      e2.setAttribute("icon",value);      element.addContent(e2);    }  }  return element;}  }
class C{  public void testCreateDirectory() throws IOException {  InfoStreamListener stream=new InfoStreamListener("createDirectory");  Path dir=wrap(createTempDir(),stream);  Files.createDirectory(dir.resolve("subdir"));  assertTrue(stream.sawMessage());  try {    Files.createDirectory(dir.resolve("subdir"));    fail("didn't get expected exception");  } catch (  IOException expected) {  }}  }
class C{  public static void callSecuredAPI(Context context,String endpoint,HTTP_METHODS methodType,String requestParams,APIResultCallBack apiResultCallBack,int requestCode){  EndPointInfo apiUtilities=new EndPointInfo();  ServerConfig utils=new ServerConfig();  apiUtilities.setEndPoint(endpoint);  apiUtilities.setHttpMethod(methodType);  if (requestParams != null) {    apiUtilities.setRequestParams(requestParams);  }  APIController apiController;  if (org.wso2.emm.agent.proxy.utils.Constants.Authenticator.AUTHENTICATOR_IN_USE.equals(org.wso2.emm.agent.proxy.utils.Constants.Authenticator.MUTUAL_SSL_AUTHENTICATOR)) {    apiController=new APIController();    apiController.securedNetworkCall(apiResultCallBack,requestCode,apiUtilities,context);  } else {    String clientKey=Preference.getString(context,Constants.CLIENT_ID);    String clientSecret=Preference.getString(context,Constants.CLIENT_SECRET);    if (utils.getHostFromPreferences(context) != null && !utils.getHostFromPreferences(context).isEmpty() && clientKey != null && !clientKey.isEmpty() && !clientSecret.isEmpty()) {      apiController=new APIController(clientKey,clientSecret);      apiController.invokeAPI(apiUtilities,apiResultCallBack,requestCode,context.getApplicationContext());    }  }}  }
class C{  private Object value(Method method){  String name=method.getName();  if (name.equals(REQUIRED)) {    return required;  }  if (name.equals(ATTRIBUTE)) {    return attribute;  }  return method.getDefaultValue();}  }
class C{  public static void clearAll(){  ThrottlingUpdate update=ThrottlingUpdate.newBuilder().setClearAll(true).build();  PubSub.publish(ConfigFactory.load().getString("retro.throttling.topic"),update);}  }
class C{  public boolean locationsAreEqual(Address otherAddress){  if (otherAddress == null) {    return false;  }  if (this == otherAddress) {    return true;  }  if (!TextUtils.equals(address1,otherAddress.address1)) {    return false;  }  if (!TextUtils.equals(address2,otherAddress.address2)) {    return false;  }  if (!TextUtils.equals(city,otherAddress.city)) {    return false;  }  if (!TextUtils.equals(countryCode,otherAddress.countryCode)) {    return false;  }  if (!TextUtils.equals(provinceCode,otherAddress.provinceCode)) {    return false;  }  if (!TextUtils.equals(zip,otherAddress.zip)) {    return false;  }  return true;}  }
class C{  public String isMajorCompacted(){  return majorCompacted;}  }
class C{  public TimestampToken(byte[] timestampTokenInfo) throws IOException {  if (timestampTokenInfo == null) {    throw new IOException("No timestamp token info");  }  parse(timestampTokenInfo);}  }
class C{  public LocalTime roundCeilingCopy(){  return iInstant.withLocalMillis(iField.roundCeiling(iInstant.getLocalMillis()));}  }
class C{  static public void fail(String message){  throw new AssertionFailedError(message);}  }
class C{  private static long timetMillisFromEpochSecs(long epochSecs,TimeZone zone){  DateTimeValue date=timeFromSecsSinceEpoch(epochSecs);  Calendar cal=new GregorianCalendar(zone);  cal.clear();  cal.set(date.year(),date.month() - 1,date.day(),date.hour(),date.minute(),date.second());  return cal.getTimeInMillis();}  }
class C{  public void testMembership(){  doLoadData();  final ValueFactory vf=om.getValueFactory();  final URI workeruri=vf.createURI("gpo:#123");  IGPO workergpo=om.getGPO(workeruri);  final URI worksFor=vf.createURI("attr:/employee#worksFor");  ILinkSet ls=workergpo.getLinksOut(worksFor);  checkLinkSet(ls,2);  final URI companyuri=vf.createURI("gpo:#456");  IGPO companygpo=om.getGPO(companyuri);  assertTrue(companygpo.isMemberOf(ls));}  }
class C{  public Matrix4d rotationYXZ(double angleY,double angleX,double angleZ){  double cosY=Math.cos(angleY);  double sinY=Math.sin(angleY);  double cosX=Math.cos(angleX);  double sinX=Math.sin(angleX);  double cosZ=Math.cos(angleZ);  double sinZ=Math.sin(angleZ);  double m_sinY=-sinY;  double m_sinX=-sinX;  double m_sinZ=-sinZ;  double nm00=cosY;  double nm02=m_sinY;  double nm20=sinY;  double nm22=cosY;  double nm10=nm20 * sinX;  double nm11=cosX;  double nm12=nm22 * sinX;  m20=nm20 * cosX;  m21=m_sinX;  m22=nm22 * cosX;  m23=0.0;  m00=nm00 * cosZ + nm10 * sinZ;  m01=nm11 * sinZ;  m02=nm02 * cosZ + nm12 * sinZ;  m03=0.0;  m10=nm00 * m_sinZ + nm10 * cosZ;  m11=nm11 * cosZ;  m12=nm02 * m_sinZ + nm12 * cosZ;  m13=0.0;  m30=0.0;  m31=0.0;  m32=0.0;  m33=1.0;  properties=PROPERTY_AFFINE;  return this;}  }
class C{  public HttpResponse deleteEndUserPhoto() throws PayloadException, NetworkException {  if (sLogger.isActivated()) {    sLogger.info("Delete the end user photo");  }  String url="/org.openmobilealliance.pres-content/users/" + Uri.encode(ImsModule.getImsUserProfile().getPublicUri()) + "/oma_status-icon/rcs_status_icon";  return sendRequestToXDMS(new HttpDeleteRequest(url));}  }
class C{  public NetworkCloudletSpaceSharedScheduler(){  super();  cloudletWaitingList=new ArrayList<ResCloudlet>();  cloudletExecList=new ArrayList<ResCloudlet>();  cloudletPausedList=new ArrayList<ResCloudlet>();  cloudletFinishedList=new ArrayList<ResCloudlet>();  usedPes=0;  currentCpus=0;  pkttosend=new HashMap<Integer,List<HostPacket>>();  pktrecv=new HashMap<Integer,List<HostPacket>>();}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__LEFT_OPERAND:    setLeftOperand((Expression)null);  return;case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__OPERATOR:setOperator(OPERATOR_EDEFAULT);return;case ExpressionsPackage.NUMERICAL_ADD_SUBTRACT_EXPRESSION__RIGHT_OPERAND:setRightOperand((Expression)null);return;}super.eUnset(featureID);}  }
class C{  public boolean invalidateIt(){  log.info(toString());  setDocAction(DOCACTION_Prepare);  return true;}  }
class C{  protected Anonymous_invariant_2_Impl(){  super();}  }
class C{  public boolean equals(Object n){  if (n instanceof GraphNode && ((GraphNode)n).ID.equalsIgnoreCase(this.ID)) {    return true;  } else   return false;}  }
class C{  public Task<Revision> next() throws ArticleReaderException {  try {    this.keywords.reset();    if (this.lastTaskCompleted) {      this.lastTaskCompleted=false;      this.taskPartCounter=1;      this.taskRevisionCounter=-1;      if (!readHeader()) {        this.lastTaskCompleted=true;        return null;      }    } else {      this.taskPartCounter++;    }    Task<Revision> task=new Task<Revision>(this.taskHeader,this.taskPartCounter);    task.add(readRevision());    int r=read();    while (r != -1) {      if (this.keywords.check((char)r)) {switch (this.keywords.getValue()) {case KEY_START_REVISION:          if (task.byteSize() >= LIMIT_TASK_SIZE_REVISIONS) {            this.lastTaskCompleted=false;            if (this.taskPartCounter == 1) {              task.setTaskType(TaskTypes.TASK_PARTIAL_FIRST);            } else {              task.setTaskType(TaskTypes.TASK_PARTIAL);            }            return task;          }        task.add(readRevision());      break;case KEY_END_PAGE:    this.lastTaskCompleted=true;  if (this.taskPartCounter > 1) {    task.setTaskType(TaskTypes.TASK_PARTIAL_LAST);  }return task;default :throw new IOException();}this.keywords.reset();}r=read();}throw ErrorFactory.createArticleReaderException(ErrorKeys.DELTA_CONSUMERS_TASK_READER_WIKIPEDIAXMLREADER_UNEXPECTED_END_OF_FILE);} catch (ArticleReaderException e) {throw e;}catch (Exception e) {throw new ArticleReaderException(e);}}  }
class C{  public void writeGraphStatistics(){  LOG.info(" Preparing statistics...");  int[] minMax=this.getNetwork().getMinMaxEdgeWeights();  LOG.info("---------------------  Graph statistics  -------------------");  LOG.info("         Number of arcs: " + network.getEdgeCount());  LOG.info("     Number of vertices: " + network.getVertexCount());  LOG.info("                Density: " + String.format("%01.6f",this.getNetwork().getDensity()));  LOG.info("    Minimum edge weight: " + minMax[0]);  LOG.info("    Maximum edge weight: " + minMax[1]);  LOG.info(" Network build time (s): " + String.format("%.2f",((double)this.buildStopTime - (double)this.buildStartTime) / 1000));  LOG.info("------------------------------------------------------------");}  }
class C{  private int addTextRun(final Stack stack,final char pattern[],int index){  final PatternRun run=new PatternRun();  final int start=index;  boolean escapeMode=false;  if ('%' == pattern[index]) {    index++;  }  final StringBuffer sb=new StringBuffer();  while (index < pattern.length && pattern[index] != '%') {    if (escapeMode) {      if ('n' == pattern[index]) {        sb.append(EOL);      } else       if ('t' == pattern[index]) {        sb.append('\t');      } else {        sb.append(pattern[index]);      }      escapeMode=false;    } else     if ('\\' == pattern[index]) {      escapeMode=true;    } else {      sb.append(pattern[index]);    }    index++;  }  run.m_data=sb.toString();  run.m_type=TYPE_TEXT;  stack.push(run);  return index - start;}  }
class C{  public ConsoleAppender(Layout layout){  this(layout,SYSTEM_OUT);}  }
class C{  @Override protected EClass eStaticClass(){  return FunctionblockPackage.Literals.STATUS;}  }
class C{  static void printFieldRefs(ClassRef[] classes){  out.println("\nFields:");  for (int i=0; i < classes.length; i++) {    FieldRef[] fields=classes[i].getFieldArray();    for (int j=0; j < fields.length; j++) {      FieldRef ref=fields[j];      out.println(descriptorToDot(ref.getDeclClassName()) + "." + ref.getName()+ " : "+ ref.getTypeName());    }  }}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMClipPathElement(prefix,(AbstractDocument)doc);}  }
class C{  @Override public void onWebsocketPing(WebSocket conn,Framedata f){  FramedataImpl1 resp=new FramedataImpl1(f);  resp.setOptcode(Opcode.PONG);  conn.sendFrame(resp);}  }
class C{  @SuppressWarnings("unchecked") void addExceptionStateToDefs(Instruction s,BasicBlock b){  if (VM.VerifyAssertions)   VM._assert(s.operator() != PHI);  HeapVariable<Object> H=findOrCreateHeapVariable(exceptionState);  H.registerDef(b);  HeapOperand<Object>[] Hprime=extendHArray(defs.get(s));  Hprime[0]=new HeapOperand<Object>(H);  Hprime[0].setInstruction(s);  defs.put(s,Hprime);}  }
class C{  private static boolean isTainted(Object o){  try {    checkTypeSafe(o);  } catch (  IllegalArgumentException e) {    return true;  }  return false;}  }
class C{  public void sendPacket(){  MessageSyncEntityCapabilities message=new MessageSyncEntityCapabilities(this.entityCapability);  TheBetweenlands.networkWrapper.sendTo(message,this.watcher);}  }
class C{  private int replaceVariableType(VariableTypes variableTypes,VariableType variableTypeToReplace,int indexToInsert){  int indexToInsertReturn=indexToInsert;  VariableType existingVariableType=variableTypes.getVariableType(variableTypeToReplace.getTypeName());  if (existingVariableType != null) {    indexToInsertReturn=variableTypes.getTypeIndex(existingVariableType.getTypeName());    variableTypes.removeType(existingVariableType);  }  variableTypes.addType(variableTypeToReplace,indexToInsertReturn);  return indexToInsertReturn;}  }
class C{  public static void zoomTo(MapView mapView,int zoom,IGeoPoint min,IGeoPoint max){  MapTileProviderBase tileProvider=mapView.getTileProvider();  IMapController controller=mapView.getController();  IGeoPoint center=min;  if (max != null) {    center=new GeoPoint((max.getLatitudeE6() + min.getLatitudeE6()) / 2,(max.getLongitudeE6() + min.getLongitudeE6()) / 2);    if (zoom == NO_ZOOM) {      double pixels=Math.sqrt((mapView.getWidth() * mapView.getWidth()) + (mapView.getHeight() * mapView.getHeight()));      final double requiredMinimalGroundResolutionInMetersPerPixel=((double)new GeoPoint(min.getLatitudeE6(),min.getLongitudeE6()).distanceTo(max)) / pixels;      zoom=calculateZoom(center.getLatitude(),requiredMinimalGroundResolutionInMetersPerPixel,tileProvider.getMaximumZoomLevel(),tileProvider.getMinimumZoomLevel());    }  }  if (zoom != NO_ZOOM) {    controller.setZoom(zoom);  }  if (center != null) {    controller.setCenter(center);  }}  }
class C{  @Override public void onDrawOver(Canvas c,RecyclerView parent,RecyclerView.State state){  c.save();  int dX;  int dY=0;  View firstChild=parent.getChildAt(0);  View lastChild=parent.getChildAt(parent.getChildCount() - 1);  if (firstChild != null && lastChild != null) {    int firstVisiblePos=parent.getChildLayoutPosition(firstChild);    int lastVisiblePos=parent.getChildLayoutPosition(lastChild);    boolean drawStripUnderHeaderAndFooter=dewey.getFocusedPosition() != 0 && dewey.getFocusedPosition() != footerPos;    if (drawStripUnderHeaderAndFooter) {      drawStrip(parent,c,firstVisiblePos,lastVisiblePos);    }    if (headerView != null) {      float headerPercentageHidden=getPercentageOfViewHidden(firstChild,parent);      if (firstVisiblePos == 0) {        cloakPaint.setAlpha(getMixedCloakAlpha(headerPercentageHidden));      } else {        cloakPaint.setAlpha(Color.alpha(dewey.getCloakColor()));      }      c.drawRect(0,0,headerView.getMeasuredWidth(),headerView.getMeasuredHeight() - dewey.getStripOffset(),cloakPaint);      headerView.draw(c);    }    if (footerView != null) {      float footerPercentageHidden=getPercentageOfViewHidden(lastChild,parent);      if (lastVisiblePos == footerPos) {        cloakPaint.setAlpha(getMixedCloakAlpha(footerPercentageHidden));      } else {        cloakPaint.setAlpha(Color.alpha(dewey.getCloakColor()));      }      dX=parent.getMeasuredWidth() - footerView.getMeasuredWidth();      c.translate(dX,dY);      c.drawRect(0,0,footerView.getMeasuredWidth(),footerView.getMeasuredHeight() - dewey.getStripOffset(),cloakPaint);      footerView.draw(c);      c.translate(-1 * dX,-1 * dY);    }    if (!drawStripUnderHeaderAndFooter) {      drawStrip(parent,c,firstVisiblePos,lastVisiblePos);    }    c.restore();    if (framesRemaining > 0) {      framesRemaining--;      animatingStripXOffset=animatingStripXOffset + animatingStripXOffsetPerFrame;      animatingStripWidthOffset=animatingStripWidthOffset + animatingStripWidthOffsetPerFrame;      dewey.postInvalidateDelayed((long)(1000f / ((float)framesPerMs / 1000f)));    } else {      resetAnimationProperties();    }  }}  }
class C{  private void notifyViewPagerDataSetChanged(){  Log.d(TAG,"\nnotifyDataSetChanged()");  mViewPagerAdapter.notifyDataSetChanged();}  }
class C{  public void verifyLeadingWhitespaceBeforeBracket(ParserRuleContext ctx,String message,int numSpace){  Token left=ParseTreeUtil.getStopTokenForNode(ParseTreeUtil.getLeftNode(ctx));  Token openingParenthesis=ParseTreeUtil.getStartTokenForNode(ctx.getChild(0));  if (checkLeftSpaces(left,openingParenthesis,numSpace)) {    Location illegalWhitespaceLocation=ListenerUtil.getTokenEndLocation(left);    printer.error(rule,message,illegalWhitespaceLocation);  }}  }
class C{  @Override public Object clone(){  ArrayList<BinaryItem> items=new ArrayList<BinaryItem>(m_items);  return new FrequentBinaryItemSet(items,m_support);}  }
class C{  private void updateEmptyStatus(){  boolean empty=getAdapter() == null || getAdapter().isEmpty();  if (isInFilterMode()) {    empty=false;  }  View emptyView=getEmptyView();  if (empty) {    if (emptyView != null) {      emptyView.setVisibility(View.VISIBLE);      setVisibility(View.GONE);    } else {      setVisibility(View.VISIBLE);    }    if (mDataChanged) {      this.onLayout(false,getLeft(),getTop(),getRight(),getBottom());    }  } else {    if (emptyView != null) {      emptyView.setVisibility(View.GONE);    }    setVisibility(View.VISIBLE);  }}  }
class C{  public void editButtonActionPerformed(){  nodeAddress=readNodeAddress();  if (nodeAddress < 0) {    return;  }  curNode=(SerialNode)_memo.getTrafficController().getNodeFromAddress(nodeAddress);  if (curNode == null) {    statusText1.setText(rb.getString("Error4"));    statusText1.setVisible(true);    errorInStatus1=true;    resetNotes2();    return;  }  nodeAddrStatic.setText(Integer.toString(nodeAddress));  nodeAddrField.setVisible(false);  nodeAddrStatic.setVisible(true);  nodeType=curNode.getNodeType();  if (nodeType == SerialNode.SMINI) {    nodeTypeBox.setSelectedItem("SMINI");  } else   if (nodeType == SerialNode.USIC_SUSIC) {    nodeTypeBox.setSelectedItem("USIC_SUSIC");  }  if (nodeType == SerialNode.USIC_SUSIC) {    bitsPerCard=curNode.getNumBitsPerCard();    if (bitsPerCard == 24) {      cardSizeBox.setSelectedItem(rb.getString("CardSize24"));    }    if (bitsPerCard == 32) {      cardSizeBox.setSelectedItem(rb.getString("CardSize32"));    }  } else   if (nodeType == SerialNode.SMINI) {    bitsPerCard=24;    cardSizeBox.setSelectedItem(rb.getString("CardSize24"));    num2LSearchLights=0;    for (int i=0; i < 48; i++) {      if (curNode.isSearchLightBit(i)) {        searchlightBits[i]=true;        searchlightBits[i + 1]=true;        firstSearchlight[i]=true;        firstSearchlight[i + 1]=false;        num2LSearchLights++;        i++;      } else {        searchlightBits[i]=false;        firstSearchlight[i]=false;      }    }  }  receiveDelay=curNode.getTransmissionDelay();  receiveDelayField.setText(Integer.toString(receiveDelay));  pulseWidth=curNode.getPulseWidth();  pulseWidthField.setText(Integer.toString(pulseWidth));  for (int i=0; i < 64; i++) {    if (curNode.isOutputCard(i)) {      cardType[i]=rb.getString("CardTypeOutput");    } else     if (curNode.isInputCard(i)) {      cardType[i]=rb.getString("CardTypeInput");    } else {      cardType[i]=rb.getString("CardTypeNone");    }  }  panel2.setVisible(false);  panel2a.setVisible(false);  if (nodeType == SerialNode.USIC_SUSIC) {    panel2.setVisible(true);  } else   if (nodeType == SerialNode.SMINI) {    panel2a.setVisible(true);  }  editMode=true;  addButton.setVisible(false);  editButton.setVisible(false);  deleteButton.setVisible(false);  doneButton.setVisible(false);  updateButton.setVisible(true);  cancelButton.setVisible(true);  statusText1.setText(editStatus1);  statusText2.setText(editStatus2);  statusText3.setText(editStatus3);}  }
class C{  public static double P_macroAUROC(int Y[][],double P[][]){  int L=Y[0].length;  double AUC[]=new double[L];  for (int j=0; j < L; j++) {    if (allMissing(MatrixUtils.getCol(Y,j))) {      L--;      continue;    }    ThresholdCurve curve=new ThresholdCurve();    Instances result=curve.getCurve(MLUtils.toWekaPredictions(MatrixUtils.getCol(Y,j),MatrixUtils.getCol(P,j)));    AUC[j]=ThresholdCurve.getROCArea(result);  }  return Utils.mean(AUC);}  }
class C{  public void addDominatorNetSize(long size){  dominatorNetSize+=size;}  }
class C{  private Indicator(){  this.p=0.5;}  }
class C{  public static TerminalBean updateTerminalStatus(Properties ctx,int terminalId,boolean active,String trxName) throws OperationException {  MPOSTerminal terminal=loadTerminal(ctx,terminalId,trxName);  if (active && !isCashBookAssignedValid(ctx,terminalId,terminal.getC_CashBook_ID(),trxName)) {    throw new InvalidTerminalCashBookException("Terminal cannot be reactivated as the cash book assigned to it is already being used");  }  if (!active && !canInactivateTerminal(ctx,terminal.getAD_Org_ID(),terminalId,trxName)) {    throw new TerminalInactivateException("Cannot inactivate this terminal as no active terminals present");  }  terminal.setIsActive(active);  PoManager.save(terminal);  return getBean(terminal);}  }
class C{  public boolean commit() throws LoginException {  if (succeeded == false) {    if (debug) {      System.out.println("\t\t[UnixLoginModule]: " + "did not add any Principals to Subject " + "because own authentication failed.");    }    return false;  } else {    if (subject.isReadOnly()) {      throw new LoginException("commit Failed: Subject is Readonly");    }    if (!subject.getPrincipals().contains(userPrincipal))     subject.getPrincipals().add(userPrincipal);    if (!subject.getPrincipals().contains(UIDPrincipal))     subject.getPrincipals().add(UIDPrincipal);    if (!subject.getPrincipals().contains(GIDPrincipal))     subject.getPrincipals().add(GIDPrincipal);    for (int i=0; i < supplementaryGroups.size(); i++) {      if (!subject.getPrincipals().contains(supplementaryGroups.get(i)))       subject.getPrincipals().add(supplementaryGroups.get(i));    }    if (debug) {      System.out.println("\t\t[UnixLoginModule]: " + "added UnixPrincipal,");      System.out.println("\t\t\t\tUnixNumericUserPrincipal,");      System.out.println("\t\t\t\tUnixNumericGroupPrincipal(s),");      System.out.println("\t\t\t to Subject");    }    commitSucceeded=true;    return true;  }}  }
class C{  public Object addValue(int version,T value,long timestamp){  if ((ExecutionPathDebugLog.isDebugEnabled) && (log.isDebugEnabled())) {    log.debug(".addValue Thread " + Thread.currentThread().getId() + " for '"+ name+ "' adding version "+ version+ " at value "+ value);  }  if (currentAndPriorValue.getPriorVersion().getVersion() == -1) {    currentAndPriorValue=new CurrentValue<T>(new VersionedValue<T>(version,value,timestamp),currentAndPriorValue.getCurrentVersion());    return currentAndPriorValue.getPriorVersion().getValue();  }  VersionedValue<T> priorVersion=currentAndPriorValue.getPriorVersion();  olderVersions.add(priorVersion);  if (olderVersions.size() >= highWatermark) {    long expireBefore=timestamp - millisecondLifetimeOldVersions;    while (olderVersions.size() > 0) {      VersionedValue<T> oldestVersion=olderVersions.get(0);      if (oldestVersion.getTimestamp() <= expireBefore) {        olderVersions.remove(0);      } else {        break;      }    }  }  currentAndPriorValue=new CurrentValue<T>(new VersionedValue<T>(version,value,timestamp),currentAndPriorValue.getCurrentVersion());  return currentAndPriorValue.getPriorVersion().getValue();}  }
class C{  @SuppressWarnings({"unchecked","rawtypes"}) static <E extends Comparable<E>>AutoSortedCollection<E> createAutoSortedCollection(Supplier<List<SortedListElement<E>>> listSup,Collection<? extends E> values){  List list=listSup.get();  if (!list.isEmpty()) {    throw new IllegalStateException("List must be empty.");  }  AutoSortedCollection<E> sortedCollection=new AutoListSortedCollection<>(list,null);  sortedCollection.addAll(values);  return sortedCollection;}  }
class C{  public void runApplication(WineWizard wineWizard,String applicationName) throws PlayOnLinuxException {  final File shortcutFile=new File(playOnLinuxContext.makeShortcutsPath(),applicationName);  try {    final Shortcut shortcut=objectMapper.readValue(shortcutFile,Shortcut.class);    shortcut.execute(wineWizard);  } catch (  IOException e) {    throw new PlayOnLinuxException("Unable to parse the shortcut",e);  }}  }
class C{  void release(){  long references=--this.references;  if (!state.active() && references == 0) {    context.sessions().unregisterSession(id);    log.release(id);    if (closeIndex > 0) {      log.release(closeIndex);    }  }}  }
class C{  public static List<String> storagePortNamesToURIs(DbClient dbClient,List<String> storagePorts){  List<String> storagePortURIStrings=new ArrayList<String>();  Map<URI,String> systemURIToType=new HashMap<URI,String>();  for (  String port : storagePorts) {    URIQueryResultList portUriList=new URIQueryResultList();    dbClient.queryByConstraint(AlternateIdConstraint.Factory.getStoragePortEndpointConstraint(port),portUriList);    Iterator<URI> storagePortIter=portUriList.iterator();    while (storagePortIter.hasNext()) {      URI portURI=storagePortIter.next();      StoragePort sPort=dbClient.queryObject(StoragePort.class,portURI);      if (sPort != null && !sPort.getInactive()) {        String systemType=getStoragePortSystemType(dbClient,sPort,systemURIToType);        if (!DiscoveredDataObject.Type.openstack.name().equals(systemType)) {          storagePortURIStrings.add(portURI.toString());        }      }    }  }  return storagePortURIStrings;}  }
class C{  public PatternGuardExpr(String namespace,String name,List<Expression> parameters,PatternExpr guardedPattern){  super(namespace,name,parameters);  this.guarded=new ArrayList<PatternExpr>();  guarded.add(guardedPattern);}  }
class C{  private int readNextWithEOF(boolean ignoreComments) throws CoreException {  int curr=0;  do {    try {      curr=fScanner.getNextToken();    } catch (    InvalidInputException e) {      throw new CoreException(createError(LEXICAL_ERROR,e.getMessage(),e));    }  } while (ignoreComments && isComment(curr));  return curr;}  }
class C{  public boolean isAllowCopy(){  Object oo=get_Value(COLUMNNAME_IsAllowCopy);  if (oo != null) {    if (oo instanceof Boolean)     return ((Boolean)oo).booleanValue();    return "Y".equals(oo);  }  return false;}  }
class C{  public MainViewComponent(Node graphics,RenderLayer renderLayer){  this.view=new EntityView(graphics);  this.view.setRenderLayer(renderLayer);}  }
class C{  public void removeCluster(URI id){  this.removedClusters.add(id);}  }
class C{  @Override public void run(){  snooze(300000);  while (!dying()) {    activeAudioFactory.audioCommandQueue(null);    if (!dying()) {      snooze(300000);    }  }  if (log.isDebugEnabled()) {    log.debug("Clean up thread " + this.getName());  }  cleanup();}  }
class C{  public boolean covers(double x,double y){  if (isNull())   return false;  return x >= minx && x <= maxx && y >= miny && y <= maxy;}  }
class C{  public void updateObject(String columnName,Object x,int scale) throws SQLException {  updateObject(findColumn(columnName),x);}  }
class C{  public void testVocabulary() throws IOException {  assertVocabulary(analyzer,getDataPath("ptrslptestdata.zip"),"ptrslp.txt");}  }
class C{  public String format(double value){  StringBuffer buffer=new StringBuffer();  double absValue=Math.abs(value);  if ((absValue > upperCutoff) || (absValue < (1.0 / upperCutoff) && absValue != 0.0)) {    buffer.append(scientificFormat.format(value));  } else {    int numFractionDigits=0;    if (value != (int)value) {      numFractionDigits=getNumFractionDigits(value);    }    buffer.append(formatDecimal(value,numFractionDigits));  }  if (isPadding) {    int size=fieldWidth - buffer.length();    for (int i=0; i < size; i++) {      buffer.append(' ');    }  }  return buffer.toString();}  }
class C{  protected boolean canEditImmediately(EventObject event){  if ((event instanceof MouseEvent) && SwingUtilities.isLeftMouseButton((MouseEvent)event)) {    MouseEvent me=(MouseEvent)event;    return ((me.getClickCount() > 2) && inHitRegion(me.getX(),me.getY()));  }  return (event == null);}  }
class C{  public static String backQuoteChars(String string){  int index;  StringBuffer newStringBuffer;  char charsFind[]={'\\','\'','\t','\n','\r','"','%','\u001E'};  String charsReplace[]={"\\\\","\\'","\\t","\\n","\\r","\\\"","\\%","\\u001E"};  for (int i=0; i < charsFind.length; i++) {    if (string.indexOf(charsFind[i]) != -1) {      newStringBuffer=new StringBuffer();      while ((index=string.indexOf(charsFind[i])) != -1) {        if (index > 0) {          newStringBuffer.append(string.substring(0,index));        }        newStringBuffer.append(charsReplace[i]);        if ((index + 1) < string.length()) {          string=string.substring(index + 1);        } else {          string="";        }      }      newStringBuffer.append(string);      string=newStringBuffer.toString();    }  }  return string;}  }
class C{  @Override public int compareTo(Object object){  if (object instanceof OHLCDataItem) {    OHLCDataItem item=(OHLCDataItem)object;    return this.date.compareTo(item.date);  } else {    throw new ClassCastException("OHLCDataItem.compareTo().");  }}  }
class C{  @SuppressWarnings("unchecked") public synchronized E peek(){  try {    return (E)elementData[elementCount - 1];  } catch (  IndexOutOfBoundsException e) {    throw new EmptyStackException();  }}  }
class C{  public static boolean isNodeTheSame(Node node1,Node node2){  if (node1 instanceof DTMNodeProxy && node2 instanceof DTMNodeProxy)   return ((DTMNodeProxy)node1).equals((DTMNodeProxy)node2); else   return (node1 == node2);}  }
class C{  public void breadthFirstTraversal(){  if (root == null)   return;  java.util.Queue<TreeNode<E>> queue=new java.util.LinkedList<>();  queue.add(root);  while (!queue.isEmpty()) {    TreeNode<E> current=queue.element();    if (current.left != null) {      queue.add(current.left);    }    if (current.right != null) {      queue.add(current.right);    }    System.out.print(queue.remove().element + " ");  }}  }
class C{  private long dragStartedAgo(){  if (dragStarted == 0) {    return -1;  }  return System.currentTimeMillis() - dragStarted;}  }
class C{  @AfterTest public void deleteFile() throws IOException {  if (Files.exists(file)) {    assertThat(Files.deleteIfExists(file),is(true));  }}  }
class C{  public void addOutgoingMessageInterceptor(PacketInterceptor packetInterceptor){  addOutgoingMessageInterceptor(packetInterceptor,null);}  }
class C{  public static _Fields findByThriftId(int fieldId){switch (fieldId) {case 1:    return HEADER;case 2:  return STORE_NAME;case 3:return KEY;case 4:return VERSIONED_VALUE;case 5:return VALUE;default :return null;}}  }
class C{  public static String renderBaseType(final BaseType baseType){  return baseType.getName();}  }
class C{  public static Time convertTime(Value value,Calendar calendar){  if (value == ValueNull.INSTANCE) {    return null;  }  ValueTime t=(ValueTime)value.convertTo(Value.TIME);  Calendar cal=(Calendar)calendar.clone();  cal.clear();  cal.setLenient(true);  long nanos=t.getNanos();  long millis=nanos / 1000000;  nanos-=millis * 1000000;  long s=millis / 1000;  millis-=s * 1000;  long m=s / 60;  s-=m * 60;  long h=m / 60;  m-=h * 60;  setCalendarFields(cal,1970,1,1,(int)h,(int)m,(int)s,(int)millis);  long ms=cal.getTimeInMillis();  return new Time(ms);}  }
class C{  @Override public int size(){  return size;}  }
class C{  public SpecificMessage(byte[] a,int l){  super(a,l);}  }
class C{  private void updateDialogState(){  String branch=myBranchTextField.getText();  if (branch.length() != 0) {    setOKButtonText(GitBundle.getString("unstash.button.branch"));    myPopStashCheckBox.setEnabled(false);    myPopStashCheckBox.setSelected(true);    myReinstateIndexCheckBox.setEnabled(false);    myReinstateIndexCheckBox.setSelected(true);    if (!GitBranchNameValidator.INSTANCE.checkInput(branch)) {      setErrorText(GitBundle.getString("unstash.error.invalid.branch.name"));      setOKActionEnabled(false);      return;    }    if (myBranches.contains(branch)) {      setErrorText(GitBundle.getString("unstash.error.branch.exists"));      setOKActionEnabled(false);      return;    }  } else {    if (!myPopStashCheckBox.isEnabled()) {      myPopStashCheckBox.setSelected(false);    }    myPopStashCheckBox.setEnabled(true);    setOKButtonText(myPopStashCheckBox.isSelected() ? GitBundle.getString("unstash.button.pop") : GitBundle.getString("unstash.button.apply"));    if (!myReinstateIndexCheckBox.isEnabled()) {      myReinstateIndexCheckBox.setSelected(false);    }    myReinstateIndexCheckBox.setEnabled(true);  }  if (myStashList.getModel().getSize() == 0) {    myViewButton.setEnabled(false);    myDropButton.setEnabled(false);    myClearButton.setEnabled(false);    setErrorText(null);    setOKActionEnabled(false);    return;  } else {    myClearButton.setEnabled(true);  }  if (myStashList.getSelectedIndex() == -1) {    myViewButton.setEnabled(false);    myDropButton.setEnabled(false);    setErrorText(null);    setOKActionEnabled(false);    return;  } else {    myViewButton.setEnabled(true);    myDropButton.setEnabled(true);  }  setErrorText(null);  setOKActionEnabled(true);}  }
class C{  public String[] tokenize(String rawString){  Vector<String> result=new Vector<String>();  StringTokenizer tk=new StringTokenizer(rawString,m_Seperator);  while (tk.hasMoreTokens()) {    result.addElement(tk.nextToken());  }  String[] newStrings=new String[result.size()];  for (int i=0; i < result.size(); i++) {    newStrings[i]=result.elementAt(i);  }  return newStrings;}  }
class C{  public synchronized void onDrawFrame(GL10 gl){  if (DRAW_TEXTURE && mTextureIds == null) {    mTextureIds=new int[2];    gl.glGenTextures(2,mTextureIds,0);    for (    int textureId : mTextureIds) {      gl.glBindTexture(GL10.GL_TEXTURE_2D,textureId);      gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MIN_FILTER,GL10.GL_NEAREST);      gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_MAG_FILTER,GL10.GL_NEAREST);      gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_S,GL10.GL_CLAMP_TO_EDGE);      gl.glTexParameterf(GL10.GL_TEXTURE_2D,GL10.GL_TEXTURE_WRAP_T,GL10.GL_CLAMP_TO_EDGE);    }  }  if (DRAW_TEXTURE && mTexturePage.getTexturesChanged()) {    gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureIds[0]);    Bitmap texture=mTexturePage.getTexture(mTextureRectFront,CurlPage.SIDE_FRONT);    GLUtils.texImage2D(GL10.GL_TEXTURE_2D,0,texture,0);    texture.recycle();    mTextureBack=mTexturePage.hasBackTexture();    if (mTextureBack) {      gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureIds[1]);      texture=mTexturePage.getTexture(mTextureRectBack,CurlPage.SIDE_BACK);      GLUtils.texImage2D(GL10.GL_TEXTURE_2D,0,texture,0);      texture.recycle();    } else {      mTextureRectBack.set(mTextureRectFront);    }    mTexturePage.recycle();    reset();  }  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);  if (DRAW_SHADOW) {    gl.glDisable(GL10.GL_TEXTURE_2D);    gl.glEnable(GL10.GL_BLEND);    gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);    gl.glEnableClientState(GL10.GL_COLOR_ARRAY);    gl.glColorPointer(4,GL10.GL_FLOAT,0,mBufShadowColors);    gl.glVertexPointer(3,GL10.GL_FLOAT,0,mBufShadowVertices);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,mDropShadowCount);    gl.glDisableClientState(GL10.GL_COLOR_ARRAY);    gl.glDisable(GL10.GL_BLEND);  }  if (DRAW_TEXTURE) {    gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);    gl.glTexCoordPointer(2,GL10.GL_FLOAT,0,mBufTexCoords);  }  gl.glVertexPointer(3,GL10.GL_FLOAT,0,mBufVertices);  gl.glEnableClientState(GL10.GL_COLOR_ARRAY);  gl.glColorPointer(4,GL10.GL_FLOAT,0,mBufColors);  gl.glDisable(GL10.GL_TEXTURE_2D);  gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,mVerticesCountFront);  if (DRAW_TEXTURE) {    gl.glEnable(GL10.GL_BLEND);    gl.glEnable(GL10.GL_TEXTURE_2D);    if (!mFlipTexture || !mTextureBack) {      gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureIds[0]);    } else {      gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureIds[1]);    }    gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,mVerticesCountFront);    gl.glDisable(GL10.GL_BLEND);    gl.glDisable(GL10.GL_TEXTURE_2D);  }  int backStartIdx=Math.max(0,mVerticesCountFront - 2);  int backCount=mVerticesCountFront + mVerticesCountBack - backStartIdx;  gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,backStartIdx,backCount);  if (DRAW_TEXTURE) {    gl.glEnable(GL10.GL_BLEND);    gl.glEnable(GL10.GL_TEXTURE_2D);    if (mFlipTexture || !mTextureBack) {      gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureIds[0]);    } else {      gl.glBindTexture(GL10.GL_TEXTURE_2D,mTextureIds[1]);    }    gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,backStartIdx,backCount);    gl.glDisable(GL10.GL_BLEND);    gl.glDisable(GL10.GL_TEXTURE_2D);  }  gl.glDisableClientState(GL10.GL_TEXTURE_COORD_ARRAY);  gl.glDisableClientState(GL10.GL_COLOR_ARRAY);  if (DRAW_POLYGON_OUTLINES) {    gl.glEnable(GL10.GL_BLEND);    gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);    gl.glLineWidth(1.0f);    gl.glColor4f(0.5f,0.5f,1.0f,1.0f);    gl.glVertexPointer(3,GL10.GL_FLOAT,0,mBufVertices);    gl.glDrawArrays(GL10.GL_LINE_STRIP,0,mVerticesCountFront);    gl.glDisable(GL10.GL_BLEND);  }  if (DRAW_CURL_POSITION) {    gl.glEnable(GL10.GL_BLEND);    gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);    gl.glLineWidth(1.0f);    gl.glColor4f(1.0f,0.5f,0.5f,1.0f);    gl.glVertexPointer(2,GL10.GL_FLOAT,0,mBufCurlPositionLines);    gl.glDrawArrays(GL10.GL_LINES,0,mCurlPositionLinesCount * 2);    gl.glDisable(GL10.GL_BLEND);  }  if (DRAW_SHADOW) {    gl.glEnable(GL10.GL_BLEND);    gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);    gl.glEnableClientState(GL10.GL_COLOR_ARRAY);    gl.glColorPointer(4,GL10.GL_FLOAT,0,mBufShadowColors);    gl.glVertexPointer(3,GL10.GL_FLOAT,0,mBufShadowVertices);    gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,mDropShadowCount,mSelfShadowCount);    gl.glDisableClientState(GL10.GL_COLOR_ARRAY);    gl.glDisable(GL10.GL_BLEND);  }  gl.glDisableClientState(GL10.GL_VERTEX_ARRAY);}  }
class C{  @SuppressWarnings("unchecked") private void extractParameters(){  icon=StringEscapeUtils.unescapeJava(config.getString("Icon","\u2618"));  color=ChatColor.getByChar(config.getString("Color","5").toCharArray()[0]);  chatHeader=ChatColor.GRAY + "[" + color+ icon+ ChatColor.GRAY+ "] ";  restrictCreative=config.getBoolean("RestrictCreative",false);  databaseBackup=config.getBoolean("DatabaseBackup",true);  for (  String world : (List<String>)config.getList("ExcludedWorlds"))   excludedWorldSet.add(world);  for (  String category : (List<String>)config.getList("DisabledCategories"))   disabledCategorySet.add(category);  playtimeTaskInterval=config.getInt("PlaytimeTaskInterval",150);  distanceTaskInterval=config.getInt("DistanceTaskInterval",5);  pooledRequestsTaskInterval=config.getInt("PooledRequestsTaskInterval",60);  asyncPooledRequestsSender=config.getBoolean("AsyncPooledRequestsSender",true);}  }
class C{  public void readDOT(Reader input){  DotParser dp=new DotParser(input,m_nodes,m_edges);  graphID=dp.parse();  setAppropriateNodeSize();  if (m_le != null) {    m_le.setNodeSize(paddedNodeWidth,nodeHeight);    jBtLayout.setEnabled(false);    layoutGraph();  }}  }
class C{  protected boolean isFieldSeparatorAtStart(){  return fieldSeparatorAtStart;}  }
class C{  private boolean wasFileCheckedIn(VirtualFile repo,VirtualFile file){  final Couple<HgRevisionNumber> parents=new HgWorkingCopyRevisionsCommand(myProject).parents(repo,file);  return parents.second != null;}  }
class C{  @Override public void configure(ResourceServerSecurityConfigurer resources) throws Exception {  resources.resourceId("apis");}  }
class C{  public boolean isIPhone(){  return isIPhone;}  }
class C{  public void paintTabbedPaneBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  private CTraceFunctions(){}  }
class C{  public Set<PartitionRebalanceInfo> executeFPA(){  if (logger.isDebugEnabled()) {    logger.debug("Rebalancing buckets for fixed partitioned region {}",this.targetRegion);  }  long start=System.nanoTime();  GemFireCacheImpl cache=(GemFireCacheImpl)leaderRegion.getCache();  InternalResourceManager resourceManager=InternalResourceManager.getInternalResourceManager(cache);  InternalResourceManager.getResourceObserver().recoveryStarted(targetRegion);  try {    if (!checkAndSetColocatedRegions()) {      return Collections.emptySet();    }    PartitionedRegionLoadModel model=null;    Map<PartitionedRegion,InternalPRInfo> detailsMap=fetchDetails(cache);    BucketOperatorWrapper operator=getBucketOperator(detailsMap);    model=buildModel(operator,detailsMap,resourceManager);    for (    PartitionRebalanceDetailsImpl details : operator.getDetailSet()) {      details.setPartitionMemberDetailsBefore(model.getPartitionedMemberDetails(details.getRegionPath()));    }    if (logger.isDebugEnabled()) {      logger.debug("Rebalancing FPR {} Model:{}\n",leaderRegion,model);    }    director.initialize(model);    director.nextStep();    if (logger.isDebugEnabled()) {      logger.debug("Rebalancing FPR {} complete. Model:{}\n",leaderRegion,model);    }    long end=System.nanoTime();    for (    PartitionRebalanceDetailsImpl details : operator.getDetailSet()) {      if (!simulate) {        details.setTime(end - start);      }      details.setPartitionMemberDetailsAfter(model.getPartitionedMemberDetails(details.getRegionPath()));    }    return Collections.<PartitionRebalanceInfo>unmodifiableSet(operator.getDetailSet());  }  finally {    try {      InternalResourceManager.getResourceObserver().recoveryFinished(targetRegion);    } catch (    Exception e) {      logger.debug(LocalizedMessage.create(LocalizedStrings.PartitionedRegionRebalanceOp_ERROR_IN_RESOURCE_OBSERVER),e);    }  }}  }
class C{  public HelloRequest(){}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:36.643 -0500",hash_original_method="68F6CB700CD961C98FAD85DDC5107742",hash_generated_method="DF1F5C1E9236855CC6A3ED494BE08945") private Object readResolve(){synchronized (levels) {    for (    Level level : levels) {      if (value != level.value) {        continue;      }      if (!name.equals(level.name)) {        continue;      }      if (Objects.equal(resourceBundleName,level.resourceBundleName)) {        return level;      }    }    levels.add(this);    return this;  }}  }
class C{  public InheritableThreadLocal(){}  }
class C{  void freeReserved(){  if (reservedPages.size() > 0) {    int[] array=new int[reservedPages.size()];    reservedPages.toArray(array);    reservedPages=new IntArray();    reserved=0;    for (    int p : array) {      store.free(p,false);    }  }}  }
class C{  @Override public int hashCode(){  int result=137;  result=HashUtilities.hashCode(result,this.xPosition);  for (int i=0; i < this.data.size(); i++) {    result=HashUtilities.hashCode(result,this.data.get(i));  }  return result;}  }
class C{  public static void putByteVolatile(Object obj,long off,byte val){  UNSAFE.putByteVolatile(obj,off,val);}  }
class C{  public double put(K key,double value){  double previous=0;  int index=insertionIndex(key);  boolean isNewMapping=true;  if (index < 0) {    index=-index - 1;    previous=_values[index];    isNewMapping=false;  }  K oldKey=(K)_set[index];  _set[index]=key;  _values[index]=value;  if (isNewMapping) {    postInsertHook(oldKey == null);  }  return previous;}  }
class C{  public GenericReference createGenericReference(){  GenericReferenceImpl genericReference=new GenericReferenceImpl();  return genericReference;}  }
class C{  public Measurement convert(Reading r,Point3d guess){  this.Xt=guess.x;  this.Yt=guess.y;  this.Zt=guess.z;  return convert(r);}  }
class C{  public SubjectAlternativeNameExtension(GeneralNames names) throws IOException {  this(Boolean.FALSE,names);}  }
class C{  protected void add(double value,int group){  if ((group < 0) || (group >= numberOfGroups)) {    throw new IllegalArgumentException("invalid group");  }  data.add(new Observation(value,group));}  }
class C{  public NamedColor(String[] namesArray,int r,int g,int b){  super(r,g,b);  names=new HashSet<>();  names.addAll(Arrays.asList(namesArray));  namesLowercase=new HashSet<>();  for (  String thisName : namesArray) {    namesLowercase.add(thisName.toLowerCase());  }  if (namesArray.length == 0) {    name="";  } else {    name=namesArray[0];  }}  }
class C{  public File[] grapStorePath(){  return Storage.LocalPath().listFiles();}  }
class C{  @Deprecated public static boolean isExceptionDetailEnabled(){  return proxyFactory.isExceptionDetailEnabled();}  }
class C{  public void fillDefaultValues(){  tsClipping.setSelected(false);  tfLowBound.setText(Double.toString(pdf.getDefaultLowBound()));  tfUpBound.setText(Double.toString(pdf.getDefaultUpBound()));  tfParam1.setText(Double.toString(pdf.getDefaultParam1()));  tfParam2.setText(Double.toString(pdf.getDefaultParam2()));  tfLowBound.setEnabled(false);  tfUpBound.setEnabled(false);}  }
class C{  public static boolean isShowErrorDetailsFromIntent(Intent intent){  return intent.getBooleanExtra(CustomActivityOnCrash.EXTRA_SHOW_ERROR_DETAILS,true);}  }
class C{  public void testFilter() throws IOException, Exception {  ArrayList<URLCrawlDatum> list=new ArrayList<URLCrawlDatum>();  list.add(createURLCrawlDatum("http://www.example.com/index.html",1,1));  list.add(createURLCrawlDatum("http://www.example.net/index.html",1,1));  list.add(createURLCrawlDatum("http://www.example.org/index.html",1,1));  createCrawlDB(list);  Configuration myConfiguration=new Configuration(conf);  myConfiguration.set("urlfilter.suffix.file","filter-all.txt");  Path generatedSegment=generateFetchlist(Integer.MAX_VALUE,myConfiguration,true);  assertNull("should be null (0 entries)",generatedSegment);  generatedSegment=generateFetchlist(Integer.MAX_VALUE,myConfiguration,false);  Path fetchlistPath=new Path(new Path(generatedSegment,CrawlDatum.GENERATE_DIR_NAME),"part-00000");  ArrayList<URLCrawlDatum> fetchList=readContents(fetchlistPath);  assertEquals(list.size(),fetchList.size());}  }
class C{  private static void writeInvokeAllResult(BinaryRawWriterEx writer,Map<Object,EntryProcessorResult> results){  if (results == null) {    writer.writeInt(-1);    return;  }  writer.writeInt(results.size());  for (  Map.Entry<Object,EntryProcessorResult> entry : results.entrySet()) {    writer.writeObjectDetached(entry.getKey());    EntryProcessorResult procRes=entry.getValue();    try {      Object res=procRes.get();      writer.writeBoolean(false);      writer.writeObjectDetached(res);    } catch (    Exception ex) {      writer.writeBoolean(true);      PlatformUtils.writeError(ex,writer);    }  }}  }
class C{  public static <K,V>CompatibleCacheBuilder<K,V> newBuilder(){  return new CompatibleCacheBuilder<>();}  }
class C{  public String addStepsForUpdateConsistencyGroup(Workflow workflow,String waitFor,List<VolumeDescriptor> volumesDescriptorsToAdd,List<VolumeDescriptor> volumesDescriptorsToRemove) throws ControllerException {  List<VolumeDescriptor> addDescriptors=VolumeDescriptor.filterByType(volumesDescriptorsToAdd,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.BLOCK_DATA},new VolumeDescriptor.Type[]{});  List<VolumeDescriptor> removeDescriptors=VolumeDescriptor.filterByType(volumesDescriptorsToRemove,new VolumeDescriptor.Type[]{VolumeDescriptor.Type.BLOCK_DATA},new VolumeDescriptor.Type[]{});  VolumeDescriptor firstVolume=null;  if (!addDescriptors.isEmpty()) {    firstVolume=addDescriptors.get(0);  } else   if (!removeDescriptors.isEmpty()) {    firstVolume=removeDescriptors.get(0);  } else {    _log.warn("No volumes to add or remove from CG, skip step.");    return waitFor;  }  if (NullColumnValueGetter.isNullURI(firstVolume.getConsistencyGroupURI())) {    _log.warn(String.format("Volume (%s) has a null CG reference, skip step.",firstVolume.getVolumeURI()));    return waitFor;  }  if (firstVolume.getType() != null) {    if (VolumeDescriptor.Type.SRDF_SOURCE.toString().equalsIgnoreCase(firstVolume.getType().toString()) || VolumeDescriptor.Type.SRDF_TARGET.toString().equalsIgnoreCase(firstVolume.getType().toString()) || VolumeDescriptor.Type.SRDF_EXISTING_SOURCE.toString().equalsIgnoreCase(firstVolume.getType().toString())) {      _log.warn(String.format("Volume (%s) is of type SRDF, skip step.",firstVolume.getVolumeURI()));      return waitFor;    }  }  Map<URI,Map<URI,Map<String,List<URI>>>> deviceToCGMap=createDeviceToCGMapFromDescriptors(addDescriptors,removeDescriptors);  for (  Map.Entry<URI,Map<URI,Map<String,List<URI>>>> deviceEntry : deviceToCGMap.entrySet()) {    URI deviceURI=deviceEntry.getKey();    Map<URI,Map<String,List<URI>>> volumesToUpdateByCG=deviceEntry.getValue();    for (    Map.Entry<URI,Map<String,List<URI>>> cgEntry : volumesToUpdateByCG.entrySet()) {      URI consistencyGroupURI=cgEntry.getKey();      List<URI> volumesToAdd=cgEntry.getValue().get(ADD_VOLUMES_TO_CG_KEY);      List<URI> volumesToRemove=cgEntry.getValue().get(REMOVE_VOLUMES_FROM_CG_KEY);      waitFor=workflow.createStep(UPDATE_CONSISTENCY_GROUP_STEP_GROUP,String.format("Updating consistency group  %s",consistencyGroupURI),waitFor,deviceURI,getDeviceType(deviceURI),this.getClass(),new Workflow.Method("updateConsistencyGroup",deviceURI,consistencyGroupURI,volumesToAdd,volumesToRemove),rollbackMethodNullMethod(),null);      if (volumesToAdd != null) {        _log.info(String.format("Step created for adding volumes [%s] to CG [%s] on device [%s]",Joiner.on("\t").join(volumesToAdd),consistencyGroupURI,deviceURI));      }      if (volumesToRemove != null) {        _log.info(String.format("Step created for removing volumes [%s] from CG [%s] on device [%s]",Joiner.on("\t").join(volumesToRemove),consistencyGroupURI,deviceURI));      }    }  }  return waitFor;}  }
class C{  private static boolean ignoreNotModeled(SootMethod method){  SootClass clz=method.getDeclaringClass();  if (SootUtils.isEnum(clz) && "values".equals(method.getName()))   return true;  if (clz.getName().contains("$") && "<init>".equals(method.getName()))   return true;  return SootUtils.isSynthetic(clz) || SootUtils.isSynthetic(method);}  }
class C{  public void splitQueryAndUnescape(I invocation,byte[] rawURIBytes,int uriLength) throws IOException {  for (int i=0; i < uriLength; i++) {    if (rawURIBytes[i] == '?') {      i++;      String queryString=byteToChar(rawURIBytes,i,uriLength - i,"ISO-8859-1");      invocation.setQueryString(queryString);      uriLength=i - 1;      break;    }  }  String rawURIString=byteToChar(rawURIBytes,0,uriLength,"ISO-8859-1");  invocation.setRawURI(rawURIString);  String decodedURI=normalizeUriEscape(rawURIBytes,0,uriLength,_encoding);  decodedURI=decodeURI(rawURIString,decodedURI,invocation);  String uri=normalizeUri(decodedURI);  invocation.setURI(uri);}  }
class C{  public HeaderCardBuilder value(int newValue) throws HeaderCardException {  if (this.card == null) {    this.card=new HeaderCard(this.key.key(),newValue,null);    this.header.addLine(this.card);  } else {    this.card.setValue(newValue);  }  return this;}  }
class C{  public LongOsmElementMap(){  this(DEFAULT_CAPACITY,DEFAULT_FILLFACTOR);}  }
class C{  @Override public void deleteSingleVolumeSnapshot(StorageSystem storage,URI snapshot,TaskCompleter taskCompleter) throws DeviceControllerException {  try {    callEMCRefreshIfRequired(_dbClient,_helper,storage,Arrays.asList(snapshot));    BlockSnapshot snap=_dbClient.queryObject(BlockSnapshot.class,snapshot);    CIMObjectPath syncObjectPath=_cimPath.getSyncObject(storage,snap);    if (_helper.checkExists(storage,syncObjectPath,false,false) != null) {      CIMArgument[] outArgs=new CIMArgument[5];      _helper.callModifyReplica(storage,_helper.getDeleteSnapshotSynchronousInputArguments(syncObjectPath),outArgs);      snap.setInactive(true);      snap.setIsSyncActive(false);      _dbClient.updateObject(snap);      taskCompleter.ready(_dbClient);    } else {      snap.setInactive(true);      snap.setIsSyncActive(false);      _dbClient.updateObject(snap);      taskCompleter.ready(_dbClient);    }  } catch (  WBEMException e) {    String message=String.format("Error encountered during delete snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.unableToCallStorageProvider(e.getMessage());    taskCompleter.error(_dbClient,error);  }catch (  Exception e) {    String message=String.format("Generic exception when trying to delete snapshot %s on array %s",snapshot.toString(),storage.getSerialNumber());    _log.error(message,e);    ServiceError error=DeviceControllerErrors.smis.methodFailed("deleteSingleVolumeSnapshot",e.getMessage());    taskCompleter.error(_dbClient,error);  }}  }
class C{  public static BufferedImage createCompatibleImage(BufferedImage image){  return createCompatibleImage(image,image.getWidth(),image.getHeight());}  }
class C{  public void warning(SAXParseException exception) throws SAXException {}  }
class C{  public ParetoRNG(Random rng,double k,double minValue,double maxValue){  this.rng=rng;  this.xm=minValue;  this.k=k;  if (maxValue == -1) {    this.maxValue=Double.POSITIVE_INFINITY;  } else {    this.maxValue=maxValue;  }}  }
class C{  public Plane(final double A,final double B,final double C,final double D){  super(A,B,C);  this.D=D;}  }
class C{  private void prepareVirtualPoolData() throws Exception {  log.info("Preparing VirtualPool Data for VirtualPoolMultiVolumeConsistencyMigration.");  VirtualArray virtualArray=new VirtualArray();  URI virtualArrayURI=URIUtil.createId(VirtualArray.class);  virtualArray.setId(virtualArrayURI);  virtualArray.setLabel("virtualArray1");  _dbClient.createObject(virtualArray);  for (int i=1; i <= 3; i++) {    VpoolProtectionVarraySettings protectionSettings=new VpoolProtectionVarraySettings();    URI protectionSettingsURI=URIUtil.createId(VpoolProtectionVarraySettings.class);    protectionSettings.setId(protectionSettingsURI);    protectionSettings.setJournalSize("min");    _dbClient.createObject(protectionSettings);    VirtualPool virtualPool=new VirtualPool();    URI virtualPoolURI=URIUtil.createId(VirtualPool.class);    rpTestVirtualPoolURIs.add(virtualPoolURI);    virtualPool.setId(virtualPoolURI);    virtualPool.setLabel("rpVirtualPool" + i);    StringMap protectionVarraySettings=new StringMap();    protectionVarraySettings.put(virtualArrayURI.toString(),protectionSettingsURI.toString());    virtualPool.setProtectionVarraySettings(protectionVarraySettings);    _dbClient.createObject(virtualPool);  }}  }
class C{  @LargeTest public void testStressAddRemoveTransition() throws Exception {  final int renderingMode=MediaItem.RENDERING_MODE_BLACK_BORDER;  final String VideoItemFileName1=INPUT_FILE_PATH + "H264_BP_800x480_15fps_512kbps_1_17.mp4";  final String ImageItemFileName2=INPUT_FILE_PATH + "IMG_1600x1200.jpg";  final String VideoItemFileName3=INPUT_FILE_PATH + "MPEG4_SP_640x480_15fps_512kbps_AACLC_48khz_132kbps_s_0_26.mp4";  final String maskFilename=INPUT_FILE_PATH + "TransitionSpiral_QVGA.jpg";  final String[] loggingInfo=new String[1];  int i=0;  writeTestCaseHeader("testStressAddRemoveTransition");  getBeginMemory();  for (i=0; i < 50; i++) {    if (i % 4 == 0) {      final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,VideoItemFileName1,renderingMode);      mVideoEditor.addMediaItem(mediaItem1);      mediaItem1.setExtractBoundaries(0,10000);      final TransitionCrossfade tranCrossfade=new TransitionCrossfade("transCF" + i,null,mediaItem1,5000,Transition.BEHAVIOR_MIDDLE_FAST);      mVideoEditor.addTransition(tranCrossfade);    }    if (i % 4 == 1) {      final MediaVideoItem mediaItem1=new MediaVideoItem(mVideoEditor,"m1" + i,VideoItemFileName1,renderingMode);      mVideoEditor.addMediaItem(mediaItem1);      mediaItem1.setExtractBoundaries(0,10000);      final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2" + i,ImageItemFileName2,10000,renderingMode);      mVideoEditor.addMediaItem(mediaItem2);      final TransitionAlpha transitionAlpha=mVideoEditorHelper.createTAlpha("transAlpha" + i,mediaItem1,mediaItem2,5000,Transition.BEHAVIOR_SPEED_UP,maskFilename,10,false);      transitionAlpha.setDuration(4000);      mVideoEditor.addTransition(transitionAlpha);    }    if (i % 4 == 2) {      final MediaImageItem mediaItem2=new MediaImageItem(mVideoEditor,"m2" + i,ImageItemFileName2,10000,renderingMode);      mVideoEditor.addMediaItem(mediaItem2);      final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3" + i,VideoItemFileName3,renderingMode);      mVideoEditor.addMediaItem(mediaItem3);      mediaItem3.setExtractBoundaries(0,10000);      final TransitionAlpha transitionAlpha=mVideoEditorHelper.createTAlpha("transAlpha" + i,mediaItem2,mediaItem3,5000,Transition.BEHAVIOR_SPEED_UP,maskFilename,10,false);      transitionAlpha.setDuration(4000);      mVideoEditor.addTransition(transitionAlpha);      mediaItem3.setExtractBoundaries(0,6000);      final TransitionSliding transition2And3=mVideoEditorHelper.createTSliding("transSlide" + i,mediaItem2,mediaItem3,3000,Transition.BEHAVIOR_MIDDLE_FAST,TransitionSliding.DIRECTION_LEFT_OUT_RIGHT_IN);      mVideoEditor.addTransition(transition2And3);    }    if (i % 4 == 3) {      final MediaVideoItem mediaItem3=new MediaVideoItem(mVideoEditor,"m3" + i,VideoItemFileName3,renderingMode);      mVideoEditor.addMediaItem(mediaItem3);      mediaItem3.setExtractBoundaries(0,5000);      final TransitionFadeBlack transition3=mVideoEditorHelper.createTFadeBlack("transFB" + i,mediaItem3,null,2500,Transition.BEHAVIOR_SPEED_UP);      transition3.setDuration(500);      mVideoEditor.addTransition(transition3);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,false,i);    }  }  getAfterMemory_updateLog(loggingInfo,false,i);  for (i=0; i < 50; i++) {    if (i % 4 == 0) {      mVideoEditor.removeTransition("transCF" + i);      mVideoEditor.removeMediaItem("m1" + i);    }    if (i % 4 == 1) {      mVideoEditor.removeTransition("transAlpha" + i);      mVideoEditor.removeMediaItem("m1" + i);      mVideoEditor.removeMediaItem("m2" + i);    }    if (i % 4 == 2) {      mVideoEditor.removeTransition("transSlide" + i);      mVideoEditor.removeMediaItem("m2" + i);      mVideoEditor.removeMediaItem("m3" + i);    }    if (i % 4 == 3) {      mVideoEditor.removeMediaItem("m3" + i);    }    if (i % 10 == 0) {      getAfterMemory_updateLog(loggingInfo,true,i);    }  }  getAfterMemory_updateLog(loggingInfo,true,i);}  }
