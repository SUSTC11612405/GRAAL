class C{  protected void doParse() throws ParseException, IOException {  pointsHandler.startPoints();  current=reader.read();  skipSpaces();  loop:   for (; ; ) {    if (current == -1) {      break loop;    }    float x=parseFloat();    skipCommaSpaces();    float y=parseFloat();    pointsHandler.point(x,y);    skipCommaSpaces();  }  pointsHandler.endPoints();}  }
class C{  public static void terminateProcessHandler(@NotNull ProcessHandler processHandler,long millisTimeout,@Nullable String commandLine){  if (processHandler.isProcessTerminated()) {    if (commandLine == null && processHandler instanceof BaseOSProcessHandler) {      commandLine=((BaseOSProcessHandler)processHandler).getCommandLine();    }    LOG.warn("Process '" + commandLine + "' is already terminated!");    return;  }  processHandler.destroyProcess();  if (processHandler instanceof KillableProcess) {    KillableProcess killableProcess=(KillableProcess)processHandler;    if (killableProcess.canKillProcess()) {      if (!processHandler.waitFor(millisTimeout)) {        killableProcess.killProcess();      }    }  }}  }
class C{  @Override public void populate(ChunkManager level,int chunkX,int chunkZ,NukkitRandom random){}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  public static final float[] resize(float[] a,int size){  if (a.length >= size)   return a;  float[] b=new float[size];  System.arraycopy(a,0,b,0,a.length);  return b;}  }
class C{  public void testObsoleteDstZoneName() throws Exception {  SimpleDateFormat format=new SimpleDateFormat("yyyy-MM-dd'T'HH:mm zzzz",Locale.US);  Date normal=format.parse("1970-01-01T00:00 EET");  Date dst=format.parse("1970-01-01T00:00 EEST");  assertEquals(60 * 60 * 1000,normal.getTime() - dst.getTime());}  }
class C{  public static ActivityAssigner instance(Context context){  ThreadUtils.assertOnUiThread();  if (sInstance == null) {    sInstance=new ActivityAssigner(context);  }  return sInstance;}  }
class C{  public AlgorithmException(Algorithm algorithm,String message){  this(algorithm,message,null);}  }
class C{  public void testMoveFileSourceMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  create(igfs,paths(DIR,DIR_NEW,SUBDIR_NEW),paths(FILE));  igfs.rename(FILE,SUBDIR_NEW);  checkExist(igfs,SUBDIR);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,FILE.name()));  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  protected void assertFalse(String message,boolean value){  if (value) {    fail(message);  }}  }
class C{  public void writeHeaderPart(AnnotatedOutput out){  throwIfNotPrepared();  int sz=strings.size();  int offset=(sz == 0) ? 0 : getFileOffset();  if (out.annotates()) {    out.annotate(4,"string_ids_size: " + Hex.u4(sz));    out.annotate(4,"string_ids_off:  " + Hex.u4(offset));  }  out.writeInt(sz);  out.writeInt(offset);}  }
class C{  public SimpleLocalUses(Body body,LocalDefs localDefs){  if (Options.v().time())   Timers.v().usesTimer.start();  if (Options.v().time())   Timers.v().usePhase1Timer.start();  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     Constructing SimpleLocalUses...");  Chain units=body.getUnits();  unitToUses=new HashMap<Unit,List>(units.size() * 2 + 1,0.7f);{    Iterator it=units.iterator();    while (it.hasNext()) {      Unit s=(Unit)it.next();      unitToUses.put(s,new ArrayList());    }  }  if (Options.v().time())   Timers.v().usePhase1Timer.end();  if (Options.v().time())   Timers.v().usePhase2Timer.start();{    Iterator it=units.iterator();    while (it.hasNext()) {      Unit s=(Unit)it.next();      Iterator boxIt=s.getUseBoxes().iterator();      while (boxIt.hasNext()) {        ValueBox useBox=(ValueBox)boxIt.next();        if (useBox.getValue() instanceof Local) {          Local l=(Local)useBox.getValue();          List<Unit> possibleDefs=localDefs.getDefsOfAt(l,s);          Iterator<Unit> defIt=possibleDefs.iterator();          while (defIt.hasNext()) {            List<UnitValueBoxPair> useList=unitToUses.get(defIt.next());            useList.add(new UnitValueBoxPair(s,useBox));          }        }      }    }  }  if (Options.v().time())   Timers.v().usePhase2Timer.end();  if (Options.v().time())   Timers.v().usePhase3Timer.start();{    Iterator it=units.iterator();    while (it.hasNext()) {      Unit s=(Unit)it.next();      unitToUses.put(s,Collections.unmodifiableList(unitToUses.get(s)));    }  }  if (Options.v().time())   Timers.v().usePhase3Timer.end();  if (Options.v().time())   Timers.v().usesTimer.end();  if (Options.v().verbose())   G.v().out.println("[" + body.getMethod().getName() + "]     finished SimpleLocalUses...");}  }
class C{  @Override public ObjInfo[] objInfoOfAllInstances(Selector obj){  int total=count(obj);  ObjInfo objs[]=new ObjInfo[total];  if ((obj.getMask() & Selector.MASK_INSTANCE) > 0 && total > 0) {    try {      objs[0]=objInfo(obj);    } catch (    UiObjectNotFoundException e) {    }  } else {    UiSelector sel=obj.toUiSelector();    for (int i=0; i < total; i++) {      try {        objs[i]=ObjInfo.getObjInfo(sel.instance(i));      } catch (      UiObjectNotFoundException e) {      }    }  }  return objs;}  }
class C{  public static boolean isClassTree(Tree tree){  return classTreeKinds().contains(tree.getKind());}  }
class C{  @Override public void keyPressed(KeyEvent e){}  }
class C{  public void update(byte input){  digest.update(input);}  }
class C{  private static int freeParameters(int K,int D){  return (K - 1) + (D * K) + 1;}  }
class C{  public static void readSet(String resourceName,Set<String> myset,boolean lowercase,boolean padSpace){  try {    InputStream is=ResourceManager.class.getClassLoader().getResourceAsStream(resourceName);    if (is == null) {      is=new FileInputStream(resourceName);    }    BufferedReader br=new BufferedReader(new InputStreamReader(is));    String line=null;    try {      if (lowercase) {        if (padSpace) {          while ((line=br.readLine()) != null)           myset.add(" " + line.toLowerCase() + " ");        } else {          while ((line=br.readLine()) != null)           myset.add(line.toLowerCase());        }      } else {        if (padSpace) {          while ((line=br.readLine()) != null)           myset.add(" " + line + " ");        } else {          while ((line=br.readLine()) != null)           myset.add(line);        }      }      br.close();    } catch (    Exception e) {      System.out.println(e + " Line:" + line);    }    is.close();  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public final int associationID(){  return associationID;}  }
class C{  public FastAdapterDialog<Item> remove(int position){  mFastItemAdapter.remove(position);  return this;}  }
class C{  public static void rollbackCastlingMove(ClassicGame game,Move move,int initialKingFile,int initialShortRookFile,int initialLongRookFile){  int kingFromSquare=move.getColor() == WHITE ? getSquare(0,initialKingFile) : getSquare(7,initialKingFile);  long kingFromBB=getBitboard(kingFromSquare);  long kingToBB, rookFromBB, rookToBB;  int rookFromSquare;  if (move.getColor() == WHITE) {    if (move.getMoveCharacteristic() == Move.SHORT_CASTLING_CHARACTERISTIC) {      rookFromSquare=getSquare(0,initialShortRookFile);      kingToBB=G1;      rookFromBB=getBitboard(rookFromSquare);      rookToBB=F1;      updateZobristCastle(game,WHITE,kingFromSquare,rookFromSquare,SQUARE_G1,SQUARE_F1);    } else {      rookFromSquare=getSquare(0,initialLongRookFile);      kingToBB=C1;      rookFromBB=getBitboard(rookFromSquare);      rookToBB=D1;      updateZobristCastle(game,WHITE,kingFromSquare,rookFromSquare,SQUARE_C1,SQUARE_D1);    }  } else {    if (move.getMoveCharacteristic() == Move.SHORT_CASTLING_CHARACTERISTIC) {      rookFromSquare=getSquare(7,initialShortRookFile);      kingToBB=G8;      rookFromBB=getBitboard(rookFromSquare);      rookToBB=F8;      updateZobristCastle(game,BLACK,kingFromSquare,rookFromSquare,SQUARE_G8,SQUARE_F8);    } else {      rookFromSquare=getSquare(7,initialLongRookFile);      kingToBB=C8;      rookFromBB=getBitboard(rookFromSquare);      rookToBB=D8;      updateZobristCastle(game,BLACK,kingFromSquare,rookFromSquare,SQUARE_C8,SQUARE_D8);    }  }  if (rookFromBB != rookToBB) {    long rookFromTo=rookToBB | rookFromBB;    game.setPiece(bitscanForward(rookToBB),EMPTY);    game.setPiece(rookFromSquare,ROOK);    game.xor(move.getColor(),ROOK,rookFromTo);    game.xor(move.getColor(),rookFromTo);    game.setOccupiedBB(game.getOccupiedBB() ^ rookFromTo);    game.setEmptyBB(game.getEmptyBB() ^ rookFromTo);  }  if (kingToBB != kingFromBB) {    long kingFromTo=kingToBB | kingFromBB;    if (kingToBB != rookFromBB) {      game.setPiece(bitscanForward(kingToBB),EMPTY);    }    game.setPiece(kingFromSquare,KING);    game.xor(move.getColor(),KING,kingFromTo);    game.xor(move.getColor(),kingFromTo);    game.setOccupiedBB(game.getOccupiedBB() ^ kingFromTo);    game.setEmptyBB(game.getEmptyBB() ^ kingFromTo);  }  game.setEpSquareFromPreviousMove();}  }
class C{  public static boolean isName(int c){  return c < 0x10000 && (CHARS[c] & MASK_NAME) != 0;}  }
class C{  public void clearOverlays(){  this.overlayGraphics.clear();}  }
class C{  public void store(char val){  SimulatedMemory.setChar(this,val);}  }
class C{  public void testLocalSqlFieldsQuery(){  IgniteCache<Integer,Value> cache=grid(0).cache(null);  QueryCursor<List<?>> cur=cache.query(new SqlFieldsQuery("select _val from Value").setLocal(true));  List<List<?>> all=cur.getAll();  assertFalse(all.isEmpty());  for (  List<?> entry : all)   ((Value)entry.get(0)).str="after";  check(cache);}  }
class C{  @NonNull public static String capitalizeWord(@NonNull String word){  if (word.isEmpty()) {    return "";  } else {    return word.substring(0,1).toUpperCase() + word.substring(1).toLowerCase();  }}  }
class C{  @Override public boolean isEnabled(int position){  if (!itemsClickables) {    return false;  } else {    boolean isClickable=positionsNoClickables.get(position,-1) == -1;    return isClickable && super.isEnabled(position);  }}  }
class C{  public static int max(int[] list){  int max=list[0];  for (int i=1; i < list.length; i++) {    if (list[i] > max)     max=list[i];  }  return max;}  }
class C{  public void testLeakFileChannel() throws IOException {  Path dir=wrap(createTempDir());  OutputStream file=Files.newOutputStream(dir.resolve("stillopen"));  file.write(5);  file.close();  FileChannel leak=FileChannel.open(dir.resolve("stillopen"));  try {    dir.getFileSystem().close();    fail("should have gotten exception");  } catch (  Exception e) {    assertTrue(e.getMessage().contains("file handle leaks"));  }  leak.close();}  }
class C{  @SuppressWarnings("PMD.CloseResource") public AwsPolicyBuilder withKms(String kmsKeyId,KmsActions... actions){  Statement statement=new Statement(Effect.Allow);  statement.setActions(Arrays.asList(actions));  statement.setResources(Arrays.asList(new Resource(kmsKeyId)));  policy.getStatements().add(statement);  return this;}  }
class C{  public static void positionCenterScreen(Window window){  showCenterScreen(window);}  }
class C{  public String sqlAD_getCustomizationChangeLogs(String vendorName,String catalogName,String schemaName){  String searchTableName="AD_ChangeLog";  ArrayList<String> columnNames=new ArrayList<String>();  columnNames.add("t0.TableName");  columnNames.add("t.Record_ID");  columnNames.add("t1.ColumnName");  columnNames.add("t.NewValue");  columnNames.add("t2.Name");  ArrayList<String> aliasNames=new ArrayList<String>();  aliasNames.add("TABLENAME");  aliasNames.add("RECORDID");  aliasNames.add("COLUMNNAME");  aliasNames.add("NEWVALUE");  aliasNames.add("DISPLAYTYPE");  ArrayList<String> joinTypes=new ArrayList<String>();  ArrayList<String> joinTables=new ArrayList<String>();  ArrayList<String> joinConditions=new ArrayList<String>();  joinTypes.add("INNER JOIN");  joinTables.add("AD_Table");  joinConditions.add("t.AD_Table_ID = t0.AD_Table_ID");  joinTypes.add("INNER JOIN");  joinTables.add("AD_Column");  joinConditions.add("t.AD_Table_ID = t1.AD_Table_ID AND t.AD_Column_ID = t1.AD_Column_ID");  joinTypes.add("INNER JOIN");  joinTables.add("AD_Reference");  joinConditions.add("t1.AD_Reference_ID = t2.AD_Reference_ID");  ArrayList<String> conditions=new ArrayList<String>();  conditions.add("t.IsCustomization = 'Y'");  conditions.add("t.IsActive = 'Y'");  ArrayList<String> sortColumns=new ArrayList<String>();  sortColumns.add("1");  sortColumns.add("2");  sortColumns.add("3");  return sql_select(vendorName,catalogName,schemaName,searchTableName,null,columnNames,aliasNames,joinTypes,joinTables,null,joinConditions,conditions,sortColumns,false);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  Burner.getGlobalBurner().cancel();  return null;}  }
class C{  protected boolean equalsAndSameParent(IJavaElement e1,IJavaElement e2){  IJavaElement parent1;  return e1.equals(e2) && ((parent1=e1.getParent()) != null) && parent1.equals(e2.getParent());}  }
class C{  public void createOrUpdateThing(final String tenant,final String targetId){  final MessageProperties messagePropertiesForSP=new MessageProperties();  messagePropertiesForSP.setHeader(MessageHeaderKey.TYPE,MessageType.THING_CREATED.name());  messagePropertiesForSP.setHeader(MessageHeaderKey.TENANT,tenant);  messagePropertiesForSP.setHeader(MessageHeaderKey.THING_ID,targetId);  messagePropertiesForSP.setHeader(MessageHeaderKey.SENDER,"simulator");  messagePropertiesForSP.setContentType(MessageProperties.CONTENT_TYPE_JSON);  messagePropertiesForSP.setReplyTo(amqpProperties.getSenderForSpExchange());  final Message convertedMessage=new Message(null,messagePropertiesForSP);  sendMessage(spExchange,convertedMessage);  LOGGER.debug("Created thing created message and send to SP for Thing \"{}\"",targetId);}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public static void checkOldDataUnderlying(SupportBaseView testChildView,EventBean[] expectedValues){  EventBean[] oldData=testChildView.getLastOldData();  Object[] expectedUnderlying=getUnderlying(expectedValues);  Object[] oldUnderlying=getUnderlying(oldData);  EPAssertionUtil.assertEqualsExactOrder(expectedUnderlying,oldUnderlying);  testChildView.clearLastOldData();}  }
class C{  public static ObjectMapper customizeObjectMapper(ObjectMapper objectMapper){  objectMapper.registerModules(new Jdk8Module());  objectMapper.registerModules(new JavaTimeModule());  objectMapper.setSerializationInclusion(JsonInclude.Include.NON_NULL);  objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);  return objectMapper;}  }
class C{  public void fitScreen(){  Matrix save=mViewPortHandler.fitScreen();  mViewPortHandler.refresh(save,this,true);}  }
class C{  public String toString(){  return "[Style: foreground: " + foreground + ", background: "+ background+ ", underline: "+ underline+ ", font: "+ font+ "]";}  }
class C{  public ProvisionNamespaceTransaction(final TimeInstant timeStamp,final Account sender,final Account rentalFeeSink,final Amount rentalFee,final NamespaceIdPart newPart,final NamespaceId parent){  super(TransactionTypes.PROVISION_NAMESPACE,1,timeStamp,sender);  this.rentalFeeSink=rentalFeeSink;  this.rentalFee=rentalFee;  this.newPart=newPart;  this.parent=parent;}  }
class C{  private boolean process(MOrder order){  log.info(order.toString());  order.setDocAction(p_DocAction);  if (order.processIt(p_DocAction)) {    order.saveEx();    addLog(0,null,null,order.getDocumentNo() + ": OK");    return true;  }  addLog(0,null,null,order.getDocumentNo() + ": Error " + order.getProcessMsg());  return false;}  }
class C{  private long defineInvocationTime(String dateSource){  final long invocationTime=calculateMillis(dateSource);  Calendar calendar=Calendar.getInstance();  calendar.setTimeInMillis(invocationTime);  DateFactory.setInstance(new TestDateFactory(calendar.getTime()));  return invocationTime;}  }
class C{  public Transform(final Transform xf){  p=xf.p.clone();  q=xf.q.clone();}  }
class C{  public boolean isNativeLookAndFeel(){  return false;}  }
class C{  private boolean isUserAdmin(){  boolean isAdmin=false;  if ((null != mRoom) && (null != mSession)) {    PowerLevels powerLevels;    if (null != (powerLevels=mRoom.getLiveState().getPowerLevels())) {      String userId=mSession.getMyUserId();      isAdmin=(null != userId) ? (powerLevels.getUserPowerLevel(userId) >= CommonActivityUtils.UTILS_POWER_LEVEL_ADMIN) : false;    }  }  return isAdmin;}  }
class C{  public PiePlot(DataSource data){  super();  center=new Point2D.Double(0.5,0.5);  radius=1.0;  start=0.0;  clockwise=true;  pointRenderers=new HashMap<DataSource,PointRenderer>();  setPlotArea(new PiePlotArea2D(this));  setLegend(new PiePlotLegend(this));  add(data);  createDefaultAxes();  createDefaultAxisRenderers();  dataUpdated(data);}  }
class C{  public void ensureCapacity(int minCapacity){  if (children == null) {    children=new GraphicsNode[4];  }  modCount++;  int oldCapacity=children.length;  if (minCapacity > oldCapacity) {    GraphicsNode[] oldData=children;    int newCapacity=oldCapacity + oldCapacity / 2 + 1;    if (newCapacity < minCapacity) {      newCapacity=minCapacity;    }    children=new GraphicsNode[newCapacity];    System.arraycopy(oldData,0,children,0,count);  }}  }
class C{  public static Vector3 max(Vector3 o1,Vector3 o2){  return new Vector3(Math.max(o1.x,o2.x),Math.max(o1.y,o2.y),Math.max(o1.z,o2.z));}  }
class C{  public boolean equalsCode(String code){  boolean equals=false;  if (getCode().equalsIgnoreCase(code)) {    equals=true;  }  return equals;}  }
class C{  public RelaxedURIComparator(){  this.comparator=new BasicURLComparator();}  }
class C{  protected boolean beforeSave(boolean newRecord){  String textDetails=getTextDetails();  if (textDetails == null || textDetails.length() == 0) {    setTextDetails(MRefList.getListDescription(getCtx(),"A_Update_Type",getChangeType()));  }  return true;}  }
class C{  public ComponentBuilder insertion(String insertion){  current.setInsertion(insertion);  return this;}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!newRecord && is_ValueChanged("IsActive") && isActive()) {    log.severe("Cannot Re-Activate deactivated Allocations");    return false;  }  return true;}  }
class C{  @DSSafe(DSCat.SAFE_OTHERS) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:08.650 -0500",hash_original_method="7EBA89BCEE46EEC5D25867CF89F8E8B9",hash_generated_method="AFD4D64ED22ACE50EF1BB1B1A7A48939") public Object[] toArray(){  return hlist.toArray();}  }
class C{  public boolean isDrawFilledEnabled(){  return mDrawFilled;}  }
class C{  public void addSupportRenderer(SupportSeriesRender renderer){  mSupportRenders.add(renderer);}  }
class C{  public boolean isLocalDatastoreSupported(){  return localDatastoreSupported;}  }
class C{  public static double euclideanDistance(Problem problem,Solution a,Solution b){  return distance(problem,a,b,2.0);}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (value: ");  result.append(value);  result.append(", rawValue: ");  result.append(rawValue);  result.append(')');  return result.toString();}  }
class C{  private void computeNamedParams(){  rawArgs.stream().filter(null).forEach(null);}  }
class C{  private static Class<?>[] readParameters(ObjectInputStream in) throws IOException, ClassNotFoundException {  Class<?>[] result=new Class[in.readShort()];  for (int i=0; i < result.length; i++) {    if (!in.readBoolean()) {      result[i]=(Class<?>)in.readObject();      continue;    }    result[i]=primitives[in.readByte()];  }  return result;}  }
class C{  public static boolean initialize(String password){  if (!initializePrivateKey(password))   return false;  loadDefaultUserDataKey();  return true;}  }
class C{  public static int scale(float value){  return (Integer.MAX_VALUE - 2) * (int)Math.ceil((value / (value + 1.0F)));}  }
class C{  public Stream<Tuple2id> similarUsers(int uidx){  return sim.similarElems(uidx);}  }
class C{  private void testColVariances(String testName,Sparsity sparsity,DataType dataType,boolean rewrites,ExecType platform){  boolean rewritesOld=OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION;  OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewrites;  RUNTIME_PLATFORM platformOld=rtplatform;switch (platform) {case MR:    rtplatform=RUNTIME_PLATFORM.HADOOP;  break;case SPARK:rtplatform=RUNTIME_PLATFORM.SPARK;break;default :rtplatform=RUNTIME_PLATFORM.SINGLE_NODE;break;}boolean sparkConfigOld=DMLScript.USE_LOCAL_SPARK_CONFIG;if (rtplatform == RUNTIME_PLATFORM.SPARK) DMLScript.USE_LOCAL_SPARK_CONFIG=true;try {getAndLoadTestConfiguration(testName);String HOME=SCRIPT_DIR + TEST_DIR;fullDMLScriptName=HOME + testName + ".dml";programArgs=new String[]{"-explain","-stats","-args",input(INPUT_NAME),output(OUTPUT_NAME)};fullRScriptName=HOME + testName + ".R";rCmd="Rscript" + " " + fullRScriptName + " "+ inputDir()+ " "+ expectedDir();double sparsityVal;switch (sparsity) {case EMPTY:sparsityVal=0;break;case SPARSE:sparsityVal=sparsitySparse;break;case DENSE:default :sparsityVal=sparsityDense;}int r;int c;switch (dataType) {case ROWVECTOR:r=1;c=cols;break;case COLUMNVECTOR:r=rows;c=1;break;case MATRIX:default :r=rows;c=cols;}double[][] X=getRandomMatrix(r,c,-1,1,sparsityVal,7);writeInputMatrixWithMTD(INPUT_NAME,X,true);runTest(true,false,null,-1);runRScript(true);HashMap<CellIndex,Double> dmlfile=readDMLMatrixFromHDFS(OUTPUT_NAME);HashMap<CellIndex,Double> rfile=readRMatrixFromFS(OUTPUT_NAME);TestUtils.compareMatrices(dmlfile,rfile,eps,"Stat-DML","Stat-R");if (rewrites && (platform == ExecType.SPARK || platform == ExecType.CP)) {String prefix=(platform == ExecType.SPARK) ? Instruction.SP_INST_PREFIX : "";if (dataType == DataType.ROWVECTOR) {String opcode=prefix + colVarOp;boolean rewriteApplied=!Statistics.getCPHeavyHitterOpCodes().contains(opcode);Assert.assertTrue("Rewrite not applied to row vector case.",rewriteApplied);} else if (dataType == DataType.COLUMNVECTOR) {String opcode=prefix + varOp;boolean rewriteApplied=Statistics.getCPHeavyHitterOpCodes().contains(opcode);Assert.assertTrue("Rewrite not applied to column vector case.",rewriteApplied);}}}  finally {OptimizerUtils.ALLOW_ALGEBRAIC_SIMPLIFICATION=rewritesOld;rtplatform=platformOld;DMLScript.USE_LOCAL_SPARK_CONFIG=sparkConfigOld;}}  }
class C{  public void addLeafListener(ActionListener l){  leafListener.addListener(l);}  }
class C{  public static void pushPredicate(int distance,int branchId){  lastDistance.put(branchId,Math.abs(distance));}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(3);  newVector.addElement(new Option("\tSets the attribute index (default last).","C",1,"-C <col>"));  newVector.addElement(new Option("\tSets the first value's index (default first).","F",1,"-F <value index>"));  newVector.addElement(new Option("\tSets the second value's index (default last).","S",1,"-S <value index>"));  return newVector.elements();}  }
class C{  @Override public void drawSeries(Canvas canvas,Paint paint,List<Float> points,XYSeriesRenderer seriesRenderer,float yAxisValue,int seriesIndex,int startIndex){  int seriesNr=mDataset.getSeriesCount();  int length=points.size();  paint.setColor(seriesRenderer.getColor());  paint.setStyle(Style.FILL);  float halfDiffX=getHalfDiffX(points,length,seriesNr);  int start=0;  if (startIndex > 0) {    start=2;  }  for (int i=start; i < length; i+=4) {    if (points.size() > i + 3) {      float xMin=points.get(i);      float yMin=points.get(i + 1);      float xMax=points.get(i + 2);      float yMax=points.get(i + 3);      drawBar(canvas,xMin,yMin,xMax,yMax,halfDiffX,seriesNr,seriesIndex,paint);    }  }  paint.setColor(seriesRenderer.getColor());}  }
class C{  void destroyOldestReadyToCompact(){synchronized (this.oplogIdToOplog) {    if (this.drfOnlyOplogs.isEmpty())     return;  }  Oplog oldestLiveOplog=getOldestLiveOplog();  ArrayList<Oplog> toDestroy=new ArrayList<Oplog>();  if (oldestLiveOplog == null) {synchronized (this.oplogIdToOplog) {      toDestroy.addAll(this.drfOnlyOplogs.values());    }  } else {synchronized (this.oplogIdToOplog) {      for (      Oplog oplog : this.drfOnlyOplogs.values()) {        if (oplog.getOplogId() < oldestLiveOplog.getOplogId()) {          toDestroy.add(oplog);        }      }    }  }  for (  Oplog oplog : toDestroy) {    oplog.destroy();  }}  }
class C{  public void print(char ch){  print(String.valueOf(ch));}  }
class C{  public void addRepositoryConnectionListener(RepositoryConnectionListener listener){  listeners.add(listener);  activated=true;}  }
class C{  public void detach(){  super.detach();  if (m_canDetachNodeset) {    m_exprObj.detach();  }  m_exprObj=null;}  }
class C{  CompoundInterval(BasicInterval i,Register register){  BasicInterval newInterval=new MappedBasicInterval(i.getBegin(),i.getEnd(),this);  add(newInterval);  reg=register;}  }
class C{  public static void onEventDuration(final Context context,final String event_id,final String label,final long duration){  onEventDuration(context,event_id,label,1,duration,null);}  }
class C{  ClusterHeartbeat createCluster(String clusterName){  ClusterHeartbeat cluster=_clusterMap.get(clusterName);  if (cluster == null) {    cluster=new ClusterHeartbeat(clusterName,this);    _clusterMap.putIfAbsent(clusterName,cluster);    cluster=_clusterMap.get(clusterName);  }  return cluster;}  }
class C{  public static byte[] subarray(byte[] array,int startIndexInclusive,int endIndexExclusive){  if (array == null) {    return null;  }  if (startIndexInclusive < 0) {    startIndexInclusive=0;  }  if (endIndexExclusive > array.length) {    endIndexExclusive=array.length;  }  int newSize=endIndexExclusive - startIndexInclusive;  if (newSize <= 0) {    return EMPTY_BYTE_ARRAY;  }  byte[] subarray=new byte[newSize];  System.arraycopy(array,startIndexInclusive,subarray,0,newSize);  return subarray;}  }
class C{  public RotateStrategyByDate(){  this("yyyyMMdd");}  }
class C{  static double svd_dmin(double a,double b){  return Math.min(a,b);}  }
class C{  public void selectTaxa(TextSearchType searchType,String searchString,boolean caseSensitive){  String attributeName="!name";  LabelPainter lp=treePane.getTipLabelPainter();  if (lp != null && lp.isVisible() && lp.getDisplayAttribute() != null) {    attributeName=lp.getDisplayAttribute();  }  selectTaxa(attributeName,searchType,searchString,caseSensitive);  scrollToSelectedTips();}  }
class C{  public Spannable fromXhtml(SAXParser parser,String src) throws IOException, SAXException {  XhtmlSaxHandler saxHandler=new XhtmlSaxHandler(roster);  StringBuilder xml=new StringBuilder("<SpannableStringGenerator>");  xml.append(src);  xml.append("</SpannableStringGenerator>");  parser.parse(new InputSource(new StringReader(xml.toString())),saxHandler);  return (saxHandler.getContent());}  }
class C{  private static synchronized void removeTeam(int teamIndex){  TeamInfo removedTeam=liveTeams.remove(teamIndex);  System.out.println("[-" + removedTeam + "]");}  }
class C{  public ExceptionWithContext(Throwable cause,String message,Object... formatArgs){  super((message != null) ? formatMessage(message,formatArgs) : (cause != null) ? cause.getMessage() : null,cause);  if (cause instanceof ExceptionWithContext) {    String ctx=((ExceptionWithContext)cause).context.toString();    context=new StringBuffer(ctx.length() + 200);    context.append(ctx);  } else {    context=new StringBuffer(200);  }}  }
class C{  protected void removeClassifiers(int[] indices){  int i;  if (indices == null) {    m_ModelClassifiers.removeAllElements();  } else {    for (i=indices.length - 1; i >= 0; i--)     m_ModelClassifiers.remove(indices[i]);  }  setModified(true);}  }
class C{  public void startPrefixMapping(String prefix,String uri) throws org.xml.sax.SAXException {}  }
class C{  public void maxx(int parseInt){  maxx=parseInt;  tileBoundsSet=true;}  }
class C{  public JapanesePartOfSpeechStopFilterFactory(Map<String,String> args){  super(args);  stopTagFiles=get(args,"tags");  if (!args.isEmpty()) {    throw new IllegalArgumentException("Unknown parameters: " + args);  }}  }
class C{  public Vec2 offsetForSize(double width,double height,Vec2 result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Offset","offsetForSize","missingResult"));  }  double x, y;  if (this.xUnits == WorldWind.OFFSET_FRACTION) {    x=width * this.x;  } else   if (this.xUnits == WorldWind.OFFSET_INSET_PIXELS) {    x=width - this.x;  } else {    x=this.x;  }  if (this.yUnits == WorldWind.OFFSET_FRACTION) {    y=height * this.y;  } else   if (this.yUnits == WorldWind.OFFSET_INSET_PIXELS) {    y=height - this.y;  } else {    y=this.y;  }  return result.set(x,y);}  }
class C{  public boolean hasPet(){  if (rpObject == null) {    return false;  }  return rpObject.has("pet");}  }
class C{  public void start(@NonNull Context context,@NonNull android.support.v4.app.Fragment fragment,int requestCode){  if (PermissionsUtils.checkReadStoragePermission(fragment.getActivity())) {    fragment.startActivityForResult(getIntent(context),requestCode);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:00:49.163 -0500",hash_original_method="1616136BE44E483876717F8A446FD8E6",hash_generated_method="5C21F38AD3AF8C855A3835FBFBE5B603") public void skippedEntity(String name) throws SAXException {}  }
class C{  @Override protected boolean hasUnderflow(N node){  if (node.isLeaf()) {    return node.getNumEntries() < leafMinimum;  } else {    return node.getNumEntries() < dirMinimum;  }}  }
class C{  public p(Element value,String align){  addElement(value);  setAlign(align);}  }
class C{  public void fling(float velocityAngle){  mMode=FLING_MODE;  mFinished=false;  float velocity=velocityAngle;  mVelocity=velocity;  mDuration=(int)(1000.0f * Math.sqrt(2.0f * mCoeffVelocity * Math.abs(velocity) / mDeceleration));  mStartTime=AnimationUtils.currentAnimationTimeMillis();}  }
class C{  public void stop(){  isRotating=false;}  }
class C{  public SquidViewHolder(View itemView,T item){  super(itemView);  this.item=item;}  }
class C{  private void fillLocations(Location... locations){  assertTrue(locations.length < 90);  for (int i=0; i < locations.length; i++) {    Location location=locations[i];    location.setLatitude(i + 1);    location.setLongitude(i + 1);    location.setTime(i + 1000);  }}  }
class C{  public VOSubscriptionDetails modifySubscription(VOSubscription voSubscription,List<VOParameter> parameters) throws Exception {  VOSubscriptionDetails subDetails=subscriptionService.modifySubscription(voSubscription,parameters,new ArrayList<VOUda>());  return subDetails;}  }
class C{  public CF1(int numberOfVariables){  super(numberOfVariables,2,1);}  }
class C{  private void requestStartPlayback(){  if (!mCommandsHandler.hasMessages(CommandHandler.MSG_START_PLAYBACK)) {    mCommandsHandler.sendEmptyMessage(CommandHandler.MSG_START_PLAYBACK);  }}  }
class C{  private static Mode decodeAsciiSegment(BitSource bits,StringBuilder result,StringBuilder resultTrailer) throws FormatException {  boolean upperShift=false;  do {    int oneByte=bits.readBits(8);    if (oneByte == 0) {      throw FormatException.getFormatInstance();    } else     if (oneByte <= 128) {      if (upperShift) {        oneByte+=128;      }      result.append((char)(oneByte - 1));      return Mode.ASCII_ENCODE;    } else     if (oneByte == 129) {      return Mode.PAD_ENCODE;    } else     if (oneByte <= 229) {      int value=oneByte - 130;      if (value < 10) {        result.append('0');      }      result.append(value);    } else     if (oneByte == 230) {      return Mode.C40_ENCODE;    } else     if (oneByte == 231) {      return Mode.BASE256_ENCODE;    } else     if (oneByte == 232) {      result.append((char)29);    } else     if (oneByte == 233 || oneByte == 234) {    } else     if (oneByte == 235) {      upperShift=true;    } else     if (oneByte == 236) {      result.append("[)>\u001E05\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 237) {      result.append("[)>\u001E06\u001D");      resultTrailer.insert(0,"\u001E\u0004");    } else     if (oneByte == 238) {      return Mode.ANSIX12_ENCODE;    } else     if (oneByte == 239) {      return Mode.TEXT_ENCODE;    } else     if (oneByte == 240) {      return Mode.EDIFACT_ENCODE;    } else     if (oneByte == 241) {    } else     if (oneByte >= 242) {      if (oneByte != 254 || bits.available() != 0) {        throw FormatException.getFormatInstance();      }    }  } while (bits.available() > 0);  return Mode.ASCII_ENCODE;}  }
class C{  public void sendRegistrationId() throws AndroidAgentException {  DeviceInfo deviceInfo=new DeviceInfo(context);  DeviceInfoPayload deviceInfoPayload=new DeviceInfoPayload(context);  deviceInfoPayload.build();  String replyPayload=deviceInfoPayload.getDeviceInfoPayload();  String ipSaved=Constants.DEFAULT_HOST;  String prefIP=Preference.getString(context,Constants.PreferenceFlag.IP);  if (prefIP != null) {    ipSaved=prefIP;  }  if (ipSaved != null && !ipSaved.isEmpty()) {    ServerConfig utils=new ServerConfig();    utils.setServerIP(ipSaved);    String url=utils.getAPIServerURL(context) + Constants.DEVICE_ENDPOINT + deviceInfo.getDeviceId();    CommonUtils.callSecuredAPI(context,url,org.wso2.emm.agent.proxy.utils.Constants.HTTP_METHODS.PUT,replyPayload,RegistrationActivity.this,Constants.GCM_REGISTRATION_ID_SEND_CODE);  } else {    Log.e(TAG,"There is no valid IP to contact the server");  }}  }
class C{  public void disposeAll(){  Layer[] toDispose=children.toArray(new Layer[children.size()]);  removeAll();  for (  Layer child : toDispose)   child.close();}  }
class C{  public static void init(Context context){  if (cameraManager == null) {    cameraManager=new CameraManager(context);  }}  }
class C{  private static boolean didNullKeysChange(ArrayList<OneRowChange.ColumnVal> currentKeyValues,ArrayList<OneRowChange.ColumnVal> previousKeyValues){  for (int i=0; i < currentKeyValues.size(); i++) {    if (previousKeyValues.get(i).getValue() == null || currentKeyValues.get(i).getValue() == null)     if (!(previousKeyValues.get(i).getValue() == null && currentKeyValues.get(i).getValue() == null))     return true;  }  return false;}  }
class C{  public static int hashCode(long[] x){  long hash=0x76543210L;  for (int i=0; i < x.length; ) {    hash^=x[i] * ++i;  }  return (int)((hash >> 32) ^ hash);}  }
class C{  private ArgumentValue makeMethodReceiver(PTAMethodInformation method){  if (!method.hasReceiver())   return null;  boolean allVAResults=true;  List<ConcreteArgumentValue> vaResults=new LinkedList<ConcreteArgumentValue>();  for (  IAllocNode node : method.getReceiverPTSet()) {    if (ValueAnalysis.v().hasResult(node)) {      ValueAnalysisValue vav=new ValueAnalysisValue(ValueAnalysis.v().getResult(node));      vaResults.add(vav);    } else {      allVAResults=false;      break;    }  }  if (allVAResults && method.getReceiverPTSet().size() > 0) {    ConcreteListArgumentValue clrv=new ConcreteListArgumentValue(method.getReceiverType());    for (    ConcreteArgumentValue s : vaResults)     clrv.add(s);    return clrv;  } else {    return new TypeValue(method.getReceiverType());  }}  }
class C{  private void addParentEntry(CacheDataPage parentDataPage,CacheDataPage childDataPage) throws IOException {  DataPageExtra childExtra=childDataPage._extra;  updateParentEntry(parentDataPage,childDataPage,null,childExtra._entryView.getLast(),UpdateType.ADD);}  }
class C{  public Builder screenManager(ScreenManager screenManager){  mScreenManager=screenManager;  return this;}  }
class C{  @Override public String toString(){  String ivString=Base64.encodeToString(iv,BASE64_FLAGS);  String cipherTextString=Base64.encodeToString(cipherText,BASE64_FLAGS);  String macString=Base64.encodeToString(mac,BASE64_FLAGS);  return String.format(ivString + ":" + macString+ ":"+ cipherTextString);}  }
class C{  private void pop(final String desc){  char c=desc.charAt(0);  if (c == '(') {    pop((Type.getArgumentsAndReturnSizes(desc) >> 2) - 1);  } else   if (c == 'J' || c == 'D') {    pop(2);  } else {    pop(1);  }}  }
class C{  public void addStdFeatures(){  SVGFeatureStrings.addSupportedFeatureStrings(FEATURES);}  }
class C{  private SimplePanel createIconWidget(){  SimplePanel iconWrapper=new SimplePanel();  iconWrapper.setStyleName(resources.notificationCss().notificationIconWrapper());  iconWrapper.ensureDebugId(ICON_DBG_ID + notification.getId());  return iconWrapper;}  }
class C{  public static boolean canConvert(Object fromObj,Class<?> to){  int weight=getConversionWeight(fromObj,to);  return (weight < CONVERSION_NONE);}  }
class C{  public boolean addDirectedEdge(Node node1,Node node2){  int i=nodesHash.get(node1);  int j=nodesHash.get(node2);  if (graphMatrix[i][j] != 0) {    return false;  }  graphMatrix[j][i]=1;  graphMatrix[i][j]=2;  numEdges++;  return true;}  }
class C{  private boolean policyHasVolume(AutoTieringPolicy policyObject){  if (policyObject.getPools() != null) {    for (    String pool : policyObject.getPools()) {      URIQueryResultList volumeList=new URIQueryResultList();      _dbClient.queryByConstraint(ContainmentConstraint.Factory.getStoragePoolVolumeConstraint(URI.create(pool)),volumeList);      Iterator<Volume> volumeIterator=_dbClient.queryIterativeObjects(Volume.class,volumeList,true);      if (volumeIterator.hasNext()) {        return true;      }    }  }  return false;}  }
class C{  protected void skip(){  do {    readBlock();  } while ((blockSize > 0) && !err());}  }
class C{  public HtmlDocumentBuilder(){  this(XmlViolationPolicy.ALTER_INFOSET);}  }
class C{  public void append(FitsSubString stringValue){  stringValue.appendTo(this.buffer);  this.charCount+=stringValue.length();}  }
class C{  public static boolean checkContentCanBePulledDown(PtrFrameLayout frame,View content,View header){  return !canChildScrollUp(content);}  }
class C{  private int[] readLengthAndOffset(int objInfo,int offset){  int lengthValue=objInfo;  int offsetValue=1;  if (objInfo == 0xF) {    int int_type=bytes[offset + 1];    int intType=(int_type & 0xF0) >> 4;    if (intType != 0x1) {      System.err.println("BinaryPropertyListParser: Length integer has an unexpected type" + intType + ". Attempting to parse anyway...");    }    int intInfo=int_type & 0x0F;    int intLength=(int)Math.pow(2,intInfo);    offsetValue=2 + intLength;    if (intLength < 3) {      lengthValue=(int)parseUnsignedInt(bytes,offset + 2,offset + 2 + intLength);    } else {      lengthValue=new BigInteger(copyOfRange(bytes,offset + 2,offset + 2 + intLength)).intValue();    }  }  return new int[]{lengthValue,offsetValue};}  }
class C{  public boolean isAcquired(){  return (_processLock != null) && _processLock.isAcquiredInThisProcess();}  }
class C{  public void evalRoundRobinPopChunk(final EvolutionState state,int from,int numinds,int threadnum,final Individual[] individuals,int subpop,final GroupedProblemForm prob){  Individual[] competition=new Individual[2];  int[] subpops=new int[]{subpop,subpop};  boolean[] updates=new boolean[2];  updates[0]=updates[1]=true;  int upperBound=from + numinds;  for (int x=from; x < upperBound; x++)   for (int y=x + 1; y < individuals.length; y++) {    competition[0]=individuals[x];    competition[1]=individuals[y];    prob.evaluate(state,competition,updates,false,subpops,0);  }}  }
class C{  public void testNextCMR2() throws Exception {  for (int common=0; common < commonTerms.length; common++) {    for (int medium=0; medium < mediumTerms.length; medium++) {      for (int rare=0; rare < rareTerms.length; rare++) {        Scorer expected=scorer(new String[]{commonTerms[common],mediumTerms[medium],rareTerms[rare]},2,Mode.DOC_VALUES);        Scorer actual=scorer(new String[]{commonTerms[common],mediumTerms[medium],rareTerms[rare]},2,Mode.SCORER);        assertNext(expected,actual);        expected=scorer(new String[]{commonTerms[common],mediumTerms[medium],rareTerms[rare]},2,Mode.DOC_VALUES);        actual=scorer(new String[]{commonTerms[common],mediumTerms[medium],rareTerms[rare]},2,Mode.BULK_SCORER);        assertNext(expected,actual);      }    }  }}  }
class C{  public void run(Integer... expectedCodes){  for (  ICalVersion version : versions) {    List<Warning> warnings=property.validate(components,version);    boolean passed=checkCodes(warnings,expectedCodes);    if (!passed) {      fail(version.name() + ": Expected codes were " + Arrays.toString(expectedCodes)+ " but were actually:\n"+ warnings);    }  }}  }
class C{  @Override public String toString(){  String str="";  for (  BasicEffect e : subeffects) {    str+=e.toString() + " ^ ";  }  return (!subeffects.isEmpty()) ? str.substring(0,str.length() - 3) : "Void";}  }
class C{  public final IOContainer run(final IOContainer input) throws OperatorException {  return run(input,LogService.UNKNOWN_LEVEL);}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  if (serialVersionOnStream < 1) {    monetarySeparator=decimalSeparator;    exponential='E';  }  if (serialVersionOnStream < 2) {    locale=Locale.ROOT;  }  if (serialVersionOnStream < 3) {    exponentialSeparator=Character.toString(exponential);  }  serialVersionOnStream=currentSerialVersion;  if (intlCurrencySymbol != null) {    try {      currency=Currency.getInstance(intlCurrencySymbol);    } catch (    IllegalArgumentException e) {    }  }}  }
class C{  @Override public void buildClassifier(Instances data) throws Exception {  m_train=new Instances(data);  m_numClasses=m_train.numClasses();  m_numericData=getNumericData(m_train);  m_regressions=initRegressions();  m_numRegressions=0;  if (m_fixedNumIterations > 0) {    performBoosting(m_fixedNumIterations);  } else   if (m_useAIC) {    performBoostingInfCriterion();  } else   if (m_useCrossValidation) {    performBoostingCV();  } else {    performBoosting();  }  cleanup();}  }
class C{  public static NumberVectorAdapter numberVectorAdapter(NumberVector prototype){  return NUMBERVECTORADAPTER;}  }
class C{  public void writeTo(OutputStream out) throws IOException {  out.write(buf,0,cnt);}  }
class C{  public Iterator<Fact> resultFactIterator(){  return resultFactMap.values().iterator();}  }
class C{  public DTNHost createHost(Coord loc){  return this.createHost(loc,null);}  }
class C{  public static int[][] loadPNGFile(InputStream str) throws IOException {  BufferedImage image=javax.imageio.ImageIO.read(str);  int type=image.getType();  if (type == BufferedImage.TYPE_BYTE_BINARY || type == BufferedImage.TYPE_BYTE_GRAY) {    int w=image.getWidth();    int h=image.getHeight();    int[][] result=new int[w][h];    for (int i=0; i < w; i++)     for (int j=0; j < h; j++)     result[i][j]=(image.getRGB(i,j) & 0xFF);    return result;  } else   if (type == BufferedImage.TYPE_BYTE_INDEXED) {    Raster raster=image.getRaster();    if (raster.getTransferType() != DataBuffer.TYPE_BYTE)     throw new IOException("Input Stream must contain an image with byte data if indexed.");    byte[] pixel=new byte[1];    int w=image.getWidth();    int h=image.getHeight();    int[][] result=new int[w][h];    for (int i=0; i < w; i++)     for (int j=0; j < h; j++) {      result[i][j]=((byte[])(raster.getDataElements(i,j,pixel)))[0];      if (result[i][j] < 0)       result[i][j]+=256;    }    return result;  } else   throw new IOException("Input Stream must contain a binary, byte-sized grayscale, or byte-sized indexed color scheme: " + image);}  }
class C{  public SIRModel(Parameter reproductiveNumberParameter,Parameter recoveryRateParameter,Parameter hostPopulationSizeParameter,Parameter proportionsParameter,Type units){  this(SIRModelParser.SIR_MODEL,reproductiveNumberParameter,recoveryRateParameter,hostPopulationSizeParameter,proportionsParameter,units);}  }
class C{  public MulticastReceiverConfigurationImpl(String group,int port) throws UnknownHostException {  this(InetAddress.getByName(group),port,640);}  }
class C{  public void visit(String name,Object value){  if (av != null) {    av.visit(name,value);  }}  }
class C{  public Annotation(String type,boolean isPersistent,String text){  this.type=type;  this.isPersistent=isPersistent;  this.text=text;}  }
class C{  public void start(){  if (mIsRunning.compareAndSet(false,true)) {    Thread runnerThread=new Thread(this,DirectoryWatchService.class.getSimpleName());    runnerThread.start();  }}  }
class C{  private Hop simplifyDotProductSum(Hop parent,Hop hi,int pos) throws HopsException {  if (hi instanceof AggUnaryOp && ((AggUnaryOp)hi).getOp() == AggOp.SUM && ((AggUnaryOp)hi).getDirection() == Direction.RowCol && hi.getInput().get(0).getDim2() == 1) {    Hop baLeft=null;    Hop baRight=null;    Hop hi2=hi.getInput().get(0);    if (hi2 instanceof BinaryOp && ((BinaryOp)hi2).getOp() == OpOp2.POW && hi2.getInput().get(1) instanceof LiteralOp && HopRewriteUtils.getDoubleValue((LiteralOp)hi2.getInput().get(1)) == 2 && hi2.getParent().size() == 1) {      Hop input=hi2.getInput().get(0);      baLeft=input;      baRight=input;    } else     if (hi2 instanceof BinaryOp && ((BinaryOp)hi2).getOp() == OpOp2.MULT && hi2.getInput().get(0).getDim2() == 1 && hi2.getInput().get(1).getDim2() == 1 && hi2.getParent().size() == 1 && !(hi2.getInput().get(0) instanceof BinaryOp && ((BinaryOp)hi2.getInput().get(0)).getOp() == OpOp2.MULT) && !(hi2.getInput().get(1) instanceof BinaryOp && ((BinaryOp)hi2.getInput().get(1)).getOp() == OpOp2.MULT)) {      baLeft=hi2.getInput().get(0);      baRight=hi2.getInput().get(1);    }    if (baLeft != null && baRight != null) {      HopRewriteUtils.removeChildReference(parent,hi);      ReorgOp trans=HopRewriteUtils.createTranspose(baLeft);      AggBinaryOp mmult=HopRewriteUtils.createMatrixMultiply(trans,baRight);      UnaryOp cast=new UnaryOp(baLeft.getName(),DataType.SCALAR,ValueType.DOUBLE,OpOp1.CAST_AS_SCALAR,mmult);      HopRewriteUtils.setOutputParameters(cast,0,0,0,0,-1);      HopRewriteUtils.addChildReference(parent,cast,pos);      parent.refreshSizeInformation();      if (hi.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(hi);      if (hi2.getParent().isEmpty())       HopRewriteUtils.removeAllChildReferences(hi2);      hi=cast;      LOG.debug("Applied simplifyDotProductSum.");    }  }  return hi;}  }
class C{  public Data(Option option){  this.option=option;}  }
class C{  @Override public int describeContents(){  return 0;}  }
class C{  public void shutdownConnection(MqttToken token,MqttException reason){  final String methodName="shutdownConnection";  boolean wasConnected;  MqttToken endToken=null;synchronized (conLock) {    if (stoppingComms || closePending || isClosed()) {      return;    }    stoppingComms=true;    log.fine(CLASS_NAME,methodName,"216");    wasConnected=(isConnected() || isDisconnecting());    conState=DISCONNECTING;  }  if (token != null && !token.isComplete()) {    token.internalTok.setException(reason);  }  if (callback != null) {    callback.stop();  }  try {    if (networkModules != null) {      NetworkModule networkModule=networkModules[networkModuleIndex];      if (networkModule != null) {        networkModule.stop();      }    }  } catch (  Exception ioe) {  }  if (receiver != null) {    receiver.stop();  }  tokenStore.quiesce(new MqttException(MqttException.REASON_CODE_CLIENT_DISCONNECTING));  endToken=handleOldTokens(token,reason);  try {    clientState.disconnected(reason);    if (clientState.getCleanSession())     callback.removeMessageListeners();  } catch (  Exception ex) {  }  if (sender != null) {    sender.stop();  }  if (pingSender != null) {    pingSender.stop();  }  try {    if (disconnectedMessageBuffer == null && persistence != null) {      persistence.close();    }  } catch (  Exception ex) {  }synchronized (conLock) {    log.fine(CLASS_NAME,methodName,"217");    conState=DISCONNECTED;    stoppingComms=false;  }  if (endToken != null & callback != null) {    callback.asyncOperationComplete(endToken);  }  if (wasConnected && callback != null) {    callback.connectionLost(reason);  }synchronized (conLock) {    if (closePending) {      try {        close();      } catch (      Exception e) {      }    }  }}  }
class C{  protected void init(){  try {    Connection conn=null;    Trx trx=p_vo.getTrxName() == null ? null : Trx.get(p_vo.getTrxName(),false);    if (trx != null) {      conn=trx.getConnection();    } else {      if (p_vo.getResultSetConcurrency() == ResultSet.CONCUR_UPDATABLE)       m_conn=DB.getConnectionRW(); else       m_conn=DB.getConnectionRO();      conn=m_conn;    }    if (conn == null)     throw new DBException("No Connection");    p_stmt=conn.createStatement(p_vo.getResultSetType(),p_vo.getResultSetConcurrency());  } catch (  SQLException e) {    log.log(Level.SEVERE,"CStatement",e);    throw new DBException(e);  }}  }
class C{  private Base64(){}  }
class C{  public static void dump(String context,KeyStore keyStore,char[] keyPassword) throws KeyStoreException, NoSuchAlgorithmException {  PrintStream out=System.out;  out.println("context=" + context);  out.println("\tkeyStore=" + keyStore);  out.println("\tkeyStore.type=" + keyStore.getType());  out.println("\tkeyStore.provider=" + keyStore.getProvider());  out.println("\tkeyPassword=" + ((keyPassword == null) ? null : new String(keyPassword)));  out.println("\tsize=" + keyStore.size());  for (  String alias : Collections.list(keyStore.aliases())) {    out.println("alias=" + alias);    out.println("\tcreationDate=" + keyStore.getCreationDate(alias));    if (keyStore.isCertificateEntry(alias)) {      out.println("\tcertificate:");      out.println("==========================================");      out.println(keyStore.getCertificate(alias));      out.println("==========================================");      continue;    }    if (keyStore.isKeyEntry(alias)) {      out.println("\tkey:");      out.println("==========================================");      String key;      try {        key=("Key retrieved using password\n" + keyStore.getKey(alias,keyPassword));      } catch (      UnrecoverableKeyException e1) {        try {          key=("Key retrieved without password\n" + keyStore.getKey(alias,null));        } catch (        UnrecoverableKeyException e2) {          key="Key could not be retrieved";        }      }      out.println(key);      out.println("==========================================");      Certificate[] chain=keyStore.getCertificateChain(alias);      if (chain == null) {        out.println("No certificate chain associated with key");        out.println("==========================================");      } else {        for (int i=0; i < chain.length; i++) {          out.println("Certificate chain element #" + i);          out.println(chain[i]);          out.println("==========================================");        }      }      continue;    }    out.println("\tunknown entry type");  }}  }
class C{  public GrayPaintScale(double lowerBound,double upperBound){  this(lowerBound,upperBound,255);}  }
class C{  public void addImplicitCollection(final Class<?> ownerType,final String fieldName,final String itemFieldName,final Class<?> itemType){  addImplicitMap(ownerType,fieldName,itemFieldName,itemType,null);}  }
class C{  private static boolean dataSetsAreOk(){  if (fileList1 != null && fileList2 != null && (fileList1.length == fileList2.length)) {    for (    File file1 : fileList1) {      String fileName1=file1.getName();      boolean foundRelatedFile=false;      for (      File file2 : fileList2) {        String fileName2=file2.getName();        if (fileName1.equalsIgnoreCase(fileName2)) {          foundRelatedFile=true;          break;        }      }      if (!foundRelatedFile) {        System.err.println("Didn't found related file for : " + fileName1);        return false;      }    }    return true;  }  System.err.println("Number of datasets not equal or fileList variables is null.");  return false;}  }
class C{  public static WrapperQueryBuilder wrapperQuery(byte[] source,int offset,int length){  return new WrapperQueryBuilder(source,offset,length);}  }
class C{  public String foldTipText(){  return "The fold which is selected.";}  }
class C{  public RawData(byte[] data,InetAddress address,int port,Principal clientIdentity,boolean multicast){  this(data,new InetSocketAddress(address,port),clientIdentity,multicast);}  }
class C{  private void recalcLayout(){  if (mCanvasWidth <= 0 || mCanvasHeight <= 0) {    return;  }  float offsetLineWidth=getWidestLine() / 2;  float offsetX=0;  float offsetY=0;  if (mCanvasWidth != mCanvasHeight) {    if (mCanvasWidth > mCanvasHeight) {      offsetX=(mCanvasWidth - mCanvasHeight) / 2;    } else {      offsetY=(mCanvasHeight - mCanvasWidth) / 2;    }  }  if (mVertGravity == VertGravity.GRAVITY_VERTICAL_FILL) {    offsetY=0;  }  if (mHorizGravity == HorizGravity.GRAVITY_HORIZONTAL_FILL) {    offsetX=0;  }  float paddingLeft=offsetX + getPaddingLeft();  float paddingTop=offsetY + getPaddingTop();  float paddingRight=offsetX + getPaddingRight();  float paddingBottom=offsetY + getPaddingBottom();  mArcBounds=new RectF(offsetLineWidth + paddingLeft,offsetLineWidth + paddingTop,mCanvasWidth - offsetLineWidth - paddingRight,mCanvasHeight - offsetLineWidth - paddingBottom);  if (mVertGravity == VertGravity.GRAVITY_VERTICAL_TOP) {    mArcBounds.offset(0,-offsetY);  } else   if (mVertGravity == VertGravity.GRAVITY_VERTICAL_BOTTOM) {    mArcBounds.offset(0,offsetY);  }  if (mHorizGravity == HorizGravity.GRAVITY_HORIZONTAL_LEFT) {    mArcBounds.offset(-offsetX,0);  } else   if (mHorizGravity == HorizGravity.GRAVITY_HORIZONTAL_RIGHT) {    mArcBounds.offset(offsetX,0);  }}  }
class C{  @ObjectiveCName("completeWebActionWithHash:withUrl:") public Command<Boolean> completeWebAction(final String actionHash,final String url){  return modules.getExternalModule().completeWebAction(actionHash,url);}  }
class C{  static void ensureChangeOnMainThread(){  if (Thread.currentThread() != Looper.getMainLooper().getThread()) {    throw new IllegalStateException("You must only modify the ObservableList on the main thread.");  }}  }
class C{  public PacMan(long seed){  super(seed);}  }
class C{  public static String readFully(Reader reader) throws IOException {  try {    StringWriter writer=new StringWriter();    char[] buffer=new char[1024];    int count;    while ((count=reader.read(buffer)) != -1) {      writer.write(buffer,0,count);    }    return writer.toString();  }  finally {    reader.close();  }}  }
class C{  @Override public boolean eIsSet(int featureID){switch (featureID) {case DomPackage.CONTENT_NODE__OWNER:    return basicGetOwner() != null;}return super.eIsSet(featureID);}  }
class C{  public int removeOnlyMessageSignature(Document document){  try {    if (Thread.currentThread().getContextClassLoader() == null) {      Thread.currentThread().setContextClassLoader(getClass().getClassLoader());    }    setIDAttribute(document);    XPath xpath=XPathFactory.newInstance().newXPath();    XPathExpression expr=xpath.compile("//*[local-name()='Response']/*[local-name()='Signature']");    NodeList nl=(NodeList)expr.evaluate(document,XPathConstants.NODESET);    int nrSig=nl.getLength();    for (int i=0; i < nrSig; i++) {      Node parent=nl.item(0).getParentNode();      parent.removeChild(nl.item(0));    }    removeEmptyTags(document);    document.normalize();    return nrSig;  } catch (  XPathExpressionException e) {    e.printStackTrace();  }  return 0;}  }
class C{  private void changeServer(final HttpServletRequest req,final HttpServletResponse resp) throws IOException, QueryResultHandlerException {  String server=req.getParameter(SERVER_COOKIE);  if (server == null) {    final TupleResultBuilder builder=getTupleResultBuilder(req,resp,resp.getOutputStream());    builder.transform(getTransformationUrl(req),"server.xsl");    builder.start("server");    String currentServer=this.cookies.getCookie(req,resp,SERVER_COOKIE);    if (currentServer == null) {      currentServer=getDefaultServer(req);    }    builder.result(currentServer);    builder.end();    return;  }  server=server.trim();  if (!this.serverValidator.isValidServer(server)) {    final TupleResultBuilder builder=getTupleResultBuilder(req,resp,resp.getOutputStream());    builder.transform(getTransformationUrl(req),"server.xsl");    builder.start("error-message","server");    builder.result("Invalid Server URL",server);    builder.end();    return;  }  this.cookies.addNewCookie(req,resp,SERVER_COOKIE,server);  final String user=getOptionalParameter(req,SERVER_USER);  this.cookies.addNewCookie(req,resp,SERVER_USER,user);  final String password=getOptionalParameter(req,SERVER_PASSWORD);  this.cookies.addNewCookie(req,resp,SERVER_PASSWORD,password);  final StringBuilder uri=new StringBuilder(req.getRequestURI());  uri.setLength(uri.length() - req.getPathInfo().length());  resetCache();  resp.sendRedirect(uri.toString());}  }
class C{  public List<String> names(){  return Collections.unmodifiableList(names);}  }
class C{  private void failTask(Throwable e){  ServiceUtils.logSevere(this,e);  this.sendSelfPatch(buildPatch(TaskState.TaskStage.FAILED,null,e));}  }
class C{  public static ProductEditFragment newInstance(@SuppressWarnings("TypeMayBeWeakened") Product product){  ProductEditFragment productEditFragment=new ProductEditFragment();  Bundle args=new Bundle();  args.putSerializable(KEY_PRODUCT,product);  productEditFragment.setArguments(args);  return productEditFragment;}  }
class C{  public void addComposite(TransformTreeNode node){  parts.add(node);}  }
class C{  public int cardinality(){  return toBitVector().cardinality();}  }
class C{  public PathAnimation(View view){  this.view=view;  points=null;  anchorPoint=ANCHOR_CENTER;  interpolator=new AccelerateDecelerateInterpolator();  duration=DURATION_LONG;  listener=null;}  }
class C{  public Cipher createCipher(final Account other,final boolean encrypt){  if (!this.hasPrivateKey() && !other.hasPrivateKey() || !this.hasPublicKey() || !other.hasPublicKey()) {    throw new CryptoException("in order to create a cipher, at least one account must have a private key and both accounts must have a public key");  }  final KeyPair keyPairWithPrivateKey=this.hasPrivateKey() ? this.keyPair : other.keyPair;  final KeyPair otherKeyPair=!this.hasPrivateKey() ? this.keyPair : other.keyPair;  return encrypt ? new Cipher(keyPairWithPrivateKey,otherKeyPair) : new Cipher(otherKeyPair,keyPairWithPrivateKey);}  }
class C{  public static Long convertBytesToKBytes(String value){  if (null == value) {    return 0L;  }  BigDecimal val=new BigDecimal(value);  BigDecimal kbconverter=new BigDecimal(KILOBYTECONVERTERVALUE);  BigDecimal result=val.divide(kbconverter,RoundingMode.CEILING);  if (result.longValue() == 0) {    return 1L;  }  return result.longValue();}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  private static <A extends Annotation>boolean containerBeforeContainee(Map<Class<? extends Annotation>,Annotation> annotations,Class<A> annoClass){  Class<? extends Annotation> containerClass=annoClass.getDeclaredAnnotation(Repeatable.class).value();  for (  Class<? extends Annotation> c : annotations.keySet()) {    if (c == containerClass)     return true;    if (c == annoClass)     return false;  }  return false;}  }
class C{  void updateChildren(DocumentEvent e,Shape a){  Element elem=getElement();  DocumentEvent.ElementChange ec=e.getChange(elem);  if (ec != null) {    Element[] removedElems=ec.getChildrenRemoved();    Element[] addedElems=ec.getChildrenAdded();    View[] added=new View[addedElems.length];    for (int i=0; i < addedElems.length; i++) {      added[i]=new WrappedLine(addedElems[i]);    }    replace(ec.getIndex(),removedElems.length,added);    if (a != null) {      preferenceChanged(null,true,true);      getContainer().repaint();    }  }  updateMetrics();}  }
class C{  public void testBug65871() throws Exception {  createTable("testbug65871_foreign","(cpd_foreign_1_id int(8) not null, cpd_foreign_2_id int(8) not null," + "primary key (cpd_foreign_1_id, cpd_foreign_2_id)) ","InnoDB");  Connection pedanticConn=null;  Connection pedanticConn_IS=null;  Connection nonPedanticConn=null;  Connection nonPedanticConn_IS=null;  try {    Properties props=new Properties();    props.setProperty("sessionVariables","sql_mode=ansi");    nonPedanticConn=getConnectionWithProps(props);    props.setProperty("useInformationSchema","true");    nonPedanticConn_IS=getConnectionWithProps(props);    props.setProperty("pedantic","true");    pedanticConn_IS=getConnectionWithProps(props);    props.setProperty("useInformationSchema","false");    pedanticConn=getConnectionWithProps(props);    System.out.println("1. Non-pedantic, without I_S.");    testBug65871_testCatalogs(nonPedanticConn);    System.out.println("2. Pedantic, without I_S.");    testBug65871_testCatalogs(pedanticConn);    System.out.println("3. Non-pedantic, with I_S.");    testBug65871_testCatalogs(nonPedanticConn_IS);    System.out.println("4. Pedantic, with I_S.");    testBug65871_testCatalogs(pedanticConn_IS);  }  finally {    if (pedanticConn != null) {      pedanticConn.close();    }    if (nonPedanticConn != null) {      nonPedanticConn.close();    }  }}  }
class C{  protected void updateRequest(SnmpVarBind var,int pos){  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,SnmpSubRequestHandler.class.getName(),"updateRequest","Copy :" + var);  }  int size=varBind.size();  translation[size]=pos;  final SnmpVarBind newVarBind=new SnmpVarBind(var.oid,var.value);  if (SNMP_ADAPTOR_LOGGER.isLoggable(Level.FINEST)) {    SNMP_ADAPTOR_LOGGER.logp(Level.FINEST,SnmpSubRequestHandler.class.getName(),"updateRequest","Copied :" + newVarBind);  }  varBind.addElement(newVarBind);}  }
class C{  public static void SANYmain(String args[]){  int i;  for (i=0; (i < args.length) && (args[i].charAt(0) == '-'); i++) {    if (args[i].equals("-S") || args[i].equals("-s"))     doSemanticAnalysis=!doSemanticAnalysis; else     if (args[i].equals("-L") || args[i].equals("-l"))     doLevelChecking=!doLevelChecking; else     if (args[i].equals("-D") || args[i].equals("-d"))     doDebugging=!doDebugging; else     if (args[i].equals("-STAT") || args[i].equals("-stat"))     doStats=!doStats; else {      ToolIO.out.println("Illegal switch: " + args[i]);      System.exit(-1);    }  }  for (; i < args.length; i++) {    ToolIO.out.println("\n****** SANY2 " + version + "\n");    SpecObj spec=new SpecObj(args[i],null);    if (FileUtil.createNamedInputStream(args[i],spec.getResolver()) != null) {      try {        frontEndMain(spec,args[i],ToolIO.out);      } catch (      FrontEndException fe) {        fe.printStackTrace();        ToolIO.out.println(fe);        return;      }      if (doStats)       frontEndStatistics(spec);      if (doDebugging) {        Explorer explorer=new Explorer(spec.getExternalModuleTable());        try {          explorer.main();        } catch (        ExplorerQuitException e) {        }      }    } else {      ToolIO.out.println("Cannot find the specified file " + args[i] + ".");    }  }}  }
class C{  public BinlogReader(String directory,String baseName,int bufferSize){  this(0,null,directory,baseName,bufferSize);}  }
class C{  public Blade container(Ioc ioc){  Assert.notNull(ioc);  this.ioc=ioc;  this.configLoader.setIoc(ioc);  return this;}  }
class C{  static float max(final float a,final float b){  if (a < b) {    return b;  } else {    return a;  }}  }
class C{  public StringDecoder(String s){  string=s;  length=s.length();}  }
class C{  public boolean isGeneric(){  EList<TypeVariable> _typeVars=this.getTypeVars();  boolean _isEmpty=_typeVars.isEmpty();  return (!_isEmpty);}  }
class C{  public static byte[] encodeBase64(byte[] bytes){  return encode(bytes);}  }
class C{  public void add32bit(int value){  add(value >> 24,value >> 16,value >> 8,value);}  }
class C{  public Boolean isLogConnection(){  return logConnection;}  }
class C{  public static String toTypeString(Object[] arguments){  return toTypeString(arguments,-1);}  }
class C{  protected void initLaf(UIManager uim){  super.initLaf(uim);  setTransitionOutAnimator(uim.getLookAndFeel().getDefaultDialogTransitionOut());  setTransitionInAnimator(uim.getLookAndFeel().getDefaultDialogTransitionIn());}  }
class C{  public static String centerJustify(String source,int length){  if (source.length() >= length) {    return source;  }  int leftLength=(length - source.length()) / 2;  int rightLength=length - (leftLength + source.length());  return StringUtils.spaces(leftLength) + source + StringUtils.spaces(rightLength);}  }
class C{  public int entryPoint(){  int pc=curCP();  alive=true;  pendingStackMap=needStackMap;  return pc;}  }
class C{  @SuppressWarnings("ForLoopReplaceableByForEach") void readFields(Object obj,OptimizedClassDescriptor.ClassFields fieldOffs) throws ClassNotFoundException, IOException {  for (int i=0; i < fieldOffs.size(); i++) {    OptimizedClassDescriptor.FieldInfo t=fieldOffs.get(i);switch ((t.type())) {case BYTE:      byte resByte=readByte();    if (t.field() != null)     setByte(obj,t.offset(),resByte);  break;case SHORT:short resShort=readShort();if (t.field() != null) setShort(obj,t.offset(),resShort);break;case INT:int resInt=readInt();if (t.field() != null) setInt(obj,t.offset(),resInt);break;case LONG:long resLong=readLong();if (t.field() != null) setLong(obj,t.offset(),resLong);break;case FLOAT:float resFloat=readFloat();if (t.field() != null) setFloat(obj,t.offset(),resFloat);break;case DOUBLE:double resDouble=readDouble();if (t.field() != null) setDouble(obj,t.offset(),resDouble);break;case CHAR:char resChar=readChar();if (t.field() != null) setChar(obj,t.offset(),resChar);break;case BOOLEAN:boolean resBoolean=readBoolean();if (t.field() != null) setBoolean(obj,t.offset(),resBoolean);break;case OTHER:Object resObject=readObject();if (t.field() != null) setObject(obj,t.offset(),resObject);}}}  }
class C{  public static int hashCode(char[] array){  int hash=0;  if (array != null) {    for (int i=0; (i < 4) && (i < array.length); i++) {      hash^=(0xFFFF & array[i]) << ((i % 2) << 4);    }  }  return hash;}  }
class C{  public void insert(EventPoint ep){  EventPoint oldOne=events.insert(ep,ep);  if (oldOne != null) {    ep.addUpperLineSegments(oldOne.upperEndpointSegments());  }}  }
class C{  default String renderModifiers(Generator gen,M model){  return gen.onEach(model.getModifiers()).collect(joinIfNotEmpty(SPACE,EMPTY,SPACE));}  }
class C{  public void select(Segment segment,boolean addToSelection){  if (segment.isNone()) {    return;  }  if (!addToSelection) {    deselectAllSegments();  }  if (segment.isUnpaired()) {    if (addToSelection) {      boolean allSegmentsSelected=true;      for (      Segment other : segments.getPairedSegments(segment)) {        if (!isSelected(other)) {          allSegmentsSelected=false;          break;        }      }      if (allSegmentsSelected) {        deselectSegment(segment);        return;      }    }    if (isSelected(segment)) {      deselectSegment(segment);    } else {      selectSegment(segment);    }  } else {    if (isSelected(segment)) {      deselectSegment(segment);    } else {      selectSegment(segment);    }  }}  }
class C{  public boolean withFloorPlan(float x,float y){  float[] goal=getMapCoordinateWithScreenCoordinate(x,y);  return goal[0] > 0 && goal[0] < mapOverlay.getFloorMap().getWidth() && goal[1] > 0 && goal[1] < mapOverlay.getFloorMap().getHeight();}  }
class C{  public boolean removeTriangles(List<Triangle> triangles){  return getTriangles().removeAll(triangles);}  }
class C{  public static byte min(byte[] array){  if (array == null) {    throw new IllegalArgumentException("The Array must not be null");  } else   if (array.length == 0) {    throw new IllegalArgumentException("Array cannot be empty.");  }  byte min=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  public InlineQueryResultVenue.InlineQueryResultVenueBuilder thumbUrl(URL thumbUrl){  this.thumb_url=thumbUrl;  return this;}  }
class C{  private boolean hasAllPermissionsGranted(){  for (  String permission : CAMERA_PERMISSIONS) {    if (ActivityCompat.checkSelfPermission(getActivity(),permission) != PackageManager.PERMISSION_GRANTED) {      return false;    }  }  return true;}  }
class C{  @Override public byte[] buffer(){  return _writeBuffer;}  }
class C{  public int toInt(){  return val;}  }
class C{  public void test_GET_accessPath_delete_all() throws Exception {  doInsertbyURL("POST",packagePath + "test_delete_by_access_path.ttl");  final long result=countResults(doGetWithAccessPath(null,null,null));  assertEquals(7,result);}  }
class C{  public Class toClass(CtClass ct,ClassLoader loader,ProtectionDomain domain) throws CannotCompileException {  try {    byte[] b=ct.toBytecode();    java.lang.reflect.Method method;    Object[] args;    if (domain == null) {      method=defineClass1;      args=new Object[]{ct.getName(),b,new Integer(0),new Integer(b.length)};    } else {      method=defineClass2;      args=new Object[]{ct.getName(),b,new Integer(0),new Integer(b.length),domain};    }    return (Class)toClass2(method,loader,args);  } catch (  RuntimeException e) {    throw e;  }catch (  java.lang.reflect.InvocationTargetException e) {    throw new CannotCompileException(e.getTargetException());  }catch (  Exception e) {    throw new CannotCompileException(e);  }}  }
class C{  @Override public void delete(final long addr){  if (writeCacheService != null) {    writeCacheService.clearWrite(addr,0);  }}  }
class C{  private void generateIntegrityKeyPair(boolean clientMode) throws UnsupportedEncodingException, IOException, NoSuchAlgorithmException {  byte[] cimagic=CLIENT_INT_MAGIC.getBytes(encoding);  byte[] simagic=SVR_INT_MAGIC.getBytes(encoding);  MessageDigest md5=MessageDigest.getInstance("MD5");  byte[] keyBuffer=new byte[H_A1.length + cimagic.length];  System.arraycopy(H_A1,0,keyBuffer,0,H_A1.length);  System.arraycopy(cimagic,0,keyBuffer,H_A1.length,cimagic.length);  md5.update(keyBuffer);  byte[] Kic=md5.digest();  System.arraycopy(simagic,0,keyBuffer,H_A1.length,simagic.length);  md5.update(keyBuffer);  byte[] Kis=md5.digest();  if (logger.isLoggable(Level.FINER)) {    traceOutput(DI_CLASS_NAME,"generateIntegrityKeyPair","DIGEST12:Kic: ",Kic);    traceOutput(DI_CLASS_NAME,"generateIntegrityKeyPair","DIGEST13:Kis: ",Kis);  }  if (clientMode) {    myKi=Kic;    peerKi=Kis;  } else {    myKi=Kis;    peerKi=Kic;  }}  }
class C{  public SnackbarBuilder snackbarCallback(SnackbarCallback snackbarCallback){  callbackBuilder.snackbarCallback(snackbarCallback);  return this;}  }
class C{  private SortedSet<String> solve(){  solve(0x0002004008010020L,0,0);  return solutions;}  }
class C{  private void paintEdge(Component c,Graphics g,ArrayList<ImageIcon> icons,int x,int y,int width,int height,boolean isLeftRight,ArrayList<Boolean> shouldTile,int numTiledIcons,int staticSpace){  g=g.create(x,y,width,height);  int tiledWidth=isLeftRight ? width : (int)((width - staticSpace + 0.0) / numTiledIcons + 0.5);  int tiledHeight=isLeftRight ? (int)((height - staticSpace + 0.0) / numTiledIcons + 0.5) : height;  x=0;  y=0;  for (int i=0; i < icons.size(); i++) {    ImageIcon icon=icons.get(i);    if (icon.getImageLoadStatus() != MediaTracker.COMPLETE) {      return;    }    if (shouldTile.get(i)) {      paintTiledIcon(c,g,icon,x,y,tiledWidth,tiledHeight);      if (isLeftRight) {        y+=tiledHeight;      } else {        x+=tiledWidth;      }    } else {      icons.get(i).paintIcon(c,g,x,y);      if (isLeftRight) {        y+=icon.getIconHeight();      } else {        x+=icon.getIconWidth();      }    }  }  g.dispose();}  }
class C{  public void dispose(){  if (image != null) {    image.dispose();  }  image=null;  super.dispose();}  }
class C{  public InsertIntoLatchSpin(InsertIntoLatchFactory factory){  this.factory=factory;  isCompleted=true;  earlier=null;  msecTimeout=0;}  }
class C{  private void changeAnnotationDocumentState(SourceDocument aSourceDocument,User aUser,AnnotationDocumentStateTransition aAnnotationDocumentStateTransition){  AnnotationDocument annotationDocument=repository.getAnnotationDocument(aSourceDocument,aUser);  annotationDocument.setState(AnnotationDocumentStateTransition.transition(aAnnotationDocumentStateTransition));  try {    repository.createAnnotationDocument(annotationDocument);  } catch (  IOException e) {    LOG.info("Unable to get the LOG file");  }}  }
class C{  private void visitFrame(final Frame f){  int i, t;  int nTop=0;  int nLocal=0;  int nStack=0;  int[] locals=f.inputLocals;  int[] stacks=f.inputStack;  for (i=0; i < locals.length; ++i) {    t=locals[i];    if (t == Frame.TOP) {      ++nTop;    } else {      nLocal+=nTop + 1;      nTop=0;    }    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    ++nStack;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  int frameIndex=startFrame(f.owner.position,nLocal,nStack);  for (i=0; nLocal > 0; ++i, --nLocal) {    t=locals[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  for (i=0; i < stacks.length; ++i) {    t=stacks[i];    frame[frameIndex++]=t;    if (t == Frame.LONG || t == Frame.DOUBLE) {      ++i;    }  }  endFrame();}  }
class C{  public void preCheckpoint(){  AsynchronousSteppable[] b=asynchronousRegistry();  final int len=b.length;  for (int x=0; x < len; x++)   b[x].pause();}  }
class C{  public Outline(@NonNull Outline src){  set(src);}  }
class C{  @Override public void teardown(){}  }
class C{  public static void waitForAndDestroy(Process p){  try {    p.waitFor();  } catch (  InterruptedException e) {    e.printStackTrace();  }  try {    p.getInputStream().close();    p.getOutputStream().close();    p.getErrorStream().close();  } catch (  IOException e) {    e.printStackTrace();  }  p.destroy();}  }
class C{  public static SimpleScheduleBuilder repeatHourlyForTotalCount(int count,int hours){  if (count < 1)   throw new IllegalArgumentException("Total count of firings must be at least one! Given count: " + count);  return simpleSchedule().withIntervalInHours(hours).withRepeatCount(count - 1);}  }
class C{  Expression compileFunction(int opPos) throws TransformerException {  int endFunc=opPos + getOp(opPos + 1) - 1;  opPos=getFirstChildPos(opPos);  int funcID=getOp(opPos);  opPos++;  if (-1 != funcID) {    Function func=m_functionTable.getFunction(funcID);    if (func instanceof FuncExtFunctionAvailable)     ((FuncExtFunctionAvailable)func).setFunctionTable(m_functionTable);    func.postCompileStep(this);    try {      int i=0;      for (int p=opPos; p < endFunc; p=getNextOpPos(p), i++) {        func.setArg(compile(p),i);      }      func.checkNumberArgs(i);    } catch (    WrongNumberArgsException wnae) {      java.lang.String name=m_functionTable.getFunctionName(funcID);      m_errorHandler.fatalError(new TransformerException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ONLY_ALLOWS,new Object[]{name,wnae.getMessage()}),m_locator));    }    return func;  } else {    error(XPATHErrorResources.ER_FUNCTION_TOKEN_NOT_FOUND,null);    return null;  }}  }
class C{  public void testPackedCoordinateSequence(){  GeometryFactory pcsFactory=new GeometryFactory(PackedCoordinateSequenceFactory.DOUBLE_FACTORY);  Geometry geom0=read(pcsFactory,"POLYGON ((210 210, 210 220, 220 220, 220 210, 210 210))");  Geometry geom1=read("POLYGON ((225 225, 225 215, 215 215, 215 225, 225 225))");  CommonBitsOp cbo=new CommonBitsOp(true);  Geometry result=cbo.intersection(geom0,geom1);  Geometry expected=geom0.intersection(geom1);  checkEqual(expected,result);}  }
class C{  private double g(final double x){  return 2 / Math.PI * Math.atan((Math.PI * lambda * x) / 2);}  }
class C{  public boolean hasProperty(String name){  for (  Property property : this.properties) {    if (property.getName().equals(name)) {      return true;    }  }  return false;}  }
class C{  @Override public Explanation explain(LeafReaderContext context,int doc) throws IOException {  boolean match=false;  float max=Float.NEGATIVE_INFINITY, sum=0.0f;  List<Explanation> subs=new ArrayList<>();  for (  Weight wt : weights) {    Explanation e=wt.explain(context,doc);    if (e.isMatch()) {      match=true;      subs.add(e);      sum+=e.getValue();      max=Math.max(max,e.getValue());    }  }  if (match) {    final float score=max + (sum - max) * tieBreakerMultiplier;    final String desc=tieBreakerMultiplier == 0.0f ? "max of:" : "max plus " + tieBreakerMultiplier + " times others of:";    return Explanation.match(score,desc,subs);  } else {    return Explanation.noMatch("No matching clause");  }}  }
class C{  public void testBuildTextFromElementWithAttributeMissing(){  LOGGER.debug("buildTextFromElementWithAttributeMissing");  Element element=new Element(Tag.valueOf("div"),"");  TextAttributeOfElementBuilder instance=new TextAttributeOfElementBuilder(AttributeStore.ALT_ATTR);  String result=instance.buildTextFromElement(element);  assertNull(result);}  }
class C{  public FactoryConfigurationError(Exception e){  super(e.toString());  this.exception=e;}  }
class C{  public void decrementNodeCapacity(RMNode rmNode,Resource removedCapacity){  setNodeCapacity(rmNode,Resources.subtract(rmNode.getTotalCapability(),removedCapacity));}  }
class C{  public Style(int fgColor,int bgColor,Font f,byte transparency,Image im,byte backgroundType){  this();  this.fgColor=fgColor;  this.bgColor=bgColor;  this.font=f;  this.transparency=transparency;  this.backgroundType=backgroundType;  this.bgImage=im;}  }
class C{  @Override public void finalize() throws Throwable {  try {    m_Helper.getResultSet().close();    m_Helper.getResultSet().getStatement().close();    m_Helper=null;  } catch (  Exception e) {  }  m_Data=null;  super.finalize();}  }
class C{  public T parent(int id){  View node=view;  View result=null;  while (node != null) {    if (node.getId() == id) {      result=node;      break;    }    ViewParent p=node.getParent();    if (!(p instanceof View))     break;    node=(View)p;  }  return create(result);}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {  }  throw new IllegalStateException();}  }
class C{  public void init(boolean encrypting,byte[] key){  key1=generateWorkingKey(encrypting,key,0);  key2=generateWorkingKey(!encrypting,key,8);  key3=generateWorkingKey(encrypting,key,16);  encrypt=encrypting;}  }
class C{  private static void removeIds(List<MuninMaster> masters){  for (  MuninMaster master : masters) {    master.setId(-1);    for (    MuninNode node : master.getChildren()) {      node.setId(-1);      node.isPersistant=false;      for (      MuninPlugin plugin : node.getPlugins())       plugin.setId(-1);    }  }}  }
class C{  public MapCSP(){  addVariable(NSW);  addVariable(WA);  addVariable(NT);  addVariable(Q);  addVariable(SA);  addVariable(V);  addVariable(T);  Domain colors=new Domain(new Object[]{RED,GREEN,BLUE});  for (  Variable var : getVariables())   setDomain(var,colors);  addConstraint(new NotEqualConstraint(WA,NT));  addConstraint(new NotEqualConstraint(WA,SA));  addConstraint(new NotEqualConstraint(NT,SA));  addConstraint(new NotEqualConstraint(NT,Q));  addConstraint(new NotEqualConstraint(SA,Q));  addConstraint(new NotEqualConstraint(SA,NSW));  addConstraint(new NotEqualConstraint(SA,V));  addConstraint(new NotEqualConstraint(Q,NSW));  addConstraint(new NotEqualConstraint(NSW,V));}  }
class C{  public static java.lang.String toString(long i,int radix){  return null;}  }
class C{  @Override public boolean remove(Object obj){  boolean found=super.remove(obj);  if (found) {    Hypothesis item=(Hypothesis)obj;    Coverage cov=item.getCoverage();    assert coverages.get(cov).remove(obj);    if (coverages.get(cov).size() == 0)     coverages.remove(cov);  }  return found;}  }
class C{  private void loadInfo(int C_ValidCombination_ID,int C_AcctSchema_ID){  log.fine("C_ValidCombination_ID=" + C_ValidCombination_ID);  String sql="SELECT * FROM C_ValidCombination WHERE C_ValidCombination_ID=? AND C_AcctSchema_ID=?";  try {    PreparedStatement pstmt=DB.prepareStatement(sql,null);    pstmt.setInt(1,C_ValidCombination_ID);    pstmt.setInt(2,C_AcctSchema_ID);    ResultSet rs=pstmt.executeQuery();    if (rs.next()) {      if (f_Alias != null)       f_Alias.setValue(rs.getString("Alias"));      f_Combination.setValue(rs.getString("Combination"));      loadInfoOf(rs,f_AD_Org_ID,"AD_Org_ID");      loadInfoOf(rs,f_Account_ID,"Account_ID");      loadInfoOf(rs,f_SubAcct_ID,"C_SubAcct_ID");      loadInfoOf(rs,f_M_Product_ID,"M_Product_ID");      loadInfoOf(rs,f_C_BPartner_ID,"C_BPartner_ID");      loadInfoOf(rs,f_C_Campaign_ID,"C_Campaign_ID");      loadInfoOf(rs,f_C_LocFrom_ID,"C_LocFrom_ID");      loadInfoOf(rs,f_C_LocTo_ID,"C_LocTo_ID");      loadInfoOf(rs,f_C_Project_ID,"C_Project_ID");      loadInfoOf(rs,f_C_SalesRegion_ID,"C_SalesRegion_ID");      loadInfoOf(rs,f_AD_OrgTrx_ID,"AD_OrgTrx_ID");      loadInfoOf(rs,f_C_Activity_ID,"C_Activity_ID");      loadInfoOf(rs,f_User1_ID,"User1_ID");      loadInfoOf(rs,f_User2_ID,"User2_ID");      f_Description.setValue(rs.getString("Description"));    }    rs.close();    pstmt.close();  } catch (  SQLException e) {    log.log(Level.SEVERE,sql,e);  }}  }
class C{  private String cleanRemoteName(String branchName) throws GitException {  String returnName=branchName;  List<Remote> remotes=this.remoteList(newDto(RemoteListRequest.class));  for (  Remote remote : remotes) {    if (branchName.startsWith(remote.getName())) {      returnName=branchName.replaceFirst(remote.getName() + "/","");    }  }  return returnName;}  }
class C{  public static Status forCode(int code){  for (  Status status : Status.values()) {    if (status.code == code) {      return status;    }  }  throw new IllegalArgumentException("Invalid status code: " + code);}  }
class C{  @SuppressWarnings("UnusedDeclaration") public static <T>T rand(Collection<? extends T> c){  A.notNull(c,"c");  int n=ThreadLocalRandom8.current().nextInt(c.size());  int i=0;  for (  T t : c) {    if (i++ == n)     return t;  }  throw new ConcurrentModificationException();}  }
class C{  public static int offsetByCodePoints(CharSequence seq,int index,int codePointOffset){  if (seq == null) {    throw new NullPointerException();  }  int len=seq.length();  if (index < 0 || index > len) {    throw new IndexOutOfBoundsException();  }  if (codePointOffset == 0) {    return index;  }  if (codePointOffset > 0) {    int codePoints=codePointOffset;    int i=index;    while (codePoints > 0) {      codePoints--;      if (i >= len) {        throw new IndexOutOfBoundsException();      }      if (isHighSurrogate(seq.charAt(i))) {        int next=i + 1;        if (next < len && isLowSurrogate(seq.charAt(next))) {          i++;        }      }      i++;    }    return i;  }  int codePoints=-codePointOffset;  int i=index;  while (codePoints > 0) {    codePoints--;    i--;    if (i < 0) {      throw new IndexOutOfBoundsException();    }    if (isLowSurrogate(seq.charAt(i))) {      int prev=i - 1;      if (prev >= 0 && isHighSurrogate(seq.charAt(prev))) {        i--;      }    }  }  return i;}  }
class C{  public void addObservations(int states[][][],int agentIndex1,int agentIndex2){  int timeSteps=states.length;  if (timeSteps - k - (k - 1) <= 0) {    return;  }  observations+=(timeSteps - k - (k - 1));  int prevVal=0;  int nextVal=0;  for (int p=0; p < k; p++) {    prevVal*=numDiscreteValues;    prevVal+=states[p][agentIndex1][agentIndex2];    nextVal*=numDiscreteValues;    nextVal+=states[k - 1 + p][agentIndex1][agentIndex2];  }  for (int t=k; t < timeSteps - (k - 1); t++) {    nextVal-=maxShiftedValue[states[t - 1][agentIndex1][agentIndex2]];    nextVal*=numDiscreteValues;    nextVal+=states[k - 1 + t][agentIndex1][agentIndex2];    jointCount[nextVal][prevVal]++;    prevCount[prevVal]++;    nextCount[nextVal]++;    prevVal-=maxShiftedValue[states[t - k][agentIndex1][agentIndex2]];    prevVal*=numDiscreteValues;    prevVal+=states[t][agentIndex1][agentIndex2];  }}  }
class C{  protected AbstractMetaDataPair(final String entityKey,final String metaDataKey,final ObjectDeserializer<TEntity> entityActivator,final ObjectDeserializer<TMetaData> metaDataActivator,final Deserializer deserializer){  this.entityKey=entityKey;  this.metaDataKey=metaDataKey;  this.entity=deserializer.readObject(this.entityKey,entityActivator);  this.metaData=deserializer.readObject(this.metaDataKey,metaDataActivator);}  }
class C{  public short[] solveEquation(short[][] B,short[] b){  try {    if (B.length != b.length) {      throw new RuntimeException("The equation system is not solvable");    }    A=new short[B.length][B.length + 1];    x=new short[B.length];    for (int i=0; i < B.length; i++) {      for (int j=0; j < B[0].length; j++) {        A[i][j]=B[i][j];      }    }    for (int i=0; i < b.length; i++) {      A[i][b.length]=GF2Field.addElem(b[i],A[i][b.length]);    }    computeZerosUnder(false);    substitute();    return x;  } catch (  RuntimeException rte) {    return null;  }}  }
class C{  public void decrement(){  value--;}  }
class C{  public boolean entity(){  return holder().entity;}  }
class C{  public Object clone() throws CloneNotSupportedException {  DefaultFormatter formatter=(DefaultFormatter)super.clone();  formatter.navigationFilter=null;  formatter.documentFilter=null;  formatter.replaceHolder=null;  return formatter;}  }
class C{  public void addClassCondition(String className){  _specificityC++;  addCondition(Condition.createClassCondition(className));}  }
class C{  public MathVector(){  data=new double[NDIM];  for (int i=0; i < NDIM; i++) {    data[i]=0.0;  }}  }
class C{  public void inlineImage(RenderedImage image,Color bkg,String encode) throws IOException {  ImageBytes bytes=new ImageBytes(image,bkg,ImageConstants.JPG,ImageConstants.COLOR_MODEL_RGB);  println("BI");  imageInfo("Width",image.getWidth());  imageInfo("Height",image.getHeight());  imageInfo("ColorSpace",pdf.name("DeviceRGB"));  imageInfo("BitsPerComponent",8);  imageInfo("Filter",getFilterName(bytes.getFormat()));  print("ID\n");  write(bytes.getBytes());  println("\nEI");}  }
class C{  public synchronized Map<String,Object> waitForResult(long milliseconds){  if (Debug.verboseOn())   Debug.logVerbose("Waiting for results...",module);  while (!isCompleted()) {    try {      this.wait(milliseconds);      if (Debug.verboseOn())       Debug.logVerbose("Waiting...",module);    } catch (    java.lang.InterruptedException e) {      Debug.logError(e,module);    }  }  return this.getResult();}  }
class C{  public static int findLastOf(String container,String charSeq,int begin){  for (int i=begin; i < container.length() && i >= 0; --i) {    if (charSeq.contains("" + container.charAt(i)))     return i;  }  return -1;}  }
class C{  public static void main(String[] args){  doMain(args);}  }
class C{  public int localsSize(){  return locals.length;}  }
class C{  private void updateConnectionDialog(String channelPreset){  connectionDialog.setUsername(client.settings.getString("username"));  if (channelPreset != null) {    connectionDialog.setChannel(channelPreset);  } else {    connectionDialog.setChannel(client.settings.getString("channel"));  }  String password=client.settings.getString("password");  String token=client.settings.getString("token");  boolean usePassword=client.settings.getBoolean("usePassword");  connectionDialog.update(password,token,usePassword);  connectionDialog.setAreChannelsOpen(channels.getChannelCount() > 0);}  }
class C{  public String toSummaryString(String title,boolean printComplexityStatistics){  StringBuffer text=new StringBuffer();  if (printComplexityStatistics && m_NoPriors) {    printComplexityStatistics=false;    System.err.println("Priors disabled, cannot print complexity statistics!");  }  text.append(title + "\n");  try {    if (m_WithClass > 0) {      if (m_ClassIsNominal) {        boolean displayCorrect=m_metricsToDisplay.contains("correct");        boolean displayIncorrect=m_metricsToDisplay.contains("incorrect");        boolean displayKappa=m_metricsToDisplay.contains("kappa");        boolean displayTotalCost=m_metricsToDisplay.contains("total cost");        boolean displayAverageCost=m_metricsToDisplay.contains("average cost");        if (displayCorrect) {          text.append("Correctly Classified Instances     ");          text.append(Utils.doubleToString(correct(),12,4) + "     " + Utils.doubleToString(pctCorrect(),12,4)+ " %\n");        }        if (displayIncorrect) {          text.append("Incorrectly Classified Instances   ");          text.append(Utils.doubleToString(incorrect(),12,4) + "     " + Utils.doubleToString(pctIncorrect(),12,4)+ " %\n");        }        if (displayKappa) {          text.append("Kappa statistic                    ");          text.append(Utils.doubleToString(kappa(),12,4) + "\n");        }        if (m_CostMatrix != null) {          if (displayTotalCost) {            text.append("Total Cost                         ");            text.append(Utils.doubleToString(totalCost(),12,4) + "\n");          }          if (displayAverageCost) {            text.append("Average Cost                       ");            text.append(Utils.doubleToString(avgCost(),12,4) + "\n");          }        }        if (printComplexityStatistics) {          boolean displayKBRelative=m_metricsToDisplay.contains("kb relative");          boolean displayKBInfo=m_metricsToDisplay.contains("kb information");          if (displayKBRelative) {            text.append("K&B Relative Info Score            ");            text.append(Utils.doubleToString(KBRelativeInformation(),12,4) + " %\n");          }          if (displayKBInfo) {            text.append("K&B Information Score              ");            text.append(Utils.doubleToString(KBInformation(),12,4) + " bits");            text.append(Utils.doubleToString(KBMeanInformation(),12,4) + " bits/instance\n");          }        }        if (m_pluginMetrics != null) {          for (          AbstractEvaluationMetric m : m_pluginMetrics) {            if (m instanceof StandardEvaluationMetric && m.appliesToNominalClass() && !m.appliesToNumericClass()) {              String metricName=m.getMetricName().toLowerCase();              boolean display=m_metricsToDisplay.contains(metricName);              if (display) {                String formattedS=((StandardEvaluationMetric)m).toSummaryString();                text.append(formattedS);              }            }          }        }      } else {        boolean displayCorrelation=m_metricsToDisplay.contains("correlation");        if (displayCorrelation) {          text.append("Correlation coefficient            ");          text.append(Utils.doubleToString(correlationCoefficient(),12,4) + "\n");        }        if (m_pluginMetrics != null) {          for (          AbstractEvaluationMetric m : m_pluginMetrics) {            if (m instanceof StandardEvaluationMetric && !m.appliesToNominalClass() && m.appliesToNumericClass()) {              String metricName=m.getMetricName().toLowerCase();              boolean display=m_metricsToDisplay.contains(metricName);              List<String> statNames=m.getStatisticNames();              for (              String s : statNames) {                display=(display && m_metricsToDisplay.contains(s.toLowerCase()));              }              if (display) {                String formattedS=((StandardEvaluationMetric)m).toSummaryString();                text.append(formattedS);              }            }          }        }      }      if (printComplexityStatistics && m_ComplexityStatisticsAvailable) {        boolean displayComplexityOrder0=m_metricsToDisplay.contains("complexity 0");        boolean displayComplexityScheme=m_metricsToDisplay.contains("complexity scheme");        boolean displayComplexityImprovement=m_metricsToDisplay.contains("complexity improvement");        if (displayComplexityOrder0) {          text.append("Class complexity | order 0         ");          text.append(Utils.doubleToString(SFPriorEntropy(),12,4) + " bits");          text.append(Utils.doubleToString(SFMeanPriorEntropy(),12,4) + " bits/instance\n");        }        if (displayComplexityScheme) {          text.append("Class complexity | scheme          ");          text.append(Utils.doubleToString(SFSchemeEntropy(),12,4) + " bits");          text.append(Utils.doubleToString(SFMeanSchemeEntropy(),12,4) + " bits/instance\n");        }        if (displayComplexityImprovement) {          text.append("Complexity improvement     (Sf)    ");          text.append(Utils.doubleToString(SFEntropyGain(),12,4) + " bits");          text.append(Utils.doubleToString(SFMeanEntropyGain(),12,4) + " bits/instance\n");        }      }      if (printComplexityStatistics && m_pluginMetrics != null) {        for (        AbstractEvaluationMetric m : m_pluginMetrics) {          if (m instanceof InformationTheoreticEvaluationMetric) {            if ((m_ClassIsNominal && m.appliesToNominalClass()) || (!m_ClassIsNominal && m.appliesToNumericClass())) {              String metricName=m.getMetricName().toLowerCase();              boolean display=m_metricsToDisplay.contains(metricName);              List<String> statNames=m.getStatisticNames();              for (              String s : statNames) {                display=(display && m_metricsToDisplay.contains(s.toLowerCase()));              }              if (display) {                String formattedS=((InformationTheoreticEvaluationMetric)m).toSummaryString();                text.append(formattedS);              }            }          }        }      }      boolean displayMAE=m_metricsToDisplay.contains("mae");      boolean displayRMSE=m_metricsToDisplay.contains("rmse");      boolean displayRAE=m_metricsToDisplay.contains("rae");      boolean displayRRSE=m_metricsToDisplay.contains("rrse");      if (displayMAE) {        text.append("Mean absolute error                ");        text.append(Utils.doubleToString(meanAbsoluteError(),12,4) + "\n");      }      if (displayRMSE) {        text.append("Root mean squared error            ");        text.append(Utils.doubleToString(rootMeanSquaredError(),12,4) + "\n");      }      if (!m_NoPriors) {        if (displayRAE) {          text.append("Relative absolute error            ");          text.append(Utils.doubleToString(relativeAbsoluteError(),12,4) + " %\n");        }        if (displayRRSE) {          text.append("Root relative squared error        ");          text.append(Utils.doubleToString(rootRelativeSquaredError(),12,4) + " %\n");        }      }      if (m_pluginMetrics != null) {        for (        AbstractEvaluationMetric m : m_pluginMetrics) {          if (m instanceof StandardEvaluationMetric && m.appliesToNominalClass() && m.appliesToNumericClass()) {            String metricName=m.getMetricName().toLowerCase();            boolean display=m_metricsToDisplay.contains(metricName);            List<String> statNames=m.getStatisticNames();            for (            String s : statNames) {              display=(display && m_metricsToDisplay.contains(s.toLowerCase()));            }            if (display) {              String formattedS=((StandardEvaluationMetric)m).toSummaryString();              text.append(formattedS);            }          }        }      }      if (m_CoverageStatisticsAvailable) {        boolean displayCoverage=m_metricsToDisplay.contains("coverage");        boolean displayRegionSize=m_metricsToDisplay.contains("region size");        if (displayCoverage) {          text.append("Coverage of cases (" + Utils.doubleToString(m_ConfLevel,4,2) + " level)     ");          text.append(Utils.doubleToString(coverageOfTestCasesByPredictedRegions(),12,4) + " %\n");        }        if (!m_NoPriors) {          if (displayRegionSize) {            text.append("Mean rel. region size (" + Utils.doubleToString(m_ConfLevel,4,2) + " level) ");            text.append(Utils.doubleToString(sizeOfPredictedRegions(),12,4) + " %\n");          }        }      }    }    if (Utils.gr(unclassified(),0)) {      text.append("UnClassified Instances             ");      text.append(Utils.doubleToString(unclassified(),12,4) + "     " + Utils.doubleToString(pctUnclassified(),12,4)+ " %\n");    }    text.append("Total Number of Instances          ");    text.append(Utils.doubleToString(m_WithClass,12,4) + "\n");    if (m_MissingClass > 0) {      text.append("Ignored Class Unknown Instances            ");      text.append(Utils.doubleToString(m_MissingClass,12,4) + "\n");    }  } catch (  Exception ex) {    System.err.println("Arggh - Must be a bug in Evaluation class");    ex.printStackTrace();  }  return text.toString();}  }
class C{  public boolean isToolControlEnabled(){  return toolControl;}  }
class C{  public static SimpleDateFormat createDateFormatter(){  return new SimpleDateFormat("yyyy/MM/dd");}  }
class C{  @SuppressWarnings("unchecked") <T>T[] readArray(Class<T> compType) throws ClassNotFoundException, IOException {  int len=in.readInt();  T[] arr=(T[])Array.newInstance(compType,len);  handles.assign(arr);  for (int i=0; i < len; i++)   arr[i]=(T)readObject();  return arr;}  }
class C{  @NotNull public static GroovyElementType indexPropertyArgsParse(@NotNull PsiBuilder builder,@NotNull GroovyParser parser){  assert builder.getTokenType() == GroovyTokenTypes.mLBRACK;  PsiBuilder.Marker marker=builder.mark();  ParserUtils.getToken(builder,GroovyTokenTypes.mLBRACK);  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);  ArgumentList.parseArgumentList(builder,GroovyTokenTypes.mRBRACK,parser);  ParserUtils.getToken(builder,GroovyTokenTypes.mNLS);  ParserUtils.getToken(builder,GroovyTokenTypes.mRBRACK,GroovyBundle.message("rbrack.expected"));  marker.done(GroovyElementTypes.ARGUMENTS);  return GroovyElementTypes.PATH_INDEX_PROPERTY;}  }
class C{  public DoubleVector(int n){  V=new double[n];  setSize(n);}  }
class C{  private List<String> tokenizeString(String input){  List<String> matchList=new ArrayList<>();  Pattern regex=Pattern.compile("[^\\s\"']+|\"([^\"]*)\"|'([^']*)'");  Matcher regexMatcher=regex.matcher(input);  while (regexMatcher.find()) {    if (regexMatcher.group(1) != null) {      matchList.add(regexMatcher.group(1));    } else     if (regexMatcher.group(2) != null) {      matchList.add(regexMatcher.group(2));    } else {      matchList.add(regexMatcher.group());    }  }  return matchList;}  }
class C{  public void copyActivations(NeuronGroup toCopy){  int i=0;  for (  Neuron neuron : toCopy.getNeuronList()) {    if (i < neuronList.size()) {      neuronList.get(i).setActivation(neuron.getInputValue() + neuron.getActivation());      neuronList.get(i++).setSpike(neuron.isSpike());    }  }}  }
class C{  public static void detectAndHandleLocalLooping(Mail aMail,ActionContext context,String anAttributeSuffix) throws MessagingException {  MailAddress thisRecipient=getSoleRecipient(aMail);  MailAddress lastRecipient=(MailAddress)aMail.getAttribute(ATTRIBUTE_PREFIX + anAttributeSuffix);  if (null != lastRecipient && lastRecipient.equals(thisRecipient)) {    MessagingException ex=new MessagingException("This message is looping! Message ID: " + aMail.getMessage().getMessageID());    context.getLog().warn(ex.getMessage(),ex);    throw ex;  }  aMail.setAttribute(ATTRIBUTE_PREFIX + anAttributeSuffix,thisRecipient);}  }
class C{  public void addForce(Double2D force){  physicsState.addExternalForce(force,this.index);}  }
class C{  public static int hashCode(int pre,Stroke s){  int h=(s != null ? s.hashCode() : 0);  return 37 * pre + h;}  }
class C{  public Bundler putShortArray(String key,short[] value){  bundle.putShortArray(key,value);  return this;}  }
class C{  @Override public void xml(String xml){  if (TextUtils.isEmpty(xml)) {    d("Empty/Null xml content");    return;  }  try {    Source xmlInput=new StreamSource(new StringReader(xml));    StreamResult xmlOutput=new StreamResult(new StringWriter());    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","2");    transformer.transform(xmlInput,xmlOutput);    d(xmlOutput.getWriter().toString().replaceFirst(">",">\n"));  } catch (  TransformerException e) {    e(e.getCause().getMessage() + "\n" + xml);  }}  }
class C{  public static EventStoreBuilder newBuilder(Settings settings){  checkNotNull(settings,"settings is null");  Settings.Builder settingsBuilder=Settings.newBuilder().sslSettings(settings.sslSettings).reconnectionDelay(settings.reconnectionDelay).heartbeatInterval(settings.heartbeatInterval).heartbeatTimeout(settings.heartbeatTimeout).requireMaster(settings.requireMaster).operationTimeout(settings.operationTimeout).operationTimeoutCheckInterval(settings.operationTimeoutCheckInterval).maxOperationQueueSize(settings.maxOperationQueueSize).maxConcurrentOperations(settings.maxConcurrentOperations).maxOperationRetries(settings.maxOperationRetries).maxReconnections(settings.maxReconnections).persistentSubscriptionBufferSize(settings.persistentSubscriptionBufferSize).persistentSubscriptionAutoAckEnabled(settings.persistentSubscriptionAutoAckEnabled).failOnNoServerResponse(settings.failOnNoServerResponse).executor(settings.executor);  settings.staticNodeSettings.ifPresent(null);  settings.clusterNodeSettings.ifPresent(null);  settings.userCredentials.ifPresent(null);  TcpSettings.Builder tcpSettingsBuilder=TcpSettings.newBuilder().connectTimeout(settings.tcpSettings.connectTimeout).closeTimeout(settings.tcpSettings.closeTimeout).keepAlive(settings.tcpSettings.keepAlive).tcpNoDelay(settings.tcpSettings.tcpNoDelay).sendBufferSize(settings.tcpSettings.sendBufferSize).receiveBufferSize(settings.tcpSettings.receiveBufferSize).writeBufferHighWaterMark(settings.tcpSettings.writeBufferHighWaterMark).writeBufferLowWaterMark(settings.tcpSettings.writeBufferLowWaterMark);  return new EventStoreBuilder(settingsBuilder,tcpSettingsBuilder);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:11.875 -0500",hash_original_method="BF967FD8D067C4ECB64FA2CD72EF91FA",hash_generated_method="1DD936A1546C4CF673EEEF568E570245") @DSComment("getter function") @DSSafe(DSCat.SAFE_OTHERS) public boolean isCommand(){  return __isCommand;}  }
class C{  public static boolean isOrSubOf(Class<?> objectClass,Object parentObject){  Class<?> parentClass=parentObject.getClass();  return isOrSubOf(objectClass,parentClass);}  }
class C{  @Override public double valueToAngle(double value){  double range=this.upperBound - this.lowerBound;  double unit=this.extent / range;  return this.startAngle + unit * (value - this.lowerBound);}  }
class C{  public void redoCommand(IUndoableCommand command){  IUndoableCommand temp;  do {    temp=redoStack.pop();    temp.redo();    undoStack.push(temp);  } while (temp != command);  fireOperationsHistoryChanged();}  }
class C{  private void loadAttachments(){  log.config("");  String sText=m_attachment.getTextMsg();  if (sText == null)   text.setText(""); else   text.setText(sText);  int size=m_attachment.getEntryCount();  for (int i=0; i < size; i++)   cbContent.addItem(m_attachment.getEntryName(i));  if (size > 0)   cbContent.setSelectedIndex(0); else   displayData(0);}  }
class C{  public void remove(Component child){  child.removeComponentListener(viewListener);  super.remove(child);}  }
class C{  @Override public void store(DataOutput os) throws IOException {  os.writeBoolean(forward);  os.writeInt(BY);  os.writeInt(tries.size());  for (  Trie trie : tries)   trie.store(os);}  }
class C{  public TreeElement<?,?> initializeRoot(){  clearPropertyChangeListeners();  TreeElement<SecuritySpecModel,Object> root=new TreeElement<SecuritySpecModel,Object>("SecuritySpec",getSpec(),Object.class);  TreeElement<Object,MethodModel> whitelist=new TreeElement<Object,MethodModel>("Whitelist",getSpec().getWhitelist(),MethodModel.class);  root.addChild(whitelist);  for (  MethodModel m : getSpec().getWhitelist()) {    TreeElement<MethodModel,Object> mTreeElement=new TreeElement<MethodModel,Object>(m.getShortSignature(),m,Object.class);    whitelist.addChild(mTreeElement);    updatePropertyChangeListener(m,mTreeElement);  }  if (selectedTopLevelParentEntity == TopLevelParentEntity.API_AS_TOP_PARENT) {    createModelWithApiAsTopParent(root);  } else   if (selectedTopLevelParentEntity == TopLevelParentEntity.CODE_LOCATION_AS_TOP_PARENT) {    createModelWithCodeLocationAsTopParent(root);  } else   if (selectedTopLevelParentEntity == TopLevelParentEntity.ENTRY_POINT_AS_TOP_PARENT) {    createModelWithEntryPointAsTopParent(root);  }  return root;}  }
class C{  public static String fixLineFeeds(String sql){  if (sql.indexOf('\r') == -1) {    return sql;  }  boolean hasFixes=false;  char[] fixed=sql.toCharArray();  for (int i=0; i < fixed.length; i++) {    if (fixed[i] == '\r' && (i == fixed.length - 1 || fixed[i + 1] != '\n')) {      fixed[i]='\n';      hasFixes=true;    }  }  return hasFixes ? String.valueOf(fixed) : sql;}  }
class C{  public WrappedByteBuffer position(int position){  _autoExpandAt(position,0);  _buf.position(position);  return this;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @GuardedBy("lock") private int bufferedSize(){  int count=writePosition - startPosition;  return (count < 0) ? count + buffer.length : count;}  }
class C{  public ServerStatusDataType clone(){  ServerStatusDataType result=new ServerStatusDataType();  result.StartTime=StartTime;  result.CurrentTime=CurrentTime;  result.State=State;  result.BuildInfo=BuildInfo == null ? null : BuildInfo.clone();  result.SecondsTillShutdown=SecondsTillShutdown;  result.ShutdownReason=ShutdownReason;  return result;}  }
class C{  private boolean importFile(final File file){  FileInputStream fileInputStream=null;  try {    TrackImporter trackImporter;    if (trackFileFormat == TrackFileFormat.KML) {      String extension=FileUtils.getExtension(file.getName());      if (TrackFileFormat.KML.getExtension().equals(extension)) {        trackImporter=new KmlFileTrackImporter(context,-1L);      } else {        MyTracksProviderUtils myTracksProviderUtils=MyTracksProviderUtils.Factory.get(context);        Uri uri=myTracksProviderUtils.insertTrack(new Track());        long newId=Long.parseLong(uri.getLastPathSegment());        trackImporter=new KmzTrackImporter(context,newId);      }    } else {      trackImporter=new GpxFileTrackImporter(context);    }    fileInputStream=new FileInputStream(file);    trackId=trackImporter.importFile(fileInputStream);    return trackId != -1L;  } catch (  FileNotFoundException e) {    Log.e(TAG,"Unable to import file",e);    return false;  } finally {    if (fileInputStream != null) {      try {        fileInputStream.close();      } catch (      IOException e) {        Log.e(TAG,"Unable to close file input stream",e);      }    }  }}  }
class C{  public InlineQueryResultVoice.InlineQueryResultVoiceBuilder voiceUrl(URL voiceUrl){  this.voice_url=voiceUrl;  return this;}  }
class C{  public <S extends QueryExtension>S useExtension(Class<S> type) throws IllegalAccessException, InstantiationException {  QueryExtension q=type.newInstance();  q.setQueryService(this);  return (S)q;}  }
class C{  public TimeClientHandler(){  req=("QUERY TIME ORDER" + System.getProperty("line.separator")).getBytes();}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getSingleIsA_();}  }
class C{  public Environment newEnvironment(Environment env){  return new ImportEnvironment(env,this);}  }
class C{  public byte[] encodeVariantLong(long read){  long value=(read << 1) ^ (read >> 63);  ByteArrayOutputStream bytes=new ByteArrayOutputStream();  while (true) {    if ((value & ~0x7FL) == 0) {      bytes.write((int)value);      break;    } else {      bytes.write(((int)value & 0x7F) | 0x80);      value>>>=7;    }  }  return bytes.toByteArray();}  }
class C{  public UnrecoverableException(String message){  super(message);}  }
class C{  public Criteria or(){  Criteria criteria=createCriteriaInternal();  oredCriteria.add(criteria);  return criteria;}  }
class C{  public void onConversationHidden(Peer peer){  if (visiblePeer != null && visiblePeer.equals(peer)) {    this.visiblePeer=null;  }}  }
class C{  private XYSeries createSeriesA(){  XYSeries s=new XYSeries("A",true,false);  s.add(1.0,1.1);  s.add(2.0,null);  return s;}  }
class C{  public static boolean isSignedFloat(String s){  if (isEmpty(s))   return defaultEmptyOK;  try {    Float.parseFloat(s);    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public boolean closeCamera(){  return cameraInternal.closeCameraInternal();}  }
class C{  public void doGet(HttpServletRequest request,HttpServletResponse response) throws ServletException, IOException {  request.getSession().setAttribute("school","dfxy");  response.sendRedirect("servlet/SchoolServlet");  return;}  }
class C{  private static String doGetPath(String filename,int separatorAdd){  if (filename == null) {    return null;  }  int prefix=getPrefixLength(filename);  if (prefix < 0) {    return null;  }  int index=indexOfLastSeparator(filename);  int endIndex=index + separatorAdd;  if (prefix >= filename.length() || index < 0 || prefix >= endIndex) {    return "";  }  return filename.substring(prefix,endIndex);}  }
class C{  void ensurePrestart(){  int wc=workerCountOf(ctl.get());  if (wc < corePoolSize)   addWorker(null,true); else   if (wc == 0)   addWorker(null,false);}  }
class C{  protected void clearEvents(){  sCInterface.clearEvents();  sCIIfA.clearEvents();  evInA=false;  evInB=false;  evInC=false;  evInD=false;  evInE=false;  evInF=false;}  }
class C{  public static MultiLineString[] toMultiLineStringArray(Collection multiLineStrings){  MultiLineString[] multiLineStringArray=new MultiLineString[multiLineStrings.size()];  return (MultiLineString[])multiLineStrings.toArray(multiLineStringArray);}  }
class C{  @Override public boolean containsAll(Collection<?> collection){  for (  Object element : collection) {    if (!contains(element)) {      return false;    }  }  return true;}  }
class C{  public static <K,V>HashMap<K,V> newEmptyHashMap(Iterable<?> iterable){  if (iterable instanceof Collection<?>)   return Maps.newHashMapWithExpectedSize(((Collection<?>)iterable).size());  return Maps.newHashMap();}  }
class C{  private Point extractDropLocation(DropTargetDropEvent dtde){  if (dtde == null) {    Debug.message("defaultdndcatcher","ERROR> BDnDC::getTransferData(): dropEvent is null");    return null;  }  return dtde.getLocation();}  }
class C{  public FuzzyQueryBuilder(String name,boolean value){  this(name,(Object)value);}  }
class C{  public LaunchDiagnosticTool(){  super();}  }
class C{  public CalendarIntervalTriggerImpl(String name,String group,String jobName,String jobGroup,Date startTime,Date endTime,IntervalUnit intervalUnit,int repeatInterval){  super(name,group,jobName,jobGroup);  setStartTime(startTime);  setEndTime(endTime);  setRepeatIntervalUnit(intervalUnit);  setRepeatInterval(repeatInterval);}  }
class C{  @Override public int compareTo(final MutableFloat other){  return Float.compare(this.value,other.value);}  }
class C{  public void addStopWordListFile(String fileName) throws IOException {  try (Reader reader=new FileReader(fileName)){    load(new FileReader(fileName));  } }  }
class C{  public void releaseBuffers(){  if (_allocator != null && _currentSegment != null) {    resetWithEmpty();    char[] buf=_currentSegment;    _currentSegment=null;    _allocator.releaseCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER,buf);  }}  }
class C{  public NumberFormatter(){  this(NumberFormat.getNumberInstance());}  }
class C{  private void createCrossing4SignalizedLink(DgCrossing crossing,Link link,DgCrossingNode inLinkToNode,Id<Link> backLinkId,LanesToLinkAssignment l2l,SignalSystemData system,SignalsData signalsData){  DgProgram program=null;  Id<DgProgram> programId=idConverter.convertSignalSystemId2ProgramId(system.getId());  if (!crossing.getPrograms().containsKey(programId)) {    program=new DgProgram(programId);    program.setCycle(this.cycle);    crossing.addProgram(program);  } else {    program=crossing.getPrograms().get(programId);  }  List<SignalData> signals4Link=this.getSignals4LinkId(system,link.getId());  for (  SignalData signal : signals4Link) {    log.debug("    signal: " + signal.getId() + " system: "+ system.getId());    Id<DgGreen> lightId=null;    if (l2l == null) {      Set<Id<Link>> outLinkIds=new HashSet<>();      if (signals4Link.size() > 1 && (signal.getTurningMoveRestrictions() == null || signal.getTurningMoveRestrictions().isEmpty())) {        throw new IllegalStateException("more than one signal on one link but no lanes and no turning move restrictions is not allowed");      } else       if (signal.getTurningMoveRestrictions() == null || signal.getTurningMoveRestrictions().isEmpty()) {        outLinkIds.addAll(this.getTurningMoves4LinkWoLanes(link));      } else {        outLinkIds=signal.getTurningMoveRestrictions();      }      for (      Id<Link> outLinkId : outLinkIds) {        log.debug("    outLinkId: " + outLinkId);        lightId=this.createLights(link.getId(),null,outLinkId,backLinkId,inLinkToNode,crossing);        log.debug("    created Light " + lightId);        if (lightId != null) {          Tuple<SignalPlanData,SignalGroupSettingsData> planGroupSettings=this.getPlanAndSignalGroupSettings4Signal(system.getId(),signal.getId(),signalsData);          SignalPlanData signalPlan=planGroupSettings.getFirst();          SignalGroupSettingsData groupSettings=planGroupSettings.getSecond();          this.createAndAddGreen4Settings(lightId,program,groupSettings,signalPlan);        }      }    } else {      for (      Id<Lane> laneId : signal.getLaneIds()) {        Lane lane=l2l.getLanes().get(laneId);        if (signal.getTurningMoveRestrictions() == null || signal.getTurningMoveRestrictions().isEmpty()) {          for (          Id<Link> outLinkId : lane.getToLinkIds()) {            log.debug("    outLinkId: " + outLinkId);            lightId=this.createLights(link.getId(),laneId,outLinkId,backLinkId,inLinkToNode,crossing);            log.debug("    created Light " + lightId);            if (lightId != null) {              Tuple<SignalPlanData,SignalGroupSettingsData> planGroupSettings=this.getPlanAndSignalGroupSettings4Signal(system.getId(),signal.getId(),signalsData);              SignalPlanData signalPlan=planGroupSettings.getFirst();              SignalGroupSettingsData groupSettings=planGroupSettings.getSecond();              this.createAndAddGreen4Settings(lightId,program,groupSettings,signalPlan);            }          }        } else {          for (          Id<Link> outLinkId : signal.getTurningMoveRestrictions()) {            log.debug("    outLinkId: " + outLinkId);            lightId=this.createLights(link.getId(),laneId,outLinkId,backLinkId,inLinkToNode,crossing);            log.debug("    created Light " + lightId);            if (lightId != null) {              Tuple<SignalPlanData,SignalGroupSettingsData> planGroupSettings=this.getPlanAndSignalGroupSettings4Signal(system.getId(),signal.getId(),signalsData);              SignalPlanData signalPlan=planGroupSettings.getFirst();              SignalGroupSettingsData groupSettings=planGroupSettings.getSecond();              this.createAndAddGreen4Settings(lightId,program,groupSettings,signalPlan);            }          }        }      }    }  }}  }
class C{  public String generate(){  KeyNamePair docTypeKNPair=(KeyNamePair)cmbDocType.getSelectedItem();  String docActionSelected=(String)docAction.getValue();  return generate(panel.getStatusBar(),docTypeKNPair,docActionSelected);}  }
class C{  private void processClassMeta(CacheTypeMetadata meta,TypeDescriptor d,CacheObjectContext coCtx) throws IgniteCheckedException {  Map<String,String> aliases=meta.getAliases();  if (aliases == null)   aliases=Collections.emptyMap();  Class<?> keyCls=d.keyClass();  Class<?> valCls=d.valueClass();  assert keyCls != null;  assert valCls != null;  for (  Map.Entry<String,Class<?>> entry : meta.getAscendingFields().entrySet())   addToIndex(d,keyCls,valCls,entry.getKey(),entry.getValue(),0,IndexType.ASC,null,aliases,coCtx);  for (  Map.Entry<String,Class<?>> entry : meta.getDescendingFields().entrySet())   addToIndex(d,keyCls,valCls,entry.getKey(),entry.getValue(),0,IndexType.DESC,null,aliases,coCtx);  for (  String txtField : meta.getTextFields())   addToIndex(d,keyCls,valCls,txtField,String.class,0,IndexType.TEXT,null,aliases,coCtx);  Map<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> grps=meta.getGroups();  if (grps != null) {    for (    Map.Entry<String,LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>>> entry : grps.entrySet()) {      String idxName=entry.getKey();      LinkedHashMap<String,IgniteBiTuple<Class<?>,Boolean>> idxFields=entry.getValue();      int order=0;      for (      Map.Entry<String,IgniteBiTuple<Class<?>,Boolean>> idxField : idxFields.entrySet()) {        Boolean descending=idxField.getValue().get2();        if (descending == null)         descending=false;        addToIndex(d,keyCls,valCls,idxField.getKey(),idxField.getValue().get1(),order,descending ? IndexType.DESC : IndexType.ASC,idxName,aliases,coCtx);        order++;      }    }  }  for (  Map.Entry<String,Class<?>> entry : meta.getQueryFields().entrySet()) {    ClassProperty prop=buildClassProperty(keyCls,valCls,entry.getKey(),entry.getValue(),aliases,coCtx);    d.addProperty(prop,false);  }}  }
class C{  public boolean isShowGridX(){  return mShowGridX;}  }
class C{  private void handleRawAggregatedColumnVisibility(boolean rawMode){  for (  Column column : Column.values()) {    if (rawMode) {      if (column.showInRawMode && !column.showInAggregatedMode && !ShowHideColumnsHandler.isColumnHidden(this.getClass(),column.name)) {        Integer width=ShowHideColumnsHandler.getRememberedColumnWidth(this.getClass(),column.name);        getMappedTableViewerColumn(column).getColumn().setWidth((null != width) ? width.intValue() : column.width);      } else       if (!column.showInRawMode && column.showInAggregatedMode) {        getMappedTableViewerColumn(column).getColumn().setWidth(0);      }    } else {      if (!column.showInRawMode && column.showInAggregatedMode && !ShowHideColumnsHandler.isColumnHidden(this.getClass(),column.name)) {        Integer width=ShowHideColumnsHandler.getRememberedColumnWidth(this.getClass(),column.name);        getMappedTableViewerColumn(column).getColumn().setWidth((null != width) ? width.intValue() : column.width);      } else       if (column.showInRawMode && !column.showInAggregatedMode) {        getMappedTableViewerColumn(column).getColumn().setWidth(0);      }    }  }}  }
class C{  public ClientBootstrap bootStrapTcpClient() throws HttpRequestCreateException {  ClientBootstrap tcpClient=null;  try {    tcpClient=new ClientBootstrap(tcpMeta.getChannelFactory());    tcpClient.setPipelineFactory(new MyPipelineFactory(TcpUdpSshPingResourceStore.getInstance().getTimer(),this,tcpMeta.getTcpIdleTimeoutSec()));    tcpClient.setOption("connectTimeoutMillis",tcpMeta.getTcpConnectTimeoutMillis());    tcpClient.setOption("tcpNoDelay",true);  } catch (  Exception t) {    throw new TcpUdpRequestCreateException("Error in creating request in Tcpworker. " + " If tcpClient is null. Then fail to create.",t);  }  return tcpClient;}  }
class C{  public static Builder createBuilder(Header header,WritableFontData data){  return new Builder(header,data);}  }
class C{  public void clear(){  map.clear();}  }
class C{  public static List<Assignment> deserializeAssignmentList(final List<String> serializedList,final boolean stripSymmetry){  Vector<Assignment> result=new Vector<Assignment>(serializedList.size());  Iterator<String> iter=serializedList.iterator();  String[] fields=new String[]{null,"","","0","0"};  while (iter.hasNext()) {    String[] serFields=(iter.next()).split(LIST_DELIMITER);    System.arraycopy(serFields,0,fields,0,serFields.length);    String[] params;    if ("".equals(fields[1])) {      params=new String[0];    } else {      params=fields[1].split(PARAM_DELIMITER);    }    Assignment assign=new Assignment(fields[0],params,fields[2]);    if (fields.length > 3 && fields[3].equals("1")) {      assign.setModelValue(true);      if (!stripSymmetry && fields.length > 4 && fields[4].equals("1")) {        assign.setSymmetric(true);      }    }    result.add(assign);  }  return result;}  }
class C{  public Map<Lock,StackTrace> locks(){  int p;  final Map<Lock,StackTrace> locks=new HashMap<Lock,StackTrace>();  for (  final Map.Entry<StackTrace,List<String>> entry : entrySet()) {    for (    final String s : entry.getValue()) {      if ((p=s.indexOf("locked <",0)) > 0) {        locks.put(new Lock(s.substring(p + 8,s.indexOf('>'))),entry.getKey());      }    }  }  return locks;}  }
class C{  @Override protected synchronized boolean is(String word){  for (  Pattern pattern : m_Patterns) {    if (pattern.matcher(word.trim().toLowerCase()).matches()) {      if (m_Debug)       debug(pattern.pattern() + " --> true");      return true;    } else {      if (m_Debug)       debug(pattern.pattern() + " --> false");    }  }  return false;}  }
class C{  public FibonacciMinPQ(Comparator<Key> C,Key[] a){  comp=C;  for (  Key k : a)   insert(k);}  }
class C{  public CampoReferenciaVO insertValue(final CampoReferenciaVO value){  try {    DbConnection conn=getConnection();    DbInsertFns.insert(conn,TABLE_NAME,DbUtil.getColumnNames(REFERENCE_COL_DEFS),new SigiaDbInputRecord(REFERENCE_COL_DEFS,value));    return value;  } catch (  Exception e) {    logger.error("Error insertando campo de tipo referencia para el descriptor " + value.getIdObjeto(),e);    throw new DBException("insertando campo de tipo referencia",e);  }}  }
class C{  public void append(SimpleTypeInformation<?> meta,Object data){  this.meta.add(meta);  this.contents.add(data);}  }
class C{  @Override public void visitJumpInsn(final int opcode,final Label lbl){  super.visitJumpInsn(opcode,lbl);  LabelNode ln=((JumpInsnNode)instructions.getLast()).label;  if (opcode == JSR && !subroutineHeads.containsKey(ln)) {    subroutineHeads.put(ln,new BitSet());  }}  }
class C{  @Override public int read() throws IOException {  int res=in.read();  if (res < 0) {    throw new EndOfSourceException();  }  return res;}  }
class C{  private DeleteTranslationMemoryCommand(){}  }
class C{  synchronized void receivedLast(){  closedByWriter=true;  notifyAll();}  }
class C{  private double checkDistance(double linkLength,double distance){  if (linkLength < distance) {    log.warn("distance to measure " + distance + " m was longer than link "+ linkLength+ " m . using linklength as distance");    return linkLength;  }  return distance;}  }
class C{  public static String fmt0(double v){  return v == Double.MAX_VALUE ? null : FMT0.format(v);}  }
class C{  private Collection<String> splitFilter(String formFilter){  Collection<String> result=Lists.newArrayList();  for (  String filter : formFilter.split("\\p{Space}+")) {    if ((filter != null) && (!filter.isEmpty())) {      result.add(filter);    }  }  if (result.size() <= 0) {    result.add("");  }  return result;}  }
class C{  void appendWhere(CharSequence inWhere){}  }
class C{  public static void createTable(SQLiteDatabase db,boolean ifNotExists){  String constraint=ifNotExists ? "IF NOT EXISTS " : "";  db.execSQL("CREATE TABLE " + constraint + "'JOKE_CACHE' ("+ "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ,"+ "'RESULT' TEXT,"+ "'PAGE' INTEGER,"+ "'TIME' INTEGER);");}  }
class C{  @Override public boolean supportsANSI92EntryLevelSQL(){  debugCodeCall("supportsANSI92EntryLevelSQL");  return true;}  }
class C{  public CropTransformation(float widthRatio,float heightRatio,GravityHorizontal gravityHorizontal,GravityVertical gravityVertical){  mWidthRatio=widthRatio;  mHeightRatio=heightRatio;  mGravityHorizontal=gravityHorizontal;  mGravityVertical=gravityVertical;}  }
class C{  private static Credential authorize() throws Exception {  GoogleClientSecrets clientSecrets=GoogleClientSecrets.load(JSON_FACTORY,new InputStreamReader(HelloAnalyticsApiSample.class.getResourceAsStream("/client_secrets.json")));  if (clientSecrets.getDetails().getClientId().startsWith("Enter") || clientSecrets.getDetails().getClientSecret().startsWith("Enter ")) {    System.out.println("Enter Client ID and Secret from https://code.google.com/apis/console/?api=analytics " + "into analytics-cmdline-sample/src/main/resources/client_secrets.json");    System.exit(1);  }  GoogleAuthorizationCodeFlow flow=new GoogleAuthorizationCodeFlow.Builder(HTTP_TRANSPORT,JSON_FACTORY,clientSecrets,Collections.singleton(AnalyticsScopes.ANALYTICS_READONLY)).setDataStoreFactory(DATA_STORE_FACTORY).build();  return new AuthorizationCodeInstalledApp(flow,new LocalServerReceiver()).authorize("user");}  }
class C{  public static TypeReference newSuperTypeReference(int itfIndex){  itfIndex&=0xFFFF;  return new TypeReference((CLASS_EXTENDS << 24) | (itfIndex << 8));}  }
class C{  public void decompose() throws Exception {  Reader dataReader;  Instances data;  int tps;  int k;  int q;  dataReader=new BufferedReader(new FileReader(m_DataFileName));  data=new Instances(dataReader);  if (m_ClassIndex < 0) {    data.setClassIndex(data.numAttributes() - 1);  } else {    data.setClassIndex(m_ClassIndex);  }  if (data.classAttribute().type() != Attribute.NOMINAL) {    throw new Exception("Class attribute must be nominal");  }  int numClasses=data.numClasses();  data.deleteWithMissingClass();  if (data.checkForStringAttributes()) {    throw new Exception("Can't handle string attributes!");  }  if (data.numInstances() <= 2) {    throw new Exception("Dataset size must be greater than 2.");  }  if (m_TrainSize == -1) {    m_TrainSize=(int)Math.floor((double)data.numInstances() / 2.0);  } else   if (m_TrainSize < 0 || m_TrainSize >= data.numInstances() - 1) {    throw new Exception("Training set size of " + m_TrainSize + " is invalid.");  }  if (m_P == -1) {    m_P=(double)m_TrainSize / ((double)data.numInstances() - 1);  } else   if (m_P < (m_TrainSize / ((double)data.numInstances() - 1)) || m_P >= 1.0) {    throw new Exception("Proportion is not in range: " + (m_TrainSize / ((double)data.numInstances() - 1)) + " <= p < 1.0 ");  }  tps=(int)Math.ceil(((double)m_TrainSize / (double)m_P) + 1);  k=(int)Math.ceil(tps / (tps - (double)m_TrainSize));  if (k > tps) {    throw new Exception("The required number of folds is too many." + "Change p or the size of the training set.");  }  q=(int)Math.floor((double)data.numInstances() / (double)tps);  double[][] instanceProbs=new double[data.numInstances()][numClasses];  int[][] foldIndex=new int[k][2];  Vector<int[]> segmentList=new Vector<int[]>(q + 1);  Random random=new Random(m_Seed);  data.randomize(random);  int currentDataIndex=0;  for (int count=1; count <= (q + 1); count++) {    if (count > q) {      int[] segmentIndex=new int[(data.numInstances() - (q * tps))];      for (int index=0; index < segmentIndex.length; index++, currentDataIndex++) {        segmentIndex[index]=currentDataIndex;      }      segmentList.add(segmentIndex);    } else {      int[] segmentIndex=new int[tps];      for (int index=0; index < segmentIndex.length; index++, currentDataIndex++) {        segmentIndex[index]=currentDataIndex;      }      segmentList.add(segmentIndex);    }  }  int remainder=tps % k;  int foldSize=(int)Math.ceil((double)tps / (double)k);  int index=0;  int currentIndex;  for (int count=0; count < k; count++) {    if (remainder != 0 && count == remainder) {      foldSize-=1;    }    foldIndex[count][0]=index;    foldIndex[count][1]=foldSize;    index+=foldSize;  }  for (int l=0; l < m_ClassifyIterations; l++) {    for (int i=1; i <= q; i++) {      int[] currentSegment=(int[])segmentList.get(i - 1);      randomize(currentSegment,random);      for (int j=1; j <= k; j++) {        Instances TP=null;        for (int foldNum=1; foldNum <= k; foldNum++) {          if (foldNum != j) {            int startFoldIndex=foldIndex[foldNum - 1][0];            foldSize=foldIndex[foldNum - 1][1];            int endFoldIndex=startFoldIndex + foldSize - 1;            for (int currentFoldIndex=startFoldIndex; currentFoldIndex <= endFoldIndex; currentFoldIndex++) {              if (TP == null) {                TP=new Instances(data,currentSegment[currentFoldIndex],1);              } else {                TP.add(data.instance(currentSegment[currentFoldIndex]));              }            }          }        }        TP.randomize(random);        if (getTrainSize() > TP.numInstances()) {          throw new Exception("The training set size of " + getTrainSize() + ", is greater than the training pool "+ TP.numInstances());        }        Instances train=new Instances(TP,0,m_TrainSize);        Classifier current=AbstractClassifier.makeCopy(m_Classifier);        current.buildClassifier(train);        int currentTestIndex=foldIndex[j - 1][0];        int testFoldSize=foldIndex[j - 1][1];        int endTestIndex=currentTestIndex + testFoldSize - 1;        while (currentTestIndex <= endTestIndex) {          Instance testInst=data.instance(currentSegment[currentTestIndex]);          int pred=(int)current.classifyInstance(testInst);          if (pred != testInst.classValue()) {            m_Error++;          }          instanceProbs[currentSegment[currentTestIndex]][pred]++;          currentTestIndex++;        }        if (i == 1 && j == 1) {          int[] segmentElast=(int[])segmentList.lastElement();          for (currentIndex=0; currentIndex < segmentElast.length; currentIndex++) {            Instance testInst=data.instance(segmentElast[currentIndex]);            int pred=(int)current.classifyInstance(testInst);            if (pred != testInst.classValue()) {              m_Error++;            }            instanceProbs[segmentElast[currentIndex]][pred]++;          }        }      }    }  }  m_Error/=(double)(m_ClassifyIterations * data.numInstances());  m_KWBias=0.0;  m_KWVariance=0.0;  m_KWSigma=0.0;  m_WBias=0.0;  m_WVariance=0.0;  for (int i=0; i < data.numInstances(); i++) {    Instance current=data.instance(i);    double[] predProbs=instanceProbs[i];    double pActual, pPred;    double bsum=0, vsum=0, ssum=0;    double wBSum=0, wVSum=0;    Vector<Integer> centralTendencies=findCentralTendencies(predProbs);    if (centralTendencies == null) {      throw new Exception("Central tendency was null.");    }    for (int j=0; j < numClasses; j++) {      pActual=(current.classValue() == j) ? 1 : 0;      pPred=predProbs[j] / m_ClassifyIterations;      bsum+=(pActual - pPred) * (pActual - pPred) - pPred * (1 - pPred) / (m_ClassifyIterations - 1);      vsum+=pPred * pPred;      ssum+=pActual * pActual;    }    m_KWBias+=bsum;    m_KWVariance+=(1 - vsum);    m_KWSigma+=(1 - ssum);    for (int count=0; count < centralTendencies.size(); count++) {      int wB=0, wV=0;      int centralTendency=((Integer)centralTendencies.get(count)).intValue();      for (int j=0; j < numClasses; j++) {        if (j != (int)current.classValue() && j == centralTendency) {          wB+=predProbs[j];        }        if (j != (int)current.classValue() && j != centralTendency) {          wV+=predProbs[j];        }      }      wBSum+=(double)wB;      wVSum+=(double)wV;    }    m_WBias+=(wBSum / ((double)(centralTendencies.size() * m_ClassifyIterations)));    m_WVariance+=(wVSum / ((double)(centralTendencies.size() * m_ClassifyIterations)));  }  m_KWBias/=(2.0 * (double)data.numInstances());  m_KWVariance/=(2.0 * (double)data.numInstances());  m_KWSigma/=(2.0 * (double)data.numInstances());  m_WBias/=(double)data.numInstances();  m_WVariance/=(double)data.numInstances();  if (m_Debug) {    System.err.println("Decomposition finished");  }}  }
class C{  public void testGetLoginConfigAuthMethod() throws Exception {  String xml=WEBAPP_TEST_HEADER + "" + "  <login-config>"+ "    <auth-method>BASIC</auth-method>"+ "  </login-config>"+ "</web-app>";  WebXml webXml=WebXmlIo.parseWebXml(new ByteArrayInputStream(xml.getBytes("UTF-8")),getEntityResolver());  assertEquals("BASIC",WebXmlUtils.getLoginConfigAuthMethod(webXml));}  }
class C{  public AsyncHttpClient(int httpPort){  this(false,httpPort,443);}  }
class C{  boolean isAccepted(final String name){  for (  String str : encodings) {    if (str.equalsIgnoreCase(name)) {      return true;    }  }  return false;}  }
class C{  public void writeFooter(FileFooter footer,long currentPosition) throws IOException {  ThriftWriter thriftWriter=openThriftWriter(filePath);  footer.setVersion(VERSION_NUMBER);  try {    thriftWriter.write(footer);    thriftWriter.writeOffset(currentPosition);  } catch (  Exception e) {    throw e;  } finally {    thriftWriter.close();  }}  }
class C{  public CDNTest(String name){  super(name);}  }
class C{  private Route nextPostponed(){  return postponedRoutes.remove(0);}  }
class C{  public void close(){  setSendKeepAliveMessageInterval(SEND_KEEP_ALIVE_MESSAGE_INTERVAL_NOT_SPECIFIED);}  }
class C{  public static EndpointDescription[] selectByMessageSecurityMode(EndpointDescription[] searchSet,MessageSecurityMode mode){  List<EndpointDescription> result=new ArrayList<EndpointDescription>();  for (  EndpointDescription d : searchSet)   if (d.getSecurityMode() == mode)   result.add(d);  return result.toArray(new EndpointDescription[result.size()]);}  }
class C{  private void attribute(String segment){  String attribute=style.getAttribute(segment);  prefixes.add(null);  names.add(attribute);}  }
class C{  public static Stream<? extends Map.Entry<String,Stream<? extends Map.Entry<String,Double>>>> flattenFeatureAsStream(FeatureVector featureVector){  return flattenFeatureWithDropoutAsStream(featureVector,0.0,0);}  }
class C{  public boolean isActive(){  try {    if (hasFlag(FLAG_UP)) {      for (      byte b : mAddr.getAddress().getAddress()) {        if (b != 0)         return true;      }    }  } catch (  NullPointerException e) {    return false;  }  return false;}  }
class C{  public void runTest() throws Throwable {  String localName="domestic";  String namespaceURI="http://www.nomatch.com";  Document doc;  NodeList elementList;  Element testNode;  boolean state;  doc=(Document)load("staffNS",false);  elementList=doc.getElementsByTagName("address");  testNode=(Element)elementList.item(0);  state=testNode.hasAttributeNS(namespaceURI,localName);  assertFalse("throw_False",state);}  }
class C{  public static String uriToDatastorePath(URI uri){  if (uri == null) {    return null;  }  if (!SCHEME_DATASTORE.equals(uri.getScheme())) {    throw new IllegalArgumentException("Expected datastore scheme, found" + uri);  }  String path=uri.getSchemeSpecificPart();  path=stripLeadingSlashes(path);  int i;  i=path.indexOf('/');  if (i <= 0) {    throw new IllegalArgumentException("Path to datastore not found:" + uri);  }  String ds=path.substring(0,i);  path=path.substring(i + 1);  return String.format("[%s] %s",ds,path);}  }
class C{  public void focusLost(FocusEvent e){}  }
class C{  public InstanceExistsException(String message,Throwable cause){  super(message,cause);}  }
class C{  public String nonFinalSignatureString(){  return signatureString("");}  }
class C{  public static byte[] decodeBase64(byte[] base64Data){  base64Data=discardNonBase64(base64Data);  if (base64Data.length == 0) {    return new byte[0];  }  int numberQuadruple=base64Data.length / FOURBYTE;  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;  int encodedIndex=0;  int dataIndex=0;{    int lastData=base64Data.length;    while (base64Data[lastData - 1] == PAD) {      if (--lastData == 0) {        return new byte[0];      }    }    decodedData=new byte[lastData - numberQuadruple];  }  for (int i=0; i < numberQuadruple; i++) {    dataIndex=i * 4;    marker0=base64Data[dataIndex + 2];    marker1=base64Data[dataIndex + 3];    b1=base64Alphabet[base64Data[dataIndex]];    b2=base64Alphabet[base64Data[dataIndex + 1]];    if (marker0 != PAD && marker1 != PAD) {      b3=base64Alphabet[marker0];      b4=base64Alphabet[marker1];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);    } else     if (marker0 == PAD) {      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);    } else     if (marker1 == PAD) {      b3=base64Alphabet[marker0];      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      decodedData[encodedIndex + 1]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    }    encodedIndex+=3;  }  return decodedData;}  }
class C{  public int add(SearchResultDataLine tl,int row){  boolean isNotJunk=junkFilter.allow(tl);  boolean allow=allow(tl);  if (isNotJunk || !SearchSettings.hideJunk()) {    if (allow) {      return super.add(tl,row);    } else {      HIDDEN.add(tl);      _numResults+=1;    }  } else {    _numResults+=1;  }  return -1;}  }
class C{  public CCSprite(Bitmap image){  assert image != null : "Invalid CGImageRef for sprite";  String key=image.toString();  CCTexture2D texture=CCTextureCache.sharedTextureCache().addImage(image,key);  CGSize size=texture.getContentSize();  CGRect rect=CGRect.make(0,0,size.width,size.height);  init(texture,rect);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  protected TeXFormula(TeXParser tp,String s) throws ParseException {  this(tp,s,null);}  }
class C{  public List<Integer> diffWaysToCompute(String input){  List<Integer> res=new LinkedList<>();  for (int i=0; i < input.length(); i++) {    char c=input.charAt(i);    if (c == '*' || c == '-' || c == '+') {      List<Integer> left=diffWaysToCompute(input.substring(0,i));      List<Integer> right=diffWaysToCompute(input.substring(i + 1,input.length()));      for (int j=0; j < left.size(); j++) {        for (int k=0; k < right.size(); k++) {          res.add(calculate(c,left.get(j),right.get(k)));        }      }    }  }  if (res.size() == 0) {    res.add(Integer.parseInt(input));  }  return res;}  }
class C{  public FetchExport(){  super();}  }
class C{  public void addAttachment(Attachment attachment){  addProperty(attachment);}  }
class C{  @Override public boolean execute(final String[] params,final String remainder){  final RPAction emote=new RPAction();  emote.put("type","emote");  emote.put("text",remainder);  ClientSingletonRepository.getClientFramework().send(emote);  return true;}  }
class C{  public final String levelDataToString(){  if ((this.getKind() == ModuleInstanceKind) || (this.getKind() == NumberedProofStepKind)) {    return "";  }  ;  if (this.arity < 0) {    return "Arity: " + this.arity + "\n"+ "Level: "+ this.getLevel()+ "\n"+ "MaxLevel: "+ this.maxLevels[0]+ "\n";  } else {    String maxLevelStr="";    for (int i=0; i < this.maxLevels.length; i++) {      if (i > 0) {        maxLevelStr=maxLevelStr + ", ";      }      ;      maxLevelStr=maxLevelStr + this.maxLevels[i];    }    ;    String isLeibnizArgStr="";    for (int i=0; i < this.isLeibnizArg.length; i++) {      if (i > 0) {        isLeibnizArgStr=isLeibnizArgStr + ", ";      }      ;      isLeibnizArgStr=isLeibnizArgStr + this.isLeibnizArg[i];    }    ;    String opLevelCondStr="";    if (opLevelCond != null) {      opLevelCondStr="[";      for (int i=0; i < opLevelCond.length; i++) {        opLevelCondStr=opLevelCondStr + " [";        for (int j=0; j < opLevelCond[i].length; j++) {          opLevelCondStr=opLevelCondStr + " [";          for (int k=0; k < opLevelCond[i][j].length; k++) {            String foo=" ";            if (k == 0) {              foo="";            }            opLevelCondStr=opLevelCondStr + foo + this.opLevelCond[i][j][k];          }          opLevelCondStr=opLevelCondStr + "]";        }        opLevelCondStr=opLevelCondStr + "]";      }      ;      opLevelCondStr=opLevelCondStr + "]";    }    ;    return "Arity: " + this.arity + "\n"+ "Level: "+ this.getLevel()+ "\n"+ "LevelParams: "+ this.getLevelParams()+ "\n"+ "LevelConstraints: "+ this.getLevelConstraints()+ "\n"+ "ArgLevelConstraints: "+ this.getArgLevelConstraints()+ "\n"+ "ArgLevelParams: "+ ALPHashSetToString(this.getArgLevelParams())+ "\n"+ "MaxLevel: "+ maxLevelStr+ "\n"+ "opLevelCond: "+ opLevelCondStr+ "\n"+ "AllParams: "+ HashSetToString(this.getAllParams())+ "\n"+ "NonLeibnizParams: "+ HashSetToString(this.getNonLeibnizParams())+ "\n"+ "IsLeibniz: "+ this.isLeibniz+ "\n"+ "isLeibnizArg: "+ isLeibnizArgStr+ "\n";  }}  }
class C{  public static <T>T adaptTo(final Object o,final Class<T> cl){  return adaptTo(o,cl,cl);}  }
class C{  public static DCCppMessage makeWriteDCCPacketProgMsg(int register,int num_bytes,byte bytes[]){  if (register < 0 || register > DCCppConstants.MAX_MAIN_REGISTERS)   return (null);  if (num_bytes < 2 || num_bytes > 5)   return (null);  DCCppMessage m=new DCCppMessage(DCCppConstants.WRITE_DCC_PACKET_PROG);  for (int k=0; k < num_bytes; k++) {    m.myMessage.append(" " + bytes[k]);  }  m.myRegex=DCCppConstants.WRITE_DCC_PACKET_PROG_REGEX;  return (m);}  }
class C{  @SuppressWarnings("rawtypes") public static AbstractLiteralIV createInlineIV(final long value){  if (value < 256L) {    return new XSDUnsignedByteIV((byte)(value + Byte.MIN_VALUE));  }  if (value < 65536L) {    return new XSDUnsignedShortIV((short)(value + Short.MIN_VALUE));  }  if (value < 4294967296L) {    return new XSDUnsignedIntIV((int)(value + Integer.MIN_VALUE));  }  return new XSDUnsignedLongIV(value + Long.MIN_VALUE);}  }
class C{  public Builder cachePolicy(@Cache.Policy int cachePolicy){  this.cachePolicy=cachePolicy;  return this;}  }
class C{  public SqlWrapper(Database connection) throws SQLException {  this.connection=connection;  statement=connection.createStatement();}  }
class C{  public MethodElement(String methodSignature,String methodName,TypeElement classElement){  super();  this.methodSignature=methodSignature;  this.methodName=methodName;  this.classElement=classElement;}  }
class C{  public boolean hasClassRetention(){  return this.classRetention;}  }
class C{  private long addInputFilesRecursively(Path path,Writer writer,FileSystem fs,PathFilter pathFilter) throws IOException {  long numFiles=0;  for (  FileStatus stat : fs.listStatus(path,pathFilter)) {    LOG.debug("Adding path {}",stat.getPath());    if (stat.isDirectory()) {      numFiles+=addInputFilesRecursively(stat.getPath(),writer,fs,pathFilter);    } else {      writer.write(stat.getPath().toString() + "\n");      numFiles++;    }  }  return numFiles;}  }
class C{  private void readContent(){  StringBuffer contentReader=new StringBuffer();  BufferedReader br=null;  try {    br=new BufferedReader(new FileReader(getLogfile()));    while (br.ready()) {      contentReader.append(br.readLine());      contentReader.append("\n");    }  } catch (  IOException ex) {    ex.printStackTrace();    contentReader.append("The Logfile unavailable! " + ex.getMessage());  } finally {    try {      br.close();    } catch (    IOException ex) {      ex.printStackTrace();    }  }  content=new SoftReference(contentReader);}  }
class C{  public static int copy(Reader input,Writer output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  private boolean startNodeRepair(String keySpaceName,int maxRetryTimes,boolean crossVdc,boolean noNewReapir) throws Exception {  DbRepairRunnable runnable=new DbRepairRunnable(jmxServer,this.executor,this.coordinator,keySpaceName,this.schemaUtil.isGeoDbsvc(),maxRetryTimes,noNewReapir);  runnable.preConfig();synchronized (runnable) {    this.executor.submit(runnable);    runnable.wait();  }switch (runnable.getStatus()) {case ALREADY_RUNNING:    return true;case NOT_THE_TIME:  return false;case NOTHING_TO_RESUME:return false;}return true;}  }
class C{  public Interval2D(Interval1D x,Interval1D y){  this.x=x;  this.y=y;}  }
class C{  public ZkClient(ZkConf zkConf){  client=CuratorFrameworkFactory.newClient(getZkServerPorts(zkConf.getZkServers(),zkConf.getZkPort()),zkConf.getZkSessionTimeout(),zkConf.getZkConnectionTimeout(),new RetryNTimes(zkConf.getRetryTimes(),zkConf.getSleepMsBetweenRetries()));}  }
class C{  private boolean isStopped(){  if (mEyePosition.y >= mIrisPosition.y) {    return false;  }  float irisOffsetY=mIrisPosition.y - mEyePosition.y;  float maxDistance=mEyeRadius - mIrisRadius;  if (irisOffsetY < maxDistance) {    return false;  }  return (isZero(vx) && isZero(vy));}  }
class C{  public void buildCluster(){  try {    if (protocolVersion != null && protocolVersion.length() != 0) {      ProtocolVersion version=getCassandraProtocolVersion();      cluster=Cluster.builder().addContactPoint(node).withCredentials(userName,password).withProtocolVersion(version).build();    } else {      cluster=Cluster.builder().addContactPoint(node).withCredentials(userName,password).build();    }  } catch (  DriverException ex) {    throw new RuntimeException("closing database resource",ex);  }catch (  Throwable t) {    DTThrowable.rethrow(t);  }}  }
class C{  public KMZWriter(final String outFilename){  log.setLevel(Level.INFO);  String filename=outFilename;  if (filename.endsWith(".kml") || filename.endsWith(".kmz")) {    filename=filename.substring(0,filename.length() - 4);  }  try {    this.zipOut=new ZipOutputStream(new FileOutputStream(filename + ".kmz"));    this.out=new BufferedWriter(new OutputStreamWriter(this.zipOut,"UTF8"));  } catch (  IOException e) {    e.printStackTrace();  }  KmlType docKML=kmlObjectFactory.createKmlType();  NetworkLinkType nl=kmlObjectFactory.createNetworkLinkType();  LinkType link=kmlObjectFactory.createLinkType();  link.setHref("main.kml");  nl.setLink(link);  docKML.setAbstractFeatureGroup(kmlObjectFactory.createNetworkLink(nl));  writeKml("doc.kml",docKML);}  }
class C{  public String noiseRateTipText(){  return "The noise rate to use.";}  }
class C{  public ProductHistory(Product c){  super(c);  if (c.getVendor() != null) {    setVendorObjKey(c.getVendor().getKey());  }  if (c.getPriceModel() != null) {    setPriceModelObjKey(Long.valueOf(c.getPriceModel().getKey()));  }  if (c.getTechnicalProduct() != null) {    setTechnicalProductObjKey(c.getTechnicalProduct().getKey());  }  if (c.getParameterSet() != null) {    setParameterSetObjKey(Long.valueOf(c.getParameterSet().getKey()));  }  if (c.getTemplate() != null) {    setTemplateObjKey(Long.valueOf(c.getTemplate().getKey()));  }  if (c.getTargetCustomer() != null) {    setTargetCustomerObjKey(Long.valueOf(c.getTargetCustomer().getKey()));  }}  }
class C{  public static void closeComment(){  Log.write(" -->");}  }
class C{  public static Date str2Date(String s){  return str2Date(s,DATE_FORMAT);}  }
class C{  public void onDrawerClosed(View view){  super.onDrawerClosed(view);  mActionBar.setTitle(mTitle);}  }
class C{  public synchronized void startPreview(){  Camera theCamera=camera;  if (theCamera != null && !previewing) {    theCamera.startPreview();    previewing=true;    autoFocusManager=new AutoFocusManager(context,camera);  }}  }
class C{  public StringRequest(String url,Listener<String> listener,ErrorListener errorListener){  this(Method.GET,url,listener,errorListener);}  }
class C{  private void resumeTimer(){  startTimer(mPlayerPlaylist.getCurrentTrack().getDurationInMilli() - mMediaPlayer.getCurrentPosition());}  }
class C{  private Map<String,Coord> readFacilityLocations(String fileName){  FacilityParser fp=new FacilityParser();  TabularFileParserConfig config=new TabularFileParserConfig();  config.setDelimiterRegex("\t");  config.setCommentRegex("#");  config.setFileName(fileName);  new TabularFileParser().parse(config,fp);  return fp.getFacilityMap();}  }
class C{  public static boolean isExcluded(Class<?> cls){  Boolean res=cache.get(cls);  if (res == null) {    res=isExcluded0(cls);    cache.put(cls,res);  }  return res;}  }
class C{  public static void write(short x){  writeByte((x >>> 8) & 0xff);  writeByte((x >>> 0) & 0xff);}  }
class C{  public void testSecretKeyFactory10() throws InvalidKeyException, InvalidKeySpecException {  if (!DEFSupported) {    fail(NotSupportMsg);    return;  }  byte[] bb=new byte[24];  KeySpec ks=(defaultAlgorithm.equals(defaultAlgorithm2) ? (KeySpec)new DESKeySpec(bb) : (KeySpec)new DESedeKeySpec(bb));  KeySpec rks=null;  SecretKeySpec secKeySpec=new SecretKeySpec(bb,defaultAlgorithm);  SecretKey secKey=null;  SecretKeyFactory[] skF=createSKFac();  assertNotNull("SecretKeyFactory object were not created",skF);  for (int i=0; i < skF.length; i++) {    try {      skF[i].generateSecret(null);      fail("generateSecret(null): InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }    secKey=skF[i].generateSecret(ks);    try {      skF[i].getKeySpec(null,null);      fail("getKeySpec(null,null): InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }    try {      skF[i].getKeySpec(null,ks.getClass());      fail("getKeySpec(null, Class): InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }    try {      skF[i].getKeySpec(secKey,null);      fail("getKeySpec(secKey, null): NullPointerException or InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }catch (    NullPointerException e) {    }    try {      Class c;      if (defaultAlgorithm.equals(defaultAlgorithm2)) {        c=DESedeKeySpec.class;      } else {        c=DESKeySpec.class;      }      skF[i].getKeySpec(secKeySpec,c);      fail("getKeySpec(secKey, Class): InvalidKeySpecException must be thrown");    } catch (    InvalidKeySpecException e) {    }    rks=skF[i].getKeySpec(secKeySpec,ks.getClass());    if (defaultAlgorithm.equals(defaultAlgorithm1)) {      assertTrue("Incorrect getKeySpec() result 1",rks instanceof DESedeKeySpec);    } else {      assertTrue("Incorrect getKeySpec() result 1",rks instanceof DESKeySpec);    }    rks=skF[i].getKeySpec(secKey,ks.getClass());    if (defaultAlgorithm.equals(defaultAlgorithm1)) {      assertTrue("Incorrect getKeySpec() result 2",rks instanceof DESedeKeySpec);    } else {      assertTrue("Incorrect getKeySpec() result 2",rks instanceof DESKeySpec);    }  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  WhiteboxRaster image;  int cols, rows;  double z;  float progress=0;  int col, row;  int a, i;  double classSize=-9999;  double startingClass=-9999;  double endingClass=-9999;  int numClasses=-9999;  double[] histo;  boolean blnCumulative=false;  int classVal=0;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      classSize=Double.parseDouble(args[i]);    } else     if (i == 2) {      if (!args[i].toLowerCase().equals("not specified")) {        startingClass=Double.parseDouble(args[i]);      }    } else     if (i == 3) {      if (!args[i].toLowerCase().equals("not specified")) {        endingClass=Double.parseDouble(args[i]);      }    } else     if (i == 4) {      if (args[i].toLowerCase().equals("true")) {        blnCumulative=true;      }    }  }  if (inputHeader == null) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  if (classSize <= 0) {    showFeedback("Class size must be larger than zero.");    return;  }  try {    image=new WhiteboxRaster(inputHeader,"r");    rows=image.getNumberRows();    cols=image.getNumberColumns();    double noData=image.getNoDataValue();    if (startingClass == -9999) {      startingClass=image.getMinimumValue();    }    if (endingClass == -9999) {      endingClass=image.getMaximumValue();    }    double endingClassEndingVal=endingClass + classSize;    numClasses=(int)((endingClassEndingVal - startingClass) / classSize);    histo=new double[numClasses];    updateProgress("Calculating histogram:",0);    double[] data;    for (row=0; row < rows; row++) {      data=image.getRowValues(row);      for (col=0; col < cols; col++) {        if (data[col] != noData) {          classVal=(int)(Math.floor((data[col] - startingClass) / classSize));          if (classVal < numClasses && classVal > 0) {            histo[classVal]++;          }        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress("Calculating image average:",(int)progress);    }    image.close();    if (blnCumulative) {      for (a=1; a < numClasses; a++) {        histo[a]=histo[a] + histo[a - 1];      }      for (a=0; a < numClasses; a++) {        histo[a]=histo[a] / histo[numClasses - 1];      }    }    String retstr=null;    retstr="HISTOGRAM\n";    retstr=retstr + "Input image:\t" + image.getShortHeaderFile()+ "\n";    retstr=retstr + "Cumulative:\t" + Boolean.toString(blnCumulative)+ "\n\n";    retstr=retstr + "Bin\t" + "Freq.\t"+ "\n";    if (!blnCumulative) {      for (a=0; a < numClasses; a++) {        z=a * classSize + startingClass;        retstr=retstr + z + "\t"+ (int)(histo[a])+ "\n";      }    } else {      DecimalFormat df=new DecimalFormat("0.0000");      for (a=0; a < numClasses; a++) {        z=a * classSize + startingClass;        retstr=retstr + z + "\t"+ df.format(histo[a])+ "\n";      }    }    returnData(retstr);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  public <T>Iterable<T> loadObjects(final Class<T> loadClass,final Criteria criteria,final Optional<Set<Order>> sortingRules,final Optional<Pagination> pagination){  if (sortingRules.isPresent()) {    sortingRules.get().forEach(null);  }  if (pagination.isPresent()) {    final Pagination paginationData=pagination.get();    paginationData.evaluate(loadClass);    criteria.setFirstResult(paginationData.getOffset());    criteria.setMaxResults(paginationData.getLimit());  }  if (isScrollEnabled) {    return new ScrollableIterator(criteria.scroll(scrollMode));  }  return criteria.list();}  }
class C{  public ExpressionParserBuilder withCompatibility(OperatorVersion version){  if (version.isAtMost(OLD_EXPRESSION_PARSER_FUNCTIONS)) {    compatibleWithOldParser=true;  }  return this;}  }
class C{  public static void editLocalInstructionComment(final SQLProvider provider,final Integer commentId,final Integer userId,final String newComment) throws CouldntSaveDataException {  Preconditions.checkNotNull(provider,"IE02441: provider argument can not be null");  Preconditions.checkNotNull(commentId,"IE02442: commentId argument can not be null");  Preconditions.checkNotNull(userId,"IE02443: userId argument can not be null");  Preconditions.checkNotNull(newComment,"IE02444: newComment argument can not be null");  PostgreSQLCommentFunctions.editComment(provider,commentId,userId,newComment);}  }
class C{  public void resetLengthForReceive(){  this.length=userSuppliedLength;}  }
class C{  private void dynInit(){  Object Processing=gridTab.getValue("Processing");  String OrderType=Env.getContext(Env.getCtx(),gridTab.getWindowNo(),"OrderType");  String IsSOTrx=Env.getContext(Env.getCtx(),gridTab.getWindowNo(),"IsSOTrx");  if (DocStatus == null) {    return;  }  logger.fine("DocStatus=" + DocStatus + ", DocAction="+ DocAction+ ", OrderType="+ OrderType+ ", IsSOTrx="+ IsSOTrx+ ", Processing="+ Processing+ ", AD_Table_ID="+ gridTab.getAD_Table_ID()+ ", Record_ID="+ gridTab.getRecord_ID());  int index=0;  if (lstDocAction.getSelectedItem() != null) {    String selected=(lstDocAction.getSelectedItem().getValue()).toString();    for (int i=0; i < s_value.length && index == 0; i++) {      if (s_value[i].equals(selected)) {        index=i;      }    }  }  String[] options=new String[s_value.length];  String wfStatus=MWFActivity.getActiveInfo(Env.getCtx(),m_AD_Table_ID,gridTab.getRecord_ID());  if (wfStatus != null) {    FDialog.error(gridTab.getWindowNo(),this,"WFActiveForRecord",wfStatus);    return;  }  if (!checkStatus(gridTab.getTableName(),gridTab.getRecord_ID(),DocStatus)) {    FDialog.error(gridTab.getWindowNo(),this,"DocumentStatusChanged");    return;  }  String[] docActionHolder=new String[]{DocAction};  index=DocumentEngine.getValidActions(DocStatus,Processing,OrderType,IsSOTrx,m_AD_Table_ID,docActionHolder,options);  MTable table=MTable.get(Env.getCtx(),m_AD_Table_ID);  PO po=table.getPO(gridTab.getRecord_ID(),null);  if (po instanceof DocOptions)   index=((DocOptions)po).customizeValidActions(DocStatus,Processing,OrderType,IsSOTrx,m_AD_Table_ID,docActionHolder,options,index);  Integer doctypeId=(Integer)gridTab.getValue("C_DocType_ID");  if (doctypeId == null || doctypeId.intValue() == 0) {    doctypeId=(Integer)gridTab.getValue("C_DocTypeTarget_ID");  }  logger.fine("get doctype: " + doctypeId);  if (doctypeId != null) {    index=DocumentEngine.checkActionAccess(Env.getAD_Client_ID(Env.getCtx()),Env.getAD_Role_ID(Env.getCtx()),doctypeId,options,index);  }  DocAction=docActionHolder[0];  boolean firstadded=true;  for (int i=0; i < index; i++) {    boolean added=false;    for (int j=0; j < s_value.length && !added; j++) {      if (options[i].equals(s_value[j])) {        Listitem newitem=lstDocAction.appendItem(s_name[j],s_value[j]);        if (firstadded) {          lstDocAction.setSelectedItem(newitem);          firstadded=false;        }        added=true;      }    }  }  List<Listitem> lst=(List<Listitem>)lstDocAction.getItems();  for (  Listitem item : lst) {    String value=item.getValue().toString();    if (DocAction.equals(value)) {      lstDocAction.setSelectedItem(item);      label.setValue(s_description[getSelectedIndex()]);    }  }  if (DocAction.equals("--"))   DocAction=DocumentEngine.ACTION_Close;}  }
class C{  public static void printMemoryLayout2(){  Object o1=new Object();  Object o2=new Object();  Byte b1=new Byte((byte)0x12);  Byte b2=new Byte((byte)0x34);  Byte b3=new Byte((byte)0x56);  Long l=new Long(0x0123456789ABCDEFL);  Person p=new Person("Bob",406425600000L,'M');  System.out.printf("Object len:%d header:%d\n",UnsafeHelper.sizeOf(o1),UnsafeHelper.headerSize(o1));  UnsafeHelper.hexDump(System.out,o1);  UnsafeHelper.hexDump(System.out,o2);  System.out.printf("Byte len:%d header:%d\n",UnsafeHelper.sizeOf(b1),UnsafeHelper.headerSize(b1));  UnsafeHelper.hexDump(System.out,b1);  UnsafeHelper.hexDump(System.out,b2);  UnsafeHelper.hexDump(System.out,b3);  Byte[] bArray0=new Byte[]{};  Byte[] bArray1=new Byte[]{b1};  Byte[] bArray2=new Byte[]{b1,b2};  Byte[] bArray3=new Byte[]{b1,b2,b3};  System.out.printf("Byte[0] len:%d header:%d\n",UnsafeHelper.sizeOf(bArray0),UnsafeHelper.headerSize(bArray0));  UnsafeHelper.hexDump(System.out,bArray0);  System.out.printf("Byte[1] len:%d header:%d\n",UnsafeHelper.sizeOf(bArray1),UnsafeHelper.headerSize(bArray1));  UnsafeHelper.hexDump(System.out,bArray1);  System.out.printf("Byte[2] len:%d header:%d\n",UnsafeHelper.sizeOf(bArray2),UnsafeHelper.headerSize(bArray2));  UnsafeHelper.hexDump(System.out,bArray2);  System.out.printf("Byte[3] len:%d header:%d\n",UnsafeHelper.sizeOf(bArray3),UnsafeHelper.headerSize(bArray3));  UnsafeHelper.hexDump(System.out,bArray3);  System.out.printf("Long len:%d header:%d\n",UnsafeHelper.sizeOf(l),UnsafeHelper.headerSize(l));  UnsafeHelper.hexDump(System.out,l);  System.out.printf("Person len:%d header:%d\n",UnsafeHelper.sizeOf(p),UnsafeHelper.headerSize(p));  UnsafeHelper.hexDump(System.out,p);}  }
class C{  public MimeBodyPart(byte[] body,MimeContentType contentType){  this();  setContent(body,contentType);}  }
class C{  @Override public void scatter(final IGASState<CC.VS,CC.ES,Value> state,final IGASScheduler sch,final Value u,final Statement e){  final Value v=state.getOtherVertex(u,e);  sch.schedule(v);}  }
class C{  public static PreviousExpression previousTail(int index,String property){  PreviousExpression expr=new PreviousExpression(index,property);  expr.setType(PreviousExpressionType.PREVTAIL);  return expr;}  }
class C{  public URI(URI p_other){  initialize(p_other);}  }
class C{  public GlowMonster(Location loc,EntityType type,double maxHealth){  super(loc,type,maxHealth);}  }
class C{  public void removeAllElements(){  m_firstFree=0;  m_buildCache=m_map0;  m_buildCacheStartIndex=0;}  }
class C{  public boolean close(){  if (m_nativeCallgraphView.isLoaded() && !m_nativeCallgraphView.close()) {    return false;  }  if (!closeViews(m_nativeFlowgraphs)) {    return false;  }  if (!closeViews(m_customViews)) {    return false;  }  for (  final INaviView view : m_customViews) {    view.removeListener(m_viewListener);  }  for (  final INaviView view : m_nativeFlowgraphs) {    view.removeListener(m_viewListener);  }  return true;}  }
class C{  public void addSplitEdges(List edgeList){  addEndpoints();  Iterator it=iterator();  EdgeIntersection eiPrev=(EdgeIntersection)it.next();  while (it.hasNext()) {    EdgeIntersection ei=(EdgeIntersection)it.next();    Edge newEdge=createSplitEdge(eiPrev,ei);    edgeList.add(newEdge);    eiPrev=ei;  }}  }
class C{  private Sha256Hash calculateHash(){  try {    ByteArrayOutputStream bos=new UnsafeByteArrayOutputStream(HEADER_SIZE);    writeHeader(bos);    return new Sha256Hash(Utils.reverseBytes(doubleDigest(bos.toByteArray())));  } catch (  IOException e) {    throw new RuntimeException(e);  }}  }
class C{  public final int pointToPosition(final int x,final int y){  return getView().pointToPosition(x,y);}  }
class C{  @OnSave void disallowUnshardedSaves(){  if (!isShard) {    throw new UnshardedSaveException();  }}  }
class C{  public static String toString(byte[] input,String encoding) throws IOException {  return new String(input,Charsets.toCharset(encoding));}  }
class C{  public InputStream newInputStream(int index) throws IOException {synchronized (DiskLruCache.this) {    if (entry.currentEditor != this) {      throw new IllegalStateException();    }    if (!entry.readable) {      return null;    }    return new FileInputStream(entry.getCleanFile(index));  }}  }
class C{  public static String userAgentString(){  if (sUserAgentString == null) {    sUserAgentString=UA_HEADER_EXT_TO_EXT_CLIENT + UA_HEADER_OMA_SIMPLE_IM + TerminalInfo.getBuildInfo()+ WHITESPACE+ TerminalInfo.getClientInfo();  }  return sUserAgentString;}  }
class C{  public AsyncFileLock(FileChannel file) throws IOException {  Objects.requireNonNull(file);  if (!file.isOpen()) {    throw new IllegalArgumentException("param `file` is closed");  }  fileToLock=file;  closeChannel=false;}  }
class C{  @Override public void pushMessageAsync(Message msg) throws org.apache.thrift.TException {  pushMessageSync(msg);  return;}  }
class C{  public Geofence toGeofence(){  if (radius <= 0)   radius=400;  try {    return new Geofence.Builder().setRequestId(String.valueOf(id)).setTransitionTypes(Geofence.GEOFENCE_TRANSITION_ENTER | Geofence.GEOFENCE_TRANSITION_EXIT).setCircularRegion(latLng.latitude,latLng.longitude,radius).setExpirationDuration(Geofence.NEVER_EXPIRE).build();  } catch (  Exception ex) {    return null;  }}  }
class C{  public InferenceResult solveFromSubtypes(final Set<TypeVariable> remainingTargets,final ConstraintMap constraints,final AnnotatedTypeFactory typeFactory){  return glbSubtypes(remainingTargets,constraints,typeFactory);}  }
class C{  @Override public void beginWindow(long l){  once=false;}  }
class C{  public SesionesException(String message){  this(message,null);}  }
class C{  public void drawingComplete(OMGraphic omg,OMAction action){}  }
class C{  private void addContact(){  Intent intent=new Intent(this,ViewActivity.class);  startActivity(intent);}  }
class C{  public void endObject() throws IOException {  expect(JsonToken.END_OBJECT);}  }
class C{  public void paintSeparatorBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  public boolean isUpdateFile(){  return m_isUpdateFile;}  }
class C{  public String optString(String key,String defaultValue){  Object o=opt(key);  return o != null ? o.toString() : defaultValue;}  }
class C{  private void restoreDescendantState(UIComponent component,FacesContext context){  String id=component.getId();  component.setId(id);  Map<String,SavedState> saved=(Map<String,SavedState>)getStateHelper().get(PropertyKeys.saved);  if (component instanceof EditableValueHolder) {    EditableValueHolder input=(EditableValueHolder)component;    String clientId=component.getClientId(context);    SavedState state=(saved == null ? null : saved.get(clientId));    if (state == null) {      input.resetValue();    } else {      input.setValue(state.getValue());      input.setValid(state.isValid());      input.setSubmittedValue(state.getSubmittedValue());      input.setLocalValueSet(state.isLocalValueSet());    }  } else   if (component instanceof UIForm) {    UIForm form=(UIForm)component;    String clientId=component.getClientId(context);    SavedState state=(saved == null ? null : saved.get(clientId));    if (state == null) {      form.setSubmitted(false);    } else {      form.setSubmitted(state.getSubmitted());    }  }  if (component.getChildCount() > 0) {    for (    UIComponent kid : component.getChildren()) {      restoreDescendantState(kid,context);    }  }  if (component.getFacetCount() > 0) {    for (    UIComponent facet : component.getFacets().values()) {      restoreDescendantState(facet,context);    }  }}  }
class C{  public final QuadEdge invRot(){  return rot.sym();}  }
class C{  @Override public final int computeHashCode(double val){  return HashFunctions.hash(val);}  }
class C{  public ReactionFired createReactionFired(){  ReactionFiredImpl reactionFired=new ReactionFiredImpl();  return reactionFired;}  }
class C{  static public void sort(Object[] arr,Comparer c){  quickSort(arr,c,0,arr.length - 1);}  }
class C{  public BasicEntropySourceProvider(SecureRandom random,boolean isPredictionResistant){  _sr=random;  _predictionResistant=isPredictionResistant;}  }
class C{  public CompilationPrinter(OutputStream os){  out=new LogStream(os);}  }
class C{  private IContainer createFolderPath(IPath path,IContainer parent,IProgressMonitor monitor){  IContainer activeContainer=parent;  if (null != monitor) {    monitor.beginTask("Creating folders",path.segmentCount());  }  for (  String segment : path.segments()) {    IFolder folderToCreate=activeContainer.getFolder(new Path(segment));    try {      if (!folderToCreate.exists()) {        createFolder(segment,activeContainer,monitor);      }      if (null != monitor) {        monitor.worked(1);      }      activeContainer=folderToCreate;    } catch (    CoreException e) {      LOGGER.error("Failed to create module folders.",e);      MessageDialog.open(MessageDialog.ERROR,getShell(),FAILED_TO_CREATE_FOLDER_TITLE,String.format(FAILED_TO_CREATE_FOLDER_MESSAGE,folderToCreate.getFullPath().toString(),e.getMessage()),SWT.NONE);      break;    }  }  return activeContainer;}  }
class C{  public void stopWriting(){  this.stop.set(true);}  }
class C{  public STGroupFile(URL url,String encoding,char delimiterStartChar,char delimiterStopChar){  super(delimiterStartChar,delimiterStopChar);  this.url=url;  this.encoding=encoding;  this.fileName=null;}  }
class C{  public void add(char ch){  if (i == b.length) {    char[] new_b=new char[i + INC];    for (int c=0; c < i; c++)     new_b[c]=b[c];    b=new_b;  }  b[i++]=ch;}  }
class C{  public void onCreate(Bundle savedInstanceState){  mSlidingMenu=new SlidingMenu(mActivity);}  }
class C{  public void onStart(String url){}  }
class C{  public Message last(){  if (history.isEmpty()) {    return null;  }  return history.get(history.size() - 1);}  }
class C{  public BytecodeInstruction createFakeInstruction(String className,String methodName){  AbstractInsnNode fakeNode=new InsnNode(Opcodes.NOP);  int instructionId=getInstructionsIn(className,methodName).size();  BytecodeInstruction instruction=new BytecodeInstruction(classLoader,className,methodName,instructionId,-1,fakeNode);  registerInstruction(instruction);  return instruction;}  }
class C{  public boolean isCyclicFocus(){  return cyclicFocus;}  }
class C{  public final boolean isActive(){  return getState().isActive();}  }
class C{  public RangeCategorySeries(String title){  super(title);}  }
class C{  public static int instructionToLine(final INaviCodeNode codeNode,final INaviInstruction instruction){  Preconditions.checkNotNull(instruction,"IE00059: Instruction argument can not be null");  Preconditions.checkNotNull(codeNode,"IE02530: codeNode argument can not be null");  int lineCounter=getInitialLineCounter(codeNode);  final HashMap<INaviInstruction,INaviFunction> functionMap=CReferenceFinder.getCodeReferenceMap(codeNode);  for (  final INaviInstruction inst : codeNode.getInstructions()) {    if (inst == instruction) {      return lineCounter;    }    lineCounter+=getInstructionLineCount(codeNode,inst,functionMap.get(inst));  }  throw new IllegalArgumentException("IE00060: Instruction is not part of the node");}  }
class C{  public Matrix3d rotateYXZ(Vector3d angles){  return rotateYXZ(angles.y,angles.x,angles.z);}  }
class C{  public static void main(String... a) throws Exception {  TestBase.createCaller().init().test();}  }
class C{  public XBeePacket(int[] frameData){  Checksum checksum=new Checksum();  for (  int aFrameData : frameData) {    checksum.addByte(aFrameData);  }  checksum.compute();  packet=new int[frameData.length + 4];  packet[0]=SpecialByte.START_BYTE.getValue();  XBeePacketLength length=new XBeePacketLength(frameData.length);  packet[1]=length.getMsb();  packet[2]=length.getLsb();  for (int i=0; i < frameData.length; i++) {    if (frameData[i] > 255) {      throw new RuntimeException("Packet values must not be greater than one byte (255): " + frameData[i]);    }    packet[3 + i]=frameData[i];  }  packet[packet.length - 1]=checksum.getChecksum();  int preEscapeLength=packet.length;  packet=escapePacket(packet);  if (log.isDebugEnabled()) {    StringBuilder stringBuilder=new StringBuilder();    stringBuilder.append("Packet: ");    for (int i=0; i < packet.length; i++) {      stringBuilder.append(ByteUtils.toBase16(packet[i]));      if (i < packet.length - 1) {        stringBuilder.append(" ");      }    }    log.debug(stringBuilder);    log.debug("pre-escape packet size is " + preEscapeLength + ", post-escape packet size is "+ packet.length);  }}  }
class C{  @Override public boolean allocateHostForVm(Vm vm){  int requiredPes=vm.getNumberOfPes();  boolean result=false;  int tries=0;  List<Integer> freePesTmp=new ArrayList<Integer>();  for (  Integer freePes : getFreePes()) {    freePesTmp.add(freePes);  }  if (!getVmTable().containsKey(vm.getUid())) {    do {      int moreFree=Integer.MIN_VALUE;      int idx=-1;      for (int i=0; i < freePesTmp.size(); i++) {        if (freePesTmp.get(i) > moreFree) {          moreFree=freePesTmp.get(i);          idx=i;        }      }      Host host=getHostList().get(idx);      result=host.vmCreate(vm);      if (result) {        getVmTable().put(vm.getUid(),host);        getUsedPes().put(vm.getUid(),requiredPes);        getFreePes().set(idx,getFreePes().get(idx) - requiredPes);        result=true;        break;      } else {        freePesTmp.set(idx,Integer.MIN_VALUE);      }      tries++;    } while (!result && tries < getFreePes().size());  }  return result;}  }
class C{  public boolean isAllGranted(){  int count=0;  for (int i=0; i < mPerms.size(); i++) {    if (mPerms.get(mUserPermission.get(i)) == PackageManager.PERMISSION_GRANTED)     count++;  }  return count == mPerms.size();}  }
class C{  public static String maxCommonPrefix(String one,String two){  final int minLength=Math.min(one.length(),two.length());  final StringBuilder sb=new StringBuilder(minLength);  for (int pos=0; pos < minLength; pos++) {    final char currentChar=one.charAt(pos);    if (currentChar != two.charAt(pos)) {      break;    }    sb.append(currentChar);  }  return sb.toString();}  }
class C{  public AttributeSummaryPanel(){  JPanel simple=new JPanel();  GridBagLayout gbL=new GridBagLayout();  simple.setLayout(gbL);  JLabel lab=new JLabel("Name:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,0,0));  GridBagConstraints gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.EAST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=0;  gbC.gridx=0;  gbL.setConstraints(lab,gbC);  simple.add(lab);  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.WEST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=0;  gbC.gridx=1;  gbC.weightx=100;  gbC.gridwidth=3;  gbL.setConstraints(m_AttributeNameLab,gbC);  simple.add(m_AttributeNameLab);  m_AttributeNameLab.setBorder(BorderFactory.createEmptyBorder(0,5,0,10));  lab=new JLabel("Type:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,0,0));  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.EAST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=0;  gbC.gridx=4;  gbL.setConstraints(lab,gbC);  simple.add(lab);  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.WEST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=0;  gbC.gridx=5;  gbC.weightx=100;  gbL.setConstraints(m_AttributeTypeLab,gbC);  simple.add(m_AttributeTypeLab);  m_AttributeTypeLab.setBorder(BorderFactory.createEmptyBorder(0,5,0,10));  lab=new JLabel("Missing:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,5,0));  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.EAST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=1;  gbC.gridx=0;  gbL.setConstraints(lab,gbC);  simple.add(lab);  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.WEST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=1;  gbC.gridx=1;  gbC.weightx=100;  gbL.setConstraints(m_MissingLab,gbC);  simple.add(m_MissingLab);  m_MissingLab.setBorder(BorderFactory.createEmptyBorder(0,5,5,10));  lab=new JLabel("Distinct:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,5,0));  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.EAST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=1;  gbC.gridx=2;  gbL.setConstraints(lab,gbC);  simple.add(lab);  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.WEST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=1;  gbC.gridx=3;  gbC.weightx=100;  gbL.setConstraints(m_DistinctLab,gbC);  simple.add(m_DistinctLab);  m_DistinctLab.setBorder(BorderFactory.createEmptyBorder(0,5,5,10));  lab=new JLabel("Unique:",SwingConstants.RIGHT);  lab.setBorder(BorderFactory.createEmptyBorder(0,10,5,0));  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.EAST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=1;  gbC.gridx=4;  gbL.setConstraints(lab,gbC);  simple.add(lab);  gbC=new GridBagConstraints();  gbC.anchor=GridBagConstraints.WEST;  gbC.fill=GridBagConstraints.HORIZONTAL;  gbC.gridy=1;  gbC.gridx=5;  gbC.weightx=100;  gbL.setConstraints(m_UniqueLab,gbC);  simple.add(m_UniqueLab);  m_UniqueLab.setBorder(BorderFactory.createEmptyBorder(0,5,5,10));  setLayout(new BorderLayout());  add(simple,BorderLayout.NORTH);  add(new JScrollPane(m_StatsTable),BorderLayout.CENTER);  m_StatsTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);}  }
class C{  @Override public void onEvents(BinlogEventV4 event){  LOGGER.trace("Received bin log event {}",event);  String tableName="";switch (event.getHeader().getEventType()) {case MySQLConstants.WRITE_ROWS_EVENT:    WriteRowsEvent writeRowsEvent=(WriteRowsEvent)event;  tableName=tableCache.get(writeRowsEvent.getTableId());if (tableName != null && txBuilder.getInnerTxState() == TransactionState.STARTED) {  DataEvent dataEvent=new DataEvent(tableName,DataEventType.INSERT,null,getData(tableName,writeRowsEvent.getRows()));  txBuilder.addDataEvent(dataEvent);}break;case MySQLConstants.WRITE_ROWS_EVENT_V2:WriteRowsEventV2 writeRowsEventV2=(WriteRowsEventV2)event;tableName=tableCache.get(writeRowsEventV2.getTableId());if (tableName != null && txBuilder.getInnerTxState() == TransactionState.STARTED) {DataEvent dataEvent=new DataEvent(tableName,DataEventType.INSERT,null,getData(tableName,writeRowsEventV2.getRows()));txBuilder.addDataEvent(dataEvent);}break;case MySQLConstants.UPDATE_ROWS_EVENT:UpdateRowsEvent updateRowsEvent=(UpdateRowsEvent)event;tableName=tableCache.get(updateRowsEvent.getTableId());if (tableName != null && txBuilder.getInnerTxState() == TransactionState.STARTED) {List<Row> oldData=new ArrayList<Row>();List<Row> newData=new ArrayList<Row>();for (Pair<Row> rows : updateRowsEvent.getRows()) {oldData.add(rows.getBefore());newData.add(rows.getAfter());}DataEvent dataEvent=new DataEvent(tableName,DataEventType.UPDATE,getData(tableName,oldData),getData(tableName,newData));txBuilder.addDataEvent(dataEvent);}break;case MySQLConstants.UPDATE_ROWS_EVENT_V2:UpdateRowsEventV2 updateRowsEventV2=(UpdateRowsEventV2)event;tableName=tableCache.get(updateRowsEventV2.getTableId());if (tableName != null && txBuilder.getInnerTxState() == TransactionState.STARTED) {List<Row> oldData=new ArrayList<Row>();List<Row> newData=new ArrayList<Row>();for (Pair<Row> rows : updateRowsEventV2.getRows()) {oldData.add(rows.getBefore());newData.add(rows.getAfter());}DataEvent dataEvent=new DataEvent(tableName,DataEventType.UPDATE,getData(tableName,oldData),getData(tableName,newData));txBuilder.addDataEvent(dataEvent);}break;case MySQLConstants.DELETE_ROWS_EVENT:DeleteRowsEvent deleteRowsEvent=(DeleteRowsEvent)event;tableName=tableCache.get(deleteRowsEvent.getTableId());if (tableName != null && txBuilder.getInnerTxState() == TransactionState.STARTED) {DataEvent dataEvent=new DataEvent(tableName,DataEventType.DELETE,null,getData(tableName,deleteRowsEvent.getRows()));txBuilder.addDataEvent(dataEvent);}break;case MySQLConstants.DELETE_ROWS_EVENT_V2:DeleteRowsEventV2 deleteRowsEventV2=(DeleteRowsEventV2)event;tableName=tableCache.get(deleteRowsEventV2.getTableId());if (tableName != null && txBuilder.getInnerTxState() == TransactionState.STARTED) {DataEvent dataEvent=new DataEvent(tableName,DataEventType.DELETE,null,getData(tableName,deleteRowsEventV2.getRows()));txBuilder.addDataEvent(dataEvent);}break;case MySQLConstants.TABLE_MAP_EVENT:TableMapEvent tableMapEvent=(TableMapEvent)event;Long tableId=tableMapEvent.getTableId();if (!tableCache.containsKey(tableId)) {String databaseName=tableMapEvent.getDatabaseName().toString();tableName=tableMapEvent.getTableName().toString();if (databaseName.equals(this.databaseInfo.getDatabaseName())) {if (this.databaseInfo.getAllTableNames().contains(tableName)) {this.tableCache.put(tableId,tableName);}}}break;case MySQLConstants.QUERY_EVENT:QueryEvent queryEvent=(QueryEvent)event;String sql=queryEvent.getSql().toString();if ("BEGIN".equalsIgnoreCase(sql)) {String databaseName=queryEvent.getDatabaseName().toString();if (databaseName.equals(this.databaseInfo.getDatabaseName())) {txBuilder.reset().txState(TransactionState.STARTED).txTimeStart(System.nanoTime()).database(databaseName).serverId(toIntExact(queryEvent.getHeader().getServerId())).binLogFileName(this.currentBinLogFileName).binLogPosition(toIntExact(queryEvent.getHeader().getPosition()));}}break;case MySQLConstants.XID_EVENT:XidEvent xidEvent=(XidEvent)event;if (txBuilder.getInnerTxState() == TransactionState.STARTED && txBuilder.getInnerDataEvents().size() > 0 && txBuilder.getInnerServerId() == xidEvent.getHeader().getServerId()) {TransactionEvent txEvent=txBuilder.txState(TransactionState.END).txTimeEnd(System.nanoTime()).txId(xidEvent.getXid()).build();this.addToQueue(txEvent);}txBuilder.reset();break;case MySQLConstants.ROTATE_EVENT:RotateEvent rotateEvent=(RotateEvent)event;LOGGER.info("File was rotated from {} to new file {}",this.currentBinLogFileName,rotateEvent.getBinlogFileName().toString());this.currentBinLogFileName=rotateEvent.getBinlogFileName().toString();break;default :break;}}  }
class C{  public static int tertiaryOrder(int order){  return order & TERTIARY_ORDER_MASK_;}  }
class C{  public View create(Element elem){  Object o=elem.getAttributes().getAttribute(StyleConstants.NameAttribute);  if (o instanceof HTML.Tag) {    HTML.Tag kind=(HTML.Tag)o;    if (kind == HTML.Tag.TR) {      return createTableRow(elem);    } else     if ((kind == HTML.Tag.TD) || (kind == HTML.Tag.TH)) {      return new CellView(elem);    } else     if (kind == HTML.Tag.CAPTION) {      return new javax.swing.text.html.ParagraphView(elem);    }  }  View p=getParent();  if (p != null) {    ViewFactory f=p.getViewFactory();    if (f != null) {      return f.create(elem);    }  }  return null;}  }
class C{  public NotificationChain basicSetExpression(Expression newExpression,NotificationChain msgs){  Expression oldExpression=expression;  expression=newExpression;  if (eNotificationRequired()) {    ENotificationImpl notification=new ENotificationImpl(this,Notification.SET,N4JSPackage.CAST_EXPRESSION__EXPRESSION,oldExpression,newExpression);    if (msgs == null)     msgs=notification; else     msgs.add(notification);  }  return msgs;}  }
class C{  public void actionPerformed(ActionEvent e){  if (e.getActionCommand().equals(ConfirmPanel.A_OK))   dispose(); else   if (e.getSource() instanceof PerformanceIndicator) {    PerformanceIndicator pi=(PerformanceIndicator)e.getSource();    log.info(pi.getName());    MGoal goal=pi.getGoal();    if (goal.getMeasure() != null)     new PerformanceDetail(goal);  }}  }
class C{  public final void addElement(Object value){  if ((m_firstFree + 1) >= m_mapSize) {    m_mapSize+=m_blocksize;    Object newMap[]=new Object[m_mapSize];    System.arraycopy(m_map,0,newMap,0,m_firstFree + 1);    m_map=newMap;  }  m_map[m_firstFree]=value;  m_firstFree++;}  }
class C{  public byte[] compress(long[] unCompInput){  try {    return Snappy.compress(unCompInput);  } catch (  IOException e) {    LOGGER.error(e,e.getMessage());    return null;  }}  }
class C{  @Inject public KafkaMessageService(SystemConfiguration config){  super(config);  requireArgument(config != null,"System configuration cannot be null.");  _producer=new Producer(config);  _consumer=new Consumer(config);}  }
class C{  public int checkDeferredFrees(final AbstractJournal journal){  final int totalFreed=m_store.checkDeferredFrees(journal);  if (totalFreed > 0 && log.isInfoEnabled()) {    log.info("Freed " + totalFreed + " deferralls on commit");  }  return totalFreed;}  }
class C{  public void deleteRow(int selectedRow){  Date open=(Date)this.getValueAt(selectedRow,0);  Date close=(Date)this.getValueAt(selectedRow,1);  Tradingday element=getData().getTradingday(open.getZonedDateTime(),close.getZonedDateTime());  if (!element.getTradestrategies().isEmpty())   element.getTradestrategies().clear();  getData().remove(element);  element.setDirty(true);  final Vector<Object> currRow=rows.get(selectedRow);  rows.remove(currRow);  this.fireTableRowsDeleted(selectedRow,selectedRow);}  }
class C{  public long readLong(final JBBPByteOrder byteOrder) throws IOException {  if (byteOrder == JBBPByteOrder.BIG_ENDIAN) {    return (((long)readInt(byteOrder) & 0xFFFFFFFFL) << 32) | ((long)readInt(byteOrder) & 0xFFFFFFFFL);  } else {    return ((long)readInt(byteOrder) & 0xFFFFFFFFL) | (((long)readInt(byteOrder) & 0xFFFFFFFFL) << 32);  }}  }
class C{  public void update(Monitor ds){synchronized (this) {    this.setName(ds.getName());    this.setClusterName(ds.getClusterName());    this.notifyAll();  }}  }
class C{  @Override protected EClass eStaticClass(){  return GamlPackage.Literals.EQUATION_REF;}  }
class C{  public int normalize(char s[],int len){  for (int i=0; i < len; i++) {switch (s[i]) {case ALEF_MADDA:case ALEF_HAMZA_ABOVE:case ALEF_HAMZA_BELOW:      s[i]=ALEF;    break;case DOTLESS_YEH:  s[i]=YEH;break;case TEH_MARBUTA:s[i]=HEH;break;case TATWEEL:case KASRATAN:case DAMMATAN:case FATHATAN:case FATHA:case DAMMA:case KASRA:case SHADDA:case SUKUN:len=delete(s,i,len);i--;break;default :break;}}return len;}  }
class C{  private String match(Pattern re){  if (index >= input.length()) {    return null;  }  Matcher matcher=re.matcher(input);  matcher.region(index,input.length());  boolean m=matcher.find();  if (m) {    index=matcher.end();    return matcher.group();  } else {    return null;  }}  }
class C{  public void paintSplitPaneDragDivider(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){}  }
class C{  @Override protected void deleteEntry(BalancedBinaryNode<K,K> p){  if (p == root()) {    root=null;    size--;    return;  }  AugmentedNode<K> node=(AugmentedNode<K>)p;  AugmentedNode<K> parent=node.parent();  AugmentedNode<K> otherSib;  if (node == node.parent().left()) {    otherSib=node.parent().right();  } else {    otherSib=node.parent().left();  }  if (node.parent() == root()) {    otherSib.parent(null);    otherSib.color(AugmentedNode.BLACK);    root=otherSib;    size-=2;    return;  }  AugmentedNode<K> grandParent=parent.parent();  otherSib.parent(grandParent);  if (p.parent() == grandParent.left()) {    grandParent.left(otherSib);  } else {    grandParent.right(otherSib);  }  propagate(otherSib.parent());  size-=2;}  }
class C{  private boolean verifyImageServer(ComputeImageServer imageServer){  log.info("verifyImageServer: {}",imageServer.getImageServerIp());  boolean imageServerVerified=false;  if (!isImageServerValid(imageServer)) {    imageServerErrorMsg="Image server settings are not valid, can't verify the server";    log.warn(imageServerErrorMsg);    return imageServerVerified;  }  ImageServerDialog d=null;  try {    SSHSession session=new SSHSession();    session.connect(imageServer.getImageServerIp(),imageServer.getSshPort(),imageServer.getImageServerUser(),imageServer.getImageServerPassword());    d=new ImageServerDialog(session,imageServer.getSshTimeoutMs());    d.init();    if (!d.directoryExists(imageServer.getTftpBootDir())) {      throw ImageServerControllerException.exceptions.imageServerNotSetup("tftpboot directory does not exist");    }    if (!d.fileExists(imageServer.getTftpBootDir() + PXELINUX_0_FILE)) {      throw ImageServerControllerException.exceptions.imageServerNotSetup("pxelinux.0 binary does not exist");    }    if (!d.fileExists("/usr/bin/python")) {      throw ImageServerControllerException.exceptions.imageServerNotSetup("python not found");    }    boolean upgradeRequired=false;    if (!d.fileExists(imageServer.getTftpBootDir() + "is.properties")) {      upgradeRequired=true;    } else {      String s=d.readFile(imageServer.getTftpBootDir() + "is.properties");      Properties p=ImageServerUtils.stringToProperties(s);      if (p.getProperty("version") == null) {        upgradeRequired=true;      } else {        try {          int version=Integer.parseInt(p.getProperty("version"));          if (version < IMAGE_SERVER_VERSION) {            upgradeRequired=true;          }        } catch (        NumberFormatException e) {          upgradeRequired=true;        }      }    }    log.info("image server upgrade required: {}",upgradeRequired);    if (!d.directoryExists(imageServer.getTftpBootDir() + PXELINUX_CFG_DIR)) {      log.info("pxelinux.cfg does not exist, will create it");      d.mkdir(imageServer.getTftpBootDir() + PXELINUX_CFG_DIR);    }    if (!StringUtils.isBlank(imageServer.getImageDir()) && !d.directoryExists(imageServer.getTftpBootDir() + imageServer.getImageDir())) {      log.info("image directory does not exist, will create it");      d.mkdir(imageServer.getTftpBootDir() + imageServer.getImageDir());    }    if (upgradeRequired || !d.fileExists(imageServer.getTftpBootDir() + PXELINUX_CFG_DIR + DEFAULT_FILE)) {      log.info("creating pxelinux.cfg/default");      String content=ImageServerUtils.getResourceAsString("imageserver/default");      d.writeFile(imageServer.getTftpBootDir() + PXELINUX_CFG_DIR + DEFAULT_FILE,content);    }    if (!d.directoryExists(imageServer.getTftpBootDir() + HTTP_DIR)) {      log.info("http does not exist, will create it");      d.mkdir(imageServer.getTftpBootDir() + HTTP_DIR);    }    if (upgradeRequired || !d.fileExists(imageServer.getTftpBootDir() + HTTP_DIR + SERVER_PY_FILE)) {      log.info("creating server.py");      String content=ImageServerUtils.getResourceAsString("imageserver/server.py");      StringBuilder script=new StringBuilder(content);      ImageServerUtils.replaceAll(script,"{http.port}",imageServer.getImageServerHttpPort());      d.writeFile(imageServer.getTftpBootDir() + HTTP_DIR + SERVER_PY_FILE,script.toString());      d.chmodFile("744",imageServer.getTftpBootDir() + HTTP_DIR + SERVER_PY_FILE);    }    String pid=d.getServerPid(imageServer.getImageServerHttpPort());    if (upgradeRequired && pid != null) {      log.info("{} is running as pid: {}, kill it",SERVER_PY_FILE,pid);      d.kill(pid);      pid=null;    }    if (pid == null) {      log.info("{} is not running, will attempt to start it",SERVER_PY_FILE);      d.cd(imageServer.getTftpBootDir() + HTTP_DIR);      d.nohup(String.format("python %s",SERVER_PY_FILE));    }    if (upgradeRequired || !d.fileExists(imageServer.getTftpBootDir() + HTTP_DIR + WGET_FILE)) {      log.info("creating wget wrapper script");      String content=ImageServerUtils.getResourceAsString("imageserver/wget");      d.writeFile(imageServer.getTftpBootDir() + HTTP_DIR + WGET_FILE,content);    }    if (!d.directoryExists(imageServer.getTftpBootDir() + HTTP_KICKSTART_DIR)) {      log.info("http/ks does not exist, will create it");      d.mkdir(imageServer.getTftpBootDir() + HTTP_KICKSTART_DIR);    }    if (!d.directoryExists(imageServer.getTftpBootDir() + HTTP_FIRSTBOOT_DIR)) {      log.info("http/fb does not exist, will create it");      d.mkdir(imageServer.getTftpBootDir() + HTTP_FIRSTBOOT_DIR);    }    if (!d.directoryExists(imageServer.getTftpBootDir() + HTTP_SUCCESS_DIR)) {      log.info("http/success does not exist, will create it");      d.mkdir(imageServer.getTftpBootDir() + HTTP_SUCCESS_DIR);    }    if (!d.directoryExists(imageServer.getTftpBootDir() + HTTP_FAILURE_DIR)) {      log.info("http/failure does not exist, will create it");      d.mkdir(imageServer.getTftpBootDir() + HTTP_FAILURE_DIR);    }    if (upgradeRequired) {      log.info("saving is.properties");      d.writeFile(imageServer.getTftpBootDir() + "is.properties","version=" + IMAGE_SERVER_VERSION + "\nhttp_port="+ imageServer.getImageServerHttpPort());    }    log.info("image server setup was successfully verified");    imageServerVerified=true;    imageServerErrorMsg=null;  } catch (  Exception e) {    log.error("Unexpected exception during image server verification: " + e.getMessage(),e);    imageServerErrorMsg=e.getMessage();  } finally {    if (d != null && d.isConnected()) {      d.close();    }  }  return imageServerVerified;}  }
class C{  public static RtcCandidate fromJsep(JSONObject json){  if (json == null) {    throw new NullPointerException("json should not be null");  }  RtcCandidateImpl rtcCandidate;  JSONObject candidateDescription=json.optJSONObject("candidateDescription");  if (candidateDescription != null) {    try {      rtcCandidate=(RtcCandidateImpl)fromCandidateDescription(candidateDescription);    } catch (    JSONException e) {      return null;    }  } else {    String candidateLine=json.optString("candidate");    if (candidateLine == null) {      return null;    }    rtcCandidate=(RtcCandidateImpl)fromSdpAttribute(candidateLine);  }  if (rtcCandidate == null) {    return null;  }  int sdpMLineIndex=json.optInt("sdpMLineIndex",-1);  String sdpMid=json.isNull("sdpMid") ? null : json.optString("sdpMid",null);  if (sdpMLineIndex < 0 && sdpMid == null) {    return null;  }  rtcCandidate.setStreamIndex(sdpMLineIndex);  rtcCandidate.setStreamId(sdpMid);  return rtcCandidate;}  }
class C{  protected CommandResult executeCommand(String command){  assert (command != null);  return executeCommand(getDefaultShell(),command);}  }
class C{  public synchronized Long applyForModeration(String publicSID){  try {    RoomClient currentClient=this.clientListManager.getClientByPublicSID(publicSID,false);    List<RoomClient> currentModList=this.clientListManager.getCurrentModeratorByRoom(currentClient.getRoom_id());    if (currentModList.size() > 0) {      return 2L;    } else {      Rooms room=roommanagement.getRoomById(currentClient.getRoom_id());      if (room.getIsModeratedRoom()) {        return 3L;      } else {        return 1L;      }    }  } catch (  Exception err) {    log.error("[applyForModeration]",err);  }  return -1L;}  }
class C{  public boolean isImportFrom(){  return importFrom;}  }
class C{  public LevelDBBlockStore(Context context,File directory,DBFactory dbFactory) throws BlockStoreException {  this.context=context;  this.path=directory;  Options options=new Options();  options.createIfMissing();  try {    tryOpen(directory,dbFactory,options);  } catch (  IOException e) {    try {      dbFactory.repair(directory,options);      tryOpen(directory,dbFactory,options);    } catch (    IOException e1) {      throw new BlockStoreException(e1);    }  }}  }
class C{  public void deleteWorkspaceDirectory(String handleId){  fileHandler.delete(getWorkspaceDirectory(handleId));}  }
class C{  private void processFoundComputeResource(EnumerationContext enumerationContext,ComputeResourceOverlay cr,List<String> tenantLinks){  ComputeEnumerateResourceRequest request=enumerationContext.getRequest();  QueryTask task=queryForCluster(request.resourceLink(),cr.getId().getValue());  task.tenantLinks=tenantLinks;  withTaskResults(task,null);}  }
class C{  public static void equalsHashTest(final Object[][] groups){  for (int i=0; i < groups.length; i++) {    final Object[] gi=groups[i];    for (    final Object element : gi) {      Assert.assertFalse(element.equals(null));      Assert.assertTrue("gi=" + element.toString() + " gi.hashCode()="+ element.hashCode(),element.hashCode() != 0);    }    for (    final Object element : gi) {      for (      final Object element2 : gi) {        Assert.assertEquals(element,element2);        Assert.assertEquals(element.hashCode(),element2.hashCode());      }    }    for (int j=0; j < groups.length; j++) {      if (j != i) {        final Object[] gj=groups[j];        for (int k=0; k < gi.length; k++) {          for (int l=0; l < gj.length; l++) {            Assert.assertFalse("Objects should not be equals(): i=" + i + " j="+ j+ " k="+ k+ " l="+ l+ " g[i,k]="+ gi[k]+ " g[j,l]="+ gj[l],gi[k].equals(gj[l]));            Assert.assertTrue(gi[k].toString() + " has same hashcode as " + gj[l].toString(),gi[k].hashCode() != gj[l].hashCode());          }        }      }    }  }}  }
class C{  public Logic logic(){  return logic;}  }
class C{  public void logAndThrowMessageError(final Message message,final String error){  LOGGER.error("Error \"{}\" reported by message {}",error,message.getMessageProperties().getMessageId());  throw new IllegalArgumentException(error);}  }
class C{  protected void messageTransmited(MrcMessage msg){  if (!echo) {    return;  }  javax.swing.SwingUtilities.invokeLater(new Echo(this,new Date(),msg));}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static void d(String msg,Throwable cause){  if (BuildConfig.DEBUG) {    Log.d(LOG_TAG,msg,cause);  }}  }
class C{  public static List<Review> reviewlist(String idFilm,String filter,int count,int page) throws NetworkException {  String type="movie";  String params=ServiceSecurity.construireParams(false,AllocineService.CODE,idFilm,AllocineService.TYPE,type,AllocineService.FILTER,filter,AllocineService.COUNT,"" + count,AllocineService.PAGE,"" + page);  String sed=ServiceSecurity.getSED();  String sig=ServiceSecurity.getSIG(params,sed);  try {    AllocineResponse response=getService().reviewlist(idFilm,type,filter,count,page,sed,sig);    return response.getFeed().getReview();  } catch (  Exception e) {    throw new NetworkException();  }}  }
class C{  private void checkForUserGroupsUsingDomains(StringSet domains){  if (CollectionUtils.isEmpty(domains)) {    _log.error("Invalid domains");    return;  }  Set<URI> matchingUserGroupsURI=new HashSet<URI>();  for (  String domain : domains) {    if (StringUtils.isBlank(domain)) {      _log.warn("Invalid domain");      continue;    }    List<UserGroup> matchingUserGroup=_permissionsHelper.getAllUserGroupForDomain(domain);    if (CollectionUtils.isEmpty(matchingUserGroup)) {      _log.debug("No user group found for the domain {}",domain);      continue;    }    for (    UserGroup userGroup : matchingUserGroup) {      matchingUserGroupsURI.add(userGroup.getId());    }  }  if (!CollectionUtils.isEmpty(matchingUserGroupsURI)) {    throw APIException.badRequests.cannotDeleteAuthnProviderWithUserGroup(matchingUserGroupsURI.size(),matchingUserGroupsURI);  }}  }
class C{  public org.apache.lucene.util.Version upgrade(UpgradeRequest upgrade) throws IOException {  verifyStarted();  if (logger.isTraceEnabled()) {    logger.trace("upgrade with {}",upgrade);  }  org.apache.lucene.util.Version previousVersion=minimumCompatibleVersion();  engine().forceMerge(true,Integer.MAX_VALUE,false,true,upgrade.upgradeOnlyAncientSegments());  org.apache.lucene.util.Version version=minimumCompatibleVersion();  if (logger.isTraceEnabled()) {    logger.trace("upgraded segment {} from version {} to version {}",previousVersion,version);  }  return version;}  }
class C{  public static Registrar makeRegistrar1(){  return makeRegistrarCommon().setClientId("NewRegistrar").setRegistrarName("New Registrar").setIanaIdentifier(8L).setPassword("foo-BAR2").setPhoneNumber("+1.3334445555").setPhonePasscode("12345").build();}  }
class C{  public String[] validBaudRates(){  return new String[]{"9,600 bps"};}  }
class C{  public void add(double x,double y){  if (this.size == this.capacity)   flush();  this.xElements[this.size]=x;  this.yElements[this.size++]=y;}  }
class C{  public CLIOutputResponse showDiff(final ShowDiffRequest request) throws IOException, SubversionException {  final File projectPath=new File(request.getProjectPath());  final List<String> uArgs=defaultArgs();  addOption(uArgs,"--revision",request.getRevision());  uArgs.add("diff");  final CommandLineResult result=runCommand(null,uArgs,projectPath,request.getPaths());  return DtoFactory.getInstance().createDto(CLIOutputResponse.class).withCommand(result.getCommandLine().toString()).withOutput(result.getStdout()).withErrOutput(result.getStderr());}  }
class C{  private boolean hasVibratePermission(Context context){  PackageManager pm=context.getPackageManager();  int hasPerm=pm.checkPermission(android.Manifest.permission.VIBRATE,context.getPackageName());  return hasPerm == PackageManager.PERMISSION_GRANTED;}  }
class C{  public void acceptConnection() throws IOException {  if (isConnected())   throw new IllegalStateException("Already connected");  socket=serverSocket.accept();}  }
class C{  public SurfaceSquare(){}  }
class C{  public AsyncResult FindServersOnNetworkAsync(FindServersOnNetworkRequest req){  return channel.serviceRequestAsync(req);}  }
class C{  @Override protected void onResume(){  super.onResume();  SharedPreferences prefs=getPreferences(0);  String restoredText=prefs.getString("text",null);  if (restoredText != null) {    mSaved.setText(restoredText,TextView.BufferType.EDITABLE);    int selectionStart=prefs.getInt("selection-start",-1);    int selectionEnd=prefs.getInt("selection-end",-1);    if (selectionStart != -1 && selectionEnd != -1) {      mSaved.setSelection(selectionStart,selectionEnd);    }  }}  }
class C{  @Override public StringBuffer format(double number,StringBuffer result,FieldPosition fieldPosition){  boolean tryFastPath=false;  if (fieldPosition == DontCareFieldPosition.INSTANCE)   tryFastPath=true; else {    fieldPosition.setBeginIndex(0);    fieldPosition.setEndIndex(0);  }  if (tryFastPath) {    String tempResult=fastFormat(number);    if (tempResult != null) {      result.append(tempResult);      return result;    }  }  return format(number,result,fieldPosition.getFieldDelegate());}  }
class C{  @Experimental public void unregisterHook(String event){  String className=interpreterContext.getClassName();  unregisterHook(event,className);}  }
class C{  public boolean isVirtualIPHolder(){  try {    InetAddress vip=InetAddress.getByName(getVip());    return (NetworkInterface.getByInetAddress(vip) != null);  } catch (  Exception e) {    _log.error("Error occured while determining leading node for monitor",e);    return false;  }}  }
class C{  public boolean isUseSiteStructuralTyping(){  return ((this.getDefinedTypingStrategy() != TypingStrategy.DEFAULT) && (this.getDefinedTypingStrategy() != TypingStrategy.NOMINAL));}  }
class C{  public void writeXML(Network network,Writer writer){  try {    DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();    DocumentBuilder parser=factory.newDocumentBuilder();    Document document=parser.newDocument();    Element root=document.createElement("network");    document.appendChild(root);    Element verticesNode=document.createElement("vertices");    root.appendChild(verticesNode);    SimpleDateFormat formater=new SimpleDateFormat();    for (    Vertex vertex : network.findAll()) {      Element vertexNode=document.createElement("vertex");      verticesNode.appendChild(vertexNode);      vertexNode.setAttribute("id",vertex.getId().toString());      Element creationDate=document.createElement("creation-date");      creationDate.setTextContent(formater.format(vertex.getCreationDate().getTime()));      vertexNode.appendChild(creationDate);      Element accessDate=document.createElement("access-date");      accessDate.setTextContent(formater.format(vertex.getAccessDate().getTime()));      vertexNode.appendChild(accessDate);      vertexNode.setAttribute("access-count",String.valueOf(vertex.getAccessCount()));      if (vertex.hasData()) {        Element dataNode=document.createElement("data");        vertexNode.appendChild(dataNode);        Object data=vertex.getData();        String type="";        if (data instanceof String) {          type="String";        } else         if (data instanceof Primitive) {          type="Primitive";        } else         if (data instanceof Calendar) {          type="Date";        } else {          type=vertex.getData().getClass().getName();        }        dataNode.setAttribute("type",type);        String value="";        if (data instanceof String) {          value=(String)data;        } else         if (data instanceof Primitive) {          value=((Primitive)data).getIdentity();        } else         if (data instanceof Calendar) {          value=formater.format(((Calendar)data).getTime());        } else {          value=data.toString();        }        dataNode.setTextContent(new String(value.getBytes("UTF8")));      }    }    Element relationsNode=document.createElement("relations");    root.appendChild(relationsNode);    for (    Vertex vertex : network.findAll()) {      for (Iterator<Relationship> relations=vertex.orderedAllRelationships(); relations.hasNext(); ) {        Relationship relationship=(Relationship)relations.next();        Element relationshipNode=document.createElement("relationship");        relationsNode.appendChild(relationshipNode);        relationshipNode.setAttribute("source-id",relationship.getSource().getId().toString());        relationshipNode.setAttribute("target-id",relationship.getTarget().getId().toString());        relationshipNode.setAttribute("type-id",relationship.getType().getId().toString());        relationshipNode.setAttribute("correctness",String.valueOf(relationship.getCorrectness()));      }    }    Source source=new DOMSource(document);    Result result=new StreamResult(writer);    Transformer transformer=TransformerFactory.newInstance().newTransformer();    transformer.setOutputProperty(OutputKeys.INDENT,"yes");    transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount","4");    transformer.transform(source,result);  } catch (  Exception exception) {    throw new BotException("IO error while writing a network to xml.",exception);  }}  }
class C{  public ThisTypeRef createThisTypeRef(){  ThisTypeRefImpl thisTypeRef=new ThisTypeRefImpl();  return thisTypeRef;}  }
class C{  public static void checkArgument(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalArgumentException(String.valueOf(errorMessage));  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public void swap(){  mv.visitInsn(Opcodes.SWAP);}  }
class C{  public Vector2(Double x,Double y){  this(x.floatValue(),y.floatValue());}  }
class C{  public void swipeRight(){  realObject.setCurrentItem(realObject.getCurrentItem() - 1);  notifyListener(true);}  }
class C{  public Transaction(char type,double amount,double balance,String description){  date=new java.util.Date();  this.type=type;  this.amount=amount;  this.balance=balance;  this.description=description;}  }
class C{  public LuceneSearcher(Directory dir){  this(dir,FIELD,false);}  }
class C{  public Property minuteOfDay(){  return new Property(this,getChronology().minuteOfDay());}  }
class C{  public boolean deleteQueryById(String userId,String queryId){  boolean operationStatus=false;  if (StringUtils.isNotNullNotEmptyNotWhiteSpace(queryId) && StringUtils.isNotNullNotEmptyNotWhiteSpace(userId)) {    ObjectNode queries=fetchAllQueriesFromFile();    ObjectNode userQueries=(ObjectNode)queries.get(userId);    if (userQueries != null) {      userQueries.remove(queryId);      queries.put(userId,userQueries);      operationStatus=storeQueriesInFile(queries);    }  }  return operationStatus;}  }
class C{  private PostgreSQLErrorCodes(){}  }
class C{  private static long CallStaticLongMethodV(JNIEnvironment env,int classJREF,int methodID,Address argAddress) throws Exception {  if (traceJNI)   VM.sysWrite("JNI called: CallStaticLongMethodV  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object returnObj=JNIHelpers.invokeWithVarArg(methodID,argAddress,TypeReference.Long);    return Reflection.unwrapLong(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0L;  }}  }
class C{  public boolean isStoreCheck(){  return trapCode == RuntimeEntrypoints.TRAP_STORE_CHECK;}  }
class C{  public boolean isFinal(){  return this.isDeclaredFinal();}  }
class C{  static void showNotification(Context context,int notificationId){  Intent intent=new Intent(context,RhythmNotificationService.class);  intent.setAction(ACTION_SHOW_QUICK_CONTROL);  intent.putExtra(EXTRA_NOTIFICATION_ID,notificationId);  context.startService(intent);}  }
class C{  void finishScrolling(){  if (isScrollingPerformed) {    notifyScrollingListenersAboutEnd();    isScrollingPerformed=false;  }  invalidateLayouts();  invalidate();}  }
class C{  public boolean isTagCountDefined(int tagId){  int info=getTagInfo().get(tagId);  if (info == 0) {    return false;  }  return getComponentCountFromInfo(info) != ExifTag.SIZE_UNDEFINED;}  }
class C{  public AsyncResult CreateSubscriptionAsync(RequestHeader RequestHeader,Double RequestedPublishingInterval,UnsignedInteger RequestedLifetimeCount,UnsignedInteger RequestedMaxKeepAliveCount,UnsignedInteger MaxNotificationsPerPublish,Boolean PublishingEnabled,UnsignedByte Priority){  CreateSubscriptionRequest req=new CreateSubscriptionRequest(RequestHeader,RequestedPublishingInterval,RequestedLifetimeCount,RequestedMaxKeepAliveCount,MaxNotificationsPerPublish,PublishingEnabled,Priority);  return channel.serviceRequestAsync(req);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildNPC(zone);}  }
class C{  @DSComment("From safe class list") @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:34:09.205 -0500",hash_original_method="58E5C3E4C7F046934AC91F8FDFBACD2C",hash_generated_method="E0070DBC57868727B629F1FD39E2DF76") public void lineTo(float x,float y){  isSimplePath=false;  addTaint(x + y);}  }
class C{  public String[][] readStringFrame(String fname) throws IOException {  try {    String fnamemtd=DataExpression.getMTDFileName(fname);    JSONObject jmtd=new DataExpression().readMetadataFile(fnamemtd,false);    long rows=jmtd.getLong(DataExpression.READROWPARAM);    long cols=jmtd.getLong(DataExpression.READCOLPARAM);    String format=jmtd.getString(DataExpression.FORMAT_TYPE);    InputInfo iinfo=InputInfo.stringExternalToInputInfo(format);    return readStringFrame(fname,iinfo,rows,cols);  } catch (  Exception ex) {    throw new IOException(ex);  }}  }
class C{  public static double minScale(final FeatureTypeStyle fts){  if (fts == null || fts.rules().size() == 0)   return 0.0;  final Rule r=fts.rules().get(0);  return r.getMinScaleDenominator();}  }
class C{  public T caseVariableRef(VariableRef object){  return null;}  }
class C{  public static boolean equals(long s1,long s2){  return (s1 == s2);}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader1=null;  String inputHeader2=null;  int row, col;  double z;  float progress=0;  int m, n;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  inputHeader1=args[0];  inputHeader2=args[1];  if ((inputHeader1 == null) || (inputHeader2 == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRasterInfo image1=new WhiteboxRasterInfo(inputHeader1);    int rows=image1.getNumberRows();    int cols=image1.getNumberColumns();    double noData1=image1.getNoDataValue();    WhiteboxRasterInfo image2=new WhiteboxRasterInfo(inputHeader2);    if (image2.getNumberRows() != rows || image2.getNumberColumns() != cols) {      showFeedback("The input images must have the same number of rows and columns");      return;    }    double noData2=image2.getNoDataValue();    int image1Min=(int)image1.getMinimumValue();    int image2Min=(int)image2.getMinimumValue();    int image1Max=(int)image1.getMaximumValue();    int image2Max=(int)image2.getMaximumValue();    int image1Range=image1Max - image1Min + 1;    int image2Range=image2Max - image2Min + 1;    int[][] featureSpace=new int[image1Range][image2Range];    double data1[]=null;    double data2[]=null;    for (row=0; row < rows; row++) {      data1=image1.getRowValues(row);      data2=image2.getRowValues(row);      for (col=0; col < cols; col++) {        if (data1[col] != noData1 && data2[col] != noData2) {          m=(int)(data1[col] - image1Min);          n=(int)(data2[col] - image2Min);          featureSpace[m][n]++;        }      }      if (cancelOp) {        cancelOperation();        return;      }      progress=(float)(100f * row / (rows - 1));      updateProgress((int)progress);    }    Plot plot=new Plot(featureSpace,image1.getShortHeaderFile(),image2.getShortHeaderFile(),image1Min,image1Max,image2Min,image2Max,myHost.getDefaultFont());    image1.close();    image2.close();    returnData(plot);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override protected boolean useScroll(final Player player){  final StendhalRPZone zone=player.getZone();  final String petName=player.getPet().getName();  if (zone.isTeleportInAllowed(player.getX(),player.getY())) {    final Item summonPetScroll=SingletonRepository.getEntityManager().getItem("summon pet scroll");    summonPetScroll.setInfoString(petName);    player.equipOrPutOnGround(summonPetScroll);    final Pet pet=player.getPet();    if (pet != null) {      player.removePet(pet);      pet.getZone().remove(pet);      player.sendPrivateText("Amazingly your pet melds with the scroll. It just walked right into the page!");    }    return true;  } else {    player.sendPrivateText("The strong anti magic aura in this area prevents the scroll from working!");    return false;  }}  }
class C{  public T blocking(){  return observable.toBlocking().single();}  }
class C{  public void addProviderName(Provider provider,String name){  if (provider == Provider.GENERIC) {    provider.setName(name);  } else {    Log.d("SocialAuthAdapter","Only to set Generic Provider Name");  }}  }
class C{  public UDTimer cancel(){  if (this.mTimerHandler != null && this.mTimerRunnable != null) {    this.mTimerHandler.removeCallbacks(this.mTimerRunnable);    this.mTimerRunnable=null;  }  return this;}  }
class C{  public ContextValueParameterMap(Map<String,String> value){  super(value);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof InformationDelegator) {    if (DEBUG) {      Debug.output("DrawingTool: found InformationDelegator");    }    if (dtmm != null) {      dtmm.setInfoDelegator((InformationDelegator)someObj);    }    setInformationDelegator((InformationDelegator)someObj);  }  if (someObj instanceof MouseDelegator) {    if (DEBUG) {      Debug.output("DrawingTool: found MouseDelegator.");    }    setMouseDelegator((MouseDelegator)someObj);  }  if (someObj instanceof MapBean) {    if (DEBUG) {      Debug.output("DrawingTool: found MapBean.");    }    setCanvas((JComponent)someObj);  }  if (someObj instanceof EditToolLoader) {    if (DEBUG) {      Debug.output("DrawingTool: found EditToolLoader: " + someObj.getClass().getName());    }    addLoader((EditToolLoader)someObj);  }}  }
class C{  public static boolean isWindows8(){  return osName.indexOf("Windows") > -1 && (osVersion.equals("6.2") || osVersion.equals("6.3"));}  }
class C{  public Font showFontDialog(Component parent,String title){  BaseDialog dialog=createDialog(parent,title);  if (dialog.ask()) {    return getSelectedFont();  } else {    return null;  }}  }
class C{  public static boolean isLetterOrNumber(int c){  return isLetter(c) || isNumber(c);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:33.477 -0500",hash_original_method="3EE42FFEB0B4A779D022FF2A029DBC31",hash_generated_method="70E7CFC37DE77752A72E077AC8BCF1AA") private boolean isCphsMailboxEnabled(){  if (mCphsInfo == null)   return false;  return ((mCphsInfo[1] & CPHS_SST_MBN_MASK) == CPHS_SST_MBN_ENABLED);}  }
class C{  @Override public int hashCode(){  return this.image.hashCode();}  }
class C{  public boolean saveWEPConfig(String ssid,String password){  WifiConfiguration wifiConfig=new WifiConfiguration();  wifiConfig.SSID="\"" + ssid + "\"";  wifiConfig.hiddenSSID=true;  wifiConfig.status=WifiConfiguration.Status.DISABLED;  wifiConfig.priority=WIFI_CONFIG_PRIORITY;  wifiConfig.allowedKeyManagement.set(WifiConfiguration.KeyMgmt.NONE);  wifiConfig.allowedProtocols.set(WifiConfiguration.Protocol.RSN);  wifiConfig.allowedProtocols.set(WifiConfiguration.Protocol.WPA);  wifiConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.OPEN);  wifiConfig.allowedAuthAlgorithms.set(WifiConfiguration.AuthAlgorithm.SHARED);  wifiConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.CCMP);  wifiConfig.allowedPairwiseCiphers.set(WifiConfiguration.PairwiseCipher.TKIP);  wifiConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP40);  wifiConfig.allowedGroupCiphers.set(WifiConfiguration.GroupCipher.WEP104);  wifiConfig.wepKeys[WIFI_CONFIG_DEFAULT_INDEX]="\"" + password + "\"";  wifiConfig.wepTxKeyIndex=WIFI_CONFIG_DEFAULT_INDEX;  wifiManager.setWifiEnabled(true);  int result=wifiManager.addNetwork(wifiConfig);  boolean isSaveSuccessful=wifiManager.saveConfiguration();  boolean isNetworkEnabled=wifiManager.enableNetwork(result,true);  if (Constants.DEBUG_MODE_ENABLED) {    Log.d(TAG,"add Network returned." + result);    Log.d(TAG,"saveConfiguration returned." + isSaveSuccessful);    Log.d(TAG,"enableNetwork returned." + isNetworkEnabled);  }  return isSaveSuccessful;}  }
class C{  public static double pdf(double x,double shape,double scale){  if (x < 0)   return 0;  if (x == 0) {    if (shape == 1.0)     return 1.0 / scale; else     return 0.0;  }  if (shape == 0.0)   return 1.0 / x;  if (shape == -0.5) {    return Math.sqrt(x);  }  final double xs=x / scale;  if (shape == 1.0) {    return Math.exp(-xs) / scale;  }  final double a=Math.exp((shape - 1.0) * Math.log(xs) - xs - GammaFunction.lnGamma(shape));  return a / scale;}  }
class C{  private void closeOutputStreams(OutputStream headerStream,OutputStream bodyStream) throws IOException {  try {    if ((headerStream != null) && (headerStream != bodyStream)) {      headerStream.close();    }  }  finally {    if (bodyStream != null) {      bodyStream.close();    }  }}  }
class C{  protected boolean beforeSave(boolean newRecord){  if (!getWebContext().startsWith("/"))   setWebContext("/" + getWebContext());  if (newRecord || is_ValueChanged("M_Warehouse_ID") || getAD_Org_ID() == 0) {    MWarehouse wh=new MWarehouse(getCtx(),getM_Warehouse_ID(),get_TrxName());    setAD_Org_ID(wh.getAD_Org_ID());  }  String url=getURL();  if (url == null)   url="";  boolean urlOK=url.startsWith("http://") || url.startsWith("https://");  if (!urlOK) {    log.saveError("FillMandatory",Msg.getElement(getCtx(),"URL") + " - e.g. http://www.adempiere.org");    return false;  }  return true;}  }
class C{  public boolean sharedIsRewrite(){  return urlParser.getOptions().rewriteBatchedStatements;}  }
class C{  private void updateCoreBorderObjects(int clusterid){  int i=cores.length;  cores=Arrays.copyOf(cores,clusterid);  borders=Arrays.copyOf(borders,clusterid);  while (i < clusterid) {    cores[i]=new Core(i);    borders[i]=new Border(cores[i]);    ++i;  }}  }
class C{  static public void assertEquals(boolean expected,boolean actual){  assertEquals(null,expected,actual);}  }
class C{  public ArrayHandler(){  super();}  }
class C{  Node(K key,Object value,Node<K,V> next){  this.key=key;  this.value=value;  this.next=next;}  }
class C{  private void cleanRoadNetwork(){  String tmpFilename="tmpNetwork.xml.gz";  Set<String> roadModes=CollectionUtils.stringToSet("car,bus");  Network roadNetwork=NetworkTools.filterNetworkByLinkMode(network,roadModes);  Network restNetwork=NetworkTools.filterNetworkExceptLinkMode(network,roadModes);  new NetworkCleaner().run(roadNetwork);  new NetworkWriter(roadNetwork).write(tmpFilename);  Network roadNetworkReadAgain=NetworkTools.readNetwork(tmpFilename);  if (!new File(tmpFilename).delete()) {    log.info("Could not delete temporary road network file");  }  new NetworkCleaner().run(roadNetworkReadAgain);  NetworkTools.integrateNetwork(roadNetworkReadAgain,restNetwork);  this.network=roadNetworkReadAgain;}  }
class C{  public SVGOMPolygonElement(String prefix,AbstractDocument owner){  super(prefix,owner);}  }
class C{  public LongArray(){  this(true,16);}  }
class C{  private static Properties createProperties1(){  Properties props=new Properties();  props.setProperty(MCAST_PORT,"0");  props.setProperty(LOCATORS,"");  return props;}  }
class C{  public void selectInitialValue(JOptionPane op){  if (inputComponent != null)   inputComponent.requestFocus(); else {    if (initialFocusComponent != null)     initialFocusComponent.requestFocus();    if (initialFocusComponent instanceof JButton) {      JRootPane root=SwingUtilities.getRootPane(initialFocusComponent);      if (root != null) {        root.setDefaultButton((JButton)initialFocusComponent);      }    }  }}  }
class C{  public static double nextLatitude(){  return nextDoubleInternal(-90,90);}  }
class C{  public TextEquals(){  super("text_information.equals");}  }
class C{  public void updateBlob(String columnLabel,InputStream inputStream) throws SQLException {  throw new SQLFeatureNotSupportedException(resBundle.handleGetObject("jdbcrowsetimpl.featnotsupp").toString());}  }
class C{  protected C runClusteringAlgorithm(ResultHierarchy hierarchy,Result parent,DBIDs ids,DataStore<DoubleVector> store,int dim,String title){  SimpleTypeInformation<DoubleVector> t=new VectorFieldTypeInformation<>(DoubleVector.FACTORY,dim);  Relation<DoubleVector> sample=new MaterializedRelation<>(t,ids,title,store);  ProxyDatabase d=new ProxyDatabase(ids,sample);  C clusterResult=inner.run(d);  d.getHierarchy().remove(sample);  d.getHierarchy().remove(clusterResult);  hierarchy.add(parent,sample);  hierarchy.add(sample,clusterResult);  return clusterResult;}  }
class C{  public DotIndicator(final Context context){  super(context);  init(null,0,0);}  }
class C{  @Override final public ConstructNode visit(final ASTConstruct node,final Object data) throws VisitorException {  final GroupGraphPattern parentGP=graphPattern;  graphPattern=new GroupGraphPattern();  super.visit(node,null);  final ConstructNode group=graphPattern.buildGroup(new ConstructNode());  graphPattern=parentGP;  return group;}  }
class C{  public BarChart(XYMultipleSeriesDataset dataset,XYMultipleSeriesRenderer renderer,Type type){  super(dataset,renderer);  mType=type;}  }
class C{  public void reset(){  position=0;}  }
class C{  @Override public NotificationChain eInverseRemove(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case UmplePackage.TRACE_WHEN___CONSTRAINT_TOKEN_1:    return ((InternalEList<?>)getConstraintToken_1()).basicRemove(otherEnd,msgs);}return super.eInverseRemove(otherEnd,featureID,msgs);}  }
class C{  public void ensurePositive(int modulus){  for (int i=0; i < coeffs.length; i++) {    while (coeffs[i] < 0) {      coeffs[i]+=modulus;    }  }}  }
class C{  public static void checkAttributeMismatch(IgniteLogger log,CacheConfiguration locCfg,CacheConfiguration rmtCfg,UUID rmtNodeId,T2<String,String> attr,boolean fail) throws IgniteCheckedException {  assert rmtNodeId != null;  assert attr != null;  assert attr.get1() != null;  assert attr.get2() != null;  Object locVal=U.property(locCfg,attr.get1());  Object rmtVal=U.property(rmtCfg,attr.get1());  checkAttributeMismatch(log,rmtCfg.getName(),rmtNodeId,attr.get1(),attr.get2(),locVal,rmtVal,fail);}  }
class C{  public XYEntry<K,V> removeByIndex(int index){  K key=indexList.remove(index);  return new XYEntry<K,V>(key,this.remove(key));}  }
class C{  public Vector3i mul(int x,int y,int z,Vector3i dest){  dest.x=this.x * x;  dest.y=this.y * y;  dest.z=this.z * z;  return dest;}  }
class C{  public MapHandler(){  super();}  }
class C{  public boolean isEqual(long instant){  return (getMillis() == instant);}  }
class C{  public static String[] unionArrays(String[] array1,String[] array2){  if (array1 == null) {    return array2;  }  if (array2 == null) {    return array1;  }  Set<String> set=new LinkedHashSet<>();  set.addAll(Arrays.asList(array1));  set.addAll(Arrays.asList(array2));  return set.toArray(new String[set.size()]);}  }
class C{  public final void yyreset(java.io.Reader reader){  zzBuffer=s.array;  zzStartRead=s.offset;  zzEndRead=zzStartRead + s.count - 1;  zzCurrentPos=zzMarkedPos=s.offset;  zzLexicalState=YYINITIAL;  zzReader=reader;  zzAtEOF=false;}  }
class C{  public String write(Currency currency){  return currency.toString();}  }
class C{  public void prepare() throws ReplicatorException, InterruptedException {  for (  String extensionName : extensions.keySet()) {    logger.info("Preparing extension service for use: " + extensionName);    extensions.get(extensionName).prepare(this);  }  logger.info("Preparing pipeline for use: " + pipeline.getName());  pipeline.prepare(this);}  }
class C{  public static GraphNode serializableInstance(){  return new GraphNode("X");}  }
class C{  protected DoubleMatrix2D viewSelectionLike(int[] rowOffsets,int[] columnOffsets){  return new SelectedSparseDoubleMatrix2D(this.elements,rowOffsets,columnOffsets,0);}  }
class C{  public GreaterThanRule(final Level level){  super();  newLevelInt=level.intValue();}  }
class C{  public boolean allReadOnly() throws InterruptedException {  calculateResultFromAllReplies();  return (result_ == ALL_READONLY);}  }
class C{  public Vector4i add(int x,int y,int z,int w,Vector4i dest){  dest.x=this.x + x;  dest.y=this.y + y;  dest.z=this.z + z;  dest.w=this.w + w;  return dest;}  }
class C{  public void lostOwnership(Clipboard clipboard,Transferable contents){}  }
class C{  public boolean areNodesReachable(URI vdcId){  if (vdcId == null) {    throw new IllegalArgumentException("The target Vdc short ID should not be null or empty");  }  VirtualDataCenter vdc=dbClient.queryObject(VirtualDataCenter.class,vdcId);  Site activeSite=drUtil.getActiveSite(vdc.getShortId());  if (areNodesReachable(vdc.getShortId(),activeSite.getHostIPv4AddressMap(),activeSite.getHostIPv6AddressMap(),false)) {    return true;  }  return false;}  }
class C{  public void drawMagnifiedRegionBorderIfNeededLocked(){  mMagnifedViewport.drawWindowIfNeededLocked();}  }
class C{  public ExtractMethodDescriptor(String project,String description,String comment,Map arguments,int flags){  super(IJavaRefactorings.EXTRACT_METHOD,project,description,comment,arguments,flags);}  }
class C{  public static void log(String message){  log(new Status(IStatus.ERROR,getUniqueIdentifier(),IStatus.ERROR,message,null));}  }
class C{  public int low(){  return mLo;}  }
class C{  public Location greatCircleLocation(double azimuthDegrees,double distanceRadians,Location result){  if (result == null) {    throw new IllegalArgumentException(Logger.logMessage(Logger.ERROR,"Location","greatCircleLocation","missingResult"));  }  if (distanceRadians == 0) {    result.latitude=this.latitude;    result.longitude=this.longitude;    return result;  }  double latRadians=Math.toRadians(this.latitude);  double lonRadians=Math.toRadians(this.longitude);  double azimuthRadians=Math.toRadians(azimuthDegrees);  double cosLat=Math.cos(latRadians);  double sinLat=Math.sin(latRadians);  double cosAzimuth=Math.cos(azimuthRadians);  double sinAzimuth=Math.sin(azimuthRadians);  double sinDistance=Math.sin(distanceRadians);  double cosDistance=Math.cos(distanceRadians);  double endLatRadians=Math.asin(sinLat * cosDistance + cosLat * sinDistance * cosAzimuth);  double endLonRadians=lonRadians + Math.atan2(sinDistance * sinAzimuth,cosLat * cosDistance - sinLat * sinDistance * cosAzimuth);  if (Double.isNaN(endLatRadians) || Double.isNaN(endLonRadians)) {    result.latitude=this.latitude;    result.longitude=this.longitude;  } else {    result.latitude=normalizeLatitude(Math.toDegrees(endLatRadians));    result.longitude=normalizeLongitude(Math.toDegrees(endLonRadians));  }  return result;}  }
class C{  public synchronized void forgetAllPeers(){  mCurrentPeers.clear();}  }
class C{  public void vetoableChange(PropertyChangeEvent e){  log.config(e.getPropertyName() + "=" + e.getNewValue());  if (e.getPropertyName().equals("C_BPartner_ID")) {    int C_BPartner_ID=((Integer)e.getNewValue()).intValue();    initBPOrderDetails(C_BPartner_ID,true);  }  dialog.tableChanged(null);}  }
class C{  public FloatArrayList(float[] elements){  elements(elements);}  }
class C{  public static void consumeProcessOutput(Process self){  consumeProcessOutput(self,(OutputStream)null,(OutputStream)null);}  }
class C{  public void layout(Container container){  Map<Location,Drawable> comps=getComponentsByLocation(container);  Drawable north=comps.get(Location.NORTH);  Drawable northEast=comps.get(Location.NORTH_EAST);  Drawable east=comps.get(Location.EAST);  Drawable southEast=comps.get(Location.SOUTH_EAST);  Drawable south=comps.get(Location.SOUTH);  Drawable southWest=comps.get(Location.SOUTH_WEST);  Drawable west=comps.get(Location.WEST);  Drawable northWest=comps.get(Location.NORTH_WEST);  Drawable center=comps.get(Location.CENTER);  double widthWest=getMaxWidth(northWest,west,southWest);  double widthEast=getMaxWidth(northEast,east,southEast);  double heightNorth=getMaxHeight(northWest,north,northEast);  double heightSouth=getMaxHeight(southWest,south,southEast);  double gapEast=(widthEast > 0.0) ? getGapX() : 0.0;  double gapWest=(widthWest > 0.0) ? getGapX() : 0.0;  double gapNorth=(heightNorth > 0.0) ? getGapY() : 0.0;  double gapSouth=(heightSouth > 0.0) ? getGapY() : 0.0;  Rectangle2D bounds=container.getBounds();  Insets2D insets=container.getInsets();  if (insets == null) {    insets=new Insets2D.Double();  }  double xWest=bounds.getMinX() + insets.getLeft() - gapWest - widthWest;  double xCenter=bounds.getMinX() + insets.getLeft();  double xEast=bounds.getMaxX() - insets.getRight() + gapEast;  double yNorth=bounds.getMinY() + insets.getTop() - gapNorth - heightNorth;  double yCenter=bounds.getMinY() + insets.getTop();  double ySouth=bounds.getMaxY() - insets.getBottom() + gapSouth;  layoutComponent(northWest,xWest,yNorth,widthWest,heightNorth);  layoutComponent(north,xCenter,yNorth,bounds.getWidth() - insets.getHorizontal(),heightNorth);  layoutComponent(northEast,xEast,yNorth,widthEast,heightNorth);  layoutComponent(east,xEast,yCenter,widthEast,bounds.getHeight() - insets.getVertical());  layoutComponent(southEast,xEast,ySouth,widthEast,heightSouth);  layoutComponent(south,xCenter,ySouth,bounds.getWidth() - insets.getHorizontal(),heightSouth);  layoutComponent(southWest,xWest,ySouth,widthWest,heightSouth);  layoutComponent(west,xWest,yCenter,widthWest,bounds.getHeight() - insets.getVertical());  layoutComponent(center,xCenter + getGapX(),yCenter + getGapY(),bounds.getWidth() - insets.getHorizontal() - 2 * getGapX(),bounds.getHeight() - insets.getVertical() - 2 * getGapY());}  }
class C{  public static byte[] decode(String encoded){  if (encoded == null) {    return null;  }  char[] base64Data=encoded.toCharArray();  int len=removeWhiteSpace(base64Data);  if (len % FOURBYTE != 0) {    return null;  }  int numberQuadruple=(len / FOURBYTE);  if (numberQuadruple == 0) {    return new byte[0];  }  byte decodedData[]=null;  byte b1=0, b2=0, b3=0, b4=0;  char d1=0, d2=0, d3=0, d4=0;  int i=0;  int encodedIndex=0;  int dataIndex=0;  decodedData=new byte[(numberQuadruple) * 3];  for (; i < numberQuadruple - 1; i++) {    if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++])) || !isData((d3=base64Data[dataIndex++]))|| !isData((d4=base64Data[dataIndex++]))) {      return null;    }    b1=base64Alphabet[d1];    b2=base64Alphabet[d2];    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  if (!isData((d1=base64Data[dataIndex++])) || !isData((d2=base64Data[dataIndex++]))) {    return null;  }  b1=base64Alphabet[d1];  b2=base64Alphabet[d2];  d3=base64Data[dataIndex++];  d4=base64Data[dataIndex++];  if (!isData((d3)) || !isData((d4))) {    if (isPad(d3) && isPad(d4)) {      if ((b2 & 0xf) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 1];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);      return tmp;    } else     if (!isPad(d3) && isPad(d4)) {      b3=base64Alphabet[d3];      if ((b3 & 0x3) != 0) {        return null;      }      byte[] tmp=new byte[i * 3 + 2];      System.arraycopy(decodedData,0,tmp,0,i * 3);      tmp[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);      tmp[encodedIndex]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));      return tmp;    } else {      return null;    }  } else {    b3=base64Alphabet[d3];    b4=base64Alphabet[d4];    decodedData[encodedIndex++]=(byte)(b1 << 2 | b2 >> 4);    decodedData[encodedIndex++]=(byte)(((b2 & 0xf) << 4) | ((b3 >> 2) & 0xf));    decodedData[encodedIndex++]=(byte)(b3 << 6 | b4);  }  return decodedData;}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  StmtBody stmtBody=(StmtBody)b;  Chain<Unit> units=stmtBody.getUnits();  Iterator<Unit> stmtIt=units.snapshotIterator();  String className=b.getMethod().getDeclaringClass().getName();  logger.info("Method: {}",b.getMethod());  if (!Project.v().isSrcClass(className)) {    logger.info("XML Transform: Skipping built-in classes ");    return;  }  if (debugOn) {    logger.info("Output body again ");    logger.info("{} ",b);  }  while (stmtIt.hasNext()) {    Stmt stmt=(Stmt)stmtIt.next();    if (debugOn)     logger.info("{}",stmt);    if (!stmt.containsInvokeExpr()) {      if (debugOn)       logger.info("Skipped ");      continue;    }    SootMethod resolved=SootUtils.getMethodFromStmt(stmt);    for (    SootMethod method : getCharSequenceList) {      if (method.equals(resolved)) {        logger.info(String.format("Found getString/getText(): %s - %s\n",stmt,b.getMethod()));        replaceGetCharSequence(stmtBody,stmt);      }    }    for (    SootMethod method : getVarArgCharSequenceList) {      if (method.equals(resolved)) {        logger.info(String.format("Found getString(int, ...): %s - %s\n",stmt,b.getMethod()));        replaceGetStringVariableArgs(stmtBody,stmt);      }    }    if (resolved.toString().contains("findView")) {      logger.info("findView resolved {} ",resolved);    }    for (    SootMethod method : findViewByIdList) {      if (method.equals(resolved)) {        logger.info(String.format("Found findViewById(): %s - %s\n",stmt,b.getMethod()));        replaceFindViewById(stmtBody,stmt);      }    }    for (    SootMethod method : setContentViewList) {      if (method.equals(resolved)) {        logger.info(String.format("Found setContentView(): %s - %s\n",stmt,b.getMethod()));        replaceSetContentView(stmtBody,stmt);        break;      }    }    for (    SootMethod method : findFragmentByIdList) {      if (method.equals(resolved)) {        logger.info(String.format("Found findFragmentById(): %s - %s\n",stmt,b.getMethod()));        replaceFindFragmentById(stmtBody,stmt);        break;      }    }  }}  }
class C{  public dfn addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void put(String key,File file) throws FileNotFoundException {  put(key,file,null);}  }
class C{  public void close(){  transitionTo(State.CLOSED,onClose);}  }
class C{  public ExternalizableConverter(final Mapper mapper,final ClassLoaderReference classLoaderReference){  this.mapper=mapper;  this.classLoaderReference=classLoaderReference;  serializationMembers=new SerializationMembers();}  }
class C{  protected boolean compareToValue(HyperGraph graph,Object x){  if (x instanceof HGValueLink)   x=((HGValueLink)x).getValue();switch (operator) {case EQ:    return HGUtils.eq(value.get(),x);case LT:  return ((Comparable)x).compareTo(value.get()) < 0;case GT:return ((Comparable)x).compareTo(value.get()) > 0;case LTE:return ((Comparable)x).compareTo(value.get()) <= 0;case GTE:return ((Comparable)x).compareTo(value.get()) >= 0;default :throw new HGException("Wrong operator code [" + operator + "] passed to SimpleValueCondition.");}}  }
class C{  public boolean isClosed(){  return State.CLOSED.equals(getState());}  }
class C{  public ScaledVector(Vec vec){  this(1.0,vec);}  }
class C{  public boolean initializeLoadedClasses(){  boolean isInitializationSuccessful=true;  int nbrClassesInitialized=0;  while (true) {    Class<?>[] classes=loadedClasses();    if (classes == null) {      LogContext.debug("Automatic class initialization not supported.");      return false;    }    if (nbrClassesInitialized >= classes.length)     break;    for (int i=nbrClassesInitialized; i < classes.length; i++) {      Class<?> cls=classes[i];      try {        if (SHOW_INITIALIZED.get())         LogContext.debug("Initialize ",cls.getName());        Class.forName(cls.getName(),true,classLoader);      } catch (      Throwable error) {        isInitializationSuccessful=false;        LogContext.warning("Class ",cls.getName()," cannot be initialized.");      }    }    nbrClassesInitialized=classes.length;  }  LogContext.debug("Initialization of ",nbrClassesInitialized," classes loaded by ",classLoader);  return isInitializationSuccessful;}  }
class C{  @Override public String scrollToPositionAtProgress(float touchFraction){  if (mWidgets == null) {    return "";  }  int rowCount=mWidgets.getPackageSize();  if (rowCount == 0) {    return "";  }  stopScroll();  getCurScrollState(mScrollPosState,-1);  float pos=rowCount * touchFraction;  int availableScrollHeight=getAvailableScrollHeight(rowCount);  LinearLayoutManager layoutManager=((LinearLayoutManager)getLayoutManager());  layoutManager.scrollToPositionWithOffset(0,(int)-(availableScrollHeight * touchFraction));  int posInt=(int)((touchFraction == 1) ? pos - 1 : pos);  PackageItemInfo p=mWidgets.getPackageItemInfo(posInt);  return p.titleSectionName;}  }
class C{  protected void clearDictionary(List<Dictionary> dictionaryList){  for (  Dictionary dictionary : dictionaryList) {    dictionary.clear();  }}  }
class C{  public final boolean containsInAny(double x,double y){  for (  PickPointFrustum frustum : this) {    if (frustum.contains(x,y)) {      return true;    }  }  return false;}  }
class C{  public boolean isImmune(final StatusType statusType){  return immunities.contains(statusType);}  }
class C{  public MetadataValueTransform(MetadataKey<?>... inputSources){  this.sources=Lists.newArrayList(inputSources);}  }
class C{  public void storeOriginals(){  mStartingStartTrim=mStartTrim;  mStartingEndTrim=mEndTrim;  mStartingRotation=mRotation;}  }
class C{  public void clear(){  absoluteReadIndex=0;  relativeReadIndex=0;  relativeWriteIndex=0;  queueSize=0;}  }
class C{  public Object jjtAccept(SyntaxTreeBuilderVisitor visitor,Object data) throws VisitorException {  return visitor.visit(this,data);}  }
class C{  public void clearUnSyncedPayPalRecords(Context context){  if (context == null) {    Log.e("BCCache","param context NPE");    return;  }  final SharedPreferences prefs=context.getSharedPreferences(BC_PAYPAL_SHARED_PREFERENCE_NAME,0);  SharedPreferences.Editor spEditor=prefs.edit();  spEditor.clear();  spEditor.apply();}  }
class C{  public RemoteLocatorJoinResponse(){  super();}  }
class C{  private void initializeField(){  log.info("Updating FC Zone reference label object to be more searchable");  DbClient dbClient=this.getDbClient();  List<URI> fcZoneRefs=dbClient.queryByType(FCZoneReference.class,false);  Iterator<FCZoneReference> refs=dbClient.queryIterativeObjects(FCZoneReference.class,fcZoneRefs);  while (refs.hasNext()) {    FCZoneReference ref=refs.next();    log.info("Examining block ref (id={}) for upgrade",ref.getId().toString());    String label=ref.getLabel();    if (label == null || !label.matches(".*_.*_.*")) {      log.info("Resetting label:",label);      ref.setLabel(FCZoneReference.makeLabel(label,ref.getVolumeUri().toString()));      dbClient.updateObject(ref);    }  }}  }
class C{  public final Vset removeAdditionalVars(Vset vset){  return vset.removeAdditionalVars(varNumber);}  }
class C{  public int addBoxPlot(String name,Color color,double[][] XYdXdY){  return ((Plot2DCanvas)plotCanvas).addBoxPlot(name,color,XYdXdY);}  }
class C{  private boolean entriesContains(IndexStoreEntry ie){  Iterator<IndexStoreEntry> iterator=entries.iterator();  while (iterator.hasNext()) {    if (iterator.next().equals(ie)) {      return true;    }  }  return false;}  }
class C{  public void write(final int c) throws IOException {  if (m_writer != null)   m_writer.write(c);  if (count >= buf_length)   flushBuffer();  if (c < 0x80) {    buf[count++]=(byte)(c);  } else   if (c < 0x800) {    buf[count++]=(byte)(0xc0 + (c >> 6));    buf[count++]=(byte)(0x80 + (c & 0x3f));  } else {    buf[count++]=(byte)(0xe0 + (c >> 12));    buf[count++]=(byte)(0x80 + ((c >> 6) & 0x3f));    buf[count++]=(byte)(0x80 + (c & 0x3f));  }}  }
class C{  public void add(String name,XYDatasetWithGroups dataset){  assert names.size() == datasets.size();  assert datasets.size() == maxCounts.size();  names.add(name);  datasets.add(dataset);  maxCounts.add(calculateMaxCount(dataset));  if (datasets.size() == 1) {    assert active == null;    int groupCount=dataset.getGroupCount();    active=new boolean[groupCount];    groupNames=new String[groupCount];    for (int i=0; i < groupCount; ++i) {      active[i]=true;      dataset.setGroupActive(i,true);      groupNames[i]=dataset.getGroupName(i);    }  } else {    assert active != null;    assert datasets.size() > 1;    assert dataset.getGroupCount() == active.length;    for (int i=0; i < groupNames.length; ++i) {      assert groupNames[i].equals(dataset.getGroupName(i));    }  }  assert names.size() == datasets.size();  assert datasets.size() == maxCounts.size();}  }
class C{  protected void tearDown(){  hs=null;  objArray=null;}  }
class C{  public Task<FileShareRestRep> dissociateFilePolicy(URI fileSystemId,URI filePolicyId){  UriBuilder builder=client.uriBuilder(getIdUrl() + "/unassign-file-policy/{file_policy_uri}");  URI targetUri=builder.build(fileSystemId,filePolicyId);  return putTaskURI(null,targetUri);}  }
class C{  private void updateBlockConnectivity(){  int sz=cList.size();  boolean[] found=new boolean[sz];  for (int i=0; i < sz; i++) {    found[i]=false;  }  LayoutBlock blk1=null;  LayoutBlock blk2=null;  LayoutConnectivity c=null;  Point2D p1;  Point2D p2;  if (layoutEditor.pointList.size() > 0) {    PositionablePoint p=null;    TrackSegment ts1=null;    TrackSegment ts2=null;    for (int i=0; i < layoutEditor.pointList.size(); i++) {      p=layoutEditor.pointList.get(i);      if (p.getType() == PositionablePoint.ANCHOR) {        ts1=p.getConnect1();        ts2=p.getConnect2();        if ((ts1 != null) && (ts2 != null)) {          blk1=ts1.getLayoutBlock();          blk2=ts2.getLayoutBlock();          if ((blk1 != null) && (blk2 != null) && (blk1 != blk2)) {            c=new LayoutConnectivity(blk1,blk2);            if (ts1.getConnect1() == p) {              p1=layoutEditor.getCoords(ts1.getConnect2(),ts1.getType2());            } else {              p1=layoutEditor.getCoords(ts1.getConnect1(),ts1.getType1());            }            if (ts2.getConnect1() == p) {              p2=layoutEditor.getCoords(ts2.getConnect2(),ts2.getType2());            } else {              p2=layoutEditor.getCoords(ts2.getConnect1(),ts2.getType1());            }            c.setDirection(computeDirection(p1,p2));            c.setConnections(ts1,ts2,LayoutEditor.TRACK,p);            checkConnectivity(c,found);          }        }      } else       if (p.getType() == PositionablePoint.EDGE_CONNECTOR) {        ts1=p.getConnect1();        ts2=p.getConnect2();        if ((ts1 != null) && (ts2 != null)) {          blk1=ts1.getLayoutBlock();          blk2=ts2.getLayoutBlock();          if ((blk1 != null) && (blk2 != null) && (blk1 != blk2)) {            c=new LayoutConnectivity(blk1,blk2);            if (ts1.getConnect1() == p) {              p1=layoutEditor.getCoords(ts1.getConnect2(),ts1.getType2());            } else {              p1=layoutEditor.getCoords(ts1.getConnect1(),ts1.getType1());            }            c.setDirection(computeDirection(p1,p.getCoords()));            c.setConnections(ts1,ts2,LayoutEditor.TRACK,p);            checkConnectivity(c,found);          }        }      }    }  }  if (layoutEditor.trackList.size() > 0) {    LayoutTurnout lt=null;    int type=0;    LevelXing lx=null;    LayoutSlip ls=null;    TrackSegment ts=null;    for (int i=0; i < layoutEditor.trackList.size(); i++) {      ts=layoutEditor.trackList.get(i);      blk1=ts.getLayoutBlock();      if (blk1 != null) {        if ((ts.getType1() >= LayoutEditor.TURNOUT_A) && (ts.getType1() <= LayoutEditor.LEVEL_XING_D)) {          if (ts.getType1() <= LayoutEditor.TURNOUT_D) {            lt=(LayoutTurnout)ts.getConnect1();            type=ts.getType1();            blk2=lt.getLayoutBlock();            if (lt.getTurnoutType() > LayoutTurnout.WYE_TURNOUT) {              if ((type == LayoutEditor.TURNOUT_B) && (lt.getLayoutBlockB() != null)) {                blk2=lt.getLayoutBlockB();              }              if ((type == LayoutEditor.TURNOUT_C) && (lt.getLayoutBlockC() != null)) {                blk2=lt.getLayoutBlockC();              }              if ((type == LayoutEditor.TURNOUT_D) && (lt.getLayoutBlockD() != null)) {                blk2=lt.getLayoutBlockD();              }            }            if ((blk2 != null) && (blk1 != blk2)) {              c=new LayoutConnectivity(blk1,blk2);              c.setConnections(ts,lt,type,null);              c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect2(),ts.getType2()),layoutEditor.getCoords(ts.getConnect1(),type)));              checkConnectivity(c,found);            }          } else {            lx=(LevelXing)ts.getConnect1();            type=ts.getType1();            if ((type == LayoutEditor.LEVEL_XING_A) || (type == LayoutEditor.LEVEL_XING_C)) {              blk2=lx.getLayoutBlockAC();            } else {              blk2=lx.getLayoutBlockBD();            }            if ((blk2 != null) && (blk1 != blk2)) {              c=new LayoutConnectivity(blk1,blk2);              c.setConnections(ts,lx,type,null);              c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect2(),ts.getType2()),layoutEditor.getCoords(ts.getConnect1(),type)));              checkConnectivity(c,found);            }          }        } else         if ((ts.getType1() >= LayoutEditor.SLIP_A) && (ts.getType1() <= LayoutEditor.SLIP_D)) {          ls=(LayoutSlip)ts.getConnect1();          type=ts.getType1();          blk2=ls.getLayoutBlock();          if ((blk2 != null) && (blk1 != blk2)) {            c=new LayoutConnectivity(blk1,blk2);            c.setConnections(ts,ls,type,null);            c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect2(),ts.getType2()),layoutEditor.getCoords(ts.getConnect1(),type)));            checkConnectivity(c,found);          }        }        if ((ts.getType2() >= LayoutEditor.TURNOUT_A) && (ts.getType2() <= LayoutEditor.LEVEL_XING_D)) {          if (ts.getType2() <= LayoutEditor.TURNOUT_D) {            lt=(LayoutTurnout)ts.getConnect2();            type=ts.getType2();            blk2=lt.getLayoutBlock();            if (lt.getTurnoutType() > LayoutTurnout.WYE_TURNOUT) {              if ((type == LayoutEditor.TURNOUT_B) && (lt.getLayoutBlockB() != null)) {                blk2=lt.getLayoutBlockB();              }              if ((type == LayoutEditor.TURNOUT_C) && (lt.getLayoutBlockC() != null)) {                blk2=lt.getLayoutBlockC();              }              if ((type == LayoutEditor.TURNOUT_D) && (lt.getLayoutBlockD() != null)) {                blk2=lt.getLayoutBlockD();              }            }            if ((blk2 != null) && (blk1 != blk2)) {              c=new LayoutConnectivity(blk1,blk2);              c.setConnections(ts,lt,type,null);              c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect1(),ts.getType1()),layoutEditor.getCoords(ts.getConnect2(),type)));              checkConnectivity(c,found);            }          } else {            lx=(LevelXing)ts.getConnect2();            type=ts.getType2();            if ((type == LayoutEditor.LEVEL_XING_A) || (type == LayoutEditor.LEVEL_XING_C)) {              blk2=lx.getLayoutBlockAC();            } else {              blk2=lx.getLayoutBlockBD();            }            if ((blk2 != null) && (blk1 != blk2)) {              c=new LayoutConnectivity(blk1,blk2);              c.setConnections(ts,lx,type,null);              c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect1(),ts.getType1()),layoutEditor.getCoords(ts.getConnect2(),type)));              checkConnectivity(c,found);            }          }        } else         if ((ts.getType2() >= LayoutEditor.SLIP_A) && (ts.getType2() <= LayoutEditor.SLIP_D)) {          ls=(LayoutSlip)ts.getConnect2();          type=ts.getType2();          blk2=ls.getLayoutBlock();          if ((blk2 != null) && (blk1 != blk2)) {            c=new LayoutConnectivity(blk1,blk2);            c.setConnections(ts,ls,type,null);            c.setDirection(computeDirection(layoutEditor.getCoords(ts.getConnect1(),ts.getType1()),layoutEditor.getCoords(ts.getConnect2(),type)));            checkConnectivity(c,found);          }        } else {          log.warn("Did not decode ts.getType2() of {} (A)",ts.getType2());        }      }    }  }  if (layoutEditor.turnoutList.size() > 0) {    LayoutTurnout lt=null;    for (int i=0; i < layoutEditor.turnoutList.size(); i++) {      lt=layoutEditor.turnoutList.get(i);      if ((lt.getTurnoutType() >= LayoutTurnout.DOUBLE_XOVER) && (lt.getLayoutBlock() != null)) {        if ((lt.getLayoutBlockB() != null) || (lt.getLayoutBlockC() != null) || (lt.getLayoutBlockD() != null)) {          if ((lt.getLayoutBlockB() != null) && (lt.getLayoutBlock() != lt.getLayoutBlockB())) {            c=new LayoutConnectivity(lt.getLayoutBlock(),lt.getLayoutBlockB());            c.setXoverBoundary(lt,LayoutConnectivity.XOVER_BOUNDARY_AB);            c.setDirection(computeDirection(lt.getCoordsA(),lt.getCoordsB()));            checkConnectivity(c,found);          }          if ((lt.getTurnoutType() != LayoutTurnout.LH_XOVER) && (lt.getLayoutBlockC() != null) && (lt.getLayoutBlock() != lt.getLayoutBlockC())) {            c=new LayoutConnectivity(lt.getLayoutBlock(),lt.getLayoutBlockC());            c.setXoverBoundary(lt,LayoutConnectivity.XOVER_BOUNDARY_AC);            c.setDirection(computeDirection(lt.getCoordsA(),lt.getCoordsC()));            checkConnectivity(c,found);          }          if ((lt.getLayoutBlockC() != null) && (lt.getLayoutBlockD() != null) && (lt.getLayoutBlockC() != lt.getLayoutBlockD())) {            c=new LayoutConnectivity(lt.getLayoutBlockC(),lt.getLayoutBlockD());            c.setXoverBoundary(lt,LayoutConnectivity.XOVER_BOUNDARY_CD);            c.setDirection(computeDirection(lt.getCoordsC(),lt.getCoordsD()));            checkConnectivity(c,found);          }          if ((lt.getTurnoutType() != LayoutTurnout.RH_XOVER) && (lt.getLayoutBlockB() != null) && (lt.getLayoutBlockD() != null)&& (lt.getLayoutBlockB() != lt.getLayoutBlockD())) {            c=new LayoutConnectivity(lt.getLayoutBlockB(),lt.getLayoutBlockD());            c.setXoverBoundary(lt,LayoutConnectivity.XOVER_BOUNDARY_BD);            c.setDirection(computeDirection(lt.getCoordsB(),lt.getCoordsD()));            checkConnectivity(c,found);          }        }      }    }  }  for (int i=sz - 1; i >= 0; i--) {    if (!found[i]) {      cList.remove(i);    }  }  blockConnectivityChanged=false;}  }
class C{  @Override protected SmileParser _createJsonParser(byte[] data,int offset,int len,IOContext ctxt) throws IOException, JsonParseException {  return new SmileParserBootstrapper(ctxt,data,offset,len).constructParser(_parserFeatures,_smileParserFeatures,_objectCodec,_rootByteSymbols);}  }
class C{  protected void putValid(String cacheName){  try {    grid(0).cache(cacheName).put(KEY_VAL,KEY_VAL);    assert grid(0).cache(cacheName).get(KEY_VAL).equals(KEY_VAL);  } catch (  CacheException ex) {    assert false : "topology validation broken";  }}  }
class C{  private void calculateModel() throws AdeInternalException {  calculateMsgIndices2msgIdMap();  final int numValidMessages=m_msgIndices2msgIdMap.length;  logger.info("MI matrix size (num of valid messege IDs) is " + numValidMessages + " X "+ numValidMessages);  int numOfNonZeroPairs=0;  final double[][] jointProbabilities=new double[2][2];  for (int i=0; i < mCoOccurrencesAndMiMatrix.getRowNum(); i++) {    for (int j=0; j < i; j++) {      if ((int)mCoOccurrencesAndMiMatrix.get(i,j) != 0) {        numOfNonZeroPairs++;      }      calculateAndSetSignedMutualInformation(i,j,jointProbabilities);    }  }  for (int i=0; i < mCoOccurrencesAndMiMatrix.getRowNum(); i++) {    calculateAndSetSignedMutualInformation(i,i,jointProbabilities);  }  GeneralUtils.logMemStatus("End of calculateModel()");  logger.info("number of non-zero messege ID pairs is " + numOfNonZeroPairs);}  }
class C{  public boolean isSubscriptionDurable(){  if (ActiveMQActivationSpec.trace) {    ActiveMQRALogger.LOGGER.trace("isSubscriptionDurable()");  }  return subscriptionDurability;}  }
class C{  public String globalInfo(){  return "Performs a principal components analysis and transformation of " + "the data.\n" + "Dimensionality reduction is accomplished by choosing enough eigenvectors "+ "to account for some percentage of the variance in the original data -- "+ "default 0.95 (95%).\n"+ "Based on code of the attribute selection scheme 'PrincipalComponents' "+ "by Mark Hall and Gabi Schmidberger.";}  }
class C{  public void testPrepStmtSetObjectAndNewSupportedTypes() throws Exception {  createTable("testSetObjectPS1","(id INT, d DATE, t TIME, dt DATETIME, ts TIMESTAMP)");  this.pstmt=this.conn.prepareStatement("INSERT INTO testSetObjectPS1 VALUES (?, ?, ?, ?, ?)");  validateTestDataLocalDTTypes("testSetObjectPS1",insertTestDataLocalDTTypes(this.pstmt));  createTable("testSetObjectPS2","(id INT, ot1 VARCHAR(100), ot2 BLOB, odt1 VARCHAR(100), odt2 BLOB)");  this.pstmt=this.conn.prepareStatement("INSERT INTO testSetObjectPS2 VALUES (?, ?, ?, ?, ?)");  validateTestDataOffsetDTTypes("testSetObjectPS2",insertTestDataOffsetDTTypes(this.pstmt));}  }
class C{  private boolean useOldPropertyNames(){  return (bundleProperties.getJavaVersion() <= 1.3);}  }
class C{  public static String encodePath(String path){  return (encode(path,URI_STEP_ALLOWED));}  }
class C{  @Override @SuppressWarnings("unchecked") public void keyPressed(KeyEvent evt){  int keyCode=evt.getKeyCode();  int modifiers=evt.getModifiers();  if (keyCode == KeyEvent.VK_CONTROL || keyCode == KeyEvent.VK_SHIFT || keyCode == KeyEvent.VK_ALT || keyCode == KeyEvent.VK_META) {    return;  }  if ((modifiers & InputEvent.SHIFT_MASK) != 0 || (modifiers & InputEvent.CTRL_MASK) != 0 || evt.isActionKey() || keyCode == KeyEvent.VK_BACK_SPACE || keyCode == KeyEvent.VK_DELETE || keyCode == KeyEvent.VK_ENTER || keyCode == KeyEvent.VK_TAB || keyCode == KeyEvent.VK_ESCAPE) {    if (grabAction != null) {      handleGrabAction(evt);      return;    }    KeyStroke keyStroke=KeyStroke.getKeyStroke(keyCode,modifiers);    Object o=currentBindings.get(keyStroke);    if (o == null) {      if (currentBindings != bindings) {        Toolkit.getDefaultToolkit().beep();        repeatCount=0;        repeat=false;        evt.consume();      }      currentBindings=bindings;      return;    } else     if (o instanceof ActionListener) {      currentBindings=bindings;      executeAction(((ActionListener)o),evt.getSource(),null);      evt.consume();      return;    } else     if (o instanceof Hashtable) {      currentBindings=(Hashtable)o;      evt.consume();      return;    }  }}  }
class C{  public MinLengthValidator(@NonNull final Context context,@StringRes final int resourceId,final int minLength){  super(context,resourceId);  setMinLength(minLength);}  }
class C{  public BoundRequestBuilder createRequest() throws HttpRequestCreateException {  BoundRequestBuilder builder=null;  getLogger().debug("AHC completeUrl " + requestUrl);  try {switch (httpMethod) {case GET:      builder=client.prepareGet(requestUrl);    break;case POST:  builder=client.preparePost(requestUrl);break;case PUT:builder=client.preparePut(requestUrl);break;case HEAD:builder=client.prepareHead(requestUrl);break;case OPTIONS:builder=client.prepareOptions(requestUrl);break;case DELETE:builder=client.prepareDelete(requestUrl);break;default :break;}PcHttpUtils.addHeaders(builder,this.httpHeaderMap);if (!Strings.isNullOrEmpty(postData)) {builder.setBody(postData);}} catch (Exception t) {throw new HttpRequestCreateException("Error in creating request in Httpworker. " + " If BoundRequestBuilder is null. Then fail to create.",t);}return builder;}  }
class C{  public Long addMeetingMemberRemindToRoom(String SID,Long room_id,String firstname,String lastname,String email,String baseUrl,Long language_id) throws AxisFault {  try {    Long users_id=sessionManagement.checkSession(SID);    Long user_level=userManagement.getUserLevelByID(users_id);    if (authLevelManagement.checkWebServiceLevel(user_level)) {      Appointment appointment=appointmentDao.getAppointmentByRoom(room_id);      if (appointment == null) {        return -1L;      }      Long memberId=meetingMemberLogic.addMeetingMember(firstname,lastname,"0","0",appointment.getAppointmentId(),null,email,baseUrl,null,new Boolean(false),language_id,false,"",null,null,"");      return memberId;    } else {      return -2L;    }  } catch (  Exception err) {    log.error("[addRoomWithModeration] ",err);    throw new AxisFault(err.getMessage());  }}  }
class C{  public static boolean looksLikeAListStyleImage(String val){  return "none".equals(val) || looksLikeAURI(val);}  }
class C{  public static Validator<?> createValidator(BeanManager beanManager,String value){  Annotation qualifier=new FacesValidatorAnnotationLiteral(value);  Validator<?> managedValidator=(Validator<?>)getBeanReferenceByType(beanManager,VALIDATOR_TYPE,qualifier);  if (managedValidator == null) {    managedValidator=getBeanReference(beanManager,Validator.class,qualifier);  }  if (managedValidator != null) {    return new CdiValidator(value,managedValidator);  }  return null;}  }
class C{  int declareOne(DeclarationKind kind,Direction annotationsDirection,Optional<ModifiersTree> modifiers,Tree type,VarArgsOrNot isVarargs,List<AnnotationTree> varargsAnnotations,Name name,String op,String equals,Optional<ExpressionTree> initializer,Optional<String> trailing,Optional<ExpressionTree> receiverExpression,Optional<TypeWithDims> typeWithDims){  BreakTag typeBreak=genSym();  BreakTag verticalAnnotationBreak=genSym();  boolean isField=kind == DeclarationKind.FIELD;  if (isField) {    builder.blankLineWanted(BlankLineWanted.conditional(verticalAnnotationBreak));  }  Deque<List<AnnotationTree>> dims=new ArrayDeque<>(typeWithDims.isPresent() ? typeWithDims.get().dims : Collections.<List<AnnotationTree>>emptyList());  int baseDims=0;  builder.open(kind == DeclarationKind.PARAMETER && (modifiers.isPresent() && !modifiers.get().getAnnotations().isEmpty()) ? plusFour : ZERO);{    if (modifiers.isPresent()) {      visitAndBreakModifiers(modifiers.get(),annotationsDirection,Optional.of(verticalAnnotationBreak));    }    builder.open(plusFour);{      builder.open(ZERO);{        builder.open(ZERO);{          if (typeWithDims.isPresent() && typeWithDims.get().node != null) {            scan(typeWithDims.get().node,null);            int totalDims=dims.size();            builder.open(plusFour);            maybeAddDims(dims);            builder.close();            baseDims=totalDims - dims.size();          } else {            scan(type,null);          }          if (isVarargs.isYes()) {            visitAnnotations(varargsAnnotations,BreakOrNot.YES,BreakOrNot.YES);            builder.op("...");          }        }        builder.close();        if (type != null) {          builder.breakOp(Doc.FillMode.INDEPENDENT," ",ZERO,Optional.of(typeBreak));        }        builder.open(Indent.If.make(typeBreak,plusFour,ZERO));        if (receiverExpression.isPresent()) {          scan(receiverExpression.get(),null);        } else {          visit(name);        }        builder.op(op);      }      maybeAddDims(dims);      builder.close();    }    builder.close();    if (initializer.isPresent()) {      builder.space();      token(equals);      if (initializer.get().getKind() == Tree.Kind.NEW_ARRAY && ((NewArrayTree)initializer.get()).getType() == null) {        builder.open(minusFour);        builder.space();        initializer.get().accept(this,null);        builder.close();      } else {        builder.open(Indent.If.make(typeBreak,plusFour,ZERO));{          builder.breakToFill(" ");          scan(initializer.get(),null);        }        builder.close();      }    }    if (trailing.isPresent() && builder.peekToken().equals(trailing)) {      builder.guessToken(trailing.get());    }    builder.close();  }  builder.close();  if (isField) {    builder.blankLineWanted(BlankLineWanted.conditional(verticalAnnotationBreak));  }  return baseDims;}  }
class C{  public void deleteTag(int tagId){  int ifdId=getDefinedTagDefaultIfd(tagId);  deleteTag(tagId,ifdId);}  }
class C{  public T cols(String value){  return attr("cols",value);}  }
class C{  ChildIterator(Compiler compiler,int opPos,int analysis) throws javax.xml.transform.TransformerException {  super(compiler,opPos,analysis,false);  initNodeTest(DTMFilter.SHOW_ALL);}  }
class C{  @SuppressWarnings("unchecked") private Map<ClusterNode,IntArray> partitionedUnstableDataNodes(final GridCacheContext<?,?> cctx,List<Integer> extraSpaces){  assert !cctx.isReplicated() && !cctx.isLocal() : cctx.name() + " must be partitioned";  final int partsCnt=cctx.affinity().partitions();  if (extraSpaces != null) {    for (int i=0; i < extraSpaces.size(); i++) {      GridCacheContext<?,?> extraCctx=cacheContext(extraSpaces.get(i));      if (extraCctx.isReplicated() || extraCctx.isLocal())       continue;      int parts=extraCctx.affinity().partitions();      if (parts != partsCnt)       throw new CacheException("Number of partitions must be the same for correct collocation [cache1=" + cctx.name() + ", parts1="+ partsCnt+ ", cache2="+ extraCctx.name()+ ", parts2="+ parts+ "]");    }  }  Set<ClusterNode>[] partLocs=new Set[partsCnt];  for (int p=0, parts=cctx.affinity().partitions(); p < parts; p++) {    List<ClusterNode> owners=cctx.topology().owners(p);    if (F.isEmpty(owners)) {      if (!F.isEmpty(dataNodes(cctx.name(),NONE)))       return null;      throw new CacheException("Failed to find data nodes [cache=" + cctx.name() + ", part="+ p+ "]");    }    partLocs[p]=new HashSet<>(owners);  }  if (extraSpaces != null) {    for (int i=0; i < extraSpaces.size(); i++) {      GridCacheContext<?,?> extraCctx=cacheContext(extraSpaces.get(i));      if (extraCctx.isReplicated() || extraCctx.isLocal())       continue;      for (int p=0, parts=extraCctx.affinity().partitions(); p < parts; p++) {        List<ClusterNode> owners=extraCctx.topology().owners(p);        if (F.isEmpty(owners)) {          if (!F.isEmpty(dataNodes(extraCctx.name(),NONE)))           return null;          throw new CacheException("Failed to find data nodes [cache=" + extraCctx.name() + ", part="+ p+ "]");        }        if (partLocs[p] == null)         partLocs[p]=new HashSet<>(owners); else {          partLocs[p].retainAll(owners);          if (partLocs[p].isEmpty())           return null;        }      }    }    for (int i=0; i < extraSpaces.size(); i++) {      GridCacheContext<?,?> extraCctx=cacheContext(extraSpaces.get(i));      if (!extraCctx.isReplicated())       continue;      Set<ClusterNode> dataNodes=replicatedUnstableDataNodes(extraCctx);      if (F.isEmpty(dataNodes))       return null;      for (      Set<ClusterNode> partLoc : partLocs) {        partLoc.retainAll(dataNodes);        if (partLoc.isEmpty())         return null;      }    }  }  Map<ClusterNode,IntArray> res=new HashMap<>();  for (int p=0; p < partLocs.length; p++) {    Set<ClusterNode> pl=partLocs[p];    assert !F.isEmpty(pl) : pl;    ClusterNode n=pl.size() == 1 ? F.first(pl) : F.rand(pl);    IntArray parts=res.get(n);    if (parts == null)     res.put(n,parts=new IntArray());    parts.add(p);  }  return res;}  }
class C{  public boolean isRelevant(int importance){  return isRelevant(this.importance,importance);}  }
class C{  private static boolean isRecognizedFormat(int colorFormat){switch (colorFormat) {case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420SemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar:case MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar:    return true;default :  return false;}}  }
class C{  private void showFeedback(String message){  if (myHost != null) {    myHost.showFeedback(message);  } else {    System.out.println(message);  }}  }
class C{  @Override public void run(){  amIActive=true;  String inputFile=args[0];  if (inputFile.toLowerCase().contains(".dep")) {    calculateRaster();  } else   if (inputFile.toLowerCase().contains(".shp")) {    calculateVector();  } else {    showFeedback("There was a problem reading the input file.");  }}  }
class C{  private void createGoogleAPIClient(){  googleApiClient=new GoogleApiClient.Builder(this).addApi(Wallet.API,new Wallet.WalletOptions.Builder().setEnvironment(SampleApplication.WALLET_ENVIRONMENT).build()).enableAutoManage(this,this).build();}  }
class C{  private void initComputeProgram(){  IntBuffer workGroupSize=BufferUtils.createIntBuffer(3);  glGetProgramiv(computeProgram,GL_COMPUTE_WORK_GROUP_SIZE,workGroupSize);  workGroupSizeX=workGroupSize.get(0);  workGroupSizeY=workGroupSize.get(1);  int boxesResourceIndex=glGetProgramResourceIndex(computeProgram,GL_SHADER_STORAGE_BLOCK,"Boxes");  IntBuffer props=BufferUtils.createIntBuffer(1);  IntBuffer params=BufferUtils.createIntBuffer(1);  props.put(0,GL_BUFFER_BINDING);  glGetProgramResourceiv(computeProgram,GL_SHADER_STORAGE_BLOCK,boxesResourceIndex,props,null,params);  boxesSsboBinding=params.get(0);  int uniformsResourceIndex=glGetProgramResourceIndex(computeProgram,GL_UNIFORM_BLOCK,"Uniforms");  glGetProgramResourceiv(computeProgram,GL_UNIFORM_BLOCK,uniformsResourceIndex,props,null,params);  computeUboBinding=params.get(0);  int loc=glGetUniformLocation(computeProgram,"framebufferImage");  glGetUniformiv(computeProgram,loc,params);  framebufferImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldPositionImage");  glGetUniformiv(computeProgram,loc,params);  worldPositionImageBinding=params.get(0);  loc=glGetUniformLocation(computeProgram,"worldNormalImage");  glGetUniformiv(computeProgram,loc,params);  worldNormalImageBinding=params.get(0);}  }
class C{  public void putStringArray(String key,String[] value){  map.put(key,value);}  }
class C{  public boolean functionAvailable(String ns,String funcName) throws javax.xml.transform.TransformerException {  try {    if (funcName == null) {      String fmsg=XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ARG_CANNOT_BE_NULL,new Object[]{"Function Name"});      throw new NullPointerException(fmsg);    }    javax.xml.namespace.QName myQName=new QName(ns,funcName);    javax.xml.xpath.XPathFunction xpathFunction=resolver.resolveFunction(myQName,0);    if (xpathFunction == null) {      return false;    }    return true;  } catch (  Exception e) {    return false;  }}  }
class C{  public org.apache.flex.forks.batik.script.Window createWindow(Interpreter interp,String lang){  return new Global(interp,lang);}  }
class C{  @Override public void declareExtensions(ExtensionProfile extProfile){  ExtensionDescription desc=EntryLink.getDefaultDescription();  desc.setRepeatable(true);  extProfile.declare(MessageEntry.class,desc);  extProfile.declare(MessageEntry.class,ExtensionDescription.getDefaultDescription(LanguageExtension.class));  extProfile.declare(MessageEntry.class,ExtensionDescription.getDefaultDescription(SubjectExtension.class));  extProfile.declare(MessageEntry.class,ExtensionDescription.getDefaultDescription(DateExtension.class));  extProfile.declare(MessageEntry.class,ExtensionDescription.getDefaultDescription(ReadExtension.class));  extProfile.declare(MessageEntry.class,ExtensionDescription.getDefaultDescription(BodyExtension.class));}  }
class C{  @Nonnull public BugInstance addClass(ClassNode classNode){  String dottedClassName=ClassName.toDottedClassName(classNode.name);  ClassAnnotation classAnnotation=new ClassAnnotation(dottedClassName);  add(classAnnotation);  return this;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:57.747 -0400",hash_original_method="C3CF0DDAA6E3B0E070C32CB96AD599A3",hash_generated_method="68AE37DE768F793EE88EDB4E916798EC") public FileEntry newChildInstance(File file){  return new FileEntry(this,file);}  }
class C{  @ObjectiveCName("changeInAppNotificationsEnabledWithValue:") public void changeInAppNotificationsEnabled(boolean val){  modules.getSettingsModule().changeInAppEnabled(val);}  }
class C{  public SupportMessageTemplatesFactory(){  this.messageTemplates=new HashMap<String,String>();  registerTemplates();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:29:11.000 -0500",hash_original_method="ED7596641D0AD2A83AA1412880E16E35",hash_generated_method="9BB01C558D2CFCC5F3F56807099D8790") public static int axisFromString(String symbolicName){  if (symbolicName == null) {    throw new IllegalArgumentException("symbolicName must not be null");  }  final int count=AXIS_SYMBOLIC_NAMES.size();  for (int i=0; i < count; i++) {    if (symbolicName.equals(AXIS_SYMBOLIC_NAMES.valueAt(i))) {      return i;    }  }  try {    return Integer.parseInt(symbolicName,10);  } catch (  NumberFormatException ex) {    return -1;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:01:33.809 -0500",hash_original_method="FB7C4A360F838D2C567FCD9A267C1C89",hash_generated_method="C87190F18E691D265EA60DB7C80615E1") protected final void assertAttached(){  if (poolEntry == null) {    throw new IllegalStateException("Adapter is detached.");  }}  }
class C{  public void registerTask(Long taskId,long redriverDelay){  this.redriverActorProxy.tell(new TaskRedriverDetails(taskId,redriverDelay,TaskRedriverDetails.RegisterAction.Register),ActorRef.noSender());}  }
class C{  public static <V>String replace(final Object source,final Map<String,V> valueMap){  return new StrSubstitutor(valueMap).replace(source);}  }
class C{  public void addShowListener(ActionListener l){  if (showListener == null) {    showListener=new EventDispatcher();  }  showListener.addListener(l);}  }
class C{  public Instrumenter attachAdditiveEpsilonIndicatorCollector(){  includeAdditiveEpsilonIndicator=true;  return this;}  }
class C{  public void processServerResponse(int response,com.google.android.vending.licensing.ResponseData rawData){  if (response != Policy.RETRY) {    setRetryCount(0);  } else {    setRetryCount(mRetryCount + 1);  }  if (response == Policy.LICENSED) {    Map<String,String> extras=decodeExtras(rawData.extra);    mLastResponse=response;    setValidityTimestamp(Long.toString(System.currentTimeMillis() + MILLIS_PER_MINUTE));    Set<String> keys=extras.keySet();    for (    String key : keys) {      if (key.equals("VT")) {        setValidityTimestamp(extras.get(key));      } else       if (key.equals("GT")) {        setRetryUntil(extras.get(key));      } else       if (key.equals("GR")) {        setMaxRetries(extras.get(key));      } else       if (key.startsWith("FILE_URL")) {        int index=Integer.parseInt(key.substring("FILE_URL".length())) - 1;        setExpansionURL(index,extras.get(key));      } else       if (key.startsWith("FILE_NAME")) {        int index=Integer.parseInt(key.substring("FILE_NAME".length())) - 1;        setExpansionFileName(index,extras.get(key));      } else       if (key.startsWith("FILE_SIZE")) {        int index=Integer.parseInt(key.substring("FILE_SIZE".length())) - 1;        setExpansionFileSize(index,Long.parseLong(extras.get(key)));      }    }  } else   if (response == Policy.NOT_LICENSED) {    setValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP);    setRetryUntil(DEFAULT_RETRY_UNTIL);    setMaxRetries(DEFAULT_MAX_RETRIES);  }  setLastResponse(response);  mPreferences.commit();}  }
class C{  private JSONObject executeSqlStatementQuery(SQLiteDatabase mydb,String query,JSONArray paramsAsJson,CallbackContext cbc) throws Exception {  JSONObject rowsResult=new JSONObject();  Cursor cur;  try {    String[] params;    params=new String[paramsAsJson.length()];    for (int j=0; j < paramsAsJson.length(); j++) {      if (paramsAsJson.isNull(j))       params[j]=""; else       params[j]=paramsAsJson.getString(j);    }    cur=mydb.rawQuery(query,params);  } catch (  Exception ex) {    ex.printStackTrace();    String errorMessage=ex.getMessage();    Log.v("executeSqlBatch","SQLitePlugin.executeSql[Batch](): Error=" + errorMessage);    throw ex;  }  if (cur != null && cur.moveToFirst()) {    JSONArray rowsArrayResult=new SQLiteArray(cur.getCount());    String key;    int colCount=cur.getColumnCount();    do {      JSONObject row=new SQLiteObject(colCount);      try {        for (int i=0; i < colCount; ++i) {          key=cur.getColumnName(i);          if (android.os.Build.VERSION.SDK_INT >= 11) {            try {              bindPostHoneycomb(row,key,cur,i);            } catch (            Exception ex) {              bindPreHoneycomb(row,key,cur,i);            }          } else {            bindPreHoneycomb(row,key,cur,i);          }        }        rowsArrayResult.put(row);      } catch (      JSONException e) {        e.printStackTrace();      }    } while (cur.moveToNext());    try {      rowsResult.put("rows",rowsArrayResult);    } catch (    JSONException e) {      e.printStackTrace();    }  }  if (cur != null) {    cur.close();  }  return rowsResult;}  }
class C{  boolean enableSis(String schedule){  String volumePath="/vol/" + name;  NaElement elem=new NaElement("sis-enable");  elem.addNewChild("path",volumePath);  try {    server.invokeElem(elem);  } catch (  Exception e) {    log.error("Failed to enable SIS on volume: " + name,e);    return false;  }  if (schedule == null || schedule.isEmpty()) {    schedule="auto";  }  elem=new NaElement("sis-set-config");  elem.addNewChild("path",volumePath);  elem.addNewChild("schedule",schedule);  try {    server.invokeElem(elem);  } catch (  Exception e) {    String msg="Failed to set SIS schedule on volume: " + name;    log.error(msg,e);    throw new NetAppException(msg,e);  }  return true;}  }
class C{  private static boolean needsExplicitBoxing(Expression expression){  StructuralPropertyDescriptor locationInParent=expression.getLocationInParent();  if (locationInParent == ParenthesizedExpression.EXPRESSION_PROPERTY)   return needsExplicitBoxing((ParenthesizedExpression)expression.getParent());  if (locationInParent == ClassInstanceCreation.EXPRESSION_PROPERTY || locationInParent == FieldAccess.EXPRESSION_PROPERTY || locationInParent == MethodInvocation.EXPRESSION_PROPERTY)   return true;  return false;}  }
class C{  public void paintToolBarContentBackground(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBackground(context,g,x,y,w,h,null);}  }
class C{  public T id(String tag){  return id(findView(tag));}  }
class C{  public static void assertEquals(char expected,char actual){  Assert.assertEquals(expected,actual);}  }
class C{  private void createMethods(IBinaryMethod[] iMethods,long sourceLevel,char[][][] missingTypeNames){  int total=0, initialTotal=0, iClinit=-1;  int[] toSkip=null;  if (iMethods != null) {    total=initialTotal=iMethods.length;    boolean keepBridgeMethods=sourceLevel < ClassFileConstants.JDK1_5;    for (int i=total; --i >= 0; ) {      IBinaryMethod method=iMethods[i];      if ((method.getModifiers() & ClassFileConstants.AccSynthetic) != 0) {        if (keepBridgeMethods && (method.getModifiers() & ClassFileConstants.AccBridge) != 0)         continue;        if (toSkip == null)         toSkip=new int[iMethods.length];        toSkip[i]=-1;        total--;      } else       if (iClinit == -1) {        char[] methodName=method.getSelector();        if (methodName.length == 8 && methodName[0] == '<') {          iClinit=i;          total--;        }      }    }  }  if (total == 0) {    this.methods=Binding.NO_METHODS;    return;  }  boolean hasRestrictedAccess=hasRestrictedAccess();  this.methods=new MethodBinding[total];  if (total == initialTotal) {    for (int i=0; i < initialTotal; i++) {      MethodBinding method=createMethod(iMethods[i],sourceLevel,missingTypeNames);      if (hasRestrictedAccess)       method.modifiers|=ExtraCompilerModifiers.AccRestrictedAccess;      this.methods[i]=method;    }  } else {    for (int i=0, index=0; i < initialTotal; i++) {      if (iClinit != i && (toSkip == null || toSkip[i] != -1)) {        MethodBinding method=createMethod(iMethods[i],sourceLevel,missingTypeNames);        if (hasRestrictedAccess)         method.modifiers|=ExtraCompilerModifiers.AccRestrictedAccess;        this.methods[index++]=method;      }    }  }}  }
class C{  public void generateStaticPages(StaticPageIndex staticPageIndex){  for (  StaticPageIndex.PageFile file : staticPageIndex.getAllStaticPages()) {    Map<String,Object> parameters=new HashMap<String,Object>();    parameters.put("content",file.content);    parameters.put("title",file.title);    parameters.put("folderId",file.parentFolder.getId());    parameters.put("pageFile",file.getGeneratedFileName());    addCommonTemplateParameters(parameters);    TemplateEngine.generateFileFromTemplate(KnownPaths.getTemplateFile(STATIC_PAGE_TEMPLATE),KnownPaths.getHtmlOutputFile(file.getGeneratedFileName()),parameters);  }  File artifactsDir=KnownPaths.getHtmlOutputFile(StaticPageIndex.ARTIFACTS_DIR);  artifactsDir.mkdir();  for (  File artifact : staticPageIndex.getAllArtifacts()) {    try {      FileOutputStream outputFile=new FileOutputStream(artifactsDir.getAbsolutePath() + "/" + artifact.getName());      FileInputStream inputFile=new FileInputStream(artifact);      IOUtils.copy(inputFile,outputFile);      IOUtils.closeQuietly(inputFile);    } catch (    Exception e) {      throw new RuntimeException("Error processing artifact " + artifact.getAbsolutePath(),e);    }  }}  }
class C{  public Sub(){  super("-",2);}  }
class C{  public String toString(){  StringBuilder builder=new StringBuilder();  TreeMap<String,Object> orderedProps=new TreeMap<String,Object>();  orderedProps.putAll(properties);  builder.append("\n{\n");  int propCount=0;  for (  String key : orderedProps.keySet()) {    Object value=orderedProps.get(key);    if (value == null) {      continue;    }    if (++propCount > 1)     builder.append("\n");    builder.append("  ").append(key).append("=");    if (value instanceof String) {      String valueAsString=(String)value;      for (int i=0; i < valueAsString.length(); i++) {        char c=valueAsString.charAt(i);        if (Character.isISOControl(c)) {          int cAsInt=c;          String escapedValue=String.format("\\u%04x",cAsInt);          builder.append(escapedValue);        } else {          builder.append(c);        }      }    } else {      builder.append(value.toString());    }  }  builder.append("\n}");  return builder.toString();}  }
class C{  public static PcRunner serializableInstance(){  return PcRunner.serializableInstance();}  }
class C{  public Interval(Comparable<C> lower,boolean lowerInclusive,Comparable<C> upper,boolean upperInclusive){  setLower(lower);  setLowerInclusive(lowerInclusive);  setUpper(upper);  setUpperInclusive(upperInclusive);}  }
class C{  public static final MediaFormat createVideoFormat(String mime,int width,int height){  MediaFormat format=new MediaFormat();  format.setString(KEY_MIME,mime);  format.setInteger(KEY_WIDTH,width);  format.setInteger(KEY_HEIGHT,height);  return format;}  }
class C{  public static byte min(final byte... array){  validateArray(array);  byte min=array[0];  for (int i=1; i < array.length; i++) {    if (array[i] < min) {      min=array[i];    }  }  return min;}  }
class C{  public BlackVarianceTermStructure(final Date referenceDate,final Calendar cal,final BusinessDayConvention bdc,final DayCounter dc){  super(referenceDate,cal,bdc,dc);}  }
class C{  public void readMetadataFromDbIfRequired() throws SQLException {  if (valid) {    return;  }  readMetadata();  valid=true;}  }
class C{  @Override public Object clone() throws CloneNotSupportedException {  MultipleXYSeriesLabelGenerator clone=(MultipleXYSeriesLabelGenerator)super.clone();  clone.seriesLabelLists=new HashMap();  Set keys=this.seriesLabelLists.keySet();  Iterator iterator=keys.iterator();  while (iterator.hasNext()) {    Object key=iterator.next();    Object entry=this.seriesLabelLists.get(key);    Object toAdd=entry;    if (entry instanceof PublicCloneable) {      PublicCloneable pc=(PublicCloneable)entry;      toAdd=pc.clone();    }    clone.seriesLabelLists.put(key,toAdd);  }  return clone;}  }
class C{  public void actionPerformed(ActionEvent e){  GUIMediator.instance().setOptionsVisible(true,paneTitle);}  }
class C{  public static ArrayList<Object> deleteItemSets(ArrayList<Object> itemSets,int minSupport,int maxSupport){  ArrayList<Object> newVector=new ArrayList<Object>(itemSets.size());  for (int i=0; i < itemSets.size(); i++) {    ItemSet current=(ItemSet)itemSets.get(i);    if ((current.m_counter >= minSupport) && (current.m_counter <= maxSupport)) {      newVector.add(current);    }  }  return newVector;}  }
class C{  public MWebProject(Properties ctx,int CM_WebProject_ID,String trxName){  super(ctx,CM_WebProject_ID,trxName);}  }
class C{  private String extractProjectNameFromUri(@NotNull String uri){  int indexFinishProjectName=uri.lastIndexOf(".");  int indexStartProjectName=uri.lastIndexOf("/") != -1 ? uri.lastIndexOf("/") + 1 : (uri.lastIndexOf(":") + 1);  if (indexStartProjectName != 0 && indexStartProjectName < indexFinishProjectName) {    return uri.substring(indexStartProjectName,indexFinishProjectName);  }  if (indexStartProjectName != 0) {    return uri.substring(indexStartProjectName);  }  return "";}  }
class C{  public PictureDrawable(Picture picture){  mPicture=picture;}  }
class C{  public VolumeListsImpl(){  _list=new ArrayList();}  }
class C{  public static void writeAvailableBitsWord(Object o,Word val){  JavaHeader.writeAvailableBitsWord(o,val);}  }
class C{  public void copyTo(@Name("destination") java.lang.Object[] destination,@Name("sourcePosition") @Defaulted int sourcePosition,@Name("destinationPosition") @Defaulted int destinationPosition,@Name("length") @Defaulted int length){  throw Util.makeJavaArrayWrapperException();}  }
class C{  @Override protected void onMessageOnProducerThread(T msg){  _lock.lock();  try {    if (_pending.isEmpty()) {      _queue.schedule(_flushRunnable,_interval,_timeUnit);    }    _pending.add(msg);  }  finally {    _lock.unlock();  }}  }
class C{  public WritableRaster makeTile(int tileX,int tileY){  if ((tileX < minTileX) || (tileX >= minTileX + numXTiles) || (tileY < minTileY)|| (tileY >= minTileY + numYTiles))   throw new IndexOutOfBoundsException("Requested Tile (" + tileX + ','+ tileY+ ") lies outside the bounds of image");  Point pt=new Point(tileGridXOff + tileX * tileWidth,tileGridYOff + tileY * tileHeight);  WritableRaster wr;  wr=Raster.createWritableRaster(sm,pt);  int x0=wr.getMinX();  int y0=wr.getMinY();  int x1=x0 + wr.getWidth() - 1;  int y1=y0 + wr.getHeight() - 1;  if ((x0 < bounds.x) || (x1 >= (bounds.x + bounds.width)) || (y0 < bounds.y)|| (y1 >= (bounds.y + bounds.height))) {    if (x0 < bounds.x)     x0=bounds.x;    if (y0 < bounds.y)     y0=bounds.y;    if (x1 >= (bounds.x + bounds.width))     x1=bounds.x + bounds.width - 1;    if (y1 >= (bounds.y + bounds.height))     y1=bounds.y + bounds.height - 1;    wr=wr.createWritableChild(x0,y0,x1 - x0 + 1,y1 - y0 + 1,x0,y0,null);  }  return wr;}  }
class C{  public void addIgnoredEmote(String emoteCode){  ignoredEmotes.add(emoteCode);}  }
class C{  private int doArrive(int adjust){  final Phaser root=this.root;  for (; ; ) {    long s=(root == this) ? state : reconcileState();    int phase=(int)(s >>> PHASE_SHIFT);    if (phase < 0)     return phase;    int counts=(int)s;    int unarrived=(counts == EMPTY) ? 0 : (counts & UNARRIVED_MASK);    if (unarrived <= 0)     throw new IllegalStateException(badArrive(s));    if (UNSAFE.compareAndSwapLong(this,stateOffset,s,s-=adjust)) {      if (unarrived == 1) {        long n=s & PARTIES_MASK;        int nextUnarrived=(int)n >>> PARTIES_SHIFT;        if (root == this) {          if (onAdvance(phase,nextUnarrived))           n|=TERMINATION_BIT; else           if (nextUnarrived == 0)           n|=EMPTY; else           n|=nextUnarrived;          int nextPhase=(phase + 1) & MAX_PHASE;          n|=(long)nextPhase << PHASE_SHIFT;          UNSAFE.compareAndSwapLong(this,stateOffset,s,n);          releaseWaiters(phase);        } else         if (nextUnarrived == 0) {          phase=parent.doArrive(ONE_DEREGISTER);          UNSAFE.compareAndSwapLong(this,stateOffset,s,s | EMPTY);        } else         phase=parent.doArrive(ONE_ARRIVAL);      }      return phase;    }  }}  }
class C{  public void rejectedExecution(Runnable r,ThreadPoolExecutor e){}  }
class C{  public static String parseCharset(Map<String,String> headers){  String contentType=headers.get(HTTP.CONTENT_TYPE);  if (contentType != null) {    String[] params=contentType.split(";");    for (int i=1; i < params.length; i++) {      String[] pair=params[i].trim().split("=");      if (pair.length == 2) {        if (pair[0].equals("charset")) {          return pair[1];        }      }    }  }  return HTTP.DEFAULT_CONTENT_CHARSET;}  }
class C{  public void assertNoParseErrors(Script script){  Assert.assertTrue(Joiner.on('\n').join(script.eResource().getErrors()),script.eResource().getErrors().isEmpty());}  }
class C{  @Override protected Cursor buildCursor(){  return (db.getReadableDatabase().rawQuery(rawQuery,args));}  }
class C{  public String target(){  return target;}  }
class C{  public boolean isNotificationSupported(){  return impl.isNotificationSupported();}  }
class C{  public void next(DoubleNode<E> n){  next=n;}  }
class C{  private static UserPreferences readUserPreferences(IProject project) throws CoreException {  IFile userPrefsFile=getUserPreferencesFile(project);  if (!userPrefsFile.exists()) {    return null;  }  try {    InputStream in=userPrefsFile.getContents(true);    UserPreferences userPrefs=FindBugsPreferenceInitializer.createDefaultUserPreferences();    userPrefs.read(in);    return userPrefs;  } catch (  IOException e) {    FindbugsPlugin.getDefault().logException(e,"Could not read user preferences for project");    return null;  }}  }
class C{  public String encode(final String value,final String charset) throws EncoderException {  if (value == null) {    return null;  }  try {    return encodeText(value,charset);  } catch (  UnsupportedEncodingException e) {    throw new EncoderException(e.getMessage());  }}  }
class C{  public void addSigner(PrivateKey key,X509Certificate cert,String digestOID,CMSAttributeTableGenerator signedAttrGen,CMSAttributeTableGenerator unsignedAttrGen) throws IllegalArgumentException {  addSigner(key,cert,getEncOID(key,digestOID),digestOID,signedAttrGen,unsignedAttrGen);}  }
class C{  private void writeObject(java.io.ObjectOutputStream oos) throws java.io.IOException {  if (which == Subject.PRIV_CREDENTIAL_SET) {    Iterator<E> i=iterator();    while (i.hasNext()) {      i.next();    }  }  ObjectOutputStream.PutField fields=oos.putFields();  fields.put("this$0",subject);  fields.put("elements",elements);  fields.put("which",which);  oos.writeFields();}  }
class C{  private void initUi(final Bundle savedInstanceState){  setContentView(R.layout.startscreen);  getSupportActionBar().setTitle(R.string.app_name);  getSupportActionBar().setSubtitle(R.string.subtitle);  mTabHost=(TabHost)findViewById(android.R.id.tabhost);  mTabHost.setup();  mTabManager=new TabManager(this,mTabHost,R.id.realtabcontent);  mTabManager.addTab(mTabHost.newTabSpec("sessions").setIndicator(getResources().getString(R.string.sessions)),SessionListFragment.class,null);  if (savedInstanceState != null) {    mTabHost.setCurrentTabByTag(savedInstanceState.getString("tab"));  }}  }
class C{  public boolean remove(Rectangle rect){  int l=0, r=size - 1, idx=0;  while (l <= r) {    idx=(l + r) >>> 1;    if (rect.x == rects[idx].x)     break;    if (rect.x < rects[idx].x) {      if (idx == 0)       break;      if (rect.x >= rects[idx - 1].x)       break;      r=idx - 1;    } else {      if (idx == size - 1) {        idx++;        break;      }      if (rect.x <= rects[idx + 1].x) {        idx++;        break;      }      l=idx + 1;    }  }  if (rects[idx].x != rect.x)   return false;  for (int i=idx; i >= 0; i--) {    if (rects[idx].equals(rect)) {      System.arraycopy(rects,idx + 1,rects,idx,size - idx);      size--;      bounds=null;      return true;    }    if (rects[idx].x != rect.x)     break;  }  for (int i=idx + 1; i < size; i++) {    if (rects[idx].equals(rect)) {      System.arraycopy(rects,idx + 1,rects,idx,size - idx);      size--;      bounds=null;      return true;    }    if (rects[idx].x != rect.x)     break;  }  return false;}  }
class C{  public void mouseClicked(MouseEvent e){  if (SwingUtilities.isRightMouseButton(e))   m_adaptee.popupMenu.show((Component)e.getSource(),e.getX(),e.getY());}  }
class C{  public static double incompleteGammaQ(double a,double x){  return 1.0 - incompleteGamma(x,a,lnGamma(a));}  }
class C{  public void deleteStringAttributes(){  int i=0;  while (i < m_Attributes.size()) {    if (attribute(i).isString()) {      deleteAttributeAt(i);    } else {      i++;    }  }}  }
class C{  public static int bitsRequired(long maxValue){  return roundBits(PackedInts.bitsRequired(maxValue));}  }
class C{  public void didStopRefreshing(){  if (!mSwipeRefreshLayout.isRefreshing())   return;  cancelStopRefreshingRunnable();  mSwipeRefreshLayout.postDelayed(getStopRefreshingRunnable(),STOP_REFRESH_ANIMATION_DELAY_MS);}  }
class C{  protected final boolean handlePossibleCenter(int[] stateCount,int i,int j,boolean pureBarcode){  int stateCountTotal=stateCount[0] + stateCount[1] + stateCount[2]+ stateCount[3]+ stateCount[4];  float centerJ=centerFromEnd(stateCount,j);  float centerI=crossCheckVertical(i,(int)centerJ,stateCount[2],stateCountTotal);  if (!Float.isNaN(centerI)) {    centerJ=crossCheckHorizontal((int)centerJ,(int)centerI,stateCount[2],stateCountTotal);    if (!Float.isNaN(centerJ) && (!pureBarcode || crossCheckDiagonal((int)centerI,(int)centerJ,stateCount[2],stateCountTotal))) {      float estimatedModuleSize=(float)stateCountTotal / 7.0f;      boolean found=false;      for (int index=0; index < possibleCenters.size(); index++) {        FinderPattern center=possibleCenters.get(index);        if (center.aboutEquals(estimatedModuleSize,centerI,centerJ)) {          possibleCenters.set(index,center.combineEstimate(centerI,centerJ,estimatedModuleSize));          found=true;          break;        }      }      if (!found) {        FinderPattern point=new FinderPattern(centerJ,centerI,estimatedModuleSize);        possibleCenters.add(point);        if (resultPointCallback != null) {          resultPointCallback.foundPossibleResultPoint(point);        }      }      return true;    }  }  return false;}  }
class C{  public void updateCursorCounter(){  ++field_146214_l;}  }
class C{  public SVGUseElementBridge(){}  }
class C{  public static <T>Set<T> nullToEmpty(@Nullable Set<T> potentiallyNull){  return firstNonNull(potentiallyNull,ImmutableSet.<T>of());}  }
class C{  public int retrieveGlyphId(int segment,int startCode,int character){  if (character < startCode) {    return CMapTable.NOTDEF;  }  int idRangeOffset=this.idRangeOffset(segment);  if (idRangeOffset == 0) {    return (character + this.idDelta(segment)) % 65536;  }  int gid=this.data.readUShort(idRangeOffset + this.idRangeOffsetLocation(segment) + 2 * (character - startCode));  if (gid != 0) {    gid=(gid + this.idDelta(segment)) % 65536;  }  return gid;}  }
class C{  public void test_readWhenCharacterSpansBuffer(){  final byte[] suffix={(byte)0x93,(byte)0xa1,(byte)0x8c,(byte)0xb4,(byte)0x97,(byte)0x43,(byte)0x88,(byte)0xea,(byte)0x98,(byte)0x59};  final char[] decodedSuffix={(char)0x85e4,(char)0x539f,(char)0x4f51,(char)0x4e00,(char)0x90ce};  final int prefixLength=8189;  byte[] bytes=new byte[prefixLength + 10];  Arrays.fill(bytes,(byte)' ');  System.arraycopy(suffix,0,bytes,prefixLength,suffix.length);  ByteArrayInputStream is=new ByteArrayInputStream(bytes);  try {    InputStreamReader isr=new InputStreamReader(is,"SHIFT_JIS");    char[] chars=new char[8192];    int at=0;    for (; ; ) {      int amt=isr.read(chars);      if (amt <= 0) {        break;      }      for (int i=0; i < amt; i++) {        char c=chars[i];        if (at < prefixLength) {          if (c != ' ') {            fail("Found bad prefix character " + (int)c + " at "+ at);          }        } else {          char decoded=decodedSuffix[at - prefixLength];          if (c != decoded) {            fail("Found mismatched character " + (int)c + " at "+ at);          }        }        at++;      }    }  } catch (  IOException ex) {    throw new RuntimeException("unexpected exception",ex);  }}  }
class C{  public AnimatableNumberValue(AnimationTarget target,float v){  super(target);  value=v;}  }
class C{  public ExtentTest assignCategory(String category){  String cat=category.replace(" ","");  Category c=new Category();  c.setName(cat);  test.setCategory(c);  extent.assignCategory(test,c);  return this;}  }
class C{  public static final int newStateNumber(int oldStateNumber,int proverNumber,int proverStatus){  if ((oldStateNumber == NUMBER_OF_MISSING_STATE) || (oldStateNumber == NUMBER_OF_OMITTED_STATE)) {    return -1;  }  int[] array=new int[3];  if (3 != NUMBER_OF_PROVERS) {    Activator.getDefault().logDebug("Method ColorPredicate.newStateNumber must be reimplemented" + " when number of provers changes");  }  for (int i=0; i < PROVER_STATUSES[0].length; i++) {    array[0]=i;    for (int j=0; j < PROVER_STATUSES[1].length; j++) {      array[1]=j;      for (int k=0; k < PROVER_STATUSES[2].length; k++) {        array[2]=k;        if (numberOfState(array) == oldStateNumber) {          array[proverNumber]=proverStatus;          return numberOfState(array);        }      }    }  }  return -1;}  }
class C{  private void validateMirrorCount(Volume sourceVolume,VirtualPool sourceVPool,int count){  int currentMirrorCount=(sourceVolume.getMirrors() == null || sourceVolume.getMirrors().isEmpty()) ? 0 : sourceVolume.getMirrors().size();  int requestedMirrorCount=currentMirrorCount + count;  if (sourceVPool.getHighAvailability() != null && sourceVPool.getHighAvailability().equals(VirtualPool.HighAvailabilityType.vplex_distributed.name())) {    VPlexUtil.validateMirrorCountForVplexDistVolume(sourceVolume,sourceVPool,count,currentMirrorCount,requestedMirrorCount,_dbClient);  } else   if (sourceVPool.getMaxNativeContinuousCopies() < requestedMirrorCount) {    throw APIException.badRequests.invalidParameterBlockMaximumCopiesForVolumeExceeded(sourceVPool.getMaxNativeContinuousCopies(),sourceVolume.getLabel(),sourceVolume.getId(),currentMirrorCount);  }}  }
class C{  public JsonArrayRequest(int method,String url,JSONArray jsonRequest,Listener<JSONArray> listener,ErrorListener errorListener){  super(method,url,(jsonRequest == null) ? null : jsonRequest.toString(),listener,errorListener);}  }
class C{  public void increment(){  value++;}  }
class C{  private void launchAnim3(){  animatedVector3.start();}  }
class C{  public FrameworkException(String message){  super(message);}  }
class C{  public void testMoveDirectoryDestinationMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBDIR_NEW);  checkExist(igfs,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,new IgfsPath(SUBDIR_NEW,SUBSUBDIR.name()));  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public static void append(File file,Reader reader) throws IOException {  append(file,reader,false);}  }
class C{  @ApiOperation(value="Send a heartbeat for the specified engine") @RequestMapping(value="/engine/{engine}/heartbeat",method=RequestMethod.PUT) @ResponseStatus(HttpStatus.NO_CONTENT) @ResponseBody public final void putHeartbeat(@PathVariable("engine") String engineName,@ApiParam(value="This the password for the nodeId being passed in.  The password is stored in the node_security table.") @RequestParam(value=WebConstants.SECURITY_TOKEN) String securityToken,@RequestBody Heartbeat heartbeat){  ISymmetricEngine engine=getSymmetricEngine(engineName);  if (securityVerified(heartbeat.getNodeId(),engine,securityToken)) {    heartbeatImpl(engine,heartbeat);  } else {    throw new NotAllowedException();  }}  }
class C{  public CoapResponse put(byte[] payload,int format){  return synchronous(format(newPut().setURI(uri).setPayload(payload),format));}  }
class C{  public synchronized void actionPerformed(ActionEvent e){  updateRegion();  if (outer.contains(locn) && !inner.contains(locn))   autoScroll.autoscroll(locn);}  }
class C{  public boolean isAscending(){  return this.ascending;}  }
class C{  public void onScrollLeft(View view){  if (!checkReady()) {    return;  }  changeCamera(CameraUpdateFactory.scrollBy(-SCROLL_BY_PX,0));}  }
class C{  public static void CF4(double[] x,double[] f,double[] c,int nx){  double sum1=0.0;  double sum2=0.0;  double yj;  double t;  for (int j=2; j <= nx; j++) {    yj=x[j - 1] - Math.sin(6.0 * PI * x[0] + j * PI / nx);    if (j % 2 == 1) {      sum1+=yj * yj;    } else {      if (j == 2) {        sum2+=yj < 1.5 - 0.75 * Math.sqrt(2.0) ? Math.abs(yj) : (0.125 + (yj - 1) * (yj - 1));      } else {        sum2+=yj * yj;      }    }  }  f[0]=x[0] + sum1;  f[1]=1.0 - x[0] + sum2;  t=x[1] - Math.sin(6.0 * x[0] * PI + 2.0 * PI / nx) - 0.5 * x[0] + 0.25;  c[0]=MYSIGN(t) * Math.abs(t) / (1 + Math.exp(4.0 * Math.abs(t)));}  }
class C{  @Override public boolean isZoneChangeAllowed(){  final Sheep sheep=getSheep();  if (sheep != null) {    if (squaredDistance(sheep) > 7 * 7) {      return false;    }  }  final Pet pet=getPet();  if (pet != null) {    if (squaredDistance(pet) > 7 * 7) {      return false;    }  }  return true;}  }
class C{  public int generateExtendedSequenceNumber(int seq){  return seq + (RTP_SEQ_MOD * cycles);}  }
class C{  private void trim_ranges(){  for (int i=0; i < len; i++) {    for (int j=i + 1; j < len; j++) {      if ((locals[i].field.getName() == locals[j].field.getName()) && (locals[i].from <= locals[j].to) && (locals[i].to >= locals[j].from)) {        if (locals[i].slot < locals[j].slot) {          if (locals[i].from < locals[j].from) {            locals[i].to=Math.min(locals[i].to,locals[j].from);          } else {          }        } else         if (locals[i].slot > locals[j].slot) {          if (locals[i].from > locals[j].from) {            locals[j].to=Math.min(locals[j].to,locals[i].from);          } else {          }        } else {        }      }    }  }}  }
class C{  public static void main(String[] args) throws IllegalArgumentException {  String[] argsWithDocIdField=new String[2 + args.length];  argsWithDocIdField[0]="-docidfield";  argsWithDocIdField[1]="filename";  System.arraycopy(args,0,argsWithDocIdField,2,args.length);  FlagConfig flagConfig;  try {    flagConfig=FlagConfig.getFlagConfig(argsWithDocIdField);  } catch (  IllegalArgumentException e) {    usage();    throw e;  }  if (!flagConfig.docidfield().equals("filename")) {    logger.log(Level.WARNING,"Docid field is normally 'filename' for bilingual indexes." + " Are you sure you wanted to change this?");  }  if (flagConfig.remainingArgs.length != 2) {    usage();    throw (new IllegalArgumentException("After parsing command line flags, there were " + flagConfig.remainingArgs.length + " arguments, instead of the expected 2."));  }  String lang1=args[args.length - 2];  String lang2=args[args.length - 1];  String termFile1="termvectors_" + lang1 + ".bin";  String termFile2="termvectors_" + lang2 + ".bin";  String docFile1="docvectors_" + lang1 + ".bin";  String docFile2="docvectors_" + lang2 + ".bin";  String[] argsWithDocIdAndContentsField=new String[2 + argsWithDocIdField.length];  System.arraycopy(argsWithDocIdField,0,argsWithDocIdAndContentsField,2,argsWithDocIdField.length);  argsWithDocIdAndContentsField[0]="-contentsfields";  argsWithDocIdAndContentsField[1]="contents_" + lang1;  FlagConfig actualConfigLang1=FlagConfig.getFlagConfig(argsWithDocIdAndContentsField);  argsWithDocIdAndContentsField[1]="contents_" + lang2;  FlagConfig actualConfigLang2=FlagConfig.getFlagConfig(argsWithDocIdAndContentsField);  VerbatimLogger.info("Creating bilingual indexes ...");  try {    TermVectorsFromLucene termIndexer1=TermVectorsFromLucene.createTermVectorsFromLucene(actualConfigLang1,null);    logger.info("Writing term vectors to " + termFile1);    VectorStoreWriter.writeVectors(termFile1,actualConfigLang1,termIndexer1.getSemanticTermVectors());    DocVectors docVectors=new DocVectors(termIndexer1.getSemanticTermVectors(),actualConfigLang1,new LuceneUtils(actualConfigLang1));    logger.info("Writing doc vectors to " + docFile1);    VectorStoreWriter.writeVectors(docFile1,actualConfigLang1,docVectors.makeWriteableVectorStore());    VectorStore basicDocVectors=termIndexer1.getElementalDocVectors();    System.out.println("Keeping basic doc vectors, number: " + basicDocVectors.getNumVectors());    TermVectorsFromLucene termIndexer2=TermVectorsFromLucene.createTermVectorsFromLucene(actualConfigLang2,basicDocVectors);    logger.info("Writing term vectors to " + termFile2);    VectorStoreWriter.writeVectors(termFile2,actualConfigLang2,termIndexer2.getSemanticTermVectors());    docVectors=new DocVectors(termIndexer2.getSemanticTermVectors(),actualConfigLang2,new LuceneUtils(actualConfigLang2));    logger.info("Writing doc vectors to " + docFile2);    VectorStoreWriter.writeVectors(docFile2,actualConfigLang2,docVectors.makeWriteableVectorStore());  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public static String stem(String text){  return morpha(cleanText(text),false);}  }
class C{  public static SendableLocationMessageBuilder builder(){  return new SendableLocationMessageBuilder();}  }
class C{  public void reset(){  super.reset();  H1=0x67452301;  H2=0xefcdab89;  H3=0x98badcfe;  H4=0x10325476;  xOff=0;  for (int i=0; i != X.length; i++) {    X[i]=0;  }}  }
class C{  public static void releaseTemporaryDirectBuffer(ByteBuffer buf){  offerFirstTemporaryDirectBuffer(buf);}  }
class C{  public RowMutator(Keyspace keyspace,boolean retryWithLocalQuorum){  this.keyspace=keyspace;  _timeUUID=TimeUUIDUtils.getUniqueTimeUUIDinMicros();  _timeStamp=TimeUUIDUtils.getMicrosTimeFromUUID(_timeUUID);  _recordMutator=keyspace.prepareMutationBatch();  _indexMutator=keyspace.prepareMutationBatch();  _recordMutator.setTimestamp(_timeStamp);  _indexMutator.setTimestamp(_timeStamp);  _cfRowMap=new HashMap<String,Map<String,ColumnListMutation<CompositeColumnName>>>();  _cfIndexMap=new HashMap<String,Map<String,ColumnListMutation<IndexColumnName>>>();  this.retryFailedWriteWithLocalQuorum=retryWithLocalQuorum;}  }
class C{  @Override public void close(){  U.closeQuiet(sock);}  }
class C{  public static <V>List<V> waitUntilMinValuesRecordsReceived(Properties consumerConfig,String topic,int expectedNumRecords,long waitTime) throws InterruptedException {  List<V> accumData=new ArrayList<>();  long startTime=System.currentTimeMillis();  while (true) {    List<V> readData=readValues(topic,consumerConfig,expectedNumRecords);    accumData.addAll(readData);    if (accumData.size() >= expectedNumRecords)     return accumData;    if (System.currentTimeMillis() > startTime + waitTime)     throw new AssertionError("Expected " + expectedNumRecords + " but received only "+ accumData.size()+ " records before timeout "+ waitTime+ " ms");    Thread.sleep(Math.min(waitTime,100L));  }}  }
class C{  public void test_getDoubleLjava_lang_ObjectI(){  double[] x={1};  double ret=0;  boolean thrown=false;  try {    ret=Array.getDouble(x,0);  } catch (  Exception e) {    fail("Exception during get test : " + e.getMessage());  }  assertEquals("Get returned incorrect value",1,ret,0.0);  try {    ret=Array.getDouble(new Object(),0);  } catch (  IllegalArgumentException e) {    thrown=true;  }  if (!thrown) {    fail("Passing non-array failed to throw exception");  }  thrown=false;  try {    ret=Array.getDouble(x,4);  } catch (  ArrayIndexOutOfBoundsException e) {    thrown=true;  }  if (!thrown) {    fail("Invalid index failed to throw exception");  }  thrown=false;  try {    ret=Array.getDouble(null,0);  } catch (  NullPointerException e) {    thrown=true;  }  if (!thrown) {    fail("Null argument failed to throw NPE");  }}  }
class C{  public void start(){  super.start();}  }
class C{  public void add(FeatureVector other){  while (denseFeatures.size() < other.denseFeatures.size())   denseFeatures.add(0.0f);  for (int i=0; i < other.denseFeatures.size(); i++)   increment(i,other.getDense(i));  for (  String key : other.keySet()) {    if (!sparseFeatures.containsKey(key))     sparseFeatures.put(key,other.getSparse(key)); else     sparseFeatures.put(key,sparseFeatures.get(key) + other.getSparse(key));  }}  }
class C{  private boolean testOwnerPassword() throws PdfSecurityException {  final byte[] originalPassword=encryptionPassword;  byte[] userPasswd=new byte[keyLength];  final byte[] inputValue=ObjectCloneFactory.cloneArray(O);  computeEncryptionKey();  final byte[] originalKey=ObjectCloneFactory.cloneArray(encryptionKey);  if (rev == 2) {    userPasswd=decrypt(ObjectCloneFactory.cloneArray(O),"",false,null,false,false);  } else   if (rev >= 3) {    final int keyLength=this.keyLength;    userPasswd=inputValue;    final byte[] nextKey=new byte[keyLength];    for (int i=19; i >= 0; i--) {      for (int j=0; j < keyLength; j++) {        nextKey[j]=(byte)(originalKey[j] ^ i);      }      encryptionKey=nextKey;      userPasswd=decrypt(userPasswd,"",false,null,true,false);    }  }  encryptionPassword=userPasswd;  computeEncryptionKey();  final boolean isMatch=testPassword();  if (!isMatch) {    encryptionPassword=originalPassword;    computeEncryptionKey();  }  return isMatch;}  }
class C{  public void load(Element element,Object o){  Editor p=(Editor)o;  IndicatorTurnoutIcon l=new IndicatorTurnoutIcon(p);  Element name=element.getChild("turnout");  if (name == null) {    log.error("incorrect information for turnout; must use turnout name");  } else {    l.setTurnout(name.getText());  }  Element elem=element.getChild("iconmaps");  if (elem != null) {    List<Element> maps=elem.getChildren();    if (maps.size() > 0) {      for (int i=0; i < maps.size(); i++) {        String status=maps.get(i).getName();        List<Element> states=maps.get(i).getChildren();        for (int k=0; k < states.size(); k++) {          String msg="IndicatorTurnout \"" + l.getNameString() + "\" icon \""+ states.get(k).getName()+ "\" ";          NamedIcon icon=loadIcon(l,states.get(k).getName(),maps.get(i),msg,p);          if (icon != null) {            l.setIcon(status,states.get(k).getName(),icon);          } else {            log.info(msg + " removed for url= " + name);            return;          }        }      }    }    Attribute attr=elem.getAttribute("family");    if (attr != null) {      l.setFamily(attr.getValue());    }  }  name=element.getChild("occupancyblock");  if (name != null) {    l.setOccBlock(name.getText());  } else {    name=element.getChild("occupancysensor");    if (name != null) {      l.setOccSensor(name.getText());    }  }  l.setShowTrain(false);  name=element.getChild("showTrainName");  if (name != null) {    if ("yes".equals(name.getText())) {      l.setShowTrain(true);    }  }  elem=element.getChild("paths");  if (elem != null) {    ArrayList<String> paths=new ArrayList<String>();    List<Element> pth=elem.getChildren();    for (int i=0; i < pth.size(); i++) {      paths.add(pth.get(i).getText());    }    l.setPaths(paths);  }  l.updateSize();  p.putItem(l);  loadCommonAttributes(l,Editor.TURNOUTS,element);}  }
class C{  public final char yycharat(int pos){  return zzBufferArray != null ? zzBufferArray[zzStartRead + pos] : zzBuffer.charAt(zzStartRead + pos);}  }
class C{  public void bindAll(){  if (isUnbound()) {    unboundMap.entrySet().removeIf(null);  }}  }
class C{  public static boolean listIsAssignableFrom(Class<?> aClass){  return List.class.isAssignableFrom(aClass);}  }
class C{  static public Locator northWest(boolean isTransform){  return new RelativeLocator(0.0,0.0,isTransform);}  }
class C{  public SafeFileTarget(final File file,final boolean append,final Formatter formatter) throws IOException {  super(file,append,formatter);  shutdownStream();}  }
class C{  public void removeListener(Listener<ComplexBuffer> listener){  mListener=null;}  }
class C{  private void testErrorHandler(final List<ISpeedTestListener> listenerList,final boolean forceCloseStatus,final boolean dispatchError) throws TimeoutException {  mForceStop=false;  mDownload=true;  if (dispatchError) {    fr.bmartel.speedtest.utils.SpeedTestUtils.dispatchError(mForceStop,listenerList,mDownload,errorMessage);  } else {    fr.bmartel.speedtest.utils.SpeedTestUtils.dispatchSocketTimeout(mForceStop,listenerList,mDownload,errorMessage);  }  mWaiter.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  mDownload=false;  if (dispatchError) {    fr.bmartel.speedtest.utils.SpeedTestUtils.dispatchError(mForceStop,listenerList,mDownload,errorMessage);  } else {    fr.bmartel.speedtest.utils.SpeedTestUtils.dispatchSocketTimeout(mForceStop,listenerList,mDownload,errorMessage);  }  mWaiter.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  if (forceCloseStatus) {    mSocket.forceStopTask();    mForceStop=true;    mDownload=false;    mWaiter=new Waiter();    if (dispatchError) {      fr.bmartel.speedtest.utils.SpeedTestUtils.dispatchError(mForceStop,listenerList,mDownload,errorMessage);    } else {      fr.bmartel.speedtest.utils.SpeedTestUtils.dispatchSocketTimeout(mForceStop,listenerList,mDownload,errorMessage);    }    mWaiter.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);    mDownload=true;    if (dispatchError) {      fr.bmartel.speedtest.utils.SpeedTestUtils.dispatchError(mForceStop,listenerList,mDownload,errorMessage);    } else {      fr.bmartel.speedtest.utils.SpeedTestUtils.dispatchSocketTimeout(mForceStop,listenerList,mDownload,errorMessage);    }    mWaiter.await(TestCommon.WAITING_TIMEOUT_DEFAULT_SEC,TimeUnit.SECONDS);  }}  }
class C{  public GeneralRuntimeException(Throwable nested){  super();  this.nested=nested;}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return IOUtils.getServerMacAddress(getString(stack));}  }
class C{  public void merge(Style style){  int tmp=modifiedFlag;  if ((modifiedFlag & FG_COLOR_MODIFIED) == 0) {    setFgColor(style.getFgColor());  }  if ((modifiedFlag & BG_COLOR_MODIFIED) == 0) {    setBgColor(style.getBgColor());  }  if ((modifiedFlag & BG_IMAGE_MODIFIED) == 0) {    setBgImage(style.getBgImage());  }  if ((modifiedFlag & BACKGROUND_TYPE_MODIFIED) == 0) {    setBackgroundType(style.getBackgroundType());  }  if ((modifiedFlag & BACKGROUND_ALIGNMENT_MODIFIED) == 0) {    setBackgroundAlignment(style.getBackgroundAlignment());  }  if ((modifiedFlag & BACKGROUND_GRADIENT_MODIFIED) == 0) {    setBackgroundGradientStartColor(style.getBackgroundGradientStartColor());    setBackgroundGradientEndColor(style.getBackgroundGradientEndColor());    setBackgroundGradientRelativeX(style.getBackgroundGradientRelativeX());    setBackgroundGradientRelativeY(style.getBackgroundGradientRelativeY());    setBackgroundGradientRelativeSize(style.getBackgroundGradientRelativeSize());  }  if ((modifiedFlag & FONT_MODIFIED) == 0) {    setFont(style.getFont());  }  if ((modifiedFlag & TRANSPARENCY_MODIFIED) == 0) {    setBgTransparency(style.getBgTransparency());  }  if ((modifiedFlag & OPACITY_MODIFIED) == 0) {    setOpacity(style.getOpacity());  }  if ((modifiedFlag & PADDING_MODIFIED) == 0) {    setPadding(style.padding[Component.TOP],style.padding[Component.BOTTOM],style.padding[Component.LEFT],style.padding[Component.RIGHT]);    setPaddingUnit(paddingUnit);  }  if ((modifiedFlag & MARGIN_MODIFIED) == 0) {    setMargin(style.margin[Component.TOP],style.margin[Component.BOTTOM],style.margin[Component.LEFT],style.margin[Component.RIGHT]);    setMarginUnit(style.marginUnit);  }  if ((modifiedFlag & BORDER_MODIFIED) == 0) {    setBorder(style.getBorder());  }  if ((modifiedFlag & TEXT_DECORATION_MODIFIED) == 0) {    setTextDecoration(style.getTextDecoration());  }  if ((modifiedFlag & ALIGNMENT_MODIFIED) == 0) {    setAlignment(style.getAlignment());  }  this.bgPainter=style.bgPainter;  modifiedFlag=tmp;}  }
class C{  protected void prepareForEditing(){  if (editingComponent != null) {    editingContainer.add(editingComponent);  }}  }
class C{  public JValueSlider(String title,long min,long max,long value){  this(title,new Long(min),new Long(max),new Long(value));}  }
class C{  public void flushBase64() throws java.io.IOException {  if (position > 0) {    if (encode) {      out.write(encode3to4(b4,buffer,position,options));      position=0;    } else {      throw new java.io.IOException("Base64 input not properly padded.");    }  }}  }
class C{  public static Integer selectInteger(XPathExpression expr,Node context){  String value=selectText(expr,context);  if (StringUtils.isNotBlank(value)) {    try {      return Integer.parseInt(value);    } catch (    NumberFormatException e) {      return null;    }  } else {    return null;  }}  }
class C{  private ModbusSlave(ModbusSlaveType type,int port,int poolSize,SerialParameters serialParams) throws ModbusException {  this.type=type == null ? ModbusSlaveType.TCP : type;  this.port=port;  this.serialParams=serialParams;  logger.debug("Creating {} listener",this.type.toString());  if (this.type.is(ModbusSlaveType.UDP)) {    listener=new ModbusUDPListener();  } else   if (this.type.is(ModbusSlaveType.TCP)) {    listener=new ModbusTCPListener(poolSize);  } else {    listener=new ModbusSerialListener(serialParams);  }  listener.setListening(true);  listener.setPort(port);  listener.setTimeout(0);}  }
class C{  public static boolean containsWhitespace(CharSequence str){  if (!hasLength(str)) {    return false;  }  int strLen=str.length();  for (int i=0; i < strLen; i++) {    if (Character.isWhitespace(str.charAt(i))) {      return true;    }  }  return false;}  }
class C{  @NonNull public DividerAdapterBuilder trailingResource(@LayoutRes int resource){  return trailingView(asViewFactory(resource));}  }
class C{  public CLabel(Icon image){  super(image,DEFAULT_ALIGNMENT);  init();}  }
class C{  public ReadersAndUpdates(IndexWriter writer,SegmentReader reader){  this.writer=writer;  this.reader=reader;  info=reader.getSegmentInfo();  liveDocs=reader.getLiveDocs();  liveDocsShared=true;  pendingDeleteCount=reader.numDeletedDocs() - info.getDelCount();  assert pendingDeleteCount >= 0 : "got " + pendingDeleteCount + " reader.numDeletedDocs()="+ reader.numDeletedDocs()+ " info.getDelCount()="+ info.getDelCount()+ " maxDoc="+ reader.maxDoc()+ " numDocs="+ reader.numDocs();}  }
class C{  public SimpleStringReader(String s){  this.str=s;  this.length=s.length();}  }
class C{  public void addExtension(String extension){  if (filters == null) {    filters=new Hashtable<String,JDBFileFilter>(5);  }  filters.put(extension.toLowerCase(),this);  fullDescription=null;}  }
class C{  public static int findWhitespace(CharSequence s){  return findWhitespace(s,0);}  }
class C{  public boolean allowInsert(final Class<?> insertType){  if (getCriterium() instanceof CConditionCriterium && !isRoot()) {    return false;  }  if (insertType == CConditionCriterium.class) {    return false;  }  if (insertType == CAndCriterium.class || insertType == COrCriterium.class) {    return getChildCount() > 0;  }  if (insertType == CNotCriterium.class) {    return allowNotInsert();  }  return true;}  }
class C{  private void configure(NetworkConfiguration network) throws IllegalArgumentException, IllegalStateException {  if (network == null) {    throw new IllegalArgumentException("Cannot configure regulator with empty network configuration.");  }  if (network.getOutbound() != null) {    for (    ChannelType channel_type : network.getOutbound().getChannel()) {      this.outboundChannel.addChannel(configureChannel(channel_type));    }  }  if (network.getInbound() != null) {    for (    ChannelType channel_type : network.getInbound().getChannel()) {      this.inboundChannel.addChannel(configureChannel(channel_type));    }  }}  }
class C{  public int hashCode(){  long bits=java.lang.Double.doubleToLongBits(lows[0]);  for (int i=1; i < dimension; i++) {    bits^=java.lang.Double.doubleToLongBits(lows[i - 1]) * 31;  }  for (int i=1; i < dimension; i++) {    bits^=java.lang.Double.doubleToLongBits(highs[i - 1]) * 31;  }  return (((int)bits) ^ ((int)(bits >> 32)));}  }
class C{  public Holder(final T value){  this.value=value;}  }
class C{  public DelayedResponseOperatorRuntimeEnvironment(final String processingNodeId,final String pipelineId,final DelayedResponseOperator delayedResponseOperator,final DelayedResponseOperatorWaitStrategy responseWaitStrategy,final StreamingMessageQueueConsumer queueConsumer,final StreamingMessageQueueProducer queueProducer) throws RequiredInputMissingException {  this(processingNodeId,pipelineId,delayedResponseOperator,responseWaitStrategy,queueConsumer,queueProducer,Executors.newCachedThreadPool());  this.localExecutorService=true;}  }
class C{  public void schedule(TimerTask task,long delay,long period){  if (delay < 0 || period <= 0) {    throw new IllegalArgumentException();  }  scheduleImpl(task,delay,period,false);}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  private void entryListToHtmlAndJson(String paneId,final StringBuilder result,ResultsPaginator paginator,List<?> results,SourceEmbedContext embedContext) throws IOException {  startItemList(result,paneId);  final ArrayList<EntryInfo> entryInfoList=new ArrayList<EntryInfo>();  for (  final Object entryUncasted : results) {    final Entry entry=(Entry)entryUncasted;    final int resultNumber=paginator.next();    if (resultNumber == -1) {      continue;    } else     if (resultNumber == 0) {      break;    }    addEntryHtmlToList(entry,result,resultNumber,paneId,embedContext);    addEntryToInfoList(entry,entryInfoList);  }  finishItemList(result);  result.append("\n<script type=\"application/json\" class=\"entryInfoDictJson\">\n");  addJsonForEntryInfos(result,entryInfoList,paneId);  result.append("\n</script>\n");  paginator.done();}  }
class C{  public double empiricalHSIC(TetradMatrix Ky,TetradMatrix Kx,int m){  TetradMatrix Kyx=Ky.times(Kx);  double empHSIC=0.0;  for (int i=0; i < m; i++) {    empHSIC+=Kyx.get(i,i);  }  empHSIC/=Math.pow(m - 1,2);  return empHSIC;}  }
class C{  public ValidationError isValid(Integer row,String column,String value){  ValidationError result=null;  if (hasConfig()) {    ValidationError error=ValidationError.withLineNumber(row).column(column);    Map<Validation.Type,Validation> validationMap=columnValidationMap.get(column);    if (validationMap != null) {      for (      Validation validation : validationMap.values()) {        if (validation.canBeChecked(value)) {          validation.check(row,value,error);        }      }    }    if (!error.isEmpty()) {      result=error;    }  }  return result;}  }
class C{  public static String keyString(SecretKeys keys){  return keys.toString();}  }
class C{  public static TestResult execJFlex(List<String> cmdline,List<String> files){  String[] cmd=toArray(cmdline,files);  ByteArrayOutputStream out=new ByteArrayOutputStream();  try {    Options.setDefaults();    Out.setOutputStream(out);    jflex.Main.generate(cmd);    return new TestResult(out.toString(),true);  } catch (  GeneratorException e) {    return new TestResult(out.toString(),false);  }catch (  SilentExit e) {    return new TestResult(out.toString(),false);  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:10.195 -0500",hash_original_method="FEC40F6E47E3058E55E0DA8C21B29091",hash_generated_method="093B3CA6BEB21278CDCA9E7AF5C9F77B") @DSSpec(DSCat.NETWORK) public void connect(LocalSocketAddress endpoint) throws IOException {synchronized (this) {    if (isConnected) {      throw new IOException("already connected");    }    implCreateIfNeeded();    impl.connect(endpoint,0);    isConnected=true;    isBound=true;  }}  }
class C{  public void disable(RichFormatterFeature feature){  features.remove(feature);}  }
class C{  public boolean isLogicalFunction(){  return true;}  }
class C{  private static boolean checkManagerDNAndSearchBase(LdapTemplate template,final AuthnProviderParamsToValidate param,StringBuilder errorString){  try {    template.lookup(new DistinguishedName(param.getSearchBase()));    return true;  } catch (  CommunicationException e) {    errorString.append(MessageFormat.format("Connection to LDAP server {0} failed. Please, check the scheme, accessibility of the LDAP server and port. LDAP error: {1}.",param.getUrls().toString(),stripNonPrintableCharacters(e.getMessage())));    _log.debug("Connection to LDAP server " + param.getUrls().toString() + " failed.",e);    return false;  }catch (  AuthenticationException e) {    errorString.append(MessageFormat.format("Connection to the LDAP server {0} succeeded but the Manager DN {1} or its password failed to authenticate.  LDAP error: {2}",param.getUrls().toString(),param.getManagerDN(),stripNonPrintableCharacters(e.getMessage())));    return false;  }catch (  NameNotFoundException e) {    errorString.append(MessageFormat.format("Connection to the LDAP server {0} succeeded and the Manager DN authenticated successfully but the search base path {1} could not be found in the LDAP tree. LDAP error: {2}",param.getUrls().toString(),param.getSearchBase(),stripNonPrintableCharacters(e.getMessage())));    return false;  }catch (  PartialResultException e) {    errorString.append(MessageFormat.format("Connection to the LDAP server {0} succeeded and the Manager DN authenticated successfully but a portion of the search base path {1} could not be found in the LDAP tree. LDAP error: {2}",param.getUrls().toString(),param.getSearchBase(),stripNonPrintableCharacters(e.getMessage())));    return false;  }catch (  Exception e) {    errorString.append(MessageFormat.format("Validation of the Manager DN {0} and search base {1} against the LDAP server {2} failed because of LDAP error: {3}",param.getManagerDN(),param.getSearchBase(),param.getUrls().toString(),stripNonPrintableCharacters(e.getMessage())));    return false;  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:53.719 -0400",hash_original_method="6C359A458FCB96D5F455747E20D28BA8",hash_generated_method="FF5FBB3C9B25FA86DA298D4CA53E5A12") protected FileFileFilter(){}  }
class C{  protected boolean checkNodeAddress(int address){  return (address > 0) && (address <= 99);}  }
class C{  protected void fireGraphEvent(Table t,int first,int last,int col,int type){  if (type == EventConstants.UPDATE && col == VisualItem.IDX_VALIDATED && t == getNodeTable()) {    VisualTable nodes=(VisualTable)t;    VisualTable edges=(VisualTable)getEdgeTable();    for (int i=first; i <= last; ++i) {      if (nodes.isValidated(i))       continue;      IntIterator erows=edgeRows(i);      while (erows.hasNext()) {        int erow=erows.nextInt();        edges.setValidated(erow,false);      }    }  }  super.fireGraphEvent(t,first,last,col,type);}  }
class C{  public WizardException(String localizedMessage,String stepToReturnTo){  super("wizardException");  this.localizedMessage=localizedMessage;  this.step=stepToReturnTo;}  }
class C{  public MqttUnacceptableProtocolVersionException(Throwable cause){  super(cause);}  }
class C{  private void checkPausedOrCanceled(State state) throws StopRequest {  if (mService.getControl() == DownloaderService.CONTROL_PAUSED) {    int status=mService.getStatus();switch (status) {case DownloaderService.STATUS_PAUSED_BY_APP:      throw new StopRequest(mService.getStatus(),"download paused");  }}}  }
class C{  public static void main(String[] args){  runFilter(new AddClassification(),args);}  }
class C{  private void removeEditor(){  if (editPane != null) {    view.remove(editPane);    editPane=null;  }  if (editPanel != null) {    view.remove(editPanel);    editPanel=null;  }  removeColorPanel();  view.requestFocusInWindow();  view.repaint();}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  private void showPopupMenu(final MouseEvent event){  final int[] rows=m_eventTable.getConvertedSelectedRows();  final List<ITraceEvent> traces=getTraces(rows);  final CEventTableMenu menu=new CEventTableMenu(m_eventTable,m_model,traces);  menu.show(m_eventTable,event.getX(),event.getY());}  }
class C{  public Boolean isTraversable(File f){  if (f.isDirectory()) {    return Boolean.TRUE;  } else {    return Boolean.FALSE;  }}  }
class C{  public void waitToStop() throws InterruptedException {  boolean restarted;  do {    DistributedSystem ds=this.myDs;    restarted=false;    this.server.join();    if (this.stoppedForReconnect) {      logger.info("waiting for distributed system to disconnect...");      while (ds.isConnected()) {        Thread.sleep(5000);      }      logger.info("waiting for distributed system to reconnect...");      restarted=ds.waitUntilReconnected(-1,TimeUnit.SECONDS);      if (restarted) {        logger.info("system restarted");      } else {        logger.info("system was not restarted");      }      Thread rs=this.restartThread;      if (rs != null) {        logger.info("waiting for services to restart...");        rs.join();        this.restartThread=null;        logger.info("done waiting for services to restart");      }    }  } while (restarted);}  }
class C{  private static char[] zzUnpackCMap(String packed){  char[] map=new char[0x10000];  int i=0;  int j=0;  while (i < 160) {    int count=packed.charAt(i++);    char value=packed.charAt(i++);    do     map[j++]=value; while (--count > 0);  }  return map;}  }
class C{  public void registerOutfitExpireTime(int expire){  if (expire < 0) {    return;  }  int oldExpire=Integer.MAX_VALUE;  if (has("outfit_expire_age")) {    oldExpire=getInt("outfit_expire_age");  }  if (oldExpire < age) {    logger.error("oldExpire " + oldExpire + " for age "+ age);    oldExpire=Integer.MAX_VALUE;  }  int newExpire=Math.min(expire + age,oldExpire);  put("outfit_expire_age",newExpire);  ExpireOutfit expireOutfit=new ExpireOutfit(super.getName());  SingletonRepository.getTurnNotifier().dontNotify(expireOutfit);  SingletonRepository.getTurnNotifier().notifyInSeconds((newExpire - age) * 60,expireOutfit);}  }
class C{  public void testRecoveryAfterAnError7_IOException() throws Exception {  doTestRecoveryAfterAnError(7,HadoopErrorSimulator.Kind.IOException);}  }
class C{  public boolean dynamic_order(){  return soot.PhaseOptions.getBoolean(options,"dynamic-order");}  }
class C{  public static void print(Object message){  if (!isDisabled()) {    print(String.valueOf(message));  }}  }
class C{  public static void throwException(Throwable throwable){  if (throwable instanceof RuntimeException) {    throw (RuntimeException)throwable;  }  if ((throwable instanceof IllegalAccessException) || (throwable instanceof InstantiationException)) {    throw new IllegalArgumentException(throwable);  }  try {synchronized (ThrowableThrower.class) {      ThrowableThrower.throwable=throwable;      ThrowableThrower.class.newInstance();    }  } catch (  InstantiationException|IllegalAccessException iex) {    throw new RuntimeException(iex);  } finally {    ThrowableThrower.throwable=null;  }}  }
class C{  private void sendEvent(String eventName,Object params){  getReactApplicationContext().getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class).emit(eventName,params);  Log.i("ReactSystemNotification","NotificationModule: sendEvent (to JS): " + eventName);}  }
class C{  public void addToggleButtons(){  tab.addTab(getString("ButtonDemo.togglebuttons"),toggleButtonPanel);}  }
class C{  private void painter(Graphics g){  double left_clip=(double)(-m_viewPos.width - 50) / m_viewSize.width;  double right_clip=(double)(getSize().width - m_viewPos.width + 50) / m_viewSize.width;  double top_clip=(double)(-m_viewPos.height - 50) / m_viewSize.height;  double bottom_clip=(double)(getSize().height - m_viewPos.height + 50) / m_viewSize.height;  Node r;  double ncent, ntop;  int row=0, col=0, pq, cq;  for (int noa=0; noa < m_numNodes; noa++) {    r=m_nodes[noa].m_node;    if (m_nodes[noa].m_change) {      ntop=r.getTop();      if (ntop < top_clip) {        row=8;      } else       if (ntop > bottom_clip) {        row=32;      } else {        row=16;      }    }    ncent=r.getCenter();    if (ncent < left_clip) {      col=4;    } else     if (ncent > right_clip) {      col=1;    } else {      col=2;    }    m_nodes[noa].m_quad=row | col;    if (m_nodes[noa].m_parent >= 0) {      pq=m_nodes[m_edges[m_nodes[noa].m_parent].m_parent].m_quad;      cq=m_nodes[noa].m_quad;      if ((cq & 8) == 8) {      } else       if ((pq & 32) == 32) {      } else       if ((cq & 4) == 4 && (pq & 4) == 4) {      } else       if ((cq & 1) == 1 && (pq & 1) == 1) {      } else {        drawLine(m_nodes[noa].m_parent,g);      }    }  }  for (int noa=0; noa < m_numNodes; noa++) {    if (m_nodes[noa].m_quad == 18) {      drawNode(noa,g);    }  }  if (m_highlightNode >= 0 && m_highlightNode < m_numNodes) {    if (m_nodes[m_highlightNode].m_quad == 18) {      Color acol;      if (m_NodeColor == null) {        acol=m_nodes[m_highlightNode].m_node.getColor();      } else {        acol=m_NodeColor;      }      g.setColor(new Color((acol.getRed() + 125) % 256,(acol.getGreen() + 125) % 256,(acol.getBlue() + 125) % 256));      if (m_nodes[m_highlightNode].m_node.getShape() == 1) {        g.drawRect(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side,m_nodes[m_highlightNode].m_top,m_nodes[m_highlightNode].m_width,m_nodes[m_highlightNode].m_height);        g.drawRect(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side + 1,m_nodes[m_highlightNode].m_top + 1,m_nodes[m_highlightNode].m_width - 2,m_nodes[m_highlightNode].m_height - 2);      } else       if (m_nodes[m_highlightNode].m_node.getShape() == 2) {        g.drawOval(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side,m_nodes[m_highlightNode].m_top,m_nodes[m_highlightNode].m_width,m_nodes[m_highlightNode].m_height);        g.drawOval(m_nodes[m_highlightNode].m_center - m_nodes[m_highlightNode].m_side + 1,m_nodes[m_highlightNode].m_top + 1,m_nodes[m_highlightNode].m_width - 2,m_nodes[m_highlightNode].m_height - 2);      }    }  }  for (int noa=0; noa < m_numNodes; noa++) {    m_nodes[noa].m_top=32000;  }}  }
class C{  public static void saveCache(String pathToIgnore,CatalogCallbackInterface callback){  if (logger.isDebugEnabled())   logger.debug("saveCache; pathToIgnore=" + pathToIgnore);  if (cacheFile == null) {    if (logger.isDebugEnabled())     logger.debug("Aborting saveCache() as cacheFile not set");    return;  }  savedCount=0;  ignoredCount=0;  long isDirectory=0;  long pathMatch=0;  long crcNotKnown=0;  long notExists=0;  long notUsed=0;  long countChecked=0;  ObjectOutputStream os=null;  BufferedOutputStream bs=null;  FileOutputStream fs=null;  long countPercent=cachedFilesMap.entrySet().size() / 100;  if (callback != null)   callback.setProgressMax(100);  deleteCache();  try {    try {      if (logger.isDebugEnabled())       logger.debug("STARTED Saving cacheFile entries to " + cacheFile.getPath());      fs=new FileOutputStream(cacheFile);      assert fs != null : "saveCache: fs should never be null at this point";      bs=new BufferedOutputStream(fs,512 * 1024);      assert bs != null : "saveCache: bs should never be null at this point";      os=new ObjectOutputStream(bs);      assert os != null : "saveCache: os should never be null at this point";      CachedFile cf;      String key=null;      for (      Map.Entry<String,CachedFile> m : cachedFilesMap.entrySet()) {        if ((countChecked % countPercent) == 0 && callback != null)         callback.incStepProgressIndicatorPosition();        countChecked++;        cf=m.getValue();        if (logger.isTraceEnabled())         key=m.getKey();        if (!cf.isCachedValidated()) {          if (logger.isTraceEnabled())           logger.trace("saveCache: Not used.  Not saving CachedFile " + key);          notUsed++;          ignoredCount++;          continue;        }        if (pathToIgnore != null && cf.getPath().startsWith(pathToIgnore)) {          if (logger.isTraceEnabled())           logger.trace("saveCache: PathtoIgnore matches  Not saving CachedFile " + key);          pathMatch++;          ignoredCount++;          continue;        }        if (!cf.isCrc()) {          if (logger.isTraceEnabled())           logger.trace("saveCache: CRC not known.  Not saving CachedFile " + key);          crcNotKnown++;          ignoredCount++;          continue;        }        if (!cf.exists()) {          if (logger.isTraceEnabled())           logger.trace("saveCache: Not exists.  Not saving CachedFile " + key);          notExists++;          ignoredCount++;          continue;        }        if (cf.isDirectory()) {          if (logger.isTraceEnabled())           logger.trace("saveCache: isDirectory  Not saving CachedFile " + key);          isDirectory++;          ignoredCount++;          continue;        }        os.writeObject(cf);        if (logger.isTraceEnabled())         logger.trace("saveCache: Saved " + key);        savedCount++;      }    }  finally {      try {        if (os != null)         os.close();        if (bs != null)         bs.close();        if (fs != null)         fs.close();      } catch (      Exception e) {        logger.warn("saveCache: Unexpected error\n" + e);      }    }  } catch (  IOException e) {    logger.warn("saveCache: Exception trying to write cache:\n" + e);  }  if (logger.isDebugEnabled()) {    logger.debug("saveCache: Cache Entries Saved:   " + savedCount);    logger.debug("saveCache: Cache Entries Ignored: " + ignoredCount);    logger.debug("saveCache: isDirectory=" + isDirectory + ", notUsed="+ notUsed+ ", notExists="+ notExists+ ", crcNotKnown="+ crcNotKnown+ ", pathMatch="+ pathMatch);    logger.debug("saveCache: COMPLETED Saving CRC cache to file " + cacheFile.getPath());  }}  }
class C{  public boolean removeEdges(Collection<Edge> edges){  boolean change=false;  for (  Edge edge : edges) {    boolean _change=removeEdge(edge);    change=change || _change;  }  return change;}  }
class C{  public List updaters(){  return this.updaters;}  }
class C{  private void initDiagnostics(){  Class clazz=this.getClass();  ClassLoader classLoader=getClassLoader(clazz);  String classLoaderName;  try {    if (classLoader == null) {      classLoaderName="BOOTLOADER";    } else {      classLoaderName=objectId(classLoader);    }  } catch (  SecurityException e) {    classLoaderName="UNKNOWN";  }  diagnosticPrefix="[LogFactoryImpl@" + System.identityHashCode(this) + " from "+ classLoaderName+ "] ";}  }
class C{  public static String title(String string){  char[] chars=string.toCharArray();  boolean wasWhitespace=true;  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (CharUtil.isWhitespace(c)) {      wasWhitespace=true;    } else {      if (wasWhitespace) {        chars[i]=Character.toUpperCase(c);      } else {        chars[i]=Character.toLowerCase(c);      }      wasWhitespace=false;    }  }  return new String(chars);}  }
class C{  public double distance(){  return Math.sqrt(bestDistanceSquared);}  }
class C{  static boolean negZero(final String str,final int dp){  if (str.charAt(0) != '-' || str.charAt(1) != '0') {    return false;  } else   if (dp == 0) {    return true;  } else   if (str.charAt(2) != '.') {    return false;  }  for (int i=0; i < dp; i++) {    if (str.charAt(3 + i) != '0') {      return false;    }  }  return true;}  }
class C{  private void QuickSort(double a[],int lo0,int hi0){  int lo=lo0;  int hi=hi0;  double mid;  if (hi0 > lo0) {    mid=a[(lo0 + hi0) / 2];    while (lo <= hi) {      while ((lo < hi0) && (a[lo] < mid)) {        ++lo;      }      while ((hi > lo0) && (a[hi] > mid)) {        --hi;      }      if (lo <= hi) {        swap(a,lo,hi);        ++lo;        --hi;      }    }    if (lo0 < hi) {      QuickSort(a,lo0,hi);    }    if (lo < hi0) {      QuickSort(a,lo,hi0);    }  }}  }
class C{  private void clearInstrumentation(){  nodeExpander.resetCounter();  metrics.set(METRIC_NODES_EXPANDED,0);  metrics.set(METRIC_TEMPERATURE,0);  metrics.set(METRIC_NODE_VALUE,0);}  }
class C{  public static boolean beenDone(TimeUnit timeUnit,long amount,String tag,CountChecker numberOfTimes){  long timeInMillis=timeUnit.toMillis(amount);  return beenDone(timeInMillis,tag,numberOfTimes);}  }
class C{  protected TransformerImpl(){  super();}  }
class C{  @Override void phaseChange(int oldPhase){  if (running) {    count[oldPhase]=currentCount;    currentCount=0;  }}  }
class C{  public static SailRepository openRepository(final String file){  return new SailRepository(openSail(file,false));}  }
class C{  public String toString(int units,String unitsName){  StringBuffer result=new StringBuffer();  result.append(getX(units));  result.append('x');  result.append(getY(units));  if (unitsName != null) {    result.append(' ');    result.append(unitsName);  }  return result.toString();}  }
class C{  @Override protected void rehash(int newCapacity){  int oldCapacity=_set.length;  K[] oldKeys=(K[])_set;  float[] oldVals=_values;  _set=new Object[newCapacity];  _values=new float[newCapacity];  for (int i=oldCapacity; i-- > 0; ) {    if (oldKeys[i] != null && oldKeys[i] != REMOVED) {      K o=oldKeys[i];      int index=insertionIndex(o);      if (index < 0) {        throwObjectContractViolation(_set[-index - 1],o);      }      _set[index]=o;      _values[index]=oldVals[i];    }  }}  }
class C{  public ImageTranslator(BufferedImage bi){  if (bi != null) {    iwidth=bi.getWidth();    iheight=bi.getHeight();    verOrigin=iheight / 2;    horOrigin=iwidth / 2;    hor_dpp=360f / (float)iwidth;    ver_dpp=180f / (float)iheight;    if (Debug.debugging("earthimage")) {      Debug.output("ImageTranslator: getting image pixels w:" + iwidth + ", h:"+ iheight+ "\n     hor dpp:"+ hor_dpp+ ", ver dpp:"+ ver_dpp);    }    pixels=getPixels(bi,0,0,iwidth,iheight);    bi=null;  }}  }
class C{  public Object trunc(InstanceScope scope,Object v){  if (v == null)   return null;  if (v instanceof List) {    List<?> elems=(List<?>)v;    if (elems.size() <= 1)     return null;    return elems.subList(0,elems.size() - 1);  }  v=convertAnythingIteratableToIterator(scope,v);  if (v instanceof Iterator) {    List<Object> a=new ArrayList<Object>();    Iterator<?> it=(Iterator<?>)v;    while (it.hasNext()) {      Object o=it.next();      if (it.hasNext())       a.add(o);    }    return a;  }  return null;}  }
class C{  public SystemUserWrapper(User user){  super(user);}  }
class C{  protected void internalTransform(Body b,String phaseName,Map options){  StmtBody stmtBody=(StmtBody)b;  Chain<Unit> units=stmtBody.getUnits();  Iterator<Unit> stmtIt=units.snapshotIterator();  NormalUnitPrinter nup=new NormalUnitPrinter(b);  while (stmtIt.hasNext()) {    Stmt stmt=(Stmt)stmtIt.next();    if (!stmt.containsInvokeExpr()) {      continue;    }    InvokeExpr expr=(InvokeExpr)stmt.getInvokeExpr();    AssignStmt assignStmt=null;    if (stmt instanceof AssignStmt) {      assignStmt=(AssignStmt)stmt;    } else {      continue;    }    inspectAndReplaceCalls(units,assignStmt,expr);  }}  }
class C{  private void info(String title,Component c){  System.out.print(title);  if (c == null)   System.out.println(" - null"); else {    System.out.print(c.getClass().getName());    System.out.println(" - " + c.getName());  }}  }
class C{  public void initDiskCacheAsync(){  if (DEBUG) {    Log.d(TAG,"initDiskCacheAsync " + this);  }  new FileCacheTask(FileCacheTaskType.init_cache).excute();}  }
class C{  public void parseEntity(InputSource source,boolean includeMode,String expectedNamespace,Locator importLocation) throws SAXException {  documentSystemId=source.getSystemId();  try {    Schema s=new Schema(this,includeMode,expectedNamespace);    setRootHandler(s);    try {      parser.parser.parse(source,this,getErrorHandler(),parser.getEntityResolver());    } catch (    IOException e) {      SAXParseException se=new SAXParseException(e.toString(),importLocation,e);      parser.errorHandler.fatalError(se);      throw se;    }  } catch (  SAXException e) {    parser.setErrorFlag();    throw e;  }}  }
class C{  public Manager newManager() throws SQLException {  JdbcConnectionSource connection=new JdbcConnectionSource(databaseUrl);  JdbcConnectionSource auditConnection=new JdbcConnectionSource(databaseUrl);  Manager m=new Manager(pool,connection,auditConnection,mode);  pool.addManagerToPool(m);  return m;}  }
class C{  public MySqlRepeatStatement parseRepeat(){  MySqlRepeatStatement repeatStmt=new MySqlRepeatStatement();  accept(Token.REPEAT);  parseProcedureStatementList(repeatStmt.getStatements());  accept(Token.UNTIL);  repeatStmt.setCondition(exprParser.expr());  accept(Token.END);  accept(Token.REPEAT);  accept(Token.SEMI);  return repeatStmt;}  }
class C{  public void test3() throws Exception {  VendorData supplierData=setupNewSupplier("2013-01-01 08:00:00");  setDateFactory("2013-07-10 20:00:00");  setCutOffDay(supplierData.getAdminKey(),1);  CustomerData customerData1=registerCustomer(supplierData);  VOServiceDetails srv1=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv1");  VOServiceDetails srv2=createPublishActivateService(supplierData,TestPriceModel.EXAMPLE_RATA_WEEK_ROLES,"srv2");  updateOperatorRevenueShare(10.0D,srv1.getKey());  updateOperatorRevenueShare(20.0D,srv2.getKey());  subscribe(customerData1.getAdminUser(),"srv1_subscr1",srv1,"2013-08-01 12:00:00","ADMIN");  subscribe(customerData1.getAdminUser(),"srv1_subscr2",srv1,"2013-08-02 12:00:00","ADMIN");  VOSubscriptionDetails subscr3=subscribe(customerData1.getAdminUser(),"srv2_subscr1",srv2,"2013-08-06 16:00:00","ADMIN");  VOServiceDetails upgrService=createAndRegisterCompatibleService(supplierData,TestPriceModel.EXAMPLE_PRORATA_MONTH_ROLES,srv2,"srv2" + "_upgr");  updateOperatorRevenueShare(15.0D,upgrService.getKey());  upgrade(customerData1.getAdminUser(),subscr3,upgrService,"2013-08-08 15:00:00");  resetCutOffDay(supplierData.getAdminKey());  cacheTestData("test3",new TestData(supplierData));}  }
class C{  public static boolean isEnum(int flags){  return (flags & AccEnum) != 0;}  }
class C{  public static <T extends SabresObject>void deleteAll(Class<T> clazz) throws SabresException {  final Sabres sabres=Sabres.self();  sabres.open();  sabres.beginTransaction();  try {    String table=clazz.getSimpleName();    if (SqliteMaster.tableExists(sabres,table)) {      dropTable(sabres,table);      createTable(sabres,Schema.getSchema(table),table);    }    sabres.setTransactionSuccessful();  }  finally {    sabres.endTransaction();    sabres.close();  }}  }
class C{  public static void readyGo(Activity activity,Class<?> className,boolean finish){  activity.startActivity(getIntent(activity,className));  if (finish)   activity.finish();}  }
class C{  public static boolean initialize(){  if (!getHome().exists())   return getHome().mkdirs();  return getHome().isDirectory();}  }
class C{  public void testDoConfigureSetsDefaultDomainVersion() throws Exception {  configuration.configure(container);  String config=configuration.getFileHandler().readTextFile(configuration.getHome() + "/config/config.xml","UTF-8");  XMLAssert.assertXpathExists("//weblogic:domain-version",config);  XMLAssert.assertXpathExists("//weblogic:configuration-version",config);  XMLAssert.assertXpathExists("//weblogic:server",config);  XMLAssert.assertXpathExists("//weblogic:server/weblogic:name",config);  XMLAssert.assertXpathExists("//weblogic:security-configuration",config);  XMLAssert.assertXpathExists("//weblogic:security-configuration/weblogic:credential-encrypted",config);  XMLAssert.assertXpathExists("//weblogic:embedded-ldap",config);  XMLAssert.assertXpathExists("//weblogic:embedded-ldap/weblogic:credential-encrypted",config);  XMLAssert.assertXpathExists("//weblogic:admin-server-name",config);}  }
class C{  public X509ExtensionSetLoadException(Throwable causeThrowable){  super(causeThrowable);}  }
class C{  public JpaRepositoryTransition(){  this(null,null,null);}  }
class C{  protected static String asString(Object data,int type) throws SQLException {  if (data == null) {    return "NULL";  }switch (type) {case Types.BIT:case Types.BOOLEAN:case Types.INTEGER:case Types.BIGINT:case Types.DECIMAL:case Types.DOUBLE:case Types.FLOAT:case Types.NUMERIC:case Types.REAL:case Types.SMALLINT:case Types.TINYINT:case Types.DATE:case Types.TIME:case Types.TIMESTAMP:case Types.LONGVARCHAR:case Types.CHAR:case Types.VARCHAR:    return data.toString();case Types.CLOB:  try {    if (data instanceof Clob) {      data=((Clob)data).getCharacterStream();    }    return IOUtils.readStringAndClose((Reader)data,-1);  } catch (  IOException e) {    throw DbException.toSQLException(e);  }case Types.VARBINARY:case Types.LONGVARBINARY:case Types.BINARY:case Types.JAVA_OBJECT:case Types.OTHER:case Types.BLOB:case Types.STRUCT:case Types.REF:case Types.NULL:case Types.ARRAY:case Types.DATALINK:case Types.DISTINCT:throw throwException("Unsupported column data type: " + type);default :return "";}}  }
class C{  public boolean hasParent(){  return parts.size() > 1;}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case UmplePackage.ANONYMOUS_PARAMETER_LIST_1__PARAMETER_1:    getParameter_1().clear();  return;}super.eUnset(featureID);}  }
class C{  private final int castleBonus(Position pos){  if (pos.getCastleMask() == 0)   return 0;  final int k1=kt1b[7 * 8 + 6] - kt1b[7 * 8 + 4];  final int k2=kt2b[7 * 8 + 6] - kt2b[7 * 8 + 4];  final int t1=qV + 2 * rV + 2 * bV;  final int t2=rV;  final int t=pos.bMtrl - pos.bMtrlPawns;  final int ks=interpolate(t,t2,k2,t1,k1);  final int castleValue=ks + rt1b[7 * 8 + 5] - rt1b[7 * 8 + 7];  if (castleValue <= 0)   return 0;  long occupied=pos.whiteBB | pos.blackBB;  int tmp=(int)(occupied & 0x6E);  if (pos.a1Castle())   tmp|=1;  if (pos.h1Castle())   tmp|=(1 << 7);  final int wBonus=(castleValue * castleFactor[tmp]) >> 10;  tmp=(int)((occupied >>> 56) & 0x6E);  if (pos.a8Castle())   tmp|=1;  if (pos.h8Castle())   tmp|=(1 << 7);  final int bBonus=(castleValue * castleFactor[tmp]) >> 10;  return wBonus - bBonus;}  }
class C{  @Override public Object compute(ArrayList<Map<String,Object>> rows) throws Exception {  double minMax=0.0;  for (  Map<String,Object> row : rows) {    double value=((Number)row.get(column)).doubleValue();    if ((isMax && (minMax < value)) || (!isMax && (minMax > value))) {      minMax=value;    }  }  return minMax;}  }
class C{  private void updateArmatureToBodies(){  for (Iterator<ObjectMap.Entry<btRigidBody,RigidBodyNodeConnection>> iterator1=bodyPartMap.iterator(); iterator1.hasNext(); ) {    ObjectMap.Entry<btRigidBody,RigidBodyNodeConnection> bodyEntry=iterator1.next();    btRigidBody partBody=bodyEntry.key;    RigidBodyNodeConnection connection=bodyEntry.value;    capsuleTransform.getTranslation(capsuleTranslation);    for (Iterator<ObjectMap.Entry<Node,Vector3>> iterator2=connection.bodyNodeOffsets.iterator(); iterator2.hasNext(); ) {      ObjectMap.Entry<Node,Vector3> nodeEntry=iterator2.next();      Node node=nodeEntry.key;      Vector3 offset=nodeEntry.value;      partBody.getWorldTransform(node.localTransform);      node.localTransform.getTranslation(nodeTranslation);      node.localTransform.setTranslation(nodeTranslation.sub(capsuleTranslation)).translate(tmpVec.set(offset).scl(-1));    }  }  modelInstance.calculateTransforms();}  }
class C{  private <T>T readObject(JsonNode source,Class<T> clazz,boolean handleRelationships) throws IOException, IllegalAccessException, InstantiationException {  String identifier=createIdentifier(source);  T result=(T)resourceCache.get(identifier);  if (result == null) {    Class<?> type=getActualType(source,clazz);    if (source.has(ATTRIBUTES)) {      result=(T)objectMapper.treeToValue(source.get(ATTRIBUTES),type);    } else {      if (type.isInterface()) {        result=null;      } else {        result=(T)objectMapper.treeToValue(objectMapper.createObjectNode(),type);      }    }    if (source.has(META)) {      Field field=configuration.getMetaField(type);      if (field != null) {        Class<?> metaType=configuration.getMetaType(type);        Object metaObject=objectMapper.treeToValue(source.get(META),metaType);        field.set(result,metaObject);      }    }    if (source.has(LINKS)) {      Field linkField=configuration.getLinksField(type);      if (linkField != null) {        linkField.set(result,new Links(mapLinks(source.get(LINKS))));      }    }    if (result != null) {      resourceCache.cache(identifier,result);      setIdValue(result,source.get(ID));      if (handleRelationships) {        handleRelationships(source,result);      }    }  }  return result;}  }
class C{  @Override public String globalInfo(){  return "Builds a description of a Bayes Net classifier stored in XML " + "BIF 0.3 format.\n\n" + "For more details on XML BIF see:\n\n"+ getTechnicalInformation().toString();}  }
class C{  @SuppressWarnings("static-access") private void createAndShowGUI(){  if (isTextMode())   return;  m_isInitialized=false;  m_frame=new JFrame(s_logger.localizeMessage("guiWindowTitle"));  m_frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  ArrayList<Image> images=new ArrayList<Image>();  images.add(getImage("AD16.png"));  images.add(getImage("AD32.png"));  m_frame.setIconImages(images);  m_menuFile.setText(s_logger.localizeMessage("guiMenuFile"));  m_menuFile.setMnemonic(new Integer(s_logger.localizeMessage("guiMenuFileMnemonic")));  m_menuFileSave.setText(s_logger.localizeMessage("guiMenuFileSave"));  m_menuFileSave.setToolTipText(s_logger.localizeMessage("guiMenuFileSaveTip"));  m_menuFileSave.setMnemonic(new Integer(s_logger.localizeMessage("guiMenuFileSaveMnemonic")));  m_menuFileSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,ActionEvent.CTRL_MASK));  m_menuFileSave.setIcon(new ImageIcon(getImage("Save16.png")));  m_menuFileSave.addActionListener(this);  m_menuFileClose.setText(s_logger.localizeMessage("guiMenuFileClose"));  m_menuFileClose.setToolTipText(s_logger.localizeMessage("guiMenuFileCloseTip"));  m_menuFileClose.setMnemonic(new Integer(s_logger.localizeMessage("guiMenuFileCloseMnemonic")));  m_menuFileClose.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_W,ActionEvent.CTRL_MASK));  m_menuFileClose.setIcon(new ImageIcon(getImage("Logout16.png")));  m_menuFileClose.addActionListener(this);  m_menuFileExit.setText(s_logger.localizeMessage("guiMenuFileExit"));  m_menuFileExit.setToolTipText(s_logger.localizeMessage("guiMenuFileExitTip"));  m_menuFileExit.setMnemonic(new Integer(s_logger.localizeMessage("guiMenuFileExitMnemonic")));  m_menuFileExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,ActionEvent.CTRL_MASK));  m_menuFileExit.setIcon(new ImageIcon(getImage("Cancel16.png")));  m_menuFileExit.addActionListener(this);  m_menuFile.add(m_menuFileSave);  m_menuFile.addSeparator();  m_menuFile.add(m_menuFileClose);  m_menuFile.add(m_menuFileExit);  m_menuHelp.setText(s_logger.localizeMessage("guiMenuHelp"));  m_menuHelp.setMnemonic(new Integer(s_logger.localizeMessage("guiMenuHelpMnemonic")));  m_menuHelpInfo.setText(s_logger.localizeMessage("guiMenuHelpInfo"));  m_menuHelpInfo.setMnemonic(new Integer(s_logger.localizeMessage("guiMenuHelpInfoMnemonic")));  m_menuHelpInfo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F1,0));  m_menuHelpInfo.setIcon(new ImageIcon(getImage("Help16.png")));  m_menuHelpInfo.addActionListener(this);  m_menuHelpAbout.setText(s_logger.localizeMessage("guiMenuHelpAbout"));  m_menuHelpAbout.setMnemonic(new Integer(s_logger.localizeMessage("guiMenuHelpAboutMnemonic")));  m_menuHelpAbout.setIcon(new ImageIcon(getImage("About16.png")));  m_menuHelpAbout.addActionListener(this);  m_menuHelp.add(m_menuHelpInfo);  m_menuHelp.addSeparator();  m_menuHelp.add(m_menuHelpAbout);  m_menuBar.add(m_menuFile);  m_menuBar.add(m_menuHelp);  m_frame.setJMenuBar(m_menuBar);  addComponentsToPane(m_frame.getContentPane());  ArrayList<String> vendors=s_dbEngine.getVendorList();  for (  String vendorName : vendors) {    m_sourceVendor.addItem(vendorName.toLowerCase());    m_targetVendor.addItem(vendorName.toLowerCase());  }  resetSourceParameters();  resetTargetParameters();  resetMigrationMode();  resetOptions();  m_isInitialized=true;  m_frame.pack();  m_buttonStart.requestFocusInWindow();  m_frame.setLocationRelativeTo(null);  m_frame.setVisible(true);}  }
class C{  public final boolean equals(int x,int y){  return this.x == x && this.y == y;}  }
class C{  protected int FilterExpr() throws javax.xml.transform.TransformerException {  int opPos=m_ops.getOp(OpMap.MAPINDEX_LENGTH);  int filterMatch;  if (PrimaryExpr()) {    if (tokenIs('[')) {      insertOp(opPos,2,OpCodes.OP_LOCATIONPATH);      while (tokenIs('[')) {        Predicate();      }      filterMatch=FILTER_MATCH_PREDICATES;    } else {      filterMatch=FILTER_MATCH_PRIMARY;    }  } else {    filterMatch=FILTER_MATCH_FAILED;  }  return filterMatch;}  }
class C{  @Override public void onSuccess(int statusCode,Header[] headers,byte[] binaryData){  onSuccess(statusCode,binaryData);}  }
class C{  public static boolean hasDenseFog(){  World world=Minecraft.getMinecraft().theWorld;  if (world.provider instanceof WorldProviderBetweenlands && Minecraft.getMinecraft().thePlayer.posY > WorldProviderBetweenlands.CAVE_START) {    WorldProviderBetweenlands provider=(WorldProviderBetweenlands)world.provider;    EnvironmentEventRegistry eeRegistry=provider.getWorldData().getEnvironmentEventRegistry();    if (eeRegistry.DENSE_FOG.isActive()) {      return true;    }  }  return false;}  }
class C{  public void onUpdate(){  this.prevPosX=this.posX;  this.prevPosY=this.posY;  this.prevPosZ=this.posZ;  if (this.particleAge++ >= this.particleMaxAge) {    this.setExpired();  }  Vec3d motion=new Vec3d(this.motionX,this.motionY,this.motionZ);  Vec3d center=new Vec3d(this.centerX,this.centerY,this.centerZ);  Vec3d position=new Vec3d(this.posX,this.posY,this.posZ);  Vec3d gravityCenter=center.subtract(position);  gravityCenter=new Vec3d(gravityCenter.xCoord * pointGravityScale,gravityCenter.yCoord * pointGravityScale,gravityCenter.zCoord * pointGravityScale);  Vec3d dir=gravityCenter.add(motion);  this.motionX=dir.xCoord;  this.motionY=dir.yCoord;  this.motionZ=dir.zCoord;  this.getEntityBoundingBox().offset(this.motionX,this.motionY,this.motionZ);  this.posX=(this.getEntityBoundingBox().minX + this.getEntityBoundingBox().maxX) / 2.0D;  this.posY=this.getEntityBoundingBox().minY - (double)this.height;  this.posZ=(this.getEntityBoundingBox().minZ + this.getEntityBoundingBox().maxZ) / 2.0D;  double speedOverTime=1D;  this.motionX*=speedOverTime;  this.motionY*=speedOverTime;  this.motionZ*=speedOverTime;  moveEntity(this.motionZ,this.motionY,this.motionZ);}  }
class C{  public static void checkState(boolean expression,@Nullable Object errorMessage){  if (!expression) {    throw new IllegalStateException(String.valueOf(errorMessage));  }}  }
class C{  @Override protected void onSaveInstanceState(Bundle outState){  super.onSaveInstanceState(outState);  mExpandableAdapter.onSaveInstanceState(outState);}  }
class C{  private void deleteTable(String tableName){  DeleteTableRequest.Builder deleteTableRequestBuilder=DeleteTableRequest.newBuilder().setName(tableName);  tableAdminClient.deleteTable(deleteTableRequestBuilder.build());}  }
class C{  public void update(JCTree.JCCompilationUnit tree,Context context){  Indexer indexer=new Indexer(context);  tree.accept(indexer);}  }
class C{  private void createLayout(){  this.pnlPanel.removeAll();  GroupLayout layout=new GroupLayout(this.pnlPanel);  this.pnlPanel.setLayout(layout);  layout.setAutoCreateContainerGaps(true);  layout.setAutoCreateGaps(false);  int size=this.pointPanels.size();  ParallelGroup hGroup=layout.createParallelGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    hGroup.addComponent(panel);    if (i < 3) {      panel.btnRemove.setEnabled(false);    } else {      panel.btnRemove.setEnabled(true);    }  }  SequentialGroup vGroup=layout.createSequentialGroup();  for (int i=0; i < size; i++) {    PointPanel panel=this.pointPanels.get(i);    vGroup.addComponent(panel);  }  layout.setHorizontalGroup(hGroup);  layout.setVerticalGroup(vGroup);}  }
class C{  public void intervalChanged(TimedElement e,Interval i){}  }
class C{  public int padCount(byte[] in) throws InvalidCipherTextException {  byte code=in[in.length - 1];  int index=in.length - 1;  while (index > 0 && in[index - 1] == code) {    index--;  }  return in.length - index;}  }
class C{  public void clearTimeStamps(){  for (  OMGraphic geom : this) {    if (geom instanceof TemporalOMGraphic) {      ((TemporalOMGraphic)geom).clearTimeStamps();    }  }}  }
class C{  public void testSinglePolygonNoHoleRoundTrip() throws SQLException {  PolygonGenerator pg=new PolygonGenerator();  pg.setGeometryFactory(geometryFactory);  pg.setBoundingBox(new Envelope(0,10,0,10));  pg.setNumberPoints(10);  Polygon pt=(Polygon)pg.create();  OraWriter ow=new OraWriter();  STRUCT st=ow.write(pt,getConnection());  OraReader or=new OraReader();  Polygon pt2=(Polygon)or.read(st);  assertTrue("The input polygon is not the same as the output polygon",pt.equals(pt2));}  }
class C{  public TouchedChecker touchedChecker(){  return this.touchedChecker;}  }
class C{  public void testGetPathContextWhenTomcatContextXmlWithPathContext() throws Exception {  TomcatWAR war=new TomcatWAR(getResourcePath(PACKAGE_PATH + "tomcat-context.war"));  assertEquals("testcontext",war.getContext());}  }
class C{  public boolean isPrimitive(){  return (m_NodeType == NodeType.PRIMITIVE);}  }
class C{  public void attributeDecl(String eName,String aName,String type,String valueDefault,String value) throws SAXException {  if (DEBUG)   System.out.println("TransformerHandlerImpl#attributeDecl: " + eName + ", "+ aName+ ", etc...");  if (null != m_declHandler) {    m_declHandler.attributeDecl(eName,aName,type,valueDefault,value);  }}  }
class C{  private long checkAndGet(long rawAmount,TimeUnit expectedUnit,long expectedValue){  assertEquals(expectedUnit.name(),expectedValue,AkInterval.secondsIntervalAs(rawAmount,expectedUnit));  return expectedValue;}  }
class C{  public static boolean isWildcardLeftHandSide(final ClassNode node){  if (OBJECT_TYPE.equals(node) || STRING_TYPE.equals(node) || boolean_TYPE.equals(node)|| Boolean_TYPE.equals(node)|| CLASS_Type.equals(node)) {    return true;  }  return false;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public Matrix4d scale(double x,double y,double z){  return scale(x,y,z,this);}  }
class C{  public Trie(Trie existingTrie){  m_Root=existingTrie.m_Root;  m_lowerCaseOnly=existingTrie.m_lowerCaseOnly;  int max=existingTrie.getLongestKeyLength();  m_charBuffer=new char[max];}  }
class C{  @Override public void onConnectionChange(ConnectivityEvent event){}  }
class C{  public Swagger2MarkupConfigBuilder withoutPathSecuritySection(){  config.pathSecuritySectionEnabled=false;  return this;}  }
class C{  private boolean isConsistencyCheck(ArrayList<DBMSData> dataArray){  boolean consistencyCheck=false;  if (dataArray.size() >= 2 && dataArray.get(dataArray.size() - 1) instanceof StatementData) {    StatementData stmt=(StatementData)dataArray.get(dataArray.size() - 1);    if (stmt.getQueryAsBytes() == null)     consistencyCheck=stmt.getQuery().contains(consistencyTable); else {      consistencyCheck=new String(stmt.getQueryAsBytes(),0,Math.min(200,stmt.getQueryAsBytes().length)).contains(consistencyTable);    }  } else   if (dataArray.size() >= 1 && dataArray.size() <= 3 && dataArray.get(dataArray.size() - 1) instanceof RowChangeData) {    RowChangeData rc=(RowChangeData)dataArray.get(dataArray.size() - 1);    OneRowChange orc=rc.getRowChanges().get(0);    consistencyCheck=(orc.getSchemaName().compareToIgnoreCase(metadataSchema)) == 0 && (orc.getTableName().compareToIgnoreCase(ConsistencyTable.TABLE_NAME) == 0) && orc.getAction() == RowChangeData.ActionType.UPDATE;  }  return consistencyCheck;}  }
class C{  protected Class findClass(String name) throws ClassNotFoundException {  Class c=null;  if (name.startsWith("java.") || name.startsWith("javax.") || name.equals("javassist.tools.web.Viewer"))   c=findSystemClass(name);  if (c == null)   try {    byte[] b=fetchClass(name);    if (b != null)     c=defineClass(name,b,0,b.length);  } catch (  Exception e) {  }  return c;}  }
class C{  @Override protected int calculateWalk(){  return walkMP;}  }
class C{  static public Properties fuse(Map defaults,Map override,boolean ignoreConflicts){  if (defaults == null) {    throw new IllegalArgumentException();  }  if (override == null) {    throw new IllegalArgumentException();  }  if (override instanceof Properties) {    override=flatten((Properties)override);  }  if (!(defaults instanceof Properties)) {    Properties tmp=new Properties();    tmp.putAll(defaults);    defaults=tmp;  }  list("defaults : ",((Properties)defaults),System.err);  Iterator itr=override.entrySet().iterator();  while (itr.hasNext()) {    Map.Entry entry=(Map.Entry)itr.next();    String property=(String)entry.getKey();    String overrideValue=(String)entry.getValue();    String existingValue=((Properties)defaults).getProperty(property);    System.err.println("property=" + property + " : existingValue="+ existingValue+ ", overrideValue="+ overrideValue);    if (existingValue != null) {      if (existingValue.equals(overrideValue)) {        continue;      } else       if (ignoreConflicts) {        defaults.put(property,overrideValue);      } else {        throw new RuntimeException("Would override property=" + property + ": existingValue="+ existingValue+ ", overrideValue="+ overrideValue);      }    } else {      defaults.put(property,overrideValue);    }  }  return (Properties)defaults;}  }
class C{  public void commitChanges(){  synapseEditingPanel.commitChanges();  synapseList.get(0).getNetwork().fireSynapsesUpdated(synapseList);}  }
class C{  @SuppressWarnings("rawtypes") public static Comparable select(Comparable[] ar,int k,int left,int right){  do {    int idx=selectPivotIndex(ar,left,right);    int pivotIndex=partition(ar,left,right,idx);    if (left + k - 1 == pivotIndex) {      return ar[pivotIndex];    }    if (left + k - 1 < pivotIndex) {      right=pivotIndex - 1;    } else {      k-=(pivotIndex - left + 1);      left=pivotIndex + 1;    }  } while (true);}  }
class C{  public BulletParser parseCDATA(final boolean parseCDATA){  this.parseCDATA=parseCDATA;  return this;}  }
class C{  public XMLInstances(Reader reader) throws Exception {  this();  setXML(reader);}  }
class C{  protected void addTarget(final RPEntity entity){  targets.add(entity.getID());  if (targets.size() == 1) {    SingletonRepository.getTurnNotifier().notifyInTurns(interval,this);  }}  }
class C{  @Override public void deleteGroupChat(String chatId){  mImService.tryToDeleteGroupChat(chatId);}  }
class C{  public void test_ConstructorLjava_lang_StringLjava_lang_StringZ(){  StringTokenizer st=new StringTokenizer("This:is:a:test:String",":",true);  st.nextElement();  assertTrue("Created incorrect tokenizer",st.countTokens() == 8 && (st.nextElement().equals(":")));  st=new StringTokenizer("This:is:a:test:String",null,true);  st=new StringTokenizer("This:is:a:test:String",null,false);  try {    new StringTokenizer(null,":",true);    fail("NullPointerException expected");  } catch (  NullPointerException e) {  }}  }
class C{  public double train(double X_[][]) throws Exception {  initWeights(X_);  Matrix X=new Matrix(MatrixUtils.addBias(X_));  double _error=Double.MAX_VALUE;  for (int e=0; e < m_E; e++) {    if (m_V) {      double err_now=calculateError(X);      if (_error < err_now) {        System.out.println("broken out @" + e);        break;      }      _error=err_now;    }    update(X);  }  return _error;}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-18 21:46:47.847 -0400",hash_original_method="B68F83839432088DEBC23D7BB0EB72B3",hash_generated_method="EBBA55875E8D704BFD90E4E01B3377FC") protected boolean hasSupportDividerBeforeChildAt(int childIndex){  if (childIndex == 0) {    return (mShowDividers & SHOW_DIVIDER_BEGINNING) != 0;  } else   if (childIndex == getChildCount()) {    return (mShowDividers & SHOW_DIVIDER_END) != 0;  } else   if ((mShowDividers & SHOW_DIVIDER_MIDDLE) != 0) {    boolean hasVisibleViewBefore=false;    for (int i=childIndex - 1; i >= 0; i--) {      if (getChildAt(i).getVisibility() != GONE) {        hasVisibleViewBefore=true;        break;      }    }    return hasVisibleViewBefore;  }  return false;}  }
class C{  protected void findBestModel() throws Exception {  int numInstances=m_TransformedData.numInstances();  if (m_Debug) {    System.out.println((new Instances(m_TransformedData,0)).toString());  }  do {    m_Coefficients=doRegression(m_SelectedAttributes);  } while (m_EliminateColinearAttributes && deselectColinearAttributes(m_SelectedAttributes,m_Coefficients));  int numAttributes=1;  for (  boolean m_SelectedAttribute : m_SelectedAttributes) {    if (m_SelectedAttribute) {      numAttributes++;    }  }  double fullMSE=calculateSE(m_SelectedAttributes,m_Coefficients);  double akaike=(numInstances - numAttributes) + 2 * numAttributes;  if (m_Debug) {    System.out.println("Initial Akaike value: " + akaike);  }  boolean improved;  int currentNumAttributes=numAttributes;switch (m_AttributeSelection) {case SELECTION_GREEDY:    do {      boolean[] currentSelected=m_SelectedAttributes.clone();      improved=false;      currentNumAttributes--;      for (int i=0; i < m_SelectedAttributes.length; i++) {        if (currentSelected[i]) {          currentSelected[i]=false;          double[] currentCoeffs=doRegression(currentSelected);          double currentMSE=calculateSE(currentSelected,currentCoeffs);          double currentAkaike=currentMSE / fullMSE * (numInstances - numAttributes) + 2 * currentNumAttributes;          if (m_Debug) {            System.out.println("(akaike: " + currentAkaike);          }          if (currentAkaike < akaike) {            if (m_Debug) {              System.err.println("Removing attribute " + (i + 1) + " improved Akaike: "+ currentAkaike);            }            improved=true;            akaike=currentAkaike;            System.arraycopy(currentSelected,0,m_SelectedAttributes,0,m_SelectedAttributes.length);            m_Coefficients=currentCoeffs;          }          currentSelected[i]=true;        }      }    } while (improved);  break;case SELECTION_M5:do {  improved=false;  currentNumAttributes--;  double minSC=0;  int minAttr=-1, coeff=0;  for (int i=0; i < m_SelectedAttributes.length; i++) {    if (m_SelectedAttributes[i]) {      double SC=Math.abs(m_Coefficients[coeff] * m_StdDevs[i] / m_ClassStdDev);      if ((coeff == 0) || (SC < minSC)) {        minSC=SC;        minAttr=i;      }      coeff++;    }  }  if (minAttr >= 0) {    m_SelectedAttributes[minAttr]=false;    double[] currentCoeffs=doRegression(m_SelectedAttributes);    double currentMSE=calculateSE(m_SelectedAttributes,currentCoeffs);    double currentAkaike=currentMSE / fullMSE * (numInstances - numAttributes) + 2 * currentNumAttributes;    if (m_Debug) {      System.out.println("(akaike: " + currentAkaike);    }    if (currentAkaike < akaike) {      if (m_Debug) {        System.err.println("Removing attribute " + (minAttr + 1) + " improved Akaike: "+ currentAkaike);      }      improved=true;      akaike=currentAkaike;      m_Coefficients=currentCoeffs;    } else {      m_SelectedAttributes[minAttr]=true;    }  }} while (improved);break;case SELECTION_NONE:break;}}  }
class C{  public static long calcLastModified(final SolrQueryRequest solrReq){  final SolrCore core=solrReq.getCore();  final SolrIndexSearcher searcher=solrReq.getSearcher();  final LastModFrom lastModFrom=core.getSolrConfig().getHttpCachingConfig().getLastModFrom();  long lastMod;  try {    lastMod=LastModFrom.DIRLASTMOD == lastModFrom ? IndexDeletionPolicyWrapper.getCommitTimestamp(searcher.getIndexReader().getIndexCommit()) : searcher.getOpenTime();  } catch (  IOException e) {    throw new SolrException(ErrorCode.SERVER_ERROR,e);  }  return lastMod - (lastMod % 1000L);}  }
class C{  private void layoutTabs(){  if (tabsThatFitInComposite == NONE || elements.length == 0) {    FormData formData=new FormData();    formData.left=new FormAttachment(0,0);    formData.right=new FormAttachment(100,0);    formData.top=new FormAttachment(0,0);    formData.height=getTabHeight();    topNavigationElement.setLayoutData(formData);    formData=new FormData();    formData.left=new FormAttachment(0,0);    formData.right=new FormAttachment(100,0);    formData.top=new FormAttachment(topNavigationElement,0);    formData.bottom=new FormAttachment(100,0);    bottomNavigationElement.setLayoutData(formData);  } else {    FormData formData=new FormData();    formData.left=new FormAttachment(0,0);    formData.right=new FormAttachment(100,0);    formData.top=new FormAttachment(0,0);    formData.height=10;    topNavigationElement.setLayoutData(formData);    Canvas nextElement=topNavigationElement;    for (int i=0; i < elements.length; i++) {      if (i < topVisibleIndex || i > bottomVisibleIndex) {        elements[i].setLayoutData(null);        elements[i].setVisible(false);      } else {        formData=new FormData();        formData.height=getTabHeight();        formData.left=new FormAttachment(0,0);        formData.right=new FormAttachment(100,0);        formData.top=new FormAttachment(nextElement,0);        nextElement=elements[i];        elements[i].setLayoutData(formData);        elements[i].setVisible(true);      }    }    formData=new FormData();    formData.left=new FormAttachment(0,0);    formData.right=new FormAttachment(100,0);    formData.top=new FormAttachment(nextElement,0);    formData.bottom=new FormAttachment(100,0);    formData.height=10;    bottomNavigationElement.setLayoutData(formData);  }  Composite grandparent=getParent().getParent();  grandparent.layout(true);  layout(true);}  }
class C{  public void sendToAll(PacketAbstract packet){  this.channelEnumMap.get(Side.SERVER).attr(FMLOutboundHandler.FML_MESSAGETARGET).set(FMLOutboundHandler.OutboundTarget.ALL);  this.channelEnumMap.get(Side.SERVER).writeAndFlush(packet);}  }
class C{  public int hashCode(){  long bits=Double.doubleToLongBits(m00);  bits=bits * 31 + Double.doubleToLongBits(m01);  bits=bits * 31 + Double.doubleToLongBits(m02);  bits=bits * 31 + Double.doubleToLongBits(m10);  bits=bits * 31 + Double.doubleToLongBits(m11);  bits=bits * 31 + Double.doubleToLongBits(m12);  return (((int)bits) ^ ((int)(bits >> 32)));}  }
class C{  public StringBuffer insert(int index,double d){  return insert(index,Double.toString(d));}  }
class C{  private void updateUi(FragmentActivity activity){  ActivityType activityType=CalorieUtils.getActivityType(activity,category);  String trackIconValue=TrackIconUtils.getIconValue(activity,category);  StatsUtils.setTripStatisticsValues(activity,activity,null,lastTripStatistics,activityType,trackIconValue);  StatsUtils.setLocationValues(activity,activity,null,lastLocation,isSelectedTrackRecording());}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case UmplePackage.TRACE_OPTION___OPTION_1:    return getOption_1();}return super.eGet(featureID,resolve,coreType);}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public static boolean isBouncyCastleKeyStore(KeyStoreType keyStoreType){  return (keyStoreType == KeyStoreType.BKS || keyStoreType == KeyStoreType.BKS_V1 || keyStoreType == KeyStoreType.UBER);}  }
class C{  private boolean stackContains(Stack stack,String url){  int n=stack.size();  boolean contains=false;  for (int i=0; i < n; i++) {    String url2=(String)stack.elementAt(i);    if (url2.equals(url)) {      contains=true;      break;    }  }  return contains;}  }
class C{  static Class findProviderClass(String className,ClassLoader cl,boolean doFallback) throws ClassNotFoundException, ConfigurationError {  SecurityManager security=System.getSecurityManager();  try {    if (security != null) {      final int lastDot=className.lastIndexOf(".");      String packageName=className;      if (lastDot != -1)       packageName=className.substring(0,lastDot);      security.checkPackageAccess(packageName);    }  } catch (  SecurityException e) {    throw e;  }  Class providerClass;  if (cl == null) {    providerClass=Class.forName(className);  } else {    try {      providerClass=cl.loadClass(className);    } catch (    ClassNotFoundException x) {      if (doFallback) {        ClassLoader current=ObjectFactory.class.getClassLoader();        if (current == null) {          providerClass=Class.forName(className);        } else         if (cl != current) {          cl=current;          providerClass=cl.loadClass(className);        } else {          throw x;        }      } else {        throw x;      }    }  }  return providerClass;}  }
class C{  @Override public boolean isRasterFormat(){  return true;}  }
class C{  public final AGeneralOperationAccessor avoidDestinationSet(boolean avoidSet){  this.avoidSet=avoidSet;  return this;}  }
class C{  protected final void addProcessName(DatabaseParameterBuffer dpb){  String processName=getSystemPropertyPrivileged("org.firebirdsql.jdbc.processName");  if (processName != null) {    dpb.addArgument(DatabaseParameterBuffer.PROCESS_NAME,processName);  }}  }
class C{  public void test_getHandshakeStatus(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; ++l) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertEquals("Incorrect HandshakeStatus",enHS[j],res.getHandshakeStatus());        }      }    }  }}  }
class C{  private void validateState(State current){  ValidationUtils.validateState(current);}  }
class C{  public static List<SearchResult> search(final Object element,final ZyLabelContent content,final String searchString,final boolean regEx,final boolean caseSensitive){  final ArrayList<SearchResult> results=new ArrayList<SearchResult>();  if ("".equals(searchString)) {    return results;  }  int lineCounter=0;  for (  final ZyLineContent lineContent : content) {    final String lineText=caseSensitive ? lineContent.getText() : lineContent.getText().toLowerCase();    int startPosition=0;    do {      startPosition=regEx ? CElementSearcher.doRegexSearch(element,lineText,lineCounter,searchString,startPosition,caseSensitive,results) : CElementSearcher.doTextSearch(element,lineText,lineCounter,searchString,startPosition,caseSensitive,results);    } while (startPosition != -1);    ++lineCounter;  }  return results;}  }
class C{  public final void testGetSeed04(){  ECFieldFp f=new ECFieldFp(BigInteger.valueOf(23L));  BigInteger a=BigInteger.ONE;  assertNull(new EllipticCurve(f,a,a).getSeed());}  }
class C{  public void comment(char ch[],int start,int length) throws SAXException {  if (m_insideDTD)   return;  charactersFlush();  int exName=m_expandedNameTable.getExpandedTypeID(DTM.COMMENT_NODE);  int dataIndex=m_valuesOrPrefixes.stringToIndex(new String(ch,start,length));  m_previous=addNode(DTM.COMMENT_NODE,exName,m_parents.peek(),m_previous,dataIndex,false);}  }
class C{  public void init(int size,int columns,OnColorSelectedListener listener){  mNumColumns=columns;  Resources res=getResources();  if (size == ColorPickerDialog.SIZE_LARGE) {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_large);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_large);  } else {    mSwatchLength=res.getDimensionPixelSize(R.dimen.color_swatch_small);    mMarginSize=res.getDimensionPixelSize(R.dimen.color_swatch_margins_small);  }  mOnColorSelectedListener=listener;  mDescription=res.getString(R.string.color_swatch_description);  mDescriptionSelected=res.getString(R.string.color_swatch_description_selected);}  }
class C{  public Keyboard(Context context,int xmlLayoutResId){  this(context,xmlLayoutResId,0);}  }
class C{  public static long calculateServerFeeReverse(long amount){  long a=Constants.SERVER_FEE_FLAT;  long b=amount + a;  long c=(long)((b / (1 - Constants.SERVER_FEE_PERCENTAGE)) - b);  return Math.min(Constants.SERVER_FEE_MAX,Math.max(Constants.SERVER_FEE_MIN,c + a));}  }
class C{  @Override public void sessionCreated(HttpSessionEvent event){}  }
class C{  public boolean confirm(final String question){  if (!isDisposed()) {    return MessageDialog.openConfirm(Raptor.getInstance().raptorWindow.getShell(),local.getString("confirm"),question);  }  return false;}  }
class C{  private void tryReduceLevel(){  HeadIndex<K,V> h=head;  HeadIndex<K,V> d;  HeadIndex<K,V> e;  if (h.level > 3 && (d=(HeadIndex<K,V>)h.down) != null && (e=(HeadIndex<K,V>)d.down) != null && e.right == null && d.right == null && h.right == null && casHead(h,d) && h.right != null)   casHead(d,h);}  }
class C{  @Override public void agg(Object newVal){  aggVal+=((Number)newVal).doubleValue();  firstTime=false;}  }
class C{  @Override public boolean addEdit(UndoableEdit anEdit){  if (DEBUG)   System.out.println("UndoRedoManager@" + hashCode() + ".add "+ anEdit);  if (undoOrRedoInProgress) {    anEdit.die();    return true;  }  boolean success=super.addEdit(anEdit);  updateActions();  if (success && anEdit.isSignificant() && editToBeUndone() == anEdit) {    setHasSignificantEdits(true);  }  return success;}  }
class C{  private void buildNotification(){  Intent intentPlayPause=new Intent(NOTIFICATION_INTENT_PLAY_PAUSE);  Intent intentOpenPlayer=new Intent(NOTIFICATION_INTENT_OPEN_PLAYER);  Intent intentCancel=new Intent(NOTIFICATION_INTENT_CANCEL);  PendingIntent playPausePending=PendingIntent.getBroadcast(this,100,intentPlayPause,0);  PendingIntent openPending=PendingIntent.getBroadcast(this,101,intentOpenPlayer,0);  PendingIntent cancelPending=PendingIntent.getBroadcast(this,102,intentCancel,0);  RemoteViews mNotificationTemplate=new RemoteViews(this.getPackageName(),R.layout.notification);  Notification.Builder notificationBuilder=new Notification.Builder(this);  if (artImage == null)   artImage=BitmapFactory.decodeResource(getResources(),R.drawable.default_art);  mNotificationTemplate.setTextViewText(R.id.notification_line_one,singerName);  mNotificationTemplate.setTextViewText(R.id.notification_line_two,songName);  mNotificationTemplate.setImageViewResource(R.id.notification_play,isPlaying() ? R.drawable.btn_playback_pause : R.drawable.btn_playback_play);  mNotificationTemplate.setImageViewBitmap(R.id.notification_image,artImage);  mNotificationTemplate.setOnClickPendingIntent(R.id.notification_collapse,cancelPending);  mNotificationTemplate.setOnClickPendingIntent(R.id.notification_play,playPausePending);  Notification notification=notificationBuilder.setSmallIcon(smallImage).setContentIntent(openPending).setPriority(Notification.PRIORITY_DEFAULT).setContent(mNotificationTemplate).setUsesChronometer(true).build();  notification.flags=Notification.FLAG_ONGOING_EVENT;  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {    RemoteViews mExpandedView=new RemoteViews(this.getPackageName(),R.layout.notification_expanded);    mExpandedView.setTextViewText(R.id.notification_line_one,singerName);    mExpandedView.setTextViewText(R.id.notification_line_two,songName);    mExpandedView.setImageViewResource(R.id.notification_expanded_play,isPlaying() ? R.drawable.btn_playback_pause : R.drawable.btn_playback_play);    mExpandedView.setImageViewBitmap(R.id.notification_image,artImage);    mExpandedView.setOnClickPendingIntent(R.id.notification_collapse,cancelPending);    mExpandedView.setOnClickPendingIntent(R.id.notification_expanded_play,playPausePending);    notification.bigContentView=mExpandedView;  }  if (mNotificationManager != null)   mNotificationManager.notify(NOTIFICATION_ID,notification);}  }
class C{  public boolean isExpanded(int row){  TreeUI tree=getUI();  if (tree != null) {    TreePath path=tree.getPathForRow(this,row);    if (path != null) {      Boolean value=expandedState.get(path);      return (value != null && value.booleanValue());    }  }  return false;}  }
class C{  public static float decodeDimension(byte value[],int offset){  return sortableShortToHalfFloat(sortableBytesToShort(value,offset));}  }
class C{  final DoubleEdgeList createTriangulation(Vector2... points){  if (points == null)   throw new NullPointerException(Messages.getString("geometry.decompose.nullArray"));  int size=points.length;  if (size < 4)   throw new IllegalArgumentException(Messages.getString("geometry.decompose.invalidSize"));  double winding=Geometry.getWinding(points);  if (winding < 0.0) {    Geometry.reverseWinding(points);  }  DoubleEdgeList dcel=new DoubleEdgeList(points);  EarClippingVertex root=null;  EarClippingVertex curr=null;  EarClippingVertex prev=null;  for (int i=0; i < size; i++) {    Vector2 p=points[i];    curr=new EarClippingVertex(p);    Vector2 p0=points[i == 0 ? size - 1 : i - 1];    Vector2 p1=points[i + 1 == size ? 0 : i + 1];    Vector2 v1=p.to(p0);    Vector2 v2=p.to(p1);    if (v2.isZero()) {      throw new IllegalArgumentException(Messages.getString("geometry.decompose.coincident"));    }    if (v1.cross(v2) >= 0.0) {      curr.reflex=true;    } else {      curr.reflex=false;    }    curr.prev=prev;    if (prev != null) {      prev.next=curr;    }    curr.index=i;    prev=curr;    if (root == null) {      root=curr;    }  }  root.prev=prev;  prev.next=root;  EarClippingVertex node=root;  for (int i=0; i < size; i++) {    node.ear=this.isEar(node,size);    node=node.next;  }  node=root;  int n=size;  for (; n > 3; ) {    if (node.ear) {      dcel.addHalfEdges(node.next.index,node.prev.index);      EarClippingVertex pNode=node.prev;      EarClippingVertex nNode=node.next;      pNode.next=node.next;      nNode.prev=node.prev;      if (pNode.reflex) {        pNode.reflex=this.isReflex(pNode);      }      if (nNode.reflex) {        nNode.reflex=this.isReflex(nNode);      }      if (!pNode.reflex) {        pNode.ear=this.isEar(pNode,n);      }      if (!nNode.reflex) {        nNode.ear=this.isEar(nNode,n);      }      n--;    }    node=node.next;  }  return dcel;}  }
class C{  public static boolean isInRadius(float x,float y,float radius){  Vector2f point=new Vector2f(x,y);  return Math.abs(point.length()) <= radius;}  }
class C{  public void initialize() throws ReplicatorException, InterruptedException {  Database database=null;  CommitSeqnoAccessor accessor=null;  try {    database=connectionManager.getCatalogConnection();    initTable(database);    int rows=count(database);    if (rows == 0) {      if (logger.isDebugEnabled())       logger.debug("Adding dummy first row to " + TABLE_NAME + " table");      commitSeqnoTableTaskId.setValue(0);      commitSeqnoTableSeqno.setValue(-1L);      commitSeqnoTableFragno.setValue(-1);      commitSeqnoTableEventId.setValue(null);      commitSeqnoTableUpdateTimestamp.setValue(new Timestamp(System.currentTimeMillis()));      database.insert(commitSeqnoTable);      accessor=this.createAccessor(0,database);      ReplDBMSHeader task0CommitSeqno=accessor.lastCommitSeqno();      accessor.updateLastCommitSeqno(task0CommitSeqno,0);    }    rows=count(database);    if (rows == channels) {      logger.info("Validated that trep_commit_seqno row count matches channels: rows=" + rows + " channels="+ channels);    } else     if (rows == 1) {      expandTasks();    } else {      String msg=String.format("Rows in trep_commit_seqno are inconsistent with channel count: channels=%d rows=%d",channels,rows);      logger.error("Replication configuration error: table trep_commit_seqno does not match channels");      logger.info("This may be due to resetting the number of channels after an unclean replicator shutdown");      throw new ReplicatorException(msg);    }  } catch (  SQLException e) {    throw new ReplicatorException("Unable to initialize commit seqno table: " + e.getMessage(),e);  } finally {    if (accessor != null)     accessor.close();    connectionManager.releaseCatalogConnection(database);  }}  }
class C{  public static String joinOnSemicolon(Map<String,String> toJoin){  return joinOnDelimiter(toJoin,SEMICOLON);}  }
class C{  public void remove(){  checkState();  checkPermission(permission);  iterator.remove();}  }
class C{  private static void process(final Player player,final TutorialEventType type){  final String key=type.name().toLowerCase();  if (player.getKeyedSlot("!tutorial",key) == null) {    player.setKeyedSlot("!tutorial",key,"1");    new DelayedPlayerTextSender(player,"Tutorial: " + type.getMessage(),NotificationType.TUTORIAL,2);  }}  }
class C{  @Override public void putAll(Cache<K,V> cache2){  for (  Entry<K,CacheObject<V>> e : cache2.entrySet()) {    if (e != null) {      put(e.getKey(),e.getValue());    }  }}  }
class C{  @Override public boolean isLeaf(){  expandIfNeeded();  return !isDirectory;}  }
class C{  private static String byteArrayToString(byte[] bytes){  StringBuilder builder=new StringBuilder("[");  for (int i=0; i < bytes.length && builder.length() < LOG_CONTENT_MAX_LENGTH; i++) {    if (builder.length() > LOG_CONTENT_MAX_LENGTH) {      return builder.append("] (" + i + ":"+ bytes.length+ ")").toString();    }    if (i > 0) {      builder.append(", ");    }    builder.append(byteToString(bytes[i]));  }  return builder.append(']').toString();}  }
class C{  public final boolean isAttributeAnimatable(String ns,String ln){  DoublyIndexedTable t=getTraitInformationTable();  TraitInformation ti=(TraitInformation)t.get(ns,ln);  if (ti != null) {    return ti.isAnimatable();  }  return false;}  }
class C{  @Override public synchronized void afterLast() throws SQLException {  super.afterLast();}  }
class C{  public NNInvertedIndex(Index index,String structureName,DocumentIndex _doi,Class<? extends IterablePosting> postingClass) throws IOException {  super(index,structureName,_doi,postingClass);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  public void unfollow(int followerId,int followeeId){  if (followerId != followeeId && followMap.get(followerId) != null && followMap.get(followerId).get(followeeId) != null) {    followMap.get(followerId).remove(followeeId);  }}  }
class C{  public void log(Throwable exception){  getBot().log(this,exception);}  }
class C{  @SuppressWarnings("unchecked") private Set<Class<?>> filterClasses(Set<Class<?>> allClass){  return Sets.difference(allClass,Sets.newHashSet(BaseModel.class,Events.class,Attractions.class,Venues.class,ResourceSupport.Embedded.class,Page.class,Page.Link.class,Page.PageInfo.class,Page.PageLinks.class,BaseModelTest.class));}  }
class C{  public void onFileInfoDequeued(ContactId contact){  if (sLogger.isActivated()) {    sLogger.info("One-One file info with transferId " + mFileTransferId + " dequeued successfully.");  }synchronized (mLock) {    mFileTransferService.removeOneToOneFileTransfer(mFileTransferId);    long deliveryExpiration=0;    if (!mRcsSettings.isFtHttpCapAlwaysOn()) {      long timeout=mRcsSettings.getMsgDeliveryTimeoutPeriod();      if (timeout > 0) {        deliveryExpiration=System.currentTimeMillis() + timeout;        mImService.getDeliveryExpirationManager().scheduleOneToOneFileTransferDeliveryTimeoutAlarm(contact,mFileTransferId,deliveryExpiration);      }    }    if (mPersistentStorage.setFileInfoDequeued(deliveryExpiration)) {      mBroadcaster.broadcastStateChanged(contact,mFileTransferId,State.TRANSFERRED,ReasonCode.UNSPECIFIED);    }  }  mImService.tryToDequeueFileTransfers();}  }
class C{  public static void destroyWorldView(WorldView view){  Collection<WorldView> set=worldviewsets.get(view.getWorldObj().provider.dimensionId);  if (set != null)   set.remove(view);  view.cleanup();}  }
class C{  public ShardIterator onlyNodeSelectorActiveInitializingShardsIt(String nodeAttribute,DiscoveryNodes discoveryNodes){  ArrayList<ShardRouting> ordered=new ArrayList<>(activeShards.size() + allInitializingShards.size());  Set<String> selectedNodes=Sets.newHashSet(discoveryNodes.resolveNodesIds(nodeAttribute));  for (  ShardRouting shardRouting : activeShards) {    if (selectedNodes.contains(shardRouting.currentNodeId())) {      ordered.add(shardRouting);    }  }  for (  ShardRouting shardRouting : allInitializingShards) {    if (selectedNodes.contains(shardRouting.currentNodeId())) {      ordered.add(shardRouting);    }  }  if (ordered.isEmpty()) {    throw new IllegalArgumentException("No data node with critera [" + nodeAttribute + "] found");  }  return new PlainShardIterator(shardId,ordered);}  }
class C{  private void removeStaleSpans(){  Iterator<Entry<String,TreeSet<CacheSpan>>> iterator=cachedSpans.entrySet().iterator();  while (iterator.hasNext()) {    Entry<String,TreeSet<CacheSpan>> next=iterator.next();    Iterator<CacheSpan> spanIterator=next.getValue().iterator();    boolean isEmpty=true;    while (spanIterator.hasNext()) {      CacheSpan span=spanIterator.next();      if (!span.file.exists()) {        spanIterator.remove();        if (span.isCached) {          totalSpace-=span.length;        }        notifySpanRemoved(span);      } else {        isEmpty=false;      }    }    if (isEmpty) {      iterator.remove();    }  }}  }
class C{  public static Scope scope(Serializable scopeObject){  return new Scope(scopeObject);}  }
class C{  public static Object readSerializedObject(Context context,String fileName){  Object objectToReturn=null;  File SettingsFile=new File(Environment.getExternalStorageDirectory(),"/Domoticz/DomoticzSettings.txt");  final String sPath=SettingsFile.getPath().substring(0,SettingsFile.getPath().lastIndexOf("/"));  boolean mkdirsResultIsOk=new File(sPath + "/").mkdirs();  String combinedFilename=sPath + "/" + fileName;  if (!new File(combinedFilename).exists())   return null;  try {    ObjectInputStream input=new ObjectInputStream(new FileInputStream(combinedFilename));    objectToReturn=input.readObject();    input.close();  } catch (  IOException|ClassNotFoundException e) {    e.printStackTrace();  }  return objectToReturn;}  }
class C{  public static final String nameForDaemon(final String daemonName){  return NAME_PREFIX + daemonName;}  }
class C{  public static void initAmenities(Scenario scenario){}  }
class C{  private boolean isSelectionTemplate(){  if (getContext() instanceof DocumentTemplateContext) {    DocumentTemplateContext ctx=(DocumentTemplateContext)getContext();    if (ctx.getCompletionLength() > 0)     return true;  }  return false;}  }
class C{  private boolean containsBlackPoint(int a,int b,int fixed,boolean horizontal){  if (horizontal) {    for (int x=a; x <= b; x++) {      if (image.get(x,fixed)) {        return true;      }    }  } else {    for (int y=a; y <= b; y++) {      if (image.get(fixed,y)) {        return true;      }    }  }  return false;}  }
class C{  public void testSplit1(){  SplittableRandom sr=new SplittableRandom();  for (int reps=0; reps < REPS; ++reps) {    SplittableRandom sc=sr.split();    int i=0;    while (i < NCALLS && sr.nextLong() == sc.nextLong())     ++i;    assertTrue(i < NCALLS);  }}  }
class C{  public static ModifiableDoubleDBIDList newDistanceDBIDList(int size){  return DBIDFactory.FACTORY.newDistanceDBIDList(size);}  }
class C{  public TransformFilter(Filter child,FilterState allow,FilterState abstain,FilterState deny){  this.child=child;  transform.put(FilterState.ALLOW,allow);  transform.put(FilterState.ABSTAIN,abstain);  transform.put(FilterState.DENY,deny);}  }
class C{  public RichText withUnderline(){  this.formats.add(Format.UNDERLINE);  return this;}  }
class C{  public void mergeRight(final Expression other,final boolean mergeNormalized){  original=original + ' ' + other.getOriginal();  if (mergeNormalized) {    normalized=normalized + ' ' + other.getNormalized();  }  mergeType(other.getType());  setAmount(mergeAmount(amount,other.amount));  breakFlag=other.getBreakFlag();}  }
class C{  public DateHistogramBuilder extendedBounds(Long min,Long max){  extendedBoundsMin=min;  extendedBoundsMax=max;  return this;}  }
class C{  private Bitmap processBitmap(String data,int reqWidth,int reqHeight,Malevich.ImageDecodedListener imageDecodedListener){  if (debug) {    Log.d(TAG,"processBitmap - " + data);  }  final String key=ImageCache.hashKeyForDisk(data);  FileDescriptor fileDescriptor=null;  FileInputStream fileInputStream=null;  DiskLruCache.Snapshot snapshot;  StringBuffer error=new StringBuffer();synchronized (mHttpDiskCacheLock) {    while (mHttpDiskCacheStarting) {      try {        mHttpDiskCacheLock.wait();      } catch (      InterruptedException e) {        error.append(e.toString());      }    }    if (mHttpDiskCache != null) {      try {        if (new File(data).exists()) {          fileInputStream=new FileInputStream(new File(data));          fileDescriptor=fileInputStream.getFD();        } else {          snapshot=mHttpDiskCache.get(key);          if (snapshot == null) {            if (debug) {              Log.d(TAG,"processBitmap, not found in http cache, downloading...");            }            DiskLruCache.Editor editor=mHttpDiskCache.edit(key);            if (editor != null) {              final String result=downloadUrlToStream(data,editor.newOutputStream(DISK_CACHE_INDEX));              if (result.equals("")) {                editor.commit();              } else {                error.append(result);                editor.abort();              }            }            snapshot=mHttpDiskCache.get(key);          }          if (snapshot != null) {            fileInputStream=(FileInputStream)snapshot.getInputStream(DISK_CACHE_INDEX);            fileDescriptor=fileInputStream.getFD();          }        }      } catch (      IOException e) {        Log.e(TAG,"processBitmap - " + e);        error.append(e.toString());      }catch (      IllegalStateException e) {        Log.e(TAG,"processBitmap - " + e);        error.append(e.toString());      } finally {        if (fileDescriptor == null && fileInputStream != null) {          try {            fileInputStream.close();          } catch (          IOException e) {          }        }      }    }  }  Bitmap bitmap=null;  if (fileDescriptor != null) {    bitmap=Malevich.Utils.decodeSampledBitmapFromDescriptor(fileDescriptor,reqWidth,reqHeight,getImageCache());    if (imageDecodedListener != null) {      bitmap=imageDecodedListener.onImageDecoded(data,reqWidth,reqHeight,bitmap);    }  } else {  }  if (fileInputStream != null) {    try {      fileInputStream.close();    } catch (    IOException e) {    }  }  return bitmap;}  }
class C{  private static void assertOneRegisterSet(final HLL hll,final int registerIndex,final byte registerValue){  final IntByteHashMap sparseProbabilisticStorage=hll.sparseProbabilisticStorage;  assertEquals(sparseProbabilisticStorage.size(),1);  assertEquals(sparseProbabilisticStorage.get(registerIndex),registerValue);}  }
class C{  protected final void fireColumnEvent(int idx,boolean prev){  Object[] lstnrs=m_listeners.getArray();  for (int i=0; i < lstnrs.length; ++i)   ((ColumnListener)lstnrs[i]).columnChanged(this,idx,prev);}  }
class C{  @Override protected void initViews(View self,Bundle savedInstanceState){}  }
class C{  public SpanWithinQueryBuilder queryName(String queryName){  this.queryName=queryName;  return this;}  }
class C{  protected void remove(Session session,CloseReason reason){  Collection<Session> sessions=socketSessions.get(getChannelId(session));  if (sessions != null && sessions.remove(session)) {    fireEvent(session,reason,SESSION_CLOSED);  }}  }
class C{  public static boolean isMiddleClick(MouseEvent e){  return ((e.getButton() == MouseEvent.BUTTON2) && (e.getClickCount() == 1));}  }
class C{  @Override public void onAccessibilityEvent(AccessibilityEvent event){  if (!mTextToSpeechInitialized) {    Log.e(LOG_TAG,"Text-To-Speech engine not ready.  Bailing out.");    return;  }  AccessibilityNodeInfo source=event.getSource();  if (source == null) {    return;  }  AccessibilityNodeInfo rowNode=getListItemNodeInfo(source);  if (rowNode == null) {    return;  }  AccessibilityNodeInfo labelNode=rowNode.getChild(0);  if (labelNode == null) {    rowNode.recycle();    return;  }  AccessibilityNodeInfo completeNode=rowNode.getChild(1);  if (completeNode == null) {    rowNode.recycle();    return;  }  if (rowNode.getChildCount() < 2 || !rowNode.getChild(1).isCheckable()) {    rowNode.recycle();    return;  }  CharSequence taskLabel=labelNode.getText();  final boolean isComplete=completeNode.isChecked();  String completeStr=null;  if (isComplete) {    completeStr=getString(R.string.task_complete);  } else {    completeStr=getString(R.string.task_not_complete);  }  String taskStr=getString(R.string.task_complete_template,taskLabel,completeStr);  StringBuilder utterance=new StringBuilder(taskStr);  final int records=event.getRecordCount();  for (int i=0; i < records; i++) {    AccessibilityRecord record=event.getRecord(i);    CharSequence contentDescription=record.getContentDescription();    if (!TextUtils.isEmpty(contentDescription)) {      utterance.append(SEPARATOR);      utterance.append(contentDescription);    }  }  mTts.speak(utterance.toString(),TextToSpeech.QUEUE_FLUSH,null);  Log.d(LOG_TAG,utterance.toString());}  }
class C{  public void checkValid(CloseableReference<Bitmap> bitmapReference,Bitmap reference){  if (Build.VERSION.SDK_INT < 12) {    mValidityTextView.setText(R.string.ignoring_check);  } else   if (bitmapReference.get().sameAs(reference)) {    mValidityTextView.setText(R.string.correct_bitmap);  } else {    mValidityTextView.setText(R.string.incorrect_bitmap);  }}  }
class C{  public Property weekOfWeekyear(){  return new Property(this,getChronology().weekOfWeekyear());}  }
class C{  private int replaceHue(int color,float hue){  float[] hsv=new float[3];  Color.colorToHSV(color,hsv);  hsv[0]=hue;  return Color.HSVToColor(hsv);}  }
class C{  protected AbstractMatrix2D vDice(){  super.vDice();  int[] tmp=rowOffsets;  rowOffsets=columnOffsets;  columnOffsets=tmp;  this.isNoView=false;  return this;}  }
class C{  private void run() throws IOException, ServiceException {  while (true) {    System.out.println(DIVIDER + "Main menu:\n" + "[0] Exit\n"+ "[1] Read issues\n"+ "[2] Read an issue and its comments");    int choice=readInteger("action");switch (choice) {case 0:      return;case 1:    addAndRunQuery();  break;case 2:String issueId=readString("issue ID");client.printIssueAndComments(issueId);break;default :System.out.println("Invalid choice " + choice);break;}}}  }
class C{  public DrawerBuilder withDrawerLayout(@LayoutRes int resLayout){  if (mActivity == null) {    throw new RuntimeException("please pass an activity first to use this call");  }  if (resLayout != -1) {    this.mDrawerLayout=(DrawerLayout)mActivity.getLayoutInflater().inflate(resLayout,mRootView,false);  } else {    if (Build.VERSION.SDK_INT < 21) {      this.mDrawerLayout=(DrawerLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer_fits_not,mRootView,false);    } else {      this.mDrawerLayout=(DrawerLayout)mActivity.getLayoutInflater().inflate(R.layout.material_drawer,mRootView,false);    }  }  return this;}  }
class C{  private void startGame(){  Intent intent=new Intent(this,GameActivity.class);  startActivity(intent);}  }
class C{  public static String md5(java.lang.String message){  try {    MessageDigest md=MessageDigest.getInstance("MD5");    StringBuilder sb=new StringBuilder();    byte buf[]=message.getBytes();    byte[] md5=md.digest(buf);    for (    byte aMd5 : md5) {      String tmpStr="0" + Integer.toHexString((0xff & aMd5));      sb.append(tmpStr.substring(tmpStr.length() - 2));    }    return sb.toString();  } catch (  NoSuchAlgorithmException e) {    return null;  }}  }
class C{  public boolean isDeclined(){  return is(DECLINED);}  }
class C{  public void ellipsized(int start,int end){  mEllipsizedStart=start;  mEllipsizedCount=end - start;}  }
class C{  public InstancesResultListener(){  File resultsFile;  try {    resultsFile=File.createTempFile("weka_experiment",".arff");    resultsFile.deleteOnExit();  } catch (  Exception e) {    System.err.println("Cannot create temp file, writing to standard out.");    resultsFile=new File("-");  }  setOutputFile(resultsFile);  setOutputFileName("");}  }
class C{  public static ValueNode originalValue(ValueNode proxy){  ValueNode v=proxy;  do {    if (v instanceof LimitedValueProxy) {      v=((LimitedValueProxy)v).getOriginalNode();    } else     if (v instanceof PhiNode) {      v=((PhiNode)v).singleValue();      if (v == PhiNode.MULTIPLE_VALUES) {        v=null;      }    } else {      break;    }  } while (v != null);  if (v == null) {    v=new OriginalValueSearch(proxy).result;  }  return v;}  }
class C{  public boolean isCurlLoggingEnabled(){  return curlLoggingEnabled;}  }
class C{  public static Jama.Matrix randomn(int nrows,int ncols,Random r){  return new Jama.Matrix(randn(nrows,ncols,r));}  }
class C{  @Override public void draw(Canvas canvas){  TextBlock text=mText;  if (text == null) {    return;  }  RectF rect=new RectF(text.getBoundingBox());  rect.left=translateX(rect.left);  rect.top=translateY(rect.top);  rect.right=translateX(rect.right);  rect.bottom=translateY(rect.bottom);  canvas.drawRect(rect,sRectPaint);  List<? extends Text> textComponents=text.getComponents();  for (  Text currentText : textComponents) {    float left=translateX(currentText.getBoundingBox().left);    float bottom=translateY(currentText.getBoundingBox().bottom);    canvas.drawText(currentText.getValue(),left,bottom,sTextPaint);  }}  }
class C{  public Queue<Pair<Env<AttrContext>,JCClassDecl>> desugar(Queue<Env<AttrContext>> envs){  ListBuffer<Pair<Env<AttrContext>,JCClassDecl>> results=new ListBuffer<>();  for (  Env<AttrContext> env : envs)   desugar(env,results);  return stopIfError(CompileState.FLOW,results);}  }
class C{  public int insertTrigger(Connection conn,OperableTrigger trigger,String state,JobDetail jobDetail) throws SQLException, IOException {  ByteArrayOutputStream baos=null;  if (trigger.getJobDataMap().size() > 0) {    baos=serializeJobData(trigger.getJobDataMap());  }  PreparedStatement ps=null;  int insertResult=0;  try {    ps=conn.prepareStatement(rtp(INSERT_TRIGGER));    ps.setString(1,trigger.getKey().getName());    ps.setString(2,trigger.getKey().getGroup());    ps.setString(3,trigger.getJobKey().getName());    ps.setString(4,trigger.getJobKey().getGroup());    ps.setString(5,trigger.getDescription());    if (trigger.getNextFireTime() != null)     ps.setBigDecimal(6,new BigDecimal(String.valueOf(trigger.getNextFireTime().getTime()))); else     ps.setBigDecimal(6,null);    long prevFireTime=-1;    if (trigger.getPreviousFireTime() != null) {      prevFireTime=trigger.getPreviousFireTime().getTime();    }    ps.setBigDecimal(7,new BigDecimal(String.valueOf(prevFireTime)));    ps.setString(8,state);    TriggerPersistenceDelegate tDel=findTriggerPersistenceDelegate(trigger);    String type=TTYPE_BLOB;    if (tDel != null)     type=tDel.getHandledTriggerTypeDiscriminator();    ps.setString(9,type);    ps.setBigDecimal(10,new BigDecimal(String.valueOf(trigger.getStartTime().getTime())));    long endTime=0;    if (trigger.getEndTime() != null) {      endTime=trigger.getEndTime().getTime();    }    ps.setBigDecimal(11,new BigDecimal(String.valueOf(endTime)));    ps.setString(12,trigger.getCalendarName());    ps.setInt(13,trigger.getMisfireInstruction());    setBytes(ps,14,baos);    ps.setInt(15,trigger.getPriority());    insertResult=ps.executeUpdate();    if (tDel == null)     insertBlobTrigger(conn,trigger); else     tDel.insertExtendedTriggerProperties(conn,trigger,state,jobDetail);  }  finally {    closeStatement(ps);  }  return insertResult;}  }
class C{  private void expand(){  int i;  if (isCompact) {    byte[] tempArray;    hashes=new int[INDEXCOUNT];    tempArray=new byte[UNICODECOUNT];    for (i=0; i < UNICODECOUNT; ++i) {      byte value=elementAt((char)i);      tempArray[i]=value;      touchBlock(i >> BLOCKSHIFT,value);    }    for (i=0; i < INDEXCOUNT; ++i) {      indices[i]=(short)(i << BLOCKSHIFT);    }    values=null;    values=tempArray;    isCompact=false;  }}  }
class C{  public void updateUserActivity(Player player){synchronized (setLock) {    staged.remove(player);  }  updateUserActivity(player,Instant.now());}  }
class C{  public String toString(){  return this.mode == 'd' ? this.sb.toString() : null;}  }
class C{  public double cond(){  return s[0] / s[Math.min(m,n) - 1];}  }
class C{  public void add(Match match,AppliedRegion appliedRegion,boolean prioritize){  applied.get(match).add(prioritize ? 0 : applied.get(match).size(),appliedRegion);}  }
class C{  public ParameterDatabase(String pathNameRelativeToClassFile,Class cls) throws FileNotFoundException, IOException {  this();  label="" + cls + " : "+ pathNameRelativeToClassFile;  URL def=defaultResourceURL(cls);  relativeClass=cls;  try {    if (isJarFile(def)) {      relativePath=concatenatedJarPath(def,pathNameRelativeToClassFile);      load(concatenatedJarResource(def,pathNameRelativeToClassFile).openStream());    } else {      relativePath=simplifyPath(pathNameRelativeToClassFile);      InputStream f=cls.getResourceAsStream(relativePath);      load(f);      try {        f.close();      } catch (      IOException e) {      }    }  } catch (  NullPointerException e) {    throw new IOException("Could not load database from resource file " + relativePath + " relative to the class "+ cls,e);  }catch (  IOException e) {    throw new IOException("Could not load database from resource file " + relativePath + " relative to the class "+ cls,e);  }  for (int x=0; ; x++) {    String s=getProperty("parent." + x);    if (s == null)     return;    if (new File(s).isAbsolute())     parents.addElement(new ParameterDatabase(new File(s))); else     if (s.startsWith(C_CLASS)) {      int i=indexOfFirstWhitespace(s);      if (i == -1)       throw new FileNotFoundException("Could not parse file into filename and classname:\n\tparent." + x + " = "+ s);      String classname=s.substring(C_CLASS.length(),i);      String filename=s.substring(i).trim();      try {        parents.addElement(new ParameterDatabase(filename,Class.forName(classname,true,Thread.currentThread().getContextClassLoader())));      } catch (      ClassNotFoundException ex) {        throw new FileNotFoundException("Could not parse file into filename and classname:\n\tparent." + x + " = "+ s);      }    } else {      String path=new File(new File(pathNameRelativeToClassFile).getParent(),s).toString();      parents.addElement(new ParameterDatabase(path,cls));    }  }}  }
class C{  private Camera prepareCamera(int cameraId,int encWidth,int encHeight){  try {    Camera camera=openCamera(cameraId);    if (camera == null) {      if (Cfg.DEBUG) {        Check.log(TAG + " (prepareCamera), cannot open camera: " + cameraId);      }      return null;    }    if (Cfg.DEBUG) {      camera.setErrorCallback(this.errorCallback);    }    Camera.Parameters cameraParms=camera.getParameters();    List<String> modes=cameraParms.getSupportedFocusModes();    if (modes.contains("continuous-picture")) {      cameraParms.setFocusMode("continuous-picture");    }    if (cameraParms.getSupportedPreviewFormats().contains(ImageFormat.NV21)) {      cameraParms.setPreviewFormat(ImageFormat.NV21);    }    choosePreviewSize(cameraParms,encWidth,encHeight);    camera.setParameters(cameraParms);    Camera.Size size=cameraParms.getPreviewSize();    if (Cfg.DEBUG) {      Check.log(TAG + " (prepareCamera), Camera preview size is " + size.width+ "x"+ size.height);    }    return camera;  } catch (  Exception ex) {    if (Cfg.DEBUG) {      Check.log(TAG + " (prepareCamera), ERROR " + ex);    }    return null;  }}  }
class C{  private boolean timedOut(long startWait){  return (System.nanoTime() - startWait) > timeout;}  }
class C{  public boolean isGreaterThan(Seconds other){  if (other == null) {    return getValue() > 0;  }  return getValue() > other.getValue();}  }
class C{  public void printMemoryStats(){  X.println(">>>   taskMapSize: " + taskMap.size());  Map<Class<?>,ClassDescriptor> map=clsDescs.get();  X.println(">>>   classDescriptorsCacheSize: " + (map == null ? 0 : map.size()));}  }
class C{  void triggerRumors(){  int infoRadius=5;  for (int i=0; i < centersList.size(); i++) {    Center c=centersList.get(i);    Bag seeFoodAtCenter=new Bag();    population.getNeighborsMaxDistance(c.loc.x,c.loc.y,infoRadius,false,seeFoodAtCenter,null,null);    for (    Object o : seeFoodAtCenter) {      Agent a=(Agent)o;      a.centerInfo+=Math.pow(2,i);    }  }}  }
class C{  public static void main(String... a) throws Exception {  TestBase test=TestBase.createCaller().init();  test.test();}  }
class C{  public void loadCurrentArtistImage(final ImageView imageView){  loadImage(MusicUtils.getArtistName(),MusicUtils.getArtistName(),null,-1,imageView,ImageType.ARTIST);}  }
class C{  public ConnectTimeoutException(){  super();}  }
class C{  public final void removeCaretListener(CaretListener listener){  listenerList.remove(CaretListener.class,listener);}  }
class C{  @Override public void zoomDomainAxes(double lowerPercent,double upperPercent,PlotRenderingInfo info,Point2D source){  this.domainAxis.zoomRange(lowerPercent,upperPercent);}  }
class C{  protected synchronized void superCalculateTabRects(final int tabPlacement,final int tabCount){  final Dimension size=tabPane.getSize();  final Insets insets=tabPane.getInsets();  final Insets localTabAreaInsets=getTabAreaInsets(tabPlacement);  final int returnAt;  final int x, y;switch (tabPlacement) {case SwingConstants.LEFT:    maxTabWidth=calculateMaxTabHeight(tabPlacement);  x=insets.left + localTabAreaInsets.left;y=insets.top + localTabAreaInsets.top;returnAt=size.height - (insets.bottom + localTabAreaInsets.bottom);break;case SwingConstants.RIGHT:maxTabWidth=calculateMaxTabHeight(tabPlacement);x=size.width - insets.right - localTabAreaInsets.right- maxTabWidth- 1;y=insets.top + localTabAreaInsets.top;returnAt=size.height - (insets.bottom + localTabAreaInsets.bottom);break;case SwingConstants.BOTTOM:maxTabHeight=calculateMaxTabHeight(tabPlacement);x=insets.left + localTabAreaInsets.left;y=size.height - insets.bottom - localTabAreaInsets.bottom- maxTabHeight;returnAt=size.width - (insets.right + localTabAreaInsets.right);break;case SwingConstants.TOP:default :maxTabHeight=calculateMaxTabHeight(tabPlacement);x=insets.left + localTabAreaInsets.left;y=insets.top + localTabAreaInsets.top;returnAt=size.width - (insets.right + localTabAreaInsets.right);break;}tabRunOverlay=getTabRunOverlay(tabPlacement);runCount=0;selectedRun=0;if (tabCount == 0) return;final FontMetrics metrics=getFontMetrics();final boolean verticalTabRuns=(tabPlacement == SwingConstants.LEFT || tabPlacement == SwingConstants.RIGHT);final int selectedIndex=tabPane.getSelectedIndex();visibleTabState.setNeedsScrollers(false);for (int i=0; i < tabCount; i++) {final Rectangle rect=rects[i];if (verticalTabRuns) {calculateVerticalTabRunRect(rect,metrics,tabPlacement,returnAt,i,x,y);if (rect.y + rect.height > returnAt) {visibleTabState.setNeedsScrollers(true);}} else {calculateHorizontalTabRunRect(rect,metrics,tabPlacement,returnAt,i,x,y);if (rect.x + rect.width > returnAt) {visibleTabState.setNeedsScrollers(true);}}}visibleTabState.relayoutForScrolling(rects,x,y,returnAt,selectedIndex,verticalTabRuns,tabCount,AquaUtils.isLeftToRight(tabPane));if (!AquaUtils.isLeftToRight(tabPane) && !verticalTabRuns) {final int rightMargin=size.width - (insets.right + localTabAreaInsets.right);for (int i=0; i < tabCount; i++) {rects[i].x=rightMargin - rects[i].x - rects[i].width;}}}  }
class C{  protected void encryptBlock(byte[] in,int pos,int length){  byte[] encryptedIn=new byte[blockSize];  byte[] ivBytes=ByteArrayHelper.toByteArray(nonce++,16);  ParametersWithIV ivParams=new ParametersWithIV(cipherParameters,ivBytes);  aesCipher.init(true,ivParams);  int remainingCount=length - pos;  if (remainingCount >= blockSize) {    aesCipher.processBlock(in,pos,encryptedIn,0);    System.arraycopy(encryptedIn,0,in,pos,blockSize);    mac.update(encryptedIn,0,blockSize);  } else {    byte[] extendedIn=new byte[blockSize];    System.arraycopy(in,pos,extendedIn,0,remainingCount);    aesCipher.processBlock(extendedIn,0,encryptedIn,0);    System.arraycopy(encryptedIn,0,in,pos,remainingCount);    mac.update(encryptedIn,0,remainingCount);  }}  }
class C{  private void startLeaving(){  Gossiper.instance.addLocalApplicationState(ApplicationState.STATUS,valueFactory.leaving(getLocalTokens()));  tokenMetadata.addLeavingEndpoint(FBUtilities.getBroadcastAddress());  PendingRangeCalculatorService.instance.update();}  }
class C{  public void put(InterceptedStream<T> stream){  InterceptedStream<T> oldStream=streams.put(stream.getIndex(),stream);  if (oldStream != null)   close(oldStream.getStream());}  }
class C{  private void sortByCrowdingDistance(List<AggregationIndividual> rank){  Iterator<AggregationIndividual> f=rank.iterator();  int numberOfCriteria=0;  while (f.hasNext()) {    AggregationIndividual current=f.next();    current.setCrowdingDistance(0.0d);    numberOfCriteria=Math.max(numberOfCriteria,current.getPerformance().getSize());  }  for (int m=0; m < numberOfCriteria; m++) {    Comparator<AggregationIndividual> comparator=new CriteriaComparator(m);    Collections.sort(rank,comparator);    rank.get(0).setCrowdingDistance(Double.POSITIVE_INFINITY);    rank.get(rank.size() - 1).setCrowdingDistance(Double.POSITIVE_INFINITY);    for (int i=1; i < (rank.size() - 1); i++) {      AggregationIndividual current=rank.get(i);      double currentCrowdingDistance=current.getCrowdingDistance();      AggregationIndividual afterI=rank.get(i + 1);      AggregationIndividual beforeI=rank.get(i - 1);      double afterPerformance=afterI.getPerformance().getCriterion(m).getFitness();      double beforePerformance=beforeI.getPerformance().getCriterion(m).getFitness();      current.setCrowdingDistance(currentCrowdingDistance + Math.abs(afterPerformance - beforePerformance));    }  }  Collections.sort(rank,new CrowdingComparator());}  }
class C{  private boolean checkPlayServices(){  GoogleApiAvailability apiAvailability=GoogleApiAvailability.getInstance();  int resultCode=apiAvailability.isGooglePlayServicesAvailable(context);  if (resultCode != ConnectionResult.SUCCESS) {    if (apiAvailability.isUserResolvableError(resultCode)) {      Toast.makeText(context,"Please download the Google play store apk",Toast.LENGTH_SHORT).show();    } else {      Log.e(TAG,"This device is not supported for Google Play Services");    }    return false;  }  return true;}  }
class C{  public ASN1InputStream(byte[] input){  this(new ByteArrayInputStream(input),input.length);}  }
class C{  private static void registerDefaultTransforms(){  registerTransform(Transforms.TRANSFORM_BASE64_DECODE);  registerTransform(Transforms.TRANSFORM_ENVELOPED_SIGNATURE);  registerTransform(Transforms.TRANSFORM_XPATH);  registerTransform(Transforms.TRANSFORM_XPATH2FILTER);  registerTransform(Transforms.TRANSFORM_XPOINTER);  registerTransform(Transforms.TRANSFORM_XSLT);}  }
class C{  private static DexClassLoader createInstance(Configuration config){  File file1;  File file2;switch (config) {case ONE_DEX:    file1=DEX_FILE;  file2=null;break;case ONE_JAR:file1=JAR_FILE;file2=null;break;case TWO_DEX:file1=DEX_FILE;file2=DEX2_FILE;break;case TWO_JAR:file1=JAR_FILE;file2=JAR2_FILE;break;default :throw new AssertionError("shouldn't happen");}String path=file1.getAbsolutePath();if (file2 != null) {path+=File.pathSeparator + file2.getAbsolutePath();}return new DexClassLoader(path,OPTIMIZED_DIR.getAbsolutePath(),null,ClassLoader.getSystemClassLoader());}  }
class C{  @Contract("null -> null; !null -> !null") @Nullable public static PsiElement turnInitIntoDir(@Nullable PsiElement target){  if (target instanceof PyFile && isPackage((PsiFile)target)) {    return ((PsiFile)target).getContainingDirectory();  }  return target;}  }
class C{  public static String resolveVariables(String input,Map<String,String> props){  return resolveVariables(input,props,true);}  }
class C{  public void addOverlay(OverlayFX overlay){  ParamChecks.nullNotPermitted(overlay,"overlay");  this.overlays.add(overlay);  overlay.addChangeListener(this);  draw();}  }
class C{  public void testCancelledConsume(){  AtomicInteger count=new AtomicInteger();  SubmissionPublisher<Integer> p=basicPublisher();  CompletableFuture<Void> f=p.consume(null);  f.cancel(true);  int n=1000000;  for (int i=1; i <= n; ++i)   p.submit(i);  assertTrue(count.get() < n);}  }
class C{  protected void init(List<? extends DataSet<?>> dataSets){  isLegal(dataSets);  calcMinMax(dataSets);  calcYValueSum(dataSets);  calcYValueCount(dataSets);  calcXValAverageLength();}  }
class C{  public static String decodeUnicodeStr(String s){  StringBuilder sb=new StringBuilder(s.length());  char[] chars=s.toCharArray();  for (int i=0; i < chars.length; i++) {    char c=chars[i];    if (c == '\\' && chars[i + 1] == 'u') {      char cc=0;      for (int j=0; j < 4; j++) {        char ch=Character.toLowerCase(chars[i + 2 + j]);        if ('0' <= ch && ch <= '9' || 'a' <= ch && ch <= 'f') {          cc|=(Character.digit(ch,16) << (3 - j) * 4);        } else {          cc=0;          break;        }      }      if (cc > 0) {        i+=5;        sb.append(cc);        continue;      }    }    sb.append(c);  }  return sb.toString();}  }
class C{  public static TypeReference newFormalParameterReference(int paramIndex){  return new TypeReference((METHOD_FORMAL_PARAMETER << 24) | (paramIndex << 16));}  }
class C{  public static int minBits(int number,int bits){  int val=1;  for (int x=1; val <= number && !(bits > 32); x<<=1) {    val=val | x;    bits++;  }  if (bits > 32) {    assert false : ("minBits " + bits + " must not exceed 32");  }  return bits;}  }
class C{  public boolean evaluateIsZero(final double x,final double y,final double z){  return Math.abs(evaluate(x,y,z)) < MINIMUM_RESOLUTION;}  }
class C{  private void updateCommands(){  int commandBehavior=getCommandBehavior();  if (commandBehavior == Display.COMMAND_BEHAVIOR_NATIVE) {    Display.getInstance().getImplementation().setNativeCommands(commands);    return;  }  if (commandBehavior >= Display.COMMAND_BEHAVIOR_BUTTON_BAR) {    return;  }  if (soft.length > 1) {    soft[0].setText("");    soft[1].setText("");    soft[0].setIcon(null);    soft[1].setIcon(null);    int commandSize=getCommandCount();    if (soft.length > 2) {      soft[2].setText("");      if (commandSize > 2) {        if (commandSize > 3) {          softCommand[2]=menuCommand;        } else {          softCommand[2]=getCommand(getCommandCount() - 3);        }        soft[2].setText(softCommand[2].getCommandName());        soft[2].setIcon(softCommand[2].getIcon());      } else {        softCommand[2]=null;      }    }    if (commandSize > 0) {      softCommand[0]=getCommand(getCommandCount() - 1);      soft[0].setText(softCommand[0].getCommandName());      soft[0].setIcon(softCommand[0].getIcon());      if (commandSize > 1) {        if (soft.length == 2 && commandSize > 2) {          softCommand[1]=menuCommand;        } else {          softCommand[1]=getCommand(getCommandCount() - 2);        }        soft[1].setText(softCommand[1].getCommandName());        soft[1].setIcon(softCommand[1].getIcon());      } else {        softCommand[1]=null;      }    } else {      softCommand[0]=null;      softCommand[1]=null;    }    if (commandSize == 1) {      if (parent.isVisible()) {        parent.revalidate();      }    }    repaint();  }}  }
class C{  @Override public double[][] processIds(DBIDs ids,Relation<? extends NumberVector> relation){  final int dim=RelationUtil.dimensionality(relation);  final CovarianceMatrix cmat=new CovarianceMatrix(dim);  final Centroid centroid=Centroid.make(relation,ids);  double maxdist=0.0;  double stddev=0.0;{    for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {      NumberVector obj=relation.get(iter);      double distance=weightDistance.distance(centroid,obj);      stddev+=distance * distance;      if (distance > maxdist) {        maxdist=distance;      }    }    if (maxdist == 0.0) {      maxdist=1.0;    }    stddev=Math.sqrt(stddev / ids.size());  }  for (DBIDIter iter=ids.iter(); iter.valid(); iter.advance()) {    NumberVector obj=relation.get(iter);    double distance=weightDistance.distance(centroid,obj);    double weight=weightfunction.getWeight(distance,maxdist,stddev);    cmat.put(obj,weight);  }  return cmat.destroyToNaiveMatrix();}  }
class C{  private double log(double base,double value){  return Math.log(value) / Math.log(base);}  }
class C{  public Anniversary(Date date){  super(date);}  }
