class C{  private void mergeCollapse(){  while (stackSize > 1) {    int n=stackSize - 2;    if (n > 0 && runLen[n - 1] <= runLen[n] + runLen[n + 1]) {      if (runLen[n - 1] < runLen[n + 1])       n--;      mergeAt(n);    } else     if (runLen[n] <= runLen[n + 1]) {      mergeAt(n);    } else {      break;    }  }}  }
class C{  public IterativeTrainingPanel(final NetworkPanel networkPanel,final IterableTrainer trainer){  iterativeControls=new IterativeControlsPanel(networkPanel,trainer);  if (trainer != null) {    trainingSetPanel=new TrainingSetPanel(trainer.getTrainableNetwork(),3);  } else {    trainingSetPanel=new TrainingSetPanel();  }  setLayout(new GridBagLayout());  GridBagConstraints wholePanelConstraints=new GridBagConstraints();  wholePanelConstraints.anchor=GridBagConstraints.FIRST_LINE_START;  wholePanelConstraints.fill=GridBagConstraints.HORIZONTAL;  wholePanelConstraints.insets=new Insets(10,10,10,10);  wholePanelConstraints.weightx=0;  wholePanelConstraints.weighty=0.5;  wholePanelConstraints.gridx=0;  wholePanelConstraints.gridy=0;  add(iterativeControls,wholePanelConstraints);  wholePanelConstraints.anchor=GridBagConstraints.PAGE_START;  wholePanelConstraints.fill=GridBagConstraints.BOTH;  wholePanelConstraints.insets=new Insets(10,10,10,10);  wholePanelConstraints.weightx=1;  wholePanelConstraints.weighty=0.5;  wholePanelConstraints.gridx=1;  wholePanelConstraints.gridy=0;  add(trainingSetPanel,wholePanelConstraints);}  }
class C{  @Override public void report(){  Instrumentation.disableInstrumentation();  VM.sysWrite("Printing " + dataName + ":\n");  VM.sysWrite("--------------------------------------------------\n");  double total=0;  double methodEntryTotal=0;  double backedgeTotal=0;  for (  String stringName : stringToCounterMap.keySet()) {    Integer counterNum=stringToCounterMap.get(stringName);    double count=getCounter(counterNum);    VM.sysWrite(count + " " + stringName+ "\n");    total+=count;    if (stringName.indexOf("METHOD ENTRY") != -1) {      methodEntryTotal+=count;    }    if (stringName.indexOf("BACKEDGE") != -1) {      backedgeTotal+=count;    }  }  VM.sysWrite("Total backedges: " + backedgeTotal + "\n");  VM.sysWrite("Method Entry Total: " + methodEntryTotal + "\n");  VM.sysWrite("Total Yieldpoints: " + total + "\n");}  }
class C{  public String numClustersTipText(){  return "set number of clusters. -1 to select number of clusters " + "automatically by cross validation.";}  }
class C{  @Override public synchronized boolean isClosed(){  return mBitmaps == null;}  }
class C{  public void drawTitle(Canvas canvas,int x,int y,int width,Paint paint){  if (mRenderer.isShowLabels()) {    paint.setColor(mRenderer.getLabelsColor());    paint.setTextAlign(Align.CENTER);    paint.setTextSize(mRenderer.getChartTitleTextSize());    drawString(canvas,mRenderer.getChartTitle(),x + width / 2,y + mRenderer.getChartTitleTextSize(),paint);  }}  }
class C{  public RpcClient peerWith(String host,int port,Bootstrap bootstrap,Map<String,Object> attributes) throws IOException {  InetSocketAddress remoteAddress=new InetSocketAddress(host,port);  return peerWith(remoteAddress,bootstrap,attributes);}  }
class C{  protected void afterInit(SiteRun run) throws Exception {}  }
class C{  public Plugin loadPlugin() throws PluginException {  return getPlugin();}  }
class C{  @DSSink({DSSinkKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:15.455 -0500",hash_original_method="E29573D85212414C15B5600ED44221C0",hash_generated_method="45AB3E76A33739E95CE9CE6CD6FCDA89") protected void sendMessage(byte[] msg,InetAddress peerAddress,int peerPort,boolean reConnect) throws IOException {  if (sipStack.isLoggingEnabled() && this.sipStack.isLogStackTraceOnMessageSend()) {    this.sipStack.getStackLogger().logStackTrace(StackLogger.TRACE_INFO);  }  if (peerPort == -1) {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug(getClass().getName() + ":sendMessage: Dropping reply!");    }    throw new IOException("Receiver port not set ");  } else {    if (sipStack.isLoggingEnabled()) {      this.sipStack.getStackLogger().logDebug("sendMessage " + peerAddress.getHostAddress() + "/"+ peerPort+ "\n"+ "messageSize =  "+ msg.length+ " message = "+ new String(msg));      this.sipStack.getStackLogger().logDebug("*******************\n");    }  }  DatagramPacket reply=new DatagramPacket(msg,msg.length,peerAddress,peerPort);  try {    DatagramSocket sock;    boolean created=false;    if (sipStack.udpFlag) {      sock=((UDPMessageProcessor)messageProcessor).sock;    } else {      sock=new DatagramSocket();      created=true;    }    sock.send(reply);    if (created)     sock.close();  } catch (  IOException ex) {    throw ex;  }catch (  Exception ex) {    InternalErrorHandler.handleException(ex);  }}  }
class C{  public Collection<Integer> pendingReducers(){  return pendingReducers;}  }
class C{  public boolean isEncapsulated(){  return encapsulated;}  }
class C{  private void resolveConflict(final ConflictDescription description){  final ConflictResolutionDialog resolveDialog=new ConflictResolutionDialog(getShell(),description);  description.clearAnalysis();  if (resolveDialog.open() != IDialogConstants.OK_ID) {    return;  }  final ConflictResolution resolution=resolveDialog.getResolution();  resolution.addStatusListener(this);synchronized (runningResolutionList) {    runningResolutionList.add(resolution);  }  if (resolution instanceof ExternalConflictResolution) {    ((ExternalConflictResolution)resolution).setConflictResolver(new ResourceChangingConflictResolver(getShell()));  }  final ResolveConflictsCommand resolver=new ResolveConflictsCommand(repository,resolution);  final ICommandExecutor commandExecutor;  if (resolution instanceof EclipseMergeConflictResolution) {    commandExecutor=UICommandExecutorFactory.newUICommandExecutor(getShell(),0);  } else {    commandExecutor=UICommandExecutorFactory.newUICommandExecutor(getShell());  }  commandExecutor.execute(new ResourceChangingCommand(resolver));}  }
class C{  @SuppressWarnings("unchecked") public Frame(final int nLocals,final int nStack){  this.values=(V[])new Value[nLocals + nStack];  this.locals=nLocals;}  }
class C{  @Override protected EClass eStaticClass(){  return ExpressionsPackage.Literals.CONDITIONAL_EXPRESSION;}  }
class C{  public static FactoryImage createImage(InputStream is,String mediaType,String name) throws BadRequestException, ServerException {  try {    final ByteArrayOutputStream out=new ByteArrayOutputStream();    final byte[] buffer=new byte[1024];    int read;    while ((read=is.read(buffer,0,buffer.length)) != -1) {      out.write(buffer,0,read);      if (out.size() > 1024 * 1024) {        throw new BadRequestException("Maximum upload size exceeded.");      }    }    if (out.size() == 0) {      return new FactoryImage();    }    out.flush();    return new FactoryImage(out.toByteArray(),mediaType,name);  } catch (  IOException ioEx) {    throw new ServerException(ioEx.getLocalizedMessage());  }}  }
class C{  public void pad(int factor) throws IOException {  int padding=factor - (int)(nrBits % factor);  int excess=padding & 7;  if (excess > 0) {    this.write(0,excess);    padding-=excess;  }  while (padding > 0) {    this.write(0,8);    padding-=8;  }  this.out.flush();}  }
class C{  protected void processCompletionStageUpdateAuthzArtifacts(Operation op){  op.complete();}  }
class C{  public void createUser(String username,String password) throws SQLException {  createUser(username,password,null);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Element testAddr;  NamedNodeMap addrAttr;  Node attrNode;  NamedNodeMap attrList;  doc=(Document)load("hc_staff",false);  elementList=doc.getElementsByTagName("acronym");  testAddr=(Element)elementList.item(0);  addrAttr=testAddr.getAttributes();  attrNode=addrAttr.item(0);  attrList=attrNode.getAttributes();  assertNull("nodeAttributeNodeAttributeAssert1",attrList);}  }
class C{  protected void registerTouchpadAttributes(){  addAttributeProcessor(new DeadZoneLmlAttribute(),"deadzone","deadzoneRadius");  addAttributeProcessor(new ResetOnTouchUpLmlAttribute(),"resetOnTouchUp");}  }
class C{  @Override public void handle(ReadyEvent event){  try {    event.getClient().changeUsername("Awesome Bot");  } catch (  RateLimitException|DiscordException e) {    e.printStackTrace();  }}  }
class C{  public boolean isContactIdAssociatedWithRcsContactProvider(final ContactId contact){  Cursor cursor=null;  Uri uri=Uri.withAppendedPath(CONTENT_URI,contact.toString());  try {    cursor=mLocalContentResolver.query(uri,PROJ_RCSCONTACT_CONTACT,null,null,null);    CursorUtil.assertCursorIsNotNull(cursor,uri);    return cursor.moveToFirst();  }  finally {    CursorUtil.close(cursor);  }}  }
class C{  public T caseAnonymous_activity_1_(Anonymous_activity_1_ object){  return null;}  }
class C{  public HostQueue(final File hostPath,final boolean onDemand,final boolean exceed134217727) throws MalformedURLException {  this.onDemand=onDemand;  this.exceed134217727=exceed134217727;  this.hostPath=hostPath;  String filename=hostPath.getName();  int pdot=filename.lastIndexOf('.');  if (pdot < 0)   throw new RuntimeException("hostPath name must contain a dot: " + filename);  this.port=Integer.parseInt(filename.substring(pdot + 1));  int p1=filename.lastIndexOf("-#");  if (p1 >= 0) {    this.hostName=filename.substring(0,p1);    this.hostHash=filename.substring(p1 + 2,pdot);  } else   throw new RuntimeException("hostPath name must contain -# followd by hosthash: " + filename);  init();}  }
class C{  private void createIcon(final int numberOfRows){  final Label label=new Label(this.composite,SWT.NONE);  label.setImage(this.icon);  label.setBackground(this.composite.getDisplay().getSystemColor(SWT.COLOR_WHITE));  label.setLayoutData(new GridData(GridData.CENTER,GridData.BEGINNING,false,false,1,numberOfRows));}  }
class C{  boolean isAttributeAssigned(int attrId){  return ((attrVals[attrId - CSS_STYLE_ID_OFFSET] != -1) || ((getAttributes() != null) && (getAttributes().get(new Integer(attrId)) != null)));}  }
class C{  private void addReference(final int sourcePosition,final int referencePosition){  if (srcAndRefPositions == null) {    srcAndRefPositions=new int[6];  }  if (referenceCount >= srcAndRefPositions.length) {    int[] a=new int[srcAndRefPositions.length + 6];    System.arraycopy(srcAndRefPositions,0,a,0,srcAndRefPositions.length);    srcAndRefPositions=a;  }  srcAndRefPositions[referenceCount++]=sourcePosition;  srcAndRefPositions[referenceCount++]=referencePosition;}  }
class C{  public UnitImageFactory(){}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case UmplePackage.AFTER_EVENT___TIMER_1:    setTimer_1((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  protected void processMappingValueConverter(DatabaseMapping mapping,String convertValue,List<ConvertMetadata> converts,MetadataClass referenceClass,MetadataClass referenceClassWithGenerics){  processMappingConverter(mapping,convertValue,getConverts(converts),referenceClass,referenceClassWithGenerics,false);}  }
class C{  @NonNull public RxAppState startMonitoring(){  appStateRecognizer.start(app,internalAppStateListener);  return this;}  }
class C{  public int addMovingPoint(int x,int y){  int position=super.addMovingPoint(x,y);  redraw(null,true);  return position;}  }
class C{  public RenewSpec(boolean renewable,boolean renew,int remainingRenewables){  Validate.isTrue(remainingRenewables >= 0);  this.remainingRenewables=remainingRenewables;  this.renewable=renewable;  this.renew=renew;}  }
class C{  private static Region RegionToTokPair(MappingObject[][] spec,Region reg){  PCalLocation regBegin=reg.getBegin();  PCalLocation regEnd=reg.getEnd();  if (regEnd.getLine() < 0 || regBegin.getLine() >= spec.length) {    return null;  }  if (regBegin.getLine() < 0) {    regBegin=new PCalLocation(0,0);  }  if (regEnd.getLine() >= spec.length) {    regEnd=new PCalLocation(spec.length - 1,999);  }  PCalLocation tokAtOrRightOfBeginning=null;  boolean prevIsBeginToLeft=false;  boolean notDone=true;  int locLine=regBegin.getLine();  while (locLine < spec.length && spec[locLine].length == 0) {    locLine++;  }  if (locLine >= spec.length) {    notDone=false;  }  PCalLocation loc=new PCalLocation(locLine,0);  PCalLocation prevloc=null;  while (notDone && loc != null) {    if (prevIsBeginToLeft) {      MappingObject.EndTLAToken mobj=(MappingObject.EndTLAToken)ObjectAt(loc,spec);      if (LT(regBegin,new PCalLocation(loc.getLine(),mobj.getColumn()))) {        tokAtOrRightOfBeginning=prevloc;        notDone=false;      } else {        prevIsBeginToLeft=false;      }    } else {      MappingObject obj=ObjectAt(loc,spec);      if (obj.getType() == MappingObject.END_TLATOKEN) {        MappingObject.EndTLAToken eobj=(MappingObject.EndTLAToken)obj;        if (LT(regBegin,new PCalLocation(loc.getLine(),eobj.getColumn()))) {          tokAtOrRightOfBeginning=PrevLocOf(loc,spec);          notDone=false;        }      } else       if (obj.getType() == MappingObject.BEGIN_TLATOKEN) {        MappingObject.BeginTLAToken bobj=(MappingObject.BeginTLAToken)obj;        if (LTEq(regBegin,new PCalLocation(loc.getLine(),bobj.getColumn()))) {          tokAtOrRightOfBeginning=loc;          notDone=false;        } else {          prevIsBeginToLeft=true;        }      } else       if (obj.getType() == MappingObject.SOURCE_TOKEN) {        MappingObject.SourceToken sobj=(MappingObject.SourceToken)obj;        if (LT(regBegin,new PCalLocation(loc.getLine(),sobj.getEndColumn()))) {          tokAtOrRightOfBeginning=loc;          notDone=false;        }      }    }    prevloc=loc;    loc=NextLocOf(loc,spec);  }  PCalLocation tokAtOrLeftOfEnd=null;  boolean prevIsEndToRight=false;  notDone=true;  locLine=regEnd.getLine();  while (locLine >= 0 && spec[locLine].length == 0) {    locLine--;  }  if (locLine < 0) {    notDone=false;  }  loc=new PCalLocation(locLine,spec[locLine].length - 1);  prevloc=null;  while (notDone && loc != null) {    if (prevIsEndToRight) {      MappingObject.BeginTLAToken mobj=(MappingObject.BeginTLAToken)ObjectAt(loc,spec);      if (LT(new PCalLocation(loc.getLine(),mobj.getColumn()),regEnd)) {        tokAtOrLeftOfEnd=prevloc;        notDone=false;      } else {        prevIsEndToRight=false;      }    } else {      MappingObject obj=ObjectAt(loc,spec);      if (obj.getType() == MappingObject.BEGIN_TLATOKEN) {        MappingObject.BeginTLAToken eobj=(MappingObject.BeginTLAToken)obj;        if (LT(new PCalLocation(loc.getLine(),eobj.getColumn()),regEnd)) {          tokAtOrLeftOfEnd=NextLocOf(loc,spec);          notDone=false;        }      } else       if (obj.getType() == MappingObject.END_TLATOKEN) {        MappingObject.EndTLAToken bobj=(MappingObject.EndTLAToken)obj;        if (LTEq(new PCalLocation(loc.getLine(),bobj.getColumn()),regEnd)) {          tokAtOrLeftOfEnd=loc;          notDone=false;        } else {          prevIsEndToRight=true;        }      } else       if (obj.getType() == MappingObject.SOURCE_TOKEN) {        MappingObject.SourceToken sobj=(MappingObject.SourceToken)obj;        if (LT(new PCalLocation(loc.getLine(),sobj.getBeginColumn()),regEnd)) {          tokAtOrLeftOfEnd=loc;          notDone=false;        }      }    }    prevloc=loc;    loc=PrevLocOf(loc,spec);  }  if (tokAtOrRightOfBeginning != null) {    if (tokAtOrLeftOfEnd == null) {      return new Region(tokAtOrRightOfBeginning,tokAtOrRightOfBeginning);    } else     if (LTEq(tokAtOrRightOfBeginning,tokAtOrLeftOfEnd)) {      return new Region(tokAtOrRightOfBeginning,tokAtOrLeftOfEnd);    } else {      int distToLeft;      MappingObject obj=ObjectAt(tokAtOrLeftOfEnd,spec);      if (obj.getType() == MappingObject.END_TLATOKEN) {        distToLeft=Dist(new PCalLocation(tokAtOrLeftOfEnd.getLine(),((MappingObject.EndTLAToken)obj).getColumn()),regBegin);      } else {        distToLeft=Dist(new PCalLocation(tokAtOrLeftOfEnd.getLine(),((MappingObject.SourceToken)obj).getEndColumn()),regEnd);      }      int distToRight;      obj=ObjectAt(tokAtOrRightOfBeginning,spec);      if (obj.getType() == MappingObject.BEGIN_TLATOKEN) {        distToRight=Dist(new PCalLocation(tokAtOrRightOfBeginning.getLine(),((MappingObject.BeginTLAToken)obj).getColumn()),regEnd);      } else {        distToRight=Dist(new PCalLocation(tokAtOrRightOfBeginning.getLine(),((MappingObject.SourceToken)obj).getBeginColumn()),regEnd);      }      PCalLocation leftBegin=null;      PCalLocation rightEnd=null;      if (distToLeft >= distToRight) {        rightEnd=tokAtOrRightOfBeginning;        notDone=true;        while (rightEnd != null && notDone) {          int type=ObjectAt(rightEnd,spec).getType();          if ((type == MappingObject.END_TLATOKEN) || (type == MappingObject.SOURCE_TOKEN)) {            notDone=false;          }          if (notDone) {            rightEnd=NextLocOf(rightEnd,spec);          }        }      }      if (distToLeft <= distToRight) {        leftBegin=tokAtOrLeftOfEnd;        notDone=true;        while (notDone) {          int type=ObjectAt(leftBegin,spec).getType();          if ((type == MappingObject.BEGIN_TLATOKEN) || (type == MappingObject.SOURCE_TOKEN)) {            notDone=false;          }          if (notDone) {            leftBegin=PrevLocOf(leftBegin,spec);          }        }      }      if (distToLeft > distToRight) {        return new Region(tokAtOrRightOfBeginning,rightEnd);      } else       if (distToLeft < distToRight) {        return new Region(leftBegin,tokAtOrLeftOfEnd);      } else {        return new Region(leftBegin,rightEnd);      }    }  } else   if (tokAtOrLeftOfEnd != null) {    return new Region(tokAtOrLeftOfEnd,tokAtOrLeftOfEnd);  }  return null;}  }
class C{  public static byte[] hexStringToByteArray(final String s,int offset,int len){  final byte[] b=new byte[len / 2];  for (int i=0; i < b.length; i++) {    final int index=offset + i * 2;    final int v=Integer.parseInt(s.substring(index,index + 2),16);    b[i]=(byte)v;  }  return b;}  }
class C{  private void snipOutEntry(Entry entry,final Entry parent,boolean removeParentRelationship){  final String previousId=entry.getPreviousSiblingId();  if (previousId != null) {    final Entry previous=getEntryById(previousId);    previous.setNextSiblingId(entry.getNextSiblingId());  } else {    parent.setFirstChildId(entry.getNextSiblingId());  }  final String nextId=entry.getNextSiblingId();  if (nextId != null) {    final Entry next=getEntryById(nextId);    next.setPreviousSiblingId(previousId);  } else {    parent.setLastChildId(previousId);  }}  }
class C{  private void gotoMyLocation(){  LocationManager locationManager=(LocationManager)getSystemService(LOCATION_SERVICE);  Criteria criteria=new Criteria();  String provider=locationManager.getBestProvider(criteria,true);  if (Build.VERSION.SDK_INT >= 23 && ContextCompat.checkSelfPermission(getActivity(),android.Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ContextCompat.checkSelfPermission(getActivity(),android.Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {  } else {    Location myLocation=locationManager.getLastKnownLocation(provider);    if (myLocation != null) {      LatLng latLng=new LatLng(myLocation.getLatitude(),myLocation.getLongitude());      activeLatLng=latLng;      googleMap.animateCamera(CameraUpdateFactory.newLatLngZoom(latLng,15));      googleMap.addMarker(new MarkerOptions().position(latLng));    }  }}  }
class C{  public T caseIfStatement(IfStatement object){  return null;}  }
class C{  public double eval(double params[]){  return (Math.abs(params[0]));}  }
class C{  public boolean explicitCast(Type from,Type to) throws ClassNotFound {  if (implicitCast(from,to)) {    return true;  }  if (from.inMask(TM_NUMBER)) {    return to.inMask(TM_NUMBER);  }  if (from.isType(TC_CLASS) && to.isType(TC_CLASS)) {    ClassDefinition fromClass=getClassDefinition(from);    ClassDefinition toClass=getClassDefinition(to);    if (toClass.isFinal()) {      return fromClass.implementedBy(this,toClass.getClassDeclaration());    }    if (fromClass.isFinal()) {      return toClass.implementedBy(this,fromClass.getClassDeclaration());    }    if (toClass.isInterface() && fromClass.isInterface()) {      return toClass.couldImplement(fromClass);    }    return toClass.isInterface() || fromClass.isInterface() || fromClass.superClassOf(this,toClass.getClassDeclaration());  }  if (to.isType(TC_ARRAY)) {    if (from.isType(TC_ARRAY)) {      Type t1=from.getElementType();      Type t2=to.getElementType();      while ((t1.getTypeCode() == TC_ARRAY) && (t2.getTypeCode() == TC_ARRAY)) {        t1=t1.getElementType();        t2=t2.getElementType();      }      if (t1.inMask(TM_ARRAY | TM_CLASS) && t2.inMask(TM_ARRAY | TM_CLASS)) {        return explicitCast(t1,t2);      }    } else     if (from == Type.tObject || from == Type.tCloneable || from == Type.tSerializable)     return true;  }  return false;}  }
class C{  public boolean match(CatchClause node,Object other){  if (!(other instanceof CatchClause)) {    return false;  }  CatchClause o=(CatchClause)other;  return (safeSubtreeMatch(node.getException(),o.getException()) && safeSubtreeMatch(node.getBody(),o.getBody()));}  }
class C{  public final void writeShort(short[] pa,int start,int n) throws IOException {  for (int i=0; i < n; i++) {    writeShort(pa[start + i]);  }}  }
class C{  public static double logPdf(double x,double m,double shape){  double a=Math.sqrt(shape / (2.0 * Math.PI * x* x* x));  double b=((-shape) * (x - m) * (x - m)) / (2.0 * m * m* x);  return Math.log(a) + b;}  }
class C{  public long findUniqueLong(@NotNull SqlQuery query){  return executeQuery(rowMapperForClass(long.class).unique(),query);}  }
class C{  public static PivotTracingClient client(){  PivotTracingClient pt=new PivotTracingClient();  pt.addTracepoint(hdfs_datanode_incrBytesRead);  pt.addTracepoint(hdfs_datanode_addReadBlockOp);  pt.addTracepoint(hdfs_datanode_dataTransferProtocol);  pt.addTracepoint(hdfs_client_open);  pt.addTracepoint(hdfs_namenode_getBlockLocations);  pt.addTracepoint(hdfs_namenode_getBlockLocations_return);  pt.addTracepoint(client_protocols);  pt.addTracepoint(stresstest_donextop);  return pt;}  }
class C{  public static void execute(ExecutablePool pool,Instantiator[] instantiators,EventID eventId){  AbstractOp op=new RegisterInstantiatorsOpImpl(instantiators,eventId);  pool.execute(op,Integer.MAX_VALUE);}  }
class C{  @Override public int parse(char[] buf,int start,int end,T data){  if (subject != null) {    return subject.parse(buf,start,end,data);  } else {    return NO_MATCH;  }}  }
class C{  static LogWriterAppender createLogWriterAppender(final boolean appendToFile,final boolean isLoner,final boolean isSecurity,final LogConfig config,final boolean logConfig){  final boolean isDistributionConfig=config instanceof DistributionConfig;  final DistributionConfig dsConfig=isDistributionConfig ? (DistributionConfig)config : null;  File logFile=config.getLogFile();  String firstMsg=null;  boolean firstMsgWarning=false;  AlertAppender.getInstance().setAlertingDisabled(isLoner);  if (isSecurity) {    if (isDistributionConfig) {      File tmpLogFile=dsConfig.getSecurityLogFile();      if (tmpLogFile != null && !tmpLogFile.equals(new File(""))) {        logFile=tmpLogFile;      }    } else {      throw new IllegalArgumentException("DistributionConfig is expected for SecurityLogWriter");    }  }  if (logFile == null || logFile.equals(new File(""))) {    return null;  }  if (logFile.exists()) {    final boolean useChildLogging=config.getLogFile() != null && !config.getLogFile().equals(new File("")) && config.getLogFileSizeLimit() != 0;    final boolean statArchivesRolling=isDistributionConfig && dsConfig.getStatisticArchiveFile() != null && !dsConfig.getStatisticArchiveFile().equals(new File("")) && dsConfig.getArchiveFileSizeLimit() != 0 && dsConfig.getStatisticSamplingEnabled();    if (!appendToFile || useChildLogging || statArchivesRolling) {      final File oldMain=ManagerLogWriter.getLogNameForOldMainLog(logFile,isSecurity || useChildLogging || statArchivesRolling);      final boolean succeeded=LogFileUtils.renameAggressively(logFile,oldMain);      if (succeeded) {        firstMsg=LocalizedStrings.InternalDistributedSystem_RENAMED_OLD_LOG_FILE_TO_0.toLocalizedString(oldMain);      } else {        firstMsgWarning=true;        firstMsg=LocalizedStrings.InternalDistributedSystem_COULD_NOT_RENAME_0_TO_1.toLocalizedString(new Object[]{logFile,oldMain});      }    }  }  FileOutputStream fos;  try {    fos=new FileOutputStream(logFile,true);  } catch (  FileNotFoundException ex) {    String s=LocalizedStrings.InternalDistributedSystem_COULD_NOT_OPEN_LOG_FILE_0.toLocalizedString(logFile);    throw new GemFireIOException(s,ex);  }  final PrintStream out=new PrintStream(fos);  ManagerLogWriter mlw=null;  String logWriterLoggerName=null;  if (isSecurity) {    mlw=new SecurityManagerLogWriter(dsConfig.getSecurityLogLevel(),out,config.getName());    logWriterLoggerName=LogService.SECURITY_LOGGER_NAME;  } else {    mlw=new ManagerLogWriter(config.getLogLevel(),out,config.getName());    logWriterLoggerName=LogService.MAIN_LOGGER_NAME;  }  mlw.setConfig(config);  AppenderContext[] appenderContext=new AppenderContext[1];  if (isSecurity) {    appenderContext[0]=LogService.getAppenderContext(LogService.SECURITY_LOGGER_NAME);  } else {    appenderContext[0]=LogService.getAppenderContext();  }  final LogWriterAppender appender=LogWriterAppender.create(appenderContext,logWriterLoggerName,mlw,fos);  if (!isSecurity && LogService.MAIN_LOGGER_NAME.equals(logWriterLoggerName) && LogService.isUsingGemFireDefaultConfig()) {    LogService.removeConsoleAppender();  }  final InternalLogWriter logWriter=mlw;  if (firstMsg != null) {    if (firstMsgWarning) {      logWriter.warning(firstMsg);    } else {      logWriter.info(firstMsg);    }  }  if (logConfig) {    if (!isLoner) {      logWriter.info(LocalizedStrings.InternalDistributedSystem_STARTUP_CONFIGURATIONN_0,config.toLoggerString());    }  }  if (ALLOW_REDIRECT) {    if (ProcessLauncherContext.isRedirectingOutput()) {      try {        OSProcess.redirectOutput(config.getLogFile());      } catch (      IOException e) {        logWriter.error(e);      }    }  }  return appender;}  }
class C{  public static void encode(Configuration configuration,Movie movie,OutputStream out) throws IOException {  final boolean useCompression=configuration.getCompilerConfiguration().useCompression();  TagEncoder encoder=configuration.generateSizeReport() ? new TagEncoderReporter() : new TagEncoder();  new MovieEncoder(encoder).export(movie,useCompression);  encoder.writeTo(out);  generateSizeReport(configuration,movie,encoder);  if (ThreadLocalToolkit.getBenchmark() != null) {    LocalizationManager l10n=ThreadLocalToolkit.getLocalizationManager();    if (l10n != null)     ThreadLocalToolkit.getBenchmark().benchmark(l10n.getLocalizedTextString(new SWFEncoding()));  }}  }
class C{  public boolean hasMasks(){  return (masks != null && !masks.isEmpty());}  }
class C{  public ASN1Primitive parsePublicKey() throws IOException {  ASN1InputStream aIn=new ASN1InputStream(keyData.getBytes());  return aIn.readObject();}  }
class C{  public void onUpdate(Project.NameKey project,String oldValue,String newValue){}  }
class C{  public VisorNodeDataCollectorTaskArg(boolean taskMonitoringEnabled,String evtOrderKey,String evtThrottleCntrKey,int sample,boolean sysCaches){  this.taskMonitoringEnabled=taskMonitoringEnabled;  this.evtOrderKey=evtOrderKey;  this.evtThrottleCntrKey=evtThrottleCntrKey;  this.sample=sample;  this.sysCaches=sysCaches;}  }
class C{  public T caseFeatureType(FeatureType object){  return null;}  }
class C{  public void initialize(){  TextureState ts=new TextureState();  ts.setEnabled(false);  setRenderState(ts);  for (int i=0; i < lineSetList.size(); ++i) {    LineSetState state=lineSetList.get(i);    addLineSet(state,false);  }  zBufferState=new ZBufferState();  zBufferState.setFunction(ZBufferState.TestFunction.LessThanOrEqualTo);  zBufferState.setEnabled(true);  setRenderState(zBufferState);}  }
class C{  public static TileEntity loadTileEntityHook(NBTTagCompound data,Class<? extends TileEntity> clazz) throws Exception {  if (FWTile.class.isAssignableFrom(clazz)) {    return FWTileLoader.loadTile(data);  } else {    return clazz.newInstance();  }}  }
class C{  private static Boolean isInsidePolygon(final GeoPoint point,final List<GeoPoint> polyPoints){  final double latitude=point.getLatitude();  final double longitude=point.getLongitude();  final double sinLatitude=Math.sin(latitude);  final double cosLatitude=Math.cos(latitude);  final double sinLongitude=Math.sin(longitude);  final double cosLongitude=Math.cos(longitude);  double arcDistance=0.0;  Double prevAngle=null;  for (  final GeoPoint polyPoint : polyPoints) {    final Double angle=computeAngle(polyPoint,sinLatitude,cosLatitude,sinLongitude,cosLongitude);    if (angle == null) {      return null;    }    if (prevAngle != null) {      double angleDelta=angle - prevAngle;      if (angleDelta < -Math.PI) {        angleDelta+=Math.PI * 2.0;      }      if (angleDelta > Math.PI) {        angleDelta-=Math.PI * 2.0;      }      if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {        return null;      }      arcDistance+=angleDelta;    }    prevAngle=angle;  }  if (prevAngle != null) {    final Double lastAngle=computeAngle(polyPoints.get(0),sinLatitude,cosLatitude,sinLongitude,cosLongitude);    if (lastAngle == null) {      return null;    }    double angleDelta=lastAngle - prevAngle;    if (angleDelta < -Math.PI) {      angleDelta+=Math.PI * 2.0;    }    if (angleDelta > Math.PI) {      angleDelta-=Math.PI * 2.0;    }    if (Math.abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) {      return null;    }    arcDistance+=angleDelta;  }  if (Math.abs(arcDistance) < Vector.MINIMUM_RESOLUTION) {    return null;  }  return arcDistance > 0.0;}  }
class C{  public void transmit(Command c,Map h,String b){  _server.receive(c,h,b,this);}  }
class C{  @Override protected void onCreate(Bundle savedInstanceState){  setContentView(R.layout.acronym_activity);  mEditText=(EditText)findViewById(R.id.editText1);  super.onCreate(savedInstanceState,AcronymOps.class,this);}  }
class C{  private void expandOnCheck(){  if (chkExpand.isChecked())   expandAll(); else   collapseAll();}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.123 -0500",hash_original_method="E6965F1E2FB321FAD1F4EA1126484F16",hash_generated_method="60C132B45E842D9C2697360FDDF75B00") public void copy1DRangeFrom(int off,int count,float[] d){  validateIsFloat32();  copy1DRangeFromUnchecked(off,count,d);}  }
class C{  public List<String> findAllInContent(String content){  List<String> results=new LinkedList<String>();  for (  BoyerMooreMatcher matcher : strings) {    if (matcher.findInContent(content) >= 0)     results.add(matcher.getPattern());  }  Matcher matcher;  for (  Pattern pattern : patterns) {    matcher=pattern.matcher(content);    if (matcher.find()) {      results.add(content);    }  }  return results;}  }
class C{  public static void saveDefaultsToProperties(Properties properties){  properties.setProperty("MapElement.CartesianGrid.defaultColor",StringUtil.colorToString(defaultColor));  properties.setProperty("MapElement.CartesianGrid.defaultRows",Integer.toString(defaultRows));  properties.setProperty("MapElement.CartesianGrid.defaultColumns",Integer.toString(defaultColumns));  properties.setProperty("MapElement.CartesianGrid.defaultLineWidth",Double.toString(defaultLineWidth));  properties.setProperty("MapElement.CartesianGrid.defaultLabelVisible",Boolean.toString(defaultLabelVisible));  properties.setProperty("MapElement.CartesianGrid.defaultActualCoordinates",Boolean.toString(defaultActualCoordinates));}  }
class C{  public synchronized final void incrementProgressBy(int diff){  setProgress(mProgress + diff);}  }
class C{  public void updateRegisterToClose(UseCaseConf useCaseConf,Integer bookId,List fields,List listIdsRegister) throws ValidationException, SecurityException, AttributesException, BookException, SessionException, ParseException {  BookSession.preUpdateRegisterToClose(useCaseConf.getSessionID(),bookId,listIdsRegister,useCaseConf.getEntidadId());  Integer folderID=null;  for (Iterator it=listIdsRegister.iterator(); it.hasNext(); ) {    folderID=(Integer)it.next();    saveOrUpdateFolder(useCaseConf,bookId,folderID.intValue(),null,fields,null,null);  }  BookSession.postUpdateFields(useCaseConf.getSessionID(),bookId,listIdsRegister,useCaseConf.getEntidadId());}  }
class C{  public static byte[] encode(Object object){  String data=new JSONObject(object).toString();  data=filter(data);  return data.getBytes();}  }
class C{  public GemFireHealthConfigImpl(String hostName){  this.hostName=hostName;}  }
class C{  public FunctionLibFunction(){}  }
class C{  public void login(UseCaseConf useCaseConf,String login,String password) throws ValidationException, SecurityException, Exception {  String sessionID=null;  if (!useCaseConf.getEntidadId().equals("ISicres") && login.indexOf("##CODE##") != -1) {    String decodedLogin=login.substring(0,login.indexOf("##CODE##"));    decodedLogin=Base64Util.decodeToString(decodedLogin);    sessionID=SecuritySession.login(decodedLogin,password,useCaseConf.getUserDn(),useCaseConf.getUseLdap(),useCaseConf.getUsingOSAuth(),useCaseConf.getLocale(),useCaseConf.getEntidadId());  } else {    sessionID=SecuritySession.login(login,password,useCaseConf.getUserDn(),useCaseConf.getUseLdap(),useCaseConf.getUsingOSAuth(),useCaseConf.getLocale(),useCaseConf.getEntidadId());  }  useCaseConf.setSessionID(sessionID);}  }
class C{  protected static boolean isUserDefinedProperty(String propName){  return !standardPropNames.contains(propName);}  }
class C{  @SuppressWarnings("rawtypes") @Test public void testCustomStorageFormat() throws Exception {  String resourceId="/schema/test/foo";  String storedResourceId="_schema_test_foo.bin";  MockAnalysisComponent observer=new MockAnalysisComponent();  List<ManagedResourceObserver> observers=Arrays.asList((ManagedResourceObserver)observer);  Map<String,Object> storedData=new HashMap<>();  Map<String,Object> initArgs=new HashMap<>();  initArgs.put("someArg","someVal");  initArgs.put("arg2",Boolean.TRUE);  List<String> arg3list=Arrays.asList("one","two","three");  initArgs.put("arg3",arg3list);  initArgs.put("arg4",18L);  initArgs.put("arg5",0.9);  Map<String,Long> arg6map=new HashMap<>();  arg6map.put("uno",1L);  arg6map.put("dos",2L);  initArgs.put("arg6",arg6map);  storedData.put("initArgs",initArgs);  List<String> managedList=new ArrayList<>();  managedList.add("1");  managedList.add("2");  managedList.add("3");  storedData.put(ManagedResource.MANAGED_JSON_LIST_FIELD,managedList);  ManagedResourceStorage.InMemoryStorageIO storageIO=new ManagedResourceStorage.InMemoryStorageIO();  storageIO.storage.put(storedResourceId,ser2bytes((Serializable)storedData));  CustomStorageFormatResource res=new CustomStorageFormatResource(resourceId,new SolrResourceLoader("./"),storageIO);  res.loadManagedDataAndNotify(observers);  assertTrue("Observer was not notified by ManagedResource!",observer.wasNotified);  List<String> updatedData=new ArrayList<>();  updatedData.add("1");  updatedData.add("2");  updatedData.add("3");  updatedData.add("4");  res.storeManagedData(updatedData);  Object stored=res.storage.load(resourceId);  assertNotNull(stored);  assertTrue(stored instanceof Map);  Map storedMap=(Map)stored;  assertNotNull(storedMap.get("initArgs"));  List storedList=(List)storedMap.get(ManagedResource.MANAGED_JSON_LIST_FIELD);  assertTrue(storedList.contains("4"));}  }
class C{  private static String translateOperator(String operator,Locale locale){  String result=null;  if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_EQUAL_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_EQUAL_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_NOT_EQUAL_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_NOT_EQUAL_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_GREATER_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_GREATER_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_GREATER_EQUAL_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_GREATER_EQUAL_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_LESSER_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_LESSER_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_LESSER_EQUAL_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_LESSER_EQUAL_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_BETWEEN_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_BETWEEN_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_LIKE_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_LIKE_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_OR_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_OR_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_ABC_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_ABC_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_IN_AND_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_IN_AND_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_IN_OR_TEXT_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_IN_OR_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_DEPEND_OF_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_DEPEND_OF_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_BEGIN_BY_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_LIKE_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_END_WITH_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_LIKE_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_AFTER_TO_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_GREATER_TEXT_VALUE;  } else   if (operator.equals(RBUtil.getInstance(locale).getProperty(Keys.I18N_QUERY_BEFORE_TO_VALUE))) {    result=com.ieci.tecdoc.common.isicres.Keys.QUERY_LESSER_TEXT_VALUE;  }  return result;}  }
class C{  public boolean isStopPlaying(){  return this.stopPlaying;}  }
class C{  public List<List<Integer>> subsetsC(int[] nums){  List<List<Integer>> subset=new ArrayList<>();  subset.add(new ArrayList<>());  for (int i=0; i < nums.length; i++) {    int n=subset.size();    for (int j=0; j < n; j++) {      List<Integer> set=new ArrayList<>(subset.get(j));      set.add(nums[i]);      subset.add(set);    }  }  return subset;}  }
class C{  public Object parse(String text) throws DataParseException {  try {    StringTokenizer st=new StringTokenizer(text,"\"[](){}, ");    int[] array=new int[st.countTokens()];    for (int i=0; st.hasMoreTokens(); ++i) {      String tok=st.nextToken();      array[i]=Integer.parseInt(tok);    }    return array;  } catch (  NumberFormatException e) {    throw new DataParseException(e);  }}  }
class C{  private void revealChildrenThatNeedAttention(TreeViewer viewer,LogEntry<T> entry){  Data logData=entry.getLogData();  if (logData != null && logData.getNeedsAttention()) {    viewer.reveal(entry);  }  List<LogEntry<T>> disclosedChildren=entry.getDisclosedChildren();  for (  LogEntry<T> logEntry : disclosedChildren) {    revealChildrenThatNeedAttention(viewer,logEntry);  }}  }
class C{  public static ITypeBinding normalizeWildcardType(ITypeBinding wildcardType,boolean isBindingToAssign,AST ast){  ITypeBinding bound=wildcardType.getBound();  if (isBindingToAssign) {    if (bound == null || !wildcardType.isUpperbound()) {      return ast.resolveWellKnownType("java.lang.Object");    }  } else {    if (bound == null || wildcardType.isUpperbound()) {      return null;    }  }  return bound;}  }
class C{  public Vector<SiftFeature> run(){  Vector<SiftFeature> features=new Vector<SiftFeature>();  for (int o=0; o < octaves.length; ++o) {    if (octaves[o].state == FloatArray2DScaleOctave.State.EMPTY)     continue;    Vector<SiftFeature> more=runOctave(o);    features.addAll(more);  }  return features;}  }
class C{  protected AssociationResponse(ParameterList params){  super(params);}  }
class C{  private static <T>void siftDownComparable(int k,T x,Object[] array,int n){  if (n > 0) {    Comparable<? super T> key=(Comparable<? super T>)x;    int half=n >>> 1;    while (k < half) {      int child=(k << 1) + 1;      Object c=array[child];      int right=child + 1;      if (right < n && ((Comparable<? super T>)c).compareTo((T)array[right]) > 0)       c=array[child=right];      if (key.compareTo((T)c) <= 0)       break;      array[k]=c;      k=child;    }    array[k]=key;  }}  }
class C{  public Boolean isForce(){  return force;}  }
class C{  public ArrayLongCompressed(int size,int leadingClearBits,int trailingClearBits){  init(size,BIT_LENGTH - leadingClearBits - trailingClearBits,trailingClearBits);}  }
class C{  @Override public byte readByte() throws IOException {  LOG.warn("Should not be used!");  return inputStream.readByte();}  }
class C{  public String toString(){  return m_Attributes.toString();}  }
class C{  public X509v3CertificateBuilder copyAndAddExtension(ASN1ObjectIdentifier oid,boolean isCritical,X509CertificateHolder certHolder){  Certificate cert=certHolder.toASN1Structure();  Extension extension=cert.getTBSCertificate().getExtensions().getExtension(oid);  if (extension == null) {    throw new NullPointerException("extension " + oid + " not present");  }  extGenerator.addExtension(oid,isCritical,extension.getExtnValue().getOctets());  return this;}  }
class C{  public static boolean less(TMember left,TMember right){  return less(left.getMemberAccessModifier(),right.getMemberAccessModifier());}  }
class C{  public void testFloatValueNegativeInfinity2(){  byte[] a={0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};  int aSign=-1;  float aNumber=new BigInteger(aSign,a).floatValue();  assertTrue(aNumber == Float.NEGATIVE_INFINITY);}  }
class C{  private byte[] unpadOAEP(byte[] padded) throws BadPaddingException {  byte[] EM=padded;  boolean bp=false;  int hLen=lHash.length;  if (EM[0] != 0) {    bp=true;  }  int seedStart=1;  int seedLen=hLen;  int dbStart=hLen + 1;  int dbLen=EM.length - dbStart;  mgf1(EM,dbStart,dbLen,EM,seedStart,seedLen);  mgf1(EM,seedStart,seedLen,EM,dbStart,dbLen);  for (int i=0; i < hLen; i++) {    if (lHash[i] != EM[dbStart + i]) {      bp=true;    }  }  int padStart=dbStart + hLen;  int onePos=-1;  for (int i=padStart; i < EM.length; i++) {    int value=EM[i];    if (onePos == -1) {      if (value == 0x00) {      } else       if (value == 0x01) {        onePos=i;      } else {        bp=true;      }    }  }  if (onePos == -1) {    bp=true;    onePos=EM.length - 1;  }  int mStart=onePos + 1;  byte[] tmp=new byte[mStart - padStart];  System.arraycopy(EM,padStart,tmp,0,tmp.length);  byte[] m=new byte[EM.length - mStart];  System.arraycopy(EM,mStart,m,0,m.length);  BadPaddingException bpe=new BadPaddingException("Decryption error");  if (bp) {    throw bpe;  } else {    return m;  }}  }
class C{  static int dp2px(Context context,float dp){  float px=TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,context.getResources().getDisplayMetrics());  return Math.round(px);}  }
class C{  private final boolean parkAndCheckInterrupt(){  LockSupport.park(this);  return Thread.interrupted();}  }
class C{  private void sendCommittedText(){  AttributedString as=new AttributedString(buffer.toString());  context.dispatchInputMethodEvent(InputMethodEvent.INPUT_METHOD_TEXT_CHANGED,as.getIterator(),buffer.length(),TextHitInfo.leading(insertionPoint),null);  buffer.setLength(0);  insertionPoint=0;  format=UNSET;}  }
class C{  public static void CheckForDuplicateMacros(Vector macros) throws ParseAlgorithmException {  int i=0;  while (i < macros.size()) {    String namei=((AST.Macro)macros.elementAt(i)).name;    int j=i + 1;    while (j < macros.size()) {      if (namei.equals(((AST.Macro)macros.elementAt(j)).name)) {        throw new ParseAlgorithmException("Multiple definitions of macro name `" + namei + "'");      }      j=j + 1;    }    i=i + 1;  }}  }
class C{  public SpaceHorizontalAction(final NetworkPanel networkPanel){  super(networkPanel,"Space Horizontal",EnablingCondition.NEURONS);  putValue(SMALL_ICON,ResourceManager.getImageIcon("SpaceHorizontal.png"));  putValue(SHORT_DESCRIPTION,"Space selected neurons horizontally");}  }
class C{  public static void create(DataSource ds,SQLDialect dialect,String... tables){  DSLContext dsl=DSL.using(ds,dialect);  dsl.dropTableIfExists(USERS).execute();  dsl.createTable(USERS).column(UIDX,UIDX.getDataType().nullable(false)).column(USER_ID,USER_ID.getDataType().nullable(false)).execute();  dsl.alterTable(USERS).add(constraint("PK_USERS").primaryKey(UIDX)).execute();  dsl.dropSequenceIfExists(SEQ_UIDX).execute();  dsl.createSequence(SEQ_UIDX).execute();  dsl.dropTableIfExists(ITEMS).execute();  dsl.createTable(ITEMS).column(IIDX,IIDX.getDataType().nullable(false)).column(ITEM_ID,ITEM_ID.getDataType().nullable(false)).execute();  dsl.alterTable(ITEMS).add(constraint("PK_ITEMS").primaryKey(IIDX)).execute();  dsl.dropSequenceIfExists(SEQ_IIDX).execute();  dsl.createSequence(SEQ_IIDX).execute();  for (  String table : tables) {    Table<Record> DATA=DSL.table(name(table.toUpperCase()));    dsl.dropTableIfExists(DATA).execute();    dsl.createTable(DATA).column(UIDX,UIDX.getDataType().nullable(false)).column(IIDX,IIDX.getDataType().nullable(false)).column(V,V.getDataType().nullable(false)).execute();    dsl.alterTable(DATA).add(constraint("PK_" + table).primaryKey(UIDX,IIDX)).execute();    dsl.alterTable(DATA).add(constraint("FK_" + table + "_uidx").foreignKey(UIDX).references(USERS,UIDX).onDeleteCascade()).execute();    dsl.alterTable(DATA).add(constraint("FK_" + table + "_iidx").foreignKey(IIDX).references(ITEMS,IIDX).onDeleteCascade()).execute();  }}  }
class C{  public static Calendar toCalendar(String datestring){  return parseGetCal(datestring,new SimpleDateFormat());}  }
class C{  private void append(StringBuilder result,String value,int[] index,String placeholder,MaskCharacter[] mask) throws ParseException {  for (int counter=0, maxCounter=mask.length; counter < maxCounter; counter++) {    mask[counter].append(result,value,index,placeholder);  }}  }
class C{  public static _Fields findByThriftIdOrThrow(int fieldId){  _Fields fields=findByThriftId(fieldId);  if (fields == null)   throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");  return fields;}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static String validateString(String string){  if (string == null) {    return "";  } else {    return string;  }}  }
class C{  public SVGDescriptor toSVG(GraphicContext gc){  return toSVG(gc.getComposite());}  }
class C{  public static OrganizationAlreadyExistsException convertToApi(org.oscm.internal.types.exception.OrganizationAlreadyExistsException oldEx){  return convertExceptionToApi(oldEx,OrganizationAlreadyExistsException.class);}  }
class C{  @Override public String toString(){  return "ResultProcessStartedResponse{" + "transactionId=" + transactionId + ", signature="+ signature+ "} "+ super.toString();}  }
class C{  public void destination(Object destination){  this.destination=Objects.requireNonNull(destination);}  }
class C{  public static boolean isHdrOn(SettingsManager settingsManager){  return settingsManager.getBoolean(SettingsManager.SCOPE_GLOBAL,KEY_CAMERA_HDR);}  }
class C{  public static List<String> enumConstantsOf(Column column){  return Stream.of(column.getEnumConstants().orElseThrow(null).split(",")).collect(toList());}  }
class C{  @Override public boolean equals(Object obj){  if (this == obj)   return true;  if (obj == null)   return false;  if (!(obj instanceof ConversationContext))   return false;  ConversationContext other=(ConversationContext)obj;  if (forMatching != other.forMatching)   return false;  if (ignoreIgnorable != other.ignoreIgnorable)   return false;  if (mergeExpressions != other.mergeExpressions)   return false;  if (state != other.state)   return false;  return true;}  }
class C{  @Override public void merge(Result<Map<ByteArrayWrapper,MeasureAggregator[]>,MeasureAggregator> result){  ByteArrayWrapper key;  MeasureAggregator[] value;  Map<ByteArrayWrapper,MeasureAggregator[]> otherResult=result.getResult();  if (otherResult != null) {    while (resultIterator.hasNext()) {      Entry<ByteArrayWrapper,MeasureAggregator[]> entry=resultIterator.next();      key=entry.getKey();      value=entry.getValue();      MeasureAggregator[] agg=otherResult.get(key);      if (agg != null) {        for (int j=0; j < agg.length; j++) {          agg[j].merge(value[j]);        }      } else {        otherResult.put(key,value);      }    }    resulSize=otherResult.size();    this.resultIterator=otherResult.entrySet().iterator();    this.scannerResult=otherResult;  }}  }
class C{  private int[] toIntArray(String input){  int[] result={};  if (input.length() > 0) {    String beforeSplit=input.replaceAll("\\[|\\]|\\s","");    String[] split=beforeSplit.split("\\,");    result=new int[split.length];    for (int i=0; i < split.length; i++) {      result[i]=Integer.parseInt(split[i]);    }  }  return result;}  }
class C{  public static DelimiterType serializableInstance(){  return DelimiterType.TAB;}  }
class C{  public static ColumnName parse(String defaultSchema,String s){  String[] parts=Strings.parseQualifiedName(s,3);  return new ColumnName(parts[0].isEmpty() ? defaultSchema : parts[0],parts[1],parts[2]);}  }
class C{  @NotNull @ObjectiveCName("doSignupWithName:withSex:withTransaction:") public Promise<AuthRes> doSignup(String name,Sex sex,String transactionHash){  return modules.getAuthModule().doSignup(name,sex,transactionHash);}  }
class C{  public WriteException(WriteRequest request){  super();  this.requests=asRequestList(request);}  }
class C{  public GenericObjectEditorDialog(Frame owner,String title){  super(owner,title);}  }
class C{  public RgbFilterEditor(){  panel.setLayout(layout);  panel.setBorder(new CompoundBorder(new TitledBorder("RGB Filter Editor"),new EmptyBorder(BORDER_SPACING,BORDER_SPACING,BORDER_SPACING,BORDER_SPACING)));  JLabel redLabel=new JLabel("Red");  JLabel greenLabel=new JLabel("Green");  JLabel blueLabel=new JLabel("Blue");  JLabel lowerLabel=new JLabel("Output Lower Bound");  JLabel upperLabel=new JLabel("Output Upper Bound");  add(redLabel,red);  add(greenLabel,green);  add(blueLabel,blue);  add(lowerLabel,lower);  add(upperLabel,upper);}  }
class C{  public static int UTF8toUTF16(byte[] utf8,int offset,int length,char[] out){  int out_offset=0;  final int limit=offset + length;  while (offset < limit) {    int b=utf8[offset++] & 0xff;    if (b < 0xc0) {      assert b < 0x80;      out[out_offset++]=(char)b;    } else     if (b < 0xe0) {      out[out_offset++]=(char)(((b & 0x1f) << 6) + (utf8[offset++] & 0x3f));    } else     if (b < 0xf0) {      out[out_offset++]=(char)(((b & 0xf) << 12) + ((utf8[offset] & 0x3f) << 6) + (utf8[offset + 1] & 0x3f));      offset+=2;    } else {      assert b < 0xf8 : "b = 0x" + Integer.toHexString(b);      int ch=((b & 0x7) << 18) + ((utf8[offset] & 0x3f) << 12) + ((utf8[offset + 1] & 0x3f) << 6)+ (utf8[offset + 2] & 0x3f);      offset+=3;      if (ch < UNI_MAX_BMP) {        out[out_offset++]=(char)ch;      } else {        int chHalf=ch - 0x0010000;        out[out_offset++]=(char)((chHalf >> 10) + 0xD800);        out[out_offset++]=(char)((chHalf & HALF_MASK) + 0xDC00);      }    }  }  return out_offset;}  }
class C{  public XPathExtractor registerNamespace(String prefix,String url){  this.namespaces.add(Namespace.getNamespace(prefix,url));  return this;}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case GamlPackage.TYPE_INFO__FIRST:    return getFirst();case GamlPackage.TYPE_INFO__SECOND:  return getSecond();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter,java.lang.String namespace) throws javax.xml.stream.XMLStreamException {  java.lang.String prefix=xmlWriter.getPrefix(namespace);  if (prefix == null) {    prefix=generatePrefix(namespace);    while (xmlWriter.getNamespaceContext().getNamespaceURI(prefix) != null) {      prefix=org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();    }    xmlWriter.writeNamespace(prefix,namespace);    xmlWriter.setPrefix(prefix,namespace);  }  return prefix;}  }
class C{  private void waitForTopicAssignmentsToComplete() throws InterruptException {  while (!_zkUtils.getPartitionsBeingReassigned().isEmpty()) {    try {      LOG.debug("Waiting for current partition assignment to be complete.");      Thread.sleep(1000);    } catch (    InterruptedException e) {      throw new IllegalStateException(e);    }  }}  }
class C{  @POST @Consumes({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Produces({MediaType.APPLICATION_XML,MediaType.APPLICATION_JSON}) @Path("/{id}/quota-directories") @CheckPermission(roles={Role.TENANT_ADMIN},acls={ACL.OWN,ACL.ALL}) public TaskResourceRep createQuotaDirectory(@PathParam("id") URI id,QuotaDirectoryCreateParam param) throws InternalException {  _log.info("FileService::createQtree Request recieved {}",id);  String origQtreeName=param.getQuotaDirName();  ArgValidator.checkQuotaDirName(origQtreeName,"name");  ArgValidator.checkFieldMaximum(param.getSoftLimit(),100,"softLimit");  ArgValidator.checkFieldMaximum(param.getNotificationLimit(),100,"notificationLimit");  if (param.getSoftLimit() != 0L) {    ArgValidator.checkFieldMinimum(param.getSoftGrace(),1L,"softGrace");  }  checkForDuplicateName(origQtreeName,QuotaDirectory.class,id,"parent",_dbClient);  String task=UUID.randomUUID().toString();  ArgValidator.checkFieldUriType(id,FileShare.class,"id");  if (param.getSecurityStyle() != null) {    ArgValidator.checkFieldValueFromEnum(param.getSecurityStyle(),"security_style",EnumSet.allOf(QuotaDirectory.SecurityStyles.class));  }  FileShare fs=queryResource(id);  ArgValidator.checkEntity(fs,id,isIdEmbeddedInURL(id));  QuotaDirectory quotaDirectory=new QuotaDirectory();  quotaDirectory.setId(URIUtil.createId(QuotaDirectory.class));  quotaDirectory.setParent(new NamedURI(id,origQtreeName));  quotaDirectory.setLabel(origQtreeName);  quotaDirectory.setOpStatus(new OpStatusMap());  quotaDirectory.setProject(new NamedURI(fs.getProject().getURI(),origQtreeName));  quotaDirectory.setTenant(new NamedURI(fs.getTenant().getURI(),origQtreeName));  quotaDirectory.setSoftLimit(param.getSoftLimit() != 0 ? param.getSoftLimit() : fs.getSoftLimit() != null ? fs.getSoftLimit().intValue() : 0);  quotaDirectory.setSoftGrace(param.getSoftGrace() != 0 ? param.getSoftGrace() : fs.getSoftGracePeriod() != null ? fs.getSoftGracePeriod() : 0);  quotaDirectory.setNotificationLimit(param.getNotificationLimit() != 0 ? param.getNotificationLimit() : fs.getNotificationLimit() != null ? fs.getNotificationLimit().intValue() : 0);  String convertedName=origQtreeName.replaceAll("[^\\dA-Za-z_]","");  _log.info("FileService::QuotaDirectory Original name {} and converted name {}",origQtreeName,convertedName);  quotaDirectory.setName(convertedName);  if (param.getOpLock() != null) {    quotaDirectory.setOpLock(param.getOpLock());  } else {    quotaDirectory.setOpLock(true);  }  if (param.getSecurityStyle() != null) {    quotaDirectory.setSecurityStyle(param.getSecurityStyle());  } else {    quotaDirectory.setSecurityStyle(SecurityStyles.parent.toString());  }  if (param.getSize() != null) {    Long quotaSize=SizeUtil.translateSize(param.getSize());    ArgValidator.checkFieldMaximum(quotaSize,fs.getCapacity(),SizeUtil.SIZE_B,"size",true);    quotaDirectory.setSize(quotaSize);  } else {    quotaDirectory.setSize((long)0);  }  fs.setOpStatus(new OpStatusMap());  Operation op=new Operation();  op.setResourceType(ResourceOperationTypeEnum.CREATE_FILE_SYSTEM_QUOTA_DIR);  quotaDirectory.getOpStatus().createTaskStatus(task,op);  fs.getOpStatus().createTaskStatus(task,op);  _dbClient.createObject(quotaDirectory);  _dbClient.persistObject(fs);  FileShareQuotaDirectory qt=new FileShareQuotaDirectory(quotaDirectory);  StorageSystem device=_dbClient.queryObject(StorageSystem.class,fs.getStorageDevice());  FileController controller=getController(FileController.class,device.getSystemType());  try {    controller.createQuotaDirectory(device.getId(),qt,fs.getId(),task);  } catch (  InternalException e) {    quotaDirectory.setInactive(true);    _dbClient.persistObject(quotaDirectory);    throw e;  }  auditOp(OperationTypeEnum.CREATE_FILE_SYSTEM_QUOTA_DIR,true,AuditLogManager.AUDITOP_BEGIN,quotaDirectory.getLabel(),quotaDirectory.getId().toString(),fs.getId().toString());  fs=_dbClient.queryObject(FileShare.class,id);  _log.debug("FileService::QuotaDirectory Before sending response, FS ID : {}, Taks : {} ; Status {}",fs.getOpStatus().get(task),fs.getOpStatus().get(task).getStatus());  return toTask(quotaDirectory,task,op);}  }
class C{  public static void copyProperties(Properties from,Properties to){  Enumeration<Object> keys=from.keys();  while (keys.hasMoreElements()) {    String key=(String)keys.nextElement();    to.put(key,from.getProperty(key));  }}  }
class C{  private int digitCount(String text,int position,int amount){  int limit=Math.min(text.length() - position,amount);  amount=0;  for (; limit > 0; limit--) {    char c=text.charAt(position + amount);    if (c < '0' || c > '9') {      break;    }    amount++;  }  return amount;}  }
class C{  public void postActionNotification(NotificationOptions options){  NotificationCompat.Builder builder=new NotificationCompat.Builder(this);  builder.setSmallIcon(options.getSmallIconResourceId());  builder.setContentTitle(options.getTitle());  builder.setContentText(options.getContent());  builder.setDefaults(options.getNotificationDefaults());  builder.setPriority(options.getNotificationPriority());  builder.setVibrate(options.getVibratePattern());  if (options.getActions() != null) {    for (    NotificationCompat.Action action : options.getActions()) {      builder.addAction(action);    }  }  NotificationManagerCompat notificationManager=NotificationManagerCompat.from(this);  notificationManager.notify(options.getNotificationId(),builder.build());}  }
class C{  public CPFCNPJTextWatcher(EventoDeValidacao callbackErros){  setEventoDeValidacao(callbackErros);}  }
class C{  AgentRoster(Connection connection,String workgroupJID){  this.connection=connection;  this.workgroupJID=workgroupJID;  entries=new ArrayList<String>();  listeners=new ArrayList<AgentRosterListener>();  presenceMap=new HashMap<String,Map<String,Presence>>();  PacketFilter rosterFilter=new PacketTypeFilter(AgentStatusRequest.class);  connection.addPacketListener(new AgentStatusListener(),rosterFilter);  connection.addPacketListener(new PresencePacketListener(),new PacketTypeFilter(Presence.class));  AgentStatusRequest request=new AgentStatusRequest();  request.setTo(workgroupJID);  connection.sendPacket(request);}  }
class C{  private String columnInfoMySQL(ArrayList<Column> columns){  if (columns != null && columns.size() > 0) {    StringBuffer sb=new StringBuffer();    if (checkColumnNames || checkColumnTypes) {      for (int i=0; i < columns.size(); i++) {        if (i > 0)         sb.append(',');        if (checkColumnNames)         sb.append(columns.get(i).getName());        if (checkColumnNames && checkColumnTypes)         sb.append(" ");        if (checkColumnTypes)         sb.append(columns.get(i).getType());      }    }    return sb.toString();  } else {    return null;  }}  }
class C{  public void fireMapViewEvent(MapViewEvent e){  for (  MapViewEventListener listener : eventListeners)   listener.eventHappened(e);}  }
class C{  @Override public void configureZone(final StendhalRPZone zone,final Map<String,String> attributes){  buildentwife(zone);}  }
class C{  private void processSpecies(final RoundEnvironment env){  final List<? extends Element> species=sortElements(env,species.class);  for (  final Element e : species) {    final species spec=e.getAnnotation(species.class);    final StringBuilder sb=new StringBuilder();    sb.append(SPECIES_PREFIX);    sb.append(spec.name()).append(SEP);    sb.append(rawNameOf(e));    for (    final String s : spec.skills()) {      sb.append(SEP).append(s);    }    final doc[] docs=spec.doc();    doc doc;    if (docs.length == 0) {      doc=e.getAnnotation(doc.class);    } else {      doc=docs[0];    }    if (doc == null) {      emitWarning("GAML: species '" + spec.name() + "' is not documented",e);    }    gp.put(sb.toString(),"");  }}  }
class C{  private static long xlongBinomial(long n,long k){  return Math.round(binomial(n,k));}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_characterdatadeletedataexceedslength.class,args);}  }
class C{  public void paintComponent(Graphics graphics){  int x;  int y;  measure();  Dimension d=this.getSize();  y=lineAscent + (d.height - (numLines * lineHeight)) / 2;  Toolkit tk=Toolkit.getDefaultToolkit();  Map desktopHints=(Map)(tk.getDesktopProperty("awt.font.desktophints"));  Graphics2D g2d=(Graphics2D)graphics;  if (desktopHints != null) {    g2d.addRenderingHints(desktopHints);  }  for (int i=0; i < numLines; i++) {    y+=lineHeight;switch (alignment) {case LEFT:      x=marginWidth;    break;case CENTER:  x=(d.width - lineWidth[i]) / 2;break;case RIGHT:x=d.width - marginWidth - lineWidth[i];break;default :x=(d.width - lineWidth[i]) / 2;}graphics.drawString(line.elementAt(i),x,y - lineDescent);}}  }
class C{  public static void performAndWaitForWindowChange(SWTBot bot,Runnable runnable){  SWTBotShell shell=bot.activeShell();  runnable.run();  waitUntilShellIsNotActive(bot,shell);}  }
class C{  public boolean isDefaultNamespaceDefined(){  return this.defaultNamespace != null;}  }
class C{  public void removeLayoutComponent(Component comp){  invalidateLayout(comp.getParent());}  }
class C{  public boolean offer(E e,long timeout,TimeUnit unit) throws InterruptedException {  if (e == null)   throw new NullPointerException();  long nanos=unit.toNanos(timeout);  int c=-1;  final ReentrantLock putLock=this.putLock;  final AtomicInteger count=this.count;  putLock.lockInterruptibly();  try {    while (count.get() >= capacity) {      if (nanos <= 0)       return false;      nanos=notFull.awaitNanos(nanos);    }    enqueue(e);    c=count.getAndIncrement();    if (c + 1 < capacity)     notFull.signal();  }  finally {    putLock.unlock();  }  if (c == 0)   signalNotEmpty();  return true;}  }
class C{  protected void parseFontFaceRule(){  try {    documentHandler.startFontFace();    if (current != LexicalUnits.LEFT_CURLY_BRACE) {      reportError("left.curly.brace");    } else {      nextIgnoreSpaces();      try {        parseStyleDeclaration(true);      } catch (      CSSParseException e) {        reportError(e);      }    }  }  finally {    documentHandler.endFontFace();  }}  }
class C{  private Optional<String> processResponse(long start,int maxRecords,BatchMaker batchMaker) throws StageException {  Optional<String> newSourceOffset=Optional.absent();  int status=response.getStatus();  if (status < 200 || status >= 300) {    lastRequestCompletedTime=System.currentTimeMillis();    String reason=response.getStatusInfo().getReasonPhrase();    String respString=response.readEntity(String.class);    response.close();    response=null;    errorRecordHandler.onError(Errors.HTTP_01,status,reason + " : " + respString);    return newSourceOffset;  }  if (conf.pagination.mode == PaginationMode.LINK_HEADER) {    next=response.getLink("next");    if (next == null) {      haveMorePages=false;    }  }  if (response.hasEntity()) {    newSourceOffset=Optional.of(parseResponse(start,maxRecords,batchMaker));  }  return newSourceOffset;}  }
class C{  private CachedCRL findCrlInDB(String key) throws SQLException {  Connection c=null;  PreparedStatement s=null;  ResultSet rs=null;  try {    c=getDataSource().getConnection();    s=c.prepareStatement(sqlFindQuery);    s.setString(1,key);    rs=s.executeQuery();    if (rs.next()) {      CachedCRL cached=new CachedCRL();      cached.setKey(rs.getString(sqlFindQueryId));      cached.setCrl(rs.getBytes(sqlFindQueryData));      return cached;    }  }  finally {    closeQuietly(c,s,rs);  }  return null;}  }
class C{  public void paint(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).paint(a,b);  }}  }
class C{  public void start(){  if (runner == null) {    runner=new Thread(this,"Runner");    runner.start();  }}  }
class C{  private static boolean relationExists(Organization customer,Organization supplier){  boolean result=false;  List<OrganizationReference> supplierOrgReferences=customer.getSourcesForType(OrganizationReferenceType.getOrgRefTypeForSourceRoles(supplier.getGrantedRoleTypes()));  for (  OrganizationReference orgRef : supplierOrgReferences) {    if (orgRef.getSource() == supplier) {      result=true;      break;    }  }  return result;}  }
class C{  public boolean isOracle(){  return false;}  }
class C{  public static String toString(URL url) throws IOException {  return toString(url,null);}  }
class C{  public void addPart(String name,String hashMethod,byte[] data){  parts.add(new MessagePart(name,hashMethod,data));}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @RequestMapping(value="/application/{applicationName}/rows/{nbRows}",method=RequestMethod.GET) public @ResponseBody List<Message> listMessagesForApplication(@PathVariable final String applicationName,@PathVariable final Integer nbRows) throws ServiceException, CheckException {  if (logger.isDebugEnabled()) {    logger.debug("--CALL LIST APPLICATION ACTIONS--");    logger.debug("applicationName = " + applicationName);    logger.debug("nbRows = " + nbRows);  }  User user=authentificationUtils.getAuthentificatedUser();  String applicationNameLocal=applicationName.replaceAll("[^a-z]","");  return messageService.listByApp(user,applicationNameLocal,nbRows);}  }
class C{  private void validateCertPath(CertPath certPath,Collection<Object> crlCollection,CertStore certStore,AlternativeOCSP altOCSP) throws CertificateRevocationCheckException, IdmCertificateRevokedException {  setupOCSPOptions(certPath,altOCSP);  PKIXParameters params=createPKIXParameters(crlCollection);  if (null != certStore) {    params.addCertStore(certStore);  }  CertPathValidator certPathValidator;  try {    certPathValidator=CertPathValidator.getInstance("PKIX");  } catch (  NoSuchAlgorithmException e) {    throw new CertificateRevocationCheckException("Error getting PKIX validator instance:" + e.getMessage(),e);  }  try {    String pkiParam=params.toString();    logger.trace("**Certificate Path Validation Parameters trust anchors **\n" + params.getTrustAnchors().toString() + "\n");    logger.trace("**Certificate Path Validation Parameters **\n" + pkiParam + "\n");    CertPathValidatorResult result=certPathValidator.validate(certPath,params);    logger.trace("**Certificate Path Validation Result **\n" + result.toString() + "\n");  } catch (  CertPathValidatorException e) {    if (e.getReason() == CertPathValidatorException.BasicReason.REVOKED) {      throw new IdmCertificateRevokedException("CRL shows certificate status as revoked");    } else     if (e.getReason() == CertPathValidatorException.BasicReason.UNDETERMINED_REVOCATION_STATUS) {      throw new CertRevocationStatusUnknownException("CRL checking could not determine certificate status.");    }    throw new CertificateRevocationCheckException("Certificate path validation failed:" + e.getMessage(),e);  }catch (  InvalidAlgorithmParameterException e) {    throw new CertificateRevocationCheckException("Certificate validation parameters invalid, could not validate certificate path:" + e.getMessage(),e);  }}  }
class C{  private List<OBlock> makeRange(){  if (log.isDebugEnabled()) {    log.debug("Make range for \"" + _trainName + "\"");  }  _headRange=new ArrayList<OBlock>();  _tailRange=new ArrayList<OBlock>();  _lostRange=new ArrayList<OBlock>();  OBlock headBlock=getHeadBlock();  OBlock tailBlock=getTailBlock();  if (_headPortal == null) {    List<Portal> list=headBlock.getPortals();    Iterator<Portal> iter=list.iterator();    while (iter.hasNext()) {      OBlock b=iter.next().getOpposingBlock(headBlock);      addtoHeadRange(b);    }  } else {    List<OPath> pathList=_headPortal.getPathsWithinBlock(headBlock);    Iterator<OPath> iter=pathList.iterator();    while (iter.hasNext()) {      OPath path=iter.next();      Portal p=path.getToPortal();      OBlock b=null;      if (p != null && !_headPortal.equals(p)) {        b=p.getOpposingBlock(headBlock);      } else {        p=path.getFromPortal();        if (p != null && !_headPortal.equals(p)) {          b=p.getOpposingBlock(headBlock);        }      }      addtoHeadRange(b);    }    pathList=_tailPortal.getPathsWithinBlock(tailBlock);    iter=pathList.iterator();    while (iter.hasNext()) {      OPath path=iter.next();      Portal p=path.getToPortal();      OBlock b=null;      if (p != null && !_tailPortal.equals(p)) {        b=p.getOpposingBlock(tailBlock);      } else {        p=path.getFromPortal();        if (p != null && !_tailPortal.equals(p)) {          b=p.getOpposingBlock(tailBlock);        }      }      addtoTailRange(b);    }  }  _time=System.currentTimeMillis();  if (log.isDebugEnabled()) {    log.debug("   _headRange.size()= " + _headRange.size());    log.debug("   _tailRange.size()= " + _tailRange.size());    log.debug("   _lostRange.size()= " + _lostRange.size());    log.debug("   _occupies.size()= " + _occupies.size());  }  return getRange();}  }
class C{  public void testNewCharsetsConfiguration() throws Exception {  Properties props=new Properties();  props.setProperty("useUnicode","true");  props.setProperty("characterEncoding","EUC_KR");  getConnectionWithProps(props).close();  props=new Properties();  props.setProperty("useUnicode","true");  props.setProperty("characterEncoding","KOI8_R");  getConnectionWithProps(props).close();}  }
class C{  public Boolean isActive(){  return active;}  }
class C{  public static void send(InternalDistributedMember recipient,int processorId,DM dm,ReplyException re,boolean moved){  Assert.assertTrue(recipient != null,"MoveBucketReplyMessage NULL recipient");  MoveBucketReplyMessage m=new MoveBucketReplyMessage(processorId,re,moved);  m.setRecipient(recipient);  dm.putOutgoing(m);}  }
class C{  private void dispatchDefaultCallbackStoredResults(){  if (defaultCallbackStoredResults.size() == 0 || jsDefaultCallback == null) {    return;  }  for (  PluginResult result : defaultCallbackStoredResults) {    sendMessageToDefaultCallback(result);  }  defaultCallbackStoredResults.clear();}  }
class C{  public ResultVariables executeScript() throws DMLException {  for (  Entry<String,Data> e : _inVarReuse.entrySet())   _vars.put(e.getKey(),e.getValue());  ExecutionContext ec=ExecutionContextFactory.createContext(_prog);  ec.setVariables(_vars);  _prog.execute(ec);  Collection<String> tmpVars=new ArrayList<String>(_vars.keySet());  for (  String var : tmpVars)   if (!_outVarnames.contains(var))   _vars.remove(var);  ResultVariables rvars=new ResultVariables();  for (  String ovar : _outVarnames)   if (_vars.keySet().contains(ovar))   rvars.addResult(ovar,_vars.get(ovar));  return rvars;}  }
class C{  public void enableRowScaling(boolean enable){  mRowScaleEnabled=enable;  if (mRowsFragment != null) {    mRowsFragment.enableRowScaling(mRowScaleEnabled);  }}  }
class C{  protected static QueryPlan build(QueryGraph queryGraph,EventType[] typesPerStream,HistoricalViewableDesc historicalViewableDesc,DependencyGraph dependencyGraph,HistoricalStreamIndexList[] historicalStreamIndexLists,boolean hasForceNestedIter,String[][][] indexedStreamsUniqueProps,TableMetadata[] tablesPerStream){  if (log.isDebugEnabled()) {    log.debug(".build queryGraph=" + queryGraph);  }  int numStreams=queryGraph.getNumStreams();  QueryPlanIndex[] indexSpecs=QueryPlanIndexBuilder.buildIndexSpec(queryGraph,typesPerStream,indexedStreamsUniqueProps);  if (log.isDebugEnabled()) {    log.debug(".build Index build completed, indexes=" + QueryPlanIndex.print(indexSpecs));  }  if (historicalViewableDesc.isHasHistorical()) {    for (int i=0; i < historicalViewableDesc.getHistorical().length; i++) {      if (historicalViewableDesc.getHistorical()[i]) {        indexSpecs[i]=null;      }    }  }  QueryPlanNode[] planNodeSpecs=new QueryPlanNode[numStreams];  int worstDepth=Integer.MAX_VALUE;  for (int streamNo=0; streamNo < numStreams; streamNo++) {    if ((historicalViewableDesc.getHistorical()[streamNo]) && (dependencyGraph.hasDependency(streamNo))) {      planNodeSpecs[streamNo]=new QueryPlanNodeNoOp();      continue;    }    BestChainResult bestChainResult=computeBestPath(streamNo,queryGraph,dependencyGraph);    int[] bestChain=bestChainResult.getChain();    if (log.isDebugEnabled()) {      log.debug(".build For stream " + streamNo + " bestChain="+ Arrays.toString(bestChain));    }    if (bestChainResult.depth < worstDepth) {      worstDepth=bestChainResult.depth;    }    planNodeSpecs[streamNo]=createStreamPlan(streamNo,bestChain,queryGraph,indexSpecs,typesPerStream,historicalViewableDesc.getHistorical(),historicalStreamIndexLists,tablesPerStream);    if (log.isDebugEnabled()) {      log.debug(".build spec=" + planNodeSpecs[streamNo]);    }  }  if ((worstDepth < numStreams - 1) && (!hasForceNestedIter)) {    return null;  }  return new QueryPlan(indexSpecs,planNodeSpecs);}  }
class C{  public void cleanInprogressJobMap(){  taskManager.cleanInprogressJobMap();}  }
class C{  public void keybindingHelp(){  insertAtCursor(buildKeybindingInfo());}  }
class C{  protected void bootstrap(){  if (isBgBoot)   moveTaskToBack(true);  if (!handleStartUp())   return;  handleWaitForAdBlock();  if (isUpdateCheckAllowed() && (!alreadyCheckedUpdate))   checkUpdate.start();  if (getBrowserStorage().isAdBlockEnabled())   AdBlockManager.initAdBlock();  if (!isBgBoot)   fastReloadComponents();}  }
class C{  public static boolean equal(File file1,File file2) throws IOException {  checkNotNull(file1);  checkNotNull(file2);  if (file1 == file2 || file1.equals(file2)) {    return true;  }  long len1=file1.length();  long len2=file2.length();  if (len1 != 0 && len2 != 0 && len1 != len2) {    return false;  }  return asByteSource(file1).contentEquals(asByteSource(file2));}  }
class C{  public final void testGetEncoded01() throws IOException {  byte[] encoding=getDerEncoding();  PolicyQualifierInfo i=new PolicyQualifierInfo(encoding);  byte[] encodingRet=i.getEncoded();  assertTrue(Arrays.equals(encoding,encodingRet));}  }
class C{  private void addNeuronGroup(NeuronGroup neuronGroup){  List<NeuronNode> neuronNodes=new ArrayList<NeuronNode>();  for (  Neuron neuron : neuronGroup.getNeuronList()) {    addNeuron(neuron);    neuronNodes.add((NeuronNode)objectNodeMap.get(neuron));  }  NeuronGroupNode neuronGroupNode=createNeuronGroupNode(neuronGroup);  for (  NeuronNode node : neuronNodes) {    neuronGroupNode.addNeuronNode(node);  }  canvas.getLayer().addChild(neuronGroupNode);  objectNodeMap.put(neuronGroup,neuronGroupNode);}  }
class C{  public static void swapRow(Matrix A,int j,int k){  swapCol(A,j,k,0,A.cols());}  }
class C{  public void addCheckBoxListener(ChangeListener listener){  listenerList.add(ChangeListener.class,listener);}  }
class C{  ChannelQueue(final String name) throws IllegalArgumentException {  super(name);  this.subChannels=Collections.synchronizedList(new LinkedList<Channel>());  new Thread(new RoundRobin(),"" + name + " - Round-Robin Thread").start();}  }
class C{  public void addRosterEntry(RemoteRosterEntry remoteRosterEntry){synchronized (remoteRosterEntries) {    remoteRosterEntries.add(remoteRosterEntry);  }}  }
class C{  private String booleanToString(Boolean input){  if (input == null) {    return null;  } else {    return input.toString();  }}  }
class C{  public static Location create(LocationPK locationId){  return new Location(locationId);}  }
class C{  public static IMultiPoint[] randomPoints(int n,int d,int scale){  IMultiPoint points[]=new IMultiPoint[n];  for (int i=0; i < n; i++) {    StringBuilder sb=new StringBuilder();    for (int j=0; j < d; j++) {      sb.append(rGen.nextDouble() * scale);      if (j < d - 1) {        sb.append(",");      }    }    points[i]=new Hyperpoint(sb.toString());  }  return points;}  }
class C{  protected final void firePropertyChange(String propertyName,double oldValue,double newValue){  firePropertyChange(propertyName,Double.valueOf(oldValue),Double.valueOf(newValue));}  }
class C{  public synchronized PooledConnection findReplacementTarget(ServerLocation currentServer){  final long now=System.nanoTime();  for (Iterator it=this.allConnections.iterator(); it.hasNext(); ) {    PooledConnection pc=(PooledConnection)it.next();    if (currentServer.equals(pc.getServer())) {      if (!pc.shouldDestroy() && pc.remainingLife(now,lifetimeTimeoutNanos) <= 0) {        removeFromEndpointMap(pc);        return pc;      }    }  }  return null;}  }
class C{  public boolean isRevocationEnabled(){  return revocationEnabled;}  }
class C{  void revisitNode(final Node n,final AStarNodeData data,final RouterPriorityQueue<Node> pendingNodes,final double time,final double cost,final double expectedRemainingCost,final Link outLink){  pendingNodes.remove(n);  data.visit(outLink,cost,time,getIterationId());  data.setExpectedRemainingCost(expectedRemainingCost);  pendingNodes.add(n,getPriority(data));}  }
class C{  @DSSource({DSSourceKind.SENSITIVE_UNCATEGORIZED}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:55:20.563 -0500",hash_original_method="923CC6809D53E2778E41D61552555A7F",hash_generated_method="E511BCC1AF273F27C4175DD9CE608F04") protected MessageProcessor createMessageProcessor(InetAddress ipAddress,int port,String transport) throws java.io.IOException {  if (transport.equalsIgnoreCase("udp")) {    UDPMessageProcessor udpMessageProcessor=new UDPMessageProcessor(ipAddress,this,port);    this.addMessageProcessor(udpMessageProcessor);    this.udpFlag=true;    return udpMessageProcessor;  } else   if (transport.equalsIgnoreCase("tcp")) {    TCPMessageProcessor tcpMessageProcessor=new TCPMessageProcessor(ipAddress,this,port);    this.addMessageProcessor(tcpMessageProcessor);    return tcpMessageProcessor;  } else   if (transport.equalsIgnoreCase("tls")) {    TLSMessageProcessor tlsMessageProcessor=new TLSMessageProcessor(ipAddress,this,port);    this.addMessageProcessor(tlsMessageProcessor);    return tlsMessageProcessor;  } else   if (transport.equalsIgnoreCase("sctp")) {    try {      Class<?> mpc=ClassLoader.getSystemClassLoader().loadClass("gov.nist.javax.sip.stack.sctp.SCTPMessageProcessor");      MessageProcessor mp=(MessageProcessor)mpc.newInstance();      mp.initialize(ipAddress,port,this);      this.addMessageProcessor(mp);      return mp;    } catch (    ClassNotFoundException e) {      throw new IllegalArgumentException("SCTP not supported (needs Java 7 and SCTP jar in classpath)");    }catch (    InstantiationException ie) {      throw new IllegalArgumentException("Error initializing SCTP",ie);    }catch (    IllegalAccessException ie) {      throw new IllegalArgumentException("Error initializing SCTP",ie);    }  } else {    throw new IllegalArgumentException("bad transport");  }}  }
class C{  public void write(AnnotationsWriter writer) throws IOException {  writer.constValueIndex(getValue());}  }
class C{  public static String toString(URI uri) throws IOException {  return toString(uri,Charset.defaultCharset());}  }
class C{  public BooleanContainer(){  on=false;}  }
class C{  public void createSubUsageScenario02() throws Exception {  long usageStartTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(20.5);  BillingIntegrationTestBase.setDateFactoryInstance(usageStartTime);  VOServiceDetails serviceDetails=serviceSetup.createPublishAndActivateMarketableService(basicSetup.getSupplierAdminKey(),"SCENARIO02_PERUNIT_MONTH",TestService.EXAMPLE,TestPriceModel.EXAMPLE_PERUNIT_MONTH_ROLES,technicalService,supplierMarketplace);  setCutOffDay(basicSetup.getSupplierAdminKey(),1);  VORoleDefinition role=VOServiceFactory.getRole(serviceDetails,"ADMIN");  container.login(basicSetup.getCustomerAdminKey(),ROLE_ORGANIZATION_ADMIN);  VOSubscriptionDetails subDetails=subscrSetup.subscribeToService("SCENARIO02_PERUNIT_MONTH",serviceDetails,basicSetup.getCustomerUser2(),role);  long usageEndTime=DateTimeHandling.calculateMillis("2012-12-01 00:00:00") - DateTimeHandling.daysToMillis(5);  BillingIntegrationTestBase.setDateFactoryInstance(usageEndTime);  subscrSetup.unsubscribeToService(subDetails.getSubscriptionId());  resetCutOffDay(basicSetup.getSupplierAdminKey());  BillingIntegrationTestBase.updateSubscriptionListForTests("SCENARIO02_PERUNIT_MONTH",subDetails);}  }
class C{  public static byte[] encodeBitmapAsPNG(Bitmap bitmap,boolean color,int numColors,boolean allowTransparent){  int bits;  if (!color && numColors != 2)   throw new IllegalArgumentException("must have 2 colors for black and white");  if (numColors < 2)   throw new IllegalArgumentException("minimum 2 colors"); else   if (numColors == 2)   bits=1; else   if (numColors <= 4)   bits=2; else   if (numColors <= 16)   bits=4; else   if (numColors <= 64)   bits=8; else   throw new IllegalArgumentException("maximum 64 colors");  SimpleImageEncoder encoder=new SimpleImageEncoder();  int[] pixels=new int[bitmap.getWidth() * bitmap.getHeight()];  bitmap.getPixels(pixels,0,bitmap.getWidth(),0,0,bitmap.getWidth(),bitmap.getHeight());  encoder.optimizePalette(pixels,numColors,allowTransparent);  return encoder.encodeIndexedPNG(pixels,bitmap.getWidth(),bitmap.getHeight(),color,bits);}  }
class C{  public Swagger2MarkupConfigBuilder withSeparatedOperations(){  config.separatedOperationsEnabled=true;  return this;}  }
class C{  public CaseInsensitiveHashSet(String[] a,float f){  super(a,f,CaseInsensitiveHashingStrategy.INSTANCE);}  }
class C{  public static char[] toCharArray(Character[] array){  char[] result=new char[array.length];  for (int i=0; i < array.length; i++) {    result[i]=array[i];  }  return result;}  }
class C{  public void assertPositionsSkipping(int docFreq,PostingsEnum leftDocs,PostingsEnum rightDocs) throws Exception {  if (leftDocs == null || rightDocs == null) {    assertNull(leftDocs);    assertNull(rightDocs);    return;  }  int docid=-1;  int averageGap=MAXDOC / (1 + docFreq);  int skipInterval=16;  while (true) {    if (random().nextBoolean()) {      docid=leftDocs.nextDoc();      assertEquals(docid,rightDocs.nextDoc());    } else {      int skip=docid + (int)Math.ceil(Math.abs(skipInterval + random().nextGaussian() * averageGap));      docid=leftDocs.advance(skip);      assertEquals(docid,rightDocs.advance(skip));    }    if (docid == DocIdSetIterator.NO_MORE_DOCS) {      return;    }    int freq=leftDocs.freq();    assertEquals(freq,rightDocs.freq());    for (int i=0; i < freq; i++) {      assertEquals(leftDocs.nextPosition(),rightDocs.nextPosition());    }  }}  }
class C{  public void test_bytesProduced(){  int[] pos={0,1,1000,Integer.MAX_VALUE,(Integer.MAX_VALUE - 1)};  SSLEngineResult.Status[] enS=SSLEngineResult.Status.values();  SSLEngineResult.HandshakeStatus[] enHS=SSLEngineResult.HandshakeStatus.values();  for (int i=0; i < enS.length; i++) {    for (int j=0; j < enHS.length; j++) {      for (int n=0; n < pos.length; n++) {        for (int l=0; l < pos.length; ++l) {          SSLEngineResult res=new SSLEngineResult(enS[i],enHS[j],pos[n],pos[l]);          assertEquals("Incorrect bytesProduced",pos[l],res.bytesProduced());        }      }    }  }}  }
class C{  public ThymeleafTemplateEngine(String prefix,String suffix){  TemplateResolver defaultTemplateResolver=createDefaultTemplateResolver(prefix,suffix);  initialize(defaultTemplateResolver);}  }
class C{  public void computeMinMaxAtts(){  m_minX=Double.MAX_VALUE;  m_minY=Double.MAX_VALUE;  m_maxX=Double.MIN_VALUE;  m_maxY=Double.MIN_VALUE;  boolean allPointsLessThanOne=true;  if (m_trainingData.numInstances() == 0) {    m_minX=m_minY=0.0;    m_maxX=m_maxY=1.0;  } else {    for (int i=0; i < m_trainingData.numInstances(); i++) {      Instance inst=m_trainingData.instance(i);      double x=inst.value(m_xAttribute);      double y=inst.value(m_yAttribute);      if (!Utils.isMissingValue(x) && !Utils.isMissingValue(y)) {        if (x < m_minX) {          m_minX=x;        }        if (x > m_maxX) {          m_maxX=x;        }        if (y < m_minY) {          m_minY=y;        }        if (y > m_maxY) {          m_maxY=y;        }        if (x > 1.0 || y > 1.0) {          allPointsLessThanOne=false;        }      }    }  }  if (m_minX == m_maxX) {    m_minX=0;  }  if (m_minY == m_maxY) {    m_minY=0;  }  if (m_minX == Double.MAX_VALUE) {    m_minX=0;  }  if (m_minY == Double.MAX_VALUE) {    m_minY=0;  }  if (m_maxX == Double.MIN_VALUE) {    m_maxX=1;  }  if (m_maxY == Double.MIN_VALUE) {    m_maxY=1;  }  if (allPointsLessThanOne) {    m_maxX=m_maxY=1.0;  }  m_rangeX=(m_maxX - m_minX);  m_rangeY=(m_maxY - m_minY);  m_pixWidth=m_rangeX / m_panelWidth;  m_pixHeight=m_rangeY / m_panelHeight;}  }
class C{  public static boolean isBase64(final byte octet){  return octet == PAD_DEFAULT || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);}  }
class C{  public Debug(String filename,int size,int numFiles){  super();  m_Log=newLog(filename,size,numFiles);}  }
class C{  public int compareTo(Tag tag){  int keyResult;  keyResult=this.key.compareTo(tag.key);  if (keyResult != 0) {    return keyResult;  }  return this.value.compareTo(tag.value);}  }
class C{  @Timeout public void handleTimer(@SuppressWarnings("unused") Timer timer){  if (logFile != null) {    handleOnChange(logFile);  }}  }
class C{  public void remove(int index){  entries.remove(index);}  }
class C{  public static boolean isValidId(long id){  if (id >= MIN_VALID_ID && id <= MAX_VALID_ID)   return true;  return false;}  }
class C{  public boolean headerHasBeenSent(){  return this.headerSent;}  }
class C{  public void characters(String s) throws IOException {  characters(s,false);}  }
class C{  public void tag(String tag,String[] names,String[] values,int nattr){  tag(tag,names,values,nattr,true);}  }
class C{  public static String toNTriplesString(IRI uri){  return "<" + escapeString(uri.toString()) + ">";}  }
class C{  public void configure(){  setCommandStationType(getOptionState(option2Name));  setTurnoutHandling(getOptionState(option3Name));  UhlenbrockPacketizer packets=new UhlenbrockPacketizer();  packets.connectPort(this);  this.getSystemConnectionMemo().setLnTrafficController(packets);  this.getSystemConnectionMemo().configureCommandStation(commandStationType,mTurnoutNoRetry,mTurnoutExtraSpace);  this.getSystemConnectionMemo().configureManagers();  packets.startThreads();}  }
class C{  public EventException(Throwable throwable){  cause=throwable;}  }
class C{  @Override public void flush() throws java.io.IOException {  flushBase64();  super.flush();}  }
class C{  private boolean confirmUsersDeletion(Context uiSharedContext){  if (getExtensionUserManagement() != null) {    if (getExtensionUserManagement().getSharedContextUsers(uiSharedContext).size() > 0) {      int choice=JOptionPane.showConfirmDialog(this,Constant.messages.getString("authentication.dialog.confirmChange.label"),Constant.messages.getString("authentication.dialog.confirmChange.title"),JOptionPane.OK_CANCEL_OPTION);      if (choice == JOptionPane.CANCEL_OPTION) {        return false;      }    }  }  return true;}  }
class C{  public static int[] toArray(List<Integer> list){  if (list == null) {    return null;  }  int length=list.size();  int[] intArray=new int[length];  for (int i=0; i < length; i++) {    intArray[i]=list.get(i);  }  return intArray;}  }
class C{  @POST @Consumes(MediaType.APPLICATION_JSON) @RequiresRole(role=Role.ADMINISTRATOR) public void addCertificate(CertificateDTO certificate){  try {    Certificate cert=certificate.getX509Certificate();    getIDMClient().addCertificate(tenant,cert,CertificateType.STS_TRUST_CERT);  } catch (  NoSuchTenantException e) {    log.debug("Failed to add certificate to tenant '{}'",tenant,e);    throw new NotFoundException(sm.getString("ec.404"),e);  }catch (  CertificateException|InvalidArgumentException|DuplicateCertificateException e) {    log.warn("Failed to add certificate to tenant '{}' due to a client side error",tenant,e);    throw new BadRequestException(sm.getString("res.cert.add.failed",tenant),e);  }catch (  Exception e) {    log.error("Failed to add certificate to tenant '{}' due to a server side error",tenant,e);    throw new InternalServerErrorException(sm.getString("ec.500"),e);  }}  }
class C{  public boolean checkError(){  if (out != null) {    flush();  }  if (out instanceof java.io.PrintWriter) {    PrintWriter pw=(PrintWriter)out;    return pw.checkError();  } else   if (psOut != null) {    return psOut.checkError();  }  return trouble;}  }
class C{  public boolean isCertificateIPsCorrect(X509Certificate cert) throws IllegalArgumentException {  valuesHolder.loadIPsAndNames();  Set<InetAddress> foundIPs=new HashSet<InetAddress>();  try {    for (    List<?> element : cert.getSubjectAlternativeNames()) {      int OID=((Integer)element.get(0)).intValue();      String name;      if (OID == SUBJECT_ALT_NAME_IP_ADDRESS) {        name=(String)element.get(1);        log.debug("got the following ip from the cert: " + name);        foundIPs.add(InetAddress.getByName(name.trim()));      } else       if (OID != SUBJECT_ALT_NAME_DNS_NAME) {        throw new IllegalArgumentException("cert is not self generated");      }    }  } catch (  CertificateParsingException e) {    throw new IllegalArgumentException("cert is not self generated");  }catch (  UnknownHostException e) {    throw new IllegalArgumentException("cert has illegal ip values");  }  return valuesHolder.getAddresses().equals(foundIPs);}  }
class C{  @Override public Object singleLineText(final FormObject form){  final boolean[] flags=form.getFieldFlags();  final boolean[] characteristics=form.getCharacteristics();  String aptext=readAPimagesForText(form);  if (aptext != null && aptext.contains("&#")) {    aptext=Strip.stripXML(aptext,true).toString();  }  if (aptext != null && !aptext.equals(form.getTextStreamValue(PdfDictionary.V))) {    form.setTextStreamValue(PdfDictionary.V,aptext);  }  final JComponent retComp;  if (((flags != null) && (flags[FormObject.READONLY_ID])) || (characteristics != null && characteristics[9])) {    if (form.isXFAObject()) {      final JTextField newTextfield=new JTextField(form.getTextString());      setupTextFeatures(newTextfield,form);      setToolTip(form,newTextfield);      newTextfield.setEditable(false);      retComp=newTextfield;    } else {      final JTextField newTextfield=new JTextField(form.getTextString());      setupTextFeatures(newTextfield,form);      setToolTip(form,newTextfield);      newTextfield.setEditable(false);      retComp=newTextfield;    }  } else {    final JTextField newTextfield=new JTextField(form.getTextString());    setupTextFeatures(newTextfield,form);    setToolTip(form,newTextfield);    retComp=newTextfield;  }  setupUniversalFeatures(retComp,form);  return retComp;}  }
class C{  private boolean isTrackControllerShown(){  return trackListActivity.findViewById(R.id.track_controler_container).isShown();}  }
class C{  public int remove(String key){  int avStart=0;  for (int i=0; avStart < mData.length; i++) {    int avLen=mData[avStart];    if (key.length() <= avLen && (key.length() == avLen || mData[avStart + key.length() + 1] == mSeperator)) {      String s=new String(mData,avStart + 1,key.length());      if (0 == key.compareToIgnoreCase(s)) {        byte[] oldBytes=mData;        mData=new byte[oldBytes.length - avLen - 1];        System.arraycopy(oldBytes,0,mData,0,avStart);        System.arraycopy(oldBytes,avStart + avLen + 1,mData,avStart,oldBytes.length - avStart - avLen- 1);        return i;      }    }    avStart+=(0xFF & (avLen + 1));  }  return -1;}  }
class C{  Expression compileFunction(int opPos) throws TransformerException {  int endFunc=opPos + getOp(opPos + 1) - 1;  opPos=getFirstChildPos(opPos);  int funcID=getOp(opPos);  opPos++;  if (-1 != funcID) {    Function func=m_functionTable.getFunction(funcID);    if (func instanceof FuncExtFunctionAvailable)     ((FuncExtFunctionAvailable)func).setFunctionTable(m_functionTable);    func.postCompileStep(this);    try {      int i=0;      for (int p=opPos; p < endFunc; p=getNextOpPos(p), i++) {        func.setArg(compile(p),i);      }      func.checkNumberArgs(i);    } catch (    WrongNumberArgsException wnae) {      java.lang.String name=m_functionTable.getFunctionName(funcID);      m_errorHandler.fatalError(new TransformerException(XSLMessages.createXPATHMessage(XPATHErrorResources.ER_ONLY_ALLOWS,new Object[]{name,wnae.getMessage()}),m_locator));    }    return func;  } else {    error(XPATHErrorResources.ER_FUNCTION_TOKEN_NOT_FOUND,null);    return null;  }}  }
class C{  public byte[] serialise(final Object object) throws SerialisationException {  return serialise(object,false);}  }
class C{  public DeleteResponseMessage(DeleteResponseMessage other){  __isset_bitfield=other.__isset_bitfield;  if (other.isSetHeader()) {    this.header=new AsyncMessageHeader(other.header);  }  this.deleted=other.deleted;}  }
class C{  public void createPackageContents(){  if (isCreated)   return;  isCreated=true;  docletEClass=createEClass(DOCLET);  createEReference(docletEClass,DOCLET__LINE_TAGS);  createEOperation(docletEClass,DOCLET___HAS_LINE_TAG__STRING);  createEOperation(docletEClass,DOCLET___LINE_TAGS__STRING);  docletElementEClass=createEClass(DOCLET_ELEMENT);  createEAttribute(docletElementEClass,DOCLET_ELEMENT__BEGIN);  createEAttribute(docletElementEClass,DOCLET_ELEMENT__END);  createEOperation(docletElementEClass,DOCLET_ELEMENT___SET_RANGE__INT_INT);  createEOperation(docletElementEClass,DOCLET_ELEMENT___COVERS__INT);  compositeEClass=createEClass(COMPOSITE);  createEReference(compositeEClass,COMPOSITE__CONTENTS);  jsDocNodeEClass=createEClass(JS_DOC_NODE);  createEReference(jsDocNodeEClass,JS_DOC_NODE__MARKERS);  createEOperation(jsDocNodeEClass,JS_DOC_NODE___GET_MARKER_VALUE__STRING);  createEOperation(jsDocNodeEClass,JS_DOC_NODE___SET_MARKER__STRING_STRING);  createEOperation(jsDocNodeEClass,JS_DOC_NODE___IS_MARKED_AS__STRING_STRING);  createEOperation(jsDocNodeEClass,JS_DOC_NODE___TO_STRING);  contentNodeEClass=createEClass(CONTENT_NODE);  createEReference(contentNodeEClass,CONTENT_NODE__OWNER);  tagEClass=createEClass(TAG);  createEReference(tagEClass,TAG__TITLE);  createEReference(tagEClass,TAG__VALUES);  createEAttribute(tagEClass,TAG__TAG_DEFINITION);  createEOperation(tagEClass,TAG___GET_VALUE_BY_KEY__STRING);  createEOperation(tagEClass,TAG___TO_STRING);  tagValueEClass=createEClass(TAG_VALUE);  createEAttribute(tagValueEClass,TAG_VALUE__KEY);  tagTitleEClass=createEClass(TAG_TITLE);  createEReference(tagTitleEClass,TAG_TITLE__TAG);  createEAttribute(tagTitleEClass,TAG_TITLE__TITLE);  createEAttribute(tagTitleEClass,TAG_TITLE__ACTUAL_TITLE);  lineTagEClass=createEClass(LINE_TAG);  createEReference(lineTagEClass,LINE_TAG__DOCLET);  inlineTagEClass=createEClass(INLINE_TAG);  textEClass=createEClass(TEXT);  createEAttribute(textEClass,TEXT__TEXT);  simpleTypeReferenceEClass=createEClass(SIMPLE_TYPE_REFERENCE);  createEAttribute(simpleTypeReferenceEClass,SIMPLE_TYPE_REFERENCE__TYPE_NAME);  createEOperation(simpleTypeReferenceEClass,SIMPLE_TYPE_REFERENCE___TYPE_NAME_SET);  createEOperation(simpleTypeReferenceEClass,SIMPLE_TYPE_REFERENCE___TO_STRING);  fullTypeReferenceEClass=createEClass(FULL_TYPE_REFERENCE);  createEAttribute(fullTypeReferenceEClass,FULL_TYPE_REFERENCE__MODULE_NAME);  createEOperation(fullTypeReferenceEClass,FULL_TYPE_REFERENCE___MODULE_NAME_SET);  createEOperation(fullTypeReferenceEClass,FULL_TYPE_REFERENCE___TO_STRING);  createEOperation(fullTypeReferenceEClass,FULL_TYPE_REFERENCE___FULL_TYPE_NAME);  fullMemberReferenceEClass=createEClass(FULL_MEMBER_REFERENCE);  createEAttribute(fullMemberReferenceEClass,FULL_MEMBER_REFERENCE__MEMBER_NAME);  createEAttribute(fullMemberReferenceEClass,FULL_MEMBER_REFERENCE__STATIC_MEMBER);  createEOperation(fullMemberReferenceEClass,FULL_MEMBER_REFERENCE___MEMBER_NAME_SET);  createEOperation(fullMemberReferenceEClass,FULL_MEMBER_REFERENCE___TO_STRING);  variableReferenceEClass=createEClass(VARIABLE_REFERENCE);  createEAttribute(variableReferenceEClass,VARIABLE_REFERENCE__VARIABLE_NAME);  genericReferenceEClass=createEClass(GENERIC_REFERENCE);  literalEClass=createEClass(LITERAL);  createEAttribute(literalEClass,LITERAL__VALUE);  createEAttribute(literalEClass,LITERAL__NAME);  markerEClass=createEClass(MARKER);  createEAttribute(markerEClass,MARKER__KEY);  createEAttribute(markerEClass,MARKER__VALUE);  composedContentEClass=createEClass(COMPOSED_CONTENT);  structuredTextEClass=createEClass(STRUCTURED_TEXT);  createEReference(structuredTextEClass,STRUCTURED_TEXT__ROOT_ELEMENT);  tagDefinitionEDataType=createEDataType(TAG_DEFINITION);}  }
class C{  private void generateIntersectionSchema() throws DataFlowException {  List<Attribute> innerAttributes=innerOperator.getOutputSchema().getAttributes();  List<Attribute> outerAttributes=outerOperator.getOutputSchema().getAttributes();  List<Attribute> intersectionAttributes=innerAttributes.stream().filter(null).collect(Collectors.toList());  if (intersectionAttributes.isEmpty()) {    throw new DataFlowException("inner operator and outer operator don't share any common attributes");  } else   if (!intersectionAttributes.contains(joinPredicate.getJoinAttribute())) {    throw new DataFlowException("inner operator or outer operator doesn't contain join attribute");  } else   if (!intersectionAttributes.contains(joinPredicate.getIDAttribute())) {    throw new DataFlowException("inner operator or outer operator doesn't contain ID attribute");  } else   if (!intersectionAttributes.contains(SchemaConstants.SPAN_LIST_ATTRIBUTE)) {    throw new DataFlowException("inner operator or outer operator doesn't contain spanList attribute");  }  outputSchema=new Schema(intersectionAttributes.stream().toArray(null));}  }
class C{  public void update(Graphics a,JComponent b){  for (int i=0; i < uis.size(); i++) {    ((ComponentUI)(uis.elementAt(i))).update(a,b);  }}  }
class C{  private void parseAllow(Attributes attributes){  if (md.actions != null) {    md.modeUsage=getModeUsage(attributes);    md.actions.addNoResultAction(new AllowAction(md.modeUsage));  } else   md.modeUsage=null;}  }
class C{  public SparseDoubleMatrix3D(int slices,int rows,int columns){  this(slices,rows,columns,slices * rows * (columns / 1000),0.2,0.5);}  }
class C{  public static void checkArgument(boolean expression){  if (!expression) {    throw new IllegalArgumentException();  }}  }
class C{  public TriggerProcessStatusException(String message,ApplicationExceptionBean bean){  super(message,bean);}  }
class C{  public void onWifiConnectivityChanged(boolean connected,final String networkSsid){  LOGD(TAG,"WIFI connectivity changed to " + (connected ? "enabled" : "disabled"));  if (connected && !mWifiConnectivity) {    mWifiConnectivity=true;    if (mCastManager.isFeatureEnabled(BaseCastManager.FEATURE_WIFI_RECONNECT)) {      mCastManager.startCastDiscovery();      mCastManager.reconnectSessionIfPossible(RECONNECTION_ATTEMPT_PERIOD_S,networkSsid);    }  } else {    mWifiConnectivity=connected;  }}  }
class C{  public static boolean isGraphQLScratchFile(Project project,VirtualFile file){  if (file.getFileType() instanceof ScratchFileType) {    final PsiManager psiManager=PsiManager.getInstance(project);    final PsiFile psiFile=psiManager.findFile(file);    if (psiFile != null && psiFile.getFileType() == JSGraphQLSchemaFileType.INSTANCE) {      return true;    }  }  return false;}  }
class C{  public DoubleMatrix2D multOuter(DoubleMatrix1D x,DoubleMatrix1D y,DoubleMatrix2D A){  int rows=x.size();  int columns=y.size();  if (A == null)   A=x.like2D(rows,columns);  if (A.rows() != rows || A.columns() != columns)   throw new IllegalArgumentException();  for (int row=rows; --row >= 0; )   A.viewRow(row).assign(y);  for (int column=columns; --column >= 0; )   A.viewColumn(column).assign(x,cern.jet.math.Functions.mult);  return A;}  }
class C{  @Override protected void initData(){  this.presenter=new MainPresenter();  this.presenter.attachView(this);  this.gankType=GankType.daily;  this.mainAdapter=new MainAdapter(this,this.gankType);  this.mainAdapter.setListener(this);  this.mainRv.setAdapter(this.mainAdapter);  this.refreshData(this.gankType);}  }
class C{  public final AlertDialog initiateScan(){  return initiateScan(ALL_CODE_TYPES,-1);}  }
class C{  public Builder withLockedInVersionId(long versionId){  if ((lockMap == null) || (this.versionId != null)) {    throw new IllegalStateException();  }  this.versionId=versionId;  return this;}  }
class C{  public void didNotThrottle(int tenantClass){  super.startedAndFinished(Operation.READ,tenantClass,0,0);}  }
class C{  public MultisigSignatureTransaction createSignature(){  return this.createSignature(Utils.generateRandomAccount());}  }
class C{  public synchronized void clearAnnotations(){  mAnnotations.clear();  mStringXY.clear();}  }
class C{  public boolean isSet(_Fields field){  if (field == null) {    throw new IllegalArgumentException();  }switch (field) {case STRING_THING:    return isSetString_thing();case CHANGED:  return isSetChanged();case I32_THING:return isSetI32_thing();case I64_THING:return isSetI64_thing();}throw new IllegalStateException();}  }
class C{  protected boolean hasHistory(){  return false;}  }
class C{  public static NodesInfoRequest nodesInfoRequest(String... nodesIds){  return new NodesInfoRequest(nodesIds);}  }
class C{  private void handleEnvSelectButtonSelected(){  Map<String,EnvironmentVariable> envVariables=getNativeEnvironment();  for (  String varName : getFieldValue().envVars.keySet()) {    envVariables.remove(varName);  }  NativeEnvironmentSelectionDialog dialog=new NativeEnvironmentSelectionDialog(getShell(),envVariables);  dialog.setTitle(LaunchConfigurationsMessages.EnvironmentTab_20);  int button=dialog.open();  if (button == Window.OK) {    Object[] selected=dialog.getResult();    for (int i=0; i < selected.length; i++) {      EnvironmentVariable envVar=(EnvironmentVariable)selected[i];      getFieldValue().envVars.put(envVar.getName(),envVar.getValue());    }  }  notifyFieldChanged();}  }
class C{  public static byte[] parseMemoryString(final String memoryString){  final byte[] memoryData=new byte[memoryString.length() / 2];  for (int i=0, j=0; i < memoryString.length(); i+=2, j++) {    memoryData[j]=(byte)(lookup1[memoryString.charAt(i)] + lookup2[memoryString.charAt(i + 1)]);  }  return memoryData;}  }
class C{  private ZKLogMetadataForReader(URI uri,String logName,String logIdentifier){  super(uri,logName,logIdentifier);}  }
class C{  static public NodeModel parse(InputSource is) throws SAXException, IOException, ParserConfigurationException {  return parse(is,true,true);}  }
class C{  public final void lazySet(int index,short value){  this.set(index,value);}  }
class C{  public synchronized void flush(){  super.flush();}  }
class C{  public TypeCheckerBuilder usageWarnings(boolean usageWarnings){  this.assertionVisitor.includeUsageWarnings(usageWarnings);  return this;}  }
class C{  public boolean isUsernameIndex(String[] args,int index){  return index == 0;}  }
class C{  public static Object max(Collection coll){  Iterator i=coll.iterator();  Comparable candidate=(Comparable)(i.next());  while (i.hasNext()) {    Comparable next=(Comparable)(i.next());    if (next.compareTo(candidate) > 0)     candidate=next;  }  return candidate;}  }
class C{  private boolean isSizeConsistent(){  return isSizeConsistent(root);}  }
class C{  @Deprecated public void fullscreen() throws IllegalStateException {  setFullscreen(!fullscreen);}  }
class C{  @Override public Object invoke(final Object proxy,final Method method,final Object[] parameters) throws Throwable {  if (eventTypes.isEmpty() || eventTypes.contains(method.getName())) {    if (hasMatchingParametersMethod(method)) {      return MethodUtils.invokeMethod(target,methodName,parameters);    }    return MethodUtils.invokeMethod(target,methodName);  }  return null;}  }
class C{  @Override public boolean budgetaryCheckForBill(final Map<String,Object> paramMap){  String cashbasedbudgetType=EMPTY_STRING, txnType=EMPTY_STRING;  BigDecimal debitAmt=null;  BigDecimal creditAmt=null;  BigDecimal txnAmt=null;  String glCode="";  Date asondate=null;  Date fromdate=null;  try {    String budgetCheckConfig=budgetCheckConfigService.getConfigValue();    if (budgetCheckConfig.equals(BudgetControlType.BudgetCheckOption.NONE.toString())) {      if (LOGGER.isDebugEnabled())       LOGGER.debug("Application Level budget check disabled skipping budget check.");      return true;    }    if (paramMap.get("mis.budgetcheckreq") != null && ((Boolean)paramMap.get("mis.budgetcheckreq")).equals(false)) {      if (LOGGER.isDebugEnabled())       LOGGER.debug("voucher Level budget check disabled  so skipping budget check.");      return true;    }    if (paramMap.get("debitAmt") != null)     debitAmt=(BigDecimal)paramMap.get("debitAmt");    if (paramMap.get("creditAmt") != null)     creditAmt=(BigDecimal)paramMap.get("creditAmt");    if (debitAmt == null && creditAmt == null)     throw new ValidationException(EMPTY_STRING,"Both Debit and Credit amount is null");    if (debitAmt != null && debitAmt.compareTo(BigDecimal.ZERO) == 0 && creditAmt != null && creditAmt.compareTo(BigDecimal.ZERO) == 0)     throw new ValidationException(EMPTY_STRING,"Both Debit and Credit amount is zero");    if (debitAmt != null && debitAmt.compareTo(BigDecimal.ZERO) > 0 && creditAmt != null && creditAmt.compareTo(BigDecimal.ZERO) > 0)     throw new ValidationException(EMPTY_STRING,"Both Debit and Credit amount is greater than zero");    List<AppConfigValues> list=appConfigValuesService.getConfigValuesByModuleAndKey(EGF,"budgetaryCheck_budgettype_cashbased");    if (list.isEmpty())     throw new ValidationException(EMPTY_STRING,"budgetaryCheck_budgettype_cashbased is not defined in AppConfig");    cashbasedbudgetType=list.get(0).getValue();    if (cashbasedbudgetType.equalsIgnoreCase("Y")) {      if (LOGGER.isDebugEnabled())       LOGGER.debug("cashbasedbudgetType==" + cashbasedbudgetType);    } else {      if (debitAmt != null && debitAmt.compareTo(BigDecimal.ZERO) > 0) {        txnType="debit";        txnAmt=debitAmt;      } else {        txnType="credit";        txnAmt=creditAmt;      }      if (paramMap.get("glcode") != null)       glCode=paramMap.get("glcode").toString();      if (paramMap.get(Constants.ASONDATE) != null)       asondate=(Date)paramMap.get(Constants.ASONDATE);      if (glCode == null)       throw new ValidationException(EMPTY_STRING,"glcode is null");      if (txnAmt == null)       throw new ValidationException(EMPTY_STRING,"txnAmt is null");      if (txnType == null)       throw new ValidationException(EMPTY_STRING,"txnType is null");      if (asondate == null)       throw new ValidationException(EMPTY_STRING,"As On Date is null");      final CChartOfAccounts coa=chartOfAccountsHibernateDAO.getCChartOfAccountsByGlCode(glCode);      if (coa.getBudgetCheckReq() != null && coa.getBudgetCheckReq()) {        final List<BudgetGroup> budgetHeadListByGlcode=getBudgetHeadByGlcode(coa);        if (!isBudgetCheckingRequiredForType(txnType,budgetHeadListByGlcode.get(0).getBudgetingType().toString())) {          if (LOGGER.isDebugEnabled())           LOGGER.debug("No need to check budget for :" + glCode + " as the transaction type is "+ txnType+ "so skipping budget check");          return true;        }        final CFinancialYear finyear=financialYearHibDAO.getFinancialYearByDate(asondate);        final SimpleDateFormat sdf=new SimpleDateFormat("dd-MMM-yyyy",Constants.LOCALE);        if (finyear == null)         throw new ValidationException(EMPTY_STRING,"Financial year is not defined for this date [" + sdf.format(asondate) + "]");        fromdate=finyear.getStartingDate();        paramMap.put("financialyearid",Long.valueOf(finyear.getId()));        paramMap.put(BUDGETHEADID,budgetHeadListByGlcode);        paramMap.put("fromdate",fromdate);        paramMap.put(Constants.ASONDATE,finyear.getEndingDate());        paramMap.put(GLCODEID,coa.getId());        if (LOGGER.isDebugEnabled())         LOGGER.debug("************ BudgetCheck Details For bill *********************");        final BigDecimal budgetedAmt=getBudgetedAmtForYear(paramMap);        if (LOGGER.isDebugEnabled())         LOGGER.debug(".................Budgeted amount......................" + budgetedAmt);        if (budgetCheckConfigService.getConfigValue().equalsIgnoreCase(BudgetControlType.BudgetCheckOption.MANDATORY.toString()))         if (budgetedAmt.compareTo(BigDecimal.ZERO) == 0) {          if (LOGGER.isDebugEnabled())           LOGGER.debug("Budget check failed Because of  Budgeted not allocated for the combination");          return false;        }        final BigDecimal actualAmt=getActualBudgetUtilizedForBudgetaryCheck(paramMap);        if (LOGGER.isDebugEnabled())         LOGGER.debug("..................Voucher Actual amount......................." + actualAmt);        BigDecimal billAmt=getBillAmountForBudgetCheck(paramMap);        EgBillregister bill=null;        if (paramMap.get("bill") != null)         bill=(EgBillregister)paramMap.get("bill");        if (bill != null && bill.getEgBillregistermis().getBudgetaryAppnumber() != null) {          if (LOGGER.isDebugEnabled())           LOGGER.debug(".............Found BillId so subtracting txn amount......................" + txnAmt);          billAmt=billAmt.subtract(txnAmt);        }        if (LOGGER.isDebugEnabled())         LOGGER.debug("........................Bill Actual amount ........................" + billAmt);        final BigDecimal diff=budgetedAmt.subtract(actualAmt).subtract(billAmt);        if (LOGGER.isDebugEnabled()) {          LOGGER.debug("......................diff amount......................" + diff);        }        if (LOGGER.isDebugEnabled())         LOGGER.debug("************ BudgetCheck Details For bill End *********************");        if (budgetCheckConfigService.getConfigValue().equalsIgnoreCase(BudgetControlType.BudgetCheckOption.MANDATORY.toString())) {          if (txnAmt.compareTo(diff) <= 0) {            if (paramMap.get("bill") != null)             getAppNumberForBill(paramMap);            return true;          } else           return false;        }        if (budgetCheckConfigService.getConfigValue().equalsIgnoreCase(BudgetControlType.BudgetCheckOption.ANTICIPATORY.toString())) {          getAppNumberForBill(paramMap);          return true;        }      } else       return true;    }  } catch (  final ValidationException v) {    LOGGER.error("Exp in budgetary check API()=" + v.getErrors());    throw v;  }catch (  final Exception e) {    LOGGER.error("Exp in budgetary check API()=" + e.getMessage());    throw e;  }  return true;}  }
class C{  protected boolean isTestOffHeap(){  return false;}  }
class C{  public void drawVerticalItem(Graphics2D g2,Rectangle2D dataArea,PlotRenderingInfo info,XYPlot plot,ValueAxis domainAxis,ValueAxis rangeAxis,XYDataset dataset,int series,int item,CrosshairState crosshairState,int pass){  EntityCollection entities=null;  if (info != null) {    entities=info.getOwner().getEntityCollection();  }  BoxAndWhiskerXYDataset boxAndWhiskerData=(BoxAndWhiskerXYDataset)dataset;  Number x=boxAndWhiskerData.getX(series,item);  Number yMax=boxAndWhiskerData.getMaxRegularValue(series,item);  Number yMin=boxAndWhiskerData.getMinRegularValue(series,item);  Number yMedian=boxAndWhiskerData.getMedianValue(series,item);  Number yAverage=boxAndWhiskerData.getMeanValue(series,item);  Number yQ1Median=boxAndWhiskerData.getQ1Value(series,item);  Number yQ3Median=boxAndWhiskerData.getQ3Value(series,item);  List yOutliers=boxAndWhiskerData.getOutliers(series,item);  if (yOutliers == null) {    yOutliers=Collections.EMPTY_LIST;  }  double xx=domainAxis.valueToJava2D(x.doubleValue(),dataArea,plot.getDomainAxisEdge());  RectangleEdge location=plot.getRangeAxisEdge();  double yyMax=rangeAxis.valueToJava2D(yMax.doubleValue(),dataArea,location);  double yyMin=rangeAxis.valueToJava2D(yMin.doubleValue(),dataArea,location);  double yyMedian=rangeAxis.valueToJava2D(yMedian.doubleValue(),dataArea,location);  double yyAverage=0.0;  if (yAverage != null) {    yyAverage=rangeAxis.valueToJava2D(yAverage.doubleValue(),dataArea,location);  }  double yyQ1Median=rangeAxis.valueToJava2D(yQ1Median.doubleValue(),dataArea,location);  double yyQ3Median=rangeAxis.valueToJava2D(yQ3Median.doubleValue(),dataArea,location);  double yyOutlier;  double exactBoxWidth=getBoxWidth();  double width=exactBoxWidth;  double dataAreaX=dataArea.getMaxX() - dataArea.getMinX();  double maxBoxPercent=0.1;  double maxBoxWidth=dataAreaX * maxBoxPercent;  if (exactBoxWidth <= 0.0) {    int itemCount=boxAndWhiskerData.getItemCount(series);    exactBoxWidth=dataAreaX / itemCount * 4.5 / 7;    if (exactBoxWidth < 3) {      width=3;    } else     if (exactBoxWidth > maxBoxWidth) {      width=maxBoxWidth;    } else {      width=exactBoxWidth;    }  }  g2.setPaint(getItemPaint(series,item));  Stroke s=getItemStroke(series,item);  g2.setStroke(s);  g2.draw(new Line2D.Double(xx,yyMax,xx,yyQ3Median));  g2.draw(new Line2D.Double(xx - width / 2,yyMax,xx + width / 2,yyMax));  g2.draw(new Line2D.Double(xx,yyMin,xx,yyQ1Median));  g2.draw(new Line2D.Double(xx - width / 2,yyMin,xx + width / 2,yyMin));  Shape box;  if (yyQ1Median > yyQ3Median) {    box=new Rectangle2D.Double(xx - width / 2,yyQ3Median,width,yyQ1Median - yyQ3Median);  } else {    box=new Rectangle2D.Double(xx - width / 2,yyQ1Median,width,yyQ3Median - yyQ1Median);  }  if (this.fillBox) {    g2.setPaint(lookupBoxPaint(series,item));    g2.fill(box);  }  g2.setStroke(getItemOutlineStroke(series,item));  g2.setPaint(getItemOutlinePaint(series,item));  g2.draw(box);  g2.setPaint(getArtifactPaint());  g2.draw(new Line2D.Double(xx - width / 2,yyMedian,xx + width / 2,yyMedian));  double aRadius=0;  double oRadius=width / 3;  if (yAverage != null) {    aRadius=width / 4;    if ((yyAverage > (dataArea.getMinY() - aRadius)) && (yyAverage < (dataArea.getMaxY() + aRadius))) {      Ellipse2D.Double avgEllipse=new Ellipse2D.Double(xx - aRadius,yyAverage - aRadius,aRadius * 2,aRadius * 2);      g2.fill(avgEllipse);      g2.draw(avgEllipse);    }  }  List outliers=new ArrayList();  OutlierListCollection outlierListCollection=new OutlierListCollection();  for (int i=0; i < yOutliers.size(); i++) {    double outlier=((Number)yOutliers.get(i)).doubleValue();    if (outlier > boxAndWhiskerData.getMaxOutlier(series,item).doubleValue()) {      outlierListCollection.setHighFarOut(true);    } else     if (outlier < boxAndWhiskerData.getMinOutlier(series,item).doubleValue()) {      outlierListCollection.setLowFarOut(true);    } else     if (outlier > boxAndWhiskerData.getMaxRegularValue(series,item).doubleValue()) {      yyOutlier=rangeAxis.valueToJava2D(outlier,dataArea,location);      outliers.add(new Outlier(xx,yyOutlier,oRadius));    } else     if (outlier < boxAndWhiskerData.getMinRegularValue(series,item).doubleValue()) {      yyOutlier=rangeAxis.valueToJava2D(outlier,dataArea,location);      outliers.add(new Outlier(xx,yyOutlier,oRadius));    }    Collections.sort(outliers);  }  for (Iterator iterator=outliers.iterator(); iterator.hasNext(); ) {    Outlier outlier=(Outlier)iterator.next();    outlierListCollection.add(outlier);  }  double maxAxisValue=rangeAxis.valueToJava2D(rangeAxis.getUpperBound(),dataArea,location) + aRadius;  double minAxisValue=rangeAxis.valueToJava2D(rangeAxis.getLowerBound(),dataArea,location) - aRadius;  for (Iterator iterator=outlierListCollection.iterator(); iterator.hasNext(); ) {    OutlierList list=(OutlierList)iterator.next();    Outlier outlier=list.getAveragedOutlier();    Point2D point=outlier.getPoint();    if (list.isMultiple()) {      drawMultipleEllipse(point,width,oRadius,g2);    } else {      drawEllipse(point,oRadius,g2);    }  }  if (outlierListCollection.isHighFarOut()) {    drawHighFarOut(aRadius,g2,xx,maxAxisValue);  }  if (outlierListCollection.isLowFarOut()) {    drawLowFarOut(aRadius,g2,xx,minAxisValue);  }  if (entities != null && box.intersects(dataArea)) {    addEntity(entities,box,dataset,series,item,xx,yyAverage);  }}  }
class C{  public void expandToInclude(Envelope other){  if (other.isNull()) {    return;  }  if (isNull()) {    minx=other.getMinX();    maxx=other.getMaxX();    miny=other.getMinY();    maxy=other.getMaxY();  } else {    if (other.minx < minx) {      minx=other.minx;    }    if (other.maxx > maxx) {      maxx=other.maxx;    }    if (other.miny < miny) {      miny=other.miny;    }    if (other.maxy > maxy) {      maxy=other.maxy;    }  }}  }
class C{  public Boolean isDvPortOperationSupported(){  return dvPortOperationSupported;}  }
class C{  public void removeAttribute(String name){  attributes.remove(name);}  }
class C{  @DSSource({DSSourceKind.LOCATION}) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:09.191 -0500",hash_original_method="62C2C1B6F0249A81DF96D887CDE57892",hash_generated_method="807BC3E63A8EC7B7CD4EFA3978F6E0B1") static public Allocation createCubemapFromCubeFaces(RenderScript rs,Bitmap xpos,Bitmap xneg,Bitmap ypos,Bitmap yneg,Bitmap zpos,Bitmap zneg){  return createCubemapFromCubeFaces(rs,xpos,xneg,ypos,yneg,zpos,zneg,MipmapControl.MIPMAP_NONE,USAGE_GRAPHICS_TEXTURE);}  }
class C{  @Override public NotificationChain eInverseAdd(InternalEObject otherEnd,int featureID,NotificationChain msgs){switch (featureID) {case N4JSPackage.N4_MEMBER_ANNOTATION_LIST__OWNER:    if (eInternalContainer() != null)     msgs=eBasicRemoveFromContainer(msgs);  return basicSetOwner((N4ClassifierDefinition)otherEnd,msgs);}return super.eInverseAdd(otherEnd,featureID,msgs);}  }
class C{  public void logEvent(StoredException storedException,Callback<Object> callback){  sendLogEvent(storedException.threadName,storedException.stackTrace,callback);}  }
class C{  @Transactional(readOnly=true) public List<Cheque> attentionChequesByDelay(){  return chequeRepository.findWithDelay(OffsetDateTime.now().minusDays(7).toString());}  }
class C{  public Constraint_ createConstraint_(){  Constraint_Impl constraint_=new Constraint_Impl();  return constraint_;}  }
class C{  private static byte CallNonvirtualByteMethod(JNIEnvironment env,int objJREF,int classJREF,int methodID) throws Exception {  if (VM.VerifyAssertions) {    VM._assert(VM.BuildForPowerPC,ERROR_MSG_WRONG_IMPLEMENTATION);  }  if (traceJNI)   VM.sysWrite("JNI called: CallNonvirtualByteMethod  \n");  RuntimeEntrypoints.checkJNICountDownToGC();  try {    Object obj=env.getJNIRef(objJREF);    Object returnObj=JNIHelpers.invokeWithDotDotVarArg(obj,methodID,TypeReference.Byte,true);    return Reflection.unwrapByte(returnObj);  } catch (  Throwable unexpected) {    if (traceJNI)     unexpected.printStackTrace(System.err);    env.recordException(unexpected);    return 0;  }}  }
class C{  @ParameterizedRobolectricTestRunner.Parameters(name="Missing parameter = {0}") public static Collection<Object[]> data(){  return Arrays.asList(new Object[][]{{RegistrationResponse.PARAM_CLIENT_SECRET_EXPIRES_AT},{RegistrationResponse.PARAM_REGISTRATION_ACCESS_TOKEN},{RegistrationResponse.PARAM_REGISTRATION_CLIENT_URI}});}  }
class C{  public boolean isMalformed(){  return this.type == TYPE_MALFORMED_INPUT;}  }
class C{  @Override public void run(){  amIActive=true;  String inputHeader=null;  String outputHeader=null;  int row, col;  int numCols;  int numRows;  double z;  double noData;  float progress;  int i;  int numReclassRanges;  int numReclassRangesMinusOne;  String[] reclassRangeStr=null;  double[][] reclassRange;  boolean blnAssignMode=false;  if (args.length <= 0) {    showFeedback("Plugin parameters have not been set.");    return;  }  for (i=0; i < args.length; i++) {    if (i == 0) {      inputHeader=args[i];    } else     if (i == 1) {      outputHeader=args[i];    } else     if (i == 2) {      reclassRangeStr=args[i].split("\t");      if (reclassRangeStr[2].toLowerCase().equals("not specified")) {        blnAssignMode=true;      }    }  }  if ((inputHeader == null) || (outputHeader == null)) {    showFeedback("One or more of the input parameters have not been set properly.");    return;  }  try {    WhiteboxRaster image=new WhiteboxRaster(inputHeader,"r");    int rows=image.getNumberRows();    int cols=image.getNumberColumns();    double[] data;    noData=image.getNoDataValue();    numReclassRanges=reclassRangeStr.length / 3;    numReclassRangesMinusOne=numReclassRanges - 1;    reclassRange=new double[3][numReclassRanges];    i=0;    for (int b=0; b < reclassRangeStr.length; b++) {      if (!reclassRangeStr[b].toLowerCase().equals("not specified")) {        if (!reclassRangeStr[b].toLowerCase().equals("nodata")) {          reclassRange[i][b / 3]=Double.parseDouble(reclassRangeStr[b]);        } else {          reclassRange[i][b / 3]=noData;        }      } else {        reclassRange[i][b / 3]=0;      }      i++;      if (i == 3) {        i=0;      }    }    if (numReclassRanges == 0) {      showFeedback("There is an error with the reclass ranges.");      return;    }    WhiteboxRaster output=new WhiteboxRaster(outputHeader,"rw",inputHeader,WhiteboxRaster.DataType.FLOAT,noData);    output.setPreferredPalette(image.getPreferredPalette());    if (blnAssignMode) {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] == reclassRange[1][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    } else {      for (row=0; row < rows; row++) {        data=image.getRowValues(row);        for (col=0; col < cols; col++) {          for (i=0; i < numReclassRanges; i++) {            if (data[col] >= reclassRange[1][i] && data[col] < reclassRange[2][i]) {              output.setValue(row,col,reclassRange[0][i]);              break;            }            if (i == numReclassRangesMinusOne) {              output.setValue(row,col,data[col]);            }          }        }        if (cancelOp) {          cancelOperation();          return;        }        progress=(float)(100f * row / (rows - 1));        updateProgress((int)progress);      }    }    image.close();    output.addMetadataEntry("Created by the " + getDescriptiveName() + " tool.");    output.addMetadataEntry("Created on " + new Date());    output.close();    returnData(outputHeader);  } catch (  OutOfMemoryError oe) {    myHost.showFeedback("An out-of-memory error has occurred during operation.");  }catch (  Exception e) {    myHost.showFeedback("An error has occurred during operation. See log file for details.");    myHost.logException("Error in " + getDescriptiveName(),e);  } finally {    updateProgress("Progress: ",0);    amIActive=false;    myHost.pluginComplete();  }}  }
class C{  @Override public synchronized void invalidate(String key,boolean fullExpire){  Entry entry=get(key);  if (entry != null) {    entry.softTtl=0;    if (fullExpire) {      entry.ttl=0;    }    put(key,entry);  }}  }
class C{  public boolean isGradleSdkHome(String gradleHomePath){  return isGradleSdkHome(new File(gradleHomePath));}  }
class C{  private static void deleteFilesByDirectory(File directory){  if (directory != null && directory.exists() && directory.isDirectory())   for (  File item : directory.listFiles())   item.delete();}  }
class C{  public StrBuilder trim(){  if (size == 0) {    return this;  }  int len=size;  final char[] buf=buffer;  int pos=0;  while (pos < len && buf[pos] <= ' ') {    pos++;  }  while (pos < len && buf[len - 1] <= ' ') {    len--;  }  if (len < size) {    delete(len,size);  }  if (pos > 0) {    delete(0,pos);  }  return this;}  }
class C{  static void predictLeafIndex(Predictor predictor,List<SimpleEntry<Integer,FVec>> data){  int count=0;  for (  SimpleEntry<Integer,FVec> pair : data) {    int[] leafIndexes=predictor.predictLeaf(pair.getValue());    System.out.printf("leafIndexes[%d]: %s%s",count++,Arrays.toString(leafIndexes),System.lineSeparator());  }}  }
class C{  public static Graph replaceNodes(Graph originalGraph,List<Node> newVariables){  Graph reference=new EdgeListGraph(newVariables);  Graph convertedGraph=new EdgeListGraph(newVariables);  for (  Edge edge : originalGraph.getEdges()) {    Node node1=reference.getNode(edge.getNode1().getName());    Node node2=reference.getNode(edge.getNode2().getName());    if (node1 == null) {      node1=edge.getNode1();      if (!convertedGraph.containsNode(node1)) {        convertedGraph.addNode(node1);      }    }    if (node2 == null) {      node2=edge.getNode2();      if (!convertedGraph.containsNode(node2)) {        convertedGraph.addNode(node2);      }    }    if (!convertedGraph.containsNode(node1)) {      convertedGraph.addNode(node1);    }    if (!convertedGraph.containsNode(node2)) {      convertedGraph.addNode(node2);    }    if (node1 == null) {      throw new IllegalArgumentException("Couldn't find a node by the name " + edge.getNode1().getName() + " among the new variables for the converted graph ("+ newVariables+ ").");    }    if (node2 == null) {      throw new IllegalArgumentException("Couldn't find a node by the name " + edge.getNode2().getName() + " among the new variables for the converted graph ("+ newVariables+ ").");    }    Endpoint endpoint1=edge.getEndpoint1();    Endpoint endpoint2=edge.getEndpoint2();    Edge newEdge=new Edge(node1,node2,endpoint1,endpoint2);    convertedGraph.addEdge(newEdge);  }  for (  Triple triple : originalGraph.getUnderLines()) {    convertedGraph.addUnderlineTriple(convertedGraph.getNode(triple.getX().getName()),convertedGraph.getNode(triple.getY().getName()),convertedGraph.getNode(triple.getZ().getName()));  }  for (  Triple triple : originalGraph.getDottedUnderlines()) {    convertedGraph.addDottedUnderlineTriple(convertedGraph.getNode(triple.getX().getName()),convertedGraph.getNode(triple.getY().getName()),convertedGraph.getNode(triple.getZ().getName()));  }  for (  Triple triple : originalGraph.getAmbiguousTriples()) {    convertedGraph.addAmbiguousTriple(convertedGraph.getNode(triple.getX().getName()),convertedGraph.getNode(triple.getY().getName()),convertedGraph.getNode(triple.getZ().getName()));  }  return convertedGraph;}  }
class C{  public FBCachedBlob(byte[] data){  blobData=data;}  }
class C{  @Override public void emitTuples(){  final int TUPLE_SIZE_COPY=tupleSize;  final boolean EMIT_SAME_TUPLE_COPY=emitSameTuple;  if (firstTime) {    if (EMIT_SAME_TUPLE_COPY) {      for (int i=count--; i-- > 0; ) {        output.emit(sameTupleArray);      }    } else {      for (int i=count--; i-- > 0; ) {        output.emit(new byte[TUPLE_SIZE_COPY]);      }    }    firstTime=false;  } else {    if (EMIT_SAME_TUPLE_COPY) {      output.emit(sameTupleArray);    } else {      output.emit(new byte[TUPLE_SIZE_COPY]);    }    count++;  }}  }
class C{  public void updateBandwidth(){  try {    String sDown=GUIUtils.rate2speed(GUIMediator.instance().getBTDownloadMediator().getDownloadsBandwidth());    String sUp=GUIUtils.rate2speed(GUIMediator.instance().getBTDownloadMediator().getUploadsBandwidth());    int downloads=GUIMediator.instance().getCurrentDownloads();    int uploads=GUIMediator.instance().getCurrentUploads();    _bandwidthUsageDown.setText(downloads + " @ " + sDown);    _bandwidthUsageUp.setText(uploads + " @ " + sUp);  } catch (  Throwable ignored) {  }}  }
class C{  public int iterativeSize(){  IntList p=this;  int size=0;  while (p != null) {    size+=1;    p=p.tail;  }  return size;}  }
class C{  private static void shutdown() throws Exception {  try (IDiagnosticsContextScope diagCtxt=DiagnosticsContextFactory.createContext("IDM Shutdown","")){    logger.info("Stopping IDM Server...");    if (registry != null) {      logger.debug("Unbinding the registry...");      registry.unbind(IDENTITY_MANAGER_BIND_NAME);    }    stopHeartbeat();    logger.info("IDM Server has stopped");  } catch (  Throwable t) {    logger.error(VmEvent.SERVER_ERROR,"IDM Server failed to stop",t);    throw t;  }}  }
class C{  public InstantiatedType instantiate(ReferenceType... typeArguments){  if (typeArguments.length != this.getTypeParameters().size()) {    throw new IllegalArgumentException("number of arguments and parameters must match");  }  Substitution<ReferenceType> substitution=Substitution.forArgs(this.getTypeParameters(),typeArguments);  for (int i=0; i < parameters.size(); i++) {    if (!parameters.get(i).getUpperTypeBound().isUpperBound(typeArguments[i],substitution)) {      throw new IllegalArgumentException("type argument " + typeArguments[i] + " does not match parameter bound "+ parameters.get(i).getUpperTypeBound());    }  }  return this.apply(substitution);}  }
class C{  public MoreLikeThisQueryBuilder unlike(Item... unlikeItems){  this.unlikeItems=new ArrayList<>();  return addUnlikeItem(unlikeItems);}  }
class C{  public static void validateUTF8(byte[] utf8,int start,int len) throws MalformedInputException {  int count=start;  int leadByte=0;  int length=0;  int state=LEAD_BYTE;  while (count < start + len) {    int aByte=utf8[count] & 0xFF;switch (state) {case LEAD_BYTE:      leadByte=aByte;    length=bytesFromUTF8[aByte];switch (length) {case 0:    if (leadByte > 0x7F) {      throw new MalformedInputException(count);    }  break;case 1:if (leadByte < 0xC2 || leadByte > 0xDF) {  throw new MalformedInputException(count);}state=TRAIL_BYTE_1;break;case 2:if (leadByte < 0xE0 || leadByte > 0xEF) {throw new MalformedInputException(count);}state=TRAIL_BYTE_1;break;case 3:if (leadByte < 0xF0 || leadByte > 0xF4) {throw new MalformedInputException(count);}state=TRAIL_BYTE_1;break;default :throw new MalformedInputException(count);}break;case TRAIL_BYTE_1:if (leadByte == 0xF0 && aByte < 0x90) {throw new MalformedInputException(count);}if (leadByte == 0xF4 && aByte > 0x8F) {throw new MalformedInputException(count);}if (leadByte == 0xE0 && aByte < 0xA0) {throw new MalformedInputException(count);}if (leadByte == 0xED && aByte > 0x9F) {throw new MalformedInputException(count);}case TRAIL_BYTE:if (aByte < 0x80 || aByte > 0xBF) {throw new MalformedInputException(count);}if (--length == 0) {state=LEAD_BYTE;} else {state=TRAIL_BYTE;}break;default :break;}count++;}}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public Header(ByteProvider byteProvider) throws IOException {  MXFPropertyPopulator.populateField(byteProvider,this,"numberOfElements");  MXFPropertyPopulator.populateField(byteProvider,this,"sizeOfElement");}  }
class C{  public void testConsumeQueue() throws Exception {  MessageProducer producer=createProducer(0);  consumerDestination=session.createQueue(getConsumerSubject());  producerDestination=session.createQueue(getProducerSubject());  MessageConsumer consumer=createConsumer();  connection.start();  for (int i=0; i < data.length; i++) {    Message message=session.createTextMessage(data[i]);    message.setStringProperty("stringProperty",data[i]);    message.setIntProperty("intProperty",i);    if (verbose) {      if (LOG.isDebugEnabled()) {        LOG.debug("About to send a queue message: " + message + " with text: "+ data[i]);      }    }    producer.send(producerDestination,message);  }  assertNotNull(consumer.receive(1000));}  }
class C{  public ThisTypeRefNominal createThisTypeRefNominal(){  ThisTypeRefNominalImpl thisTypeRefNominal=new ThisTypeRefNominalImpl();  return thisTypeRefNominal;}  }
class C{  public static String stringArrayToIndentedString(String[] A,int indent){  if (A.length == 0) {    return A[0];  }  String result=A[0];  for (int i=1; i < A.length; i++) {    result=result + "\n" + StringHelper.copyString(" ",indent)+ A[i];  }  return result;}  }
class C{  public WebBasketLine add(int M_Product_ID,String Name,BigDecimal Qty,BigDecimal Price){  for (int i=0; i < m_lines.size(); i++) {    WebBasketLine wbl=(WebBasketLine)m_lines.get(i);    if (wbl.getM_Product_ID() == M_Product_ID) {      wbl.addQuantity(Qty);      getTotal(true);      return wbl;    }  }  WebBasketLine wbl=new WebBasketLine(M_Product_ID,Name,Qty,Price);  return add(wbl);}  }
class C{  public Instances resampleWithWeights(Random random,double[] weights,boolean[] sampled,boolean representUsingWeights){  if (weights.length != numInstances()) {    throw new IllegalArgumentException("weights.length != numInstances.");  }  Instances newData=new Instances(this,numInstances());  if (numInstances() == 0) {    return newData;  }  double[] P=new double[weights.length];  System.arraycopy(weights,0,P,0,weights.length);  Utils.normalize(P);  double[] Q=new double[weights.length];  int[] A=new int[weights.length];  int[] W=new int[weights.length];  int M=weights.length;  int NN=-1;  int NP=M;  for (int I=0; I < M; I++) {    if (P[I] < 0) {      throw new IllegalArgumentException("Weights have to be positive.");    }    Q[I]=M * P[I];    if (Q[I] < 1.0) {      W[++NN]=I;    } else {      W[--NP]=I;    }  }  if (NN > -1 && NP < M) {    for (int S=0; S < M - 1; S++) {      int I=W[S];      int J=W[NP];      A[I]=J;      Q[J]+=Q[I] - 1.0;      if (Q[J] < 1.0) {        NP++;      }      if (NP >= M) {        break;      }    }  }  for (int I=0; I < M; I++) {    Q[I]+=I;  }  int[] counts=null;  if (representUsingWeights) {    counts=new int[M];  }  for (int i=0; i < numInstances(); i++) {    int ALRV;    double U=M * random.nextDouble();    int I=(int)U;    if (U < Q[I]) {      ALRV=I;    } else {      ALRV=A[I];    }    if (representUsingWeights) {      counts[ALRV]++;    } else {      newData.add(instance(ALRV));    }    if (sampled != null) {      sampled[ALRV]=true;    }    if (!representUsingWeights) {      newData.instance(newData.numInstances() - 1).setWeight(1);    }  }  if (representUsingWeights) {    for (int i=0; i < counts.length; i++) {      if (counts[i] > 0) {        newData.add(instance(i));        newData.instance(newData.numInstances() - 1).setWeight(counts[i]);      }    }  }  return newData;}  }
class C{  public void writeBorders(){  write(this.linenum,0,this.linenum + 1,0);  write(this.linenum,this.chars_per_line + 1,this.linenum + 1,this.chars_per_line + 1);}  }
class C{  public synchronized boolean repeatRequest(boolean showRationale){  if (messageSent) {    return false;  }  try {    Message msg=Message.obtain();    msg.what=PermissiveHandler.REPEAT_REQUEST;    msg.arg1=showRationale ? 1 : 0;    messenger.send(msg);    messageSent=true;    return true;  } catch (  RemoteException e) {    if (DEBUG) {      Log.w(TAG,e);    }    return false;  }}  }
class C{  public void disableCGCopy(FunctionalAPIImpl impl,ConsistencyGroupCopyUID cgCopy) throws RecoverPointException {  String cgName=null;  String cgCopyName=null;  try {    cgCopyName=impl.getGroupCopyName(cgCopy);    cgName=impl.getGroupName(cgCopy.getGroupUID());    boolean startTransfer=true;    logger.info(String.format("Attempting to disable the image for copy %s in consistency group %s",cgCopyName,cgName));    try {      impl.disableImageAccess(cgCopy,startTransfer);    } catch (    FunctionalAPIActionFailedException_Exception e) {      logger.info(String.format("Disable the image failed for copy %s in consistency group %s. Try again",cgCopyName,cgName));      try {        Thread.sleep(Long.valueOf(disableRetrySleepTimeSeconds * numMillisInSecond));      } catch (      InterruptedException e1) {      }      impl.disableImageAccess(cgCopy,startTransfer);    }    waitForCGCopyState(impl,cgCopy,StorageAccessState.NO_ACCESS);    logger.info(String.format("Successfully disabled image for copy %s in consistency group %s",cgCopyName,cgName));  } catch (  FunctionalAPIActionFailedException_Exception|FunctionalAPIInternalError_Exception|InterruptedException e) {    throw RecoverPointException.exceptions.failedToDisableCopy(cgCopyName,cgName,e);  }}  }
class C{  private byte[] generateChallenge(List<String> realms,String qopStr,String cipherStr) throws UnsupportedEncodingException, IOException {  ByteArrayOutputStream out=new ByteArrayOutputStream();  for (int i=0; realms != null && i < realms.size(); i++) {    out.write("realm=\"".getBytes(encoding));    writeQuotedStringValue(out,realms.get(i).getBytes(encoding));    out.write('"');    out.write(',');  }  out.write(("nonce=\"").getBytes(encoding));  nonce=generateNonce();  writeQuotedStringValue(out,nonce);  out.write('"');  out.write(',');  if (qopStr != null) {    out.write(("qop=\"").getBytes(encoding));    writeQuotedStringValue(out,qopStr.getBytes(encoding));    out.write('"');    out.write(',');  }  if (recvMaxBufSize != DEFAULT_MAXBUF) {    out.write(("maxbuf=\"" + recvMaxBufSize + "\",").getBytes(encoding));  }  if (useUTF8) {    out.write(UTF8_DIRECTIVE.getBytes(encoding));  }  if (cipherStr != null) {    out.write("cipher=\"".getBytes(encoding));    writeQuotedStringValue(out,cipherStr.getBytes(encoding));    out.write('"');    out.write(',');  }  out.write(ALGORITHM_DIRECTIVE.getBytes(encoding));  return out.toByteArray();}  }
class C{  public final Vertex dest(){  return sym().orig();}  }
class C{  public FilePath append(FilePath subPath){  return append(subPath.elements());}  }
class C{  private CharsToNameCanonicalizer(){  _canonicalize=true;  _intern=true;  _dirty=true;  _hashSeed=0;  _longestCollisionList=0;  initTables(DEFAULT_TABLE_SIZE);}  }
class C{  public Bitmap toBitmap(){  if (mSize == -1) {    this.actionBarSize();  }  final Bitmap bitmap=Bitmap.createBitmap(this.getIntrinsicWidth(),this.getIntrinsicHeight(),Bitmap.Config.ARGB_8888);  this.style(Paint.Style.FILL);  final Canvas canvas=new Canvas(bitmap);  this.setBounds(0,0,canvas.getWidth(),canvas.getHeight());  this.draw(canvas);  return bitmap;}  }
class C{  public void addListener(ConnectableDeviceListener listener){  if (!listeners.contains(listener)) {    listeners.add(listener);  }}  }
class C{  private void interpretJcc(final ReilInstruction instruction,final String programCounter){  final Pair<Boolean,BigInteger> firstValue=loadLongValue(instruction.getFirstOperand());  if (!firstValue.second().equals(BigInteger.ZERO) && (instruction.getThirdOperand().getType() == OperandType.SUB_ADDRESS)) {    final String[] parts=instruction.getThirdOperand().getValue().split("\\.");    assert parts.length == 2;    setRegister(programCounter,new BigInteger(parts[0]),OperandSize.DWORD,ReilRegisterStatus.DEFINED);    setRegister(SUB_PC,new BigInteger(parts[1]),OperandSize.DWORD,ReilRegisterStatus.DEFINED);  } else   if (!firstValue.second().equals(BigInteger.ZERO)) {    final Pair<Boolean,BigInteger> secondValue=loadLongValue(instruction.getThirdOperand());    setRegister(programCounter,secondValue.second(),OperandSize.DWORD,ReilRegisterStatus.DEFINED);  }}  }
class C{  @Override public String toString(){  if (eIsProxy())   return super.toString();  StringBuffer result=new StringBuffer(super.toString());  result.append(" (character: ");  result.append(character);  result.append(", sequence: ");  result.append(sequence);  result.append(')');  return result.toString();}  }
class C{  private int checkInterruptWhileWaiting(Node node){  return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0;}  }
class C{  private Name lambdaName(){  return names.lambda.append(names.fromString(enclosingMethodName() + "$" + lambdaCount++));}  }
class C{  public static byte[] generatePrivateID(AsymmetricCipherKeyPair id){  return encodeDHPrivateKey((DHPrivateKeyParameters)id.getPrivate());}  }
class C{  public static void writeStaticField(final Class<?> cls,final String fieldName,final Object value,final boolean forceAccess) throws IllegalAccessException {  Field field=FieldUtils.getField(cls,fieldName,forceAccess);  if (field == null) {    throw new IllegalArgumentException("Cannot locate field " + fieldName + " on "+ cls);  }  FieldUtils.writeStaticField(field,value);}  }
class C{  public ShoppingCartItem findCartItem(int index){  if (cartLines.size() <= index) {    return null;  }  return cartLines.get(index);}  }
class C{  public SingletonTask(ScheduledExecutorService ses,Runnable task){  super();  this.task=task;  this.ses=ses;}  }
class C{  public void append(byte[] src){  append(src,0,src.length);}  }
class C{  public String readPersistentString(String key){  try {    if (checkService()) {      byte[] bytes=sService.readPersistentBytes(key);      if (bytes != null) {        return new String(bytes,"UTF-8");      }    }  } catch (  RemoteException e) {  }catch (  UnsupportedEncodingException e) {    Log.e(TAG,e.getMessage(),e);  }  return null;}  }
class C{  static int parse(String c){  try {    int skipInitial, skipBetween;    if (c.charAt(0) == '#') {      skipInitial=1;      skipBetween=0;    } else     if (c.startsWith("rgb:")) {      skipInitial=4;      skipBetween=1;    } else {      return 0;    }    int charsForColors=c.length() - skipInitial - 2 * skipBetween;    if (charsForColors % 3 != 0)     return 0;    int componentLength=charsForColors / 3;    double mult=255 / (Math.pow(2,componentLength * 4) - 1);    int currentPosition=skipInitial;    String rString=c.substring(currentPosition,currentPosition + componentLength);    currentPosition+=componentLength + skipBetween;    String gString=c.substring(currentPosition,currentPosition + componentLength);    currentPosition+=componentLength + skipBetween;    String bString=c.substring(currentPosition,currentPosition + componentLength);    int r=(int)(Integer.parseInt(rString,16) * mult);    int g=(int)(Integer.parseInt(gString,16) * mult);    int b=(int)(Integer.parseInt(bString,16) * mult);    return 0xFF << 24 | r << 16 | g << 8 | b;  } catch (  NumberFormatException|IndexOutOfBoundsException e) {    return 0;  }}  }
class C{  public void onLineChange(Context cx,int lineno){  this.lineNumber=lineno;  if (!breakpoints[lineno] && !dim.breakFlag) {    boolean lineBreak=contextData.breakNextLine;    if (lineBreak && contextData.stopAtFrameDepth >= 0) {      lineBreak=(contextData.frameCount() <= contextData.stopAtFrameDepth);    }    if (!lineBreak) {      return;    }    contextData.stopAtFrameDepth=-1;    contextData.breakNextLine=false;  }  dim.handleBreakpointHit(this,cx);}  }
class C{  public void testListFilesPathDoesNotExist() throws Exception {  Collection<IgfsFile> paths=null;  try {    paths=igfs.listFiles(SUBDIR);  } catch (  IgniteException ignore) {  }  assert paths == null || paths.isEmpty();}  }
class C{  public static double clamp(double value,double min,double max){  return value > max ? max : (value < min ? min : value);}  }
class C{  static final int hash(Object key){  int h;  return (key == null) ? 0 : (h=key.hashCode()) ^ (h >>> 16);}  }
class C{  public static double deriv(double pred,double y,double c){  double x=pred - y;  if (Math.abs(x) <= c)   return x; else   return c * Math.signum(x);}  }
class C{  public IsilonList<IsilonSmartQuota> listQuotas(String resumeToken) throws IsilonException {  return list(_baseUrl.resolve(URI_QUOTAS),"quotas",IsilonSmartQuota.class,resumeToken);}  }
class C{  public void opc_checkcast(short classIndex){  emitByte(opc_checkcast);  emitShort(classIndex);}  }
class C{  @HLEFunction(nid=0x2C8E6AB3,version=150,checkInsideInterrupt=true) public int __sceSasGetPauseFlag(int sasCore){  checkSasHandleGood(sasCore);  int pauseFlag=0;  for (int i=0; i < voices.length; i++) {    if (voices[i].isPaused()) {      pauseFlag|=(1 << i);    }  }  return pauseFlag;}  }
class C{  public static void main(String[] args){  String jVersion=System.getProperty("java.version");  if (!(jVersion.startsWith("1.5"))) {    JOptionPane.showMessageDialog(null,"Require Java Version 1.5 or up - Not " + jVersion,"AdempierePLAF - Version Conflict",JOptionPane.ERROR_MESSAGE);    System.exit(1);  }  Ini.loadProperties(true);  setPLAF();  if (args.length == 0) {    return;  }  String className=args[0];  Class<?> startClass=null;  try {    startClass=Class.forName(className);  } catch (  Exception e) {    log.severe("Did not find: " + className);    e.printStackTrace();    System.exit(1);  }  try {    Method[] methods=startClass.getMethods();    for (int i=0; i < methods.length; i++) {      if (Modifier.isStatic(methods[i].getModifiers()) && methods[i].getName().equals("main")) {        String[] startArgs=new String[args.length - 1];        for (int ii=1; ii < args.length; ii++)         startArgs[ii - i]=args[ii];        methods[i].invoke(null,new Object[]{startArgs});      }      return;    }  } catch (  Exception ee) {    log.severe("Problems invoking main");    ee.printStackTrace();  }  try {    startClass.newInstance();  } catch (  Exception e) {    log.severe("Cannot start: " + className);    e.printStackTrace();    System.exit(1);  }}  }
class C{  public static void writeElement(final XMLStreamWriter writer,final String elementName,final int value) throws XMLStreamException {  writer.writeStartElement(elementName);  writer.writeCharacters(XMLConvert.toString(value));  writer.writeEndElement();}  }
class C{  private void tryAllAddresses(String dstName,int dstPort,InetAddress localAddress,int localPort,boolean streaming) throws IOException {  InetAddress[] dstAddresses=InetAddress.getAllByName(dstName);  InetAddress dstAddress;  for (int i=0; i < dstAddresses.length - 1; i++) {    dstAddress=dstAddresses[i];    try {      checkDestination(dstAddress,dstPort);      startupSocket(dstAddress,dstPort,localAddress,localPort,streaming);      return;    } catch (    IOException ex) {    }  }  dstAddress=dstAddresses[dstAddresses.length - 1];  checkDestination(dstAddress,dstPort);  startupSocket(dstAddress,dstPort,localAddress,localPort,streaming);}  }
class C{  public SVGAttributedFigure(){}  }
class C{  public static TreebankNode selectMatchingLeaf(JCas jCas,Annotation annotation){  TreebankNode leaf=null;  for (  TreebankNode node : JCasUtil.selectCovered(jCas,TreebankNode.class,annotation)) {    if (node.getLeaf() && node.getBegin() == annotation.getBegin() && node.getEnd() == annotation.getEnd()) {      if (leaf == null) {        leaf=node;      } else {        throw new IllegalArgumentException(String.format("expected one leaf matching annotation %s, found %s",annotation,Arrays.asList(leaf,node)));      }    }  }  return leaf;}  }
class C{  protected void startVideoCall(){  if (!EMClient.getInstance().isConnected())   Toast.makeText(getActivity(),R.string.not_connect_to_server,Toast.LENGTH_SHORT).show(); else {    startActivity(new Intent(getActivity(),VideoCallActivity.class).putExtra("username",toChatUsername).putExtra("isComingCall",false));    inputMenu.hideExtendMenuContainer();  }}  }
class C{  protected JavadocTokenizer(ScannerFactory fac,CharBuffer buffer){  super(fac,buffer);}  }
class C{  public void findAndInit(Object someObj){  if (someObj instanceof MouseDelegator)   md=(MouseDelegator)someObj;  if (someObj instanceof MapBean) {    ((MapBean)someObj).addProjectionListener(this);    setProjection(((MapBean)someObj).getProjection().makeClone());  }  if (someObj instanceof LayerHandler) {    LayerHandler lh=(LayerHandler)someObj;    lh.addLayerListener(this);    setLayers(lh.getLayers());  }}  }
class C{  private void populateDefaultsForNewOrder(Order order){  order.setOrderType(DbUtil.getMiscOrderType());  order.setCareSetting(orderService.getCareSettingByName("Outpatient"));  order.setConcept(getFreeTextOrderConcept());  order.setUrgency(Order.Urgency.ON_SCHEDULED_DATE);}  }
class C{  public E argMax(){  double maxCount=Double.NEGATIVE_INFINITY;  E maxKey=null;  for (  final Map.Entry<E,Double> entry : entries.entrySet()) {    if (entry.getValue() > maxCount || maxKey == null) {      maxKey=entry.getKey();      maxCount=entry.getValue();    }  }  return maxKey;}  }
class C{  void activateConnectionDialog(){  if (JOptionPane.showOptionDialog(tableAggregate,connectionPanel,ConnectTitle,JOptionPane.DEFAULT_OPTION,JOptionPane.INFORMATION_MESSAGE,null,ConnectOptionNames,ConnectOptionNames[0]) == 0) {    connect();    frame.setVisible(true);  } else   if (!frame.isVisible()) {    System.exit(0);  }}  }
class C{  public static boolean testIdentifierType(PsiElement element,IElementType type){  if (element.getNode().getElementType() != BuckTypes.IDENTIFIER) {    return false;  }  return element.getParent() != null && element.getParent().getNode().getElementType() == type;}  }
class C{  @Override public boolean isAgentType(){  return type.isAgentType();}  }
class C{  public static Test suite(){  return (new TestSuite(TagIvarITCase.class));}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 13:02:39.130 -0500",hash_original_method="FD10061FB9DFD564FAB6BA17DFE98F77",hash_generated_method="7DBF5BD38DA526086B79259046E6CD8E") public boolean isDebuggerActive(){  return getTaintBoolean();}  }
class C{  @Override protected boolean isSwitchFor(EPackage ePackage){  return ePackage == modelPackage;}  }
class C{  @Override protected EClass eStaticClass(){  return UmplePackage.eINSTANCE.getMethodDeclarator_();}  }
class C{  private void loadFiles(String inputPath){  this.root=inputPath;  try {    log.info("Loading GTFS files from " + root);    loadStops();    loadCalendar();    loadCalendarDates();    loadShapes();    loadRoutes();    loadTrips();    loadStopTimes();    loadFrequencies();    log.info("All files loaded");  } catch (  IOException e) {    e.printStackTrace();  }}  }
class C{  public Pair<Set<String>,Set<String>> diff(Set<String> segmentsReceived){  Set<String> segmentsAdded;  Set<String> segmentsRemoved;synchronized (logSegments) {    Set<String> segmentsCached=logSegments.keySet();    segmentsAdded=Sets.difference(segmentsReceived,segmentsCached).immutableCopy();    segmentsRemoved=Sets.difference(segmentsCached,segmentsReceived).immutableCopy();  }  return Pair.of(segmentsAdded,segmentsRemoved);}  }
class C{  public void removeProgressListener(ChartProgressListener listener){  this.progressListeners.remove(ChartProgressListener.class,listener);}  }
class C{  public boolean contains(List<Integer> hashes){  Iterator<Integer> ni=hashes.iterator();  for (int i=0; i < hashFunctions; ++i) {    if (!testBit((int)((ni.next() & 0xFFFFFFFFL) % (filter.length * 8)))) {      return false;    }  }  return true;}  }
class C{  public Conversions(){}  }
class C{  public int bootloaderImageSize(){  return bootloaderSize;}  }
class C{  public final boolean sendMessageDelayed(Message msg,long delayMillis){  return mExec.sendMessageDelayed(msg,delayMillis);}  }
class C{  public boolean visit(FieldDeclaration node){  return true;}  }
class C{  public static RefactoringStatus checkMethodInType(ITypeBinding type,String methodName,ITypeBinding[] parameters){  RefactoringStatus result=new RefactoringStatus();  IMethodBinding method=org.eclipse.jdt.internal.corext.dom.Bindings.findMethodInType(type,methodName,parameters);  if (method != null) {    if (method.isConstructor()) {      result.addWarning(Messages.format(RefactoringCoreMessages.Checks_methodName_constructor,new Object[]{BasicElementLabels.getJavaElementName(type.getName())}));    } else {      result.addError(Messages.format(RefactoringCoreMessages.Checks_methodName_exists,new Object[]{BasicElementLabels.getJavaElementName(methodName),BasicElementLabels.getJavaElementName(type.getName())}),JavaStatusContext.create(method));    }  }  return result;}  }
class C{  public void addScript(Script script){  (scripts != null ? scripts : (scripts=new ArrayList<Script>())).add(script);}  }
class C{  private void checkEvents(THLParallelReadQueue prq,int expectedEvents,int expectedCtrlEvents) throws InterruptedException {  checkEvents(prq,expectedEvents,expectedCtrlEvents,0);}  }
class C{  private static void runTests(int pid) throws Throwable {  final String sep=File.separator;  String classpath=System.getProperty("test.class.path","") + File.pathSeparator + System.getProperty("test.jdk",".")+ sep+ "lib"+ sep+ "tools.jar";  String testSrc=System.getProperty("test.src","") + sep;  String[] args={"-classpath",classpath,"-Djava.security.manager",String.format("-Djava.security.policy=%sjava.policy.deny",testSrc),"PermissionTest$TestMain",Integer.toString(pid),"true"};  OutputAnalyzer output=ProcessTools.executeTestJvm(args);  output.shouldHaveExitValue(0);  args=new String[]{"-classpath",classpath,"-Djava.security.manager",String.format("-Djava.security.policy=%sjava.policy.allow",testSrc),"PermissionTest$TestMain",Integer.toString(pid),"false"};  output=ProcessTools.executeTestJvm(args);  output.shouldHaveExitValue(0);}  }
class C{  private static void updatePriceOption(PricedParameter ppWithNewValue,PricedOption existingPO){  for (  PricedOption newPo : ppWithNewValue.getPricedOptionList()) {    if (newPo.getParameterOptionKey() == existingPO.getParameterOptionKey()) {      existingPO.setPricePerSubscription(newPo.getPricePerSubscription());      existingPO.setPricePerUser(newPo.getPricePerUser());      existingPO.setRoleSpecificUserPrices(newPo.getRoleSpecificUserPrices());      break;    }  }}  }
class C{  public boolean isValueTypeEnumeration(){  return valueType == ParameterValueType.ENUMERATION;}  }
class C{  public String deleteEmptyBinsTipText(){  return "Whether to delete empty bins after discretization.";}  }
class C{  public void load(Reader aReader) throws IOException {  String line=null;  BufferedReader br=new BufferedReader(aReader);  while ((line=br.readLine()) != null) {    String[] words=line.trim().split("\\s|\\|");    if (words.length > 0 && words[0].trim().length() > 0) {      data.add(words[0].toLowerCase());    }  }}  }
class C{  private void buildChosenAnimation(int childIndex){  List<Animator> fadeOutTextTopAnimatorList=new ArrayList<>();  List<Animator> closeToBottomImageAnimatorList=new ArrayList<>();  for (int i=0; i < childIndex; i++) {    View view=mMenuWrapper.getChildAt(i);    resetVerticalAnimation(view,true);    closeToBottomImageAnimatorList.add(AnimatorUtils.rotationCloseVertical(view));    fadeOutTextTopAnimatorList.add(AnimatorUtils.fadeOutSet(mTextWrapper.getChildAt(i),mContext.getResources().getDimension(R.dimen.text_right_translation)));  }  AnimatorSet closeToBottom=new AnimatorSet();  closeToBottom.playSequentially(closeToBottomImageAnimatorList);  AnimatorSet fadeOutTop=new AnimatorSet();  fadeOutTop.playSequentially(fadeOutTextTopAnimatorList);  List<Animator> fadeOutTextBottomAnimatorList=new ArrayList<>();  List<Animator> closeToTopAnimatorObjects=new ArrayList<>();  for (int i=getItemCount() - 1; i > childIndex; i--) {    View view=mMenuWrapper.getChildAt(i);    resetVerticalAnimation(view,false);    closeToTopAnimatorObjects.add(AnimatorUtils.rotationCloseVertical(view));    fadeOutTextBottomAnimatorList.add(AnimatorUtils.fadeOutSet(mTextWrapper.getChildAt(i),mContext.getResources().getDimension(R.dimen.text_right_translation)));  }  AnimatorSet closeToTop=new AnimatorSet();  closeToTop.playSequentially(closeToTopAnimatorObjects);  AnimatorSet fadeOutBottom=new AnimatorSet();  fadeOutBottom.playSequentially(fadeOutTextBottomAnimatorList);  resetSideAnimation(mMenuWrapper.getChildAt(childIndex));  ObjectAnimator closeToRight=AnimatorUtils.rotationCloseToRight(mMenuWrapper.getChildAt(childIndex));  closeToRight.addListener(mChosenItemFinishAnimatorListener);  AnimatorSet fadeOutChosenText=AnimatorUtils.fadeOutSet(mTextWrapper.getChildAt(childIndex),mContext.getResources().getDimension(R.dimen.text_right_translation));  AnimatorSet imageFullAnimatorSet=new AnimatorSet();  imageFullAnimatorSet.play(closeToBottom).with(closeToTop);  AnimatorSet textFullAnimatorSet=new AnimatorSet();  textFullAnimatorSet.play(fadeOutTop).with(fadeOutBottom);  if (closeToBottomImageAnimatorList.size() >= closeToTopAnimatorObjects.size()) {    imageFullAnimatorSet.play(closeToBottom).before(closeToRight);    textFullAnimatorSet.play(fadeOutTop).before(fadeOutChosenText);  } else {    imageFullAnimatorSet.play(closeToTop).before(closeToRight);    textFullAnimatorSet.play(fadeOutBottom).before(fadeOutChosenText);  }  AnimatorSet fullAnimatorSet=new AnimatorSet();  fullAnimatorSet.playTogether(imageFullAnimatorSet,textFullAnimatorSet);  fullAnimatorSet.setDuration(mAnimationDurationMilis);  fullAnimatorSet.setInterpolator(new HesitateInterpolator());  fullAnimatorSet.start();}  }
class C{  @Override public Void visitType(TypeElement e,Void p){  scan(e.getTypeParameters(),p);  checkCamelCase(e,true);  super.visitType(e,p);  return null;}  }
class C{  public static void show(Context context,int titleResId,int urlResId){  if (context == null)   return;  Intent intent=new Intent(Intent.ACTION_VIEW);  intent.setClassName(context,EmbedContentViewActivity.class.getName());  if (context instanceof Activity) {    intent.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT | Intent.FLAG_ACTIVITY_SINGLE_TOP);  } else {    intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);  }  intent.putExtra(TITLE_INTENT_EXTRA,titleResId);  intent.putExtra(URL_INTENT_EXTRA,urlResId);  context.startActivity(intent);}  }
class C{  public void writeStartDocument(String encoding,String version) throws XMLStreamException {  writeStartDocument(encoding,version,null);}  }
class C{  public void success(byte[] message){  sendPluginResult(new PluginResult(PluginResult.Status.OK,message));}  }
class C{  private boolean add(BasedNumberElement e){  assert e != null;  if (isTop())   return false;  set.add(e);  if (set.size() > bound) {    set=FULL_SET;    return false;  } else {    return true;  }}  }
class C{  public void logPurchase(BigDecimal purchaseAmount,Currency currency){  logPurchase(purchaseAmount,currency,null);}  }
class C{  private void sendBlob(String index,byte[] blob){  sendInstruction(new GuacamoleInstruction("blob",index,DatatypeConverter.printBase64Binary(blob)));}  }
class C{  public FloatIterator(float[] primitiveArray){  super(primitiveArray);}  }
class C{  public JCheckBoxMenuItem(String text,Icon icon){  this(text,icon,false);}  }
class C{  public boolean hits(Span s){  return start < s.getEnd() && s.getStart() < end;}  }
class C{  public boolean hasNotifications(String tag){  return CENTER.hasEntries(tag);}  }
class C{  public static <K,V>boolean isEmpty(Map<K,V> map){  return (map == null || map.size() == 0);}  }
class C{  @Bean public SessionRegistry sessionRegistry(){  return new SessionRegistryImpl();}  }
class C{  public static Criteria WHERE(){  return new Example().createCriteria();}  }
class C{  public static Vec4 fromDoubleArray(double[] array,int offset,int length){  if (array == null) {    throw new IllegalArgumentException("Array Is Null");  }  if (offset < 0) {    throw new IllegalArgumentException("Offset Is Invalid");  }  if (length < 1) {    throw new IllegalArgumentException("Length Is Invalid");  }  if (array.length < offset + length) {    throw new IllegalArgumentException("Array Invalid Length");  }  if (length == 1)   return new Vec4(array[offset],0d);  if (length == 2)   return new Vec4(array[offset],array[offset + 1]);  if (length == 3)   return new Vec4(array[offset],array[offset + 1],array[offset + 2]);  return new Vec4(array[offset],array[offset + 1],array[offset + 2],array[offset + 3]);}  }
class C{  public DefaultLmlSyntax(){  registerTags();  registerAttributes();}  }
class C{  @Override public void drawScreen(int par1,int par2,float par3){  drawBackground(0);  drawCenteredString(fontRendererObj,"Zoom Manager",width / 2,40,0xffffff);  drawString(fontRendererObj,"Zoom Level: " + WurstClient.INSTANCE.options.zoom.level + " x normal",width / 2 - 75,height / 4 + 44,0xcccccc);  super.drawScreen(par1,par2,par3);}  }
class C{  public NetworkRestRep update(URI id,NetworkUpdate input){  return client.put(NetworkRestRep.class,input,getIdUrl(),id);}  }
class C{  public Chain branch(int opcode){  Chain result=null;  if (opcode == goto_) {    result=pendingJumps;    pendingJumps=null;  }  if (opcode != dontgoto && isAlive()) {    result=new Chain(emitJump(opcode),result,state.dup());    fixedPc=fatcode;    if (opcode == goto_)     alive=false;  }  return result;}  }
class C{  @Override public boolean supportsCorrelatedSubqueries(){  debugCodeCall("supportsCorrelatedSubqueries");  return true;}  }
class C{  public static RoutingService.Builder buildRoutingService(RoutingService routingService){  return new RoutingServiceProvider(routingService);}  }
class C{  @SuppressWarnings("unchecked") private Collection<GraphEdgeMatcherDescriptor> loadEdgeMatchers(ObjectXmlPersist persist,IFile file) throws IOException {  return (Collection<GraphEdgeMatcherDescriptor>)persist.load(file.getLocationURI());}  }
class C{  public void testEncode(){  byte[] expectedReturn=msgFixture.connectionId;  connectionIdAttribute.setConnectionIdValue(MsgFixture.CONNECTION_ID);  byte[] actualReturn=connectionIdAttribute.encode();  assertTrue("ConnectionIdAttribute.encode() did not " + "properly encode a sample attribute",Arrays.equals(expectedReturn,actualReturn));}  }
class C{  private static void printVolumeFeed(VolumeFeed volumeFeed) throws IOException, ServiceException {  String title=volumeFeed.getTitle().getPlainText();  System.out.println(title);  List<VolumeEntry> volumeEntries=volumeFeed.getEntries();  if (volumeEntries.size() == 0) {    System.out.println("This feed contains no entries.");    return;  }  System.out.println("Results " + volumeFeed.getStartIndex() + " - "+ (volumeFeed.getStartIndex() + volumeEntries.size() - 1)+ " of "+ volumeFeed.getTotalResults());  System.out.println();  int count=1;  for (  VolumeEntry entry : volumeEntries) {    System.out.println("(Volume #" + String.valueOf(count) + ")");    printVolumeEntry(entry);    count++;  }  System.out.println();}  }
class C{  public List<JCVariableDecl> Params(List<Type> argtypes,Symbol owner){  ListBuffer<JCVariableDecl> params=new ListBuffer<JCVariableDecl>();  MethodSymbol mth=(owner.kind == MTH) ? ((MethodSymbol)owner) : null;  if (mth != null && mth.params != null && argtypes.length() == mth.params.length()) {    for (    VarSymbol param : ((MethodSymbol)owner).params)     params.append(VarDef(param,null));  } else {    int i=0;    for (List<Type> l=argtypes; l.nonEmpty(); l=l.tail)     params.append(Param(paramName(i++),l.head,owner));  }  return params.toList();}  }
class C{  public static AllocationMethod newInstance(){  final AllocationMethod returnInstance=new AllocationMethod();  returnInstance.setDefaultCode();  return returnInstance;}  }
class C{  public void accept(final MethodVisitor mv){  AbstractInsnNode insn=first;  while (insn != null) {    insn.accept(mv);    insn=insn.next;  }}  }
class C{  private HttpUrl.Builder withIncluded(HttpUrl.Builder endpoint){  return endpoint.addQueryParameter(Oddworks.QUERY_PARAM_INCLUDE,"true");}  }
class C{  public Comms(EventHandler parent,int port) throws IOException {  this.parent=parent;  this.isServer=true;  this.port=port;  parent.debug("Creating server");  networkThread=new SocketThread();  new Thread(networkThread).start();  waitForThreadInit(2000);  if (networkThread.thrownIOException != null) {    throw networkThread.thrownIOException;  }}  }
class C{  public void visitLookupSwitchInsn(Label dflt,int[] keys,Label[] labels){  if (mv != null) {    mv.visitLookupSwitchInsn(dflt,keys,labels);  }}  }
class C{  @Inline @Override public final void addressWrite(ObjectReference ref,Address target,Word offset,Word location,int mode){  Magic.setAddressAtOffset(ref.toObject(),offset.toOffset(),target,location.toInt());}  }
class C{  public CopyOnWriteMap(int initialCapacity){  internalMap=new HashMap<K,V>(initialCapacity);}  }
class C{  private static boolean shouldParkAfterFailedAcquire(Node pred,Node node){  int ws=pred.waitStatus;  if (ws == Node.SIGNAL)   return true;  if (ws > 0) {    do {      node.prev=pred=pred.prev;    } while (pred.waitStatus > 0);    pred.next=node;  } else {    compareAndSetWaitStatus(pred,ws,Node.SIGNAL);  }  return false;}  }
class C{  protected static String colAlias(String str){  if (str == null)   return null;  String[] arr=str.split(" [aA][sS] ");  if (arr.length == 2)   return arr[1].trim(); else   return null;}  }
class C{  @Override protected void onDestroy(){  super.onDestroy();  if (mPreview != null) {    mPreview.release();  }}  }
class C{  public static String formatTextBox(String text,int width){  requireNonNull(text);  return formatTextBox(text,width,WORDS,Collections.emptySet());}  }
class C{  public TransportServiceEvent(Object source,TYPE type){  super(source);  this.type=type;}  }
class C{  public static Boolean toBoolean(long l){  return l != 0 ? Boolean.TRUE : Boolean.FALSE;}  }
class C{  public LinkedList<Patch> patch_make(LinkedList<Diff> diffs){  if (diffs == null) {    throw new IllegalArgumentException("Null inputs. (patch_make)");  }  String text1=diff_text1(diffs);  return patch_make(text1,diffs);}  }
class C{  void helpDelete(Node<K,V> b,Node<K,V> f){  if (f == next && this == b.next) {    if (f == null || f.value != f)     casNext(f,new Node<K,V>(f)); else     b.casNext(this,f.next);  }}  }
class C{  public final AnimatedTexture toAnimatedTexture(AnimationChannel defaultChannel){  return new AnimatedTexture(getImage(),defaultChannel);}  }
class C{  private Object toDate(final Class type,final String value){  if (type.equals(java.sql.Date.class)) {    try {      return java.sql.Date.valueOf(value);    } catch (    IllegalArgumentException e) {      throw new ConversionException("String must be in JDBC format [yyyy-MM-dd] to create a java.sql.Date");    }  }  if (type.equals(java.sql.Time.class)) {    try {      return java.sql.Time.valueOf(value);    } catch (    IllegalArgumentException e) {      throw new ConversionException("String must be in JDBC format [HH:mm:ss] to create a java.sql.Time");    }  }  if (type.equals(java.sql.Timestamp.class)) {    try {      return java.sql.Timestamp.valueOf(value);    } catch (    IllegalArgumentException e) {      throw new ConversionException("String must be in JDBC format [yyyy-MM-dd HH:mm:ss.fffffffff] " + "to create a java.sql.Timestamp");    }  }  String msg=this.toString(this.getClass()) + " does not support default String to '" + this.toString(type)+ "' conversion.";  throw new ConversionException(msg);}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  public synchronized boolean hasChanged(){  return changed;}  }
class C{  public void doRun(Integer prNumber){  if (not(isBuildable()).apply(job)) {    LOGGER.debug("Job {} is disabled, but trigger run!",isNull(job) ? "<no job>" : job.getFullName());    return;  }  if (!isSupportedTriggerMode(getTriggerMode())) {    LOGGER.warn("Trigger mode {} is not supported yet ({})",getTriggerMode(),job.getFullName());    return;  }  GitHubPRRepository localRepository=job.getAction(GitHubPRRepository.class);  if (isNull(localRepository)) {    LOGGER.warn("Can't get repository info, maybe project {} misconfigured?",job.getFullName());    return;  }  List<GitHubPRCause> causes;  try (LoggingTaskListenerWrapper listener=new LoggingTaskListenerWrapper(getPollingLogAction().getPollingLogFile(),UTF_8)){    long startTime=System.currentTimeMillis();    listener.debug("Running GitHub Pull Request trigger check for {} on {}",getDateTimeInstance().format(new Date(startTime)),localRepository.getFullName());    causes=readyToBuildCauses(localRepository,listener,prNumber);    localRepository.saveQuietly();    long duration=System.currentTimeMillis() - startTime;    listener.info(FINISH_MSG + " for {} at {}. Duration: {}ms",localRepository.getFullName(),getDateTimeInstance().format(new Date()),duration);  } catch (  Exception e) {    LOGGER.error("Can't process check ({})",e.getMessage(),e);    return;  }  from(causes).filter(new JobRunnerForCause(job,this)).toSet();}  }
class C{  public static void printSystemInfo(){  err("Java version:     " + System.getProperty("java.version"));  err("Runtime name:     " + System.getProperty("java.runtime.name"));  err("Vendor:           " + System.getProperty("java.vendor"));  err("VM version:       " + System.getProperty("java.vm.version"));  err("VM vendor:        " + System.getProperty("java.vm.vendor"));  err("VM name:          " + System.getProperty("java.vm.name"));  err("VM info:          " + System.getProperty("java.vm.info"));  err("OS name:          " + System.getProperty("os.name"));  err("OS arch:          " + System.getProperty("os.arch"));  err("OS version:       " + System.getProperty("os.version"));  err("Encoding:         " + System.getProperty("file.encoding"));  err("Unicode versions: " + UnicodeProperties.UNICODE_VERSIONS);  err("JFlex version:    " + Main.version);}  }
class C{  public DeleteCursorWrapper(Cursor cursor){  super(cursor);}  }
class C{  public EOMGEvent(){  this.source=null;  this.cursor=null;  this.message=null;  this.mouseEvent=null;  this.status=EOMG_COMPLETE;}  }
class C{  public void init(boolean forEncryption,CipherParameters params) throws IllegalArgumentException {  this.forEncryption=forEncryption;  reset();  if (params instanceof ParametersWithRandom) {    ParametersWithRandom p=(ParametersWithRandom)params;    padding.init(p.getRandom());    cipher.init(forEncryption,p.getParameters());  } else {    padding.init(null);    cipher.init(forEncryption,params);  }}  }
class C{  public byte[] wrap(byte[] outgoing,int start,int len) throws SaslException {  if (len == 0) {    return EMPTY_BYTE_ARRAY;  }  incrementSeqNum();  byte[] mac=getHMAC(myKi,sequenceNum,outgoing,start,len);  if (logger.isLoggable(Level.FINEST)) {    traceOutput(DP_CLASS_NAME,"wrap","DIGEST30:Outgoing: ",outgoing,start,len);    traceOutput(DP_CLASS_NAME,"wrap","seqNum: ",sequenceNum);    traceOutput(DP_CLASS_NAME,"wrap","MAC: ",mac);  }  int bs=encCipher.getBlockSize();  byte[] padding;  if (bs > 1) {    int pad=bs - ((len + 10) % bs);    padding=new byte[pad];    for (int i=0; i < pad; i++) {      padding[i]=(byte)pad;    }  } else {    padding=EMPTY_BYTE_ARRAY;  }  byte[] toBeEncrypted=new byte[len + padding.length + 10];  System.arraycopy(outgoing,start,toBeEncrypted,0,len);  System.arraycopy(padding,0,toBeEncrypted,len,padding.length);  System.arraycopy(mac,0,toBeEncrypted,len + padding.length,10);  if (logger.isLoggable(Level.FINEST)) {    traceOutput(DP_CLASS_NAME,"wrap","DIGEST31:{msg, pad, KicMAC}: ",toBeEncrypted);  }  byte[] cipherBlock;  try {    cipherBlock=encCipher.update(toBeEncrypted);    if (cipherBlock == null) {      throw new IllegalBlockSizeException("" + toBeEncrypted.length);    }  } catch (  IllegalBlockSizeException e) {    throw new SaslException("DIGEST-MD5: Invalid block size for cipher",e);  }  byte[] wrapped=new byte[cipherBlock.length + 2 + 4];  System.arraycopy(cipherBlock,0,wrapped,0,cipherBlock.length);  System.arraycopy(messageType,0,wrapped,cipherBlock.length,2);  System.arraycopy(sequenceNum,0,wrapped,cipherBlock.length + 2,4);  if (logger.isLoggable(Level.FINEST)) {    traceOutput(DP_CLASS_NAME,"wrap","DIGEST32:Wrapped: ",wrapped);  }  return wrapped;}  }
class C{  public boolean equals(Object anObject){  return m_str.equals(anObject);}  }
class C{  public WebApplicationException build(){  Response response=null;switch (status) {case BAD_REQUEST:    response=Response.status(Status.BAD_REQUEST).entity(body).type(MediaType.APPLICATION_JSON_TYPE).build();  break;case UNAUTHORIZED:response=Response.status(Status.UNAUTHORIZED).entity(body).type(MediaType.APPLICATION_JSON_TYPE).build();break;case FORBIDDEN:response=Response.status(Status.FORBIDDEN).entity(body).type(MediaType.APPLICATION_JSON_TYPE).build();break;case NOT_FOUND:response=Response.status(Status.NOT_FOUND).entity(body).type(MediaType.APPLICATION_JSON_TYPE).build();break;case CONFLICT:response=Response.status(Status.CONFLICT).entity(body).type(MediaType.APPLICATION_JSON_TYPE).build();break;case INTERNAL_SERVER_ERROR:response=Response.status(Status.INTERNAL_SERVER_ERROR).entity(body).type(MediaType.APPLICATION_JSON_TYPE).build();break;case SERVICE_UNAVAILABLE:response=Response.status(Status.SERVICE_UNAVAILABLE).entity(body).type(MediaType.APPLICATION_JSON_TYPE).build();break;default :break;}return new WebApplicationException(response);}  }
class C{  public boolean isSaved(){  File allowed=FileUtilities.getFile(Constants.ALLOW_FILE);  return existsInFile(allowed);}  }
class C{  private static void init(String language){  try {    InputStream is=Translate.class.getClassLoader().getResourceAsStream("data/languages/" + language + ".txt");    if (is == null) {      logger.warn("data/language/" + language + ".txt does not exist on classpath)");      return;    }    BufferedReader reader=new BufferedReader(new UnicodeSupportingInputStreamReader(is,"UTF-8"));    Map<String,String> map=new HashMap<String,String>();    try {      String line=reader.readLine();      while (line != null) {        String[] tokens=line.split("=",2);        if (tokens.length != 2) {          System.err.println(line + "///" + Arrays.toString(tokens));        } else {          map.put(tokens[0],tokens[1]);        }        line=reader.readLine();      }    }  finally {      reader.close();    }    texts.put(language,map);  } catch (  IOException e) {    logger.error(e,e);  }}  }
class C{  public void endVisit(MethodRefParameter node){}  }
class C{  @Subscribe @AllowConcurrentEvents public void sessionCompleted(final SessionFinishedEvent event){  LOGGER.info("Received test session finished event. Session ID: '" + event.getSessionId() + "'.");  completedSessionIds.add(event.getSessionId());  countDown();}  }
class C{  private QueryTask(final Type type,final int taskId,final Object tag,final Object cookie,final AsyncDbQueryCallback callback){  mType=type;  mTaskId=taskId;  mCookie=cookie;  mCallback=callback;  mCancelled=false;  mTag=tag;}  }
class C{  public static byte[] hexStringToBytes(String hex){  int l=(hex.length() + 1) / 2;  byte[] r=new byte[l];  int i=0;  int j=0;  if (hex.length() % 2 == 1) {    r[0]=hexDigitToByte(hex.charAt(0));    i=j=1;  }  while (i < l)   r[i++]=(byte)((hexDigitToByte(hex.charAt(j++)) << 4) | hexDigitToByte(hex.charAt(j++)));  return r;}  }
class C{  @Override public String toString(){  return new StringBuilder().append(getKey()).append('=').append(getValue()).toString();}  }
class C{  public ReadOnlyLDAPGroupRestriction(HierarchicalConfiguration configuration){  groupDNs=new ArrayList<String>();  if (configuration != null) {    memberAttribute=configuration.getString("[@memberAttribute]");    if (configuration.getKeys("group").hasNext()) {      Collections.addAll(groupDNs,configuration.getStringArray("group"));    }  }}  }
class C{  public void initShadowTreeEventNS(String namespaceURIArg,String typeArg,boolean canBubbleArg,boolean cancelableArg,XBLShadowTreeElement xblShadowTreeArg){  initEventNS(namespaceURIArg,typeArg,canBubbleArg,cancelableArg);  xblShadowTree=xblShadowTreeArg;}  }
class C{  public KLHandlerGeneric(String device){  try {    setDeviceName(device);  } catch (  Exception ex) {    log.fatal(ex);  }  commTimer=new Timer(commTimeoutTime,commTimeoutHandler);  commTimer.setInitialDelay(commTimeoutTime);  commTimer.stop();}  }
class C{  private void updateRange(double x,double y){  mMinX=Math.min(mMinX,x);  mMaxX=Math.max(mMaxX,x);  mMinY=Math.min(mMinY,y);  mMaxY=Math.max(mMaxY,y);}  }
class C{  public String startPasswordRecovery(){  getPasswordRecoveryService().startPasswordRecovery(model.getUserId(),model.getMarketpalceId());  if (isMarketplaceSet(getRequest())) {    return OUTCOME_MARKETPLACE_CONFIRMSTARTPWDRECOVERY;  }  addMessage(null,FacesMessage.SEVERITY_INFO,INFO_RECOVERPASSWORD_START);  return OUTCOME_SUCCESS;}  }
class C{  public static InformeBean obtenerInforme(int id,String entidad,OptionsBean listaPerfiles) throws RPAdminDAOException, Exception {  InformeBean informeBean=AdapterVOSigem.adapterSIGEMInformeBean(ISicresRPAdminInformeManager.obtenerInforme(id,entidad,AdapterVOSicres.adapterISicresOptionsBean(listaPerfiles)));  return informeBean;}  }
class C{  private void returnData(Object ret){  if (myHost != null) {    myHost.returnData(ret);  }}  }
class C{  public static Number unaryPlus(Number left){  return NumberMath.unaryPlus(left);}  }
class C{  private void loadSesssionManagementMethodTypes(ExtensionHook extensionHook){  this.sessionManagementMethodTypes=new ArrayList<>();  this.sessionManagementMethodTypes.add(new CookieBasedSessionManagementMethodType());  this.sessionManagementMethodTypes.add(new HttpAuthSessionManagementMethodType());  for (  SessionManagementMethodType t : sessionManagementMethodTypes) {    t.hook(extensionHook);  }  if (log.isInfoEnabled()) {    log.info("Loaded session management method types: " + sessionManagementMethodTypes);  }}  }
class C{  @CallSuper protected void onCompletion(){  Toro.sInstance.onPlaybackCompletion(this.player);}  }
class C{  private void updateZoningMap(List<NetworkFCZoneInfo> lastReferenceZoneInfo,URI exportGroupURI,List<URI> exportMaskURIs){  List<URI> emURIs=new ArrayList<URI>();  if (exportMaskURIs == null || exportMaskURIs.isEmpty()) {    ExportGroup exportGroup=_dbClient.queryObject(ExportGroup.class,exportGroupURI);    List<ExportMask> exportMasks=ExportMaskUtils.getExportMasks(_dbClient,exportGroup);    if (exportGroup != null && !exportMasks.isEmpty()) {      for (      ExportMask mask : exportMasks) {        emURIs.add(mask.getId());      }    }  } else {    emURIs.addAll(exportMaskURIs);  }  for (  URI emURI : emURIs) {    ExportMask exportMask=_dbClient.queryObject(ExportMask.class,emURI);    if (exportMask != null && !exportMask.getInactive() && !exportMask.fetchDeviceDataMapEntry(ExportMask.DeviceDataMapKeys.ImmutableZoningMap.name()).contains(Boolean.TRUE.toString())) {      for (      NetworkFCZoneInfo zoneInfo : lastReferenceZoneInfo) {        StringSetMap existingZoningMap=exportMask.getZoningMap();        if (exportMask.getVolumes() == null) {          continue;        }        Set<String> exportMaskVolumes=exportMask.getVolumes().keySet();        if (existingZoningMap != null && zoneInfo.getVolumeId() != null && exportMaskVolumes.contains(zoneInfo.getVolumeId().toString()) && zoneInfo.getEndPoints().size() == 2) {          Initiator initiator=NetworkUtil.findInitiatorInDB(zoneInfo.getEndPoints().get(0),_dbClient);          List<StoragePort> storagePorts=NetworkUtil.findStoragePortsInDB(zoneInfo.getEndPoints().get(1),_dbClient);          for (          StoragePort storagePort : storagePorts) {            if (initiator != null && storagePort != null) {              for (              String initiatorId : existingZoningMap.keySet()) {                if (initiator.getId().toString().equals(initiatorId)) {                  StringSet ports=existingZoningMap.get(initiatorId);                  if (ports != null) {                    if (ports.contains(storagePort.getId().toString())) {                      ports.remove(storagePort.getId().toString());                      if (ports.isEmpty()) {                        exportMask.removeZoningMapEntry(initiatorId);                        _log.info("Removing zoning map entry for initiator {}, in exportmask {}",initiatorId,emURI);                      } else {                        exportMask.addZoningMapEntry(initiatorId,ports);                        _log.info("Removing storagePort " + storagePort.getId() + " from zoning map for initiator "+ initiatorId+ " in export mask "+ emURI);                      }                    }                  }                }              }            }          }        }        _dbClient.persistObject(exportMask);      }    }  }}  }
class C{  private static void copySingleProjectToLocation(String projectName,Path target) throws RuntimeException {  File fromFile=new File(new File("probands/" + projectName + "/").getAbsolutePath());  if (fromFile.exists() == false || fromFile.isDirectory() == false) {    throw new RuntimeException("can't obtain proper proband " + projectName);  }  Path toPath=target.resolve(projectName);  File toFile=toPath.toFile();  if (toFile.exists()) {    if (!toFile.isDirectory()) {      throw new RuntimeException("desired location is occupied " + toPath.toAbsolutePath().toString());    }    LOGGER.info("re using existing locaiton " + toPath.toAbsolutePath().toString());  } else {    if (!toFile.mkdirs()) {      throw new RuntimeException("can't create directory at desired location " + toPath.toAbsolutePath().toString());    }  }  try {    FileCopier.copy(fromFile.toPath(),toPath);  } catch (  IOException ieo) {    throw new RuntimeException("errros copying probands to the external location",ieo);  }}  }
class C{  public List<FeedItem> loadAllDeepFromCursor(Cursor cursor){  int count=cursor.getCount();  List<FeedItem> list=new ArrayList<FeedItem>(count);  if (cursor.moveToFirst()) {    if (identityScope != null) {      identityScope.lock();      identityScope.reserveRoom(count);    }    try {      do {        list.add(loadCurrentDeep(cursor,false));      } while (cursor.moveToNext());    }  finally {      if (identityScope != null) {        identityScope.unlock();      }    }  }  return list;}  }
class C{  public void testSSLPubSub() throws Exception {  MqttAndroidClient mqttClient=null;  IMqttToken connectToken=null;  IMqttToken disconnectToken=null;  IMqttToken subToken=null;  IMqttDeliveryToken pubToken=null;  try {    mqttClient=new MqttAndroidClient(mContext,mqttSSLServerURI,"testSSLPubSub");    MqttConnectOptions options=new MqttConnectOptions();    options.setSocketFactory(mqttClient.getSSLSocketFactory(this.getContext().getAssets().open("test.bks"),keyStorePwd));    MqttV3Receiver mqttV3Receiver=new MqttV3Receiver(mqttClient,null);    mqttClient.setCallback(mqttV3Receiver);    connectToken=mqttClient.connect(options);    connectToken.waitForCompletion(waitForCompletionTime);    String[] topicNames=new String[]{"testSSLPubSub" + "/Topic"};    int[] topicQos={0};    MqttMessage mqttMessage=new MqttMessage(("message for testSSLPubSub").getBytes());    byte[] message=mqttMessage.getPayload();    subToken=mqttClient.subscribe(topicNames,topicQos,null,null);    subToken.waitForCompletion(waitForCompletionTime);    pubToken=mqttClient.publish(topicNames[0],message,0,false,null,null);    pubToken.waitForCompletion(waitForCompletionTime);    TimeUnit.MILLISECONDS.sleep(6000);    boolean ok=mqttV3Receiver.validateReceipt(topicNames[0],0,message);    if (!ok) {      fail("Receive failed");    }  } catch (  Exception exception) {    fail("Failed:" + "testSSLPubSub" + " exception="+ exception);  } finally {    disconnectToken=mqttClient.disconnect(null,null);    disconnectToken.waitForCompletion(waitForCompletionTime);    if (mqttClient != null) {      mqttClient.close();    }  }}  }
class C{  public boolean reverseAccrualIt(){  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_BEFORE_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  boolean ok_reverse=(reverseAccrualIt(getGL_JournalBatch_ID()) != null);  if (!ok_reverse)   return false;  m_processMsg=ModelValidationEngine.get().fireDocValidate(this,ModelValidator.TIMING_AFTER_REVERSEACCRUAL);  if (m_processMsg != null)   return false;  return ok_reverse;}  }
class C{  public static void flushMethod(){  try {    ((LocalRegion)region).getDiskRegion().forceFlush();  } catch (  Exception ex) {    ex.printStackTrace();  }}  }
class C{  public Property basicGetProperty(){  return property;}  }
class C{  public int currentSegment(float[] coords){  if (isDone()) {    throw new NoSuchElementException("line iterator out of bounds");  }  int type;  if (index == 0) {    coords[0]=(float)line.getX1();    coords[1]=(float)line.getY1();    type=SEG_MOVETO;  } else {    coords[0]=(float)line.getX2();    coords[1]=(float)line.getY2();    type=SEG_LINETO;  }  if (affine != null) {    affine.transform(coords,0,coords,0,1);  }  return type;}  }
class C{  private boolean zzRefill() throws java.io.IOException {  if (zzStartRead > 0) {    System.arraycopy(zzBuffer,zzStartRead,zzBuffer,0,zzEndRead - zzStartRead);    zzEndRead-=zzStartRead;    zzCurrentPos-=zzStartRead;    zzMarkedPos-=zzStartRead;    zzStartRead=0;  }  if (zzCurrentPos >= zzBuffer.length) {    char newBuffer[]=new char[zzCurrentPos * 2];    System.arraycopy(zzBuffer,0,newBuffer,0,zzBuffer.length);    zzBuffer=newBuffer;  }  int numRead=zzReader.read(zzBuffer,zzEndRead,zzBuffer.length - zzEndRead);  if (numRead > 0) {    zzEndRead+=numRead;    return false;  }  if (numRead == 0) {    int c=zzReader.read();    if (c == -1) {      return true;    } else {      zzBuffer[zzEndRead++]=(char)c;      return false;    }  }  return true;}  }
class C{  public void treeNodesRemoved(TreeModelEvent e){  if (e != null) {    int changedIndexs[];    int maxCounter;    TreePath parentPath=SwingUtilities2.getTreePath(e,getModel());    FHTreeStateNode changedParentNode=getNodeForPath(parentPath,false,false);    changedIndexs=e.getChildIndices();    if (changedParentNode != null && changedIndexs != null && (maxCounter=changedIndexs.length) > 0) {      Object[] children=e.getChildren();      boolean isVisible=(changedParentNode.isVisible() && changedParentNode.isExpanded());      for (int counter=maxCounter - 1; counter >= 0; counter--) {        changedParentNode.removeChildAtModelIndex(changedIndexs[counter],isVisible);      }      if (isVisible) {        if (treeSelectionModel != null)         treeSelectionModel.resetRowSelection();        if (treeModel.getChildCount(changedParentNode.getUserObject()) == 0 && changedParentNode.isLeaf()) {          changedParentNode.collapse(false);        }        visibleNodesChanged();      } else       if (changedParentNode.isVisible())       visibleNodesChanged();    }  }}  }
class C{  public void onChanging(InputEvent evt){  if (!evt.isChangingBySelectBack()) {    refresh(evt.getValue());  }}  }
class C{  static Bundle loadBundle(BundleContext context) throws BundleException, IOException {  for (  Bundle bundle : context.getBundles()) {    if (OsgiExecImp.BUNDLE_SYMBOLIC_NAME.equals(bundle.getSymbolicName())) {      return bundle;    }  }  URLClassLoader classLoader=(URLClassLoader)OsgiExecImp.class.getClassLoader();  for (  URL url : classLoader.getURLs()) {    String name=url.getFile();    if (name != null) {      if (name.contains("/goomph")) {        return context.installBundle(FileMisc.asUrl(new File(name)));      } else       if (name.contains("/" + JavaExecWinFriendly.LONG_CLASSPATH_JAR_PREFIX)) {        String content=ZipMisc.read(new File(name),"META-INF/MANIFEST.MF");        try (InputStream input=new ByteArrayInputStream(content.getBytes(StandardCharsets.UTF_8))){          Manifest manifest=new Manifest(input);          String classpath=manifest.getMainAttributes().getValue("Class-Path");          for (          String piece : classpath.split(" ")) {            if (piece.contains("/goomph")) {              return context.installBundle(piece);            }          }        }       }    }  }  throw new IllegalArgumentException("Unable to find goomph jar");}  }
class C{  public static void sort(short[] array,int start,int end){  DualPivotQuicksort.sort(array,start,end);}  }
class C{  public static IProject createSimpleProject(String projectName,String... natureIds) throws CoreException {  IProject project=ResourcesPlugin.getWorkspace().getRoot().getProject(projectName);  if (project.exists()) {    project.delete(true,true,npm());  }  project.create(npm());  project.open(npm());  if (natureIds != null) {    IProjectDescription desc=project.getDescription();    desc.setNatureIds(natureIds);    project.setDescription(desc,npm());  }  return project;}  }
class C{  public static void llenarInformacionError(InformacionError ie,int codigoError,Exception e){  llenarInformacionError(ie,codigoError + "",e);}  }
class C{  public CustomShortcutSet(@NotNull Shortcut... shortcuts){  myShortcuts=shortcuts.length == 0 ? Shortcut.EMPTY_ARRAY : shortcuts.clone();}  }
class C{  public static void join(byte[] baggageBytes){  join(DetachedBaggage.deserialize(baggageBytes));}  }
class C{  public void reverse(){  short tmp;  int limit=size / 2;  int j=size - 1;  short[] theElements=elements;  for (int i=0; i < limit; ) {    tmp=theElements[i];    theElements[i++]=theElements[j];    theElements[j--]=tmp;  }}  }
class C{  public void openDriver(SurfaceHolder holder) throws IOException {  if (camera == null) {    camera=Camera.open();    if (camera == null) {      throw new IOException();    }    camera.setPreviewDisplay(holder);    if (!initialized) {      initialized=true;      configManager.initFromCameraParameters(camera);    }    configManager.setDesiredCameraParameters(camera);    FlashlightManager.enableFlashlight();  }}  }
class C{  public font addElement(String hashcode,String element){  addElementToRegistry(hashcode,element);  return (this);}  }
class C{  public void nextGeneration(){  generation++;}  }
class C{  public static void main(String[] args) throws IOException {  InputStream is=new BufferedInputStream(new FileInputStream(args[0]));  try {    if (BlockCompressedInputStream.isValidFile(is)) {      is=new BlockCompressedInputStream(is);      System.out.println(tbiIndexToUniqueString(is));    } else {      System.out.println(bamIndexToUniqueString(is));    }  }  finally {    is.close();  }}  }
class C{  protected AbstractMatrix3D vDice(int axis0,int axis1,int axis2){  int d=3;  if (axis0 < 0 || axis0 >= d || axis1 < 0 || axis1 >= d || axis2 < 0 || axis2 >= d || axis0 == axis1 || axis0 == axis2 || axis1 == axis2) {    throw new IllegalArgumentException("Illegal Axes: " + axis0 + ", "+ axis1+ ", "+ axis2);  }  int[] shape=shape();  this.slices=shape[axis0];  this.rows=shape[axis1];  this.columns=shape[axis2];  int[] strides=new int[3];  strides[0]=this.sliceStride;  strides[1]=this.rowStride;  strides[2]=this.columnStride;  this.sliceStride=strides[axis0];  this.rowStride=strides[axis1];  this.columnStride=strides[axis2];  this.isNoView=false;  return this;}  }
class C{  @SuppressWarnings({"unchecked"}) public static <T>OperatorSwitchThenUnsubscribe<T> instance(){  return (OperatorSwitchThenUnsubscribe<T>)Holder.INSTANCE;}  }
class C{  public int ping() throws RecoverPointException {  String mgmtIPAddress=_endpoint.toASCIIString();  if (null == mgmtIPAddress) {    throw RecoverPointException.exceptions.noRecoverPointEndpoint();  }  try {    logger.info("RecoverPoint service: Checking RP access for endpoint: " + _endpoint.toASCIIString());    functionalAPI.getAccountSettings();    logger.info("Successful ping for Mgmt IP: " + mgmtIPAddress);    return 0;  } catch (  Exception e) {    throw RecoverPointException.exceptions.failedToPingMgmtIP(mgmtIPAddress,getCause(e));  }}  }
class C{  public static boolean isChildRecordFoundError(Exception e){  if (DB.isPostgreSQL())   return isSQLState(e,"23503");  return isErrorCode(e,2292);}  }
class C{  public static int readInts(final File f,final LongIndex a,final long offset,final long addend) throws IOException {  return readInts(f,0,(int)f.length() / 4,a,offset,addend);}  }
class C{  String writeToNamedTmpFile(String filename,String... data) throws IOException {  return writeToNamedTmpFile(filename,Joiner.on('\n').join(data).getBytes(UTF_8));}  }
class C{  private Uri insertWifiMeasurement(final Uri baseUri,final ContentValues values){  if (values.containsKey(Schema.COL_BEGIN_POSITION_ID) && values.containsKey(Schema.COL_END_POSITION_ID) && values.containsKey(Schema.COL_TIMESTAMP)) {    final long rowId=mDbHelper.getWritableDatabase().insert(Schema.TBL_WIFIS,null,values);    if (rowId > 0) {      final Uri wifiUri=ContentUris.withAppendedId(baseUri,rowId);      getContext().getContentResolver().notifyChange(ContentProvider.CONTENT_URI_WIFI,null);      return wifiUri;    }  } else {    throw new IllegalArgumentException("mandatory column missing");  }  return null;}  }
class C{  public void writeURL(String url) throws IOException {  writeUTF('U',url);}  }
class C{  public boolean only_stack_locals(){  return soot.PhaseOptions.getBoolean(options,"only-stack-locals");}  }
class C{  public static void convertUTMCoordinatesToGeographic(int zone,String hemisphere,DoubleBuffer buffer){  if (zone < 1 || zone > 60) {    String message=Logging.getMessage("generic.ZoneIsInvalid",zone);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (!AVKey.NORTH.equals(hemisphere) && !AVKey.SOUTH.equals(hemisphere)) {    String message=Logging.getMessage("generic.HemisphereIsInvalid",hemisphere);    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if (buffer == null) {    String message=Logging.getMessage("nullValue.BufferIsNull");    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  if ((buffer.remaining() % 2) != 0) {    String message=Logging.getMessage("generic.BufferSize",buffer.remaining());    Logging.logger().severe(message);    throw new IllegalArgumentException(message);  }  while (buffer.hasRemaining()) {    buffer.mark();    double easting=buffer.get();    double northing=buffer.get();    LatLon location=UTMCoord.locationFromUTMCoord(zone,hemisphere,easting,northing,null);    buffer.reset();    buffer.put(location.getLongitude().degrees);    buffer.put(location.getLatitude().degrees);  }}  }
class C{  public NodeFigure(){  RectangleFigure rf=new RectangleFigure();  setDecorator(rf);  createConnectors();  set(DECORATOR_INSETS,new Insets2D.Double(6,10,6,10));  ResourceBundleUtil labels=ResourceBundleUtil.getBundle("org.jhotdraw.samples.net.Labels");  setText(labels.getString("nodeDefaultName"));  setAttributeEnabled(DECORATOR_INSETS,false);}  }
class C{  public Adapter createEObjectAdapter(){  return null;}  }
class C{  public void loadMedia(MediaInfo media,boolean autoPlay,int position,JSONObject customData) throws TransientNetworkDisconnectionException, NoConnectionException {  loadMedia(media,null,autoPlay,position,customData);}  }
class C{  @Override public int numPendingOutput(){  return m_attributeFilter.numPendingOutput();}  }
class C{  private static void readJson() throws IOException {  String str="{\"message\":\"Hi\",\"place\":{\"name\":\"World!\"}}";  InputStream in=new ByteArrayInputStream(str.getBytes(Charset.forName("UTF-8")));  JsonReader reader=new JsonReader(new InputStreamReader(in,"UTF-8"));  while (reader.hasNext()) {    JsonToken jsonToken=reader.peek();    if (jsonToken == JsonToken.BEGIN_OBJECT) {      reader.beginObject();    } else     if (jsonToken == JsonToken.END_OBJECT) {      reader.endObject();    }    if (jsonToken == JsonToken.STRING) {      System.out.print(reader.nextString() + " ");    } else {      reader.skipValue();    }  }  reader.close();}  }
class C{  public static void print(PrintWriter self,Object value){  self.print(InvokerHelper.toString(value));}  }
class C{  public boolean isDescendentOf(Node node1,Node node2){  return (node1 == node2) || isProperDescendentOf(node1,node2);}  }
class C{  public void reset(){  token=null;  status=S_INIT;  handlerStatusStack=null;}  }
class C{  public static SimpleNode parse(Reader reader,String templateName) throws ParseException {  return RuntimeSingleton.parse(reader,templateName);}  }
class C{  public boolean isURL(){  return url != null;}  }
class C{  private TennisBall(int ttl,boolean ping){  this.ttl=ttl;  this.ping=ping;}  }
class C{  private String installCode(){  return "if (typeof(" + jsLookupTable + ") == 'undefined'){"+ jsLookupTable+ "=[]}";}  }
class C{  public boolean isInStandbyMode(){  return schedThread.isPaused();}  }
class C{  @DSSafe(DSCat.SAFE_LIST) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 14:59:52.816 -0400",hash_original_method="DA70D8E8EFCF4CE896E4E17AB2D27792",hash_generated_method="808C5618E8DCBABF47C90F606652224D") @Override public synchronized void reset() throws IOException {  if (!markSupported) {    throw new UnsupportedOperationException("Mark not supported");  }  if (mark < 0) {    throw new IOException("No position has been marked");  }  if (position > mark + readlimit) {    throw new IOException("Marked position [" + mark + "] is no longer valid - passed the read limit ["+ readlimit+ "]");  }  position=mark;  eof=false;}  }
class C{  public void waitForSchemaAgreement(String targetSchemaVersion,int nodeCount){  long start=System.currentTimeMillis();  Map<String,List<String>> versions=null;  while (System.currentTimeMillis() - start < MAX_SCHEMA_WAIT_MS) {    log.info("schema version to sync to: {}, required node count: {}",targetSchemaVersion,nodeCount);    versions=getSchemaVersions();    if (versions.size() == 1) {      if (!versions.containsKey(targetSchemaVersion)) {        log.warn("Unable to converge to target version. Schema versions:{}, target version:{}",versions,targetSchemaVersion);        return;      }      if (nodeCount != -1) {        List<String> hosts=null;        for (        Entry<String,List<String>> entry : versions.entrySet()) {          hosts=entry.getValue();        }        if (hosts != null && hosts.size() == nodeCount) {          log.info("schema versions converged to target version {}, required node count achieved: {}",targetSchemaVersion,nodeCount);          return;        }      } else {        log.info("schema versions converged to target version {}, no check for node count",targetSchemaVersion);        return;      }    }    log.info("waiting for schema change ...");    try {      Thread.sleep(SCHEMA_RETRY_SLEEP_MILLIS);    } catch (    InterruptedException ex) {    }  }  log.warn("Unable to converge schema versions: {}",versions);}  }
class C{  public void testSenderWithSpringXmlUsingSpring2NamespacesWithEmbeddedBrokerConfiguredViaXml() throws Exception {  String config="spring-embedded-xbean.xml";  assertSenderConfig(config);}  }
class C{  protected void parseSkew() throws ParseException, IOException {  current=reader.read();  if (current != 'e') {    reportCharacterExpectedError('e',current);    skipTransform();    return;  }  current=reader.read();  if (current != 'w') {    reportCharacterExpectedError('w',current);    skipTransform();    return;  }  current=reader.read();  boolean skewX=false;switch (current) {case 'X':    skewX=true;case 'Y':  break;default :reportCharacterExpectedError('X',current);skipTransform();return;}current=reader.read();skipSpaces();if (current != '(') {reportCharacterExpectedError('(',current);skipTransform();return;}current=reader.read();skipSpaces();float sk=parseFloat();skipSpaces();if (current != ')') {reportCharacterExpectedError(')',current);skipTransform();return;}if (skewX) {fragmentIdentifierHandler.skewX(sk);} else {fragmentIdentifierHandler.skewY(sk);}}  }
class C{  public void addProperty(String name,String value){  properties.put(name,value);}  }
class C{  public static long convert(String stringValue){  if (Strings.isNullOrEmpty(stringValue) || TypeUtils.MISSING_INDICATORS.contains(stringValue)) {    return (long)ColumnType.LONG_INT.getMissingValue();  }  Matcher matcher=COMMA_PATTERN.matcher(stringValue);  return Long.parseLong(matcher.replaceAll(""));}  }
class C{  public ProportionVectors(FlagConfig flagConfig){  Random random=new Random(randomSeed);  while (true) {    this.vectorStart=VectorFactory.generateRandomVector(flagConfig.vectortype(),flagConfig.dimension(),flagConfig.seedlength(),random);    this.vectorEnd=VectorFactory.generateRandomVector(flagConfig.vectortype(),flagConfig.dimension(),flagConfig.seedlength(),random);    if (this.vectorStart.measureOverlap(this.vectorEnd) < 0.1)     break;    VerbatimLogger.info("Bookend vectors too similar to each other ... repeating generation.\n");  }}  }
class C{  public void exit(){synchronized (statemachine) {    statemachine.exit();  }}  }
class C{  public NokiaGroupGraphic(byte[] bitmapData){  super(SmsPort.NOKIA_CLI_LOGO,SmsPort.ZERO);  bitmapData_=bitmapData;}  }
class C{  private JsonObject readConfig(File f){  try {    return (new JsonParser()).parse(new FileReader(f)).getAsJsonObject();  } catch (  JsonIOException e) {    Log.error("IOException while reading remote config.");    e.printStackTrace();    return null;  }catch (  FileNotFoundException e) {    Log.error("Couldn't find remote config.");    e.printStackTrace();    return null;  }catch (  Exception e) {    Log.error("Syntax error in remote config.");    e.printStackTrace();    return null;  }}  }
class C{  private static double distance(double[] subseries,double[] series,int from,int to,double nThreshold) throws Exception {  double[] subsequence=tp.znorm(tp.subseriesByCopy(series,from,to),nThreshold);  Double sum=0D;  for (int i=0; i < subseries.length; i++) {    double tmp=subseries[i] - subsequence[i];    sum=sum + tmp * tmp;  }  return Math.sqrt(sum);}  }
class C{  @SuppressWarnings("unchecked") public static <O>Map<String,? extends Attribute<O,?>> createAttributes(Class<O> pojoClass){  final Map<String,Attribute<O,?>> attributes=new TreeMap<String,Attribute<O,?>>();  Class currentClass=pojoClass;  while (currentClass != null && currentClass != Object.class) {    for (    Field field : Arrays.asList(currentClass.getDeclaredFields())) {      try {        int modifiers=field.getModifiers();        Class<? extends Attribute<O,?>> attributeClass;        if (!isStatic(modifiers) && !isPrivate(modifiers)) {          if (!field.getDeclaringClass().getPackage().getName().equals(pojoClass.getPackage().getName()) && !(isProtected(modifiers) || isPublic(modifiers))) {            continue;          }          Class<?> fieldType=field.getType();          if (fieldType.isPrimitive()) {            Class<?> wrapperType=getWrapperForPrimitive(fieldType);            attributeClass=generateSimpleAttributeForField(pojoClass,wrapperType,field.getName(),field.getName());          } else           if (Iterable.class.isAssignableFrom(fieldType)) {            ParameterizedType parameterizedType=(ParameterizedType)field.getGenericType();            Type[] actualTypeArguments=parameterizedType.getActualTypeArguments();            if (actualTypeArguments.length != 1) {              throw new UnsupportedOperationException();            }            Class<?> genericType=(Class<?>)actualTypeArguments[0];            attributeClass=generateMultiValueNullableAttributeForField(pojoClass,genericType,field.getName(),true,field.getName());          } else           if (fieldType.isArray()) {            Class<?> componentType=fieldType.getComponentType();            if (componentType.isPrimitive()) {              Class<?> wrapperType=getWrapperForPrimitive(componentType);              attributeClass=generateMultiValueNullableAttributeForField(pojoClass,wrapperType,field.getName(),false,field.getName());            } else {              attributeClass=generateMultiValueNullableAttributeForField(pojoClass,componentType,field.getName(),true,field.getName());            }          } else {            attributeClass=generateSimpleNullableAttributeForField(pojoClass,fieldType,field.getName(),field.getName());          }          Attribute<O,?> attribute=attributeClass.newInstance();          attributes.put(attribute.getAttributeName(),attribute);        }      } catch (      Throwable e) {        throw new IllegalStateException("Failed to create attribute for field: " + field.toGenericString(),e);      }    }    currentClass=currentClass.getSuperclass();  }  return attributes;}  }
class C{  GuiProgressListener(JProgressBar progressBar,JTextComponent textComponent){  this.progressBar=checkNotNull(progressBar);  this.textComponent=checkNotNull(textComponent);}  }
class C{  protected byte[] hexStringToByteArray(String hexString){  int len=hexString.length();  byte[] data=new byte[len / 2];  for (int i=0; i < len; i+=2) {    data[i / 2]=(byte)((Character.digit(hexString.charAt(i),16) << 4) + Character.digit(hexString.charAt(i + 1),16));  }  return data;}  }
class C{  private String generateFileForFramework(Framework fw,Width arch) throws Exception {  File tempfile=File.createTempFile("JObjC-SOR-" + fw.name + "-"+ arch+ "-",".mm");  PrintWriter out=new PrintWriter(new FileWriter(tempfile));  out.println("#include<iostream>");  printHeaderLines(fw,arch,out);  out.println("");  out.println("int main(int argc, char** argv){");  printStructInfos(fw,arch,out);  out.println("\treturn 0;");  out.println("}");  out.close();  return tempfile.getAbsolutePath();}  }
class C{  public RealmSampleUserItem withEnabled(boolean enabled){  this.mEnabled=enabled;  return this;}  }
class C{  private void createFromAssets(String dbName,File dbfile,InputStream assetFileInputStream){  OutputStream out=null;  try {    Log.v("info","Copying pre-populated DB content");    String dbPath=dbfile.getAbsolutePath();    dbPath=dbPath.substring(0,dbPath.lastIndexOf("/") + 1);    File dbPathFile=new File(dbPath);    if (!dbPathFile.exists())     dbPathFile.mkdirs();    File newDbFile=new File(dbPath + dbName);    out=new FileOutputStream(newDbFile);    byte[] buf=new byte[1024];    int len;    while ((len=assetFileInputStream.read(buf)) > 0)     out.write(buf,0,len);    Log.v("info","Copied pre-populated DB content to: " + newDbFile.getAbsolutePath());  } catch (  IOException e) {    Log.v("createFromAssets","No pre-populated DB found, error=" + e.getMessage());  } finally {    if (out != null) {      try {        out.close();      } catch (      IOException ignored) {      }    }  }}  }
class C{  @Override public void onCreate(Bundle savedInstanceState){  super.onCreate(savedInstanceState);  mListName=getArguments().getString(Constants.KEY_LIST_NAME);}  }
class C{  public void removeListener(EnvLoaderListener listener){  super.removeListener(listener);  ArrayList<EnvLoaderListener> listeners=_listeners;  if (_listeners == null)   return;synchronized (listeners) {    for (int i=listeners.size() - 1; i >= 0; i--) {      EnvLoaderListener oldListener=listeners.get(i);      if (listener == oldListener) {        listeners.remove(i);        return;      } else       if (oldListener == null) {        listeners.remove(i);      }    }  }}  }
class C{  protected IElementType parseCloseAngle(){  if (myOpenedAngles.isEmpty()) {    return POD_SYMBOL;  }  int bufferEnd=getBufferEnd();  int tokenStart=getTokenStart();  int run=tokenStart;  CharSequence buffer=getBuffer();  int lastIndex=myOpenedAngles.size() - 1;  int anglesNumber=myOpenedAngles.get(lastIndex);  if (anglesNumber == 1) {    myOpenedAngles.remove(lastIndex);    return POD_ANGLE_RIGHT;  }  int endOffset=tokenStart + anglesNumber;  if (tokenStart > 0 && Character.isWhitespace(buffer.charAt(tokenStart - 1))) {    while (run < bufferEnd && run < endOffset && buffer.charAt(run) == '>') {      run++;    }    if (run == endOffset) {      setTokenEnd(run);      myOpenedAngles.remove(lastIndex);      return POD_ANGLE_RIGHT;    }  }  return POD_SYMBOL;}  }
class C{  private void addTrackFromGpxFile(){  EndToEndTestUtils.deleteAllTracks();  deleteExternalStorageFiles(TrackFileFormat.GPX);  createOneGpxFile();  importTracks(TrackFileFormat.GPX);  checkImportSuccess();  checkTrackFromGpxFile();}  }
class C{  public boolean isInSegment(double angle){  return angle >= mStartAngle && angle <= mEndAngle;}  }
class C{  public void testAdd(){  try {    LinkedBlockingQueue q=new LinkedBlockingQueue(SIZE);    for (int i=0; i < SIZE; ++i) {      assertTrue(q.add(new Integer(i)));    }    assertEquals(0,q.remainingCapacity());    q.add(new Integer(SIZE));    shouldThrow();  } catch (  IllegalStateException success) {  }}  }
class C{  public DictionaryInfo forceSave(Dictionary<?> newDict,DictionaryInfo newDictInfo) throws IOException {  initDictInfo(newDict,newDictInfo);  logger.info("force to save dict directly");  return saveNewDict(newDictInfo);}  }
class C{  int minInsertionsDP(String s){  int n=s.length();  int[][] dp=new int[n][n];  for (int gap=1; gap < n; gap++) {    for (int l=0, h=gap; h < n; l++, h++) {      dp[l][h]=s.charAt(l) == s.charAt(h) ? dp[l + 1][h - 1] : Math.min(dp[l][h - 1],dp[l + 1][h]) + 1;    }  }  return dp[0][n - 1];}  }
class C{  public void next(){  pos++;}  }
class C{  public void show(Animation anim){  show(true,anim);}  }
class C{  public synchronized boolean removeSuspendedResponse(WorkerCategory category,Response response){  Deque<Response> deque=workersByCategory.get(category);  if (deque == null) {    return false;  }  if (deque.remove(response)) {    nWaitingConsumers-=1;    LOG.debug("Removed closed connection from queue.");    return true;  }  return false;}  }
class C{  private void installProperties(){  System.setProperty("http.agent",UserAgentGenerator.getUserAgent());  if (OSUtils.isMacOSX()) {    System.setProperty("apple.laf.useScreenMenuBar","true");  }}  }
class C{  @Override protected void processData(int offsetInchunk,byte[] buf,int off,int len){  if (skipBytes && offsetInchunk < 4) {    for (int oc=offsetInchunk; oc < 4 && len > 0; oc++, off++, len--)     skippedBytes[oc]=buf[off];  }  if (len > 0) {    deflatedChunksSet.processBytes(buf,off,len);    if (alsoBuffer) {      System.arraycopy(buf,off,getChunkRaw().data,read,len);    }  }}  }
class C{  public void test_getLowestSetBitNeg(){  byte aBytes[]={-1,-128,56,100,-2,-76,89,45,91,3,-15,35,26};  int aSign=-1;  int iNumber=1;  BigInteger aNumber=new BigInteger(aSign,aBytes);  int result=aNumber.getLowestSetBit();  assertTrue("incorrect value",result == iNumber);}  }
class C{  @Override public void mark(int markLimit){}  }
class C{  @Override public void close() throws IOException {  if (null != dictionaryFileReader) {    dictionaryFileReader.close();    dictionaryFileReader=null;  }}  }
class C{  public PathfindingAction(final Module module){  super("Pathfinder");  m_module=module;  setEnabled(module.isLoaded());  m_module.addListener(m_updater);}  }
class C{  private GraphNode[] fillGraphModel(GraphModel graph){  GraphNode[] nodes=new GraphNode[7];  GraphBuilder builder=graph.getBuilder();  nodes[0]=builder.newNode(new MockElement("Package1"));  nodes[1]=builder.newNode(new MockElement("Package2"));  nodes[2]=builder.newNode(new MockElement("Package3"));  nodes[3]=builder.newNode(new MockElement("DirectoryElement1"));  nodes[4]=builder.newNode(new MockElement("Source1"));  nodes[5]=builder.newNode(new MockElement("DirectoryElement2"));  nodes[6]=builder.newNode(new MockElement("Source2"));  graph.addEdge(MockRelation.DIRECTORY,nodes[0],nodes[1]);  graph.addEdge(MockRelation.DIRECTORY,nodes[1],nodes[2]);  graph.addEdge(MockRelation.CLASSFILE,nodes[2],nodes[3]);  graph.addEdge(MockRelation.CLASS,nodes[3],nodes[4]);  graph.addEdge(MockRelation.CLASSFILE,nodes[0],nodes[5]);  graph.addEdge(MockRelation.CLASS,nodes[5],nodes[6]);  return nodes;}  }
class C{  public static String join(String[] array,String separator){  int len=array.length;  if (len == 0)   return "";  StringBuilder out=new StringBuilder();  out.append(array[0]);  for (int i=1; i < len; i++) {    out.append(separator).append(array[i]);  }  return out.toString();}  }
class C{  public double length(){  return Math.sqrt(x * x + y * y + z * z);}  }
class C{  public void processPendingDeletes(Index index,Settings indexSettings,TimeValue timeout) throws IOException {  logger.debug("{} processing pending deletes",index);  final long startTimeNS=System.nanoTime();  final List<ShardLock> shardLocks=nodeEnv.lockAllForIndex(index,indexSettings,timeout.millis());  try {    Map<ShardId,ShardLock> locks=new HashMap<>();    for (    ShardLock lock : shardLocks) {      locks.put(lock.getShardId(),lock);    }    final List<PendingDelete> remove;synchronized (pendingDeletes) {      remove=pendingDeletes.remove(index);    }    if (remove != null && remove.isEmpty() == false) {      CollectionUtil.timSort(remove);      final long maxSleepTimeMs=10 * 1000;      long sleepTime=10;      do {        if (remove.isEmpty()) {          break;        }        Iterator<PendingDelete> iterator=remove.iterator();        while (iterator.hasNext()) {          PendingDelete delete=iterator.next();          if (delete.deleteIndex) {            assert delete.shardId == -1;            logger.debug("{} deleting index store reason [{}]",index,"pending delete");            try {              nodeEnv.deleteIndexDirectoryUnderLock(index,indexSettings);              iterator.remove();            } catch (            IOException ex) {              logger.debug("{} retry pending delete",ex,index);            }          } else {            assert delete.shardId != -1;            ShardLock shardLock=locks.get(new ShardId(delete.index,delete.shardId));            if (shardLock != null) {              try {                deleteShardStore("pending delete",shardLock,delete.settings);                iterator.remove();              } catch (              IOException ex) {                logger.debug("{} retry pending delete",ex,shardLock.getShardId());              }            } else {              logger.warn("{} no shard lock for pending delete",delete.shardId);              iterator.remove();            }          }        }        if (remove.isEmpty() == false) {          logger.warn("{} still pending deletes present for shards {} - retrying",index,remove.toString());          try {            Thread.sleep(sleepTime);            sleepTime=Math.min(maxSleepTimeMs,sleepTime * 2);            logger.debug("{} schedule pending delete retry after {} ms",index,sleepTime);          } catch (          InterruptedException e) {            Thread.interrupted();            return;          }        }      } while ((System.nanoTime() - startTimeNS) < timeout.nanos());    }  }  finally {    IOUtils.close(shardLocks);  }}  }
class C{  public LargeValueFormatter(String appendix){  this();  mText=appendix;}  }
class C{  public void commitChanges(Collection<Synapse> synapses){  double uB=Utils.doubleParsable(tfUpBound);  if (!Double.isNaN(uB)) {    for (    Synapse s : synapses) {      s.setUpperBound(uB);    }  }  double lB=Utils.doubleParsable(tfLowBound);  if (!Double.isInfinite(lB)) {    for (    Synapse s : synapses) {      s.setLowerBound(lB);    }  }  double increment=Utils.doubleParsable(tfIncrement);  if (!Double.isNaN(increment)) {    for (    Synapse s : synapses) {      s.setIncrement(increment);    }  }  double delay=Utils.doubleParsable(tfDelay);  if (!Double.isNaN(delay)) {    int dly=(int)delay;    for (    Synapse s : synapses) {      s.setDelay(dly);    }  }  boolean frozen=frozenDD.getSelectedIndex() == YesNoNull.getTRUE();  if (frozenDD.getSelectedIndex() != YesNoNull.getNULL()) {    for (    Synapse s : synapses) {      s.setFrozen(frozen);    }  }}  }
class C{  @SuppressWarnings("unchecked") private void validateAndPopulate(Boolean allowNonUpnFormat) throws InvalidTokenException {  JAXBElement<AssertionType> jaxbParserResult=null;  try {    Unmarshaller unmarshaller=_jaxbContext.createUnmarshaller();    unmarshaller.setSchema(SAML_SCHEMA);    jaxbParserResult=(JAXBElement<AssertionType>)unmarshaller.unmarshal(_parsedToken);  } catch (  JAXBException e) {    _log.info(PARSING_TOKEN_ERROR_MSG,e);    throw new MalformedTokenException(PARSING_TOKEN_ERROR_MSG,e);  }  AssertionType assertion=jaxbParserResult.getValue();  parseAssertionAttributes(assertion);  parseConditions(assertion.getConditions(),allowNonUpnFormat);  parseSubject(assertion.getSubject());  parseIssuer(assertion.getIssuer());  parseAuthnStatement(assertion.getAuthnStatementOrAttributeStatement());  if (assertion.getAuthnStatementOrAttributeStatement() != null) {    parseAttributeStatement(assertion.getAuthnStatementOrAttributeStatement());  }  if (assertion.getAdvice() != null) {    parseAdvice(assertion.getAdvice());  }  _log.debug("Token fields are successfully populated");}  }
class C{  public boolean containsValue(V v){  for (  LinkedList<V> l : boxedHashMap.values()) {    if (l.contains(v)) {      return true;    }  }  return false;}  }
class C{  private static void sort(int[] a,int left,int right,boolean leftmost){  int length=right - left + 1;  if (length < INSERTION_SORT_THRESHOLD) {    if (leftmost) {      for (int i=left, j=i; i < right; j=++i) {        int ai=a[i + 1];        while (ai < a[j]) {          a[j + 1]=a[j];          if (j-- == left) {            break;          }        }        a[j + 1]=ai;      }    } else {      do {        if (left >= right) {          return;        }      } while (a[++left] >= a[left - 1]);      for (int k=left; ++left <= right; k=++left) {        int a1=a[k], a2=a[left];        if (a1 < a2) {          a2=a1;          a1=a[left];        }        while (a1 < a[--k]) {          a[k + 2]=a[k];        }        a[++k + 1]=a1;        while (a2 < a[--k]) {          a[k + 1]=a[k];        }        a[k + 1]=a2;      }      int last=a[right];      while (last < a[--right]) {        a[right + 1]=a[right];      }      a[right + 1]=last;    }    return;  }  int seventh=(length >> 3) + (length >> 6) + 1;  int e3=(left + right) >>> 1;  int e2=e3 - seventh;  int e1=e2 - seventh;  int e4=e3 + seventh;  int e5=e4 + seventh;  if (a[e2] < a[e1]) {    int t=a[e2];    a[e2]=a[e1];    a[e1]=t;  }  if (a[e3] < a[e2]) {    int t=a[e3];    a[e3]=a[e2];    a[e2]=t;    if (t < a[e1]) {      a[e2]=a[e1];      a[e1]=t;    }  }  if (a[e4] < a[e3]) {    int t=a[e4];    a[e4]=a[e3];    a[e3]=t;    if (t < a[e2]) {      a[e3]=a[e2];      a[e2]=t;      if (t < a[e1]) {        a[e2]=a[e1];        a[e1]=t;      }    }  }  if (a[e5] < a[e4]) {    int t=a[e5];    a[e5]=a[e4];    a[e4]=t;    if (t < a[e3]) {      a[e4]=a[e3];      a[e3]=t;      if (t < a[e2]) {        a[e3]=a[e2];        a[e2]=t;        if (t < a[e1]) {          a[e2]=a[e1];          a[e1]=t;        }      }    }  }  int less=left;  int great=right;  if (a[e1] != a[e2] && a[e2] != a[e3] && a[e3] != a[e4] && a[e4] != a[e5]) {    int pivot1=a[e2];    int pivot2=a[e4];    a[e2]=a[left];    a[e4]=a[right];    while (a[++less] < pivot1)     ;    while (a[--great] > pivot2)     ;    outer:     for (int k=less - 1; ++k <= great; ) {      int ak=a[k];      if (ak < pivot1) {        a[k]=a[less];        a[less]=ak;        ++less;      } else       if (ak > pivot2) {        while (a[great] > pivot2) {          if (great-- == k) {            break outer;          }        }        if (a[great] < pivot1) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=a[great];        }        a[great]=ak;        --great;      }    }    a[left]=a[less - 1];    a[less - 1]=pivot1;    a[right]=a[great + 1];    a[great + 1]=pivot2;    sort(a,left,less - 2,leftmost);    sort(a,great + 2,right,false);    if (less < e1 && e5 < great) {      while (a[less] == pivot1) {        ++less;      }      while (a[great] == pivot2) {        --great;      }      outer:       for (int k=less - 1; ++k <= great; ) {        int ak=a[k];        if (ak == pivot1) {          a[k]=a[less];          a[less]=ak;          ++less;        } else         if (ak == pivot2) {          while (a[great] == pivot2) {            if (great-- == k) {              break outer;            }          }          if (a[great] == pivot1) {            a[k]=a[less];            a[less]=pivot1;            ++less;          } else {            a[k]=a[great];          }          a[great]=ak;          --great;        }      }    }    sort(a,less,great,false);  } else {    int pivot=a[e3];    for (int k=less; k <= great; ++k) {      if (a[k] == pivot) {        continue;      }      int ak=a[k];      if (ak < pivot) {        a[k]=a[less];        a[less]=ak;        ++less;      } else {        while (a[great] > pivot) {          --great;        }        if (a[great] < pivot) {          a[k]=a[less];          a[less]=a[great];          ++less;        } else {          a[k]=pivot;        }        a[great]=ak;        --great;      }    }    sort(a,left,less - 1,leftmost);    sort(a,great + 1,right,false);  }}  }
class C{  public FastAdapterDialog<Item> add(int position,List<Item> items){  mFastItemAdapter.add(position,items);  return this;}  }
class C{  public CViewSearcherDialog(final Window owner,final IViewContainer viewContainer,final IAddress address){  super(owner,"Select a graph",ModalityType.APPLICATION_MODAL);  Preconditions.checkNotNull(viewContainer,"IE02057: View container can't be null");  m_viewContainer=viewContainer;  createGui();  new CDialogEscaper(this);  GuiHelper.centerChildToParent(owner,this,true);  if (address != null) {    m_offsetField.setText(address.toHexString());    search(address.toLong());  }}  }
class C{  public static void main(final String[] args){  DOMTestCase.doMain(hc_attrname.class,args);}  }
class C{  @Override public void write(byte[] buffer,int offset,int length) throws IOException {  while ((mByteToSkip > 0 || mByteToCopy > 0 || mState != STATE_JPEG_DATA) && length > 0) {    if (mByteToSkip > 0) {      int byteToProcess=length > mByteToSkip ? mByteToSkip : length;      length-=byteToProcess;      mByteToSkip-=byteToProcess;      offset+=byteToProcess;    }    if (mByteToCopy > 0) {      int byteToProcess=length > mByteToCopy ? mByteToCopy : length;      out.write(buffer,offset,byteToProcess);      mSize+=byteToProcess;      length-=byteToProcess;      mByteToCopy-=byteToProcess;      offset+=byteToProcess;    }    if (length == 0) {      return;    }switch (mState) {case STATE_SOI:      int byteRead=requestByteToBuffer(2,buffer,offset,length);    offset+=byteRead;  length-=byteRead;if (mBuffer.position() < 2) {  return;}mBuffer.rewind();if (mBuffer.getShort() != JpegHeader.SOI) {throw new IOException("Not a valid jpeg image, cannot write exif");}out.write(mBuffer.array(),0,2);mSize+=2;mState=STATE_FRAME_HEADER;mBuffer.rewind();break;case STATE_FRAME_HEADER:byteRead=requestByteToBuffer(4,buffer,offset,length);offset+=byteRead;length-=byteRead;if (mBuffer.position() == 2) {short tag=mBuffer.getShort();if (tag == JpegHeader.EOI) {out.write(mBuffer.array(),0,2);mSize+=2;mBuffer.rewind();}}if (mBuffer.position() < 4) {return;}mBuffer.rewind();short marker=mBuffer.getShort();if (marker == JpegHeader.APP1 || marker == JpegHeader.APP0) {out.write(mBuffer.array(),0,4);mSize+=4;mByteToCopy=(mBuffer.getShort() & 0x0000ffff) - 2;} else {writeMpoData();out.write(mBuffer.array(),0,4);mSize+=4;mState=STATE_JPEG_DATA;}mBuffer.rewind();break;}}if (length > 0) {out.write(buffer,offset,length);mSize+=length;}}  }
class C{  public static <T,R>int highSum(Function<T,Integer> f1,Function<R,Integer> f2,T data1,R data2){  return f1.apply(data1) + f2.apply(data2);}  }
class C{  public HashCodeBuilder append(final double[] array){  if (array == null) {    iTotal=iTotal * iConstant;  } else {    for (    final double element : array) {      append(element);    }  }  return this;}  }
class C{  public boolean isError(final OneDriveErrorCodes expectedCode){  if (code.equalsIgnoreCase(expectedCode.toString())) {    return true;  }  OneDriveInnerError innerError=innererror;  while (null != innerError) {    if (innerError.code.equalsIgnoreCase(expectedCode.toString())) {      return true;    }    innerError=innerError.innererror;  }  return false;}  }
class C{  public static Play copy(Play play){  Play copy=new Play(play.playId,play.gameId,play.gameName);  copy.setDate(play.getDate());  copy.quantity=play.quantity;  copy.length=play.length;  copy.location=play.location;  copy.setIncomplete(play.Incomplete());  copy.setNoWinStats(play.NoWinStats());  copy.comments=play.comments;  copy.startTime=play.startTime;  for (  Player player : play.getPlayers()) {    copy.addPlayer(new Player(player));  }  return copy;}  }
class C{  public ScMappingProfile[] findMappingProfiles(String serverId,String volumeId) throws StorageCenterAPIException {  PayloadFilter filter=new PayloadFilter();  filter.append("server",serverId);  filter.append("volume",volumeId);  RestResult rr=restClient.post("StorageCenter/ScMappingProfile/GetList",filter.toJson());  if (checkResults(rr)) {    return gson.fromJson(rr.getResult(),ScMappingProfile[].class);  }  String message=String.format("Error getting mapping profiles from server %s and volume %s: %s",serverId,volumeId,rr.getErrorMsg());  throw new StorageCenterAPIException(message);}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public JSONArray put(int value){  this.put(new Integer(value));  return this;}  }
class C{  public int hashCode(){  return this.value.hashCode() * 21;}  }
class C{  public static String escapeXml(String s,boolean advanced,boolean recognizeUnicodeChars,boolean translateSpecialEntities,boolean isDomCreation,boolean transResCharsToNCR,boolean translateSpecialEntitiesToNCR){  return escapeXml(s,advanced,recognizeUnicodeChars,translateSpecialEntities,isDomCreation,transResCharsToNCR,translateSpecialEntitiesToNCR,false);}  }
class C{  public synchronized boolean isStopped(){  return playerState == PlayerStates.STOPPED;}  }
class C{  public void dispose(){  if (t2 != null) {    t2.cancel();  }  t2=null;}  }
class C{  public LongsRef(int capacity){  longs=new long[capacity];}  }
class C{  public HeadPhaseBuilder<S> findFirst(S defaultValue,RError.Message message,Object... messageArgs){  pipelineBuilder().appendFindFirst(defaultValue,elementClass,null,message,messageArgs);  return new HeadPhaseBuilder<>(pipelineBuilder());}  }
class C{  public Pan(AbstractChart chart){  super(chart);}  }
class C{  public DeviceAutomator checkForegroundAppIs(String packageName){  return checkForegroundAppIs(packageName,5000);}  }
class C{  public ActionEvent(Component dragged,Type type,Component drop,int x,int y){  this.source=dragged;  this.sourceComponent=drop;  this.keyEvent=x;  this.y=y;  this.trigger=type;}  }
class C{  public ServerConfiguration enableDurableWrite(boolean enabled){  setProperty(SERVER_DURABLE_WRITE_ENABLED,enabled);  return this;}  }
class C{  public static Matrix fromLocalOrientation(Vec4 origin,Vec4[] axes){  if (origin == null) {    String msg=Logging.getMessage("nullValue.OriginIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (axes == null) {    String msg=Logging.getMessage("nullValue.AxesIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (axes.length < 3) {    String msg=Logging.getMessage("generic.ArrayInvalidLength",axes.length);    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  if (axes[0] == null || axes[1] == null || axes[2] == null) {    String msg=Logging.getMessage("nullValue.AxesIsNull");    Logging.logger().severe(msg);    throw new IllegalArgumentException(msg);  }  return fromTranslation(origin).multiply(fromAxes(axes));}  }
class C{  public AspectContainer load(@Nullable NBTTagCompound nbt,@Nullable List<Aspect> staticAspects){  List<InternalAspect> aspects=new ArrayList<InternalAspect>();  if (nbt != null) {    NBTTagList typesList=nbt.getTagList(ASPECTS_NBT_TAG,Constants.NBT.TAG_LIST);    int typesCount=typesList.tagCount();    for (int i=0; i < typesCount; i++) {      NBTTagList aspectsList=(NBTTagList)typesList.get(i);      int aspectsCount=aspectsList.tagCount();      for (int c=0; c < aspectsCount; c++) {        NBTTagCompound aspectNBT=aspectsList.getCompoundTagAt(c);        InternalAspect aspect=InternalAspect.readFromNBT(aspectNBT);        if (aspect != null)         aspects.add(aspect);      }    }  }  if (staticAspects != null) {    for (    Aspect aspect : staticAspects) {      boolean hasStatic=false;      for (      InternalAspect internalAspect : aspects) {        if (!internalAspect.isDynamic && aspect.type == internalAspect.type)         hasStatic=true;      }      if (!hasStatic)       aspects.add(new InternalAspect(aspect.type,aspect.amount,false,false));    }  }  for (  InternalAspect aspect : aspects) {    List<InternalAspect> entries=this.getEntries(aspect.type);    entries.add(aspect);  }  return this;}  }
class C{  public void addDevices(Collection<IEspDevice> devices,int upgradeType){  for (  IEspDevice device : devices) {    addDevice(device,upgradeType);  }}  }
class C{  public static void register(){  FilePath.register(new FilePathEncrypt());}  }
class C{  public static void updateBeforeLoad(final DigestURL url){  final String host=url.getHost();  if (host == null)   return;  String hosthash=url.hosthash();  Host h=map.get(hosthash);  if (h == null) {    h=new Host(host,500,0);    if (map.size() > mapMaxSize || MemoryControl.shortStatus())     map.clear();    map.put(hosthash,h);  } else {    h.update();  }}  }
class C{  public RoleException(Throwable cause){  super(cause);}  }
class C{  private CMemoryFunctions(){}  }
class C{  private void writeAttribute(java.lang.String namespace,java.lang.String attName,java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {  if (namespace.equals("")) {    xmlWriter.writeAttribute(attName,attValue);  } else {    registerPrefix(xmlWriter,namespace);    xmlWriter.writeAttribute(namespace,attName,attValue);  }}  }
class C{  public static <T>LtPredicate<T> lt(Property<T> property,T value){  return new LtPredicate<>(property(property),value);}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  public boolean poolMatchesCapacity(StoragePool pool,long requiredCapacity,long resourceSize,boolean checkPoolMaxSizeLimit,boolean supportsThinProvisioning,Long thinVolumePreAllocationResourceSize){  if (null == pool.getTotalCapacity() || pool.getTotalCapacity() == 0) {    return false;  }  long preAllocationSizeInKB=0;  long sizeInKB=getSizeInKB(requiredCapacity);  long resourceSizeInKB=getSizeInKB(resourceSize);  if ((PoolServiceType.block.toString().equalsIgnoreCase(pool.getPoolServiceType()) || PoolServiceType.block_file.name().equalsIgnoreCase(pool.getPoolServiceType())) && checkPoolMaxSizeLimit) {    Long maxVolumeSizeLimit=getMaxVolumeSizeLimit(pool,supportsThinProvisioning);    if (maxVolumeSizeLimit == null || maxVolumeSizeLimit == 0) {      String errorMsg=String.format("Pool %s does not have maximum size limit for %s volumes set.",pool.getId(),pool.getSupportedResourceTypes());      _log.error(errorMsg);      return false;    }    if (null != pool.getPoolClassName() && (pool.getPoolClassName().equals(StoragePool.PoolClassNames.Clar_UnifiedStoragePool.toString()) || pool.getPoolClassName().equals(StoragePool.PoolClassNames.VNXe_Pool.name())) && resourceSizeInKB > maxVolumeSizeLimit) {      _log.info(String.format("Pool %s is not matching as the pool's maximum volume size (%s KB) is below the requested volume size %s KB.",pool.getId(),maxVolumeSizeLimit,resourceSizeInKB));      return false;    }  }  if (pool.getSupportedResourceTypes() != null && pool.getSupportedResourceTypes().equals(StoragePool.SupportedResourceTypes.THICK_ONLY.name()) || !supportsThinProvisioning) {    return isPoolMatchesCapacityForThickProvisioning(pool,sizeInKB);  }  if (null != thinVolumePreAllocationResourceSize) {    preAllocationSizeInKB=getSizeInKB(thinVolumePreAllocationResourceSize);  }  return isPoolMatchesCapacityForThinProvisioning(pool,sizeInKB,preAllocationSizeInKB,_coordinator);}  }
class C{  @Override public void update(){  if (block != null) {    ((Updater)block).update(0.05);  }}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public synchronized void warning(String s,Parameter p1){  println("WARNING:\n" + s,ALL_MESSAGE_LOGS,true);  if (p1 != null)   println("PARAMETER: " + p1,ALL_MESSAGE_LOGS,true);}  }
class C{  private void zzScanError(int errorCode){  String message;  try {    message=ZZ_ERROR_MSG[errorCode];  } catch (  ArrayIndexOutOfBoundsException e) {    message=ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];  }  throw new Error(message);}  }
class C{  public void print(final String str){  if ((str != null) && (str.length() > 0)) {    _append(str);  }}  }
class C{  static void propertiesComments(StringBuffer result,long val){  result.append("   ");switch ((int)(val & maskType)) {case UnicodeSpec.CONTROL:    result.append("Cc");  break;case UnicodeSpec.FORMAT:result.append("Cf");break;case UnicodeSpec.PRIVATE_USE:result.append("Co");break;case UnicodeSpec.SURROGATE:result.append("Cs");break;case UnicodeSpec.LOWERCASE_LETTER:result.append("Ll");break;case UnicodeSpec.MODIFIER_LETTER:result.append("Lm");break;case UnicodeSpec.OTHER_LETTER:result.append("Lo");break;case UnicodeSpec.TITLECASE_LETTER:result.append("Lt");break;case UnicodeSpec.UPPERCASE_LETTER:result.append("Lu");break;case UnicodeSpec.COMBINING_SPACING_MARK:result.append("Mc");break;case UnicodeSpec.ENCLOSING_MARK:result.append("Me");break;case UnicodeSpec.NON_SPACING_MARK:result.append("Mn");break;case UnicodeSpec.DECIMAL_DIGIT_NUMBER:result.append("Nd");break;case UnicodeSpec.LETTER_NUMBER:result.append("Nl");break;case UnicodeSpec.OTHER_NUMBER:result.append("No");break;case UnicodeSpec.CONNECTOR_PUNCTUATION:result.append("Pc");break;case UnicodeSpec.DASH_PUNCTUATION:result.append("Pd");break;case UnicodeSpec.END_PUNCTUATION:result.append("Pe");break;case UnicodeSpec.OTHER_PUNCTUATION:result.append("Po");break;case UnicodeSpec.START_PUNCTUATION:result.append("Ps");break;case UnicodeSpec.CURRENCY_SYMBOL:result.append("Sc");break;case UnicodeSpec.MODIFIER_SYMBOL:result.append("Sk");break;case UnicodeSpec.MATH_SYMBOL:result.append("Sm");break;case UnicodeSpec.OTHER_SYMBOL:result.append("So");break;case UnicodeSpec.LINE_SEPARATOR:result.append("Zl");break;case UnicodeSpec.PARAGRAPH_SEPARATOR:result.append("Zp");break;case UnicodeSpec.SPACE_SEPARATOR:result.append("Zs");break;case UnicodeSpec.UNASSIGNED:result.append("unassigned");break;}switch ((int)((val & maskBidi) >> shiftBidi)) {case UnicodeSpec.DIRECTIONALITY_LEFT_TO_RIGHT:result.append(", L");break;case UnicodeSpec.DIRECTIONALITY_RIGHT_TO_LEFT:result.append(", R");break;case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER:result.append(", EN");break;case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_SEPARATOR:result.append(", ES");break;case UnicodeSpec.DIRECTIONALITY_EUROPEAN_NUMBER_TERMINATOR:result.append(", ET");break;case UnicodeSpec.DIRECTIONALITY_ARABIC_NUMBER:result.append(", AN");break;case UnicodeSpec.DIRECTIONALITY_COMMON_NUMBER_SEPARATOR:result.append(", CS");break;case UnicodeSpec.DIRECTIONALITY_PARAGRAPH_SEPARATOR:result.append(", B");break;case UnicodeSpec.DIRECTIONALITY_SEGMENT_SEPARATOR:result.append(", S");break;case UnicodeSpec.DIRECTIONALITY_WHITESPACE:result.append(", WS");break;case UnicodeSpec.DIRECTIONALITY_OTHER_NEUTRALS:result.append(", ON");break;}if ((val & maskUpperCase) != 0) {result.append(", hasUpper (subtract ");result.append((val & maskCaseOffset) >> shiftCaseOffset).append(")");}if ((val & maskLowerCase) != 0) {result.append(", hasLower (add ");result.append((val & maskCaseOffset) >> shiftCaseOffset).append(")");}if ((val & maskTitleCase) != 0) {result.append(", hasTitle");}if ((val & maskIdentifierInfo) == valueIgnorable) {result.append(", ignorable");}if ((val & maskIdentifierInfo) == valueJavaUnicodePart) {result.append(", identifier part");}if ((val & maskIdentifierInfo) == valueJavaStartUnicodePart) {result.append(", underscore");}if ((val & maskIdentifierInfo) == valueJavaWhitespace) {result.append(", whitespace");}if ((val & maskIdentifierInfo) == valueJavaOnlyStart) {result.append(", currency");}if ((val & maskIdentifierInfo) == valueJavaUnicodeStart) {result.append(", identifier start");}if ((val & maskNumericType) == valueDigit) {result.append(", decimal ");result.append((val & maskDigitOffset) >> shiftDigitOffset);}if ((val & maskNumericType) == valueStrangeNumeric) {result.append(", strange");}if ((val & maskNumericType) == valueJavaSupradecimal) {result.append(", supradecimal ");result.append((val & maskDigitOffset) >> shiftDigitOffset);}}  }
class C{  public SocketTimeoutException(String detailMessage,Throwable cause){  super(detailMessage,cause);}  }
class C{  static ZipFile buildProjectFromSources(Path sourcesPath,String artifactNamePattern) throws IOException, InterruptedException {  final String[] command;  if (SystemInfo.isWindows()) {    command=new String[]{"CMD","/C","mvn","clean","package"};  } else {    command=new String[]{MavenUtils.getMavenExecCommand(),"clean","package"};  }  ProcessBuilder processBuilder=new ProcessBuilder(command).directory(sourcesPath.toFile()).redirectErrorStream(true);  Process process=processBuilder.start();  ListLineConsumer consumer=new ListLineConsumer();  ProcessUtil.process(process,consumer,LineConsumer.DEV_NULL);  process.waitFor();  if (process.exitValue() != 0) {    throw new IOException(consumer.getText());  }  return new ZipFile(IoUtil.findFile(artifactNamePattern,sourcesPath.resolve("target").toFile()));}  }
class C{  public static int root(int value){  if (value < 0) {    TestBase.logError("function called but should not",null);  }  return (int)Math.sqrt(value);}  }
class C{  @Override public void registerOutParameter(String parameterName,int sqlType,int scale) throws SQLException {  registerOutParameter(getIndexForName(parameterName),sqlType,scale);}  }
class C{  protected void describe(String description){  SwiftTestUtils.noteAction(description);}  }
class C{  public boolean fireMapMouseDragged(MouseEvent evt){  if (DEBUG_DETAIL) {    logger.finer("MapMouseSupport: fireMapMouseDragged");  }  clickHappened=false;  boolean consumed=false;  if (proxy == null || evt.isShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_DRAGGED) > 0) {    evt=new MapMouseEvent(getParentMode(),evt);    Iterator<MapMouseListener> it=iterator();    while (it.hasNext() && !consumed) {      consumed=it.next().mouseDragged(evt) && consumeEvents;    }  }  boolean ignoreConsumed=!consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_DRAGGED) == 0));  if (proxy != null && ignoreConsumed && !evt.isShiftDown()) {    proxy.mouseDragged(evt);    consumed=true;  }  return consumed;}  }
class C{  static int findDisplayedMnemonicIndex(String text,int mnemonic){  if (text == null || mnemonic == '\0') {    return -1;  }  char uc=Character.toUpperCase((char)mnemonic);  char lc=Character.toLowerCase((char)mnemonic);  int uci=text.indexOf(uc);  int lci=text.indexOf(lc);  if (uci == -1) {    return lci;  } else   if (lci == -1) {    return uci;  } else {    return (lci < uci) ? lci : uci;  }}  }
class C{  public void useProgram(int programId){  if (this.programId != programId) {    this.programId=programId;    GLES20.glUseProgram(programId);  }}  }
class C{  private void parse() throws IOException {  int majorVersion=readByte();  int minorVersion=readByte();  int hdrsz=readByte();  int offsize=readByte();  int fnames=hdrsz;  int topdicts=fnames + getIndexSize(fnames);  int theNames=topdicts + getIndexSize(topdicts);  gsubrbase=theNames + getIndexSize(theNames);  gsubrsoffset=calcoffset(gsubrbase);  readNames(theNames);  pos=topdicts;  if (readInt(2) != 1) {    printData();    throw new RuntimeException("More than one font in this file!");  }  Range r=getIndexEntry(fnames,0);  fontname=new String(data,r.getStart(),r.getLen());  readDict(getIndexEntry(topdicts,0));  readDict(new Range(privatebase,privatesize));  pos=charstringbase;  nglyphs=readInt(2);  readGlyphNames(charsetbase);  readEncodingData(encodingbase);}  }
class C{  private void pushPacket(IOFSwitch sw,Match match,OFPacketIn pi,OFPort outport){  if (pi == null) {    return;  }  OFPort inPort=(pi.getVersion().compareTo(OFVersion.OF_12) < 0 ? pi.getInPort() : pi.getMatch().get(MatchField.IN_PORT));  if (inPort.equals(outport)) {    if (log.isDebugEnabled()) {      log.debug("Attempting to do packet-out to the same " + "interface as packet-in. Dropping packet. " + " SrcSwitch={}, match = {}, pi={}",new Object[]{sw,match,pi});      return;    }  }  if (log.isTraceEnabled()) {    log.trace("PacketOut srcSwitch={} match={} pi={}",new Object[]{sw,match,pi});  }  OFPacketOut.Builder pob=sw.getOFFactory().buildPacketOut();  List<OFAction> actions=new ArrayList<OFAction>();  actions.add(sw.getOFFactory().actions().buildOutput().setPort(outport).setMaxLen(Integer.MAX_VALUE).build());  pob.setActions(actions);  if (sw.getBuffers() == 0) {    pi=pi.createBuilder().setBufferId(OFBufferId.NO_BUFFER).build();    pob.setBufferId(OFBufferId.NO_BUFFER);  } else {    pob.setBufferId(pi.getBufferId());  }  pob.setInPort(inPort);  if (pi.getBufferId() == OFBufferId.NO_BUFFER) {    byte[] packetData=pi.getData();    pob.setData(packetData);  }  counterPacketOut.increment();  sw.write(pob.build());}  }
class C{  public int decrement(int offset){  return increment(-offset);}  }
class C{  public NetworkComponent(final String name,final Network network){  super(name);  this.network=network;  init();}  }
class C{  public Scanner(Context cx,InputBuffer input){  init(cx,true);  this.input=input;  cx.input=input;}  }
class C{  public void stopProxy(int hostNumber){  proxySet.get(currentType)[hostNumber - 1].stop();}  }
class C{  public static PKIXCertPathValidatorResult validate(CertPath path,PKIXParameters params) throws Exception {  CertPathValidator validator=CertPathValidator.getInstance("PKIX");  return (PKIXCertPathValidatorResult)validator.validate(path,params);}  }
class C{  public boolean isSslClientAuth(){  return sslClientAuth;}  }
class C{  public SPFRecord(Name name,int dclass,long ttl,List strings){  super(name,Type.SPF,dclass,ttl,strings);}  }
class C{  void putObject(int offset,NativeObject ob){switch (addressSize()) {case 8:    putLong(offset,ob.address);  break;case 4:putInt(offset,(int)(ob.address & 0x00000000FFFFFFFF));break;default :throw new InternalError("Address size not supported");}}  }
class C{  public JsonWriter endArray() throws IOException {  return close(JsonScope.EMPTY_ARRAY,JsonScope.NONEMPTY_ARRAY,"]");}  }
class C{  public void add(int index,E element){  rangeCheckForAdd(index);  ensureCapacity(size + 1);  System.arraycopy(elementData,index,elementData,index + 1,size - index);  elementData[index]=element;  size++;}  }
class C{  public void mouseEntered(MouseEvent event){  initiateToolTip(event);}  }
class C{  public JobDefinitionEntity createJobDefinitionEntity(String namespaceCode,String jobName,String description,String activitiId){  NamespaceEntity namespaceEntity=namespaceDao.getNamespaceByCd(namespaceCode);  if (namespaceEntity == null) {    namespaceEntity=namespaceDaoTestHelper.createNamespaceEntity(namespaceCode);  }  return createJobDefinitionEntity(namespaceEntity,jobName,description,activitiId);}  }
class C{  public boolean contains(double x,double y,double w,double h){  if (npoints <= 0 || !bounds.intersects(x,y,w,h)) {    return false;  }  updateComputingPath();  return closedPath.contains(x,y,w,h);}  }
class C{  public List<Poi> queryForAllWays(){  return poiDao.queryForAllWays();}  }
class C{  public boolean containsAll(float[] array){  for (int i=array.length; i-- > 0; ) {    if (!contains(array[i])) {      return false;    }  }  return true;}  }
class C{  @Ignore public static LongArray instance(long[] value){  throw Util.makeJavaArrayWrapperException();}  }
class C{  private void deleteBV(Matrix alpha,Matrix C,Matrix Q,double[][] basisVectors,int d,int index){  int inputDim=basisVectors[0].length;  int dMax=basisVectors.length;  double[] t_row;  double t_scalar=0;  t_scalar=alpha.getArray()[index][0];  alpha.getArray()[index][0]=alpha.getArray()[d][0];  alpha.getArray()[d][0]=t_scalar;  swapRowsAndColumns(C.getArray(),index,d);  swapRowsAndColumns(Q.getArray(),index,d);  t_row=basisVectors[index];  basisVectors[index]=basisVectors[d];  basisVectors[d]=t_row;  double alpha_star=alpha.getArray()[d][0];  double c_star=C.getArray()[d][d];  double q_star=Q.getArray()[d][d];  double[][] C_star=new double[dMax][1];  Matrix vector_C_star=new Matrix(C_star);  double[][] Q_star=new double[dMax][1];  Matrix vector_Q_star=new Matrix(Q_star);  for (int j=0; j < d; j++) {    C_star[j][0]=C.getArray()[j][d];    Q_star[j][0]=Q.getArray()[j][d];  }  alpha.minusEquals((vector_Q_star.plus(vector_C_star)).times(alpha_star / (c_star + q_star)));  C.plusEquals((vector_Q_star.times(vector_Q_star.transpose())).times(1.0 / q_star));  C.minusEquals(((vector_Q_star.plus(vector_C_star)).times((vector_Q_star.plus(vector_C_star)).transpose())).times(1.0 / (q_star + c_star)));  Q.minusEquals((vector_Q_star.times(vector_Q_star.transpose())).times(1.0 / q_star));  alpha.getArray()[d][0]=0;  for (int j=0; j <= d; j++) {    Q.getArray()[d][j]=0;    C.getArray()[d][j]=0;    Q.getArray()[j][d]=0;    C.getArray()[j][d]=0;  }}  }
class C{  private byte[] crypt_raw(byte password[],byte salt[],int log_rounds){  int rounds, i, j;  int cdata[]=(int[])bf_crypt_ciphertext.clone();  int clen=cdata.length;  byte ret[];  if (log_rounds < 4 || log_rounds > 31)   throw new IllegalArgumentException("Bad number of rounds");  rounds=1 << log_rounds;  if (salt.length != BCRYPT_SALT_LEN)   throw new IllegalArgumentException("Bad salt length");  init_key();  ekskey(salt,password);  for (i=0; i < rounds; i++) {    key(password);    key(salt);  }  for (i=0; i < 64; i++) {    for (j=0; j < (clen >> 1); j++)     encipher(cdata,j << 1);  }  ret=new byte[clen * 4];  for (i=0, j=0; i < clen; i++) {    ret[j++]=(byte)((cdata[i] >> 24) & 0xff);    ret[j++]=(byte)((cdata[i] >> 16) & 0xff);    ret[j++]=(byte)((cdata[i] >> 8) & 0xff);    ret[j++]=(byte)(cdata[i] & 0xff);  }  return ret;}  }
class C{  public boolean more() throws JSONException {  this.next();  if (this.end()) {    return false;  }  this.back();  return true;}  }
class C{  @Override public boolean isActive(){  return amIActive;}  }
class C{  @Override public SurfaceBuilder<T> cornerClickRadius(double radius){  cornerClickRadius=radius;  return this;}  }
class C{  final void internalSetModifiers(int pmodifiers){  supportedOnlyIn2();  preValueChange(MODIFIERS_PROPERTY);  this.modifierFlags=pmodifiers;  postValueChange(MODIFIERS_PROPERTY);}  }
class C{  public static int interleave(int x,int y){  if (((x | y) & 0xFFFF0000) != 0)   throw new IllegalArgumentException("Overflow");  return part1by1(x) | (part1by1(y) << 1);}  }
class C{  public PopulationIterator(){  super();  nextIndex=0;  currentIndex=-1;  expectedModCount=modCount;}  }
class C{  public void addFooterView(View v){  addFooterView(v,null,true);}  }
class C{  public static Range visibleRange(ContourDataset data,Range x,Range y){  Range range=null;  range=((DefaultContourDataset)data).getZValueRange(x,y);  return range;}  }
class C{  private void readObject(ObjectInputStream s) throws IOException, ClassNotFoundException {  s.defaultReadObject();}  }
class C{  public Instance calcPivot(TempNode node1,TempNode node2,Instances insts) throws Exception {  int classIdx=m_Instances.classIndex();  double[] attrVals=new double[insts.numAttributes()];  Instance temp;  double anchr1Ratio=(double)node1.points.length / (node1.points.length + node2.points.length), anchr2Ratio=(double)node2.points.length / (node1.points.length + node2.points.length);  for (int k=0; k < node1.anchor.numValues(); k++) {    if (node1.anchor.index(k) == classIdx)     continue;    attrVals[k]+=node1.anchor.valueSparse(k) * anchr1Ratio;  }  for (int k=0; k < node2.anchor.numValues(); k++) {    if (node2.anchor.index(k) == classIdx)     continue;    attrVals[k]+=node2.anchor.valueSparse(k) * anchr2Ratio;  }  temp=new DenseInstance(1.0,attrVals);  return temp;}  }
class C{  private void calcMaxTextOffset(Rectangle viewRect){  if (!isColumnLayout || !isLeftToRight) {    return;  }  int offset=viewRect.x + leadingGap + checkSize.maxWidth+ afterCheckIconGap+ iconSize.maxWidth+ gap;  if (checkSize.maxWidth == 0) {    offset-=afterCheckIconGap;  }  if (iconSize.maxWidth == 0) {    offset-=gap;  }  if (offset < minTextOffset) {    offset=minTextOffset;  }  calcMaxValue(SwingUtilities2.BASICMENUITEMUI_MAX_TEXT_OFFSET,offset);}  }
class C{  @Override public void onCreate(){  super.onCreate();  mConnectivityManager=(ConnectivityManager)getSystemService(Context.CONNECTIVITY_SERVICE);}  }
class C{  public boolean hasDebugInfo(){  for (  AbstractBlockBase<?> b : linearScanOrder()) {    for (    LIRInstruction op : getLIRforBlock(b)) {      if (op.hasState()) {        return true;      }    }  }  return false;}  }
class C{  public RealMatrix create(){  RealMatrix rotation=newIdentityMatrix();  for (  Plane plane : planes) {    double theta=plane.getTheta();    if (Double.isNaN(theta)) {      continue;    }    rotation=rotation.multiply(newRotationMatrix(plane.getFirstAxis(),plane.getSecondAxis(),theta));  }  return rotation;}  }
class C{  @Override public boolean contains(Object object){  if (object == null) {    return false;  }  for (int i=0; i < size; i++) {    if (object.equals(elements[i])) {      return true;    }  }  return false;}  }
class C{  public static boolean isNullConversion(MethodType call,MethodType recv,boolean keepInterfaces){  if (call == recv)   return true;  int len=call.parameterCount();  if (len != recv.parameterCount())   return false;  for (int i=0; i < len; i++)   if (!isNullConversion(call.parameterType(i),recv.parameterType(i),keepInterfaces))   return false;  return isNullConversion(recv.returnType(),call.returnType(),keepInterfaces);}  }
class C{  protected ResourceInfo newElement(int type){  ResourceInfo result=null;switch (type) {case IResource.FILE:case IResource.FOLDER:    result=new ResourceInfo(type);  break;case IResource.PROJECT:result=new ResourceInfo(type);break;case IResource.ROOT:result=new ResourceInfo(type);break;}return result;}  }
class C{  boolean isYoung(){  return mYoung;}  }
class C{  public InlineQueryResultCachedPhotoBuilder caption(String caption){  this.caption=caption;  return this;}  }
class C{  public ClusterTopologyCheckedException(String msg){  super(msg);}  }
class C{  public ForumPostConfig update(ForumPostConfig config){  config.addCredentials(this);  String xml=POST(this.url + "/update-forum-post",config.toXML());  Element root=parse(xml);  if (root == null) {    return null;  }  try {    config=new ForumPostConfig();    config.parseXML(root);    return config;  } catch (  Exception exception) {    this.exception=SDKException.parseFailure(exception);    throw this.exception;  }}  }
class C{  public void translate(final double offsetX,final double offsetY){  for (  Neuron neuron : this.getFlatNeuronList()) {    neuron.setX(neuron.getX() + offsetX);    neuron.setY(neuron.getY() + offsetY);  }}  }
class C{  public void saveBooleanToPreference(String key,Boolean value){  if (value == null) {    mSharedPreference.edit().remove(key).apply();  } else {    mSharedPreference.edit().putBoolean(key,value).apply();  }}  }
class C{  public StateMachineTestPlanStepBuilder expectVariable(Object key,Object value){  this.expectVariables.put(key,value);  return this;}  }
class C{  public static Network createTestNetwork(){  double freespeed=2.7;  double capacity=500.;  double numLanes=1.;  MutableScenario scenario=(MutableScenario)ScenarioUtils.createScenario(ConfigUtils.createConfig());  Network network=(Network)scenario.getNetwork();  Node node1=NetworkUtils.createAndAddNode(network,Id.create(1,Node.class),new Coord((double)0,(double)100));  Node node2=NetworkUtils.createAndAddNode(network,Id.create(2,Node.class),new Coord((double)0,(double)200));  Node node3=NetworkUtils.createAndAddNode(network,Id.create(3,Node.class),new Coord((double)0,(double)0));  Node node4=NetworkUtils.createAndAddNode(network,Id.create(4,Node.class),new Coord((double)100,(double)100));  Node node5=NetworkUtils.createAndAddNode(network,Id.create(5,Node.class),new Coord((double)100,(double)200));  Node node6=NetworkUtils.createAndAddNode(network,Id.create(6,Node.class),new Coord((double)100,(double)0));  Node node7=NetworkUtils.createAndAddNode(network,Id.create(7,Node.class),new Coord((double)200,(double)100));  Node node8=NetworkUtils.createAndAddNode(network,Id.create(8,Node.class),new Coord((double)200,(double)200));  Node node9=NetworkUtils.createAndAddNode(network,Id.create(9,Node.class),new Coord((double)200,(double)0));  final Node fromNode=node1;  final Node toNode=node2;  final double freespeed1=freespeed;  final double capacity1=capacity;  final double numLanes1=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(1,Link.class),fromNode,toNode,(double)100,freespeed1,capacity1,numLanes1);  final Node fromNode1=node2;  final Node toNode1=node1;  final double freespeed2=freespeed;  final double capacity2=capacity;  final double numLanes2=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(2,Link.class),fromNode1,toNode1,(double)100,freespeed2,capacity2,numLanes2);  final Node fromNode2=node1;  final Node toNode2=node3;  final double freespeed3=freespeed;  final double capacity3=capacity;  final double numLanes3=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(3,Link.class),fromNode2,toNode2,(double)100,freespeed3,capacity3,numLanes3);  final Node fromNode3=node3;  final Node toNode3=node1;  final double freespeed4=freespeed;  final double capacity4=capacity;  final double numLanes4=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(4,Link.class),fromNode3,toNode3,(double)100,freespeed4,capacity4,numLanes4);  final Node fromNode4=node1;  final Node toNode4=node4;  final double freespeed5=freespeed;  final double capacity5=capacity;  final double numLanes5=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(5,Link.class),fromNode4,toNode4,(double)100,freespeed5,capacity5,numLanes5);  final Node fromNode5=node4;  final Node toNode5=node1;  final double freespeed6=freespeed;  final double capacity6=capacity;  final double numLanes6=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(6,Link.class),fromNode5,toNode5,(double)100,freespeed6,capacity6,numLanes6);  final Node fromNode6=node4;  final Node toNode6=node5;  final double freespeed7=freespeed;  final double capacity7=capacity;  final double numLanes7=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(7,Link.class),fromNode6,toNode6,(double)100,freespeed7,capacity7,numLanes7);  final Node fromNode7=node5;  final Node toNode7=node4;  final double freespeed8=freespeed;  final double capacity8=capacity;  final double numLanes8=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(8,Link.class),fromNode7,toNode7,(double)100,freespeed8,capacity8,numLanes8);  final Node fromNode8=node4;  final Node toNode8=node6;  final double freespeed9=freespeed;  final double capacity9=capacity;  final double numLanes9=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(9,Link.class),fromNode8,toNode8,(double)100,freespeed9,capacity9,numLanes9);  final Node fromNode9=node6;  final Node toNode9=node4;  final double freespeed10=freespeed;  final double capacity10=capacity;  final double numLanes10=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(10,Link.class),fromNode9,toNode9,(double)100,freespeed10,capacity10,numLanes10);  final Node fromNode10=node4;  final Node toNode10=node7;  final double freespeed11=freespeed;  final double capacity11=capacity;  final double numLanes11=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(11,Link.class),fromNode10,toNode10,(double)100,freespeed11,capacity11,numLanes11);  final Node fromNode11=node7;  final Node toNode11=node4;  final double freespeed12=freespeed;  final double capacity12=capacity;  final double numLanes12=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(12,Link.class),fromNode11,toNode11,(double)100,freespeed12,capacity12,numLanes12);  final Node fromNode12=node5;  final Node toNode12=node8;  final double freespeed13=freespeed;  final double capacity13=capacity;  final double numLanes13=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(13,Link.class),fromNode12,toNode12,(double)100,freespeed13,capacity13,numLanes13);  final Node fromNode13=node8;  final Node toNode13=node5;  final double freespeed14=freespeed;  final double capacity14=capacity;  final double numLanes14=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(14,Link.class),fromNode13,toNode13,(double)100,freespeed14,capacity14,numLanes14);  final Node fromNode14=node6;  final Node toNode14=node9;  final double freespeed15=freespeed;  final double capacity15=capacity;  final double numLanes15=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(15,Link.class),fromNode14,toNode14,(double)100,freespeed15,capacity15,numLanes15);  final Node fromNode15=node9;  final Node toNode15=node6;  final double freespeed16=freespeed;  final double capacity16=capacity;  final double numLanes16=numLanes;  NetworkUtils.createAndAddLink(network,Id.create(16,Link.class),fromNode15,toNode15,(double)100,freespeed16,capacity16,numLanes16);  return network;}  }
class C{  public static <T>Set<T> emptySet(){  return java.util.Collections.emptySet();}  }
class C{  @Override public void connectionStateChanged(State state){  log.info("Site info connection state changed to {}",state);  if (state.equals(State.CONNECTED)) {    log.info("Curator (re)connected. Waking up the vdc manager...");    wakeup();  }}  }
class C{  @Inline @Interruptible public static int[] newContiguousIntArray(int n){  return new int[n];}  }
class C{  public static boolean ignoreWARCRecord(WARCWritable value) throws IOException {  int contentLength=value.getRecord().getHeader().getContentLength();  if (contentLength >= 10000000) {    return true;  }  if (!value.getRecord().isContentApplicationHttpResponse()) {    return true;  }  String httpHeaderText=value.getRecord().getHTTPHeaders();  if (httpHeaderText == null) {    return true;  }  String contentType=WARCRecord.extractHTTPHeaderContentType(httpHeaderText);  if (!ALLOWED_CONTENT_TYPES.contains(contentType)) {    return true;  }  return false;}  }
class C{  public void back(){  if (--pos == -1) {    pos=0;  }}  }
class C{  private void readObject(ObjectInputStream stream) throws IOException, ClassNotFoundException {  stream.defaultReadObject();  this.thermometerStroke=SerialUtilities.readStroke(stream);  this.thermometerPaint=SerialUtilities.readPaint(stream);  this.valuePaint=SerialUtilities.readPaint(stream);  this.mercuryPaint=SerialUtilities.readPaint(stream);  this.subrangeIndicatorStroke=SerialUtilities.readStroke(stream);  this.rangeIndicatorStroke=SerialUtilities.readStroke(stream);  this.subrangePaint=new Paint[3];  for (int i=0; i < 3; i++) {    this.subrangePaint[i]=SerialUtilities.readPaint(stream);  }  if (this.rangeAxis != null) {    this.rangeAxis.addChangeListener(this);  }}  }
class C{  private void generatePrivacyKeyPair(boolean clientMode) throws IOException, UnsupportedEncodingException, NoSuchAlgorithmException, SaslException {  byte[] ccmagic=CLIENT_CONF_MAGIC.getBytes(encoding);  byte[] scmagic=SVR_CONF_MAGIC.getBytes(encoding);  MessageDigest md5=MessageDigest.getInstance("MD5");  int n;  if (negotiatedCipher.equals(CIPHER_TOKENS[RC4_40])) {    n=5;  } else   if (negotiatedCipher.equals(CIPHER_TOKENS[RC4_56])) {    n=7;  } else {    n=16;  }  byte[] keyBuffer=new byte[n + ccmagic.length];  System.arraycopy(H_A1,0,keyBuffer,0,n);  System.arraycopy(ccmagic,0,keyBuffer,n,ccmagic.length);  md5.update(keyBuffer);  byte[] Kcc=md5.digest();  System.arraycopy(scmagic,0,keyBuffer,n,scmagic.length);  md5.update(keyBuffer);  byte[] Kcs=md5.digest();  if (logger.isLoggable(Level.FINER)) {    traceOutput(DP_CLASS_NAME,"generatePrivacyKeyPair","DIGEST24:Kcc: ",Kcc);    traceOutput(DP_CLASS_NAME,"generatePrivacyKeyPair","DIGEST25:Kcs: ",Kcs);  }  byte[] myKc;  byte[] peerKc;  if (clientMode) {    myKc=Kcc;    peerKc=Kcs;  } else {    myKc=Kcs;    peerKc=Kcc;  }  try {    SecretKey encKey;    SecretKey decKey;    if (negotiatedCipher.indexOf(CIPHER_TOKENS[RC4]) > -1) {      encCipher=Cipher.getInstance("RC4");      decCipher=Cipher.getInstance("RC4");      encKey=new SecretKeySpec(myKc,"RC4");      decKey=new SecretKeySpec(peerKc,"RC4");      encCipher.init(Cipher.ENCRYPT_MODE,encKey);      decCipher.init(Cipher.DECRYPT_MODE,decKey);    } else     if ((negotiatedCipher.equals(CIPHER_TOKENS[DES])) || (negotiatedCipher.equals(CIPHER_TOKENS[DES3]))) {      String cipherFullname, cipherShortname;      if (negotiatedCipher.equals(CIPHER_TOKENS[DES])) {        cipherFullname="DES/CBC/NoPadding";        cipherShortname="des";      } else {        cipherFullname="DESede/CBC/NoPadding";        cipherShortname="desede";      }      encCipher=Cipher.getInstance(cipherFullname);      decCipher=Cipher.getInstance(cipherFullname);      encKey=makeDesKeys(myKc,cipherShortname);      decKey=makeDesKeys(peerKc,cipherShortname);      IvParameterSpec encIv=new IvParameterSpec(myKc,8,8);      IvParameterSpec decIv=new IvParameterSpec(peerKc,8,8);      encCipher.init(Cipher.ENCRYPT_MODE,encKey,encIv);      decCipher.init(Cipher.DECRYPT_MODE,decKey,decIv);      if (logger.isLoggable(Level.FINER)) {        traceOutput(DP_CLASS_NAME,"generatePrivacyKeyPair","DIGEST26:" + negotiatedCipher + " IVcc: ",encIv.getIV());        traceOutput(DP_CLASS_NAME,"generatePrivacyKeyPair","DIGEST27:" + negotiatedCipher + " IVcs: ",decIv.getIV());        traceOutput(DP_CLASS_NAME,"generatePrivacyKeyPair","DIGEST28:" + negotiatedCipher + " encryption key: ",encKey.getEncoded());        traceOutput(DP_CLASS_NAME,"generatePrivacyKeyPair","DIGEST29:" + negotiatedCipher + " decryption key: ",decKey.getEncoded());      }    }  } catch (  InvalidKeySpecException e) {    throw new SaslException("DIGEST-MD5: Unsupported key " + "specification used.",e);  }catch (  InvalidAlgorithmParameterException e) {    throw new SaslException("DIGEST-MD5: Invalid cipher " + "algorithem parameter used to create cipher instance",e);  }catch (  NoSuchPaddingException e) {    throw new SaslException("DIGEST-MD5: Unsupported " + "padding used for chosen cipher",e);  }catch (  InvalidKeyException e) {    throw new SaslException("DIGEST-MD5: Invalid data " + "used to initialize keys",e);  }}  }
class C{  public static double calculateKilometers(double meters){  double kilometers=meters * 0.001;  return kilometers;}  }
class C{  protected void hitOrDraw(Graphics2D graphics,DrawInfo2D info,Bag putInHere){}  }
class C{  public static void v(String tag,String msg,Object... args){  if (sLevel > LEVEL_VERBOSE) {    return;  }  if (args.length > 0) {    msg=String.format(msg,args);  }  Log.v(tag,msg);}  }
class C{  @SuppressWarnings("unchecked") public void updateStory(final String message,final String name,final String caption,final String description,final String link,final String picture,final SocialAuthListener<Integer> listener) throws UnsupportedEncodingException {  try {    if (getCurrentProvider().getProviderId().equalsIgnoreCase("facebook")) {      final Map<String,String> params=new HashMap<>();      params.put("name",name);      params.put("caption",caption);      params.put("description",description);      params.put("link",link);      params.put("picture",picture);      storyResult="message=" + URLEncoder.encode(message,Constants.ENCODING) + "&access_token"+ "="+ getCurrentProvider().getAccessGrant().getKey();      new StoryTask(listener).execute(params);    } else {      Log.d("SocialAuthAdapter","Provider Not Supported");    }  } catch (  NullPointerException e) {    e.printStackTrace();    Log.d("SocialAuthAdapter","Provider Not Supported");  }}  }
class C{  public BitVector(int size){  this.size=size;  if ((size % 8) > 0) {    size=(size / 8) + 1;  } else {    size=(size / 8);  }  data=new byte[size];}  }
class C{  public static boolean isPowerOfTwo(int value){  return value != 0 && (value & (value - 1)) == 0;}  }
class C{  public User checkEmailOrLoginAndPsw(String loginOrEmail,String psw) throws NotActivatedUserException, BannedUserException, Exception {  UserExt user=universal.selectOne(new SelectUserByLoginOrEmail(loginOrEmail));  if (user == null)   return null;  checkStatus(user,loginOrEmail);  return equalsPsw(user,psw) ? user.getUser() : null;}  }
class C{  public static final byte[] decodeUrl(byte[] bytes) throws DecoderException {  if (bytes == null) {    return null;  }  ByteArrayOutputStream buffer=new ByteArrayOutputStream();  for (int i=0; i < bytes.length; i++) {    int b=bytes[i];    if (b == '+') {      buffer.write(' ');    } else     if (b == '%') {      try {        int u=Character.digit((char)bytes[++i],16);        int l=Character.digit((char)bytes[++i],16);        if (u == -1 || l == -1) {          throw new DecoderException("Invalid URL encoding");        }        buffer.write((char)((u << 4) + l));      } catch (      ArrayIndexOutOfBoundsException e) {        throw new DecoderException("Invalid URL encoding");      }    } else {      buffer.write(b);    }  }  return buffer.toByteArray();}  }
class C{  public void addAnimation(ComponentAnimation an){  anims.add(an);  Display.getInstance().notifyDisplay();}  }
class C{  public static String buildSuccessOutput(AsicContainerVerifier verifier){  StringBuilder builder=new StringBuilder();  builder.append("Verification successful.\n");  builder.append("Signer\n");  builder.append("    Certificate:\n");  appendCert(builder,verifier.getSignerCert());  builder.append("    ID: " + verifier.getSignerName() + "\n");  builder.append("OCSP response\n");  builder.append("    Signed by:\n");  appendCert(builder,verifier.getOcspCert());  builder.append("    Produced at: " + verifier.getOcspDate() + "\n");  builder.append("Timestamp\n");  builder.append("    Signed by:\n");  appendCert(builder,verifier.getTimestampCert());  builder.append("    Date: " + verifier.getTimestampDate() + "\n");  verifier.getAttachmentHashes().forEach(null);  return builder.toString();}  }
class C{  private boolean compareString(Object valueObj,String value1S,String value2S){  m_numeric=false;  String valueObjS=String.valueOf(valueObj);  String op=getOperation();  if (OPERATION_Eq.equals(op))   return valueObjS.compareTo(value1S) == 0; else   if (OPERATION_Gt.equals(op))   return valueObjS.compareTo(value1S) > 0; else   if (OPERATION_GtEq.equals(op))   return valueObjS.compareTo(value1S) >= 0; else   if (OPERATION_Le.equals(op))   return valueObjS.compareTo(value1S) < 0; else   if (OPERATION_LeEq.equals(op))   return valueObjS.compareTo(value1S) <= 0; else   if (OPERATION_Like.equals(op))   return valueObjS.compareTo(value1S) == 0; else   if (OPERATION_NotEq.equals(op))   return valueObjS.compareTo(value1S) != 0; else   if (OPERATION_Sql.equals(op))   throw new IllegalArgumentException("SQL not Implemented"); else   if (OPERATION_X.equals(op)) {    if (valueObjS.compareTo(value1S) < 0)     return false;    return valueObjS.compareTo(value2S) <= 0;  }  throw new IllegalArgumentException("Unknown Operation=" + op);}  }
class C{  static private String readFromFile(final File file) throws IOException {  final LineNumberReader r=new LineNumberReader(new FileReader(file));  try {    final StringBuilder sb=new StringBuilder();    String s;    while ((s=r.readLine()) != null) {      if (r.getLineNumber() > 1)       sb.append("\n");      sb.append(s);    }    return sb.toString();  }  finally {    r.close();  }}  }
class C{  public void destroy(){  log.fine("");}  }
class C{  public boolean match(NullLiteral node,Object other){  if (!(other instanceof NullLiteral)) {    return false;  }  return true;}  }
class C{  public OFNetmaskGetVendorDataRequest(byte tableIndex,int netMask){  super(BSN_GET_IP_MASK_ENTRY_REQUEST,tableIndex,netMask);}  }
class C{  public final boolean inside(double[] en){  return inside(en[0],en[1]);}  }
class C{  public static void removeBreakpoint(final BreakpointManager manager,final INaviModule module,final UnrelocatedAddress unrelocatedAddress){  Preconditions.checkNotNull(manager,"IE01710: Breakpoint manager argument can not be null");  Preconditions.checkNotNull(module,"IE01711: Module argument can not be null");  Preconditions.checkNotNull(unrelocatedAddress,"IE01712: Address argument can not be null");  final BreakpointAddress address=new BreakpointAddress(module,unrelocatedAddress);  if (manager.hasBreakpoint(BreakpointType.REGULAR,address)) {    removeBreakpoints(Sets.newHashSet(address),manager);  }}  }
class C{  public void changeValue(int index,Object value){  if (indexValueMap.containsKey(index)) {    indexValueMap.put(index,value);    nameValueMap.put(columnNameList.get(index),value);  }}  }
class C{  public HttpURL(final String userinfo,final String host,final int port,final String path,final String query) throws URIException {  this(userinfo,host,port,path,query,null);}  }
class C{  public static BlobEntry isBlobEntryForStoring(String repositoryLocation,String mimeType){  RepositoryLocation location;  try {    location=new RepositoryLocation(repositoryLocation);    Entry entry=location.locateEntry();    if (entry instanceof BlobEntry) {      BlobEntry blobEntry=(BlobEntry)entry;      if (mimeType.equals(blobEntry.getMimeType())) {        return blobEntry;      } else {        SwingTools.showSimpleErrorMessage("entry_must_be_blob",blobEntry.getName());        return null;      }    } else     if (entry == null) {      return createBlobEntry(repositoryLocation);    } else {      SwingTools.showSimpleErrorMessage("entry_must_be_blob",entry.getName());    }  } catch (  RepositoryException e) {    SwingTools.showSimpleErrorMessage("cannot_access_repository",e);  }catch (  MalformedRepositoryLocationException e) {    SwingTools.showSimpleErrorMessage("cannot_access_repository",e);  }  return null;}  }
class C{  protected void parseSession(HtmlPage page){  String value=page.getWebResponse().getResponseHeaderValue("Set-Cookie");  if (value == null) {    return;  }  int equals=value.indexOf("JSESSIONID=");  if (equals < 0) {    return;  }  value=value.substring(equals + "JSESSIONID=".length());  int semi=value.indexOf(";");  if (semi >= 0) {    value=value.substring(0,semi);  }  sessionId=value;}  }
class C{  public AsyncResult SetMonitoringModeAsync(RequestHeader RequestHeader,UnsignedInteger SubscriptionId,MonitoringMode MonitoringMode,UnsignedInteger... MonitoredItemIds){  SetMonitoringModeRequest req=new SetMonitoringModeRequest(RequestHeader,SubscriptionId,MonitoringMode,MonitoredItemIds);  return channel.serviceRequestAsync(req);}  }
class C{  @Override public Object eGet(int featureID,boolean resolve,boolean coreType){switch (featureID) {case StextPackage.REGULAR_EVENT_SPEC__EVENT:    return getEvent();}return super.eGet(featureID,resolve,coreType);}  }
class C{  private static void installJavaStuff(Document document){  LangDocumentPartitionerSetup.getInstance().setup(document);}  }
class C{  public void broadcastSerialData(byte[] data,OneSheeldDevice exceptionArray[]){  if (data == null)   throw new NullPointerException("The passed data array is null, have you checked its validity?");  Log.i("Manager: Broadcasting serial data to all connected devices.");  ArrayList<OneSheeldDevice> tempConnectedDevices;synchronized (connectedDevicesLock) {    tempConnectedDevices=new ArrayList<>(connectedDevices.values());  }  for (  OneSheeldDevice device : tempConnectedDevices) {    boolean foundInExceptArray=false;    if (exceptionArray != null)     for (    OneSheeldDevice exceptDevice : exceptionArray)     if (device.getAddress().equals(exceptDevice.getAddress())) {      foundInExceptArray=true;      break;    }    if (!foundInExceptArray)     device.sendSerialData(data);  }}  }
class C{  public LognormalDistr(Random seed,double shape,double scale){  this(shape,scale);  numGen.reseedRandomGenerator(seed.nextLong());}  }
class C{  public AnimationBuilder dp(){  nextValueWillBeDp=true;  return this;}  }
class C{  public double measureBestVal(){  return m_bestResult;}  }
class C{  public void removeEfferent(final Synapse synapse){  if (fanOut != null) {    fanOut.remove(synapse.getTarget());  }}  }
class C{  public void addQuat(Quaternion input,Quaternion output){  output.setX(getX() + input.getX());  output.setY(getY() + input.getY());  output.setZ(getZ() + input.getZ());  output.setW(getW() + input.getW());}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:52.597 -0500",hash_original_method="D85F37EBA7BADE4247645DA206EE836F",hash_generated_method="1B57BE8B9CF258F29A6F28387123668B") public static final boolean isLocationProviderEnabled(ContentResolver cr,String provider){  String allowedProviders=Settings.Secure.getString(cr,LOCATION_PROVIDERS_ALLOWED);  return TextUtils.delimitedStringContains(allowedProviders,',',provider);}  }
class C{  private static void writeSpaces(Writer out,int amt) throws IOException {  while (amt > 0) {    out.write(' ');    amt--;  }}  }
class C{  private static int directionalRegexp(boolean forward,RegExp regexp,String text,int column){  MatchResult result=forward ? RegExpUtils.findMatchAfterIndex(regexp,text,column) : RegExpUtils.findMatchBeforeIndex(regexp,text,column);  int fallback=forward ? text.length() : -1;  return result == null ? fallback : result.getIndex();}  }
class C{  public static PropertyContainer find(Object src,Path path){  PropertyContainer result;  PropertyDescriptor desc;  Object newSrc;  PathElement part;  Method method;  Object methodResult;  part=path.get(0);  try {    desc=new PropertyDescriptor(part.getName(),src.getClass());  } catch (  Exception e) {    desc=null;    e.printStackTrace();  }  if (desc == null)   return null;  if (path.size() == 1) {    result=new PropertyContainer(desc,src);  } else {    try {      method=desc.getReadMethod();      methodResult=method.invoke(src,(Object[])null);      if (part.hasIndex())       newSrc=Array.get(methodResult,part.getIndex()); else       newSrc=methodResult;      result=find(newSrc,path.subpath(1));    } catch (    Exception e) {      result=null;      e.printStackTrace();    }  }  return result;}  }
class C{  public T caseSimpleProjectDependency(SimpleProjectDependency object){  return null;}  }
class C{  public boolean isSetHostname(){  return this.hostname != null;}  }
class C{  public static void main(String[] args){  if (args.length != 1) {    System.out.println("Usage: java huglife.HugLife [worldname]");    return;  }  HugLife h=readWorld(args[0]);  if (SIMULATE_BY_CYCLE) {    h.simulate(MAX_CYCLES);  } else {    h.simulate(MAX_TICS,TICS_BETWEEN_DRAW);  }}  }
class C{  public boolean hasMileage(){  return hasExtension(Mileage.class);}  }
class C{  public void startDocument() throws SAXException {}  }
class C{  public double asDouble(){  return asNumber().doubleValue();}  }
class C{  @Override public void writeCharacters(String text) throws XMLStreamException {  log.log(Level.FINE,"writeCharacters({0})",text);  writeCharsInternal(text,skipSpaces);}  }
class C{  public void loadingFinished(){  if (loading) {    ((CardLayout)(getLayout())).last(LoadingContentPane.this);    loading=false;  }}  }
class C{  public HttpStack(int httpPort) throws IOException {  new HttpServer(httpPort);}  }
class C{  public DiskBasedCache(File rootDirectory,int maxCacheSizeInBytes){  mRootDirectory=rootDirectory;  mMaxCacheSizeInBytes=maxCacheSizeInBytes;}  }
class C{  public synchronized void enqueueTask(T t) throws InterruptedException {  while (_data.size() + 1 > MAX_SIZE) {    LOG.warn("MAX_SIZE of task queue reached.");    wait();  }  _data.addLast(t);  notify();}  }
class C{  public int size(){  return closed.size();}  }
class C{  Date toDate(Calendar calendar){  return calendar.getTime();}  }
class C{  public static int max(int a,int b){  return a > b ? a : b;}  }
class C{  public void clearActivations(){  for (  Neuron n : this.getNeuronList()) {    n.clear();  }}  }
class C{  public ViewExpiredException(Throwable cause,String viewId){  super(cause);  this.viewId=viewId;}  }
class C{  public String toString(){  StringBuffer sb=new StringBuffer("MYear[");  sb.append(get_ID()).append("-").append(getFiscalYear()).append("]");  return sb.toString();}  }
class C{  public boolean isStateActive(State state){switch (state) {case main_region_StateA:    return stateVector[0] == State.main_region_StateA;case main_region_StateB:  return stateVector[0] == State.main_region_StateB;case second_region_SateA:return stateVector[1] == State.second_region_SateA;case second_region_StateB:return stateVector[1] == State.second_region_StateB;default :return false;}}  }
class C{  public void acceptChanges(Connection con) throws SyncProviderException {  setConnection(con);  acceptChanges();}  }
class C{  public void paintArrowButtonBorder(SynthContext context,Graphics g,int x,int y,int w,int h){}  }
class C{  private void cleanState(){  username=null;  if (password != null) {    Arrays.fill(password,' ');    password=null;  }  try {    if (ctx != null) {      ctx.close();    }  } catch (  NamingException e) {  }  ctx=null;  if (clearPass) {    sharedState.remove(USERNAME_KEY);    sharedState.remove(PASSWORD_KEY);  }}  }
class C{  public static <K,V>MutableMap<V,K> reverseMapping(Map<K,V> map){  MutableMap<V,K> reverseMap=UnifiedMap.newMap(map.size());  MapIterate.forEachKeyValue(map,null);  return reverseMap;}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.CIRCLE);    graph.setEndpoint(from,to,Endpoint.TAIL);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    changeFlag=true;    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public void visitInnerClassType(String name){}  }
class C{  public final String yytext(){  return new String(zzBuffer,zzStartRead,zzMarkedPos - zzStartRead);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:27.382 -0500",hash_original_method="98F6B6C49553AC4D3032798198FC694A",hash_generated_method="E0D85ABA1500C693E45FDA4B5393020F") public Entry(String tag,long millis,ParcelFileDescriptor data,int flags){  if (tag == null)   throw new NullPointerException("tag == null");  if (((flags & IS_EMPTY) != 0) != (data == null)) {    throw new IllegalArgumentException("Bad flags: " + flags);  }  mTag=tag;  mTimeMillis=millis;  mData=null;  mFileDescriptor=data;  mFlags=flags;}  }
class C{  public Expression simple(Factory f,SourceCode cfml) throws TemplateException {  StringBuffer sb=new StringBuffer();  Position line=cfml.getPosition();  while (cfml.isValidIndex()) {    if (cfml.isCurrent(' ') || cfml.isCurrent('>') || cfml.isCurrent("/>"))     break; else     if (cfml.isCurrent('"') || cfml.isCurrent('#') || cfml.isCurrent('\'')) {      throw new TemplateException(cfml,"simple attribute value can't contain [" + cfml.getCurrent() + "]");    } else     sb.append(cfml.getCurrent());    cfml.next();  }  cfml.removeSpace();  return f.createLitString(sb.toString(),line,cfml.getPosition());}  }
class C{  public IssuerNotMatchException(){}  }
class C{  public void testStandard() throws Exception {  Input keys[]=new Input[]{new Input("the ghost of christmas past",50)};  Directory tempDir=getDirectory();  Analyzer standard=new MockAnalyzer(random(),MockTokenizer.WHITESPACE,true,MockTokenFilter.ENGLISH_STOPSET);  AnalyzingSuggester suggester=new AnalyzingSuggester(tempDir,"suggest",standard,standard,AnalyzingSuggester.EXACT_FIRST | AnalyzingSuggester.PRESERVE_SEP,256,-1,false);  suggester.build(new InputArrayIterator(keys));  List<LookupResult> results=suggester.lookup(TestUtil.stringToCharSequence("the ghost of chris",random()),false,1);  assertEquals(1,results.size());  assertEquals("the ghost of christmas past",results.get(0).key.toString());  assertEquals(50,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("ghost of chris",random()),false,1);  assertEquals(1,results.size());  assertEquals("the ghost of christmas past",results.get(0).key.toString());  assertEquals(50,results.get(0).value,0.01F);  results=suggester.lookup(TestUtil.stringToCharSequence("ghost chris",random()),false,1);  assertEquals(1,results.size());  assertEquals("the ghost of christmas past",results.get(0).key.toString());  assertEquals(50,results.get(0).value,0.01F);  IOUtils.close(standard,tempDir);}  }
class C{  public WordAlternative(Double confidence,String word){  this.confidence=confidence;  this.word=word;}  }
class C{  public FailOverStrategy(int maxRetryTimes){  this.maxRetryTimes=maxRetryTimes;}  }
class C{  public boolean isIndexSelected(int index){  return isSelected(index);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:33:04.274 -0500",hash_original_method="AA202573A133FD4C93192532FFFE560D",hash_generated_method="474639955C5D8CF949FD2CA6772DB7D6") private synchronized boolean sendMessage(Message msg){  if (mHandler != null) {    mHandler.sendMessage(msg);    return true;  } else {    return false;  }}  }
class C{  synchronized static void computePRF(byte[] out,byte[] secret,byte[] str_byts,byte[] seed) throws GeneralSecurityException {  if (sha_mac == null) {    init();  }  SecretKeySpec keyMd5;  SecretKeySpec keySha1;  if ((secret == null) || (secret.length == 0)) {    secret=new byte[8];    keyMd5=new SecretKeySpec(secret,"HmacMD5");    keySha1=new SecretKeySpec(secret,"HmacSHA1");  } else {    int length=secret.length >> 1;    int offset=secret.length & 1;    keyMd5=new SecretKeySpec(secret,0,length + offset,"HmacMD5");    keySha1=new SecretKeySpec(secret,length,length + offset,"HmacSHA1");  }  if (logger != null) {    logger.println("secret[" + secret.length + "]: ");    logger.printAsHex(16,""," ",secret);    logger.println("label[" + str_byts.length + "]: ");    logger.printAsHex(16,""," ",str_byts);    logger.println("seed[" + seed.length + "]: ");    logger.printAsHex(16,""," ",seed);    logger.println("MD5 key:");    logger.printAsHex(16,""," ",keyMd5.getEncoded());    logger.println("SHA1 key:");    logger.printAsHex(16,""," ",keySha1.getEncoded());  }  md5_mac.init(keyMd5);  sha_mac.init(keySha1);  int pos=0;  md5_mac.update(str_byts);  byte[] hash=md5_mac.doFinal(seed);  while (pos < out.length) {    md5_mac.update(hash);    md5_mac.update(str_byts);    md5_mac.update(seed);    if (pos + md5_mac_length < out.length) {      md5_mac.doFinal(out,pos);      pos+=md5_mac_length;    } else {      System.arraycopy(md5_mac.doFinal(),0,out,pos,out.length - pos);      break;    }    hash=md5_mac.doFinal(hash);  }  if (logger != null) {    logger.println("P_MD5:");    logger.printAsHex(md5_mac_length,""," ",out);  }  pos=0;  sha_mac.update(str_byts);  hash=sha_mac.doFinal(seed);  byte[] sha1hash;  while (pos < out.length) {    sha_mac.update(hash);    sha_mac.update(str_byts);    sha1hash=sha_mac.doFinal(seed);    for (int i=0; (i < sha_mac_length) & (pos < out.length); i++) {      out[pos++]^=sha1hash[i];    }    hash=sha_mac.doFinal(hash);  }  if (logger != null) {    logger.println("PRF:");    logger.printAsHex(sha_mac_length,""," ",out);  }}  }
class C{  public Map<String,String> attributes(){  return attributes;}  }
class C{  public void test_syntax_update_bad_08() throws MalformedQueryException {  final String query="CREATE GRAPH <:g> ;; LOAD <:remote> into GRAPH <:g>";  negativeTest(query);}  }
class C{  public static synchronized void ensureRapidMinerHomeSet(final Level logLevel){  LOGGER.setLevel(logLevel);  if (getRapidMinerHome() == null) {    logInfo("Property " + PROPERTY_RAPIDMINER_HOME + " is not set. Guessing.");    if (!searchInClassPath()) {      try {        logInfo("Property " + PROPERTY_RAPIDMINER_HOME + " not found via search in Classpath. Searching in build directory.");        searchInBuildDir();      } catch (      Throwable e) {        logSevere("Failed to locate 'rapidminer.home'! Cause: " + e.getLocalizedMessage());      }    }  } else {    logInfo(PROPERTY_RAPIDMINER_HOME + " is '" + getRapidMinerHome()+ "'.");  }}  }
class C{  @Override public double[] distributionForInstance(Instance instance) throws Exception {  DecisionTableHashKey thekey;  double[] tempDist;  double[] normDist;  m_disTransform.input(instance);  m_disTransform.batchFinished();  instance=m_disTransform.output();  m_delTransform.input(instance);  m_delTransform.batchFinished();  instance=m_delTransform.output();  thekey=new DecisionTableHashKey(instance,instance.numAttributes(),false);  if ((tempDist=m_entries.get(thekey)) == null) {    if (m_useIBk) {      tempDist=m_ibk.distributionForInstance(instance);    } else {      if (!m_classIsNominal) {        tempDist=new double[1];        tempDist[0]=m_majority;      } else {        tempDist=m_classPriors.clone();      }    }  } else {    if (!m_classIsNominal) {      normDist=new double[1];      normDist[0]=(tempDist[0] / tempDist[1]);      tempDist=normDist;    } else {      normDist=new double[tempDist.length];      System.arraycopy(tempDist,0,normDist,0,tempDist.length);      Utils.normalize(normDist);      tempDist=normDist;    }  }  return tempDist;}  }
class C{  public NdefMessage(NdefRecord record,NdefRecord... records){  if (record == null)   throw new NullPointerException("record cannot be null");  for (  NdefRecord r : records) {    if (r == null) {      throw new NullPointerException("record cannot be null");    }  }  mRecords=new NdefRecord[1 + records.length];  mRecords[0]=record;  System.arraycopy(records,0,mRecords,1,records.length);}  }
class C{  public int compareTo(UploadCountHolder other){  if (other.getCompleted() == _completed)   return _attempted - other.getAttempted();  return _completed - other.getCompleted();}  }
class C{  public void callChildVisitors(XSLTVisitor visitor,boolean callAttrs){  super.callChildVisitors(visitor,callAttrs);}  }
class C{  private void closeEntityManager(){  EntityManager entityManager=getEntityManager();  if (entityManager != null && entityManager.isOpen()) {    entityManager.close();    entityManagerThreadLocal.set(null);  }}  }
class C{  public String toString(){  return this.getClass().getSimpleName() + " seqno=" + seqno;}  }
class C{  @Override protected boolean readHeader() throws IOException, ArticleReaderException {  this.enteringTime=startTime;  return super.readHeader();}  }
class C{  public String TO_NUMBER(BigDecimal number,int displayType){  if (number == null)   return "NULL";  BigDecimal result=number;  int scale=DisplayType.getDefaultPrecision(displayType);  if (scale > number.scale()) {    try {      result=number.setScale(scale,BigDecimal.ROUND_HALF_UP);    } catch (    Exception e) {    }  }  return result.toString();}  }
class C{  public void goBack(){  if (this.inAppWebView.canGoBack()) {    this.inAppWebView.goBack();  }}  }
class C{  public static int copy(InputStream input,OutputStream output) throws IOException {  long count=copyLarge(input,output);  if (count > Integer.MAX_VALUE) {    return -1;  }  return (int)count;}  }
class C{  public void receive(boolean bit){  mBits=Long.rotateLeft(mBits,1);  mBits&=mMask;  if (bit) {    mBits+=1;  }  for (  ISyncProcessor processor : mSyncProcessors) {    processor.checkSync(mBits);  }}  }
class C{  public ObjectFactory(){}  }
class C{  public Projection create(Properties props) throws ProjectionException {  try {    Point2D center=(Point2D)props.get(ProjectionFactory.CENTER);    float scale=PropUtils.floatFromProperties(props,ProjectionFactory.SCALE,10000000);    int height=PropUtils.intFromProperties(props,ProjectionFactory.HEIGHT,100);    int width=PropUtils.intFromProperties(props,ProjectionFactory.WIDTH,100);    Cartesian proj=new Cartesian(center,scale,width,height);    proj.setLimits(topLimit,bottomLimit,leftLimit,rightLimit,limitAnchorPoint);    return proj;  } catch (  Exception e) {    if (Debug.debugging("proj")) {      Debug.output("CartesianLoader: problem creating Cartesian projection " + e.getMessage());    }  }  throw new ProjectionException("CartesianLoader: problem creating Cartesian projection");}  }
class C{  public Builder batchSize(final long batchSize){  this.batchSize=batchSize;  return this;}  }
class C{  public static void abort(@Nullable AsyncAbortable abortable,boolean swallowIOException) throws IOException {  if (null == abortable) {    return;  }  try {    FutureUtils.result(abortable.asyncAbort());  } catch (  IOException ioe) {    if (swallowIOException) {      logger.warn("IOException thrown while aborting Abortable {} : ",abortable,ioe);    } else {      throw ioe;    }  }}  }
class C{  protected static void do_action_table(PrintStream out,parse_action_table act_tab,boolean compact_reduces) throws internal_error {  parse_action_row row;  parse_action act;  int red;  long start_time=System.currentTimeMillis();  out.println();  out.println("  /** parse action table */");  out.println("  protected static final short[][] _action_table = {");  for (int i=0; i < act_tab.num_states(); i++) {    row=act_tab.under_state[i];    if (compact_reduces)     row.compute_default(); else     row.default_reduce=-1;    out.print("    /*" + i + "*/{");    for (int j=0; j < row.size(); j++) {      act=row.under_term[j];      if (act.kind() != parse_action.ERROR) {        if (act.kind() == parse_action.SHIFT) {          out.print(j + "," + (((shift_action)act).shift_to().index() + 1)+ ",");        } else         if (act.kind() == parse_action.REDUCE) {          red=((reduce_action)act).reduce_with().index();          if (red != row.default_reduce)           out.print(j + "," + (-(red + 1))+ ",");        } else         throw new internal_error("Unrecognized action code " + act.kind() + " found in parse table");      }    }    if (row.default_reduce != -1)     out.println("-1," + (-(row.default_reduce + 1)) + "},"); else     out.println("-1,0},");  }  out.println("  };");  out.println();  out.println("  /** access to parse action table */");  out.println("  public short[][] action_table() {return _action_table;}");  action_table_time=System.currentTimeMillis() - start_time;}  }
class C{  private void updateHistoryButtons(){  historyForwardButton.setEnabled(history.hasNext());  historyBackButton.setEnabled(history.hasPrevious());}  }
class C{  public static void wtf(String msg){  if (null == msg || null == sXLogConfig) {    return;  }  if (allowConsoleLogPrint(LogLevel.WTF)) {    Log.wtf(getDefaultTag(),msg);  }  if (allowFileLogPrint(LogLevel.WTF)) {    FileLogHelper.getInstance().logToFile(msg,null,getDefaultTag(),LogLevel.E);  }}  }
class C{  public void add(Production production){  productions.add(production);}  }
class C{  @SuppressWarnings({"WeakerAccess"}) public static double gammaCdf(double a,double x){  double gln;  if ((x <= 0.0) || (a <= 0.0)) {    return Double.NaN;  } else   if (a > LARGE_A) {    return gnorm(a,x);  } else {    gln=lngamma(a);    if (x < (a + 1.0)) {      return gser(a,x,gln);    } else {      return (1.0 - gcf(a,x,gln));    }  }}  }
class C{  public StempelStemmer(Trie stemmer){  this.stemmer=stemmer;}  }
class C{  public PositionBasedCompletionProposal(String replacementString,Position replacementPosition,int cursorPosition,Image image,String displayString,IContextInformation contextInformation,String additionalProposalInfo,char[] triggers){  Assert.isNotNull(replacementString);  Assert.isTrue(replacementPosition != null);  fReplacementString=replacementString;  fReplacementPosition=replacementPosition;  fCursorPosition=cursorPosition;  fImage=image;  fDisplayString=displayString;  fContextInformation=contextInformation;  fAdditionalProposalInfo=additionalProposalInfo;  fTriggerCharacters=triggers;}  }
class C{  private IonStruct makeIonRepresentation(ValueFactory factory){  IonStruct ionRep=factory.newEmptyStruct();  ionRep.addTypeAnnotation(ION_SYMBOL_TABLE);  SymbolTable[] importedTables=getImportedTablesNoCopy();  if (importedTables.length > 1) {    IonList importsList=factory.newEmptyList();    for (int i=1; i < importedTables.length; i++) {      SymbolTable importedTable=importedTables[i];      IonStruct importStruct=factory.newEmptyStruct();      importStruct.add(NAME,factory.newString(importedTable.getName()));      importStruct.add(VERSION,factory.newInt(importedTable.getVersion()));      importStruct.add(MAX_ID,factory.newInt(importedTable.getMaxId()));      importsList.add(importStruct);    }    ionRep.add(IMPORTS,importsList);  }  if (mySymbolsCount > 0) {    int sid=myFirstLocalSid;    for (int offset=0; offset < mySymbolsCount; offset++, sid++) {      String symbolName=mySymbolNames[offset];      recordLocalSymbolInIonRep(ionRep,symbolName,sid);    }  }  return ionRep;}  }
class C{  private boolean isReferenceResult(Clustering<?> t){  if ("bylabel-clustering".equals(t.getShortName())) {    return true;  }  if ("bymodel-clustering".equals(t.getShortName())) {    return true;  }  if ("allinone-clustering".equals(t.getShortName())) {    return true;  }  if ("allinnoise-clustering".equals(t.getShortName())) {    return true;  }  return false;}  }
class C{  public ListNode detectCycle(ListNode head){  if (head == null)   return null;  ListNode slow=head;  ListNode fast=head;  boolean hasCycle=false;  while (fast.next != null && fast.next.next != null) {    fast=fast.next.next;    slow=slow.next;    if (fast == slow) {      hasCycle=true;      break;    }  }  if (!hasCycle)   return null;  slow=head;  while (slow != fast) {    fast=fast.next;    slow=slow.next;  }  return slow;}  }
class C{  public void sendSessionBegins(){  sendSessionState(SessionState.Start);}  }
class C{  public char nextClean() throws JSONException {  int nextCleanInt=nextCleanInternal();  return nextCleanInt == -1 ? '\0' : (char)nextCleanInt;}  }
class C{  @Override public Object terminate(){  return new Object[]{Integer.valueOf(count),super.terminate()};}  }
class C{  protected void atCastToRtype(CastExpr expr) throws CompileError {  expr.getOprand().accept(this);  if (exprType == VOID || isRefType(exprType) || arrayDim > 0)   compileUnwrapValue(returnType,bytecode); else   if (returnType instanceof CtPrimitiveType) {    CtPrimitiveType pt=(CtPrimitiveType)returnType;    int destType=MemberResolver.descToType(pt.getDescriptor());    atNumCastExpr(exprType,destType);    exprType=destType;    arrayDim=0;    className=null;  } else   throw new CompileError("invalid cast");}  }
class C{  public boolean verify(byte[] hash,byte[] signature){  return verify(hash,signature,pub);}  }
class C{  public void updateTotalValue(){  total=0;  for (int i=0; i < dataset.getItemCount(); i++) {    total+=dataset.getValue(i).doubleValue();  }}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:31:10.470 -0500",hash_original_method="75B70D9FB26EF7CE7043E09D494022A0",hash_generated_method="68FAF3CB941E8F3EE47F333D991B23E1") public Element create(){  mRS.validate();  Element[] ein=new Element[mCount];  String[] sin=new String[mCount];  int[] asin=new int[mCount];  java.lang.System.arraycopy(mElements,0,ein,0,mCount);  java.lang.System.arraycopy(mElementNames,0,sin,0,mCount);  java.lang.System.arraycopy(mArraySizes,0,asin,0,mCount);  int[] ids=new int[ein.length];  for (int ct=0; ct < ein.length; ct++) {    ids[ct]=ein[ct].getID();  }  int id=mRS.nElementCreate2(ids,sin,asin);  return new Element(id,mRS,ein,sin,asin);}  }
class C{  default Filterable<T> retainAll(final Stream<? extends T> stream){  final Set<T> set=stream.collect(Collectors.toSet());  return filter(null);}  }
class C{  public StrBuilder insert(final int index,String str){  validateIndex(index);  if (str == null) {    str=nullText;  }  if (str != null) {    final int strLen=str.length();    if (strLen > 0) {      final int newSize=size + strLen;      ensureCapacity(newSize);      System.arraycopy(buffer,index,buffer,index + strLen,size - index);      size=newSize;      str.getChars(0,strLen,buffer,index);    }  }  return this;}  }
class C{  protected AbstractDebugger(){  synchronizer=new DebuggerSynchronizer(this);  memorySynchronizer=new MemorySynchronizer(this);}  }
class C{  public Pair(){  this(null,null);}  }
class C{  public String searchpopup() throws Exception {  executeQuery();  return POPUP_VIEW;}  }
class C{  void update(Context context){  SharedPreferences settings=context.getSharedPreferences(context.getPackageName(),0);  Resources res=context.getResources();  DisplayMetrics dm=res.getDisplayMetrics();  debugModeEnabled=settings.getBoolean(DVConstants.Values.App.Key_DebugModeEnabled,false);  isLandscape=res.getConfiguration().orientation == Configuration.ORIENTATION_LANDSCAPE;  displayRect.set(0,0,dm.widthPixels,dm.heightPixels);  animationPxMovementPerSecond=res.getDimensionPixelSize(R.dimen.animation_movement_in_dps_per_second);  filteringCurrentViewsAnimDuration=res.getInteger(R.integer.filter_animate_current_views_duration);  filteringNewViewsAnimDuration=res.getInteger(R.integer.filter_animate_new_views_duration);  taskStackScrollDuration=res.getInteger(R.integer.animate_deck_scroll_duration);  TypedValue widthPaddingPctValue=new TypedValue();  res.getValue(R.dimen.deck_width_padding_percentage,widthPaddingPctValue,true);  taskStackWidthPaddingPct=widthPaddingPctValue.getFloat();  TypedValue stackOverscrollPctValue=new TypedValue();  res.getValue(R.dimen.deck_overscroll_percentage,stackOverscrollPctValue,true);  taskStackOverscrollPct=stackOverscrollPctValue.getFloat();  taskStackMaxDim=res.getInteger(R.integer.max_deck_view_dim);  taskStackTopPaddingPx=res.getDimensionPixelSize(R.dimen.deck_top_padding);  transitionEnterFromAppDelay=res.getInteger(R.integer.enter_from_app_transition_duration);  transitionEnterFromHomeDelay=res.getInteger(R.integer.enter_from_home_transition_duration);  taskViewEnterFromAppDuration=res.getInteger(R.integer.task_enter_from_app_duration);  taskViewEnterFromHomeDuration=res.getInteger(R.integer.task_enter_from_home_duration);  taskViewEnterFromHomeStaggerDelay=res.getInteger(R.integer.task_enter_from_home_stagger_delay);  taskViewExitToAppDuration=res.getInteger(R.integer.task_exit_to_app_duration);  taskViewExitToHomeDuration=res.getInteger(R.integer.task_exit_to_home_duration);  taskViewRemoveAnimDuration=res.getInteger(R.integer.animate_task_view_remove_duration);  taskViewRemoveAnimTranslationXPx=res.getDimensionPixelSize(R.dimen.task_view_remove_anim_translation_x);  taskViewRoundedCornerRadiusPx=res.getDimensionPixelSize(R.dimen.task_view_rounded_corners_radius);  taskViewHighlightPx=res.getDimensionPixelSize(R.dimen.task_view_highlight);  taskViewTranslationZMinPx=res.getDimensionPixelSize(R.dimen.task_view_z_min);  taskViewTranslationZMaxPx=res.getDimensionPixelSize(R.dimen.task_view_z_max);  taskViewAffiliateGroupEnterOffsetPx=res.getDimensionPixelSize(R.dimen.task_view_affiliate_group_enter_offset);  TypedValue thumbnailAlphaValue=new TypedValue();  res.getValue(R.dimen.task_view_thumbnail_alpha,thumbnailAlphaValue,true);  taskViewThumbnailAlpha=thumbnailAlphaValue.getFloat();  taskBarViewDefaultBackgroundColor=res.getColor(R.color.task_bar_default_background_color);  taskBarViewLightTextColor=res.getColor(R.color.task_bar_light_text_color);  taskBarViewDarkTextColor=res.getColor(R.color.task_bar_dark_text_color);  taskBarViewHighlightColor=res.getColor(R.color.task_bar_highlight_color);  TypedValue affMinAlphaPctValue=new TypedValue();  res.getValue(R.dimen.task_affiliation_color_min_alpha_percentage,affMinAlphaPctValue,true);  taskBarViewAffiliationColorMinAlpha=affMinAlphaPctValue.getFloat();  taskBarHeight=res.getDimensionPixelSize(R.dimen.deck_child_header_bar_height);  taskBarDismissDozeDelaySeconds=res.getInteger(R.integer.task_bar_dismiss_delay_seconds);  navBarScrimEnterDuration=res.getInteger(R.integer.nav_bar_scrim_enter_duration);  useHardwareLayers=res.getBoolean(R.bool.config_use_hardware_layers);  altTabKeyDelay=res.getInteger(R.integer.deck_alt_tab_key_delay);  fakeShadows=res.getBoolean(R.bool.config_fake_shadows);  svelteLevel=res.getInteger(R.integer.deck_svelte_level);}  }
class C{  private static void fullCardinalityCorrectionTest(final ISchemaVersion schemaVersion) throws IOException {  final Writer output=openOutput(schemaVersion,"cardinality_correction",TestType.ADD);  final HLL hll=newHLL(HLLType.FULL);  initLineAdd(output,hll,schemaVersion);  for (int i=0; i < ((1 << LOG2M) - 1); i++) {    final long rawValue=constructHLLValue(LOG2M,i,1);    cumulativeAddLine(output,hll,rawValue,schemaVersion);  }  for (int i=0; i < (1 << LOG2M); i++) {    final long rawValue=constructHLLValue(LOG2M,i,7);    cumulativeAddLine(output,hll,rawValue,schemaVersion);  }  for (int i=0; i < (1 << LOG2M); i++) {    final long rawValue=constructHLLValue(LOG2M,i,30);    cumulativeAddLine(output,hll,rawValue,schemaVersion);  }  output.flush();  output.close();}  }
class C{  public boolean isEmpty(){  return begin == end;}  }
class C{  private void init(int initCapacity){  table=new Object[2 * initCapacity];}  }
class C{  public boolean isLocked(){  return m_locked;}  }
class C{  public void quit(){  mQuit=true;  interrupt();}  }
class C{  public TaggingData(){  cntxGenVector=new ArrayList<ContextGenerator>();}  }
class C{  protected void parseKeyBits() throws InvalidKeyException {  try {    DerInputStream in=new DerInputStream(getKey().toByteArray());    DerValue derValue=in.getDerValue();    if (derValue.tag != DerValue.tag_Sequence) {      throw new IOException("Not a SEQUENCE");    }    DerInputStream data=derValue.data;    n=RSAPrivateCrtKeyImpl.getBigInteger(data);    e=RSAPrivateCrtKeyImpl.getBigInteger(data);    if (derValue.data.available() != 0) {      throw new IOException("Extra data available");    }  } catch (  IOException e) {    throw new InvalidKeyException("Invalid RSA public key",e);  }}  }
class C{  public void removeAllRenamingCallbacks(){  renamingCallbacks.clear();}  }
class C{  private static List<Size> pickUpToThree(List<Size> sizes){  List<Size> result=new ArrayList<Size>();  Size largest=sizes.get(0);  result.add(largest);  Size lastSize=largest;  for (  Size size : sizes) {    double targetArea=Math.pow(.5,result.size()) * area(largest);    if (area(size) < targetArea) {      if (!result.contains(lastSize) && (targetArea - area(lastSize) < area(size) - targetArea)) {        result.add(lastSize);      } else {        result.add(size);      }    }    lastSize=size;    if (result.size() == 3) {      break;    }  }  if (result.size() < 3 && !result.contains(lastSize)) {    result.add(lastSize);  }  return result;}  }
class C{  public Days toStandardDays(){  checkYearsAndMonths("Days");  long millis=getMillis();  millis+=((long)getSeconds()) * DateTimeConstants.MILLIS_PER_SECOND;  millis+=((long)getMinutes()) * DateTimeConstants.MILLIS_PER_MINUTE;  millis+=((long)getHours()) * DateTimeConstants.MILLIS_PER_HOUR;  long days=millis / DateTimeConstants.MILLIS_PER_DAY;  days=FieldUtils.safeAdd(days,getDays());  days=FieldUtils.safeAdd(days,((long)getWeeks()) * ((long)DateTimeConstants.DAYS_PER_WEEK));  return Days.days(FieldUtils.safeToInt(days));}  }
class C{  @Override public void processView(ViewEngineContext context) throws ViewEngineException {  try {    forwardRequest(context,"*.jsp","*.jspx");  } catch (  ServletException|IOException e) {    throw new ViewEngineException(e);  }}  }
class C{  public ClassOrInterfaceDeclaration addClass(String name,Modifier... modifiers){  ClassOrInterfaceDeclaration classOrInterfaceDeclaration=new ClassOrInterfaceDeclaration(Arrays.stream(modifiers).collect(Collectors.toCollection(null)),false,name);  getTypes().add(classOrInterfaceDeclaration);  classOrInterfaceDeclaration.setParentNode(this);  return classOrInterfaceDeclaration;}  }
class C{  public void registerParserCall(final ASTContainer astContainer){{    final Long elapsedNanoSec=astContainer.getQueryParseTime();    if (elapsedNanoSec != null) {      parserStat.incrementNrCalls();      parserStat.addElapsed(elapsedNanoSec);    }  }{    final Long elapsedNanoSec=astContainer.getResolveValuesTime();    if (elapsedNanoSec != null) {      resolveValuesStat.incrementNrCalls();      resolveValuesStat.addElapsed(elapsedNanoSec);    }  }}  }
class C{  public final void printLog(String path){  console.printLogToFile(path);}  }
class C{  public ListNode partition(ListNode head,int x){  if (head == null || head.next == null)   return head;  ListNode dummy=new ListNode(0);  dummy.next=head;  ListNode p=dummy;  ListNode start=dummy;  while (p != null && p.next != null) {    if (p.next.val >= x)     p=p.next; else {      if (p == start) {        start=start.next;        p=p.next;      } else {        ListNode tmp=p.next;        p.next=tmp.next;        tmp.next=start.next;        start.next=tmp;        start=tmp;      }    }  }  return dummy.next;}  }
class C{  @Deprecated public static int showConfirmDialog(String key,int mode,String propertyConfirmExit,int defaultOption,Object... i18nArgs){  return showConfirmDialog(ApplicationFrame.getApplicationFrame(),key,mode,propertyConfirmExit,defaultOption,true,i18nArgs);}  }
class C{  public String parseApiKey(Element element){  return element.getText();}  }
class C{  public static boolean isCglibProxyClass(Class<?> clazz){  return (clazz != null && isCglibProxyClassName(clazz.getName()));}  }
class C{  public void moveUp(double units){  mTempVec.setAll(WorldParameters.UP_AXIS);  mTempVec.rotateBy(mOrientation).normalize();  mTempVec.multiply(units);  mPosition.add(mTempVec);  if (mLookAtEnabled && mLookAtValid) {    mLookAt.add(mTempVec);    resetToLookAt();  }  markModelMatrixDirty();}  }
class C{  public static void putIntLE(long addr,int val){  if (UNALIGNED)   UNSAFE.putInt(addr,Integer.reverseBytes(val)); else   putIntByByte(addr,val,false);}  }
class C{  public Date parseDate(String str){  try {    return dateFormat.parse(str);  } catch (  java.text.ParseException e) {    throw new RuntimeException(e);  }}  }
class C{  public UpdateRackHeartbeat join(String extAddress,int extPort,String clusterId,String address,int port,int portBartender,String displayName,String serverHash,int seedIndex){  Objects.requireNonNull(extAddress);  Objects.requireNonNull(address);  ClusterHeartbeat cluster=_root.findCluster(clusterId);  if (cluster == null) {    cluster=_root.createCluster(clusterId);    log.fine("Heartbeat create new cluster " + clusterId);  }  boolean isSSL=false;  ServerHeartbeat server=cluster.createDynamicServer(address,port,isSSL);  ClusterTarget clusterTarget=null;  RackHeartbeat rack=server.getRack();  if (rack == null) {    rack=getRack(cluster,address);    server=rack.createServer(address,port,isSSL);    log.fine("join-server" + " int=" + address + ":"+ port+ ";"+ portBartender+ " "+ displayName+ " hash="+ serverHash+ " ext="+ extAddress+ ":"+ extPort+ " ("+ _serverSelf.getDisplayName()+ ")");  }  if (cluster != _serverSelf.getCluster()) {    server.toKnown();    clusterTarget=createClusterTarget(cluster);    if (clusterTarget.addServer(server)) {    }  }  server.setPortBartender(portBartender);  if (extAddress != null) {    _serverSelf.setSeedIndex(seedIndex);    _serverSelf.setLastSeedTime(CurrentTime.currentTime());    _serverSelf.update();  }  if (server.isSelf()) {    joinSelf(server,extAddress,extPort,address,port,serverHash);  }  server.clearConnectionFailTime();  server.update();  updateHeartbeats();  if (server.isSelf()) {    return null;  } else   if (clusterId.equals(_serverSelf.getClusterId())) {    return server.getRack().getUpdate();  } else {    return _serverSelf.getRack().getUpdate();  }}  }
class C{  public void actionPerformed(ActionEvent e){  Transferable transferable=InternalClipboard.getInstance().getContents(null);  if (!(transferable instanceof SubgraphSelection)) {    return;  }  SubgraphSelection selection=(SubgraphSelection)transferable;  DataFlavor flavor=new DataFlavor(SubgraphSelection.class,"Subgraph Selection");  try {    List modelList=(List)selection.getTransferData(flavor);    Point point=EditorUtils.getTopLeftPoint(modelList);    point.translate(50,50);    graphEditor().pasteSubsession(modelList,point);  } catch (  Exception e1) {    throw new RuntimeException(e1);  }}  }
class C{  public static Script pydmlFromFile(String scriptFilePath){  return scriptFromFile(scriptFilePath,ScriptType.PYDML);}  }
class C{  public RhythmGroup addOverlays(Collection<RhythmOverlay> overlays){  mOverlays.addAll(overlays);  if (mCurrentOverlayIndex == NO_OVERLAY) {    selectOverlay(0);  }  return this;}  }
class C{  private static Converter selectSlow(ConverterSet set,Class<?> type){  Converter[] converters=set.iConverters;  int length=converters.length;  Converter converter;  for (int i=length; --i >= 0; ) {    converter=converters[i];    Class<?> supportedType=converter.getSupportedType();    if (supportedType == type) {      return converter;    }    if (supportedType == null || (type != null && !supportedType.isAssignableFrom(type))) {      set=set.remove(i,null);      converters=set.iConverters;      length=converters.length;    }  }  if (type == null || length == 0) {    return null;  }  if (length == 1) {    return converters[0];  }  for (int i=length; --i >= 0; ) {    converter=converters[i];    Class<?> supportedType=converter.getSupportedType();    for (int j=length; --j >= 0; ) {      if (j != i && converters[j].getSupportedType().isAssignableFrom(supportedType)) {        set=set.remove(j,null);        converters=set.iConverters;        length=converters.length;        i=length - 1;      }    }  }  if (length == 1) {    return converters[0];  }  StringBuffer msg=new StringBuffer();  msg.append("Unable to find best converter for type \"");  msg.append(type.getName());  msg.append("\" from remaining set: ");  for (int i=0; i < length; i++) {    converter=converters[i];    Class<?> supportedType=converter.getSupportedType();    msg.append(converter.getClass().getName());    msg.append('[');    msg.append(supportedType == null ? null : supportedType.getName());    msg.append("], ");  }  throw new IllegalStateException(msg.toString());}  }
class C{  private void validateNoAdditionalVolumes(VPlexStorageViewInfo storageView){  List<? extends BlockObject> bos=BlockObject.fetchAll(getDbClient(),volumesToValidate);  Set<String> storageViewWwns=storageView.getWwnToHluMap().keySet();  for (  BlockObject bo : bos) {    if (bo == null || bo.getInactive()) {      continue;    }    String boWwn=bo.getWWN();    if (NullColumnValueGetter.isNotNullValue(boWwn)) {      if (storageViewWwns.contains(boWwn)) {        storageViewWwns.remove(boWwn);      } else {        log.info(String.format("Database volume/snap %s (%s) is not in StorageView [%s]",bo.getId(),bo.getWWN(),storageView.getName()));      }    }  }  for (  String wwn : storageViewWwns) {    getValidatorLogger().logDiff(id,"virtual-volume/snap WWN",ValidatorLogger.NO_MATCHING_ENTRY,wwn);  }}  }
class C{  public void testMoveRenameDirectorySourceAndDestinationMissingPartially() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR,SUBSUBDIR,DIR_NEW,SUBDIR_NEW),null);  create(igfs,paths(DIR,DIR_NEW),null);  igfs.rename(SUBSUBDIR,SUBSUBDIR_NEW);  checkExist(igfs,SUBDIR,SUBDIR_NEW);  checkExist(igfs,igfsSecondary,SUBSUBDIR_NEW);  checkNotExist(igfs,igfsSecondary,SUBSUBDIR);}  }
class C{  public void validateChangePathParams(URI volumeURI,ExportPathParams newParam){  BlockObject volume=BlockObject.fetch(_dbClient,volumeURI);  _log.info(String.format("Validating path parameters for volume %s (%s) new path parameters %s",volume.getLabel(),volume.getId(),newParam.toString()));  Map<ExportMask,ExportGroup> maskToGroupMap=ExportUtils.getExportMasks(volume,_dbClient);  for (  ExportGroup exportGroup : maskToGroupMap.values()) {    validateChangePathParams(volume.getStorageController(),exportGroup.getId(),volume,newParam);  }}  }
class C{  public CircuitBreaker(){  failureConditions=new ArrayList<BiPredicate<Object,Throwable>>();  state.set(new ClosedState(this));}  }
class C{  public static int convertToLongArray(final byte[] vals,final long[] dest){  checkSource(vals.length,8);  checkDestination(vals.length,dest.length,8);  return convertToLongArrayInternal(vals,0,vals.length,dest,0);}  }
class C{  protected void searchForAndLoadProperties(String propsFileName){  Properties tmpProperties=new Properties();  Properties includeProperties;  Properties localizedProperties;  boolean foundProperties=false;  if (Debug.debugging("locale")) {    java.util.Locale.setDefault(new java.util.Locale("pl","PL"));  }  if (Debug.debugging("showprogress")) {    updateProgress=true;  }  logger.fine("***** Searching for properties ****");  String propertyPrefix=PropUtils.getScopedPropertyPrefix(getPropertyPrefix());  if (DEBUG) {    logger.fine("Looking for " + propsFileName + " in Resources");  }  InputStream propsIn=getClass().getResourceAsStream(propsFileName);  if (propsIn == null && Environment.isApplet()) {    URL[] cba=new URL[1];    cba[0]=Environment.getApplet().getCodeBase();    URLClassLoader ucl=URLClassLoader.newInstance(cba);    propsIn=ucl.getResourceAsStream(propsFileName);  }  if (propsIn == null) {    propsIn=ClassLoader.getSystemResourceAsStream(propsFileName);    if (propsIn != null && DEBUG) {      logger.fine("Loading properties from System Resources: " + propsFileName);    }  } else {    if (DEBUG) {      logger.fine("Loading properties from file " + propsFileName + " from package of class "+ getClass());    }  }  if (propsIn != null) {    foundProperties=PropUtils.loadProperties(tmpProperties,propsIn);    init(tmpProperties,"resources");    tmpProperties.clear();  }  if (!foundProperties && (Environment.isApplet() || DEBUG)) {    logger.fine("Unable to locate as resource: " + propsFileName);  }  if (Environment.isApplet()) {    Environment.init(getProperties());    return;  }  Properties systemProperties;  try {    systemProperties=System.getProperties();  } catch (  java.security.AccessControlException ace) {    systemProperties=new Properties();  }  String configDirProperty=propertyPrefix + PropertyHandler.configDirProperty;  String openmapConfigDirectory=systemProperties.getProperty(configDirProperty);  if (openmapConfigDirectory == null) {    Vector<String> cps=Environment.getClasspathDirs();    String defaultExtraDir="share";    for (    String searchLoc : cps) {      File shareDir=new File(searchLoc,defaultExtraDir);      if (shareDir.exists()) {        openmapConfigDirectory=shareDir.getPath();        break;      }    }  }  Environment.addPathToClasspaths(openmapConfigDirectory);  if (DEBUG) {    logger.fine("PropertyHandler: Looking for " + propsFileName + " in configuration directory: "+ (openmapConfigDirectory == null ? "not set" : openmapConfigDirectory));  }  foundProperties|=PropUtils.loadProperties(tmpProperties,openmapConfigDirectory,propsFileName);  includeProperties=getIncludeProperties(tmpProperties.getProperty(propertyPrefix + includeProperty),tmpProperties);  merge(includeProperties,"include file properties",openmapConfigDirectory);  merge(tmpProperties,propsFileName,openmapConfigDirectory);  tmpProperties.clear();  merge(systemProperties,"system properties","system");  String userHomeDirectory=systemProperties.getProperty("user.home");  if (DEBUG) {    logger.fine("Looking for " + propsFileName + " in user's home directory: "+ userHomeDirectory);  }  foundProperties|=PropUtils.loadProperties(tmpProperties,userHomeDirectory,propsFileName);  if (DEBUG) {    logger.fine("***** Done with property search ****");  }  if (!foundProperties && !Environment.isApplet()) {    PropUtils.copyProperties(PropUtils.promptUserForProperties(),properties);  }  includeProperties=getIncludeProperties(tmpProperties.getProperty(propertyPrefix + includeProperty),tmpProperties);  merge(includeProperties,"include file properties",userHomeDirectory);  merge(tmpProperties,propsFileName,userHomeDirectory);  localizedProperties=getLocalizedProperties(tmpProperties.getProperty(propertyPrefix + localizedProperty),userHomeDirectory);  merge(localizedProperties,"localized properties",null);  Environment.init(getProperties());}  }
class C{  public static <E extends Comparable<E>>boolean isIdentical(BinaryNode<E> node1,BinaryNode<E> node2){  if (node1 == null && node2 == null)   return true;  if (node1 == null && node2 != null || (node1 != null && node2 == null))   return false;  if (node1.value == node2.value) {    return true && isIdentical(node1.left,node2.left) && isIdentical(node1.right,node2.right);  } else {    return false;  }}  }
class C{  @Override public String execCommand(String containerName,String command) throws FatalDockerJSONException {  String output=execCommand(containerName,command,false);  if (output.contains("Permission denied")) {    logger.warn("[" + containerName + "] exec command in privileged mode : "+ command);    output=execCommand(containerName,command,true);  }  return output;}  }
class C{  public boolean isLocallyInitiated(){  boolean streamIsClient=(id % 2 == 1);  return connection.client == streamIsClient;}  }
class C{  public static int value(String s){  return rcodes.getValue(s);}  }
class C{  public boolean catchesAll(){  int size=size();  if (size == 0) {    return false;  }  Entry last=get(size - 1);  return last.getExceptionType().equals(CstType.OBJECT);}  }
class C{  protected void onPlayerDestroyed(){}  }
class C{  public final boolean sendMessageAtFrontOfQueue(Message msg){  return mExec.sendMessageAtFrontOfQueue(msg);}  }
class C{  public InvalidOpenTypeException(){  super();}  }
class C{  public void reset(){  super.reset();  resetStreamSettings();}  }
class C{  private boolean verifyEntry(final String entry,final int keyCode){  final String work;  if (keyCode == SWT.DEL) {    work=StringUtil.removeCharAt(this.text.getText(),this.text.getCaretPosition());  } else   if (keyCode == SWT.BS && this.text.getCaretPosition() == 0) {    work=StringUtil.removeCharAt(this.text.getText(),this.text.getCaretPosition() - 1);  } else   if (keyCode == 0) {    work=entry;  } else {    work=StringUtil.insertString(this.text.getText(),entry,this.text.getCaretPosition());  }  try {    Double.parseDouble(work.replace(',','.'));  } catch (  final NumberFormatException nfe) {    return false;  }  return true;}  }
class C{  @Override public boolean accept(final IScope scope,final IShape source,final IShape a){  final IAgent agent=a.getAgent();  if (agent == source.getAgent()) {    return false;  }  return contains(scope,agent);}  }
class C{  public ConfigurationData(BeanFactory beanFactory,TaskExecutor taskExecutor,TaskScheduler taskScheduler,boolean autoStart,StateMachineEnsemble<S,E> ensemble,List<StateMachineListener<S,E>> listeners,boolean securityEnabled,AccessDecisionManager transitionSecurityAccessDecisionManager,AccessDecisionManager eventSecurityAccessDecisionManager,SecurityRule eventSecurityRule,SecurityRule transitionSecurityRule,boolean verifierEnabled,StateMachineModelVerifier<S,E> verifier,String machineId,StateMachineMonitor<S,E> stateMachineMonitor){  this.beanFactory=beanFactory;  this.taskExecutor=taskExecutor;  this.taskScheduler=taskScheduler;  this.autoStart=autoStart;  this.ensemble=ensemble;  this.listeners=listeners;  this.securityEnabled=securityEnabled;  this.transitionSecurityAccessDecisionManager=transitionSecurityAccessDecisionManager;  this.eventSecurityAccessDecisionManager=eventSecurityAccessDecisionManager;  this.eventSecurityRule=eventSecurityRule;  this.transitionSecurityRule=transitionSecurityRule;  this.verifierEnabled=verifierEnabled;  this.verifier=verifier;  this.machineId=machineId;  this.stateMachineMonitor=stateMachineMonitor;}  }
class C{  public static void logServiceException(HttpServlet servlet,ServiceException e){  if (e.getResponseBody() != null) {    servlet.log(e.getMessage() + " " + e.getHttpErrorCodeOverride()+ " "+ e.getResponseContentType()+ ": "+ e.getResponseBody(),e);  }}  }
class C{  public Object jjtAccept(PartitionParserVisitor visitor,Object data){  return visitor.visit(this,data);}  }
class C{  public static void e(String tag,String msg,Throwable tr){  println(ERROR,tag,msg,tr);}  }
class C{  public static Socket createSocket(String server,int port,long timeout) throws IOException {  SocketWrapper socketWrapper=new SocketWrapper();  socketWrapper.server=server;  socketWrapper.port=port;  Object sync=new Object();  Thread socketThread=new Thread(new SocketRunnable(socketWrapper,sync));  socketThread.setDaemon(true);  Thread timeoutThread=new Thread(new TimeoutRunnable(sync,timeout * 1000));  timeoutThread.setDaemon(true);  timeoutThread.start();  socketThread.start();synchronized (sync) {    if (socketWrapper.socket == null) {      try {        sync.wait(timeout * 1000);      } catch (      InterruptedException e) {        logger.trace("",e);      }    }  }  timeoutThread.interrupt();  socketThread.interrupt();  socketWrapper.valid=false;  if (socketWrapper.getSocket() == null && socketWrapper.exception != null) {    throw socketWrapper.exception;  } else   if (socketWrapper.getSocket() == null) {    throw new TimeoutException();  }  return socketWrapper.getSocket();}  }
class C{  private void writeToken(AuthProvider auth){  AccessGrant accessGrant=auth.getAccessGrant();  String key=accessGrant.getKey();  String secret=accessGrant.getSecret();  String providerid=accessGrant.getProviderId();  Map<String,Object> attributes=accessGrant.getAttributes();  Editor edit=PreferenceManager.getDefaultSharedPreferences(getContext()).edit();  edit.putString(mProviderName.toString() + " key",key);  edit.putString(mProviderName.toString() + " secret",secret);  edit.putString(mProviderName.toString() + " providerid",providerid);  if (attributes != null) {    for (    Map.Entry entry : attributes.entrySet()) {      System.out.println(entry.getKey() + ", " + entry.getValue());    }    for (    String s : attributes.keySet()) {      edit.putString(mProviderName.toString() + "attribute " + s,String.valueOf(attributes.get(s)));    }  }  edit.apply();}  }
class C{  public CompositeListener(String name){  this.name=name;}  }
class C{  public boolean use(Player player,Item tool){  if (tool.getName() == "shovel") {    return super.use(player);  }  return false;}  }
class C{  public static void load(){  loaded=true;  if (!saveFile.exists())   return;  try {    String json=Files.toString(saveFile,charset);    Type type=new TypeToken<Map<UUID,String>>(){      private static final long serialVersionUID=1L;    }.getType();    map=gson.fromJson(json,type);  } catch (  JsonSyntaxException e) {    SpongeImpl.getLogger().error("Could not parse username cache file as valid json, deleting file",e);    saveFile.delete();  }catch (  IOException e) {    SpongeImpl.getLogger().error("Failed to read username cache file from disk, deleting file",e);    saveFile.delete();  } finally {    if (map == null) {      map=Maps.newHashMap();    }  }}  }
class C{  public static double cdf(double z,double[] x){  int[] indices=new int[x.length];  HeapSort.sort(x,indices);  return cdf(z,x,indices);}  }
class C{  public GeoPoint createSurfacePoint(final Vector vector){  return createSurfacePoint(vector.x,vector.y,vector.z);}  }
class C{  public DefaultLineTagDefinition(String title,TagDictionary<AbstractInlineTagDefinition> inlineTags){  this.inlineTags=inlineTags;  setTitles(title);}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:57:09.921 -0500",hash_original_method="B47D14DD952D3505364B334F55BDAD78",hash_generated_method="010165353A43B510E9FC39273C78378A") public boolean allowsCoreThreadTimeOut(){  return allowCoreThreadTimeOut;}  }
class C{  void reset(){  initColumns();  _primaryJoinersChkUp=null;  _primaryJoinersChkDel=null;  _primaryJoinersDoUp=null;  _primaryJoinersDoDel=null;  _primaryJoinersDoNull=null;  _secondaryJoiners=null;}  }
class C{  @Override protected void processCommittedData(T stitchedFileMetaData){  try {    mergeOutputFile(stitchedFileMetaData);  } catch (  IOException e) {    throw new RuntimeException("Unable to merge file: " + stitchedFileMetaData.getStitchedFileRelativePath(),e);  }}  }
class C{  protected VoteResponse handleVote(VoteRequest request){  if (request.term() < context.getTerm()) {    LOGGER.debug("{} - Rejected {}: candidate's term is less than the current term",context.getCluster().member().address(),request);    return VoteResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withVoted(false).build();  } else   if (context.getLeader() != null) {    LOGGER.debug("{} - Rejected {}: leader already exists",context.getCluster().member().address(),request);    return VoteResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withVoted(false).build();  } else   if (!context.getClusterState().getRemoteMemberStates().stream().<Integer>map(null).collect(Collectors.toSet()).contains(request.candidate())) {    LOGGER.debug("{} - Rejected {}: candidate is not known to the local member",context.getCluster().member().address(),request);    return VoteResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withVoted(false).build();  } else   if (context.getLastVotedFor() == 0) {    if (isLogUpToDate(request.logIndex(),request.logTerm(),request)) {      context.setLastVotedFor(request.candidate());      return VoteResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withVoted(true).build();    } else {      return VoteResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withVoted(false).build();    }  } else   if (context.getLastVotedFor() == request.candidate()) {    LOGGER.debug("{} - Accepted {}: already voted for {}",context.getCluster().member().address(),request,context.getCluster().member(context.getLastVotedFor()).address());    return VoteResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withVoted(true).build();  } else {    LOGGER.debug("{} - Rejected {}: already voted for {}",context.getCluster().member().address(),request,context.getCluster().member(context.getLastVotedFor()).address());    return VoteResponse.builder().withStatus(Response.Status.OK).withTerm(context.getTerm()).withVoted(false).build();  }}  }
class C{  public boolean useClientAuth(){  return jcbClientAuth.isSelected();}  }
class C{  public void addType(final BaseType baseType){  Preconditions.checkNotNull(baseType,"IE02764: Base type can not be null.");  createTypeNode(baseType,containedRelation,containedRelationMap);}  }
class C{  final private boolean doMove(Move move){  Position pos=game.pos;  MoveGen.MoveList moves=new MoveGen().pseudoLegalMoves(pos);  MoveGen.removeIllegal(pos,moves);  int promoteTo=move.promoteTo;  for (int mi=0; mi < moves.size; mi++) {    Move m=moves.m[mi];    if ((m.from == move.from) && (m.to == move.to)) {      if ((m.promoteTo != Piece.EMPTY) && (promoteTo == Piece.EMPTY)) {        promoteMove=m;        gui.requestPromotePiece();        return false;      }      if (m.promoteTo == promoteTo) {        String strMove=TextIO.moveToString(pos,m,false);        game.processString(strMove);        return true;      }    }  }  gui.reportInvalidMove(move);  return false;}  }
class C{  public void paintMenuItemBorder(SynthContext context,Graphics g,int x,int y,int w,int h){  paintBorder(context,g,x,y,w,h,null);}  }
class C{  @UiThread int nextViewId(Context context){  return getFragment(context).nextViewId();}  }
class C{  GenericObjectType(@Nonnull String variable){  this(variable,(ReferenceType)null);}  }
class C{  public static String millisecondsToString(long time){  int seconds=(int)((time / 1000) % 60);  int minutes=(int)((time / 60000) % 60);  int hours=(int)((time / 3600000) % 24);  int days=(int)((time / 3600000) / 24);  StringBuilder builder=new StringBuilder();  builder.append(days);  builder.append("d ");  builder.append(hours);  builder.append("h ");  builder.append(minutes);  builder.append("m ");  builder.append(seconds);  builder.append('s');  return builder.toString();}  }
class C{  public void testGetF1Momentary(){  AbstractThrottle instance=new AbstractThrottleImpl();  boolean expResult=false;  boolean result=instance.getF1Momentary();  assertEquals(expResult,result);}  }
class C{  public static List<URI> iteratorToList(URIQueryResultList itr){  List<URI> uris=new ArrayList<URI>();  for (  URI uri : itr) {    uris.add(uri);  }  return uris;}  }
class C{  public UF3(int numberOfVariables){  super(numberOfVariables,2);}  }
class C{  public byte[] encrypt(String passphrase,boolean production) throws HyperLedgerException {  try {    byte[] key=SCrypt.generate(passphrase.getBytes("UTF-8"),BITCOIN_SEED,16384,8,8,32);    SecretKeySpec keyspec=new SecretKeySpec(key,"AES");    Cipher cipher=Cipher.getInstance("AES/CBC/PKCS5Padding","BC");    cipher.init(Cipher.ENCRYPT_MODE,keyspec);    byte[] iv=cipher.getIV();    byte[] c=cipher.doFinal(serialize(production).getBytes());    byte[] result=new byte[iv.length + c.length];    System.arraycopy(iv,0,result,0,iv.length);    System.arraycopy(c,0,result,iv.length,c.length);    return result;  } catch (  UnsupportedEncodingException|NoSuchAlgorithmException|NoSuchProviderException|NoSuchPaddingException|InvalidKeyException|IllegalBlockSizeException|BadPaddingException e) {    throw new HyperLedgerException(e);  }}  }
class C{  public double computeInPlace(double... dataset){  checkArgument(dataset.length > 0,"Cannot calculate quantiles of an empty dataset");  if (containsNaN(dataset)) {    return NaN;  }  long numerator=(long)index * (dataset.length - 1);  int quotient=(int)LongMath.divide(numerator,scale,RoundingMode.DOWN);  int remainder=(int)(numerator - (long)quotient * scale);  selectInPlace(quotient,dataset,0,dataset.length - 1);  if (remainder == 0) {    return dataset[quotient];  } else {    selectInPlace(quotient + 1,dataset,quotient + 1,dataset.length - 1);    return interpolate(dataset[quotient],dataset[quotient + 1],remainder,scale);  }}  }
class C{  public XObject execute(XPathContext xctxt) throws javax.xml.transform.TransformerException {  int context=getArg0AsNode(xctxt);  XObject val;  if (DTM.NULL != context) {    DTM dtm=xctxt.getDTM(context);    String qname=dtm.getNodeNameX(context);    val=(null == qname) ? XString.EMPTYSTRING : new XString(qname);  } else {    val=XString.EMPTYSTRING;  }  return val;}  }
class C{  public static ODataUri createODataCountEntitiesUri(String serviceRoot,String entitySetName){  CountPath$ countPath=CountPath$.MODULE$;  scala.Option<PathSegment> countPathOption=scala.Option.apply(countPath);  scala.Option<String> noString=scala.Option.apply(null);  EntityCollectionPath entityCollectionPath=new EntityCollectionPath(noString,countPathOption);  scala.Option<EntityCollectionPath> entityCollectionPathOption=scala.Option.apply(entityCollectionPath);  EntitySetPath entitySetPath=new EntitySetPath(entitySetName,entityCollectionPathOption);  List<QueryOption> queryOptions=new ArrayList<>();  ResourcePathUri resourcePathUri=new ResourcePathUri(entitySetPath,asScalaList(queryOptions));  return new ODataUri(serviceRoot,resourcePathUri);}  }
class C{  public static byte[] readBytes(File file) throws IOException {  byte[] bytes=new byte[(int)file.length()];  FileInputStream fileInputStream=new FileInputStream(file);  DataInputStream dis=new DataInputStream(fileInputStream);  try {    dis.readFully(bytes);    InputStream temp=dis;    dis=null;    temp.close();  }  finally {    closeWithWarning(dis);  }  return bytes;}  }
class C{  protected void paintTabArea(final Graphics g,final int tabPlacement,final int selectedIndex){  final int tabCount=tabPane.getTabCount();  final Rectangle iconRect=new Rectangle(), textRect=new Rectangle();  final Rectangle clipRect=g.getClipBounds();  for (int i=runCount - 1; i >= 0; i--) {    final int start=tabRuns[i];    final int next=tabRuns[(i == runCount - 1) ? 0 : i + 1];    final int end=(next != 0 ? next - 1 : tabCount - 1);    for (int j=start; j <= end; j++) {      if (j != selectedIndex && rects[j].intersects(clipRect)) {        paintTab(g,tabPlacement,rects,j,iconRect,textRect);      }    }  }  if (selectedIndex >= 0 && rects[selectedIndex].intersects(clipRect)) {    paintTab(g,tabPlacement,rects,selectedIndex,iconRect,textRect);  }}  }
class C{  public SVGOMFECompositeElement(String prefix,AbstractDocument owner){  super(prefix,owner);  initializeLiveAttributes();}  }
class C{  public ResultSetSpy(StatementSpy parent,ResultSet realResultSet){  if (realResultSet == null) {    throw new IllegalArgumentException("Must provide a non null real ResultSet");  }  this.realResultSet=realResultSet;  this.parent=parent;  log=SpyLogFactory.getSpyLogDelegator();  reportReturn("new ResultSet");}  }
class C{  public DERExternal(ASN1ObjectIdentifier directReference,ASN1Integer indirectReference,ASN1Primitive dataValueDescriptor,int encoding,ASN1Primitive externalData){  setDirectReference(directReference);  setIndirectReference(indirectReference);  setDataValueDescriptor(dataValueDescriptor);  setEncoding(encoding);  setExternalContent(externalData.toASN1Primitive());}  }
class C{  void doReps(ObjectOutputStream oout,ObjectInputStream oin,StreamBuffer sbuf,int nbatches,int ncycles) throws Exception {  for (int i=0; i < nbatches; i++) {    sbuf.reset();    for (int j=0; j < ncycles; j++) {      oout.writeLong(0);    }    oout.flush();    for (int j=0; j < ncycles; j++) {      oin.readLong();    }  }}  }
class C{  public void addPlugInSingleRowFunction(String functionName,String className,String methodName,ConfigurationPlugInSingleRowFunction.ValueCache valueCache,ConfigurationPlugInSingleRowFunction.FilterOptimizable filterOptimizable) throws ConfigurationException {  addPlugInSingleRowFunction(functionName,className,methodName,valueCache,filterOptimizable,false);}  }
class C{  public RenderedImage create(ParameterBlock paramBlock,RenderingHints renderHints){  StringBuffer msg=new StringBuffer();  if (!validateParameters(paramBlock,msg)) {    return null;  }  try {    SeekableStream in=(SeekableStream)paramBlock.getObjectParameter(0);    XTIFFImage image=new XTIFFImage(in,(TIFFDecodeParam)paramBlock.getObjectParameter(1),0);    return image;  } catch (  Exception e) {    return null;  }}  }
class C{  public Object clone(){  return new Area(this);}  }
class C{  @Override public int compareTo(EventInfoResource o){  return ComparisonChain.start().compare(eventId,o.eventId).compareFalseFirst(enabled,o.enabled).compare(bufferCapacity,o.bufferCapacity).compare(etype,o.etype).compare(eventDesc,o.eventDesc).compare(eventName,o.eventName).compare(moduleName,o.moduleName).compare(numOfEvents,o.numOfEvents).result();}  }
class C{  public boolean sort(String inPackage){  if (isAddressSet) {    try {switch (inPackage.charAt(0)) {case 'V':        setSpeed(Integer.parseInt(inPackage.substring(1)));      break;case 'X':    eStop();  break;case 'F':handleFunction(inPackage);break;case 'f':forceFunction(inPackage.substring(1));break;case 'R':setDirection(!inPackage.endsWith("0"));break;case 'r':addressRelease();break;case 'd':addressDispatch();break;case 'L':addressRelease();int addr=Integer.parseInt(inPackage.substring(1));setAddress(addr,true);break;case 'S':addressRelease();addr=Integer.parseInt(inPackage.substring(1));setAddress(addr,false);break;case 'E':addressRelease();requestEntryFromID(inPackage.substring(1));break;case 'C':setLocoForConsistFunctions(inPackage.substring(1));break;case 'c':setRosterLocoForConsistFunctions(inPackage.substring(1));break;case 'I':idle();break;case 's':handleSpeedStepMode(Integer.parseInt(inPackage.substring(1)));break;case 'm':handleMomentary(inPackage.substring(1));break;case 'q':handleRequest(inPackage.substring(1));break;}} catch (NullPointerException e) {log.warn("No throttle frame to receive: " + inPackage);return false;}try {Thread.sleep(20);} catch (java.lang.InterruptedException ex) {}} else {switch (inPackage.charAt(0)) {case 'L':int addr=Integer.parseInt(inPackage.substring(1));setAddress(addr,true);break;case 'S':addr=Integer.parseInt(inPackage.substring(1));setAddress(addr,false);break;case 'E':requestEntryFromID(inPackage.substring(1));break;case 'C':setLocoForConsistFunctions(inPackage.substring(1));break;case 'c':setRosterLocoForConsistFunctions(inPackage.substring(1));break;default :break;}}if (inPackage.charAt(0) == 'Q') {shutdownThrottle();return false;}return true;}  }
class C{  public Set<String> classNames(){  return positiveExamplesByName.keySet();}  }
class C{  protected boolean hasAttemptRemaining(){  return mCurrentRetryCount <= mMaxNumRetries;}  }
class C{  public DTMIterator iter() throws javax.xml.transform.TransformerException {  error(XPATHErrorResources.ER_CANT_CONVERT_TO_NODELIST,new Object[]{getTypeString()});  return null;}  }
class C{  @Override public void remove(ConfuseStatus status,StatusList statusList){  statusList.removeInternal(status);  RPEntity entity=statusList.getEntity();  if (entity == null) {    return;  }  entity.sendPrivateText(NotificationType.SCENE_SETTING,"You are no longer confused.");  entity.remove("status_" + status.getName());}  }
class C{  public boolean isAutoRotateEnabled(){  return mAutoRotateEnabled;}  }
class C{  public static int skipWhitespace(String str,int pos){  while (pos < str.length()) {    int c=UTF16.charAt(str,pos);    if (!UCharacterProperty.isRuleWhiteSpace(c)) {      break;    }    pos+=UTF16.getCharCount(c);  }  return pos;}  }
class C{  public static void display(Activity caller){  String versionStr=getVersionString(caller);  String aboutHeader=caller.getString(R.string.app_name) + " v" + versionStr;  View aboutView;  try {    aboutView=caller.getLayoutInflater().inflate(R.layout.about,null);  } catch (  InflateException ie) {    Log.e(TAG,"Exception while inflating about box: " + ie.getMessage());    return;  }  AlertDialog.Builder builder=new AlertDialog.Builder(caller);  builder.setTitle(aboutHeader);  builder.setIcon(R.drawable.ic_launcher);  builder.setCancelable(true);  builder.setPositiveButton(R.string.ok,null);  builder.setView(aboutView);  builder.show();}  }
class C{  public int addLoad(int n,CtClass type){  if (type.isPrimitive()) {    if (type == CtClass.booleanType || type == CtClass.charType || type == CtClass.byteType || type == CtClass.shortType || type == CtClass.intType)     addIload(n); else     if (type == CtClass.longType) {      addLload(n);      return 2;    } else     if (type == CtClass.floatType)     addFload(n); else     if (type == CtClass.doubleType) {      addDload(n);      return 2;    } else     throw new RuntimeException("void type?");  } else   addAload(n);  return 1;}  }
class C{  public void onDataActivity(int direction){}  }
class C{  public boolean isTopType(){  Type _declaredType=this.getDeclaredType();  return (_declaredType instanceof AnyType);}  }
class C{  public Element create(String prefix,Document doc){  return new SVGOMTitleElement(prefix,(AbstractDocument)doc);}  }
class C{  void createEntry(int hash,Object key,Object value,int bucketIndex){  table[bucketIndex]=new Entry(hash,key,value,table[bucketIndex]);  size++;}  }
class C{  @Override public Enumeration<Option> listOptions(){  Vector<Option> newVector=new Vector<Option>(4);  newVector.addElement(new Option("\tStart temperature","A",1,"-A <float>"));  newVector.addElement(new Option("\tNumber of runs","U",1,"-U <integer>"));  newVector.addElement(new Option("\tDelta temperature","D",1,"-D <float>"));  newVector.addElement(new Option("\tRandom number seed","R",1,"-R <seed>"));  newVector.addAll(Collections.list(super.listOptions()));  return newVector.elements();}  }
class C{  public static void addQueryListener(IQueryListener l){  InternalSearchUI.getInstance().addQueryListener(l);}  }
class C{  public static List<CoreLabel> toPostProcessedSequence(List<CoreLabel> charSequence){  List<CoreLabel> tokenSequence=new ArrayList<>();  StringBuilder originalToken=new StringBuilder();  StringBuilder currentToken=new StringBuilder();  CoreLabel stopSymbol=new CoreLabel();  stopSymbol.set(CharAnnotation.class,WHITESPACE);  stopSymbol.set(AnswerAnnotation.class,Operation.Whitespace.toString());  charSequence.add(stopSymbol);  for (  CoreLabel outputChar : charSequence) {    String text=outputChar.get(CharAnnotation.class);    String[] fields=outputChar.get(AnswerAnnotation.class).split(OP_DELIM);    Operation label;    try {      label=Operation.valueOf(fields[0]);    } catch (    IllegalArgumentException e) {      System.err.printf("%s: WARNING Illegal operation %s/%s%n",ProcessorTools.class.getName(),text,fields[0]);      label=Operation.None;    }    if (label == Operation.Whitespace || (label == Operation.None && text.equals(WHITESPACE))) {      String original=originalToken.toString();      String[] outputTokens=currentToken.toString().split("\\s+");      for (      String tokenText : outputTokens) {        CoreLabel token=new CoreLabel();        token.setValue(tokenText);        token.setWord(tokenText);        token.set(OriginalTextAnnotation.class,original);        tokenSequence.add(token);      }      originalToken=new StringBuilder();      currentToken=new StringBuilder();    } else {      originalToken.append(text);      if (label == Operation.None) {        currentToken.append(text);      } else       if (label == Operation.InsertAfter) {        assert fields.length == 2;        currentToken.append(text).append(fields[1]);      } else       if (label == Operation.InsertBefore) {        assert fields.length == 2;        currentToken.append(fields[1]).append(text);      } else       if (label == Operation.ToUpper) {        currentToken.append(text.toUpperCase());      } else       if (label == Operation.Delete) {      }    }  }  charSequence.remove(charSequence.size() - 1);  return tokenSequence;}  }
class C{  @Override public void translate(final ITranslationEnvironment environment,final IInstruction instruction,final List<ReilInstruction> instructions) throws InternalTranslationException {  TranslationHelpers.checkTranslationArguments(environment,instruction,instructions,"cdq");  final long baseOffset=instruction.getAddress().toLong() * 0x100;  final String isolatedMsb=environment.getNextVariableString();  final String shiftedMsb=environment.getNextVariableString();  instructions.add(ReilHelpers.createAnd(baseOffset,OperandSize.DWORD,"eax",OperandSize.DWORD,"2147483648",OperandSize.DWORD,isolatedMsb));  instructions.add(ReilHelpers.createBsh(baseOffset + 1,OperandSize.DWORD,isolatedMsb,OperandSize.DWORD,"-31",OperandSize.DWORD,shiftedMsb));  instructions.add(ReilHelpers.createSub(baseOffset + 2,OperandSize.DWORD,"0",OperandSize.DWORD,shiftedMsb,OperandSize.DWORD,"edx"));}  }
class C{  public static void printReport(File file,String name,boolean isPreview,String fontName,boolean isBuildReport,String logoURL,String printerName,String orientation,int fontSize){  HardcopyWriter writer=null;  Frame mFrame=new Frame();  boolean isLandScape=false;  boolean printHeader=true;  double margin=.5;  Dimension pagesize=null;  if (orientation.equals(Setup.LANDSCAPE)) {    margin=.65;    isLandScape=true;  }  if (orientation.equals(Setup.HANDHELD) || orientation.equals(Setup.HALFPAGE)) {    printHeader=false;    pagesize=new Dimension(TrainCommon.getPageSize(orientation).width + TrainCommon.PAPER_MARGINS.width,TrainCommon.getPageSize(orientation).height + TrainCommon.PAPER_MARGINS.height);  }  try {    writer=new HardcopyWriter(mFrame,name,fontSize,margin,margin,.5,.5,isPreview,printerName,isLandScape,printHeader,pagesize);  } catch (  HardcopyWriter.PrintCanceledException ex) {    log.debug("Print cancelled");    return;  }  if (!fontName.equals("")) {    writer.setFontName(fontName);  }  BufferedReader in=null;  try {    in=new BufferedReader(new InputStreamReader(new FileInputStream(file),"UTF-8"));  } catch (  FileNotFoundException e) {    log.error("Build file doesn't exist");    writer.close();    return;  }catch (  UnsupportedEncodingException e) {    log.error("Doesn't support UTF-8 encoding");    writer.close();    return;  }  String line;  if (!isBuildReport && logoURL != null && !logoURL.equals(Setup.NONE)) {    ImageIcon icon=new ImageIcon(logoURL);    if (icon.getIconWidth() == -1) {      log.error("Logo not found: " + logoURL);    } else {      writer.write(icon.getImage(),new JLabel(icon));    }  }  Color c=null;  while (true) {    try {      line=in.readLine();    } catch (    IOException e) {      log.debug("Print read failed");      break;    }    if (line == null) {      if (isPreview) {        try {          writer.write(" ");        } catch (        IOException e) {          log.debug("Print write failed for null line");        }      }      break;    }    if (isBuildReport) {      line=filterBuildReport(line,false);      if (line.equals("")) {        continue;      }    } else {      if (line.length() > 0) {        boolean horizontialLineSeparatorFound=true;        for (int i=0; i < line.length(); i++) {          if (line.charAt(i) != HORIZONTAL_LINE_SEPARATOR) {            horizontialLineSeparatorFound=false;            break;          }        }        if (horizontialLineSeparatorFound) {          writer.write(writer.getCurrentLineNumber(),0,writer.getCurrentLineNumber(),line.length() + 1);          c=null;          continue;        }      }      for (int i=0; i < line.length(); i++) {        if (line.charAt(i) == VERTICAL_LINE_SEPARATOR) {          if (Setup.isTabEnabled()) {            writer.write(writer.getCurrentLineNumber(),0,writer.getCurrentLineNumber() + 1,0);            writer.write(writer.getCurrentLineNumber(),line.length() + 1,writer.getCurrentLineNumber() + 1,line.length() + 1);          }          writer.write(writer.getCurrentLineNumber(),i + 1,writer.getCurrentLineNumber() + 1,i + 1);        }      }      line=line.replace(VERTICAL_LINE_SEPARATOR,SPACE);      if ((!Setup.getPickupEnginePrefix().equals("") && line.startsWith(Setup.getPickupEnginePrefix())) || (!Setup.getPickupCarPrefix().equals("") && line.startsWith(Setup.getPickupCarPrefix())) || (!Setup.getSwitchListPickupCarPrefix().equals("") && line.startsWith(Setup.getSwitchListPickupCarPrefix()))) {        c=Setup.getPickupColor();      } else       if ((!Setup.getDropEnginePrefix().equals("") && line.startsWith(Setup.getDropEnginePrefix())) || (!Setup.getDropCarPrefix().equals("") && line.startsWith(Setup.getDropCarPrefix())) || (!Setup.getSwitchListDropCarPrefix().equals("") && line.startsWith(Setup.getSwitchListDropCarPrefix()))) {        c=Setup.getDropColor();      } else       if ((!Setup.getLocalPrefix().equals("") && line.startsWith(Setup.getLocalPrefix())) || (!Setup.getSwitchListLocalPrefix().equals("") && line.startsWith(Setup.getSwitchListLocalPrefix()))) {        c=Setup.getLocalColor();      } else       if (!line.startsWith(TrainCommon.TAB)) {        c=null;      }      if (c != null) {        try {          writer.write(c,line + NEW_LINE);          continue;        } catch (        IOException e) {          log.debug("Print write color failed");          break;        }      }    }    try {      writer.write(line + NEW_LINE);    } catch (    IOException e) {      log.debug("Print write failed");      break;    }  }  try {    in.close();  } catch (  IOException e) {    log.debug("Print close failed");  }  writer.close();}  }
class C{  Organization2(String name){  id=UUID.randomUUID();  this.name=name;}  }
class C{  public static void close(){  responseHeaderDB.close();  fileDB.close(true);}  }
class C{  public static boolean addEvent(final ConfEvent e){  if (Cfg.DEBUG) {  }  if (eventsMap.containsKey(e.getId()) == true) {    if (Cfg.DEBUG) {      Check.log(TAG + " Warn: " + "Substituting event: "+ e);    }  }  eventsMap.put(e.getId(),e);  return true;}  }
class C{  public ComputeElementRestRep rediscover(URI id){  return client.post(ComputeElementRestRep.class,getIdUrl() + "/discover",id);}  }
class C{  public Iterator<E> iterator(){  return new Itr();}  }
class C{  public int addAggregate(AggregateFunctionExpression aggregate){  int position=groupBy.size() + aggregates.size();  aggregates.add(aggregate);  options.add(aggregate.getOption());  return position;}  }
class C{  public static void main(String args[]) throws Exception {  Security.setProperty("jdk.tls.disabledAlgorithms","");  setupBasePort();  RmiBootstrapTest manager=new RmiBootstrapTest();  try {    manager.run(args);  } catch (  RuntimeException r) {    System.out.println("Test Failed: " + r.getMessage());    System.exit(1);  }catch (  Throwable t) {    System.out.println("Test Failed: " + t);    t.printStackTrace();    System.exit(2);  }  System.out.println("**** Test  RmiBootstrap Passed ****");}  }
class C{  @Override protected void drawXLabels(List<Double> xLabels,Double[] xTextLabelLocations,Canvas canvas,Paint paint,int left,int top,int bottom,double xPixelsPerUnit,double minX,double maxX){  int length=xLabels.size();  if (length > 0) {    boolean showLabels=mRenderer.isShowLabels();    boolean showGridY=mRenderer.isShowGridY();    boolean showTickMarks=mRenderer.isShowTickMarks();    DateFormat format=getDateFormat(xLabels.get(0),xLabels.get(length - 1));    for (int i=0; i < length; i++) {      long label=Math.round(xLabels.get(i));      float xLabel=(float)(left + xPixelsPerUnit * (label - minX));      if (showLabels) {        paint.setColor(mRenderer.getXLabelsColor());        if (showTickMarks) {          canvas.drawLine(xLabel,bottom,xLabel,bottom + mRenderer.getLabelsTextSize() / 3,paint);        }        drawText(canvas,format.format(new Date(label)),xLabel,bottom + mRenderer.getLabelsTextSize() * 4 / 3 + mRenderer.getXLabelsPadding(),paint,mRenderer.getXLabelsAngle());      }      if (showGridY) {        paint.setColor(mRenderer.getGridColor(0));        canvas.drawLine(xLabel,bottom,xLabel,top,paint);      }    }  }  drawXTextLabels(xTextLabelLocations,canvas,paint,true,left,top,bottom,xPixelsPerUnit,minX,maxX);}  }
class C{  public List<EvaluationStatistics> retrieve(MultiLabelClassifier classifier,Instances dataset){  List<EvaluationStatistics> result;  String cls;  String rel;  result=new ArrayList<>();  cls=Utils.toCommandLine(classifier);  rel=dataset.relationName();  for (  EvaluationStatistics stat : m_Statistics) {    if (stat.getCommandLine().equals(cls) && stat.getRelation().equals(rel))     result.add(stat);  }  return result;}  }
class C{  public static boolean isLeapYear(int year){  return (year % 4 == 0) && ((year % 100 != 0) || (year % 400 == 0));}  }
class C{  public void updateGeoDescription(Context context,String fallbackNumber){  String number=TextUtils.isEmpty(phoneNumber) ? fallbackNumber : phoneNumber;  geoDescription=getGeoDescription(context,number);}  }
class C{  synchronized SignatureData createSignatureData(String signature,int signerIndex){  return new SignatureData(signature,hashChainResult,hashChains != null ? hashChains[signerIndex] : null);}  }
class C{  public SimpleScheduleBuilder withIntervalInMinutes(int intervalInMinutes){  this.interval=intervalInMinutes * DateBuilder.MILLISECONDS_IN_MINUTE;  return this;}  }
class C{  public CShowOptionsDialogAction(final JFrame parent,final DebugTargetSettings debugTarget,final IDebugger debugger){  super("Show Options");  Preconditions.checkNotNull(parent,"IE01471: Parent argument can not be null");  Preconditions.checkNotNull(debugTarget,"IE01472: Debug target argument can not be null");  Preconditions.checkNotNull(debugger,"IE01473: Options argument can not be null");  m_parent=parent;  m_debugTarget=debugTarget;  m_debugger=debugger;}  }
class C{  public synchronized OMGraphicList prepare(){  Projection projection=getProjection();  if (projection == null) {    Debug.error("DTED Layer needs to be added to the MapBean before it can draw images!");    return new OMGraphicList();  }  DTEDCacheManager cache=getCache();  if (!(projection instanceof EqualArc)) {  }  Debug.message("basic",getName() + "|DTEDLayer.prepare(): doing it");  if (Debug.debugging("dted")) {    Debug.output(getName() + "|DTEDLayer.prepare(): " + "calling getRectangle "+ " with projection: "+ projection+ " ul = "+ projection.getUpperLeft()+ " lr = "+ projection.getLowerRight());  }  OMGraphicList omGraphicList;  if (projection.getScale() < maxScale) {    omGraphicList=cache.getRectangle(projection);  } else {    fireRequestInfoLine("  The scale is too small for DTED viewing.");    Debug.error("DTEDLayer: scale (1:" + projection.getScale() + ") is smaller than minimum (1:"+ maxScale+ ") allowed.");    omGraphicList=new OMGraphicList();  }  int size=0;  if (omGraphicList != null) {    size=omGraphicList.size();    Debug.message("basic",getName() + "|DTEDLayer.prepare(): finished with " + size+ " graphics");  } else {    Debug.message("basic",getName() + "|DTEDLayer.prepare(): finished with null graphics list");  }  return omGraphicList;}  }
class C{  Circle2D(){  this(0,0,1);}  }
class C{  public Graph search(){  lookupArrows=new ConcurrentHashMap<>();  final List<Node> nodes=new ArrayList<>(variables);  this.effectEdgesGraph=getEffectEdges(nodes);  if (adjacencies != null) {    adjacencies=GraphUtils.replaceNodes(adjacencies,nodes);  }  Graph graph;  if (initialGraph == null) {    graph=new EdgeListGraphSingleConnections(getVariables());  } else {    graph=new EdgeListGraphSingleConnections(initialGraph);    for (    Edge edge : initialGraph.getEdges()) {      if (!effectEdgesGraph.isAdjacentTo(edge.getNode1(),edge.getNode2())) {        effectEdgesGraph.addUndirectedEdge(edge.getNode1(),edge.getNode2());      }    }  }  addRequiredEdges(graph);  topGraphs.clear();  storeGraph(graph);  long start=System.currentTimeMillis();  score=0.0;  fes(graph);  bes(graph);  long endTime=System.currentTimeMillis();  this.elapsedTime=endTime - start;  this.logger.log("graph","\nReturning this graph: " + graph);  this.logger.log("info","Elapsed time = " + (elapsedTime) / 1000. + " s");  this.logger.flush();  return graph;}  }
class C{  private static void write(CharSequence from,File to,Charset charset,boolean append) throws IOException {  asCharSink(to,charset,modes(append)).write(from);}  }
class C{  @DSComment("Private Method") @DSBan(DSCat.PRIVATE_METHOD) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:58:13.011 -0500",hash_original_method="64392856CD4BE8946E6224874D95C0C3",hash_generated_method="BCF93A278DC9D95CE64E1A5A048773E7") private int socksGetServerPort(){  InetSocketAddress addr=(InetSocketAddress)proxy.address();  return addr.getPort();}  }
class C{  private void writeMajorStatisticsString(BufferedWriter output,SAZone zone) throws IOException {  output.write(zone.getName());  output.write(delimiter);  output.write(String.valueOf(zone.getMajorActivityCount()));  output.write(delimiter);  for (int i=0; i < 24; i++) {    output.write(String.valueOf(zone.getMajorActivityCountDetail(i)));    output.write(delimiter);  }  for (int i=0; i < 23; i++) {    output.write(String.valueOf(zone.getMajorActivityDurationDetail(i)));    output.write(delimiter);  }  output.write(String.valueOf(zone.getMajorActivityDurationDetail(23)));  output.newLine();}  }
class C{  public MockHttpSession(ServletContext servletContext,String id){  this.servletContext=(servletContext != null ? servletContext : new MockServletContext());  this.id=(id != null ? id : Integer.toString(nextId++));}  }
class C{  private EditVariableDialog(final Window parent,final String title,final String variableName){  super(parent,title,ModalityType.APPLICATION_MODAL);  this.parent=parent;  setLayout(new BorderLayout());  new CDialogEscaper(this);  nameField.setText(variableName);  nameField.setSelectionStart(0);  nameField.setSelectionEnd(Integer.MAX_VALUE);  final JPanel upperPanel=new JPanel(new BorderLayout());  upperPanel.add(nameField,BorderLayout.NORTH);  upperPanel.setBorder(new TitledBorder(""));  final CPanelTwoButtons panel=new CPanelTwoButtons(new InternalActionListener(),"OK","Cancel");  add(upperPanel,BorderLayout.NORTH);  add(panel,BorderLayout.SOUTH);  setSize(300,100);  setResizable(false);  final InputMap windowImap=getRootPane().getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);  windowImap.put(HotKeys.APPLY_HK.getKeyStroke(),"APPLY");  getRootPane().getActionMap().put("APPLY",CActionProxy.proxy(new ApplyAction()));  GuiHelper.centerChildToParent(parent,this,true);}  }
class C{  public static void addGzipHeader(HttpServletResponse response) throws GzipResponseHeadersNotModifiableException {  response.setHeader("Content-Encoding","gzip");  boolean containsEncoding=response.containsHeader("Content-Encoding");  if (!containsEncoding) {    throw new GzipResponseHeadersNotModifiableException("Failure when attempting to set " + "Content-Encoding: gzip");  }}  }
class C{  public void store(Word value,Offset offset){}  }
class C{  public static MemcacheClientBuilder<String> newStringClient(Charset charset){  return new MemcacheClientBuilder<>(new StringTranscoder(charset));}  }
class C{  static void loadActionMap(LazyActionMap map){  map.put(new Actions(Actions.TOGGLE_SORT_ORDER));  map.put(new Actions(Actions.SELECT_COLUMN_TO_LEFT));  map.put(new Actions(Actions.SELECT_COLUMN_TO_RIGHT));  map.put(new Actions(Actions.MOVE_COLUMN_LEFT));  map.put(new Actions(Actions.MOVE_COLUMN_RIGHT));  map.put(new Actions(Actions.RESIZE_LEFT));  map.put(new Actions(Actions.RESIZE_RIGHT));  map.put(new Actions(Actions.FOCUS_TABLE));}  }
class C{  protected void initModel() throws Exception {  if (m_Model == null) {    m_Model=(Classifier)SerializationHelper.read(m_ModelFile.getAbsolutePath());  }}  }
class C{  @Override public void teardown(){}  }
class C{  public DenseFeatureStore(){  this.instanceList=new ObjectArrayList<>();  this.featureNames=null;}  }
class C{  public ImageIcon loadImage(String imageName){  try {    ClassLoader classloader=getClass().getClassLoader();    java.net.URL url=classloader.getResource(imageName);    if (url != null) {      ImageIcon icon=new ImageIcon(url);      return icon;    }  } catch (  Exception e) {    e.printStackTrace();  }  throw new IllegalArgumentException("Unable to load image: " + imageName);}  }
class C{  public void remove(XAtom atom){  atoms.remove(atom);}  }
class C{  public Object runSafely(Catbert.FastStack stack) throws Exception {  return new Integer(!Sage.WINDOWS_OS ? 0 : Sage.readDwordValue(Sage.HKEY_LOCAL_MACHINE,"SOFTWARE\\Frey Technologies\\Common\\DSFilters\\MpegDeMux","AudioDelay"));}  }
class C{  public int rank(DoubleMatrix2D A){  return svd(A).rank();}  }
class C{  private String encodeToString(String in,int flags) throws Exception {  String b64=Base64.encodeToString(in.getBytes(),flags);  String dec=decodeString(b64);  assertEquals(in,dec);  return b64;}  }
class C{  public boolean login(final String userName,final String hashedPassword){  final Connection con=Database.getConnection();  try {    PreparedStatement ps=con.prepareStatement("select username from  ta_users where username = ? and password = ?");    ps.setString(1,userName);    ps.setString(2,hashedPassword);    final ResultSet rs=ps.executeQuery();    if (!rs.next()) {      return false;    }    ps.close();    rs.close();    ps=con.prepareStatement("update ta_users set lastLogin = ? where username = ? ");    ps.setTimestamp(1,new Timestamp(System.currentTimeMillis()));    ps.setString(2,userName);    ps.execute();    ps.close();    return true;  } catch (  final SQLException sqle) {    s_logger.log(Level.SEVERE,"Error validating password name:" + userName + " : "+ " pwd:"+ hashedPassword,sqle);    throw new IllegalStateException(sqle.getMessage());  } finally {    DbUtil.closeConnection(con);  }}  }
class C{  public long xminimum(){  return this.minValue;}  }
class C{  public StringRequest(int method,String url,Listener<String> listener,ErrorListener errorListener){  super(method,url,errorListener);  mListener=listener;}  }
class C{  public void test_getPeerPort() throws NoSuchAlgorithmException {  SSLEngine e=getEngine();  assertEquals("Incorrect default value of peer port",-1,e.getPeerPort());  e=getEngine("www.fortify.net",80);  assertEquals("Incorrect peer port",80,e.getPeerPort());}  }
class C{  public static boolean allAscii(String s){  int len=s.length();  for (int i=0; i < len; ++i) {    if ((s.charAt(i) & 0xff80) != 0) {      return false;    }  }  return true;}  }
class C{  public DoubleVector cat(DoubleVector v){  DoubleVector w=new DoubleVector(size() + v.size());  w.set(0,size() - 1,this,0);  w.set(size(),size() + v.size() - 1,v,0);  return w;}  }
class C{  public void removeKey(K key){  map.remove(key);}  }
class C{  protected JvmRuntimeMeta createJvmRuntimeMetaNode(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  return new JvmRuntimeMetaImpl(this,objectserver);}  }
class C{  public boolean calculateTaxTotal(){  log.fine("");  DB.executeUpdateEx("DELETE C_OrderTax WHERE C_Order_ID=" + getC_Order_ID(),get_TrxName());  m_taxes=null;  BigDecimal totalLines=Env.ZERO;  ArrayList<Integer> taxList=new ArrayList<Integer>();  MOrderLine[] lines=getLines();  for (int i=0; i < lines.length; i++) {    MOrderLine line=lines[i];    Integer taxID=new Integer(line.getC_Tax_ID());    if (!taxList.contains(taxID)) {      MOrderTax oTax=MOrderTax.get(line,getPrecision(),false,get_TrxName());      oTax.setIsTaxIncluded(isTaxIncluded());      if (!oTax.calculateTaxFromLines())       return false;      if (!oTax.save(get_TrxName()))       return false;      taxList.add(taxID);    }    totalLines=totalLines.add(line.getLineNetAmt());  }  BigDecimal grandTotal=totalLines;  MOrderTax[] taxes=getTaxes(true);  for (int i=0; i < taxes.length; i++) {    MOrderTax oTax=taxes[i];    MTax tax=oTax.getTax();    if (tax.isSummary()) {      MTax[] cTaxes=tax.getChildTaxes(false);      for (int j=0; j < cTaxes.length; j++) {        MTax cTax=cTaxes[j];        BigDecimal taxAmt=cTax.calculateTax(oTax.getTaxBaseAmt(),isTaxIncluded(),getPrecision());        MOrderTax newOTax=new MOrderTax(getCtx(),0,get_TrxName());        newOTax.setClientOrg(this);        newOTax.setC_Order_ID(getC_Order_ID());        newOTax.setC_Tax_ID(cTax.getC_Tax_ID());        newOTax.setPrecision(getPrecision());        newOTax.setIsTaxIncluded(isTaxIncluded());        newOTax.setTaxBaseAmt(oTax.getTaxBaseAmt());        newOTax.setTaxAmt(taxAmt);        if (!newOTax.save(get_TrxName()))         return false;        if (!isTaxIncluded())         grandTotal=grandTotal.add(taxAmt);      }      if (!oTax.delete(true,get_TrxName()))       return false;      if (!oTax.save(get_TrxName()))       return false;    } else {      if (!isTaxIncluded())       grandTotal=grandTotal.add(oTax.getTaxAmt());    }  }  setTotalLines(totalLines);  setGrandTotal(grandTotal);  return true;}  }
class C{  Log createLogFromClassName(String classLabel) throws Exception {  Class<?> clazz=Class.forName(logClassName);  @SuppressWarnings("unchecked") Constructor<Log> constructor=(Constructor<Log>)clazz.getConstructor(String.class);  return constructor.newInstance(classLabel);}  }
class C{  @DSComment("Package priviledge") @DSBan(DSCat.DEFAULT_MODIFIER) @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2013-12-30 12:36:13.733 -0500",hash_original_method="AF3B09D914ADDB679280100B7539789D",hash_generated_method="AF3B09D914ADDB679280100B7539789D") void restartConnection(boolean proceed){  if (HttpLog.LOGV) {    HttpLog.v("HttpsConnection.restartConnection():" + " proceed: " + proceed);  }synchronized (mSuspendLock) {    if (mSuspended) {      mSuspended=false;      mAborted=!proceed;      mSuspendLock.notify();    }  }}  }
class C{  public void addHam(Reader stream) throws java.io.IOException {  addTokenOccurrences(stream,hamTokenCounts);  hamMessageCount++;}  }
class C{  public void addTree(Tree tree,HashMap<String,Integer> taxonMap){  samples++;  List<Clade> clades=new ArrayList<Clade>();  List<Clade> parentClades=new ArrayList<Clade>();  getClades(tree,tree.getRoot(),parentClades,clades,taxonMap);  for (  Clade c : clades) {    if (cladeProbabilities.containsKey(c.getBits())) {      Clade tmp=cladeProbabilities.get(c.getBits());      tmp.addHeight(c.getHeight());    } else {      c.addHeight(c.getHeight());      cladeProbabilities.put(c.getBits(),c);    }  }}  }
class C{  public void createUnderlying(){  if (Platform.isFxApplicationThread()) {    options=new com.lynden.gmapsfx.shapes.PolylineOptions();    if (path != null) {      LatLong[] ary=path.stream().map(null).collect(Collectors.toList()).toArray(new LatLong[0]);      MVCArray a=new MVCArray(ary);      options.path(a);      if (getStrokeColor() != null) {        options.strokeColor(getStrokeColor());      }      options.clickable(isClickable());      options.draggable(isDraggable());      options.editable(isEditable());      options.visible(isVisible());      options.strokeOpacity(getStrokeOpacity());      options.strokeWeight(getStrokeWeight());      options.zIndex(getZIndex());      options.geodesic(isGeodesic());    }  }}  }
class C{  @Override public int read() throws IOException {  return in.read();}  }
class C{  public MP3Player(PlayerCallback playerCallback){  this(playerCallback,DEFAULT_AUDIO_BUFFER_CAPACITY_MS,DEFAULT_DECODE_BUFFER_CAPACITY_MS);}  }
class C{  @Override protected void onPause(){  super.onPause();  LOG.d(TAG,"Paused the activity.");  if (this.appView != null) {    this.appView.handlePause(this.keepRunning);  }}  }
class C{  protected void detailExecuteLogic(ActionMapping mapping,ActionForm form,HttpServletRequest request,HttpServletResponse response){  logger.info("Inicio de detailExecuteLogic");  ServiceRepository services=ServiceRepository.getInstance(ServiceClient.create(getAppUser(request)));  GestionAuditoriaBI service=services.lookupGestionAuditoriaBI();  String idPista=request.getParameter(Constants.ID);  if (idPista != null && idPista.trim().length() > 0) {    TrazaVO pista=service.getPista(idPista);    request.setAttribute(AuditoriaConstants.PISTA_KEY,pista);    List datos=service.getDatosPista(idPista);    request.setAttribute(AuditoriaConstants.DETALLE_PISTA_KEY,datos);    request.setAttribute(AuditoriaConstants.FICHA_XSL_KEY,getDefaultTemplate());  }  saveCurrentInvocation(KeysClientsInvocations.AUDITORIA_DETALLEPISTA,request);  setReturnActionFordward(request,mapping.findForward(Constants.FORWARD_DETALLE_PISTA));}  }
class C{  private void createLanesFor3WayNetwork(MutableScenario sc){  LaneDefinitions11 lanes=new LaneDefinitions11Impl();  LaneDefinitionsFactory11 fac=lanes.getFactory();  LanesToLinkAssignment11 l2l=fac.createLanesToLinkAssignment(Id.create(13,Link.class));  lanes.addLanesToLinkAssignment(l2l);  LaneData11 lane=fac.createLane(Id.create(1,Lane.class));  l2l.addLane(lane);  lane.addToLinkId(Id.create(32,Link.class));  lane=fac.createLane(Id.create(2,Lane.class));  l2l.addLane(lane);  lane.addToLinkId(Id.create(34,Link.class));  l2l=fac.createLanesToLinkAssignment(Id.create(23,Link.class));  lanes.addLanesToLinkAssignment(l2l);  lane=fac.createLane(Id.create(1,Lane.class));  l2l.addLane(lane);  lane.addToLinkId(Id.create(34,Link.class));  lane=fac.createLane(Id.create(2,Lane.class));  l2l.addLane(lane);  lane.addToLinkId(Id.create(31,Link.class));  l2l=fac.createLanesToLinkAssignment(Id.create(43,Link.class));  lanes.addLanesToLinkAssignment(l2l);  lane=fac.createLane(Id.create(1,Lane.class));  l2l.addLane(lane);  lane.addToLinkId(Id.create(31,Link.class));  lane=fac.createLane(Id.create(2,Lane.class));  l2l.addLane(lane);  lane.addToLinkId(Id.create(32,Link.class));  sc.addScenarioElement(Lanes.ELEMENT_NAME,LaneDefinitionsV11ToV20Conversion.convertTo20(lanes,sc.getNetwork()));}  }
class C{  public void testReadTime() throws Exception {  long currentTimeMillis;  long count=0;  for (int i=0; i < 5; i++) {    logger.info("System.currentTimeMillis() invocation count: " + count);    for (int j=0; j < 1000000; j++) {      count++;      currentTimeMillis=0;      currentTimeMillis=System.currentTimeMillis();      assertTrue(currentTimeMillis > 0);    }  }}  }
class C{  public static int safeNegate(int value){  if (value == Integer.MIN_VALUE) {    throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");  }  return -value;}  }
class C{  @Override public void println(int priority,String tag,String msg,Throwable tr){  String useMsg=msg;  if (useMsg == null) {    useMsg="";  }  if (tr != null) {    msg+="\n" + Log.getStackTraceString(tr);  }  Log.println(priority,tag,useMsg);  if (mNext != null) {    mNext.println(priority,tag,msg,tr);  }}  }
class C{  @Nullable private Figure readElement(IXMLElement elem) throws IOException {  if (DEBUG) {    System.out.println("SVGInputFormat.readElement " + elem.getName() + " line:"+ elem.getLineNr());  }  Figure f=null;  if (elem.getNamespace() == null || elem.getNamespace().equals(SVG_NAMESPACE)) {    String name=elem.getName();    if (name == null) {      if (DEBUG) {        System.err.println("SVGInputFormat warning: skipping nameless element at line " + elem.getLineNr());      }    } else     if (name.equals("a")) {      f=readAElement(elem);    } else     if (name.equals("circle")) {      f=readCircleElement(elem);    } else     if (name.equals("defs")) {      readDefsElement(elem);      f=null;    } else     if (name.equals("ellipse")) {      f=readEllipseElement(elem);    } else     if (name.equals("g")) {      f=readGElement(elem);    } else     if (name.equals("image")) {      f=readImageElement(elem);    } else     if (name.equals("line")) {      f=readLineElement(elem);    } else     if (name.equals("linearGradient")) {      readLinearGradientElement(elem);      f=null;    } else     if (name.equals("path")) {      f=readPathElement(elem);    } else     if (name.equals("polygon")) {      f=readPolygonElement(elem);    } else     if (name.equals("polyline")) {      f=readPolylineElement(elem);    } else     if (name.equals("radialGradient")) {      readRadialGradientElement(elem);      f=null;    } else     if (name.equals("rect")) {      f=readRectElement(elem);    } else     if (name.equals("solidColor")) {      readSolidColorElement(elem);      f=null;    } else     if (name.equals("svg")) {      f=readSVGElement(elem);    } else     if (name.equals("switch")) {      f=readSwitchElement(elem);    } else     if (name.equals("text")) {      f=readTextElement(elem);    } else     if (name.equals("textArea")) {      f=readTextAreaElement(elem);    } else     if (name.equals("title")) {    } else     if (name.equals("use")) {      f=readUseElement(elem);    } else     if (name.equals("style")) {    } else {      if (DEBUG) {        System.out.println("SVGInputFormat not implemented for <" + name + ">");      }    }  }  if (f instanceof SVGFigure) {    if (((SVGFigure)f).isEmpty()) {      return null;    }  } else   if (f != null) {    if (DEBUG) {      System.out.println("SVGInputFormat warning: not an SVGFigure " + f);    }  }  return f;}  }
class C{  public static Matrix read(BufferedReader input) throws java.io.IOException {  StreamTokenizer tokenizer=new StreamTokenizer(input);  tokenizer.resetSyntax();  tokenizer.wordChars(0,255);  tokenizer.whitespaceChars(0,' ');  tokenizer.eolIsSignificant(true);  java.util.Vector<Object> v=new java.util.Vector<Object>();  while (tokenizer.nextToken() == StreamTokenizer.TT_EOL)   ;  if (tokenizer.ttype == StreamTokenizer.TT_EOF)   throw new java.io.IOException("Unexpected EOF on matrix read.");  do {    v.addElement(Double.valueOf(tokenizer.sval));  } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);  int n=v.size();  double row[]=new double[n];  for (int j=0; j < n; j++)   row[j]=((Double)v.elementAt(j)).doubleValue();  v.removeAllElements();  v.addElement(row);  while (tokenizer.nextToken() == StreamTokenizer.TT_WORD) {    v.addElement(row=new double[n]);    int j=0;    do {      if (j >= n)       throw new java.io.IOException("Row " + v.size() + " is too long.");      row[j++]=Double.valueOf(tokenizer.sval).doubleValue();    } while (tokenizer.nextToken() == StreamTokenizer.TT_WORD);    if (j < n)     throw new java.io.IOException("Row " + v.size() + " is too short.");  }  int m=v.size();  double[][] A=new double[m][];  v.copyInto(A);  return new Matrix(A);}  }
class C{  public static String[] explode(final String str,final char delimiter){  return explode(str,delimiter,0);}  }
class C{  public NetworkResponse performRequest(Request<?> request) throws HttpException {  while (true) {    HttpResponse httpResponse=null;    byte[] responseContents=null;    Map<String,String> responseHeaders=new HashMap<String,String>();    try {      Map<String,String> headers=new HashMap<String,String>();      httpResponse=mHttpStack.performRequest(request,headers);      int statusCode=httpResponse.getResponseCode();      responseHeaders=httpResponse.getHeaders();      if (statusCode == HttpStatus.SC_NOT_MODIFIED) {        return new NetworkResponse(HttpStatus.SC_NOT_MODIFIED,null,responseHeaders,true);      }      if (httpResponse.getContentStream() != null) {        responseContents=responseToBytes(request,httpResponse);      } else {        responseContents=new byte[0];      }      if (statusCode < 200 || statusCode > 299) {        throw new IOException();      }      return new NetworkResponse(statusCode,responseContents,responseHeaders,false);    } catch (    SocketTimeoutException e) {      if (request.getRequestCacheConfig().isRetryWhenRequestFailed()) {        retryOnException(request,new HttpException("socket timeout",HttpError.ERROR_SOCKET_TIMEOUT));      } else {        throw new HttpException("socket timeout",HttpError.ERROR_SOCKET_TIMEOUT);      }    }catch (    MalformedURLException e) {      throw new RuntimeException("Bad URL " + request.getUrl(),e);    }catch (    IOException e) {      int statusCode=0;      if (httpResponse != null) {        statusCode=httpResponse.getResponseCode();      } else {        throw new HttpException("NoConnection error",HttpError.ERROR_NO_CONNECTION);      }      CLog.d("Unexpected response code %s for: %s",statusCode,request.getUrl());      if (responseContents != null) {        if (statusCode == HttpStatus.SC_UNAUTHORIZED || statusCode == HttpStatus.SC_FORBIDDEN) {          if (request.getRequestCacheConfig().isRetryWhenRequestFailed()) {            retryOnException(request,new HttpException("auth error",HttpError.ERROR_UNAUTHORIZED));          } else {            throw new HttpException("auth error",HttpError.ERROR_UNAUTHORIZED);          }        } else         if (statusCode == HttpStatus.SC_MOVED_PERMANENTLY || statusCode == HttpStatus.SC_MOVED_TEMPORARILY) {          if (request.getRequestCacheConfig().isRetryWhenRequestFailed()) {            retryOnException(request,new HttpException("redirect error",HttpError.ERROR_REDIRECT));          } else {            throw new HttpException("redirect error",HttpError.ERROR_REDIRECT);          }        } else {          throw new HttpException("server error, Only throw ServerError for 5xx status codes.",HttpError.ERROR_SERVER);        }      } else {        throw new HttpException("responseContents is null",HttpError.ERROR_RESPONSE_NULL);      }    }  }}  }
class C{  public ObjectiveComparator(int objective){  this.objective=objective;}  }
class C{  public void analyzeFrames(){  log.debug("Analyzing frames");  timePosMap=new HashMap<Integer,Long>();  samplePosMap=new HashMap<Integer,Long>();  int sample=1;  Long pos=null;  if (videoSamplesToChunks != null) {    int compositeIndex=0;    CompositionTimeSampleRecord compositeTimeEntry=null;    if (compositionTimes != null && !compositionTimes.isEmpty()) {      compositeTimeEntry=compositionTimes.remove(0);    }    for (int i=0; i < videoSamplesToChunks.size(); i++) {      MP4Atom.Record record=videoSamplesToChunks.get(i);      int firstChunk=record.getFirstChunk();      int lastChunk=videoChunkOffsets.size();      if (i < videoSamplesToChunks.size() - 1) {        MP4Atom.Record nextRecord=videoSamplesToChunks.get(i + 1);        lastChunk=nextRecord.getFirstChunk() - 1;      }      for (int chunk=firstChunk; chunk <= lastChunk; chunk++) {        int sampleCount=record.getSamplesPerChunk();        pos=videoChunkOffsets.elementAt(chunk - 1);        while (sampleCount > 0) {          samplePosMap.put(sample,pos);          double ts=(videoSampleDuration * (sample - 1)) / videoTimeScale;          boolean keyframe=false;          if (syncSamples != null) {            keyframe=syncSamples.contains(sample);            if (seekPoints == null) {              seekPoints=new LinkedList<Integer>();            }            int keyframeTs=(int)Math.round(ts * 1000.0);            seekPoints.add(keyframeTs);            timePosMap.put(keyframeTs,pos);          }          int size=(videoSamples.get(sample - 1)).intValue();          MP4Frame frame=new MP4Frame();          frame.setKeyFrame(keyframe);          frame.setOffset(pos);          frame.setSize(size);          frame.setTime(ts);          frame.setType(TYPE_VIDEO);          if (compositeTimeEntry != null) {            int consecutiveSamples=compositeTimeEntry.getConsecutiveSamples();            frame.setTimeOffset(compositeTimeEntry.getSampleOffset());            compositeIndex++;            if (compositeIndex - consecutiveSamples == 0) {              if (!compositionTimes.isEmpty()) {                compositeTimeEntry=compositionTimes.remove(0);              }              compositeIndex=0;            }          }          frames.add(frame);          pos+=size;          sampleCount--;          sample++;        }      }    }    log.debug("Sample position map (video): {}",samplePosMap);  }  if (audioSamplesToChunks != null) {    sample=1;    for (int i=0; i < audioSamplesToChunks.size(); i++) {      MP4Atom.Record record=audioSamplesToChunks.get(i);      int firstChunk=record.getFirstChunk();      int lastChunk=audioChunkOffsets.size();      if (i < audioSamplesToChunks.size() - 1) {        MP4Atom.Record nextRecord=audioSamplesToChunks.get(i + 1);        lastChunk=nextRecord.getFirstChunk() - 1;      }      for (int chunk=firstChunk; chunk <= lastChunk; chunk++) {        int sampleCount=record.getSamplesPerChunk();        pos=audioChunkOffsets.elementAt(chunk - 1);        while (sampleCount > 0) {          double ts=(audioSampleDuration * (sample - 1)) / audioTimeScale;          int size=(audioSamples.get(sample - 1)).intValue();          MP4Frame frame=new MP4Frame();          frame.setOffset(pos);          frame.setSize(size);          frame.setTime(ts);          frame.setType(TYPE_AUDIO);          frames.add(frame);          pos+=size;          sampleCount--;          sample++;        }      }    }  }  Collections.sort(frames);  log.debug("Frames count: {}",frames.size());  if (audioSamplesToChunks != null) {    audioChunkOffsets.clear();    audioChunkOffsets=null;    audioSamplesToChunks.clear();    audioSamplesToChunks=null;  }  if (videoSamplesToChunks != null) {    videoChunkOffsets.clear();    videoChunkOffsets=null;    videoSamplesToChunks.clear();    videoSamplesToChunks=null;  }  if (syncSamples != null) {    syncSamples.clear();    syncSamples=null;  }}  }
class C{  public boolean isBlank(){  if (blank == null) {    blank=Boolean.valueOf(StringUtil.isBlank(nodeValue));  }  return blank.booleanValue();}  }
class C{  public final void turnTo(double azimuth,double elevation){  if (!is3dMode)   elevation=0.0d;  heading.azimuth=Geometric.clampAngleRadians(azimuth);  heading.elevation=Geometric.clampAngleRadians(elevation);  velocity.set(heading.toCartesian());}  }
class C{  public boolean containsNeuron(final Neuron n){  return neuronList.contains(n);}  }
class C{  public static int EIO(){  return Errno.EIO.intValue();}  }
class C{  public static long addCap(long a,long b){  long res=a + b;  if (res < 0L) {    return Long.MAX_VALUE;  }  return res;}  }
class C{  public UnsyncBufferedOutputStream(OutputStream out){  buf=new byte[size];  this.out=out;}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public static final byte composeDatagramMode(byte esmClass){  return composeMessagingMode(esmClass,SMPPConstant.ESMCLS_DATAGRAM_MODE);}  }
class C{  public void onPackageDisappeared(String packageName,int reason){}  }
class C{  public boolean canBeShortAddress(int address){  return ((address >= 1) && (address <= 127));}  }
class C{  public Generator(Grammar grammar,Precedences precedences,Verbosity verbosity){  this.grammar=grammar;  this.precedences=precedences;  this.verbosity=verbosity;  this.debugOut=System.out;}  }
class C{  public char next(char c) throws JSONException {  char n=this.next();  if (n != c) {    throw this.syntaxError("Expected '" + c + "' and instead saw '"+ n+ "'");  }  return n;}  }
class C{  public static boolean pointInPolygon(double[] x,double[] y,double lat,double lon){  assert x.length == y.length;  boolean inPoly=false;  for (int i=1; i < x.length; i++) {    if (x[i] < lon && x[i - 1] >= lon || x[i - 1] < lon && x[i] >= lon) {      if (y[i] + (lon - x[i]) / (x[i - 1] - x[i]) * (y[i - 1] - y[i]) < lat) {        inPoly=!inPoly;      }    }  }  return inPoly;}  }
class C{  public void addFilter(NodeFilter f){  this.filters.add(f);  updateShownNodes();  if (this.refreshTimer == null) {    this.refreshTimer=new Timer(AUTO_REFRESH_DELAY,this);    this.refreshTimer.start();  }}  }
class C{  public PeriodType withMinutesRemoved(){  return withFieldRemoved(5,"NoMinutes");}  }
class C{  public boolean equals(Object other){  if (this == other)   return true;  if (!(other instanceof CRLExtensions))   return false;  Collection<Extension> otherC=((CRLExtensions)other).getAllExtensions();  Object[] objs=otherC.toArray();  int len=objs.length;  if (len != map.size())   return false;  Extension otherExt, thisExt;  String key=null;  for (int i=0; i < len; i++) {    if (objs[i] instanceof CertAttrSet)     key=((CertAttrSet)objs[i]).getName();    otherExt=(Extension)objs[i];    if (key == null)     key=otherExt.getExtensionId().toString();    thisExt=map.get(key);    if (thisExt == null)     return false;    if (!thisExt.equals(otherExt))     return false;  }  return true;}  }
class C{  private boolean saveBitmap(String fullPath,Bitmap bitmap){  if (fullPath == null || bitmap == null)   return false;  boolean fileCreated=false;  boolean bitmapCompressed=false;  boolean streamClosed=false;  File imageFile=new File(fullPath);  if (imageFile.exists())   if (!imageFile.delete())   return false;  try {    fileCreated=imageFile.createNewFile();  } catch (  IOException e) {    e.printStackTrace();  }  FileOutputStream out=null;  try {    out=new FileOutputStream(imageFile);    bitmapCompressed=bitmap.compress(CompressFormat.PNG,100,out);  } catch (  Exception e) {    e.printStackTrace();    bitmapCompressed=false;  } finally {    if (out != null) {      try {        out.flush();        out.close();        streamClosed=true;      } catch (      IOException e) {        e.printStackTrace();        streamClosed=false;      }    }  }  return (fileCreated && bitmapCompressed && streamClosed);}  }
class C{  void updatePendingNodes(final int newLandmarkIndex,final Node toNode,final RouterPriorityQueue<Node> pendingNodes){  Iterator<Node> it=pendingNodes.iterator();  PreProcessLandmarks.LandmarksData toRole=getPreProcessData(toNode);  ArrayList<Double> newEstRemTravCosts=new ArrayList<Double>();  ArrayList<Node> nodesToBeUpdated=new ArrayList<Node>();  while (it.hasNext()) {    Node node=it.next();    AStarNodeData role=getData(node);    PreProcessLandmarks.LandmarksData ppRole=getPreProcessData(node);    double estRemTravCost=role.getExpectedRemainingCost();    double newEstRemTravCost=estimateRemainingTravelCost(ppRole,toRole,newLandmarkIndex);    if (newEstRemTravCost > estRemTravCost) {      nodesToBeUpdated.add(node);      newEstRemTravCosts.add(newEstRemTravCost);    }  }  for (  Node node : nodesToBeUpdated) {    pendingNodes.remove(node);  }  for (int i=0; i < nodesToBeUpdated.size(); i++) {    Node node=nodesToBeUpdated.get(i);    AStarNodeData data=getData(node);    data.setExpectedRemainingCost(newEstRemTravCosts.get(i));    pendingNodes.add(node,getPriority(data));  }}  }
class C{  @Override public void eUnset(int featureID){switch (featureID) {case GamlPackage.ACTION_ARGUMENTS__ARGS:    getArgs().clear();  return;}super.eUnset(featureID);}  }
class C{  public String cancelReview(){  manageReviewModel.setServiceReview(null);  setForwardUrl(getRequest());  return OUTCOME_MARKETPLACE_REDIRECT;}  }
class C{  public CacheMetricsImpl(GridCacheContext<?,?> cctx){  assert cctx != null;  this.cctx=cctx;  if (cctx.isNear())   dhtCtx=cctx.near().dht().context();  if (cctx.store().store() instanceof GridCacheWriteBehindStore)   store=(GridCacheWriteBehindStore)cctx.store().store();  delegate=null;}  }
class C{  public boolean xPathExists(String xpathExpr){  try {    if (XPath.selectSingleNode(this.xmlDocument,xpathExpr) == null)     return false;    return true;  } catch (  Exception ex) {    return false;  }}  }
class C{  @RequestMapping(value={"/",""},method=RequestMethod.POST) @ResponseBody public RestWrapper update(@ModelAttribute("busdomain") @Valid BusDomain busDomain,BindingResult bindingResult,Principal principal){  RestWrapper restWrapper=null;  if (bindingResult.hasErrors()) {    BindingResultError bindingResultError=new BindingResultError();    return bindingResultError.errorMessage(bindingResult);  }  try {    com.wipro.ats.bdre.md.dao.jpa.BusDomain jpaBusDomain=new com.wipro.ats.bdre.md.dao.jpa.BusDomain();    jpaBusDomain.setBusDomainId(busDomain.getBusDomainId());    jpaBusDomain.setBusDomainName(busDomain.getBusDomainName());    jpaBusDomain.setBusDomainOwner(busDomain.getBusDomainOwner());    jpaBusDomain.setDescription(busDomain.getDescription());    busDomainDAO.update(jpaBusDomain);    restWrapper=new RestWrapper(busDomain,RestWrapper.OK);    LOGGER.info(RECORDWITHID + busDomain.getBusDomainId() + " updated in BusDomain by User:"+ principal.getName()+ busDomain);  } catch (  MetadataException e) {    LOGGER.error(e);    restWrapper=new RestWrapper(e.getMessage(),RestWrapper.ERROR);  }  return restWrapper;}  }
class C{  private int[] readTypeAnnotations(final MethodVisitor mv,final Context context,int u,boolean visible){  char[] c=context.buffer;  int[] offsets=new int[readUnsignedShort(u)];  u+=2;  for (int i=0; i < offsets.length; ++i) {    offsets[i]=u;    int target=readInt(u);switch (target >>> 24) {case 0x00:case 0x01:case 0x16:      u+=2;    break;case 0x13:case 0x14:case 0x15:  u+=1;break;case 0x40:case 0x41:for (int j=readUnsignedShort(u + 1); j > 0; --j) {int start=readUnsignedShort(u + 3);int length=readUnsignedShort(u + 5);readLabel(start,context.labels);readLabel(start + length,context.labels);u+=6;}u+=3;break;case 0x47:case 0x48:case 0x49:case 0x4A:case 0x4B:u+=4;break;default :u+=3;break;}int pathLength=readByte(u);if ((target >>> 24) == 0x42) {TypePath path=pathLength == 0 ? null : new TypePath(b,u);u+=1 + 2 * pathLength;u=readAnnotationValues(u + 2,c,true,mv.visitTryCatchAnnotation(target,path,readUTF8(u,c),visible));} else {u=readAnnotationValues(u + 3 + 2 * pathLength,c,true,null);}}return offsets;}  }
class C{  public double doOperation() throws OperatorFailedException {  if (DEBUG) {    c2cLikelihood.outputTreeToFile("beforeTSSA.nex",false);  }  BranchMapModel branchMap=c2cLikelihood.getBranchMap();  double logq=0;  NodeRef i;  ArrayList<NodeRef> eligibleNodes=getEligibleNodes(tree,branchMap);  i=eligibleNodes.get(MathUtils.nextInt(eligibleNodes.size()));  double eligibleNodeCount=eligibleNodes.size();  final NodeRef iP=tree.getParent(i);  final NodeRef CiP=getOtherChild(tree,iP,i);  final NodeRef PiP=tree.getParent(iP);  final double delta=getDelta();  final double oldHeight=tree.getNodeHeight(iP);  final double newHeight=oldHeight + delta;  AbstractCase iCase=branchMap.get(i.getNumber());  AbstractCase iPCase=branchMap.get(iP.getNumber());  AbstractCase CiPCase=branchMap.get(CiP.getNumber());  AbstractCase PiPCase=null;  if (PiP != null) {    PiPCase=branchMap.get(PiP.getNumber());  }  if (resampleInfectionTimes) {    if (iCase != iPCase) {      iCase.setInfectionBranchPosition(MathUtils.nextDouble());    }    if (PiPCase == null || CiPCase != PiPCase) {      CiPCase.setInfectionBranchPosition(MathUtils.nextDouble());    }  }  if (delta > 0) {    if (PiP != null && tree.getNodeHeight(PiP) < newHeight) {      NodeRef newParent=PiP;      NodeRef newChild=iP;      while (tree.getNodeHeight(newParent) < newHeight) {        newChild=newParent;        newParent=tree.getParent(newParent);        if (newParent == null)         break;      }      if (branchMap.get(newChild.getNumber()) != branchMap.get(iP.getNumber())) {        throw new OperatorFailedException("invalid slide");      }      tree.beginTreeEdit();      if (tree.isRoot(newChild)) {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.setRoot(iP);        if (tree.hasNodeTraits()) {          tree.swapAllTraits(newChild,iP);        }        if (tree.hasRates()) {          final double rootNodeRate=tree.getNodeRate(newChild);          tree.setNodeRate(newChild,tree.getNodeRate(iP));          tree.setNodeRate(iP,rootNodeRate);        }      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      final int possibleSources=intersectingEdges(tree,newChild,oldHeight,branchMap,branchMap.get(iP.getNumber()),null);      logq-=Math.log(possibleSources);    } else {      tree.setNodeHeight(iP,newHeight);      logq+=0.0;    }  } else {    if (tree.getNodeHeight(i) > newHeight) {      return Double.NEGATIVE_INFINITY;    }    if (tree.getNodeHeight(CiP) > newHeight) {      List<NodeRef> newChildren=new ArrayList<NodeRef>();      final int possibleDestinations=intersectingEdges(tree,CiP,newHeight,branchMap,branchMap.get(iP.getNumber()),newChildren);      if (newChildren.size() == 0) {        return Double.NEGATIVE_INFINITY;      }      final int childIndex=MathUtils.nextInt(newChildren.size());      NodeRef newChild=newChildren.get(childIndex);      NodeRef newParent=tree.getParent(newChild);      if (resampleInfectionTimes) {        AbstractCase newChildCase=branchMap.get(newChild.getNumber());        if (newChildCase != iPCase) {          newChildCase.setInfectionBranchPosition(MathUtils.nextDouble());        }      }      tree.beginTreeEdit();      if (tree.isRoot(iP)) {        tree.removeChild(iP,CiP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(newParent,iP);        tree.setRoot(CiP);        if (tree.hasNodeTraits()) {          tree.swapAllTraits(iP,CiP);        }        if (tree.hasRates()) {          final double rootNodeRate=tree.getNodeRate(iP);          tree.setNodeRate(iP,tree.getNodeRate(CiP));          tree.setNodeRate(CiP,rootNodeRate);        }      } else {        tree.removeChild(iP,CiP);        tree.removeChild(PiP,iP);        tree.removeChild(newParent,newChild);        tree.addChild(iP,newChild);        tree.addChild(PiP,CiP);        tree.addChild(newParent,iP);      }      tree.setNodeHeight(iP,newHeight);      tree.endTreeEdit();      logq+=Math.log(possibleDestinations);    } else {      tree.setNodeHeight(iP,newHeight);      logq+=0.0;    }  }  if (swapInRandomRate) {    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    if (j != i) {      final double tmp=tree.getNodeRate(i);      tree.setNodeRate(i,tree.getNodeRate(j));      tree.setNodeRate(j,tmp);    }  }  if (swapInRandomTrait) {    final NodeRef j=tree.getNode(MathUtils.nextInt(tree.getNodeCount()));    if (j != i) {      tree.swapAllTraits(i,j);    }  }  if (logq == Double.NEGATIVE_INFINITY)   throw new OperatorFailedException("invalid slide");  if (DEBUG) {    c2cLikelihood.getTreeModel().checkPartitions();    c2cLikelihood.outputTreeToFile("afterTSSA.nex",false);  }  double reverseEligibleNodeCount=getEligibleNodes(tree,branchMap).size();  logq+=Math.log(eligibleNodeCount / reverseEligibleNodeCount);  return logq;}  }
class C{  public void removeConversation(String name){  conversations.remove(name.toLowerCase());}  }
class C{  public Desert(){  super();}  }
class C{  private void updateProgress(int progress){  if (myHost != null && progress != previousProgress) {    myHost.updateProgress(progress);  }  previousProgress=progress;}  }
class C{  public static synchronized void init(String recoverTest){  RecoverTester tester=RecoverTester.getInstance();  if (StringUtils.isNumber(recoverTest)) {    tester.setTestEvery(Integer.parseInt(recoverTest));  }  FilePathRec.setRecorder(tester);}  }
class C{  private Validator createValidator(FaceletContext ctx){  String id=owner.getValidatorId(ctx);  if (id == null) {    throw new TagException(owner.getTag(),"A validator id was not specified. Typically the validator id is set in the constructor ValidateHandler(ValidatorConfig)");  }  return ctx.getFacesContext().getApplication().createValidator(id);}  }
class C{  @Override protected void loadPlugins(){  this.pickingPlugin=new PickingGraphMousePlugin<V,E>();  this.animatedPickingPlugin=new AnimatedPickingGraphMousePlugin<V,E>();  this.translatingPlugin=new TranslatingGraphMousePlugin(InputEvent.BUTTON1_MASK);  this.scalingPlugin=new ScalingGraphMousePlugin(new CrossoverScalingControl(),0,in,out);  this.rotatingPlugin=new RotatingGraphMousePlugin();  this.shearingPlugin=new ShearingGraphMousePlugin();  add(scalingPlugin);  setMode(Mode.TRANSFORMING);}  }
class C{  public <T extends JCTree>void printExprs(List<T> trees,String sep) throws IOException {  if (trees.nonEmpty()) {    printExpr(trees.head);    for (List<T> l=trees.tail; l.nonEmpty(); l=l.tail) {      print(sep);      printExpr(l.head);    }  }}  }
class C{  public Tee(){  this(null);}  }
class C{  public void omitField(final Class<?> definedIn,final String fieldName){  if (fieldAliasingMapper == null) {    throw new InitializationException("No " + FieldAliasingMapper.class.getName() + " available");  }  fieldAliasingMapper.omitField(definedIn,fieldName);}  }
class C{  public boolean isRunning(){  return running;}  }
class C{  @Override protected DocWriter createWriter(final MBasicTable table,final Document document,final OutputStream out){  final RtfWriter2 writer=RtfWriter2.getInstance(document,out);  final String title=buildTitle(table);  if (title != null) {    final HeaderFooter header=new RtfHeaderFooter(new Paragraph(title));    header.setAlignment(Element.ALIGN_LEFT);    header.setBorder(Rectangle.NO_BORDER);    document.setHeader(header);    document.addTitle(title);  }  final Paragraph footerParagraph=new Paragraph();  final Font font=FontFactory.getFont(FontFactory.TIMES_ROMAN,12,Font.NORMAL);  footerParagraph.add(new RtfPageNumber(font));  footerParagraph.add(new Phrase(" / ",font));  footerParagraph.add(new RtfTotalPageNumber(font));  footerParagraph.setAlignment(Element.ALIGN_CENTER);  final HeaderFooter footer=new RtfHeaderFooter(footerParagraph);  footer.setBorder(Rectangle.TOP);  document.setFooter(footer);  return writer;}  }
class C{  public double manhattanDistance(final Int3D p){  final double dx=Math.abs((double)this.x - p.x);  final double dy=Math.abs((double)this.y - p.y);  final double dz=Math.abs((double)this.z - p.z);  return dx + dy + dz;}  }
class C{  public MultipartBuilder attachment(InputStream is,String filename){  return bodyPart(new StreamDataBodyPart(ATTACHMENT_NAME,is,filename));}  }
class C{  public static IMethodBinding findOverriddenMethod(IMethodBinding overriding,boolean testVisibility){  List<IMethodBinding> findOverriddenMethods=findOverriddenMethods(overriding,testVisibility,true);  if (findOverriddenMethods.isEmpty()) {    return null;  }  return findOverriddenMethods.get(0);}  }
class C{  public String globalInfo(){  return "Evaluate the performance of batch trained clusterers.";}  }
class C{  public static RenameFileDialogFragment newInstance(OCFile file){  RenameFileDialogFragment frag=new RenameFileDialogFragment();  Bundle args=new Bundle();  args.putParcelable(ARG_TARGET_FILE,file);  frag.setArguments(args);  return frag;}  }
class C{  public T caseTypeSpecifier(TypeSpecifier object){  return null;}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-02-25 10:38:06.878 -0500",hash_original_method="42A30DA5805C25DC1FF8BB76E1D4A883",hash_generated_method="B0E719B437F0CB56217298A3A09102B7") public Reader retrieveHeader(String header,int lowArticleNumber,int highArticleNumber) throws IOException {  return __retrieveHeader(header,new String(lowArticleNumber + "-" + highArticleNumber));}  }
class C{  public void w(Object str){  if (debug) {    if (logLevel <= Log.WARN) {      String name=getFunctionName();      if (name != null) {        Log.w(tag,name + "\n" + str+ "\n------------------------------------------------------------------------------");      } else {        Log.w(tag,str.toString());      }    }  }}  }
class C{  public void throwException(){  mv.visitInsn(Opcodes.ATHROW);}  }
class C{  public static short max(short a,short b,short c){  if (b > a) {    a=b;  }  if (c > a) {    a=c;  }  return a;}  }
class C{  public void paint(Graphics g,Rectangle bounds){  Color temp=g.getColor();  g.setColor(color);  g.fillRect(bounds.x,bounds.y,bounds.width,bounds.height);  g.setColor(temp);}  }
class C{  private void shortcutToggle(ActionEvent e,DeployUtilities.ToggleType toggleType){  boolean checkBoxState=true;  if (e.getSource() instanceof JCheckBoxMenuItem) {    checkBoxState=((JCheckBoxMenuItem)e.getSource()).getState();  }  if (shortcutCreator.getJarPath() == null) {    showErrorDialog("Unable to determine jar path; " + toggleType + " entry cannot succeed.");    return;  }  if (!checkBoxState) {    if (confirmDialog.prompt("Remove " + name + " from "+ toggleType+ "?")) {      if (!shortcutCreator.removeShortcut(toggleType)) {        displayErrorMessage("Error removing " + toggleType + " entry");        checkBoxState=true;      } else {        displayInfoMessage("Successfully removed " + toggleType + " entry");      }    } else {      checkBoxState=true;    }  } else {    if (!shortcutCreator.createShortcut(toggleType)) {      displayErrorMessage("Error creating " + toggleType + " entry");      checkBoxState=false;    } else {      displayInfoMessage("Successfully added " + toggleType + " entry");    }  }  if (e.getSource() instanceof JCheckBoxMenuItem) {    ((JCheckBoxMenuItem)e.getSource()).setState(checkBoxState);  }}  }
class C{  protected POInfo initPO(Properties ctx){  POInfo poi=POInfo.getPOInfo(ctx,Table_ID,get_TrxName());  return poi;}  }
class C{  public StaticAnalysisStat(String statName){  this.statName=statName;}  }
class C{  public URI(String p_scheme,String p_userinfo,String p_host,int p_port,String p_path,String p_queryString,String p_fragment) throws MalformedURIException {  if (p_scheme == null || p_scheme.trim().length() == 0) {    throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_SCHEME_REQUIRED,null));  }  if (p_host == null) {    if (p_userinfo != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_USERINFO_IF_NO_HOST,null));    }    if (p_port != -1) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_PORT_IF_NO_HOST,null));    }  }  if (p_path != null) {    if (p_path.indexOf('?') != -1 && p_queryString != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_QUERY_STRING_IN_PATH,null));    }    if (p_path.indexOf('#') != -1 && p_fragment != null) {      throw new MalformedURIException(Utils.messages.createMessage(MsgKey.ER_NO_FRAGMENT_STRING_IN_PATH,null));    }  }  setScheme(p_scheme);  setHost(p_host);  setPort(p_port);  setUserinfo(p_userinfo);  setPath(p_path);  setQueryString(p_queryString);  setFragment(p_fragment);}  }
class C{  public ResolvableMethod annotated(Class<? extends Annotation> annotationType){  this.annotationTypes.add(annotationType);  return this;}  }
class C{  public StageProgressTracker(String name,int threadCount){  this.name=name;  this.threadCount=threadCount;  this.taskInfo=new TaskProgress[threadCount];  this.committedSeqno=new AtomicIntervalGuard<ReplDBMSHeader>(threadCount);  for (int i=0; i < taskInfo.length; i++)   taskInfo[i]=new TaskProgress(name,i);  if (logger.isDebugEnabled()) {    logger.info("Initiating stage process tracker for stage: name=" + name + " threadCount="+ threadCount);  }}  }
class C{  public static float function3(float x){  return x * x + 2 * x + 1;}  }
class C{  private void updateProgress(String progressLabel,int progress){  if (myHost != null && ((progress != previousProgress) || (!progressLabel.equals(previousProgressLabel)))) {    myHost.updateProgress(progressLabel,progress);  }  previousProgress=progress;  previousProgressLabel=progressLabel;}  }
class C{  public static boolean checkTransactionFees(int size,Transaction transaction,TransactionOutput output){  long in=output.getValue().value;  long out=0;  for (  TransactionOutput o : transaction.getOutputs()) {    out+=o.getValue().value;  }  long diff=in - out;  float f=((float)diff) / size;  if (f >= Constants.FEE_PER_BYTE_MIN) {    if (f <= Constants.FEE_PER_BYTE_MAX) {      return true;    }  }  System.out.println("Fee not correct. Total Fee: " + diff + " Per Byte: "+ f+ " Size: "+ size);  return false;}  }
class C{  public void cancel(){  cancel=true;}  }
class C{  @Override public void receiveEmptyMessage(Exchange exchange,EmptyMessage message){  if (exchange.getFailedTransmissionCount() != 0) {    getRemoteEndpoint(exchange).setEstimatorState(exchange);  }  super.receiveEmptyMessage(exchange,message);  calculateRTT(exchange);  checkRemoteEndpointQueue(exchange);}  }
class C{  private void writeObject(java.io.ObjectOutputStream s) throws java.io.IOException {  s.defaultWriteObject();  s.writeDouble(get());}  }
class C{  private void read(InputNode node,Object source,Schema schema) throws Exception {  Section section=schema.getSection();  readVersion(node,source,schema);  readSection(node,source,section);}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case SGraphPackage.SPECIFICATION_ELEMENT__SPECIFICATION:    setSpecification((String)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public static boolean isStatic(int mod){  return (mod & STATIC) != 0;}  }
class C{  private int dp2px(int dp){  return (int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,dp,this.mMetrics);}  }
class C{  private void testBillingWithSteppedPricesForEvents(int eventsNumber,BigDecimal expectedCosts,BigDecimal[] stepLimit,BigDecimal[] stepCosts,int freePeriod) throws Exception {  final int testMonth=Calendar.APRIL;  final int testDay=1;  final int testYear=2010;  final long billingTime=getTimeInMillisForBilling(testYear,testMonth,testDay);  long subscriptionCreationTime=getTimeInMillisForBilling(testYear,testMonth - 2,testDay);  long subscriptionActivationTime=subscriptionCreationTime;  long eventOccurTime=billingTime - 1;  testBillingWithSteppedPricesForEvents(eventsNumber,expectedCosts,stepLimit,stepCosts,freePeriod,billingTime,subscriptionCreationTime,subscriptionActivationTime,eventOccurTime);}  }
class C{  public Field newField(Class<?> declaringClass,String name,Class<?> type,int modifiers,int slot,String signature,byte[] annotations){  return langReflectAccess().newField(declaringClass,name,type,modifiers,slot,signature,annotations);}  }
class C{  public void runTest() throws Throwable {  Document doc;  NodeList elementList;  Node nameNode;  CharacterData child;  String childData;  doc=(Document)load("hc_staff",true);  elementList=doc.getElementsByTagName("strong");  nameNode=elementList.item(0);  child=(CharacterData)nameNode.getFirstChild();  child.appendData(", Esquire");  childData=child.getData();  assertEquals("characterdataAppendDataGetDataAssert","Margaret Martin, Esquire",childData);}  }
class C{  public static long convertDateValueToMillis(TimeZone tz,long dateValue){  return getMillis(tz,yearFromDateValue(dateValue),monthFromDateValue(dateValue),dayFromDateValue(dateValue),0,0,0,0);}  }
class C{  public void elementDecl(String name,String model) throws SAXException {  if (m_inExternalDTD)   return;  try {    final java.io.Writer writer=m_writer;    DTDprolog();    writer.write("<!ELEMENT ");    writer.write(name);    writer.write(' ');    writer.write(model);    writer.write('>');    writer.write(m_lineSep,0,m_lineSepLen);  } catch (  IOException e) {    throw new SAXException(e);  }}  }
class C{  public static double hypot(double a,double b){  double r;  if (Math.abs(a) > Math.abs(b)) {    r=b / a;    r=Math.abs(a) * Math.sqrt(1 + r * r);  } else   if (b != 0) {    r=a / b;    r=Math.abs(b) * Math.sqrt(1 + r * r);  } else {    r=0.0;  }  return r;}  }
class C{  public static void debug(String message){  StringBuffer buffer=new StringBuffer();  buffer.append(new Date(System.currentTimeMillis()));  buffer.append(" - [");  buffer.append(Thread.currentThread().getName());  buffer.append("] ");  buffer.append(message);  System.out.println(buffer.toString());}  }
class C{  @Override public boolean isCancelled(){  return this.cancelled;}  }
class C{  private void requestCoffeeList(){  List<String> inventory=new ArrayList<String>(4);  inventory.add(SupportUtils.SKU_ESPRESSO);  inventory.add(SupportUtils.SKU_CAPPUCCINO);  inventory.add(SupportUtils.SKU_ICED_COFFEE);  inventory.add(SupportUtils.SKU_EARL_GREY);  mIabHelper.queryInventoryAsync(true,inventory,mQueryInventoryListener);}  }
class C{  Double computePortMetric(StoragePort port){  StorageSystem system=_dbClient.queryObject(StorageSystem.class,port.getStorageDevice());  DiscoveredDataObject.Type type=DiscoveredDataObject.Type.valueOf(system.getSystemType());  StringMap portMap=port.getMetrics();  double emaFactor=getEmaFactor(DiscoveredDataObject.Type.valueOf(system.getSystemType()));  if (emaFactor > 1.0) {    emaFactor=1.0;  }  Double portAvgBusy=MetricsKeys.getDouble(MetricsKeys.avgPercentBusy,portMap);  Double portEmaBusy=MetricsKeys.getDouble(MetricsKeys.emaPercentBusy,portMap);  Double portPercentBusy=(portAvgBusy * emaFactor) + ((1 - emaFactor) * portEmaBusy);  MetricsKeys.putDouble(MetricsKeys.avgPortPercentBusy,portPercentBusy,port.getMetrics());  Double cpuAvgBusy=null;  Double cpuEmaBusy=null;  Double portMetricDouble=portPercentBusy;  if (type == DiscoveredDataObject.Type.vmax || type == DiscoveredDataObject.Type.vnxblock || type == DiscoveredDataObject.Type.vplex) {    StorageHADomain haDomain=_dbClient.queryObject(StorageHADomain.class,port.getStorageHADomain());    StringMap cpuMap=haDomain.getMetrics();    cpuAvgBusy=MetricsKeys.getDouble(MetricsKeys.avgPercentBusy,cpuMap);    cpuEmaBusy=MetricsKeys.getDouble(MetricsKeys.emaPercentBusy,cpuMap);    Double cpuPercentBusy=(cpuAvgBusy * emaFactor) + ((1 - emaFactor) * cpuEmaBusy);    MetricsKeys.putDouble(MetricsKeys.avgCpuPercentBusy,cpuPercentBusy,port.getMetrics());    portMetricDouble+=cpuPercentBusy;    portMetricDouble/=2.0;  }  _log.info(String.format("%s %s: portMetric %f port %f %f cpu %s %s",port.getNativeGuid(),portName(port),portMetricDouble,portAvgBusy,portEmaBusy,cpuAvgBusy == null ? "n/a" : cpuAvgBusy.toString(),cpuEmaBusy == null ? "n/a" : cpuEmaBusy.toString()));  return portMetricDouble;}  }
class C{  private void populateAccessProfile(AccessProfile accessProfile,StorageSystem storageDevice,String nameSpace) throws DatabaseException, DeviceControllerException {  accessProfile.setSystemId(storageDevice.getId());  accessProfile.setSystemClazz(storageDevice.getClass());  if (Type.vnxblock.toString().equalsIgnoreCase(storageDevice.getSystemType()) || Type.vmax.toString().equalsIgnoreCase(storageDevice.getSystemType()) || Type.ibmxiv.name().equals(storageDevice.getSystemType())) {    injectDiscoveryProfile(accessProfile,storageDevice);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (Type.vnxfile.toString().equalsIgnoreCase(storageDevice.getSystemType())) {    accessProfile.setIpAddress(storageDevice.getIpAddress());    accessProfile.setUserName(storageDevice.getUsername());    accessProfile.setPassword(storageDevice.getPassword());    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setserialID(storageDevice.getSerialNumber());    if (null != storageDevice.getPortNumber()) {      accessProfile.setPortNumber(storageDevice.getPortNumber());    }    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.isilon.toString())) {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getIpAddress());    accessProfile.setUserName(storageDevice.getUsername());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPassword(storageDevice.getPassword());    accessProfile.setPortNumber(storageDevice.getPortNumber());    accessProfile.setLastSampleTime(0L);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.vplex.toString())) {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getIpAddress());    accessProfile.setUserName(storageDevice.getUsername());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPassword(storageDevice.getPassword());    accessProfile.setPortNumber(storageDevice.getPortNumber());    accessProfile.setLastSampleTime(0L);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.netapp.toString()) || storageDevice.getSystemType().equals(Type.netappc.toString()) || Type.vnxe.toString().equalsIgnoreCase(storageDevice.getSystemType())) {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getIpAddress());    accessProfile.setUserName(storageDevice.getUsername());    accessProfile.setPassword(storageDevice.getPassword());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPortNumber(storageDevice.getPortNumber());    accessProfile.setLastSampleTime(0L);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.rp.toString())) {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getIpAddress());    accessProfile.setUserName(storageDevice.getUsername());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPassword(storageDevice.getPassword());    accessProfile.setPortNumber(storageDevice.getPortNumber());    accessProfile.setLastSampleTime(0L);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.datadomain.toString())) {    injectDiscoveryProfile(accessProfile,storageDevice);    accessProfile.setPortNumber(storageDevice.getSmisPortNumber());    accessProfile.setLastSampleTime(0L);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.scaleio.toString())) {    injectDiscoveryProfile(accessProfile,storageDevice);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.openstack.toString())) {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getSmisProviderIP());    accessProfile.setUserName(storageDevice.getSmisUserName());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPassword(storageDevice.getSmisPassword());    accessProfile.setPortNumber(storageDevice.getSmisPortNumber());    accessProfile.setLastSampleTime(0L);  } else   if (storageDevice.getSystemType().equals(Type.xtremio.toString())) {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getSmisProviderIP());    accessProfile.setUserName(storageDevice.getSmisUserName());    accessProfile.setPassword(storageDevice.getSmisPassword());    accessProfile.setPortNumber(storageDevice.getSmisPortNumber());    accessProfile.setLastSampleTime(0L);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.ecs.toString())) {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getIpAddress());    accessProfile.setUserName(storageDevice.getUsername());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPassword(storageDevice.getPassword());    accessProfile.setPortNumber(storageDevice.getPortNumber());    accessProfile.setLastSampleTime(0L);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.hds.toString())) {    populateHDSAccessProfile(accessProfile,storageDevice,nameSpace);  } else   if (storageDevice.getSystemType().equals(Type.ceph.toString())) {    accessProfile.setSystemType(storageDevice.getSystemType());    accessProfile.setIpAddress(storageDevice.getSmisProviderIP());    accessProfile.setUserName(storageDevice.getSmisUserName());    accessProfile.setserialID(storageDevice.getSerialNumber());    accessProfile.setPassword(storageDevice.getSmisPassword());    accessProfile.setLastSampleTime(0L);  } else   if (StorageSystem.Type.isDriverManagedStorageSystem(storageDevice.getSystemType())) {    if (StorageSystem.Type.isProviderStorageSystem(storageDevice.getSystemType())) {      injectDiscoveryProfile(accessProfile,storageDevice);      StorageProvider provider=getActiveProviderForStorageSystem(storageDevice,accessProfile);      accessProfile.setPortNumber(provider.getPortNumber());    } else {      accessProfile.setSystemType(storageDevice.getSystemType());      accessProfile.setIpAddress(storageDevice.getIpAddress());      accessProfile.setUserName(storageDevice.getUsername());      accessProfile.setserialID(storageDevice.getSerialNumber());      accessProfile.setPassword(storageDevice.getPassword());      accessProfile.setPortNumber(storageDevice.getPortNumber());      accessProfile.setLastSampleTime(0L);    }    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else   if (storageDevice.getSystemType().equals(Type.unity.toString())) {    populateUnityAccessProfileForSystem(accessProfile,storageDevice);    if (null != nameSpace) {      accessProfile.setnamespace(nameSpace);    }  } else {    throw new RuntimeException("populateAccessProfile: Device type unknown : " + storageDevice.getSystemType());  }}  }
class C{  public boolean isSafeDeleteAvailable(@NotNull PsiElement element){  return false;}  }
class C{  public static void writeByteCollection(DataOutput out,Collection<Byte> col) throws IOException {  if (col != null) {    out.writeInt(col.size());    for (    Byte i : col)     out.writeByte(i);  } else   out.writeInt(-1);}  }
class C{  public boolean isBlockCarsEnabled(){  return (0 < (_blockOptions & BLOCK_CARS));}  }
class C{  public boolean matchCase(final Dictionary<String,?> map){  Object temp=null;  temp=map.get(id);  if (temp == null) {    return false;  }  if (comparator == PRESENT) {    return true;  }  final Object attr=temp;  try {    if (attr instanceof String) {      return compareStringCase(value,comparator,(String)attr);    } else     if (attr instanceof Number) {      return compareNumber(value.trim(),comparator,(Number)attr);    } else     if (attr instanceof String[]) {      final String[] array=(String[])attr;      if (array.length == 0) {        return false;      }      final String val=comparator == APPROX ? stripWhitespaces(value) : value;      for (int i=0; i < array.length; i++) {        if (compareStringCase(val,comparator,array[i])) {          return true;        }      }      return false;    } else     if (attr instanceof Boolean) {      return (comparator == EQUALS || comparator == APPROX) && ((Boolean)attr).equals(Boolean.valueOf(value));    } else     if (attr instanceof Character) {      return value.length() == 1 ? compareTyped(new Character(value.charAt(0)),comparator,(Character)attr) : false;    } else     if (attr instanceof Collection) {      final Collection<?> col=(Collection<?>)attr;      final Object[] obj=col.toArray();      return compareArrayCase(value,comparator,obj);    } else     if (attr instanceof Object[]) {      return compareArrayCase(value,comparator,(Object[])attr);    } else     if (attr.getClass().isArray()) {      for (int i=0; i < Array.getLength(attr); i++) {        final Object obj=Array.get(attr,i);        if (obj instanceof Number && compareNumber(value,comparator,(Number)obj) || obj instanceof Character && compareTyped(new Character(value.trim().charAt(0)),comparator,(Character)obj) || compareReflective(value,comparator,obj)) {          return true;        }      }      return false;    } else {      return compareReflective(value,comparator,attr);    }  } catch (  final Throwable t) {    return false;  }}  }
class C{  public static BlankFragment newInstance(String param1,int param2){  BlankFragment fragment=new BlankFragment();  Bundle args=new Bundle();  args.putString(ARG_PARAM1,param1);  args.putInt(ARG_PARAM2,param2);  fragment.setArguments(args);  return fragment;}  }
class C{  public static void restoreDefaultSetting(String key){  Object object=DEFAULT_MAP.get(key);  if (object != null) {    if (object instanceof String) {      SIMBRAIN_PREFERENCES.put(key,(String)object);    } else     if (object instanceof Double) {      SIMBRAIN_PREFERENCES.putDouble(key,(Double)object);    } else     if (object instanceof Integer) {      SIMBRAIN_PREFERENCES.putInt(key,(Integer)object);    } else     if (object instanceof Float) {      SIMBRAIN_PREFERENCES.putFloat(key,(Float)object);    }  }}  }
class C{  public Collection<AISValidationFailure> failures(){  return Collections.unmodifiableCollection(failureList);}  }
class C{  private TcpHostCandidate findCandidate(Component component,Socket socket){  InetAddress localAddress=socket.getLocalAddress();  int localPort=socket.getLocalPort();  for (  LocalCandidate candidate : component.getLocalCandidates()) {    TransportAddress transportAddress=candidate.getTransportAddress();    if (candidate instanceof TcpHostCandidate && Transport.TCP.equals(transportAddress.getTransport()) && localPort == transportAddress.getPort() && localAddress.equals(transportAddress.getAddress())) {      return (TcpHostCandidate)candidate;    }  }  return null;}  }
class C{  private void processReport(int id,long seqno,long time,D datum){  ThreadPosition tp=array.get(id);  if (tp == null) {    tp=new ThreadPosition();    tp.id=id;    tp.seqno=seqno;    tp.time=time;    tp.reportTime=System.currentTimeMillis();    tp.datum=datum;    array.put(id,tp);    if (head == null) {      head=tp;      tail=tp;    } else {      ThreadPosition nextTp=head;      while (nextTp != null) {        if (nextTp.seqno > tp.seqno) {          if (nextTp.before != null)           nextTp.before.after=tp;          tp.before=nextTp.before;          tp.after=nextTp;          nextTp.before=tp;          break;        }        nextTp=nextTp.after;      }      if (nextTp == null) {        tail.after=tp;        tp.before=tail;        tail=tp;      }      if (tp.before == null)       head=tp;    }  } else {    if (tp.seqno > seqno)     bug("Thread reporting position moved backwards: task=" + id + " previous seqno="+ tp.seqno+ " new seqno="+ seqno);    tp.seqno=seqno;    tp.time=time;    tp.reportTime=System.currentTimeMillis();    tp.datum=datum;    ThreadPosition nextTp=tp.after;    while (nextTp != null && tp.seqno > tp.after.seqno) {      if (tp.before != null)       tp.before.after=nextTp;      if (nextTp.after != null)       nextTp.after.before=tp;      nextTp.before=tp.before;      tp.after=nextTp.after;      nextTp.after=tp;      tp.before=nextTp;      if (head == tp)       head=nextTp;      nextTp=tp.after;    }    if (tp.after == null)     tail=tp;  }}  }
class C{  public void addFilter(ValueExpr theExpr){  mFilters.add(theExpr);}  }
class C{  public void connected(){}  }
class C{  public QuestNotStartedCondition(final String questname){  this.questname=checkNotNull(questname);}  }
class C{  VcfReader(TabixLineReader reader,VcfHeader header) throws IOException {  mIn=reader;  mHeader=header;  mNumSamples=mHeader.getNumberOfSamples();  setNext();}  }
class C{  public boolean isAllowedToResendTransfer() throws RcsPersistentStorageException, RcsGenericException {  try {    return mTransferInf.isAllowedToResendTransfer();  } catch (  Exception e) {    RcsPersistentStorageException.assertException(e);    throw new RcsGenericException(e);  }}  }
class C{  public static double powQuick(double value,double power){  if (USE_JDK_MATH) {    return STRICT_MATH ? StrictMath.pow(value,power) : Math.pow(value,power);  }  return FastMath.exp(power * FastMath.logQuick(value));}  }
class C{  public void testParameters() throws Exception {  Similarity sim=getSimilarity("text_params");  assertEquals(LMDirichletSimilarity.class,sim.getClass());  LMDirichletSimilarity lm=(LMDirichletSimilarity)sim;  assertEquals(1000f,lm.getMu(),0.01f);}  }
class C{  protected void startAnimationTimer(){  if (animator == null) {    animator=new Animator();  }  animator.start(getRepaintInterval());}  }
class C{  @Override public void eSet(int featureID,Object newValue){switch (featureID) {case StextPackage.TRANSITION_SPECIFICATION__REACTION:    setReaction((TransitionReaction)newValue);  return;}super.eSet(featureID,newValue);}  }
class C{  public int lastRemaining(int n){  int start=1;  int step=2;  int len=n;  boolean isFromLeft=true;  while (len != 1) {    len>>=1;    if (isFromLeft) {      start=start + step * len - step / 2;    } else {      start=start - step * len + step / 2;    }    step<<=1;    isFromLeft=!isFromLeft;  }  return start;}  }
class C{  public void testRenameFileSourceMissing() throws Exception {  create(igfsSecondary,paths(DIR,SUBDIR),paths(FILE));  create(igfs,null,null);  igfs.rename(FILE,FILE2);  checkExist(igfs,DIR,SUBDIR);  checkExist(igfs,igfsSecondary,FILE2);  checkNotExist(igfs,igfsSecondary,FILE);}  }
class C{  public final int yylength(){  return zzMarkedPos - zzStartRead;}  }
class C{  final void advance(){  for (; ; ) {    if (nextTableIndex >= 0) {      if ((nextEntry=entryAt(currentTable,nextTableIndex--)) != null)       break;    } else     if (nextSegmentIndex >= 0) {      Segment<K,V> seg=segmentAt(segments,nextSegmentIndex--);      if (seg != null && (currentTable=seg.table) != null)       nextTableIndex=currentTable.length - 1;    } else     break;  }}  }
class C{  public BasicBlock firstInCodeOrder(){  return (BasicBlock)_firstNode;}  }
class C{  public LocalProcessController(final int pid){  if (pid < 1) {    throw new IllegalArgumentException("Invalid pid '" + pid + "' specified");  }  this.pid=pid;}  }
class C{  public static void dumpCursor(Cursor cursor){  dumpCursor(cursor,System.out);}  }
class C{  public BigInteger validateDHKeyPair(AsymmetricCipherKeyPair pair){  DHPrivateKeyParameters priv=(DHPrivateKeyParameters)pair.getPrivate();  DHPublicKeyParameters pub=(DHPublicKeyParameters)pair.getPublic();  assertNotNull(priv);  assertNotNull(pub);  BigInteger g=Crypto.DH_GROUP_PARAMETERS.getG();  BigInteger p=Crypto.DH_GROUP_PARAMETERS.getP();  assertEquals("Tests that the public key y == g^(private key x) mod p",pub.getY(),g.modPow(priv.getX(),p));  BigInteger foo=new BigInteger(Crypto.DH_SUBGROUP_SIZE,Crypto.random);  BigInteger gToTheFoo=g.modPow(foo,Crypto.DH_GROUP_PARAMETERS.getP());  BigInteger fooInverse=foo.modInverse(Crypto.DH_GROUP_PARAMETERS.getQ());  BigInteger newG=gToTheFoo.modPow(fooInverse,Crypto.DH_GROUP_PARAMETERS.getP());  assertEquals("Tests that we can inverse group exponentiation",g,newG);  return priv.getX();}  }
class C{  @Override public void handlePatch(Operation patch){  State currentState=getState(patch);  State patchState=patch.getBody(State.class);  try {    validatePatch(currentState,patchState);    applyPatch(currentState,patchState);    validateState(currentState);    patch.complete();switch (currentState.taskInfo.stage) {case STARTED:      handleStartedStage(currentState,patchState);    break;case FAILED:case FINISHED:case CANCELLED:  break;default :throw new IllegalStateException(String.format("Invalid stage %s",currentState.taskInfo.stage));}} catch (Throwable e) {ServiceUtils.logSevere(this,e);if (!OperationUtils.isCompleted(patch)) {patch.fail(e);}}}  }
class C{  private static boolean isValid(long value,long minValue,long maxValue,long increment){  return minValue <= value && maxValue >= value && maxValue > minValue && increment != 0 && BigInteger.valueOf(increment).abs().compareTo(BigInteger.valueOf(maxValue).subtract(BigInteger.valueOf(minValue))) < 0;}  }
class C{  public CompiledST defineTemplate(String templateName,String template){  if (templateName.charAt(0) != '/')   templateName="/" + templateName;  try {    CompiledST impl=defineTemplate(templateName,new CommonToken(GroupParser.ID,templateName),null,template,null);    return impl;  } catch (  STException se) {  }  return null;}  }
class C{  @Override protected final Object clone(){  return this;}  }
class C{  protected boolean useDrawerToggle(){  return true;}  }
class C{  private void resetNextInetSocketAddress(Proxy proxy) throws IOException {  inetSocketAddresses=new ArrayList<>();  String socketHost;  int socketPort;  if (proxy.type() == Proxy.Type.DIRECT || proxy.type() == Proxy.Type.SOCKS) {    socketHost=address.url().host();    socketPort=address.url().port();  } else {    SocketAddress proxyAddress=proxy.address();    if (!(proxyAddress instanceof InetSocketAddress)) {      throw new IllegalArgumentException("Proxy.address() is not an " + "InetSocketAddress: " + proxyAddress.getClass());    }    InetSocketAddress proxySocketAddress=(InetSocketAddress)proxyAddress;    socketHost=getHostString(proxySocketAddress);    socketPort=proxySocketAddress.getPort();  }  if (socketPort < 1 || socketPort > 65535) {    throw new SocketException("No route to " + socketHost + ":"+ socketPort+ "; port is out of range");  }  if (proxy.type() == Proxy.Type.SOCKS) {    inetSocketAddresses.add(InetSocketAddress.createUnresolved(socketHost,socketPort));  } else {    List<InetAddress> addresses=address.dns().lookup(socketHost);    for (int i=0, size=addresses.size(); i < size; i++) {      InetAddress inetAddress=addresses.get(i);      inetSocketAddresses.add(new InetSocketAddress(inetAddress,socketPort));    }  }  nextInetSocketAddressIndex=0;}  }
class C{  public static void addImports(final CompilationUnitRewrite rewrite,ImportRewriteContext context,final ASTNode node,final Map<Name,String> typeImports,final Map<Name,String> staticImports,final boolean declarations){  addImports(rewrite,context,node,typeImports,staticImports,null,declarations);}  }
class C{  private String issueInventory(){  if (m_M_Locator_ID == 0)   throw new IllegalArgumentException("No Locator");  if (m_M_Product_ID == 0)   throw new IllegalArgumentException("No Product");  if (m_MovementQty == null || m_MovementQty.signum() == 0)   m_MovementQty=Env.ONE;  MProjectIssue pi=new MProjectIssue(m_project);  pi.setMandatory(m_M_Locator_ID,m_M_Product_ID,m_MovementQty);  if (m_MovementDate != null)   pi.setMovementDate(m_MovementDate);  if (m_Description != null && m_Description.length() > 0)   pi.setDescription(m_Description);  pi.process();  MProjectLine pl=new MProjectLine(m_project);  pl.setMProjectIssue(pi);  pl.saveEx();  addLog(pi.getLine(),pi.getMovementDate(),pi.getMovementQty(),null);  return "@Created@ 1";}  }
class C{  @DSGenerator(tool_name="Doppelganger",tool_version="2.0",generated_on="2014-09-03 15:00:47.305 -0400",hash_original_method="75025FE733C588323FB29CA64B72756D",hash_generated_method="FB333AB9EE3E9B39A75ADCDD9A7CC5B6") private URL createSearchURL(URL url) throws MalformedURLException {  if (url == null) {    return url;  }  String protocol=url.getProtocol();  if (isDirectory(url) || protocol.equals("jar")) {    return url;  }  if (factory == null) {    return new URL("jar","",-1,url.toString() + "!/");  }  return new URL("jar","",-1,url.toString() + "!/",factory.createURLStreamHandler("jar"));}  }
class C{  public double absDet(){  double absDet=1.0;  for (  double d : s)   absDet*=d;  return absDet;}  }
class C{  public RadialGradientApp(){  super("Radial Gradient");  JPanel panel=new JPanel();  panel.add(new SphereComponent());  add(panel);  pack();  setLocationRelativeTo(null);}  }
class C{  public static String generateXml(ApiClass element){  StringBuffer buffer=new StringBuffer(XML_START + element.name + XML_END+ "\n");  for (  ApiField field : element.fields) {    generateXml(field,1,buffer);  }  buffer.append(XML_START).append("/").append(element.name).append(XML_END);  return buffer.toString();}  }
class C{  @Override public void releaseView(){  mView=null;}  }
class C{  public void paintScrollBarThumbBackground(SynthContext context,Graphics g,int x,int y,int w,int h,int orientation){  paintBackground(context,g,x,y,w,h,orientation);}  }
class C{  public void addFatalError(String msg){  addFatalError(msg,null);}  }
class C{  public void addFirst(HDR obj){  hlist.add(0,(HDR)obj);}  }
class C{  protected boolean isAuthProcess(HttpServletRequest request){  boolean result=false;  result=(getUseLdap(request).booleanValue() && getUsingOSAuth(request).booleanValue()) || StringUtils.isNotEmpty(getName(request));  return result;}  }
class C{  public LogModule(Environment environment){  this.environment=environment;}  }
class C{  public int length(){  return m_length;}  }
class C{  public static void main(String[] args){  String serverName=null;  String Filename=null;  if (args.length > 0)   serverName=args[0];  if (args.length > 1)   Filename=args[1];  if (serverName == null || serverName.length() == 0) {    try {      serverName=InetAddress.getLocalHost().getHostName();    } catch (    Exception e) {      e.printStackTrace();    }  }  MD5EjbTest myMD5EjbTest=new MD5EjbTest(serverName,Filename);}  }
class C{  private void prepareTestEnvironment(){  given().body("{\"id\" : \"u1r1\"}").put("items/user1/res1");  given().body("{\"id\" : \"u1r2\"}").put("items/user1/res2");  given().body("{\"id\" : \"u2r1\"}").put("items/user2/res1");  given().body("{\"id\" : \"u2r2\"}").put("items/user2/res2");}  }
class C{  public CModuleNameLabel(final JTable table,final INaviModule module,final Color backgroundColor){  if (starImage == null) {    try {      starImage=new ImageIcon(CMain.class.getResource("data/star.png").toURI().toURL()).getImage();    } catch (    final MalformedURLException e) {    }catch (    final URISyntaxException e) {    }  }  m_table=table;  m_module=module;  if (normalFont == null) {    normalFont=new Font(this.getFont().getFontName(),Font.PLAIN,12);    normalBoldFont=new Font(this.getFont().getFontName(),Font.BOLD,12);  }  setBackground(backgroundColor);  setOpaque(true);}  }
class C{  public QName(String qname,PrefixResolver resolver,boolean validate){  String prefix=null;  _namespaceURI=null;  int indexOfNSSep=qname.indexOf(':');  if (indexOfNSSep > 0) {    prefix=qname.substring(0,indexOfNSSep);    if (prefix.equals("xml")) {      _namespaceURI=S_XMLNAMESPACEURI;    } else {      _namespaceURI=resolver.getNamespaceForPrefix(prefix);    }    if (null == _namespaceURI) {      throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_PREFIX_MUST_RESOLVE,new Object[]{prefix}));    }    _localName=qname.substring(indexOfNSSep + 1);  } else   if (indexOfNSSep == 0) {    throw new RuntimeException(XMLMessages.createXMLMessage(XMLErrorResources.ER_NAME_CANT_START_WITH_COLON,null));  } else {    _localName=qname;  }  if (validate) {    if ((_localName == null) || (!XML11Char.isXML11ValidNCName(_localName))) {      throw new IllegalArgumentException(XMLMessages.createXMLMessage(XMLErrorResources.ER_ARG_LOCALNAME_INVALID,null));    }  }  m_hashCode=toString().hashCode();  _prefix=prefix;}  }
class C{  private void startNotification(){  mNotifyManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);  mBuilder=new NotificationCompat.Builder(this).setContentTitle("Video Upload").setContentText("Upload in progress").setSmallIcon(android.R.drawable.stat_sys_upload).setTicker("Uploading video").setProgress(0,0,true);  mNotifyManager.notify(NOTIFICATION_ID,mBuilder.build());}  }
class C{  public boolean isCancelled(){  AsyncHttpRequest _request=request.get();  return _request == null || _request.isCancelled();}  }
class C{  public ToStringBuilder append(final String fieldName,final byte[] array){  style.append(buffer,fieldName,array,null);  return this;}  }
class C{  public static void main(String[] args){  Header.printHeader(SanralPopulationConverter.class.toString(),args);  String inputFile=args[0];  String idPrefix=args[1];  String subPopulation=args[2];  Double fraction=Double.parseDouble(args[3]);  String outputFile=args[4];  String attributesFile=args[5];  String inputCRS=args[6];  String outputCRS=args[7];  Boolean convertDurationToEndTime=Boolean.parseBoolean(args[8]);  SanralPopulationConverter.Run(inputFile,idPrefix,inputCRS,subPopulation,fraction,outputFile,attributesFile,outputCRS,convertDurationToEndTime);  Header.printFooter();}  }
class C{  protected HookExecutor.STATUS run() throws Exception {  this.hook.execute(events);  return HookExecutor.STATUS.EXECUTION_SCHEDULED;}  }
class C{  public void idle(){}  }
class C{  private void fciOrientbk(IKnowledge bk,Graph graph,List<Node> variables){  logger.log("info","Starting BK Orientation.");  for (Iterator<KnowledgeEdge> it=bk.forbiddenEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.ARROW);    graph.setEndpoint(from,to,Endpoint.CIRCLE);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  for (Iterator<KnowledgeEdge> it=bk.requiredEdgesIterator(); it.hasNext(); ) {    KnowledgeEdge edge=it.next();    Node from=SearchGraphUtils.translate(edge.getFrom(),variables);    Node to=SearchGraphUtils.translate(edge.getTo(),variables);    if (from == null || to == null) {      continue;    }    if (graph.getEdge(from,to) == null) {      continue;    }    graph.setEndpoint(to,from,Endpoint.TAIL);    graph.setEndpoint(from,to,Endpoint.ARROW);    logger.log("knowledgeOrientation",SearchLogUtils.edgeOrientedMsg("Knowledge",graph.getEdge(from,to)));  }  logger.log("info","Finishing BK Orientation.");}  }
class C{  public static void decode(DecodeReturn d){  String dat=d.data;  int x=d.pos;  int len=d.data.length();  for (; x < len; x++)   if (!Character.isWhitespace(dat.charAt(x)))   break;  if (x == len) {    d.type=DecodeReturn.T_ERROR;    d.s="Out of tokens";    return;  }switch (dat.charAt(x)) {case 't':    if (x + 3 < len && dat.charAt(x + 1) == 'r' && dat.charAt(x + 2) == 'u' && dat.charAt(x + 3) == 'e') {      d.type=DecodeReturn.T_BOOLEAN;      d.l=1;      d.pos=x + 4;      return;    } else {      d.type=DecodeReturn.T_ERROR;      d.s="Expected a (true) boolean";      return;    }case 'T':{    d.type=DecodeReturn.T_BOOLEAN;    d.l=1;    d.pos=x + 1;    return;  }case 'F':{  d.type=DecodeReturn.T_BOOLEAN;  d.l=0;  d.pos=x + 1;  return;}case 'f':if (x + 4 < len && dat.charAt(x + 1) == 'a' && dat.charAt(x + 2) == 'l' && dat.charAt(x + 3) == 's' && dat.charAt(x + 4) == 'e') {d.type=DecodeReturn.T_BOOLEAN;d.l=0;d.pos=x + 5;return;} else {boolean readHuman=false;String sf=null;int initial=x + 1;for (; x < len; x++) if (dat.charAt(x) == '|') break;if (x == initial) readHuman=true;if (x >= len) {  d.type=DecodeReturn.T_ERROR;  d.s="Expected a float";  return;}if (!readHuman) sf=dat.substring(initial,x);x++;int initial2=x;for (; x < len; x++) if (dat.charAt(x) == '|') break;if (x >= len) {  d.type=DecodeReturn.T_ERROR;  d.s="Expected a float";  return;}if (readHuman) sf=dat.substring(initial2,x);float f;try {  if (readHuman)   f=Float.parseFloat(sf); else   f=Float.intBitsToFloat(Integer.parseInt(sf));} catch (NumberFormatException e) {  d.type=DecodeReturn.T_ERROR;  d.s="Expected a float";  return;}d.type=DecodeReturn.T_FLOAT;d.d=f;d.pos=x + 1;return;}case 'd':{boolean readHuman=false;String sf=null;int initial=x + 1;for (; x < len; x++) if (dat.charAt(x) == '|') break;if (x == initial) readHuman=true;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Expected a double";return;}if (!readHuman) sf=dat.substring(initial,x);x++;int initial2=x;for (; x < len; x++) if (dat.charAt(x) == '|') break;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Expected a double";return;}if (readHuman) sf=dat.substring(initial2,x);double f;try {if (readHuman) f=Double.parseDouble(sf); else f=Double.longBitsToDouble(Long.parseLong(sf));} catch (NumberFormatException e) {d.type=DecodeReturn.T_ERROR;d.s="Expected a double";return;}d.type=DecodeReturn.T_DOUBLE;d.d=f;d.pos=x + 1;return;}case 'b':{int initial=x + 1;for (; x < len; x++) if (dat.charAt(x) == '|') break;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Expected a byte";return;}String sf=dat.substring(initial,x);byte f;try {f=Byte.parseByte(sf);} catch (NumberFormatException e) {d.type=DecodeReturn.T_ERROR;d.s="Expected a byte";return;}d.type=DecodeReturn.T_BYTE;d.l=f;d.pos=x + 1;return;}case 's':{int initial=x + 1;for (; x < len; x++) if (dat.charAt(x) == '|') break;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Expected a short";return;}String sf=dat.substring(initial,x);short f;try {f=Short.parseShort(sf);} catch (NumberFormatException e) {d.type=DecodeReturn.T_ERROR;d.s="Expected a short";return;}d.type=DecodeReturn.T_SHORT;d.l=f;d.pos=x + 1;return;}case 'i':{int initial=x + 1;for (; x < len; x++) if (dat.charAt(x) == '|') break;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Expected an int";return;}String sf=dat.substring(initial,x);int f;try {f=Integer.parseInt(sf);} catch (NumberFormatException e) {d.type=DecodeReturn.T_ERROR;d.s="Expected an int";return;}d.type=DecodeReturn.T_INT;d.l=f;d.pos=x + 1;return;}case 'l':{int initial=x + 1;for (; x < len; x++) if (dat.charAt(x) == '|') break;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Expected a long";return;}String sf=dat.substring(initial,x);long f;try {f=Long.parseLong(sf);} catch (NumberFormatException e) {d.type=DecodeReturn.T_ERROR;d.s="Expected a long";return;}d.type=DecodeReturn.T_LONG;d.l=f;d.pos=x + 1;return;}case '"':{StringBuilder sb=new StringBuilder();boolean inUnicode=false;x++;for (; x < len; x++) {char c=dat.charAt(x);if (c == '"') {if (inUnicode) {d.type=DecodeReturn.T_ERROR;d.s="Forgot to terminate Unicode with a '\\u' in the string";return;}d.type=DecodeReturn.T_STRING;d.s=sb.toString();d.pos=x + 1;return;} else if (c == '\\') {x++;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Unterminated String";return;}if (dat.charAt(x) != 'u' && inUnicode) {d.type=DecodeReturn.T_ERROR;d.s="Escape character in Unicode sequence";return;}switch (dat.charAt(x)) {case 'u':inUnicode=!inUnicode;break;case 'b':sb.append('\b');break;case 'n':sb.append('\n');break;case '"':sb.append('"');break;case '\'':sb.append('\'');break;case 't':sb.append('\t');break;case '\\':sb.append('\\');break;case '0':sb.append('\0');break;default :{d.type=DecodeReturn.T_ERROR;d.s="Bad escape char in String";return;}}} else if (inUnicode) {if (x + 3 >= len) {d.type=DecodeReturn.T_ERROR;d.s="Unterminated String";return;}try {sb.append((char)(Integer.decode("0x" + c + dat.charAt(x + 1)+ dat.charAt(x + 2)+ dat.charAt(x + 3)).intValue()));;x+=3;} catch (NumberFormatException e) {d.type=DecodeReturn.T_ERROR;d.s="Bad Unicode in String";return;}} else sb.append(c);}d.type=DecodeReturn.T_ERROR;d.s="Unterminated String";return;}case '\'':{x++;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Unterminated char";return;}char c=dat.charAt(x);if (c == '\\') {x++;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Unterminated char";return;}switch (dat.charAt(x)) {case 'u':if (x + 4 >= len) {d.type=DecodeReturn.T_ERROR;d.s="Unterminated char";return;}try {c=(char)(Integer.decode("0x" + dat.charAt(x + 1) + dat.charAt(x + 2)+ dat.charAt(x + 3)+ dat.charAt(x + 4)).intValue());} catch (NumberFormatException e) {d.type=DecodeReturn.T_ERROR;d.s="Bad Unicode in char";return;}x+=5;break;case 'b':c='\b';x++;break;case 'n':c='\n';x++;break;case '"':c='"';x++;break;case '\'':c='\'';x++;break;case 't':c='\t';x++;break;case '\\':c='\\';x++;break;case '0':c='\0';x++;break;default :{d.type=DecodeReturn.T_ERROR;d.s="Bad escape char in char";return;}}if (dat.charAt(x) != '\'') {d.type=DecodeReturn.T_ERROR;d.s="Bad char";return;}d.type=DecodeReturn.T_CHAR;d.l=c;d.pos=x + 1;return;} else {x++;if (x >= len) {d.type=DecodeReturn.T_ERROR;d.s="Unterminated char";return;}if (dat.charAt(x) != '\'') {d.type=DecodeReturn.T_ERROR;d.s="Bad char";return;}d.type=DecodeReturn.T_CHAR;d.l=c;d.pos=x + 1;return;}}default :d.type=DecodeReturn.T_ERROR;d.s="Unknown token";return;}}  }
class C{  public Falls(){  super();}  }
class C{  protected Object createJvmMemoryMBean(String groupName,String groupOid,ObjectName groupObjname,MBeanServer server){  if (server != null)   return new JvmMemoryImpl(this,server); else   return new JvmMemoryImpl(this);}  }
